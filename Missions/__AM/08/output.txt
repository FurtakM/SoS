// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 217 0 0
// PrepareRussian ;
  23: CALL 8276 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 71052 0 9
// Action ;
  79: CALL 13825 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 9
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 5
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 6
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 7
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 8
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// end ;
 167: LD_VAR 0 1
 171: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 172: LD_INT 22
 174: PUSH
 175: LD_INT 1
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: LD_INT 34
 184: PUSH
 185: LD_INT 6
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: PPUSH
 196: CALL_OW 69
 200: PUSH
 201: LD_INT 6
 203: GREATEREQUAL
 204: IFFALSE 216
 206: GO 208
 208: DISABLE
// SetAchievement ( ACH_ARMOR ) ; end_of_file
 209: LD_STRING ACH_ARMOR
 211: PPUSH
 212: CALL_OW 543
 216: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 217: LD_INT 0
 219: PPUSH
 220: PPUSH
 221: PPUSH
 222: PPUSH
 223: PPUSH
 224: PPUSH
 225: PPUSH
 226: PPUSH
 227: PPUSH
 228: PPUSH
 229: PPUSH
 230: PPUSH
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// uc_side := 1 ;
 235: LD_ADDR_OWVAR 20
 239: PUSH
 240: LD_INT 1
 242: ST_TO_ADDR
// uc_nation := 1 ;
 243: LD_ADDR_OWVAR 21
 247: PUSH
 248: LD_INT 1
 250: ST_TO_ADDR
// PrepareGammaBase ;
 251: CALL 2412 0 0
// x := 52 ;
 255: LD_ADDR_VAR 0 13
 259: PUSH
 260: LD_INT 52
 262: ST_TO_ADDR
// y := 16 ;
 263: LD_ADDR_VAR 0 14
 267: PUSH
 268: LD_INT 16
 270: ST_TO_ADDR
// case gammaCommander of 1 :
 271: LD_EXP 9
 275: PUSH
 276: LD_INT 1
 278: DOUBLE
 279: EQUAL
 280: IFTRUE 284
 282: GO 369
 284: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 285: LD_ADDR_EXP 12
 289: PUSH
 290: LD_STRING Donaldson
 292: PPUSH
 293: LD_INT 1
 295: PPUSH
 296: LD_STRING 04_
 298: PPUSH
 299: CALL 37536 0 3
 303: ST_TO_ADDR
// if HexInfo ( x , y ) then
 304: LD_VAR 0 13
 308: PPUSH
 309: LD_VAR 0 14
 313: PPUSH
 314: CALL_OW 428
 318: IFFALSE 336
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 320: LD_EXP 12
 324: PPUSH
 325: LD_EXP 26
 329: PPUSH
 330: CALL_OW 52
 334: GO 358
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 336: LD_EXP 12
 340: PPUSH
 341: LD_VAR 0 13
 345: PPUSH
 346: LD_VAR 0 14
 350: PPUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 48
// ComHold ( Donaldson ) ;
 358: LD_EXP 12
 362: PPUSH
 363: CALL_OW 140
// end ; 2 :
 367: GO 556
 369: LD_INT 2
 371: DOUBLE
 372: EQUAL
 373: IFTRUE 377
 375: GO 462
 377: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 378: LD_ADDR_EXP 11
 382: PUSH
 383: LD_STRING Brown
 385: PPUSH
 386: LD_INT 1
 388: PPUSH
 389: LD_STRING 04_
 391: PPUSH
 392: CALL 37536 0 3
 396: ST_TO_ADDR
// if HexInfo ( x , y ) then
 397: LD_VAR 0 13
 401: PPUSH
 402: LD_VAR 0 14
 406: PPUSH
 407: CALL_OW 428
 411: IFFALSE 429
// PlaceHumanInUnit ( Brown , amDepot ) else
 413: LD_EXP 11
 417: PPUSH
 418: LD_EXP 26
 422: PPUSH
 423: CALL_OW 52
 427: GO 451
// PlaceUnitXY ( Brown , x , y , false ) ;
 429: LD_EXP 11
 433: PPUSH
 434: LD_VAR 0 13
 438: PPUSH
 439: LD_VAR 0 14
 443: PPUSH
 444: LD_INT 0
 446: PPUSH
 447: CALL_OW 48
// ComHold ( Brown ) ;
 451: LD_EXP 11
 455: PPUSH
 456: CALL_OW 140
// end ; 3 :
 460: GO 556
 462: LD_INT 3
 464: DOUBLE
 465: EQUAL
 466: IFTRUE 470
 468: GO 555
 470: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 471: LD_ADDR_EXP 20
 475: PUSH
 476: LD_STRING VanHouten
 478: PPUSH
 479: LD_INT 0
 481: PPUSH
 482: LD_STRING 
 484: PPUSH
 485: CALL 37536 0 3
 489: ST_TO_ADDR
// if HexInfo ( x , y ) then
 490: LD_VAR 0 13
 494: PPUSH
 495: LD_VAR 0 14
 499: PPUSH
 500: CALL_OW 428
 504: IFFALSE 522
// PlaceHumanInUnit ( Houten , amDepot ) else
 506: LD_EXP 20
 510: PPUSH
 511: LD_EXP 26
 515: PPUSH
 516: CALL_OW 52
 520: GO 544
// PlaceUnitXY ( Houten , x , y , false ) ;
 522: LD_EXP 20
 526: PPUSH
 527: LD_VAR 0 13
 531: PPUSH
 532: LD_VAR 0 14
 536: PPUSH
 537: LD_INT 0
 539: PPUSH
 540: CALL_OW 48
// ComHold ( Houten ) ;
 544: LD_EXP 20
 548: PPUSH
 549: CALL_OW 140
// end ; end ;
 553: GO 556
 555: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 556: LD_ADDR_EXP 24
 560: PUSH
 561: LD_STRING Harisson
 563: PPUSH
 564: LD_INT 0
 566: PPUSH
 567: LD_STRING 
 569: PPUSH
 570: CALL 37536 0 3
 574: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 575: LD_ADDR_EXP 25
 579: PUSH
 580: LD_STRING Powell
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: LD_STRING 
 588: PPUSH
 589: CALL 37536 0 3
 593: ST_TO_ADDR
// tmp := [ ] ;
 594: LD_ADDR_VAR 0 4
 598: PUSH
 599: EMPTY
 600: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 601: LD_STRING 04_Lisa
 603: PUSH
 604: EMPTY
 605: LIST
 606: PPUSH
 607: CALL_OW 28
 611: PUSH
 612: LD_STRING LisaInDelta
 614: PPUSH
 615: LD_INT 0
 617: PPUSH
 618: CALL_OW 30
 622: NOT
 623: AND
 624: PUSH
 625: LD_STRING 07_Lisa
 627: PUSH
 628: EMPTY
 629: LIST
 630: PPUSH
 631: CALL_OW 28
 635: NOT
 636: AND
 637: IFFALSE 680
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 639: LD_ADDR_EXP 15
 643: PUSH
 644: LD_STRING Lisa
 646: PPUSH
 647: LD_INT 1
 649: PPUSH
 650: LD_STRING 04_
 652: PPUSH
 653: CALL 37536 0 3
 657: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 658: LD_ADDR_VAR 0 5
 662: PUSH
 663: LD_VAR 0 5
 667: PPUSH
 668: LD_EXP 15
 672: PPUSH
 673: CALL 74370 0 2
 677: ST_TO_ADDR
// end else
 678: GO 739
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 680: LD_EXP 15
 684: NOT
 685: PUSH
 686: LD_STRING LisaIn07
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 30
 696: NOT
 697: AND
 698: IFFALSE 739
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 700: LD_ADDR_EXP 15
 704: PUSH
 705: LD_STRING Lisa
 707: PPUSH
 708: LD_INT 1
 710: PPUSH
 711: LD_STRING 07_
 713: PPUSH
 714: CALL 37536 0 3
 718: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 719: LD_ADDR_VAR 0 5
 723: PUSH
 724: LD_VAR 0 5
 728: PPUSH
 729: LD_EXP 15
 733: PPUSH
 734: CALL 74370 0 2
 738: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 739: LD_STRING 04_Bobby
 741: PUSH
 742: EMPTY
 743: LIST
 744: PPUSH
 745: CALL_OW 28
 749: PUSH
 750: LD_STRING BobbyInDelta
 752: PPUSH
 753: LD_INT 0
 755: PPUSH
 756: CALL_OW 30
 760: NOT
 761: AND
 762: PUSH
 763: LD_STRING 07_Bobby
 765: PUSH
 766: EMPTY
 767: LIST
 768: PPUSH
 769: CALL_OW 28
 773: NOT
 774: AND
 775: IFFALSE 818
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 777: LD_ADDR_EXP 13
 781: PUSH
 782: LD_STRING Bobby
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: LD_STRING 04_
 790: PPUSH
 791: CALL 37536 0 3
 795: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 796: LD_ADDR_VAR 0 5
 800: PUSH
 801: LD_VAR 0 5
 805: PPUSH
 806: LD_EXP 13
 810: PPUSH
 811: CALL 74370 0 2
 815: ST_TO_ADDR
// end else
 816: GO 877
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 818: LD_EXP 13
 822: NOT
 823: PUSH
 824: LD_STRING BobbyIn07
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: CALL_OW 30
 834: NOT
 835: AND
 836: IFFALSE 877
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 838: LD_ADDR_EXP 13
 842: PUSH
 843: LD_STRING Bobby
 845: PPUSH
 846: LD_INT 1
 848: PPUSH
 849: LD_STRING 07_
 851: PPUSH
 852: CALL 37536 0 3
 856: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 857: LD_ADDR_VAR 0 5
 861: PUSH
 862: LD_VAR 0 5
 866: PPUSH
 867: LD_EXP 13
 871: PPUSH
 872: CALL 74370 0 2
 876: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 877: LD_STRING 04_Cyrus
 879: PUSH
 880: EMPTY
 881: LIST
 882: PPUSH
 883: CALL_OW 28
 887: PUSH
 888: LD_STRING CyrusInDelta
 890: PPUSH
 891: LD_INT 0
 893: PPUSH
 894: CALL_OW 30
 898: NOT
 899: AND
 900: PUSH
 901: LD_STRING 07_Cyrus
 903: PUSH
 904: EMPTY
 905: LIST
 906: PPUSH
 907: CALL_OW 28
 911: NOT
 912: AND
 913: IFFALSE 956
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
 915: LD_ADDR_EXP 14
 919: PUSH
 920: LD_STRING Cyrus
 922: PPUSH
 923: LD_INT 1
 925: PPUSH
 926: LD_STRING 04_
 928: PPUSH
 929: CALL 37536 0 3
 933: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
 934: LD_ADDR_VAR 0 5
 938: PUSH
 939: LD_VAR 0 5
 943: PPUSH
 944: LD_EXP 14
 948: PPUSH
 949: CALL 74370 0 2
 953: ST_TO_ADDR
// end else
 954: GO 1015
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
 956: LD_EXP 14
 960: NOT
 961: PUSH
 962: LD_STRING CyrusIn07
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 30
 972: NOT
 973: AND
 974: IFFALSE 1015
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 976: LD_ADDR_EXP 14
 980: PUSH
 981: LD_STRING Cyrus
 983: PPUSH
 984: LD_INT 1
 986: PPUSH
 987: LD_STRING 07_
 989: PPUSH
 990: CALL 37536 0 3
 994: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
 995: LD_ADDR_VAR 0 5
 999: PUSH
1000: LD_VAR 0 5
1004: PPUSH
1005: LD_EXP 14
1009: PPUSH
1010: CALL 74370 0 2
1014: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1015: LD_STRING 04_Brown
1017: PUSH
1018: EMPTY
1019: LIST
1020: PPUSH
1021: CALL_OW 28
1025: PUSH
1026: LD_STRING BrownInDelta
1028: PPUSH
1029: LD_INT 0
1031: PPUSH
1032: CALL_OW 30
1036: NOT
1037: AND
1038: PUSH
1039: LD_STRING 07_Brown
1041: PUSH
1042: EMPTY
1043: LIST
1044: PPUSH
1045: CALL_OW 28
1049: NOT
1050: AND
1051: PUSH
1052: LD_EXP 9
1056: PUSH
1057: LD_INT 2
1059: NONEQUAL
1060: AND
1061: IFFALSE 1104
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1063: LD_ADDR_EXP 11
1067: PUSH
1068: LD_STRING Brown
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: LD_STRING 04_
1076: PPUSH
1077: CALL 37536 0 3
1081: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1082: LD_ADDR_VAR 0 5
1086: PUSH
1087: LD_VAR 0 5
1091: PPUSH
1092: LD_EXP 11
1096: PPUSH
1097: CALL 74370 0 2
1101: ST_TO_ADDR
// end else
1102: GO 1173
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1104: LD_EXP 11
1108: NOT
1109: PUSH
1110: LD_STRING BrownIn07
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: CALL_OW 30
1120: NOT
1121: AND
1122: PUSH
1123: LD_EXP 9
1127: PUSH
1128: LD_INT 2
1130: NONEQUAL
1131: AND
1132: IFFALSE 1173
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1134: LD_ADDR_EXP 11
1138: PUSH
1139: LD_STRING Brown
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_STRING 07_
1147: PPUSH
1148: CALL 37536 0 3
1152: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1153: LD_ADDR_VAR 0 5
1157: PUSH
1158: LD_VAR 0 5
1162: PPUSH
1163: LD_EXP 11
1167: PPUSH
1168: CALL 74370 0 2
1172: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1173: LD_STRING 04_Donaldson
1175: PUSH
1176: EMPTY
1177: LIST
1178: PPUSH
1179: CALL_OW 28
1183: PUSH
1184: LD_STRING DonaldsonInDelta
1186: PPUSH
1187: LD_INT 0
1189: PPUSH
1190: CALL_OW 30
1194: NOT
1195: AND
1196: PUSH
1197: LD_STRING 07_Donaldson
1199: PUSH
1200: EMPTY
1201: LIST
1202: PPUSH
1203: CALL_OW 28
1207: NOT
1208: AND
1209: PUSH
1210: LD_EXP 9
1214: PUSH
1215: LD_INT 1
1217: NONEQUAL
1218: AND
1219: IFFALSE 1262
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1221: LD_ADDR_EXP 12
1225: PUSH
1226: LD_STRING Donaldson
1228: PPUSH
1229: LD_INT 1
1231: PPUSH
1232: LD_STRING 04_
1234: PPUSH
1235: CALL 37536 0 3
1239: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1240: LD_ADDR_VAR 0 5
1244: PUSH
1245: LD_VAR 0 5
1249: PPUSH
1250: LD_EXP 12
1254: PPUSH
1255: CALL 74370 0 2
1259: ST_TO_ADDR
// end else
1260: GO 1331
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1262: LD_EXP 12
1266: NOT
1267: PUSH
1268: LD_STRING DonaldsonIn07
1270: PPUSH
1271: LD_INT 0
1273: PPUSH
1274: CALL_OW 30
1278: NOT
1279: AND
1280: PUSH
1281: LD_EXP 9
1285: PUSH
1286: LD_INT 1
1288: NONEQUAL
1289: AND
1290: IFFALSE 1331
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1292: LD_ADDR_EXP 12
1296: PUSH
1297: LD_STRING Donaldson
1299: PPUSH
1300: LD_INT 1
1302: PPUSH
1303: LD_STRING 07_
1305: PPUSH
1306: CALL 37536 0 3
1310: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1311: LD_ADDR_VAR 0 5
1315: PUSH
1316: LD_VAR 0 5
1320: PPUSH
1321: LD_EXP 12
1325: PPUSH
1326: CALL 74370 0 2
1330: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1331: LD_STRING KhatamIn07
1333: PPUSH
1334: LD_INT 0
1336: PPUSH
1337: CALL_OW 30
1341: NOT
1342: IFFALSE 1383
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1344: LD_ADDR_EXP 19
1348: PUSH
1349: LD_STRING Khatam
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: LD_STRING 07_
1357: PPUSH
1358: CALL 37536 0 3
1362: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1363: LD_ADDR_VAR 0 5
1367: PUSH
1368: LD_VAR 0 5
1372: PPUSH
1373: LD_EXP 19
1377: PPUSH
1378: CALL 74370 0 2
1382: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1383: LD_ADDR_VAR 0 6
1387: PUSH
1388: LD_STRING 07_othersGamma
1390: PPUSH
1391: CALL_OW 31
1395: ST_TO_ADDR
// tmp := 5 - others ;
1396: LD_ADDR_VAR 0 4
1400: PUSH
1401: LD_INT 5
1403: PUSH
1404: LD_VAR 0 6
1408: MINUS
1409: ST_TO_ADDR
// if tmp then
1410: LD_VAR 0 4
1414: IFFALSE 1471
// for i := tmp downto 1 do
1416: LD_ADDR_VAR 0 2
1420: PUSH
1421: DOUBLE
1422: LD_VAR 0 4
1426: INC
1427: ST_TO_ADDR
1428: LD_INT 1
1430: PUSH
1431: FOR_DOWNTO
1432: IFFALSE 1469
// begin PrepareHuman ( false , 1 , 5 ) ;
1434: LD_INT 0
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: LD_INT 5
1442: PPUSH
1443: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1447: LD_ADDR_VAR 0 6
1451: PUSH
1452: LD_VAR 0 6
1456: PPUSH
1457: CALL_OW 44
1461: PPUSH
1462: CALL 74370 0 2
1466: ST_TO_ADDR
// end ;
1467: GO 1431
1469: POP
1470: POP
// for i in others do
1471: LD_ADDR_VAR 0 2
1475: PUSH
1476: LD_VAR 0 6
1480: PUSH
1481: FOR_IN
1482: IFFALSE 1498
// SetTag ( i , 106 ) ;
1484: LD_VAR 0 2
1488: PPUSH
1489: LD_INT 106
1491: PPUSH
1492: CALL_OW 109
1496: GO 1481
1498: POP
1499: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1500: LD_ADDR_VAR 0 8
1504: PUSH
1505: LD_INT 22
1507: PUSH
1508: LD_INT 1
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PUSH
1515: LD_INT 30
1517: PUSH
1518: LD_INT 31
1520: PUSH
1521: EMPTY
1522: LIST
1523: LIST
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PPUSH
1529: CALL_OW 69
1533: ST_TO_ADDR
// for i in bun do
1534: LD_ADDR_VAR 0 2
1538: PUSH
1539: LD_VAR 0 8
1543: PUSH
1544: FOR_IN
1545: IFFALSE 1677
// begin x := GetX ( i ) ;
1547: LD_ADDR_VAR 0 13
1551: PUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 250
1561: ST_TO_ADDR
// y := GetY ( i ) ;
1562: LD_ADDR_VAR 0 14
1566: PUSH
1567: LD_VAR 0 2
1571: PPUSH
1572: CALL_OW 251
1576: ST_TO_ADDR
// d := GetDir ( i ) ;
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 2
1586: PPUSH
1587: CALL_OW 254
1591: ST_TO_ADDR
// RemoveUnit ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 64
// bc_type := b_bunker ;
1601: LD_ADDR_OWVAR 42
1605: PUSH
1606: LD_INT 32
1608: ST_TO_ADDR
// bc_level := 6 ;
1609: LD_ADDR_OWVAR 43
1613: PUSH
1614: LD_INT 6
1616: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1617: LD_ADDR_VAR 0 16
1621: PUSH
1622: LD_VAR 0 13
1626: PPUSH
1627: LD_VAR 0 14
1631: PPUSH
1632: LD_VAR 0 15
1636: PPUSH
1637: CALL_OW 47
1641: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1642: LD_VAR 0 16
1646: PPUSH
1647: LD_INT 5
1649: PUSH
1650: LD_INT 4
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: LD_VAR 0 2
1661: PUSH
1662: LD_INT 2
1664: MOD
1665: PUSH
1666: LD_INT 1
1668: PLUS
1669: ARRAY
1670: PPUSH
1671: CALL_OW 431
// end ;
1675: GO 1544
1677: POP
1678: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1679: LD_ADDR_VAR 0 7
1683: PUSH
1684: LD_INT 22
1686: PUSH
1687: LD_INT 1
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: PUSH
1694: LD_INT 30
1696: PUSH
1697: LD_INT 5
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PPUSH
1708: CALL_OW 69
1712: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1713: LD_ADDR_VAR 0 9
1717: PUSH
1718: LD_INT 22
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_INT 2
1730: PUSH
1731: LD_INT 30
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 30
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PUSH
1751: LD_INT 30
1753: PUSH
1754: LD_INT 8
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PPUSH
1771: CALL_OW 69
1775: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1776: LD_ADDR_VAR 0 10
1780: PUSH
1781: LD_INT 22
1783: PUSH
1784: LD_INT 1
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 30
1793: PUSH
1794: LD_INT 3
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: PUSH
1801: EMPTY
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 69
1809: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1810: LD_ADDR_VAR 0 11
1814: PUSH
1815: LD_INT 22
1817: PUSH
1818: LD_INT 1
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PUSH
1825: LD_INT 30
1827: PUSH
1828: LD_INT 36
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: PPUSH
1839: CALL_OW 69
1843: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1844: LD_ADDR_VAR 0 8
1848: PUSH
1849: LD_INT 22
1851: PUSH
1852: LD_INT 1
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PUSH
1859: LD_INT 2
1861: PUSH
1862: LD_INT 30
1864: PUSH
1865: LD_INT 31
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 30
1874: PUSH
1875: LD_INT 32
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: ST_TO_ADDR
// for i in others union tmp2 do
1896: LD_ADDR_VAR 0 2
1900: PUSH
1901: LD_VAR 0 6
1905: PUSH
1906: LD_VAR 0 5
1910: UNION
1911: PUSH
1912: FOR_IN
1913: IFFALSE 2405
// begin placed := false ;
1915: LD_ADDR_VAR 0 12
1919: PUSH
1920: LD_INT 0
1922: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1923: LD_VAR 0 2
1927: PPUSH
1928: CALL_OW 257
1932: PUSH
1933: LD_INT 1
1935: EQUAL
1936: IFFALSE 2061
// begin if UnitFilter ( bun , [ f_empty ] ) then
1938: LD_VAR 0 8
1942: PPUSH
1943: LD_INT 58
1945: PUSH
1946: EMPTY
1947: LIST
1948: PPUSH
1949: CALL_OW 72
1953: IFFALSE 1992
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1955: LD_VAR 0 2
1959: PPUSH
1960: LD_VAR 0 8
1964: PPUSH
1965: LD_INT 58
1967: PUSH
1968: EMPTY
1969: LIST
1970: PPUSH
1971: CALL_OW 72
1975: PUSH
1976: LD_INT 1
1978: ARRAY
1979: PPUSH
1980: CALL_OW 52
// placed := true ;
1984: LD_ADDR_VAR 0 12
1988: PUSH
1989: LD_INT 1
1991: ST_TO_ADDR
// end ; if arm and not placed then
1992: LD_VAR 0 7
1996: PUSH
1997: LD_VAR 0 12
2001: NOT
2002: AND
2003: IFFALSE 2061
// begin for j in arm do
2005: LD_ADDR_VAR 0 3
2009: PUSH
2010: LD_VAR 0 7
2014: PUSH
2015: FOR_IN
2016: IFFALSE 2059
// if UnitsInside ( j ) < 6 then
2018: LD_VAR 0 3
2022: PPUSH
2023: CALL_OW 313
2027: PUSH
2028: LD_INT 6
2030: LESS
2031: IFFALSE 2057
// begin PlaceHumanInUnit ( i , j ) ;
2033: LD_VAR 0 2
2037: PPUSH
2038: LD_VAR 0 3
2042: PPUSH
2043: CALL_OW 52
// placed := true ;
2047: LD_ADDR_VAR 0 12
2051: PUSH
2052: LD_INT 1
2054: ST_TO_ADDR
// break ;
2055: GO 2059
// end ;
2057: GO 2015
2059: POP
2060: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2061: LD_VAR 0 2
2065: PPUSH
2066: CALL_OW 257
2070: PUSH
2071: LD_INT 2
2073: EQUAL
2074: IFFALSE 2107
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2076: LD_VAR 0 2
2080: PPUSH
2081: LD_INT 52
2083: PPUSH
2084: LD_INT 20
2086: PPUSH
2087: LD_INT 6
2089: PPUSH
2090: LD_INT 0
2092: PPUSH
2093: CALL_OW 50
// placed := true ;
2097: LD_ADDR_VAR 0 12
2101: PUSH
2102: LD_INT 1
2104: ST_TO_ADDR
// continue ;
2105: GO 1912
// end ; if GetClass ( i ) = class_mechanic then
2107: LD_VAR 0 2
2111: PPUSH
2112: CALL_OW 257
2116: PUSH
2117: LD_INT 3
2119: EQUAL
2120: IFFALSE 2224
// begin if fac then
2122: LD_VAR 0 10
2126: IFFALSE 2224
// begin if ct then
2128: LD_VAR 0 11
2132: IFFALSE 2160
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2134: LD_VAR 0 2
2138: PPUSH
2139: LD_VAR 0 11
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: PPUSH
2148: CALL_OW 52
// placed := true ;
2152: LD_ADDR_VAR 0 12
2156: PUSH
2157: LD_INT 1
2159: ST_TO_ADDR
// end ; if placed then
2160: LD_VAR 0 12
2164: IFFALSE 2168
// continue ;
2166: GO 1912
// for j in fac do
2168: LD_ADDR_VAR 0 3
2172: PUSH
2173: LD_VAR 0 10
2177: PUSH
2178: FOR_IN
2179: IFFALSE 2222
// if UnitsInside ( j ) < 6 then
2181: LD_VAR 0 3
2185: PPUSH
2186: CALL_OW 313
2190: PUSH
2191: LD_INT 6
2193: LESS
2194: IFFALSE 2220
// begin PlaceHumanInUnit ( i , j ) ;
2196: LD_VAR 0 2
2200: PPUSH
2201: LD_VAR 0 3
2205: PPUSH
2206: CALL_OW 52
// placed := true ;
2210: LD_ADDR_VAR 0 12
2214: PUSH
2215: LD_INT 1
2217: ST_TO_ADDR
// break ;
2218: GO 2222
// end ;
2220: GO 2178
2222: POP
2223: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2224: LD_VAR 0 2
2228: PPUSH
2229: CALL_OW 257
2233: PUSH
2234: LD_INT 4
2236: EQUAL
2237: IFFALSE 2332
// begin if lab then
2239: LD_VAR 0 9
2243: IFFALSE 2301
// begin for j in lab do
2245: LD_ADDR_VAR 0 3
2249: PUSH
2250: LD_VAR 0 9
2254: PUSH
2255: FOR_IN
2256: IFFALSE 2299
// if UnitsInside ( j ) < 6 then
2258: LD_VAR 0 3
2262: PPUSH
2263: CALL_OW 313
2267: PUSH
2268: LD_INT 6
2270: LESS
2271: IFFALSE 2297
// begin PlaceHumanInUnit ( i , j ) ;
2273: LD_VAR 0 2
2277: PPUSH
2278: LD_VAR 0 3
2282: PPUSH
2283: CALL_OW 52
// placed := true ;
2287: LD_ADDR_VAR 0 12
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// break ;
2295: GO 2299
// end ;
2297: GO 2255
2299: POP
2300: POP
// end ; if not placed then
2301: LD_VAR 0 12
2305: NOT
2306: IFFALSE 2332
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2308: LD_VAR 0 2
2312: PPUSH
2313: LD_INT 3
2315: PPUSH
2316: LD_INT 0
2318: PPUSH
2319: CALL_OW 49
// ComHold ( i ) ;
2323: LD_VAR 0 2
2327: PPUSH
2328: CALL_OW 140
// end ; end ; if ct then
2332: LD_VAR 0 11
2336: IFFALSE 2403
// if UnitsInside ( ct [ 1 ] ) then
2338: LD_VAR 0 11
2342: PUSH
2343: LD_INT 1
2345: ARRAY
2346: PPUSH
2347: CALL_OW 313
2351: IFFALSE 2403
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2353: LD_ADDR_VAR 0 2
2357: PUSH
2358: LD_INT 22
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: PUSH
2368: LD_INT 33
2370: PUSH
2371: LD_INT 2
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: PPUSH
2382: CALL_OW 69
2386: PUSH
2387: FOR_IN
2388: IFFALSE 2401
// Connect ( i ) ;
2390: LD_VAR 0 2
2394: PPUSH
2395: CALL 45646 0 1
2399: GO 2387
2401: POP
2402: POP
// end ; end ;
2403: GO 1912
2405: POP
2406: POP
// end ;
2407: LD_VAR 0 1
2411: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2412: LD_INT 0
2414: PPUSH
2415: PPUSH
2416: PPUSH
2417: PPUSH
2418: PPUSH
2419: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2420: LD_INT 71
2422: PPUSH
2423: LD_INT 5
2425: PPUSH
2426: LD_INT 1
2428: PPUSH
2429: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2433: LD_ADDR_VAR 0 2
2437: PUSH
2438: LD_STRING GammaBase
2440: PPUSH
2441: EMPTY
2442: PPUSH
2443: CALL_OW 30
2447: ST_TO_ADDR
// if not blist then
2448: LD_VAR 0 2
2452: NOT
2453: IFFALSE 2493
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2455: LD_ADDR_VAR 0 2
2459: PUSH
2460: LD_INT 1
2462: PUSH
2463: LD_INT 52
2465: PUSH
2466: LD_INT 12
2468: PUSH
2469: LD_INT 3
2471: PUSH
2472: LD_INT 3
2474: PUSH
2475: LD_INT 0
2477: PUSH
2478: LD_INT 0
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: PUSH
2490: EMPTY
2491: LIST
2492: ST_TO_ADDR
// uc_side := 1 ;
2493: LD_ADDR_OWVAR 20
2497: PUSH
2498: LD_INT 1
2500: ST_TO_ADDR
// uc_nation := 1 ;
2501: LD_ADDR_OWVAR 21
2505: PUSH
2506: LD_INT 1
2508: ST_TO_ADDR
// bc_kind1 := - 1 ;
2509: LD_ADDR_OWVAR 44
2513: PUSH
2514: LD_INT 1
2516: NEG
2517: ST_TO_ADDR
// bc_kind2 := - 1 ;
2518: LD_ADDR_OWVAR 45
2522: PUSH
2523: LD_INT 1
2525: NEG
2526: ST_TO_ADDR
// for i in blist do
2527: LD_ADDR_VAR 0 3
2531: PUSH
2532: LD_VAR 0 2
2536: PUSH
2537: FOR_IN
2538: IFFALSE 2814
// begin bc_type := i [ 1 ] ;
2540: LD_ADDR_OWVAR 42
2544: PUSH
2545: LD_VAR 0 3
2549: PUSH
2550: LD_INT 1
2552: ARRAY
2553: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2554: LD_ADDR_OWVAR 43
2558: PUSH
2559: LD_VAR 0 3
2563: PUSH
2564: LD_INT 5
2566: ARRAY
2567: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2568: LD_OWVAR 42
2572: PUSH
2573: LD_INT 6
2575: PUSH
2576: LD_INT 7
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: IN
2583: IFFALSE 2649
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2585: LD_STRING 06_remoteVehs_1
2587: PPUSH
2588: LD_INT 0
2590: PPUSH
2591: CALL_OW 30
2595: NOT
2596: IFFALSE 2624
// begin bc_type := b_lab_full ;
2598: LD_ADDR_OWVAR 42
2602: PUSH
2603: LD_INT 8
2605: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2606: LD_ADDR_OWVAR 44
2610: PUSH
2611: LD_INT 10
2613: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2614: LD_ADDR_OWVAR 45
2618: PUSH
2619: LD_INT 15
2621: ST_TO_ADDR
// end else
2622: GO 2649
// begin bc_type := b_lab_half ;
2624: LD_ADDR_OWVAR 42
2628: PUSH
2629: LD_INT 7
2631: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2632: LD_ADDR_OWVAR 44
2636: PUSH
2637: LD_INT 10
2639: ST_TO_ADDR
// bc_kind2 := - 1 ;
2640: LD_ADDR_OWVAR 45
2644: PUSH
2645: LD_INT 1
2647: NEG
2648: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2649: LD_OWVAR 42
2653: PUSH
2654: LD_INT 2
2656: EQUAL
2657: IFFALSE 2667
// bc_type := b_factory ;
2659: LD_ADDR_OWVAR 42
2663: PUSH
2664: LD_INT 3
2666: ST_TO_ADDR
// if bc_type = b_depot then
2667: LD_OWVAR 42
2671: PUSH
2672: LD_INT 0
2674: EQUAL
2675: IFFALSE 2724
// begin bc_type := b_warehouse ;
2677: LD_ADDR_OWVAR 42
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2685: LD_ADDR_EXP 26
2689: PUSH
2690: LD_VAR 0 3
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 3
2706: ARRAY
2707: PPUSH
2708: LD_VAR 0 3
2712: PUSH
2713: LD_INT 4
2715: ARRAY
2716: PPUSH
2717: CALL_OW 47
2721: ST_TO_ADDR
// continue ;
2722: GO 2537
// end ; if bc_type = b_armoury then
2724: LD_OWVAR 42
2728: PUSH
2729: LD_INT 4
2731: EQUAL
2732: IFFALSE 2742
// bc_type = b_barracks ;
2734: LD_ADDR_OWVAR 42
2738: PUSH
2739: LD_INT 5
2741: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 2
2754: ARRAY
2755: PPUSH
2756: LD_VAR 0 3
2760: PUSH
2761: LD_INT 3
2763: ARRAY
2764: PPUSH
2765: LD_VAR 0 3
2769: PUSH
2770: LD_INT 4
2772: ARRAY
2773: PPUSH
2774: CALL_OW 47
2778: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2779: LD_VAR 0 4
2783: PPUSH
2784: CALL_OW 266
2788: PUSH
2789: LD_INT 32
2791: EQUAL
2792: IFFALSE 2812
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_VAR 0 3
2803: PUSH
2804: LD_INT 7
2806: ARRAY
2807: PPUSH
2808: CALL_OW 431
// end ;
2812: GO 2537
2814: POP
2815: POP
// if not amDepot then
2816: LD_EXP 26
2820: NOT
2821: IFFALSE 2858
// begin bc_type := b_warehouse ;
2823: LD_ADDR_OWVAR 42
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// bc_level := 6 ;
2831: LD_ADDR_OWVAR 43
2835: PUSH
2836: LD_INT 6
2838: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2839: LD_ADDR_EXP 26
2843: PUSH
2844: LD_INT 52
2846: PPUSH
2847: LD_INT 12
2849: PPUSH
2850: LD_INT 3
2852: PPUSH
2853: CALL_OW 47
2857: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2858: LD_ADDR_OWVAR 42
2862: PUSH
2863: LD_INT 5
2865: ST_TO_ADDR
// bc_level := 6 ;
2866: LD_ADDR_OWVAR 43
2870: PUSH
2871: LD_INT 6
2873: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2874: LD_INT 61
2876: PPUSH
2877: LD_INT 29
2879: PPUSH
2880: LD_INT 5
2882: PPUSH
2883: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2887: LD_EXP 26
2891: PPUSH
2892: LD_STRING gamma
2894: PPUSH
2895: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2899: LD_EXP 26
2903: PPUSH
2904: CALL_OW 274
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: LD_INT 400
2914: PUSH
2915: LD_INT 320
2917: PUSH
2918: LD_INT 270
2920: PUSH
2921: LD_INT 230
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_OWVAR 67
2934: ARRAY
2935: PPUSH
2936: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2940: LD_EXP 26
2944: PPUSH
2945: CALL_OW 274
2949: PPUSH
2950: LD_INT 2
2952: PPUSH
2953: LD_INT 130
2955: PPUSH
2956: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 30
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: IFFALSE 3236
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_INT 22
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_INT 30
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PPUSH
3019: CALL_OW 69
3023: PUSH
3024: LD_INT 1
3026: ARRAY
3027: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3028: LD_ADDR_VAR 0 6
3032: PUSH
3033: LD_VAR 0 4
3037: PPUSH
3038: CALL_OW 250
3042: PPUSH
3043: LD_VAR 0 4
3047: PPUSH
3048: CALL_OW 251
3052: PPUSH
3053: LD_VAR 0 4
3057: PPUSH
3058: CALL_OW 254
3062: PPUSH
3063: CALL 72009 0 3
3067: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: LD_INT 19
3075: PUSH
3076: LD_INT 17
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3083: LD_STRING 06_remoteVehs_1
3085: PPUSH
3086: LD_INT 0
3088: PPUSH
3089: CALL_OW 30
3093: IFFALSE 3116
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: LD_VAR 0 2
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: LD_INT 22
3110: PPUSH
3111: CALL_OW 2
3115: ST_TO_ADDR
// for i in tmp do
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_VAR 0 6
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3234
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3129: LD_VAR 0 3
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: LD_VAR 0 3
3142: PUSH
3143: LD_INT 2
3145: ARRAY
3146: PPUSH
3147: CALL_OW 428
3151: PUSH
3152: LD_INT 0
3154: EQUAL
3155: IFFALSE 3232
// begin bc_type := blist [ 1 ] ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_VAR 0 2
3166: PUSH
3167: LD_INT 1
3169: ARRAY
3170: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3171: LD_VAR 0 3
3175: PUSH
3176: LD_INT 1
3178: ARRAY
3179: PPUSH
3180: LD_VAR 0 3
3184: PUSH
3185: LD_INT 2
3187: ARRAY
3188: PPUSH
3189: LD_VAR 0 3
3193: PUSH
3194: LD_INT 3
3196: ARRAY
3197: PPUSH
3198: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: CALL_OW 3
3219: ST_TO_ADDR
// if blist = 0 then
3220: LD_VAR 0 2
3224: PUSH
3225: LD_INT 0
3227: EQUAL
3228: IFFALSE 3232
// break ;
3230: GO 3234
// end ;
3232: GO 3126
3234: POP
3235: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3236: LD_STRING 06_remoteVehs_1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 30
3246: IFFALSE 3699
// begin bc_type := b_control_tower ;
3248: LD_ADDR_OWVAR 42
3252: PUSH
3253: LD_INT 36
3255: ST_TO_ADDR
// bc_level := 4 ;
3256: LD_ADDR_OWVAR 43
3260: PUSH
3261: LD_INT 4
3263: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3264: LD_EXP 26
3268: PPUSH
3269: LD_INT 36
3271: PPUSH
3272: LD_INT 62
3274: PPUSH
3275: LD_INT 12
3277: PPUSH
3278: LD_INT 3
3280: PPUSH
3281: CALL 50778 0 5
3285: PUSH
3286: LD_INT 92
3288: PUSH
3289: LD_INT 62
3291: PUSH
3292: LD_INT 12
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: NOT
3309: AND
3310: IFFALSE 3327
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3312: LD_INT 62
3314: PPUSH
3315: LD_INT 12
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: CALL_OW 47
3325: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3327: LD_EXP 26
3331: PPUSH
3332: LD_INT 36
3334: PPUSH
3335: LD_INT 37
3337: PPUSH
3338: LD_INT 18
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL 50778 0 5
3348: PUSH
3349: LD_INT 92
3351: PUSH
3352: LD_INT 37
3354: PUSH
3355: LD_INT 18
3357: PUSH
3358: LD_INT 3
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: PPUSH
3367: CALL_OW 69
3371: NOT
3372: AND
3373: IFFALSE 3390
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3375: LD_INT 37
3377: PPUSH
3378: LD_INT 18
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: CALL_OW 47
3388: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3390: LD_EXP 26
3394: PPUSH
3395: LD_INT 36
3397: PPUSH
3398: LD_INT 66
3400: PPUSH
3401: LD_INT 14
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: CALL 50778 0 5
3411: PUSH
3412: LD_INT 92
3414: PUSH
3415: LD_INT 66
3417: PUSH
3418: LD_INT 14
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: NOT
3435: AND
3436: IFFALSE 3453
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3438: LD_INT 66
3440: PPUSH
3441: LD_INT 14
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: CALL_OW 47
3451: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3453: LD_EXP 26
3457: PPUSH
3458: LD_INT 36
3460: PPUSH
3461: LD_INT 74
3463: PPUSH
3464: LD_INT 26
3466: PPUSH
3467: LD_INT 4
3469: PPUSH
3470: CALL 50778 0 5
3474: IFFALSE 3489
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3476: LD_INT 74
3478: PPUSH
3479: LD_INT 26
3481: PPUSH
3482: LD_INT 4
3484: PPUSH
3485: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3489: LD_INT 22
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 36
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: NOT
3518: IFFALSE 3522
// exit ;
3520: GO 4047
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: DOUBLE
3528: LD_INT 1
3530: DEC
3531: ST_TO_ADDR
3532: LD_INT 3
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 2
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_OWVAR 67
3554: ARRAY
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3697
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3559: LD_ADDR_OWVAR 37
3563: PUSH
3564: LD_INT 3
3566: PUSH
3567: LD_INT 2
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3586: LD_ADDR_OWVAR 39
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 2
3606: PPUSH
3607: CALL_OW 12
3611: ARRAY
3612: ST_TO_ADDR
// vc_control := control_remote ;
3613: LD_ADDR_OWVAR 38
3617: PUSH
3618: LD_INT 2
3620: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_OWVAR 40
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 5
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// veh := CreateVehicle ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: CALL_OW 45
3661: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_INT 3
3669: PPUSH
3670: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3674: LD_VAR 0 5
3678: PPUSH
3679: LD_INT 61
3681: PPUSH
3682: LD_INT 23
3684: PPUSH
3685: LD_INT 9
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 50
// end ;
3695: GO 3556
3697: POP
3698: POP
// end ; if gammaCommander = 1 then
3699: LD_EXP 9
3703: PUSH
3704: LD_INT 1
3706: EQUAL
3707: IFFALSE 3884
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3709: LD_ADDR_VAR 0 3
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 3
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: PUSH
3737: LD_OWVAR 67
3741: ARRAY
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3880
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3746: LD_ADDR_OWVAR 37
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 2
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 1
3763: PPUSH
3764: LD_INT 2
3766: PPUSH
3767: CALL_OW 12
3771: ARRAY
3772: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3773: LD_ADDR_OWVAR 39
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 2
3793: PPUSH
3794: CALL_OW 12
3798: ARRAY
3799: ST_TO_ADDR
// vc_control := control_manual ;
3800: LD_ADDR_OWVAR 38
3804: PUSH
3805: LD_INT 1
3807: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3808: LD_ADDR_OWVAR 40
3812: PUSH
3813: LD_INT 4
3815: PUSH
3816: LD_INT 5
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: CALL_OW 12
3833: ARRAY
3834: ST_TO_ADDR
// veh := CreateVehicle ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: CALL_OW 45
3844: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3845: LD_VAR 0 5
3849: PPUSH
3850: LD_INT 3
3852: PPUSH
3853: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3857: LD_VAR 0 5
3861: PPUSH
3862: LD_INT 61
3864: PPUSH
3865: LD_INT 23
3867: PPUSH
3868: LD_INT 9
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 50
// end ;
3878: GO 3743
3880: POP
3881: POP
// end else
3882: GO 4047
// if gammaCommander = 2 then
3884: LD_EXP 9
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: IFFALSE 4047
// begin bc_type := b_bunker ;
3894: LD_ADDR_OWVAR 42
3898: PUSH
3899: LD_INT 32
3901: ST_TO_ADDR
// bc_level := 6 ;
3902: LD_ADDR_OWVAR 43
3906: PUSH
3907: LD_INT 6
3909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: LD_INT 67
3917: PPUSH
3918: LD_INT 36
3920: PPUSH
3921: LD_INT 5
3923: PPUSH
3924: CALL_OW 47
3928: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3941: LD_ADDR_VAR 0 4
3945: PUSH
3946: LD_INT 61
3948: PPUSH
3949: LD_INT 40
3951: PPUSH
3952: LD_INT 5
3954: PPUSH
3955: CALL_OW 47
3959: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3960: LD_VAR 0 4
3964: PPUSH
3965: LD_INT 5
3967: PPUSH
3968: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3972: LD_ADDR_OWVAR 37
3976: PUSH
3977: LD_INT 2
3979: ST_TO_ADDR
// vc_engine := engine_combustion ;
3980: LD_ADDR_OWVAR 39
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// vc_control := control_manual ;
3988: LD_ADDR_OWVAR 38
3992: PUSH
3993: LD_INT 1
3995: ST_TO_ADDR
// vc_weapon := us_crane ;
3996: LD_ADDR_OWVAR 40
4000: PUSH
4001: LD_INT 13
4003: ST_TO_ADDR
// veh := CreateVehicle ;
4004: LD_ADDR_VAR 0 5
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 5
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4026: LD_VAR 0 5
4030: PPUSH
4031: LD_INT 61
4033: PPUSH
4034: LD_INT 23
4036: PPUSH
4037: LD_INT 9
4039: PPUSH
4040: LD_INT 0
4042: PPUSH
4043: CALL_OW 50
// end ; end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
// uc_side := 1 ;
4058: LD_ADDR_OWVAR 20
4062: PUSH
4063: LD_INT 1
4065: ST_TO_ADDR
// uc_nation := 1 ;
4066: LD_ADDR_OWVAR 21
4070: PUSH
4071: LD_INT 1
4073: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4074: LD_ADDR_EXP 21
4078: PUSH
4079: LD_STRING Denis
4081: PPUSH
4082: LD_EXP 1
4086: NOT
4087: PPUSH
4088: LD_STRING 06c_
4090: PPUSH
4091: CALL 37536 0 3
4095: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4096: LD_EXP 21
4100: PPUSH
4101: LD_INT 4
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4111: LD_ADDR_EXP 22
4115: PUSH
4116: LD_STRING Joan
4118: PPUSH
4119: LD_EXP 1
4123: NOT
4124: PPUSH
4125: LD_STRING 06c_
4127: PPUSH
4128: CALL 37536 0 3
4132: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4133: LD_EXP 22
4137: PPUSH
4138: LD_INT 4
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4148: LD_STRING GladstoneIn07
4150: PPUSH
4151: LD_INT 0
4153: PPUSH
4154: CALL_OW 30
4158: NOT
4159: IFFALSE 4239
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4161: LD_ADDR_EXP 17
4165: PUSH
4166: LD_STRING Gladstone
4168: PPUSH
4169: LD_EXP 1
4173: NOT
4174: PPUSH
4175: LD_STRING 06c_
4177: PPUSH
4178: CALL 37536 0 3
4182: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4183: LD_EXP 17
4187: NOT
4188: PUSH
4189: LD_STRING GladstoneStayInDelta
4191: PPUSH
4192: LD_INT 0
4194: PPUSH
4195: CALL_OW 30
4199: AND
4200: IFFALSE 4224
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4202: LD_ADDR_EXP 17
4206: PUSH
4207: LD_STRING Gladstone
4209: PPUSH
4210: LD_EXP 1
4214: NOT
4215: PPUSH
4216: LD_STRING 05_
4218: PPUSH
4219: CALL 37536 0 3
4223: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4224: LD_EXP 17
4228: PPUSH
4229: LD_INT 4
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4239: LD_STRING LisaStayInDelta
4241: PPUSH
4242: LD_INT 0
4244: PPUSH
4245: CALL_OW 30
4249: IFFALSE 4285
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4251: LD_ADDR_EXP 15
4255: PUSH
4256: LD_STRING Lisa
4258: PPUSH
4259: LD_INT 1
4261: PPUSH
4262: LD_STRING 05_
4264: PPUSH
4265: CALL 37536 0 3
4269: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4270: LD_EXP 15
4274: PPUSH
4275: LD_INT 4
4277: PPUSH
4278: LD_INT 0
4280: PPUSH
4281: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4285: LD_STRING BobbyStayInDelta
4287: PPUSH
4288: LD_INT 0
4290: PPUSH
4291: CALL_OW 30
4295: IFFALSE 4331
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4297: LD_ADDR_EXP 13
4301: PUSH
4302: LD_STRING Bobby
4304: PPUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_STRING 05_
4310: PPUSH
4311: CALL 37536 0 3
4315: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4316: LD_EXP 13
4320: PPUSH
4321: LD_INT 4
4323: PPUSH
4324: LD_INT 0
4326: PPUSH
4327: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4331: LD_STRING CyrusStayInDelta
4333: PPUSH
4334: LD_INT 0
4336: PPUSH
4337: CALL_OW 30
4341: IFFALSE 4377
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4343: LD_ADDR_EXP 14
4347: PUSH
4348: LD_STRING Cyrus
4350: PPUSH
4351: LD_INT 1
4353: PPUSH
4354: LD_STRING 05_
4356: PPUSH
4357: CALL 37536 0 3
4361: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4362: LD_EXP 14
4366: PPUSH
4367: LD_INT 4
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4377: LD_STRING BrownStayInDelta
4379: PPUSH
4380: LD_INT 0
4382: PPUSH
4383: CALL_OW 30
4387: IFFALSE 4423
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4389: LD_ADDR_EXP 11
4393: PUSH
4394: LD_STRING Brown
4396: PPUSH
4397: LD_INT 1
4399: PPUSH
4400: LD_STRING 05_
4402: PPUSH
4403: CALL 37536 0 3
4407: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4408: LD_EXP 11
4412: PPUSH
4413: LD_INT 4
4415: PPUSH
4416: LD_INT 0
4418: PPUSH
4419: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4423: LD_STRING DonaldsonStayInDelta
4425: PPUSH
4426: LD_INT 0
4428: PPUSH
4429: CALL_OW 30
4433: IFFALSE 4469
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4435: LD_ADDR_EXP 12
4439: PUSH
4440: LD_STRING Donaldson
4442: PPUSH
4443: LD_INT 1
4445: PPUSH
4446: LD_STRING 05_
4448: PPUSH
4449: CALL 37536 0 3
4453: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4454: LD_EXP 12
4458: PPUSH
4459: LD_INT 4
4461: PPUSH
4462: LD_INT 0
4464: PPUSH
4465: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4469: LD_ADDR_VAR 0 4
4473: PUSH
4474: LD_STRING OthersStayInDelta
4476: PPUSH
4477: CALL_OW 31
4481: ST_TO_ADDR
// if others > 2 then
4482: LD_VAR 0 4
4486: PUSH
4487: LD_INT 2
4489: GREATER
4490: IFFALSE 4553
// begin for j := 1 to 2 do
4492: LD_ADDR_VAR 0 3
4496: PUSH
4497: DOUBLE
4498: LD_INT 1
4500: DEC
4501: ST_TO_ADDR
4502: LD_INT 2
4504: PUSH
4505: FOR_TO
4506: IFFALSE 4549
// begin SetTag ( others [ j ] , 107 ) ;
4508: LD_VAR 0 4
4512: PUSH
4513: LD_VAR 0 3
4517: ARRAY
4518: PPUSH
4519: LD_INT 107
4521: PPUSH
4522: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4526: LD_VAR 0 4
4530: PUSH
4531: LD_VAR 0 3
4535: ARRAY
4536: PPUSH
4537: LD_INT 4
4539: PPUSH
4540: LD_INT 0
4542: PPUSH
4543: CALL_OW 49
// end ;
4547: GO 4505
4549: POP
4550: POP
// end else
4551: GO 4614
// begin for j := 1 to others do
4553: LD_ADDR_VAR 0 3
4557: PUSH
4558: DOUBLE
4559: LD_INT 1
4561: DEC
4562: ST_TO_ADDR
4563: LD_VAR 0 4
4567: PUSH
4568: FOR_TO
4569: IFFALSE 4612
// begin SetTag ( others [ i ] , 107 ) ;
4571: LD_VAR 0 4
4575: PUSH
4576: LD_VAR 0 2
4580: ARRAY
4581: PPUSH
4582: LD_INT 107
4584: PPUSH
4585: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4589: LD_VAR 0 4
4593: PUSH
4594: LD_VAR 0 3
4598: ARRAY
4599: PPUSH
4600: LD_INT 4
4602: PPUSH
4603: LD_INT 0
4605: PPUSH
4606: CALL_OW 49
// end ;
4610: GO 4568
4612: POP
4613: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4614: LD_ADDR_VAR 0 4
4618: PUSH
4619: LD_STRING 06_other_apemans
4621: PPUSH
4622: CALL_OW 31
4626: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4627: LD_VAR 0 4
4631: PUSH
4632: LD_INT 3
4634: PUSH
4635: LD_INT 2
4637: PUSH
4638: LD_INT 2
4640: PUSH
4641: LD_INT 1
4643: PUSH
4644: EMPTY
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: PUSH
4650: LD_OWVAR 67
4654: ARRAY
4655: GREATEREQUAL
4656: IFFALSE 4689
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4658: LD_ADDR_VAR 0 3
4662: PUSH
4663: LD_INT 3
4665: PUSH
4666: LD_INT 2
4668: PUSH
4669: LD_INT 2
4671: PUSH
4672: LD_INT 1
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: PUSH
4681: LD_OWVAR 67
4685: ARRAY
4686: ST_TO_ADDR
4687: GO 4699
// j := others ;
4689: LD_ADDR_VAR 0 3
4693: PUSH
4694: LD_VAR 0 4
4698: ST_TO_ADDR
// for i := 1 to j do
4699: LD_ADDR_VAR 0 2
4703: PUSH
4704: DOUBLE
4705: LD_INT 1
4707: DEC
4708: ST_TO_ADDR
4709: LD_VAR 0 3
4713: PUSH
4714: FOR_TO
4715: IFFALSE 4740
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4717: LD_VAR 0 4
4721: PUSH
4722: LD_VAR 0 2
4726: ARRAY
4727: PPUSH
4728: LD_INT 4
4730: PPUSH
4731: LD_INT 0
4733: PPUSH
4734: CALL_OW 49
4738: GO 4714
4740: POP
4741: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4742: LD_INT 4
4744: PPUSH
4745: LD_INT 22
4747: PUSH
4748: LD_INT 1
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: LD_INT 21
4757: PUSH
4758: LD_INT 1
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: PPUSH
4769: CALL_OW 70
4773: PPUSH
4774: LD_INT 53
4776: PPUSH
4777: LD_INT 19
4779: PPUSH
4780: CALL_OW 111
// end ;
4784: LD_VAR 0 1
4788: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4789: LD_INT 0
4791: PPUSH
4792: PPUSH
4793: PPUSH
4794: PPUSH
4795: PPUSH
4796: PPUSH
4797: PPUSH
4798: PPUSH
4799: PPUSH
4800: PPUSH
4801: PPUSH
4802: PPUSH
4803: PPUSH
4804: PPUSH
4805: PPUSH
// prefix := 07c_ ;
4806: LD_ADDR_VAR 0 11
4810: PUSH
4811: LD_STRING 07c_
4813: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4814: LD_ADDR_VAR 0 9
4818: PUSH
4819: LD_STRING 07_vehicles
4821: PPUSH
4822: EMPTY
4823: PPUSH
4824: CALL_OW 30
4828: ST_TO_ADDR
// if not vehicles and debug then
4829: LD_VAR 0 9
4833: NOT
4834: PUSH
4835: LD_EXP 1
4839: AND
4840: IFFALSE 4865
// vehicles := [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ;
4842: LD_ADDR_VAR 0 9
4846: PUSH
4847: LD_INT 2
4849: PUSH
4850: LD_INT 1
4852: PUSH
4853: LD_INT 1
4855: PUSH
4856: LD_INT 4
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: ST_TO_ADDR
// if not vehicles then
4865: LD_VAR 0 9
4869: NOT
4870: IFFALSE 4927
// begin area := westGammaSupportArea ;
4872: LD_ADDR_VAR 0 12
4876: PUSH
4877: LD_INT 16
4879: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4880: LD_ADDR_VAR 0 15
4884: PUSH
4885: LD_INT 37
4887: PUSH
4888: LD_INT 70
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4895: LD_ADDR_VAR 0 14
4899: PUSH
4900: LD_INT 43
4902: PUSH
4903: LD_INT 67
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: ST_TO_ADDR
// dir := 1 ;
4910: LD_ADDR_VAR 0 13
4914: PUSH
4915: LD_INT 1
4917: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4918: LD_INT 4200
4920: PPUSH
4921: CALL_OW 67
// end else
4925: GO 4973
// begin area := southGammaSupportArea ;
4927: LD_ADDR_VAR 0 12
4931: PUSH
4932: LD_INT 5
4934: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4935: LD_ADDR_VAR 0 15
4939: PUSH
4940: LD_INT 87
4942: PUSH
4943: LD_INT 147
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4950: LD_ADDR_VAR 0 14
4954: PUSH
4955: LD_INT 74
4957: PUSH
4958: LD_INT 129
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: ST_TO_ADDR
// dir := 0 ;
4965: LD_ADDR_VAR 0 13
4969: PUSH
4970: LD_INT 0
4972: ST_TO_ADDR
// end ; squad := [ ] ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: EMPTY
4979: ST_TO_ADDR
// tmp := [ ] ;
4980: LD_ADDR_VAR 0 7
4984: PUSH
4985: EMPTY
4986: ST_TO_ADDR
// tmpVehs := [ ] ;
4987: LD_ADDR_VAR 0 8
4991: PUSH
4992: EMPTY
4993: ST_TO_ADDR
// uc_side := 1 ;
4994: LD_ADDR_OWVAR 20
4998: PUSH
4999: LD_INT 1
5001: ST_TO_ADDR
// uc_nation := 1 ;
5002: LD_ADDR_OWVAR 21
5006: PUSH
5007: LD_INT 1
5009: ST_TO_ADDR
// if vehicles then
5010: LD_VAR 0 9
5014: IFFALSE 5170
// begin k := 1 ;
5016: LD_ADDR_VAR 0 3
5020: PUSH
5021: LD_INT 1
5023: ST_TO_ADDR
// for i := 1 to vehicles div 4 do
5024: LD_ADDR_VAR 0 2
5028: PUSH
5029: DOUBLE
5030: LD_INT 1
5032: DEC
5033: ST_TO_ADDR
5034: LD_VAR 0 9
5038: PUSH
5039: LD_INT 4
5041: DIV
5042: PUSH
5043: FOR_TO
5044: IFFALSE 5168
// begin vc_chassis := vehicles [ k ] ;
5046: LD_ADDR_OWVAR 37
5050: PUSH
5051: LD_VAR 0 9
5055: PUSH
5056: LD_VAR 0 3
5060: ARRAY
5061: ST_TO_ADDR
// vc_engine := vehicles [ k + 1 ] ;
5062: LD_ADDR_OWVAR 39
5066: PUSH
5067: LD_VAR 0 9
5071: PUSH
5072: LD_VAR 0 3
5076: PUSH
5077: LD_INT 1
5079: PLUS
5080: ARRAY
5081: ST_TO_ADDR
// vc_control := vehicles [ k + 2 ] ;
5082: LD_ADDR_OWVAR 38
5086: PUSH
5087: LD_VAR 0 9
5091: PUSH
5092: LD_VAR 0 3
5096: PUSH
5097: LD_INT 2
5099: PLUS
5100: ARRAY
5101: ST_TO_ADDR
// vc_weapon := vehicles [ k + 3 ] ;
5102: LD_ADDR_OWVAR 40
5106: PUSH
5107: LD_VAR 0 9
5111: PUSH
5112: LD_VAR 0 3
5116: PUSH
5117: LD_INT 3
5119: PLUS
5120: ARRAY
5121: ST_TO_ADDR
// k := k + 4 ;
5122: LD_ADDR_VAR 0 3
5126: PUSH
5127: LD_VAR 0 3
5131: PUSH
5132: LD_INT 4
5134: PLUS
5135: ST_TO_ADDR
// veh := CreateVehicle ;
5136: LD_ADDR_VAR 0 10
5140: PUSH
5141: CALL_OW 45
5145: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5146: LD_ADDR_VAR 0 8
5150: PUSH
5151: LD_VAR 0 8
5155: PPUSH
5156: LD_VAR 0 10
5160: PPUSH
5161: CALL 74370 0 2
5165: ST_TO_ADDR
// end ;
5166: GO 5043
5168: POP
5169: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5170: LD_ADDR_EXP 10
5174: PUSH
5175: LD_STRING JMM
5177: PPUSH
5178: LD_EXP 1
5182: NOT
5183: PPUSH
5184: LD_VAR 0 11
5188: PPUSH
5189: CALL 37536 0 3
5193: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5194: LD_EXP 9
5198: PUSH
5199: LD_INT 1
5201: PUSH
5202: LD_INT 3
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: IN
5209: PUSH
5210: LD_EXP 11
5214: NOT
5215: AND
5216: IFFALSE 5277
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5218: LD_ADDR_EXP 11
5222: PUSH
5223: LD_STRING Brown
5225: PPUSH
5226: LD_EXP 1
5230: NOT
5231: PPUSH
5232: LD_VAR 0 11
5236: PPUSH
5237: CALL 37536 0 3
5241: ST_TO_ADDR
// if Brown then
5242: LD_EXP 11
5246: IFFALSE 5277
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5248: LD_ADDR_VAR 0 7
5252: PUSH
5253: LD_VAR 0 7
5257: PPUSH
5258: LD_VAR 0 7
5262: PUSH
5263: LD_INT 1
5265: PLUS
5266: PPUSH
5267: LD_EXP 11
5271: PPUSH
5272: CALL_OW 1
5276: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5277: LD_EXP 9
5281: PUSH
5282: LD_INT 2
5284: PUSH
5285: LD_INT 3
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: IN
5292: PUSH
5293: LD_EXP 12
5297: NOT
5298: AND
5299: IFFALSE 5360
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5301: LD_ADDR_EXP 12
5305: PUSH
5306: LD_STRING Donaldson
5308: PPUSH
5309: LD_EXP 1
5313: NOT
5314: PPUSH
5315: LD_VAR 0 11
5319: PPUSH
5320: CALL 37536 0 3
5324: ST_TO_ADDR
// if Donaldson then
5325: LD_EXP 12
5329: IFFALSE 5360
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5331: LD_ADDR_VAR 0 7
5335: PUSH
5336: LD_VAR 0 7
5340: PPUSH
5341: LD_VAR 0 7
5345: PUSH
5346: LD_INT 1
5348: PLUS
5349: PPUSH
5350: LD_EXP 12
5354: PPUSH
5355: CALL_OW 1
5359: ST_TO_ADDR
// end ; if not Bobby then
5360: LD_EXP 13
5364: NOT
5365: IFFALSE 5423
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5367: LD_ADDR_EXP 13
5371: PUSH
5372: LD_STRING Bobby
5374: PPUSH
5375: LD_INT 1
5377: PPUSH
5378: LD_VAR 0 11
5382: PPUSH
5383: CALL 37536 0 3
5387: ST_TO_ADDR
// if Bobby then
5388: LD_EXP 13
5392: IFFALSE 5423
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5394: LD_ADDR_VAR 0 7
5398: PUSH
5399: LD_VAR 0 7
5403: PPUSH
5404: LD_VAR 0 7
5408: PUSH
5409: LD_INT 1
5411: PLUS
5412: PPUSH
5413: LD_EXP 13
5417: PPUSH
5418: CALL_OW 1
5422: ST_TO_ADDR
// end ; if not Cyrus then
5423: LD_EXP 14
5427: NOT
5428: IFFALSE 5486
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5430: LD_ADDR_EXP 14
5434: PUSH
5435: LD_STRING Cyrus
5437: PPUSH
5438: LD_INT 1
5440: PPUSH
5441: LD_VAR 0 11
5445: PPUSH
5446: CALL 37536 0 3
5450: ST_TO_ADDR
// if Cyrus then
5451: LD_EXP 14
5455: IFFALSE 5486
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5457: LD_ADDR_VAR 0 7
5461: PUSH
5462: LD_VAR 0 7
5466: PPUSH
5467: LD_VAR 0 7
5471: PUSH
5472: LD_INT 1
5474: PLUS
5475: PPUSH
5476: LD_EXP 14
5480: PPUSH
5481: CALL_OW 1
5485: ST_TO_ADDR
// end ; if not Lisa then
5486: LD_EXP 15
5490: NOT
5491: IFFALSE 5552
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5493: LD_ADDR_EXP 15
5497: PUSH
5498: LD_STRING Lisa
5500: PPUSH
5501: LD_EXP 1
5505: NOT
5506: PPUSH
5507: LD_VAR 0 11
5511: PPUSH
5512: CALL 37536 0 3
5516: ST_TO_ADDR
// if Lisa then
5517: LD_EXP 15
5521: IFFALSE 5552
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5523: LD_ADDR_VAR 0 7
5527: PUSH
5528: LD_VAR 0 7
5532: PPUSH
5533: LD_VAR 0 7
5537: PUSH
5538: LD_INT 1
5540: PLUS
5541: PPUSH
5542: LD_EXP 15
5546: PPUSH
5547: CALL_OW 1
5551: ST_TO_ADDR
// end ; if not Frank then
5552: LD_EXP 16
5556: NOT
5557: IFFALSE 5618
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5559: LD_ADDR_EXP 16
5563: PUSH
5564: LD_STRING Frank
5566: PPUSH
5567: LD_EXP 1
5571: NOT
5572: PPUSH
5573: LD_VAR 0 11
5577: PPUSH
5578: CALL 37536 0 3
5582: ST_TO_ADDR
// if Frank then
5583: LD_EXP 16
5587: IFFALSE 5618
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5589: LD_ADDR_VAR 0 7
5593: PUSH
5594: LD_VAR 0 7
5598: PPUSH
5599: LD_VAR 0 7
5603: PUSH
5604: LD_INT 1
5606: PLUS
5607: PPUSH
5608: LD_EXP 16
5612: PPUSH
5613: CALL_OW 1
5617: ST_TO_ADDR
// end ; if not Kikuchi then
5618: LD_EXP 18
5622: NOT
5623: IFFALSE 5681
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5625: LD_ADDR_EXP 18
5629: PUSH
5630: LD_STRING Kikuchi
5632: PPUSH
5633: LD_INT 1
5635: PPUSH
5636: LD_VAR 0 11
5640: PPUSH
5641: CALL 37536 0 3
5645: ST_TO_ADDR
// if Kikuchi then
5646: LD_EXP 18
5650: IFFALSE 5681
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5652: LD_ADDR_VAR 0 7
5656: PUSH
5657: LD_VAR 0 7
5661: PPUSH
5662: LD_VAR 0 7
5666: PUSH
5667: LD_INT 1
5669: PLUS
5670: PPUSH
5671: LD_EXP 18
5675: PPUSH
5676: CALL_OW 1
5680: ST_TO_ADDR
// end ; if not Gladstone then
5681: LD_EXP 17
5685: NOT
5686: IFFALSE 5747
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5688: LD_ADDR_EXP 17
5692: PUSH
5693: LD_STRING Gladstone
5695: PPUSH
5696: LD_EXP 1
5700: NOT
5701: PPUSH
5702: LD_VAR 0 11
5706: PPUSH
5707: CALL 37536 0 3
5711: ST_TO_ADDR
// if Gladstone then
5712: LD_EXP 17
5716: IFFALSE 5747
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5718: LD_ADDR_VAR 0 7
5722: PUSH
5723: LD_VAR 0 7
5727: PPUSH
5728: LD_VAR 0 7
5732: PUSH
5733: LD_INT 1
5735: PLUS
5736: PPUSH
5737: LD_EXP 17
5741: PPUSH
5742: CALL_OW 1
5746: ST_TO_ADDR
// end ; if not Khatam then
5747: LD_EXP 19
5751: NOT
5752: IFFALSE 5810
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5754: LD_ADDR_EXP 19
5758: PUSH
5759: LD_STRING Khatam
5761: PPUSH
5762: LD_INT 1
5764: PPUSH
5765: LD_VAR 0 11
5769: PPUSH
5770: CALL 37536 0 3
5774: ST_TO_ADDR
// if Khatam then
5775: LD_EXP 19
5779: IFFALSE 5810
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5781: LD_ADDR_VAR 0 7
5785: PUSH
5786: LD_VAR 0 7
5790: PPUSH
5791: LD_VAR 0 7
5795: PUSH
5796: LD_INT 1
5798: PLUS
5799: PPUSH
5800: LD_EXP 19
5804: PPUSH
5805: CALL_OW 1
5809: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5810: LD_ADDR_VAR 0 5
5814: PUSH
5815: LD_STRING 07c_others
5817: PPUSH
5818: CALL_OW 31
5822: ST_TO_ADDR
// squad := others ;
5823: LD_ADDR_VAR 0 6
5827: PUSH
5828: LD_VAR 0 5
5832: ST_TO_ADDR
// if others then
5833: LD_VAR 0 5
5837: IFFALSE 5937
// for i in others do
5839: LD_ADDR_VAR 0 2
5843: PUSH
5844: LD_VAR 0 5
5848: PUSH
5849: FOR_IN
5850: IFFALSE 5935
// begin SetTag ( i , 108 ) ;
5852: LD_VAR 0 2
5856: PPUSH
5857: LD_INT 108
5859: PPUSH
5860: CALL_OW 109
// if GetClass ( i ) = class_mechanic then
5864: LD_VAR 0 2
5868: PPUSH
5869: CALL_OW 257
5873: PUSH
5874: LD_INT 3
5876: EQUAL
5877: IFFALSE 5904
// tmp := Insert ( tmp , 1 , i ) else
5879: LD_ADDR_VAR 0 7
5883: PUSH
5884: LD_VAR 0 7
5888: PPUSH
5889: LD_INT 1
5891: PPUSH
5892: LD_VAR 0 2
5896: PPUSH
5897: CALL_OW 2
5901: ST_TO_ADDR
5902: GO 5933
// tmp := Replace ( tmp , tmp + 1 , i ) ;
5904: LD_ADDR_VAR 0 7
5908: PUSH
5909: LD_VAR 0 7
5913: PPUSH
5914: LD_VAR 0 7
5918: PUSH
5919: LD_INT 1
5921: PLUS
5922: PPUSH
5923: LD_VAR 0 2
5927: PPUSH
5928: CALL_OW 1
5932: ST_TO_ADDR
// end ;
5933: GO 5849
5935: POP
5936: POP
// if tmp then
5937: LD_VAR 0 7
5941: IFFALSE 6141
// begin for i in tmp do
5943: LD_ADDR_VAR 0 2
5947: PUSH
5948: LD_VAR 0 7
5952: PUSH
5953: FOR_IN
5954: IFFALSE 6139
// begin SetDir ( i , dir ) ;
5956: LD_VAR 0 2
5960: PPUSH
5961: LD_VAR 0 13
5965: PPUSH
5966: CALL_OW 233
// if tmpVehs then
5970: LD_VAR 0 8
5974: IFFALSE 6064
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5976: LD_VAR 0 8
5980: PUSH
5981: LD_INT 1
5983: ARRAY
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
5992: LD_VAR 0 8
5996: PUSH
5997: LD_INT 1
5999: ARRAY
6000: PPUSH
6001: LD_VAR 0 15
6005: PUSH
6006: LD_INT 1
6008: ARRAY
6009: PPUSH
6010: LD_VAR 0 15
6014: PUSH
6015: LD_INT 2
6017: ARRAY
6018: PPUSH
6019: LD_INT 0
6021: PPUSH
6022: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6026: LD_VAR 0 2
6030: PPUSH
6031: LD_VAR 0 8
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6044: LD_ADDR_VAR 0 8
6048: PUSH
6049: LD_VAR 0 8
6053: PPUSH
6054: LD_INT 1
6056: PPUSH
6057: CALL_OW 3
6061: ST_TO_ADDR
// end else
6062: GO 6081
// PlaceUnitArea ( i , area , false ) ;
6064: LD_VAR 0 2
6068: PPUSH
6069: LD_VAR 0 12
6073: PPUSH
6074: LD_INT 0
6076: PPUSH
6077: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6081: LD_VAR 0 2
6085: PPUSH
6086: LD_VAR 0 14
6090: PUSH
6091: LD_INT 1
6093: ARRAY
6094: PPUSH
6095: LD_VAR 0 14
6099: PUSH
6100: LD_INT 2
6102: ARRAY
6103: PPUSH
6104: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6108: LD_INT 35
6110: PPUSH
6111: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6115: LD_VAR 0 12
6119: PPUSH
6120: LD_INT 22
6122: PUSH
6123: LD_INT 1
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PPUSH
6130: CALL_OW 70
6134: NOT
6135: IFFALSE 6108
// end ;
6137: GO 5953
6139: POP
6140: POP
// end ; PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6141: LD_EXP 10
6145: PPUSH
6146: LD_VAR 0 15
6150: PUSH
6151: LD_INT 1
6153: ARRAY
6154: PPUSH
6155: LD_VAR 0 15
6159: PUSH
6160: LD_INT 2
6162: ARRAY
6163: PPUSH
6164: LD_INT 0
6166: PPUSH
6167: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6171: LD_EXP 10
6175: PPUSH
6176: LD_VAR 0 14
6180: PUSH
6181: LD_INT 1
6183: ARRAY
6184: PPUSH
6185: LD_VAR 0 14
6189: PUSH
6190: LD_INT 2
6192: ARRAY
6193: PPUSH
6194: CALL_OW 111
// jmmArrival := true ;
6198: LD_ADDR_EXP 7
6202: PUSH
6203: LD_INT 1
6205: ST_TO_ADDR
// end ;
6206: LD_VAR 0 1
6210: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6211: LD_INT 0
6213: PPUSH
6214: PPUSH
6215: PPUSH
6216: PPUSH
6217: PPUSH
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6218: LD_ADDR_VAR 0 5
6222: PUSH
6223: LD_INT 6
6225: PPUSH
6226: LD_INT 3
6228: PUSH
6229: LD_INT 21
6231: PUSH
6232: LD_INT 3
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PPUSH
6243: CALL_OW 70
6247: ST_TO_ADDR
// if tmp then
6248: LD_VAR 0 5
6252: IFFALSE 6276
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6254: LD_VAR 0 5
6258: PPUSH
6259: LD_INT 33
6261: PPUSH
6262: LD_INT 39
6264: PPUSH
6265: CALL_OW 111
// wait ( 0 0$3 ) ;
6269: LD_INT 105
6271: PPUSH
6272: CALL_OW 67
// end ; uc_side := 4 ;
6276: LD_ADDR_OWVAR 20
6280: PUSH
6281: LD_INT 4
6283: ST_TO_ADDR
// uc_nation := 1 ;
6284: LD_ADDR_OWVAR 21
6288: PUSH
6289: LD_INT 1
6291: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6292: LD_ADDR_EXP 23
6296: PUSH
6297: LD_STRING Sikorski
6299: PPUSH
6300: LD_INT 0
6302: PPUSH
6303: LD_STRING 
6305: PPUSH
6306: CALL 37536 0 3
6310: ST_TO_ADDR
// vc_engine := engine_combustion ;
6311: LD_ADDR_OWVAR 39
6315: PUSH
6316: LD_INT 1
6318: ST_TO_ADDR
// vc_control := control_manual ;
6319: LD_ADDR_OWVAR 38
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6327: LD_ADDR_OWVAR 40
6331: PUSH
6332: LD_INT 6
6334: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6335: LD_ADDR_OWVAR 37
6339: PUSH
6340: LD_INT 4
6342: ST_TO_ADDR
// veh := CreateVehicle ;
6343: LD_ADDR_VAR 0 4
6347: PUSH
6348: CALL_OW 45
6352: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6353: LD_VAR 0 4
6357: PPUSH
6358: LD_INT 3
6360: PPUSH
6361: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6365: LD_VAR 0 4
6369: PPUSH
6370: LD_INT 4
6372: NEG
6373: PPUSH
6374: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6378: LD_VAR 0 4
6382: PPUSH
6383: LD_INT 70
6385: PPUSH
6386: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6390: LD_VAR 0 4
6394: PPUSH
6395: LD_INT 6
6397: PPUSH
6398: LD_INT 0
6400: PPUSH
6401: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6405: LD_EXP 23
6409: PPUSH
6410: LD_VAR 0 4
6414: PPUSH
6415: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6419: LD_EXP 23
6423: PPUSH
6424: LD_INT 37
6426: PPUSH
6427: LD_INT 30
6429: PPUSH
6430: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6434: LD_INT 10
6436: PPUSH
6437: CALL_OW 67
// InitHc_All ( ) ;
6441: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6445: LD_ADDR_VAR 0 2
6449: PUSH
6450: DOUBLE
6451: LD_INT 1
6453: DEC
6454: ST_TO_ADDR
6455: LD_INT 3
6457: PUSH
6458: LD_INT 2
6460: PUSH
6461: LD_INT 2
6463: PUSH
6464: LD_INT 2
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: PUSH
6473: LD_OWVAR 67
6477: ARRAY
6478: PUSH
6479: FOR_TO
6480: IFFALSE 6592
// begin uc_side := 4 ;
6482: LD_ADDR_OWVAR 20
6486: PUSH
6487: LD_INT 4
6489: ST_TO_ADDR
// uc_nation := 1 ;
6490: LD_ADDR_OWVAR 21
6494: PUSH
6495: LD_INT 1
6497: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6498: LD_INT 0
6500: PPUSH
6501: LD_INT 1
6503: PPUSH
6504: LD_INT 4
6506: PPUSH
6507: LD_INT 7
6509: PPUSH
6510: CALL_OW 12
6514: PPUSH
6515: CALL_OW 380
// un := CreateHuman ;
6519: LD_ADDR_VAR 0 3
6523: PUSH
6524: CALL_OW 44
6528: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6529: LD_VAR 0 3
6533: PPUSH
6534: LD_INT 3
6536: PPUSH
6537: CALL_OW 233
// SetTag ( un , 101 ) ;
6541: LD_VAR 0 3
6545: PPUSH
6546: LD_INT 101
6548: PPUSH
6549: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6553: LD_VAR 0 3
6557: PPUSH
6558: LD_INT 6
6560: PPUSH
6561: LD_INT 0
6563: PPUSH
6564: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6568: LD_VAR 0 3
6572: PPUSH
6573: LD_INT 25
6575: PPUSH
6576: LD_INT 27
6578: PPUSH
6579: CALL_OW 111
// wait ( 0 0$1 ) ;
6583: LD_INT 35
6585: PPUSH
6586: CALL_OW 67
// end ;
6590: GO 6479
6592: POP
6593: POP
// for i := 1 to 2 do
6594: LD_ADDR_VAR 0 2
6598: PUSH
6599: DOUBLE
6600: LD_INT 1
6602: DEC
6603: ST_TO_ADDR
6604: LD_INT 2
6606: PUSH
6607: FOR_TO
6608: IFFALSE 6720
// begin uc_side := 4 ;
6610: LD_ADDR_OWVAR 20
6614: PUSH
6615: LD_INT 4
6617: ST_TO_ADDR
// uc_nation := 1 ;
6618: LD_ADDR_OWVAR 21
6622: PUSH
6623: LD_INT 1
6625: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6626: LD_INT 0
6628: PPUSH
6629: LD_INT 4
6631: PPUSH
6632: LD_INT 3
6634: PPUSH
6635: LD_INT 5
6637: PPUSH
6638: CALL_OW 12
6642: PPUSH
6643: CALL_OW 380
// un := CreateHuman ;
6647: LD_ADDR_VAR 0 3
6651: PUSH
6652: CALL_OW 44
6656: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6657: LD_VAR 0 3
6661: PPUSH
6662: LD_INT 3
6664: PPUSH
6665: CALL_OW 233
// SetTag ( un , 101 ) ;
6669: LD_VAR 0 3
6673: PPUSH
6674: LD_INT 101
6676: PPUSH
6677: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6681: LD_VAR 0 3
6685: PPUSH
6686: LD_INT 6
6688: PPUSH
6689: LD_INT 0
6691: PPUSH
6692: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6696: LD_VAR 0 3
6700: PPUSH
6701: LD_INT 25
6703: PPUSH
6704: LD_INT 27
6706: PPUSH
6707: CALL_OW 111
// wait ( 0 0$1 ) ;
6711: LD_INT 35
6713: PPUSH
6714: CALL_OW 67
// end ;
6718: GO 6607
6720: POP
6721: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
6722: LD_ADDR_VAR 0 2
6726: PUSH
6727: DOUBLE
6728: LD_INT 1
6730: DEC
6731: ST_TO_ADDR
6732: LD_INT 5
6734: PUSH
6735: LD_INT 4
6737: PUSH
6738: LD_INT 3
6740: PUSH
6741: LD_INT 3
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: PUSH
6750: LD_OWVAR 67
6754: ARRAY
6755: PUSH
6756: FOR_TO
6757: IFFALSE 6999
// begin uc_side := 4 ;
6759: LD_ADDR_OWVAR 20
6763: PUSH
6764: LD_INT 4
6766: ST_TO_ADDR
// uc_nation := 1 ;
6767: LD_ADDR_OWVAR 21
6771: PUSH
6772: LD_INT 1
6774: ST_TO_ADDR
// vc_engine := engine_combustion ;
6775: LD_ADDR_OWVAR 39
6779: PUSH
6780: LD_INT 1
6782: ST_TO_ADDR
// vc_control := control_manual ;
6783: LD_ADDR_OWVAR 38
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
6791: LD_ADDR_OWVAR 40
6795: PUSH
6796: LD_INT 5
6798: PUSH
6799: LD_INT 7
6801: PUSH
6802: LD_INT 5
6804: PUSH
6805: LD_INT 4
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: PUSH
6814: LD_VAR 0 2
6818: PUSH
6819: LD_INT 4
6821: MOD
6822: PUSH
6823: LD_INT 1
6825: PLUS
6826: ARRAY
6827: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6828: LD_ADDR_OWVAR 37
6832: PUSH
6833: LD_INT 3
6835: PUSH
6836: LD_INT 3
6838: PUSH
6839: LD_INT 4
6841: PUSH
6842: LD_INT 4
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: PUSH
6851: LD_VAR 0 2
6855: PUSH
6856: LD_INT 4
6858: MOD
6859: PUSH
6860: LD_INT 1
6862: PLUS
6863: ARRAY
6864: ST_TO_ADDR
// veh := CreateVehicle ;
6865: LD_ADDR_VAR 0 4
6869: PUSH
6870: CALL_OW 45
6874: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6875: LD_VAR 0 4
6879: PPUSH
6880: LD_INT 3
6882: PPUSH
6883: CALL_OW 233
// SetTag ( veh , 0 ) ;
6887: LD_VAR 0 4
6891: PPUSH
6892: LD_INT 0
6894: PPUSH
6895: CALL_OW 109
// SetFuel ( veh , 70 ) ;
6899: LD_VAR 0 4
6903: PPUSH
6904: LD_INT 70
6906: PPUSH
6907: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6911: LD_VAR 0 4
6915: PPUSH
6916: LD_INT 6
6918: PPUSH
6919: LD_INT 0
6921: PPUSH
6922: CALL_OW 49
// InitHc ;
6926: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
6930: LD_INT 0
6932: PPUSH
6933: LD_INT 3
6935: PPUSH
6936: LD_INT 4
6938: PPUSH
6939: LD_INT 7
6941: PPUSH
6942: CALL_OW 12
6946: PPUSH
6947: CALL_OW 380
// un := CreateHuman ;
6951: LD_ADDR_VAR 0 3
6955: PUSH
6956: CALL_OW 44
6960: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6961: LD_VAR 0 3
6965: PPUSH
6966: LD_VAR 0 4
6970: PPUSH
6971: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
6975: LD_VAR 0 3
6979: PPUSH
6980: LD_INT 30
6982: PPUSH
6983: LD_INT 22
6985: PPUSH
6986: CALL_OW 111
// wait ( 0 0$3 ) ;
6990: LD_INT 105
6992: PPUSH
6993: CALL_OW 67
// end ;
6997: GO 6756
6999: POP
7000: POP
// wait ( 0 0$10 ) ;
7001: LD_INT 350
7003: PPUSH
7004: CALL_OW 67
// end ;
7008: LD_VAR 0 1
7012: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7013: LD_INT 0
7015: PPUSH
7016: PPUSH
7017: PPUSH
7018: PPUSH
// gammaBase := [ ] ;
7019: LD_ADDR_VAR 0 4
7023: PUSH
7024: EMPTY
7025: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7026: LD_ADDR_VAR 0 5
7030: PUSH
7031: LD_VAR 0 1
7035: PPUSH
7036: LD_INT 22
7038: PUSH
7039: LD_INT 1
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 21
7048: PUSH
7049: LD_INT 3
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 50
7058: PUSH
7059: EMPTY
7060: LIST
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: LIST
7066: PPUSH
7067: CALL_OW 70
7071: ST_TO_ADDR
// for i in buildings do
7072: LD_ADDR_VAR 0 3
7076: PUSH
7077: LD_VAR 0 5
7081: PUSH
7082: FOR_IN
7083: IFFALSE 7520
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7085: LD_VAR 0 3
7089: PPUSH
7090: CALL_OW 266
7094: PUSH
7095: LD_INT 6
7097: PUSH
7098: LD_INT 7
7100: PUSH
7101: LD_INT 8
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: IN
7109: IFFALSE 7223
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7111: LD_ADDR_VAR 0 4
7115: PUSH
7116: LD_VAR 0 4
7120: PUSH
7121: LD_VAR 0 3
7125: PPUSH
7126: CALL_OW 266
7130: PUSH
7131: LD_VAR 0 3
7135: PPUSH
7136: CALL_OW 250
7140: PUSH
7141: LD_VAR 0 3
7145: PPUSH
7146: CALL_OW 251
7150: PUSH
7151: LD_VAR 0 3
7155: PPUSH
7156: CALL_OW 254
7160: PUSH
7161: LD_VAR 0 3
7165: PPUSH
7166: CALL_OW 267
7170: PUSH
7171: LD_VAR 0 3
7175: PPUSH
7176: CALL_OW 248
7180: PUSH
7181: LD_VAR 0 3
7185: PPUSH
7186: LD_INT 1
7188: PPUSH
7189: CALL_OW 268
7193: PUSH
7194: LD_VAR 0 3
7198: PPUSH
7199: LD_INT 2
7201: PPUSH
7202: CALL_OW 268
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: ADD
7220: ST_TO_ADDR
7221: GO 7518
// if GetBType ( i ) = b_bunker then
7223: LD_VAR 0 3
7227: PPUSH
7228: CALL_OW 266
7232: PUSH
7233: LD_INT 32
7235: EQUAL
7236: IFFALSE 7333
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7238: LD_ADDR_VAR 0 4
7242: PUSH
7243: LD_VAR 0 4
7247: PUSH
7248: LD_VAR 0 3
7252: PPUSH
7253: CALL_OW 266
7257: PUSH
7258: LD_VAR 0 3
7262: PPUSH
7263: CALL_OW 250
7267: PUSH
7268: LD_VAR 0 3
7272: PPUSH
7273: CALL_OW 251
7277: PUSH
7278: LD_VAR 0 3
7282: PPUSH
7283: CALL_OW 254
7287: PUSH
7288: LD_VAR 0 3
7292: PPUSH
7293: CALL_OW 267
7297: PUSH
7298: LD_VAR 0 3
7302: PPUSH
7303: CALL_OW 248
7307: PUSH
7308: LD_VAR 0 3
7312: PPUSH
7313: CALL_OW 269
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: PUSH
7327: EMPTY
7328: LIST
7329: ADD
7330: ST_TO_ADDR
7331: GO 7518
// if GetBType ( i ) = b_factory then
7333: LD_VAR 0 3
7337: PPUSH
7338: CALL_OW 266
7342: PUSH
7343: LD_INT 3
7345: EQUAL
7346: IFFALSE 7436
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7348: LD_ADDR_VAR 0 4
7352: PUSH
7353: LD_VAR 0 4
7357: PPUSH
7358: LD_INT 1
7360: PPUSH
7361: LD_VAR 0 3
7365: PPUSH
7366: CALL_OW 266
7370: PUSH
7371: LD_VAR 0 3
7375: PPUSH
7376: CALL_OW 250
7380: PUSH
7381: LD_VAR 0 3
7385: PPUSH
7386: CALL_OW 251
7390: PUSH
7391: LD_VAR 0 3
7395: PPUSH
7396: CALL_OW 254
7400: PUSH
7401: LD_VAR 0 3
7405: PPUSH
7406: CALL_OW 267
7410: PUSH
7411: LD_VAR 0 3
7415: PPUSH
7416: CALL_OW 248
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: PPUSH
7429: CALL_OW 2
7433: ST_TO_ADDR
7434: GO 7518
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7436: LD_ADDR_VAR 0 4
7440: PUSH
7441: LD_VAR 0 4
7445: PUSH
7446: LD_VAR 0 3
7450: PPUSH
7451: CALL_OW 266
7455: PUSH
7456: LD_VAR 0 3
7460: PPUSH
7461: CALL_OW 250
7465: PUSH
7466: LD_VAR 0 3
7470: PPUSH
7471: CALL_OW 251
7475: PUSH
7476: LD_VAR 0 3
7480: PPUSH
7481: CALL_OW 254
7485: PUSH
7486: LD_VAR 0 3
7490: PPUSH
7491: CALL_OW 267
7495: PUSH
7496: LD_VAR 0 3
7500: PPUSH
7501: CALL_OW 248
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: PUSH
7514: EMPTY
7515: LIST
7516: ADD
7517: ST_TO_ADDR
// end ;
7518: GO 7082
7520: POP
7521: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7522: LD_VAR 0 4
7526: PPUSH
7527: LD_STRING 08_GammaBase
7529: PPUSH
7530: CALL_OW 39
// end ;
7534: LD_VAR 0 2
7538: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7539: LD_INT 0
7541: PPUSH
7542: PPUSH
7543: PPUSH
7544: PPUSH
7545: PPUSH
7546: PPUSH
7547: PPUSH
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7548: LD_ADDR_VAR 0 3
7552: PUSH
7553: LD_INT 22
7555: PUSH
7556: LD_INT 4
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PPUSH
7563: CALL_OW 69
7567: ST_TO_ADDR
// ComAgressiveMove ( tmp , 55 , 62 ) ;
7568: LD_VAR 0 3
7572: PPUSH
7573: LD_INT 55
7575: PPUSH
7576: LD_INT 62
7578: PPUSH
7579: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
7583: LD_VAR 0 3
7587: PPUSH
7588: LD_INT 175
7590: PPUSH
7591: CALL_OW 202
// AddComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 58 , 96 ) ;
7595: LD_VAR 0 3
7599: PPUSH
7600: LD_INT 120
7602: PUSH
7603: LD_INT 101
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PPUSH
7610: CALL_OW 72
7614: PPUSH
7615: LD_INT 58
7617: PPUSH
7618: LD_INT 96
7620: PPUSH
7621: CALL_OW 174
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
7625: LD_VAR 0 3
7629: PPUSH
7630: LD_INT 120
7632: PUSH
7633: LD_INT 101
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PPUSH
7640: CALL_OW 72
7644: PPUSH
7645: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 52 , 93 ) ;
7649: LD_VAR 0 3
7653: PPUSH
7654: LD_INT 120
7656: PUSH
7657: LD_INT 101
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: LD_INT 25
7666: PUSH
7667: LD_INT 4
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PPUSH
7678: CALL_OW 72
7682: PPUSH
7683: LD_INT 52
7685: PPUSH
7686: LD_INT 93
7688: PPUSH
7689: CALL_OW 174
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
7693: LD_VAR 0 3
7697: PPUSH
7698: LD_INT 120
7700: PUSH
7701: LD_INT 101
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 25
7710: PUSH
7711: LD_INT 4
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: PPUSH
7722: CALL_OW 72
7726: PPUSH
7727: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
7731: LD_ADDR_VAR 0 7
7735: PUSH
7736: LD_VAR 0 3
7740: PPUSH
7741: LD_INT 21
7743: PUSH
7744: LD_INT 2
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 72
7755: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
7756: LD_ADDR_VAR 0 4
7760: PUSH
7761: LD_INT 81
7763: PUSH
7764: LD_INT 1
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PPUSH
7771: CALL_OW 69
7775: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
7776: LD_ADDR_VAR 0 5
7780: PUSH
7781: LD_INT 57
7783: PUSH
7784: LD_INT 66
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 62
7793: PUSH
7794: LD_INT 58
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7805: LD_INT 35
7807: PPUSH
7808: CALL_OW 67
// for i in filter do
7812: LD_ADDR_VAR 0 2
7816: PUSH
7817: LD_VAR 0 7
7821: PUSH
7822: FOR_IN
7823: IFFALSE 8262
// begin if IsDead ( i ) then
7825: LD_VAR 0 2
7829: PPUSH
7830: CALL_OW 301
7834: IFFALSE 7854
// begin filter := filter diff i ;
7836: LD_ADDR_VAR 0 7
7840: PUSH
7841: LD_VAR 0 7
7845: PUSH
7846: LD_VAR 0 2
7850: DIFF
7851: ST_TO_ADDR
// continue ;
7852: GO 7822
// end ; tmp := IsDrivenBy ( i ) ;
7854: LD_ADDR_VAR 0 3
7858: PUSH
7859: LD_VAR 0 2
7863: PPUSH
7864: CALL_OW 311
7868: ST_TO_ADDR
// if not tmp then
7869: LD_VAR 0 3
7873: NOT
7874: IFFALSE 7878
// continue ;
7876: GO 7822
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
7878: LD_VAR 0 2
7882: PPUSH
7883: CALL_OW 261
7887: PUSH
7888: LD_INT 30
7890: GREATER
7891: PUSH
7892: LD_VAR 0 2
7896: PPUSH
7897: CALL_OW 110
7901: PUSH
7902: LD_INT 2
7904: EQUAL
7905: AND
7906: IFFALSE 7922
// SetTag ( i , 0 ) else
7908: LD_VAR 0 2
7912: PPUSH
7913: LD_INT 0
7915: PPUSH
7916: CALL_OW 109
7920: GO 7966
// if GetTag ( i ) = 2 then
7922: LD_VAR 0 2
7926: PPUSH
7927: CALL_OW 110
7931: PUSH
7932: LD_INT 2
7934: EQUAL
7935: IFFALSE 7966
// begin ComMoveXY ( i , 52 , 50 ) ;
7937: LD_VAR 0 2
7941: PPUSH
7942: LD_INT 52
7944: PPUSH
7945: LD_INT 50
7947: PPUSH
7948: CALL_OW 111
// AddComMoveUnit ( i , amDepot ) ;
7952: LD_VAR 0 2
7956: PPUSH
7957: LD_EXP 26
7961: PPUSH
7962: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
7966: LD_VAR 0 2
7970: PPUSH
7971: CALL_OW 256
7975: PUSH
7976: LD_INT 600
7978: GREATEREQUAL
7979: PUSH
7980: LD_VAR 0 2
7984: PPUSH
7985: CALL_OW 110
7989: NOT
7990: AND
7991: IFFALSE 8017
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7993: LD_VAR 0 2
7997: PPUSH
7998: LD_VAR 0 4
8002: PPUSH
8003: LD_VAR 0 2
8007: PPUSH
8008: CALL_OW 74
8012: PPUSH
8013: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8017: LD_VAR 0 2
8021: PPUSH
8022: CALL_OW 256
8026: PUSH
8027: LD_INT 600
8029: LESS
8030: PUSH
8031: LD_VAR 0 2
8035: PPUSH
8036: CALL_OW 110
8040: NOT
8041: AND
8042: IFFALSE 8118
// begin SetTag ( i , 1 ) ;
8044: LD_VAR 0 2
8048: PPUSH
8049: LD_INT 1
8051: PPUSH
8052: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8056: LD_ADDR_VAR 0 6
8060: PUSH
8061: LD_VAR 0 2
8065: PPUSH
8066: LD_VAR 0 5
8070: PPUSH
8071: CALL 77708 0 2
8075: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8076: LD_VAR 0 2
8080: PPUSH
8081: LD_VAR 0 6
8085: PUSH
8086: LD_INT 1
8088: ARRAY
8089: PPUSH
8090: LD_VAR 0 6
8094: PUSH
8095: LD_INT 2
8097: ARRAY
8098: PPUSH
8099: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8103: LD_VAR 0 2
8107: PPUSH
8108: LD_INT 40
8110: PPUSH
8111: LD_INT 49
8113: PPUSH
8114: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8118: LD_VAR 0 2
8122: PPUSH
8123: CALL_OW 110
8127: PUSH
8128: LD_INT 1
8130: EQUAL
8131: PUSH
8132: LD_VAR 0 2
8136: PPUSH
8137: LD_INT 40
8139: PPUSH
8140: LD_INT 49
8142: PPUSH
8143: CALL_OW 297
8147: PUSH
8148: LD_INT 9
8150: LESS
8151: AND
8152: PUSH
8153: LD_VAR 0 3
8157: AND
8158: IFFALSE 8260
// begin ComExitVehicle ( tmp ) ;
8160: LD_VAR 0 3
8164: PPUSH
8165: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8169: LD_VAR 0 3
8173: PPUSH
8174: LD_VAR 0 2
8178: PPUSH
8179: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8183: LD_INT 35
8185: PPUSH
8186: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8190: LD_VAR 0 2
8194: PPUSH
8195: CALL_OW 256
8199: PUSH
8200: LD_INT 1000
8202: EQUAL
8203: IFFALSE 8183
// ComEnterUnit ( tmp , i ) ;
8205: LD_VAR 0 3
8209: PPUSH
8210: LD_VAR 0 2
8214: PPUSH
8215: CALL_OW 120
// if GetFuel ( i ) <= 40 then
8219: LD_VAR 0 2
8223: PPUSH
8224: CALL_OW 261
8228: PUSH
8229: LD_INT 40
8231: LESSEQUAL
8232: IFFALSE 8248
// SetTag ( i , 2 ) else
8234: LD_VAR 0 2
8238: PPUSH
8239: LD_INT 2
8241: PPUSH
8242: CALL_OW 109
8246: GO 8260
// SetTag ( i , 0 ) ;
8248: LD_VAR 0 2
8252: PPUSH
8253: LD_INT 0
8255: PPUSH
8256: CALL_OW 109
// end ; end ;
8260: GO 7822
8262: POP
8263: POP
// until not filter ;
8264: LD_VAR 0 7
8268: NOT
8269: IFFALSE 7805
// end ; end_of_file
8271: LD_VAR 0 1
8275: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
8276: LD_INT 0
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
// uc_side := 3 ;
8283: LD_ADDR_OWVAR 20
8287: PUSH
8288: LD_INT 3
8290: ST_TO_ADDR
// uc_nation := 3 ;
8291: LD_ADDR_OWVAR 21
8295: PUSH
8296: LD_INT 3
8298: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
8299: LD_ADDR_EXP 28
8303: PUSH
8304: LD_INT 8
8306: PUSH
8307: LD_INT 11
8309: PUSH
8310: LD_INT 14
8312: PUSH
8313: LD_INT 17
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: PUSH
8322: LD_OWVAR 67
8326: ARRAY
8327: ST_TO_ADDR
// ruMobile := [ ] ;
8328: LD_ADDR_EXP 29
8332: PUSH
8333: EMPTY
8334: ST_TO_ADDR
// ruBuildList := [ ] ;
8335: LD_ADDR_EXP 30
8339: PUSH
8340: EMPTY
8341: ST_TO_ADDR
// russianAttackers := [ ] ;
8342: LD_ADDR_EXP 31
8346: PUSH
8347: EMPTY
8348: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
8349: LD_ADDR_VAR 0 5
8353: PUSH
8354: LD_INT 43
8356: PUSH
8357: LD_INT 44
8359: PUSH
8360: LD_INT 46
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: LIST
8367: ST_TO_ADDR
// if Difficulty > 2 then
8368: LD_OWVAR 67
8372: PUSH
8373: LD_INT 2
8375: GREATER
8376: IFFALSE 8399
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
8378: LD_ADDR_VAR 0 5
8382: PUSH
8383: LD_VAR 0 5
8387: PUSH
8388: LD_INT 45
8390: PUSH
8391: LD_INT 46
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: ADD
8398: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
8399: LD_ADDR_EXP 27
8403: PUSH
8404: LD_STRING Borodin
8406: PPUSH
8407: CALL_OW 25
8411: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
8412: LD_EXP 27
8416: PPUSH
8417: LD_INT 28
8419: PPUSH
8420: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
8424: LD_INT 28
8426: PPUSH
8427: CALL_OW 274
8431: PPUSH
8432: LD_INT 1
8434: PPUSH
8435: LD_INT 3000
8437: PUSH
8438: LD_INT 4000
8440: PUSH
8441: LD_INT 5000
8443: PUSH
8444: LD_INT 6000
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: PUSH
8453: LD_OWVAR 67
8457: ARRAY
8458: PPUSH
8459: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
8463: LD_INT 28
8465: PPUSH
8466: CALL_OW 274
8470: PPUSH
8471: LD_INT 2
8473: PPUSH
8474: LD_INT 1000
8476: PPUSH
8477: CALL_OW 277
// if Difficulty > 2 then
8481: LD_OWVAR 67
8485: PUSH
8486: LD_INT 2
8488: GREATER
8489: IFFALSE 8613
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
8491: LD_ADDR_VAR 0 4
8495: PUSH
8496: LD_INT 99
8498: PUSH
8499: LD_INT 130
8501: PUSH
8502: LD_INT 2
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: PUSH
8510: LD_INT 121
8512: PUSH
8513: LD_INT 127
8515: PUSH
8516: LD_INT 4
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: LIST
8523: PUSH
8524: LD_INT 117
8526: PUSH
8527: LD_INT 121
8529: PUSH
8530: LD_INT 4
8532: PUSH
8533: EMPTY
8534: LIST
8535: LIST
8536: LIST
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: LIST
8542: ST_TO_ADDR
// for i in tmp do
8543: LD_ADDR_VAR 0 2
8547: PUSH
8548: LD_VAR 0 4
8552: PUSH
8553: FOR_IN
8554: IFFALSE 8611
// begin bc_type := b_turret ;
8556: LD_ADDR_OWVAR 42
8560: PUSH
8561: LD_INT 33
8563: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
8564: LD_ADDR_OWVAR 43
8568: PUSH
8569: LD_INT 2
8571: PUSH
8572: LD_OWVAR 67
8576: PLUS
8577: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
8578: LD_VAR 0 2
8582: PUSH
8583: LD_INT 1
8585: ARRAY
8586: PPUSH
8587: LD_VAR 0 2
8591: PUSH
8592: LD_INT 2
8594: ARRAY
8595: PPUSH
8596: LD_VAR 0 2
8600: PUSH
8601: LD_INT 3
8603: ARRAY
8604: PPUSH
8605: CALL_OW 47
// end ;
8609: GO 8553
8611: POP
8612: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
8613: LD_ADDR_VAR 0 2
8617: PUSH
8618: LD_INT 22
8620: PUSH
8621: LD_INT 3
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PUSH
8628: LD_INT 21
8630: PUSH
8631: LD_INT 3
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PPUSH
8642: CALL_OW 69
8646: PUSH
8647: FOR_IN
8648: IFFALSE 8670
// SetBLevel ( i , 2 + Difficulty ) ;
8650: LD_VAR 0 2
8654: PPUSH
8655: LD_INT 2
8657: PUSH
8658: LD_OWVAR 67
8662: PLUS
8663: PPUSH
8664: CALL_OW 241
8668: GO 8647
8670: POP
8671: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
8672: LD_ADDR_VAR 0 4
8676: PUSH
8677: LD_INT 22
8679: PUSH
8680: LD_INT 3
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 2
8689: PUSH
8690: LD_INT 30
8692: PUSH
8693: LD_INT 32
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: PUSH
8700: LD_INT 30
8702: PUSH
8703: LD_INT 33
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: LIST
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PPUSH
8719: CALL_OW 69
8723: ST_TO_ADDR
// for i in tmp do
8724: LD_ADDR_VAR 0 2
8728: PUSH
8729: LD_VAR 0 4
8733: PUSH
8734: FOR_IN
8735: IFFALSE 8767
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
8737: LD_VAR 0 2
8741: PPUSH
8742: LD_VAR 0 5
8746: PUSH
8747: LD_INT 1
8749: PPUSH
8750: LD_VAR 0 5
8754: PPUSH
8755: CALL_OW 12
8759: ARRAY
8760: PPUSH
8761: CALL_OW 431
8765: GO 8734
8767: POP
8768: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
8769: LD_ADDR_VAR 0 2
8773: PUSH
8774: LD_INT 22
8776: PUSH
8777: LD_INT 3
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: PUSH
8784: LD_INT 30
8786: PUSH
8787: LD_INT 32
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PPUSH
8798: CALL_OW 69
8802: PUSH
8803: FOR_IN
8804: IFFALSE 8853
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8806: LD_INT 0
8808: PPUSH
8809: LD_INT 5
8811: PUSH
8812: LD_INT 6
8814: PUSH
8815: LD_INT 7
8817: PUSH
8818: LD_INT 8
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: PUSH
8827: LD_OWVAR 67
8831: ARRAY
8832: PPUSH
8833: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
8837: CALL_OW 44
8841: PPUSH
8842: LD_VAR 0 2
8846: PPUSH
8847: CALL_OW 52
// end ;
8851: GO 8803
8853: POP
8854: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
8855: LD_ADDR_VAR 0 2
8859: PUSH
8860: LD_INT 22
8862: PUSH
8863: LD_INT 3
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: LD_INT 30
8872: PUSH
8873: LD_INT 5
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: PPUSH
8884: CALL_OW 69
8888: PUSH
8889: FOR_IN
8890: IFFALSE 8980
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
8892: LD_ADDR_VAR 0 3
8896: PUSH
8897: DOUBLE
8898: LD_INT 1
8900: DEC
8901: ST_TO_ADDR
8902: LD_INT 2
8904: PUSH
8905: LD_INT 2
8907: PUSH
8908: LD_INT 3
8910: PUSH
8911: LD_INT 3
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: PUSH
8920: LD_OWVAR 67
8924: ARRAY
8925: PUSH
8926: FOR_TO
8927: IFFALSE 8976
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8929: LD_INT 0
8931: PPUSH
8932: LD_INT 5
8934: PUSH
8935: LD_INT 6
8937: PUSH
8938: LD_INT 7
8940: PUSH
8941: LD_INT 8
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: PUSH
8950: LD_OWVAR 67
8954: ARRAY
8955: PPUSH
8956: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
8960: CALL_OW 44
8964: PPUSH
8965: LD_VAR 0 2
8969: PPUSH
8970: CALL_OW 52
// end ;
8974: GO 8926
8976: POP
8977: POP
// end ;
8978: GO 8889
8980: POP
8981: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
8982: LD_ADDR_VAR 0 2
8986: PUSH
8987: DOUBLE
8988: LD_INT 1
8990: DEC
8991: ST_TO_ADDR
8992: LD_INT 3
8994: PUSH
8995: LD_INT 4
8997: PUSH
8998: LD_INT 5
9000: PUSH
9001: LD_INT 5
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: PUSH
9010: LD_OWVAR 67
9014: ARRAY
9015: PUSH
9016: FOR_TO
9017: IFFALSE 9064
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9019: LD_INT 0
9021: PPUSH
9022: LD_INT 4
9024: PUSH
9025: LD_INT 5
9027: PUSH
9028: LD_INT 5
9030: PUSH
9031: LD_INT 6
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: PUSH
9040: LD_OWVAR 67
9044: ARRAY
9045: PPUSH
9046: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9050: CALL_OW 44
9054: PPUSH
9055: LD_INT 28
9057: PPUSH
9058: CALL_OW 52
// end ;
9062: GO 9016
9064: POP
9065: POP
// for i := 1 to 2 do
9066: LD_ADDR_VAR 0 2
9070: PUSH
9071: DOUBLE
9072: LD_INT 1
9074: DEC
9075: ST_TO_ADDR
9076: LD_INT 2
9078: PUSH
9079: FOR_TO
9080: IFFALSE 9114
// begin PrepareScientist ( false , 6 ) ;
9082: LD_INT 0
9084: PPUSH
9085: LD_INT 6
9087: PPUSH
9088: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9092: CALL_OW 44
9096: PPUSH
9097: LD_INT 81
9099: PPUSH
9100: LD_INT 93
9102: PPUSH
9103: CALL_OW 428
9107: PPUSH
9108: CALL_OW 52
// end ;
9112: GO 9079
9114: POP
9115: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9116: LD_INT 22
9118: PPUSH
9119: LD_INT 1
9121: PPUSH
9122: LD_INT 3
9124: PPUSH
9125: LD_INT 51
9127: PPUSH
9128: LD_INT 100
9130: PPUSH
9131: CALL 42553 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9135: CALL_OW 45
9139: PPUSH
9140: LD_INT 91
9142: PPUSH
9143: LD_INT 94
9145: PPUSH
9146: LD_INT 3
9148: PPUSH
9149: LD_INT 0
9151: PPUSH
9152: CALL_OW 50
// for i := 1 to 2 do
9156: LD_ADDR_VAR 0 2
9160: PUSH
9161: DOUBLE
9162: LD_INT 1
9164: DEC
9165: ST_TO_ADDR
9166: LD_INT 2
9168: PUSH
9169: FOR_TO
9170: IFFALSE 9214
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9172: LD_INT 22
9174: PPUSH
9175: LD_INT 1
9177: PPUSH
9178: LD_INT 3
9180: PPUSH
9181: LD_INT 52
9183: PPUSH
9184: LD_INT 100
9186: PPUSH
9187: CALL 42553 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9191: CALL_OW 45
9195: PPUSH
9196: LD_INT 91
9198: PPUSH
9199: LD_INT 94
9201: PPUSH
9202: LD_INT 4
9204: PPUSH
9205: LD_INT 0
9207: PPUSH
9208: CALL_OW 50
// end ;
9212: GO 9169
9214: POP
9215: POP
// end ;
9216: LD_VAR 0 1
9220: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
9221: LD_INT 0
9223: PPUSH
9224: PPUSH
9225: PPUSH
9226: PPUSH
9227: PPUSH
// uc_side := 3 ;
9228: LD_ADDR_OWVAR 20
9232: PUSH
9233: LD_INT 3
9235: ST_TO_ADDR
// uc_nation := 3 ;
9236: LD_ADDR_OWVAR 21
9240: PUSH
9241: LD_INT 3
9243: ST_TO_ADDR
// for i := 1 to 4 do
9244: LD_ADDR_VAR 0 2
9248: PUSH
9249: DOUBLE
9250: LD_INT 1
9252: DEC
9253: ST_TO_ADDR
9254: LD_INT 4
9256: PUSH
9257: FOR_TO
9258: IFFALSE 9385
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9260: LD_INT 22
9262: PPUSH
9263: LD_INT 1
9265: PPUSH
9266: LD_INT 1
9268: PPUSH
9269: LD_INT 42
9271: PUSH
9272: LD_INT 43
9274: PUSH
9275: LD_INT 44
9277: PUSH
9278: EMPTY
9279: LIST
9280: LIST
9281: LIST
9282: PUSH
9283: LD_INT 1
9285: PPUSH
9286: LD_INT 3
9288: PPUSH
9289: CALL_OW 12
9293: ARRAY
9294: PPUSH
9295: LD_INT 40
9297: PPUSH
9298: CALL 42553 0 5
// veh := CreateVehicle ;
9302: LD_ADDR_VAR 0 4
9306: PUSH
9307: CALL_OW 45
9311: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9312: LD_VAR 0 4
9316: PPUSH
9317: LD_INT 5
9319: PPUSH
9320: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
9324: LD_VAR 0 4
9328: PPUSH
9329: LD_INT 7
9331: PPUSH
9332: LD_INT 0
9334: PPUSH
9335: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9339: LD_INT 0
9341: PPUSH
9342: LD_INT 5
9344: PPUSH
9345: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9349: CALL_OW 44
9353: PPUSH
9354: LD_VAR 0 4
9358: PPUSH
9359: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9363: LD_ADDR_VAR 0 5
9367: PUSH
9368: LD_VAR 0 5
9372: PPUSH
9373: LD_VAR 0 4
9377: PPUSH
9378: CALL 74370 0 2
9382: ST_TO_ADDR
// end ;
9383: GO 9257
9385: POP
9386: POP
// for i := 1 to 3 do
9387: LD_ADDR_VAR 0 2
9391: PUSH
9392: DOUBLE
9393: LD_INT 1
9395: DEC
9396: ST_TO_ADDR
9397: LD_INT 3
9399: PUSH
9400: FOR_TO
9401: IFFALSE 9528
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9403: LD_INT 22
9405: PPUSH
9406: LD_INT 1
9408: PPUSH
9409: LD_INT 1
9411: PPUSH
9412: LD_INT 42
9414: PUSH
9415: LD_INT 43
9417: PUSH
9418: LD_INT 44
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: PUSH
9426: LD_INT 1
9428: PPUSH
9429: LD_INT 3
9431: PPUSH
9432: CALL_OW 12
9436: ARRAY
9437: PPUSH
9438: LD_INT 40
9440: PPUSH
9441: CALL 42553 0 5
// veh := CreateVehicle ;
9445: LD_ADDR_VAR 0 4
9449: PUSH
9450: CALL_OW 45
9454: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9455: LD_VAR 0 4
9459: PPUSH
9460: LD_INT 5
9462: PPUSH
9463: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
9467: LD_VAR 0 4
9471: PPUSH
9472: LD_INT 8
9474: PPUSH
9475: LD_INT 0
9477: PPUSH
9478: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9482: LD_INT 0
9484: PPUSH
9485: LD_INT 5
9487: PPUSH
9488: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9492: CALL_OW 44
9496: PPUSH
9497: LD_VAR 0 4
9501: PPUSH
9502: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9506: LD_ADDR_VAR 0 5
9510: PUSH
9511: LD_VAR 0 5
9515: PPUSH
9516: LD_VAR 0 4
9520: PPUSH
9521: CALL 74370 0 2
9525: ST_TO_ADDR
// end ;
9526: GO 9400
9528: POP
9529: POP
// for i := 1 to 2 do
9530: LD_ADDR_VAR 0 2
9534: PUSH
9535: DOUBLE
9536: LD_INT 1
9538: DEC
9539: ST_TO_ADDR
9540: LD_INT 2
9542: PUSH
9543: FOR_TO
9544: IFFALSE 9603
// begin PrepareSoldier ( false , 5 ) ;
9546: LD_INT 0
9548: PPUSH
9549: LD_INT 5
9551: PPUSH
9552: CALL_OW 381
// un := CreateHuman ;
9556: LD_ADDR_VAR 0 3
9560: PUSH
9561: CALL_OW 44
9565: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
9566: LD_VAR 0 3
9570: PPUSH
9571: LD_INT 8
9573: PPUSH
9574: LD_INT 0
9576: PPUSH
9577: CALL_OW 49
// tmp := Join ( tmp , un ) ;
9581: LD_ADDR_VAR 0 5
9585: PUSH
9586: LD_VAR 0 5
9590: PPUSH
9591: LD_VAR 0 3
9595: PPUSH
9596: CALL 74370 0 2
9600: ST_TO_ADDR
// end ;
9601: GO 9543
9603: POP
9604: POP
// for i in tmp do
9605: LD_ADDR_VAR 0 2
9609: PUSH
9610: LD_VAR 0 5
9614: PUSH
9615: FOR_IN
9616: IFFALSE 9635
// ComAgressiveMove ( i , 51 , 16 ) ;
9618: LD_VAR 0 2
9622: PPUSH
9623: LD_INT 51
9625: PPUSH
9626: LD_INT 16
9628: PPUSH
9629: CALL_OW 114
9633: GO 9615
9635: POP
9636: POP
// end ;
9637: LD_VAR 0 1
9641: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
9642: LD_EXP 29
9646: IFFALSE 10221
9648: GO 9650
9650: DISABLE
9651: LD_INT 0
9653: PPUSH
9654: PPUSH
9655: PPUSH
// begin enable ;
9656: ENABLE
// if not ruMobile then
9657: LD_EXP 29
9661: NOT
9662: IFFALSE 9666
// exit ;
9664: GO 10221
// for i in ruMobile do
9666: LD_ADDR_VAR 0 1
9670: PUSH
9671: LD_EXP 29
9675: PUSH
9676: FOR_IN
9677: IFFALSE 10219
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
9679: LD_VAR 0 1
9683: PPUSH
9684: CALL_OW 302
9688: NOT
9689: PUSH
9690: LD_VAR 0 1
9694: PPUSH
9695: CALL_OW 255
9699: PUSH
9700: LD_INT 3
9702: NONEQUAL
9703: OR
9704: IFFALSE 9724
// begin ruMobile := ruMobile diff i ;
9706: LD_ADDR_EXP 29
9710: PUSH
9711: LD_EXP 29
9715: PUSH
9716: LD_VAR 0 1
9720: DIFF
9721: ST_TO_ADDR
// continue ;
9722: GO 9676
// end ; if GetTag ( i ) = 300 then
9724: LD_VAR 0 1
9728: PPUSH
9729: CALL_OW 110
9733: PUSH
9734: LD_INT 300
9736: EQUAL
9737: IFFALSE 9852
// begin if GetFuel ( i ) < 50 then
9739: LD_VAR 0 1
9743: PPUSH
9744: CALL_OW 261
9748: PUSH
9749: LD_INT 50
9751: LESS
9752: IFFALSE 9811
// begin ComMoveXY ( i , 93 , 100 ) ;
9754: LD_VAR 0 1
9758: PPUSH
9759: LD_INT 93
9761: PPUSH
9762: LD_INT 100
9764: PPUSH
9765: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9769: LD_INT 35
9771: PPUSH
9772: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
9776: LD_VAR 0 1
9780: PPUSH
9781: LD_INT 93
9783: PPUSH
9784: LD_INT 100
9786: PPUSH
9787: CALL_OW 297
9791: PUSH
9792: LD_INT 4
9794: LESS
9795: IFFALSE 9769
// SetFuel ( i , 100 ) ;
9797: LD_VAR 0 1
9801: PPUSH
9802: LD_INT 100
9804: PPUSH
9805: CALL_OW 240
// end else
9809: GO 9852
// if not IsInArea ( i , ruParkingArea ) then
9811: LD_VAR 0 1
9815: PPUSH
9816: LD_INT 10
9818: PPUSH
9819: CALL_OW 308
9823: NOT
9824: IFFALSE 9840
// ComMoveToArea ( i , ruParkingArea ) else
9826: LD_VAR 0 1
9830: PPUSH
9831: LD_INT 10
9833: PPUSH
9834: CALL_OW 113
9838: GO 9852
// SetTag ( i , 301 ) ;
9840: LD_VAR 0 1
9844: PPUSH
9845: LD_INT 301
9847: PPUSH
9848: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
9852: LD_VAR 0 1
9856: PPUSH
9857: CALL_OW 110
9861: PUSH
9862: LD_INT 301
9864: EQUAL
9865: IFFALSE 9995
// begin if GetLives ( i ) < 1000 then
9867: LD_VAR 0 1
9871: PPUSH
9872: CALL_OW 256
9876: PUSH
9877: LD_INT 1000
9879: LESS
9880: IFFALSE 9972
// begin if not IsDrivenBy ( i ) then
9882: LD_VAR 0 1
9886: PPUSH
9887: CALL_OW 311
9891: NOT
9892: IFFALSE 9896
// continue ;
9894: GO 9676
// mech := IsDrivenBy ( i ) ;
9896: LD_ADDR_VAR 0 2
9900: PUSH
9901: LD_VAR 0 1
9905: PPUSH
9906: CALL_OW 311
9910: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9911: LD_VAR 0 2
9915: PPUSH
9916: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9920: LD_VAR 0 2
9924: PPUSH
9925: LD_VAR 0 1
9929: PPUSH
9930: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9934: LD_INT 35
9936: PPUSH
9937: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9941: LD_VAR 0 1
9945: PPUSH
9946: CALL_OW 256
9950: PUSH
9951: LD_INT 1000
9953: EQUAL
9954: IFFALSE 9934
// ComEnterUnit ( mech , i ) ;
9956: LD_VAR 0 2
9960: PPUSH
9961: LD_VAR 0 1
9965: PPUSH
9966: CALL_OW 120
// end else
9970: GO 9995
// if IsDrivenBy ( i ) then
9972: LD_VAR 0 1
9976: PPUSH
9977: CALL_OW 311
9981: IFFALSE 9995
// SetTag ( i , 0 ) ;
9983: LD_VAR 0 1
9987: PPUSH
9988: LD_INT 0
9990: PPUSH
9991: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
9995: LD_VAR 0 1
9999: PPUSH
10000: CALL_OW 110
10004: PUSH
10005: LD_INT 300
10007: LESS
10008: IFFALSE 10217
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10010: LD_ADDR_VAR 0 3
10014: PUSH
10015: LD_INT 11
10017: PPUSH
10018: LD_INT 81
10020: PUSH
10021: LD_INT 3
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PPUSH
10028: CALL_OW 70
10032: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10033: LD_VAR 0 1
10037: PPUSH
10038: CALL_OW 256
10042: PUSH
10043: LD_INT 650
10045: LESS
10046: IFFALSE 10071
// begin ComStop ( i ) ;
10048: LD_VAR 0 1
10052: PPUSH
10053: CALL_OW 141
// SetTag ( i , 300 ) ;
10057: LD_VAR 0 1
10061: PPUSH
10062: LD_INT 300
10064: PPUSH
10065: CALL_OW 109
// continue ;
10069: GO 9676
// end ; if enemy then
10071: LD_VAR 0 3
10075: IFFALSE 10115
// begin if not HasTask ( i ) then
10077: LD_VAR 0 1
10081: PPUSH
10082: CALL_OW 314
10086: NOT
10087: IFFALSE 10113
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10089: LD_VAR 0 1
10093: PPUSH
10094: LD_VAR 0 3
10098: PPUSH
10099: LD_VAR 0 1
10103: PPUSH
10104: CALL_OW 74
10108: PPUSH
10109: CALL_OW 115
// end else
10113: GO 10217
// if ruMobile > 2 then
10115: LD_EXP 29
10119: PUSH
10120: LD_INT 2
10122: GREATER
10123: IFFALSE 10217
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10125: LD_ADDR_VAR 0 3
10129: PUSH
10130: LD_INT 81
10132: PUSH
10133: LD_INT 3
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PPUSH
10140: CALL_OW 69
10144: ST_TO_ADDR
// if enemy then
10145: LD_VAR 0 3
10149: IFFALSE 10217
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10151: LD_VAR 0 1
10155: PPUSH
10156: LD_INT 116
10158: PUSH
10159: LD_INT 95
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: LD_INT 84
10168: PUSH
10169: LD_INT 68
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: LD_INT 58
10178: PUSH
10179: LD_INT 53
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: PUSH
10186: LD_INT 44
10188: PUSH
10189: LD_INT 35
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PUSH
10196: LD_INT 45
10198: PUSH
10199: LD_INT 23
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: PPUSH
10213: CALL 76966 0 2
// end ; end ; end ;
10217: GO 9676
10219: POP
10220: POP
// end ;
10221: PPOPN 3
10223: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
10224: LD_INT 3
10226: PUSH
10227: LD_INT 22
10229: PUSH
10230: LD_INT 1
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PUSH
10241: LD_INT 32
10243: PUSH
10244: LD_INT 1
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PPUSH
10255: CALL_OW 69
10259: IFFALSE 10343
10261: GO 10263
10263: DISABLE
10264: LD_INT 0
10266: PPUSH
// begin enable ;
10267: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
10268: LD_ADDR_VAR 0 1
10272: PUSH
10273: LD_INT 3
10275: PUSH
10276: LD_INT 22
10278: PUSH
10279: LD_INT 1
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: LD_INT 32
10292: PUSH
10293: LD_INT 1
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PPUSH
10304: CALL_OW 69
10308: PUSH
10309: FOR_IN
10310: IFFALSE 10341
// if GetFuel ( i ) < 3 then
10312: LD_VAR 0 1
10316: PPUSH
10317: CALL_OW 261
10321: PUSH
10322: LD_INT 3
10324: LESS
10325: IFFALSE 10339
// SetFuel ( i , 3 ) ;
10327: LD_VAR 0 1
10331: PPUSH
10332: LD_INT 3
10334: PPUSH
10335: CALL_OW 240
10339: GO 10309
10341: POP
10342: POP
// end ;
10343: PPOPN 1
10345: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
10346: LD_INT 29
10348: PPUSH
10349: CALL_OW 302
10353: PUSH
10354: LD_INT 29
10356: PPUSH
10357: CALL_OW 461
10361: PUSH
10362: LD_INT 2
10364: EQUAL
10365: AND
10366: IFFALSE 10599
10368: GO 10370
10370: DISABLE
10371: LD_INT 0
10373: PPUSH
10374: PPUSH
// begin enable ;
10375: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
10376: LD_ADDR_VAR 0 1
10380: PUSH
10381: LD_INT 21
10383: PUSH
10384: LD_INT 22
10386: PUSH
10387: LD_INT 23
10389: PUSH
10390: LD_INT 24
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: PUSH
10399: LD_INT 1
10401: PPUSH
10402: LD_INT 4
10404: PPUSH
10405: CALL_OW 12
10409: ARRAY
10410: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
10411: LD_ADDR_VAR 0 2
10415: PUSH
10416: LD_INT 42
10418: PUSH
10419: LD_INT 44
10421: PUSH
10422: LD_INT 43
10424: PUSH
10425: LD_INT 46
10427: PUSH
10428: LD_INT 45
10430: PUSH
10431: LD_INT 46
10433: PUSH
10434: LD_INT 45
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: PUSH
10446: LD_OWVAR 67
10450: PUSH
10451: LD_INT 0
10453: PPUSH
10454: LD_INT 3
10456: PPUSH
10457: CALL_OW 12
10461: PLUS
10462: ARRAY
10463: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
10464: LD_VAR 0 1
10468: PUSH
10469: LD_INT 21
10471: PUSH
10472: LD_INT 22
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: IN
10479: PUSH
10480: LD_VAR 0 2
10484: PUSH
10485: LD_INT 46
10487: EQUAL
10488: AND
10489: IFFALSE 10518
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10491: LD_ADDR_VAR 0 2
10495: PUSH
10496: LD_INT 44
10498: PUSH
10499: LD_INT 45
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: LD_INT 1
10508: PPUSH
10509: LD_INT 2
10511: PPUSH
10512: CALL_OW 12
10516: ARRAY
10517: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
10518: LD_OWVAR 1
10522: PUSH
10523: LD_INT 31500
10525: PUSH
10526: LD_INT 27300
10528: PUSH
10529: LD_INT 23100
10531: PUSH
10532: LD_INT 21000
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: PUSH
10541: LD_OWVAR 67
10545: ARRAY
10546: LESS
10547: IFFALSE 10576
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
10549: LD_ADDR_VAR 0 2
10553: PUSH
10554: LD_INT 44
10556: PUSH
10557: LD_INT 43
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: LD_INT 1
10566: PPUSH
10567: LD_INT 2
10569: PPUSH
10570: CALL_OW 12
10574: ARRAY
10575: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
10576: LD_INT 29
10578: PPUSH
10579: LD_VAR 0 1
10583: PPUSH
10584: LD_INT 1
10586: PPUSH
10587: LD_INT 1
10589: PPUSH
10590: LD_VAR 0 2
10594: PPUSH
10595: CALL_OW 185
// end ;
10599: PPOPN 2
10601: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
10602: LD_INT 28
10604: PPUSH
10605: CALL_OW 302
10609: IFFALSE 11448
10611: GO 10613
10613: DISABLE
10614: LD_INT 0
10616: PPUSH
10617: PPUSH
10618: PPUSH
10619: PPUSH
10620: PPUSH
10621: PPUSH
10622: PPUSH
10623: PPUSH
// begin enable ;
10624: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
10625: LD_ADDR_VAR 0 3
10629: PUSH
10630: LD_INT 12
10632: PPUSH
10633: LD_INT 3
10635: PUSH
10636: LD_INT 24
10638: PUSH
10639: LD_INT 1000
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PUSH
10650: LD_INT 21
10652: PUSH
10653: LD_INT 3
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PPUSH
10664: CALL_OW 70
10668: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10669: LD_ADDR_VAR 0 4
10673: PUSH
10674: LD_INT 22
10676: PUSH
10677: LD_INT 3
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PUSH
10684: LD_INT 25
10686: PUSH
10687: LD_INT 2
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PPUSH
10698: CALL_OW 69
10702: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
10703: LD_ADDR_VAR 0 5
10707: PUSH
10708: LD_INT 22
10710: PUSH
10711: LD_INT 3
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 34
10720: PUSH
10721: LD_INT 52
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PPUSH
10732: CALL_OW 69
10736: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
10737: LD_ADDR_VAR 0 7
10741: PUSH
10742: LD_INT 22
10744: PUSH
10745: LD_INT 3
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: LD_INT 25
10754: PUSH
10755: LD_INT 4
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PPUSH
10766: CALL_OW 69
10770: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
10771: LD_ADDR_VAR 0 8
10775: PUSH
10776: LD_INT 81
10778: PPUSH
10779: LD_INT 93
10781: PPUSH
10782: CALL_OW 428
10786: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
10787: LD_VAR 0 7
10791: PUSH
10792: LD_VAR 0 4
10796: PPUSH
10797: LD_INT 120
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PPUSH
10807: CALL_OW 72
10811: AND
10812: IFFALSE 10825
// ComExitAll ( sci ) else
10814: LD_VAR 0 7
10818: PPUSH
10819: CALL 74841 0 1
10823: GO 10898
// if sci then
10825: LD_VAR 0 7
10829: IFFALSE 10898
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
10831: LD_VAR 0 7
10835: PPUSH
10836: LD_INT 3
10838: PUSH
10839: LD_INT 54
10841: PUSH
10842: EMPTY
10843: LIST
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PPUSH
10849: CALL_OW 72
10853: PUSH
10854: LD_VAR 0 8
10858: PPUSH
10859: CALL_OW 302
10863: AND
10864: IFFALSE 10898
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
10866: LD_VAR 0 7
10870: PPUSH
10871: LD_INT 3
10873: PUSH
10874: LD_INT 54
10876: PUSH
10877: EMPTY
10878: LIST
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: PPUSH
10884: CALL_OW 72
10888: PPUSH
10889: LD_VAR 0 8
10893: PPUSH
10894: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
10898: LD_VAR 0 5
10902: PPUSH
10903: LD_INT 50
10905: PUSH
10906: EMPTY
10907: LIST
10908: PPUSH
10909: CALL_OW 72
10913: PUSH
10914: LD_VAR 0 3
10918: AND
10919: IFFALSE 10950
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
10921: LD_VAR 0 5
10925: PPUSH
10926: LD_INT 50
10928: PUSH
10929: EMPTY
10930: LIST
10931: PPUSH
10932: CALL_OW 72
10936: PPUSH
10937: LD_VAR 0 3
10941: PUSH
10942: LD_INT 1
10944: ARRAY
10945: PPUSH
10946: CALL_OW 130
// if eng then
10950: LD_VAR 0 4
10954: IFFALSE 11448
// begin for i in eng do
10956: LD_ADDR_VAR 0 1
10960: PUSH
10961: LD_VAR 0 4
10965: PUSH
10966: FOR_IN
10967: IFFALSE 11446
// begin tag := GetTag ( i ) ;
10969: LD_ADDR_VAR 0 6
10973: PUSH
10974: LD_VAR 0 1
10978: PPUSH
10979: CALL_OW 110
10983: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
10984: LD_VAR 0 3
10988: NOT
10989: PUSH
10990: LD_EXP 30
10994: NOT
10995: AND
10996: PUSH
10997: LD_VAR 0 6
11001: PUSH
11002: LD_INT 1
11004: EQUAL
11005: AND
11006: IFFALSE 11032
// begin SetTag ( i , 0 ) ;
11008: LD_VAR 0 1
11012: PPUSH
11013: LD_INT 0
11015: PPUSH
11016: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
11020: LD_VAR 0 1
11024: PPUSH
11025: LD_INT 28
11027: PPUSH
11028: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
11032: LD_VAR 0 3
11036: PUSH
11037: LD_EXP 30
11041: OR
11042: PUSH
11043: LD_VAR 0 6
11047: PUSH
11048: LD_INT 0
11050: EQUAL
11051: AND
11052: IFFALSE 11066
// SetTag ( i , 1 ) ;
11054: LD_VAR 0 1
11058: PPUSH
11059: LD_INT 1
11061: PPUSH
11062: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
11066: LD_VAR 0 1
11070: PPUSH
11071: CALL_OW 310
11075: PUSH
11076: LD_VAR 0 6
11080: PUSH
11081: LD_INT 1
11083: EQUAL
11084: AND
11085: IFFALSE 11096
// ComExit ( i ) ;
11087: LD_VAR 0 1
11091: PPUSH
11092: CALL 74758 0 1
// if GetLives ( i ) < 500 and tag = 1 then
11096: LD_VAR 0 1
11100: PPUSH
11101: CALL_OW 256
11105: PUSH
11106: LD_INT 500
11108: LESS
11109: PUSH
11110: LD_VAR 0 6
11114: PUSH
11115: LD_INT 1
11117: EQUAL
11118: AND
11119: IFFALSE 11133
// SetTag ( i , 2 ) ;
11121: LD_VAR 0 1
11125: PPUSH
11126: LD_INT 2
11128: PPUSH
11129: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
11133: LD_VAR 0 1
11137: PPUSH
11138: CALL_OW 256
11142: PUSH
11143: LD_INT 1000
11145: EQUAL
11146: PUSH
11147: LD_VAR 0 6
11151: PUSH
11152: LD_INT 2
11154: EQUAL
11155: AND
11156: IFFALSE 11170
// SetTag ( i , 1 ) ;
11158: LD_VAR 0 1
11162: PPUSH
11163: LD_INT 1
11165: PPUSH
11166: CALL_OW 109
// if tag = 2 then
11170: LD_VAR 0 6
11174: PUSH
11175: LD_INT 2
11177: EQUAL
11178: IFFALSE 11225
// begin if GetDistUnitXY ( i , 84 , 93 ) > 6 then
11180: LD_VAR 0 1
11184: PPUSH
11185: LD_INT 84
11187: PPUSH
11188: LD_INT 93
11190: PPUSH
11191: CALL_OW 297
11195: PUSH
11196: LD_INT 6
11198: GREATER
11199: IFFALSE 11225
// begin ComMoveXY ( i , 84 , 93 ) ;
11201: LD_VAR 0 1
11205: PPUSH
11206: LD_INT 84
11208: PPUSH
11209: LD_INT 93
11211: PPUSH
11212: CALL_OW 111
// AddComHold ( i ) ;
11216: LD_VAR 0 1
11220: PPUSH
11221: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
11225: LD_VAR 0 1
11229: PPUSH
11230: LD_INT 11
11232: PPUSH
11233: CALL_OW 308
11237: IFFALSE 11251
// ComMoveToArea ( i , ruBaseArea ) ;
11239: LD_VAR 0 1
11243: PPUSH
11244: LD_INT 12
11246: PPUSH
11247: CALL_OW 113
// if tag = 1 then
11251: LD_VAR 0 6
11255: PUSH
11256: LD_INT 1
11258: EQUAL
11259: IFFALSE 11444
// begin if b then
11261: LD_VAR 0 3
11265: IFFALSE 11293
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
11267: LD_VAR 0 1
11271: PPUSH
11272: LD_VAR 0 3
11276: PPUSH
11277: LD_VAR 0 1
11281: PPUSH
11282: CALL_OW 74
11286: PPUSH
11287: CALL_OW 130
11291: GO 11444
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
11293: LD_EXP 30
11297: PUSH
11298: LD_INT 11
11300: PPUSH
11301: LD_INT 81
11303: PUSH
11304: LD_INT 3
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PPUSH
11311: CALL_OW 70
11315: PUSH
11316: LD_INT 0
11318: EQUAL
11319: AND
11320: PUSH
11321: LD_INT 28
11323: PPUSH
11324: LD_EXP 30
11328: PUSH
11329: LD_INT 1
11331: ARRAY
11332: PUSH
11333: LD_INT 1
11335: ARRAY
11336: PPUSH
11337: LD_EXP 30
11341: PUSH
11342: LD_INT 1
11344: ARRAY
11345: PUSH
11346: LD_INT 2
11348: ARRAY
11349: PPUSH
11350: LD_EXP 30
11354: PUSH
11355: LD_INT 1
11357: ARRAY
11358: PUSH
11359: LD_INT 3
11361: ARRAY
11362: PPUSH
11363: LD_EXP 30
11367: PUSH
11368: LD_INT 1
11370: ARRAY
11371: PUSH
11372: LD_INT 4
11374: ARRAY
11375: PPUSH
11376: CALL 50778 0 5
11380: AND
11381: IFFALSE 11444
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
11383: LD_VAR 0 1
11387: PPUSH
11388: LD_EXP 30
11392: PUSH
11393: LD_INT 1
11395: ARRAY
11396: PUSH
11397: LD_INT 1
11399: ARRAY
11400: PPUSH
11401: LD_EXP 30
11405: PUSH
11406: LD_INT 1
11408: ARRAY
11409: PUSH
11410: LD_INT 2
11412: ARRAY
11413: PPUSH
11414: LD_EXP 30
11418: PUSH
11419: LD_INT 1
11421: ARRAY
11422: PUSH
11423: LD_INT 3
11425: ARRAY
11426: PPUSH
11427: LD_EXP 30
11431: PUSH
11432: LD_INT 1
11434: ARRAY
11435: PUSH
11436: LD_INT 4
11438: ARRAY
11439: PPUSH
11440: CALL_OW 145
// end ; end ;
11444: GO 10966
11446: POP
11447: POP
// end ; end ;
11448: PPOPN 8
11450: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
11451: LD_INT 0
11453: PPUSH
11454: PPUSH
11455: PPUSH
11456: PPUSH
11457: PPUSH
11458: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
11459: LD_ADDR_VAR 0 3
11463: PUSH
11464: DOUBLE
11465: LD_INT 1
11467: DEC
11468: ST_TO_ADDR
11469: LD_INT 3
11471: PUSH
11472: LD_INT 4
11474: PUSH
11475: LD_INT 5
11477: PUSH
11478: LD_INT 6
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: PUSH
11487: LD_OWVAR 67
11491: ARRAY
11492: PUSH
11493: LD_VAR 0 1
11497: PLUS
11498: PUSH
11499: FOR_TO
11500: IFFALSE 11817
// begin uc_side := 6 ;
11502: LD_ADDR_OWVAR 20
11506: PUSH
11507: LD_INT 6
11509: ST_TO_ADDR
// uc_nation := 3 ;
11510: LD_ADDR_OWVAR 21
11514: PUSH
11515: LD_INT 3
11517: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11518: LD_ADDR_VAR 0 6
11522: PUSH
11523: LD_INT 21
11525: PUSH
11526: LD_INT 22
11528: PUSH
11529: LD_INT 23
11531: PUSH
11532: LD_INT 24
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: PUSH
11541: LD_INT 1
11543: PPUSH
11544: LD_INT 4
11546: PPUSH
11547: CALL_OW 12
11551: ARRAY
11552: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11553: LD_ADDR_VAR 0 7
11557: PUSH
11558: LD_INT 42
11560: PUSH
11561: LD_INT 44
11563: PUSH
11564: LD_INT 43
11566: PUSH
11567: LD_INT 46
11569: PUSH
11570: LD_INT 45
11572: PUSH
11573: LD_INT 46
11575: PUSH
11576: LD_INT 45
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: PUSH
11588: LD_OWVAR 67
11592: PUSH
11593: LD_INT 0
11595: PPUSH
11596: LD_INT 3
11598: PPUSH
11599: CALL_OW 12
11603: PLUS
11604: ARRAY
11605: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11606: LD_VAR 0 6
11610: PUSH
11611: LD_INT 21
11613: PUSH
11614: LD_INT 22
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: IN
11621: PUSH
11622: LD_VAR 0 7
11626: PUSH
11627: LD_INT 46
11629: EQUAL
11630: AND
11631: IFFALSE 11660
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11633: LD_ADDR_VAR 0 7
11637: PUSH
11638: LD_INT 44
11640: PUSH
11641: LD_INT 45
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: LD_INT 1
11650: PPUSH
11651: LD_INT 2
11653: PPUSH
11654: CALL_OW 12
11658: ARRAY
11659: ST_TO_ADDR
// if tick < [ 17 17$00 , 15 15$00 , 13 13$00 , 11 11$00 ] [ Difficulty ] then
11660: LD_OWVAR 1
11664: PUSH
11665: LD_INT 35700
11667: PUSH
11668: LD_INT 31500
11670: PUSH
11671: LD_INT 27300
11673: PUSH
11674: LD_INT 23100
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: PUSH
11683: LD_OWVAR 67
11687: ARRAY
11688: LESS
11689: IFFALSE 11722
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
11691: LD_ADDR_VAR 0 7
11695: PUSH
11696: LD_INT 44
11698: PUSH
11699: LD_INT 43
11701: PUSH
11702: LD_INT 42
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: LIST
11709: PUSH
11710: LD_INT 1
11712: PPUSH
11713: LD_INT 3
11715: PPUSH
11716: CALL_OW 12
11720: ARRAY
11721: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
11722: LD_VAR 0 6
11726: PPUSH
11727: LD_INT 1
11729: PPUSH
11730: LD_INT 3
11732: PPUSH
11733: LD_VAR 0 7
11737: PPUSH
11738: LD_INT 90
11740: PPUSH
11741: CALL 42553 0 5
// un := CreateVehicle ;
11745: LD_ADDR_VAR 0 4
11749: PUSH
11750: CALL_OW 45
11754: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
11755: LD_VAR 0 4
11759: PPUSH
11760: LD_INT 140
11762: PPUSH
11763: LD_INT 146
11765: PPUSH
11766: LD_INT 0
11768: PPUSH
11769: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
11773: LD_VAR 0 4
11777: PPUSH
11778: LD_INT 131
11780: PPUSH
11781: LD_INT 128
11783: PPUSH
11784: CALL_OW 111
// wait ( 0 0$3 ) ;
11788: LD_INT 105
11790: PPUSH
11791: CALL_OW 67
// tmp := Join ( tmp , un ) ;
11795: LD_ADDR_VAR 0 5
11799: PUSH
11800: LD_VAR 0 5
11804: PPUSH
11805: LD_VAR 0 4
11809: PPUSH
11810: CALL 74370 0 2
11814: ST_TO_ADDR
// end ;
11815: GO 11499
11817: POP
11818: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
11819: LD_ADDR_EXP 31
11823: PUSH
11824: LD_EXP 31
11828: PPUSH
11829: LD_VAR 0 5
11833: PPUSH
11834: CALL 74407 0 2
11838: ST_TO_ADDR
// end ;
11839: LD_VAR 0 2
11843: RET
// every 0 0$3 trigger russianAttackers do
11844: LD_EXP 31
11848: IFFALSE 11931
11850: GO 11852
11852: DISABLE
// begin enable ;
11853: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
11854: LD_EXP 31
11858: PPUSH
11859: LD_INT 126
11861: PUSH
11862: LD_INT 108
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: LD_INT 107
11871: PUSH
11872: LD_INT 85
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: PUSH
11879: LD_INT 82
11881: PUSH
11882: LD_INT 62
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: PUSH
11889: LD_INT 73
11891: PUSH
11892: LD_INT 46
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 62
11901: PUSH
11902: LD_INT 31
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 52
11911: PUSH
11912: LD_INT 17
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: PPUSH
11927: CALL 76966 0 2
// end ; end_of_file
11931: END
// on SailEvent ( event ) do begin if event = 1 then
11932: LD_VAR 0 1
11936: PUSH
11937: LD_INT 1
11939: EQUAL
11940: IFFALSE 11955
// PrepareRussianAttack ( Difficulty + 3 ) ;
11942: LD_OWVAR 67
11946: PUSH
11947: LD_INT 3
11949: PLUS
11950: PPUSH
11951: CALL 11451 0 1
// end ;
11955: PPOPN 1
11957: END
// on UnitDestroyed ( un ) do var tmp , chassis , weapon , btype ;
11958: LD_INT 0
11960: PPUSH
11961: PPUSH
11962: PPUSH
11963: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
11964: LD_VAR 0 1
11968: PPUSH
11969: CALL 32896 0 1
// if un = JMM then
11973: LD_VAR 0 1
11977: PUSH
11978: LD_EXP 10
11982: EQUAL
11983: IFFALSE 11992
// YouLost ( JMM ) ;
11985: LD_STRING JMM
11987: PPUSH
11988: CALL_OW 104
// if un = Sikorski and sikorskiStatus = 0 then
11992: LD_VAR 0 1
11996: PUSH
11997: LD_EXP 23
12001: EQUAL
12002: PUSH
12003: LD_EXP 8
12007: PUSH
12008: LD_INT 0
12010: EQUAL
12011: AND
12012: IFFALSE 12018
// SikorskiKilledInAction ;
12014: CALL 16910 0 0
// if GetSide ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
12018: LD_VAR 0 1
12022: PPUSH
12023: CALL_OW 255
12027: PUSH
12028: LD_INT 1
12030: EQUAL
12031: PUSH
12032: LD_VAR 0 1
12036: PPUSH
12037: CALL_OW 266
12041: PUSH
12042: LD_INT 0
12044: PUSH
12045: LD_INT 1
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: IN
12052: AND
12053: IFFALSE 12062
// YouLost ( Destroyed ) ;
12055: LD_STRING Destroyed
12057: PPUSH
12058: CALL_OW 104
// if un in ruMobile then
12062: LD_VAR 0 1
12066: PUSH
12067: LD_EXP 29
12071: IN
12072: IFFALSE 12090
// ruMobile := ruMobile diff un ;
12074: LD_ADDR_EXP 29
12078: PUSH
12079: LD_EXP 29
12083: PUSH
12084: LD_VAR 0 1
12088: DIFF
12089: ST_TO_ADDR
// if GetSide ( un ) = 3 then
12090: LD_VAR 0 1
12094: PPUSH
12095: CALL_OW 255
12099: PUSH
12100: LD_INT 3
12102: EQUAL
12103: IFFALSE 12681
// begin if GetType ( un ) = unit_building then
12105: LD_VAR 0 1
12109: PPUSH
12110: CALL_OW 247
12114: PUSH
12115: LD_INT 3
12117: EQUAL
12118: IFFALSE 12254
// begin btype := GetBType ( un ) ;
12120: LD_ADDR_VAR 0 5
12124: PUSH
12125: LD_VAR 0 1
12129: PPUSH
12130: CALL_OW 266
12134: ST_TO_ADDR
// if btype = b_warehouse then
12135: LD_VAR 0 5
12139: PUSH
12140: LD_INT 1
12142: EQUAL
12143: IFFALSE 12153
// btype := b_depot ;
12145: LD_ADDR_VAR 0 5
12149: PUSH
12150: LD_INT 0
12152: ST_TO_ADDR
// if btype = b_barracks then
12153: LD_VAR 0 5
12157: PUSH
12158: LD_INT 5
12160: EQUAL
12161: IFFALSE 12171
// btype := b_armoury ;
12163: LD_ADDR_VAR 0 5
12167: PUSH
12168: LD_INT 4
12170: ST_TO_ADDR
// if btype = b_lab_full then
12171: LD_VAR 0 5
12175: PUSH
12176: LD_INT 8
12178: EQUAL
12179: IFFALSE 12189
// btype := b_lab ;
12181: LD_ADDR_VAR 0 5
12185: PUSH
12186: LD_INT 6
12188: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
12189: LD_ADDR_EXP 30
12193: PUSH
12194: LD_EXP 30
12198: PPUSH
12199: LD_EXP 30
12203: PUSH
12204: LD_INT 1
12206: PLUS
12207: PPUSH
12208: LD_VAR 0 5
12212: PUSH
12213: LD_VAR 0 1
12217: PPUSH
12218: CALL_OW 250
12222: PUSH
12223: LD_VAR 0 1
12227: PPUSH
12228: CALL_OW 251
12232: PUSH
12233: LD_VAR 0 1
12237: PPUSH
12238: CALL_OW 254
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: PPUSH
12249: CALL_OW 1
12253: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
12254: LD_VAR 0 1
12258: PPUSH
12259: CALL_OW 247
12263: PUSH
12264: LD_INT 2
12266: EQUAL
12267: IFFALSE 12542
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
12269: LD_VAR 0 1
12273: PPUSH
12274: CALL_OW 264
12278: PUSH
12279: LD_INT 52
12281: PUSH
12282: LD_INT 51
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: IN
12289: IFFALSE 12319
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
12291: LD_INT 29
12293: PPUSH
12294: LD_INT 22
12296: PPUSH
12297: LD_INT 1
12299: PPUSH
12300: LD_INT 3
12302: PPUSH
12303: LD_VAR 0 1
12307: PPUSH
12308: CALL_OW 264
12312: PPUSH
12313: CALL_OW 185
// end else
12317: GO 12542
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
12319: LD_ADDR_VAR 0 3
12323: PUSH
12324: LD_INT 21
12326: PUSH
12327: LD_INT 22
12329: PUSH
12330: LD_INT 23
12332: PUSH
12333: LD_INT 24
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: PUSH
12342: LD_INT 1
12344: PPUSH
12345: LD_INT 4
12347: PPUSH
12348: CALL_OW 12
12352: ARRAY
12353: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
12354: LD_ADDR_VAR 0 4
12358: PUSH
12359: LD_INT 42
12361: PUSH
12362: LD_INT 44
12364: PUSH
12365: LD_INT 43
12367: PUSH
12368: LD_INT 46
12370: PUSH
12371: LD_INT 45
12373: PUSH
12374: LD_INT 46
12376: PUSH
12377: LD_INT 45
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: PUSH
12389: LD_OWVAR 67
12393: PUSH
12394: LD_INT 0
12396: PPUSH
12397: LD_INT 3
12399: PPUSH
12400: CALL_OW 12
12404: PLUS
12405: ARRAY
12406: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
12407: LD_VAR 0 3
12411: PUSH
12412: LD_INT 21
12414: PUSH
12415: LD_INT 22
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: IN
12422: PUSH
12423: LD_VAR 0 4
12427: PUSH
12428: LD_INT 46
12430: EQUAL
12431: AND
12432: IFFALSE 12461
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
12434: LD_ADDR_VAR 0 4
12438: PUSH
12439: LD_INT 44
12441: PUSH
12442: LD_INT 45
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 1
12451: PPUSH
12452: LD_INT 2
12454: PPUSH
12455: CALL_OW 12
12459: ARRAY
12460: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
12461: LD_OWVAR 1
12465: PUSH
12466: LD_INT 31500
12468: PUSH
12469: LD_INT 27300
12471: PUSH
12472: LD_INT 23100
12474: PUSH
12475: LD_INT 21000
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: PUSH
12484: LD_OWVAR 67
12488: ARRAY
12489: LESS
12490: IFFALSE 12519
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
12492: LD_ADDR_VAR 0 4
12496: PUSH
12497: LD_INT 44
12499: PUSH
12500: LD_INT 43
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PUSH
12507: LD_INT 1
12509: PPUSH
12510: LD_INT 2
12512: PPUSH
12513: CALL_OW 12
12517: ARRAY
12518: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
12519: LD_INT 29
12521: PPUSH
12522: LD_VAR 0 3
12526: PPUSH
12527: LD_INT 1
12529: PPUSH
12530: LD_INT 1
12532: PPUSH
12533: LD_VAR 0 4
12537: PPUSH
12538: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
12542: LD_VAR 0 1
12546: PPUSH
12547: CALL_OW 257
12551: PUSH
12552: LD_INT 3
12554: EQUAL
12555: IFFALSE 12681
// begin if ruMechCounter = 0 or not IsOk ( ruFac ) then
12557: LD_EXP 28
12561: PUSH
12562: LD_INT 0
12564: EQUAL
12565: PUSH
12566: LD_INT 29
12568: PPUSH
12569: CALL_OW 302
12573: NOT
12574: OR
12575: IFFALSE 12579
// exit ;
12577: GO 12681
// ruMechCounter := Dec ( ruMechCounter ) ;
12579: LD_ADDR_EXP 28
12583: PUSH
12584: LD_EXP 28
12588: PPUSH
12589: CALL 75745 0 1
12593: ST_TO_ADDR
// uc_side := 3 ;
12594: LD_ADDR_OWVAR 20
12598: PUSH
12599: LD_INT 3
12601: ST_TO_ADDR
// uc_nation := 3 ;
12602: LD_ADDR_OWVAR 21
12606: PUSH
12607: LD_INT 3
12609: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
12610: LD_INT 0
12612: PPUSH
12613: LD_INT 5
12615: PUSH
12616: LD_INT 6
12618: PUSH
12619: LD_INT 7
12621: PUSH
12622: LD_INT 8
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: PUSH
12631: LD_OWVAR 67
12635: ARRAY
12636: PPUSH
12637: CALL_OW 383
// tmp := CreateHuman ;
12641: LD_ADDR_VAR 0 2
12645: PUSH
12646: CALL_OW 44
12650: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
12651: LD_VAR 0 2
12655: PPUSH
12656: LD_INT 145
12658: PPUSH
12659: LD_INT 133
12661: PPUSH
12662: LD_INT 0
12664: PPUSH
12665: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
12669: LD_VAR 0 2
12673: PPUSH
12674: LD_INT 29
12676: PPUSH
12677: CALL_OW 120
// end ; end ; end ;
12681: PPOPN 5
12683: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
12684: LD_VAR 0 1
12688: PPUSH
12689: CALL_OW 255
12693: PUSH
12694: LD_INT 4
12696: EQUAL
12697: IFFALSE 12714
// ComMoveXY ( driver , 40 , 47 ) ;
12699: LD_VAR 0 1
12703: PPUSH
12704: LD_INT 40
12706: PPUSH
12707: LD_INT 47
12709: PPUSH
12710: CALL_OW 111
// if GetSide ( driver ) = 3 then
12714: LD_VAR 0 1
12718: PPUSH
12719: CALL_OW 255
12723: PUSH
12724: LD_INT 3
12726: EQUAL
12727: IFFALSE 12951
// begin ComMoveXY ( driver , 90 , 97 ) ;
12729: LD_VAR 0 1
12733: PPUSH
12734: LD_INT 90
12736: PPUSH
12737: LD_INT 97
12739: PPUSH
12740: CALL_OW 111
// if IsOk ( ruFac ) then
12744: LD_INT 29
12746: PPUSH
12747: CALL_OW 302
12751: IFFALSE 12875
// begin repeat wait ( 0 0$1 ) ;
12753: LD_INT 35
12755: PPUSH
12756: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
12760: LD_INT 29
12762: PPUSH
12763: CALL_OW 313
12767: PUSH
12768: LD_INT 6
12770: LESS
12771: PUSH
12772: LD_VAR 0 1
12776: PPUSH
12777: CALL_OW 301
12781: OR
12782: IFFALSE 12753
// if IsDead ( driver ) then
12784: LD_VAR 0 1
12788: PPUSH
12789: CALL_OW 301
12793: IFFALSE 12797
// exit ;
12795: GO 12951
// repeat wait ( 0 0$10 ) ;
12797: LD_INT 350
12799: PPUSH
12800: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
12804: LD_VAR 0 1
12808: PPUSH
12809: CALL_OW 314
12813: NOT
12814: PUSH
12815: LD_INT 29
12817: PPUSH
12818: CALL_OW 313
12822: PUSH
12823: LD_INT 6
12825: LESS
12826: AND
12827: IFFALSE 12841
// ComEnterUnit ( driver , ruFac ) ;
12829: LD_VAR 0 1
12833: PPUSH
12834: LD_INT 29
12836: PPUSH
12837: CALL_OW 120
// until not IsOk ( ruFac ) or IsDead ( driver ) or IsInUnit ( driver ) ;
12841: LD_INT 29
12843: PPUSH
12844: CALL_OW 302
12848: NOT
12849: PUSH
12850: LD_VAR 0 1
12854: PPUSH
12855: CALL_OW 301
12859: OR
12860: PUSH
12861: LD_VAR 0 1
12865: PPUSH
12866: CALL_OW 310
12870: OR
12871: IFFALSE 12797
// end else
12873: GO 12951
// begin ComMoveXY ( driver , 142 , 148 ) ;
12875: LD_VAR 0 1
12879: PPUSH
12880: LD_INT 142
12882: PPUSH
12883: LD_INT 148
12885: PPUSH
12886: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12890: LD_INT 35
12892: PPUSH
12893: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
12897: LD_VAR 0 1
12901: PPUSH
12902: CALL_OW 301
12906: PUSH
12907: LD_VAR 0 1
12911: PPUSH
12912: LD_INT 142
12914: PPUSH
12915: LD_INT 148
12917: PPUSH
12918: CALL_OW 307
12922: OR
12923: IFFALSE 12890
// if IsAt ( driver , 142 , 148 ) then
12925: LD_VAR 0 1
12929: PPUSH
12930: LD_INT 142
12932: PPUSH
12933: LD_INT 148
12935: PPUSH
12936: CALL_OW 307
12940: IFFALSE 12951
// RemoveUnit ( driver ) ;
12942: LD_VAR 0 1
12946: PPUSH
12947: CALL_OW 64
// end ; end ; end ;
12951: PPOPN 4
12953: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
12954: LD_VAR 0 2
12958: PPUSH
12959: CALL_OW 257
12963: PUSH
12964: LD_INT 3
12966: EQUAL
12967: PUSH
12968: LD_VAR 0 1
12972: PPUSH
12973: CALL_OW 255
12977: PUSH
12978: LD_INT 3
12980: EQUAL
12981: AND
12982: PUSH
12983: LD_VAR 0 1
12987: PUSH
12988: LD_INT 29
12990: EQUAL
12991: AND
12992: IFFALSE 13006
// SetLives ( un , 1000 ) ;
12994: LD_VAR 0 2
12998: PPUSH
12999: LD_INT 1000
13001: PPUSH
13002: CALL_OW 234
// end ;
13006: PPOPN 2
13008: END
// on EvacuateBuilding ( b , un ) do var i , tmp ;
13009: LD_INT 0
13011: PPUSH
13012: PPUSH
// begin if GetSide ( b ) = 3 then
13013: LD_VAR 0 1
13017: PPUSH
13018: CALL_OW 255
13022: PUSH
13023: LD_INT 3
13025: EQUAL
13026: IFFALSE 13257
// begin if GetBType ( b ) in [ b_bunker , b_barracks ] then
13028: LD_VAR 0 1
13032: PPUSH
13033: CALL_OW 266
13037: PUSH
13038: LD_INT 32
13040: PUSH
13041: LD_INT 5
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: IN
13048: IFFALSE 13257
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
13050: LD_ADDR_VAR 0 4
13054: PUSH
13055: LD_INT 22
13057: PUSH
13058: LD_INT 3
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PUSH
13065: LD_INT 50
13067: PUSH
13068: EMPTY
13069: LIST
13070: PUSH
13071: LD_INT 30
13073: PUSH
13074: LD_INT 32
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PUSH
13081: LD_INT 58
13083: PUSH
13084: EMPTY
13085: LIST
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: PPUSH
13093: CALL_OW 69
13097: ST_TO_ADDR
// if tmp then
13098: LD_VAR 0 4
13102: IFFALSE 13124
// begin ComEnterUnit ( un , tmp [ 1 ] ) ;
13104: LD_VAR 0 2
13108: PPUSH
13109: LD_VAR 0 4
13113: PUSH
13114: LD_INT 1
13116: ARRAY
13117: PPUSH
13118: CALL_OW 120
// exit ;
13122: GO 13257
// end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
13124: LD_ADDR_VAR 0 4
13128: PUSH
13129: LD_INT 22
13131: PUSH
13132: LD_INT 3
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: LD_INT 50
13141: PUSH
13142: EMPTY
13143: LIST
13144: PUSH
13145: LD_INT 2
13147: PUSH
13148: LD_INT 30
13150: PUSH
13151: LD_INT 4
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 30
13160: PUSH
13161: LD_INT 5
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: LIST
13177: PPUSH
13178: CALL_OW 69
13182: ST_TO_ADDR
// if not tmp then
13183: LD_VAR 0 4
13187: NOT
13188: IFFALSE 13207
// begin ComMoveXY ( un , 92 , 99 ) ;
13190: LD_VAR 0 2
13194: PPUSH
13195: LD_INT 92
13197: PPUSH
13198: LD_INT 99
13200: PPUSH
13201: CALL_OW 111
// exit ;
13205: GO 13257
// end ; for i in tmp do
13207: LD_ADDR_VAR 0 3
13211: PUSH
13212: LD_VAR 0 4
13216: PUSH
13217: FOR_IN
13218: IFFALSE 13255
// if UnitsInside ( i ) < 6 then
13220: LD_VAR 0 3
13224: PPUSH
13225: CALL_OW 313
13229: PUSH
13230: LD_INT 6
13232: LESS
13233: IFFALSE 13253
// begin ComEnterUnit ( un , i ) ;
13235: LD_VAR 0 2
13239: PPUSH
13240: LD_VAR 0 3
13244: PPUSH
13245: CALL_OW 120
// exit ;
13249: POP
13250: POP
13251: GO 13257
// end ;
13253: GO 13217
13255: POP
13256: POP
// end ; end ; end ;
13257: PPOPN 4
13259: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
13260: LD_VAR 0 1
13264: PPUSH
13265: CALL_OW 255
13269: PUSH
13270: LD_INT 3
13272: PUSH
13273: LD_INT 6
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: IN
13280: PUSH
13281: LD_VAR 0 1
13285: PPUSH
13286: CALL_OW 263
13290: PUSH
13291: LD_INT 3
13293: EQUAL
13294: AND
13295: PUSH
13296: LD_EXP 6
13300: NOT
13301: AND
13302: IFFALSE 13321
// begin seenComputer := true ;
13304: LD_ADDR_EXP 6
13308: PUSH
13309: LD_INT 1
13311: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
13312: LD_VAR 0 1
13316: PPUSH
13317: CALL 16237 0 1
// end ; end ;
13321: PPOPN 1
13323: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
13324: LD_INT 0
13326: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
13327: LD_VAR 0 1
13331: PPUSH
13332: LD_VAR 0 2
13336: PPUSH
13337: CALL 33018 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
13341: LD_VAR 0 1
13345: PPUSH
13346: CALL_OW 255
13350: PUSH
13351: LD_INT 3
13353: EQUAL
13354: PUSH
13355: LD_VAR 0 1
13359: PPUSH
13360: CALL_OW 263
13364: PUSH
13365: LD_INT 1
13367: EQUAL
13368: AND
13369: PUSH
13370: LD_VAR 0 1
13374: PPUSH
13375: CALL_OW 264
13379: PUSH
13380: LD_INT 42
13382: PUSH
13383: LD_INT 43
13385: PUSH
13386: LD_INT 44
13388: PUSH
13389: LD_INT 46
13391: PUSH
13392: LD_INT 45
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: IN
13402: AND
13403: IFFALSE 13433
// begin SetTag ( vehicle , 300 ) ;
13405: LD_VAR 0 1
13409: PPUSH
13410: LD_INT 300
13412: PPUSH
13413: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
13417: LD_ADDR_EXP 29
13421: PUSH
13422: LD_EXP 29
13426: PUSH
13427: LD_VAR 0 1
13431: UNION
13432: ST_TO_ADDR
// end ; end ;
13433: PPOPN 3
13435: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
13436: LD_INT 0
13438: PPUSH
// begin if InArea ( x , y , ruCrates ) then
13439: LD_VAR 0 2
13443: PPUSH
13444: LD_VAR 0 3
13448: PPUSH
13449: LD_INT 13
13451: PPUSH
13452: CALL_OW 309
13456: IFFALSE 13587
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
13458: LD_ADDR_VAR 0 6
13462: PUSH
13463: LD_INT 22
13465: PUSH
13466: LD_INT 3
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PUSH
13473: LD_INT 50
13475: PUSH
13476: EMPTY
13477: LIST
13478: PUSH
13479: LD_INT 34
13481: PUSH
13482: LD_INT 51
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: LIST
13493: PPUSH
13494: CALL_OW 69
13498: ST_TO_ADDR
// if not cargo then
13499: LD_VAR 0 6
13503: NOT
13504: IFFALSE 13508
// exit ;
13506: GO 13587
// wait ( 0 0$5 ) ;
13508: LD_INT 175
13510: PPUSH
13511: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
13515: LD_VAR 0 6
13519: PUSH
13520: LD_INT 1
13522: ARRAY
13523: PPUSH
13524: LD_INT 28
13526: PPUSH
13527: CALL_OW 296
13531: PUSH
13532: LD_INT 6
13534: LESS
13535: PUSH
13536: LD_VAR 0 6
13540: PUSH
13541: LD_INT 1
13543: ARRAY
13544: PPUSH
13545: CALL_OW 261
13549: PUSH
13550: LD_INT 50
13552: LESS
13553: AND
13554: IFFALSE 13568
// ComMoveUnit ( cargo , ruDep ) ;
13556: LD_VAR 0 6
13560: PPUSH
13561: LD_INT 28
13563: PPUSH
13564: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
13568: LD_VAR 0 6
13572: PPUSH
13573: LD_VAR 0 2
13577: PPUSH
13578: LD_VAR 0 3
13582: PPUSH
13583: CALL_OW 177
// end ; end ;
13587: PPOPN 6
13589: END
// on BuildingComplete ( b ) do var i , tmp ;
13590: LD_INT 0
13592: PPUSH
13593: PPUSH
// begin if GetSide ( b ) = 3 then
13594: LD_VAR 0 1
13598: PPUSH
13599: CALL_OW 255
13603: PUSH
13604: LD_INT 3
13606: EQUAL
13607: IFFALSE 13822
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
13609: LD_ADDR_EXP 30
13613: PUSH
13614: LD_EXP 30
13618: PPUSH
13619: LD_INT 1
13621: PPUSH
13622: CALL_OW 3
13626: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
13627: LD_VAR 0 1
13631: PPUSH
13632: CALL_OW 266
13636: PUSH
13637: LD_INT 32
13639: PUSH
13640: LD_INT 33
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: IN
13647: IFFALSE 13822
// begin AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
13649: LD_VAR 0 1
13653: PPUSH
13654: LD_INT 46
13656: PUSH
13657: LD_INT 45
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 1
13666: PPUSH
13667: LD_INT 2
13669: PPUSH
13670: CALL_OW 12
13674: ARRAY
13675: PPUSH
13676: CALL_OW 208
// if GetBType ( b ) = b_bunker then
13680: LD_VAR 0 1
13684: PPUSH
13685: CALL_OW 266
13689: PUSH
13690: LD_INT 32
13692: EQUAL
13693: IFFALSE 13822
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_tag , 0 ] ] ) ;
13695: LD_ADDR_VAR 0 3
13699: PUSH
13700: LD_INT 22
13702: PUSH
13703: LD_INT 3
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: LD_INT 25
13712: PUSH
13713: LD_INT 1
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: LD_INT 120
13722: PUSH
13723: LD_INT 0
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: LIST
13734: PPUSH
13735: CALL_OW 69
13739: ST_TO_ADDR
// if tmp then
13740: LD_VAR 0 3
13744: IFFALSE 13822
// for i in tmp do
13746: LD_ADDR_VAR 0 2
13750: PUSH
13751: LD_VAR 0 3
13755: PUSH
13756: FOR_IN
13757: IFFALSE 13820
// if not IsInUnit ( i ) or GetBType ( IsInUnit ( i ) ) <> b_bunker then
13759: LD_VAR 0 2
13763: PPUSH
13764: CALL_OW 310
13768: NOT
13769: PUSH
13770: LD_VAR 0 2
13774: PPUSH
13775: CALL_OW 310
13779: PPUSH
13780: CALL_OW 266
13784: PUSH
13785: LD_INT 32
13787: NONEQUAL
13788: OR
13789: IFFALSE 13818
// begin ComExit ( i ) ;
13791: LD_VAR 0 2
13795: PPUSH
13796: CALL 74758 0 1
// AddComEnterUnit ( i , b ) ;
13800: LD_VAR 0 2
13804: PPUSH
13805: LD_VAR 0 1
13809: PPUSH
13810: CALL_OW 180
// exit ;
13814: POP
13815: POP
13816: GO 13822
// end ;
13818: GO 13756
13820: POP
13821: POP
// end ; end ; end ; end ; end_of_file
13822: PPOPN 3
13824: END
// export function Action ; var i , tmp , un , inUnit ; begin
13825: LD_INT 0
13827: PPUSH
13828: PPUSH
13829: PPUSH
13830: PPUSH
13831: PPUSH
// Video ( true ) ;
13832: LD_INT 1
13834: PPUSH
13835: CALL 74342 0 1
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
13839: LD_INT 50
13841: PPUSH
13842: LD_INT 12
13844: PPUSH
13845: LD_INT 1
13847: PPUSH
13848: LD_INT 56
13850: NEG
13851: PPUSH
13852: CALL 74256 0 4
// CenterOnXY ( 50 , 12 ) ;
13856: LD_INT 50
13858: PPUSH
13859: LD_INT 12
13861: PPUSH
13862: CALL_OW 84
// wait ( 0 0$3 ) ;
13866: LD_INT 105
13868: PPUSH
13869: CALL_OW 67
// PrepareStartRussianAttack ;
13873: CALL 9221 0 0
// CenterOnXY ( 66 , 47 ) ;
13877: LD_INT 66
13879: PPUSH
13880: LD_INT 47
13882: PPUSH
13883: CALL_OW 84
// wait ( 0 0$5 ) ;
13887: LD_INT 175
13889: PPUSH
13890: CALL_OW 67
// case gammaCommander of 1 :
13894: LD_EXP 9
13898: PUSH
13899: LD_INT 1
13901: DOUBLE
13902: EQUAL
13903: IFTRUE 13907
13905: GO 13922
13907: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
13908: LD_EXP 12
13912: PPUSH
13913: LD_STRING D1-Don-1
13915: PPUSH
13916: CALL_OW 88
13920: GO 13969
13922: LD_INT 2
13924: DOUBLE
13925: EQUAL
13926: IFTRUE 13930
13928: GO 13945
13930: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
13931: LD_EXP 11
13935: PPUSH
13936: LD_STRING D1-Brown-1
13938: PPUSH
13939: CALL_OW 88
13943: GO 13969
13945: LD_INT 3
13947: DOUBLE
13948: EQUAL
13949: IFTRUE 13953
13951: GO 13968
13953: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
13954: LD_EXP 20
13958: PPUSH
13959: LD_STRING D1-VanH-1
13961: PPUSH
13962: CALL_OW 88
13966: GO 13969
13968: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
13969: LD_ADDR_VAR 0 3
13973: PUSH
13974: LD_INT 22
13976: PUSH
13977: LD_INT 1
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: LD_INT 33
13986: PUSH
13987: LD_INT 2
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: PUSH
13994: LD_INT 61
13996: PUSH
13997: EMPTY
13998: LIST
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: LIST
14004: PPUSH
14005: CALL_OW 69
14009: ST_TO_ADDR
// if tmp then
14010: LD_VAR 0 3
14014: IFFALSE 14031
// ComAgressiveMove ( tmp , 74 , 44 ) ;
14016: LD_VAR 0 3
14020: PPUSH
14021: LD_INT 74
14023: PPUSH
14024: LD_INT 44
14026: PPUSH
14027: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
14031: LD_ADDR_VAR 0 3
14035: PUSH
14036: LD_INT 22
14038: PUSH
14039: LD_INT 1
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PUSH
14046: LD_INT 25
14048: PUSH
14049: LD_INT 1
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PPUSH
14060: CALL_OW 69
14064: PUSH
14065: LD_EXP 12
14069: PUSH
14070: LD_EXP 11
14074: PUSH
14075: LD_EXP 20
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: LIST
14084: DIFF
14085: ST_TO_ADDR
// if tmp then
14086: LD_VAR 0 3
14090: IFFALSE 14168
// for i in tmp do
14092: LD_ADDR_VAR 0 2
14096: PUSH
14097: LD_VAR 0 3
14101: PUSH
14102: FOR_IN
14103: IFFALSE 14166
// begin inUnit := IsInUnit ( i ) ;
14105: LD_ADDR_VAR 0 5
14109: PUSH
14110: LD_VAR 0 2
14114: PPUSH
14115: CALL_OW 310
14119: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
14120: LD_VAR 0 5
14124: PUSH
14125: LD_VAR 0 5
14129: PPUSH
14130: CALL_OW 266
14134: PUSH
14135: LD_INT 32
14137: PUSH
14138: LD_INT 31
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: IN
14145: AND
14146: IFFALSE 14164
// tmp := tmp diff i ;
14148: LD_ADDR_VAR 0 3
14152: PUSH
14153: LD_VAR 0 3
14157: PUSH
14158: LD_VAR 0 2
14162: DIFF
14163: ST_TO_ADDR
// end ;
14164: GO 14102
14166: POP
14167: POP
// if tmp then
14168: LD_VAR 0 3
14172: IFFALSE 14262
// begin ComExitAll ( tmp ) ;
14174: LD_VAR 0 3
14178: PPUSH
14179: CALL 74841 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
14183: LD_VAR 0 3
14187: PPUSH
14188: LD_INT 74
14190: PPUSH
14191: LD_INT 44
14193: PPUSH
14194: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
14198: LD_ADDR_VAR 0 3
14202: PUSH
14203: LD_INT 22
14205: PUSH
14206: LD_INT 1
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: LD_INT 25
14215: PUSH
14216: LD_INT 4
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PPUSH
14227: CALL_OW 69
14231: ST_TO_ADDR
// if tmp then
14232: LD_VAR 0 3
14236: IFFALSE 14262
// begin ComExitAll ( tmp ) ;
14238: LD_VAR 0 3
14242: PPUSH
14243: CALL 74841 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
14247: LD_VAR 0 3
14251: PPUSH
14252: LD_INT 66
14254: PPUSH
14255: LD_INT 28
14257: PPUSH
14258: CALL_OW 171
// end ; end ; game_speed := 4 ;
14262: LD_ADDR_OWVAR 65
14266: PUSH
14267: LD_INT 4
14269: ST_TO_ADDR
// wait ( 0 0$2 ) ;
14270: LD_INT 70
14272: PPUSH
14273: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
14277: LD_EXP 24
14281: PPUSH
14282: LD_STRING D1-Har-1
14284: PPUSH
14285: CALL_OW 94
// case gammaCommander of 1 :
14289: LD_EXP 9
14293: PUSH
14294: LD_INT 1
14296: DOUBLE
14297: EQUAL
14298: IFTRUE 14302
14300: GO 14317
14302: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
14303: LD_EXP 12
14307: PPUSH
14308: LD_STRING D1-Don-2
14310: PPUSH
14311: CALL_OW 88
14315: GO 14364
14317: LD_INT 2
14319: DOUBLE
14320: EQUAL
14321: IFTRUE 14325
14323: GO 14340
14325: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
14326: LD_EXP 11
14330: PPUSH
14331: LD_STRING D1-Brown-2
14333: PPUSH
14334: CALL_OW 88
14338: GO 14364
14340: LD_INT 3
14342: DOUBLE
14343: EQUAL
14344: IFTRUE 14348
14346: GO 14363
14348: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
14349: LD_EXP 20
14353: PPUSH
14354: LD_STRING D1-VanH-2
14356: PPUSH
14357: CALL_OW 88
14361: GO 14364
14363: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
14364: LD_EXP 24
14368: PPUSH
14369: LD_STRING D1-Har-2
14371: PPUSH
14372: CALL_OW 94
// Video ( false ) ;
14376: LD_INT 0
14378: PPUSH
14379: CALL 74342 0 1
// ChangeMissionObjectives ( M1 ) ;
14383: LD_STRING M1
14385: PPUSH
14386: CALL_OW 337
// SaveForQuickRestart ;
14390: CALL_OW 22
// wait ( 2 2$30 ) ;
14394: LD_INT 5250
14396: PPUSH
14397: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
14401: LD_INT 1
14403: PPUSH
14404: CALL 11451 0 1
// wait ( 4 4$30 ) ;
14408: LD_INT 9450
14410: PPUSH
14411: CALL_OW 67
// if Difficulty > 2 then
14415: LD_OWVAR 67
14419: PUSH
14420: LD_INT 2
14422: GREATER
14423: IFFALSE 14432
// PrepareRussianAttack ( 2 ) ;
14425: LD_INT 2
14427: PPUSH
14428: CALL 11451 0 1
// if Difficulty > 3 then
14432: LD_OWVAR 67
14436: PUSH
14437: LD_INT 3
14439: GREATER
14440: IFFALSE 14599
// begin for i := 1 to 4 do
14442: LD_ADDR_VAR 0 2
14446: PUSH
14447: DOUBLE
14448: LD_INT 1
14450: DEC
14451: ST_TO_ADDR
14452: LD_INT 4
14454: PUSH
14455: FOR_TO
14456: IFFALSE 14541
// begin uc_side := 6 ;
14458: LD_ADDR_OWVAR 20
14462: PUSH
14463: LD_INT 6
14465: ST_TO_ADDR
// uc_nation := 3 ;
14466: LD_ADDR_OWVAR 21
14470: PUSH
14471: LD_INT 3
14473: ST_TO_ADDR
// PrepareSoldier ( false , 6 ) ;
14474: LD_INT 0
14476: PPUSH
14477: LD_INT 6
14479: PPUSH
14480: CALL_OW 381
// un := CreateHuman ;
14484: LD_ADDR_VAR 0 4
14488: PUSH
14489: CALL_OW 44
14493: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
14494: LD_VAR 0 4
14498: PPUSH
14499: LD_INT 122
14501: PPUSH
14502: LD_INT 89
14504: PPUSH
14505: LD_INT 3
14507: PPUSH
14508: LD_INT 0
14510: PPUSH
14511: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
14515: LD_VAR 0 4
14519: PPUSH
14520: LD_INT 88
14522: PPUSH
14523: LD_INT 42
14525: PPUSH
14526: CALL_OW 114
// AddComHold ( un ) ;
14530: LD_VAR 0 4
14534: PPUSH
14535: CALL_OW 200
// end ;
14539: GO 14455
14541: POP
14542: POP
// PrepareScientist ( false , 6 ) ;
14543: LD_INT 0
14545: PPUSH
14546: LD_INT 6
14548: PPUSH
14549: CALL_OW 384
// un := CreateHuman ;
14553: LD_ADDR_VAR 0 4
14557: PUSH
14558: CALL_OW 44
14562: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
14563: LD_VAR 0 4
14567: PPUSH
14568: LD_INT 122
14570: PPUSH
14571: LD_INT 89
14573: PPUSH
14574: LD_INT 3
14576: PPUSH
14577: LD_INT 0
14579: PPUSH
14580: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
14584: LD_VAR 0 4
14588: PPUSH
14589: LD_INT 91
14591: PPUSH
14592: LD_INT 48
14594: PPUSH
14595: CALL_OW 111
// end ; end ;
14599: LD_VAR 0 1
14603: RET
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 3 ] ] ) = 0 and tick > 5 5$00 do var dialog , p ;
14604: LD_INT 22
14606: PUSH
14607: LD_INT 1
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: LD_INT 101
14616: PUSH
14617: LD_INT 3
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PPUSH
14628: CALL_OW 69
14632: PUSH
14633: LD_INT 0
14635: EQUAL
14636: PUSH
14637: LD_OWVAR 1
14641: PUSH
14642: LD_INT 10500
14644: GREATER
14645: AND
14646: IFFALSE 16234
14648: GO 14650
14650: DISABLE
14651: LD_INT 0
14653: PPUSH
14654: PPUSH
// begin PrepareSupportFromDelta ;
14655: CALL 4052 0 0
// deltaSupport := true ;
14659: LD_ADDR_EXP 5
14663: PUSH
14664: LD_INT 1
14666: ST_TO_ADDR
// dialog := false ;
14667: LD_ADDR_VAR 0 1
14671: PUSH
14672: LD_INT 0
14674: ST_TO_ADDR
// if IsOk ( Gladstone ) then
14675: LD_EXP 17
14679: PPUSH
14680: CALL_OW 302
14684: IFFALSE 14706
// dialog := Say ( Gladstone , D2-Glad-1 ) else
14686: LD_ADDR_VAR 0 1
14690: PUSH
14691: LD_EXP 17
14695: PPUSH
14696: LD_STRING D2-Glad-1
14698: PPUSH
14699: CALL_OW 88
14703: ST_TO_ADDR
14704: GO 14788
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
14706: LD_ADDR_VAR 0 1
14710: PUSH
14711: LD_INT 22
14713: PUSH
14714: LD_INT 1
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PUSH
14721: LD_INT 120
14723: PUSH
14724: LD_INT 107
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PUSH
14731: LD_INT 21
14733: PUSH
14734: LD_INT 1
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 23
14743: PUSH
14744: LD_INT 1
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: PPUSH
14757: CALL_OW 69
14761: PUSH
14762: LD_EXP 22
14766: PUSH
14767: LD_EXP 21
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: DIFF
14776: PPUSH
14777: LD_STRING D2-Sol1-1
14779: PPUSH
14780: LD_STRING D2-FSol1-1
14782: PPUSH
14783: CALL 18243 0 3
14787: ST_TO_ADDR
// if dialog then
14788: LD_VAR 0 1
14792: IFFALSE 14893
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
14794: LD_EXP 12
14798: PPUSH
14799: CALL_OW 302
14803: PUSH
14804: LD_EXP 9
14808: PUSH
14809: LD_INT 1
14811: EQUAL
14812: AND
14813: IFFALSE 14827
// Say ( Donaldson , D2-Don-1 ) ;
14815: LD_EXP 12
14819: PPUSH
14820: LD_STRING D2-Don-1
14822: PPUSH
14823: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
14827: LD_EXP 11
14831: PPUSH
14832: CALL_OW 302
14836: PUSH
14837: LD_EXP 9
14841: PUSH
14842: LD_INT 2
14844: EQUAL
14845: AND
14846: IFFALSE 14860
// Say ( Brown , D2-Brown-1 ) ;
14848: LD_EXP 11
14852: PPUSH
14853: LD_STRING D2-Brown-1
14855: PPUSH
14856: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
14860: LD_EXP 20
14864: PPUSH
14865: CALL_OW 302
14869: PUSH
14870: LD_EXP 9
14874: PUSH
14875: LD_INT 3
14877: EQUAL
14878: AND
14879: IFFALSE 14893
// Say ( Houten , D2-VanH-1 ) ;
14881: LD_EXP 20
14885: PPUSH
14886: LD_STRING D2-VanH-1
14888: PPUSH
14889: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
14893: LD_INT 3
14895: PPUSH
14896: CALL 11451 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
14900: LD_STRING 07_time
14902: PPUSH
14903: LD_INT 18900
14905: PPUSH
14906: CALL_OW 30
14910: PUSH
14911: LD_INT 3
14913: DIV
14914: PPUSH
14915: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
14919: LD_INT 34
14921: PPUSH
14922: LD_INT 1
14924: PPUSH
14925: CALL_OW 321
14929: PUSH
14930: LD_INT 2
14932: EQUAL
14933: IFFALSE 14942
// SetAchievement ( ACH_HEAVYGUN ) ;
14935: LD_STRING ACH_HEAVYGUN
14937: PPUSH
14938: CALL_OW 543
// PrepareMacmillanSquad ;
14942: CALL 4789 0 0
// CenterNowOnUnits ( JMM ) ;
14946: LD_EXP 10
14950: PPUSH
14951: CALL_OW 87
// wait ( 0 0$10 ) ;
14955: LD_INT 350
14957: PPUSH
14958: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
14962: LD_INT 1
14964: PPUSH
14965: CALL_OW 427
// p := 0 ;
14969: LD_ADDR_VAR 0 2
14973: PUSH
14974: LD_INT 0
14976: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14977: LD_INT 35
14979: PPUSH
14980: CALL_OW 67
// p := Inc ( p ) ;
14984: LD_ADDR_VAR 0 2
14988: PUSH
14989: LD_VAR 0 2
14993: PPUSH
14994: CALL 75723 0 1
14998: ST_TO_ADDR
// if p > 100 then
14999: LD_VAR 0 2
15003: PUSH
15004: LD_INT 100
15006: GREATER
15007: IFFALSE 15011
// exit ;
15009: GO 16234
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
15011: LD_EXP 10
15015: PPUSH
15016: LD_INT 15
15018: PPUSH
15019: CALL_OW 308
15023: PUSH
15024: LD_EXP 10
15028: PPUSH
15029: CALL_OW 310
15033: PPUSH
15034: LD_INT 15
15036: PPUSH
15037: CALL_OW 308
15041: OR
15042: PUSH
15043: LD_EXP 10
15047: PPUSH
15048: LD_EXP 22
15052: PPUSH
15053: CALL_OW 296
15057: PUSH
15058: LD_INT 10
15060: LESS
15061: OR
15062: PUSH
15063: LD_INT 22
15065: PUSH
15066: LD_INT 1
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: LD_INT 2
15075: PUSH
15076: LD_INT 120
15078: PUSH
15079: LD_INT 106
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: LD_INT 120
15088: PUSH
15089: LD_INT 107
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 91
15103: PUSH
15104: LD_EXP 10
15108: PUSH
15109: LD_INT 12
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: LIST
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: LIST
15121: PPUSH
15122: CALL_OW 69
15126: OR
15127: IFFALSE 14977
// DialogueOn ;
15129: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
15133: LD_EXP 10
15137: PPUSH
15138: LD_STRING D3-JMM-1
15140: PPUSH
15141: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
15145: LD_EXP 12
15149: PPUSH
15150: CALL_OW 302
15154: PUSH
15155: LD_EXP 9
15159: PUSH
15160: LD_INT 1
15162: EQUAL
15163: AND
15164: IFFALSE 15180
// Say ( Donaldson , D3-Don-1 ) else
15166: LD_EXP 12
15170: PPUSH
15171: LD_STRING D3-Don-1
15173: PPUSH
15174: CALL_OW 88
15178: GO 15276
// begin if gammaCommander = 1 then
15180: LD_EXP 9
15184: PUSH
15185: LD_INT 1
15187: EQUAL
15188: IFFALSE 15276
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
15190: LD_INT 22
15192: PUSH
15193: LD_INT 1
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PUSH
15200: LD_INT 21
15202: PUSH
15203: LD_INT 1
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: PUSH
15210: LD_INT 23
15212: PUSH
15213: LD_INT 1
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 120
15222: PUSH
15223: LD_INT 106
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 26
15232: PUSH
15233: LD_INT 1
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: PPUSH
15247: CALL_OW 69
15251: PPUSH
15252: LD_STRING D3-Sol1-1
15254: PPUSH
15255: LD_STRING 
15257: PPUSH
15258: CALL 18243 0 3
15262: IFFALSE 15276
// Say ( JMM , D3-JMM-2 ) ;
15264: LD_EXP 10
15268: PPUSH
15269: LD_STRING D3-JMM-2
15271: PPUSH
15272: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
15276: LD_EXP 11
15280: PPUSH
15281: CALL_OW 302
15285: PUSH
15286: LD_EXP 9
15290: PUSH
15291: LD_INT 2
15293: EQUAL
15294: AND
15295: IFFALSE 15311
// Say ( Brown , D3-Brown-1 ) else
15297: LD_EXP 11
15301: PPUSH
15302: LD_STRING D3-Brown-1
15304: PPUSH
15305: CALL_OW 88
15309: GO 15407
// begin if gammaCommander = 2 then
15311: LD_EXP 9
15315: PUSH
15316: LD_INT 2
15318: EQUAL
15319: IFFALSE 15407
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
15321: LD_INT 22
15323: PUSH
15324: LD_INT 1
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 21
15333: PUSH
15334: LD_INT 1
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 23
15343: PUSH
15344: LD_INT 1
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: LD_INT 120
15353: PUSH
15354: LD_INT 106
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 26
15363: PUSH
15364: LD_INT 1
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: PPUSH
15378: CALL_OW 69
15382: PPUSH
15383: LD_STRING D3-Sol1-1a
15385: PPUSH
15386: LD_STRING 
15388: PPUSH
15389: CALL 18243 0 3
15393: IFFALSE 15407
// Say ( JMM , D3-JMM-2 ) ;
15395: LD_EXP 10
15399: PPUSH
15400: LD_STRING D3-JMM-2
15402: PPUSH
15403: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
15407: LD_EXP 20
15411: PPUSH
15412: CALL_OW 302
15416: PUSH
15417: LD_EXP 9
15421: PUSH
15422: LD_INT 3
15424: EQUAL
15425: AND
15426: IFFALSE 15442
// Say ( Houten , D3-VanH-1 ) else
15428: LD_EXP 20
15432: PPUSH
15433: LD_STRING D3-VanH-1
15435: PPUSH
15436: CALL_OW 88
15440: GO 15538
// begin if gammaCommander = 3 then
15442: LD_EXP 9
15446: PUSH
15447: LD_INT 3
15449: EQUAL
15450: IFFALSE 15538
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
15452: LD_INT 22
15454: PUSH
15455: LD_INT 1
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: LD_INT 21
15464: PUSH
15465: LD_INT 1
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: LD_INT 23
15474: PUSH
15475: LD_INT 1
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 120
15484: PUSH
15485: LD_INT 106
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: LD_INT 26
15494: PUSH
15495: LD_INT 1
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: PPUSH
15509: CALL_OW 69
15513: PPUSH
15514: LD_STRING D3-Sol1-1b
15516: PPUSH
15517: LD_STRING 
15519: PPUSH
15520: CALL 18243 0 3
15524: IFFALSE 15538
// Say ( JMM , D3-JMM-2 ) ;
15526: LD_EXP 10
15530: PPUSH
15531: LD_STRING D3-JMM-2
15533: PPUSH
15534: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
15538: LD_EXP 22
15542: PPUSH
15543: CALL_OW 302
15547: IFFALSE 15575
// begin Say ( Joan , D3a-Joan-1 ) ;
15549: LD_EXP 22
15553: PPUSH
15554: LD_STRING D3a-Joan-1
15556: PPUSH
15557: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
15561: LD_EXP 10
15565: PPUSH
15566: LD_STRING D3a-JMM-1
15568: PPUSH
15569: CALL_OW 88
// end else
15573: GO 16009
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15575: LD_STRING 06_JoanStatus_1
15577: PPUSH
15578: LD_INT 0
15580: PPUSH
15581: CALL_OW 30
15585: PUSH
15586: LD_INT 1
15588: EQUAL
15589: IFFALSE 16009
// begin Say ( JMM , D3b-JMM-1 ) ;
15591: LD_EXP 10
15595: PPUSH
15596: LD_STRING D3b-JMM-1
15598: PPUSH
15599: CALL_OW 88
// dialog := false ;
15603: LD_ADDR_VAR 0 1
15607: PUSH
15608: LD_INT 0
15610: ST_TO_ADDR
// if gammaCommander = 1 then
15611: LD_EXP 9
15615: PUSH
15616: LD_INT 1
15618: EQUAL
15619: IFFALSE 15730
// if IsOK ( Donaldson ) then
15621: LD_EXP 12
15625: PPUSH
15626: CALL_OW 302
15630: IFFALSE 15652
// dialog := Say ( Donaldson , D3b-Don-1 ) else
15632: LD_ADDR_VAR 0 1
15636: PUSH
15637: LD_EXP 12
15641: PPUSH
15642: LD_STRING D3b-Don-1
15644: PPUSH
15645: CALL_OW 88
15649: ST_TO_ADDR
15650: GO 15730
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15652: LD_ADDR_VAR 0 1
15656: PUSH
15657: LD_INT 22
15659: PUSH
15660: LD_INT 1
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: LD_INT 21
15669: PUSH
15670: LD_INT 1
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 23
15679: PUSH
15680: LD_INT 1
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 120
15689: PUSH
15690: LD_INT 106
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: LD_INT 26
15699: PUSH
15700: LD_INT 1
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: PPUSH
15714: CALL_OW 69
15718: PPUSH
15719: LD_STRING D3b-Sol1-1
15721: PPUSH
15722: LD_STRING 
15724: PPUSH
15725: CALL 18243 0 3
15729: ST_TO_ADDR
// if gammaCommander = 2 then
15730: LD_EXP 9
15734: PUSH
15735: LD_INT 2
15737: EQUAL
15738: IFFALSE 15849
// if IsOk ( Brown ) then
15740: LD_EXP 11
15744: PPUSH
15745: CALL_OW 302
15749: IFFALSE 15771
// dialog := Say ( Brown , D3b-Brown-1 ) else
15751: LD_ADDR_VAR 0 1
15755: PUSH
15756: LD_EXP 11
15760: PPUSH
15761: LD_STRING D3b-Brown-1
15763: PPUSH
15764: CALL_OW 88
15768: ST_TO_ADDR
15769: GO 15849
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15771: LD_ADDR_VAR 0 1
15775: PUSH
15776: LD_INT 22
15778: PUSH
15779: LD_INT 1
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 21
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 23
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 120
15808: PUSH
15809: LD_INT 106
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 26
15818: PUSH
15819: LD_INT 1
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: PPUSH
15833: CALL_OW 69
15837: PPUSH
15838: LD_STRING D3b-Sol1-1
15840: PPUSH
15841: LD_STRING 
15843: PPUSH
15844: CALL 18243 0 3
15848: ST_TO_ADDR
// if gammaCommander = 3 then
15849: LD_EXP 9
15853: PUSH
15854: LD_INT 3
15856: EQUAL
15857: IFFALSE 15968
// if IsOk ( Houten ) then
15859: LD_EXP 20
15863: PPUSH
15864: CALL_OW 302
15868: IFFALSE 15890
// dialog := Say ( Houten , D3b-VanH-1 ) else
15870: LD_ADDR_VAR 0 1
15874: PUSH
15875: LD_EXP 20
15879: PPUSH
15880: LD_STRING D3b-VanH-1
15882: PPUSH
15883: CALL_OW 88
15887: ST_TO_ADDR
15888: GO 15968
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15890: LD_ADDR_VAR 0 1
15894: PUSH
15895: LD_INT 22
15897: PUSH
15898: LD_INT 1
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PUSH
15905: LD_INT 21
15907: PUSH
15908: LD_INT 1
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: LD_INT 23
15917: PUSH
15918: LD_INT 1
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 120
15927: PUSH
15928: LD_INT 106
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: LD_INT 26
15937: PUSH
15938: LD_INT 1
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: PPUSH
15952: CALL_OW 69
15956: PPUSH
15957: LD_STRING D3b-Sol1-1
15959: PPUSH
15960: LD_STRING 
15962: PPUSH
15963: CALL 18243 0 3
15967: ST_TO_ADDR
// if dialog then
15968: LD_VAR 0 1
15972: IFFALSE 16009
// begin Say ( JMM , D3b-JMM-2 ) ;
15974: LD_EXP 10
15978: PPUSH
15979: LD_STRING D3b-JMM-2
15981: PPUSH
15982: CALL_OW 88
// if IsOK ( Lisa ) then
15986: LD_EXP 15
15990: PPUSH
15991: CALL_OW 302
15995: IFFALSE 16009
// Say ( Lisa , D3b-Lisa-2 ) ;
15997: LD_EXP 15
16001: PPUSH
16002: LD_STRING D3b-Lisa-2
16004: PPUSH
16005: CALL_OW 88
// end ; end ; end ; if not seenComputer then
16009: LD_EXP 6
16013: NOT
16014: IFFALSE 16022
// begin DialogueOff ;
16016: CALL_OW 7
// exit ;
16020: GO 16234
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
16022: LD_INT 22
16024: PUSH
16025: LD_INT 1
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 21
16034: PUSH
16035: LD_INT 1
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: LD_INT 23
16044: PUSH
16045: LD_INT 1
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: LD_INT 2
16054: PUSH
16055: LD_INT 120
16057: PUSH
16058: LD_INT 106
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: LD_INT 120
16067: PUSH
16068: LD_INT 107
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 26
16082: PUSH
16083: LD_INT 1
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: PPUSH
16097: CALL_OW 69
16101: PPUSH
16102: LD_STRING DCa-Sol1-1
16104: PPUSH
16105: LD_STRING 
16107: PPUSH
16108: CALL 18243 0 3
16112: IFFALSE 16126
// Say ( JMM , DCb-JMM-1 ) ;
16114: LD_EXP 10
16118: PPUSH
16119: LD_STRING DCb-JMM-1
16121: PPUSH
16122: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
16126: LD_INT 22
16128: PUSH
16129: LD_INT 1
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PUSH
16136: LD_INT 21
16138: PUSH
16139: LD_INT 1
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: PUSH
16146: LD_INT 23
16148: PUSH
16149: LD_INT 1
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 2
16158: PUSH
16159: LD_INT 120
16161: PUSH
16162: LD_INT 106
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 120
16171: PUSH
16172: LD_INT 107
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 26
16186: PUSH
16187: LD_INT 1
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: PPUSH
16201: CALL_OW 69
16205: PPUSH
16206: LD_STRING DCb-Sol1-1
16208: PPUSH
16209: LD_STRING 
16211: PPUSH
16212: CALL 18243 0 3
16216: IFFALSE 16230
// Say ( JMM , DCb-JMM-2 ) ;
16218: LD_EXP 10
16222: PPUSH
16223: LD_STRING DCb-JMM-2
16225: PPUSH
16226: CALL_OW 88
// DialogueOff ;
16230: CALL_OW 7
// end ;
16234: PPOPN 2
16236: END
// export function DialogSeenComputer ( un ) ; begin
16237: LD_INT 0
16239: PPUSH
// if jmmArrival then
16240: LD_EXP 7
16244: IFFALSE 16248
// exit ;
16246: GO 16314
// CenterOnUnits ( un ) ;
16248: LD_VAR 0 1
16252: PPUSH
16253: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
16257: LD_INT 22
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 2
16269: PUSH
16270: LD_INT 120
16272: PUSH
16273: LD_INT 106
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 120
16282: PUSH
16283: LD_INT 107
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: LIST
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PPUSH
16299: CALL_OW 69
16303: PPUSH
16304: LD_STRING DC-Sol1-1
16306: PPUSH
16307: LD_STRING DC-FSol1-1
16309: PPUSH
16310: CALL 18243 0 3
// end ;
16314: LD_VAR 0 2
16318: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
16319: LD_EXP 7
16323: PUSH
16324: LD_OWVAR 1
16328: PUSH
16329: LD_INT 48300
16331: GREATEREQUAL
16332: AND
16333: PUSH
16334: LD_EXP 10
16338: PPUSH
16339: CALL_OW 302
16343: AND
16344: IFFALSE 16694
16346: GO 16348
16348: DISABLE
// begin wait ( 2 2$00 ) ;
16349: LD_INT 4200
16351: PPUSH
16352: CALL_OW 67
// DialogueOn ;
16356: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
16360: LD_EXP 25
16364: PPUSH
16365: LD_STRING D4-Pow-1
16367: PPUSH
16368: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
16372: LD_EXP 10
16376: PPUSH
16377: LD_STRING D4-JMM-1
16379: PPUSH
16380: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
16384: LD_EXP 25
16388: PPUSH
16389: LD_STRING D4-Pow-2
16391: PPUSH
16392: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
16396: LD_EXP 10
16400: PPUSH
16401: LD_STRING D4-JMM-2
16403: PPUSH
16404: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
16408: LD_EXP 25
16412: PPUSH
16413: LD_STRING D4-Pow-3
16415: PPUSH
16416: CALL_OW 94
// DialogueOff ;
16420: CALL_OW 7
// wait ( 1 1$00 ) ;
16424: LD_INT 2100
16426: PPUSH
16427: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16431: LD_INT 1
16433: PPUSH
16434: CALL_OW 427
// wait ( 7 7$30 ) ;
16438: LD_INT 15750
16440: PPUSH
16441: CALL_OW 67
// DialogueOn ;
16445: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
16449: LD_EXP 25
16453: PPUSH
16454: LD_STRING D4a-Pow-1
16456: PPUSH
16457: CALL_OW 94
// DialogueOff ;
16461: CALL_OW 7
// SikorskiCounter ;
16465: CALL 18027 0 0
// PrepareSikorsky ;
16469: CALL 6211 0 0
// CenterNowOnUnits ( Sikorski ) ;
16473: LD_EXP 23
16477: PPUSH
16478: CALL_OW 87
// DialogueOn ;
16482: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
16486: LD_EXP 23
16490: PPUSH
16491: LD_STRING D5-Sik-1
16493: PPUSH
16494: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
16498: LD_EXP 10
16502: PPUSH
16503: LD_STRING D5-JMM-1a
16505: PPUSH
16506: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
16510: LD_EXP 23
16514: PPUSH
16515: LD_STRING D5-Sik-2
16517: PPUSH
16518: CALL_OW 88
// case Query ( QSikorski ) of 1 :
16522: LD_STRING QSikorski
16524: PPUSH
16525: CALL_OW 97
16529: PUSH
16530: LD_INT 1
16532: DOUBLE
16533: EQUAL
16534: IFTRUE 16538
16536: GO 16561
16538: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
16539: LD_EXP 23
16543: PPUSH
16544: LD_STRING D5a-Sik-1
16546: PPUSH
16547: CALL_OW 88
// sikorskiWait := 1 1$00 ;
16551: LD_ADDR_EXP 4
16555: PUSH
16556: LD_INT 2100
16558: ST_TO_ADDR
// end ; 2 :
16559: GO 16648
16561: LD_INT 2
16563: DOUBLE
16564: EQUAL
16565: IFTRUE 16569
16567: GO 16592
16569: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
16570: LD_EXP 23
16574: PPUSH
16575: LD_STRING D5b-Sik-1
16577: PPUSH
16578: CALL_OW 88
// sikorskiWait := 5 5$00 ;
16582: LD_ADDR_EXP 4
16586: PUSH
16587: LD_INT 10500
16589: ST_TO_ADDR
// end ; 3 :
16590: GO 16648
16592: LD_INT 3
16594: DOUBLE
16595: EQUAL
16596: IFTRUE 16600
16598: GO 16647
16600: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
16601: LD_EXP 23
16605: PPUSH
16606: LD_STRING D5c-Sik-1
16608: PPUSH
16609: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
16613: LD_EXP 10
16617: PPUSH
16618: LD_STRING D5c-JMM-1
16620: PPUSH
16621: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
16625: LD_EXP 23
16629: PPUSH
16630: LD_STRING D5c-Sik-2
16632: PPUSH
16633: CALL_OW 88
// sikorskiWait := 5 5$00 ;
16637: LD_ADDR_EXP 4
16641: PUSH
16642: LD_INT 10500
16644: ST_TO_ADDR
// end ; end ;
16645: GO 16648
16647: POP
// DialogueOff ;
16648: CALL_OW 7
// SikorskiWaitCounter ;
16652: CALL 18090 0 0
// DialogueOn ;
16656: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
16660: LD_EXP 23
16664: PPUSH
16665: LD_STRING D6-Sik-1
16667: PPUSH
16668: CALL_OW 88
// DialogueOff ;
16672: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
16676: LD_STRING M2
16678: PPUSH
16679: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
16683: LD_INT 1
16685: PPUSH
16686: CALL_OW 427
// SikorskiAttack ;
16690: CALL 7539 0 0
// end ;
16694: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
16695: LD_INT 11
16697: PPUSH
16698: LD_INT 22
16700: PUSH
16701: LD_INT 4
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PPUSH
16708: CALL_OW 70
16712: PUSH
16713: LD_INT 2
16715: GREATER
16716: IFFALSE 16909
16718: GO 16720
16720: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
16721: LD_EXP 23
16725: PPUSH
16726: LD_STRING D7-Sik-1
16728: PPUSH
16729: CALL_OW 88
// wait ( 0 0$10 ) ;
16733: LD_INT 350
16735: PPUSH
16736: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
16740: LD_EXP 10
16744: PPUSH
16745: LD_INT 11
16747: PPUSH
16748: CALL_OW 308
16752: PUSH
16753: LD_EXP 10
16757: PPUSH
16758: CALL_OW 310
16762: PPUSH
16763: LD_INT 11
16765: PPUSH
16766: CALL_OW 308
16770: OR
16771: IFFALSE 16795
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16773: LD_EXP 23
16777: PPUSH
16778: LD_STRING D7a-Sik-1
16780: PPUSH
16781: CALL_OW 88
// sikorskiStatus := 1 ;
16785: LD_ADDR_EXP 8
16789: PUSH
16790: LD_INT 1
16792: ST_TO_ADDR
// end else
16793: GO 16815
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16795: LD_EXP 23
16799: PPUSH
16800: LD_STRING D7b-Sik-1
16802: PPUSH
16803: CALL_OW 88
// sikorskiStatus := 0 ;
16807: LD_ADDR_EXP 8
16811: PUSH
16812: LD_INT 0
16814: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
16815: LD_INT 1575
16817: PPUSH
16818: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
16822: LD_EXP 10
16826: PPUSH
16827: LD_INT 11
16829: PPUSH
16830: CALL_OW 308
16834: PUSH
16835: LD_EXP 10
16839: PPUSH
16840: CALL_OW 310
16844: PPUSH
16845: LD_INT 11
16847: PPUSH
16848: CALL_OW 308
16852: OR
16853: PUSH
16854: LD_EXP 10
16858: PPUSH
16859: CALL_OW 302
16863: NOT
16864: OR
16865: IFFALSE 16889
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16867: LD_EXP 23
16871: PPUSH
16872: LD_STRING D7a-Sik-1
16874: PPUSH
16875: CALL_OW 88
// sikorskiStatus := 1 ;
16879: LD_ADDR_EXP 8
16883: PUSH
16884: LD_INT 1
16886: ST_TO_ADDR
// end else
16887: GO 16909
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16889: LD_EXP 23
16893: PPUSH
16894: LD_STRING D7b-Sik-1
16896: PPUSH
16897: CALL_OW 88
// sikorskiStatus := 0 ;
16901: LD_ADDR_EXP 8
16905: PUSH
16906: LD_INT 0
16908: ST_TO_ADDR
// end ; end ;
16909: END
// export function SikorskiKilledInAction ; begin
16910: LD_INT 0
16912: PPUSH
// wait ( 0 0$2 ) ;
16913: LD_INT 70
16915: PPUSH
16916: CALL_OW 67
// DialogueOn ;
16920: CALL_OW 6
// dwait ( 0 0$1 ) ;
16924: LD_INT 35
16926: PPUSH
16927: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
16931: LD_EXP 25
16935: PPUSH
16936: LD_STRING D8b-Pow-1
16938: PPUSH
16939: CALL_OW 94
// YouLost ( Dismissed ) ;
16943: LD_STRING Dismissed
16945: PPUSH
16946: CALL_OW 104
// DialogueOff ;
16950: CALL_OW 7
// end ;
16954: LD_VAR 0 1
16958: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
16959: LD_EXP 7
16963: PUSH
16964: LD_INT 28
16966: PPUSH
16967: CALL_OW 301
16971: AND
16972: PUSH
16973: LD_EXP 27
16977: PPUSH
16978: CALL_OW 301
16982: AND
16983: PUSH
16984: LD_INT 22
16986: PUSH
16987: LD_INT 3
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 30
16996: PUSH
16997: LD_INT 5
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PPUSH
17008: CALL_OW 69
17012: PUSH
17013: LD_INT 0
17015: EQUAL
17016: AND
17017: IFFALSE 18024
17019: GO 17021
17021: DISABLE
17022: LD_INT 0
17024: PPUSH
17025: PPUSH
17026: PPUSH
// begin Video ( true ) ;
17027: LD_INT 1
17029: PPUSH
17030: CALL 74342 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
17034: LD_INT 104
17036: PPUSH
17037: LD_INT 108
17039: PPUSH
17040: LD_INT 1
17042: PPUSH
17043: LD_INT 36
17045: NEG
17046: PPUSH
17047: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
17051: LD_INT 104
17053: PPUSH
17054: LD_INT 108
17056: PPUSH
17057: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
17061: LD_ADDR_VAR 0 2
17065: PUSH
17066: LD_INT 22
17068: PUSH
17069: LD_INT 1
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 21
17078: PUSH
17079: LD_INT 1
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: LD_INT 3
17088: PUSH
17089: LD_INT 24
17091: PUSH
17092: LD_INT 249
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: LIST
17107: PPUSH
17108: CALL_OW 69
17112: ST_TO_ADDR
// if tmp then
17113: LD_VAR 0 2
17117: IFFALSE 17148
// for i in tmp do
17119: LD_ADDR_VAR 0 1
17123: PUSH
17124: LD_VAR 0 2
17128: PUSH
17129: FOR_IN
17130: IFFALSE 17146
// SetLives ( i , 249 ) ;
17132: LD_VAR 0 1
17136: PPUSH
17137: LD_INT 249
17139: PPUSH
17140: CALL_OW 234
17144: GO 17129
17146: POP
17147: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
17148: LD_ADDR_VAR 0 1
17152: PUSH
17153: LD_INT 22
17155: PUSH
17156: LD_INT 3
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: PUSH
17163: LD_INT 21
17165: PUSH
17166: LD_INT 1
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PPUSH
17177: CALL_OW 69
17181: PUSH
17182: FOR_IN
17183: IFFALSE 17226
// begin ComExit ( i ) ;
17185: LD_VAR 0 1
17189: PPUSH
17190: CALL 74758 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
17194: LD_VAR 0 1
17198: PPUSH
17199: LD_INT 131
17201: PPUSH
17202: LD_INT 127
17204: PPUSH
17205: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
17209: LD_VAR 0 1
17213: PPUSH
17214: LD_INT 141
17216: PPUSH
17217: LD_INT 147
17219: PPUSH
17220: CALL_OW 171
// end ;
17224: GO 17182
17226: POP
17227: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
17228: LD_INT 81
17230: PUSH
17231: LD_INT 3
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: PUSH
17238: LD_INT 3
17240: PUSH
17241: LD_INT 21
17243: PUSH
17244: LD_INT 3
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PPUSH
17259: CALL_OW 69
17263: PPUSH
17264: LD_INT 131
17266: PPUSH
17267: LD_INT 127
17269: PPUSH
17270: CALL_OW 174
// wait ( 0 0$08 ) ;
17274: LD_INT 280
17276: PPUSH
17277: CALL_OW 67
// DialogueOn ;
17281: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
17285: LD_EXP 8
17289: PUSH
17290: LD_INT 1
17292: EQUAL
17293: PUSH
17294: LD_EXP 23
17298: PPUSH
17299: CALL_OW 302
17303: AND
17304: IFFALSE 17318
// Say ( Sikorski , D9-Sik-1 ) ;
17306: LD_EXP 23
17310: PPUSH
17311: LD_STRING D9-Sik-1
17313: PPUSH
17314: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
17318: LD_INT 22
17320: PUSH
17321: LD_INT 4
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PPUSH
17328: CALL_OW 69
17332: PUSH
17333: LD_INT 0
17335: EQUAL
17336: PUSH
17337: LD_EXP 3
17341: AND
17342: IFFALSE 17351
// SetAchievement ( ACH_BLITZKRIEG ) ;
17344: LD_STRING ACH_BLITZKRIEG
17346: PPUSH
17347: CALL_OW 543
// if tick <= 25 25$08 then
17351: LD_OWVAR 1
17355: PUSH
17356: LD_INT 52780
17358: LESSEQUAL
17359: IFFALSE 17375
// begin wait ( 3 ) ;
17361: LD_INT 3
17363: PPUSH
17364: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
17368: LD_STRING ACH_ASPEED_8
17370: PPUSH
17371: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
17375: LD_STRING med1
17377: PPUSH
17378: LD_INT 1
17380: PPUSH
17381: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
17385: LD_STRING med2
17387: PPUSH
17388: LD_INT 1
17390: PPUSH
17391: CALL_OW 101
// if sikorskiStatus = 1 then
17395: LD_EXP 8
17399: PUSH
17400: LD_INT 1
17402: EQUAL
17403: IFFALSE 17417
// AddMedal ( perfect , 1 ) else
17405: LD_STRING perfect
17407: PPUSH
17408: LD_INT 1
17410: PPUSH
17411: CALL_OW 101
17415: GO 17428
// AddMedal ( perfect , - 1 ) ;
17417: LD_STRING perfect
17419: PPUSH
17420: LD_INT 1
17422: NEG
17423: PPUSH
17424: CALL_OW 101
// if Difficulty >= 3 then
17428: LD_OWVAR 67
17432: PUSH
17433: LD_INT 3
17435: GREATEREQUAL
17436: IFFALSE 17448
// SetAchievementEX ( ACH_AMER , 8 ) ;
17438: LD_STRING ACH_AMER
17440: PPUSH
17441: LD_INT 8
17443: PPUSH
17444: CALL_OW 564
// GiveMedals ( Main ) ;
17448: LD_STRING Main
17450: PPUSH
17451: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
17455: LD_INT 22
17457: PUSH
17458: LD_INT 1
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 23
17467: PUSH
17468: LD_INT 1
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 21
17477: PUSH
17478: LD_INT 1
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: LIST
17489: PPUSH
17490: CALL_OW 69
17494: PPUSH
17495: CALL_OW 43
// prefix := 08_ ;
17499: LD_ADDR_VAR 0 3
17503: PUSH
17504: LD_STRING 08_
17506: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
17507: LD_EXP 10
17511: PPUSH
17512: LD_VAR 0 3
17516: PUSH
17517: LD_STRING JMM
17519: STR
17520: PPUSH
17521: CALL_OW 38
// if IsLive ( Brown ) then
17525: LD_EXP 11
17529: PPUSH
17530: CALL_OW 300
17534: IFFALSE 17554
// SaveCharacters ( Brown , prefix & Brown ) ;
17536: LD_EXP 11
17540: PPUSH
17541: LD_VAR 0 3
17545: PUSH
17546: LD_STRING Brown
17548: STR
17549: PPUSH
17550: CALL_OW 38
// if IsLive ( Donaldson ) then
17554: LD_EXP 12
17558: PPUSH
17559: CALL_OW 300
17563: IFFALSE 17583
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
17565: LD_EXP 12
17569: PPUSH
17570: LD_VAR 0 3
17574: PUSH
17575: LD_STRING Donaldson
17577: STR
17578: PPUSH
17579: CALL_OW 38
// if IsLive ( Bobby ) then
17583: LD_EXP 13
17587: PPUSH
17588: CALL_OW 300
17592: IFFALSE 17612
// SaveCharacters ( Bobby , prefix & Bobby ) ;
17594: LD_EXP 13
17598: PPUSH
17599: LD_VAR 0 3
17603: PUSH
17604: LD_STRING Bobby
17606: STR
17607: PPUSH
17608: CALL_OW 38
// if IsLive ( Cyrus ) then
17612: LD_EXP 14
17616: PPUSH
17617: CALL_OW 300
17621: IFFALSE 17641
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
17623: LD_EXP 14
17627: PPUSH
17628: LD_VAR 0 3
17632: PUSH
17633: LD_STRING Cyrus
17635: STR
17636: PPUSH
17637: CALL_OW 38
// if IsLive ( Lisa ) then
17641: LD_EXP 15
17645: PPUSH
17646: CALL_OW 300
17650: IFFALSE 17670
// SaveCharacters ( Lisa , prefix & Lisa ) ;
17652: LD_EXP 15
17656: PPUSH
17657: LD_VAR 0 3
17661: PUSH
17662: LD_STRING Lisa
17664: STR
17665: PPUSH
17666: CALL_OW 38
// if IsLive ( Frank ) then
17670: LD_EXP 16
17674: PPUSH
17675: CALL_OW 300
17679: IFFALSE 17699
// SaveCharacters ( Frank , prefix & Frank ) ;
17681: LD_EXP 16
17685: PPUSH
17686: LD_VAR 0 3
17690: PUSH
17691: LD_STRING Frank
17693: STR
17694: PPUSH
17695: CALL_OW 38
// if IsLive ( Gladstone ) then
17699: LD_EXP 17
17703: PPUSH
17704: CALL_OW 300
17708: IFFALSE 17728
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
17710: LD_EXP 17
17714: PPUSH
17715: LD_VAR 0 3
17719: PUSH
17720: LD_STRING Gladstone
17722: STR
17723: PPUSH
17724: CALL_OW 38
// if IsLive ( Kikuchi ) then
17728: LD_EXP 18
17732: PPUSH
17733: CALL_OW 300
17737: IFFALSE 17757
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
17739: LD_EXP 18
17743: PPUSH
17744: LD_VAR 0 3
17748: PUSH
17749: LD_STRING Kikuchi
17751: STR
17752: PPUSH
17753: CALL_OW 38
// if IsLive ( Denis ) then
17757: LD_EXP 21
17761: PPUSH
17762: CALL_OW 300
17766: IFFALSE 17786
// SaveCharacters ( Denis , prefix & Denis ) ;
17768: LD_EXP 21
17772: PPUSH
17773: LD_VAR 0 3
17777: PUSH
17778: LD_STRING Denis
17780: STR
17781: PPUSH
17782: CALL_OW 38
// if IsLive ( Joan ) then
17786: LD_EXP 22
17790: PPUSH
17791: CALL_OW 300
17795: IFFALSE 17815
// SaveCharacters ( Joan , prefix & Joan ) ;
17797: LD_EXP 22
17801: PPUSH
17802: LD_VAR 0 3
17806: PUSH
17807: LD_STRING Joan
17809: STR
17810: PPUSH
17811: CALL_OW 38
// if IsLive ( Khatam ) then
17815: LD_EXP 19
17819: PPUSH
17820: CALL_OW 300
17824: IFFALSE 17844
// SaveCharacters ( Khatam , prefix & Khatam ) ;
17826: LD_EXP 19
17830: PPUSH
17831: LD_VAR 0 3
17835: PUSH
17836: LD_STRING Khatam
17838: STR
17839: PPUSH
17840: CALL_OW 38
// if IsLive ( Houten ) then
17844: LD_EXP 20
17848: PPUSH
17849: CALL_OW 300
17853: IFFALSE 17873
// SaveCharacters ( Houten , prefix & Houten ) ;
17855: LD_EXP 20
17859: PPUSH
17860: LD_VAR 0 3
17864: PUSH
17865: LD_STRING Houten
17867: STR
17868: PPUSH
17869: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
17873: LD_INT 22
17875: PUSH
17876: LD_INT 1
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 21
17885: PUSH
17886: LD_INT 1
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PUSH
17893: LD_INT 23
17895: PUSH
17896: LD_INT 1
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: LIST
17907: PPUSH
17908: CALL_OW 69
17912: PUSH
17913: LD_EXP 10
17917: PUSH
17918: LD_EXP 11
17922: PUSH
17923: LD_EXP 12
17927: PUSH
17928: LD_EXP 13
17932: PUSH
17933: LD_EXP 14
17937: PUSH
17938: LD_EXP 15
17942: PUSH
17943: LD_EXP 16
17947: PUSH
17948: LD_EXP 17
17952: PUSH
17953: LD_EXP 18
17957: PUSH
17958: LD_EXP 21
17962: PUSH
17963: LD_EXP 22
17967: PUSH
17968: LD_EXP 20
17972: PUSH
17973: LD_EXP 19
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: DIFF
17993: PPUSH
17994: LD_STRING 08_other_survivors
17996: PPUSH
17997: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
18001: LD_INT 15
18003: PPUSH
18004: CALL 7013 0 1
// SaveVariable ( sikorskiStatus , 08_SikorskiStatus ) ;
18008: LD_EXP 8
18012: PPUSH
18013: LD_STRING 08_SikorskiStatus
18015: PPUSH
18016: CALL_OW 39
// YouWin ;
18020: CALL_OW 103
// end ; end_of_file
18024: PPOPN 3
18026: END
// export function SikorskiCounter ; begin
18027: LD_INT 0
18029: PPUSH
// repeat wait ( 0 0$1 ) ;
18030: LD_INT 35
18032: PPUSH
18033: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
18037: LD_ADDR_OWVAR 47
18041: PUSH
18042: LD_STRING #Am08-2
18044: PUSH
18045: LD_EXP 3
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
18054: LD_ADDR_EXP 3
18058: PUSH
18059: LD_EXP 3
18063: PUSH
18064: LD_INT 35
18066: MINUS
18067: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
18068: LD_EXP 3
18072: PUSH
18073: LD_INT 0
18075: EQUAL
18076: IFFALSE 18030
// display_strings := [ ] ;
18078: LD_ADDR_OWVAR 47
18082: PUSH
18083: EMPTY
18084: ST_TO_ADDR
// end ;
18085: LD_VAR 0 1
18089: RET
// export function SikorskiWaitCounter ; begin
18090: LD_INT 0
18092: PPUSH
// repeat wait ( 0 0$1 ) ;
18093: LD_INT 35
18095: PPUSH
18096: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
18100: LD_ADDR_OWVAR 47
18104: PUSH
18105: LD_STRING #Am08-1
18107: PUSH
18108: LD_EXP 4
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
18117: LD_ADDR_EXP 4
18121: PUSH
18122: LD_EXP 4
18126: PUSH
18127: LD_INT 35
18129: MINUS
18130: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
18131: LD_EXP 4
18135: PUSH
18136: LD_INT 0
18138: EQUAL
18139: IFFALSE 18093
// display_strings := [ ] ;
18141: LD_ADDR_OWVAR 47
18145: PUSH
18146: EMPTY
18147: ST_TO_ADDR
// end ; end_of_file
18148: LD_VAR 0 1
18152: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
18153: LD_EXP 3
18157: IFFALSE 18197
18159: GO 18161
18161: DISABLE
// begin enable ;
18162: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
18163: LD_INT 14
18165: PPUSH
18166: CALL_OW 435
18170: PUSH
18171: LD_INT 10
18173: LESS
18174: IFFALSE 18197
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
18176: LD_INT 1
18178: PPUSH
18179: LD_INT 5
18181: PPUSH
18182: CALL_OW 12
18186: PPUSH
18187: LD_INT 14
18189: PPUSH
18190: LD_INT 1
18192: PPUSH
18193: CALL_OW 55
// end ;
18197: END
// every 0 0$55 trigger sikorskiArriveCounter do
18198: LD_EXP 3
18202: IFFALSE 18242
18204: GO 18206
18206: DISABLE
// begin enable ;
18207: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
18208: LD_INT 13
18210: PPUSH
18211: CALL_OW 435
18215: PUSH
18216: LD_INT 10
18218: LESS
18219: IFFALSE 18242
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
18221: LD_INT 1
18223: PPUSH
18224: LD_INT 5
18226: PPUSH
18227: CALL_OW 12
18231: PPUSH
18232: LD_INT 13
18234: PPUSH
18235: LD_INT 1
18237: PPUSH
18238: CALL_OW 55
// end ; end_of_file
18242: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
18243: LD_INT 0
18245: PPUSH
18246: PPUSH
// if not units then
18247: LD_VAR 0 1
18251: NOT
18252: IFFALSE 18256
// exit ;
18254: GO 18381
// result := false ;
18256: LD_ADDR_VAR 0 4
18260: PUSH
18261: LD_INT 0
18263: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
18264: LD_ADDR_VAR 0 5
18268: PUSH
18269: LD_VAR 0 1
18273: PPUSH
18274: LD_INT 26
18276: PUSH
18277: LD_INT 1
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PPUSH
18284: CALL_OW 72
18288: ST_TO_ADDR
// if tmp then
18289: LD_VAR 0 5
18293: IFFALSE 18319
// result := Say ( tmp [ 1 ] , menDialog ) ;
18295: LD_ADDR_VAR 0 4
18299: PUSH
18300: LD_VAR 0 5
18304: PUSH
18305: LD_INT 1
18307: ARRAY
18308: PPUSH
18309: LD_VAR 0 2
18313: PPUSH
18314: CALL_OW 88
18318: ST_TO_ADDR
// if not result then
18319: LD_VAR 0 4
18323: NOT
18324: IFFALSE 18381
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
18326: LD_ADDR_VAR 0 5
18330: PUSH
18331: LD_VAR 0 1
18335: PPUSH
18336: LD_INT 26
18338: PUSH
18339: LD_INT 2
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PPUSH
18346: CALL_OW 72
18350: ST_TO_ADDR
// if tmp then
18351: LD_VAR 0 5
18355: IFFALSE 18381
// result := Say ( tmp [ 1 ] , womenDialog ) ;
18357: LD_ADDR_VAR 0 4
18361: PUSH
18362: LD_VAR 0 5
18366: PUSH
18367: LD_INT 1
18369: ARRAY
18370: PPUSH
18371: LD_VAR 0 3
18375: PPUSH
18376: CALL_OW 88
18380: ST_TO_ADDR
// end ; end ; end_of_file
18381: LD_VAR 0 4
18385: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18386: LD_INT 0
18388: PPUSH
// ar_miner := 81 ;
18389: LD_ADDR_EXP 39
18393: PUSH
18394: LD_INT 81
18396: ST_TO_ADDR
// ar_crane := 88 ;
18397: LD_ADDR_EXP 38
18401: PUSH
18402: LD_INT 88
18404: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18405: LD_ADDR_EXP 33
18409: PUSH
18410: LD_INT 89
18412: ST_TO_ADDR
// us_hack := 99 ;
18413: LD_ADDR_EXP 34
18417: PUSH
18418: LD_INT 99
18420: ST_TO_ADDR
// us_artillery := 97 ;
18421: LD_ADDR_EXP 35
18425: PUSH
18426: LD_INT 97
18428: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18429: LD_ADDR_EXP 36
18433: PUSH
18434: LD_INT 91
18436: ST_TO_ADDR
// ar_mortar := 92 ;
18437: LD_ADDR_EXP 37
18441: PUSH
18442: LD_INT 92
18444: ST_TO_ADDR
// ru_flamethrower := 93 ;
18445: LD_ADDR_EXP 40
18449: PUSH
18450: LD_INT 93
18452: ST_TO_ADDR
// ru_radar := 98 ;
18453: LD_ADDR_EXP 32
18457: PUSH
18458: LD_INT 98
18460: ST_TO_ADDR
// tech_Artillery := 80 ;
18461: LD_ADDR_EXP 41
18465: PUSH
18466: LD_INT 80
18468: ST_TO_ADDR
// tech_RadMat := 81 ;
18469: LD_ADDR_EXP 42
18473: PUSH
18474: LD_INT 81
18476: ST_TO_ADDR
// tech_BasicTools := 82 ;
18477: LD_ADDR_EXP 43
18481: PUSH
18482: LD_INT 82
18484: ST_TO_ADDR
// tech_Cargo := 83 ;
18485: LD_ADDR_EXP 44
18489: PUSH
18490: LD_INT 83
18492: ST_TO_ADDR
// tech_Track := 84 ;
18493: LD_ADDR_EXP 45
18497: PUSH
18498: LD_INT 84
18500: ST_TO_ADDR
// tech_Crane := 85 ;
18501: LD_ADDR_EXP 46
18505: PUSH
18506: LD_INT 85
18508: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18509: LD_ADDR_EXP 47
18513: PUSH
18514: LD_INT 86
18516: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18517: LD_ADDR_EXP 48
18521: PUSH
18522: LD_INT 87
18524: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18525: LD_ADDR_EXP 49
18529: PUSH
18530: LD_INT 88
18532: ST_TO_ADDR
// class_mastodont := 31 ;
18533: LD_ADDR_EXP 50
18537: PUSH
18538: LD_INT 31
18540: ST_TO_ADDR
// class_horse := 21 ;
18541: LD_ADDR_EXP 51
18545: PUSH
18546: LD_INT 21
18548: ST_TO_ADDR
// end ;
18549: LD_VAR 0 1
18553: RET
// every 1 do
18554: GO 18556
18556: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18557: CALL 18386 0 0
18561: END
// every 0 0$1 do
18562: GO 18564
18564: DISABLE
// begin enable ;
18565: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18566: LD_STRING updateTimer(
18568: PUSH
18569: LD_OWVAR 1
18573: STR
18574: PUSH
18575: LD_STRING );
18577: STR
18578: PPUSH
18579: CALL_OW 559
// end ;
18583: END
// export function SOS_MapStart ( ) ; begin
18584: LD_INT 0
18586: PPUSH
// if streamModeActive then
18587: LD_EXP 52
18591: IFFALSE 18600
// DefineStreamItems ( true ) ;
18593: LD_INT 1
18595: PPUSH
18596: CALL 20250 0 1
// UpdateFactoryWaypoints ( ) ;
18600: CALL 33834 0 0
// end ;
18604: LD_VAR 0 1
18608: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18609: LD_INT 0
18611: PPUSH
// if p2 = 100 then
18612: LD_VAR 0 2
18616: PUSH
18617: LD_INT 100
18619: EQUAL
18620: IFFALSE 19623
// begin if not StreamModeActive then
18622: LD_EXP 52
18626: NOT
18627: IFFALSE 18637
// StreamModeActive := true ;
18629: LD_ADDR_EXP 52
18633: PUSH
18634: LD_INT 1
18636: ST_TO_ADDR
// if p3 = 0 then
18637: LD_VAR 0 3
18641: PUSH
18642: LD_INT 0
18644: EQUAL
18645: IFFALSE 18651
// InitStreamMode ;
18647: CALL 19786 0 0
// if p3 = 1 then
18651: LD_VAR 0 3
18655: PUSH
18656: LD_INT 1
18658: EQUAL
18659: IFFALSE 18669
// sRocket := true ;
18661: LD_ADDR_EXP 57
18665: PUSH
18666: LD_INT 1
18668: ST_TO_ADDR
// if p3 = 2 then
18669: LD_VAR 0 3
18673: PUSH
18674: LD_INT 2
18676: EQUAL
18677: IFFALSE 18687
// sSpeed := true ;
18679: LD_ADDR_EXP 56
18683: PUSH
18684: LD_INT 1
18686: ST_TO_ADDR
// if p3 = 3 then
18687: LD_VAR 0 3
18691: PUSH
18692: LD_INT 3
18694: EQUAL
18695: IFFALSE 18705
// sEngine := true ;
18697: LD_ADDR_EXP 58
18701: PUSH
18702: LD_INT 1
18704: ST_TO_ADDR
// if p3 = 4 then
18705: LD_VAR 0 3
18709: PUSH
18710: LD_INT 4
18712: EQUAL
18713: IFFALSE 18723
// sSpec := true ;
18715: LD_ADDR_EXP 55
18719: PUSH
18720: LD_INT 1
18722: ST_TO_ADDR
// if p3 = 5 then
18723: LD_VAR 0 3
18727: PUSH
18728: LD_INT 5
18730: EQUAL
18731: IFFALSE 18741
// sLevel := true ;
18733: LD_ADDR_EXP 59
18737: PUSH
18738: LD_INT 1
18740: ST_TO_ADDR
// if p3 = 6 then
18741: LD_VAR 0 3
18745: PUSH
18746: LD_INT 6
18748: EQUAL
18749: IFFALSE 18759
// sArmoury := true ;
18751: LD_ADDR_EXP 60
18755: PUSH
18756: LD_INT 1
18758: ST_TO_ADDR
// if p3 = 7 then
18759: LD_VAR 0 3
18763: PUSH
18764: LD_INT 7
18766: EQUAL
18767: IFFALSE 18777
// sRadar := true ;
18769: LD_ADDR_EXP 61
18773: PUSH
18774: LD_INT 1
18776: ST_TO_ADDR
// if p3 = 8 then
18777: LD_VAR 0 3
18781: PUSH
18782: LD_INT 8
18784: EQUAL
18785: IFFALSE 18795
// sBunker := true ;
18787: LD_ADDR_EXP 62
18791: PUSH
18792: LD_INT 1
18794: ST_TO_ADDR
// if p3 = 9 then
18795: LD_VAR 0 3
18799: PUSH
18800: LD_INT 9
18802: EQUAL
18803: IFFALSE 18813
// sHack := true ;
18805: LD_ADDR_EXP 63
18809: PUSH
18810: LD_INT 1
18812: ST_TO_ADDR
// if p3 = 10 then
18813: LD_VAR 0 3
18817: PUSH
18818: LD_INT 10
18820: EQUAL
18821: IFFALSE 18831
// sFire := true ;
18823: LD_ADDR_EXP 64
18827: PUSH
18828: LD_INT 1
18830: ST_TO_ADDR
// if p3 = 11 then
18831: LD_VAR 0 3
18835: PUSH
18836: LD_INT 11
18838: EQUAL
18839: IFFALSE 18849
// sRefresh := true ;
18841: LD_ADDR_EXP 65
18845: PUSH
18846: LD_INT 1
18848: ST_TO_ADDR
// if p3 = 12 then
18849: LD_VAR 0 3
18853: PUSH
18854: LD_INT 12
18856: EQUAL
18857: IFFALSE 18867
// sExp := true ;
18859: LD_ADDR_EXP 66
18863: PUSH
18864: LD_INT 1
18866: ST_TO_ADDR
// if p3 = 13 then
18867: LD_VAR 0 3
18871: PUSH
18872: LD_INT 13
18874: EQUAL
18875: IFFALSE 18885
// sDepot := true ;
18877: LD_ADDR_EXP 67
18881: PUSH
18882: LD_INT 1
18884: ST_TO_ADDR
// if p3 = 14 then
18885: LD_VAR 0 3
18889: PUSH
18890: LD_INT 14
18892: EQUAL
18893: IFFALSE 18903
// sFlag := true ;
18895: LD_ADDR_EXP 68
18899: PUSH
18900: LD_INT 1
18902: ST_TO_ADDR
// if p3 = 15 then
18903: LD_VAR 0 3
18907: PUSH
18908: LD_INT 15
18910: EQUAL
18911: IFFALSE 18921
// sKamikadze := true ;
18913: LD_ADDR_EXP 76
18917: PUSH
18918: LD_INT 1
18920: ST_TO_ADDR
// if p3 = 16 then
18921: LD_VAR 0 3
18925: PUSH
18926: LD_INT 16
18928: EQUAL
18929: IFFALSE 18939
// sTroll := true ;
18931: LD_ADDR_EXP 77
18935: PUSH
18936: LD_INT 1
18938: ST_TO_ADDR
// if p3 = 17 then
18939: LD_VAR 0 3
18943: PUSH
18944: LD_INT 17
18946: EQUAL
18947: IFFALSE 18957
// sSlow := true ;
18949: LD_ADDR_EXP 78
18953: PUSH
18954: LD_INT 1
18956: ST_TO_ADDR
// if p3 = 18 then
18957: LD_VAR 0 3
18961: PUSH
18962: LD_INT 18
18964: EQUAL
18965: IFFALSE 18975
// sLack := true ;
18967: LD_ADDR_EXP 79
18971: PUSH
18972: LD_INT 1
18974: ST_TO_ADDR
// if p3 = 19 then
18975: LD_VAR 0 3
18979: PUSH
18980: LD_INT 19
18982: EQUAL
18983: IFFALSE 18993
// sTank := true ;
18985: LD_ADDR_EXP 81
18989: PUSH
18990: LD_INT 1
18992: ST_TO_ADDR
// if p3 = 20 then
18993: LD_VAR 0 3
18997: PUSH
18998: LD_INT 20
19000: EQUAL
19001: IFFALSE 19011
// sRemote := true ;
19003: LD_ADDR_EXP 82
19007: PUSH
19008: LD_INT 1
19010: ST_TO_ADDR
// if p3 = 21 then
19011: LD_VAR 0 3
19015: PUSH
19016: LD_INT 21
19018: EQUAL
19019: IFFALSE 19029
// sPowell := true ;
19021: LD_ADDR_EXP 83
19025: PUSH
19026: LD_INT 1
19028: ST_TO_ADDR
// if p3 = 22 then
19029: LD_VAR 0 3
19033: PUSH
19034: LD_INT 22
19036: EQUAL
19037: IFFALSE 19047
// sTeleport := true ;
19039: LD_ADDR_EXP 86
19043: PUSH
19044: LD_INT 1
19046: ST_TO_ADDR
// if p3 = 23 then
19047: LD_VAR 0 3
19051: PUSH
19052: LD_INT 23
19054: EQUAL
19055: IFFALSE 19065
// sOilTower := true ;
19057: LD_ADDR_EXP 88
19061: PUSH
19062: LD_INT 1
19064: ST_TO_ADDR
// if p3 = 24 then
19065: LD_VAR 0 3
19069: PUSH
19070: LD_INT 24
19072: EQUAL
19073: IFFALSE 19083
// sShovel := true ;
19075: LD_ADDR_EXP 89
19079: PUSH
19080: LD_INT 1
19082: ST_TO_ADDR
// if p3 = 25 then
19083: LD_VAR 0 3
19087: PUSH
19088: LD_INT 25
19090: EQUAL
19091: IFFALSE 19101
// sSheik := true ;
19093: LD_ADDR_EXP 90
19097: PUSH
19098: LD_INT 1
19100: ST_TO_ADDR
// if p3 = 26 then
19101: LD_VAR 0 3
19105: PUSH
19106: LD_INT 26
19108: EQUAL
19109: IFFALSE 19119
// sEarthquake := true ;
19111: LD_ADDR_EXP 92
19115: PUSH
19116: LD_INT 1
19118: ST_TO_ADDR
// if p3 = 27 then
19119: LD_VAR 0 3
19123: PUSH
19124: LD_INT 27
19126: EQUAL
19127: IFFALSE 19137
// sAI := true ;
19129: LD_ADDR_EXP 93
19133: PUSH
19134: LD_INT 1
19136: ST_TO_ADDR
// if p3 = 28 then
19137: LD_VAR 0 3
19141: PUSH
19142: LD_INT 28
19144: EQUAL
19145: IFFALSE 19155
// sCargo := true ;
19147: LD_ADDR_EXP 96
19151: PUSH
19152: LD_INT 1
19154: ST_TO_ADDR
// if p3 = 29 then
19155: LD_VAR 0 3
19159: PUSH
19160: LD_INT 29
19162: EQUAL
19163: IFFALSE 19173
// sDLaser := true ;
19165: LD_ADDR_EXP 97
19169: PUSH
19170: LD_INT 1
19172: ST_TO_ADDR
// if p3 = 30 then
19173: LD_VAR 0 3
19177: PUSH
19178: LD_INT 30
19180: EQUAL
19181: IFFALSE 19191
// sExchange := true ;
19183: LD_ADDR_EXP 98
19187: PUSH
19188: LD_INT 1
19190: ST_TO_ADDR
// if p3 = 31 then
19191: LD_VAR 0 3
19195: PUSH
19196: LD_INT 31
19198: EQUAL
19199: IFFALSE 19209
// sFac := true ;
19201: LD_ADDR_EXP 99
19205: PUSH
19206: LD_INT 1
19208: ST_TO_ADDR
// if p3 = 32 then
19209: LD_VAR 0 3
19213: PUSH
19214: LD_INT 32
19216: EQUAL
19217: IFFALSE 19227
// sPower := true ;
19219: LD_ADDR_EXP 100
19223: PUSH
19224: LD_INT 1
19226: ST_TO_ADDR
// if p3 = 33 then
19227: LD_VAR 0 3
19231: PUSH
19232: LD_INT 33
19234: EQUAL
19235: IFFALSE 19245
// sRandom := true ;
19237: LD_ADDR_EXP 101
19241: PUSH
19242: LD_INT 1
19244: ST_TO_ADDR
// if p3 = 34 then
19245: LD_VAR 0 3
19249: PUSH
19250: LD_INT 34
19252: EQUAL
19253: IFFALSE 19263
// sShield := true ;
19255: LD_ADDR_EXP 102
19259: PUSH
19260: LD_INT 1
19262: ST_TO_ADDR
// if p3 = 35 then
19263: LD_VAR 0 3
19267: PUSH
19268: LD_INT 35
19270: EQUAL
19271: IFFALSE 19281
// sTime := true ;
19273: LD_ADDR_EXP 103
19277: PUSH
19278: LD_INT 1
19280: ST_TO_ADDR
// if p3 = 36 then
19281: LD_VAR 0 3
19285: PUSH
19286: LD_INT 36
19288: EQUAL
19289: IFFALSE 19299
// sTools := true ;
19291: LD_ADDR_EXP 104
19295: PUSH
19296: LD_INT 1
19298: ST_TO_ADDR
// if p3 = 101 then
19299: LD_VAR 0 3
19303: PUSH
19304: LD_INT 101
19306: EQUAL
19307: IFFALSE 19317
// sSold := true ;
19309: LD_ADDR_EXP 69
19313: PUSH
19314: LD_INT 1
19316: ST_TO_ADDR
// if p3 = 102 then
19317: LD_VAR 0 3
19321: PUSH
19322: LD_INT 102
19324: EQUAL
19325: IFFALSE 19335
// sDiff := true ;
19327: LD_ADDR_EXP 70
19331: PUSH
19332: LD_INT 1
19334: ST_TO_ADDR
// if p3 = 103 then
19335: LD_VAR 0 3
19339: PUSH
19340: LD_INT 103
19342: EQUAL
19343: IFFALSE 19353
// sFog := true ;
19345: LD_ADDR_EXP 73
19349: PUSH
19350: LD_INT 1
19352: ST_TO_ADDR
// if p3 = 104 then
19353: LD_VAR 0 3
19357: PUSH
19358: LD_INT 104
19360: EQUAL
19361: IFFALSE 19371
// sReset := true ;
19363: LD_ADDR_EXP 74
19367: PUSH
19368: LD_INT 1
19370: ST_TO_ADDR
// if p3 = 105 then
19371: LD_VAR 0 3
19375: PUSH
19376: LD_INT 105
19378: EQUAL
19379: IFFALSE 19389
// sSun := true ;
19381: LD_ADDR_EXP 75
19385: PUSH
19386: LD_INT 1
19388: ST_TO_ADDR
// if p3 = 106 then
19389: LD_VAR 0 3
19393: PUSH
19394: LD_INT 106
19396: EQUAL
19397: IFFALSE 19407
// sTiger := true ;
19399: LD_ADDR_EXP 71
19403: PUSH
19404: LD_INT 1
19406: ST_TO_ADDR
// if p3 = 107 then
19407: LD_VAR 0 3
19411: PUSH
19412: LD_INT 107
19414: EQUAL
19415: IFFALSE 19425
// sBomb := true ;
19417: LD_ADDR_EXP 72
19421: PUSH
19422: LD_INT 1
19424: ST_TO_ADDR
// if p3 = 108 then
19425: LD_VAR 0 3
19429: PUSH
19430: LD_INT 108
19432: EQUAL
19433: IFFALSE 19443
// sWound := true ;
19435: LD_ADDR_EXP 80
19439: PUSH
19440: LD_INT 1
19442: ST_TO_ADDR
// if p3 = 109 then
19443: LD_VAR 0 3
19447: PUSH
19448: LD_INT 109
19450: EQUAL
19451: IFFALSE 19461
// sBetray := true ;
19453: LD_ADDR_EXP 84
19457: PUSH
19458: LD_INT 1
19460: ST_TO_ADDR
// if p3 = 110 then
19461: LD_VAR 0 3
19465: PUSH
19466: LD_INT 110
19468: EQUAL
19469: IFFALSE 19479
// sContamin := true ;
19471: LD_ADDR_EXP 85
19475: PUSH
19476: LD_INT 1
19478: ST_TO_ADDR
// if p3 = 111 then
19479: LD_VAR 0 3
19483: PUSH
19484: LD_INT 111
19486: EQUAL
19487: IFFALSE 19497
// sOil := true ;
19489: LD_ADDR_EXP 87
19493: PUSH
19494: LD_INT 1
19496: ST_TO_ADDR
// if p3 = 112 then
19497: LD_VAR 0 3
19501: PUSH
19502: LD_INT 112
19504: EQUAL
19505: IFFALSE 19515
// sStu := true ;
19507: LD_ADDR_EXP 91
19511: PUSH
19512: LD_INT 1
19514: ST_TO_ADDR
// if p3 = 113 then
19515: LD_VAR 0 3
19519: PUSH
19520: LD_INT 113
19522: EQUAL
19523: IFFALSE 19533
// sBazooka := true ;
19525: LD_ADDR_EXP 94
19529: PUSH
19530: LD_INT 1
19532: ST_TO_ADDR
// if p3 = 114 then
19533: LD_VAR 0 3
19537: PUSH
19538: LD_INT 114
19540: EQUAL
19541: IFFALSE 19551
// sMortar := true ;
19543: LD_ADDR_EXP 95
19547: PUSH
19548: LD_INT 1
19550: ST_TO_ADDR
// if p3 = 115 then
19551: LD_VAR 0 3
19555: PUSH
19556: LD_INT 115
19558: EQUAL
19559: IFFALSE 19569
// sRanger := true ;
19561: LD_ADDR_EXP 105
19565: PUSH
19566: LD_INT 1
19568: ST_TO_ADDR
// if p3 = 116 then
19569: LD_VAR 0 3
19573: PUSH
19574: LD_INT 116
19576: EQUAL
19577: IFFALSE 19587
// sComputer := true ;
19579: LD_ADDR_EXP 106
19583: PUSH
19584: LD_INT 1
19586: ST_TO_ADDR
// if p3 = 117 then
19587: LD_VAR 0 3
19591: PUSH
19592: LD_INT 117
19594: EQUAL
19595: IFFALSE 19605
// s30 := true ;
19597: LD_ADDR_EXP 107
19601: PUSH
19602: LD_INT 1
19604: ST_TO_ADDR
// if p3 = 118 then
19605: LD_VAR 0 3
19609: PUSH
19610: LD_INT 118
19612: EQUAL
19613: IFFALSE 19623
// s60 := true ;
19615: LD_ADDR_EXP 108
19619: PUSH
19620: LD_INT 1
19622: ST_TO_ADDR
// end ; if p2 = 101 then
19623: LD_VAR 0 2
19627: PUSH
19628: LD_INT 101
19630: EQUAL
19631: IFFALSE 19759
// begin case p3 of 1 :
19633: LD_VAR 0 3
19637: PUSH
19638: LD_INT 1
19640: DOUBLE
19641: EQUAL
19642: IFTRUE 19646
19644: GO 19653
19646: POP
// hHackUnlimitedResources ; 2 :
19647: CALL 31857 0 0
19651: GO 19759
19653: LD_INT 2
19655: DOUBLE
19656: EQUAL
19657: IFTRUE 19661
19659: GO 19668
19661: POP
// hHackSetLevel10 ; 3 :
19662: CALL 31990 0 0
19666: GO 19759
19668: LD_INT 3
19670: DOUBLE
19671: EQUAL
19672: IFTRUE 19676
19674: GO 19683
19676: POP
// hHackSetLevel10YourUnits ; 4 :
19677: CALL 32075 0 0
19681: GO 19759
19683: LD_INT 4
19685: DOUBLE
19686: EQUAL
19687: IFTRUE 19691
19689: GO 19698
19691: POP
// hHackInvincible ; 5 :
19692: CALL 32523 0 0
19696: GO 19759
19698: LD_INT 5
19700: DOUBLE
19701: EQUAL
19702: IFTRUE 19706
19704: GO 19713
19706: POP
// hHackInvisible ; 6 :
19707: CALL 32634 0 0
19711: GO 19759
19713: LD_INT 6
19715: DOUBLE
19716: EQUAL
19717: IFTRUE 19721
19719: GO 19728
19721: POP
// hHackChangeYourSide ; 7 :
19722: CALL 32691 0 0
19726: GO 19759
19728: LD_INT 7
19730: DOUBLE
19731: EQUAL
19732: IFTRUE 19736
19734: GO 19743
19736: POP
// hHackChangeUnitSide ; 8 :
19737: CALL 32733 0 0
19741: GO 19759
19743: LD_INT 8
19745: DOUBLE
19746: EQUAL
19747: IFTRUE 19751
19749: GO 19758
19751: POP
// hHackFog ; end ;
19752: CALL 32834 0 0
19756: GO 19759
19758: POP
// end ; end ;
19759: LD_VAR 0 7
19763: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19764: GO 19766
19766: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19767: LD_STRING initStreamRollete();
19769: PPUSH
19770: CALL_OW 559
// InitStreamMode ;
19774: CALL 19786 0 0
// DefineStreamItems ( false ) ;
19778: LD_INT 0
19780: PPUSH
19781: CALL 20250 0 1
// end ;
19785: END
// function InitStreamMode ; begin
19786: LD_INT 0
19788: PPUSH
// streamModeActive := false ;
19789: LD_ADDR_EXP 52
19793: PUSH
19794: LD_INT 0
19796: ST_TO_ADDR
// normalCounter := 36 ;
19797: LD_ADDR_EXP 53
19801: PUSH
19802: LD_INT 36
19804: ST_TO_ADDR
// hardcoreCounter := 18 ;
19805: LD_ADDR_EXP 54
19809: PUSH
19810: LD_INT 18
19812: ST_TO_ADDR
// sRocket := false ;
19813: LD_ADDR_EXP 57
19817: PUSH
19818: LD_INT 0
19820: ST_TO_ADDR
// sSpeed := false ;
19821: LD_ADDR_EXP 56
19825: PUSH
19826: LD_INT 0
19828: ST_TO_ADDR
// sEngine := false ;
19829: LD_ADDR_EXP 58
19833: PUSH
19834: LD_INT 0
19836: ST_TO_ADDR
// sSpec := false ;
19837: LD_ADDR_EXP 55
19841: PUSH
19842: LD_INT 0
19844: ST_TO_ADDR
// sLevel := false ;
19845: LD_ADDR_EXP 59
19849: PUSH
19850: LD_INT 0
19852: ST_TO_ADDR
// sArmoury := false ;
19853: LD_ADDR_EXP 60
19857: PUSH
19858: LD_INT 0
19860: ST_TO_ADDR
// sRadar := false ;
19861: LD_ADDR_EXP 61
19865: PUSH
19866: LD_INT 0
19868: ST_TO_ADDR
// sBunker := false ;
19869: LD_ADDR_EXP 62
19873: PUSH
19874: LD_INT 0
19876: ST_TO_ADDR
// sHack := false ;
19877: LD_ADDR_EXP 63
19881: PUSH
19882: LD_INT 0
19884: ST_TO_ADDR
// sFire := false ;
19885: LD_ADDR_EXP 64
19889: PUSH
19890: LD_INT 0
19892: ST_TO_ADDR
// sRefresh := false ;
19893: LD_ADDR_EXP 65
19897: PUSH
19898: LD_INT 0
19900: ST_TO_ADDR
// sExp := false ;
19901: LD_ADDR_EXP 66
19905: PUSH
19906: LD_INT 0
19908: ST_TO_ADDR
// sDepot := false ;
19909: LD_ADDR_EXP 67
19913: PUSH
19914: LD_INT 0
19916: ST_TO_ADDR
// sFlag := false ;
19917: LD_ADDR_EXP 68
19921: PUSH
19922: LD_INT 0
19924: ST_TO_ADDR
// sKamikadze := false ;
19925: LD_ADDR_EXP 76
19929: PUSH
19930: LD_INT 0
19932: ST_TO_ADDR
// sTroll := false ;
19933: LD_ADDR_EXP 77
19937: PUSH
19938: LD_INT 0
19940: ST_TO_ADDR
// sSlow := false ;
19941: LD_ADDR_EXP 78
19945: PUSH
19946: LD_INT 0
19948: ST_TO_ADDR
// sLack := false ;
19949: LD_ADDR_EXP 79
19953: PUSH
19954: LD_INT 0
19956: ST_TO_ADDR
// sTank := false ;
19957: LD_ADDR_EXP 81
19961: PUSH
19962: LD_INT 0
19964: ST_TO_ADDR
// sRemote := false ;
19965: LD_ADDR_EXP 82
19969: PUSH
19970: LD_INT 0
19972: ST_TO_ADDR
// sPowell := false ;
19973: LD_ADDR_EXP 83
19977: PUSH
19978: LD_INT 0
19980: ST_TO_ADDR
// sTeleport := false ;
19981: LD_ADDR_EXP 86
19985: PUSH
19986: LD_INT 0
19988: ST_TO_ADDR
// sOilTower := false ;
19989: LD_ADDR_EXP 88
19993: PUSH
19994: LD_INT 0
19996: ST_TO_ADDR
// sShovel := false ;
19997: LD_ADDR_EXP 89
20001: PUSH
20002: LD_INT 0
20004: ST_TO_ADDR
// sSheik := false ;
20005: LD_ADDR_EXP 90
20009: PUSH
20010: LD_INT 0
20012: ST_TO_ADDR
// sEarthquake := false ;
20013: LD_ADDR_EXP 92
20017: PUSH
20018: LD_INT 0
20020: ST_TO_ADDR
// sAI := false ;
20021: LD_ADDR_EXP 93
20025: PUSH
20026: LD_INT 0
20028: ST_TO_ADDR
// sCargo := false ;
20029: LD_ADDR_EXP 96
20033: PUSH
20034: LD_INT 0
20036: ST_TO_ADDR
// sDLaser := false ;
20037: LD_ADDR_EXP 97
20041: PUSH
20042: LD_INT 0
20044: ST_TO_ADDR
// sExchange := false ;
20045: LD_ADDR_EXP 98
20049: PUSH
20050: LD_INT 0
20052: ST_TO_ADDR
// sFac := false ;
20053: LD_ADDR_EXP 99
20057: PUSH
20058: LD_INT 0
20060: ST_TO_ADDR
// sPower := false ;
20061: LD_ADDR_EXP 100
20065: PUSH
20066: LD_INT 0
20068: ST_TO_ADDR
// sRandom := false ;
20069: LD_ADDR_EXP 101
20073: PUSH
20074: LD_INT 0
20076: ST_TO_ADDR
// sShield := false ;
20077: LD_ADDR_EXP 102
20081: PUSH
20082: LD_INT 0
20084: ST_TO_ADDR
// sTime := false ;
20085: LD_ADDR_EXP 103
20089: PUSH
20090: LD_INT 0
20092: ST_TO_ADDR
// sTools := false ;
20093: LD_ADDR_EXP 104
20097: PUSH
20098: LD_INT 0
20100: ST_TO_ADDR
// sSold := false ;
20101: LD_ADDR_EXP 69
20105: PUSH
20106: LD_INT 0
20108: ST_TO_ADDR
// sDiff := false ;
20109: LD_ADDR_EXP 70
20113: PUSH
20114: LD_INT 0
20116: ST_TO_ADDR
// sFog := false ;
20117: LD_ADDR_EXP 73
20121: PUSH
20122: LD_INT 0
20124: ST_TO_ADDR
// sReset := false ;
20125: LD_ADDR_EXP 74
20129: PUSH
20130: LD_INT 0
20132: ST_TO_ADDR
// sSun := false ;
20133: LD_ADDR_EXP 75
20137: PUSH
20138: LD_INT 0
20140: ST_TO_ADDR
// sTiger := false ;
20141: LD_ADDR_EXP 71
20145: PUSH
20146: LD_INT 0
20148: ST_TO_ADDR
// sBomb := false ;
20149: LD_ADDR_EXP 72
20153: PUSH
20154: LD_INT 0
20156: ST_TO_ADDR
// sWound := false ;
20157: LD_ADDR_EXP 80
20161: PUSH
20162: LD_INT 0
20164: ST_TO_ADDR
// sBetray := false ;
20165: LD_ADDR_EXP 84
20169: PUSH
20170: LD_INT 0
20172: ST_TO_ADDR
// sContamin := false ;
20173: LD_ADDR_EXP 85
20177: PUSH
20178: LD_INT 0
20180: ST_TO_ADDR
// sOil := false ;
20181: LD_ADDR_EXP 87
20185: PUSH
20186: LD_INT 0
20188: ST_TO_ADDR
// sStu := false ;
20189: LD_ADDR_EXP 91
20193: PUSH
20194: LD_INT 0
20196: ST_TO_ADDR
// sBazooka := false ;
20197: LD_ADDR_EXP 94
20201: PUSH
20202: LD_INT 0
20204: ST_TO_ADDR
// sMortar := false ;
20205: LD_ADDR_EXP 95
20209: PUSH
20210: LD_INT 0
20212: ST_TO_ADDR
// sRanger := false ;
20213: LD_ADDR_EXP 105
20217: PUSH
20218: LD_INT 0
20220: ST_TO_ADDR
// sComputer := false ;
20221: LD_ADDR_EXP 106
20225: PUSH
20226: LD_INT 0
20228: ST_TO_ADDR
// s30 := false ;
20229: LD_ADDR_EXP 107
20233: PUSH
20234: LD_INT 0
20236: ST_TO_ADDR
// s60 := false ;
20237: LD_ADDR_EXP 108
20241: PUSH
20242: LD_INT 0
20244: ST_TO_ADDR
// end ;
20245: LD_VAR 0 1
20249: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20250: LD_INT 0
20252: PPUSH
20253: PPUSH
20254: PPUSH
20255: PPUSH
20256: PPUSH
20257: PPUSH
20258: PPUSH
// result := [ ] ;
20259: LD_ADDR_VAR 0 2
20263: PUSH
20264: EMPTY
20265: ST_TO_ADDR
// if campaign_id = 1 then
20266: LD_OWVAR 69
20270: PUSH
20271: LD_INT 1
20273: EQUAL
20274: IFFALSE 23440
// begin case mission_number of 1 :
20276: LD_OWVAR 70
20280: PUSH
20281: LD_INT 1
20283: DOUBLE
20284: EQUAL
20285: IFTRUE 20289
20287: GO 20365
20289: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20290: LD_ADDR_VAR 0 2
20294: PUSH
20295: LD_INT 2
20297: PUSH
20298: LD_INT 4
20300: PUSH
20301: LD_INT 11
20303: PUSH
20304: LD_INT 12
20306: PUSH
20307: LD_INT 15
20309: PUSH
20310: LD_INT 16
20312: PUSH
20313: LD_INT 22
20315: PUSH
20316: LD_INT 23
20318: PUSH
20319: LD_INT 26
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: PUSH
20333: LD_INT 101
20335: PUSH
20336: LD_INT 102
20338: PUSH
20339: LD_INT 106
20341: PUSH
20342: LD_INT 116
20344: PUSH
20345: LD_INT 117
20347: PUSH
20348: LD_INT 118
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: ST_TO_ADDR
20363: GO 23438
20365: LD_INT 2
20367: DOUBLE
20368: EQUAL
20369: IFTRUE 20373
20371: GO 20457
20373: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20374: LD_ADDR_VAR 0 2
20378: PUSH
20379: LD_INT 2
20381: PUSH
20382: LD_INT 4
20384: PUSH
20385: LD_INT 11
20387: PUSH
20388: LD_INT 12
20390: PUSH
20391: LD_INT 15
20393: PUSH
20394: LD_INT 16
20396: PUSH
20397: LD_INT 22
20399: PUSH
20400: LD_INT 23
20402: PUSH
20403: LD_INT 26
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 101
20419: PUSH
20420: LD_INT 102
20422: PUSH
20423: LD_INT 105
20425: PUSH
20426: LD_INT 106
20428: PUSH
20429: LD_INT 108
20431: PUSH
20432: LD_INT 116
20434: PUSH
20435: LD_INT 117
20437: PUSH
20438: LD_INT 118
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: ST_TO_ADDR
20455: GO 23438
20457: LD_INT 3
20459: DOUBLE
20460: EQUAL
20461: IFTRUE 20465
20463: GO 20553
20465: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20466: LD_ADDR_VAR 0 2
20470: PUSH
20471: LD_INT 2
20473: PUSH
20474: LD_INT 4
20476: PUSH
20477: LD_INT 5
20479: PUSH
20480: LD_INT 11
20482: PUSH
20483: LD_INT 12
20485: PUSH
20486: LD_INT 15
20488: PUSH
20489: LD_INT 16
20491: PUSH
20492: LD_INT 22
20494: PUSH
20495: LD_INT 26
20497: PUSH
20498: LD_INT 36
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: PUSH
20513: LD_INT 101
20515: PUSH
20516: LD_INT 102
20518: PUSH
20519: LD_INT 105
20521: PUSH
20522: LD_INT 106
20524: PUSH
20525: LD_INT 108
20527: PUSH
20528: LD_INT 116
20530: PUSH
20531: LD_INT 117
20533: PUSH
20534: LD_INT 118
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: ST_TO_ADDR
20551: GO 23438
20553: LD_INT 4
20555: DOUBLE
20556: EQUAL
20557: IFTRUE 20561
20559: GO 20657
20561: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20562: LD_ADDR_VAR 0 2
20566: PUSH
20567: LD_INT 2
20569: PUSH
20570: LD_INT 4
20572: PUSH
20573: LD_INT 5
20575: PUSH
20576: LD_INT 8
20578: PUSH
20579: LD_INT 11
20581: PUSH
20582: LD_INT 12
20584: PUSH
20585: LD_INT 15
20587: PUSH
20588: LD_INT 16
20590: PUSH
20591: LD_INT 22
20593: PUSH
20594: LD_INT 23
20596: PUSH
20597: LD_INT 26
20599: PUSH
20600: LD_INT 36
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 101
20619: PUSH
20620: LD_INT 102
20622: PUSH
20623: LD_INT 105
20625: PUSH
20626: LD_INT 106
20628: PUSH
20629: LD_INT 108
20631: PUSH
20632: LD_INT 116
20634: PUSH
20635: LD_INT 117
20637: PUSH
20638: LD_INT 118
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: ST_TO_ADDR
20655: GO 23438
20657: LD_INT 5
20659: DOUBLE
20660: EQUAL
20661: IFTRUE 20665
20663: GO 20777
20665: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20666: LD_ADDR_VAR 0 2
20670: PUSH
20671: LD_INT 2
20673: PUSH
20674: LD_INT 4
20676: PUSH
20677: LD_INT 5
20679: PUSH
20680: LD_INT 6
20682: PUSH
20683: LD_INT 8
20685: PUSH
20686: LD_INT 11
20688: PUSH
20689: LD_INT 12
20691: PUSH
20692: LD_INT 15
20694: PUSH
20695: LD_INT 16
20697: PUSH
20698: LD_INT 22
20700: PUSH
20701: LD_INT 23
20703: PUSH
20704: LD_INT 25
20706: PUSH
20707: LD_INT 26
20709: PUSH
20710: LD_INT 36
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 101
20731: PUSH
20732: LD_INT 102
20734: PUSH
20735: LD_INT 105
20737: PUSH
20738: LD_INT 106
20740: PUSH
20741: LD_INT 108
20743: PUSH
20744: LD_INT 109
20746: PUSH
20747: LD_INT 112
20749: PUSH
20750: LD_INT 116
20752: PUSH
20753: LD_INT 117
20755: PUSH
20756: LD_INT 118
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: ST_TO_ADDR
20775: GO 23438
20777: LD_INT 6
20779: DOUBLE
20780: EQUAL
20781: IFTRUE 20785
20783: GO 20917
20785: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20786: LD_ADDR_VAR 0 2
20790: PUSH
20791: LD_INT 2
20793: PUSH
20794: LD_INT 4
20796: PUSH
20797: LD_INT 5
20799: PUSH
20800: LD_INT 6
20802: PUSH
20803: LD_INT 8
20805: PUSH
20806: LD_INT 11
20808: PUSH
20809: LD_INT 12
20811: PUSH
20812: LD_INT 15
20814: PUSH
20815: LD_INT 16
20817: PUSH
20818: LD_INT 20
20820: PUSH
20821: LD_INT 21
20823: PUSH
20824: LD_INT 22
20826: PUSH
20827: LD_INT 23
20829: PUSH
20830: LD_INT 25
20832: PUSH
20833: LD_INT 26
20835: PUSH
20836: LD_INT 30
20838: PUSH
20839: LD_INT 31
20841: PUSH
20842: LD_INT 32
20844: PUSH
20845: LD_INT 36
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 101
20871: PUSH
20872: LD_INT 102
20874: PUSH
20875: LD_INT 105
20877: PUSH
20878: LD_INT 106
20880: PUSH
20881: LD_INT 108
20883: PUSH
20884: LD_INT 109
20886: PUSH
20887: LD_INT 112
20889: PUSH
20890: LD_INT 116
20892: PUSH
20893: LD_INT 117
20895: PUSH
20896: LD_INT 118
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: ST_TO_ADDR
20915: GO 23438
20917: LD_INT 7
20919: DOUBLE
20920: EQUAL
20921: IFTRUE 20925
20923: GO 21037
20925: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20926: LD_ADDR_VAR 0 2
20930: PUSH
20931: LD_INT 2
20933: PUSH
20934: LD_INT 4
20936: PUSH
20937: LD_INT 5
20939: PUSH
20940: LD_INT 7
20942: PUSH
20943: LD_INT 11
20945: PUSH
20946: LD_INT 12
20948: PUSH
20949: LD_INT 15
20951: PUSH
20952: LD_INT 16
20954: PUSH
20955: LD_INT 20
20957: PUSH
20958: LD_INT 21
20960: PUSH
20961: LD_INT 22
20963: PUSH
20964: LD_INT 23
20966: PUSH
20967: LD_INT 25
20969: PUSH
20970: LD_INT 26
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 101
20991: PUSH
20992: LD_INT 102
20994: PUSH
20995: LD_INT 103
20997: PUSH
20998: LD_INT 105
21000: PUSH
21001: LD_INT 106
21003: PUSH
21004: LD_INT 108
21006: PUSH
21007: LD_INT 112
21009: PUSH
21010: LD_INT 116
21012: PUSH
21013: LD_INT 117
21015: PUSH
21016: LD_INT 118
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: ST_TO_ADDR
21035: GO 23438
21037: LD_INT 8
21039: DOUBLE
21040: EQUAL
21041: IFTRUE 21045
21043: GO 21185
21045: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21046: LD_ADDR_VAR 0 2
21050: PUSH
21051: LD_INT 2
21053: PUSH
21054: LD_INT 4
21056: PUSH
21057: LD_INT 5
21059: PUSH
21060: LD_INT 6
21062: PUSH
21063: LD_INT 7
21065: PUSH
21066: LD_INT 8
21068: PUSH
21069: LD_INT 11
21071: PUSH
21072: LD_INT 12
21074: PUSH
21075: LD_INT 15
21077: PUSH
21078: LD_INT 16
21080: PUSH
21081: LD_INT 20
21083: PUSH
21084: LD_INT 21
21086: PUSH
21087: LD_INT 22
21089: PUSH
21090: LD_INT 23
21092: PUSH
21093: LD_INT 25
21095: PUSH
21096: LD_INT 26
21098: PUSH
21099: LD_INT 30
21101: PUSH
21102: LD_INT 31
21104: PUSH
21105: LD_INT 32
21107: PUSH
21108: LD_INT 36
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 101
21135: PUSH
21136: LD_INT 102
21138: PUSH
21139: LD_INT 103
21141: PUSH
21142: LD_INT 105
21144: PUSH
21145: LD_INT 106
21147: PUSH
21148: LD_INT 108
21150: PUSH
21151: LD_INT 109
21153: PUSH
21154: LD_INT 112
21156: PUSH
21157: LD_INT 116
21159: PUSH
21160: LD_INT 117
21162: PUSH
21163: LD_INT 118
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: ST_TO_ADDR
21183: GO 23438
21185: LD_INT 9
21187: DOUBLE
21188: EQUAL
21189: IFTRUE 21193
21191: GO 21341
21193: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21194: LD_ADDR_VAR 0 2
21198: PUSH
21199: LD_INT 2
21201: PUSH
21202: LD_INT 4
21204: PUSH
21205: LD_INT 5
21207: PUSH
21208: LD_INT 6
21210: PUSH
21211: LD_INT 7
21213: PUSH
21214: LD_INT 8
21216: PUSH
21217: LD_INT 11
21219: PUSH
21220: LD_INT 12
21222: PUSH
21223: LD_INT 15
21225: PUSH
21226: LD_INT 16
21228: PUSH
21229: LD_INT 20
21231: PUSH
21232: LD_INT 21
21234: PUSH
21235: LD_INT 22
21237: PUSH
21238: LD_INT 23
21240: PUSH
21241: LD_INT 25
21243: PUSH
21244: LD_INT 26
21246: PUSH
21247: LD_INT 28
21249: PUSH
21250: LD_INT 30
21252: PUSH
21253: LD_INT 31
21255: PUSH
21256: LD_INT 32
21258: PUSH
21259: LD_INT 36
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 101
21287: PUSH
21288: LD_INT 102
21290: PUSH
21291: LD_INT 103
21293: PUSH
21294: LD_INT 105
21296: PUSH
21297: LD_INT 106
21299: PUSH
21300: LD_INT 108
21302: PUSH
21303: LD_INT 109
21305: PUSH
21306: LD_INT 112
21308: PUSH
21309: LD_INT 114
21311: PUSH
21312: LD_INT 116
21314: PUSH
21315: LD_INT 117
21317: PUSH
21318: LD_INT 118
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: ST_TO_ADDR
21339: GO 23438
21341: LD_INT 10
21343: DOUBLE
21344: EQUAL
21345: IFTRUE 21349
21347: GO 21545
21349: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21350: LD_ADDR_VAR 0 2
21354: PUSH
21355: LD_INT 2
21357: PUSH
21358: LD_INT 4
21360: PUSH
21361: LD_INT 5
21363: PUSH
21364: LD_INT 6
21366: PUSH
21367: LD_INT 7
21369: PUSH
21370: LD_INT 8
21372: PUSH
21373: LD_INT 9
21375: PUSH
21376: LD_INT 10
21378: PUSH
21379: LD_INT 11
21381: PUSH
21382: LD_INT 12
21384: PUSH
21385: LD_INT 13
21387: PUSH
21388: LD_INT 14
21390: PUSH
21391: LD_INT 15
21393: PUSH
21394: LD_INT 16
21396: PUSH
21397: LD_INT 17
21399: PUSH
21400: LD_INT 18
21402: PUSH
21403: LD_INT 19
21405: PUSH
21406: LD_INT 20
21408: PUSH
21409: LD_INT 21
21411: PUSH
21412: LD_INT 22
21414: PUSH
21415: LD_INT 23
21417: PUSH
21418: LD_INT 24
21420: PUSH
21421: LD_INT 25
21423: PUSH
21424: LD_INT 26
21426: PUSH
21427: LD_INT 28
21429: PUSH
21430: LD_INT 30
21432: PUSH
21433: LD_INT 31
21435: PUSH
21436: LD_INT 32
21438: PUSH
21439: LD_INT 36
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 101
21475: PUSH
21476: LD_INT 102
21478: PUSH
21479: LD_INT 103
21481: PUSH
21482: LD_INT 104
21484: PUSH
21485: LD_INT 105
21487: PUSH
21488: LD_INT 106
21490: PUSH
21491: LD_INT 107
21493: PUSH
21494: LD_INT 108
21496: PUSH
21497: LD_INT 109
21499: PUSH
21500: LD_INT 110
21502: PUSH
21503: LD_INT 111
21505: PUSH
21506: LD_INT 112
21508: PUSH
21509: LD_INT 114
21511: PUSH
21512: LD_INT 116
21514: PUSH
21515: LD_INT 117
21517: PUSH
21518: LD_INT 118
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: ST_TO_ADDR
21543: GO 23438
21545: LD_INT 11
21547: DOUBLE
21548: EQUAL
21549: IFTRUE 21553
21551: GO 21757
21553: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21554: LD_ADDR_VAR 0 2
21558: PUSH
21559: LD_INT 2
21561: PUSH
21562: LD_INT 3
21564: PUSH
21565: LD_INT 4
21567: PUSH
21568: LD_INT 5
21570: PUSH
21571: LD_INT 6
21573: PUSH
21574: LD_INT 7
21576: PUSH
21577: LD_INT 8
21579: PUSH
21580: LD_INT 9
21582: PUSH
21583: LD_INT 10
21585: PUSH
21586: LD_INT 11
21588: PUSH
21589: LD_INT 12
21591: PUSH
21592: LD_INT 13
21594: PUSH
21595: LD_INT 14
21597: PUSH
21598: LD_INT 15
21600: PUSH
21601: LD_INT 16
21603: PUSH
21604: LD_INT 17
21606: PUSH
21607: LD_INT 18
21609: PUSH
21610: LD_INT 19
21612: PUSH
21613: LD_INT 20
21615: PUSH
21616: LD_INT 21
21618: PUSH
21619: LD_INT 22
21621: PUSH
21622: LD_INT 23
21624: PUSH
21625: LD_INT 24
21627: PUSH
21628: LD_INT 25
21630: PUSH
21631: LD_INT 26
21633: PUSH
21634: LD_INT 28
21636: PUSH
21637: LD_INT 30
21639: PUSH
21640: LD_INT 31
21642: PUSH
21643: LD_INT 32
21645: PUSH
21646: LD_INT 34
21648: PUSH
21649: LD_INT 36
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 101
21687: PUSH
21688: LD_INT 102
21690: PUSH
21691: LD_INT 103
21693: PUSH
21694: LD_INT 104
21696: PUSH
21697: LD_INT 105
21699: PUSH
21700: LD_INT 106
21702: PUSH
21703: LD_INT 107
21705: PUSH
21706: LD_INT 108
21708: PUSH
21709: LD_INT 109
21711: PUSH
21712: LD_INT 110
21714: PUSH
21715: LD_INT 111
21717: PUSH
21718: LD_INT 112
21720: PUSH
21721: LD_INT 114
21723: PUSH
21724: LD_INT 116
21726: PUSH
21727: LD_INT 117
21729: PUSH
21730: LD_INT 118
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: ST_TO_ADDR
21755: GO 23438
21757: LD_INT 12
21759: DOUBLE
21760: EQUAL
21761: IFTRUE 21765
21763: GO 21985
21765: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21766: LD_ADDR_VAR 0 2
21770: PUSH
21771: LD_INT 1
21773: PUSH
21774: LD_INT 2
21776: PUSH
21777: LD_INT 3
21779: PUSH
21780: LD_INT 4
21782: PUSH
21783: LD_INT 5
21785: PUSH
21786: LD_INT 6
21788: PUSH
21789: LD_INT 7
21791: PUSH
21792: LD_INT 8
21794: PUSH
21795: LD_INT 9
21797: PUSH
21798: LD_INT 10
21800: PUSH
21801: LD_INT 11
21803: PUSH
21804: LD_INT 12
21806: PUSH
21807: LD_INT 13
21809: PUSH
21810: LD_INT 14
21812: PUSH
21813: LD_INT 15
21815: PUSH
21816: LD_INT 16
21818: PUSH
21819: LD_INT 17
21821: PUSH
21822: LD_INT 18
21824: PUSH
21825: LD_INT 19
21827: PUSH
21828: LD_INT 20
21830: PUSH
21831: LD_INT 21
21833: PUSH
21834: LD_INT 22
21836: PUSH
21837: LD_INT 23
21839: PUSH
21840: LD_INT 24
21842: PUSH
21843: LD_INT 25
21845: PUSH
21846: LD_INT 26
21848: PUSH
21849: LD_INT 27
21851: PUSH
21852: LD_INT 28
21854: PUSH
21855: LD_INT 30
21857: PUSH
21858: LD_INT 31
21860: PUSH
21861: LD_INT 32
21863: PUSH
21864: LD_INT 33
21866: PUSH
21867: LD_INT 34
21869: PUSH
21870: LD_INT 36
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 101
21911: PUSH
21912: LD_INT 102
21914: PUSH
21915: LD_INT 103
21917: PUSH
21918: LD_INT 104
21920: PUSH
21921: LD_INT 105
21923: PUSH
21924: LD_INT 106
21926: PUSH
21927: LD_INT 107
21929: PUSH
21930: LD_INT 108
21932: PUSH
21933: LD_INT 109
21935: PUSH
21936: LD_INT 110
21938: PUSH
21939: LD_INT 111
21941: PUSH
21942: LD_INT 112
21944: PUSH
21945: LD_INT 113
21947: PUSH
21948: LD_INT 114
21950: PUSH
21951: LD_INT 116
21953: PUSH
21954: LD_INT 117
21956: PUSH
21957: LD_INT 118
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: ST_TO_ADDR
21983: GO 23438
21985: LD_INT 13
21987: DOUBLE
21988: EQUAL
21989: IFTRUE 21993
21991: GO 22201
21993: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21994: LD_ADDR_VAR 0 2
21998: PUSH
21999: LD_INT 1
22001: PUSH
22002: LD_INT 2
22004: PUSH
22005: LD_INT 3
22007: PUSH
22008: LD_INT 4
22010: PUSH
22011: LD_INT 5
22013: PUSH
22014: LD_INT 8
22016: PUSH
22017: LD_INT 9
22019: PUSH
22020: LD_INT 10
22022: PUSH
22023: LD_INT 11
22025: PUSH
22026: LD_INT 12
22028: PUSH
22029: LD_INT 14
22031: PUSH
22032: LD_INT 15
22034: PUSH
22035: LD_INT 16
22037: PUSH
22038: LD_INT 17
22040: PUSH
22041: LD_INT 18
22043: PUSH
22044: LD_INT 19
22046: PUSH
22047: LD_INT 20
22049: PUSH
22050: LD_INT 21
22052: PUSH
22053: LD_INT 22
22055: PUSH
22056: LD_INT 23
22058: PUSH
22059: LD_INT 24
22061: PUSH
22062: LD_INT 25
22064: PUSH
22065: LD_INT 26
22067: PUSH
22068: LD_INT 27
22070: PUSH
22071: LD_INT 28
22073: PUSH
22074: LD_INT 30
22076: PUSH
22077: LD_INT 31
22079: PUSH
22080: LD_INT 32
22082: PUSH
22083: LD_INT 33
22085: PUSH
22086: LD_INT 34
22088: PUSH
22089: LD_INT 36
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 101
22127: PUSH
22128: LD_INT 102
22130: PUSH
22131: LD_INT 103
22133: PUSH
22134: LD_INT 104
22136: PUSH
22137: LD_INT 105
22139: PUSH
22140: LD_INT 106
22142: PUSH
22143: LD_INT 107
22145: PUSH
22146: LD_INT 108
22148: PUSH
22149: LD_INT 109
22151: PUSH
22152: LD_INT 110
22154: PUSH
22155: LD_INT 111
22157: PUSH
22158: LD_INT 112
22160: PUSH
22161: LD_INT 113
22163: PUSH
22164: LD_INT 114
22166: PUSH
22167: LD_INT 116
22169: PUSH
22170: LD_INT 117
22172: PUSH
22173: LD_INT 118
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: ST_TO_ADDR
22199: GO 23438
22201: LD_INT 14
22203: DOUBLE
22204: EQUAL
22205: IFTRUE 22209
22207: GO 22433
22209: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22210: LD_ADDR_VAR 0 2
22214: PUSH
22215: LD_INT 1
22217: PUSH
22218: LD_INT 2
22220: PUSH
22221: LD_INT 3
22223: PUSH
22224: LD_INT 4
22226: PUSH
22227: LD_INT 5
22229: PUSH
22230: LD_INT 6
22232: PUSH
22233: LD_INT 7
22235: PUSH
22236: LD_INT 8
22238: PUSH
22239: LD_INT 9
22241: PUSH
22242: LD_INT 10
22244: PUSH
22245: LD_INT 11
22247: PUSH
22248: LD_INT 12
22250: PUSH
22251: LD_INT 13
22253: PUSH
22254: LD_INT 14
22256: PUSH
22257: LD_INT 15
22259: PUSH
22260: LD_INT 16
22262: PUSH
22263: LD_INT 17
22265: PUSH
22266: LD_INT 18
22268: PUSH
22269: LD_INT 19
22271: PUSH
22272: LD_INT 20
22274: PUSH
22275: LD_INT 21
22277: PUSH
22278: LD_INT 22
22280: PUSH
22281: LD_INT 23
22283: PUSH
22284: LD_INT 24
22286: PUSH
22287: LD_INT 25
22289: PUSH
22290: LD_INT 26
22292: PUSH
22293: LD_INT 27
22295: PUSH
22296: LD_INT 28
22298: PUSH
22299: LD_INT 29
22301: PUSH
22302: LD_INT 30
22304: PUSH
22305: LD_INT 31
22307: PUSH
22308: LD_INT 32
22310: PUSH
22311: LD_INT 33
22313: PUSH
22314: LD_INT 34
22316: PUSH
22317: LD_INT 36
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 101
22359: PUSH
22360: LD_INT 102
22362: PUSH
22363: LD_INT 103
22365: PUSH
22366: LD_INT 104
22368: PUSH
22369: LD_INT 105
22371: PUSH
22372: LD_INT 106
22374: PUSH
22375: LD_INT 107
22377: PUSH
22378: LD_INT 108
22380: PUSH
22381: LD_INT 109
22383: PUSH
22384: LD_INT 110
22386: PUSH
22387: LD_INT 111
22389: PUSH
22390: LD_INT 112
22392: PUSH
22393: LD_INT 113
22395: PUSH
22396: LD_INT 114
22398: PUSH
22399: LD_INT 116
22401: PUSH
22402: LD_INT 117
22404: PUSH
22405: LD_INT 118
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: ST_TO_ADDR
22431: GO 23438
22433: LD_INT 15
22435: DOUBLE
22436: EQUAL
22437: IFTRUE 22441
22439: GO 22665
22441: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22442: LD_ADDR_VAR 0 2
22446: PUSH
22447: LD_INT 1
22449: PUSH
22450: LD_INT 2
22452: PUSH
22453: LD_INT 3
22455: PUSH
22456: LD_INT 4
22458: PUSH
22459: LD_INT 5
22461: PUSH
22462: LD_INT 6
22464: PUSH
22465: LD_INT 7
22467: PUSH
22468: LD_INT 8
22470: PUSH
22471: LD_INT 9
22473: PUSH
22474: LD_INT 10
22476: PUSH
22477: LD_INT 11
22479: PUSH
22480: LD_INT 12
22482: PUSH
22483: LD_INT 13
22485: PUSH
22486: LD_INT 14
22488: PUSH
22489: LD_INT 15
22491: PUSH
22492: LD_INT 16
22494: PUSH
22495: LD_INT 17
22497: PUSH
22498: LD_INT 18
22500: PUSH
22501: LD_INT 19
22503: PUSH
22504: LD_INT 20
22506: PUSH
22507: LD_INT 21
22509: PUSH
22510: LD_INT 22
22512: PUSH
22513: LD_INT 23
22515: PUSH
22516: LD_INT 24
22518: PUSH
22519: LD_INT 25
22521: PUSH
22522: LD_INT 26
22524: PUSH
22525: LD_INT 27
22527: PUSH
22528: LD_INT 28
22530: PUSH
22531: LD_INT 29
22533: PUSH
22534: LD_INT 30
22536: PUSH
22537: LD_INT 31
22539: PUSH
22540: LD_INT 32
22542: PUSH
22543: LD_INT 33
22545: PUSH
22546: LD_INT 34
22548: PUSH
22549: LD_INT 36
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 101
22591: PUSH
22592: LD_INT 102
22594: PUSH
22595: LD_INT 103
22597: PUSH
22598: LD_INT 104
22600: PUSH
22601: LD_INT 105
22603: PUSH
22604: LD_INT 106
22606: PUSH
22607: LD_INT 107
22609: PUSH
22610: LD_INT 108
22612: PUSH
22613: LD_INT 109
22615: PUSH
22616: LD_INT 110
22618: PUSH
22619: LD_INT 111
22621: PUSH
22622: LD_INT 112
22624: PUSH
22625: LD_INT 113
22627: PUSH
22628: LD_INT 114
22630: PUSH
22631: LD_INT 116
22633: PUSH
22634: LD_INT 117
22636: PUSH
22637: LD_INT 118
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: ST_TO_ADDR
22663: GO 23438
22665: LD_INT 16
22667: DOUBLE
22668: EQUAL
22669: IFTRUE 22673
22671: GO 22809
22673: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22674: LD_ADDR_VAR 0 2
22678: PUSH
22679: LD_INT 2
22681: PUSH
22682: LD_INT 4
22684: PUSH
22685: LD_INT 5
22687: PUSH
22688: LD_INT 7
22690: PUSH
22691: LD_INT 11
22693: PUSH
22694: LD_INT 12
22696: PUSH
22697: LD_INT 15
22699: PUSH
22700: LD_INT 16
22702: PUSH
22703: LD_INT 20
22705: PUSH
22706: LD_INT 21
22708: PUSH
22709: LD_INT 22
22711: PUSH
22712: LD_INT 23
22714: PUSH
22715: LD_INT 25
22717: PUSH
22718: LD_INT 26
22720: PUSH
22721: LD_INT 30
22723: PUSH
22724: LD_INT 31
22726: PUSH
22727: LD_INT 32
22729: PUSH
22730: LD_INT 33
22732: PUSH
22733: LD_INT 34
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 101
22759: PUSH
22760: LD_INT 102
22762: PUSH
22763: LD_INT 103
22765: PUSH
22766: LD_INT 106
22768: PUSH
22769: LD_INT 108
22771: PUSH
22772: LD_INT 112
22774: PUSH
22775: LD_INT 113
22777: PUSH
22778: LD_INT 114
22780: PUSH
22781: LD_INT 116
22783: PUSH
22784: LD_INT 117
22786: PUSH
22787: LD_INT 118
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: ST_TO_ADDR
22807: GO 23438
22809: LD_INT 17
22811: DOUBLE
22812: EQUAL
22813: IFTRUE 22817
22815: GO 23041
22817: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22818: LD_ADDR_VAR 0 2
22822: PUSH
22823: LD_INT 1
22825: PUSH
22826: LD_INT 2
22828: PUSH
22829: LD_INT 3
22831: PUSH
22832: LD_INT 4
22834: PUSH
22835: LD_INT 5
22837: PUSH
22838: LD_INT 6
22840: PUSH
22841: LD_INT 7
22843: PUSH
22844: LD_INT 8
22846: PUSH
22847: LD_INT 9
22849: PUSH
22850: LD_INT 10
22852: PUSH
22853: LD_INT 11
22855: PUSH
22856: LD_INT 12
22858: PUSH
22859: LD_INT 13
22861: PUSH
22862: LD_INT 14
22864: PUSH
22865: LD_INT 15
22867: PUSH
22868: LD_INT 16
22870: PUSH
22871: LD_INT 17
22873: PUSH
22874: LD_INT 18
22876: PUSH
22877: LD_INT 19
22879: PUSH
22880: LD_INT 20
22882: PUSH
22883: LD_INT 21
22885: PUSH
22886: LD_INT 22
22888: PUSH
22889: LD_INT 23
22891: PUSH
22892: LD_INT 24
22894: PUSH
22895: LD_INT 25
22897: PUSH
22898: LD_INT 26
22900: PUSH
22901: LD_INT 27
22903: PUSH
22904: LD_INT 28
22906: PUSH
22907: LD_INT 29
22909: PUSH
22910: LD_INT 30
22912: PUSH
22913: LD_INT 31
22915: PUSH
22916: LD_INT 32
22918: PUSH
22919: LD_INT 33
22921: PUSH
22922: LD_INT 34
22924: PUSH
22925: LD_INT 36
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 101
22967: PUSH
22968: LD_INT 102
22970: PUSH
22971: LD_INT 103
22973: PUSH
22974: LD_INT 104
22976: PUSH
22977: LD_INT 105
22979: PUSH
22980: LD_INT 106
22982: PUSH
22983: LD_INT 107
22985: PUSH
22986: LD_INT 108
22988: PUSH
22989: LD_INT 109
22991: PUSH
22992: LD_INT 110
22994: PUSH
22995: LD_INT 111
22997: PUSH
22998: LD_INT 112
23000: PUSH
23001: LD_INT 113
23003: PUSH
23004: LD_INT 114
23006: PUSH
23007: LD_INT 116
23009: PUSH
23010: LD_INT 117
23012: PUSH
23013: LD_INT 118
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: ST_TO_ADDR
23039: GO 23438
23041: LD_INT 18
23043: DOUBLE
23044: EQUAL
23045: IFTRUE 23049
23047: GO 23197
23049: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23050: LD_ADDR_VAR 0 2
23054: PUSH
23055: LD_INT 2
23057: PUSH
23058: LD_INT 4
23060: PUSH
23061: LD_INT 5
23063: PUSH
23064: LD_INT 7
23066: PUSH
23067: LD_INT 11
23069: PUSH
23070: LD_INT 12
23072: PUSH
23073: LD_INT 15
23075: PUSH
23076: LD_INT 16
23078: PUSH
23079: LD_INT 20
23081: PUSH
23082: LD_INT 21
23084: PUSH
23085: LD_INT 22
23087: PUSH
23088: LD_INT 23
23090: PUSH
23091: LD_INT 25
23093: PUSH
23094: LD_INT 26
23096: PUSH
23097: LD_INT 30
23099: PUSH
23100: LD_INT 31
23102: PUSH
23103: LD_INT 32
23105: PUSH
23106: LD_INT 33
23108: PUSH
23109: LD_INT 34
23111: PUSH
23112: LD_INT 35
23114: PUSH
23115: LD_INT 36
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 101
23143: PUSH
23144: LD_INT 102
23146: PUSH
23147: LD_INT 103
23149: PUSH
23150: LD_INT 106
23152: PUSH
23153: LD_INT 108
23155: PUSH
23156: LD_INT 112
23158: PUSH
23159: LD_INT 113
23161: PUSH
23162: LD_INT 114
23164: PUSH
23165: LD_INT 115
23167: PUSH
23168: LD_INT 116
23170: PUSH
23171: LD_INT 117
23173: PUSH
23174: LD_INT 118
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: ST_TO_ADDR
23195: GO 23438
23197: LD_INT 19
23199: DOUBLE
23200: EQUAL
23201: IFTRUE 23205
23203: GO 23437
23205: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23206: LD_ADDR_VAR 0 2
23210: PUSH
23211: LD_INT 1
23213: PUSH
23214: LD_INT 2
23216: PUSH
23217: LD_INT 3
23219: PUSH
23220: LD_INT 4
23222: PUSH
23223: LD_INT 5
23225: PUSH
23226: LD_INT 6
23228: PUSH
23229: LD_INT 7
23231: PUSH
23232: LD_INT 8
23234: PUSH
23235: LD_INT 9
23237: PUSH
23238: LD_INT 10
23240: PUSH
23241: LD_INT 11
23243: PUSH
23244: LD_INT 12
23246: PUSH
23247: LD_INT 13
23249: PUSH
23250: LD_INT 14
23252: PUSH
23253: LD_INT 15
23255: PUSH
23256: LD_INT 16
23258: PUSH
23259: LD_INT 17
23261: PUSH
23262: LD_INT 18
23264: PUSH
23265: LD_INT 19
23267: PUSH
23268: LD_INT 20
23270: PUSH
23271: LD_INT 21
23273: PUSH
23274: LD_INT 22
23276: PUSH
23277: LD_INT 23
23279: PUSH
23280: LD_INT 24
23282: PUSH
23283: LD_INT 25
23285: PUSH
23286: LD_INT 26
23288: PUSH
23289: LD_INT 27
23291: PUSH
23292: LD_INT 28
23294: PUSH
23295: LD_INT 29
23297: PUSH
23298: LD_INT 30
23300: PUSH
23301: LD_INT 31
23303: PUSH
23304: LD_INT 32
23306: PUSH
23307: LD_INT 33
23309: PUSH
23310: LD_INT 34
23312: PUSH
23313: LD_INT 35
23315: PUSH
23316: LD_INT 36
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 101
23359: PUSH
23360: LD_INT 102
23362: PUSH
23363: LD_INT 103
23365: PUSH
23366: LD_INT 104
23368: PUSH
23369: LD_INT 105
23371: PUSH
23372: LD_INT 106
23374: PUSH
23375: LD_INT 107
23377: PUSH
23378: LD_INT 108
23380: PUSH
23381: LD_INT 109
23383: PUSH
23384: LD_INT 110
23386: PUSH
23387: LD_INT 111
23389: PUSH
23390: LD_INT 112
23392: PUSH
23393: LD_INT 113
23395: PUSH
23396: LD_INT 114
23398: PUSH
23399: LD_INT 115
23401: PUSH
23402: LD_INT 116
23404: PUSH
23405: LD_INT 117
23407: PUSH
23408: LD_INT 118
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: ST_TO_ADDR
23435: GO 23438
23437: POP
// end else
23438: GO 23669
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23440: LD_ADDR_VAR 0 2
23444: PUSH
23445: LD_INT 1
23447: PUSH
23448: LD_INT 2
23450: PUSH
23451: LD_INT 3
23453: PUSH
23454: LD_INT 4
23456: PUSH
23457: LD_INT 5
23459: PUSH
23460: LD_INT 6
23462: PUSH
23463: LD_INT 7
23465: PUSH
23466: LD_INT 8
23468: PUSH
23469: LD_INT 9
23471: PUSH
23472: LD_INT 10
23474: PUSH
23475: LD_INT 11
23477: PUSH
23478: LD_INT 12
23480: PUSH
23481: LD_INT 13
23483: PUSH
23484: LD_INT 14
23486: PUSH
23487: LD_INT 15
23489: PUSH
23490: LD_INT 16
23492: PUSH
23493: LD_INT 17
23495: PUSH
23496: LD_INT 18
23498: PUSH
23499: LD_INT 19
23501: PUSH
23502: LD_INT 20
23504: PUSH
23505: LD_INT 21
23507: PUSH
23508: LD_INT 22
23510: PUSH
23511: LD_INT 23
23513: PUSH
23514: LD_INT 24
23516: PUSH
23517: LD_INT 25
23519: PUSH
23520: LD_INT 26
23522: PUSH
23523: LD_INT 27
23525: PUSH
23526: LD_INT 28
23528: PUSH
23529: LD_INT 29
23531: PUSH
23532: LD_INT 30
23534: PUSH
23535: LD_INT 31
23537: PUSH
23538: LD_INT 32
23540: PUSH
23541: LD_INT 33
23543: PUSH
23544: LD_INT 34
23546: PUSH
23547: LD_INT 35
23549: PUSH
23550: LD_INT 36
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 101
23593: PUSH
23594: LD_INT 102
23596: PUSH
23597: LD_INT 103
23599: PUSH
23600: LD_INT 104
23602: PUSH
23603: LD_INT 105
23605: PUSH
23606: LD_INT 106
23608: PUSH
23609: LD_INT 107
23611: PUSH
23612: LD_INT 108
23614: PUSH
23615: LD_INT 109
23617: PUSH
23618: LD_INT 110
23620: PUSH
23621: LD_INT 111
23623: PUSH
23624: LD_INT 112
23626: PUSH
23627: LD_INT 113
23629: PUSH
23630: LD_INT 114
23632: PUSH
23633: LD_INT 115
23635: PUSH
23636: LD_INT 116
23638: PUSH
23639: LD_INT 117
23641: PUSH
23642: LD_INT 118
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: ST_TO_ADDR
// if result then
23669: LD_VAR 0 2
23673: IFFALSE 24459
// begin normal :=  ;
23675: LD_ADDR_VAR 0 5
23679: PUSH
23680: LD_STRING 
23682: ST_TO_ADDR
// hardcore :=  ;
23683: LD_ADDR_VAR 0 6
23687: PUSH
23688: LD_STRING 
23690: ST_TO_ADDR
// active :=  ;
23691: LD_ADDR_VAR 0 7
23695: PUSH
23696: LD_STRING 
23698: ST_TO_ADDR
// for i = 1 to normalCounter do
23699: LD_ADDR_VAR 0 8
23703: PUSH
23704: DOUBLE
23705: LD_INT 1
23707: DEC
23708: ST_TO_ADDR
23709: LD_EXP 53
23713: PUSH
23714: FOR_TO
23715: IFFALSE 23816
// begin tmp := 0 ;
23717: LD_ADDR_VAR 0 3
23721: PUSH
23722: LD_STRING 0
23724: ST_TO_ADDR
// if result [ 1 ] then
23725: LD_VAR 0 2
23729: PUSH
23730: LD_INT 1
23732: ARRAY
23733: IFFALSE 23798
// if result [ 1 ] [ 1 ] = i then
23735: LD_VAR 0 2
23739: PUSH
23740: LD_INT 1
23742: ARRAY
23743: PUSH
23744: LD_INT 1
23746: ARRAY
23747: PUSH
23748: LD_VAR 0 8
23752: EQUAL
23753: IFFALSE 23798
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23755: LD_ADDR_VAR 0 2
23759: PUSH
23760: LD_VAR 0 2
23764: PPUSH
23765: LD_INT 1
23767: PPUSH
23768: LD_VAR 0 2
23772: PUSH
23773: LD_INT 1
23775: ARRAY
23776: PPUSH
23777: LD_INT 1
23779: PPUSH
23780: CALL_OW 3
23784: PPUSH
23785: CALL_OW 1
23789: ST_TO_ADDR
// tmp := 1 ;
23790: LD_ADDR_VAR 0 3
23794: PUSH
23795: LD_STRING 1
23797: ST_TO_ADDR
// end ; normal := normal & tmp ;
23798: LD_ADDR_VAR 0 5
23802: PUSH
23803: LD_VAR 0 5
23807: PUSH
23808: LD_VAR 0 3
23812: STR
23813: ST_TO_ADDR
// end ;
23814: GO 23714
23816: POP
23817: POP
// for i = 1 to hardcoreCounter do
23818: LD_ADDR_VAR 0 8
23822: PUSH
23823: DOUBLE
23824: LD_INT 1
23826: DEC
23827: ST_TO_ADDR
23828: LD_EXP 54
23832: PUSH
23833: FOR_TO
23834: IFFALSE 23939
// begin tmp := 0 ;
23836: LD_ADDR_VAR 0 3
23840: PUSH
23841: LD_STRING 0
23843: ST_TO_ADDR
// if result [ 2 ] then
23844: LD_VAR 0 2
23848: PUSH
23849: LD_INT 2
23851: ARRAY
23852: IFFALSE 23921
// if result [ 2 ] [ 1 ] = 100 + i then
23854: LD_VAR 0 2
23858: PUSH
23859: LD_INT 2
23861: ARRAY
23862: PUSH
23863: LD_INT 1
23865: ARRAY
23866: PUSH
23867: LD_INT 100
23869: PUSH
23870: LD_VAR 0 8
23874: PLUS
23875: EQUAL
23876: IFFALSE 23921
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23878: LD_ADDR_VAR 0 2
23882: PUSH
23883: LD_VAR 0 2
23887: PPUSH
23888: LD_INT 2
23890: PPUSH
23891: LD_VAR 0 2
23895: PUSH
23896: LD_INT 2
23898: ARRAY
23899: PPUSH
23900: LD_INT 1
23902: PPUSH
23903: CALL_OW 3
23907: PPUSH
23908: CALL_OW 1
23912: ST_TO_ADDR
// tmp := 1 ;
23913: LD_ADDR_VAR 0 3
23917: PUSH
23918: LD_STRING 1
23920: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23921: LD_ADDR_VAR 0 6
23925: PUSH
23926: LD_VAR 0 6
23930: PUSH
23931: LD_VAR 0 3
23935: STR
23936: ST_TO_ADDR
// end ;
23937: GO 23833
23939: POP
23940: POP
// if isGameLoad then
23941: LD_VAR 0 1
23945: IFFALSE 24420
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23947: LD_ADDR_VAR 0 4
23951: PUSH
23952: LD_EXP 57
23956: PUSH
23957: LD_EXP 56
23961: PUSH
23962: LD_EXP 58
23966: PUSH
23967: LD_EXP 55
23971: PUSH
23972: LD_EXP 59
23976: PUSH
23977: LD_EXP 60
23981: PUSH
23982: LD_EXP 61
23986: PUSH
23987: LD_EXP 62
23991: PUSH
23992: LD_EXP 63
23996: PUSH
23997: LD_EXP 64
24001: PUSH
24002: LD_EXP 65
24006: PUSH
24007: LD_EXP 66
24011: PUSH
24012: LD_EXP 67
24016: PUSH
24017: LD_EXP 68
24021: PUSH
24022: LD_EXP 76
24026: PUSH
24027: LD_EXP 77
24031: PUSH
24032: LD_EXP 78
24036: PUSH
24037: LD_EXP 79
24041: PUSH
24042: LD_EXP 81
24046: PUSH
24047: LD_EXP 82
24051: PUSH
24052: LD_EXP 83
24056: PUSH
24057: LD_EXP 86
24061: PUSH
24062: LD_EXP 88
24066: PUSH
24067: LD_EXP 89
24071: PUSH
24072: LD_EXP 90
24076: PUSH
24077: LD_EXP 92
24081: PUSH
24082: LD_EXP 93
24086: PUSH
24087: LD_EXP 96
24091: PUSH
24092: LD_EXP 97
24096: PUSH
24097: LD_EXP 98
24101: PUSH
24102: LD_EXP 99
24106: PUSH
24107: LD_EXP 100
24111: PUSH
24112: LD_EXP 101
24116: PUSH
24117: LD_EXP 102
24121: PUSH
24122: LD_EXP 103
24126: PUSH
24127: LD_EXP 104
24131: PUSH
24132: LD_EXP 69
24136: PUSH
24137: LD_EXP 70
24141: PUSH
24142: LD_EXP 73
24146: PUSH
24147: LD_EXP 74
24151: PUSH
24152: LD_EXP 75
24156: PUSH
24157: LD_EXP 71
24161: PUSH
24162: LD_EXP 72
24166: PUSH
24167: LD_EXP 80
24171: PUSH
24172: LD_EXP 84
24176: PUSH
24177: LD_EXP 85
24181: PUSH
24182: LD_EXP 87
24186: PUSH
24187: LD_EXP 91
24191: PUSH
24192: LD_EXP 94
24196: PUSH
24197: LD_EXP 95
24201: PUSH
24202: LD_EXP 105
24206: PUSH
24207: LD_EXP 106
24211: PUSH
24212: LD_EXP 107
24216: PUSH
24217: LD_EXP 108
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: ST_TO_ADDR
// tmp :=  ;
24278: LD_ADDR_VAR 0 3
24282: PUSH
24283: LD_STRING 
24285: ST_TO_ADDR
// for i = 1 to normalCounter do
24286: LD_ADDR_VAR 0 8
24290: PUSH
24291: DOUBLE
24292: LD_INT 1
24294: DEC
24295: ST_TO_ADDR
24296: LD_EXP 53
24300: PUSH
24301: FOR_TO
24302: IFFALSE 24338
// begin if flags [ i ] then
24304: LD_VAR 0 4
24308: PUSH
24309: LD_VAR 0 8
24313: ARRAY
24314: IFFALSE 24336
// tmp := tmp & i & ; ;
24316: LD_ADDR_VAR 0 3
24320: PUSH
24321: LD_VAR 0 3
24325: PUSH
24326: LD_VAR 0 8
24330: STR
24331: PUSH
24332: LD_STRING ;
24334: STR
24335: ST_TO_ADDR
// end ;
24336: GO 24301
24338: POP
24339: POP
// for i = 1 to hardcoreCounter do
24340: LD_ADDR_VAR 0 8
24344: PUSH
24345: DOUBLE
24346: LD_INT 1
24348: DEC
24349: ST_TO_ADDR
24350: LD_EXP 54
24354: PUSH
24355: FOR_TO
24356: IFFALSE 24402
// begin if flags [ normalCounter + i ] then
24358: LD_VAR 0 4
24362: PUSH
24363: LD_EXP 53
24367: PUSH
24368: LD_VAR 0 8
24372: PLUS
24373: ARRAY
24374: IFFALSE 24400
// tmp := tmp & ( 100 + i ) & ; ;
24376: LD_ADDR_VAR 0 3
24380: PUSH
24381: LD_VAR 0 3
24385: PUSH
24386: LD_INT 100
24388: PUSH
24389: LD_VAR 0 8
24393: PLUS
24394: STR
24395: PUSH
24396: LD_STRING ;
24398: STR
24399: ST_TO_ADDR
// end ;
24400: GO 24355
24402: POP
24403: POP
// if tmp then
24404: LD_VAR 0 3
24408: IFFALSE 24420
// active := tmp ;
24410: LD_ADDR_VAR 0 7
24414: PUSH
24415: LD_VAR 0 3
24419: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24420: LD_STRING getStreamItemsFromMission("
24422: PUSH
24423: LD_VAR 0 5
24427: STR
24428: PUSH
24429: LD_STRING ","
24431: STR
24432: PUSH
24433: LD_VAR 0 6
24437: STR
24438: PUSH
24439: LD_STRING ","
24441: STR
24442: PUSH
24443: LD_VAR 0 7
24447: STR
24448: PUSH
24449: LD_STRING ")
24451: STR
24452: PPUSH
24453: CALL_OW 559
// end else
24457: GO 24466
// ToLua ( getStreamItemsFromMission("","","") ) ;
24459: LD_STRING getStreamItemsFromMission("","","")
24461: PPUSH
24462: CALL_OW 559
// end ;
24466: LD_VAR 0 2
24470: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24471: LD_EXP 52
24475: PUSH
24476: LD_EXP 57
24480: AND
24481: IFFALSE 24605
24483: GO 24485
24485: DISABLE
24486: LD_INT 0
24488: PPUSH
24489: PPUSH
// begin enable ;
24490: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24491: LD_ADDR_VAR 0 2
24495: PUSH
24496: LD_INT 22
24498: PUSH
24499: LD_OWVAR 2
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 2
24510: PUSH
24511: LD_INT 34
24513: PUSH
24514: LD_INT 7
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 34
24523: PUSH
24524: LD_INT 45
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 34
24533: PUSH
24534: LD_INT 28
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 34
24543: PUSH
24544: LD_INT 47
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PPUSH
24562: CALL_OW 69
24566: ST_TO_ADDR
// if not tmp then
24567: LD_VAR 0 2
24571: NOT
24572: IFFALSE 24576
// exit ;
24574: GO 24605
// for i in tmp do
24576: LD_ADDR_VAR 0 1
24580: PUSH
24581: LD_VAR 0 2
24585: PUSH
24586: FOR_IN
24587: IFFALSE 24603
// begin SetLives ( i , 0 ) ;
24589: LD_VAR 0 1
24593: PPUSH
24594: LD_INT 0
24596: PPUSH
24597: CALL_OW 234
// end ;
24601: GO 24586
24603: POP
24604: POP
// end ;
24605: PPOPN 2
24607: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24608: LD_EXP 52
24612: PUSH
24613: LD_EXP 58
24617: AND
24618: IFFALSE 24702
24620: GO 24622
24622: DISABLE
24623: LD_INT 0
24625: PPUSH
24626: PPUSH
// begin enable ;
24627: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24628: LD_ADDR_VAR 0 2
24632: PUSH
24633: LD_INT 22
24635: PUSH
24636: LD_OWVAR 2
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 32
24647: PUSH
24648: LD_INT 3
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PPUSH
24659: CALL_OW 69
24663: ST_TO_ADDR
// if not tmp then
24664: LD_VAR 0 2
24668: NOT
24669: IFFALSE 24673
// exit ;
24671: GO 24702
// for i in tmp do
24673: LD_ADDR_VAR 0 1
24677: PUSH
24678: LD_VAR 0 2
24682: PUSH
24683: FOR_IN
24684: IFFALSE 24700
// begin SetLives ( i , 0 ) ;
24686: LD_VAR 0 1
24690: PPUSH
24691: LD_INT 0
24693: PPUSH
24694: CALL_OW 234
// end ;
24698: GO 24683
24700: POP
24701: POP
// end ;
24702: PPOPN 2
24704: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24705: LD_EXP 52
24709: PUSH
24710: LD_EXP 55
24714: AND
24715: IFFALSE 24808
24717: GO 24719
24719: DISABLE
24720: LD_INT 0
24722: PPUSH
// begin enable ;
24723: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24724: LD_ADDR_VAR 0 1
24728: PUSH
24729: LD_INT 22
24731: PUSH
24732: LD_OWVAR 2
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 2
24743: PUSH
24744: LD_INT 25
24746: PUSH
24747: LD_INT 5
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 25
24756: PUSH
24757: LD_INT 9
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 25
24766: PUSH
24767: LD_INT 8
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PPUSH
24784: CALL_OW 69
24788: PUSH
24789: FOR_IN
24790: IFFALSE 24806
// begin SetClass ( i , 1 ) ;
24792: LD_VAR 0 1
24796: PPUSH
24797: LD_INT 1
24799: PPUSH
24800: CALL_OW 336
// end ;
24804: GO 24789
24806: POP
24807: POP
// end ;
24808: PPOPN 1
24810: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24811: LD_EXP 52
24815: PUSH
24816: LD_EXP 56
24820: AND
24821: PUSH
24822: LD_OWVAR 65
24826: PUSH
24827: LD_INT 7
24829: LESS
24830: AND
24831: IFFALSE 24845
24833: GO 24835
24835: DISABLE
// begin enable ;
24836: ENABLE
// game_speed := 7 ;
24837: LD_ADDR_OWVAR 65
24841: PUSH
24842: LD_INT 7
24844: ST_TO_ADDR
// end ;
24845: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24846: LD_EXP 52
24850: PUSH
24851: LD_EXP 59
24855: AND
24856: IFFALSE 25058
24858: GO 24860
24860: DISABLE
24861: LD_INT 0
24863: PPUSH
24864: PPUSH
24865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24866: LD_ADDR_VAR 0 3
24870: PUSH
24871: LD_INT 81
24873: PUSH
24874: LD_OWVAR 2
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 21
24885: PUSH
24886: LD_INT 1
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PPUSH
24897: CALL_OW 69
24901: ST_TO_ADDR
// if not tmp then
24902: LD_VAR 0 3
24906: NOT
24907: IFFALSE 24911
// exit ;
24909: GO 25058
// if tmp > 5 then
24911: LD_VAR 0 3
24915: PUSH
24916: LD_INT 5
24918: GREATER
24919: IFFALSE 24931
// k := 5 else
24921: LD_ADDR_VAR 0 2
24925: PUSH
24926: LD_INT 5
24928: ST_TO_ADDR
24929: GO 24941
// k := tmp ;
24931: LD_ADDR_VAR 0 2
24935: PUSH
24936: LD_VAR 0 3
24940: ST_TO_ADDR
// for i := 1 to k do
24941: LD_ADDR_VAR 0 1
24945: PUSH
24946: DOUBLE
24947: LD_INT 1
24949: DEC
24950: ST_TO_ADDR
24951: LD_VAR 0 2
24955: PUSH
24956: FOR_TO
24957: IFFALSE 25056
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24959: LD_VAR 0 3
24963: PUSH
24964: LD_VAR 0 1
24968: ARRAY
24969: PPUSH
24970: LD_VAR 0 1
24974: PUSH
24975: LD_INT 4
24977: MOD
24978: PUSH
24979: LD_INT 1
24981: PLUS
24982: PPUSH
24983: CALL_OW 259
24987: PUSH
24988: LD_INT 10
24990: LESS
24991: IFFALSE 25054
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24993: LD_VAR 0 3
24997: PUSH
24998: LD_VAR 0 1
25002: ARRAY
25003: PPUSH
25004: LD_VAR 0 1
25008: PUSH
25009: LD_INT 4
25011: MOD
25012: PUSH
25013: LD_INT 1
25015: PLUS
25016: PPUSH
25017: LD_VAR 0 3
25021: PUSH
25022: LD_VAR 0 1
25026: ARRAY
25027: PPUSH
25028: LD_VAR 0 1
25032: PUSH
25033: LD_INT 4
25035: MOD
25036: PUSH
25037: LD_INT 1
25039: PLUS
25040: PPUSH
25041: CALL_OW 259
25045: PUSH
25046: LD_INT 1
25048: PLUS
25049: PPUSH
25050: CALL_OW 237
25054: GO 24956
25056: POP
25057: POP
// end ;
25058: PPOPN 3
25060: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25061: LD_EXP 52
25065: PUSH
25066: LD_EXP 60
25070: AND
25071: IFFALSE 25091
25073: GO 25075
25075: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25076: LD_INT 4
25078: PPUSH
25079: LD_OWVAR 2
25083: PPUSH
25084: LD_INT 0
25086: PPUSH
25087: CALL_OW 324
25091: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25092: LD_EXP 52
25096: PUSH
25097: LD_EXP 89
25101: AND
25102: IFFALSE 25122
25104: GO 25106
25106: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25107: LD_INT 19
25109: PPUSH
25110: LD_OWVAR 2
25114: PPUSH
25115: LD_INT 0
25117: PPUSH
25118: CALL_OW 324
25122: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25123: LD_EXP 52
25127: PUSH
25128: LD_EXP 61
25132: AND
25133: IFFALSE 25235
25135: GO 25137
25137: DISABLE
25138: LD_INT 0
25140: PPUSH
25141: PPUSH
// begin enable ;
25142: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25143: LD_ADDR_VAR 0 2
25147: PUSH
25148: LD_INT 22
25150: PUSH
25151: LD_OWVAR 2
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 2
25162: PUSH
25163: LD_INT 34
25165: PUSH
25166: LD_INT 11
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 34
25175: PUSH
25176: LD_INT 30
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: LIST
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PPUSH
25192: CALL_OW 69
25196: ST_TO_ADDR
// if not tmp then
25197: LD_VAR 0 2
25201: NOT
25202: IFFALSE 25206
// exit ;
25204: GO 25235
// for i in tmp do
25206: LD_ADDR_VAR 0 1
25210: PUSH
25211: LD_VAR 0 2
25215: PUSH
25216: FOR_IN
25217: IFFALSE 25233
// begin SetLives ( i , 0 ) ;
25219: LD_VAR 0 1
25223: PPUSH
25224: LD_INT 0
25226: PPUSH
25227: CALL_OW 234
// end ;
25231: GO 25216
25233: POP
25234: POP
// end ;
25235: PPOPN 2
25237: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25238: LD_EXP 52
25242: PUSH
25243: LD_EXP 62
25247: AND
25248: IFFALSE 25268
25250: GO 25252
25252: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25253: LD_INT 32
25255: PPUSH
25256: LD_OWVAR 2
25260: PPUSH
25261: LD_INT 0
25263: PPUSH
25264: CALL_OW 324
25268: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25269: LD_EXP 52
25273: PUSH
25274: LD_EXP 63
25278: AND
25279: IFFALSE 25460
25281: GO 25283
25283: DISABLE
25284: LD_INT 0
25286: PPUSH
25287: PPUSH
25288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25289: LD_ADDR_VAR 0 2
25293: PUSH
25294: LD_INT 22
25296: PUSH
25297: LD_OWVAR 2
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 33
25308: PUSH
25309: LD_INT 3
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PPUSH
25320: CALL_OW 69
25324: ST_TO_ADDR
// if not tmp then
25325: LD_VAR 0 2
25329: NOT
25330: IFFALSE 25334
// exit ;
25332: GO 25460
// side := 0 ;
25334: LD_ADDR_VAR 0 3
25338: PUSH
25339: LD_INT 0
25341: ST_TO_ADDR
// for i := 1 to 8 do
25342: LD_ADDR_VAR 0 1
25346: PUSH
25347: DOUBLE
25348: LD_INT 1
25350: DEC
25351: ST_TO_ADDR
25352: LD_INT 8
25354: PUSH
25355: FOR_TO
25356: IFFALSE 25404
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25358: LD_OWVAR 2
25362: PUSH
25363: LD_VAR 0 1
25367: NONEQUAL
25368: PUSH
25369: LD_OWVAR 2
25373: PPUSH
25374: LD_VAR 0 1
25378: PPUSH
25379: CALL_OW 81
25383: PUSH
25384: LD_INT 2
25386: EQUAL
25387: AND
25388: IFFALSE 25402
// begin side := i ;
25390: LD_ADDR_VAR 0 3
25394: PUSH
25395: LD_VAR 0 1
25399: ST_TO_ADDR
// break ;
25400: GO 25404
// end ;
25402: GO 25355
25404: POP
25405: POP
// if not side then
25406: LD_VAR 0 3
25410: NOT
25411: IFFALSE 25415
// exit ;
25413: GO 25460
// for i := 1 to tmp do
25415: LD_ADDR_VAR 0 1
25419: PUSH
25420: DOUBLE
25421: LD_INT 1
25423: DEC
25424: ST_TO_ADDR
25425: LD_VAR 0 2
25429: PUSH
25430: FOR_TO
25431: IFFALSE 25458
// if Prob ( 60 ) then
25433: LD_INT 60
25435: PPUSH
25436: CALL_OW 13
25440: IFFALSE 25456
// SetSide ( i , side ) ;
25442: LD_VAR 0 1
25446: PPUSH
25447: LD_VAR 0 3
25451: PPUSH
25452: CALL_OW 235
25456: GO 25430
25458: POP
25459: POP
// end ;
25460: PPOPN 3
25462: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25463: LD_EXP 52
25467: PUSH
25468: LD_EXP 65
25472: AND
25473: IFFALSE 25592
25475: GO 25477
25477: DISABLE
25478: LD_INT 0
25480: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25481: LD_ADDR_VAR 0 1
25485: PUSH
25486: LD_INT 22
25488: PUSH
25489: LD_OWVAR 2
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 21
25500: PUSH
25501: LD_INT 1
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 3
25510: PUSH
25511: LD_INT 23
25513: PUSH
25514: LD_INT 0
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: LIST
25529: PPUSH
25530: CALL_OW 69
25534: PUSH
25535: FOR_IN
25536: IFFALSE 25590
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25538: LD_VAR 0 1
25542: PPUSH
25543: CALL_OW 257
25547: PUSH
25548: LD_INT 1
25550: PUSH
25551: LD_INT 2
25553: PUSH
25554: LD_INT 3
25556: PUSH
25557: LD_INT 4
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: IN
25566: IFFALSE 25588
// SetClass ( un , rand ( 1 , 4 ) ) ;
25568: LD_VAR 0 1
25572: PPUSH
25573: LD_INT 1
25575: PPUSH
25576: LD_INT 4
25578: PPUSH
25579: CALL_OW 12
25583: PPUSH
25584: CALL_OW 336
25588: GO 25535
25590: POP
25591: POP
// end ;
25592: PPOPN 1
25594: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25595: LD_EXP 52
25599: PUSH
25600: LD_EXP 64
25604: AND
25605: IFFALSE 25684
25607: GO 25609
25609: DISABLE
25610: LD_INT 0
25612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25613: LD_ADDR_VAR 0 1
25617: PUSH
25618: LD_INT 22
25620: PUSH
25621: LD_OWVAR 2
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 21
25632: PUSH
25633: LD_INT 3
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PPUSH
25644: CALL_OW 69
25648: ST_TO_ADDR
// if not tmp then
25649: LD_VAR 0 1
25653: NOT
25654: IFFALSE 25658
// exit ;
25656: GO 25684
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25658: LD_VAR 0 1
25662: PUSH
25663: LD_INT 1
25665: PPUSH
25666: LD_VAR 0 1
25670: PPUSH
25671: CALL_OW 12
25675: ARRAY
25676: PPUSH
25677: LD_INT 100
25679: PPUSH
25680: CALL_OW 234
// end ;
25684: PPOPN 1
25686: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25687: LD_EXP 52
25691: PUSH
25692: LD_EXP 66
25696: AND
25697: IFFALSE 25795
25699: GO 25701
25701: DISABLE
25702: LD_INT 0
25704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25705: LD_ADDR_VAR 0 1
25709: PUSH
25710: LD_INT 22
25712: PUSH
25713: LD_OWVAR 2
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 21
25724: PUSH
25725: LD_INT 1
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PPUSH
25736: CALL_OW 69
25740: ST_TO_ADDR
// if not tmp then
25741: LD_VAR 0 1
25745: NOT
25746: IFFALSE 25750
// exit ;
25748: GO 25795
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25750: LD_VAR 0 1
25754: PUSH
25755: LD_INT 1
25757: PPUSH
25758: LD_VAR 0 1
25762: PPUSH
25763: CALL_OW 12
25767: ARRAY
25768: PPUSH
25769: LD_INT 1
25771: PPUSH
25772: LD_INT 4
25774: PPUSH
25775: CALL_OW 12
25779: PPUSH
25780: LD_INT 3000
25782: PPUSH
25783: LD_INT 9000
25785: PPUSH
25786: CALL_OW 12
25790: PPUSH
25791: CALL_OW 492
// end ;
25795: PPOPN 1
25797: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25798: LD_EXP 52
25802: PUSH
25803: LD_EXP 67
25807: AND
25808: IFFALSE 25828
25810: GO 25812
25812: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25813: LD_INT 1
25815: PPUSH
25816: LD_OWVAR 2
25820: PPUSH
25821: LD_INT 0
25823: PPUSH
25824: CALL_OW 324
25828: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25829: LD_EXP 52
25833: PUSH
25834: LD_EXP 68
25838: AND
25839: IFFALSE 25922
25841: GO 25843
25843: DISABLE
25844: LD_INT 0
25846: PPUSH
25847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25848: LD_ADDR_VAR 0 2
25852: PUSH
25853: LD_INT 22
25855: PUSH
25856: LD_OWVAR 2
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 21
25867: PUSH
25868: LD_INT 3
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PPUSH
25879: CALL_OW 69
25883: ST_TO_ADDR
// if not tmp then
25884: LD_VAR 0 2
25888: NOT
25889: IFFALSE 25893
// exit ;
25891: GO 25922
// for i in tmp do
25893: LD_ADDR_VAR 0 1
25897: PUSH
25898: LD_VAR 0 2
25902: PUSH
25903: FOR_IN
25904: IFFALSE 25920
// SetBLevel ( i , 10 ) ;
25906: LD_VAR 0 1
25910: PPUSH
25911: LD_INT 10
25913: PPUSH
25914: CALL_OW 241
25918: GO 25903
25920: POP
25921: POP
// end ;
25922: PPOPN 2
25924: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25925: LD_EXP 52
25929: PUSH
25930: LD_EXP 69
25934: AND
25935: IFFALSE 26046
25937: GO 25939
25939: DISABLE
25940: LD_INT 0
25942: PPUSH
25943: PPUSH
25944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25945: LD_ADDR_VAR 0 3
25949: PUSH
25950: LD_INT 22
25952: PUSH
25953: LD_OWVAR 2
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 25
25964: PUSH
25965: LD_INT 1
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PPUSH
25976: CALL_OW 69
25980: ST_TO_ADDR
// if not tmp then
25981: LD_VAR 0 3
25985: NOT
25986: IFFALSE 25990
// exit ;
25988: GO 26046
// un := tmp [ rand ( 1 , tmp ) ] ;
25990: LD_ADDR_VAR 0 2
25994: PUSH
25995: LD_VAR 0 3
25999: PUSH
26000: LD_INT 1
26002: PPUSH
26003: LD_VAR 0 3
26007: PPUSH
26008: CALL_OW 12
26012: ARRAY
26013: ST_TO_ADDR
// if Crawls ( un ) then
26014: LD_VAR 0 2
26018: PPUSH
26019: CALL_OW 318
26023: IFFALSE 26034
// ComWalk ( un ) ;
26025: LD_VAR 0 2
26029: PPUSH
26030: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26034: LD_VAR 0 2
26038: PPUSH
26039: LD_INT 5
26041: PPUSH
26042: CALL_OW 336
// end ;
26046: PPOPN 3
26048: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26049: LD_EXP 52
26053: PUSH
26054: LD_EXP 70
26058: AND
26059: PUSH
26060: LD_OWVAR 67
26064: PUSH
26065: LD_INT 4
26067: LESS
26068: AND
26069: IFFALSE 26088
26071: GO 26073
26073: DISABLE
// begin Difficulty := Difficulty + 1 ;
26074: LD_ADDR_OWVAR 67
26078: PUSH
26079: LD_OWVAR 67
26083: PUSH
26084: LD_INT 1
26086: PLUS
26087: ST_TO_ADDR
// end ;
26088: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26089: LD_EXP 52
26093: PUSH
26094: LD_EXP 71
26098: AND
26099: IFFALSE 26202
26101: GO 26103
26103: DISABLE
26104: LD_INT 0
26106: PPUSH
// begin for i := 1 to 5 do
26107: LD_ADDR_VAR 0 1
26111: PUSH
26112: DOUBLE
26113: LD_INT 1
26115: DEC
26116: ST_TO_ADDR
26117: LD_INT 5
26119: PUSH
26120: FOR_TO
26121: IFFALSE 26200
// begin uc_nation := nation_nature ;
26123: LD_ADDR_OWVAR 21
26127: PUSH
26128: LD_INT 0
26130: ST_TO_ADDR
// uc_side := 0 ;
26131: LD_ADDR_OWVAR 20
26135: PUSH
26136: LD_INT 0
26138: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26139: LD_ADDR_OWVAR 29
26143: PUSH
26144: LD_INT 12
26146: PUSH
26147: LD_INT 12
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: ST_TO_ADDR
// hc_agressivity := 20 ;
26154: LD_ADDR_OWVAR 35
26158: PUSH
26159: LD_INT 20
26161: ST_TO_ADDR
// hc_class := class_tiger ;
26162: LD_ADDR_OWVAR 28
26166: PUSH
26167: LD_INT 14
26169: ST_TO_ADDR
// hc_gallery :=  ;
26170: LD_ADDR_OWVAR 33
26174: PUSH
26175: LD_STRING 
26177: ST_TO_ADDR
// hc_name :=  ;
26178: LD_ADDR_OWVAR 26
26182: PUSH
26183: LD_STRING 
26185: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26186: CALL_OW 44
26190: PPUSH
26191: LD_INT 0
26193: PPUSH
26194: CALL_OW 51
// end ;
26198: GO 26120
26200: POP
26201: POP
// end ;
26202: PPOPN 1
26204: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26205: LD_EXP 52
26209: PUSH
26210: LD_EXP 72
26214: AND
26215: IFFALSE 26224
26217: GO 26219
26219: DISABLE
// StreamSibBomb ;
26220: CALL 26225 0 0
26224: END
// export function StreamSibBomb ; var i , x , y ; begin
26225: LD_INT 0
26227: PPUSH
26228: PPUSH
26229: PPUSH
26230: PPUSH
// result := false ;
26231: LD_ADDR_VAR 0 1
26235: PUSH
26236: LD_INT 0
26238: ST_TO_ADDR
// for i := 1 to 16 do
26239: LD_ADDR_VAR 0 2
26243: PUSH
26244: DOUBLE
26245: LD_INT 1
26247: DEC
26248: ST_TO_ADDR
26249: LD_INT 16
26251: PUSH
26252: FOR_TO
26253: IFFALSE 26452
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26255: LD_ADDR_VAR 0 3
26259: PUSH
26260: LD_INT 10
26262: PUSH
26263: LD_INT 20
26265: PUSH
26266: LD_INT 30
26268: PUSH
26269: LD_INT 40
26271: PUSH
26272: LD_INT 50
26274: PUSH
26275: LD_INT 60
26277: PUSH
26278: LD_INT 70
26280: PUSH
26281: LD_INT 80
26283: PUSH
26284: LD_INT 90
26286: PUSH
26287: LD_INT 100
26289: PUSH
26290: LD_INT 110
26292: PUSH
26293: LD_INT 120
26295: PUSH
26296: LD_INT 130
26298: PUSH
26299: LD_INT 140
26301: PUSH
26302: LD_INT 150
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 1
26324: PPUSH
26325: LD_INT 15
26327: PPUSH
26328: CALL_OW 12
26332: ARRAY
26333: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26334: LD_ADDR_VAR 0 4
26338: PUSH
26339: LD_INT 10
26341: PUSH
26342: LD_INT 20
26344: PUSH
26345: LD_INT 30
26347: PUSH
26348: LD_INT 40
26350: PUSH
26351: LD_INT 50
26353: PUSH
26354: LD_INT 60
26356: PUSH
26357: LD_INT 70
26359: PUSH
26360: LD_INT 80
26362: PUSH
26363: LD_INT 90
26365: PUSH
26366: LD_INT 100
26368: PUSH
26369: LD_INT 110
26371: PUSH
26372: LD_INT 120
26374: PUSH
26375: LD_INT 130
26377: PUSH
26378: LD_INT 140
26380: PUSH
26381: LD_INT 150
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 1
26403: PPUSH
26404: LD_INT 15
26406: PPUSH
26407: CALL_OW 12
26411: ARRAY
26412: ST_TO_ADDR
// if ValidHex ( x , y ) then
26413: LD_VAR 0 3
26417: PPUSH
26418: LD_VAR 0 4
26422: PPUSH
26423: CALL_OW 488
26427: IFFALSE 26450
// begin result := [ x , y ] ;
26429: LD_ADDR_VAR 0 1
26433: PUSH
26434: LD_VAR 0 3
26438: PUSH
26439: LD_VAR 0 4
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: ST_TO_ADDR
// break ;
26448: GO 26452
// end ; end ;
26450: GO 26252
26452: POP
26453: POP
// if result then
26454: LD_VAR 0 1
26458: IFFALSE 26518
// begin ToLua ( playSibBomb() ) ;
26460: LD_STRING playSibBomb()
26462: PPUSH
26463: CALL_OW 559
// wait ( 0 0$14 ) ;
26467: LD_INT 490
26469: PPUSH
26470: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26474: LD_VAR 0 1
26478: PUSH
26479: LD_INT 1
26481: ARRAY
26482: PPUSH
26483: LD_VAR 0 1
26487: PUSH
26488: LD_INT 2
26490: ARRAY
26491: PPUSH
26492: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26496: LD_VAR 0 1
26500: PUSH
26501: LD_INT 1
26503: ARRAY
26504: PPUSH
26505: LD_VAR 0 1
26509: PUSH
26510: LD_INT 2
26512: ARRAY
26513: PPUSH
26514: CALL_OW 429
// end ; end ;
26518: LD_VAR 0 1
26522: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26523: LD_EXP 52
26527: PUSH
26528: LD_EXP 74
26532: AND
26533: IFFALSE 26545
26535: GO 26537
26537: DISABLE
// YouLost (  ) ;
26538: LD_STRING 
26540: PPUSH
26541: CALL_OW 104
26545: END
// every 0 0$1 trigger StreamModeActive and sFog do
26546: LD_EXP 52
26550: PUSH
26551: LD_EXP 73
26555: AND
26556: IFFALSE 26570
26558: GO 26560
26560: DISABLE
// FogOff ( your_side ) ;
26561: LD_OWVAR 2
26565: PPUSH
26566: CALL_OW 344
26570: END
// every 0 0$1 trigger StreamModeActive and sSun do
26571: LD_EXP 52
26575: PUSH
26576: LD_EXP 75
26580: AND
26581: IFFALSE 26609
26583: GO 26585
26585: DISABLE
// begin solar_recharge_percent := 0 ;
26586: LD_ADDR_OWVAR 79
26590: PUSH
26591: LD_INT 0
26593: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26594: LD_INT 10500
26596: PPUSH
26597: CALL_OW 67
// solar_recharge_percent := 100 ;
26601: LD_ADDR_OWVAR 79
26605: PUSH
26606: LD_INT 100
26608: ST_TO_ADDR
// end ;
26609: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26610: LD_EXP 52
26614: PUSH
26615: LD_EXP 76
26619: AND
26620: IFFALSE 26859
26622: GO 26624
26624: DISABLE
26625: LD_INT 0
26627: PPUSH
26628: PPUSH
26629: PPUSH
// begin tmp := [ ] ;
26630: LD_ADDR_VAR 0 3
26634: PUSH
26635: EMPTY
26636: ST_TO_ADDR
// for i := 1 to 6 do
26637: LD_ADDR_VAR 0 1
26641: PUSH
26642: DOUBLE
26643: LD_INT 1
26645: DEC
26646: ST_TO_ADDR
26647: LD_INT 6
26649: PUSH
26650: FOR_TO
26651: IFFALSE 26756
// begin uc_nation := nation_nature ;
26653: LD_ADDR_OWVAR 21
26657: PUSH
26658: LD_INT 0
26660: ST_TO_ADDR
// uc_side := 0 ;
26661: LD_ADDR_OWVAR 20
26665: PUSH
26666: LD_INT 0
26668: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26669: LD_ADDR_OWVAR 29
26673: PUSH
26674: LD_INT 12
26676: PUSH
26677: LD_INT 12
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: ST_TO_ADDR
// hc_agressivity := 20 ;
26684: LD_ADDR_OWVAR 35
26688: PUSH
26689: LD_INT 20
26691: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26692: LD_ADDR_OWVAR 28
26696: PUSH
26697: LD_INT 17
26699: ST_TO_ADDR
// hc_gallery :=  ;
26700: LD_ADDR_OWVAR 33
26704: PUSH
26705: LD_STRING 
26707: ST_TO_ADDR
// hc_name :=  ;
26708: LD_ADDR_OWVAR 26
26712: PUSH
26713: LD_STRING 
26715: ST_TO_ADDR
// un := CreateHuman ;
26716: LD_ADDR_VAR 0 2
26720: PUSH
26721: CALL_OW 44
26725: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26726: LD_VAR 0 2
26730: PPUSH
26731: LD_INT 1
26733: PPUSH
26734: CALL_OW 51
// tmp := tmp ^ un ;
26738: LD_ADDR_VAR 0 3
26742: PUSH
26743: LD_VAR 0 3
26747: PUSH
26748: LD_VAR 0 2
26752: ADD
26753: ST_TO_ADDR
// end ;
26754: GO 26650
26756: POP
26757: POP
// repeat wait ( 0 0$1 ) ;
26758: LD_INT 35
26760: PPUSH
26761: CALL_OW 67
// for un in tmp do
26765: LD_ADDR_VAR 0 2
26769: PUSH
26770: LD_VAR 0 3
26774: PUSH
26775: FOR_IN
26776: IFFALSE 26850
// begin if IsDead ( un ) then
26778: LD_VAR 0 2
26782: PPUSH
26783: CALL_OW 301
26787: IFFALSE 26807
// begin tmp := tmp diff un ;
26789: LD_ADDR_VAR 0 3
26793: PUSH
26794: LD_VAR 0 3
26798: PUSH
26799: LD_VAR 0 2
26803: DIFF
26804: ST_TO_ADDR
// continue ;
26805: GO 26775
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26807: LD_VAR 0 2
26811: PPUSH
26812: LD_INT 3
26814: PUSH
26815: LD_INT 22
26817: PUSH
26818: LD_INT 0
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PPUSH
26829: CALL_OW 69
26833: PPUSH
26834: LD_VAR 0 2
26838: PPUSH
26839: CALL_OW 74
26843: PPUSH
26844: CALL_OW 115
// end ;
26848: GO 26775
26850: POP
26851: POP
// until not tmp ;
26852: LD_VAR 0 3
26856: NOT
26857: IFFALSE 26758
// end ;
26859: PPOPN 3
26861: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26862: LD_EXP 52
26866: PUSH
26867: LD_EXP 77
26871: AND
26872: IFFALSE 26926
26874: GO 26876
26876: DISABLE
// begin ToLua ( displayTroll(); ) ;
26877: LD_STRING displayTroll();
26879: PPUSH
26880: CALL_OW 559
// wait ( 3 3$00 ) ;
26884: LD_INT 6300
26886: PPUSH
26887: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26891: LD_STRING hideTroll();
26893: PPUSH
26894: CALL_OW 559
// wait ( 1 1$00 ) ;
26898: LD_INT 2100
26900: PPUSH
26901: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26905: LD_STRING displayTroll();
26907: PPUSH
26908: CALL_OW 559
// wait ( 1 1$00 ) ;
26912: LD_INT 2100
26914: PPUSH
26915: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26919: LD_STRING hideTroll();
26921: PPUSH
26922: CALL_OW 559
// end ;
26926: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26927: LD_EXP 52
26931: PUSH
26932: LD_EXP 78
26936: AND
26937: IFFALSE 27000
26939: GO 26941
26941: DISABLE
26942: LD_INT 0
26944: PPUSH
// begin p := 0 ;
26945: LD_ADDR_VAR 0 1
26949: PUSH
26950: LD_INT 0
26952: ST_TO_ADDR
// repeat game_speed := 1 ;
26953: LD_ADDR_OWVAR 65
26957: PUSH
26958: LD_INT 1
26960: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26961: LD_INT 35
26963: PPUSH
26964: CALL_OW 67
// p := p + 1 ;
26968: LD_ADDR_VAR 0 1
26972: PUSH
26973: LD_VAR 0 1
26977: PUSH
26978: LD_INT 1
26980: PLUS
26981: ST_TO_ADDR
// until p >= 60 ;
26982: LD_VAR 0 1
26986: PUSH
26987: LD_INT 60
26989: GREATEREQUAL
26990: IFFALSE 26953
// game_speed := 4 ;
26992: LD_ADDR_OWVAR 65
26996: PUSH
26997: LD_INT 4
26999: ST_TO_ADDR
// end ;
27000: PPOPN 1
27002: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27003: LD_EXP 52
27007: PUSH
27008: LD_EXP 79
27012: AND
27013: IFFALSE 27159
27015: GO 27017
27017: DISABLE
27018: LD_INT 0
27020: PPUSH
27021: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27022: LD_ADDR_VAR 0 1
27026: PUSH
27027: LD_INT 22
27029: PUSH
27030: LD_OWVAR 2
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: LD_INT 30
27044: PUSH
27045: LD_INT 0
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 30
27054: PUSH
27055: LD_INT 1
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: LIST
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PPUSH
27071: CALL_OW 69
27075: ST_TO_ADDR
// if not depot then
27076: LD_VAR 0 1
27080: NOT
27081: IFFALSE 27085
// exit ;
27083: GO 27159
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27085: LD_ADDR_VAR 0 2
27089: PUSH
27090: LD_VAR 0 1
27094: PUSH
27095: LD_INT 1
27097: PPUSH
27098: LD_VAR 0 1
27102: PPUSH
27103: CALL_OW 12
27107: ARRAY
27108: PPUSH
27109: CALL_OW 274
27113: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27114: LD_VAR 0 2
27118: PPUSH
27119: LD_INT 1
27121: PPUSH
27122: LD_INT 0
27124: PPUSH
27125: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27129: LD_VAR 0 2
27133: PPUSH
27134: LD_INT 2
27136: PPUSH
27137: LD_INT 0
27139: PPUSH
27140: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27144: LD_VAR 0 2
27148: PPUSH
27149: LD_INT 3
27151: PPUSH
27152: LD_INT 0
27154: PPUSH
27155: CALL_OW 277
// end ;
27159: PPOPN 2
27161: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27162: LD_EXP 52
27166: PUSH
27167: LD_EXP 80
27171: AND
27172: IFFALSE 27269
27174: GO 27176
27176: DISABLE
27177: LD_INT 0
27179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27180: LD_ADDR_VAR 0 1
27184: PUSH
27185: LD_INT 22
27187: PUSH
27188: LD_OWVAR 2
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 21
27199: PUSH
27200: LD_INT 1
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 3
27209: PUSH
27210: LD_INT 23
27212: PUSH
27213: LD_INT 0
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: LIST
27228: PPUSH
27229: CALL_OW 69
27233: ST_TO_ADDR
// if not tmp then
27234: LD_VAR 0 1
27238: NOT
27239: IFFALSE 27243
// exit ;
27241: GO 27269
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27243: LD_VAR 0 1
27247: PUSH
27248: LD_INT 1
27250: PPUSH
27251: LD_VAR 0 1
27255: PPUSH
27256: CALL_OW 12
27260: ARRAY
27261: PPUSH
27262: LD_INT 200
27264: PPUSH
27265: CALL_OW 234
// end ;
27269: PPOPN 1
27271: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27272: LD_EXP 52
27276: PUSH
27277: LD_EXP 81
27281: AND
27282: IFFALSE 27361
27284: GO 27286
27286: DISABLE
27287: LD_INT 0
27289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27290: LD_ADDR_VAR 0 1
27294: PUSH
27295: LD_INT 22
27297: PUSH
27298: LD_OWVAR 2
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 21
27309: PUSH
27310: LD_INT 2
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PPUSH
27321: CALL_OW 69
27325: ST_TO_ADDR
// if not tmp then
27326: LD_VAR 0 1
27330: NOT
27331: IFFALSE 27335
// exit ;
27333: GO 27361
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27335: LD_VAR 0 1
27339: PUSH
27340: LD_INT 1
27342: PPUSH
27343: LD_VAR 0 1
27347: PPUSH
27348: CALL_OW 12
27352: ARRAY
27353: PPUSH
27354: LD_INT 60
27356: PPUSH
27357: CALL_OW 234
// end ;
27361: PPOPN 1
27363: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27364: LD_EXP 52
27368: PUSH
27369: LD_EXP 82
27373: AND
27374: IFFALSE 27473
27376: GO 27378
27378: DISABLE
27379: LD_INT 0
27381: PPUSH
27382: PPUSH
// begin enable ;
27383: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27384: LD_ADDR_VAR 0 1
27388: PUSH
27389: LD_INT 22
27391: PUSH
27392: LD_OWVAR 2
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 61
27403: PUSH
27404: EMPTY
27405: LIST
27406: PUSH
27407: LD_INT 33
27409: PUSH
27410: LD_INT 2
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: LIST
27421: PPUSH
27422: CALL_OW 69
27426: ST_TO_ADDR
// if not tmp then
27427: LD_VAR 0 1
27431: NOT
27432: IFFALSE 27436
// exit ;
27434: GO 27473
// for i in tmp do
27436: LD_ADDR_VAR 0 2
27440: PUSH
27441: LD_VAR 0 1
27445: PUSH
27446: FOR_IN
27447: IFFALSE 27471
// if IsControledBy ( i ) then
27449: LD_VAR 0 2
27453: PPUSH
27454: CALL_OW 312
27458: IFFALSE 27469
// ComUnlink ( i ) ;
27460: LD_VAR 0 2
27464: PPUSH
27465: CALL_OW 136
27469: GO 27446
27471: POP
27472: POP
// end ;
27473: PPOPN 2
27475: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27476: LD_EXP 52
27480: PUSH
27481: LD_EXP 83
27485: AND
27486: IFFALSE 27626
27488: GO 27490
27490: DISABLE
27491: LD_INT 0
27493: PPUSH
27494: PPUSH
// begin ToLua ( displayPowell(); ) ;
27495: LD_STRING displayPowell();
27497: PPUSH
27498: CALL_OW 559
// uc_side := 0 ;
27502: LD_ADDR_OWVAR 20
27506: PUSH
27507: LD_INT 0
27509: ST_TO_ADDR
// uc_nation := 2 ;
27510: LD_ADDR_OWVAR 21
27514: PUSH
27515: LD_INT 2
27517: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27518: LD_ADDR_OWVAR 37
27522: PUSH
27523: LD_INT 14
27525: ST_TO_ADDR
// vc_engine := engine_siberite ;
27526: LD_ADDR_OWVAR 39
27530: PUSH
27531: LD_INT 3
27533: ST_TO_ADDR
// vc_control := control_apeman ;
27534: LD_ADDR_OWVAR 38
27538: PUSH
27539: LD_INT 5
27541: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27542: LD_ADDR_OWVAR 40
27546: PUSH
27547: LD_INT 29
27549: ST_TO_ADDR
// un := CreateVehicle ;
27550: LD_ADDR_VAR 0 2
27554: PUSH
27555: CALL_OW 45
27559: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27560: LD_VAR 0 2
27564: PPUSH
27565: LD_INT 1
27567: PPUSH
27568: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27572: LD_INT 35
27574: PPUSH
27575: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27579: LD_VAR 0 2
27583: PPUSH
27584: LD_INT 22
27586: PUSH
27587: LD_OWVAR 2
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PPUSH
27596: CALL_OW 69
27600: PPUSH
27601: LD_VAR 0 2
27605: PPUSH
27606: CALL_OW 74
27610: PPUSH
27611: CALL_OW 115
// until IsDead ( un ) ;
27615: LD_VAR 0 2
27619: PPUSH
27620: CALL_OW 301
27624: IFFALSE 27572
// end ;
27626: PPOPN 2
27628: END
// every 0 0$1 trigger StreamModeActive and sStu do
27629: LD_EXP 52
27633: PUSH
27634: LD_EXP 91
27638: AND
27639: IFFALSE 27655
27641: GO 27643
27643: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27644: LD_STRING displayStucuk();
27646: PPUSH
27647: CALL_OW 559
// ResetFog ;
27651: CALL_OW 335
// end ;
27655: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27656: LD_EXP 52
27660: PUSH
27661: LD_EXP 84
27665: AND
27666: IFFALSE 27807
27668: GO 27670
27670: DISABLE
27671: LD_INT 0
27673: PPUSH
27674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27675: LD_ADDR_VAR 0 2
27679: PUSH
27680: LD_INT 22
27682: PUSH
27683: LD_OWVAR 2
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 21
27694: PUSH
27695: LD_INT 1
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PPUSH
27706: CALL_OW 69
27710: ST_TO_ADDR
// if not tmp then
27711: LD_VAR 0 2
27715: NOT
27716: IFFALSE 27720
// exit ;
27718: GO 27807
// un := tmp [ rand ( 1 , tmp ) ] ;
27720: LD_ADDR_VAR 0 1
27724: PUSH
27725: LD_VAR 0 2
27729: PUSH
27730: LD_INT 1
27732: PPUSH
27733: LD_VAR 0 2
27737: PPUSH
27738: CALL_OW 12
27742: ARRAY
27743: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27744: LD_VAR 0 1
27748: PPUSH
27749: LD_INT 0
27751: PPUSH
27752: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27756: LD_VAR 0 1
27760: PPUSH
27761: LD_OWVAR 3
27765: PUSH
27766: LD_VAR 0 1
27770: DIFF
27771: PPUSH
27772: LD_VAR 0 1
27776: PPUSH
27777: CALL_OW 74
27781: PPUSH
27782: CALL_OW 115
// wait ( 0 0$20 ) ;
27786: LD_INT 700
27788: PPUSH
27789: CALL_OW 67
// SetSide ( un , your_side ) ;
27793: LD_VAR 0 1
27797: PPUSH
27798: LD_OWVAR 2
27802: PPUSH
27803: CALL_OW 235
// end ;
27807: PPOPN 2
27809: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27810: LD_EXP 52
27814: PUSH
27815: LD_EXP 85
27819: AND
27820: IFFALSE 27926
27822: GO 27824
27824: DISABLE
27825: LD_INT 0
27827: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27828: LD_ADDR_VAR 0 1
27832: PUSH
27833: LD_INT 22
27835: PUSH
27836: LD_OWVAR 2
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 2
27847: PUSH
27848: LD_INT 30
27850: PUSH
27851: LD_INT 0
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 30
27860: PUSH
27861: LD_INT 1
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: LIST
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PPUSH
27877: CALL_OW 69
27881: ST_TO_ADDR
// if not depot then
27882: LD_VAR 0 1
27886: NOT
27887: IFFALSE 27891
// exit ;
27889: GO 27926
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27891: LD_VAR 0 1
27895: PUSH
27896: LD_INT 1
27898: ARRAY
27899: PPUSH
27900: CALL_OW 250
27904: PPUSH
27905: LD_VAR 0 1
27909: PUSH
27910: LD_INT 1
27912: ARRAY
27913: PPUSH
27914: CALL_OW 251
27918: PPUSH
27919: LD_INT 70
27921: PPUSH
27922: CALL_OW 495
// end ;
27926: PPOPN 1
27928: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27929: LD_EXP 52
27933: PUSH
27934: LD_EXP 86
27938: AND
27939: IFFALSE 28150
27941: GO 27943
27943: DISABLE
27944: LD_INT 0
27946: PPUSH
27947: PPUSH
27948: PPUSH
27949: PPUSH
27950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27951: LD_ADDR_VAR 0 5
27955: PUSH
27956: LD_INT 22
27958: PUSH
27959: LD_OWVAR 2
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 21
27970: PUSH
27971: LD_INT 1
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PPUSH
27982: CALL_OW 69
27986: ST_TO_ADDR
// if not tmp then
27987: LD_VAR 0 5
27991: NOT
27992: IFFALSE 27996
// exit ;
27994: GO 28150
// for i in tmp do
27996: LD_ADDR_VAR 0 1
28000: PUSH
28001: LD_VAR 0 5
28005: PUSH
28006: FOR_IN
28007: IFFALSE 28148
// begin d := rand ( 0 , 5 ) ;
28009: LD_ADDR_VAR 0 4
28013: PUSH
28014: LD_INT 0
28016: PPUSH
28017: LD_INT 5
28019: PPUSH
28020: CALL_OW 12
28024: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28025: LD_ADDR_VAR 0 2
28029: PUSH
28030: LD_VAR 0 1
28034: PPUSH
28035: CALL_OW 250
28039: PPUSH
28040: LD_VAR 0 4
28044: PPUSH
28045: LD_INT 3
28047: PPUSH
28048: LD_INT 12
28050: PPUSH
28051: CALL_OW 12
28055: PPUSH
28056: CALL_OW 272
28060: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28061: LD_ADDR_VAR 0 3
28065: PUSH
28066: LD_VAR 0 1
28070: PPUSH
28071: CALL_OW 251
28075: PPUSH
28076: LD_VAR 0 4
28080: PPUSH
28081: LD_INT 3
28083: PPUSH
28084: LD_INT 12
28086: PPUSH
28087: CALL_OW 12
28091: PPUSH
28092: CALL_OW 273
28096: ST_TO_ADDR
// if ValidHex ( x , y ) then
28097: LD_VAR 0 2
28101: PPUSH
28102: LD_VAR 0 3
28106: PPUSH
28107: CALL_OW 488
28111: IFFALSE 28146
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28113: LD_VAR 0 1
28117: PPUSH
28118: LD_VAR 0 2
28122: PPUSH
28123: LD_VAR 0 3
28127: PPUSH
28128: LD_INT 3
28130: PPUSH
28131: LD_INT 6
28133: PPUSH
28134: CALL_OW 12
28138: PPUSH
28139: LD_INT 1
28141: PPUSH
28142: CALL_OW 483
// end ;
28146: GO 28006
28148: POP
28149: POP
// end ;
28150: PPOPN 5
28152: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28153: LD_EXP 52
28157: PUSH
28158: LD_EXP 87
28162: AND
28163: IFFALSE 28257
28165: GO 28167
28167: DISABLE
28168: LD_INT 0
28170: PPUSH
28171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28172: LD_ADDR_VAR 0 2
28176: PUSH
28177: LD_INT 22
28179: PUSH
28180: LD_OWVAR 2
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 32
28191: PUSH
28192: LD_INT 1
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 21
28201: PUSH
28202: LD_INT 2
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: LIST
28213: PPUSH
28214: CALL_OW 69
28218: ST_TO_ADDR
// if not tmp then
28219: LD_VAR 0 2
28223: NOT
28224: IFFALSE 28228
// exit ;
28226: GO 28257
// for i in tmp do
28228: LD_ADDR_VAR 0 1
28232: PUSH
28233: LD_VAR 0 2
28237: PUSH
28238: FOR_IN
28239: IFFALSE 28255
// SetFuel ( i , 0 ) ;
28241: LD_VAR 0 1
28245: PPUSH
28246: LD_INT 0
28248: PPUSH
28249: CALL_OW 240
28253: GO 28238
28255: POP
28256: POP
// end ;
28257: PPOPN 2
28259: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28260: LD_EXP 52
28264: PUSH
28265: LD_EXP 88
28269: AND
28270: IFFALSE 28336
28272: GO 28274
28274: DISABLE
28275: LD_INT 0
28277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28278: LD_ADDR_VAR 0 1
28282: PUSH
28283: LD_INT 22
28285: PUSH
28286: LD_OWVAR 2
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 30
28297: PUSH
28298: LD_INT 29
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PPUSH
28309: CALL_OW 69
28313: ST_TO_ADDR
// if not tmp then
28314: LD_VAR 0 1
28318: NOT
28319: IFFALSE 28323
// exit ;
28321: GO 28336
// DestroyUnit ( tmp [ 1 ] ) ;
28323: LD_VAR 0 1
28327: PUSH
28328: LD_INT 1
28330: ARRAY
28331: PPUSH
28332: CALL_OW 65
// end ;
28336: PPOPN 1
28338: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28339: LD_EXP 52
28343: PUSH
28344: LD_EXP 90
28348: AND
28349: IFFALSE 28478
28351: GO 28353
28353: DISABLE
28354: LD_INT 0
28356: PPUSH
// begin uc_side := 0 ;
28357: LD_ADDR_OWVAR 20
28361: PUSH
28362: LD_INT 0
28364: ST_TO_ADDR
// uc_nation := nation_arabian ;
28365: LD_ADDR_OWVAR 21
28369: PUSH
28370: LD_INT 2
28372: ST_TO_ADDR
// hc_gallery :=  ;
28373: LD_ADDR_OWVAR 33
28377: PUSH
28378: LD_STRING 
28380: ST_TO_ADDR
// hc_name :=  ;
28381: LD_ADDR_OWVAR 26
28385: PUSH
28386: LD_STRING 
28388: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28389: LD_INT 1
28391: PPUSH
28392: LD_INT 11
28394: PPUSH
28395: LD_INT 10
28397: PPUSH
28398: CALL_OW 380
// un := CreateHuman ;
28402: LD_ADDR_VAR 0 1
28406: PUSH
28407: CALL_OW 44
28411: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28412: LD_VAR 0 1
28416: PPUSH
28417: LD_INT 1
28419: PPUSH
28420: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28424: LD_INT 35
28426: PPUSH
28427: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28431: LD_VAR 0 1
28435: PPUSH
28436: LD_INT 22
28438: PUSH
28439: LD_OWVAR 2
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PPUSH
28448: CALL_OW 69
28452: PPUSH
28453: LD_VAR 0 1
28457: PPUSH
28458: CALL_OW 74
28462: PPUSH
28463: CALL_OW 115
// until IsDead ( un ) ;
28467: LD_VAR 0 1
28471: PPUSH
28472: CALL_OW 301
28476: IFFALSE 28424
// end ;
28478: PPOPN 1
28480: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28481: LD_EXP 52
28485: PUSH
28486: LD_EXP 92
28490: AND
28491: IFFALSE 28503
28493: GO 28495
28495: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28496: LD_STRING earthquake(getX(game), 0, 32)
28498: PPUSH
28499: CALL_OW 559
28503: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28504: LD_EXP 52
28508: PUSH
28509: LD_EXP 93
28513: AND
28514: IFFALSE 28605
28516: GO 28518
28518: DISABLE
28519: LD_INT 0
28521: PPUSH
// begin enable ;
28522: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28523: LD_ADDR_VAR 0 1
28527: PUSH
28528: LD_INT 22
28530: PUSH
28531: LD_OWVAR 2
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 21
28542: PUSH
28543: LD_INT 2
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 33
28552: PUSH
28553: LD_INT 3
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: LIST
28564: PPUSH
28565: CALL_OW 69
28569: ST_TO_ADDR
// if not tmp then
28570: LD_VAR 0 1
28574: NOT
28575: IFFALSE 28579
// exit ;
28577: GO 28605
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28579: LD_VAR 0 1
28583: PUSH
28584: LD_INT 1
28586: PPUSH
28587: LD_VAR 0 1
28591: PPUSH
28592: CALL_OW 12
28596: ARRAY
28597: PPUSH
28598: LD_INT 1
28600: PPUSH
28601: CALL_OW 234
// end ;
28605: PPOPN 1
28607: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28608: LD_EXP 52
28612: PUSH
28613: LD_EXP 94
28617: AND
28618: IFFALSE 28759
28620: GO 28622
28622: DISABLE
28623: LD_INT 0
28625: PPUSH
28626: PPUSH
28627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28628: LD_ADDR_VAR 0 3
28632: PUSH
28633: LD_INT 22
28635: PUSH
28636: LD_OWVAR 2
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 25
28647: PUSH
28648: LD_INT 1
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PPUSH
28659: CALL_OW 69
28663: ST_TO_ADDR
// if not tmp then
28664: LD_VAR 0 3
28668: NOT
28669: IFFALSE 28673
// exit ;
28671: GO 28759
// un := tmp [ rand ( 1 , tmp ) ] ;
28673: LD_ADDR_VAR 0 2
28677: PUSH
28678: LD_VAR 0 3
28682: PUSH
28683: LD_INT 1
28685: PPUSH
28686: LD_VAR 0 3
28690: PPUSH
28691: CALL_OW 12
28695: ARRAY
28696: ST_TO_ADDR
// if Crawls ( un ) then
28697: LD_VAR 0 2
28701: PPUSH
28702: CALL_OW 318
28706: IFFALSE 28717
// ComWalk ( un ) ;
28708: LD_VAR 0 2
28712: PPUSH
28713: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28717: LD_VAR 0 2
28721: PPUSH
28722: LD_INT 9
28724: PPUSH
28725: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28729: LD_INT 28
28731: PPUSH
28732: LD_OWVAR 2
28736: PPUSH
28737: LD_INT 2
28739: PPUSH
28740: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28744: LD_INT 29
28746: PPUSH
28747: LD_OWVAR 2
28751: PPUSH
28752: LD_INT 2
28754: PPUSH
28755: CALL_OW 322
// end ;
28759: PPOPN 3
28761: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28762: LD_EXP 52
28766: PUSH
28767: LD_EXP 95
28771: AND
28772: IFFALSE 28883
28774: GO 28776
28776: DISABLE
28777: LD_INT 0
28779: PPUSH
28780: PPUSH
28781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28782: LD_ADDR_VAR 0 3
28786: PUSH
28787: LD_INT 22
28789: PUSH
28790: LD_OWVAR 2
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 25
28801: PUSH
28802: LD_INT 1
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PPUSH
28813: CALL_OW 69
28817: ST_TO_ADDR
// if not tmp then
28818: LD_VAR 0 3
28822: NOT
28823: IFFALSE 28827
// exit ;
28825: GO 28883
// un := tmp [ rand ( 1 , tmp ) ] ;
28827: LD_ADDR_VAR 0 2
28831: PUSH
28832: LD_VAR 0 3
28836: PUSH
28837: LD_INT 1
28839: PPUSH
28840: LD_VAR 0 3
28844: PPUSH
28845: CALL_OW 12
28849: ARRAY
28850: ST_TO_ADDR
// if Crawls ( un ) then
28851: LD_VAR 0 2
28855: PPUSH
28856: CALL_OW 318
28860: IFFALSE 28871
// ComWalk ( un ) ;
28862: LD_VAR 0 2
28866: PPUSH
28867: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28871: LD_VAR 0 2
28875: PPUSH
28876: LD_INT 8
28878: PPUSH
28879: CALL_OW 336
// end ;
28883: PPOPN 3
28885: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28886: LD_EXP 52
28890: PUSH
28891: LD_EXP 96
28895: AND
28896: IFFALSE 29040
28898: GO 28900
28900: DISABLE
28901: LD_INT 0
28903: PPUSH
28904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28905: LD_ADDR_VAR 0 2
28909: PUSH
28910: LD_INT 22
28912: PUSH
28913: LD_OWVAR 2
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 21
28924: PUSH
28925: LD_INT 2
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 2
28934: PUSH
28935: LD_INT 34
28937: PUSH
28938: LD_INT 12
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 34
28947: PUSH
28948: LD_INT 51
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 34
28957: PUSH
28958: LD_INT 32
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: LIST
28975: PPUSH
28976: CALL_OW 69
28980: ST_TO_ADDR
// if not tmp then
28981: LD_VAR 0 2
28985: NOT
28986: IFFALSE 28990
// exit ;
28988: GO 29040
// for i in tmp do
28990: LD_ADDR_VAR 0 1
28994: PUSH
28995: LD_VAR 0 2
28999: PUSH
29000: FOR_IN
29001: IFFALSE 29038
// if GetCargo ( i , mat_artifact ) = 0 then
29003: LD_VAR 0 1
29007: PPUSH
29008: LD_INT 4
29010: PPUSH
29011: CALL_OW 289
29015: PUSH
29016: LD_INT 0
29018: EQUAL
29019: IFFALSE 29036
// SetCargo ( i , mat_siberit , 100 ) ;
29021: LD_VAR 0 1
29025: PPUSH
29026: LD_INT 3
29028: PPUSH
29029: LD_INT 100
29031: PPUSH
29032: CALL_OW 290
29036: GO 29000
29038: POP
29039: POP
// end ;
29040: PPOPN 2
29042: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29043: LD_EXP 52
29047: PUSH
29048: LD_EXP 97
29052: AND
29053: IFFALSE 29236
29055: GO 29057
29057: DISABLE
29058: LD_INT 0
29060: PPUSH
29061: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29062: LD_ADDR_VAR 0 2
29066: PUSH
29067: LD_INT 22
29069: PUSH
29070: LD_OWVAR 2
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PPUSH
29079: CALL_OW 69
29083: ST_TO_ADDR
// if not tmp then
29084: LD_VAR 0 2
29088: NOT
29089: IFFALSE 29093
// exit ;
29091: GO 29236
// for i := 1 to 2 do
29093: LD_ADDR_VAR 0 1
29097: PUSH
29098: DOUBLE
29099: LD_INT 1
29101: DEC
29102: ST_TO_ADDR
29103: LD_INT 2
29105: PUSH
29106: FOR_TO
29107: IFFALSE 29234
// begin uc_side := your_side ;
29109: LD_ADDR_OWVAR 20
29113: PUSH
29114: LD_OWVAR 2
29118: ST_TO_ADDR
// uc_nation := nation_american ;
29119: LD_ADDR_OWVAR 21
29123: PUSH
29124: LD_INT 1
29126: ST_TO_ADDR
// vc_chassis := us_morphling ;
29127: LD_ADDR_OWVAR 37
29131: PUSH
29132: LD_INT 5
29134: ST_TO_ADDR
// vc_engine := engine_siberite ;
29135: LD_ADDR_OWVAR 39
29139: PUSH
29140: LD_INT 3
29142: ST_TO_ADDR
// vc_control := control_computer ;
29143: LD_ADDR_OWVAR 38
29147: PUSH
29148: LD_INT 3
29150: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29151: LD_ADDR_OWVAR 40
29155: PUSH
29156: LD_INT 10
29158: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29159: LD_VAR 0 2
29163: PUSH
29164: LD_INT 1
29166: ARRAY
29167: PPUSH
29168: CALL_OW 310
29172: NOT
29173: IFFALSE 29220
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29175: CALL_OW 45
29179: PPUSH
29180: LD_VAR 0 2
29184: PUSH
29185: LD_INT 1
29187: ARRAY
29188: PPUSH
29189: CALL_OW 250
29193: PPUSH
29194: LD_VAR 0 2
29198: PUSH
29199: LD_INT 1
29201: ARRAY
29202: PPUSH
29203: CALL_OW 251
29207: PPUSH
29208: LD_INT 12
29210: PPUSH
29211: LD_INT 1
29213: PPUSH
29214: CALL_OW 50
29218: GO 29232
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29220: CALL_OW 45
29224: PPUSH
29225: LD_INT 1
29227: PPUSH
29228: CALL_OW 51
// end ;
29232: GO 29106
29234: POP
29235: POP
// end ;
29236: PPOPN 2
29238: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29239: LD_EXP 52
29243: PUSH
29244: LD_EXP 98
29248: AND
29249: IFFALSE 29471
29251: GO 29253
29253: DISABLE
29254: LD_INT 0
29256: PPUSH
29257: PPUSH
29258: PPUSH
29259: PPUSH
29260: PPUSH
29261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29262: LD_ADDR_VAR 0 6
29266: PUSH
29267: LD_INT 22
29269: PUSH
29270: LD_OWVAR 2
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 21
29281: PUSH
29282: LD_INT 1
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 3
29291: PUSH
29292: LD_INT 23
29294: PUSH
29295: LD_INT 0
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: LIST
29310: PPUSH
29311: CALL_OW 69
29315: ST_TO_ADDR
// if not tmp then
29316: LD_VAR 0 6
29320: NOT
29321: IFFALSE 29325
// exit ;
29323: GO 29471
// s1 := rand ( 1 , 4 ) ;
29325: LD_ADDR_VAR 0 2
29329: PUSH
29330: LD_INT 1
29332: PPUSH
29333: LD_INT 4
29335: PPUSH
29336: CALL_OW 12
29340: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29341: LD_ADDR_VAR 0 4
29345: PUSH
29346: LD_VAR 0 6
29350: PUSH
29351: LD_INT 1
29353: ARRAY
29354: PPUSH
29355: LD_VAR 0 2
29359: PPUSH
29360: CALL_OW 259
29364: ST_TO_ADDR
// if s1 = 1 then
29365: LD_VAR 0 2
29369: PUSH
29370: LD_INT 1
29372: EQUAL
29373: IFFALSE 29393
// s2 := rand ( 2 , 4 ) else
29375: LD_ADDR_VAR 0 3
29379: PUSH
29380: LD_INT 2
29382: PPUSH
29383: LD_INT 4
29385: PPUSH
29386: CALL_OW 12
29390: ST_TO_ADDR
29391: GO 29401
// s2 := 1 ;
29393: LD_ADDR_VAR 0 3
29397: PUSH
29398: LD_INT 1
29400: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29401: LD_ADDR_VAR 0 5
29405: PUSH
29406: LD_VAR 0 6
29410: PUSH
29411: LD_INT 1
29413: ARRAY
29414: PPUSH
29415: LD_VAR 0 3
29419: PPUSH
29420: CALL_OW 259
29424: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29425: LD_VAR 0 6
29429: PUSH
29430: LD_INT 1
29432: ARRAY
29433: PPUSH
29434: LD_VAR 0 2
29438: PPUSH
29439: LD_VAR 0 5
29443: PPUSH
29444: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29448: LD_VAR 0 6
29452: PUSH
29453: LD_INT 1
29455: ARRAY
29456: PPUSH
29457: LD_VAR 0 3
29461: PPUSH
29462: LD_VAR 0 4
29466: PPUSH
29467: CALL_OW 237
// end ;
29471: PPOPN 6
29473: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29474: LD_EXP 52
29478: PUSH
29479: LD_EXP 99
29483: AND
29484: IFFALSE 29563
29486: GO 29488
29488: DISABLE
29489: LD_INT 0
29491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29492: LD_ADDR_VAR 0 1
29496: PUSH
29497: LD_INT 22
29499: PUSH
29500: LD_OWVAR 2
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 30
29511: PUSH
29512: LD_INT 3
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PPUSH
29523: CALL_OW 69
29527: ST_TO_ADDR
// if not tmp then
29528: LD_VAR 0 1
29532: NOT
29533: IFFALSE 29537
// exit ;
29535: GO 29563
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29537: LD_VAR 0 1
29541: PUSH
29542: LD_INT 1
29544: PPUSH
29545: LD_VAR 0 1
29549: PPUSH
29550: CALL_OW 12
29554: ARRAY
29555: PPUSH
29556: LD_INT 1
29558: PPUSH
29559: CALL_OW 234
// end ;
29563: PPOPN 1
29565: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29566: LD_EXP 52
29570: PUSH
29571: LD_EXP 100
29575: AND
29576: IFFALSE 29688
29578: GO 29580
29580: DISABLE
29581: LD_INT 0
29583: PPUSH
29584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29585: LD_ADDR_VAR 0 2
29589: PUSH
29590: LD_INT 22
29592: PUSH
29593: LD_OWVAR 2
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 2
29604: PUSH
29605: LD_INT 30
29607: PUSH
29608: LD_INT 27
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 30
29617: PUSH
29618: LD_INT 26
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 30
29627: PUSH
29628: LD_INT 28
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PPUSH
29645: CALL_OW 69
29649: ST_TO_ADDR
// if not tmp then
29650: LD_VAR 0 2
29654: NOT
29655: IFFALSE 29659
// exit ;
29657: GO 29688
// for i in tmp do
29659: LD_ADDR_VAR 0 1
29663: PUSH
29664: LD_VAR 0 2
29668: PUSH
29669: FOR_IN
29670: IFFALSE 29686
// SetLives ( i , 1 ) ;
29672: LD_VAR 0 1
29676: PPUSH
29677: LD_INT 1
29679: PPUSH
29680: CALL_OW 234
29684: GO 29669
29686: POP
29687: POP
// end ;
29688: PPOPN 2
29690: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29691: LD_EXP 52
29695: PUSH
29696: LD_EXP 101
29700: AND
29701: IFFALSE 29988
29703: GO 29705
29705: DISABLE
29706: LD_INT 0
29708: PPUSH
29709: PPUSH
29710: PPUSH
// begin i := rand ( 1 , 7 ) ;
29711: LD_ADDR_VAR 0 1
29715: PUSH
29716: LD_INT 1
29718: PPUSH
29719: LD_INT 7
29721: PPUSH
29722: CALL_OW 12
29726: ST_TO_ADDR
// case i of 1 :
29727: LD_VAR 0 1
29731: PUSH
29732: LD_INT 1
29734: DOUBLE
29735: EQUAL
29736: IFTRUE 29740
29738: GO 29750
29740: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29741: LD_STRING earthquake(getX(game), 0, 32)
29743: PPUSH
29744: CALL_OW 559
29748: GO 29988
29750: LD_INT 2
29752: DOUBLE
29753: EQUAL
29754: IFTRUE 29758
29756: GO 29772
29758: POP
// begin ToLua ( displayStucuk(); ) ;
29759: LD_STRING displayStucuk();
29761: PPUSH
29762: CALL_OW 559
// ResetFog ;
29766: CALL_OW 335
// end ; 3 :
29770: GO 29988
29772: LD_INT 3
29774: DOUBLE
29775: EQUAL
29776: IFTRUE 29780
29778: GO 29884
29780: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29781: LD_ADDR_VAR 0 2
29785: PUSH
29786: LD_INT 22
29788: PUSH
29789: LD_OWVAR 2
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 25
29800: PUSH
29801: LD_INT 1
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PPUSH
29812: CALL_OW 69
29816: ST_TO_ADDR
// if not tmp then
29817: LD_VAR 0 2
29821: NOT
29822: IFFALSE 29826
// exit ;
29824: GO 29988
// un := tmp [ rand ( 1 , tmp ) ] ;
29826: LD_ADDR_VAR 0 3
29830: PUSH
29831: LD_VAR 0 2
29835: PUSH
29836: LD_INT 1
29838: PPUSH
29839: LD_VAR 0 2
29843: PPUSH
29844: CALL_OW 12
29848: ARRAY
29849: ST_TO_ADDR
// if Crawls ( un ) then
29850: LD_VAR 0 3
29854: PPUSH
29855: CALL_OW 318
29859: IFFALSE 29870
// ComWalk ( un ) ;
29861: LD_VAR 0 3
29865: PPUSH
29866: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29870: LD_VAR 0 3
29874: PPUSH
29875: LD_INT 8
29877: PPUSH
29878: CALL_OW 336
// end ; 4 :
29882: GO 29988
29884: LD_INT 4
29886: DOUBLE
29887: EQUAL
29888: IFTRUE 29892
29890: GO 29966
29892: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29893: LD_ADDR_VAR 0 2
29897: PUSH
29898: LD_INT 22
29900: PUSH
29901: LD_OWVAR 2
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 30
29912: PUSH
29913: LD_INT 29
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PPUSH
29924: CALL_OW 69
29928: ST_TO_ADDR
// if not tmp then
29929: LD_VAR 0 2
29933: NOT
29934: IFFALSE 29938
// exit ;
29936: GO 29988
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29938: LD_VAR 0 2
29942: PUSH
29943: LD_INT 1
29945: ARRAY
29946: PPUSH
29947: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29951: LD_VAR 0 2
29955: PUSH
29956: LD_INT 1
29958: ARRAY
29959: PPUSH
29960: CALL_OW 65
// end ; 5 .. 7 :
29964: GO 29988
29966: LD_INT 5
29968: DOUBLE
29969: GREATEREQUAL
29970: IFFALSE 29978
29972: LD_INT 7
29974: DOUBLE
29975: LESSEQUAL
29976: IFTRUE 29980
29978: GO 29987
29980: POP
// StreamSibBomb ; end ;
29981: CALL 26225 0 0
29985: GO 29988
29987: POP
// end ;
29988: PPOPN 3
29990: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29991: LD_EXP 52
29995: PUSH
29996: LD_EXP 102
30000: AND
30001: IFFALSE 30157
30003: GO 30005
30005: DISABLE
30006: LD_INT 0
30008: PPUSH
30009: PPUSH
30010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30011: LD_ADDR_VAR 0 2
30015: PUSH
30016: LD_INT 81
30018: PUSH
30019: LD_OWVAR 2
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 2
30030: PUSH
30031: LD_INT 21
30033: PUSH
30034: LD_INT 1
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 21
30043: PUSH
30044: LD_INT 2
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: LIST
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PPUSH
30060: CALL_OW 69
30064: ST_TO_ADDR
// if not tmp then
30065: LD_VAR 0 2
30069: NOT
30070: IFFALSE 30074
// exit ;
30072: GO 30157
// p := 0 ;
30074: LD_ADDR_VAR 0 3
30078: PUSH
30079: LD_INT 0
30081: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30082: LD_INT 35
30084: PPUSH
30085: CALL_OW 67
// p := p + 1 ;
30089: LD_ADDR_VAR 0 3
30093: PUSH
30094: LD_VAR 0 3
30098: PUSH
30099: LD_INT 1
30101: PLUS
30102: ST_TO_ADDR
// for i in tmp do
30103: LD_ADDR_VAR 0 1
30107: PUSH
30108: LD_VAR 0 2
30112: PUSH
30113: FOR_IN
30114: IFFALSE 30145
// if GetLives ( i ) < 1000 then
30116: LD_VAR 0 1
30120: PPUSH
30121: CALL_OW 256
30125: PUSH
30126: LD_INT 1000
30128: LESS
30129: IFFALSE 30143
// SetLives ( i , 1000 ) ;
30131: LD_VAR 0 1
30135: PPUSH
30136: LD_INT 1000
30138: PPUSH
30139: CALL_OW 234
30143: GO 30113
30145: POP
30146: POP
// until p > 20 ;
30147: LD_VAR 0 3
30151: PUSH
30152: LD_INT 20
30154: GREATER
30155: IFFALSE 30082
// end ;
30157: PPOPN 3
30159: END
// every 0 0$1 trigger StreamModeActive and sTime do
30160: LD_EXP 52
30164: PUSH
30165: LD_EXP 103
30169: AND
30170: IFFALSE 30205
30172: GO 30174
30174: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30175: LD_INT 28
30177: PPUSH
30178: LD_OWVAR 2
30182: PPUSH
30183: LD_INT 2
30185: PPUSH
30186: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30190: LD_INT 30
30192: PPUSH
30193: LD_OWVAR 2
30197: PPUSH
30198: LD_INT 2
30200: PPUSH
30201: CALL_OW 322
// end ;
30205: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30206: LD_EXP 52
30210: PUSH
30211: LD_EXP 104
30215: AND
30216: IFFALSE 30337
30218: GO 30220
30220: DISABLE
30221: LD_INT 0
30223: PPUSH
30224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30225: LD_ADDR_VAR 0 2
30229: PUSH
30230: LD_INT 22
30232: PUSH
30233: LD_OWVAR 2
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 21
30244: PUSH
30245: LD_INT 1
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 3
30254: PUSH
30255: LD_INT 23
30257: PUSH
30258: LD_INT 0
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: LIST
30273: PPUSH
30274: CALL_OW 69
30278: ST_TO_ADDR
// if not tmp then
30279: LD_VAR 0 2
30283: NOT
30284: IFFALSE 30288
// exit ;
30286: GO 30337
// for i in tmp do
30288: LD_ADDR_VAR 0 1
30292: PUSH
30293: LD_VAR 0 2
30297: PUSH
30298: FOR_IN
30299: IFFALSE 30335
// begin if Crawls ( i ) then
30301: LD_VAR 0 1
30305: PPUSH
30306: CALL_OW 318
30310: IFFALSE 30321
// ComWalk ( i ) ;
30312: LD_VAR 0 1
30316: PPUSH
30317: CALL_OW 138
// SetClass ( i , 2 ) ;
30321: LD_VAR 0 1
30325: PPUSH
30326: LD_INT 2
30328: PPUSH
30329: CALL_OW 336
// end ;
30333: GO 30298
30335: POP
30336: POP
// end ;
30337: PPOPN 2
30339: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30340: LD_EXP 52
30344: PUSH
30345: LD_EXP 105
30349: AND
30350: IFFALSE 30638
30352: GO 30354
30354: DISABLE
30355: LD_INT 0
30357: PPUSH
30358: PPUSH
30359: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30360: LD_OWVAR 2
30364: PPUSH
30365: LD_INT 9
30367: PPUSH
30368: LD_INT 1
30370: PPUSH
30371: LD_INT 1
30373: PPUSH
30374: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30378: LD_INT 9
30380: PPUSH
30381: LD_OWVAR 2
30385: PPUSH
30386: CALL_OW 343
// uc_side := 9 ;
30390: LD_ADDR_OWVAR 20
30394: PUSH
30395: LD_INT 9
30397: ST_TO_ADDR
// uc_nation := 2 ;
30398: LD_ADDR_OWVAR 21
30402: PUSH
30403: LD_INT 2
30405: ST_TO_ADDR
// hc_name := Dark Warrior ;
30406: LD_ADDR_OWVAR 26
30410: PUSH
30411: LD_STRING Dark Warrior
30413: ST_TO_ADDR
// hc_gallery :=  ;
30414: LD_ADDR_OWVAR 33
30418: PUSH
30419: LD_STRING 
30421: ST_TO_ADDR
// hc_noskilllimit := true ;
30422: LD_ADDR_OWVAR 76
30426: PUSH
30427: LD_INT 1
30429: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30430: LD_ADDR_OWVAR 31
30434: PUSH
30435: LD_INT 30
30437: PUSH
30438: LD_INT 30
30440: PUSH
30441: LD_INT 30
30443: PUSH
30444: LD_INT 30
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: ST_TO_ADDR
// un := CreateHuman ;
30453: LD_ADDR_VAR 0 3
30457: PUSH
30458: CALL_OW 44
30462: ST_TO_ADDR
// hc_noskilllimit := false ;
30463: LD_ADDR_OWVAR 76
30467: PUSH
30468: LD_INT 0
30470: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30471: LD_VAR 0 3
30475: PPUSH
30476: LD_INT 1
30478: PPUSH
30479: CALL_OW 51
// ToLua ( playRanger() ) ;
30483: LD_STRING playRanger()
30485: PPUSH
30486: CALL_OW 559
// p := 0 ;
30490: LD_ADDR_VAR 0 2
30494: PUSH
30495: LD_INT 0
30497: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30498: LD_INT 35
30500: PPUSH
30501: CALL_OW 67
// p := p + 1 ;
30505: LD_ADDR_VAR 0 2
30509: PUSH
30510: LD_VAR 0 2
30514: PUSH
30515: LD_INT 1
30517: PLUS
30518: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30519: LD_VAR 0 3
30523: PPUSH
30524: CALL_OW 256
30528: PUSH
30529: LD_INT 1000
30531: LESS
30532: IFFALSE 30546
// SetLives ( un , 1000 ) ;
30534: LD_VAR 0 3
30538: PPUSH
30539: LD_INT 1000
30541: PPUSH
30542: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30546: LD_VAR 0 3
30550: PPUSH
30551: LD_INT 81
30553: PUSH
30554: LD_OWVAR 2
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 91
30565: PUSH
30566: LD_VAR 0 3
30570: PUSH
30571: LD_INT 30
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: LIST
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PPUSH
30583: CALL_OW 69
30587: PPUSH
30588: LD_VAR 0 3
30592: PPUSH
30593: CALL_OW 74
30597: PPUSH
30598: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30602: LD_VAR 0 2
30606: PUSH
30607: LD_INT 80
30609: GREATER
30610: PUSH
30611: LD_VAR 0 3
30615: PPUSH
30616: CALL_OW 301
30620: OR
30621: IFFALSE 30498
// if un then
30623: LD_VAR 0 3
30627: IFFALSE 30638
// RemoveUnit ( un ) ;
30629: LD_VAR 0 3
30633: PPUSH
30634: CALL_OW 64
// end ;
30638: PPOPN 3
30640: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30641: LD_EXP 106
30645: IFFALSE 30761
30647: GO 30649
30649: DISABLE
30650: LD_INT 0
30652: PPUSH
30653: PPUSH
30654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30655: LD_ADDR_VAR 0 2
30659: PUSH
30660: LD_INT 81
30662: PUSH
30663: LD_OWVAR 2
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 21
30674: PUSH
30675: LD_INT 1
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PPUSH
30686: CALL_OW 69
30690: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30691: LD_STRING playComputer()
30693: PPUSH
30694: CALL_OW 559
// if not tmp then
30698: LD_VAR 0 2
30702: NOT
30703: IFFALSE 30707
// exit ;
30705: GO 30761
// for i in tmp do
30707: LD_ADDR_VAR 0 1
30711: PUSH
30712: LD_VAR 0 2
30716: PUSH
30717: FOR_IN
30718: IFFALSE 30759
// for j := 1 to 4 do
30720: LD_ADDR_VAR 0 3
30724: PUSH
30725: DOUBLE
30726: LD_INT 1
30728: DEC
30729: ST_TO_ADDR
30730: LD_INT 4
30732: PUSH
30733: FOR_TO
30734: IFFALSE 30755
// SetSkill ( i , j , 10 ) ;
30736: LD_VAR 0 1
30740: PPUSH
30741: LD_VAR 0 3
30745: PPUSH
30746: LD_INT 10
30748: PPUSH
30749: CALL_OW 237
30753: GO 30733
30755: POP
30756: POP
30757: GO 30717
30759: POP
30760: POP
// end ;
30761: PPOPN 3
30763: END
// every 0 0$1 trigger s30 do var i , tmp ;
30764: LD_EXP 107
30768: IFFALSE 30837
30770: GO 30772
30772: DISABLE
30773: LD_INT 0
30775: PPUSH
30776: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30777: LD_ADDR_VAR 0 2
30781: PUSH
30782: LD_INT 22
30784: PUSH
30785: LD_OWVAR 2
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PPUSH
30794: CALL_OW 69
30798: ST_TO_ADDR
// if not tmp then
30799: LD_VAR 0 2
30803: NOT
30804: IFFALSE 30808
// exit ;
30806: GO 30837
// for i in tmp do
30808: LD_ADDR_VAR 0 1
30812: PUSH
30813: LD_VAR 0 2
30817: PUSH
30818: FOR_IN
30819: IFFALSE 30835
// SetLives ( i , 300 ) ;
30821: LD_VAR 0 1
30825: PPUSH
30826: LD_INT 300
30828: PPUSH
30829: CALL_OW 234
30833: GO 30818
30835: POP
30836: POP
// end ;
30837: PPOPN 2
30839: END
// every 0 0$1 trigger s60 do var i , tmp ;
30840: LD_EXP 108
30844: IFFALSE 30913
30846: GO 30848
30848: DISABLE
30849: LD_INT 0
30851: PPUSH
30852: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30853: LD_ADDR_VAR 0 2
30857: PUSH
30858: LD_INT 22
30860: PUSH
30861: LD_OWVAR 2
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PPUSH
30870: CALL_OW 69
30874: ST_TO_ADDR
// if not tmp then
30875: LD_VAR 0 2
30879: NOT
30880: IFFALSE 30884
// exit ;
30882: GO 30913
// for i in tmp do
30884: LD_ADDR_VAR 0 1
30888: PUSH
30889: LD_VAR 0 2
30893: PUSH
30894: FOR_IN
30895: IFFALSE 30911
// SetLives ( i , 600 ) ;
30897: LD_VAR 0 1
30901: PPUSH
30902: LD_INT 600
30904: PPUSH
30905: CALL_OW 234
30909: GO 30894
30911: POP
30912: POP
// end ;
30913: PPOPN 2
30915: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30916: LD_INT 0
30918: PPUSH
// case cmd of 301 :
30919: LD_VAR 0 1
30923: PUSH
30924: LD_INT 301
30926: DOUBLE
30927: EQUAL
30928: IFTRUE 30932
30930: GO 30964
30932: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30933: LD_VAR 0 6
30937: PPUSH
30938: LD_VAR 0 7
30942: PPUSH
30943: LD_VAR 0 8
30947: PPUSH
30948: LD_VAR 0 4
30952: PPUSH
30953: LD_VAR 0 5
30957: PPUSH
30958: CALL 32165 0 5
30962: GO 31085
30964: LD_INT 302
30966: DOUBLE
30967: EQUAL
30968: IFTRUE 30972
30970: GO 31009
30972: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30973: LD_VAR 0 6
30977: PPUSH
30978: LD_VAR 0 7
30982: PPUSH
30983: LD_VAR 0 8
30987: PPUSH
30988: LD_VAR 0 9
30992: PPUSH
30993: LD_VAR 0 4
30997: PPUSH
30998: LD_VAR 0 5
31002: PPUSH
31003: CALL 32256 0 6
31007: GO 31085
31009: LD_INT 303
31011: DOUBLE
31012: EQUAL
31013: IFTRUE 31017
31015: GO 31054
31017: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31018: LD_VAR 0 6
31022: PPUSH
31023: LD_VAR 0 7
31027: PPUSH
31028: LD_VAR 0 8
31032: PPUSH
31033: LD_VAR 0 9
31037: PPUSH
31038: LD_VAR 0 4
31042: PPUSH
31043: LD_VAR 0 5
31047: PPUSH
31048: CALL 31090 0 6
31052: GO 31085
31054: LD_INT 304
31056: DOUBLE
31057: EQUAL
31058: IFTRUE 31062
31060: GO 31084
31062: POP
// hHackTeleport ( unit , x , y ) ; end ;
31063: LD_VAR 0 2
31067: PPUSH
31068: LD_VAR 0 4
31072: PPUSH
31073: LD_VAR 0 5
31077: PPUSH
31078: CALL 32849 0 3
31082: GO 31085
31084: POP
// end ;
31085: LD_VAR 0 12
31089: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31090: LD_INT 0
31092: PPUSH
31093: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31094: LD_VAR 0 1
31098: PUSH
31099: LD_INT 1
31101: LESS
31102: PUSH
31103: LD_VAR 0 1
31107: PUSH
31108: LD_INT 3
31110: GREATER
31111: OR
31112: PUSH
31113: LD_VAR 0 5
31117: PPUSH
31118: LD_VAR 0 6
31122: PPUSH
31123: CALL_OW 428
31127: OR
31128: IFFALSE 31132
// exit ;
31130: GO 31852
// uc_side := your_side ;
31132: LD_ADDR_OWVAR 20
31136: PUSH
31137: LD_OWVAR 2
31141: ST_TO_ADDR
// uc_nation := nation ;
31142: LD_ADDR_OWVAR 21
31146: PUSH
31147: LD_VAR 0 1
31151: ST_TO_ADDR
// bc_level = 1 ;
31152: LD_ADDR_OWVAR 43
31156: PUSH
31157: LD_INT 1
31159: ST_TO_ADDR
// case btype of 1 :
31160: LD_VAR 0 2
31164: PUSH
31165: LD_INT 1
31167: DOUBLE
31168: EQUAL
31169: IFTRUE 31173
31171: GO 31184
31173: POP
// bc_type := b_depot ; 2 :
31174: LD_ADDR_OWVAR 42
31178: PUSH
31179: LD_INT 0
31181: ST_TO_ADDR
31182: GO 31796
31184: LD_INT 2
31186: DOUBLE
31187: EQUAL
31188: IFTRUE 31192
31190: GO 31203
31192: POP
// bc_type := b_warehouse ; 3 :
31193: LD_ADDR_OWVAR 42
31197: PUSH
31198: LD_INT 1
31200: ST_TO_ADDR
31201: GO 31796
31203: LD_INT 3
31205: DOUBLE
31206: EQUAL
31207: IFTRUE 31211
31209: GO 31222
31211: POP
// bc_type := b_lab ; 4 .. 9 :
31212: LD_ADDR_OWVAR 42
31216: PUSH
31217: LD_INT 6
31219: ST_TO_ADDR
31220: GO 31796
31222: LD_INT 4
31224: DOUBLE
31225: GREATEREQUAL
31226: IFFALSE 31234
31228: LD_INT 9
31230: DOUBLE
31231: LESSEQUAL
31232: IFTRUE 31236
31234: GO 31288
31236: POP
// begin bc_type := b_lab_half ;
31237: LD_ADDR_OWVAR 42
31241: PUSH
31242: LD_INT 7
31244: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31245: LD_ADDR_OWVAR 44
31249: PUSH
31250: LD_INT 10
31252: PUSH
31253: LD_INT 11
31255: PUSH
31256: LD_INT 12
31258: PUSH
31259: LD_INT 15
31261: PUSH
31262: LD_INT 14
31264: PUSH
31265: LD_INT 13
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: PUSH
31276: LD_VAR 0 2
31280: PUSH
31281: LD_INT 3
31283: MINUS
31284: ARRAY
31285: ST_TO_ADDR
// end ; 10 .. 13 :
31286: GO 31796
31288: LD_INT 10
31290: DOUBLE
31291: GREATEREQUAL
31292: IFFALSE 31300
31294: LD_INT 13
31296: DOUBLE
31297: LESSEQUAL
31298: IFTRUE 31302
31300: GO 31379
31302: POP
// begin bc_type := b_lab_full ;
31303: LD_ADDR_OWVAR 42
31307: PUSH
31308: LD_INT 8
31310: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31311: LD_ADDR_OWVAR 44
31315: PUSH
31316: LD_INT 10
31318: PUSH
31319: LD_INT 12
31321: PUSH
31322: LD_INT 14
31324: PUSH
31325: LD_INT 13
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: PUSH
31334: LD_VAR 0 2
31338: PUSH
31339: LD_INT 9
31341: MINUS
31342: ARRAY
31343: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31344: LD_ADDR_OWVAR 45
31348: PUSH
31349: LD_INT 11
31351: PUSH
31352: LD_INT 15
31354: PUSH
31355: LD_INT 12
31357: PUSH
31358: LD_INT 15
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: PUSH
31367: LD_VAR 0 2
31371: PUSH
31372: LD_INT 9
31374: MINUS
31375: ARRAY
31376: ST_TO_ADDR
// end ; 14 :
31377: GO 31796
31379: LD_INT 14
31381: DOUBLE
31382: EQUAL
31383: IFTRUE 31387
31385: GO 31398
31387: POP
// bc_type := b_workshop ; 15 :
31388: LD_ADDR_OWVAR 42
31392: PUSH
31393: LD_INT 2
31395: ST_TO_ADDR
31396: GO 31796
31398: LD_INT 15
31400: DOUBLE
31401: EQUAL
31402: IFTRUE 31406
31404: GO 31417
31406: POP
// bc_type := b_factory ; 16 :
31407: LD_ADDR_OWVAR 42
31411: PUSH
31412: LD_INT 3
31414: ST_TO_ADDR
31415: GO 31796
31417: LD_INT 16
31419: DOUBLE
31420: EQUAL
31421: IFTRUE 31425
31423: GO 31436
31425: POP
// bc_type := b_ext_gun ; 17 :
31426: LD_ADDR_OWVAR 42
31430: PUSH
31431: LD_INT 17
31433: ST_TO_ADDR
31434: GO 31796
31436: LD_INT 17
31438: DOUBLE
31439: EQUAL
31440: IFTRUE 31444
31442: GO 31472
31444: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31445: LD_ADDR_OWVAR 42
31449: PUSH
31450: LD_INT 19
31452: PUSH
31453: LD_INT 23
31455: PUSH
31456: LD_INT 19
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: LIST
31463: PUSH
31464: LD_VAR 0 1
31468: ARRAY
31469: ST_TO_ADDR
31470: GO 31796
31472: LD_INT 18
31474: DOUBLE
31475: EQUAL
31476: IFTRUE 31480
31478: GO 31491
31480: POP
// bc_type := b_ext_radar ; 19 :
31481: LD_ADDR_OWVAR 42
31485: PUSH
31486: LD_INT 20
31488: ST_TO_ADDR
31489: GO 31796
31491: LD_INT 19
31493: DOUBLE
31494: EQUAL
31495: IFTRUE 31499
31497: GO 31510
31499: POP
// bc_type := b_ext_radio ; 20 :
31500: LD_ADDR_OWVAR 42
31504: PUSH
31505: LD_INT 22
31507: ST_TO_ADDR
31508: GO 31796
31510: LD_INT 20
31512: DOUBLE
31513: EQUAL
31514: IFTRUE 31518
31516: GO 31529
31518: POP
// bc_type := b_ext_siberium ; 21 :
31519: LD_ADDR_OWVAR 42
31523: PUSH
31524: LD_INT 21
31526: ST_TO_ADDR
31527: GO 31796
31529: LD_INT 21
31531: DOUBLE
31532: EQUAL
31533: IFTRUE 31537
31535: GO 31548
31537: POP
// bc_type := b_ext_computer ; 22 :
31538: LD_ADDR_OWVAR 42
31542: PUSH
31543: LD_INT 24
31545: ST_TO_ADDR
31546: GO 31796
31548: LD_INT 22
31550: DOUBLE
31551: EQUAL
31552: IFTRUE 31556
31554: GO 31567
31556: POP
// bc_type := b_ext_track ; 23 :
31557: LD_ADDR_OWVAR 42
31561: PUSH
31562: LD_INT 16
31564: ST_TO_ADDR
31565: GO 31796
31567: LD_INT 23
31569: DOUBLE
31570: EQUAL
31571: IFTRUE 31575
31573: GO 31586
31575: POP
// bc_type := b_ext_laser ; 24 :
31576: LD_ADDR_OWVAR 42
31580: PUSH
31581: LD_INT 25
31583: ST_TO_ADDR
31584: GO 31796
31586: LD_INT 24
31588: DOUBLE
31589: EQUAL
31590: IFTRUE 31594
31592: GO 31605
31594: POP
// bc_type := b_control_tower ; 25 :
31595: LD_ADDR_OWVAR 42
31599: PUSH
31600: LD_INT 36
31602: ST_TO_ADDR
31603: GO 31796
31605: LD_INT 25
31607: DOUBLE
31608: EQUAL
31609: IFTRUE 31613
31611: GO 31624
31613: POP
// bc_type := b_breastwork ; 26 :
31614: LD_ADDR_OWVAR 42
31618: PUSH
31619: LD_INT 31
31621: ST_TO_ADDR
31622: GO 31796
31624: LD_INT 26
31626: DOUBLE
31627: EQUAL
31628: IFTRUE 31632
31630: GO 31643
31632: POP
// bc_type := b_bunker ; 27 :
31633: LD_ADDR_OWVAR 42
31637: PUSH
31638: LD_INT 32
31640: ST_TO_ADDR
31641: GO 31796
31643: LD_INT 27
31645: DOUBLE
31646: EQUAL
31647: IFTRUE 31651
31649: GO 31662
31651: POP
// bc_type := b_turret ; 28 :
31652: LD_ADDR_OWVAR 42
31656: PUSH
31657: LD_INT 33
31659: ST_TO_ADDR
31660: GO 31796
31662: LD_INT 28
31664: DOUBLE
31665: EQUAL
31666: IFTRUE 31670
31668: GO 31681
31670: POP
// bc_type := b_armoury ; 29 :
31671: LD_ADDR_OWVAR 42
31675: PUSH
31676: LD_INT 4
31678: ST_TO_ADDR
31679: GO 31796
31681: LD_INT 29
31683: DOUBLE
31684: EQUAL
31685: IFTRUE 31689
31687: GO 31700
31689: POP
// bc_type := b_barracks ; 30 :
31690: LD_ADDR_OWVAR 42
31694: PUSH
31695: LD_INT 5
31697: ST_TO_ADDR
31698: GO 31796
31700: LD_INT 30
31702: DOUBLE
31703: EQUAL
31704: IFTRUE 31708
31706: GO 31719
31708: POP
// bc_type := b_solar_power ; 31 :
31709: LD_ADDR_OWVAR 42
31713: PUSH
31714: LD_INT 27
31716: ST_TO_ADDR
31717: GO 31796
31719: LD_INT 31
31721: DOUBLE
31722: EQUAL
31723: IFTRUE 31727
31725: GO 31738
31727: POP
// bc_type := b_oil_power ; 32 :
31728: LD_ADDR_OWVAR 42
31732: PUSH
31733: LD_INT 26
31735: ST_TO_ADDR
31736: GO 31796
31738: LD_INT 32
31740: DOUBLE
31741: EQUAL
31742: IFTRUE 31746
31744: GO 31757
31746: POP
// bc_type := b_siberite_power ; 33 :
31747: LD_ADDR_OWVAR 42
31751: PUSH
31752: LD_INT 28
31754: ST_TO_ADDR
31755: GO 31796
31757: LD_INT 33
31759: DOUBLE
31760: EQUAL
31761: IFTRUE 31765
31763: GO 31776
31765: POP
// bc_type := b_oil_mine ; 34 :
31766: LD_ADDR_OWVAR 42
31770: PUSH
31771: LD_INT 29
31773: ST_TO_ADDR
31774: GO 31796
31776: LD_INT 34
31778: DOUBLE
31779: EQUAL
31780: IFTRUE 31784
31782: GO 31795
31784: POP
// bc_type := b_siberite_mine ; end ;
31785: LD_ADDR_OWVAR 42
31789: PUSH
31790: LD_INT 30
31792: ST_TO_ADDR
31793: GO 31796
31795: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31796: LD_ADDR_VAR 0 8
31800: PUSH
31801: LD_VAR 0 5
31805: PPUSH
31806: LD_VAR 0 6
31810: PPUSH
31811: LD_VAR 0 3
31815: PPUSH
31816: CALL_OW 47
31820: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31821: LD_OWVAR 42
31825: PUSH
31826: LD_INT 32
31828: PUSH
31829: LD_INT 33
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: IN
31836: IFFALSE 31852
// PlaceWeaponTurret ( b , weapon ) ;
31838: LD_VAR 0 8
31842: PPUSH
31843: LD_VAR 0 4
31847: PPUSH
31848: CALL_OW 431
// end ;
31852: LD_VAR 0 7
31856: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31857: LD_INT 0
31859: PPUSH
31860: PPUSH
31861: PPUSH
31862: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31863: LD_ADDR_VAR 0 4
31867: PUSH
31868: LD_INT 22
31870: PUSH
31871: LD_OWVAR 2
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 2
31882: PUSH
31883: LD_INT 30
31885: PUSH
31886: LD_INT 0
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 30
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: LIST
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PPUSH
31912: CALL_OW 69
31916: ST_TO_ADDR
// if not tmp then
31917: LD_VAR 0 4
31921: NOT
31922: IFFALSE 31926
// exit ;
31924: GO 31985
// for i in tmp do
31926: LD_ADDR_VAR 0 2
31930: PUSH
31931: LD_VAR 0 4
31935: PUSH
31936: FOR_IN
31937: IFFALSE 31983
// for j = 1 to 3 do
31939: LD_ADDR_VAR 0 3
31943: PUSH
31944: DOUBLE
31945: LD_INT 1
31947: DEC
31948: ST_TO_ADDR
31949: LD_INT 3
31951: PUSH
31952: FOR_TO
31953: IFFALSE 31979
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31955: LD_VAR 0 2
31959: PPUSH
31960: CALL_OW 274
31964: PPUSH
31965: LD_VAR 0 3
31969: PPUSH
31970: LD_INT 99999
31972: PPUSH
31973: CALL_OW 277
31977: GO 31952
31979: POP
31980: POP
31981: GO 31936
31983: POP
31984: POP
// end ;
31985: LD_VAR 0 1
31989: RET
// export function hHackSetLevel10 ; var i , j ; begin
31990: LD_INT 0
31992: PPUSH
31993: PPUSH
31994: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31995: LD_ADDR_VAR 0 2
31999: PUSH
32000: LD_INT 21
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PPUSH
32010: CALL_OW 69
32014: PUSH
32015: FOR_IN
32016: IFFALSE 32068
// if IsSelected ( i ) then
32018: LD_VAR 0 2
32022: PPUSH
32023: CALL_OW 306
32027: IFFALSE 32066
// begin for j := 1 to 4 do
32029: LD_ADDR_VAR 0 3
32033: PUSH
32034: DOUBLE
32035: LD_INT 1
32037: DEC
32038: ST_TO_ADDR
32039: LD_INT 4
32041: PUSH
32042: FOR_TO
32043: IFFALSE 32064
// SetSkill ( i , j , 10 ) ;
32045: LD_VAR 0 2
32049: PPUSH
32050: LD_VAR 0 3
32054: PPUSH
32055: LD_INT 10
32057: PPUSH
32058: CALL_OW 237
32062: GO 32042
32064: POP
32065: POP
// end ;
32066: GO 32015
32068: POP
32069: POP
// end ;
32070: LD_VAR 0 1
32074: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32075: LD_INT 0
32077: PPUSH
32078: PPUSH
32079: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32080: LD_ADDR_VAR 0 2
32084: PUSH
32085: LD_INT 22
32087: PUSH
32088: LD_OWVAR 2
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 21
32099: PUSH
32100: LD_INT 1
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PPUSH
32111: CALL_OW 69
32115: PUSH
32116: FOR_IN
32117: IFFALSE 32158
// begin for j := 1 to 4 do
32119: LD_ADDR_VAR 0 3
32123: PUSH
32124: DOUBLE
32125: LD_INT 1
32127: DEC
32128: ST_TO_ADDR
32129: LD_INT 4
32131: PUSH
32132: FOR_TO
32133: IFFALSE 32154
// SetSkill ( i , j , 10 ) ;
32135: LD_VAR 0 2
32139: PPUSH
32140: LD_VAR 0 3
32144: PPUSH
32145: LD_INT 10
32147: PPUSH
32148: CALL_OW 237
32152: GO 32132
32154: POP
32155: POP
// end ;
32156: GO 32116
32158: POP
32159: POP
// end ;
32160: LD_VAR 0 1
32164: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32165: LD_INT 0
32167: PPUSH
// uc_side := your_side ;
32168: LD_ADDR_OWVAR 20
32172: PUSH
32173: LD_OWVAR 2
32177: ST_TO_ADDR
// uc_nation := nation ;
32178: LD_ADDR_OWVAR 21
32182: PUSH
32183: LD_VAR 0 1
32187: ST_TO_ADDR
// InitHc ;
32188: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32192: LD_INT 0
32194: PPUSH
32195: LD_VAR 0 2
32199: PPUSH
32200: LD_VAR 0 3
32204: PPUSH
32205: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32209: LD_VAR 0 4
32213: PPUSH
32214: LD_VAR 0 5
32218: PPUSH
32219: CALL_OW 428
32223: PUSH
32224: LD_INT 0
32226: EQUAL
32227: IFFALSE 32251
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32229: CALL_OW 44
32233: PPUSH
32234: LD_VAR 0 4
32238: PPUSH
32239: LD_VAR 0 5
32243: PPUSH
32244: LD_INT 1
32246: PPUSH
32247: CALL_OW 48
// end ;
32251: LD_VAR 0 6
32255: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32256: LD_INT 0
32258: PPUSH
32259: PPUSH
// uc_side := your_side ;
32260: LD_ADDR_OWVAR 20
32264: PUSH
32265: LD_OWVAR 2
32269: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32270: LD_VAR 0 1
32274: PUSH
32275: LD_INT 1
32277: PUSH
32278: LD_INT 2
32280: PUSH
32281: LD_INT 3
32283: PUSH
32284: LD_INT 4
32286: PUSH
32287: LD_INT 5
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: IN
32297: IFFALSE 32309
// uc_nation := nation_american else
32299: LD_ADDR_OWVAR 21
32303: PUSH
32304: LD_INT 1
32306: ST_TO_ADDR
32307: GO 32352
// if chassis in [ 11 , 12 , 13 , 14 ] then
32309: LD_VAR 0 1
32313: PUSH
32314: LD_INT 11
32316: PUSH
32317: LD_INT 12
32319: PUSH
32320: LD_INT 13
32322: PUSH
32323: LD_INT 14
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: IN
32332: IFFALSE 32344
// uc_nation := nation_arabian else
32334: LD_ADDR_OWVAR 21
32338: PUSH
32339: LD_INT 2
32341: ST_TO_ADDR
32342: GO 32352
// uc_nation := nation_russian ;
32344: LD_ADDR_OWVAR 21
32348: PUSH
32349: LD_INT 3
32351: ST_TO_ADDR
// vc_chassis := chassis ;
32352: LD_ADDR_OWVAR 37
32356: PUSH
32357: LD_VAR 0 1
32361: ST_TO_ADDR
// vc_engine := engine ;
32362: LD_ADDR_OWVAR 39
32366: PUSH
32367: LD_VAR 0 2
32371: ST_TO_ADDR
// vc_control := control ;
32372: LD_ADDR_OWVAR 38
32376: PUSH
32377: LD_VAR 0 3
32381: ST_TO_ADDR
// vc_weapon := weapon ;
32382: LD_ADDR_OWVAR 40
32386: PUSH
32387: LD_VAR 0 4
32391: ST_TO_ADDR
// un := CreateVehicle ;
32392: LD_ADDR_VAR 0 8
32396: PUSH
32397: CALL_OW 45
32401: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32402: LD_VAR 0 8
32406: PPUSH
32407: LD_INT 0
32409: PPUSH
32410: LD_INT 5
32412: PPUSH
32413: CALL_OW 12
32417: PPUSH
32418: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32422: LD_VAR 0 8
32426: PPUSH
32427: LD_VAR 0 5
32431: PPUSH
32432: LD_VAR 0 6
32436: PPUSH
32437: LD_INT 1
32439: PPUSH
32440: CALL_OW 48
// end ;
32444: LD_VAR 0 7
32448: RET
// export hInvincible ; every 1 do
32449: GO 32451
32451: DISABLE
// hInvincible := [ ] ;
32452: LD_ADDR_EXP 109
32456: PUSH
32457: EMPTY
32458: ST_TO_ADDR
32459: END
// every 10 do var i ;
32460: GO 32462
32462: DISABLE
32463: LD_INT 0
32465: PPUSH
// begin enable ;
32466: ENABLE
// if not hInvincible then
32467: LD_EXP 109
32471: NOT
32472: IFFALSE 32476
// exit ;
32474: GO 32520
// for i in hInvincible do
32476: LD_ADDR_VAR 0 1
32480: PUSH
32481: LD_EXP 109
32485: PUSH
32486: FOR_IN
32487: IFFALSE 32518
// if GetLives ( i ) < 1000 then
32489: LD_VAR 0 1
32493: PPUSH
32494: CALL_OW 256
32498: PUSH
32499: LD_INT 1000
32501: LESS
32502: IFFALSE 32516
// SetLives ( i , 1000 ) ;
32504: LD_VAR 0 1
32508: PPUSH
32509: LD_INT 1000
32511: PPUSH
32512: CALL_OW 234
32516: GO 32486
32518: POP
32519: POP
// end ;
32520: PPOPN 1
32522: END
// export function hHackInvincible ; var i ; begin
32523: LD_INT 0
32525: PPUSH
32526: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32527: LD_ADDR_VAR 0 2
32531: PUSH
32532: LD_INT 2
32534: PUSH
32535: LD_INT 21
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 21
32547: PUSH
32548: LD_INT 2
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: LIST
32559: PPUSH
32560: CALL_OW 69
32564: PUSH
32565: FOR_IN
32566: IFFALSE 32627
// if IsSelected ( i ) then
32568: LD_VAR 0 2
32572: PPUSH
32573: CALL_OW 306
32577: IFFALSE 32625
// begin if i in hInvincible then
32579: LD_VAR 0 2
32583: PUSH
32584: LD_EXP 109
32588: IN
32589: IFFALSE 32609
// hInvincible := hInvincible diff i else
32591: LD_ADDR_EXP 109
32595: PUSH
32596: LD_EXP 109
32600: PUSH
32601: LD_VAR 0 2
32605: DIFF
32606: ST_TO_ADDR
32607: GO 32625
// hInvincible := hInvincible union i ;
32609: LD_ADDR_EXP 109
32613: PUSH
32614: LD_EXP 109
32618: PUSH
32619: LD_VAR 0 2
32623: UNION
32624: ST_TO_ADDR
// end ;
32625: GO 32565
32627: POP
32628: POP
// end ;
32629: LD_VAR 0 1
32633: RET
// export function hHackInvisible ; var i , j ; begin
32634: LD_INT 0
32636: PPUSH
32637: PPUSH
32638: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32639: LD_ADDR_VAR 0 2
32643: PUSH
32644: LD_INT 21
32646: PUSH
32647: LD_INT 1
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PPUSH
32654: CALL_OW 69
32658: PUSH
32659: FOR_IN
32660: IFFALSE 32684
// if IsSelected ( i ) then
32662: LD_VAR 0 2
32666: PPUSH
32667: CALL_OW 306
32671: IFFALSE 32682
// ComForceInvisible ( i ) ;
32673: LD_VAR 0 2
32677: PPUSH
32678: CALL_OW 496
32682: GO 32659
32684: POP
32685: POP
// end ;
32686: LD_VAR 0 1
32690: RET
// export function hHackChangeYourSide ; begin
32691: LD_INT 0
32693: PPUSH
// if your_side = 8 then
32694: LD_OWVAR 2
32698: PUSH
32699: LD_INT 8
32701: EQUAL
32702: IFFALSE 32714
// your_side := 0 else
32704: LD_ADDR_OWVAR 2
32708: PUSH
32709: LD_INT 0
32711: ST_TO_ADDR
32712: GO 32728
// your_side := your_side + 1 ;
32714: LD_ADDR_OWVAR 2
32718: PUSH
32719: LD_OWVAR 2
32723: PUSH
32724: LD_INT 1
32726: PLUS
32727: ST_TO_ADDR
// end ;
32728: LD_VAR 0 1
32732: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32733: LD_INT 0
32735: PPUSH
32736: PPUSH
32737: PPUSH
// for i in all_units do
32738: LD_ADDR_VAR 0 2
32742: PUSH
32743: LD_OWVAR 3
32747: PUSH
32748: FOR_IN
32749: IFFALSE 32827
// if IsSelected ( i ) then
32751: LD_VAR 0 2
32755: PPUSH
32756: CALL_OW 306
32760: IFFALSE 32825
// begin j := GetSide ( i ) ;
32762: LD_ADDR_VAR 0 3
32766: PUSH
32767: LD_VAR 0 2
32771: PPUSH
32772: CALL_OW 255
32776: ST_TO_ADDR
// if j = 8 then
32777: LD_VAR 0 3
32781: PUSH
32782: LD_INT 8
32784: EQUAL
32785: IFFALSE 32797
// j := 0 else
32787: LD_ADDR_VAR 0 3
32791: PUSH
32792: LD_INT 0
32794: ST_TO_ADDR
32795: GO 32811
// j := j + 1 ;
32797: LD_ADDR_VAR 0 3
32801: PUSH
32802: LD_VAR 0 3
32806: PUSH
32807: LD_INT 1
32809: PLUS
32810: ST_TO_ADDR
// SetSide ( i , j ) ;
32811: LD_VAR 0 2
32815: PPUSH
32816: LD_VAR 0 3
32820: PPUSH
32821: CALL_OW 235
// end ;
32825: GO 32748
32827: POP
32828: POP
// end ;
32829: LD_VAR 0 1
32833: RET
// export function hHackFog ; begin
32834: LD_INT 0
32836: PPUSH
// FogOff ( true ) ;
32837: LD_INT 1
32839: PPUSH
32840: CALL_OW 344
// end ;
32844: LD_VAR 0 1
32848: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32849: LD_INT 0
32851: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32852: LD_VAR 0 1
32856: PPUSH
32857: LD_VAR 0 2
32861: PPUSH
32862: LD_VAR 0 3
32866: PPUSH
32867: LD_INT 1
32869: PPUSH
32870: LD_INT 1
32872: PPUSH
32873: CALL_OW 483
// CenterOnXY ( x , y ) ;
32877: LD_VAR 0 2
32881: PPUSH
32882: LD_VAR 0 3
32886: PPUSH
32887: CALL_OW 84
// end ; end_of_file
32891: LD_VAR 0 4
32895: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32896: LD_INT 0
32898: PPUSH
32899: PPUSH
32900: PPUSH
32901: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32902: LD_VAR 0 1
32906: PPUSH
32907: CALL_OW 264
32911: PUSH
32912: LD_EXP 36
32916: EQUAL
32917: IFFALSE 32989
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32919: LD_INT 68
32921: PPUSH
32922: LD_VAR 0 1
32926: PPUSH
32927: CALL_OW 255
32931: PPUSH
32932: CALL_OW 321
32936: PUSH
32937: LD_INT 2
32939: EQUAL
32940: IFFALSE 32952
// eff := 70 else
32942: LD_ADDR_VAR 0 4
32946: PUSH
32947: LD_INT 70
32949: ST_TO_ADDR
32950: GO 32960
// eff := 30 ;
32952: LD_ADDR_VAR 0 4
32956: PUSH
32957: LD_INT 30
32959: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32960: LD_VAR 0 1
32964: PPUSH
32965: CALL_OW 250
32969: PPUSH
32970: LD_VAR 0 1
32974: PPUSH
32975: CALL_OW 251
32979: PPUSH
32980: LD_VAR 0 4
32984: PPUSH
32985: CALL_OW 495
// end ; end ;
32989: LD_VAR 0 2
32993: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32994: LD_INT 0
32996: PPUSH
// end ;
32997: LD_VAR 0 4
33001: RET
// export function SOS_Command ( cmd ) ; begin
33002: LD_INT 0
33004: PPUSH
// end ;
33005: LD_VAR 0 2
33009: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33010: LD_INT 0
33012: PPUSH
// end ;
33013: LD_VAR 0 6
33017: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33018: LD_INT 0
33020: PPUSH
33021: PPUSH
// if not vehicle or not factory then
33022: LD_VAR 0 1
33026: NOT
33027: PUSH
33028: LD_VAR 0 2
33032: NOT
33033: OR
33034: IFFALSE 33038
// exit ;
33036: GO 33269
// if factoryWaypoints >= factory then
33038: LD_EXP 110
33042: PUSH
33043: LD_VAR 0 2
33047: GREATEREQUAL
33048: IFFALSE 33269
// if factoryWaypoints [ factory ] then
33050: LD_EXP 110
33054: PUSH
33055: LD_VAR 0 2
33059: ARRAY
33060: IFFALSE 33269
// begin if GetControl ( vehicle ) = control_manual then
33062: LD_VAR 0 1
33066: PPUSH
33067: CALL_OW 263
33071: PUSH
33072: LD_INT 1
33074: EQUAL
33075: IFFALSE 33156
// begin driver := IsDrivenBy ( vehicle ) ;
33077: LD_ADDR_VAR 0 4
33081: PUSH
33082: LD_VAR 0 1
33086: PPUSH
33087: CALL_OW 311
33091: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33092: LD_VAR 0 4
33096: PPUSH
33097: LD_EXP 110
33101: PUSH
33102: LD_VAR 0 2
33106: ARRAY
33107: PUSH
33108: LD_INT 3
33110: ARRAY
33111: PPUSH
33112: LD_EXP 110
33116: PUSH
33117: LD_VAR 0 2
33121: ARRAY
33122: PUSH
33123: LD_INT 4
33125: ARRAY
33126: PPUSH
33127: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33131: LD_VAR 0 4
33135: PPUSH
33136: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33140: LD_VAR 0 4
33144: PPUSH
33145: LD_VAR 0 2
33149: PPUSH
33150: CALL_OW 180
// end else
33154: GO 33269
// if GetControl ( vehicle ) = control_remote then
33156: LD_VAR 0 1
33160: PPUSH
33161: CALL_OW 263
33165: PUSH
33166: LD_INT 2
33168: EQUAL
33169: IFFALSE 33230
// begin wait ( 0 0$2 ) ;
33171: LD_INT 70
33173: PPUSH
33174: CALL_OW 67
// if Connect ( vehicle ) then
33178: LD_VAR 0 1
33182: PPUSH
33183: CALL 45646 0 1
33187: IFFALSE 33228
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33189: LD_VAR 0 1
33193: PPUSH
33194: LD_EXP 110
33198: PUSH
33199: LD_VAR 0 2
33203: ARRAY
33204: PUSH
33205: LD_INT 3
33207: ARRAY
33208: PPUSH
33209: LD_EXP 110
33213: PUSH
33214: LD_VAR 0 2
33218: ARRAY
33219: PUSH
33220: LD_INT 4
33222: ARRAY
33223: PPUSH
33224: CALL_OW 171
// end else
33228: GO 33269
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33230: LD_VAR 0 1
33234: PPUSH
33235: LD_EXP 110
33239: PUSH
33240: LD_VAR 0 2
33244: ARRAY
33245: PUSH
33246: LD_INT 3
33248: ARRAY
33249: PPUSH
33250: LD_EXP 110
33254: PUSH
33255: LD_VAR 0 2
33259: ARRAY
33260: PUSH
33261: LD_INT 4
33263: ARRAY
33264: PPUSH
33265: CALL_OW 171
// end ; end ;
33269: LD_VAR 0 3
33273: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33274: LD_INT 0
33276: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33277: LD_VAR 0 1
33281: PUSH
33282: LD_INT 250
33284: EQUAL
33285: PUSH
33286: LD_VAR 0 2
33290: PPUSH
33291: CALL_OW 264
33295: PUSH
33296: LD_EXP 39
33300: EQUAL
33301: AND
33302: IFFALSE 33323
// MinerPlaceMine ( unit , x , y ) ;
33304: LD_VAR 0 2
33308: PPUSH
33309: LD_VAR 0 4
33313: PPUSH
33314: LD_VAR 0 5
33318: PPUSH
33319: CALL 36051 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33323: LD_VAR 0 1
33327: PUSH
33328: LD_INT 251
33330: EQUAL
33331: PUSH
33332: LD_VAR 0 2
33336: PPUSH
33337: CALL_OW 264
33341: PUSH
33342: LD_EXP 39
33346: EQUAL
33347: AND
33348: IFFALSE 33369
// MinerDetonateMine ( unit , x , y ) ;
33350: LD_VAR 0 2
33354: PPUSH
33355: LD_VAR 0 4
33359: PPUSH
33360: LD_VAR 0 5
33364: PPUSH
33365: CALL 36328 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33369: LD_VAR 0 1
33373: PUSH
33374: LD_INT 252
33376: EQUAL
33377: PUSH
33378: LD_VAR 0 2
33382: PPUSH
33383: CALL_OW 264
33387: PUSH
33388: LD_EXP 39
33392: EQUAL
33393: AND
33394: IFFALSE 33415
// MinerCreateMinefield ( unit , x , y ) ;
33396: LD_VAR 0 2
33400: PPUSH
33401: LD_VAR 0 4
33405: PPUSH
33406: LD_VAR 0 5
33410: PPUSH
33411: CALL 36745 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33415: LD_VAR 0 1
33419: PUSH
33420: LD_INT 253
33422: EQUAL
33423: PUSH
33424: LD_VAR 0 2
33428: PPUSH
33429: CALL_OW 257
33433: PUSH
33434: LD_INT 5
33436: EQUAL
33437: AND
33438: IFFALSE 33459
// ComBinocular ( unit , x , y ) ;
33440: LD_VAR 0 2
33444: PPUSH
33445: LD_VAR 0 4
33449: PPUSH
33450: LD_VAR 0 5
33454: PPUSH
33455: CALL 37116 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33459: LD_VAR 0 1
33463: PUSH
33464: LD_INT 254
33466: EQUAL
33467: PUSH
33468: LD_VAR 0 2
33472: PPUSH
33473: CALL_OW 264
33477: PUSH
33478: LD_EXP 34
33482: EQUAL
33483: AND
33484: PUSH
33485: LD_VAR 0 3
33489: PPUSH
33490: CALL_OW 263
33494: PUSH
33495: LD_INT 3
33497: EQUAL
33498: AND
33499: IFFALSE 33515
// HackDestroyVehicle ( unit , selectedUnit ) ;
33501: LD_VAR 0 2
33505: PPUSH
33506: LD_VAR 0 3
33510: PPUSH
33511: CALL 35411 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33515: LD_VAR 0 1
33519: PUSH
33520: LD_INT 255
33522: EQUAL
33523: PUSH
33524: LD_VAR 0 2
33528: PPUSH
33529: CALL_OW 264
33533: PUSH
33534: LD_INT 14
33536: PUSH
33537: LD_INT 53
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: IN
33544: AND
33545: PUSH
33546: LD_VAR 0 4
33550: PPUSH
33551: LD_VAR 0 5
33555: PPUSH
33556: CALL_OW 488
33560: AND
33561: IFFALSE 33585
// CutTreeXYR ( unit , x , y , 12 ) ;
33563: LD_VAR 0 2
33567: PPUSH
33568: LD_VAR 0 4
33572: PPUSH
33573: LD_VAR 0 5
33577: PPUSH
33578: LD_INT 12
33580: PPUSH
33581: CALL 33977 0 4
// if cmd = 256 then
33585: LD_VAR 0 1
33589: PUSH
33590: LD_INT 256
33592: EQUAL
33593: IFFALSE 33614
// SetFactoryWaypoint ( unit , x , y ) ;
33595: LD_VAR 0 2
33599: PPUSH
33600: LD_VAR 0 4
33604: PPUSH
33605: LD_VAR 0 5
33609: PPUSH
33610: CALL 33619 0 3
// end ;
33614: LD_VAR 0 6
33618: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33619: LD_INT 0
33621: PPUSH
33622: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33623: LD_VAR 0 1
33627: NOT
33628: PUSH
33629: LD_VAR 0 2
33633: PPUSH
33634: LD_VAR 0 3
33638: PPUSH
33639: CALL_OW 488
33643: NOT
33644: OR
33645: PUSH
33646: LD_VAR 0 1
33650: PPUSH
33651: CALL_OW 266
33655: PUSH
33656: LD_INT 3
33658: NONEQUAL
33659: PUSH
33660: LD_VAR 0 1
33664: PPUSH
33665: CALL_OW 247
33669: PUSH
33670: LD_INT 1
33672: EQUAL
33673: NOT
33674: AND
33675: OR
33676: IFFALSE 33680
// exit ;
33678: GO 33829
// if GetType ( factory ) = unit_human then
33680: LD_VAR 0 1
33684: PPUSH
33685: CALL_OW 247
33689: PUSH
33690: LD_INT 1
33692: EQUAL
33693: IFFALSE 33710
// factory := IsInUnit ( factory ) ;
33695: LD_ADDR_VAR 0 1
33699: PUSH
33700: LD_VAR 0 1
33704: PPUSH
33705: CALL_OW 310
33709: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33710: LD_VAR 0 1
33714: PPUSH
33715: CALL_OW 266
33719: PUSH
33720: LD_INT 3
33722: NONEQUAL
33723: IFFALSE 33727
// exit ;
33725: GO 33829
// if HexInfo ( x , y ) = factory then
33727: LD_VAR 0 2
33731: PPUSH
33732: LD_VAR 0 3
33736: PPUSH
33737: CALL_OW 428
33741: PUSH
33742: LD_VAR 0 1
33746: EQUAL
33747: IFFALSE 33774
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33749: LD_ADDR_EXP 110
33753: PUSH
33754: LD_EXP 110
33758: PPUSH
33759: LD_VAR 0 1
33763: PPUSH
33764: LD_INT 0
33766: PPUSH
33767: CALL_OW 1
33771: ST_TO_ADDR
33772: GO 33825
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33774: LD_ADDR_EXP 110
33778: PUSH
33779: LD_EXP 110
33783: PPUSH
33784: LD_VAR 0 1
33788: PPUSH
33789: LD_VAR 0 1
33793: PPUSH
33794: CALL_OW 255
33798: PUSH
33799: LD_VAR 0 1
33803: PUSH
33804: LD_VAR 0 2
33808: PUSH
33809: LD_VAR 0 3
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: PPUSH
33820: CALL_OW 1
33824: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33825: CALL 33834 0 0
// end ;
33829: LD_VAR 0 4
33833: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
33834: LD_INT 0
33836: PPUSH
33837: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33838: LD_STRING resetFactoryWaypoint();
33840: PPUSH
33841: CALL_OW 559
// if factoryWaypoints then
33845: LD_EXP 110
33849: IFFALSE 33972
// begin for i := 1 to factoryWaypoints do
33851: LD_ADDR_VAR 0 2
33855: PUSH
33856: DOUBLE
33857: LD_INT 1
33859: DEC
33860: ST_TO_ADDR
33861: LD_EXP 110
33865: PUSH
33866: FOR_TO
33867: IFFALSE 33970
// if factoryWaypoints [ i ] then
33869: LD_EXP 110
33873: PUSH
33874: LD_VAR 0 2
33878: ARRAY
33879: IFFALSE 33968
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
33881: LD_STRING setFactoryWaypointXY(
33883: PUSH
33884: LD_EXP 110
33888: PUSH
33889: LD_VAR 0 2
33893: ARRAY
33894: PUSH
33895: LD_INT 1
33897: ARRAY
33898: STR
33899: PUSH
33900: LD_STRING ,
33902: STR
33903: PUSH
33904: LD_EXP 110
33908: PUSH
33909: LD_VAR 0 2
33913: ARRAY
33914: PUSH
33915: LD_INT 2
33917: ARRAY
33918: STR
33919: PUSH
33920: LD_STRING ,
33922: STR
33923: PUSH
33924: LD_EXP 110
33928: PUSH
33929: LD_VAR 0 2
33933: ARRAY
33934: PUSH
33935: LD_INT 3
33937: ARRAY
33938: STR
33939: PUSH
33940: LD_STRING ,
33942: STR
33943: PUSH
33944: LD_EXP 110
33948: PUSH
33949: LD_VAR 0 2
33953: ARRAY
33954: PUSH
33955: LD_INT 4
33957: ARRAY
33958: STR
33959: PUSH
33960: LD_STRING )
33962: STR
33963: PPUSH
33964: CALL_OW 559
33968: GO 33866
33970: POP
33971: POP
// end ; end ;
33972: LD_VAR 0 1
33976: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33977: LD_INT 0
33979: PPUSH
33980: PPUSH
33981: PPUSH
33982: PPUSH
33983: PPUSH
33984: PPUSH
33985: PPUSH
33986: PPUSH
33987: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33988: LD_VAR 0 1
33992: NOT
33993: PUSH
33994: LD_VAR 0 2
33998: PPUSH
33999: LD_VAR 0 3
34003: PPUSH
34004: CALL_OW 488
34008: NOT
34009: OR
34010: PUSH
34011: LD_VAR 0 4
34015: NOT
34016: OR
34017: IFFALSE 34021
// exit ;
34019: GO 34361
// list := [ ] ;
34021: LD_ADDR_VAR 0 13
34025: PUSH
34026: EMPTY
34027: ST_TO_ADDR
// if x - r < 0 then
34028: LD_VAR 0 2
34032: PUSH
34033: LD_VAR 0 4
34037: MINUS
34038: PUSH
34039: LD_INT 0
34041: LESS
34042: IFFALSE 34054
// min_x := 0 else
34044: LD_ADDR_VAR 0 7
34048: PUSH
34049: LD_INT 0
34051: ST_TO_ADDR
34052: GO 34070
// min_x := x - r ;
34054: LD_ADDR_VAR 0 7
34058: PUSH
34059: LD_VAR 0 2
34063: PUSH
34064: LD_VAR 0 4
34068: MINUS
34069: ST_TO_ADDR
// if y - r < 0 then
34070: LD_VAR 0 3
34074: PUSH
34075: LD_VAR 0 4
34079: MINUS
34080: PUSH
34081: LD_INT 0
34083: LESS
34084: IFFALSE 34096
// min_y := 0 else
34086: LD_ADDR_VAR 0 8
34090: PUSH
34091: LD_INT 0
34093: ST_TO_ADDR
34094: GO 34112
// min_y := y - r ;
34096: LD_ADDR_VAR 0 8
34100: PUSH
34101: LD_VAR 0 3
34105: PUSH
34106: LD_VAR 0 4
34110: MINUS
34111: ST_TO_ADDR
// max_x := x + r ;
34112: LD_ADDR_VAR 0 9
34116: PUSH
34117: LD_VAR 0 2
34121: PUSH
34122: LD_VAR 0 4
34126: PLUS
34127: ST_TO_ADDR
// max_y := y + r ;
34128: LD_ADDR_VAR 0 10
34132: PUSH
34133: LD_VAR 0 3
34137: PUSH
34138: LD_VAR 0 4
34142: PLUS
34143: ST_TO_ADDR
// for _x = min_x to max_x do
34144: LD_ADDR_VAR 0 11
34148: PUSH
34149: DOUBLE
34150: LD_VAR 0 7
34154: DEC
34155: ST_TO_ADDR
34156: LD_VAR 0 9
34160: PUSH
34161: FOR_TO
34162: IFFALSE 34279
// for _y = min_y to max_y do
34164: LD_ADDR_VAR 0 12
34168: PUSH
34169: DOUBLE
34170: LD_VAR 0 8
34174: DEC
34175: ST_TO_ADDR
34176: LD_VAR 0 10
34180: PUSH
34181: FOR_TO
34182: IFFALSE 34275
// begin if not ValidHex ( _x , _y ) then
34184: LD_VAR 0 11
34188: PPUSH
34189: LD_VAR 0 12
34193: PPUSH
34194: CALL_OW 488
34198: NOT
34199: IFFALSE 34203
// continue ;
34201: GO 34181
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34203: LD_VAR 0 11
34207: PPUSH
34208: LD_VAR 0 12
34212: PPUSH
34213: CALL_OW 351
34217: PUSH
34218: LD_VAR 0 11
34222: PPUSH
34223: LD_VAR 0 12
34227: PPUSH
34228: CALL_OW 554
34232: AND
34233: IFFALSE 34273
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34235: LD_ADDR_VAR 0 13
34239: PUSH
34240: LD_VAR 0 13
34244: PPUSH
34245: LD_VAR 0 13
34249: PUSH
34250: LD_INT 1
34252: PLUS
34253: PPUSH
34254: LD_VAR 0 11
34258: PUSH
34259: LD_VAR 0 12
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PPUSH
34268: CALL_OW 2
34272: ST_TO_ADDR
// end ;
34273: GO 34181
34275: POP
34276: POP
34277: GO 34161
34279: POP
34280: POP
// if not list then
34281: LD_VAR 0 13
34285: NOT
34286: IFFALSE 34290
// exit ;
34288: GO 34361
// for i in list do
34290: LD_ADDR_VAR 0 6
34294: PUSH
34295: LD_VAR 0 13
34299: PUSH
34300: FOR_IN
34301: IFFALSE 34359
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34303: LD_VAR 0 1
34307: PPUSH
34308: LD_STRING M
34310: PUSH
34311: LD_VAR 0 6
34315: PUSH
34316: LD_INT 1
34318: ARRAY
34319: PUSH
34320: LD_VAR 0 6
34324: PUSH
34325: LD_INT 2
34327: ARRAY
34328: PUSH
34329: LD_INT 0
34331: PUSH
34332: LD_INT 0
34334: PUSH
34335: LD_INT 0
34337: PUSH
34338: LD_INT 0
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: PUSH
34350: EMPTY
34351: LIST
34352: PPUSH
34353: CALL_OW 447
34357: GO 34300
34359: POP
34360: POP
// end ;
34361: LD_VAR 0 5
34365: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34366: LD_EXP 111
34370: NOT
34371: IFFALSE 34421
34373: GO 34375
34375: DISABLE
// begin initHack := true ;
34376: LD_ADDR_EXP 111
34380: PUSH
34381: LD_INT 1
34383: ST_TO_ADDR
// hackTanks := [ ] ;
34384: LD_ADDR_EXP 112
34388: PUSH
34389: EMPTY
34390: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34391: LD_ADDR_EXP 113
34395: PUSH
34396: EMPTY
34397: ST_TO_ADDR
// hackLimit := 3 ;
34398: LD_ADDR_EXP 114
34402: PUSH
34403: LD_INT 3
34405: ST_TO_ADDR
// hackDist := 12 ;
34406: LD_ADDR_EXP 115
34410: PUSH
34411: LD_INT 12
34413: ST_TO_ADDR
// hackCounter := [ ] ;
34414: LD_ADDR_EXP 116
34418: PUSH
34419: EMPTY
34420: ST_TO_ADDR
// end ;
34421: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34422: LD_EXP 111
34426: PUSH
34427: LD_INT 34
34429: PUSH
34430: LD_EXP 34
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PPUSH
34439: CALL_OW 69
34443: AND
34444: IFFALSE 34699
34446: GO 34448
34448: DISABLE
34449: LD_INT 0
34451: PPUSH
34452: PPUSH
// begin enable ;
34453: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34454: LD_ADDR_VAR 0 1
34458: PUSH
34459: LD_INT 34
34461: PUSH
34462: LD_EXP 34
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PPUSH
34471: CALL_OW 69
34475: PUSH
34476: FOR_IN
34477: IFFALSE 34697
// begin if not i in hackTanks then
34479: LD_VAR 0 1
34483: PUSH
34484: LD_EXP 112
34488: IN
34489: NOT
34490: IFFALSE 34573
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34492: LD_ADDR_EXP 112
34496: PUSH
34497: LD_EXP 112
34501: PPUSH
34502: LD_EXP 112
34506: PUSH
34507: LD_INT 1
34509: PLUS
34510: PPUSH
34511: LD_VAR 0 1
34515: PPUSH
34516: CALL_OW 1
34520: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34521: LD_ADDR_EXP 113
34525: PUSH
34526: LD_EXP 113
34530: PPUSH
34531: LD_EXP 113
34535: PUSH
34536: LD_INT 1
34538: PLUS
34539: PPUSH
34540: EMPTY
34541: PPUSH
34542: CALL_OW 1
34546: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34547: LD_ADDR_EXP 116
34551: PUSH
34552: LD_EXP 116
34556: PPUSH
34557: LD_EXP 116
34561: PUSH
34562: LD_INT 1
34564: PLUS
34565: PPUSH
34566: EMPTY
34567: PPUSH
34568: CALL_OW 1
34572: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34573: LD_VAR 0 1
34577: PPUSH
34578: CALL_OW 302
34582: NOT
34583: IFFALSE 34596
// begin HackUnlinkAll ( i ) ;
34585: LD_VAR 0 1
34589: PPUSH
34590: CALL 34702 0 1
// continue ;
34594: GO 34476
// end ; HackCheckCapturedStatus ( i ) ;
34596: LD_VAR 0 1
34600: PPUSH
34601: CALL 35145 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34605: LD_ADDR_VAR 0 2
34609: PUSH
34610: LD_INT 81
34612: PUSH
34613: LD_VAR 0 1
34617: PPUSH
34618: CALL_OW 255
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 33
34629: PUSH
34630: LD_INT 3
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 91
34639: PUSH
34640: LD_VAR 0 1
34644: PUSH
34645: LD_EXP 115
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 50
34657: PUSH
34658: EMPTY
34659: LIST
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: PPUSH
34667: CALL_OW 69
34671: ST_TO_ADDR
// if not tmp then
34672: LD_VAR 0 2
34676: NOT
34677: IFFALSE 34681
// continue ;
34679: GO 34476
// HackLink ( i , tmp ) ;
34681: LD_VAR 0 1
34685: PPUSH
34686: LD_VAR 0 2
34690: PPUSH
34691: CALL 34838 0 2
// end ;
34695: GO 34476
34697: POP
34698: POP
// end ;
34699: PPOPN 2
34701: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34702: LD_INT 0
34704: PPUSH
34705: PPUSH
34706: PPUSH
// if not hack in hackTanks then
34707: LD_VAR 0 1
34711: PUSH
34712: LD_EXP 112
34716: IN
34717: NOT
34718: IFFALSE 34722
// exit ;
34720: GO 34833
// index := GetElementIndex ( hackTanks , hack ) ;
34722: LD_ADDR_VAR 0 4
34726: PUSH
34727: LD_EXP 112
34731: PPUSH
34732: LD_VAR 0 1
34736: PPUSH
34737: CALL 42460 0 2
34741: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34742: LD_EXP 113
34746: PUSH
34747: LD_VAR 0 4
34751: ARRAY
34752: IFFALSE 34833
// begin for i in hackTanksCaptured [ index ] do
34754: LD_ADDR_VAR 0 3
34758: PUSH
34759: LD_EXP 113
34763: PUSH
34764: LD_VAR 0 4
34768: ARRAY
34769: PUSH
34770: FOR_IN
34771: IFFALSE 34797
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34773: LD_VAR 0 3
34777: PUSH
34778: LD_INT 1
34780: ARRAY
34781: PPUSH
34782: LD_VAR 0 3
34786: PUSH
34787: LD_INT 2
34789: ARRAY
34790: PPUSH
34791: CALL_OW 235
34795: GO 34770
34797: POP
34798: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34799: LD_ADDR_EXP 113
34803: PUSH
34804: LD_EXP 113
34808: PPUSH
34809: LD_VAR 0 4
34813: PPUSH
34814: EMPTY
34815: PPUSH
34816: CALL_OW 1
34820: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34821: LD_VAR 0 1
34825: PPUSH
34826: LD_INT 0
34828: PPUSH
34829: CALL_OW 505
// end ; end ;
34833: LD_VAR 0 2
34837: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34838: LD_INT 0
34840: PPUSH
34841: PPUSH
34842: PPUSH
// if not hack in hackTanks or not vehicles then
34843: LD_VAR 0 1
34847: PUSH
34848: LD_EXP 112
34852: IN
34853: NOT
34854: PUSH
34855: LD_VAR 0 2
34859: NOT
34860: OR
34861: IFFALSE 34865
// exit ;
34863: GO 35140
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34865: LD_ADDR_VAR 0 2
34869: PUSH
34870: LD_VAR 0 1
34874: PPUSH
34875: LD_VAR 0 2
34879: PPUSH
34880: LD_INT 1
34882: PPUSH
34883: LD_INT 1
34885: PPUSH
34886: CALL 43110 0 4
34890: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34891: LD_ADDR_VAR 0 5
34895: PUSH
34896: LD_EXP 112
34900: PPUSH
34901: LD_VAR 0 1
34905: PPUSH
34906: CALL 42460 0 2
34910: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34911: LD_EXP 113
34915: PUSH
34916: LD_VAR 0 5
34920: ARRAY
34921: PUSH
34922: LD_EXP 114
34926: LESS
34927: IFFALSE 35116
// begin for i := 1 to vehicles do
34929: LD_ADDR_VAR 0 4
34933: PUSH
34934: DOUBLE
34935: LD_INT 1
34937: DEC
34938: ST_TO_ADDR
34939: LD_VAR 0 2
34943: PUSH
34944: FOR_TO
34945: IFFALSE 35114
// begin if hackTanksCaptured [ index ] = hackLimit then
34947: LD_EXP 113
34951: PUSH
34952: LD_VAR 0 5
34956: ARRAY
34957: PUSH
34958: LD_EXP 114
34962: EQUAL
34963: IFFALSE 34967
// break ;
34965: GO 35114
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34967: LD_ADDR_EXP 116
34971: PUSH
34972: LD_EXP 116
34976: PPUSH
34977: LD_VAR 0 5
34981: PPUSH
34982: LD_EXP 116
34986: PUSH
34987: LD_VAR 0 5
34991: ARRAY
34992: PUSH
34993: LD_INT 1
34995: PLUS
34996: PPUSH
34997: CALL_OW 1
35001: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35002: LD_ADDR_EXP 113
35006: PUSH
35007: LD_EXP 113
35011: PPUSH
35012: LD_VAR 0 5
35016: PUSH
35017: LD_EXP 113
35021: PUSH
35022: LD_VAR 0 5
35026: ARRAY
35027: PUSH
35028: LD_INT 1
35030: PLUS
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PPUSH
35036: LD_VAR 0 2
35040: PUSH
35041: LD_VAR 0 4
35045: ARRAY
35046: PUSH
35047: LD_VAR 0 2
35051: PUSH
35052: LD_VAR 0 4
35056: ARRAY
35057: PPUSH
35058: CALL_OW 255
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PPUSH
35067: CALL 42675 0 3
35071: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35072: LD_VAR 0 2
35076: PUSH
35077: LD_VAR 0 4
35081: ARRAY
35082: PPUSH
35083: LD_VAR 0 1
35087: PPUSH
35088: CALL_OW 255
35092: PPUSH
35093: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35097: LD_VAR 0 2
35101: PUSH
35102: LD_VAR 0 4
35106: ARRAY
35107: PPUSH
35108: CALL_OW 141
// end ;
35112: GO 34944
35114: POP
35115: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35116: LD_VAR 0 1
35120: PPUSH
35121: LD_EXP 113
35125: PUSH
35126: LD_VAR 0 5
35130: ARRAY
35131: PUSH
35132: LD_INT 0
35134: PLUS
35135: PPUSH
35136: CALL_OW 505
// end ;
35140: LD_VAR 0 3
35144: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35145: LD_INT 0
35147: PPUSH
35148: PPUSH
35149: PPUSH
35150: PPUSH
// if not hack in hackTanks then
35151: LD_VAR 0 1
35155: PUSH
35156: LD_EXP 112
35160: IN
35161: NOT
35162: IFFALSE 35166
// exit ;
35164: GO 35406
// index := GetElementIndex ( hackTanks , hack ) ;
35166: LD_ADDR_VAR 0 4
35170: PUSH
35171: LD_EXP 112
35175: PPUSH
35176: LD_VAR 0 1
35180: PPUSH
35181: CALL 42460 0 2
35185: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35186: LD_ADDR_VAR 0 3
35190: PUSH
35191: DOUBLE
35192: LD_EXP 113
35196: PUSH
35197: LD_VAR 0 4
35201: ARRAY
35202: INC
35203: ST_TO_ADDR
35204: LD_INT 1
35206: PUSH
35207: FOR_DOWNTO
35208: IFFALSE 35380
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35210: LD_ADDR_VAR 0 5
35214: PUSH
35215: LD_EXP 113
35219: PUSH
35220: LD_VAR 0 4
35224: ARRAY
35225: PUSH
35226: LD_VAR 0 3
35230: ARRAY
35231: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35232: LD_VAR 0 5
35236: PUSH
35237: LD_INT 1
35239: ARRAY
35240: PPUSH
35241: CALL_OW 302
35245: NOT
35246: PUSH
35247: LD_VAR 0 5
35251: PUSH
35252: LD_INT 1
35254: ARRAY
35255: PPUSH
35256: CALL_OW 255
35260: PUSH
35261: LD_VAR 0 1
35265: PPUSH
35266: CALL_OW 255
35270: NONEQUAL
35271: OR
35272: IFFALSE 35378
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35274: LD_VAR 0 5
35278: PUSH
35279: LD_INT 1
35281: ARRAY
35282: PPUSH
35283: CALL_OW 305
35287: PUSH
35288: LD_VAR 0 5
35292: PUSH
35293: LD_INT 1
35295: ARRAY
35296: PPUSH
35297: CALL_OW 255
35301: PUSH
35302: LD_VAR 0 1
35306: PPUSH
35307: CALL_OW 255
35311: EQUAL
35312: AND
35313: IFFALSE 35337
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35315: LD_VAR 0 5
35319: PUSH
35320: LD_INT 1
35322: ARRAY
35323: PPUSH
35324: LD_VAR 0 5
35328: PUSH
35329: LD_INT 2
35331: ARRAY
35332: PPUSH
35333: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35337: LD_ADDR_EXP 113
35341: PUSH
35342: LD_EXP 113
35346: PPUSH
35347: LD_VAR 0 4
35351: PPUSH
35352: LD_EXP 113
35356: PUSH
35357: LD_VAR 0 4
35361: ARRAY
35362: PPUSH
35363: LD_VAR 0 3
35367: PPUSH
35368: CALL_OW 3
35372: PPUSH
35373: CALL_OW 1
35377: ST_TO_ADDR
// end ; end ;
35378: GO 35207
35380: POP
35381: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35382: LD_VAR 0 1
35386: PPUSH
35387: LD_EXP 113
35391: PUSH
35392: LD_VAR 0 4
35396: ARRAY
35397: PUSH
35398: LD_INT 0
35400: PLUS
35401: PPUSH
35402: CALL_OW 505
// end ;
35406: LD_VAR 0 2
35410: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35411: LD_INT 0
35413: PPUSH
35414: PPUSH
35415: PPUSH
35416: PPUSH
// if not hack in hackTanks then
35417: LD_VAR 0 1
35421: PUSH
35422: LD_EXP 112
35426: IN
35427: NOT
35428: IFFALSE 35432
// exit ;
35430: GO 35517
// index := GetElementIndex ( hackTanks , hack ) ;
35432: LD_ADDR_VAR 0 5
35436: PUSH
35437: LD_EXP 112
35441: PPUSH
35442: LD_VAR 0 1
35446: PPUSH
35447: CALL 42460 0 2
35451: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35452: LD_ADDR_VAR 0 4
35456: PUSH
35457: DOUBLE
35458: LD_INT 1
35460: DEC
35461: ST_TO_ADDR
35462: LD_EXP 113
35466: PUSH
35467: LD_VAR 0 5
35471: ARRAY
35472: PUSH
35473: FOR_TO
35474: IFFALSE 35515
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35476: LD_EXP 113
35480: PUSH
35481: LD_VAR 0 5
35485: ARRAY
35486: PUSH
35487: LD_VAR 0 4
35491: ARRAY
35492: PUSH
35493: LD_INT 1
35495: ARRAY
35496: PUSH
35497: LD_VAR 0 2
35501: EQUAL
35502: IFFALSE 35513
// KillUnit ( vehicle ) ;
35504: LD_VAR 0 2
35508: PPUSH
35509: CALL_OW 66
35513: GO 35473
35515: POP
35516: POP
// end ;
35517: LD_VAR 0 3
35521: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35522: LD_EXP 117
35526: NOT
35527: IFFALSE 35562
35529: GO 35531
35531: DISABLE
// begin initMiner := true ;
35532: LD_ADDR_EXP 117
35536: PUSH
35537: LD_INT 1
35539: ST_TO_ADDR
// minersList := [ ] ;
35540: LD_ADDR_EXP 118
35544: PUSH
35545: EMPTY
35546: ST_TO_ADDR
// minerMinesList := [ ] ;
35547: LD_ADDR_EXP 119
35551: PUSH
35552: EMPTY
35553: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35554: LD_ADDR_EXP 120
35558: PUSH
35559: LD_INT 5
35561: ST_TO_ADDR
// end ;
35562: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35563: LD_EXP 117
35567: PUSH
35568: LD_INT 34
35570: PUSH
35571: LD_EXP 39
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PPUSH
35580: CALL_OW 69
35584: AND
35585: IFFALSE 36048
35587: GO 35589
35589: DISABLE
35590: LD_INT 0
35592: PPUSH
35593: PPUSH
35594: PPUSH
35595: PPUSH
// begin enable ;
35596: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35597: LD_ADDR_VAR 0 1
35601: PUSH
35602: LD_INT 34
35604: PUSH
35605: LD_EXP 39
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PPUSH
35614: CALL_OW 69
35618: PUSH
35619: FOR_IN
35620: IFFALSE 35692
// begin if not i in minersList then
35622: LD_VAR 0 1
35626: PUSH
35627: LD_EXP 118
35631: IN
35632: NOT
35633: IFFALSE 35690
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35635: LD_ADDR_EXP 118
35639: PUSH
35640: LD_EXP 118
35644: PPUSH
35645: LD_EXP 118
35649: PUSH
35650: LD_INT 1
35652: PLUS
35653: PPUSH
35654: LD_VAR 0 1
35658: PPUSH
35659: CALL_OW 1
35663: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35664: LD_ADDR_EXP 119
35668: PUSH
35669: LD_EXP 119
35673: PPUSH
35674: LD_EXP 119
35678: PUSH
35679: LD_INT 1
35681: PLUS
35682: PPUSH
35683: EMPTY
35684: PPUSH
35685: CALL_OW 1
35689: ST_TO_ADDR
// end end ;
35690: GO 35619
35692: POP
35693: POP
// for i := minerMinesList downto 1 do
35694: LD_ADDR_VAR 0 1
35698: PUSH
35699: DOUBLE
35700: LD_EXP 119
35704: INC
35705: ST_TO_ADDR
35706: LD_INT 1
35708: PUSH
35709: FOR_DOWNTO
35710: IFFALSE 36046
// begin if IsLive ( minersList [ i ] ) then
35712: LD_EXP 118
35716: PUSH
35717: LD_VAR 0 1
35721: ARRAY
35722: PPUSH
35723: CALL_OW 300
35727: IFFALSE 35755
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35729: LD_EXP 118
35733: PUSH
35734: LD_VAR 0 1
35738: ARRAY
35739: PPUSH
35740: LD_EXP 119
35744: PUSH
35745: LD_VAR 0 1
35749: ARRAY
35750: PPUSH
35751: CALL_OW 505
// if not minerMinesList [ i ] then
35755: LD_EXP 119
35759: PUSH
35760: LD_VAR 0 1
35764: ARRAY
35765: NOT
35766: IFFALSE 35770
// continue ;
35768: GO 35709
// for j := minerMinesList [ i ] downto 1 do
35770: LD_ADDR_VAR 0 2
35774: PUSH
35775: DOUBLE
35776: LD_EXP 119
35780: PUSH
35781: LD_VAR 0 1
35785: ARRAY
35786: INC
35787: ST_TO_ADDR
35788: LD_INT 1
35790: PUSH
35791: FOR_DOWNTO
35792: IFFALSE 36042
// begin side := GetSide ( minersList [ i ] ) ;
35794: LD_ADDR_VAR 0 3
35798: PUSH
35799: LD_EXP 118
35803: PUSH
35804: LD_VAR 0 1
35808: ARRAY
35809: PPUSH
35810: CALL_OW 255
35814: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35815: LD_ADDR_VAR 0 4
35819: PUSH
35820: LD_EXP 119
35824: PUSH
35825: LD_VAR 0 1
35829: ARRAY
35830: PUSH
35831: LD_VAR 0 2
35835: ARRAY
35836: PUSH
35837: LD_INT 1
35839: ARRAY
35840: PPUSH
35841: LD_EXP 119
35845: PUSH
35846: LD_VAR 0 1
35850: ARRAY
35851: PUSH
35852: LD_VAR 0 2
35856: ARRAY
35857: PUSH
35858: LD_INT 2
35860: ARRAY
35861: PPUSH
35862: CALL_OW 428
35866: ST_TO_ADDR
// if not tmp then
35867: LD_VAR 0 4
35871: NOT
35872: IFFALSE 35876
// continue ;
35874: GO 35791
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35876: LD_VAR 0 4
35880: PUSH
35881: LD_INT 81
35883: PUSH
35884: LD_VAR 0 3
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PPUSH
35893: CALL_OW 69
35897: IN
35898: PUSH
35899: LD_EXP 119
35903: PUSH
35904: LD_VAR 0 1
35908: ARRAY
35909: PUSH
35910: LD_VAR 0 2
35914: ARRAY
35915: PUSH
35916: LD_INT 1
35918: ARRAY
35919: PPUSH
35920: LD_EXP 119
35924: PUSH
35925: LD_VAR 0 1
35929: ARRAY
35930: PUSH
35931: LD_VAR 0 2
35935: ARRAY
35936: PUSH
35937: LD_INT 2
35939: ARRAY
35940: PPUSH
35941: CALL_OW 458
35945: AND
35946: IFFALSE 36040
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35948: LD_EXP 119
35952: PUSH
35953: LD_VAR 0 1
35957: ARRAY
35958: PUSH
35959: LD_VAR 0 2
35963: ARRAY
35964: PUSH
35965: LD_INT 1
35967: ARRAY
35968: PPUSH
35969: LD_EXP 119
35973: PUSH
35974: LD_VAR 0 1
35978: ARRAY
35979: PUSH
35980: LD_VAR 0 2
35984: ARRAY
35985: PUSH
35986: LD_INT 2
35988: ARRAY
35989: PPUSH
35990: LD_VAR 0 3
35994: PPUSH
35995: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35999: LD_ADDR_EXP 119
36003: PUSH
36004: LD_EXP 119
36008: PPUSH
36009: LD_VAR 0 1
36013: PPUSH
36014: LD_EXP 119
36018: PUSH
36019: LD_VAR 0 1
36023: ARRAY
36024: PPUSH
36025: LD_VAR 0 2
36029: PPUSH
36030: CALL_OW 3
36034: PPUSH
36035: CALL_OW 1
36039: ST_TO_ADDR
// end ; end ;
36040: GO 35791
36042: POP
36043: POP
// end ;
36044: GO 35709
36046: POP
36047: POP
// end ;
36048: PPOPN 4
36050: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36051: LD_INT 0
36053: PPUSH
36054: PPUSH
// result := false ;
36055: LD_ADDR_VAR 0 4
36059: PUSH
36060: LD_INT 0
36062: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36063: LD_VAR 0 1
36067: PPUSH
36068: CALL_OW 264
36072: PUSH
36073: LD_EXP 39
36077: EQUAL
36078: NOT
36079: IFFALSE 36083
// exit ;
36081: GO 36323
// index := GetElementIndex ( minersList , unit ) ;
36083: LD_ADDR_VAR 0 5
36087: PUSH
36088: LD_EXP 118
36092: PPUSH
36093: LD_VAR 0 1
36097: PPUSH
36098: CALL 42460 0 2
36102: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36103: LD_EXP 119
36107: PUSH
36108: LD_VAR 0 5
36112: ARRAY
36113: PUSH
36114: LD_EXP 120
36118: GREATEREQUAL
36119: IFFALSE 36123
// exit ;
36121: GO 36323
// ComMoveXY ( unit , x , y ) ;
36123: LD_VAR 0 1
36127: PPUSH
36128: LD_VAR 0 2
36132: PPUSH
36133: LD_VAR 0 3
36137: PPUSH
36138: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36142: LD_INT 35
36144: PPUSH
36145: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36149: LD_VAR 0 1
36153: PPUSH
36154: LD_VAR 0 2
36158: PPUSH
36159: LD_VAR 0 3
36163: PPUSH
36164: CALL 73179 0 3
36168: NOT
36169: PUSH
36170: LD_VAR 0 1
36174: PPUSH
36175: CALL_OW 314
36179: AND
36180: IFFALSE 36184
// exit ;
36182: GO 36323
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36184: LD_VAR 0 2
36188: PPUSH
36189: LD_VAR 0 3
36193: PPUSH
36194: CALL_OW 428
36198: PUSH
36199: LD_VAR 0 1
36203: EQUAL
36204: PUSH
36205: LD_VAR 0 1
36209: PPUSH
36210: CALL_OW 314
36214: NOT
36215: AND
36216: IFFALSE 36142
// PlaySoundXY ( x , y , PlantMine ) ;
36218: LD_VAR 0 2
36222: PPUSH
36223: LD_VAR 0 3
36227: PPUSH
36228: LD_STRING PlantMine
36230: PPUSH
36231: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36235: LD_VAR 0 2
36239: PPUSH
36240: LD_VAR 0 3
36244: PPUSH
36245: LD_VAR 0 1
36249: PPUSH
36250: CALL_OW 255
36254: PPUSH
36255: LD_INT 0
36257: PPUSH
36258: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36262: LD_ADDR_EXP 119
36266: PUSH
36267: LD_EXP 119
36271: PPUSH
36272: LD_VAR 0 5
36276: PUSH
36277: LD_EXP 119
36281: PUSH
36282: LD_VAR 0 5
36286: ARRAY
36287: PUSH
36288: LD_INT 1
36290: PLUS
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PPUSH
36296: LD_VAR 0 2
36300: PUSH
36301: LD_VAR 0 3
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PPUSH
36310: CALL 42675 0 3
36314: ST_TO_ADDR
// result := true ;
36315: LD_ADDR_VAR 0 4
36319: PUSH
36320: LD_INT 1
36322: ST_TO_ADDR
// end ;
36323: LD_VAR 0 4
36327: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36328: LD_INT 0
36330: PPUSH
36331: PPUSH
36332: PPUSH
// if not unit in minersList then
36333: LD_VAR 0 1
36337: PUSH
36338: LD_EXP 118
36342: IN
36343: NOT
36344: IFFALSE 36348
// exit ;
36346: GO 36740
// index := GetElementIndex ( minersList , unit ) ;
36348: LD_ADDR_VAR 0 6
36352: PUSH
36353: LD_EXP 118
36357: PPUSH
36358: LD_VAR 0 1
36362: PPUSH
36363: CALL 42460 0 2
36367: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36368: LD_ADDR_VAR 0 5
36372: PUSH
36373: DOUBLE
36374: LD_EXP 119
36378: PUSH
36379: LD_VAR 0 6
36383: ARRAY
36384: INC
36385: ST_TO_ADDR
36386: LD_INT 1
36388: PUSH
36389: FOR_DOWNTO
36390: IFFALSE 36551
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36392: LD_EXP 119
36396: PUSH
36397: LD_VAR 0 6
36401: ARRAY
36402: PUSH
36403: LD_VAR 0 5
36407: ARRAY
36408: PUSH
36409: LD_INT 1
36411: ARRAY
36412: PUSH
36413: LD_VAR 0 2
36417: EQUAL
36418: PUSH
36419: LD_EXP 119
36423: PUSH
36424: LD_VAR 0 6
36428: ARRAY
36429: PUSH
36430: LD_VAR 0 5
36434: ARRAY
36435: PUSH
36436: LD_INT 2
36438: ARRAY
36439: PUSH
36440: LD_VAR 0 3
36444: EQUAL
36445: AND
36446: IFFALSE 36549
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36448: LD_EXP 119
36452: PUSH
36453: LD_VAR 0 6
36457: ARRAY
36458: PUSH
36459: LD_VAR 0 5
36463: ARRAY
36464: PUSH
36465: LD_INT 1
36467: ARRAY
36468: PPUSH
36469: LD_EXP 119
36473: PUSH
36474: LD_VAR 0 6
36478: ARRAY
36479: PUSH
36480: LD_VAR 0 5
36484: ARRAY
36485: PUSH
36486: LD_INT 2
36488: ARRAY
36489: PPUSH
36490: LD_VAR 0 1
36494: PPUSH
36495: CALL_OW 255
36499: PPUSH
36500: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36504: LD_ADDR_EXP 119
36508: PUSH
36509: LD_EXP 119
36513: PPUSH
36514: LD_VAR 0 6
36518: PPUSH
36519: LD_EXP 119
36523: PUSH
36524: LD_VAR 0 6
36528: ARRAY
36529: PPUSH
36530: LD_VAR 0 5
36534: PPUSH
36535: CALL_OW 3
36539: PPUSH
36540: CALL_OW 1
36544: ST_TO_ADDR
// exit ;
36545: POP
36546: POP
36547: GO 36740
// end ; end ;
36549: GO 36389
36551: POP
36552: POP
// for i := minerMinesList [ index ] downto 1 do
36553: LD_ADDR_VAR 0 5
36557: PUSH
36558: DOUBLE
36559: LD_EXP 119
36563: PUSH
36564: LD_VAR 0 6
36568: ARRAY
36569: INC
36570: ST_TO_ADDR
36571: LD_INT 1
36573: PUSH
36574: FOR_DOWNTO
36575: IFFALSE 36738
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36577: LD_EXP 119
36581: PUSH
36582: LD_VAR 0 6
36586: ARRAY
36587: PUSH
36588: LD_VAR 0 5
36592: ARRAY
36593: PUSH
36594: LD_INT 1
36596: ARRAY
36597: PPUSH
36598: LD_EXP 119
36602: PUSH
36603: LD_VAR 0 6
36607: ARRAY
36608: PUSH
36609: LD_VAR 0 5
36613: ARRAY
36614: PUSH
36615: LD_INT 2
36617: ARRAY
36618: PPUSH
36619: LD_VAR 0 2
36623: PPUSH
36624: LD_VAR 0 3
36628: PPUSH
36629: CALL_OW 298
36633: PUSH
36634: LD_INT 6
36636: LESS
36637: IFFALSE 36736
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36639: LD_EXP 119
36643: PUSH
36644: LD_VAR 0 6
36648: ARRAY
36649: PUSH
36650: LD_VAR 0 5
36654: ARRAY
36655: PUSH
36656: LD_INT 1
36658: ARRAY
36659: PPUSH
36660: LD_EXP 119
36664: PUSH
36665: LD_VAR 0 6
36669: ARRAY
36670: PUSH
36671: LD_VAR 0 5
36675: ARRAY
36676: PUSH
36677: LD_INT 2
36679: ARRAY
36680: PPUSH
36681: LD_VAR 0 1
36685: PPUSH
36686: CALL_OW 255
36690: PPUSH
36691: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36695: LD_ADDR_EXP 119
36699: PUSH
36700: LD_EXP 119
36704: PPUSH
36705: LD_VAR 0 6
36709: PPUSH
36710: LD_EXP 119
36714: PUSH
36715: LD_VAR 0 6
36719: ARRAY
36720: PPUSH
36721: LD_VAR 0 5
36725: PPUSH
36726: CALL_OW 3
36730: PPUSH
36731: CALL_OW 1
36735: ST_TO_ADDR
// end ; end ;
36736: GO 36574
36738: POP
36739: POP
// end ;
36740: LD_VAR 0 4
36744: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36745: LD_INT 0
36747: PPUSH
36748: PPUSH
36749: PPUSH
36750: PPUSH
36751: PPUSH
36752: PPUSH
36753: PPUSH
36754: PPUSH
36755: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36756: LD_VAR 0 1
36760: PPUSH
36761: CALL_OW 264
36765: PUSH
36766: LD_EXP 39
36770: EQUAL
36771: NOT
36772: PUSH
36773: LD_VAR 0 1
36777: PUSH
36778: LD_EXP 118
36782: IN
36783: NOT
36784: OR
36785: IFFALSE 36789
// exit ;
36787: GO 37111
// index := GetElementIndex ( minersList , unit ) ;
36789: LD_ADDR_VAR 0 6
36793: PUSH
36794: LD_EXP 118
36798: PPUSH
36799: LD_VAR 0 1
36803: PPUSH
36804: CALL 42460 0 2
36808: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36809: LD_ADDR_VAR 0 8
36813: PUSH
36814: LD_EXP 120
36818: PUSH
36819: LD_EXP 119
36823: PUSH
36824: LD_VAR 0 6
36828: ARRAY
36829: MINUS
36830: ST_TO_ADDR
// if not minesFreeAmount then
36831: LD_VAR 0 8
36835: NOT
36836: IFFALSE 36840
// exit ;
36838: GO 37111
// tmp := [ ] ;
36840: LD_ADDR_VAR 0 7
36844: PUSH
36845: EMPTY
36846: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36847: LD_ADDR_VAR 0 5
36851: PUSH
36852: DOUBLE
36853: LD_INT 1
36855: DEC
36856: ST_TO_ADDR
36857: LD_VAR 0 8
36861: PUSH
36862: FOR_TO
36863: IFFALSE 37058
// begin _d := rand ( 0 , 5 ) ;
36865: LD_ADDR_VAR 0 11
36869: PUSH
36870: LD_INT 0
36872: PPUSH
36873: LD_INT 5
36875: PPUSH
36876: CALL_OW 12
36880: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36881: LD_ADDR_VAR 0 12
36885: PUSH
36886: LD_INT 2
36888: PPUSH
36889: LD_INT 6
36891: PPUSH
36892: CALL_OW 12
36896: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36897: LD_ADDR_VAR 0 9
36901: PUSH
36902: LD_VAR 0 2
36906: PPUSH
36907: LD_VAR 0 11
36911: PPUSH
36912: LD_VAR 0 12
36916: PPUSH
36917: CALL_OW 272
36921: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36922: LD_ADDR_VAR 0 10
36926: PUSH
36927: LD_VAR 0 3
36931: PPUSH
36932: LD_VAR 0 11
36936: PPUSH
36937: LD_VAR 0 12
36941: PPUSH
36942: CALL_OW 273
36946: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36947: LD_VAR 0 9
36951: PPUSH
36952: LD_VAR 0 10
36956: PPUSH
36957: CALL_OW 488
36961: PUSH
36962: LD_VAR 0 9
36966: PUSH
36967: LD_VAR 0 10
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_VAR 0 7
36980: IN
36981: NOT
36982: AND
36983: PUSH
36984: LD_VAR 0 9
36988: PPUSH
36989: LD_VAR 0 10
36993: PPUSH
36994: CALL_OW 458
36998: NOT
36999: AND
37000: IFFALSE 37042
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37002: LD_ADDR_VAR 0 7
37006: PUSH
37007: LD_VAR 0 7
37011: PPUSH
37012: LD_VAR 0 7
37016: PUSH
37017: LD_INT 1
37019: PLUS
37020: PPUSH
37021: LD_VAR 0 9
37025: PUSH
37026: LD_VAR 0 10
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PPUSH
37035: CALL_OW 1
37039: ST_TO_ADDR
37040: GO 37056
// i := i - 1 ;
37042: LD_ADDR_VAR 0 5
37046: PUSH
37047: LD_VAR 0 5
37051: PUSH
37052: LD_INT 1
37054: MINUS
37055: ST_TO_ADDR
// end ;
37056: GO 36862
37058: POP
37059: POP
// for i in tmp do
37060: LD_ADDR_VAR 0 5
37064: PUSH
37065: LD_VAR 0 7
37069: PUSH
37070: FOR_IN
37071: IFFALSE 37109
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37073: LD_VAR 0 1
37077: PPUSH
37078: LD_VAR 0 5
37082: PUSH
37083: LD_INT 1
37085: ARRAY
37086: PPUSH
37087: LD_VAR 0 5
37091: PUSH
37092: LD_INT 2
37094: ARRAY
37095: PPUSH
37096: CALL 36051 0 3
37100: NOT
37101: IFFALSE 37107
// exit ;
37103: POP
37104: POP
37105: GO 37111
37107: GO 37070
37109: POP
37110: POP
// end ;
37111: LD_VAR 0 4
37115: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37116: LD_INT 0
37118: PPUSH
37119: PPUSH
37120: PPUSH
37121: PPUSH
37122: PPUSH
37123: PPUSH
37124: PPUSH
// if not GetClass ( unit ) = class_sniper then
37125: LD_VAR 0 1
37129: PPUSH
37130: CALL_OW 257
37134: PUSH
37135: LD_INT 5
37137: EQUAL
37138: NOT
37139: IFFALSE 37143
// exit ;
37141: GO 37531
// dist := 8 ;
37143: LD_ADDR_VAR 0 5
37147: PUSH
37148: LD_INT 8
37150: ST_TO_ADDR
// viewRange := 12 ;
37151: LD_ADDR_VAR 0 7
37155: PUSH
37156: LD_INT 12
37158: ST_TO_ADDR
// side := GetSide ( unit ) ;
37159: LD_ADDR_VAR 0 6
37163: PUSH
37164: LD_VAR 0 1
37168: PPUSH
37169: CALL_OW 255
37173: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37174: LD_INT 61
37176: PPUSH
37177: LD_VAR 0 6
37181: PPUSH
37182: CALL_OW 321
37186: PUSH
37187: LD_INT 2
37189: EQUAL
37190: IFFALSE 37200
// viewRange := 16 ;
37192: LD_ADDR_VAR 0 7
37196: PUSH
37197: LD_INT 16
37199: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37200: LD_VAR 0 1
37204: PPUSH
37205: LD_VAR 0 2
37209: PPUSH
37210: LD_VAR 0 3
37214: PPUSH
37215: CALL_OW 297
37219: PUSH
37220: LD_VAR 0 5
37224: GREATER
37225: IFFALSE 37304
// begin ComMoveXY ( unit , x , y ) ;
37227: LD_VAR 0 1
37231: PPUSH
37232: LD_VAR 0 2
37236: PPUSH
37237: LD_VAR 0 3
37241: PPUSH
37242: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37246: LD_INT 35
37248: PPUSH
37249: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37253: LD_VAR 0 1
37257: PPUSH
37258: LD_VAR 0 2
37262: PPUSH
37263: LD_VAR 0 3
37267: PPUSH
37268: CALL 73179 0 3
37272: NOT
37273: IFFALSE 37277
// exit ;
37275: GO 37531
// until GetDistUnitXY ( unit , x , y ) < dist ;
37277: LD_VAR 0 1
37281: PPUSH
37282: LD_VAR 0 2
37286: PPUSH
37287: LD_VAR 0 3
37291: PPUSH
37292: CALL_OW 297
37296: PUSH
37297: LD_VAR 0 5
37301: LESS
37302: IFFALSE 37246
// end ; ComTurnXY ( unit , x , y ) ;
37304: LD_VAR 0 1
37308: PPUSH
37309: LD_VAR 0 2
37313: PPUSH
37314: LD_VAR 0 3
37318: PPUSH
37319: CALL_OW 118
// wait ( 5 ) ;
37323: LD_INT 5
37325: PPUSH
37326: CALL_OW 67
// _d := GetDir ( unit ) ;
37330: LD_ADDR_VAR 0 10
37334: PUSH
37335: LD_VAR 0 1
37339: PPUSH
37340: CALL_OW 254
37344: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37345: LD_ADDR_VAR 0 8
37349: PUSH
37350: LD_VAR 0 1
37354: PPUSH
37355: CALL_OW 250
37359: PPUSH
37360: LD_VAR 0 10
37364: PPUSH
37365: LD_VAR 0 5
37369: PPUSH
37370: CALL_OW 272
37374: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37375: LD_ADDR_VAR 0 9
37379: PUSH
37380: LD_VAR 0 1
37384: PPUSH
37385: CALL_OW 251
37389: PPUSH
37390: LD_VAR 0 10
37394: PPUSH
37395: LD_VAR 0 5
37399: PPUSH
37400: CALL_OW 273
37404: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37405: LD_VAR 0 8
37409: PPUSH
37410: LD_VAR 0 9
37414: PPUSH
37415: CALL_OW 488
37419: NOT
37420: IFFALSE 37424
// exit ;
37422: GO 37531
// ComAnimCustom ( unit , 1 ) ;
37424: LD_VAR 0 1
37428: PPUSH
37429: LD_INT 1
37431: PPUSH
37432: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37436: LD_VAR 0 8
37440: PPUSH
37441: LD_VAR 0 9
37445: PPUSH
37446: LD_VAR 0 6
37450: PPUSH
37451: LD_VAR 0 7
37455: PPUSH
37456: CALL_OW 330
// repeat wait ( 1 ) ;
37460: LD_INT 1
37462: PPUSH
37463: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37467: LD_VAR 0 1
37471: PPUSH
37472: CALL_OW 316
37476: PUSH
37477: LD_VAR 0 1
37481: PPUSH
37482: CALL_OW 314
37486: OR
37487: PUSH
37488: LD_VAR 0 1
37492: PPUSH
37493: CALL_OW 302
37497: NOT
37498: OR
37499: PUSH
37500: LD_VAR 0 1
37504: PPUSH
37505: CALL_OW 301
37509: OR
37510: IFFALSE 37460
// RemoveSeeing ( _x , _y , side ) ;
37512: LD_VAR 0 8
37516: PPUSH
37517: LD_VAR 0 9
37521: PPUSH
37522: LD_VAR 0 6
37526: PPUSH
37527: CALL_OW 331
// end ; end_of_file
37531: LD_VAR 0 4
37535: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37536: LD_INT 0
37538: PPUSH
37539: PPUSH
// if exist_mode then
37540: LD_VAR 0 2
37544: IFFALSE 37569
// unit := CreateCharacter ( prefix & ident ) else
37546: LD_ADDR_VAR 0 5
37550: PUSH
37551: LD_VAR 0 3
37555: PUSH
37556: LD_VAR 0 1
37560: STR
37561: PPUSH
37562: CALL_OW 34
37566: ST_TO_ADDR
37567: GO 37584
// unit := NewCharacter ( ident ) ;
37569: LD_ADDR_VAR 0 5
37573: PUSH
37574: LD_VAR 0 1
37578: PPUSH
37579: CALL_OW 25
37583: ST_TO_ADDR
// result := unit ;
37584: LD_ADDR_VAR 0 4
37588: PUSH
37589: LD_VAR 0 5
37593: ST_TO_ADDR
// end ;
37594: LD_VAR 0 4
37598: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37599: LD_INT 0
37601: PPUSH
37602: PPUSH
// if not side or not nation then
37603: LD_VAR 0 1
37607: NOT
37608: PUSH
37609: LD_VAR 0 2
37613: NOT
37614: OR
37615: IFFALSE 37619
// exit ;
37617: GO 38387
// case nation of nation_american :
37619: LD_VAR 0 2
37623: PUSH
37624: LD_INT 1
37626: DOUBLE
37627: EQUAL
37628: IFTRUE 37632
37630: GO 37846
37632: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37633: LD_ADDR_VAR 0 4
37637: PUSH
37638: LD_INT 35
37640: PUSH
37641: LD_INT 45
37643: PUSH
37644: LD_INT 46
37646: PUSH
37647: LD_INT 47
37649: PUSH
37650: LD_INT 82
37652: PUSH
37653: LD_INT 83
37655: PUSH
37656: LD_INT 84
37658: PUSH
37659: LD_INT 85
37661: PUSH
37662: LD_INT 86
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: LD_INT 2
37670: PUSH
37671: LD_INT 6
37673: PUSH
37674: LD_INT 15
37676: PUSH
37677: LD_INT 16
37679: PUSH
37680: LD_INT 7
37682: PUSH
37683: LD_INT 12
37685: PUSH
37686: LD_INT 13
37688: PUSH
37689: LD_INT 10
37691: PUSH
37692: LD_INT 14
37694: PUSH
37695: LD_INT 20
37697: PUSH
37698: LD_INT 21
37700: PUSH
37701: LD_INT 22
37703: PUSH
37704: LD_INT 25
37706: PUSH
37707: LD_INT 32
37709: PUSH
37710: LD_INT 27
37712: PUSH
37713: LD_INT 36
37715: PUSH
37716: LD_INT 69
37718: PUSH
37719: LD_INT 39
37721: PUSH
37722: LD_INT 34
37724: PUSH
37725: LD_INT 40
37727: PUSH
37728: LD_INT 48
37730: PUSH
37731: LD_INT 49
37733: PUSH
37734: LD_INT 50
37736: PUSH
37737: LD_INT 51
37739: PUSH
37740: LD_INT 52
37742: PUSH
37743: LD_INT 53
37745: PUSH
37746: LD_INT 54
37748: PUSH
37749: LD_INT 55
37751: PUSH
37752: LD_INT 56
37754: PUSH
37755: LD_INT 57
37757: PUSH
37758: LD_INT 58
37760: PUSH
37761: LD_INT 59
37763: PUSH
37764: LD_INT 60
37766: PUSH
37767: LD_INT 61
37769: PUSH
37770: LD_INT 62
37772: PUSH
37773: LD_INT 80
37775: PUSH
37776: LD_INT 82
37778: PUSH
37779: LD_INT 83
37781: PUSH
37782: LD_INT 84
37784: PUSH
37785: LD_INT 85
37787: PUSH
37788: LD_INT 86
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: ST_TO_ADDR
37844: GO 38311
37846: LD_INT 2
37848: DOUBLE
37849: EQUAL
37850: IFTRUE 37854
37852: GO 38080
37854: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37855: LD_ADDR_VAR 0 4
37859: PUSH
37860: LD_INT 35
37862: PUSH
37863: LD_INT 45
37865: PUSH
37866: LD_INT 46
37868: PUSH
37869: LD_INT 47
37871: PUSH
37872: LD_INT 82
37874: PUSH
37875: LD_INT 83
37877: PUSH
37878: LD_INT 84
37880: PUSH
37881: LD_INT 85
37883: PUSH
37884: LD_INT 87
37886: PUSH
37887: LD_INT 70
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: LD_INT 11
37895: PUSH
37896: LD_INT 3
37898: PUSH
37899: LD_INT 4
37901: PUSH
37902: LD_INT 5
37904: PUSH
37905: LD_INT 6
37907: PUSH
37908: LD_INT 15
37910: PUSH
37911: LD_INT 18
37913: PUSH
37914: LD_INT 7
37916: PUSH
37917: LD_INT 17
37919: PUSH
37920: LD_INT 8
37922: PUSH
37923: LD_INT 20
37925: PUSH
37926: LD_INT 21
37928: PUSH
37929: LD_INT 22
37931: PUSH
37932: LD_INT 72
37934: PUSH
37935: LD_INT 26
37937: PUSH
37938: LD_INT 69
37940: PUSH
37941: LD_INT 39
37943: PUSH
37944: LD_INT 40
37946: PUSH
37947: LD_INT 41
37949: PUSH
37950: LD_INT 42
37952: PUSH
37953: LD_INT 43
37955: PUSH
37956: LD_INT 48
37958: PUSH
37959: LD_INT 49
37961: PUSH
37962: LD_INT 50
37964: PUSH
37965: LD_INT 51
37967: PUSH
37968: LD_INT 52
37970: PUSH
37971: LD_INT 53
37973: PUSH
37974: LD_INT 54
37976: PUSH
37977: LD_INT 55
37979: PUSH
37980: LD_INT 56
37982: PUSH
37983: LD_INT 60
37985: PUSH
37986: LD_INT 61
37988: PUSH
37989: LD_INT 62
37991: PUSH
37992: LD_INT 66
37994: PUSH
37995: LD_INT 67
37997: PUSH
37998: LD_INT 68
38000: PUSH
38001: LD_INT 81
38003: PUSH
38004: LD_INT 82
38006: PUSH
38007: LD_INT 83
38009: PUSH
38010: LD_INT 84
38012: PUSH
38013: LD_INT 85
38015: PUSH
38016: LD_INT 87
38018: PUSH
38019: LD_INT 88
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: ST_TO_ADDR
38078: GO 38311
38080: LD_INT 3
38082: DOUBLE
38083: EQUAL
38084: IFTRUE 38088
38086: GO 38310
38088: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38089: LD_ADDR_VAR 0 4
38093: PUSH
38094: LD_INT 46
38096: PUSH
38097: LD_INT 47
38099: PUSH
38100: LD_INT 1
38102: PUSH
38103: LD_INT 2
38105: PUSH
38106: LD_INT 82
38108: PUSH
38109: LD_INT 83
38111: PUSH
38112: LD_INT 84
38114: PUSH
38115: LD_INT 85
38117: PUSH
38118: LD_INT 86
38120: PUSH
38121: LD_INT 11
38123: PUSH
38124: LD_INT 9
38126: PUSH
38127: LD_INT 20
38129: PUSH
38130: LD_INT 19
38132: PUSH
38133: LD_INT 21
38135: PUSH
38136: LD_INT 24
38138: PUSH
38139: LD_INT 22
38141: PUSH
38142: LD_INT 25
38144: PUSH
38145: LD_INT 28
38147: PUSH
38148: LD_INT 29
38150: PUSH
38151: LD_INT 30
38153: PUSH
38154: LD_INT 31
38156: PUSH
38157: LD_INT 37
38159: PUSH
38160: LD_INT 38
38162: PUSH
38163: LD_INT 32
38165: PUSH
38166: LD_INT 27
38168: PUSH
38169: LD_INT 33
38171: PUSH
38172: LD_INT 69
38174: PUSH
38175: LD_INT 39
38177: PUSH
38178: LD_INT 34
38180: PUSH
38181: LD_INT 40
38183: PUSH
38184: LD_INT 71
38186: PUSH
38187: LD_INT 23
38189: PUSH
38190: LD_INT 44
38192: PUSH
38193: LD_INT 48
38195: PUSH
38196: LD_INT 49
38198: PUSH
38199: LD_INT 50
38201: PUSH
38202: LD_INT 51
38204: PUSH
38205: LD_INT 52
38207: PUSH
38208: LD_INT 53
38210: PUSH
38211: LD_INT 54
38213: PUSH
38214: LD_INT 55
38216: PUSH
38217: LD_INT 56
38219: PUSH
38220: LD_INT 57
38222: PUSH
38223: LD_INT 58
38225: PUSH
38226: LD_INT 59
38228: PUSH
38229: LD_INT 63
38231: PUSH
38232: LD_INT 64
38234: PUSH
38235: LD_INT 65
38237: PUSH
38238: LD_INT 82
38240: PUSH
38241: LD_INT 83
38243: PUSH
38244: LD_INT 84
38246: PUSH
38247: LD_INT 85
38249: PUSH
38250: LD_INT 86
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: ST_TO_ADDR
38308: GO 38311
38310: POP
// if state > - 1 and state < 3 then
38311: LD_VAR 0 3
38315: PUSH
38316: LD_INT 1
38318: NEG
38319: GREATER
38320: PUSH
38321: LD_VAR 0 3
38325: PUSH
38326: LD_INT 3
38328: LESS
38329: AND
38330: IFFALSE 38387
// for i in result do
38332: LD_ADDR_VAR 0 5
38336: PUSH
38337: LD_VAR 0 4
38341: PUSH
38342: FOR_IN
38343: IFFALSE 38385
// if GetTech ( i , side ) <> state then
38345: LD_VAR 0 5
38349: PPUSH
38350: LD_VAR 0 1
38354: PPUSH
38355: CALL_OW 321
38359: PUSH
38360: LD_VAR 0 3
38364: NONEQUAL
38365: IFFALSE 38383
// result := result diff i ;
38367: LD_ADDR_VAR 0 4
38371: PUSH
38372: LD_VAR 0 4
38376: PUSH
38377: LD_VAR 0 5
38381: DIFF
38382: ST_TO_ADDR
38383: GO 38342
38385: POP
38386: POP
// end ;
38387: LD_VAR 0 4
38391: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38392: LD_INT 0
38394: PPUSH
38395: PPUSH
38396: PPUSH
// result := true ;
38397: LD_ADDR_VAR 0 3
38401: PUSH
38402: LD_INT 1
38404: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38405: LD_ADDR_VAR 0 5
38409: PUSH
38410: LD_VAR 0 2
38414: PPUSH
38415: CALL_OW 480
38419: ST_TO_ADDR
// if not tmp then
38420: LD_VAR 0 5
38424: NOT
38425: IFFALSE 38429
// exit ;
38427: GO 38478
// for i in tmp do
38429: LD_ADDR_VAR 0 4
38433: PUSH
38434: LD_VAR 0 5
38438: PUSH
38439: FOR_IN
38440: IFFALSE 38476
// if GetTech ( i , side ) <> state_researched then
38442: LD_VAR 0 4
38446: PPUSH
38447: LD_VAR 0 1
38451: PPUSH
38452: CALL_OW 321
38456: PUSH
38457: LD_INT 2
38459: NONEQUAL
38460: IFFALSE 38474
// begin result := false ;
38462: LD_ADDR_VAR 0 3
38466: PUSH
38467: LD_INT 0
38469: ST_TO_ADDR
// exit ;
38470: POP
38471: POP
38472: GO 38478
// end ;
38474: GO 38439
38476: POP
38477: POP
// end ;
38478: LD_VAR 0 3
38482: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38483: LD_INT 0
38485: PPUSH
38486: PPUSH
38487: PPUSH
38488: PPUSH
38489: PPUSH
38490: PPUSH
38491: PPUSH
38492: PPUSH
38493: PPUSH
38494: PPUSH
38495: PPUSH
38496: PPUSH
38497: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38498: LD_VAR 0 1
38502: NOT
38503: PUSH
38504: LD_VAR 0 1
38508: PPUSH
38509: CALL_OW 257
38513: PUSH
38514: LD_INT 9
38516: NONEQUAL
38517: OR
38518: IFFALSE 38522
// exit ;
38520: GO 39095
// side := GetSide ( unit ) ;
38522: LD_ADDR_VAR 0 9
38526: PUSH
38527: LD_VAR 0 1
38531: PPUSH
38532: CALL_OW 255
38536: ST_TO_ADDR
// tech_space := tech_spacanom ;
38537: LD_ADDR_VAR 0 12
38541: PUSH
38542: LD_INT 29
38544: ST_TO_ADDR
// tech_time := tech_taurad ;
38545: LD_ADDR_VAR 0 13
38549: PUSH
38550: LD_INT 28
38552: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38553: LD_ADDR_VAR 0 11
38557: PUSH
38558: LD_VAR 0 1
38562: PPUSH
38563: CALL_OW 310
38567: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38568: LD_VAR 0 11
38572: PPUSH
38573: CALL_OW 247
38577: PUSH
38578: LD_INT 2
38580: EQUAL
38581: IFFALSE 38585
// exit ;
38583: GO 39095
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38585: LD_ADDR_VAR 0 8
38589: PUSH
38590: LD_INT 81
38592: PUSH
38593: LD_VAR 0 9
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 3
38604: PUSH
38605: LD_INT 21
38607: PUSH
38608: LD_INT 3
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PPUSH
38623: CALL_OW 69
38627: ST_TO_ADDR
// if not tmp then
38628: LD_VAR 0 8
38632: NOT
38633: IFFALSE 38637
// exit ;
38635: GO 39095
// if in_unit then
38637: LD_VAR 0 11
38641: IFFALSE 38665
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38643: LD_ADDR_VAR 0 10
38647: PUSH
38648: LD_VAR 0 8
38652: PPUSH
38653: LD_VAR 0 11
38657: PPUSH
38658: CALL_OW 74
38662: ST_TO_ADDR
38663: GO 38685
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38665: LD_ADDR_VAR 0 10
38669: PUSH
38670: LD_VAR 0 8
38674: PPUSH
38675: LD_VAR 0 1
38679: PPUSH
38680: CALL_OW 74
38684: ST_TO_ADDR
// if not enemy then
38685: LD_VAR 0 10
38689: NOT
38690: IFFALSE 38694
// exit ;
38692: GO 39095
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38694: LD_VAR 0 11
38698: PUSH
38699: LD_VAR 0 11
38703: PPUSH
38704: LD_VAR 0 10
38708: PPUSH
38709: CALL_OW 296
38713: PUSH
38714: LD_INT 13
38716: GREATER
38717: AND
38718: PUSH
38719: LD_VAR 0 1
38723: PPUSH
38724: LD_VAR 0 10
38728: PPUSH
38729: CALL_OW 296
38733: PUSH
38734: LD_INT 12
38736: GREATER
38737: OR
38738: IFFALSE 38742
// exit ;
38740: GO 39095
// missile := [ 1 ] ;
38742: LD_ADDR_VAR 0 14
38746: PUSH
38747: LD_INT 1
38749: PUSH
38750: EMPTY
38751: LIST
38752: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38753: LD_VAR 0 9
38757: PPUSH
38758: LD_VAR 0 12
38762: PPUSH
38763: CALL_OW 325
38767: IFFALSE 38796
// missile := Replace ( missile , missile + 1 , 2 ) ;
38769: LD_ADDR_VAR 0 14
38773: PUSH
38774: LD_VAR 0 14
38778: PPUSH
38779: LD_VAR 0 14
38783: PUSH
38784: LD_INT 1
38786: PLUS
38787: PPUSH
38788: LD_INT 2
38790: PPUSH
38791: CALL_OW 1
38795: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38796: LD_VAR 0 9
38800: PPUSH
38801: LD_VAR 0 13
38805: PPUSH
38806: CALL_OW 325
38810: PUSH
38811: LD_VAR 0 10
38815: PPUSH
38816: CALL_OW 255
38820: PPUSH
38821: LD_VAR 0 13
38825: PPUSH
38826: CALL_OW 325
38830: NOT
38831: AND
38832: IFFALSE 38861
// missile := Replace ( missile , missile + 1 , 3 ) ;
38834: LD_ADDR_VAR 0 14
38838: PUSH
38839: LD_VAR 0 14
38843: PPUSH
38844: LD_VAR 0 14
38848: PUSH
38849: LD_INT 1
38851: PLUS
38852: PPUSH
38853: LD_INT 3
38855: PPUSH
38856: CALL_OW 1
38860: ST_TO_ADDR
// if missile < 2 then
38861: LD_VAR 0 14
38865: PUSH
38866: LD_INT 2
38868: LESS
38869: IFFALSE 38873
// exit ;
38871: GO 39095
// x := GetX ( enemy ) ;
38873: LD_ADDR_VAR 0 4
38877: PUSH
38878: LD_VAR 0 10
38882: PPUSH
38883: CALL_OW 250
38887: ST_TO_ADDR
// y := GetY ( enemy ) ;
38888: LD_ADDR_VAR 0 5
38892: PUSH
38893: LD_VAR 0 10
38897: PPUSH
38898: CALL_OW 251
38902: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38903: LD_ADDR_VAR 0 6
38907: PUSH
38908: LD_VAR 0 4
38912: PUSH
38913: LD_INT 1
38915: NEG
38916: PPUSH
38917: LD_INT 1
38919: PPUSH
38920: CALL_OW 12
38924: PLUS
38925: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38926: LD_ADDR_VAR 0 7
38930: PUSH
38931: LD_VAR 0 5
38935: PUSH
38936: LD_INT 1
38938: NEG
38939: PPUSH
38940: LD_INT 1
38942: PPUSH
38943: CALL_OW 12
38947: PLUS
38948: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38949: LD_VAR 0 6
38953: PPUSH
38954: LD_VAR 0 7
38958: PPUSH
38959: CALL_OW 488
38963: NOT
38964: IFFALSE 38986
// begin _x := x ;
38966: LD_ADDR_VAR 0 6
38970: PUSH
38971: LD_VAR 0 4
38975: ST_TO_ADDR
// _y := y ;
38976: LD_ADDR_VAR 0 7
38980: PUSH
38981: LD_VAR 0 5
38985: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38986: LD_ADDR_VAR 0 3
38990: PUSH
38991: LD_INT 1
38993: PPUSH
38994: LD_VAR 0 14
38998: PPUSH
38999: CALL_OW 12
39003: ST_TO_ADDR
// case i of 1 :
39004: LD_VAR 0 3
39008: PUSH
39009: LD_INT 1
39011: DOUBLE
39012: EQUAL
39013: IFTRUE 39017
39015: GO 39034
39017: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39018: LD_VAR 0 1
39022: PPUSH
39023: LD_VAR 0 10
39027: PPUSH
39028: CALL_OW 115
39032: GO 39095
39034: LD_INT 2
39036: DOUBLE
39037: EQUAL
39038: IFTRUE 39042
39040: GO 39064
39042: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39043: LD_VAR 0 1
39047: PPUSH
39048: LD_VAR 0 6
39052: PPUSH
39053: LD_VAR 0 7
39057: PPUSH
39058: CALL_OW 153
39062: GO 39095
39064: LD_INT 3
39066: DOUBLE
39067: EQUAL
39068: IFTRUE 39072
39070: GO 39094
39072: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39073: LD_VAR 0 1
39077: PPUSH
39078: LD_VAR 0 6
39082: PPUSH
39083: LD_VAR 0 7
39087: PPUSH
39088: CALL_OW 154
39092: GO 39095
39094: POP
// end ;
39095: LD_VAR 0 2
39099: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39100: LD_INT 0
39102: PPUSH
39103: PPUSH
39104: PPUSH
39105: PPUSH
39106: PPUSH
39107: PPUSH
// if not unit or not building then
39108: LD_VAR 0 1
39112: NOT
39113: PUSH
39114: LD_VAR 0 2
39118: NOT
39119: OR
39120: IFFALSE 39124
// exit ;
39122: GO 39282
// x := GetX ( building ) ;
39124: LD_ADDR_VAR 0 5
39128: PUSH
39129: LD_VAR 0 2
39133: PPUSH
39134: CALL_OW 250
39138: ST_TO_ADDR
// y := GetY ( building ) ;
39139: LD_ADDR_VAR 0 6
39143: PUSH
39144: LD_VAR 0 2
39148: PPUSH
39149: CALL_OW 251
39153: ST_TO_ADDR
// for i = 0 to 5 do
39154: LD_ADDR_VAR 0 4
39158: PUSH
39159: DOUBLE
39160: LD_INT 0
39162: DEC
39163: ST_TO_ADDR
39164: LD_INT 5
39166: PUSH
39167: FOR_TO
39168: IFFALSE 39280
// begin _x := ShiftX ( x , i , 3 ) ;
39170: LD_ADDR_VAR 0 7
39174: PUSH
39175: LD_VAR 0 5
39179: PPUSH
39180: LD_VAR 0 4
39184: PPUSH
39185: LD_INT 3
39187: PPUSH
39188: CALL_OW 272
39192: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39193: LD_ADDR_VAR 0 8
39197: PUSH
39198: LD_VAR 0 6
39202: PPUSH
39203: LD_VAR 0 4
39207: PPUSH
39208: LD_INT 3
39210: PPUSH
39211: CALL_OW 273
39215: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39216: LD_VAR 0 7
39220: PPUSH
39221: LD_VAR 0 8
39225: PPUSH
39226: CALL_OW 488
39230: NOT
39231: IFFALSE 39235
// continue ;
39233: GO 39167
// if HexInfo ( _x , _y ) = 0 then
39235: LD_VAR 0 7
39239: PPUSH
39240: LD_VAR 0 8
39244: PPUSH
39245: CALL_OW 428
39249: PUSH
39250: LD_INT 0
39252: EQUAL
39253: IFFALSE 39278
// begin ComMoveXY ( unit , _x , _y ) ;
39255: LD_VAR 0 1
39259: PPUSH
39260: LD_VAR 0 7
39264: PPUSH
39265: LD_VAR 0 8
39269: PPUSH
39270: CALL_OW 111
// exit ;
39274: POP
39275: POP
39276: GO 39282
// end ; end ;
39278: GO 39167
39280: POP
39281: POP
// end ;
39282: LD_VAR 0 3
39286: RET
// export function ScanBase ( side , base_area ) ; begin
39287: LD_INT 0
39289: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39290: LD_ADDR_VAR 0 3
39294: PUSH
39295: LD_VAR 0 2
39299: PPUSH
39300: LD_INT 81
39302: PUSH
39303: LD_VAR 0 1
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PPUSH
39312: CALL_OW 70
39316: ST_TO_ADDR
// end ;
39317: LD_VAR 0 3
39321: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39322: LD_INT 0
39324: PPUSH
39325: PPUSH
39326: PPUSH
39327: PPUSH
// result := false ;
39328: LD_ADDR_VAR 0 2
39332: PUSH
39333: LD_INT 0
39335: ST_TO_ADDR
// side := GetSide ( unit ) ;
39336: LD_ADDR_VAR 0 3
39340: PUSH
39341: LD_VAR 0 1
39345: PPUSH
39346: CALL_OW 255
39350: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39351: LD_ADDR_VAR 0 4
39355: PUSH
39356: LD_VAR 0 1
39360: PPUSH
39361: CALL_OW 248
39365: ST_TO_ADDR
// case nat of 1 :
39366: LD_VAR 0 4
39370: PUSH
39371: LD_INT 1
39373: DOUBLE
39374: EQUAL
39375: IFTRUE 39379
39377: GO 39390
39379: POP
// tech := tech_lassight ; 2 :
39380: LD_ADDR_VAR 0 5
39384: PUSH
39385: LD_INT 12
39387: ST_TO_ADDR
39388: GO 39429
39390: LD_INT 2
39392: DOUBLE
39393: EQUAL
39394: IFTRUE 39398
39396: GO 39409
39398: POP
// tech := tech_mortar ; 3 :
39399: LD_ADDR_VAR 0 5
39403: PUSH
39404: LD_INT 41
39406: ST_TO_ADDR
39407: GO 39429
39409: LD_INT 3
39411: DOUBLE
39412: EQUAL
39413: IFTRUE 39417
39415: GO 39428
39417: POP
// tech := tech_bazooka ; end ;
39418: LD_ADDR_VAR 0 5
39422: PUSH
39423: LD_INT 44
39425: ST_TO_ADDR
39426: GO 39429
39428: POP
// if Researched ( side , tech ) then
39429: LD_VAR 0 3
39433: PPUSH
39434: LD_VAR 0 5
39438: PPUSH
39439: CALL_OW 325
39443: IFFALSE 39470
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39445: LD_ADDR_VAR 0 2
39449: PUSH
39450: LD_INT 5
39452: PUSH
39453: LD_INT 8
39455: PUSH
39456: LD_INT 9
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: LIST
39463: PUSH
39464: LD_VAR 0 4
39468: ARRAY
39469: ST_TO_ADDR
// end ;
39470: LD_VAR 0 2
39474: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39475: LD_INT 0
39477: PPUSH
39478: PPUSH
39479: PPUSH
// if not mines then
39480: LD_VAR 0 2
39484: NOT
39485: IFFALSE 39489
// exit ;
39487: GO 39633
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39489: LD_ADDR_VAR 0 5
39493: PUSH
39494: LD_INT 81
39496: PUSH
39497: LD_VAR 0 1
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 3
39508: PUSH
39509: LD_INT 21
39511: PUSH
39512: LD_INT 3
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PPUSH
39527: CALL_OW 69
39531: ST_TO_ADDR
// for i in mines do
39532: LD_ADDR_VAR 0 4
39536: PUSH
39537: LD_VAR 0 2
39541: PUSH
39542: FOR_IN
39543: IFFALSE 39631
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39545: LD_VAR 0 4
39549: PUSH
39550: LD_INT 1
39552: ARRAY
39553: PPUSH
39554: LD_VAR 0 4
39558: PUSH
39559: LD_INT 2
39561: ARRAY
39562: PPUSH
39563: CALL_OW 458
39567: NOT
39568: IFFALSE 39572
// continue ;
39570: GO 39542
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39572: LD_VAR 0 4
39576: PUSH
39577: LD_INT 1
39579: ARRAY
39580: PPUSH
39581: LD_VAR 0 4
39585: PUSH
39586: LD_INT 2
39588: ARRAY
39589: PPUSH
39590: CALL_OW 428
39594: PUSH
39595: LD_VAR 0 5
39599: IN
39600: IFFALSE 39629
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39602: LD_VAR 0 4
39606: PUSH
39607: LD_INT 1
39609: ARRAY
39610: PPUSH
39611: LD_VAR 0 4
39615: PUSH
39616: LD_INT 2
39618: ARRAY
39619: PPUSH
39620: LD_VAR 0 1
39624: PPUSH
39625: CALL_OW 456
// end ;
39629: GO 39542
39631: POP
39632: POP
// end ;
39633: LD_VAR 0 3
39637: RET
// export function Count ( array ) ; var i ; begin
39638: LD_INT 0
39640: PPUSH
39641: PPUSH
// result := 0 ;
39642: LD_ADDR_VAR 0 2
39646: PUSH
39647: LD_INT 0
39649: ST_TO_ADDR
// for i in array do
39650: LD_ADDR_VAR 0 3
39654: PUSH
39655: LD_VAR 0 1
39659: PUSH
39660: FOR_IN
39661: IFFALSE 39685
// if i then
39663: LD_VAR 0 3
39667: IFFALSE 39683
// result := result + 1 ;
39669: LD_ADDR_VAR 0 2
39673: PUSH
39674: LD_VAR 0 2
39678: PUSH
39679: LD_INT 1
39681: PLUS
39682: ST_TO_ADDR
39683: GO 39660
39685: POP
39686: POP
// end ;
39687: LD_VAR 0 2
39691: RET
// export function IsEmpty ( building ) ; begin
39692: LD_INT 0
39694: PPUSH
// if not building then
39695: LD_VAR 0 1
39699: NOT
39700: IFFALSE 39704
// exit ;
39702: GO 39747
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39704: LD_ADDR_VAR 0 2
39708: PUSH
39709: LD_VAR 0 1
39713: PUSH
39714: LD_INT 22
39716: PUSH
39717: LD_VAR 0 1
39721: PPUSH
39722: CALL_OW 255
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 58
39733: PUSH
39734: EMPTY
39735: LIST
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PPUSH
39741: CALL_OW 69
39745: IN
39746: ST_TO_ADDR
// end ;
39747: LD_VAR 0 2
39751: RET
// export function IsNotFull ( building ) ; var places ; begin
39752: LD_INT 0
39754: PPUSH
39755: PPUSH
// if not building then
39756: LD_VAR 0 1
39760: NOT
39761: IFFALSE 39765
// exit ;
39763: GO 39936
// result := false ;
39765: LD_ADDR_VAR 0 2
39769: PUSH
39770: LD_INT 0
39772: ST_TO_ADDR
// places := 0 ;
39773: LD_ADDR_VAR 0 3
39777: PUSH
39778: LD_INT 0
39780: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
39781: LD_VAR 0 1
39785: PPUSH
39786: CALL_OW 266
39790: PUSH
39791: LD_INT 0
39793: DOUBLE
39794: EQUAL
39795: IFTRUE 39853
39797: LD_INT 1
39799: DOUBLE
39800: EQUAL
39801: IFTRUE 39853
39803: LD_INT 6
39805: DOUBLE
39806: EQUAL
39807: IFTRUE 39853
39809: LD_INT 7
39811: DOUBLE
39812: EQUAL
39813: IFTRUE 39853
39815: LD_INT 8
39817: DOUBLE
39818: EQUAL
39819: IFTRUE 39853
39821: LD_INT 4
39823: DOUBLE
39824: EQUAL
39825: IFTRUE 39853
39827: LD_INT 5
39829: DOUBLE
39830: EQUAL
39831: IFTRUE 39853
39833: LD_INT 2
39835: DOUBLE
39836: EQUAL
39837: IFTRUE 39853
39839: LD_INT 3
39841: DOUBLE
39842: EQUAL
39843: IFTRUE 39853
39845: LD_INT 35
39847: DOUBLE
39848: EQUAL
39849: IFTRUE 39853
39851: GO 39864
39853: POP
// places := 6 ; b_bunker , b_breastwork :
39854: LD_ADDR_VAR 0 3
39858: PUSH
39859: LD_INT 6
39861: ST_TO_ADDR
39862: GO 39909
39864: LD_INT 32
39866: DOUBLE
39867: EQUAL
39868: IFTRUE 39878
39870: LD_INT 31
39872: DOUBLE
39873: EQUAL
39874: IFTRUE 39878
39876: GO 39889
39878: POP
// places := 1 ; b_control_tower :
39879: LD_ADDR_VAR 0 3
39883: PUSH
39884: LD_INT 1
39886: ST_TO_ADDR
39887: GO 39909
39889: LD_INT 36
39891: DOUBLE
39892: EQUAL
39893: IFTRUE 39897
39895: GO 39908
39897: POP
// places := 3 ; end ;
39898: LD_ADDR_VAR 0 3
39902: PUSH
39903: LD_INT 3
39905: ST_TO_ADDR
39906: GO 39909
39908: POP
// if places then
39909: LD_VAR 0 3
39913: IFFALSE 39936
// result := UnitsInside ( building ) < places ;
39915: LD_ADDR_VAR 0 2
39919: PUSH
39920: LD_VAR 0 1
39924: PPUSH
39925: CALL_OW 313
39929: PUSH
39930: LD_VAR 0 3
39934: LESS
39935: ST_TO_ADDR
// end ;
39936: LD_VAR 0 2
39940: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39941: LD_INT 0
39943: PPUSH
39944: PPUSH
39945: PPUSH
39946: PPUSH
// tmp := [ ] ;
39947: LD_ADDR_VAR 0 3
39951: PUSH
39952: EMPTY
39953: ST_TO_ADDR
// list := [ ] ;
39954: LD_ADDR_VAR 0 5
39958: PUSH
39959: EMPTY
39960: ST_TO_ADDR
// for i = 16 to 25 do
39961: LD_ADDR_VAR 0 4
39965: PUSH
39966: DOUBLE
39967: LD_INT 16
39969: DEC
39970: ST_TO_ADDR
39971: LD_INT 25
39973: PUSH
39974: FOR_TO
39975: IFFALSE 40048
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39977: LD_ADDR_VAR 0 3
39981: PUSH
39982: LD_VAR 0 3
39986: PUSH
39987: LD_INT 22
39989: PUSH
39990: LD_VAR 0 1
39994: PPUSH
39995: CALL_OW 255
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 91
40006: PUSH
40007: LD_VAR 0 1
40011: PUSH
40012: LD_INT 6
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 30
40022: PUSH
40023: LD_VAR 0 4
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: LIST
40036: PUSH
40037: EMPTY
40038: LIST
40039: PPUSH
40040: CALL_OW 69
40044: ADD
40045: ST_TO_ADDR
40046: GO 39974
40048: POP
40049: POP
// for i = 1 to tmp do
40050: LD_ADDR_VAR 0 4
40054: PUSH
40055: DOUBLE
40056: LD_INT 1
40058: DEC
40059: ST_TO_ADDR
40060: LD_VAR 0 3
40064: PUSH
40065: FOR_TO
40066: IFFALSE 40154
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40068: LD_ADDR_VAR 0 5
40072: PUSH
40073: LD_VAR 0 5
40077: PUSH
40078: LD_VAR 0 3
40082: PUSH
40083: LD_VAR 0 4
40087: ARRAY
40088: PPUSH
40089: CALL_OW 266
40093: PUSH
40094: LD_VAR 0 3
40098: PUSH
40099: LD_VAR 0 4
40103: ARRAY
40104: PPUSH
40105: CALL_OW 250
40109: PUSH
40110: LD_VAR 0 3
40114: PUSH
40115: LD_VAR 0 4
40119: ARRAY
40120: PPUSH
40121: CALL_OW 251
40125: PUSH
40126: LD_VAR 0 3
40130: PUSH
40131: LD_VAR 0 4
40135: ARRAY
40136: PPUSH
40137: CALL_OW 254
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: PUSH
40148: EMPTY
40149: LIST
40150: ADD
40151: ST_TO_ADDR
40152: GO 40065
40154: POP
40155: POP
// result := list ;
40156: LD_ADDR_VAR 0 2
40160: PUSH
40161: LD_VAR 0 5
40165: ST_TO_ADDR
// end ;
40166: LD_VAR 0 2
40170: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40171: LD_INT 0
40173: PPUSH
40174: PPUSH
40175: PPUSH
40176: PPUSH
40177: PPUSH
40178: PPUSH
40179: PPUSH
// if not factory then
40180: LD_VAR 0 1
40184: NOT
40185: IFFALSE 40189
// exit ;
40187: GO 40782
// if control = control_apeman then
40189: LD_VAR 0 4
40193: PUSH
40194: LD_INT 5
40196: EQUAL
40197: IFFALSE 40306
// begin tmp := UnitsInside ( factory ) ;
40199: LD_ADDR_VAR 0 8
40203: PUSH
40204: LD_VAR 0 1
40208: PPUSH
40209: CALL_OW 313
40213: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40214: LD_VAR 0 8
40218: PPUSH
40219: LD_INT 25
40221: PUSH
40222: LD_INT 12
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PPUSH
40229: CALL_OW 72
40233: NOT
40234: IFFALSE 40244
// control := control_manual ;
40236: LD_ADDR_VAR 0 4
40240: PUSH
40241: LD_INT 1
40243: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40244: LD_ADDR_VAR 0 8
40248: PUSH
40249: LD_VAR 0 1
40253: PPUSH
40254: CALL 39941 0 1
40258: ST_TO_ADDR
// if tmp then
40259: LD_VAR 0 8
40263: IFFALSE 40306
// begin for i in tmp do
40265: LD_ADDR_VAR 0 7
40269: PUSH
40270: LD_VAR 0 8
40274: PUSH
40275: FOR_IN
40276: IFFALSE 40304
// if i [ 1 ] = b_ext_radio then
40278: LD_VAR 0 7
40282: PUSH
40283: LD_INT 1
40285: ARRAY
40286: PUSH
40287: LD_INT 22
40289: EQUAL
40290: IFFALSE 40302
// begin control := control_remote ;
40292: LD_ADDR_VAR 0 4
40296: PUSH
40297: LD_INT 2
40299: ST_TO_ADDR
// break ;
40300: GO 40304
// end ;
40302: GO 40275
40304: POP
40305: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40306: LD_VAR 0 1
40310: PPUSH
40311: LD_VAR 0 2
40315: PPUSH
40316: LD_VAR 0 3
40320: PPUSH
40321: LD_VAR 0 4
40325: PPUSH
40326: LD_VAR 0 5
40330: PPUSH
40331: CALL_OW 448
40335: IFFALSE 40370
// begin result := [ chassis , engine , control , weapon ] ;
40337: LD_ADDR_VAR 0 6
40341: PUSH
40342: LD_VAR 0 2
40346: PUSH
40347: LD_VAR 0 3
40351: PUSH
40352: LD_VAR 0 4
40356: PUSH
40357: LD_VAR 0 5
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: ST_TO_ADDR
// exit ;
40368: GO 40782
// end ; _chassis := AvailableChassisList ( factory ) ;
40370: LD_ADDR_VAR 0 9
40374: PUSH
40375: LD_VAR 0 1
40379: PPUSH
40380: CALL_OW 475
40384: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40385: LD_ADDR_VAR 0 11
40389: PUSH
40390: LD_VAR 0 1
40394: PPUSH
40395: CALL_OW 476
40399: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40400: LD_ADDR_VAR 0 12
40404: PUSH
40405: LD_VAR 0 1
40409: PPUSH
40410: CALL_OW 477
40414: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40415: LD_ADDR_VAR 0 10
40419: PUSH
40420: LD_VAR 0 1
40424: PPUSH
40425: CALL_OW 478
40429: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40430: LD_VAR 0 9
40434: NOT
40435: PUSH
40436: LD_VAR 0 11
40440: NOT
40441: OR
40442: PUSH
40443: LD_VAR 0 12
40447: NOT
40448: OR
40449: PUSH
40450: LD_VAR 0 10
40454: NOT
40455: OR
40456: IFFALSE 40491
// begin result := [ chassis , engine , control , weapon ] ;
40458: LD_ADDR_VAR 0 6
40462: PUSH
40463: LD_VAR 0 2
40467: PUSH
40468: LD_VAR 0 3
40472: PUSH
40473: LD_VAR 0 4
40477: PUSH
40478: LD_VAR 0 5
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: ST_TO_ADDR
// exit ;
40489: GO 40782
// end ; if not chassis in _chassis then
40491: LD_VAR 0 2
40495: PUSH
40496: LD_VAR 0 9
40500: IN
40501: NOT
40502: IFFALSE 40528
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40504: LD_ADDR_VAR 0 2
40508: PUSH
40509: LD_VAR 0 9
40513: PUSH
40514: LD_INT 1
40516: PPUSH
40517: LD_VAR 0 9
40521: PPUSH
40522: CALL_OW 12
40526: ARRAY
40527: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40528: LD_VAR 0 2
40532: PPUSH
40533: LD_VAR 0 3
40537: PPUSH
40538: CALL 40787 0 2
40542: NOT
40543: IFFALSE 40602
// repeat engine := _engine [ 1 ] ;
40545: LD_ADDR_VAR 0 3
40549: PUSH
40550: LD_VAR 0 11
40554: PUSH
40555: LD_INT 1
40557: ARRAY
40558: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40559: LD_ADDR_VAR 0 11
40563: PUSH
40564: LD_VAR 0 11
40568: PPUSH
40569: LD_INT 1
40571: PPUSH
40572: CALL_OW 3
40576: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40577: LD_VAR 0 2
40581: PPUSH
40582: LD_VAR 0 3
40586: PPUSH
40587: CALL 40787 0 2
40591: PUSH
40592: LD_VAR 0 11
40596: PUSH
40597: EMPTY
40598: EQUAL
40599: OR
40600: IFFALSE 40545
// if not control in _control then
40602: LD_VAR 0 4
40606: PUSH
40607: LD_VAR 0 12
40611: IN
40612: NOT
40613: IFFALSE 40639
// control := _control [ rand ( 1 , _control ) ] ;
40615: LD_ADDR_VAR 0 4
40619: PUSH
40620: LD_VAR 0 12
40624: PUSH
40625: LD_INT 1
40627: PPUSH
40628: LD_VAR 0 12
40632: PPUSH
40633: CALL_OW 12
40637: ARRAY
40638: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40639: LD_VAR 0 2
40643: PPUSH
40644: LD_VAR 0 5
40648: PPUSH
40649: CALL 41007 0 2
40653: NOT
40654: IFFALSE 40713
// repeat weapon := _weapon [ 1 ] ;
40656: LD_ADDR_VAR 0 5
40660: PUSH
40661: LD_VAR 0 10
40665: PUSH
40666: LD_INT 1
40668: ARRAY
40669: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40670: LD_ADDR_VAR 0 10
40674: PUSH
40675: LD_VAR 0 10
40679: PPUSH
40680: LD_INT 1
40682: PPUSH
40683: CALL_OW 3
40687: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40688: LD_VAR 0 2
40692: PPUSH
40693: LD_VAR 0 5
40697: PPUSH
40698: CALL 41007 0 2
40702: PUSH
40703: LD_VAR 0 10
40707: PUSH
40708: EMPTY
40709: EQUAL
40710: OR
40711: IFFALSE 40656
// result := [ ] ;
40713: LD_ADDR_VAR 0 6
40717: PUSH
40718: EMPTY
40719: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40720: LD_VAR 0 1
40724: PPUSH
40725: LD_VAR 0 2
40729: PPUSH
40730: LD_VAR 0 3
40734: PPUSH
40735: LD_VAR 0 4
40739: PPUSH
40740: LD_VAR 0 5
40744: PPUSH
40745: CALL_OW 448
40749: IFFALSE 40782
// result := [ chassis , engine , control , weapon ] ;
40751: LD_ADDR_VAR 0 6
40755: PUSH
40756: LD_VAR 0 2
40760: PUSH
40761: LD_VAR 0 3
40765: PUSH
40766: LD_VAR 0 4
40770: PUSH
40771: LD_VAR 0 5
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: ST_TO_ADDR
// end ;
40782: LD_VAR 0 6
40786: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40787: LD_INT 0
40789: PPUSH
// if not chassis or not engine then
40790: LD_VAR 0 1
40794: NOT
40795: PUSH
40796: LD_VAR 0 2
40800: NOT
40801: OR
40802: IFFALSE 40806
// exit ;
40804: GO 41002
// case engine of engine_solar :
40806: LD_VAR 0 2
40810: PUSH
40811: LD_INT 2
40813: DOUBLE
40814: EQUAL
40815: IFTRUE 40819
40817: GO 40857
40819: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40820: LD_ADDR_VAR 0 3
40824: PUSH
40825: LD_INT 11
40827: PUSH
40828: LD_INT 12
40830: PUSH
40831: LD_INT 13
40833: PUSH
40834: LD_INT 14
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: LD_INT 3
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: ST_TO_ADDR
40855: GO 40986
40857: LD_INT 1
40859: DOUBLE
40860: EQUAL
40861: IFTRUE 40865
40863: GO 40927
40865: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40866: LD_ADDR_VAR 0 3
40870: PUSH
40871: LD_INT 11
40873: PUSH
40874: LD_INT 12
40876: PUSH
40877: LD_INT 13
40879: PUSH
40880: LD_INT 14
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: LD_INT 2
40888: PUSH
40889: LD_INT 3
40891: PUSH
40892: LD_INT 4
40894: PUSH
40895: LD_INT 5
40897: PUSH
40898: LD_INT 21
40900: PUSH
40901: LD_INT 23
40903: PUSH
40904: LD_INT 22
40906: PUSH
40907: LD_INT 24
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: ST_TO_ADDR
40925: GO 40986
40927: LD_INT 3
40929: DOUBLE
40930: EQUAL
40931: IFTRUE 40935
40933: GO 40985
40935: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40936: LD_ADDR_VAR 0 3
40940: PUSH
40941: LD_INT 13
40943: PUSH
40944: LD_INT 14
40946: PUSH
40947: LD_INT 2
40949: PUSH
40950: LD_INT 3
40952: PUSH
40953: LD_INT 4
40955: PUSH
40956: LD_INT 5
40958: PUSH
40959: LD_INT 21
40961: PUSH
40962: LD_INT 22
40964: PUSH
40965: LD_INT 23
40967: PUSH
40968: LD_INT 24
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: ST_TO_ADDR
40983: GO 40986
40985: POP
// result := ( chassis in result ) ;
40986: LD_ADDR_VAR 0 3
40990: PUSH
40991: LD_VAR 0 1
40995: PUSH
40996: LD_VAR 0 3
41000: IN
41001: ST_TO_ADDR
// end ;
41002: LD_VAR 0 3
41006: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41007: LD_INT 0
41009: PPUSH
// if not chassis or not weapon then
41010: LD_VAR 0 1
41014: NOT
41015: PUSH
41016: LD_VAR 0 2
41020: NOT
41021: OR
41022: IFFALSE 41026
// exit ;
41024: GO 42088
// case weapon of us_machine_gun :
41026: LD_VAR 0 2
41030: PUSH
41031: LD_INT 2
41033: DOUBLE
41034: EQUAL
41035: IFTRUE 41039
41037: GO 41069
41039: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41040: LD_ADDR_VAR 0 3
41044: PUSH
41045: LD_INT 1
41047: PUSH
41048: LD_INT 2
41050: PUSH
41051: LD_INT 3
41053: PUSH
41054: LD_INT 4
41056: PUSH
41057: LD_INT 5
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: ST_TO_ADDR
41067: GO 42072
41069: LD_INT 3
41071: DOUBLE
41072: EQUAL
41073: IFTRUE 41077
41075: GO 41107
41077: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41078: LD_ADDR_VAR 0 3
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: LD_INT 2
41088: PUSH
41089: LD_INT 3
41091: PUSH
41092: LD_INT 4
41094: PUSH
41095: LD_INT 5
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: ST_TO_ADDR
41105: GO 42072
41107: LD_INT 11
41109: DOUBLE
41110: EQUAL
41111: IFTRUE 41115
41113: GO 41145
41115: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41116: LD_ADDR_VAR 0 3
41120: PUSH
41121: LD_INT 1
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: LD_INT 3
41129: PUSH
41130: LD_INT 4
41132: PUSH
41133: LD_INT 5
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: ST_TO_ADDR
41143: GO 42072
41145: LD_INT 4
41147: DOUBLE
41148: EQUAL
41149: IFTRUE 41153
41151: GO 41179
41153: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41154: LD_ADDR_VAR 0 3
41158: PUSH
41159: LD_INT 2
41161: PUSH
41162: LD_INT 3
41164: PUSH
41165: LD_INT 4
41167: PUSH
41168: LD_INT 5
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: ST_TO_ADDR
41177: GO 42072
41179: LD_INT 5
41181: DOUBLE
41182: EQUAL
41183: IFTRUE 41187
41185: GO 41213
41187: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41188: LD_ADDR_VAR 0 3
41192: PUSH
41193: LD_INT 2
41195: PUSH
41196: LD_INT 3
41198: PUSH
41199: LD_INT 4
41201: PUSH
41202: LD_INT 5
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: ST_TO_ADDR
41211: GO 42072
41213: LD_INT 9
41215: DOUBLE
41216: EQUAL
41217: IFTRUE 41221
41219: GO 41247
41221: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41222: LD_ADDR_VAR 0 3
41226: PUSH
41227: LD_INT 2
41229: PUSH
41230: LD_INT 3
41232: PUSH
41233: LD_INT 4
41235: PUSH
41236: LD_INT 5
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: ST_TO_ADDR
41245: GO 42072
41247: LD_INT 7
41249: DOUBLE
41250: EQUAL
41251: IFTRUE 41255
41253: GO 41281
41255: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41256: LD_ADDR_VAR 0 3
41260: PUSH
41261: LD_INT 2
41263: PUSH
41264: LD_INT 3
41266: PUSH
41267: LD_INT 4
41269: PUSH
41270: LD_INT 5
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: ST_TO_ADDR
41279: GO 42072
41281: LD_INT 12
41283: DOUBLE
41284: EQUAL
41285: IFTRUE 41289
41287: GO 41315
41289: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41290: LD_ADDR_VAR 0 3
41294: PUSH
41295: LD_INT 2
41297: PUSH
41298: LD_INT 3
41300: PUSH
41301: LD_INT 4
41303: PUSH
41304: LD_INT 5
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: ST_TO_ADDR
41313: GO 42072
41315: LD_INT 13
41317: DOUBLE
41318: EQUAL
41319: IFTRUE 41323
41321: GO 41349
41323: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41324: LD_ADDR_VAR 0 3
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: LD_INT 3
41334: PUSH
41335: LD_INT 4
41337: PUSH
41338: LD_INT 5
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: ST_TO_ADDR
41347: GO 42072
41349: LD_INT 14
41351: DOUBLE
41352: EQUAL
41353: IFTRUE 41357
41355: GO 41375
41357: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41358: LD_ADDR_VAR 0 3
41362: PUSH
41363: LD_INT 4
41365: PUSH
41366: LD_INT 5
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: ST_TO_ADDR
41373: GO 42072
41375: LD_INT 6
41377: DOUBLE
41378: EQUAL
41379: IFTRUE 41383
41381: GO 41401
41383: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41384: LD_ADDR_VAR 0 3
41388: PUSH
41389: LD_INT 4
41391: PUSH
41392: LD_INT 5
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: ST_TO_ADDR
41399: GO 42072
41401: LD_INT 10
41403: DOUBLE
41404: EQUAL
41405: IFTRUE 41409
41407: GO 41427
41409: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41410: LD_ADDR_VAR 0 3
41414: PUSH
41415: LD_INT 4
41417: PUSH
41418: LD_INT 5
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: ST_TO_ADDR
41425: GO 42072
41427: LD_INT 22
41429: DOUBLE
41430: EQUAL
41431: IFTRUE 41435
41433: GO 41461
41435: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41436: LD_ADDR_VAR 0 3
41440: PUSH
41441: LD_INT 11
41443: PUSH
41444: LD_INT 12
41446: PUSH
41447: LD_INT 13
41449: PUSH
41450: LD_INT 14
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: ST_TO_ADDR
41459: GO 42072
41461: LD_INT 23
41463: DOUBLE
41464: EQUAL
41465: IFTRUE 41469
41467: GO 41495
41469: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41470: LD_ADDR_VAR 0 3
41474: PUSH
41475: LD_INT 11
41477: PUSH
41478: LD_INT 12
41480: PUSH
41481: LD_INT 13
41483: PUSH
41484: LD_INT 14
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: ST_TO_ADDR
41493: GO 42072
41495: LD_INT 24
41497: DOUBLE
41498: EQUAL
41499: IFTRUE 41503
41501: GO 41529
41503: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41504: LD_ADDR_VAR 0 3
41508: PUSH
41509: LD_INT 11
41511: PUSH
41512: LD_INT 12
41514: PUSH
41515: LD_INT 13
41517: PUSH
41518: LD_INT 14
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: ST_TO_ADDR
41527: GO 42072
41529: LD_INT 30
41531: DOUBLE
41532: EQUAL
41533: IFTRUE 41537
41535: GO 41563
41537: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41538: LD_ADDR_VAR 0 3
41542: PUSH
41543: LD_INT 11
41545: PUSH
41546: LD_INT 12
41548: PUSH
41549: LD_INT 13
41551: PUSH
41552: LD_INT 14
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: ST_TO_ADDR
41561: GO 42072
41563: LD_INT 25
41565: DOUBLE
41566: EQUAL
41567: IFTRUE 41571
41569: GO 41589
41571: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41572: LD_ADDR_VAR 0 3
41576: PUSH
41577: LD_INT 13
41579: PUSH
41580: LD_INT 14
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: ST_TO_ADDR
41587: GO 42072
41589: LD_INT 27
41591: DOUBLE
41592: EQUAL
41593: IFTRUE 41597
41595: GO 41615
41597: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41598: LD_ADDR_VAR 0 3
41602: PUSH
41603: LD_INT 13
41605: PUSH
41606: LD_INT 14
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: ST_TO_ADDR
41613: GO 42072
41615: LD_EXP 37
41619: DOUBLE
41620: EQUAL
41621: IFTRUE 41625
41623: GO 41651
41625: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41626: LD_ADDR_VAR 0 3
41630: PUSH
41631: LD_INT 11
41633: PUSH
41634: LD_INT 12
41636: PUSH
41637: LD_INT 13
41639: PUSH
41640: LD_INT 14
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: ST_TO_ADDR
41649: GO 42072
41651: LD_INT 28
41653: DOUBLE
41654: EQUAL
41655: IFTRUE 41659
41657: GO 41677
41659: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41660: LD_ADDR_VAR 0 3
41664: PUSH
41665: LD_INT 13
41667: PUSH
41668: LD_INT 14
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: ST_TO_ADDR
41675: GO 42072
41677: LD_INT 29
41679: DOUBLE
41680: EQUAL
41681: IFTRUE 41685
41683: GO 41703
41685: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41686: LD_ADDR_VAR 0 3
41690: PUSH
41691: LD_INT 13
41693: PUSH
41694: LD_INT 14
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: ST_TO_ADDR
41701: GO 42072
41703: LD_INT 31
41705: DOUBLE
41706: EQUAL
41707: IFTRUE 41711
41709: GO 41729
41711: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41712: LD_ADDR_VAR 0 3
41716: PUSH
41717: LD_INT 13
41719: PUSH
41720: LD_INT 14
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: ST_TO_ADDR
41727: GO 42072
41729: LD_INT 26
41731: DOUBLE
41732: EQUAL
41733: IFTRUE 41737
41735: GO 41755
41737: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41738: LD_ADDR_VAR 0 3
41742: PUSH
41743: LD_INT 13
41745: PUSH
41746: LD_INT 14
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: ST_TO_ADDR
41753: GO 42072
41755: LD_INT 42
41757: DOUBLE
41758: EQUAL
41759: IFTRUE 41763
41761: GO 41789
41763: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41764: LD_ADDR_VAR 0 3
41768: PUSH
41769: LD_INT 21
41771: PUSH
41772: LD_INT 22
41774: PUSH
41775: LD_INT 23
41777: PUSH
41778: LD_INT 24
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: ST_TO_ADDR
41787: GO 42072
41789: LD_INT 43
41791: DOUBLE
41792: EQUAL
41793: IFTRUE 41797
41795: GO 41823
41797: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41798: LD_ADDR_VAR 0 3
41802: PUSH
41803: LD_INT 21
41805: PUSH
41806: LD_INT 22
41808: PUSH
41809: LD_INT 23
41811: PUSH
41812: LD_INT 24
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: ST_TO_ADDR
41821: GO 42072
41823: LD_INT 44
41825: DOUBLE
41826: EQUAL
41827: IFTRUE 41831
41829: GO 41857
41831: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41832: LD_ADDR_VAR 0 3
41836: PUSH
41837: LD_INT 21
41839: PUSH
41840: LD_INT 22
41842: PUSH
41843: LD_INT 23
41845: PUSH
41846: LD_INT 24
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: ST_TO_ADDR
41855: GO 42072
41857: LD_INT 45
41859: DOUBLE
41860: EQUAL
41861: IFTRUE 41865
41863: GO 41891
41865: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41866: LD_ADDR_VAR 0 3
41870: PUSH
41871: LD_INT 21
41873: PUSH
41874: LD_INT 22
41876: PUSH
41877: LD_INT 23
41879: PUSH
41880: LD_INT 24
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: ST_TO_ADDR
41889: GO 42072
41891: LD_INT 49
41893: DOUBLE
41894: EQUAL
41895: IFTRUE 41899
41897: GO 41925
41899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41900: LD_ADDR_VAR 0 3
41904: PUSH
41905: LD_INT 21
41907: PUSH
41908: LD_INT 22
41910: PUSH
41911: LD_INT 23
41913: PUSH
41914: LD_INT 24
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: ST_TO_ADDR
41923: GO 42072
41925: LD_INT 51
41927: DOUBLE
41928: EQUAL
41929: IFTRUE 41933
41931: GO 41959
41933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41934: LD_ADDR_VAR 0 3
41938: PUSH
41939: LD_INT 21
41941: PUSH
41942: LD_INT 22
41944: PUSH
41945: LD_INT 23
41947: PUSH
41948: LD_INT 24
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: ST_TO_ADDR
41957: GO 42072
41959: LD_INT 52
41961: DOUBLE
41962: EQUAL
41963: IFTRUE 41967
41965: GO 41993
41967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41968: LD_ADDR_VAR 0 3
41972: PUSH
41973: LD_INT 21
41975: PUSH
41976: LD_INT 22
41978: PUSH
41979: LD_INT 23
41981: PUSH
41982: LD_INT 24
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: ST_TO_ADDR
41991: GO 42072
41993: LD_INT 53
41995: DOUBLE
41996: EQUAL
41997: IFTRUE 42001
41999: GO 42019
42001: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42002: LD_ADDR_VAR 0 3
42006: PUSH
42007: LD_INT 23
42009: PUSH
42010: LD_INT 24
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: ST_TO_ADDR
42017: GO 42072
42019: LD_INT 46
42021: DOUBLE
42022: EQUAL
42023: IFTRUE 42027
42025: GO 42045
42027: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42028: LD_ADDR_VAR 0 3
42032: PUSH
42033: LD_INT 23
42035: PUSH
42036: LD_INT 24
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: ST_TO_ADDR
42043: GO 42072
42045: LD_INT 47
42047: DOUBLE
42048: EQUAL
42049: IFTRUE 42053
42051: GO 42071
42053: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42054: LD_ADDR_VAR 0 3
42058: PUSH
42059: LD_INT 23
42061: PUSH
42062: LD_INT 24
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: ST_TO_ADDR
42069: GO 42072
42071: POP
// result := ( chassis in result ) ;
42072: LD_ADDR_VAR 0 3
42076: PUSH
42077: LD_VAR 0 1
42081: PUSH
42082: LD_VAR 0 3
42086: IN
42087: ST_TO_ADDR
// end ;
42088: LD_VAR 0 3
42092: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42093: LD_INT 0
42095: PPUSH
42096: PPUSH
42097: PPUSH
42098: PPUSH
42099: PPUSH
42100: PPUSH
42101: PPUSH
// result := array ;
42102: LD_ADDR_VAR 0 5
42106: PUSH
42107: LD_VAR 0 1
42111: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42112: LD_VAR 0 1
42116: NOT
42117: PUSH
42118: LD_VAR 0 2
42122: NOT
42123: OR
42124: PUSH
42125: LD_VAR 0 3
42129: NOT
42130: OR
42131: PUSH
42132: LD_VAR 0 2
42136: PUSH
42137: LD_VAR 0 1
42141: GREATER
42142: OR
42143: PUSH
42144: LD_VAR 0 3
42148: PUSH
42149: LD_VAR 0 1
42153: GREATER
42154: OR
42155: IFFALSE 42159
// exit ;
42157: GO 42455
// if direction then
42159: LD_VAR 0 4
42163: IFFALSE 42227
// begin d := 1 ;
42165: LD_ADDR_VAR 0 9
42169: PUSH
42170: LD_INT 1
42172: ST_TO_ADDR
// if i_from > i_to then
42173: LD_VAR 0 2
42177: PUSH
42178: LD_VAR 0 3
42182: GREATER
42183: IFFALSE 42209
// length := ( array - i_from ) + i_to else
42185: LD_ADDR_VAR 0 11
42189: PUSH
42190: LD_VAR 0 1
42194: PUSH
42195: LD_VAR 0 2
42199: MINUS
42200: PUSH
42201: LD_VAR 0 3
42205: PLUS
42206: ST_TO_ADDR
42207: GO 42225
// length := i_to - i_from ;
42209: LD_ADDR_VAR 0 11
42213: PUSH
42214: LD_VAR 0 3
42218: PUSH
42219: LD_VAR 0 2
42223: MINUS
42224: ST_TO_ADDR
// end else
42225: GO 42288
// begin d := - 1 ;
42227: LD_ADDR_VAR 0 9
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: ST_TO_ADDR
// if i_from > i_to then
42236: LD_VAR 0 2
42240: PUSH
42241: LD_VAR 0 3
42245: GREATER
42246: IFFALSE 42266
// length := i_from - i_to else
42248: LD_ADDR_VAR 0 11
42252: PUSH
42253: LD_VAR 0 2
42257: PUSH
42258: LD_VAR 0 3
42262: MINUS
42263: ST_TO_ADDR
42264: GO 42288
// length := ( array - i_to ) + i_from ;
42266: LD_ADDR_VAR 0 11
42270: PUSH
42271: LD_VAR 0 1
42275: PUSH
42276: LD_VAR 0 3
42280: MINUS
42281: PUSH
42282: LD_VAR 0 2
42286: PLUS
42287: ST_TO_ADDR
// end ; if not length then
42288: LD_VAR 0 11
42292: NOT
42293: IFFALSE 42297
// exit ;
42295: GO 42455
// tmp := array ;
42297: LD_ADDR_VAR 0 10
42301: PUSH
42302: LD_VAR 0 1
42306: ST_TO_ADDR
// for i = 1 to length do
42307: LD_ADDR_VAR 0 6
42311: PUSH
42312: DOUBLE
42313: LD_INT 1
42315: DEC
42316: ST_TO_ADDR
42317: LD_VAR 0 11
42321: PUSH
42322: FOR_TO
42323: IFFALSE 42443
// begin for j = 1 to array do
42325: LD_ADDR_VAR 0 7
42329: PUSH
42330: DOUBLE
42331: LD_INT 1
42333: DEC
42334: ST_TO_ADDR
42335: LD_VAR 0 1
42339: PUSH
42340: FOR_TO
42341: IFFALSE 42429
// begin k := j + d ;
42343: LD_ADDR_VAR 0 8
42347: PUSH
42348: LD_VAR 0 7
42352: PUSH
42353: LD_VAR 0 9
42357: PLUS
42358: ST_TO_ADDR
// if k > array then
42359: LD_VAR 0 8
42363: PUSH
42364: LD_VAR 0 1
42368: GREATER
42369: IFFALSE 42379
// k := 1 ;
42371: LD_ADDR_VAR 0 8
42375: PUSH
42376: LD_INT 1
42378: ST_TO_ADDR
// if not k then
42379: LD_VAR 0 8
42383: NOT
42384: IFFALSE 42396
// k := array ;
42386: LD_ADDR_VAR 0 8
42390: PUSH
42391: LD_VAR 0 1
42395: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42396: LD_ADDR_VAR 0 10
42400: PUSH
42401: LD_VAR 0 10
42405: PPUSH
42406: LD_VAR 0 8
42410: PPUSH
42411: LD_VAR 0 1
42415: PUSH
42416: LD_VAR 0 7
42420: ARRAY
42421: PPUSH
42422: CALL_OW 1
42426: ST_TO_ADDR
// end ;
42427: GO 42340
42429: POP
42430: POP
// array := tmp ;
42431: LD_ADDR_VAR 0 1
42435: PUSH
42436: LD_VAR 0 10
42440: ST_TO_ADDR
// end ;
42441: GO 42322
42443: POP
42444: POP
// result := array ;
42445: LD_ADDR_VAR 0 5
42449: PUSH
42450: LD_VAR 0 1
42454: ST_TO_ADDR
// end ;
42455: LD_VAR 0 5
42459: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42460: LD_INT 0
42462: PPUSH
42463: PPUSH
// result := 0 ;
42464: LD_ADDR_VAR 0 3
42468: PUSH
42469: LD_INT 0
42471: ST_TO_ADDR
// if not array or not value in array then
42472: LD_VAR 0 1
42476: NOT
42477: PUSH
42478: LD_VAR 0 2
42482: PUSH
42483: LD_VAR 0 1
42487: IN
42488: NOT
42489: OR
42490: IFFALSE 42494
// exit ;
42492: GO 42548
// for i = 1 to array do
42494: LD_ADDR_VAR 0 4
42498: PUSH
42499: DOUBLE
42500: LD_INT 1
42502: DEC
42503: ST_TO_ADDR
42504: LD_VAR 0 1
42508: PUSH
42509: FOR_TO
42510: IFFALSE 42546
// if value = array [ i ] then
42512: LD_VAR 0 2
42516: PUSH
42517: LD_VAR 0 1
42521: PUSH
42522: LD_VAR 0 4
42526: ARRAY
42527: EQUAL
42528: IFFALSE 42544
// begin result := i ;
42530: LD_ADDR_VAR 0 3
42534: PUSH
42535: LD_VAR 0 4
42539: ST_TO_ADDR
// exit ;
42540: POP
42541: POP
42542: GO 42548
// end ;
42544: GO 42509
42546: POP
42547: POP
// end ;
42548: LD_VAR 0 3
42552: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42553: LD_INT 0
42555: PPUSH
// vc_chassis := chassis ;
42556: LD_ADDR_OWVAR 37
42560: PUSH
42561: LD_VAR 0 1
42565: ST_TO_ADDR
// vc_engine := engine ;
42566: LD_ADDR_OWVAR 39
42570: PUSH
42571: LD_VAR 0 2
42575: ST_TO_ADDR
// vc_control := control ;
42576: LD_ADDR_OWVAR 38
42580: PUSH
42581: LD_VAR 0 3
42585: ST_TO_ADDR
// vc_weapon := weapon ;
42586: LD_ADDR_OWVAR 40
42590: PUSH
42591: LD_VAR 0 4
42595: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42596: LD_ADDR_OWVAR 41
42600: PUSH
42601: LD_VAR 0 5
42605: ST_TO_ADDR
// end ;
42606: LD_VAR 0 6
42610: RET
// export function WantPlant ( unit ) ; var task ; begin
42611: LD_INT 0
42613: PPUSH
42614: PPUSH
// result := false ;
42615: LD_ADDR_VAR 0 2
42619: PUSH
42620: LD_INT 0
42622: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42623: LD_ADDR_VAR 0 3
42627: PUSH
42628: LD_VAR 0 1
42632: PPUSH
42633: CALL_OW 437
42637: ST_TO_ADDR
// if task then
42638: LD_VAR 0 3
42642: IFFALSE 42670
// if task [ 1 ] [ 1 ] = p then
42644: LD_VAR 0 3
42648: PUSH
42649: LD_INT 1
42651: ARRAY
42652: PUSH
42653: LD_INT 1
42655: ARRAY
42656: PUSH
42657: LD_STRING p
42659: EQUAL
42660: IFFALSE 42670
// result := true ;
42662: LD_ADDR_VAR 0 2
42666: PUSH
42667: LD_INT 1
42669: ST_TO_ADDR
// end ;
42670: LD_VAR 0 2
42674: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42675: LD_INT 0
42677: PPUSH
42678: PPUSH
42679: PPUSH
42680: PPUSH
// if pos < 1 then
42681: LD_VAR 0 2
42685: PUSH
42686: LD_INT 1
42688: LESS
42689: IFFALSE 42693
// exit ;
42691: GO 42996
// if pos = 1 then
42693: LD_VAR 0 2
42697: PUSH
42698: LD_INT 1
42700: EQUAL
42701: IFFALSE 42734
// result := Replace ( arr , pos [ 1 ] , value ) else
42703: LD_ADDR_VAR 0 4
42707: PUSH
42708: LD_VAR 0 1
42712: PPUSH
42713: LD_VAR 0 2
42717: PUSH
42718: LD_INT 1
42720: ARRAY
42721: PPUSH
42722: LD_VAR 0 3
42726: PPUSH
42727: CALL_OW 1
42731: ST_TO_ADDR
42732: GO 42996
// begin tmp := arr ;
42734: LD_ADDR_VAR 0 6
42738: PUSH
42739: LD_VAR 0 1
42743: ST_TO_ADDR
// s_arr := [ tmp ] ;
42744: LD_ADDR_VAR 0 7
42748: PUSH
42749: LD_VAR 0 6
42753: PUSH
42754: EMPTY
42755: LIST
42756: ST_TO_ADDR
// for i = 1 to pos - 1 do
42757: LD_ADDR_VAR 0 5
42761: PUSH
42762: DOUBLE
42763: LD_INT 1
42765: DEC
42766: ST_TO_ADDR
42767: LD_VAR 0 2
42771: PUSH
42772: LD_INT 1
42774: MINUS
42775: PUSH
42776: FOR_TO
42777: IFFALSE 42822
// begin tmp := tmp [ pos [ i ] ] ;
42779: LD_ADDR_VAR 0 6
42783: PUSH
42784: LD_VAR 0 6
42788: PUSH
42789: LD_VAR 0 2
42793: PUSH
42794: LD_VAR 0 5
42798: ARRAY
42799: ARRAY
42800: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42801: LD_ADDR_VAR 0 7
42805: PUSH
42806: LD_VAR 0 7
42810: PUSH
42811: LD_VAR 0 6
42815: PUSH
42816: EMPTY
42817: LIST
42818: ADD
42819: ST_TO_ADDR
// end ;
42820: GO 42776
42822: POP
42823: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42824: LD_ADDR_VAR 0 6
42828: PUSH
42829: LD_VAR 0 6
42833: PPUSH
42834: LD_VAR 0 2
42838: PUSH
42839: LD_VAR 0 2
42843: ARRAY
42844: PPUSH
42845: LD_VAR 0 3
42849: PPUSH
42850: CALL_OW 1
42854: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42855: LD_ADDR_VAR 0 7
42859: PUSH
42860: LD_VAR 0 7
42864: PPUSH
42865: LD_VAR 0 7
42869: PPUSH
42870: LD_VAR 0 6
42874: PPUSH
42875: CALL_OW 1
42879: ST_TO_ADDR
// for i = s_arr downto 2 do
42880: LD_ADDR_VAR 0 5
42884: PUSH
42885: DOUBLE
42886: LD_VAR 0 7
42890: INC
42891: ST_TO_ADDR
42892: LD_INT 2
42894: PUSH
42895: FOR_DOWNTO
42896: IFFALSE 42980
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42898: LD_ADDR_VAR 0 6
42902: PUSH
42903: LD_VAR 0 7
42907: PUSH
42908: LD_VAR 0 5
42912: PUSH
42913: LD_INT 1
42915: MINUS
42916: ARRAY
42917: PPUSH
42918: LD_VAR 0 2
42922: PUSH
42923: LD_VAR 0 5
42927: PUSH
42928: LD_INT 1
42930: MINUS
42931: ARRAY
42932: PPUSH
42933: LD_VAR 0 7
42937: PUSH
42938: LD_VAR 0 5
42942: ARRAY
42943: PPUSH
42944: CALL_OW 1
42948: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42949: LD_ADDR_VAR 0 7
42953: PUSH
42954: LD_VAR 0 7
42958: PPUSH
42959: LD_VAR 0 5
42963: PUSH
42964: LD_INT 1
42966: MINUS
42967: PPUSH
42968: LD_VAR 0 6
42972: PPUSH
42973: CALL_OW 1
42977: ST_TO_ADDR
// end ;
42978: GO 42895
42980: POP
42981: POP
// result := s_arr [ 1 ] ;
42982: LD_ADDR_VAR 0 4
42986: PUSH
42987: LD_VAR 0 7
42991: PUSH
42992: LD_INT 1
42994: ARRAY
42995: ST_TO_ADDR
// end ; end ;
42996: LD_VAR 0 4
43000: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43001: LD_INT 0
43003: PPUSH
43004: PPUSH
// if not list then
43005: LD_VAR 0 1
43009: NOT
43010: IFFALSE 43014
// exit ;
43012: GO 43105
// i := list [ pos1 ] ;
43014: LD_ADDR_VAR 0 5
43018: PUSH
43019: LD_VAR 0 1
43023: PUSH
43024: LD_VAR 0 2
43028: ARRAY
43029: ST_TO_ADDR
// if not i then
43030: LD_VAR 0 5
43034: NOT
43035: IFFALSE 43039
// exit ;
43037: GO 43105
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43039: LD_ADDR_VAR 0 1
43043: PUSH
43044: LD_VAR 0 1
43048: PPUSH
43049: LD_VAR 0 2
43053: PPUSH
43054: LD_VAR 0 1
43058: PUSH
43059: LD_VAR 0 3
43063: ARRAY
43064: PPUSH
43065: CALL_OW 1
43069: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43070: LD_ADDR_VAR 0 1
43074: PUSH
43075: LD_VAR 0 1
43079: PPUSH
43080: LD_VAR 0 3
43084: PPUSH
43085: LD_VAR 0 5
43089: PPUSH
43090: CALL_OW 1
43094: ST_TO_ADDR
// result := list ;
43095: LD_ADDR_VAR 0 4
43099: PUSH
43100: LD_VAR 0 1
43104: ST_TO_ADDR
// end ;
43105: LD_VAR 0 4
43109: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43110: LD_INT 0
43112: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43113: LD_ADDR_VAR 0 5
43117: PUSH
43118: LD_VAR 0 1
43122: PPUSH
43123: CALL_OW 250
43127: PPUSH
43128: LD_VAR 0 1
43132: PPUSH
43133: CALL_OW 251
43137: PPUSH
43138: LD_VAR 0 2
43142: PPUSH
43143: LD_VAR 0 3
43147: PPUSH
43148: LD_VAR 0 4
43152: PPUSH
43153: CALL 43163 0 5
43157: ST_TO_ADDR
// end ;
43158: LD_VAR 0 5
43162: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43163: LD_INT 0
43165: PPUSH
43166: PPUSH
43167: PPUSH
43168: PPUSH
// if not list then
43169: LD_VAR 0 3
43173: NOT
43174: IFFALSE 43178
// exit ;
43176: GO 43566
// result := [ ] ;
43178: LD_ADDR_VAR 0 6
43182: PUSH
43183: EMPTY
43184: ST_TO_ADDR
// for i in list do
43185: LD_ADDR_VAR 0 7
43189: PUSH
43190: LD_VAR 0 3
43194: PUSH
43195: FOR_IN
43196: IFFALSE 43398
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43198: LD_ADDR_VAR 0 9
43202: PUSH
43203: LD_VAR 0 7
43207: PPUSH
43208: LD_VAR 0 1
43212: PPUSH
43213: LD_VAR 0 2
43217: PPUSH
43218: CALL_OW 297
43222: ST_TO_ADDR
// if not result then
43223: LD_VAR 0 6
43227: NOT
43228: IFFALSE 43254
// result := [ [ i , tmp ] ] else
43230: LD_ADDR_VAR 0 6
43234: PUSH
43235: LD_VAR 0 7
43239: PUSH
43240: LD_VAR 0 9
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: EMPTY
43250: LIST
43251: ST_TO_ADDR
43252: GO 43396
// begin if result [ result ] [ 2 ] < tmp then
43254: LD_VAR 0 6
43258: PUSH
43259: LD_VAR 0 6
43263: ARRAY
43264: PUSH
43265: LD_INT 2
43267: ARRAY
43268: PUSH
43269: LD_VAR 0 9
43273: LESS
43274: IFFALSE 43316
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43276: LD_ADDR_VAR 0 6
43280: PUSH
43281: LD_VAR 0 6
43285: PPUSH
43286: LD_VAR 0 6
43290: PUSH
43291: LD_INT 1
43293: PLUS
43294: PPUSH
43295: LD_VAR 0 7
43299: PUSH
43300: LD_VAR 0 9
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PPUSH
43309: CALL_OW 2
43313: ST_TO_ADDR
43314: GO 43396
// for j = 1 to result do
43316: LD_ADDR_VAR 0 8
43320: PUSH
43321: DOUBLE
43322: LD_INT 1
43324: DEC
43325: ST_TO_ADDR
43326: LD_VAR 0 6
43330: PUSH
43331: FOR_TO
43332: IFFALSE 43394
// begin if tmp < result [ j ] [ 2 ] then
43334: LD_VAR 0 9
43338: PUSH
43339: LD_VAR 0 6
43343: PUSH
43344: LD_VAR 0 8
43348: ARRAY
43349: PUSH
43350: LD_INT 2
43352: ARRAY
43353: LESS
43354: IFFALSE 43392
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43356: LD_ADDR_VAR 0 6
43360: PUSH
43361: LD_VAR 0 6
43365: PPUSH
43366: LD_VAR 0 8
43370: PPUSH
43371: LD_VAR 0 7
43375: PUSH
43376: LD_VAR 0 9
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PPUSH
43385: CALL_OW 2
43389: ST_TO_ADDR
// break ;
43390: GO 43394
// end ; end ;
43392: GO 43331
43394: POP
43395: POP
// end ; end ;
43396: GO 43195
43398: POP
43399: POP
// if result and not asc then
43400: LD_VAR 0 6
43404: PUSH
43405: LD_VAR 0 4
43409: NOT
43410: AND
43411: IFFALSE 43486
// begin tmp := result ;
43413: LD_ADDR_VAR 0 9
43417: PUSH
43418: LD_VAR 0 6
43422: ST_TO_ADDR
// for i = tmp downto 1 do
43423: LD_ADDR_VAR 0 7
43427: PUSH
43428: DOUBLE
43429: LD_VAR 0 9
43433: INC
43434: ST_TO_ADDR
43435: LD_INT 1
43437: PUSH
43438: FOR_DOWNTO
43439: IFFALSE 43484
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43441: LD_ADDR_VAR 0 6
43445: PUSH
43446: LD_VAR 0 6
43450: PPUSH
43451: LD_VAR 0 9
43455: PUSH
43456: LD_VAR 0 7
43460: MINUS
43461: PUSH
43462: LD_INT 1
43464: PLUS
43465: PPUSH
43466: LD_VAR 0 9
43470: PUSH
43471: LD_VAR 0 7
43475: ARRAY
43476: PPUSH
43477: CALL_OW 1
43481: ST_TO_ADDR
43482: GO 43438
43484: POP
43485: POP
// end ; tmp := [ ] ;
43486: LD_ADDR_VAR 0 9
43490: PUSH
43491: EMPTY
43492: ST_TO_ADDR
// if mode then
43493: LD_VAR 0 5
43497: IFFALSE 43566
// begin for i = 1 to result do
43499: LD_ADDR_VAR 0 7
43503: PUSH
43504: DOUBLE
43505: LD_INT 1
43507: DEC
43508: ST_TO_ADDR
43509: LD_VAR 0 6
43513: PUSH
43514: FOR_TO
43515: IFFALSE 43554
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43517: LD_ADDR_VAR 0 9
43521: PUSH
43522: LD_VAR 0 9
43526: PPUSH
43527: LD_VAR 0 7
43531: PPUSH
43532: LD_VAR 0 6
43536: PUSH
43537: LD_VAR 0 7
43541: ARRAY
43542: PUSH
43543: LD_INT 1
43545: ARRAY
43546: PPUSH
43547: CALL_OW 1
43551: ST_TO_ADDR
43552: GO 43514
43554: POP
43555: POP
// result := tmp ;
43556: LD_ADDR_VAR 0 6
43560: PUSH
43561: LD_VAR 0 9
43565: ST_TO_ADDR
// end ; end ;
43566: LD_VAR 0 6
43570: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43571: LD_INT 0
43573: PPUSH
43574: PPUSH
43575: PPUSH
43576: PPUSH
43577: PPUSH
43578: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43579: LD_ADDR_VAR 0 5
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: LD_INT 0
43592: PUSH
43593: EMPTY
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: ST_TO_ADDR
// if not x or not y then
43601: LD_VAR 0 2
43605: NOT
43606: PUSH
43607: LD_VAR 0 3
43611: NOT
43612: OR
43613: IFFALSE 43617
// exit ;
43615: GO 45269
// if not range then
43617: LD_VAR 0 4
43621: NOT
43622: IFFALSE 43632
// range := 10 ;
43624: LD_ADDR_VAR 0 4
43628: PUSH
43629: LD_INT 10
43631: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43632: LD_ADDR_VAR 0 8
43636: PUSH
43637: LD_INT 81
43639: PUSH
43640: LD_VAR 0 1
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 92
43651: PUSH
43652: LD_VAR 0 2
43656: PUSH
43657: LD_VAR 0 3
43661: PUSH
43662: LD_VAR 0 4
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 3
43675: PUSH
43676: LD_INT 21
43678: PUSH
43679: LD_INT 3
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: LIST
43694: PPUSH
43695: CALL_OW 69
43699: ST_TO_ADDR
// if not tmp then
43700: LD_VAR 0 8
43704: NOT
43705: IFFALSE 43709
// exit ;
43707: GO 45269
// for i in tmp do
43709: LD_ADDR_VAR 0 6
43713: PUSH
43714: LD_VAR 0 8
43718: PUSH
43719: FOR_IN
43720: IFFALSE 45244
// begin points := [ 0 , 0 , 0 ] ;
43722: LD_ADDR_VAR 0 9
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: LD_INT 0
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: LIST
43740: ST_TO_ADDR
// bpoints := 1 ;
43741: LD_ADDR_VAR 0 10
43745: PUSH
43746: LD_INT 1
43748: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43749: LD_VAR 0 6
43753: PPUSH
43754: CALL_OW 247
43758: PUSH
43759: LD_INT 1
43761: DOUBLE
43762: EQUAL
43763: IFTRUE 43767
43765: GO 44345
43767: POP
// begin if GetClass ( i ) = 1 then
43768: LD_VAR 0 6
43772: PPUSH
43773: CALL_OW 257
43777: PUSH
43778: LD_INT 1
43780: EQUAL
43781: IFFALSE 43802
// points := [ 10 , 5 , 3 ] ;
43783: LD_ADDR_VAR 0 9
43787: PUSH
43788: LD_INT 10
43790: PUSH
43791: LD_INT 5
43793: PUSH
43794: LD_INT 3
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: LIST
43801: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43802: LD_VAR 0 6
43806: PPUSH
43807: CALL_OW 257
43811: PUSH
43812: LD_INT 2
43814: PUSH
43815: LD_INT 3
43817: PUSH
43818: LD_INT 4
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: LIST
43825: IN
43826: IFFALSE 43847
// points := [ 3 , 2 , 1 ] ;
43828: LD_ADDR_VAR 0 9
43832: PUSH
43833: LD_INT 3
43835: PUSH
43836: LD_INT 2
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: LIST
43846: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43847: LD_VAR 0 6
43851: PPUSH
43852: CALL_OW 257
43856: PUSH
43857: LD_INT 5
43859: EQUAL
43860: IFFALSE 43881
// points := [ 130 , 5 , 2 ] ;
43862: LD_ADDR_VAR 0 9
43866: PUSH
43867: LD_INT 130
43869: PUSH
43870: LD_INT 5
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: LIST
43880: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43881: LD_VAR 0 6
43885: PPUSH
43886: CALL_OW 257
43890: PUSH
43891: LD_INT 8
43893: EQUAL
43894: IFFALSE 43915
// points := [ 35 , 35 , 30 ] ;
43896: LD_ADDR_VAR 0 9
43900: PUSH
43901: LD_INT 35
43903: PUSH
43904: LD_INT 35
43906: PUSH
43907: LD_INT 30
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: LIST
43914: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43915: LD_VAR 0 6
43919: PPUSH
43920: CALL_OW 257
43924: PUSH
43925: LD_INT 9
43927: EQUAL
43928: IFFALSE 43949
// points := [ 20 , 55 , 40 ] ;
43930: LD_ADDR_VAR 0 9
43934: PUSH
43935: LD_INT 20
43937: PUSH
43938: LD_INT 55
43940: PUSH
43941: LD_INT 40
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: LIST
43948: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43949: LD_VAR 0 6
43953: PPUSH
43954: CALL_OW 257
43958: PUSH
43959: LD_INT 12
43961: PUSH
43962: LD_INT 16
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: IN
43969: IFFALSE 43990
// points := [ 5 , 3 , 2 ] ;
43971: LD_ADDR_VAR 0 9
43975: PUSH
43976: LD_INT 5
43978: PUSH
43979: LD_INT 3
43981: PUSH
43982: LD_INT 2
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: LIST
43989: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43990: LD_VAR 0 6
43994: PPUSH
43995: CALL_OW 257
43999: PUSH
44000: LD_INT 17
44002: EQUAL
44003: IFFALSE 44024
// points := [ 100 , 50 , 75 ] ;
44005: LD_ADDR_VAR 0 9
44009: PUSH
44010: LD_INT 100
44012: PUSH
44013: LD_INT 50
44015: PUSH
44016: LD_INT 75
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: LIST
44023: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44024: LD_VAR 0 6
44028: PPUSH
44029: CALL_OW 257
44033: PUSH
44034: LD_INT 15
44036: EQUAL
44037: IFFALSE 44058
// points := [ 10 , 5 , 3 ] ;
44039: LD_ADDR_VAR 0 9
44043: PUSH
44044: LD_INT 10
44046: PUSH
44047: LD_INT 5
44049: PUSH
44050: LD_INT 3
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44058: LD_VAR 0 6
44062: PPUSH
44063: CALL_OW 257
44067: PUSH
44068: LD_INT 14
44070: EQUAL
44071: IFFALSE 44092
// points := [ 10 , 0 , 0 ] ;
44073: LD_ADDR_VAR 0 9
44077: PUSH
44078: LD_INT 10
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: LIST
44091: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44092: LD_VAR 0 6
44096: PPUSH
44097: CALL_OW 257
44101: PUSH
44102: LD_INT 11
44104: EQUAL
44105: IFFALSE 44126
// points := [ 30 , 10 , 5 ] ;
44107: LD_ADDR_VAR 0 9
44111: PUSH
44112: LD_INT 30
44114: PUSH
44115: LD_INT 10
44117: PUSH
44118: LD_INT 5
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: LIST
44125: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44126: LD_VAR 0 1
44130: PPUSH
44131: LD_INT 5
44133: PPUSH
44134: CALL_OW 321
44138: PUSH
44139: LD_INT 2
44141: EQUAL
44142: IFFALSE 44159
// bpoints := bpoints * 1.8 ;
44144: LD_ADDR_VAR 0 10
44148: PUSH
44149: LD_VAR 0 10
44153: PUSH
44154: LD_REAL  1.80000000000000E+0000
44157: MUL
44158: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44159: LD_VAR 0 6
44163: PPUSH
44164: CALL_OW 257
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: LD_INT 2
44174: PUSH
44175: LD_INT 3
44177: PUSH
44178: LD_INT 4
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: IN
44187: PUSH
44188: LD_VAR 0 1
44192: PPUSH
44193: LD_INT 51
44195: PPUSH
44196: CALL_OW 321
44200: PUSH
44201: LD_INT 2
44203: EQUAL
44204: AND
44205: IFFALSE 44222
// bpoints := bpoints * 1.2 ;
44207: LD_ADDR_VAR 0 10
44211: PUSH
44212: LD_VAR 0 10
44216: PUSH
44217: LD_REAL  1.20000000000000E+0000
44220: MUL
44221: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44222: LD_VAR 0 6
44226: PPUSH
44227: CALL_OW 257
44231: PUSH
44232: LD_INT 5
44234: PUSH
44235: LD_INT 7
44237: PUSH
44238: LD_INT 9
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: LIST
44245: IN
44246: PUSH
44247: LD_VAR 0 1
44251: PPUSH
44252: LD_INT 52
44254: PPUSH
44255: CALL_OW 321
44259: PUSH
44260: LD_INT 2
44262: EQUAL
44263: AND
44264: IFFALSE 44281
// bpoints := bpoints * 1.5 ;
44266: LD_ADDR_VAR 0 10
44270: PUSH
44271: LD_VAR 0 10
44275: PUSH
44276: LD_REAL  1.50000000000000E+0000
44279: MUL
44280: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44281: LD_VAR 0 1
44285: PPUSH
44286: LD_INT 66
44288: PPUSH
44289: CALL_OW 321
44293: PUSH
44294: LD_INT 2
44296: EQUAL
44297: IFFALSE 44314
// bpoints := bpoints * 1.1 ;
44299: LD_ADDR_VAR 0 10
44303: PUSH
44304: LD_VAR 0 10
44308: PUSH
44309: LD_REAL  1.10000000000000E+0000
44312: MUL
44313: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44314: LD_ADDR_VAR 0 10
44318: PUSH
44319: LD_VAR 0 10
44323: PUSH
44324: LD_VAR 0 6
44328: PPUSH
44329: LD_INT 1
44331: PPUSH
44332: CALL_OW 259
44336: PUSH
44337: LD_REAL  1.15000000000000E+0000
44340: MUL
44341: MUL
44342: ST_TO_ADDR
// end ; unit_vehicle :
44343: GO 45173
44345: LD_INT 2
44347: DOUBLE
44348: EQUAL
44349: IFTRUE 44353
44351: GO 45161
44353: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44354: LD_VAR 0 6
44358: PPUSH
44359: CALL_OW 264
44363: PUSH
44364: LD_INT 2
44366: PUSH
44367: LD_INT 42
44369: PUSH
44370: LD_INT 24
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: LIST
44377: IN
44378: IFFALSE 44399
// points := [ 25 , 5 , 3 ] ;
44380: LD_ADDR_VAR 0 9
44384: PUSH
44385: LD_INT 25
44387: PUSH
44388: LD_INT 5
44390: PUSH
44391: LD_INT 3
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: LIST
44398: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44399: LD_VAR 0 6
44403: PPUSH
44404: CALL_OW 264
44408: PUSH
44409: LD_INT 4
44411: PUSH
44412: LD_INT 43
44414: PUSH
44415: LD_INT 25
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: LIST
44422: IN
44423: IFFALSE 44444
// points := [ 40 , 15 , 5 ] ;
44425: LD_ADDR_VAR 0 9
44429: PUSH
44430: LD_INT 40
44432: PUSH
44433: LD_INT 15
44435: PUSH
44436: LD_INT 5
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: LIST
44443: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44444: LD_VAR 0 6
44448: PPUSH
44449: CALL_OW 264
44453: PUSH
44454: LD_INT 3
44456: PUSH
44457: LD_INT 23
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: IN
44464: IFFALSE 44485
// points := [ 7 , 25 , 8 ] ;
44466: LD_ADDR_VAR 0 9
44470: PUSH
44471: LD_INT 7
44473: PUSH
44474: LD_INT 25
44476: PUSH
44477: LD_INT 8
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: LIST
44484: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44485: LD_VAR 0 6
44489: PPUSH
44490: CALL_OW 264
44494: PUSH
44495: LD_INT 5
44497: PUSH
44498: LD_INT 27
44500: PUSH
44501: LD_INT 44
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: LIST
44508: IN
44509: IFFALSE 44530
// points := [ 14 , 50 , 16 ] ;
44511: LD_ADDR_VAR 0 9
44515: PUSH
44516: LD_INT 14
44518: PUSH
44519: LD_INT 50
44521: PUSH
44522: LD_INT 16
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: LIST
44529: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44530: LD_VAR 0 6
44534: PPUSH
44535: CALL_OW 264
44539: PUSH
44540: LD_INT 6
44542: PUSH
44543: LD_INT 46
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: IN
44550: IFFALSE 44571
// points := [ 32 , 120 , 70 ] ;
44552: LD_ADDR_VAR 0 9
44556: PUSH
44557: LD_INT 32
44559: PUSH
44560: LD_INT 120
44562: PUSH
44563: LD_INT 70
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: LIST
44570: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44571: LD_VAR 0 6
44575: PPUSH
44576: CALL_OW 264
44580: PUSH
44581: LD_INT 7
44583: PUSH
44584: LD_INT 28
44586: PUSH
44587: LD_INT 45
44589: PUSH
44590: LD_EXP 37
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: IN
44601: IFFALSE 44622
// points := [ 35 , 20 , 45 ] ;
44603: LD_ADDR_VAR 0 9
44607: PUSH
44608: LD_INT 35
44610: PUSH
44611: LD_INT 20
44613: PUSH
44614: LD_INT 45
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: LIST
44621: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44622: LD_VAR 0 6
44626: PPUSH
44627: CALL_OW 264
44631: PUSH
44632: LD_INT 47
44634: PUSH
44635: EMPTY
44636: LIST
44637: IN
44638: IFFALSE 44659
// points := [ 67 , 45 , 75 ] ;
44640: LD_ADDR_VAR 0 9
44644: PUSH
44645: LD_INT 67
44647: PUSH
44648: LD_INT 45
44650: PUSH
44651: LD_INT 75
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: LIST
44658: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44659: LD_VAR 0 6
44663: PPUSH
44664: CALL_OW 264
44668: PUSH
44669: LD_INT 26
44671: PUSH
44672: EMPTY
44673: LIST
44674: IN
44675: IFFALSE 44696
// points := [ 120 , 30 , 80 ] ;
44677: LD_ADDR_VAR 0 9
44681: PUSH
44682: LD_INT 120
44684: PUSH
44685: LD_INT 30
44687: PUSH
44688: LD_INT 80
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: LIST
44695: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44696: LD_VAR 0 6
44700: PPUSH
44701: CALL_OW 264
44705: PUSH
44706: LD_INT 22
44708: PUSH
44709: EMPTY
44710: LIST
44711: IN
44712: IFFALSE 44733
// points := [ 40 , 1 , 1 ] ;
44714: LD_ADDR_VAR 0 9
44718: PUSH
44719: LD_INT 40
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: LIST
44732: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44733: LD_VAR 0 6
44737: PPUSH
44738: CALL_OW 264
44742: PUSH
44743: LD_INT 29
44745: PUSH
44746: EMPTY
44747: LIST
44748: IN
44749: IFFALSE 44770
// points := [ 70 , 200 , 400 ] ;
44751: LD_ADDR_VAR 0 9
44755: PUSH
44756: LD_INT 70
44758: PUSH
44759: LD_INT 200
44761: PUSH
44762: LD_INT 400
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: LIST
44769: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44770: LD_VAR 0 6
44774: PPUSH
44775: CALL_OW 264
44779: PUSH
44780: LD_INT 14
44782: PUSH
44783: LD_INT 53
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: IN
44790: IFFALSE 44811
// points := [ 40 , 10 , 20 ] ;
44792: LD_ADDR_VAR 0 9
44796: PUSH
44797: LD_INT 40
44799: PUSH
44800: LD_INT 10
44802: PUSH
44803: LD_INT 20
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: LIST
44810: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44811: LD_VAR 0 6
44815: PPUSH
44816: CALL_OW 264
44820: PUSH
44821: LD_INT 9
44823: PUSH
44824: EMPTY
44825: LIST
44826: IN
44827: IFFALSE 44848
// points := [ 5 , 70 , 20 ] ;
44829: LD_ADDR_VAR 0 9
44833: PUSH
44834: LD_INT 5
44836: PUSH
44837: LD_INT 70
44839: PUSH
44840: LD_INT 20
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: LIST
44847: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44848: LD_VAR 0 6
44852: PPUSH
44853: CALL_OW 264
44857: PUSH
44858: LD_INT 10
44860: PUSH
44861: EMPTY
44862: LIST
44863: IN
44864: IFFALSE 44885
// points := [ 35 , 110 , 70 ] ;
44866: LD_ADDR_VAR 0 9
44870: PUSH
44871: LD_INT 35
44873: PUSH
44874: LD_INT 110
44876: PUSH
44877: LD_INT 70
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: LIST
44884: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44885: LD_VAR 0 6
44889: PPUSH
44890: CALL_OW 265
44894: PUSH
44895: LD_INT 25
44897: EQUAL
44898: IFFALSE 44919
// points := [ 80 , 65 , 100 ] ;
44900: LD_ADDR_VAR 0 9
44904: PUSH
44905: LD_INT 80
44907: PUSH
44908: LD_INT 65
44910: PUSH
44911: LD_INT 100
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: LIST
44918: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44919: LD_VAR 0 6
44923: PPUSH
44924: CALL_OW 263
44928: PUSH
44929: LD_INT 1
44931: EQUAL
44932: IFFALSE 44967
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44934: LD_ADDR_VAR 0 10
44938: PUSH
44939: LD_VAR 0 10
44943: PUSH
44944: LD_VAR 0 6
44948: PPUSH
44949: CALL_OW 311
44953: PPUSH
44954: LD_INT 3
44956: PPUSH
44957: CALL_OW 259
44961: PUSH
44962: LD_INT 4
44964: MUL
44965: MUL
44966: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44967: LD_VAR 0 6
44971: PPUSH
44972: CALL_OW 263
44976: PUSH
44977: LD_INT 2
44979: EQUAL
44980: IFFALSE 45031
// begin j := IsControledBy ( i ) ;
44982: LD_ADDR_VAR 0 7
44986: PUSH
44987: LD_VAR 0 6
44991: PPUSH
44992: CALL_OW 312
44996: ST_TO_ADDR
// if j then
44997: LD_VAR 0 7
45001: IFFALSE 45031
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45003: LD_ADDR_VAR 0 10
45007: PUSH
45008: LD_VAR 0 10
45012: PUSH
45013: LD_VAR 0 7
45017: PPUSH
45018: LD_INT 3
45020: PPUSH
45021: CALL_OW 259
45025: PUSH
45026: LD_INT 3
45028: MUL
45029: MUL
45030: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45031: LD_VAR 0 6
45035: PPUSH
45036: CALL_OW 264
45040: PUSH
45041: LD_INT 5
45043: PUSH
45044: LD_INT 6
45046: PUSH
45047: LD_INT 46
45049: PUSH
45050: LD_INT 44
45052: PUSH
45053: LD_INT 47
45055: PUSH
45056: LD_INT 45
45058: PUSH
45059: LD_INT 28
45061: PUSH
45062: LD_INT 7
45064: PUSH
45065: LD_INT 27
45067: PUSH
45068: LD_INT 29
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: IN
45083: PUSH
45084: LD_VAR 0 1
45088: PPUSH
45089: LD_INT 52
45091: PPUSH
45092: CALL_OW 321
45096: PUSH
45097: LD_INT 2
45099: EQUAL
45100: AND
45101: IFFALSE 45118
// bpoints := bpoints * 1.2 ;
45103: LD_ADDR_VAR 0 10
45107: PUSH
45108: LD_VAR 0 10
45112: PUSH
45113: LD_REAL  1.20000000000000E+0000
45116: MUL
45117: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45118: LD_VAR 0 6
45122: PPUSH
45123: CALL_OW 264
45127: PUSH
45128: LD_INT 6
45130: PUSH
45131: LD_INT 46
45133: PUSH
45134: LD_INT 47
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: LIST
45141: IN
45142: IFFALSE 45159
// bpoints := bpoints * 1.2 ;
45144: LD_ADDR_VAR 0 10
45148: PUSH
45149: LD_VAR 0 10
45153: PUSH
45154: LD_REAL  1.20000000000000E+0000
45157: MUL
45158: ST_TO_ADDR
// end ; unit_building :
45159: GO 45173
45161: LD_INT 3
45163: DOUBLE
45164: EQUAL
45165: IFTRUE 45169
45167: GO 45172
45169: POP
// ; end ;
45170: GO 45173
45172: POP
// for j = 1 to 3 do
45173: LD_ADDR_VAR 0 7
45177: PUSH
45178: DOUBLE
45179: LD_INT 1
45181: DEC
45182: ST_TO_ADDR
45183: LD_INT 3
45185: PUSH
45186: FOR_TO
45187: IFFALSE 45240
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45189: LD_ADDR_VAR 0 5
45193: PUSH
45194: LD_VAR 0 5
45198: PPUSH
45199: LD_VAR 0 7
45203: PPUSH
45204: LD_VAR 0 5
45208: PUSH
45209: LD_VAR 0 7
45213: ARRAY
45214: PUSH
45215: LD_VAR 0 9
45219: PUSH
45220: LD_VAR 0 7
45224: ARRAY
45225: PUSH
45226: LD_VAR 0 10
45230: MUL
45231: PLUS
45232: PPUSH
45233: CALL_OW 1
45237: ST_TO_ADDR
45238: GO 45186
45240: POP
45241: POP
// end ;
45242: GO 43719
45244: POP
45245: POP
// result := Replace ( result , 4 , tmp ) ;
45246: LD_ADDR_VAR 0 5
45250: PUSH
45251: LD_VAR 0 5
45255: PPUSH
45256: LD_INT 4
45258: PPUSH
45259: LD_VAR 0 8
45263: PPUSH
45264: CALL_OW 1
45268: ST_TO_ADDR
// end ;
45269: LD_VAR 0 5
45273: RET
// export function DangerAtRange ( unit , range ) ; begin
45274: LD_INT 0
45276: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45277: LD_ADDR_VAR 0 3
45281: PUSH
45282: LD_VAR 0 1
45286: PPUSH
45287: CALL_OW 255
45291: PPUSH
45292: LD_VAR 0 1
45296: PPUSH
45297: CALL_OW 250
45301: PPUSH
45302: LD_VAR 0 1
45306: PPUSH
45307: CALL_OW 251
45311: PPUSH
45312: LD_VAR 0 2
45316: PPUSH
45317: CALL 43571 0 4
45321: ST_TO_ADDR
// end ;
45322: LD_VAR 0 3
45326: RET
// export function DangerInArea ( side , area ) ; begin
45327: LD_INT 0
45329: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45330: LD_ADDR_VAR 0 3
45334: PUSH
45335: LD_VAR 0 2
45339: PPUSH
45340: LD_INT 81
45342: PUSH
45343: LD_VAR 0 1
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PPUSH
45352: CALL_OW 70
45356: ST_TO_ADDR
// end ;
45357: LD_VAR 0 3
45361: RET
// export function IsExtension ( b ) ; begin
45362: LD_INT 0
45364: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45365: LD_ADDR_VAR 0 2
45369: PUSH
45370: LD_VAR 0 1
45374: PUSH
45375: LD_INT 23
45377: PUSH
45378: LD_INT 20
45380: PUSH
45381: LD_INT 22
45383: PUSH
45384: LD_INT 17
45386: PUSH
45387: LD_INT 24
45389: PUSH
45390: LD_INT 21
45392: PUSH
45393: LD_INT 19
45395: PUSH
45396: LD_INT 16
45398: PUSH
45399: LD_INT 25
45401: PUSH
45402: LD_INT 18
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: IN
45417: ST_TO_ADDR
// end ;
45418: LD_VAR 0 2
45422: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45423: LD_INT 0
45425: PPUSH
45426: PPUSH
45427: PPUSH
// result := [ ] ;
45428: LD_ADDR_VAR 0 4
45432: PUSH
45433: EMPTY
45434: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45435: LD_ADDR_VAR 0 5
45439: PUSH
45440: LD_VAR 0 2
45444: PPUSH
45445: LD_INT 21
45447: PUSH
45448: LD_INT 3
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PPUSH
45455: CALL_OW 70
45459: ST_TO_ADDR
// if not tmp then
45460: LD_VAR 0 5
45464: NOT
45465: IFFALSE 45469
// exit ;
45467: GO 45533
// if checkLink then
45469: LD_VAR 0 3
45473: IFFALSE 45523
// begin for i in tmp do
45475: LD_ADDR_VAR 0 6
45479: PUSH
45480: LD_VAR 0 5
45484: PUSH
45485: FOR_IN
45486: IFFALSE 45521
// if GetBase ( i ) <> base then
45488: LD_VAR 0 6
45492: PPUSH
45493: CALL_OW 274
45497: PUSH
45498: LD_VAR 0 1
45502: NONEQUAL
45503: IFFALSE 45519
// ComLinkToBase ( base , i ) ;
45505: LD_VAR 0 1
45509: PPUSH
45510: LD_VAR 0 6
45514: PPUSH
45515: CALL_OW 169
45519: GO 45485
45521: POP
45522: POP
// end ; result := tmp ;
45523: LD_ADDR_VAR 0 4
45527: PUSH
45528: LD_VAR 0 5
45532: ST_TO_ADDR
// end ;
45533: LD_VAR 0 4
45537: RET
// export function ComComplete ( units , b ) ; var i ; begin
45538: LD_INT 0
45540: PPUSH
45541: PPUSH
// if not units then
45542: LD_VAR 0 1
45546: NOT
45547: IFFALSE 45551
// exit ;
45549: GO 45641
// for i in units do
45551: LD_ADDR_VAR 0 4
45555: PUSH
45556: LD_VAR 0 1
45560: PUSH
45561: FOR_IN
45562: IFFALSE 45639
// if BuildingStatus ( b ) = bs_build then
45564: LD_VAR 0 2
45568: PPUSH
45569: CALL_OW 461
45573: PUSH
45574: LD_INT 1
45576: EQUAL
45577: IFFALSE 45637
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45579: LD_VAR 0 4
45583: PPUSH
45584: LD_STRING h
45586: PUSH
45587: LD_VAR 0 2
45591: PPUSH
45592: CALL_OW 250
45596: PUSH
45597: LD_VAR 0 2
45601: PPUSH
45602: CALL_OW 251
45606: PUSH
45607: LD_VAR 0 2
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: PUSH
45630: EMPTY
45631: LIST
45632: PPUSH
45633: CALL_OW 446
45637: GO 45561
45639: POP
45640: POP
// end ;
45641: LD_VAR 0 3
45645: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45646: LD_INT 0
45648: PPUSH
45649: PPUSH
45650: PPUSH
45651: PPUSH
45652: PPUSH
45653: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45654: LD_VAR 0 1
45658: NOT
45659: PUSH
45660: LD_VAR 0 1
45664: PPUSH
45665: CALL_OW 263
45669: PUSH
45670: LD_INT 2
45672: NONEQUAL
45673: OR
45674: IFFALSE 45678
// exit ;
45676: GO 45994
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45678: LD_ADDR_VAR 0 6
45682: PUSH
45683: LD_INT 22
45685: PUSH
45686: LD_VAR 0 1
45690: PPUSH
45691: CALL_OW 255
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 2
45702: PUSH
45703: LD_INT 30
45705: PUSH
45706: LD_INT 36
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 34
45715: PUSH
45716: LD_INT 31
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: LIST
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PPUSH
45732: CALL_OW 69
45736: ST_TO_ADDR
// if not tmp then
45737: LD_VAR 0 6
45741: NOT
45742: IFFALSE 45746
// exit ;
45744: GO 45994
// result := [ ] ;
45746: LD_ADDR_VAR 0 2
45750: PUSH
45751: EMPTY
45752: ST_TO_ADDR
// for i in tmp do
45753: LD_ADDR_VAR 0 3
45757: PUSH
45758: LD_VAR 0 6
45762: PUSH
45763: FOR_IN
45764: IFFALSE 45835
// begin t := UnitsInside ( i ) ;
45766: LD_ADDR_VAR 0 4
45770: PUSH
45771: LD_VAR 0 3
45775: PPUSH
45776: CALL_OW 313
45780: ST_TO_ADDR
// if t then
45781: LD_VAR 0 4
45785: IFFALSE 45833
// for j in t do
45787: LD_ADDR_VAR 0 7
45791: PUSH
45792: LD_VAR 0 4
45796: PUSH
45797: FOR_IN
45798: IFFALSE 45831
// result := Replace ( result , result + 1 , j ) ;
45800: LD_ADDR_VAR 0 2
45804: PUSH
45805: LD_VAR 0 2
45809: PPUSH
45810: LD_VAR 0 2
45814: PUSH
45815: LD_INT 1
45817: PLUS
45818: PPUSH
45819: LD_VAR 0 7
45823: PPUSH
45824: CALL_OW 1
45828: ST_TO_ADDR
45829: GO 45797
45831: POP
45832: POP
// end ;
45833: GO 45763
45835: POP
45836: POP
// if not result then
45837: LD_VAR 0 2
45841: NOT
45842: IFFALSE 45846
// exit ;
45844: GO 45994
// mech := result [ 1 ] ;
45846: LD_ADDR_VAR 0 5
45850: PUSH
45851: LD_VAR 0 2
45855: PUSH
45856: LD_INT 1
45858: ARRAY
45859: ST_TO_ADDR
// if result > 1 then
45860: LD_VAR 0 2
45864: PUSH
45865: LD_INT 1
45867: GREATER
45868: IFFALSE 45980
// begin for i = 2 to result do
45870: LD_ADDR_VAR 0 3
45874: PUSH
45875: DOUBLE
45876: LD_INT 2
45878: DEC
45879: ST_TO_ADDR
45880: LD_VAR 0 2
45884: PUSH
45885: FOR_TO
45886: IFFALSE 45978
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45888: LD_ADDR_VAR 0 4
45892: PUSH
45893: LD_VAR 0 2
45897: PUSH
45898: LD_VAR 0 3
45902: ARRAY
45903: PPUSH
45904: LD_INT 3
45906: PPUSH
45907: CALL_OW 259
45911: PUSH
45912: LD_VAR 0 2
45916: PUSH
45917: LD_VAR 0 3
45921: ARRAY
45922: PPUSH
45923: CALL_OW 432
45927: MINUS
45928: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45929: LD_VAR 0 4
45933: PUSH
45934: LD_VAR 0 5
45938: PPUSH
45939: LD_INT 3
45941: PPUSH
45942: CALL_OW 259
45946: PUSH
45947: LD_VAR 0 5
45951: PPUSH
45952: CALL_OW 432
45956: MINUS
45957: GREATEREQUAL
45958: IFFALSE 45976
// mech := result [ i ] ;
45960: LD_ADDR_VAR 0 5
45964: PUSH
45965: LD_VAR 0 2
45969: PUSH
45970: LD_VAR 0 3
45974: ARRAY
45975: ST_TO_ADDR
// end ;
45976: GO 45885
45978: POP
45979: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45980: LD_VAR 0 1
45984: PPUSH
45985: LD_VAR 0 5
45989: PPUSH
45990: CALL_OW 135
// end ;
45994: LD_VAR 0 2
45998: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45999: LD_INT 0
46001: PPUSH
46002: PPUSH
46003: PPUSH
46004: PPUSH
46005: PPUSH
46006: PPUSH
46007: PPUSH
46008: PPUSH
46009: PPUSH
46010: PPUSH
46011: PPUSH
46012: PPUSH
46013: PPUSH
// result := [ ] ;
46014: LD_ADDR_VAR 0 7
46018: PUSH
46019: EMPTY
46020: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46021: LD_VAR 0 1
46025: PPUSH
46026: CALL_OW 266
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: IN
46041: NOT
46042: IFFALSE 46046
// exit ;
46044: GO 47680
// if name then
46046: LD_VAR 0 3
46050: IFFALSE 46066
// SetBName ( base_dep , name ) ;
46052: LD_VAR 0 1
46056: PPUSH
46057: LD_VAR 0 3
46061: PPUSH
46062: CALL_OW 500
// base := GetBase ( base_dep ) ;
46066: LD_ADDR_VAR 0 15
46070: PUSH
46071: LD_VAR 0 1
46075: PPUSH
46076: CALL_OW 274
46080: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46081: LD_ADDR_VAR 0 16
46085: PUSH
46086: LD_VAR 0 1
46090: PPUSH
46091: CALL_OW 255
46095: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46096: LD_ADDR_VAR 0 17
46100: PUSH
46101: LD_VAR 0 1
46105: PPUSH
46106: CALL_OW 248
46110: ST_TO_ADDR
// if sources then
46111: LD_VAR 0 5
46115: IFFALSE 46162
// for i = 1 to 3 do
46117: LD_ADDR_VAR 0 8
46121: PUSH
46122: DOUBLE
46123: LD_INT 1
46125: DEC
46126: ST_TO_ADDR
46127: LD_INT 3
46129: PUSH
46130: FOR_TO
46131: IFFALSE 46160
// AddResourceType ( base , i , sources [ i ] ) ;
46133: LD_VAR 0 15
46137: PPUSH
46138: LD_VAR 0 8
46142: PPUSH
46143: LD_VAR 0 5
46147: PUSH
46148: LD_VAR 0 8
46152: ARRAY
46153: PPUSH
46154: CALL_OW 276
46158: GO 46130
46160: POP
46161: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46162: LD_ADDR_VAR 0 18
46166: PUSH
46167: LD_VAR 0 15
46171: PPUSH
46172: LD_VAR 0 2
46176: PPUSH
46177: LD_INT 1
46179: PPUSH
46180: CALL 45423 0 3
46184: ST_TO_ADDR
// InitHc ;
46185: CALL_OW 19
// InitUc ;
46189: CALL_OW 18
// uc_side := side ;
46193: LD_ADDR_OWVAR 20
46197: PUSH
46198: LD_VAR 0 16
46202: ST_TO_ADDR
// uc_nation := nation ;
46203: LD_ADDR_OWVAR 21
46207: PUSH
46208: LD_VAR 0 17
46212: ST_TO_ADDR
// if buildings then
46213: LD_VAR 0 18
46217: IFFALSE 47539
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46219: LD_ADDR_VAR 0 19
46223: PUSH
46224: LD_VAR 0 18
46228: PPUSH
46229: LD_INT 2
46231: PUSH
46232: LD_INT 30
46234: PUSH
46235: LD_INT 29
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 30
46244: PUSH
46245: LD_INT 30
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: LIST
46256: PPUSH
46257: CALL_OW 72
46261: ST_TO_ADDR
// if tmp then
46262: LD_VAR 0 19
46266: IFFALSE 46314
// for i in tmp do
46268: LD_ADDR_VAR 0 8
46272: PUSH
46273: LD_VAR 0 19
46277: PUSH
46278: FOR_IN
46279: IFFALSE 46312
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46281: LD_VAR 0 8
46285: PPUSH
46286: CALL_OW 250
46290: PPUSH
46291: LD_VAR 0 8
46295: PPUSH
46296: CALL_OW 251
46300: PPUSH
46301: LD_VAR 0 16
46305: PPUSH
46306: CALL_OW 441
46310: GO 46278
46312: POP
46313: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46314: LD_VAR 0 18
46318: PPUSH
46319: LD_INT 2
46321: PUSH
46322: LD_INT 30
46324: PUSH
46325: LD_INT 32
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 30
46334: PUSH
46335: LD_INT 33
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: LIST
46346: PPUSH
46347: CALL_OW 72
46351: IFFALSE 46439
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46353: LD_ADDR_VAR 0 8
46357: PUSH
46358: LD_VAR 0 18
46362: PPUSH
46363: LD_INT 2
46365: PUSH
46366: LD_INT 30
46368: PUSH
46369: LD_INT 32
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 30
46378: PUSH
46379: LD_INT 33
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: LIST
46390: PPUSH
46391: CALL_OW 72
46395: PUSH
46396: FOR_IN
46397: IFFALSE 46437
// begin if not GetBWeapon ( i ) then
46399: LD_VAR 0 8
46403: PPUSH
46404: CALL_OW 269
46408: NOT
46409: IFFALSE 46435
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46411: LD_VAR 0 8
46415: PPUSH
46416: LD_VAR 0 8
46420: PPUSH
46421: LD_VAR 0 2
46425: PPUSH
46426: CALL 47685 0 2
46430: PPUSH
46431: CALL_OW 431
// end ;
46435: GO 46396
46437: POP
46438: POP
// end ; for i = 1 to personel do
46439: LD_ADDR_VAR 0 8
46443: PUSH
46444: DOUBLE
46445: LD_INT 1
46447: DEC
46448: ST_TO_ADDR
46449: LD_VAR 0 6
46453: PUSH
46454: FOR_TO
46455: IFFALSE 47519
// begin if i > 4 then
46457: LD_VAR 0 8
46461: PUSH
46462: LD_INT 4
46464: GREATER
46465: IFFALSE 46469
// break ;
46467: GO 47519
// case i of 1 :
46469: LD_VAR 0 8
46473: PUSH
46474: LD_INT 1
46476: DOUBLE
46477: EQUAL
46478: IFTRUE 46482
46480: GO 46562
46482: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46483: LD_ADDR_VAR 0 12
46487: PUSH
46488: LD_VAR 0 18
46492: PPUSH
46493: LD_INT 22
46495: PUSH
46496: LD_VAR 0 16
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 58
46507: PUSH
46508: EMPTY
46509: LIST
46510: PUSH
46511: LD_INT 2
46513: PUSH
46514: LD_INT 30
46516: PUSH
46517: LD_INT 32
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 30
46526: PUSH
46527: LD_INT 4
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 30
46536: PUSH
46537: LD_INT 5
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: LIST
46554: PPUSH
46555: CALL_OW 72
46559: ST_TO_ADDR
46560: GO 46784
46562: LD_INT 2
46564: DOUBLE
46565: EQUAL
46566: IFTRUE 46570
46568: GO 46632
46570: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46571: LD_ADDR_VAR 0 12
46575: PUSH
46576: LD_VAR 0 18
46580: PPUSH
46581: LD_INT 22
46583: PUSH
46584: LD_VAR 0 16
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 2
46595: PUSH
46596: LD_INT 30
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 30
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: LIST
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PPUSH
46625: CALL_OW 72
46629: ST_TO_ADDR
46630: GO 46784
46632: LD_INT 3
46634: DOUBLE
46635: EQUAL
46636: IFTRUE 46640
46638: GO 46702
46640: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46641: LD_ADDR_VAR 0 12
46645: PUSH
46646: LD_VAR 0 18
46650: PPUSH
46651: LD_INT 22
46653: PUSH
46654: LD_VAR 0 16
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: LD_INT 30
46668: PUSH
46669: LD_INT 2
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 30
46678: PUSH
46679: LD_INT 3
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: LIST
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PPUSH
46695: CALL_OW 72
46699: ST_TO_ADDR
46700: GO 46784
46702: LD_INT 4
46704: DOUBLE
46705: EQUAL
46706: IFTRUE 46710
46708: GO 46783
46710: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46711: LD_ADDR_VAR 0 12
46715: PUSH
46716: LD_VAR 0 18
46720: PPUSH
46721: LD_INT 22
46723: PUSH
46724: LD_VAR 0 16
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: LD_INT 30
46738: PUSH
46739: LD_INT 6
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 30
46748: PUSH
46749: LD_INT 7
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 30
46758: PUSH
46759: LD_INT 8
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PPUSH
46776: CALL_OW 72
46780: ST_TO_ADDR
46781: GO 46784
46783: POP
// if i = 1 then
46784: LD_VAR 0 8
46788: PUSH
46789: LD_INT 1
46791: EQUAL
46792: IFFALSE 46903
// begin tmp := [ ] ;
46794: LD_ADDR_VAR 0 19
46798: PUSH
46799: EMPTY
46800: ST_TO_ADDR
// for j in f do
46801: LD_ADDR_VAR 0 9
46805: PUSH
46806: LD_VAR 0 12
46810: PUSH
46811: FOR_IN
46812: IFFALSE 46885
// if GetBType ( j ) = b_bunker then
46814: LD_VAR 0 9
46818: PPUSH
46819: CALL_OW 266
46823: PUSH
46824: LD_INT 32
46826: EQUAL
46827: IFFALSE 46854
// tmp := Insert ( tmp , 1 , j ) else
46829: LD_ADDR_VAR 0 19
46833: PUSH
46834: LD_VAR 0 19
46838: PPUSH
46839: LD_INT 1
46841: PPUSH
46842: LD_VAR 0 9
46846: PPUSH
46847: CALL_OW 2
46851: ST_TO_ADDR
46852: GO 46883
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46854: LD_ADDR_VAR 0 19
46858: PUSH
46859: LD_VAR 0 19
46863: PPUSH
46864: LD_VAR 0 19
46868: PUSH
46869: LD_INT 1
46871: PLUS
46872: PPUSH
46873: LD_VAR 0 9
46877: PPUSH
46878: CALL_OW 2
46882: ST_TO_ADDR
46883: GO 46811
46885: POP
46886: POP
// if tmp then
46887: LD_VAR 0 19
46891: IFFALSE 46903
// f := tmp ;
46893: LD_ADDR_VAR 0 12
46897: PUSH
46898: LD_VAR 0 19
46902: ST_TO_ADDR
// end ; x := personel [ i ] ;
46903: LD_ADDR_VAR 0 13
46907: PUSH
46908: LD_VAR 0 6
46912: PUSH
46913: LD_VAR 0 8
46917: ARRAY
46918: ST_TO_ADDR
// if x = - 1 then
46919: LD_VAR 0 13
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: EQUAL
46928: IFFALSE 47137
// begin for j in f do
46930: LD_ADDR_VAR 0 9
46934: PUSH
46935: LD_VAR 0 12
46939: PUSH
46940: FOR_IN
46941: IFFALSE 47133
// repeat InitHc ;
46943: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46947: LD_VAR 0 9
46951: PPUSH
46952: CALL_OW 266
46956: PUSH
46957: LD_INT 5
46959: EQUAL
46960: IFFALSE 47030
// begin if UnitsInside ( j ) < 3 then
46962: LD_VAR 0 9
46966: PPUSH
46967: CALL_OW 313
46971: PUSH
46972: LD_INT 3
46974: LESS
46975: IFFALSE 47011
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46977: LD_INT 0
46979: PPUSH
46980: LD_INT 5
46982: PUSH
46983: LD_INT 8
46985: PUSH
46986: LD_INT 9
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: LIST
46993: PUSH
46994: LD_VAR 0 17
46998: ARRAY
46999: PPUSH
47000: LD_VAR 0 4
47004: PPUSH
47005: CALL_OW 380
47009: GO 47028
// PrepareHuman ( false , i , skill ) ;
47011: LD_INT 0
47013: PPUSH
47014: LD_VAR 0 8
47018: PPUSH
47019: LD_VAR 0 4
47023: PPUSH
47024: CALL_OW 380
// end else
47028: GO 47047
// PrepareHuman ( false , i , skill ) ;
47030: LD_INT 0
47032: PPUSH
47033: LD_VAR 0 8
47037: PPUSH
47038: LD_VAR 0 4
47042: PPUSH
47043: CALL_OW 380
// un := CreateHuman ;
47047: LD_ADDR_VAR 0 14
47051: PUSH
47052: CALL_OW 44
47056: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47057: LD_ADDR_VAR 0 7
47061: PUSH
47062: LD_VAR 0 7
47066: PPUSH
47067: LD_INT 1
47069: PPUSH
47070: LD_VAR 0 14
47074: PPUSH
47075: CALL_OW 2
47079: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47080: LD_VAR 0 14
47084: PPUSH
47085: LD_VAR 0 9
47089: PPUSH
47090: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47094: LD_VAR 0 9
47098: PPUSH
47099: CALL_OW 313
47103: PUSH
47104: LD_INT 6
47106: EQUAL
47107: PUSH
47108: LD_VAR 0 9
47112: PPUSH
47113: CALL_OW 266
47117: PUSH
47118: LD_INT 32
47120: PUSH
47121: LD_INT 31
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: IN
47128: OR
47129: IFFALSE 46943
47131: GO 46940
47133: POP
47134: POP
// end else
47135: GO 47517
// for j = 1 to x do
47137: LD_ADDR_VAR 0 9
47141: PUSH
47142: DOUBLE
47143: LD_INT 1
47145: DEC
47146: ST_TO_ADDR
47147: LD_VAR 0 13
47151: PUSH
47152: FOR_TO
47153: IFFALSE 47515
// begin InitHc ;
47155: CALL_OW 19
// if not f then
47159: LD_VAR 0 12
47163: NOT
47164: IFFALSE 47253
// begin PrepareHuman ( false , i , skill ) ;
47166: LD_INT 0
47168: PPUSH
47169: LD_VAR 0 8
47173: PPUSH
47174: LD_VAR 0 4
47178: PPUSH
47179: CALL_OW 380
// un := CreateHuman ;
47183: LD_ADDR_VAR 0 14
47187: PUSH
47188: CALL_OW 44
47192: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47193: LD_ADDR_VAR 0 7
47197: PUSH
47198: LD_VAR 0 7
47202: PPUSH
47203: LD_INT 1
47205: PPUSH
47206: LD_VAR 0 14
47210: PPUSH
47211: CALL_OW 2
47215: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47216: LD_VAR 0 14
47220: PPUSH
47221: LD_VAR 0 1
47225: PPUSH
47226: CALL_OW 250
47230: PPUSH
47231: LD_VAR 0 1
47235: PPUSH
47236: CALL_OW 251
47240: PPUSH
47241: LD_INT 10
47243: PPUSH
47244: LD_INT 0
47246: PPUSH
47247: CALL_OW 50
// continue ;
47251: GO 47152
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47253: LD_VAR 0 12
47257: PUSH
47258: LD_INT 1
47260: ARRAY
47261: PPUSH
47262: CALL_OW 313
47266: PUSH
47267: LD_VAR 0 12
47271: PUSH
47272: LD_INT 1
47274: ARRAY
47275: PPUSH
47276: CALL_OW 266
47280: PUSH
47281: LD_INT 32
47283: PUSH
47284: LD_INT 31
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: IN
47291: AND
47292: PUSH
47293: LD_VAR 0 12
47297: PUSH
47298: LD_INT 1
47300: ARRAY
47301: PPUSH
47302: CALL_OW 313
47306: PUSH
47307: LD_INT 6
47309: EQUAL
47310: OR
47311: IFFALSE 47331
// f := Delete ( f , 1 ) ;
47313: LD_ADDR_VAR 0 12
47317: PUSH
47318: LD_VAR 0 12
47322: PPUSH
47323: LD_INT 1
47325: PPUSH
47326: CALL_OW 3
47330: ST_TO_ADDR
// if not f then
47331: LD_VAR 0 12
47335: NOT
47336: IFFALSE 47354
// begin x := x + 2 ;
47338: LD_ADDR_VAR 0 13
47342: PUSH
47343: LD_VAR 0 13
47347: PUSH
47348: LD_INT 2
47350: PLUS
47351: ST_TO_ADDR
// continue ;
47352: GO 47152
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47354: LD_VAR 0 12
47358: PUSH
47359: LD_INT 1
47361: ARRAY
47362: PPUSH
47363: CALL_OW 266
47367: PUSH
47368: LD_INT 5
47370: EQUAL
47371: IFFALSE 47445
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47373: LD_VAR 0 12
47377: PUSH
47378: LD_INT 1
47380: ARRAY
47381: PPUSH
47382: CALL_OW 313
47386: PUSH
47387: LD_INT 3
47389: LESS
47390: IFFALSE 47426
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47392: LD_INT 0
47394: PPUSH
47395: LD_INT 5
47397: PUSH
47398: LD_INT 8
47400: PUSH
47401: LD_INT 9
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: LIST
47408: PUSH
47409: LD_VAR 0 17
47413: ARRAY
47414: PPUSH
47415: LD_VAR 0 4
47419: PPUSH
47420: CALL_OW 380
47424: GO 47443
// PrepareHuman ( false , i , skill ) ;
47426: LD_INT 0
47428: PPUSH
47429: LD_VAR 0 8
47433: PPUSH
47434: LD_VAR 0 4
47438: PPUSH
47439: CALL_OW 380
// end else
47443: GO 47462
// PrepareHuman ( false , i , skill ) ;
47445: LD_INT 0
47447: PPUSH
47448: LD_VAR 0 8
47452: PPUSH
47453: LD_VAR 0 4
47457: PPUSH
47458: CALL_OW 380
// un := CreateHuman ;
47462: LD_ADDR_VAR 0 14
47466: PUSH
47467: CALL_OW 44
47471: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47472: LD_ADDR_VAR 0 7
47476: PUSH
47477: LD_VAR 0 7
47481: PPUSH
47482: LD_INT 1
47484: PPUSH
47485: LD_VAR 0 14
47489: PPUSH
47490: CALL_OW 2
47494: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47495: LD_VAR 0 14
47499: PPUSH
47500: LD_VAR 0 12
47504: PUSH
47505: LD_INT 1
47507: ARRAY
47508: PPUSH
47509: CALL_OW 52
// end ;
47513: GO 47152
47515: POP
47516: POP
// end ;
47517: GO 46454
47519: POP
47520: POP
// result := result ^ buildings ;
47521: LD_ADDR_VAR 0 7
47525: PUSH
47526: LD_VAR 0 7
47530: PUSH
47531: LD_VAR 0 18
47535: ADD
47536: ST_TO_ADDR
// end else
47537: GO 47680
// begin for i = 1 to personel do
47539: LD_ADDR_VAR 0 8
47543: PUSH
47544: DOUBLE
47545: LD_INT 1
47547: DEC
47548: ST_TO_ADDR
47549: LD_VAR 0 6
47553: PUSH
47554: FOR_TO
47555: IFFALSE 47678
// begin if i > 4 then
47557: LD_VAR 0 8
47561: PUSH
47562: LD_INT 4
47564: GREATER
47565: IFFALSE 47569
// break ;
47567: GO 47678
// x := personel [ i ] ;
47569: LD_ADDR_VAR 0 13
47573: PUSH
47574: LD_VAR 0 6
47578: PUSH
47579: LD_VAR 0 8
47583: ARRAY
47584: ST_TO_ADDR
// if x = - 1 then
47585: LD_VAR 0 13
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: EQUAL
47594: IFFALSE 47598
// continue ;
47596: GO 47554
// PrepareHuman ( false , i , skill ) ;
47598: LD_INT 0
47600: PPUSH
47601: LD_VAR 0 8
47605: PPUSH
47606: LD_VAR 0 4
47610: PPUSH
47611: CALL_OW 380
// un := CreateHuman ;
47615: LD_ADDR_VAR 0 14
47619: PUSH
47620: CALL_OW 44
47624: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47625: LD_VAR 0 14
47629: PPUSH
47630: LD_VAR 0 1
47634: PPUSH
47635: CALL_OW 250
47639: PPUSH
47640: LD_VAR 0 1
47644: PPUSH
47645: CALL_OW 251
47649: PPUSH
47650: LD_INT 10
47652: PPUSH
47653: LD_INT 0
47655: PPUSH
47656: CALL_OW 50
// result := result ^ un ;
47660: LD_ADDR_VAR 0 7
47664: PUSH
47665: LD_VAR 0 7
47669: PUSH
47670: LD_VAR 0 14
47674: ADD
47675: ST_TO_ADDR
// end ;
47676: GO 47554
47678: POP
47679: POP
// end ; end ;
47680: LD_VAR 0 7
47684: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47685: LD_INT 0
47687: PPUSH
47688: PPUSH
47689: PPUSH
47690: PPUSH
47691: PPUSH
47692: PPUSH
47693: PPUSH
47694: PPUSH
47695: PPUSH
47696: PPUSH
47697: PPUSH
47698: PPUSH
47699: PPUSH
47700: PPUSH
47701: PPUSH
47702: PPUSH
// result := false ;
47703: LD_ADDR_VAR 0 3
47707: PUSH
47708: LD_INT 0
47710: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47711: LD_VAR 0 1
47715: NOT
47716: PUSH
47717: LD_VAR 0 1
47721: PPUSH
47722: CALL_OW 266
47726: PUSH
47727: LD_INT 32
47729: PUSH
47730: LD_INT 33
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: IN
47737: NOT
47738: OR
47739: IFFALSE 47743
// exit ;
47741: GO 48852
// nat := GetNation ( tower ) ;
47743: LD_ADDR_VAR 0 12
47747: PUSH
47748: LD_VAR 0 1
47752: PPUSH
47753: CALL_OW 248
47757: ST_TO_ADDR
// side := GetSide ( tower ) ;
47758: LD_ADDR_VAR 0 16
47762: PUSH
47763: LD_VAR 0 1
47767: PPUSH
47768: CALL_OW 255
47772: ST_TO_ADDR
// x := GetX ( tower ) ;
47773: LD_ADDR_VAR 0 10
47777: PUSH
47778: LD_VAR 0 1
47782: PPUSH
47783: CALL_OW 250
47787: ST_TO_ADDR
// y := GetY ( tower ) ;
47788: LD_ADDR_VAR 0 11
47792: PUSH
47793: LD_VAR 0 1
47797: PPUSH
47798: CALL_OW 251
47802: ST_TO_ADDR
// if not x or not y then
47803: LD_VAR 0 10
47807: NOT
47808: PUSH
47809: LD_VAR 0 11
47813: NOT
47814: OR
47815: IFFALSE 47819
// exit ;
47817: GO 48852
// weapon := 0 ;
47819: LD_ADDR_VAR 0 18
47823: PUSH
47824: LD_INT 0
47826: ST_TO_ADDR
// fac_list := [ ] ;
47827: LD_ADDR_VAR 0 17
47831: PUSH
47832: EMPTY
47833: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47834: LD_ADDR_VAR 0 6
47838: PUSH
47839: LD_VAR 0 1
47843: PPUSH
47844: CALL_OW 274
47848: PPUSH
47849: LD_VAR 0 2
47853: PPUSH
47854: LD_INT 0
47856: PPUSH
47857: CALL 45423 0 3
47861: PPUSH
47862: LD_INT 30
47864: PUSH
47865: LD_INT 3
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PPUSH
47872: CALL_OW 72
47876: ST_TO_ADDR
// if not factories then
47877: LD_VAR 0 6
47881: NOT
47882: IFFALSE 47886
// exit ;
47884: GO 48852
// for i in factories do
47886: LD_ADDR_VAR 0 8
47890: PUSH
47891: LD_VAR 0 6
47895: PUSH
47896: FOR_IN
47897: IFFALSE 47922
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47899: LD_ADDR_VAR 0 17
47903: PUSH
47904: LD_VAR 0 17
47908: PUSH
47909: LD_VAR 0 8
47913: PPUSH
47914: CALL_OW 478
47918: UNION
47919: ST_TO_ADDR
47920: GO 47896
47922: POP
47923: POP
// if not fac_list then
47924: LD_VAR 0 17
47928: NOT
47929: IFFALSE 47933
// exit ;
47931: GO 48852
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47933: LD_ADDR_VAR 0 5
47937: PUSH
47938: LD_INT 4
47940: PUSH
47941: LD_INT 5
47943: PUSH
47944: LD_INT 9
47946: PUSH
47947: LD_INT 10
47949: PUSH
47950: LD_INT 6
47952: PUSH
47953: LD_INT 7
47955: PUSH
47956: LD_INT 11
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 27
47970: PUSH
47971: LD_INT 28
47973: PUSH
47974: LD_INT 26
47976: PUSH
47977: LD_INT 30
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 43
47988: PUSH
47989: LD_INT 44
47991: PUSH
47992: LD_INT 46
47994: PUSH
47995: LD_INT 45
47997: PUSH
47998: LD_INT 47
48000: PUSH
48001: LD_INT 49
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: LIST
48016: PUSH
48017: LD_VAR 0 12
48021: ARRAY
48022: ST_TO_ADDR
// list := list isect fac_list ;
48023: LD_ADDR_VAR 0 5
48027: PUSH
48028: LD_VAR 0 5
48032: PUSH
48033: LD_VAR 0 17
48037: ISECT
48038: ST_TO_ADDR
// if not list then
48039: LD_VAR 0 5
48043: NOT
48044: IFFALSE 48048
// exit ;
48046: GO 48852
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48048: LD_VAR 0 12
48052: PUSH
48053: LD_INT 3
48055: EQUAL
48056: PUSH
48057: LD_INT 49
48059: PUSH
48060: LD_VAR 0 5
48064: IN
48065: AND
48066: PUSH
48067: LD_INT 31
48069: PPUSH
48070: LD_VAR 0 16
48074: PPUSH
48075: CALL_OW 321
48079: PUSH
48080: LD_INT 2
48082: EQUAL
48083: AND
48084: IFFALSE 48144
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48086: LD_INT 22
48088: PUSH
48089: LD_VAR 0 16
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 35
48100: PUSH
48101: LD_INT 49
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 91
48110: PUSH
48111: LD_VAR 0 1
48115: PUSH
48116: LD_INT 10
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: LIST
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: LIST
48128: PPUSH
48129: CALL_OW 69
48133: NOT
48134: IFFALSE 48144
// weapon := ru_time_lapser ;
48136: LD_ADDR_VAR 0 18
48140: PUSH
48141: LD_INT 49
48143: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48144: LD_VAR 0 12
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: IN
48159: PUSH
48160: LD_INT 11
48162: PUSH
48163: LD_VAR 0 5
48167: IN
48168: PUSH
48169: LD_INT 30
48171: PUSH
48172: LD_VAR 0 5
48176: IN
48177: OR
48178: AND
48179: PUSH
48180: LD_INT 6
48182: PPUSH
48183: LD_VAR 0 16
48187: PPUSH
48188: CALL_OW 321
48192: PUSH
48193: LD_INT 2
48195: EQUAL
48196: AND
48197: IFFALSE 48362
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48199: LD_INT 22
48201: PUSH
48202: LD_VAR 0 16
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 2
48213: PUSH
48214: LD_INT 35
48216: PUSH
48217: LD_INT 11
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 35
48226: PUSH
48227: LD_INT 30
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 91
48241: PUSH
48242: LD_VAR 0 1
48246: PUSH
48247: LD_INT 18
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: LIST
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: LIST
48259: PPUSH
48260: CALL_OW 69
48264: NOT
48265: PUSH
48266: LD_INT 22
48268: PUSH
48269: LD_VAR 0 16
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 2
48280: PUSH
48281: LD_INT 30
48283: PUSH
48284: LD_INT 32
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 30
48293: PUSH
48294: LD_INT 33
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 91
48308: PUSH
48309: LD_VAR 0 1
48313: PUSH
48314: LD_INT 12
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: LIST
48326: PUSH
48327: EMPTY
48328: LIST
48329: PPUSH
48330: CALL_OW 69
48334: PUSH
48335: LD_INT 2
48337: GREATER
48338: AND
48339: IFFALSE 48362
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48341: LD_ADDR_VAR 0 18
48345: PUSH
48346: LD_INT 11
48348: PUSH
48349: LD_INT 30
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_VAR 0 12
48360: ARRAY
48361: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48362: LD_VAR 0 18
48366: NOT
48367: PUSH
48368: LD_INT 40
48370: PPUSH
48371: LD_VAR 0 16
48375: PPUSH
48376: CALL_OW 321
48380: PUSH
48381: LD_INT 2
48383: EQUAL
48384: AND
48385: PUSH
48386: LD_INT 7
48388: PUSH
48389: LD_VAR 0 5
48393: IN
48394: PUSH
48395: LD_INT 28
48397: PUSH
48398: LD_VAR 0 5
48402: IN
48403: OR
48404: PUSH
48405: LD_INT 45
48407: PUSH
48408: LD_VAR 0 5
48412: IN
48413: OR
48414: AND
48415: IFFALSE 48669
// begin hex := GetHexInfo ( x , y ) ;
48417: LD_ADDR_VAR 0 4
48421: PUSH
48422: LD_VAR 0 10
48426: PPUSH
48427: LD_VAR 0 11
48431: PPUSH
48432: CALL_OW 546
48436: ST_TO_ADDR
// if hex [ 1 ] then
48437: LD_VAR 0 4
48441: PUSH
48442: LD_INT 1
48444: ARRAY
48445: IFFALSE 48449
// exit ;
48447: GO 48852
// height := hex [ 2 ] ;
48449: LD_ADDR_VAR 0 15
48453: PUSH
48454: LD_VAR 0 4
48458: PUSH
48459: LD_INT 2
48461: ARRAY
48462: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48463: LD_ADDR_VAR 0 14
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: LD_INT 2
48473: PUSH
48474: LD_INT 3
48476: PUSH
48477: LD_INT 5
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: ST_TO_ADDR
// for i in tmp do
48486: LD_ADDR_VAR 0 8
48490: PUSH
48491: LD_VAR 0 14
48495: PUSH
48496: FOR_IN
48497: IFFALSE 48667
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48499: LD_ADDR_VAR 0 9
48503: PUSH
48504: LD_VAR 0 10
48508: PPUSH
48509: LD_VAR 0 8
48513: PPUSH
48514: LD_INT 5
48516: PPUSH
48517: CALL_OW 272
48521: PUSH
48522: LD_VAR 0 11
48526: PPUSH
48527: LD_VAR 0 8
48531: PPUSH
48532: LD_INT 5
48534: PPUSH
48535: CALL_OW 273
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48544: LD_VAR 0 9
48548: PUSH
48549: LD_INT 1
48551: ARRAY
48552: PPUSH
48553: LD_VAR 0 9
48557: PUSH
48558: LD_INT 2
48560: ARRAY
48561: PPUSH
48562: CALL_OW 488
48566: IFFALSE 48665
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48568: LD_ADDR_VAR 0 4
48572: PUSH
48573: LD_VAR 0 9
48577: PUSH
48578: LD_INT 1
48580: ARRAY
48581: PPUSH
48582: LD_VAR 0 9
48586: PUSH
48587: LD_INT 2
48589: ARRAY
48590: PPUSH
48591: CALL_OW 546
48595: ST_TO_ADDR
// if hex [ 1 ] then
48596: LD_VAR 0 4
48600: PUSH
48601: LD_INT 1
48603: ARRAY
48604: IFFALSE 48608
// continue ;
48606: GO 48496
// h := hex [ 2 ] ;
48608: LD_ADDR_VAR 0 13
48612: PUSH
48613: LD_VAR 0 4
48617: PUSH
48618: LD_INT 2
48620: ARRAY
48621: ST_TO_ADDR
// if h + 7 < height then
48622: LD_VAR 0 13
48626: PUSH
48627: LD_INT 7
48629: PLUS
48630: PUSH
48631: LD_VAR 0 15
48635: LESS
48636: IFFALSE 48665
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48638: LD_ADDR_VAR 0 18
48642: PUSH
48643: LD_INT 7
48645: PUSH
48646: LD_INT 28
48648: PUSH
48649: LD_INT 45
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: LIST
48656: PUSH
48657: LD_VAR 0 12
48661: ARRAY
48662: ST_TO_ADDR
// break ;
48663: GO 48667
// end ; end ; end ;
48665: GO 48496
48667: POP
48668: POP
// end ; if not weapon then
48669: LD_VAR 0 18
48673: NOT
48674: IFFALSE 48734
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48676: LD_ADDR_VAR 0 5
48680: PUSH
48681: LD_VAR 0 5
48685: PUSH
48686: LD_INT 11
48688: PUSH
48689: LD_INT 30
48691: PUSH
48692: LD_INT 49
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: LIST
48699: DIFF
48700: ST_TO_ADDR
// if not list then
48701: LD_VAR 0 5
48705: NOT
48706: IFFALSE 48710
// exit ;
48708: GO 48852
// weapon := list [ rand ( 1 , list ) ] ;
48710: LD_ADDR_VAR 0 18
48714: PUSH
48715: LD_VAR 0 5
48719: PUSH
48720: LD_INT 1
48722: PPUSH
48723: LD_VAR 0 5
48727: PPUSH
48728: CALL_OW 12
48732: ARRAY
48733: ST_TO_ADDR
// end ; if weapon then
48734: LD_VAR 0 18
48738: IFFALSE 48852
// begin tmp := CostOfWeapon ( weapon ) ;
48740: LD_ADDR_VAR 0 14
48744: PUSH
48745: LD_VAR 0 18
48749: PPUSH
48750: CALL_OW 451
48754: ST_TO_ADDR
// j := GetBase ( tower ) ;
48755: LD_ADDR_VAR 0 9
48759: PUSH
48760: LD_VAR 0 1
48764: PPUSH
48765: CALL_OW 274
48769: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48770: LD_VAR 0 9
48774: PPUSH
48775: LD_INT 1
48777: PPUSH
48778: CALL_OW 275
48782: PUSH
48783: LD_VAR 0 14
48787: PUSH
48788: LD_INT 1
48790: ARRAY
48791: GREATEREQUAL
48792: PUSH
48793: LD_VAR 0 9
48797: PPUSH
48798: LD_INT 2
48800: PPUSH
48801: CALL_OW 275
48805: PUSH
48806: LD_VAR 0 14
48810: PUSH
48811: LD_INT 2
48813: ARRAY
48814: GREATEREQUAL
48815: AND
48816: PUSH
48817: LD_VAR 0 9
48821: PPUSH
48822: LD_INT 3
48824: PPUSH
48825: CALL_OW 275
48829: PUSH
48830: LD_VAR 0 14
48834: PUSH
48835: LD_INT 3
48837: ARRAY
48838: GREATEREQUAL
48839: AND
48840: IFFALSE 48852
// result := weapon ;
48842: LD_ADDR_VAR 0 3
48846: PUSH
48847: LD_VAR 0 18
48851: ST_TO_ADDR
// end ; end ;
48852: LD_VAR 0 3
48856: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48857: LD_INT 0
48859: PPUSH
48860: PPUSH
// result := true ;
48861: LD_ADDR_VAR 0 3
48865: PUSH
48866: LD_INT 1
48868: ST_TO_ADDR
// if array1 = array2 then
48869: LD_VAR 0 1
48873: PUSH
48874: LD_VAR 0 2
48878: EQUAL
48879: IFFALSE 48939
// begin for i = 1 to array1 do
48881: LD_ADDR_VAR 0 4
48885: PUSH
48886: DOUBLE
48887: LD_INT 1
48889: DEC
48890: ST_TO_ADDR
48891: LD_VAR 0 1
48895: PUSH
48896: FOR_TO
48897: IFFALSE 48935
// if array1 [ i ] <> array2 [ i ] then
48899: LD_VAR 0 1
48903: PUSH
48904: LD_VAR 0 4
48908: ARRAY
48909: PUSH
48910: LD_VAR 0 2
48914: PUSH
48915: LD_VAR 0 4
48919: ARRAY
48920: NONEQUAL
48921: IFFALSE 48933
// begin result := false ;
48923: LD_ADDR_VAR 0 3
48927: PUSH
48928: LD_INT 0
48930: ST_TO_ADDR
// break ;
48931: GO 48935
// end ;
48933: GO 48896
48935: POP
48936: POP
// end else
48937: GO 48947
// result := false ;
48939: LD_ADDR_VAR 0 3
48943: PUSH
48944: LD_INT 0
48946: ST_TO_ADDR
// end ;
48947: LD_VAR 0 3
48951: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48952: LD_INT 0
48954: PPUSH
48955: PPUSH
// if not array1 or not array2 then
48956: LD_VAR 0 1
48960: NOT
48961: PUSH
48962: LD_VAR 0 2
48966: NOT
48967: OR
48968: IFFALSE 48972
// exit ;
48970: GO 49036
// result := true ;
48972: LD_ADDR_VAR 0 3
48976: PUSH
48977: LD_INT 1
48979: ST_TO_ADDR
// for i = 1 to array1 do
48980: LD_ADDR_VAR 0 4
48984: PUSH
48985: DOUBLE
48986: LD_INT 1
48988: DEC
48989: ST_TO_ADDR
48990: LD_VAR 0 1
48994: PUSH
48995: FOR_TO
48996: IFFALSE 49034
// if array1 [ i ] <> array2 [ i ] then
48998: LD_VAR 0 1
49002: PUSH
49003: LD_VAR 0 4
49007: ARRAY
49008: PUSH
49009: LD_VAR 0 2
49013: PUSH
49014: LD_VAR 0 4
49018: ARRAY
49019: NONEQUAL
49020: IFFALSE 49032
// begin result := false ;
49022: LD_ADDR_VAR 0 3
49026: PUSH
49027: LD_INT 0
49029: ST_TO_ADDR
// break ;
49030: GO 49034
// end ;
49032: GO 48995
49034: POP
49035: POP
// end ;
49036: LD_VAR 0 3
49040: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49041: LD_INT 0
49043: PPUSH
49044: PPUSH
49045: PPUSH
// pom := GetBase ( fac ) ;
49046: LD_ADDR_VAR 0 5
49050: PUSH
49051: LD_VAR 0 1
49055: PPUSH
49056: CALL_OW 274
49060: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49061: LD_ADDR_VAR 0 4
49065: PUSH
49066: LD_VAR 0 2
49070: PUSH
49071: LD_INT 1
49073: ARRAY
49074: PPUSH
49075: LD_VAR 0 2
49079: PUSH
49080: LD_INT 2
49082: ARRAY
49083: PPUSH
49084: LD_VAR 0 2
49088: PUSH
49089: LD_INT 3
49091: ARRAY
49092: PPUSH
49093: LD_VAR 0 2
49097: PUSH
49098: LD_INT 4
49100: ARRAY
49101: PPUSH
49102: CALL_OW 449
49106: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49107: LD_ADDR_VAR 0 3
49111: PUSH
49112: LD_VAR 0 5
49116: PPUSH
49117: LD_INT 1
49119: PPUSH
49120: CALL_OW 275
49124: PUSH
49125: LD_VAR 0 4
49129: PUSH
49130: LD_INT 1
49132: ARRAY
49133: GREATEREQUAL
49134: PUSH
49135: LD_VAR 0 5
49139: PPUSH
49140: LD_INT 2
49142: PPUSH
49143: CALL_OW 275
49147: PUSH
49148: LD_VAR 0 4
49152: PUSH
49153: LD_INT 2
49155: ARRAY
49156: GREATEREQUAL
49157: AND
49158: PUSH
49159: LD_VAR 0 5
49163: PPUSH
49164: LD_INT 3
49166: PPUSH
49167: CALL_OW 275
49171: PUSH
49172: LD_VAR 0 4
49176: PUSH
49177: LD_INT 3
49179: ARRAY
49180: GREATEREQUAL
49181: AND
49182: ST_TO_ADDR
// end ;
49183: LD_VAR 0 3
49187: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49188: LD_INT 0
49190: PPUSH
49191: PPUSH
49192: PPUSH
49193: PPUSH
// pom := GetBase ( building ) ;
49194: LD_ADDR_VAR 0 3
49198: PUSH
49199: LD_VAR 0 1
49203: PPUSH
49204: CALL_OW 274
49208: ST_TO_ADDR
// if not pom then
49209: LD_VAR 0 3
49213: NOT
49214: IFFALSE 49218
// exit ;
49216: GO 49388
// btype := GetBType ( building ) ;
49218: LD_ADDR_VAR 0 5
49222: PUSH
49223: LD_VAR 0 1
49227: PPUSH
49228: CALL_OW 266
49232: ST_TO_ADDR
// if btype = b_armoury then
49233: LD_VAR 0 5
49237: PUSH
49238: LD_INT 4
49240: EQUAL
49241: IFFALSE 49251
// btype := b_barracks ;
49243: LD_ADDR_VAR 0 5
49247: PUSH
49248: LD_INT 5
49250: ST_TO_ADDR
// if btype = b_depot then
49251: LD_VAR 0 5
49255: PUSH
49256: LD_INT 0
49258: EQUAL
49259: IFFALSE 49269
// btype := b_warehouse ;
49261: LD_ADDR_VAR 0 5
49265: PUSH
49266: LD_INT 1
49268: ST_TO_ADDR
// if btype = b_workshop then
49269: LD_VAR 0 5
49273: PUSH
49274: LD_INT 2
49276: EQUAL
49277: IFFALSE 49287
// btype := b_factory ;
49279: LD_ADDR_VAR 0 5
49283: PUSH
49284: LD_INT 3
49286: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49287: LD_ADDR_VAR 0 4
49291: PUSH
49292: LD_VAR 0 5
49296: PPUSH
49297: LD_VAR 0 1
49301: PPUSH
49302: CALL_OW 248
49306: PPUSH
49307: CALL_OW 450
49311: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49312: LD_ADDR_VAR 0 2
49316: PUSH
49317: LD_VAR 0 3
49321: PPUSH
49322: LD_INT 1
49324: PPUSH
49325: CALL_OW 275
49329: PUSH
49330: LD_VAR 0 4
49334: PUSH
49335: LD_INT 1
49337: ARRAY
49338: GREATEREQUAL
49339: PUSH
49340: LD_VAR 0 3
49344: PPUSH
49345: LD_INT 2
49347: PPUSH
49348: CALL_OW 275
49352: PUSH
49353: LD_VAR 0 4
49357: PUSH
49358: LD_INT 2
49360: ARRAY
49361: GREATEREQUAL
49362: AND
49363: PUSH
49364: LD_VAR 0 3
49368: PPUSH
49369: LD_INT 3
49371: PPUSH
49372: CALL_OW 275
49376: PUSH
49377: LD_VAR 0 4
49381: PUSH
49382: LD_INT 3
49384: ARRAY
49385: GREATEREQUAL
49386: AND
49387: ST_TO_ADDR
// end ;
49388: LD_VAR 0 2
49392: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49393: LD_INT 0
49395: PPUSH
49396: PPUSH
49397: PPUSH
// pom := GetBase ( building ) ;
49398: LD_ADDR_VAR 0 4
49402: PUSH
49403: LD_VAR 0 1
49407: PPUSH
49408: CALL_OW 274
49412: ST_TO_ADDR
// if not pom then
49413: LD_VAR 0 4
49417: NOT
49418: IFFALSE 49422
// exit ;
49420: GO 49523
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49422: LD_ADDR_VAR 0 5
49426: PUSH
49427: LD_VAR 0 2
49431: PPUSH
49432: LD_VAR 0 1
49436: PPUSH
49437: CALL_OW 248
49441: PPUSH
49442: CALL_OW 450
49446: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49447: LD_ADDR_VAR 0 3
49451: PUSH
49452: LD_VAR 0 4
49456: PPUSH
49457: LD_INT 1
49459: PPUSH
49460: CALL_OW 275
49464: PUSH
49465: LD_VAR 0 5
49469: PUSH
49470: LD_INT 1
49472: ARRAY
49473: GREATEREQUAL
49474: PUSH
49475: LD_VAR 0 4
49479: PPUSH
49480: LD_INT 2
49482: PPUSH
49483: CALL_OW 275
49487: PUSH
49488: LD_VAR 0 5
49492: PUSH
49493: LD_INT 2
49495: ARRAY
49496: GREATEREQUAL
49497: AND
49498: PUSH
49499: LD_VAR 0 4
49503: PPUSH
49504: LD_INT 3
49506: PPUSH
49507: CALL_OW 275
49511: PUSH
49512: LD_VAR 0 5
49516: PUSH
49517: LD_INT 3
49519: ARRAY
49520: GREATEREQUAL
49521: AND
49522: ST_TO_ADDR
// end ;
49523: LD_VAR 0 3
49527: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49528: LD_INT 0
49530: PPUSH
49531: PPUSH
49532: PPUSH
49533: PPUSH
49534: PPUSH
49535: PPUSH
49536: PPUSH
49537: PPUSH
49538: PPUSH
49539: PPUSH
49540: PPUSH
// result := false ;
49541: LD_ADDR_VAR 0 8
49545: PUSH
49546: LD_INT 0
49548: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49549: LD_VAR 0 5
49553: NOT
49554: PUSH
49555: LD_VAR 0 1
49559: NOT
49560: OR
49561: PUSH
49562: LD_VAR 0 2
49566: NOT
49567: OR
49568: PUSH
49569: LD_VAR 0 3
49573: NOT
49574: OR
49575: IFFALSE 49579
// exit ;
49577: GO 50393
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49579: LD_ADDR_VAR 0 14
49583: PUSH
49584: LD_VAR 0 1
49588: PPUSH
49589: LD_VAR 0 2
49593: PPUSH
49594: LD_VAR 0 3
49598: PPUSH
49599: LD_VAR 0 4
49603: PPUSH
49604: LD_VAR 0 5
49608: PUSH
49609: LD_INT 1
49611: ARRAY
49612: PPUSH
49613: CALL_OW 248
49617: PPUSH
49618: LD_INT 0
49620: PPUSH
49621: CALL 51630 0 6
49625: ST_TO_ADDR
// if not hexes then
49626: LD_VAR 0 14
49630: NOT
49631: IFFALSE 49635
// exit ;
49633: GO 50393
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49635: LD_ADDR_VAR 0 17
49639: PUSH
49640: LD_VAR 0 5
49644: PPUSH
49645: LD_INT 22
49647: PUSH
49648: LD_VAR 0 13
49652: PPUSH
49653: CALL_OW 255
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 2
49664: PUSH
49665: LD_INT 30
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 30
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: LIST
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PPUSH
49694: CALL_OW 72
49698: ST_TO_ADDR
// for i = 1 to hexes do
49699: LD_ADDR_VAR 0 9
49703: PUSH
49704: DOUBLE
49705: LD_INT 1
49707: DEC
49708: ST_TO_ADDR
49709: LD_VAR 0 14
49713: PUSH
49714: FOR_TO
49715: IFFALSE 50391
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49717: LD_ADDR_VAR 0 13
49721: PUSH
49722: LD_VAR 0 14
49726: PUSH
49727: LD_VAR 0 9
49731: ARRAY
49732: PUSH
49733: LD_INT 1
49735: ARRAY
49736: PPUSH
49737: LD_VAR 0 14
49741: PUSH
49742: LD_VAR 0 9
49746: ARRAY
49747: PUSH
49748: LD_INT 2
49750: ARRAY
49751: PPUSH
49752: CALL_OW 428
49756: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49757: LD_VAR 0 14
49761: PUSH
49762: LD_VAR 0 9
49766: ARRAY
49767: PUSH
49768: LD_INT 1
49770: ARRAY
49771: PPUSH
49772: LD_VAR 0 14
49776: PUSH
49777: LD_VAR 0 9
49781: ARRAY
49782: PUSH
49783: LD_INT 2
49785: ARRAY
49786: PPUSH
49787: CALL_OW 351
49791: PUSH
49792: LD_VAR 0 14
49796: PUSH
49797: LD_VAR 0 9
49801: ARRAY
49802: PUSH
49803: LD_INT 1
49805: ARRAY
49806: PPUSH
49807: LD_VAR 0 14
49811: PUSH
49812: LD_VAR 0 9
49816: ARRAY
49817: PUSH
49818: LD_INT 2
49820: ARRAY
49821: PPUSH
49822: CALL_OW 488
49826: NOT
49827: OR
49828: PUSH
49829: LD_VAR 0 13
49833: PPUSH
49834: CALL_OW 247
49838: PUSH
49839: LD_INT 3
49841: EQUAL
49842: OR
49843: IFFALSE 49849
// exit ;
49845: POP
49846: POP
49847: GO 50393
// if not tmp then
49849: LD_VAR 0 13
49853: NOT
49854: IFFALSE 49858
// continue ;
49856: GO 49714
// result := true ;
49858: LD_ADDR_VAR 0 8
49862: PUSH
49863: LD_INT 1
49865: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49866: LD_VAR 0 6
49870: PUSH
49871: LD_VAR 0 13
49875: PPUSH
49876: CALL_OW 247
49880: PUSH
49881: LD_INT 2
49883: EQUAL
49884: AND
49885: PUSH
49886: LD_VAR 0 13
49890: PPUSH
49891: CALL_OW 263
49895: PUSH
49896: LD_INT 1
49898: EQUAL
49899: AND
49900: IFFALSE 50064
// begin if IsDrivenBy ( tmp ) then
49902: LD_VAR 0 13
49906: PPUSH
49907: CALL_OW 311
49911: IFFALSE 49915
// continue ;
49913: GO 49714
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49915: LD_VAR 0 6
49919: PPUSH
49920: LD_INT 3
49922: PUSH
49923: LD_INT 60
49925: PUSH
49926: EMPTY
49927: LIST
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 3
49935: PUSH
49936: LD_INT 55
49938: PUSH
49939: EMPTY
49940: LIST
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PPUSH
49950: CALL_OW 72
49954: IFFALSE 50062
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49956: LD_ADDR_VAR 0 18
49960: PUSH
49961: LD_VAR 0 6
49965: PPUSH
49966: LD_INT 3
49968: PUSH
49969: LD_INT 60
49971: PUSH
49972: EMPTY
49973: LIST
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 3
49981: PUSH
49982: LD_INT 55
49984: PUSH
49985: EMPTY
49986: LIST
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PPUSH
49996: CALL_OW 72
50000: PUSH
50001: LD_INT 1
50003: ARRAY
50004: ST_TO_ADDR
// if IsInUnit ( driver ) then
50005: LD_VAR 0 18
50009: PPUSH
50010: CALL_OW 310
50014: IFFALSE 50025
// ComExit ( driver ) ;
50016: LD_VAR 0 18
50020: PPUSH
50021: CALL 74758 0 1
// AddComEnterUnit ( driver , tmp ) ;
50025: LD_VAR 0 18
50029: PPUSH
50030: LD_VAR 0 13
50034: PPUSH
50035: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50039: LD_VAR 0 18
50043: PPUSH
50044: LD_VAR 0 7
50048: PPUSH
50049: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50053: LD_VAR 0 18
50057: PPUSH
50058: CALL_OW 181
// end ; continue ;
50062: GO 49714
// end ; if not cleaners or not tmp in cleaners then
50064: LD_VAR 0 6
50068: NOT
50069: PUSH
50070: LD_VAR 0 13
50074: PUSH
50075: LD_VAR 0 6
50079: IN
50080: NOT
50081: OR
50082: IFFALSE 50389
// begin if dep then
50084: LD_VAR 0 17
50088: IFFALSE 50224
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50090: LD_ADDR_VAR 0 16
50094: PUSH
50095: LD_VAR 0 17
50099: PUSH
50100: LD_INT 1
50102: ARRAY
50103: PPUSH
50104: CALL_OW 250
50108: PPUSH
50109: LD_VAR 0 17
50113: PUSH
50114: LD_INT 1
50116: ARRAY
50117: PPUSH
50118: CALL_OW 254
50122: PPUSH
50123: LD_INT 5
50125: PPUSH
50126: CALL_OW 272
50130: PUSH
50131: LD_VAR 0 17
50135: PUSH
50136: LD_INT 1
50138: ARRAY
50139: PPUSH
50140: CALL_OW 251
50144: PPUSH
50145: LD_VAR 0 17
50149: PUSH
50150: LD_INT 1
50152: ARRAY
50153: PPUSH
50154: CALL_OW 254
50158: PPUSH
50159: LD_INT 5
50161: PPUSH
50162: CALL_OW 273
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50171: LD_VAR 0 16
50175: PUSH
50176: LD_INT 1
50178: ARRAY
50179: PPUSH
50180: LD_VAR 0 16
50184: PUSH
50185: LD_INT 2
50187: ARRAY
50188: PPUSH
50189: CALL_OW 488
50193: IFFALSE 50224
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50195: LD_VAR 0 13
50199: PPUSH
50200: LD_VAR 0 16
50204: PUSH
50205: LD_INT 1
50207: ARRAY
50208: PPUSH
50209: LD_VAR 0 16
50213: PUSH
50214: LD_INT 2
50216: ARRAY
50217: PPUSH
50218: CALL_OW 111
// continue ;
50222: GO 49714
// end ; end ; r := GetDir ( tmp ) ;
50224: LD_ADDR_VAR 0 15
50228: PUSH
50229: LD_VAR 0 13
50233: PPUSH
50234: CALL_OW 254
50238: ST_TO_ADDR
// if r = 5 then
50239: LD_VAR 0 15
50243: PUSH
50244: LD_INT 5
50246: EQUAL
50247: IFFALSE 50257
// r := 0 ;
50249: LD_ADDR_VAR 0 15
50253: PUSH
50254: LD_INT 0
50256: ST_TO_ADDR
// for j = r to 5 do
50257: LD_ADDR_VAR 0 10
50261: PUSH
50262: DOUBLE
50263: LD_VAR 0 15
50267: DEC
50268: ST_TO_ADDR
50269: LD_INT 5
50271: PUSH
50272: FOR_TO
50273: IFFALSE 50387
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50275: LD_ADDR_VAR 0 11
50279: PUSH
50280: LD_VAR 0 13
50284: PPUSH
50285: CALL_OW 250
50289: PPUSH
50290: LD_VAR 0 10
50294: PPUSH
50295: LD_INT 2
50297: PPUSH
50298: CALL_OW 272
50302: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50303: LD_ADDR_VAR 0 12
50307: PUSH
50308: LD_VAR 0 13
50312: PPUSH
50313: CALL_OW 251
50317: PPUSH
50318: LD_VAR 0 10
50322: PPUSH
50323: LD_INT 2
50325: PPUSH
50326: CALL_OW 273
50330: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50331: LD_VAR 0 11
50335: PPUSH
50336: LD_VAR 0 12
50340: PPUSH
50341: CALL_OW 488
50345: PUSH
50346: LD_VAR 0 11
50350: PPUSH
50351: LD_VAR 0 12
50355: PPUSH
50356: CALL_OW 428
50360: NOT
50361: AND
50362: IFFALSE 50385
// begin ComMoveXY ( tmp , _x , _y ) ;
50364: LD_VAR 0 13
50368: PPUSH
50369: LD_VAR 0 11
50373: PPUSH
50374: LD_VAR 0 12
50378: PPUSH
50379: CALL_OW 111
// break ;
50383: GO 50387
// end ; end ;
50385: GO 50272
50387: POP
50388: POP
// end ; end ;
50389: GO 49714
50391: POP
50392: POP
// end ;
50393: LD_VAR 0 8
50397: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50398: LD_INT 0
50400: PPUSH
// result := true ;
50401: LD_ADDR_VAR 0 3
50405: PUSH
50406: LD_INT 1
50408: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50409: LD_VAR 0 2
50413: PUSH
50414: LD_INT 24
50416: DOUBLE
50417: EQUAL
50418: IFTRUE 50428
50420: LD_INT 33
50422: DOUBLE
50423: EQUAL
50424: IFTRUE 50428
50426: GO 50453
50428: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50429: LD_ADDR_VAR 0 3
50433: PUSH
50434: LD_INT 32
50436: PPUSH
50437: LD_VAR 0 1
50441: PPUSH
50442: CALL_OW 321
50446: PUSH
50447: LD_INT 2
50449: EQUAL
50450: ST_TO_ADDR
50451: GO 50773
50453: LD_INT 20
50455: DOUBLE
50456: EQUAL
50457: IFTRUE 50461
50459: GO 50486
50461: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50462: LD_ADDR_VAR 0 3
50466: PUSH
50467: LD_INT 6
50469: PPUSH
50470: LD_VAR 0 1
50474: PPUSH
50475: CALL_OW 321
50479: PUSH
50480: LD_INT 2
50482: EQUAL
50483: ST_TO_ADDR
50484: GO 50773
50486: LD_INT 22
50488: DOUBLE
50489: EQUAL
50490: IFTRUE 50500
50492: LD_INT 36
50494: DOUBLE
50495: EQUAL
50496: IFTRUE 50500
50498: GO 50525
50500: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50501: LD_ADDR_VAR 0 3
50505: PUSH
50506: LD_INT 15
50508: PPUSH
50509: LD_VAR 0 1
50513: PPUSH
50514: CALL_OW 321
50518: PUSH
50519: LD_INT 2
50521: EQUAL
50522: ST_TO_ADDR
50523: GO 50773
50525: LD_INT 30
50527: DOUBLE
50528: EQUAL
50529: IFTRUE 50533
50531: GO 50558
50533: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50534: LD_ADDR_VAR 0 3
50538: PUSH
50539: LD_INT 20
50541: PPUSH
50542: LD_VAR 0 1
50546: PPUSH
50547: CALL_OW 321
50551: PUSH
50552: LD_INT 2
50554: EQUAL
50555: ST_TO_ADDR
50556: GO 50773
50558: LD_INT 28
50560: DOUBLE
50561: EQUAL
50562: IFTRUE 50572
50564: LD_INT 21
50566: DOUBLE
50567: EQUAL
50568: IFTRUE 50572
50570: GO 50597
50572: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50573: LD_ADDR_VAR 0 3
50577: PUSH
50578: LD_INT 21
50580: PPUSH
50581: LD_VAR 0 1
50585: PPUSH
50586: CALL_OW 321
50590: PUSH
50591: LD_INT 2
50593: EQUAL
50594: ST_TO_ADDR
50595: GO 50773
50597: LD_INT 16
50599: DOUBLE
50600: EQUAL
50601: IFTRUE 50605
50603: GO 50632
50605: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50606: LD_ADDR_VAR 0 3
50610: PUSH
50611: LD_EXP 45
50615: PPUSH
50616: LD_VAR 0 1
50620: PPUSH
50621: CALL_OW 321
50625: PUSH
50626: LD_INT 2
50628: EQUAL
50629: ST_TO_ADDR
50630: GO 50773
50632: LD_INT 19
50634: DOUBLE
50635: EQUAL
50636: IFTRUE 50646
50638: LD_INT 23
50640: DOUBLE
50641: EQUAL
50642: IFTRUE 50646
50644: GO 50673
50646: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50647: LD_ADDR_VAR 0 3
50651: PUSH
50652: LD_EXP 44
50656: PPUSH
50657: LD_VAR 0 1
50661: PPUSH
50662: CALL_OW 321
50666: PUSH
50667: LD_INT 2
50669: EQUAL
50670: ST_TO_ADDR
50671: GO 50773
50673: LD_INT 17
50675: DOUBLE
50676: EQUAL
50677: IFTRUE 50681
50679: GO 50706
50681: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50682: LD_ADDR_VAR 0 3
50686: PUSH
50687: LD_INT 39
50689: PPUSH
50690: LD_VAR 0 1
50694: PPUSH
50695: CALL_OW 321
50699: PUSH
50700: LD_INT 2
50702: EQUAL
50703: ST_TO_ADDR
50704: GO 50773
50706: LD_INT 18
50708: DOUBLE
50709: EQUAL
50710: IFTRUE 50714
50712: GO 50739
50714: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50715: LD_ADDR_VAR 0 3
50719: PUSH
50720: LD_INT 40
50722: PPUSH
50723: LD_VAR 0 1
50727: PPUSH
50728: CALL_OW 321
50732: PUSH
50733: LD_INT 2
50735: EQUAL
50736: ST_TO_ADDR
50737: GO 50773
50739: LD_INT 27
50741: DOUBLE
50742: EQUAL
50743: IFTRUE 50747
50745: GO 50772
50747: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50748: LD_ADDR_VAR 0 3
50752: PUSH
50753: LD_INT 35
50755: PPUSH
50756: LD_VAR 0 1
50760: PPUSH
50761: CALL_OW 321
50765: PUSH
50766: LD_INT 2
50768: EQUAL
50769: ST_TO_ADDR
50770: GO 50773
50772: POP
// end ;
50773: LD_VAR 0 3
50777: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50778: LD_INT 0
50780: PPUSH
50781: PPUSH
50782: PPUSH
50783: PPUSH
50784: PPUSH
50785: PPUSH
50786: PPUSH
50787: PPUSH
50788: PPUSH
50789: PPUSH
50790: PPUSH
// result := false ;
50791: LD_ADDR_VAR 0 6
50795: PUSH
50796: LD_INT 0
50798: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50799: LD_VAR 0 1
50803: NOT
50804: PUSH
50805: LD_VAR 0 1
50809: PPUSH
50810: CALL_OW 266
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: IN
50825: NOT
50826: OR
50827: PUSH
50828: LD_VAR 0 2
50832: NOT
50833: OR
50834: PUSH
50835: LD_VAR 0 5
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: LD_INT 3
50851: PUSH
50852: LD_INT 4
50854: PUSH
50855: LD_INT 5
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: IN
50866: NOT
50867: OR
50868: PUSH
50869: LD_VAR 0 3
50873: PPUSH
50874: LD_VAR 0 4
50878: PPUSH
50879: CALL_OW 488
50883: NOT
50884: OR
50885: IFFALSE 50889
// exit ;
50887: GO 51625
// side := GetSide ( depot ) ;
50889: LD_ADDR_VAR 0 9
50893: PUSH
50894: LD_VAR 0 1
50898: PPUSH
50899: CALL_OW 255
50903: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50904: LD_VAR 0 9
50908: PPUSH
50909: LD_VAR 0 2
50913: PPUSH
50914: CALL 50398 0 2
50918: NOT
50919: IFFALSE 50923
// exit ;
50921: GO 51625
// pom := GetBase ( depot ) ;
50923: LD_ADDR_VAR 0 10
50927: PUSH
50928: LD_VAR 0 1
50932: PPUSH
50933: CALL_OW 274
50937: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50938: LD_ADDR_VAR 0 11
50942: PUSH
50943: LD_VAR 0 2
50947: PPUSH
50948: LD_VAR 0 1
50952: PPUSH
50953: CALL_OW 248
50957: PPUSH
50958: CALL_OW 450
50962: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50963: LD_VAR 0 10
50967: PPUSH
50968: LD_INT 1
50970: PPUSH
50971: CALL_OW 275
50975: PUSH
50976: LD_VAR 0 11
50980: PUSH
50981: LD_INT 1
50983: ARRAY
50984: GREATEREQUAL
50985: PUSH
50986: LD_VAR 0 10
50990: PPUSH
50991: LD_INT 2
50993: PPUSH
50994: CALL_OW 275
50998: PUSH
50999: LD_VAR 0 11
51003: PUSH
51004: LD_INT 2
51006: ARRAY
51007: GREATEREQUAL
51008: AND
51009: PUSH
51010: LD_VAR 0 10
51014: PPUSH
51015: LD_INT 3
51017: PPUSH
51018: CALL_OW 275
51022: PUSH
51023: LD_VAR 0 11
51027: PUSH
51028: LD_INT 3
51030: ARRAY
51031: GREATEREQUAL
51032: AND
51033: NOT
51034: IFFALSE 51038
// exit ;
51036: GO 51625
// if GetBType ( depot ) = b_depot then
51038: LD_VAR 0 1
51042: PPUSH
51043: CALL_OW 266
51047: PUSH
51048: LD_INT 0
51050: EQUAL
51051: IFFALSE 51063
// dist := 28 else
51053: LD_ADDR_VAR 0 14
51057: PUSH
51058: LD_INT 28
51060: ST_TO_ADDR
51061: GO 51071
// dist := 36 ;
51063: LD_ADDR_VAR 0 14
51067: PUSH
51068: LD_INT 36
51070: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51071: LD_VAR 0 1
51075: PPUSH
51076: LD_VAR 0 3
51080: PPUSH
51081: LD_VAR 0 4
51085: PPUSH
51086: CALL_OW 297
51090: PUSH
51091: LD_VAR 0 14
51095: GREATER
51096: IFFALSE 51100
// exit ;
51098: GO 51625
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51100: LD_ADDR_VAR 0 12
51104: PUSH
51105: LD_VAR 0 2
51109: PPUSH
51110: LD_VAR 0 3
51114: PPUSH
51115: LD_VAR 0 4
51119: PPUSH
51120: LD_VAR 0 5
51124: PPUSH
51125: LD_VAR 0 1
51129: PPUSH
51130: CALL_OW 248
51134: PPUSH
51135: LD_INT 0
51137: PPUSH
51138: CALL 51630 0 6
51142: ST_TO_ADDR
// if not hexes then
51143: LD_VAR 0 12
51147: NOT
51148: IFFALSE 51152
// exit ;
51150: GO 51625
// hex := GetHexInfo ( x , y ) ;
51152: LD_ADDR_VAR 0 15
51156: PUSH
51157: LD_VAR 0 3
51161: PPUSH
51162: LD_VAR 0 4
51166: PPUSH
51167: CALL_OW 546
51171: ST_TO_ADDR
// if hex [ 1 ] then
51172: LD_VAR 0 15
51176: PUSH
51177: LD_INT 1
51179: ARRAY
51180: IFFALSE 51184
// exit ;
51182: GO 51625
// height := hex [ 2 ] ;
51184: LD_ADDR_VAR 0 13
51188: PUSH
51189: LD_VAR 0 15
51193: PUSH
51194: LD_INT 2
51196: ARRAY
51197: ST_TO_ADDR
// for i = 1 to hexes do
51198: LD_ADDR_VAR 0 7
51202: PUSH
51203: DOUBLE
51204: LD_INT 1
51206: DEC
51207: ST_TO_ADDR
51208: LD_VAR 0 12
51212: PUSH
51213: FOR_TO
51214: IFFALSE 51544
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51216: LD_VAR 0 12
51220: PUSH
51221: LD_VAR 0 7
51225: ARRAY
51226: PUSH
51227: LD_INT 1
51229: ARRAY
51230: PPUSH
51231: LD_VAR 0 12
51235: PUSH
51236: LD_VAR 0 7
51240: ARRAY
51241: PUSH
51242: LD_INT 2
51244: ARRAY
51245: PPUSH
51246: CALL_OW 488
51250: NOT
51251: PUSH
51252: LD_VAR 0 12
51256: PUSH
51257: LD_VAR 0 7
51261: ARRAY
51262: PUSH
51263: LD_INT 1
51265: ARRAY
51266: PPUSH
51267: LD_VAR 0 12
51271: PUSH
51272: LD_VAR 0 7
51276: ARRAY
51277: PUSH
51278: LD_INT 2
51280: ARRAY
51281: PPUSH
51282: CALL_OW 428
51286: PUSH
51287: LD_INT 0
51289: GREATER
51290: OR
51291: PUSH
51292: LD_VAR 0 12
51296: PUSH
51297: LD_VAR 0 7
51301: ARRAY
51302: PUSH
51303: LD_INT 1
51305: ARRAY
51306: PPUSH
51307: LD_VAR 0 12
51311: PUSH
51312: LD_VAR 0 7
51316: ARRAY
51317: PUSH
51318: LD_INT 2
51320: ARRAY
51321: PPUSH
51322: CALL_OW 351
51326: OR
51327: IFFALSE 51333
// exit ;
51329: POP
51330: POP
51331: GO 51625
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51333: LD_ADDR_VAR 0 8
51337: PUSH
51338: LD_VAR 0 12
51342: PUSH
51343: LD_VAR 0 7
51347: ARRAY
51348: PUSH
51349: LD_INT 1
51351: ARRAY
51352: PPUSH
51353: LD_VAR 0 12
51357: PUSH
51358: LD_VAR 0 7
51362: ARRAY
51363: PUSH
51364: LD_INT 2
51366: ARRAY
51367: PPUSH
51368: CALL_OW 546
51372: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51373: LD_VAR 0 8
51377: PUSH
51378: LD_INT 1
51380: ARRAY
51381: PUSH
51382: LD_VAR 0 8
51386: PUSH
51387: LD_INT 2
51389: ARRAY
51390: PUSH
51391: LD_VAR 0 13
51395: PUSH
51396: LD_INT 2
51398: PLUS
51399: GREATER
51400: OR
51401: PUSH
51402: LD_VAR 0 8
51406: PUSH
51407: LD_INT 2
51409: ARRAY
51410: PUSH
51411: LD_VAR 0 13
51415: PUSH
51416: LD_INT 2
51418: MINUS
51419: LESS
51420: OR
51421: PUSH
51422: LD_VAR 0 8
51426: PUSH
51427: LD_INT 3
51429: ARRAY
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: LD_INT 8
51436: PUSH
51437: LD_INT 9
51439: PUSH
51440: LD_INT 10
51442: PUSH
51443: LD_INT 11
51445: PUSH
51446: LD_INT 12
51448: PUSH
51449: LD_INT 13
51451: PUSH
51452: LD_INT 16
51454: PUSH
51455: LD_INT 17
51457: PUSH
51458: LD_INT 18
51460: PUSH
51461: LD_INT 19
51463: PUSH
51464: LD_INT 20
51466: PUSH
51467: LD_INT 21
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: IN
51485: NOT
51486: OR
51487: PUSH
51488: LD_VAR 0 8
51492: PUSH
51493: LD_INT 5
51495: ARRAY
51496: NOT
51497: OR
51498: PUSH
51499: LD_VAR 0 8
51503: PUSH
51504: LD_INT 6
51506: ARRAY
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: LD_INT 2
51513: PUSH
51514: LD_INT 7
51516: PUSH
51517: LD_INT 9
51519: PUSH
51520: LD_INT 10
51522: PUSH
51523: LD_INT 11
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: IN
51534: NOT
51535: OR
51536: IFFALSE 51542
// exit ;
51538: POP
51539: POP
51540: GO 51625
// end ;
51542: GO 51213
51544: POP
51545: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51546: LD_VAR 0 9
51550: PPUSH
51551: LD_VAR 0 3
51555: PPUSH
51556: LD_VAR 0 4
51560: PPUSH
51561: LD_INT 20
51563: PPUSH
51564: CALL 43571 0 4
51568: PUSH
51569: LD_INT 4
51571: ARRAY
51572: IFFALSE 51576
// exit ;
51574: GO 51625
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51576: LD_VAR 0 2
51580: PUSH
51581: LD_INT 29
51583: PUSH
51584: LD_INT 30
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: IN
51591: PUSH
51592: LD_VAR 0 3
51596: PPUSH
51597: LD_VAR 0 4
51601: PPUSH
51602: LD_VAR 0 9
51606: PPUSH
51607: CALL_OW 440
51611: NOT
51612: AND
51613: IFFALSE 51617
// exit ;
51615: GO 51625
// result := true ;
51617: LD_ADDR_VAR 0 6
51621: PUSH
51622: LD_INT 1
51624: ST_TO_ADDR
// end ;
51625: LD_VAR 0 6
51629: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51630: LD_INT 0
51632: PPUSH
51633: PPUSH
51634: PPUSH
51635: PPUSH
51636: PPUSH
51637: PPUSH
51638: PPUSH
51639: PPUSH
51640: PPUSH
51641: PPUSH
51642: PPUSH
51643: PPUSH
51644: PPUSH
51645: PPUSH
51646: PPUSH
51647: PPUSH
51648: PPUSH
51649: PPUSH
51650: PPUSH
51651: PPUSH
51652: PPUSH
51653: PPUSH
51654: PPUSH
51655: PPUSH
51656: PPUSH
51657: PPUSH
51658: PPUSH
51659: PPUSH
51660: PPUSH
51661: PPUSH
51662: PPUSH
51663: PPUSH
51664: PPUSH
51665: PPUSH
51666: PPUSH
51667: PPUSH
51668: PPUSH
51669: PPUSH
51670: PPUSH
51671: PPUSH
51672: PPUSH
51673: PPUSH
51674: PPUSH
51675: PPUSH
51676: PPUSH
51677: PPUSH
51678: PPUSH
51679: PPUSH
51680: PPUSH
51681: PPUSH
51682: PPUSH
51683: PPUSH
51684: PPUSH
51685: PPUSH
51686: PPUSH
51687: PPUSH
51688: PPUSH
51689: PPUSH
// result = [ ] ;
51690: LD_ADDR_VAR 0 7
51694: PUSH
51695: EMPTY
51696: ST_TO_ADDR
// temp_list = [ ] ;
51697: LD_ADDR_VAR 0 9
51701: PUSH
51702: EMPTY
51703: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51704: LD_VAR 0 4
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: LD_INT 4
51723: PUSH
51724: LD_INT 5
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: IN
51735: NOT
51736: PUSH
51737: LD_VAR 0 1
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: IN
51752: PUSH
51753: LD_VAR 0 5
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: LD_INT 3
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: LIST
51771: IN
51772: NOT
51773: AND
51774: OR
51775: IFFALSE 51779
// exit ;
51777: GO 70170
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51779: LD_VAR 0 1
51783: PUSH
51784: LD_INT 6
51786: PUSH
51787: LD_INT 7
51789: PUSH
51790: LD_INT 8
51792: PUSH
51793: LD_INT 13
51795: PUSH
51796: LD_INT 12
51798: PUSH
51799: LD_INT 15
51801: PUSH
51802: LD_INT 11
51804: PUSH
51805: LD_INT 14
51807: PUSH
51808: LD_INT 10
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: IN
51822: IFFALSE 51832
// btype = b_lab ;
51824: LD_ADDR_VAR 0 1
51828: PUSH
51829: LD_INT 6
51831: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51832: LD_VAR 0 6
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: LIST
51850: IN
51851: NOT
51852: PUSH
51853: LD_VAR 0 1
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: LD_INT 2
51866: PUSH
51867: LD_INT 3
51869: PUSH
51870: LD_INT 6
51872: PUSH
51873: LD_INT 36
51875: PUSH
51876: LD_INT 4
51878: PUSH
51879: LD_INT 5
51881: PUSH
51882: LD_INT 31
51884: PUSH
51885: LD_INT 32
51887: PUSH
51888: LD_INT 33
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: IN
51904: NOT
51905: PUSH
51906: LD_VAR 0 6
51910: PUSH
51911: LD_INT 1
51913: EQUAL
51914: AND
51915: OR
51916: PUSH
51917: LD_VAR 0 1
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: LD_INT 3
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: IN
51932: NOT
51933: PUSH
51934: LD_VAR 0 6
51938: PUSH
51939: LD_INT 2
51941: EQUAL
51942: AND
51943: OR
51944: IFFALSE 51954
// mode = 0 ;
51946: LD_ADDR_VAR 0 6
51950: PUSH
51951: LD_INT 0
51953: ST_TO_ADDR
// case mode of 0 :
51954: LD_VAR 0 6
51958: PUSH
51959: LD_INT 0
51961: DOUBLE
51962: EQUAL
51963: IFTRUE 51967
51965: GO 63420
51967: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51968: LD_ADDR_VAR 0 11
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: LD_INT 0
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: LD_INT 1
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: LD_INT 2
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: LD_INT 2
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: LD_INT 2
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: LD_INT 3
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: LD_INT 3
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52161: LD_ADDR_VAR 0 12
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: LD_INT 1
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: NEG
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 1
52230: NEG
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 2
52284: NEG
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 2
52295: NEG
52296: PUSH
52297: LD_INT 1
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 2
52307: NEG
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 3
52318: NEG
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 3
52329: NEG
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52357: LD_ADDR_VAR 0 13
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: LD_INT 2
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: LD_INT 2
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: NEG
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 2
52492: NEG
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 2
52504: NEG
52505: PUSH
52506: LD_INT 3
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 3
52516: NEG
52517: PUSH
52518: LD_INT 2
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 3
52528: NEG
52529: PUSH
52530: LD_INT 3
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52556: LD_ADDR_VAR 0 14
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: LD_INT 0
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: LD_INT 1
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: NEG
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: LD_INT 2
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: LD_INT 2
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: NEG
52703: PUSH
52704: LD_INT 3
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: LD_INT 3
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52752: LD_ADDR_VAR 0 15
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: NEG
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: NEG
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 2
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 3
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 3
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52945: LD_ADDR_VAR 0 16
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: LD_INT 2
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 2
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 2
53068: NEG
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 2
53080: NEG
53081: PUSH
53082: LD_INT 2
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 3
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 3
53102: PUSH
53103: LD_INT 3
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: LD_INT 3
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53138: LD_ADDR_VAR 0 17
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: LD_INT 2
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 2
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 2
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 2
53314: NEG
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 2
53325: NEG
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53368: LD_ADDR_VAR 0 18
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: LD_INT 2
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: LD_INT 2
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: LD_INT 1
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 2
53503: PUSH
53504: LD_INT 2
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: LD_INT 2
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 2
53544: NEG
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 2
53555: NEG
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 2
53567: NEG
53568: PUSH
53569: LD_INT 2
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53598: LD_ADDR_VAR 0 19
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 1
53656: NEG
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: LD_INT 2
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: LD_INT 2
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 2
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 2
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 2
53733: PUSH
53734: LD_INT 2
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 1
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 2
53774: NEG
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 2
53785: NEG
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 2
53797: NEG
53798: PUSH
53799: LD_INT 2
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53828: LD_ADDR_VAR 0 20
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: NEG
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: LD_INT 2
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: LD_INT 2
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 2
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 2
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: LD_INT 2
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: LD_INT 2
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 2
54015: NEG
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 2
54027: NEG
54028: PUSH
54029: LD_INT 2
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54058: LD_ADDR_VAR 0 21
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: LD_INT 1
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: LD_INT 2
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: LD_INT 2
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 2
54193: PUSH
54194: LD_INT 2
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: LD_INT 2
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 2
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 2
54234: NEG
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 2
54245: NEG
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 2
54257: NEG
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54288: LD_ADDR_VAR 0 22
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: LD_INT 2
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: LD_INT 2
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 2
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 2
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: LD_INT 2
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: LD_INT 2
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: NEG
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 2
54487: NEG
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54518: LD_ADDR_VAR 0 23
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 2
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 2
54653: PUSH
54654: LD_INT 2
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: LD_INT 2
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: LD_INT 2
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 2
54705: NEG
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 2
54717: NEG
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: NEG
54730: PUSH
54731: LD_INT 3
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: LD_INT 3
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: LD_INT 2
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 2
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54798: LD_ADDR_VAR 0 24
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 2
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: LD_INT 2
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: LD_INT 2
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 2
54974: NEG
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: NEG
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 2
54997: NEG
54998: PUSH
54999: LD_INT 2
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: PUSH
55010: LD_INT 2
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 2
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 3
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 3
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55074: LD_ADDR_VAR 0 25
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: LD_INT 2
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 2
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 2
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 2
55250: NEG
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 2
55273: NEG
55274: PUSH
55275: LD_INT 2
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 3
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 3
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: LD_INT 3
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: LD_INT 3
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55348: LD_ADDR_VAR 0 26
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: LD_INT 2
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: LD_INT 1
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 2
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: LD_INT 2
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 2
55524: NEG
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: NEG
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: NEG
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 2
55559: PUSH
55560: LD_INT 3
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: LD_INT 3
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: LD_INT 2
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 2
55590: NEG
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55624: LD_ADDR_VAR 0 27
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: LD_INT 2
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 2
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 2
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: LD_INT 2
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: NEG
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 2
55811: NEG
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 2
55823: NEG
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: NEG
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 3
55857: NEG
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 3
55869: NEG
55870: PUSH
55871: LD_INT 2
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55904: LD_ADDR_VAR 0 28
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 2
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 2
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 2
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 2
56039: PUSH
56040: LD_INT 2
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: LD_INT 2
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: LD_INT 2
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: LD_INT 1
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 2
56080: NEG
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: LD_INT 2
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 2
56115: NEG
56116: PUSH
56117: LD_INT 3
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: LD_INT 3
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 3
56139: NEG
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 3
56151: NEG
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56186: LD_ADDR_VAR 0 29
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 1
56267: NEG
56268: PUSH
56269: LD_INT 2
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: LD_INT 2
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: LD_INT 2
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 2
56352: NEG
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 2
56364: NEG
56365: PUSH
56366: LD_INT 2
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 2
56376: NEG
56377: PUSH
56378: LD_INT 3
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 2
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 3
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: LD_INT 3
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 3
56430: NEG
56431: PUSH
56432: LD_INT 2
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56465: LD_ADDR_VAR 0 30
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 1
56546: NEG
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: LD_INT 2
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 2
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 2
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 2
56600: PUSH
56601: LD_INT 2
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: LD_INT 2
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 2
56631: NEG
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 2
56642: NEG
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: LD_INT 3
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: LD_INT 2
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 3
56677: PUSH
56678: LD_INT 2
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 2
56687: PUSH
56688: LD_INT 3
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 2
56697: NEG
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 3
56708: NEG
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56743: LD_ADDR_VAR 0 31
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 1
56824: NEG
56825: PUSH
56826: LD_INT 2
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 2
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 2
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 2
56867: PUSH
56868: LD_INT 2
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: LD_INT 2
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: LD_INT 2
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: NEG
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 2
56908: NEG
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: LD_INT 2
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 2
56932: NEG
56933: PUSH
56934: LD_INT 3
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 2
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 3
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: LD_INT 3
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: LD_INT 2
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 3
56986: NEG
56987: PUSH
56988: LD_INT 2
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57021: LD_ADDR_VAR 0 32
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: LD_INT 2
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: LD_INT 2
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 2
57146: PUSH
57147: LD_INT 2
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: LD_INT 2
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 2
57187: NEG
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 2
57198: NEG
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: LD_INT 3
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: LD_INT 2
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 3
57233: PUSH
57234: LD_INT 2
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: LD_INT 3
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 2
57253: NEG
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 3
57264: NEG
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57299: LD_ADDR_VAR 0 33
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: LD_INT 2
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 2
57403: PUSH
57404: LD_INT 0
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: LD_INT 1
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 2
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 2
57454: NEG
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 2
57465: NEG
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 2
57477: NEG
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 2
57489: NEG
57490: PUSH
57491: LD_INT 3
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 2
57501: PUSH
57502: LD_INT 1
57504: NEG
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 3
57512: PUSH
57513: LD_INT 1
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: LD_INT 3
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: LD_INT 2
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 3
57543: NEG
57544: PUSH
57545: LD_INT 2
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57578: LD_ADDR_VAR 0 34
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 0
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 1
57647: NEG
57648: PUSH
57649: LD_INT 1
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 1
57659: NEG
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: LD_INT 2
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 2
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 2
57703: PUSH
57704: LD_INT 2
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: LD_INT 2
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 2
57757: NEG
57758: PUSH
57759: LD_INT 2
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: LD_INT 3
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: LD_INT 2
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 3
57792: PUSH
57793: LD_INT 2
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 2
57802: PUSH
57803: LD_INT 3
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 2
57812: NEG
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 3
57823: NEG
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57858: LD_ADDR_VAR 0 35
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 0
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 1
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: LD_INT 1
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 2
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 2
57949: NEG
57950: PUSH
57951: LD_INT 1
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57970: LD_ADDR_VAR 0 36
57974: PUSH
57975: LD_INT 0
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: LD_INT 2
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58082: LD_ADDR_VAR 0 37
58086: PUSH
58087: LD_INT 0
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: NEG
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58194: LD_ADDR_VAR 0 38
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: NEG
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 2
58285: NEG
58286: PUSH
58287: LD_INT 1
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58306: LD_ADDR_VAR 0 39
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 1
58364: NEG
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 1
58375: NEG
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: LD_INT 2
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 1
58399: PUSH
58400: LD_INT 2
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58418: LD_ADDR_VAR 0 40
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 1
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 1
58476: NEG
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58530: LD_ADDR_VAR 0 41
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: LD_INT 1
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 1
58568: PUSH
58569: LD_INT 1
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: NEG
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: LD_INT 2
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 2
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 2
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 2
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: LD_INT 2
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 2
58685: NEG
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 2
58696: NEG
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: NEG
58709: PUSH
58710: LD_INT 2
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 2
58720: NEG
58721: PUSH
58722: LD_INT 3
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 2
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 3
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 3
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 3
58763: PUSH
58764: LD_INT 2
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 3
58773: PUSH
58774: LD_INT 3
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 2
58783: PUSH
58784: LD_INT 3
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 2
58793: NEG
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 3
58804: NEG
58805: PUSH
58806: LD_INT 0
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 3
58815: NEG
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 3
58827: NEG
58828: PUSH
58829: LD_INT 2
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 3
58839: NEG
58840: PUSH
58841: LD_INT 3
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58880: LD_ADDR_VAR 0 42
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: LD_INT 1
58900: NEG
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 0
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 1
58938: NEG
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: NEG
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: LD_INT 1
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 2
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 2
59005: PUSH
59006: LD_INT 2
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: PUSH
59016: LD_INT 2
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: LD_INT 2
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: NEG
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: LD_INT 1
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: NEG
59059: PUSH
59060: LD_INT 2
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 2
59070: NEG
59071: PUSH
59072: LD_INT 3
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: LD_INT 3
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: LD_INT 3
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: LD_INT 2
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 3
59116: PUSH
59117: LD_INT 2
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 3
59126: PUSH
59127: LD_INT 3
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: LD_INT 3
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: LD_INT 3
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 0
59156: PUSH
59157: LD_INT 3
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 1
59166: NEG
59167: PUSH
59168: LD_INT 2
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 3
59177: NEG
59178: PUSH
59179: LD_INT 2
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 3
59189: NEG
59190: PUSH
59191: LD_INT 3
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59230: LD_ADDR_VAR 0 43
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 1
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: LD_INT 1
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 1
59311: NEG
59312: PUSH
59313: LD_INT 2
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: LD_INT 2
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 2
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: PUSH
59366: LD_INT 2
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: LD_INT 2
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: LD_INT 1
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 2
59396: NEG
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 2
59407: NEG
59408: PUSH
59409: LD_INT 1
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: LD_INT 3
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: LD_INT 3
59434: NEG
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: LD_INT 2
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 2
59453: PUSH
59454: LD_INT 1
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 3
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 3
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: LD_INT 3
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: LD_INT 3
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 1
59504: NEG
59505: PUSH
59506: LD_INT 2
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 2
59515: NEG
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 3
59526: NEG
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 3
59537: NEG
59538: PUSH
59539: LD_INT 1
59541: NEG
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59578: LD_ADDR_VAR 0 44
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 1
59636: NEG
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: NEG
59648: PUSH
59649: LD_INT 1
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: LD_INT 2
59663: NEG
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 1
59671: PUSH
59672: LD_INT 1
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 2
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 2
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 2
59702: PUSH
59703: LD_INT 2
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 1
59722: NEG
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 2
59733: NEG
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 2
59744: NEG
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 2
59756: NEG
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 2
59768: NEG
59769: PUSH
59770: LD_INT 3
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 2
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 3
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 3
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 3
59811: PUSH
59812: LD_INT 2
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 3
59821: PUSH
59822: LD_INT 3
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 2
59831: PUSH
59832: LD_INT 3
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 2
59841: NEG
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 3
59852: NEG
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 3
59863: NEG
59864: PUSH
59865: LD_INT 1
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 3
59875: NEG
59876: PUSH
59877: LD_INT 2
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 3
59887: NEG
59888: PUSH
59889: LD_INT 3
59891: NEG
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59928: LD_ADDR_VAR 0 45
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: LD_INT 1
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 1
59986: NEG
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: LD_INT 1
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: LD_INT 2
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: LD_INT 2
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 2
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 2
60053: PUSH
60054: LD_INT 2
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: PUSH
60064: LD_INT 2
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 0
60073: PUSH
60074: LD_INT 2
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: LD_INT 1
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 2
60094: NEG
60095: PUSH
60096: LD_INT 1
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 2
60106: NEG
60107: PUSH
60108: LD_INT 2
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 2
60118: NEG
60119: PUSH
60120: LD_INT 3
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 1
60130: NEG
60131: PUSH
60132: LD_INT 3
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: LD_INT 3
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 1
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 3
60164: PUSH
60165: LD_INT 2
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 3
60174: PUSH
60175: LD_INT 3
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: LD_INT 3
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: LD_INT 3
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 0
60204: PUSH
60205: LD_INT 3
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 1
60214: NEG
60215: PUSH
60216: LD_INT 2
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 3
60225: NEG
60226: PUSH
60227: LD_INT 2
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 3
60237: NEG
60238: PUSH
60239: LD_INT 3
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60278: LD_ADDR_VAR 0 46
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: LD_INT 1
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: LD_INT 0
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 1
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 1
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: NEG
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: NEG
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 1
60359: NEG
60360: PUSH
60361: LD_INT 2
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: LD_INT 2
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 1
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 2
60393: PUSH
60394: LD_INT 0
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 2
60403: PUSH
60404: LD_INT 1
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 1
60413: PUSH
60414: LD_INT 2
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 0
60423: PUSH
60424: LD_INT 2
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 1
60433: NEG
60434: PUSH
60435: LD_INT 1
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 2
60455: NEG
60456: PUSH
60457: LD_INT 1
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 1
60467: NEG
60468: PUSH
60469: LD_INT 3
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: LD_INT 3
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: PUSH
60491: LD_INT 2
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 2
60501: PUSH
60502: LD_INT 1
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 3
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 3
60522: PUSH
60523: LD_INT 1
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 1
60532: PUSH
60533: LD_INT 3
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: LD_INT 3
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: LD_INT 2
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 2
60563: NEG
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 3
60574: NEG
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 3
60585: NEG
60586: PUSH
60587: LD_INT 1
60589: NEG
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60626: LD_ADDR_VAR 0 47
60630: PUSH
60631: LD_INT 0
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: LD_INT 0
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: LD_INT 2
60711: NEG
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: LD_INT 2
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 1
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 2
60741: NEG
60742: PUSH
60743: LD_INT 1
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 2
60753: NEG
60754: PUSH
60755: LD_INT 2
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60777: LD_ADDR_VAR 0 48
60781: PUSH
60782: LD_INT 0
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 1
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 1
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 1
60835: NEG
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: NEG
60847: PUSH
60848: LD_INT 1
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 1
60858: NEG
60859: PUSH
60860: LD_INT 2
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: LD_INT 2
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: LD_INT 1
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 2
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 2
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60924: LD_ADDR_VAR 0 49
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 0
60941: PUSH
60942: LD_INT 1
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: LD_INT 0
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: LD_INT 1
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 1
60982: NEG
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: LD_INT 1
60997: NEG
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 1
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 2
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 2
61026: PUSH
61027: LD_INT 1
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 2
61036: PUSH
61037: LD_INT 2
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: LD_INT 2
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61068: LD_ADDR_VAR 0 50
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: LD_INT 1
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 1
61096: PUSH
61097: LD_INT 0
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: LD_INT 1
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 1
61126: NEG
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 1
61137: NEG
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 2
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 2
61159: PUSH
61160: LD_INT 2
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 1
61169: PUSH
61170: LD_INT 2
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: LD_INT 2
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 1
61189: NEG
61190: PUSH
61191: LD_INT 1
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61212: LD_ADDR_VAR 0 51
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 0
61229: PUSH
61230: LD_INT 1
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 1
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: LD_INT 1
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: LD_INT 1
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: LD_INT 0
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 1
61281: NEG
61282: PUSH
61283: LD_INT 1
61285: NEG
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 1
61293: PUSH
61294: LD_INT 2
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: LD_INT 2
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 1
61313: NEG
61314: PUSH
61315: LD_INT 1
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 2
61324: NEG
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 2
61335: NEG
61336: PUSH
61337: LD_INT 1
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61359: LD_ADDR_VAR 0 52
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: LD_INT 0
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: LD_INT 1
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 1
61387: PUSH
61388: LD_INT 0
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: LD_INT 1
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: LD_INT 1
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 1
61417: NEG
61418: PUSH
61419: LD_INT 0
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 1
61428: NEG
61429: PUSH
61430: LD_INT 1
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 1
61440: NEG
61441: PUSH
61442: LD_INT 2
61444: NEG
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 1
61452: NEG
61453: PUSH
61454: LD_INT 1
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 2
61463: NEG
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 2
61474: NEG
61475: PUSH
61476: LD_INT 1
61478: NEG
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 2
61486: NEG
61487: PUSH
61488: LD_INT 2
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61510: LD_ADDR_VAR 0 53
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: LD_INT 0
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: LD_INT 1
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: LD_INT 0
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 1
61548: PUSH
61549: LD_INT 1
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: LD_INT 1
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 1
61568: NEG
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: NEG
61580: PUSH
61581: LD_INT 1
61583: NEG
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 1
61591: NEG
61592: PUSH
61593: LD_INT 2
61595: NEG
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 0
61603: PUSH
61604: LD_INT 2
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 1
61614: PUSH
61615: LD_INT 1
61617: NEG
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 2
61625: PUSH
61626: LD_INT 0
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 2
61635: PUSH
61636: LD_INT 1
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 2
61645: PUSH
61646: LD_INT 2
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 1
61655: PUSH
61656: LD_INT 2
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: LD_INT 2
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 1
61675: NEG
61676: PUSH
61677: LD_INT 1
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 2
61686: NEG
61687: PUSH
61688: LD_INT 0
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 2
61697: NEG
61698: PUSH
61699: LD_INT 1
61701: NEG
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 2
61709: NEG
61710: PUSH
61711: LD_INT 2
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61740: LD_ADDR_VAR 0 54
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 0
61757: PUSH
61758: LD_INT 1
61760: NEG
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: LD_INT 0
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 1
61778: PUSH
61779: LD_INT 1
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: LD_INT 1
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 1
61798: NEG
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 1
61809: NEG
61810: PUSH
61811: LD_INT 1
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: LD_INT 2
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 0
61833: PUSH
61834: LD_INT 2
61836: NEG
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 1
61844: PUSH
61845: LD_INT 1
61847: NEG
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 2
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 2
61865: PUSH
61866: LD_INT 1
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 2
61875: PUSH
61876: LD_INT 2
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: LD_INT 2
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 0
61895: PUSH
61896: LD_INT 2
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 1
61905: NEG
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 2
61916: NEG
61917: PUSH
61918: LD_INT 0
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 2
61927: NEG
61928: PUSH
61929: LD_INT 1
61931: NEG
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 2
61939: NEG
61940: PUSH
61941: LD_INT 2
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61970: LD_ADDR_VAR 0 55
61974: PUSH
61975: LD_INT 0
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 0
61987: PUSH
61988: LD_INT 1
61990: NEG
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: LD_INT 0
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 1
62008: PUSH
62009: LD_INT 1
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 0
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 1
62028: NEG
62029: PUSH
62030: LD_INT 0
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 1
62039: NEG
62040: PUSH
62041: LD_INT 1
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: LD_INT 2
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 0
62063: PUSH
62064: LD_INT 2
62066: NEG
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 1
62074: PUSH
62075: LD_INT 1
62077: NEG
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 2
62085: PUSH
62086: LD_INT 0
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 2
62095: PUSH
62096: LD_INT 1
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 2
62105: PUSH
62106: LD_INT 2
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 1
62115: PUSH
62116: LD_INT 2
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: LD_INT 2
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 1
62135: NEG
62136: PUSH
62137: LD_INT 1
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 2
62146: NEG
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 2
62157: NEG
62158: PUSH
62159: LD_INT 1
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 2
62169: NEG
62170: PUSH
62171: LD_INT 2
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62200: LD_ADDR_VAR 0 56
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: LD_INT 1
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 1
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: LD_INT 1
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 0
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 1
62258: NEG
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 1
62269: NEG
62270: PUSH
62271: LD_INT 1
62273: NEG
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 1
62281: NEG
62282: PUSH
62283: LD_INT 2
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: LD_INT 2
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: PUSH
62305: LD_INT 1
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 2
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 2
62325: PUSH
62326: LD_INT 1
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 2
62335: PUSH
62336: LD_INT 2
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 1
62345: PUSH
62346: LD_INT 2
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 0
62355: PUSH
62356: LD_INT 2
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 1
62365: NEG
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 2
62376: NEG
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 2
62387: NEG
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 2
62399: NEG
62400: PUSH
62401: LD_INT 2
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62430: LD_ADDR_VAR 0 57
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 0
62447: PUSH
62448: LD_INT 1
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 1
62458: PUSH
62459: LD_INT 0
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 1
62468: PUSH
62469: LD_INT 1
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: LD_INT 1
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 1
62488: NEG
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 1
62499: NEG
62500: PUSH
62501: LD_INT 1
62503: NEG
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 1
62511: NEG
62512: PUSH
62513: LD_INT 2
62515: NEG
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: LD_INT 2
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 1
62534: PUSH
62535: LD_INT 1
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 2
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 2
62555: PUSH
62556: LD_INT 1
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 2
62565: PUSH
62566: LD_INT 2
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 1
62575: PUSH
62576: LD_INT 2
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 0
62585: PUSH
62586: LD_INT 2
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 1
62595: NEG
62596: PUSH
62597: LD_INT 1
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 2
62606: NEG
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 2
62617: NEG
62618: PUSH
62619: LD_INT 1
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 2
62629: NEG
62630: PUSH
62631: LD_INT 2
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62660: LD_ADDR_VAR 0 58
62664: PUSH
62665: LD_INT 0
62667: PUSH
62668: LD_INT 0
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 0
62677: PUSH
62678: LD_INT 1
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 1
62688: PUSH
62689: LD_INT 0
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 1
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: LD_INT 1
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 1
62718: NEG
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 1
62729: NEG
62730: PUSH
62731: LD_INT 1
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: LD_INT 2
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 0
62753: PUSH
62754: LD_INT 2
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 1
62764: PUSH
62765: LD_INT 1
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 2
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 2
62785: PUSH
62786: LD_INT 1
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 2
62795: PUSH
62796: LD_INT 2
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 1
62805: PUSH
62806: LD_INT 2
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 0
62815: PUSH
62816: LD_INT 2
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 1
62825: NEG
62826: PUSH
62827: LD_INT 1
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 2
62836: NEG
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 2
62847: NEG
62848: PUSH
62849: LD_INT 1
62851: NEG
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 2
62859: NEG
62860: PUSH
62861: LD_INT 2
62863: NEG
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62890: LD_ADDR_VAR 0 59
62894: PUSH
62895: LD_INT 0
62897: PUSH
62898: LD_INT 0
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 0
62907: PUSH
62908: LD_INT 1
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 1
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 1
62928: PUSH
62929: LD_INT 1
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: LD_INT 1
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 1
62948: NEG
62949: PUSH
62950: LD_INT 0
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 1
62959: NEG
62960: PUSH
62961: LD_INT 1
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62978: LD_ADDR_VAR 0 60
62982: PUSH
62983: LD_INT 0
62985: PUSH
62986: LD_INT 0
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: LD_INT 1
62998: NEG
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 1
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: PUSH
63017: LD_INT 1
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 0
63026: PUSH
63027: LD_INT 1
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 1
63036: NEG
63037: PUSH
63038: LD_INT 0
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 1
63047: NEG
63048: PUSH
63049: LD_INT 1
63051: NEG
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63066: LD_ADDR_VAR 0 61
63070: PUSH
63071: LD_INT 0
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: LD_INT 1
63086: NEG
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 1
63094: PUSH
63095: LD_INT 0
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 1
63104: PUSH
63105: LD_INT 1
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: LD_INT 1
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 1
63124: NEG
63125: PUSH
63126: LD_INT 0
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 1
63135: NEG
63136: PUSH
63137: LD_INT 1
63139: NEG
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63154: LD_ADDR_VAR 0 62
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: LD_INT 0
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: LD_INT 1
63174: NEG
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 1
63192: PUSH
63193: LD_INT 1
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: LD_INT 1
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 1
63212: NEG
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: LD_INT 1
63227: NEG
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63242: LD_ADDR_VAR 0 63
63246: PUSH
63247: LD_INT 0
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: LD_INT 1
63262: NEG
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 1
63270: PUSH
63271: LD_INT 0
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 1
63280: PUSH
63281: LD_INT 1
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: LD_INT 1
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 1
63300: NEG
63301: PUSH
63302: LD_INT 0
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 1
63311: NEG
63312: PUSH
63313: LD_INT 1
63315: NEG
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63330: LD_ADDR_VAR 0 64
63334: PUSH
63335: LD_INT 0
63337: PUSH
63338: LD_INT 0
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 0
63347: PUSH
63348: LD_INT 1
63350: NEG
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 1
63358: PUSH
63359: LD_INT 0
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 1
63368: PUSH
63369: LD_INT 1
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 0
63378: PUSH
63379: LD_INT 1
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 1
63388: NEG
63389: PUSH
63390: LD_INT 0
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 1
63399: NEG
63400: PUSH
63401: LD_INT 1
63403: NEG
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: ST_TO_ADDR
// end ; 1 :
63418: GO 69315
63420: LD_INT 1
63422: DOUBLE
63423: EQUAL
63424: IFTRUE 63428
63426: GO 66051
63428: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63429: LD_ADDR_VAR 0 11
63433: PUSH
63434: LD_INT 1
63436: NEG
63437: PUSH
63438: LD_INT 3
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 0
63448: PUSH
63449: LD_INT 3
63451: NEG
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 1
63459: PUSH
63460: LD_INT 2
63462: NEG
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: LIST
63472: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63473: LD_ADDR_VAR 0 12
63477: PUSH
63478: LD_INT 2
63480: PUSH
63481: LD_INT 1
63483: NEG
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 3
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 3
63501: PUSH
63502: LD_INT 1
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: LIST
63513: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63514: LD_ADDR_VAR 0 13
63518: PUSH
63519: LD_INT 3
63521: PUSH
63522: LD_INT 2
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 3
63531: PUSH
63532: LD_INT 3
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 2
63541: PUSH
63542: LD_INT 3
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: LIST
63553: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63554: LD_ADDR_VAR 0 14
63558: PUSH
63559: LD_INT 1
63561: PUSH
63562: LD_INT 3
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 0
63571: PUSH
63572: LD_INT 3
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 1
63581: NEG
63582: PUSH
63583: LD_INT 2
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: LIST
63594: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63595: LD_ADDR_VAR 0 15
63599: PUSH
63600: LD_INT 2
63602: NEG
63603: PUSH
63604: LD_INT 1
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 3
63613: NEG
63614: PUSH
63615: LD_INT 0
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 3
63624: NEG
63625: PUSH
63626: LD_INT 1
63628: NEG
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: LIST
63638: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63639: LD_ADDR_VAR 0 16
63643: PUSH
63644: LD_INT 2
63646: NEG
63647: PUSH
63648: LD_INT 3
63650: NEG
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 3
63658: NEG
63659: PUSH
63660: LD_INT 2
63662: NEG
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 3
63670: NEG
63671: PUSH
63672: LD_INT 3
63674: NEG
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: LIST
63684: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63685: LD_ADDR_VAR 0 17
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: LD_INT 3
63696: NEG
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 0
63704: PUSH
63705: LD_INT 3
63707: NEG
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 1
63715: PUSH
63716: LD_INT 2
63718: NEG
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: LIST
63728: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63729: LD_ADDR_VAR 0 18
63733: PUSH
63734: LD_INT 2
63736: PUSH
63737: LD_INT 1
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 3
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 3
63757: PUSH
63758: LD_INT 1
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: LIST
63769: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63770: LD_ADDR_VAR 0 19
63774: PUSH
63775: LD_INT 3
63777: PUSH
63778: LD_INT 2
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 3
63787: PUSH
63788: LD_INT 3
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 2
63797: PUSH
63798: LD_INT 3
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: LIST
63809: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63810: LD_ADDR_VAR 0 20
63814: PUSH
63815: LD_INT 1
63817: PUSH
63818: LD_INT 3
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 0
63827: PUSH
63828: LD_INT 3
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 1
63837: NEG
63838: PUSH
63839: LD_INT 2
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: LIST
63850: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63851: LD_ADDR_VAR 0 21
63855: PUSH
63856: LD_INT 2
63858: NEG
63859: PUSH
63860: LD_INT 1
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 3
63869: NEG
63870: PUSH
63871: LD_INT 0
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 3
63880: NEG
63881: PUSH
63882: LD_INT 1
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: LIST
63894: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63895: LD_ADDR_VAR 0 22
63899: PUSH
63900: LD_INT 2
63902: NEG
63903: PUSH
63904: LD_INT 3
63906: NEG
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 3
63914: NEG
63915: PUSH
63916: LD_INT 2
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 3
63926: NEG
63927: PUSH
63928: LD_INT 3
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: LIST
63940: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63941: LD_ADDR_VAR 0 23
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: LD_INT 3
63951: NEG
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 1
63959: NEG
63960: PUSH
63961: LD_INT 4
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 1
63971: PUSH
63972: LD_INT 3
63974: NEG
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: LIST
63984: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63985: LD_ADDR_VAR 0 24
63989: PUSH
63990: LD_INT 3
63992: PUSH
63993: LD_INT 0
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 3
64002: PUSH
64003: LD_INT 1
64005: NEG
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 4
64013: PUSH
64014: LD_INT 1
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: LIST
64025: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64026: LD_ADDR_VAR 0 25
64030: PUSH
64031: LD_INT 3
64033: PUSH
64034: LD_INT 3
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 4
64043: PUSH
64044: LD_INT 3
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 3
64053: PUSH
64054: LD_INT 4
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: LIST
64065: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64066: LD_ADDR_VAR 0 26
64070: PUSH
64071: LD_INT 0
64073: PUSH
64074: LD_INT 3
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 1
64083: PUSH
64084: LD_INT 4
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: LD_INT 3
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: LIST
64106: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64107: LD_ADDR_VAR 0 27
64111: PUSH
64112: LD_INT 3
64114: NEG
64115: PUSH
64116: LD_INT 0
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 3
64125: NEG
64126: PUSH
64127: LD_INT 1
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 4
64136: NEG
64137: PUSH
64138: LD_INT 1
64140: NEG
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: LIST
64150: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64151: LD_ADDR_VAR 0 28
64155: PUSH
64156: LD_INT 3
64158: NEG
64159: PUSH
64160: LD_INT 3
64162: NEG
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 3
64170: NEG
64171: PUSH
64172: LD_INT 4
64174: NEG
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 4
64182: NEG
64183: PUSH
64184: LD_INT 3
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: LIST
64196: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64197: LD_ADDR_VAR 0 29
64201: PUSH
64202: LD_INT 1
64204: NEG
64205: PUSH
64206: LD_INT 3
64208: NEG
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 0
64216: PUSH
64217: LD_INT 3
64219: NEG
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 1
64227: PUSH
64228: LD_INT 2
64230: NEG
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 1
64238: NEG
64239: PUSH
64240: LD_INT 4
64242: NEG
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 0
64250: PUSH
64251: LD_INT 4
64253: NEG
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 1
64261: PUSH
64262: LD_INT 3
64264: NEG
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: LD_INT 5
64276: NEG
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 0
64284: PUSH
64285: LD_INT 5
64287: NEG
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 1
64295: PUSH
64296: LD_INT 4
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 1
64306: NEG
64307: PUSH
64308: LD_INT 6
64310: NEG
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 0
64318: PUSH
64319: LD_INT 6
64321: NEG
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 1
64329: PUSH
64330: LD_INT 5
64332: NEG
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64352: LD_ADDR_VAR 0 30
64356: PUSH
64357: LD_INT 2
64359: PUSH
64360: LD_INT 1
64362: NEG
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 3
64370: PUSH
64371: LD_INT 0
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 3
64380: PUSH
64381: LD_INT 1
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 3
64390: PUSH
64391: LD_INT 1
64393: NEG
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 4
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 4
64411: PUSH
64412: LD_INT 1
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 4
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 5
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 5
64442: PUSH
64443: LD_INT 1
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 5
64452: PUSH
64453: LD_INT 1
64455: NEG
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 6
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 6
64473: PUSH
64474: LD_INT 1
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64495: LD_ADDR_VAR 0 31
64499: PUSH
64500: LD_INT 3
64502: PUSH
64503: LD_INT 2
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 3
64512: PUSH
64513: LD_INT 3
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 2
64522: PUSH
64523: LD_INT 3
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 4
64532: PUSH
64533: LD_INT 3
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 4
64542: PUSH
64543: LD_INT 4
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 3
64552: PUSH
64553: LD_INT 4
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 5
64562: PUSH
64563: LD_INT 4
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 5
64572: PUSH
64573: LD_INT 5
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 4
64582: PUSH
64583: LD_INT 5
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 6
64592: PUSH
64593: LD_INT 5
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 6
64602: PUSH
64603: LD_INT 6
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 5
64612: PUSH
64613: LD_INT 6
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64634: LD_ADDR_VAR 0 32
64638: PUSH
64639: LD_INT 1
64641: PUSH
64642: LD_INT 3
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 0
64651: PUSH
64652: LD_INT 3
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 1
64661: NEG
64662: PUSH
64663: LD_INT 2
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 1
64672: PUSH
64673: LD_INT 4
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 0
64682: PUSH
64683: LD_INT 4
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 1
64692: NEG
64693: PUSH
64694: LD_INT 3
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 1
64703: PUSH
64704: LD_INT 5
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 0
64713: PUSH
64714: LD_INT 5
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 1
64723: NEG
64724: PUSH
64725: LD_INT 4
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 1
64734: PUSH
64735: LD_INT 6
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: LD_INT 6
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 1
64754: NEG
64755: PUSH
64756: LD_INT 5
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64777: LD_ADDR_VAR 0 33
64781: PUSH
64782: LD_INT 2
64784: NEG
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 3
64795: NEG
64796: PUSH
64797: LD_INT 0
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 3
64806: NEG
64807: PUSH
64808: LD_INT 1
64810: NEG
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 3
64818: NEG
64819: PUSH
64820: LD_INT 1
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 4
64829: NEG
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 4
64840: NEG
64841: PUSH
64842: LD_INT 1
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 4
64852: NEG
64853: PUSH
64854: LD_INT 1
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 5
64863: NEG
64864: PUSH
64865: LD_INT 0
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 5
64874: NEG
64875: PUSH
64876: LD_INT 1
64878: NEG
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 5
64886: NEG
64887: PUSH
64888: LD_INT 1
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 6
64897: NEG
64898: PUSH
64899: LD_INT 0
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 6
64908: NEG
64909: PUSH
64910: LD_INT 1
64912: NEG
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64932: LD_ADDR_VAR 0 34
64936: PUSH
64937: LD_INT 2
64939: NEG
64940: PUSH
64941: LD_INT 3
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 3
64951: NEG
64952: PUSH
64953: LD_INT 2
64955: NEG
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 3
64963: NEG
64964: PUSH
64965: LD_INT 3
64967: NEG
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 3
64975: NEG
64976: PUSH
64977: LD_INT 4
64979: NEG
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 4
64987: NEG
64988: PUSH
64989: LD_INT 3
64991: NEG
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 4
64999: NEG
65000: PUSH
65001: LD_INT 4
65003: NEG
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 4
65011: NEG
65012: PUSH
65013: LD_INT 5
65015: NEG
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 5
65023: NEG
65024: PUSH
65025: LD_INT 4
65027: NEG
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 5
65035: NEG
65036: PUSH
65037: LD_INT 5
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 5
65047: NEG
65048: PUSH
65049: LD_INT 6
65051: NEG
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 6
65059: NEG
65060: PUSH
65061: LD_INT 5
65063: NEG
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 6
65071: NEG
65072: PUSH
65073: LD_INT 6
65075: NEG
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65095: LD_ADDR_VAR 0 41
65099: PUSH
65100: LD_INT 0
65102: PUSH
65103: LD_INT 2
65105: NEG
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 1
65113: NEG
65114: PUSH
65115: LD_INT 3
65117: NEG
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 1
65125: PUSH
65126: LD_INT 2
65128: NEG
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: LIST
65138: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65139: LD_ADDR_VAR 0 42
65143: PUSH
65144: LD_INT 2
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 2
65156: PUSH
65157: LD_INT 1
65159: NEG
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 3
65167: PUSH
65168: LD_INT 1
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: LIST
65179: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65180: LD_ADDR_VAR 0 43
65184: PUSH
65185: LD_INT 2
65187: PUSH
65188: LD_INT 2
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 3
65197: PUSH
65198: LD_INT 2
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 2
65207: PUSH
65208: LD_INT 3
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: LIST
65219: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65220: LD_ADDR_VAR 0 44
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: LD_INT 2
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 1
65237: PUSH
65238: LD_INT 3
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 1
65247: NEG
65248: PUSH
65249: LD_INT 2
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: LIST
65260: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65261: LD_ADDR_VAR 0 45
65265: PUSH
65266: LD_INT 2
65268: NEG
65269: PUSH
65270: LD_INT 0
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 2
65279: NEG
65280: PUSH
65281: LD_INT 1
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 3
65290: NEG
65291: PUSH
65292: LD_INT 1
65294: NEG
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: LIST
65304: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65305: LD_ADDR_VAR 0 46
65309: PUSH
65310: LD_INT 2
65312: NEG
65313: PUSH
65314: LD_INT 2
65316: NEG
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 2
65324: NEG
65325: PUSH
65326: LD_INT 3
65328: NEG
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 3
65336: NEG
65337: PUSH
65338: LD_INT 2
65340: NEG
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: LIST
65350: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65351: LD_ADDR_VAR 0 47
65355: PUSH
65356: LD_INT 2
65358: NEG
65359: PUSH
65360: LD_INT 3
65362: NEG
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 1
65370: NEG
65371: PUSH
65372: LD_INT 3
65374: NEG
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65384: LD_ADDR_VAR 0 48
65388: PUSH
65389: LD_INT 1
65391: PUSH
65392: LD_INT 2
65394: NEG
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 2
65402: PUSH
65403: LD_INT 1
65405: NEG
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65415: LD_ADDR_VAR 0 49
65419: PUSH
65420: LD_INT 3
65422: PUSH
65423: LD_INT 1
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 3
65432: PUSH
65433: LD_INT 2
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65444: LD_ADDR_VAR 0 50
65448: PUSH
65449: LD_INT 2
65451: PUSH
65452: LD_INT 3
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 1
65461: PUSH
65462: LD_INT 3
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65473: LD_ADDR_VAR 0 51
65477: PUSH
65478: LD_INT 1
65480: NEG
65481: PUSH
65482: LD_INT 2
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 2
65491: NEG
65492: PUSH
65493: LD_INT 1
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65504: LD_ADDR_VAR 0 52
65508: PUSH
65509: LD_INT 3
65511: NEG
65512: PUSH
65513: LD_INT 1
65515: NEG
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 3
65523: NEG
65524: PUSH
65525: LD_INT 2
65527: NEG
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65537: LD_ADDR_VAR 0 53
65541: PUSH
65542: LD_INT 1
65544: NEG
65545: PUSH
65546: LD_INT 3
65548: NEG
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 0
65556: PUSH
65557: LD_INT 3
65559: NEG
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 1
65567: PUSH
65568: LD_INT 2
65570: NEG
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: LIST
65580: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65581: LD_ADDR_VAR 0 54
65585: PUSH
65586: LD_INT 2
65588: PUSH
65589: LD_INT 1
65591: NEG
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 3
65599: PUSH
65600: LD_INT 0
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 3
65609: PUSH
65610: LD_INT 1
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: LIST
65621: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65622: LD_ADDR_VAR 0 55
65626: PUSH
65627: LD_INT 3
65629: PUSH
65630: LD_INT 2
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 3
65639: PUSH
65640: LD_INT 3
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 2
65649: PUSH
65650: LD_INT 3
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: LIST
65661: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65662: LD_ADDR_VAR 0 56
65666: PUSH
65667: LD_INT 1
65669: PUSH
65670: LD_INT 3
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 0
65679: PUSH
65680: LD_INT 3
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 1
65689: NEG
65690: PUSH
65691: LD_INT 2
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: LIST
65702: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65703: LD_ADDR_VAR 0 57
65707: PUSH
65708: LD_INT 2
65710: NEG
65711: PUSH
65712: LD_INT 1
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 3
65721: NEG
65722: PUSH
65723: LD_INT 0
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 3
65732: NEG
65733: PUSH
65734: LD_INT 1
65736: NEG
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: LIST
65746: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65747: LD_ADDR_VAR 0 58
65751: PUSH
65752: LD_INT 2
65754: NEG
65755: PUSH
65756: LD_INT 3
65758: NEG
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 3
65766: NEG
65767: PUSH
65768: LD_INT 2
65770: NEG
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 3
65778: NEG
65779: PUSH
65780: LD_INT 3
65782: NEG
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: LIST
65792: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65793: LD_ADDR_VAR 0 59
65797: PUSH
65798: LD_INT 1
65800: NEG
65801: PUSH
65802: LD_INT 2
65804: NEG
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 0
65812: PUSH
65813: LD_INT 2
65815: NEG
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: LD_INT 1
65826: NEG
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: LIST
65836: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65837: LD_ADDR_VAR 0 60
65841: PUSH
65842: LD_INT 1
65844: PUSH
65845: LD_INT 1
65847: NEG
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 2
65855: PUSH
65856: LD_INT 0
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 2
65865: PUSH
65866: LD_INT 1
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: LIST
65877: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65878: LD_ADDR_VAR 0 61
65882: PUSH
65883: LD_INT 2
65885: PUSH
65886: LD_INT 1
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 2
65895: PUSH
65896: LD_INT 2
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 1
65905: PUSH
65906: LD_INT 2
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: LIST
65917: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65918: LD_ADDR_VAR 0 62
65922: PUSH
65923: LD_INT 1
65925: PUSH
65926: LD_INT 2
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 0
65935: PUSH
65936: LD_INT 2
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 1
65945: NEG
65946: PUSH
65947: LD_INT 1
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: LIST
65958: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65959: LD_ADDR_VAR 0 63
65963: PUSH
65964: LD_INT 1
65966: NEG
65967: PUSH
65968: LD_INT 1
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 2
65977: NEG
65978: PUSH
65979: LD_INT 0
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 2
65988: NEG
65989: PUSH
65990: LD_INT 1
65992: NEG
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: LIST
66002: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66003: LD_ADDR_VAR 0 64
66007: PUSH
66008: LD_INT 1
66010: NEG
66011: PUSH
66012: LD_INT 2
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 2
66022: NEG
66023: PUSH
66024: LD_INT 1
66026: NEG
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 2
66034: NEG
66035: PUSH
66036: LD_INT 2
66038: NEG
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: LIST
66048: ST_TO_ADDR
// end ; 2 :
66049: GO 69315
66051: LD_INT 2
66053: DOUBLE
66054: EQUAL
66055: IFTRUE 66059
66057: GO 69314
66059: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66060: LD_ADDR_VAR 0 29
66064: PUSH
66065: LD_INT 4
66067: PUSH
66068: LD_INT 0
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 4
66077: PUSH
66078: LD_INT 1
66080: NEG
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 5
66088: PUSH
66089: LD_INT 0
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 5
66098: PUSH
66099: LD_INT 1
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 4
66108: PUSH
66109: LD_INT 1
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 3
66118: PUSH
66119: LD_INT 0
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 3
66128: PUSH
66129: LD_INT 1
66131: NEG
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 3
66139: PUSH
66140: LD_INT 2
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 5
66150: PUSH
66151: LD_INT 2
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 3
66160: PUSH
66161: LD_INT 3
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 3
66170: PUSH
66171: LD_INT 2
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 4
66180: PUSH
66181: LD_INT 3
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 4
66190: PUSH
66191: LD_INT 4
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 3
66200: PUSH
66201: LD_INT 4
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 2
66210: PUSH
66211: LD_INT 3
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 2
66220: PUSH
66221: LD_INT 2
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 4
66230: PUSH
66231: LD_INT 2
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 2
66240: PUSH
66241: LD_INT 4
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 0
66250: PUSH
66251: LD_INT 4
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 0
66260: PUSH
66261: LD_INT 3
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 1
66270: PUSH
66271: LD_INT 4
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 1
66280: PUSH
66281: LD_INT 5
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 0
66290: PUSH
66291: LD_INT 5
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 1
66300: NEG
66301: PUSH
66302: LD_INT 4
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 1
66311: NEG
66312: PUSH
66313: LD_INT 3
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 2
66322: PUSH
66323: LD_INT 5
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 2
66332: NEG
66333: PUSH
66334: LD_INT 3
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 3
66343: NEG
66344: PUSH
66345: LD_INT 0
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 3
66354: NEG
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 2
66366: NEG
66367: PUSH
66368: LD_INT 0
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 2
66377: NEG
66378: PUSH
66379: LD_INT 1
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 3
66388: NEG
66389: PUSH
66390: LD_INT 1
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 4
66399: NEG
66400: PUSH
66401: LD_INT 0
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 4
66410: NEG
66411: PUSH
66412: LD_INT 1
66414: NEG
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 4
66422: NEG
66423: PUSH
66424: LD_INT 2
66426: NEG
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 2
66434: NEG
66435: PUSH
66436: LD_INT 2
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 4
66445: NEG
66446: PUSH
66447: LD_INT 4
66449: NEG
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 4
66457: NEG
66458: PUSH
66459: LD_INT 5
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 3
66469: NEG
66470: PUSH
66471: LD_INT 4
66473: NEG
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 3
66481: NEG
66482: PUSH
66483: LD_INT 3
66485: NEG
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 4
66493: NEG
66494: PUSH
66495: LD_INT 3
66497: NEG
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 5
66505: NEG
66506: PUSH
66507: LD_INT 4
66509: NEG
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 5
66517: NEG
66518: PUSH
66519: LD_INT 5
66521: NEG
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 3
66529: NEG
66530: PUSH
66531: LD_INT 5
66533: NEG
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 5
66541: NEG
66542: PUSH
66543: LD_INT 3
66545: NEG
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66598: LD_ADDR_VAR 0 30
66602: PUSH
66603: LD_INT 4
66605: PUSH
66606: LD_INT 4
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 4
66615: PUSH
66616: LD_INT 3
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 5
66625: PUSH
66626: LD_INT 4
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 5
66635: PUSH
66636: LD_INT 5
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 4
66645: PUSH
66646: LD_INT 5
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 3
66655: PUSH
66656: LD_INT 4
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 3
66665: PUSH
66666: LD_INT 3
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 5
66675: PUSH
66676: LD_INT 3
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 3
66685: PUSH
66686: LD_INT 5
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: LD_INT 3
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 0
66705: PUSH
66706: LD_INT 2
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 1
66715: PUSH
66716: LD_INT 3
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 1
66725: PUSH
66726: LD_INT 4
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: LD_INT 4
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 1
66745: NEG
66746: PUSH
66747: LD_INT 3
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 1
66756: NEG
66757: PUSH
66758: LD_INT 2
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 2
66767: PUSH
66768: LD_INT 4
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 2
66777: NEG
66778: PUSH
66779: LD_INT 2
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 4
66788: NEG
66789: PUSH
66790: LD_INT 0
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 4
66799: NEG
66800: PUSH
66801: LD_INT 1
66803: NEG
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 3
66811: NEG
66812: PUSH
66813: LD_INT 0
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 3
66822: NEG
66823: PUSH
66824: LD_INT 1
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 4
66833: NEG
66834: PUSH
66835: LD_INT 1
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 5
66844: NEG
66845: PUSH
66846: LD_INT 0
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 5
66855: NEG
66856: PUSH
66857: LD_INT 1
66859: NEG
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 5
66867: NEG
66868: PUSH
66869: LD_INT 2
66871: NEG
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 3
66879: NEG
66880: PUSH
66881: LD_INT 2
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 3
66890: NEG
66891: PUSH
66892: LD_INT 3
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 3
66902: NEG
66903: PUSH
66904: LD_INT 4
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 2
66914: NEG
66915: PUSH
66916: LD_INT 3
66918: NEG
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 2
66926: NEG
66927: PUSH
66928: LD_INT 2
66930: NEG
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 3
66938: NEG
66939: PUSH
66940: LD_INT 2
66942: NEG
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 4
66950: NEG
66951: PUSH
66952: LD_INT 3
66954: NEG
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 4
66962: NEG
66963: PUSH
66964: LD_INT 4
66966: NEG
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 2
66974: NEG
66975: PUSH
66976: LD_INT 4
66978: NEG
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 4
66986: NEG
66987: PUSH
66988: LD_INT 2
66990: NEG
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 0
66998: PUSH
66999: LD_INT 4
67001: NEG
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 0
67009: PUSH
67010: LD_INT 5
67012: NEG
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 1
67020: PUSH
67021: LD_INT 4
67023: NEG
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 1
67031: PUSH
67032: LD_INT 3
67034: NEG
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 0
67042: PUSH
67043: LD_INT 3
67045: NEG
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 1
67053: NEG
67054: PUSH
67055: LD_INT 4
67057: NEG
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 1
67065: NEG
67066: PUSH
67067: LD_INT 5
67069: NEG
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 2
67077: PUSH
67078: LD_INT 3
67080: NEG
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 2
67088: NEG
67089: PUSH
67090: LD_INT 5
67092: NEG
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67145: LD_ADDR_VAR 0 31
67149: PUSH
67150: LD_INT 0
67152: PUSH
67153: LD_INT 4
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 0
67162: PUSH
67163: LD_INT 3
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 1
67172: PUSH
67173: LD_INT 4
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 1
67182: PUSH
67183: LD_INT 5
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 0
67192: PUSH
67193: LD_INT 5
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 1
67202: NEG
67203: PUSH
67204: LD_INT 4
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 1
67213: NEG
67214: PUSH
67215: LD_INT 3
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 2
67224: PUSH
67225: LD_INT 5
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 2
67234: NEG
67235: PUSH
67236: LD_INT 3
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 3
67245: NEG
67246: PUSH
67247: LD_INT 0
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 3
67256: NEG
67257: PUSH
67258: LD_INT 1
67260: NEG
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 2
67268: NEG
67269: PUSH
67270: LD_INT 0
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 2
67279: NEG
67280: PUSH
67281: LD_INT 1
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 3
67290: NEG
67291: PUSH
67292: LD_INT 1
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 4
67301: NEG
67302: PUSH
67303: LD_INT 0
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 4
67312: NEG
67313: PUSH
67314: LD_INT 1
67316: NEG
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 4
67324: NEG
67325: PUSH
67326: LD_INT 2
67328: NEG
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 2
67336: NEG
67337: PUSH
67338: LD_INT 2
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 4
67347: NEG
67348: PUSH
67349: LD_INT 4
67351: NEG
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 4
67359: NEG
67360: PUSH
67361: LD_INT 5
67363: NEG
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 3
67371: NEG
67372: PUSH
67373: LD_INT 4
67375: NEG
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: LD_INT 3
67383: NEG
67384: PUSH
67385: LD_INT 3
67387: NEG
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 4
67395: NEG
67396: PUSH
67397: LD_INT 3
67399: NEG
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 5
67407: NEG
67408: PUSH
67409: LD_INT 4
67411: NEG
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 5
67419: NEG
67420: PUSH
67421: LD_INT 5
67423: NEG
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 3
67431: NEG
67432: PUSH
67433: LD_INT 5
67435: NEG
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 5
67443: NEG
67444: PUSH
67445: LD_INT 3
67447: NEG
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 0
67455: PUSH
67456: LD_INT 3
67458: NEG
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_INT 0
67466: PUSH
67467: LD_INT 4
67469: NEG
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 1
67477: PUSH
67478: LD_INT 3
67480: NEG
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 1
67488: PUSH
67489: LD_INT 2
67491: NEG
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 0
67499: PUSH
67500: LD_INT 2
67502: NEG
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 1
67510: NEG
67511: PUSH
67512: LD_INT 3
67514: NEG
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 1
67522: NEG
67523: PUSH
67524: LD_INT 4
67526: NEG
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 2
67534: PUSH
67535: LD_INT 2
67537: NEG
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 2
67545: NEG
67546: PUSH
67547: LD_INT 4
67549: NEG
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 4
67557: PUSH
67558: LD_INT 0
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 4
67567: PUSH
67568: LD_INT 1
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 5
67578: PUSH
67579: LD_INT 0
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 5
67588: PUSH
67589: LD_INT 1
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 4
67598: PUSH
67599: LD_INT 1
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 3
67608: PUSH
67609: LD_INT 0
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 3
67618: PUSH
67619: LD_INT 1
67621: NEG
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 3
67629: PUSH
67630: LD_INT 2
67632: NEG
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 5
67640: PUSH
67641: LD_INT 2
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67695: LD_ADDR_VAR 0 32
67699: PUSH
67700: LD_INT 4
67702: NEG
67703: PUSH
67704: LD_INT 0
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 4
67713: NEG
67714: PUSH
67715: LD_INT 1
67717: NEG
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 3
67725: NEG
67726: PUSH
67727: LD_INT 0
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 3
67736: NEG
67737: PUSH
67738: LD_INT 1
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 4
67747: NEG
67748: PUSH
67749: LD_INT 1
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 5
67758: NEG
67759: PUSH
67760: LD_INT 0
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 5
67769: NEG
67770: PUSH
67771: LD_INT 1
67773: NEG
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 5
67781: NEG
67782: PUSH
67783: LD_INT 2
67785: NEG
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 3
67793: NEG
67794: PUSH
67795: LD_INT 2
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 3
67804: NEG
67805: PUSH
67806: LD_INT 3
67808: NEG
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 3
67816: NEG
67817: PUSH
67818: LD_INT 4
67820: NEG
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 2
67828: NEG
67829: PUSH
67830: LD_INT 3
67832: NEG
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 2
67840: NEG
67841: PUSH
67842: LD_INT 2
67844: NEG
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 3
67852: NEG
67853: PUSH
67854: LD_INT 2
67856: NEG
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 4
67864: NEG
67865: PUSH
67866: LD_INT 3
67868: NEG
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 4
67876: NEG
67877: PUSH
67878: LD_INT 4
67880: NEG
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 2
67888: NEG
67889: PUSH
67890: LD_INT 4
67892: NEG
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 4
67900: NEG
67901: PUSH
67902: LD_INT 2
67904: NEG
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 0
67912: PUSH
67913: LD_INT 4
67915: NEG
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 0
67923: PUSH
67924: LD_INT 5
67926: NEG
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 1
67934: PUSH
67935: LD_INT 4
67937: NEG
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 1
67945: PUSH
67946: LD_INT 3
67948: NEG
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 0
67956: PUSH
67957: LD_INT 3
67959: NEG
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 1
67967: NEG
67968: PUSH
67969: LD_INT 4
67971: NEG
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 1
67979: NEG
67980: PUSH
67981: LD_INT 5
67983: NEG
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 2
67991: PUSH
67992: LD_INT 3
67994: NEG
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 2
68002: NEG
68003: PUSH
68004: LD_INT 5
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 3
68014: PUSH
68015: LD_INT 0
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 3
68024: PUSH
68025: LD_INT 1
68027: NEG
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 4
68035: PUSH
68036: LD_INT 0
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 4
68045: PUSH
68046: LD_INT 1
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 3
68055: PUSH
68056: LD_INT 1
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 2
68065: PUSH
68066: LD_INT 0
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 2
68075: PUSH
68076: LD_INT 1
68078: NEG
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 2
68086: PUSH
68087: LD_INT 2
68089: NEG
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 4
68097: PUSH
68098: LD_INT 2
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 4
68107: PUSH
68108: LD_INT 4
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 4
68117: PUSH
68118: LD_INT 3
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 5
68127: PUSH
68128: LD_INT 4
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 5
68137: PUSH
68138: LD_INT 5
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 4
68147: PUSH
68148: LD_INT 5
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 3
68157: PUSH
68158: LD_INT 4
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 3
68167: PUSH
68168: LD_INT 3
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 5
68177: PUSH
68178: LD_INT 3
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 3
68187: PUSH
68188: LD_INT 5
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: LIST
68207: LIST
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68242: LD_ADDR_VAR 0 33
68246: PUSH
68247: LD_INT 4
68249: NEG
68250: PUSH
68251: LD_INT 4
68253: NEG
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 4
68261: NEG
68262: PUSH
68263: LD_INT 5
68265: NEG
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 3
68273: NEG
68274: PUSH
68275: LD_INT 4
68277: NEG
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 3
68285: NEG
68286: PUSH
68287: LD_INT 3
68289: NEG
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 4
68297: NEG
68298: PUSH
68299: LD_INT 3
68301: NEG
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 5
68309: NEG
68310: PUSH
68311: LD_INT 4
68313: NEG
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 5
68321: NEG
68322: PUSH
68323: LD_INT 5
68325: NEG
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 3
68333: NEG
68334: PUSH
68335: LD_INT 5
68337: NEG
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 5
68345: NEG
68346: PUSH
68347: LD_INT 3
68349: NEG
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 0
68357: PUSH
68358: LD_INT 3
68360: NEG
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 0
68368: PUSH
68369: LD_INT 4
68371: NEG
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 1
68379: PUSH
68380: LD_INT 3
68382: NEG
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 1
68390: PUSH
68391: LD_INT 2
68393: NEG
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 0
68401: PUSH
68402: LD_INT 2
68404: NEG
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 1
68412: NEG
68413: PUSH
68414: LD_INT 3
68416: NEG
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 1
68424: NEG
68425: PUSH
68426: LD_INT 4
68428: NEG
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 2
68436: PUSH
68437: LD_INT 2
68439: NEG
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 2
68447: NEG
68448: PUSH
68449: LD_INT 4
68451: NEG
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 4
68459: PUSH
68460: LD_INT 0
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 4
68469: PUSH
68470: LD_INT 1
68472: NEG
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 5
68480: PUSH
68481: LD_INT 0
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 5
68490: PUSH
68491: LD_INT 1
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 4
68500: PUSH
68501: LD_INT 1
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 3
68510: PUSH
68511: LD_INT 0
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 3
68520: PUSH
68521: LD_INT 1
68523: NEG
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 3
68531: PUSH
68532: LD_INT 2
68534: NEG
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 5
68542: PUSH
68543: LD_INT 2
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 3
68552: PUSH
68553: LD_INT 3
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 3
68562: PUSH
68563: LD_INT 2
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 4
68572: PUSH
68573: LD_INT 3
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 4
68582: PUSH
68583: LD_INT 4
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 3
68592: PUSH
68593: LD_INT 4
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 2
68602: PUSH
68603: LD_INT 3
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 2
68612: PUSH
68613: LD_INT 2
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 4
68622: PUSH
68623: LD_INT 2
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 2
68632: PUSH
68633: LD_INT 4
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 0
68642: PUSH
68643: LD_INT 4
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 0
68652: PUSH
68653: LD_INT 3
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 1
68662: PUSH
68663: LD_INT 4
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 1
68672: PUSH
68673: LD_INT 5
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 0
68682: PUSH
68683: LD_INT 5
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 1
68692: NEG
68693: PUSH
68694: LD_INT 4
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 1
68703: NEG
68704: PUSH
68705: LD_INT 3
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 2
68714: PUSH
68715: LD_INT 5
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 2
68724: NEG
68725: PUSH
68726: LD_INT 3
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68780: LD_ADDR_VAR 0 34
68784: PUSH
68785: LD_INT 0
68787: PUSH
68788: LD_INT 4
68790: NEG
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 0
68798: PUSH
68799: LD_INT 5
68801: NEG
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 1
68809: PUSH
68810: LD_INT 4
68812: NEG
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 1
68820: PUSH
68821: LD_INT 3
68823: NEG
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: LD_INT 0
68831: PUSH
68832: LD_INT 3
68834: NEG
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 1
68842: NEG
68843: PUSH
68844: LD_INT 4
68846: NEG
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 1
68854: NEG
68855: PUSH
68856: LD_INT 5
68858: NEG
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 2
68866: PUSH
68867: LD_INT 3
68869: NEG
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 2
68877: NEG
68878: PUSH
68879: LD_INT 5
68881: NEG
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 3
68889: PUSH
68890: LD_INT 0
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 3
68899: PUSH
68900: LD_INT 1
68902: NEG
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 4
68910: PUSH
68911: LD_INT 0
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 4
68920: PUSH
68921: LD_INT 1
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 3
68930: PUSH
68931: LD_INT 1
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 2
68940: PUSH
68941: LD_INT 0
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 2
68950: PUSH
68951: LD_INT 1
68953: NEG
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 2
68961: PUSH
68962: LD_INT 2
68964: NEG
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 4
68972: PUSH
68973: LD_INT 2
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 4
68982: PUSH
68983: LD_INT 4
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 4
68992: PUSH
68993: LD_INT 3
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PUSH
69000: LD_INT 5
69002: PUSH
69003: LD_INT 4
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 5
69012: PUSH
69013: LD_INT 5
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 4
69022: PUSH
69023: LD_INT 5
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 3
69032: PUSH
69033: LD_INT 4
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 3
69042: PUSH
69043: LD_INT 3
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 5
69052: PUSH
69053: LD_INT 3
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 3
69062: PUSH
69063: LD_INT 5
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: LD_INT 0
69072: PUSH
69073: LD_INT 3
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 0
69082: PUSH
69083: LD_INT 2
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 1
69092: PUSH
69093: LD_INT 3
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 1
69102: PUSH
69103: LD_INT 4
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 0
69112: PUSH
69113: LD_INT 4
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 1
69122: NEG
69123: PUSH
69124: LD_INT 3
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 1
69133: NEG
69134: PUSH
69135: LD_INT 2
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 2
69144: PUSH
69145: LD_INT 4
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: LD_INT 2
69154: NEG
69155: PUSH
69156: LD_INT 2
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 4
69165: NEG
69166: PUSH
69167: LD_INT 0
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: LD_INT 4
69176: NEG
69177: PUSH
69178: LD_INT 1
69180: NEG
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 3
69188: NEG
69189: PUSH
69190: LD_INT 0
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 3
69199: NEG
69200: PUSH
69201: LD_INT 1
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 4
69210: NEG
69211: PUSH
69212: LD_INT 1
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 5
69221: NEG
69222: PUSH
69223: LD_INT 0
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 5
69232: NEG
69233: PUSH
69234: LD_INT 1
69236: NEG
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 5
69244: NEG
69245: PUSH
69246: LD_INT 2
69248: NEG
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 3
69256: NEG
69257: PUSH
69258: LD_INT 2
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: ST_TO_ADDR
// end ; end ;
69312: GO 69315
69314: POP
// case btype of b_depot , b_warehouse :
69315: LD_VAR 0 1
69319: PUSH
69320: LD_INT 0
69322: DOUBLE
69323: EQUAL
69324: IFTRUE 69334
69326: LD_INT 1
69328: DOUBLE
69329: EQUAL
69330: IFTRUE 69334
69332: GO 69535
69334: POP
// case nation of nation_american :
69335: LD_VAR 0 5
69339: PUSH
69340: LD_INT 1
69342: DOUBLE
69343: EQUAL
69344: IFTRUE 69348
69346: GO 69404
69348: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69349: LD_ADDR_VAR 0 9
69353: PUSH
69354: LD_VAR 0 11
69358: PUSH
69359: LD_VAR 0 12
69363: PUSH
69364: LD_VAR 0 13
69368: PUSH
69369: LD_VAR 0 14
69373: PUSH
69374: LD_VAR 0 15
69378: PUSH
69379: LD_VAR 0 16
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: PUSH
69392: LD_VAR 0 4
69396: PUSH
69397: LD_INT 1
69399: PLUS
69400: ARRAY
69401: ST_TO_ADDR
69402: GO 69533
69404: LD_INT 2
69406: DOUBLE
69407: EQUAL
69408: IFTRUE 69412
69410: GO 69468
69412: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69413: LD_ADDR_VAR 0 9
69417: PUSH
69418: LD_VAR 0 17
69422: PUSH
69423: LD_VAR 0 18
69427: PUSH
69428: LD_VAR 0 19
69432: PUSH
69433: LD_VAR 0 20
69437: PUSH
69438: LD_VAR 0 21
69442: PUSH
69443: LD_VAR 0 22
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: PUSH
69456: LD_VAR 0 4
69460: PUSH
69461: LD_INT 1
69463: PLUS
69464: ARRAY
69465: ST_TO_ADDR
69466: GO 69533
69468: LD_INT 3
69470: DOUBLE
69471: EQUAL
69472: IFTRUE 69476
69474: GO 69532
69476: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69477: LD_ADDR_VAR 0 9
69481: PUSH
69482: LD_VAR 0 23
69486: PUSH
69487: LD_VAR 0 24
69491: PUSH
69492: LD_VAR 0 25
69496: PUSH
69497: LD_VAR 0 26
69501: PUSH
69502: LD_VAR 0 27
69506: PUSH
69507: LD_VAR 0 28
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: PUSH
69520: LD_VAR 0 4
69524: PUSH
69525: LD_INT 1
69527: PLUS
69528: ARRAY
69529: ST_TO_ADDR
69530: GO 69533
69532: POP
69533: GO 70088
69535: LD_INT 2
69537: DOUBLE
69538: EQUAL
69539: IFTRUE 69549
69541: LD_INT 3
69543: DOUBLE
69544: EQUAL
69545: IFTRUE 69549
69547: GO 69605
69549: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69550: LD_ADDR_VAR 0 9
69554: PUSH
69555: LD_VAR 0 29
69559: PUSH
69560: LD_VAR 0 30
69564: PUSH
69565: LD_VAR 0 31
69569: PUSH
69570: LD_VAR 0 32
69574: PUSH
69575: LD_VAR 0 33
69579: PUSH
69580: LD_VAR 0 34
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: PUSH
69593: LD_VAR 0 4
69597: PUSH
69598: LD_INT 1
69600: PLUS
69601: ARRAY
69602: ST_TO_ADDR
69603: GO 70088
69605: LD_INT 16
69607: DOUBLE
69608: EQUAL
69609: IFTRUE 69667
69611: LD_INT 17
69613: DOUBLE
69614: EQUAL
69615: IFTRUE 69667
69617: LD_INT 18
69619: DOUBLE
69620: EQUAL
69621: IFTRUE 69667
69623: LD_INT 19
69625: DOUBLE
69626: EQUAL
69627: IFTRUE 69667
69629: LD_INT 22
69631: DOUBLE
69632: EQUAL
69633: IFTRUE 69667
69635: LD_INT 20
69637: DOUBLE
69638: EQUAL
69639: IFTRUE 69667
69641: LD_INT 21
69643: DOUBLE
69644: EQUAL
69645: IFTRUE 69667
69647: LD_INT 23
69649: DOUBLE
69650: EQUAL
69651: IFTRUE 69667
69653: LD_INT 24
69655: DOUBLE
69656: EQUAL
69657: IFTRUE 69667
69659: LD_INT 25
69661: DOUBLE
69662: EQUAL
69663: IFTRUE 69667
69665: GO 69723
69667: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69668: LD_ADDR_VAR 0 9
69672: PUSH
69673: LD_VAR 0 35
69677: PUSH
69678: LD_VAR 0 36
69682: PUSH
69683: LD_VAR 0 37
69687: PUSH
69688: LD_VAR 0 38
69692: PUSH
69693: LD_VAR 0 39
69697: PUSH
69698: LD_VAR 0 40
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: PUSH
69711: LD_VAR 0 4
69715: PUSH
69716: LD_INT 1
69718: PLUS
69719: ARRAY
69720: ST_TO_ADDR
69721: GO 70088
69723: LD_INT 6
69725: DOUBLE
69726: EQUAL
69727: IFTRUE 69779
69729: LD_INT 7
69731: DOUBLE
69732: EQUAL
69733: IFTRUE 69779
69735: LD_INT 8
69737: DOUBLE
69738: EQUAL
69739: IFTRUE 69779
69741: LD_INT 13
69743: DOUBLE
69744: EQUAL
69745: IFTRUE 69779
69747: LD_INT 12
69749: DOUBLE
69750: EQUAL
69751: IFTRUE 69779
69753: LD_INT 15
69755: DOUBLE
69756: EQUAL
69757: IFTRUE 69779
69759: LD_INT 11
69761: DOUBLE
69762: EQUAL
69763: IFTRUE 69779
69765: LD_INT 14
69767: DOUBLE
69768: EQUAL
69769: IFTRUE 69779
69771: LD_INT 10
69773: DOUBLE
69774: EQUAL
69775: IFTRUE 69779
69777: GO 69835
69779: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69780: LD_ADDR_VAR 0 9
69784: PUSH
69785: LD_VAR 0 41
69789: PUSH
69790: LD_VAR 0 42
69794: PUSH
69795: LD_VAR 0 43
69799: PUSH
69800: LD_VAR 0 44
69804: PUSH
69805: LD_VAR 0 45
69809: PUSH
69810: LD_VAR 0 46
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: PUSH
69823: LD_VAR 0 4
69827: PUSH
69828: LD_INT 1
69830: PLUS
69831: ARRAY
69832: ST_TO_ADDR
69833: GO 70088
69835: LD_INT 36
69837: DOUBLE
69838: EQUAL
69839: IFTRUE 69843
69841: GO 69899
69843: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69844: LD_ADDR_VAR 0 9
69848: PUSH
69849: LD_VAR 0 47
69853: PUSH
69854: LD_VAR 0 48
69858: PUSH
69859: LD_VAR 0 49
69863: PUSH
69864: LD_VAR 0 50
69868: PUSH
69869: LD_VAR 0 51
69873: PUSH
69874: LD_VAR 0 52
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: PUSH
69887: LD_VAR 0 4
69891: PUSH
69892: LD_INT 1
69894: PLUS
69895: ARRAY
69896: ST_TO_ADDR
69897: GO 70088
69899: LD_INT 4
69901: DOUBLE
69902: EQUAL
69903: IFTRUE 69925
69905: LD_INT 5
69907: DOUBLE
69908: EQUAL
69909: IFTRUE 69925
69911: LD_INT 34
69913: DOUBLE
69914: EQUAL
69915: IFTRUE 69925
69917: LD_INT 37
69919: DOUBLE
69920: EQUAL
69921: IFTRUE 69925
69923: GO 69981
69925: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69926: LD_ADDR_VAR 0 9
69930: PUSH
69931: LD_VAR 0 53
69935: PUSH
69936: LD_VAR 0 54
69940: PUSH
69941: LD_VAR 0 55
69945: PUSH
69946: LD_VAR 0 56
69950: PUSH
69951: LD_VAR 0 57
69955: PUSH
69956: LD_VAR 0 58
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: PUSH
69969: LD_VAR 0 4
69973: PUSH
69974: LD_INT 1
69976: PLUS
69977: ARRAY
69978: ST_TO_ADDR
69979: GO 70088
69981: LD_INT 31
69983: DOUBLE
69984: EQUAL
69985: IFTRUE 70031
69987: LD_INT 32
69989: DOUBLE
69990: EQUAL
69991: IFTRUE 70031
69993: LD_INT 33
69995: DOUBLE
69996: EQUAL
69997: IFTRUE 70031
69999: LD_INT 27
70001: DOUBLE
70002: EQUAL
70003: IFTRUE 70031
70005: LD_INT 26
70007: DOUBLE
70008: EQUAL
70009: IFTRUE 70031
70011: LD_INT 28
70013: DOUBLE
70014: EQUAL
70015: IFTRUE 70031
70017: LD_INT 29
70019: DOUBLE
70020: EQUAL
70021: IFTRUE 70031
70023: LD_INT 30
70025: DOUBLE
70026: EQUAL
70027: IFTRUE 70031
70029: GO 70087
70031: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70032: LD_ADDR_VAR 0 9
70036: PUSH
70037: LD_VAR 0 59
70041: PUSH
70042: LD_VAR 0 60
70046: PUSH
70047: LD_VAR 0 61
70051: PUSH
70052: LD_VAR 0 62
70056: PUSH
70057: LD_VAR 0 63
70061: PUSH
70062: LD_VAR 0 64
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: PUSH
70075: LD_VAR 0 4
70079: PUSH
70080: LD_INT 1
70082: PLUS
70083: ARRAY
70084: ST_TO_ADDR
70085: GO 70088
70087: POP
// temp_list2 = [ ] ;
70088: LD_ADDR_VAR 0 10
70092: PUSH
70093: EMPTY
70094: ST_TO_ADDR
// for i in temp_list do
70095: LD_ADDR_VAR 0 8
70099: PUSH
70100: LD_VAR 0 9
70104: PUSH
70105: FOR_IN
70106: IFFALSE 70158
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70108: LD_ADDR_VAR 0 10
70112: PUSH
70113: LD_VAR 0 10
70117: PUSH
70118: LD_VAR 0 8
70122: PUSH
70123: LD_INT 1
70125: ARRAY
70126: PUSH
70127: LD_VAR 0 2
70131: PLUS
70132: PUSH
70133: LD_VAR 0 8
70137: PUSH
70138: LD_INT 2
70140: ARRAY
70141: PUSH
70142: LD_VAR 0 3
70146: PLUS
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: EMPTY
70153: LIST
70154: ADD
70155: ST_TO_ADDR
70156: GO 70105
70158: POP
70159: POP
// result = temp_list2 ;
70160: LD_ADDR_VAR 0 7
70164: PUSH
70165: LD_VAR 0 10
70169: ST_TO_ADDR
// end ;
70170: LD_VAR 0 7
70174: RET
// export function EnemyInRange ( unit , dist ) ; begin
70175: LD_INT 0
70177: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70178: LD_ADDR_VAR 0 3
70182: PUSH
70183: LD_VAR 0 1
70187: PPUSH
70188: CALL_OW 255
70192: PPUSH
70193: LD_VAR 0 1
70197: PPUSH
70198: CALL_OW 250
70202: PPUSH
70203: LD_VAR 0 1
70207: PPUSH
70208: CALL_OW 251
70212: PPUSH
70213: LD_VAR 0 2
70217: PPUSH
70218: CALL 43571 0 4
70222: PUSH
70223: LD_INT 4
70225: ARRAY
70226: ST_TO_ADDR
// end ;
70227: LD_VAR 0 3
70231: RET
// export function PlayerSeeMe ( unit ) ; begin
70232: LD_INT 0
70234: PPUSH
// result := See ( your_side , unit ) ;
70235: LD_ADDR_VAR 0 2
70239: PUSH
70240: LD_OWVAR 2
70244: PPUSH
70245: LD_VAR 0 1
70249: PPUSH
70250: CALL_OW 292
70254: ST_TO_ADDR
// end ;
70255: LD_VAR 0 2
70259: RET
// export function ReverseDir ( unit ) ; begin
70260: LD_INT 0
70262: PPUSH
// if not unit then
70263: LD_VAR 0 1
70267: NOT
70268: IFFALSE 70272
// exit ;
70270: GO 70295
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70272: LD_ADDR_VAR 0 2
70276: PUSH
70277: LD_VAR 0 1
70281: PPUSH
70282: CALL_OW 254
70286: PUSH
70287: LD_INT 3
70289: PLUS
70290: PUSH
70291: LD_INT 6
70293: MOD
70294: ST_TO_ADDR
// end ;
70295: LD_VAR 0 2
70299: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70300: LD_INT 0
70302: PPUSH
70303: PPUSH
70304: PPUSH
70305: PPUSH
70306: PPUSH
// if not hexes then
70307: LD_VAR 0 2
70311: NOT
70312: IFFALSE 70316
// exit ;
70314: GO 70464
// dist := 9999 ;
70316: LD_ADDR_VAR 0 5
70320: PUSH
70321: LD_INT 9999
70323: ST_TO_ADDR
// for i = 1 to hexes do
70324: LD_ADDR_VAR 0 4
70328: PUSH
70329: DOUBLE
70330: LD_INT 1
70332: DEC
70333: ST_TO_ADDR
70334: LD_VAR 0 2
70338: PUSH
70339: FOR_TO
70340: IFFALSE 70452
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70342: LD_VAR 0 1
70346: PPUSH
70347: LD_VAR 0 2
70351: PUSH
70352: LD_VAR 0 4
70356: ARRAY
70357: PUSH
70358: LD_INT 1
70360: ARRAY
70361: PPUSH
70362: LD_VAR 0 2
70366: PUSH
70367: LD_VAR 0 4
70371: ARRAY
70372: PUSH
70373: LD_INT 2
70375: ARRAY
70376: PPUSH
70377: CALL_OW 297
70381: PUSH
70382: LD_VAR 0 5
70386: LESS
70387: IFFALSE 70450
// begin hex := hexes [ i ] ;
70389: LD_ADDR_VAR 0 7
70393: PUSH
70394: LD_VAR 0 2
70398: PUSH
70399: LD_VAR 0 4
70403: ARRAY
70404: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70405: LD_ADDR_VAR 0 5
70409: PUSH
70410: LD_VAR 0 1
70414: PPUSH
70415: LD_VAR 0 2
70419: PUSH
70420: LD_VAR 0 4
70424: ARRAY
70425: PUSH
70426: LD_INT 1
70428: ARRAY
70429: PPUSH
70430: LD_VAR 0 2
70434: PUSH
70435: LD_VAR 0 4
70439: ARRAY
70440: PUSH
70441: LD_INT 2
70443: ARRAY
70444: PPUSH
70445: CALL_OW 297
70449: ST_TO_ADDR
// end ; end ;
70450: GO 70339
70452: POP
70453: POP
// result := hex ;
70454: LD_ADDR_VAR 0 3
70458: PUSH
70459: LD_VAR 0 7
70463: ST_TO_ADDR
// end ;
70464: LD_VAR 0 3
70468: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70469: LD_INT 0
70471: PPUSH
70472: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70473: LD_VAR 0 1
70477: NOT
70478: PUSH
70479: LD_VAR 0 1
70483: PUSH
70484: LD_INT 21
70486: PUSH
70487: LD_INT 2
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 23
70496: PUSH
70497: LD_INT 2
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PPUSH
70508: CALL_OW 69
70512: IN
70513: NOT
70514: OR
70515: IFFALSE 70519
// exit ;
70517: GO 70566
// for i = 1 to 3 do
70519: LD_ADDR_VAR 0 3
70523: PUSH
70524: DOUBLE
70525: LD_INT 1
70527: DEC
70528: ST_TO_ADDR
70529: LD_INT 3
70531: PUSH
70532: FOR_TO
70533: IFFALSE 70564
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70535: LD_VAR 0 1
70539: PPUSH
70540: CALL_OW 250
70544: PPUSH
70545: LD_VAR 0 1
70549: PPUSH
70550: CALL_OW 251
70554: PPUSH
70555: LD_INT 1
70557: PPUSH
70558: CALL_OW 453
70562: GO 70532
70564: POP
70565: POP
// end ;
70566: LD_VAR 0 2
70570: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70571: LD_INT 0
70573: PPUSH
70574: PPUSH
70575: PPUSH
70576: PPUSH
70577: PPUSH
70578: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70579: LD_VAR 0 1
70583: NOT
70584: PUSH
70585: LD_VAR 0 2
70589: NOT
70590: OR
70591: PUSH
70592: LD_VAR 0 1
70596: PPUSH
70597: CALL_OW 314
70601: OR
70602: IFFALSE 70606
// exit ;
70604: GO 71047
// x := GetX ( enemy_unit ) ;
70606: LD_ADDR_VAR 0 7
70610: PUSH
70611: LD_VAR 0 2
70615: PPUSH
70616: CALL_OW 250
70620: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70621: LD_ADDR_VAR 0 8
70625: PUSH
70626: LD_VAR 0 2
70630: PPUSH
70631: CALL_OW 251
70635: ST_TO_ADDR
// if not x or not y then
70636: LD_VAR 0 7
70640: NOT
70641: PUSH
70642: LD_VAR 0 8
70646: NOT
70647: OR
70648: IFFALSE 70652
// exit ;
70650: GO 71047
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70652: LD_ADDR_VAR 0 6
70656: PUSH
70657: LD_VAR 0 7
70661: PPUSH
70662: LD_INT 0
70664: PPUSH
70665: LD_INT 4
70667: PPUSH
70668: CALL_OW 272
70672: PUSH
70673: LD_VAR 0 8
70677: PPUSH
70678: LD_INT 0
70680: PPUSH
70681: LD_INT 4
70683: PPUSH
70684: CALL_OW 273
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: LD_VAR 0 7
70697: PPUSH
70698: LD_INT 1
70700: PPUSH
70701: LD_INT 4
70703: PPUSH
70704: CALL_OW 272
70708: PUSH
70709: LD_VAR 0 8
70713: PPUSH
70714: LD_INT 1
70716: PPUSH
70717: LD_INT 4
70719: PPUSH
70720: CALL_OW 273
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_VAR 0 7
70733: PPUSH
70734: LD_INT 2
70736: PPUSH
70737: LD_INT 4
70739: PPUSH
70740: CALL_OW 272
70744: PUSH
70745: LD_VAR 0 8
70749: PPUSH
70750: LD_INT 2
70752: PPUSH
70753: LD_INT 4
70755: PPUSH
70756: CALL_OW 273
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_VAR 0 7
70769: PPUSH
70770: LD_INT 3
70772: PPUSH
70773: LD_INT 4
70775: PPUSH
70776: CALL_OW 272
70780: PUSH
70781: LD_VAR 0 8
70785: PPUSH
70786: LD_INT 3
70788: PPUSH
70789: LD_INT 4
70791: PPUSH
70792: CALL_OW 273
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PUSH
70801: LD_VAR 0 7
70805: PPUSH
70806: LD_INT 4
70808: PPUSH
70809: LD_INT 4
70811: PPUSH
70812: CALL_OW 272
70816: PUSH
70817: LD_VAR 0 8
70821: PPUSH
70822: LD_INT 4
70824: PPUSH
70825: LD_INT 4
70827: PPUSH
70828: CALL_OW 273
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_VAR 0 7
70841: PPUSH
70842: LD_INT 5
70844: PPUSH
70845: LD_INT 4
70847: PPUSH
70848: CALL_OW 272
70852: PUSH
70853: LD_VAR 0 8
70857: PPUSH
70858: LD_INT 5
70860: PPUSH
70861: LD_INT 4
70863: PPUSH
70864: CALL_OW 273
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: ST_TO_ADDR
// for i = tmp downto 1 do
70881: LD_ADDR_VAR 0 4
70885: PUSH
70886: DOUBLE
70887: LD_VAR 0 6
70891: INC
70892: ST_TO_ADDR
70893: LD_INT 1
70895: PUSH
70896: FOR_DOWNTO
70897: IFFALSE 70998
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70899: LD_VAR 0 6
70903: PUSH
70904: LD_VAR 0 4
70908: ARRAY
70909: PUSH
70910: LD_INT 1
70912: ARRAY
70913: PPUSH
70914: LD_VAR 0 6
70918: PUSH
70919: LD_VAR 0 4
70923: ARRAY
70924: PUSH
70925: LD_INT 2
70927: ARRAY
70928: PPUSH
70929: CALL_OW 488
70933: NOT
70934: PUSH
70935: LD_VAR 0 6
70939: PUSH
70940: LD_VAR 0 4
70944: ARRAY
70945: PUSH
70946: LD_INT 1
70948: ARRAY
70949: PPUSH
70950: LD_VAR 0 6
70954: PUSH
70955: LD_VAR 0 4
70959: ARRAY
70960: PUSH
70961: LD_INT 2
70963: ARRAY
70964: PPUSH
70965: CALL_OW 428
70969: PUSH
70970: LD_INT 0
70972: NONEQUAL
70973: OR
70974: IFFALSE 70996
// tmp := Delete ( tmp , i ) ;
70976: LD_ADDR_VAR 0 6
70980: PUSH
70981: LD_VAR 0 6
70985: PPUSH
70986: LD_VAR 0 4
70990: PPUSH
70991: CALL_OW 3
70995: ST_TO_ADDR
70996: GO 70896
70998: POP
70999: POP
// j := GetClosestHex ( unit , tmp ) ;
71000: LD_ADDR_VAR 0 5
71004: PUSH
71005: LD_VAR 0 1
71009: PPUSH
71010: LD_VAR 0 6
71014: PPUSH
71015: CALL 70300 0 2
71019: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71020: LD_VAR 0 1
71024: PPUSH
71025: LD_VAR 0 5
71029: PUSH
71030: LD_INT 1
71032: ARRAY
71033: PPUSH
71034: LD_VAR 0 5
71038: PUSH
71039: LD_INT 2
71041: ARRAY
71042: PPUSH
71043: CALL_OW 111
// end ;
71047: LD_VAR 0 3
71051: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71052: LD_INT 0
71054: PPUSH
71055: PPUSH
71056: PPUSH
// uc_side = 0 ;
71057: LD_ADDR_OWVAR 20
71061: PUSH
71062: LD_INT 0
71064: ST_TO_ADDR
// uc_nation = 0 ;
71065: LD_ADDR_OWVAR 21
71069: PUSH
71070: LD_INT 0
71072: ST_TO_ADDR
// InitHc_All ( ) ;
71073: CALL_OW 584
// InitVc ;
71077: CALL_OW 20
// if mastodonts then
71081: LD_VAR 0 6
71085: IFFALSE 71152
// for i = 1 to mastodonts do
71087: LD_ADDR_VAR 0 11
71091: PUSH
71092: DOUBLE
71093: LD_INT 1
71095: DEC
71096: ST_TO_ADDR
71097: LD_VAR 0 6
71101: PUSH
71102: FOR_TO
71103: IFFALSE 71150
// begin vc_chassis := 31 ;
71105: LD_ADDR_OWVAR 37
71109: PUSH
71110: LD_INT 31
71112: ST_TO_ADDR
// vc_control := control_rider ;
71113: LD_ADDR_OWVAR 38
71117: PUSH
71118: LD_INT 4
71120: ST_TO_ADDR
// animal := CreateVehicle ;
71121: LD_ADDR_VAR 0 12
71125: PUSH
71126: CALL_OW 45
71130: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71131: LD_VAR 0 12
71135: PPUSH
71136: LD_VAR 0 8
71140: PPUSH
71141: LD_INT 0
71143: PPUSH
71144: CALL 73287 0 3
// end ;
71148: GO 71102
71150: POP
71151: POP
// if horses then
71152: LD_VAR 0 5
71156: IFFALSE 71223
// for i = 1 to horses do
71158: LD_ADDR_VAR 0 11
71162: PUSH
71163: DOUBLE
71164: LD_INT 1
71166: DEC
71167: ST_TO_ADDR
71168: LD_VAR 0 5
71172: PUSH
71173: FOR_TO
71174: IFFALSE 71221
// begin hc_class := 21 ;
71176: LD_ADDR_OWVAR 28
71180: PUSH
71181: LD_INT 21
71183: ST_TO_ADDR
// hc_gallery :=  ;
71184: LD_ADDR_OWVAR 33
71188: PUSH
71189: LD_STRING 
71191: ST_TO_ADDR
// animal := CreateHuman ;
71192: LD_ADDR_VAR 0 12
71196: PUSH
71197: CALL_OW 44
71201: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71202: LD_VAR 0 12
71206: PPUSH
71207: LD_VAR 0 8
71211: PPUSH
71212: LD_INT 0
71214: PPUSH
71215: CALL 73287 0 3
// end ;
71219: GO 71173
71221: POP
71222: POP
// if birds then
71223: LD_VAR 0 1
71227: IFFALSE 71294
// for i = 1 to birds do
71229: LD_ADDR_VAR 0 11
71233: PUSH
71234: DOUBLE
71235: LD_INT 1
71237: DEC
71238: ST_TO_ADDR
71239: LD_VAR 0 1
71243: PUSH
71244: FOR_TO
71245: IFFALSE 71292
// begin hc_class = 18 ;
71247: LD_ADDR_OWVAR 28
71251: PUSH
71252: LD_INT 18
71254: ST_TO_ADDR
// hc_gallery =  ;
71255: LD_ADDR_OWVAR 33
71259: PUSH
71260: LD_STRING 
71262: ST_TO_ADDR
// animal := CreateHuman ;
71263: LD_ADDR_VAR 0 12
71267: PUSH
71268: CALL_OW 44
71272: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71273: LD_VAR 0 12
71277: PPUSH
71278: LD_VAR 0 8
71282: PPUSH
71283: LD_INT 0
71285: PPUSH
71286: CALL 73287 0 3
// end ;
71290: GO 71244
71292: POP
71293: POP
// if tigers then
71294: LD_VAR 0 2
71298: IFFALSE 71382
// for i = 1 to tigers do
71300: LD_ADDR_VAR 0 11
71304: PUSH
71305: DOUBLE
71306: LD_INT 1
71308: DEC
71309: ST_TO_ADDR
71310: LD_VAR 0 2
71314: PUSH
71315: FOR_TO
71316: IFFALSE 71380
// begin hc_class = class_tiger ;
71318: LD_ADDR_OWVAR 28
71322: PUSH
71323: LD_INT 14
71325: ST_TO_ADDR
// hc_gallery =  ;
71326: LD_ADDR_OWVAR 33
71330: PUSH
71331: LD_STRING 
71333: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71334: LD_ADDR_OWVAR 35
71338: PUSH
71339: LD_INT 7
71341: NEG
71342: PPUSH
71343: LD_INT 7
71345: PPUSH
71346: CALL_OW 12
71350: ST_TO_ADDR
// animal := CreateHuman ;
71351: LD_ADDR_VAR 0 12
71355: PUSH
71356: CALL_OW 44
71360: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71361: LD_VAR 0 12
71365: PPUSH
71366: LD_VAR 0 8
71370: PPUSH
71371: LD_INT 0
71373: PPUSH
71374: CALL 73287 0 3
// end ;
71378: GO 71315
71380: POP
71381: POP
// if apemans then
71382: LD_VAR 0 3
71386: IFFALSE 71509
// for i = 1 to apemans do
71388: LD_ADDR_VAR 0 11
71392: PUSH
71393: DOUBLE
71394: LD_INT 1
71396: DEC
71397: ST_TO_ADDR
71398: LD_VAR 0 3
71402: PUSH
71403: FOR_TO
71404: IFFALSE 71507
// begin hc_class = class_apeman ;
71406: LD_ADDR_OWVAR 28
71410: PUSH
71411: LD_INT 12
71413: ST_TO_ADDR
// hc_gallery =  ;
71414: LD_ADDR_OWVAR 33
71418: PUSH
71419: LD_STRING 
71421: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71422: LD_ADDR_OWVAR 35
71426: PUSH
71427: LD_INT 2
71429: NEG
71430: PPUSH
71431: LD_INT 2
71433: PPUSH
71434: CALL_OW 12
71438: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71439: LD_ADDR_OWVAR 31
71443: PUSH
71444: LD_INT 1
71446: PPUSH
71447: LD_INT 3
71449: PPUSH
71450: CALL_OW 12
71454: PUSH
71455: LD_INT 1
71457: PPUSH
71458: LD_INT 3
71460: PPUSH
71461: CALL_OW 12
71465: PUSH
71466: LD_INT 0
71468: PUSH
71469: LD_INT 0
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: ST_TO_ADDR
// animal := CreateHuman ;
71478: LD_ADDR_VAR 0 12
71482: PUSH
71483: CALL_OW 44
71487: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71488: LD_VAR 0 12
71492: PPUSH
71493: LD_VAR 0 8
71497: PPUSH
71498: LD_INT 0
71500: PPUSH
71501: CALL 73287 0 3
// end ;
71505: GO 71403
71507: POP
71508: POP
// if enchidnas then
71509: LD_VAR 0 4
71513: IFFALSE 71580
// for i = 1 to enchidnas do
71515: LD_ADDR_VAR 0 11
71519: PUSH
71520: DOUBLE
71521: LD_INT 1
71523: DEC
71524: ST_TO_ADDR
71525: LD_VAR 0 4
71529: PUSH
71530: FOR_TO
71531: IFFALSE 71578
// begin hc_class = 13 ;
71533: LD_ADDR_OWVAR 28
71537: PUSH
71538: LD_INT 13
71540: ST_TO_ADDR
// hc_gallery =  ;
71541: LD_ADDR_OWVAR 33
71545: PUSH
71546: LD_STRING 
71548: ST_TO_ADDR
// animal := CreateHuman ;
71549: LD_ADDR_VAR 0 12
71553: PUSH
71554: CALL_OW 44
71558: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71559: LD_VAR 0 12
71563: PPUSH
71564: LD_VAR 0 8
71568: PPUSH
71569: LD_INT 0
71571: PPUSH
71572: CALL 73287 0 3
// end ;
71576: GO 71530
71578: POP
71579: POP
// if fishes then
71580: LD_VAR 0 7
71584: IFFALSE 71651
// for i = 1 to fishes do
71586: LD_ADDR_VAR 0 11
71590: PUSH
71591: DOUBLE
71592: LD_INT 1
71594: DEC
71595: ST_TO_ADDR
71596: LD_VAR 0 7
71600: PUSH
71601: FOR_TO
71602: IFFALSE 71649
// begin hc_class = 20 ;
71604: LD_ADDR_OWVAR 28
71608: PUSH
71609: LD_INT 20
71611: ST_TO_ADDR
// hc_gallery =  ;
71612: LD_ADDR_OWVAR 33
71616: PUSH
71617: LD_STRING 
71619: ST_TO_ADDR
// animal := CreateHuman ;
71620: LD_ADDR_VAR 0 12
71624: PUSH
71625: CALL_OW 44
71629: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71630: LD_VAR 0 12
71634: PPUSH
71635: LD_VAR 0 9
71639: PPUSH
71640: LD_INT 0
71642: PPUSH
71643: CALL 73287 0 3
// end ;
71647: GO 71601
71649: POP
71650: POP
// end ;
71651: LD_VAR 0 10
71655: RET
// export function WantHeal ( sci , unit ) ; begin
71656: LD_INT 0
71658: PPUSH
// if GetTaskList ( sci ) > 0 then
71659: LD_VAR 0 1
71663: PPUSH
71664: CALL_OW 437
71668: PUSH
71669: LD_INT 0
71671: GREATER
71672: IFFALSE 71742
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71674: LD_VAR 0 1
71678: PPUSH
71679: CALL_OW 437
71683: PUSH
71684: LD_INT 1
71686: ARRAY
71687: PUSH
71688: LD_INT 1
71690: ARRAY
71691: PUSH
71692: LD_STRING l
71694: EQUAL
71695: PUSH
71696: LD_VAR 0 1
71700: PPUSH
71701: CALL_OW 437
71705: PUSH
71706: LD_INT 1
71708: ARRAY
71709: PUSH
71710: LD_INT 4
71712: ARRAY
71713: PUSH
71714: LD_VAR 0 2
71718: EQUAL
71719: AND
71720: IFFALSE 71732
// result := true else
71722: LD_ADDR_VAR 0 3
71726: PUSH
71727: LD_INT 1
71729: ST_TO_ADDR
71730: GO 71740
// result := false ;
71732: LD_ADDR_VAR 0 3
71736: PUSH
71737: LD_INT 0
71739: ST_TO_ADDR
// end else
71740: GO 71750
// result := false ;
71742: LD_ADDR_VAR 0 3
71746: PUSH
71747: LD_INT 0
71749: ST_TO_ADDR
// end ;
71750: LD_VAR 0 3
71754: RET
// export function HealTarget ( sci ) ; begin
71755: LD_INT 0
71757: PPUSH
// if not sci then
71758: LD_VAR 0 1
71762: NOT
71763: IFFALSE 71767
// exit ;
71765: GO 71832
// result := 0 ;
71767: LD_ADDR_VAR 0 2
71771: PUSH
71772: LD_INT 0
71774: ST_TO_ADDR
// if GetTaskList ( sci ) then
71775: LD_VAR 0 1
71779: PPUSH
71780: CALL_OW 437
71784: IFFALSE 71832
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71786: LD_VAR 0 1
71790: PPUSH
71791: CALL_OW 437
71795: PUSH
71796: LD_INT 1
71798: ARRAY
71799: PUSH
71800: LD_INT 1
71802: ARRAY
71803: PUSH
71804: LD_STRING l
71806: EQUAL
71807: IFFALSE 71832
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71809: LD_ADDR_VAR 0 2
71813: PUSH
71814: LD_VAR 0 1
71818: PPUSH
71819: CALL_OW 437
71823: PUSH
71824: LD_INT 1
71826: ARRAY
71827: PUSH
71828: LD_INT 4
71830: ARRAY
71831: ST_TO_ADDR
// end ;
71832: LD_VAR 0 2
71836: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71837: LD_INT 0
71839: PPUSH
71840: PPUSH
71841: PPUSH
71842: PPUSH
// if not base_units then
71843: LD_VAR 0 1
71847: NOT
71848: IFFALSE 71852
// exit ;
71850: GO 71939
// result := false ;
71852: LD_ADDR_VAR 0 2
71856: PUSH
71857: LD_INT 0
71859: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71860: LD_ADDR_VAR 0 5
71864: PUSH
71865: LD_VAR 0 1
71869: PPUSH
71870: LD_INT 21
71872: PUSH
71873: LD_INT 3
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PPUSH
71880: CALL_OW 72
71884: ST_TO_ADDR
// if not tmp then
71885: LD_VAR 0 5
71889: NOT
71890: IFFALSE 71894
// exit ;
71892: GO 71939
// for i in tmp do
71894: LD_ADDR_VAR 0 3
71898: PUSH
71899: LD_VAR 0 5
71903: PUSH
71904: FOR_IN
71905: IFFALSE 71937
// begin result := EnemyInRange ( i , 22 ) ;
71907: LD_ADDR_VAR 0 2
71911: PUSH
71912: LD_VAR 0 3
71916: PPUSH
71917: LD_INT 22
71919: PPUSH
71920: CALL 70175 0 2
71924: ST_TO_ADDR
// if result then
71925: LD_VAR 0 2
71929: IFFALSE 71935
// exit ;
71931: POP
71932: POP
71933: GO 71939
// end ;
71935: GO 71904
71937: POP
71938: POP
// end ;
71939: LD_VAR 0 2
71943: RET
// export function FilterByTag ( units , tag ) ; begin
71944: LD_INT 0
71946: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71947: LD_ADDR_VAR 0 3
71951: PUSH
71952: LD_VAR 0 1
71956: PPUSH
71957: LD_INT 120
71959: PUSH
71960: LD_VAR 0 2
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: PPUSH
71969: CALL_OW 72
71973: ST_TO_ADDR
// end ;
71974: LD_VAR 0 3
71978: RET
// export function IsDriver ( un ) ; begin
71979: LD_INT 0
71981: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71982: LD_ADDR_VAR 0 2
71986: PUSH
71987: LD_VAR 0 1
71991: PUSH
71992: LD_INT 55
71994: PUSH
71995: EMPTY
71996: LIST
71997: PPUSH
71998: CALL_OW 69
72002: IN
72003: ST_TO_ADDR
// end ;
72004: LD_VAR 0 2
72008: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72009: LD_INT 0
72011: PPUSH
72012: PPUSH
// list := [ ] ;
72013: LD_ADDR_VAR 0 5
72017: PUSH
72018: EMPTY
72019: ST_TO_ADDR
// case d of 0 :
72020: LD_VAR 0 3
72024: PUSH
72025: LD_INT 0
72027: DOUBLE
72028: EQUAL
72029: IFTRUE 72033
72031: GO 72166
72033: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72034: LD_ADDR_VAR 0 5
72038: PUSH
72039: LD_VAR 0 1
72043: PUSH
72044: LD_INT 4
72046: MINUS
72047: PUSH
72048: LD_VAR 0 2
72052: PUSH
72053: LD_INT 4
72055: MINUS
72056: PUSH
72057: LD_INT 2
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: LIST
72064: PUSH
72065: LD_VAR 0 1
72069: PUSH
72070: LD_INT 3
72072: MINUS
72073: PUSH
72074: LD_VAR 0 2
72078: PUSH
72079: LD_INT 1
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: LIST
72086: PUSH
72087: LD_VAR 0 1
72091: PUSH
72092: LD_INT 4
72094: PLUS
72095: PUSH
72096: LD_VAR 0 2
72100: PUSH
72101: LD_INT 4
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: LIST
72108: PUSH
72109: LD_VAR 0 1
72113: PUSH
72114: LD_INT 3
72116: PLUS
72117: PUSH
72118: LD_VAR 0 2
72122: PUSH
72123: LD_INT 3
72125: PLUS
72126: PUSH
72127: LD_INT 5
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: LIST
72134: PUSH
72135: LD_VAR 0 1
72139: PUSH
72140: LD_VAR 0 2
72144: PUSH
72145: LD_INT 4
72147: PLUS
72148: PUSH
72149: LD_INT 0
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: LIST
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: ST_TO_ADDR
// end ; 1 :
72164: GO 72864
72166: LD_INT 1
72168: DOUBLE
72169: EQUAL
72170: IFTRUE 72174
72172: GO 72307
72174: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72175: LD_ADDR_VAR 0 5
72179: PUSH
72180: LD_VAR 0 1
72184: PUSH
72185: LD_VAR 0 2
72189: PUSH
72190: LD_INT 4
72192: MINUS
72193: PUSH
72194: LD_INT 3
72196: PUSH
72197: EMPTY
72198: LIST
72199: LIST
72200: LIST
72201: PUSH
72202: LD_VAR 0 1
72206: PUSH
72207: LD_INT 3
72209: MINUS
72210: PUSH
72211: LD_VAR 0 2
72215: PUSH
72216: LD_INT 3
72218: MINUS
72219: PUSH
72220: LD_INT 2
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: LIST
72227: PUSH
72228: LD_VAR 0 1
72232: PUSH
72233: LD_INT 4
72235: MINUS
72236: PUSH
72237: LD_VAR 0 2
72241: PUSH
72242: LD_INT 1
72244: PUSH
72245: EMPTY
72246: LIST
72247: LIST
72248: LIST
72249: PUSH
72250: LD_VAR 0 1
72254: PUSH
72255: LD_VAR 0 2
72259: PUSH
72260: LD_INT 3
72262: PLUS
72263: PUSH
72264: LD_INT 0
72266: PUSH
72267: EMPTY
72268: LIST
72269: LIST
72270: LIST
72271: PUSH
72272: LD_VAR 0 1
72276: PUSH
72277: LD_INT 4
72279: PLUS
72280: PUSH
72281: LD_VAR 0 2
72285: PUSH
72286: LD_INT 4
72288: PLUS
72289: PUSH
72290: LD_INT 5
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: LIST
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: LIST
72302: LIST
72303: LIST
72304: ST_TO_ADDR
// end ; 2 :
72305: GO 72864
72307: LD_INT 2
72309: DOUBLE
72310: EQUAL
72311: IFTRUE 72315
72313: GO 72444
72315: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72316: LD_ADDR_VAR 0 5
72320: PUSH
72321: LD_VAR 0 1
72325: PUSH
72326: LD_VAR 0 2
72330: PUSH
72331: LD_INT 3
72333: MINUS
72334: PUSH
72335: LD_INT 3
72337: PUSH
72338: EMPTY
72339: LIST
72340: LIST
72341: LIST
72342: PUSH
72343: LD_VAR 0 1
72347: PUSH
72348: LD_INT 4
72350: PLUS
72351: PUSH
72352: LD_VAR 0 2
72356: PUSH
72357: LD_INT 4
72359: PUSH
72360: EMPTY
72361: LIST
72362: LIST
72363: LIST
72364: PUSH
72365: LD_VAR 0 1
72369: PUSH
72370: LD_VAR 0 2
72374: PUSH
72375: LD_INT 4
72377: PLUS
72378: PUSH
72379: LD_INT 0
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: LIST
72386: PUSH
72387: LD_VAR 0 1
72391: PUSH
72392: LD_INT 3
72394: MINUS
72395: PUSH
72396: LD_VAR 0 2
72400: PUSH
72401: LD_INT 1
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: LIST
72408: PUSH
72409: LD_VAR 0 1
72413: PUSH
72414: LD_INT 4
72416: MINUS
72417: PUSH
72418: LD_VAR 0 2
72422: PUSH
72423: LD_INT 4
72425: MINUS
72426: PUSH
72427: LD_INT 2
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: LIST
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: LIST
72439: LIST
72440: LIST
72441: ST_TO_ADDR
// end ; 3 :
72442: GO 72864
72444: LD_INT 3
72446: DOUBLE
72447: EQUAL
72448: IFTRUE 72452
72450: GO 72585
72452: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72453: LD_ADDR_VAR 0 5
72457: PUSH
72458: LD_VAR 0 1
72462: PUSH
72463: LD_INT 3
72465: PLUS
72466: PUSH
72467: LD_VAR 0 2
72471: PUSH
72472: LD_INT 4
72474: PUSH
72475: EMPTY
72476: LIST
72477: LIST
72478: LIST
72479: PUSH
72480: LD_VAR 0 1
72484: PUSH
72485: LD_INT 4
72487: PLUS
72488: PUSH
72489: LD_VAR 0 2
72493: PUSH
72494: LD_INT 4
72496: PLUS
72497: PUSH
72498: LD_INT 5
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: LIST
72505: PUSH
72506: LD_VAR 0 1
72510: PUSH
72511: LD_INT 4
72513: MINUS
72514: PUSH
72515: LD_VAR 0 2
72519: PUSH
72520: LD_INT 1
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: LIST
72527: PUSH
72528: LD_VAR 0 1
72532: PUSH
72533: LD_VAR 0 2
72537: PUSH
72538: LD_INT 4
72540: MINUS
72541: PUSH
72542: LD_INT 3
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: LIST
72549: PUSH
72550: LD_VAR 0 1
72554: PUSH
72555: LD_INT 3
72557: MINUS
72558: PUSH
72559: LD_VAR 0 2
72563: PUSH
72564: LD_INT 3
72566: MINUS
72567: PUSH
72568: LD_INT 2
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: LIST
72575: PUSH
72576: EMPTY
72577: LIST
72578: LIST
72579: LIST
72580: LIST
72581: LIST
72582: ST_TO_ADDR
// end ; 4 :
72583: GO 72864
72585: LD_INT 4
72587: DOUBLE
72588: EQUAL
72589: IFTRUE 72593
72591: GO 72726
72593: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72594: LD_ADDR_VAR 0 5
72598: PUSH
72599: LD_VAR 0 1
72603: PUSH
72604: LD_VAR 0 2
72608: PUSH
72609: LD_INT 4
72611: PLUS
72612: PUSH
72613: LD_INT 0
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: LIST
72620: PUSH
72621: LD_VAR 0 1
72625: PUSH
72626: LD_INT 3
72628: PLUS
72629: PUSH
72630: LD_VAR 0 2
72634: PUSH
72635: LD_INT 3
72637: PLUS
72638: PUSH
72639: LD_INT 5
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: LIST
72646: PUSH
72647: LD_VAR 0 1
72651: PUSH
72652: LD_INT 4
72654: PLUS
72655: PUSH
72656: LD_VAR 0 2
72660: PUSH
72661: LD_INT 4
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: LIST
72668: PUSH
72669: LD_VAR 0 1
72673: PUSH
72674: LD_VAR 0 2
72678: PUSH
72679: LD_INT 3
72681: MINUS
72682: PUSH
72683: LD_INT 3
72685: PUSH
72686: EMPTY
72687: LIST
72688: LIST
72689: LIST
72690: PUSH
72691: LD_VAR 0 1
72695: PUSH
72696: LD_INT 4
72698: MINUS
72699: PUSH
72700: LD_VAR 0 2
72704: PUSH
72705: LD_INT 4
72707: MINUS
72708: PUSH
72709: LD_INT 2
72711: PUSH
72712: EMPTY
72713: LIST
72714: LIST
72715: LIST
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: ST_TO_ADDR
// end ; 5 :
72724: GO 72864
72726: LD_INT 5
72728: DOUBLE
72729: EQUAL
72730: IFTRUE 72734
72732: GO 72863
72734: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72735: LD_ADDR_VAR 0 5
72739: PUSH
72740: LD_VAR 0 1
72744: PUSH
72745: LD_INT 4
72747: MINUS
72748: PUSH
72749: LD_VAR 0 2
72753: PUSH
72754: LD_INT 1
72756: PUSH
72757: EMPTY
72758: LIST
72759: LIST
72760: LIST
72761: PUSH
72762: LD_VAR 0 1
72766: PUSH
72767: LD_VAR 0 2
72771: PUSH
72772: LD_INT 4
72774: MINUS
72775: PUSH
72776: LD_INT 3
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: LIST
72783: PUSH
72784: LD_VAR 0 1
72788: PUSH
72789: LD_INT 4
72791: PLUS
72792: PUSH
72793: LD_VAR 0 2
72797: PUSH
72798: LD_INT 4
72800: PLUS
72801: PUSH
72802: LD_INT 5
72804: PUSH
72805: EMPTY
72806: LIST
72807: LIST
72808: LIST
72809: PUSH
72810: LD_VAR 0 1
72814: PUSH
72815: LD_INT 3
72817: PLUS
72818: PUSH
72819: LD_VAR 0 2
72823: PUSH
72824: LD_INT 4
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: LIST
72831: PUSH
72832: LD_VAR 0 1
72836: PUSH
72837: LD_VAR 0 2
72841: PUSH
72842: LD_INT 3
72844: PLUS
72845: PUSH
72846: LD_INT 0
72848: PUSH
72849: EMPTY
72850: LIST
72851: LIST
72852: LIST
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: LIST
72858: LIST
72859: LIST
72860: ST_TO_ADDR
// end ; end ;
72861: GO 72864
72863: POP
// result := list ;
72864: LD_ADDR_VAR 0 4
72868: PUSH
72869: LD_VAR 0 5
72873: ST_TO_ADDR
// end ;
72874: LD_VAR 0 4
72878: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72879: LD_INT 0
72881: PPUSH
72882: PPUSH
72883: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72884: LD_VAR 0 1
72888: NOT
72889: PUSH
72890: LD_VAR 0 2
72894: PUSH
72895: LD_INT 1
72897: PUSH
72898: LD_INT 2
72900: PUSH
72901: LD_INT 3
72903: PUSH
72904: LD_INT 4
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: LIST
72911: LIST
72912: IN
72913: NOT
72914: OR
72915: IFFALSE 72919
// exit ;
72917: GO 73011
// tmp := [ ] ;
72919: LD_ADDR_VAR 0 5
72923: PUSH
72924: EMPTY
72925: ST_TO_ADDR
// for i in units do
72926: LD_ADDR_VAR 0 4
72930: PUSH
72931: LD_VAR 0 1
72935: PUSH
72936: FOR_IN
72937: IFFALSE 72980
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72939: LD_ADDR_VAR 0 5
72943: PUSH
72944: LD_VAR 0 5
72948: PPUSH
72949: LD_VAR 0 5
72953: PUSH
72954: LD_INT 1
72956: PLUS
72957: PPUSH
72958: LD_VAR 0 4
72962: PPUSH
72963: LD_VAR 0 2
72967: PPUSH
72968: CALL_OW 259
72972: PPUSH
72973: CALL_OW 2
72977: ST_TO_ADDR
72978: GO 72936
72980: POP
72981: POP
// if not tmp then
72982: LD_VAR 0 5
72986: NOT
72987: IFFALSE 72991
// exit ;
72989: GO 73011
// result := SortListByListDesc ( units , tmp ) ;
72991: LD_ADDR_VAR 0 3
72995: PUSH
72996: LD_VAR 0 1
73000: PPUSH
73001: LD_VAR 0 5
73005: PPUSH
73006: CALL_OW 77
73010: ST_TO_ADDR
// end ;
73011: LD_VAR 0 3
73015: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73016: LD_INT 0
73018: PPUSH
73019: PPUSH
73020: PPUSH
// result := false ;
73021: LD_ADDR_VAR 0 3
73025: PUSH
73026: LD_INT 0
73028: ST_TO_ADDR
// x := GetX ( building ) ;
73029: LD_ADDR_VAR 0 4
73033: PUSH
73034: LD_VAR 0 2
73038: PPUSH
73039: CALL_OW 250
73043: ST_TO_ADDR
// y := GetY ( building ) ;
73044: LD_ADDR_VAR 0 5
73048: PUSH
73049: LD_VAR 0 2
73053: PPUSH
73054: CALL_OW 251
73058: ST_TO_ADDR
// if not building or not x or not y then
73059: LD_VAR 0 2
73063: NOT
73064: PUSH
73065: LD_VAR 0 4
73069: NOT
73070: OR
73071: PUSH
73072: LD_VAR 0 5
73076: NOT
73077: OR
73078: IFFALSE 73082
// exit ;
73080: GO 73174
// if GetTaskList ( unit ) then
73082: LD_VAR 0 1
73086: PPUSH
73087: CALL_OW 437
73091: IFFALSE 73174
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73093: LD_STRING e
73095: PUSH
73096: LD_VAR 0 1
73100: PPUSH
73101: CALL_OW 437
73105: PUSH
73106: LD_INT 1
73108: ARRAY
73109: PUSH
73110: LD_INT 1
73112: ARRAY
73113: EQUAL
73114: PUSH
73115: LD_VAR 0 4
73119: PUSH
73120: LD_VAR 0 1
73124: PPUSH
73125: CALL_OW 437
73129: PUSH
73130: LD_INT 1
73132: ARRAY
73133: PUSH
73134: LD_INT 2
73136: ARRAY
73137: EQUAL
73138: AND
73139: PUSH
73140: LD_VAR 0 5
73144: PUSH
73145: LD_VAR 0 1
73149: PPUSH
73150: CALL_OW 437
73154: PUSH
73155: LD_INT 1
73157: ARRAY
73158: PUSH
73159: LD_INT 3
73161: ARRAY
73162: EQUAL
73163: AND
73164: IFFALSE 73174
// result := true end ;
73166: LD_ADDR_VAR 0 3
73170: PUSH
73171: LD_INT 1
73173: ST_TO_ADDR
// end ;
73174: LD_VAR 0 3
73178: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73179: LD_INT 0
73181: PPUSH
// result := false ;
73182: LD_ADDR_VAR 0 4
73186: PUSH
73187: LD_INT 0
73189: ST_TO_ADDR
// if GetTaskList ( unit ) then
73190: LD_VAR 0 1
73194: PPUSH
73195: CALL_OW 437
73199: IFFALSE 73282
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73201: LD_STRING M
73203: PUSH
73204: LD_VAR 0 1
73208: PPUSH
73209: CALL_OW 437
73213: PUSH
73214: LD_INT 1
73216: ARRAY
73217: PUSH
73218: LD_INT 1
73220: ARRAY
73221: EQUAL
73222: PUSH
73223: LD_VAR 0 2
73227: PUSH
73228: LD_VAR 0 1
73232: PPUSH
73233: CALL_OW 437
73237: PUSH
73238: LD_INT 1
73240: ARRAY
73241: PUSH
73242: LD_INT 2
73244: ARRAY
73245: EQUAL
73246: AND
73247: PUSH
73248: LD_VAR 0 3
73252: PUSH
73253: LD_VAR 0 1
73257: PPUSH
73258: CALL_OW 437
73262: PUSH
73263: LD_INT 1
73265: ARRAY
73266: PUSH
73267: LD_INT 3
73269: ARRAY
73270: EQUAL
73271: AND
73272: IFFALSE 73282
// result := true ;
73274: LD_ADDR_VAR 0 4
73278: PUSH
73279: LD_INT 1
73281: ST_TO_ADDR
// end ; end ;
73282: LD_VAR 0 4
73286: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73287: LD_INT 0
73289: PPUSH
73290: PPUSH
73291: PPUSH
73292: PPUSH
// if not unit or not area then
73293: LD_VAR 0 1
73297: NOT
73298: PUSH
73299: LD_VAR 0 2
73303: NOT
73304: OR
73305: IFFALSE 73309
// exit ;
73307: GO 73473
// tmp := AreaToList ( area , i ) ;
73309: LD_ADDR_VAR 0 6
73313: PUSH
73314: LD_VAR 0 2
73318: PPUSH
73319: LD_VAR 0 5
73323: PPUSH
73324: CALL_OW 517
73328: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73329: LD_ADDR_VAR 0 5
73333: PUSH
73334: DOUBLE
73335: LD_INT 1
73337: DEC
73338: ST_TO_ADDR
73339: LD_VAR 0 6
73343: PUSH
73344: LD_INT 1
73346: ARRAY
73347: PUSH
73348: FOR_TO
73349: IFFALSE 73471
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73351: LD_ADDR_VAR 0 7
73355: PUSH
73356: LD_VAR 0 6
73360: PUSH
73361: LD_INT 1
73363: ARRAY
73364: PUSH
73365: LD_VAR 0 5
73369: ARRAY
73370: PUSH
73371: LD_VAR 0 6
73375: PUSH
73376: LD_INT 2
73378: ARRAY
73379: PUSH
73380: LD_VAR 0 5
73384: ARRAY
73385: PUSH
73386: EMPTY
73387: LIST
73388: LIST
73389: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73390: LD_VAR 0 7
73394: PUSH
73395: LD_INT 1
73397: ARRAY
73398: PPUSH
73399: LD_VAR 0 7
73403: PUSH
73404: LD_INT 2
73406: ARRAY
73407: PPUSH
73408: CALL_OW 428
73412: PUSH
73413: LD_INT 0
73415: EQUAL
73416: IFFALSE 73469
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73418: LD_VAR 0 1
73422: PPUSH
73423: LD_VAR 0 7
73427: PUSH
73428: LD_INT 1
73430: ARRAY
73431: PPUSH
73432: LD_VAR 0 7
73436: PUSH
73437: LD_INT 2
73439: ARRAY
73440: PPUSH
73441: LD_VAR 0 3
73445: PPUSH
73446: CALL_OW 48
// result := IsPlaced ( unit ) ;
73450: LD_ADDR_VAR 0 4
73454: PUSH
73455: LD_VAR 0 1
73459: PPUSH
73460: CALL_OW 305
73464: ST_TO_ADDR
// exit ;
73465: POP
73466: POP
73467: GO 73473
// end ; end ;
73469: GO 73348
73471: POP
73472: POP
// end ;
73473: LD_VAR 0 4
73477: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73478: LD_INT 0
73480: PPUSH
73481: PPUSH
73482: PPUSH
// if not side or side > 8 then
73483: LD_VAR 0 1
73487: NOT
73488: PUSH
73489: LD_VAR 0 1
73493: PUSH
73494: LD_INT 8
73496: GREATER
73497: OR
73498: IFFALSE 73502
// exit ;
73500: GO 73689
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73502: LD_ADDR_VAR 0 4
73506: PUSH
73507: LD_INT 22
73509: PUSH
73510: LD_VAR 0 1
73514: PUSH
73515: EMPTY
73516: LIST
73517: LIST
73518: PUSH
73519: LD_INT 21
73521: PUSH
73522: LD_INT 3
73524: PUSH
73525: EMPTY
73526: LIST
73527: LIST
73528: PUSH
73529: EMPTY
73530: LIST
73531: LIST
73532: PPUSH
73533: CALL_OW 69
73537: ST_TO_ADDR
// if not tmp then
73538: LD_VAR 0 4
73542: NOT
73543: IFFALSE 73547
// exit ;
73545: GO 73689
// enable_addtolog := true ;
73547: LD_ADDR_OWVAR 81
73551: PUSH
73552: LD_INT 1
73554: ST_TO_ADDR
// AddToLog ( [ ) ;
73555: LD_STRING [
73557: PPUSH
73558: CALL_OW 561
// for i in tmp do
73562: LD_ADDR_VAR 0 3
73566: PUSH
73567: LD_VAR 0 4
73571: PUSH
73572: FOR_IN
73573: IFFALSE 73680
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73575: LD_STRING [
73577: PUSH
73578: LD_VAR 0 3
73582: PPUSH
73583: CALL_OW 266
73587: STR
73588: PUSH
73589: LD_STRING , 
73591: STR
73592: PUSH
73593: LD_VAR 0 3
73597: PPUSH
73598: CALL_OW 250
73602: STR
73603: PUSH
73604: LD_STRING , 
73606: STR
73607: PUSH
73608: LD_VAR 0 3
73612: PPUSH
73613: CALL_OW 251
73617: STR
73618: PUSH
73619: LD_STRING , 
73621: STR
73622: PUSH
73623: LD_VAR 0 3
73627: PPUSH
73628: CALL_OW 254
73632: STR
73633: PUSH
73634: LD_STRING , 
73636: STR
73637: PUSH
73638: LD_VAR 0 3
73642: PPUSH
73643: LD_INT 1
73645: PPUSH
73646: CALL_OW 268
73650: STR
73651: PUSH
73652: LD_STRING , 
73654: STR
73655: PUSH
73656: LD_VAR 0 3
73660: PPUSH
73661: LD_INT 2
73663: PPUSH
73664: CALL_OW 268
73668: STR
73669: PUSH
73670: LD_STRING ],
73672: STR
73673: PPUSH
73674: CALL_OW 561
// end ;
73678: GO 73572
73680: POP
73681: POP
// AddToLog ( ]; ) ;
73682: LD_STRING ];
73684: PPUSH
73685: CALL_OW 561
// end ;
73689: LD_VAR 0 2
73693: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73694: LD_INT 0
73696: PPUSH
73697: PPUSH
73698: PPUSH
73699: PPUSH
73700: PPUSH
// if not area or not rate or not max then
73701: LD_VAR 0 1
73705: NOT
73706: PUSH
73707: LD_VAR 0 2
73711: NOT
73712: OR
73713: PUSH
73714: LD_VAR 0 4
73718: NOT
73719: OR
73720: IFFALSE 73724
// exit ;
73722: GO 73913
// while 1 do
73724: LD_INT 1
73726: IFFALSE 73913
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73728: LD_ADDR_VAR 0 9
73732: PUSH
73733: LD_VAR 0 1
73737: PPUSH
73738: LD_INT 1
73740: PPUSH
73741: CALL_OW 287
73745: PUSH
73746: LD_INT 10
73748: MUL
73749: ST_TO_ADDR
// r := rate / 10 ;
73750: LD_ADDR_VAR 0 7
73754: PUSH
73755: LD_VAR 0 2
73759: PUSH
73760: LD_INT 10
73762: DIVREAL
73763: ST_TO_ADDR
// time := 1 1$00 ;
73764: LD_ADDR_VAR 0 8
73768: PUSH
73769: LD_INT 2100
73771: ST_TO_ADDR
// if amount < min then
73772: LD_VAR 0 9
73776: PUSH
73777: LD_VAR 0 3
73781: LESS
73782: IFFALSE 73800
// r := r * 2 else
73784: LD_ADDR_VAR 0 7
73788: PUSH
73789: LD_VAR 0 7
73793: PUSH
73794: LD_INT 2
73796: MUL
73797: ST_TO_ADDR
73798: GO 73826
// if amount > max then
73800: LD_VAR 0 9
73804: PUSH
73805: LD_VAR 0 4
73809: GREATER
73810: IFFALSE 73826
// r := r / 2 ;
73812: LD_ADDR_VAR 0 7
73816: PUSH
73817: LD_VAR 0 7
73821: PUSH
73822: LD_INT 2
73824: DIVREAL
73825: ST_TO_ADDR
// time := time / r ;
73826: LD_ADDR_VAR 0 8
73830: PUSH
73831: LD_VAR 0 8
73835: PUSH
73836: LD_VAR 0 7
73840: DIVREAL
73841: ST_TO_ADDR
// if time < 0 then
73842: LD_VAR 0 8
73846: PUSH
73847: LD_INT 0
73849: LESS
73850: IFFALSE 73867
// time := time * - 1 ;
73852: LD_ADDR_VAR 0 8
73856: PUSH
73857: LD_VAR 0 8
73861: PUSH
73862: LD_INT 1
73864: NEG
73865: MUL
73866: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73867: LD_VAR 0 8
73871: PUSH
73872: LD_INT 35
73874: PPUSH
73875: LD_INT 875
73877: PPUSH
73878: CALL_OW 12
73882: PLUS
73883: PPUSH
73884: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73888: LD_INT 1
73890: PPUSH
73891: LD_INT 5
73893: PPUSH
73894: CALL_OW 12
73898: PPUSH
73899: LD_VAR 0 1
73903: PPUSH
73904: LD_INT 1
73906: PPUSH
73907: CALL_OW 55
// end ;
73911: GO 73724
// end ;
73913: LD_VAR 0 5
73917: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73918: LD_INT 0
73920: PPUSH
73921: PPUSH
73922: PPUSH
73923: PPUSH
73924: PPUSH
73925: PPUSH
73926: PPUSH
73927: PPUSH
// if not turrets or not factories then
73928: LD_VAR 0 1
73932: NOT
73933: PUSH
73934: LD_VAR 0 2
73938: NOT
73939: OR
73940: IFFALSE 73944
// exit ;
73942: GO 74251
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73944: LD_ADDR_VAR 0 10
73948: PUSH
73949: LD_INT 5
73951: PUSH
73952: LD_INT 6
73954: PUSH
73955: EMPTY
73956: LIST
73957: LIST
73958: PUSH
73959: LD_INT 2
73961: PUSH
73962: LD_INT 4
73964: PUSH
73965: EMPTY
73966: LIST
73967: LIST
73968: PUSH
73969: LD_INT 3
73971: PUSH
73972: LD_INT 5
73974: PUSH
73975: EMPTY
73976: LIST
73977: LIST
73978: PUSH
73979: EMPTY
73980: LIST
73981: LIST
73982: LIST
73983: PUSH
73984: LD_INT 24
73986: PUSH
73987: LD_INT 25
73989: PUSH
73990: EMPTY
73991: LIST
73992: LIST
73993: PUSH
73994: LD_INT 23
73996: PUSH
73997: LD_INT 27
73999: PUSH
74000: EMPTY
74001: LIST
74002: LIST
74003: PUSH
74004: EMPTY
74005: LIST
74006: LIST
74007: PUSH
74008: LD_INT 42
74010: PUSH
74011: LD_INT 43
74013: PUSH
74014: EMPTY
74015: LIST
74016: LIST
74017: PUSH
74018: LD_INT 44
74020: PUSH
74021: LD_INT 46
74023: PUSH
74024: EMPTY
74025: LIST
74026: LIST
74027: PUSH
74028: LD_INT 45
74030: PUSH
74031: LD_INT 47
74033: PUSH
74034: EMPTY
74035: LIST
74036: LIST
74037: PUSH
74038: EMPTY
74039: LIST
74040: LIST
74041: LIST
74042: PUSH
74043: EMPTY
74044: LIST
74045: LIST
74046: LIST
74047: ST_TO_ADDR
// result := [ ] ;
74048: LD_ADDR_VAR 0 3
74052: PUSH
74053: EMPTY
74054: ST_TO_ADDR
// for i in turrets do
74055: LD_ADDR_VAR 0 4
74059: PUSH
74060: LD_VAR 0 1
74064: PUSH
74065: FOR_IN
74066: IFFALSE 74249
// begin nat := GetNation ( i ) ;
74068: LD_ADDR_VAR 0 7
74072: PUSH
74073: LD_VAR 0 4
74077: PPUSH
74078: CALL_OW 248
74082: ST_TO_ADDR
// weapon := 0 ;
74083: LD_ADDR_VAR 0 8
74087: PUSH
74088: LD_INT 0
74090: ST_TO_ADDR
// if not nat then
74091: LD_VAR 0 7
74095: NOT
74096: IFFALSE 74100
// continue ;
74098: GO 74065
// for j in list [ nat ] do
74100: LD_ADDR_VAR 0 5
74104: PUSH
74105: LD_VAR 0 10
74109: PUSH
74110: LD_VAR 0 7
74114: ARRAY
74115: PUSH
74116: FOR_IN
74117: IFFALSE 74158
// if GetBWeapon ( i ) = j [ 1 ] then
74119: LD_VAR 0 4
74123: PPUSH
74124: CALL_OW 269
74128: PUSH
74129: LD_VAR 0 5
74133: PUSH
74134: LD_INT 1
74136: ARRAY
74137: EQUAL
74138: IFFALSE 74156
// begin weapon := j [ 2 ] ;
74140: LD_ADDR_VAR 0 8
74144: PUSH
74145: LD_VAR 0 5
74149: PUSH
74150: LD_INT 2
74152: ARRAY
74153: ST_TO_ADDR
// break ;
74154: GO 74158
// end ;
74156: GO 74116
74158: POP
74159: POP
// if not weapon then
74160: LD_VAR 0 8
74164: NOT
74165: IFFALSE 74169
// continue ;
74167: GO 74065
// for k in factories do
74169: LD_ADDR_VAR 0 6
74173: PUSH
74174: LD_VAR 0 2
74178: PUSH
74179: FOR_IN
74180: IFFALSE 74245
// begin weapons := AvailableWeaponList ( k ) ;
74182: LD_ADDR_VAR 0 9
74186: PUSH
74187: LD_VAR 0 6
74191: PPUSH
74192: CALL_OW 478
74196: ST_TO_ADDR
// if not weapons then
74197: LD_VAR 0 9
74201: NOT
74202: IFFALSE 74206
// continue ;
74204: GO 74179
// if weapon in weapons then
74206: LD_VAR 0 8
74210: PUSH
74211: LD_VAR 0 9
74215: IN
74216: IFFALSE 74243
// begin result := [ i , weapon ] ;
74218: LD_ADDR_VAR 0 3
74222: PUSH
74223: LD_VAR 0 4
74227: PUSH
74228: LD_VAR 0 8
74232: PUSH
74233: EMPTY
74234: LIST
74235: LIST
74236: ST_TO_ADDR
// exit ;
74237: POP
74238: POP
74239: POP
74240: POP
74241: GO 74251
// end ; end ;
74243: GO 74179
74245: POP
74246: POP
// end ;
74247: GO 74065
74249: POP
74250: POP
// end ;
74251: LD_VAR 0 3
74255: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74256: LD_INT 0
74258: PPUSH
// if not side or side > 8 then
74259: LD_VAR 0 3
74263: NOT
74264: PUSH
74265: LD_VAR 0 3
74269: PUSH
74270: LD_INT 8
74272: GREATER
74273: OR
74274: IFFALSE 74278
// exit ;
74276: GO 74337
// if not range then
74278: LD_VAR 0 4
74282: NOT
74283: IFFALSE 74294
// range := - 12 ;
74285: LD_ADDR_VAR 0 4
74289: PUSH
74290: LD_INT 12
74292: NEG
74293: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74294: LD_VAR 0 1
74298: PPUSH
74299: LD_VAR 0 2
74303: PPUSH
74304: LD_VAR 0 3
74308: PPUSH
74309: LD_VAR 0 4
74313: PPUSH
74314: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74318: LD_VAR 0 1
74322: PPUSH
74323: LD_VAR 0 2
74327: PPUSH
74328: LD_VAR 0 3
74332: PPUSH
74333: CALL_OW 331
// end ;
74337: LD_VAR 0 5
74341: RET
// export function Video ( mode ) ; begin
74342: LD_INT 0
74344: PPUSH
// ingame_video = mode ;
74345: LD_ADDR_OWVAR 52
74349: PUSH
74350: LD_VAR 0 1
74354: ST_TO_ADDR
// interface_hidden = mode ;
74355: LD_ADDR_OWVAR 54
74359: PUSH
74360: LD_VAR 0 1
74364: ST_TO_ADDR
// end ;
74365: LD_VAR 0 2
74369: RET
// export function Join ( array , element ) ; begin
74370: LD_INT 0
74372: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74373: LD_ADDR_VAR 0 3
74377: PUSH
74378: LD_VAR 0 1
74382: PPUSH
74383: LD_VAR 0 1
74387: PUSH
74388: LD_INT 1
74390: PLUS
74391: PPUSH
74392: LD_VAR 0 2
74396: PPUSH
74397: CALL_OW 1
74401: ST_TO_ADDR
// end ;
74402: LD_VAR 0 3
74406: RET
// export function JoinUnion ( array , element ) ; begin
74407: LD_INT 0
74409: PPUSH
// result := array union element ;
74410: LD_ADDR_VAR 0 3
74414: PUSH
74415: LD_VAR 0 1
74419: PUSH
74420: LD_VAR 0 2
74424: UNION
74425: ST_TO_ADDR
// end ;
74426: LD_VAR 0 3
74430: RET
// export function GetBehemoths ( side ) ; begin
74431: LD_INT 0
74433: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74434: LD_ADDR_VAR 0 2
74438: PUSH
74439: LD_INT 22
74441: PUSH
74442: LD_VAR 0 1
74446: PUSH
74447: EMPTY
74448: LIST
74449: LIST
74450: PUSH
74451: LD_INT 31
74453: PUSH
74454: LD_INT 25
74456: PUSH
74457: EMPTY
74458: LIST
74459: LIST
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: PPUSH
74465: CALL_OW 69
74469: ST_TO_ADDR
// end ;
74470: LD_VAR 0 2
74474: RET
// export function Shuffle ( array ) ; var i , index ; begin
74475: LD_INT 0
74477: PPUSH
74478: PPUSH
74479: PPUSH
// result := [ ] ;
74480: LD_ADDR_VAR 0 2
74484: PUSH
74485: EMPTY
74486: ST_TO_ADDR
// if not array then
74487: LD_VAR 0 1
74491: NOT
74492: IFFALSE 74496
// exit ;
74494: GO 74595
// Randomize ;
74496: CALL_OW 10
// for i = array downto 1 do
74500: LD_ADDR_VAR 0 3
74504: PUSH
74505: DOUBLE
74506: LD_VAR 0 1
74510: INC
74511: ST_TO_ADDR
74512: LD_INT 1
74514: PUSH
74515: FOR_DOWNTO
74516: IFFALSE 74593
// begin index := rand ( 1 , array ) ;
74518: LD_ADDR_VAR 0 4
74522: PUSH
74523: LD_INT 1
74525: PPUSH
74526: LD_VAR 0 1
74530: PPUSH
74531: CALL_OW 12
74535: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74536: LD_ADDR_VAR 0 2
74540: PUSH
74541: LD_VAR 0 2
74545: PPUSH
74546: LD_VAR 0 2
74550: PUSH
74551: LD_INT 1
74553: PLUS
74554: PPUSH
74555: LD_VAR 0 1
74559: PUSH
74560: LD_VAR 0 4
74564: ARRAY
74565: PPUSH
74566: CALL_OW 2
74570: ST_TO_ADDR
// array := Delete ( array , index ) ;
74571: LD_ADDR_VAR 0 1
74575: PUSH
74576: LD_VAR 0 1
74580: PPUSH
74581: LD_VAR 0 4
74585: PPUSH
74586: CALL_OW 3
74590: ST_TO_ADDR
// end ;
74591: GO 74515
74593: POP
74594: POP
// end ;
74595: LD_VAR 0 2
74599: RET
// export function GetBaseMaterials ( base ) ; begin
74600: LD_INT 0
74602: PPUSH
// result := [ 0 , 0 , 0 ] ;
74603: LD_ADDR_VAR 0 2
74607: PUSH
74608: LD_INT 0
74610: PUSH
74611: LD_INT 0
74613: PUSH
74614: LD_INT 0
74616: PUSH
74617: EMPTY
74618: LIST
74619: LIST
74620: LIST
74621: ST_TO_ADDR
// if not base then
74622: LD_VAR 0 1
74626: NOT
74627: IFFALSE 74631
// exit ;
74629: GO 74680
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74631: LD_ADDR_VAR 0 2
74635: PUSH
74636: LD_VAR 0 1
74640: PPUSH
74641: LD_INT 1
74643: PPUSH
74644: CALL_OW 275
74648: PUSH
74649: LD_VAR 0 1
74653: PPUSH
74654: LD_INT 2
74656: PPUSH
74657: CALL_OW 275
74661: PUSH
74662: LD_VAR 0 1
74666: PPUSH
74667: LD_INT 3
74669: PPUSH
74670: CALL_OW 275
74674: PUSH
74675: EMPTY
74676: LIST
74677: LIST
74678: LIST
74679: ST_TO_ADDR
// end ;
74680: LD_VAR 0 2
74684: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74685: LD_INT 0
74687: PPUSH
74688: PPUSH
// result := array ;
74689: LD_ADDR_VAR 0 3
74693: PUSH
74694: LD_VAR 0 1
74698: ST_TO_ADDR
// if size > 0 then
74699: LD_VAR 0 2
74703: PUSH
74704: LD_INT 0
74706: GREATER
74707: IFFALSE 74753
// for i := array downto size do
74709: LD_ADDR_VAR 0 4
74713: PUSH
74714: DOUBLE
74715: LD_VAR 0 1
74719: INC
74720: ST_TO_ADDR
74721: LD_VAR 0 2
74725: PUSH
74726: FOR_DOWNTO
74727: IFFALSE 74751
// result := Delete ( result , result ) ;
74729: LD_ADDR_VAR 0 3
74733: PUSH
74734: LD_VAR 0 3
74738: PPUSH
74739: LD_VAR 0 3
74743: PPUSH
74744: CALL_OW 3
74748: ST_TO_ADDR
74749: GO 74726
74751: POP
74752: POP
// end ;
74753: LD_VAR 0 3
74757: RET
// export function ComExit ( unit ) ; var tmp ; begin
74758: LD_INT 0
74760: PPUSH
74761: PPUSH
// if not IsInUnit ( unit ) then
74762: LD_VAR 0 1
74766: PPUSH
74767: CALL_OW 310
74771: NOT
74772: IFFALSE 74776
// exit ;
74774: GO 74836
// tmp := IsInUnit ( unit ) ;
74776: LD_ADDR_VAR 0 3
74780: PUSH
74781: LD_VAR 0 1
74785: PPUSH
74786: CALL_OW 310
74790: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74791: LD_VAR 0 3
74795: PPUSH
74796: CALL_OW 247
74800: PUSH
74801: LD_INT 2
74803: EQUAL
74804: IFFALSE 74817
// ComExitVehicle ( unit ) else
74806: LD_VAR 0 1
74810: PPUSH
74811: CALL_OW 121
74815: GO 74826
// ComExitBuilding ( unit ) ;
74817: LD_VAR 0 1
74821: PPUSH
74822: CALL_OW 122
// result := tmp ;
74826: LD_ADDR_VAR 0 2
74830: PUSH
74831: LD_VAR 0 3
74835: ST_TO_ADDR
// end ;
74836: LD_VAR 0 2
74840: RET
// export function ComExitAll ( units ) ; var i ; begin
74841: LD_INT 0
74843: PPUSH
74844: PPUSH
// if not units then
74845: LD_VAR 0 1
74849: NOT
74850: IFFALSE 74854
// exit ;
74852: GO 74880
// for i in units do
74854: LD_ADDR_VAR 0 3
74858: PUSH
74859: LD_VAR 0 1
74863: PUSH
74864: FOR_IN
74865: IFFALSE 74878
// ComExit ( i ) ;
74867: LD_VAR 0 3
74871: PPUSH
74872: CALL 74758 0 1
74876: GO 74864
74878: POP
74879: POP
// end ;
74880: LD_VAR 0 2
74884: RET
// export function ResetHc ; begin
74885: LD_INT 0
74887: PPUSH
// InitHc ;
74888: CALL_OW 19
// hc_importance := 0 ;
74892: LD_ADDR_OWVAR 32
74896: PUSH
74897: LD_INT 0
74899: ST_TO_ADDR
// end ;
74900: LD_VAR 0 1
74904: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74905: LD_INT 0
74907: PPUSH
74908: PPUSH
74909: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74910: LD_ADDR_VAR 0 6
74914: PUSH
74915: LD_VAR 0 1
74919: PUSH
74920: LD_VAR 0 3
74924: PLUS
74925: PUSH
74926: LD_INT 2
74928: DIV
74929: ST_TO_ADDR
// if _x < 0 then
74930: LD_VAR 0 6
74934: PUSH
74935: LD_INT 0
74937: LESS
74938: IFFALSE 74955
// _x := _x * - 1 ;
74940: LD_ADDR_VAR 0 6
74944: PUSH
74945: LD_VAR 0 6
74949: PUSH
74950: LD_INT 1
74952: NEG
74953: MUL
74954: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74955: LD_ADDR_VAR 0 7
74959: PUSH
74960: LD_VAR 0 2
74964: PUSH
74965: LD_VAR 0 4
74969: PLUS
74970: PUSH
74971: LD_INT 2
74973: DIV
74974: ST_TO_ADDR
// if _y < 0 then
74975: LD_VAR 0 7
74979: PUSH
74980: LD_INT 0
74982: LESS
74983: IFFALSE 75000
// _y := _y * - 1 ;
74985: LD_ADDR_VAR 0 7
74989: PUSH
74990: LD_VAR 0 7
74994: PUSH
74995: LD_INT 1
74997: NEG
74998: MUL
74999: ST_TO_ADDR
// result := [ _x , _y ] ;
75000: LD_ADDR_VAR 0 5
75004: PUSH
75005: LD_VAR 0 6
75009: PUSH
75010: LD_VAR 0 7
75014: PUSH
75015: EMPTY
75016: LIST
75017: LIST
75018: ST_TO_ADDR
// end ;
75019: LD_VAR 0 5
75023: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75024: LD_INT 0
75026: PPUSH
75027: PPUSH
75028: PPUSH
75029: PPUSH
// task := GetTaskList ( unit ) ;
75030: LD_ADDR_VAR 0 7
75034: PUSH
75035: LD_VAR 0 1
75039: PPUSH
75040: CALL_OW 437
75044: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75045: LD_VAR 0 7
75049: NOT
75050: PUSH
75051: LD_VAR 0 1
75055: PPUSH
75056: LD_VAR 0 2
75060: PPUSH
75061: CALL_OW 308
75065: NOT
75066: AND
75067: IFFALSE 75071
// exit ;
75069: GO 75189
// if IsInArea ( unit , area ) then
75071: LD_VAR 0 1
75075: PPUSH
75076: LD_VAR 0 2
75080: PPUSH
75081: CALL_OW 308
75085: IFFALSE 75103
// begin ComMoveToArea ( unit , goAway ) ;
75087: LD_VAR 0 1
75091: PPUSH
75092: LD_VAR 0 3
75096: PPUSH
75097: CALL_OW 113
// exit ;
75101: GO 75189
// end ; if task [ 1 ] [ 1 ] <> M then
75103: LD_VAR 0 7
75107: PUSH
75108: LD_INT 1
75110: ARRAY
75111: PUSH
75112: LD_INT 1
75114: ARRAY
75115: PUSH
75116: LD_STRING M
75118: NONEQUAL
75119: IFFALSE 75123
// exit ;
75121: GO 75189
// x := task [ 1 ] [ 2 ] ;
75123: LD_ADDR_VAR 0 5
75127: PUSH
75128: LD_VAR 0 7
75132: PUSH
75133: LD_INT 1
75135: ARRAY
75136: PUSH
75137: LD_INT 2
75139: ARRAY
75140: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75141: LD_ADDR_VAR 0 6
75145: PUSH
75146: LD_VAR 0 7
75150: PUSH
75151: LD_INT 1
75153: ARRAY
75154: PUSH
75155: LD_INT 3
75157: ARRAY
75158: ST_TO_ADDR
// if InArea ( x , y , area ) then
75159: LD_VAR 0 5
75163: PPUSH
75164: LD_VAR 0 6
75168: PPUSH
75169: LD_VAR 0 2
75173: PPUSH
75174: CALL_OW 309
75178: IFFALSE 75189
// ComStop ( unit ) ;
75180: LD_VAR 0 1
75184: PPUSH
75185: CALL_OW 141
// end ;
75189: LD_VAR 0 4
75193: RET
// export function Abs ( value ) ; begin
75194: LD_INT 0
75196: PPUSH
// result := value ;
75197: LD_ADDR_VAR 0 2
75201: PUSH
75202: LD_VAR 0 1
75206: ST_TO_ADDR
// if value < 0 then
75207: LD_VAR 0 1
75211: PUSH
75212: LD_INT 0
75214: LESS
75215: IFFALSE 75232
// result := value * - 1 ;
75217: LD_ADDR_VAR 0 2
75221: PUSH
75222: LD_VAR 0 1
75226: PUSH
75227: LD_INT 1
75229: NEG
75230: MUL
75231: ST_TO_ADDR
// end ;
75232: LD_VAR 0 2
75236: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75237: LD_INT 0
75239: PPUSH
75240: PPUSH
75241: PPUSH
75242: PPUSH
75243: PPUSH
75244: PPUSH
75245: PPUSH
75246: PPUSH
// if not unit or not building then
75247: LD_VAR 0 1
75251: NOT
75252: PUSH
75253: LD_VAR 0 2
75257: NOT
75258: OR
75259: IFFALSE 75263
// exit ;
75261: GO 75489
// x := GetX ( building ) ;
75263: LD_ADDR_VAR 0 4
75267: PUSH
75268: LD_VAR 0 2
75272: PPUSH
75273: CALL_OW 250
75277: ST_TO_ADDR
// y := GetY ( building ) ;
75278: LD_ADDR_VAR 0 6
75282: PUSH
75283: LD_VAR 0 2
75287: PPUSH
75288: CALL_OW 251
75292: ST_TO_ADDR
// d := GetDir ( building ) ;
75293: LD_ADDR_VAR 0 8
75297: PUSH
75298: LD_VAR 0 2
75302: PPUSH
75303: CALL_OW 254
75307: ST_TO_ADDR
// r := 4 ;
75308: LD_ADDR_VAR 0 9
75312: PUSH
75313: LD_INT 4
75315: ST_TO_ADDR
// for i := 1 to 5 do
75316: LD_ADDR_VAR 0 10
75320: PUSH
75321: DOUBLE
75322: LD_INT 1
75324: DEC
75325: ST_TO_ADDR
75326: LD_INT 5
75328: PUSH
75329: FOR_TO
75330: IFFALSE 75487
// begin _x := ShiftX ( x , d , r + i ) ;
75332: LD_ADDR_VAR 0 5
75336: PUSH
75337: LD_VAR 0 4
75341: PPUSH
75342: LD_VAR 0 8
75346: PPUSH
75347: LD_VAR 0 9
75351: PUSH
75352: LD_VAR 0 10
75356: PLUS
75357: PPUSH
75358: CALL_OW 272
75362: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75363: LD_ADDR_VAR 0 7
75367: PUSH
75368: LD_VAR 0 6
75372: PPUSH
75373: LD_VAR 0 8
75377: PPUSH
75378: LD_VAR 0 9
75382: PUSH
75383: LD_VAR 0 10
75387: PLUS
75388: PPUSH
75389: CALL_OW 273
75393: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75394: LD_VAR 0 5
75398: PPUSH
75399: LD_VAR 0 7
75403: PPUSH
75404: CALL_OW 488
75408: PUSH
75409: LD_VAR 0 5
75413: PPUSH
75414: LD_VAR 0 7
75418: PPUSH
75419: CALL_OW 428
75423: PPUSH
75424: CALL_OW 247
75428: PUSH
75429: LD_INT 3
75431: PUSH
75432: LD_INT 2
75434: PUSH
75435: EMPTY
75436: LIST
75437: LIST
75438: IN
75439: NOT
75440: AND
75441: IFFALSE 75485
// begin ComMoveXY ( unit , _x , _y ) ;
75443: LD_VAR 0 1
75447: PPUSH
75448: LD_VAR 0 5
75452: PPUSH
75453: LD_VAR 0 7
75457: PPUSH
75458: CALL_OW 111
// result := [ _x , _y ] ;
75462: LD_ADDR_VAR 0 3
75466: PUSH
75467: LD_VAR 0 5
75471: PUSH
75472: LD_VAR 0 7
75476: PUSH
75477: EMPTY
75478: LIST
75479: LIST
75480: ST_TO_ADDR
// exit ;
75481: POP
75482: POP
75483: GO 75489
// end ; end ;
75485: GO 75329
75487: POP
75488: POP
// end ;
75489: LD_VAR 0 3
75493: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75494: LD_INT 0
75496: PPUSH
75497: PPUSH
75498: PPUSH
// result := 0 ;
75499: LD_ADDR_VAR 0 3
75503: PUSH
75504: LD_INT 0
75506: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75507: LD_VAR 0 1
75511: PUSH
75512: LD_INT 0
75514: LESS
75515: PUSH
75516: LD_VAR 0 1
75520: PUSH
75521: LD_INT 8
75523: GREATER
75524: OR
75525: PUSH
75526: LD_VAR 0 2
75530: PUSH
75531: LD_INT 0
75533: LESS
75534: OR
75535: PUSH
75536: LD_VAR 0 2
75540: PUSH
75541: LD_INT 8
75543: GREATER
75544: OR
75545: IFFALSE 75549
// exit ;
75547: GO 75624
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75549: LD_ADDR_VAR 0 4
75553: PUSH
75554: LD_INT 22
75556: PUSH
75557: LD_VAR 0 2
75561: PUSH
75562: EMPTY
75563: LIST
75564: LIST
75565: PPUSH
75566: CALL_OW 69
75570: PUSH
75571: FOR_IN
75572: IFFALSE 75622
// begin un := UnitShoot ( i ) ;
75574: LD_ADDR_VAR 0 5
75578: PUSH
75579: LD_VAR 0 4
75583: PPUSH
75584: CALL_OW 504
75588: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75589: LD_VAR 0 5
75593: PPUSH
75594: CALL_OW 255
75598: PUSH
75599: LD_VAR 0 1
75603: EQUAL
75604: IFFALSE 75620
// begin result := un ;
75606: LD_ADDR_VAR 0 3
75610: PUSH
75611: LD_VAR 0 5
75615: ST_TO_ADDR
// exit ;
75616: POP
75617: POP
75618: GO 75624
// end ; end ;
75620: GO 75571
75622: POP
75623: POP
// end ;
75624: LD_VAR 0 3
75628: RET
// export function GetCargoBay ( units ) ; begin
75629: LD_INT 0
75631: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75632: LD_ADDR_VAR 0 2
75636: PUSH
75637: LD_VAR 0 1
75641: PPUSH
75642: LD_INT 2
75644: PUSH
75645: LD_INT 34
75647: PUSH
75648: LD_INT 12
75650: PUSH
75651: EMPTY
75652: LIST
75653: LIST
75654: PUSH
75655: LD_INT 34
75657: PUSH
75658: LD_INT 51
75660: PUSH
75661: EMPTY
75662: LIST
75663: LIST
75664: PUSH
75665: LD_INT 34
75667: PUSH
75668: LD_INT 32
75670: PUSH
75671: EMPTY
75672: LIST
75673: LIST
75674: PUSH
75675: LD_INT 34
75677: PUSH
75678: LD_EXP 33
75682: PUSH
75683: EMPTY
75684: LIST
75685: LIST
75686: PUSH
75687: EMPTY
75688: LIST
75689: LIST
75690: LIST
75691: LIST
75692: LIST
75693: PPUSH
75694: CALL_OW 72
75698: ST_TO_ADDR
// end ;
75699: LD_VAR 0 2
75703: RET
// export function Negate ( value ) ; begin
75704: LD_INT 0
75706: PPUSH
// result := not value ;
75707: LD_ADDR_VAR 0 2
75711: PUSH
75712: LD_VAR 0 1
75716: NOT
75717: ST_TO_ADDR
// end ;
75718: LD_VAR 0 2
75722: RET
// export function Inc ( value ) ; begin
75723: LD_INT 0
75725: PPUSH
// result := value + 1 ;
75726: LD_ADDR_VAR 0 2
75730: PUSH
75731: LD_VAR 0 1
75735: PUSH
75736: LD_INT 1
75738: PLUS
75739: ST_TO_ADDR
// end ;
75740: LD_VAR 0 2
75744: RET
// export function Dec ( value ) ; begin
75745: LD_INT 0
75747: PPUSH
// result := value - 1 ;
75748: LD_ADDR_VAR 0 2
75752: PUSH
75753: LD_VAR 0 1
75757: PUSH
75758: LD_INT 1
75760: MINUS
75761: ST_TO_ADDR
// end ;
75762: LD_VAR 0 2
75766: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75767: LD_INT 0
75769: PPUSH
75770: PPUSH
75771: PPUSH
75772: PPUSH
75773: PPUSH
75774: PPUSH
75775: PPUSH
75776: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75777: LD_VAR 0 1
75781: PPUSH
75782: LD_VAR 0 2
75786: PPUSH
75787: CALL_OW 488
75791: NOT
75792: PUSH
75793: LD_VAR 0 3
75797: PPUSH
75798: LD_VAR 0 4
75802: PPUSH
75803: CALL_OW 488
75807: NOT
75808: OR
75809: IFFALSE 75822
// begin result := - 1 ;
75811: LD_ADDR_VAR 0 5
75815: PUSH
75816: LD_INT 1
75818: NEG
75819: ST_TO_ADDR
// exit ;
75820: GO 76057
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75822: LD_ADDR_VAR 0 12
75826: PUSH
75827: LD_VAR 0 1
75831: PPUSH
75832: LD_VAR 0 2
75836: PPUSH
75837: LD_VAR 0 3
75841: PPUSH
75842: LD_VAR 0 4
75846: PPUSH
75847: CALL 74905 0 4
75851: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75852: LD_ADDR_VAR 0 11
75856: PUSH
75857: LD_VAR 0 1
75861: PPUSH
75862: LD_VAR 0 2
75866: PPUSH
75867: LD_VAR 0 12
75871: PUSH
75872: LD_INT 1
75874: ARRAY
75875: PPUSH
75876: LD_VAR 0 12
75880: PUSH
75881: LD_INT 2
75883: ARRAY
75884: PPUSH
75885: CALL_OW 298
75889: ST_TO_ADDR
// distance := 9999 ;
75890: LD_ADDR_VAR 0 10
75894: PUSH
75895: LD_INT 9999
75897: ST_TO_ADDR
// for i := 0 to 5 do
75898: LD_ADDR_VAR 0 6
75902: PUSH
75903: DOUBLE
75904: LD_INT 0
75906: DEC
75907: ST_TO_ADDR
75908: LD_INT 5
75910: PUSH
75911: FOR_TO
75912: IFFALSE 76055
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75914: LD_ADDR_VAR 0 7
75918: PUSH
75919: LD_VAR 0 1
75923: PPUSH
75924: LD_VAR 0 6
75928: PPUSH
75929: LD_VAR 0 11
75933: PPUSH
75934: CALL_OW 272
75938: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75939: LD_ADDR_VAR 0 8
75943: PUSH
75944: LD_VAR 0 2
75948: PPUSH
75949: LD_VAR 0 6
75953: PPUSH
75954: LD_VAR 0 11
75958: PPUSH
75959: CALL_OW 273
75963: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75964: LD_VAR 0 7
75968: PPUSH
75969: LD_VAR 0 8
75973: PPUSH
75974: CALL_OW 488
75978: NOT
75979: IFFALSE 75983
// continue ;
75981: GO 75911
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75983: LD_ADDR_VAR 0 9
75987: PUSH
75988: LD_VAR 0 12
75992: PUSH
75993: LD_INT 1
75995: ARRAY
75996: PPUSH
75997: LD_VAR 0 12
76001: PUSH
76002: LD_INT 2
76004: ARRAY
76005: PPUSH
76006: LD_VAR 0 7
76010: PPUSH
76011: LD_VAR 0 8
76015: PPUSH
76016: CALL_OW 298
76020: ST_TO_ADDR
// if tmp < distance then
76021: LD_VAR 0 9
76025: PUSH
76026: LD_VAR 0 10
76030: LESS
76031: IFFALSE 76053
// begin result := i ;
76033: LD_ADDR_VAR 0 5
76037: PUSH
76038: LD_VAR 0 6
76042: ST_TO_ADDR
// distance := tmp ;
76043: LD_ADDR_VAR 0 10
76047: PUSH
76048: LD_VAR 0 9
76052: ST_TO_ADDR
// end ; end ;
76053: GO 75911
76055: POP
76056: POP
// end ;
76057: LD_VAR 0 5
76061: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76062: LD_INT 0
76064: PPUSH
76065: PPUSH
// if not driver or not IsInUnit ( driver ) then
76066: LD_VAR 0 1
76070: NOT
76071: PUSH
76072: LD_VAR 0 1
76076: PPUSH
76077: CALL_OW 310
76081: NOT
76082: OR
76083: IFFALSE 76087
// exit ;
76085: GO 76177
// vehicle := IsInUnit ( driver ) ;
76087: LD_ADDR_VAR 0 3
76091: PUSH
76092: LD_VAR 0 1
76096: PPUSH
76097: CALL_OW 310
76101: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76102: LD_VAR 0 1
76106: PPUSH
76107: LD_STRING \
76109: PUSH
76110: LD_INT 0
76112: PUSH
76113: LD_INT 0
76115: PUSH
76116: LD_INT 0
76118: PUSH
76119: LD_INT 0
76121: PUSH
76122: LD_INT 0
76124: PUSH
76125: LD_INT 0
76127: PUSH
76128: EMPTY
76129: LIST
76130: LIST
76131: LIST
76132: LIST
76133: LIST
76134: LIST
76135: LIST
76136: PUSH
76137: LD_STRING E
76139: PUSH
76140: LD_INT 0
76142: PUSH
76143: LD_INT 0
76145: PUSH
76146: LD_VAR 0 3
76150: PUSH
76151: LD_INT 0
76153: PUSH
76154: LD_INT 0
76156: PUSH
76157: LD_INT 0
76159: PUSH
76160: EMPTY
76161: LIST
76162: LIST
76163: LIST
76164: LIST
76165: LIST
76166: LIST
76167: LIST
76168: PUSH
76169: EMPTY
76170: LIST
76171: LIST
76172: PPUSH
76173: CALL_OW 446
// end ;
76177: LD_VAR 0 2
76181: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76182: LD_INT 0
76184: PPUSH
76185: PPUSH
// if not driver or not IsInUnit ( driver ) then
76186: LD_VAR 0 1
76190: NOT
76191: PUSH
76192: LD_VAR 0 1
76196: PPUSH
76197: CALL_OW 310
76201: NOT
76202: OR
76203: IFFALSE 76207
// exit ;
76205: GO 76297
// vehicle := IsInUnit ( driver ) ;
76207: LD_ADDR_VAR 0 3
76211: PUSH
76212: LD_VAR 0 1
76216: PPUSH
76217: CALL_OW 310
76221: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76222: LD_VAR 0 1
76226: PPUSH
76227: LD_STRING \
76229: PUSH
76230: LD_INT 0
76232: PUSH
76233: LD_INT 0
76235: PUSH
76236: LD_INT 0
76238: PUSH
76239: LD_INT 0
76241: PUSH
76242: LD_INT 0
76244: PUSH
76245: LD_INT 0
76247: PUSH
76248: EMPTY
76249: LIST
76250: LIST
76251: LIST
76252: LIST
76253: LIST
76254: LIST
76255: LIST
76256: PUSH
76257: LD_STRING E
76259: PUSH
76260: LD_INT 0
76262: PUSH
76263: LD_INT 0
76265: PUSH
76266: LD_VAR 0 3
76270: PUSH
76271: LD_INT 0
76273: PUSH
76274: LD_INT 0
76276: PUSH
76277: LD_INT 0
76279: PUSH
76280: EMPTY
76281: LIST
76282: LIST
76283: LIST
76284: LIST
76285: LIST
76286: LIST
76287: LIST
76288: PUSH
76289: EMPTY
76290: LIST
76291: LIST
76292: PPUSH
76293: CALL_OW 447
// end ;
76297: LD_VAR 0 2
76301: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76302: LD_INT 0
76304: PPUSH
76305: PPUSH
76306: PPUSH
// tmp := [ ] ;
76307: LD_ADDR_VAR 0 5
76311: PUSH
76312: EMPTY
76313: ST_TO_ADDR
// for i in units do
76314: LD_ADDR_VAR 0 4
76318: PUSH
76319: LD_VAR 0 1
76323: PUSH
76324: FOR_IN
76325: IFFALSE 76363
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76327: LD_ADDR_VAR 0 5
76331: PUSH
76332: LD_VAR 0 5
76336: PPUSH
76337: LD_VAR 0 5
76341: PUSH
76342: LD_INT 1
76344: PLUS
76345: PPUSH
76346: LD_VAR 0 4
76350: PPUSH
76351: CALL_OW 256
76355: PPUSH
76356: CALL_OW 2
76360: ST_TO_ADDR
76361: GO 76324
76363: POP
76364: POP
// if not tmp then
76365: LD_VAR 0 5
76369: NOT
76370: IFFALSE 76374
// exit ;
76372: GO 76422
// if asc then
76374: LD_VAR 0 2
76378: IFFALSE 76402
// result := SortListByListAsc ( units , tmp ) else
76380: LD_ADDR_VAR 0 3
76384: PUSH
76385: LD_VAR 0 1
76389: PPUSH
76390: LD_VAR 0 5
76394: PPUSH
76395: CALL_OW 76
76399: ST_TO_ADDR
76400: GO 76422
// result := SortListByListDesc ( units , tmp ) ;
76402: LD_ADDR_VAR 0 3
76406: PUSH
76407: LD_VAR 0 1
76411: PPUSH
76412: LD_VAR 0 5
76416: PPUSH
76417: CALL_OW 77
76421: ST_TO_ADDR
// end ;
76422: LD_VAR 0 3
76426: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76427: LD_INT 0
76429: PPUSH
76430: PPUSH
// task := GetTaskList ( mech ) ;
76431: LD_ADDR_VAR 0 4
76435: PUSH
76436: LD_VAR 0 1
76440: PPUSH
76441: CALL_OW 437
76445: ST_TO_ADDR
// if not task then
76446: LD_VAR 0 4
76450: NOT
76451: IFFALSE 76455
// exit ;
76453: GO 76497
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76455: LD_ADDR_VAR 0 3
76459: PUSH
76460: LD_VAR 0 4
76464: PUSH
76465: LD_INT 1
76467: ARRAY
76468: PUSH
76469: LD_INT 1
76471: ARRAY
76472: PUSH
76473: LD_STRING r
76475: EQUAL
76476: PUSH
76477: LD_VAR 0 4
76481: PUSH
76482: LD_INT 1
76484: ARRAY
76485: PUSH
76486: LD_INT 4
76488: ARRAY
76489: PUSH
76490: LD_VAR 0 2
76494: EQUAL
76495: AND
76496: ST_TO_ADDR
// end ;
76497: LD_VAR 0 3
76501: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76502: LD_INT 0
76504: PPUSH
// SetDir ( unit , d ) ;
76505: LD_VAR 0 1
76509: PPUSH
76510: LD_VAR 0 4
76514: PPUSH
76515: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76519: LD_VAR 0 1
76523: PPUSH
76524: LD_VAR 0 2
76528: PPUSH
76529: LD_VAR 0 3
76533: PPUSH
76534: LD_VAR 0 5
76538: PPUSH
76539: CALL_OW 48
// end ;
76543: LD_VAR 0 6
76547: RET
// export function ToNaturalNumber ( number ) ; begin
76548: LD_INT 0
76550: PPUSH
// result := number div 1 ;
76551: LD_ADDR_VAR 0 2
76555: PUSH
76556: LD_VAR 0 1
76560: PUSH
76561: LD_INT 1
76563: DIV
76564: ST_TO_ADDR
// if number < 0 then
76565: LD_VAR 0 1
76569: PUSH
76570: LD_INT 0
76572: LESS
76573: IFFALSE 76583
// result := 0 ;
76575: LD_ADDR_VAR 0 2
76579: PUSH
76580: LD_INT 0
76582: ST_TO_ADDR
// end ;
76583: LD_VAR 0 2
76587: RET
// export function SortByClass ( units , class ) ; var un ; begin
76588: LD_INT 0
76590: PPUSH
76591: PPUSH
// if not units or not class then
76592: LD_VAR 0 1
76596: NOT
76597: PUSH
76598: LD_VAR 0 2
76602: NOT
76603: OR
76604: IFFALSE 76608
// exit ;
76606: GO 76703
// result := [ ] ;
76608: LD_ADDR_VAR 0 3
76612: PUSH
76613: EMPTY
76614: ST_TO_ADDR
// for un in units do
76615: LD_ADDR_VAR 0 4
76619: PUSH
76620: LD_VAR 0 1
76624: PUSH
76625: FOR_IN
76626: IFFALSE 76701
// if GetClass ( un ) = class then
76628: LD_VAR 0 4
76632: PPUSH
76633: CALL_OW 257
76637: PUSH
76638: LD_VAR 0 2
76642: EQUAL
76643: IFFALSE 76670
// result := Insert ( result , 1 , un ) else
76645: LD_ADDR_VAR 0 3
76649: PUSH
76650: LD_VAR 0 3
76654: PPUSH
76655: LD_INT 1
76657: PPUSH
76658: LD_VAR 0 4
76662: PPUSH
76663: CALL_OW 2
76667: ST_TO_ADDR
76668: GO 76699
// result := Replace ( result , result + 1 , un ) ;
76670: LD_ADDR_VAR 0 3
76674: PUSH
76675: LD_VAR 0 3
76679: PPUSH
76680: LD_VAR 0 3
76684: PUSH
76685: LD_INT 1
76687: PLUS
76688: PPUSH
76689: LD_VAR 0 4
76693: PPUSH
76694: CALL_OW 1
76698: ST_TO_ADDR
76699: GO 76625
76701: POP
76702: POP
// end ;
76703: LD_VAR 0 3
76707: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76708: LD_INT 0
76710: PPUSH
76711: PPUSH
76712: PPUSH
76713: PPUSH
76714: PPUSH
76715: PPUSH
76716: PPUSH
// result := [ ] ;
76717: LD_ADDR_VAR 0 4
76721: PUSH
76722: EMPTY
76723: ST_TO_ADDR
// if x - r < 0 then
76724: LD_VAR 0 1
76728: PUSH
76729: LD_VAR 0 3
76733: MINUS
76734: PUSH
76735: LD_INT 0
76737: LESS
76738: IFFALSE 76750
// min_x := 0 else
76740: LD_ADDR_VAR 0 8
76744: PUSH
76745: LD_INT 0
76747: ST_TO_ADDR
76748: GO 76766
// min_x := x - r ;
76750: LD_ADDR_VAR 0 8
76754: PUSH
76755: LD_VAR 0 1
76759: PUSH
76760: LD_VAR 0 3
76764: MINUS
76765: ST_TO_ADDR
// if y - r < 0 then
76766: LD_VAR 0 2
76770: PUSH
76771: LD_VAR 0 3
76775: MINUS
76776: PUSH
76777: LD_INT 0
76779: LESS
76780: IFFALSE 76792
// min_y := 0 else
76782: LD_ADDR_VAR 0 7
76786: PUSH
76787: LD_INT 0
76789: ST_TO_ADDR
76790: GO 76808
// min_y := y - r ;
76792: LD_ADDR_VAR 0 7
76796: PUSH
76797: LD_VAR 0 2
76801: PUSH
76802: LD_VAR 0 3
76806: MINUS
76807: ST_TO_ADDR
// max_x := x + r ;
76808: LD_ADDR_VAR 0 9
76812: PUSH
76813: LD_VAR 0 1
76817: PUSH
76818: LD_VAR 0 3
76822: PLUS
76823: ST_TO_ADDR
// max_y := y + r ;
76824: LD_ADDR_VAR 0 10
76828: PUSH
76829: LD_VAR 0 2
76833: PUSH
76834: LD_VAR 0 3
76838: PLUS
76839: ST_TO_ADDR
// for _x = min_x to max_x do
76840: LD_ADDR_VAR 0 5
76844: PUSH
76845: DOUBLE
76846: LD_VAR 0 8
76850: DEC
76851: ST_TO_ADDR
76852: LD_VAR 0 9
76856: PUSH
76857: FOR_TO
76858: IFFALSE 76959
// for _y = min_y to max_y do
76860: LD_ADDR_VAR 0 6
76864: PUSH
76865: DOUBLE
76866: LD_VAR 0 7
76870: DEC
76871: ST_TO_ADDR
76872: LD_VAR 0 10
76876: PUSH
76877: FOR_TO
76878: IFFALSE 76955
// begin if not ValidHex ( _x , _y ) then
76880: LD_VAR 0 5
76884: PPUSH
76885: LD_VAR 0 6
76889: PPUSH
76890: CALL_OW 488
76894: NOT
76895: IFFALSE 76899
// continue ;
76897: GO 76877
// if GetResourceTypeXY ( _x , _y ) then
76899: LD_VAR 0 5
76903: PPUSH
76904: LD_VAR 0 6
76908: PPUSH
76909: CALL_OW 283
76913: IFFALSE 76953
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76915: LD_ADDR_VAR 0 4
76919: PUSH
76920: LD_VAR 0 4
76924: PPUSH
76925: LD_VAR 0 4
76929: PUSH
76930: LD_INT 1
76932: PLUS
76933: PPUSH
76934: LD_VAR 0 5
76938: PUSH
76939: LD_VAR 0 6
76943: PUSH
76944: EMPTY
76945: LIST
76946: LIST
76947: PPUSH
76948: CALL_OW 1
76952: ST_TO_ADDR
// end ;
76953: GO 76877
76955: POP
76956: POP
76957: GO 76857
76959: POP
76960: POP
// end ;
76961: LD_VAR 0 4
76965: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76966: LD_INT 0
76968: PPUSH
76969: PPUSH
76970: PPUSH
76971: PPUSH
76972: PPUSH
76973: PPUSH
76974: PPUSH
76975: PPUSH
// if not units then
76976: LD_VAR 0 1
76980: NOT
76981: IFFALSE 76985
// exit ;
76983: GO 77511
// result := UnitFilter ( units , [ f_ok ] ) ;
76985: LD_ADDR_VAR 0 3
76989: PUSH
76990: LD_VAR 0 1
76994: PPUSH
76995: LD_INT 50
76997: PUSH
76998: EMPTY
76999: LIST
77000: PPUSH
77001: CALL_OW 72
77005: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77006: LD_ADDR_VAR 0 8
77010: PUSH
77011: LD_VAR 0 1
77015: PUSH
77016: LD_INT 1
77018: ARRAY
77019: PPUSH
77020: CALL_OW 255
77024: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
77025: LD_ADDR_VAR 0 10
77029: PUSH
77030: LD_INT 29
77032: PUSH
77033: LD_EXP 36
77037: PUSH
77038: LD_INT 49
77040: PUSH
77041: EMPTY
77042: LIST
77043: LIST
77044: LIST
77045: ST_TO_ADDR
// if not result then
77046: LD_VAR 0 3
77050: NOT
77051: IFFALSE 77055
// exit ;
77053: GO 77511
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77055: LD_ADDR_VAR 0 5
77059: PUSH
77060: LD_INT 81
77062: PUSH
77063: LD_VAR 0 8
77067: PUSH
77068: EMPTY
77069: LIST
77070: LIST
77071: PPUSH
77072: CALL_OW 69
77076: ST_TO_ADDR
// for i in result do
77077: LD_ADDR_VAR 0 4
77081: PUSH
77082: LD_VAR 0 3
77086: PUSH
77087: FOR_IN
77088: IFFALSE 77509
// begin tag := GetTag ( i ) + 1 ;
77090: LD_ADDR_VAR 0 9
77094: PUSH
77095: LD_VAR 0 4
77099: PPUSH
77100: CALL_OW 110
77104: PUSH
77105: LD_INT 1
77107: PLUS
77108: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77109: LD_ADDR_VAR 0 7
77113: PUSH
77114: LD_VAR 0 4
77118: PPUSH
77119: CALL_OW 250
77123: PPUSH
77124: LD_VAR 0 4
77128: PPUSH
77129: CALL_OW 251
77133: PPUSH
77134: LD_INT 6
77136: PPUSH
77137: CALL 76708 0 3
77141: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77142: LD_VAR 0 4
77146: PPUSH
77147: CALL_OW 247
77151: PUSH
77152: LD_INT 2
77154: EQUAL
77155: PUSH
77156: LD_VAR 0 7
77160: AND
77161: PUSH
77162: LD_VAR 0 4
77166: PPUSH
77167: CALL_OW 264
77171: PUSH
77172: LD_VAR 0 10
77176: IN
77177: NOT
77178: AND
77179: IFFALSE 77218
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77181: LD_VAR 0 4
77185: PPUSH
77186: LD_VAR 0 7
77190: PUSH
77191: LD_INT 1
77193: ARRAY
77194: PUSH
77195: LD_INT 1
77197: ARRAY
77198: PPUSH
77199: LD_VAR 0 7
77203: PUSH
77204: LD_INT 1
77206: ARRAY
77207: PUSH
77208: LD_INT 2
77210: ARRAY
77211: PPUSH
77212: CALL_OW 116
77216: GO 77507
// if path > tag then
77218: LD_VAR 0 2
77222: PUSH
77223: LD_VAR 0 9
77227: GREATER
77228: IFFALSE 77436
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
77230: LD_ADDR_VAR 0 6
77234: PUSH
77235: LD_VAR 0 5
77239: PPUSH
77240: LD_INT 91
77242: PUSH
77243: LD_VAR 0 4
77247: PUSH
77248: LD_INT 8
77250: PUSH
77251: EMPTY
77252: LIST
77253: LIST
77254: LIST
77255: PPUSH
77256: CALL_OW 72
77260: ST_TO_ADDR
// if nearEnemy then
77261: LD_VAR 0 6
77265: IFFALSE 77334
// begin if GetWeapon ( i ) = ru_time_lapser then
77267: LD_VAR 0 4
77271: PPUSH
77272: CALL_OW 264
77276: PUSH
77277: LD_INT 49
77279: EQUAL
77280: IFFALSE 77308
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77282: LD_VAR 0 4
77286: PPUSH
77287: LD_VAR 0 6
77291: PPUSH
77292: LD_VAR 0 4
77296: PPUSH
77297: CALL_OW 74
77301: PPUSH
77302: CALL_OW 112
77306: GO 77332
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77308: LD_VAR 0 4
77312: PPUSH
77313: LD_VAR 0 6
77317: PPUSH
77318: LD_VAR 0 4
77322: PPUSH
77323: CALL_OW 74
77327: PPUSH
77328: CALL_OW 115
// end else
77332: GO 77434
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77334: LD_VAR 0 4
77338: PPUSH
77339: LD_VAR 0 2
77343: PUSH
77344: LD_VAR 0 9
77348: ARRAY
77349: PUSH
77350: LD_INT 1
77352: ARRAY
77353: PPUSH
77354: LD_VAR 0 2
77358: PUSH
77359: LD_VAR 0 9
77363: ARRAY
77364: PUSH
77365: LD_INT 2
77367: ARRAY
77368: PPUSH
77369: CALL_OW 297
77373: PUSH
77374: LD_INT 6
77376: GREATER
77377: IFFALSE 77420
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77379: LD_VAR 0 4
77383: PPUSH
77384: LD_VAR 0 2
77388: PUSH
77389: LD_VAR 0 9
77393: ARRAY
77394: PUSH
77395: LD_INT 1
77397: ARRAY
77398: PPUSH
77399: LD_VAR 0 2
77403: PUSH
77404: LD_VAR 0 9
77408: ARRAY
77409: PUSH
77410: LD_INT 2
77412: ARRAY
77413: PPUSH
77414: CALL_OW 114
77418: GO 77434
// SetTag ( i , tag ) ;
77420: LD_VAR 0 4
77424: PPUSH
77425: LD_VAR 0 9
77429: PPUSH
77430: CALL_OW 109
// end else
77434: GO 77507
// if enemy then
77436: LD_VAR 0 5
77440: IFFALSE 77507
// begin if GetWeapon ( i ) = ru_time_lapser then
77442: LD_VAR 0 4
77446: PPUSH
77447: CALL_OW 264
77451: PUSH
77452: LD_INT 49
77454: EQUAL
77455: IFFALSE 77483
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77457: LD_VAR 0 4
77461: PPUSH
77462: LD_VAR 0 5
77466: PPUSH
77467: LD_VAR 0 4
77471: PPUSH
77472: CALL_OW 74
77476: PPUSH
77477: CALL_OW 112
77481: GO 77507
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77483: LD_VAR 0 4
77487: PPUSH
77488: LD_VAR 0 5
77492: PPUSH
77493: LD_VAR 0 4
77497: PPUSH
77498: CALL_OW 74
77502: PPUSH
77503: CALL_OW 115
// end ; end ;
77507: GO 77087
77509: POP
77510: POP
// end ;
77511: LD_VAR 0 3
77515: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77516: LD_INT 0
77518: PPUSH
77519: PPUSH
77520: PPUSH
// if not unit or IsInUnit ( unit ) then
77521: LD_VAR 0 1
77525: NOT
77526: PUSH
77527: LD_VAR 0 1
77531: PPUSH
77532: CALL_OW 310
77536: OR
77537: IFFALSE 77541
// exit ;
77539: GO 77632
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77541: LD_ADDR_VAR 0 4
77545: PUSH
77546: LD_VAR 0 1
77550: PPUSH
77551: CALL_OW 250
77555: PPUSH
77556: LD_VAR 0 2
77560: PPUSH
77561: LD_INT 1
77563: PPUSH
77564: CALL_OW 272
77568: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77569: LD_ADDR_VAR 0 5
77573: PUSH
77574: LD_VAR 0 1
77578: PPUSH
77579: CALL_OW 251
77583: PPUSH
77584: LD_VAR 0 2
77588: PPUSH
77589: LD_INT 1
77591: PPUSH
77592: CALL_OW 273
77596: ST_TO_ADDR
// if ValidHex ( x , y ) then
77597: LD_VAR 0 4
77601: PPUSH
77602: LD_VAR 0 5
77606: PPUSH
77607: CALL_OW 488
77611: IFFALSE 77632
// ComTurnXY ( unit , x , y ) ;
77613: LD_VAR 0 1
77617: PPUSH
77618: LD_VAR 0 4
77622: PPUSH
77623: LD_VAR 0 5
77627: PPUSH
77628: CALL_OW 118
// end ;
77632: LD_VAR 0 3
77636: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77637: LD_INT 0
77639: PPUSH
77640: PPUSH
// result := false ;
77641: LD_ADDR_VAR 0 3
77645: PUSH
77646: LD_INT 0
77648: ST_TO_ADDR
// if not units then
77649: LD_VAR 0 2
77653: NOT
77654: IFFALSE 77658
// exit ;
77656: GO 77703
// for i in units do
77658: LD_ADDR_VAR 0 4
77662: PUSH
77663: LD_VAR 0 2
77667: PUSH
77668: FOR_IN
77669: IFFALSE 77701
// if See ( side , i ) then
77671: LD_VAR 0 1
77675: PPUSH
77676: LD_VAR 0 4
77680: PPUSH
77681: CALL_OW 292
77685: IFFALSE 77699
// begin result := true ;
77687: LD_ADDR_VAR 0 3
77691: PUSH
77692: LD_INT 1
77694: ST_TO_ADDR
// exit ;
77695: POP
77696: POP
77697: GO 77703
// end ;
77699: GO 77668
77701: POP
77702: POP
// end ;
77703: LD_VAR 0 3
77707: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77708: LD_INT 0
77710: PPUSH
77711: PPUSH
77712: PPUSH
77713: PPUSH
// if not unit or not points then
77714: LD_VAR 0 1
77718: NOT
77719: PUSH
77720: LD_VAR 0 2
77724: NOT
77725: OR
77726: IFFALSE 77730
// exit ;
77728: GO 77820
// dist := 99999 ;
77730: LD_ADDR_VAR 0 5
77734: PUSH
77735: LD_INT 99999
77737: ST_TO_ADDR
// for i in points do
77738: LD_ADDR_VAR 0 4
77742: PUSH
77743: LD_VAR 0 2
77747: PUSH
77748: FOR_IN
77749: IFFALSE 77818
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77751: LD_ADDR_VAR 0 6
77755: PUSH
77756: LD_VAR 0 1
77760: PPUSH
77761: LD_VAR 0 4
77765: PUSH
77766: LD_INT 1
77768: ARRAY
77769: PPUSH
77770: LD_VAR 0 4
77774: PUSH
77775: LD_INT 2
77777: ARRAY
77778: PPUSH
77779: CALL_OW 297
77783: ST_TO_ADDR
// if tmpDist < dist then
77784: LD_VAR 0 6
77788: PUSH
77789: LD_VAR 0 5
77793: LESS
77794: IFFALSE 77816
// begin result := i ;
77796: LD_ADDR_VAR 0 3
77800: PUSH
77801: LD_VAR 0 4
77805: ST_TO_ADDR
// dist := tmpDist ;
77806: LD_ADDR_VAR 0 5
77810: PUSH
77811: LD_VAR 0 6
77815: ST_TO_ADDR
// end ; end ;
77816: GO 77748
77818: POP
77819: POP
// end ;
77820: LD_VAR 0 3
77824: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77825: LD_INT 0
77827: PPUSH
// uc_side := side ;
77828: LD_ADDR_OWVAR 20
77832: PUSH
77833: LD_VAR 0 1
77837: ST_TO_ADDR
// uc_nation := 3 ;
77838: LD_ADDR_OWVAR 21
77842: PUSH
77843: LD_INT 3
77845: ST_TO_ADDR
// vc_chassis := 25 ;
77846: LD_ADDR_OWVAR 37
77850: PUSH
77851: LD_INT 25
77853: ST_TO_ADDR
// vc_engine := engine_siberite ;
77854: LD_ADDR_OWVAR 39
77858: PUSH
77859: LD_INT 3
77861: ST_TO_ADDR
// vc_control := control_computer ;
77862: LD_ADDR_OWVAR 38
77866: PUSH
77867: LD_INT 3
77869: ST_TO_ADDR
// vc_weapon := 59 ;
77870: LD_ADDR_OWVAR 40
77874: PUSH
77875: LD_INT 59
77877: ST_TO_ADDR
// result := CreateVehicle ;
77878: LD_ADDR_VAR 0 5
77882: PUSH
77883: CALL_OW 45
77887: ST_TO_ADDR
// SetDir ( result , d ) ;
77888: LD_VAR 0 5
77892: PPUSH
77893: LD_VAR 0 4
77897: PPUSH
77898: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77902: LD_VAR 0 5
77906: PPUSH
77907: LD_VAR 0 2
77911: PPUSH
77912: LD_VAR 0 3
77916: PPUSH
77917: LD_INT 0
77919: PPUSH
77920: CALL_OW 48
// end ;
77924: LD_VAR 0 5
77928: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77929: LD_INT 0
77931: PPUSH
77932: PPUSH
77933: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77934: LD_ADDR_VAR 0 2
77938: PUSH
77939: LD_INT 0
77941: PUSH
77942: LD_INT 0
77944: PUSH
77945: LD_INT 0
77947: PUSH
77948: LD_INT 0
77950: PUSH
77951: EMPTY
77952: LIST
77953: LIST
77954: LIST
77955: LIST
77956: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77957: LD_VAR 0 1
77961: NOT
77962: PUSH
77963: LD_VAR 0 1
77967: PPUSH
77968: CALL_OW 264
77972: PUSH
77973: LD_INT 12
77975: PUSH
77976: LD_INT 51
77978: PUSH
77979: LD_INT 32
77981: PUSH
77982: LD_EXP 33
77986: PUSH
77987: EMPTY
77988: LIST
77989: LIST
77990: LIST
77991: LIST
77992: IN
77993: NOT
77994: OR
77995: IFFALSE 77999
// exit ;
77997: GO 78097
// for i := 1 to 3 do
77999: LD_ADDR_VAR 0 3
78003: PUSH
78004: DOUBLE
78005: LD_INT 1
78007: DEC
78008: ST_TO_ADDR
78009: LD_INT 3
78011: PUSH
78012: FOR_TO
78013: IFFALSE 78095
// begin tmp := GetCargo ( cargo , i ) ;
78015: LD_ADDR_VAR 0 4
78019: PUSH
78020: LD_VAR 0 1
78024: PPUSH
78025: LD_VAR 0 3
78029: PPUSH
78030: CALL_OW 289
78034: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
78035: LD_ADDR_VAR 0 2
78039: PUSH
78040: LD_VAR 0 2
78044: PPUSH
78045: LD_VAR 0 3
78049: PPUSH
78050: LD_VAR 0 4
78054: PPUSH
78055: CALL_OW 1
78059: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
78060: LD_ADDR_VAR 0 2
78064: PUSH
78065: LD_VAR 0 2
78069: PPUSH
78070: LD_INT 4
78072: PPUSH
78073: LD_VAR 0 2
78077: PUSH
78078: LD_INT 4
78080: ARRAY
78081: PUSH
78082: LD_VAR 0 4
78086: PLUS
78087: PPUSH
78088: CALL_OW 1
78092: ST_TO_ADDR
// end ;
78093: GO 78012
78095: POP
78096: POP
// end ;
78097: LD_VAR 0 2
78101: RET
// export function Length ( array ) ; begin
78102: LD_INT 0
78104: PPUSH
// result := array + 0 ;
78105: LD_ADDR_VAR 0 2
78109: PUSH
78110: LD_VAR 0 1
78114: PUSH
78115: LD_INT 0
78117: PLUS
78118: ST_TO_ADDR
// end ; end_of_file
78119: LD_VAR 0 2
78123: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78124: LD_VAR 0 1
78128: PUSH
78129: LD_INT 200
78131: DOUBLE
78132: GREATEREQUAL
78133: IFFALSE 78141
78135: LD_INT 299
78137: DOUBLE
78138: LESSEQUAL
78139: IFTRUE 78143
78141: GO 78175
78143: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78144: LD_VAR 0 1
78148: PPUSH
78149: LD_VAR 0 2
78153: PPUSH
78154: LD_VAR 0 3
78158: PPUSH
78159: LD_VAR 0 4
78163: PPUSH
78164: LD_VAR 0 5
78168: PPUSH
78169: CALL 33274 0 5
78173: GO 78252
78175: LD_INT 300
78177: DOUBLE
78178: GREATEREQUAL
78179: IFFALSE 78187
78181: LD_INT 399
78183: DOUBLE
78184: LESSEQUAL
78185: IFTRUE 78189
78187: GO 78251
78189: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78190: LD_VAR 0 1
78194: PPUSH
78195: LD_VAR 0 2
78199: PPUSH
78200: LD_VAR 0 3
78204: PPUSH
78205: LD_VAR 0 4
78209: PPUSH
78210: LD_VAR 0 5
78214: PPUSH
78215: LD_VAR 0 6
78219: PPUSH
78220: LD_VAR 0 7
78224: PPUSH
78225: LD_VAR 0 8
78229: PPUSH
78230: LD_VAR 0 9
78234: PPUSH
78235: LD_VAR 0 10
78239: PPUSH
78240: LD_VAR 0 11
78244: PPUSH
78245: CALL 30916 0 11
78249: GO 78252
78251: POP
// end ;
78252: PPOPN 11
78254: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78255: LD_VAR 0 1
78259: PPUSH
78260: LD_VAR 0 2
78264: PPUSH
78265: LD_VAR 0 3
78269: PPUSH
78270: LD_VAR 0 4
78274: PPUSH
78275: LD_VAR 0 5
78279: PPUSH
78280: CALL 33010 0 5
// end ; end_of_file
78284: PPOPN 5
78286: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78287: LD_VAR 0 1
78291: PPUSH
78292: LD_VAR 0 2
78296: PPUSH
78297: LD_VAR 0 3
78301: PPUSH
78302: LD_VAR 0 4
78306: PPUSH
78307: LD_VAR 0 5
78311: PPUSH
78312: LD_VAR 0 6
78316: PPUSH
78317: CALL 18609 0 6
// end ;
78321: PPOPN 6
78323: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78324: LD_INT 0
78326: PPUSH
// begin if not units then
78327: LD_VAR 0 1
78331: NOT
78332: IFFALSE 78336
// exit ;
78334: GO 78424
// if p1 = 1 then
78336: LD_VAR 0 2
78340: PUSH
78341: LD_INT 1
78343: EQUAL
78344: IFFALSE 78424
// begin if p2 = 1 then
78346: LD_VAR 0 3
78350: PUSH
78351: LD_INT 1
78353: EQUAL
78354: IFFALSE 78385
// begin for i in units do
78356: LD_ADDR_VAR 0 7
78360: PUSH
78361: LD_VAR 0 1
78365: PUSH
78366: FOR_IN
78367: IFFALSE 78383
// begin SetUnitAttackType ( i , 3 ) ;
78369: LD_VAR 0 7
78373: PPUSH
78374: LD_INT 3
78376: PPUSH
78377: CALL_OW 603
// end ;
78381: GO 78366
78383: POP
78384: POP
// end ; if p2 = 2 then
78385: LD_VAR 0 3
78389: PUSH
78390: LD_INT 2
78392: EQUAL
78393: IFFALSE 78424
// begin for i in units do
78395: LD_ADDR_VAR 0 7
78399: PUSH
78400: LD_VAR 0 1
78404: PUSH
78405: FOR_IN
78406: IFFALSE 78422
// begin SetUnitAttackType ( i , 1 ) ;
78408: LD_VAR 0 7
78412: PPUSH
78413: LD_INT 1
78415: PPUSH
78416: CALL_OW 603
// end ;
78420: GO 78405
78422: POP
78423: POP
// end ; end ; end ;
78424: PPOPN 7
78426: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78427: CALL 18584 0 0
// end ;
78431: PPOPN 1
78433: END
