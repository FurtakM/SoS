// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 217 0 0
// PrepareRussian ;
  23: CALL 8276 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 72591 0 9
// Action ;
  79: CALL 13825 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 9
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 5
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 6
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 7
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 8
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// end ;
 167: LD_VAR 0 1
 171: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 172: LD_INT 22
 174: PUSH
 175: LD_INT 1
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: LD_INT 34
 184: PUSH
 185: LD_INT 6
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: PPUSH
 196: CALL_OW 69
 200: PUSH
 201: LD_INT 6
 203: GREATEREQUAL
 204: IFFALSE 216
 206: GO 208
 208: DISABLE
// SetAchievement ( ACH_ARMOR ) ; end_of_file
 209: LD_STRING ACH_ARMOR
 211: PPUSH
 212: CALL_OW 543
 216: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 217: LD_INT 0
 219: PPUSH
 220: PPUSH
 221: PPUSH
 222: PPUSH
 223: PPUSH
 224: PPUSH
 225: PPUSH
 226: PPUSH
 227: PPUSH
 228: PPUSH
 229: PPUSH
 230: PPUSH
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// uc_side := 1 ;
 235: LD_ADDR_OWVAR 20
 239: PUSH
 240: LD_INT 1
 242: ST_TO_ADDR
// uc_nation := 1 ;
 243: LD_ADDR_OWVAR 21
 247: PUSH
 248: LD_INT 1
 250: ST_TO_ADDR
// PrepareGammaBase ;
 251: CALL 2412 0 0
// x := 52 ;
 255: LD_ADDR_VAR 0 13
 259: PUSH
 260: LD_INT 52
 262: ST_TO_ADDR
// y := 16 ;
 263: LD_ADDR_VAR 0 14
 267: PUSH
 268: LD_INT 16
 270: ST_TO_ADDR
// case gammaCommander of 1 :
 271: LD_EXP 9
 275: PUSH
 276: LD_INT 1
 278: DOUBLE
 279: EQUAL
 280: IFTRUE 284
 282: GO 369
 284: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 285: LD_ADDR_EXP 12
 289: PUSH
 290: LD_STRING Donaldson
 292: PPUSH
 293: LD_INT 1
 295: PPUSH
 296: LD_STRING 04_
 298: PPUSH
 299: CALL 38508 0 3
 303: ST_TO_ADDR
// if HexInfo ( x , y ) then
 304: LD_VAR 0 13
 308: PPUSH
 309: LD_VAR 0 14
 313: PPUSH
 314: CALL_OW 428
 318: IFFALSE 336
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 320: LD_EXP 12
 324: PPUSH
 325: LD_EXP 26
 329: PPUSH
 330: CALL_OW 52
 334: GO 358
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 336: LD_EXP 12
 340: PPUSH
 341: LD_VAR 0 13
 345: PPUSH
 346: LD_VAR 0 14
 350: PPUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 48
// ComHold ( Donaldson ) ;
 358: LD_EXP 12
 362: PPUSH
 363: CALL_OW 140
// end ; 2 :
 367: GO 556
 369: LD_INT 2
 371: DOUBLE
 372: EQUAL
 373: IFTRUE 377
 375: GO 462
 377: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 378: LD_ADDR_EXP 11
 382: PUSH
 383: LD_STRING Brown
 385: PPUSH
 386: LD_INT 1
 388: PPUSH
 389: LD_STRING 04_
 391: PPUSH
 392: CALL 38508 0 3
 396: ST_TO_ADDR
// if HexInfo ( x , y ) then
 397: LD_VAR 0 13
 401: PPUSH
 402: LD_VAR 0 14
 406: PPUSH
 407: CALL_OW 428
 411: IFFALSE 429
// PlaceHumanInUnit ( Brown , amDepot ) else
 413: LD_EXP 11
 417: PPUSH
 418: LD_EXP 26
 422: PPUSH
 423: CALL_OW 52
 427: GO 451
// PlaceUnitXY ( Brown , x , y , false ) ;
 429: LD_EXP 11
 433: PPUSH
 434: LD_VAR 0 13
 438: PPUSH
 439: LD_VAR 0 14
 443: PPUSH
 444: LD_INT 0
 446: PPUSH
 447: CALL_OW 48
// ComHold ( Brown ) ;
 451: LD_EXP 11
 455: PPUSH
 456: CALL_OW 140
// end ; 3 :
 460: GO 556
 462: LD_INT 3
 464: DOUBLE
 465: EQUAL
 466: IFTRUE 470
 468: GO 555
 470: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 471: LD_ADDR_EXP 20
 475: PUSH
 476: LD_STRING VanHouten
 478: PPUSH
 479: LD_INT 0
 481: PPUSH
 482: LD_STRING 
 484: PPUSH
 485: CALL 38508 0 3
 489: ST_TO_ADDR
// if HexInfo ( x , y ) then
 490: LD_VAR 0 13
 494: PPUSH
 495: LD_VAR 0 14
 499: PPUSH
 500: CALL_OW 428
 504: IFFALSE 522
// PlaceHumanInUnit ( Houten , amDepot ) else
 506: LD_EXP 20
 510: PPUSH
 511: LD_EXP 26
 515: PPUSH
 516: CALL_OW 52
 520: GO 544
// PlaceUnitXY ( Houten , x , y , false ) ;
 522: LD_EXP 20
 526: PPUSH
 527: LD_VAR 0 13
 531: PPUSH
 532: LD_VAR 0 14
 536: PPUSH
 537: LD_INT 0
 539: PPUSH
 540: CALL_OW 48
// ComHold ( Houten ) ;
 544: LD_EXP 20
 548: PPUSH
 549: CALL_OW 140
// end ; end ;
 553: GO 556
 555: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 556: LD_ADDR_EXP 24
 560: PUSH
 561: LD_STRING Harisson
 563: PPUSH
 564: LD_INT 0
 566: PPUSH
 567: LD_STRING 
 569: PPUSH
 570: CALL 38508 0 3
 574: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 575: LD_ADDR_EXP 25
 579: PUSH
 580: LD_STRING Powell
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: LD_STRING 
 588: PPUSH
 589: CALL 38508 0 3
 593: ST_TO_ADDR
// tmp := [ ] ;
 594: LD_ADDR_VAR 0 4
 598: PUSH
 599: EMPTY
 600: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 601: LD_STRING 04_Lisa
 603: PUSH
 604: EMPTY
 605: LIST
 606: PPUSH
 607: CALL_OW 28
 611: PUSH
 612: LD_STRING LisaInDelta
 614: PPUSH
 615: LD_INT 0
 617: PPUSH
 618: CALL_OW 30
 622: NOT
 623: AND
 624: PUSH
 625: LD_STRING 07_Lisa
 627: PUSH
 628: EMPTY
 629: LIST
 630: PPUSH
 631: CALL_OW 28
 635: NOT
 636: AND
 637: IFFALSE 680
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 639: LD_ADDR_EXP 15
 643: PUSH
 644: LD_STRING Lisa
 646: PPUSH
 647: LD_INT 1
 649: PPUSH
 650: LD_STRING 04_
 652: PPUSH
 653: CALL 38508 0 3
 657: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 658: LD_ADDR_VAR 0 5
 662: PUSH
 663: LD_VAR 0 5
 667: PPUSH
 668: LD_EXP 15
 672: PPUSH
 673: CALL 75909 0 2
 677: ST_TO_ADDR
// end else
 678: GO 739
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 680: LD_EXP 15
 684: NOT
 685: PUSH
 686: LD_STRING LisaIn07
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 30
 696: NOT
 697: AND
 698: IFFALSE 739
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 700: LD_ADDR_EXP 15
 704: PUSH
 705: LD_STRING Lisa
 707: PPUSH
 708: LD_INT 1
 710: PPUSH
 711: LD_STRING 07_
 713: PPUSH
 714: CALL 38508 0 3
 718: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 719: LD_ADDR_VAR 0 5
 723: PUSH
 724: LD_VAR 0 5
 728: PPUSH
 729: LD_EXP 15
 733: PPUSH
 734: CALL 75909 0 2
 738: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 739: LD_STRING 04_Bobby
 741: PUSH
 742: EMPTY
 743: LIST
 744: PPUSH
 745: CALL_OW 28
 749: PUSH
 750: LD_STRING BobbyInDelta
 752: PPUSH
 753: LD_INT 0
 755: PPUSH
 756: CALL_OW 30
 760: NOT
 761: AND
 762: PUSH
 763: LD_STRING 07_Bobby
 765: PUSH
 766: EMPTY
 767: LIST
 768: PPUSH
 769: CALL_OW 28
 773: NOT
 774: AND
 775: IFFALSE 818
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 777: LD_ADDR_EXP 13
 781: PUSH
 782: LD_STRING Bobby
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: LD_STRING 04_
 790: PPUSH
 791: CALL 38508 0 3
 795: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 796: LD_ADDR_VAR 0 5
 800: PUSH
 801: LD_VAR 0 5
 805: PPUSH
 806: LD_EXP 13
 810: PPUSH
 811: CALL 75909 0 2
 815: ST_TO_ADDR
// end else
 816: GO 877
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 818: LD_EXP 13
 822: NOT
 823: PUSH
 824: LD_STRING BobbyIn07
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: CALL_OW 30
 834: NOT
 835: AND
 836: IFFALSE 877
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 838: LD_ADDR_EXP 13
 842: PUSH
 843: LD_STRING Bobby
 845: PPUSH
 846: LD_INT 1
 848: PPUSH
 849: LD_STRING 07_
 851: PPUSH
 852: CALL 38508 0 3
 856: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 857: LD_ADDR_VAR 0 5
 861: PUSH
 862: LD_VAR 0 5
 866: PPUSH
 867: LD_EXP 13
 871: PPUSH
 872: CALL 75909 0 2
 876: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 877: LD_STRING 04_Cyrus
 879: PUSH
 880: EMPTY
 881: LIST
 882: PPUSH
 883: CALL_OW 28
 887: PUSH
 888: LD_STRING CyrusInDelta
 890: PPUSH
 891: LD_INT 0
 893: PPUSH
 894: CALL_OW 30
 898: NOT
 899: AND
 900: PUSH
 901: LD_STRING 07_Cyrus
 903: PUSH
 904: EMPTY
 905: LIST
 906: PPUSH
 907: CALL_OW 28
 911: NOT
 912: AND
 913: IFFALSE 956
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
 915: LD_ADDR_EXP 14
 919: PUSH
 920: LD_STRING Cyrus
 922: PPUSH
 923: LD_INT 1
 925: PPUSH
 926: LD_STRING 04_
 928: PPUSH
 929: CALL 38508 0 3
 933: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
 934: LD_ADDR_VAR 0 5
 938: PUSH
 939: LD_VAR 0 5
 943: PPUSH
 944: LD_EXP 14
 948: PPUSH
 949: CALL 75909 0 2
 953: ST_TO_ADDR
// end else
 954: GO 1015
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
 956: LD_EXP 14
 960: NOT
 961: PUSH
 962: LD_STRING CyrusIn07
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 30
 972: NOT
 973: AND
 974: IFFALSE 1015
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 976: LD_ADDR_EXP 14
 980: PUSH
 981: LD_STRING Cyrus
 983: PPUSH
 984: LD_INT 1
 986: PPUSH
 987: LD_STRING 07_
 989: PPUSH
 990: CALL 38508 0 3
 994: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
 995: LD_ADDR_VAR 0 5
 999: PUSH
1000: LD_VAR 0 5
1004: PPUSH
1005: LD_EXP 14
1009: PPUSH
1010: CALL 75909 0 2
1014: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1015: LD_STRING 04_Brown
1017: PUSH
1018: EMPTY
1019: LIST
1020: PPUSH
1021: CALL_OW 28
1025: PUSH
1026: LD_STRING BrownInDelta
1028: PPUSH
1029: LD_INT 0
1031: PPUSH
1032: CALL_OW 30
1036: NOT
1037: AND
1038: PUSH
1039: LD_STRING 07_Brown
1041: PUSH
1042: EMPTY
1043: LIST
1044: PPUSH
1045: CALL_OW 28
1049: NOT
1050: AND
1051: PUSH
1052: LD_EXP 9
1056: PUSH
1057: LD_INT 2
1059: NONEQUAL
1060: AND
1061: IFFALSE 1104
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1063: LD_ADDR_EXP 11
1067: PUSH
1068: LD_STRING Brown
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: LD_STRING 04_
1076: PPUSH
1077: CALL 38508 0 3
1081: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1082: LD_ADDR_VAR 0 5
1086: PUSH
1087: LD_VAR 0 5
1091: PPUSH
1092: LD_EXP 11
1096: PPUSH
1097: CALL 75909 0 2
1101: ST_TO_ADDR
// end else
1102: GO 1173
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1104: LD_EXP 11
1108: NOT
1109: PUSH
1110: LD_STRING BrownIn07
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: CALL_OW 30
1120: NOT
1121: AND
1122: PUSH
1123: LD_EXP 9
1127: PUSH
1128: LD_INT 2
1130: NONEQUAL
1131: AND
1132: IFFALSE 1173
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1134: LD_ADDR_EXP 11
1138: PUSH
1139: LD_STRING Brown
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_STRING 07_
1147: PPUSH
1148: CALL 38508 0 3
1152: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1153: LD_ADDR_VAR 0 5
1157: PUSH
1158: LD_VAR 0 5
1162: PPUSH
1163: LD_EXP 11
1167: PPUSH
1168: CALL 75909 0 2
1172: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1173: LD_STRING 04_Donaldson
1175: PUSH
1176: EMPTY
1177: LIST
1178: PPUSH
1179: CALL_OW 28
1183: PUSH
1184: LD_STRING DonaldsonInDelta
1186: PPUSH
1187: LD_INT 0
1189: PPUSH
1190: CALL_OW 30
1194: NOT
1195: AND
1196: PUSH
1197: LD_STRING 07_Donaldson
1199: PUSH
1200: EMPTY
1201: LIST
1202: PPUSH
1203: CALL_OW 28
1207: NOT
1208: AND
1209: PUSH
1210: LD_EXP 9
1214: PUSH
1215: LD_INT 1
1217: NONEQUAL
1218: AND
1219: IFFALSE 1262
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1221: LD_ADDR_EXP 12
1225: PUSH
1226: LD_STRING Donaldson
1228: PPUSH
1229: LD_INT 1
1231: PPUSH
1232: LD_STRING 04_
1234: PPUSH
1235: CALL 38508 0 3
1239: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1240: LD_ADDR_VAR 0 5
1244: PUSH
1245: LD_VAR 0 5
1249: PPUSH
1250: LD_EXP 12
1254: PPUSH
1255: CALL 75909 0 2
1259: ST_TO_ADDR
// end else
1260: GO 1331
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1262: LD_EXP 12
1266: NOT
1267: PUSH
1268: LD_STRING DonaldsonIn07
1270: PPUSH
1271: LD_INT 0
1273: PPUSH
1274: CALL_OW 30
1278: NOT
1279: AND
1280: PUSH
1281: LD_EXP 9
1285: PUSH
1286: LD_INT 1
1288: NONEQUAL
1289: AND
1290: IFFALSE 1331
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1292: LD_ADDR_EXP 12
1296: PUSH
1297: LD_STRING Donaldson
1299: PPUSH
1300: LD_INT 1
1302: PPUSH
1303: LD_STRING 07_
1305: PPUSH
1306: CALL 38508 0 3
1310: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1311: LD_ADDR_VAR 0 5
1315: PUSH
1316: LD_VAR 0 5
1320: PPUSH
1321: LD_EXP 12
1325: PPUSH
1326: CALL 75909 0 2
1330: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1331: LD_STRING KhatamIn07
1333: PPUSH
1334: LD_INT 0
1336: PPUSH
1337: CALL_OW 30
1341: NOT
1342: IFFALSE 1383
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1344: LD_ADDR_EXP 19
1348: PUSH
1349: LD_STRING Khatam
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: LD_STRING 07_
1357: PPUSH
1358: CALL 38508 0 3
1362: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1363: LD_ADDR_VAR 0 5
1367: PUSH
1368: LD_VAR 0 5
1372: PPUSH
1373: LD_EXP 19
1377: PPUSH
1378: CALL 75909 0 2
1382: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1383: LD_ADDR_VAR 0 6
1387: PUSH
1388: LD_STRING 07_othersGamma
1390: PPUSH
1391: CALL_OW 31
1395: ST_TO_ADDR
// tmp := 5 - others ;
1396: LD_ADDR_VAR 0 4
1400: PUSH
1401: LD_INT 5
1403: PUSH
1404: LD_VAR 0 6
1408: MINUS
1409: ST_TO_ADDR
// if tmp then
1410: LD_VAR 0 4
1414: IFFALSE 1471
// for i := tmp downto 1 do
1416: LD_ADDR_VAR 0 2
1420: PUSH
1421: DOUBLE
1422: LD_VAR 0 4
1426: INC
1427: ST_TO_ADDR
1428: LD_INT 1
1430: PUSH
1431: FOR_DOWNTO
1432: IFFALSE 1469
// begin PrepareHuman ( false , 1 , 5 ) ;
1434: LD_INT 0
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: LD_INT 5
1442: PPUSH
1443: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1447: LD_ADDR_VAR 0 6
1451: PUSH
1452: LD_VAR 0 6
1456: PPUSH
1457: CALL_OW 44
1461: PPUSH
1462: CALL 75909 0 2
1466: ST_TO_ADDR
// end ;
1467: GO 1431
1469: POP
1470: POP
// for i in others do
1471: LD_ADDR_VAR 0 2
1475: PUSH
1476: LD_VAR 0 6
1480: PUSH
1481: FOR_IN
1482: IFFALSE 1498
// SetTag ( i , 106 ) ;
1484: LD_VAR 0 2
1488: PPUSH
1489: LD_INT 106
1491: PPUSH
1492: CALL_OW 109
1496: GO 1481
1498: POP
1499: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1500: LD_ADDR_VAR 0 8
1504: PUSH
1505: LD_INT 22
1507: PUSH
1508: LD_INT 1
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PUSH
1515: LD_INT 30
1517: PUSH
1518: LD_INT 31
1520: PUSH
1521: EMPTY
1522: LIST
1523: LIST
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PPUSH
1529: CALL_OW 69
1533: ST_TO_ADDR
// for i in bun do
1534: LD_ADDR_VAR 0 2
1538: PUSH
1539: LD_VAR 0 8
1543: PUSH
1544: FOR_IN
1545: IFFALSE 1677
// begin x := GetX ( i ) ;
1547: LD_ADDR_VAR 0 13
1551: PUSH
1552: LD_VAR 0 2
1556: PPUSH
1557: CALL_OW 250
1561: ST_TO_ADDR
// y := GetY ( i ) ;
1562: LD_ADDR_VAR 0 14
1566: PUSH
1567: LD_VAR 0 2
1571: PPUSH
1572: CALL_OW 251
1576: ST_TO_ADDR
// d := GetDir ( i ) ;
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 2
1586: PPUSH
1587: CALL_OW 254
1591: ST_TO_ADDR
// RemoveUnit ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 64
// bc_type := b_bunker ;
1601: LD_ADDR_OWVAR 42
1605: PUSH
1606: LD_INT 32
1608: ST_TO_ADDR
// bc_level := 6 ;
1609: LD_ADDR_OWVAR 43
1613: PUSH
1614: LD_INT 6
1616: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1617: LD_ADDR_VAR 0 16
1621: PUSH
1622: LD_VAR 0 13
1626: PPUSH
1627: LD_VAR 0 14
1631: PPUSH
1632: LD_VAR 0 15
1636: PPUSH
1637: CALL_OW 47
1641: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1642: LD_VAR 0 16
1646: PPUSH
1647: LD_INT 5
1649: PUSH
1650: LD_INT 4
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: LD_VAR 0 2
1661: PUSH
1662: LD_INT 2
1664: MOD
1665: PUSH
1666: LD_INT 1
1668: PLUS
1669: ARRAY
1670: PPUSH
1671: CALL_OW 431
// end ;
1675: GO 1544
1677: POP
1678: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1679: LD_ADDR_VAR 0 7
1683: PUSH
1684: LD_INT 22
1686: PUSH
1687: LD_INT 1
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: PUSH
1694: LD_INT 30
1696: PUSH
1697: LD_INT 5
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PPUSH
1708: CALL_OW 69
1712: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1713: LD_ADDR_VAR 0 9
1717: PUSH
1718: LD_INT 22
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_INT 2
1730: PUSH
1731: LD_INT 30
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 30
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PUSH
1751: LD_INT 30
1753: PUSH
1754: LD_INT 8
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PPUSH
1771: CALL_OW 69
1775: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1776: LD_ADDR_VAR 0 10
1780: PUSH
1781: LD_INT 22
1783: PUSH
1784: LD_INT 1
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 30
1793: PUSH
1794: LD_INT 3
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: PUSH
1801: EMPTY
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 69
1809: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1810: LD_ADDR_VAR 0 11
1814: PUSH
1815: LD_INT 22
1817: PUSH
1818: LD_INT 1
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PUSH
1825: LD_INT 30
1827: PUSH
1828: LD_INT 36
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: PPUSH
1839: CALL_OW 69
1843: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1844: LD_ADDR_VAR 0 8
1848: PUSH
1849: LD_INT 22
1851: PUSH
1852: LD_INT 1
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PUSH
1859: LD_INT 2
1861: PUSH
1862: LD_INT 30
1864: PUSH
1865: LD_INT 31
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 30
1874: PUSH
1875: LD_INT 32
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: ST_TO_ADDR
// for i in others union tmp2 do
1896: LD_ADDR_VAR 0 2
1900: PUSH
1901: LD_VAR 0 6
1905: PUSH
1906: LD_VAR 0 5
1910: UNION
1911: PUSH
1912: FOR_IN
1913: IFFALSE 2405
// begin placed := false ;
1915: LD_ADDR_VAR 0 12
1919: PUSH
1920: LD_INT 0
1922: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1923: LD_VAR 0 2
1927: PPUSH
1928: CALL_OW 257
1932: PUSH
1933: LD_INT 1
1935: EQUAL
1936: IFFALSE 2061
// begin if UnitFilter ( bun , [ f_empty ] ) then
1938: LD_VAR 0 8
1942: PPUSH
1943: LD_INT 58
1945: PUSH
1946: EMPTY
1947: LIST
1948: PPUSH
1949: CALL_OW 72
1953: IFFALSE 1992
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1955: LD_VAR 0 2
1959: PPUSH
1960: LD_VAR 0 8
1964: PPUSH
1965: LD_INT 58
1967: PUSH
1968: EMPTY
1969: LIST
1970: PPUSH
1971: CALL_OW 72
1975: PUSH
1976: LD_INT 1
1978: ARRAY
1979: PPUSH
1980: CALL_OW 52
// placed := true ;
1984: LD_ADDR_VAR 0 12
1988: PUSH
1989: LD_INT 1
1991: ST_TO_ADDR
// end ; if arm and not placed then
1992: LD_VAR 0 7
1996: PUSH
1997: LD_VAR 0 12
2001: NOT
2002: AND
2003: IFFALSE 2061
// begin for j in arm do
2005: LD_ADDR_VAR 0 3
2009: PUSH
2010: LD_VAR 0 7
2014: PUSH
2015: FOR_IN
2016: IFFALSE 2059
// if UnitsInside ( j ) < 6 then
2018: LD_VAR 0 3
2022: PPUSH
2023: CALL_OW 313
2027: PUSH
2028: LD_INT 6
2030: LESS
2031: IFFALSE 2057
// begin PlaceHumanInUnit ( i , j ) ;
2033: LD_VAR 0 2
2037: PPUSH
2038: LD_VAR 0 3
2042: PPUSH
2043: CALL_OW 52
// placed := true ;
2047: LD_ADDR_VAR 0 12
2051: PUSH
2052: LD_INT 1
2054: ST_TO_ADDR
// break ;
2055: GO 2059
// end ;
2057: GO 2015
2059: POP
2060: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2061: LD_VAR 0 2
2065: PPUSH
2066: CALL_OW 257
2070: PUSH
2071: LD_INT 2
2073: EQUAL
2074: IFFALSE 2107
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2076: LD_VAR 0 2
2080: PPUSH
2081: LD_INT 52
2083: PPUSH
2084: LD_INT 20
2086: PPUSH
2087: LD_INT 6
2089: PPUSH
2090: LD_INT 0
2092: PPUSH
2093: CALL_OW 50
// placed := true ;
2097: LD_ADDR_VAR 0 12
2101: PUSH
2102: LD_INT 1
2104: ST_TO_ADDR
// continue ;
2105: GO 1912
// end ; if GetClass ( i ) = class_mechanic then
2107: LD_VAR 0 2
2111: PPUSH
2112: CALL_OW 257
2116: PUSH
2117: LD_INT 3
2119: EQUAL
2120: IFFALSE 2224
// begin if fac then
2122: LD_VAR 0 10
2126: IFFALSE 2224
// begin if ct then
2128: LD_VAR 0 11
2132: IFFALSE 2160
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2134: LD_VAR 0 2
2138: PPUSH
2139: LD_VAR 0 11
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: PPUSH
2148: CALL_OW 52
// placed := true ;
2152: LD_ADDR_VAR 0 12
2156: PUSH
2157: LD_INT 1
2159: ST_TO_ADDR
// end ; if placed then
2160: LD_VAR 0 12
2164: IFFALSE 2168
// continue ;
2166: GO 1912
// for j in fac do
2168: LD_ADDR_VAR 0 3
2172: PUSH
2173: LD_VAR 0 10
2177: PUSH
2178: FOR_IN
2179: IFFALSE 2222
// if UnitsInside ( j ) < 6 then
2181: LD_VAR 0 3
2185: PPUSH
2186: CALL_OW 313
2190: PUSH
2191: LD_INT 6
2193: LESS
2194: IFFALSE 2220
// begin PlaceHumanInUnit ( i , j ) ;
2196: LD_VAR 0 2
2200: PPUSH
2201: LD_VAR 0 3
2205: PPUSH
2206: CALL_OW 52
// placed := true ;
2210: LD_ADDR_VAR 0 12
2214: PUSH
2215: LD_INT 1
2217: ST_TO_ADDR
// break ;
2218: GO 2222
// end ;
2220: GO 2178
2222: POP
2223: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2224: LD_VAR 0 2
2228: PPUSH
2229: CALL_OW 257
2233: PUSH
2234: LD_INT 4
2236: EQUAL
2237: IFFALSE 2332
// begin if lab then
2239: LD_VAR 0 9
2243: IFFALSE 2301
// begin for j in lab do
2245: LD_ADDR_VAR 0 3
2249: PUSH
2250: LD_VAR 0 9
2254: PUSH
2255: FOR_IN
2256: IFFALSE 2299
// if UnitsInside ( j ) < 6 then
2258: LD_VAR 0 3
2262: PPUSH
2263: CALL_OW 313
2267: PUSH
2268: LD_INT 6
2270: LESS
2271: IFFALSE 2297
// begin PlaceHumanInUnit ( i , j ) ;
2273: LD_VAR 0 2
2277: PPUSH
2278: LD_VAR 0 3
2282: PPUSH
2283: CALL_OW 52
// placed := true ;
2287: LD_ADDR_VAR 0 12
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// break ;
2295: GO 2299
// end ;
2297: GO 2255
2299: POP
2300: POP
// end ; if not placed then
2301: LD_VAR 0 12
2305: NOT
2306: IFFALSE 2332
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2308: LD_VAR 0 2
2312: PPUSH
2313: LD_INT 3
2315: PPUSH
2316: LD_INT 0
2318: PPUSH
2319: CALL_OW 49
// ComHold ( i ) ;
2323: LD_VAR 0 2
2327: PPUSH
2328: CALL_OW 140
// end ; end ; if ct then
2332: LD_VAR 0 11
2336: IFFALSE 2403
// if UnitsInside ( ct [ 1 ] ) then
2338: LD_VAR 0 11
2342: PUSH
2343: LD_INT 1
2345: ARRAY
2346: PPUSH
2347: CALL_OW 313
2351: IFFALSE 2403
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2353: LD_ADDR_VAR 0 2
2357: PUSH
2358: LD_INT 22
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: PUSH
2368: LD_INT 33
2370: PUSH
2371: LD_INT 2
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: PPUSH
2382: CALL_OW 69
2386: PUSH
2387: FOR_IN
2388: IFFALSE 2401
// Connect ( i ) ;
2390: LD_VAR 0 2
2394: PPUSH
2395: CALL 46618 0 1
2399: GO 2387
2401: POP
2402: POP
// end ; end ;
2403: GO 1912
2405: POP
2406: POP
// end ;
2407: LD_VAR 0 1
2411: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2412: LD_INT 0
2414: PPUSH
2415: PPUSH
2416: PPUSH
2417: PPUSH
2418: PPUSH
2419: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2420: LD_INT 71
2422: PPUSH
2423: LD_INT 5
2425: PPUSH
2426: LD_INT 1
2428: PPUSH
2429: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2433: LD_ADDR_VAR 0 2
2437: PUSH
2438: LD_STRING GammaBase
2440: PPUSH
2441: EMPTY
2442: PPUSH
2443: CALL_OW 30
2447: ST_TO_ADDR
// if not blist then
2448: LD_VAR 0 2
2452: NOT
2453: IFFALSE 2493
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2455: LD_ADDR_VAR 0 2
2459: PUSH
2460: LD_INT 1
2462: PUSH
2463: LD_INT 52
2465: PUSH
2466: LD_INT 12
2468: PUSH
2469: LD_INT 3
2471: PUSH
2472: LD_INT 3
2474: PUSH
2475: LD_INT 0
2477: PUSH
2478: LD_INT 0
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: PUSH
2490: EMPTY
2491: LIST
2492: ST_TO_ADDR
// uc_side := 1 ;
2493: LD_ADDR_OWVAR 20
2497: PUSH
2498: LD_INT 1
2500: ST_TO_ADDR
// uc_nation := 1 ;
2501: LD_ADDR_OWVAR 21
2505: PUSH
2506: LD_INT 1
2508: ST_TO_ADDR
// bc_kind1 := - 1 ;
2509: LD_ADDR_OWVAR 44
2513: PUSH
2514: LD_INT 1
2516: NEG
2517: ST_TO_ADDR
// bc_kind2 := - 1 ;
2518: LD_ADDR_OWVAR 45
2522: PUSH
2523: LD_INT 1
2525: NEG
2526: ST_TO_ADDR
// for i in blist do
2527: LD_ADDR_VAR 0 3
2531: PUSH
2532: LD_VAR 0 2
2536: PUSH
2537: FOR_IN
2538: IFFALSE 2814
// begin bc_type := i [ 1 ] ;
2540: LD_ADDR_OWVAR 42
2544: PUSH
2545: LD_VAR 0 3
2549: PUSH
2550: LD_INT 1
2552: ARRAY
2553: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2554: LD_ADDR_OWVAR 43
2558: PUSH
2559: LD_VAR 0 3
2563: PUSH
2564: LD_INT 5
2566: ARRAY
2567: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2568: LD_OWVAR 42
2572: PUSH
2573: LD_INT 6
2575: PUSH
2576: LD_INT 7
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: IN
2583: IFFALSE 2649
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2585: LD_STRING 06_remoteVehs_1
2587: PPUSH
2588: LD_INT 0
2590: PPUSH
2591: CALL_OW 30
2595: NOT
2596: IFFALSE 2624
// begin bc_type := b_lab_full ;
2598: LD_ADDR_OWVAR 42
2602: PUSH
2603: LD_INT 8
2605: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2606: LD_ADDR_OWVAR 44
2610: PUSH
2611: LD_INT 10
2613: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2614: LD_ADDR_OWVAR 45
2618: PUSH
2619: LD_INT 15
2621: ST_TO_ADDR
// end else
2622: GO 2649
// begin bc_type := b_lab_half ;
2624: LD_ADDR_OWVAR 42
2628: PUSH
2629: LD_INT 7
2631: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2632: LD_ADDR_OWVAR 44
2636: PUSH
2637: LD_INT 10
2639: ST_TO_ADDR
// bc_kind2 := - 1 ;
2640: LD_ADDR_OWVAR 45
2644: PUSH
2645: LD_INT 1
2647: NEG
2648: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2649: LD_OWVAR 42
2653: PUSH
2654: LD_INT 2
2656: EQUAL
2657: IFFALSE 2667
// bc_type := b_factory ;
2659: LD_ADDR_OWVAR 42
2663: PUSH
2664: LD_INT 3
2666: ST_TO_ADDR
// if bc_type = b_depot then
2667: LD_OWVAR 42
2671: PUSH
2672: LD_INT 0
2674: EQUAL
2675: IFFALSE 2724
// begin bc_type := b_warehouse ;
2677: LD_ADDR_OWVAR 42
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2685: LD_ADDR_EXP 26
2689: PUSH
2690: LD_VAR 0 3
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 3
2706: ARRAY
2707: PPUSH
2708: LD_VAR 0 3
2712: PUSH
2713: LD_INT 4
2715: ARRAY
2716: PPUSH
2717: CALL_OW 47
2721: ST_TO_ADDR
// continue ;
2722: GO 2537
// end ; if bc_type = b_armoury then
2724: LD_OWVAR 42
2728: PUSH
2729: LD_INT 4
2731: EQUAL
2732: IFFALSE 2742
// bc_type = b_barracks ;
2734: LD_ADDR_OWVAR 42
2738: PUSH
2739: LD_INT 5
2741: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 2
2754: ARRAY
2755: PPUSH
2756: LD_VAR 0 3
2760: PUSH
2761: LD_INT 3
2763: ARRAY
2764: PPUSH
2765: LD_VAR 0 3
2769: PUSH
2770: LD_INT 4
2772: ARRAY
2773: PPUSH
2774: CALL_OW 47
2778: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2779: LD_VAR 0 4
2783: PPUSH
2784: CALL_OW 266
2788: PUSH
2789: LD_INT 32
2791: EQUAL
2792: IFFALSE 2812
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_VAR 0 3
2803: PUSH
2804: LD_INT 7
2806: ARRAY
2807: PPUSH
2808: CALL_OW 431
// end ;
2812: GO 2537
2814: POP
2815: POP
// if not amDepot then
2816: LD_EXP 26
2820: NOT
2821: IFFALSE 2858
// begin bc_type := b_warehouse ;
2823: LD_ADDR_OWVAR 42
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// bc_level := 6 ;
2831: LD_ADDR_OWVAR 43
2835: PUSH
2836: LD_INT 6
2838: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2839: LD_ADDR_EXP 26
2843: PUSH
2844: LD_INT 52
2846: PPUSH
2847: LD_INT 12
2849: PPUSH
2850: LD_INT 3
2852: PPUSH
2853: CALL_OW 47
2857: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2858: LD_ADDR_OWVAR 42
2862: PUSH
2863: LD_INT 5
2865: ST_TO_ADDR
// bc_level := 6 ;
2866: LD_ADDR_OWVAR 43
2870: PUSH
2871: LD_INT 6
2873: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2874: LD_INT 61
2876: PPUSH
2877: LD_INT 29
2879: PPUSH
2880: LD_INT 5
2882: PPUSH
2883: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2887: LD_EXP 26
2891: PPUSH
2892: LD_STRING gamma
2894: PPUSH
2895: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2899: LD_EXP 26
2903: PPUSH
2904: CALL_OW 274
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: LD_INT 400
2914: PUSH
2915: LD_INT 320
2917: PUSH
2918: LD_INT 270
2920: PUSH
2921: LD_INT 230
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_OWVAR 67
2934: ARRAY
2935: PPUSH
2936: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2940: LD_EXP 26
2944: PPUSH
2945: CALL_OW 274
2949: PPUSH
2950: LD_INT 2
2952: PPUSH
2953: LD_INT 130
2955: PPUSH
2956: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 30
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: IFFALSE 3236
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_INT 22
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_INT 30
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PPUSH
3019: CALL_OW 69
3023: PUSH
3024: LD_INT 1
3026: ARRAY
3027: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3028: LD_ADDR_VAR 0 6
3032: PUSH
3033: LD_VAR 0 4
3037: PPUSH
3038: CALL_OW 250
3042: PPUSH
3043: LD_VAR 0 4
3047: PPUSH
3048: CALL_OW 251
3052: PPUSH
3053: LD_VAR 0 4
3057: PPUSH
3058: CALL_OW 254
3062: PPUSH
3063: CALL 73548 0 3
3067: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: LD_INT 19
3075: PUSH
3076: LD_INT 17
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3083: LD_STRING 06_remoteVehs_1
3085: PPUSH
3086: LD_INT 0
3088: PPUSH
3089: CALL_OW 30
3093: IFFALSE 3116
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: LD_VAR 0 2
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: LD_INT 22
3110: PPUSH
3111: CALL_OW 2
3115: ST_TO_ADDR
// for i in tmp do
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_VAR 0 6
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3234
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3129: LD_VAR 0 3
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: LD_VAR 0 3
3142: PUSH
3143: LD_INT 2
3145: ARRAY
3146: PPUSH
3147: CALL_OW 428
3151: PUSH
3152: LD_INT 0
3154: EQUAL
3155: IFFALSE 3232
// begin bc_type := blist [ 1 ] ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_VAR 0 2
3166: PUSH
3167: LD_INT 1
3169: ARRAY
3170: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3171: LD_VAR 0 3
3175: PUSH
3176: LD_INT 1
3178: ARRAY
3179: PPUSH
3180: LD_VAR 0 3
3184: PUSH
3185: LD_INT 2
3187: ARRAY
3188: PPUSH
3189: LD_VAR 0 3
3193: PUSH
3194: LD_INT 3
3196: ARRAY
3197: PPUSH
3198: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: CALL_OW 3
3219: ST_TO_ADDR
// if blist = 0 then
3220: LD_VAR 0 2
3224: PUSH
3225: LD_INT 0
3227: EQUAL
3228: IFFALSE 3232
// break ;
3230: GO 3234
// end ;
3232: GO 3126
3234: POP
3235: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3236: LD_STRING 06_remoteVehs_1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 30
3246: IFFALSE 3699
// begin bc_type := b_control_tower ;
3248: LD_ADDR_OWVAR 42
3252: PUSH
3253: LD_INT 36
3255: ST_TO_ADDR
// bc_level := 4 ;
3256: LD_ADDR_OWVAR 43
3260: PUSH
3261: LD_INT 4
3263: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3264: LD_EXP 26
3268: PPUSH
3269: LD_INT 36
3271: PPUSH
3272: LD_INT 62
3274: PPUSH
3275: LD_INT 12
3277: PPUSH
3278: LD_INT 3
3280: PPUSH
3281: CALL 51750 0 5
3285: PUSH
3286: LD_INT 92
3288: PUSH
3289: LD_INT 62
3291: PUSH
3292: LD_INT 12
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: NOT
3309: AND
3310: IFFALSE 3327
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3312: LD_INT 62
3314: PPUSH
3315: LD_INT 12
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: CALL_OW 47
3325: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3327: LD_EXP 26
3331: PPUSH
3332: LD_INT 36
3334: PPUSH
3335: LD_INT 37
3337: PPUSH
3338: LD_INT 18
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL 51750 0 5
3348: PUSH
3349: LD_INT 92
3351: PUSH
3352: LD_INT 37
3354: PUSH
3355: LD_INT 18
3357: PUSH
3358: LD_INT 3
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: PPUSH
3367: CALL_OW 69
3371: NOT
3372: AND
3373: IFFALSE 3390
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3375: LD_INT 37
3377: PPUSH
3378: LD_INT 18
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: CALL_OW 47
3388: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3390: LD_EXP 26
3394: PPUSH
3395: LD_INT 36
3397: PPUSH
3398: LD_INT 66
3400: PPUSH
3401: LD_INT 14
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: CALL 51750 0 5
3411: PUSH
3412: LD_INT 92
3414: PUSH
3415: LD_INT 66
3417: PUSH
3418: LD_INT 14
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: NOT
3435: AND
3436: IFFALSE 3453
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3438: LD_INT 66
3440: PPUSH
3441: LD_INT 14
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: CALL_OW 47
3451: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3453: LD_EXP 26
3457: PPUSH
3458: LD_INT 36
3460: PPUSH
3461: LD_INT 74
3463: PPUSH
3464: LD_INT 26
3466: PPUSH
3467: LD_INT 4
3469: PPUSH
3470: CALL 51750 0 5
3474: IFFALSE 3489
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3476: LD_INT 74
3478: PPUSH
3479: LD_INT 26
3481: PPUSH
3482: LD_INT 4
3484: PPUSH
3485: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3489: LD_INT 22
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 36
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: NOT
3518: IFFALSE 3522
// exit ;
3520: GO 4047
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: DOUBLE
3528: LD_INT 1
3530: DEC
3531: ST_TO_ADDR
3532: LD_INT 3
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 2
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_OWVAR 67
3554: ARRAY
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3697
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3559: LD_ADDR_OWVAR 37
3563: PUSH
3564: LD_INT 3
3566: PUSH
3567: LD_INT 2
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3586: LD_ADDR_OWVAR 39
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 2
3606: PPUSH
3607: CALL_OW 12
3611: ARRAY
3612: ST_TO_ADDR
// vc_control := control_remote ;
3613: LD_ADDR_OWVAR 38
3617: PUSH
3618: LD_INT 2
3620: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_OWVAR 40
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 5
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// veh := CreateVehicle ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: CALL_OW 45
3661: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_INT 3
3669: PPUSH
3670: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3674: LD_VAR 0 5
3678: PPUSH
3679: LD_INT 61
3681: PPUSH
3682: LD_INT 23
3684: PPUSH
3685: LD_INT 9
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 50
// end ;
3695: GO 3556
3697: POP
3698: POP
// end ; if gammaCommander = 1 then
3699: LD_EXP 9
3703: PUSH
3704: LD_INT 1
3706: EQUAL
3707: IFFALSE 3884
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3709: LD_ADDR_VAR 0 3
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 3
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: PUSH
3737: LD_OWVAR 67
3741: ARRAY
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3880
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3746: LD_ADDR_OWVAR 37
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 2
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 1
3763: PPUSH
3764: LD_INT 2
3766: PPUSH
3767: CALL_OW 12
3771: ARRAY
3772: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3773: LD_ADDR_OWVAR 39
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 2
3793: PPUSH
3794: CALL_OW 12
3798: ARRAY
3799: ST_TO_ADDR
// vc_control := control_manual ;
3800: LD_ADDR_OWVAR 38
3804: PUSH
3805: LD_INT 1
3807: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3808: LD_ADDR_OWVAR 40
3812: PUSH
3813: LD_INT 4
3815: PUSH
3816: LD_INT 5
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: CALL_OW 12
3833: ARRAY
3834: ST_TO_ADDR
// veh := CreateVehicle ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: CALL_OW 45
3844: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3845: LD_VAR 0 5
3849: PPUSH
3850: LD_INT 3
3852: PPUSH
3853: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3857: LD_VAR 0 5
3861: PPUSH
3862: LD_INT 61
3864: PPUSH
3865: LD_INT 23
3867: PPUSH
3868: LD_INT 9
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 50
// end ;
3878: GO 3743
3880: POP
3881: POP
// end else
3882: GO 4047
// if gammaCommander = 2 then
3884: LD_EXP 9
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: IFFALSE 4047
// begin bc_type := b_bunker ;
3894: LD_ADDR_OWVAR 42
3898: PUSH
3899: LD_INT 32
3901: ST_TO_ADDR
// bc_level := 6 ;
3902: LD_ADDR_OWVAR 43
3906: PUSH
3907: LD_INT 6
3909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: LD_INT 67
3917: PPUSH
3918: LD_INT 36
3920: PPUSH
3921: LD_INT 5
3923: PPUSH
3924: CALL_OW 47
3928: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3941: LD_ADDR_VAR 0 4
3945: PUSH
3946: LD_INT 61
3948: PPUSH
3949: LD_INT 40
3951: PPUSH
3952: LD_INT 5
3954: PPUSH
3955: CALL_OW 47
3959: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3960: LD_VAR 0 4
3964: PPUSH
3965: LD_INT 5
3967: PPUSH
3968: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3972: LD_ADDR_OWVAR 37
3976: PUSH
3977: LD_INT 2
3979: ST_TO_ADDR
// vc_engine := engine_combustion ;
3980: LD_ADDR_OWVAR 39
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// vc_control := control_manual ;
3988: LD_ADDR_OWVAR 38
3992: PUSH
3993: LD_INT 1
3995: ST_TO_ADDR
// vc_weapon := us_crane ;
3996: LD_ADDR_OWVAR 40
4000: PUSH
4001: LD_INT 13
4003: ST_TO_ADDR
// veh := CreateVehicle ;
4004: LD_ADDR_VAR 0 5
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 5
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4026: LD_VAR 0 5
4030: PPUSH
4031: LD_INT 61
4033: PPUSH
4034: LD_INT 23
4036: PPUSH
4037: LD_INT 9
4039: PPUSH
4040: LD_INT 0
4042: PPUSH
4043: CALL_OW 50
// end ; end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
// uc_side := 1 ;
4058: LD_ADDR_OWVAR 20
4062: PUSH
4063: LD_INT 1
4065: ST_TO_ADDR
// uc_nation := 1 ;
4066: LD_ADDR_OWVAR 21
4070: PUSH
4071: LD_INT 1
4073: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4074: LD_ADDR_EXP 21
4078: PUSH
4079: LD_STRING Denis
4081: PPUSH
4082: LD_EXP 1
4086: NOT
4087: PPUSH
4088: LD_STRING 06c_
4090: PPUSH
4091: CALL 38508 0 3
4095: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4096: LD_EXP 21
4100: PPUSH
4101: LD_INT 4
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4111: LD_ADDR_EXP 22
4115: PUSH
4116: LD_STRING Joan
4118: PPUSH
4119: LD_EXP 1
4123: NOT
4124: PPUSH
4125: LD_STRING 06c_
4127: PPUSH
4128: CALL 38508 0 3
4132: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4133: LD_EXP 22
4137: PPUSH
4138: LD_INT 4
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4148: LD_STRING GladstoneIn07
4150: PPUSH
4151: LD_INT 0
4153: PPUSH
4154: CALL_OW 30
4158: NOT
4159: IFFALSE 4239
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4161: LD_ADDR_EXP 17
4165: PUSH
4166: LD_STRING Gladstone
4168: PPUSH
4169: LD_EXP 1
4173: NOT
4174: PPUSH
4175: LD_STRING 06c_
4177: PPUSH
4178: CALL 38508 0 3
4182: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4183: LD_EXP 17
4187: NOT
4188: PUSH
4189: LD_STRING GladstoneStayInDelta
4191: PPUSH
4192: LD_INT 0
4194: PPUSH
4195: CALL_OW 30
4199: AND
4200: IFFALSE 4224
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4202: LD_ADDR_EXP 17
4206: PUSH
4207: LD_STRING Gladstone
4209: PPUSH
4210: LD_EXP 1
4214: NOT
4215: PPUSH
4216: LD_STRING 05_
4218: PPUSH
4219: CALL 38508 0 3
4223: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4224: LD_EXP 17
4228: PPUSH
4229: LD_INT 4
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4239: LD_STRING LisaStayInDelta
4241: PPUSH
4242: LD_INT 0
4244: PPUSH
4245: CALL_OW 30
4249: IFFALSE 4285
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4251: LD_ADDR_EXP 15
4255: PUSH
4256: LD_STRING Lisa
4258: PPUSH
4259: LD_INT 1
4261: PPUSH
4262: LD_STRING 05_
4264: PPUSH
4265: CALL 38508 0 3
4269: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4270: LD_EXP 15
4274: PPUSH
4275: LD_INT 4
4277: PPUSH
4278: LD_INT 0
4280: PPUSH
4281: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4285: LD_STRING BobbyStayInDelta
4287: PPUSH
4288: LD_INT 0
4290: PPUSH
4291: CALL_OW 30
4295: IFFALSE 4331
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4297: LD_ADDR_EXP 13
4301: PUSH
4302: LD_STRING Bobby
4304: PPUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_STRING 05_
4310: PPUSH
4311: CALL 38508 0 3
4315: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4316: LD_EXP 13
4320: PPUSH
4321: LD_INT 4
4323: PPUSH
4324: LD_INT 0
4326: PPUSH
4327: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4331: LD_STRING CyrusStayInDelta
4333: PPUSH
4334: LD_INT 0
4336: PPUSH
4337: CALL_OW 30
4341: IFFALSE 4377
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4343: LD_ADDR_EXP 14
4347: PUSH
4348: LD_STRING Cyrus
4350: PPUSH
4351: LD_INT 1
4353: PPUSH
4354: LD_STRING 05_
4356: PPUSH
4357: CALL 38508 0 3
4361: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4362: LD_EXP 14
4366: PPUSH
4367: LD_INT 4
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4377: LD_STRING BrownStayInDelta
4379: PPUSH
4380: LD_INT 0
4382: PPUSH
4383: CALL_OW 30
4387: IFFALSE 4423
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4389: LD_ADDR_EXP 11
4393: PUSH
4394: LD_STRING Brown
4396: PPUSH
4397: LD_INT 1
4399: PPUSH
4400: LD_STRING 05_
4402: PPUSH
4403: CALL 38508 0 3
4407: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4408: LD_EXP 11
4412: PPUSH
4413: LD_INT 4
4415: PPUSH
4416: LD_INT 0
4418: PPUSH
4419: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4423: LD_STRING DonaldsonStayInDelta
4425: PPUSH
4426: LD_INT 0
4428: PPUSH
4429: CALL_OW 30
4433: IFFALSE 4469
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4435: LD_ADDR_EXP 12
4439: PUSH
4440: LD_STRING Donaldson
4442: PPUSH
4443: LD_INT 1
4445: PPUSH
4446: LD_STRING 05_
4448: PPUSH
4449: CALL 38508 0 3
4453: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4454: LD_EXP 12
4458: PPUSH
4459: LD_INT 4
4461: PPUSH
4462: LD_INT 0
4464: PPUSH
4465: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4469: LD_ADDR_VAR 0 4
4473: PUSH
4474: LD_STRING OthersStayInDelta
4476: PPUSH
4477: CALL_OW 31
4481: ST_TO_ADDR
// if others > 2 then
4482: LD_VAR 0 4
4486: PUSH
4487: LD_INT 2
4489: GREATER
4490: IFFALSE 4553
// begin for j := 1 to 2 do
4492: LD_ADDR_VAR 0 3
4496: PUSH
4497: DOUBLE
4498: LD_INT 1
4500: DEC
4501: ST_TO_ADDR
4502: LD_INT 2
4504: PUSH
4505: FOR_TO
4506: IFFALSE 4549
// begin SetTag ( others [ j ] , 107 ) ;
4508: LD_VAR 0 4
4512: PUSH
4513: LD_VAR 0 3
4517: ARRAY
4518: PPUSH
4519: LD_INT 107
4521: PPUSH
4522: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4526: LD_VAR 0 4
4530: PUSH
4531: LD_VAR 0 3
4535: ARRAY
4536: PPUSH
4537: LD_INT 4
4539: PPUSH
4540: LD_INT 0
4542: PPUSH
4543: CALL_OW 49
// end ;
4547: GO 4505
4549: POP
4550: POP
// end else
4551: GO 4614
// begin for j := 1 to others do
4553: LD_ADDR_VAR 0 3
4557: PUSH
4558: DOUBLE
4559: LD_INT 1
4561: DEC
4562: ST_TO_ADDR
4563: LD_VAR 0 4
4567: PUSH
4568: FOR_TO
4569: IFFALSE 4612
// begin SetTag ( others [ i ] , 107 ) ;
4571: LD_VAR 0 4
4575: PUSH
4576: LD_VAR 0 2
4580: ARRAY
4581: PPUSH
4582: LD_INT 107
4584: PPUSH
4585: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4589: LD_VAR 0 4
4593: PUSH
4594: LD_VAR 0 3
4598: ARRAY
4599: PPUSH
4600: LD_INT 4
4602: PPUSH
4603: LD_INT 0
4605: PPUSH
4606: CALL_OW 49
// end ;
4610: GO 4568
4612: POP
4613: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4614: LD_ADDR_VAR 0 4
4618: PUSH
4619: LD_STRING 06_other_apemans
4621: PPUSH
4622: CALL_OW 31
4626: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4627: LD_VAR 0 4
4631: PUSH
4632: LD_INT 3
4634: PUSH
4635: LD_INT 2
4637: PUSH
4638: LD_INT 2
4640: PUSH
4641: LD_INT 1
4643: PUSH
4644: EMPTY
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: PUSH
4650: LD_OWVAR 67
4654: ARRAY
4655: GREATEREQUAL
4656: IFFALSE 4689
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4658: LD_ADDR_VAR 0 3
4662: PUSH
4663: LD_INT 3
4665: PUSH
4666: LD_INT 2
4668: PUSH
4669: LD_INT 2
4671: PUSH
4672: LD_INT 1
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: PUSH
4681: LD_OWVAR 67
4685: ARRAY
4686: ST_TO_ADDR
4687: GO 4699
// j := others ;
4689: LD_ADDR_VAR 0 3
4693: PUSH
4694: LD_VAR 0 4
4698: ST_TO_ADDR
// for i := 1 to j do
4699: LD_ADDR_VAR 0 2
4703: PUSH
4704: DOUBLE
4705: LD_INT 1
4707: DEC
4708: ST_TO_ADDR
4709: LD_VAR 0 3
4713: PUSH
4714: FOR_TO
4715: IFFALSE 4740
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4717: LD_VAR 0 4
4721: PUSH
4722: LD_VAR 0 2
4726: ARRAY
4727: PPUSH
4728: LD_INT 4
4730: PPUSH
4731: LD_INT 0
4733: PPUSH
4734: CALL_OW 49
4738: GO 4714
4740: POP
4741: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4742: LD_INT 4
4744: PPUSH
4745: LD_INT 22
4747: PUSH
4748: LD_INT 1
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: LD_INT 21
4757: PUSH
4758: LD_INT 1
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: PPUSH
4769: CALL_OW 70
4773: PPUSH
4774: LD_INT 53
4776: PPUSH
4777: LD_INT 19
4779: PPUSH
4780: CALL_OW 111
// end ;
4784: LD_VAR 0 1
4788: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4789: LD_INT 0
4791: PPUSH
4792: PPUSH
4793: PPUSH
4794: PPUSH
4795: PPUSH
4796: PPUSH
4797: PPUSH
4798: PPUSH
4799: PPUSH
4800: PPUSH
4801: PPUSH
4802: PPUSH
4803: PPUSH
4804: PPUSH
4805: PPUSH
// prefix := 07c_ ;
4806: LD_ADDR_VAR 0 11
4810: PUSH
4811: LD_STRING 07c_
4813: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4814: LD_ADDR_VAR 0 9
4818: PUSH
4819: LD_STRING 07_vehicles
4821: PPUSH
4822: EMPTY
4823: PPUSH
4824: CALL_OW 30
4828: ST_TO_ADDR
// if not vehicles and debug then
4829: LD_VAR 0 9
4833: NOT
4834: PUSH
4835: LD_EXP 1
4839: AND
4840: IFFALSE 4865
// vehicles := [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ;
4842: LD_ADDR_VAR 0 9
4846: PUSH
4847: LD_INT 2
4849: PUSH
4850: LD_INT 1
4852: PUSH
4853: LD_INT 1
4855: PUSH
4856: LD_INT 4
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: ST_TO_ADDR
// if not vehicles then
4865: LD_VAR 0 9
4869: NOT
4870: IFFALSE 4927
// begin area := westGammaSupportArea ;
4872: LD_ADDR_VAR 0 12
4876: PUSH
4877: LD_INT 16
4879: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4880: LD_ADDR_VAR 0 15
4884: PUSH
4885: LD_INT 37
4887: PUSH
4888: LD_INT 70
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4895: LD_ADDR_VAR 0 14
4899: PUSH
4900: LD_INT 43
4902: PUSH
4903: LD_INT 67
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: ST_TO_ADDR
// dir := 1 ;
4910: LD_ADDR_VAR 0 13
4914: PUSH
4915: LD_INT 1
4917: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4918: LD_INT 4200
4920: PPUSH
4921: CALL_OW 67
// end else
4925: GO 4973
// begin area := southGammaSupportArea ;
4927: LD_ADDR_VAR 0 12
4931: PUSH
4932: LD_INT 5
4934: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4935: LD_ADDR_VAR 0 15
4939: PUSH
4940: LD_INT 87
4942: PUSH
4943: LD_INT 147
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4950: LD_ADDR_VAR 0 14
4954: PUSH
4955: LD_INT 74
4957: PUSH
4958: LD_INT 129
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: ST_TO_ADDR
// dir := 0 ;
4965: LD_ADDR_VAR 0 13
4969: PUSH
4970: LD_INT 0
4972: ST_TO_ADDR
// end ; squad := [ ] ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: EMPTY
4979: ST_TO_ADDR
// tmp := [ ] ;
4980: LD_ADDR_VAR 0 7
4984: PUSH
4985: EMPTY
4986: ST_TO_ADDR
// tmpVehs := [ ] ;
4987: LD_ADDR_VAR 0 8
4991: PUSH
4992: EMPTY
4993: ST_TO_ADDR
// uc_side := 1 ;
4994: LD_ADDR_OWVAR 20
4998: PUSH
4999: LD_INT 1
5001: ST_TO_ADDR
// uc_nation := 1 ;
5002: LD_ADDR_OWVAR 21
5006: PUSH
5007: LD_INT 1
5009: ST_TO_ADDR
// if vehicles then
5010: LD_VAR 0 9
5014: IFFALSE 5170
// begin k := 1 ;
5016: LD_ADDR_VAR 0 3
5020: PUSH
5021: LD_INT 1
5023: ST_TO_ADDR
// for i := 1 to vehicles div 4 do
5024: LD_ADDR_VAR 0 2
5028: PUSH
5029: DOUBLE
5030: LD_INT 1
5032: DEC
5033: ST_TO_ADDR
5034: LD_VAR 0 9
5038: PUSH
5039: LD_INT 4
5041: DIV
5042: PUSH
5043: FOR_TO
5044: IFFALSE 5168
// begin vc_chassis := vehicles [ k ] ;
5046: LD_ADDR_OWVAR 37
5050: PUSH
5051: LD_VAR 0 9
5055: PUSH
5056: LD_VAR 0 3
5060: ARRAY
5061: ST_TO_ADDR
// vc_engine := vehicles [ k + 1 ] ;
5062: LD_ADDR_OWVAR 39
5066: PUSH
5067: LD_VAR 0 9
5071: PUSH
5072: LD_VAR 0 3
5076: PUSH
5077: LD_INT 1
5079: PLUS
5080: ARRAY
5081: ST_TO_ADDR
// vc_control := vehicles [ k + 2 ] ;
5082: LD_ADDR_OWVAR 38
5086: PUSH
5087: LD_VAR 0 9
5091: PUSH
5092: LD_VAR 0 3
5096: PUSH
5097: LD_INT 2
5099: PLUS
5100: ARRAY
5101: ST_TO_ADDR
// vc_weapon := vehicles [ k + 3 ] ;
5102: LD_ADDR_OWVAR 40
5106: PUSH
5107: LD_VAR 0 9
5111: PUSH
5112: LD_VAR 0 3
5116: PUSH
5117: LD_INT 3
5119: PLUS
5120: ARRAY
5121: ST_TO_ADDR
// k := k + 4 ;
5122: LD_ADDR_VAR 0 3
5126: PUSH
5127: LD_VAR 0 3
5131: PUSH
5132: LD_INT 4
5134: PLUS
5135: ST_TO_ADDR
// veh := CreateVehicle ;
5136: LD_ADDR_VAR 0 10
5140: PUSH
5141: CALL_OW 45
5145: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5146: LD_ADDR_VAR 0 8
5150: PUSH
5151: LD_VAR 0 8
5155: PPUSH
5156: LD_VAR 0 10
5160: PPUSH
5161: CALL 75909 0 2
5165: ST_TO_ADDR
// end ;
5166: GO 5043
5168: POP
5169: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5170: LD_ADDR_EXP 10
5174: PUSH
5175: LD_STRING JMM
5177: PPUSH
5178: LD_EXP 1
5182: NOT
5183: PPUSH
5184: LD_VAR 0 11
5188: PPUSH
5189: CALL 38508 0 3
5193: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5194: LD_EXP 9
5198: PUSH
5199: LD_INT 1
5201: PUSH
5202: LD_INT 3
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: IN
5209: PUSH
5210: LD_EXP 11
5214: NOT
5215: AND
5216: IFFALSE 5277
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5218: LD_ADDR_EXP 11
5222: PUSH
5223: LD_STRING Brown
5225: PPUSH
5226: LD_EXP 1
5230: NOT
5231: PPUSH
5232: LD_VAR 0 11
5236: PPUSH
5237: CALL 38508 0 3
5241: ST_TO_ADDR
// if Brown then
5242: LD_EXP 11
5246: IFFALSE 5277
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5248: LD_ADDR_VAR 0 7
5252: PUSH
5253: LD_VAR 0 7
5257: PPUSH
5258: LD_VAR 0 7
5262: PUSH
5263: LD_INT 1
5265: PLUS
5266: PPUSH
5267: LD_EXP 11
5271: PPUSH
5272: CALL_OW 1
5276: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5277: LD_EXP 9
5281: PUSH
5282: LD_INT 2
5284: PUSH
5285: LD_INT 3
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: IN
5292: PUSH
5293: LD_EXP 12
5297: NOT
5298: AND
5299: IFFALSE 5360
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5301: LD_ADDR_EXP 12
5305: PUSH
5306: LD_STRING Donaldson
5308: PPUSH
5309: LD_EXP 1
5313: NOT
5314: PPUSH
5315: LD_VAR 0 11
5319: PPUSH
5320: CALL 38508 0 3
5324: ST_TO_ADDR
// if Donaldson then
5325: LD_EXP 12
5329: IFFALSE 5360
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5331: LD_ADDR_VAR 0 7
5335: PUSH
5336: LD_VAR 0 7
5340: PPUSH
5341: LD_VAR 0 7
5345: PUSH
5346: LD_INT 1
5348: PLUS
5349: PPUSH
5350: LD_EXP 12
5354: PPUSH
5355: CALL_OW 1
5359: ST_TO_ADDR
// end ; if not Bobby then
5360: LD_EXP 13
5364: NOT
5365: IFFALSE 5423
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5367: LD_ADDR_EXP 13
5371: PUSH
5372: LD_STRING Bobby
5374: PPUSH
5375: LD_INT 1
5377: PPUSH
5378: LD_VAR 0 11
5382: PPUSH
5383: CALL 38508 0 3
5387: ST_TO_ADDR
// if Bobby then
5388: LD_EXP 13
5392: IFFALSE 5423
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5394: LD_ADDR_VAR 0 7
5398: PUSH
5399: LD_VAR 0 7
5403: PPUSH
5404: LD_VAR 0 7
5408: PUSH
5409: LD_INT 1
5411: PLUS
5412: PPUSH
5413: LD_EXP 13
5417: PPUSH
5418: CALL_OW 1
5422: ST_TO_ADDR
// end ; if not Cyrus then
5423: LD_EXP 14
5427: NOT
5428: IFFALSE 5486
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5430: LD_ADDR_EXP 14
5434: PUSH
5435: LD_STRING Cyrus
5437: PPUSH
5438: LD_INT 1
5440: PPUSH
5441: LD_VAR 0 11
5445: PPUSH
5446: CALL 38508 0 3
5450: ST_TO_ADDR
// if Cyrus then
5451: LD_EXP 14
5455: IFFALSE 5486
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5457: LD_ADDR_VAR 0 7
5461: PUSH
5462: LD_VAR 0 7
5466: PPUSH
5467: LD_VAR 0 7
5471: PUSH
5472: LD_INT 1
5474: PLUS
5475: PPUSH
5476: LD_EXP 14
5480: PPUSH
5481: CALL_OW 1
5485: ST_TO_ADDR
// end ; if not Lisa then
5486: LD_EXP 15
5490: NOT
5491: IFFALSE 5552
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5493: LD_ADDR_EXP 15
5497: PUSH
5498: LD_STRING Lisa
5500: PPUSH
5501: LD_EXP 1
5505: NOT
5506: PPUSH
5507: LD_VAR 0 11
5511: PPUSH
5512: CALL 38508 0 3
5516: ST_TO_ADDR
// if Lisa then
5517: LD_EXP 15
5521: IFFALSE 5552
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5523: LD_ADDR_VAR 0 7
5527: PUSH
5528: LD_VAR 0 7
5532: PPUSH
5533: LD_VAR 0 7
5537: PUSH
5538: LD_INT 1
5540: PLUS
5541: PPUSH
5542: LD_EXP 15
5546: PPUSH
5547: CALL_OW 1
5551: ST_TO_ADDR
// end ; if not Frank then
5552: LD_EXP 16
5556: NOT
5557: IFFALSE 5618
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5559: LD_ADDR_EXP 16
5563: PUSH
5564: LD_STRING Frank
5566: PPUSH
5567: LD_EXP 1
5571: NOT
5572: PPUSH
5573: LD_VAR 0 11
5577: PPUSH
5578: CALL 38508 0 3
5582: ST_TO_ADDR
// if Frank then
5583: LD_EXP 16
5587: IFFALSE 5618
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5589: LD_ADDR_VAR 0 7
5593: PUSH
5594: LD_VAR 0 7
5598: PPUSH
5599: LD_VAR 0 7
5603: PUSH
5604: LD_INT 1
5606: PLUS
5607: PPUSH
5608: LD_EXP 16
5612: PPUSH
5613: CALL_OW 1
5617: ST_TO_ADDR
// end ; if not Kikuchi then
5618: LD_EXP 18
5622: NOT
5623: IFFALSE 5681
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5625: LD_ADDR_EXP 18
5629: PUSH
5630: LD_STRING Kikuchi
5632: PPUSH
5633: LD_INT 1
5635: PPUSH
5636: LD_VAR 0 11
5640: PPUSH
5641: CALL 38508 0 3
5645: ST_TO_ADDR
// if Kikuchi then
5646: LD_EXP 18
5650: IFFALSE 5681
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5652: LD_ADDR_VAR 0 7
5656: PUSH
5657: LD_VAR 0 7
5661: PPUSH
5662: LD_VAR 0 7
5666: PUSH
5667: LD_INT 1
5669: PLUS
5670: PPUSH
5671: LD_EXP 18
5675: PPUSH
5676: CALL_OW 1
5680: ST_TO_ADDR
// end ; if not Gladstone then
5681: LD_EXP 17
5685: NOT
5686: IFFALSE 5747
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5688: LD_ADDR_EXP 17
5692: PUSH
5693: LD_STRING Gladstone
5695: PPUSH
5696: LD_EXP 1
5700: NOT
5701: PPUSH
5702: LD_VAR 0 11
5706: PPUSH
5707: CALL 38508 0 3
5711: ST_TO_ADDR
// if Gladstone then
5712: LD_EXP 17
5716: IFFALSE 5747
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5718: LD_ADDR_VAR 0 7
5722: PUSH
5723: LD_VAR 0 7
5727: PPUSH
5728: LD_VAR 0 7
5732: PUSH
5733: LD_INT 1
5735: PLUS
5736: PPUSH
5737: LD_EXP 17
5741: PPUSH
5742: CALL_OW 1
5746: ST_TO_ADDR
// end ; if not Khatam then
5747: LD_EXP 19
5751: NOT
5752: IFFALSE 5810
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5754: LD_ADDR_EXP 19
5758: PUSH
5759: LD_STRING Khatam
5761: PPUSH
5762: LD_INT 1
5764: PPUSH
5765: LD_VAR 0 11
5769: PPUSH
5770: CALL 38508 0 3
5774: ST_TO_ADDR
// if Khatam then
5775: LD_EXP 19
5779: IFFALSE 5810
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5781: LD_ADDR_VAR 0 7
5785: PUSH
5786: LD_VAR 0 7
5790: PPUSH
5791: LD_VAR 0 7
5795: PUSH
5796: LD_INT 1
5798: PLUS
5799: PPUSH
5800: LD_EXP 19
5804: PPUSH
5805: CALL_OW 1
5809: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5810: LD_ADDR_VAR 0 5
5814: PUSH
5815: LD_STRING 07c_others
5817: PPUSH
5818: CALL_OW 31
5822: ST_TO_ADDR
// squad := others ;
5823: LD_ADDR_VAR 0 6
5827: PUSH
5828: LD_VAR 0 5
5832: ST_TO_ADDR
// if others then
5833: LD_VAR 0 5
5837: IFFALSE 5937
// for i in others do
5839: LD_ADDR_VAR 0 2
5843: PUSH
5844: LD_VAR 0 5
5848: PUSH
5849: FOR_IN
5850: IFFALSE 5935
// begin SetTag ( i , 108 ) ;
5852: LD_VAR 0 2
5856: PPUSH
5857: LD_INT 108
5859: PPUSH
5860: CALL_OW 109
// if GetClass ( i ) = class_mechanic then
5864: LD_VAR 0 2
5868: PPUSH
5869: CALL_OW 257
5873: PUSH
5874: LD_INT 3
5876: EQUAL
5877: IFFALSE 5904
// tmp := Insert ( tmp , 1 , i ) else
5879: LD_ADDR_VAR 0 7
5883: PUSH
5884: LD_VAR 0 7
5888: PPUSH
5889: LD_INT 1
5891: PPUSH
5892: LD_VAR 0 2
5896: PPUSH
5897: CALL_OW 2
5901: ST_TO_ADDR
5902: GO 5933
// tmp := Replace ( tmp , tmp + 1 , i ) ;
5904: LD_ADDR_VAR 0 7
5908: PUSH
5909: LD_VAR 0 7
5913: PPUSH
5914: LD_VAR 0 7
5918: PUSH
5919: LD_INT 1
5921: PLUS
5922: PPUSH
5923: LD_VAR 0 2
5927: PPUSH
5928: CALL_OW 1
5932: ST_TO_ADDR
// end ;
5933: GO 5849
5935: POP
5936: POP
// if tmp then
5937: LD_VAR 0 7
5941: IFFALSE 6141
// begin for i in tmp do
5943: LD_ADDR_VAR 0 2
5947: PUSH
5948: LD_VAR 0 7
5952: PUSH
5953: FOR_IN
5954: IFFALSE 6139
// begin SetDir ( i , dir ) ;
5956: LD_VAR 0 2
5960: PPUSH
5961: LD_VAR 0 13
5965: PPUSH
5966: CALL_OW 233
// if tmpVehs then
5970: LD_VAR 0 8
5974: IFFALSE 6064
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5976: LD_VAR 0 8
5980: PUSH
5981: LD_INT 1
5983: ARRAY
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
5992: LD_VAR 0 8
5996: PUSH
5997: LD_INT 1
5999: ARRAY
6000: PPUSH
6001: LD_VAR 0 15
6005: PUSH
6006: LD_INT 1
6008: ARRAY
6009: PPUSH
6010: LD_VAR 0 15
6014: PUSH
6015: LD_INT 2
6017: ARRAY
6018: PPUSH
6019: LD_INT 0
6021: PPUSH
6022: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6026: LD_VAR 0 2
6030: PPUSH
6031: LD_VAR 0 8
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6044: LD_ADDR_VAR 0 8
6048: PUSH
6049: LD_VAR 0 8
6053: PPUSH
6054: LD_INT 1
6056: PPUSH
6057: CALL_OW 3
6061: ST_TO_ADDR
// end else
6062: GO 6081
// PlaceUnitArea ( i , area , false ) ;
6064: LD_VAR 0 2
6068: PPUSH
6069: LD_VAR 0 12
6073: PPUSH
6074: LD_INT 0
6076: PPUSH
6077: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6081: LD_VAR 0 2
6085: PPUSH
6086: LD_VAR 0 14
6090: PUSH
6091: LD_INT 1
6093: ARRAY
6094: PPUSH
6095: LD_VAR 0 14
6099: PUSH
6100: LD_INT 2
6102: ARRAY
6103: PPUSH
6104: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6108: LD_INT 35
6110: PPUSH
6111: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6115: LD_VAR 0 12
6119: PPUSH
6120: LD_INT 22
6122: PUSH
6123: LD_INT 1
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PPUSH
6130: CALL_OW 70
6134: NOT
6135: IFFALSE 6108
// end ;
6137: GO 5953
6139: POP
6140: POP
// end ; PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6141: LD_EXP 10
6145: PPUSH
6146: LD_VAR 0 15
6150: PUSH
6151: LD_INT 1
6153: ARRAY
6154: PPUSH
6155: LD_VAR 0 15
6159: PUSH
6160: LD_INT 2
6162: ARRAY
6163: PPUSH
6164: LD_INT 0
6166: PPUSH
6167: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6171: LD_EXP 10
6175: PPUSH
6176: LD_VAR 0 14
6180: PUSH
6181: LD_INT 1
6183: ARRAY
6184: PPUSH
6185: LD_VAR 0 14
6189: PUSH
6190: LD_INT 2
6192: ARRAY
6193: PPUSH
6194: CALL_OW 111
// jmmArrival := true ;
6198: LD_ADDR_EXP 7
6202: PUSH
6203: LD_INT 1
6205: ST_TO_ADDR
// end ;
6206: LD_VAR 0 1
6210: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6211: LD_INT 0
6213: PPUSH
6214: PPUSH
6215: PPUSH
6216: PPUSH
6217: PPUSH
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6218: LD_ADDR_VAR 0 5
6222: PUSH
6223: LD_INT 6
6225: PPUSH
6226: LD_INT 3
6228: PUSH
6229: LD_INT 21
6231: PUSH
6232: LD_INT 3
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PPUSH
6243: CALL_OW 70
6247: ST_TO_ADDR
// if tmp then
6248: LD_VAR 0 5
6252: IFFALSE 6276
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6254: LD_VAR 0 5
6258: PPUSH
6259: LD_INT 33
6261: PPUSH
6262: LD_INT 39
6264: PPUSH
6265: CALL_OW 111
// wait ( 0 0$3 ) ;
6269: LD_INT 105
6271: PPUSH
6272: CALL_OW 67
// end ; uc_side := 4 ;
6276: LD_ADDR_OWVAR 20
6280: PUSH
6281: LD_INT 4
6283: ST_TO_ADDR
// uc_nation := 1 ;
6284: LD_ADDR_OWVAR 21
6288: PUSH
6289: LD_INT 1
6291: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6292: LD_ADDR_EXP 23
6296: PUSH
6297: LD_STRING Sikorski
6299: PPUSH
6300: LD_INT 0
6302: PPUSH
6303: LD_STRING 
6305: PPUSH
6306: CALL 38508 0 3
6310: ST_TO_ADDR
// vc_engine := engine_combustion ;
6311: LD_ADDR_OWVAR 39
6315: PUSH
6316: LD_INT 1
6318: ST_TO_ADDR
// vc_control := control_manual ;
6319: LD_ADDR_OWVAR 38
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6327: LD_ADDR_OWVAR 40
6331: PUSH
6332: LD_INT 6
6334: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6335: LD_ADDR_OWVAR 37
6339: PUSH
6340: LD_INT 4
6342: ST_TO_ADDR
// veh := CreateVehicle ;
6343: LD_ADDR_VAR 0 4
6347: PUSH
6348: CALL_OW 45
6352: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6353: LD_VAR 0 4
6357: PPUSH
6358: LD_INT 3
6360: PPUSH
6361: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6365: LD_VAR 0 4
6369: PPUSH
6370: LD_INT 4
6372: NEG
6373: PPUSH
6374: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6378: LD_VAR 0 4
6382: PPUSH
6383: LD_INT 70
6385: PPUSH
6386: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6390: LD_VAR 0 4
6394: PPUSH
6395: LD_INT 6
6397: PPUSH
6398: LD_INT 0
6400: PPUSH
6401: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6405: LD_EXP 23
6409: PPUSH
6410: LD_VAR 0 4
6414: PPUSH
6415: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6419: LD_EXP 23
6423: PPUSH
6424: LD_INT 37
6426: PPUSH
6427: LD_INT 30
6429: PPUSH
6430: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6434: LD_INT 10
6436: PPUSH
6437: CALL_OW 67
// InitHc_All ( ) ;
6441: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6445: LD_ADDR_VAR 0 2
6449: PUSH
6450: DOUBLE
6451: LD_INT 1
6453: DEC
6454: ST_TO_ADDR
6455: LD_INT 3
6457: PUSH
6458: LD_INT 2
6460: PUSH
6461: LD_INT 2
6463: PUSH
6464: LD_INT 2
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: PUSH
6473: LD_OWVAR 67
6477: ARRAY
6478: PUSH
6479: FOR_TO
6480: IFFALSE 6592
// begin uc_side := 4 ;
6482: LD_ADDR_OWVAR 20
6486: PUSH
6487: LD_INT 4
6489: ST_TO_ADDR
// uc_nation := 1 ;
6490: LD_ADDR_OWVAR 21
6494: PUSH
6495: LD_INT 1
6497: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6498: LD_INT 0
6500: PPUSH
6501: LD_INT 1
6503: PPUSH
6504: LD_INT 4
6506: PPUSH
6507: LD_INT 7
6509: PPUSH
6510: CALL_OW 12
6514: PPUSH
6515: CALL_OW 380
// un := CreateHuman ;
6519: LD_ADDR_VAR 0 3
6523: PUSH
6524: CALL_OW 44
6528: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6529: LD_VAR 0 3
6533: PPUSH
6534: LD_INT 3
6536: PPUSH
6537: CALL_OW 233
// SetTag ( un , 101 ) ;
6541: LD_VAR 0 3
6545: PPUSH
6546: LD_INT 101
6548: PPUSH
6549: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6553: LD_VAR 0 3
6557: PPUSH
6558: LD_INT 6
6560: PPUSH
6561: LD_INT 0
6563: PPUSH
6564: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6568: LD_VAR 0 3
6572: PPUSH
6573: LD_INT 25
6575: PPUSH
6576: LD_INT 27
6578: PPUSH
6579: CALL_OW 111
// wait ( 0 0$1 ) ;
6583: LD_INT 35
6585: PPUSH
6586: CALL_OW 67
// end ;
6590: GO 6479
6592: POP
6593: POP
// for i := 1 to 2 do
6594: LD_ADDR_VAR 0 2
6598: PUSH
6599: DOUBLE
6600: LD_INT 1
6602: DEC
6603: ST_TO_ADDR
6604: LD_INT 2
6606: PUSH
6607: FOR_TO
6608: IFFALSE 6720
// begin uc_side := 4 ;
6610: LD_ADDR_OWVAR 20
6614: PUSH
6615: LD_INT 4
6617: ST_TO_ADDR
// uc_nation := 1 ;
6618: LD_ADDR_OWVAR 21
6622: PUSH
6623: LD_INT 1
6625: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6626: LD_INT 0
6628: PPUSH
6629: LD_INT 4
6631: PPUSH
6632: LD_INT 3
6634: PPUSH
6635: LD_INT 5
6637: PPUSH
6638: CALL_OW 12
6642: PPUSH
6643: CALL_OW 380
// un := CreateHuman ;
6647: LD_ADDR_VAR 0 3
6651: PUSH
6652: CALL_OW 44
6656: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6657: LD_VAR 0 3
6661: PPUSH
6662: LD_INT 3
6664: PPUSH
6665: CALL_OW 233
// SetTag ( un , 101 ) ;
6669: LD_VAR 0 3
6673: PPUSH
6674: LD_INT 101
6676: PPUSH
6677: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6681: LD_VAR 0 3
6685: PPUSH
6686: LD_INT 6
6688: PPUSH
6689: LD_INT 0
6691: PPUSH
6692: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6696: LD_VAR 0 3
6700: PPUSH
6701: LD_INT 25
6703: PPUSH
6704: LD_INT 27
6706: PPUSH
6707: CALL_OW 111
// wait ( 0 0$1 ) ;
6711: LD_INT 35
6713: PPUSH
6714: CALL_OW 67
// end ;
6718: GO 6607
6720: POP
6721: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
6722: LD_ADDR_VAR 0 2
6726: PUSH
6727: DOUBLE
6728: LD_INT 1
6730: DEC
6731: ST_TO_ADDR
6732: LD_INT 5
6734: PUSH
6735: LD_INT 4
6737: PUSH
6738: LD_INT 3
6740: PUSH
6741: LD_INT 3
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: PUSH
6750: LD_OWVAR 67
6754: ARRAY
6755: PUSH
6756: FOR_TO
6757: IFFALSE 6999
// begin uc_side := 4 ;
6759: LD_ADDR_OWVAR 20
6763: PUSH
6764: LD_INT 4
6766: ST_TO_ADDR
// uc_nation := 1 ;
6767: LD_ADDR_OWVAR 21
6771: PUSH
6772: LD_INT 1
6774: ST_TO_ADDR
// vc_engine := engine_combustion ;
6775: LD_ADDR_OWVAR 39
6779: PUSH
6780: LD_INT 1
6782: ST_TO_ADDR
// vc_control := control_manual ;
6783: LD_ADDR_OWVAR 38
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
6791: LD_ADDR_OWVAR 40
6795: PUSH
6796: LD_INT 5
6798: PUSH
6799: LD_INT 7
6801: PUSH
6802: LD_INT 5
6804: PUSH
6805: LD_INT 4
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: PUSH
6814: LD_VAR 0 2
6818: PUSH
6819: LD_INT 4
6821: MOD
6822: PUSH
6823: LD_INT 1
6825: PLUS
6826: ARRAY
6827: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6828: LD_ADDR_OWVAR 37
6832: PUSH
6833: LD_INT 3
6835: PUSH
6836: LD_INT 3
6838: PUSH
6839: LD_INT 4
6841: PUSH
6842: LD_INT 4
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: PUSH
6851: LD_VAR 0 2
6855: PUSH
6856: LD_INT 4
6858: MOD
6859: PUSH
6860: LD_INT 1
6862: PLUS
6863: ARRAY
6864: ST_TO_ADDR
// veh := CreateVehicle ;
6865: LD_ADDR_VAR 0 4
6869: PUSH
6870: CALL_OW 45
6874: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6875: LD_VAR 0 4
6879: PPUSH
6880: LD_INT 3
6882: PPUSH
6883: CALL_OW 233
// SetTag ( veh , 0 ) ;
6887: LD_VAR 0 4
6891: PPUSH
6892: LD_INT 0
6894: PPUSH
6895: CALL_OW 109
// SetFuel ( veh , 70 ) ;
6899: LD_VAR 0 4
6903: PPUSH
6904: LD_INT 70
6906: PPUSH
6907: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6911: LD_VAR 0 4
6915: PPUSH
6916: LD_INT 6
6918: PPUSH
6919: LD_INT 0
6921: PPUSH
6922: CALL_OW 49
// InitHc ;
6926: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
6930: LD_INT 0
6932: PPUSH
6933: LD_INT 3
6935: PPUSH
6936: LD_INT 4
6938: PPUSH
6939: LD_INT 7
6941: PPUSH
6942: CALL_OW 12
6946: PPUSH
6947: CALL_OW 380
// un := CreateHuman ;
6951: LD_ADDR_VAR 0 3
6955: PUSH
6956: CALL_OW 44
6960: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6961: LD_VAR 0 3
6965: PPUSH
6966: LD_VAR 0 4
6970: PPUSH
6971: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
6975: LD_VAR 0 3
6979: PPUSH
6980: LD_INT 30
6982: PPUSH
6983: LD_INT 22
6985: PPUSH
6986: CALL_OW 111
// wait ( 0 0$3 ) ;
6990: LD_INT 105
6992: PPUSH
6993: CALL_OW 67
// end ;
6997: GO 6756
6999: POP
7000: POP
// wait ( 0 0$10 ) ;
7001: LD_INT 350
7003: PPUSH
7004: CALL_OW 67
// end ;
7008: LD_VAR 0 1
7012: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7013: LD_INT 0
7015: PPUSH
7016: PPUSH
7017: PPUSH
7018: PPUSH
// gammaBase := [ ] ;
7019: LD_ADDR_VAR 0 4
7023: PUSH
7024: EMPTY
7025: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7026: LD_ADDR_VAR 0 5
7030: PUSH
7031: LD_VAR 0 1
7035: PPUSH
7036: LD_INT 22
7038: PUSH
7039: LD_INT 1
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 21
7048: PUSH
7049: LD_INT 3
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 50
7058: PUSH
7059: EMPTY
7060: LIST
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: LIST
7066: PPUSH
7067: CALL_OW 70
7071: ST_TO_ADDR
// for i in buildings do
7072: LD_ADDR_VAR 0 3
7076: PUSH
7077: LD_VAR 0 5
7081: PUSH
7082: FOR_IN
7083: IFFALSE 7520
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7085: LD_VAR 0 3
7089: PPUSH
7090: CALL_OW 266
7094: PUSH
7095: LD_INT 6
7097: PUSH
7098: LD_INT 7
7100: PUSH
7101: LD_INT 8
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: IN
7109: IFFALSE 7223
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7111: LD_ADDR_VAR 0 4
7115: PUSH
7116: LD_VAR 0 4
7120: PUSH
7121: LD_VAR 0 3
7125: PPUSH
7126: CALL_OW 266
7130: PUSH
7131: LD_VAR 0 3
7135: PPUSH
7136: CALL_OW 250
7140: PUSH
7141: LD_VAR 0 3
7145: PPUSH
7146: CALL_OW 251
7150: PUSH
7151: LD_VAR 0 3
7155: PPUSH
7156: CALL_OW 254
7160: PUSH
7161: LD_VAR 0 3
7165: PPUSH
7166: CALL_OW 267
7170: PUSH
7171: LD_VAR 0 3
7175: PPUSH
7176: CALL_OW 248
7180: PUSH
7181: LD_VAR 0 3
7185: PPUSH
7186: LD_INT 1
7188: PPUSH
7189: CALL_OW 268
7193: PUSH
7194: LD_VAR 0 3
7198: PPUSH
7199: LD_INT 2
7201: PPUSH
7202: CALL_OW 268
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: ADD
7220: ST_TO_ADDR
7221: GO 7518
// if GetBType ( i ) = b_bunker then
7223: LD_VAR 0 3
7227: PPUSH
7228: CALL_OW 266
7232: PUSH
7233: LD_INT 32
7235: EQUAL
7236: IFFALSE 7333
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7238: LD_ADDR_VAR 0 4
7242: PUSH
7243: LD_VAR 0 4
7247: PUSH
7248: LD_VAR 0 3
7252: PPUSH
7253: CALL_OW 266
7257: PUSH
7258: LD_VAR 0 3
7262: PPUSH
7263: CALL_OW 250
7267: PUSH
7268: LD_VAR 0 3
7272: PPUSH
7273: CALL_OW 251
7277: PUSH
7278: LD_VAR 0 3
7282: PPUSH
7283: CALL_OW 254
7287: PUSH
7288: LD_VAR 0 3
7292: PPUSH
7293: CALL_OW 267
7297: PUSH
7298: LD_VAR 0 3
7302: PPUSH
7303: CALL_OW 248
7307: PUSH
7308: LD_VAR 0 3
7312: PPUSH
7313: CALL_OW 269
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: PUSH
7327: EMPTY
7328: LIST
7329: ADD
7330: ST_TO_ADDR
7331: GO 7518
// if GetBType ( i ) = b_factory then
7333: LD_VAR 0 3
7337: PPUSH
7338: CALL_OW 266
7342: PUSH
7343: LD_INT 3
7345: EQUAL
7346: IFFALSE 7436
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7348: LD_ADDR_VAR 0 4
7352: PUSH
7353: LD_VAR 0 4
7357: PPUSH
7358: LD_INT 1
7360: PPUSH
7361: LD_VAR 0 3
7365: PPUSH
7366: CALL_OW 266
7370: PUSH
7371: LD_VAR 0 3
7375: PPUSH
7376: CALL_OW 250
7380: PUSH
7381: LD_VAR 0 3
7385: PPUSH
7386: CALL_OW 251
7390: PUSH
7391: LD_VAR 0 3
7395: PPUSH
7396: CALL_OW 254
7400: PUSH
7401: LD_VAR 0 3
7405: PPUSH
7406: CALL_OW 267
7410: PUSH
7411: LD_VAR 0 3
7415: PPUSH
7416: CALL_OW 248
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: PPUSH
7429: CALL_OW 2
7433: ST_TO_ADDR
7434: GO 7518
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7436: LD_ADDR_VAR 0 4
7440: PUSH
7441: LD_VAR 0 4
7445: PUSH
7446: LD_VAR 0 3
7450: PPUSH
7451: CALL_OW 266
7455: PUSH
7456: LD_VAR 0 3
7460: PPUSH
7461: CALL_OW 250
7465: PUSH
7466: LD_VAR 0 3
7470: PPUSH
7471: CALL_OW 251
7475: PUSH
7476: LD_VAR 0 3
7480: PPUSH
7481: CALL_OW 254
7485: PUSH
7486: LD_VAR 0 3
7490: PPUSH
7491: CALL_OW 267
7495: PUSH
7496: LD_VAR 0 3
7500: PPUSH
7501: CALL_OW 248
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: PUSH
7514: EMPTY
7515: LIST
7516: ADD
7517: ST_TO_ADDR
// end ;
7518: GO 7082
7520: POP
7521: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7522: LD_VAR 0 4
7526: PPUSH
7527: LD_STRING 08_GammaBase
7529: PPUSH
7530: CALL_OW 39
// end ;
7534: LD_VAR 0 2
7538: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7539: LD_INT 0
7541: PPUSH
7542: PPUSH
7543: PPUSH
7544: PPUSH
7545: PPUSH
7546: PPUSH
7547: PPUSH
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7548: LD_ADDR_VAR 0 3
7552: PUSH
7553: LD_INT 22
7555: PUSH
7556: LD_INT 4
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PPUSH
7563: CALL_OW 69
7567: ST_TO_ADDR
// ComAgressiveMove ( tmp , 55 , 62 ) ;
7568: LD_VAR 0 3
7572: PPUSH
7573: LD_INT 55
7575: PPUSH
7576: LD_INT 62
7578: PPUSH
7579: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
7583: LD_VAR 0 3
7587: PPUSH
7588: LD_INT 175
7590: PPUSH
7591: CALL_OW 202
// AddComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 58 , 96 ) ;
7595: LD_VAR 0 3
7599: PPUSH
7600: LD_INT 120
7602: PUSH
7603: LD_INT 101
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PPUSH
7610: CALL_OW 72
7614: PPUSH
7615: LD_INT 58
7617: PPUSH
7618: LD_INT 96
7620: PPUSH
7621: CALL_OW 174
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
7625: LD_VAR 0 3
7629: PPUSH
7630: LD_INT 120
7632: PUSH
7633: LD_INT 101
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PPUSH
7640: CALL_OW 72
7644: PPUSH
7645: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 52 , 93 ) ;
7649: LD_VAR 0 3
7653: PPUSH
7654: LD_INT 120
7656: PUSH
7657: LD_INT 101
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: LD_INT 25
7666: PUSH
7667: LD_INT 4
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PPUSH
7678: CALL_OW 72
7682: PPUSH
7683: LD_INT 52
7685: PPUSH
7686: LD_INT 93
7688: PPUSH
7689: CALL_OW 174
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
7693: LD_VAR 0 3
7697: PPUSH
7698: LD_INT 120
7700: PUSH
7701: LD_INT 101
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 25
7710: PUSH
7711: LD_INT 4
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: PPUSH
7722: CALL_OW 72
7726: PPUSH
7727: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
7731: LD_ADDR_VAR 0 7
7735: PUSH
7736: LD_VAR 0 3
7740: PPUSH
7741: LD_INT 21
7743: PUSH
7744: LD_INT 2
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 72
7755: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
7756: LD_ADDR_VAR 0 4
7760: PUSH
7761: LD_INT 81
7763: PUSH
7764: LD_INT 1
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PPUSH
7771: CALL_OW 69
7775: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
7776: LD_ADDR_VAR 0 5
7780: PUSH
7781: LD_INT 57
7783: PUSH
7784: LD_INT 66
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 62
7793: PUSH
7794: LD_INT 58
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7805: LD_INT 35
7807: PPUSH
7808: CALL_OW 67
// for i in filter do
7812: LD_ADDR_VAR 0 2
7816: PUSH
7817: LD_VAR 0 7
7821: PUSH
7822: FOR_IN
7823: IFFALSE 8262
// begin if IsDead ( i ) then
7825: LD_VAR 0 2
7829: PPUSH
7830: CALL_OW 301
7834: IFFALSE 7854
// begin filter := filter diff i ;
7836: LD_ADDR_VAR 0 7
7840: PUSH
7841: LD_VAR 0 7
7845: PUSH
7846: LD_VAR 0 2
7850: DIFF
7851: ST_TO_ADDR
// continue ;
7852: GO 7822
// end ; tmp := IsDrivenBy ( i ) ;
7854: LD_ADDR_VAR 0 3
7858: PUSH
7859: LD_VAR 0 2
7863: PPUSH
7864: CALL_OW 311
7868: ST_TO_ADDR
// if not tmp then
7869: LD_VAR 0 3
7873: NOT
7874: IFFALSE 7878
// continue ;
7876: GO 7822
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
7878: LD_VAR 0 2
7882: PPUSH
7883: CALL_OW 261
7887: PUSH
7888: LD_INT 30
7890: GREATER
7891: PUSH
7892: LD_VAR 0 2
7896: PPUSH
7897: CALL_OW 110
7901: PUSH
7902: LD_INT 2
7904: EQUAL
7905: AND
7906: IFFALSE 7922
// SetTag ( i , 0 ) else
7908: LD_VAR 0 2
7912: PPUSH
7913: LD_INT 0
7915: PPUSH
7916: CALL_OW 109
7920: GO 7966
// if GetTag ( i ) = 2 then
7922: LD_VAR 0 2
7926: PPUSH
7927: CALL_OW 110
7931: PUSH
7932: LD_INT 2
7934: EQUAL
7935: IFFALSE 7966
// begin ComMoveXY ( i , 52 , 50 ) ;
7937: LD_VAR 0 2
7941: PPUSH
7942: LD_INT 52
7944: PPUSH
7945: LD_INT 50
7947: PPUSH
7948: CALL_OW 111
// AddComMoveUnit ( i , amDepot ) ;
7952: LD_VAR 0 2
7956: PPUSH
7957: LD_EXP 26
7961: PPUSH
7962: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
7966: LD_VAR 0 2
7970: PPUSH
7971: CALL_OW 256
7975: PUSH
7976: LD_INT 600
7978: GREATEREQUAL
7979: PUSH
7980: LD_VAR 0 2
7984: PPUSH
7985: CALL_OW 110
7989: NOT
7990: AND
7991: IFFALSE 8017
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7993: LD_VAR 0 2
7997: PPUSH
7998: LD_VAR 0 4
8002: PPUSH
8003: LD_VAR 0 2
8007: PPUSH
8008: CALL_OW 74
8012: PPUSH
8013: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8017: LD_VAR 0 2
8021: PPUSH
8022: CALL_OW 256
8026: PUSH
8027: LD_INT 600
8029: LESS
8030: PUSH
8031: LD_VAR 0 2
8035: PPUSH
8036: CALL_OW 110
8040: NOT
8041: AND
8042: IFFALSE 8118
// begin SetTag ( i , 1 ) ;
8044: LD_VAR 0 2
8048: PPUSH
8049: LD_INT 1
8051: PPUSH
8052: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8056: LD_ADDR_VAR 0 6
8060: PUSH
8061: LD_VAR 0 2
8065: PPUSH
8066: LD_VAR 0 5
8070: PPUSH
8071: CALL 79257 0 2
8075: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8076: LD_VAR 0 2
8080: PPUSH
8081: LD_VAR 0 6
8085: PUSH
8086: LD_INT 1
8088: ARRAY
8089: PPUSH
8090: LD_VAR 0 6
8094: PUSH
8095: LD_INT 2
8097: ARRAY
8098: PPUSH
8099: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8103: LD_VAR 0 2
8107: PPUSH
8108: LD_INT 40
8110: PPUSH
8111: LD_INT 49
8113: PPUSH
8114: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8118: LD_VAR 0 2
8122: PPUSH
8123: CALL_OW 110
8127: PUSH
8128: LD_INT 1
8130: EQUAL
8131: PUSH
8132: LD_VAR 0 2
8136: PPUSH
8137: LD_INT 40
8139: PPUSH
8140: LD_INT 49
8142: PPUSH
8143: CALL_OW 297
8147: PUSH
8148: LD_INT 9
8150: LESS
8151: AND
8152: PUSH
8153: LD_VAR 0 3
8157: AND
8158: IFFALSE 8260
// begin ComExitVehicle ( tmp ) ;
8160: LD_VAR 0 3
8164: PPUSH
8165: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8169: LD_VAR 0 3
8173: PPUSH
8174: LD_VAR 0 2
8178: PPUSH
8179: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8183: LD_INT 35
8185: PPUSH
8186: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8190: LD_VAR 0 2
8194: PPUSH
8195: CALL_OW 256
8199: PUSH
8200: LD_INT 1000
8202: EQUAL
8203: IFFALSE 8183
// ComEnterUnit ( tmp , i ) ;
8205: LD_VAR 0 3
8209: PPUSH
8210: LD_VAR 0 2
8214: PPUSH
8215: CALL_OW 120
// if GetFuel ( i ) <= 40 then
8219: LD_VAR 0 2
8223: PPUSH
8224: CALL_OW 261
8228: PUSH
8229: LD_INT 40
8231: LESSEQUAL
8232: IFFALSE 8248
// SetTag ( i , 2 ) else
8234: LD_VAR 0 2
8238: PPUSH
8239: LD_INT 2
8241: PPUSH
8242: CALL_OW 109
8246: GO 8260
// SetTag ( i , 0 ) ;
8248: LD_VAR 0 2
8252: PPUSH
8253: LD_INT 0
8255: PPUSH
8256: CALL_OW 109
// end ; end ;
8260: GO 7822
8262: POP
8263: POP
// until not filter ;
8264: LD_VAR 0 7
8268: NOT
8269: IFFALSE 7805
// end ; end_of_file
8271: LD_VAR 0 1
8275: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
8276: LD_INT 0
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
// uc_side := 3 ;
8283: LD_ADDR_OWVAR 20
8287: PUSH
8288: LD_INT 3
8290: ST_TO_ADDR
// uc_nation := 3 ;
8291: LD_ADDR_OWVAR 21
8295: PUSH
8296: LD_INT 3
8298: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
8299: LD_ADDR_EXP 28
8303: PUSH
8304: LD_INT 8
8306: PUSH
8307: LD_INT 11
8309: PUSH
8310: LD_INT 14
8312: PUSH
8313: LD_INT 17
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: PUSH
8322: LD_OWVAR 67
8326: ARRAY
8327: ST_TO_ADDR
// ruMobile := [ ] ;
8328: LD_ADDR_EXP 29
8332: PUSH
8333: EMPTY
8334: ST_TO_ADDR
// ruBuildList := [ ] ;
8335: LD_ADDR_EXP 30
8339: PUSH
8340: EMPTY
8341: ST_TO_ADDR
// russianAttackers := [ ] ;
8342: LD_ADDR_EXP 31
8346: PUSH
8347: EMPTY
8348: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
8349: LD_ADDR_VAR 0 5
8353: PUSH
8354: LD_INT 43
8356: PUSH
8357: LD_INT 44
8359: PUSH
8360: LD_INT 46
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: LIST
8367: ST_TO_ADDR
// if Difficulty > 2 then
8368: LD_OWVAR 67
8372: PUSH
8373: LD_INT 2
8375: GREATER
8376: IFFALSE 8399
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
8378: LD_ADDR_VAR 0 5
8382: PUSH
8383: LD_VAR 0 5
8387: PUSH
8388: LD_INT 45
8390: PUSH
8391: LD_INT 46
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: ADD
8398: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
8399: LD_ADDR_EXP 27
8403: PUSH
8404: LD_STRING Borodin
8406: PPUSH
8407: CALL_OW 25
8411: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
8412: LD_EXP 27
8416: PPUSH
8417: LD_INT 28
8419: PPUSH
8420: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
8424: LD_INT 28
8426: PPUSH
8427: CALL_OW 274
8431: PPUSH
8432: LD_INT 1
8434: PPUSH
8435: LD_INT 3000
8437: PUSH
8438: LD_INT 4000
8440: PUSH
8441: LD_INT 5000
8443: PUSH
8444: LD_INT 6000
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: PUSH
8453: LD_OWVAR 67
8457: ARRAY
8458: PPUSH
8459: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
8463: LD_INT 28
8465: PPUSH
8466: CALL_OW 274
8470: PPUSH
8471: LD_INT 2
8473: PPUSH
8474: LD_INT 1000
8476: PPUSH
8477: CALL_OW 277
// if Difficulty > 2 then
8481: LD_OWVAR 67
8485: PUSH
8486: LD_INT 2
8488: GREATER
8489: IFFALSE 8613
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
8491: LD_ADDR_VAR 0 4
8495: PUSH
8496: LD_INT 99
8498: PUSH
8499: LD_INT 130
8501: PUSH
8502: LD_INT 2
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: PUSH
8510: LD_INT 121
8512: PUSH
8513: LD_INT 127
8515: PUSH
8516: LD_INT 4
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: LIST
8523: PUSH
8524: LD_INT 117
8526: PUSH
8527: LD_INT 121
8529: PUSH
8530: LD_INT 4
8532: PUSH
8533: EMPTY
8534: LIST
8535: LIST
8536: LIST
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: LIST
8542: ST_TO_ADDR
// for i in tmp do
8543: LD_ADDR_VAR 0 2
8547: PUSH
8548: LD_VAR 0 4
8552: PUSH
8553: FOR_IN
8554: IFFALSE 8611
// begin bc_type := b_turret ;
8556: LD_ADDR_OWVAR 42
8560: PUSH
8561: LD_INT 33
8563: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
8564: LD_ADDR_OWVAR 43
8568: PUSH
8569: LD_INT 2
8571: PUSH
8572: LD_OWVAR 67
8576: PLUS
8577: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
8578: LD_VAR 0 2
8582: PUSH
8583: LD_INT 1
8585: ARRAY
8586: PPUSH
8587: LD_VAR 0 2
8591: PUSH
8592: LD_INT 2
8594: ARRAY
8595: PPUSH
8596: LD_VAR 0 2
8600: PUSH
8601: LD_INT 3
8603: ARRAY
8604: PPUSH
8605: CALL_OW 47
// end ;
8609: GO 8553
8611: POP
8612: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
8613: LD_ADDR_VAR 0 2
8617: PUSH
8618: LD_INT 22
8620: PUSH
8621: LD_INT 3
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PUSH
8628: LD_INT 21
8630: PUSH
8631: LD_INT 3
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PPUSH
8642: CALL_OW 69
8646: PUSH
8647: FOR_IN
8648: IFFALSE 8670
// SetBLevel ( i , 2 + Difficulty ) ;
8650: LD_VAR 0 2
8654: PPUSH
8655: LD_INT 2
8657: PUSH
8658: LD_OWVAR 67
8662: PLUS
8663: PPUSH
8664: CALL_OW 241
8668: GO 8647
8670: POP
8671: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
8672: LD_ADDR_VAR 0 4
8676: PUSH
8677: LD_INT 22
8679: PUSH
8680: LD_INT 3
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 2
8689: PUSH
8690: LD_INT 30
8692: PUSH
8693: LD_INT 32
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: PUSH
8700: LD_INT 30
8702: PUSH
8703: LD_INT 33
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: LIST
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PPUSH
8719: CALL_OW 69
8723: ST_TO_ADDR
// for i in tmp do
8724: LD_ADDR_VAR 0 2
8728: PUSH
8729: LD_VAR 0 4
8733: PUSH
8734: FOR_IN
8735: IFFALSE 8767
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
8737: LD_VAR 0 2
8741: PPUSH
8742: LD_VAR 0 5
8746: PUSH
8747: LD_INT 1
8749: PPUSH
8750: LD_VAR 0 5
8754: PPUSH
8755: CALL_OW 12
8759: ARRAY
8760: PPUSH
8761: CALL_OW 431
8765: GO 8734
8767: POP
8768: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
8769: LD_ADDR_VAR 0 2
8773: PUSH
8774: LD_INT 22
8776: PUSH
8777: LD_INT 3
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: PUSH
8784: LD_INT 30
8786: PUSH
8787: LD_INT 32
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PPUSH
8798: CALL_OW 69
8802: PUSH
8803: FOR_IN
8804: IFFALSE 8853
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8806: LD_INT 0
8808: PPUSH
8809: LD_INT 5
8811: PUSH
8812: LD_INT 6
8814: PUSH
8815: LD_INT 7
8817: PUSH
8818: LD_INT 8
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: PUSH
8827: LD_OWVAR 67
8831: ARRAY
8832: PPUSH
8833: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
8837: CALL_OW 44
8841: PPUSH
8842: LD_VAR 0 2
8846: PPUSH
8847: CALL_OW 52
// end ;
8851: GO 8803
8853: POP
8854: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
8855: LD_ADDR_VAR 0 2
8859: PUSH
8860: LD_INT 22
8862: PUSH
8863: LD_INT 3
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: LD_INT 30
8872: PUSH
8873: LD_INT 5
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: PPUSH
8884: CALL_OW 69
8888: PUSH
8889: FOR_IN
8890: IFFALSE 8980
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
8892: LD_ADDR_VAR 0 3
8896: PUSH
8897: DOUBLE
8898: LD_INT 1
8900: DEC
8901: ST_TO_ADDR
8902: LD_INT 2
8904: PUSH
8905: LD_INT 2
8907: PUSH
8908: LD_INT 3
8910: PUSH
8911: LD_INT 3
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: PUSH
8920: LD_OWVAR 67
8924: ARRAY
8925: PUSH
8926: FOR_TO
8927: IFFALSE 8976
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8929: LD_INT 0
8931: PPUSH
8932: LD_INT 5
8934: PUSH
8935: LD_INT 6
8937: PUSH
8938: LD_INT 7
8940: PUSH
8941: LD_INT 8
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: PUSH
8950: LD_OWVAR 67
8954: ARRAY
8955: PPUSH
8956: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
8960: CALL_OW 44
8964: PPUSH
8965: LD_VAR 0 2
8969: PPUSH
8970: CALL_OW 52
// end ;
8974: GO 8926
8976: POP
8977: POP
// end ;
8978: GO 8889
8980: POP
8981: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
8982: LD_ADDR_VAR 0 2
8986: PUSH
8987: DOUBLE
8988: LD_INT 1
8990: DEC
8991: ST_TO_ADDR
8992: LD_INT 3
8994: PUSH
8995: LD_INT 4
8997: PUSH
8998: LD_INT 5
9000: PUSH
9001: LD_INT 5
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: PUSH
9010: LD_OWVAR 67
9014: ARRAY
9015: PUSH
9016: FOR_TO
9017: IFFALSE 9064
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9019: LD_INT 0
9021: PPUSH
9022: LD_INT 4
9024: PUSH
9025: LD_INT 5
9027: PUSH
9028: LD_INT 5
9030: PUSH
9031: LD_INT 6
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: PUSH
9040: LD_OWVAR 67
9044: ARRAY
9045: PPUSH
9046: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9050: CALL_OW 44
9054: PPUSH
9055: LD_INT 28
9057: PPUSH
9058: CALL_OW 52
// end ;
9062: GO 9016
9064: POP
9065: POP
// for i := 1 to 2 do
9066: LD_ADDR_VAR 0 2
9070: PUSH
9071: DOUBLE
9072: LD_INT 1
9074: DEC
9075: ST_TO_ADDR
9076: LD_INT 2
9078: PUSH
9079: FOR_TO
9080: IFFALSE 9114
// begin PrepareScientist ( false , 6 ) ;
9082: LD_INT 0
9084: PPUSH
9085: LD_INT 6
9087: PPUSH
9088: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9092: CALL_OW 44
9096: PPUSH
9097: LD_INT 81
9099: PPUSH
9100: LD_INT 93
9102: PPUSH
9103: CALL_OW 428
9107: PPUSH
9108: CALL_OW 52
// end ;
9112: GO 9079
9114: POP
9115: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9116: LD_INT 22
9118: PPUSH
9119: LD_INT 1
9121: PPUSH
9122: LD_INT 3
9124: PPUSH
9125: LD_INT 51
9127: PPUSH
9128: LD_INT 100
9130: PPUSH
9131: CALL 43525 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9135: CALL_OW 45
9139: PPUSH
9140: LD_INT 91
9142: PPUSH
9143: LD_INT 94
9145: PPUSH
9146: LD_INT 3
9148: PPUSH
9149: LD_INT 0
9151: PPUSH
9152: CALL_OW 50
// for i := 1 to 2 do
9156: LD_ADDR_VAR 0 2
9160: PUSH
9161: DOUBLE
9162: LD_INT 1
9164: DEC
9165: ST_TO_ADDR
9166: LD_INT 2
9168: PUSH
9169: FOR_TO
9170: IFFALSE 9214
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9172: LD_INT 22
9174: PPUSH
9175: LD_INT 1
9177: PPUSH
9178: LD_INT 3
9180: PPUSH
9181: LD_INT 52
9183: PPUSH
9184: LD_INT 100
9186: PPUSH
9187: CALL 43525 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9191: CALL_OW 45
9195: PPUSH
9196: LD_INT 91
9198: PPUSH
9199: LD_INT 94
9201: PPUSH
9202: LD_INT 4
9204: PPUSH
9205: LD_INT 0
9207: PPUSH
9208: CALL_OW 50
// end ;
9212: GO 9169
9214: POP
9215: POP
// end ;
9216: LD_VAR 0 1
9220: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
9221: LD_INT 0
9223: PPUSH
9224: PPUSH
9225: PPUSH
9226: PPUSH
9227: PPUSH
// uc_side := 3 ;
9228: LD_ADDR_OWVAR 20
9232: PUSH
9233: LD_INT 3
9235: ST_TO_ADDR
// uc_nation := 3 ;
9236: LD_ADDR_OWVAR 21
9240: PUSH
9241: LD_INT 3
9243: ST_TO_ADDR
// for i := 1 to 4 do
9244: LD_ADDR_VAR 0 2
9248: PUSH
9249: DOUBLE
9250: LD_INT 1
9252: DEC
9253: ST_TO_ADDR
9254: LD_INT 4
9256: PUSH
9257: FOR_TO
9258: IFFALSE 9385
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9260: LD_INT 22
9262: PPUSH
9263: LD_INT 1
9265: PPUSH
9266: LD_INT 1
9268: PPUSH
9269: LD_INT 42
9271: PUSH
9272: LD_INT 43
9274: PUSH
9275: LD_INT 44
9277: PUSH
9278: EMPTY
9279: LIST
9280: LIST
9281: LIST
9282: PUSH
9283: LD_INT 1
9285: PPUSH
9286: LD_INT 3
9288: PPUSH
9289: CALL_OW 12
9293: ARRAY
9294: PPUSH
9295: LD_INT 40
9297: PPUSH
9298: CALL 43525 0 5
// veh := CreateVehicle ;
9302: LD_ADDR_VAR 0 4
9306: PUSH
9307: CALL_OW 45
9311: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9312: LD_VAR 0 4
9316: PPUSH
9317: LD_INT 5
9319: PPUSH
9320: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
9324: LD_VAR 0 4
9328: PPUSH
9329: LD_INT 7
9331: PPUSH
9332: LD_INT 0
9334: PPUSH
9335: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9339: LD_INT 0
9341: PPUSH
9342: LD_INT 5
9344: PPUSH
9345: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9349: CALL_OW 44
9353: PPUSH
9354: LD_VAR 0 4
9358: PPUSH
9359: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9363: LD_ADDR_VAR 0 5
9367: PUSH
9368: LD_VAR 0 5
9372: PPUSH
9373: LD_VAR 0 4
9377: PPUSH
9378: CALL 75909 0 2
9382: ST_TO_ADDR
// end ;
9383: GO 9257
9385: POP
9386: POP
// for i := 1 to 3 do
9387: LD_ADDR_VAR 0 2
9391: PUSH
9392: DOUBLE
9393: LD_INT 1
9395: DEC
9396: ST_TO_ADDR
9397: LD_INT 3
9399: PUSH
9400: FOR_TO
9401: IFFALSE 9528
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9403: LD_INT 22
9405: PPUSH
9406: LD_INT 1
9408: PPUSH
9409: LD_INT 1
9411: PPUSH
9412: LD_INT 42
9414: PUSH
9415: LD_INT 43
9417: PUSH
9418: LD_INT 44
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: PUSH
9426: LD_INT 1
9428: PPUSH
9429: LD_INT 3
9431: PPUSH
9432: CALL_OW 12
9436: ARRAY
9437: PPUSH
9438: LD_INT 40
9440: PPUSH
9441: CALL 43525 0 5
// veh := CreateVehicle ;
9445: LD_ADDR_VAR 0 4
9449: PUSH
9450: CALL_OW 45
9454: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9455: LD_VAR 0 4
9459: PPUSH
9460: LD_INT 5
9462: PPUSH
9463: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
9467: LD_VAR 0 4
9471: PPUSH
9472: LD_INT 8
9474: PPUSH
9475: LD_INT 0
9477: PPUSH
9478: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9482: LD_INT 0
9484: PPUSH
9485: LD_INT 5
9487: PPUSH
9488: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9492: CALL_OW 44
9496: PPUSH
9497: LD_VAR 0 4
9501: PPUSH
9502: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9506: LD_ADDR_VAR 0 5
9510: PUSH
9511: LD_VAR 0 5
9515: PPUSH
9516: LD_VAR 0 4
9520: PPUSH
9521: CALL 75909 0 2
9525: ST_TO_ADDR
// end ;
9526: GO 9400
9528: POP
9529: POP
// for i := 1 to 2 do
9530: LD_ADDR_VAR 0 2
9534: PUSH
9535: DOUBLE
9536: LD_INT 1
9538: DEC
9539: ST_TO_ADDR
9540: LD_INT 2
9542: PUSH
9543: FOR_TO
9544: IFFALSE 9603
// begin PrepareSoldier ( false , 5 ) ;
9546: LD_INT 0
9548: PPUSH
9549: LD_INT 5
9551: PPUSH
9552: CALL_OW 381
// un := CreateHuman ;
9556: LD_ADDR_VAR 0 3
9560: PUSH
9561: CALL_OW 44
9565: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
9566: LD_VAR 0 3
9570: PPUSH
9571: LD_INT 8
9573: PPUSH
9574: LD_INT 0
9576: PPUSH
9577: CALL_OW 49
// tmp := Join ( tmp , un ) ;
9581: LD_ADDR_VAR 0 5
9585: PUSH
9586: LD_VAR 0 5
9590: PPUSH
9591: LD_VAR 0 3
9595: PPUSH
9596: CALL 75909 0 2
9600: ST_TO_ADDR
// end ;
9601: GO 9543
9603: POP
9604: POP
// for i in tmp do
9605: LD_ADDR_VAR 0 2
9609: PUSH
9610: LD_VAR 0 5
9614: PUSH
9615: FOR_IN
9616: IFFALSE 9635
// ComAgressiveMove ( i , 51 , 16 ) ;
9618: LD_VAR 0 2
9622: PPUSH
9623: LD_INT 51
9625: PPUSH
9626: LD_INT 16
9628: PPUSH
9629: CALL_OW 114
9633: GO 9615
9635: POP
9636: POP
// end ;
9637: LD_VAR 0 1
9641: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
9642: LD_EXP 29
9646: IFFALSE 10221
9648: GO 9650
9650: DISABLE
9651: LD_INT 0
9653: PPUSH
9654: PPUSH
9655: PPUSH
// begin enable ;
9656: ENABLE
// if not ruMobile then
9657: LD_EXP 29
9661: NOT
9662: IFFALSE 9666
// exit ;
9664: GO 10221
// for i in ruMobile do
9666: LD_ADDR_VAR 0 1
9670: PUSH
9671: LD_EXP 29
9675: PUSH
9676: FOR_IN
9677: IFFALSE 10219
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
9679: LD_VAR 0 1
9683: PPUSH
9684: CALL_OW 302
9688: NOT
9689: PUSH
9690: LD_VAR 0 1
9694: PPUSH
9695: CALL_OW 255
9699: PUSH
9700: LD_INT 3
9702: NONEQUAL
9703: OR
9704: IFFALSE 9724
// begin ruMobile := ruMobile diff i ;
9706: LD_ADDR_EXP 29
9710: PUSH
9711: LD_EXP 29
9715: PUSH
9716: LD_VAR 0 1
9720: DIFF
9721: ST_TO_ADDR
// continue ;
9722: GO 9676
// end ; if GetTag ( i ) = 300 then
9724: LD_VAR 0 1
9728: PPUSH
9729: CALL_OW 110
9733: PUSH
9734: LD_INT 300
9736: EQUAL
9737: IFFALSE 9852
// begin if GetFuel ( i ) < 50 then
9739: LD_VAR 0 1
9743: PPUSH
9744: CALL_OW 261
9748: PUSH
9749: LD_INT 50
9751: LESS
9752: IFFALSE 9811
// begin ComMoveXY ( i , 93 , 100 ) ;
9754: LD_VAR 0 1
9758: PPUSH
9759: LD_INT 93
9761: PPUSH
9762: LD_INT 100
9764: PPUSH
9765: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9769: LD_INT 35
9771: PPUSH
9772: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
9776: LD_VAR 0 1
9780: PPUSH
9781: LD_INT 93
9783: PPUSH
9784: LD_INT 100
9786: PPUSH
9787: CALL_OW 297
9791: PUSH
9792: LD_INT 4
9794: LESS
9795: IFFALSE 9769
// SetFuel ( i , 100 ) ;
9797: LD_VAR 0 1
9801: PPUSH
9802: LD_INT 100
9804: PPUSH
9805: CALL_OW 240
// end else
9809: GO 9852
// if not IsInArea ( i , ruParkingArea ) then
9811: LD_VAR 0 1
9815: PPUSH
9816: LD_INT 10
9818: PPUSH
9819: CALL_OW 308
9823: NOT
9824: IFFALSE 9840
// ComMoveToArea ( i , ruParkingArea ) else
9826: LD_VAR 0 1
9830: PPUSH
9831: LD_INT 10
9833: PPUSH
9834: CALL_OW 113
9838: GO 9852
// SetTag ( i , 301 ) ;
9840: LD_VAR 0 1
9844: PPUSH
9845: LD_INT 301
9847: PPUSH
9848: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
9852: LD_VAR 0 1
9856: PPUSH
9857: CALL_OW 110
9861: PUSH
9862: LD_INT 301
9864: EQUAL
9865: IFFALSE 9995
// begin if GetLives ( i ) < 1000 then
9867: LD_VAR 0 1
9871: PPUSH
9872: CALL_OW 256
9876: PUSH
9877: LD_INT 1000
9879: LESS
9880: IFFALSE 9972
// begin if not IsDrivenBy ( i ) then
9882: LD_VAR 0 1
9886: PPUSH
9887: CALL_OW 311
9891: NOT
9892: IFFALSE 9896
// continue ;
9894: GO 9676
// mech := IsDrivenBy ( i ) ;
9896: LD_ADDR_VAR 0 2
9900: PUSH
9901: LD_VAR 0 1
9905: PPUSH
9906: CALL_OW 311
9910: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9911: LD_VAR 0 2
9915: PPUSH
9916: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9920: LD_VAR 0 2
9924: PPUSH
9925: LD_VAR 0 1
9929: PPUSH
9930: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9934: LD_INT 35
9936: PPUSH
9937: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9941: LD_VAR 0 1
9945: PPUSH
9946: CALL_OW 256
9950: PUSH
9951: LD_INT 1000
9953: EQUAL
9954: IFFALSE 9934
// ComEnterUnit ( mech , i ) ;
9956: LD_VAR 0 2
9960: PPUSH
9961: LD_VAR 0 1
9965: PPUSH
9966: CALL_OW 120
// end else
9970: GO 9995
// if IsDrivenBy ( i ) then
9972: LD_VAR 0 1
9976: PPUSH
9977: CALL_OW 311
9981: IFFALSE 9995
// SetTag ( i , 0 ) ;
9983: LD_VAR 0 1
9987: PPUSH
9988: LD_INT 0
9990: PPUSH
9991: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
9995: LD_VAR 0 1
9999: PPUSH
10000: CALL_OW 110
10004: PUSH
10005: LD_INT 300
10007: LESS
10008: IFFALSE 10217
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10010: LD_ADDR_VAR 0 3
10014: PUSH
10015: LD_INT 11
10017: PPUSH
10018: LD_INT 81
10020: PUSH
10021: LD_INT 3
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PPUSH
10028: CALL_OW 70
10032: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10033: LD_VAR 0 1
10037: PPUSH
10038: CALL_OW 256
10042: PUSH
10043: LD_INT 650
10045: LESS
10046: IFFALSE 10071
// begin ComStop ( i ) ;
10048: LD_VAR 0 1
10052: PPUSH
10053: CALL_OW 141
// SetTag ( i , 300 ) ;
10057: LD_VAR 0 1
10061: PPUSH
10062: LD_INT 300
10064: PPUSH
10065: CALL_OW 109
// continue ;
10069: GO 9676
// end ; if enemy then
10071: LD_VAR 0 3
10075: IFFALSE 10115
// begin if not HasTask ( i ) then
10077: LD_VAR 0 1
10081: PPUSH
10082: CALL_OW 314
10086: NOT
10087: IFFALSE 10113
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10089: LD_VAR 0 1
10093: PPUSH
10094: LD_VAR 0 3
10098: PPUSH
10099: LD_VAR 0 1
10103: PPUSH
10104: CALL_OW 74
10108: PPUSH
10109: CALL_OW 115
// end else
10113: GO 10217
// if ruMobile > 2 then
10115: LD_EXP 29
10119: PUSH
10120: LD_INT 2
10122: GREATER
10123: IFFALSE 10217
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10125: LD_ADDR_VAR 0 3
10129: PUSH
10130: LD_INT 81
10132: PUSH
10133: LD_INT 3
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PPUSH
10140: CALL_OW 69
10144: ST_TO_ADDR
// if enemy then
10145: LD_VAR 0 3
10149: IFFALSE 10217
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10151: LD_VAR 0 1
10155: PPUSH
10156: LD_INT 116
10158: PUSH
10159: LD_INT 95
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: LD_INT 84
10168: PUSH
10169: LD_INT 68
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: LD_INT 58
10178: PUSH
10179: LD_INT 53
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: PUSH
10186: LD_INT 44
10188: PUSH
10189: LD_INT 35
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PUSH
10196: LD_INT 45
10198: PUSH
10199: LD_INT 23
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: PPUSH
10213: CALL 78515 0 2
// end ; end ; end ;
10217: GO 9676
10219: POP
10220: POP
// end ;
10221: PPOPN 3
10223: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
10224: LD_INT 3
10226: PUSH
10227: LD_INT 22
10229: PUSH
10230: LD_INT 1
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PUSH
10241: LD_INT 32
10243: PUSH
10244: LD_INT 1
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PPUSH
10255: CALL_OW 69
10259: IFFALSE 10343
10261: GO 10263
10263: DISABLE
10264: LD_INT 0
10266: PPUSH
// begin enable ;
10267: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
10268: LD_ADDR_VAR 0 1
10272: PUSH
10273: LD_INT 3
10275: PUSH
10276: LD_INT 22
10278: PUSH
10279: LD_INT 1
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: LD_INT 32
10292: PUSH
10293: LD_INT 1
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PPUSH
10304: CALL_OW 69
10308: PUSH
10309: FOR_IN
10310: IFFALSE 10341
// if GetFuel ( i ) < 3 then
10312: LD_VAR 0 1
10316: PPUSH
10317: CALL_OW 261
10321: PUSH
10322: LD_INT 3
10324: LESS
10325: IFFALSE 10339
// SetFuel ( i , 3 ) ;
10327: LD_VAR 0 1
10331: PPUSH
10332: LD_INT 3
10334: PPUSH
10335: CALL_OW 240
10339: GO 10309
10341: POP
10342: POP
// end ;
10343: PPOPN 1
10345: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
10346: LD_INT 29
10348: PPUSH
10349: CALL_OW 302
10353: PUSH
10354: LD_INT 29
10356: PPUSH
10357: CALL_OW 461
10361: PUSH
10362: LD_INT 2
10364: EQUAL
10365: AND
10366: IFFALSE 10599
10368: GO 10370
10370: DISABLE
10371: LD_INT 0
10373: PPUSH
10374: PPUSH
// begin enable ;
10375: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
10376: LD_ADDR_VAR 0 1
10380: PUSH
10381: LD_INT 21
10383: PUSH
10384: LD_INT 22
10386: PUSH
10387: LD_INT 23
10389: PUSH
10390: LD_INT 24
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: PUSH
10399: LD_INT 1
10401: PPUSH
10402: LD_INT 4
10404: PPUSH
10405: CALL_OW 12
10409: ARRAY
10410: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
10411: LD_ADDR_VAR 0 2
10415: PUSH
10416: LD_INT 42
10418: PUSH
10419: LD_INT 44
10421: PUSH
10422: LD_INT 43
10424: PUSH
10425: LD_INT 46
10427: PUSH
10428: LD_INT 45
10430: PUSH
10431: LD_INT 46
10433: PUSH
10434: LD_INT 45
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: PUSH
10446: LD_OWVAR 67
10450: PUSH
10451: LD_INT 0
10453: PPUSH
10454: LD_INT 3
10456: PPUSH
10457: CALL_OW 12
10461: PLUS
10462: ARRAY
10463: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
10464: LD_VAR 0 1
10468: PUSH
10469: LD_INT 21
10471: PUSH
10472: LD_INT 22
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: IN
10479: PUSH
10480: LD_VAR 0 2
10484: PUSH
10485: LD_INT 46
10487: EQUAL
10488: AND
10489: IFFALSE 10518
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10491: LD_ADDR_VAR 0 2
10495: PUSH
10496: LD_INT 44
10498: PUSH
10499: LD_INT 45
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: LD_INT 1
10508: PPUSH
10509: LD_INT 2
10511: PPUSH
10512: CALL_OW 12
10516: ARRAY
10517: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
10518: LD_OWVAR 1
10522: PUSH
10523: LD_INT 31500
10525: PUSH
10526: LD_INT 27300
10528: PUSH
10529: LD_INT 23100
10531: PUSH
10532: LD_INT 21000
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: PUSH
10541: LD_OWVAR 67
10545: ARRAY
10546: LESS
10547: IFFALSE 10576
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
10549: LD_ADDR_VAR 0 2
10553: PUSH
10554: LD_INT 44
10556: PUSH
10557: LD_INT 43
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: LD_INT 1
10566: PPUSH
10567: LD_INT 2
10569: PPUSH
10570: CALL_OW 12
10574: ARRAY
10575: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
10576: LD_INT 29
10578: PPUSH
10579: LD_VAR 0 1
10583: PPUSH
10584: LD_INT 1
10586: PPUSH
10587: LD_INT 1
10589: PPUSH
10590: LD_VAR 0 2
10594: PPUSH
10595: CALL_OW 185
// end ;
10599: PPOPN 2
10601: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
10602: LD_INT 28
10604: PPUSH
10605: CALL_OW 302
10609: IFFALSE 11448
10611: GO 10613
10613: DISABLE
10614: LD_INT 0
10616: PPUSH
10617: PPUSH
10618: PPUSH
10619: PPUSH
10620: PPUSH
10621: PPUSH
10622: PPUSH
10623: PPUSH
// begin enable ;
10624: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
10625: LD_ADDR_VAR 0 3
10629: PUSH
10630: LD_INT 12
10632: PPUSH
10633: LD_INT 3
10635: PUSH
10636: LD_INT 24
10638: PUSH
10639: LD_INT 1000
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PUSH
10650: LD_INT 21
10652: PUSH
10653: LD_INT 3
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PPUSH
10664: CALL_OW 70
10668: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10669: LD_ADDR_VAR 0 4
10673: PUSH
10674: LD_INT 22
10676: PUSH
10677: LD_INT 3
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PUSH
10684: LD_INT 25
10686: PUSH
10687: LD_INT 2
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PPUSH
10698: CALL_OW 69
10702: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
10703: LD_ADDR_VAR 0 5
10707: PUSH
10708: LD_INT 22
10710: PUSH
10711: LD_INT 3
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 34
10720: PUSH
10721: LD_INT 52
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PPUSH
10732: CALL_OW 69
10736: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
10737: LD_ADDR_VAR 0 7
10741: PUSH
10742: LD_INT 22
10744: PUSH
10745: LD_INT 3
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: LD_INT 25
10754: PUSH
10755: LD_INT 4
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PPUSH
10766: CALL_OW 69
10770: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
10771: LD_ADDR_VAR 0 8
10775: PUSH
10776: LD_INT 81
10778: PPUSH
10779: LD_INT 93
10781: PPUSH
10782: CALL_OW 428
10786: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
10787: LD_VAR 0 7
10791: PUSH
10792: LD_VAR 0 4
10796: PPUSH
10797: LD_INT 120
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PPUSH
10807: CALL_OW 72
10811: AND
10812: IFFALSE 10825
// ComExitAll ( sci ) else
10814: LD_VAR 0 7
10818: PPUSH
10819: CALL 76390 0 1
10823: GO 10898
// if sci then
10825: LD_VAR 0 7
10829: IFFALSE 10898
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
10831: LD_VAR 0 7
10835: PPUSH
10836: LD_INT 3
10838: PUSH
10839: LD_INT 54
10841: PUSH
10842: EMPTY
10843: LIST
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PPUSH
10849: CALL_OW 72
10853: PUSH
10854: LD_VAR 0 8
10858: PPUSH
10859: CALL_OW 302
10863: AND
10864: IFFALSE 10898
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
10866: LD_VAR 0 7
10870: PPUSH
10871: LD_INT 3
10873: PUSH
10874: LD_INT 54
10876: PUSH
10877: EMPTY
10878: LIST
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: PPUSH
10884: CALL_OW 72
10888: PPUSH
10889: LD_VAR 0 8
10893: PPUSH
10894: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
10898: LD_VAR 0 5
10902: PPUSH
10903: LD_INT 50
10905: PUSH
10906: EMPTY
10907: LIST
10908: PPUSH
10909: CALL_OW 72
10913: PUSH
10914: LD_VAR 0 3
10918: AND
10919: IFFALSE 10950
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
10921: LD_VAR 0 5
10925: PPUSH
10926: LD_INT 50
10928: PUSH
10929: EMPTY
10930: LIST
10931: PPUSH
10932: CALL_OW 72
10936: PPUSH
10937: LD_VAR 0 3
10941: PUSH
10942: LD_INT 1
10944: ARRAY
10945: PPUSH
10946: CALL_OW 130
// if eng then
10950: LD_VAR 0 4
10954: IFFALSE 11448
// begin for i in eng do
10956: LD_ADDR_VAR 0 1
10960: PUSH
10961: LD_VAR 0 4
10965: PUSH
10966: FOR_IN
10967: IFFALSE 11446
// begin tag := GetTag ( i ) ;
10969: LD_ADDR_VAR 0 6
10973: PUSH
10974: LD_VAR 0 1
10978: PPUSH
10979: CALL_OW 110
10983: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
10984: LD_VAR 0 3
10988: NOT
10989: PUSH
10990: LD_EXP 30
10994: NOT
10995: AND
10996: PUSH
10997: LD_VAR 0 6
11001: PUSH
11002: LD_INT 1
11004: EQUAL
11005: AND
11006: IFFALSE 11032
// begin SetTag ( i , 0 ) ;
11008: LD_VAR 0 1
11012: PPUSH
11013: LD_INT 0
11015: PPUSH
11016: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
11020: LD_VAR 0 1
11024: PPUSH
11025: LD_INT 28
11027: PPUSH
11028: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
11032: LD_VAR 0 3
11036: PUSH
11037: LD_EXP 30
11041: OR
11042: PUSH
11043: LD_VAR 0 6
11047: PUSH
11048: LD_INT 0
11050: EQUAL
11051: AND
11052: IFFALSE 11066
// SetTag ( i , 1 ) ;
11054: LD_VAR 0 1
11058: PPUSH
11059: LD_INT 1
11061: PPUSH
11062: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
11066: LD_VAR 0 1
11070: PPUSH
11071: CALL_OW 310
11075: PUSH
11076: LD_VAR 0 6
11080: PUSH
11081: LD_INT 1
11083: EQUAL
11084: AND
11085: IFFALSE 11096
// ComExit ( i ) ;
11087: LD_VAR 0 1
11091: PPUSH
11092: CALL 76307 0 1
// if GetLives ( i ) < 500 and tag = 1 then
11096: LD_VAR 0 1
11100: PPUSH
11101: CALL_OW 256
11105: PUSH
11106: LD_INT 500
11108: LESS
11109: PUSH
11110: LD_VAR 0 6
11114: PUSH
11115: LD_INT 1
11117: EQUAL
11118: AND
11119: IFFALSE 11133
// SetTag ( i , 2 ) ;
11121: LD_VAR 0 1
11125: PPUSH
11126: LD_INT 2
11128: PPUSH
11129: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
11133: LD_VAR 0 1
11137: PPUSH
11138: CALL_OW 256
11142: PUSH
11143: LD_INT 1000
11145: EQUAL
11146: PUSH
11147: LD_VAR 0 6
11151: PUSH
11152: LD_INT 2
11154: EQUAL
11155: AND
11156: IFFALSE 11170
// SetTag ( i , 1 ) ;
11158: LD_VAR 0 1
11162: PPUSH
11163: LD_INT 1
11165: PPUSH
11166: CALL_OW 109
// if tag = 2 then
11170: LD_VAR 0 6
11174: PUSH
11175: LD_INT 2
11177: EQUAL
11178: IFFALSE 11225
// begin if GetDistUnitXY ( i , 84 , 93 ) > 6 then
11180: LD_VAR 0 1
11184: PPUSH
11185: LD_INT 84
11187: PPUSH
11188: LD_INT 93
11190: PPUSH
11191: CALL_OW 297
11195: PUSH
11196: LD_INT 6
11198: GREATER
11199: IFFALSE 11225
// begin ComMoveXY ( i , 84 , 93 ) ;
11201: LD_VAR 0 1
11205: PPUSH
11206: LD_INT 84
11208: PPUSH
11209: LD_INT 93
11211: PPUSH
11212: CALL_OW 111
// AddComHold ( i ) ;
11216: LD_VAR 0 1
11220: PPUSH
11221: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
11225: LD_VAR 0 1
11229: PPUSH
11230: LD_INT 11
11232: PPUSH
11233: CALL_OW 308
11237: IFFALSE 11251
// ComMoveToArea ( i , ruBaseArea ) ;
11239: LD_VAR 0 1
11243: PPUSH
11244: LD_INT 12
11246: PPUSH
11247: CALL_OW 113
// if tag = 1 then
11251: LD_VAR 0 6
11255: PUSH
11256: LD_INT 1
11258: EQUAL
11259: IFFALSE 11444
// begin if b then
11261: LD_VAR 0 3
11265: IFFALSE 11293
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
11267: LD_VAR 0 1
11271: PPUSH
11272: LD_VAR 0 3
11276: PPUSH
11277: LD_VAR 0 1
11281: PPUSH
11282: CALL_OW 74
11286: PPUSH
11287: CALL_OW 130
11291: GO 11444
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
11293: LD_EXP 30
11297: PUSH
11298: LD_INT 11
11300: PPUSH
11301: LD_INT 81
11303: PUSH
11304: LD_INT 3
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PPUSH
11311: CALL_OW 70
11315: PUSH
11316: LD_INT 0
11318: EQUAL
11319: AND
11320: PUSH
11321: LD_INT 28
11323: PPUSH
11324: LD_EXP 30
11328: PUSH
11329: LD_INT 1
11331: ARRAY
11332: PUSH
11333: LD_INT 1
11335: ARRAY
11336: PPUSH
11337: LD_EXP 30
11341: PUSH
11342: LD_INT 1
11344: ARRAY
11345: PUSH
11346: LD_INT 2
11348: ARRAY
11349: PPUSH
11350: LD_EXP 30
11354: PUSH
11355: LD_INT 1
11357: ARRAY
11358: PUSH
11359: LD_INT 3
11361: ARRAY
11362: PPUSH
11363: LD_EXP 30
11367: PUSH
11368: LD_INT 1
11370: ARRAY
11371: PUSH
11372: LD_INT 4
11374: ARRAY
11375: PPUSH
11376: CALL 51750 0 5
11380: AND
11381: IFFALSE 11444
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
11383: LD_VAR 0 1
11387: PPUSH
11388: LD_EXP 30
11392: PUSH
11393: LD_INT 1
11395: ARRAY
11396: PUSH
11397: LD_INT 1
11399: ARRAY
11400: PPUSH
11401: LD_EXP 30
11405: PUSH
11406: LD_INT 1
11408: ARRAY
11409: PUSH
11410: LD_INT 2
11412: ARRAY
11413: PPUSH
11414: LD_EXP 30
11418: PUSH
11419: LD_INT 1
11421: ARRAY
11422: PUSH
11423: LD_INT 3
11425: ARRAY
11426: PPUSH
11427: LD_EXP 30
11431: PUSH
11432: LD_INT 1
11434: ARRAY
11435: PUSH
11436: LD_INT 4
11438: ARRAY
11439: PPUSH
11440: CALL_OW 145
// end ; end ;
11444: GO 10966
11446: POP
11447: POP
// end ; end ;
11448: PPOPN 8
11450: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
11451: LD_INT 0
11453: PPUSH
11454: PPUSH
11455: PPUSH
11456: PPUSH
11457: PPUSH
11458: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
11459: LD_ADDR_VAR 0 3
11463: PUSH
11464: DOUBLE
11465: LD_INT 1
11467: DEC
11468: ST_TO_ADDR
11469: LD_INT 3
11471: PUSH
11472: LD_INT 4
11474: PUSH
11475: LD_INT 5
11477: PUSH
11478: LD_INT 6
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: PUSH
11487: LD_OWVAR 67
11491: ARRAY
11492: PUSH
11493: LD_VAR 0 1
11497: PLUS
11498: PUSH
11499: FOR_TO
11500: IFFALSE 11817
// begin uc_side := 6 ;
11502: LD_ADDR_OWVAR 20
11506: PUSH
11507: LD_INT 6
11509: ST_TO_ADDR
// uc_nation := 3 ;
11510: LD_ADDR_OWVAR 21
11514: PUSH
11515: LD_INT 3
11517: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11518: LD_ADDR_VAR 0 6
11522: PUSH
11523: LD_INT 21
11525: PUSH
11526: LD_INT 22
11528: PUSH
11529: LD_INT 23
11531: PUSH
11532: LD_INT 24
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: PUSH
11541: LD_INT 1
11543: PPUSH
11544: LD_INT 4
11546: PPUSH
11547: CALL_OW 12
11551: ARRAY
11552: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11553: LD_ADDR_VAR 0 7
11557: PUSH
11558: LD_INT 42
11560: PUSH
11561: LD_INT 44
11563: PUSH
11564: LD_INT 43
11566: PUSH
11567: LD_INT 46
11569: PUSH
11570: LD_INT 45
11572: PUSH
11573: LD_INT 46
11575: PUSH
11576: LD_INT 45
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: PUSH
11588: LD_OWVAR 67
11592: PUSH
11593: LD_INT 0
11595: PPUSH
11596: LD_INT 3
11598: PPUSH
11599: CALL_OW 12
11603: PLUS
11604: ARRAY
11605: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11606: LD_VAR 0 6
11610: PUSH
11611: LD_INT 21
11613: PUSH
11614: LD_INT 22
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: IN
11621: PUSH
11622: LD_VAR 0 7
11626: PUSH
11627: LD_INT 46
11629: EQUAL
11630: AND
11631: IFFALSE 11660
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11633: LD_ADDR_VAR 0 7
11637: PUSH
11638: LD_INT 44
11640: PUSH
11641: LD_INT 45
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: LD_INT 1
11650: PPUSH
11651: LD_INT 2
11653: PPUSH
11654: CALL_OW 12
11658: ARRAY
11659: ST_TO_ADDR
// if tick < [ 17 17$00 , 15 15$00 , 13 13$00 , 11 11$00 ] [ Difficulty ] then
11660: LD_OWVAR 1
11664: PUSH
11665: LD_INT 35700
11667: PUSH
11668: LD_INT 31500
11670: PUSH
11671: LD_INT 27300
11673: PUSH
11674: LD_INT 23100
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: PUSH
11683: LD_OWVAR 67
11687: ARRAY
11688: LESS
11689: IFFALSE 11722
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
11691: LD_ADDR_VAR 0 7
11695: PUSH
11696: LD_INT 44
11698: PUSH
11699: LD_INT 43
11701: PUSH
11702: LD_INT 42
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: LIST
11709: PUSH
11710: LD_INT 1
11712: PPUSH
11713: LD_INT 3
11715: PPUSH
11716: CALL_OW 12
11720: ARRAY
11721: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
11722: LD_VAR 0 6
11726: PPUSH
11727: LD_INT 1
11729: PPUSH
11730: LD_INT 3
11732: PPUSH
11733: LD_VAR 0 7
11737: PPUSH
11738: LD_INT 90
11740: PPUSH
11741: CALL 43525 0 5
// un := CreateVehicle ;
11745: LD_ADDR_VAR 0 4
11749: PUSH
11750: CALL_OW 45
11754: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
11755: LD_VAR 0 4
11759: PPUSH
11760: LD_INT 140
11762: PPUSH
11763: LD_INT 146
11765: PPUSH
11766: LD_INT 0
11768: PPUSH
11769: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
11773: LD_VAR 0 4
11777: PPUSH
11778: LD_INT 131
11780: PPUSH
11781: LD_INT 128
11783: PPUSH
11784: CALL_OW 111
// wait ( 0 0$3 ) ;
11788: LD_INT 105
11790: PPUSH
11791: CALL_OW 67
// tmp := Join ( tmp , un ) ;
11795: LD_ADDR_VAR 0 5
11799: PUSH
11800: LD_VAR 0 5
11804: PPUSH
11805: LD_VAR 0 4
11809: PPUSH
11810: CALL 75909 0 2
11814: ST_TO_ADDR
// end ;
11815: GO 11499
11817: POP
11818: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
11819: LD_ADDR_EXP 31
11823: PUSH
11824: LD_EXP 31
11828: PPUSH
11829: LD_VAR 0 5
11833: PPUSH
11834: CALL 75946 0 2
11838: ST_TO_ADDR
// end ;
11839: LD_VAR 0 2
11843: RET
// every 0 0$3 trigger russianAttackers do
11844: LD_EXP 31
11848: IFFALSE 11931
11850: GO 11852
11852: DISABLE
// begin enable ;
11853: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
11854: LD_EXP 31
11858: PPUSH
11859: LD_INT 126
11861: PUSH
11862: LD_INT 108
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: LD_INT 107
11871: PUSH
11872: LD_INT 85
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: PUSH
11879: LD_INT 82
11881: PUSH
11882: LD_INT 62
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: PUSH
11889: LD_INT 73
11891: PUSH
11892: LD_INT 46
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 62
11901: PUSH
11902: LD_INT 31
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 52
11911: PUSH
11912: LD_INT 17
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: PPUSH
11927: CALL 78515 0 2
// end ; end_of_file
11931: END
// on SailEvent ( event ) do begin if event = 1 then
11932: LD_VAR 0 1
11936: PUSH
11937: LD_INT 1
11939: EQUAL
11940: IFFALSE 11955
// PrepareRussianAttack ( Difficulty + 3 ) ;
11942: LD_OWVAR 67
11946: PUSH
11947: LD_INT 3
11949: PLUS
11950: PPUSH
11951: CALL 11451 0 1
// end ;
11955: PPOPN 1
11957: END
// on UnitDestroyed ( un ) do var tmp , chassis , weapon , btype ;
11958: LD_INT 0
11960: PPUSH
11961: PPUSH
11962: PPUSH
11963: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
11964: LD_VAR 0 1
11968: PPUSH
11969: CALL 34197 0 1
// if un = JMM then
11973: LD_VAR 0 1
11977: PUSH
11978: LD_EXP 10
11982: EQUAL
11983: IFFALSE 11992
// YouLost ( JMM ) ;
11985: LD_STRING JMM
11987: PPUSH
11988: CALL_OW 104
// if un = Sikorski and sikorskiStatus = 0 then
11992: LD_VAR 0 1
11996: PUSH
11997: LD_EXP 23
12001: EQUAL
12002: PUSH
12003: LD_EXP 8
12007: PUSH
12008: LD_INT 0
12010: EQUAL
12011: AND
12012: IFFALSE 12018
// SikorskiKilledInAction ;
12014: CALL 16910 0 0
// if GetSide ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
12018: LD_VAR 0 1
12022: PPUSH
12023: CALL_OW 255
12027: PUSH
12028: LD_INT 1
12030: EQUAL
12031: PUSH
12032: LD_VAR 0 1
12036: PPUSH
12037: CALL_OW 266
12041: PUSH
12042: LD_INT 0
12044: PUSH
12045: LD_INT 1
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: IN
12052: AND
12053: IFFALSE 12062
// YouLost ( Destroyed ) ;
12055: LD_STRING Destroyed
12057: PPUSH
12058: CALL_OW 104
// if un in ruMobile then
12062: LD_VAR 0 1
12066: PUSH
12067: LD_EXP 29
12071: IN
12072: IFFALSE 12090
// ruMobile := ruMobile diff un ;
12074: LD_ADDR_EXP 29
12078: PUSH
12079: LD_EXP 29
12083: PUSH
12084: LD_VAR 0 1
12088: DIFF
12089: ST_TO_ADDR
// if GetSide ( un ) = 3 then
12090: LD_VAR 0 1
12094: PPUSH
12095: CALL_OW 255
12099: PUSH
12100: LD_INT 3
12102: EQUAL
12103: IFFALSE 12681
// begin if GetType ( un ) = unit_building then
12105: LD_VAR 0 1
12109: PPUSH
12110: CALL_OW 247
12114: PUSH
12115: LD_INT 3
12117: EQUAL
12118: IFFALSE 12254
// begin btype := GetBType ( un ) ;
12120: LD_ADDR_VAR 0 5
12124: PUSH
12125: LD_VAR 0 1
12129: PPUSH
12130: CALL_OW 266
12134: ST_TO_ADDR
// if btype = b_warehouse then
12135: LD_VAR 0 5
12139: PUSH
12140: LD_INT 1
12142: EQUAL
12143: IFFALSE 12153
// btype := b_depot ;
12145: LD_ADDR_VAR 0 5
12149: PUSH
12150: LD_INT 0
12152: ST_TO_ADDR
// if btype = b_barracks then
12153: LD_VAR 0 5
12157: PUSH
12158: LD_INT 5
12160: EQUAL
12161: IFFALSE 12171
// btype := b_armoury ;
12163: LD_ADDR_VAR 0 5
12167: PUSH
12168: LD_INT 4
12170: ST_TO_ADDR
// if btype = b_lab_full then
12171: LD_VAR 0 5
12175: PUSH
12176: LD_INT 8
12178: EQUAL
12179: IFFALSE 12189
// btype := b_lab ;
12181: LD_ADDR_VAR 0 5
12185: PUSH
12186: LD_INT 6
12188: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
12189: LD_ADDR_EXP 30
12193: PUSH
12194: LD_EXP 30
12198: PPUSH
12199: LD_EXP 30
12203: PUSH
12204: LD_INT 1
12206: PLUS
12207: PPUSH
12208: LD_VAR 0 5
12212: PUSH
12213: LD_VAR 0 1
12217: PPUSH
12218: CALL_OW 250
12222: PUSH
12223: LD_VAR 0 1
12227: PPUSH
12228: CALL_OW 251
12232: PUSH
12233: LD_VAR 0 1
12237: PPUSH
12238: CALL_OW 254
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: PPUSH
12249: CALL_OW 1
12253: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
12254: LD_VAR 0 1
12258: PPUSH
12259: CALL_OW 247
12263: PUSH
12264: LD_INT 2
12266: EQUAL
12267: IFFALSE 12542
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
12269: LD_VAR 0 1
12273: PPUSH
12274: CALL_OW 264
12278: PUSH
12279: LD_INT 52
12281: PUSH
12282: LD_INT 51
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: IN
12289: IFFALSE 12319
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
12291: LD_INT 29
12293: PPUSH
12294: LD_INT 22
12296: PPUSH
12297: LD_INT 1
12299: PPUSH
12300: LD_INT 3
12302: PPUSH
12303: LD_VAR 0 1
12307: PPUSH
12308: CALL_OW 264
12312: PPUSH
12313: CALL_OW 185
// end else
12317: GO 12542
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
12319: LD_ADDR_VAR 0 3
12323: PUSH
12324: LD_INT 21
12326: PUSH
12327: LD_INT 22
12329: PUSH
12330: LD_INT 23
12332: PUSH
12333: LD_INT 24
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: PUSH
12342: LD_INT 1
12344: PPUSH
12345: LD_INT 4
12347: PPUSH
12348: CALL_OW 12
12352: ARRAY
12353: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
12354: LD_ADDR_VAR 0 4
12358: PUSH
12359: LD_INT 42
12361: PUSH
12362: LD_INT 44
12364: PUSH
12365: LD_INT 43
12367: PUSH
12368: LD_INT 46
12370: PUSH
12371: LD_INT 45
12373: PUSH
12374: LD_INT 46
12376: PUSH
12377: LD_INT 45
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: PUSH
12389: LD_OWVAR 67
12393: PUSH
12394: LD_INT 0
12396: PPUSH
12397: LD_INT 3
12399: PPUSH
12400: CALL_OW 12
12404: PLUS
12405: ARRAY
12406: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
12407: LD_VAR 0 3
12411: PUSH
12412: LD_INT 21
12414: PUSH
12415: LD_INT 22
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: IN
12422: PUSH
12423: LD_VAR 0 4
12427: PUSH
12428: LD_INT 46
12430: EQUAL
12431: AND
12432: IFFALSE 12461
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
12434: LD_ADDR_VAR 0 4
12438: PUSH
12439: LD_INT 44
12441: PUSH
12442: LD_INT 45
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 1
12451: PPUSH
12452: LD_INT 2
12454: PPUSH
12455: CALL_OW 12
12459: ARRAY
12460: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
12461: LD_OWVAR 1
12465: PUSH
12466: LD_INT 31500
12468: PUSH
12469: LD_INT 27300
12471: PUSH
12472: LD_INT 23100
12474: PUSH
12475: LD_INT 21000
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: PUSH
12484: LD_OWVAR 67
12488: ARRAY
12489: LESS
12490: IFFALSE 12519
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
12492: LD_ADDR_VAR 0 4
12496: PUSH
12497: LD_INT 44
12499: PUSH
12500: LD_INT 43
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PUSH
12507: LD_INT 1
12509: PPUSH
12510: LD_INT 2
12512: PPUSH
12513: CALL_OW 12
12517: ARRAY
12518: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
12519: LD_INT 29
12521: PPUSH
12522: LD_VAR 0 3
12526: PPUSH
12527: LD_INT 1
12529: PPUSH
12530: LD_INT 1
12532: PPUSH
12533: LD_VAR 0 4
12537: PPUSH
12538: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
12542: LD_VAR 0 1
12546: PPUSH
12547: CALL_OW 257
12551: PUSH
12552: LD_INT 3
12554: EQUAL
12555: IFFALSE 12681
// begin if ruMechCounter = 0 or not IsOk ( ruFac ) then
12557: LD_EXP 28
12561: PUSH
12562: LD_INT 0
12564: EQUAL
12565: PUSH
12566: LD_INT 29
12568: PPUSH
12569: CALL_OW 302
12573: NOT
12574: OR
12575: IFFALSE 12579
// exit ;
12577: GO 12681
// ruMechCounter := Dec ( ruMechCounter ) ;
12579: LD_ADDR_EXP 28
12583: PUSH
12584: LD_EXP 28
12588: PPUSH
12589: CALL 77294 0 1
12593: ST_TO_ADDR
// uc_side := 3 ;
12594: LD_ADDR_OWVAR 20
12598: PUSH
12599: LD_INT 3
12601: ST_TO_ADDR
// uc_nation := 3 ;
12602: LD_ADDR_OWVAR 21
12606: PUSH
12607: LD_INT 3
12609: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
12610: LD_INT 0
12612: PPUSH
12613: LD_INT 5
12615: PUSH
12616: LD_INT 6
12618: PUSH
12619: LD_INT 7
12621: PUSH
12622: LD_INT 8
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: PUSH
12631: LD_OWVAR 67
12635: ARRAY
12636: PPUSH
12637: CALL_OW 383
// tmp := CreateHuman ;
12641: LD_ADDR_VAR 0 2
12645: PUSH
12646: CALL_OW 44
12650: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
12651: LD_VAR 0 2
12655: PPUSH
12656: LD_INT 145
12658: PPUSH
12659: LD_INT 133
12661: PPUSH
12662: LD_INT 0
12664: PPUSH
12665: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
12669: LD_VAR 0 2
12673: PPUSH
12674: LD_INT 29
12676: PPUSH
12677: CALL_OW 120
// end ; end ; end ;
12681: PPOPN 5
12683: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
12684: LD_VAR 0 1
12688: PPUSH
12689: CALL_OW 255
12693: PUSH
12694: LD_INT 4
12696: EQUAL
12697: IFFALSE 12714
// ComMoveXY ( driver , 40 , 47 ) ;
12699: LD_VAR 0 1
12703: PPUSH
12704: LD_INT 40
12706: PPUSH
12707: LD_INT 47
12709: PPUSH
12710: CALL_OW 111
// if GetSide ( driver ) = 3 then
12714: LD_VAR 0 1
12718: PPUSH
12719: CALL_OW 255
12723: PUSH
12724: LD_INT 3
12726: EQUAL
12727: IFFALSE 12951
// begin ComMoveXY ( driver , 90 , 97 ) ;
12729: LD_VAR 0 1
12733: PPUSH
12734: LD_INT 90
12736: PPUSH
12737: LD_INT 97
12739: PPUSH
12740: CALL_OW 111
// if IsOk ( ruFac ) then
12744: LD_INT 29
12746: PPUSH
12747: CALL_OW 302
12751: IFFALSE 12875
// begin repeat wait ( 0 0$1 ) ;
12753: LD_INT 35
12755: PPUSH
12756: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
12760: LD_INT 29
12762: PPUSH
12763: CALL_OW 313
12767: PUSH
12768: LD_INT 6
12770: LESS
12771: PUSH
12772: LD_VAR 0 1
12776: PPUSH
12777: CALL_OW 301
12781: OR
12782: IFFALSE 12753
// if IsDead ( driver ) then
12784: LD_VAR 0 1
12788: PPUSH
12789: CALL_OW 301
12793: IFFALSE 12797
// exit ;
12795: GO 12951
// repeat wait ( 0 0$10 ) ;
12797: LD_INT 350
12799: PPUSH
12800: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
12804: LD_VAR 0 1
12808: PPUSH
12809: CALL_OW 314
12813: NOT
12814: PUSH
12815: LD_INT 29
12817: PPUSH
12818: CALL_OW 313
12822: PUSH
12823: LD_INT 6
12825: LESS
12826: AND
12827: IFFALSE 12841
// ComEnterUnit ( driver , ruFac ) ;
12829: LD_VAR 0 1
12833: PPUSH
12834: LD_INT 29
12836: PPUSH
12837: CALL_OW 120
// until not IsOk ( ruFac ) or IsDead ( driver ) or IsInUnit ( driver ) ;
12841: LD_INT 29
12843: PPUSH
12844: CALL_OW 302
12848: NOT
12849: PUSH
12850: LD_VAR 0 1
12854: PPUSH
12855: CALL_OW 301
12859: OR
12860: PUSH
12861: LD_VAR 0 1
12865: PPUSH
12866: CALL_OW 310
12870: OR
12871: IFFALSE 12797
// end else
12873: GO 12951
// begin ComMoveXY ( driver , 142 , 148 ) ;
12875: LD_VAR 0 1
12879: PPUSH
12880: LD_INT 142
12882: PPUSH
12883: LD_INT 148
12885: PPUSH
12886: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12890: LD_INT 35
12892: PPUSH
12893: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
12897: LD_VAR 0 1
12901: PPUSH
12902: CALL_OW 301
12906: PUSH
12907: LD_VAR 0 1
12911: PPUSH
12912: LD_INT 142
12914: PPUSH
12915: LD_INT 148
12917: PPUSH
12918: CALL_OW 307
12922: OR
12923: IFFALSE 12890
// if IsAt ( driver , 142 , 148 ) then
12925: LD_VAR 0 1
12929: PPUSH
12930: LD_INT 142
12932: PPUSH
12933: LD_INT 148
12935: PPUSH
12936: CALL_OW 307
12940: IFFALSE 12951
// RemoveUnit ( driver ) ;
12942: LD_VAR 0 1
12946: PPUSH
12947: CALL_OW 64
// end ; end ; end ;
12951: PPOPN 4
12953: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
12954: LD_VAR 0 2
12958: PPUSH
12959: CALL_OW 257
12963: PUSH
12964: LD_INT 3
12966: EQUAL
12967: PUSH
12968: LD_VAR 0 1
12972: PPUSH
12973: CALL_OW 255
12977: PUSH
12978: LD_INT 3
12980: EQUAL
12981: AND
12982: PUSH
12983: LD_VAR 0 1
12987: PUSH
12988: LD_INT 29
12990: EQUAL
12991: AND
12992: IFFALSE 13006
// SetLives ( un , 1000 ) ;
12994: LD_VAR 0 2
12998: PPUSH
12999: LD_INT 1000
13001: PPUSH
13002: CALL_OW 234
// end ;
13006: PPOPN 2
13008: END
// on EvacuateBuilding ( b , un ) do var i , tmp ;
13009: LD_INT 0
13011: PPUSH
13012: PPUSH
// begin if GetSide ( b ) = 3 then
13013: LD_VAR 0 1
13017: PPUSH
13018: CALL_OW 255
13022: PUSH
13023: LD_INT 3
13025: EQUAL
13026: IFFALSE 13257
// begin if GetBType ( b ) in [ b_bunker , b_barracks ] then
13028: LD_VAR 0 1
13032: PPUSH
13033: CALL_OW 266
13037: PUSH
13038: LD_INT 32
13040: PUSH
13041: LD_INT 5
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: IN
13048: IFFALSE 13257
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
13050: LD_ADDR_VAR 0 4
13054: PUSH
13055: LD_INT 22
13057: PUSH
13058: LD_INT 3
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PUSH
13065: LD_INT 50
13067: PUSH
13068: EMPTY
13069: LIST
13070: PUSH
13071: LD_INT 30
13073: PUSH
13074: LD_INT 32
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PUSH
13081: LD_INT 58
13083: PUSH
13084: EMPTY
13085: LIST
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: PPUSH
13093: CALL_OW 69
13097: ST_TO_ADDR
// if tmp then
13098: LD_VAR 0 4
13102: IFFALSE 13124
// begin ComEnterUnit ( un , tmp [ 1 ] ) ;
13104: LD_VAR 0 2
13108: PPUSH
13109: LD_VAR 0 4
13113: PUSH
13114: LD_INT 1
13116: ARRAY
13117: PPUSH
13118: CALL_OW 120
// exit ;
13122: GO 13257
// end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
13124: LD_ADDR_VAR 0 4
13128: PUSH
13129: LD_INT 22
13131: PUSH
13132: LD_INT 3
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: LD_INT 50
13141: PUSH
13142: EMPTY
13143: LIST
13144: PUSH
13145: LD_INT 2
13147: PUSH
13148: LD_INT 30
13150: PUSH
13151: LD_INT 4
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 30
13160: PUSH
13161: LD_INT 5
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: LIST
13177: PPUSH
13178: CALL_OW 69
13182: ST_TO_ADDR
// if not tmp then
13183: LD_VAR 0 4
13187: NOT
13188: IFFALSE 13207
// begin ComMoveXY ( un , 92 , 99 ) ;
13190: LD_VAR 0 2
13194: PPUSH
13195: LD_INT 92
13197: PPUSH
13198: LD_INT 99
13200: PPUSH
13201: CALL_OW 111
// exit ;
13205: GO 13257
// end ; for i in tmp do
13207: LD_ADDR_VAR 0 3
13211: PUSH
13212: LD_VAR 0 4
13216: PUSH
13217: FOR_IN
13218: IFFALSE 13255
// if UnitsInside ( i ) < 6 then
13220: LD_VAR 0 3
13224: PPUSH
13225: CALL_OW 313
13229: PUSH
13230: LD_INT 6
13232: LESS
13233: IFFALSE 13253
// begin ComEnterUnit ( un , i ) ;
13235: LD_VAR 0 2
13239: PPUSH
13240: LD_VAR 0 3
13244: PPUSH
13245: CALL_OW 120
// exit ;
13249: POP
13250: POP
13251: GO 13257
// end ;
13253: GO 13217
13255: POP
13256: POP
// end ; end ; end ;
13257: PPOPN 4
13259: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
13260: LD_VAR 0 1
13264: PPUSH
13265: CALL_OW 255
13269: PUSH
13270: LD_INT 3
13272: PUSH
13273: LD_INT 6
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: IN
13280: PUSH
13281: LD_VAR 0 1
13285: PPUSH
13286: CALL_OW 263
13290: PUSH
13291: LD_INT 3
13293: EQUAL
13294: AND
13295: PUSH
13296: LD_EXP 6
13300: NOT
13301: AND
13302: IFFALSE 13321
// begin seenComputer := true ;
13304: LD_ADDR_EXP 6
13308: PUSH
13309: LD_INT 1
13311: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
13312: LD_VAR 0 1
13316: PPUSH
13317: CALL 16237 0 1
// end ; end ;
13321: PPOPN 1
13323: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
13324: LD_INT 0
13326: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
13327: LD_VAR 0 1
13331: PPUSH
13332: LD_VAR 0 2
13336: PPUSH
13337: CALL 34319 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
13341: LD_VAR 0 1
13345: PPUSH
13346: CALL_OW 255
13350: PUSH
13351: LD_INT 3
13353: EQUAL
13354: PUSH
13355: LD_VAR 0 1
13359: PPUSH
13360: CALL_OW 263
13364: PUSH
13365: LD_INT 1
13367: EQUAL
13368: AND
13369: PUSH
13370: LD_VAR 0 1
13374: PPUSH
13375: CALL_OW 264
13379: PUSH
13380: LD_INT 42
13382: PUSH
13383: LD_INT 43
13385: PUSH
13386: LD_INT 44
13388: PUSH
13389: LD_INT 46
13391: PUSH
13392: LD_INT 45
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: IN
13402: AND
13403: IFFALSE 13433
// begin SetTag ( vehicle , 300 ) ;
13405: LD_VAR 0 1
13409: PPUSH
13410: LD_INT 300
13412: PPUSH
13413: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
13417: LD_ADDR_EXP 29
13421: PUSH
13422: LD_EXP 29
13426: PUSH
13427: LD_VAR 0 1
13431: UNION
13432: ST_TO_ADDR
// end ; end ;
13433: PPOPN 3
13435: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
13436: LD_INT 0
13438: PPUSH
// begin if InArea ( x , y , ruCrates ) then
13439: LD_VAR 0 2
13443: PPUSH
13444: LD_VAR 0 3
13448: PPUSH
13449: LD_INT 13
13451: PPUSH
13452: CALL_OW 309
13456: IFFALSE 13587
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
13458: LD_ADDR_VAR 0 6
13462: PUSH
13463: LD_INT 22
13465: PUSH
13466: LD_INT 3
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PUSH
13473: LD_INT 50
13475: PUSH
13476: EMPTY
13477: LIST
13478: PUSH
13479: LD_INT 34
13481: PUSH
13482: LD_INT 51
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: LIST
13493: PPUSH
13494: CALL_OW 69
13498: ST_TO_ADDR
// if not cargo then
13499: LD_VAR 0 6
13503: NOT
13504: IFFALSE 13508
// exit ;
13506: GO 13587
// wait ( 0 0$5 ) ;
13508: LD_INT 175
13510: PPUSH
13511: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
13515: LD_VAR 0 6
13519: PUSH
13520: LD_INT 1
13522: ARRAY
13523: PPUSH
13524: LD_INT 28
13526: PPUSH
13527: CALL_OW 296
13531: PUSH
13532: LD_INT 6
13534: LESS
13535: PUSH
13536: LD_VAR 0 6
13540: PUSH
13541: LD_INT 1
13543: ARRAY
13544: PPUSH
13545: CALL_OW 261
13549: PUSH
13550: LD_INT 50
13552: LESS
13553: AND
13554: IFFALSE 13568
// ComMoveUnit ( cargo , ruDep ) ;
13556: LD_VAR 0 6
13560: PPUSH
13561: LD_INT 28
13563: PPUSH
13564: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
13568: LD_VAR 0 6
13572: PPUSH
13573: LD_VAR 0 2
13577: PPUSH
13578: LD_VAR 0 3
13582: PPUSH
13583: CALL_OW 177
// end ; end ;
13587: PPOPN 6
13589: END
// on BuildingComplete ( b ) do var i , tmp ;
13590: LD_INT 0
13592: PPUSH
13593: PPUSH
// begin if GetSide ( b ) = 3 then
13594: LD_VAR 0 1
13598: PPUSH
13599: CALL_OW 255
13603: PUSH
13604: LD_INT 3
13606: EQUAL
13607: IFFALSE 13822
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
13609: LD_ADDR_EXP 30
13613: PUSH
13614: LD_EXP 30
13618: PPUSH
13619: LD_INT 1
13621: PPUSH
13622: CALL_OW 3
13626: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
13627: LD_VAR 0 1
13631: PPUSH
13632: CALL_OW 266
13636: PUSH
13637: LD_INT 32
13639: PUSH
13640: LD_INT 33
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: IN
13647: IFFALSE 13822
// begin AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
13649: LD_VAR 0 1
13653: PPUSH
13654: LD_INT 46
13656: PUSH
13657: LD_INT 45
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 1
13666: PPUSH
13667: LD_INT 2
13669: PPUSH
13670: CALL_OW 12
13674: ARRAY
13675: PPUSH
13676: CALL_OW 208
// if GetBType ( b ) = b_bunker then
13680: LD_VAR 0 1
13684: PPUSH
13685: CALL_OW 266
13689: PUSH
13690: LD_INT 32
13692: EQUAL
13693: IFFALSE 13822
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_tag , 0 ] ] ) ;
13695: LD_ADDR_VAR 0 3
13699: PUSH
13700: LD_INT 22
13702: PUSH
13703: LD_INT 3
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: LD_INT 25
13712: PUSH
13713: LD_INT 1
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: LD_INT 120
13722: PUSH
13723: LD_INT 0
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: LIST
13734: PPUSH
13735: CALL_OW 69
13739: ST_TO_ADDR
// if tmp then
13740: LD_VAR 0 3
13744: IFFALSE 13822
// for i in tmp do
13746: LD_ADDR_VAR 0 2
13750: PUSH
13751: LD_VAR 0 3
13755: PUSH
13756: FOR_IN
13757: IFFALSE 13820
// if not IsInUnit ( i ) or GetBType ( IsInUnit ( i ) ) <> b_bunker then
13759: LD_VAR 0 2
13763: PPUSH
13764: CALL_OW 310
13768: NOT
13769: PUSH
13770: LD_VAR 0 2
13774: PPUSH
13775: CALL_OW 310
13779: PPUSH
13780: CALL_OW 266
13784: PUSH
13785: LD_INT 32
13787: NONEQUAL
13788: OR
13789: IFFALSE 13818
// begin ComExit ( i ) ;
13791: LD_VAR 0 2
13795: PPUSH
13796: CALL 76307 0 1
// AddComEnterUnit ( i , b ) ;
13800: LD_VAR 0 2
13804: PPUSH
13805: LD_VAR 0 1
13809: PPUSH
13810: CALL_OW 180
// exit ;
13814: POP
13815: POP
13816: GO 13822
// end ;
13818: GO 13756
13820: POP
13821: POP
// end ; end ; end ; end ; end_of_file
13822: PPOPN 3
13824: END
// export function Action ; var i , tmp , un , inUnit ; begin
13825: LD_INT 0
13827: PPUSH
13828: PPUSH
13829: PPUSH
13830: PPUSH
13831: PPUSH
// Video ( true ) ;
13832: LD_INT 1
13834: PPUSH
13835: CALL 75881 0 1
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
13839: LD_INT 50
13841: PPUSH
13842: LD_INT 12
13844: PPUSH
13845: LD_INT 1
13847: PPUSH
13848: LD_INT 56
13850: NEG
13851: PPUSH
13852: CALL 75795 0 4
// CenterOnXY ( 50 , 12 ) ;
13856: LD_INT 50
13858: PPUSH
13859: LD_INT 12
13861: PPUSH
13862: CALL_OW 84
// wait ( 0 0$3 ) ;
13866: LD_INT 105
13868: PPUSH
13869: CALL_OW 67
// PrepareStartRussianAttack ;
13873: CALL 9221 0 0
// CenterOnXY ( 66 , 47 ) ;
13877: LD_INT 66
13879: PPUSH
13880: LD_INT 47
13882: PPUSH
13883: CALL_OW 84
// wait ( 0 0$5 ) ;
13887: LD_INT 175
13889: PPUSH
13890: CALL_OW 67
// case gammaCommander of 1 :
13894: LD_EXP 9
13898: PUSH
13899: LD_INT 1
13901: DOUBLE
13902: EQUAL
13903: IFTRUE 13907
13905: GO 13922
13907: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
13908: LD_EXP 12
13912: PPUSH
13913: LD_STRING D1-Don-1
13915: PPUSH
13916: CALL_OW 88
13920: GO 13969
13922: LD_INT 2
13924: DOUBLE
13925: EQUAL
13926: IFTRUE 13930
13928: GO 13945
13930: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
13931: LD_EXP 11
13935: PPUSH
13936: LD_STRING D1-Brown-1
13938: PPUSH
13939: CALL_OW 88
13943: GO 13969
13945: LD_INT 3
13947: DOUBLE
13948: EQUAL
13949: IFTRUE 13953
13951: GO 13968
13953: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
13954: LD_EXP 20
13958: PPUSH
13959: LD_STRING D1-VanH-1
13961: PPUSH
13962: CALL_OW 88
13966: GO 13969
13968: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
13969: LD_ADDR_VAR 0 3
13973: PUSH
13974: LD_INT 22
13976: PUSH
13977: LD_INT 1
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: LD_INT 33
13986: PUSH
13987: LD_INT 2
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: PUSH
13994: LD_INT 61
13996: PUSH
13997: EMPTY
13998: LIST
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: LIST
14004: PPUSH
14005: CALL_OW 69
14009: ST_TO_ADDR
// if tmp then
14010: LD_VAR 0 3
14014: IFFALSE 14031
// ComAgressiveMove ( tmp , 74 , 44 ) ;
14016: LD_VAR 0 3
14020: PPUSH
14021: LD_INT 74
14023: PPUSH
14024: LD_INT 44
14026: PPUSH
14027: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
14031: LD_ADDR_VAR 0 3
14035: PUSH
14036: LD_INT 22
14038: PUSH
14039: LD_INT 1
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PUSH
14046: LD_INT 25
14048: PUSH
14049: LD_INT 1
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PPUSH
14060: CALL_OW 69
14064: PUSH
14065: LD_EXP 12
14069: PUSH
14070: LD_EXP 11
14074: PUSH
14075: LD_EXP 20
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: LIST
14084: DIFF
14085: ST_TO_ADDR
// if tmp then
14086: LD_VAR 0 3
14090: IFFALSE 14168
// for i in tmp do
14092: LD_ADDR_VAR 0 2
14096: PUSH
14097: LD_VAR 0 3
14101: PUSH
14102: FOR_IN
14103: IFFALSE 14166
// begin inUnit := IsInUnit ( i ) ;
14105: LD_ADDR_VAR 0 5
14109: PUSH
14110: LD_VAR 0 2
14114: PPUSH
14115: CALL_OW 310
14119: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
14120: LD_VAR 0 5
14124: PUSH
14125: LD_VAR 0 5
14129: PPUSH
14130: CALL_OW 266
14134: PUSH
14135: LD_INT 32
14137: PUSH
14138: LD_INT 31
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: IN
14145: AND
14146: IFFALSE 14164
// tmp := tmp diff i ;
14148: LD_ADDR_VAR 0 3
14152: PUSH
14153: LD_VAR 0 3
14157: PUSH
14158: LD_VAR 0 2
14162: DIFF
14163: ST_TO_ADDR
// end ;
14164: GO 14102
14166: POP
14167: POP
// if tmp then
14168: LD_VAR 0 3
14172: IFFALSE 14262
// begin ComExitAll ( tmp ) ;
14174: LD_VAR 0 3
14178: PPUSH
14179: CALL 76390 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
14183: LD_VAR 0 3
14187: PPUSH
14188: LD_INT 74
14190: PPUSH
14191: LD_INT 44
14193: PPUSH
14194: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
14198: LD_ADDR_VAR 0 3
14202: PUSH
14203: LD_INT 22
14205: PUSH
14206: LD_INT 1
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: LD_INT 25
14215: PUSH
14216: LD_INT 4
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PPUSH
14227: CALL_OW 69
14231: ST_TO_ADDR
// if tmp then
14232: LD_VAR 0 3
14236: IFFALSE 14262
// begin ComExitAll ( tmp ) ;
14238: LD_VAR 0 3
14242: PPUSH
14243: CALL 76390 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
14247: LD_VAR 0 3
14251: PPUSH
14252: LD_INT 66
14254: PPUSH
14255: LD_INT 28
14257: PPUSH
14258: CALL_OW 171
// end ; end ; game_speed := 4 ;
14262: LD_ADDR_OWVAR 65
14266: PUSH
14267: LD_INT 4
14269: ST_TO_ADDR
// wait ( 0 0$2 ) ;
14270: LD_INT 70
14272: PPUSH
14273: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
14277: LD_EXP 24
14281: PPUSH
14282: LD_STRING D1-Har-1
14284: PPUSH
14285: CALL_OW 94
// case gammaCommander of 1 :
14289: LD_EXP 9
14293: PUSH
14294: LD_INT 1
14296: DOUBLE
14297: EQUAL
14298: IFTRUE 14302
14300: GO 14317
14302: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
14303: LD_EXP 12
14307: PPUSH
14308: LD_STRING D1-Don-2
14310: PPUSH
14311: CALL_OW 88
14315: GO 14364
14317: LD_INT 2
14319: DOUBLE
14320: EQUAL
14321: IFTRUE 14325
14323: GO 14340
14325: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
14326: LD_EXP 11
14330: PPUSH
14331: LD_STRING D1-Brown-2
14333: PPUSH
14334: CALL_OW 88
14338: GO 14364
14340: LD_INT 3
14342: DOUBLE
14343: EQUAL
14344: IFTRUE 14348
14346: GO 14363
14348: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
14349: LD_EXP 20
14353: PPUSH
14354: LD_STRING D1-VanH-2
14356: PPUSH
14357: CALL_OW 88
14361: GO 14364
14363: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
14364: LD_EXP 24
14368: PPUSH
14369: LD_STRING D1-Har-2
14371: PPUSH
14372: CALL_OW 94
// Video ( false ) ;
14376: LD_INT 0
14378: PPUSH
14379: CALL 75881 0 1
// ChangeMissionObjectives ( M1 ) ;
14383: LD_STRING M1
14385: PPUSH
14386: CALL_OW 337
// SaveForQuickRestart ;
14390: CALL_OW 22
// wait ( 2 2$30 ) ;
14394: LD_INT 5250
14396: PPUSH
14397: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
14401: LD_INT 1
14403: PPUSH
14404: CALL 11451 0 1
// wait ( 4 4$30 ) ;
14408: LD_INT 9450
14410: PPUSH
14411: CALL_OW 67
// if Difficulty > 2 then
14415: LD_OWVAR 67
14419: PUSH
14420: LD_INT 2
14422: GREATER
14423: IFFALSE 14432
// PrepareRussianAttack ( 2 ) ;
14425: LD_INT 2
14427: PPUSH
14428: CALL 11451 0 1
// if Difficulty > 3 then
14432: LD_OWVAR 67
14436: PUSH
14437: LD_INT 3
14439: GREATER
14440: IFFALSE 14599
// begin for i := 1 to 4 do
14442: LD_ADDR_VAR 0 2
14446: PUSH
14447: DOUBLE
14448: LD_INT 1
14450: DEC
14451: ST_TO_ADDR
14452: LD_INT 4
14454: PUSH
14455: FOR_TO
14456: IFFALSE 14541
// begin uc_side := 6 ;
14458: LD_ADDR_OWVAR 20
14462: PUSH
14463: LD_INT 6
14465: ST_TO_ADDR
// uc_nation := 3 ;
14466: LD_ADDR_OWVAR 21
14470: PUSH
14471: LD_INT 3
14473: ST_TO_ADDR
// PrepareSoldier ( false , 6 ) ;
14474: LD_INT 0
14476: PPUSH
14477: LD_INT 6
14479: PPUSH
14480: CALL_OW 381
// un := CreateHuman ;
14484: LD_ADDR_VAR 0 4
14488: PUSH
14489: CALL_OW 44
14493: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
14494: LD_VAR 0 4
14498: PPUSH
14499: LD_INT 122
14501: PPUSH
14502: LD_INT 89
14504: PPUSH
14505: LD_INT 3
14507: PPUSH
14508: LD_INT 0
14510: PPUSH
14511: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
14515: LD_VAR 0 4
14519: PPUSH
14520: LD_INT 88
14522: PPUSH
14523: LD_INT 42
14525: PPUSH
14526: CALL_OW 114
// AddComHold ( un ) ;
14530: LD_VAR 0 4
14534: PPUSH
14535: CALL_OW 200
// end ;
14539: GO 14455
14541: POP
14542: POP
// PrepareScientist ( false , 6 ) ;
14543: LD_INT 0
14545: PPUSH
14546: LD_INT 6
14548: PPUSH
14549: CALL_OW 384
// un := CreateHuman ;
14553: LD_ADDR_VAR 0 4
14557: PUSH
14558: CALL_OW 44
14562: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
14563: LD_VAR 0 4
14567: PPUSH
14568: LD_INT 122
14570: PPUSH
14571: LD_INT 89
14573: PPUSH
14574: LD_INT 3
14576: PPUSH
14577: LD_INT 0
14579: PPUSH
14580: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
14584: LD_VAR 0 4
14588: PPUSH
14589: LD_INT 91
14591: PPUSH
14592: LD_INT 48
14594: PPUSH
14595: CALL_OW 111
// end ; end ;
14599: LD_VAR 0 1
14603: RET
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 3 ] ] ) = 0 and tick > 5 5$00 do var dialog , p ;
14604: LD_INT 22
14606: PUSH
14607: LD_INT 1
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: LD_INT 101
14616: PUSH
14617: LD_INT 3
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PPUSH
14628: CALL_OW 69
14632: PUSH
14633: LD_INT 0
14635: EQUAL
14636: PUSH
14637: LD_OWVAR 1
14641: PUSH
14642: LD_INT 10500
14644: GREATER
14645: AND
14646: IFFALSE 16234
14648: GO 14650
14650: DISABLE
14651: LD_INT 0
14653: PPUSH
14654: PPUSH
// begin PrepareSupportFromDelta ;
14655: CALL 4052 0 0
// deltaSupport := true ;
14659: LD_ADDR_EXP 5
14663: PUSH
14664: LD_INT 1
14666: ST_TO_ADDR
// dialog := false ;
14667: LD_ADDR_VAR 0 1
14671: PUSH
14672: LD_INT 0
14674: ST_TO_ADDR
// if IsOk ( Gladstone ) then
14675: LD_EXP 17
14679: PPUSH
14680: CALL_OW 302
14684: IFFALSE 14706
// dialog := Say ( Gladstone , D2-Glad-1 ) else
14686: LD_ADDR_VAR 0 1
14690: PUSH
14691: LD_EXP 17
14695: PPUSH
14696: LD_STRING D2-Glad-1
14698: PPUSH
14699: CALL_OW 88
14703: ST_TO_ADDR
14704: GO 14788
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
14706: LD_ADDR_VAR 0 1
14710: PUSH
14711: LD_INT 22
14713: PUSH
14714: LD_INT 1
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PUSH
14721: LD_INT 120
14723: PUSH
14724: LD_INT 107
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PUSH
14731: LD_INT 21
14733: PUSH
14734: LD_INT 1
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 23
14743: PUSH
14744: LD_INT 1
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: PPUSH
14757: CALL_OW 69
14761: PUSH
14762: LD_EXP 22
14766: PUSH
14767: LD_EXP 21
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: DIFF
14776: PPUSH
14777: LD_STRING D2-Sol1-1
14779: PPUSH
14780: LD_STRING D2-FSol1-1
14782: PPUSH
14783: CALL 18243 0 3
14787: ST_TO_ADDR
// if dialog then
14788: LD_VAR 0 1
14792: IFFALSE 14893
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
14794: LD_EXP 12
14798: PPUSH
14799: CALL_OW 302
14803: PUSH
14804: LD_EXP 9
14808: PUSH
14809: LD_INT 1
14811: EQUAL
14812: AND
14813: IFFALSE 14827
// Say ( Donaldson , D2-Don-1 ) ;
14815: LD_EXP 12
14819: PPUSH
14820: LD_STRING D2-Don-1
14822: PPUSH
14823: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
14827: LD_EXP 11
14831: PPUSH
14832: CALL_OW 302
14836: PUSH
14837: LD_EXP 9
14841: PUSH
14842: LD_INT 2
14844: EQUAL
14845: AND
14846: IFFALSE 14860
// Say ( Brown , D2-Brown-1 ) ;
14848: LD_EXP 11
14852: PPUSH
14853: LD_STRING D2-Brown-1
14855: PPUSH
14856: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
14860: LD_EXP 20
14864: PPUSH
14865: CALL_OW 302
14869: PUSH
14870: LD_EXP 9
14874: PUSH
14875: LD_INT 3
14877: EQUAL
14878: AND
14879: IFFALSE 14893
// Say ( Houten , D2-VanH-1 ) ;
14881: LD_EXP 20
14885: PPUSH
14886: LD_STRING D2-VanH-1
14888: PPUSH
14889: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
14893: LD_INT 3
14895: PPUSH
14896: CALL 11451 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
14900: LD_STRING 07_time
14902: PPUSH
14903: LD_INT 18900
14905: PPUSH
14906: CALL_OW 30
14910: PUSH
14911: LD_INT 3
14913: DIV
14914: PPUSH
14915: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
14919: LD_INT 34
14921: PPUSH
14922: LD_INT 1
14924: PPUSH
14925: CALL_OW 321
14929: PUSH
14930: LD_INT 2
14932: EQUAL
14933: IFFALSE 14942
// SetAchievement ( ACH_HEAVYGUN ) ;
14935: LD_STRING ACH_HEAVYGUN
14937: PPUSH
14938: CALL_OW 543
// PrepareMacmillanSquad ;
14942: CALL 4789 0 0
// CenterNowOnUnits ( JMM ) ;
14946: LD_EXP 10
14950: PPUSH
14951: CALL_OW 87
// wait ( 0 0$10 ) ;
14955: LD_INT 350
14957: PPUSH
14958: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
14962: LD_INT 1
14964: PPUSH
14965: CALL_OW 427
// p := 0 ;
14969: LD_ADDR_VAR 0 2
14973: PUSH
14974: LD_INT 0
14976: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14977: LD_INT 35
14979: PPUSH
14980: CALL_OW 67
// p := Inc ( p ) ;
14984: LD_ADDR_VAR 0 2
14988: PUSH
14989: LD_VAR 0 2
14993: PPUSH
14994: CALL 77272 0 1
14998: ST_TO_ADDR
// if p > 100 then
14999: LD_VAR 0 2
15003: PUSH
15004: LD_INT 100
15006: GREATER
15007: IFFALSE 15011
// exit ;
15009: GO 16234
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
15011: LD_EXP 10
15015: PPUSH
15016: LD_INT 15
15018: PPUSH
15019: CALL_OW 308
15023: PUSH
15024: LD_EXP 10
15028: PPUSH
15029: CALL_OW 310
15033: PPUSH
15034: LD_INT 15
15036: PPUSH
15037: CALL_OW 308
15041: OR
15042: PUSH
15043: LD_EXP 10
15047: PPUSH
15048: LD_EXP 22
15052: PPUSH
15053: CALL_OW 296
15057: PUSH
15058: LD_INT 10
15060: LESS
15061: OR
15062: PUSH
15063: LD_INT 22
15065: PUSH
15066: LD_INT 1
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: LD_INT 2
15075: PUSH
15076: LD_INT 120
15078: PUSH
15079: LD_INT 106
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: LD_INT 120
15088: PUSH
15089: LD_INT 107
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 91
15103: PUSH
15104: LD_EXP 10
15108: PUSH
15109: LD_INT 12
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: LIST
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: LIST
15121: PPUSH
15122: CALL_OW 69
15126: OR
15127: IFFALSE 14977
// DialogueOn ;
15129: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
15133: LD_EXP 10
15137: PPUSH
15138: LD_STRING D3-JMM-1
15140: PPUSH
15141: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
15145: LD_EXP 12
15149: PPUSH
15150: CALL_OW 302
15154: PUSH
15155: LD_EXP 9
15159: PUSH
15160: LD_INT 1
15162: EQUAL
15163: AND
15164: IFFALSE 15180
// Say ( Donaldson , D3-Don-1 ) else
15166: LD_EXP 12
15170: PPUSH
15171: LD_STRING D3-Don-1
15173: PPUSH
15174: CALL_OW 88
15178: GO 15276
// begin if gammaCommander = 1 then
15180: LD_EXP 9
15184: PUSH
15185: LD_INT 1
15187: EQUAL
15188: IFFALSE 15276
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
15190: LD_INT 22
15192: PUSH
15193: LD_INT 1
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PUSH
15200: LD_INT 21
15202: PUSH
15203: LD_INT 1
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: PUSH
15210: LD_INT 23
15212: PUSH
15213: LD_INT 1
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 120
15222: PUSH
15223: LD_INT 106
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 26
15232: PUSH
15233: LD_INT 1
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: PPUSH
15247: CALL_OW 69
15251: PPUSH
15252: LD_STRING D3-Sol1-1
15254: PPUSH
15255: LD_STRING 
15257: PPUSH
15258: CALL 18243 0 3
15262: IFFALSE 15276
// Say ( JMM , D3-JMM-2 ) ;
15264: LD_EXP 10
15268: PPUSH
15269: LD_STRING D3-JMM-2
15271: PPUSH
15272: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
15276: LD_EXP 11
15280: PPUSH
15281: CALL_OW 302
15285: PUSH
15286: LD_EXP 9
15290: PUSH
15291: LD_INT 2
15293: EQUAL
15294: AND
15295: IFFALSE 15311
// Say ( Brown , D3-Brown-1 ) else
15297: LD_EXP 11
15301: PPUSH
15302: LD_STRING D3-Brown-1
15304: PPUSH
15305: CALL_OW 88
15309: GO 15407
// begin if gammaCommander = 2 then
15311: LD_EXP 9
15315: PUSH
15316: LD_INT 2
15318: EQUAL
15319: IFFALSE 15407
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
15321: LD_INT 22
15323: PUSH
15324: LD_INT 1
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 21
15333: PUSH
15334: LD_INT 1
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 23
15343: PUSH
15344: LD_INT 1
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: LD_INT 120
15353: PUSH
15354: LD_INT 106
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 26
15363: PUSH
15364: LD_INT 1
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: PPUSH
15378: CALL_OW 69
15382: PPUSH
15383: LD_STRING D3-Sol1-1a
15385: PPUSH
15386: LD_STRING 
15388: PPUSH
15389: CALL 18243 0 3
15393: IFFALSE 15407
// Say ( JMM , D3-JMM-2 ) ;
15395: LD_EXP 10
15399: PPUSH
15400: LD_STRING D3-JMM-2
15402: PPUSH
15403: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
15407: LD_EXP 20
15411: PPUSH
15412: CALL_OW 302
15416: PUSH
15417: LD_EXP 9
15421: PUSH
15422: LD_INT 3
15424: EQUAL
15425: AND
15426: IFFALSE 15442
// Say ( Houten , D3-VanH-1 ) else
15428: LD_EXP 20
15432: PPUSH
15433: LD_STRING D3-VanH-1
15435: PPUSH
15436: CALL_OW 88
15440: GO 15538
// begin if gammaCommander = 3 then
15442: LD_EXP 9
15446: PUSH
15447: LD_INT 3
15449: EQUAL
15450: IFFALSE 15538
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
15452: LD_INT 22
15454: PUSH
15455: LD_INT 1
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: LD_INT 21
15464: PUSH
15465: LD_INT 1
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: LD_INT 23
15474: PUSH
15475: LD_INT 1
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 120
15484: PUSH
15485: LD_INT 106
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: LD_INT 26
15494: PUSH
15495: LD_INT 1
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: PPUSH
15509: CALL_OW 69
15513: PPUSH
15514: LD_STRING D3-Sol1-1b
15516: PPUSH
15517: LD_STRING 
15519: PPUSH
15520: CALL 18243 0 3
15524: IFFALSE 15538
// Say ( JMM , D3-JMM-2 ) ;
15526: LD_EXP 10
15530: PPUSH
15531: LD_STRING D3-JMM-2
15533: PPUSH
15534: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
15538: LD_EXP 22
15542: PPUSH
15543: CALL_OW 302
15547: IFFALSE 15575
// begin Say ( Joan , D3a-Joan-1 ) ;
15549: LD_EXP 22
15553: PPUSH
15554: LD_STRING D3a-Joan-1
15556: PPUSH
15557: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
15561: LD_EXP 10
15565: PPUSH
15566: LD_STRING D3a-JMM-1
15568: PPUSH
15569: CALL_OW 88
// end else
15573: GO 16009
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15575: LD_STRING 06_JoanStatus_1
15577: PPUSH
15578: LD_INT 0
15580: PPUSH
15581: CALL_OW 30
15585: PUSH
15586: LD_INT 1
15588: EQUAL
15589: IFFALSE 16009
// begin Say ( JMM , D3b-JMM-1 ) ;
15591: LD_EXP 10
15595: PPUSH
15596: LD_STRING D3b-JMM-1
15598: PPUSH
15599: CALL_OW 88
// dialog := false ;
15603: LD_ADDR_VAR 0 1
15607: PUSH
15608: LD_INT 0
15610: ST_TO_ADDR
// if gammaCommander = 1 then
15611: LD_EXP 9
15615: PUSH
15616: LD_INT 1
15618: EQUAL
15619: IFFALSE 15730
// if IsOK ( Donaldson ) then
15621: LD_EXP 12
15625: PPUSH
15626: CALL_OW 302
15630: IFFALSE 15652
// dialog := Say ( Donaldson , D3b-Don-1 ) else
15632: LD_ADDR_VAR 0 1
15636: PUSH
15637: LD_EXP 12
15641: PPUSH
15642: LD_STRING D3b-Don-1
15644: PPUSH
15645: CALL_OW 88
15649: ST_TO_ADDR
15650: GO 15730
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15652: LD_ADDR_VAR 0 1
15656: PUSH
15657: LD_INT 22
15659: PUSH
15660: LD_INT 1
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: LD_INT 21
15669: PUSH
15670: LD_INT 1
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 23
15679: PUSH
15680: LD_INT 1
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 120
15689: PUSH
15690: LD_INT 106
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: LD_INT 26
15699: PUSH
15700: LD_INT 1
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: PPUSH
15714: CALL_OW 69
15718: PPUSH
15719: LD_STRING D3b-Sol1-1
15721: PPUSH
15722: LD_STRING 
15724: PPUSH
15725: CALL 18243 0 3
15729: ST_TO_ADDR
// if gammaCommander = 2 then
15730: LD_EXP 9
15734: PUSH
15735: LD_INT 2
15737: EQUAL
15738: IFFALSE 15849
// if IsOk ( Brown ) then
15740: LD_EXP 11
15744: PPUSH
15745: CALL_OW 302
15749: IFFALSE 15771
// dialog := Say ( Brown , D3b-Brown-1 ) else
15751: LD_ADDR_VAR 0 1
15755: PUSH
15756: LD_EXP 11
15760: PPUSH
15761: LD_STRING D3b-Brown-1
15763: PPUSH
15764: CALL_OW 88
15768: ST_TO_ADDR
15769: GO 15849
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15771: LD_ADDR_VAR 0 1
15775: PUSH
15776: LD_INT 22
15778: PUSH
15779: LD_INT 1
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 21
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 23
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 120
15808: PUSH
15809: LD_INT 106
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 26
15818: PUSH
15819: LD_INT 1
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: PPUSH
15833: CALL_OW 69
15837: PPUSH
15838: LD_STRING D3b-Sol1-1
15840: PPUSH
15841: LD_STRING 
15843: PPUSH
15844: CALL 18243 0 3
15848: ST_TO_ADDR
// if gammaCommander = 3 then
15849: LD_EXP 9
15853: PUSH
15854: LD_INT 3
15856: EQUAL
15857: IFFALSE 15968
// if IsOk ( Houten ) then
15859: LD_EXP 20
15863: PPUSH
15864: CALL_OW 302
15868: IFFALSE 15890
// dialog := Say ( Houten , D3b-VanH-1 ) else
15870: LD_ADDR_VAR 0 1
15874: PUSH
15875: LD_EXP 20
15879: PPUSH
15880: LD_STRING D3b-VanH-1
15882: PPUSH
15883: CALL_OW 88
15887: ST_TO_ADDR
15888: GO 15968
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15890: LD_ADDR_VAR 0 1
15894: PUSH
15895: LD_INT 22
15897: PUSH
15898: LD_INT 1
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PUSH
15905: LD_INT 21
15907: PUSH
15908: LD_INT 1
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: LD_INT 23
15917: PUSH
15918: LD_INT 1
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 120
15927: PUSH
15928: LD_INT 106
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: LD_INT 26
15937: PUSH
15938: LD_INT 1
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: PPUSH
15952: CALL_OW 69
15956: PPUSH
15957: LD_STRING D3b-Sol1-1
15959: PPUSH
15960: LD_STRING 
15962: PPUSH
15963: CALL 18243 0 3
15967: ST_TO_ADDR
// if dialog then
15968: LD_VAR 0 1
15972: IFFALSE 16009
// begin Say ( JMM , D3b-JMM-2 ) ;
15974: LD_EXP 10
15978: PPUSH
15979: LD_STRING D3b-JMM-2
15981: PPUSH
15982: CALL_OW 88
// if IsOK ( Lisa ) then
15986: LD_EXP 15
15990: PPUSH
15991: CALL_OW 302
15995: IFFALSE 16009
// Say ( Lisa , D3b-Lisa-2 ) ;
15997: LD_EXP 15
16001: PPUSH
16002: LD_STRING D3b-Lisa-2
16004: PPUSH
16005: CALL_OW 88
// end ; end ; end ; if not seenComputer then
16009: LD_EXP 6
16013: NOT
16014: IFFALSE 16022
// begin DialogueOff ;
16016: CALL_OW 7
// exit ;
16020: GO 16234
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
16022: LD_INT 22
16024: PUSH
16025: LD_INT 1
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 21
16034: PUSH
16035: LD_INT 1
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: LD_INT 23
16044: PUSH
16045: LD_INT 1
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: LD_INT 2
16054: PUSH
16055: LD_INT 120
16057: PUSH
16058: LD_INT 106
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: LD_INT 120
16067: PUSH
16068: LD_INT 107
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 26
16082: PUSH
16083: LD_INT 1
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: PPUSH
16097: CALL_OW 69
16101: PPUSH
16102: LD_STRING DCa-Sol1-1
16104: PPUSH
16105: LD_STRING 
16107: PPUSH
16108: CALL 18243 0 3
16112: IFFALSE 16126
// Say ( JMM , DCb-JMM-1 ) ;
16114: LD_EXP 10
16118: PPUSH
16119: LD_STRING DCb-JMM-1
16121: PPUSH
16122: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
16126: LD_INT 22
16128: PUSH
16129: LD_INT 1
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PUSH
16136: LD_INT 21
16138: PUSH
16139: LD_INT 1
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: PUSH
16146: LD_INT 23
16148: PUSH
16149: LD_INT 1
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 2
16158: PUSH
16159: LD_INT 120
16161: PUSH
16162: LD_INT 106
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 120
16171: PUSH
16172: LD_INT 107
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 26
16186: PUSH
16187: LD_INT 1
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: PPUSH
16201: CALL_OW 69
16205: PPUSH
16206: LD_STRING DCb-Sol1-1
16208: PPUSH
16209: LD_STRING 
16211: PPUSH
16212: CALL 18243 0 3
16216: IFFALSE 16230
// Say ( JMM , DCb-JMM-2 ) ;
16218: LD_EXP 10
16222: PPUSH
16223: LD_STRING DCb-JMM-2
16225: PPUSH
16226: CALL_OW 88
// DialogueOff ;
16230: CALL_OW 7
// end ;
16234: PPOPN 2
16236: END
// export function DialogSeenComputer ( un ) ; begin
16237: LD_INT 0
16239: PPUSH
// if jmmArrival then
16240: LD_EXP 7
16244: IFFALSE 16248
// exit ;
16246: GO 16314
// CenterOnUnits ( un ) ;
16248: LD_VAR 0 1
16252: PPUSH
16253: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
16257: LD_INT 22
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 2
16269: PUSH
16270: LD_INT 120
16272: PUSH
16273: LD_INT 106
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 120
16282: PUSH
16283: LD_INT 107
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: LIST
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PPUSH
16299: CALL_OW 69
16303: PPUSH
16304: LD_STRING DC-Sol1-1
16306: PPUSH
16307: LD_STRING DC-FSol1-1
16309: PPUSH
16310: CALL 18243 0 3
// end ;
16314: LD_VAR 0 2
16318: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
16319: LD_EXP 7
16323: PUSH
16324: LD_OWVAR 1
16328: PUSH
16329: LD_INT 48300
16331: GREATEREQUAL
16332: AND
16333: PUSH
16334: LD_EXP 10
16338: PPUSH
16339: CALL_OW 302
16343: AND
16344: IFFALSE 16694
16346: GO 16348
16348: DISABLE
// begin wait ( 2 2$00 ) ;
16349: LD_INT 4200
16351: PPUSH
16352: CALL_OW 67
// DialogueOn ;
16356: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
16360: LD_EXP 25
16364: PPUSH
16365: LD_STRING D4-Pow-1
16367: PPUSH
16368: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
16372: LD_EXP 10
16376: PPUSH
16377: LD_STRING D4-JMM-1
16379: PPUSH
16380: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
16384: LD_EXP 25
16388: PPUSH
16389: LD_STRING D4-Pow-2
16391: PPUSH
16392: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
16396: LD_EXP 10
16400: PPUSH
16401: LD_STRING D4-JMM-2
16403: PPUSH
16404: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
16408: LD_EXP 25
16412: PPUSH
16413: LD_STRING D4-Pow-3
16415: PPUSH
16416: CALL_OW 94
// DialogueOff ;
16420: CALL_OW 7
// wait ( 1 1$00 ) ;
16424: LD_INT 2100
16426: PPUSH
16427: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16431: LD_INT 1
16433: PPUSH
16434: CALL_OW 427
// wait ( 7 7$30 ) ;
16438: LD_INT 15750
16440: PPUSH
16441: CALL_OW 67
// DialogueOn ;
16445: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
16449: LD_EXP 25
16453: PPUSH
16454: LD_STRING D4a-Pow-1
16456: PPUSH
16457: CALL_OW 94
// DialogueOff ;
16461: CALL_OW 7
// SikorskiCounter ;
16465: CALL 18027 0 0
// PrepareSikorsky ;
16469: CALL 6211 0 0
// CenterNowOnUnits ( Sikorski ) ;
16473: LD_EXP 23
16477: PPUSH
16478: CALL_OW 87
// DialogueOn ;
16482: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
16486: LD_EXP 23
16490: PPUSH
16491: LD_STRING D5-Sik-1
16493: PPUSH
16494: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
16498: LD_EXP 10
16502: PPUSH
16503: LD_STRING D5-JMM-1a
16505: PPUSH
16506: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
16510: LD_EXP 23
16514: PPUSH
16515: LD_STRING D5-Sik-2
16517: PPUSH
16518: CALL_OW 88
// case Query ( QSikorski ) of 1 :
16522: LD_STRING QSikorski
16524: PPUSH
16525: CALL_OW 97
16529: PUSH
16530: LD_INT 1
16532: DOUBLE
16533: EQUAL
16534: IFTRUE 16538
16536: GO 16561
16538: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
16539: LD_EXP 23
16543: PPUSH
16544: LD_STRING D5a-Sik-1
16546: PPUSH
16547: CALL_OW 88
// sikorskiWait := 1 1$00 ;
16551: LD_ADDR_EXP 4
16555: PUSH
16556: LD_INT 2100
16558: ST_TO_ADDR
// end ; 2 :
16559: GO 16648
16561: LD_INT 2
16563: DOUBLE
16564: EQUAL
16565: IFTRUE 16569
16567: GO 16592
16569: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
16570: LD_EXP 23
16574: PPUSH
16575: LD_STRING D5b-Sik-1
16577: PPUSH
16578: CALL_OW 88
// sikorskiWait := 5 5$00 ;
16582: LD_ADDR_EXP 4
16586: PUSH
16587: LD_INT 10500
16589: ST_TO_ADDR
// end ; 3 :
16590: GO 16648
16592: LD_INT 3
16594: DOUBLE
16595: EQUAL
16596: IFTRUE 16600
16598: GO 16647
16600: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
16601: LD_EXP 23
16605: PPUSH
16606: LD_STRING D5c-Sik-1
16608: PPUSH
16609: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
16613: LD_EXP 10
16617: PPUSH
16618: LD_STRING D5c-JMM-1
16620: PPUSH
16621: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
16625: LD_EXP 23
16629: PPUSH
16630: LD_STRING D5c-Sik-2
16632: PPUSH
16633: CALL_OW 88
// sikorskiWait := 5 5$00 ;
16637: LD_ADDR_EXP 4
16641: PUSH
16642: LD_INT 10500
16644: ST_TO_ADDR
// end ; end ;
16645: GO 16648
16647: POP
// DialogueOff ;
16648: CALL_OW 7
// SikorskiWaitCounter ;
16652: CALL 18090 0 0
// DialogueOn ;
16656: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
16660: LD_EXP 23
16664: PPUSH
16665: LD_STRING D6-Sik-1
16667: PPUSH
16668: CALL_OW 88
// DialogueOff ;
16672: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
16676: LD_STRING M2
16678: PPUSH
16679: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
16683: LD_INT 1
16685: PPUSH
16686: CALL_OW 427
// SikorskiAttack ;
16690: CALL 7539 0 0
// end ;
16694: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
16695: LD_INT 11
16697: PPUSH
16698: LD_INT 22
16700: PUSH
16701: LD_INT 4
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PPUSH
16708: CALL_OW 70
16712: PUSH
16713: LD_INT 2
16715: GREATER
16716: IFFALSE 16909
16718: GO 16720
16720: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
16721: LD_EXP 23
16725: PPUSH
16726: LD_STRING D7-Sik-1
16728: PPUSH
16729: CALL_OW 88
// wait ( 0 0$10 ) ;
16733: LD_INT 350
16735: PPUSH
16736: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
16740: LD_EXP 10
16744: PPUSH
16745: LD_INT 11
16747: PPUSH
16748: CALL_OW 308
16752: PUSH
16753: LD_EXP 10
16757: PPUSH
16758: CALL_OW 310
16762: PPUSH
16763: LD_INT 11
16765: PPUSH
16766: CALL_OW 308
16770: OR
16771: IFFALSE 16795
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16773: LD_EXP 23
16777: PPUSH
16778: LD_STRING D7a-Sik-1
16780: PPUSH
16781: CALL_OW 88
// sikorskiStatus := 1 ;
16785: LD_ADDR_EXP 8
16789: PUSH
16790: LD_INT 1
16792: ST_TO_ADDR
// end else
16793: GO 16815
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16795: LD_EXP 23
16799: PPUSH
16800: LD_STRING D7b-Sik-1
16802: PPUSH
16803: CALL_OW 88
// sikorskiStatus := 0 ;
16807: LD_ADDR_EXP 8
16811: PUSH
16812: LD_INT 0
16814: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
16815: LD_INT 1575
16817: PPUSH
16818: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
16822: LD_EXP 10
16826: PPUSH
16827: LD_INT 11
16829: PPUSH
16830: CALL_OW 308
16834: PUSH
16835: LD_EXP 10
16839: PPUSH
16840: CALL_OW 310
16844: PPUSH
16845: LD_INT 11
16847: PPUSH
16848: CALL_OW 308
16852: OR
16853: PUSH
16854: LD_EXP 10
16858: PPUSH
16859: CALL_OW 302
16863: NOT
16864: OR
16865: IFFALSE 16889
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16867: LD_EXP 23
16871: PPUSH
16872: LD_STRING D7a-Sik-1
16874: PPUSH
16875: CALL_OW 88
// sikorskiStatus := 1 ;
16879: LD_ADDR_EXP 8
16883: PUSH
16884: LD_INT 1
16886: ST_TO_ADDR
// end else
16887: GO 16909
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16889: LD_EXP 23
16893: PPUSH
16894: LD_STRING D7b-Sik-1
16896: PPUSH
16897: CALL_OW 88
// sikorskiStatus := 0 ;
16901: LD_ADDR_EXP 8
16905: PUSH
16906: LD_INT 0
16908: ST_TO_ADDR
// end ; end ;
16909: END
// export function SikorskiKilledInAction ; begin
16910: LD_INT 0
16912: PPUSH
// wait ( 0 0$2 ) ;
16913: LD_INT 70
16915: PPUSH
16916: CALL_OW 67
// DialogueOn ;
16920: CALL_OW 6
// dwait ( 0 0$1 ) ;
16924: LD_INT 35
16926: PPUSH
16927: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
16931: LD_EXP 25
16935: PPUSH
16936: LD_STRING D8b-Pow-1
16938: PPUSH
16939: CALL_OW 94
// YouLost ( Dismissed ) ;
16943: LD_STRING Dismissed
16945: PPUSH
16946: CALL_OW 104
// DialogueOff ;
16950: CALL_OW 7
// end ;
16954: LD_VAR 0 1
16958: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
16959: LD_EXP 7
16963: PUSH
16964: LD_INT 28
16966: PPUSH
16967: CALL_OW 301
16971: AND
16972: PUSH
16973: LD_EXP 27
16977: PPUSH
16978: CALL_OW 301
16982: AND
16983: PUSH
16984: LD_INT 22
16986: PUSH
16987: LD_INT 3
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 30
16996: PUSH
16997: LD_INT 5
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PPUSH
17008: CALL_OW 69
17012: PUSH
17013: LD_INT 0
17015: EQUAL
17016: AND
17017: IFFALSE 18024
17019: GO 17021
17021: DISABLE
17022: LD_INT 0
17024: PPUSH
17025: PPUSH
17026: PPUSH
// begin Video ( true ) ;
17027: LD_INT 1
17029: PPUSH
17030: CALL 75881 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
17034: LD_INT 104
17036: PPUSH
17037: LD_INT 108
17039: PPUSH
17040: LD_INT 1
17042: PPUSH
17043: LD_INT 36
17045: NEG
17046: PPUSH
17047: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
17051: LD_INT 104
17053: PPUSH
17054: LD_INT 108
17056: PPUSH
17057: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
17061: LD_ADDR_VAR 0 2
17065: PUSH
17066: LD_INT 22
17068: PUSH
17069: LD_INT 1
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 21
17078: PUSH
17079: LD_INT 1
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: LD_INT 3
17088: PUSH
17089: LD_INT 24
17091: PUSH
17092: LD_INT 249
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: LIST
17107: PPUSH
17108: CALL_OW 69
17112: ST_TO_ADDR
// if tmp then
17113: LD_VAR 0 2
17117: IFFALSE 17148
// for i in tmp do
17119: LD_ADDR_VAR 0 1
17123: PUSH
17124: LD_VAR 0 2
17128: PUSH
17129: FOR_IN
17130: IFFALSE 17146
// SetLives ( i , 249 ) ;
17132: LD_VAR 0 1
17136: PPUSH
17137: LD_INT 249
17139: PPUSH
17140: CALL_OW 234
17144: GO 17129
17146: POP
17147: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
17148: LD_ADDR_VAR 0 1
17152: PUSH
17153: LD_INT 22
17155: PUSH
17156: LD_INT 3
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: PUSH
17163: LD_INT 21
17165: PUSH
17166: LD_INT 1
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PPUSH
17177: CALL_OW 69
17181: PUSH
17182: FOR_IN
17183: IFFALSE 17226
// begin ComExit ( i ) ;
17185: LD_VAR 0 1
17189: PPUSH
17190: CALL 76307 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
17194: LD_VAR 0 1
17198: PPUSH
17199: LD_INT 131
17201: PPUSH
17202: LD_INT 127
17204: PPUSH
17205: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
17209: LD_VAR 0 1
17213: PPUSH
17214: LD_INT 141
17216: PPUSH
17217: LD_INT 147
17219: PPUSH
17220: CALL_OW 171
// end ;
17224: GO 17182
17226: POP
17227: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
17228: LD_INT 81
17230: PUSH
17231: LD_INT 3
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: PUSH
17238: LD_INT 3
17240: PUSH
17241: LD_INT 21
17243: PUSH
17244: LD_INT 3
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PPUSH
17259: CALL_OW 69
17263: PPUSH
17264: LD_INT 131
17266: PPUSH
17267: LD_INT 127
17269: PPUSH
17270: CALL_OW 174
// wait ( 0 0$08 ) ;
17274: LD_INT 280
17276: PPUSH
17277: CALL_OW 67
// DialogueOn ;
17281: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
17285: LD_EXP 8
17289: PUSH
17290: LD_INT 1
17292: EQUAL
17293: PUSH
17294: LD_EXP 23
17298: PPUSH
17299: CALL_OW 302
17303: AND
17304: IFFALSE 17318
// Say ( Sikorski , D9-Sik-1 ) ;
17306: LD_EXP 23
17310: PPUSH
17311: LD_STRING D9-Sik-1
17313: PPUSH
17314: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
17318: LD_INT 22
17320: PUSH
17321: LD_INT 4
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PPUSH
17328: CALL_OW 69
17332: PUSH
17333: LD_INT 0
17335: EQUAL
17336: PUSH
17337: LD_EXP 3
17341: AND
17342: IFFALSE 17351
// SetAchievement ( ACH_BLITZKRIEG ) ;
17344: LD_STRING ACH_BLITZKRIEG
17346: PPUSH
17347: CALL_OW 543
// if tick <= 25 25$08 then
17351: LD_OWVAR 1
17355: PUSH
17356: LD_INT 52780
17358: LESSEQUAL
17359: IFFALSE 17375
// begin wait ( 3 ) ;
17361: LD_INT 3
17363: PPUSH
17364: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
17368: LD_STRING ACH_ASPEED_8
17370: PPUSH
17371: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
17375: LD_STRING med1
17377: PPUSH
17378: LD_INT 1
17380: PPUSH
17381: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
17385: LD_STRING med2
17387: PPUSH
17388: LD_INT 1
17390: PPUSH
17391: CALL_OW 101
// if sikorskiStatus = 1 then
17395: LD_EXP 8
17399: PUSH
17400: LD_INT 1
17402: EQUAL
17403: IFFALSE 17417
// AddMedal ( perfect , 1 ) else
17405: LD_STRING perfect
17407: PPUSH
17408: LD_INT 1
17410: PPUSH
17411: CALL_OW 101
17415: GO 17428
// AddMedal ( perfect , - 1 ) ;
17417: LD_STRING perfect
17419: PPUSH
17420: LD_INT 1
17422: NEG
17423: PPUSH
17424: CALL_OW 101
// if Difficulty >= 3 then
17428: LD_OWVAR 67
17432: PUSH
17433: LD_INT 3
17435: GREATEREQUAL
17436: IFFALSE 17448
// SetAchievementEX ( ACH_AMER , 8 ) ;
17438: LD_STRING ACH_AMER
17440: PPUSH
17441: LD_INT 8
17443: PPUSH
17444: CALL_OW 564
// GiveMedals ( Main ) ;
17448: LD_STRING Main
17450: PPUSH
17451: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
17455: LD_INT 22
17457: PUSH
17458: LD_INT 1
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 23
17467: PUSH
17468: LD_INT 1
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 21
17477: PUSH
17478: LD_INT 1
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: LIST
17489: PPUSH
17490: CALL_OW 69
17494: PPUSH
17495: CALL_OW 43
// prefix := 08_ ;
17499: LD_ADDR_VAR 0 3
17503: PUSH
17504: LD_STRING 08_
17506: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
17507: LD_EXP 10
17511: PPUSH
17512: LD_VAR 0 3
17516: PUSH
17517: LD_STRING JMM
17519: STR
17520: PPUSH
17521: CALL_OW 38
// if IsLive ( Brown ) then
17525: LD_EXP 11
17529: PPUSH
17530: CALL_OW 300
17534: IFFALSE 17554
// SaveCharacters ( Brown , prefix & Brown ) ;
17536: LD_EXP 11
17540: PPUSH
17541: LD_VAR 0 3
17545: PUSH
17546: LD_STRING Brown
17548: STR
17549: PPUSH
17550: CALL_OW 38
// if IsLive ( Donaldson ) then
17554: LD_EXP 12
17558: PPUSH
17559: CALL_OW 300
17563: IFFALSE 17583
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
17565: LD_EXP 12
17569: PPUSH
17570: LD_VAR 0 3
17574: PUSH
17575: LD_STRING Donaldson
17577: STR
17578: PPUSH
17579: CALL_OW 38
// if IsLive ( Bobby ) then
17583: LD_EXP 13
17587: PPUSH
17588: CALL_OW 300
17592: IFFALSE 17612
// SaveCharacters ( Bobby , prefix & Bobby ) ;
17594: LD_EXP 13
17598: PPUSH
17599: LD_VAR 0 3
17603: PUSH
17604: LD_STRING Bobby
17606: STR
17607: PPUSH
17608: CALL_OW 38
// if IsLive ( Cyrus ) then
17612: LD_EXP 14
17616: PPUSH
17617: CALL_OW 300
17621: IFFALSE 17641
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
17623: LD_EXP 14
17627: PPUSH
17628: LD_VAR 0 3
17632: PUSH
17633: LD_STRING Cyrus
17635: STR
17636: PPUSH
17637: CALL_OW 38
// if IsLive ( Lisa ) then
17641: LD_EXP 15
17645: PPUSH
17646: CALL_OW 300
17650: IFFALSE 17670
// SaveCharacters ( Lisa , prefix & Lisa ) ;
17652: LD_EXP 15
17656: PPUSH
17657: LD_VAR 0 3
17661: PUSH
17662: LD_STRING Lisa
17664: STR
17665: PPUSH
17666: CALL_OW 38
// if IsLive ( Frank ) then
17670: LD_EXP 16
17674: PPUSH
17675: CALL_OW 300
17679: IFFALSE 17699
// SaveCharacters ( Frank , prefix & Frank ) ;
17681: LD_EXP 16
17685: PPUSH
17686: LD_VAR 0 3
17690: PUSH
17691: LD_STRING Frank
17693: STR
17694: PPUSH
17695: CALL_OW 38
// if IsLive ( Gladstone ) then
17699: LD_EXP 17
17703: PPUSH
17704: CALL_OW 300
17708: IFFALSE 17728
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
17710: LD_EXP 17
17714: PPUSH
17715: LD_VAR 0 3
17719: PUSH
17720: LD_STRING Gladstone
17722: STR
17723: PPUSH
17724: CALL_OW 38
// if IsLive ( Kikuchi ) then
17728: LD_EXP 18
17732: PPUSH
17733: CALL_OW 300
17737: IFFALSE 17757
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
17739: LD_EXP 18
17743: PPUSH
17744: LD_VAR 0 3
17748: PUSH
17749: LD_STRING Kikuchi
17751: STR
17752: PPUSH
17753: CALL_OW 38
// if IsLive ( Denis ) then
17757: LD_EXP 21
17761: PPUSH
17762: CALL_OW 300
17766: IFFALSE 17786
// SaveCharacters ( Denis , prefix & Denis ) ;
17768: LD_EXP 21
17772: PPUSH
17773: LD_VAR 0 3
17777: PUSH
17778: LD_STRING Denis
17780: STR
17781: PPUSH
17782: CALL_OW 38
// if IsLive ( Joan ) then
17786: LD_EXP 22
17790: PPUSH
17791: CALL_OW 300
17795: IFFALSE 17815
// SaveCharacters ( Joan , prefix & Joan ) ;
17797: LD_EXP 22
17801: PPUSH
17802: LD_VAR 0 3
17806: PUSH
17807: LD_STRING Joan
17809: STR
17810: PPUSH
17811: CALL_OW 38
// if IsLive ( Khatam ) then
17815: LD_EXP 19
17819: PPUSH
17820: CALL_OW 300
17824: IFFALSE 17844
// SaveCharacters ( Khatam , prefix & Khatam ) ;
17826: LD_EXP 19
17830: PPUSH
17831: LD_VAR 0 3
17835: PUSH
17836: LD_STRING Khatam
17838: STR
17839: PPUSH
17840: CALL_OW 38
// if IsLive ( Houten ) then
17844: LD_EXP 20
17848: PPUSH
17849: CALL_OW 300
17853: IFFALSE 17873
// SaveCharacters ( Houten , prefix & Houten ) ;
17855: LD_EXP 20
17859: PPUSH
17860: LD_VAR 0 3
17864: PUSH
17865: LD_STRING Houten
17867: STR
17868: PPUSH
17869: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
17873: LD_INT 22
17875: PUSH
17876: LD_INT 1
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 21
17885: PUSH
17886: LD_INT 1
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PUSH
17893: LD_INT 23
17895: PUSH
17896: LD_INT 1
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: LIST
17907: PPUSH
17908: CALL_OW 69
17912: PUSH
17913: LD_EXP 10
17917: PUSH
17918: LD_EXP 11
17922: PUSH
17923: LD_EXP 12
17927: PUSH
17928: LD_EXP 13
17932: PUSH
17933: LD_EXP 14
17937: PUSH
17938: LD_EXP 15
17942: PUSH
17943: LD_EXP 16
17947: PUSH
17948: LD_EXP 17
17952: PUSH
17953: LD_EXP 18
17957: PUSH
17958: LD_EXP 21
17962: PUSH
17963: LD_EXP 22
17967: PUSH
17968: LD_EXP 20
17972: PUSH
17973: LD_EXP 19
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: DIFF
17993: PPUSH
17994: LD_STRING 08_other_survivors
17996: PPUSH
17997: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
18001: LD_INT 15
18003: PPUSH
18004: CALL 7013 0 1
// SaveVariable ( sikorskiStatus , 08_SikorskiStatus ) ;
18008: LD_EXP 8
18012: PPUSH
18013: LD_STRING 08_SikorskiStatus
18015: PPUSH
18016: CALL_OW 39
// YouWin ;
18020: CALL_OW 103
// end ; end_of_file
18024: PPOPN 3
18026: END
// export function SikorskiCounter ; begin
18027: LD_INT 0
18029: PPUSH
// repeat wait ( 0 0$1 ) ;
18030: LD_INT 35
18032: PPUSH
18033: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
18037: LD_ADDR_OWVAR 47
18041: PUSH
18042: LD_STRING #Am08-2
18044: PUSH
18045: LD_EXP 3
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
18054: LD_ADDR_EXP 3
18058: PUSH
18059: LD_EXP 3
18063: PUSH
18064: LD_INT 35
18066: MINUS
18067: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
18068: LD_EXP 3
18072: PUSH
18073: LD_INT 0
18075: EQUAL
18076: IFFALSE 18030
// display_strings := [ ] ;
18078: LD_ADDR_OWVAR 47
18082: PUSH
18083: EMPTY
18084: ST_TO_ADDR
// end ;
18085: LD_VAR 0 1
18089: RET
// export function SikorskiWaitCounter ; begin
18090: LD_INT 0
18092: PPUSH
// repeat wait ( 0 0$1 ) ;
18093: LD_INT 35
18095: PPUSH
18096: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
18100: LD_ADDR_OWVAR 47
18104: PUSH
18105: LD_STRING #Am08-1
18107: PUSH
18108: LD_EXP 4
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
18117: LD_ADDR_EXP 4
18121: PUSH
18122: LD_EXP 4
18126: PUSH
18127: LD_INT 35
18129: MINUS
18130: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
18131: LD_EXP 4
18135: PUSH
18136: LD_INT 0
18138: EQUAL
18139: IFFALSE 18093
// display_strings := [ ] ;
18141: LD_ADDR_OWVAR 47
18145: PUSH
18146: EMPTY
18147: ST_TO_ADDR
// end ; end_of_file
18148: LD_VAR 0 1
18152: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
18153: LD_EXP 3
18157: IFFALSE 18197
18159: GO 18161
18161: DISABLE
// begin enable ;
18162: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
18163: LD_INT 14
18165: PPUSH
18166: CALL_OW 435
18170: PUSH
18171: LD_INT 10
18173: LESS
18174: IFFALSE 18197
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
18176: LD_INT 1
18178: PPUSH
18179: LD_INT 5
18181: PPUSH
18182: CALL_OW 12
18186: PPUSH
18187: LD_INT 14
18189: PPUSH
18190: LD_INT 1
18192: PPUSH
18193: CALL_OW 55
// end ;
18197: END
// every 0 0$55 trigger sikorskiArriveCounter do
18198: LD_EXP 3
18202: IFFALSE 18242
18204: GO 18206
18206: DISABLE
// begin enable ;
18207: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
18208: LD_INT 13
18210: PPUSH
18211: CALL_OW 435
18215: PUSH
18216: LD_INT 10
18218: LESS
18219: IFFALSE 18242
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
18221: LD_INT 1
18223: PPUSH
18224: LD_INT 5
18226: PPUSH
18227: CALL_OW 12
18231: PPUSH
18232: LD_INT 13
18234: PPUSH
18235: LD_INT 1
18237: PPUSH
18238: CALL_OW 55
// end ; end_of_file
18242: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
18243: LD_INT 0
18245: PPUSH
18246: PPUSH
// if not units then
18247: LD_VAR 0 1
18251: NOT
18252: IFFALSE 18256
// exit ;
18254: GO 18381
// result := false ;
18256: LD_ADDR_VAR 0 4
18260: PUSH
18261: LD_INT 0
18263: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
18264: LD_ADDR_VAR 0 5
18268: PUSH
18269: LD_VAR 0 1
18273: PPUSH
18274: LD_INT 26
18276: PUSH
18277: LD_INT 1
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PPUSH
18284: CALL_OW 72
18288: ST_TO_ADDR
// if tmp then
18289: LD_VAR 0 5
18293: IFFALSE 18319
// result := Say ( tmp [ 1 ] , menDialog ) ;
18295: LD_ADDR_VAR 0 4
18299: PUSH
18300: LD_VAR 0 5
18304: PUSH
18305: LD_INT 1
18307: ARRAY
18308: PPUSH
18309: LD_VAR 0 2
18313: PPUSH
18314: CALL_OW 88
18318: ST_TO_ADDR
// if not result then
18319: LD_VAR 0 4
18323: NOT
18324: IFFALSE 18381
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
18326: LD_ADDR_VAR 0 5
18330: PUSH
18331: LD_VAR 0 1
18335: PPUSH
18336: LD_INT 26
18338: PUSH
18339: LD_INT 2
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PPUSH
18346: CALL_OW 72
18350: ST_TO_ADDR
// if tmp then
18351: LD_VAR 0 5
18355: IFFALSE 18381
// result := Say ( tmp [ 1 ] , womenDialog ) ;
18357: LD_ADDR_VAR 0 4
18361: PUSH
18362: LD_VAR 0 5
18366: PUSH
18367: LD_INT 1
18369: ARRAY
18370: PPUSH
18371: LD_VAR 0 3
18375: PPUSH
18376: CALL_OW 88
18380: ST_TO_ADDR
// end ; end ; end_of_file
18381: LD_VAR 0 4
18385: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
18386: LD_INT 0
18388: PPUSH
// ar_miner := 81 ;
18389: LD_ADDR_EXP 39
18393: PUSH
18394: LD_INT 81
18396: ST_TO_ADDR
// ar_crane := 88 ;
18397: LD_ADDR_EXP 38
18401: PUSH
18402: LD_INT 88
18404: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18405: LD_ADDR_EXP 33
18409: PUSH
18410: LD_INT 89
18412: ST_TO_ADDR
// us_hack := 99 ;
18413: LD_ADDR_EXP 34
18417: PUSH
18418: LD_INT 99
18420: ST_TO_ADDR
// us_artillery := 97 ;
18421: LD_ADDR_EXP 35
18425: PUSH
18426: LD_INT 97
18428: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18429: LD_ADDR_EXP 36
18433: PUSH
18434: LD_INT 91
18436: ST_TO_ADDR
// ar_mortar := 92 ;
18437: LD_ADDR_EXP 37
18441: PUSH
18442: LD_INT 92
18444: ST_TO_ADDR
// ru_flamethrower := 93 ;
18445: LD_ADDR_EXP 40
18449: PUSH
18450: LD_INT 93
18452: ST_TO_ADDR
// ru_radar := 98 ;
18453: LD_ADDR_EXP 32
18457: PUSH
18458: LD_INT 98
18460: ST_TO_ADDR
// tech_Artillery := 80 ;
18461: LD_ADDR_EXP 41
18465: PUSH
18466: LD_INT 80
18468: ST_TO_ADDR
// tech_RadMat := 81 ;
18469: LD_ADDR_EXP 42
18473: PUSH
18474: LD_INT 81
18476: ST_TO_ADDR
// tech_BasicTools := 82 ;
18477: LD_ADDR_EXP 43
18481: PUSH
18482: LD_INT 82
18484: ST_TO_ADDR
// tech_Cargo := 83 ;
18485: LD_ADDR_EXP 44
18489: PUSH
18490: LD_INT 83
18492: ST_TO_ADDR
// tech_Track := 84 ;
18493: LD_ADDR_EXP 45
18497: PUSH
18498: LD_INT 84
18500: ST_TO_ADDR
// tech_Crane := 85 ;
18501: LD_ADDR_EXP 46
18505: PUSH
18506: LD_INT 85
18508: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18509: LD_ADDR_EXP 47
18513: PUSH
18514: LD_INT 86
18516: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18517: LD_ADDR_EXP 48
18521: PUSH
18522: LD_INT 87
18524: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18525: LD_ADDR_EXP 49
18529: PUSH
18530: LD_INT 88
18532: ST_TO_ADDR
// end ;
18533: LD_VAR 0 1
18537: RET
// every 1 do
18538: GO 18540
18540: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18541: CALL 18386 0 0
18545: END
// every 0 0$1 do
18546: GO 18548
18548: DISABLE
// begin enable ;
18549: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18550: LD_STRING updateTimer(
18552: PUSH
18553: LD_OWVAR 1
18557: STR
18558: PUSH
18559: LD_STRING );
18561: STR
18562: PPUSH
18563: CALL_OW 559
// end ;
18567: END
// export function SOS_MapStart ( ) ; begin
18568: LD_INT 0
18570: PPUSH
// if streamModeActive then
18571: LD_EXP 50
18575: IFFALSE 18584
// DefineStreamItems ( true ) ;
18577: LD_INT 1
18579: PPUSH
18580: CALL 20238 0 1
// UpdateFactoryWaypoints ( ) ;
18584: CALL 33099 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18588: CALL 33356 0 0
// end ;
18592: LD_VAR 0 1
18596: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18597: LD_INT 0
18599: PPUSH
// if p2 = 100 then
18600: LD_VAR 0 2
18604: PUSH
18605: LD_INT 100
18607: EQUAL
18608: IFFALSE 19611
// begin if not StreamModeActive then
18610: LD_EXP 50
18614: NOT
18615: IFFALSE 18625
// StreamModeActive := true ;
18617: LD_ADDR_EXP 50
18621: PUSH
18622: LD_INT 1
18624: ST_TO_ADDR
// if p3 = 0 then
18625: LD_VAR 0 3
18629: PUSH
18630: LD_INT 0
18632: EQUAL
18633: IFFALSE 18639
// InitStreamMode ;
18635: CALL 19774 0 0
// if p3 = 1 then
18639: LD_VAR 0 3
18643: PUSH
18644: LD_INT 1
18646: EQUAL
18647: IFFALSE 18657
// sRocket := true ;
18649: LD_ADDR_EXP 55
18653: PUSH
18654: LD_INT 1
18656: ST_TO_ADDR
// if p3 = 2 then
18657: LD_VAR 0 3
18661: PUSH
18662: LD_INT 2
18664: EQUAL
18665: IFFALSE 18675
// sSpeed := true ;
18667: LD_ADDR_EXP 54
18671: PUSH
18672: LD_INT 1
18674: ST_TO_ADDR
// if p3 = 3 then
18675: LD_VAR 0 3
18679: PUSH
18680: LD_INT 3
18682: EQUAL
18683: IFFALSE 18693
// sEngine := true ;
18685: LD_ADDR_EXP 56
18689: PUSH
18690: LD_INT 1
18692: ST_TO_ADDR
// if p3 = 4 then
18693: LD_VAR 0 3
18697: PUSH
18698: LD_INT 4
18700: EQUAL
18701: IFFALSE 18711
// sSpec := true ;
18703: LD_ADDR_EXP 53
18707: PUSH
18708: LD_INT 1
18710: ST_TO_ADDR
// if p3 = 5 then
18711: LD_VAR 0 3
18715: PUSH
18716: LD_INT 5
18718: EQUAL
18719: IFFALSE 18729
// sLevel := true ;
18721: LD_ADDR_EXP 57
18725: PUSH
18726: LD_INT 1
18728: ST_TO_ADDR
// if p3 = 6 then
18729: LD_VAR 0 3
18733: PUSH
18734: LD_INT 6
18736: EQUAL
18737: IFFALSE 18747
// sArmoury := true ;
18739: LD_ADDR_EXP 58
18743: PUSH
18744: LD_INT 1
18746: ST_TO_ADDR
// if p3 = 7 then
18747: LD_VAR 0 3
18751: PUSH
18752: LD_INT 7
18754: EQUAL
18755: IFFALSE 18765
// sRadar := true ;
18757: LD_ADDR_EXP 59
18761: PUSH
18762: LD_INT 1
18764: ST_TO_ADDR
// if p3 = 8 then
18765: LD_VAR 0 3
18769: PUSH
18770: LD_INT 8
18772: EQUAL
18773: IFFALSE 18783
// sBunker := true ;
18775: LD_ADDR_EXP 60
18779: PUSH
18780: LD_INT 1
18782: ST_TO_ADDR
// if p3 = 9 then
18783: LD_VAR 0 3
18787: PUSH
18788: LD_INT 9
18790: EQUAL
18791: IFFALSE 18801
// sHack := true ;
18793: LD_ADDR_EXP 61
18797: PUSH
18798: LD_INT 1
18800: ST_TO_ADDR
// if p3 = 10 then
18801: LD_VAR 0 3
18805: PUSH
18806: LD_INT 10
18808: EQUAL
18809: IFFALSE 18819
// sFire := true ;
18811: LD_ADDR_EXP 62
18815: PUSH
18816: LD_INT 1
18818: ST_TO_ADDR
// if p3 = 11 then
18819: LD_VAR 0 3
18823: PUSH
18824: LD_INT 11
18826: EQUAL
18827: IFFALSE 18837
// sRefresh := true ;
18829: LD_ADDR_EXP 63
18833: PUSH
18834: LD_INT 1
18836: ST_TO_ADDR
// if p3 = 12 then
18837: LD_VAR 0 3
18841: PUSH
18842: LD_INT 12
18844: EQUAL
18845: IFFALSE 18855
// sExp := true ;
18847: LD_ADDR_EXP 64
18851: PUSH
18852: LD_INT 1
18854: ST_TO_ADDR
// if p3 = 13 then
18855: LD_VAR 0 3
18859: PUSH
18860: LD_INT 13
18862: EQUAL
18863: IFFALSE 18873
// sDepot := true ;
18865: LD_ADDR_EXP 65
18869: PUSH
18870: LD_INT 1
18872: ST_TO_ADDR
// if p3 = 14 then
18873: LD_VAR 0 3
18877: PUSH
18878: LD_INT 14
18880: EQUAL
18881: IFFALSE 18891
// sFlag := true ;
18883: LD_ADDR_EXP 66
18887: PUSH
18888: LD_INT 1
18890: ST_TO_ADDR
// if p3 = 15 then
18891: LD_VAR 0 3
18895: PUSH
18896: LD_INT 15
18898: EQUAL
18899: IFFALSE 18909
// sKamikadze := true ;
18901: LD_ADDR_EXP 74
18905: PUSH
18906: LD_INT 1
18908: ST_TO_ADDR
// if p3 = 16 then
18909: LD_VAR 0 3
18913: PUSH
18914: LD_INT 16
18916: EQUAL
18917: IFFALSE 18927
// sTroll := true ;
18919: LD_ADDR_EXP 75
18923: PUSH
18924: LD_INT 1
18926: ST_TO_ADDR
// if p3 = 17 then
18927: LD_VAR 0 3
18931: PUSH
18932: LD_INT 17
18934: EQUAL
18935: IFFALSE 18945
// sSlow := true ;
18937: LD_ADDR_EXP 76
18941: PUSH
18942: LD_INT 1
18944: ST_TO_ADDR
// if p3 = 18 then
18945: LD_VAR 0 3
18949: PUSH
18950: LD_INT 18
18952: EQUAL
18953: IFFALSE 18963
// sLack := true ;
18955: LD_ADDR_EXP 77
18959: PUSH
18960: LD_INT 1
18962: ST_TO_ADDR
// if p3 = 19 then
18963: LD_VAR 0 3
18967: PUSH
18968: LD_INT 19
18970: EQUAL
18971: IFFALSE 18981
// sTank := true ;
18973: LD_ADDR_EXP 79
18977: PUSH
18978: LD_INT 1
18980: ST_TO_ADDR
// if p3 = 20 then
18981: LD_VAR 0 3
18985: PUSH
18986: LD_INT 20
18988: EQUAL
18989: IFFALSE 18999
// sRemote := true ;
18991: LD_ADDR_EXP 80
18995: PUSH
18996: LD_INT 1
18998: ST_TO_ADDR
// if p3 = 21 then
18999: LD_VAR 0 3
19003: PUSH
19004: LD_INT 21
19006: EQUAL
19007: IFFALSE 19017
// sPowell := true ;
19009: LD_ADDR_EXP 81
19013: PUSH
19014: LD_INT 1
19016: ST_TO_ADDR
// if p3 = 22 then
19017: LD_VAR 0 3
19021: PUSH
19022: LD_INT 22
19024: EQUAL
19025: IFFALSE 19035
// sTeleport := true ;
19027: LD_ADDR_EXP 84
19031: PUSH
19032: LD_INT 1
19034: ST_TO_ADDR
// if p3 = 23 then
19035: LD_VAR 0 3
19039: PUSH
19040: LD_INT 23
19042: EQUAL
19043: IFFALSE 19053
// sOilTower := true ;
19045: LD_ADDR_EXP 86
19049: PUSH
19050: LD_INT 1
19052: ST_TO_ADDR
// if p3 = 24 then
19053: LD_VAR 0 3
19057: PUSH
19058: LD_INT 24
19060: EQUAL
19061: IFFALSE 19071
// sShovel := true ;
19063: LD_ADDR_EXP 87
19067: PUSH
19068: LD_INT 1
19070: ST_TO_ADDR
// if p3 = 25 then
19071: LD_VAR 0 3
19075: PUSH
19076: LD_INT 25
19078: EQUAL
19079: IFFALSE 19089
// sSheik := true ;
19081: LD_ADDR_EXP 88
19085: PUSH
19086: LD_INT 1
19088: ST_TO_ADDR
// if p3 = 26 then
19089: LD_VAR 0 3
19093: PUSH
19094: LD_INT 26
19096: EQUAL
19097: IFFALSE 19107
// sEarthquake := true ;
19099: LD_ADDR_EXP 90
19103: PUSH
19104: LD_INT 1
19106: ST_TO_ADDR
// if p3 = 27 then
19107: LD_VAR 0 3
19111: PUSH
19112: LD_INT 27
19114: EQUAL
19115: IFFALSE 19125
// sAI := true ;
19117: LD_ADDR_EXP 91
19121: PUSH
19122: LD_INT 1
19124: ST_TO_ADDR
// if p3 = 28 then
19125: LD_VAR 0 3
19129: PUSH
19130: LD_INT 28
19132: EQUAL
19133: IFFALSE 19143
// sCargo := true ;
19135: LD_ADDR_EXP 94
19139: PUSH
19140: LD_INT 1
19142: ST_TO_ADDR
// if p3 = 29 then
19143: LD_VAR 0 3
19147: PUSH
19148: LD_INT 29
19150: EQUAL
19151: IFFALSE 19161
// sDLaser := true ;
19153: LD_ADDR_EXP 95
19157: PUSH
19158: LD_INT 1
19160: ST_TO_ADDR
// if p3 = 30 then
19161: LD_VAR 0 3
19165: PUSH
19166: LD_INT 30
19168: EQUAL
19169: IFFALSE 19179
// sExchange := true ;
19171: LD_ADDR_EXP 96
19175: PUSH
19176: LD_INT 1
19178: ST_TO_ADDR
// if p3 = 31 then
19179: LD_VAR 0 3
19183: PUSH
19184: LD_INT 31
19186: EQUAL
19187: IFFALSE 19197
// sFac := true ;
19189: LD_ADDR_EXP 97
19193: PUSH
19194: LD_INT 1
19196: ST_TO_ADDR
// if p3 = 32 then
19197: LD_VAR 0 3
19201: PUSH
19202: LD_INT 32
19204: EQUAL
19205: IFFALSE 19215
// sPower := true ;
19207: LD_ADDR_EXP 98
19211: PUSH
19212: LD_INT 1
19214: ST_TO_ADDR
// if p3 = 33 then
19215: LD_VAR 0 3
19219: PUSH
19220: LD_INT 33
19222: EQUAL
19223: IFFALSE 19233
// sRandom := true ;
19225: LD_ADDR_EXP 99
19229: PUSH
19230: LD_INT 1
19232: ST_TO_ADDR
// if p3 = 34 then
19233: LD_VAR 0 3
19237: PUSH
19238: LD_INT 34
19240: EQUAL
19241: IFFALSE 19251
// sShield := true ;
19243: LD_ADDR_EXP 100
19247: PUSH
19248: LD_INT 1
19250: ST_TO_ADDR
// if p3 = 35 then
19251: LD_VAR 0 3
19255: PUSH
19256: LD_INT 35
19258: EQUAL
19259: IFFALSE 19269
// sTime := true ;
19261: LD_ADDR_EXP 101
19265: PUSH
19266: LD_INT 1
19268: ST_TO_ADDR
// if p3 = 36 then
19269: LD_VAR 0 3
19273: PUSH
19274: LD_INT 36
19276: EQUAL
19277: IFFALSE 19287
// sTools := true ;
19279: LD_ADDR_EXP 102
19283: PUSH
19284: LD_INT 1
19286: ST_TO_ADDR
// if p3 = 101 then
19287: LD_VAR 0 3
19291: PUSH
19292: LD_INT 101
19294: EQUAL
19295: IFFALSE 19305
// sSold := true ;
19297: LD_ADDR_EXP 67
19301: PUSH
19302: LD_INT 1
19304: ST_TO_ADDR
// if p3 = 102 then
19305: LD_VAR 0 3
19309: PUSH
19310: LD_INT 102
19312: EQUAL
19313: IFFALSE 19323
// sDiff := true ;
19315: LD_ADDR_EXP 68
19319: PUSH
19320: LD_INT 1
19322: ST_TO_ADDR
// if p3 = 103 then
19323: LD_VAR 0 3
19327: PUSH
19328: LD_INT 103
19330: EQUAL
19331: IFFALSE 19341
// sFog := true ;
19333: LD_ADDR_EXP 71
19337: PUSH
19338: LD_INT 1
19340: ST_TO_ADDR
// if p3 = 104 then
19341: LD_VAR 0 3
19345: PUSH
19346: LD_INT 104
19348: EQUAL
19349: IFFALSE 19359
// sReset := true ;
19351: LD_ADDR_EXP 72
19355: PUSH
19356: LD_INT 1
19358: ST_TO_ADDR
// if p3 = 105 then
19359: LD_VAR 0 3
19363: PUSH
19364: LD_INT 105
19366: EQUAL
19367: IFFALSE 19377
// sSun := true ;
19369: LD_ADDR_EXP 73
19373: PUSH
19374: LD_INT 1
19376: ST_TO_ADDR
// if p3 = 106 then
19377: LD_VAR 0 3
19381: PUSH
19382: LD_INT 106
19384: EQUAL
19385: IFFALSE 19395
// sTiger := true ;
19387: LD_ADDR_EXP 69
19391: PUSH
19392: LD_INT 1
19394: ST_TO_ADDR
// if p3 = 107 then
19395: LD_VAR 0 3
19399: PUSH
19400: LD_INT 107
19402: EQUAL
19403: IFFALSE 19413
// sBomb := true ;
19405: LD_ADDR_EXP 70
19409: PUSH
19410: LD_INT 1
19412: ST_TO_ADDR
// if p3 = 108 then
19413: LD_VAR 0 3
19417: PUSH
19418: LD_INT 108
19420: EQUAL
19421: IFFALSE 19431
// sWound := true ;
19423: LD_ADDR_EXP 78
19427: PUSH
19428: LD_INT 1
19430: ST_TO_ADDR
// if p3 = 109 then
19431: LD_VAR 0 3
19435: PUSH
19436: LD_INT 109
19438: EQUAL
19439: IFFALSE 19449
// sBetray := true ;
19441: LD_ADDR_EXP 82
19445: PUSH
19446: LD_INT 1
19448: ST_TO_ADDR
// if p3 = 110 then
19449: LD_VAR 0 3
19453: PUSH
19454: LD_INT 110
19456: EQUAL
19457: IFFALSE 19467
// sContamin := true ;
19459: LD_ADDR_EXP 83
19463: PUSH
19464: LD_INT 1
19466: ST_TO_ADDR
// if p3 = 111 then
19467: LD_VAR 0 3
19471: PUSH
19472: LD_INT 111
19474: EQUAL
19475: IFFALSE 19485
// sOil := true ;
19477: LD_ADDR_EXP 85
19481: PUSH
19482: LD_INT 1
19484: ST_TO_ADDR
// if p3 = 112 then
19485: LD_VAR 0 3
19489: PUSH
19490: LD_INT 112
19492: EQUAL
19493: IFFALSE 19503
// sStu := true ;
19495: LD_ADDR_EXP 89
19499: PUSH
19500: LD_INT 1
19502: ST_TO_ADDR
// if p3 = 113 then
19503: LD_VAR 0 3
19507: PUSH
19508: LD_INT 113
19510: EQUAL
19511: IFFALSE 19521
// sBazooka := true ;
19513: LD_ADDR_EXP 92
19517: PUSH
19518: LD_INT 1
19520: ST_TO_ADDR
// if p3 = 114 then
19521: LD_VAR 0 3
19525: PUSH
19526: LD_INT 114
19528: EQUAL
19529: IFFALSE 19539
// sMortar := true ;
19531: LD_ADDR_EXP 93
19535: PUSH
19536: LD_INT 1
19538: ST_TO_ADDR
// if p3 = 115 then
19539: LD_VAR 0 3
19543: PUSH
19544: LD_INT 115
19546: EQUAL
19547: IFFALSE 19557
// sRanger := true ;
19549: LD_ADDR_EXP 103
19553: PUSH
19554: LD_INT 1
19556: ST_TO_ADDR
// if p3 = 116 then
19557: LD_VAR 0 3
19561: PUSH
19562: LD_INT 116
19564: EQUAL
19565: IFFALSE 19575
// sComputer := true ;
19567: LD_ADDR_EXP 104
19571: PUSH
19572: LD_INT 1
19574: ST_TO_ADDR
// if p3 = 117 then
19575: LD_VAR 0 3
19579: PUSH
19580: LD_INT 117
19582: EQUAL
19583: IFFALSE 19593
// s30 := true ;
19585: LD_ADDR_EXP 105
19589: PUSH
19590: LD_INT 1
19592: ST_TO_ADDR
// if p3 = 118 then
19593: LD_VAR 0 3
19597: PUSH
19598: LD_INT 118
19600: EQUAL
19601: IFFALSE 19611
// s60 := true ;
19603: LD_ADDR_EXP 106
19607: PUSH
19608: LD_INT 1
19610: ST_TO_ADDR
// end ; if p2 = 101 then
19611: LD_VAR 0 2
19615: PUSH
19616: LD_INT 101
19618: EQUAL
19619: IFFALSE 19747
// begin case p3 of 1 :
19621: LD_VAR 0 3
19625: PUSH
19626: LD_INT 1
19628: DOUBLE
19629: EQUAL
19630: IFTRUE 19634
19632: GO 19641
19634: POP
// hHackUnlimitedResources ; 2 :
19635: CALL 31845 0 0
19639: GO 19747
19641: LD_INT 2
19643: DOUBLE
19644: EQUAL
19645: IFTRUE 19649
19647: GO 19656
19649: POP
// hHackSetLevel10 ; 3 :
19650: CALL 31978 0 0
19654: GO 19747
19656: LD_INT 3
19658: DOUBLE
19659: EQUAL
19660: IFTRUE 19664
19662: GO 19671
19664: POP
// hHackSetLevel10YourUnits ; 4 :
19665: CALL 32063 0 0
19669: GO 19747
19671: LD_INT 4
19673: DOUBLE
19674: EQUAL
19675: IFTRUE 19679
19677: GO 19686
19679: POP
// hHackInvincible ; 5 :
19680: CALL 32511 0 0
19684: GO 19747
19686: LD_INT 5
19688: DOUBLE
19689: EQUAL
19690: IFTRUE 19694
19692: GO 19701
19694: POP
// hHackInvisible ; 6 :
19695: CALL 32622 0 0
19699: GO 19747
19701: LD_INT 6
19703: DOUBLE
19704: EQUAL
19705: IFTRUE 19709
19707: GO 19716
19709: POP
// hHackChangeYourSide ; 7 :
19710: CALL 32679 0 0
19714: GO 19747
19716: LD_INT 7
19718: DOUBLE
19719: EQUAL
19720: IFTRUE 19724
19722: GO 19731
19724: POP
// hHackChangeUnitSide ; 8 :
19725: CALL 32721 0 0
19729: GO 19747
19731: LD_INT 8
19733: DOUBLE
19734: EQUAL
19735: IFTRUE 19739
19737: GO 19746
19739: POP
// hHackFog ; end ;
19740: CALL 32822 0 0
19744: GO 19747
19746: POP
// end ; end ;
19747: LD_VAR 0 7
19751: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19752: GO 19754
19754: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19755: LD_STRING initStreamRollete();
19757: PPUSH
19758: CALL_OW 559
// InitStreamMode ;
19762: CALL 19774 0 0
// DefineStreamItems ( false ) ;
19766: LD_INT 0
19768: PPUSH
19769: CALL 20238 0 1
// end ;
19773: END
// function InitStreamMode ; begin
19774: LD_INT 0
19776: PPUSH
// streamModeActive := false ;
19777: LD_ADDR_EXP 50
19781: PUSH
19782: LD_INT 0
19784: ST_TO_ADDR
// normalCounter := 36 ;
19785: LD_ADDR_EXP 51
19789: PUSH
19790: LD_INT 36
19792: ST_TO_ADDR
// hardcoreCounter := 18 ;
19793: LD_ADDR_EXP 52
19797: PUSH
19798: LD_INT 18
19800: ST_TO_ADDR
// sRocket := false ;
19801: LD_ADDR_EXP 55
19805: PUSH
19806: LD_INT 0
19808: ST_TO_ADDR
// sSpeed := false ;
19809: LD_ADDR_EXP 54
19813: PUSH
19814: LD_INT 0
19816: ST_TO_ADDR
// sEngine := false ;
19817: LD_ADDR_EXP 56
19821: PUSH
19822: LD_INT 0
19824: ST_TO_ADDR
// sSpec := false ;
19825: LD_ADDR_EXP 53
19829: PUSH
19830: LD_INT 0
19832: ST_TO_ADDR
// sLevel := false ;
19833: LD_ADDR_EXP 57
19837: PUSH
19838: LD_INT 0
19840: ST_TO_ADDR
// sArmoury := false ;
19841: LD_ADDR_EXP 58
19845: PUSH
19846: LD_INT 0
19848: ST_TO_ADDR
// sRadar := false ;
19849: LD_ADDR_EXP 59
19853: PUSH
19854: LD_INT 0
19856: ST_TO_ADDR
// sBunker := false ;
19857: LD_ADDR_EXP 60
19861: PUSH
19862: LD_INT 0
19864: ST_TO_ADDR
// sHack := false ;
19865: LD_ADDR_EXP 61
19869: PUSH
19870: LD_INT 0
19872: ST_TO_ADDR
// sFire := false ;
19873: LD_ADDR_EXP 62
19877: PUSH
19878: LD_INT 0
19880: ST_TO_ADDR
// sRefresh := false ;
19881: LD_ADDR_EXP 63
19885: PUSH
19886: LD_INT 0
19888: ST_TO_ADDR
// sExp := false ;
19889: LD_ADDR_EXP 64
19893: PUSH
19894: LD_INT 0
19896: ST_TO_ADDR
// sDepot := false ;
19897: LD_ADDR_EXP 65
19901: PUSH
19902: LD_INT 0
19904: ST_TO_ADDR
// sFlag := false ;
19905: LD_ADDR_EXP 66
19909: PUSH
19910: LD_INT 0
19912: ST_TO_ADDR
// sKamikadze := false ;
19913: LD_ADDR_EXP 74
19917: PUSH
19918: LD_INT 0
19920: ST_TO_ADDR
// sTroll := false ;
19921: LD_ADDR_EXP 75
19925: PUSH
19926: LD_INT 0
19928: ST_TO_ADDR
// sSlow := false ;
19929: LD_ADDR_EXP 76
19933: PUSH
19934: LD_INT 0
19936: ST_TO_ADDR
// sLack := false ;
19937: LD_ADDR_EXP 77
19941: PUSH
19942: LD_INT 0
19944: ST_TO_ADDR
// sTank := false ;
19945: LD_ADDR_EXP 79
19949: PUSH
19950: LD_INT 0
19952: ST_TO_ADDR
// sRemote := false ;
19953: LD_ADDR_EXP 80
19957: PUSH
19958: LD_INT 0
19960: ST_TO_ADDR
// sPowell := false ;
19961: LD_ADDR_EXP 81
19965: PUSH
19966: LD_INT 0
19968: ST_TO_ADDR
// sTeleport := false ;
19969: LD_ADDR_EXP 84
19973: PUSH
19974: LD_INT 0
19976: ST_TO_ADDR
// sOilTower := false ;
19977: LD_ADDR_EXP 86
19981: PUSH
19982: LD_INT 0
19984: ST_TO_ADDR
// sShovel := false ;
19985: LD_ADDR_EXP 87
19989: PUSH
19990: LD_INT 0
19992: ST_TO_ADDR
// sSheik := false ;
19993: LD_ADDR_EXP 88
19997: PUSH
19998: LD_INT 0
20000: ST_TO_ADDR
// sEarthquake := false ;
20001: LD_ADDR_EXP 90
20005: PUSH
20006: LD_INT 0
20008: ST_TO_ADDR
// sAI := false ;
20009: LD_ADDR_EXP 91
20013: PUSH
20014: LD_INT 0
20016: ST_TO_ADDR
// sCargo := false ;
20017: LD_ADDR_EXP 94
20021: PUSH
20022: LD_INT 0
20024: ST_TO_ADDR
// sDLaser := false ;
20025: LD_ADDR_EXP 95
20029: PUSH
20030: LD_INT 0
20032: ST_TO_ADDR
// sExchange := false ;
20033: LD_ADDR_EXP 96
20037: PUSH
20038: LD_INT 0
20040: ST_TO_ADDR
// sFac := false ;
20041: LD_ADDR_EXP 97
20045: PUSH
20046: LD_INT 0
20048: ST_TO_ADDR
// sPower := false ;
20049: LD_ADDR_EXP 98
20053: PUSH
20054: LD_INT 0
20056: ST_TO_ADDR
// sRandom := false ;
20057: LD_ADDR_EXP 99
20061: PUSH
20062: LD_INT 0
20064: ST_TO_ADDR
// sShield := false ;
20065: LD_ADDR_EXP 100
20069: PUSH
20070: LD_INT 0
20072: ST_TO_ADDR
// sTime := false ;
20073: LD_ADDR_EXP 101
20077: PUSH
20078: LD_INT 0
20080: ST_TO_ADDR
// sTools := false ;
20081: LD_ADDR_EXP 102
20085: PUSH
20086: LD_INT 0
20088: ST_TO_ADDR
// sSold := false ;
20089: LD_ADDR_EXP 67
20093: PUSH
20094: LD_INT 0
20096: ST_TO_ADDR
// sDiff := false ;
20097: LD_ADDR_EXP 68
20101: PUSH
20102: LD_INT 0
20104: ST_TO_ADDR
// sFog := false ;
20105: LD_ADDR_EXP 71
20109: PUSH
20110: LD_INT 0
20112: ST_TO_ADDR
// sReset := false ;
20113: LD_ADDR_EXP 72
20117: PUSH
20118: LD_INT 0
20120: ST_TO_ADDR
// sSun := false ;
20121: LD_ADDR_EXP 73
20125: PUSH
20126: LD_INT 0
20128: ST_TO_ADDR
// sTiger := false ;
20129: LD_ADDR_EXP 69
20133: PUSH
20134: LD_INT 0
20136: ST_TO_ADDR
// sBomb := false ;
20137: LD_ADDR_EXP 70
20141: PUSH
20142: LD_INT 0
20144: ST_TO_ADDR
// sWound := false ;
20145: LD_ADDR_EXP 78
20149: PUSH
20150: LD_INT 0
20152: ST_TO_ADDR
// sBetray := false ;
20153: LD_ADDR_EXP 82
20157: PUSH
20158: LD_INT 0
20160: ST_TO_ADDR
// sContamin := false ;
20161: LD_ADDR_EXP 83
20165: PUSH
20166: LD_INT 0
20168: ST_TO_ADDR
// sOil := false ;
20169: LD_ADDR_EXP 85
20173: PUSH
20174: LD_INT 0
20176: ST_TO_ADDR
// sStu := false ;
20177: LD_ADDR_EXP 89
20181: PUSH
20182: LD_INT 0
20184: ST_TO_ADDR
// sBazooka := false ;
20185: LD_ADDR_EXP 92
20189: PUSH
20190: LD_INT 0
20192: ST_TO_ADDR
// sMortar := false ;
20193: LD_ADDR_EXP 93
20197: PUSH
20198: LD_INT 0
20200: ST_TO_ADDR
// sRanger := false ;
20201: LD_ADDR_EXP 103
20205: PUSH
20206: LD_INT 0
20208: ST_TO_ADDR
// sComputer := false ;
20209: LD_ADDR_EXP 104
20213: PUSH
20214: LD_INT 0
20216: ST_TO_ADDR
// s30 := false ;
20217: LD_ADDR_EXP 105
20221: PUSH
20222: LD_INT 0
20224: ST_TO_ADDR
// s60 := false ;
20225: LD_ADDR_EXP 106
20229: PUSH
20230: LD_INT 0
20232: ST_TO_ADDR
// end ;
20233: LD_VAR 0 1
20237: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20238: LD_INT 0
20240: PPUSH
20241: PPUSH
20242: PPUSH
20243: PPUSH
20244: PPUSH
20245: PPUSH
20246: PPUSH
// result := [ ] ;
20247: LD_ADDR_VAR 0 2
20251: PUSH
20252: EMPTY
20253: ST_TO_ADDR
// if campaign_id = 1 then
20254: LD_OWVAR 69
20258: PUSH
20259: LD_INT 1
20261: EQUAL
20262: IFFALSE 23428
// begin case mission_number of 1 :
20264: LD_OWVAR 70
20268: PUSH
20269: LD_INT 1
20271: DOUBLE
20272: EQUAL
20273: IFTRUE 20277
20275: GO 20353
20277: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20278: LD_ADDR_VAR 0 2
20282: PUSH
20283: LD_INT 2
20285: PUSH
20286: LD_INT 4
20288: PUSH
20289: LD_INT 11
20291: PUSH
20292: LD_INT 12
20294: PUSH
20295: LD_INT 15
20297: PUSH
20298: LD_INT 16
20300: PUSH
20301: LD_INT 22
20303: PUSH
20304: LD_INT 23
20306: PUSH
20307: LD_INT 26
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 101
20323: PUSH
20324: LD_INT 102
20326: PUSH
20327: LD_INT 106
20329: PUSH
20330: LD_INT 116
20332: PUSH
20333: LD_INT 117
20335: PUSH
20336: LD_INT 118
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: ST_TO_ADDR
20351: GO 23426
20353: LD_INT 2
20355: DOUBLE
20356: EQUAL
20357: IFTRUE 20361
20359: GO 20445
20361: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20362: LD_ADDR_VAR 0 2
20366: PUSH
20367: LD_INT 2
20369: PUSH
20370: LD_INT 4
20372: PUSH
20373: LD_INT 11
20375: PUSH
20376: LD_INT 12
20378: PUSH
20379: LD_INT 15
20381: PUSH
20382: LD_INT 16
20384: PUSH
20385: LD_INT 22
20387: PUSH
20388: LD_INT 23
20390: PUSH
20391: LD_INT 26
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 101
20407: PUSH
20408: LD_INT 102
20410: PUSH
20411: LD_INT 105
20413: PUSH
20414: LD_INT 106
20416: PUSH
20417: LD_INT 108
20419: PUSH
20420: LD_INT 116
20422: PUSH
20423: LD_INT 117
20425: PUSH
20426: LD_INT 118
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: ST_TO_ADDR
20443: GO 23426
20445: LD_INT 3
20447: DOUBLE
20448: EQUAL
20449: IFTRUE 20453
20451: GO 20541
20453: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20454: LD_ADDR_VAR 0 2
20458: PUSH
20459: LD_INT 2
20461: PUSH
20462: LD_INT 4
20464: PUSH
20465: LD_INT 5
20467: PUSH
20468: LD_INT 11
20470: PUSH
20471: LD_INT 12
20473: PUSH
20474: LD_INT 15
20476: PUSH
20477: LD_INT 16
20479: PUSH
20480: LD_INT 22
20482: PUSH
20483: LD_INT 26
20485: PUSH
20486: LD_INT 36
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 101
20503: PUSH
20504: LD_INT 102
20506: PUSH
20507: LD_INT 105
20509: PUSH
20510: LD_INT 106
20512: PUSH
20513: LD_INT 108
20515: PUSH
20516: LD_INT 116
20518: PUSH
20519: LD_INT 117
20521: PUSH
20522: LD_INT 118
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: ST_TO_ADDR
20539: GO 23426
20541: LD_INT 4
20543: DOUBLE
20544: EQUAL
20545: IFTRUE 20549
20547: GO 20645
20549: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20550: LD_ADDR_VAR 0 2
20554: PUSH
20555: LD_INT 2
20557: PUSH
20558: LD_INT 4
20560: PUSH
20561: LD_INT 5
20563: PUSH
20564: LD_INT 8
20566: PUSH
20567: LD_INT 11
20569: PUSH
20570: LD_INT 12
20572: PUSH
20573: LD_INT 15
20575: PUSH
20576: LD_INT 16
20578: PUSH
20579: LD_INT 22
20581: PUSH
20582: LD_INT 23
20584: PUSH
20585: LD_INT 26
20587: PUSH
20588: LD_INT 36
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 101
20607: PUSH
20608: LD_INT 102
20610: PUSH
20611: LD_INT 105
20613: PUSH
20614: LD_INT 106
20616: PUSH
20617: LD_INT 108
20619: PUSH
20620: LD_INT 116
20622: PUSH
20623: LD_INT 117
20625: PUSH
20626: LD_INT 118
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: ST_TO_ADDR
20643: GO 23426
20645: LD_INT 5
20647: DOUBLE
20648: EQUAL
20649: IFTRUE 20653
20651: GO 20765
20653: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20654: LD_ADDR_VAR 0 2
20658: PUSH
20659: LD_INT 2
20661: PUSH
20662: LD_INT 4
20664: PUSH
20665: LD_INT 5
20667: PUSH
20668: LD_INT 6
20670: PUSH
20671: LD_INT 8
20673: PUSH
20674: LD_INT 11
20676: PUSH
20677: LD_INT 12
20679: PUSH
20680: LD_INT 15
20682: PUSH
20683: LD_INT 16
20685: PUSH
20686: LD_INT 22
20688: PUSH
20689: LD_INT 23
20691: PUSH
20692: LD_INT 25
20694: PUSH
20695: LD_INT 26
20697: PUSH
20698: LD_INT 36
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 101
20719: PUSH
20720: LD_INT 102
20722: PUSH
20723: LD_INT 105
20725: PUSH
20726: LD_INT 106
20728: PUSH
20729: LD_INT 108
20731: PUSH
20732: LD_INT 109
20734: PUSH
20735: LD_INT 112
20737: PUSH
20738: LD_INT 116
20740: PUSH
20741: LD_INT 117
20743: PUSH
20744: LD_INT 118
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: ST_TO_ADDR
20763: GO 23426
20765: LD_INT 6
20767: DOUBLE
20768: EQUAL
20769: IFTRUE 20773
20771: GO 20905
20773: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20774: LD_ADDR_VAR 0 2
20778: PUSH
20779: LD_INT 2
20781: PUSH
20782: LD_INT 4
20784: PUSH
20785: LD_INT 5
20787: PUSH
20788: LD_INT 6
20790: PUSH
20791: LD_INT 8
20793: PUSH
20794: LD_INT 11
20796: PUSH
20797: LD_INT 12
20799: PUSH
20800: LD_INT 15
20802: PUSH
20803: LD_INT 16
20805: PUSH
20806: LD_INT 20
20808: PUSH
20809: LD_INT 21
20811: PUSH
20812: LD_INT 22
20814: PUSH
20815: LD_INT 23
20817: PUSH
20818: LD_INT 25
20820: PUSH
20821: LD_INT 26
20823: PUSH
20824: LD_INT 30
20826: PUSH
20827: LD_INT 31
20829: PUSH
20830: LD_INT 32
20832: PUSH
20833: LD_INT 36
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 101
20859: PUSH
20860: LD_INT 102
20862: PUSH
20863: LD_INT 105
20865: PUSH
20866: LD_INT 106
20868: PUSH
20869: LD_INT 108
20871: PUSH
20872: LD_INT 109
20874: PUSH
20875: LD_INT 112
20877: PUSH
20878: LD_INT 116
20880: PUSH
20881: LD_INT 117
20883: PUSH
20884: LD_INT 118
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: ST_TO_ADDR
20903: GO 23426
20905: LD_INT 7
20907: DOUBLE
20908: EQUAL
20909: IFTRUE 20913
20911: GO 21025
20913: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20914: LD_ADDR_VAR 0 2
20918: PUSH
20919: LD_INT 2
20921: PUSH
20922: LD_INT 4
20924: PUSH
20925: LD_INT 5
20927: PUSH
20928: LD_INT 7
20930: PUSH
20931: LD_INT 11
20933: PUSH
20934: LD_INT 12
20936: PUSH
20937: LD_INT 15
20939: PUSH
20940: LD_INT 16
20942: PUSH
20943: LD_INT 20
20945: PUSH
20946: LD_INT 21
20948: PUSH
20949: LD_INT 22
20951: PUSH
20952: LD_INT 23
20954: PUSH
20955: LD_INT 25
20957: PUSH
20958: LD_INT 26
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 101
20979: PUSH
20980: LD_INT 102
20982: PUSH
20983: LD_INT 103
20985: PUSH
20986: LD_INT 105
20988: PUSH
20989: LD_INT 106
20991: PUSH
20992: LD_INT 108
20994: PUSH
20995: LD_INT 112
20997: PUSH
20998: LD_INT 116
21000: PUSH
21001: LD_INT 117
21003: PUSH
21004: LD_INT 118
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: ST_TO_ADDR
21023: GO 23426
21025: LD_INT 8
21027: DOUBLE
21028: EQUAL
21029: IFTRUE 21033
21031: GO 21173
21033: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21034: LD_ADDR_VAR 0 2
21038: PUSH
21039: LD_INT 2
21041: PUSH
21042: LD_INT 4
21044: PUSH
21045: LD_INT 5
21047: PUSH
21048: LD_INT 6
21050: PUSH
21051: LD_INT 7
21053: PUSH
21054: LD_INT 8
21056: PUSH
21057: LD_INT 11
21059: PUSH
21060: LD_INT 12
21062: PUSH
21063: LD_INT 15
21065: PUSH
21066: LD_INT 16
21068: PUSH
21069: LD_INT 20
21071: PUSH
21072: LD_INT 21
21074: PUSH
21075: LD_INT 22
21077: PUSH
21078: LD_INT 23
21080: PUSH
21081: LD_INT 25
21083: PUSH
21084: LD_INT 26
21086: PUSH
21087: LD_INT 30
21089: PUSH
21090: LD_INT 31
21092: PUSH
21093: LD_INT 32
21095: PUSH
21096: LD_INT 36
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 101
21123: PUSH
21124: LD_INT 102
21126: PUSH
21127: LD_INT 103
21129: PUSH
21130: LD_INT 105
21132: PUSH
21133: LD_INT 106
21135: PUSH
21136: LD_INT 108
21138: PUSH
21139: LD_INT 109
21141: PUSH
21142: LD_INT 112
21144: PUSH
21145: LD_INT 116
21147: PUSH
21148: LD_INT 117
21150: PUSH
21151: LD_INT 118
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: ST_TO_ADDR
21171: GO 23426
21173: LD_INT 9
21175: DOUBLE
21176: EQUAL
21177: IFTRUE 21181
21179: GO 21329
21181: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21182: LD_ADDR_VAR 0 2
21186: PUSH
21187: LD_INT 2
21189: PUSH
21190: LD_INT 4
21192: PUSH
21193: LD_INT 5
21195: PUSH
21196: LD_INT 6
21198: PUSH
21199: LD_INT 7
21201: PUSH
21202: LD_INT 8
21204: PUSH
21205: LD_INT 11
21207: PUSH
21208: LD_INT 12
21210: PUSH
21211: LD_INT 15
21213: PUSH
21214: LD_INT 16
21216: PUSH
21217: LD_INT 20
21219: PUSH
21220: LD_INT 21
21222: PUSH
21223: LD_INT 22
21225: PUSH
21226: LD_INT 23
21228: PUSH
21229: LD_INT 25
21231: PUSH
21232: LD_INT 26
21234: PUSH
21235: LD_INT 28
21237: PUSH
21238: LD_INT 30
21240: PUSH
21241: LD_INT 31
21243: PUSH
21244: LD_INT 32
21246: PUSH
21247: LD_INT 36
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 101
21275: PUSH
21276: LD_INT 102
21278: PUSH
21279: LD_INT 103
21281: PUSH
21282: LD_INT 105
21284: PUSH
21285: LD_INT 106
21287: PUSH
21288: LD_INT 108
21290: PUSH
21291: LD_INT 109
21293: PUSH
21294: LD_INT 112
21296: PUSH
21297: LD_INT 114
21299: PUSH
21300: LD_INT 116
21302: PUSH
21303: LD_INT 117
21305: PUSH
21306: LD_INT 118
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: ST_TO_ADDR
21327: GO 23426
21329: LD_INT 10
21331: DOUBLE
21332: EQUAL
21333: IFTRUE 21337
21335: GO 21533
21337: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21338: LD_ADDR_VAR 0 2
21342: PUSH
21343: LD_INT 2
21345: PUSH
21346: LD_INT 4
21348: PUSH
21349: LD_INT 5
21351: PUSH
21352: LD_INT 6
21354: PUSH
21355: LD_INT 7
21357: PUSH
21358: LD_INT 8
21360: PUSH
21361: LD_INT 9
21363: PUSH
21364: LD_INT 10
21366: PUSH
21367: LD_INT 11
21369: PUSH
21370: LD_INT 12
21372: PUSH
21373: LD_INT 13
21375: PUSH
21376: LD_INT 14
21378: PUSH
21379: LD_INT 15
21381: PUSH
21382: LD_INT 16
21384: PUSH
21385: LD_INT 17
21387: PUSH
21388: LD_INT 18
21390: PUSH
21391: LD_INT 19
21393: PUSH
21394: LD_INT 20
21396: PUSH
21397: LD_INT 21
21399: PUSH
21400: LD_INT 22
21402: PUSH
21403: LD_INT 23
21405: PUSH
21406: LD_INT 24
21408: PUSH
21409: LD_INT 25
21411: PUSH
21412: LD_INT 26
21414: PUSH
21415: LD_INT 28
21417: PUSH
21418: LD_INT 30
21420: PUSH
21421: LD_INT 31
21423: PUSH
21424: LD_INT 32
21426: PUSH
21427: LD_INT 36
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 101
21463: PUSH
21464: LD_INT 102
21466: PUSH
21467: LD_INT 103
21469: PUSH
21470: LD_INT 104
21472: PUSH
21473: LD_INT 105
21475: PUSH
21476: LD_INT 106
21478: PUSH
21479: LD_INT 107
21481: PUSH
21482: LD_INT 108
21484: PUSH
21485: LD_INT 109
21487: PUSH
21488: LD_INT 110
21490: PUSH
21491: LD_INT 111
21493: PUSH
21494: LD_INT 112
21496: PUSH
21497: LD_INT 114
21499: PUSH
21500: LD_INT 116
21502: PUSH
21503: LD_INT 117
21505: PUSH
21506: LD_INT 118
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: ST_TO_ADDR
21531: GO 23426
21533: LD_INT 11
21535: DOUBLE
21536: EQUAL
21537: IFTRUE 21541
21539: GO 21745
21541: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21542: LD_ADDR_VAR 0 2
21546: PUSH
21547: LD_INT 2
21549: PUSH
21550: LD_INT 3
21552: PUSH
21553: LD_INT 4
21555: PUSH
21556: LD_INT 5
21558: PUSH
21559: LD_INT 6
21561: PUSH
21562: LD_INT 7
21564: PUSH
21565: LD_INT 8
21567: PUSH
21568: LD_INT 9
21570: PUSH
21571: LD_INT 10
21573: PUSH
21574: LD_INT 11
21576: PUSH
21577: LD_INT 12
21579: PUSH
21580: LD_INT 13
21582: PUSH
21583: LD_INT 14
21585: PUSH
21586: LD_INT 15
21588: PUSH
21589: LD_INT 16
21591: PUSH
21592: LD_INT 17
21594: PUSH
21595: LD_INT 18
21597: PUSH
21598: LD_INT 19
21600: PUSH
21601: LD_INT 20
21603: PUSH
21604: LD_INT 21
21606: PUSH
21607: LD_INT 22
21609: PUSH
21610: LD_INT 23
21612: PUSH
21613: LD_INT 24
21615: PUSH
21616: LD_INT 25
21618: PUSH
21619: LD_INT 26
21621: PUSH
21622: LD_INT 28
21624: PUSH
21625: LD_INT 30
21627: PUSH
21628: LD_INT 31
21630: PUSH
21631: LD_INT 32
21633: PUSH
21634: LD_INT 34
21636: PUSH
21637: LD_INT 36
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 101
21675: PUSH
21676: LD_INT 102
21678: PUSH
21679: LD_INT 103
21681: PUSH
21682: LD_INT 104
21684: PUSH
21685: LD_INT 105
21687: PUSH
21688: LD_INT 106
21690: PUSH
21691: LD_INT 107
21693: PUSH
21694: LD_INT 108
21696: PUSH
21697: LD_INT 109
21699: PUSH
21700: LD_INT 110
21702: PUSH
21703: LD_INT 111
21705: PUSH
21706: LD_INT 112
21708: PUSH
21709: LD_INT 114
21711: PUSH
21712: LD_INT 116
21714: PUSH
21715: LD_INT 117
21717: PUSH
21718: LD_INT 118
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: ST_TO_ADDR
21743: GO 23426
21745: LD_INT 12
21747: DOUBLE
21748: EQUAL
21749: IFTRUE 21753
21751: GO 21973
21753: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21754: LD_ADDR_VAR 0 2
21758: PUSH
21759: LD_INT 1
21761: PUSH
21762: LD_INT 2
21764: PUSH
21765: LD_INT 3
21767: PUSH
21768: LD_INT 4
21770: PUSH
21771: LD_INT 5
21773: PUSH
21774: LD_INT 6
21776: PUSH
21777: LD_INT 7
21779: PUSH
21780: LD_INT 8
21782: PUSH
21783: LD_INT 9
21785: PUSH
21786: LD_INT 10
21788: PUSH
21789: LD_INT 11
21791: PUSH
21792: LD_INT 12
21794: PUSH
21795: LD_INT 13
21797: PUSH
21798: LD_INT 14
21800: PUSH
21801: LD_INT 15
21803: PUSH
21804: LD_INT 16
21806: PUSH
21807: LD_INT 17
21809: PUSH
21810: LD_INT 18
21812: PUSH
21813: LD_INT 19
21815: PUSH
21816: LD_INT 20
21818: PUSH
21819: LD_INT 21
21821: PUSH
21822: LD_INT 22
21824: PUSH
21825: LD_INT 23
21827: PUSH
21828: LD_INT 24
21830: PUSH
21831: LD_INT 25
21833: PUSH
21834: LD_INT 26
21836: PUSH
21837: LD_INT 27
21839: PUSH
21840: LD_INT 28
21842: PUSH
21843: LD_INT 30
21845: PUSH
21846: LD_INT 31
21848: PUSH
21849: LD_INT 32
21851: PUSH
21852: LD_INT 33
21854: PUSH
21855: LD_INT 34
21857: PUSH
21858: LD_INT 36
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 101
21899: PUSH
21900: LD_INT 102
21902: PUSH
21903: LD_INT 103
21905: PUSH
21906: LD_INT 104
21908: PUSH
21909: LD_INT 105
21911: PUSH
21912: LD_INT 106
21914: PUSH
21915: LD_INT 107
21917: PUSH
21918: LD_INT 108
21920: PUSH
21921: LD_INT 109
21923: PUSH
21924: LD_INT 110
21926: PUSH
21927: LD_INT 111
21929: PUSH
21930: LD_INT 112
21932: PUSH
21933: LD_INT 113
21935: PUSH
21936: LD_INT 114
21938: PUSH
21939: LD_INT 116
21941: PUSH
21942: LD_INT 117
21944: PUSH
21945: LD_INT 118
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: ST_TO_ADDR
21971: GO 23426
21973: LD_INT 13
21975: DOUBLE
21976: EQUAL
21977: IFTRUE 21981
21979: GO 22189
21981: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21982: LD_ADDR_VAR 0 2
21986: PUSH
21987: LD_INT 1
21989: PUSH
21990: LD_INT 2
21992: PUSH
21993: LD_INT 3
21995: PUSH
21996: LD_INT 4
21998: PUSH
21999: LD_INT 5
22001: PUSH
22002: LD_INT 8
22004: PUSH
22005: LD_INT 9
22007: PUSH
22008: LD_INT 10
22010: PUSH
22011: LD_INT 11
22013: PUSH
22014: LD_INT 12
22016: PUSH
22017: LD_INT 14
22019: PUSH
22020: LD_INT 15
22022: PUSH
22023: LD_INT 16
22025: PUSH
22026: LD_INT 17
22028: PUSH
22029: LD_INT 18
22031: PUSH
22032: LD_INT 19
22034: PUSH
22035: LD_INT 20
22037: PUSH
22038: LD_INT 21
22040: PUSH
22041: LD_INT 22
22043: PUSH
22044: LD_INT 23
22046: PUSH
22047: LD_INT 24
22049: PUSH
22050: LD_INT 25
22052: PUSH
22053: LD_INT 26
22055: PUSH
22056: LD_INT 27
22058: PUSH
22059: LD_INT 28
22061: PUSH
22062: LD_INT 30
22064: PUSH
22065: LD_INT 31
22067: PUSH
22068: LD_INT 32
22070: PUSH
22071: LD_INT 33
22073: PUSH
22074: LD_INT 34
22076: PUSH
22077: LD_INT 36
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 101
22115: PUSH
22116: LD_INT 102
22118: PUSH
22119: LD_INT 103
22121: PUSH
22122: LD_INT 104
22124: PUSH
22125: LD_INT 105
22127: PUSH
22128: LD_INT 106
22130: PUSH
22131: LD_INT 107
22133: PUSH
22134: LD_INT 108
22136: PUSH
22137: LD_INT 109
22139: PUSH
22140: LD_INT 110
22142: PUSH
22143: LD_INT 111
22145: PUSH
22146: LD_INT 112
22148: PUSH
22149: LD_INT 113
22151: PUSH
22152: LD_INT 114
22154: PUSH
22155: LD_INT 116
22157: PUSH
22158: LD_INT 117
22160: PUSH
22161: LD_INT 118
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: ST_TO_ADDR
22187: GO 23426
22189: LD_INT 14
22191: DOUBLE
22192: EQUAL
22193: IFTRUE 22197
22195: GO 22421
22197: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22198: LD_ADDR_VAR 0 2
22202: PUSH
22203: LD_INT 1
22205: PUSH
22206: LD_INT 2
22208: PUSH
22209: LD_INT 3
22211: PUSH
22212: LD_INT 4
22214: PUSH
22215: LD_INT 5
22217: PUSH
22218: LD_INT 6
22220: PUSH
22221: LD_INT 7
22223: PUSH
22224: LD_INT 8
22226: PUSH
22227: LD_INT 9
22229: PUSH
22230: LD_INT 10
22232: PUSH
22233: LD_INT 11
22235: PUSH
22236: LD_INT 12
22238: PUSH
22239: LD_INT 13
22241: PUSH
22242: LD_INT 14
22244: PUSH
22245: LD_INT 15
22247: PUSH
22248: LD_INT 16
22250: PUSH
22251: LD_INT 17
22253: PUSH
22254: LD_INT 18
22256: PUSH
22257: LD_INT 19
22259: PUSH
22260: LD_INT 20
22262: PUSH
22263: LD_INT 21
22265: PUSH
22266: LD_INT 22
22268: PUSH
22269: LD_INT 23
22271: PUSH
22272: LD_INT 24
22274: PUSH
22275: LD_INT 25
22277: PUSH
22278: LD_INT 26
22280: PUSH
22281: LD_INT 27
22283: PUSH
22284: LD_INT 28
22286: PUSH
22287: LD_INT 29
22289: PUSH
22290: LD_INT 30
22292: PUSH
22293: LD_INT 31
22295: PUSH
22296: LD_INT 32
22298: PUSH
22299: LD_INT 33
22301: PUSH
22302: LD_INT 34
22304: PUSH
22305: LD_INT 36
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 101
22347: PUSH
22348: LD_INT 102
22350: PUSH
22351: LD_INT 103
22353: PUSH
22354: LD_INT 104
22356: PUSH
22357: LD_INT 105
22359: PUSH
22360: LD_INT 106
22362: PUSH
22363: LD_INT 107
22365: PUSH
22366: LD_INT 108
22368: PUSH
22369: LD_INT 109
22371: PUSH
22372: LD_INT 110
22374: PUSH
22375: LD_INT 111
22377: PUSH
22378: LD_INT 112
22380: PUSH
22381: LD_INT 113
22383: PUSH
22384: LD_INT 114
22386: PUSH
22387: LD_INT 116
22389: PUSH
22390: LD_INT 117
22392: PUSH
22393: LD_INT 118
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: ST_TO_ADDR
22419: GO 23426
22421: LD_INT 15
22423: DOUBLE
22424: EQUAL
22425: IFTRUE 22429
22427: GO 22653
22429: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22430: LD_ADDR_VAR 0 2
22434: PUSH
22435: LD_INT 1
22437: PUSH
22438: LD_INT 2
22440: PUSH
22441: LD_INT 3
22443: PUSH
22444: LD_INT 4
22446: PUSH
22447: LD_INT 5
22449: PUSH
22450: LD_INT 6
22452: PUSH
22453: LD_INT 7
22455: PUSH
22456: LD_INT 8
22458: PUSH
22459: LD_INT 9
22461: PUSH
22462: LD_INT 10
22464: PUSH
22465: LD_INT 11
22467: PUSH
22468: LD_INT 12
22470: PUSH
22471: LD_INT 13
22473: PUSH
22474: LD_INT 14
22476: PUSH
22477: LD_INT 15
22479: PUSH
22480: LD_INT 16
22482: PUSH
22483: LD_INT 17
22485: PUSH
22486: LD_INT 18
22488: PUSH
22489: LD_INT 19
22491: PUSH
22492: LD_INT 20
22494: PUSH
22495: LD_INT 21
22497: PUSH
22498: LD_INT 22
22500: PUSH
22501: LD_INT 23
22503: PUSH
22504: LD_INT 24
22506: PUSH
22507: LD_INT 25
22509: PUSH
22510: LD_INT 26
22512: PUSH
22513: LD_INT 27
22515: PUSH
22516: LD_INT 28
22518: PUSH
22519: LD_INT 29
22521: PUSH
22522: LD_INT 30
22524: PUSH
22525: LD_INT 31
22527: PUSH
22528: LD_INT 32
22530: PUSH
22531: LD_INT 33
22533: PUSH
22534: LD_INT 34
22536: PUSH
22537: LD_INT 36
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 101
22579: PUSH
22580: LD_INT 102
22582: PUSH
22583: LD_INT 103
22585: PUSH
22586: LD_INT 104
22588: PUSH
22589: LD_INT 105
22591: PUSH
22592: LD_INT 106
22594: PUSH
22595: LD_INT 107
22597: PUSH
22598: LD_INT 108
22600: PUSH
22601: LD_INT 109
22603: PUSH
22604: LD_INT 110
22606: PUSH
22607: LD_INT 111
22609: PUSH
22610: LD_INT 112
22612: PUSH
22613: LD_INT 113
22615: PUSH
22616: LD_INT 114
22618: PUSH
22619: LD_INT 116
22621: PUSH
22622: LD_INT 117
22624: PUSH
22625: LD_INT 118
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: ST_TO_ADDR
22651: GO 23426
22653: LD_INT 16
22655: DOUBLE
22656: EQUAL
22657: IFTRUE 22661
22659: GO 22797
22661: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22662: LD_ADDR_VAR 0 2
22666: PUSH
22667: LD_INT 2
22669: PUSH
22670: LD_INT 4
22672: PUSH
22673: LD_INT 5
22675: PUSH
22676: LD_INT 7
22678: PUSH
22679: LD_INT 11
22681: PUSH
22682: LD_INT 12
22684: PUSH
22685: LD_INT 15
22687: PUSH
22688: LD_INT 16
22690: PUSH
22691: LD_INT 20
22693: PUSH
22694: LD_INT 21
22696: PUSH
22697: LD_INT 22
22699: PUSH
22700: LD_INT 23
22702: PUSH
22703: LD_INT 25
22705: PUSH
22706: LD_INT 26
22708: PUSH
22709: LD_INT 30
22711: PUSH
22712: LD_INT 31
22714: PUSH
22715: LD_INT 32
22717: PUSH
22718: LD_INT 33
22720: PUSH
22721: LD_INT 34
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 101
22747: PUSH
22748: LD_INT 102
22750: PUSH
22751: LD_INT 103
22753: PUSH
22754: LD_INT 106
22756: PUSH
22757: LD_INT 108
22759: PUSH
22760: LD_INT 112
22762: PUSH
22763: LD_INT 113
22765: PUSH
22766: LD_INT 114
22768: PUSH
22769: LD_INT 116
22771: PUSH
22772: LD_INT 117
22774: PUSH
22775: LD_INT 118
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: ST_TO_ADDR
22795: GO 23426
22797: LD_INT 17
22799: DOUBLE
22800: EQUAL
22801: IFTRUE 22805
22803: GO 23029
22805: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22806: LD_ADDR_VAR 0 2
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: LD_INT 2
22816: PUSH
22817: LD_INT 3
22819: PUSH
22820: LD_INT 4
22822: PUSH
22823: LD_INT 5
22825: PUSH
22826: LD_INT 6
22828: PUSH
22829: LD_INT 7
22831: PUSH
22832: LD_INT 8
22834: PUSH
22835: LD_INT 9
22837: PUSH
22838: LD_INT 10
22840: PUSH
22841: LD_INT 11
22843: PUSH
22844: LD_INT 12
22846: PUSH
22847: LD_INT 13
22849: PUSH
22850: LD_INT 14
22852: PUSH
22853: LD_INT 15
22855: PUSH
22856: LD_INT 16
22858: PUSH
22859: LD_INT 17
22861: PUSH
22862: LD_INT 18
22864: PUSH
22865: LD_INT 19
22867: PUSH
22868: LD_INT 20
22870: PUSH
22871: LD_INT 21
22873: PUSH
22874: LD_INT 22
22876: PUSH
22877: LD_INT 23
22879: PUSH
22880: LD_INT 24
22882: PUSH
22883: LD_INT 25
22885: PUSH
22886: LD_INT 26
22888: PUSH
22889: LD_INT 27
22891: PUSH
22892: LD_INT 28
22894: PUSH
22895: LD_INT 29
22897: PUSH
22898: LD_INT 30
22900: PUSH
22901: LD_INT 31
22903: PUSH
22904: LD_INT 32
22906: PUSH
22907: LD_INT 33
22909: PUSH
22910: LD_INT 34
22912: PUSH
22913: LD_INT 36
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 101
22955: PUSH
22956: LD_INT 102
22958: PUSH
22959: LD_INT 103
22961: PUSH
22962: LD_INT 104
22964: PUSH
22965: LD_INT 105
22967: PUSH
22968: LD_INT 106
22970: PUSH
22971: LD_INT 107
22973: PUSH
22974: LD_INT 108
22976: PUSH
22977: LD_INT 109
22979: PUSH
22980: LD_INT 110
22982: PUSH
22983: LD_INT 111
22985: PUSH
22986: LD_INT 112
22988: PUSH
22989: LD_INT 113
22991: PUSH
22992: LD_INT 114
22994: PUSH
22995: LD_INT 116
22997: PUSH
22998: LD_INT 117
23000: PUSH
23001: LD_INT 118
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: ST_TO_ADDR
23027: GO 23426
23029: LD_INT 18
23031: DOUBLE
23032: EQUAL
23033: IFTRUE 23037
23035: GO 23185
23037: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23038: LD_ADDR_VAR 0 2
23042: PUSH
23043: LD_INT 2
23045: PUSH
23046: LD_INT 4
23048: PUSH
23049: LD_INT 5
23051: PUSH
23052: LD_INT 7
23054: PUSH
23055: LD_INT 11
23057: PUSH
23058: LD_INT 12
23060: PUSH
23061: LD_INT 15
23063: PUSH
23064: LD_INT 16
23066: PUSH
23067: LD_INT 20
23069: PUSH
23070: LD_INT 21
23072: PUSH
23073: LD_INT 22
23075: PUSH
23076: LD_INT 23
23078: PUSH
23079: LD_INT 25
23081: PUSH
23082: LD_INT 26
23084: PUSH
23085: LD_INT 30
23087: PUSH
23088: LD_INT 31
23090: PUSH
23091: LD_INT 32
23093: PUSH
23094: LD_INT 33
23096: PUSH
23097: LD_INT 34
23099: PUSH
23100: LD_INT 35
23102: PUSH
23103: LD_INT 36
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 101
23131: PUSH
23132: LD_INT 102
23134: PUSH
23135: LD_INT 103
23137: PUSH
23138: LD_INT 106
23140: PUSH
23141: LD_INT 108
23143: PUSH
23144: LD_INT 112
23146: PUSH
23147: LD_INT 113
23149: PUSH
23150: LD_INT 114
23152: PUSH
23153: LD_INT 115
23155: PUSH
23156: LD_INT 116
23158: PUSH
23159: LD_INT 117
23161: PUSH
23162: LD_INT 118
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: ST_TO_ADDR
23183: GO 23426
23185: LD_INT 19
23187: DOUBLE
23188: EQUAL
23189: IFTRUE 23193
23191: GO 23425
23193: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23194: LD_ADDR_VAR 0 2
23198: PUSH
23199: LD_INT 1
23201: PUSH
23202: LD_INT 2
23204: PUSH
23205: LD_INT 3
23207: PUSH
23208: LD_INT 4
23210: PUSH
23211: LD_INT 5
23213: PUSH
23214: LD_INT 6
23216: PUSH
23217: LD_INT 7
23219: PUSH
23220: LD_INT 8
23222: PUSH
23223: LD_INT 9
23225: PUSH
23226: LD_INT 10
23228: PUSH
23229: LD_INT 11
23231: PUSH
23232: LD_INT 12
23234: PUSH
23235: LD_INT 13
23237: PUSH
23238: LD_INT 14
23240: PUSH
23241: LD_INT 15
23243: PUSH
23244: LD_INT 16
23246: PUSH
23247: LD_INT 17
23249: PUSH
23250: LD_INT 18
23252: PUSH
23253: LD_INT 19
23255: PUSH
23256: LD_INT 20
23258: PUSH
23259: LD_INT 21
23261: PUSH
23262: LD_INT 22
23264: PUSH
23265: LD_INT 23
23267: PUSH
23268: LD_INT 24
23270: PUSH
23271: LD_INT 25
23273: PUSH
23274: LD_INT 26
23276: PUSH
23277: LD_INT 27
23279: PUSH
23280: LD_INT 28
23282: PUSH
23283: LD_INT 29
23285: PUSH
23286: LD_INT 30
23288: PUSH
23289: LD_INT 31
23291: PUSH
23292: LD_INT 32
23294: PUSH
23295: LD_INT 33
23297: PUSH
23298: LD_INT 34
23300: PUSH
23301: LD_INT 35
23303: PUSH
23304: LD_INT 36
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 101
23347: PUSH
23348: LD_INT 102
23350: PUSH
23351: LD_INT 103
23353: PUSH
23354: LD_INT 104
23356: PUSH
23357: LD_INT 105
23359: PUSH
23360: LD_INT 106
23362: PUSH
23363: LD_INT 107
23365: PUSH
23366: LD_INT 108
23368: PUSH
23369: LD_INT 109
23371: PUSH
23372: LD_INT 110
23374: PUSH
23375: LD_INT 111
23377: PUSH
23378: LD_INT 112
23380: PUSH
23381: LD_INT 113
23383: PUSH
23384: LD_INT 114
23386: PUSH
23387: LD_INT 115
23389: PUSH
23390: LD_INT 116
23392: PUSH
23393: LD_INT 117
23395: PUSH
23396: LD_INT 118
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: ST_TO_ADDR
23423: GO 23426
23425: POP
// end else
23426: GO 23657
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23428: LD_ADDR_VAR 0 2
23432: PUSH
23433: LD_INT 1
23435: PUSH
23436: LD_INT 2
23438: PUSH
23439: LD_INT 3
23441: PUSH
23442: LD_INT 4
23444: PUSH
23445: LD_INT 5
23447: PUSH
23448: LD_INT 6
23450: PUSH
23451: LD_INT 7
23453: PUSH
23454: LD_INT 8
23456: PUSH
23457: LD_INT 9
23459: PUSH
23460: LD_INT 10
23462: PUSH
23463: LD_INT 11
23465: PUSH
23466: LD_INT 12
23468: PUSH
23469: LD_INT 13
23471: PUSH
23472: LD_INT 14
23474: PUSH
23475: LD_INT 15
23477: PUSH
23478: LD_INT 16
23480: PUSH
23481: LD_INT 17
23483: PUSH
23484: LD_INT 18
23486: PUSH
23487: LD_INT 19
23489: PUSH
23490: LD_INT 20
23492: PUSH
23493: LD_INT 21
23495: PUSH
23496: LD_INT 22
23498: PUSH
23499: LD_INT 23
23501: PUSH
23502: LD_INT 24
23504: PUSH
23505: LD_INT 25
23507: PUSH
23508: LD_INT 26
23510: PUSH
23511: LD_INT 27
23513: PUSH
23514: LD_INT 28
23516: PUSH
23517: LD_INT 29
23519: PUSH
23520: LD_INT 30
23522: PUSH
23523: LD_INT 31
23525: PUSH
23526: LD_INT 32
23528: PUSH
23529: LD_INT 33
23531: PUSH
23532: LD_INT 34
23534: PUSH
23535: LD_INT 35
23537: PUSH
23538: LD_INT 36
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 101
23581: PUSH
23582: LD_INT 102
23584: PUSH
23585: LD_INT 103
23587: PUSH
23588: LD_INT 104
23590: PUSH
23591: LD_INT 105
23593: PUSH
23594: LD_INT 106
23596: PUSH
23597: LD_INT 107
23599: PUSH
23600: LD_INT 108
23602: PUSH
23603: LD_INT 109
23605: PUSH
23606: LD_INT 110
23608: PUSH
23609: LD_INT 111
23611: PUSH
23612: LD_INT 112
23614: PUSH
23615: LD_INT 113
23617: PUSH
23618: LD_INT 114
23620: PUSH
23621: LD_INT 115
23623: PUSH
23624: LD_INT 116
23626: PUSH
23627: LD_INT 117
23629: PUSH
23630: LD_INT 118
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: ST_TO_ADDR
// if result then
23657: LD_VAR 0 2
23661: IFFALSE 24447
// begin normal :=  ;
23663: LD_ADDR_VAR 0 5
23667: PUSH
23668: LD_STRING 
23670: ST_TO_ADDR
// hardcore :=  ;
23671: LD_ADDR_VAR 0 6
23675: PUSH
23676: LD_STRING 
23678: ST_TO_ADDR
// active :=  ;
23679: LD_ADDR_VAR 0 7
23683: PUSH
23684: LD_STRING 
23686: ST_TO_ADDR
// for i = 1 to normalCounter do
23687: LD_ADDR_VAR 0 8
23691: PUSH
23692: DOUBLE
23693: LD_INT 1
23695: DEC
23696: ST_TO_ADDR
23697: LD_EXP 51
23701: PUSH
23702: FOR_TO
23703: IFFALSE 23804
// begin tmp := 0 ;
23705: LD_ADDR_VAR 0 3
23709: PUSH
23710: LD_STRING 0
23712: ST_TO_ADDR
// if result [ 1 ] then
23713: LD_VAR 0 2
23717: PUSH
23718: LD_INT 1
23720: ARRAY
23721: IFFALSE 23786
// if result [ 1 ] [ 1 ] = i then
23723: LD_VAR 0 2
23727: PUSH
23728: LD_INT 1
23730: ARRAY
23731: PUSH
23732: LD_INT 1
23734: ARRAY
23735: PUSH
23736: LD_VAR 0 8
23740: EQUAL
23741: IFFALSE 23786
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23743: LD_ADDR_VAR 0 2
23747: PUSH
23748: LD_VAR 0 2
23752: PPUSH
23753: LD_INT 1
23755: PPUSH
23756: LD_VAR 0 2
23760: PUSH
23761: LD_INT 1
23763: ARRAY
23764: PPUSH
23765: LD_INT 1
23767: PPUSH
23768: CALL_OW 3
23772: PPUSH
23773: CALL_OW 1
23777: ST_TO_ADDR
// tmp := 1 ;
23778: LD_ADDR_VAR 0 3
23782: PUSH
23783: LD_STRING 1
23785: ST_TO_ADDR
// end ; normal := normal & tmp ;
23786: LD_ADDR_VAR 0 5
23790: PUSH
23791: LD_VAR 0 5
23795: PUSH
23796: LD_VAR 0 3
23800: STR
23801: ST_TO_ADDR
// end ;
23802: GO 23702
23804: POP
23805: POP
// for i = 1 to hardcoreCounter do
23806: LD_ADDR_VAR 0 8
23810: PUSH
23811: DOUBLE
23812: LD_INT 1
23814: DEC
23815: ST_TO_ADDR
23816: LD_EXP 52
23820: PUSH
23821: FOR_TO
23822: IFFALSE 23927
// begin tmp := 0 ;
23824: LD_ADDR_VAR 0 3
23828: PUSH
23829: LD_STRING 0
23831: ST_TO_ADDR
// if result [ 2 ] then
23832: LD_VAR 0 2
23836: PUSH
23837: LD_INT 2
23839: ARRAY
23840: IFFALSE 23909
// if result [ 2 ] [ 1 ] = 100 + i then
23842: LD_VAR 0 2
23846: PUSH
23847: LD_INT 2
23849: ARRAY
23850: PUSH
23851: LD_INT 1
23853: ARRAY
23854: PUSH
23855: LD_INT 100
23857: PUSH
23858: LD_VAR 0 8
23862: PLUS
23863: EQUAL
23864: IFFALSE 23909
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23866: LD_ADDR_VAR 0 2
23870: PUSH
23871: LD_VAR 0 2
23875: PPUSH
23876: LD_INT 2
23878: PPUSH
23879: LD_VAR 0 2
23883: PUSH
23884: LD_INT 2
23886: ARRAY
23887: PPUSH
23888: LD_INT 1
23890: PPUSH
23891: CALL_OW 3
23895: PPUSH
23896: CALL_OW 1
23900: ST_TO_ADDR
// tmp := 1 ;
23901: LD_ADDR_VAR 0 3
23905: PUSH
23906: LD_STRING 1
23908: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23909: LD_ADDR_VAR 0 6
23913: PUSH
23914: LD_VAR 0 6
23918: PUSH
23919: LD_VAR 0 3
23923: STR
23924: ST_TO_ADDR
// end ;
23925: GO 23821
23927: POP
23928: POP
// if isGameLoad then
23929: LD_VAR 0 1
23933: IFFALSE 24408
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23935: LD_ADDR_VAR 0 4
23939: PUSH
23940: LD_EXP 55
23944: PUSH
23945: LD_EXP 54
23949: PUSH
23950: LD_EXP 56
23954: PUSH
23955: LD_EXP 53
23959: PUSH
23960: LD_EXP 57
23964: PUSH
23965: LD_EXP 58
23969: PUSH
23970: LD_EXP 59
23974: PUSH
23975: LD_EXP 60
23979: PUSH
23980: LD_EXP 61
23984: PUSH
23985: LD_EXP 62
23989: PUSH
23990: LD_EXP 63
23994: PUSH
23995: LD_EXP 64
23999: PUSH
24000: LD_EXP 65
24004: PUSH
24005: LD_EXP 66
24009: PUSH
24010: LD_EXP 74
24014: PUSH
24015: LD_EXP 75
24019: PUSH
24020: LD_EXP 76
24024: PUSH
24025: LD_EXP 77
24029: PUSH
24030: LD_EXP 79
24034: PUSH
24035: LD_EXP 80
24039: PUSH
24040: LD_EXP 81
24044: PUSH
24045: LD_EXP 84
24049: PUSH
24050: LD_EXP 86
24054: PUSH
24055: LD_EXP 87
24059: PUSH
24060: LD_EXP 88
24064: PUSH
24065: LD_EXP 90
24069: PUSH
24070: LD_EXP 91
24074: PUSH
24075: LD_EXP 94
24079: PUSH
24080: LD_EXP 95
24084: PUSH
24085: LD_EXP 96
24089: PUSH
24090: LD_EXP 97
24094: PUSH
24095: LD_EXP 98
24099: PUSH
24100: LD_EXP 99
24104: PUSH
24105: LD_EXP 100
24109: PUSH
24110: LD_EXP 101
24114: PUSH
24115: LD_EXP 102
24119: PUSH
24120: LD_EXP 67
24124: PUSH
24125: LD_EXP 68
24129: PUSH
24130: LD_EXP 71
24134: PUSH
24135: LD_EXP 72
24139: PUSH
24140: LD_EXP 73
24144: PUSH
24145: LD_EXP 69
24149: PUSH
24150: LD_EXP 70
24154: PUSH
24155: LD_EXP 78
24159: PUSH
24160: LD_EXP 82
24164: PUSH
24165: LD_EXP 83
24169: PUSH
24170: LD_EXP 85
24174: PUSH
24175: LD_EXP 89
24179: PUSH
24180: LD_EXP 92
24184: PUSH
24185: LD_EXP 93
24189: PUSH
24190: LD_EXP 103
24194: PUSH
24195: LD_EXP 104
24199: PUSH
24200: LD_EXP 105
24204: PUSH
24205: LD_EXP 106
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: ST_TO_ADDR
// tmp :=  ;
24266: LD_ADDR_VAR 0 3
24270: PUSH
24271: LD_STRING 
24273: ST_TO_ADDR
// for i = 1 to normalCounter do
24274: LD_ADDR_VAR 0 8
24278: PUSH
24279: DOUBLE
24280: LD_INT 1
24282: DEC
24283: ST_TO_ADDR
24284: LD_EXP 51
24288: PUSH
24289: FOR_TO
24290: IFFALSE 24326
// begin if flags [ i ] then
24292: LD_VAR 0 4
24296: PUSH
24297: LD_VAR 0 8
24301: ARRAY
24302: IFFALSE 24324
// tmp := tmp & i & ; ;
24304: LD_ADDR_VAR 0 3
24308: PUSH
24309: LD_VAR 0 3
24313: PUSH
24314: LD_VAR 0 8
24318: STR
24319: PUSH
24320: LD_STRING ;
24322: STR
24323: ST_TO_ADDR
// end ;
24324: GO 24289
24326: POP
24327: POP
// for i = 1 to hardcoreCounter do
24328: LD_ADDR_VAR 0 8
24332: PUSH
24333: DOUBLE
24334: LD_INT 1
24336: DEC
24337: ST_TO_ADDR
24338: LD_EXP 52
24342: PUSH
24343: FOR_TO
24344: IFFALSE 24390
// begin if flags [ normalCounter + i ] then
24346: LD_VAR 0 4
24350: PUSH
24351: LD_EXP 51
24355: PUSH
24356: LD_VAR 0 8
24360: PLUS
24361: ARRAY
24362: IFFALSE 24388
// tmp := tmp & ( 100 + i ) & ; ;
24364: LD_ADDR_VAR 0 3
24368: PUSH
24369: LD_VAR 0 3
24373: PUSH
24374: LD_INT 100
24376: PUSH
24377: LD_VAR 0 8
24381: PLUS
24382: STR
24383: PUSH
24384: LD_STRING ;
24386: STR
24387: ST_TO_ADDR
// end ;
24388: GO 24343
24390: POP
24391: POP
// if tmp then
24392: LD_VAR 0 3
24396: IFFALSE 24408
// active := tmp ;
24398: LD_ADDR_VAR 0 7
24402: PUSH
24403: LD_VAR 0 3
24407: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24408: LD_STRING getStreamItemsFromMission("
24410: PUSH
24411: LD_VAR 0 5
24415: STR
24416: PUSH
24417: LD_STRING ","
24419: STR
24420: PUSH
24421: LD_VAR 0 6
24425: STR
24426: PUSH
24427: LD_STRING ","
24429: STR
24430: PUSH
24431: LD_VAR 0 7
24435: STR
24436: PUSH
24437: LD_STRING ")
24439: STR
24440: PPUSH
24441: CALL_OW 559
// end else
24445: GO 24454
// ToLua ( getStreamItemsFromMission("","","") ) ;
24447: LD_STRING getStreamItemsFromMission("","","")
24449: PPUSH
24450: CALL_OW 559
// end ;
24454: LD_VAR 0 2
24458: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24459: LD_EXP 50
24463: PUSH
24464: LD_EXP 55
24468: AND
24469: IFFALSE 24593
24471: GO 24473
24473: DISABLE
24474: LD_INT 0
24476: PPUSH
24477: PPUSH
// begin enable ;
24478: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24479: LD_ADDR_VAR 0 2
24483: PUSH
24484: LD_INT 22
24486: PUSH
24487: LD_OWVAR 2
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: LD_INT 34
24501: PUSH
24502: LD_INT 7
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 34
24511: PUSH
24512: LD_INT 45
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 34
24521: PUSH
24522: LD_INT 28
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 34
24531: PUSH
24532: LD_INT 47
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PPUSH
24550: CALL_OW 69
24554: ST_TO_ADDR
// if not tmp then
24555: LD_VAR 0 2
24559: NOT
24560: IFFALSE 24564
// exit ;
24562: GO 24593
// for i in tmp do
24564: LD_ADDR_VAR 0 1
24568: PUSH
24569: LD_VAR 0 2
24573: PUSH
24574: FOR_IN
24575: IFFALSE 24591
// begin SetLives ( i , 0 ) ;
24577: LD_VAR 0 1
24581: PPUSH
24582: LD_INT 0
24584: PPUSH
24585: CALL_OW 234
// end ;
24589: GO 24574
24591: POP
24592: POP
// end ;
24593: PPOPN 2
24595: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24596: LD_EXP 50
24600: PUSH
24601: LD_EXP 56
24605: AND
24606: IFFALSE 24690
24608: GO 24610
24610: DISABLE
24611: LD_INT 0
24613: PPUSH
24614: PPUSH
// begin enable ;
24615: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24616: LD_ADDR_VAR 0 2
24620: PUSH
24621: LD_INT 22
24623: PUSH
24624: LD_OWVAR 2
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 32
24635: PUSH
24636: LD_INT 3
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PPUSH
24647: CALL_OW 69
24651: ST_TO_ADDR
// if not tmp then
24652: LD_VAR 0 2
24656: NOT
24657: IFFALSE 24661
// exit ;
24659: GO 24690
// for i in tmp do
24661: LD_ADDR_VAR 0 1
24665: PUSH
24666: LD_VAR 0 2
24670: PUSH
24671: FOR_IN
24672: IFFALSE 24688
// begin SetLives ( i , 0 ) ;
24674: LD_VAR 0 1
24678: PPUSH
24679: LD_INT 0
24681: PPUSH
24682: CALL_OW 234
// end ;
24686: GO 24671
24688: POP
24689: POP
// end ;
24690: PPOPN 2
24692: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24693: LD_EXP 50
24697: PUSH
24698: LD_EXP 53
24702: AND
24703: IFFALSE 24796
24705: GO 24707
24707: DISABLE
24708: LD_INT 0
24710: PPUSH
// begin enable ;
24711: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24712: LD_ADDR_VAR 0 1
24716: PUSH
24717: LD_INT 22
24719: PUSH
24720: LD_OWVAR 2
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 2
24731: PUSH
24732: LD_INT 25
24734: PUSH
24735: LD_INT 5
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 25
24744: PUSH
24745: LD_INT 9
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 25
24754: PUSH
24755: LD_INT 8
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PPUSH
24772: CALL_OW 69
24776: PUSH
24777: FOR_IN
24778: IFFALSE 24794
// begin SetClass ( i , 1 ) ;
24780: LD_VAR 0 1
24784: PPUSH
24785: LD_INT 1
24787: PPUSH
24788: CALL_OW 336
// end ;
24792: GO 24777
24794: POP
24795: POP
// end ;
24796: PPOPN 1
24798: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24799: LD_EXP 50
24803: PUSH
24804: LD_EXP 54
24808: AND
24809: PUSH
24810: LD_OWVAR 65
24814: PUSH
24815: LD_INT 7
24817: LESS
24818: AND
24819: IFFALSE 24833
24821: GO 24823
24823: DISABLE
// begin enable ;
24824: ENABLE
// game_speed := 7 ;
24825: LD_ADDR_OWVAR 65
24829: PUSH
24830: LD_INT 7
24832: ST_TO_ADDR
// end ;
24833: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24834: LD_EXP 50
24838: PUSH
24839: LD_EXP 57
24843: AND
24844: IFFALSE 25046
24846: GO 24848
24848: DISABLE
24849: LD_INT 0
24851: PPUSH
24852: PPUSH
24853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24854: LD_ADDR_VAR 0 3
24858: PUSH
24859: LD_INT 81
24861: PUSH
24862: LD_OWVAR 2
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 21
24873: PUSH
24874: LD_INT 1
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PPUSH
24885: CALL_OW 69
24889: ST_TO_ADDR
// if not tmp then
24890: LD_VAR 0 3
24894: NOT
24895: IFFALSE 24899
// exit ;
24897: GO 25046
// if tmp > 5 then
24899: LD_VAR 0 3
24903: PUSH
24904: LD_INT 5
24906: GREATER
24907: IFFALSE 24919
// k := 5 else
24909: LD_ADDR_VAR 0 2
24913: PUSH
24914: LD_INT 5
24916: ST_TO_ADDR
24917: GO 24929
// k := tmp ;
24919: LD_ADDR_VAR 0 2
24923: PUSH
24924: LD_VAR 0 3
24928: ST_TO_ADDR
// for i := 1 to k do
24929: LD_ADDR_VAR 0 1
24933: PUSH
24934: DOUBLE
24935: LD_INT 1
24937: DEC
24938: ST_TO_ADDR
24939: LD_VAR 0 2
24943: PUSH
24944: FOR_TO
24945: IFFALSE 25044
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24947: LD_VAR 0 3
24951: PUSH
24952: LD_VAR 0 1
24956: ARRAY
24957: PPUSH
24958: LD_VAR 0 1
24962: PUSH
24963: LD_INT 4
24965: MOD
24966: PUSH
24967: LD_INT 1
24969: PLUS
24970: PPUSH
24971: CALL_OW 259
24975: PUSH
24976: LD_INT 10
24978: LESS
24979: IFFALSE 25042
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24981: LD_VAR 0 3
24985: PUSH
24986: LD_VAR 0 1
24990: ARRAY
24991: PPUSH
24992: LD_VAR 0 1
24996: PUSH
24997: LD_INT 4
24999: MOD
25000: PUSH
25001: LD_INT 1
25003: PLUS
25004: PPUSH
25005: LD_VAR 0 3
25009: PUSH
25010: LD_VAR 0 1
25014: ARRAY
25015: PPUSH
25016: LD_VAR 0 1
25020: PUSH
25021: LD_INT 4
25023: MOD
25024: PUSH
25025: LD_INT 1
25027: PLUS
25028: PPUSH
25029: CALL_OW 259
25033: PUSH
25034: LD_INT 1
25036: PLUS
25037: PPUSH
25038: CALL_OW 237
25042: GO 24944
25044: POP
25045: POP
// end ;
25046: PPOPN 3
25048: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25049: LD_EXP 50
25053: PUSH
25054: LD_EXP 58
25058: AND
25059: IFFALSE 25079
25061: GO 25063
25063: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25064: LD_INT 4
25066: PPUSH
25067: LD_OWVAR 2
25071: PPUSH
25072: LD_INT 0
25074: PPUSH
25075: CALL_OW 324
25079: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25080: LD_EXP 50
25084: PUSH
25085: LD_EXP 87
25089: AND
25090: IFFALSE 25110
25092: GO 25094
25094: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25095: LD_INT 19
25097: PPUSH
25098: LD_OWVAR 2
25102: PPUSH
25103: LD_INT 0
25105: PPUSH
25106: CALL_OW 324
25110: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25111: LD_EXP 50
25115: PUSH
25116: LD_EXP 59
25120: AND
25121: IFFALSE 25223
25123: GO 25125
25125: DISABLE
25126: LD_INT 0
25128: PPUSH
25129: PPUSH
// begin enable ;
25130: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25131: LD_ADDR_VAR 0 2
25135: PUSH
25136: LD_INT 22
25138: PUSH
25139: LD_OWVAR 2
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 2
25150: PUSH
25151: LD_INT 34
25153: PUSH
25154: LD_INT 11
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 34
25163: PUSH
25164: LD_INT 30
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: LIST
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PPUSH
25180: CALL_OW 69
25184: ST_TO_ADDR
// if not tmp then
25185: LD_VAR 0 2
25189: NOT
25190: IFFALSE 25194
// exit ;
25192: GO 25223
// for i in tmp do
25194: LD_ADDR_VAR 0 1
25198: PUSH
25199: LD_VAR 0 2
25203: PUSH
25204: FOR_IN
25205: IFFALSE 25221
// begin SetLives ( i , 0 ) ;
25207: LD_VAR 0 1
25211: PPUSH
25212: LD_INT 0
25214: PPUSH
25215: CALL_OW 234
// end ;
25219: GO 25204
25221: POP
25222: POP
// end ;
25223: PPOPN 2
25225: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25226: LD_EXP 50
25230: PUSH
25231: LD_EXP 60
25235: AND
25236: IFFALSE 25256
25238: GO 25240
25240: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25241: LD_INT 32
25243: PPUSH
25244: LD_OWVAR 2
25248: PPUSH
25249: LD_INT 0
25251: PPUSH
25252: CALL_OW 324
25256: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25257: LD_EXP 50
25261: PUSH
25262: LD_EXP 61
25266: AND
25267: IFFALSE 25448
25269: GO 25271
25271: DISABLE
25272: LD_INT 0
25274: PPUSH
25275: PPUSH
25276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25277: LD_ADDR_VAR 0 2
25281: PUSH
25282: LD_INT 22
25284: PUSH
25285: LD_OWVAR 2
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 33
25296: PUSH
25297: LD_INT 3
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PPUSH
25308: CALL_OW 69
25312: ST_TO_ADDR
// if not tmp then
25313: LD_VAR 0 2
25317: NOT
25318: IFFALSE 25322
// exit ;
25320: GO 25448
// side := 0 ;
25322: LD_ADDR_VAR 0 3
25326: PUSH
25327: LD_INT 0
25329: ST_TO_ADDR
// for i := 1 to 8 do
25330: LD_ADDR_VAR 0 1
25334: PUSH
25335: DOUBLE
25336: LD_INT 1
25338: DEC
25339: ST_TO_ADDR
25340: LD_INT 8
25342: PUSH
25343: FOR_TO
25344: IFFALSE 25392
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25346: LD_OWVAR 2
25350: PUSH
25351: LD_VAR 0 1
25355: NONEQUAL
25356: PUSH
25357: LD_OWVAR 2
25361: PPUSH
25362: LD_VAR 0 1
25366: PPUSH
25367: CALL_OW 81
25371: PUSH
25372: LD_INT 2
25374: EQUAL
25375: AND
25376: IFFALSE 25390
// begin side := i ;
25378: LD_ADDR_VAR 0 3
25382: PUSH
25383: LD_VAR 0 1
25387: ST_TO_ADDR
// break ;
25388: GO 25392
// end ;
25390: GO 25343
25392: POP
25393: POP
// if not side then
25394: LD_VAR 0 3
25398: NOT
25399: IFFALSE 25403
// exit ;
25401: GO 25448
// for i := 1 to tmp do
25403: LD_ADDR_VAR 0 1
25407: PUSH
25408: DOUBLE
25409: LD_INT 1
25411: DEC
25412: ST_TO_ADDR
25413: LD_VAR 0 2
25417: PUSH
25418: FOR_TO
25419: IFFALSE 25446
// if Prob ( 60 ) then
25421: LD_INT 60
25423: PPUSH
25424: CALL_OW 13
25428: IFFALSE 25444
// SetSide ( i , side ) ;
25430: LD_VAR 0 1
25434: PPUSH
25435: LD_VAR 0 3
25439: PPUSH
25440: CALL_OW 235
25444: GO 25418
25446: POP
25447: POP
// end ;
25448: PPOPN 3
25450: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25451: LD_EXP 50
25455: PUSH
25456: LD_EXP 63
25460: AND
25461: IFFALSE 25580
25463: GO 25465
25465: DISABLE
25466: LD_INT 0
25468: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25469: LD_ADDR_VAR 0 1
25473: PUSH
25474: LD_INT 22
25476: PUSH
25477: LD_OWVAR 2
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 21
25488: PUSH
25489: LD_INT 1
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 3
25498: PUSH
25499: LD_INT 23
25501: PUSH
25502: LD_INT 0
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: LIST
25517: PPUSH
25518: CALL_OW 69
25522: PUSH
25523: FOR_IN
25524: IFFALSE 25578
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25526: LD_VAR 0 1
25530: PPUSH
25531: CALL_OW 257
25535: PUSH
25536: LD_INT 1
25538: PUSH
25539: LD_INT 2
25541: PUSH
25542: LD_INT 3
25544: PUSH
25545: LD_INT 4
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: IN
25554: IFFALSE 25576
// SetClass ( un , rand ( 1 , 4 ) ) ;
25556: LD_VAR 0 1
25560: PPUSH
25561: LD_INT 1
25563: PPUSH
25564: LD_INT 4
25566: PPUSH
25567: CALL_OW 12
25571: PPUSH
25572: CALL_OW 336
25576: GO 25523
25578: POP
25579: POP
// end ;
25580: PPOPN 1
25582: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25583: LD_EXP 50
25587: PUSH
25588: LD_EXP 62
25592: AND
25593: IFFALSE 25672
25595: GO 25597
25597: DISABLE
25598: LD_INT 0
25600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25601: LD_ADDR_VAR 0 1
25605: PUSH
25606: LD_INT 22
25608: PUSH
25609: LD_OWVAR 2
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 21
25620: PUSH
25621: LD_INT 3
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PPUSH
25632: CALL_OW 69
25636: ST_TO_ADDR
// if not tmp then
25637: LD_VAR 0 1
25641: NOT
25642: IFFALSE 25646
// exit ;
25644: GO 25672
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25646: LD_VAR 0 1
25650: PUSH
25651: LD_INT 1
25653: PPUSH
25654: LD_VAR 0 1
25658: PPUSH
25659: CALL_OW 12
25663: ARRAY
25664: PPUSH
25665: LD_INT 100
25667: PPUSH
25668: CALL_OW 234
// end ;
25672: PPOPN 1
25674: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25675: LD_EXP 50
25679: PUSH
25680: LD_EXP 64
25684: AND
25685: IFFALSE 25783
25687: GO 25689
25689: DISABLE
25690: LD_INT 0
25692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25693: LD_ADDR_VAR 0 1
25697: PUSH
25698: LD_INT 22
25700: PUSH
25701: LD_OWVAR 2
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 21
25712: PUSH
25713: LD_INT 1
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PPUSH
25724: CALL_OW 69
25728: ST_TO_ADDR
// if not tmp then
25729: LD_VAR 0 1
25733: NOT
25734: IFFALSE 25738
// exit ;
25736: GO 25783
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25738: LD_VAR 0 1
25742: PUSH
25743: LD_INT 1
25745: PPUSH
25746: LD_VAR 0 1
25750: PPUSH
25751: CALL_OW 12
25755: ARRAY
25756: PPUSH
25757: LD_INT 1
25759: PPUSH
25760: LD_INT 4
25762: PPUSH
25763: CALL_OW 12
25767: PPUSH
25768: LD_INT 3000
25770: PPUSH
25771: LD_INT 9000
25773: PPUSH
25774: CALL_OW 12
25778: PPUSH
25779: CALL_OW 492
// end ;
25783: PPOPN 1
25785: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25786: LD_EXP 50
25790: PUSH
25791: LD_EXP 65
25795: AND
25796: IFFALSE 25816
25798: GO 25800
25800: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25801: LD_INT 1
25803: PPUSH
25804: LD_OWVAR 2
25808: PPUSH
25809: LD_INT 0
25811: PPUSH
25812: CALL_OW 324
25816: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25817: LD_EXP 50
25821: PUSH
25822: LD_EXP 66
25826: AND
25827: IFFALSE 25910
25829: GO 25831
25831: DISABLE
25832: LD_INT 0
25834: PPUSH
25835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25836: LD_ADDR_VAR 0 2
25840: PUSH
25841: LD_INT 22
25843: PUSH
25844: LD_OWVAR 2
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 21
25855: PUSH
25856: LD_INT 3
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PPUSH
25867: CALL_OW 69
25871: ST_TO_ADDR
// if not tmp then
25872: LD_VAR 0 2
25876: NOT
25877: IFFALSE 25881
// exit ;
25879: GO 25910
// for i in tmp do
25881: LD_ADDR_VAR 0 1
25885: PUSH
25886: LD_VAR 0 2
25890: PUSH
25891: FOR_IN
25892: IFFALSE 25908
// SetBLevel ( i , 10 ) ;
25894: LD_VAR 0 1
25898: PPUSH
25899: LD_INT 10
25901: PPUSH
25902: CALL_OW 241
25906: GO 25891
25908: POP
25909: POP
// end ;
25910: PPOPN 2
25912: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25913: LD_EXP 50
25917: PUSH
25918: LD_EXP 67
25922: AND
25923: IFFALSE 26034
25925: GO 25927
25927: DISABLE
25928: LD_INT 0
25930: PPUSH
25931: PPUSH
25932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25933: LD_ADDR_VAR 0 3
25937: PUSH
25938: LD_INT 22
25940: PUSH
25941: LD_OWVAR 2
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 25
25952: PUSH
25953: LD_INT 1
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PPUSH
25964: CALL_OW 69
25968: ST_TO_ADDR
// if not tmp then
25969: LD_VAR 0 3
25973: NOT
25974: IFFALSE 25978
// exit ;
25976: GO 26034
// un := tmp [ rand ( 1 , tmp ) ] ;
25978: LD_ADDR_VAR 0 2
25982: PUSH
25983: LD_VAR 0 3
25987: PUSH
25988: LD_INT 1
25990: PPUSH
25991: LD_VAR 0 3
25995: PPUSH
25996: CALL_OW 12
26000: ARRAY
26001: ST_TO_ADDR
// if Crawls ( un ) then
26002: LD_VAR 0 2
26006: PPUSH
26007: CALL_OW 318
26011: IFFALSE 26022
// ComWalk ( un ) ;
26013: LD_VAR 0 2
26017: PPUSH
26018: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26022: LD_VAR 0 2
26026: PPUSH
26027: LD_INT 5
26029: PPUSH
26030: CALL_OW 336
// end ;
26034: PPOPN 3
26036: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26037: LD_EXP 50
26041: PUSH
26042: LD_EXP 68
26046: AND
26047: PUSH
26048: LD_OWVAR 67
26052: PUSH
26053: LD_INT 4
26055: LESS
26056: AND
26057: IFFALSE 26076
26059: GO 26061
26061: DISABLE
// begin Difficulty := Difficulty + 1 ;
26062: LD_ADDR_OWVAR 67
26066: PUSH
26067: LD_OWVAR 67
26071: PUSH
26072: LD_INT 1
26074: PLUS
26075: ST_TO_ADDR
// end ;
26076: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26077: LD_EXP 50
26081: PUSH
26082: LD_EXP 69
26086: AND
26087: IFFALSE 26190
26089: GO 26091
26091: DISABLE
26092: LD_INT 0
26094: PPUSH
// begin for i := 1 to 5 do
26095: LD_ADDR_VAR 0 1
26099: PUSH
26100: DOUBLE
26101: LD_INT 1
26103: DEC
26104: ST_TO_ADDR
26105: LD_INT 5
26107: PUSH
26108: FOR_TO
26109: IFFALSE 26188
// begin uc_nation := nation_nature ;
26111: LD_ADDR_OWVAR 21
26115: PUSH
26116: LD_INT 0
26118: ST_TO_ADDR
// uc_side := 0 ;
26119: LD_ADDR_OWVAR 20
26123: PUSH
26124: LD_INT 0
26126: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26127: LD_ADDR_OWVAR 29
26131: PUSH
26132: LD_INT 12
26134: PUSH
26135: LD_INT 12
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: ST_TO_ADDR
// hc_agressivity := 20 ;
26142: LD_ADDR_OWVAR 35
26146: PUSH
26147: LD_INT 20
26149: ST_TO_ADDR
// hc_class := class_tiger ;
26150: LD_ADDR_OWVAR 28
26154: PUSH
26155: LD_INT 14
26157: ST_TO_ADDR
// hc_gallery :=  ;
26158: LD_ADDR_OWVAR 33
26162: PUSH
26163: LD_STRING 
26165: ST_TO_ADDR
// hc_name :=  ;
26166: LD_ADDR_OWVAR 26
26170: PUSH
26171: LD_STRING 
26173: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26174: CALL_OW 44
26178: PPUSH
26179: LD_INT 0
26181: PPUSH
26182: CALL_OW 51
// end ;
26186: GO 26108
26188: POP
26189: POP
// end ;
26190: PPOPN 1
26192: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26193: LD_EXP 50
26197: PUSH
26198: LD_EXP 70
26202: AND
26203: IFFALSE 26212
26205: GO 26207
26207: DISABLE
// StreamSibBomb ;
26208: CALL 26213 0 0
26212: END
// export function StreamSibBomb ; var i , x , y ; begin
26213: LD_INT 0
26215: PPUSH
26216: PPUSH
26217: PPUSH
26218: PPUSH
// result := false ;
26219: LD_ADDR_VAR 0 1
26223: PUSH
26224: LD_INT 0
26226: ST_TO_ADDR
// for i := 1 to 16 do
26227: LD_ADDR_VAR 0 2
26231: PUSH
26232: DOUBLE
26233: LD_INT 1
26235: DEC
26236: ST_TO_ADDR
26237: LD_INT 16
26239: PUSH
26240: FOR_TO
26241: IFFALSE 26440
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26243: LD_ADDR_VAR 0 3
26247: PUSH
26248: LD_INT 10
26250: PUSH
26251: LD_INT 20
26253: PUSH
26254: LD_INT 30
26256: PUSH
26257: LD_INT 40
26259: PUSH
26260: LD_INT 50
26262: PUSH
26263: LD_INT 60
26265: PUSH
26266: LD_INT 70
26268: PUSH
26269: LD_INT 80
26271: PUSH
26272: LD_INT 90
26274: PUSH
26275: LD_INT 100
26277: PUSH
26278: LD_INT 110
26280: PUSH
26281: LD_INT 120
26283: PUSH
26284: LD_INT 130
26286: PUSH
26287: LD_INT 140
26289: PUSH
26290: LD_INT 150
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 1
26312: PPUSH
26313: LD_INT 15
26315: PPUSH
26316: CALL_OW 12
26320: ARRAY
26321: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26322: LD_ADDR_VAR 0 4
26326: PUSH
26327: LD_INT 10
26329: PUSH
26330: LD_INT 20
26332: PUSH
26333: LD_INT 30
26335: PUSH
26336: LD_INT 40
26338: PUSH
26339: LD_INT 50
26341: PUSH
26342: LD_INT 60
26344: PUSH
26345: LD_INT 70
26347: PUSH
26348: LD_INT 80
26350: PUSH
26351: LD_INT 90
26353: PUSH
26354: LD_INT 100
26356: PUSH
26357: LD_INT 110
26359: PUSH
26360: LD_INT 120
26362: PUSH
26363: LD_INT 130
26365: PUSH
26366: LD_INT 140
26368: PUSH
26369: LD_INT 150
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 1
26391: PPUSH
26392: LD_INT 15
26394: PPUSH
26395: CALL_OW 12
26399: ARRAY
26400: ST_TO_ADDR
// if ValidHex ( x , y ) then
26401: LD_VAR 0 3
26405: PPUSH
26406: LD_VAR 0 4
26410: PPUSH
26411: CALL_OW 488
26415: IFFALSE 26438
// begin result := [ x , y ] ;
26417: LD_ADDR_VAR 0 1
26421: PUSH
26422: LD_VAR 0 3
26426: PUSH
26427: LD_VAR 0 4
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: ST_TO_ADDR
// break ;
26436: GO 26440
// end ; end ;
26438: GO 26240
26440: POP
26441: POP
// if result then
26442: LD_VAR 0 1
26446: IFFALSE 26506
// begin ToLua ( playSibBomb() ) ;
26448: LD_STRING playSibBomb()
26450: PPUSH
26451: CALL_OW 559
// wait ( 0 0$14 ) ;
26455: LD_INT 490
26457: PPUSH
26458: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26462: LD_VAR 0 1
26466: PUSH
26467: LD_INT 1
26469: ARRAY
26470: PPUSH
26471: LD_VAR 0 1
26475: PUSH
26476: LD_INT 2
26478: ARRAY
26479: PPUSH
26480: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26484: LD_VAR 0 1
26488: PUSH
26489: LD_INT 1
26491: ARRAY
26492: PPUSH
26493: LD_VAR 0 1
26497: PUSH
26498: LD_INT 2
26500: ARRAY
26501: PPUSH
26502: CALL_OW 429
// end ; end ;
26506: LD_VAR 0 1
26510: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26511: LD_EXP 50
26515: PUSH
26516: LD_EXP 72
26520: AND
26521: IFFALSE 26533
26523: GO 26525
26525: DISABLE
// YouLost (  ) ;
26526: LD_STRING 
26528: PPUSH
26529: CALL_OW 104
26533: END
// every 0 0$1 trigger StreamModeActive and sFog do
26534: LD_EXP 50
26538: PUSH
26539: LD_EXP 71
26543: AND
26544: IFFALSE 26558
26546: GO 26548
26548: DISABLE
// FogOff ( your_side ) ;
26549: LD_OWVAR 2
26553: PPUSH
26554: CALL_OW 344
26558: END
// every 0 0$1 trigger StreamModeActive and sSun do
26559: LD_EXP 50
26563: PUSH
26564: LD_EXP 73
26568: AND
26569: IFFALSE 26597
26571: GO 26573
26573: DISABLE
// begin solar_recharge_percent := 0 ;
26574: LD_ADDR_OWVAR 79
26578: PUSH
26579: LD_INT 0
26581: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26582: LD_INT 10500
26584: PPUSH
26585: CALL_OW 67
// solar_recharge_percent := 100 ;
26589: LD_ADDR_OWVAR 79
26593: PUSH
26594: LD_INT 100
26596: ST_TO_ADDR
// end ;
26597: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26598: LD_EXP 50
26602: PUSH
26603: LD_EXP 74
26607: AND
26608: IFFALSE 26847
26610: GO 26612
26612: DISABLE
26613: LD_INT 0
26615: PPUSH
26616: PPUSH
26617: PPUSH
// begin tmp := [ ] ;
26618: LD_ADDR_VAR 0 3
26622: PUSH
26623: EMPTY
26624: ST_TO_ADDR
// for i := 1 to 6 do
26625: LD_ADDR_VAR 0 1
26629: PUSH
26630: DOUBLE
26631: LD_INT 1
26633: DEC
26634: ST_TO_ADDR
26635: LD_INT 6
26637: PUSH
26638: FOR_TO
26639: IFFALSE 26744
// begin uc_nation := nation_nature ;
26641: LD_ADDR_OWVAR 21
26645: PUSH
26646: LD_INT 0
26648: ST_TO_ADDR
// uc_side := 0 ;
26649: LD_ADDR_OWVAR 20
26653: PUSH
26654: LD_INT 0
26656: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26657: LD_ADDR_OWVAR 29
26661: PUSH
26662: LD_INT 12
26664: PUSH
26665: LD_INT 12
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: ST_TO_ADDR
// hc_agressivity := 20 ;
26672: LD_ADDR_OWVAR 35
26676: PUSH
26677: LD_INT 20
26679: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26680: LD_ADDR_OWVAR 28
26684: PUSH
26685: LD_INT 17
26687: ST_TO_ADDR
// hc_gallery :=  ;
26688: LD_ADDR_OWVAR 33
26692: PUSH
26693: LD_STRING 
26695: ST_TO_ADDR
// hc_name :=  ;
26696: LD_ADDR_OWVAR 26
26700: PUSH
26701: LD_STRING 
26703: ST_TO_ADDR
// un := CreateHuman ;
26704: LD_ADDR_VAR 0 2
26708: PUSH
26709: CALL_OW 44
26713: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26714: LD_VAR 0 2
26718: PPUSH
26719: LD_INT 1
26721: PPUSH
26722: CALL_OW 51
// tmp := tmp ^ un ;
26726: LD_ADDR_VAR 0 3
26730: PUSH
26731: LD_VAR 0 3
26735: PUSH
26736: LD_VAR 0 2
26740: ADD
26741: ST_TO_ADDR
// end ;
26742: GO 26638
26744: POP
26745: POP
// repeat wait ( 0 0$1 ) ;
26746: LD_INT 35
26748: PPUSH
26749: CALL_OW 67
// for un in tmp do
26753: LD_ADDR_VAR 0 2
26757: PUSH
26758: LD_VAR 0 3
26762: PUSH
26763: FOR_IN
26764: IFFALSE 26838
// begin if IsDead ( un ) then
26766: LD_VAR 0 2
26770: PPUSH
26771: CALL_OW 301
26775: IFFALSE 26795
// begin tmp := tmp diff un ;
26777: LD_ADDR_VAR 0 3
26781: PUSH
26782: LD_VAR 0 3
26786: PUSH
26787: LD_VAR 0 2
26791: DIFF
26792: ST_TO_ADDR
// continue ;
26793: GO 26763
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26795: LD_VAR 0 2
26799: PPUSH
26800: LD_INT 3
26802: PUSH
26803: LD_INT 22
26805: PUSH
26806: LD_INT 0
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PPUSH
26817: CALL_OW 69
26821: PPUSH
26822: LD_VAR 0 2
26826: PPUSH
26827: CALL_OW 74
26831: PPUSH
26832: CALL_OW 115
// end ;
26836: GO 26763
26838: POP
26839: POP
// until not tmp ;
26840: LD_VAR 0 3
26844: NOT
26845: IFFALSE 26746
// end ;
26847: PPOPN 3
26849: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26850: LD_EXP 50
26854: PUSH
26855: LD_EXP 75
26859: AND
26860: IFFALSE 26914
26862: GO 26864
26864: DISABLE
// begin ToLua ( displayTroll(); ) ;
26865: LD_STRING displayTroll();
26867: PPUSH
26868: CALL_OW 559
// wait ( 3 3$00 ) ;
26872: LD_INT 6300
26874: PPUSH
26875: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26879: LD_STRING hideTroll();
26881: PPUSH
26882: CALL_OW 559
// wait ( 1 1$00 ) ;
26886: LD_INT 2100
26888: PPUSH
26889: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26893: LD_STRING displayTroll();
26895: PPUSH
26896: CALL_OW 559
// wait ( 1 1$00 ) ;
26900: LD_INT 2100
26902: PPUSH
26903: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26907: LD_STRING hideTroll();
26909: PPUSH
26910: CALL_OW 559
// end ;
26914: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26915: LD_EXP 50
26919: PUSH
26920: LD_EXP 76
26924: AND
26925: IFFALSE 26988
26927: GO 26929
26929: DISABLE
26930: LD_INT 0
26932: PPUSH
// begin p := 0 ;
26933: LD_ADDR_VAR 0 1
26937: PUSH
26938: LD_INT 0
26940: ST_TO_ADDR
// repeat game_speed := 1 ;
26941: LD_ADDR_OWVAR 65
26945: PUSH
26946: LD_INT 1
26948: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26949: LD_INT 35
26951: PPUSH
26952: CALL_OW 67
// p := p + 1 ;
26956: LD_ADDR_VAR 0 1
26960: PUSH
26961: LD_VAR 0 1
26965: PUSH
26966: LD_INT 1
26968: PLUS
26969: ST_TO_ADDR
// until p >= 60 ;
26970: LD_VAR 0 1
26974: PUSH
26975: LD_INT 60
26977: GREATEREQUAL
26978: IFFALSE 26941
// game_speed := 4 ;
26980: LD_ADDR_OWVAR 65
26984: PUSH
26985: LD_INT 4
26987: ST_TO_ADDR
// end ;
26988: PPOPN 1
26990: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26991: LD_EXP 50
26995: PUSH
26996: LD_EXP 77
27000: AND
27001: IFFALSE 27147
27003: GO 27005
27005: DISABLE
27006: LD_INT 0
27008: PPUSH
27009: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27010: LD_ADDR_VAR 0 1
27014: PUSH
27015: LD_INT 22
27017: PUSH
27018: LD_OWVAR 2
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 2
27029: PUSH
27030: LD_INT 30
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 30
27042: PUSH
27043: LD_INT 1
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: LIST
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PPUSH
27059: CALL_OW 69
27063: ST_TO_ADDR
// if not depot then
27064: LD_VAR 0 1
27068: NOT
27069: IFFALSE 27073
// exit ;
27071: GO 27147
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27073: LD_ADDR_VAR 0 2
27077: PUSH
27078: LD_VAR 0 1
27082: PUSH
27083: LD_INT 1
27085: PPUSH
27086: LD_VAR 0 1
27090: PPUSH
27091: CALL_OW 12
27095: ARRAY
27096: PPUSH
27097: CALL_OW 274
27101: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27102: LD_VAR 0 2
27106: PPUSH
27107: LD_INT 1
27109: PPUSH
27110: LD_INT 0
27112: PPUSH
27113: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27117: LD_VAR 0 2
27121: PPUSH
27122: LD_INT 2
27124: PPUSH
27125: LD_INT 0
27127: PPUSH
27128: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27132: LD_VAR 0 2
27136: PPUSH
27137: LD_INT 3
27139: PPUSH
27140: LD_INT 0
27142: PPUSH
27143: CALL_OW 277
// end ;
27147: PPOPN 2
27149: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27150: LD_EXP 50
27154: PUSH
27155: LD_EXP 78
27159: AND
27160: IFFALSE 27257
27162: GO 27164
27164: DISABLE
27165: LD_INT 0
27167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27168: LD_ADDR_VAR 0 1
27172: PUSH
27173: LD_INT 22
27175: PUSH
27176: LD_OWVAR 2
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 21
27187: PUSH
27188: LD_INT 1
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 3
27197: PUSH
27198: LD_INT 23
27200: PUSH
27201: LD_INT 0
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: LIST
27216: PPUSH
27217: CALL_OW 69
27221: ST_TO_ADDR
// if not tmp then
27222: LD_VAR 0 1
27226: NOT
27227: IFFALSE 27231
// exit ;
27229: GO 27257
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27231: LD_VAR 0 1
27235: PUSH
27236: LD_INT 1
27238: PPUSH
27239: LD_VAR 0 1
27243: PPUSH
27244: CALL_OW 12
27248: ARRAY
27249: PPUSH
27250: LD_INT 200
27252: PPUSH
27253: CALL_OW 234
// end ;
27257: PPOPN 1
27259: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27260: LD_EXP 50
27264: PUSH
27265: LD_EXP 79
27269: AND
27270: IFFALSE 27349
27272: GO 27274
27274: DISABLE
27275: LD_INT 0
27277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27278: LD_ADDR_VAR 0 1
27282: PUSH
27283: LD_INT 22
27285: PUSH
27286: LD_OWVAR 2
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 21
27297: PUSH
27298: LD_INT 2
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PPUSH
27309: CALL_OW 69
27313: ST_TO_ADDR
// if not tmp then
27314: LD_VAR 0 1
27318: NOT
27319: IFFALSE 27323
// exit ;
27321: GO 27349
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27323: LD_VAR 0 1
27327: PUSH
27328: LD_INT 1
27330: PPUSH
27331: LD_VAR 0 1
27335: PPUSH
27336: CALL_OW 12
27340: ARRAY
27341: PPUSH
27342: LD_INT 60
27344: PPUSH
27345: CALL_OW 234
// end ;
27349: PPOPN 1
27351: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27352: LD_EXP 50
27356: PUSH
27357: LD_EXP 80
27361: AND
27362: IFFALSE 27461
27364: GO 27366
27366: DISABLE
27367: LD_INT 0
27369: PPUSH
27370: PPUSH
// begin enable ;
27371: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27372: LD_ADDR_VAR 0 1
27376: PUSH
27377: LD_INT 22
27379: PUSH
27380: LD_OWVAR 2
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 61
27391: PUSH
27392: EMPTY
27393: LIST
27394: PUSH
27395: LD_INT 33
27397: PUSH
27398: LD_INT 2
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: LIST
27409: PPUSH
27410: CALL_OW 69
27414: ST_TO_ADDR
// if not tmp then
27415: LD_VAR 0 1
27419: NOT
27420: IFFALSE 27424
// exit ;
27422: GO 27461
// for i in tmp do
27424: LD_ADDR_VAR 0 2
27428: PUSH
27429: LD_VAR 0 1
27433: PUSH
27434: FOR_IN
27435: IFFALSE 27459
// if IsControledBy ( i ) then
27437: LD_VAR 0 2
27441: PPUSH
27442: CALL_OW 312
27446: IFFALSE 27457
// ComUnlink ( i ) ;
27448: LD_VAR 0 2
27452: PPUSH
27453: CALL_OW 136
27457: GO 27434
27459: POP
27460: POP
// end ;
27461: PPOPN 2
27463: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27464: LD_EXP 50
27468: PUSH
27469: LD_EXP 81
27473: AND
27474: IFFALSE 27614
27476: GO 27478
27478: DISABLE
27479: LD_INT 0
27481: PPUSH
27482: PPUSH
// begin ToLua ( displayPowell(); ) ;
27483: LD_STRING displayPowell();
27485: PPUSH
27486: CALL_OW 559
// uc_side := 0 ;
27490: LD_ADDR_OWVAR 20
27494: PUSH
27495: LD_INT 0
27497: ST_TO_ADDR
// uc_nation := 2 ;
27498: LD_ADDR_OWVAR 21
27502: PUSH
27503: LD_INT 2
27505: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27506: LD_ADDR_OWVAR 37
27510: PUSH
27511: LD_INT 14
27513: ST_TO_ADDR
// vc_engine := engine_siberite ;
27514: LD_ADDR_OWVAR 39
27518: PUSH
27519: LD_INT 3
27521: ST_TO_ADDR
// vc_control := control_apeman ;
27522: LD_ADDR_OWVAR 38
27526: PUSH
27527: LD_INT 5
27529: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27530: LD_ADDR_OWVAR 40
27534: PUSH
27535: LD_INT 29
27537: ST_TO_ADDR
// un := CreateVehicle ;
27538: LD_ADDR_VAR 0 2
27542: PUSH
27543: CALL_OW 45
27547: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27548: LD_VAR 0 2
27552: PPUSH
27553: LD_INT 1
27555: PPUSH
27556: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27560: LD_INT 35
27562: PPUSH
27563: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27567: LD_VAR 0 2
27571: PPUSH
27572: LD_INT 22
27574: PUSH
27575: LD_OWVAR 2
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PPUSH
27584: CALL_OW 69
27588: PPUSH
27589: LD_VAR 0 2
27593: PPUSH
27594: CALL_OW 74
27598: PPUSH
27599: CALL_OW 115
// until IsDead ( un ) ;
27603: LD_VAR 0 2
27607: PPUSH
27608: CALL_OW 301
27612: IFFALSE 27560
// end ;
27614: PPOPN 2
27616: END
// every 0 0$1 trigger StreamModeActive and sStu do
27617: LD_EXP 50
27621: PUSH
27622: LD_EXP 89
27626: AND
27627: IFFALSE 27643
27629: GO 27631
27631: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27632: LD_STRING displayStucuk();
27634: PPUSH
27635: CALL_OW 559
// ResetFog ;
27639: CALL_OW 335
// end ;
27643: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27644: LD_EXP 50
27648: PUSH
27649: LD_EXP 82
27653: AND
27654: IFFALSE 27795
27656: GO 27658
27658: DISABLE
27659: LD_INT 0
27661: PPUSH
27662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27663: LD_ADDR_VAR 0 2
27667: PUSH
27668: LD_INT 22
27670: PUSH
27671: LD_OWVAR 2
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 21
27682: PUSH
27683: LD_INT 1
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PPUSH
27694: CALL_OW 69
27698: ST_TO_ADDR
// if not tmp then
27699: LD_VAR 0 2
27703: NOT
27704: IFFALSE 27708
// exit ;
27706: GO 27795
// un := tmp [ rand ( 1 , tmp ) ] ;
27708: LD_ADDR_VAR 0 1
27712: PUSH
27713: LD_VAR 0 2
27717: PUSH
27718: LD_INT 1
27720: PPUSH
27721: LD_VAR 0 2
27725: PPUSH
27726: CALL_OW 12
27730: ARRAY
27731: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27732: LD_VAR 0 1
27736: PPUSH
27737: LD_INT 0
27739: PPUSH
27740: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27744: LD_VAR 0 1
27748: PPUSH
27749: LD_OWVAR 3
27753: PUSH
27754: LD_VAR 0 1
27758: DIFF
27759: PPUSH
27760: LD_VAR 0 1
27764: PPUSH
27765: CALL_OW 74
27769: PPUSH
27770: CALL_OW 115
// wait ( 0 0$20 ) ;
27774: LD_INT 700
27776: PPUSH
27777: CALL_OW 67
// SetSide ( un , your_side ) ;
27781: LD_VAR 0 1
27785: PPUSH
27786: LD_OWVAR 2
27790: PPUSH
27791: CALL_OW 235
// end ;
27795: PPOPN 2
27797: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27798: LD_EXP 50
27802: PUSH
27803: LD_EXP 83
27807: AND
27808: IFFALSE 27914
27810: GO 27812
27812: DISABLE
27813: LD_INT 0
27815: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27816: LD_ADDR_VAR 0 1
27820: PUSH
27821: LD_INT 22
27823: PUSH
27824: LD_OWVAR 2
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 2
27835: PUSH
27836: LD_INT 30
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 30
27848: PUSH
27849: LD_INT 1
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: LIST
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PPUSH
27865: CALL_OW 69
27869: ST_TO_ADDR
// if not depot then
27870: LD_VAR 0 1
27874: NOT
27875: IFFALSE 27879
// exit ;
27877: GO 27914
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27879: LD_VAR 0 1
27883: PUSH
27884: LD_INT 1
27886: ARRAY
27887: PPUSH
27888: CALL_OW 250
27892: PPUSH
27893: LD_VAR 0 1
27897: PUSH
27898: LD_INT 1
27900: ARRAY
27901: PPUSH
27902: CALL_OW 251
27906: PPUSH
27907: LD_INT 70
27909: PPUSH
27910: CALL_OW 495
// end ;
27914: PPOPN 1
27916: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27917: LD_EXP 50
27921: PUSH
27922: LD_EXP 84
27926: AND
27927: IFFALSE 28138
27929: GO 27931
27931: DISABLE
27932: LD_INT 0
27934: PPUSH
27935: PPUSH
27936: PPUSH
27937: PPUSH
27938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27939: LD_ADDR_VAR 0 5
27943: PUSH
27944: LD_INT 22
27946: PUSH
27947: LD_OWVAR 2
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 21
27958: PUSH
27959: LD_INT 1
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PPUSH
27970: CALL_OW 69
27974: ST_TO_ADDR
// if not tmp then
27975: LD_VAR 0 5
27979: NOT
27980: IFFALSE 27984
// exit ;
27982: GO 28138
// for i in tmp do
27984: LD_ADDR_VAR 0 1
27988: PUSH
27989: LD_VAR 0 5
27993: PUSH
27994: FOR_IN
27995: IFFALSE 28136
// begin d := rand ( 0 , 5 ) ;
27997: LD_ADDR_VAR 0 4
28001: PUSH
28002: LD_INT 0
28004: PPUSH
28005: LD_INT 5
28007: PPUSH
28008: CALL_OW 12
28012: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28013: LD_ADDR_VAR 0 2
28017: PUSH
28018: LD_VAR 0 1
28022: PPUSH
28023: CALL_OW 250
28027: PPUSH
28028: LD_VAR 0 4
28032: PPUSH
28033: LD_INT 3
28035: PPUSH
28036: LD_INT 12
28038: PPUSH
28039: CALL_OW 12
28043: PPUSH
28044: CALL_OW 272
28048: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28049: LD_ADDR_VAR 0 3
28053: PUSH
28054: LD_VAR 0 1
28058: PPUSH
28059: CALL_OW 251
28063: PPUSH
28064: LD_VAR 0 4
28068: PPUSH
28069: LD_INT 3
28071: PPUSH
28072: LD_INT 12
28074: PPUSH
28075: CALL_OW 12
28079: PPUSH
28080: CALL_OW 273
28084: ST_TO_ADDR
// if ValidHex ( x , y ) then
28085: LD_VAR 0 2
28089: PPUSH
28090: LD_VAR 0 3
28094: PPUSH
28095: CALL_OW 488
28099: IFFALSE 28134
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28101: LD_VAR 0 1
28105: PPUSH
28106: LD_VAR 0 2
28110: PPUSH
28111: LD_VAR 0 3
28115: PPUSH
28116: LD_INT 3
28118: PPUSH
28119: LD_INT 6
28121: PPUSH
28122: CALL_OW 12
28126: PPUSH
28127: LD_INT 1
28129: PPUSH
28130: CALL_OW 483
// end ;
28134: GO 27994
28136: POP
28137: POP
// end ;
28138: PPOPN 5
28140: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28141: LD_EXP 50
28145: PUSH
28146: LD_EXP 85
28150: AND
28151: IFFALSE 28245
28153: GO 28155
28155: DISABLE
28156: LD_INT 0
28158: PPUSH
28159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28160: LD_ADDR_VAR 0 2
28164: PUSH
28165: LD_INT 22
28167: PUSH
28168: LD_OWVAR 2
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 32
28179: PUSH
28180: LD_INT 1
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 21
28189: PUSH
28190: LD_INT 2
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: LIST
28201: PPUSH
28202: CALL_OW 69
28206: ST_TO_ADDR
// if not tmp then
28207: LD_VAR 0 2
28211: NOT
28212: IFFALSE 28216
// exit ;
28214: GO 28245
// for i in tmp do
28216: LD_ADDR_VAR 0 1
28220: PUSH
28221: LD_VAR 0 2
28225: PUSH
28226: FOR_IN
28227: IFFALSE 28243
// SetFuel ( i , 0 ) ;
28229: LD_VAR 0 1
28233: PPUSH
28234: LD_INT 0
28236: PPUSH
28237: CALL_OW 240
28241: GO 28226
28243: POP
28244: POP
// end ;
28245: PPOPN 2
28247: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28248: LD_EXP 50
28252: PUSH
28253: LD_EXP 86
28257: AND
28258: IFFALSE 28324
28260: GO 28262
28262: DISABLE
28263: LD_INT 0
28265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28266: LD_ADDR_VAR 0 1
28270: PUSH
28271: LD_INT 22
28273: PUSH
28274: LD_OWVAR 2
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 30
28285: PUSH
28286: LD_INT 29
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PPUSH
28297: CALL_OW 69
28301: ST_TO_ADDR
// if not tmp then
28302: LD_VAR 0 1
28306: NOT
28307: IFFALSE 28311
// exit ;
28309: GO 28324
// DestroyUnit ( tmp [ 1 ] ) ;
28311: LD_VAR 0 1
28315: PUSH
28316: LD_INT 1
28318: ARRAY
28319: PPUSH
28320: CALL_OW 65
// end ;
28324: PPOPN 1
28326: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28327: LD_EXP 50
28331: PUSH
28332: LD_EXP 88
28336: AND
28337: IFFALSE 28466
28339: GO 28341
28341: DISABLE
28342: LD_INT 0
28344: PPUSH
// begin uc_side := 0 ;
28345: LD_ADDR_OWVAR 20
28349: PUSH
28350: LD_INT 0
28352: ST_TO_ADDR
// uc_nation := nation_arabian ;
28353: LD_ADDR_OWVAR 21
28357: PUSH
28358: LD_INT 2
28360: ST_TO_ADDR
// hc_gallery :=  ;
28361: LD_ADDR_OWVAR 33
28365: PUSH
28366: LD_STRING 
28368: ST_TO_ADDR
// hc_name :=  ;
28369: LD_ADDR_OWVAR 26
28373: PUSH
28374: LD_STRING 
28376: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28377: LD_INT 1
28379: PPUSH
28380: LD_INT 11
28382: PPUSH
28383: LD_INT 10
28385: PPUSH
28386: CALL_OW 380
// un := CreateHuman ;
28390: LD_ADDR_VAR 0 1
28394: PUSH
28395: CALL_OW 44
28399: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28400: LD_VAR 0 1
28404: PPUSH
28405: LD_INT 1
28407: PPUSH
28408: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28412: LD_INT 35
28414: PPUSH
28415: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28419: LD_VAR 0 1
28423: PPUSH
28424: LD_INT 22
28426: PUSH
28427: LD_OWVAR 2
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PPUSH
28436: CALL_OW 69
28440: PPUSH
28441: LD_VAR 0 1
28445: PPUSH
28446: CALL_OW 74
28450: PPUSH
28451: CALL_OW 115
// until IsDead ( un ) ;
28455: LD_VAR 0 1
28459: PPUSH
28460: CALL_OW 301
28464: IFFALSE 28412
// end ;
28466: PPOPN 1
28468: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28469: LD_EXP 50
28473: PUSH
28474: LD_EXP 90
28478: AND
28479: IFFALSE 28491
28481: GO 28483
28483: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28484: LD_STRING earthquake(getX(game), 0, 32)
28486: PPUSH
28487: CALL_OW 559
28491: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28492: LD_EXP 50
28496: PUSH
28497: LD_EXP 91
28501: AND
28502: IFFALSE 28593
28504: GO 28506
28506: DISABLE
28507: LD_INT 0
28509: PPUSH
// begin enable ;
28510: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28511: LD_ADDR_VAR 0 1
28515: PUSH
28516: LD_INT 22
28518: PUSH
28519: LD_OWVAR 2
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 21
28530: PUSH
28531: LD_INT 2
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 33
28540: PUSH
28541: LD_INT 3
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: LIST
28552: PPUSH
28553: CALL_OW 69
28557: ST_TO_ADDR
// if not tmp then
28558: LD_VAR 0 1
28562: NOT
28563: IFFALSE 28567
// exit ;
28565: GO 28593
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28567: LD_VAR 0 1
28571: PUSH
28572: LD_INT 1
28574: PPUSH
28575: LD_VAR 0 1
28579: PPUSH
28580: CALL_OW 12
28584: ARRAY
28585: PPUSH
28586: LD_INT 1
28588: PPUSH
28589: CALL_OW 234
// end ;
28593: PPOPN 1
28595: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28596: LD_EXP 50
28600: PUSH
28601: LD_EXP 92
28605: AND
28606: IFFALSE 28747
28608: GO 28610
28610: DISABLE
28611: LD_INT 0
28613: PPUSH
28614: PPUSH
28615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28616: LD_ADDR_VAR 0 3
28620: PUSH
28621: LD_INT 22
28623: PUSH
28624: LD_OWVAR 2
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 25
28635: PUSH
28636: LD_INT 1
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PPUSH
28647: CALL_OW 69
28651: ST_TO_ADDR
// if not tmp then
28652: LD_VAR 0 3
28656: NOT
28657: IFFALSE 28661
// exit ;
28659: GO 28747
// un := tmp [ rand ( 1 , tmp ) ] ;
28661: LD_ADDR_VAR 0 2
28665: PUSH
28666: LD_VAR 0 3
28670: PUSH
28671: LD_INT 1
28673: PPUSH
28674: LD_VAR 0 3
28678: PPUSH
28679: CALL_OW 12
28683: ARRAY
28684: ST_TO_ADDR
// if Crawls ( un ) then
28685: LD_VAR 0 2
28689: PPUSH
28690: CALL_OW 318
28694: IFFALSE 28705
// ComWalk ( un ) ;
28696: LD_VAR 0 2
28700: PPUSH
28701: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28705: LD_VAR 0 2
28709: PPUSH
28710: LD_INT 9
28712: PPUSH
28713: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28717: LD_INT 28
28719: PPUSH
28720: LD_OWVAR 2
28724: PPUSH
28725: LD_INT 2
28727: PPUSH
28728: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28732: LD_INT 29
28734: PPUSH
28735: LD_OWVAR 2
28739: PPUSH
28740: LD_INT 2
28742: PPUSH
28743: CALL_OW 322
// end ;
28747: PPOPN 3
28749: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28750: LD_EXP 50
28754: PUSH
28755: LD_EXP 93
28759: AND
28760: IFFALSE 28871
28762: GO 28764
28764: DISABLE
28765: LD_INT 0
28767: PPUSH
28768: PPUSH
28769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28770: LD_ADDR_VAR 0 3
28774: PUSH
28775: LD_INT 22
28777: PUSH
28778: LD_OWVAR 2
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 25
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PPUSH
28801: CALL_OW 69
28805: ST_TO_ADDR
// if not tmp then
28806: LD_VAR 0 3
28810: NOT
28811: IFFALSE 28815
// exit ;
28813: GO 28871
// un := tmp [ rand ( 1 , tmp ) ] ;
28815: LD_ADDR_VAR 0 2
28819: PUSH
28820: LD_VAR 0 3
28824: PUSH
28825: LD_INT 1
28827: PPUSH
28828: LD_VAR 0 3
28832: PPUSH
28833: CALL_OW 12
28837: ARRAY
28838: ST_TO_ADDR
// if Crawls ( un ) then
28839: LD_VAR 0 2
28843: PPUSH
28844: CALL_OW 318
28848: IFFALSE 28859
// ComWalk ( un ) ;
28850: LD_VAR 0 2
28854: PPUSH
28855: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28859: LD_VAR 0 2
28863: PPUSH
28864: LD_INT 8
28866: PPUSH
28867: CALL_OW 336
// end ;
28871: PPOPN 3
28873: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28874: LD_EXP 50
28878: PUSH
28879: LD_EXP 94
28883: AND
28884: IFFALSE 29028
28886: GO 28888
28888: DISABLE
28889: LD_INT 0
28891: PPUSH
28892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28893: LD_ADDR_VAR 0 2
28897: PUSH
28898: LD_INT 22
28900: PUSH
28901: LD_OWVAR 2
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 21
28912: PUSH
28913: LD_INT 2
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 2
28922: PUSH
28923: LD_INT 34
28925: PUSH
28926: LD_INT 12
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 34
28935: PUSH
28936: LD_INT 51
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 34
28945: PUSH
28946: LD_INT 32
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: LIST
28963: PPUSH
28964: CALL_OW 69
28968: ST_TO_ADDR
// if not tmp then
28969: LD_VAR 0 2
28973: NOT
28974: IFFALSE 28978
// exit ;
28976: GO 29028
// for i in tmp do
28978: LD_ADDR_VAR 0 1
28982: PUSH
28983: LD_VAR 0 2
28987: PUSH
28988: FOR_IN
28989: IFFALSE 29026
// if GetCargo ( i , mat_artifact ) = 0 then
28991: LD_VAR 0 1
28995: PPUSH
28996: LD_INT 4
28998: PPUSH
28999: CALL_OW 289
29003: PUSH
29004: LD_INT 0
29006: EQUAL
29007: IFFALSE 29024
// SetCargo ( i , mat_siberit , 100 ) ;
29009: LD_VAR 0 1
29013: PPUSH
29014: LD_INT 3
29016: PPUSH
29017: LD_INT 100
29019: PPUSH
29020: CALL_OW 290
29024: GO 28988
29026: POP
29027: POP
// end ;
29028: PPOPN 2
29030: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29031: LD_EXP 50
29035: PUSH
29036: LD_EXP 95
29040: AND
29041: IFFALSE 29224
29043: GO 29045
29045: DISABLE
29046: LD_INT 0
29048: PPUSH
29049: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29050: LD_ADDR_VAR 0 2
29054: PUSH
29055: LD_INT 22
29057: PUSH
29058: LD_OWVAR 2
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PPUSH
29067: CALL_OW 69
29071: ST_TO_ADDR
// if not tmp then
29072: LD_VAR 0 2
29076: NOT
29077: IFFALSE 29081
// exit ;
29079: GO 29224
// for i := 1 to 2 do
29081: LD_ADDR_VAR 0 1
29085: PUSH
29086: DOUBLE
29087: LD_INT 1
29089: DEC
29090: ST_TO_ADDR
29091: LD_INT 2
29093: PUSH
29094: FOR_TO
29095: IFFALSE 29222
// begin uc_side := your_side ;
29097: LD_ADDR_OWVAR 20
29101: PUSH
29102: LD_OWVAR 2
29106: ST_TO_ADDR
// uc_nation := nation_american ;
29107: LD_ADDR_OWVAR 21
29111: PUSH
29112: LD_INT 1
29114: ST_TO_ADDR
// vc_chassis := us_morphling ;
29115: LD_ADDR_OWVAR 37
29119: PUSH
29120: LD_INT 5
29122: ST_TO_ADDR
// vc_engine := engine_siberite ;
29123: LD_ADDR_OWVAR 39
29127: PUSH
29128: LD_INT 3
29130: ST_TO_ADDR
// vc_control := control_computer ;
29131: LD_ADDR_OWVAR 38
29135: PUSH
29136: LD_INT 3
29138: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29139: LD_ADDR_OWVAR 40
29143: PUSH
29144: LD_INT 10
29146: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29147: LD_VAR 0 2
29151: PUSH
29152: LD_INT 1
29154: ARRAY
29155: PPUSH
29156: CALL_OW 310
29160: NOT
29161: IFFALSE 29208
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29163: CALL_OW 45
29167: PPUSH
29168: LD_VAR 0 2
29172: PUSH
29173: LD_INT 1
29175: ARRAY
29176: PPUSH
29177: CALL_OW 250
29181: PPUSH
29182: LD_VAR 0 2
29186: PUSH
29187: LD_INT 1
29189: ARRAY
29190: PPUSH
29191: CALL_OW 251
29195: PPUSH
29196: LD_INT 12
29198: PPUSH
29199: LD_INT 1
29201: PPUSH
29202: CALL_OW 50
29206: GO 29220
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29208: CALL_OW 45
29212: PPUSH
29213: LD_INT 1
29215: PPUSH
29216: CALL_OW 51
// end ;
29220: GO 29094
29222: POP
29223: POP
// end ;
29224: PPOPN 2
29226: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29227: LD_EXP 50
29231: PUSH
29232: LD_EXP 96
29236: AND
29237: IFFALSE 29459
29239: GO 29241
29241: DISABLE
29242: LD_INT 0
29244: PPUSH
29245: PPUSH
29246: PPUSH
29247: PPUSH
29248: PPUSH
29249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29250: LD_ADDR_VAR 0 6
29254: PUSH
29255: LD_INT 22
29257: PUSH
29258: LD_OWVAR 2
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 21
29269: PUSH
29270: LD_INT 1
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 3
29279: PUSH
29280: LD_INT 23
29282: PUSH
29283: LD_INT 0
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: LIST
29298: PPUSH
29299: CALL_OW 69
29303: ST_TO_ADDR
// if not tmp then
29304: LD_VAR 0 6
29308: NOT
29309: IFFALSE 29313
// exit ;
29311: GO 29459
// s1 := rand ( 1 , 4 ) ;
29313: LD_ADDR_VAR 0 2
29317: PUSH
29318: LD_INT 1
29320: PPUSH
29321: LD_INT 4
29323: PPUSH
29324: CALL_OW 12
29328: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29329: LD_ADDR_VAR 0 4
29333: PUSH
29334: LD_VAR 0 6
29338: PUSH
29339: LD_INT 1
29341: ARRAY
29342: PPUSH
29343: LD_VAR 0 2
29347: PPUSH
29348: CALL_OW 259
29352: ST_TO_ADDR
// if s1 = 1 then
29353: LD_VAR 0 2
29357: PUSH
29358: LD_INT 1
29360: EQUAL
29361: IFFALSE 29381
// s2 := rand ( 2 , 4 ) else
29363: LD_ADDR_VAR 0 3
29367: PUSH
29368: LD_INT 2
29370: PPUSH
29371: LD_INT 4
29373: PPUSH
29374: CALL_OW 12
29378: ST_TO_ADDR
29379: GO 29389
// s2 := 1 ;
29381: LD_ADDR_VAR 0 3
29385: PUSH
29386: LD_INT 1
29388: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29389: LD_ADDR_VAR 0 5
29393: PUSH
29394: LD_VAR 0 6
29398: PUSH
29399: LD_INT 1
29401: ARRAY
29402: PPUSH
29403: LD_VAR 0 3
29407: PPUSH
29408: CALL_OW 259
29412: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29413: LD_VAR 0 6
29417: PUSH
29418: LD_INT 1
29420: ARRAY
29421: PPUSH
29422: LD_VAR 0 2
29426: PPUSH
29427: LD_VAR 0 5
29431: PPUSH
29432: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29436: LD_VAR 0 6
29440: PUSH
29441: LD_INT 1
29443: ARRAY
29444: PPUSH
29445: LD_VAR 0 3
29449: PPUSH
29450: LD_VAR 0 4
29454: PPUSH
29455: CALL_OW 237
// end ;
29459: PPOPN 6
29461: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29462: LD_EXP 50
29466: PUSH
29467: LD_EXP 97
29471: AND
29472: IFFALSE 29551
29474: GO 29476
29476: DISABLE
29477: LD_INT 0
29479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29480: LD_ADDR_VAR 0 1
29484: PUSH
29485: LD_INT 22
29487: PUSH
29488: LD_OWVAR 2
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 30
29499: PUSH
29500: LD_INT 3
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PPUSH
29511: CALL_OW 69
29515: ST_TO_ADDR
// if not tmp then
29516: LD_VAR 0 1
29520: NOT
29521: IFFALSE 29525
// exit ;
29523: GO 29551
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29525: LD_VAR 0 1
29529: PUSH
29530: LD_INT 1
29532: PPUSH
29533: LD_VAR 0 1
29537: PPUSH
29538: CALL_OW 12
29542: ARRAY
29543: PPUSH
29544: LD_INT 1
29546: PPUSH
29547: CALL_OW 234
// end ;
29551: PPOPN 1
29553: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29554: LD_EXP 50
29558: PUSH
29559: LD_EXP 98
29563: AND
29564: IFFALSE 29676
29566: GO 29568
29568: DISABLE
29569: LD_INT 0
29571: PPUSH
29572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29573: LD_ADDR_VAR 0 2
29577: PUSH
29578: LD_INT 22
29580: PUSH
29581: LD_OWVAR 2
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 2
29592: PUSH
29593: LD_INT 30
29595: PUSH
29596: LD_INT 27
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 30
29605: PUSH
29606: LD_INT 26
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 30
29615: PUSH
29616: LD_INT 28
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PPUSH
29633: CALL_OW 69
29637: ST_TO_ADDR
// if not tmp then
29638: LD_VAR 0 2
29642: NOT
29643: IFFALSE 29647
// exit ;
29645: GO 29676
// for i in tmp do
29647: LD_ADDR_VAR 0 1
29651: PUSH
29652: LD_VAR 0 2
29656: PUSH
29657: FOR_IN
29658: IFFALSE 29674
// SetLives ( i , 1 ) ;
29660: LD_VAR 0 1
29664: PPUSH
29665: LD_INT 1
29667: PPUSH
29668: CALL_OW 234
29672: GO 29657
29674: POP
29675: POP
// end ;
29676: PPOPN 2
29678: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29679: LD_EXP 50
29683: PUSH
29684: LD_EXP 99
29688: AND
29689: IFFALSE 29976
29691: GO 29693
29693: DISABLE
29694: LD_INT 0
29696: PPUSH
29697: PPUSH
29698: PPUSH
// begin i := rand ( 1 , 7 ) ;
29699: LD_ADDR_VAR 0 1
29703: PUSH
29704: LD_INT 1
29706: PPUSH
29707: LD_INT 7
29709: PPUSH
29710: CALL_OW 12
29714: ST_TO_ADDR
// case i of 1 :
29715: LD_VAR 0 1
29719: PUSH
29720: LD_INT 1
29722: DOUBLE
29723: EQUAL
29724: IFTRUE 29728
29726: GO 29738
29728: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29729: LD_STRING earthquake(getX(game), 0, 32)
29731: PPUSH
29732: CALL_OW 559
29736: GO 29976
29738: LD_INT 2
29740: DOUBLE
29741: EQUAL
29742: IFTRUE 29746
29744: GO 29760
29746: POP
// begin ToLua ( displayStucuk(); ) ;
29747: LD_STRING displayStucuk();
29749: PPUSH
29750: CALL_OW 559
// ResetFog ;
29754: CALL_OW 335
// end ; 3 :
29758: GO 29976
29760: LD_INT 3
29762: DOUBLE
29763: EQUAL
29764: IFTRUE 29768
29766: GO 29872
29768: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29769: LD_ADDR_VAR 0 2
29773: PUSH
29774: LD_INT 22
29776: PUSH
29777: LD_OWVAR 2
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 25
29788: PUSH
29789: LD_INT 1
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PPUSH
29800: CALL_OW 69
29804: ST_TO_ADDR
// if not tmp then
29805: LD_VAR 0 2
29809: NOT
29810: IFFALSE 29814
// exit ;
29812: GO 29976
// un := tmp [ rand ( 1 , tmp ) ] ;
29814: LD_ADDR_VAR 0 3
29818: PUSH
29819: LD_VAR 0 2
29823: PUSH
29824: LD_INT 1
29826: PPUSH
29827: LD_VAR 0 2
29831: PPUSH
29832: CALL_OW 12
29836: ARRAY
29837: ST_TO_ADDR
// if Crawls ( un ) then
29838: LD_VAR 0 3
29842: PPUSH
29843: CALL_OW 318
29847: IFFALSE 29858
// ComWalk ( un ) ;
29849: LD_VAR 0 3
29853: PPUSH
29854: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29858: LD_VAR 0 3
29862: PPUSH
29863: LD_INT 8
29865: PPUSH
29866: CALL_OW 336
// end ; 4 :
29870: GO 29976
29872: LD_INT 4
29874: DOUBLE
29875: EQUAL
29876: IFTRUE 29880
29878: GO 29954
29880: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29881: LD_ADDR_VAR 0 2
29885: PUSH
29886: LD_INT 22
29888: PUSH
29889: LD_OWVAR 2
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 30
29900: PUSH
29901: LD_INT 29
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PPUSH
29912: CALL_OW 69
29916: ST_TO_ADDR
// if not tmp then
29917: LD_VAR 0 2
29921: NOT
29922: IFFALSE 29926
// exit ;
29924: GO 29976
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29926: LD_VAR 0 2
29930: PUSH
29931: LD_INT 1
29933: ARRAY
29934: PPUSH
29935: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29939: LD_VAR 0 2
29943: PUSH
29944: LD_INT 1
29946: ARRAY
29947: PPUSH
29948: CALL_OW 65
// end ; 5 .. 7 :
29952: GO 29976
29954: LD_INT 5
29956: DOUBLE
29957: GREATEREQUAL
29958: IFFALSE 29966
29960: LD_INT 7
29962: DOUBLE
29963: LESSEQUAL
29964: IFTRUE 29968
29966: GO 29975
29968: POP
// StreamSibBomb ; end ;
29969: CALL 26213 0 0
29973: GO 29976
29975: POP
// end ;
29976: PPOPN 3
29978: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29979: LD_EXP 50
29983: PUSH
29984: LD_EXP 100
29988: AND
29989: IFFALSE 30145
29991: GO 29993
29993: DISABLE
29994: LD_INT 0
29996: PPUSH
29997: PPUSH
29998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29999: LD_ADDR_VAR 0 2
30003: PUSH
30004: LD_INT 81
30006: PUSH
30007: LD_OWVAR 2
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 2
30018: PUSH
30019: LD_INT 21
30021: PUSH
30022: LD_INT 1
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 21
30031: PUSH
30032: LD_INT 2
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: LIST
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PPUSH
30048: CALL_OW 69
30052: ST_TO_ADDR
// if not tmp then
30053: LD_VAR 0 2
30057: NOT
30058: IFFALSE 30062
// exit ;
30060: GO 30145
// p := 0 ;
30062: LD_ADDR_VAR 0 3
30066: PUSH
30067: LD_INT 0
30069: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30070: LD_INT 35
30072: PPUSH
30073: CALL_OW 67
// p := p + 1 ;
30077: LD_ADDR_VAR 0 3
30081: PUSH
30082: LD_VAR 0 3
30086: PUSH
30087: LD_INT 1
30089: PLUS
30090: ST_TO_ADDR
// for i in tmp do
30091: LD_ADDR_VAR 0 1
30095: PUSH
30096: LD_VAR 0 2
30100: PUSH
30101: FOR_IN
30102: IFFALSE 30133
// if GetLives ( i ) < 1000 then
30104: LD_VAR 0 1
30108: PPUSH
30109: CALL_OW 256
30113: PUSH
30114: LD_INT 1000
30116: LESS
30117: IFFALSE 30131
// SetLives ( i , 1000 ) ;
30119: LD_VAR 0 1
30123: PPUSH
30124: LD_INT 1000
30126: PPUSH
30127: CALL_OW 234
30131: GO 30101
30133: POP
30134: POP
// until p > 20 ;
30135: LD_VAR 0 3
30139: PUSH
30140: LD_INT 20
30142: GREATER
30143: IFFALSE 30070
// end ;
30145: PPOPN 3
30147: END
// every 0 0$1 trigger StreamModeActive and sTime do
30148: LD_EXP 50
30152: PUSH
30153: LD_EXP 101
30157: AND
30158: IFFALSE 30193
30160: GO 30162
30162: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30163: LD_INT 28
30165: PPUSH
30166: LD_OWVAR 2
30170: PPUSH
30171: LD_INT 2
30173: PPUSH
30174: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30178: LD_INT 30
30180: PPUSH
30181: LD_OWVAR 2
30185: PPUSH
30186: LD_INT 2
30188: PPUSH
30189: CALL_OW 322
// end ;
30193: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30194: LD_EXP 50
30198: PUSH
30199: LD_EXP 102
30203: AND
30204: IFFALSE 30325
30206: GO 30208
30208: DISABLE
30209: LD_INT 0
30211: PPUSH
30212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30213: LD_ADDR_VAR 0 2
30217: PUSH
30218: LD_INT 22
30220: PUSH
30221: LD_OWVAR 2
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 21
30232: PUSH
30233: LD_INT 1
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 3
30242: PUSH
30243: LD_INT 23
30245: PUSH
30246: LD_INT 0
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: LIST
30261: PPUSH
30262: CALL_OW 69
30266: ST_TO_ADDR
// if not tmp then
30267: LD_VAR 0 2
30271: NOT
30272: IFFALSE 30276
// exit ;
30274: GO 30325
// for i in tmp do
30276: LD_ADDR_VAR 0 1
30280: PUSH
30281: LD_VAR 0 2
30285: PUSH
30286: FOR_IN
30287: IFFALSE 30323
// begin if Crawls ( i ) then
30289: LD_VAR 0 1
30293: PPUSH
30294: CALL_OW 318
30298: IFFALSE 30309
// ComWalk ( i ) ;
30300: LD_VAR 0 1
30304: PPUSH
30305: CALL_OW 138
// SetClass ( i , 2 ) ;
30309: LD_VAR 0 1
30313: PPUSH
30314: LD_INT 2
30316: PPUSH
30317: CALL_OW 336
// end ;
30321: GO 30286
30323: POP
30324: POP
// end ;
30325: PPOPN 2
30327: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30328: LD_EXP 50
30332: PUSH
30333: LD_EXP 103
30337: AND
30338: IFFALSE 30626
30340: GO 30342
30342: DISABLE
30343: LD_INT 0
30345: PPUSH
30346: PPUSH
30347: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30348: LD_OWVAR 2
30352: PPUSH
30353: LD_INT 9
30355: PPUSH
30356: LD_INT 1
30358: PPUSH
30359: LD_INT 1
30361: PPUSH
30362: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30366: LD_INT 9
30368: PPUSH
30369: LD_OWVAR 2
30373: PPUSH
30374: CALL_OW 343
// uc_side := 9 ;
30378: LD_ADDR_OWVAR 20
30382: PUSH
30383: LD_INT 9
30385: ST_TO_ADDR
// uc_nation := 2 ;
30386: LD_ADDR_OWVAR 21
30390: PUSH
30391: LD_INT 2
30393: ST_TO_ADDR
// hc_name := Dark Warrior ;
30394: LD_ADDR_OWVAR 26
30398: PUSH
30399: LD_STRING Dark Warrior
30401: ST_TO_ADDR
// hc_gallery :=  ;
30402: LD_ADDR_OWVAR 33
30406: PUSH
30407: LD_STRING 
30409: ST_TO_ADDR
// hc_noskilllimit := true ;
30410: LD_ADDR_OWVAR 76
30414: PUSH
30415: LD_INT 1
30417: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30418: LD_ADDR_OWVAR 31
30422: PUSH
30423: LD_INT 30
30425: PUSH
30426: LD_INT 30
30428: PUSH
30429: LD_INT 30
30431: PUSH
30432: LD_INT 30
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: ST_TO_ADDR
// un := CreateHuman ;
30441: LD_ADDR_VAR 0 3
30445: PUSH
30446: CALL_OW 44
30450: ST_TO_ADDR
// hc_noskilllimit := false ;
30451: LD_ADDR_OWVAR 76
30455: PUSH
30456: LD_INT 0
30458: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30459: LD_VAR 0 3
30463: PPUSH
30464: LD_INT 1
30466: PPUSH
30467: CALL_OW 51
// ToLua ( playRanger() ) ;
30471: LD_STRING playRanger()
30473: PPUSH
30474: CALL_OW 559
// p := 0 ;
30478: LD_ADDR_VAR 0 2
30482: PUSH
30483: LD_INT 0
30485: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30486: LD_INT 35
30488: PPUSH
30489: CALL_OW 67
// p := p + 1 ;
30493: LD_ADDR_VAR 0 2
30497: PUSH
30498: LD_VAR 0 2
30502: PUSH
30503: LD_INT 1
30505: PLUS
30506: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30507: LD_VAR 0 3
30511: PPUSH
30512: CALL_OW 256
30516: PUSH
30517: LD_INT 1000
30519: LESS
30520: IFFALSE 30534
// SetLives ( un , 1000 ) ;
30522: LD_VAR 0 3
30526: PPUSH
30527: LD_INT 1000
30529: PPUSH
30530: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30534: LD_VAR 0 3
30538: PPUSH
30539: LD_INT 81
30541: PUSH
30542: LD_OWVAR 2
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 91
30553: PUSH
30554: LD_VAR 0 3
30558: PUSH
30559: LD_INT 30
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: LIST
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PPUSH
30571: CALL_OW 69
30575: PPUSH
30576: LD_VAR 0 3
30580: PPUSH
30581: CALL_OW 74
30585: PPUSH
30586: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30590: LD_VAR 0 2
30594: PUSH
30595: LD_INT 80
30597: GREATER
30598: PUSH
30599: LD_VAR 0 3
30603: PPUSH
30604: CALL_OW 301
30608: OR
30609: IFFALSE 30486
// if un then
30611: LD_VAR 0 3
30615: IFFALSE 30626
// RemoveUnit ( un ) ;
30617: LD_VAR 0 3
30621: PPUSH
30622: CALL_OW 64
// end ;
30626: PPOPN 3
30628: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30629: LD_EXP 104
30633: IFFALSE 30749
30635: GO 30637
30637: DISABLE
30638: LD_INT 0
30640: PPUSH
30641: PPUSH
30642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30643: LD_ADDR_VAR 0 2
30647: PUSH
30648: LD_INT 81
30650: PUSH
30651: LD_OWVAR 2
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 21
30662: PUSH
30663: LD_INT 1
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PPUSH
30674: CALL_OW 69
30678: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30679: LD_STRING playComputer()
30681: PPUSH
30682: CALL_OW 559
// if not tmp then
30686: LD_VAR 0 2
30690: NOT
30691: IFFALSE 30695
// exit ;
30693: GO 30749
// for i in tmp do
30695: LD_ADDR_VAR 0 1
30699: PUSH
30700: LD_VAR 0 2
30704: PUSH
30705: FOR_IN
30706: IFFALSE 30747
// for j := 1 to 4 do
30708: LD_ADDR_VAR 0 3
30712: PUSH
30713: DOUBLE
30714: LD_INT 1
30716: DEC
30717: ST_TO_ADDR
30718: LD_INT 4
30720: PUSH
30721: FOR_TO
30722: IFFALSE 30743
// SetSkill ( i , j , 10 ) ;
30724: LD_VAR 0 1
30728: PPUSH
30729: LD_VAR 0 3
30733: PPUSH
30734: LD_INT 10
30736: PPUSH
30737: CALL_OW 237
30741: GO 30721
30743: POP
30744: POP
30745: GO 30705
30747: POP
30748: POP
// end ;
30749: PPOPN 3
30751: END
// every 0 0$1 trigger s30 do var i , tmp ;
30752: LD_EXP 105
30756: IFFALSE 30825
30758: GO 30760
30760: DISABLE
30761: LD_INT 0
30763: PPUSH
30764: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30765: LD_ADDR_VAR 0 2
30769: PUSH
30770: LD_INT 22
30772: PUSH
30773: LD_OWVAR 2
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PPUSH
30782: CALL_OW 69
30786: ST_TO_ADDR
// if not tmp then
30787: LD_VAR 0 2
30791: NOT
30792: IFFALSE 30796
// exit ;
30794: GO 30825
// for i in tmp do
30796: LD_ADDR_VAR 0 1
30800: PUSH
30801: LD_VAR 0 2
30805: PUSH
30806: FOR_IN
30807: IFFALSE 30823
// SetLives ( i , 300 ) ;
30809: LD_VAR 0 1
30813: PPUSH
30814: LD_INT 300
30816: PPUSH
30817: CALL_OW 234
30821: GO 30806
30823: POP
30824: POP
// end ;
30825: PPOPN 2
30827: END
// every 0 0$1 trigger s60 do var i , tmp ;
30828: LD_EXP 106
30832: IFFALSE 30901
30834: GO 30836
30836: DISABLE
30837: LD_INT 0
30839: PPUSH
30840: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30841: LD_ADDR_VAR 0 2
30845: PUSH
30846: LD_INT 22
30848: PUSH
30849: LD_OWVAR 2
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PPUSH
30858: CALL_OW 69
30862: ST_TO_ADDR
// if not tmp then
30863: LD_VAR 0 2
30867: NOT
30868: IFFALSE 30872
// exit ;
30870: GO 30901
// for i in tmp do
30872: LD_ADDR_VAR 0 1
30876: PUSH
30877: LD_VAR 0 2
30881: PUSH
30882: FOR_IN
30883: IFFALSE 30899
// SetLives ( i , 600 ) ;
30885: LD_VAR 0 1
30889: PPUSH
30890: LD_INT 600
30892: PPUSH
30893: CALL_OW 234
30897: GO 30882
30899: POP
30900: POP
// end ;
30901: PPOPN 2
30903: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30904: LD_INT 0
30906: PPUSH
// case cmd of 301 :
30907: LD_VAR 0 1
30911: PUSH
30912: LD_INT 301
30914: DOUBLE
30915: EQUAL
30916: IFTRUE 30920
30918: GO 30952
30920: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30921: LD_VAR 0 6
30925: PPUSH
30926: LD_VAR 0 7
30930: PPUSH
30931: LD_VAR 0 8
30935: PPUSH
30936: LD_VAR 0 4
30940: PPUSH
30941: LD_VAR 0 5
30945: PPUSH
30946: CALL 32153 0 5
30950: GO 31073
30952: LD_INT 302
30954: DOUBLE
30955: EQUAL
30956: IFTRUE 30960
30958: GO 30997
30960: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30961: LD_VAR 0 6
30965: PPUSH
30966: LD_VAR 0 7
30970: PPUSH
30971: LD_VAR 0 8
30975: PPUSH
30976: LD_VAR 0 9
30980: PPUSH
30981: LD_VAR 0 4
30985: PPUSH
30986: LD_VAR 0 5
30990: PPUSH
30991: CALL 32244 0 6
30995: GO 31073
30997: LD_INT 303
30999: DOUBLE
31000: EQUAL
31001: IFTRUE 31005
31003: GO 31042
31005: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31006: LD_VAR 0 6
31010: PPUSH
31011: LD_VAR 0 7
31015: PPUSH
31016: LD_VAR 0 8
31020: PPUSH
31021: LD_VAR 0 9
31025: PPUSH
31026: LD_VAR 0 4
31030: PPUSH
31031: LD_VAR 0 5
31035: PPUSH
31036: CALL 31078 0 6
31040: GO 31073
31042: LD_INT 304
31044: DOUBLE
31045: EQUAL
31046: IFTRUE 31050
31048: GO 31072
31050: POP
// hHackTeleport ( unit , x , y ) ; end ;
31051: LD_VAR 0 2
31055: PPUSH
31056: LD_VAR 0 4
31060: PPUSH
31061: LD_VAR 0 5
31065: PPUSH
31066: CALL 32837 0 3
31070: GO 31073
31072: POP
// end ;
31073: LD_VAR 0 12
31077: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31078: LD_INT 0
31080: PPUSH
31081: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31082: LD_VAR 0 1
31086: PUSH
31087: LD_INT 1
31089: LESS
31090: PUSH
31091: LD_VAR 0 1
31095: PUSH
31096: LD_INT 3
31098: GREATER
31099: OR
31100: PUSH
31101: LD_VAR 0 5
31105: PPUSH
31106: LD_VAR 0 6
31110: PPUSH
31111: CALL_OW 428
31115: OR
31116: IFFALSE 31120
// exit ;
31118: GO 31840
// uc_side := your_side ;
31120: LD_ADDR_OWVAR 20
31124: PUSH
31125: LD_OWVAR 2
31129: ST_TO_ADDR
// uc_nation := nation ;
31130: LD_ADDR_OWVAR 21
31134: PUSH
31135: LD_VAR 0 1
31139: ST_TO_ADDR
// bc_level = 1 ;
31140: LD_ADDR_OWVAR 43
31144: PUSH
31145: LD_INT 1
31147: ST_TO_ADDR
// case btype of 1 :
31148: LD_VAR 0 2
31152: PUSH
31153: LD_INT 1
31155: DOUBLE
31156: EQUAL
31157: IFTRUE 31161
31159: GO 31172
31161: POP
// bc_type := b_depot ; 2 :
31162: LD_ADDR_OWVAR 42
31166: PUSH
31167: LD_INT 0
31169: ST_TO_ADDR
31170: GO 31784
31172: LD_INT 2
31174: DOUBLE
31175: EQUAL
31176: IFTRUE 31180
31178: GO 31191
31180: POP
// bc_type := b_warehouse ; 3 :
31181: LD_ADDR_OWVAR 42
31185: PUSH
31186: LD_INT 1
31188: ST_TO_ADDR
31189: GO 31784
31191: LD_INT 3
31193: DOUBLE
31194: EQUAL
31195: IFTRUE 31199
31197: GO 31210
31199: POP
// bc_type := b_lab ; 4 .. 9 :
31200: LD_ADDR_OWVAR 42
31204: PUSH
31205: LD_INT 6
31207: ST_TO_ADDR
31208: GO 31784
31210: LD_INT 4
31212: DOUBLE
31213: GREATEREQUAL
31214: IFFALSE 31222
31216: LD_INT 9
31218: DOUBLE
31219: LESSEQUAL
31220: IFTRUE 31224
31222: GO 31276
31224: POP
// begin bc_type := b_lab_half ;
31225: LD_ADDR_OWVAR 42
31229: PUSH
31230: LD_INT 7
31232: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31233: LD_ADDR_OWVAR 44
31237: PUSH
31238: LD_INT 10
31240: PUSH
31241: LD_INT 11
31243: PUSH
31244: LD_INT 12
31246: PUSH
31247: LD_INT 15
31249: PUSH
31250: LD_INT 14
31252: PUSH
31253: LD_INT 13
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: PUSH
31264: LD_VAR 0 2
31268: PUSH
31269: LD_INT 3
31271: MINUS
31272: ARRAY
31273: ST_TO_ADDR
// end ; 10 .. 13 :
31274: GO 31784
31276: LD_INT 10
31278: DOUBLE
31279: GREATEREQUAL
31280: IFFALSE 31288
31282: LD_INT 13
31284: DOUBLE
31285: LESSEQUAL
31286: IFTRUE 31290
31288: GO 31367
31290: POP
// begin bc_type := b_lab_full ;
31291: LD_ADDR_OWVAR 42
31295: PUSH
31296: LD_INT 8
31298: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31299: LD_ADDR_OWVAR 44
31303: PUSH
31304: LD_INT 10
31306: PUSH
31307: LD_INT 12
31309: PUSH
31310: LD_INT 14
31312: PUSH
31313: LD_INT 13
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: PUSH
31322: LD_VAR 0 2
31326: PUSH
31327: LD_INT 9
31329: MINUS
31330: ARRAY
31331: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31332: LD_ADDR_OWVAR 45
31336: PUSH
31337: LD_INT 11
31339: PUSH
31340: LD_INT 15
31342: PUSH
31343: LD_INT 12
31345: PUSH
31346: LD_INT 15
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: PUSH
31355: LD_VAR 0 2
31359: PUSH
31360: LD_INT 9
31362: MINUS
31363: ARRAY
31364: ST_TO_ADDR
// end ; 14 :
31365: GO 31784
31367: LD_INT 14
31369: DOUBLE
31370: EQUAL
31371: IFTRUE 31375
31373: GO 31386
31375: POP
// bc_type := b_workshop ; 15 :
31376: LD_ADDR_OWVAR 42
31380: PUSH
31381: LD_INT 2
31383: ST_TO_ADDR
31384: GO 31784
31386: LD_INT 15
31388: DOUBLE
31389: EQUAL
31390: IFTRUE 31394
31392: GO 31405
31394: POP
// bc_type := b_factory ; 16 :
31395: LD_ADDR_OWVAR 42
31399: PUSH
31400: LD_INT 3
31402: ST_TO_ADDR
31403: GO 31784
31405: LD_INT 16
31407: DOUBLE
31408: EQUAL
31409: IFTRUE 31413
31411: GO 31424
31413: POP
// bc_type := b_ext_gun ; 17 :
31414: LD_ADDR_OWVAR 42
31418: PUSH
31419: LD_INT 17
31421: ST_TO_ADDR
31422: GO 31784
31424: LD_INT 17
31426: DOUBLE
31427: EQUAL
31428: IFTRUE 31432
31430: GO 31460
31432: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31433: LD_ADDR_OWVAR 42
31437: PUSH
31438: LD_INT 19
31440: PUSH
31441: LD_INT 23
31443: PUSH
31444: LD_INT 19
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: LIST
31451: PUSH
31452: LD_VAR 0 1
31456: ARRAY
31457: ST_TO_ADDR
31458: GO 31784
31460: LD_INT 18
31462: DOUBLE
31463: EQUAL
31464: IFTRUE 31468
31466: GO 31479
31468: POP
// bc_type := b_ext_radar ; 19 :
31469: LD_ADDR_OWVAR 42
31473: PUSH
31474: LD_INT 20
31476: ST_TO_ADDR
31477: GO 31784
31479: LD_INT 19
31481: DOUBLE
31482: EQUAL
31483: IFTRUE 31487
31485: GO 31498
31487: POP
// bc_type := b_ext_radio ; 20 :
31488: LD_ADDR_OWVAR 42
31492: PUSH
31493: LD_INT 22
31495: ST_TO_ADDR
31496: GO 31784
31498: LD_INT 20
31500: DOUBLE
31501: EQUAL
31502: IFTRUE 31506
31504: GO 31517
31506: POP
// bc_type := b_ext_siberium ; 21 :
31507: LD_ADDR_OWVAR 42
31511: PUSH
31512: LD_INT 21
31514: ST_TO_ADDR
31515: GO 31784
31517: LD_INT 21
31519: DOUBLE
31520: EQUAL
31521: IFTRUE 31525
31523: GO 31536
31525: POP
// bc_type := b_ext_computer ; 22 :
31526: LD_ADDR_OWVAR 42
31530: PUSH
31531: LD_INT 24
31533: ST_TO_ADDR
31534: GO 31784
31536: LD_INT 22
31538: DOUBLE
31539: EQUAL
31540: IFTRUE 31544
31542: GO 31555
31544: POP
// bc_type := b_ext_track ; 23 :
31545: LD_ADDR_OWVAR 42
31549: PUSH
31550: LD_INT 16
31552: ST_TO_ADDR
31553: GO 31784
31555: LD_INT 23
31557: DOUBLE
31558: EQUAL
31559: IFTRUE 31563
31561: GO 31574
31563: POP
// bc_type := b_ext_laser ; 24 :
31564: LD_ADDR_OWVAR 42
31568: PUSH
31569: LD_INT 25
31571: ST_TO_ADDR
31572: GO 31784
31574: LD_INT 24
31576: DOUBLE
31577: EQUAL
31578: IFTRUE 31582
31580: GO 31593
31582: POP
// bc_type := b_control_tower ; 25 :
31583: LD_ADDR_OWVAR 42
31587: PUSH
31588: LD_INT 36
31590: ST_TO_ADDR
31591: GO 31784
31593: LD_INT 25
31595: DOUBLE
31596: EQUAL
31597: IFTRUE 31601
31599: GO 31612
31601: POP
// bc_type := b_breastwork ; 26 :
31602: LD_ADDR_OWVAR 42
31606: PUSH
31607: LD_INT 31
31609: ST_TO_ADDR
31610: GO 31784
31612: LD_INT 26
31614: DOUBLE
31615: EQUAL
31616: IFTRUE 31620
31618: GO 31631
31620: POP
// bc_type := b_bunker ; 27 :
31621: LD_ADDR_OWVAR 42
31625: PUSH
31626: LD_INT 32
31628: ST_TO_ADDR
31629: GO 31784
31631: LD_INT 27
31633: DOUBLE
31634: EQUAL
31635: IFTRUE 31639
31637: GO 31650
31639: POP
// bc_type := b_turret ; 28 :
31640: LD_ADDR_OWVAR 42
31644: PUSH
31645: LD_INT 33
31647: ST_TO_ADDR
31648: GO 31784
31650: LD_INT 28
31652: DOUBLE
31653: EQUAL
31654: IFTRUE 31658
31656: GO 31669
31658: POP
// bc_type := b_armoury ; 29 :
31659: LD_ADDR_OWVAR 42
31663: PUSH
31664: LD_INT 4
31666: ST_TO_ADDR
31667: GO 31784
31669: LD_INT 29
31671: DOUBLE
31672: EQUAL
31673: IFTRUE 31677
31675: GO 31688
31677: POP
// bc_type := b_barracks ; 30 :
31678: LD_ADDR_OWVAR 42
31682: PUSH
31683: LD_INT 5
31685: ST_TO_ADDR
31686: GO 31784
31688: LD_INT 30
31690: DOUBLE
31691: EQUAL
31692: IFTRUE 31696
31694: GO 31707
31696: POP
// bc_type := b_solar_power ; 31 :
31697: LD_ADDR_OWVAR 42
31701: PUSH
31702: LD_INT 27
31704: ST_TO_ADDR
31705: GO 31784
31707: LD_INT 31
31709: DOUBLE
31710: EQUAL
31711: IFTRUE 31715
31713: GO 31726
31715: POP
// bc_type := b_oil_power ; 32 :
31716: LD_ADDR_OWVAR 42
31720: PUSH
31721: LD_INT 26
31723: ST_TO_ADDR
31724: GO 31784
31726: LD_INT 32
31728: DOUBLE
31729: EQUAL
31730: IFTRUE 31734
31732: GO 31745
31734: POP
// bc_type := b_siberite_power ; 33 :
31735: LD_ADDR_OWVAR 42
31739: PUSH
31740: LD_INT 28
31742: ST_TO_ADDR
31743: GO 31784
31745: LD_INT 33
31747: DOUBLE
31748: EQUAL
31749: IFTRUE 31753
31751: GO 31764
31753: POP
// bc_type := b_oil_mine ; 34 :
31754: LD_ADDR_OWVAR 42
31758: PUSH
31759: LD_INT 29
31761: ST_TO_ADDR
31762: GO 31784
31764: LD_INT 34
31766: DOUBLE
31767: EQUAL
31768: IFTRUE 31772
31770: GO 31783
31772: POP
// bc_type := b_siberite_mine ; end ;
31773: LD_ADDR_OWVAR 42
31777: PUSH
31778: LD_INT 30
31780: ST_TO_ADDR
31781: GO 31784
31783: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31784: LD_ADDR_VAR 0 8
31788: PUSH
31789: LD_VAR 0 5
31793: PPUSH
31794: LD_VAR 0 6
31798: PPUSH
31799: LD_VAR 0 3
31803: PPUSH
31804: CALL_OW 47
31808: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31809: LD_OWVAR 42
31813: PUSH
31814: LD_INT 32
31816: PUSH
31817: LD_INT 33
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: IN
31824: IFFALSE 31840
// PlaceWeaponTurret ( b , weapon ) ;
31826: LD_VAR 0 8
31830: PPUSH
31831: LD_VAR 0 4
31835: PPUSH
31836: CALL_OW 431
// end ;
31840: LD_VAR 0 7
31844: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31845: LD_INT 0
31847: PPUSH
31848: PPUSH
31849: PPUSH
31850: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31851: LD_ADDR_VAR 0 4
31855: PUSH
31856: LD_INT 22
31858: PUSH
31859: LD_OWVAR 2
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 2
31870: PUSH
31871: LD_INT 30
31873: PUSH
31874: LD_INT 0
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 30
31883: PUSH
31884: LD_INT 1
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: LIST
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PPUSH
31900: CALL_OW 69
31904: ST_TO_ADDR
// if not tmp then
31905: LD_VAR 0 4
31909: NOT
31910: IFFALSE 31914
// exit ;
31912: GO 31973
// for i in tmp do
31914: LD_ADDR_VAR 0 2
31918: PUSH
31919: LD_VAR 0 4
31923: PUSH
31924: FOR_IN
31925: IFFALSE 31971
// for j = 1 to 3 do
31927: LD_ADDR_VAR 0 3
31931: PUSH
31932: DOUBLE
31933: LD_INT 1
31935: DEC
31936: ST_TO_ADDR
31937: LD_INT 3
31939: PUSH
31940: FOR_TO
31941: IFFALSE 31967
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31943: LD_VAR 0 2
31947: PPUSH
31948: CALL_OW 274
31952: PPUSH
31953: LD_VAR 0 3
31957: PPUSH
31958: LD_INT 99999
31960: PPUSH
31961: CALL_OW 277
31965: GO 31940
31967: POP
31968: POP
31969: GO 31924
31971: POP
31972: POP
// end ;
31973: LD_VAR 0 1
31977: RET
// export function hHackSetLevel10 ; var i , j ; begin
31978: LD_INT 0
31980: PPUSH
31981: PPUSH
31982: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31983: LD_ADDR_VAR 0 2
31987: PUSH
31988: LD_INT 21
31990: PUSH
31991: LD_INT 1
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PPUSH
31998: CALL_OW 69
32002: PUSH
32003: FOR_IN
32004: IFFALSE 32056
// if IsSelected ( i ) then
32006: LD_VAR 0 2
32010: PPUSH
32011: CALL_OW 306
32015: IFFALSE 32054
// begin for j := 1 to 4 do
32017: LD_ADDR_VAR 0 3
32021: PUSH
32022: DOUBLE
32023: LD_INT 1
32025: DEC
32026: ST_TO_ADDR
32027: LD_INT 4
32029: PUSH
32030: FOR_TO
32031: IFFALSE 32052
// SetSkill ( i , j , 10 ) ;
32033: LD_VAR 0 2
32037: PPUSH
32038: LD_VAR 0 3
32042: PPUSH
32043: LD_INT 10
32045: PPUSH
32046: CALL_OW 237
32050: GO 32030
32052: POP
32053: POP
// end ;
32054: GO 32003
32056: POP
32057: POP
// end ;
32058: LD_VAR 0 1
32062: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32063: LD_INT 0
32065: PPUSH
32066: PPUSH
32067: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32068: LD_ADDR_VAR 0 2
32072: PUSH
32073: LD_INT 22
32075: PUSH
32076: LD_OWVAR 2
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 21
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PPUSH
32099: CALL_OW 69
32103: PUSH
32104: FOR_IN
32105: IFFALSE 32146
// begin for j := 1 to 4 do
32107: LD_ADDR_VAR 0 3
32111: PUSH
32112: DOUBLE
32113: LD_INT 1
32115: DEC
32116: ST_TO_ADDR
32117: LD_INT 4
32119: PUSH
32120: FOR_TO
32121: IFFALSE 32142
// SetSkill ( i , j , 10 ) ;
32123: LD_VAR 0 2
32127: PPUSH
32128: LD_VAR 0 3
32132: PPUSH
32133: LD_INT 10
32135: PPUSH
32136: CALL_OW 237
32140: GO 32120
32142: POP
32143: POP
// end ;
32144: GO 32104
32146: POP
32147: POP
// end ;
32148: LD_VAR 0 1
32152: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32153: LD_INT 0
32155: PPUSH
// uc_side := your_side ;
32156: LD_ADDR_OWVAR 20
32160: PUSH
32161: LD_OWVAR 2
32165: ST_TO_ADDR
// uc_nation := nation ;
32166: LD_ADDR_OWVAR 21
32170: PUSH
32171: LD_VAR 0 1
32175: ST_TO_ADDR
// InitHc ;
32176: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32180: LD_INT 0
32182: PPUSH
32183: LD_VAR 0 2
32187: PPUSH
32188: LD_VAR 0 3
32192: PPUSH
32193: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32197: LD_VAR 0 4
32201: PPUSH
32202: LD_VAR 0 5
32206: PPUSH
32207: CALL_OW 428
32211: PUSH
32212: LD_INT 0
32214: EQUAL
32215: IFFALSE 32239
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32217: CALL_OW 44
32221: PPUSH
32222: LD_VAR 0 4
32226: PPUSH
32227: LD_VAR 0 5
32231: PPUSH
32232: LD_INT 1
32234: PPUSH
32235: CALL_OW 48
// end ;
32239: LD_VAR 0 6
32243: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32244: LD_INT 0
32246: PPUSH
32247: PPUSH
// uc_side := your_side ;
32248: LD_ADDR_OWVAR 20
32252: PUSH
32253: LD_OWVAR 2
32257: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32258: LD_VAR 0 1
32262: PUSH
32263: LD_INT 1
32265: PUSH
32266: LD_INT 2
32268: PUSH
32269: LD_INT 3
32271: PUSH
32272: LD_INT 4
32274: PUSH
32275: LD_INT 5
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: IN
32285: IFFALSE 32297
// uc_nation := nation_american else
32287: LD_ADDR_OWVAR 21
32291: PUSH
32292: LD_INT 1
32294: ST_TO_ADDR
32295: GO 32340
// if chassis in [ 11 , 12 , 13 , 14 ] then
32297: LD_VAR 0 1
32301: PUSH
32302: LD_INT 11
32304: PUSH
32305: LD_INT 12
32307: PUSH
32308: LD_INT 13
32310: PUSH
32311: LD_INT 14
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: IN
32320: IFFALSE 32332
// uc_nation := nation_arabian else
32322: LD_ADDR_OWVAR 21
32326: PUSH
32327: LD_INT 2
32329: ST_TO_ADDR
32330: GO 32340
// uc_nation := nation_russian ;
32332: LD_ADDR_OWVAR 21
32336: PUSH
32337: LD_INT 3
32339: ST_TO_ADDR
// vc_chassis := chassis ;
32340: LD_ADDR_OWVAR 37
32344: PUSH
32345: LD_VAR 0 1
32349: ST_TO_ADDR
// vc_engine := engine ;
32350: LD_ADDR_OWVAR 39
32354: PUSH
32355: LD_VAR 0 2
32359: ST_TO_ADDR
// vc_control := control ;
32360: LD_ADDR_OWVAR 38
32364: PUSH
32365: LD_VAR 0 3
32369: ST_TO_ADDR
// vc_weapon := weapon ;
32370: LD_ADDR_OWVAR 40
32374: PUSH
32375: LD_VAR 0 4
32379: ST_TO_ADDR
// un := CreateVehicle ;
32380: LD_ADDR_VAR 0 8
32384: PUSH
32385: CALL_OW 45
32389: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32390: LD_VAR 0 8
32394: PPUSH
32395: LD_INT 0
32397: PPUSH
32398: LD_INT 5
32400: PPUSH
32401: CALL_OW 12
32405: PPUSH
32406: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32410: LD_VAR 0 8
32414: PPUSH
32415: LD_VAR 0 5
32419: PPUSH
32420: LD_VAR 0 6
32424: PPUSH
32425: LD_INT 1
32427: PPUSH
32428: CALL_OW 48
// end ;
32432: LD_VAR 0 7
32436: RET
// export hInvincible ; every 1 do
32437: GO 32439
32439: DISABLE
// hInvincible := [ ] ;
32440: LD_ADDR_EXP 107
32444: PUSH
32445: EMPTY
32446: ST_TO_ADDR
32447: END
// every 10 do var i ;
32448: GO 32450
32450: DISABLE
32451: LD_INT 0
32453: PPUSH
// begin enable ;
32454: ENABLE
// if not hInvincible then
32455: LD_EXP 107
32459: NOT
32460: IFFALSE 32464
// exit ;
32462: GO 32508
// for i in hInvincible do
32464: LD_ADDR_VAR 0 1
32468: PUSH
32469: LD_EXP 107
32473: PUSH
32474: FOR_IN
32475: IFFALSE 32506
// if GetLives ( i ) < 1000 then
32477: LD_VAR 0 1
32481: PPUSH
32482: CALL_OW 256
32486: PUSH
32487: LD_INT 1000
32489: LESS
32490: IFFALSE 32504
// SetLives ( i , 1000 ) ;
32492: LD_VAR 0 1
32496: PPUSH
32497: LD_INT 1000
32499: PPUSH
32500: CALL_OW 234
32504: GO 32474
32506: POP
32507: POP
// end ;
32508: PPOPN 1
32510: END
// export function hHackInvincible ; var i ; begin
32511: LD_INT 0
32513: PPUSH
32514: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32515: LD_ADDR_VAR 0 2
32519: PUSH
32520: LD_INT 2
32522: PUSH
32523: LD_INT 21
32525: PUSH
32526: LD_INT 1
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 21
32535: PUSH
32536: LD_INT 2
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: LIST
32547: PPUSH
32548: CALL_OW 69
32552: PUSH
32553: FOR_IN
32554: IFFALSE 32615
// if IsSelected ( i ) then
32556: LD_VAR 0 2
32560: PPUSH
32561: CALL_OW 306
32565: IFFALSE 32613
// begin if i in hInvincible then
32567: LD_VAR 0 2
32571: PUSH
32572: LD_EXP 107
32576: IN
32577: IFFALSE 32597
// hInvincible := hInvincible diff i else
32579: LD_ADDR_EXP 107
32583: PUSH
32584: LD_EXP 107
32588: PUSH
32589: LD_VAR 0 2
32593: DIFF
32594: ST_TO_ADDR
32595: GO 32613
// hInvincible := hInvincible union i ;
32597: LD_ADDR_EXP 107
32601: PUSH
32602: LD_EXP 107
32606: PUSH
32607: LD_VAR 0 2
32611: UNION
32612: ST_TO_ADDR
// end ;
32613: GO 32553
32615: POP
32616: POP
// end ;
32617: LD_VAR 0 1
32621: RET
// export function hHackInvisible ; var i , j ; begin
32622: LD_INT 0
32624: PPUSH
32625: PPUSH
32626: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32627: LD_ADDR_VAR 0 2
32631: PUSH
32632: LD_INT 21
32634: PUSH
32635: LD_INT 1
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PPUSH
32642: CALL_OW 69
32646: PUSH
32647: FOR_IN
32648: IFFALSE 32672
// if IsSelected ( i ) then
32650: LD_VAR 0 2
32654: PPUSH
32655: CALL_OW 306
32659: IFFALSE 32670
// ComForceInvisible ( i ) ;
32661: LD_VAR 0 2
32665: PPUSH
32666: CALL_OW 496
32670: GO 32647
32672: POP
32673: POP
// end ;
32674: LD_VAR 0 1
32678: RET
// export function hHackChangeYourSide ; begin
32679: LD_INT 0
32681: PPUSH
// if your_side = 8 then
32682: LD_OWVAR 2
32686: PUSH
32687: LD_INT 8
32689: EQUAL
32690: IFFALSE 32702
// your_side := 0 else
32692: LD_ADDR_OWVAR 2
32696: PUSH
32697: LD_INT 0
32699: ST_TO_ADDR
32700: GO 32716
// your_side := your_side + 1 ;
32702: LD_ADDR_OWVAR 2
32706: PUSH
32707: LD_OWVAR 2
32711: PUSH
32712: LD_INT 1
32714: PLUS
32715: ST_TO_ADDR
// end ;
32716: LD_VAR 0 1
32720: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32721: LD_INT 0
32723: PPUSH
32724: PPUSH
32725: PPUSH
// for i in all_units do
32726: LD_ADDR_VAR 0 2
32730: PUSH
32731: LD_OWVAR 3
32735: PUSH
32736: FOR_IN
32737: IFFALSE 32815
// if IsSelected ( i ) then
32739: LD_VAR 0 2
32743: PPUSH
32744: CALL_OW 306
32748: IFFALSE 32813
// begin j := GetSide ( i ) ;
32750: LD_ADDR_VAR 0 3
32754: PUSH
32755: LD_VAR 0 2
32759: PPUSH
32760: CALL_OW 255
32764: ST_TO_ADDR
// if j = 8 then
32765: LD_VAR 0 3
32769: PUSH
32770: LD_INT 8
32772: EQUAL
32773: IFFALSE 32785
// j := 0 else
32775: LD_ADDR_VAR 0 3
32779: PUSH
32780: LD_INT 0
32782: ST_TO_ADDR
32783: GO 32799
// j := j + 1 ;
32785: LD_ADDR_VAR 0 3
32789: PUSH
32790: LD_VAR 0 3
32794: PUSH
32795: LD_INT 1
32797: PLUS
32798: ST_TO_ADDR
// SetSide ( i , j ) ;
32799: LD_VAR 0 2
32803: PPUSH
32804: LD_VAR 0 3
32808: PPUSH
32809: CALL_OW 235
// end ;
32813: GO 32736
32815: POP
32816: POP
// end ;
32817: LD_VAR 0 1
32821: RET
// export function hHackFog ; begin
32822: LD_INT 0
32824: PPUSH
// FogOff ( true ) ;
32825: LD_INT 1
32827: PPUSH
32828: CALL_OW 344
// end ;
32832: LD_VAR 0 1
32836: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32837: LD_INT 0
32839: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32840: LD_VAR 0 1
32844: PPUSH
32845: LD_VAR 0 2
32849: PPUSH
32850: LD_VAR 0 3
32854: PPUSH
32855: LD_INT 1
32857: PPUSH
32858: LD_INT 1
32860: PPUSH
32861: CALL_OW 483
// CenterOnXY ( x , y ) ;
32865: LD_VAR 0 2
32869: PPUSH
32870: LD_VAR 0 3
32874: PPUSH
32875: CALL_OW 84
// end ;
32879: LD_VAR 0 4
32883: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32884: LD_INT 0
32886: PPUSH
32887: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32888: LD_VAR 0 1
32892: NOT
32893: PUSH
32894: LD_VAR 0 2
32898: PPUSH
32899: LD_VAR 0 3
32903: PPUSH
32904: CALL_OW 488
32908: NOT
32909: OR
32910: PUSH
32911: LD_VAR 0 1
32915: PPUSH
32916: CALL_OW 266
32920: PUSH
32921: LD_INT 3
32923: NONEQUAL
32924: PUSH
32925: LD_VAR 0 1
32929: PPUSH
32930: CALL_OW 247
32934: PUSH
32935: LD_INT 1
32937: EQUAL
32938: NOT
32939: AND
32940: OR
32941: IFFALSE 32945
// exit ;
32943: GO 33094
// if GetType ( factory ) = unit_human then
32945: LD_VAR 0 1
32949: PPUSH
32950: CALL_OW 247
32954: PUSH
32955: LD_INT 1
32957: EQUAL
32958: IFFALSE 32975
// factory := IsInUnit ( factory ) ;
32960: LD_ADDR_VAR 0 1
32964: PUSH
32965: LD_VAR 0 1
32969: PPUSH
32970: CALL_OW 310
32974: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32975: LD_VAR 0 1
32979: PPUSH
32980: CALL_OW 266
32984: PUSH
32985: LD_INT 3
32987: NONEQUAL
32988: IFFALSE 32992
// exit ;
32990: GO 33094
// if HexInfo ( x , y ) = factory then
32992: LD_VAR 0 2
32996: PPUSH
32997: LD_VAR 0 3
33001: PPUSH
33002: CALL_OW 428
33006: PUSH
33007: LD_VAR 0 1
33011: EQUAL
33012: IFFALSE 33039
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33014: LD_ADDR_EXP 108
33018: PUSH
33019: LD_EXP 108
33023: PPUSH
33024: LD_VAR 0 1
33028: PPUSH
33029: LD_INT 0
33031: PPUSH
33032: CALL_OW 1
33036: ST_TO_ADDR
33037: GO 33090
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33039: LD_ADDR_EXP 108
33043: PUSH
33044: LD_EXP 108
33048: PPUSH
33049: LD_VAR 0 1
33053: PPUSH
33054: LD_VAR 0 1
33058: PPUSH
33059: CALL_OW 255
33063: PUSH
33064: LD_VAR 0 1
33068: PUSH
33069: LD_VAR 0 2
33073: PUSH
33074: LD_VAR 0 3
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: PPUSH
33085: CALL_OW 1
33089: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33090: CALL 33099 0 0
// end ;
33094: LD_VAR 0 4
33098: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33099: LD_INT 0
33101: PPUSH
33102: PPUSH
33103: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33104: LD_STRING resetFactoryWaypoint();
33106: PPUSH
33107: CALL_OW 559
// if factoryWaypoints then
33111: LD_EXP 108
33115: IFFALSE 33241
// begin list := PrepareArray ( factoryWaypoints ) ;
33117: LD_ADDR_VAR 0 3
33121: PUSH
33122: LD_EXP 108
33126: PPUSH
33127: CALL 79673 0 1
33131: ST_TO_ADDR
// for i := 1 to list do
33132: LD_ADDR_VAR 0 2
33136: PUSH
33137: DOUBLE
33138: LD_INT 1
33140: DEC
33141: ST_TO_ADDR
33142: LD_VAR 0 3
33146: PUSH
33147: FOR_TO
33148: IFFALSE 33239
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33150: LD_STRING setFactoryWaypointXY(
33152: PUSH
33153: LD_VAR 0 3
33157: PUSH
33158: LD_VAR 0 2
33162: ARRAY
33163: PUSH
33164: LD_INT 1
33166: ARRAY
33167: STR
33168: PUSH
33169: LD_STRING ,
33171: STR
33172: PUSH
33173: LD_VAR 0 3
33177: PUSH
33178: LD_VAR 0 2
33182: ARRAY
33183: PUSH
33184: LD_INT 2
33186: ARRAY
33187: STR
33188: PUSH
33189: LD_STRING ,
33191: STR
33192: PUSH
33193: LD_VAR 0 3
33197: PUSH
33198: LD_VAR 0 2
33202: ARRAY
33203: PUSH
33204: LD_INT 3
33206: ARRAY
33207: STR
33208: PUSH
33209: LD_STRING ,
33211: STR
33212: PUSH
33213: LD_VAR 0 3
33217: PUSH
33218: LD_VAR 0 2
33222: ARRAY
33223: PUSH
33224: LD_INT 4
33226: ARRAY
33227: STR
33228: PUSH
33229: LD_STRING )
33231: STR
33232: PPUSH
33233: CALL_OW 559
33237: GO 33147
33239: POP
33240: POP
// end ; end ;
33241: LD_VAR 0 1
33245: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33246: LD_INT 0
33248: PPUSH
// if HexInfo ( x , y ) = warehouse then
33249: LD_VAR 0 2
33253: PPUSH
33254: LD_VAR 0 3
33258: PPUSH
33259: CALL_OW 428
33263: PUSH
33264: LD_VAR 0 1
33268: EQUAL
33269: IFFALSE 33296
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33271: LD_ADDR_EXP 109
33275: PUSH
33276: LD_EXP 109
33280: PPUSH
33281: LD_VAR 0 1
33285: PPUSH
33286: LD_INT 0
33288: PPUSH
33289: CALL_OW 1
33293: ST_TO_ADDR
33294: GO 33347
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33296: LD_ADDR_EXP 109
33300: PUSH
33301: LD_EXP 109
33305: PPUSH
33306: LD_VAR 0 1
33310: PPUSH
33311: LD_VAR 0 1
33315: PPUSH
33316: CALL_OW 255
33320: PUSH
33321: LD_VAR 0 1
33325: PUSH
33326: LD_VAR 0 2
33330: PUSH
33331: LD_VAR 0 3
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: PPUSH
33342: CALL_OW 1
33346: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33347: CALL 33356 0 0
// end ;
33351: LD_VAR 0 4
33355: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33356: LD_INT 0
33358: PPUSH
33359: PPUSH
33360: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33361: LD_STRING resetWarehouseGatheringPoints();
33363: PPUSH
33364: CALL_OW 559
// if warehouseGatheringPoints then
33368: LD_EXP 109
33372: IFFALSE 33498
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33374: LD_ADDR_VAR 0 3
33378: PUSH
33379: LD_EXP 109
33383: PPUSH
33384: CALL 79673 0 1
33388: ST_TO_ADDR
// for i := 1 to list do
33389: LD_ADDR_VAR 0 2
33393: PUSH
33394: DOUBLE
33395: LD_INT 1
33397: DEC
33398: ST_TO_ADDR
33399: LD_VAR 0 3
33403: PUSH
33404: FOR_TO
33405: IFFALSE 33496
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33407: LD_STRING setWarehouseGatheringPointXY(
33409: PUSH
33410: LD_VAR 0 3
33414: PUSH
33415: LD_VAR 0 2
33419: ARRAY
33420: PUSH
33421: LD_INT 1
33423: ARRAY
33424: STR
33425: PUSH
33426: LD_STRING ,
33428: STR
33429: PUSH
33430: LD_VAR 0 3
33434: PUSH
33435: LD_VAR 0 2
33439: ARRAY
33440: PUSH
33441: LD_INT 2
33443: ARRAY
33444: STR
33445: PUSH
33446: LD_STRING ,
33448: STR
33449: PUSH
33450: LD_VAR 0 3
33454: PUSH
33455: LD_VAR 0 2
33459: ARRAY
33460: PUSH
33461: LD_INT 3
33463: ARRAY
33464: STR
33465: PUSH
33466: LD_STRING ,
33468: STR
33469: PUSH
33470: LD_VAR 0 3
33474: PUSH
33475: LD_VAR 0 2
33479: ARRAY
33480: PUSH
33481: LD_INT 4
33483: ARRAY
33484: STR
33485: PUSH
33486: LD_STRING )
33488: STR
33489: PPUSH
33490: CALL_OW 559
33494: GO 33404
33496: POP
33497: POP
// end ; end ;
33498: LD_VAR 0 1
33502: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33503: LD_EXP 109
33507: IFFALSE 34194
33509: GO 33511
33511: DISABLE
33512: LD_INT 0
33514: PPUSH
33515: PPUSH
33516: PPUSH
33517: PPUSH
33518: PPUSH
33519: PPUSH
33520: PPUSH
33521: PPUSH
33522: PPUSH
// begin enable ;
33523: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33524: LD_ADDR_VAR 0 3
33528: PUSH
33529: LD_EXP 109
33533: PPUSH
33534: CALL 79673 0 1
33538: ST_TO_ADDR
// if not list then
33539: LD_VAR 0 3
33543: NOT
33544: IFFALSE 33548
// exit ;
33546: GO 34194
// for i := 1 to list do
33548: LD_ADDR_VAR 0 1
33552: PUSH
33553: DOUBLE
33554: LD_INT 1
33556: DEC
33557: ST_TO_ADDR
33558: LD_VAR 0 3
33562: PUSH
33563: FOR_TO
33564: IFFALSE 34192
// begin depot := list [ i ] [ 2 ] ;
33566: LD_ADDR_VAR 0 8
33570: PUSH
33571: LD_VAR 0 3
33575: PUSH
33576: LD_VAR 0 1
33580: ARRAY
33581: PUSH
33582: LD_INT 2
33584: ARRAY
33585: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33586: LD_ADDR_VAR 0 5
33590: PUSH
33591: LD_VAR 0 3
33595: PUSH
33596: LD_VAR 0 1
33600: ARRAY
33601: PUSH
33602: LD_INT 1
33604: ARRAY
33605: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33606: LD_VAR 0 8
33610: PPUSH
33611: CALL_OW 301
33615: PUSH
33616: LD_VAR 0 5
33620: PUSH
33621: LD_VAR 0 8
33625: PPUSH
33626: CALL_OW 255
33630: NONEQUAL
33631: OR
33632: IFFALSE 33661
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33634: LD_ADDR_EXP 109
33638: PUSH
33639: LD_EXP 109
33643: PPUSH
33644: LD_VAR 0 8
33648: PPUSH
33649: LD_INT 0
33651: PPUSH
33652: CALL_OW 1
33656: ST_TO_ADDR
// exit ;
33657: POP
33658: POP
33659: GO 34194
// end ; x := list [ i ] [ 3 ] ;
33661: LD_ADDR_VAR 0 6
33665: PUSH
33666: LD_VAR 0 3
33670: PUSH
33671: LD_VAR 0 1
33675: ARRAY
33676: PUSH
33677: LD_INT 3
33679: ARRAY
33680: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33681: LD_ADDR_VAR 0 7
33685: PUSH
33686: LD_VAR 0 3
33690: PUSH
33691: LD_VAR 0 1
33695: ARRAY
33696: PUSH
33697: LD_INT 4
33699: ARRAY
33700: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33701: LD_ADDR_VAR 0 9
33705: PUSH
33706: LD_VAR 0 6
33710: PPUSH
33711: LD_VAR 0 7
33715: PPUSH
33716: LD_INT 16
33718: PPUSH
33719: CALL 78257 0 3
33723: ST_TO_ADDR
// if not cratesNearbyPoint then
33724: LD_VAR 0 9
33728: NOT
33729: IFFALSE 33735
// exit ;
33731: POP
33732: POP
33733: GO 34194
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33735: LD_ADDR_VAR 0 4
33739: PUSH
33740: LD_INT 22
33742: PUSH
33743: LD_VAR 0 5
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 3
33754: PUSH
33755: LD_INT 60
33757: PUSH
33758: EMPTY
33759: LIST
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 91
33767: PUSH
33768: LD_VAR 0 8
33772: PUSH
33773: LD_INT 6
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 2
33783: PUSH
33784: LD_INT 25
33786: PUSH
33787: LD_INT 2
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 25
33796: PUSH
33797: LD_INT 16
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: LIST
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: PPUSH
33815: CALL_OW 69
33819: PUSH
33820: LD_VAR 0 8
33824: PPUSH
33825: CALL_OW 313
33829: PPUSH
33830: LD_INT 3
33832: PUSH
33833: LD_INT 60
33835: PUSH
33836: EMPTY
33837: LIST
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 2
33845: PUSH
33846: LD_INT 25
33848: PUSH
33849: LD_INT 2
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 25
33858: PUSH
33859: LD_INT 16
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: LIST
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PPUSH
33875: CALL_OW 72
33879: UNION
33880: ST_TO_ADDR
// if tmp then
33881: LD_VAR 0 4
33885: IFFALSE 33965
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33887: LD_ADDR_VAR 0 4
33891: PUSH
33892: LD_VAR 0 4
33896: PPUSH
33897: LD_INT 3
33899: PPUSH
33900: CALL 76224 0 2
33904: ST_TO_ADDR
// for j in tmp do
33905: LD_ADDR_VAR 0 2
33909: PUSH
33910: LD_VAR 0 4
33914: PUSH
33915: FOR_IN
33916: IFFALSE 33959
// begin if IsInUnit ( j ) then
33918: LD_VAR 0 2
33922: PPUSH
33923: CALL_OW 310
33927: IFFALSE 33938
// ComExit ( j ) ;
33929: LD_VAR 0 2
33933: PPUSH
33934: CALL 76307 0 1
// AddComCollect ( j , x , y ) ;
33938: LD_VAR 0 2
33942: PPUSH
33943: LD_VAR 0 6
33947: PPUSH
33948: LD_VAR 0 7
33952: PPUSH
33953: CALL_OW 177
// end ;
33957: GO 33915
33959: POP
33960: POP
// exit ;
33961: POP
33962: POP
33963: GO 34194
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33965: LD_ADDR_VAR 0 4
33969: PUSH
33970: LD_INT 22
33972: PUSH
33973: LD_VAR 0 5
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 91
33984: PUSH
33985: LD_VAR 0 8
33989: PUSH
33990: LD_INT 8
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 2
34000: PUSH
34001: LD_INT 34
34003: PUSH
34004: LD_INT 12
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 34
34013: PUSH
34014: LD_INT 51
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 34
34023: PUSH
34024: LD_INT 32
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 34
34033: PUSH
34034: LD_EXP 33
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: LIST
34054: PPUSH
34055: CALL_OW 69
34059: ST_TO_ADDR
// if tmp then
34060: LD_VAR 0 4
34064: IFFALSE 34190
// begin for j in tmp do
34066: LD_ADDR_VAR 0 2
34070: PUSH
34071: LD_VAR 0 4
34075: PUSH
34076: FOR_IN
34077: IFFALSE 34188
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34079: LD_VAR 0 2
34083: PPUSH
34084: CALL_OW 262
34088: PUSH
34089: LD_INT 3
34091: EQUAL
34092: PUSH
34093: LD_VAR 0 2
34097: PPUSH
34098: CALL_OW 261
34102: PUSH
34103: LD_INT 20
34105: GREATER
34106: OR
34107: PUSH
34108: LD_VAR 0 2
34112: PPUSH
34113: CALL_OW 314
34117: NOT
34118: AND
34119: PUSH
34120: LD_VAR 0 2
34124: PPUSH
34125: CALL_OW 263
34129: PUSH
34130: LD_INT 1
34132: NONEQUAL
34133: PUSH
34134: LD_VAR 0 2
34138: PPUSH
34139: CALL_OW 311
34143: OR
34144: AND
34145: IFFALSE 34186
// begin ComCollect ( j , x , y ) ;
34147: LD_VAR 0 2
34151: PPUSH
34152: LD_VAR 0 6
34156: PPUSH
34157: LD_VAR 0 7
34161: PPUSH
34162: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34166: LD_VAR 0 2
34170: PPUSH
34171: LD_VAR 0 8
34175: PPUSH
34176: CALL_OW 172
// exit ;
34180: POP
34181: POP
34182: POP
34183: POP
34184: GO 34194
// end ;
34186: GO 34076
34188: POP
34189: POP
// end ; end ;
34190: GO 33563
34192: POP
34193: POP
// end ; end_of_file
34194: PPOPN 9
34196: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34197: LD_INT 0
34199: PPUSH
34200: PPUSH
34201: PPUSH
34202: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34203: LD_VAR 0 1
34207: PPUSH
34208: CALL_OW 264
34212: PUSH
34213: LD_EXP 36
34217: EQUAL
34218: IFFALSE 34290
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34220: LD_INT 68
34222: PPUSH
34223: LD_VAR 0 1
34227: PPUSH
34228: CALL_OW 255
34232: PPUSH
34233: CALL_OW 321
34237: PUSH
34238: LD_INT 2
34240: EQUAL
34241: IFFALSE 34253
// eff := 70 else
34243: LD_ADDR_VAR 0 4
34247: PUSH
34248: LD_INT 70
34250: ST_TO_ADDR
34251: GO 34261
// eff := 30 ;
34253: LD_ADDR_VAR 0 4
34257: PUSH
34258: LD_INT 30
34260: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34261: LD_VAR 0 1
34265: PPUSH
34266: CALL_OW 250
34270: PPUSH
34271: LD_VAR 0 1
34275: PPUSH
34276: CALL_OW 251
34280: PPUSH
34281: LD_VAR 0 4
34285: PPUSH
34286: CALL_OW 495
// end ; end ;
34290: LD_VAR 0 2
34294: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34295: LD_INT 0
34297: PPUSH
// end ;
34298: LD_VAR 0 4
34302: RET
// export function SOS_Command ( cmd ) ; begin
34303: LD_INT 0
34305: PPUSH
// end ;
34306: LD_VAR 0 2
34310: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34311: LD_INT 0
34313: PPUSH
// end ;
34314: LD_VAR 0 6
34318: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34319: LD_INT 0
34321: PPUSH
34322: PPUSH
// if not vehicle or not factory then
34323: LD_VAR 0 1
34327: NOT
34328: PUSH
34329: LD_VAR 0 2
34333: NOT
34334: OR
34335: IFFALSE 34339
// exit ;
34337: GO 34570
// if factoryWaypoints >= factory then
34339: LD_EXP 108
34343: PUSH
34344: LD_VAR 0 2
34348: GREATEREQUAL
34349: IFFALSE 34570
// if factoryWaypoints [ factory ] then
34351: LD_EXP 108
34355: PUSH
34356: LD_VAR 0 2
34360: ARRAY
34361: IFFALSE 34570
// begin if GetControl ( vehicle ) = control_manual then
34363: LD_VAR 0 1
34367: PPUSH
34368: CALL_OW 263
34372: PUSH
34373: LD_INT 1
34375: EQUAL
34376: IFFALSE 34457
// begin driver := IsDrivenBy ( vehicle ) ;
34378: LD_ADDR_VAR 0 4
34382: PUSH
34383: LD_VAR 0 1
34387: PPUSH
34388: CALL_OW 311
34392: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34393: LD_VAR 0 4
34397: PPUSH
34398: LD_EXP 108
34402: PUSH
34403: LD_VAR 0 2
34407: ARRAY
34408: PUSH
34409: LD_INT 3
34411: ARRAY
34412: PPUSH
34413: LD_EXP 108
34417: PUSH
34418: LD_VAR 0 2
34422: ARRAY
34423: PUSH
34424: LD_INT 4
34426: ARRAY
34427: PPUSH
34428: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34432: LD_VAR 0 4
34436: PPUSH
34437: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34441: LD_VAR 0 4
34445: PPUSH
34446: LD_VAR 0 2
34450: PPUSH
34451: CALL_OW 180
// end else
34455: GO 34570
// if GetControl ( vehicle ) = control_remote then
34457: LD_VAR 0 1
34461: PPUSH
34462: CALL_OW 263
34466: PUSH
34467: LD_INT 2
34469: EQUAL
34470: IFFALSE 34531
// begin wait ( 0 0$2 ) ;
34472: LD_INT 70
34474: PPUSH
34475: CALL_OW 67
// if Connect ( vehicle ) then
34479: LD_VAR 0 1
34483: PPUSH
34484: CALL 46618 0 1
34488: IFFALSE 34529
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34490: LD_VAR 0 1
34494: PPUSH
34495: LD_EXP 108
34499: PUSH
34500: LD_VAR 0 2
34504: ARRAY
34505: PUSH
34506: LD_INT 3
34508: ARRAY
34509: PPUSH
34510: LD_EXP 108
34514: PUSH
34515: LD_VAR 0 2
34519: ARRAY
34520: PUSH
34521: LD_INT 4
34523: ARRAY
34524: PPUSH
34525: CALL_OW 171
// end else
34529: GO 34570
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34531: LD_VAR 0 1
34535: PPUSH
34536: LD_EXP 108
34540: PUSH
34541: LD_VAR 0 2
34545: ARRAY
34546: PUSH
34547: LD_INT 3
34549: ARRAY
34550: PPUSH
34551: LD_EXP 108
34555: PUSH
34556: LD_VAR 0 2
34560: ARRAY
34561: PUSH
34562: LD_INT 4
34564: ARRAY
34565: PPUSH
34566: CALL_OW 171
// end ; end ;
34570: LD_VAR 0 3
34574: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34575: LD_INT 0
34577: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34578: LD_VAR 0 1
34582: PUSH
34583: LD_INT 250
34585: EQUAL
34586: PUSH
34587: LD_VAR 0 2
34591: PPUSH
34592: CALL_OW 264
34596: PUSH
34597: LD_EXP 39
34601: EQUAL
34602: AND
34603: IFFALSE 34624
// MinerPlaceMine ( unit , x , y ) ;
34605: LD_VAR 0 2
34609: PPUSH
34610: LD_VAR 0 4
34614: PPUSH
34615: LD_VAR 0 5
34619: PPUSH
34620: CALL 37023 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34624: LD_VAR 0 1
34628: PUSH
34629: LD_INT 251
34631: EQUAL
34632: PUSH
34633: LD_VAR 0 2
34637: PPUSH
34638: CALL_OW 264
34642: PUSH
34643: LD_EXP 39
34647: EQUAL
34648: AND
34649: IFFALSE 34670
// MinerDetonateMine ( unit , x , y ) ;
34651: LD_VAR 0 2
34655: PPUSH
34656: LD_VAR 0 4
34660: PPUSH
34661: LD_VAR 0 5
34665: PPUSH
34666: CALL 37300 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34670: LD_VAR 0 1
34674: PUSH
34675: LD_INT 252
34677: EQUAL
34678: PUSH
34679: LD_VAR 0 2
34683: PPUSH
34684: CALL_OW 264
34688: PUSH
34689: LD_EXP 39
34693: EQUAL
34694: AND
34695: IFFALSE 34716
// MinerCreateMinefield ( unit , x , y ) ;
34697: LD_VAR 0 2
34701: PPUSH
34702: LD_VAR 0 4
34706: PPUSH
34707: LD_VAR 0 5
34711: PPUSH
34712: CALL 37717 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34716: LD_VAR 0 1
34720: PUSH
34721: LD_INT 253
34723: EQUAL
34724: PUSH
34725: LD_VAR 0 2
34729: PPUSH
34730: CALL_OW 257
34734: PUSH
34735: LD_INT 5
34737: EQUAL
34738: AND
34739: IFFALSE 34760
// ComBinocular ( unit , x , y ) ;
34741: LD_VAR 0 2
34745: PPUSH
34746: LD_VAR 0 4
34750: PPUSH
34751: LD_VAR 0 5
34755: PPUSH
34756: CALL 38088 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34760: LD_VAR 0 1
34764: PUSH
34765: LD_INT 254
34767: EQUAL
34768: PUSH
34769: LD_VAR 0 2
34773: PPUSH
34774: CALL_OW 264
34778: PUSH
34779: LD_EXP 34
34783: EQUAL
34784: AND
34785: PUSH
34786: LD_VAR 0 3
34790: PPUSH
34791: CALL_OW 263
34795: PUSH
34796: LD_INT 3
34798: EQUAL
34799: AND
34800: IFFALSE 34816
// HackDestroyVehicle ( unit , selectedUnit ) ;
34802: LD_VAR 0 2
34806: PPUSH
34807: LD_VAR 0 3
34811: PPUSH
34812: CALL 36383 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34816: LD_VAR 0 1
34820: PUSH
34821: LD_INT 255
34823: EQUAL
34824: PUSH
34825: LD_VAR 0 2
34829: PPUSH
34830: CALL_OW 264
34834: PUSH
34835: LD_INT 14
34837: PUSH
34838: LD_INT 53
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: IN
34845: AND
34846: PUSH
34847: LD_VAR 0 4
34851: PPUSH
34852: LD_VAR 0 5
34856: PPUSH
34857: CALL_OW 488
34861: AND
34862: IFFALSE 34886
// CutTreeXYR ( unit , x , y , 12 ) ;
34864: LD_VAR 0 2
34868: PPUSH
34869: LD_VAR 0 4
34873: PPUSH
34874: LD_VAR 0 5
34878: PPUSH
34879: LD_INT 12
34881: PPUSH
34882: CALL 34949 0 4
// if cmd = 256 then
34886: LD_VAR 0 1
34890: PUSH
34891: LD_INT 256
34893: EQUAL
34894: IFFALSE 34915
// SetFactoryWaypoint ( unit , x , y ) ;
34896: LD_VAR 0 2
34900: PPUSH
34901: LD_VAR 0 4
34905: PPUSH
34906: LD_VAR 0 5
34910: PPUSH
34911: CALL 32884 0 3
// if cmd = 257 then
34915: LD_VAR 0 1
34919: PUSH
34920: LD_INT 257
34922: EQUAL
34923: IFFALSE 34944
// SetWarehouseGatheringPoint ( unit , x , y ) ;
34925: LD_VAR 0 2
34929: PPUSH
34930: LD_VAR 0 4
34934: PPUSH
34935: LD_VAR 0 5
34939: PPUSH
34940: CALL 33246 0 3
// end ;
34944: LD_VAR 0 6
34948: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34949: LD_INT 0
34951: PPUSH
34952: PPUSH
34953: PPUSH
34954: PPUSH
34955: PPUSH
34956: PPUSH
34957: PPUSH
34958: PPUSH
34959: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34960: LD_VAR 0 1
34964: NOT
34965: PUSH
34966: LD_VAR 0 2
34970: PPUSH
34971: LD_VAR 0 3
34975: PPUSH
34976: CALL_OW 488
34980: NOT
34981: OR
34982: PUSH
34983: LD_VAR 0 4
34987: NOT
34988: OR
34989: IFFALSE 34993
// exit ;
34991: GO 35333
// list := [ ] ;
34993: LD_ADDR_VAR 0 13
34997: PUSH
34998: EMPTY
34999: ST_TO_ADDR
// if x - r < 0 then
35000: LD_VAR 0 2
35004: PUSH
35005: LD_VAR 0 4
35009: MINUS
35010: PUSH
35011: LD_INT 0
35013: LESS
35014: IFFALSE 35026
// min_x := 0 else
35016: LD_ADDR_VAR 0 7
35020: PUSH
35021: LD_INT 0
35023: ST_TO_ADDR
35024: GO 35042
// min_x := x - r ;
35026: LD_ADDR_VAR 0 7
35030: PUSH
35031: LD_VAR 0 2
35035: PUSH
35036: LD_VAR 0 4
35040: MINUS
35041: ST_TO_ADDR
// if y - r < 0 then
35042: LD_VAR 0 3
35046: PUSH
35047: LD_VAR 0 4
35051: MINUS
35052: PUSH
35053: LD_INT 0
35055: LESS
35056: IFFALSE 35068
// min_y := 0 else
35058: LD_ADDR_VAR 0 8
35062: PUSH
35063: LD_INT 0
35065: ST_TO_ADDR
35066: GO 35084
// min_y := y - r ;
35068: LD_ADDR_VAR 0 8
35072: PUSH
35073: LD_VAR 0 3
35077: PUSH
35078: LD_VAR 0 4
35082: MINUS
35083: ST_TO_ADDR
// max_x := x + r ;
35084: LD_ADDR_VAR 0 9
35088: PUSH
35089: LD_VAR 0 2
35093: PUSH
35094: LD_VAR 0 4
35098: PLUS
35099: ST_TO_ADDR
// max_y := y + r ;
35100: LD_ADDR_VAR 0 10
35104: PUSH
35105: LD_VAR 0 3
35109: PUSH
35110: LD_VAR 0 4
35114: PLUS
35115: ST_TO_ADDR
// for _x = min_x to max_x do
35116: LD_ADDR_VAR 0 11
35120: PUSH
35121: DOUBLE
35122: LD_VAR 0 7
35126: DEC
35127: ST_TO_ADDR
35128: LD_VAR 0 9
35132: PUSH
35133: FOR_TO
35134: IFFALSE 35251
// for _y = min_y to max_y do
35136: LD_ADDR_VAR 0 12
35140: PUSH
35141: DOUBLE
35142: LD_VAR 0 8
35146: DEC
35147: ST_TO_ADDR
35148: LD_VAR 0 10
35152: PUSH
35153: FOR_TO
35154: IFFALSE 35247
// begin if not ValidHex ( _x , _y ) then
35156: LD_VAR 0 11
35160: PPUSH
35161: LD_VAR 0 12
35165: PPUSH
35166: CALL_OW 488
35170: NOT
35171: IFFALSE 35175
// continue ;
35173: GO 35153
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35175: LD_VAR 0 11
35179: PPUSH
35180: LD_VAR 0 12
35184: PPUSH
35185: CALL_OW 351
35189: PUSH
35190: LD_VAR 0 11
35194: PPUSH
35195: LD_VAR 0 12
35199: PPUSH
35200: CALL_OW 554
35204: AND
35205: IFFALSE 35245
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35207: LD_ADDR_VAR 0 13
35211: PUSH
35212: LD_VAR 0 13
35216: PPUSH
35217: LD_VAR 0 13
35221: PUSH
35222: LD_INT 1
35224: PLUS
35225: PPUSH
35226: LD_VAR 0 11
35230: PUSH
35231: LD_VAR 0 12
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PPUSH
35240: CALL_OW 2
35244: ST_TO_ADDR
// end ;
35245: GO 35153
35247: POP
35248: POP
35249: GO 35133
35251: POP
35252: POP
// if not list then
35253: LD_VAR 0 13
35257: NOT
35258: IFFALSE 35262
// exit ;
35260: GO 35333
// for i in list do
35262: LD_ADDR_VAR 0 6
35266: PUSH
35267: LD_VAR 0 13
35271: PUSH
35272: FOR_IN
35273: IFFALSE 35331
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35275: LD_VAR 0 1
35279: PPUSH
35280: LD_STRING M
35282: PUSH
35283: LD_VAR 0 6
35287: PUSH
35288: LD_INT 1
35290: ARRAY
35291: PUSH
35292: LD_VAR 0 6
35296: PUSH
35297: LD_INT 2
35299: ARRAY
35300: PUSH
35301: LD_INT 0
35303: PUSH
35304: LD_INT 0
35306: PUSH
35307: LD_INT 0
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: PUSH
35322: EMPTY
35323: LIST
35324: PPUSH
35325: CALL_OW 447
35329: GO 35272
35331: POP
35332: POP
// end ;
35333: LD_VAR 0 5
35337: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35338: LD_EXP 111
35342: NOT
35343: IFFALSE 35393
35345: GO 35347
35347: DISABLE
// begin initHack := true ;
35348: LD_ADDR_EXP 111
35352: PUSH
35353: LD_INT 1
35355: ST_TO_ADDR
// hackTanks := [ ] ;
35356: LD_ADDR_EXP 112
35360: PUSH
35361: EMPTY
35362: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35363: LD_ADDR_EXP 113
35367: PUSH
35368: EMPTY
35369: ST_TO_ADDR
// hackLimit := 3 ;
35370: LD_ADDR_EXP 114
35374: PUSH
35375: LD_INT 3
35377: ST_TO_ADDR
// hackDist := 12 ;
35378: LD_ADDR_EXP 115
35382: PUSH
35383: LD_INT 12
35385: ST_TO_ADDR
// hackCounter := [ ] ;
35386: LD_ADDR_EXP 116
35390: PUSH
35391: EMPTY
35392: ST_TO_ADDR
// end ;
35393: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35394: LD_EXP 111
35398: PUSH
35399: LD_INT 34
35401: PUSH
35402: LD_EXP 34
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PPUSH
35411: CALL_OW 69
35415: AND
35416: IFFALSE 35671
35418: GO 35420
35420: DISABLE
35421: LD_INT 0
35423: PPUSH
35424: PPUSH
// begin enable ;
35425: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35426: LD_ADDR_VAR 0 1
35430: PUSH
35431: LD_INT 34
35433: PUSH
35434: LD_EXP 34
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PPUSH
35443: CALL_OW 69
35447: PUSH
35448: FOR_IN
35449: IFFALSE 35669
// begin if not i in hackTanks then
35451: LD_VAR 0 1
35455: PUSH
35456: LD_EXP 112
35460: IN
35461: NOT
35462: IFFALSE 35545
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35464: LD_ADDR_EXP 112
35468: PUSH
35469: LD_EXP 112
35473: PPUSH
35474: LD_EXP 112
35478: PUSH
35479: LD_INT 1
35481: PLUS
35482: PPUSH
35483: LD_VAR 0 1
35487: PPUSH
35488: CALL_OW 1
35492: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35493: LD_ADDR_EXP 113
35497: PUSH
35498: LD_EXP 113
35502: PPUSH
35503: LD_EXP 113
35507: PUSH
35508: LD_INT 1
35510: PLUS
35511: PPUSH
35512: EMPTY
35513: PPUSH
35514: CALL_OW 1
35518: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35519: LD_ADDR_EXP 116
35523: PUSH
35524: LD_EXP 116
35528: PPUSH
35529: LD_EXP 116
35533: PUSH
35534: LD_INT 1
35536: PLUS
35537: PPUSH
35538: EMPTY
35539: PPUSH
35540: CALL_OW 1
35544: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35545: LD_VAR 0 1
35549: PPUSH
35550: CALL_OW 302
35554: NOT
35555: IFFALSE 35568
// begin HackUnlinkAll ( i ) ;
35557: LD_VAR 0 1
35561: PPUSH
35562: CALL 35674 0 1
// continue ;
35566: GO 35448
// end ; HackCheckCapturedStatus ( i ) ;
35568: LD_VAR 0 1
35572: PPUSH
35573: CALL 36117 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35577: LD_ADDR_VAR 0 2
35581: PUSH
35582: LD_INT 81
35584: PUSH
35585: LD_VAR 0 1
35589: PPUSH
35590: CALL_OW 255
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 33
35601: PUSH
35602: LD_INT 3
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 91
35611: PUSH
35612: LD_VAR 0 1
35616: PUSH
35617: LD_EXP 115
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 50
35629: PUSH
35630: EMPTY
35631: LIST
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: PPUSH
35639: CALL_OW 69
35643: ST_TO_ADDR
// if not tmp then
35644: LD_VAR 0 2
35648: NOT
35649: IFFALSE 35653
// continue ;
35651: GO 35448
// HackLink ( i , tmp ) ;
35653: LD_VAR 0 1
35657: PPUSH
35658: LD_VAR 0 2
35662: PPUSH
35663: CALL 35810 0 2
// end ;
35667: GO 35448
35669: POP
35670: POP
// end ;
35671: PPOPN 2
35673: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35674: LD_INT 0
35676: PPUSH
35677: PPUSH
35678: PPUSH
// if not hack in hackTanks then
35679: LD_VAR 0 1
35683: PUSH
35684: LD_EXP 112
35688: IN
35689: NOT
35690: IFFALSE 35694
// exit ;
35692: GO 35805
// index := GetElementIndex ( hackTanks , hack ) ;
35694: LD_ADDR_VAR 0 4
35698: PUSH
35699: LD_EXP 112
35703: PPUSH
35704: LD_VAR 0 1
35708: PPUSH
35709: CALL 43432 0 2
35713: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35714: LD_EXP 113
35718: PUSH
35719: LD_VAR 0 4
35723: ARRAY
35724: IFFALSE 35805
// begin for i in hackTanksCaptured [ index ] do
35726: LD_ADDR_VAR 0 3
35730: PUSH
35731: LD_EXP 113
35735: PUSH
35736: LD_VAR 0 4
35740: ARRAY
35741: PUSH
35742: FOR_IN
35743: IFFALSE 35769
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35745: LD_VAR 0 3
35749: PUSH
35750: LD_INT 1
35752: ARRAY
35753: PPUSH
35754: LD_VAR 0 3
35758: PUSH
35759: LD_INT 2
35761: ARRAY
35762: PPUSH
35763: CALL_OW 235
35767: GO 35742
35769: POP
35770: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35771: LD_ADDR_EXP 113
35775: PUSH
35776: LD_EXP 113
35780: PPUSH
35781: LD_VAR 0 4
35785: PPUSH
35786: EMPTY
35787: PPUSH
35788: CALL_OW 1
35792: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35793: LD_VAR 0 1
35797: PPUSH
35798: LD_INT 0
35800: PPUSH
35801: CALL_OW 505
// end ; end ;
35805: LD_VAR 0 2
35809: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35810: LD_INT 0
35812: PPUSH
35813: PPUSH
35814: PPUSH
// if not hack in hackTanks or not vehicles then
35815: LD_VAR 0 1
35819: PUSH
35820: LD_EXP 112
35824: IN
35825: NOT
35826: PUSH
35827: LD_VAR 0 2
35831: NOT
35832: OR
35833: IFFALSE 35837
// exit ;
35835: GO 36112
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35837: LD_ADDR_VAR 0 2
35841: PUSH
35842: LD_VAR 0 1
35846: PPUSH
35847: LD_VAR 0 2
35851: PPUSH
35852: LD_INT 1
35854: PPUSH
35855: LD_INT 1
35857: PPUSH
35858: CALL 44082 0 4
35862: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35863: LD_ADDR_VAR 0 5
35867: PUSH
35868: LD_EXP 112
35872: PPUSH
35873: LD_VAR 0 1
35877: PPUSH
35878: CALL 43432 0 2
35882: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35883: LD_EXP 113
35887: PUSH
35888: LD_VAR 0 5
35892: ARRAY
35893: PUSH
35894: LD_EXP 114
35898: LESS
35899: IFFALSE 36088
// begin for i := 1 to vehicles do
35901: LD_ADDR_VAR 0 4
35905: PUSH
35906: DOUBLE
35907: LD_INT 1
35909: DEC
35910: ST_TO_ADDR
35911: LD_VAR 0 2
35915: PUSH
35916: FOR_TO
35917: IFFALSE 36086
// begin if hackTanksCaptured [ index ] = hackLimit then
35919: LD_EXP 113
35923: PUSH
35924: LD_VAR 0 5
35928: ARRAY
35929: PUSH
35930: LD_EXP 114
35934: EQUAL
35935: IFFALSE 35939
// break ;
35937: GO 36086
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35939: LD_ADDR_EXP 116
35943: PUSH
35944: LD_EXP 116
35948: PPUSH
35949: LD_VAR 0 5
35953: PPUSH
35954: LD_EXP 116
35958: PUSH
35959: LD_VAR 0 5
35963: ARRAY
35964: PUSH
35965: LD_INT 1
35967: PLUS
35968: PPUSH
35969: CALL_OW 1
35973: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35974: LD_ADDR_EXP 113
35978: PUSH
35979: LD_EXP 113
35983: PPUSH
35984: LD_VAR 0 5
35988: PUSH
35989: LD_EXP 113
35993: PUSH
35994: LD_VAR 0 5
35998: ARRAY
35999: PUSH
36000: LD_INT 1
36002: PLUS
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PPUSH
36008: LD_VAR 0 2
36012: PUSH
36013: LD_VAR 0 4
36017: ARRAY
36018: PUSH
36019: LD_VAR 0 2
36023: PUSH
36024: LD_VAR 0 4
36028: ARRAY
36029: PPUSH
36030: CALL_OW 255
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PPUSH
36039: CALL 43647 0 3
36043: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36044: LD_VAR 0 2
36048: PUSH
36049: LD_VAR 0 4
36053: ARRAY
36054: PPUSH
36055: LD_VAR 0 1
36059: PPUSH
36060: CALL_OW 255
36064: PPUSH
36065: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36069: LD_VAR 0 2
36073: PUSH
36074: LD_VAR 0 4
36078: ARRAY
36079: PPUSH
36080: CALL_OW 141
// end ;
36084: GO 35916
36086: POP
36087: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36088: LD_VAR 0 1
36092: PPUSH
36093: LD_EXP 113
36097: PUSH
36098: LD_VAR 0 5
36102: ARRAY
36103: PUSH
36104: LD_INT 0
36106: PLUS
36107: PPUSH
36108: CALL_OW 505
// end ;
36112: LD_VAR 0 3
36116: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36117: LD_INT 0
36119: PPUSH
36120: PPUSH
36121: PPUSH
36122: PPUSH
// if not hack in hackTanks then
36123: LD_VAR 0 1
36127: PUSH
36128: LD_EXP 112
36132: IN
36133: NOT
36134: IFFALSE 36138
// exit ;
36136: GO 36378
// index := GetElementIndex ( hackTanks , hack ) ;
36138: LD_ADDR_VAR 0 4
36142: PUSH
36143: LD_EXP 112
36147: PPUSH
36148: LD_VAR 0 1
36152: PPUSH
36153: CALL 43432 0 2
36157: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36158: LD_ADDR_VAR 0 3
36162: PUSH
36163: DOUBLE
36164: LD_EXP 113
36168: PUSH
36169: LD_VAR 0 4
36173: ARRAY
36174: INC
36175: ST_TO_ADDR
36176: LD_INT 1
36178: PUSH
36179: FOR_DOWNTO
36180: IFFALSE 36352
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36182: LD_ADDR_VAR 0 5
36186: PUSH
36187: LD_EXP 113
36191: PUSH
36192: LD_VAR 0 4
36196: ARRAY
36197: PUSH
36198: LD_VAR 0 3
36202: ARRAY
36203: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36204: LD_VAR 0 5
36208: PUSH
36209: LD_INT 1
36211: ARRAY
36212: PPUSH
36213: CALL_OW 302
36217: NOT
36218: PUSH
36219: LD_VAR 0 5
36223: PUSH
36224: LD_INT 1
36226: ARRAY
36227: PPUSH
36228: CALL_OW 255
36232: PUSH
36233: LD_VAR 0 1
36237: PPUSH
36238: CALL_OW 255
36242: NONEQUAL
36243: OR
36244: IFFALSE 36350
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36246: LD_VAR 0 5
36250: PUSH
36251: LD_INT 1
36253: ARRAY
36254: PPUSH
36255: CALL_OW 305
36259: PUSH
36260: LD_VAR 0 5
36264: PUSH
36265: LD_INT 1
36267: ARRAY
36268: PPUSH
36269: CALL_OW 255
36273: PUSH
36274: LD_VAR 0 1
36278: PPUSH
36279: CALL_OW 255
36283: EQUAL
36284: AND
36285: IFFALSE 36309
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36287: LD_VAR 0 5
36291: PUSH
36292: LD_INT 1
36294: ARRAY
36295: PPUSH
36296: LD_VAR 0 5
36300: PUSH
36301: LD_INT 2
36303: ARRAY
36304: PPUSH
36305: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36309: LD_ADDR_EXP 113
36313: PUSH
36314: LD_EXP 113
36318: PPUSH
36319: LD_VAR 0 4
36323: PPUSH
36324: LD_EXP 113
36328: PUSH
36329: LD_VAR 0 4
36333: ARRAY
36334: PPUSH
36335: LD_VAR 0 3
36339: PPUSH
36340: CALL_OW 3
36344: PPUSH
36345: CALL_OW 1
36349: ST_TO_ADDR
// end ; end ;
36350: GO 36179
36352: POP
36353: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36354: LD_VAR 0 1
36358: PPUSH
36359: LD_EXP 113
36363: PUSH
36364: LD_VAR 0 4
36368: ARRAY
36369: PUSH
36370: LD_INT 0
36372: PLUS
36373: PPUSH
36374: CALL_OW 505
// end ;
36378: LD_VAR 0 2
36382: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36383: LD_INT 0
36385: PPUSH
36386: PPUSH
36387: PPUSH
36388: PPUSH
// if not hack in hackTanks then
36389: LD_VAR 0 1
36393: PUSH
36394: LD_EXP 112
36398: IN
36399: NOT
36400: IFFALSE 36404
// exit ;
36402: GO 36489
// index := GetElementIndex ( hackTanks , hack ) ;
36404: LD_ADDR_VAR 0 5
36408: PUSH
36409: LD_EXP 112
36413: PPUSH
36414: LD_VAR 0 1
36418: PPUSH
36419: CALL 43432 0 2
36423: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36424: LD_ADDR_VAR 0 4
36428: PUSH
36429: DOUBLE
36430: LD_INT 1
36432: DEC
36433: ST_TO_ADDR
36434: LD_EXP 113
36438: PUSH
36439: LD_VAR 0 5
36443: ARRAY
36444: PUSH
36445: FOR_TO
36446: IFFALSE 36487
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36448: LD_EXP 113
36452: PUSH
36453: LD_VAR 0 5
36457: ARRAY
36458: PUSH
36459: LD_VAR 0 4
36463: ARRAY
36464: PUSH
36465: LD_INT 1
36467: ARRAY
36468: PUSH
36469: LD_VAR 0 2
36473: EQUAL
36474: IFFALSE 36485
// KillUnit ( vehicle ) ;
36476: LD_VAR 0 2
36480: PPUSH
36481: CALL_OW 66
36485: GO 36445
36487: POP
36488: POP
// end ;
36489: LD_VAR 0 3
36493: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36494: LD_EXP 117
36498: NOT
36499: IFFALSE 36534
36501: GO 36503
36503: DISABLE
// begin initMiner := true ;
36504: LD_ADDR_EXP 117
36508: PUSH
36509: LD_INT 1
36511: ST_TO_ADDR
// minersList := [ ] ;
36512: LD_ADDR_EXP 118
36516: PUSH
36517: EMPTY
36518: ST_TO_ADDR
// minerMinesList := [ ] ;
36519: LD_ADDR_EXP 119
36523: PUSH
36524: EMPTY
36525: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36526: LD_ADDR_EXP 120
36530: PUSH
36531: LD_INT 5
36533: ST_TO_ADDR
// end ;
36534: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36535: LD_EXP 117
36539: PUSH
36540: LD_INT 34
36542: PUSH
36543: LD_EXP 39
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PPUSH
36552: CALL_OW 69
36556: AND
36557: IFFALSE 37020
36559: GO 36561
36561: DISABLE
36562: LD_INT 0
36564: PPUSH
36565: PPUSH
36566: PPUSH
36567: PPUSH
// begin enable ;
36568: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36569: LD_ADDR_VAR 0 1
36573: PUSH
36574: LD_INT 34
36576: PUSH
36577: LD_EXP 39
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PPUSH
36586: CALL_OW 69
36590: PUSH
36591: FOR_IN
36592: IFFALSE 36664
// begin if not i in minersList then
36594: LD_VAR 0 1
36598: PUSH
36599: LD_EXP 118
36603: IN
36604: NOT
36605: IFFALSE 36662
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36607: LD_ADDR_EXP 118
36611: PUSH
36612: LD_EXP 118
36616: PPUSH
36617: LD_EXP 118
36621: PUSH
36622: LD_INT 1
36624: PLUS
36625: PPUSH
36626: LD_VAR 0 1
36630: PPUSH
36631: CALL_OW 1
36635: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36636: LD_ADDR_EXP 119
36640: PUSH
36641: LD_EXP 119
36645: PPUSH
36646: LD_EXP 119
36650: PUSH
36651: LD_INT 1
36653: PLUS
36654: PPUSH
36655: EMPTY
36656: PPUSH
36657: CALL_OW 1
36661: ST_TO_ADDR
// end end ;
36662: GO 36591
36664: POP
36665: POP
// for i := minerMinesList downto 1 do
36666: LD_ADDR_VAR 0 1
36670: PUSH
36671: DOUBLE
36672: LD_EXP 119
36676: INC
36677: ST_TO_ADDR
36678: LD_INT 1
36680: PUSH
36681: FOR_DOWNTO
36682: IFFALSE 37018
// begin if IsLive ( minersList [ i ] ) then
36684: LD_EXP 118
36688: PUSH
36689: LD_VAR 0 1
36693: ARRAY
36694: PPUSH
36695: CALL_OW 300
36699: IFFALSE 36727
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36701: LD_EXP 118
36705: PUSH
36706: LD_VAR 0 1
36710: ARRAY
36711: PPUSH
36712: LD_EXP 119
36716: PUSH
36717: LD_VAR 0 1
36721: ARRAY
36722: PPUSH
36723: CALL_OW 505
// if not minerMinesList [ i ] then
36727: LD_EXP 119
36731: PUSH
36732: LD_VAR 0 1
36736: ARRAY
36737: NOT
36738: IFFALSE 36742
// continue ;
36740: GO 36681
// for j := minerMinesList [ i ] downto 1 do
36742: LD_ADDR_VAR 0 2
36746: PUSH
36747: DOUBLE
36748: LD_EXP 119
36752: PUSH
36753: LD_VAR 0 1
36757: ARRAY
36758: INC
36759: ST_TO_ADDR
36760: LD_INT 1
36762: PUSH
36763: FOR_DOWNTO
36764: IFFALSE 37014
// begin side := GetSide ( minersList [ i ] ) ;
36766: LD_ADDR_VAR 0 3
36770: PUSH
36771: LD_EXP 118
36775: PUSH
36776: LD_VAR 0 1
36780: ARRAY
36781: PPUSH
36782: CALL_OW 255
36786: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36787: LD_ADDR_VAR 0 4
36791: PUSH
36792: LD_EXP 119
36796: PUSH
36797: LD_VAR 0 1
36801: ARRAY
36802: PUSH
36803: LD_VAR 0 2
36807: ARRAY
36808: PUSH
36809: LD_INT 1
36811: ARRAY
36812: PPUSH
36813: LD_EXP 119
36817: PUSH
36818: LD_VAR 0 1
36822: ARRAY
36823: PUSH
36824: LD_VAR 0 2
36828: ARRAY
36829: PUSH
36830: LD_INT 2
36832: ARRAY
36833: PPUSH
36834: CALL_OW 428
36838: ST_TO_ADDR
// if not tmp then
36839: LD_VAR 0 4
36843: NOT
36844: IFFALSE 36848
// continue ;
36846: GO 36763
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36848: LD_VAR 0 4
36852: PUSH
36853: LD_INT 81
36855: PUSH
36856: LD_VAR 0 3
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PPUSH
36865: CALL_OW 69
36869: IN
36870: PUSH
36871: LD_EXP 119
36875: PUSH
36876: LD_VAR 0 1
36880: ARRAY
36881: PUSH
36882: LD_VAR 0 2
36886: ARRAY
36887: PUSH
36888: LD_INT 1
36890: ARRAY
36891: PPUSH
36892: LD_EXP 119
36896: PUSH
36897: LD_VAR 0 1
36901: ARRAY
36902: PUSH
36903: LD_VAR 0 2
36907: ARRAY
36908: PUSH
36909: LD_INT 2
36911: ARRAY
36912: PPUSH
36913: CALL_OW 458
36917: AND
36918: IFFALSE 37012
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36920: LD_EXP 119
36924: PUSH
36925: LD_VAR 0 1
36929: ARRAY
36930: PUSH
36931: LD_VAR 0 2
36935: ARRAY
36936: PUSH
36937: LD_INT 1
36939: ARRAY
36940: PPUSH
36941: LD_EXP 119
36945: PUSH
36946: LD_VAR 0 1
36950: ARRAY
36951: PUSH
36952: LD_VAR 0 2
36956: ARRAY
36957: PUSH
36958: LD_INT 2
36960: ARRAY
36961: PPUSH
36962: LD_VAR 0 3
36966: PPUSH
36967: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36971: LD_ADDR_EXP 119
36975: PUSH
36976: LD_EXP 119
36980: PPUSH
36981: LD_VAR 0 1
36985: PPUSH
36986: LD_EXP 119
36990: PUSH
36991: LD_VAR 0 1
36995: ARRAY
36996: PPUSH
36997: LD_VAR 0 2
37001: PPUSH
37002: CALL_OW 3
37006: PPUSH
37007: CALL_OW 1
37011: ST_TO_ADDR
// end ; end ;
37012: GO 36763
37014: POP
37015: POP
// end ;
37016: GO 36681
37018: POP
37019: POP
// end ;
37020: PPOPN 4
37022: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37023: LD_INT 0
37025: PPUSH
37026: PPUSH
// result := false ;
37027: LD_ADDR_VAR 0 4
37031: PUSH
37032: LD_INT 0
37034: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37035: LD_VAR 0 1
37039: PPUSH
37040: CALL_OW 264
37044: PUSH
37045: LD_EXP 39
37049: EQUAL
37050: NOT
37051: IFFALSE 37055
// exit ;
37053: GO 37295
// index := GetElementIndex ( minersList , unit ) ;
37055: LD_ADDR_VAR 0 5
37059: PUSH
37060: LD_EXP 118
37064: PPUSH
37065: LD_VAR 0 1
37069: PPUSH
37070: CALL 43432 0 2
37074: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37075: LD_EXP 119
37079: PUSH
37080: LD_VAR 0 5
37084: ARRAY
37085: PUSH
37086: LD_EXP 120
37090: GREATEREQUAL
37091: IFFALSE 37095
// exit ;
37093: GO 37295
// ComMoveXY ( unit , x , y ) ;
37095: LD_VAR 0 1
37099: PPUSH
37100: LD_VAR 0 2
37104: PPUSH
37105: LD_VAR 0 3
37109: PPUSH
37110: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37114: LD_INT 35
37116: PPUSH
37117: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37121: LD_VAR 0 1
37125: PPUSH
37126: LD_VAR 0 2
37130: PPUSH
37131: LD_VAR 0 3
37135: PPUSH
37136: CALL 74718 0 3
37140: NOT
37141: PUSH
37142: LD_VAR 0 1
37146: PPUSH
37147: CALL_OW 314
37151: AND
37152: IFFALSE 37156
// exit ;
37154: GO 37295
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37156: LD_VAR 0 2
37160: PPUSH
37161: LD_VAR 0 3
37165: PPUSH
37166: CALL_OW 428
37170: PUSH
37171: LD_VAR 0 1
37175: EQUAL
37176: PUSH
37177: LD_VAR 0 1
37181: PPUSH
37182: CALL_OW 314
37186: NOT
37187: AND
37188: IFFALSE 37114
// PlaySoundXY ( x , y , PlantMine ) ;
37190: LD_VAR 0 2
37194: PPUSH
37195: LD_VAR 0 3
37199: PPUSH
37200: LD_STRING PlantMine
37202: PPUSH
37203: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37207: LD_VAR 0 2
37211: PPUSH
37212: LD_VAR 0 3
37216: PPUSH
37217: LD_VAR 0 1
37221: PPUSH
37222: CALL_OW 255
37226: PPUSH
37227: LD_INT 0
37229: PPUSH
37230: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37234: LD_ADDR_EXP 119
37238: PUSH
37239: LD_EXP 119
37243: PPUSH
37244: LD_VAR 0 5
37248: PUSH
37249: LD_EXP 119
37253: PUSH
37254: LD_VAR 0 5
37258: ARRAY
37259: PUSH
37260: LD_INT 1
37262: PLUS
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PPUSH
37268: LD_VAR 0 2
37272: PUSH
37273: LD_VAR 0 3
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PPUSH
37282: CALL 43647 0 3
37286: ST_TO_ADDR
// result := true ;
37287: LD_ADDR_VAR 0 4
37291: PUSH
37292: LD_INT 1
37294: ST_TO_ADDR
// end ;
37295: LD_VAR 0 4
37299: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37300: LD_INT 0
37302: PPUSH
37303: PPUSH
37304: PPUSH
// if not unit in minersList then
37305: LD_VAR 0 1
37309: PUSH
37310: LD_EXP 118
37314: IN
37315: NOT
37316: IFFALSE 37320
// exit ;
37318: GO 37712
// index := GetElementIndex ( minersList , unit ) ;
37320: LD_ADDR_VAR 0 6
37324: PUSH
37325: LD_EXP 118
37329: PPUSH
37330: LD_VAR 0 1
37334: PPUSH
37335: CALL 43432 0 2
37339: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37340: LD_ADDR_VAR 0 5
37344: PUSH
37345: DOUBLE
37346: LD_EXP 119
37350: PUSH
37351: LD_VAR 0 6
37355: ARRAY
37356: INC
37357: ST_TO_ADDR
37358: LD_INT 1
37360: PUSH
37361: FOR_DOWNTO
37362: IFFALSE 37523
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37364: LD_EXP 119
37368: PUSH
37369: LD_VAR 0 6
37373: ARRAY
37374: PUSH
37375: LD_VAR 0 5
37379: ARRAY
37380: PUSH
37381: LD_INT 1
37383: ARRAY
37384: PUSH
37385: LD_VAR 0 2
37389: EQUAL
37390: PUSH
37391: LD_EXP 119
37395: PUSH
37396: LD_VAR 0 6
37400: ARRAY
37401: PUSH
37402: LD_VAR 0 5
37406: ARRAY
37407: PUSH
37408: LD_INT 2
37410: ARRAY
37411: PUSH
37412: LD_VAR 0 3
37416: EQUAL
37417: AND
37418: IFFALSE 37521
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37420: LD_EXP 119
37424: PUSH
37425: LD_VAR 0 6
37429: ARRAY
37430: PUSH
37431: LD_VAR 0 5
37435: ARRAY
37436: PUSH
37437: LD_INT 1
37439: ARRAY
37440: PPUSH
37441: LD_EXP 119
37445: PUSH
37446: LD_VAR 0 6
37450: ARRAY
37451: PUSH
37452: LD_VAR 0 5
37456: ARRAY
37457: PUSH
37458: LD_INT 2
37460: ARRAY
37461: PPUSH
37462: LD_VAR 0 1
37466: PPUSH
37467: CALL_OW 255
37471: PPUSH
37472: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37476: LD_ADDR_EXP 119
37480: PUSH
37481: LD_EXP 119
37485: PPUSH
37486: LD_VAR 0 6
37490: PPUSH
37491: LD_EXP 119
37495: PUSH
37496: LD_VAR 0 6
37500: ARRAY
37501: PPUSH
37502: LD_VAR 0 5
37506: PPUSH
37507: CALL_OW 3
37511: PPUSH
37512: CALL_OW 1
37516: ST_TO_ADDR
// exit ;
37517: POP
37518: POP
37519: GO 37712
// end ; end ;
37521: GO 37361
37523: POP
37524: POP
// for i := minerMinesList [ index ] downto 1 do
37525: LD_ADDR_VAR 0 5
37529: PUSH
37530: DOUBLE
37531: LD_EXP 119
37535: PUSH
37536: LD_VAR 0 6
37540: ARRAY
37541: INC
37542: ST_TO_ADDR
37543: LD_INT 1
37545: PUSH
37546: FOR_DOWNTO
37547: IFFALSE 37710
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37549: LD_EXP 119
37553: PUSH
37554: LD_VAR 0 6
37558: ARRAY
37559: PUSH
37560: LD_VAR 0 5
37564: ARRAY
37565: PUSH
37566: LD_INT 1
37568: ARRAY
37569: PPUSH
37570: LD_EXP 119
37574: PUSH
37575: LD_VAR 0 6
37579: ARRAY
37580: PUSH
37581: LD_VAR 0 5
37585: ARRAY
37586: PUSH
37587: LD_INT 2
37589: ARRAY
37590: PPUSH
37591: LD_VAR 0 2
37595: PPUSH
37596: LD_VAR 0 3
37600: PPUSH
37601: CALL_OW 298
37605: PUSH
37606: LD_INT 6
37608: LESS
37609: IFFALSE 37708
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37611: LD_EXP 119
37615: PUSH
37616: LD_VAR 0 6
37620: ARRAY
37621: PUSH
37622: LD_VAR 0 5
37626: ARRAY
37627: PUSH
37628: LD_INT 1
37630: ARRAY
37631: PPUSH
37632: LD_EXP 119
37636: PUSH
37637: LD_VAR 0 6
37641: ARRAY
37642: PUSH
37643: LD_VAR 0 5
37647: ARRAY
37648: PUSH
37649: LD_INT 2
37651: ARRAY
37652: PPUSH
37653: LD_VAR 0 1
37657: PPUSH
37658: CALL_OW 255
37662: PPUSH
37663: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37667: LD_ADDR_EXP 119
37671: PUSH
37672: LD_EXP 119
37676: PPUSH
37677: LD_VAR 0 6
37681: PPUSH
37682: LD_EXP 119
37686: PUSH
37687: LD_VAR 0 6
37691: ARRAY
37692: PPUSH
37693: LD_VAR 0 5
37697: PPUSH
37698: CALL_OW 3
37702: PPUSH
37703: CALL_OW 1
37707: ST_TO_ADDR
// end ; end ;
37708: GO 37546
37710: POP
37711: POP
// end ;
37712: LD_VAR 0 4
37716: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37717: LD_INT 0
37719: PPUSH
37720: PPUSH
37721: PPUSH
37722: PPUSH
37723: PPUSH
37724: PPUSH
37725: PPUSH
37726: PPUSH
37727: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37728: LD_VAR 0 1
37732: PPUSH
37733: CALL_OW 264
37737: PUSH
37738: LD_EXP 39
37742: EQUAL
37743: NOT
37744: PUSH
37745: LD_VAR 0 1
37749: PUSH
37750: LD_EXP 118
37754: IN
37755: NOT
37756: OR
37757: IFFALSE 37761
// exit ;
37759: GO 38083
// index := GetElementIndex ( minersList , unit ) ;
37761: LD_ADDR_VAR 0 6
37765: PUSH
37766: LD_EXP 118
37770: PPUSH
37771: LD_VAR 0 1
37775: PPUSH
37776: CALL 43432 0 2
37780: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37781: LD_ADDR_VAR 0 8
37785: PUSH
37786: LD_EXP 120
37790: PUSH
37791: LD_EXP 119
37795: PUSH
37796: LD_VAR 0 6
37800: ARRAY
37801: MINUS
37802: ST_TO_ADDR
// if not minesFreeAmount then
37803: LD_VAR 0 8
37807: NOT
37808: IFFALSE 37812
// exit ;
37810: GO 38083
// tmp := [ ] ;
37812: LD_ADDR_VAR 0 7
37816: PUSH
37817: EMPTY
37818: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37819: LD_ADDR_VAR 0 5
37823: PUSH
37824: DOUBLE
37825: LD_INT 1
37827: DEC
37828: ST_TO_ADDR
37829: LD_VAR 0 8
37833: PUSH
37834: FOR_TO
37835: IFFALSE 38030
// begin _d := rand ( 0 , 5 ) ;
37837: LD_ADDR_VAR 0 11
37841: PUSH
37842: LD_INT 0
37844: PPUSH
37845: LD_INT 5
37847: PPUSH
37848: CALL_OW 12
37852: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37853: LD_ADDR_VAR 0 12
37857: PUSH
37858: LD_INT 2
37860: PPUSH
37861: LD_INT 6
37863: PPUSH
37864: CALL_OW 12
37868: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37869: LD_ADDR_VAR 0 9
37873: PUSH
37874: LD_VAR 0 2
37878: PPUSH
37879: LD_VAR 0 11
37883: PPUSH
37884: LD_VAR 0 12
37888: PPUSH
37889: CALL_OW 272
37893: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37894: LD_ADDR_VAR 0 10
37898: PUSH
37899: LD_VAR 0 3
37903: PPUSH
37904: LD_VAR 0 11
37908: PPUSH
37909: LD_VAR 0 12
37913: PPUSH
37914: CALL_OW 273
37918: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37919: LD_VAR 0 9
37923: PPUSH
37924: LD_VAR 0 10
37928: PPUSH
37929: CALL_OW 488
37933: PUSH
37934: LD_VAR 0 9
37938: PUSH
37939: LD_VAR 0 10
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_VAR 0 7
37952: IN
37953: NOT
37954: AND
37955: PUSH
37956: LD_VAR 0 9
37960: PPUSH
37961: LD_VAR 0 10
37965: PPUSH
37966: CALL_OW 458
37970: NOT
37971: AND
37972: IFFALSE 38014
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37974: LD_ADDR_VAR 0 7
37978: PUSH
37979: LD_VAR 0 7
37983: PPUSH
37984: LD_VAR 0 7
37988: PUSH
37989: LD_INT 1
37991: PLUS
37992: PPUSH
37993: LD_VAR 0 9
37997: PUSH
37998: LD_VAR 0 10
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PPUSH
38007: CALL_OW 1
38011: ST_TO_ADDR
38012: GO 38028
// i := i - 1 ;
38014: LD_ADDR_VAR 0 5
38018: PUSH
38019: LD_VAR 0 5
38023: PUSH
38024: LD_INT 1
38026: MINUS
38027: ST_TO_ADDR
// end ;
38028: GO 37834
38030: POP
38031: POP
// for i in tmp do
38032: LD_ADDR_VAR 0 5
38036: PUSH
38037: LD_VAR 0 7
38041: PUSH
38042: FOR_IN
38043: IFFALSE 38081
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38045: LD_VAR 0 1
38049: PPUSH
38050: LD_VAR 0 5
38054: PUSH
38055: LD_INT 1
38057: ARRAY
38058: PPUSH
38059: LD_VAR 0 5
38063: PUSH
38064: LD_INT 2
38066: ARRAY
38067: PPUSH
38068: CALL 37023 0 3
38072: NOT
38073: IFFALSE 38079
// exit ;
38075: POP
38076: POP
38077: GO 38083
38079: GO 38042
38081: POP
38082: POP
// end ;
38083: LD_VAR 0 4
38087: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38088: LD_INT 0
38090: PPUSH
38091: PPUSH
38092: PPUSH
38093: PPUSH
38094: PPUSH
38095: PPUSH
38096: PPUSH
// if not GetClass ( unit ) = class_sniper then
38097: LD_VAR 0 1
38101: PPUSH
38102: CALL_OW 257
38106: PUSH
38107: LD_INT 5
38109: EQUAL
38110: NOT
38111: IFFALSE 38115
// exit ;
38113: GO 38503
// dist := 8 ;
38115: LD_ADDR_VAR 0 5
38119: PUSH
38120: LD_INT 8
38122: ST_TO_ADDR
// viewRange := 12 ;
38123: LD_ADDR_VAR 0 7
38127: PUSH
38128: LD_INT 12
38130: ST_TO_ADDR
// side := GetSide ( unit ) ;
38131: LD_ADDR_VAR 0 6
38135: PUSH
38136: LD_VAR 0 1
38140: PPUSH
38141: CALL_OW 255
38145: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38146: LD_INT 61
38148: PPUSH
38149: LD_VAR 0 6
38153: PPUSH
38154: CALL_OW 321
38158: PUSH
38159: LD_INT 2
38161: EQUAL
38162: IFFALSE 38172
// viewRange := 16 ;
38164: LD_ADDR_VAR 0 7
38168: PUSH
38169: LD_INT 16
38171: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38172: LD_VAR 0 1
38176: PPUSH
38177: LD_VAR 0 2
38181: PPUSH
38182: LD_VAR 0 3
38186: PPUSH
38187: CALL_OW 297
38191: PUSH
38192: LD_VAR 0 5
38196: GREATER
38197: IFFALSE 38276
// begin ComMoveXY ( unit , x , y ) ;
38199: LD_VAR 0 1
38203: PPUSH
38204: LD_VAR 0 2
38208: PPUSH
38209: LD_VAR 0 3
38213: PPUSH
38214: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38218: LD_INT 35
38220: PPUSH
38221: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38225: LD_VAR 0 1
38229: PPUSH
38230: LD_VAR 0 2
38234: PPUSH
38235: LD_VAR 0 3
38239: PPUSH
38240: CALL 74718 0 3
38244: NOT
38245: IFFALSE 38249
// exit ;
38247: GO 38503
// until GetDistUnitXY ( unit , x , y ) < dist ;
38249: LD_VAR 0 1
38253: PPUSH
38254: LD_VAR 0 2
38258: PPUSH
38259: LD_VAR 0 3
38263: PPUSH
38264: CALL_OW 297
38268: PUSH
38269: LD_VAR 0 5
38273: LESS
38274: IFFALSE 38218
// end ; ComTurnXY ( unit , x , y ) ;
38276: LD_VAR 0 1
38280: PPUSH
38281: LD_VAR 0 2
38285: PPUSH
38286: LD_VAR 0 3
38290: PPUSH
38291: CALL_OW 118
// wait ( 5 ) ;
38295: LD_INT 5
38297: PPUSH
38298: CALL_OW 67
// _d := GetDir ( unit ) ;
38302: LD_ADDR_VAR 0 10
38306: PUSH
38307: LD_VAR 0 1
38311: PPUSH
38312: CALL_OW 254
38316: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38317: LD_ADDR_VAR 0 8
38321: PUSH
38322: LD_VAR 0 1
38326: PPUSH
38327: CALL_OW 250
38331: PPUSH
38332: LD_VAR 0 10
38336: PPUSH
38337: LD_VAR 0 5
38341: PPUSH
38342: CALL_OW 272
38346: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38347: LD_ADDR_VAR 0 9
38351: PUSH
38352: LD_VAR 0 1
38356: PPUSH
38357: CALL_OW 251
38361: PPUSH
38362: LD_VAR 0 10
38366: PPUSH
38367: LD_VAR 0 5
38371: PPUSH
38372: CALL_OW 273
38376: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38377: LD_VAR 0 8
38381: PPUSH
38382: LD_VAR 0 9
38386: PPUSH
38387: CALL_OW 488
38391: NOT
38392: IFFALSE 38396
// exit ;
38394: GO 38503
// ComAnimCustom ( unit , 1 ) ;
38396: LD_VAR 0 1
38400: PPUSH
38401: LD_INT 1
38403: PPUSH
38404: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38408: LD_VAR 0 8
38412: PPUSH
38413: LD_VAR 0 9
38417: PPUSH
38418: LD_VAR 0 6
38422: PPUSH
38423: LD_VAR 0 7
38427: PPUSH
38428: CALL_OW 330
// repeat wait ( 1 ) ;
38432: LD_INT 1
38434: PPUSH
38435: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38439: LD_VAR 0 1
38443: PPUSH
38444: CALL_OW 316
38448: PUSH
38449: LD_VAR 0 1
38453: PPUSH
38454: CALL_OW 314
38458: OR
38459: PUSH
38460: LD_VAR 0 1
38464: PPUSH
38465: CALL_OW 302
38469: NOT
38470: OR
38471: PUSH
38472: LD_VAR 0 1
38476: PPUSH
38477: CALL_OW 301
38481: OR
38482: IFFALSE 38432
// RemoveSeeing ( _x , _y , side ) ;
38484: LD_VAR 0 8
38488: PPUSH
38489: LD_VAR 0 9
38493: PPUSH
38494: LD_VAR 0 6
38498: PPUSH
38499: CALL_OW 331
// end ; end_of_file
38503: LD_VAR 0 4
38507: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38508: LD_INT 0
38510: PPUSH
38511: PPUSH
// if exist_mode then
38512: LD_VAR 0 2
38516: IFFALSE 38541
// unit := CreateCharacter ( prefix & ident ) else
38518: LD_ADDR_VAR 0 5
38522: PUSH
38523: LD_VAR 0 3
38527: PUSH
38528: LD_VAR 0 1
38532: STR
38533: PPUSH
38534: CALL_OW 34
38538: ST_TO_ADDR
38539: GO 38556
// unit := NewCharacter ( ident ) ;
38541: LD_ADDR_VAR 0 5
38545: PUSH
38546: LD_VAR 0 1
38550: PPUSH
38551: CALL_OW 25
38555: ST_TO_ADDR
// result := unit ;
38556: LD_ADDR_VAR 0 4
38560: PUSH
38561: LD_VAR 0 5
38565: ST_TO_ADDR
// end ;
38566: LD_VAR 0 4
38570: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38571: LD_INT 0
38573: PPUSH
38574: PPUSH
// if not side or not nation then
38575: LD_VAR 0 1
38579: NOT
38580: PUSH
38581: LD_VAR 0 2
38585: NOT
38586: OR
38587: IFFALSE 38591
// exit ;
38589: GO 39359
// case nation of nation_american :
38591: LD_VAR 0 2
38595: PUSH
38596: LD_INT 1
38598: DOUBLE
38599: EQUAL
38600: IFTRUE 38604
38602: GO 38818
38604: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38605: LD_ADDR_VAR 0 4
38609: PUSH
38610: LD_INT 35
38612: PUSH
38613: LD_INT 45
38615: PUSH
38616: LD_INT 46
38618: PUSH
38619: LD_INT 47
38621: PUSH
38622: LD_INT 82
38624: PUSH
38625: LD_INT 83
38627: PUSH
38628: LD_INT 84
38630: PUSH
38631: LD_INT 85
38633: PUSH
38634: LD_INT 86
38636: PUSH
38637: LD_INT 1
38639: PUSH
38640: LD_INT 2
38642: PUSH
38643: LD_INT 6
38645: PUSH
38646: LD_INT 15
38648: PUSH
38649: LD_INT 16
38651: PUSH
38652: LD_INT 7
38654: PUSH
38655: LD_INT 12
38657: PUSH
38658: LD_INT 13
38660: PUSH
38661: LD_INT 10
38663: PUSH
38664: LD_INT 14
38666: PUSH
38667: LD_INT 20
38669: PUSH
38670: LD_INT 21
38672: PUSH
38673: LD_INT 22
38675: PUSH
38676: LD_INT 25
38678: PUSH
38679: LD_INT 32
38681: PUSH
38682: LD_INT 27
38684: PUSH
38685: LD_INT 36
38687: PUSH
38688: LD_INT 69
38690: PUSH
38691: LD_INT 39
38693: PUSH
38694: LD_INT 34
38696: PUSH
38697: LD_INT 40
38699: PUSH
38700: LD_INT 48
38702: PUSH
38703: LD_INT 49
38705: PUSH
38706: LD_INT 50
38708: PUSH
38709: LD_INT 51
38711: PUSH
38712: LD_INT 52
38714: PUSH
38715: LD_INT 53
38717: PUSH
38718: LD_INT 54
38720: PUSH
38721: LD_INT 55
38723: PUSH
38724: LD_INT 56
38726: PUSH
38727: LD_INT 57
38729: PUSH
38730: LD_INT 58
38732: PUSH
38733: LD_INT 59
38735: PUSH
38736: LD_INT 60
38738: PUSH
38739: LD_INT 61
38741: PUSH
38742: LD_INT 62
38744: PUSH
38745: LD_INT 80
38747: PUSH
38748: LD_INT 82
38750: PUSH
38751: LD_INT 83
38753: PUSH
38754: LD_INT 84
38756: PUSH
38757: LD_INT 85
38759: PUSH
38760: LD_INT 86
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: ST_TO_ADDR
38816: GO 39283
38818: LD_INT 2
38820: DOUBLE
38821: EQUAL
38822: IFTRUE 38826
38824: GO 39052
38826: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38827: LD_ADDR_VAR 0 4
38831: PUSH
38832: LD_INT 35
38834: PUSH
38835: LD_INT 45
38837: PUSH
38838: LD_INT 46
38840: PUSH
38841: LD_INT 47
38843: PUSH
38844: LD_INT 82
38846: PUSH
38847: LD_INT 83
38849: PUSH
38850: LD_INT 84
38852: PUSH
38853: LD_INT 85
38855: PUSH
38856: LD_INT 87
38858: PUSH
38859: LD_INT 70
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: LD_INT 11
38867: PUSH
38868: LD_INT 3
38870: PUSH
38871: LD_INT 4
38873: PUSH
38874: LD_INT 5
38876: PUSH
38877: LD_INT 6
38879: PUSH
38880: LD_INT 15
38882: PUSH
38883: LD_INT 18
38885: PUSH
38886: LD_INT 7
38888: PUSH
38889: LD_INT 17
38891: PUSH
38892: LD_INT 8
38894: PUSH
38895: LD_INT 20
38897: PUSH
38898: LD_INT 21
38900: PUSH
38901: LD_INT 22
38903: PUSH
38904: LD_INT 72
38906: PUSH
38907: LD_INT 26
38909: PUSH
38910: LD_INT 69
38912: PUSH
38913: LD_INT 39
38915: PUSH
38916: LD_INT 40
38918: PUSH
38919: LD_INT 41
38921: PUSH
38922: LD_INT 42
38924: PUSH
38925: LD_INT 43
38927: PUSH
38928: LD_INT 48
38930: PUSH
38931: LD_INT 49
38933: PUSH
38934: LD_INT 50
38936: PUSH
38937: LD_INT 51
38939: PUSH
38940: LD_INT 52
38942: PUSH
38943: LD_INT 53
38945: PUSH
38946: LD_INT 54
38948: PUSH
38949: LD_INT 55
38951: PUSH
38952: LD_INT 56
38954: PUSH
38955: LD_INT 60
38957: PUSH
38958: LD_INT 61
38960: PUSH
38961: LD_INT 62
38963: PUSH
38964: LD_INT 66
38966: PUSH
38967: LD_INT 67
38969: PUSH
38970: LD_INT 68
38972: PUSH
38973: LD_INT 81
38975: PUSH
38976: LD_INT 82
38978: PUSH
38979: LD_INT 83
38981: PUSH
38982: LD_INT 84
38984: PUSH
38985: LD_INT 85
38987: PUSH
38988: LD_INT 87
38990: PUSH
38991: LD_INT 88
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: ST_TO_ADDR
39050: GO 39283
39052: LD_INT 3
39054: DOUBLE
39055: EQUAL
39056: IFTRUE 39060
39058: GO 39282
39060: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39061: LD_ADDR_VAR 0 4
39065: PUSH
39066: LD_INT 46
39068: PUSH
39069: LD_INT 47
39071: PUSH
39072: LD_INT 1
39074: PUSH
39075: LD_INT 2
39077: PUSH
39078: LD_INT 82
39080: PUSH
39081: LD_INT 83
39083: PUSH
39084: LD_INT 84
39086: PUSH
39087: LD_INT 85
39089: PUSH
39090: LD_INT 86
39092: PUSH
39093: LD_INT 11
39095: PUSH
39096: LD_INT 9
39098: PUSH
39099: LD_INT 20
39101: PUSH
39102: LD_INT 19
39104: PUSH
39105: LD_INT 21
39107: PUSH
39108: LD_INT 24
39110: PUSH
39111: LD_INT 22
39113: PUSH
39114: LD_INT 25
39116: PUSH
39117: LD_INT 28
39119: PUSH
39120: LD_INT 29
39122: PUSH
39123: LD_INT 30
39125: PUSH
39126: LD_INT 31
39128: PUSH
39129: LD_INT 37
39131: PUSH
39132: LD_INT 38
39134: PUSH
39135: LD_INT 32
39137: PUSH
39138: LD_INT 27
39140: PUSH
39141: LD_INT 33
39143: PUSH
39144: LD_INT 69
39146: PUSH
39147: LD_INT 39
39149: PUSH
39150: LD_INT 34
39152: PUSH
39153: LD_INT 40
39155: PUSH
39156: LD_INT 71
39158: PUSH
39159: LD_INT 23
39161: PUSH
39162: LD_INT 44
39164: PUSH
39165: LD_INT 48
39167: PUSH
39168: LD_INT 49
39170: PUSH
39171: LD_INT 50
39173: PUSH
39174: LD_INT 51
39176: PUSH
39177: LD_INT 52
39179: PUSH
39180: LD_INT 53
39182: PUSH
39183: LD_INT 54
39185: PUSH
39186: LD_INT 55
39188: PUSH
39189: LD_INT 56
39191: PUSH
39192: LD_INT 57
39194: PUSH
39195: LD_INT 58
39197: PUSH
39198: LD_INT 59
39200: PUSH
39201: LD_INT 63
39203: PUSH
39204: LD_INT 64
39206: PUSH
39207: LD_INT 65
39209: PUSH
39210: LD_INT 82
39212: PUSH
39213: LD_INT 83
39215: PUSH
39216: LD_INT 84
39218: PUSH
39219: LD_INT 85
39221: PUSH
39222: LD_INT 86
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: ST_TO_ADDR
39280: GO 39283
39282: POP
// if state > - 1 and state < 3 then
39283: LD_VAR 0 3
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: GREATER
39292: PUSH
39293: LD_VAR 0 3
39297: PUSH
39298: LD_INT 3
39300: LESS
39301: AND
39302: IFFALSE 39359
// for i in result do
39304: LD_ADDR_VAR 0 5
39308: PUSH
39309: LD_VAR 0 4
39313: PUSH
39314: FOR_IN
39315: IFFALSE 39357
// if GetTech ( i , side ) <> state then
39317: LD_VAR 0 5
39321: PPUSH
39322: LD_VAR 0 1
39326: PPUSH
39327: CALL_OW 321
39331: PUSH
39332: LD_VAR 0 3
39336: NONEQUAL
39337: IFFALSE 39355
// result := result diff i ;
39339: LD_ADDR_VAR 0 4
39343: PUSH
39344: LD_VAR 0 4
39348: PUSH
39349: LD_VAR 0 5
39353: DIFF
39354: ST_TO_ADDR
39355: GO 39314
39357: POP
39358: POP
// end ;
39359: LD_VAR 0 4
39363: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39364: LD_INT 0
39366: PPUSH
39367: PPUSH
39368: PPUSH
// result := true ;
39369: LD_ADDR_VAR 0 3
39373: PUSH
39374: LD_INT 1
39376: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39377: LD_ADDR_VAR 0 5
39381: PUSH
39382: LD_VAR 0 2
39386: PPUSH
39387: CALL_OW 480
39391: ST_TO_ADDR
// if not tmp then
39392: LD_VAR 0 5
39396: NOT
39397: IFFALSE 39401
// exit ;
39399: GO 39450
// for i in tmp do
39401: LD_ADDR_VAR 0 4
39405: PUSH
39406: LD_VAR 0 5
39410: PUSH
39411: FOR_IN
39412: IFFALSE 39448
// if GetTech ( i , side ) <> state_researched then
39414: LD_VAR 0 4
39418: PPUSH
39419: LD_VAR 0 1
39423: PPUSH
39424: CALL_OW 321
39428: PUSH
39429: LD_INT 2
39431: NONEQUAL
39432: IFFALSE 39446
// begin result := false ;
39434: LD_ADDR_VAR 0 3
39438: PUSH
39439: LD_INT 0
39441: ST_TO_ADDR
// exit ;
39442: POP
39443: POP
39444: GO 39450
// end ;
39446: GO 39411
39448: POP
39449: POP
// end ;
39450: LD_VAR 0 3
39454: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39455: LD_INT 0
39457: PPUSH
39458: PPUSH
39459: PPUSH
39460: PPUSH
39461: PPUSH
39462: PPUSH
39463: PPUSH
39464: PPUSH
39465: PPUSH
39466: PPUSH
39467: PPUSH
39468: PPUSH
39469: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39470: LD_VAR 0 1
39474: NOT
39475: PUSH
39476: LD_VAR 0 1
39480: PPUSH
39481: CALL_OW 257
39485: PUSH
39486: LD_INT 9
39488: NONEQUAL
39489: OR
39490: IFFALSE 39494
// exit ;
39492: GO 40067
// side := GetSide ( unit ) ;
39494: LD_ADDR_VAR 0 9
39498: PUSH
39499: LD_VAR 0 1
39503: PPUSH
39504: CALL_OW 255
39508: ST_TO_ADDR
// tech_space := tech_spacanom ;
39509: LD_ADDR_VAR 0 12
39513: PUSH
39514: LD_INT 29
39516: ST_TO_ADDR
// tech_time := tech_taurad ;
39517: LD_ADDR_VAR 0 13
39521: PUSH
39522: LD_INT 28
39524: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39525: LD_ADDR_VAR 0 11
39529: PUSH
39530: LD_VAR 0 1
39534: PPUSH
39535: CALL_OW 310
39539: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39540: LD_VAR 0 11
39544: PPUSH
39545: CALL_OW 247
39549: PUSH
39550: LD_INT 2
39552: EQUAL
39553: IFFALSE 39557
// exit ;
39555: GO 40067
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39557: LD_ADDR_VAR 0 8
39561: PUSH
39562: LD_INT 81
39564: PUSH
39565: LD_VAR 0 9
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 3
39576: PUSH
39577: LD_INT 21
39579: PUSH
39580: LD_INT 3
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PPUSH
39595: CALL_OW 69
39599: ST_TO_ADDR
// if not tmp then
39600: LD_VAR 0 8
39604: NOT
39605: IFFALSE 39609
// exit ;
39607: GO 40067
// if in_unit then
39609: LD_VAR 0 11
39613: IFFALSE 39637
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39615: LD_ADDR_VAR 0 10
39619: PUSH
39620: LD_VAR 0 8
39624: PPUSH
39625: LD_VAR 0 11
39629: PPUSH
39630: CALL_OW 74
39634: ST_TO_ADDR
39635: GO 39657
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39637: LD_ADDR_VAR 0 10
39641: PUSH
39642: LD_VAR 0 8
39646: PPUSH
39647: LD_VAR 0 1
39651: PPUSH
39652: CALL_OW 74
39656: ST_TO_ADDR
// if not enemy then
39657: LD_VAR 0 10
39661: NOT
39662: IFFALSE 39666
// exit ;
39664: GO 40067
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39666: LD_VAR 0 11
39670: PUSH
39671: LD_VAR 0 11
39675: PPUSH
39676: LD_VAR 0 10
39680: PPUSH
39681: CALL_OW 296
39685: PUSH
39686: LD_INT 13
39688: GREATER
39689: AND
39690: PUSH
39691: LD_VAR 0 1
39695: PPUSH
39696: LD_VAR 0 10
39700: PPUSH
39701: CALL_OW 296
39705: PUSH
39706: LD_INT 12
39708: GREATER
39709: OR
39710: IFFALSE 39714
// exit ;
39712: GO 40067
// missile := [ 1 ] ;
39714: LD_ADDR_VAR 0 14
39718: PUSH
39719: LD_INT 1
39721: PUSH
39722: EMPTY
39723: LIST
39724: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39725: LD_VAR 0 9
39729: PPUSH
39730: LD_VAR 0 12
39734: PPUSH
39735: CALL_OW 325
39739: IFFALSE 39768
// missile := Replace ( missile , missile + 1 , 2 ) ;
39741: LD_ADDR_VAR 0 14
39745: PUSH
39746: LD_VAR 0 14
39750: PPUSH
39751: LD_VAR 0 14
39755: PUSH
39756: LD_INT 1
39758: PLUS
39759: PPUSH
39760: LD_INT 2
39762: PPUSH
39763: CALL_OW 1
39767: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39768: LD_VAR 0 9
39772: PPUSH
39773: LD_VAR 0 13
39777: PPUSH
39778: CALL_OW 325
39782: PUSH
39783: LD_VAR 0 10
39787: PPUSH
39788: CALL_OW 255
39792: PPUSH
39793: LD_VAR 0 13
39797: PPUSH
39798: CALL_OW 325
39802: NOT
39803: AND
39804: IFFALSE 39833
// missile := Replace ( missile , missile + 1 , 3 ) ;
39806: LD_ADDR_VAR 0 14
39810: PUSH
39811: LD_VAR 0 14
39815: PPUSH
39816: LD_VAR 0 14
39820: PUSH
39821: LD_INT 1
39823: PLUS
39824: PPUSH
39825: LD_INT 3
39827: PPUSH
39828: CALL_OW 1
39832: ST_TO_ADDR
// if missile < 2 then
39833: LD_VAR 0 14
39837: PUSH
39838: LD_INT 2
39840: LESS
39841: IFFALSE 39845
// exit ;
39843: GO 40067
// x := GetX ( enemy ) ;
39845: LD_ADDR_VAR 0 4
39849: PUSH
39850: LD_VAR 0 10
39854: PPUSH
39855: CALL_OW 250
39859: ST_TO_ADDR
// y := GetY ( enemy ) ;
39860: LD_ADDR_VAR 0 5
39864: PUSH
39865: LD_VAR 0 10
39869: PPUSH
39870: CALL_OW 251
39874: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39875: LD_ADDR_VAR 0 6
39879: PUSH
39880: LD_VAR 0 4
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PPUSH
39889: LD_INT 1
39891: PPUSH
39892: CALL_OW 12
39896: PLUS
39897: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39898: LD_ADDR_VAR 0 7
39902: PUSH
39903: LD_VAR 0 5
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PPUSH
39912: LD_INT 1
39914: PPUSH
39915: CALL_OW 12
39919: PLUS
39920: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39921: LD_VAR 0 6
39925: PPUSH
39926: LD_VAR 0 7
39930: PPUSH
39931: CALL_OW 488
39935: NOT
39936: IFFALSE 39958
// begin _x := x ;
39938: LD_ADDR_VAR 0 6
39942: PUSH
39943: LD_VAR 0 4
39947: ST_TO_ADDR
// _y := y ;
39948: LD_ADDR_VAR 0 7
39952: PUSH
39953: LD_VAR 0 5
39957: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39958: LD_ADDR_VAR 0 3
39962: PUSH
39963: LD_INT 1
39965: PPUSH
39966: LD_VAR 0 14
39970: PPUSH
39971: CALL_OW 12
39975: ST_TO_ADDR
// case i of 1 :
39976: LD_VAR 0 3
39980: PUSH
39981: LD_INT 1
39983: DOUBLE
39984: EQUAL
39985: IFTRUE 39989
39987: GO 40006
39989: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39990: LD_VAR 0 1
39994: PPUSH
39995: LD_VAR 0 10
39999: PPUSH
40000: CALL_OW 115
40004: GO 40067
40006: LD_INT 2
40008: DOUBLE
40009: EQUAL
40010: IFTRUE 40014
40012: GO 40036
40014: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40015: LD_VAR 0 1
40019: PPUSH
40020: LD_VAR 0 6
40024: PPUSH
40025: LD_VAR 0 7
40029: PPUSH
40030: CALL_OW 153
40034: GO 40067
40036: LD_INT 3
40038: DOUBLE
40039: EQUAL
40040: IFTRUE 40044
40042: GO 40066
40044: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40045: LD_VAR 0 1
40049: PPUSH
40050: LD_VAR 0 6
40054: PPUSH
40055: LD_VAR 0 7
40059: PPUSH
40060: CALL_OW 154
40064: GO 40067
40066: POP
// end ;
40067: LD_VAR 0 2
40071: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40072: LD_INT 0
40074: PPUSH
40075: PPUSH
40076: PPUSH
40077: PPUSH
40078: PPUSH
40079: PPUSH
// if not unit or not building then
40080: LD_VAR 0 1
40084: NOT
40085: PUSH
40086: LD_VAR 0 2
40090: NOT
40091: OR
40092: IFFALSE 40096
// exit ;
40094: GO 40254
// x := GetX ( building ) ;
40096: LD_ADDR_VAR 0 5
40100: PUSH
40101: LD_VAR 0 2
40105: PPUSH
40106: CALL_OW 250
40110: ST_TO_ADDR
// y := GetY ( building ) ;
40111: LD_ADDR_VAR 0 6
40115: PUSH
40116: LD_VAR 0 2
40120: PPUSH
40121: CALL_OW 251
40125: ST_TO_ADDR
// for i = 0 to 5 do
40126: LD_ADDR_VAR 0 4
40130: PUSH
40131: DOUBLE
40132: LD_INT 0
40134: DEC
40135: ST_TO_ADDR
40136: LD_INT 5
40138: PUSH
40139: FOR_TO
40140: IFFALSE 40252
// begin _x := ShiftX ( x , i , 3 ) ;
40142: LD_ADDR_VAR 0 7
40146: PUSH
40147: LD_VAR 0 5
40151: PPUSH
40152: LD_VAR 0 4
40156: PPUSH
40157: LD_INT 3
40159: PPUSH
40160: CALL_OW 272
40164: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40165: LD_ADDR_VAR 0 8
40169: PUSH
40170: LD_VAR 0 6
40174: PPUSH
40175: LD_VAR 0 4
40179: PPUSH
40180: LD_INT 3
40182: PPUSH
40183: CALL_OW 273
40187: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40188: LD_VAR 0 7
40192: PPUSH
40193: LD_VAR 0 8
40197: PPUSH
40198: CALL_OW 488
40202: NOT
40203: IFFALSE 40207
// continue ;
40205: GO 40139
// if HexInfo ( _x , _y ) = 0 then
40207: LD_VAR 0 7
40211: PPUSH
40212: LD_VAR 0 8
40216: PPUSH
40217: CALL_OW 428
40221: PUSH
40222: LD_INT 0
40224: EQUAL
40225: IFFALSE 40250
// begin ComMoveXY ( unit , _x , _y ) ;
40227: LD_VAR 0 1
40231: PPUSH
40232: LD_VAR 0 7
40236: PPUSH
40237: LD_VAR 0 8
40241: PPUSH
40242: CALL_OW 111
// exit ;
40246: POP
40247: POP
40248: GO 40254
// end ; end ;
40250: GO 40139
40252: POP
40253: POP
// end ;
40254: LD_VAR 0 3
40258: RET
// export function ScanBase ( side , base_area ) ; begin
40259: LD_INT 0
40261: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40262: LD_ADDR_VAR 0 3
40266: PUSH
40267: LD_VAR 0 2
40271: PPUSH
40272: LD_INT 81
40274: PUSH
40275: LD_VAR 0 1
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PPUSH
40284: CALL_OW 70
40288: ST_TO_ADDR
// end ;
40289: LD_VAR 0 3
40293: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40294: LD_INT 0
40296: PPUSH
40297: PPUSH
40298: PPUSH
40299: PPUSH
// result := false ;
40300: LD_ADDR_VAR 0 2
40304: PUSH
40305: LD_INT 0
40307: ST_TO_ADDR
// side := GetSide ( unit ) ;
40308: LD_ADDR_VAR 0 3
40312: PUSH
40313: LD_VAR 0 1
40317: PPUSH
40318: CALL_OW 255
40322: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40323: LD_ADDR_VAR 0 4
40327: PUSH
40328: LD_VAR 0 1
40332: PPUSH
40333: CALL_OW 248
40337: ST_TO_ADDR
// case nat of 1 :
40338: LD_VAR 0 4
40342: PUSH
40343: LD_INT 1
40345: DOUBLE
40346: EQUAL
40347: IFTRUE 40351
40349: GO 40362
40351: POP
// tech := tech_lassight ; 2 :
40352: LD_ADDR_VAR 0 5
40356: PUSH
40357: LD_INT 12
40359: ST_TO_ADDR
40360: GO 40401
40362: LD_INT 2
40364: DOUBLE
40365: EQUAL
40366: IFTRUE 40370
40368: GO 40381
40370: POP
// tech := tech_mortar ; 3 :
40371: LD_ADDR_VAR 0 5
40375: PUSH
40376: LD_INT 41
40378: ST_TO_ADDR
40379: GO 40401
40381: LD_INT 3
40383: DOUBLE
40384: EQUAL
40385: IFTRUE 40389
40387: GO 40400
40389: POP
// tech := tech_bazooka ; end ;
40390: LD_ADDR_VAR 0 5
40394: PUSH
40395: LD_INT 44
40397: ST_TO_ADDR
40398: GO 40401
40400: POP
// if Researched ( side , tech ) then
40401: LD_VAR 0 3
40405: PPUSH
40406: LD_VAR 0 5
40410: PPUSH
40411: CALL_OW 325
40415: IFFALSE 40442
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40417: LD_ADDR_VAR 0 2
40421: PUSH
40422: LD_INT 5
40424: PUSH
40425: LD_INT 8
40427: PUSH
40428: LD_INT 9
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: LIST
40435: PUSH
40436: LD_VAR 0 4
40440: ARRAY
40441: ST_TO_ADDR
// end ;
40442: LD_VAR 0 2
40446: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40447: LD_INT 0
40449: PPUSH
40450: PPUSH
40451: PPUSH
// if not mines then
40452: LD_VAR 0 2
40456: NOT
40457: IFFALSE 40461
// exit ;
40459: GO 40605
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40461: LD_ADDR_VAR 0 5
40465: PUSH
40466: LD_INT 81
40468: PUSH
40469: LD_VAR 0 1
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 3
40480: PUSH
40481: LD_INT 21
40483: PUSH
40484: LD_INT 3
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PPUSH
40499: CALL_OW 69
40503: ST_TO_ADDR
// for i in mines do
40504: LD_ADDR_VAR 0 4
40508: PUSH
40509: LD_VAR 0 2
40513: PUSH
40514: FOR_IN
40515: IFFALSE 40603
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40517: LD_VAR 0 4
40521: PUSH
40522: LD_INT 1
40524: ARRAY
40525: PPUSH
40526: LD_VAR 0 4
40530: PUSH
40531: LD_INT 2
40533: ARRAY
40534: PPUSH
40535: CALL_OW 458
40539: NOT
40540: IFFALSE 40544
// continue ;
40542: GO 40514
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40544: LD_VAR 0 4
40548: PUSH
40549: LD_INT 1
40551: ARRAY
40552: PPUSH
40553: LD_VAR 0 4
40557: PUSH
40558: LD_INT 2
40560: ARRAY
40561: PPUSH
40562: CALL_OW 428
40566: PUSH
40567: LD_VAR 0 5
40571: IN
40572: IFFALSE 40601
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40574: LD_VAR 0 4
40578: PUSH
40579: LD_INT 1
40581: ARRAY
40582: PPUSH
40583: LD_VAR 0 4
40587: PUSH
40588: LD_INT 2
40590: ARRAY
40591: PPUSH
40592: LD_VAR 0 1
40596: PPUSH
40597: CALL_OW 456
// end ;
40601: GO 40514
40603: POP
40604: POP
// end ;
40605: LD_VAR 0 3
40609: RET
// export function Count ( array ) ; var i ; begin
40610: LD_INT 0
40612: PPUSH
40613: PPUSH
// result := 0 ;
40614: LD_ADDR_VAR 0 2
40618: PUSH
40619: LD_INT 0
40621: ST_TO_ADDR
// for i in array do
40622: LD_ADDR_VAR 0 3
40626: PUSH
40627: LD_VAR 0 1
40631: PUSH
40632: FOR_IN
40633: IFFALSE 40657
// if i then
40635: LD_VAR 0 3
40639: IFFALSE 40655
// result := result + 1 ;
40641: LD_ADDR_VAR 0 2
40645: PUSH
40646: LD_VAR 0 2
40650: PUSH
40651: LD_INT 1
40653: PLUS
40654: ST_TO_ADDR
40655: GO 40632
40657: POP
40658: POP
// end ;
40659: LD_VAR 0 2
40663: RET
// export function IsEmpty ( building ) ; begin
40664: LD_INT 0
40666: PPUSH
// if not building then
40667: LD_VAR 0 1
40671: NOT
40672: IFFALSE 40676
// exit ;
40674: GO 40719
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40676: LD_ADDR_VAR 0 2
40680: PUSH
40681: LD_VAR 0 1
40685: PUSH
40686: LD_INT 22
40688: PUSH
40689: LD_VAR 0 1
40693: PPUSH
40694: CALL_OW 255
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 58
40705: PUSH
40706: EMPTY
40707: LIST
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PPUSH
40713: CALL_OW 69
40717: IN
40718: ST_TO_ADDR
// end ;
40719: LD_VAR 0 2
40723: RET
// export function IsNotFull ( building ) ; var places ; begin
40724: LD_INT 0
40726: PPUSH
40727: PPUSH
// if not building then
40728: LD_VAR 0 1
40732: NOT
40733: IFFALSE 40737
// exit ;
40735: GO 40908
// result := false ;
40737: LD_ADDR_VAR 0 2
40741: PUSH
40742: LD_INT 0
40744: ST_TO_ADDR
// places := 0 ;
40745: LD_ADDR_VAR 0 3
40749: PUSH
40750: LD_INT 0
40752: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
40753: LD_VAR 0 1
40757: PPUSH
40758: CALL_OW 266
40762: PUSH
40763: LD_INT 0
40765: DOUBLE
40766: EQUAL
40767: IFTRUE 40825
40769: LD_INT 1
40771: DOUBLE
40772: EQUAL
40773: IFTRUE 40825
40775: LD_INT 6
40777: DOUBLE
40778: EQUAL
40779: IFTRUE 40825
40781: LD_INT 7
40783: DOUBLE
40784: EQUAL
40785: IFTRUE 40825
40787: LD_INT 8
40789: DOUBLE
40790: EQUAL
40791: IFTRUE 40825
40793: LD_INT 4
40795: DOUBLE
40796: EQUAL
40797: IFTRUE 40825
40799: LD_INT 5
40801: DOUBLE
40802: EQUAL
40803: IFTRUE 40825
40805: LD_INT 2
40807: DOUBLE
40808: EQUAL
40809: IFTRUE 40825
40811: LD_INT 3
40813: DOUBLE
40814: EQUAL
40815: IFTRUE 40825
40817: LD_INT 35
40819: DOUBLE
40820: EQUAL
40821: IFTRUE 40825
40823: GO 40836
40825: POP
// places := 6 ; b_bunker , b_breastwork :
40826: LD_ADDR_VAR 0 3
40830: PUSH
40831: LD_INT 6
40833: ST_TO_ADDR
40834: GO 40881
40836: LD_INT 32
40838: DOUBLE
40839: EQUAL
40840: IFTRUE 40850
40842: LD_INT 31
40844: DOUBLE
40845: EQUAL
40846: IFTRUE 40850
40848: GO 40861
40850: POP
// places := 1 ; b_control_tower :
40851: LD_ADDR_VAR 0 3
40855: PUSH
40856: LD_INT 1
40858: ST_TO_ADDR
40859: GO 40881
40861: LD_INT 36
40863: DOUBLE
40864: EQUAL
40865: IFTRUE 40869
40867: GO 40880
40869: POP
// places := 3 ; end ;
40870: LD_ADDR_VAR 0 3
40874: PUSH
40875: LD_INT 3
40877: ST_TO_ADDR
40878: GO 40881
40880: POP
// if places then
40881: LD_VAR 0 3
40885: IFFALSE 40908
// result := UnitsInside ( building ) < places ;
40887: LD_ADDR_VAR 0 2
40891: PUSH
40892: LD_VAR 0 1
40896: PPUSH
40897: CALL_OW 313
40901: PUSH
40902: LD_VAR 0 3
40906: LESS
40907: ST_TO_ADDR
// end ;
40908: LD_VAR 0 2
40912: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40913: LD_INT 0
40915: PPUSH
40916: PPUSH
40917: PPUSH
40918: PPUSH
// tmp := [ ] ;
40919: LD_ADDR_VAR 0 3
40923: PUSH
40924: EMPTY
40925: ST_TO_ADDR
// list := [ ] ;
40926: LD_ADDR_VAR 0 5
40930: PUSH
40931: EMPTY
40932: ST_TO_ADDR
// for i = 16 to 25 do
40933: LD_ADDR_VAR 0 4
40937: PUSH
40938: DOUBLE
40939: LD_INT 16
40941: DEC
40942: ST_TO_ADDR
40943: LD_INT 25
40945: PUSH
40946: FOR_TO
40947: IFFALSE 41020
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40949: LD_ADDR_VAR 0 3
40953: PUSH
40954: LD_VAR 0 3
40958: PUSH
40959: LD_INT 22
40961: PUSH
40962: LD_VAR 0 1
40966: PPUSH
40967: CALL_OW 255
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 91
40978: PUSH
40979: LD_VAR 0 1
40983: PUSH
40984: LD_INT 6
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 30
40994: PUSH
40995: LD_VAR 0 4
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: LIST
41008: PUSH
41009: EMPTY
41010: LIST
41011: PPUSH
41012: CALL_OW 69
41016: ADD
41017: ST_TO_ADDR
41018: GO 40946
41020: POP
41021: POP
// for i = 1 to tmp do
41022: LD_ADDR_VAR 0 4
41026: PUSH
41027: DOUBLE
41028: LD_INT 1
41030: DEC
41031: ST_TO_ADDR
41032: LD_VAR 0 3
41036: PUSH
41037: FOR_TO
41038: IFFALSE 41126
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41040: LD_ADDR_VAR 0 5
41044: PUSH
41045: LD_VAR 0 5
41049: PUSH
41050: LD_VAR 0 3
41054: PUSH
41055: LD_VAR 0 4
41059: ARRAY
41060: PPUSH
41061: CALL_OW 266
41065: PUSH
41066: LD_VAR 0 3
41070: PUSH
41071: LD_VAR 0 4
41075: ARRAY
41076: PPUSH
41077: CALL_OW 250
41081: PUSH
41082: LD_VAR 0 3
41086: PUSH
41087: LD_VAR 0 4
41091: ARRAY
41092: PPUSH
41093: CALL_OW 251
41097: PUSH
41098: LD_VAR 0 3
41102: PUSH
41103: LD_VAR 0 4
41107: ARRAY
41108: PPUSH
41109: CALL_OW 254
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: PUSH
41120: EMPTY
41121: LIST
41122: ADD
41123: ST_TO_ADDR
41124: GO 41037
41126: POP
41127: POP
// result := list ;
41128: LD_ADDR_VAR 0 2
41132: PUSH
41133: LD_VAR 0 5
41137: ST_TO_ADDR
// end ;
41138: LD_VAR 0 2
41142: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41143: LD_INT 0
41145: PPUSH
41146: PPUSH
41147: PPUSH
41148: PPUSH
41149: PPUSH
41150: PPUSH
41151: PPUSH
// if not factory then
41152: LD_VAR 0 1
41156: NOT
41157: IFFALSE 41161
// exit ;
41159: GO 41754
// if control = control_apeman then
41161: LD_VAR 0 4
41165: PUSH
41166: LD_INT 5
41168: EQUAL
41169: IFFALSE 41278
// begin tmp := UnitsInside ( factory ) ;
41171: LD_ADDR_VAR 0 8
41175: PUSH
41176: LD_VAR 0 1
41180: PPUSH
41181: CALL_OW 313
41185: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41186: LD_VAR 0 8
41190: PPUSH
41191: LD_INT 25
41193: PUSH
41194: LD_INT 12
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PPUSH
41201: CALL_OW 72
41205: NOT
41206: IFFALSE 41216
// control := control_manual ;
41208: LD_ADDR_VAR 0 4
41212: PUSH
41213: LD_INT 1
41215: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41216: LD_ADDR_VAR 0 8
41220: PUSH
41221: LD_VAR 0 1
41225: PPUSH
41226: CALL 40913 0 1
41230: ST_TO_ADDR
// if tmp then
41231: LD_VAR 0 8
41235: IFFALSE 41278
// begin for i in tmp do
41237: LD_ADDR_VAR 0 7
41241: PUSH
41242: LD_VAR 0 8
41246: PUSH
41247: FOR_IN
41248: IFFALSE 41276
// if i [ 1 ] = b_ext_radio then
41250: LD_VAR 0 7
41254: PUSH
41255: LD_INT 1
41257: ARRAY
41258: PUSH
41259: LD_INT 22
41261: EQUAL
41262: IFFALSE 41274
// begin control := control_remote ;
41264: LD_ADDR_VAR 0 4
41268: PUSH
41269: LD_INT 2
41271: ST_TO_ADDR
// break ;
41272: GO 41276
// end ;
41274: GO 41247
41276: POP
41277: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41278: LD_VAR 0 1
41282: PPUSH
41283: LD_VAR 0 2
41287: PPUSH
41288: LD_VAR 0 3
41292: PPUSH
41293: LD_VAR 0 4
41297: PPUSH
41298: LD_VAR 0 5
41302: PPUSH
41303: CALL_OW 448
41307: IFFALSE 41342
// begin result := [ chassis , engine , control , weapon ] ;
41309: LD_ADDR_VAR 0 6
41313: PUSH
41314: LD_VAR 0 2
41318: PUSH
41319: LD_VAR 0 3
41323: PUSH
41324: LD_VAR 0 4
41328: PUSH
41329: LD_VAR 0 5
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: ST_TO_ADDR
// exit ;
41340: GO 41754
// end ; _chassis := AvailableChassisList ( factory ) ;
41342: LD_ADDR_VAR 0 9
41346: PUSH
41347: LD_VAR 0 1
41351: PPUSH
41352: CALL_OW 475
41356: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41357: LD_ADDR_VAR 0 11
41361: PUSH
41362: LD_VAR 0 1
41366: PPUSH
41367: CALL_OW 476
41371: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41372: LD_ADDR_VAR 0 12
41376: PUSH
41377: LD_VAR 0 1
41381: PPUSH
41382: CALL_OW 477
41386: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41387: LD_ADDR_VAR 0 10
41391: PUSH
41392: LD_VAR 0 1
41396: PPUSH
41397: CALL_OW 478
41401: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41402: LD_VAR 0 9
41406: NOT
41407: PUSH
41408: LD_VAR 0 11
41412: NOT
41413: OR
41414: PUSH
41415: LD_VAR 0 12
41419: NOT
41420: OR
41421: PUSH
41422: LD_VAR 0 10
41426: NOT
41427: OR
41428: IFFALSE 41463
// begin result := [ chassis , engine , control , weapon ] ;
41430: LD_ADDR_VAR 0 6
41434: PUSH
41435: LD_VAR 0 2
41439: PUSH
41440: LD_VAR 0 3
41444: PUSH
41445: LD_VAR 0 4
41449: PUSH
41450: LD_VAR 0 5
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: ST_TO_ADDR
// exit ;
41461: GO 41754
// end ; if not chassis in _chassis then
41463: LD_VAR 0 2
41467: PUSH
41468: LD_VAR 0 9
41472: IN
41473: NOT
41474: IFFALSE 41500
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41476: LD_ADDR_VAR 0 2
41480: PUSH
41481: LD_VAR 0 9
41485: PUSH
41486: LD_INT 1
41488: PPUSH
41489: LD_VAR 0 9
41493: PPUSH
41494: CALL_OW 12
41498: ARRAY
41499: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41500: LD_VAR 0 2
41504: PPUSH
41505: LD_VAR 0 3
41509: PPUSH
41510: CALL 41759 0 2
41514: NOT
41515: IFFALSE 41574
// repeat engine := _engine [ 1 ] ;
41517: LD_ADDR_VAR 0 3
41521: PUSH
41522: LD_VAR 0 11
41526: PUSH
41527: LD_INT 1
41529: ARRAY
41530: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41531: LD_ADDR_VAR 0 11
41535: PUSH
41536: LD_VAR 0 11
41540: PPUSH
41541: LD_INT 1
41543: PPUSH
41544: CALL_OW 3
41548: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41549: LD_VAR 0 2
41553: PPUSH
41554: LD_VAR 0 3
41558: PPUSH
41559: CALL 41759 0 2
41563: PUSH
41564: LD_VAR 0 11
41568: PUSH
41569: EMPTY
41570: EQUAL
41571: OR
41572: IFFALSE 41517
// if not control in _control then
41574: LD_VAR 0 4
41578: PUSH
41579: LD_VAR 0 12
41583: IN
41584: NOT
41585: IFFALSE 41611
// control := _control [ rand ( 1 , _control ) ] ;
41587: LD_ADDR_VAR 0 4
41591: PUSH
41592: LD_VAR 0 12
41596: PUSH
41597: LD_INT 1
41599: PPUSH
41600: LD_VAR 0 12
41604: PPUSH
41605: CALL_OW 12
41609: ARRAY
41610: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41611: LD_VAR 0 2
41615: PPUSH
41616: LD_VAR 0 5
41620: PPUSH
41621: CALL 41979 0 2
41625: NOT
41626: IFFALSE 41685
// repeat weapon := _weapon [ 1 ] ;
41628: LD_ADDR_VAR 0 5
41632: PUSH
41633: LD_VAR 0 10
41637: PUSH
41638: LD_INT 1
41640: ARRAY
41641: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41642: LD_ADDR_VAR 0 10
41646: PUSH
41647: LD_VAR 0 10
41651: PPUSH
41652: LD_INT 1
41654: PPUSH
41655: CALL_OW 3
41659: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41660: LD_VAR 0 2
41664: PPUSH
41665: LD_VAR 0 5
41669: PPUSH
41670: CALL 41979 0 2
41674: PUSH
41675: LD_VAR 0 10
41679: PUSH
41680: EMPTY
41681: EQUAL
41682: OR
41683: IFFALSE 41628
// result := [ ] ;
41685: LD_ADDR_VAR 0 6
41689: PUSH
41690: EMPTY
41691: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41692: LD_VAR 0 1
41696: PPUSH
41697: LD_VAR 0 2
41701: PPUSH
41702: LD_VAR 0 3
41706: PPUSH
41707: LD_VAR 0 4
41711: PPUSH
41712: LD_VAR 0 5
41716: PPUSH
41717: CALL_OW 448
41721: IFFALSE 41754
// result := [ chassis , engine , control , weapon ] ;
41723: LD_ADDR_VAR 0 6
41727: PUSH
41728: LD_VAR 0 2
41732: PUSH
41733: LD_VAR 0 3
41737: PUSH
41738: LD_VAR 0 4
41742: PUSH
41743: LD_VAR 0 5
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: ST_TO_ADDR
// end ;
41754: LD_VAR 0 6
41758: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41759: LD_INT 0
41761: PPUSH
// if not chassis or not engine then
41762: LD_VAR 0 1
41766: NOT
41767: PUSH
41768: LD_VAR 0 2
41772: NOT
41773: OR
41774: IFFALSE 41778
// exit ;
41776: GO 41974
// case engine of engine_solar :
41778: LD_VAR 0 2
41782: PUSH
41783: LD_INT 2
41785: DOUBLE
41786: EQUAL
41787: IFTRUE 41791
41789: GO 41829
41791: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41792: LD_ADDR_VAR 0 3
41796: PUSH
41797: LD_INT 11
41799: PUSH
41800: LD_INT 12
41802: PUSH
41803: LD_INT 13
41805: PUSH
41806: LD_INT 14
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: LD_INT 2
41814: PUSH
41815: LD_INT 3
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: ST_TO_ADDR
41827: GO 41958
41829: LD_INT 1
41831: DOUBLE
41832: EQUAL
41833: IFTRUE 41837
41835: GO 41899
41837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41838: LD_ADDR_VAR 0 3
41842: PUSH
41843: LD_INT 11
41845: PUSH
41846: LD_INT 12
41848: PUSH
41849: LD_INT 13
41851: PUSH
41852: LD_INT 14
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: LD_INT 2
41860: PUSH
41861: LD_INT 3
41863: PUSH
41864: LD_INT 4
41866: PUSH
41867: LD_INT 5
41869: PUSH
41870: LD_INT 21
41872: PUSH
41873: LD_INT 23
41875: PUSH
41876: LD_INT 22
41878: PUSH
41879: LD_INT 24
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: ST_TO_ADDR
41897: GO 41958
41899: LD_INT 3
41901: DOUBLE
41902: EQUAL
41903: IFTRUE 41907
41905: GO 41957
41907: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41908: LD_ADDR_VAR 0 3
41912: PUSH
41913: LD_INT 13
41915: PUSH
41916: LD_INT 14
41918: PUSH
41919: LD_INT 2
41921: PUSH
41922: LD_INT 3
41924: PUSH
41925: LD_INT 4
41927: PUSH
41928: LD_INT 5
41930: PUSH
41931: LD_INT 21
41933: PUSH
41934: LD_INT 22
41936: PUSH
41937: LD_INT 23
41939: PUSH
41940: LD_INT 24
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: ST_TO_ADDR
41955: GO 41958
41957: POP
// result := ( chassis in result ) ;
41958: LD_ADDR_VAR 0 3
41962: PUSH
41963: LD_VAR 0 1
41967: PUSH
41968: LD_VAR 0 3
41972: IN
41973: ST_TO_ADDR
// end ;
41974: LD_VAR 0 3
41978: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41979: LD_INT 0
41981: PPUSH
// if not chassis or not weapon then
41982: LD_VAR 0 1
41986: NOT
41987: PUSH
41988: LD_VAR 0 2
41992: NOT
41993: OR
41994: IFFALSE 41998
// exit ;
41996: GO 43060
// case weapon of us_machine_gun :
41998: LD_VAR 0 2
42002: PUSH
42003: LD_INT 2
42005: DOUBLE
42006: EQUAL
42007: IFTRUE 42011
42009: GO 42041
42011: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42012: LD_ADDR_VAR 0 3
42016: PUSH
42017: LD_INT 1
42019: PUSH
42020: LD_INT 2
42022: PUSH
42023: LD_INT 3
42025: PUSH
42026: LD_INT 4
42028: PUSH
42029: LD_INT 5
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: ST_TO_ADDR
42039: GO 43044
42041: LD_INT 3
42043: DOUBLE
42044: EQUAL
42045: IFTRUE 42049
42047: GO 42079
42049: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42050: LD_ADDR_VAR 0 3
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: LD_INT 3
42063: PUSH
42064: LD_INT 4
42066: PUSH
42067: LD_INT 5
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: ST_TO_ADDR
42077: GO 43044
42079: LD_INT 11
42081: DOUBLE
42082: EQUAL
42083: IFTRUE 42087
42085: GO 42117
42087: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42088: LD_ADDR_VAR 0 3
42092: PUSH
42093: LD_INT 1
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: LD_INT 3
42101: PUSH
42102: LD_INT 4
42104: PUSH
42105: LD_INT 5
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: ST_TO_ADDR
42115: GO 43044
42117: LD_INT 4
42119: DOUBLE
42120: EQUAL
42121: IFTRUE 42125
42123: GO 42151
42125: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42126: LD_ADDR_VAR 0 3
42130: PUSH
42131: LD_INT 2
42133: PUSH
42134: LD_INT 3
42136: PUSH
42137: LD_INT 4
42139: PUSH
42140: LD_INT 5
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: ST_TO_ADDR
42149: GO 43044
42151: LD_INT 5
42153: DOUBLE
42154: EQUAL
42155: IFTRUE 42159
42157: GO 42185
42159: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42160: LD_ADDR_VAR 0 3
42164: PUSH
42165: LD_INT 2
42167: PUSH
42168: LD_INT 3
42170: PUSH
42171: LD_INT 4
42173: PUSH
42174: LD_INT 5
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: ST_TO_ADDR
42183: GO 43044
42185: LD_INT 9
42187: DOUBLE
42188: EQUAL
42189: IFTRUE 42193
42191: GO 42219
42193: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42194: LD_ADDR_VAR 0 3
42198: PUSH
42199: LD_INT 2
42201: PUSH
42202: LD_INT 3
42204: PUSH
42205: LD_INT 4
42207: PUSH
42208: LD_INT 5
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: ST_TO_ADDR
42217: GO 43044
42219: LD_INT 7
42221: DOUBLE
42222: EQUAL
42223: IFTRUE 42227
42225: GO 42253
42227: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42228: LD_ADDR_VAR 0 3
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: LD_INT 3
42238: PUSH
42239: LD_INT 4
42241: PUSH
42242: LD_INT 5
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: ST_TO_ADDR
42251: GO 43044
42253: LD_INT 12
42255: DOUBLE
42256: EQUAL
42257: IFTRUE 42261
42259: GO 42287
42261: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42262: LD_ADDR_VAR 0 3
42266: PUSH
42267: LD_INT 2
42269: PUSH
42270: LD_INT 3
42272: PUSH
42273: LD_INT 4
42275: PUSH
42276: LD_INT 5
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: ST_TO_ADDR
42285: GO 43044
42287: LD_INT 13
42289: DOUBLE
42290: EQUAL
42291: IFTRUE 42295
42293: GO 42321
42295: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42296: LD_ADDR_VAR 0 3
42300: PUSH
42301: LD_INT 2
42303: PUSH
42304: LD_INT 3
42306: PUSH
42307: LD_INT 4
42309: PUSH
42310: LD_INT 5
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: ST_TO_ADDR
42319: GO 43044
42321: LD_INT 14
42323: DOUBLE
42324: EQUAL
42325: IFTRUE 42329
42327: GO 42347
42329: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42330: LD_ADDR_VAR 0 3
42334: PUSH
42335: LD_INT 4
42337: PUSH
42338: LD_INT 5
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: ST_TO_ADDR
42345: GO 43044
42347: LD_INT 6
42349: DOUBLE
42350: EQUAL
42351: IFTRUE 42355
42353: GO 42373
42355: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42356: LD_ADDR_VAR 0 3
42360: PUSH
42361: LD_INT 4
42363: PUSH
42364: LD_INT 5
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: ST_TO_ADDR
42371: GO 43044
42373: LD_INT 10
42375: DOUBLE
42376: EQUAL
42377: IFTRUE 42381
42379: GO 42399
42381: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42382: LD_ADDR_VAR 0 3
42386: PUSH
42387: LD_INT 4
42389: PUSH
42390: LD_INT 5
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: ST_TO_ADDR
42397: GO 43044
42399: LD_INT 22
42401: DOUBLE
42402: EQUAL
42403: IFTRUE 42407
42405: GO 42433
42407: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42408: LD_ADDR_VAR 0 3
42412: PUSH
42413: LD_INT 11
42415: PUSH
42416: LD_INT 12
42418: PUSH
42419: LD_INT 13
42421: PUSH
42422: LD_INT 14
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: ST_TO_ADDR
42431: GO 43044
42433: LD_INT 23
42435: DOUBLE
42436: EQUAL
42437: IFTRUE 42441
42439: GO 42467
42441: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42442: LD_ADDR_VAR 0 3
42446: PUSH
42447: LD_INT 11
42449: PUSH
42450: LD_INT 12
42452: PUSH
42453: LD_INT 13
42455: PUSH
42456: LD_INT 14
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: ST_TO_ADDR
42465: GO 43044
42467: LD_INT 24
42469: DOUBLE
42470: EQUAL
42471: IFTRUE 42475
42473: GO 42501
42475: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42476: LD_ADDR_VAR 0 3
42480: PUSH
42481: LD_INT 11
42483: PUSH
42484: LD_INT 12
42486: PUSH
42487: LD_INT 13
42489: PUSH
42490: LD_INT 14
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: ST_TO_ADDR
42499: GO 43044
42501: LD_INT 30
42503: DOUBLE
42504: EQUAL
42505: IFTRUE 42509
42507: GO 42535
42509: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42510: LD_ADDR_VAR 0 3
42514: PUSH
42515: LD_INT 11
42517: PUSH
42518: LD_INT 12
42520: PUSH
42521: LD_INT 13
42523: PUSH
42524: LD_INT 14
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: ST_TO_ADDR
42533: GO 43044
42535: LD_INT 25
42537: DOUBLE
42538: EQUAL
42539: IFTRUE 42543
42541: GO 42561
42543: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42544: LD_ADDR_VAR 0 3
42548: PUSH
42549: LD_INT 13
42551: PUSH
42552: LD_INT 14
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: ST_TO_ADDR
42559: GO 43044
42561: LD_INT 27
42563: DOUBLE
42564: EQUAL
42565: IFTRUE 42569
42567: GO 42587
42569: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42570: LD_ADDR_VAR 0 3
42574: PUSH
42575: LD_INT 13
42577: PUSH
42578: LD_INT 14
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: ST_TO_ADDR
42585: GO 43044
42587: LD_EXP 37
42591: DOUBLE
42592: EQUAL
42593: IFTRUE 42597
42595: GO 42623
42597: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42598: LD_ADDR_VAR 0 3
42602: PUSH
42603: LD_INT 11
42605: PUSH
42606: LD_INT 12
42608: PUSH
42609: LD_INT 13
42611: PUSH
42612: LD_INT 14
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: ST_TO_ADDR
42621: GO 43044
42623: LD_INT 28
42625: DOUBLE
42626: EQUAL
42627: IFTRUE 42631
42629: GO 42649
42631: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42632: LD_ADDR_VAR 0 3
42636: PUSH
42637: LD_INT 13
42639: PUSH
42640: LD_INT 14
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: ST_TO_ADDR
42647: GO 43044
42649: LD_INT 29
42651: DOUBLE
42652: EQUAL
42653: IFTRUE 42657
42655: GO 42675
42657: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42658: LD_ADDR_VAR 0 3
42662: PUSH
42663: LD_INT 13
42665: PUSH
42666: LD_INT 14
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: ST_TO_ADDR
42673: GO 43044
42675: LD_INT 31
42677: DOUBLE
42678: EQUAL
42679: IFTRUE 42683
42681: GO 42701
42683: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42684: LD_ADDR_VAR 0 3
42688: PUSH
42689: LD_INT 13
42691: PUSH
42692: LD_INT 14
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: ST_TO_ADDR
42699: GO 43044
42701: LD_INT 26
42703: DOUBLE
42704: EQUAL
42705: IFTRUE 42709
42707: GO 42727
42709: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42710: LD_ADDR_VAR 0 3
42714: PUSH
42715: LD_INT 13
42717: PUSH
42718: LD_INT 14
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: ST_TO_ADDR
42725: GO 43044
42727: LD_INT 42
42729: DOUBLE
42730: EQUAL
42731: IFTRUE 42735
42733: GO 42761
42735: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42736: LD_ADDR_VAR 0 3
42740: PUSH
42741: LD_INT 21
42743: PUSH
42744: LD_INT 22
42746: PUSH
42747: LD_INT 23
42749: PUSH
42750: LD_INT 24
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: ST_TO_ADDR
42759: GO 43044
42761: LD_INT 43
42763: DOUBLE
42764: EQUAL
42765: IFTRUE 42769
42767: GO 42795
42769: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42770: LD_ADDR_VAR 0 3
42774: PUSH
42775: LD_INT 21
42777: PUSH
42778: LD_INT 22
42780: PUSH
42781: LD_INT 23
42783: PUSH
42784: LD_INT 24
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: ST_TO_ADDR
42793: GO 43044
42795: LD_INT 44
42797: DOUBLE
42798: EQUAL
42799: IFTRUE 42803
42801: GO 42829
42803: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42804: LD_ADDR_VAR 0 3
42808: PUSH
42809: LD_INT 21
42811: PUSH
42812: LD_INT 22
42814: PUSH
42815: LD_INT 23
42817: PUSH
42818: LD_INT 24
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: ST_TO_ADDR
42827: GO 43044
42829: LD_INT 45
42831: DOUBLE
42832: EQUAL
42833: IFTRUE 42837
42835: GO 42863
42837: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42838: LD_ADDR_VAR 0 3
42842: PUSH
42843: LD_INT 21
42845: PUSH
42846: LD_INT 22
42848: PUSH
42849: LD_INT 23
42851: PUSH
42852: LD_INT 24
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: ST_TO_ADDR
42861: GO 43044
42863: LD_INT 49
42865: DOUBLE
42866: EQUAL
42867: IFTRUE 42871
42869: GO 42897
42871: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42872: LD_ADDR_VAR 0 3
42876: PUSH
42877: LD_INT 21
42879: PUSH
42880: LD_INT 22
42882: PUSH
42883: LD_INT 23
42885: PUSH
42886: LD_INT 24
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: ST_TO_ADDR
42895: GO 43044
42897: LD_INT 51
42899: DOUBLE
42900: EQUAL
42901: IFTRUE 42905
42903: GO 42931
42905: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42906: LD_ADDR_VAR 0 3
42910: PUSH
42911: LD_INT 21
42913: PUSH
42914: LD_INT 22
42916: PUSH
42917: LD_INT 23
42919: PUSH
42920: LD_INT 24
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: ST_TO_ADDR
42929: GO 43044
42931: LD_INT 52
42933: DOUBLE
42934: EQUAL
42935: IFTRUE 42939
42937: GO 42965
42939: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42940: LD_ADDR_VAR 0 3
42944: PUSH
42945: LD_INT 21
42947: PUSH
42948: LD_INT 22
42950: PUSH
42951: LD_INT 23
42953: PUSH
42954: LD_INT 24
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: ST_TO_ADDR
42963: GO 43044
42965: LD_INT 53
42967: DOUBLE
42968: EQUAL
42969: IFTRUE 42973
42971: GO 42991
42973: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42974: LD_ADDR_VAR 0 3
42978: PUSH
42979: LD_INT 23
42981: PUSH
42982: LD_INT 24
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: ST_TO_ADDR
42989: GO 43044
42991: LD_INT 46
42993: DOUBLE
42994: EQUAL
42995: IFTRUE 42999
42997: GO 43017
42999: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43000: LD_ADDR_VAR 0 3
43004: PUSH
43005: LD_INT 23
43007: PUSH
43008: LD_INT 24
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: ST_TO_ADDR
43015: GO 43044
43017: LD_INT 47
43019: DOUBLE
43020: EQUAL
43021: IFTRUE 43025
43023: GO 43043
43025: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43026: LD_ADDR_VAR 0 3
43030: PUSH
43031: LD_INT 23
43033: PUSH
43034: LD_INT 24
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: ST_TO_ADDR
43041: GO 43044
43043: POP
// result := ( chassis in result ) ;
43044: LD_ADDR_VAR 0 3
43048: PUSH
43049: LD_VAR 0 1
43053: PUSH
43054: LD_VAR 0 3
43058: IN
43059: ST_TO_ADDR
// end ;
43060: LD_VAR 0 3
43064: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43065: LD_INT 0
43067: PPUSH
43068: PPUSH
43069: PPUSH
43070: PPUSH
43071: PPUSH
43072: PPUSH
43073: PPUSH
// result := array ;
43074: LD_ADDR_VAR 0 5
43078: PUSH
43079: LD_VAR 0 1
43083: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43084: LD_VAR 0 1
43088: NOT
43089: PUSH
43090: LD_VAR 0 2
43094: NOT
43095: OR
43096: PUSH
43097: LD_VAR 0 3
43101: NOT
43102: OR
43103: PUSH
43104: LD_VAR 0 2
43108: PUSH
43109: LD_VAR 0 1
43113: GREATER
43114: OR
43115: PUSH
43116: LD_VAR 0 3
43120: PUSH
43121: LD_VAR 0 1
43125: GREATER
43126: OR
43127: IFFALSE 43131
// exit ;
43129: GO 43427
// if direction then
43131: LD_VAR 0 4
43135: IFFALSE 43199
// begin d := 1 ;
43137: LD_ADDR_VAR 0 9
43141: PUSH
43142: LD_INT 1
43144: ST_TO_ADDR
// if i_from > i_to then
43145: LD_VAR 0 2
43149: PUSH
43150: LD_VAR 0 3
43154: GREATER
43155: IFFALSE 43181
// length := ( array - i_from ) + i_to else
43157: LD_ADDR_VAR 0 11
43161: PUSH
43162: LD_VAR 0 1
43166: PUSH
43167: LD_VAR 0 2
43171: MINUS
43172: PUSH
43173: LD_VAR 0 3
43177: PLUS
43178: ST_TO_ADDR
43179: GO 43197
// length := i_to - i_from ;
43181: LD_ADDR_VAR 0 11
43185: PUSH
43186: LD_VAR 0 3
43190: PUSH
43191: LD_VAR 0 2
43195: MINUS
43196: ST_TO_ADDR
// end else
43197: GO 43260
// begin d := - 1 ;
43199: LD_ADDR_VAR 0 9
43203: PUSH
43204: LD_INT 1
43206: NEG
43207: ST_TO_ADDR
// if i_from > i_to then
43208: LD_VAR 0 2
43212: PUSH
43213: LD_VAR 0 3
43217: GREATER
43218: IFFALSE 43238
// length := i_from - i_to else
43220: LD_ADDR_VAR 0 11
43224: PUSH
43225: LD_VAR 0 2
43229: PUSH
43230: LD_VAR 0 3
43234: MINUS
43235: ST_TO_ADDR
43236: GO 43260
// length := ( array - i_to ) + i_from ;
43238: LD_ADDR_VAR 0 11
43242: PUSH
43243: LD_VAR 0 1
43247: PUSH
43248: LD_VAR 0 3
43252: MINUS
43253: PUSH
43254: LD_VAR 0 2
43258: PLUS
43259: ST_TO_ADDR
// end ; if not length then
43260: LD_VAR 0 11
43264: NOT
43265: IFFALSE 43269
// exit ;
43267: GO 43427
// tmp := array ;
43269: LD_ADDR_VAR 0 10
43273: PUSH
43274: LD_VAR 0 1
43278: ST_TO_ADDR
// for i = 1 to length do
43279: LD_ADDR_VAR 0 6
43283: PUSH
43284: DOUBLE
43285: LD_INT 1
43287: DEC
43288: ST_TO_ADDR
43289: LD_VAR 0 11
43293: PUSH
43294: FOR_TO
43295: IFFALSE 43415
// begin for j = 1 to array do
43297: LD_ADDR_VAR 0 7
43301: PUSH
43302: DOUBLE
43303: LD_INT 1
43305: DEC
43306: ST_TO_ADDR
43307: LD_VAR 0 1
43311: PUSH
43312: FOR_TO
43313: IFFALSE 43401
// begin k := j + d ;
43315: LD_ADDR_VAR 0 8
43319: PUSH
43320: LD_VAR 0 7
43324: PUSH
43325: LD_VAR 0 9
43329: PLUS
43330: ST_TO_ADDR
// if k > array then
43331: LD_VAR 0 8
43335: PUSH
43336: LD_VAR 0 1
43340: GREATER
43341: IFFALSE 43351
// k := 1 ;
43343: LD_ADDR_VAR 0 8
43347: PUSH
43348: LD_INT 1
43350: ST_TO_ADDR
// if not k then
43351: LD_VAR 0 8
43355: NOT
43356: IFFALSE 43368
// k := array ;
43358: LD_ADDR_VAR 0 8
43362: PUSH
43363: LD_VAR 0 1
43367: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43368: LD_ADDR_VAR 0 10
43372: PUSH
43373: LD_VAR 0 10
43377: PPUSH
43378: LD_VAR 0 8
43382: PPUSH
43383: LD_VAR 0 1
43387: PUSH
43388: LD_VAR 0 7
43392: ARRAY
43393: PPUSH
43394: CALL_OW 1
43398: ST_TO_ADDR
// end ;
43399: GO 43312
43401: POP
43402: POP
// array := tmp ;
43403: LD_ADDR_VAR 0 1
43407: PUSH
43408: LD_VAR 0 10
43412: ST_TO_ADDR
// end ;
43413: GO 43294
43415: POP
43416: POP
// result := array ;
43417: LD_ADDR_VAR 0 5
43421: PUSH
43422: LD_VAR 0 1
43426: ST_TO_ADDR
// end ;
43427: LD_VAR 0 5
43431: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43432: LD_INT 0
43434: PPUSH
43435: PPUSH
// result := 0 ;
43436: LD_ADDR_VAR 0 3
43440: PUSH
43441: LD_INT 0
43443: ST_TO_ADDR
// if not array or not value in array then
43444: LD_VAR 0 1
43448: NOT
43449: PUSH
43450: LD_VAR 0 2
43454: PUSH
43455: LD_VAR 0 1
43459: IN
43460: NOT
43461: OR
43462: IFFALSE 43466
// exit ;
43464: GO 43520
// for i = 1 to array do
43466: LD_ADDR_VAR 0 4
43470: PUSH
43471: DOUBLE
43472: LD_INT 1
43474: DEC
43475: ST_TO_ADDR
43476: LD_VAR 0 1
43480: PUSH
43481: FOR_TO
43482: IFFALSE 43518
// if value = array [ i ] then
43484: LD_VAR 0 2
43488: PUSH
43489: LD_VAR 0 1
43493: PUSH
43494: LD_VAR 0 4
43498: ARRAY
43499: EQUAL
43500: IFFALSE 43516
// begin result := i ;
43502: LD_ADDR_VAR 0 3
43506: PUSH
43507: LD_VAR 0 4
43511: ST_TO_ADDR
// exit ;
43512: POP
43513: POP
43514: GO 43520
// end ;
43516: GO 43481
43518: POP
43519: POP
// end ;
43520: LD_VAR 0 3
43524: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43525: LD_INT 0
43527: PPUSH
// vc_chassis := chassis ;
43528: LD_ADDR_OWVAR 37
43532: PUSH
43533: LD_VAR 0 1
43537: ST_TO_ADDR
// vc_engine := engine ;
43538: LD_ADDR_OWVAR 39
43542: PUSH
43543: LD_VAR 0 2
43547: ST_TO_ADDR
// vc_control := control ;
43548: LD_ADDR_OWVAR 38
43552: PUSH
43553: LD_VAR 0 3
43557: ST_TO_ADDR
// vc_weapon := weapon ;
43558: LD_ADDR_OWVAR 40
43562: PUSH
43563: LD_VAR 0 4
43567: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43568: LD_ADDR_OWVAR 41
43572: PUSH
43573: LD_VAR 0 5
43577: ST_TO_ADDR
// end ;
43578: LD_VAR 0 6
43582: RET
// export function WantPlant ( unit ) ; var task ; begin
43583: LD_INT 0
43585: PPUSH
43586: PPUSH
// result := false ;
43587: LD_ADDR_VAR 0 2
43591: PUSH
43592: LD_INT 0
43594: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43595: LD_ADDR_VAR 0 3
43599: PUSH
43600: LD_VAR 0 1
43604: PPUSH
43605: CALL_OW 437
43609: ST_TO_ADDR
// if task then
43610: LD_VAR 0 3
43614: IFFALSE 43642
// if task [ 1 ] [ 1 ] = p then
43616: LD_VAR 0 3
43620: PUSH
43621: LD_INT 1
43623: ARRAY
43624: PUSH
43625: LD_INT 1
43627: ARRAY
43628: PUSH
43629: LD_STRING p
43631: EQUAL
43632: IFFALSE 43642
// result := true ;
43634: LD_ADDR_VAR 0 2
43638: PUSH
43639: LD_INT 1
43641: ST_TO_ADDR
// end ;
43642: LD_VAR 0 2
43646: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43647: LD_INT 0
43649: PPUSH
43650: PPUSH
43651: PPUSH
43652: PPUSH
// if pos < 1 then
43653: LD_VAR 0 2
43657: PUSH
43658: LD_INT 1
43660: LESS
43661: IFFALSE 43665
// exit ;
43663: GO 43968
// if pos = 1 then
43665: LD_VAR 0 2
43669: PUSH
43670: LD_INT 1
43672: EQUAL
43673: IFFALSE 43706
// result := Replace ( arr , pos [ 1 ] , value ) else
43675: LD_ADDR_VAR 0 4
43679: PUSH
43680: LD_VAR 0 1
43684: PPUSH
43685: LD_VAR 0 2
43689: PUSH
43690: LD_INT 1
43692: ARRAY
43693: PPUSH
43694: LD_VAR 0 3
43698: PPUSH
43699: CALL_OW 1
43703: ST_TO_ADDR
43704: GO 43968
// begin tmp := arr ;
43706: LD_ADDR_VAR 0 6
43710: PUSH
43711: LD_VAR 0 1
43715: ST_TO_ADDR
// s_arr := [ tmp ] ;
43716: LD_ADDR_VAR 0 7
43720: PUSH
43721: LD_VAR 0 6
43725: PUSH
43726: EMPTY
43727: LIST
43728: ST_TO_ADDR
// for i = 1 to pos - 1 do
43729: LD_ADDR_VAR 0 5
43733: PUSH
43734: DOUBLE
43735: LD_INT 1
43737: DEC
43738: ST_TO_ADDR
43739: LD_VAR 0 2
43743: PUSH
43744: LD_INT 1
43746: MINUS
43747: PUSH
43748: FOR_TO
43749: IFFALSE 43794
// begin tmp := tmp [ pos [ i ] ] ;
43751: LD_ADDR_VAR 0 6
43755: PUSH
43756: LD_VAR 0 6
43760: PUSH
43761: LD_VAR 0 2
43765: PUSH
43766: LD_VAR 0 5
43770: ARRAY
43771: ARRAY
43772: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43773: LD_ADDR_VAR 0 7
43777: PUSH
43778: LD_VAR 0 7
43782: PUSH
43783: LD_VAR 0 6
43787: PUSH
43788: EMPTY
43789: LIST
43790: ADD
43791: ST_TO_ADDR
// end ;
43792: GO 43748
43794: POP
43795: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43796: LD_ADDR_VAR 0 6
43800: PUSH
43801: LD_VAR 0 6
43805: PPUSH
43806: LD_VAR 0 2
43810: PUSH
43811: LD_VAR 0 2
43815: ARRAY
43816: PPUSH
43817: LD_VAR 0 3
43821: PPUSH
43822: CALL_OW 1
43826: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43827: LD_ADDR_VAR 0 7
43831: PUSH
43832: LD_VAR 0 7
43836: PPUSH
43837: LD_VAR 0 7
43841: PPUSH
43842: LD_VAR 0 6
43846: PPUSH
43847: CALL_OW 1
43851: ST_TO_ADDR
// for i = s_arr downto 2 do
43852: LD_ADDR_VAR 0 5
43856: PUSH
43857: DOUBLE
43858: LD_VAR 0 7
43862: INC
43863: ST_TO_ADDR
43864: LD_INT 2
43866: PUSH
43867: FOR_DOWNTO
43868: IFFALSE 43952
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43870: LD_ADDR_VAR 0 6
43874: PUSH
43875: LD_VAR 0 7
43879: PUSH
43880: LD_VAR 0 5
43884: PUSH
43885: LD_INT 1
43887: MINUS
43888: ARRAY
43889: PPUSH
43890: LD_VAR 0 2
43894: PUSH
43895: LD_VAR 0 5
43899: PUSH
43900: LD_INT 1
43902: MINUS
43903: ARRAY
43904: PPUSH
43905: LD_VAR 0 7
43909: PUSH
43910: LD_VAR 0 5
43914: ARRAY
43915: PPUSH
43916: CALL_OW 1
43920: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43921: LD_ADDR_VAR 0 7
43925: PUSH
43926: LD_VAR 0 7
43930: PPUSH
43931: LD_VAR 0 5
43935: PUSH
43936: LD_INT 1
43938: MINUS
43939: PPUSH
43940: LD_VAR 0 6
43944: PPUSH
43945: CALL_OW 1
43949: ST_TO_ADDR
// end ;
43950: GO 43867
43952: POP
43953: POP
// result := s_arr [ 1 ] ;
43954: LD_ADDR_VAR 0 4
43958: PUSH
43959: LD_VAR 0 7
43963: PUSH
43964: LD_INT 1
43966: ARRAY
43967: ST_TO_ADDR
// end ; end ;
43968: LD_VAR 0 4
43972: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43973: LD_INT 0
43975: PPUSH
43976: PPUSH
// if not list then
43977: LD_VAR 0 1
43981: NOT
43982: IFFALSE 43986
// exit ;
43984: GO 44077
// i := list [ pos1 ] ;
43986: LD_ADDR_VAR 0 5
43990: PUSH
43991: LD_VAR 0 1
43995: PUSH
43996: LD_VAR 0 2
44000: ARRAY
44001: ST_TO_ADDR
// if not i then
44002: LD_VAR 0 5
44006: NOT
44007: IFFALSE 44011
// exit ;
44009: GO 44077
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44011: LD_ADDR_VAR 0 1
44015: PUSH
44016: LD_VAR 0 1
44020: PPUSH
44021: LD_VAR 0 2
44025: PPUSH
44026: LD_VAR 0 1
44030: PUSH
44031: LD_VAR 0 3
44035: ARRAY
44036: PPUSH
44037: CALL_OW 1
44041: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44042: LD_ADDR_VAR 0 1
44046: PUSH
44047: LD_VAR 0 1
44051: PPUSH
44052: LD_VAR 0 3
44056: PPUSH
44057: LD_VAR 0 5
44061: PPUSH
44062: CALL_OW 1
44066: ST_TO_ADDR
// result := list ;
44067: LD_ADDR_VAR 0 4
44071: PUSH
44072: LD_VAR 0 1
44076: ST_TO_ADDR
// end ;
44077: LD_VAR 0 4
44081: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44082: LD_INT 0
44084: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44085: LD_ADDR_VAR 0 5
44089: PUSH
44090: LD_VAR 0 1
44094: PPUSH
44095: CALL_OW 250
44099: PPUSH
44100: LD_VAR 0 1
44104: PPUSH
44105: CALL_OW 251
44109: PPUSH
44110: LD_VAR 0 2
44114: PPUSH
44115: LD_VAR 0 3
44119: PPUSH
44120: LD_VAR 0 4
44124: PPUSH
44125: CALL 44135 0 5
44129: ST_TO_ADDR
// end ;
44130: LD_VAR 0 5
44134: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44135: LD_INT 0
44137: PPUSH
44138: PPUSH
44139: PPUSH
44140: PPUSH
// if not list then
44141: LD_VAR 0 3
44145: NOT
44146: IFFALSE 44150
// exit ;
44148: GO 44538
// result := [ ] ;
44150: LD_ADDR_VAR 0 6
44154: PUSH
44155: EMPTY
44156: ST_TO_ADDR
// for i in list do
44157: LD_ADDR_VAR 0 7
44161: PUSH
44162: LD_VAR 0 3
44166: PUSH
44167: FOR_IN
44168: IFFALSE 44370
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44170: LD_ADDR_VAR 0 9
44174: PUSH
44175: LD_VAR 0 7
44179: PPUSH
44180: LD_VAR 0 1
44184: PPUSH
44185: LD_VAR 0 2
44189: PPUSH
44190: CALL_OW 297
44194: ST_TO_ADDR
// if not result then
44195: LD_VAR 0 6
44199: NOT
44200: IFFALSE 44226
// result := [ [ i , tmp ] ] else
44202: LD_ADDR_VAR 0 6
44206: PUSH
44207: LD_VAR 0 7
44211: PUSH
44212: LD_VAR 0 9
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: EMPTY
44222: LIST
44223: ST_TO_ADDR
44224: GO 44368
// begin if result [ result ] [ 2 ] < tmp then
44226: LD_VAR 0 6
44230: PUSH
44231: LD_VAR 0 6
44235: ARRAY
44236: PUSH
44237: LD_INT 2
44239: ARRAY
44240: PUSH
44241: LD_VAR 0 9
44245: LESS
44246: IFFALSE 44288
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44248: LD_ADDR_VAR 0 6
44252: PUSH
44253: LD_VAR 0 6
44257: PPUSH
44258: LD_VAR 0 6
44262: PUSH
44263: LD_INT 1
44265: PLUS
44266: PPUSH
44267: LD_VAR 0 7
44271: PUSH
44272: LD_VAR 0 9
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PPUSH
44281: CALL_OW 2
44285: ST_TO_ADDR
44286: GO 44368
// for j = 1 to result do
44288: LD_ADDR_VAR 0 8
44292: PUSH
44293: DOUBLE
44294: LD_INT 1
44296: DEC
44297: ST_TO_ADDR
44298: LD_VAR 0 6
44302: PUSH
44303: FOR_TO
44304: IFFALSE 44366
// begin if tmp < result [ j ] [ 2 ] then
44306: LD_VAR 0 9
44310: PUSH
44311: LD_VAR 0 6
44315: PUSH
44316: LD_VAR 0 8
44320: ARRAY
44321: PUSH
44322: LD_INT 2
44324: ARRAY
44325: LESS
44326: IFFALSE 44364
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44328: LD_ADDR_VAR 0 6
44332: PUSH
44333: LD_VAR 0 6
44337: PPUSH
44338: LD_VAR 0 8
44342: PPUSH
44343: LD_VAR 0 7
44347: PUSH
44348: LD_VAR 0 9
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PPUSH
44357: CALL_OW 2
44361: ST_TO_ADDR
// break ;
44362: GO 44366
// end ; end ;
44364: GO 44303
44366: POP
44367: POP
// end ; end ;
44368: GO 44167
44370: POP
44371: POP
// if result and not asc then
44372: LD_VAR 0 6
44376: PUSH
44377: LD_VAR 0 4
44381: NOT
44382: AND
44383: IFFALSE 44458
// begin tmp := result ;
44385: LD_ADDR_VAR 0 9
44389: PUSH
44390: LD_VAR 0 6
44394: ST_TO_ADDR
// for i = tmp downto 1 do
44395: LD_ADDR_VAR 0 7
44399: PUSH
44400: DOUBLE
44401: LD_VAR 0 9
44405: INC
44406: ST_TO_ADDR
44407: LD_INT 1
44409: PUSH
44410: FOR_DOWNTO
44411: IFFALSE 44456
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44413: LD_ADDR_VAR 0 6
44417: PUSH
44418: LD_VAR 0 6
44422: PPUSH
44423: LD_VAR 0 9
44427: PUSH
44428: LD_VAR 0 7
44432: MINUS
44433: PUSH
44434: LD_INT 1
44436: PLUS
44437: PPUSH
44438: LD_VAR 0 9
44442: PUSH
44443: LD_VAR 0 7
44447: ARRAY
44448: PPUSH
44449: CALL_OW 1
44453: ST_TO_ADDR
44454: GO 44410
44456: POP
44457: POP
// end ; tmp := [ ] ;
44458: LD_ADDR_VAR 0 9
44462: PUSH
44463: EMPTY
44464: ST_TO_ADDR
// if mode then
44465: LD_VAR 0 5
44469: IFFALSE 44538
// begin for i = 1 to result do
44471: LD_ADDR_VAR 0 7
44475: PUSH
44476: DOUBLE
44477: LD_INT 1
44479: DEC
44480: ST_TO_ADDR
44481: LD_VAR 0 6
44485: PUSH
44486: FOR_TO
44487: IFFALSE 44526
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44489: LD_ADDR_VAR 0 9
44493: PUSH
44494: LD_VAR 0 9
44498: PPUSH
44499: LD_VAR 0 7
44503: PPUSH
44504: LD_VAR 0 6
44508: PUSH
44509: LD_VAR 0 7
44513: ARRAY
44514: PUSH
44515: LD_INT 1
44517: ARRAY
44518: PPUSH
44519: CALL_OW 1
44523: ST_TO_ADDR
44524: GO 44486
44526: POP
44527: POP
// result := tmp ;
44528: LD_ADDR_VAR 0 6
44532: PUSH
44533: LD_VAR 0 9
44537: ST_TO_ADDR
// end ; end ;
44538: LD_VAR 0 6
44542: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44543: LD_INT 0
44545: PPUSH
44546: PPUSH
44547: PPUSH
44548: PPUSH
44549: PPUSH
44550: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44551: LD_ADDR_VAR 0 5
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: EMPTY
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: ST_TO_ADDR
// if not x or not y then
44573: LD_VAR 0 2
44577: NOT
44578: PUSH
44579: LD_VAR 0 3
44583: NOT
44584: OR
44585: IFFALSE 44589
// exit ;
44587: GO 46241
// if not range then
44589: LD_VAR 0 4
44593: NOT
44594: IFFALSE 44604
// range := 10 ;
44596: LD_ADDR_VAR 0 4
44600: PUSH
44601: LD_INT 10
44603: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44604: LD_ADDR_VAR 0 8
44608: PUSH
44609: LD_INT 81
44611: PUSH
44612: LD_VAR 0 1
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 92
44623: PUSH
44624: LD_VAR 0 2
44628: PUSH
44629: LD_VAR 0 3
44633: PUSH
44634: LD_VAR 0 4
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 3
44647: PUSH
44648: LD_INT 21
44650: PUSH
44651: LD_INT 3
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: LIST
44666: PPUSH
44667: CALL_OW 69
44671: ST_TO_ADDR
// if not tmp then
44672: LD_VAR 0 8
44676: NOT
44677: IFFALSE 44681
// exit ;
44679: GO 46241
// for i in tmp do
44681: LD_ADDR_VAR 0 6
44685: PUSH
44686: LD_VAR 0 8
44690: PUSH
44691: FOR_IN
44692: IFFALSE 46216
// begin points := [ 0 , 0 , 0 ] ;
44694: LD_ADDR_VAR 0 9
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: LIST
44712: ST_TO_ADDR
// bpoints := 1 ;
44713: LD_ADDR_VAR 0 10
44717: PUSH
44718: LD_INT 1
44720: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44721: LD_VAR 0 6
44725: PPUSH
44726: CALL_OW 247
44730: PUSH
44731: LD_INT 1
44733: DOUBLE
44734: EQUAL
44735: IFTRUE 44739
44737: GO 45317
44739: POP
// begin if GetClass ( i ) = 1 then
44740: LD_VAR 0 6
44744: PPUSH
44745: CALL_OW 257
44749: PUSH
44750: LD_INT 1
44752: EQUAL
44753: IFFALSE 44774
// points := [ 10 , 5 , 3 ] ;
44755: LD_ADDR_VAR 0 9
44759: PUSH
44760: LD_INT 10
44762: PUSH
44763: LD_INT 5
44765: PUSH
44766: LD_INT 3
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: LIST
44773: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44774: LD_VAR 0 6
44778: PPUSH
44779: CALL_OW 257
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: LD_INT 3
44789: PUSH
44790: LD_INT 4
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: LIST
44797: IN
44798: IFFALSE 44819
// points := [ 3 , 2 , 1 ] ;
44800: LD_ADDR_VAR 0 9
44804: PUSH
44805: LD_INT 3
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: LIST
44818: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44819: LD_VAR 0 6
44823: PPUSH
44824: CALL_OW 257
44828: PUSH
44829: LD_INT 5
44831: EQUAL
44832: IFFALSE 44853
// points := [ 130 , 5 , 2 ] ;
44834: LD_ADDR_VAR 0 9
44838: PUSH
44839: LD_INT 130
44841: PUSH
44842: LD_INT 5
44844: PUSH
44845: LD_INT 2
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: LIST
44852: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44853: LD_VAR 0 6
44857: PPUSH
44858: CALL_OW 257
44862: PUSH
44863: LD_INT 8
44865: EQUAL
44866: IFFALSE 44887
// points := [ 35 , 35 , 30 ] ;
44868: LD_ADDR_VAR 0 9
44872: PUSH
44873: LD_INT 35
44875: PUSH
44876: LD_INT 35
44878: PUSH
44879: LD_INT 30
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: LIST
44886: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44887: LD_VAR 0 6
44891: PPUSH
44892: CALL_OW 257
44896: PUSH
44897: LD_INT 9
44899: EQUAL
44900: IFFALSE 44921
// points := [ 20 , 55 , 40 ] ;
44902: LD_ADDR_VAR 0 9
44906: PUSH
44907: LD_INT 20
44909: PUSH
44910: LD_INT 55
44912: PUSH
44913: LD_INT 40
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: LIST
44920: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44921: LD_VAR 0 6
44925: PPUSH
44926: CALL_OW 257
44930: PUSH
44931: LD_INT 12
44933: PUSH
44934: LD_INT 16
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: IN
44941: IFFALSE 44962
// points := [ 5 , 3 , 2 ] ;
44943: LD_ADDR_VAR 0 9
44947: PUSH
44948: LD_INT 5
44950: PUSH
44951: LD_INT 3
44953: PUSH
44954: LD_INT 2
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: LIST
44961: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44962: LD_VAR 0 6
44966: PPUSH
44967: CALL_OW 257
44971: PUSH
44972: LD_INT 17
44974: EQUAL
44975: IFFALSE 44996
// points := [ 100 , 50 , 75 ] ;
44977: LD_ADDR_VAR 0 9
44981: PUSH
44982: LD_INT 100
44984: PUSH
44985: LD_INT 50
44987: PUSH
44988: LD_INT 75
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: LIST
44995: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44996: LD_VAR 0 6
45000: PPUSH
45001: CALL_OW 257
45005: PUSH
45006: LD_INT 15
45008: EQUAL
45009: IFFALSE 45030
// points := [ 10 , 5 , 3 ] ;
45011: LD_ADDR_VAR 0 9
45015: PUSH
45016: LD_INT 10
45018: PUSH
45019: LD_INT 5
45021: PUSH
45022: LD_INT 3
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: LIST
45029: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45030: LD_VAR 0 6
45034: PPUSH
45035: CALL_OW 257
45039: PUSH
45040: LD_INT 14
45042: EQUAL
45043: IFFALSE 45064
// points := [ 10 , 0 , 0 ] ;
45045: LD_ADDR_VAR 0 9
45049: PUSH
45050: LD_INT 10
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: LIST
45063: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45064: LD_VAR 0 6
45068: PPUSH
45069: CALL_OW 257
45073: PUSH
45074: LD_INT 11
45076: EQUAL
45077: IFFALSE 45098
// points := [ 30 , 10 , 5 ] ;
45079: LD_ADDR_VAR 0 9
45083: PUSH
45084: LD_INT 30
45086: PUSH
45087: LD_INT 10
45089: PUSH
45090: LD_INT 5
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: LIST
45097: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45098: LD_VAR 0 1
45102: PPUSH
45103: LD_INT 5
45105: PPUSH
45106: CALL_OW 321
45110: PUSH
45111: LD_INT 2
45113: EQUAL
45114: IFFALSE 45131
// bpoints := bpoints * 1.8 ;
45116: LD_ADDR_VAR 0 10
45120: PUSH
45121: LD_VAR 0 10
45125: PUSH
45126: LD_REAL  1.80000000000000E+0000
45129: MUL
45130: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45131: LD_VAR 0 6
45135: PPUSH
45136: CALL_OW 257
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: LD_INT 2
45146: PUSH
45147: LD_INT 3
45149: PUSH
45150: LD_INT 4
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: IN
45159: PUSH
45160: LD_VAR 0 1
45164: PPUSH
45165: LD_INT 51
45167: PPUSH
45168: CALL_OW 321
45172: PUSH
45173: LD_INT 2
45175: EQUAL
45176: AND
45177: IFFALSE 45194
// bpoints := bpoints * 1.2 ;
45179: LD_ADDR_VAR 0 10
45183: PUSH
45184: LD_VAR 0 10
45188: PUSH
45189: LD_REAL  1.20000000000000E+0000
45192: MUL
45193: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45194: LD_VAR 0 6
45198: PPUSH
45199: CALL_OW 257
45203: PUSH
45204: LD_INT 5
45206: PUSH
45207: LD_INT 7
45209: PUSH
45210: LD_INT 9
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: LIST
45217: IN
45218: PUSH
45219: LD_VAR 0 1
45223: PPUSH
45224: LD_INT 52
45226: PPUSH
45227: CALL_OW 321
45231: PUSH
45232: LD_INT 2
45234: EQUAL
45235: AND
45236: IFFALSE 45253
// bpoints := bpoints * 1.5 ;
45238: LD_ADDR_VAR 0 10
45242: PUSH
45243: LD_VAR 0 10
45247: PUSH
45248: LD_REAL  1.50000000000000E+0000
45251: MUL
45252: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45253: LD_VAR 0 1
45257: PPUSH
45258: LD_INT 66
45260: PPUSH
45261: CALL_OW 321
45265: PUSH
45266: LD_INT 2
45268: EQUAL
45269: IFFALSE 45286
// bpoints := bpoints * 1.1 ;
45271: LD_ADDR_VAR 0 10
45275: PUSH
45276: LD_VAR 0 10
45280: PUSH
45281: LD_REAL  1.10000000000000E+0000
45284: MUL
45285: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45286: LD_ADDR_VAR 0 10
45290: PUSH
45291: LD_VAR 0 10
45295: PUSH
45296: LD_VAR 0 6
45300: PPUSH
45301: LD_INT 1
45303: PPUSH
45304: CALL_OW 259
45308: PUSH
45309: LD_REAL  1.15000000000000E+0000
45312: MUL
45313: MUL
45314: ST_TO_ADDR
// end ; unit_vehicle :
45315: GO 46145
45317: LD_INT 2
45319: DOUBLE
45320: EQUAL
45321: IFTRUE 45325
45323: GO 46133
45325: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45326: LD_VAR 0 6
45330: PPUSH
45331: CALL_OW 264
45335: PUSH
45336: LD_INT 2
45338: PUSH
45339: LD_INT 42
45341: PUSH
45342: LD_INT 24
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: LIST
45349: IN
45350: IFFALSE 45371
// points := [ 25 , 5 , 3 ] ;
45352: LD_ADDR_VAR 0 9
45356: PUSH
45357: LD_INT 25
45359: PUSH
45360: LD_INT 5
45362: PUSH
45363: LD_INT 3
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: LIST
45370: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45371: LD_VAR 0 6
45375: PPUSH
45376: CALL_OW 264
45380: PUSH
45381: LD_INT 4
45383: PUSH
45384: LD_INT 43
45386: PUSH
45387: LD_INT 25
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: LIST
45394: IN
45395: IFFALSE 45416
// points := [ 40 , 15 , 5 ] ;
45397: LD_ADDR_VAR 0 9
45401: PUSH
45402: LD_INT 40
45404: PUSH
45405: LD_INT 15
45407: PUSH
45408: LD_INT 5
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: LIST
45415: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45416: LD_VAR 0 6
45420: PPUSH
45421: CALL_OW 264
45425: PUSH
45426: LD_INT 3
45428: PUSH
45429: LD_INT 23
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: IN
45436: IFFALSE 45457
// points := [ 7 , 25 , 8 ] ;
45438: LD_ADDR_VAR 0 9
45442: PUSH
45443: LD_INT 7
45445: PUSH
45446: LD_INT 25
45448: PUSH
45449: LD_INT 8
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: LIST
45456: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45457: LD_VAR 0 6
45461: PPUSH
45462: CALL_OW 264
45466: PUSH
45467: LD_INT 5
45469: PUSH
45470: LD_INT 27
45472: PUSH
45473: LD_INT 44
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: LIST
45480: IN
45481: IFFALSE 45502
// points := [ 14 , 50 , 16 ] ;
45483: LD_ADDR_VAR 0 9
45487: PUSH
45488: LD_INT 14
45490: PUSH
45491: LD_INT 50
45493: PUSH
45494: LD_INT 16
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: LIST
45501: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45502: LD_VAR 0 6
45506: PPUSH
45507: CALL_OW 264
45511: PUSH
45512: LD_INT 6
45514: PUSH
45515: LD_INT 46
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: IN
45522: IFFALSE 45543
// points := [ 32 , 120 , 70 ] ;
45524: LD_ADDR_VAR 0 9
45528: PUSH
45529: LD_INT 32
45531: PUSH
45532: LD_INT 120
45534: PUSH
45535: LD_INT 70
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: LIST
45542: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45543: LD_VAR 0 6
45547: PPUSH
45548: CALL_OW 264
45552: PUSH
45553: LD_INT 7
45555: PUSH
45556: LD_INT 28
45558: PUSH
45559: LD_INT 45
45561: PUSH
45562: LD_EXP 37
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: IN
45573: IFFALSE 45594
// points := [ 35 , 20 , 45 ] ;
45575: LD_ADDR_VAR 0 9
45579: PUSH
45580: LD_INT 35
45582: PUSH
45583: LD_INT 20
45585: PUSH
45586: LD_INT 45
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: LIST
45593: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45594: LD_VAR 0 6
45598: PPUSH
45599: CALL_OW 264
45603: PUSH
45604: LD_INT 47
45606: PUSH
45607: EMPTY
45608: LIST
45609: IN
45610: IFFALSE 45631
// points := [ 67 , 45 , 75 ] ;
45612: LD_ADDR_VAR 0 9
45616: PUSH
45617: LD_INT 67
45619: PUSH
45620: LD_INT 45
45622: PUSH
45623: LD_INT 75
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: LIST
45630: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45631: LD_VAR 0 6
45635: PPUSH
45636: CALL_OW 264
45640: PUSH
45641: LD_INT 26
45643: PUSH
45644: EMPTY
45645: LIST
45646: IN
45647: IFFALSE 45668
// points := [ 120 , 30 , 80 ] ;
45649: LD_ADDR_VAR 0 9
45653: PUSH
45654: LD_INT 120
45656: PUSH
45657: LD_INT 30
45659: PUSH
45660: LD_INT 80
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: LIST
45667: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45668: LD_VAR 0 6
45672: PPUSH
45673: CALL_OW 264
45677: PUSH
45678: LD_INT 22
45680: PUSH
45681: EMPTY
45682: LIST
45683: IN
45684: IFFALSE 45705
// points := [ 40 , 1 , 1 ] ;
45686: LD_ADDR_VAR 0 9
45690: PUSH
45691: LD_INT 40
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: LIST
45704: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45705: LD_VAR 0 6
45709: PPUSH
45710: CALL_OW 264
45714: PUSH
45715: LD_INT 29
45717: PUSH
45718: EMPTY
45719: LIST
45720: IN
45721: IFFALSE 45742
// points := [ 70 , 200 , 400 ] ;
45723: LD_ADDR_VAR 0 9
45727: PUSH
45728: LD_INT 70
45730: PUSH
45731: LD_INT 200
45733: PUSH
45734: LD_INT 400
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: LIST
45741: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45742: LD_VAR 0 6
45746: PPUSH
45747: CALL_OW 264
45751: PUSH
45752: LD_INT 14
45754: PUSH
45755: LD_INT 53
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: IN
45762: IFFALSE 45783
// points := [ 40 , 10 , 20 ] ;
45764: LD_ADDR_VAR 0 9
45768: PUSH
45769: LD_INT 40
45771: PUSH
45772: LD_INT 10
45774: PUSH
45775: LD_INT 20
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: LIST
45782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45783: LD_VAR 0 6
45787: PPUSH
45788: CALL_OW 264
45792: PUSH
45793: LD_INT 9
45795: PUSH
45796: EMPTY
45797: LIST
45798: IN
45799: IFFALSE 45820
// points := [ 5 , 70 , 20 ] ;
45801: LD_ADDR_VAR 0 9
45805: PUSH
45806: LD_INT 5
45808: PUSH
45809: LD_INT 70
45811: PUSH
45812: LD_INT 20
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: LIST
45819: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45820: LD_VAR 0 6
45824: PPUSH
45825: CALL_OW 264
45829: PUSH
45830: LD_INT 10
45832: PUSH
45833: EMPTY
45834: LIST
45835: IN
45836: IFFALSE 45857
// points := [ 35 , 110 , 70 ] ;
45838: LD_ADDR_VAR 0 9
45842: PUSH
45843: LD_INT 35
45845: PUSH
45846: LD_INT 110
45848: PUSH
45849: LD_INT 70
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: LIST
45856: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45857: LD_VAR 0 6
45861: PPUSH
45862: CALL_OW 265
45866: PUSH
45867: LD_INT 25
45869: EQUAL
45870: IFFALSE 45891
// points := [ 80 , 65 , 100 ] ;
45872: LD_ADDR_VAR 0 9
45876: PUSH
45877: LD_INT 80
45879: PUSH
45880: LD_INT 65
45882: PUSH
45883: LD_INT 100
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: LIST
45890: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45891: LD_VAR 0 6
45895: PPUSH
45896: CALL_OW 263
45900: PUSH
45901: LD_INT 1
45903: EQUAL
45904: IFFALSE 45939
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45906: LD_ADDR_VAR 0 10
45910: PUSH
45911: LD_VAR 0 10
45915: PUSH
45916: LD_VAR 0 6
45920: PPUSH
45921: CALL_OW 311
45925: PPUSH
45926: LD_INT 3
45928: PPUSH
45929: CALL_OW 259
45933: PUSH
45934: LD_INT 4
45936: MUL
45937: MUL
45938: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45939: LD_VAR 0 6
45943: PPUSH
45944: CALL_OW 263
45948: PUSH
45949: LD_INT 2
45951: EQUAL
45952: IFFALSE 46003
// begin j := IsControledBy ( i ) ;
45954: LD_ADDR_VAR 0 7
45958: PUSH
45959: LD_VAR 0 6
45963: PPUSH
45964: CALL_OW 312
45968: ST_TO_ADDR
// if j then
45969: LD_VAR 0 7
45973: IFFALSE 46003
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45975: LD_ADDR_VAR 0 10
45979: PUSH
45980: LD_VAR 0 10
45984: PUSH
45985: LD_VAR 0 7
45989: PPUSH
45990: LD_INT 3
45992: PPUSH
45993: CALL_OW 259
45997: PUSH
45998: LD_INT 3
46000: MUL
46001: MUL
46002: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46003: LD_VAR 0 6
46007: PPUSH
46008: CALL_OW 264
46012: PUSH
46013: LD_INT 5
46015: PUSH
46016: LD_INT 6
46018: PUSH
46019: LD_INT 46
46021: PUSH
46022: LD_INT 44
46024: PUSH
46025: LD_INT 47
46027: PUSH
46028: LD_INT 45
46030: PUSH
46031: LD_INT 28
46033: PUSH
46034: LD_INT 7
46036: PUSH
46037: LD_INT 27
46039: PUSH
46040: LD_INT 29
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: IN
46055: PUSH
46056: LD_VAR 0 1
46060: PPUSH
46061: LD_INT 52
46063: PPUSH
46064: CALL_OW 321
46068: PUSH
46069: LD_INT 2
46071: EQUAL
46072: AND
46073: IFFALSE 46090
// bpoints := bpoints * 1.2 ;
46075: LD_ADDR_VAR 0 10
46079: PUSH
46080: LD_VAR 0 10
46084: PUSH
46085: LD_REAL  1.20000000000000E+0000
46088: MUL
46089: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46090: LD_VAR 0 6
46094: PPUSH
46095: CALL_OW 264
46099: PUSH
46100: LD_INT 6
46102: PUSH
46103: LD_INT 46
46105: PUSH
46106: LD_INT 47
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: LIST
46113: IN
46114: IFFALSE 46131
// bpoints := bpoints * 1.2 ;
46116: LD_ADDR_VAR 0 10
46120: PUSH
46121: LD_VAR 0 10
46125: PUSH
46126: LD_REAL  1.20000000000000E+0000
46129: MUL
46130: ST_TO_ADDR
// end ; unit_building :
46131: GO 46145
46133: LD_INT 3
46135: DOUBLE
46136: EQUAL
46137: IFTRUE 46141
46139: GO 46144
46141: POP
// ; end ;
46142: GO 46145
46144: POP
// for j = 1 to 3 do
46145: LD_ADDR_VAR 0 7
46149: PUSH
46150: DOUBLE
46151: LD_INT 1
46153: DEC
46154: ST_TO_ADDR
46155: LD_INT 3
46157: PUSH
46158: FOR_TO
46159: IFFALSE 46212
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46161: LD_ADDR_VAR 0 5
46165: PUSH
46166: LD_VAR 0 5
46170: PPUSH
46171: LD_VAR 0 7
46175: PPUSH
46176: LD_VAR 0 5
46180: PUSH
46181: LD_VAR 0 7
46185: ARRAY
46186: PUSH
46187: LD_VAR 0 9
46191: PUSH
46192: LD_VAR 0 7
46196: ARRAY
46197: PUSH
46198: LD_VAR 0 10
46202: MUL
46203: PLUS
46204: PPUSH
46205: CALL_OW 1
46209: ST_TO_ADDR
46210: GO 46158
46212: POP
46213: POP
// end ;
46214: GO 44691
46216: POP
46217: POP
// result := Replace ( result , 4 , tmp ) ;
46218: LD_ADDR_VAR 0 5
46222: PUSH
46223: LD_VAR 0 5
46227: PPUSH
46228: LD_INT 4
46230: PPUSH
46231: LD_VAR 0 8
46235: PPUSH
46236: CALL_OW 1
46240: ST_TO_ADDR
// end ;
46241: LD_VAR 0 5
46245: RET
// export function DangerAtRange ( unit , range ) ; begin
46246: LD_INT 0
46248: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46249: LD_ADDR_VAR 0 3
46253: PUSH
46254: LD_VAR 0 1
46258: PPUSH
46259: CALL_OW 255
46263: PPUSH
46264: LD_VAR 0 1
46268: PPUSH
46269: CALL_OW 250
46273: PPUSH
46274: LD_VAR 0 1
46278: PPUSH
46279: CALL_OW 251
46283: PPUSH
46284: LD_VAR 0 2
46288: PPUSH
46289: CALL 44543 0 4
46293: ST_TO_ADDR
// end ;
46294: LD_VAR 0 3
46298: RET
// export function DangerInArea ( side , area ) ; begin
46299: LD_INT 0
46301: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46302: LD_ADDR_VAR 0 3
46306: PUSH
46307: LD_VAR 0 2
46311: PPUSH
46312: LD_INT 81
46314: PUSH
46315: LD_VAR 0 1
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PPUSH
46324: CALL_OW 70
46328: ST_TO_ADDR
// end ;
46329: LD_VAR 0 3
46333: RET
// export function IsExtension ( b ) ; begin
46334: LD_INT 0
46336: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46337: LD_ADDR_VAR 0 2
46341: PUSH
46342: LD_VAR 0 1
46346: PUSH
46347: LD_INT 23
46349: PUSH
46350: LD_INT 20
46352: PUSH
46353: LD_INT 22
46355: PUSH
46356: LD_INT 17
46358: PUSH
46359: LD_INT 24
46361: PUSH
46362: LD_INT 21
46364: PUSH
46365: LD_INT 19
46367: PUSH
46368: LD_INT 16
46370: PUSH
46371: LD_INT 25
46373: PUSH
46374: LD_INT 18
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: IN
46389: ST_TO_ADDR
// end ;
46390: LD_VAR 0 2
46394: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46395: LD_INT 0
46397: PPUSH
46398: PPUSH
46399: PPUSH
// result := [ ] ;
46400: LD_ADDR_VAR 0 4
46404: PUSH
46405: EMPTY
46406: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46407: LD_ADDR_VAR 0 5
46411: PUSH
46412: LD_VAR 0 2
46416: PPUSH
46417: LD_INT 21
46419: PUSH
46420: LD_INT 3
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PPUSH
46427: CALL_OW 70
46431: ST_TO_ADDR
// if not tmp then
46432: LD_VAR 0 5
46436: NOT
46437: IFFALSE 46441
// exit ;
46439: GO 46505
// if checkLink then
46441: LD_VAR 0 3
46445: IFFALSE 46495
// begin for i in tmp do
46447: LD_ADDR_VAR 0 6
46451: PUSH
46452: LD_VAR 0 5
46456: PUSH
46457: FOR_IN
46458: IFFALSE 46493
// if GetBase ( i ) <> base then
46460: LD_VAR 0 6
46464: PPUSH
46465: CALL_OW 274
46469: PUSH
46470: LD_VAR 0 1
46474: NONEQUAL
46475: IFFALSE 46491
// ComLinkToBase ( base , i ) ;
46477: LD_VAR 0 1
46481: PPUSH
46482: LD_VAR 0 6
46486: PPUSH
46487: CALL_OW 169
46491: GO 46457
46493: POP
46494: POP
// end ; result := tmp ;
46495: LD_ADDR_VAR 0 4
46499: PUSH
46500: LD_VAR 0 5
46504: ST_TO_ADDR
// end ;
46505: LD_VAR 0 4
46509: RET
// export function ComComplete ( units , b ) ; var i ; begin
46510: LD_INT 0
46512: PPUSH
46513: PPUSH
// if not units then
46514: LD_VAR 0 1
46518: NOT
46519: IFFALSE 46523
// exit ;
46521: GO 46613
// for i in units do
46523: LD_ADDR_VAR 0 4
46527: PUSH
46528: LD_VAR 0 1
46532: PUSH
46533: FOR_IN
46534: IFFALSE 46611
// if BuildingStatus ( b ) = bs_build then
46536: LD_VAR 0 2
46540: PPUSH
46541: CALL_OW 461
46545: PUSH
46546: LD_INT 1
46548: EQUAL
46549: IFFALSE 46609
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46551: LD_VAR 0 4
46555: PPUSH
46556: LD_STRING h
46558: PUSH
46559: LD_VAR 0 2
46563: PPUSH
46564: CALL_OW 250
46568: PUSH
46569: LD_VAR 0 2
46573: PPUSH
46574: CALL_OW 251
46578: PUSH
46579: LD_VAR 0 2
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: PUSH
46602: EMPTY
46603: LIST
46604: PPUSH
46605: CALL_OW 446
46609: GO 46533
46611: POP
46612: POP
// end ;
46613: LD_VAR 0 3
46617: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46618: LD_INT 0
46620: PPUSH
46621: PPUSH
46622: PPUSH
46623: PPUSH
46624: PPUSH
46625: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46626: LD_VAR 0 1
46630: NOT
46631: PUSH
46632: LD_VAR 0 1
46636: PPUSH
46637: CALL_OW 263
46641: PUSH
46642: LD_INT 2
46644: NONEQUAL
46645: OR
46646: IFFALSE 46650
// exit ;
46648: GO 46966
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46650: LD_ADDR_VAR 0 6
46654: PUSH
46655: LD_INT 22
46657: PUSH
46658: LD_VAR 0 1
46662: PPUSH
46663: CALL_OW 255
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 2
46674: PUSH
46675: LD_INT 30
46677: PUSH
46678: LD_INT 36
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 34
46687: PUSH
46688: LD_INT 31
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: LIST
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PPUSH
46704: CALL_OW 69
46708: ST_TO_ADDR
// if not tmp then
46709: LD_VAR 0 6
46713: NOT
46714: IFFALSE 46718
// exit ;
46716: GO 46966
// result := [ ] ;
46718: LD_ADDR_VAR 0 2
46722: PUSH
46723: EMPTY
46724: ST_TO_ADDR
// for i in tmp do
46725: LD_ADDR_VAR 0 3
46729: PUSH
46730: LD_VAR 0 6
46734: PUSH
46735: FOR_IN
46736: IFFALSE 46807
// begin t := UnitsInside ( i ) ;
46738: LD_ADDR_VAR 0 4
46742: PUSH
46743: LD_VAR 0 3
46747: PPUSH
46748: CALL_OW 313
46752: ST_TO_ADDR
// if t then
46753: LD_VAR 0 4
46757: IFFALSE 46805
// for j in t do
46759: LD_ADDR_VAR 0 7
46763: PUSH
46764: LD_VAR 0 4
46768: PUSH
46769: FOR_IN
46770: IFFALSE 46803
// result := Replace ( result , result + 1 , j ) ;
46772: LD_ADDR_VAR 0 2
46776: PUSH
46777: LD_VAR 0 2
46781: PPUSH
46782: LD_VAR 0 2
46786: PUSH
46787: LD_INT 1
46789: PLUS
46790: PPUSH
46791: LD_VAR 0 7
46795: PPUSH
46796: CALL_OW 1
46800: ST_TO_ADDR
46801: GO 46769
46803: POP
46804: POP
// end ;
46805: GO 46735
46807: POP
46808: POP
// if not result then
46809: LD_VAR 0 2
46813: NOT
46814: IFFALSE 46818
// exit ;
46816: GO 46966
// mech := result [ 1 ] ;
46818: LD_ADDR_VAR 0 5
46822: PUSH
46823: LD_VAR 0 2
46827: PUSH
46828: LD_INT 1
46830: ARRAY
46831: ST_TO_ADDR
// if result > 1 then
46832: LD_VAR 0 2
46836: PUSH
46837: LD_INT 1
46839: GREATER
46840: IFFALSE 46952
// begin for i = 2 to result do
46842: LD_ADDR_VAR 0 3
46846: PUSH
46847: DOUBLE
46848: LD_INT 2
46850: DEC
46851: ST_TO_ADDR
46852: LD_VAR 0 2
46856: PUSH
46857: FOR_TO
46858: IFFALSE 46950
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46860: LD_ADDR_VAR 0 4
46864: PUSH
46865: LD_VAR 0 2
46869: PUSH
46870: LD_VAR 0 3
46874: ARRAY
46875: PPUSH
46876: LD_INT 3
46878: PPUSH
46879: CALL_OW 259
46883: PUSH
46884: LD_VAR 0 2
46888: PUSH
46889: LD_VAR 0 3
46893: ARRAY
46894: PPUSH
46895: CALL_OW 432
46899: MINUS
46900: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46901: LD_VAR 0 4
46905: PUSH
46906: LD_VAR 0 5
46910: PPUSH
46911: LD_INT 3
46913: PPUSH
46914: CALL_OW 259
46918: PUSH
46919: LD_VAR 0 5
46923: PPUSH
46924: CALL_OW 432
46928: MINUS
46929: GREATEREQUAL
46930: IFFALSE 46948
// mech := result [ i ] ;
46932: LD_ADDR_VAR 0 5
46936: PUSH
46937: LD_VAR 0 2
46941: PUSH
46942: LD_VAR 0 3
46946: ARRAY
46947: ST_TO_ADDR
// end ;
46948: GO 46857
46950: POP
46951: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46952: LD_VAR 0 1
46956: PPUSH
46957: LD_VAR 0 5
46961: PPUSH
46962: CALL_OW 135
// end ;
46966: LD_VAR 0 2
46970: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46971: LD_INT 0
46973: PPUSH
46974: PPUSH
46975: PPUSH
46976: PPUSH
46977: PPUSH
46978: PPUSH
46979: PPUSH
46980: PPUSH
46981: PPUSH
46982: PPUSH
46983: PPUSH
46984: PPUSH
46985: PPUSH
// result := [ ] ;
46986: LD_ADDR_VAR 0 7
46990: PUSH
46991: EMPTY
46992: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46993: LD_VAR 0 1
46997: PPUSH
46998: CALL_OW 266
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: IN
47013: NOT
47014: IFFALSE 47018
// exit ;
47016: GO 48652
// if name then
47018: LD_VAR 0 3
47022: IFFALSE 47038
// SetBName ( base_dep , name ) ;
47024: LD_VAR 0 1
47028: PPUSH
47029: LD_VAR 0 3
47033: PPUSH
47034: CALL_OW 500
// base := GetBase ( base_dep ) ;
47038: LD_ADDR_VAR 0 15
47042: PUSH
47043: LD_VAR 0 1
47047: PPUSH
47048: CALL_OW 274
47052: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47053: LD_ADDR_VAR 0 16
47057: PUSH
47058: LD_VAR 0 1
47062: PPUSH
47063: CALL_OW 255
47067: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47068: LD_ADDR_VAR 0 17
47072: PUSH
47073: LD_VAR 0 1
47077: PPUSH
47078: CALL_OW 248
47082: ST_TO_ADDR
// if sources then
47083: LD_VAR 0 5
47087: IFFALSE 47134
// for i = 1 to 3 do
47089: LD_ADDR_VAR 0 8
47093: PUSH
47094: DOUBLE
47095: LD_INT 1
47097: DEC
47098: ST_TO_ADDR
47099: LD_INT 3
47101: PUSH
47102: FOR_TO
47103: IFFALSE 47132
// AddResourceType ( base , i , sources [ i ] ) ;
47105: LD_VAR 0 15
47109: PPUSH
47110: LD_VAR 0 8
47114: PPUSH
47115: LD_VAR 0 5
47119: PUSH
47120: LD_VAR 0 8
47124: ARRAY
47125: PPUSH
47126: CALL_OW 276
47130: GO 47102
47132: POP
47133: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47134: LD_ADDR_VAR 0 18
47138: PUSH
47139: LD_VAR 0 15
47143: PPUSH
47144: LD_VAR 0 2
47148: PPUSH
47149: LD_INT 1
47151: PPUSH
47152: CALL 46395 0 3
47156: ST_TO_ADDR
// InitHc ;
47157: CALL_OW 19
// InitUc ;
47161: CALL_OW 18
// uc_side := side ;
47165: LD_ADDR_OWVAR 20
47169: PUSH
47170: LD_VAR 0 16
47174: ST_TO_ADDR
// uc_nation := nation ;
47175: LD_ADDR_OWVAR 21
47179: PUSH
47180: LD_VAR 0 17
47184: ST_TO_ADDR
// if buildings then
47185: LD_VAR 0 18
47189: IFFALSE 48511
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47191: LD_ADDR_VAR 0 19
47195: PUSH
47196: LD_VAR 0 18
47200: PPUSH
47201: LD_INT 2
47203: PUSH
47204: LD_INT 30
47206: PUSH
47207: LD_INT 29
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 30
47216: PUSH
47217: LD_INT 30
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: LIST
47228: PPUSH
47229: CALL_OW 72
47233: ST_TO_ADDR
// if tmp then
47234: LD_VAR 0 19
47238: IFFALSE 47286
// for i in tmp do
47240: LD_ADDR_VAR 0 8
47244: PUSH
47245: LD_VAR 0 19
47249: PUSH
47250: FOR_IN
47251: IFFALSE 47284
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47253: LD_VAR 0 8
47257: PPUSH
47258: CALL_OW 250
47262: PPUSH
47263: LD_VAR 0 8
47267: PPUSH
47268: CALL_OW 251
47272: PPUSH
47273: LD_VAR 0 16
47277: PPUSH
47278: CALL_OW 441
47282: GO 47250
47284: POP
47285: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47286: LD_VAR 0 18
47290: PPUSH
47291: LD_INT 2
47293: PUSH
47294: LD_INT 30
47296: PUSH
47297: LD_INT 32
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 30
47306: PUSH
47307: LD_INT 33
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: LIST
47318: PPUSH
47319: CALL_OW 72
47323: IFFALSE 47411
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47325: LD_ADDR_VAR 0 8
47329: PUSH
47330: LD_VAR 0 18
47334: PPUSH
47335: LD_INT 2
47337: PUSH
47338: LD_INT 30
47340: PUSH
47341: LD_INT 32
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 30
47350: PUSH
47351: LD_INT 33
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: LIST
47362: PPUSH
47363: CALL_OW 72
47367: PUSH
47368: FOR_IN
47369: IFFALSE 47409
// begin if not GetBWeapon ( i ) then
47371: LD_VAR 0 8
47375: PPUSH
47376: CALL_OW 269
47380: NOT
47381: IFFALSE 47407
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47383: LD_VAR 0 8
47387: PPUSH
47388: LD_VAR 0 8
47392: PPUSH
47393: LD_VAR 0 2
47397: PPUSH
47398: CALL 48657 0 2
47402: PPUSH
47403: CALL_OW 431
// end ;
47407: GO 47368
47409: POP
47410: POP
// end ; for i = 1 to personel do
47411: LD_ADDR_VAR 0 8
47415: PUSH
47416: DOUBLE
47417: LD_INT 1
47419: DEC
47420: ST_TO_ADDR
47421: LD_VAR 0 6
47425: PUSH
47426: FOR_TO
47427: IFFALSE 48491
// begin if i > 4 then
47429: LD_VAR 0 8
47433: PUSH
47434: LD_INT 4
47436: GREATER
47437: IFFALSE 47441
// break ;
47439: GO 48491
// case i of 1 :
47441: LD_VAR 0 8
47445: PUSH
47446: LD_INT 1
47448: DOUBLE
47449: EQUAL
47450: IFTRUE 47454
47452: GO 47534
47454: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47455: LD_ADDR_VAR 0 12
47459: PUSH
47460: LD_VAR 0 18
47464: PPUSH
47465: LD_INT 22
47467: PUSH
47468: LD_VAR 0 16
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 58
47479: PUSH
47480: EMPTY
47481: LIST
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: LD_INT 30
47488: PUSH
47489: LD_INT 32
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 30
47498: PUSH
47499: LD_INT 4
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 30
47508: PUSH
47509: LD_INT 5
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: LIST
47526: PPUSH
47527: CALL_OW 72
47531: ST_TO_ADDR
47532: GO 47756
47534: LD_INT 2
47536: DOUBLE
47537: EQUAL
47538: IFTRUE 47542
47540: GO 47604
47542: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47543: LD_ADDR_VAR 0 12
47547: PUSH
47548: LD_VAR 0 18
47552: PPUSH
47553: LD_INT 22
47555: PUSH
47556: LD_VAR 0 16
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: LD_INT 30
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 30
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: LIST
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PPUSH
47597: CALL_OW 72
47601: ST_TO_ADDR
47602: GO 47756
47604: LD_INT 3
47606: DOUBLE
47607: EQUAL
47608: IFTRUE 47612
47610: GO 47674
47612: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47613: LD_ADDR_VAR 0 12
47617: PUSH
47618: LD_VAR 0 18
47622: PPUSH
47623: LD_INT 22
47625: PUSH
47626: LD_VAR 0 16
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 2
47637: PUSH
47638: LD_INT 30
47640: PUSH
47641: LD_INT 2
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 30
47650: PUSH
47651: LD_INT 3
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: LIST
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PPUSH
47667: CALL_OW 72
47671: ST_TO_ADDR
47672: GO 47756
47674: LD_INT 4
47676: DOUBLE
47677: EQUAL
47678: IFTRUE 47682
47680: GO 47755
47682: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47683: LD_ADDR_VAR 0 12
47687: PUSH
47688: LD_VAR 0 18
47692: PPUSH
47693: LD_INT 22
47695: PUSH
47696: LD_VAR 0 16
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: LD_INT 30
47710: PUSH
47711: LD_INT 6
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 30
47720: PUSH
47721: LD_INT 7
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 30
47730: PUSH
47731: LD_INT 8
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PPUSH
47748: CALL_OW 72
47752: ST_TO_ADDR
47753: GO 47756
47755: POP
// if i = 1 then
47756: LD_VAR 0 8
47760: PUSH
47761: LD_INT 1
47763: EQUAL
47764: IFFALSE 47875
// begin tmp := [ ] ;
47766: LD_ADDR_VAR 0 19
47770: PUSH
47771: EMPTY
47772: ST_TO_ADDR
// for j in f do
47773: LD_ADDR_VAR 0 9
47777: PUSH
47778: LD_VAR 0 12
47782: PUSH
47783: FOR_IN
47784: IFFALSE 47857
// if GetBType ( j ) = b_bunker then
47786: LD_VAR 0 9
47790: PPUSH
47791: CALL_OW 266
47795: PUSH
47796: LD_INT 32
47798: EQUAL
47799: IFFALSE 47826
// tmp := Insert ( tmp , 1 , j ) else
47801: LD_ADDR_VAR 0 19
47805: PUSH
47806: LD_VAR 0 19
47810: PPUSH
47811: LD_INT 1
47813: PPUSH
47814: LD_VAR 0 9
47818: PPUSH
47819: CALL_OW 2
47823: ST_TO_ADDR
47824: GO 47855
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47826: LD_ADDR_VAR 0 19
47830: PUSH
47831: LD_VAR 0 19
47835: PPUSH
47836: LD_VAR 0 19
47840: PUSH
47841: LD_INT 1
47843: PLUS
47844: PPUSH
47845: LD_VAR 0 9
47849: PPUSH
47850: CALL_OW 2
47854: ST_TO_ADDR
47855: GO 47783
47857: POP
47858: POP
// if tmp then
47859: LD_VAR 0 19
47863: IFFALSE 47875
// f := tmp ;
47865: LD_ADDR_VAR 0 12
47869: PUSH
47870: LD_VAR 0 19
47874: ST_TO_ADDR
// end ; x := personel [ i ] ;
47875: LD_ADDR_VAR 0 13
47879: PUSH
47880: LD_VAR 0 6
47884: PUSH
47885: LD_VAR 0 8
47889: ARRAY
47890: ST_TO_ADDR
// if x = - 1 then
47891: LD_VAR 0 13
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: EQUAL
47900: IFFALSE 48109
// begin for j in f do
47902: LD_ADDR_VAR 0 9
47906: PUSH
47907: LD_VAR 0 12
47911: PUSH
47912: FOR_IN
47913: IFFALSE 48105
// repeat InitHc ;
47915: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47919: LD_VAR 0 9
47923: PPUSH
47924: CALL_OW 266
47928: PUSH
47929: LD_INT 5
47931: EQUAL
47932: IFFALSE 48002
// begin if UnitsInside ( j ) < 3 then
47934: LD_VAR 0 9
47938: PPUSH
47939: CALL_OW 313
47943: PUSH
47944: LD_INT 3
47946: LESS
47947: IFFALSE 47983
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47949: LD_INT 0
47951: PPUSH
47952: LD_INT 5
47954: PUSH
47955: LD_INT 8
47957: PUSH
47958: LD_INT 9
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: LIST
47965: PUSH
47966: LD_VAR 0 17
47970: ARRAY
47971: PPUSH
47972: LD_VAR 0 4
47976: PPUSH
47977: CALL_OW 380
47981: GO 48000
// PrepareHuman ( false , i , skill ) ;
47983: LD_INT 0
47985: PPUSH
47986: LD_VAR 0 8
47990: PPUSH
47991: LD_VAR 0 4
47995: PPUSH
47996: CALL_OW 380
// end else
48000: GO 48019
// PrepareHuman ( false , i , skill ) ;
48002: LD_INT 0
48004: PPUSH
48005: LD_VAR 0 8
48009: PPUSH
48010: LD_VAR 0 4
48014: PPUSH
48015: CALL_OW 380
// un := CreateHuman ;
48019: LD_ADDR_VAR 0 14
48023: PUSH
48024: CALL_OW 44
48028: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48029: LD_ADDR_VAR 0 7
48033: PUSH
48034: LD_VAR 0 7
48038: PPUSH
48039: LD_INT 1
48041: PPUSH
48042: LD_VAR 0 14
48046: PPUSH
48047: CALL_OW 2
48051: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48052: LD_VAR 0 14
48056: PPUSH
48057: LD_VAR 0 9
48061: PPUSH
48062: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48066: LD_VAR 0 9
48070: PPUSH
48071: CALL_OW 313
48075: PUSH
48076: LD_INT 6
48078: EQUAL
48079: PUSH
48080: LD_VAR 0 9
48084: PPUSH
48085: CALL_OW 266
48089: PUSH
48090: LD_INT 32
48092: PUSH
48093: LD_INT 31
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: IN
48100: OR
48101: IFFALSE 47915
48103: GO 47912
48105: POP
48106: POP
// end else
48107: GO 48489
// for j = 1 to x do
48109: LD_ADDR_VAR 0 9
48113: PUSH
48114: DOUBLE
48115: LD_INT 1
48117: DEC
48118: ST_TO_ADDR
48119: LD_VAR 0 13
48123: PUSH
48124: FOR_TO
48125: IFFALSE 48487
// begin InitHc ;
48127: CALL_OW 19
// if not f then
48131: LD_VAR 0 12
48135: NOT
48136: IFFALSE 48225
// begin PrepareHuman ( false , i , skill ) ;
48138: LD_INT 0
48140: PPUSH
48141: LD_VAR 0 8
48145: PPUSH
48146: LD_VAR 0 4
48150: PPUSH
48151: CALL_OW 380
// un := CreateHuman ;
48155: LD_ADDR_VAR 0 14
48159: PUSH
48160: CALL_OW 44
48164: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48165: LD_ADDR_VAR 0 7
48169: PUSH
48170: LD_VAR 0 7
48174: PPUSH
48175: LD_INT 1
48177: PPUSH
48178: LD_VAR 0 14
48182: PPUSH
48183: CALL_OW 2
48187: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48188: LD_VAR 0 14
48192: PPUSH
48193: LD_VAR 0 1
48197: PPUSH
48198: CALL_OW 250
48202: PPUSH
48203: LD_VAR 0 1
48207: PPUSH
48208: CALL_OW 251
48212: PPUSH
48213: LD_INT 10
48215: PPUSH
48216: LD_INT 0
48218: PPUSH
48219: CALL_OW 50
// continue ;
48223: GO 48124
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48225: LD_VAR 0 12
48229: PUSH
48230: LD_INT 1
48232: ARRAY
48233: PPUSH
48234: CALL_OW 313
48238: PUSH
48239: LD_VAR 0 12
48243: PUSH
48244: LD_INT 1
48246: ARRAY
48247: PPUSH
48248: CALL_OW 266
48252: PUSH
48253: LD_INT 32
48255: PUSH
48256: LD_INT 31
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: IN
48263: AND
48264: PUSH
48265: LD_VAR 0 12
48269: PUSH
48270: LD_INT 1
48272: ARRAY
48273: PPUSH
48274: CALL_OW 313
48278: PUSH
48279: LD_INT 6
48281: EQUAL
48282: OR
48283: IFFALSE 48303
// f := Delete ( f , 1 ) ;
48285: LD_ADDR_VAR 0 12
48289: PUSH
48290: LD_VAR 0 12
48294: PPUSH
48295: LD_INT 1
48297: PPUSH
48298: CALL_OW 3
48302: ST_TO_ADDR
// if not f then
48303: LD_VAR 0 12
48307: NOT
48308: IFFALSE 48326
// begin x := x + 2 ;
48310: LD_ADDR_VAR 0 13
48314: PUSH
48315: LD_VAR 0 13
48319: PUSH
48320: LD_INT 2
48322: PLUS
48323: ST_TO_ADDR
// continue ;
48324: GO 48124
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48326: LD_VAR 0 12
48330: PUSH
48331: LD_INT 1
48333: ARRAY
48334: PPUSH
48335: CALL_OW 266
48339: PUSH
48340: LD_INT 5
48342: EQUAL
48343: IFFALSE 48417
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48345: LD_VAR 0 12
48349: PUSH
48350: LD_INT 1
48352: ARRAY
48353: PPUSH
48354: CALL_OW 313
48358: PUSH
48359: LD_INT 3
48361: LESS
48362: IFFALSE 48398
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48364: LD_INT 0
48366: PPUSH
48367: LD_INT 5
48369: PUSH
48370: LD_INT 8
48372: PUSH
48373: LD_INT 9
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: LIST
48380: PUSH
48381: LD_VAR 0 17
48385: ARRAY
48386: PPUSH
48387: LD_VAR 0 4
48391: PPUSH
48392: CALL_OW 380
48396: GO 48415
// PrepareHuman ( false , i , skill ) ;
48398: LD_INT 0
48400: PPUSH
48401: LD_VAR 0 8
48405: PPUSH
48406: LD_VAR 0 4
48410: PPUSH
48411: CALL_OW 380
// end else
48415: GO 48434
// PrepareHuman ( false , i , skill ) ;
48417: LD_INT 0
48419: PPUSH
48420: LD_VAR 0 8
48424: PPUSH
48425: LD_VAR 0 4
48429: PPUSH
48430: CALL_OW 380
// un := CreateHuman ;
48434: LD_ADDR_VAR 0 14
48438: PUSH
48439: CALL_OW 44
48443: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48444: LD_ADDR_VAR 0 7
48448: PUSH
48449: LD_VAR 0 7
48453: PPUSH
48454: LD_INT 1
48456: PPUSH
48457: LD_VAR 0 14
48461: PPUSH
48462: CALL_OW 2
48466: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48467: LD_VAR 0 14
48471: PPUSH
48472: LD_VAR 0 12
48476: PUSH
48477: LD_INT 1
48479: ARRAY
48480: PPUSH
48481: CALL_OW 52
// end ;
48485: GO 48124
48487: POP
48488: POP
// end ;
48489: GO 47426
48491: POP
48492: POP
// result := result ^ buildings ;
48493: LD_ADDR_VAR 0 7
48497: PUSH
48498: LD_VAR 0 7
48502: PUSH
48503: LD_VAR 0 18
48507: ADD
48508: ST_TO_ADDR
// end else
48509: GO 48652
// begin for i = 1 to personel do
48511: LD_ADDR_VAR 0 8
48515: PUSH
48516: DOUBLE
48517: LD_INT 1
48519: DEC
48520: ST_TO_ADDR
48521: LD_VAR 0 6
48525: PUSH
48526: FOR_TO
48527: IFFALSE 48650
// begin if i > 4 then
48529: LD_VAR 0 8
48533: PUSH
48534: LD_INT 4
48536: GREATER
48537: IFFALSE 48541
// break ;
48539: GO 48650
// x := personel [ i ] ;
48541: LD_ADDR_VAR 0 13
48545: PUSH
48546: LD_VAR 0 6
48550: PUSH
48551: LD_VAR 0 8
48555: ARRAY
48556: ST_TO_ADDR
// if x = - 1 then
48557: LD_VAR 0 13
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: EQUAL
48566: IFFALSE 48570
// continue ;
48568: GO 48526
// PrepareHuman ( false , i , skill ) ;
48570: LD_INT 0
48572: PPUSH
48573: LD_VAR 0 8
48577: PPUSH
48578: LD_VAR 0 4
48582: PPUSH
48583: CALL_OW 380
// un := CreateHuman ;
48587: LD_ADDR_VAR 0 14
48591: PUSH
48592: CALL_OW 44
48596: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48597: LD_VAR 0 14
48601: PPUSH
48602: LD_VAR 0 1
48606: PPUSH
48607: CALL_OW 250
48611: PPUSH
48612: LD_VAR 0 1
48616: PPUSH
48617: CALL_OW 251
48621: PPUSH
48622: LD_INT 10
48624: PPUSH
48625: LD_INT 0
48627: PPUSH
48628: CALL_OW 50
// result := result ^ un ;
48632: LD_ADDR_VAR 0 7
48636: PUSH
48637: LD_VAR 0 7
48641: PUSH
48642: LD_VAR 0 14
48646: ADD
48647: ST_TO_ADDR
// end ;
48648: GO 48526
48650: POP
48651: POP
// end ; end ;
48652: LD_VAR 0 7
48656: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48657: LD_INT 0
48659: PPUSH
48660: PPUSH
48661: PPUSH
48662: PPUSH
48663: PPUSH
48664: PPUSH
48665: PPUSH
48666: PPUSH
48667: PPUSH
48668: PPUSH
48669: PPUSH
48670: PPUSH
48671: PPUSH
48672: PPUSH
48673: PPUSH
48674: PPUSH
// result := false ;
48675: LD_ADDR_VAR 0 3
48679: PUSH
48680: LD_INT 0
48682: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48683: LD_VAR 0 1
48687: NOT
48688: PUSH
48689: LD_VAR 0 1
48693: PPUSH
48694: CALL_OW 266
48698: PUSH
48699: LD_INT 32
48701: PUSH
48702: LD_INT 33
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: IN
48709: NOT
48710: OR
48711: IFFALSE 48715
// exit ;
48713: GO 49824
// nat := GetNation ( tower ) ;
48715: LD_ADDR_VAR 0 12
48719: PUSH
48720: LD_VAR 0 1
48724: PPUSH
48725: CALL_OW 248
48729: ST_TO_ADDR
// side := GetSide ( tower ) ;
48730: LD_ADDR_VAR 0 16
48734: PUSH
48735: LD_VAR 0 1
48739: PPUSH
48740: CALL_OW 255
48744: ST_TO_ADDR
// x := GetX ( tower ) ;
48745: LD_ADDR_VAR 0 10
48749: PUSH
48750: LD_VAR 0 1
48754: PPUSH
48755: CALL_OW 250
48759: ST_TO_ADDR
// y := GetY ( tower ) ;
48760: LD_ADDR_VAR 0 11
48764: PUSH
48765: LD_VAR 0 1
48769: PPUSH
48770: CALL_OW 251
48774: ST_TO_ADDR
// if not x or not y then
48775: LD_VAR 0 10
48779: NOT
48780: PUSH
48781: LD_VAR 0 11
48785: NOT
48786: OR
48787: IFFALSE 48791
// exit ;
48789: GO 49824
// weapon := 0 ;
48791: LD_ADDR_VAR 0 18
48795: PUSH
48796: LD_INT 0
48798: ST_TO_ADDR
// fac_list := [ ] ;
48799: LD_ADDR_VAR 0 17
48803: PUSH
48804: EMPTY
48805: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48806: LD_ADDR_VAR 0 6
48810: PUSH
48811: LD_VAR 0 1
48815: PPUSH
48816: CALL_OW 274
48820: PPUSH
48821: LD_VAR 0 2
48825: PPUSH
48826: LD_INT 0
48828: PPUSH
48829: CALL 46395 0 3
48833: PPUSH
48834: LD_INT 30
48836: PUSH
48837: LD_INT 3
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PPUSH
48844: CALL_OW 72
48848: ST_TO_ADDR
// if not factories then
48849: LD_VAR 0 6
48853: NOT
48854: IFFALSE 48858
// exit ;
48856: GO 49824
// for i in factories do
48858: LD_ADDR_VAR 0 8
48862: PUSH
48863: LD_VAR 0 6
48867: PUSH
48868: FOR_IN
48869: IFFALSE 48894
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48871: LD_ADDR_VAR 0 17
48875: PUSH
48876: LD_VAR 0 17
48880: PUSH
48881: LD_VAR 0 8
48885: PPUSH
48886: CALL_OW 478
48890: UNION
48891: ST_TO_ADDR
48892: GO 48868
48894: POP
48895: POP
// if not fac_list then
48896: LD_VAR 0 17
48900: NOT
48901: IFFALSE 48905
// exit ;
48903: GO 49824
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48905: LD_ADDR_VAR 0 5
48909: PUSH
48910: LD_INT 4
48912: PUSH
48913: LD_INT 5
48915: PUSH
48916: LD_INT 9
48918: PUSH
48919: LD_INT 10
48921: PUSH
48922: LD_INT 6
48924: PUSH
48925: LD_INT 7
48927: PUSH
48928: LD_INT 11
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 27
48942: PUSH
48943: LD_INT 28
48945: PUSH
48946: LD_INT 26
48948: PUSH
48949: LD_INT 30
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 43
48960: PUSH
48961: LD_INT 44
48963: PUSH
48964: LD_INT 46
48966: PUSH
48967: LD_INT 45
48969: PUSH
48970: LD_INT 47
48972: PUSH
48973: LD_INT 49
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: LIST
48988: PUSH
48989: LD_VAR 0 12
48993: ARRAY
48994: ST_TO_ADDR
// list := list isect fac_list ;
48995: LD_ADDR_VAR 0 5
48999: PUSH
49000: LD_VAR 0 5
49004: PUSH
49005: LD_VAR 0 17
49009: ISECT
49010: ST_TO_ADDR
// if not list then
49011: LD_VAR 0 5
49015: NOT
49016: IFFALSE 49020
// exit ;
49018: GO 49824
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49020: LD_VAR 0 12
49024: PUSH
49025: LD_INT 3
49027: EQUAL
49028: PUSH
49029: LD_INT 49
49031: PUSH
49032: LD_VAR 0 5
49036: IN
49037: AND
49038: PUSH
49039: LD_INT 31
49041: PPUSH
49042: LD_VAR 0 16
49046: PPUSH
49047: CALL_OW 321
49051: PUSH
49052: LD_INT 2
49054: EQUAL
49055: AND
49056: IFFALSE 49116
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49058: LD_INT 22
49060: PUSH
49061: LD_VAR 0 16
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 35
49072: PUSH
49073: LD_INT 49
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 91
49082: PUSH
49083: LD_VAR 0 1
49087: PUSH
49088: LD_INT 10
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: LIST
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: LIST
49100: PPUSH
49101: CALL_OW 69
49105: NOT
49106: IFFALSE 49116
// weapon := ru_time_lapser ;
49108: LD_ADDR_VAR 0 18
49112: PUSH
49113: LD_INT 49
49115: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49116: LD_VAR 0 12
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: LD_INT 2
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: IN
49131: PUSH
49132: LD_INT 11
49134: PUSH
49135: LD_VAR 0 5
49139: IN
49140: PUSH
49141: LD_INT 30
49143: PUSH
49144: LD_VAR 0 5
49148: IN
49149: OR
49150: AND
49151: PUSH
49152: LD_INT 6
49154: PPUSH
49155: LD_VAR 0 16
49159: PPUSH
49160: CALL_OW 321
49164: PUSH
49165: LD_INT 2
49167: EQUAL
49168: AND
49169: IFFALSE 49334
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49171: LD_INT 22
49173: PUSH
49174: LD_VAR 0 16
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: LD_INT 35
49188: PUSH
49189: LD_INT 11
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 35
49198: PUSH
49199: LD_INT 30
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 91
49213: PUSH
49214: LD_VAR 0 1
49218: PUSH
49219: LD_INT 18
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: LIST
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: LIST
49231: PPUSH
49232: CALL_OW 69
49236: NOT
49237: PUSH
49238: LD_INT 22
49240: PUSH
49241: LD_VAR 0 16
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 2
49252: PUSH
49253: LD_INT 30
49255: PUSH
49256: LD_INT 32
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 30
49265: PUSH
49266: LD_INT 33
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 91
49280: PUSH
49281: LD_VAR 0 1
49285: PUSH
49286: LD_INT 12
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: LIST
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: LIST
49298: PUSH
49299: EMPTY
49300: LIST
49301: PPUSH
49302: CALL_OW 69
49306: PUSH
49307: LD_INT 2
49309: GREATER
49310: AND
49311: IFFALSE 49334
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49313: LD_ADDR_VAR 0 18
49317: PUSH
49318: LD_INT 11
49320: PUSH
49321: LD_INT 30
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_VAR 0 12
49332: ARRAY
49333: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49334: LD_VAR 0 18
49338: NOT
49339: PUSH
49340: LD_INT 40
49342: PPUSH
49343: LD_VAR 0 16
49347: PPUSH
49348: CALL_OW 321
49352: PUSH
49353: LD_INT 2
49355: EQUAL
49356: AND
49357: PUSH
49358: LD_INT 7
49360: PUSH
49361: LD_VAR 0 5
49365: IN
49366: PUSH
49367: LD_INT 28
49369: PUSH
49370: LD_VAR 0 5
49374: IN
49375: OR
49376: PUSH
49377: LD_INT 45
49379: PUSH
49380: LD_VAR 0 5
49384: IN
49385: OR
49386: AND
49387: IFFALSE 49641
// begin hex := GetHexInfo ( x , y ) ;
49389: LD_ADDR_VAR 0 4
49393: PUSH
49394: LD_VAR 0 10
49398: PPUSH
49399: LD_VAR 0 11
49403: PPUSH
49404: CALL_OW 546
49408: ST_TO_ADDR
// if hex [ 1 ] then
49409: LD_VAR 0 4
49413: PUSH
49414: LD_INT 1
49416: ARRAY
49417: IFFALSE 49421
// exit ;
49419: GO 49824
// height := hex [ 2 ] ;
49421: LD_ADDR_VAR 0 15
49425: PUSH
49426: LD_VAR 0 4
49430: PUSH
49431: LD_INT 2
49433: ARRAY
49434: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49435: LD_ADDR_VAR 0 14
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: LD_INT 2
49445: PUSH
49446: LD_INT 3
49448: PUSH
49449: LD_INT 5
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: ST_TO_ADDR
// for i in tmp do
49458: LD_ADDR_VAR 0 8
49462: PUSH
49463: LD_VAR 0 14
49467: PUSH
49468: FOR_IN
49469: IFFALSE 49639
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49471: LD_ADDR_VAR 0 9
49475: PUSH
49476: LD_VAR 0 10
49480: PPUSH
49481: LD_VAR 0 8
49485: PPUSH
49486: LD_INT 5
49488: PPUSH
49489: CALL_OW 272
49493: PUSH
49494: LD_VAR 0 11
49498: PPUSH
49499: LD_VAR 0 8
49503: PPUSH
49504: LD_INT 5
49506: PPUSH
49507: CALL_OW 273
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49516: LD_VAR 0 9
49520: PUSH
49521: LD_INT 1
49523: ARRAY
49524: PPUSH
49525: LD_VAR 0 9
49529: PUSH
49530: LD_INT 2
49532: ARRAY
49533: PPUSH
49534: CALL_OW 488
49538: IFFALSE 49637
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49540: LD_ADDR_VAR 0 4
49544: PUSH
49545: LD_VAR 0 9
49549: PUSH
49550: LD_INT 1
49552: ARRAY
49553: PPUSH
49554: LD_VAR 0 9
49558: PUSH
49559: LD_INT 2
49561: ARRAY
49562: PPUSH
49563: CALL_OW 546
49567: ST_TO_ADDR
// if hex [ 1 ] then
49568: LD_VAR 0 4
49572: PUSH
49573: LD_INT 1
49575: ARRAY
49576: IFFALSE 49580
// continue ;
49578: GO 49468
// h := hex [ 2 ] ;
49580: LD_ADDR_VAR 0 13
49584: PUSH
49585: LD_VAR 0 4
49589: PUSH
49590: LD_INT 2
49592: ARRAY
49593: ST_TO_ADDR
// if h + 7 < height then
49594: LD_VAR 0 13
49598: PUSH
49599: LD_INT 7
49601: PLUS
49602: PUSH
49603: LD_VAR 0 15
49607: LESS
49608: IFFALSE 49637
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49610: LD_ADDR_VAR 0 18
49614: PUSH
49615: LD_INT 7
49617: PUSH
49618: LD_INT 28
49620: PUSH
49621: LD_INT 45
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: LIST
49628: PUSH
49629: LD_VAR 0 12
49633: ARRAY
49634: ST_TO_ADDR
// break ;
49635: GO 49639
// end ; end ; end ;
49637: GO 49468
49639: POP
49640: POP
// end ; if not weapon then
49641: LD_VAR 0 18
49645: NOT
49646: IFFALSE 49706
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49648: LD_ADDR_VAR 0 5
49652: PUSH
49653: LD_VAR 0 5
49657: PUSH
49658: LD_INT 11
49660: PUSH
49661: LD_INT 30
49663: PUSH
49664: LD_INT 49
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: LIST
49671: DIFF
49672: ST_TO_ADDR
// if not list then
49673: LD_VAR 0 5
49677: NOT
49678: IFFALSE 49682
// exit ;
49680: GO 49824
// weapon := list [ rand ( 1 , list ) ] ;
49682: LD_ADDR_VAR 0 18
49686: PUSH
49687: LD_VAR 0 5
49691: PUSH
49692: LD_INT 1
49694: PPUSH
49695: LD_VAR 0 5
49699: PPUSH
49700: CALL_OW 12
49704: ARRAY
49705: ST_TO_ADDR
// end ; if weapon then
49706: LD_VAR 0 18
49710: IFFALSE 49824
// begin tmp := CostOfWeapon ( weapon ) ;
49712: LD_ADDR_VAR 0 14
49716: PUSH
49717: LD_VAR 0 18
49721: PPUSH
49722: CALL_OW 451
49726: ST_TO_ADDR
// j := GetBase ( tower ) ;
49727: LD_ADDR_VAR 0 9
49731: PUSH
49732: LD_VAR 0 1
49736: PPUSH
49737: CALL_OW 274
49741: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49742: LD_VAR 0 9
49746: PPUSH
49747: LD_INT 1
49749: PPUSH
49750: CALL_OW 275
49754: PUSH
49755: LD_VAR 0 14
49759: PUSH
49760: LD_INT 1
49762: ARRAY
49763: GREATEREQUAL
49764: PUSH
49765: LD_VAR 0 9
49769: PPUSH
49770: LD_INT 2
49772: PPUSH
49773: CALL_OW 275
49777: PUSH
49778: LD_VAR 0 14
49782: PUSH
49783: LD_INT 2
49785: ARRAY
49786: GREATEREQUAL
49787: AND
49788: PUSH
49789: LD_VAR 0 9
49793: PPUSH
49794: LD_INT 3
49796: PPUSH
49797: CALL_OW 275
49801: PUSH
49802: LD_VAR 0 14
49806: PUSH
49807: LD_INT 3
49809: ARRAY
49810: GREATEREQUAL
49811: AND
49812: IFFALSE 49824
// result := weapon ;
49814: LD_ADDR_VAR 0 3
49818: PUSH
49819: LD_VAR 0 18
49823: ST_TO_ADDR
// end ; end ;
49824: LD_VAR 0 3
49828: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49829: LD_INT 0
49831: PPUSH
49832: PPUSH
// result := true ;
49833: LD_ADDR_VAR 0 3
49837: PUSH
49838: LD_INT 1
49840: ST_TO_ADDR
// if array1 = array2 then
49841: LD_VAR 0 1
49845: PUSH
49846: LD_VAR 0 2
49850: EQUAL
49851: IFFALSE 49911
// begin for i = 1 to array1 do
49853: LD_ADDR_VAR 0 4
49857: PUSH
49858: DOUBLE
49859: LD_INT 1
49861: DEC
49862: ST_TO_ADDR
49863: LD_VAR 0 1
49867: PUSH
49868: FOR_TO
49869: IFFALSE 49907
// if array1 [ i ] <> array2 [ i ] then
49871: LD_VAR 0 1
49875: PUSH
49876: LD_VAR 0 4
49880: ARRAY
49881: PUSH
49882: LD_VAR 0 2
49886: PUSH
49887: LD_VAR 0 4
49891: ARRAY
49892: NONEQUAL
49893: IFFALSE 49905
// begin result := false ;
49895: LD_ADDR_VAR 0 3
49899: PUSH
49900: LD_INT 0
49902: ST_TO_ADDR
// break ;
49903: GO 49907
// end ;
49905: GO 49868
49907: POP
49908: POP
// end else
49909: GO 49919
// result := false ;
49911: LD_ADDR_VAR 0 3
49915: PUSH
49916: LD_INT 0
49918: ST_TO_ADDR
// end ;
49919: LD_VAR 0 3
49923: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49924: LD_INT 0
49926: PPUSH
49927: PPUSH
// if not array1 or not array2 then
49928: LD_VAR 0 1
49932: NOT
49933: PUSH
49934: LD_VAR 0 2
49938: NOT
49939: OR
49940: IFFALSE 49944
// exit ;
49942: GO 50008
// result := true ;
49944: LD_ADDR_VAR 0 3
49948: PUSH
49949: LD_INT 1
49951: ST_TO_ADDR
// for i = 1 to array1 do
49952: LD_ADDR_VAR 0 4
49956: PUSH
49957: DOUBLE
49958: LD_INT 1
49960: DEC
49961: ST_TO_ADDR
49962: LD_VAR 0 1
49966: PUSH
49967: FOR_TO
49968: IFFALSE 50006
// if array1 [ i ] <> array2 [ i ] then
49970: LD_VAR 0 1
49974: PUSH
49975: LD_VAR 0 4
49979: ARRAY
49980: PUSH
49981: LD_VAR 0 2
49985: PUSH
49986: LD_VAR 0 4
49990: ARRAY
49991: NONEQUAL
49992: IFFALSE 50004
// begin result := false ;
49994: LD_ADDR_VAR 0 3
49998: PUSH
49999: LD_INT 0
50001: ST_TO_ADDR
// break ;
50002: GO 50006
// end ;
50004: GO 49967
50006: POP
50007: POP
// end ;
50008: LD_VAR 0 3
50012: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50013: LD_INT 0
50015: PPUSH
50016: PPUSH
50017: PPUSH
// pom := GetBase ( fac ) ;
50018: LD_ADDR_VAR 0 5
50022: PUSH
50023: LD_VAR 0 1
50027: PPUSH
50028: CALL_OW 274
50032: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50033: LD_ADDR_VAR 0 4
50037: PUSH
50038: LD_VAR 0 2
50042: PUSH
50043: LD_INT 1
50045: ARRAY
50046: PPUSH
50047: LD_VAR 0 2
50051: PUSH
50052: LD_INT 2
50054: ARRAY
50055: PPUSH
50056: LD_VAR 0 2
50060: PUSH
50061: LD_INT 3
50063: ARRAY
50064: PPUSH
50065: LD_VAR 0 2
50069: PUSH
50070: LD_INT 4
50072: ARRAY
50073: PPUSH
50074: CALL_OW 449
50078: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50079: LD_ADDR_VAR 0 3
50083: PUSH
50084: LD_VAR 0 5
50088: PPUSH
50089: LD_INT 1
50091: PPUSH
50092: CALL_OW 275
50096: PUSH
50097: LD_VAR 0 4
50101: PUSH
50102: LD_INT 1
50104: ARRAY
50105: GREATEREQUAL
50106: PUSH
50107: LD_VAR 0 5
50111: PPUSH
50112: LD_INT 2
50114: PPUSH
50115: CALL_OW 275
50119: PUSH
50120: LD_VAR 0 4
50124: PUSH
50125: LD_INT 2
50127: ARRAY
50128: GREATEREQUAL
50129: AND
50130: PUSH
50131: LD_VAR 0 5
50135: PPUSH
50136: LD_INT 3
50138: PPUSH
50139: CALL_OW 275
50143: PUSH
50144: LD_VAR 0 4
50148: PUSH
50149: LD_INT 3
50151: ARRAY
50152: GREATEREQUAL
50153: AND
50154: ST_TO_ADDR
// end ;
50155: LD_VAR 0 3
50159: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50160: LD_INT 0
50162: PPUSH
50163: PPUSH
50164: PPUSH
50165: PPUSH
// pom := GetBase ( building ) ;
50166: LD_ADDR_VAR 0 3
50170: PUSH
50171: LD_VAR 0 1
50175: PPUSH
50176: CALL_OW 274
50180: ST_TO_ADDR
// if not pom then
50181: LD_VAR 0 3
50185: NOT
50186: IFFALSE 50190
// exit ;
50188: GO 50360
// btype := GetBType ( building ) ;
50190: LD_ADDR_VAR 0 5
50194: PUSH
50195: LD_VAR 0 1
50199: PPUSH
50200: CALL_OW 266
50204: ST_TO_ADDR
// if btype = b_armoury then
50205: LD_VAR 0 5
50209: PUSH
50210: LD_INT 4
50212: EQUAL
50213: IFFALSE 50223
// btype := b_barracks ;
50215: LD_ADDR_VAR 0 5
50219: PUSH
50220: LD_INT 5
50222: ST_TO_ADDR
// if btype = b_depot then
50223: LD_VAR 0 5
50227: PUSH
50228: LD_INT 0
50230: EQUAL
50231: IFFALSE 50241
// btype := b_warehouse ;
50233: LD_ADDR_VAR 0 5
50237: PUSH
50238: LD_INT 1
50240: ST_TO_ADDR
// if btype = b_workshop then
50241: LD_VAR 0 5
50245: PUSH
50246: LD_INT 2
50248: EQUAL
50249: IFFALSE 50259
// btype := b_factory ;
50251: LD_ADDR_VAR 0 5
50255: PUSH
50256: LD_INT 3
50258: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50259: LD_ADDR_VAR 0 4
50263: PUSH
50264: LD_VAR 0 5
50268: PPUSH
50269: LD_VAR 0 1
50273: PPUSH
50274: CALL_OW 248
50278: PPUSH
50279: CALL_OW 450
50283: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50284: LD_ADDR_VAR 0 2
50288: PUSH
50289: LD_VAR 0 3
50293: PPUSH
50294: LD_INT 1
50296: PPUSH
50297: CALL_OW 275
50301: PUSH
50302: LD_VAR 0 4
50306: PUSH
50307: LD_INT 1
50309: ARRAY
50310: GREATEREQUAL
50311: PUSH
50312: LD_VAR 0 3
50316: PPUSH
50317: LD_INT 2
50319: PPUSH
50320: CALL_OW 275
50324: PUSH
50325: LD_VAR 0 4
50329: PUSH
50330: LD_INT 2
50332: ARRAY
50333: GREATEREQUAL
50334: AND
50335: PUSH
50336: LD_VAR 0 3
50340: PPUSH
50341: LD_INT 3
50343: PPUSH
50344: CALL_OW 275
50348: PUSH
50349: LD_VAR 0 4
50353: PUSH
50354: LD_INT 3
50356: ARRAY
50357: GREATEREQUAL
50358: AND
50359: ST_TO_ADDR
// end ;
50360: LD_VAR 0 2
50364: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50365: LD_INT 0
50367: PPUSH
50368: PPUSH
50369: PPUSH
// pom := GetBase ( building ) ;
50370: LD_ADDR_VAR 0 4
50374: PUSH
50375: LD_VAR 0 1
50379: PPUSH
50380: CALL_OW 274
50384: ST_TO_ADDR
// if not pom then
50385: LD_VAR 0 4
50389: NOT
50390: IFFALSE 50394
// exit ;
50392: GO 50495
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50394: LD_ADDR_VAR 0 5
50398: PUSH
50399: LD_VAR 0 2
50403: PPUSH
50404: LD_VAR 0 1
50408: PPUSH
50409: CALL_OW 248
50413: PPUSH
50414: CALL_OW 450
50418: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50419: LD_ADDR_VAR 0 3
50423: PUSH
50424: LD_VAR 0 4
50428: PPUSH
50429: LD_INT 1
50431: PPUSH
50432: CALL_OW 275
50436: PUSH
50437: LD_VAR 0 5
50441: PUSH
50442: LD_INT 1
50444: ARRAY
50445: GREATEREQUAL
50446: PUSH
50447: LD_VAR 0 4
50451: PPUSH
50452: LD_INT 2
50454: PPUSH
50455: CALL_OW 275
50459: PUSH
50460: LD_VAR 0 5
50464: PUSH
50465: LD_INT 2
50467: ARRAY
50468: GREATEREQUAL
50469: AND
50470: PUSH
50471: LD_VAR 0 4
50475: PPUSH
50476: LD_INT 3
50478: PPUSH
50479: CALL_OW 275
50483: PUSH
50484: LD_VAR 0 5
50488: PUSH
50489: LD_INT 3
50491: ARRAY
50492: GREATEREQUAL
50493: AND
50494: ST_TO_ADDR
// end ;
50495: LD_VAR 0 3
50499: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50500: LD_INT 0
50502: PPUSH
50503: PPUSH
50504: PPUSH
50505: PPUSH
50506: PPUSH
50507: PPUSH
50508: PPUSH
50509: PPUSH
50510: PPUSH
50511: PPUSH
50512: PPUSH
// result := false ;
50513: LD_ADDR_VAR 0 8
50517: PUSH
50518: LD_INT 0
50520: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50521: LD_VAR 0 5
50525: NOT
50526: PUSH
50527: LD_VAR 0 1
50531: NOT
50532: OR
50533: PUSH
50534: LD_VAR 0 2
50538: NOT
50539: OR
50540: PUSH
50541: LD_VAR 0 3
50545: NOT
50546: OR
50547: IFFALSE 50551
// exit ;
50549: GO 51365
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50551: LD_ADDR_VAR 0 14
50555: PUSH
50556: LD_VAR 0 1
50560: PPUSH
50561: LD_VAR 0 2
50565: PPUSH
50566: LD_VAR 0 3
50570: PPUSH
50571: LD_VAR 0 4
50575: PPUSH
50576: LD_VAR 0 5
50580: PUSH
50581: LD_INT 1
50583: ARRAY
50584: PPUSH
50585: CALL_OW 248
50589: PPUSH
50590: LD_INT 0
50592: PPUSH
50593: CALL 52602 0 6
50597: ST_TO_ADDR
// if not hexes then
50598: LD_VAR 0 14
50602: NOT
50603: IFFALSE 50607
// exit ;
50605: GO 51365
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50607: LD_ADDR_VAR 0 17
50611: PUSH
50612: LD_VAR 0 5
50616: PPUSH
50617: LD_INT 22
50619: PUSH
50620: LD_VAR 0 13
50624: PPUSH
50625: CALL_OW 255
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: LD_INT 30
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 30
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: LIST
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PPUSH
50666: CALL_OW 72
50670: ST_TO_ADDR
// for i = 1 to hexes do
50671: LD_ADDR_VAR 0 9
50675: PUSH
50676: DOUBLE
50677: LD_INT 1
50679: DEC
50680: ST_TO_ADDR
50681: LD_VAR 0 14
50685: PUSH
50686: FOR_TO
50687: IFFALSE 51363
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50689: LD_ADDR_VAR 0 13
50693: PUSH
50694: LD_VAR 0 14
50698: PUSH
50699: LD_VAR 0 9
50703: ARRAY
50704: PUSH
50705: LD_INT 1
50707: ARRAY
50708: PPUSH
50709: LD_VAR 0 14
50713: PUSH
50714: LD_VAR 0 9
50718: ARRAY
50719: PUSH
50720: LD_INT 2
50722: ARRAY
50723: PPUSH
50724: CALL_OW 428
50728: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50729: LD_VAR 0 14
50733: PUSH
50734: LD_VAR 0 9
50738: ARRAY
50739: PUSH
50740: LD_INT 1
50742: ARRAY
50743: PPUSH
50744: LD_VAR 0 14
50748: PUSH
50749: LD_VAR 0 9
50753: ARRAY
50754: PUSH
50755: LD_INT 2
50757: ARRAY
50758: PPUSH
50759: CALL_OW 351
50763: PUSH
50764: LD_VAR 0 14
50768: PUSH
50769: LD_VAR 0 9
50773: ARRAY
50774: PUSH
50775: LD_INT 1
50777: ARRAY
50778: PPUSH
50779: LD_VAR 0 14
50783: PUSH
50784: LD_VAR 0 9
50788: ARRAY
50789: PUSH
50790: LD_INT 2
50792: ARRAY
50793: PPUSH
50794: CALL_OW 488
50798: NOT
50799: OR
50800: PUSH
50801: LD_VAR 0 13
50805: PPUSH
50806: CALL_OW 247
50810: PUSH
50811: LD_INT 3
50813: EQUAL
50814: OR
50815: IFFALSE 50821
// exit ;
50817: POP
50818: POP
50819: GO 51365
// if not tmp then
50821: LD_VAR 0 13
50825: NOT
50826: IFFALSE 50830
// continue ;
50828: GO 50686
// result := true ;
50830: LD_ADDR_VAR 0 8
50834: PUSH
50835: LD_INT 1
50837: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50838: LD_VAR 0 6
50842: PUSH
50843: LD_VAR 0 13
50847: PPUSH
50848: CALL_OW 247
50852: PUSH
50853: LD_INT 2
50855: EQUAL
50856: AND
50857: PUSH
50858: LD_VAR 0 13
50862: PPUSH
50863: CALL_OW 263
50867: PUSH
50868: LD_INT 1
50870: EQUAL
50871: AND
50872: IFFALSE 51036
// begin if IsDrivenBy ( tmp ) then
50874: LD_VAR 0 13
50878: PPUSH
50879: CALL_OW 311
50883: IFFALSE 50887
// continue ;
50885: GO 50686
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50887: LD_VAR 0 6
50891: PPUSH
50892: LD_INT 3
50894: PUSH
50895: LD_INT 60
50897: PUSH
50898: EMPTY
50899: LIST
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 3
50907: PUSH
50908: LD_INT 55
50910: PUSH
50911: EMPTY
50912: LIST
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PPUSH
50922: CALL_OW 72
50926: IFFALSE 51034
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50928: LD_ADDR_VAR 0 18
50932: PUSH
50933: LD_VAR 0 6
50937: PPUSH
50938: LD_INT 3
50940: PUSH
50941: LD_INT 60
50943: PUSH
50944: EMPTY
50945: LIST
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 3
50953: PUSH
50954: LD_INT 55
50956: PUSH
50957: EMPTY
50958: LIST
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PPUSH
50968: CALL_OW 72
50972: PUSH
50973: LD_INT 1
50975: ARRAY
50976: ST_TO_ADDR
// if IsInUnit ( driver ) then
50977: LD_VAR 0 18
50981: PPUSH
50982: CALL_OW 310
50986: IFFALSE 50997
// ComExit ( driver ) ;
50988: LD_VAR 0 18
50992: PPUSH
50993: CALL 76307 0 1
// AddComEnterUnit ( driver , tmp ) ;
50997: LD_VAR 0 18
51001: PPUSH
51002: LD_VAR 0 13
51006: PPUSH
51007: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51011: LD_VAR 0 18
51015: PPUSH
51016: LD_VAR 0 7
51020: PPUSH
51021: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51025: LD_VAR 0 18
51029: PPUSH
51030: CALL_OW 181
// end ; continue ;
51034: GO 50686
// end ; if not cleaners or not tmp in cleaners then
51036: LD_VAR 0 6
51040: NOT
51041: PUSH
51042: LD_VAR 0 13
51046: PUSH
51047: LD_VAR 0 6
51051: IN
51052: NOT
51053: OR
51054: IFFALSE 51361
// begin if dep then
51056: LD_VAR 0 17
51060: IFFALSE 51196
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51062: LD_ADDR_VAR 0 16
51066: PUSH
51067: LD_VAR 0 17
51071: PUSH
51072: LD_INT 1
51074: ARRAY
51075: PPUSH
51076: CALL_OW 250
51080: PPUSH
51081: LD_VAR 0 17
51085: PUSH
51086: LD_INT 1
51088: ARRAY
51089: PPUSH
51090: CALL_OW 254
51094: PPUSH
51095: LD_INT 5
51097: PPUSH
51098: CALL_OW 272
51102: PUSH
51103: LD_VAR 0 17
51107: PUSH
51108: LD_INT 1
51110: ARRAY
51111: PPUSH
51112: CALL_OW 251
51116: PPUSH
51117: LD_VAR 0 17
51121: PUSH
51122: LD_INT 1
51124: ARRAY
51125: PPUSH
51126: CALL_OW 254
51130: PPUSH
51131: LD_INT 5
51133: PPUSH
51134: CALL_OW 273
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51143: LD_VAR 0 16
51147: PUSH
51148: LD_INT 1
51150: ARRAY
51151: PPUSH
51152: LD_VAR 0 16
51156: PUSH
51157: LD_INT 2
51159: ARRAY
51160: PPUSH
51161: CALL_OW 488
51165: IFFALSE 51196
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51167: LD_VAR 0 13
51171: PPUSH
51172: LD_VAR 0 16
51176: PUSH
51177: LD_INT 1
51179: ARRAY
51180: PPUSH
51181: LD_VAR 0 16
51185: PUSH
51186: LD_INT 2
51188: ARRAY
51189: PPUSH
51190: CALL_OW 111
// continue ;
51194: GO 50686
// end ; end ; r := GetDir ( tmp ) ;
51196: LD_ADDR_VAR 0 15
51200: PUSH
51201: LD_VAR 0 13
51205: PPUSH
51206: CALL_OW 254
51210: ST_TO_ADDR
// if r = 5 then
51211: LD_VAR 0 15
51215: PUSH
51216: LD_INT 5
51218: EQUAL
51219: IFFALSE 51229
// r := 0 ;
51221: LD_ADDR_VAR 0 15
51225: PUSH
51226: LD_INT 0
51228: ST_TO_ADDR
// for j = r to 5 do
51229: LD_ADDR_VAR 0 10
51233: PUSH
51234: DOUBLE
51235: LD_VAR 0 15
51239: DEC
51240: ST_TO_ADDR
51241: LD_INT 5
51243: PUSH
51244: FOR_TO
51245: IFFALSE 51359
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51247: LD_ADDR_VAR 0 11
51251: PUSH
51252: LD_VAR 0 13
51256: PPUSH
51257: CALL_OW 250
51261: PPUSH
51262: LD_VAR 0 10
51266: PPUSH
51267: LD_INT 2
51269: PPUSH
51270: CALL_OW 272
51274: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51275: LD_ADDR_VAR 0 12
51279: PUSH
51280: LD_VAR 0 13
51284: PPUSH
51285: CALL_OW 251
51289: PPUSH
51290: LD_VAR 0 10
51294: PPUSH
51295: LD_INT 2
51297: PPUSH
51298: CALL_OW 273
51302: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51303: LD_VAR 0 11
51307: PPUSH
51308: LD_VAR 0 12
51312: PPUSH
51313: CALL_OW 488
51317: PUSH
51318: LD_VAR 0 11
51322: PPUSH
51323: LD_VAR 0 12
51327: PPUSH
51328: CALL_OW 428
51332: NOT
51333: AND
51334: IFFALSE 51357
// begin ComMoveXY ( tmp , _x , _y ) ;
51336: LD_VAR 0 13
51340: PPUSH
51341: LD_VAR 0 11
51345: PPUSH
51346: LD_VAR 0 12
51350: PPUSH
51351: CALL_OW 111
// break ;
51355: GO 51359
// end ; end ;
51357: GO 51244
51359: POP
51360: POP
// end ; end ;
51361: GO 50686
51363: POP
51364: POP
// end ;
51365: LD_VAR 0 8
51369: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51370: LD_INT 0
51372: PPUSH
// result := true ;
51373: LD_ADDR_VAR 0 3
51377: PUSH
51378: LD_INT 1
51380: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51381: LD_VAR 0 2
51385: PUSH
51386: LD_INT 24
51388: DOUBLE
51389: EQUAL
51390: IFTRUE 51400
51392: LD_INT 33
51394: DOUBLE
51395: EQUAL
51396: IFTRUE 51400
51398: GO 51425
51400: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51401: LD_ADDR_VAR 0 3
51405: PUSH
51406: LD_INT 32
51408: PPUSH
51409: LD_VAR 0 1
51413: PPUSH
51414: CALL_OW 321
51418: PUSH
51419: LD_INT 2
51421: EQUAL
51422: ST_TO_ADDR
51423: GO 51745
51425: LD_INT 20
51427: DOUBLE
51428: EQUAL
51429: IFTRUE 51433
51431: GO 51458
51433: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51434: LD_ADDR_VAR 0 3
51438: PUSH
51439: LD_INT 6
51441: PPUSH
51442: LD_VAR 0 1
51446: PPUSH
51447: CALL_OW 321
51451: PUSH
51452: LD_INT 2
51454: EQUAL
51455: ST_TO_ADDR
51456: GO 51745
51458: LD_INT 22
51460: DOUBLE
51461: EQUAL
51462: IFTRUE 51472
51464: LD_INT 36
51466: DOUBLE
51467: EQUAL
51468: IFTRUE 51472
51470: GO 51497
51472: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51473: LD_ADDR_VAR 0 3
51477: PUSH
51478: LD_INT 15
51480: PPUSH
51481: LD_VAR 0 1
51485: PPUSH
51486: CALL_OW 321
51490: PUSH
51491: LD_INT 2
51493: EQUAL
51494: ST_TO_ADDR
51495: GO 51745
51497: LD_INT 30
51499: DOUBLE
51500: EQUAL
51501: IFTRUE 51505
51503: GO 51530
51505: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51506: LD_ADDR_VAR 0 3
51510: PUSH
51511: LD_INT 20
51513: PPUSH
51514: LD_VAR 0 1
51518: PPUSH
51519: CALL_OW 321
51523: PUSH
51524: LD_INT 2
51526: EQUAL
51527: ST_TO_ADDR
51528: GO 51745
51530: LD_INT 28
51532: DOUBLE
51533: EQUAL
51534: IFTRUE 51544
51536: LD_INT 21
51538: DOUBLE
51539: EQUAL
51540: IFTRUE 51544
51542: GO 51569
51544: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51545: LD_ADDR_VAR 0 3
51549: PUSH
51550: LD_INT 21
51552: PPUSH
51553: LD_VAR 0 1
51557: PPUSH
51558: CALL_OW 321
51562: PUSH
51563: LD_INT 2
51565: EQUAL
51566: ST_TO_ADDR
51567: GO 51745
51569: LD_INT 16
51571: DOUBLE
51572: EQUAL
51573: IFTRUE 51577
51575: GO 51604
51577: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51578: LD_ADDR_VAR 0 3
51582: PUSH
51583: LD_EXP 45
51587: PPUSH
51588: LD_VAR 0 1
51592: PPUSH
51593: CALL_OW 321
51597: PUSH
51598: LD_INT 2
51600: EQUAL
51601: ST_TO_ADDR
51602: GO 51745
51604: LD_INT 19
51606: DOUBLE
51607: EQUAL
51608: IFTRUE 51618
51610: LD_INT 23
51612: DOUBLE
51613: EQUAL
51614: IFTRUE 51618
51616: GO 51645
51618: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51619: LD_ADDR_VAR 0 3
51623: PUSH
51624: LD_EXP 44
51628: PPUSH
51629: LD_VAR 0 1
51633: PPUSH
51634: CALL_OW 321
51638: PUSH
51639: LD_INT 2
51641: EQUAL
51642: ST_TO_ADDR
51643: GO 51745
51645: LD_INT 17
51647: DOUBLE
51648: EQUAL
51649: IFTRUE 51653
51651: GO 51678
51653: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51654: LD_ADDR_VAR 0 3
51658: PUSH
51659: LD_INT 39
51661: PPUSH
51662: LD_VAR 0 1
51666: PPUSH
51667: CALL_OW 321
51671: PUSH
51672: LD_INT 2
51674: EQUAL
51675: ST_TO_ADDR
51676: GO 51745
51678: LD_INT 18
51680: DOUBLE
51681: EQUAL
51682: IFTRUE 51686
51684: GO 51711
51686: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51687: LD_ADDR_VAR 0 3
51691: PUSH
51692: LD_INT 40
51694: PPUSH
51695: LD_VAR 0 1
51699: PPUSH
51700: CALL_OW 321
51704: PUSH
51705: LD_INT 2
51707: EQUAL
51708: ST_TO_ADDR
51709: GO 51745
51711: LD_INT 27
51713: DOUBLE
51714: EQUAL
51715: IFTRUE 51719
51717: GO 51744
51719: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51720: LD_ADDR_VAR 0 3
51724: PUSH
51725: LD_INT 35
51727: PPUSH
51728: LD_VAR 0 1
51732: PPUSH
51733: CALL_OW 321
51737: PUSH
51738: LD_INT 2
51740: EQUAL
51741: ST_TO_ADDR
51742: GO 51745
51744: POP
// end ;
51745: LD_VAR 0 3
51749: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51750: LD_INT 0
51752: PPUSH
51753: PPUSH
51754: PPUSH
51755: PPUSH
51756: PPUSH
51757: PPUSH
51758: PPUSH
51759: PPUSH
51760: PPUSH
51761: PPUSH
51762: PPUSH
// result := false ;
51763: LD_ADDR_VAR 0 6
51767: PUSH
51768: LD_INT 0
51770: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51771: LD_VAR 0 1
51775: NOT
51776: PUSH
51777: LD_VAR 0 1
51781: PPUSH
51782: CALL_OW 266
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: IN
51797: NOT
51798: OR
51799: PUSH
51800: LD_VAR 0 2
51804: NOT
51805: OR
51806: PUSH
51807: LD_VAR 0 5
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: LD_INT 2
51820: PUSH
51821: LD_INT 3
51823: PUSH
51824: LD_INT 4
51826: PUSH
51827: LD_INT 5
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: IN
51838: NOT
51839: OR
51840: PUSH
51841: LD_VAR 0 3
51845: PPUSH
51846: LD_VAR 0 4
51850: PPUSH
51851: CALL_OW 488
51855: NOT
51856: OR
51857: IFFALSE 51861
// exit ;
51859: GO 52597
// side := GetSide ( depot ) ;
51861: LD_ADDR_VAR 0 9
51865: PUSH
51866: LD_VAR 0 1
51870: PPUSH
51871: CALL_OW 255
51875: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51876: LD_VAR 0 9
51880: PPUSH
51881: LD_VAR 0 2
51885: PPUSH
51886: CALL 51370 0 2
51890: NOT
51891: IFFALSE 51895
// exit ;
51893: GO 52597
// pom := GetBase ( depot ) ;
51895: LD_ADDR_VAR 0 10
51899: PUSH
51900: LD_VAR 0 1
51904: PPUSH
51905: CALL_OW 274
51909: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51910: LD_ADDR_VAR 0 11
51914: PUSH
51915: LD_VAR 0 2
51919: PPUSH
51920: LD_VAR 0 1
51924: PPUSH
51925: CALL_OW 248
51929: PPUSH
51930: CALL_OW 450
51934: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51935: LD_VAR 0 10
51939: PPUSH
51940: LD_INT 1
51942: PPUSH
51943: CALL_OW 275
51947: PUSH
51948: LD_VAR 0 11
51952: PUSH
51953: LD_INT 1
51955: ARRAY
51956: GREATEREQUAL
51957: PUSH
51958: LD_VAR 0 10
51962: PPUSH
51963: LD_INT 2
51965: PPUSH
51966: CALL_OW 275
51970: PUSH
51971: LD_VAR 0 11
51975: PUSH
51976: LD_INT 2
51978: ARRAY
51979: GREATEREQUAL
51980: AND
51981: PUSH
51982: LD_VAR 0 10
51986: PPUSH
51987: LD_INT 3
51989: PPUSH
51990: CALL_OW 275
51994: PUSH
51995: LD_VAR 0 11
51999: PUSH
52000: LD_INT 3
52002: ARRAY
52003: GREATEREQUAL
52004: AND
52005: NOT
52006: IFFALSE 52010
// exit ;
52008: GO 52597
// if GetBType ( depot ) = b_depot then
52010: LD_VAR 0 1
52014: PPUSH
52015: CALL_OW 266
52019: PUSH
52020: LD_INT 0
52022: EQUAL
52023: IFFALSE 52035
// dist := 28 else
52025: LD_ADDR_VAR 0 14
52029: PUSH
52030: LD_INT 28
52032: ST_TO_ADDR
52033: GO 52043
// dist := 36 ;
52035: LD_ADDR_VAR 0 14
52039: PUSH
52040: LD_INT 36
52042: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52043: LD_VAR 0 1
52047: PPUSH
52048: LD_VAR 0 3
52052: PPUSH
52053: LD_VAR 0 4
52057: PPUSH
52058: CALL_OW 297
52062: PUSH
52063: LD_VAR 0 14
52067: GREATER
52068: IFFALSE 52072
// exit ;
52070: GO 52597
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52072: LD_ADDR_VAR 0 12
52076: PUSH
52077: LD_VAR 0 2
52081: PPUSH
52082: LD_VAR 0 3
52086: PPUSH
52087: LD_VAR 0 4
52091: PPUSH
52092: LD_VAR 0 5
52096: PPUSH
52097: LD_VAR 0 1
52101: PPUSH
52102: CALL_OW 248
52106: PPUSH
52107: LD_INT 0
52109: PPUSH
52110: CALL 52602 0 6
52114: ST_TO_ADDR
// if not hexes then
52115: LD_VAR 0 12
52119: NOT
52120: IFFALSE 52124
// exit ;
52122: GO 52597
// hex := GetHexInfo ( x , y ) ;
52124: LD_ADDR_VAR 0 15
52128: PUSH
52129: LD_VAR 0 3
52133: PPUSH
52134: LD_VAR 0 4
52138: PPUSH
52139: CALL_OW 546
52143: ST_TO_ADDR
// if hex [ 1 ] then
52144: LD_VAR 0 15
52148: PUSH
52149: LD_INT 1
52151: ARRAY
52152: IFFALSE 52156
// exit ;
52154: GO 52597
// height := hex [ 2 ] ;
52156: LD_ADDR_VAR 0 13
52160: PUSH
52161: LD_VAR 0 15
52165: PUSH
52166: LD_INT 2
52168: ARRAY
52169: ST_TO_ADDR
// for i = 1 to hexes do
52170: LD_ADDR_VAR 0 7
52174: PUSH
52175: DOUBLE
52176: LD_INT 1
52178: DEC
52179: ST_TO_ADDR
52180: LD_VAR 0 12
52184: PUSH
52185: FOR_TO
52186: IFFALSE 52516
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52188: LD_VAR 0 12
52192: PUSH
52193: LD_VAR 0 7
52197: ARRAY
52198: PUSH
52199: LD_INT 1
52201: ARRAY
52202: PPUSH
52203: LD_VAR 0 12
52207: PUSH
52208: LD_VAR 0 7
52212: ARRAY
52213: PUSH
52214: LD_INT 2
52216: ARRAY
52217: PPUSH
52218: CALL_OW 488
52222: NOT
52223: PUSH
52224: LD_VAR 0 12
52228: PUSH
52229: LD_VAR 0 7
52233: ARRAY
52234: PUSH
52235: LD_INT 1
52237: ARRAY
52238: PPUSH
52239: LD_VAR 0 12
52243: PUSH
52244: LD_VAR 0 7
52248: ARRAY
52249: PUSH
52250: LD_INT 2
52252: ARRAY
52253: PPUSH
52254: CALL_OW 428
52258: PUSH
52259: LD_INT 0
52261: GREATER
52262: OR
52263: PUSH
52264: LD_VAR 0 12
52268: PUSH
52269: LD_VAR 0 7
52273: ARRAY
52274: PUSH
52275: LD_INT 1
52277: ARRAY
52278: PPUSH
52279: LD_VAR 0 12
52283: PUSH
52284: LD_VAR 0 7
52288: ARRAY
52289: PUSH
52290: LD_INT 2
52292: ARRAY
52293: PPUSH
52294: CALL_OW 351
52298: OR
52299: IFFALSE 52305
// exit ;
52301: POP
52302: POP
52303: GO 52597
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52305: LD_ADDR_VAR 0 8
52309: PUSH
52310: LD_VAR 0 12
52314: PUSH
52315: LD_VAR 0 7
52319: ARRAY
52320: PUSH
52321: LD_INT 1
52323: ARRAY
52324: PPUSH
52325: LD_VAR 0 12
52329: PUSH
52330: LD_VAR 0 7
52334: ARRAY
52335: PUSH
52336: LD_INT 2
52338: ARRAY
52339: PPUSH
52340: CALL_OW 546
52344: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52345: LD_VAR 0 8
52349: PUSH
52350: LD_INT 1
52352: ARRAY
52353: PUSH
52354: LD_VAR 0 8
52358: PUSH
52359: LD_INT 2
52361: ARRAY
52362: PUSH
52363: LD_VAR 0 13
52367: PUSH
52368: LD_INT 2
52370: PLUS
52371: GREATER
52372: OR
52373: PUSH
52374: LD_VAR 0 8
52378: PUSH
52379: LD_INT 2
52381: ARRAY
52382: PUSH
52383: LD_VAR 0 13
52387: PUSH
52388: LD_INT 2
52390: MINUS
52391: LESS
52392: OR
52393: PUSH
52394: LD_VAR 0 8
52398: PUSH
52399: LD_INT 3
52401: ARRAY
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: LD_INT 8
52408: PUSH
52409: LD_INT 9
52411: PUSH
52412: LD_INT 10
52414: PUSH
52415: LD_INT 11
52417: PUSH
52418: LD_INT 12
52420: PUSH
52421: LD_INT 13
52423: PUSH
52424: LD_INT 16
52426: PUSH
52427: LD_INT 17
52429: PUSH
52430: LD_INT 18
52432: PUSH
52433: LD_INT 19
52435: PUSH
52436: LD_INT 20
52438: PUSH
52439: LD_INT 21
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: IN
52457: NOT
52458: OR
52459: PUSH
52460: LD_VAR 0 8
52464: PUSH
52465: LD_INT 5
52467: ARRAY
52468: NOT
52469: OR
52470: PUSH
52471: LD_VAR 0 8
52475: PUSH
52476: LD_INT 6
52478: ARRAY
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: LD_INT 2
52485: PUSH
52486: LD_INT 7
52488: PUSH
52489: LD_INT 9
52491: PUSH
52492: LD_INT 10
52494: PUSH
52495: LD_INT 11
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: IN
52506: NOT
52507: OR
52508: IFFALSE 52514
// exit ;
52510: POP
52511: POP
52512: GO 52597
// end ;
52514: GO 52185
52516: POP
52517: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52518: LD_VAR 0 9
52522: PPUSH
52523: LD_VAR 0 3
52527: PPUSH
52528: LD_VAR 0 4
52532: PPUSH
52533: LD_INT 20
52535: PPUSH
52536: CALL 44543 0 4
52540: PUSH
52541: LD_INT 4
52543: ARRAY
52544: IFFALSE 52548
// exit ;
52546: GO 52597
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52548: LD_VAR 0 2
52552: PUSH
52553: LD_INT 29
52555: PUSH
52556: LD_INT 30
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: IN
52563: PUSH
52564: LD_VAR 0 3
52568: PPUSH
52569: LD_VAR 0 4
52573: PPUSH
52574: LD_VAR 0 9
52578: PPUSH
52579: CALL_OW 440
52583: NOT
52584: AND
52585: IFFALSE 52589
// exit ;
52587: GO 52597
// result := true ;
52589: LD_ADDR_VAR 0 6
52593: PUSH
52594: LD_INT 1
52596: ST_TO_ADDR
// end ;
52597: LD_VAR 0 6
52601: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52602: LD_INT 0
52604: PPUSH
52605: PPUSH
52606: PPUSH
52607: PPUSH
52608: PPUSH
52609: PPUSH
52610: PPUSH
52611: PPUSH
52612: PPUSH
52613: PPUSH
52614: PPUSH
52615: PPUSH
52616: PPUSH
52617: PPUSH
52618: PPUSH
52619: PPUSH
52620: PPUSH
52621: PPUSH
52622: PPUSH
52623: PPUSH
52624: PPUSH
52625: PPUSH
52626: PPUSH
52627: PPUSH
52628: PPUSH
52629: PPUSH
52630: PPUSH
52631: PPUSH
52632: PPUSH
52633: PPUSH
52634: PPUSH
52635: PPUSH
52636: PPUSH
52637: PPUSH
52638: PPUSH
52639: PPUSH
52640: PPUSH
52641: PPUSH
52642: PPUSH
52643: PPUSH
52644: PPUSH
52645: PPUSH
52646: PPUSH
52647: PPUSH
52648: PPUSH
52649: PPUSH
52650: PPUSH
52651: PPUSH
52652: PPUSH
52653: PPUSH
52654: PPUSH
52655: PPUSH
52656: PPUSH
52657: PPUSH
52658: PPUSH
52659: PPUSH
52660: PPUSH
52661: PPUSH
// result = [ ] ;
52662: LD_ADDR_VAR 0 7
52666: PUSH
52667: EMPTY
52668: ST_TO_ADDR
// temp_list = [ ] ;
52669: LD_ADDR_VAR 0 9
52673: PUSH
52674: EMPTY
52675: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52676: LD_VAR 0 4
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: LD_INT 2
52689: PUSH
52690: LD_INT 3
52692: PUSH
52693: LD_INT 4
52695: PUSH
52696: LD_INT 5
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: IN
52707: NOT
52708: PUSH
52709: LD_VAR 0 1
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: IN
52724: PUSH
52725: LD_VAR 0 5
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: LD_INT 2
52735: PUSH
52736: LD_INT 3
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: LIST
52743: IN
52744: NOT
52745: AND
52746: OR
52747: IFFALSE 52751
// exit ;
52749: GO 71142
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52751: LD_VAR 0 1
52755: PUSH
52756: LD_INT 6
52758: PUSH
52759: LD_INT 7
52761: PUSH
52762: LD_INT 8
52764: PUSH
52765: LD_INT 13
52767: PUSH
52768: LD_INT 12
52770: PUSH
52771: LD_INT 15
52773: PUSH
52774: LD_INT 11
52776: PUSH
52777: LD_INT 14
52779: PUSH
52780: LD_INT 10
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: IN
52794: IFFALSE 52804
// btype = b_lab ;
52796: LD_ADDR_VAR 0 1
52800: PUSH
52801: LD_INT 6
52803: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52804: LD_VAR 0 6
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: LD_INT 2
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: LIST
52822: IN
52823: NOT
52824: PUSH
52825: LD_VAR 0 1
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: LD_INT 3
52841: PUSH
52842: LD_INT 6
52844: PUSH
52845: LD_INT 36
52847: PUSH
52848: LD_INT 4
52850: PUSH
52851: LD_INT 5
52853: PUSH
52854: LD_INT 31
52856: PUSH
52857: LD_INT 32
52859: PUSH
52860: LD_INT 33
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: IN
52876: NOT
52877: PUSH
52878: LD_VAR 0 6
52882: PUSH
52883: LD_INT 1
52885: EQUAL
52886: AND
52887: OR
52888: PUSH
52889: LD_VAR 0 1
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: LD_INT 3
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: IN
52904: NOT
52905: PUSH
52906: LD_VAR 0 6
52910: PUSH
52911: LD_INT 2
52913: EQUAL
52914: AND
52915: OR
52916: IFFALSE 52926
// mode = 0 ;
52918: LD_ADDR_VAR 0 6
52922: PUSH
52923: LD_INT 0
52925: ST_TO_ADDR
// case mode of 0 :
52926: LD_VAR 0 6
52930: PUSH
52931: LD_INT 0
52933: DOUBLE
52934: EQUAL
52935: IFTRUE 52939
52937: GO 64392
52939: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52940: LD_ADDR_VAR 0 11
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: LD_INT 2
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: LD_INT 2
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: LD_INT 1
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: LD_INT 3
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: LD_INT 3
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: LD_INT 2
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53133: LD_ADDR_VAR 0 12
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 1
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 2
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 2
53256: NEG
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 2
53267: NEG
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 2
53279: NEG
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 3
53290: NEG
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 3
53301: NEG
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53329: LD_ADDR_VAR 0 13
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: LD_INT 2
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: PUSH
53433: LD_INT 2
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 2
53452: NEG
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 2
53464: NEG
53465: PUSH
53466: LD_INT 2
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 2
53476: NEG
53477: PUSH
53478: LD_INT 3
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 3
53488: NEG
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 3
53500: NEG
53501: PUSH
53502: LD_INT 3
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53528: LD_ADDR_VAR 0 14
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: LD_INT 2
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: LD_INT 3
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 3
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53724: LD_ADDR_VAR 0 15
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 1
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: LD_INT 1
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 2
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 2
53847: NEG
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 2
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 3
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 3
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53917: LD_ADDR_VAR 0 16
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: LD_INT 1
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: LD_INT 2
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 2
54040: NEG
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 2
54052: NEG
54053: PUSH
54054: LD_INT 2
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 3
54064: PUSH
54065: LD_INT 2
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 3
54074: PUSH
54075: LD_INT 3
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: LD_INT 3
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54110: LD_ADDR_VAR 0 17
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: LD_INT 2
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 2
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: LD_INT 2
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: LD_INT 2
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 2
54286: NEG
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: NEG
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 2
54309: NEG
54310: PUSH
54311: LD_INT 2
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54340: LD_ADDR_VAR 0 18
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: LD_INT 2
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 2
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: LD_INT 2
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 2
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 2
54516: NEG
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: NEG
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: NEG
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54570: LD_ADDR_VAR 0 19
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: LD_INT 1
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: LD_INT 2
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 2
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 2
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 2
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: LD_INT 2
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 2
54746: NEG
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: NEG
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: LD_INT 2
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54800: LD_ADDR_VAR 0 20
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 1
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: LD_INT 2
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 2
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 2
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 2
54935: PUSH
54936: LD_INT 2
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: LD_INT 2
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: LD_INT 2
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 2
54976: NEG
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 2
54987: NEG
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 2
54999: NEG
55000: PUSH
55001: LD_INT 2
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55030: LD_ADDR_VAR 0 21
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: LD_INT 1
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 2
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: LD_INT 2
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 2
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 2
55217: NEG
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 2
55229: NEG
55230: PUSH
55231: LD_INT 2
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55260: LD_ADDR_VAR 0 22
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: NEG
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 1
55341: NEG
55342: PUSH
55343: LD_INT 2
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: LD_INT 1
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 2
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 2
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 2
55395: PUSH
55396: LD_INT 2
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: LD_INT 2
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: LD_INT 2
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 2
55447: NEG
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 2
55459: NEG
55460: PUSH
55461: LD_INT 2
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55490: LD_ADDR_VAR 0 23
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: LD_INT 1
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: LD_INT 2
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: LD_INT 2
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 2
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 2
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: LD_INT 2
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: LD_INT 2
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: LD_INT 2
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: NEG
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: NEG
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 2
55689: NEG
55690: PUSH
55691: LD_INT 2
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: LD_INT 3
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: LD_INT 3
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: LD_INT 2
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 2
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55770: LD_ADDR_VAR 0 24
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: LD_INT 2
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: LD_INT 2
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 2
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 2
55905: PUSH
55906: LD_INT 2
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 1
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: LD_INT 2
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 2
55946: NEG
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 2
55957: NEG
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 2
55969: NEG
55970: PUSH
55971: LD_INT 2
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: LD_INT 2
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 2
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 3
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 3
56013: PUSH
56014: LD_INT 2
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56046: LD_ADDR_VAR 0 25
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: LD_INT 1
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: LD_INT 0
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: LD_INT 1
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: LD_INT 2
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: LD_INT 2
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 2
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 2
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 2
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: LD_INT 2
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: LD_INT 2
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 2
56222: NEG
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 2
56233: NEG
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 2
56245: NEG
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 3
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: LD_INT 2
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: LD_INT 3
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: PUSH
56288: LD_INT 3
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56320: LD_ADDR_VAR 0 26
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: NEG
56402: PUSH
56403: LD_INT 2
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: LD_INT 2
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: LD_INT 0
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 2
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: LD_INT 2
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 2
56496: NEG
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 2
56507: NEG
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: NEG
56520: PUSH
56521: LD_INT 2
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: LD_INT 3
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: LD_INT 3
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: LD_INT 2
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: NEG
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56596: LD_ADDR_VAR 0 27
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: LD_INT 2
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: LD_INT 2
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 2
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 2
56731: PUSH
56732: LD_INT 2
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: LD_INT 2
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 2
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 2
56772: NEG
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 2
56795: NEG
56796: PUSH
56797: LD_INT 2
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 3
56829: NEG
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 3
56841: NEG
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56876: LD_ADDR_VAR 0 28
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: LD_INT 1
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: PUSH
56959: LD_INT 2
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: LD_INT 2
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 2
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 2
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 2
57011: PUSH
57012: LD_INT 2
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: PUSH
57022: LD_INT 2
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: LD_INT 2
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 2
57052: NEG
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 2
57063: NEG
57064: PUSH
57065: LD_INT 1
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 2
57075: NEG
57076: PUSH
57077: LD_INT 2
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: NEG
57088: PUSH
57089: LD_INT 3
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: LD_INT 3
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 3
57111: NEG
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 3
57123: NEG
57124: PUSH
57125: LD_INT 2
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57158: LD_ADDR_VAR 0 29
57162: PUSH
57163: LD_INT 0
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: LD_INT 0
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: LD_INT 2
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 2
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: LD_INT 2
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 2
57324: NEG
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 2
57336: NEG
57337: PUSH
57338: LD_INT 2
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 2
57348: NEG
57349: PUSH
57350: LD_INT 3
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 2
57360: PUSH
57361: LD_INT 1
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 3
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: LD_INT 3
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: NEG
57392: PUSH
57393: LD_INT 2
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 3
57402: NEG
57403: PUSH
57404: LD_INT 2
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57437: LD_ADDR_VAR 0 30
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: LD_INT 1
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: LD_INT 2
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: LD_INT 1
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 2
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 2
57603: NEG
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 2
57614: NEG
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: LD_INT 3
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: LD_INT 2
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 3
57649: PUSH
57650: LD_INT 2
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 2
57659: PUSH
57660: LD_INT 3
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 2
57669: NEG
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 3
57680: NEG
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57715: LD_ADDR_VAR 0 31
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 1
57784: NEG
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: LD_INT 2
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 1
57808: PUSH
57809: LD_INT 1
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 2
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 2
57829: PUSH
57830: LD_INT 1
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 2
57839: PUSH
57840: LD_INT 2
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: LD_INT 2
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: LD_INT 2
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 2
57880: NEG
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 2
57892: NEG
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 2
57904: NEG
57905: PUSH
57906: LD_INT 3
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 2
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 3
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: LD_INT 3
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: LD_INT 2
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 3
57958: NEG
57959: PUSH
57960: LD_INT 2
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57993: LD_ADDR_VAR 0 32
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 1
58031: PUSH
58032: LD_INT 1
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: LD_INT 0
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 1
58074: NEG
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 0
58086: PUSH
58087: LD_INT 2
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 2
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 2
58118: PUSH
58119: LD_INT 2
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: LD_INT 2
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 2
58159: NEG
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: LD_INT 3
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: LD_INT 2
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 3
58205: PUSH
58206: LD_INT 2
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: LD_INT 3
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 2
58225: NEG
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 3
58236: NEG
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58271: LD_ADDR_VAR 0 33
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: LD_INT 2
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 1
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 2
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: LD_INT 2
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: LD_INT 2
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 2
58426: NEG
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 2
58437: NEG
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 2
58449: NEG
58450: PUSH
58451: LD_INT 2
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 2
58461: NEG
58462: PUSH
58463: LD_INT 3
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 2
58473: PUSH
58474: LD_INT 1
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 3
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: LD_INT 3
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: LD_INT 2
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 3
58515: NEG
58516: PUSH
58517: LD_INT 2
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58550: LD_ADDR_VAR 0 34
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: LD_INT 1
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 1
58608: NEG
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: NEG
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: LD_INT 2
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: LD_INT 2
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 2
58675: PUSH
58676: LD_INT 2
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: LD_INT 2
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 1
58695: NEG
58696: PUSH
58697: LD_INT 1
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 2
58706: NEG
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 2
58717: NEG
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 2
58729: NEG
58730: PUSH
58731: LD_INT 2
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: LD_INT 3
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: LD_INT 2
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 3
58764: PUSH
58765: LD_INT 2
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: LD_INT 3
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 2
58784: NEG
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 3
58795: NEG
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58830: LD_ADDR_VAR 0 35
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 1
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: LD_INT 1
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 2
58921: NEG
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58942: LD_ADDR_VAR 0 36
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: LD_INT 2
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: LD_INT 2
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59054: LD_ADDR_VAR 0 37
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 1
59112: NEG
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: LD_INT 1
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: LD_INT 1
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: NEG
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59166: LD_ADDR_VAR 0 38
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: NEG
59236: PUSH
59237: LD_INT 1
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 2
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 2
59257: NEG
59258: PUSH
59259: LD_INT 1
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59278: LD_ADDR_VAR 0 39
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: LD_INT 1
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 1
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: LD_INT 1
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: LD_INT 2
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59390: LD_ADDR_VAR 0 40
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 1
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59502: LD_ADDR_VAR 0 41
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 0
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: LD_INT 1
59575: NEG
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: LD_INT 2
59587: NEG
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 2
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 2
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 2
59626: PUSH
59627: LD_INT 2
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 2
59657: NEG
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 2
59668: NEG
59669: PUSH
59670: LD_INT 1
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 2
59680: NEG
59681: PUSH
59682: LD_INT 2
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 2
59692: NEG
59693: PUSH
59694: LD_INT 3
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 2
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 3
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 3
59725: PUSH
59726: LD_INT 1
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 3
59735: PUSH
59736: LD_INT 2
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 3
59745: PUSH
59746: LD_INT 3
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 2
59755: PUSH
59756: LD_INT 3
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 3
59776: NEG
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 3
59787: NEG
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 3
59799: NEG
59800: PUSH
59801: LD_INT 2
59803: NEG
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 3
59811: NEG
59812: PUSH
59813: LD_INT 3
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59852: LD_ADDR_VAR 0 42
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: LD_INT 1
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 1
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 1
59910: NEG
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 1
59921: NEG
59922: PUSH
59923: LD_INT 1
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: LD_INT 2
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: LD_INT 2
59948: NEG
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: LD_INT 1
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: LD_INT 2
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: LD_INT 2
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: LD_INT 2
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: NEG
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 2
60018: NEG
60019: PUSH
60020: LD_INT 1
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 2
60030: NEG
60031: PUSH
60032: LD_INT 2
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 2
60042: NEG
60043: PUSH
60044: LD_INT 3
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 1
60054: NEG
60055: PUSH
60056: LD_INT 3
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 0
60066: PUSH
60067: LD_INT 3
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 1
60077: PUSH
60078: LD_INT 2
60080: NEG
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 3
60088: PUSH
60089: LD_INT 2
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 3
60098: PUSH
60099: LD_INT 3
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 2
60108: PUSH
60109: LD_INT 3
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: LD_INT 3
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 0
60128: PUSH
60129: LD_INT 3
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 1
60138: NEG
60139: PUSH
60140: LD_INT 2
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 3
60149: NEG
60150: PUSH
60151: LD_INT 2
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 3
60161: NEG
60162: PUSH
60163: LD_INT 3
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60202: LD_ADDR_VAR 0 43
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: LD_INT 0
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: LD_INT 1
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: LD_INT 1
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 1
60260: NEG
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 1
60271: NEG
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 1
60283: NEG
60284: PUSH
60285: LD_INT 2
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: LD_INT 2
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 2
60317: PUSH
60318: LD_INT 0
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 2
60327: PUSH
60328: LD_INT 1
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: LD_INT 2
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: LD_INT 2
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 1
60357: NEG
60358: PUSH
60359: LD_INT 1
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 2
60368: NEG
60369: PUSH
60370: LD_INT 0
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 2
60379: NEG
60380: PUSH
60381: LD_INT 1
60383: NEG
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: LD_INT 3
60395: NEG
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 0
60403: PUSH
60404: LD_INT 3
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: LD_INT 2
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 2
60425: PUSH
60426: LD_INT 1
60428: NEG
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 3
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 3
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: LD_INT 3
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: LD_INT 3
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: NEG
60477: PUSH
60478: LD_INT 2
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 2
60487: NEG
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 3
60498: NEG
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 3
60509: NEG
60510: PUSH
60511: LD_INT 1
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60550: LD_ADDR_VAR 0 44
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 1
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 1
60631: NEG
60632: PUSH
60633: LD_INT 2
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 1
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 2
60654: PUSH
60655: LD_INT 0
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 2
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 2
60674: PUSH
60675: LD_INT 2
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 1
60684: PUSH
60685: LD_INT 2
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: LD_INT 1
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 2
60705: NEG
60706: PUSH
60707: LD_INT 0
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 2
60716: NEG
60717: PUSH
60718: LD_INT 1
60720: NEG
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 2
60728: NEG
60729: PUSH
60730: LD_INT 2
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 2
60740: NEG
60741: PUSH
60742: LD_INT 3
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: LD_INT 1
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 3
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 3
60773: PUSH
60774: LD_INT 1
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 3
60783: PUSH
60784: LD_INT 2
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 3
60793: PUSH
60794: LD_INT 3
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 2
60803: PUSH
60804: LD_INT 3
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 2
60813: NEG
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 3
60824: NEG
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 3
60835: NEG
60836: PUSH
60837: LD_INT 1
60839: NEG
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 3
60847: NEG
60848: PUSH
60849: LD_INT 2
60851: NEG
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 3
60859: NEG
60860: PUSH
60861: LD_INT 3
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60900: LD_ADDR_VAR 0 45
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: LD_INT 0
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 0
60917: PUSH
60918: LD_INT 1
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 1
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 0
60948: PUSH
60949: LD_INT 1
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 1
60958: NEG
60959: PUSH
60960: LD_INT 0
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 1
60969: NEG
60970: PUSH
60971: LD_INT 1
60973: NEG
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 1
60981: NEG
60982: PUSH
60983: LD_INT 2
60985: NEG
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: LD_INT 2
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 1
61004: PUSH
61005: LD_INT 1
61007: NEG
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 2
61015: PUSH
61016: LD_INT 1
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 2
61025: PUSH
61026: LD_INT 2
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: LD_INT 2
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 0
61045: PUSH
61046: LD_INT 2
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 1
61055: NEG
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 2
61066: NEG
61067: PUSH
61068: LD_INT 1
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 2
61078: NEG
61079: PUSH
61080: LD_INT 2
61082: NEG
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 2
61090: NEG
61091: PUSH
61092: LD_INT 3
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 1
61102: NEG
61103: PUSH
61104: LD_INT 3
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: LD_INT 3
61117: NEG
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 1
61125: PUSH
61126: LD_INT 2
61128: NEG
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 3
61136: PUSH
61137: LD_INT 2
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 3
61146: PUSH
61147: LD_INT 3
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 2
61156: PUSH
61157: LD_INT 3
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 1
61166: PUSH
61167: LD_INT 3
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: LD_INT 3
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 1
61186: NEG
61187: PUSH
61188: LD_INT 2
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 3
61197: NEG
61198: PUSH
61199: LD_INT 2
61201: NEG
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 3
61209: NEG
61210: PUSH
61211: LD_INT 3
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61250: LD_ADDR_VAR 0 46
61254: PUSH
61255: LD_INT 0
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 1
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 0
61298: PUSH
61299: LD_INT 1
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 1
61308: NEG
61309: PUSH
61310: LD_INT 0
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 1
61319: NEG
61320: PUSH
61321: LD_INT 1
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 1
61331: NEG
61332: PUSH
61333: LD_INT 2
61335: NEG
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: LD_INT 2
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: PUSH
61355: LD_INT 1
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 2
61365: PUSH
61366: LD_INT 0
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 2
61375: PUSH
61376: LD_INT 1
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 1
61385: PUSH
61386: LD_INT 2
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: LD_INT 2
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 1
61405: NEG
61406: PUSH
61407: LD_INT 1
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 2
61416: NEG
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 2
61427: NEG
61428: PUSH
61429: LD_INT 1
61431: NEG
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 1
61439: NEG
61440: PUSH
61441: LD_INT 3
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 0
61451: PUSH
61452: LD_INT 3
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: LD_INT 2
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 2
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 3
61484: PUSH
61485: LD_INT 0
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 3
61494: PUSH
61495: LD_INT 1
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: LD_INT 3
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: LD_INT 3
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 1
61524: NEG
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 2
61535: NEG
61536: PUSH
61537: LD_INT 1
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 3
61546: NEG
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 3
61557: NEG
61558: PUSH
61559: LD_INT 1
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61598: LD_ADDR_VAR 0 47
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 1
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: LD_INT 1
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: LD_INT 1
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 1
61656: NEG
61657: PUSH
61658: LD_INT 0
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: NEG
61680: PUSH
61681: LD_INT 2
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: LD_INT 2
61694: NEG
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: LD_INT 1
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 2
61713: NEG
61714: PUSH
61715: LD_INT 1
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 2
61725: NEG
61726: PUSH
61727: LD_INT 2
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61749: LD_ADDR_VAR 0 48
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: LD_INT 1
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 1
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: PUSH
61788: LD_INT 1
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: LD_INT 1
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 1
61807: NEG
61808: PUSH
61809: LD_INT 0
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 1
61818: NEG
61819: PUSH
61820: LD_INT 1
61822: NEG
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: LD_INT 2
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: LD_INT 2
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: LD_INT 1
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 2
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 2
61874: PUSH
61875: LD_INT 1
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61896: LD_ADDR_VAR 0 49
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: LD_INT 0
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 0
61913: PUSH
61914: LD_INT 1
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 1
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 0
61944: PUSH
61945: LD_INT 1
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 1
61954: NEG
61955: PUSH
61956: LD_INT 0
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 1
61965: NEG
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 1
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 2
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 2
61998: PUSH
61999: LD_INT 1
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 2
62008: PUSH
62009: LD_INT 2
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 1
62018: PUSH
62019: LD_INT 2
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62040: LD_ADDR_VAR 0 50
62044: PUSH
62045: LD_INT 0
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: PUSH
62079: LD_INT 1
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 0
62088: PUSH
62089: LD_INT 1
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 1
62109: NEG
62110: PUSH
62111: LD_INT 1
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 2
62121: PUSH
62122: LD_INT 1
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 2
62131: PUSH
62132: LD_INT 2
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 1
62141: PUSH
62142: LD_INT 2
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 0
62151: PUSH
62152: LD_INT 2
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 1
62161: NEG
62162: PUSH
62163: LD_INT 1
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62184: LD_ADDR_VAR 0 51
62188: PUSH
62189: LD_INT 0
62191: PUSH
62192: LD_INT 0
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 0
62201: PUSH
62202: LD_INT 1
62204: NEG
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 1
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 1
62222: PUSH
62223: LD_INT 1
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 0
62232: PUSH
62233: LD_INT 1
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 1
62242: NEG
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 1
62253: NEG
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: LD_INT 2
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 0
62275: PUSH
62276: LD_INT 2
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 1
62285: NEG
62286: PUSH
62287: LD_INT 1
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 2
62296: NEG
62297: PUSH
62298: LD_INT 0
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 2
62307: NEG
62308: PUSH
62309: LD_INT 1
62311: NEG
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62331: LD_ADDR_VAR 0 52
62335: PUSH
62336: LD_INT 0
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 0
62348: PUSH
62349: LD_INT 1
62351: NEG
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: LD_INT 1
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 0
62379: PUSH
62380: LD_INT 1
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 1
62389: NEG
62390: PUSH
62391: LD_INT 0
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 1
62400: NEG
62401: PUSH
62402: LD_INT 1
62404: NEG
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 1
62412: NEG
62413: PUSH
62414: LD_INT 2
62416: NEG
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: NEG
62425: PUSH
62426: LD_INT 1
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 2
62435: NEG
62436: PUSH
62437: LD_INT 0
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 2
62446: NEG
62447: PUSH
62448: LD_INT 1
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 2
62458: NEG
62459: PUSH
62460: LD_INT 2
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62482: LD_ADDR_VAR 0 53
62486: PUSH
62487: LD_INT 0
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 0
62499: PUSH
62500: LD_INT 1
62502: NEG
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: LD_INT 0
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 1
62520: PUSH
62521: LD_INT 1
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 0
62530: PUSH
62531: LD_INT 1
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: LD_INT 0
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 1
62551: NEG
62552: PUSH
62553: LD_INT 1
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: LD_INT 2
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 0
62575: PUSH
62576: LD_INT 2
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: LD_INT 1
62589: NEG
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 2
62597: PUSH
62598: LD_INT 0
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 2
62607: PUSH
62608: LD_INT 1
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 2
62617: PUSH
62618: LD_INT 2
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 1
62627: PUSH
62628: LD_INT 2
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 0
62637: PUSH
62638: LD_INT 2
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 1
62647: NEG
62648: PUSH
62649: LD_INT 1
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 2
62658: NEG
62659: PUSH
62660: LD_INT 0
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 2
62669: NEG
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 2
62681: NEG
62682: PUSH
62683: LD_INT 2
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62712: LD_ADDR_VAR 0 54
62716: PUSH
62717: LD_INT 0
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 0
62729: PUSH
62730: LD_INT 1
62732: NEG
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 1
62740: PUSH
62741: LD_INT 0
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 1
62750: PUSH
62751: LD_INT 1
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 0
62760: PUSH
62761: LD_INT 1
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 1
62770: NEG
62771: PUSH
62772: LD_INT 0
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 1
62781: NEG
62782: PUSH
62783: LD_INT 1
62785: NEG
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 1
62793: NEG
62794: PUSH
62795: LD_INT 2
62797: NEG
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 0
62805: PUSH
62806: LD_INT 2
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 1
62816: PUSH
62817: LD_INT 1
62819: NEG
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 2
62827: PUSH
62828: LD_INT 0
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 2
62837: PUSH
62838: LD_INT 1
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 2
62847: PUSH
62848: LD_INT 2
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 1
62857: PUSH
62858: LD_INT 2
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 0
62867: PUSH
62868: LD_INT 2
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 1
62877: NEG
62878: PUSH
62879: LD_INT 1
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 2
62888: NEG
62889: PUSH
62890: LD_INT 0
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 2
62899: NEG
62900: PUSH
62901: LD_INT 1
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 2
62911: NEG
62912: PUSH
62913: LD_INT 2
62915: NEG
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62942: LD_ADDR_VAR 0 55
62946: PUSH
62947: LD_INT 0
62949: PUSH
62950: LD_INT 0
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: LD_INT 1
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: LD_INT 0
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 1
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: LD_INT 1
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 1
63000: NEG
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 1
63011: NEG
63012: PUSH
63013: LD_INT 1
63015: NEG
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 1
63023: NEG
63024: PUSH
63025: LD_INT 2
63027: NEG
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 0
63035: PUSH
63036: LD_INT 2
63038: NEG
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 1
63046: PUSH
63047: LD_INT 1
63049: NEG
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 2
63057: PUSH
63058: LD_INT 0
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 2
63067: PUSH
63068: LD_INT 1
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 2
63077: PUSH
63078: LD_INT 2
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 1
63087: PUSH
63088: LD_INT 2
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 0
63097: PUSH
63098: LD_INT 2
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 1
63107: NEG
63108: PUSH
63109: LD_INT 1
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 2
63118: NEG
63119: PUSH
63120: LD_INT 0
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 2
63129: NEG
63130: PUSH
63131: LD_INT 1
63133: NEG
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 2
63141: NEG
63142: PUSH
63143: LD_INT 2
63145: NEG
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63172: LD_ADDR_VAR 0 56
63176: PUSH
63177: LD_INT 0
63179: PUSH
63180: LD_INT 0
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 0
63189: PUSH
63190: LD_INT 1
63192: NEG
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 1
63200: PUSH
63201: LD_INT 0
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 1
63210: PUSH
63211: LD_INT 1
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 0
63220: PUSH
63221: LD_INT 1
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 1
63230: NEG
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 1
63241: NEG
63242: PUSH
63243: LD_INT 1
63245: NEG
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 1
63253: NEG
63254: PUSH
63255: LD_INT 2
63257: NEG
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 0
63265: PUSH
63266: LD_INT 2
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 1
63276: PUSH
63277: LD_INT 1
63279: NEG
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 2
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 2
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 2
63307: PUSH
63308: LD_INT 2
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: LD_INT 2
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 0
63327: PUSH
63328: LD_INT 2
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 1
63337: NEG
63338: PUSH
63339: LD_INT 1
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 2
63348: NEG
63349: PUSH
63350: LD_INT 0
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 2
63359: NEG
63360: PUSH
63361: LD_INT 1
63363: NEG
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 2
63371: NEG
63372: PUSH
63373: LD_INT 2
63375: NEG
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63402: LD_ADDR_VAR 0 57
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: LD_INT 0
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 0
63419: PUSH
63420: LD_INT 1
63422: NEG
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 1
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 1
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: LD_INT 1
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 1
63460: NEG
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 1
63471: NEG
63472: PUSH
63473: LD_INT 1
63475: NEG
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 1
63483: NEG
63484: PUSH
63485: LD_INT 2
63487: NEG
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: LD_INT 2
63498: NEG
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 1
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 2
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 2
63527: PUSH
63528: LD_INT 1
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 2
63537: PUSH
63538: LD_INT 2
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 1
63547: PUSH
63548: LD_INT 2
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 0
63557: PUSH
63558: LD_INT 2
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 1
63567: NEG
63568: PUSH
63569: LD_INT 1
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 2
63578: NEG
63579: PUSH
63580: LD_INT 0
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 2
63589: NEG
63590: PUSH
63591: LD_INT 1
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 2
63601: NEG
63602: PUSH
63603: LD_INT 2
63605: NEG
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63632: LD_ADDR_VAR 0 58
63636: PUSH
63637: LD_INT 0
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 0
63649: PUSH
63650: LD_INT 1
63652: NEG
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 1
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 0
63680: PUSH
63681: LD_INT 1
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 1
63690: NEG
63691: PUSH
63692: LD_INT 0
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 1
63701: NEG
63702: PUSH
63703: LD_INT 1
63705: NEG
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 1
63713: NEG
63714: PUSH
63715: LD_INT 2
63717: NEG
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 0
63725: PUSH
63726: LD_INT 2
63728: NEG
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 1
63736: PUSH
63737: LD_INT 1
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 2
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 2
63757: PUSH
63758: LD_INT 1
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 2
63767: PUSH
63768: LD_INT 2
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: LD_INT 2
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: LD_INT 2
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 1
63797: NEG
63798: PUSH
63799: LD_INT 1
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 2
63808: NEG
63809: PUSH
63810: LD_INT 0
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 2
63819: NEG
63820: PUSH
63821: LD_INT 1
63823: NEG
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 2
63831: NEG
63832: PUSH
63833: LD_INT 2
63835: NEG
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63862: LD_ADDR_VAR 0 59
63866: PUSH
63867: LD_INT 0
63869: PUSH
63870: LD_INT 0
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: LD_INT 1
63882: NEG
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 1
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 1
63900: PUSH
63901: LD_INT 1
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 0
63910: PUSH
63911: LD_INT 1
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 1
63920: NEG
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 1
63931: NEG
63932: PUSH
63933: LD_INT 1
63935: NEG
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63950: LD_ADDR_VAR 0 60
63954: PUSH
63955: LD_INT 0
63957: PUSH
63958: LD_INT 0
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 0
63967: PUSH
63968: LD_INT 1
63970: NEG
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 1
63978: PUSH
63979: LD_INT 0
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 1
63988: PUSH
63989: LD_INT 1
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 1
64008: NEG
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 1
64019: NEG
64020: PUSH
64021: LD_INT 1
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64038: LD_ADDR_VAR 0 61
64042: PUSH
64043: LD_INT 0
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 0
64055: PUSH
64056: LD_INT 1
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 1
64066: PUSH
64067: LD_INT 0
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 1
64076: PUSH
64077: LD_INT 1
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 0
64086: PUSH
64087: LD_INT 1
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 1
64096: NEG
64097: PUSH
64098: LD_INT 0
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 1
64107: NEG
64108: PUSH
64109: LD_INT 1
64111: NEG
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64126: LD_ADDR_VAR 0 62
64130: PUSH
64131: LD_INT 0
64133: PUSH
64134: LD_INT 0
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 0
64143: PUSH
64144: LD_INT 1
64146: NEG
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: LD_INT 0
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 1
64164: PUSH
64165: LD_INT 1
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 0
64174: PUSH
64175: LD_INT 1
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 1
64184: NEG
64185: PUSH
64186: LD_INT 0
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 1
64195: NEG
64196: PUSH
64197: LD_INT 1
64199: NEG
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64214: LD_ADDR_VAR 0 63
64218: PUSH
64219: LD_INT 0
64221: PUSH
64222: LD_INT 0
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 0
64231: PUSH
64232: LD_INT 1
64234: NEG
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 1
64242: PUSH
64243: LD_INT 0
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 1
64252: PUSH
64253: LD_INT 1
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 0
64262: PUSH
64263: LD_INT 1
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 1
64283: NEG
64284: PUSH
64285: LD_INT 1
64287: NEG
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64302: LD_ADDR_VAR 0 64
64306: PUSH
64307: LD_INT 0
64309: PUSH
64310: LD_INT 0
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 0
64319: PUSH
64320: LD_INT 1
64322: NEG
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 1
64330: PUSH
64331: LD_INT 0
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 1
64340: PUSH
64341: LD_INT 1
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 0
64350: PUSH
64351: LD_INT 1
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 1
64360: NEG
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 1
64371: NEG
64372: PUSH
64373: LD_INT 1
64375: NEG
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: ST_TO_ADDR
// end ; 1 :
64390: GO 70287
64392: LD_INT 1
64394: DOUBLE
64395: EQUAL
64396: IFTRUE 64400
64398: GO 67023
64400: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64401: LD_ADDR_VAR 0 11
64405: PUSH
64406: LD_INT 1
64408: NEG
64409: PUSH
64410: LD_INT 3
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 0
64420: PUSH
64421: LD_INT 3
64423: NEG
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 1
64431: PUSH
64432: LD_INT 2
64434: NEG
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: LIST
64444: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64445: LD_ADDR_VAR 0 12
64449: PUSH
64450: LD_INT 2
64452: PUSH
64453: LD_INT 1
64455: NEG
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 3
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 3
64473: PUSH
64474: LD_INT 1
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: LIST
64485: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64486: LD_ADDR_VAR 0 13
64490: PUSH
64491: LD_INT 3
64493: PUSH
64494: LD_INT 2
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 3
64503: PUSH
64504: LD_INT 3
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 2
64513: PUSH
64514: LD_INT 3
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: LIST
64525: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64526: LD_ADDR_VAR 0 14
64530: PUSH
64531: LD_INT 1
64533: PUSH
64534: LD_INT 3
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 0
64543: PUSH
64544: LD_INT 3
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 1
64553: NEG
64554: PUSH
64555: LD_INT 2
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: LIST
64566: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64567: LD_ADDR_VAR 0 15
64571: PUSH
64572: LD_INT 2
64574: NEG
64575: PUSH
64576: LD_INT 1
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 3
64585: NEG
64586: PUSH
64587: LD_INT 0
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 3
64596: NEG
64597: PUSH
64598: LD_INT 1
64600: NEG
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: LIST
64610: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64611: LD_ADDR_VAR 0 16
64615: PUSH
64616: LD_INT 2
64618: NEG
64619: PUSH
64620: LD_INT 3
64622: NEG
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 3
64630: NEG
64631: PUSH
64632: LD_INT 2
64634: NEG
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 3
64642: NEG
64643: PUSH
64644: LD_INT 3
64646: NEG
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: LIST
64656: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64657: LD_ADDR_VAR 0 17
64661: PUSH
64662: LD_INT 1
64664: NEG
64665: PUSH
64666: LD_INT 3
64668: NEG
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 0
64676: PUSH
64677: LD_INT 3
64679: NEG
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 1
64687: PUSH
64688: LD_INT 2
64690: NEG
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: LIST
64700: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64701: LD_ADDR_VAR 0 18
64705: PUSH
64706: LD_INT 2
64708: PUSH
64709: LD_INT 1
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 3
64719: PUSH
64720: LD_INT 0
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 3
64729: PUSH
64730: LD_INT 1
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: LIST
64741: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64742: LD_ADDR_VAR 0 19
64746: PUSH
64747: LD_INT 3
64749: PUSH
64750: LD_INT 2
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 3
64759: PUSH
64760: LD_INT 3
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 2
64769: PUSH
64770: LD_INT 3
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: LIST
64781: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64782: LD_ADDR_VAR 0 20
64786: PUSH
64787: LD_INT 1
64789: PUSH
64790: LD_INT 3
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 0
64799: PUSH
64800: LD_INT 3
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 1
64809: NEG
64810: PUSH
64811: LD_INT 2
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: LIST
64822: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64823: LD_ADDR_VAR 0 21
64827: PUSH
64828: LD_INT 2
64830: NEG
64831: PUSH
64832: LD_INT 1
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 3
64841: NEG
64842: PUSH
64843: LD_INT 0
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 3
64852: NEG
64853: PUSH
64854: LD_INT 1
64856: NEG
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: LIST
64866: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64867: LD_ADDR_VAR 0 22
64871: PUSH
64872: LD_INT 2
64874: NEG
64875: PUSH
64876: LD_INT 3
64878: NEG
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 3
64886: NEG
64887: PUSH
64888: LD_INT 2
64890: NEG
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 3
64898: NEG
64899: PUSH
64900: LD_INT 3
64902: NEG
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: LIST
64912: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64913: LD_ADDR_VAR 0 23
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: LD_INT 3
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 1
64931: NEG
64932: PUSH
64933: LD_INT 4
64935: NEG
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 1
64943: PUSH
64944: LD_INT 3
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: LIST
64956: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64957: LD_ADDR_VAR 0 24
64961: PUSH
64962: LD_INT 3
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 3
64974: PUSH
64975: LD_INT 1
64977: NEG
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 4
64985: PUSH
64986: LD_INT 1
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: LIST
64997: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64998: LD_ADDR_VAR 0 25
65002: PUSH
65003: LD_INT 3
65005: PUSH
65006: LD_INT 3
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 4
65015: PUSH
65016: LD_INT 3
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 3
65025: PUSH
65026: LD_INT 4
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: LIST
65037: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65038: LD_ADDR_VAR 0 26
65042: PUSH
65043: LD_INT 0
65045: PUSH
65046: LD_INT 3
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: LD_INT 4
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 1
65065: NEG
65066: PUSH
65067: LD_INT 3
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: LIST
65078: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65079: LD_ADDR_VAR 0 27
65083: PUSH
65084: LD_INT 3
65086: NEG
65087: PUSH
65088: LD_INT 0
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 3
65097: NEG
65098: PUSH
65099: LD_INT 1
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 4
65108: NEG
65109: PUSH
65110: LD_INT 1
65112: NEG
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: LIST
65122: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65123: LD_ADDR_VAR 0 28
65127: PUSH
65128: LD_INT 3
65130: NEG
65131: PUSH
65132: LD_INT 3
65134: NEG
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 3
65142: NEG
65143: PUSH
65144: LD_INT 4
65146: NEG
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 4
65154: NEG
65155: PUSH
65156: LD_INT 3
65158: NEG
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: LIST
65168: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65169: LD_ADDR_VAR 0 29
65173: PUSH
65174: LD_INT 1
65176: NEG
65177: PUSH
65178: LD_INT 3
65180: NEG
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 0
65188: PUSH
65189: LD_INT 3
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 1
65199: PUSH
65200: LD_INT 2
65202: NEG
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 1
65210: NEG
65211: PUSH
65212: LD_INT 4
65214: NEG
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 0
65222: PUSH
65223: LD_INT 4
65225: NEG
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 1
65233: PUSH
65234: LD_INT 3
65236: NEG
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 1
65244: NEG
65245: PUSH
65246: LD_INT 5
65248: NEG
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 0
65256: PUSH
65257: LD_INT 5
65259: NEG
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 1
65267: PUSH
65268: LD_INT 4
65270: NEG
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 1
65278: NEG
65279: PUSH
65280: LD_INT 6
65282: NEG
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 0
65290: PUSH
65291: LD_INT 6
65293: NEG
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 1
65301: PUSH
65302: LD_INT 5
65304: NEG
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65324: LD_ADDR_VAR 0 30
65328: PUSH
65329: LD_INT 2
65331: PUSH
65332: LD_INT 1
65334: NEG
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 3
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 3
65352: PUSH
65353: LD_INT 1
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 3
65362: PUSH
65363: LD_INT 1
65365: NEG
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 4
65373: PUSH
65374: LD_INT 0
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 4
65383: PUSH
65384: LD_INT 1
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 4
65393: PUSH
65394: LD_INT 1
65396: NEG
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 5
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 5
65414: PUSH
65415: LD_INT 1
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 5
65424: PUSH
65425: LD_INT 1
65427: NEG
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 6
65435: PUSH
65436: LD_INT 0
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 6
65445: PUSH
65446: LD_INT 1
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65467: LD_ADDR_VAR 0 31
65471: PUSH
65472: LD_INT 3
65474: PUSH
65475: LD_INT 2
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 3
65484: PUSH
65485: LD_INT 3
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 2
65494: PUSH
65495: LD_INT 3
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 4
65504: PUSH
65505: LD_INT 3
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 4
65514: PUSH
65515: LD_INT 4
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 3
65524: PUSH
65525: LD_INT 4
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 5
65534: PUSH
65535: LD_INT 4
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 5
65544: PUSH
65545: LD_INT 5
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 4
65554: PUSH
65555: LD_INT 5
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 6
65564: PUSH
65565: LD_INT 5
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 6
65574: PUSH
65575: LD_INT 6
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 5
65584: PUSH
65585: LD_INT 6
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65606: LD_ADDR_VAR 0 32
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: LD_INT 3
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 0
65623: PUSH
65624: LD_INT 3
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 1
65633: NEG
65634: PUSH
65635: LD_INT 2
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 1
65644: PUSH
65645: LD_INT 4
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 0
65654: PUSH
65655: LD_INT 4
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 1
65664: NEG
65665: PUSH
65666: LD_INT 3
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 1
65675: PUSH
65676: LD_INT 5
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 0
65685: PUSH
65686: LD_INT 5
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 1
65695: NEG
65696: PUSH
65697: LD_INT 4
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 1
65706: PUSH
65707: LD_INT 6
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 0
65716: PUSH
65717: LD_INT 6
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 1
65726: NEG
65727: PUSH
65728: LD_INT 5
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65749: LD_ADDR_VAR 0 33
65753: PUSH
65754: LD_INT 2
65756: NEG
65757: PUSH
65758: LD_INT 1
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 3
65767: NEG
65768: PUSH
65769: LD_INT 0
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 3
65778: NEG
65779: PUSH
65780: LD_INT 1
65782: NEG
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 3
65790: NEG
65791: PUSH
65792: LD_INT 1
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 4
65801: NEG
65802: PUSH
65803: LD_INT 0
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 4
65812: NEG
65813: PUSH
65814: LD_INT 1
65816: NEG
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 4
65824: NEG
65825: PUSH
65826: LD_INT 1
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 5
65835: NEG
65836: PUSH
65837: LD_INT 0
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 5
65846: NEG
65847: PUSH
65848: LD_INT 1
65850: NEG
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 5
65858: NEG
65859: PUSH
65860: LD_INT 1
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 6
65869: NEG
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 6
65880: NEG
65881: PUSH
65882: LD_INT 1
65884: NEG
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65904: LD_ADDR_VAR 0 34
65908: PUSH
65909: LD_INT 2
65911: NEG
65912: PUSH
65913: LD_INT 3
65915: NEG
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 3
65923: NEG
65924: PUSH
65925: LD_INT 2
65927: NEG
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 3
65935: NEG
65936: PUSH
65937: LD_INT 3
65939: NEG
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 3
65947: NEG
65948: PUSH
65949: LD_INT 4
65951: NEG
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 4
65959: NEG
65960: PUSH
65961: LD_INT 3
65963: NEG
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 4
65971: NEG
65972: PUSH
65973: LD_INT 4
65975: NEG
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 4
65983: NEG
65984: PUSH
65985: LD_INT 5
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 5
65995: NEG
65996: PUSH
65997: LD_INT 4
65999: NEG
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 5
66007: NEG
66008: PUSH
66009: LD_INT 5
66011: NEG
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 5
66019: NEG
66020: PUSH
66021: LD_INT 6
66023: NEG
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 6
66031: NEG
66032: PUSH
66033: LD_INT 5
66035: NEG
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 6
66043: NEG
66044: PUSH
66045: LD_INT 6
66047: NEG
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66067: LD_ADDR_VAR 0 41
66071: PUSH
66072: LD_INT 0
66074: PUSH
66075: LD_INT 2
66077: NEG
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 1
66085: NEG
66086: PUSH
66087: LD_INT 3
66089: NEG
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 1
66097: PUSH
66098: LD_INT 2
66100: NEG
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: LIST
66110: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66111: LD_ADDR_VAR 0 42
66115: PUSH
66116: LD_INT 2
66118: PUSH
66119: LD_INT 0
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 2
66128: PUSH
66129: LD_INT 1
66131: NEG
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 3
66139: PUSH
66140: LD_INT 1
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: LIST
66151: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66152: LD_ADDR_VAR 0 43
66156: PUSH
66157: LD_INT 2
66159: PUSH
66160: LD_INT 2
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 3
66169: PUSH
66170: LD_INT 2
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 2
66179: PUSH
66180: LD_INT 3
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: LIST
66191: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66192: LD_ADDR_VAR 0 44
66196: PUSH
66197: LD_INT 0
66199: PUSH
66200: LD_INT 2
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 1
66209: PUSH
66210: LD_INT 3
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 1
66219: NEG
66220: PUSH
66221: LD_INT 2
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: LIST
66232: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66233: LD_ADDR_VAR 0 45
66237: PUSH
66238: LD_INT 2
66240: NEG
66241: PUSH
66242: LD_INT 0
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 2
66251: NEG
66252: PUSH
66253: LD_INT 1
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 3
66262: NEG
66263: PUSH
66264: LD_INT 1
66266: NEG
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: LIST
66276: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66277: LD_ADDR_VAR 0 46
66281: PUSH
66282: LD_INT 2
66284: NEG
66285: PUSH
66286: LD_INT 2
66288: NEG
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 2
66296: NEG
66297: PUSH
66298: LD_INT 3
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 3
66308: NEG
66309: PUSH
66310: LD_INT 2
66312: NEG
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: LIST
66322: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66323: LD_ADDR_VAR 0 47
66327: PUSH
66328: LD_INT 2
66330: NEG
66331: PUSH
66332: LD_INT 3
66334: NEG
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 1
66342: NEG
66343: PUSH
66344: LD_INT 3
66346: NEG
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66356: LD_ADDR_VAR 0 48
66360: PUSH
66361: LD_INT 1
66363: PUSH
66364: LD_INT 2
66366: NEG
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 2
66374: PUSH
66375: LD_INT 1
66377: NEG
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66387: LD_ADDR_VAR 0 49
66391: PUSH
66392: LD_INT 3
66394: PUSH
66395: LD_INT 1
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 3
66404: PUSH
66405: LD_INT 2
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66416: LD_ADDR_VAR 0 50
66420: PUSH
66421: LD_INT 2
66423: PUSH
66424: LD_INT 3
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 1
66433: PUSH
66434: LD_INT 3
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66445: LD_ADDR_VAR 0 51
66449: PUSH
66450: LD_INT 1
66452: NEG
66453: PUSH
66454: LD_INT 2
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 2
66463: NEG
66464: PUSH
66465: LD_INT 1
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66476: LD_ADDR_VAR 0 52
66480: PUSH
66481: LD_INT 3
66483: NEG
66484: PUSH
66485: LD_INT 1
66487: NEG
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 3
66495: NEG
66496: PUSH
66497: LD_INT 2
66499: NEG
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66509: LD_ADDR_VAR 0 53
66513: PUSH
66514: LD_INT 1
66516: NEG
66517: PUSH
66518: LD_INT 3
66520: NEG
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 0
66528: PUSH
66529: LD_INT 3
66531: NEG
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 1
66539: PUSH
66540: LD_INT 2
66542: NEG
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: LIST
66552: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66553: LD_ADDR_VAR 0 54
66557: PUSH
66558: LD_INT 2
66560: PUSH
66561: LD_INT 1
66563: NEG
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 3
66571: PUSH
66572: LD_INT 0
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 3
66581: PUSH
66582: LD_INT 1
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: LIST
66593: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66594: LD_ADDR_VAR 0 55
66598: PUSH
66599: LD_INT 3
66601: PUSH
66602: LD_INT 2
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 3
66611: PUSH
66612: LD_INT 3
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 2
66621: PUSH
66622: LD_INT 3
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: LIST
66633: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66634: LD_ADDR_VAR 0 56
66638: PUSH
66639: LD_INT 1
66641: PUSH
66642: LD_INT 3
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 0
66651: PUSH
66652: LD_INT 3
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 1
66661: NEG
66662: PUSH
66663: LD_INT 2
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: LIST
66674: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66675: LD_ADDR_VAR 0 57
66679: PUSH
66680: LD_INT 2
66682: NEG
66683: PUSH
66684: LD_INT 1
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 3
66693: NEG
66694: PUSH
66695: LD_INT 0
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 3
66704: NEG
66705: PUSH
66706: LD_INT 1
66708: NEG
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: LIST
66718: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66719: LD_ADDR_VAR 0 58
66723: PUSH
66724: LD_INT 2
66726: NEG
66727: PUSH
66728: LD_INT 3
66730: NEG
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 3
66738: NEG
66739: PUSH
66740: LD_INT 2
66742: NEG
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 3
66750: NEG
66751: PUSH
66752: LD_INT 3
66754: NEG
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: LIST
66764: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66765: LD_ADDR_VAR 0 59
66769: PUSH
66770: LD_INT 1
66772: NEG
66773: PUSH
66774: LD_INT 2
66776: NEG
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 0
66784: PUSH
66785: LD_INT 2
66787: NEG
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 1
66795: PUSH
66796: LD_INT 1
66798: NEG
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: LIST
66808: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66809: LD_ADDR_VAR 0 60
66813: PUSH
66814: LD_INT 1
66816: PUSH
66817: LD_INT 1
66819: NEG
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 2
66827: PUSH
66828: LD_INT 0
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: LD_INT 2
66837: PUSH
66838: LD_INT 1
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: LIST
66849: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66850: LD_ADDR_VAR 0 61
66854: PUSH
66855: LD_INT 2
66857: PUSH
66858: LD_INT 1
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 2
66867: PUSH
66868: LD_INT 2
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 1
66877: PUSH
66878: LD_INT 2
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: LIST
66889: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66890: LD_ADDR_VAR 0 62
66894: PUSH
66895: LD_INT 1
66897: PUSH
66898: LD_INT 2
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 0
66907: PUSH
66908: LD_INT 2
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 1
66917: NEG
66918: PUSH
66919: LD_INT 1
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: LIST
66930: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66931: LD_ADDR_VAR 0 63
66935: PUSH
66936: LD_INT 1
66938: NEG
66939: PUSH
66940: LD_INT 1
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 2
66949: NEG
66950: PUSH
66951: LD_INT 0
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 2
66960: NEG
66961: PUSH
66962: LD_INT 1
66964: NEG
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: LIST
66974: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66975: LD_ADDR_VAR 0 64
66979: PUSH
66980: LD_INT 1
66982: NEG
66983: PUSH
66984: LD_INT 2
66986: NEG
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 2
66994: NEG
66995: PUSH
66996: LD_INT 1
66998: NEG
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 2
67006: NEG
67007: PUSH
67008: LD_INT 2
67010: NEG
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: LIST
67020: ST_TO_ADDR
// end ; 2 :
67021: GO 70287
67023: LD_INT 2
67025: DOUBLE
67026: EQUAL
67027: IFTRUE 67031
67029: GO 70286
67031: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67032: LD_ADDR_VAR 0 29
67036: PUSH
67037: LD_INT 4
67039: PUSH
67040: LD_INT 0
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 4
67049: PUSH
67050: LD_INT 1
67052: NEG
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 5
67060: PUSH
67061: LD_INT 0
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 5
67070: PUSH
67071: LD_INT 1
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 4
67080: PUSH
67081: LD_INT 1
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 3
67090: PUSH
67091: LD_INT 0
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 3
67100: PUSH
67101: LD_INT 1
67103: NEG
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 3
67111: PUSH
67112: LD_INT 2
67114: NEG
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 5
67122: PUSH
67123: LD_INT 2
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 3
67132: PUSH
67133: LD_INT 3
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 3
67142: PUSH
67143: LD_INT 2
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 4
67152: PUSH
67153: LD_INT 3
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 4
67162: PUSH
67163: LD_INT 4
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 3
67172: PUSH
67173: LD_INT 4
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 2
67182: PUSH
67183: LD_INT 3
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 2
67192: PUSH
67193: LD_INT 2
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 4
67202: PUSH
67203: LD_INT 2
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 2
67212: PUSH
67213: LD_INT 4
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 0
67222: PUSH
67223: LD_INT 4
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 0
67232: PUSH
67233: LD_INT 3
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: LD_INT 1
67242: PUSH
67243: LD_INT 4
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 1
67252: PUSH
67253: LD_INT 5
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 0
67262: PUSH
67263: LD_INT 5
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 1
67272: NEG
67273: PUSH
67274: LD_INT 4
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 1
67283: NEG
67284: PUSH
67285: LD_INT 3
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 2
67294: PUSH
67295: LD_INT 5
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 2
67304: NEG
67305: PUSH
67306: LD_INT 3
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 3
67315: NEG
67316: PUSH
67317: LD_INT 0
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 3
67326: NEG
67327: PUSH
67328: LD_INT 1
67330: NEG
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 2
67338: NEG
67339: PUSH
67340: LD_INT 0
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 2
67349: NEG
67350: PUSH
67351: LD_INT 1
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 3
67360: NEG
67361: PUSH
67362: LD_INT 1
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 4
67371: NEG
67372: PUSH
67373: LD_INT 0
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 4
67382: NEG
67383: PUSH
67384: LD_INT 1
67386: NEG
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 4
67394: NEG
67395: PUSH
67396: LD_INT 2
67398: NEG
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 2
67406: NEG
67407: PUSH
67408: LD_INT 2
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 4
67417: NEG
67418: PUSH
67419: LD_INT 4
67421: NEG
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 4
67429: NEG
67430: PUSH
67431: LD_INT 5
67433: NEG
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 3
67441: NEG
67442: PUSH
67443: LD_INT 4
67445: NEG
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 3
67453: NEG
67454: PUSH
67455: LD_INT 3
67457: NEG
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 4
67465: NEG
67466: PUSH
67467: LD_INT 3
67469: NEG
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 5
67477: NEG
67478: PUSH
67479: LD_INT 4
67481: NEG
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 5
67489: NEG
67490: PUSH
67491: LD_INT 5
67493: NEG
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 3
67501: NEG
67502: PUSH
67503: LD_INT 5
67505: NEG
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 5
67513: NEG
67514: PUSH
67515: LD_INT 3
67517: NEG
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: LIST
67565: LIST
67566: LIST
67567: LIST
67568: LIST
67569: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67570: LD_ADDR_VAR 0 30
67574: PUSH
67575: LD_INT 4
67577: PUSH
67578: LD_INT 4
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 4
67587: PUSH
67588: LD_INT 3
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 5
67597: PUSH
67598: LD_INT 4
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 5
67607: PUSH
67608: LD_INT 5
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 4
67617: PUSH
67618: LD_INT 5
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 3
67627: PUSH
67628: LD_INT 4
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 3
67637: PUSH
67638: LD_INT 3
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 5
67647: PUSH
67648: LD_INT 3
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 3
67657: PUSH
67658: LD_INT 5
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 0
67667: PUSH
67668: LD_INT 3
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 0
67677: PUSH
67678: LD_INT 2
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 1
67687: PUSH
67688: LD_INT 3
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 1
67697: PUSH
67698: LD_INT 4
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 0
67707: PUSH
67708: LD_INT 4
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 1
67717: NEG
67718: PUSH
67719: LD_INT 3
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 1
67728: NEG
67729: PUSH
67730: LD_INT 2
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 2
67739: PUSH
67740: LD_INT 4
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 2
67749: NEG
67750: PUSH
67751: LD_INT 2
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 4
67760: NEG
67761: PUSH
67762: LD_INT 0
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 4
67771: NEG
67772: PUSH
67773: LD_INT 1
67775: NEG
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 3
67783: NEG
67784: PUSH
67785: LD_INT 0
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 3
67794: NEG
67795: PUSH
67796: LD_INT 1
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 4
67805: NEG
67806: PUSH
67807: LD_INT 1
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 5
67816: NEG
67817: PUSH
67818: LD_INT 0
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 5
67827: NEG
67828: PUSH
67829: LD_INT 1
67831: NEG
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 5
67839: NEG
67840: PUSH
67841: LD_INT 2
67843: NEG
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 3
67851: NEG
67852: PUSH
67853: LD_INT 2
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 3
67862: NEG
67863: PUSH
67864: LD_INT 3
67866: NEG
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 3
67874: NEG
67875: PUSH
67876: LD_INT 4
67878: NEG
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 2
67886: NEG
67887: PUSH
67888: LD_INT 3
67890: NEG
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 2
67898: NEG
67899: PUSH
67900: LD_INT 2
67902: NEG
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 3
67910: NEG
67911: PUSH
67912: LD_INT 2
67914: NEG
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 4
67922: NEG
67923: PUSH
67924: LD_INT 3
67926: NEG
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 4
67934: NEG
67935: PUSH
67936: LD_INT 4
67938: NEG
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 2
67946: NEG
67947: PUSH
67948: LD_INT 4
67950: NEG
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 4
67958: NEG
67959: PUSH
67960: LD_INT 2
67962: NEG
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 0
67970: PUSH
67971: LD_INT 4
67973: NEG
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 0
67981: PUSH
67982: LD_INT 5
67984: NEG
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 1
67992: PUSH
67993: LD_INT 4
67995: NEG
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 1
68003: PUSH
68004: LD_INT 3
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 0
68014: PUSH
68015: LD_INT 3
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 1
68025: NEG
68026: PUSH
68027: LD_INT 4
68029: NEG
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 1
68037: NEG
68038: PUSH
68039: LD_INT 5
68041: NEG
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 2
68049: PUSH
68050: LD_INT 3
68052: NEG
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 2
68060: NEG
68061: PUSH
68062: LD_INT 5
68064: NEG
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68117: LD_ADDR_VAR 0 31
68121: PUSH
68122: LD_INT 0
68124: PUSH
68125: LD_INT 4
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 0
68134: PUSH
68135: LD_INT 3
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 1
68144: PUSH
68145: LD_INT 4
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 1
68154: PUSH
68155: LD_INT 5
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 0
68164: PUSH
68165: LD_INT 5
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 1
68174: NEG
68175: PUSH
68176: LD_INT 4
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 1
68185: NEG
68186: PUSH
68187: LD_INT 3
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 2
68196: PUSH
68197: LD_INT 5
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 2
68206: NEG
68207: PUSH
68208: LD_INT 3
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 3
68217: NEG
68218: PUSH
68219: LD_INT 0
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 3
68228: NEG
68229: PUSH
68230: LD_INT 1
68232: NEG
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 2
68240: NEG
68241: PUSH
68242: LD_INT 0
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 2
68251: NEG
68252: PUSH
68253: LD_INT 1
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 3
68262: NEG
68263: PUSH
68264: LD_INT 1
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 4
68273: NEG
68274: PUSH
68275: LD_INT 0
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 4
68284: NEG
68285: PUSH
68286: LD_INT 1
68288: NEG
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 4
68296: NEG
68297: PUSH
68298: LD_INT 2
68300: NEG
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 2
68308: NEG
68309: PUSH
68310: LD_INT 2
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 4
68319: NEG
68320: PUSH
68321: LD_INT 4
68323: NEG
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 4
68331: NEG
68332: PUSH
68333: LD_INT 5
68335: NEG
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 3
68343: NEG
68344: PUSH
68345: LD_INT 4
68347: NEG
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 3
68355: NEG
68356: PUSH
68357: LD_INT 3
68359: NEG
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 4
68367: NEG
68368: PUSH
68369: LD_INT 3
68371: NEG
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 5
68379: NEG
68380: PUSH
68381: LD_INT 4
68383: NEG
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 5
68391: NEG
68392: PUSH
68393: LD_INT 5
68395: NEG
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 3
68403: NEG
68404: PUSH
68405: LD_INT 5
68407: NEG
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 5
68415: NEG
68416: PUSH
68417: LD_INT 3
68419: NEG
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 0
68427: PUSH
68428: LD_INT 3
68430: NEG
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 0
68438: PUSH
68439: LD_INT 4
68441: NEG
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 1
68449: PUSH
68450: LD_INT 3
68452: NEG
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 1
68460: PUSH
68461: LD_INT 2
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 0
68471: PUSH
68472: LD_INT 2
68474: NEG
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 1
68482: NEG
68483: PUSH
68484: LD_INT 3
68486: NEG
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 1
68494: NEG
68495: PUSH
68496: LD_INT 4
68498: NEG
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 2
68506: PUSH
68507: LD_INT 2
68509: NEG
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 2
68517: NEG
68518: PUSH
68519: LD_INT 4
68521: NEG
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 4
68529: PUSH
68530: LD_INT 0
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 4
68539: PUSH
68540: LD_INT 1
68542: NEG
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 5
68550: PUSH
68551: LD_INT 0
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 5
68560: PUSH
68561: LD_INT 1
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 4
68570: PUSH
68571: LD_INT 1
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: LD_INT 3
68580: PUSH
68581: LD_INT 0
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 3
68590: PUSH
68591: LD_INT 1
68593: NEG
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 3
68601: PUSH
68602: LD_INT 2
68604: NEG
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 5
68612: PUSH
68613: LD_INT 2
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: LIST
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68667: LD_ADDR_VAR 0 32
68671: PUSH
68672: LD_INT 4
68674: NEG
68675: PUSH
68676: LD_INT 0
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 4
68685: NEG
68686: PUSH
68687: LD_INT 1
68689: NEG
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 3
68697: NEG
68698: PUSH
68699: LD_INT 0
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 3
68708: NEG
68709: PUSH
68710: LD_INT 1
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 4
68719: NEG
68720: PUSH
68721: LD_INT 1
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 5
68730: NEG
68731: PUSH
68732: LD_INT 0
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 5
68741: NEG
68742: PUSH
68743: LD_INT 1
68745: NEG
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 5
68753: NEG
68754: PUSH
68755: LD_INT 2
68757: NEG
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 3
68765: NEG
68766: PUSH
68767: LD_INT 2
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 3
68776: NEG
68777: PUSH
68778: LD_INT 3
68780: NEG
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 3
68788: NEG
68789: PUSH
68790: LD_INT 4
68792: NEG
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 2
68800: NEG
68801: PUSH
68802: LD_INT 3
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 2
68812: NEG
68813: PUSH
68814: LD_INT 2
68816: NEG
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 3
68824: NEG
68825: PUSH
68826: LD_INT 2
68828: NEG
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 4
68836: NEG
68837: PUSH
68838: LD_INT 3
68840: NEG
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 4
68848: NEG
68849: PUSH
68850: LD_INT 4
68852: NEG
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 2
68860: NEG
68861: PUSH
68862: LD_INT 4
68864: NEG
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 4
68872: NEG
68873: PUSH
68874: LD_INT 2
68876: NEG
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 0
68884: PUSH
68885: LD_INT 4
68887: NEG
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 0
68895: PUSH
68896: LD_INT 5
68898: NEG
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 1
68906: PUSH
68907: LD_INT 4
68909: NEG
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 1
68917: PUSH
68918: LD_INT 3
68920: NEG
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 0
68928: PUSH
68929: LD_INT 3
68931: NEG
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 1
68939: NEG
68940: PUSH
68941: LD_INT 4
68943: NEG
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 1
68951: NEG
68952: PUSH
68953: LD_INT 5
68955: NEG
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 2
68963: PUSH
68964: LD_INT 3
68966: NEG
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 2
68974: NEG
68975: PUSH
68976: LD_INT 5
68978: NEG
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 3
68986: PUSH
68987: LD_INT 0
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 3
68996: PUSH
68997: LD_INT 1
68999: NEG
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 4
69007: PUSH
69008: LD_INT 0
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 4
69017: PUSH
69018: LD_INT 1
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 3
69027: PUSH
69028: LD_INT 1
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: LD_INT 2
69037: PUSH
69038: LD_INT 0
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: LD_INT 2
69047: PUSH
69048: LD_INT 1
69050: NEG
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 2
69058: PUSH
69059: LD_INT 2
69061: NEG
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: PUSH
69067: LD_INT 4
69069: PUSH
69070: LD_INT 2
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 4
69079: PUSH
69080: LD_INT 4
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 4
69089: PUSH
69090: LD_INT 3
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 5
69099: PUSH
69100: LD_INT 4
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 5
69109: PUSH
69110: LD_INT 5
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 4
69119: PUSH
69120: LD_INT 5
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 3
69129: PUSH
69130: LD_INT 4
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 3
69139: PUSH
69140: LD_INT 3
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 5
69149: PUSH
69150: LD_INT 3
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 3
69159: PUSH
69160: LD_INT 5
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69214: LD_ADDR_VAR 0 33
69218: PUSH
69219: LD_INT 4
69221: NEG
69222: PUSH
69223: LD_INT 4
69225: NEG
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: LD_INT 4
69233: NEG
69234: PUSH
69235: LD_INT 5
69237: NEG
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 3
69245: NEG
69246: PUSH
69247: LD_INT 4
69249: NEG
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 3
69257: NEG
69258: PUSH
69259: LD_INT 3
69261: NEG
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 4
69269: NEG
69270: PUSH
69271: LD_INT 3
69273: NEG
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 5
69281: NEG
69282: PUSH
69283: LD_INT 4
69285: NEG
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 5
69293: NEG
69294: PUSH
69295: LD_INT 5
69297: NEG
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: LD_INT 3
69305: NEG
69306: PUSH
69307: LD_INT 5
69309: NEG
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 5
69317: NEG
69318: PUSH
69319: LD_INT 3
69321: NEG
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 0
69329: PUSH
69330: LD_INT 3
69332: NEG
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: LD_INT 0
69340: PUSH
69341: LD_INT 4
69343: NEG
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 1
69351: PUSH
69352: LD_INT 3
69354: NEG
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 1
69362: PUSH
69363: LD_INT 2
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 0
69373: PUSH
69374: LD_INT 2
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 1
69384: NEG
69385: PUSH
69386: LD_INT 3
69388: NEG
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 1
69396: NEG
69397: PUSH
69398: LD_INT 4
69400: NEG
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 2
69408: PUSH
69409: LD_INT 2
69411: NEG
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 2
69419: NEG
69420: PUSH
69421: LD_INT 4
69423: NEG
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 4
69431: PUSH
69432: LD_INT 0
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 4
69441: PUSH
69442: LD_INT 1
69444: NEG
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 5
69452: PUSH
69453: LD_INT 0
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 5
69462: PUSH
69463: LD_INT 1
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 4
69472: PUSH
69473: LD_INT 1
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 3
69482: PUSH
69483: LD_INT 0
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 3
69492: PUSH
69493: LD_INT 1
69495: NEG
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 3
69503: PUSH
69504: LD_INT 2
69506: NEG
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 5
69514: PUSH
69515: LD_INT 2
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 3
69524: PUSH
69525: LD_INT 3
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: LD_INT 3
69534: PUSH
69535: LD_INT 2
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PUSH
69542: LD_INT 4
69544: PUSH
69545: LD_INT 3
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: PUSH
69552: LD_INT 4
69554: PUSH
69555: LD_INT 4
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: PUSH
69562: LD_INT 3
69564: PUSH
69565: LD_INT 4
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 2
69574: PUSH
69575: LD_INT 3
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 2
69584: PUSH
69585: LD_INT 2
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: LD_INT 4
69594: PUSH
69595: LD_INT 2
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: PUSH
69602: LD_INT 2
69604: PUSH
69605: LD_INT 4
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 0
69614: PUSH
69615: LD_INT 4
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 0
69624: PUSH
69625: LD_INT 3
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 1
69634: PUSH
69635: LD_INT 4
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 1
69644: PUSH
69645: LD_INT 5
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 0
69654: PUSH
69655: LD_INT 5
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 1
69664: NEG
69665: PUSH
69666: LD_INT 4
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 1
69675: NEG
69676: PUSH
69677: LD_INT 3
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PUSH
69684: LD_INT 2
69686: PUSH
69687: LD_INT 5
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 2
69696: NEG
69697: PUSH
69698: LD_INT 3
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: LIST
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69752: LD_ADDR_VAR 0 34
69756: PUSH
69757: LD_INT 0
69759: PUSH
69760: LD_INT 4
69762: NEG
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 0
69770: PUSH
69771: LD_INT 5
69773: NEG
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 1
69781: PUSH
69782: LD_INT 4
69784: NEG
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 1
69792: PUSH
69793: LD_INT 3
69795: NEG
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 0
69803: PUSH
69804: LD_INT 3
69806: NEG
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 1
69814: NEG
69815: PUSH
69816: LD_INT 4
69818: NEG
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 1
69826: NEG
69827: PUSH
69828: LD_INT 5
69830: NEG
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 2
69838: PUSH
69839: LD_INT 3
69841: NEG
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 2
69849: NEG
69850: PUSH
69851: LD_INT 5
69853: NEG
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 3
69861: PUSH
69862: LD_INT 0
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: LD_INT 3
69871: PUSH
69872: LD_INT 1
69874: NEG
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 4
69882: PUSH
69883: LD_INT 0
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: LD_INT 4
69892: PUSH
69893: LD_INT 1
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 3
69902: PUSH
69903: LD_INT 1
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 2
69912: PUSH
69913: LD_INT 0
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 2
69922: PUSH
69923: LD_INT 1
69925: NEG
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 2
69933: PUSH
69934: LD_INT 2
69936: NEG
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 4
69944: PUSH
69945: LD_INT 2
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 4
69954: PUSH
69955: LD_INT 4
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 4
69964: PUSH
69965: LD_INT 3
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PUSH
69972: LD_INT 5
69974: PUSH
69975: LD_INT 4
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 5
69984: PUSH
69985: LD_INT 5
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 4
69994: PUSH
69995: LD_INT 5
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 3
70004: PUSH
70005: LD_INT 4
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 3
70014: PUSH
70015: LD_INT 3
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 5
70024: PUSH
70025: LD_INT 3
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: LD_INT 3
70034: PUSH
70035: LD_INT 5
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 0
70044: PUSH
70045: LD_INT 3
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 0
70054: PUSH
70055: LD_INT 2
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 1
70064: PUSH
70065: LD_INT 3
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: LD_INT 1
70074: PUSH
70075: LD_INT 4
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 0
70084: PUSH
70085: LD_INT 4
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: LD_INT 1
70094: NEG
70095: PUSH
70096: LD_INT 3
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 1
70105: NEG
70106: PUSH
70107: LD_INT 2
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 2
70116: PUSH
70117: LD_INT 4
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 2
70126: NEG
70127: PUSH
70128: LD_INT 2
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: LD_INT 4
70137: NEG
70138: PUSH
70139: LD_INT 0
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 4
70148: NEG
70149: PUSH
70150: LD_INT 1
70152: NEG
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: LD_INT 3
70160: NEG
70161: PUSH
70162: LD_INT 0
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 3
70171: NEG
70172: PUSH
70173: LD_INT 1
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PUSH
70180: LD_INT 4
70182: NEG
70183: PUSH
70184: LD_INT 1
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 5
70193: NEG
70194: PUSH
70195: LD_INT 0
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 5
70204: NEG
70205: PUSH
70206: LD_INT 1
70208: NEG
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 5
70216: NEG
70217: PUSH
70218: LD_INT 2
70220: NEG
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 3
70228: NEG
70229: PUSH
70230: LD_INT 2
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: ST_TO_ADDR
// end ; end ;
70284: GO 70287
70286: POP
// case btype of b_depot , b_warehouse :
70287: LD_VAR 0 1
70291: PUSH
70292: LD_INT 0
70294: DOUBLE
70295: EQUAL
70296: IFTRUE 70306
70298: LD_INT 1
70300: DOUBLE
70301: EQUAL
70302: IFTRUE 70306
70304: GO 70507
70306: POP
// case nation of nation_american :
70307: LD_VAR 0 5
70311: PUSH
70312: LD_INT 1
70314: DOUBLE
70315: EQUAL
70316: IFTRUE 70320
70318: GO 70376
70320: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70321: LD_ADDR_VAR 0 9
70325: PUSH
70326: LD_VAR 0 11
70330: PUSH
70331: LD_VAR 0 12
70335: PUSH
70336: LD_VAR 0 13
70340: PUSH
70341: LD_VAR 0 14
70345: PUSH
70346: LD_VAR 0 15
70350: PUSH
70351: LD_VAR 0 16
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: PUSH
70364: LD_VAR 0 4
70368: PUSH
70369: LD_INT 1
70371: PLUS
70372: ARRAY
70373: ST_TO_ADDR
70374: GO 70505
70376: LD_INT 2
70378: DOUBLE
70379: EQUAL
70380: IFTRUE 70384
70382: GO 70440
70384: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70385: LD_ADDR_VAR 0 9
70389: PUSH
70390: LD_VAR 0 17
70394: PUSH
70395: LD_VAR 0 18
70399: PUSH
70400: LD_VAR 0 19
70404: PUSH
70405: LD_VAR 0 20
70409: PUSH
70410: LD_VAR 0 21
70414: PUSH
70415: LD_VAR 0 22
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: PUSH
70428: LD_VAR 0 4
70432: PUSH
70433: LD_INT 1
70435: PLUS
70436: ARRAY
70437: ST_TO_ADDR
70438: GO 70505
70440: LD_INT 3
70442: DOUBLE
70443: EQUAL
70444: IFTRUE 70448
70446: GO 70504
70448: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70449: LD_ADDR_VAR 0 9
70453: PUSH
70454: LD_VAR 0 23
70458: PUSH
70459: LD_VAR 0 24
70463: PUSH
70464: LD_VAR 0 25
70468: PUSH
70469: LD_VAR 0 26
70473: PUSH
70474: LD_VAR 0 27
70478: PUSH
70479: LD_VAR 0 28
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: PUSH
70492: LD_VAR 0 4
70496: PUSH
70497: LD_INT 1
70499: PLUS
70500: ARRAY
70501: ST_TO_ADDR
70502: GO 70505
70504: POP
70505: GO 71060
70507: LD_INT 2
70509: DOUBLE
70510: EQUAL
70511: IFTRUE 70521
70513: LD_INT 3
70515: DOUBLE
70516: EQUAL
70517: IFTRUE 70521
70519: GO 70577
70521: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70522: LD_ADDR_VAR 0 9
70526: PUSH
70527: LD_VAR 0 29
70531: PUSH
70532: LD_VAR 0 30
70536: PUSH
70537: LD_VAR 0 31
70541: PUSH
70542: LD_VAR 0 32
70546: PUSH
70547: LD_VAR 0 33
70551: PUSH
70552: LD_VAR 0 34
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: PUSH
70565: LD_VAR 0 4
70569: PUSH
70570: LD_INT 1
70572: PLUS
70573: ARRAY
70574: ST_TO_ADDR
70575: GO 71060
70577: LD_INT 16
70579: DOUBLE
70580: EQUAL
70581: IFTRUE 70639
70583: LD_INT 17
70585: DOUBLE
70586: EQUAL
70587: IFTRUE 70639
70589: LD_INT 18
70591: DOUBLE
70592: EQUAL
70593: IFTRUE 70639
70595: LD_INT 19
70597: DOUBLE
70598: EQUAL
70599: IFTRUE 70639
70601: LD_INT 22
70603: DOUBLE
70604: EQUAL
70605: IFTRUE 70639
70607: LD_INT 20
70609: DOUBLE
70610: EQUAL
70611: IFTRUE 70639
70613: LD_INT 21
70615: DOUBLE
70616: EQUAL
70617: IFTRUE 70639
70619: LD_INT 23
70621: DOUBLE
70622: EQUAL
70623: IFTRUE 70639
70625: LD_INT 24
70627: DOUBLE
70628: EQUAL
70629: IFTRUE 70639
70631: LD_INT 25
70633: DOUBLE
70634: EQUAL
70635: IFTRUE 70639
70637: GO 70695
70639: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70640: LD_ADDR_VAR 0 9
70644: PUSH
70645: LD_VAR 0 35
70649: PUSH
70650: LD_VAR 0 36
70654: PUSH
70655: LD_VAR 0 37
70659: PUSH
70660: LD_VAR 0 38
70664: PUSH
70665: LD_VAR 0 39
70669: PUSH
70670: LD_VAR 0 40
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: PUSH
70683: LD_VAR 0 4
70687: PUSH
70688: LD_INT 1
70690: PLUS
70691: ARRAY
70692: ST_TO_ADDR
70693: GO 71060
70695: LD_INT 6
70697: DOUBLE
70698: EQUAL
70699: IFTRUE 70751
70701: LD_INT 7
70703: DOUBLE
70704: EQUAL
70705: IFTRUE 70751
70707: LD_INT 8
70709: DOUBLE
70710: EQUAL
70711: IFTRUE 70751
70713: LD_INT 13
70715: DOUBLE
70716: EQUAL
70717: IFTRUE 70751
70719: LD_INT 12
70721: DOUBLE
70722: EQUAL
70723: IFTRUE 70751
70725: LD_INT 15
70727: DOUBLE
70728: EQUAL
70729: IFTRUE 70751
70731: LD_INT 11
70733: DOUBLE
70734: EQUAL
70735: IFTRUE 70751
70737: LD_INT 14
70739: DOUBLE
70740: EQUAL
70741: IFTRUE 70751
70743: LD_INT 10
70745: DOUBLE
70746: EQUAL
70747: IFTRUE 70751
70749: GO 70807
70751: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70752: LD_ADDR_VAR 0 9
70756: PUSH
70757: LD_VAR 0 41
70761: PUSH
70762: LD_VAR 0 42
70766: PUSH
70767: LD_VAR 0 43
70771: PUSH
70772: LD_VAR 0 44
70776: PUSH
70777: LD_VAR 0 45
70781: PUSH
70782: LD_VAR 0 46
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: LIST
70793: LIST
70794: PUSH
70795: LD_VAR 0 4
70799: PUSH
70800: LD_INT 1
70802: PLUS
70803: ARRAY
70804: ST_TO_ADDR
70805: GO 71060
70807: LD_INT 36
70809: DOUBLE
70810: EQUAL
70811: IFTRUE 70815
70813: GO 70871
70815: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70816: LD_ADDR_VAR 0 9
70820: PUSH
70821: LD_VAR 0 47
70825: PUSH
70826: LD_VAR 0 48
70830: PUSH
70831: LD_VAR 0 49
70835: PUSH
70836: LD_VAR 0 50
70840: PUSH
70841: LD_VAR 0 51
70845: PUSH
70846: LD_VAR 0 52
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: PUSH
70859: LD_VAR 0 4
70863: PUSH
70864: LD_INT 1
70866: PLUS
70867: ARRAY
70868: ST_TO_ADDR
70869: GO 71060
70871: LD_INT 4
70873: DOUBLE
70874: EQUAL
70875: IFTRUE 70897
70877: LD_INT 5
70879: DOUBLE
70880: EQUAL
70881: IFTRUE 70897
70883: LD_INT 34
70885: DOUBLE
70886: EQUAL
70887: IFTRUE 70897
70889: LD_INT 37
70891: DOUBLE
70892: EQUAL
70893: IFTRUE 70897
70895: GO 70953
70897: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70898: LD_ADDR_VAR 0 9
70902: PUSH
70903: LD_VAR 0 53
70907: PUSH
70908: LD_VAR 0 54
70912: PUSH
70913: LD_VAR 0 55
70917: PUSH
70918: LD_VAR 0 56
70922: PUSH
70923: LD_VAR 0 57
70927: PUSH
70928: LD_VAR 0 58
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: LIST
70940: PUSH
70941: LD_VAR 0 4
70945: PUSH
70946: LD_INT 1
70948: PLUS
70949: ARRAY
70950: ST_TO_ADDR
70951: GO 71060
70953: LD_INT 31
70955: DOUBLE
70956: EQUAL
70957: IFTRUE 71003
70959: LD_INT 32
70961: DOUBLE
70962: EQUAL
70963: IFTRUE 71003
70965: LD_INT 33
70967: DOUBLE
70968: EQUAL
70969: IFTRUE 71003
70971: LD_INT 27
70973: DOUBLE
70974: EQUAL
70975: IFTRUE 71003
70977: LD_INT 26
70979: DOUBLE
70980: EQUAL
70981: IFTRUE 71003
70983: LD_INT 28
70985: DOUBLE
70986: EQUAL
70987: IFTRUE 71003
70989: LD_INT 29
70991: DOUBLE
70992: EQUAL
70993: IFTRUE 71003
70995: LD_INT 30
70997: DOUBLE
70998: EQUAL
70999: IFTRUE 71003
71001: GO 71059
71003: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71004: LD_ADDR_VAR 0 9
71008: PUSH
71009: LD_VAR 0 59
71013: PUSH
71014: LD_VAR 0 60
71018: PUSH
71019: LD_VAR 0 61
71023: PUSH
71024: LD_VAR 0 62
71028: PUSH
71029: LD_VAR 0 63
71033: PUSH
71034: LD_VAR 0 64
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: PUSH
71047: LD_VAR 0 4
71051: PUSH
71052: LD_INT 1
71054: PLUS
71055: ARRAY
71056: ST_TO_ADDR
71057: GO 71060
71059: POP
// temp_list2 = [ ] ;
71060: LD_ADDR_VAR 0 10
71064: PUSH
71065: EMPTY
71066: ST_TO_ADDR
// for i in temp_list do
71067: LD_ADDR_VAR 0 8
71071: PUSH
71072: LD_VAR 0 9
71076: PUSH
71077: FOR_IN
71078: IFFALSE 71130
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71080: LD_ADDR_VAR 0 10
71084: PUSH
71085: LD_VAR 0 10
71089: PUSH
71090: LD_VAR 0 8
71094: PUSH
71095: LD_INT 1
71097: ARRAY
71098: PUSH
71099: LD_VAR 0 2
71103: PLUS
71104: PUSH
71105: LD_VAR 0 8
71109: PUSH
71110: LD_INT 2
71112: ARRAY
71113: PUSH
71114: LD_VAR 0 3
71118: PLUS
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: EMPTY
71125: LIST
71126: ADD
71127: ST_TO_ADDR
71128: GO 71077
71130: POP
71131: POP
// result = temp_list2 ;
71132: LD_ADDR_VAR 0 7
71136: PUSH
71137: LD_VAR 0 10
71141: ST_TO_ADDR
// end ;
71142: LD_VAR 0 7
71146: RET
// export function EnemyInRange ( unit , dist ) ; begin
71147: LD_INT 0
71149: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71150: LD_ADDR_VAR 0 3
71154: PUSH
71155: LD_VAR 0 1
71159: PPUSH
71160: CALL_OW 255
71164: PPUSH
71165: LD_VAR 0 1
71169: PPUSH
71170: CALL_OW 250
71174: PPUSH
71175: LD_VAR 0 1
71179: PPUSH
71180: CALL_OW 251
71184: PPUSH
71185: LD_VAR 0 2
71189: PPUSH
71190: CALL 44543 0 4
71194: PUSH
71195: LD_INT 4
71197: ARRAY
71198: ST_TO_ADDR
// end ;
71199: LD_VAR 0 3
71203: RET
// export function PlayerSeeMe ( unit ) ; begin
71204: LD_INT 0
71206: PPUSH
// result := See ( your_side , unit ) ;
71207: LD_ADDR_VAR 0 2
71211: PUSH
71212: LD_OWVAR 2
71216: PPUSH
71217: LD_VAR 0 1
71221: PPUSH
71222: CALL_OW 292
71226: ST_TO_ADDR
// end ;
71227: LD_VAR 0 2
71231: RET
// export function ReverseDir ( unit ) ; begin
71232: LD_INT 0
71234: PPUSH
// if not unit then
71235: LD_VAR 0 1
71239: NOT
71240: IFFALSE 71244
// exit ;
71242: GO 71267
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71244: LD_ADDR_VAR 0 2
71248: PUSH
71249: LD_VAR 0 1
71253: PPUSH
71254: CALL_OW 254
71258: PUSH
71259: LD_INT 3
71261: PLUS
71262: PUSH
71263: LD_INT 6
71265: MOD
71266: ST_TO_ADDR
// end ;
71267: LD_VAR 0 2
71271: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71272: LD_INT 0
71274: PPUSH
71275: PPUSH
71276: PPUSH
71277: PPUSH
71278: PPUSH
// if not hexes then
71279: LD_VAR 0 2
71283: NOT
71284: IFFALSE 71288
// exit ;
71286: GO 71436
// dist := 9999 ;
71288: LD_ADDR_VAR 0 5
71292: PUSH
71293: LD_INT 9999
71295: ST_TO_ADDR
// for i = 1 to hexes do
71296: LD_ADDR_VAR 0 4
71300: PUSH
71301: DOUBLE
71302: LD_INT 1
71304: DEC
71305: ST_TO_ADDR
71306: LD_VAR 0 2
71310: PUSH
71311: FOR_TO
71312: IFFALSE 71424
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71314: LD_VAR 0 1
71318: PPUSH
71319: LD_VAR 0 2
71323: PUSH
71324: LD_VAR 0 4
71328: ARRAY
71329: PUSH
71330: LD_INT 1
71332: ARRAY
71333: PPUSH
71334: LD_VAR 0 2
71338: PUSH
71339: LD_VAR 0 4
71343: ARRAY
71344: PUSH
71345: LD_INT 2
71347: ARRAY
71348: PPUSH
71349: CALL_OW 297
71353: PUSH
71354: LD_VAR 0 5
71358: LESS
71359: IFFALSE 71422
// begin hex := hexes [ i ] ;
71361: LD_ADDR_VAR 0 7
71365: PUSH
71366: LD_VAR 0 2
71370: PUSH
71371: LD_VAR 0 4
71375: ARRAY
71376: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71377: LD_ADDR_VAR 0 5
71381: PUSH
71382: LD_VAR 0 1
71386: PPUSH
71387: LD_VAR 0 2
71391: PUSH
71392: LD_VAR 0 4
71396: ARRAY
71397: PUSH
71398: LD_INT 1
71400: ARRAY
71401: PPUSH
71402: LD_VAR 0 2
71406: PUSH
71407: LD_VAR 0 4
71411: ARRAY
71412: PUSH
71413: LD_INT 2
71415: ARRAY
71416: PPUSH
71417: CALL_OW 297
71421: ST_TO_ADDR
// end ; end ;
71422: GO 71311
71424: POP
71425: POP
// result := hex ;
71426: LD_ADDR_VAR 0 3
71430: PUSH
71431: LD_VAR 0 7
71435: ST_TO_ADDR
// end ;
71436: LD_VAR 0 3
71440: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71441: LD_INT 0
71443: PPUSH
71444: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71445: LD_VAR 0 1
71449: NOT
71450: PUSH
71451: LD_VAR 0 1
71455: PUSH
71456: LD_INT 21
71458: PUSH
71459: LD_INT 2
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: PUSH
71466: LD_INT 23
71468: PUSH
71469: LD_INT 2
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PPUSH
71480: CALL_OW 69
71484: IN
71485: NOT
71486: OR
71487: IFFALSE 71491
// exit ;
71489: GO 71538
// for i = 1 to 3 do
71491: LD_ADDR_VAR 0 3
71495: PUSH
71496: DOUBLE
71497: LD_INT 1
71499: DEC
71500: ST_TO_ADDR
71501: LD_INT 3
71503: PUSH
71504: FOR_TO
71505: IFFALSE 71536
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71507: LD_VAR 0 1
71511: PPUSH
71512: CALL_OW 250
71516: PPUSH
71517: LD_VAR 0 1
71521: PPUSH
71522: CALL_OW 251
71526: PPUSH
71527: LD_INT 1
71529: PPUSH
71530: CALL_OW 453
71534: GO 71504
71536: POP
71537: POP
// end ;
71538: LD_VAR 0 2
71542: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71543: LD_INT 0
71545: PPUSH
71546: PPUSH
71547: PPUSH
71548: PPUSH
71549: PPUSH
71550: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71551: LD_VAR 0 1
71555: NOT
71556: PUSH
71557: LD_VAR 0 2
71561: NOT
71562: OR
71563: PUSH
71564: LD_VAR 0 1
71568: PPUSH
71569: CALL_OW 314
71573: OR
71574: IFFALSE 71578
// exit ;
71576: GO 72019
// x := GetX ( enemy_unit ) ;
71578: LD_ADDR_VAR 0 7
71582: PUSH
71583: LD_VAR 0 2
71587: PPUSH
71588: CALL_OW 250
71592: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71593: LD_ADDR_VAR 0 8
71597: PUSH
71598: LD_VAR 0 2
71602: PPUSH
71603: CALL_OW 251
71607: ST_TO_ADDR
// if not x or not y then
71608: LD_VAR 0 7
71612: NOT
71613: PUSH
71614: LD_VAR 0 8
71618: NOT
71619: OR
71620: IFFALSE 71624
// exit ;
71622: GO 72019
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71624: LD_ADDR_VAR 0 6
71628: PUSH
71629: LD_VAR 0 7
71633: PPUSH
71634: LD_INT 0
71636: PPUSH
71637: LD_INT 4
71639: PPUSH
71640: CALL_OW 272
71644: PUSH
71645: LD_VAR 0 8
71649: PPUSH
71650: LD_INT 0
71652: PPUSH
71653: LD_INT 4
71655: PPUSH
71656: CALL_OW 273
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: LD_VAR 0 7
71669: PPUSH
71670: LD_INT 1
71672: PPUSH
71673: LD_INT 4
71675: PPUSH
71676: CALL_OW 272
71680: PUSH
71681: LD_VAR 0 8
71685: PPUSH
71686: LD_INT 1
71688: PPUSH
71689: LD_INT 4
71691: PPUSH
71692: CALL_OW 273
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_VAR 0 7
71705: PPUSH
71706: LD_INT 2
71708: PPUSH
71709: LD_INT 4
71711: PPUSH
71712: CALL_OW 272
71716: PUSH
71717: LD_VAR 0 8
71721: PPUSH
71722: LD_INT 2
71724: PPUSH
71725: LD_INT 4
71727: PPUSH
71728: CALL_OW 273
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_VAR 0 7
71741: PPUSH
71742: LD_INT 3
71744: PPUSH
71745: LD_INT 4
71747: PPUSH
71748: CALL_OW 272
71752: PUSH
71753: LD_VAR 0 8
71757: PPUSH
71758: LD_INT 3
71760: PPUSH
71761: LD_INT 4
71763: PPUSH
71764: CALL_OW 273
71768: PUSH
71769: EMPTY
71770: LIST
71771: LIST
71772: PUSH
71773: LD_VAR 0 7
71777: PPUSH
71778: LD_INT 4
71780: PPUSH
71781: LD_INT 4
71783: PPUSH
71784: CALL_OW 272
71788: PUSH
71789: LD_VAR 0 8
71793: PPUSH
71794: LD_INT 4
71796: PPUSH
71797: LD_INT 4
71799: PPUSH
71800: CALL_OW 273
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: PUSH
71809: LD_VAR 0 7
71813: PPUSH
71814: LD_INT 5
71816: PPUSH
71817: LD_INT 4
71819: PPUSH
71820: CALL_OW 272
71824: PUSH
71825: LD_VAR 0 8
71829: PPUSH
71830: LD_INT 5
71832: PPUSH
71833: LD_INT 4
71835: PPUSH
71836: CALL_OW 273
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: LIST
71849: LIST
71850: LIST
71851: LIST
71852: ST_TO_ADDR
// for i = tmp downto 1 do
71853: LD_ADDR_VAR 0 4
71857: PUSH
71858: DOUBLE
71859: LD_VAR 0 6
71863: INC
71864: ST_TO_ADDR
71865: LD_INT 1
71867: PUSH
71868: FOR_DOWNTO
71869: IFFALSE 71970
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71871: LD_VAR 0 6
71875: PUSH
71876: LD_VAR 0 4
71880: ARRAY
71881: PUSH
71882: LD_INT 1
71884: ARRAY
71885: PPUSH
71886: LD_VAR 0 6
71890: PUSH
71891: LD_VAR 0 4
71895: ARRAY
71896: PUSH
71897: LD_INT 2
71899: ARRAY
71900: PPUSH
71901: CALL_OW 488
71905: NOT
71906: PUSH
71907: LD_VAR 0 6
71911: PUSH
71912: LD_VAR 0 4
71916: ARRAY
71917: PUSH
71918: LD_INT 1
71920: ARRAY
71921: PPUSH
71922: LD_VAR 0 6
71926: PUSH
71927: LD_VAR 0 4
71931: ARRAY
71932: PUSH
71933: LD_INT 2
71935: ARRAY
71936: PPUSH
71937: CALL_OW 428
71941: PUSH
71942: LD_INT 0
71944: NONEQUAL
71945: OR
71946: IFFALSE 71968
// tmp := Delete ( tmp , i ) ;
71948: LD_ADDR_VAR 0 6
71952: PUSH
71953: LD_VAR 0 6
71957: PPUSH
71958: LD_VAR 0 4
71962: PPUSH
71963: CALL_OW 3
71967: ST_TO_ADDR
71968: GO 71868
71970: POP
71971: POP
// j := GetClosestHex ( unit , tmp ) ;
71972: LD_ADDR_VAR 0 5
71976: PUSH
71977: LD_VAR 0 1
71981: PPUSH
71982: LD_VAR 0 6
71986: PPUSH
71987: CALL 71272 0 2
71991: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71992: LD_VAR 0 1
71996: PPUSH
71997: LD_VAR 0 5
72001: PUSH
72002: LD_INT 1
72004: ARRAY
72005: PPUSH
72006: LD_VAR 0 5
72010: PUSH
72011: LD_INT 2
72013: ARRAY
72014: PPUSH
72015: CALL_OW 111
// end ;
72019: LD_VAR 0 3
72023: RET
// export function PrepareApemanSoldier ( ) ; begin
72024: LD_INT 0
72026: PPUSH
// uc_nation := 0 ;
72027: LD_ADDR_OWVAR 21
72031: PUSH
72032: LD_INT 0
72034: ST_TO_ADDR
// hc_sex := sex_male ;
72035: LD_ADDR_OWVAR 27
72039: PUSH
72040: LD_INT 1
72042: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72043: LD_ADDR_OWVAR 28
72047: PUSH
72048: LD_INT 15
72050: ST_TO_ADDR
// hc_gallery :=  ;
72051: LD_ADDR_OWVAR 33
72055: PUSH
72056: LD_STRING 
72058: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72059: LD_ADDR_OWVAR 31
72063: PUSH
72064: LD_INT 0
72066: PPUSH
72067: LD_INT 3
72069: PPUSH
72070: CALL_OW 12
72074: PUSH
72075: LD_INT 0
72077: PPUSH
72078: LD_INT 3
72080: PPUSH
72081: CALL_OW 12
72085: PUSH
72086: LD_INT 0
72088: PUSH
72089: LD_INT 0
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: LIST
72096: LIST
72097: ST_TO_ADDR
// end ;
72098: LD_VAR 0 1
72102: RET
// export function PrepareApemanEngineer ( ) ; begin
72103: LD_INT 0
72105: PPUSH
// uc_nation := 0 ;
72106: LD_ADDR_OWVAR 21
72110: PUSH
72111: LD_INT 0
72113: ST_TO_ADDR
// hc_sex := sex_male ;
72114: LD_ADDR_OWVAR 27
72118: PUSH
72119: LD_INT 1
72121: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72122: LD_ADDR_OWVAR 28
72126: PUSH
72127: LD_INT 16
72129: ST_TO_ADDR
// hc_gallery :=  ;
72130: LD_ADDR_OWVAR 33
72134: PUSH
72135: LD_STRING 
72137: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72138: LD_ADDR_OWVAR 31
72142: PUSH
72143: LD_INT 0
72145: PPUSH
72146: LD_INT 3
72148: PPUSH
72149: CALL_OW 12
72153: PUSH
72154: LD_INT 0
72156: PPUSH
72157: LD_INT 3
72159: PPUSH
72160: CALL_OW 12
72164: PUSH
72165: LD_INT 0
72167: PUSH
72168: LD_INT 0
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: ST_TO_ADDR
// end ;
72177: LD_VAR 0 1
72181: RET
// export function PrepareApeman ( agressivity ) ; begin
72182: LD_INT 0
72184: PPUSH
// uc_side := 0 ;
72185: LD_ADDR_OWVAR 20
72189: PUSH
72190: LD_INT 0
72192: ST_TO_ADDR
// uc_nation := 0 ;
72193: LD_ADDR_OWVAR 21
72197: PUSH
72198: LD_INT 0
72200: ST_TO_ADDR
// hc_sex := sex_male ;
72201: LD_ADDR_OWVAR 27
72205: PUSH
72206: LD_INT 1
72208: ST_TO_ADDR
// hc_class := class_apeman ;
72209: LD_ADDR_OWVAR 28
72213: PUSH
72214: LD_INT 12
72216: ST_TO_ADDR
// hc_gallery :=  ;
72217: LD_ADDR_OWVAR 33
72221: PUSH
72222: LD_STRING 
72224: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72225: LD_ADDR_OWVAR 35
72229: PUSH
72230: LD_VAR 0 1
72234: NEG
72235: PPUSH
72236: LD_VAR 0 1
72240: PPUSH
72241: CALL_OW 12
72245: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72246: LD_ADDR_OWVAR 31
72250: PUSH
72251: LD_INT 0
72253: PPUSH
72254: LD_INT 3
72256: PPUSH
72257: CALL_OW 12
72261: PUSH
72262: LD_INT 0
72264: PPUSH
72265: LD_INT 3
72267: PPUSH
72268: CALL_OW 12
72272: PUSH
72273: LD_INT 0
72275: PUSH
72276: LD_INT 0
72278: PUSH
72279: EMPTY
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: ST_TO_ADDR
// end ;
72285: LD_VAR 0 2
72289: RET
// export function PrepareTiger ( agressivity ) ; begin
72290: LD_INT 0
72292: PPUSH
// uc_side := 0 ;
72293: LD_ADDR_OWVAR 20
72297: PUSH
72298: LD_INT 0
72300: ST_TO_ADDR
// uc_nation := 0 ;
72301: LD_ADDR_OWVAR 21
72305: PUSH
72306: LD_INT 0
72308: ST_TO_ADDR
// hc_class := class_tiger ;
72309: LD_ADDR_OWVAR 28
72313: PUSH
72314: LD_INT 14
72316: ST_TO_ADDR
// hc_gallery :=  ;
72317: LD_ADDR_OWVAR 33
72321: PUSH
72322: LD_STRING 
72324: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72325: LD_ADDR_OWVAR 35
72329: PUSH
72330: LD_VAR 0 1
72334: NEG
72335: PPUSH
72336: LD_VAR 0 1
72340: PPUSH
72341: CALL_OW 12
72345: ST_TO_ADDR
// end ;
72346: LD_VAR 0 2
72350: RET
// export function PrepareEnchidna ( ) ; begin
72351: LD_INT 0
72353: PPUSH
// uc_side := 0 ;
72354: LD_ADDR_OWVAR 20
72358: PUSH
72359: LD_INT 0
72361: ST_TO_ADDR
// uc_nation := 0 ;
72362: LD_ADDR_OWVAR 21
72366: PUSH
72367: LD_INT 0
72369: ST_TO_ADDR
// hc_class := class_baggie ;
72370: LD_ADDR_OWVAR 28
72374: PUSH
72375: LD_INT 13
72377: ST_TO_ADDR
// hc_gallery :=  ;
72378: LD_ADDR_OWVAR 33
72382: PUSH
72383: LD_STRING 
72385: ST_TO_ADDR
// end ;
72386: LD_VAR 0 1
72390: RET
// export function PrepareFrog ( ) ; begin
72391: LD_INT 0
72393: PPUSH
// uc_side := 0 ;
72394: LD_ADDR_OWVAR 20
72398: PUSH
72399: LD_INT 0
72401: ST_TO_ADDR
// uc_nation := 0 ;
72402: LD_ADDR_OWVAR 21
72406: PUSH
72407: LD_INT 0
72409: ST_TO_ADDR
// hc_class := class_frog ;
72410: LD_ADDR_OWVAR 28
72414: PUSH
72415: LD_INT 19
72417: ST_TO_ADDR
// hc_gallery :=  ;
72418: LD_ADDR_OWVAR 33
72422: PUSH
72423: LD_STRING 
72425: ST_TO_ADDR
// end ;
72426: LD_VAR 0 1
72430: RET
// export function PrepareFish ( ) ; begin
72431: LD_INT 0
72433: PPUSH
// uc_side := 0 ;
72434: LD_ADDR_OWVAR 20
72438: PUSH
72439: LD_INT 0
72441: ST_TO_ADDR
// uc_nation := 0 ;
72442: LD_ADDR_OWVAR 21
72446: PUSH
72447: LD_INT 0
72449: ST_TO_ADDR
// hc_class := class_fish ;
72450: LD_ADDR_OWVAR 28
72454: PUSH
72455: LD_INT 20
72457: ST_TO_ADDR
// hc_gallery :=  ;
72458: LD_ADDR_OWVAR 33
72462: PUSH
72463: LD_STRING 
72465: ST_TO_ADDR
// end ;
72466: LD_VAR 0 1
72470: RET
// export function PrepareBird ( ) ; begin
72471: LD_INT 0
72473: PPUSH
// uc_side := 0 ;
72474: LD_ADDR_OWVAR 20
72478: PUSH
72479: LD_INT 0
72481: ST_TO_ADDR
// uc_nation := 0 ;
72482: LD_ADDR_OWVAR 21
72486: PUSH
72487: LD_INT 0
72489: ST_TO_ADDR
// hc_class := class_phororhacos ;
72490: LD_ADDR_OWVAR 28
72494: PUSH
72495: LD_INT 18
72497: ST_TO_ADDR
// hc_gallery :=  ;
72498: LD_ADDR_OWVAR 33
72502: PUSH
72503: LD_STRING 
72505: ST_TO_ADDR
// end ;
72506: LD_VAR 0 1
72510: RET
// export function PrepareHorse ( ) ; begin
72511: LD_INT 0
72513: PPUSH
// uc_side := 0 ;
72514: LD_ADDR_OWVAR 20
72518: PUSH
72519: LD_INT 0
72521: ST_TO_ADDR
// uc_nation := 0 ;
72522: LD_ADDR_OWVAR 21
72526: PUSH
72527: LD_INT 0
72529: ST_TO_ADDR
// hc_class := class_horse ;
72530: LD_ADDR_OWVAR 28
72534: PUSH
72535: LD_INT 21
72537: ST_TO_ADDR
// hc_gallery :=  ;
72538: LD_ADDR_OWVAR 33
72542: PUSH
72543: LD_STRING 
72545: ST_TO_ADDR
// end ;
72546: LD_VAR 0 1
72550: RET
// export function PrepareMastodont ( ) ; begin
72551: LD_INT 0
72553: PPUSH
// uc_side := 0 ;
72554: LD_ADDR_OWVAR 20
72558: PUSH
72559: LD_INT 0
72561: ST_TO_ADDR
// uc_nation := 0 ;
72562: LD_ADDR_OWVAR 21
72566: PUSH
72567: LD_INT 0
72569: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72570: LD_ADDR_OWVAR 37
72574: PUSH
72575: LD_INT 31
72577: ST_TO_ADDR
// vc_control := control_rider ;
72578: LD_ADDR_OWVAR 38
72582: PUSH
72583: LD_INT 4
72585: ST_TO_ADDR
// end ;
72586: LD_VAR 0 1
72590: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72591: LD_INT 0
72593: PPUSH
72594: PPUSH
72595: PPUSH
// uc_side = 0 ;
72596: LD_ADDR_OWVAR 20
72600: PUSH
72601: LD_INT 0
72603: ST_TO_ADDR
// uc_nation = 0 ;
72604: LD_ADDR_OWVAR 21
72608: PUSH
72609: LD_INT 0
72611: ST_TO_ADDR
// InitHc_All ( ) ;
72612: CALL_OW 584
// InitVc ;
72616: CALL_OW 20
// if mastodonts then
72620: LD_VAR 0 6
72624: IFFALSE 72691
// for i = 1 to mastodonts do
72626: LD_ADDR_VAR 0 11
72630: PUSH
72631: DOUBLE
72632: LD_INT 1
72634: DEC
72635: ST_TO_ADDR
72636: LD_VAR 0 6
72640: PUSH
72641: FOR_TO
72642: IFFALSE 72689
// begin vc_chassis := 31 ;
72644: LD_ADDR_OWVAR 37
72648: PUSH
72649: LD_INT 31
72651: ST_TO_ADDR
// vc_control := control_rider ;
72652: LD_ADDR_OWVAR 38
72656: PUSH
72657: LD_INT 4
72659: ST_TO_ADDR
// animal := CreateVehicle ;
72660: LD_ADDR_VAR 0 12
72664: PUSH
72665: CALL_OW 45
72669: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72670: LD_VAR 0 12
72674: PPUSH
72675: LD_VAR 0 8
72679: PPUSH
72680: LD_INT 0
72682: PPUSH
72683: CALL 74826 0 3
// end ;
72687: GO 72641
72689: POP
72690: POP
// if horses then
72691: LD_VAR 0 5
72695: IFFALSE 72762
// for i = 1 to horses do
72697: LD_ADDR_VAR 0 11
72701: PUSH
72702: DOUBLE
72703: LD_INT 1
72705: DEC
72706: ST_TO_ADDR
72707: LD_VAR 0 5
72711: PUSH
72712: FOR_TO
72713: IFFALSE 72760
// begin hc_class := 21 ;
72715: LD_ADDR_OWVAR 28
72719: PUSH
72720: LD_INT 21
72722: ST_TO_ADDR
// hc_gallery :=  ;
72723: LD_ADDR_OWVAR 33
72727: PUSH
72728: LD_STRING 
72730: ST_TO_ADDR
// animal := CreateHuman ;
72731: LD_ADDR_VAR 0 12
72735: PUSH
72736: CALL_OW 44
72740: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72741: LD_VAR 0 12
72745: PPUSH
72746: LD_VAR 0 8
72750: PPUSH
72751: LD_INT 0
72753: PPUSH
72754: CALL 74826 0 3
// end ;
72758: GO 72712
72760: POP
72761: POP
// if birds then
72762: LD_VAR 0 1
72766: IFFALSE 72833
// for i = 1 to birds do
72768: LD_ADDR_VAR 0 11
72772: PUSH
72773: DOUBLE
72774: LD_INT 1
72776: DEC
72777: ST_TO_ADDR
72778: LD_VAR 0 1
72782: PUSH
72783: FOR_TO
72784: IFFALSE 72831
// begin hc_class = 18 ;
72786: LD_ADDR_OWVAR 28
72790: PUSH
72791: LD_INT 18
72793: ST_TO_ADDR
// hc_gallery =  ;
72794: LD_ADDR_OWVAR 33
72798: PUSH
72799: LD_STRING 
72801: ST_TO_ADDR
// animal := CreateHuman ;
72802: LD_ADDR_VAR 0 12
72806: PUSH
72807: CALL_OW 44
72811: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72812: LD_VAR 0 12
72816: PPUSH
72817: LD_VAR 0 8
72821: PPUSH
72822: LD_INT 0
72824: PPUSH
72825: CALL 74826 0 3
// end ;
72829: GO 72783
72831: POP
72832: POP
// if tigers then
72833: LD_VAR 0 2
72837: IFFALSE 72921
// for i = 1 to tigers do
72839: LD_ADDR_VAR 0 11
72843: PUSH
72844: DOUBLE
72845: LD_INT 1
72847: DEC
72848: ST_TO_ADDR
72849: LD_VAR 0 2
72853: PUSH
72854: FOR_TO
72855: IFFALSE 72919
// begin hc_class = class_tiger ;
72857: LD_ADDR_OWVAR 28
72861: PUSH
72862: LD_INT 14
72864: ST_TO_ADDR
// hc_gallery =  ;
72865: LD_ADDR_OWVAR 33
72869: PUSH
72870: LD_STRING 
72872: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72873: LD_ADDR_OWVAR 35
72877: PUSH
72878: LD_INT 7
72880: NEG
72881: PPUSH
72882: LD_INT 7
72884: PPUSH
72885: CALL_OW 12
72889: ST_TO_ADDR
// animal := CreateHuman ;
72890: LD_ADDR_VAR 0 12
72894: PUSH
72895: CALL_OW 44
72899: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72900: LD_VAR 0 12
72904: PPUSH
72905: LD_VAR 0 8
72909: PPUSH
72910: LD_INT 0
72912: PPUSH
72913: CALL 74826 0 3
// end ;
72917: GO 72854
72919: POP
72920: POP
// if apemans then
72921: LD_VAR 0 3
72925: IFFALSE 73048
// for i = 1 to apemans do
72927: LD_ADDR_VAR 0 11
72931: PUSH
72932: DOUBLE
72933: LD_INT 1
72935: DEC
72936: ST_TO_ADDR
72937: LD_VAR 0 3
72941: PUSH
72942: FOR_TO
72943: IFFALSE 73046
// begin hc_class = class_apeman ;
72945: LD_ADDR_OWVAR 28
72949: PUSH
72950: LD_INT 12
72952: ST_TO_ADDR
// hc_gallery =  ;
72953: LD_ADDR_OWVAR 33
72957: PUSH
72958: LD_STRING 
72960: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72961: LD_ADDR_OWVAR 35
72965: PUSH
72966: LD_INT 2
72968: NEG
72969: PPUSH
72970: LD_INT 2
72972: PPUSH
72973: CALL_OW 12
72977: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72978: LD_ADDR_OWVAR 31
72982: PUSH
72983: LD_INT 1
72985: PPUSH
72986: LD_INT 3
72988: PPUSH
72989: CALL_OW 12
72993: PUSH
72994: LD_INT 1
72996: PPUSH
72997: LD_INT 3
72999: PPUSH
73000: CALL_OW 12
73004: PUSH
73005: LD_INT 0
73007: PUSH
73008: LD_INT 0
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: ST_TO_ADDR
// animal := CreateHuman ;
73017: LD_ADDR_VAR 0 12
73021: PUSH
73022: CALL_OW 44
73026: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73027: LD_VAR 0 12
73031: PPUSH
73032: LD_VAR 0 8
73036: PPUSH
73037: LD_INT 0
73039: PPUSH
73040: CALL 74826 0 3
// end ;
73044: GO 72942
73046: POP
73047: POP
// if enchidnas then
73048: LD_VAR 0 4
73052: IFFALSE 73119
// for i = 1 to enchidnas do
73054: LD_ADDR_VAR 0 11
73058: PUSH
73059: DOUBLE
73060: LD_INT 1
73062: DEC
73063: ST_TO_ADDR
73064: LD_VAR 0 4
73068: PUSH
73069: FOR_TO
73070: IFFALSE 73117
// begin hc_class = 13 ;
73072: LD_ADDR_OWVAR 28
73076: PUSH
73077: LD_INT 13
73079: ST_TO_ADDR
// hc_gallery =  ;
73080: LD_ADDR_OWVAR 33
73084: PUSH
73085: LD_STRING 
73087: ST_TO_ADDR
// animal := CreateHuman ;
73088: LD_ADDR_VAR 0 12
73092: PUSH
73093: CALL_OW 44
73097: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73098: LD_VAR 0 12
73102: PPUSH
73103: LD_VAR 0 8
73107: PPUSH
73108: LD_INT 0
73110: PPUSH
73111: CALL 74826 0 3
// end ;
73115: GO 73069
73117: POP
73118: POP
// if fishes then
73119: LD_VAR 0 7
73123: IFFALSE 73190
// for i = 1 to fishes do
73125: LD_ADDR_VAR 0 11
73129: PUSH
73130: DOUBLE
73131: LD_INT 1
73133: DEC
73134: ST_TO_ADDR
73135: LD_VAR 0 7
73139: PUSH
73140: FOR_TO
73141: IFFALSE 73188
// begin hc_class = 20 ;
73143: LD_ADDR_OWVAR 28
73147: PUSH
73148: LD_INT 20
73150: ST_TO_ADDR
// hc_gallery =  ;
73151: LD_ADDR_OWVAR 33
73155: PUSH
73156: LD_STRING 
73158: ST_TO_ADDR
// animal := CreateHuman ;
73159: LD_ADDR_VAR 0 12
73163: PUSH
73164: CALL_OW 44
73168: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73169: LD_VAR 0 12
73173: PPUSH
73174: LD_VAR 0 9
73178: PPUSH
73179: LD_INT 0
73181: PPUSH
73182: CALL 74826 0 3
// end ;
73186: GO 73140
73188: POP
73189: POP
// end ;
73190: LD_VAR 0 10
73194: RET
// export function WantHeal ( sci , unit ) ; begin
73195: LD_INT 0
73197: PPUSH
// if GetTaskList ( sci ) > 0 then
73198: LD_VAR 0 1
73202: PPUSH
73203: CALL_OW 437
73207: PUSH
73208: LD_INT 0
73210: GREATER
73211: IFFALSE 73281
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73213: LD_VAR 0 1
73217: PPUSH
73218: CALL_OW 437
73222: PUSH
73223: LD_INT 1
73225: ARRAY
73226: PUSH
73227: LD_INT 1
73229: ARRAY
73230: PUSH
73231: LD_STRING l
73233: EQUAL
73234: PUSH
73235: LD_VAR 0 1
73239: PPUSH
73240: CALL_OW 437
73244: PUSH
73245: LD_INT 1
73247: ARRAY
73248: PUSH
73249: LD_INT 4
73251: ARRAY
73252: PUSH
73253: LD_VAR 0 2
73257: EQUAL
73258: AND
73259: IFFALSE 73271
// result := true else
73261: LD_ADDR_VAR 0 3
73265: PUSH
73266: LD_INT 1
73268: ST_TO_ADDR
73269: GO 73279
// result := false ;
73271: LD_ADDR_VAR 0 3
73275: PUSH
73276: LD_INT 0
73278: ST_TO_ADDR
// end else
73279: GO 73289
// result := false ;
73281: LD_ADDR_VAR 0 3
73285: PUSH
73286: LD_INT 0
73288: ST_TO_ADDR
// end ;
73289: LD_VAR 0 3
73293: RET
// export function HealTarget ( sci ) ; begin
73294: LD_INT 0
73296: PPUSH
// if not sci then
73297: LD_VAR 0 1
73301: NOT
73302: IFFALSE 73306
// exit ;
73304: GO 73371
// result := 0 ;
73306: LD_ADDR_VAR 0 2
73310: PUSH
73311: LD_INT 0
73313: ST_TO_ADDR
// if GetTaskList ( sci ) then
73314: LD_VAR 0 1
73318: PPUSH
73319: CALL_OW 437
73323: IFFALSE 73371
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73325: LD_VAR 0 1
73329: PPUSH
73330: CALL_OW 437
73334: PUSH
73335: LD_INT 1
73337: ARRAY
73338: PUSH
73339: LD_INT 1
73341: ARRAY
73342: PUSH
73343: LD_STRING l
73345: EQUAL
73346: IFFALSE 73371
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73348: LD_ADDR_VAR 0 2
73352: PUSH
73353: LD_VAR 0 1
73357: PPUSH
73358: CALL_OW 437
73362: PUSH
73363: LD_INT 1
73365: ARRAY
73366: PUSH
73367: LD_INT 4
73369: ARRAY
73370: ST_TO_ADDR
// end ;
73371: LD_VAR 0 2
73375: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73376: LD_INT 0
73378: PPUSH
73379: PPUSH
73380: PPUSH
73381: PPUSH
// if not base_units then
73382: LD_VAR 0 1
73386: NOT
73387: IFFALSE 73391
// exit ;
73389: GO 73478
// result := false ;
73391: LD_ADDR_VAR 0 2
73395: PUSH
73396: LD_INT 0
73398: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73399: LD_ADDR_VAR 0 5
73403: PUSH
73404: LD_VAR 0 1
73408: PPUSH
73409: LD_INT 21
73411: PUSH
73412: LD_INT 3
73414: PUSH
73415: EMPTY
73416: LIST
73417: LIST
73418: PPUSH
73419: CALL_OW 72
73423: ST_TO_ADDR
// if not tmp then
73424: LD_VAR 0 5
73428: NOT
73429: IFFALSE 73433
// exit ;
73431: GO 73478
// for i in tmp do
73433: LD_ADDR_VAR 0 3
73437: PUSH
73438: LD_VAR 0 5
73442: PUSH
73443: FOR_IN
73444: IFFALSE 73476
// begin result := EnemyInRange ( i , 22 ) ;
73446: LD_ADDR_VAR 0 2
73450: PUSH
73451: LD_VAR 0 3
73455: PPUSH
73456: LD_INT 22
73458: PPUSH
73459: CALL 71147 0 2
73463: ST_TO_ADDR
// if result then
73464: LD_VAR 0 2
73468: IFFALSE 73474
// exit ;
73470: POP
73471: POP
73472: GO 73478
// end ;
73474: GO 73443
73476: POP
73477: POP
// end ;
73478: LD_VAR 0 2
73482: RET
// export function FilterByTag ( units , tag ) ; begin
73483: LD_INT 0
73485: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73486: LD_ADDR_VAR 0 3
73490: PUSH
73491: LD_VAR 0 1
73495: PPUSH
73496: LD_INT 120
73498: PUSH
73499: LD_VAR 0 2
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: PPUSH
73508: CALL_OW 72
73512: ST_TO_ADDR
// end ;
73513: LD_VAR 0 3
73517: RET
// export function IsDriver ( un ) ; begin
73518: LD_INT 0
73520: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73521: LD_ADDR_VAR 0 2
73525: PUSH
73526: LD_VAR 0 1
73530: PUSH
73531: LD_INT 55
73533: PUSH
73534: EMPTY
73535: LIST
73536: PPUSH
73537: CALL_OW 69
73541: IN
73542: ST_TO_ADDR
// end ;
73543: LD_VAR 0 2
73547: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73548: LD_INT 0
73550: PPUSH
73551: PPUSH
// list := [ ] ;
73552: LD_ADDR_VAR 0 5
73556: PUSH
73557: EMPTY
73558: ST_TO_ADDR
// case d of 0 :
73559: LD_VAR 0 3
73563: PUSH
73564: LD_INT 0
73566: DOUBLE
73567: EQUAL
73568: IFTRUE 73572
73570: GO 73705
73572: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73573: LD_ADDR_VAR 0 5
73577: PUSH
73578: LD_VAR 0 1
73582: PUSH
73583: LD_INT 4
73585: MINUS
73586: PUSH
73587: LD_VAR 0 2
73591: PUSH
73592: LD_INT 4
73594: MINUS
73595: PUSH
73596: LD_INT 2
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: LIST
73603: PUSH
73604: LD_VAR 0 1
73608: PUSH
73609: LD_INT 3
73611: MINUS
73612: PUSH
73613: LD_VAR 0 2
73617: PUSH
73618: LD_INT 1
73620: PUSH
73621: EMPTY
73622: LIST
73623: LIST
73624: LIST
73625: PUSH
73626: LD_VAR 0 1
73630: PUSH
73631: LD_INT 4
73633: PLUS
73634: PUSH
73635: LD_VAR 0 2
73639: PUSH
73640: LD_INT 4
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: LIST
73647: PUSH
73648: LD_VAR 0 1
73652: PUSH
73653: LD_INT 3
73655: PLUS
73656: PUSH
73657: LD_VAR 0 2
73661: PUSH
73662: LD_INT 3
73664: PLUS
73665: PUSH
73666: LD_INT 5
73668: PUSH
73669: EMPTY
73670: LIST
73671: LIST
73672: LIST
73673: PUSH
73674: LD_VAR 0 1
73678: PUSH
73679: LD_VAR 0 2
73683: PUSH
73684: LD_INT 4
73686: PLUS
73687: PUSH
73688: LD_INT 0
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: LIST
73695: PUSH
73696: EMPTY
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: ST_TO_ADDR
// end ; 1 :
73703: GO 74403
73705: LD_INT 1
73707: DOUBLE
73708: EQUAL
73709: IFTRUE 73713
73711: GO 73846
73713: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73714: LD_ADDR_VAR 0 5
73718: PUSH
73719: LD_VAR 0 1
73723: PUSH
73724: LD_VAR 0 2
73728: PUSH
73729: LD_INT 4
73731: MINUS
73732: PUSH
73733: LD_INT 3
73735: PUSH
73736: EMPTY
73737: LIST
73738: LIST
73739: LIST
73740: PUSH
73741: LD_VAR 0 1
73745: PUSH
73746: LD_INT 3
73748: MINUS
73749: PUSH
73750: LD_VAR 0 2
73754: PUSH
73755: LD_INT 3
73757: MINUS
73758: PUSH
73759: LD_INT 2
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: LIST
73766: PUSH
73767: LD_VAR 0 1
73771: PUSH
73772: LD_INT 4
73774: MINUS
73775: PUSH
73776: LD_VAR 0 2
73780: PUSH
73781: LD_INT 1
73783: PUSH
73784: EMPTY
73785: LIST
73786: LIST
73787: LIST
73788: PUSH
73789: LD_VAR 0 1
73793: PUSH
73794: LD_VAR 0 2
73798: PUSH
73799: LD_INT 3
73801: PLUS
73802: PUSH
73803: LD_INT 0
73805: PUSH
73806: EMPTY
73807: LIST
73808: LIST
73809: LIST
73810: PUSH
73811: LD_VAR 0 1
73815: PUSH
73816: LD_INT 4
73818: PLUS
73819: PUSH
73820: LD_VAR 0 2
73824: PUSH
73825: LD_INT 4
73827: PLUS
73828: PUSH
73829: LD_INT 5
73831: PUSH
73832: EMPTY
73833: LIST
73834: LIST
73835: LIST
73836: PUSH
73837: EMPTY
73838: LIST
73839: LIST
73840: LIST
73841: LIST
73842: LIST
73843: ST_TO_ADDR
// end ; 2 :
73844: GO 74403
73846: LD_INT 2
73848: DOUBLE
73849: EQUAL
73850: IFTRUE 73854
73852: GO 73983
73854: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73855: LD_ADDR_VAR 0 5
73859: PUSH
73860: LD_VAR 0 1
73864: PUSH
73865: LD_VAR 0 2
73869: PUSH
73870: LD_INT 3
73872: MINUS
73873: PUSH
73874: LD_INT 3
73876: PUSH
73877: EMPTY
73878: LIST
73879: LIST
73880: LIST
73881: PUSH
73882: LD_VAR 0 1
73886: PUSH
73887: LD_INT 4
73889: PLUS
73890: PUSH
73891: LD_VAR 0 2
73895: PUSH
73896: LD_INT 4
73898: PUSH
73899: EMPTY
73900: LIST
73901: LIST
73902: LIST
73903: PUSH
73904: LD_VAR 0 1
73908: PUSH
73909: LD_VAR 0 2
73913: PUSH
73914: LD_INT 4
73916: PLUS
73917: PUSH
73918: LD_INT 0
73920: PUSH
73921: EMPTY
73922: LIST
73923: LIST
73924: LIST
73925: PUSH
73926: LD_VAR 0 1
73930: PUSH
73931: LD_INT 3
73933: MINUS
73934: PUSH
73935: LD_VAR 0 2
73939: PUSH
73940: LD_INT 1
73942: PUSH
73943: EMPTY
73944: LIST
73945: LIST
73946: LIST
73947: PUSH
73948: LD_VAR 0 1
73952: PUSH
73953: LD_INT 4
73955: MINUS
73956: PUSH
73957: LD_VAR 0 2
73961: PUSH
73962: LD_INT 4
73964: MINUS
73965: PUSH
73966: LD_INT 2
73968: PUSH
73969: EMPTY
73970: LIST
73971: LIST
73972: LIST
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: LIST
73978: LIST
73979: LIST
73980: ST_TO_ADDR
// end ; 3 :
73981: GO 74403
73983: LD_INT 3
73985: DOUBLE
73986: EQUAL
73987: IFTRUE 73991
73989: GO 74124
73991: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73992: LD_ADDR_VAR 0 5
73996: PUSH
73997: LD_VAR 0 1
74001: PUSH
74002: LD_INT 3
74004: PLUS
74005: PUSH
74006: LD_VAR 0 2
74010: PUSH
74011: LD_INT 4
74013: PUSH
74014: EMPTY
74015: LIST
74016: LIST
74017: LIST
74018: PUSH
74019: LD_VAR 0 1
74023: PUSH
74024: LD_INT 4
74026: PLUS
74027: PUSH
74028: LD_VAR 0 2
74032: PUSH
74033: LD_INT 4
74035: PLUS
74036: PUSH
74037: LD_INT 5
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: LIST
74044: PUSH
74045: LD_VAR 0 1
74049: PUSH
74050: LD_INT 4
74052: MINUS
74053: PUSH
74054: LD_VAR 0 2
74058: PUSH
74059: LD_INT 1
74061: PUSH
74062: EMPTY
74063: LIST
74064: LIST
74065: LIST
74066: PUSH
74067: LD_VAR 0 1
74071: PUSH
74072: LD_VAR 0 2
74076: PUSH
74077: LD_INT 4
74079: MINUS
74080: PUSH
74081: LD_INT 3
74083: PUSH
74084: EMPTY
74085: LIST
74086: LIST
74087: LIST
74088: PUSH
74089: LD_VAR 0 1
74093: PUSH
74094: LD_INT 3
74096: MINUS
74097: PUSH
74098: LD_VAR 0 2
74102: PUSH
74103: LD_INT 3
74105: MINUS
74106: PUSH
74107: LD_INT 2
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: LIST
74114: PUSH
74115: EMPTY
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: ST_TO_ADDR
// end ; 4 :
74122: GO 74403
74124: LD_INT 4
74126: DOUBLE
74127: EQUAL
74128: IFTRUE 74132
74130: GO 74265
74132: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74133: LD_ADDR_VAR 0 5
74137: PUSH
74138: LD_VAR 0 1
74142: PUSH
74143: LD_VAR 0 2
74147: PUSH
74148: LD_INT 4
74150: PLUS
74151: PUSH
74152: LD_INT 0
74154: PUSH
74155: EMPTY
74156: LIST
74157: LIST
74158: LIST
74159: PUSH
74160: LD_VAR 0 1
74164: PUSH
74165: LD_INT 3
74167: PLUS
74168: PUSH
74169: LD_VAR 0 2
74173: PUSH
74174: LD_INT 3
74176: PLUS
74177: PUSH
74178: LD_INT 5
74180: PUSH
74181: EMPTY
74182: LIST
74183: LIST
74184: LIST
74185: PUSH
74186: LD_VAR 0 1
74190: PUSH
74191: LD_INT 4
74193: PLUS
74194: PUSH
74195: LD_VAR 0 2
74199: PUSH
74200: LD_INT 4
74202: PUSH
74203: EMPTY
74204: LIST
74205: LIST
74206: LIST
74207: PUSH
74208: LD_VAR 0 1
74212: PUSH
74213: LD_VAR 0 2
74217: PUSH
74218: LD_INT 3
74220: MINUS
74221: PUSH
74222: LD_INT 3
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: LIST
74229: PUSH
74230: LD_VAR 0 1
74234: PUSH
74235: LD_INT 4
74237: MINUS
74238: PUSH
74239: LD_VAR 0 2
74243: PUSH
74244: LD_INT 4
74246: MINUS
74247: PUSH
74248: LD_INT 2
74250: PUSH
74251: EMPTY
74252: LIST
74253: LIST
74254: LIST
74255: PUSH
74256: EMPTY
74257: LIST
74258: LIST
74259: LIST
74260: LIST
74261: LIST
74262: ST_TO_ADDR
// end ; 5 :
74263: GO 74403
74265: LD_INT 5
74267: DOUBLE
74268: EQUAL
74269: IFTRUE 74273
74271: GO 74402
74273: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74274: LD_ADDR_VAR 0 5
74278: PUSH
74279: LD_VAR 0 1
74283: PUSH
74284: LD_INT 4
74286: MINUS
74287: PUSH
74288: LD_VAR 0 2
74292: PUSH
74293: LD_INT 1
74295: PUSH
74296: EMPTY
74297: LIST
74298: LIST
74299: LIST
74300: PUSH
74301: LD_VAR 0 1
74305: PUSH
74306: LD_VAR 0 2
74310: PUSH
74311: LD_INT 4
74313: MINUS
74314: PUSH
74315: LD_INT 3
74317: PUSH
74318: EMPTY
74319: LIST
74320: LIST
74321: LIST
74322: PUSH
74323: LD_VAR 0 1
74327: PUSH
74328: LD_INT 4
74330: PLUS
74331: PUSH
74332: LD_VAR 0 2
74336: PUSH
74337: LD_INT 4
74339: PLUS
74340: PUSH
74341: LD_INT 5
74343: PUSH
74344: EMPTY
74345: LIST
74346: LIST
74347: LIST
74348: PUSH
74349: LD_VAR 0 1
74353: PUSH
74354: LD_INT 3
74356: PLUS
74357: PUSH
74358: LD_VAR 0 2
74362: PUSH
74363: LD_INT 4
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: LIST
74370: PUSH
74371: LD_VAR 0 1
74375: PUSH
74376: LD_VAR 0 2
74380: PUSH
74381: LD_INT 3
74383: PLUS
74384: PUSH
74385: LD_INT 0
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: LIST
74392: PUSH
74393: EMPTY
74394: LIST
74395: LIST
74396: LIST
74397: LIST
74398: LIST
74399: ST_TO_ADDR
// end ; end ;
74400: GO 74403
74402: POP
// result := list ;
74403: LD_ADDR_VAR 0 4
74407: PUSH
74408: LD_VAR 0 5
74412: ST_TO_ADDR
// end ;
74413: LD_VAR 0 4
74417: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74418: LD_INT 0
74420: PPUSH
74421: PPUSH
74422: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74423: LD_VAR 0 1
74427: NOT
74428: PUSH
74429: LD_VAR 0 2
74433: PUSH
74434: LD_INT 1
74436: PUSH
74437: LD_INT 2
74439: PUSH
74440: LD_INT 3
74442: PUSH
74443: LD_INT 4
74445: PUSH
74446: EMPTY
74447: LIST
74448: LIST
74449: LIST
74450: LIST
74451: IN
74452: NOT
74453: OR
74454: IFFALSE 74458
// exit ;
74456: GO 74550
// tmp := [ ] ;
74458: LD_ADDR_VAR 0 5
74462: PUSH
74463: EMPTY
74464: ST_TO_ADDR
// for i in units do
74465: LD_ADDR_VAR 0 4
74469: PUSH
74470: LD_VAR 0 1
74474: PUSH
74475: FOR_IN
74476: IFFALSE 74519
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74478: LD_ADDR_VAR 0 5
74482: PUSH
74483: LD_VAR 0 5
74487: PPUSH
74488: LD_VAR 0 5
74492: PUSH
74493: LD_INT 1
74495: PLUS
74496: PPUSH
74497: LD_VAR 0 4
74501: PPUSH
74502: LD_VAR 0 2
74506: PPUSH
74507: CALL_OW 259
74511: PPUSH
74512: CALL_OW 2
74516: ST_TO_ADDR
74517: GO 74475
74519: POP
74520: POP
// if not tmp then
74521: LD_VAR 0 5
74525: NOT
74526: IFFALSE 74530
// exit ;
74528: GO 74550
// result := SortListByListDesc ( units , tmp ) ;
74530: LD_ADDR_VAR 0 3
74534: PUSH
74535: LD_VAR 0 1
74539: PPUSH
74540: LD_VAR 0 5
74544: PPUSH
74545: CALL_OW 77
74549: ST_TO_ADDR
// end ;
74550: LD_VAR 0 3
74554: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74555: LD_INT 0
74557: PPUSH
74558: PPUSH
74559: PPUSH
// result := false ;
74560: LD_ADDR_VAR 0 3
74564: PUSH
74565: LD_INT 0
74567: ST_TO_ADDR
// x := GetX ( building ) ;
74568: LD_ADDR_VAR 0 4
74572: PUSH
74573: LD_VAR 0 2
74577: PPUSH
74578: CALL_OW 250
74582: ST_TO_ADDR
// y := GetY ( building ) ;
74583: LD_ADDR_VAR 0 5
74587: PUSH
74588: LD_VAR 0 2
74592: PPUSH
74593: CALL_OW 251
74597: ST_TO_ADDR
// if not building or not x or not y then
74598: LD_VAR 0 2
74602: NOT
74603: PUSH
74604: LD_VAR 0 4
74608: NOT
74609: OR
74610: PUSH
74611: LD_VAR 0 5
74615: NOT
74616: OR
74617: IFFALSE 74621
// exit ;
74619: GO 74713
// if GetTaskList ( unit ) then
74621: LD_VAR 0 1
74625: PPUSH
74626: CALL_OW 437
74630: IFFALSE 74713
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74632: LD_STRING e
74634: PUSH
74635: LD_VAR 0 1
74639: PPUSH
74640: CALL_OW 437
74644: PUSH
74645: LD_INT 1
74647: ARRAY
74648: PUSH
74649: LD_INT 1
74651: ARRAY
74652: EQUAL
74653: PUSH
74654: LD_VAR 0 4
74658: PUSH
74659: LD_VAR 0 1
74663: PPUSH
74664: CALL_OW 437
74668: PUSH
74669: LD_INT 1
74671: ARRAY
74672: PUSH
74673: LD_INT 2
74675: ARRAY
74676: EQUAL
74677: AND
74678: PUSH
74679: LD_VAR 0 5
74683: PUSH
74684: LD_VAR 0 1
74688: PPUSH
74689: CALL_OW 437
74693: PUSH
74694: LD_INT 1
74696: ARRAY
74697: PUSH
74698: LD_INT 3
74700: ARRAY
74701: EQUAL
74702: AND
74703: IFFALSE 74713
// result := true end ;
74705: LD_ADDR_VAR 0 3
74709: PUSH
74710: LD_INT 1
74712: ST_TO_ADDR
// end ;
74713: LD_VAR 0 3
74717: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74718: LD_INT 0
74720: PPUSH
// result := false ;
74721: LD_ADDR_VAR 0 4
74725: PUSH
74726: LD_INT 0
74728: ST_TO_ADDR
// if GetTaskList ( unit ) then
74729: LD_VAR 0 1
74733: PPUSH
74734: CALL_OW 437
74738: IFFALSE 74821
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74740: LD_STRING M
74742: PUSH
74743: LD_VAR 0 1
74747: PPUSH
74748: CALL_OW 437
74752: PUSH
74753: LD_INT 1
74755: ARRAY
74756: PUSH
74757: LD_INT 1
74759: ARRAY
74760: EQUAL
74761: PUSH
74762: LD_VAR 0 2
74766: PUSH
74767: LD_VAR 0 1
74771: PPUSH
74772: CALL_OW 437
74776: PUSH
74777: LD_INT 1
74779: ARRAY
74780: PUSH
74781: LD_INT 2
74783: ARRAY
74784: EQUAL
74785: AND
74786: PUSH
74787: LD_VAR 0 3
74791: PUSH
74792: LD_VAR 0 1
74796: PPUSH
74797: CALL_OW 437
74801: PUSH
74802: LD_INT 1
74804: ARRAY
74805: PUSH
74806: LD_INT 3
74808: ARRAY
74809: EQUAL
74810: AND
74811: IFFALSE 74821
// result := true ;
74813: LD_ADDR_VAR 0 4
74817: PUSH
74818: LD_INT 1
74820: ST_TO_ADDR
// end ; end ;
74821: LD_VAR 0 4
74825: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74826: LD_INT 0
74828: PPUSH
74829: PPUSH
74830: PPUSH
74831: PPUSH
// if not unit or not area then
74832: LD_VAR 0 1
74836: NOT
74837: PUSH
74838: LD_VAR 0 2
74842: NOT
74843: OR
74844: IFFALSE 74848
// exit ;
74846: GO 75012
// tmp := AreaToList ( area , i ) ;
74848: LD_ADDR_VAR 0 6
74852: PUSH
74853: LD_VAR 0 2
74857: PPUSH
74858: LD_VAR 0 5
74862: PPUSH
74863: CALL_OW 517
74867: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74868: LD_ADDR_VAR 0 5
74872: PUSH
74873: DOUBLE
74874: LD_INT 1
74876: DEC
74877: ST_TO_ADDR
74878: LD_VAR 0 6
74882: PUSH
74883: LD_INT 1
74885: ARRAY
74886: PUSH
74887: FOR_TO
74888: IFFALSE 75010
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74890: LD_ADDR_VAR 0 7
74894: PUSH
74895: LD_VAR 0 6
74899: PUSH
74900: LD_INT 1
74902: ARRAY
74903: PUSH
74904: LD_VAR 0 5
74908: ARRAY
74909: PUSH
74910: LD_VAR 0 6
74914: PUSH
74915: LD_INT 2
74917: ARRAY
74918: PUSH
74919: LD_VAR 0 5
74923: ARRAY
74924: PUSH
74925: EMPTY
74926: LIST
74927: LIST
74928: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74929: LD_VAR 0 7
74933: PUSH
74934: LD_INT 1
74936: ARRAY
74937: PPUSH
74938: LD_VAR 0 7
74942: PUSH
74943: LD_INT 2
74945: ARRAY
74946: PPUSH
74947: CALL_OW 428
74951: PUSH
74952: LD_INT 0
74954: EQUAL
74955: IFFALSE 75008
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74957: LD_VAR 0 1
74961: PPUSH
74962: LD_VAR 0 7
74966: PUSH
74967: LD_INT 1
74969: ARRAY
74970: PPUSH
74971: LD_VAR 0 7
74975: PUSH
74976: LD_INT 2
74978: ARRAY
74979: PPUSH
74980: LD_VAR 0 3
74984: PPUSH
74985: CALL_OW 48
// result := IsPlaced ( unit ) ;
74989: LD_ADDR_VAR 0 4
74993: PUSH
74994: LD_VAR 0 1
74998: PPUSH
74999: CALL_OW 305
75003: ST_TO_ADDR
// exit ;
75004: POP
75005: POP
75006: GO 75012
// end ; end ;
75008: GO 74887
75010: POP
75011: POP
// end ;
75012: LD_VAR 0 4
75016: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75017: LD_INT 0
75019: PPUSH
75020: PPUSH
75021: PPUSH
// if not side or side > 8 then
75022: LD_VAR 0 1
75026: NOT
75027: PUSH
75028: LD_VAR 0 1
75032: PUSH
75033: LD_INT 8
75035: GREATER
75036: OR
75037: IFFALSE 75041
// exit ;
75039: GO 75228
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75041: LD_ADDR_VAR 0 4
75045: PUSH
75046: LD_INT 22
75048: PUSH
75049: LD_VAR 0 1
75053: PUSH
75054: EMPTY
75055: LIST
75056: LIST
75057: PUSH
75058: LD_INT 21
75060: PUSH
75061: LD_INT 3
75063: PUSH
75064: EMPTY
75065: LIST
75066: LIST
75067: PUSH
75068: EMPTY
75069: LIST
75070: LIST
75071: PPUSH
75072: CALL_OW 69
75076: ST_TO_ADDR
// if not tmp then
75077: LD_VAR 0 4
75081: NOT
75082: IFFALSE 75086
// exit ;
75084: GO 75228
// enable_addtolog := true ;
75086: LD_ADDR_OWVAR 81
75090: PUSH
75091: LD_INT 1
75093: ST_TO_ADDR
// AddToLog ( [ ) ;
75094: LD_STRING [
75096: PPUSH
75097: CALL_OW 561
// for i in tmp do
75101: LD_ADDR_VAR 0 3
75105: PUSH
75106: LD_VAR 0 4
75110: PUSH
75111: FOR_IN
75112: IFFALSE 75219
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75114: LD_STRING [
75116: PUSH
75117: LD_VAR 0 3
75121: PPUSH
75122: CALL_OW 266
75126: STR
75127: PUSH
75128: LD_STRING , 
75130: STR
75131: PUSH
75132: LD_VAR 0 3
75136: PPUSH
75137: CALL_OW 250
75141: STR
75142: PUSH
75143: LD_STRING , 
75145: STR
75146: PUSH
75147: LD_VAR 0 3
75151: PPUSH
75152: CALL_OW 251
75156: STR
75157: PUSH
75158: LD_STRING , 
75160: STR
75161: PUSH
75162: LD_VAR 0 3
75166: PPUSH
75167: CALL_OW 254
75171: STR
75172: PUSH
75173: LD_STRING , 
75175: STR
75176: PUSH
75177: LD_VAR 0 3
75181: PPUSH
75182: LD_INT 1
75184: PPUSH
75185: CALL_OW 268
75189: STR
75190: PUSH
75191: LD_STRING , 
75193: STR
75194: PUSH
75195: LD_VAR 0 3
75199: PPUSH
75200: LD_INT 2
75202: PPUSH
75203: CALL_OW 268
75207: STR
75208: PUSH
75209: LD_STRING ],
75211: STR
75212: PPUSH
75213: CALL_OW 561
// end ;
75217: GO 75111
75219: POP
75220: POP
// AddToLog ( ]; ) ;
75221: LD_STRING ];
75223: PPUSH
75224: CALL_OW 561
// end ;
75228: LD_VAR 0 2
75232: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75233: LD_INT 0
75235: PPUSH
75236: PPUSH
75237: PPUSH
75238: PPUSH
75239: PPUSH
// if not area or not rate or not max then
75240: LD_VAR 0 1
75244: NOT
75245: PUSH
75246: LD_VAR 0 2
75250: NOT
75251: OR
75252: PUSH
75253: LD_VAR 0 4
75257: NOT
75258: OR
75259: IFFALSE 75263
// exit ;
75261: GO 75452
// while 1 do
75263: LD_INT 1
75265: IFFALSE 75452
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75267: LD_ADDR_VAR 0 9
75271: PUSH
75272: LD_VAR 0 1
75276: PPUSH
75277: LD_INT 1
75279: PPUSH
75280: CALL_OW 287
75284: PUSH
75285: LD_INT 10
75287: MUL
75288: ST_TO_ADDR
// r := rate / 10 ;
75289: LD_ADDR_VAR 0 7
75293: PUSH
75294: LD_VAR 0 2
75298: PUSH
75299: LD_INT 10
75301: DIVREAL
75302: ST_TO_ADDR
// time := 1 1$00 ;
75303: LD_ADDR_VAR 0 8
75307: PUSH
75308: LD_INT 2100
75310: ST_TO_ADDR
// if amount < min then
75311: LD_VAR 0 9
75315: PUSH
75316: LD_VAR 0 3
75320: LESS
75321: IFFALSE 75339
// r := r * 2 else
75323: LD_ADDR_VAR 0 7
75327: PUSH
75328: LD_VAR 0 7
75332: PUSH
75333: LD_INT 2
75335: MUL
75336: ST_TO_ADDR
75337: GO 75365
// if amount > max then
75339: LD_VAR 0 9
75343: PUSH
75344: LD_VAR 0 4
75348: GREATER
75349: IFFALSE 75365
// r := r / 2 ;
75351: LD_ADDR_VAR 0 7
75355: PUSH
75356: LD_VAR 0 7
75360: PUSH
75361: LD_INT 2
75363: DIVREAL
75364: ST_TO_ADDR
// time := time / r ;
75365: LD_ADDR_VAR 0 8
75369: PUSH
75370: LD_VAR 0 8
75374: PUSH
75375: LD_VAR 0 7
75379: DIVREAL
75380: ST_TO_ADDR
// if time < 0 then
75381: LD_VAR 0 8
75385: PUSH
75386: LD_INT 0
75388: LESS
75389: IFFALSE 75406
// time := time * - 1 ;
75391: LD_ADDR_VAR 0 8
75395: PUSH
75396: LD_VAR 0 8
75400: PUSH
75401: LD_INT 1
75403: NEG
75404: MUL
75405: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75406: LD_VAR 0 8
75410: PUSH
75411: LD_INT 35
75413: PPUSH
75414: LD_INT 875
75416: PPUSH
75417: CALL_OW 12
75421: PLUS
75422: PPUSH
75423: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75427: LD_INT 1
75429: PPUSH
75430: LD_INT 5
75432: PPUSH
75433: CALL_OW 12
75437: PPUSH
75438: LD_VAR 0 1
75442: PPUSH
75443: LD_INT 1
75445: PPUSH
75446: CALL_OW 55
// end ;
75450: GO 75263
// end ;
75452: LD_VAR 0 5
75456: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75457: LD_INT 0
75459: PPUSH
75460: PPUSH
75461: PPUSH
75462: PPUSH
75463: PPUSH
75464: PPUSH
75465: PPUSH
75466: PPUSH
// if not turrets or not factories then
75467: LD_VAR 0 1
75471: NOT
75472: PUSH
75473: LD_VAR 0 2
75477: NOT
75478: OR
75479: IFFALSE 75483
// exit ;
75481: GO 75790
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75483: LD_ADDR_VAR 0 10
75487: PUSH
75488: LD_INT 5
75490: PUSH
75491: LD_INT 6
75493: PUSH
75494: EMPTY
75495: LIST
75496: LIST
75497: PUSH
75498: LD_INT 2
75500: PUSH
75501: LD_INT 4
75503: PUSH
75504: EMPTY
75505: LIST
75506: LIST
75507: PUSH
75508: LD_INT 3
75510: PUSH
75511: LD_INT 5
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: PUSH
75518: EMPTY
75519: LIST
75520: LIST
75521: LIST
75522: PUSH
75523: LD_INT 24
75525: PUSH
75526: LD_INT 25
75528: PUSH
75529: EMPTY
75530: LIST
75531: LIST
75532: PUSH
75533: LD_INT 23
75535: PUSH
75536: LD_INT 27
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: PUSH
75543: EMPTY
75544: LIST
75545: LIST
75546: PUSH
75547: LD_INT 42
75549: PUSH
75550: LD_INT 43
75552: PUSH
75553: EMPTY
75554: LIST
75555: LIST
75556: PUSH
75557: LD_INT 44
75559: PUSH
75560: LD_INT 46
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: PUSH
75567: LD_INT 45
75569: PUSH
75570: LD_INT 47
75572: PUSH
75573: EMPTY
75574: LIST
75575: LIST
75576: PUSH
75577: EMPTY
75578: LIST
75579: LIST
75580: LIST
75581: PUSH
75582: EMPTY
75583: LIST
75584: LIST
75585: LIST
75586: ST_TO_ADDR
// result := [ ] ;
75587: LD_ADDR_VAR 0 3
75591: PUSH
75592: EMPTY
75593: ST_TO_ADDR
// for i in turrets do
75594: LD_ADDR_VAR 0 4
75598: PUSH
75599: LD_VAR 0 1
75603: PUSH
75604: FOR_IN
75605: IFFALSE 75788
// begin nat := GetNation ( i ) ;
75607: LD_ADDR_VAR 0 7
75611: PUSH
75612: LD_VAR 0 4
75616: PPUSH
75617: CALL_OW 248
75621: ST_TO_ADDR
// weapon := 0 ;
75622: LD_ADDR_VAR 0 8
75626: PUSH
75627: LD_INT 0
75629: ST_TO_ADDR
// if not nat then
75630: LD_VAR 0 7
75634: NOT
75635: IFFALSE 75639
// continue ;
75637: GO 75604
// for j in list [ nat ] do
75639: LD_ADDR_VAR 0 5
75643: PUSH
75644: LD_VAR 0 10
75648: PUSH
75649: LD_VAR 0 7
75653: ARRAY
75654: PUSH
75655: FOR_IN
75656: IFFALSE 75697
// if GetBWeapon ( i ) = j [ 1 ] then
75658: LD_VAR 0 4
75662: PPUSH
75663: CALL_OW 269
75667: PUSH
75668: LD_VAR 0 5
75672: PUSH
75673: LD_INT 1
75675: ARRAY
75676: EQUAL
75677: IFFALSE 75695
// begin weapon := j [ 2 ] ;
75679: LD_ADDR_VAR 0 8
75683: PUSH
75684: LD_VAR 0 5
75688: PUSH
75689: LD_INT 2
75691: ARRAY
75692: ST_TO_ADDR
// break ;
75693: GO 75697
// end ;
75695: GO 75655
75697: POP
75698: POP
// if not weapon then
75699: LD_VAR 0 8
75703: NOT
75704: IFFALSE 75708
// continue ;
75706: GO 75604
// for k in factories do
75708: LD_ADDR_VAR 0 6
75712: PUSH
75713: LD_VAR 0 2
75717: PUSH
75718: FOR_IN
75719: IFFALSE 75784
// begin weapons := AvailableWeaponList ( k ) ;
75721: LD_ADDR_VAR 0 9
75725: PUSH
75726: LD_VAR 0 6
75730: PPUSH
75731: CALL_OW 478
75735: ST_TO_ADDR
// if not weapons then
75736: LD_VAR 0 9
75740: NOT
75741: IFFALSE 75745
// continue ;
75743: GO 75718
// if weapon in weapons then
75745: LD_VAR 0 8
75749: PUSH
75750: LD_VAR 0 9
75754: IN
75755: IFFALSE 75782
// begin result := [ i , weapon ] ;
75757: LD_ADDR_VAR 0 3
75761: PUSH
75762: LD_VAR 0 4
75766: PUSH
75767: LD_VAR 0 8
75771: PUSH
75772: EMPTY
75773: LIST
75774: LIST
75775: ST_TO_ADDR
// exit ;
75776: POP
75777: POP
75778: POP
75779: POP
75780: GO 75790
// end ; end ;
75782: GO 75718
75784: POP
75785: POP
// end ;
75786: GO 75604
75788: POP
75789: POP
// end ;
75790: LD_VAR 0 3
75794: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75795: LD_INT 0
75797: PPUSH
// if not side or side > 8 then
75798: LD_VAR 0 3
75802: NOT
75803: PUSH
75804: LD_VAR 0 3
75808: PUSH
75809: LD_INT 8
75811: GREATER
75812: OR
75813: IFFALSE 75817
// exit ;
75815: GO 75876
// if not range then
75817: LD_VAR 0 4
75821: NOT
75822: IFFALSE 75833
// range := - 12 ;
75824: LD_ADDR_VAR 0 4
75828: PUSH
75829: LD_INT 12
75831: NEG
75832: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75833: LD_VAR 0 1
75837: PPUSH
75838: LD_VAR 0 2
75842: PPUSH
75843: LD_VAR 0 3
75847: PPUSH
75848: LD_VAR 0 4
75852: PPUSH
75853: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75857: LD_VAR 0 1
75861: PPUSH
75862: LD_VAR 0 2
75866: PPUSH
75867: LD_VAR 0 3
75871: PPUSH
75872: CALL_OW 331
// end ;
75876: LD_VAR 0 5
75880: RET
// export function Video ( mode ) ; begin
75881: LD_INT 0
75883: PPUSH
// ingame_video = mode ;
75884: LD_ADDR_OWVAR 52
75888: PUSH
75889: LD_VAR 0 1
75893: ST_TO_ADDR
// interface_hidden = mode ;
75894: LD_ADDR_OWVAR 54
75898: PUSH
75899: LD_VAR 0 1
75903: ST_TO_ADDR
// end ;
75904: LD_VAR 0 2
75908: RET
// export function Join ( array , element ) ; begin
75909: LD_INT 0
75911: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75912: LD_ADDR_VAR 0 3
75916: PUSH
75917: LD_VAR 0 1
75921: PPUSH
75922: LD_VAR 0 1
75926: PUSH
75927: LD_INT 1
75929: PLUS
75930: PPUSH
75931: LD_VAR 0 2
75935: PPUSH
75936: CALL_OW 1
75940: ST_TO_ADDR
// end ;
75941: LD_VAR 0 3
75945: RET
// export function JoinUnion ( array , element ) ; begin
75946: LD_INT 0
75948: PPUSH
// result := array union element ;
75949: LD_ADDR_VAR 0 3
75953: PUSH
75954: LD_VAR 0 1
75958: PUSH
75959: LD_VAR 0 2
75963: UNION
75964: ST_TO_ADDR
// end ;
75965: LD_VAR 0 3
75969: RET
// export function GetBehemoths ( side ) ; begin
75970: LD_INT 0
75972: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
75973: LD_ADDR_VAR 0 2
75977: PUSH
75978: LD_INT 22
75980: PUSH
75981: LD_VAR 0 1
75985: PUSH
75986: EMPTY
75987: LIST
75988: LIST
75989: PUSH
75990: LD_INT 31
75992: PUSH
75993: LD_INT 25
75995: PUSH
75996: EMPTY
75997: LIST
75998: LIST
75999: PUSH
76000: EMPTY
76001: LIST
76002: LIST
76003: PPUSH
76004: CALL_OW 69
76008: ST_TO_ADDR
// end ;
76009: LD_VAR 0 2
76013: RET
// export function Shuffle ( array ) ; var i , index ; begin
76014: LD_INT 0
76016: PPUSH
76017: PPUSH
76018: PPUSH
// result := [ ] ;
76019: LD_ADDR_VAR 0 2
76023: PUSH
76024: EMPTY
76025: ST_TO_ADDR
// if not array then
76026: LD_VAR 0 1
76030: NOT
76031: IFFALSE 76035
// exit ;
76033: GO 76134
// Randomize ;
76035: CALL_OW 10
// for i = array downto 1 do
76039: LD_ADDR_VAR 0 3
76043: PUSH
76044: DOUBLE
76045: LD_VAR 0 1
76049: INC
76050: ST_TO_ADDR
76051: LD_INT 1
76053: PUSH
76054: FOR_DOWNTO
76055: IFFALSE 76132
// begin index := rand ( 1 , array ) ;
76057: LD_ADDR_VAR 0 4
76061: PUSH
76062: LD_INT 1
76064: PPUSH
76065: LD_VAR 0 1
76069: PPUSH
76070: CALL_OW 12
76074: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76075: LD_ADDR_VAR 0 2
76079: PUSH
76080: LD_VAR 0 2
76084: PPUSH
76085: LD_VAR 0 2
76089: PUSH
76090: LD_INT 1
76092: PLUS
76093: PPUSH
76094: LD_VAR 0 1
76098: PUSH
76099: LD_VAR 0 4
76103: ARRAY
76104: PPUSH
76105: CALL_OW 2
76109: ST_TO_ADDR
// array := Delete ( array , index ) ;
76110: LD_ADDR_VAR 0 1
76114: PUSH
76115: LD_VAR 0 1
76119: PPUSH
76120: LD_VAR 0 4
76124: PPUSH
76125: CALL_OW 3
76129: ST_TO_ADDR
// end ;
76130: GO 76054
76132: POP
76133: POP
// end ;
76134: LD_VAR 0 2
76138: RET
// export function GetBaseMaterials ( base ) ; begin
76139: LD_INT 0
76141: PPUSH
// result := [ 0 , 0 , 0 ] ;
76142: LD_ADDR_VAR 0 2
76146: PUSH
76147: LD_INT 0
76149: PUSH
76150: LD_INT 0
76152: PUSH
76153: LD_INT 0
76155: PUSH
76156: EMPTY
76157: LIST
76158: LIST
76159: LIST
76160: ST_TO_ADDR
// if not base then
76161: LD_VAR 0 1
76165: NOT
76166: IFFALSE 76170
// exit ;
76168: GO 76219
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76170: LD_ADDR_VAR 0 2
76174: PUSH
76175: LD_VAR 0 1
76179: PPUSH
76180: LD_INT 1
76182: PPUSH
76183: CALL_OW 275
76187: PUSH
76188: LD_VAR 0 1
76192: PPUSH
76193: LD_INT 2
76195: PPUSH
76196: CALL_OW 275
76200: PUSH
76201: LD_VAR 0 1
76205: PPUSH
76206: LD_INT 3
76208: PPUSH
76209: CALL_OW 275
76213: PUSH
76214: EMPTY
76215: LIST
76216: LIST
76217: LIST
76218: ST_TO_ADDR
// end ;
76219: LD_VAR 0 2
76223: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76224: LD_INT 0
76226: PPUSH
76227: PPUSH
// result := array ;
76228: LD_ADDR_VAR 0 3
76232: PUSH
76233: LD_VAR 0 1
76237: ST_TO_ADDR
// if size >= result then
76238: LD_VAR 0 2
76242: PUSH
76243: LD_VAR 0 3
76247: GREATEREQUAL
76248: IFFALSE 76252
// exit ;
76250: GO 76302
// if size then
76252: LD_VAR 0 2
76256: IFFALSE 76302
// for i := array downto size do
76258: LD_ADDR_VAR 0 4
76262: PUSH
76263: DOUBLE
76264: LD_VAR 0 1
76268: INC
76269: ST_TO_ADDR
76270: LD_VAR 0 2
76274: PUSH
76275: FOR_DOWNTO
76276: IFFALSE 76300
// result := Delete ( result , result ) ;
76278: LD_ADDR_VAR 0 3
76282: PUSH
76283: LD_VAR 0 3
76287: PPUSH
76288: LD_VAR 0 3
76292: PPUSH
76293: CALL_OW 3
76297: ST_TO_ADDR
76298: GO 76275
76300: POP
76301: POP
// end ;
76302: LD_VAR 0 3
76306: RET
// export function ComExit ( unit ) ; var tmp ; begin
76307: LD_INT 0
76309: PPUSH
76310: PPUSH
// if not IsInUnit ( unit ) then
76311: LD_VAR 0 1
76315: PPUSH
76316: CALL_OW 310
76320: NOT
76321: IFFALSE 76325
// exit ;
76323: GO 76385
// tmp := IsInUnit ( unit ) ;
76325: LD_ADDR_VAR 0 3
76329: PUSH
76330: LD_VAR 0 1
76334: PPUSH
76335: CALL_OW 310
76339: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76340: LD_VAR 0 3
76344: PPUSH
76345: CALL_OW 247
76349: PUSH
76350: LD_INT 2
76352: EQUAL
76353: IFFALSE 76366
// ComExitVehicle ( unit ) else
76355: LD_VAR 0 1
76359: PPUSH
76360: CALL_OW 121
76364: GO 76375
// ComExitBuilding ( unit ) ;
76366: LD_VAR 0 1
76370: PPUSH
76371: CALL_OW 122
// result := tmp ;
76375: LD_ADDR_VAR 0 2
76379: PUSH
76380: LD_VAR 0 3
76384: ST_TO_ADDR
// end ;
76385: LD_VAR 0 2
76389: RET
// export function ComExitAll ( units ) ; var i ; begin
76390: LD_INT 0
76392: PPUSH
76393: PPUSH
// if not units then
76394: LD_VAR 0 1
76398: NOT
76399: IFFALSE 76403
// exit ;
76401: GO 76429
// for i in units do
76403: LD_ADDR_VAR 0 3
76407: PUSH
76408: LD_VAR 0 1
76412: PUSH
76413: FOR_IN
76414: IFFALSE 76427
// ComExit ( i ) ;
76416: LD_VAR 0 3
76420: PPUSH
76421: CALL 76307 0 1
76425: GO 76413
76427: POP
76428: POP
// end ;
76429: LD_VAR 0 2
76433: RET
// export function ResetHc ; begin
76434: LD_INT 0
76436: PPUSH
// InitHc ;
76437: CALL_OW 19
// hc_importance := 0 ;
76441: LD_ADDR_OWVAR 32
76445: PUSH
76446: LD_INT 0
76448: ST_TO_ADDR
// end ;
76449: LD_VAR 0 1
76453: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76454: LD_INT 0
76456: PPUSH
76457: PPUSH
76458: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76459: LD_ADDR_VAR 0 6
76463: PUSH
76464: LD_VAR 0 1
76468: PUSH
76469: LD_VAR 0 3
76473: PLUS
76474: PUSH
76475: LD_INT 2
76477: DIV
76478: ST_TO_ADDR
// if _x < 0 then
76479: LD_VAR 0 6
76483: PUSH
76484: LD_INT 0
76486: LESS
76487: IFFALSE 76504
// _x := _x * - 1 ;
76489: LD_ADDR_VAR 0 6
76493: PUSH
76494: LD_VAR 0 6
76498: PUSH
76499: LD_INT 1
76501: NEG
76502: MUL
76503: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76504: LD_ADDR_VAR 0 7
76508: PUSH
76509: LD_VAR 0 2
76513: PUSH
76514: LD_VAR 0 4
76518: PLUS
76519: PUSH
76520: LD_INT 2
76522: DIV
76523: ST_TO_ADDR
// if _y < 0 then
76524: LD_VAR 0 7
76528: PUSH
76529: LD_INT 0
76531: LESS
76532: IFFALSE 76549
// _y := _y * - 1 ;
76534: LD_ADDR_VAR 0 7
76538: PUSH
76539: LD_VAR 0 7
76543: PUSH
76544: LD_INT 1
76546: NEG
76547: MUL
76548: ST_TO_ADDR
// result := [ _x , _y ] ;
76549: LD_ADDR_VAR 0 5
76553: PUSH
76554: LD_VAR 0 6
76558: PUSH
76559: LD_VAR 0 7
76563: PUSH
76564: EMPTY
76565: LIST
76566: LIST
76567: ST_TO_ADDR
// end ;
76568: LD_VAR 0 5
76572: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76573: LD_INT 0
76575: PPUSH
76576: PPUSH
76577: PPUSH
76578: PPUSH
// task := GetTaskList ( unit ) ;
76579: LD_ADDR_VAR 0 7
76583: PUSH
76584: LD_VAR 0 1
76588: PPUSH
76589: CALL_OW 437
76593: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76594: LD_VAR 0 7
76598: NOT
76599: PUSH
76600: LD_VAR 0 1
76604: PPUSH
76605: LD_VAR 0 2
76609: PPUSH
76610: CALL_OW 308
76614: NOT
76615: AND
76616: IFFALSE 76620
// exit ;
76618: GO 76738
// if IsInArea ( unit , area ) then
76620: LD_VAR 0 1
76624: PPUSH
76625: LD_VAR 0 2
76629: PPUSH
76630: CALL_OW 308
76634: IFFALSE 76652
// begin ComMoveToArea ( unit , goAway ) ;
76636: LD_VAR 0 1
76640: PPUSH
76641: LD_VAR 0 3
76645: PPUSH
76646: CALL_OW 113
// exit ;
76650: GO 76738
// end ; if task [ 1 ] [ 1 ] <> M then
76652: LD_VAR 0 7
76656: PUSH
76657: LD_INT 1
76659: ARRAY
76660: PUSH
76661: LD_INT 1
76663: ARRAY
76664: PUSH
76665: LD_STRING M
76667: NONEQUAL
76668: IFFALSE 76672
// exit ;
76670: GO 76738
// x := task [ 1 ] [ 2 ] ;
76672: LD_ADDR_VAR 0 5
76676: PUSH
76677: LD_VAR 0 7
76681: PUSH
76682: LD_INT 1
76684: ARRAY
76685: PUSH
76686: LD_INT 2
76688: ARRAY
76689: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76690: LD_ADDR_VAR 0 6
76694: PUSH
76695: LD_VAR 0 7
76699: PUSH
76700: LD_INT 1
76702: ARRAY
76703: PUSH
76704: LD_INT 3
76706: ARRAY
76707: ST_TO_ADDR
// if InArea ( x , y , area ) then
76708: LD_VAR 0 5
76712: PPUSH
76713: LD_VAR 0 6
76717: PPUSH
76718: LD_VAR 0 2
76722: PPUSH
76723: CALL_OW 309
76727: IFFALSE 76738
// ComStop ( unit ) ;
76729: LD_VAR 0 1
76733: PPUSH
76734: CALL_OW 141
// end ;
76738: LD_VAR 0 4
76742: RET
// export function Abs ( value ) ; begin
76743: LD_INT 0
76745: PPUSH
// result := value ;
76746: LD_ADDR_VAR 0 2
76750: PUSH
76751: LD_VAR 0 1
76755: ST_TO_ADDR
// if value < 0 then
76756: LD_VAR 0 1
76760: PUSH
76761: LD_INT 0
76763: LESS
76764: IFFALSE 76781
// result := value * - 1 ;
76766: LD_ADDR_VAR 0 2
76770: PUSH
76771: LD_VAR 0 1
76775: PUSH
76776: LD_INT 1
76778: NEG
76779: MUL
76780: ST_TO_ADDR
// end ;
76781: LD_VAR 0 2
76785: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76786: LD_INT 0
76788: PPUSH
76789: PPUSH
76790: PPUSH
76791: PPUSH
76792: PPUSH
76793: PPUSH
76794: PPUSH
76795: PPUSH
// if not unit or not building then
76796: LD_VAR 0 1
76800: NOT
76801: PUSH
76802: LD_VAR 0 2
76806: NOT
76807: OR
76808: IFFALSE 76812
// exit ;
76810: GO 77038
// x := GetX ( building ) ;
76812: LD_ADDR_VAR 0 4
76816: PUSH
76817: LD_VAR 0 2
76821: PPUSH
76822: CALL_OW 250
76826: ST_TO_ADDR
// y := GetY ( building ) ;
76827: LD_ADDR_VAR 0 6
76831: PUSH
76832: LD_VAR 0 2
76836: PPUSH
76837: CALL_OW 251
76841: ST_TO_ADDR
// d := GetDir ( building ) ;
76842: LD_ADDR_VAR 0 8
76846: PUSH
76847: LD_VAR 0 2
76851: PPUSH
76852: CALL_OW 254
76856: ST_TO_ADDR
// r := 4 ;
76857: LD_ADDR_VAR 0 9
76861: PUSH
76862: LD_INT 4
76864: ST_TO_ADDR
// for i := 1 to 5 do
76865: LD_ADDR_VAR 0 10
76869: PUSH
76870: DOUBLE
76871: LD_INT 1
76873: DEC
76874: ST_TO_ADDR
76875: LD_INT 5
76877: PUSH
76878: FOR_TO
76879: IFFALSE 77036
// begin _x := ShiftX ( x , d , r + i ) ;
76881: LD_ADDR_VAR 0 5
76885: PUSH
76886: LD_VAR 0 4
76890: PPUSH
76891: LD_VAR 0 8
76895: PPUSH
76896: LD_VAR 0 9
76900: PUSH
76901: LD_VAR 0 10
76905: PLUS
76906: PPUSH
76907: CALL_OW 272
76911: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76912: LD_ADDR_VAR 0 7
76916: PUSH
76917: LD_VAR 0 6
76921: PPUSH
76922: LD_VAR 0 8
76926: PPUSH
76927: LD_VAR 0 9
76931: PUSH
76932: LD_VAR 0 10
76936: PLUS
76937: PPUSH
76938: CALL_OW 273
76942: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76943: LD_VAR 0 5
76947: PPUSH
76948: LD_VAR 0 7
76952: PPUSH
76953: CALL_OW 488
76957: PUSH
76958: LD_VAR 0 5
76962: PPUSH
76963: LD_VAR 0 7
76967: PPUSH
76968: CALL_OW 428
76972: PPUSH
76973: CALL_OW 247
76977: PUSH
76978: LD_INT 3
76980: PUSH
76981: LD_INT 2
76983: PUSH
76984: EMPTY
76985: LIST
76986: LIST
76987: IN
76988: NOT
76989: AND
76990: IFFALSE 77034
// begin ComMoveXY ( unit , _x , _y ) ;
76992: LD_VAR 0 1
76996: PPUSH
76997: LD_VAR 0 5
77001: PPUSH
77002: LD_VAR 0 7
77006: PPUSH
77007: CALL_OW 111
// result := [ _x , _y ] ;
77011: LD_ADDR_VAR 0 3
77015: PUSH
77016: LD_VAR 0 5
77020: PUSH
77021: LD_VAR 0 7
77025: PUSH
77026: EMPTY
77027: LIST
77028: LIST
77029: ST_TO_ADDR
// exit ;
77030: POP
77031: POP
77032: GO 77038
// end ; end ;
77034: GO 76878
77036: POP
77037: POP
// end ;
77038: LD_VAR 0 3
77042: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77043: LD_INT 0
77045: PPUSH
77046: PPUSH
77047: PPUSH
// result := 0 ;
77048: LD_ADDR_VAR 0 3
77052: PUSH
77053: LD_INT 0
77055: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77056: LD_VAR 0 1
77060: PUSH
77061: LD_INT 0
77063: LESS
77064: PUSH
77065: LD_VAR 0 1
77069: PUSH
77070: LD_INT 8
77072: GREATER
77073: OR
77074: PUSH
77075: LD_VAR 0 2
77079: PUSH
77080: LD_INT 0
77082: LESS
77083: OR
77084: PUSH
77085: LD_VAR 0 2
77089: PUSH
77090: LD_INT 8
77092: GREATER
77093: OR
77094: IFFALSE 77098
// exit ;
77096: GO 77173
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77098: LD_ADDR_VAR 0 4
77102: PUSH
77103: LD_INT 22
77105: PUSH
77106: LD_VAR 0 2
77110: PUSH
77111: EMPTY
77112: LIST
77113: LIST
77114: PPUSH
77115: CALL_OW 69
77119: PUSH
77120: FOR_IN
77121: IFFALSE 77171
// begin un := UnitShoot ( i ) ;
77123: LD_ADDR_VAR 0 5
77127: PUSH
77128: LD_VAR 0 4
77132: PPUSH
77133: CALL_OW 504
77137: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77138: LD_VAR 0 5
77142: PPUSH
77143: CALL_OW 255
77147: PUSH
77148: LD_VAR 0 1
77152: EQUAL
77153: IFFALSE 77169
// begin result := un ;
77155: LD_ADDR_VAR 0 3
77159: PUSH
77160: LD_VAR 0 5
77164: ST_TO_ADDR
// exit ;
77165: POP
77166: POP
77167: GO 77173
// end ; end ;
77169: GO 77120
77171: POP
77172: POP
// end ;
77173: LD_VAR 0 3
77177: RET
// export function GetCargoBay ( units ) ; begin
77178: LD_INT 0
77180: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77181: LD_ADDR_VAR 0 2
77185: PUSH
77186: LD_VAR 0 1
77190: PPUSH
77191: LD_INT 2
77193: PUSH
77194: LD_INT 34
77196: PUSH
77197: LD_INT 12
77199: PUSH
77200: EMPTY
77201: LIST
77202: LIST
77203: PUSH
77204: LD_INT 34
77206: PUSH
77207: LD_INT 51
77209: PUSH
77210: EMPTY
77211: LIST
77212: LIST
77213: PUSH
77214: LD_INT 34
77216: PUSH
77217: LD_INT 32
77219: PUSH
77220: EMPTY
77221: LIST
77222: LIST
77223: PUSH
77224: LD_INT 34
77226: PUSH
77227: LD_EXP 33
77231: PUSH
77232: EMPTY
77233: LIST
77234: LIST
77235: PUSH
77236: EMPTY
77237: LIST
77238: LIST
77239: LIST
77240: LIST
77241: LIST
77242: PPUSH
77243: CALL_OW 72
77247: ST_TO_ADDR
// end ;
77248: LD_VAR 0 2
77252: RET
// export function Negate ( value ) ; begin
77253: LD_INT 0
77255: PPUSH
// result := not value ;
77256: LD_ADDR_VAR 0 2
77260: PUSH
77261: LD_VAR 0 1
77265: NOT
77266: ST_TO_ADDR
// end ;
77267: LD_VAR 0 2
77271: RET
// export function Inc ( value ) ; begin
77272: LD_INT 0
77274: PPUSH
// result := value + 1 ;
77275: LD_ADDR_VAR 0 2
77279: PUSH
77280: LD_VAR 0 1
77284: PUSH
77285: LD_INT 1
77287: PLUS
77288: ST_TO_ADDR
// end ;
77289: LD_VAR 0 2
77293: RET
// export function Dec ( value ) ; begin
77294: LD_INT 0
77296: PPUSH
// result := value - 1 ;
77297: LD_ADDR_VAR 0 2
77301: PUSH
77302: LD_VAR 0 1
77306: PUSH
77307: LD_INT 1
77309: MINUS
77310: ST_TO_ADDR
// end ;
77311: LD_VAR 0 2
77315: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77316: LD_INT 0
77318: PPUSH
77319: PPUSH
77320: PPUSH
77321: PPUSH
77322: PPUSH
77323: PPUSH
77324: PPUSH
77325: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77326: LD_VAR 0 1
77330: PPUSH
77331: LD_VAR 0 2
77335: PPUSH
77336: CALL_OW 488
77340: NOT
77341: PUSH
77342: LD_VAR 0 3
77346: PPUSH
77347: LD_VAR 0 4
77351: PPUSH
77352: CALL_OW 488
77356: NOT
77357: OR
77358: IFFALSE 77371
// begin result := - 1 ;
77360: LD_ADDR_VAR 0 5
77364: PUSH
77365: LD_INT 1
77367: NEG
77368: ST_TO_ADDR
// exit ;
77369: GO 77606
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77371: LD_ADDR_VAR 0 12
77375: PUSH
77376: LD_VAR 0 1
77380: PPUSH
77381: LD_VAR 0 2
77385: PPUSH
77386: LD_VAR 0 3
77390: PPUSH
77391: LD_VAR 0 4
77395: PPUSH
77396: CALL 76454 0 4
77400: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77401: LD_ADDR_VAR 0 11
77405: PUSH
77406: LD_VAR 0 1
77410: PPUSH
77411: LD_VAR 0 2
77415: PPUSH
77416: LD_VAR 0 12
77420: PUSH
77421: LD_INT 1
77423: ARRAY
77424: PPUSH
77425: LD_VAR 0 12
77429: PUSH
77430: LD_INT 2
77432: ARRAY
77433: PPUSH
77434: CALL_OW 298
77438: ST_TO_ADDR
// distance := 9999 ;
77439: LD_ADDR_VAR 0 10
77443: PUSH
77444: LD_INT 9999
77446: ST_TO_ADDR
// for i := 0 to 5 do
77447: LD_ADDR_VAR 0 6
77451: PUSH
77452: DOUBLE
77453: LD_INT 0
77455: DEC
77456: ST_TO_ADDR
77457: LD_INT 5
77459: PUSH
77460: FOR_TO
77461: IFFALSE 77604
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77463: LD_ADDR_VAR 0 7
77467: PUSH
77468: LD_VAR 0 1
77472: PPUSH
77473: LD_VAR 0 6
77477: PPUSH
77478: LD_VAR 0 11
77482: PPUSH
77483: CALL_OW 272
77487: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77488: LD_ADDR_VAR 0 8
77492: PUSH
77493: LD_VAR 0 2
77497: PPUSH
77498: LD_VAR 0 6
77502: PPUSH
77503: LD_VAR 0 11
77507: PPUSH
77508: CALL_OW 273
77512: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77513: LD_VAR 0 7
77517: PPUSH
77518: LD_VAR 0 8
77522: PPUSH
77523: CALL_OW 488
77527: NOT
77528: IFFALSE 77532
// continue ;
77530: GO 77460
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77532: LD_ADDR_VAR 0 9
77536: PUSH
77537: LD_VAR 0 12
77541: PUSH
77542: LD_INT 1
77544: ARRAY
77545: PPUSH
77546: LD_VAR 0 12
77550: PUSH
77551: LD_INT 2
77553: ARRAY
77554: PPUSH
77555: LD_VAR 0 7
77559: PPUSH
77560: LD_VAR 0 8
77564: PPUSH
77565: CALL_OW 298
77569: ST_TO_ADDR
// if tmp < distance then
77570: LD_VAR 0 9
77574: PUSH
77575: LD_VAR 0 10
77579: LESS
77580: IFFALSE 77602
// begin result := i ;
77582: LD_ADDR_VAR 0 5
77586: PUSH
77587: LD_VAR 0 6
77591: ST_TO_ADDR
// distance := tmp ;
77592: LD_ADDR_VAR 0 10
77596: PUSH
77597: LD_VAR 0 9
77601: ST_TO_ADDR
// end ; end ;
77602: GO 77460
77604: POP
77605: POP
// end ;
77606: LD_VAR 0 5
77610: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77611: LD_INT 0
77613: PPUSH
77614: PPUSH
// if not driver or not IsInUnit ( driver ) then
77615: LD_VAR 0 1
77619: NOT
77620: PUSH
77621: LD_VAR 0 1
77625: PPUSH
77626: CALL_OW 310
77630: NOT
77631: OR
77632: IFFALSE 77636
// exit ;
77634: GO 77726
// vehicle := IsInUnit ( driver ) ;
77636: LD_ADDR_VAR 0 3
77640: PUSH
77641: LD_VAR 0 1
77645: PPUSH
77646: CALL_OW 310
77650: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77651: LD_VAR 0 1
77655: PPUSH
77656: LD_STRING \
77658: PUSH
77659: LD_INT 0
77661: PUSH
77662: LD_INT 0
77664: PUSH
77665: LD_INT 0
77667: PUSH
77668: LD_INT 0
77670: PUSH
77671: LD_INT 0
77673: PUSH
77674: LD_INT 0
77676: PUSH
77677: EMPTY
77678: LIST
77679: LIST
77680: LIST
77681: LIST
77682: LIST
77683: LIST
77684: LIST
77685: PUSH
77686: LD_STRING E
77688: PUSH
77689: LD_INT 0
77691: PUSH
77692: LD_INT 0
77694: PUSH
77695: LD_VAR 0 3
77699: PUSH
77700: LD_INT 0
77702: PUSH
77703: LD_INT 0
77705: PUSH
77706: LD_INT 0
77708: PUSH
77709: EMPTY
77710: LIST
77711: LIST
77712: LIST
77713: LIST
77714: LIST
77715: LIST
77716: LIST
77717: PUSH
77718: EMPTY
77719: LIST
77720: LIST
77721: PPUSH
77722: CALL_OW 446
// end ;
77726: LD_VAR 0 2
77730: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77731: LD_INT 0
77733: PPUSH
77734: PPUSH
// if not driver or not IsInUnit ( driver ) then
77735: LD_VAR 0 1
77739: NOT
77740: PUSH
77741: LD_VAR 0 1
77745: PPUSH
77746: CALL_OW 310
77750: NOT
77751: OR
77752: IFFALSE 77756
// exit ;
77754: GO 77846
// vehicle := IsInUnit ( driver ) ;
77756: LD_ADDR_VAR 0 3
77760: PUSH
77761: LD_VAR 0 1
77765: PPUSH
77766: CALL_OW 310
77770: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77771: LD_VAR 0 1
77775: PPUSH
77776: LD_STRING \
77778: PUSH
77779: LD_INT 0
77781: PUSH
77782: LD_INT 0
77784: PUSH
77785: LD_INT 0
77787: PUSH
77788: LD_INT 0
77790: PUSH
77791: LD_INT 0
77793: PUSH
77794: LD_INT 0
77796: PUSH
77797: EMPTY
77798: LIST
77799: LIST
77800: LIST
77801: LIST
77802: LIST
77803: LIST
77804: LIST
77805: PUSH
77806: LD_STRING E
77808: PUSH
77809: LD_INT 0
77811: PUSH
77812: LD_INT 0
77814: PUSH
77815: LD_VAR 0 3
77819: PUSH
77820: LD_INT 0
77822: PUSH
77823: LD_INT 0
77825: PUSH
77826: LD_INT 0
77828: PUSH
77829: EMPTY
77830: LIST
77831: LIST
77832: LIST
77833: LIST
77834: LIST
77835: LIST
77836: LIST
77837: PUSH
77838: EMPTY
77839: LIST
77840: LIST
77841: PPUSH
77842: CALL_OW 447
// end ;
77846: LD_VAR 0 2
77850: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77851: LD_INT 0
77853: PPUSH
77854: PPUSH
77855: PPUSH
// tmp := [ ] ;
77856: LD_ADDR_VAR 0 5
77860: PUSH
77861: EMPTY
77862: ST_TO_ADDR
// for i in units do
77863: LD_ADDR_VAR 0 4
77867: PUSH
77868: LD_VAR 0 1
77872: PUSH
77873: FOR_IN
77874: IFFALSE 77912
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77876: LD_ADDR_VAR 0 5
77880: PUSH
77881: LD_VAR 0 5
77885: PPUSH
77886: LD_VAR 0 5
77890: PUSH
77891: LD_INT 1
77893: PLUS
77894: PPUSH
77895: LD_VAR 0 4
77899: PPUSH
77900: CALL_OW 256
77904: PPUSH
77905: CALL_OW 2
77909: ST_TO_ADDR
77910: GO 77873
77912: POP
77913: POP
// if not tmp then
77914: LD_VAR 0 5
77918: NOT
77919: IFFALSE 77923
// exit ;
77921: GO 77971
// if asc then
77923: LD_VAR 0 2
77927: IFFALSE 77951
// result := SortListByListAsc ( units , tmp ) else
77929: LD_ADDR_VAR 0 3
77933: PUSH
77934: LD_VAR 0 1
77938: PPUSH
77939: LD_VAR 0 5
77943: PPUSH
77944: CALL_OW 76
77948: ST_TO_ADDR
77949: GO 77971
// result := SortListByListDesc ( units , tmp ) ;
77951: LD_ADDR_VAR 0 3
77955: PUSH
77956: LD_VAR 0 1
77960: PPUSH
77961: LD_VAR 0 5
77965: PPUSH
77966: CALL_OW 77
77970: ST_TO_ADDR
// end ;
77971: LD_VAR 0 3
77975: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77976: LD_INT 0
77978: PPUSH
77979: PPUSH
// task := GetTaskList ( mech ) ;
77980: LD_ADDR_VAR 0 4
77984: PUSH
77985: LD_VAR 0 1
77989: PPUSH
77990: CALL_OW 437
77994: ST_TO_ADDR
// if not task then
77995: LD_VAR 0 4
77999: NOT
78000: IFFALSE 78004
// exit ;
78002: GO 78046
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78004: LD_ADDR_VAR 0 3
78008: PUSH
78009: LD_VAR 0 4
78013: PUSH
78014: LD_INT 1
78016: ARRAY
78017: PUSH
78018: LD_INT 1
78020: ARRAY
78021: PUSH
78022: LD_STRING r
78024: EQUAL
78025: PUSH
78026: LD_VAR 0 4
78030: PUSH
78031: LD_INT 1
78033: ARRAY
78034: PUSH
78035: LD_INT 4
78037: ARRAY
78038: PUSH
78039: LD_VAR 0 2
78043: EQUAL
78044: AND
78045: ST_TO_ADDR
// end ;
78046: LD_VAR 0 3
78050: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78051: LD_INT 0
78053: PPUSH
// SetDir ( unit , d ) ;
78054: LD_VAR 0 1
78058: PPUSH
78059: LD_VAR 0 4
78063: PPUSH
78064: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78068: LD_VAR 0 1
78072: PPUSH
78073: LD_VAR 0 2
78077: PPUSH
78078: LD_VAR 0 3
78082: PPUSH
78083: LD_VAR 0 5
78087: PPUSH
78088: CALL_OW 48
// end ;
78092: LD_VAR 0 6
78096: RET
// export function ToNaturalNumber ( number ) ; begin
78097: LD_INT 0
78099: PPUSH
// result := number div 1 ;
78100: LD_ADDR_VAR 0 2
78104: PUSH
78105: LD_VAR 0 1
78109: PUSH
78110: LD_INT 1
78112: DIV
78113: ST_TO_ADDR
// if number < 0 then
78114: LD_VAR 0 1
78118: PUSH
78119: LD_INT 0
78121: LESS
78122: IFFALSE 78132
// result := 0 ;
78124: LD_ADDR_VAR 0 2
78128: PUSH
78129: LD_INT 0
78131: ST_TO_ADDR
// end ;
78132: LD_VAR 0 2
78136: RET
// export function SortByClass ( units , class ) ; var un ; begin
78137: LD_INT 0
78139: PPUSH
78140: PPUSH
// if not units or not class then
78141: LD_VAR 0 1
78145: NOT
78146: PUSH
78147: LD_VAR 0 2
78151: NOT
78152: OR
78153: IFFALSE 78157
// exit ;
78155: GO 78252
// result := [ ] ;
78157: LD_ADDR_VAR 0 3
78161: PUSH
78162: EMPTY
78163: ST_TO_ADDR
// for un in units do
78164: LD_ADDR_VAR 0 4
78168: PUSH
78169: LD_VAR 0 1
78173: PUSH
78174: FOR_IN
78175: IFFALSE 78250
// if GetClass ( un ) = class then
78177: LD_VAR 0 4
78181: PPUSH
78182: CALL_OW 257
78186: PUSH
78187: LD_VAR 0 2
78191: EQUAL
78192: IFFALSE 78219
// result := Insert ( result , 1 , un ) else
78194: LD_ADDR_VAR 0 3
78198: PUSH
78199: LD_VAR 0 3
78203: PPUSH
78204: LD_INT 1
78206: PPUSH
78207: LD_VAR 0 4
78211: PPUSH
78212: CALL_OW 2
78216: ST_TO_ADDR
78217: GO 78248
// result := Replace ( result , result + 1 , un ) ;
78219: LD_ADDR_VAR 0 3
78223: PUSH
78224: LD_VAR 0 3
78228: PPUSH
78229: LD_VAR 0 3
78233: PUSH
78234: LD_INT 1
78236: PLUS
78237: PPUSH
78238: LD_VAR 0 4
78242: PPUSH
78243: CALL_OW 1
78247: ST_TO_ADDR
78248: GO 78174
78250: POP
78251: POP
// end ;
78252: LD_VAR 0 3
78256: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78257: LD_INT 0
78259: PPUSH
78260: PPUSH
78261: PPUSH
78262: PPUSH
78263: PPUSH
78264: PPUSH
78265: PPUSH
// result := [ ] ;
78266: LD_ADDR_VAR 0 4
78270: PUSH
78271: EMPTY
78272: ST_TO_ADDR
// if x - r < 0 then
78273: LD_VAR 0 1
78277: PUSH
78278: LD_VAR 0 3
78282: MINUS
78283: PUSH
78284: LD_INT 0
78286: LESS
78287: IFFALSE 78299
// min_x := 0 else
78289: LD_ADDR_VAR 0 8
78293: PUSH
78294: LD_INT 0
78296: ST_TO_ADDR
78297: GO 78315
// min_x := x - r ;
78299: LD_ADDR_VAR 0 8
78303: PUSH
78304: LD_VAR 0 1
78308: PUSH
78309: LD_VAR 0 3
78313: MINUS
78314: ST_TO_ADDR
// if y - r < 0 then
78315: LD_VAR 0 2
78319: PUSH
78320: LD_VAR 0 3
78324: MINUS
78325: PUSH
78326: LD_INT 0
78328: LESS
78329: IFFALSE 78341
// min_y := 0 else
78331: LD_ADDR_VAR 0 7
78335: PUSH
78336: LD_INT 0
78338: ST_TO_ADDR
78339: GO 78357
// min_y := y - r ;
78341: LD_ADDR_VAR 0 7
78345: PUSH
78346: LD_VAR 0 2
78350: PUSH
78351: LD_VAR 0 3
78355: MINUS
78356: ST_TO_ADDR
// max_x := x + r ;
78357: LD_ADDR_VAR 0 9
78361: PUSH
78362: LD_VAR 0 1
78366: PUSH
78367: LD_VAR 0 3
78371: PLUS
78372: ST_TO_ADDR
// max_y := y + r ;
78373: LD_ADDR_VAR 0 10
78377: PUSH
78378: LD_VAR 0 2
78382: PUSH
78383: LD_VAR 0 3
78387: PLUS
78388: ST_TO_ADDR
// for _x = min_x to max_x do
78389: LD_ADDR_VAR 0 5
78393: PUSH
78394: DOUBLE
78395: LD_VAR 0 8
78399: DEC
78400: ST_TO_ADDR
78401: LD_VAR 0 9
78405: PUSH
78406: FOR_TO
78407: IFFALSE 78508
// for _y = min_y to max_y do
78409: LD_ADDR_VAR 0 6
78413: PUSH
78414: DOUBLE
78415: LD_VAR 0 7
78419: DEC
78420: ST_TO_ADDR
78421: LD_VAR 0 10
78425: PUSH
78426: FOR_TO
78427: IFFALSE 78504
// begin if not ValidHex ( _x , _y ) then
78429: LD_VAR 0 5
78433: PPUSH
78434: LD_VAR 0 6
78438: PPUSH
78439: CALL_OW 488
78443: NOT
78444: IFFALSE 78448
// continue ;
78446: GO 78426
// if GetResourceTypeXY ( _x , _y ) then
78448: LD_VAR 0 5
78452: PPUSH
78453: LD_VAR 0 6
78457: PPUSH
78458: CALL_OW 283
78462: IFFALSE 78502
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78464: LD_ADDR_VAR 0 4
78468: PUSH
78469: LD_VAR 0 4
78473: PPUSH
78474: LD_VAR 0 4
78478: PUSH
78479: LD_INT 1
78481: PLUS
78482: PPUSH
78483: LD_VAR 0 5
78487: PUSH
78488: LD_VAR 0 6
78492: PUSH
78493: EMPTY
78494: LIST
78495: LIST
78496: PPUSH
78497: CALL_OW 1
78501: ST_TO_ADDR
// end ;
78502: GO 78426
78504: POP
78505: POP
78506: GO 78406
78508: POP
78509: POP
// end ;
78510: LD_VAR 0 4
78514: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78515: LD_INT 0
78517: PPUSH
78518: PPUSH
78519: PPUSH
78520: PPUSH
78521: PPUSH
78522: PPUSH
78523: PPUSH
78524: PPUSH
// if not units then
78525: LD_VAR 0 1
78529: NOT
78530: IFFALSE 78534
// exit ;
78532: GO 79060
// result := UnitFilter ( units , [ f_ok ] ) ;
78534: LD_ADDR_VAR 0 3
78538: PUSH
78539: LD_VAR 0 1
78543: PPUSH
78544: LD_INT 50
78546: PUSH
78547: EMPTY
78548: LIST
78549: PPUSH
78550: CALL_OW 72
78554: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78555: LD_ADDR_VAR 0 8
78559: PUSH
78560: LD_VAR 0 1
78564: PUSH
78565: LD_INT 1
78567: ARRAY
78568: PPUSH
78569: CALL_OW 255
78573: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78574: LD_ADDR_VAR 0 10
78578: PUSH
78579: LD_INT 29
78581: PUSH
78582: LD_EXP 36
78586: PUSH
78587: LD_INT 49
78589: PUSH
78590: EMPTY
78591: LIST
78592: LIST
78593: LIST
78594: ST_TO_ADDR
// if not result then
78595: LD_VAR 0 3
78599: NOT
78600: IFFALSE 78604
// exit ;
78602: GO 79060
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78604: LD_ADDR_VAR 0 5
78608: PUSH
78609: LD_INT 81
78611: PUSH
78612: LD_VAR 0 8
78616: PUSH
78617: EMPTY
78618: LIST
78619: LIST
78620: PPUSH
78621: CALL_OW 69
78625: ST_TO_ADDR
// for i in result do
78626: LD_ADDR_VAR 0 4
78630: PUSH
78631: LD_VAR 0 3
78635: PUSH
78636: FOR_IN
78637: IFFALSE 79058
// begin tag := GetTag ( i ) + 1 ;
78639: LD_ADDR_VAR 0 9
78643: PUSH
78644: LD_VAR 0 4
78648: PPUSH
78649: CALL_OW 110
78653: PUSH
78654: LD_INT 1
78656: PLUS
78657: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78658: LD_ADDR_VAR 0 7
78662: PUSH
78663: LD_VAR 0 4
78667: PPUSH
78668: CALL_OW 250
78672: PPUSH
78673: LD_VAR 0 4
78677: PPUSH
78678: CALL_OW 251
78682: PPUSH
78683: LD_INT 6
78685: PPUSH
78686: CALL 78257 0 3
78690: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78691: LD_VAR 0 4
78695: PPUSH
78696: CALL_OW 247
78700: PUSH
78701: LD_INT 2
78703: EQUAL
78704: PUSH
78705: LD_VAR 0 7
78709: AND
78710: PUSH
78711: LD_VAR 0 4
78715: PPUSH
78716: CALL_OW 264
78720: PUSH
78721: LD_VAR 0 10
78725: IN
78726: NOT
78727: AND
78728: IFFALSE 78767
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78730: LD_VAR 0 4
78734: PPUSH
78735: LD_VAR 0 7
78739: PUSH
78740: LD_INT 1
78742: ARRAY
78743: PUSH
78744: LD_INT 1
78746: ARRAY
78747: PPUSH
78748: LD_VAR 0 7
78752: PUSH
78753: LD_INT 1
78755: ARRAY
78756: PUSH
78757: LD_INT 2
78759: ARRAY
78760: PPUSH
78761: CALL_OW 116
78765: GO 79056
// if path > tag then
78767: LD_VAR 0 2
78771: PUSH
78772: LD_VAR 0 9
78776: GREATER
78777: IFFALSE 78985
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
78779: LD_ADDR_VAR 0 6
78783: PUSH
78784: LD_VAR 0 5
78788: PPUSH
78789: LD_INT 91
78791: PUSH
78792: LD_VAR 0 4
78796: PUSH
78797: LD_INT 8
78799: PUSH
78800: EMPTY
78801: LIST
78802: LIST
78803: LIST
78804: PPUSH
78805: CALL_OW 72
78809: ST_TO_ADDR
// if nearEnemy then
78810: LD_VAR 0 6
78814: IFFALSE 78883
// begin if GetWeapon ( i ) = ru_time_lapser then
78816: LD_VAR 0 4
78820: PPUSH
78821: CALL_OW 264
78825: PUSH
78826: LD_INT 49
78828: EQUAL
78829: IFFALSE 78857
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78831: LD_VAR 0 4
78835: PPUSH
78836: LD_VAR 0 6
78840: PPUSH
78841: LD_VAR 0 4
78845: PPUSH
78846: CALL_OW 74
78850: PPUSH
78851: CALL_OW 112
78855: GO 78881
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78857: LD_VAR 0 4
78861: PPUSH
78862: LD_VAR 0 6
78866: PPUSH
78867: LD_VAR 0 4
78871: PPUSH
78872: CALL_OW 74
78876: PPUSH
78877: CALL_OW 115
// end else
78881: GO 78983
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78883: LD_VAR 0 4
78887: PPUSH
78888: LD_VAR 0 2
78892: PUSH
78893: LD_VAR 0 9
78897: ARRAY
78898: PUSH
78899: LD_INT 1
78901: ARRAY
78902: PPUSH
78903: LD_VAR 0 2
78907: PUSH
78908: LD_VAR 0 9
78912: ARRAY
78913: PUSH
78914: LD_INT 2
78916: ARRAY
78917: PPUSH
78918: CALL_OW 297
78922: PUSH
78923: LD_INT 6
78925: GREATER
78926: IFFALSE 78969
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78928: LD_VAR 0 4
78932: PPUSH
78933: LD_VAR 0 2
78937: PUSH
78938: LD_VAR 0 9
78942: ARRAY
78943: PUSH
78944: LD_INT 1
78946: ARRAY
78947: PPUSH
78948: LD_VAR 0 2
78952: PUSH
78953: LD_VAR 0 9
78957: ARRAY
78958: PUSH
78959: LD_INT 2
78961: ARRAY
78962: PPUSH
78963: CALL_OW 114
78967: GO 78983
// SetTag ( i , tag ) ;
78969: LD_VAR 0 4
78973: PPUSH
78974: LD_VAR 0 9
78978: PPUSH
78979: CALL_OW 109
// end else
78983: GO 79056
// if enemy then
78985: LD_VAR 0 5
78989: IFFALSE 79056
// begin if GetWeapon ( i ) = ru_time_lapser then
78991: LD_VAR 0 4
78995: PPUSH
78996: CALL_OW 264
79000: PUSH
79001: LD_INT 49
79003: EQUAL
79004: IFFALSE 79032
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79006: LD_VAR 0 4
79010: PPUSH
79011: LD_VAR 0 5
79015: PPUSH
79016: LD_VAR 0 4
79020: PPUSH
79021: CALL_OW 74
79025: PPUSH
79026: CALL_OW 112
79030: GO 79056
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79032: LD_VAR 0 4
79036: PPUSH
79037: LD_VAR 0 5
79041: PPUSH
79042: LD_VAR 0 4
79046: PPUSH
79047: CALL_OW 74
79051: PPUSH
79052: CALL_OW 115
// end ; end ;
79056: GO 78636
79058: POP
79059: POP
// end ;
79060: LD_VAR 0 3
79064: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79065: LD_INT 0
79067: PPUSH
79068: PPUSH
79069: PPUSH
// if not unit or IsInUnit ( unit ) then
79070: LD_VAR 0 1
79074: NOT
79075: PUSH
79076: LD_VAR 0 1
79080: PPUSH
79081: CALL_OW 310
79085: OR
79086: IFFALSE 79090
// exit ;
79088: GO 79181
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79090: LD_ADDR_VAR 0 4
79094: PUSH
79095: LD_VAR 0 1
79099: PPUSH
79100: CALL_OW 250
79104: PPUSH
79105: LD_VAR 0 2
79109: PPUSH
79110: LD_INT 1
79112: PPUSH
79113: CALL_OW 272
79117: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79118: LD_ADDR_VAR 0 5
79122: PUSH
79123: LD_VAR 0 1
79127: PPUSH
79128: CALL_OW 251
79132: PPUSH
79133: LD_VAR 0 2
79137: PPUSH
79138: LD_INT 1
79140: PPUSH
79141: CALL_OW 273
79145: ST_TO_ADDR
// if ValidHex ( x , y ) then
79146: LD_VAR 0 4
79150: PPUSH
79151: LD_VAR 0 5
79155: PPUSH
79156: CALL_OW 488
79160: IFFALSE 79181
// ComTurnXY ( unit , x , y ) ;
79162: LD_VAR 0 1
79166: PPUSH
79167: LD_VAR 0 4
79171: PPUSH
79172: LD_VAR 0 5
79176: PPUSH
79177: CALL_OW 118
// end ;
79181: LD_VAR 0 3
79185: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79186: LD_INT 0
79188: PPUSH
79189: PPUSH
// result := false ;
79190: LD_ADDR_VAR 0 3
79194: PUSH
79195: LD_INT 0
79197: ST_TO_ADDR
// if not units then
79198: LD_VAR 0 2
79202: NOT
79203: IFFALSE 79207
// exit ;
79205: GO 79252
// for i in units do
79207: LD_ADDR_VAR 0 4
79211: PUSH
79212: LD_VAR 0 2
79216: PUSH
79217: FOR_IN
79218: IFFALSE 79250
// if See ( side , i ) then
79220: LD_VAR 0 1
79224: PPUSH
79225: LD_VAR 0 4
79229: PPUSH
79230: CALL_OW 292
79234: IFFALSE 79248
// begin result := true ;
79236: LD_ADDR_VAR 0 3
79240: PUSH
79241: LD_INT 1
79243: ST_TO_ADDR
// exit ;
79244: POP
79245: POP
79246: GO 79252
// end ;
79248: GO 79217
79250: POP
79251: POP
// end ;
79252: LD_VAR 0 3
79256: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79257: LD_INT 0
79259: PPUSH
79260: PPUSH
79261: PPUSH
79262: PPUSH
// if not unit or not points then
79263: LD_VAR 0 1
79267: NOT
79268: PUSH
79269: LD_VAR 0 2
79273: NOT
79274: OR
79275: IFFALSE 79279
// exit ;
79277: GO 79369
// dist := 99999 ;
79279: LD_ADDR_VAR 0 5
79283: PUSH
79284: LD_INT 99999
79286: ST_TO_ADDR
// for i in points do
79287: LD_ADDR_VAR 0 4
79291: PUSH
79292: LD_VAR 0 2
79296: PUSH
79297: FOR_IN
79298: IFFALSE 79367
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79300: LD_ADDR_VAR 0 6
79304: PUSH
79305: LD_VAR 0 1
79309: PPUSH
79310: LD_VAR 0 4
79314: PUSH
79315: LD_INT 1
79317: ARRAY
79318: PPUSH
79319: LD_VAR 0 4
79323: PUSH
79324: LD_INT 2
79326: ARRAY
79327: PPUSH
79328: CALL_OW 297
79332: ST_TO_ADDR
// if tmpDist < dist then
79333: LD_VAR 0 6
79337: PUSH
79338: LD_VAR 0 5
79342: LESS
79343: IFFALSE 79365
// begin result := i ;
79345: LD_ADDR_VAR 0 3
79349: PUSH
79350: LD_VAR 0 4
79354: ST_TO_ADDR
// dist := tmpDist ;
79355: LD_ADDR_VAR 0 5
79359: PUSH
79360: LD_VAR 0 6
79364: ST_TO_ADDR
// end ; end ;
79365: GO 79297
79367: POP
79368: POP
// end ;
79369: LD_VAR 0 3
79373: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79374: LD_INT 0
79376: PPUSH
// uc_side := side ;
79377: LD_ADDR_OWVAR 20
79381: PUSH
79382: LD_VAR 0 1
79386: ST_TO_ADDR
// uc_nation := 3 ;
79387: LD_ADDR_OWVAR 21
79391: PUSH
79392: LD_INT 3
79394: ST_TO_ADDR
// vc_chassis := 25 ;
79395: LD_ADDR_OWVAR 37
79399: PUSH
79400: LD_INT 25
79402: ST_TO_ADDR
// vc_engine := engine_siberite ;
79403: LD_ADDR_OWVAR 39
79407: PUSH
79408: LD_INT 3
79410: ST_TO_ADDR
// vc_control := control_computer ;
79411: LD_ADDR_OWVAR 38
79415: PUSH
79416: LD_INT 3
79418: ST_TO_ADDR
// vc_weapon := 59 ;
79419: LD_ADDR_OWVAR 40
79423: PUSH
79424: LD_INT 59
79426: ST_TO_ADDR
// result := CreateVehicle ;
79427: LD_ADDR_VAR 0 5
79431: PUSH
79432: CALL_OW 45
79436: ST_TO_ADDR
// SetDir ( result , d ) ;
79437: LD_VAR 0 5
79441: PPUSH
79442: LD_VAR 0 4
79446: PPUSH
79447: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79451: LD_VAR 0 5
79455: PPUSH
79456: LD_VAR 0 2
79460: PPUSH
79461: LD_VAR 0 3
79465: PPUSH
79466: LD_INT 0
79468: PPUSH
79469: CALL_OW 48
// end ;
79473: LD_VAR 0 5
79477: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79478: LD_INT 0
79480: PPUSH
79481: PPUSH
79482: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79483: LD_ADDR_VAR 0 2
79487: PUSH
79488: LD_INT 0
79490: PUSH
79491: LD_INT 0
79493: PUSH
79494: LD_INT 0
79496: PUSH
79497: LD_INT 0
79499: PUSH
79500: EMPTY
79501: LIST
79502: LIST
79503: LIST
79504: LIST
79505: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79506: LD_VAR 0 1
79510: NOT
79511: PUSH
79512: LD_VAR 0 1
79516: PPUSH
79517: CALL_OW 264
79521: PUSH
79522: LD_INT 12
79524: PUSH
79525: LD_INT 51
79527: PUSH
79528: LD_INT 32
79530: PUSH
79531: LD_EXP 33
79535: PUSH
79536: EMPTY
79537: LIST
79538: LIST
79539: LIST
79540: LIST
79541: IN
79542: NOT
79543: OR
79544: IFFALSE 79548
// exit ;
79546: GO 79646
// for i := 1 to 3 do
79548: LD_ADDR_VAR 0 3
79552: PUSH
79553: DOUBLE
79554: LD_INT 1
79556: DEC
79557: ST_TO_ADDR
79558: LD_INT 3
79560: PUSH
79561: FOR_TO
79562: IFFALSE 79644
// begin tmp := GetCargo ( cargo , i ) ;
79564: LD_ADDR_VAR 0 4
79568: PUSH
79569: LD_VAR 0 1
79573: PPUSH
79574: LD_VAR 0 3
79578: PPUSH
79579: CALL_OW 289
79583: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79584: LD_ADDR_VAR 0 2
79588: PUSH
79589: LD_VAR 0 2
79593: PPUSH
79594: LD_VAR 0 3
79598: PPUSH
79599: LD_VAR 0 4
79603: PPUSH
79604: CALL_OW 1
79608: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79609: LD_ADDR_VAR 0 2
79613: PUSH
79614: LD_VAR 0 2
79618: PPUSH
79619: LD_INT 4
79621: PPUSH
79622: LD_VAR 0 2
79626: PUSH
79627: LD_INT 4
79629: ARRAY
79630: PUSH
79631: LD_VAR 0 4
79635: PLUS
79636: PPUSH
79637: CALL_OW 1
79641: ST_TO_ADDR
// end ;
79642: GO 79561
79644: POP
79645: POP
// end ;
79646: LD_VAR 0 2
79650: RET
// export function Length ( array ) ; begin
79651: LD_INT 0
79653: PPUSH
// result := array + 0 ;
79654: LD_ADDR_VAR 0 2
79658: PUSH
79659: LD_VAR 0 1
79663: PUSH
79664: LD_INT 0
79666: PLUS
79667: ST_TO_ADDR
// end ;
79668: LD_VAR 0 2
79672: RET
// export function PrepareArray ( array ) ; begin
79673: LD_INT 0
79675: PPUSH
// result := array diff 0 ;
79676: LD_ADDR_VAR 0 2
79680: PUSH
79681: LD_VAR 0 1
79685: PUSH
79686: LD_INT 0
79688: DIFF
79689: ST_TO_ADDR
// if not result [ 1 ] then
79690: LD_VAR 0 2
79694: PUSH
79695: LD_INT 1
79697: ARRAY
79698: NOT
79699: IFFALSE 79719
// result := Delete ( result , 1 ) ;
79701: LD_ADDR_VAR 0 2
79705: PUSH
79706: LD_VAR 0 2
79710: PPUSH
79711: LD_INT 1
79713: PPUSH
79714: CALL_OW 3
79718: ST_TO_ADDR
// end ; end_of_file
79719: LD_VAR 0 2
79723: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79724: LD_VAR 0 1
79728: PUSH
79729: LD_INT 200
79731: DOUBLE
79732: GREATEREQUAL
79733: IFFALSE 79741
79735: LD_INT 299
79737: DOUBLE
79738: LESSEQUAL
79739: IFTRUE 79743
79741: GO 79775
79743: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79744: LD_VAR 0 1
79748: PPUSH
79749: LD_VAR 0 2
79753: PPUSH
79754: LD_VAR 0 3
79758: PPUSH
79759: LD_VAR 0 4
79763: PPUSH
79764: LD_VAR 0 5
79768: PPUSH
79769: CALL 34575 0 5
79773: GO 79852
79775: LD_INT 300
79777: DOUBLE
79778: GREATEREQUAL
79779: IFFALSE 79787
79781: LD_INT 399
79783: DOUBLE
79784: LESSEQUAL
79785: IFTRUE 79789
79787: GO 79851
79789: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79790: LD_VAR 0 1
79794: PPUSH
79795: LD_VAR 0 2
79799: PPUSH
79800: LD_VAR 0 3
79804: PPUSH
79805: LD_VAR 0 4
79809: PPUSH
79810: LD_VAR 0 5
79814: PPUSH
79815: LD_VAR 0 6
79819: PPUSH
79820: LD_VAR 0 7
79824: PPUSH
79825: LD_VAR 0 8
79829: PPUSH
79830: LD_VAR 0 9
79834: PPUSH
79835: LD_VAR 0 10
79839: PPUSH
79840: LD_VAR 0 11
79844: PPUSH
79845: CALL 30904 0 11
79849: GO 79852
79851: POP
// end ;
79852: PPOPN 11
79854: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79855: LD_VAR 0 1
79859: PPUSH
79860: LD_VAR 0 2
79864: PPUSH
79865: LD_VAR 0 3
79869: PPUSH
79870: LD_VAR 0 4
79874: PPUSH
79875: LD_VAR 0 5
79879: PPUSH
79880: CALL 34311 0 5
// end ; end_of_file
79884: PPOPN 5
79886: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79887: LD_VAR 0 1
79891: PPUSH
79892: LD_VAR 0 2
79896: PPUSH
79897: LD_VAR 0 3
79901: PPUSH
79902: LD_VAR 0 4
79906: PPUSH
79907: LD_VAR 0 5
79911: PPUSH
79912: LD_VAR 0 6
79916: PPUSH
79917: CALL 18597 0 6
// end ;
79921: PPOPN 6
79923: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79924: LD_INT 0
79926: PPUSH
// begin if not units then
79927: LD_VAR 0 1
79931: NOT
79932: IFFALSE 79936
// exit ;
79934: GO 79936
// end ;
79936: PPOPN 7
79938: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79939: CALL 18568 0 0
// end ;
79943: PPOPN 1
79945: END
