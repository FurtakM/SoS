// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 , macmilan_squad ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// mission_prefix := 08_ ;
  15: LD_ADDR_EXP 43
  19: PUSH
  20: LD_STRING 08_
  22: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  23: LD_ADDR_EXP 44
  27: PUSH
  28: LD_STRING 07c_
  30: ST_TO_ADDR
// JMMArrive = 0 ;
  31: LD_ADDR_EXP 39
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// SikorskyArrive = 0 ;
  39: LD_ADDR_EXP 18
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  47: LD_ADDR_EXP 19
  51: PUSH
  52: LD_INT 35
  54: ST_TO_ADDR
// SikorskyAI = 0 ;
  55: LD_ADDR_EXP 20
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// SikorskyStatus = 0 ;
  63: LD_ADDR_EXP 21
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// firstAttack = 0 ;
  71: LD_ADDR_EXP 33
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// secondAttack = 0 ;
  79: LD_ADDR_EXP 34
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// startCutscene = 1 ;
  87: LD_ADDR_EXP 38
  91: PUSH
  92: LD_INT 1
  94: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  95: LD_ADDR_EXP 12
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 0
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// russianAI = 0 ;
 111: LD_ADDR_EXP 27
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// escapeAvalaible = 0 ;
 126: LD_ADDR_EXP 36
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// defenders_list = [ ] ;
 134: LD_ADDR_EXP 32
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// varEvent1 = 0 ;
 141: LD_ADDR_EXP 41
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// timerStatus = 0 ;
 149: LD_ADDR_EXP 35
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 157: LD_ADDR_EXP 40
 161: PUSH
 162: LD_INT 18
 164: PUSH
 165: LD_INT 17
 167: PUSH
 168: LD_INT 15
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// debugMode = 0 ;
 182: LD_ADDR_EXP 45
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// PrepareDifficulty ;
 190: CALL 7533 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 194: LD_INT 43
 196: PPUSH
 197: LD_INT 22
 199: PPUSH
 200: LD_INT 1
 202: PPUSH
 203: LD_INT 333
 205: NEG
 206: PPUSH
 207: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 211: LD_INT 43
 213: PPUSH
 214: LD_INT 22
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 331
// PrepareBase ;
 224: CALL 2542 0 0
// PrepareHeroes ;
 228: CALL 526 0 0
// PrepareRussianCommander ;
 232: CALL 6304 0 0
// PrepareRussians ;
 236: CALL 6622 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 240: LD_INT 22
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 25
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 69
 268: PPUSH
 269: LD_INT 0
 271: PPUSH
 272: LD_INT 90
 274: PPUSH
 275: LD_INT 86
 277: PPUSH
 278: LD_INT 3
 280: PPUSH
 281: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 285: LD_INT 3
 287: PPUSH
 288: LD_INT 24
 290: PPUSH
 291: LD_INT 3
 293: PPUSH
 294: LD_EXP 25
 298: PPUSH
 299: LD_EXP 26
 303: PPUSH
 304: CALL_OW 12
 308: PPUSH
 309: LD_INT 6
 311: PPUSH
 312: LD_INT 4
 314: PPUSH
 315: CALL 8943 0 6
// PrepareCutsceneAttack ;
 319: CALL 6356 0 0
// end ;
 323: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 324: LD_EXP 45
 328: PUSH
 329: LD_INT 1
 331: EQUAL
 332: IFFALSE 523
 334: GO 336
 336: DISABLE
 337: LD_INT 0
 339: PPUSH
// begin enable ;
 340: ENABLE
// fogoff ( true ) ;
 341: LD_INT 1
 343: PPUSH
 344: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 348: LD_ADDR_VAR 0 1
 352: PUSH
 353: LD_INT 22
 355: PUSH
 356: LD_INT 1
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: LD_INT 21
 365: PUSH
 366: LD_INT 1
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: PPUSH
 377: CALL_OW 69
 381: PUSH
 382: FOR_IN
 383: IFFALSE 399
// SetLives ( i , 1000 ) ;
 385: LD_VAR 0 1
 389: PPUSH
 390: LD_INT 1000
 392: PPUSH
 393: CALL_OW 234
 397: GO 382
 399: POP
 400: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 401: LD_ADDR_VAR 0 1
 405: PUSH
 406: LD_INT 22
 408: PUSH
 409: LD_INT 1
 411: PUSH
 412: EMPTY
 413: LIST
 414: LIST
 415: PUSH
 416: LD_INT 30
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PUSH
 426: EMPTY
 427: LIST
 428: LIST
 429: PPUSH
 430: CALL_OW 69
 434: PUSH
 435: FOR_IN
 436: IFFALSE 460
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 438: LD_VAR 0 1
 442: PPUSH
 443: CALL_OW 274
 447: PPUSH
 448: LD_INT 1
 450: PPUSH
 451: LD_INT 9999
 453: PPUSH
 454: CALL_OW 277
 458: GO 435
 460: POP
 461: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 462: LD_ADDR_VAR 0 1
 466: PUSH
 467: LD_INT 22
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: LD_INT 30
 479: PUSH
 480: LD_INT 1
 482: PUSH
 483: EMPTY
 484: LIST
 485: LIST
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: PPUSH
 491: CALL_OW 69
 495: PUSH
 496: FOR_IN
 497: IFFALSE 521
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 499: LD_VAR 0 1
 503: PPUSH
 504: CALL_OW 274
 508: PPUSH
 509: LD_INT 2
 511: PPUSH
 512: LD_INT 9999
 514: PPUSH
 515: CALL_OW 277
 519: GO 496
 521: POP
 522: POP
// end ; end_of_file
 523: PPOPN 1
 525: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 526: LD_INT 0
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
 536: PPUSH
 537: PPUSH
 538: PPUSH
 539: PPUSH
 540: PPUSH
 541: PPUSH
 542: PPUSH
// uc_side = 1 ;
 543: LD_ADDR_OWVAR 20
 547: PUSH
 548: LD_INT 1
 550: ST_TO_ADDR
// uc_nation = 1 ;
 551: LD_ADDR_OWVAR 21
 555: PUSH
 556: LD_INT 1
 558: ST_TO_ADDR
// if gammaCommander = 1 then
 559: LD_EXP 12
 563: PUSH
 564: LD_INT 1
 566: EQUAL
 567: IFFALSE 615
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 569: LD_ADDR_EXP 3
 573: PUSH
 574: LD_STRING 04_Donaldson
 576: PPUSH
 577: LD_INT 1
 579: PPUSH
 580: CALL 7040 0 2
 584: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 585: LD_EXP 3
 589: PPUSH
 590: LD_INT 54
 592: PPUSH
 593: LD_INT 25
 595: PPUSH
 596: LD_INT 8
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: CALL_OW 50
// ComHold ( Donaldson ) ;
 606: LD_EXP 3
 610: PPUSH
 611: CALL_OW 140
// end ; if gammaCommander = 2 then
 615: LD_EXP 12
 619: PUSH
 620: LD_INT 2
 622: EQUAL
 623: IFFALSE 671
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 625: LD_ADDR_EXP 2
 629: PUSH
 630: LD_STRING 04_Brown
 632: PPUSH
 633: LD_INT 1
 635: PPUSH
 636: CALL 7040 0 2
 640: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 641: LD_EXP 2
 645: PPUSH
 646: LD_INT 54
 648: PPUSH
 649: LD_INT 25
 651: PPUSH
 652: LD_INT 8
 654: PPUSH
 655: LD_INT 0
 657: PPUSH
 658: CALL_OW 50
// ComHold ( Brown ) ;
 662: LD_EXP 2
 666: PPUSH
 667: CALL_OW 140
// end ; if gammaCommander = 3 then
 671: LD_EXP 12
 675: PUSH
 676: LD_INT 3
 678: EQUAL
 679: IFFALSE 727
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 681: LD_ADDR_EXP 13
 685: PUSH
 686: LD_STRING VanHouten
 688: PPUSH
 689: LD_INT 1
 691: PPUSH
 692: CALL 7040 0 2
 696: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 697: LD_EXP 13
 701: PPUSH
 702: LD_INT 54
 704: PPUSH
 705: LD_INT 25
 707: PPUSH
 708: LD_INT 8
 710: PPUSH
 711: LD_INT 0
 713: PPUSH
 714: CALL_OW 50
// ComHold ( Houten ) ;
 718: LD_EXP 13
 722: PPUSH
 723: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 727: LD_ADDR_EXP 22
 731: PUSH
 732: LD_STRING Harisson
 734: PPUSH
 735: LD_INT 0
 737: PPUSH
 738: CALL 7040 0 2
 742: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 743: LD_ADDR_EXP 23
 747: PUSH
 748: LD_STRING Powell
 750: PPUSH
 751: LD_INT 0
 753: PPUSH
 754: CALL 7040 0 2
 758: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 759: LD_STRING 04_Lisa
 761: PUSH
 762: EMPTY
 763: LIST
 764: PPUSH
 765: CALL_OW 28
 769: PUSH
 770: LD_STRING LisaInDelta
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 30
 780: NOT
 781: AND
 782: PUSH
 783: LD_STRING 07_Lisa
 785: PUSH
 786: EMPTY
 787: LIST
 788: PPUSH
 789: CALL_OW 28
 793: NOT
 794: AND
 795: IFFALSE 831
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 797: LD_ADDR_EXP 6
 801: PUSH
 802: LD_STRING 04_Lisa
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: CALL 7040 0 2
 812: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 813: LD_ADDR_VAR 0 15
 817: PUSH
 818: LD_VAR 0 15
 822: PUSH
 823: LD_EXP 6
 827: ADD
 828: ST_TO_ADDR
// end else
 829: GO 883
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 831: LD_EXP 6
 835: NOT
 836: PUSH
 837: LD_STRING LisaIn07
 839: PPUSH
 840: LD_INT 0
 842: PPUSH
 843: CALL_OW 30
 847: NOT
 848: AND
 849: IFFALSE 883
// begin Lisa := PrepareUnit ( 07_Lisa , true ) ;
 851: LD_ADDR_EXP 6
 855: PUSH
 856: LD_STRING 07_Lisa
 858: PPUSH
 859: LD_INT 1
 861: PPUSH
 862: CALL 7040 0 2
 866: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 867: LD_ADDR_VAR 0 15
 871: PUSH
 872: LD_VAR 0 15
 876: PUSH
 877: LD_EXP 6
 881: ADD
 882: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 883: LD_STRING 04_Bobby
 885: PUSH
 886: EMPTY
 887: LIST
 888: PPUSH
 889: CALL_OW 28
 893: PUSH
 894: LD_STRING BobbyInDelta
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 30
 904: NOT
 905: AND
 906: PUSH
 907: LD_STRING 07_Bobby
 909: PUSH
 910: EMPTY
 911: LIST
 912: PPUSH
 913: CALL_OW 28
 917: NOT
 918: AND
 919: IFFALSE 955
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 921: LD_ADDR_EXP 4
 925: PUSH
 926: LD_STRING 04_Bobby
 928: PPUSH
 929: LD_INT 1
 931: PPUSH
 932: CALL 7040 0 2
 936: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 937: LD_ADDR_VAR 0 15
 941: PUSH
 942: LD_VAR 0 15
 946: PUSH
 947: LD_EXP 4
 951: ADD
 952: ST_TO_ADDR
// end else
 953: GO 1007
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 955: LD_EXP 4
 959: NOT
 960: PUSH
 961: LD_STRING BobbyIn07
 963: PPUSH
 964: LD_INT 0
 966: PPUSH
 967: CALL_OW 30
 971: NOT
 972: AND
 973: IFFALSE 1007
// begin Bobby := PrepareUnit ( 07_Bobby , true ) ;
 975: LD_ADDR_EXP 4
 979: PUSH
 980: LD_STRING 07_Bobby
 982: PPUSH
 983: LD_INT 1
 985: PPUSH
 986: CALL 7040 0 2
 990: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 991: LD_ADDR_VAR 0 15
 995: PUSH
 996: LD_VAR 0 15
1000: PUSH
1001: LD_EXP 4
1005: ADD
1006: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1007: LD_STRING 04_Cyrus
1009: PUSH
1010: EMPTY
1011: LIST
1012: PPUSH
1013: CALL_OW 28
1017: PUSH
1018: LD_STRING CyrusInDelta
1020: PPUSH
1021: LD_INT 0
1023: PPUSH
1024: CALL_OW 30
1028: NOT
1029: AND
1030: PUSH
1031: LD_STRING 07_Cyrus
1033: PUSH
1034: EMPTY
1035: LIST
1036: PPUSH
1037: CALL_OW 28
1041: NOT
1042: AND
1043: IFFALSE 1079
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
1045: LD_ADDR_EXP 5
1049: PUSH
1050: LD_STRING 04_Cyrus
1052: PPUSH
1053: LD_INT 1
1055: PPUSH
1056: CALL 7040 0 2
1060: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1061: LD_ADDR_VAR 0 15
1065: PUSH
1066: LD_VAR 0 15
1070: PUSH
1071: LD_EXP 5
1075: ADD
1076: ST_TO_ADDR
// end else
1077: GO 1131
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1079: LD_EXP 5
1083: NOT
1084: PUSH
1085: LD_STRING CyrusIn07
1087: PPUSH
1088: LD_INT 0
1090: PPUSH
1091: CALL_OW 30
1095: NOT
1096: AND
1097: IFFALSE 1131
// begin Cyrus := PrepareUnit ( 07_Cyrus , true ) ;
1099: LD_ADDR_EXP 5
1103: PUSH
1104: LD_STRING 07_Cyrus
1106: PPUSH
1107: LD_INT 1
1109: PPUSH
1110: CALL 7040 0 2
1114: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1115: LD_ADDR_VAR 0 15
1119: PUSH
1120: LD_VAR 0 15
1124: PUSH
1125: LD_EXP 5
1129: ADD
1130: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1131: LD_STRING 04_Brown
1133: PUSH
1134: EMPTY
1135: LIST
1136: PPUSH
1137: CALL_OW 28
1141: PUSH
1142: LD_STRING BrownInDelta
1144: PPUSH
1145: LD_INT 0
1147: PPUSH
1148: CALL_OW 30
1152: NOT
1153: AND
1154: PUSH
1155: LD_STRING 07_Brown
1157: PUSH
1158: EMPTY
1159: LIST
1160: PPUSH
1161: CALL_OW 28
1165: NOT
1166: AND
1167: PUSH
1168: LD_EXP 12
1172: PUSH
1173: LD_INT 2
1175: NONEQUAL
1176: AND
1177: IFFALSE 1213
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
1179: LD_ADDR_EXP 2
1183: PUSH
1184: LD_STRING 04_Brown
1186: PPUSH
1187: LD_INT 1
1189: PPUSH
1190: CALL 7040 0 2
1194: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1195: LD_ADDR_VAR 0 15
1199: PUSH
1200: LD_VAR 0 15
1204: PUSH
1205: LD_EXP 2
1209: ADD
1210: ST_TO_ADDR
// end else
1211: GO 1275
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1213: LD_EXP 2
1217: NOT
1218: PUSH
1219: LD_STRING BrownIn07
1221: PPUSH
1222: LD_INT 0
1224: PPUSH
1225: CALL_OW 30
1229: NOT
1230: AND
1231: PUSH
1232: LD_EXP 12
1236: PUSH
1237: LD_INT 2
1239: NONEQUAL
1240: AND
1241: IFFALSE 1275
// begin Brown := PrepareUnit ( 07_Brown , true ) ;
1243: LD_ADDR_EXP 2
1247: PUSH
1248: LD_STRING 07_Brown
1250: PPUSH
1251: LD_INT 1
1253: PPUSH
1254: CALL 7040 0 2
1258: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1259: LD_ADDR_VAR 0 15
1263: PUSH
1264: LD_VAR 0 15
1268: PUSH
1269: LD_EXP 2
1273: ADD
1274: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1275: LD_STRING 04_Donaldson
1277: PUSH
1278: EMPTY
1279: LIST
1280: PPUSH
1281: CALL_OW 28
1285: PUSH
1286: LD_STRING DonaldsonInDelta
1288: PPUSH
1289: LD_INT 0
1291: PPUSH
1292: CALL_OW 30
1296: NOT
1297: AND
1298: PUSH
1299: LD_STRING 07_Donaldson
1301: PUSH
1302: EMPTY
1303: LIST
1304: PPUSH
1305: CALL_OW 28
1309: NOT
1310: AND
1311: PUSH
1312: LD_EXP 12
1316: PUSH
1317: LD_INT 1
1319: NONEQUAL
1320: AND
1321: IFFALSE 1357
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1323: LD_ADDR_EXP 3
1327: PUSH
1328: LD_STRING 04_Donaldson
1330: PPUSH
1331: LD_INT 1
1333: PPUSH
1334: CALL 7040 0 2
1338: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1339: LD_ADDR_VAR 0 15
1343: PUSH
1344: LD_VAR 0 15
1348: PUSH
1349: LD_EXP 3
1353: ADD
1354: ST_TO_ADDR
// end else
1355: GO 1419
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1357: LD_EXP 3
1361: NOT
1362: PUSH
1363: LD_STRING DonaldsonIn07
1365: PPUSH
1366: LD_INT 0
1368: PPUSH
1369: CALL_OW 30
1373: NOT
1374: AND
1375: PUSH
1376: LD_EXP 12
1380: PUSH
1381: LD_INT 1
1383: NONEQUAL
1384: AND
1385: IFFALSE 1419
// begin Donaldson := PrepareUnit ( 07_Donaldson , true ) ;
1387: LD_ADDR_EXP 3
1391: PUSH
1392: LD_STRING 07_Donaldson
1394: PPUSH
1395: LD_INT 1
1397: PPUSH
1398: CALL 7040 0 2
1402: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1403: LD_ADDR_VAR 0 15
1407: PUSH
1408: LD_VAR 0 15
1412: PUSH
1413: LD_EXP 3
1417: ADD
1418: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1419: LD_STRING KhatamIn07
1421: PPUSH
1422: LD_INT 0
1424: PPUSH
1425: CALL_OW 30
1429: NOT
1430: IFFALSE 1464
// begin Khatam := PrepareUnit ( 07_Khatam , true ) ;
1432: LD_ADDR_EXP 10
1436: PUSH
1437: LD_STRING 07_Khatam
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL 7040 0 2
1447: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1448: LD_ADDR_VAR 0 15
1452: PUSH
1453: LD_VAR 0 15
1457: PUSH
1458: LD_EXP 10
1462: ADD
1463: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1464: LD_ADDR_EXP 11
1468: PUSH
1469: LD_STRING 07_othersGamma
1471: PPUSH
1472: CALL_OW 31
1476: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1477: LD_ADDR_VAR 0 14
1481: PUSH
1482: LD_INT 8
1484: PUSH
1485: LD_EXP 11
1489: MINUS
1490: ST_TO_ADDR
// if tmp then
1491: LD_VAR 0 14
1495: IFFALSE 1548
// for i = 1 to tmp do
1497: LD_ADDR_VAR 0 2
1501: PUSH
1502: DOUBLE
1503: LD_INT 1
1505: DEC
1506: ST_TO_ADDR
1507: LD_VAR 0 14
1511: PUSH
1512: FOR_TO
1513: IFFALSE 1546
// begin PrepareHuman ( false , 1 , 5 ) ;
1515: LD_INT 0
1517: PPUSH
1518: LD_INT 1
1520: PPUSH
1521: LD_INT 5
1523: PPUSH
1524: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1528: LD_ADDR_EXP 11
1532: PUSH
1533: LD_EXP 11
1537: PUSH
1538: CALL_OW 44
1542: ADD
1543: ST_TO_ADDR
// end ;
1544: GO 1512
1546: POP
1547: POP
// if HexInfo ( 61 , 29 ) = 0 then
1548: LD_INT 61
1550: PPUSH
1551: LD_INT 29
1553: PPUSH
1554: CALL_OW 428
1558: PUSH
1559: LD_INT 0
1561: EQUAL
1562: IFFALSE 1593
// begin bc_type := b_barracks ;
1564: LD_ADDR_OWVAR 42
1568: PUSH
1569: LD_INT 5
1571: ST_TO_ADDR
// bc_level := 6 ;
1572: LD_ADDR_OWVAR 43
1576: PUSH
1577: LD_INT 6
1579: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1580: LD_INT 61
1582: PPUSH
1583: LD_INT 29
1585: PPUSH
1586: LD_INT 5
1588: PPUSH
1589: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1593: LD_ADDR_VAR 0 13
1597: PUSH
1598: LD_INT 22
1600: PUSH
1601: LD_INT 1
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: PUSH
1608: LD_INT 30
1610: PUSH
1611: LD_INT 31
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PPUSH
1622: CALL_OW 69
1626: ST_TO_ADDR
// for i in bun do
1627: LD_ADDR_VAR 0 2
1631: PUSH
1632: LD_VAR 0 13
1636: PUSH
1637: FOR_IN
1638: IFFALSE 1770
// begin x := GetX ( i ) ;
1640: LD_ADDR_VAR 0 3
1644: PUSH
1645: LD_VAR 0 2
1649: PPUSH
1650: CALL_OW 250
1654: ST_TO_ADDR
// y := GetY ( i ) ;
1655: LD_ADDR_VAR 0 4
1659: PUSH
1660: LD_VAR 0 2
1664: PPUSH
1665: CALL_OW 251
1669: ST_TO_ADDR
// d := GetDir ( i ) ;
1670: LD_ADDR_VAR 0 5
1674: PUSH
1675: LD_VAR 0 2
1679: PPUSH
1680: CALL_OW 254
1684: ST_TO_ADDR
// RemoveUnit ( i ) ;
1685: LD_VAR 0 2
1689: PPUSH
1690: CALL_OW 64
// bc_type := b_bunker ;
1694: LD_ADDR_OWVAR 42
1698: PUSH
1699: LD_INT 32
1701: ST_TO_ADDR
// bc_level := 6 ;
1702: LD_ADDR_OWVAR 43
1706: PUSH
1707: LD_INT 6
1709: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1710: LD_ADDR_VAR 0 6
1714: PUSH
1715: LD_VAR 0 3
1719: PPUSH
1720: LD_VAR 0 4
1724: PPUSH
1725: LD_VAR 0 5
1729: PPUSH
1730: CALL_OW 47
1734: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1735: LD_VAR 0 6
1739: PPUSH
1740: LD_INT 5
1742: PUSH
1743: LD_INT 4
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PUSH
1750: LD_VAR 0 2
1754: PUSH
1755: LD_INT 2
1757: MOD
1758: PUSH
1759: LD_INT 1
1761: PLUS
1762: ARRAY
1763: PPUSH
1764: CALL_OW 431
// end ;
1768: GO 1637
1770: POP
1771: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1772: LD_ADDR_VAR 0 9
1776: PUSH
1777: LD_INT 22
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 30
1789: PUSH
1790: LD_INT 5
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: PPUSH
1801: CALL_OW 69
1805: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1806: LD_ADDR_VAR 0 8
1810: PUSH
1811: LD_INT 22
1813: PUSH
1814: LD_INT 1
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PUSH
1821: LD_INT 2
1823: PUSH
1824: LD_INT 30
1826: PUSH
1827: LD_INT 6
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PUSH
1834: LD_INT 30
1836: PUSH
1837: LD_INT 7
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 30
1846: PUSH
1847: LD_INT 8
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1869: LD_ADDR_VAR 0 7
1873: PUSH
1874: LD_INT 22
1876: PUSH
1877: LD_INT 1
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 30
1886: PUSH
1887: LD_INT 3
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PPUSH
1898: CALL_OW 69
1902: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1903: LD_ADDR_VAR 0 12
1907: PUSH
1908: LD_INT 22
1910: PUSH
1911: LD_INT 1
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 30
1920: PUSH
1921: LD_INT 36
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: PPUSH
1932: CALL_OW 69
1936: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1937: LD_ADDR_VAR 0 13
1941: PUSH
1942: LD_INT 22
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 2
1954: PUSH
1955: LD_INT 30
1957: PUSH
1958: LD_INT 31
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 30
1967: PUSH
1968: LD_INT 32
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: PPUSH
1984: CALL_OW 69
1988: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1989: LD_ADDR_VAR 0 2
1993: PUSH
1994: LD_EXP 11
1998: PUSH
1999: LD_VAR 0 15
2003: ADD
2004: PUSH
2005: FOR_IN
2006: IFFALSE 2427
// begin placed := false ;
2008: LD_ADDR_VAR 0 11
2012: PUSH
2013: LD_INT 0
2015: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2016: LD_VAR 0 2
2020: PPUSH
2021: CALL_OW 257
2025: PUSH
2026: LD_INT 1
2028: EQUAL
2029: IFFALSE 2154
// begin if UnitFilter ( bun , [ f_empty ] ) then
2031: LD_VAR 0 13
2035: PPUSH
2036: LD_INT 58
2038: PUSH
2039: EMPTY
2040: LIST
2041: PPUSH
2042: CALL_OW 72
2046: IFFALSE 2085
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2048: LD_VAR 0 2
2052: PPUSH
2053: LD_VAR 0 13
2057: PPUSH
2058: LD_INT 58
2060: PUSH
2061: EMPTY
2062: LIST
2063: PPUSH
2064: CALL_OW 72
2068: PUSH
2069: LD_INT 1
2071: ARRAY
2072: PPUSH
2073: CALL_OW 52
// placed := true ;
2077: LD_ADDR_VAR 0 11
2081: PUSH
2082: LD_INT 1
2084: ST_TO_ADDR
// end ; if arm and not placed then
2085: LD_VAR 0 9
2089: PUSH
2090: LD_VAR 0 11
2094: NOT
2095: AND
2096: IFFALSE 2154
// begin for j in arm do
2098: LD_ADDR_VAR 0 10
2102: PUSH
2103: LD_VAR 0 9
2107: PUSH
2108: FOR_IN
2109: IFFALSE 2152
// if UnitsInside ( j ) < 6 then
2111: LD_VAR 0 10
2115: PPUSH
2116: CALL_OW 313
2120: PUSH
2121: LD_INT 6
2123: LESS
2124: IFFALSE 2150
// begin PlaceHumanInUnit ( i , j ) ;
2126: LD_VAR 0 2
2130: PPUSH
2131: LD_VAR 0 10
2135: PPUSH
2136: CALL_OW 52
// placed := true ;
2140: LD_ADDR_VAR 0 11
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// break ;
2148: GO 2152
// end ;
2150: GO 2108
2152: POP
2153: POP
// end ; end ; if GetClass ( i ) = 2 then
2154: LD_VAR 0 2
2158: PPUSH
2159: CALL_OW 257
2163: PUSH
2164: LD_INT 2
2166: EQUAL
2167: IFFALSE 2200
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2169: LD_VAR 0 2
2173: PPUSH
2174: LD_INT 52
2176: PPUSH
2177: LD_INT 20
2179: PPUSH
2180: LD_INT 6
2182: PPUSH
2183: LD_INT 0
2185: PPUSH
2186: CALL_OW 50
// placed := true ;
2190: LD_ADDR_VAR 0 11
2194: PUSH
2195: LD_INT 1
2197: ST_TO_ADDR
// continue ;
2198: GO 2005
// end ; if GetClass ( i ) = 3 then
2200: LD_VAR 0 2
2204: PPUSH
2205: CALL_OW 257
2209: PUSH
2210: LD_INT 3
2212: EQUAL
2213: IFFALSE 2317
// if fac then
2215: LD_VAR 0 7
2219: IFFALSE 2317
// begin if ct then
2221: LD_VAR 0 12
2225: IFFALSE 2253
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2227: LD_VAR 0 2
2231: PPUSH
2232: LD_VAR 0 12
2236: PUSH
2237: LD_INT 1
2239: ARRAY
2240: PPUSH
2241: CALL_OW 52
// placed := true ;
2245: LD_ADDR_VAR 0 11
2249: PUSH
2250: LD_INT 1
2252: ST_TO_ADDR
// end ; if placed then
2253: LD_VAR 0 11
2257: IFFALSE 2261
// continue ;
2259: GO 2005
// for j in fac do
2261: LD_ADDR_VAR 0 10
2265: PUSH
2266: LD_VAR 0 7
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2315
// if UnitsInside ( j ) < 6 then
2274: LD_VAR 0 10
2278: PPUSH
2279: CALL_OW 313
2283: PUSH
2284: LD_INT 6
2286: LESS
2287: IFFALSE 2313
// begin PlaceHumanInUnit ( i , j ) ;
2289: LD_VAR 0 2
2293: PPUSH
2294: LD_VAR 0 10
2298: PPUSH
2299: CALL_OW 52
// placed := true ;
2303: LD_ADDR_VAR 0 11
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// break ;
2311: GO 2315
// end ;
2313: GO 2271
2315: POP
2316: POP
// end ; if GetClass ( i ) = 4 then
2317: LD_VAR 0 2
2321: PPUSH
2322: CALL_OW 257
2326: PUSH
2327: LD_INT 4
2329: EQUAL
2330: IFFALSE 2394
// if lab then
2332: LD_VAR 0 8
2336: IFFALSE 2394
// begin for j in lab do
2338: LD_ADDR_VAR 0 10
2342: PUSH
2343: LD_VAR 0 8
2347: PUSH
2348: FOR_IN
2349: IFFALSE 2392
// if UnitsInside ( j ) < 6 then
2351: LD_VAR 0 10
2355: PPUSH
2356: CALL_OW 313
2360: PUSH
2361: LD_INT 6
2363: LESS
2364: IFFALSE 2390
// begin PlaceHumanInUnit ( i , j ) ;
2366: LD_VAR 0 2
2370: PPUSH
2371: LD_VAR 0 10
2375: PPUSH
2376: CALL_OW 52
// placed := true ;
2380: LD_ADDR_VAR 0 11
2384: PUSH
2385: LD_INT 1
2387: ST_TO_ADDR
// break ;
2388: GO 2392
// end ;
2390: GO 2348
2392: POP
2393: POP
// end ; if not placed then
2394: LD_VAR 0 11
2398: NOT
2399: IFFALSE 2425
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2401: LD_VAR 0 2
2405: PPUSH
2406: LD_INT 5
2408: PPUSH
2409: LD_INT 0
2411: PPUSH
2412: CALL_OW 49
// ComHold ( i ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: CALL_OW 140
// end ; end ;
2425: GO 2005
2427: POP
2428: POP
// if ct then
2429: LD_VAR 0 12
2433: IFFALSE 2537
// if UnitsInside ( ct [ 1 ] ) then
2435: LD_VAR 0 12
2439: PUSH
2440: LD_INT 1
2442: ARRAY
2443: PPUSH
2444: CALL_OW 313
2448: IFFALSE 2537
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2450: LD_ADDR_VAR 0 2
2454: PUSH
2455: LD_INT 22
2457: PUSH
2458: LD_INT 1
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: PUSH
2465: LD_INT 33
2467: PUSH
2468: LD_INT 2
2470: PUSH
2471: EMPTY
2472: LIST
2473: LIST
2474: PUSH
2475: EMPTY
2476: LIST
2477: LIST
2478: PPUSH
2479: CALL_OW 69
2483: PUSH
2484: FOR_IN
2485: IFFALSE 2535
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2487: LD_VAR 0 2
2491: PPUSH
2492: LD_VAR 0 12
2496: PUSH
2497: LD_INT 1
2499: ARRAY
2500: PPUSH
2501: CALL_OW 313
2505: PUSH
2506: LD_INT 1
2508: PPUSH
2509: LD_VAR 0 12
2513: PUSH
2514: LD_INT 1
2516: ARRAY
2517: PPUSH
2518: CALL_OW 313
2522: PPUSH
2523: CALL_OW 12
2527: ARRAY
2528: PPUSH
2529: CALL_OW 135
2533: GO 2484
2535: POP
2536: POP
// end ; end ;
2537: LD_VAR 0 1
2541: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2542: LD_INT 0
2544: PPUSH
2545: PPUSH
2546: PPUSH
2547: PPUSH
2548: PPUSH
2549: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2550: LD_INT 71
2552: PPUSH
2553: LD_INT 5
2555: PPUSH
2556: LD_INT 1
2558: PPUSH
2559: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2563: LD_ADDR_VAR 0 2
2567: PUSH
2568: LD_STRING GammaBase
2570: PPUSH
2571: EMPTY
2572: PPUSH
2573: CALL_OW 30
2577: ST_TO_ADDR
// if not blist then
2578: LD_VAR 0 2
2582: NOT
2583: IFFALSE 2623
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2585: LD_ADDR_VAR 0 2
2589: PUSH
2590: LD_INT 1
2592: PUSH
2593: LD_INT 52
2595: PUSH
2596: LD_INT 12
2598: PUSH
2599: LD_INT 3
2601: PUSH
2602: LD_INT 3
2604: PUSH
2605: LD_INT 0
2607: PUSH
2608: LD_INT 0
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: LIST
2615: LIST
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: ST_TO_ADDR
// uc_side := 1 ;
2623: LD_ADDR_OWVAR 20
2627: PUSH
2628: LD_INT 1
2630: ST_TO_ADDR
// uc_nation := 1 ;
2631: LD_ADDR_OWVAR 21
2635: PUSH
2636: LD_INT 1
2638: ST_TO_ADDR
// bc_kind1 := - 1 ;
2639: LD_ADDR_OWVAR 44
2643: PUSH
2644: LD_INT 1
2646: NEG
2647: ST_TO_ADDR
// bc_kind2 := - 1 ;
2648: LD_ADDR_OWVAR 45
2652: PUSH
2653: LD_INT 1
2655: NEG
2656: ST_TO_ADDR
// for i in blist do
2657: LD_ADDR_VAR 0 3
2661: PUSH
2662: LD_VAR 0 2
2666: PUSH
2667: FOR_IN
2668: IFFALSE 2948
// begin bc_type := i [ 1 ] ;
2670: LD_ADDR_OWVAR 42
2674: PUSH
2675: LD_VAR 0 3
2679: PUSH
2680: LD_INT 1
2682: ARRAY
2683: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2684: LD_ADDR_OWVAR 43
2688: PUSH
2689: LD_VAR 0 3
2693: PUSH
2694: LD_INT 5
2696: ARRAY
2697: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2698: LD_OWVAR 42
2702: PUSH
2703: LD_INT 6
2705: PUSH
2706: LD_INT 7
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: IN
2713: IFFALSE 2783
// begin bc_type := b_lab_half ;
2715: LD_ADDR_OWVAR 42
2719: PUSH
2720: LD_INT 7
2722: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2723: LD_STRING 06_remoteVehs_1
2725: PPUSH
2726: LD_INT 0
2728: PPUSH
2729: CALL_OW 30
2733: IFFALSE 2783
// begin if i [ 7 ] > 9 then
2735: LD_VAR 0 3
2739: PUSH
2740: LD_INT 7
2742: ARRAY
2743: PUSH
2744: LD_INT 9
2746: GREATER
2747: IFFALSE 2775
// begin bc_type := b_lab_full ;
2749: LD_ADDR_OWVAR 42
2753: PUSH
2754: LD_INT 8
2756: ST_TO_ADDR
// bc_kind1 := 10 ;
2757: LD_ADDR_OWVAR 44
2761: PUSH
2762: LD_INT 10
2764: ST_TO_ADDR
// bc_kind2 := 15 ;
2765: LD_ADDR_OWVAR 45
2769: PUSH
2770: LD_INT 15
2772: ST_TO_ADDR
// end else
2773: GO 2783
// bc_kind1 := 15 ;
2775: LD_ADDR_OWVAR 44
2779: PUSH
2780: LD_INT 15
2782: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2783: LD_OWVAR 42
2787: PUSH
2788: LD_INT 2
2790: EQUAL
2791: IFFALSE 2801
// bc_type := b_factory ;
2793: LD_ADDR_OWVAR 42
2797: PUSH
2798: LD_INT 3
2800: ST_TO_ADDR
// if bc_type = b_depot then
2801: LD_OWVAR 42
2805: PUSH
2806: LD_INT 0
2808: EQUAL
2809: IFFALSE 2858
// begin bc_type := b_warehouse ;
2811: LD_ADDR_OWVAR 42
2815: PUSH
2816: LD_INT 1
2818: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2819: LD_ADDR_EXP 37
2823: PUSH
2824: LD_VAR 0 3
2828: PUSH
2829: LD_INT 2
2831: ARRAY
2832: PPUSH
2833: LD_VAR 0 3
2837: PUSH
2838: LD_INT 3
2840: ARRAY
2841: PPUSH
2842: LD_VAR 0 3
2846: PUSH
2847: LD_INT 4
2849: ARRAY
2850: PPUSH
2851: CALL_OW 47
2855: ST_TO_ADDR
// continue ;
2856: GO 2667
// end ; if bc_type = b_armoury then
2858: LD_OWVAR 42
2862: PUSH
2863: LD_INT 4
2865: EQUAL
2866: IFFALSE 2876
// bc_type = b_barracks ;
2868: LD_ADDR_OWVAR 42
2872: PUSH
2873: LD_INT 5
2875: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2876: LD_ADDR_VAR 0 4
2880: PUSH
2881: LD_VAR 0 3
2885: PUSH
2886: LD_INT 2
2888: ARRAY
2889: PPUSH
2890: LD_VAR 0 3
2894: PUSH
2895: LD_INT 3
2897: ARRAY
2898: PPUSH
2899: LD_VAR 0 3
2903: PUSH
2904: LD_INT 4
2906: ARRAY
2907: PPUSH
2908: CALL_OW 47
2912: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2913: LD_VAR 0 4
2917: PPUSH
2918: CALL_OW 266
2922: PUSH
2923: LD_INT 32
2925: EQUAL
2926: IFFALSE 2946
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2928: LD_VAR 0 4
2932: PPUSH
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 7
2940: ARRAY
2941: PPUSH
2942: CALL_OW 431
// end ;
2946: GO 2667
2948: POP
2949: POP
// if not amDepot then
2950: LD_EXP 37
2954: NOT
2955: IFFALSE 2992
// begin bc_type := b_warehouse ;
2957: LD_ADDR_OWVAR 42
2961: PUSH
2962: LD_INT 1
2964: ST_TO_ADDR
// bc_level := 6 ;
2965: LD_ADDR_OWVAR 43
2969: PUSH
2970: LD_INT 6
2972: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2973: LD_ADDR_EXP 37
2977: PUSH
2978: LD_INT 52
2980: PPUSH
2981: LD_INT 12
2983: PPUSH
2984: LD_INT 3
2986: PPUSH
2987: CALL_OW 47
2991: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
2992: LD_EXP 37
2996: PPUSH
2997: LD_STRING gamma
2999: PPUSH
3000: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
3004: LD_EXP 37
3008: PPUSH
3009: CALL_OW 274
3013: PPUSH
3014: LD_INT 1
3016: PPUSH
3017: LD_INT 500
3019: PUSH
3020: LD_INT 420
3022: PUSH
3023: LD_INT 350
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: LIST
3030: PUSH
3031: LD_OWVAR 67
3035: ARRAY
3036: PPUSH
3037: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3041: LD_EXP 37
3045: PPUSH
3046: CALL_OW 274
3050: PPUSH
3051: LD_INT 2
3053: PPUSH
3054: LD_INT 200
3056: PPUSH
3057: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3061: LD_INT 22
3063: PUSH
3064: LD_INT 1
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: PUSH
3071: LD_INT 30
3073: PUSH
3074: LD_INT 3
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: PPUSH
3085: CALL_OW 69
3089: IFFALSE 3337
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3091: LD_ADDR_VAR 0 4
3095: PUSH
3096: LD_INT 22
3098: PUSH
3099: LD_INT 1
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 30
3108: PUSH
3109: LD_INT 3
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PPUSH
3120: CALL_OW 69
3124: PUSH
3125: LD_INT 1
3127: ARRAY
3128: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3129: LD_ADDR_VAR 0 6
3133: PUSH
3134: LD_VAR 0 4
3138: PPUSH
3139: CALL_OW 250
3143: PPUSH
3144: LD_VAR 0 4
3148: PPUSH
3149: CALL_OW 251
3153: PPUSH
3154: LD_VAR 0 4
3158: PPUSH
3159: CALL_OW 254
3163: PPUSH
3164: CALL 16855 0 3
3168: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3169: LD_ADDR_VAR 0 2
3173: PUSH
3174: LD_INT 19
3176: PUSH
3177: LD_INT 17
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3184: LD_STRING 06_remoteVehs_1
3186: PPUSH
3187: LD_INT 0
3189: PPUSH
3190: CALL_OW 30
3194: IFFALSE 3217
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3196: LD_ADDR_VAR 0 2
3200: PUSH
3201: LD_VAR 0 2
3205: PPUSH
3206: LD_INT 1
3208: PPUSH
3209: LD_INT 22
3211: PPUSH
3212: CALL_OW 2
3216: ST_TO_ADDR
// for i in tmp do
3217: LD_ADDR_VAR 0 3
3221: PUSH
3222: LD_VAR 0 6
3226: PUSH
3227: FOR_IN
3228: IFFALSE 3335
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3230: LD_VAR 0 3
3234: PUSH
3235: LD_INT 1
3237: ARRAY
3238: PPUSH
3239: LD_VAR 0 3
3243: PUSH
3244: LD_INT 2
3246: ARRAY
3247: PPUSH
3248: CALL_OW 428
3252: PUSH
3253: LD_INT 0
3255: EQUAL
3256: IFFALSE 3333
// begin bc_type := blist [ 1 ] ;
3258: LD_ADDR_OWVAR 42
3262: PUSH
3263: LD_VAR 0 2
3267: PUSH
3268: LD_INT 1
3270: ARRAY
3271: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3272: LD_VAR 0 3
3276: PUSH
3277: LD_INT 1
3279: ARRAY
3280: PPUSH
3281: LD_VAR 0 3
3285: PUSH
3286: LD_INT 2
3288: ARRAY
3289: PPUSH
3290: LD_VAR 0 3
3294: PUSH
3295: LD_INT 3
3297: ARRAY
3298: PPUSH
3299: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3303: LD_ADDR_VAR 0 2
3307: PUSH
3308: LD_VAR 0 2
3312: PPUSH
3313: LD_INT 1
3315: PPUSH
3316: CALL_OW 3
3320: ST_TO_ADDR
// if blist = 0 then
3321: LD_VAR 0 2
3325: PUSH
3326: LD_INT 0
3328: EQUAL
3329: IFFALSE 3333
// break ;
3331: GO 3335
// end ;
3333: GO 3227
3335: POP
3336: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3337: LD_STRING 06_remoteVehs_1
3339: PPUSH
3340: LD_INT 0
3342: PPUSH
3343: CALL_OW 30
3347: IFFALSE 3806
// begin bc_type = 36 ;
3349: LD_ADDR_OWVAR 42
3353: PUSH
3354: LD_INT 36
3356: ST_TO_ADDR
// bc_level = 4 ;
3357: LD_ADDR_OWVAR 43
3361: PUSH
3362: LD_INT 4
3364: ST_TO_ADDR
// if CanBeBuilded ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3365: LD_EXP 37
3369: PPUSH
3370: LD_INT 36
3372: PPUSH
3373: LD_INT 62
3375: PPUSH
3376: LD_INT 12
3378: PPUSH
3379: LD_INT 3
3381: PPUSH
3382: LD_INT 0
3384: PPUSH
3385: CALL 17725 0 6
3389: PUSH
3390: LD_INT 92
3392: PUSH
3393: LD_INT 62
3395: PUSH
3396: LD_INT 12
3398: PUSH
3399: LD_INT 3
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: PPUSH
3408: CALL_OW 69
3412: NOT
3413: AND
3414: IFFALSE 3431
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3416: LD_INT 62
3418: PPUSH
3419: LD_INT 12
3421: PPUSH
3422: LD_INT 3
3424: PPUSH
3425: CALL_OW 47
3429: GO 3602
// if CanBeBuilded ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3431: LD_EXP 37
3435: PPUSH
3436: LD_INT 36
3438: PPUSH
3439: LD_INT 37
3441: PPUSH
3442: LD_INT 18
3444: PPUSH
3445: LD_INT 2
3447: PPUSH
3448: LD_INT 0
3450: PPUSH
3451: CALL 17725 0 6
3455: PUSH
3456: LD_INT 92
3458: PUSH
3459: LD_INT 37
3461: PUSH
3462: LD_INT 18
3464: PUSH
3465: LD_INT 3
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: PPUSH
3474: CALL_OW 69
3478: NOT
3479: AND
3480: IFFALSE 3497
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3482: LD_INT 37
3484: PPUSH
3485: LD_INT 18
3487: PPUSH
3488: LD_INT 2
3490: PPUSH
3491: CALL_OW 47
3495: GO 3602
// if CanBeBuilded ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3497: LD_EXP 37
3501: PPUSH
3502: LD_INT 36
3504: PPUSH
3505: LD_INT 66
3507: PPUSH
3508: LD_INT 14
3510: PPUSH
3511: LD_INT 4
3513: PPUSH
3514: LD_INT 0
3516: PPUSH
3517: CALL 17725 0 6
3521: PUSH
3522: LD_INT 92
3524: PUSH
3525: LD_INT 66
3527: PUSH
3528: LD_INT 14
3530: PUSH
3531: LD_INT 3
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: PPUSH
3540: CALL_OW 69
3544: NOT
3545: AND
3546: IFFALSE 3563
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3548: LD_INT 66
3550: PPUSH
3551: LD_INT 14
3553: PPUSH
3554: LD_INT 4
3556: PPUSH
3557: CALL_OW 47
3561: GO 3602
// if CanBeBuilded ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3563: LD_EXP 37
3567: PPUSH
3568: LD_INT 36
3570: PPUSH
3571: LD_INT 74
3573: PPUSH
3574: LD_INT 26
3576: PPUSH
3577: LD_INT 4
3579: PPUSH
3580: LD_INT 0
3582: PPUSH
3583: CALL 17725 0 6
3587: IFFALSE 3602
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3589: LD_INT 74
3591: PPUSH
3592: LD_INT 26
3594: PPUSH
3595: LD_INT 4
3597: PPUSH
3598: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3602: LD_INT 22
3604: PUSH
3605: LD_INT 1
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: PUSH
3612: LD_INT 30
3614: PUSH
3615: LD_INT 36
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: PPUSH
3626: CALL_OW 69
3630: NOT
3631: IFFALSE 3635
// exit ;
3633: GO 3806
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3635: LD_ADDR_VAR 0 3
3639: PUSH
3640: DOUBLE
3641: LD_INT 1
3643: DEC
3644: ST_TO_ADDR
3645: LD_INT 3
3647: PUSH
3648: LD_INT 2
3650: PUSH
3651: LD_INT 2
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: LIST
3658: PUSH
3659: LD_OWVAR 67
3663: ARRAY
3664: PUSH
3665: FOR_TO
3666: IFFALSE 3804
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3668: LD_ADDR_OWVAR 37
3672: PUSH
3673: LD_INT 3
3675: PUSH
3676: LD_INT 2
3678: PUSH
3679: LD_INT 3
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PUSH
3686: LD_INT 1
3688: PPUSH
3689: LD_INT 2
3691: PPUSH
3692: CALL_OW 12
3696: ARRAY
3697: PUSH
3698: LD_INT 2
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: LIST
3705: PUSH
3706: LD_OWVAR 67
3710: ARRAY
3711: ST_TO_ADDR
// vc_engine = 1 ;
3712: LD_ADDR_OWVAR 39
3716: PUSH
3717: LD_INT 1
3719: ST_TO_ADDR
// vc_control = 2 ;
3720: LD_ADDR_OWVAR 38
3724: PUSH
3725: LD_INT 2
3727: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3728: LD_ADDR_OWVAR 40
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: LD_INT 4
3738: PUSH
3739: LD_INT 5
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: PUSH
3747: LD_INT 1
3749: PPUSH
3750: LD_INT 3
3752: PPUSH
3753: CALL_OW 12
3757: ARRAY
3758: ST_TO_ADDR
// veh = CreateVehicle ;
3759: LD_ADDR_VAR 0 5
3763: PUSH
3764: CALL_OW 45
3768: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3769: LD_VAR 0 5
3773: PPUSH
3774: LD_INT 4
3776: PPUSH
3777: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3781: LD_VAR 0 5
3785: PPUSH
3786: LD_INT 56
3788: PPUSH
3789: LD_INT 17
3791: PPUSH
3792: LD_INT 9
3794: PPUSH
3795: LD_INT 0
3797: PPUSH
3798: CALL_OW 50
// end ;
3802: GO 3665
3804: POP
3805: POP
// end ; end ;
3806: LD_VAR 0 1
3810: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3811: LD_INT 0
3813: PPUSH
3814: PPUSH
3815: PPUSH
3816: PPUSH
// uc_side = 1 ;
3817: LD_ADDR_OWVAR 20
3821: PUSH
3822: LD_INT 1
3824: ST_TO_ADDR
// uc_nation = 1 ;
3825: LD_ADDR_OWVAR 21
3829: PUSH
3830: LD_INT 1
3832: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3833: LD_ADDR_EXP 14
3837: PUSH
3838: LD_STRING 06c_Denis
3840: PPUSH
3841: LD_INT 1
3843: PPUSH
3844: CALL 7040 0 2
3848: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3849: LD_EXP 14
3853: PPUSH
3854: LD_INT 4
3856: PPUSH
3857: LD_INT 0
3859: PPUSH
3860: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3864: LD_ADDR_EXP 15
3868: PUSH
3869: LD_STRING 06c_Joan
3871: PPUSH
3872: LD_INT 1
3874: PPUSH
3875: CALL 7040 0 2
3879: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3880: LD_EXP 15
3884: PPUSH
3885: LD_INT 4
3887: PPUSH
3888: LD_INT 0
3890: PPUSH
3891: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3895: LD_STRING GladstoneIn07
3897: PPUSH
3898: LD_INT 0
3900: PPUSH
3901: CALL_OW 30
3905: NOT
3906: IFFALSE 3974
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3908: LD_ADDR_EXP 8
3912: PUSH
3913: LD_STRING 06c_Gladstone
3915: PPUSH
3916: LD_INT 1
3918: PPUSH
3919: CALL 7040 0 2
3923: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3924: LD_EXP 8
3928: NOT
3929: PUSH
3930: LD_STRING GladstoneStayInDelta
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 30
3940: AND
3941: IFFALSE 3959
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3943: LD_ADDR_EXP 8
3947: PUSH
3948: LD_STRING 05_Gladstone
3950: PPUSH
3951: LD_INT 1
3953: PPUSH
3954: CALL 7040 0 2
3958: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3959: LD_EXP 8
3963: PPUSH
3964: LD_INT 4
3966: PPUSH
3967: LD_INT 0
3969: PPUSH
3970: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
3974: LD_STRING LisaStayInDelta
3976: PPUSH
3977: LD_INT 0
3979: PPUSH
3980: CALL_OW 30
3984: IFFALSE 4017
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
3986: LD_ADDR_EXP 6
3990: PUSH
3991: LD_STRING 05_Lisa
3993: PPUSH
3994: LD_INT 1
3996: PPUSH
3997: CALL 7040 0 2
4001: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4002: LD_EXP 6
4006: PPUSH
4007: LD_INT 4
4009: PPUSH
4010: LD_INT 0
4012: PPUSH
4013: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4017: LD_STRING BobbyStayInDelta
4019: PPUSH
4020: LD_INT 0
4022: PPUSH
4023: CALL_OW 30
4027: IFFALSE 4060
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
4029: LD_ADDR_EXP 4
4033: PUSH
4034: LD_STRING 05_Bobby
4036: PPUSH
4037: LD_INT 1
4039: PPUSH
4040: CALL 7040 0 2
4044: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4045: LD_EXP 4
4049: PPUSH
4050: LD_INT 4
4052: PPUSH
4053: LD_INT 0
4055: PPUSH
4056: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4060: LD_STRING CyrusStayInDelta
4062: PPUSH
4063: LD_INT 0
4065: PPUSH
4066: CALL_OW 30
4070: IFFALSE 4103
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
4072: LD_ADDR_EXP 5
4076: PUSH
4077: LD_STRING 05_Cyrus
4079: PPUSH
4080: LD_INT 1
4082: PPUSH
4083: CALL 7040 0 2
4087: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4088: LD_EXP 5
4092: PPUSH
4093: LD_INT 4
4095: PPUSH
4096: LD_INT 0
4098: PPUSH
4099: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4103: LD_STRING BrownStayInDelta
4105: PPUSH
4106: LD_INT 0
4108: PPUSH
4109: CALL_OW 30
4113: IFFALSE 4146
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
4115: LD_ADDR_EXP 2
4119: PUSH
4120: LD_STRING 05_Brown
4122: PPUSH
4123: LD_INT 1
4125: PPUSH
4126: CALL 7040 0 2
4130: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4131: LD_EXP 2
4135: PPUSH
4136: LD_INT 4
4138: PPUSH
4139: LD_INT 0
4141: PPUSH
4142: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4146: LD_STRING DonaldsonStayInDelta
4148: PPUSH
4149: LD_INT 0
4151: PPUSH
4152: CALL_OW 30
4156: IFFALSE 4189
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
4158: LD_ADDR_EXP 3
4162: PUSH
4163: LD_STRING 05_Donaldson
4165: PPUSH
4166: LD_INT 1
4168: PPUSH
4169: CALL 7040 0 2
4173: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4174: LD_EXP 3
4178: PPUSH
4179: LD_INT 4
4181: PPUSH
4182: LD_INT 0
4184: PPUSH
4185: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4189: LD_ADDR_VAR 0 4
4193: PUSH
4194: LD_STRING OthersStayInDelta
4196: PPUSH
4197: CALL_OW 31
4201: ST_TO_ADDR
// if other > 2 then
4202: LD_VAR 0 4
4206: PUSH
4207: LD_INT 2
4209: GREATER
4210: IFFALSE 4255
// begin for j = 1 to 2 do
4212: LD_ADDR_VAR 0 3
4216: PUSH
4217: DOUBLE
4218: LD_INT 1
4220: DEC
4221: ST_TO_ADDR
4222: LD_INT 2
4224: PUSH
4225: FOR_TO
4226: IFFALSE 4251
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4228: LD_VAR 0 4
4232: PUSH
4233: LD_VAR 0 3
4237: ARRAY
4238: PPUSH
4239: LD_INT 4
4241: PPUSH
4242: LD_INT 0
4244: PPUSH
4245: CALL_OW 49
4249: GO 4225
4251: POP
4252: POP
// end else
4253: GO 4298
// begin for j = 1 to other do
4255: LD_ADDR_VAR 0 3
4259: PUSH
4260: DOUBLE
4261: LD_INT 1
4263: DEC
4264: ST_TO_ADDR
4265: LD_VAR 0 4
4269: PUSH
4270: FOR_TO
4271: IFFALSE 4296
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4273: LD_VAR 0 4
4277: PUSH
4278: LD_VAR 0 3
4282: ARRAY
4283: PPUSH
4284: LD_INT 4
4286: PPUSH
4287: LD_INT 0
4289: PPUSH
4290: CALL_OW 49
4294: GO 4270
4296: POP
4297: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4298: LD_ADDR_VAR 0 4
4302: PUSH
4303: LD_STRING 06_other_apemans
4305: PPUSH
4306: CALL_OW 31
4310: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4311: LD_VAR 0 4
4315: PUSH
4316: LD_INT 5
4318: PUSH
4319: LD_INT 4
4321: PUSH
4322: LD_INT 3
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: LIST
4329: PUSH
4330: LD_OWVAR 67
4334: ARRAY
4335: GREATEREQUAL
4336: IFFALSE 4365
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4338: LD_ADDR_VAR 0 3
4342: PUSH
4343: LD_INT 5
4345: PUSH
4346: LD_INT 4
4348: PUSH
4349: LD_INT 3
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: LIST
4356: PUSH
4357: LD_OWVAR 67
4361: ARRAY
4362: ST_TO_ADDR
4363: GO 4375
// j := other ;
4365: LD_ADDR_VAR 0 3
4369: PUSH
4370: LD_VAR 0 4
4374: ST_TO_ADDR
// for i = 1 to j do
4375: LD_ADDR_VAR 0 2
4379: PUSH
4380: DOUBLE
4381: LD_INT 1
4383: DEC
4384: ST_TO_ADDR
4385: LD_VAR 0 3
4389: PUSH
4390: FOR_TO
4391: IFFALSE 4416
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4393: LD_VAR 0 4
4397: PUSH
4398: LD_VAR 0 2
4402: ARRAY
4403: PPUSH
4404: LD_INT 4
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
4414: GO 4390
4416: POP
4417: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4418: LD_INT 4
4420: PPUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 21
4433: PUSH
4434: LD_INT 1
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 70
4449: PPUSH
4450: LD_INT 53
4452: PPUSH
4453: LD_INT 19
4455: PPUSH
4456: CALL_OW 111
// firstAttack = 1 ;
4460: LD_ADDR_EXP 33
4464: PUSH
4465: LD_INT 1
4467: ST_TO_ADDR
// end ;
4468: LD_VAR 0 1
4472: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4473: LD_INT 0
4475: PPUSH
4476: PPUSH
4477: PPUSH
4478: PPUSH
4479: PPUSH
4480: PPUSH
4481: PPUSH
4482: PPUSH
4483: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4484: LD_ADDR_VAR 0 8
4488: PUSH
4489: LD_STRING 07_vehicles
4491: PPUSH
4492: EMPTY
4493: PPUSH
4494: CALL_OW 30
4498: ST_TO_ADDR
// macmilan_squad := [ ] ;
4499: LD_ADDR_EXP 42
4503: PUSH
4504: EMPTY
4505: ST_TO_ADDR
// tmp_vehs := [ ] ;
4506: LD_ADDR_VAR 0 7
4510: PUSH
4511: EMPTY
4512: ST_TO_ADDR
// uc_side := 1 ;
4513: LD_ADDR_OWVAR 20
4517: PUSH
4518: LD_INT 1
4520: ST_TO_ADDR
// uc_nation := 1 ;
4521: LD_ADDR_OWVAR 21
4525: PUSH
4526: LD_INT 1
4528: ST_TO_ADDR
// if vehicles then
4529: LD_VAR 0 8
4533: IFFALSE 4692
// begin k := 1 ;
4535: LD_ADDR_VAR 0 3
4539: PUSH
4540: LD_INT 1
4542: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4543: LD_ADDR_VAR 0 2
4547: PUSH
4548: DOUBLE
4549: LD_INT 1
4551: DEC
4552: ST_TO_ADDR
4553: LD_VAR 0 8
4557: PUSH
4558: LD_INT 4
4560: DIV
4561: PUSH
4562: FOR_TO
4563: IFFALSE 4690
// begin vc_chassis = vehicles [ k ] ;
4565: LD_ADDR_OWVAR 37
4569: PUSH
4570: LD_VAR 0 8
4574: PUSH
4575: LD_VAR 0 3
4579: ARRAY
4580: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4581: LD_ADDR_OWVAR 39
4585: PUSH
4586: LD_VAR 0 8
4590: PUSH
4591: LD_VAR 0 3
4595: PUSH
4596: LD_INT 1
4598: PLUS
4599: ARRAY
4600: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4601: LD_ADDR_OWVAR 38
4605: PUSH
4606: LD_VAR 0 8
4610: PUSH
4611: LD_VAR 0 3
4615: PUSH
4616: LD_INT 2
4618: PLUS
4619: ARRAY
4620: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4621: LD_ADDR_OWVAR 40
4625: PUSH
4626: LD_VAR 0 8
4630: PUSH
4631: LD_VAR 0 3
4635: PUSH
4636: LD_INT 3
4638: PLUS
4639: ARRAY
4640: ST_TO_ADDR
// k := k + 4 ;
4641: LD_ADDR_VAR 0 3
4645: PUSH
4646: LD_VAR 0 3
4650: PUSH
4651: LD_INT 4
4653: PLUS
4654: ST_TO_ADDR
// veh := CreateVehicle ;
4655: LD_ADDR_VAR 0 9
4659: PUSH
4660: CALL_OW 45
4664: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4665: LD_ADDR_VAR 0 7
4669: PUSH
4670: LD_VAR 0 7
4674: PPUSH
4675: LD_INT 1
4677: PPUSH
4678: LD_VAR 0 9
4682: PPUSH
4683: CALL_OW 2
4687: ST_TO_ADDR
// end ;
4688: GO 4562
4690: POP
4691: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4692: LD_ADDR_EXP 1
4696: PUSH
4697: LD_EXP 44
4701: PUSH
4702: LD_STRING JMM
4704: STR
4705: PPUSH
4706: LD_INT 1
4708: PPUSH
4709: CALL 7040 0 2
4713: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4714: LD_EXP 12
4718: PUSH
4719: LD_INT 1
4721: EQUAL
4722: PUSH
4723: LD_EXP 12
4727: PUSH
4728: LD_INT 3
4730: EQUAL
4731: OR
4732: PUSH
4733: LD_EXP 2
4737: NOT
4738: AND
4739: IFFALSE 4792
// begin Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
4741: LD_ADDR_EXP 2
4745: PUSH
4746: LD_EXP 44
4750: PUSH
4751: LD_STRING Brown
4753: STR
4754: PPUSH
4755: LD_INT 1
4757: PPUSH
4758: CALL 7040 0 2
4762: ST_TO_ADDR
// if Brown then
4763: LD_EXP 2
4767: IFFALSE 4792
// tmp := Insert ( tmp , 1 , Brown ) ;
4769: LD_ADDR_VAR 0 6
4773: PUSH
4774: LD_VAR 0 6
4778: PPUSH
4779: LD_INT 1
4781: PPUSH
4782: LD_EXP 2
4786: PPUSH
4787: CALL_OW 2
4791: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4792: LD_EXP 12
4796: PUSH
4797: LD_INT 2
4799: EQUAL
4800: PUSH
4801: LD_EXP 12
4805: PUSH
4806: LD_INT 3
4808: EQUAL
4809: OR
4810: PUSH
4811: LD_EXP 3
4815: NOT
4816: AND
4817: IFFALSE 4870
// begin Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4819: LD_ADDR_EXP 3
4823: PUSH
4824: LD_EXP 44
4828: PUSH
4829: LD_STRING Donaldson
4831: STR
4832: PPUSH
4833: LD_INT 1
4835: PPUSH
4836: CALL 7040 0 2
4840: ST_TO_ADDR
// if Donaldson then
4841: LD_EXP 3
4845: IFFALSE 4870
// tmp := Insert ( tmp , 1 , Donaldson ) ;
4847: LD_ADDR_VAR 0 6
4851: PUSH
4852: LD_VAR 0 6
4856: PPUSH
4857: LD_INT 1
4859: PPUSH
4860: LD_EXP 3
4864: PPUSH
4865: CALL_OW 2
4869: ST_TO_ADDR
// end ; if not Bobby then
4870: LD_EXP 4
4874: NOT
4875: IFFALSE 4928
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4877: LD_ADDR_EXP 4
4881: PUSH
4882: LD_EXP 44
4886: PUSH
4887: LD_STRING Bobby
4889: STR
4890: PPUSH
4891: LD_INT 1
4893: PPUSH
4894: CALL 7040 0 2
4898: ST_TO_ADDR
// if Bobby then
4899: LD_EXP 4
4903: IFFALSE 4928
// tmp := Insert ( tmp , 1 , Bobby ) ;
4905: LD_ADDR_VAR 0 6
4909: PUSH
4910: LD_VAR 0 6
4914: PPUSH
4915: LD_INT 1
4917: PPUSH
4918: LD_EXP 4
4922: PPUSH
4923: CALL_OW 2
4927: ST_TO_ADDR
// end ; if not Cyrus then
4928: LD_EXP 5
4932: NOT
4933: IFFALSE 4986
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4935: LD_ADDR_EXP 5
4939: PUSH
4940: LD_EXP 44
4944: PUSH
4945: LD_STRING Cyrus
4947: STR
4948: PPUSH
4949: LD_INT 1
4951: PPUSH
4952: CALL 7040 0 2
4956: ST_TO_ADDR
// if Cyrus then
4957: LD_EXP 5
4961: IFFALSE 4986
// tmp := Insert ( tmp , 1 , Cyrus ) ;
4963: LD_ADDR_VAR 0 6
4967: PUSH
4968: LD_VAR 0 6
4972: PPUSH
4973: LD_INT 1
4975: PPUSH
4976: LD_EXP 5
4980: PPUSH
4981: CALL_OW 2
4985: ST_TO_ADDR
// end ; if not Lisa then
4986: LD_EXP 6
4990: NOT
4991: IFFALSE 5044
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4993: LD_ADDR_EXP 6
4997: PUSH
4998: LD_EXP 44
5002: PUSH
5003: LD_STRING Lisa
5005: STR
5006: PPUSH
5007: LD_INT 1
5009: PPUSH
5010: CALL 7040 0 2
5014: ST_TO_ADDR
// if Lisa then
5015: LD_EXP 6
5019: IFFALSE 5044
// tmp := Insert ( tmp , 1 , Lisa ) ;
5021: LD_ADDR_VAR 0 6
5025: PUSH
5026: LD_VAR 0 6
5030: PPUSH
5031: LD_INT 1
5033: PPUSH
5034: LD_EXP 6
5038: PPUSH
5039: CALL_OW 2
5043: ST_TO_ADDR
// end ; if not Frank then
5044: LD_EXP 7
5048: NOT
5049: IFFALSE 5102
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
5051: LD_ADDR_EXP 7
5055: PUSH
5056: LD_EXP 44
5060: PUSH
5061: LD_STRING Frank
5063: STR
5064: PPUSH
5065: LD_INT 1
5067: PPUSH
5068: CALL 7040 0 2
5072: ST_TO_ADDR
// if Frank then
5073: LD_EXP 7
5077: IFFALSE 5102
// tmp := Insert ( tmp , 1 , Frank ) ;
5079: LD_ADDR_VAR 0 6
5083: PUSH
5084: LD_VAR 0 6
5088: PPUSH
5089: LD_INT 1
5091: PPUSH
5092: LD_EXP 7
5096: PPUSH
5097: CALL_OW 2
5101: ST_TO_ADDR
// end ; if not Kikuchi then
5102: LD_EXP 9
5106: NOT
5107: IFFALSE 5160
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
5109: LD_ADDR_EXP 9
5113: PUSH
5114: LD_EXP 44
5118: PUSH
5119: LD_STRING Kikuchi
5121: STR
5122: PPUSH
5123: LD_INT 1
5125: PPUSH
5126: CALL 7040 0 2
5130: ST_TO_ADDR
// if Kikuchi then
5131: LD_EXP 9
5135: IFFALSE 5160
// tmp := Insert ( tmp , 1 , Kikuchi ) ;
5137: LD_ADDR_VAR 0 6
5141: PUSH
5142: LD_VAR 0 6
5146: PPUSH
5147: LD_INT 1
5149: PPUSH
5150: LD_EXP 9
5154: PPUSH
5155: CALL_OW 2
5159: ST_TO_ADDR
// end ; if not Gladstone then
5160: LD_EXP 8
5164: NOT
5165: IFFALSE 5218
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
5167: LD_ADDR_EXP 8
5171: PUSH
5172: LD_EXP 44
5176: PUSH
5177: LD_STRING Gladstone
5179: STR
5180: PPUSH
5181: LD_INT 1
5183: PPUSH
5184: CALL 7040 0 2
5188: ST_TO_ADDR
// if Gladstone then
5189: LD_EXP 8
5193: IFFALSE 5218
// tmp := Insert ( tmp , 1 , Gladstone ) ;
5195: LD_ADDR_VAR 0 6
5199: PUSH
5200: LD_VAR 0 6
5204: PPUSH
5205: LD_INT 1
5207: PPUSH
5208: LD_EXP 8
5212: PPUSH
5213: CALL_OW 2
5217: ST_TO_ADDR
// end ; if not Khatam then
5218: LD_EXP 10
5222: NOT
5223: IFFALSE 5276
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
5225: LD_ADDR_EXP 10
5229: PUSH
5230: LD_EXP 44
5234: PUSH
5235: LD_STRING Khatam
5237: STR
5238: PPUSH
5239: LD_INT 1
5241: PPUSH
5242: CALL 7040 0 2
5246: ST_TO_ADDR
// if Khatam then
5247: LD_EXP 10
5251: IFFALSE 5276
// tmp := Insert ( tmp , 1 , Khatam ) ;
5253: LD_ADDR_VAR 0 6
5257: PUSH
5258: LD_VAR 0 6
5262: PPUSH
5263: LD_INT 1
5265: PPUSH
5266: LD_EXP 10
5270: PPUSH
5271: CALL_OW 2
5275: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5276: LD_ADDR_VAR 0 5
5280: PUSH
5281: LD_STRING 07c_others
5283: PPUSH
5284: CALL_OW 31
5288: ST_TO_ADDR
// macmilan_squad := others ;
5289: LD_ADDR_EXP 42
5293: PUSH
5294: LD_VAR 0 5
5298: ST_TO_ADDR
// if others then
5299: LD_VAR 0 5
5303: IFFALSE 5391
// for i in others do
5305: LD_ADDR_VAR 0 2
5309: PUSH
5310: LD_VAR 0 5
5314: PUSH
5315: FOR_IN
5316: IFFALSE 5389
// if GetClass ( i ) = 3 then
5318: LD_VAR 0 2
5322: PPUSH
5323: CALL_OW 257
5327: PUSH
5328: LD_INT 3
5330: EQUAL
5331: IFFALSE 5358
// tmp := Insert ( tmp , 1 , i ) else
5333: LD_ADDR_VAR 0 6
5337: PUSH
5338: LD_VAR 0 6
5342: PPUSH
5343: LD_INT 1
5345: PPUSH
5346: LD_VAR 0 2
5350: PPUSH
5351: CALL_OW 2
5355: ST_TO_ADDR
5356: GO 5387
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5358: LD_ADDR_VAR 0 6
5362: PUSH
5363: LD_VAR 0 6
5367: PPUSH
5368: LD_VAR 0 6
5372: PUSH
5373: LD_INT 1
5375: PLUS
5376: PPUSH
5377: LD_VAR 0 2
5381: PPUSH
5382: CALL_OW 2
5386: ST_TO_ADDR
5387: GO 5315
5389: POP
5390: POP
// wait ( 0 0$1 ) ;
5391: LD_INT 35
5393: PPUSH
5394: CALL_OW 67
// for i in tmp do
5398: LD_ADDR_VAR 0 2
5402: PUSH
5403: LD_VAR 0 6
5407: PUSH
5408: FOR_IN
5409: IFFALSE 5561
// begin SetDir ( i , 3 ) ;
5411: LD_VAR 0 2
5415: PPUSH
5416: LD_INT 3
5418: PPUSH
5419: CALL_OW 233
// if tmp_vehs then
5423: LD_VAR 0 7
5427: IFFALSE 5502
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5429: LD_VAR 0 7
5433: PUSH
5434: LD_INT 1
5436: ARRAY
5437: PPUSH
5438: LD_INT 3
5440: PPUSH
5441: CALL_OW 233
// PlaceUnitArea ( tmp_vehs [ 1 ] , GammaSupport , false ) ;
5445: LD_VAR 0 7
5449: PUSH
5450: LD_INT 1
5452: ARRAY
5453: PPUSH
5454: LD_INT 4
5456: PPUSH
5457: LD_INT 0
5459: PPUSH
5460: CALL_OW 49
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5464: LD_VAR 0 2
5468: PPUSH
5469: LD_VAR 0 7
5473: PUSH
5474: LD_INT 1
5476: ARRAY
5477: PPUSH
5478: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5482: LD_ADDR_VAR 0 7
5486: PUSH
5487: LD_VAR 0 7
5491: PPUSH
5492: LD_INT 1
5494: PPUSH
5495: CALL_OW 3
5499: ST_TO_ADDR
// end else
5500: GO 5517
// PlaceUnitArea ( i , GammaSupport , false ) ;
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_INT 4
5509: PPUSH
5510: LD_INT 0
5512: PPUSH
5513: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5517: LD_VAR 0 2
5521: PPUSH
5522: LD_INT 77
5524: PPUSH
5525: LD_INT 16
5527: PPUSH
5528: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5532: LD_INT 35
5534: PPUSH
5535: CALL_OW 67
// until not FilterUnitsInArea ( GammaSupport , [ f_side , 1 ] ) ;
5539: LD_INT 4
5541: PPUSH
5542: LD_INT 22
5544: PUSH
5545: LD_INT 1
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: PPUSH
5552: CALL_OW 70
5556: NOT
5557: IFFALSE 5532
// end ;
5559: GO 5408
5561: POP
5562: POP
// PlaceUnitArea ( JMM , GammaSupport , false ) ;
5563: LD_EXP 1
5567: PPUSH
5568: LD_INT 4
5570: PPUSH
5571: LD_INT 0
5573: PPUSH
5574: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5578: LD_EXP 1
5582: PPUSH
5583: LD_INT 77
5585: PPUSH
5586: LD_INT 16
5588: PPUSH
5589: CALL_OW 111
// end ;
5593: LD_VAR 0 1
5597: RET
// export function PrepareSikorsky ; begin
5598: LD_INT 0
5600: PPUSH
// uc_side = 4 ;
5601: LD_ADDR_OWVAR 20
5605: PUSH
5606: LD_INT 4
5608: ST_TO_ADDR
// uc_nation = 1 ;
5609: LD_ADDR_OWVAR 21
5613: PUSH
5614: LD_INT 1
5616: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5617: LD_ADDR_EXP 16
5621: PUSH
5622: LD_STRING Sikorski
5624: PPUSH
5625: LD_INT 0
5627: PPUSH
5628: CALL 7040 0 2
5632: ST_TO_ADDR
// vc_engine = 1 ;
5633: LD_ADDR_OWVAR 39
5637: PUSH
5638: LD_INT 1
5640: ST_TO_ADDR
// vc_control = 1 ;
5641: LD_ADDR_OWVAR 38
5645: PUSH
5646: LD_INT 1
5648: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5649: LD_ADDR_OWVAR 40
5653: PUSH
5654: LD_INT 5
5656: PUSH
5657: LD_INT 3
5659: PUSH
5660: LD_INT 4
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: LIST
5667: PUSH
5668: LD_OWVAR 67
5672: ARRAY
5673: ST_TO_ADDR
// vc_chassis = 4 ;
5674: LD_ADDR_OWVAR 37
5678: PUSH
5679: LD_INT 4
5681: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5682: LD_ADDR_EXP 17
5686: PUSH
5687: CALL_OW 45
5691: ST_TO_ADDR
// SetDir ( SikorskyTank , 3 ) ;
5692: LD_EXP 17
5696: PPUSH
5697: LD_INT 3
5699: PPUSH
5700: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
5704: LD_INT 35
5706: PPUSH
5707: CALL_OW 67
// PlaceUnitXY ( SikorskyTank , 18 , 5 , false ) ;
5711: LD_EXP 17
5715: PPUSH
5716: LD_INT 18
5718: PPUSH
5719: LD_INT 5
5721: PPUSH
5722: LD_INT 0
5724: PPUSH
5725: CALL_OW 48
// until IsPlaced ( SikorskyTank ) ;
5729: LD_EXP 17
5733: PPUSH
5734: CALL_OW 305
5738: IFFALSE 5704
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5740: LD_EXP 16
5744: PPUSH
5745: LD_EXP 17
5749: PPUSH
5750: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5754: LD_EXP 17
5758: PPUSH
5759: LD_INT 5
5761: PPUSH
5762: CALL_OW 113
// end ;
5766: LD_VAR 0 1
5770: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5771: LD_INT 0
5773: PPUSH
5774: PPUSH
5775: PPUSH
5776: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5777: LD_ADDR_VAR 0 2
5781: PUSH
5782: DOUBLE
5783: LD_INT 1
5785: DEC
5786: ST_TO_ADDR
5787: LD_INT 8
5789: PUSH
5790: LD_INT 7
5792: PUSH
5793: LD_INT 7
5795: PUSH
5796: EMPTY
5797: LIST
5798: LIST
5799: LIST
5800: PUSH
5801: LD_OWVAR 67
5805: ARRAY
5806: PUSH
5807: FOR_TO
5808: IFFALSE 5924
// begin uc_side = 4 ;
5810: LD_ADDR_OWVAR 20
5814: PUSH
5815: LD_INT 4
5817: ST_TO_ADDR
// uc_nation = 1 ;
5818: LD_ADDR_OWVAR 21
5822: PUSH
5823: LD_INT 1
5825: ST_TO_ADDR
// hc_name =  ;
5826: LD_ADDR_OWVAR 26
5830: PUSH
5831: LD_STRING 
5833: ST_TO_ADDR
// hc_gallery =  ;
5834: LD_ADDR_OWVAR 33
5838: PUSH
5839: LD_STRING 
5841: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5842: LD_INT 0
5844: PPUSH
5845: LD_INT 1
5847: PPUSH
5848: LD_INT 5
5850: PPUSH
5851: LD_INT 8
5853: PPUSH
5854: CALL_OW 12
5858: PPUSH
5859: CALL_OW 380
// un = CreateHuman ;
5863: LD_ADDR_VAR 0 3
5867: PUSH
5868: CALL_OW 44
5872: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5873: LD_VAR 0 3
5877: PPUSH
5878: LD_INT 3
5880: PPUSH
5881: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5885: LD_VAR 0 3
5889: PPUSH
5890: LD_INT 9
5892: PPUSH
5893: LD_INT 0
5895: PPUSH
5896: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5900: LD_VAR 0 3
5904: PPUSH
5905: LD_INT 53
5907: PPUSH
5908: LD_INT 23
5910: PPUSH
5911: CALL_OW 111
// wait ( 0 0$1 ) ;
5915: LD_INT 35
5917: PPUSH
5918: CALL_OW 67
// end ;
5922: GO 5807
5924: POP
5925: POP
// for i = 1 to 3 do
5926: LD_ADDR_VAR 0 2
5930: PUSH
5931: DOUBLE
5932: LD_INT 1
5934: DEC
5935: ST_TO_ADDR
5936: LD_INT 3
5938: PUSH
5939: FOR_TO
5940: IFFALSE 6056
// begin uc_side = 4 ;
5942: LD_ADDR_OWVAR 20
5946: PUSH
5947: LD_INT 4
5949: ST_TO_ADDR
// uc_nation = 1 ;
5950: LD_ADDR_OWVAR 21
5954: PUSH
5955: LD_INT 1
5957: ST_TO_ADDR
// hc_name =  ;
5958: LD_ADDR_OWVAR 26
5962: PUSH
5963: LD_STRING 
5965: ST_TO_ADDR
// hc_gallery =  ;
5966: LD_ADDR_OWVAR 33
5970: PUSH
5971: LD_STRING 
5973: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5974: LD_INT 0
5976: PPUSH
5977: LD_INT 4
5979: PPUSH
5980: LD_INT 5
5982: PPUSH
5983: LD_INT 8
5985: PPUSH
5986: CALL_OW 12
5990: PPUSH
5991: CALL_OW 380
// un = CreateHuman ;
5995: LD_ADDR_VAR 0 3
5999: PUSH
6000: CALL_OW 44
6004: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6005: LD_VAR 0 3
6009: PPUSH
6010: LD_INT 3
6012: PPUSH
6013: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6017: LD_VAR 0 3
6021: PPUSH
6022: LD_INT 9
6024: PPUSH
6025: LD_INT 0
6027: PPUSH
6028: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6032: LD_VAR 0 3
6036: PPUSH
6037: LD_INT 53
6039: PPUSH
6040: LD_INT 23
6042: PPUSH
6043: CALL_OW 111
// wait ( 0 0$1 ) ;
6047: LD_INT 35
6049: PPUSH
6050: CALL_OW 67
// end ;
6054: GO 5939
6056: POP
6057: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
6058: LD_ADDR_VAR 0 2
6062: PUSH
6063: DOUBLE
6064: LD_INT 1
6066: DEC
6067: ST_TO_ADDR
6068: LD_INT 9
6070: PUSH
6071: LD_INT 8
6073: PUSH
6074: LD_INT 7
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: LIST
6081: PUSH
6082: LD_OWVAR 67
6086: ARRAY
6087: PUSH
6088: FOR_TO
6089: IFFALSE 6297
// begin uc_side = 4 ;
6091: LD_ADDR_OWVAR 20
6095: PUSH
6096: LD_INT 4
6098: ST_TO_ADDR
// uc_nation = 1 ;
6099: LD_ADDR_OWVAR 21
6103: PUSH
6104: LD_INT 1
6106: ST_TO_ADDR
// vc_engine = 1 ;
6107: LD_ADDR_OWVAR 39
6111: PUSH
6112: LD_INT 1
6114: ST_TO_ADDR
// vc_control = 1 ;
6115: LD_ADDR_OWVAR 38
6119: PUSH
6120: LD_INT 1
6122: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
6123: LD_ADDR_OWVAR 40
6127: PUSH
6128: LD_INT 3
6130: PUSH
6131: LD_INT 4
6133: PUSH
6134: LD_INT 5
6136: PUSH
6137: LD_INT 6
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: PUSH
6146: LD_INT 1
6148: PPUSH
6149: LD_INT 4
6151: PPUSH
6152: CALL_OW 12
6156: ARRAY
6157: ST_TO_ADDR
// vc_chassis = 4 ;
6158: LD_ADDR_OWVAR 37
6162: PUSH
6163: LD_INT 4
6165: ST_TO_ADDR
// veh = CreateVehicle ;
6166: LD_ADDR_VAR 0 4
6170: PUSH
6171: CALL_OW 45
6175: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6176: LD_VAR 0 4
6180: PPUSH
6181: LD_INT 3
6183: PPUSH
6184: CALL_OW 233
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6188: LD_VAR 0 4
6192: PPUSH
6193: LD_INT 9
6195: PPUSH
6196: LD_INT 0
6198: PPUSH
6199: CALL_OW 49
// hc_name =  ;
6203: LD_ADDR_OWVAR 26
6207: PUSH
6208: LD_STRING 
6210: ST_TO_ADDR
// hc_gallery =  ;
6211: LD_ADDR_OWVAR 33
6215: PUSH
6216: LD_STRING 
6218: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6219: LD_INT 0
6221: PPUSH
6222: LD_INT 3
6224: PPUSH
6225: LD_INT 5
6227: PPUSH
6228: LD_INT 8
6230: PPUSH
6231: CALL_OW 12
6235: PPUSH
6236: CALL_OW 380
// un = CreateHuman ;
6240: LD_ADDR_VAR 0 3
6244: PUSH
6245: CALL_OW 44
6249: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6250: LD_VAR 0 3
6254: PPUSH
6255: LD_VAR 0 4
6259: PPUSH
6260: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
6264: LD_VAR 0 4
6268: PUSH
6269: LD_VAR 0 3
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PPUSH
6278: LD_INT 53
6280: PPUSH
6281: LD_INT 23
6283: PPUSH
6284: CALL_OW 111
// wait ( 0 0$5 ) ;
6288: LD_INT 175
6290: PPUSH
6291: CALL_OW 67
// end ;
6295: GO 6088
6297: POP
6298: POP
// end ; end_of_file
6299: LD_VAR 0 1
6303: RET
// export function PrepareRussianCommander ; begin
6304: LD_INT 0
6306: PPUSH
// uc_side = 3 ;
6307: LD_ADDR_OWVAR 20
6311: PUSH
6312: LD_INT 3
6314: ST_TO_ADDR
// uc_nation = 3 ;
6315: LD_ADDR_OWVAR 21
6319: PUSH
6320: LD_INT 3
6322: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6323: LD_ADDR_EXP 24
6327: PUSH
6328: LD_STRING Borodin
6330: PPUSH
6331: CALL_OW 25
6335: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6336: LD_EXP 24
6340: PPUSH
6341: LD_INT 25
6343: PPUSH
6344: LD_INT 0
6346: PPUSH
6347: CALL_OW 49
// end ;
6351: LD_VAR 0 1
6355: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6356: LD_INT 0
6358: PPUSH
6359: PPUSH
6360: PPUSH
6361: PPUSH
// for i = 1 to 10 do
6362: LD_ADDR_VAR 0 2
6366: PUSH
6367: DOUBLE
6368: LD_INT 1
6370: DEC
6371: ST_TO_ADDR
6372: LD_INT 10
6374: PUSH
6375: FOR_TO
6376: IFFALSE 6450
// begin uc_side = 6 ;
6378: LD_ADDR_OWVAR 20
6382: PUSH
6383: LD_INT 6
6385: ST_TO_ADDR
// uc_nation = 3 ;
6386: LD_ADDR_OWVAR 21
6390: PUSH
6391: LD_INT 3
6393: ST_TO_ADDR
// hc_gallery =  ;
6394: LD_ADDR_OWVAR 33
6398: PUSH
6399: LD_STRING 
6401: ST_TO_ADDR
// hc_name =  ;
6402: LD_ADDR_OWVAR 26
6406: PUSH
6407: LD_STRING 
6409: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6410: LD_INT 0
6412: PPUSH
6413: LD_INT 1
6415: PPUSH
6416: LD_INT 3
6418: PPUSH
6419: CALL_OW 380
// un = CreateHuman ;
6423: LD_ADDR_VAR 0 3
6427: PUSH
6428: CALL_OW 44
6432: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6433: LD_VAR 0 3
6437: PPUSH
6438: LD_INT 1
6440: PPUSH
6441: LD_INT 0
6443: PPUSH
6444: CALL_OW 49
// end ;
6448: GO 6375
6450: POP
6451: POP
// for i = 1 to 3 do
6452: LD_ADDR_VAR 0 2
6456: PUSH
6457: DOUBLE
6458: LD_INT 1
6460: DEC
6461: ST_TO_ADDR
6462: LD_INT 3
6464: PUSH
6465: FOR_TO
6466: IFFALSE 6615
// begin uc_side = 6 ;
6468: LD_ADDR_OWVAR 20
6472: PUSH
6473: LD_INT 6
6475: ST_TO_ADDR
// uc_nation = 3 ;
6476: LD_ADDR_OWVAR 21
6480: PUSH
6481: LD_INT 3
6483: ST_TO_ADDR
// vc_engine = 1 ;
6484: LD_ADDR_OWVAR 39
6488: PUSH
6489: LD_INT 1
6491: ST_TO_ADDR
// vc_control = 1 ;
6492: LD_ADDR_OWVAR 38
6496: PUSH
6497: LD_INT 1
6499: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6500: LD_ADDR_OWVAR 40
6504: PUSH
6505: LD_INT 43
6507: PUSH
6508: LD_INT 44
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 1
6517: PPUSH
6518: LD_INT 2
6520: PPUSH
6521: CALL_OW 12
6525: ARRAY
6526: ST_TO_ADDR
// vc_chassis = 22 ;
6527: LD_ADDR_OWVAR 37
6531: PUSH
6532: LD_INT 22
6534: ST_TO_ADDR
// veh = CreateVehicle ;
6535: LD_ADDR_VAR 0 4
6539: PUSH
6540: CALL_OW 45
6544: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6545: LD_VAR 0 4
6549: PPUSH
6550: LD_INT 2
6552: PPUSH
6553: LD_INT 0
6555: PPUSH
6556: CALL_OW 49
// hc_gallery =  ;
6560: LD_ADDR_OWVAR 33
6564: PUSH
6565: LD_STRING 
6567: ST_TO_ADDR
// hc_name =  ;
6568: LD_ADDR_OWVAR 26
6572: PUSH
6573: LD_STRING 
6575: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6576: LD_INT 0
6578: PPUSH
6579: LD_INT 3
6581: PPUSH
6582: LD_INT 4
6584: PPUSH
6585: CALL_OW 380
// un = CreateHuman ;
6589: LD_ADDR_VAR 0 3
6593: PUSH
6594: CALL_OW 44
6598: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6599: LD_VAR 0 3
6603: PPUSH
6604: LD_VAR 0 4
6608: PPUSH
6609: CALL_OW 52
// end ;
6613: GO 6465
6615: POP
6616: POP
// end ;
6617: LD_VAR 0 1
6621: RET
// export function PrepareRussians ; var i , un ; begin
6622: LD_INT 0
6624: PPUSH
6625: PPUSH
6626: PPUSH
// for i = 1 to 8 do
6627: LD_ADDR_VAR 0 2
6631: PUSH
6632: DOUBLE
6633: LD_INT 1
6635: DEC
6636: ST_TO_ADDR
6637: LD_INT 8
6639: PUSH
6640: FOR_TO
6641: IFFALSE 6727
// begin uc_side = 3 ;
6643: LD_ADDR_OWVAR 20
6647: PUSH
6648: LD_INT 3
6650: ST_TO_ADDR
// uc_nation = 3 ;
6651: LD_ADDR_OWVAR 21
6655: PUSH
6656: LD_INT 3
6658: ST_TO_ADDR
// hc_gallery =  ;
6659: LD_ADDR_OWVAR 33
6663: PUSH
6664: LD_STRING 
6666: ST_TO_ADDR
// hc_name =  ;
6667: LD_ADDR_OWVAR 26
6671: PUSH
6672: LD_STRING 
6674: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6675: LD_INT 0
6677: PPUSH
6678: LD_INT 1
6680: PPUSH
6681: LD_EXP 25
6685: PPUSH
6686: LD_EXP 26
6690: PPUSH
6691: CALL_OW 12
6695: PPUSH
6696: CALL_OW 380
// un = CreateHuman ;
6700: LD_ADDR_VAR 0 3
6704: PUSH
6705: CALL_OW 44
6709: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6710: LD_VAR 0 3
6714: PPUSH
6715: LD_INT 3
6717: PPUSH
6718: LD_INT 0
6720: PPUSH
6721: CALL_OW 49
// end ;
6725: GO 6640
6727: POP
6728: POP
// for i = 1 to 4 do
6729: LD_ADDR_VAR 0 2
6733: PUSH
6734: DOUBLE
6735: LD_INT 1
6737: DEC
6738: ST_TO_ADDR
6739: LD_INT 4
6741: PUSH
6742: FOR_TO
6743: IFFALSE 6829
// begin uc_side = 3 ;
6745: LD_ADDR_OWVAR 20
6749: PUSH
6750: LD_INT 3
6752: ST_TO_ADDR
// uc_nation = 3 ;
6753: LD_ADDR_OWVAR 21
6757: PUSH
6758: LD_INT 3
6760: ST_TO_ADDR
// hc_gallery =  ;
6761: LD_ADDR_OWVAR 33
6765: PUSH
6766: LD_STRING 
6768: ST_TO_ADDR
// hc_name =  ;
6769: LD_ADDR_OWVAR 26
6773: PUSH
6774: LD_STRING 
6776: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6777: LD_INT 0
6779: PPUSH
6780: LD_INT 2
6782: PPUSH
6783: LD_EXP 25
6787: PPUSH
6788: LD_EXP 26
6792: PPUSH
6793: CALL_OW 12
6797: PPUSH
6798: CALL_OW 380
// un = CreateHuman ;
6802: LD_ADDR_VAR 0 3
6806: PUSH
6807: CALL_OW 44
6811: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6812: LD_VAR 0 3
6816: PPUSH
6817: LD_INT 3
6819: PPUSH
6820: LD_INT 0
6822: PPUSH
6823: CALL_OW 49
// end ;
6827: GO 6742
6829: POP
6830: POP
// for i = 1 to 3 do
6831: LD_ADDR_VAR 0 2
6835: PUSH
6836: DOUBLE
6837: LD_INT 1
6839: DEC
6840: ST_TO_ADDR
6841: LD_INT 3
6843: PUSH
6844: FOR_TO
6845: IFFALSE 6931
// begin uc_side = 3 ;
6847: LD_ADDR_OWVAR 20
6851: PUSH
6852: LD_INT 3
6854: ST_TO_ADDR
// uc_nation = 3 ;
6855: LD_ADDR_OWVAR 21
6859: PUSH
6860: LD_INT 3
6862: ST_TO_ADDR
// hc_gallery =  ;
6863: LD_ADDR_OWVAR 33
6867: PUSH
6868: LD_STRING 
6870: ST_TO_ADDR
// hc_name =  ;
6871: LD_ADDR_OWVAR 26
6875: PUSH
6876: LD_STRING 
6878: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6879: LD_INT 0
6881: PPUSH
6882: LD_INT 3
6884: PPUSH
6885: LD_EXP 25
6889: PPUSH
6890: LD_EXP 26
6894: PPUSH
6895: CALL_OW 12
6899: PPUSH
6900: CALL_OW 380
// un = CreateHuman ;
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: CALL_OW 44
6913: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6914: LD_VAR 0 3
6918: PPUSH
6919: LD_INT 3
6921: PPUSH
6922: LD_INT 0
6924: PPUSH
6925: CALL_OW 49
// end ;
6929: GO 6844
6931: POP
6932: POP
// for i = 1 to 2 do
6933: LD_ADDR_VAR 0 2
6937: PUSH
6938: DOUBLE
6939: LD_INT 1
6941: DEC
6942: ST_TO_ADDR
6943: LD_INT 2
6945: PUSH
6946: FOR_TO
6947: IFFALSE 7033
// begin uc_side = 3 ;
6949: LD_ADDR_OWVAR 20
6953: PUSH
6954: LD_INT 3
6956: ST_TO_ADDR
// uc_nation = 3 ;
6957: LD_ADDR_OWVAR 21
6961: PUSH
6962: LD_INT 3
6964: ST_TO_ADDR
// hc_gallery =  ;
6965: LD_ADDR_OWVAR 33
6969: PUSH
6970: LD_STRING 
6972: ST_TO_ADDR
// hc_name =  ;
6973: LD_ADDR_OWVAR 26
6977: PUSH
6978: LD_STRING 
6980: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6981: LD_INT 0
6983: PPUSH
6984: LD_INT 4
6986: PPUSH
6987: LD_EXP 25
6991: PPUSH
6992: LD_EXP 26
6996: PPUSH
6997: CALL_OW 12
7001: PPUSH
7002: CALL_OW 380
// un = CreateHuman ;
7006: LD_ADDR_VAR 0 3
7010: PUSH
7011: CALL_OW 44
7015: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7016: LD_VAR 0 3
7020: PPUSH
7021: LD_INT 3
7023: PPUSH
7024: LD_INT 0
7026: PPUSH
7027: CALL_OW 49
// end ;
7031: GO 6946
7033: POP
7034: POP
// end ; end_of_file
7035: LD_VAR 0 1
7039: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7040: LD_INT 0
7042: PPUSH
7043: PPUSH
// if exist_mode then
7044: LD_VAR 0 2
7048: IFFALSE 7067
// unit := CreateCharacter ( ident ) else
7050: LD_ADDR_VAR 0 4
7054: PUSH
7055: LD_VAR 0 1
7059: PPUSH
7060: CALL_OW 34
7064: ST_TO_ADDR
7065: GO 7082
// unit := NewCharacter ( ident ) ;
7067: LD_ADDR_VAR 0 4
7071: PUSH
7072: LD_VAR 0 1
7076: PPUSH
7077: CALL_OW 25
7081: ST_TO_ADDR
// result := unit ;
7082: LD_ADDR_VAR 0 3
7086: PUSH
7087: LD_VAR 0 4
7091: ST_TO_ADDR
// end ;
7092: LD_VAR 0 3
7096: RET
// export function Video ( mode ) ; begin
7097: LD_INT 0
7099: PPUSH
// ingame_video = mode ;
7100: LD_ADDR_OWVAR 52
7104: PUSH
7105: LD_VAR 0 1
7109: ST_TO_ADDR
// interface_hidden = mode ;
7110: LD_ADDR_OWVAR 54
7114: PUSH
7115: LD_VAR 0 1
7119: ST_TO_ADDR
// end ;
7120: LD_VAR 0 2
7124: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7125: LD_INT 0
7127: PPUSH
7128: PPUSH
7129: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7130: LD_ADDR_VAR 0 1
7134: PUSH
7135: LD_VAR 0 1
7139: PUSH
7140: LD_EXP 1
7144: PUSH
7145: LD_EXP 2
7149: PUSH
7150: LD_EXP 3
7154: PUSH
7155: LD_EXP 4
7159: PUSH
7160: LD_EXP 5
7164: PUSH
7165: LD_EXP 6
7169: PUSH
7170: LD_EXP 7
7174: PUSH
7175: LD_EXP 8
7179: PUSH
7180: LD_EXP 9
7184: PUSH
7185: LD_EXP 10
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: DIFF
7202: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7203: LD_ADDR_VAR 0 6
7207: PUSH
7208: LD_VAR 0 1
7212: PUSH
7213: LD_INT 1
7215: PPUSH
7216: LD_VAR 0 1
7220: PPUSH
7221: CALL_OW 12
7225: ARRAY
7226: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7227: LD_VAR 0 6
7231: PPUSH
7232: CALL_OW 258
7236: PUSH
7237: LD_INT 1
7239: EQUAL
7240: IFFALSE 7258
// Say ( speaker , dialogMID ) else
7242: LD_VAR 0 6
7246: PPUSH
7247: LD_VAR 0 2
7251: PPUSH
7252: CALL_OW 88
7256: GO 7272
// Say ( speaker , dialogFID ) ;
7258: LD_VAR 0 6
7262: PPUSH
7263: LD_VAR 0 3
7267: PPUSH
7268: CALL_OW 88
// result := speaker ;
7272: LD_ADDR_VAR 0 4
7276: PUSH
7277: LD_VAR 0 6
7281: ST_TO_ADDR
// end ;
7282: LD_VAR 0 4
7286: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7287: LD_INT 0
7289: PPUSH
7290: PPUSH
7291: PPUSH
// uc_side := GetSide ( b ) ;
7292: LD_ADDR_OWVAR 20
7296: PUSH
7297: LD_VAR 0 2
7301: PPUSH
7302: CALL_OW 255
7306: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7307: LD_ADDR_OWVAR 21
7311: PUSH
7312: LD_VAR 0 2
7316: PPUSH
7317: CALL_OW 248
7321: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7322: LD_INT 0
7324: PPUSH
7325: LD_INT 1
7327: PPUSH
7328: LD_VAR 0 1
7332: PPUSH
7333: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7337: LD_ADDR_VAR 0 5
7341: PUSH
7342: LD_VAR 0 2
7346: PPUSH
7347: CALL_OW 254
7351: PUSH
7352: LD_INT 3
7354: MINUS
7355: ST_TO_ADDR
// if dir < 0 then
7356: LD_VAR 0 5
7360: PUSH
7361: LD_INT 0
7363: LESS
7364: IFFALSE 7380
// dir := 6 + dir ;
7366: LD_ADDR_VAR 0 5
7370: PUSH
7371: LD_INT 6
7373: PUSH
7374: LD_VAR 0 5
7378: PLUS
7379: ST_TO_ADDR
// un := CreateHuman ;
7380: LD_ADDR_VAR 0 4
7384: PUSH
7385: CALL_OW 44
7389: ST_TO_ADDR
// SetDir ( un , dir ) ;
7390: LD_VAR 0 4
7394: PPUSH
7395: LD_VAR 0 5
7399: PPUSH
7400: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7404: LD_VAR 0 4
7408: PPUSH
7409: LD_VAR 0 2
7413: PPUSH
7414: CALL_OW 52
// end ;
7418: LD_VAR 0 3
7422: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7423: LD_INT 0
7425: PPUSH
7426: PPUSH
7427: PPUSH
7428: PPUSH
// for i = 1 to count do
7429: LD_ADDR_VAR 0 8
7433: PUSH
7434: DOUBLE
7435: LD_INT 1
7437: DEC
7438: ST_TO_ADDR
7439: LD_VAR 0 6
7443: PUSH
7444: FOR_TO
7445: IFFALSE 7526
// begin uc_side = side ;
7447: LD_ADDR_OWVAR 20
7451: PUSH
7452: LD_VAR 0 1
7456: ST_TO_ADDR
// uc_nation = nation ;
7457: LD_ADDR_OWVAR 21
7461: PUSH
7462: LD_VAR 0 2
7466: ST_TO_ADDR
// hc_gallery =  ;
7467: LD_ADDR_OWVAR 33
7471: PUSH
7472: LD_STRING 
7474: ST_TO_ADDR
// hc_name =  ;
7475: LD_ADDR_OWVAR 26
7479: PUSH
7480: LD_STRING 
7482: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7483: LD_INT 0
7485: PPUSH
7486: LD_VAR 0 5
7490: PPUSH
7491: LD_VAR 0 4
7495: PPUSH
7496: CALL_OW 380
// un = CreateHuman ;
7500: LD_ADDR_VAR 0 10
7504: PUSH
7505: CALL_OW 44
7509: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7510: LD_VAR 0 10
7514: PPUSH
7515: LD_VAR 0 3
7519: PPUSH
7520: CALL_OW 52
// end ;
7524: GO 7444
7526: POP
7527: POP
// end ;
7528: LD_VAR 0 7
7532: RET
// export function PrepareDifficulty ; begin
7533: LD_INT 0
7535: PPUSH
// if Difficulty = 1 then
7536: LD_OWVAR 67
7540: PUSH
7541: LD_INT 1
7543: EQUAL
7544: IFFALSE 7562
// begin RuSolMinLevel = 4 ;
7546: LD_ADDR_EXP 25
7550: PUSH
7551: LD_INT 4
7553: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7554: LD_ADDR_EXP 26
7558: PUSH
7559: LD_INT 6
7561: ST_TO_ADDR
// end ; if Difficulty = 2 then
7562: LD_OWVAR 67
7566: PUSH
7567: LD_INT 2
7569: EQUAL
7570: IFFALSE 7640
// begin RuSolMinLevel = 5 ;
7572: LD_ADDR_EXP 25
7576: PUSH
7577: LD_INT 5
7579: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7580: LD_ADDR_EXP 26
7584: PUSH
7585: LD_INT 6
7587: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7588: LD_INT 51
7590: PPUSH
7591: LD_INT 3
7593: PPUSH
7594: LD_INT 1
7596: PPUSH
7597: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7601: LD_INT 57
7603: PPUSH
7604: LD_INT 3
7606: PPUSH
7607: LD_INT 1
7609: PPUSH
7610: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7614: LD_INT 57
7616: PPUSH
7617: LD_INT 6
7619: PPUSH
7620: LD_INT 2
7622: PPUSH
7623: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7627: LD_INT 51
7629: PPUSH
7630: LD_INT 6
7632: PPUSH
7633: LD_INT 2
7635: PPUSH
7636: CALL_OW 322
// end ; if Difficulty = 3 then
7640: LD_OWVAR 67
7644: PUSH
7645: LD_INT 3
7647: EQUAL
7648: IFFALSE 7731
// begin RuSolMinLevel = 5 ;
7650: LD_ADDR_EXP 25
7654: PUSH
7655: LD_INT 5
7657: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7658: LD_ADDR_EXP 26
7662: PUSH
7663: LD_INT 6
7665: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7666: LD_INT 57
7668: PPUSH
7669: LD_INT 3
7671: PPUSH
7672: LD_INT 1
7674: PPUSH
7675: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7679: LD_INT 51
7681: PPUSH
7682: LD_INT 3
7684: PPUSH
7685: LD_INT 1
7687: PPUSH
7688: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7692: LD_INT 52
7694: PPUSH
7695: LD_INT 3
7697: PPUSH
7698: LD_INT 1
7700: PPUSH
7701: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7705: LD_INT 57
7707: PPUSH
7708: LD_INT 6
7710: PPUSH
7711: LD_INT 2
7713: PPUSH
7714: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7718: LD_INT 52
7720: PPUSH
7721: LD_INT 6
7723: PPUSH
7724: LD_INT 2
7726: PPUSH
7727: CALL_OW 322
// end ; end ;
7731: LD_VAR 0 1
7735: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7736: LD_INT 0
7738: PPUSH
7739: PPUSH
7740: PPUSH
7741: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7742: LD_ADDR_VAR 0 3
7746: PUSH
7747: LD_INT 22
7749: PUSH
7750: LD_INT 3
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: LD_INT 25
7759: PUSH
7760: LD_INT 2
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PPUSH
7771: CALL_OW 69
7775: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7776: LD_ADDR_VAR 0 4
7780: PUSH
7781: LD_INT 4
7783: PUSH
7784: LD_INT 75
7786: PUSH
7787: LD_INT 79
7789: PUSH
7790: LD_INT 2
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: PUSH
7799: LD_INT 4
7801: PUSH
7802: LD_INT 113
7804: PUSH
7805: LD_INT 94
7807: PUSH
7808: LD_INT 4
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: PUSH
7817: LD_INT 29
7819: PUSH
7820: LD_INT 106
7822: PUSH
7823: LD_INT 97
7825: PUSH
7826: LD_INT 3
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 26
7837: PUSH
7838: LD_INT 93
7840: PUSH
7841: LD_INT 97
7843: PUSH
7844: LD_INT 5
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: PUSH
7853: LD_INT 2
7855: PUSH
7856: LD_INT 100
7858: PUSH
7859: LD_INT 89
7861: PUSH
7862: LD_INT 3
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: PUSH
7871: LD_INT 17
7873: PUSH
7874: LD_INT 96
7876: PUSH
7877: LD_INT 89
7879: PUSH
7880: LD_INT 1
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 32
7891: PUSH
7892: LD_INT 78
7894: PUSH
7895: LD_INT 94
7897: PUSH
7898: LD_INT 1
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 32
7909: PUSH
7910: LD_INT 95
7912: PUSH
7913: LD_INT 82
7915: PUSH
7916: LD_INT 3
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: PUSH
7925: LD_INT 32
7927: PUSH
7928: LD_INT 104
7930: PUSH
7931: LD_INT 85
7933: PUSH
7934: LD_INT 2
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 32
7945: PUSH
7946: LD_INT 81
7948: PUSH
7949: LD_INT 78
7951: PUSH
7952: LD_INT 2
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: PUSH
7961: LD_INT 33
7963: PUSH
7964: LD_INT 109
7966: PUSH
7967: LD_INT 90
7969: PUSH
7970: LD_INT 3
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: PUSH
7979: LD_INT 33
7981: PUSH
7982: LD_INT 88
7984: PUSH
7985: LD_INT 79
7987: PUSH
7988: LD_INT 3
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: PUSH
7997: LD_INT 33
7999: PUSH
8000: LD_INT 76
8002: PUSH
8003: LD_INT 87
8005: PUSH
8006: LD_INT 1
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: PUSH
8015: LD_INT 26
8017: PUSH
8018: LD_INT 96
8020: PUSH
8021: LD_INT 97
8023: PUSH
8024: LD_INT 5
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: PUSH
8033: LD_INT 26
8035: PUSH
8036: LD_INT 85
8038: PUSH
8039: LD_INT 84
8041: PUSH
8042: LD_INT 2
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: LD_INT 6
8053: PUSH
8054: LD_INT 88
8056: PUSH
8057: LD_INT 95
8059: PUSH
8060: LD_INT 0
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: PUSH
8069: LD_INT 19
8071: PUSH
8072: LD_INT 103
8074: PUSH
8075: LD_INT 89
8077: PUSH
8078: LD_INT 4
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: PUSH
8087: LD_INT 16
8089: PUSH
8090: LD_INT 97
8092: PUSH
8093: LD_INT 86
8095: PUSH
8096: LD_INT 2
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: PUSH
8105: LD_INT 24
8107: PUSH
8108: LD_INT 100
8110: PUSH
8111: LD_INT 85
8113: PUSH
8114: LD_INT 3
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: ST_TO_ADDR
// for i := 1 to buildingsTab do
8144: LD_ADDR_VAR 0 2
8148: PUSH
8149: DOUBLE
8150: LD_INT 1
8152: DEC
8153: ST_TO_ADDR
8154: LD_VAR 0 4
8158: PUSH
8159: FOR_TO
8160: IFFALSE 8233
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8162: LD_VAR 0 3
8166: PPUSH
8167: LD_VAR 0 4
8171: PUSH
8172: LD_VAR 0 2
8176: ARRAY
8177: PUSH
8178: LD_INT 1
8180: ARRAY
8181: PPUSH
8182: LD_VAR 0 4
8186: PUSH
8187: LD_VAR 0 2
8191: ARRAY
8192: PUSH
8193: LD_INT 2
8195: ARRAY
8196: PPUSH
8197: LD_VAR 0 4
8201: PUSH
8202: LD_VAR 0 2
8206: ARRAY
8207: PUSH
8208: LD_INT 3
8210: ARRAY
8211: PPUSH
8212: LD_VAR 0 4
8216: PUSH
8217: LD_VAR 0 2
8221: ARRAY
8222: PUSH
8223: LD_INT 4
8225: ARRAY
8226: PPUSH
8227: CALL_OW 205
8231: GO 8159
8233: POP
8234: POP
// end ;
8235: LD_VAR 0 1
8239: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8240: LD_INT 0
8242: PPUSH
8243: PPUSH
// for i in charactersList do
8244: LD_ADDR_VAR 0 4
8248: PUSH
8249: LD_VAR 0 1
8253: PUSH
8254: FOR_IN
8255: IFFALSE 8273
// SaveCharacters ( i , ident ) ;
8257: LD_VAR 0 4
8261: PPUSH
8262: LD_VAR 0 2
8266: PPUSH
8267: CALL_OW 38
8271: GO 8254
8273: POP
8274: POP
// end ;
8275: LD_VAR 0 3
8279: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8280: LD_INT 0
8282: PPUSH
8283: PPUSH
8284: PPUSH
8285: PPUSH
8286: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8287: LD_ADDR_VAR 0 8
8291: PUSH
8292: LD_INT 48
8294: PUSH
8295: LD_INT 49
8297: PUSH
8298: LD_INT 50
8300: PUSH
8301: LD_INT 20
8303: PUSH
8304: LD_INT 1
8306: PUSH
8307: LD_INT 51
8309: PUSH
8310: LD_INT 52
8312: PUSH
8313: LD_INT 69
8315: PUSH
8316: LD_INT 39
8318: PUSH
8319: LD_INT 34
8321: PUSH
8322: LD_INT 40
8324: PUSH
8325: LD_INT 53
8327: PUSH
8328: LD_INT 71
8330: PUSH
8331: LD_INT 57
8333: PUSH
8334: LD_INT 58
8336: PUSH
8337: LD_INT 44
8339: PUSH
8340: LD_INT 32
8342: PUSH
8343: LD_INT 27
8345: PUSH
8346: LD_INT 23
8348: PUSH
8349: LD_INT 33
8351: PUSH
8352: LD_INT 59
8354: PUSH
8355: LD_INT 54
8357: PUSH
8358: LD_INT 55
8360: PUSH
8361: LD_INT 56
8363: PUSH
8364: LD_INT 63
8366: PUSH
8367: LD_INT 64
8369: PUSH
8370: LD_INT 65
8372: PUSH
8373: LD_INT 30
8375: PUSH
8376: LD_INT 31
8378: PUSH
8379: LD_INT 21
8381: PUSH
8382: LD_INT 22
8384: PUSH
8385: LD_INT 25
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8422: LD_ADDR_VAR 0 5
8426: PUSH
8427: DOUBLE
8428: LD_INT 1
8430: DEC
8431: ST_TO_ADDR
8432: LD_VAR 0 8
8436: PUSH
8437: FOR_TO
8438: IFFALSE 8514
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8440: LD_VAR 0 8
8444: PUSH
8445: LD_VAR 0 5
8449: ARRAY
8450: PPUSH
8451: LD_VAR 0 1
8455: PPUSH
8456: CALL_OW 321
8460: PUSH
8461: LD_INT 1
8463: EQUAL
8464: PUSH
8465: LD_VAR 0 8
8469: PUSH
8470: LD_VAR 0 5
8474: ARRAY
8475: PPUSH
8476: LD_VAR 0 3
8480: PPUSH
8481: CALL_OW 482
8485: PUSH
8486: LD_INT 1
8488: EQUAL
8489: AND
8490: IFFALSE 8512
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8492: LD_VAR 0 2
8496: PPUSH
8497: LD_VAR 0 8
8501: PUSH
8502: LD_VAR 0 5
8506: ARRAY
8507: PPUSH
8508: CALL_OW 184
8512: GO 8437
8514: POP
8515: POP
// end ;
8516: LD_VAR 0 4
8520: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8521: LD_INT 0
8523: PPUSH
8524: PPUSH
8525: PPUSH
8526: PPUSH
8527: PPUSH
8528: PPUSH
8529: PPUSH
8530: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8531: LD_ADDR_VAR 0 6
8535: PUSH
8536: LD_VAR 0 2
8540: PPUSH
8541: LD_INT 22
8543: PUSH
8544: LD_VAR 0 1
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: LD_INT 56
8555: PUSH
8556: EMPTY
8557: LIST
8558: PUSH
8559: LD_INT 24
8561: PUSH
8562: LD_INT 700
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PUSH
8569: LD_INT 3
8571: PUSH
8572: LD_INT 60
8574: PUSH
8575: EMPTY
8576: LIST
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: PUSH
8582: LD_INT 2
8584: PUSH
8585: LD_INT 25
8587: PUSH
8588: LD_INT 1
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: LD_INT 25
8597: PUSH
8598: LD_INT 5
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: LD_INT 25
8607: PUSH
8608: LD_INT 8
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PUSH
8615: LD_INT 25
8617: PUSH
8618: LD_INT 9
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: PPUSH
8639: CALL_OW 70
8643: PUSH
8644: LD_EXP 24
8648: PUSH
8649: EMPTY
8650: LIST
8651: DIFF
8652: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8653: LD_ADDR_VAR 0 7
8657: PUSH
8658: LD_VAR 0 2
8662: PPUSH
8663: LD_INT 22
8665: PUSH
8666: LD_VAR 0 1
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: LD_INT 30
8677: PUSH
8678: LD_INT 32
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: PUSH
8685: LD_INT 58
8687: PUSH
8688: EMPTY
8689: LIST
8690: PUSH
8691: LD_INT 24
8693: PUSH
8694: LD_INT 251
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: PPUSH
8707: CALL_OW 70
8711: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8712: LD_ADDR_VAR 0 9
8716: PUSH
8717: LD_VAR 0 2
8721: PPUSH
8722: LD_INT 22
8724: PUSH
8725: LD_VAR 0 1
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PUSH
8734: LD_INT 2
8736: PUSH
8737: LD_INT 30
8739: PUSH
8740: LD_INT 4
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: PUSH
8747: LD_INT 30
8749: PUSH
8750: LD_INT 5
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 24
8764: PUSH
8765: LD_INT 251
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: LIST
8776: PPUSH
8777: CALL_OW 70
8781: ST_TO_ADDR
// if barrackList > 0 then
8782: LD_VAR 0 9
8786: PUSH
8787: LD_INT 0
8789: GREATER
8790: IFFALSE 8938
// begin if turretList = 0 then
8792: LD_VAR 0 7
8796: PUSH
8797: LD_INT 0
8799: EQUAL
8800: IFFALSE 8842
// begin if soldiers_list > 0 then
8802: LD_VAR 0 6
8806: PUSH
8807: LD_INT 0
8809: GREATER
8810: IFFALSE 8840
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8812: LD_VAR 0 6
8816: PPUSH
8817: LD_VAR 0 9
8821: PUSH
8822: LD_INT 1
8824: PPUSH
8825: LD_VAR 0 9
8829: PPUSH
8830: CALL_OW 12
8834: ARRAY
8835: PPUSH
8836: CALL_OW 120
// end else
8840: GO 8938
// begin for i in barrackList do
8842: LD_ADDR_VAR 0 4
8846: PUSH
8847: LD_VAR 0 9
8851: PUSH
8852: FOR_IN
8853: IFFALSE 8936
// begin insideUnits = UnitsInside ( i ) ;
8855: LD_ADDR_VAR 0 10
8859: PUSH
8860: LD_VAR 0 4
8864: PPUSH
8865: CALL_OW 313
8869: ST_TO_ADDR
// if insideUnits > 0 then
8870: LD_VAR 0 10
8874: PUSH
8875: LD_INT 0
8877: GREATER
8878: IFFALSE 8902
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8880: LD_VAR 0 10
8884: PUSH
8885: LD_INT 1
8887: ARRAY
8888: PPUSH
8889: LD_VAR 0 7
8893: PUSH
8894: LD_INT 1
8896: ARRAY
8897: PPUSH
8898: CALL_OW 120
// if soldiers_list > 0 then
8902: LD_VAR 0 6
8906: PUSH
8907: LD_INT 0
8909: GREATER
8910: IFFALSE 8934
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8912: LD_VAR 0 6
8916: PUSH
8917: LD_INT 1
8919: ARRAY
8920: PPUSH
8921: LD_VAR 0 7
8925: PUSH
8926: LD_INT 1
8928: ARRAY
8929: PPUSH
8930: CALL_OW 120
// end ;
8934: GO 8852
8936: POP
8937: POP
// end ; end ; end ;
8938: LD_VAR 0 3
8942: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8943: LD_INT 0
8945: PPUSH
8946: PPUSH
8947: PPUSH
8948: PPUSH
8949: PPUSH
8950: PPUSH
// for i = 1 to vehCount do
8951: LD_ADDR_VAR 0 8
8955: PUSH
8956: DOUBLE
8957: LD_INT 1
8959: DEC
8960: ST_TO_ADDR
8961: LD_VAR 0 6
8965: PUSH
8966: FOR_TO
8967: IFFALSE 9174
// begin uc_side = side ;
8969: LD_ADDR_OWVAR 20
8973: PUSH
8974: LD_VAR 0 1
8978: ST_TO_ADDR
// uc_nation = nation ;
8979: LD_ADDR_OWVAR 21
8983: PUSH
8984: LD_VAR 0 3
8988: ST_TO_ADDR
// vc_Chassis = 22 ;
8989: LD_ADDR_OWVAR 37
8993: PUSH
8994: LD_INT 22
8996: ST_TO_ADDR
// vc_engine = 1 ;
8997: LD_ADDR_OWVAR 39
9001: PUSH
9002: LD_INT 1
9004: ST_TO_ADDR
// vc_control = 1 ;
9005: LD_ADDR_OWVAR 38
9009: PUSH
9010: LD_INT 1
9012: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
9013: LD_ADDR_OWVAR 40
9017: PUSH
9018: LD_INT 43
9020: PUSH
9021: LD_INT 44
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: LD_INT 1
9030: PPUSH
9031: LD_INT 2
9033: PPUSH
9034: CALL_OW 12
9038: ARRAY
9039: ST_TO_ADDR
// veh = CreateVehicle ;
9040: LD_ADDR_VAR 0 12
9044: PUSH
9045: CALL_OW 45
9049: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9050: LD_VAR 0 12
9054: PPUSH
9055: LD_VAR 0 2
9059: PPUSH
9060: LD_INT 0
9062: PPUSH
9063: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9067: LD_ADDR_EXP 32
9071: PUSH
9072: LD_EXP 32
9076: PUSH
9077: LD_VAR 0 12
9081: ADD
9082: ST_TO_ADDR
// hc_class = 3 ;
9083: LD_ADDR_OWVAR 28
9087: PUSH
9088: LD_INT 3
9090: ST_TO_ADDR
// hc_name =  ;
9091: LD_ADDR_OWVAR 26
9095: PUSH
9096: LD_STRING 
9098: ST_TO_ADDR
// hc_gallery =  ;
9099: LD_ADDR_OWVAR 33
9103: PUSH
9104: LD_STRING 
9106: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9107: LD_INT 0
9109: PPUSH
9110: LD_INT 3
9112: PPUSH
9113: LD_EXP 25
9117: PPUSH
9118: LD_EXP 26
9122: PPUSH
9123: CALL_OW 12
9127: PPUSH
9128: CALL_OW 380
// un = CreateHuman ;
9132: LD_ADDR_VAR 0 10
9136: PUSH
9137: CALL_OW 44
9141: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9142: LD_VAR 0 10
9146: PPUSH
9147: LD_VAR 0 12
9151: PPUSH
9152: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9156: LD_ADDR_EXP 32
9160: PUSH
9161: LD_EXP 32
9165: PUSH
9166: LD_VAR 0 10
9170: ADD
9171: ST_TO_ADDR
// end ;
9172: GO 8966
9174: POP
9175: POP
// end ;
9176: LD_VAR 0 7
9180: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9181: LD_INT 0
9183: PPUSH
9184: PPUSH
9185: PPUSH
9186: PPUSH
9187: PPUSH
9188: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9189: LD_VAR 0 2
9193: PPUSH
9194: LD_INT 22
9196: PUSH
9197: LD_VAR 0 1
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PUSH
9206: EMPTY
9207: LIST
9208: PPUSH
9209: CALL_OW 70
9213: PUSH
9214: LD_INT 0
9216: EQUAL
9217: PUSH
9218: LD_EXP 32
9222: AND
9223: IFFALSE 9510
// begin for i in defenders_list do
9225: LD_ADDR_VAR 0 4
9229: PUSH
9230: LD_EXP 32
9234: PUSH
9235: FOR_IN
9236: IFFALSE 9508
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9238: LD_VAR 0 4
9242: PPUSH
9243: LD_INT 63
9245: PPUSH
9246: LD_INT 75
9248: PPUSH
9249: CALL_OW 297
9253: PUSH
9254: LD_INT 8
9256: GREATER
9257: PUSH
9258: LD_VAR 0 4
9262: PPUSH
9263: CALL_OW 314
9267: NOT
9268: AND
9269: IFFALSE 9288
// ComMoveXY ( i , 63 , 75 ) else
9271: LD_VAR 0 4
9275: PPUSH
9276: LD_INT 63
9278: PPUSH
9279: LD_INT 75
9281: PPUSH
9282: CALL_OW 111
9286: GO 9506
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9288: LD_VAR 0 4
9292: PPUSH
9293: CALL_OW 257
9297: PUSH
9298: LD_INT 3
9300: EQUAL
9301: PUSH
9302: LD_VAR 0 4
9306: PPUSH
9307: CALL_OW 310
9311: NOT
9312: AND
9313: PUSH
9314: LD_VAR 0 4
9318: PPUSH
9319: CALL_OW 314
9323: NOT
9324: AND
9325: IFFALSE 9378
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9327: LD_VAR 0 4
9331: PPUSH
9332: LD_EXP 32
9336: PPUSH
9337: LD_INT 58
9339: PUSH
9340: EMPTY
9341: LIST
9342: PUSH
9343: LD_INT 24
9345: PUSH
9346: LD_INT 1000
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: PPUSH
9357: CALL_OW 72
9361: PPUSH
9362: LD_VAR 0 4
9366: PPUSH
9367: CALL_OW 74
9371: PPUSH
9372: CALL_OW 120
9376: GO 9506
// if GetFuel ( i ) < 100 then
9378: LD_VAR 0 4
9382: PPUSH
9383: CALL_OW 261
9387: PUSH
9388: LD_INT 100
9390: LESS
9391: IFFALSE 9407
// SetFuel ( defenders_list , 100 ) else
9393: LD_EXP 32
9397: PPUSH
9398: LD_INT 100
9400: PPUSH
9401: CALL_OW 240
9405: GO 9506
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9407: LD_VAR 0 4
9411: PPUSH
9412: CALL_OW 263
9416: PUSH
9417: LD_INT 1
9419: EQUAL
9420: PUSH
9421: LD_VAR 0 4
9425: PPUSH
9426: CALL_OW 256
9430: PUSH
9431: LD_INT 990
9433: LESS
9434: AND
9435: IFFALSE 9506
// begin veh := i ;
9437: LD_ADDR_VAR 0 7
9441: PUSH
9442: LD_VAR 0 4
9446: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9447: LD_ADDR_VAR 0 8
9451: PUSH
9452: LD_VAR 0 4
9456: PPUSH
9457: CALL_OW 311
9461: ST_TO_ADDR
// if veh then
9462: LD_VAR 0 7
9466: IFFALSE 9506
// begin ComMoveXY ( i , 63 , 75 ) ;
9468: LD_VAR 0 4
9472: PPUSH
9473: LD_INT 63
9475: PPUSH
9476: LD_INT 75
9478: PPUSH
9479: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9483: LD_VAR 0 7
9487: PPUSH
9488: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9492: LD_VAR 0 8
9496: PPUSH
9497: LD_VAR 0 7
9501: PPUSH
9502: CALL_OW 189
// end ; end ; end ;
9506: GO 9235
9508: POP
9509: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9510: LD_ADDR_VAR 0 6
9514: PUSH
9515: LD_VAR 0 2
9519: PPUSH
9520: LD_INT 22
9522: PUSH
9523: LD_VAR 0 1
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: PUSH
9532: EMPTY
9533: LIST
9534: PPUSH
9535: CALL_OW 70
9539: ST_TO_ADDR
// if tmp and defenders_list then
9540: LD_VAR 0 6
9544: PUSH
9545: LD_EXP 32
9549: AND
9550: IFFALSE 9719
// for i in defenders_list do
9552: LD_ADDR_VAR 0 4
9556: PUSH
9557: LD_EXP 32
9561: PUSH
9562: FOR_IN
9563: IFFALSE 9717
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9565: LD_VAR 0 4
9569: PPUSH
9570: CALL_OW 257
9574: PUSH
9575: LD_INT 3
9577: EQUAL
9578: PUSH
9579: LD_VAR 0 4
9583: PPUSH
9584: CALL_OW 310
9588: NOT
9589: AND
9590: IFFALSE 9629
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9592: LD_VAR 0 4
9596: PPUSH
9597: LD_EXP 32
9601: PPUSH
9602: LD_INT 58
9604: PUSH
9605: EMPTY
9606: LIST
9607: PPUSH
9608: CALL_OW 72
9612: PPUSH
9613: LD_VAR 0 4
9617: PPUSH
9618: CALL_OW 74
9622: PPUSH
9623: CALL_OW 120
9627: GO 9715
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9629: LD_VAR 0 4
9633: PPUSH
9634: CALL_OW 314
9638: NOT
9639: PUSH
9640: LD_VAR 0 4
9644: PPUSH
9645: LD_VAR 0 2
9649: PPUSH
9650: CALL_OW 308
9654: AND
9655: IFFALSE 9683
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9657: LD_VAR 0 4
9661: PPUSH
9662: LD_VAR 0 6
9666: PPUSH
9667: LD_VAR 0 4
9671: PPUSH
9672: CALL_OW 74
9676: PPUSH
9677: CALL_OW 115
9681: GO 9715
// if not IsInArea ( i , defenseArea ) then
9683: LD_VAR 0 4
9687: PPUSH
9688: LD_VAR 0 2
9692: PPUSH
9693: CALL_OW 308
9697: NOT
9698: IFFALSE 9715
// ComMoveXY ( i , 63 , 75 ) ;
9700: LD_VAR 0 4
9704: PPUSH
9705: LD_INT 63
9707: PPUSH
9708: LD_INT 75
9710: PPUSH
9711: CALL_OW 111
// end ;
9715: GO 9562
9717: POP
9718: POP
// end ;
9719: LD_VAR 0 3
9723: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9724: LD_INT 0
9726: PPUSH
9727: PPUSH
9728: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9729: LD_INT 22
9731: PUSH
9732: LD_VAR 0 1
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: LD_INT 21
9743: PUSH
9744: LD_INT 2
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: PPUSH
9755: CALL_OW 69
9759: PUSH
9760: LD_VAR 0 3
9764: LESSEQUAL
9765: IFFALSE 9873
// begin for i = 1 to vehCount do
9767: LD_ADDR_VAR 0 9
9771: PUSH
9772: DOUBLE
9773: LD_INT 1
9775: DEC
9776: ST_TO_ADDR
9777: LD_VAR 0 3
9781: PUSH
9782: FOR_TO
9783: IFFALSE 9871
// begin weapon = weaponTab [ i ] ;
9785: LD_ADDR_VAR 0 10
9789: PUSH
9790: LD_VAR 0 4
9794: PUSH
9795: LD_VAR 0 9
9799: ARRAY
9800: ST_TO_ADDR
// if weapon = 46 then
9801: LD_VAR 0 10
9805: PUSH
9806: LD_INT 46
9808: EQUAL
9809: IFFALSE 9840
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9811: LD_VAR 0 2
9815: PPUSH
9816: LD_INT 24
9818: PPUSH
9819: LD_VAR 0 5
9823: PPUSH
9824: LD_VAR 0 6
9828: PPUSH
9829: LD_VAR 0 10
9833: PPUSH
9834: CALL_OW 185
// end else
9838: GO 9869
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9840: LD_VAR 0 2
9844: PPUSH
9845: LD_VAR 0 7
9849: PPUSH
9850: LD_VAR 0 5
9854: PPUSH
9855: LD_VAR 0 6
9859: PPUSH
9860: LD_VAR 0 10
9864: PPUSH
9865: CALL_OW 185
// end ; end ;
9869: GO 9782
9871: POP
9872: POP
// end ; end ;
9873: LD_VAR 0 8
9877: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9878: LD_INT 0
9880: PPUSH
9881: PPUSH
9882: PPUSH
9883: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9884: LD_ADDR_VAR 0 8
9888: PUSH
9889: LD_INT 22
9891: PUSH
9892: LD_VAR 0 1
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 21
9903: PUSH
9904: LD_INT 2
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: LD_INT 3
9913: PUSH
9914: LD_INT 24
9916: PUSH
9917: LD_INT 650
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: LIST
9932: PPUSH
9933: CALL_OW 69
9937: ST_TO_ADDR
// if damageVehicles > 0 then
9938: LD_VAR 0 8
9942: PUSH
9943: LD_INT 0
9945: GREATER
9946: IFFALSE 9967
// ComMoveXY ( damageVehicles , repX , repY ) ;
9948: LD_VAR 0 8
9952: PPUSH
9953: LD_VAR 0 3
9957: PPUSH
9958: LD_VAR 0 4
9962: PPUSH
9963: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9967: LD_VAR 0 8
9971: PPUSH
9972: LD_INT 95
9974: PUSH
9975: LD_VAR 0 2
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: PUSH
9984: LD_INT 3
9986: PUSH
9987: LD_INT 58
9989: PUSH
9990: EMPTY
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: PPUSH
10001: CALL_OW 72
10005: PUSH
10006: LD_INT 0
10008: GREATER
10009: IFFALSE 10076
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
10011: LD_ADDR_VAR 0 6
10015: PUSH
10016: LD_VAR 0 8
10020: PPUSH
10021: LD_INT 95
10023: PUSH
10024: LD_VAR 0 2
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: LD_INT 3
10035: PUSH
10036: LD_INT 58
10038: PUSH
10039: EMPTY
10040: LIST
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PPUSH
10050: CALL_OW 72
10054: PUSH
10055: FOR_IN
10056: IFFALSE 10074
// ComExitVehicle ( UnitsInside ( i ) ) ;
10058: LD_VAR 0 6
10062: PPUSH
10063: CALL_OW 313
10067: PPUSH
10068: CALL_OW 121
10072: GO 10055
10074: POP
10075: POP
// end ;
10076: LD_VAR 0 5
10080: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10081: LD_INT 0
10083: PPUSH
10084: PPUSH
10085: PPUSH
10086: PPUSH
10087: PPUSH
10088: PPUSH
10089: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10090: LD_ADDR_VAR 0 8
10094: PUSH
10095: LD_INT 22
10097: PUSH
10098: LD_VAR 0 1
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: PUSH
10107: LD_INT 21
10109: PUSH
10110: LD_INT 2
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: LD_INT 24
10119: PUSH
10120: LD_INT 250
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: LD_INT 3
10129: PUSH
10130: LD_INT 58
10132: PUSH
10133: EMPTY
10134: LIST
10135: PUSH
10136: LD_INT 2
10138: PUSH
10139: LD_INT 34
10141: PUSH
10142: LD_INT 43
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 34
10151: PUSH
10152: LD_INT 44
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 34
10161: PUSH
10162: LD_INT 46
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: LIST
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: PPUSH
10186: CALL_OW 69
10190: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
10191: LD_INT 22
10193: PUSH
10194: LD_VAR 0 1
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PUSH
10203: LD_INT 21
10205: PUSH
10206: LD_INT 2
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PUSH
10213: LD_INT 24
10215: PUSH
10216: LD_INT 1000
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: LD_INT 3
10225: PUSH
10226: LD_INT 58
10228: PUSH
10229: EMPTY
10230: LIST
10231: PUSH
10232: LD_INT 2
10234: PUSH
10235: LD_INT 34
10237: PUSH
10238: LD_INT 43
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 34
10247: PUSH
10248: LD_INT 44
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: LD_INT 34
10257: PUSH
10258: LD_INT 46
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: LIST
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: PPUSH
10282: CALL_OW 69
10286: PUSH
10287: LD_INT 5
10289: PUSH
10290: LD_INT 6
10292: PUSH
10293: LD_INT 7
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: LIST
10300: PUSH
10301: LD_OWVAR 67
10305: ARRAY
10306: GREATEREQUAL
10307: IFFALSE 10872
// repeat wait ( 0 0$1 ) ;
10309: LD_INT 35
10311: PPUSH
10312: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10316: LD_ADDR_VAR 0 8
10320: PUSH
10321: LD_INT 22
10323: PUSH
10324: LD_VAR 0 1
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: PUSH
10333: LD_INT 21
10335: PUSH
10336: LD_INT 2
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: LD_INT 24
10345: PUSH
10346: LD_INT 250
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: LD_INT 2
10355: PUSH
10356: LD_INT 34
10358: PUSH
10359: LD_INT 43
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 34
10368: PUSH
10369: LD_INT 44
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 34
10378: PUSH
10379: LD_INT 46
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: PUSH
10392: LD_INT 3
10394: PUSH
10395: LD_INT 58
10397: PUSH
10398: EMPTY
10399: LIST
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: PPUSH
10412: CALL_OW 69
10416: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10417: LD_INT 22
10419: PUSH
10420: LD_VAR 0 1
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 95
10431: PUSH
10432: LD_VAR 0 2
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PPUSH
10445: CALL_OW 69
10449: NOT
10450: PUSH
10451: LD_VAR 0 11
10455: PUSH
10456: LD_INT 0
10458: EQUAL
10459: AND
10460: IFFALSE 10515
// for i := 1 to wayX do
10462: LD_ADDR_VAR 0 6
10466: PUSH
10467: DOUBLE
10468: LD_INT 1
10470: DEC
10471: ST_TO_ADDR
10472: LD_VAR 0 3
10476: PUSH
10477: FOR_TO
10478: IFFALSE 10513
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10480: LD_VAR 0 8
10484: PPUSH
10485: LD_VAR 0 3
10489: PUSH
10490: LD_VAR 0 6
10494: ARRAY
10495: PPUSH
10496: LD_VAR 0 4
10500: PUSH
10501: LD_VAR 0 6
10505: ARRAY
10506: PPUSH
10507: CALL_OW 114
10511: GO 10477
10513: POP
10514: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10515: LD_INT 22
10517: PUSH
10518: LD_VAR 0 1
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: LD_INT 95
10529: PUSH
10530: LD_VAR 0 2
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PPUSH
10543: CALL_OW 69
10547: IFFALSE 10771
// begin seeEnemy = 1 ;
10549: LD_ADDR_VAR 0 11
10553: PUSH
10554: LD_INT 1
10556: ST_TO_ADDR
// for j in vehiclesOK do
10557: LD_ADDR_VAR 0 7
10561: PUSH
10562: LD_VAR 0 8
10566: PUSH
10567: FOR_IN
10568: IFFALSE 10769
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10570: LD_ADDR_VAR 0 9
10574: PUSH
10575: LD_INT 81
10577: PUSH
10578: LD_VAR 0 1
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: PUSH
10587: LD_INT 101
10589: PUSH
10590: LD_INT 1
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PPUSH
10601: CALL_OW 69
10605: PPUSH
10606: LD_VAR 0 7
10610: PPUSH
10611: CALL_OW 74
10615: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10616: LD_ADDR_VAR 0 10
10620: PUSH
10621: LD_INT 81
10623: PUSH
10624: LD_VAR 0 1
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: PUSH
10633: LD_INT 101
10635: PUSH
10636: LD_INT 1
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PUSH
10643: LD_INT 2
10645: PUSH
10646: LD_INT 59
10648: PUSH
10649: EMPTY
10650: LIST
10651: PUSH
10652: LD_INT 21
10654: PUSH
10655: LD_INT 1
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: LD_INT 21
10664: PUSH
10665: LD_INT 2
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: PUSH
10683: EMPTY
10684: LIST
10685: PPUSH
10686: CALL_OW 69
10690: PPUSH
10691: LD_VAR 0 7
10695: PPUSH
10696: CALL_OW 74
10700: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10701: LD_VAR 0 7
10705: PPUSH
10706: LD_VAR 0 9
10710: PPUSH
10711: CALL_OW 296
10715: PUSH
10716: LD_INT 8
10718: PLUS
10719: PUSH
10720: LD_VAR 0 7
10724: PPUSH
10725: LD_VAR 0 10
10729: PPUSH
10730: CALL_OW 296
10734: LESS
10735: IFFALSE 10753
// ComAttackUnit ( j , target1 ) else
10737: LD_VAR 0 7
10741: PPUSH
10742: LD_VAR 0 9
10746: PPUSH
10747: CALL_OW 115
10751: GO 10767
// ComAttackUnit ( j , target2 ) ;
10753: LD_VAR 0 7
10757: PPUSH
10758: LD_VAR 0 10
10762: PPUSH
10763: CALL_OW 115
// end ;
10767: GO 10567
10769: POP
10770: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10771: LD_INT 22
10773: PUSH
10774: LD_VAR 0 1
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 21
10785: PUSH
10786: LD_INT 2
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PUSH
10793: LD_INT 24
10795: PUSH
10796: LD_INT 250
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: LD_INT 2
10805: PUSH
10806: LD_INT 34
10808: PUSH
10809: LD_INT 43
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 34
10818: PUSH
10819: LD_INT 44
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: LD_INT 34
10828: PUSH
10829: LD_INT 46
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 3
10844: PUSH
10845: LD_INT 58
10847: PUSH
10848: EMPTY
10849: LIST
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: PPUSH
10862: CALL_OW 69
10866: PUSH
10867: LD_INT 0
10869: EQUAL
10870: IFFALSE 10309
// seeEnemy = 0 ;
10872: LD_ADDR_VAR 0 11
10876: PUSH
10877: LD_INT 0
10879: ST_TO_ADDR
// end ;
10880: LD_VAR 0 5
10884: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10885: LD_INT 0
10887: PPUSH
10888: PPUSH
10889: PPUSH
10890: PPUSH
10891: PPUSH
10892: PPUSH
// repeat wait ( 0 0$1 ) ;
10893: LD_INT 35
10895: PPUSH
10896: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10900: LD_ADDR_VAR 0 7
10904: PUSH
10905: LD_INT 22
10907: PUSH
10908: LD_VAR 0 1
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 21
10919: PUSH
10920: LD_INT 2
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: LD_INT 24
10929: PUSH
10930: LD_INT 651
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: LIST
10941: PPUSH
10942: CALL_OW 69
10946: ST_TO_ADDR
// for j in vehiclesOK do
10947: LD_ADDR_VAR 0 4
10951: PUSH
10952: LD_VAR 0 7
10956: PUSH
10957: FOR_IN
10958: IFFALSE 11159
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10960: LD_ADDR_VAR 0 5
10964: PUSH
10965: LD_INT 81
10967: PUSH
10968: LD_VAR 0 1
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: LD_INT 101
10979: PUSH
10980: LD_INT 1
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PPUSH
10991: CALL_OW 69
10995: PPUSH
10996: LD_VAR 0 4
11000: PPUSH
11001: CALL_OW 74
11005: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
11006: LD_ADDR_VAR 0 6
11010: PUSH
11011: LD_INT 81
11013: PUSH
11014: LD_VAR 0 1
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: LD_INT 101
11025: PUSH
11026: LD_INT 1
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PUSH
11033: LD_INT 2
11035: PUSH
11036: LD_INT 59
11038: PUSH
11039: EMPTY
11040: LIST
11041: PUSH
11042: LD_INT 21
11044: PUSH
11045: LD_INT 1
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 21
11054: PUSH
11055: LD_INT 2
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: LIST
11072: PUSH
11073: EMPTY
11074: LIST
11075: PPUSH
11076: CALL_OW 69
11080: PPUSH
11081: LD_VAR 0 4
11085: PPUSH
11086: CALL_OW 74
11090: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11091: LD_VAR 0 4
11095: PPUSH
11096: LD_VAR 0 5
11100: PPUSH
11101: CALL_OW 296
11105: PUSH
11106: LD_INT 8
11108: PLUS
11109: PUSH
11110: LD_VAR 0 4
11114: PPUSH
11115: LD_VAR 0 6
11119: PPUSH
11120: CALL_OW 296
11124: LESS
11125: IFFALSE 11143
// ComAttackUnit ( j , target1 ) else
11127: LD_VAR 0 4
11131: PPUSH
11132: LD_VAR 0 5
11136: PPUSH
11137: CALL_OW 115
11141: GO 11157
// ComAttackUnit ( j , target2 ) ;
11143: LD_VAR 0 4
11147: PPUSH
11148: LD_VAR 0 6
11152: PPUSH
11153: CALL_OW 115
// end ;
11157: GO 10957
11159: POP
11160: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11161: LD_INT 22
11163: PUSH
11164: LD_VAR 0 1
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PUSH
11173: LD_INT 21
11175: PUSH
11176: LD_INT 2
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: LD_INT 24
11185: PUSH
11186: LD_INT 250
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: LIST
11197: PPUSH
11198: CALL_OW 69
11202: PUSH
11203: LD_INT 0
11205: EQUAL
11206: IFFALSE 10893
// end ;
11208: LD_VAR 0 2
11212: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11213: LD_INT 0
11215: PPUSH
11216: PPUSH
11217: PPUSH
11218: PPUSH
11219: PPUSH
11220: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11221: LD_ADDR_VAR 0 8
11225: PUSH
11226: LD_VAR 0 2
11230: PPUSH
11231: CALL_OW 313
11235: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11236: LD_ADDR_VAR 0 9
11240: PUSH
11241: LD_VAR 0 3
11245: PPUSH
11246: LD_INT 22
11248: PUSH
11249: LD_VAR 0 1
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 25
11260: PUSH
11261: LD_INT 2
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: LD_INT 24
11270: PUSH
11271: LD_INT 750
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 3
11280: PUSH
11281: LD_INT 54
11283: PUSH
11284: EMPTY
11285: LIST
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: PPUSH
11297: CALL_OW 70
11301: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11302: LD_ADDR_VAR 0 6
11306: PUSH
11307: LD_VAR 0 3
11311: PPUSH
11312: LD_INT 22
11314: PUSH
11315: LD_VAR 0 1
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PUSH
11324: LD_INT 21
11326: PUSH
11327: LD_INT 3
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PUSH
11334: LD_INT 3
11336: PUSH
11337: LD_INT 24
11339: PUSH
11340: LD_INT 1000
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: LIST
11355: PUSH
11356: EMPTY
11357: LIST
11358: PPUSH
11359: CALL_OW 70
11363: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11364: LD_VAR 0 6
11368: NOT
11369: PUSH
11370: LD_INT 22
11372: PUSH
11373: LD_VAR 0 1
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: LD_INT 25
11384: PUSH
11385: LD_INT 2
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 24
11394: PUSH
11395: LD_INT 250
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: LIST
11406: PPUSH
11407: CALL_OW 69
11411: NOT
11412: AND
11413: IFFALSE 11417
// exit ;
11415: GO 11614
// if buildings_list > 0 and engineerOkInside then
11417: LD_VAR 0 6
11421: PUSH
11422: LD_INT 0
11424: GREATER
11425: PUSH
11426: LD_VAR 0 8
11430: AND
11431: IFFALSE 11457
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11433: LD_VAR 0 8
11437: PPUSH
11438: LD_INT 25
11440: PUSH
11441: LD_INT 2
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PPUSH
11448: CALL_OW 72
11452: PPUSH
11453: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11457: LD_VAR 0 6
11461: PUSH
11462: LD_INT 0
11464: GREATER
11465: PUSH
11466: LD_VAR 0 9
11470: PUSH
11471: LD_INT 0
11473: GREATER
11474: AND
11475: IFFALSE 11495
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11477: LD_VAR 0 9
11481: PPUSH
11482: LD_VAR 0 6
11486: PUSH
11487: LD_INT 1
11489: ARRAY
11490: PPUSH
11491: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11495: LD_VAR 0 6
11499: PUSH
11500: LD_INT 0
11502: EQUAL
11503: PUSH
11504: LD_VAR 0 4
11508: PUSH
11509: LD_INT 0
11511: EQUAL
11512: AND
11513: PUSH
11514: LD_VAR 0 9
11518: PUSH
11519: LD_INT 0
11521: GREATER
11522: AND
11523: IFFALSE 11539
// ComEnterUnit ( engineerOkOutside , building ) ;
11525: LD_VAR 0 9
11529: PPUSH
11530: LD_VAR 0 2
11534: PPUSH
11535: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11539: LD_VAR 0 9
11543: PUSH
11544: LD_INT 0
11546: GREATER
11547: PUSH
11548: LD_VAR 0 6
11552: PUSH
11553: LD_INT 0
11555: EQUAL
11556: AND
11557: PUSH
11558: LD_VAR 0 4
11562: PUSH
11563: LD_INT 0
11565: GREATER
11566: AND
11567: IFFALSE 11614
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11569: LD_VAR 0 9
11573: PPUSH
11574: LD_VAR 0 4
11578: PUSH
11579: LD_INT 1
11581: ARRAY
11582: PPUSH
11583: LD_VAR 0 4
11587: PUSH
11588: LD_INT 2
11590: ARRAY
11591: PPUSH
11592: LD_VAR 0 4
11596: PUSH
11597: LD_INT 3
11599: ARRAY
11600: PPUSH
11601: LD_VAR 0 4
11605: PUSH
11606: LD_INT 4
11608: ARRAY
11609: PPUSH
11610: CALL_OW 145
// end ;
11614: LD_VAR 0 5
11618: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11619: LD_INT 0
11621: PPUSH
11622: PPUSH
11623: PPUSH
11624: PPUSH
11625: PPUSH
11626: PPUSH
11627: PPUSH
11628: PPUSH
11629: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11630: LD_ADDR_VAR 0 6
11634: PUSH
11635: LD_INT 22
11637: PUSH
11638: LD_VAR 0 1
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PUSH
11647: LD_INT 25
11649: PUSH
11650: LD_INT 4
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 23
11659: PUSH
11660: LD_INT 2
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: LD_INT 24
11669: PUSH
11670: LD_INT 251
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: PPUSH
11683: CALL_OW 69
11687: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11688: LD_ADDR_VAR 0 7
11692: PUSH
11693: LD_VAR 0 3
11697: PPUSH
11698: LD_INT 22
11700: PUSH
11701: LD_VAR 0 1
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: PUSH
11710: LD_INT 23
11712: PUSH
11713: LD_INT 2
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 25
11722: PUSH
11723: LD_INT 4
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 50
11732: PUSH
11733: EMPTY
11734: LIST
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: PPUSH
11742: CALL_OW 70
11746: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11747: LD_ADDR_VAR 0 10
11751: PUSH
11752: LD_VAR 0 3
11756: PPUSH
11757: LD_INT 22
11759: PUSH
11760: LD_VAR 0 1
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: LD_INT 21
11771: PUSH
11772: LD_INT 1
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 3
11781: PUSH
11782: LD_INT 25
11784: PUSH
11785: LD_INT 3
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: LD_INT 3
11798: PUSH
11799: LD_INT 24
11801: PUSH
11802: LD_INT 750
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: PPUSH
11819: CALL_OW 70
11823: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11824: LD_ADDR_VAR 0 11
11828: PUSH
11829: LD_VAR 0 2
11833: PPUSH
11834: LD_INT 22
11836: PUSH
11837: LD_VAR 0 1
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: LD_INT 21
11848: PUSH
11849: LD_INT 1
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 3
11858: PUSH
11859: LD_INT 25
11861: PUSH
11862: LD_INT 3
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_INT 3
11875: PUSH
11876: LD_INT 24
11878: PUSH
11879: LD_INT 1000
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: PPUSH
11896: CALL_OW 70
11900: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11901: LD_VAR 0 10
11905: NOT
11906: PUSH
11907: LD_VAR 0 11
11911: NOT
11912: AND
11913: PUSH
11914: LD_VAR 0 6
11918: NOT
11919: AND
11920: IFFALSE 11924
// exit ;
11922: GO 12158
// if damageUnits > 0 and sci_list > 0 then
11924: LD_VAR 0 10
11928: PUSH
11929: LD_INT 0
11931: GREATER
11932: PUSH
11933: LD_VAR 0 6
11937: PUSH
11938: LD_INT 0
11940: GREATER
11941: AND
11942: IFFALSE 11958
// ComMoveToArea ( damageUnits , healArea ) ;
11944: LD_VAR 0 10
11948: PPUSH
11949: LD_VAR 0 2
11953: PPUSH
11954: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11958: LD_VAR 0 11
11962: PUSH
11963: LD_INT 0
11965: GREATER
11966: PUSH
11967: LD_VAR 0 6
11971: PUSH
11972: LD_INT 0
11974: GREATER
11975: AND
11976: IFFALSE 11987
// ComExitBuilding ( sci_list ) ;
11978: LD_VAR 0 6
11982: PPUSH
11983: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
11987: LD_VAR 0 11
11991: PUSH
11992: LD_INT 0
11994: GREATER
11995: PUSH
11996: LD_VAR 0 7
12000: PUSH
12001: LD_INT 0
12003: GREATER
12004: AND
12005: IFFALSE 12025
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
12007: LD_VAR 0 7
12011: PPUSH
12012: LD_VAR 0 11
12016: PUSH
12017: LD_INT 1
12019: ARRAY
12020: PPUSH
12021: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12025: LD_VAR 0 10
12029: PUSH
12030: LD_INT 0
12032: EQUAL
12033: PUSH
12034: LD_VAR 0 11
12038: PUSH
12039: LD_INT 0
12041: EQUAL
12042: AND
12043: PUSH
12044: LD_VAR 0 7
12048: PUSH
12049: LD_INT 0
12051: GREATER
12052: AND
12053: IFFALSE 12158
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12055: LD_ADDR_VAR 0 12
12059: PUSH
12060: LD_INT 22
12062: PUSH
12063: LD_VAR 0 1
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PUSH
12072: LD_INT 21
12074: PUSH
12075: LD_INT 3
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 30
12084: PUSH
12085: LD_INT 8
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: LIST
12096: PPUSH
12097: CALL_OW 69
12101: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12102: LD_ADDR_VAR 0 13
12106: PUSH
12107: LD_INT 1
12109: PPUSH
12110: LD_VAR 0 12
12114: PPUSH
12115: CALL_OW 12
12119: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12120: LD_VAR 0 7
12124: PPUSH
12125: LD_INT 3
12127: PUSH
12128: LD_INT 60
12130: PUSH
12131: EMPTY
12132: LIST
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PPUSH
12138: CALL_OW 72
12142: PPUSH
12143: LD_VAR 0 12
12147: PUSH
12148: LD_VAR 0 13
12152: ARRAY
12153: PPUSH
12154: CALL_OW 120
// end ; end ;
12158: LD_VAR 0 5
12162: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12163: LD_INT 0
12165: PPUSH
12166: PPUSH
12167: PPUSH
12168: PPUSH
12169: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12170: LD_ADDR_VAR 0 6
12174: PUSH
12175: LD_INT 22
12177: PUSH
12178: LD_VAR 0 1
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: LD_INT 2
12189: PUSH
12190: LD_INT 30
12192: PUSH
12193: LD_INT 31
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: LD_INT 30
12202: PUSH
12203: LD_INT 32
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 30
12212: PUSH
12213: LD_INT 33
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 30
12222: PUSH
12223: LD_INT 4
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 30
12232: PUSH
12233: LD_INT 5
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PPUSH
12252: CALL_OW 69
12256: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12257: LD_ADDR_VAR 0 7
12261: PUSH
12262: LD_INT 22
12264: PUSH
12265: LD_VAR 0 2
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 21
12276: PUSH
12277: LD_INT 3
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PUSH
12284: LD_INT 58
12286: PUSH
12287: EMPTY
12288: LIST
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: PPUSH
12295: CALL_OW 69
12299: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12300: LD_VAR 0 6
12304: PUSH
12305: LD_INT 0
12307: GREATER
12308: PUSH
12309: LD_VAR 0 7
12313: PUSH
12314: LD_INT 0
12316: GREATER
12317: AND
12318: IFFALSE 12388
// begin for i in turretsList do
12320: LD_ADDR_VAR 0 4
12324: PUSH
12325: LD_VAR 0 6
12329: PUSH
12330: FOR_IN
12331: IFFALSE 12386
// begin for j in enemyBuildings do
12333: LD_ADDR_VAR 0 5
12337: PUSH
12338: LD_VAR 0 7
12342: PUSH
12343: FOR_IN
12344: IFFALSE 12382
// begin if GetDistUnits ( i , j ) < 20 then
12346: LD_VAR 0 4
12350: PPUSH
12351: LD_VAR 0 5
12355: PPUSH
12356: CALL_OW 296
12360: PUSH
12361: LD_INT 20
12363: LESS
12364: IFFALSE 12380
// begin ComAttackUnit ( i , j ) ;
12366: LD_VAR 0 4
12370: PPUSH
12371: LD_VAR 0 5
12375: PPUSH
12376: CALL_OW 115
// end ; end ;
12380: GO 12343
12382: POP
12383: POP
// end ;
12384: GO 12330
12386: POP
12387: POP
// end ; end ;
12388: LD_VAR 0 3
12392: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12393: LD_INT 0
12395: PPUSH
12396: PPUSH
12397: PPUSH
12398: PPUSH
12399: PPUSH
12400: PPUSH
12401: PPUSH
12402: PPUSH
12403: PPUSH
12404: PPUSH
12405: PPUSH
// for i = 1 to medicCount do
12406: LD_ADDR_VAR 0 14
12410: PUSH
12411: DOUBLE
12412: LD_INT 1
12414: DEC
12415: ST_TO_ADDR
12416: LD_VAR 0 7
12420: PUSH
12421: FOR_TO
12422: IFFALSE 12504
// begin uc_side = side ;
12424: LD_ADDR_OWVAR 20
12428: PUSH
12429: LD_VAR 0 1
12433: ST_TO_ADDR
// uc_nation = nation ;
12434: LD_ADDR_OWVAR 21
12438: PUSH
12439: LD_VAR 0 2
12443: ST_TO_ADDR
// hc_name =  ;
12444: LD_ADDR_OWVAR 26
12448: PUSH
12449: LD_STRING 
12451: ST_TO_ADDR
// hc_gallery =  ;
12452: LD_ADDR_OWVAR 33
12456: PUSH
12457: LD_STRING 
12459: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12460: LD_INT 0
12462: PPUSH
12463: LD_INT 4
12465: PPUSH
12466: LD_VAR 0 8
12470: PPUSH
12471: CALL_OW 380
// un = CreateHuman ;
12475: LD_ADDR_VAR 0 16
12479: PUSH
12480: CALL_OW 44
12484: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12485: LD_VAR 0 16
12489: PPUSH
12490: LD_VAR 0 9
12494: PPUSH
12495: LD_INT 0
12497: PPUSH
12498: CALL_OW 49
// end ;
12502: GO 12421
12504: POP
12505: POP
// for i = 1 to soldierCount do
12506: LD_ADDR_VAR 0 14
12510: PUSH
12511: DOUBLE
12512: LD_INT 1
12514: DEC
12515: ST_TO_ADDR
12516: LD_VAR 0 3
12520: PUSH
12521: FOR_TO
12522: IFFALSE 12604
// begin uc_side = side ;
12524: LD_ADDR_OWVAR 20
12528: PUSH
12529: LD_VAR 0 1
12533: ST_TO_ADDR
// uc_nation = nation ;
12534: LD_ADDR_OWVAR 21
12538: PUSH
12539: LD_VAR 0 2
12543: ST_TO_ADDR
// hc_name =  ;
12544: LD_ADDR_OWVAR 26
12548: PUSH
12549: LD_STRING 
12551: ST_TO_ADDR
// hc_gallery =  ;
12552: LD_ADDR_OWVAR 33
12556: PUSH
12557: LD_STRING 
12559: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12560: LD_INT 0
12562: PPUSH
12563: LD_INT 1
12565: PPUSH
12566: LD_VAR 0 8
12570: PPUSH
12571: CALL_OW 380
// un = CreateHuman ;
12575: LD_ADDR_VAR 0 16
12579: PUSH
12580: CALL_OW 44
12584: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12585: LD_VAR 0 16
12589: PPUSH
12590: LD_VAR 0 9
12594: PPUSH
12595: LD_INT 0
12597: PPUSH
12598: CALL_OW 49
// end ;
12602: GO 12521
12604: POP
12605: POP
// for i = 1 to sniperCount do
12606: LD_ADDR_VAR 0 14
12610: PUSH
12611: DOUBLE
12612: LD_INT 1
12614: DEC
12615: ST_TO_ADDR
12616: LD_VAR 0 4
12620: PUSH
12621: FOR_TO
12622: IFFALSE 12704
// begin uc_side = side ;
12624: LD_ADDR_OWVAR 20
12628: PUSH
12629: LD_VAR 0 1
12633: ST_TO_ADDR
// uc_nation = nation ;
12634: LD_ADDR_OWVAR 21
12638: PUSH
12639: LD_VAR 0 2
12643: ST_TO_ADDR
// hc_name =  ;
12644: LD_ADDR_OWVAR 26
12648: PUSH
12649: LD_STRING 
12651: ST_TO_ADDR
// hc_gallery =  ;
12652: LD_ADDR_OWVAR 33
12656: PUSH
12657: LD_STRING 
12659: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12660: LD_INT 0
12662: PPUSH
12663: LD_INT 5
12665: PPUSH
12666: LD_VAR 0 8
12670: PPUSH
12671: CALL_OW 380
// un = CreateHuman ;
12675: LD_ADDR_VAR 0 16
12679: PUSH
12680: CALL_OW 44
12684: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12685: LD_VAR 0 16
12689: PPUSH
12690: LD_VAR 0 9
12694: PPUSH
12695: LD_INT 0
12697: PPUSH
12698: CALL_OW 49
// end ;
12702: GO 12621
12704: POP
12705: POP
// for i = 1 to bazookCount do
12706: LD_ADDR_VAR 0 14
12710: PUSH
12711: DOUBLE
12712: LD_INT 1
12714: DEC
12715: ST_TO_ADDR
12716: LD_VAR 0 5
12720: PUSH
12721: FOR_TO
12722: IFFALSE 12804
// begin uc_side = side ;
12724: LD_ADDR_OWVAR 20
12728: PUSH
12729: LD_VAR 0 1
12733: ST_TO_ADDR
// uc_nation = nation ;
12734: LD_ADDR_OWVAR 21
12738: PUSH
12739: LD_VAR 0 2
12743: ST_TO_ADDR
// hc_name =  ;
12744: LD_ADDR_OWVAR 26
12748: PUSH
12749: LD_STRING 
12751: ST_TO_ADDR
// hc_gallery =  ;
12752: LD_ADDR_OWVAR 33
12756: PUSH
12757: LD_STRING 
12759: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12760: LD_INT 0
12762: PPUSH
12763: LD_INT 9
12765: PPUSH
12766: LD_VAR 0 8
12770: PPUSH
12771: CALL_OW 380
// un = CreateHuman ;
12775: LD_ADDR_VAR 0 16
12779: PUSH
12780: CALL_OW 44
12784: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12785: LD_VAR 0 16
12789: PPUSH
12790: LD_VAR 0 9
12794: PPUSH
12795: LD_INT 0
12797: PPUSH
12798: CALL_OW 49
// end ;
12802: GO 12721
12804: POP
12805: POP
// for i = 1 to mortalCount do
12806: LD_ADDR_VAR 0 14
12810: PUSH
12811: DOUBLE
12812: LD_INT 1
12814: DEC
12815: ST_TO_ADDR
12816: LD_VAR 0 6
12820: PUSH
12821: FOR_TO
12822: IFFALSE 12904
// begin uc_side = side ;
12824: LD_ADDR_OWVAR 20
12828: PUSH
12829: LD_VAR 0 1
12833: ST_TO_ADDR
// uc_nation = nation ;
12834: LD_ADDR_OWVAR 21
12838: PUSH
12839: LD_VAR 0 2
12843: ST_TO_ADDR
// hc_name =  ;
12844: LD_ADDR_OWVAR 26
12848: PUSH
12849: LD_STRING 
12851: ST_TO_ADDR
// hc_gallery =  ;
12852: LD_ADDR_OWVAR 33
12856: PUSH
12857: LD_STRING 
12859: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12860: LD_INT 0
12862: PPUSH
12863: LD_INT 8
12865: PPUSH
12866: LD_VAR 0 8
12870: PPUSH
12871: CALL_OW 380
// un = CreateHuman ;
12875: LD_ADDR_VAR 0 16
12879: PUSH
12880: CALL_OW 44
12884: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12885: LD_VAR 0 16
12889: PPUSH
12890: LD_VAR 0 9
12894: PPUSH
12895: LD_INT 0
12897: PPUSH
12898: CALL_OW 49
// end ;
12902: GO 12821
12904: POP
12905: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12906: LD_ADDR_VAR 0 19
12910: PUSH
12911: LD_INT 22
12913: PUSH
12914: LD_VAR 0 1
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 2
12925: PUSH
12926: LD_INT 25
12928: PUSH
12929: LD_INT 1
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PUSH
12936: LD_INT 25
12938: PUSH
12939: LD_INT 5
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PUSH
12946: LD_INT 25
12948: PUSH
12949: LD_INT 8
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 25
12958: PUSH
12959: LD_INT 9
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PPUSH
12977: CALL_OW 69
12981: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12982: LD_ADDR_VAR 0 18
12986: PUSH
12987: LD_INT 22
12989: PUSH
12990: LD_VAR 0 1
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PUSH
12999: LD_INT 25
13001: PUSH
13002: LD_INT 4
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PPUSH
13013: CALL_OW 69
13017: ST_TO_ADDR
// for i in medic_list do
13018: LD_ADDR_VAR 0 14
13022: PUSH
13023: LD_VAR 0 18
13027: PUSH
13028: FOR_IN
13029: IFFALSE 13047
// ComMoveToArea ( i , healArea ) ;
13031: LD_VAR 0 14
13035: PPUSH
13036: LD_VAR 0 10
13040: PPUSH
13041: CALL_OW 113
13045: GO 13028
13047: POP
13048: POP
// if strategy = 1 then
13049: LD_VAR 0 12
13053: PUSH
13054: LD_INT 1
13056: EQUAL
13057: IFFALSE 13603
// begin repeat wait ( 0 0$3 ) ;
13059: LD_INT 105
13061: PPUSH
13062: CALL_OW 67
// for i in soldiersOK_list do
13066: LD_ADDR_VAR 0 14
13070: PUSH
13071: LD_VAR 0 19
13075: PUSH
13076: FOR_IN
13077: IFFALSE 13141
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13079: LD_VAR 0 14
13083: PPUSH
13084: LD_INT 91
13086: PPUSH
13087: LD_INT 63
13089: PPUSH
13090: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13094: LD_VAR 0 14
13098: PPUSH
13099: LD_INT 101
13101: PPUSH
13102: LD_INT 53
13104: PPUSH
13105: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13109: LD_VAR 0 14
13113: PPUSH
13114: LD_INT 75
13116: PPUSH
13117: LD_INT 23
13119: PPUSH
13120: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13124: LD_VAR 0 14
13128: PPUSH
13129: LD_INT 78
13131: PPUSH
13132: LD_INT 8
13134: PPUSH
13135: CALL_OW 174
// end ;
13139: GO 13076
13141: POP
13142: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13143: LD_INT 12
13145: PPUSH
13146: LD_INT 22
13148: PUSH
13149: LD_VAR 0 1
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PPUSH
13158: CALL_OW 70
13162: PUSH
13163: LD_INT 2
13165: GREATER
13166: IFFALSE 13059
// repeat wait ( 0 0$1 ) ;
13168: LD_INT 35
13170: PPUSH
13171: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13175: LD_ADDR_VAR 0 17
13179: PUSH
13180: LD_INT 22
13182: PUSH
13183: LD_VAR 0 1
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PUSH
13192: LD_INT 1
13194: PUSH
13195: LD_INT 3
13197: PUSH
13198: LD_INT 24
13200: PUSH
13201: LD_INT 550
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 24
13214: PUSH
13215: LD_INT 250
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: LIST
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PPUSH
13231: CALL_OW 69
13235: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13236: LD_ADDR_VAR 0 19
13240: PUSH
13241: LD_INT 22
13243: PUSH
13244: LD_VAR 0 1
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 2
13255: PUSH
13256: LD_INT 25
13258: PUSH
13259: LD_INT 1
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 25
13268: PUSH
13269: LD_INT 5
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 25
13278: PUSH
13279: LD_INT 8
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 25
13288: PUSH
13289: LD_INT 9
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: PUSH
13303: LD_INT 24
13305: PUSH
13306: LD_INT 1000
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: LIST
13317: PPUSH
13318: CALL_OW 69
13322: ST_TO_ADDR
// if medicCount > 0 then
13323: LD_VAR 0 7
13327: PUSH
13328: LD_INT 0
13330: GREATER
13331: IFFALSE 13405
// begin if damageUnit_list > 0 then
13333: LD_VAR 0 17
13337: PUSH
13338: LD_INT 0
13340: GREATER
13341: IFFALSE 13405
// begin for i in damageUnit_list do
13343: LD_ADDR_VAR 0 14
13347: PUSH
13348: LD_VAR 0 17
13352: PUSH
13353: FOR_IN
13354: IFFALSE 13403
// begin ComMoveToArea ( i , healArea ) ;
13356: LD_VAR 0 14
13360: PPUSH
13361: LD_VAR 0 10
13365: PPUSH
13366: CALL_OW 113
// for j in medic_list do
13370: LD_ADDR_VAR 0 15
13374: PUSH
13375: LD_VAR 0 18
13379: PUSH
13380: FOR_IN
13381: IFFALSE 13399
// AddComHeal ( j , i ) ;
13383: LD_VAR 0 15
13387: PPUSH
13388: LD_VAR 0 14
13392: PPUSH
13393: CALL_OW 188
13397: GO 13380
13399: POP
13400: POP
// end ;
13401: GO 13353
13403: POP
13404: POP
// end ; end ; for i in soldiersOK_list do
13405: LD_ADDR_VAR 0 14
13409: PUSH
13410: LD_VAR 0 19
13414: PUSH
13415: FOR_IN
13416: IFFALSE 13592
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13418: LD_ADDR_VAR 0 22
13422: PUSH
13423: LD_INT 22
13425: PUSH
13426: LD_VAR 0 11
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PPUSH
13435: CALL_OW 69
13439: PPUSH
13440: LD_VAR 0 14
13444: PPUSH
13445: CALL_OW 74
13449: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13450: LD_ADDR_VAR 0 23
13454: PUSH
13455: LD_INT 22
13457: PUSH
13458: LD_VAR 0 11
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: LD_INT 2
13469: PUSH
13470: LD_INT 59
13472: PUSH
13473: EMPTY
13474: LIST
13475: PUSH
13476: LD_INT 21
13478: PUSH
13479: LD_INT 1
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: LD_INT 21
13488: PUSH
13489: LD_INT 2
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: PUSH
13506: EMPTY
13507: LIST
13508: PPUSH
13509: CALL_OW 69
13513: PPUSH
13514: LD_VAR 0 14
13518: PPUSH
13519: CALL_OW 74
13523: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13524: LD_VAR 0 14
13528: PPUSH
13529: LD_VAR 0 22
13533: PPUSH
13534: CALL_OW 296
13538: PUSH
13539: LD_INT 6
13541: PLUS
13542: PUSH
13543: LD_VAR 0 14
13547: PPUSH
13548: LD_VAR 0 23
13552: PPUSH
13553: CALL_OW 296
13557: LESS
13558: IFFALSE 13576
// begin ComAttackUnit ( i , target1 ) ;
13560: LD_VAR 0 14
13564: PPUSH
13565: LD_VAR 0 22
13569: PPUSH
13570: CALL_OW 115
// end else
13574: GO 13590
// begin ComAttackUnit ( i , target2 ) ;
13576: LD_VAR 0 14
13580: PPUSH
13581: LD_VAR 0 23
13585: PPUSH
13586: CALL_OW 115
// end ; end ;
13590: GO 13415
13592: POP
13593: POP
// until soldiersOK_list = [ ] ;
13594: LD_VAR 0 19
13598: PUSH
13599: EMPTY
13600: EQUAL
13601: IFFALSE 13168
// end ; if strategy = 2 then
13603: LD_VAR 0 12
13607: PUSH
13608: LD_INT 2
13610: EQUAL
13611: IFFALSE 14127
// begin repeat wait ( 0 0$1 ) ;
13613: LD_INT 35
13615: PPUSH
13616: CALL_OW 67
// for i in soldiersOK_list do
13620: LD_ADDR_VAR 0 14
13624: PUSH
13625: LD_VAR 0 19
13629: PUSH
13630: FOR_IN
13631: IFFALSE 13665
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13633: LD_VAR 0 14
13637: PPUSH
13638: LD_INT 91
13640: PPUSH
13641: LD_INT 63
13643: PPUSH
13644: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13648: LD_VAR 0 14
13652: PPUSH
13653: LD_INT 75
13655: PPUSH
13656: LD_INT 33
13658: PPUSH
13659: CALL_OW 174
// end ;
13663: GO 13630
13665: POP
13666: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13667: LD_INT 13
13669: PPUSH
13670: LD_INT 22
13672: PUSH
13673: LD_VAR 0 1
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PPUSH
13682: CALL_OW 70
13686: PUSH
13687: LD_INT 2
13689: GREATER
13690: IFFALSE 13613
// repeat wait ( 0 0$3 ) ;
13692: LD_INT 105
13694: PPUSH
13695: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13699: LD_ADDR_VAR 0 17
13703: PUSH
13704: LD_INT 22
13706: PUSH
13707: LD_VAR 0 1
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 1
13718: PUSH
13719: LD_INT 3
13721: PUSH
13722: LD_INT 24
13724: PUSH
13725: LD_INT 550
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 24
13738: PUSH
13739: LD_INT 250
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: LIST
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PPUSH
13755: CALL_OW 69
13759: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13760: LD_ADDR_VAR 0 19
13764: PUSH
13765: LD_INT 22
13767: PUSH
13768: LD_VAR 0 1
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 2
13779: PUSH
13780: LD_INT 25
13782: PUSH
13783: LD_INT 1
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 25
13792: PUSH
13793: LD_INT 5
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: LD_INT 25
13802: PUSH
13803: LD_INT 8
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: LD_INT 25
13812: PUSH
13813: LD_INT 9
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: PUSH
13827: LD_INT 24
13829: PUSH
13830: LD_INT 1000
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: LIST
13841: PPUSH
13842: CALL_OW 69
13846: ST_TO_ADDR
// if medicCount > 0 then
13847: LD_VAR 0 7
13851: PUSH
13852: LD_INT 0
13854: GREATER
13855: IFFALSE 13929
// begin if damageUnit_list > 0 then
13857: LD_VAR 0 17
13861: PUSH
13862: LD_INT 0
13864: GREATER
13865: IFFALSE 13929
// begin for i in damageUnit_list do
13867: LD_ADDR_VAR 0 14
13871: PUSH
13872: LD_VAR 0 17
13876: PUSH
13877: FOR_IN
13878: IFFALSE 13927
// begin ComMoveToArea ( i , healArea ) ;
13880: LD_VAR 0 14
13884: PPUSH
13885: LD_VAR 0 10
13889: PPUSH
13890: CALL_OW 113
// for j in medic_list do
13894: LD_ADDR_VAR 0 15
13898: PUSH
13899: LD_VAR 0 18
13903: PUSH
13904: FOR_IN
13905: IFFALSE 13923
// AddComHeal ( j , i ) ;
13907: LD_VAR 0 15
13911: PPUSH
13912: LD_VAR 0 14
13916: PPUSH
13917: CALL_OW 188
13921: GO 13904
13923: POP
13924: POP
// end ;
13925: GO 13877
13927: POP
13928: POP
// end ; end ; for i in soldiersOK_list do
13929: LD_ADDR_VAR 0 14
13933: PUSH
13934: LD_VAR 0 19
13938: PUSH
13939: FOR_IN
13940: IFFALSE 14116
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13942: LD_ADDR_VAR 0 22
13946: PUSH
13947: LD_INT 22
13949: PUSH
13950: LD_VAR 0 11
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PPUSH
13959: CALL_OW 69
13963: PPUSH
13964: LD_VAR 0 14
13968: PPUSH
13969: CALL_OW 74
13973: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13974: LD_ADDR_VAR 0 23
13978: PUSH
13979: LD_INT 22
13981: PUSH
13982: LD_VAR 0 11
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: PUSH
13991: LD_INT 2
13993: PUSH
13994: LD_INT 59
13996: PUSH
13997: EMPTY
13998: LIST
13999: PUSH
14000: LD_INT 21
14002: PUSH
14003: LD_INT 1
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 21
14012: PUSH
14013: LD_INT 2
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: EMPTY
14031: LIST
14032: PPUSH
14033: CALL_OW 69
14037: PPUSH
14038: LD_VAR 0 14
14042: PPUSH
14043: CALL_OW 74
14047: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14048: LD_VAR 0 14
14052: PPUSH
14053: LD_VAR 0 22
14057: PPUSH
14058: CALL_OW 296
14062: PUSH
14063: LD_INT 6
14065: PLUS
14066: PUSH
14067: LD_VAR 0 14
14071: PPUSH
14072: LD_VAR 0 23
14076: PPUSH
14077: CALL_OW 296
14081: LESS
14082: IFFALSE 14100
// begin ComAttackUnit ( i , target1 ) ;
14084: LD_VAR 0 14
14088: PPUSH
14089: LD_VAR 0 22
14093: PPUSH
14094: CALL_OW 115
// end else
14098: GO 14114
// begin ComAttackUnit ( i , target2 ) ;
14100: LD_VAR 0 14
14104: PPUSH
14105: LD_VAR 0 23
14109: PPUSH
14110: CALL_OW 115
// end ; end ;
14114: GO 13939
14116: POP
14117: POP
// until soldiersOK_list = [ ] ;
14118: LD_VAR 0 19
14122: PUSH
14123: EMPTY
14124: EQUAL
14125: IFFALSE 13692
// end ; if strategy = 3 then
14127: LD_VAR 0 12
14131: PUSH
14132: LD_INT 3
14134: EQUAL
14135: IFFALSE 14681
// begin repeat wait ( 0 0$3 ) ;
14137: LD_INT 105
14139: PPUSH
14140: CALL_OW 67
// for i in soldiersOK_list do
14144: LD_ADDR_VAR 0 14
14148: PUSH
14149: LD_VAR 0 19
14153: PUSH
14154: FOR_IN
14155: IFFALSE 14219
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14157: LD_VAR 0 14
14161: PPUSH
14162: LD_INT 63
14164: PPUSH
14165: LD_INT 71
14167: PPUSH
14168: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14172: LD_VAR 0 14
14176: PPUSH
14177: LD_INT 35
14179: PPUSH
14180: LD_INT 44
14182: PPUSH
14183: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14187: LD_VAR 0 14
14191: PPUSH
14192: LD_INT 23
14194: PPUSH
14195: LD_INT 18
14197: PPUSH
14198: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14202: LD_VAR 0 14
14206: PPUSH
14207: LD_INT 26
14209: PPUSH
14210: LD_INT 12
14212: PPUSH
14213: CALL_OW 174
// end ;
14217: GO 14154
14219: POP
14220: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14221: LD_INT 14
14223: PPUSH
14224: LD_INT 22
14226: PUSH
14227: LD_VAR 0 1
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PPUSH
14236: CALL_OW 70
14240: PUSH
14241: LD_INT 2
14243: GREATER
14244: IFFALSE 14137
// repeat wait ( 0 0$1 ) ;
14246: LD_INT 35
14248: PPUSH
14249: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14253: LD_ADDR_VAR 0 17
14257: PUSH
14258: LD_INT 22
14260: PUSH
14261: LD_VAR 0 1
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 1
14272: PUSH
14273: LD_INT 3
14275: PUSH
14276: LD_INT 24
14278: PUSH
14279: LD_INT 550
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PUSH
14290: LD_INT 24
14292: PUSH
14293: LD_INT 250
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PPUSH
14309: CALL_OW 69
14313: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14314: LD_ADDR_VAR 0 19
14318: PUSH
14319: LD_INT 22
14321: PUSH
14322: LD_VAR 0 1
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 2
14333: PUSH
14334: LD_INT 25
14336: PUSH
14337: LD_INT 1
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: LD_INT 25
14346: PUSH
14347: LD_INT 5
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 25
14356: PUSH
14357: LD_INT 8
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 25
14366: PUSH
14367: LD_INT 9
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: PUSH
14381: LD_INT 24
14383: PUSH
14384: LD_INT 1000
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: LIST
14395: PPUSH
14396: CALL_OW 69
14400: ST_TO_ADDR
// if medicCount > 0 then
14401: LD_VAR 0 7
14405: PUSH
14406: LD_INT 0
14408: GREATER
14409: IFFALSE 14483
// begin if damageUnit_list > 0 then
14411: LD_VAR 0 17
14415: PUSH
14416: LD_INT 0
14418: GREATER
14419: IFFALSE 14483
// begin for i in damageUnit_list do
14421: LD_ADDR_VAR 0 14
14425: PUSH
14426: LD_VAR 0 17
14430: PUSH
14431: FOR_IN
14432: IFFALSE 14481
// begin ComMoveToArea ( i , healArea ) ;
14434: LD_VAR 0 14
14438: PPUSH
14439: LD_VAR 0 10
14443: PPUSH
14444: CALL_OW 113
// for j in medic_list do
14448: LD_ADDR_VAR 0 15
14452: PUSH
14453: LD_VAR 0 18
14457: PUSH
14458: FOR_IN
14459: IFFALSE 14477
// AddComHeal ( j , i ) ;
14461: LD_VAR 0 15
14465: PPUSH
14466: LD_VAR 0 14
14470: PPUSH
14471: CALL_OW 188
14475: GO 14458
14477: POP
14478: POP
// end ;
14479: GO 14431
14481: POP
14482: POP
// end ; end ; for i in soldiersOK_list do
14483: LD_ADDR_VAR 0 14
14487: PUSH
14488: LD_VAR 0 19
14492: PUSH
14493: FOR_IN
14494: IFFALSE 14670
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14496: LD_ADDR_VAR 0 22
14500: PUSH
14501: LD_INT 22
14503: PUSH
14504: LD_VAR 0 11
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PPUSH
14513: CALL_OW 69
14517: PPUSH
14518: LD_VAR 0 14
14522: PPUSH
14523: CALL_OW 74
14527: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14528: LD_ADDR_VAR 0 23
14532: PUSH
14533: LD_INT 22
14535: PUSH
14536: LD_VAR 0 11
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PUSH
14545: LD_INT 2
14547: PUSH
14548: LD_INT 59
14550: PUSH
14551: EMPTY
14552: LIST
14553: PUSH
14554: LD_INT 21
14556: PUSH
14557: LD_INT 1
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: PUSH
14564: LD_INT 21
14566: PUSH
14567: LD_INT 2
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: PUSH
14584: EMPTY
14585: LIST
14586: PPUSH
14587: CALL_OW 69
14591: PPUSH
14592: LD_VAR 0 14
14596: PPUSH
14597: CALL_OW 74
14601: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14602: LD_VAR 0 14
14606: PPUSH
14607: LD_VAR 0 22
14611: PPUSH
14612: CALL_OW 296
14616: PUSH
14617: LD_INT 6
14619: PLUS
14620: PUSH
14621: LD_VAR 0 14
14625: PPUSH
14626: LD_VAR 0 23
14630: PPUSH
14631: CALL_OW 296
14635: LESS
14636: IFFALSE 14654
// begin ComAttackUnit ( i , target1 ) ;
14638: LD_VAR 0 14
14642: PPUSH
14643: LD_VAR 0 22
14647: PPUSH
14648: CALL_OW 115
// end else
14652: GO 14668
// begin ComAttackUnit ( i , target2 ) ;
14654: LD_VAR 0 14
14658: PPUSH
14659: LD_VAR 0 23
14663: PPUSH
14664: CALL_OW 115
// end ; end ;
14668: GO 14493
14670: POP
14671: POP
// until soldiersOK_list = [ ] ;
14672: LD_VAR 0 19
14676: PUSH
14677: EMPTY
14678: EQUAL
14679: IFFALSE 14246
// end ; end ;
14681: LD_VAR 0 13
14685: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14686: LD_INT 0
14688: PPUSH
14689: PPUSH
14690: PPUSH
14691: PPUSH
14692: PPUSH
14693: PPUSH
14694: PPUSH
14695: PPUSH
14696: PPUSH
14697: PPUSH
14698: PPUSH
// amChassisTab = [ ] ;
14699: LD_ADDR_VAR 0 19
14703: PUSH
14704: EMPTY
14705: ST_TO_ADDR
// arChassisTab = [ ] ;
14706: LD_ADDR_VAR 0 18
14710: PUSH
14711: EMPTY
14712: ST_TO_ADDR
// ruChassisTab = [ ] ;
14713: LD_ADDR_VAR 0 17
14717: PUSH
14718: EMPTY
14719: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14720: LD_INT 35
14722: PPUSH
14723: CALL_OW 67
// if nation = 1 then
14727: LD_VAR 0 5
14731: PUSH
14732: LD_INT 1
14734: EQUAL
14735: IFFALSE 15226
// begin uc_side = side ;
14737: LD_ADDR_OWVAR 20
14741: PUSH
14742: LD_VAR 0 2
14746: ST_TO_ADDR
// uc_nation = nation ;
14747: LD_ADDR_OWVAR 21
14751: PUSH
14752: LD_VAR 0 5
14756: ST_TO_ADDR
// vc_engine = vehengine ;
14757: LD_ADDR_OWVAR 39
14761: PUSH
14762: LD_VAR 0 6
14766: ST_TO_ADDR
// vc_control = vehcontrol ;
14767: LD_ADDR_OWVAR 38
14771: PUSH
14772: LD_VAR 0 7
14776: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14777: LD_ADDR_OWVAR 40
14781: PUSH
14782: LD_VAR 0 10
14786: PUSH
14787: LD_INT 1
14789: PPUSH
14790: LD_VAR 0 10
14794: PPUSH
14795: CALL_OW 12
14799: ARRAY
14800: ST_TO_ADDR
// for j = 1 to AMWeapon do
14801: LD_ADDR_VAR 0 14
14805: PUSH
14806: DOUBLE
14807: LD_INT 1
14809: DEC
14810: ST_TO_ADDR
14811: LD_VAR 0 10
14815: PUSH
14816: FOR_TO
14817: IFFALSE 15118
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14819: LD_VAR 0 10
14823: PUSH
14824: LD_VAR 0 14
14828: ARRAY
14829: PUSH
14830: LD_INT 2
14832: EQUAL
14833: PUSH
14834: LD_VAR 0 10
14838: PUSH
14839: LD_VAR 0 14
14843: ARRAY
14844: PUSH
14845: LD_INT 3
14847: EQUAL
14848: OR
14849: IFFALSE 14902
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14851: LD_ADDR_VAR 0 19
14855: PUSH
14856: LD_INT 1
14858: PUSH
14859: LD_INT 2
14861: PUSH
14862: LD_INT 3
14864: PUSH
14865: LD_INT 4
14867: PUSH
14868: LD_INT 5
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14878: LD_ADDR_OWVAR 37
14882: PUSH
14883: LD_VAR 0 19
14887: PUSH
14888: LD_INT 1
14890: PPUSH
14891: LD_VAR 0 19
14895: PPUSH
14896: CALL_OW 12
14900: ARRAY
14901: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14902: LD_VAR 0 10
14906: PUSH
14907: LD_VAR 0 14
14911: ARRAY
14912: PUSH
14913: LD_INT 4
14915: EQUAL
14916: PUSH
14917: LD_VAR 0 10
14921: PUSH
14922: LD_VAR 0 14
14926: ARRAY
14927: PUSH
14928: LD_INT 5
14930: EQUAL
14931: OR
14932: PUSH
14933: LD_VAR 0 10
14937: PUSH
14938: LD_VAR 0 14
14942: ARRAY
14943: PUSH
14944: LD_INT 9
14946: EQUAL
14947: OR
14948: PUSH
14949: LD_VAR 0 10
14953: PUSH
14954: LD_VAR 0 14
14958: ARRAY
14959: PUSH
14960: LD_INT 11
14962: EQUAL
14963: OR
14964: PUSH
14965: LD_VAR 0 10
14969: PUSH
14970: LD_VAR 0 14
14974: ARRAY
14975: PUSH
14976: LD_INT 7
14978: EQUAL
14979: OR
14980: IFFALSE 15029
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14982: LD_ADDR_VAR 0 19
14986: PUSH
14987: LD_INT 2
14989: PUSH
14990: LD_INT 3
14992: PUSH
14993: LD_INT 4
14995: PUSH
14996: LD_INT 5
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15005: LD_ADDR_OWVAR 37
15009: PUSH
15010: LD_VAR 0 19
15014: PUSH
15015: LD_INT 1
15017: PPUSH
15018: LD_VAR 0 19
15022: PPUSH
15023: CALL_OW 12
15027: ARRAY
15028: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15029: LD_VAR 0 10
15033: PUSH
15034: LD_VAR 0 14
15038: ARRAY
15039: PUSH
15040: LD_INT 8
15042: EQUAL
15043: PUSH
15044: LD_VAR 0 10
15048: PUSH
15049: LD_VAR 0 14
15053: ARRAY
15054: PUSH
15055: LD_INT 6
15057: EQUAL
15058: OR
15059: PUSH
15060: LD_VAR 0 10
15064: PUSH
15065: LD_VAR 0 14
15069: ARRAY
15070: PUSH
15071: LD_INT 10
15073: EQUAL
15074: OR
15075: IFFALSE 15116
// begin amChassisTab = [ 4 , 5 ] ;
15077: LD_ADDR_VAR 0 19
15081: PUSH
15082: LD_INT 4
15084: PUSH
15085: LD_INT 5
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15092: LD_ADDR_OWVAR 37
15096: PUSH
15097: LD_VAR 0 19
15101: PUSH
15102: LD_INT 1
15104: PPUSH
15105: LD_VAR 0 19
15109: PPUSH
15110: CALL_OW 12
15114: ARRAY
15115: ST_TO_ADDR
// end ; end ;
15116: GO 14816
15118: POP
15119: POP
// veh = CreateVehicle ;
15120: LD_ADDR_VAR 0 16
15124: PUSH
15125: CALL_OW 45
15129: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15130: LD_VAR 0 16
15134: PPUSH
15135: LD_VAR 0 1
15139: PPUSH
15140: LD_INT 0
15142: PPUSH
15143: CALL_OW 49
// if vehControl = 1 then
15147: LD_VAR 0 7
15151: PUSH
15152: LD_INT 1
15154: EQUAL
15155: IFFALSE 15212
// begin hc_gallery =  ;
15157: LD_ADDR_OWVAR 33
15161: PUSH
15162: LD_STRING 
15164: ST_TO_ADDR
// hc_name =  ;
15165: LD_ADDR_OWVAR 26
15169: PUSH
15170: LD_STRING 
15172: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15173: LD_INT 0
15175: PPUSH
15176: LD_INT 3
15178: PPUSH
15179: LD_VAR 0 4
15183: PPUSH
15184: CALL_OW 380
// un = CreateHuman ;
15188: LD_ADDR_VAR 0 15
15192: PUSH
15193: CALL_OW 44
15197: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15198: LD_VAR 0 15
15202: PPUSH
15203: LD_VAR 0 16
15207: PPUSH
15208: CALL_OW 52
// end ; i = i + 1 ;
15212: LD_ADDR_VAR 0 13
15216: PUSH
15217: LD_VAR 0 13
15221: PUSH
15222: LD_INT 1
15224: PLUS
15225: ST_TO_ADDR
// end ; if nation = 2 then
15226: LD_VAR 0 5
15230: PUSH
15231: LD_INT 2
15233: EQUAL
15234: IFFALSE 15658
// begin uc_side = side ;
15236: LD_ADDR_OWVAR 20
15240: PUSH
15241: LD_VAR 0 2
15245: ST_TO_ADDR
// uc_nation = nation ;
15246: LD_ADDR_OWVAR 21
15250: PUSH
15251: LD_VAR 0 5
15255: ST_TO_ADDR
// vc_engine = vehengine ;
15256: LD_ADDR_OWVAR 39
15260: PUSH
15261: LD_VAR 0 6
15265: ST_TO_ADDR
// vc_control = vehcontrol ;
15266: LD_ADDR_OWVAR 38
15270: PUSH
15271: LD_VAR 0 7
15275: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15276: LD_ADDR_OWVAR 40
15280: PUSH
15281: LD_VAR 0 9
15285: PUSH
15286: LD_INT 1
15288: PPUSH
15289: LD_VAR 0 9
15293: PPUSH
15294: CALL_OW 12
15298: ARRAY
15299: ST_TO_ADDR
// for j = 1 to ARWeapons do
15300: LD_ADDR_VAR 0 14
15304: PUSH
15305: DOUBLE
15306: LD_INT 1
15308: DEC
15309: ST_TO_ADDR
15310: LD_VAR 0 9
15314: PUSH
15315: FOR_TO
15316: IFFALSE 15550
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15318: LD_VAR 0 9
15322: PUSH
15323: LD_VAR 0 14
15327: ARRAY
15328: PUSH
15329: LD_INT 24
15331: EQUAL
15332: PUSH
15333: LD_VAR 0 9
15337: PUSH
15338: LD_VAR 0 14
15342: ARRAY
15343: PUSH
15344: LD_INT 22
15346: EQUAL
15347: OR
15348: PUSH
15349: LD_VAR 0 9
15353: PUSH
15354: LD_VAR 0 14
15358: ARRAY
15359: PUSH
15360: LD_INT 23
15362: EQUAL
15363: OR
15364: PUSH
15365: LD_VAR 0 9
15369: PUSH
15370: LD_VAR 0 14
15374: ARRAY
15375: PUSH
15376: LD_INT 30
15378: EQUAL
15379: OR
15380: IFFALSE 15429
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15382: LD_ADDR_VAR 0 18
15386: PUSH
15387: LD_INT 11
15389: PUSH
15390: LD_INT 12
15392: PUSH
15393: LD_INT 13
15395: PUSH
15396: LD_INT 14
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15405: LD_ADDR_OWVAR 37
15409: PUSH
15410: LD_VAR 0 18
15414: PUSH
15415: LD_INT 1
15417: PPUSH
15418: LD_VAR 0 18
15422: PPUSH
15423: CALL_OW 12
15427: ARRAY
15428: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15429: LD_VAR 0 9
15433: PUSH
15434: LD_VAR 0 14
15438: ARRAY
15439: PUSH
15440: LD_INT 29
15442: EQUAL
15443: PUSH
15444: LD_VAR 0 9
15448: PUSH
15449: LD_VAR 0 14
15453: ARRAY
15454: PUSH
15455: LD_INT 28
15457: EQUAL
15458: OR
15459: PUSH
15460: LD_VAR 0 9
15464: PUSH
15465: LD_VAR 0 14
15469: ARRAY
15470: PUSH
15471: LD_INT 27
15473: EQUAL
15474: OR
15475: PUSH
15476: LD_VAR 0 9
15480: PUSH
15481: LD_VAR 0 14
15485: ARRAY
15486: PUSH
15487: LD_INT 26
15489: EQUAL
15490: OR
15491: PUSH
15492: LD_VAR 0 9
15496: PUSH
15497: LD_VAR 0 14
15501: ARRAY
15502: PUSH
15503: LD_INT 25
15505: EQUAL
15506: OR
15507: IFFALSE 15548
// begin arChassisTab = [ 13 , 14 ] ;
15509: LD_ADDR_VAR 0 18
15513: PUSH
15514: LD_INT 13
15516: PUSH
15517: LD_INT 14
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15524: LD_ADDR_OWVAR 37
15528: PUSH
15529: LD_VAR 0 18
15533: PUSH
15534: LD_INT 1
15536: PPUSH
15537: LD_VAR 0 18
15541: PPUSH
15542: CALL_OW 12
15546: ARRAY
15547: ST_TO_ADDR
// end ; end ;
15548: GO 15315
15550: POP
15551: POP
// veh = CreateVehicle ;
15552: LD_ADDR_VAR 0 16
15556: PUSH
15557: CALL_OW 45
15561: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15562: LD_VAR 0 16
15566: PPUSH
15567: LD_VAR 0 1
15571: PPUSH
15572: LD_INT 0
15574: PPUSH
15575: CALL_OW 49
// if vehcontrol = 1 then
15579: LD_VAR 0 7
15583: PUSH
15584: LD_INT 1
15586: EQUAL
15587: IFFALSE 15644
// begin hc_gallery =  ;
15589: LD_ADDR_OWVAR 33
15593: PUSH
15594: LD_STRING 
15596: ST_TO_ADDR
// hc_name =  ;
15597: LD_ADDR_OWVAR 26
15601: PUSH
15602: LD_STRING 
15604: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15605: LD_INT 0
15607: PPUSH
15608: LD_INT 3
15610: PPUSH
15611: LD_VAR 0 4
15615: PPUSH
15616: CALL_OW 380
// un = CreateHuman ;
15620: LD_ADDR_VAR 0 15
15624: PUSH
15625: CALL_OW 44
15629: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15630: LD_VAR 0 15
15634: PPUSH
15635: LD_VAR 0 16
15639: PPUSH
15640: CALL_OW 52
// end ; i = i + 1 ;
15644: LD_ADDR_VAR 0 13
15648: PUSH
15649: LD_VAR 0 13
15653: PUSH
15654: LD_INT 1
15656: PLUS
15657: ST_TO_ADDR
// end ; if nation = 3 then
15658: LD_VAR 0 5
15662: PUSH
15663: LD_INT 3
15665: EQUAL
15666: IFFALSE 16058
// begin uc_side = side ;
15668: LD_ADDR_OWVAR 20
15672: PUSH
15673: LD_VAR 0 2
15677: ST_TO_ADDR
// uc_nation = nation ;
15678: LD_ADDR_OWVAR 21
15682: PUSH
15683: LD_VAR 0 5
15687: ST_TO_ADDR
// vc_engine = vehengine ;
15688: LD_ADDR_OWVAR 39
15692: PUSH
15693: LD_VAR 0 6
15697: ST_TO_ADDR
// vc_control = vehcontrol ;
15698: LD_ADDR_OWVAR 38
15702: PUSH
15703: LD_VAR 0 7
15707: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15708: LD_ADDR_OWVAR 40
15712: PUSH
15713: LD_VAR 0 8
15717: PUSH
15718: LD_INT 1
15720: PPUSH
15721: LD_VAR 0 8
15725: PPUSH
15726: CALL_OW 12
15730: ARRAY
15731: ST_TO_ADDR
// for j = 1 to RuWeapons do
15732: LD_ADDR_VAR 0 14
15736: PUSH
15737: DOUBLE
15738: LD_INT 1
15740: DEC
15741: ST_TO_ADDR
15742: LD_VAR 0 8
15746: PUSH
15747: FOR_TO
15748: IFFALSE 15950
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15750: LD_VAR 0 8
15754: PUSH
15755: LD_VAR 0 14
15759: ARRAY
15760: PUSH
15761: LD_INT 42
15763: EQUAL
15764: PUSH
15765: LD_VAR 0 8
15769: PUSH
15770: LD_VAR 0 14
15774: ARRAY
15775: PUSH
15776: LD_INT 43
15778: EQUAL
15779: OR
15780: PUSH
15781: LD_VAR 0 8
15785: PUSH
15786: LD_VAR 0 14
15790: ARRAY
15791: PUSH
15792: LD_INT 44
15794: EQUAL
15795: OR
15796: PUSH
15797: LD_VAR 0 8
15801: PUSH
15802: LD_VAR 0 14
15806: ARRAY
15807: PUSH
15808: LD_INT 45
15810: EQUAL
15811: OR
15812: PUSH
15813: LD_VAR 0 8
15817: PUSH
15818: LD_VAR 0 14
15822: ARRAY
15823: PUSH
15824: LD_INT 49
15826: EQUAL
15827: OR
15828: IFFALSE 15877
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15830: LD_ADDR_VAR 0 17
15834: PUSH
15835: LD_INT 21
15837: PUSH
15838: LD_INT 22
15840: PUSH
15841: LD_INT 23
15843: PUSH
15844: LD_INT 24
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15853: LD_ADDR_OWVAR 37
15857: PUSH
15858: LD_VAR 0 17
15862: PUSH
15863: LD_INT 1
15865: PPUSH
15866: LD_VAR 0 17
15870: PPUSH
15871: CALL_OW 12
15875: ARRAY
15876: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15877: LD_VAR 0 8
15881: PUSH
15882: LD_VAR 0 14
15886: ARRAY
15887: PUSH
15888: LD_INT 46
15890: EQUAL
15891: PUSH
15892: LD_VAR 0 8
15896: PUSH
15897: LD_VAR 0 14
15901: ARRAY
15902: PUSH
15903: LD_INT 47
15905: EQUAL
15906: OR
15907: IFFALSE 15948
// begin ruChassisTab = [ 23 , 24 ] ;
15909: LD_ADDR_VAR 0 17
15913: PUSH
15914: LD_INT 23
15916: PUSH
15917: LD_INT 24
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15924: LD_ADDR_OWVAR 37
15928: PUSH
15929: LD_VAR 0 17
15933: PUSH
15934: LD_INT 1
15936: PPUSH
15937: LD_VAR 0 17
15941: PPUSH
15942: CALL_OW 12
15946: ARRAY
15947: ST_TO_ADDR
// end ; end ;
15948: GO 15747
15950: POP
15951: POP
// veh = CreateVehicle ;
15952: LD_ADDR_VAR 0 16
15956: PUSH
15957: CALL_OW 45
15961: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15962: LD_VAR 0 16
15966: PPUSH
15967: LD_VAR 0 1
15971: PPUSH
15972: LD_INT 0
15974: PPUSH
15975: CALL_OW 49
// if vehcontrol = 1 then
15979: LD_VAR 0 7
15983: PUSH
15984: LD_INT 1
15986: EQUAL
15987: IFFALSE 16044
// begin hc_gallery =  ;
15989: LD_ADDR_OWVAR 33
15993: PUSH
15994: LD_STRING 
15996: ST_TO_ADDR
// hc_name =  ;
15997: LD_ADDR_OWVAR 26
16001: PUSH
16002: LD_STRING 
16004: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16005: LD_INT 0
16007: PPUSH
16008: LD_INT 3
16010: PPUSH
16011: LD_VAR 0 4
16015: PPUSH
16016: CALL_OW 380
// un = CreateHuman ;
16020: LD_ADDR_VAR 0 15
16024: PUSH
16025: CALL_OW 44
16029: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16030: LD_VAR 0 15
16034: PPUSH
16035: LD_VAR 0 16
16039: PPUSH
16040: CALL_OW 52
// end ; i = i + 1 ;
16044: LD_ADDR_VAR 0 13
16048: PUSH
16049: LD_VAR 0 13
16053: PUSH
16054: LD_INT 1
16056: PLUS
16057: ST_TO_ADDR
// end ; until i = vehCount ;
16058: LD_VAR 0 13
16062: PUSH
16063: LD_VAR 0 3
16067: EQUAL
16068: IFFALSE 14720
// repeat wait ( 0 0$1 ) ;
16070: LD_INT 35
16072: PPUSH
16073: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16077: LD_ADDR_VAR 0 20
16081: PUSH
16082: LD_INT 22
16084: PUSH
16085: LD_VAR 0 2
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: PUSH
16094: LD_INT 21
16096: PUSH
16097: LD_INT 2
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 24
16106: PUSH
16107: LD_INT 250
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: LIST
16118: PPUSH
16119: CALL_OW 69
16123: ST_TO_ADDR
// if vehicleOK_list > 0 then
16124: LD_VAR 0 20
16128: PUSH
16129: LD_INT 0
16131: GREATER
16132: IFFALSE 16323
// begin for i in vehicleOK_list do
16134: LD_ADDR_VAR 0 13
16138: PUSH
16139: LD_VAR 0 20
16143: PUSH
16144: FOR_IN
16145: IFFALSE 16321
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16147: LD_ADDR_VAR 0 21
16151: PUSH
16152: LD_INT 22
16154: PUSH
16155: LD_VAR 0 11
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PPUSH
16164: CALL_OW 69
16168: PPUSH
16169: LD_VAR 0 13
16173: PPUSH
16174: CALL_OW 74
16178: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16179: LD_ADDR_VAR 0 22
16183: PUSH
16184: LD_INT 22
16186: PUSH
16187: LD_VAR 0 11
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 2
16198: PUSH
16199: LD_INT 59
16201: PUSH
16202: EMPTY
16203: LIST
16204: PUSH
16205: LD_INT 21
16207: PUSH
16208: LD_INT 1
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: PUSH
16215: LD_INT 21
16217: PUSH
16218: LD_INT 2
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: PUSH
16235: EMPTY
16236: LIST
16237: PPUSH
16238: CALL_OW 69
16242: PPUSH
16243: LD_VAR 0 13
16247: PPUSH
16248: CALL_OW 74
16252: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16253: LD_VAR 0 13
16257: PPUSH
16258: LD_VAR 0 21
16262: PPUSH
16263: CALL_OW 296
16267: PUSH
16268: LD_INT 6
16270: PLUS
16271: PUSH
16272: LD_VAR 0 13
16276: PPUSH
16277: LD_VAR 0 22
16281: PPUSH
16282: CALL_OW 296
16286: LESS
16287: IFFALSE 16305
// begin ComAttackUnit ( i , target1 ) ;
16289: LD_VAR 0 13
16293: PPUSH
16294: LD_VAR 0 21
16298: PPUSH
16299: CALL_OW 115
// end else
16303: GO 16319
// begin ComAttackUnit ( i , target2 ) ;
16305: LD_VAR 0 13
16309: PPUSH
16310: LD_VAR 0 22
16314: PPUSH
16315: CALL_OW 115
// end ; end ;
16319: GO 16144
16321: POP
16322: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16323: LD_INT 22
16325: PUSH
16326: LD_VAR 0 2
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 21
16337: PUSH
16338: LD_INT 2
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: LD_INT 24
16347: PUSH
16348: LD_INT 250
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: LIST
16359: PPUSH
16360: CALL_OW 69
16364: PUSH
16365: LD_INT 0
16367: EQUAL
16368: IFFALSE 16070
// end ;
16370: LD_VAR 0 12
16374: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16375: LD_INT 0
16377: PPUSH
16378: PPUSH
16379: PPUSH
16380: PPUSH
16381: PPUSH
16382: PPUSH
16383: PPUSH
16384: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16385: LD_ADDR_VAR 0 7
16389: PUSH
16390: LD_INT 22
16392: PUSH
16393: LD_VAR 0 1
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PUSH
16402: LD_INT 1
16404: PUSH
16405: LD_INT 3
16407: PUSH
16408: LD_INT 24
16410: PUSH
16411: LD_INT 550
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 24
16424: PUSH
16425: LD_INT 250
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: LIST
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PPUSH
16441: CALL_OW 69
16445: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16446: LD_ADDR_VAR 0 8
16450: PUSH
16451: LD_INT 22
16453: PUSH
16454: LD_VAR 0 1
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: LD_INT 2
16465: PUSH
16466: LD_INT 25
16468: PUSH
16469: LD_INT 1
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 25
16478: PUSH
16479: LD_INT 5
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 25
16488: PUSH
16489: LD_INT 8
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 25
16498: PUSH
16499: LD_INT 9
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 24
16515: PUSH
16516: LD_INT 1000
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: LIST
16527: PPUSH
16528: CALL_OW 69
16532: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16533: LD_ADDR_VAR 0 9
16537: PUSH
16538: LD_INT 22
16540: PUSH
16541: LD_VAR 0 1
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 25
16552: PUSH
16553: LD_INT 4
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PPUSH
16564: CALL_OW 69
16568: ST_TO_ADDR
// if medicCount > 0 then
16569: LD_VAR 0 9
16573: PUSH
16574: LD_INT 0
16576: GREATER
16577: IFFALSE 16651
// begin if damageUnit_list > 0 then
16579: LD_VAR 0 7
16583: PUSH
16584: LD_INT 0
16586: GREATER
16587: IFFALSE 16651
// begin for i in damageUnit_list do
16589: LD_ADDR_VAR 0 5
16593: PUSH
16594: LD_VAR 0 7
16598: PUSH
16599: FOR_IN
16600: IFFALSE 16649
// begin ComMoveToArea ( i , healArea ) ;
16602: LD_VAR 0 5
16606: PPUSH
16607: LD_VAR 0 2
16611: PPUSH
16612: CALL_OW 113
// for j in medicCount do
16616: LD_ADDR_VAR 0 6
16620: PUSH
16621: LD_VAR 0 9
16625: PUSH
16626: FOR_IN
16627: IFFALSE 16645
// AddComHeal ( j , i ) ;
16629: LD_VAR 0 6
16633: PPUSH
16634: LD_VAR 0 5
16638: PPUSH
16639: CALL_OW 188
16643: GO 16626
16645: POP
16646: POP
// end ;
16647: GO 16599
16649: POP
16650: POP
// end ; end ; if soldiersOK_list > 0 then
16651: LD_VAR 0 8
16655: PUSH
16656: LD_INT 0
16658: GREATER
16659: IFFALSE 16850
// begin for i in soldiersOK_list do
16661: LD_ADDR_VAR 0 5
16665: PUSH
16666: LD_VAR 0 8
16670: PUSH
16671: FOR_IN
16672: IFFALSE 16848
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16674: LD_ADDR_VAR 0 10
16678: PUSH
16679: LD_INT 22
16681: PUSH
16682: LD_VAR 0 3
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PPUSH
16691: CALL_OW 69
16695: PPUSH
16696: LD_VAR 0 5
16700: PPUSH
16701: CALL_OW 74
16705: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16706: LD_ADDR_VAR 0 11
16710: PUSH
16711: LD_INT 22
16713: PUSH
16714: LD_VAR 0 3
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PUSH
16723: LD_INT 2
16725: PUSH
16726: LD_INT 59
16728: PUSH
16729: EMPTY
16730: LIST
16731: PUSH
16732: LD_INT 21
16734: PUSH
16735: LD_INT 1
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 21
16744: PUSH
16745: LD_INT 2
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: EMPTY
16763: LIST
16764: PPUSH
16765: CALL_OW 69
16769: PPUSH
16770: LD_VAR 0 5
16774: PPUSH
16775: CALL_OW 74
16779: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16780: LD_VAR 0 5
16784: PPUSH
16785: LD_VAR 0 10
16789: PPUSH
16790: CALL_OW 296
16794: PUSH
16795: LD_INT 8
16797: PLUS
16798: PUSH
16799: LD_VAR 0 5
16803: PPUSH
16804: LD_VAR 0 11
16808: PPUSH
16809: CALL_OW 296
16813: LESS
16814: IFFALSE 16832
// begin ComAttackUnit ( i , target1 ) ;
16816: LD_VAR 0 5
16820: PPUSH
16821: LD_VAR 0 10
16825: PPUSH
16826: CALL_OW 115
// end else
16830: GO 16846
// begin ComAttackUnit ( i , target2 ) ;
16832: LD_VAR 0 5
16836: PPUSH
16837: LD_VAR 0 11
16841: PPUSH
16842: CALL_OW 115
// end ; end ;
16846: GO 16671
16848: POP
16849: POP
// end ; end ;
16850: LD_VAR 0 4
16854: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
16855: LD_INT 0
16857: PPUSH
16858: PPUSH
// list := [ ] ;
16859: LD_ADDR_VAR 0 5
16863: PUSH
16864: EMPTY
16865: ST_TO_ADDR
// case d of 0 :
16866: LD_VAR 0 3
16870: PUSH
16871: LD_INT 0
16873: DOUBLE
16874: EQUAL
16875: IFTRUE 16879
16877: GO 17012
16879: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16880: LD_ADDR_VAR 0 5
16884: PUSH
16885: LD_VAR 0 1
16889: PUSH
16890: LD_INT 4
16892: MINUS
16893: PUSH
16894: LD_VAR 0 2
16898: PUSH
16899: LD_INT 4
16901: MINUS
16902: PUSH
16903: LD_INT 2
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: LIST
16910: PUSH
16911: LD_VAR 0 1
16915: PUSH
16916: LD_INT 3
16918: MINUS
16919: PUSH
16920: LD_VAR 0 2
16924: PUSH
16925: LD_INT 1
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: LIST
16932: PUSH
16933: LD_VAR 0 1
16937: PUSH
16938: LD_INT 4
16940: PLUS
16941: PUSH
16942: LD_VAR 0 2
16946: PUSH
16947: LD_INT 4
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: LIST
16954: PUSH
16955: LD_VAR 0 1
16959: PUSH
16960: LD_INT 3
16962: PLUS
16963: PUSH
16964: LD_VAR 0 2
16968: PUSH
16969: LD_INT 3
16971: PLUS
16972: PUSH
16973: LD_INT 5
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: LIST
16980: PUSH
16981: LD_VAR 0 1
16985: PUSH
16986: LD_VAR 0 2
16990: PUSH
16991: LD_INT 4
16993: PLUS
16994: PUSH
16995: LD_INT 0
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: LIST
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: ST_TO_ADDR
// end ; 1 :
17010: GO 17710
17012: LD_INT 1
17014: DOUBLE
17015: EQUAL
17016: IFTRUE 17020
17018: GO 17153
17020: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
17021: LD_ADDR_VAR 0 5
17025: PUSH
17026: LD_VAR 0 1
17030: PUSH
17031: LD_VAR 0 2
17035: PUSH
17036: LD_INT 4
17038: MINUS
17039: PUSH
17040: LD_INT 3
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: LIST
17047: PUSH
17048: LD_VAR 0 1
17052: PUSH
17053: LD_INT 3
17055: MINUS
17056: PUSH
17057: LD_VAR 0 2
17061: PUSH
17062: LD_INT 3
17064: MINUS
17065: PUSH
17066: LD_INT 2
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: LIST
17073: PUSH
17074: LD_VAR 0 1
17078: PUSH
17079: LD_INT 4
17081: MINUS
17082: PUSH
17083: LD_VAR 0 2
17087: PUSH
17088: LD_INT 1
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: LIST
17095: PUSH
17096: LD_VAR 0 1
17100: PUSH
17101: LD_VAR 0 2
17105: PUSH
17106: LD_INT 3
17108: PLUS
17109: PUSH
17110: LD_INT 0
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: LIST
17117: PUSH
17118: LD_VAR 0 1
17122: PUSH
17123: LD_INT 4
17125: PLUS
17126: PUSH
17127: LD_VAR 0 2
17131: PUSH
17132: LD_INT 4
17134: PLUS
17135: PUSH
17136: LD_INT 5
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: LIST
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: ST_TO_ADDR
// end ; 2 :
17151: GO 17710
17153: LD_INT 2
17155: DOUBLE
17156: EQUAL
17157: IFTRUE 17161
17159: GO 17290
17161: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
17162: LD_ADDR_VAR 0 5
17166: PUSH
17167: LD_VAR 0 1
17171: PUSH
17172: LD_VAR 0 2
17176: PUSH
17177: LD_INT 3
17179: MINUS
17180: PUSH
17181: LD_INT 3
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: LIST
17188: PUSH
17189: LD_VAR 0 1
17193: PUSH
17194: LD_INT 4
17196: PLUS
17197: PUSH
17198: LD_VAR 0 2
17202: PUSH
17203: LD_INT 4
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: LIST
17210: PUSH
17211: LD_VAR 0 1
17215: PUSH
17216: LD_VAR 0 2
17220: PUSH
17221: LD_INT 4
17223: PLUS
17224: PUSH
17225: LD_INT 0
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: LIST
17232: PUSH
17233: LD_VAR 0 1
17237: PUSH
17238: LD_INT 3
17240: MINUS
17241: PUSH
17242: LD_VAR 0 2
17246: PUSH
17247: LD_INT 1
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: LIST
17254: PUSH
17255: LD_VAR 0 1
17259: PUSH
17260: LD_INT 4
17262: MINUS
17263: PUSH
17264: LD_VAR 0 2
17268: PUSH
17269: LD_INT 4
17271: MINUS
17272: PUSH
17273: LD_INT 2
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: LIST
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: ST_TO_ADDR
// end ; 3 :
17288: GO 17710
17290: LD_INT 3
17292: DOUBLE
17293: EQUAL
17294: IFTRUE 17298
17296: GO 17431
17298: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
17299: LD_ADDR_VAR 0 5
17303: PUSH
17304: LD_VAR 0 1
17308: PUSH
17309: LD_INT 3
17311: PLUS
17312: PUSH
17313: LD_VAR 0 2
17317: PUSH
17318: LD_INT 4
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: LIST
17325: PUSH
17326: LD_VAR 0 1
17330: PUSH
17331: LD_INT 4
17333: PLUS
17334: PUSH
17335: LD_VAR 0 2
17339: PUSH
17340: LD_INT 4
17342: PLUS
17343: PUSH
17344: LD_INT 5
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: LIST
17351: PUSH
17352: LD_VAR 0 1
17356: PUSH
17357: LD_INT 4
17359: MINUS
17360: PUSH
17361: LD_VAR 0 2
17365: PUSH
17366: LD_INT 1
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: LIST
17373: PUSH
17374: LD_VAR 0 1
17378: PUSH
17379: LD_VAR 0 2
17383: PUSH
17384: LD_INT 4
17386: MINUS
17387: PUSH
17388: LD_INT 3
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: LIST
17395: PUSH
17396: LD_VAR 0 1
17400: PUSH
17401: LD_INT 3
17403: MINUS
17404: PUSH
17405: LD_VAR 0 2
17409: PUSH
17410: LD_INT 3
17412: MINUS
17413: PUSH
17414: LD_INT 2
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: ST_TO_ADDR
// end ; 4 :
17429: GO 17710
17431: LD_INT 4
17433: DOUBLE
17434: EQUAL
17435: IFTRUE 17439
17437: GO 17572
17439: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
17440: LD_ADDR_VAR 0 5
17444: PUSH
17445: LD_VAR 0 1
17449: PUSH
17450: LD_VAR 0 2
17454: PUSH
17455: LD_INT 4
17457: PLUS
17458: PUSH
17459: LD_INT 0
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: LIST
17466: PUSH
17467: LD_VAR 0 1
17471: PUSH
17472: LD_INT 3
17474: PLUS
17475: PUSH
17476: LD_VAR 0 2
17480: PUSH
17481: LD_INT 3
17483: PLUS
17484: PUSH
17485: LD_INT 5
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: PUSH
17493: LD_VAR 0 1
17497: PUSH
17498: LD_INT 3
17500: PLUS
17501: PUSH
17502: LD_VAR 0 2
17506: PUSH
17507: LD_INT 4
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: LIST
17514: PUSH
17515: LD_VAR 0 1
17519: PUSH
17520: LD_VAR 0 2
17524: PUSH
17525: LD_INT 3
17527: MINUS
17528: PUSH
17529: LD_INT 3
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: LIST
17536: PUSH
17537: LD_VAR 0 1
17541: PUSH
17542: LD_INT 4
17544: MINUS
17545: PUSH
17546: LD_VAR 0 2
17550: PUSH
17551: LD_INT 4
17553: MINUS
17554: PUSH
17555: LD_INT 2
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: LIST
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: ST_TO_ADDR
// end ; 5 :
17570: GO 17710
17572: LD_INT 5
17574: DOUBLE
17575: EQUAL
17576: IFTRUE 17580
17578: GO 17709
17580: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
17581: LD_ADDR_VAR 0 5
17585: PUSH
17586: LD_VAR 0 1
17590: PUSH
17591: LD_INT 4
17593: MINUS
17594: PUSH
17595: LD_VAR 0 2
17599: PUSH
17600: LD_INT 1
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: LIST
17607: PUSH
17608: LD_VAR 0 1
17612: PUSH
17613: LD_VAR 0 2
17617: PUSH
17618: LD_INT 4
17620: MINUS
17621: PUSH
17622: LD_INT 3
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: LIST
17629: PUSH
17630: LD_VAR 0 1
17634: PUSH
17635: LD_INT 4
17637: PLUS
17638: PUSH
17639: LD_VAR 0 2
17643: PUSH
17644: LD_INT 4
17646: PLUS
17647: PUSH
17648: LD_INT 5
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: LIST
17655: PUSH
17656: LD_VAR 0 1
17660: PUSH
17661: LD_INT 3
17663: PLUS
17664: PUSH
17665: LD_VAR 0 2
17669: PUSH
17670: LD_INT 4
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: LIST
17677: PUSH
17678: LD_VAR 0 1
17682: PUSH
17683: LD_VAR 0 2
17687: PUSH
17688: LD_INT 3
17690: PLUS
17691: PUSH
17692: LD_INT 0
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: LIST
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: ST_TO_ADDR
// end ; end ;
17707: GO 17710
17709: POP
// result := list ;
17710: LD_ADDR_VAR 0 4
17714: PUSH
17715: LD_VAR 0 5
17719: ST_TO_ADDR
// end ;
17720: LD_VAR 0 4
17724: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17725: LD_INT 0
17727: PPUSH
17728: PPUSH
17729: PPUSH
17730: PPUSH
17731: PPUSH
17732: PPUSH
17733: PPUSH
17734: PPUSH
17735: PPUSH
// result := false ;
17736: LD_ADDR_VAR 0 7
17740: PUSH
17741: LD_INT 0
17743: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17744: LD_VAR 0 1
17748: NOT
17749: PUSH
17750: LD_VAR 0 1
17754: PPUSH
17755: CALL_OW 266
17759: PUSH
17760: LD_INT 0
17762: PUSH
17763: LD_INT 1
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: IN
17770: NOT
17771: OR
17772: PUSH
17773: LD_VAR 0 2
17777: NOT
17778: OR
17779: PUSH
17780: LD_VAR 0 5
17784: PUSH
17785: LD_INT 0
17787: PUSH
17788: LD_INT 1
17790: PUSH
17791: LD_INT 2
17793: PUSH
17794: LD_INT 3
17796: PUSH
17797: LD_INT 4
17799: PUSH
17800: LD_INT 5
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: IN
17811: NOT
17812: OR
17813: PUSH
17814: LD_VAR 0 3
17818: PPUSH
17819: LD_VAR 0 4
17823: PPUSH
17824: CALL_OW 488
17828: NOT
17829: OR
17830: IFFALSE 17834
// exit ;
17832: GO 18515
// pom := GetBase ( bdepot ) ;
17834: LD_ADDR_VAR 0 10
17838: PUSH
17839: LD_VAR 0 1
17843: PPUSH
17844: CALL_OW 274
17848: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17849: LD_ADDR_VAR 0 11
17853: PUSH
17854: LD_VAR 0 2
17858: PPUSH
17859: LD_VAR 0 1
17863: PPUSH
17864: CALL_OW 248
17868: PPUSH
17869: CALL_OW 450
17873: ST_TO_ADDR
// if check_cost then
17874: LD_VAR 0 6
17878: IFFALSE 17955
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17880: LD_VAR 0 10
17884: PPUSH
17885: LD_INT 1
17887: PPUSH
17888: CALL_OW 275
17892: PUSH
17893: LD_VAR 0 11
17897: PUSH
17898: LD_INT 1
17900: ARRAY
17901: GREATEREQUAL
17902: PUSH
17903: LD_VAR 0 10
17907: PPUSH
17908: LD_INT 2
17910: PPUSH
17911: CALL_OW 275
17915: PUSH
17916: LD_VAR 0 11
17920: PUSH
17921: LD_INT 2
17923: ARRAY
17924: GREATEREQUAL
17925: AND
17926: PUSH
17927: LD_VAR 0 10
17931: PPUSH
17932: LD_INT 3
17934: PPUSH
17935: CALL_OW 275
17939: PUSH
17940: LD_VAR 0 11
17944: PUSH
17945: LD_INT 3
17947: ARRAY
17948: GREATEREQUAL
17949: AND
17950: NOT
17951: IFFALSE 17955
// exit ;
17953: GO 18515
// if GetBType ( bdepot ) = b_depot then
17955: LD_VAR 0 1
17959: PPUSH
17960: CALL_OW 266
17964: PUSH
17965: LD_INT 0
17967: EQUAL
17968: IFFALSE 17980
// dist := 28 else
17970: LD_ADDR_VAR 0 14
17974: PUSH
17975: LD_INT 28
17977: ST_TO_ADDR
17978: GO 17988
// dist := 36 ;
17980: LD_ADDR_VAR 0 14
17984: PUSH
17985: LD_INT 36
17987: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17988: LD_VAR 0 1
17992: PPUSH
17993: LD_VAR 0 3
17997: PPUSH
17998: LD_VAR 0 4
18002: PPUSH
18003: CALL_OW 297
18007: PUSH
18008: LD_VAR 0 14
18012: GREATER
18013: IFFALSE 18017
// exit ;
18015: GO 18515
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
18017: LD_ADDR_VAR 0 12
18021: PUSH
18022: LD_VAR 0 2
18026: PPUSH
18027: LD_VAR 0 3
18031: PPUSH
18032: LD_VAR 0 4
18036: PPUSH
18037: LD_VAR 0 5
18041: PPUSH
18042: LD_VAR 0 1
18046: PPUSH
18047: CALL_OW 248
18051: PPUSH
18052: LD_INT 0
18054: PPUSH
18055: CALL 18520 0 6
18059: ST_TO_ADDR
// if not hexes then
18060: LD_VAR 0 12
18064: NOT
18065: IFFALSE 18069
// exit ;
18067: GO 18515
// hex := GetHexInfo ( x , y ) ;
18069: LD_ADDR_VAR 0 15
18073: PUSH
18074: LD_VAR 0 3
18078: PPUSH
18079: LD_VAR 0 4
18083: PPUSH
18084: CALL_OW 546
18088: ST_TO_ADDR
// if hex [ 1 ] then
18089: LD_VAR 0 15
18093: PUSH
18094: LD_INT 1
18096: ARRAY
18097: IFFALSE 18101
// exit ;
18099: GO 18515
// height := hex [ 2 ] ;
18101: LD_ADDR_VAR 0 13
18105: PUSH
18106: LD_VAR 0 15
18110: PUSH
18111: LD_INT 2
18113: ARRAY
18114: ST_TO_ADDR
// for i = 1 to hexes do
18115: LD_ADDR_VAR 0 8
18119: PUSH
18120: DOUBLE
18121: LD_INT 1
18123: DEC
18124: ST_TO_ADDR
18125: LD_VAR 0 12
18129: PUSH
18130: FOR_TO
18131: IFFALSE 18459
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18133: LD_VAR 0 12
18137: PUSH
18138: LD_VAR 0 8
18142: ARRAY
18143: PUSH
18144: LD_INT 1
18146: ARRAY
18147: PPUSH
18148: LD_VAR 0 12
18152: PUSH
18153: LD_VAR 0 8
18157: ARRAY
18158: PUSH
18159: LD_INT 2
18161: ARRAY
18162: PPUSH
18163: CALL_OW 488
18167: NOT
18168: IFFALSE 18172
// continue ;
18170: GO 18130
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18172: LD_ADDR_VAR 0 9
18176: PUSH
18177: LD_VAR 0 12
18181: PUSH
18182: LD_VAR 0 8
18186: ARRAY
18187: PUSH
18188: LD_INT 1
18190: ARRAY
18191: PPUSH
18192: LD_VAR 0 12
18196: PUSH
18197: LD_VAR 0 8
18201: ARRAY
18202: PUSH
18203: LD_INT 2
18205: ARRAY
18206: PPUSH
18207: CALL_OW 546
18211: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18212: LD_VAR 0 9
18216: PUSH
18217: LD_INT 1
18219: ARRAY
18220: PUSH
18221: LD_VAR 0 9
18225: PUSH
18226: LD_INT 2
18228: ARRAY
18229: PUSH
18230: LD_VAR 0 13
18234: PUSH
18235: LD_INT 2
18237: PLUS
18238: GREATER
18239: OR
18240: PUSH
18241: LD_VAR 0 9
18245: PUSH
18246: LD_INT 2
18248: ARRAY
18249: PUSH
18250: LD_VAR 0 13
18254: PUSH
18255: LD_INT 2
18257: MINUS
18258: LESS
18259: OR
18260: PUSH
18261: LD_VAR 0 9
18265: PUSH
18266: LD_INT 3
18268: ARRAY
18269: PUSH
18270: LD_INT 0
18272: PUSH
18273: LD_INT 8
18275: PUSH
18276: LD_INT 9
18278: PUSH
18279: LD_INT 10
18281: PUSH
18282: LD_INT 11
18284: PUSH
18285: LD_INT 12
18287: PUSH
18288: LD_INT 13
18290: PUSH
18291: LD_INT 16
18293: PUSH
18294: LD_INT 17
18296: PUSH
18297: LD_INT 18
18299: PUSH
18300: LD_INT 19
18302: PUSH
18303: LD_INT 20
18305: PUSH
18306: LD_INT 21
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: IN
18324: NOT
18325: OR
18326: PUSH
18327: LD_VAR 0 9
18331: PUSH
18332: LD_INT 5
18334: ARRAY
18335: NOT
18336: OR
18337: PUSH
18338: LD_VAR 0 9
18342: PUSH
18343: LD_INT 6
18345: ARRAY
18346: PUSH
18347: LD_INT 1
18349: PUSH
18350: LD_INT 2
18352: PUSH
18353: LD_INT 7
18355: PUSH
18356: LD_INT 9
18358: PUSH
18359: LD_INT 10
18361: PUSH
18362: LD_INT 11
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: IN
18373: NOT
18374: OR
18375: PUSH
18376: LD_VAR 0 12
18380: PUSH
18381: LD_VAR 0 8
18385: ARRAY
18386: PUSH
18387: LD_INT 1
18389: ARRAY
18390: PPUSH
18391: LD_VAR 0 12
18395: PUSH
18396: LD_VAR 0 8
18400: ARRAY
18401: PUSH
18402: LD_INT 2
18404: ARRAY
18405: PPUSH
18406: CALL_OW 428
18410: PUSH
18411: LD_INT 0
18413: GREATER
18414: OR
18415: PUSH
18416: LD_VAR 0 12
18420: PUSH
18421: LD_VAR 0 8
18425: ARRAY
18426: PUSH
18427: LD_INT 1
18429: ARRAY
18430: PPUSH
18431: LD_VAR 0 12
18435: PUSH
18436: LD_VAR 0 8
18440: ARRAY
18441: PUSH
18442: LD_INT 2
18444: ARRAY
18445: PPUSH
18446: CALL_OW 351
18450: OR
18451: IFFALSE 18457
// exit ;
18453: POP
18454: POP
18455: GO 18515
// end ;
18457: GO 18130
18459: POP
18460: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
18461: LD_VAR 0 2
18465: PUSH
18466: LD_INT 29
18468: PUSH
18469: LD_INT 30
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: IN
18476: PUSH
18477: LD_VAR 0 3
18481: PPUSH
18482: LD_VAR 0 4
18486: PPUSH
18487: LD_VAR 0 1
18491: PPUSH
18492: CALL_OW 255
18496: PPUSH
18497: CALL_OW 440
18501: NOT
18502: AND
18503: IFFALSE 18507
// exit ;
18505: GO 18515
// result := true ;
18507: LD_ADDR_VAR 0 7
18511: PUSH
18512: LD_INT 1
18514: ST_TO_ADDR
// end ;
18515: LD_VAR 0 7
18519: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
18520: LD_INT 0
18522: PPUSH
18523: PPUSH
18524: PPUSH
18525: PPUSH
18526: PPUSH
18527: PPUSH
18528: PPUSH
18529: PPUSH
18530: PPUSH
18531: PPUSH
18532: PPUSH
18533: PPUSH
18534: PPUSH
18535: PPUSH
18536: PPUSH
18537: PPUSH
18538: PPUSH
18539: PPUSH
18540: PPUSH
18541: PPUSH
18542: PPUSH
18543: PPUSH
18544: PPUSH
18545: PPUSH
18546: PPUSH
18547: PPUSH
18548: PPUSH
18549: PPUSH
18550: PPUSH
18551: PPUSH
18552: PPUSH
18553: PPUSH
18554: PPUSH
18555: PPUSH
18556: PPUSH
18557: PPUSH
18558: PPUSH
18559: PPUSH
18560: PPUSH
18561: PPUSH
18562: PPUSH
18563: PPUSH
18564: PPUSH
18565: PPUSH
18566: PPUSH
18567: PPUSH
18568: PPUSH
18569: PPUSH
18570: PPUSH
18571: PPUSH
18572: PPUSH
18573: PPUSH
18574: PPUSH
18575: PPUSH
18576: PPUSH
18577: PPUSH
18578: PPUSH
18579: PPUSH
// result = [ ] ;
18580: LD_ADDR_VAR 0 7
18584: PUSH
18585: EMPTY
18586: ST_TO_ADDR
// temp_list = [ ] ;
18587: LD_ADDR_VAR 0 9
18591: PUSH
18592: EMPTY
18593: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18594: LD_VAR 0 4
18598: PUSH
18599: LD_INT 0
18601: PUSH
18602: LD_INT 1
18604: PUSH
18605: LD_INT 2
18607: PUSH
18608: LD_INT 3
18610: PUSH
18611: LD_INT 4
18613: PUSH
18614: LD_INT 5
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: IN
18625: NOT
18626: PUSH
18627: LD_VAR 0 1
18631: PUSH
18632: LD_INT 0
18634: PUSH
18635: LD_INT 1
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: IN
18642: PUSH
18643: LD_VAR 0 5
18647: PUSH
18648: LD_INT 1
18650: PUSH
18651: LD_INT 2
18653: PUSH
18654: LD_INT 3
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: LIST
18661: IN
18662: NOT
18663: AND
18664: OR
18665: IFFALSE 18669
// exit ;
18667: GO 37054
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18669: LD_VAR 0 1
18673: PUSH
18674: LD_INT 6
18676: PUSH
18677: LD_INT 7
18679: PUSH
18680: LD_INT 8
18682: PUSH
18683: LD_INT 13
18685: PUSH
18686: LD_INT 12
18688: PUSH
18689: LD_INT 15
18691: PUSH
18692: LD_INT 11
18694: PUSH
18695: LD_INT 14
18697: PUSH
18698: LD_INT 10
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: IN
18712: IFFALSE 18722
// btype = b_lab ;
18714: LD_ADDR_VAR 0 1
18718: PUSH
18719: LD_INT 6
18721: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18722: LD_VAR 0 6
18726: PUSH
18727: LD_INT 0
18729: PUSH
18730: LD_INT 1
18732: PUSH
18733: LD_INT 2
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: LIST
18740: IN
18741: NOT
18742: PUSH
18743: LD_VAR 0 1
18747: PUSH
18748: LD_INT 0
18750: PUSH
18751: LD_INT 1
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 3
18759: PUSH
18760: LD_INT 6
18762: PUSH
18763: LD_INT 36
18765: PUSH
18766: LD_INT 4
18768: PUSH
18769: LD_INT 5
18771: PUSH
18772: LD_INT 31
18774: PUSH
18775: LD_INT 32
18777: PUSH
18778: LD_INT 33
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: IN
18794: NOT
18795: PUSH
18796: LD_VAR 0 6
18800: PUSH
18801: LD_INT 1
18803: EQUAL
18804: AND
18805: OR
18806: PUSH
18807: LD_VAR 0 1
18811: PUSH
18812: LD_INT 2
18814: PUSH
18815: LD_INT 3
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: IN
18822: NOT
18823: PUSH
18824: LD_VAR 0 6
18828: PUSH
18829: LD_INT 2
18831: EQUAL
18832: AND
18833: OR
18834: IFFALSE 18844
// mode = 0 ;
18836: LD_ADDR_VAR 0 6
18840: PUSH
18841: LD_INT 0
18843: ST_TO_ADDR
// case mode of 0 :
18844: LD_VAR 0 6
18848: PUSH
18849: LD_INT 0
18851: DOUBLE
18852: EQUAL
18853: IFTRUE 18857
18855: GO 30310
18857: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18858: LD_ADDR_VAR 0 11
18862: PUSH
18863: LD_INT 0
18865: PUSH
18866: LD_INT 0
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 0
18875: PUSH
18876: LD_INT 1
18878: NEG
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 1
18886: PUSH
18887: LD_INT 0
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 1
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 0
18906: PUSH
18907: LD_INT 1
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 1
18916: NEG
18917: PUSH
18918: LD_INT 0
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 1
18927: NEG
18928: PUSH
18929: LD_INT 1
18931: NEG
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 1
18939: NEG
18940: PUSH
18941: LD_INT 2
18943: NEG
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 0
18951: PUSH
18952: LD_INT 2
18954: NEG
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 1
18962: PUSH
18963: LD_INT 1
18965: NEG
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: LD_INT 1
18973: PUSH
18974: LD_INT 2
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 0
18983: PUSH
18984: LD_INT 2
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 1
18993: NEG
18994: PUSH
18995: LD_INT 1
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: LD_INT 1
19004: PUSH
19005: LD_INT 3
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 0
19014: PUSH
19015: LD_INT 3
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 1
19024: NEG
19025: PUSH
19026: LD_INT 2
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19051: LD_ADDR_VAR 0 12
19055: PUSH
19056: LD_INT 0
19058: PUSH
19059: LD_INT 0
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 0
19068: PUSH
19069: LD_INT 1
19071: NEG
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 1
19079: PUSH
19080: LD_INT 0
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 1
19089: PUSH
19090: LD_INT 1
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 0
19099: PUSH
19100: LD_INT 1
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 1
19109: NEG
19110: PUSH
19111: LD_INT 0
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 1
19120: NEG
19121: PUSH
19122: LD_INT 1
19124: NEG
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 1
19132: PUSH
19133: LD_INT 1
19135: NEG
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 2
19143: PUSH
19144: LD_INT 0
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 2
19153: PUSH
19154: LD_INT 1
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 1
19163: NEG
19164: PUSH
19165: LD_INT 1
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 2
19174: NEG
19175: PUSH
19176: LD_INT 0
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 2
19185: NEG
19186: PUSH
19187: LD_INT 1
19189: NEG
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 2
19197: NEG
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 3
19208: NEG
19209: PUSH
19210: LD_INT 0
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 3
19219: NEG
19220: PUSH
19221: LD_INT 1
19223: NEG
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19247: LD_ADDR_VAR 0 13
19251: PUSH
19252: LD_INT 0
19254: PUSH
19255: LD_INT 0
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: LD_INT 0
19264: PUSH
19265: LD_INT 1
19267: NEG
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 1
19275: PUSH
19276: LD_INT 0
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 1
19285: PUSH
19286: LD_INT 1
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 0
19295: PUSH
19296: LD_INT 1
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 1
19305: NEG
19306: PUSH
19307: LD_INT 0
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 1
19316: NEG
19317: PUSH
19318: LD_INT 1
19320: NEG
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 1
19328: NEG
19329: PUSH
19330: LD_INT 2
19332: NEG
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 2
19340: PUSH
19341: LD_INT 1
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 2
19350: PUSH
19351: LD_INT 2
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 1
19360: PUSH
19361: LD_INT 2
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 2
19370: NEG
19371: PUSH
19372: LD_INT 1
19374: NEG
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 2
19382: NEG
19383: PUSH
19384: LD_INT 2
19386: NEG
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 2
19394: NEG
19395: PUSH
19396: LD_INT 3
19398: NEG
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 3
19406: NEG
19407: PUSH
19408: LD_INT 2
19410: NEG
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 3
19418: NEG
19419: PUSH
19420: LD_INT 3
19422: NEG
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19446: LD_ADDR_VAR 0 14
19450: PUSH
19451: LD_INT 0
19453: PUSH
19454: LD_INT 0
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 0
19463: PUSH
19464: LD_INT 1
19466: NEG
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 1
19474: PUSH
19475: LD_INT 0
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 1
19484: PUSH
19485: LD_INT 1
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 0
19494: PUSH
19495: LD_INT 1
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 1
19504: NEG
19505: PUSH
19506: LD_INT 0
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 1
19515: NEG
19516: PUSH
19517: LD_INT 1
19519: NEG
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 1
19527: NEG
19528: PUSH
19529: LD_INT 2
19531: NEG
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 0
19539: PUSH
19540: LD_INT 2
19542: NEG
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 1
19550: PUSH
19551: LD_INT 1
19553: NEG
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: LD_INT 2
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 0
19571: PUSH
19572: LD_INT 2
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 1
19581: NEG
19582: PUSH
19583: LD_INT 1
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 1
19592: NEG
19593: PUSH
19594: LD_INT 3
19596: NEG
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 0
19604: PUSH
19605: LD_INT 3
19607: NEG
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 1
19615: PUSH
19616: LD_INT 2
19618: NEG
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19642: LD_ADDR_VAR 0 15
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: LD_INT 0
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 0
19659: PUSH
19660: LD_INT 1
19662: NEG
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 1
19670: PUSH
19671: LD_INT 0
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 1
19680: PUSH
19681: LD_INT 1
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 0
19690: PUSH
19691: LD_INT 1
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 1
19700: NEG
19701: PUSH
19702: LD_INT 0
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 1
19711: NEG
19712: PUSH
19713: LD_INT 1
19715: NEG
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 1
19723: PUSH
19724: LD_INT 1
19726: NEG
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 2
19734: PUSH
19735: LD_INT 0
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 2
19744: PUSH
19745: LD_INT 1
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 1
19754: NEG
19755: PUSH
19756: LD_INT 1
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 2
19765: NEG
19766: PUSH
19767: LD_INT 0
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 2
19776: NEG
19777: PUSH
19778: LD_INT 1
19780: NEG
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PUSH
19786: LD_INT 2
19788: PUSH
19789: LD_INT 1
19791: NEG
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 3
19799: PUSH
19800: LD_INT 0
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 3
19809: PUSH
19810: LD_INT 1
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19835: LD_ADDR_VAR 0 16
19839: PUSH
19840: LD_INT 0
19842: PUSH
19843: LD_INT 0
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 0
19852: PUSH
19853: LD_INT 1
19855: NEG
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 1
19863: PUSH
19864: LD_INT 0
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: LD_INT 1
19873: PUSH
19874: LD_INT 1
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 0
19883: PUSH
19884: LD_INT 1
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 1
19893: NEG
19894: PUSH
19895: LD_INT 0
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 1
19904: NEG
19905: PUSH
19906: LD_INT 1
19908: NEG
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 1
19916: NEG
19917: PUSH
19918: LD_INT 2
19920: NEG
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 2
19928: PUSH
19929: LD_INT 1
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 2
19938: PUSH
19939: LD_INT 2
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 1
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 2
19958: NEG
19959: PUSH
19960: LD_INT 1
19962: NEG
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 2
19970: NEG
19971: PUSH
19972: LD_INT 2
19974: NEG
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 3
19982: PUSH
19983: LD_INT 2
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 3
19992: PUSH
19993: LD_INT 3
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 2
20002: PUSH
20003: LD_INT 3
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20028: LD_ADDR_VAR 0 17
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: LD_INT 0
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 0
20045: PUSH
20046: LD_INT 1
20048: NEG
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 1
20056: PUSH
20057: LD_INT 0
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 1
20066: PUSH
20067: LD_INT 1
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 0
20076: PUSH
20077: LD_INT 1
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 1
20086: NEG
20087: PUSH
20088: LD_INT 0
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 1
20097: NEG
20098: PUSH
20099: LD_INT 1
20101: NEG
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 1
20109: NEG
20110: PUSH
20111: LD_INT 2
20113: NEG
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 0
20121: PUSH
20122: LD_INT 2
20124: NEG
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: LD_INT 1
20135: NEG
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 2
20143: PUSH
20144: LD_INT 0
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 2
20153: PUSH
20154: LD_INT 1
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 2
20163: PUSH
20164: LD_INT 2
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 0
20183: PUSH
20184: LD_INT 2
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 1
20193: NEG
20194: PUSH
20195: LD_INT 1
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 2
20204: NEG
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 2
20215: NEG
20216: PUSH
20217: LD_INT 1
20219: NEG
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 2
20227: NEG
20228: PUSH
20229: LD_INT 2
20231: NEG
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20258: LD_ADDR_VAR 0 18
20262: PUSH
20263: LD_INT 0
20265: PUSH
20266: LD_INT 0
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 0
20275: PUSH
20276: LD_INT 1
20278: NEG
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 1
20286: PUSH
20287: LD_INT 0
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 1
20296: PUSH
20297: LD_INT 1
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 0
20306: PUSH
20307: LD_INT 1
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 1
20316: NEG
20317: PUSH
20318: LD_INT 0
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 1
20327: NEG
20328: PUSH
20329: LD_INT 1
20331: NEG
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 1
20339: NEG
20340: PUSH
20341: LD_INT 2
20343: NEG
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 0
20351: PUSH
20352: LD_INT 2
20354: NEG
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: LD_INT 1
20365: NEG
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 2
20373: PUSH
20374: LD_INT 0
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 2
20383: PUSH
20384: LD_INT 1
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 2
20393: PUSH
20394: LD_INT 2
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: LD_INT 2
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: LD_INT 2
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 1
20423: NEG
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 2
20434: NEG
20435: PUSH
20436: LD_INT 0
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: NEG
20446: PUSH
20447: LD_INT 1
20449: NEG
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 2
20457: NEG
20458: PUSH
20459: LD_INT 2
20461: NEG
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20488: LD_ADDR_VAR 0 19
20492: PUSH
20493: LD_INT 0
20495: PUSH
20496: LD_INT 0
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 0
20505: PUSH
20506: LD_INT 1
20508: NEG
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 1
20516: PUSH
20517: LD_INT 0
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: LD_INT 1
20526: PUSH
20527: LD_INT 1
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: LD_INT 0
20536: PUSH
20537: LD_INT 1
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 1
20546: NEG
20547: PUSH
20548: LD_INT 0
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 1
20557: NEG
20558: PUSH
20559: LD_INT 1
20561: NEG
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 1
20569: NEG
20570: PUSH
20571: LD_INT 2
20573: NEG
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 0
20581: PUSH
20582: LD_INT 2
20584: NEG
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: LD_INT 1
20595: NEG
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 2
20603: PUSH
20604: LD_INT 0
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 2
20613: PUSH
20614: LD_INT 1
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 2
20623: PUSH
20624: LD_INT 2
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 1
20633: PUSH
20634: LD_INT 2
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 0
20643: PUSH
20644: LD_INT 2
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 1
20653: NEG
20654: PUSH
20655: LD_INT 1
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 2
20664: NEG
20665: PUSH
20666: LD_INT 0
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 2
20675: NEG
20676: PUSH
20677: LD_INT 1
20679: NEG
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 2
20687: NEG
20688: PUSH
20689: LD_INT 2
20691: NEG
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20718: LD_ADDR_VAR 0 20
20722: PUSH
20723: LD_INT 0
20725: PUSH
20726: LD_INT 0
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 0
20735: PUSH
20736: LD_INT 1
20738: NEG
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 1
20746: PUSH
20747: LD_INT 0
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 1
20756: PUSH
20757: LD_INT 1
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 0
20766: PUSH
20767: LD_INT 1
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 1
20776: NEG
20777: PUSH
20778: LD_INT 0
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 1
20787: NEG
20788: PUSH
20789: LD_INT 1
20791: NEG
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 1
20799: NEG
20800: PUSH
20801: LD_INT 2
20803: NEG
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 0
20811: PUSH
20812: LD_INT 2
20814: NEG
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 1
20822: PUSH
20823: LD_INT 1
20825: NEG
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 2
20833: PUSH
20834: LD_INT 0
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 2
20843: PUSH
20844: LD_INT 1
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 2
20853: PUSH
20854: LD_INT 2
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 1
20863: PUSH
20864: LD_INT 2
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 0
20873: PUSH
20874: LD_INT 2
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 1
20883: NEG
20884: PUSH
20885: LD_INT 1
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 2
20894: NEG
20895: PUSH
20896: LD_INT 0
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 2
20905: NEG
20906: PUSH
20907: LD_INT 1
20909: NEG
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 2
20917: NEG
20918: PUSH
20919: LD_INT 2
20921: NEG
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20948: LD_ADDR_VAR 0 21
20952: PUSH
20953: LD_INT 0
20955: PUSH
20956: LD_INT 0
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 0
20965: PUSH
20966: LD_INT 1
20968: NEG
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: LD_INT 0
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 1
20986: PUSH
20987: LD_INT 1
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 0
20996: PUSH
20997: LD_INT 1
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 1
21006: NEG
21007: PUSH
21008: LD_INT 0
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 1
21017: NEG
21018: PUSH
21019: LD_INT 1
21021: NEG
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 1
21029: NEG
21030: PUSH
21031: LD_INT 2
21033: NEG
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: LD_INT 0
21041: PUSH
21042: LD_INT 2
21044: NEG
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 1
21052: PUSH
21053: LD_INT 1
21055: NEG
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 2
21063: PUSH
21064: LD_INT 0
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 2
21073: PUSH
21074: LD_INT 1
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 2
21083: PUSH
21084: LD_INT 2
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 1
21093: PUSH
21094: LD_INT 2
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 0
21103: PUSH
21104: LD_INT 2
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 1
21113: NEG
21114: PUSH
21115: LD_INT 1
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 2
21124: NEG
21125: PUSH
21126: LD_INT 0
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 2
21135: NEG
21136: PUSH
21137: LD_INT 1
21139: NEG
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 2
21147: NEG
21148: PUSH
21149: LD_INT 2
21151: NEG
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21178: LD_ADDR_VAR 0 22
21182: PUSH
21183: LD_INT 0
21185: PUSH
21186: LD_INT 0
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 0
21195: PUSH
21196: LD_INT 1
21198: NEG
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 1
21206: PUSH
21207: LD_INT 0
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 1
21216: PUSH
21217: LD_INT 1
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 0
21226: PUSH
21227: LD_INT 1
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 1
21236: NEG
21237: PUSH
21238: LD_INT 0
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 1
21247: NEG
21248: PUSH
21249: LD_INT 1
21251: NEG
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: LD_INT 1
21259: NEG
21260: PUSH
21261: LD_INT 2
21263: NEG
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 0
21271: PUSH
21272: LD_INT 2
21274: NEG
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 1
21282: PUSH
21283: LD_INT 1
21285: NEG
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 2
21293: PUSH
21294: LD_INT 0
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 2
21303: PUSH
21304: LD_INT 1
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 2
21313: PUSH
21314: LD_INT 2
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 1
21323: PUSH
21324: LD_INT 2
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 0
21333: PUSH
21334: LD_INT 2
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 1
21343: NEG
21344: PUSH
21345: LD_INT 1
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 2
21354: NEG
21355: PUSH
21356: LD_INT 0
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 2
21365: NEG
21366: PUSH
21367: LD_INT 1
21369: NEG
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 2
21377: NEG
21378: PUSH
21379: LD_INT 2
21381: NEG
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21408: LD_ADDR_VAR 0 23
21412: PUSH
21413: LD_INT 0
21415: PUSH
21416: LD_INT 0
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 0
21425: PUSH
21426: LD_INT 1
21428: NEG
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 1
21436: PUSH
21437: LD_INT 0
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 1
21446: PUSH
21447: LD_INT 1
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 0
21456: PUSH
21457: LD_INT 1
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 1
21466: NEG
21467: PUSH
21468: LD_INT 0
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 1
21477: NEG
21478: PUSH
21479: LD_INT 1
21481: NEG
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 1
21489: NEG
21490: PUSH
21491: LD_INT 2
21493: NEG
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 0
21501: PUSH
21502: LD_INT 2
21504: NEG
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 1
21512: PUSH
21513: LD_INT 1
21515: NEG
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 2
21523: PUSH
21524: LD_INT 0
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 2
21533: PUSH
21534: LD_INT 1
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 2
21543: PUSH
21544: LD_INT 2
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 1
21553: PUSH
21554: LD_INT 2
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 0
21563: PUSH
21564: LD_INT 2
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 1
21573: NEG
21574: PUSH
21575: LD_INT 1
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 2
21584: NEG
21585: PUSH
21586: LD_INT 0
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 2
21595: NEG
21596: PUSH
21597: LD_INT 1
21599: NEG
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 2
21607: NEG
21608: PUSH
21609: LD_INT 2
21611: NEG
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 2
21619: NEG
21620: PUSH
21621: LD_INT 3
21623: NEG
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 1
21631: NEG
21632: PUSH
21633: LD_INT 3
21635: NEG
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 1
21643: PUSH
21644: LD_INT 2
21646: NEG
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 2
21654: PUSH
21655: LD_INT 1
21657: NEG
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21688: LD_ADDR_VAR 0 24
21692: PUSH
21693: LD_INT 0
21695: PUSH
21696: LD_INT 0
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 0
21705: PUSH
21706: LD_INT 1
21708: NEG
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 1
21716: PUSH
21717: LD_INT 0
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 1
21726: PUSH
21727: LD_INT 1
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 0
21736: PUSH
21737: LD_INT 1
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 1
21746: NEG
21747: PUSH
21748: LD_INT 0
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 1
21757: NEG
21758: PUSH
21759: LD_INT 1
21761: NEG
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 1
21769: NEG
21770: PUSH
21771: LD_INT 2
21773: NEG
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 0
21781: PUSH
21782: LD_INT 2
21784: NEG
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 1
21792: PUSH
21793: LD_INT 1
21795: NEG
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 2
21803: PUSH
21804: LD_INT 0
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 2
21813: PUSH
21814: LD_INT 1
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: LD_INT 2
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 1
21833: PUSH
21834: LD_INT 2
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 0
21843: PUSH
21844: LD_INT 2
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 1
21853: NEG
21854: PUSH
21855: LD_INT 1
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 2
21864: NEG
21865: PUSH
21866: LD_INT 0
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 2
21875: NEG
21876: PUSH
21877: LD_INT 1
21879: NEG
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 2
21887: NEG
21888: PUSH
21889: LD_INT 2
21891: NEG
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 1
21899: PUSH
21900: LD_INT 2
21902: NEG
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 2
21910: PUSH
21911: LD_INT 1
21913: NEG
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 3
21921: PUSH
21922: LD_INT 1
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 3
21931: PUSH
21932: LD_INT 2
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21964: LD_ADDR_VAR 0 25
21968: PUSH
21969: LD_INT 0
21971: PUSH
21972: LD_INT 0
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 0
21981: PUSH
21982: LD_INT 1
21984: NEG
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 1
21992: PUSH
21993: LD_INT 0
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 1
22002: PUSH
22003: LD_INT 1
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 0
22012: PUSH
22013: LD_INT 1
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 1
22022: NEG
22023: PUSH
22024: LD_INT 0
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 1
22033: NEG
22034: PUSH
22035: LD_INT 1
22037: NEG
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 1
22045: NEG
22046: PUSH
22047: LD_INT 2
22049: NEG
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 0
22057: PUSH
22058: LD_INT 2
22060: NEG
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 1
22068: PUSH
22069: LD_INT 1
22071: NEG
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 2
22079: PUSH
22080: LD_INT 0
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 2
22089: PUSH
22090: LD_INT 1
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 2
22099: PUSH
22100: LD_INT 2
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 1
22109: PUSH
22110: LD_INT 2
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: LD_INT 0
22119: PUSH
22120: LD_INT 2
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 1
22129: NEG
22130: PUSH
22131: LD_INT 1
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 2
22140: NEG
22141: PUSH
22142: LD_INT 0
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 2
22151: NEG
22152: PUSH
22153: LD_INT 1
22155: NEG
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 2
22163: NEG
22164: PUSH
22165: LD_INT 2
22167: NEG
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 3
22175: PUSH
22176: LD_INT 1
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 3
22185: PUSH
22186: LD_INT 2
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 2
22195: PUSH
22196: LD_INT 3
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 1
22205: PUSH
22206: LD_INT 3
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22238: LD_ADDR_VAR 0 26
22242: PUSH
22243: LD_INT 0
22245: PUSH
22246: LD_INT 0
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 0
22255: PUSH
22256: LD_INT 1
22258: NEG
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 1
22266: PUSH
22267: LD_INT 0
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 1
22276: PUSH
22277: LD_INT 1
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 0
22286: PUSH
22287: LD_INT 1
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: LD_INT 1
22296: NEG
22297: PUSH
22298: LD_INT 0
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 1
22307: NEG
22308: PUSH
22309: LD_INT 1
22311: NEG
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 1
22319: NEG
22320: PUSH
22321: LD_INT 2
22323: NEG
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: LD_INT 2
22334: NEG
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 1
22342: PUSH
22343: LD_INT 1
22345: NEG
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 2
22353: PUSH
22354: LD_INT 0
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 2
22363: PUSH
22364: LD_INT 1
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: LD_INT 2
22373: PUSH
22374: LD_INT 2
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 1
22383: PUSH
22384: LD_INT 2
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 0
22393: PUSH
22394: LD_INT 2
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 1
22403: NEG
22404: PUSH
22405: LD_INT 1
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 2
22414: NEG
22415: PUSH
22416: LD_INT 0
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 2
22425: NEG
22426: PUSH
22427: LD_INT 1
22429: NEG
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 2
22437: NEG
22438: PUSH
22439: LD_INT 2
22441: NEG
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 2
22449: PUSH
22450: LD_INT 3
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 1
22459: PUSH
22460: LD_INT 3
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 1
22469: NEG
22470: PUSH
22471: LD_INT 2
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 2
22480: NEG
22481: PUSH
22482: LD_INT 1
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22514: LD_ADDR_VAR 0 27
22518: PUSH
22519: LD_INT 0
22521: PUSH
22522: LD_INT 0
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: LD_INT 1
22534: NEG
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 1
22542: PUSH
22543: LD_INT 0
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 1
22552: PUSH
22553: LD_INT 1
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 0
22562: PUSH
22563: LD_INT 1
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 1
22572: NEG
22573: PUSH
22574: LD_INT 0
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 1
22583: NEG
22584: PUSH
22585: LD_INT 1
22587: NEG
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 1
22595: NEG
22596: PUSH
22597: LD_INT 2
22599: NEG
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 0
22607: PUSH
22608: LD_INT 2
22610: NEG
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 1
22618: PUSH
22619: LD_INT 1
22621: NEG
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 2
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 2
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 2
22649: PUSH
22650: LD_INT 2
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 1
22659: PUSH
22660: LD_INT 2
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 0
22669: PUSH
22670: LD_INT 2
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 1
22679: NEG
22680: PUSH
22681: LD_INT 1
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 2
22690: NEG
22691: PUSH
22692: LD_INT 0
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 2
22701: NEG
22702: PUSH
22703: LD_INT 1
22705: NEG
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 2
22713: NEG
22714: PUSH
22715: LD_INT 2
22717: NEG
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 1
22725: NEG
22726: PUSH
22727: LD_INT 2
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 2
22736: NEG
22737: PUSH
22738: LD_INT 1
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 3
22747: NEG
22748: PUSH
22749: LD_INT 1
22751: NEG
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 3
22759: NEG
22760: PUSH
22761: LD_INT 2
22763: NEG
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22794: LD_ADDR_VAR 0 28
22798: PUSH
22799: LD_INT 0
22801: PUSH
22802: LD_INT 0
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 0
22811: PUSH
22812: LD_INT 1
22814: NEG
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 1
22822: PUSH
22823: LD_INT 0
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 1
22832: PUSH
22833: LD_INT 1
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 0
22842: PUSH
22843: LD_INT 1
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 1
22852: NEG
22853: PUSH
22854: LD_INT 0
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 1
22863: NEG
22864: PUSH
22865: LD_INT 1
22867: NEG
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 1
22875: NEG
22876: PUSH
22877: LD_INT 2
22879: NEG
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 0
22887: PUSH
22888: LD_INT 2
22890: NEG
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 1
22898: PUSH
22899: LD_INT 1
22901: NEG
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 2
22909: PUSH
22910: LD_INT 0
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 2
22919: PUSH
22920: LD_INT 1
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 2
22929: PUSH
22930: LD_INT 2
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 1
22939: PUSH
22940: LD_INT 2
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 0
22949: PUSH
22950: LD_INT 2
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 1
22959: NEG
22960: PUSH
22961: LD_INT 1
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 2
22970: NEG
22971: PUSH
22972: LD_INT 0
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 2
22981: NEG
22982: PUSH
22983: LD_INT 1
22985: NEG
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 2
22993: NEG
22994: PUSH
22995: LD_INT 2
22997: NEG
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 2
23005: NEG
23006: PUSH
23007: LD_INT 3
23009: NEG
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 1
23017: NEG
23018: PUSH
23019: LD_INT 3
23021: NEG
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 3
23029: NEG
23030: PUSH
23031: LD_INT 1
23033: NEG
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 3
23041: NEG
23042: PUSH
23043: LD_INT 2
23045: NEG
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23076: LD_ADDR_VAR 0 29
23080: PUSH
23081: LD_INT 0
23083: PUSH
23084: LD_INT 0
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 0
23093: PUSH
23094: LD_INT 1
23096: NEG
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: LD_INT 1
23104: PUSH
23105: LD_INT 0
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 1
23114: PUSH
23115: LD_INT 1
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 0
23124: PUSH
23125: LD_INT 1
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 1
23134: NEG
23135: PUSH
23136: LD_INT 0
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 1
23145: NEG
23146: PUSH
23147: LD_INT 1
23149: NEG
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 1
23157: NEG
23158: PUSH
23159: LD_INT 2
23161: NEG
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 0
23169: PUSH
23170: LD_INT 2
23172: NEG
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 1
23180: PUSH
23181: LD_INT 1
23183: NEG
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 2
23191: PUSH
23192: LD_INT 0
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 2
23201: PUSH
23202: LD_INT 1
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 1
23211: PUSH
23212: LD_INT 2
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PUSH
23219: LD_INT 0
23221: PUSH
23222: LD_INT 2
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 1
23231: NEG
23232: PUSH
23233: LD_INT 1
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 2
23242: NEG
23243: PUSH
23244: LD_INT 1
23246: NEG
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 2
23254: NEG
23255: PUSH
23256: LD_INT 2
23258: NEG
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 2
23266: NEG
23267: PUSH
23268: LD_INT 3
23270: NEG
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 2
23278: PUSH
23279: LD_INT 1
23281: NEG
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 3
23289: PUSH
23290: LD_INT 1
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 1
23299: PUSH
23300: LD_INT 3
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 1
23309: NEG
23310: PUSH
23311: LD_INT 2
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 3
23320: NEG
23321: PUSH
23322: LD_INT 2
23324: NEG
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23355: LD_ADDR_VAR 0 30
23359: PUSH
23360: LD_INT 0
23362: PUSH
23363: LD_INT 0
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 0
23372: PUSH
23373: LD_INT 1
23375: NEG
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 1
23383: PUSH
23384: LD_INT 0
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 1
23393: PUSH
23394: LD_INT 1
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 0
23403: PUSH
23404: LD_INT 1
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 1
23413: NEG
23414: PUSH
23415: LD_INT 0
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 1
23424: NEG
23425: PUSH
23426: LD_INT 1
23428: NEG
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 1
23436: NEG
23437: PUSH
23438: LD_INT 2
23440: NEG
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 0
23448: PUSH
23449: LD_INT 2
23451: NEG
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 1
23459: PUSH
23460: LD_INT 1
23462: NEG
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PUSH
23468: LD_INT 2
23470: PUSH
23471: LD_INT 0
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 2
23480: PUSH
23481: LD_INT 1
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 2
23490: PUSH
23491: LD_INT 2
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 1
23500: PUSH
23501: LD_INT 2
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 1
23510: NEG
23511: PUSH
23512: LD_INT 1
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 2
23521: NEG
23522: PUSH
23523: LD_INT 0
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 2
23532: NEG
23533: PUSH
23534: LD_INT 1
23536: NEG
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 1
23544: NEG
23545: PUSH
23546: LD_INT 3
23548: NEG
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 1
23556: PUSH
23557: LD_INT 2
23559: NEG
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 3
23567: PUSH
23568: LD_INT 2
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 2
23577: PUSH
23578: LD_INT 3
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 2
23587: NEG
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 3
23598: NEG
23599: PUSH
23600: LD_INT 1
23602: NEG
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23633: LD_ADDR_VAR 0 31
23637: PUSH
23638: LD_INT 0
23640: PUSH
23641: LD_INT 0
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 0
23650: PUSH
23651: LD_INT 1
23653: NEG
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 1
23661: PUSH
23662: LD_INT 0
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 1
23671: PUSH
23672: LD_INT 1
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: LD_INT 1
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 1
23691: NEG
23692: PUSH
23693: LD_INT 0
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: NEG
23703: PUSH
23704: LD_INT 1
23706: NEG
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 1
23714: NEG
23715: PUSH
23716: LD_INT 2
23718: NEG
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: LD_INT 1
23729: NEG
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 2
23737: PUSH
23738: LD_INT 0
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 2
23747: PUSH
23748: LD_INT 1
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 2
23757: PUSH
23758: LD_INT 2
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 1
23767: PUSH
23768: LD_INT 2
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 0
23777: PUSH
23778: LD_INT 2
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 1
23787: NEG
23788: PUSH
23789: LD_INT 1
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 2
23798: NEG
23799: PUSH
23800: LD_INT 1
23802: NEG
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 2
23810: NEG
23811: PUSH
23812: LD_INT 2
23814: NEG
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 2
23822: NEG
23823: PUSH
23824: LD_INT 3
23826: NEG
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 2
23834: PUSH
23835: LD_INT 1
23837: NEG
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 3
23845: PUSH
23846: LD_INT 1
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 1
23855: PUSH
23856: LD_INT 3
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 1
23865: NEG
23866: PUSH
23867: LD_INT 2
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 3
23876: NEG
23877: PUSH
23878: LD_INT 2
23880: NEG
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23911: LD_ADDR_VAR 0 32
23915: PUSH
23916: LD_INT 0
23918: PUSH
23919: LD_INT 0
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 0
23928: PUSH
23929: LD_INT 1
23931: NEG
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 1
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 1
23949: PUSH
23950: LD_INT 1
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 0
23959: PUSH
23960: LD_INT 1
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 1
23969: NEG
23970: PUSH
23971: LD_INT 0
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 1
23980: NEG
23981: PUSH
23982: LD_INT 1
23984: NEG
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 1
23992: NEG
23993: PUSH
23994: LD_INT 2
23996: NEG
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 0
24004: PUSH
24005: LD_INT 2
24007: NEG
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 1
24015: PUSH
24016: LD_INT 1
24018: NEG
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 2
24026: PUSH
24027: LD_INT 1
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 2
24036: PUSH
24037: LD_INT 2
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 1
24046: PUSH
24047: LD_INT 2
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 0
24056: PUSH
24057: LD_INT 2
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 1
24066: NEG
24067: PUSH
24068: LD_INT 1
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 2
24077: NEG
24078: PUSH
24079: LD_INT 0
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 2
24088: NEG
24089: PUSH
24090: LD_INT 1
24092: NEG
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 1
24100: NEG
24101: PUSH
24102: LD_INT 3
24104: NEG
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 1
24112: PUSH
24113: LD_INT 2
24115: NEG
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 3
24123: PUSH
24124: LD_INT 2
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 2
24133: PUSH
24134: LD_INT 3
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 2
24143: NEG
24144: PUSH
24145: LD_INT 1
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 3
24154: NEG
24155: PUSH
24156: LD_INT 1
24158: NEG
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24189: LD_ADDR_VAR 0 33
24193: PUSH
24194: LD_INT 0
24196: PUSH
24197: LD_INT 0
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 0
24206: PUSH
24207: LD_INT 1
24209: NEG
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: LD_INT 1
24217: PUSH
24218: LD_INT 0
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 1
24227: PUSH
24228: LD_INT 1
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 0
24237: PUSH
24238: LD_INT 1
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 1
24247: NEG
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 1
24258: NEG
24259: PUSH
24260: LD_INT 1
24262: NEG
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 1
24270: NEG
24271: PUSH
24272: LD_INT 2
24274: NEG
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 1
24282: PUSH
24283: LD_INT 1
24285: NEG
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 2
24293: PUSH
24294: LD_INT 0
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 2
24303: PUSH
24304: LD_INT 1
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 1
24313: PUSH
24314: LD_INT 2
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 0
24323: PUSH
24324: LD_INT 2
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 1
24333: NEG
24334: PUSH
24335: LD_INT 1
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 2
24344: NEG
24345: PUSH
24346: LD_INT 0
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 2
24355: NEG
24356: PUSH
24357: LD_INT 1
24359: NEG
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 2
24367: NEG
24368: PUSH
24369: LD_INT 2
24371: NEG
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 2
24379: NEG
24380: PUSH
24381: LD_INT 3
24383: NEG
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 2
24391: PUSH
24392: LD_INT 1
24394: NEG
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 3
24402: PUSH
24403: LD_INT 1
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 1
24412: PUSH
24413: LD_INT 3
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 1
24422: NEG
24423: PUSH
24424: LD_INT 2
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 3
24433: NEG
24434: PUSH
24435: LD_INT 2
24437: NEG
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24468: LD_ADDR_VAR 0 34
24472: PUSH
24473: LD_INT 0
24475: PUSH
24476: LD_INT 0
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 0
24485: PUSH
24486: LD_INT 1
24488: NEG
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: LD_INT 0
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 1
24506: PUSH
24507: LD_INT 1
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 0
24516: PUSH
24517: LD_INT 1
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 1
24526: NEG
24527: PUSH
24528: LD_INT 0
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 1
24537: NEG
24538: PUSH
24539: LD_INT 1
24541: NEG
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 1
24549: NEG
24550: PUSH
24551: LD_INT 2
24553: NEG
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 0
24561: PUSH
24562: LD_INT 2
24564: NEG
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 1
24572: PUSH
24573: LD_INT 1
24575: NEG
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 2
24583: PUSH
24584: LD_INT 1
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 2
24593: PUSH
24594: LD_INT 2
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 1
24603: PUSH
24604: LD_INT 2
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 1
24613: NEG
24614: PUSH
24615: LD_INT 1
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 2
24624: NEG
24625: PUSH
24626: LD_INT 0
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 2
24635: NEG
24636: PUSH
24637: LD_INT 1
24639: NEG
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 2
24647: NEG
24648: PUSH
24649: LD_INT 2
24651: NEG
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 1
24659: NEG
24660: PUSH
24661: LD_INT 3
24663: NEG
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 1
24671: PUSH
24672: LD_INT 2
24674: NEG
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 3
24682: PUSH
24683: LD_INT 2
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 2
24692: PUSH
24693: LD_INT 3
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 2
24702: NEG
24703: PUSH
24704: LD_INT 1
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 3
24713: NEG
24714: PUSH
24715: LD_INT 1
24717: NEG
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24748: LD_ADDR_VAR 0 35
24752: PUSH
24753: LD_INT 0
24755: PUSH
24756: LD_INT 0
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 0
24765: PUSH
24766: LD_INT 1
24768: NEG
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 1
24776: PUSH
24777: LD_INT 0
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 1
24786: PUSH
24787: LD_INT 1
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 0
24796: PUSH
24797: LD_INT 1
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 1
24806: NEG
24807: PUSH
24808: LD_INT 0
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 1
24817: NEG
24818: PUSH
24819: LD_INT 1
24821: NEG
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 2
24829: PUSH
24830: LD_INT 1
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 2
24839: NEG
24840: PUSH
24841: LD_INT 1
24843: NEG
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24860: LD_ADDR_VAR 0 36
24864: PUSH
24865: LD_INT 0
24867: PUSH
24868: LD_INT 0
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 0
24877: PUSH
24878: LD_INT 1
24880: NEG
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 1
24888: PUSH
24889: LD_INT 0
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 1
24898: PUSH
24899: LD_INT 1
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 0
24908: PUSH
24909: LD_INT 1
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 1
24918: NEG
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 1
24929: NEG
24930: PUSH
24931: LD_INT 1
24933: NEG
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 1
24941: NEG
24942: PUSH
24943: LD_INT 2
24945: NEG
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 1
24953: PUSH
24954: LD_INT 2
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24972: LD_ADDR_VAR 0 37
24976: PUSH
24977: LD_INT 0
24979: PUSH
24980: LD_INT 0
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 0
24989: PUSH
24990: LD_INT 1
24992: NEG
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 1
25000: PUSH
25001: LD_INT 0
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 1
25010: PUSH
25011: LD_INT 1
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: LD_INT 0
25020: PUSH
25021: LD_INT 1
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 1
25030: NEG
25031: PUSH
25032: LD_INT 0
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 1
25041: NEG
25042: PUSH
25043: LD_INT 1
25045: NEG
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 1
25053: PUSH
25054: LD_INT 1
25056: NEG
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: NEG
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25084: LD_ADDR_VAR 0 38
25088: PUSH
25089: LD_INT 0
25091: PUSH
25092: LD_INT 0
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 0
25101: PUSH
25102: LD_INT 1
25104: NEG
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 1
25112: PUSH
25113: LD_INT 0
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 1
25122: PUSH
25123: LD_INT 1
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 0
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 1
25142: NEG
25143: PUSH
25144: LD_INT 0
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 1
25153: NEG
25154: PUSH
25155: LD_INT 1
25157: NEG
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 2
25165: PUSH
25166: LD_INT 1
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 2
25175: NEG
25176: PUSH
25177: LD_INT 1
25179: NEG
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25196: LD_ADDR_VAR 0 39
25200: PUSH
25201: LD_INT 0
25203: PUSH
25204: LD_INT 0
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: LD_INT 1
25216: NEG
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 1
25224: PUSH
25225: LD_INT 0
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 1
25234: PUSH
25235: LD_INT 1
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 0
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 1
25254: NEG
25255: PUSH
25256: LD_INT 0
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 1
25265: NEG
25266: PUSH
25267: LD_INT 1
25269: NEG
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: LD_INT 2
25281: NEG
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 1
25289: PUSH
25290: LD_INT 2
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25308: LD_ADDR_VAR 0 40
25312: PUSH
25313: LD_INT 0
25315: PUSH
25316: LD_INT 0
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 0
25325: PUSH
25326: LD_INT 1
25328: NEG
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 1
25336: PUSH
25337: LD_INT 0
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 1
25346: PUSH
25347: LD_INT 1
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 0
25356: PUSH
25357: LD_INT 1
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 1
25366: NEG
25367: PUSH
25368: LD_INT 0
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 1
25377: NEG
25378: PUSH
25379: LD_INT 1
25381: NEG
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 1
25389: PUSH
25390: LD_INT 1
25392: NEG
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 1
25400: NEG
25401: PUSH
25402: LD_INT 1
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25420: LD_ADDR_VAR 0 41
25424: PUSH
25425: LD_INT 0
25427: PUSH
25428: LD_INT 0
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 0
25437: PUSH
25438: LD_INT 1
25440: NEG
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: LD_INT 0
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 1
25458: PUSH
25459: LD_INT 1
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 0
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 1
25478: NEG
25479: PUSH
25480: LD_INT 0
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 1
25489: NEG
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 1
25501: NEG
25502: PUSH
25503: LD_INT 2
25505: NEG
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 1
25513: PUSH
25514: LD_INT 1
25516: NEG
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 2
25524: PUSH
25525: LD_INT 0
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 2
25534: PUSH
25535: LD_INT 1
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 2
25544: PUSH
25545: LD_INT 2
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 1
25554: PUSH
25555: LD_INT 2
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 1
25564: NEG
25565: PUSH
25566: LD_INT 1
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 2
25575: NEG
25576: PUSH
25577: LD_INT 0
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 2
25586: NEG
25587: PUSH
25588: LD_INT 1
25590: NEG
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 2
25598: NEG
25599: PUSH
25600: LD_INT 2
25602: NEG
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 2
25610: NEG
25611: PUSH
25612: LD_INT 3
25614: NEG
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 2
25622: PUSH
25623: LD_INT 1
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 3
25633: PUSH
25634: LD_INT 0
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 3
25643: PUSH
25644: LD_INT 1
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 3
25653: PUSH
25654: LD_INT 2
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 3
25663: PUSH
25664: LD_INT 3
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 2
25673: PUSH
25674: LD_INT 3
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 2
25683: NEG
25684: PUSH
25685: LD_INT 1
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 3
25694: NEG
25695: PUSH
25696: LD_INT 0
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 3
25705: NEG
25706: PUSH
25707: LD_INT 1
25709: NEG
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 3
25717: NEG
25718: PUSH
25719: LD_INT 2
25721: NEG
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 3
25729: NEG
25730: PUSH
25731: LD_INT 3
25733: NEG
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25770: LD_ADDR_VAR 0 42
25774: PUSH
25775: LD_INT 0
25777: PUSH
25778: LD_INT 0
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 0
25787: PUSH
25788: LD_INT 1
25790: NEG
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 1
25798: PUSH
25799: LD_INT 0
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 1
25808: PUSH
25809: LD_INT 1
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 0
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 1
25828: NEG
25829: PUSH
25830: LD_INT 0
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 1
25839: NEG
25840: PUSH
25841: LD_INT 1
25843: NEG
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 1
25851: NEG
25852: PUSH
25853: LD_INT 2
25855: NEG
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 0
25863: PUSH
25864: LD_INT 2
25866: NEG
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 1
25874: PUSH
25875: LD_INT 1
25877: NEG
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 2
25885: PUSH
25886: LD_INT 1
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 2
25895: PUSH
25896: LD_INT 2
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 1
25905: PUSH
25906: LD_INT 2
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: LD_INT 2
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 1
25925: NEG
25926: PUSH
25927: LD_INT 1
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 2
25936: NEG
25937: PUSH
25938: LD_INT 1
25940: NEG
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 2
25948: NEG
25949: PUSH
25950: LD_INT 2
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 2
25960: NEG
25961: PUSH
25962: LD_INT 3
25964: NEG
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 1
25972: NEG
25973: PUSH
25974: LD_INT 3
25976: NEG
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 0
25984: PUSH
25985: LD_INT 3
25987: NEG
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 1
25995: PUSH
25996: LD_INT 2
25998: NEG
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 3
26006: PUSH
26007: LD_INT 2
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 3
26016: PUSH
26017: LD_INT 3
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 2
26026: PUSH
26027: LD_INT 3
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 1
26036: PUSH
26037: LD_INT 3
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 0
26046: PUSH
26047: LD_INT 3
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 1
26056: NEG
26057: PUSH
26058: LD_INT 2
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 3
26067: NEG
26068: PUSH
26069: LD_INT 2
26071: NEG
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 3
26079: NEG
26080: PUSH
26081: LD_INT 3
26083: NEG
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26120: LD_ADDR_VAR 0 43
26124: PUSH
26125: LD_INT 0
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 0
26137: PUSH
26138: LD_INT 1
26140: NEG
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 1
26148: PUSH
26149: LD_INT 0
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 1
26158: PUSH
26159: LD_INT 1
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: NEG
26179: PUSH
26180: LD_INT 0
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 1
26189: NEG
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 1
26201: NEG
26202: PUSH
26203: LD_INT 2
26205: NEG
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: LD_INT 2
26216: NEG
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: LD_INT 1
26227: NEG
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 2
26235: PUSH
26236: LD_INT 0
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 2
26245: PUSH
26246: LD_INT 1
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 1
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 0
26265: PUSH
26266: LD_INT 2
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 1
26275: NEG
26276: PUSH
26277: LD_INT 1
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 2
26286: NEG
26287: PUSH
26288: LD_INT 0
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 2
26297: NEG
26298: PUSH
26299: LD_INT 1
26301: NEG
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 1
26309: NEG
26310: PUSH
26311: LD_INT 3
26313: NEG
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: LD_INT 3
26324: NEG
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 1
26332: PUSH
26333: LD_INT 2
26335: NEG
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 2
26343: PUSH
26344: LD_INT 1
26346: NEG
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 3
26354: PUSH
26355: LD_INT 0
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 3
26364: PUSH
26365: LD_INT 1
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 1
26374: PUSH
26375: LD_INT 3
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 0
26384: PUSH
26385: LD_INT 3
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 1
26394: NEG
26395: PUSH
26396: LD_INT 2
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 2
26405: NEG
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 3
26416: NEG
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 3
26427: NEG
26428: PUSH
26429: LD_INT 1
26431: NEG
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26468: LD_ADDR_VAR 0 44
26472: PUSH
26473: LD_INT 0
26475: PUSH
26476: LD_INT 0
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: LD_INT 1
26488: NEG
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 1
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 1
26506: PUSH
26507: LD_INT 1
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 0
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 1
26526: NEG
26527: PUSH
26528: LD_INT 0
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 1
26537: NEG
26538: PUSH
26539: LD_INT 1
26541: NEG
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 1
26549: NEG
26550: PUSH
26551: LD_INT 2
26553: NEG
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 1
26561: PUSH
26562: LD_INT 1
26564: NEG
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 2
26572: PUSH
26573: LD_INT 0
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 2
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 2
26592: PUSH
26593: LD_INT 2
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 1
26602: PUSH
26603: LD_INT 2
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 1
26612: NEG
26613: PUSH
26614: LD_INT 1
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 2
26623: NEG
26624: PUSH
26625: LD_INT 0
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 2
26634: NEG
26635: PUSH
26636: LD_INT 1
26638: NEG
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 2
26646: NEG
26647: PUSH
26648: LD_INT 2
26650: NEG
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 2
26658: NEG
26659: PUSH
26660: LD_INT 3
26662: NEG
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 2
26670: PUSH
26671: LD_INT 1
26673: NEG
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 3
26681: PUSH
26682: LD_INT 0
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 3
26691: PUSH
26692: LD_INT 1
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 3
26701: PUSH
26702: LD_INT 2
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 3
26711: PUSH
26712: LD_INT 3
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 2
26721: PUSH
26722: LD_INT 3
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 2
26731: NEG
26732: PUSH
26733: LD_INT 1
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 3
26742: NEG
26743: PUSH
26744: LD_INT 0
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 3
26753: NEG
26754: PUSH
26755: LD_INT 1
26757: NEG
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 3
26765: NEG
26766: PUSH
26767: LD_INT 2
26769: NEG
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 3
26777: NEG
26778: PUSH
26779: LD_INT 3
26781: NEG
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26818: LD_ADDR_VAR 0 45
26822: PUSH
26823: LD_INT 0
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: LD_INT 1
26838: NEG
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 1
26846: PUSH
26847: LD_INT 0
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 1
26856: PUSH
26857: LD_INT 1
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 0
26866: PUSH
26867: LD_INT 1
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: NEG
26877: PUSH
26878: LD_INT 0
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 1
26887: NEG
26888: PUSH
26889: LD_INT 1
26891: NEG
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 1
26899: NEG
26900: PUSH
26901: LD_INT 2
26903: NEG
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 0
26911: PUSH
26912: LD_INT 2
26914: NEG
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: PUSH
26923: LD_INT 1
26925: NEG
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 2
26933: PUSH
26934: LD_INT 1
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 2
26943: PUSH
26944: LD_INT 2
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 1
26953: PUSH
26954: LD_INT 2
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 0
26963: PUSH
26964: LD_INT 2
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 1
26973: NEG
26974: PUSH
26975: LD_INT 1
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 2
26984: NEG
26985: PUSH
26986: LD_INT 1
26988: NEG
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 2
26996: NEG
26997: PUSH
26998: LD_INT 2
27000: NEG
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 2
27008: NEG
27009: PUSH
27010: LD_INT 3
27012: NEG
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 1
27020: NEG
27021: PUSH
27022: LD_INT 3
27024: NEG
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: LD_INT 3
27035: NEG
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 1
27043: PUSH
27044: LD_INT 2
27046: NEG
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 3
27054: PUSH
27055: LD_INT 2
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 3
27064: PUSH
27065: LD_INT 3
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 2
27074: PUSH
27075: LD_INT 3
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 1
27084: PUSH
27085: LD_INT 3
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 0
27094: PUSH
27095: LD_INT 3
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 1
27104: NEG
27105: PUSH
27106: LD_INT 2
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 3
27115: NEG
27116: PUSH
27117: LD_INT 2
27119: NEG
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 3
27127: NEG
27128: PUSH
27129: LD_INT 3
27131: NEG
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27168: LD_ADDR_VAR 0 46
27172: PUSH
27173: LD_INT 0
27175: PUSH
27176: LD_INT 0
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 0
27185: PUSH
27186: LD_INT 1
27188: NEG
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 1
27196: PUSH
27197: LD_INT 0
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 1
27206: PUSH
27207: LD_INT 1
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: LD_INT 1
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 1
27226: NEG
27227: PUSH
27228: LD_INT 0
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 1
27237: NEG
27238: PUSH
27239: LD_INT 1
27241: NEG
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 1
27249: NEG
27250: PUSH
27251: LD_INT 2
27253: NEG
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: LD_INT 2
27264: NEG
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: LD_INT 1
27275: NEG
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 2
27283: PUSH
27284: LD_INT 0
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 2
27293: PUSH
27294: LD_INT 1
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 1
27303: PUSH
27304: LD_INT 2
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 0
27313: PUSH
27314: LD_INT 2
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 1
27323: NEG
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 2
27334: NEG
27335: PUSH
27336: LD_INT 0
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 2
27345: NEG
27346: PUSH
27347: LD_INT 1
27349: NEG
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 1
27357: NEG
27358: PUSH
27359: LD_INT 3
27361: NEG
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: LD_INT 3
27372: NEG
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 1
27380: PUSH
27381: LD_INT 2
27383: NEG
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 2
27391: PUSH
27392: LD_INT 1
27394: NEG
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 3
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 3
27412: PUSH
27413: LD_INT 1
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 1
27422: PUSH
27423: LD_INT 3
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 0
27432: PUSH
27433: LD_INT 3
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 1
27442: NEG
27443: PUSH
27444: LD_INT 2
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 2
27453: NEG
27454: PUSH
27455: LD_INT 1
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 3
27464: NEG
27465: PUSH
27466: LD_INT 0
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 3
27475: NEG
27476: PUSH
27477: LD_INT 1
27479: NEG
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27516: LD_ADDR_VAR 0 47
27520: PUSH
27521: LD_INT 0
27523: PUSH
27524: LD_INT 0
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 0
27533: PUSH
27534: LD_INT 1
27536: NEG
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 1
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 1
27554: PUSH
27555: LD_INT 1
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 0
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 1
27574: NEG
27575: PUSH
27576: LD_INT 0
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 1
27585: NEG
27586: PUSH
27587: LD_INT 1
27589: NEG
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 1
27597: NEG
27598: PUSH
27599: LD_INT 2
27601: NEG
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 0
27609: PUSH
27610: LD_INT 2
27612: NEG
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 1
27620: PUSH
27621: LD_INT 1
27623: NEG
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 2
27631: NEG
27632: PUSH
27633: LD_INT 1
27635: NEG
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 2
27643: NEG
27644: PUSH
27645: LD_INT 2
27647: NEG
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27667: LD_ADDR_VAR 0 48
27671: PUSH
27672: LD_INT 0
27674: PUSH
27675: LD_INT 0
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 0
27684: PUSH
27685: LD_INT 1
27687: NEG
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 1
27695: PUSH
27696: LD_INT 0
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 1
27705: PUSH
27706: LD_INT 1
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 0
27715: PUSH
27716: LD_INT 1
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 1
27725: NEG
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 1
27736: NEG
27737: PUSH
27738: LD_INT 1
27740: NEG
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 1
27748: NEG
27749: PUSH
27750: LD_INT 2
27752: NEG
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 0
27760: PUSH
27761: LD_INT 2
27763: NEG
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 1
27771: PUSH
27772: LD_INT 1
27774: NEG
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 2
27782: PUSH
27783: LD_INT 0
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 2
27792: PUSH
27793: LD_INT 1
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27814: LD_ADDR_VAR 0 49
27818: PUSH
27819: LD_INT 0
27821: PUSH
27822: LD_INT 0
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 0
27831: PUSH
27832: LD_INT 1
27834: NEG
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 1
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 0
27862: PUSH
27863: LD_INT 1
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 1
27872: NEG
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 1
27883: NEG
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 1
27895: PUSH
27896: LD_INT 1
27898: NEG
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 2
27906: PUSH
27907: LD_INT 0
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 2
27916: PUSH
27917: LD_INT 1
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 2
27926: PUSH
27927: LD_INT 2
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 1
27936: PUSH
27937: LD_INT 2
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27958: LD_ADDR_VAR 0 50
27962: PUSH
27963: LD_INT 0
27965: PUSH
27966: LD_INT 0
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 0
27975: PUSH
27976: LD_INT 1
27978: NEG
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 1
27986: PUSH
27987: LD_INT 0
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 1
27996: PUSH
27997: LD_INT 1
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 0
28006: PUSH
28007: LD_INT 1
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 1
28016: NEG
28017: PUSH
28018: LD_INT 0
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 1
28027: NEG
28028: PUSH
28029: LD_INT 1
28031: NEG
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 2
28039: PUSH
28040: LD_INT 1
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 2
28049: PUSH
28050: LD_INT 2
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 1
28059: PUSH
28060: LD_INT 2
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 0
28069: PUSH
28070: LD_INT 2
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 1
28079: NEG
28080: PUSH
28081: LD_INT 1
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28102: LD_ADDR_VAR 0 51
28106: PUSH
28107: LD_INT 0
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 0
28119: PUSH
28120: LD_INT 1
28122: NEG
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 1
28130: PUSH
28131: LD_INT 0
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 1
28140: PUSH
28141: LD_INT 1
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 0
28150: PUSH
28151: LD_INT 1
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 1
28160: NEG
28161: PUSH
28162: LD_INT 0
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 1
28171: NEG
28172: PUSH
28173: LD_INT 1
28175: NEG
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 1
28183: PUSH
28184: LD_INT 2
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 0
28193: PUSH
28194: LD_INT 2
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 1
28203: NEG
28204: PUSH
28205: LD_INT 1
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 2
28214: NEG
28215: PUSH
28216: LD_INT 0
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 2
28225: NEG
28226: PUSH
28227: LD_INT 1
28229: NEG
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28249: LD_ADDR_VAR 0 52
28253: PUSH
28254: LD_INT 0
28256: PUSH
28257: LD_INT 0
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 0
28266: PUSH
28267: LD_INT 1
28269: NEG
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 1
28277: PUSH
28278: LD_INT 0
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 1
28287: PUSH
28288: LD_INT 1
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 0
28297: PUSH
28298: LD_INT 1
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 1
28307: NEG
28308: PUSH
28309: LD_INT 0
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 1
28318: NEG
28319: PUSH
28320: LD_INT 1
28322: NEG
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 1
28330: NEG
28331: PUSH
28332: LD_INT 2
28334: NEG
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 1
28342: NEG
28343: PUSH
28344: LD_INT 1
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 2
28353: NEG
28354: PUSH
28355: LD_INT 0
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 2
28364: NEG
28365: PUSH
28366: LD_INT 1
28368: NEG
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 2
28376: NEG
28377: PUSH
28378: LD_INT 2
28380: NEG
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28400: LD_ADDR_VAR 0 53
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: LD_INT 0
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 0
28417: PUSH
28418: LD_INT 1
28420: NEG
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 1
28428: PUSH
28429: LD_INT 0
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 1
28438: PUSH
28439: LD_INT 1
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 0
28448: PUSH
28449: LD_INT 1
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 1
28458: NEG
28459: PUSH
28460: LD_INT 0
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: LD_INT 1
28473: NEG
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 1
28481: NEG
28482: PUSH
28483: LD_INT 2
28485: NEG
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 0
28493: PUSH
28494: LD_INT 2
28496: NEG
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 1
28504: PUSH
28505: LD_INT 1
28507: NEG
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 2
28515: PUSH
28516: LD_INT 0
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 2
28525: PUSH
28526: LD_INT 1
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 2
28535: PUSH
28536: LD_INT 2
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: LD_INT 2
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: LD_INT 2
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 1
28565: NEG
28566: PUSH
28567: LD_INT 1
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 2
28576: NEG
28577: PUSH
28578: LD_INT 0
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 2
28587: NEG
28588: PUSH
28589: LD_INT 1
28591: NEG
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 2
28599: NEG
28600: PUSH
28601: LD_INT 2
28603: NEG
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28630: LD_ADDR_VAR 0 54
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: LD_INT 0
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 0
28647: PUSH
28648: LD_INT 1
28650: NEG
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 1
28658: PUSH
28659: LD_INT 0
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 1
28668: PUSH
28669: LD_INT 1
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 0
28678: PUSH
28679: LD_INT 1
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 1
28688: NEG
28689: PUSH
28690: LD_INT 0
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 1
28699: NEG
28700: PUSH
28701: LD_INT 1
28703: NEG
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 1
28711: NEG
28712: PUSH
28713: LD_INT 2
28715: NEG
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 0
28723: PUSH
28724: LD_INT 2
28726: NEG
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: LD_INT 1
28737: NEG
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 2
28745: PUSH
28746: LD_INT 0
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 2
28755: PUSH
28756: LD_INT 1
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 2
28765: PUSH
28766: LD_INT 2
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: LD_INT 2
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 0
28785: PUSH
28786: LD_INT 2
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 1
28795: NEG
28796: PUSH
28797: LD_INT 1
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 2
28806: NEG
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 2
28817: NEG
28818: PUSH
28819: LD_INT 1
28821: NEG
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 2
28829: NEG
28830: PUSH
28831: LD_INT 2
28833: NEG
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28860: LD_ADDR_VAR 0 55
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: LD_INT 0
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 0
28877: PUSH
28878: LD_INT 1
28880: NEG
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 1
28888: PUSH
28889: LD_INT 0
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: LD_INT 1
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 0
28908: PUSH
28909: LD_INT 1
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 1
28918: NEG
28919: PUSH
28920: LD_INT 0
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 1
28929: NEG
28930: PUSH
28931: LD_INT 1
28933: NEG
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 1
28941: NEG
28942: PUSH
28943: LD_INT 2
28945: NEG
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 0
28953: PUSH
28954: LD_INT 2
28956: NEG
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 1
28964: PUSH
28965: LD_INT 1
28967: NEG
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 2
28975: PUSH
28976: LD_INT 0
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 2
28985: PUSH
28986: LD_INT 1
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 2
28995: PUSH
28996: LD_INT 2
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 1
29005: PUSH
29006: LD_INT 2
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 0
29015: PUSH
29016: LD_INT 2
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 1
29025: NEG
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 2
29036: NEG
29037: PUSH
29038: LD_INT 0
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 2
29047: NEG
29048: PUSH
29049: LD_INT 1
29051: NEG
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 2
29059: NEG
29060: PUSH
29061: LD_INT 2
29063: NEG
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29090: LD_ADDR_VAR 0 56
29094: PUSH
29095: LD_INT 0
29097: PUSH
29098: LD_INT 0
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 0
29107: PUSH
29108: LD_INT 1
29110: NEG
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 1
29118: PUSH
29119: LD_INT 0
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: LD_INT 1
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 0
29138: PUSH
29139: LD_INT 1
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 1
29148: NEG
29149: PUSH
29150: LD_INT 0
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: LD_INT 1
29159: NEG
29160: PUSH
29161: LD_INT 1
29163: NEG
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 1
29171: NEG
29172: PUSH
29173: LD_INT 2
29175: NEG
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 0
29183: PUSH
29184: LD_INT 2
29186: NEG
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 1
29194: PUSH
29195: LD_INT 1
29197: NEG
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 2
29205: PUSH
29206: LD_INT 0
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 2
29215: PUSH
29216: LD_INT 1
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 2
29225: PUSH
29226: LD_INT 2
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 1
29235: PUSH
29236: LD_INT 2
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 0
29245: PUSH
29246: LD_INT 2
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 1
29255: NEG
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 2
29266: NEG
29267: PUSH
29268: LD_INT 0
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 2
29277: NEG
29278: PUSH
29279: LD_INT 1
29281: NEG
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 2
29289: NEG
29290: PUSH
29291: LD_INT 2
29293: NEG
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29320: LD_ADDR_VAR 0 57
29324: PUSH
29325: LD_INT 0
29327: PUSH
29328: LD_INT 0
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 0
29337: PUSH
29338: LD_INT 1
29340: NEG
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 1
29348: PUSH
29349: LD_INT 0
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 1
29358: PUSH
29359: LD_INT 1
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 0
29368: PUSH
29369: LD_INT 1
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 1
29378: NEG
29379: PUSH
29380: LD_INT 0
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 1
29389: NEG
29390: PUSH
29391: LD_INT 1
29393: NEG
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: LD_INT 2
29405: NEG
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 0
29413: PUSH
29414: LD_INT 2
29416: NEG
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 1
29424: PUSH
29425: LD_INT 1
29427: NEG
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 2
29435: PUSH
29436: LD_INT 0
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 2
29445: PUSH
29446: LD_INT 1
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 2
29455: PUSH
29456: LD_INT 2
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 1
29465: PUSH
29466: LD_INT 2
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 0
29475: PUSH
29476: LD_INT 2
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 1
29485: NEG
29486: PUSH
29487: LD_INT 1
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 2
29496: NEG
29497: PUSH
29498: LD_INT 0
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 2
29507: NEG
29508: PUSH
29509: LD_INT 1
29511: NEG
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 2
29519: NEG
29520: PUSH
29521: LD_INT 2
29523: NEG
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29550: LD_ADDR_VAR 0 58
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 0
29567: PUSH
29568: LD_INT 1
29570: NEG
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 1
29578: PUSH
29579: LD_INT 0
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 1
29588: PUSH
29589: LD_INT 1
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 0
29598: PUSH
29599: LD_INT 1
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 1
29608: NEG
29609: PUSH
29610: LD_INT 0
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 1
29619: NEG
29620: PUSH
29621: LD_INT 1
29623: NEG
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 1
29631: NEG
29632: PUSH
29633: LD_INT 2
29635: NEG
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 0
29643: PUSH
29644: LD_INT 2
29646: NEG
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 1
29654: PUSH
29655: LD_INT 1
29657: NEG
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 2
29665: PUSH
29666: LD_INT 0
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 2
29675: PUSH
29676: LD_INT 1
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 2
29685: PUSH
29686: LD_INT 2
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 1
29695: PUSH
29696: LD_INT 2
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: LD_INT 0
29705: PUSH
29706: LD_INT 2
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 1
29715: NEG
29716: PUSH
29717: LD_INT 1
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 2
29726: NEG
29727: PUSH
29728: LD_INT 0
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 2
29737: NEG
29738: PUSH
29739: LD_INT 1
29741: NEG
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 2
29749: NEG
29750: PUSH
29751: LD_INT 2
29753: NEG
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29780: LD_ADDR_VAR 0 59
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: LD_INT 0
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 0
29797: PUSH
29798: LD_INT 1
29800: NEG
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 1
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 1
29818: PUSH
29819: LD_INT 1
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 0
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 1
29838: NEG
29839: PUSH
29840: LD_INT 0
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 1
29849: NEG
29850: PUSH
29851: LD_INT 1
29853: NEG
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29868: LD_ADDR_VAR 0 60
29872: PUSH
29873: LD_INT 0
29875: PUSH
29876: LD_INT 0
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 0
29885: PUSH
29886: LD_INT 1
29888: NEG
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 1
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 0
29916: PUSH
29917: LD_INT 1
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 1
29926: NEG
29927: PUSH
29928: LD_INT 0
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 1
29937: NEG
29938: PUSH
29939: LD_INT 1
29941: NEG
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29956: LD_ADDR_VAR 0 61
29960: PUSH
29961: LD_INT 0
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 0
29973: PUSH
29974: LD_INT 1
29976: NEG
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 1
29984: PUSH
29985: LD_INT 0
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 1
29994: PUSH
29995: LD_INT 1
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 0
30004: PUSH
30005: LD_INT 1
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 1
30014: NEG
30015: PUSH
30016: LD_INT 0
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 1
30025: NEG
30026: PUSH
30027: LD_INT 1
30029: NEG
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30044: LD_ADDR_VAR 0 62
30048: PUSH
30049: LD_INT 0
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 0
30061: PUSH
30062: LD_INT 1
30064: NEG
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: LD_INT 0
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 1
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 0
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 1
30102: NEG
30103: PUSH
30104: LD_INT 0
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 1
30113: NEG
30114: PUSH
30115: LD_INT 1
30117: NEG
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30132: LD_ADDR_VAR 0 63
30136: PUSH
30137: LD_INT 0
30139: PUSH
30140: LD_INT 0
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 0
30149: PUSH
30150: LD_INT 1
30152: NEG
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 1
30160: PUSH
30161: LD_INT 0
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: LD_INT 1
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 0
30180: PUSH
30181: LD_INT 1
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 1
30190: NEG
30191: PUSH
30192: LD_INT 0
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 1
30201: NEG
30202: PUSH
30203: LD_INT 1
30205: NEG
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30220: LD_ADDR_VAR 0 64
30224: PUSH
30225: LD_INT 0
30227: PUSH
30228: LD_INT 0
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 0
30237: PUSH
30238: LD_INT 1
30240: NEG
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 1
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 1
30258: PUSH
30259: LD_INT 1
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 0
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: PUSH
30280: LD_INT 0
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 1
30289: NEG
30290: PUSH
30291: LD_INT 1
30293: NEG
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: ST_TO_ADDR
// end ; 1 :
30308: GO 36205
30310: LD_INT 1
30312: DOUBLE
30313: EQUAL
30314: IFTRUE 30318
30316: GO 32941
30318: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30319: LD_ADDR_VAR 0 11
30323: PUSH
30324: LD_INT 1
30326: NEG
30327: PUSH
30328: LD_INT 3
30330: NEG
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 0
30338: PUSH
30339: LD_INT 3
30341: NEG
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 1
30349: PUSH
30350: LD_INT 2
30352: NEG
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: LIST
30362: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30363: LD_ADDR_VAR 0 12
30367: PUSH
30368: LD_INT 2
30370: PUSH
30371: LD_INT 1
30373: NEG
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 3
30381: PUSH
30382: LD_INT 0
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 3
30391: PUSH
30392: LD_INT 1
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: LIST
30403: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30404: LD_ADDR_VAR 0 13
30408: PUSH
30409: LD_INT 3
30411: PUSH
30412: LD_INT 2
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 3
30421: PUSH
30422: LD_INT 3
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 2
30431: PUSH
30432: LD_INT 3
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: LIST
30443: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30444: LD_ADDR_VAR 0 14
30448: PUSH
30449: LD_INT 1
30451: PUSH
30452: LD_INT 3
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 0
30461: PUSH
30462: LD_INT 3
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 1
30471: NEG
30472: PUSH
30473: LD_INT 2
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: LIST
30484: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30485: LD_ADDR_VAR 0 15
30489: PUSH
30490: LD_INT 2
30492: NEG
30493: PUSH
30494: LD_INT 1
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 3
30503: NEG
30504: PUSH
30505: LD_INT 0
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 3
30514: NEG
30515: PUSH
30516: LD_INT 1
30518: NEG
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: LIST
30528: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30529: LD_ADDR_VAR 0 16
30533: PUSH
30534: LD_INT 2
30536: NEG
30537: PUSH
30538: LD_INT 3
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 3
30548: NEG
30549: PUSH
30550: LD_INT 2
30552: NEG
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 3
30560: NEG
30561: PUSH
30562: LD_INT 3
30564: NEG
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: LIST
30574: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30575: LD_ADDR_VAR 0 17
30579: PUSH
30580: LD_INT 1
30582: NEG
30583: PUSH
30584: LD_INT 3
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: LD_INT 3
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: LD_INT 2
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: LIST
30618: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30619: LD_ADDR_VAR 0 18
30623: PUSH
30624: LD_INT 2
30626: PUSH
30627: LD_INT 1
30629: NEG
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 3
30637: PUSH
30638: LD_INT 0
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 3
30647: PUSH
30648: LD_INT 1
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: LIST
30659: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30660: LD_ADDR_VAR 0 19
30664: PUSH
30665: LD_INT 3
30667: PUSH
30668: LD_INT 2
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 3
30677: PUSH
30678: LD_INT 3
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 2
30687: PUSH
30688: LD_INT 3
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: LIST
30699: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30700: LD_ADDR_VAR 0 20
30704: PUSH
30705: LD_INT 1
30707: PUSH
30708: LD_INT 3
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 0
30717: PUSH
30718: LD_INT 3
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: LD_INT 2
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: LIST
30740: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30741: LD_ADDR_VAR 0 21
30745: PUSH
30746: LD_INT 2
30748: NEG
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 3
30759: NEG
30760: PUSH
30761: LD_INT 0
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 3
30770: NEG
30771: PUSH
30772: LD_INT 1
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: LIST
30784: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30785: LD_ADDR_VAR 0 22
30789: PUSH
30790: LD_INT 2
30792: NEG
30793: PUSH
30794: LD_INT 3
30796: NEG
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 3
30804: NEG
30805: PUSH
30806: LD_INT 2
30808: NEG
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 3
30816: NEG
30817: PUSH
30818: LD_INT 3
30820: NEG
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: LIST
30830: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30831: LD_ADDR_VAR 0 23
30835: PUSH
30836: LD_INT 0
30838: PUSH
30839: LD_INT 3
30841: NEG
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 1
30849: NEG
30850: PUSH
30851: LD_INT 4
30853: NEG
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 1
30861: PUSH
30862: LD_INT 3
30864: NEG
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: LIST
30874: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30875: LD_ADDR_VAR 0 24
30879: PUSH
30880: LD_INT 3
30882: PUSH
30883: LD_INT 0
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 3
30892: PUSH
30893: LD_INT 1
30895: NEG
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 4
30903: PUSH
30904: LD_INT 1
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: LIST
30915: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30916: LD_ADDR_VAR 0 25
30920: PUSH
30921: LD_INT 3
30923: PUSH
30924: LD_INT 3
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 4
30933: PUSH
30934: LD_INT 3
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 3
30943: PUSH
30944: LD_INT 4
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: LIST
30955: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30956: LD_ADDR_VAR 0 26
30960: PUSH
30961: LD_INT 0
30963: PUSH
30964: LD_INT 3
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 1
30973: PUSH
30974: LD_INT 4
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 1
30983: NEG
30984: PUSH
30985: LD_INT 3
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: LIST
30996: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30997: LD_ADDR_VAR 0 27
31001: PUSH
31002: LD_INT 3
31004: NEG
31005: PUSH
31006: LD_INT 0
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 3
31015: NEG
31016: PUSH
31017: LD_INT 1
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 4
31026: NEG
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: LIST
31040: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31041: LD_ADDR_VAR 0 28
31045: PUSH
31046: LD_INT 3
31048: NEG
31049: PUSH
31050: LD_INT 3
31052: NEG
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 3
31060: NEG
31061: PUSH
31062: LD_INT 4
31064: NEG
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 4
31072: NEG
31073: PUSH
31074: LD_INT 3
31076: NEG
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: LIST
31086: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31087: LD_ADDR_VAR 0 29
31091: PUSH
31092: LD_INT 1
31094: NEG
31095: PUSH
31096: LD_INT 3
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 0
31106: PUSH
31107: LD_INT 3
31109: NEG
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 1
31117: PUSH
31118: LD_INT 2
31120: NEG
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 1
31128: NEG
31129: PUSH
31130: LD_INT 4
31132: NEG
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 0
31140: PUSH
31141: LD_INT 4
31143: NEG
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 1
31151: PUSH
31152: LD_INT 3
31154: NEG
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 1
31162: NEG
31163: PUSH
31164: LD_INT 5
31166: NEG
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 0
31174: PUSH
31175: LD_INT 5
31177: NEG
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 1
31185: PUSH
31186: LD_INT 4
31188: NEG
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 1
31196: NEG
31197: PUSH
31198: LD_INT 6
31200: NEG
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 0
31208: PUSH
31209: LD_INT 6
31211: NEG
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 1
31219: PUSH
31220: LD_INT 5
31222: NEG
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31242: LD_ADDR_VAR 0 30
31246: PUSH
31247: LD_INT 2
31249: PUSH
31250: LD_INT 1
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 3
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 3
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 3
31280: PUSH
31281: LD_INT 1
31283: NEG
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 4
31291: PUSH
31292: LD_INT 0
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 4
31301: PUSH
31302: LD_INT 1
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 4
31311: PUSH
31312: LD_INT 1
31314: NEG
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 5
31322: PUSH
31323: LD_INT 0
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 5
31332: PUSH
31333: LD_INT 1
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 5
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 6
31353: PUSH
31354: LD_INT 0
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 6
31363: PUSH
31364: LD_INT 1
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31385: LD_ADDR_VAR 0 31
31389: PUSH
31390: LD_INT 3
31392: PUSH
31393: LD_INT 2
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 3
31402: PUSH
31403: LD_INT 3
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 2
31412: PUSH
31413: LD_INT 3
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 4
31422: PUSH
31423: LD_INT 3
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 4
31432: PUSH
31433: LD_INT 4
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 3
31442: PUSH
31443: LD_INT 4
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 5
31452: PUSH
31453: LD_INT 4
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 5
31462: PUSH
31463: LD_INT 5
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 4
31472: PUSH
31473: LD_INT 5
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 6
31482: PUSH
31483: LD_INT 5
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 6
31492: PUSH
31493: LD_INT 6
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 5
31502: PUSH
31503: LD_INT 6
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31524: LD_ADDR_VAR 0 32
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: LD_INT 3
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 0
31541: PUSH
31542: LD_INT 3
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: LD_INT 2
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 1
31562: PUSH
31563: LD_INT 4
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 0
31572: PUSH
31573: LD_INT 4
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 1
31582: NEG
31583: PUSH
31584: LD_INT 3
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: LD_INT 5
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 0
31603: PUSH
31604: LD_INT 5
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 1
31613: NEG
31614: PUSH
31615: LD_INT 4
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 1
31624: PUSH
31625: LD_INT 6
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 0
31634: PUSH
31635: LD_INT 6
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 1
31644: NEG
31645: PUSH
31646: LD_INT 5
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31667: LD_ADDR_VAR 0 33
31671: PUSH
31672: LD_INT 2
31674: NEG
31675: PUSH
31676: LD_INT 1
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 3
31685: NEG
31686: PUSH
31687: LD_INT 0
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 3
31696: NEG
31697: PUSH
31698: LD_INT 1
31700: NEG
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 3
31708: NEG
31709: PUSH
31710: LD_INT 1
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 4
31719: NEG
31720: PUSH
31721: LD_INT 0
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 4
31730: NEG
31731: PUSH
31732: LD_INT 1
31734: NEG
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 4
31742: NEG
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 5
31753: NEG
31754: PUSH
31755: LD_INT 0
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 5
31764: NEG
31765: PUSH
31766: LD_INT 1
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 5
31776: NEG
31777: PUSH
31778: LD_INT 1
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 6
31787: NEG
31788: PUSH
31789: LD_INT 0
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 6
31798: NEG
31799: PUSH
31800: LD_INT 1
31802: NEG
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31822: LD_ADDR_VAR 0 34
31826: PUSH
31827: LD_INT 2
31829: NEG
31830: PUSH
31831: LD_INT 3
31833: NEG
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 3
31841: NEG
31842: PUSH
31843: LD_INT 2
31845: NEG
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 3
31853: NEG
31854: PUSH
31855: LD_INT 3
31857: NEG
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 3
31865: NEG
31866: PUSH
31867: LD_INT 4
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 4
31877: NEG
31878: PUSH
31879: LD_INT 3
31881: NEG
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 4
31889: NEG
31890: PUSH
31891: LD_INT 4
31893: NEG
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 4
31901: NEG
31902: PUSH
31903: LD_INT 5
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 5
31913: NEG
31914: PUSH
31915: LD_INT 4
31917: NEG
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 5
31925: NEG
31926: PUSH
31927: LD_INT 5
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 5
31937: NEG
31938: PUSH
31939: LD_INT 6
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 6
31949: NEG
31950: PUSH
31951: LD_INT 5
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 6
31961: NEG
31962: PUSH
31963: LD_INT 6
31965: NEG
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31985: LD_ADDR_VAR 0 41
31989: PUSH
31990: LD_INT 0
31992: PUSH
31993: LD_INT 2
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: NEG
32004: PUSH
32005: LD_INT 3
32007: NEG
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: LD_INT 2
32018: NEG
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: LIST
32028: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32029: LD_ADDR_VAR 0 42
32033: PUSH
32034: LD_INT 2
32036: PUSH
32037: LD_INT 0
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 2
32046: PUSH
32047: LD_INT 1
32049: NEG
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 3
32057: PUSH
32058: LD_INT 1
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: LIST
32069: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32070: LD_ADDR_VAR 0 43
32074: PUSH
32075: LD_INT 2
32077: PUSH
32078: LD_INT 2
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 3
32087: PUSH
32088: LD_INT 2
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 2
32097: PUSH
32098: LD_INT 3
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: LIST
32109: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32110: LD_ADDR_VAR 0 44
32114: PUSH
32115: LD_INT 0
32117: PUSH
32118: LD_INT 2
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 1
32127: PUSH
32128: LD_INT 3
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 1
32137: NEG
32138: PUSH
32139: LD_INT 2
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: LIST
32150: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32151: LD_ADDR_VAR 0 45
32155: PUSH
32156: LD_INT 2
32158: NEG
32159: PUSH
32160: LD_INT 0
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 2
32169: NEG
32170: PUSH
32171: LD_INT 1
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 3
32180: NEG
32181: PUSH
32182: LD_INT 1
32184: NEG
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: LIST
32194: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32195: LD_ADDR_VAR 0 46
32199: PUSH
32200: LD_INT 2
32202: NEG
32203: PUSH
32204: LD_INT 2
32206: NEG
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 2
32214: NEG
32215: PUSH
32216: LD_INT 3
32218: NEG
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 3
32226: NEG
32227: PUSH
32228: LD_INT 2
32230: NEG
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: LIST
32240: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32241: LD_ADDR_VAR 0 47
32245: PUSH
32246: LD_INT 2
32248: NEG
32249: PUSH
32250: LD_INT 3
32252: NEG
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 1
32260: NEG
32261: PUSH
32262: LD_INT 3
32264: NEG
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32274: LD_ADDR_VAR 0 48
32278: PUSH
32279: LD_INT 1
32281: PUSH
32282: LD_INT 2
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 2
32292: PUSH
32293: LD_INT 1
32295: NEG
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32305: LD_ADDR_VAR 0 49
32309: PUSH
32310: LD_INT 3
32312: PUSH
32313: LD_INT 1
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 3
32322: PUSH
32323: LD_INT 2
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32334: LD_ADDR_VAR 0 50
32338: PUSH
32339: LD_INT 2
32341: PUSH
32342: LD_INT 3
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 1
32351: PUSH
32352: LD_INT 3
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32363: LD_ADDR_VAR 0 51
32367: PUSH
32368: LD_INT 1
32370: NEG
32371: PUSH
32372: LD_INT 2
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 2
32381: NEG
32382: PUSH
32383: LD_INT 1
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32394: LD_ADDR_VAR 0 52
32398: PUSH
32399: LD_INT 3
32401: NEG
32402: PUSH
32403: LD_INT 1
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 3
32413: NEG
32414: PUSH
32415: LD_INT 2
32417: NEG
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32427: LD_ADDR_VAR 0 53
32431: PUSH
32432: LD_INT 1
32434: NEG
32435: PUSH
32436: LD_INT 3
32438: NEG
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 0
32446: PUSH
32447: LD_INT 3
32449: NEG
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: LD_INT 2
32460: NEG
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: LIST
32470: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32471: LD_ADDR_VAR 0 54
32475: PUSH
32476: LD_INT 2
32478: PUSH
32479: LD_INT 1
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 3
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 3
32499: PUSH
32500: LD_INT 1
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: LIST
32511: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32512: LD_ADDR_VAR 0 55
32516: PUSH
32517: LD_INT 3
32519: PUSH
32520: LD_INT 2
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 3
32529: PUSH
32530: LD_INT 3
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 2
32539: PUSH
32540: LD_INT 3
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: LIST
32551: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32552: LD_ADDR_VAR 0 56
32556: PUSH
32557: LD_INT 1
32559: PUSH
32560: LD_INT 3
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: LD_INT 3
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 1
32579: NEG
32580: PUSH
32581: LD_INT 2
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: LIST
32592: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32593: LD_ADDR_VAR 0 57
32597: PUSH
32598: LD_INT 2
32600: NEG
32601: PUSH
32602: LD_INT 1
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 3
32611: NEG
32612: PUSH
32613: LD_INT 0
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 3
32622: NEG
32623: PUSH
32624: LD_INT 1
32626: NEG
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: LIST
32636: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32637: LD_ADDR_VAR 0 58
32641: PUSH
32642: LD_INT 2
32644: NEG
32645: PUSH
32646: LD_INT 3
32648: NEG
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 3
32656: NEG
32657: PUSH
32658: LD_INT 2
32660: NEG
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 3
32668: NEG
32669: PUSH
32670: LD_INT 3
32672: NEG
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: LIST
32682: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32683: LD_ADDR_VAR 0 59
32687: PUSH
32688: LD_INT 1
32690: NEG
32691: PUSH
32692: LD_INT 2
32694: NEG
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 0
32702: PUSH
32703: LD_INT 2
32705: NEG
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 1
32713: PUSH
32714: LD_INT 1
32716: NEG
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: LIST
32726: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32727: LD_ADDR_VAR 0 60
32731: PUSH
32732: LD_INT 1
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 2
32745: PUSH
32746: LD_INT 0
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 2
32755: PUSH
32756: LD_INT 1
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: LIST
32767: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32768: LD_ADDR_VAR 0 61
32772: PUSH
32773: LD_INT 2
32775: PUSH
32776: LD_INT 1
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 2
32785: PUSH
32786: LD_INT 2
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 1
32795: PUSH
32796: LD_INT 2
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: LIST
32807: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32808: LD_ADDR_VAR 0 62
32812: PUSH
32813: LD_INT 1
32815: PUSH
32816: LD_INT 2
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 0
32825: PUSH
32826: LD_INT 2
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 1
32835: NEG
32836: PUSH
32837: LD_INT 1
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: LIST
32848: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32849: LD_ADDR_VAR 0 63
32853: PUSH
32854: LD_INT 1
32856: NEG
32857: PUSH
32858: LD_INT 1
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 2
32867: NEG
32868: PUSH
32869: LD_INT 0
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 2
32878: NEG
32879: PUSH
32880: LD_INT 1
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: LIST
32892: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32893: LD_ADDR_VAR 0 64
32897: PUSH
32898: LD_INT 1
32900: NEG
32901: PUSH
32902: LD_INT 2
32904: NEG
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 2
32912: NEG
32913: PUSH
32914: LD_INT 1
32916: NEG
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 2
32924: NEG
32925: PUSH
32926: LD_INT 2
32928: NEG
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: LIST
32938: ST_TO_ADDR
// end ; 2 :
32939: GO 36205
32941: LD_INT 2
32943: DOUBLE
32944: EQUAL
32945: IFTRUE 32949
32947: GO 36204
32949: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32950: LD_ADDR_VAR 0 29
32954: PUSH
32955: LD_INT 4
32957: PUSH
32958: LD_INT 0
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 4
32967: PUSH
32968: LD_INT 1
32970: NEG
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 5
32978: PUSH
32979: LD_INT 0
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 5
32988: PUSH
32989: LD_INT 1
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 4
32998: PUSH
32999: LD_INT 1
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 3
33008: PUSH
33009: LD_INT 0
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 3
33018: PUSH
33019: LD_INT 1
33021: NEG
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 3
33029: PUSH
33030: LD_INT 2
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 5
33040: PUSH
33041: LD_INT 2
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 3
33050: PUSH
33051: LD_INT 3
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 3
33060: PUSH
33061: LD_INT 2
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 4
33070: PUSH
33071: LD_INT 3
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 4
33080: PUSH
33081: LD_INT 4
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 3
33090: PUSH
33091: LD_INT 4
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 2
33100: PUSH
33101: LD_INT 3
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 2
33110: PUSH
33111: LD_INT 2
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 4
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 2
33130: PUSH
33131: LD_INT 4
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 0
33140: PUSH
33141: LD_INT 4
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 0
33150: PUSH
33151: LD_INT 3
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 1
33160: PUSH
33161: LD_INT 4
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 1
33170: PUSH
33171: LD_INT 5
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 0
33180: PUSH
33181: LD_INT 5
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 1
33190: NEG
33191: PUSH
33192: LD_INT 4
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 1
33201: NEG
33202: PUSH
33203: LD_INT 3
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 2
33212: PUSH
33213: LD_INT 5
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 2
33222: NEG
33223: PUSH
33224: LD_INT 3
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 3
33233: NEG
33234: PUSH
33235: LD_INT 0
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 3
33244: NEG
33245: PUSH
33246: LD_INT 1
33248: NEG
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 2
33256: NEG
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 2
33267: NEG
33268: PUSH
33269: LD_INT 1
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 3
33278: NEG
33279: PUSH
33280: LD_INT 1
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 4
33289: NEG
33290: PUSH
33291: LD_INT 0
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 4
33300: NEG
33301: PUSH
33302: LD_INT 1
33304: NEG
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 4
33312: NEG
33313: PUSH
33314: LD_INT 2
33316: NEG
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 2
33324: NEG
33325: PUSH
33326: LD_INT 2
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 4
33335: NEG
33336: PUSH
33337: LD_INT 4
33339: NEG
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 4
33347: NEG
33348: PUSH
33349: LD_INT 5
33351: NEG
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 3
33359: NEG
33360: PUSH
33361: LD_INT 4
33363: NEG
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 3
33371: NEG
33372: PUSH
33373: LD_INT 3
33375: NEG
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 4
33383: NEG
33384: PUSH
33385: LD_INT 3
33387: NEG
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 5
33395: NEG
33396: PUSH
33397: LD_INT 4
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 5
33407: NEG
33408: PUSH
33409: LD_INT 5
33411: NEG
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 3
33419: NEG
33420: PUSH
33421: LD_INT 5
33423: NEG
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 5
33431: NEG
33432: PUSH
33433: LD_INT 3
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33488: LD_ADDR_VAR 0 30
33492: PUSH
33493: LD_INT 4
33495: PUSH
33496: LD_INT 4
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 4
33505: PUSH
33506: LD_INT 3
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 5
33515: PUSH
33516: LD_INT 4
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 5
33525: PUSH
33526: LD_INT 5
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 4
33535: PUSH
33536: LD_INT 5
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 3
33545: PUSH
33546: LD_INT 4
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 3
33555: PUSH
33556: LD_INT 3
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 5
33565: PUSH
33566: LD_INT 3
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 3
33575: PUSH
33576: LD_INT 5
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 0
33585: PUSH
33586: LD_INT 3
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 0
33595: PUSH
33596: LD_INT 2
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 1
33605: PUSH
33606: LD_INT 3
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 1
33615: PUSH
33616: LD_INT 4
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: LD_INT 4
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 1
33635: NEG
33636: PUSH
33637: LD_INT 3
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 1
33646: NEG
33647: PUSH
33648: LD_INT 2
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: LD_INT 4
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 2
33667: NEG
33668: PUSH
33669: LD_INT 2
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 4
33678: NEG
33679: PUSH
33680: LD_INT 0
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 4
33689: NEG
33690: PUSH
33691: LD_INT 1
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 3
33701: NEG
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 3
33712: NEG
33713: PUSH
33714: LD_INT 1
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 4
33723: NEG
33724: PUSH
33725: LD_INT 1
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 5
33734: NEG
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 5
33745: NEG
33746: PUSH
33747: LD_INT 1
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 5
33757: NEG
33758: PUSH
33759: LD_INT 2
33761: NEG
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 3
33769: NEG
33770: PUSH
33771: LD_INT 2
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 3
33780: NEG
33781: PUSH
33782: LD_INT 3
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 3
33792: NEG
33793: PUSH
33794: LD_INT 4
33796: NEG
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 2
33804: NEG
33805: PUSH
33806: LD_INT 3
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 2
33816: NEG
33817: PUSH
33818: LD_INT 2
33820: NEG
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 3
33828: NEG
33829: PUSH
33830: LD_INT 2
33832: NEG
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 4
33840: NEG
33841: PUSH
33842: LD_INT 3
33844: NEG
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 4
33852: NEG
33853: PUSH
33854: LD_INT 4
33856: NEG
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 2
33864: NEG
33865: PUSH
33866: LD_INT 4
33868: NEG
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 4
33876: NEG
33877: PUSH
33878: LD_INT 2
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 0
33888: PUSH
33889: LD_INT 4
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 0
33899: PUSH
33900: LD_INT 5
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 1
33910: PUSH
33911: LD_INT 4
33913: NEG
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 1
33921: PUSH
33922: LD_INT 3
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 0
33932: PUSH
33933: LD_INT 3
33935: NEG
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 1
33943: NEG
33944: PUSH
33945: LD_INT 4
33947: NEG
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 1
33955: NEG
33956: PUSH
33957: LD_INT 5
33959: NEG
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 2
33967: PUSH
33968: LD_INT 3
33970: NEG
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 2
33978: NEG
33979: PUSH
33980: LD_INT 5
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34035: LD_ADDR_VAR 0 31
34039: PUSH
34040: LD_INT 0
34042: PUSH
34043: LD_INT 4
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: LD_INT 3
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 1
34062: PUSH
34063: LD_INT 4
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 1
34072: PUSH
34073: LD_INT 5
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 0
34082: PUSH
34083: LD_INT 5
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 1
34092: NEG
34093: PUSH
34094: LD_INT 4
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 1
34103: NEG
34104: PUSH
34105: LD_INT 3
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 2
34114: PUSH
34115: LD_INT 5
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 2
34124: NEG
34125: PUSH
34126: LD_INT 3
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 3
34135: NEG
34136: PUSH
34137: LD_INT 0
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 3
34146: NEG
34147: PUSH
34148: LD_INT 1
34150: NEG
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 2
34158: NEG
34159: PUSH
34160: LD_INT 0
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 2
34169: NEG
34170: PUSH
34171: LD_INT 1
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 3
34180: NEG
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 4
34191: NEG
34192: PUSH
34193: LD_INT 0
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 4
34202: NEG
34203: PUSH
34204: LD_INT 1
34206: NEG
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 4
34214: NEG
34215: PUSH
34216: LD_INT 2
34218: NEG
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 2
34226: NEG
34227: PUSH
34228: LD_INT 2
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 4
34237: NEG
34238: PUSH
34239: LD_INT 4
34241: NEG
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 4
34249: NEG
34250: PUSH
34251: LD_INT 5
34253: NEG
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 3
34261: NEG
34262: PUSH
34263: LD_INT 4
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 3
34273: NEG
34274: PUSH
34275: LD_INT 3
34277: NEG
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 4
34285: NEG
34286: PUSH
34287: LD_INT 3
34289: NEG
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 5
34297: NEG
34298: PUSH
34299: LD_INT 4
34301: NEG
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 5
34309: NEG
34310: PUSH
34311: LD_INT 5
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 3
34321: NEG
34322: PUSH
34323: LD_INT 5
34325: NEG
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 5
34333: NEG
34334: PUSH
34335: LD_INT 3
34337: NEG
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 0
34345: PUSH
34346: LD_INT 3
34348: NEG
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 0
34356: PUSH
34357: LD_INT 4
34359: NEG
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: LD_INT 3
34370: NEG
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 1
34378: PUSH
34379: LD_INT 2
34381: NEG
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 0
34389: PUSH
34390: LD_INT 2
34392: NEG
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 1
34400: NEG
34401: PUSH
34402: LD_INT 3
34404: NEG
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 1
34412: NEG
34413: PUSH
34414: LD_INT 4
34416: NEG
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 2
34424: PUSH
34425: LD_INT 2
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 2
34435: NEG
34436: PUSH
34437: LD_INT 4
34439: NEG
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 4
34447: PUSH
34448: LD_INT 0
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 4
34457: PUSH
34458: LD_INT 1
34460: NEG
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 5
34468: PUSH
34469: LD_INT 0
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 5
34478: PUSH
34479: LD_INT 1
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 4
34488: PUSH
34489: LD_INT 1
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 3
34498: PUSH
34499: LD_INT 0
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 3
34508: PUSH
34509: LD_INT 1
34511: NEG
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 3
34519: PUSH
34520: LD_INT 2
34522: NEG
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 5
34530: PUSH
34531: LD_INT 2
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34585: LD_ADDR_VAR 0 32
34589: PUSH
34590: LD_INT 4
34592: NEG
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 4
34603: NEG
34604: PUSH
34605: LD_INT 1
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 3
34615: NEG
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 3
34626: NEG
34627: PUSH
34628: LD_INT 1
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 4
34637: NEG
34638: PUSH
34639: LD_INT 1
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 5
34648: NEG
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 5
34659: NEG
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 5
34671: NEG
34672: PUSH
34673: LD_INT 2
34675: NEG
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 3
34683: NEG
34684: PUSH
34685: LD_INT 2
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 3
34694: NEG
34695: PUSH
34696: LD_INT 3
34698: NEG
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 3
34706: NEG
34707: PUSH
34708: LD_INT 4
34710: NEG
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 2
34718: NEG
34719: PUSH
34720: LD_INT 3
34722: NEG
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 2
34730: NEG
34731: PUSH
34732: LD_INT 2
34734: NEG
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 3
34742: NEG
34743: PUSH
34744: LD_INT 2
34746: NEG
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 4
34754: NEG
34755: PUSH
34756: LD_INT 3
34758: NEG
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 4
34766: NEG
34767: PUSH
34768: LD_INT 4
34770: NEG
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 2
34778: NEG
34779: PUSH
34780: LD_INT 4
34782: NEG
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 4
34790: NEG
34791: PUSH
34792: LD_INT 2
34794: NEG
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 0
34802: PUSH
34803: LD_INT 4
34805: NEG
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: LD_INT 5
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 1
34824: PUSH
34825: LD_INT 4
34827: NEG
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 1
34835: PUSH
34836: LD_INT 3
34838: NEG
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 0
34846: PUSH
34847: LD_INT 3
34849: NEG
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 1
34857: NEG
34858: PUSH
34859: LD_INT 4
34861: NEG
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 1
34869: NEG
34870: PUSH
34871: LD_INT 5
34873: NEG
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 2
34881: PUSH
34882: LD_INT 3
34884: NEG
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 2
34892: NEG
34893: PUSH
34894: LD_INT 5
34896: NEG
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 3
34904: PUSH
34905: LD_INT 0
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 3
34914: PUSH
34915: LD_INT 1
34917: NEG
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 4
34925: PUSH
34926: LD_INT 0
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 4
34935: PUSH
34936: LD_INT 1
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 3
34945: PUSH
34946: LD_INT 1
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 2
34955: PUSH
34956: LD_INT 0
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 2
34965: PUSH
34966: LD_INT 1
34968: NEG
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: LD_INT 2
34979: NEG
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 4
34987: PUSH
34988: LD_INT 2
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 4
34997: PUSH
34998: LD_INT 4
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 4
35007: PUSH
35008: LD_INT 3
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 5
35017: PUSH
35018: LD_INT 4
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 5
35027: PUSH
35028: LD_INT 5
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 4
35037: PUSH
35038: LD_INT 5
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 3
35047: PUSH
35048: LD_INT 4
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 3
35057: PUSH
35058: LD_INT 3
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 5
35067: PUSH
35068: LD_INT 3
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 3
35077: PUSH
35078: LD_INT 5
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35132: LD_ADDR_VAR 0 33
35136: PUSH
35137: LD_INT 4
35139: NEG
35140: PUSH
35141: LD_INT 4
35143: NEG
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 4
35151: NEG
35152: PUSH
35153: LD_INT 5
35155: NEG
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 3
35163: NEG
35164: PUSH
35165: LD_INT 4
35167: NEG
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 3
35175: NEG
35176: PUSH
35177: LD_INT 3
35179: NEG
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 4
35187: NEG
35188: PUSH
35189: LD_INT 3
35191: NEG
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 5
35199: NEG
35200: PUSH
35201: LD_INT 4
35203: NEG
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 5
35211: NEG
35212: PUSH
35213: LD_INT 5
35215: NEG
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 3
35223: NEG
35224: PUSH
35225: LD_INT 5
35227: NEG
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 5
35235: NEG
35236: PUSH
35237: LD_INT 3
35239: NEG
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: LD_INT 3
35250: NEG
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 0
35258: PUSH
35259: LD_INT 4
35261: NEG
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 1
35269: PUSH
35270: LD_INT 3
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 1
35280: PUSH
35281: LD_INT 2
35283: NEG
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 0
35291: PUSH
35292: LD_INT 2
35294: NEG
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 1
35302: NEG
35303: PUSH
35304: LD_INT 3
35306: NEG
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 1
35314: NEG
35315: PUSH
35316: LD_INT 4
35318: NEG
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 2
35326: PUSH
35327: LD_INT 2
35329: NEG
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 2
35337: NEG
35338: PUSH
35339: LD_INT 4
35341: NEG
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 4
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 4
35359: PUSH
35360: LD_INT 1
35362: NEG
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 5
35370: PUSH
35371: LD_INT 0
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 5
35380: PUSH
35381: LD_INT 1
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 4
35390: PUSH
35391: LD_INT 1
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 3
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 3
35410: PUSH
35411: LD_INT 1
35413: NEG
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 3
35421: PUSH
35422: LD_INT 2
35424: NEG
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 5
35432: PUSH
35433: LD_INT 2
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 3
35442: PUSH
35443: LD_INT 3
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 3
35452: PUSH
35453: LD_INT 2
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 4
35462: PUSH
35463: LD_INT 3
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 4
35472: PUSH
35473: LD_INT 4
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 3
35482: PUSH
35483: LD_INT 4
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 2
35492: PUSH
35493: LD_INT 3
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 2
35502: PUSH
35503: LD_INT 2
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 4
35512: PUSH
35513: LD_INT 2
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 2
35522: PUSH
35523: LD_INT 4
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 0
35532: PUSH
35533: LD_INT 4
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 0
35542: PUSH
35543: LD_INT 3
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 1
35552: PUSH
35553: LD_INT 4
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 1
35562: PUSH
35563: LD_INT 5
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 0
35572: PUSH
35573: LD_INT 5
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 1
35582: NEG
35583: PUSH
35584: LD_INT 4
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 1
35593: NEG
35594: PUSH
35595: LD_INT 3
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 2
35604: PUSH
35605: LD_INT 5
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 2
35614: NEG
35615: PUSH
35616: LD_INT 3
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35670: LD_ADDR_VAR 0 34
35674: PUSH
35675: LD_INT 0
35677: PUSH
35678: LD_INT 4
35680: NEG
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: LD_INT 5
35691: NEG
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 1
35699: PUSH
35700: LD_INT 4
35702: NEG
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 1
35710: PUSH
35711: LD_INT 3
35713: NEG
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 0
35721: PUSH
35722: LD_INT 3
35724: NEG
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 1
35732: NEG
35733: PUSH
35734: LD_INT 4
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: NEG
35745: PUSH
35746: LD_INT 5
35748: NEG
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 2
35756: PUSH
35757: LD_INT 3
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 2
35767: NEG
35768: PUSH
35769: LD_INT 5
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 3
35779: PUSH
35780: LD_INT 0
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 3
35789: PUSH
35790: LD_INT 1
35792: NEG
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 4
35800: PUSH
35801: LD_INT 0
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 4
35810: PUSH
35811: LD_INT 1
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 3
35820: PUSH
35821: LD_INT 1
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 2
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 2
35840: PUSH
35841: LD_INT 1
35843: NEG
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 2
35851: PUSH
35852: LD_INT 2
35854: NEG
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 4
35862: PUSH
35863: LD_INT 2
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 4
35872: PUSH
35873: LD_INT 4
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 4
35882: PUSH
35883: LD_INT 3
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 5
35892: PUSH
35893: LD_INT 4
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 5
35902: PUSH
35903: LD_INT 5
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 4
35912: PUSH
35913: LD_INT 5
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 3
35922: PUSH
35923: LD_INT 4
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 3
35932: PUSH
35933: LD_INT 3
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 5
35942: PUSH
35943: LD_INT 3
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 3
35952: PUSH
35953: LD_INT 5
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 0
35962: PUSH
35963: LD_INT 3
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 0
35972: PUSH
35973: LD_INT 2
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 1
35982: PUSH
35983: LD_INT 3
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 1
35992: PUSH
35993: LD_INT 4
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: LD_INT 4
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 1
36012: NEG
36013: PUSH
36014: LD_INT 3
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 1
36023: NEG
36024: PUSH
36025: LD_INT 2
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 2
36034: PUSH
36035: LD_INT 4
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 2
36044: NEG
36045: PUSH
36046: LD_INT 2
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 4
36055: NEG
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 4
36066: NEG
36067: PUSH
36068: LD_INT 1
36070: NEG
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 3
36078: NEG
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 3
36089: NEG
36090: PUSH
36091: LD_INT 1
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 4
36100: NEG
36101: PUSH
36102: LD_INT 1
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 5
36111: NEG
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 5
36122: NEG
36123: PUSH
36124: LD_INT 1
36126: NEG
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 5
36134: NEG
36135: PUSH
36136: LD_INT 2
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 3
36146: NEG
36147: PUSH
36148: LD_INT 2
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: ST_TO_ADDR
// end ; end ;
36202: GO 36205
36204: POP
// case btype of b_depot , b_warehouse :
36205: LD_VAR 0 1
36209: PUSH
36210: LD_INT 0
36212: DOUBLE
36213: EQUAL
36214: IFTRUE 36224
36216: LD_INT 1
36218: DOUBLE
36219: EQUAL
36220: IFTRUE 36224
36222: GO 36425
36224: POP
// case nation of nation_american :
36225: LD_VAR 0 5
36229: PUSH
36230: LD_INT 1
36232: DOUBLE
36233: EQUAL
36234: IFTRUE 36238
36236: GO 36294
36238: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
36239: LD_ADDR_VAR 0 9
36243: PUSH
36244: LD_VAR 0 11
36248: PUSH
36249: LD_VAR 0 12
36253: PUSH
36254: LD_VAR 0 13
36258: PUSH
36259: LD_VAR 0 14
36263: PUSH
36264: LD_VAR 0 15
36268: PUSH
36269: LD_VAR 0 16
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: PUSH
36282: LD_VAR 0 4
36286: PUSH
36287: LD_INT 1
36289: PLUS
36290: ARRAY
36291: ST_TO_ADDR
36292: GO 36423
36294: LD_INT 2
36296: DOUBLE
36297: EQUAL
36298: IFTRUE 36302
36300: GO 36358
36302: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
36303: LD_ADDR_VAR 0 9
36307: PUSH
36308: LD_VAR 0 17
36312: PUSH
36313: LD_VAR 0 18
36317: PUSH
36318: LD_VAR 0 19
36322: PUSH
36323: LD_VAR 0 20
36327: PUSH
36328: LD_VAR 0 21
36332: PUSH
36333: LD_VAR 0 22
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: PUSH
36346: LD_VAR 0 4
36350: PUSH
36351: LD_INT 1
36353: PLUS
36354: ARRAY
36355: ST_TO_ADDR
36356: GO 36423
36358: LD_INT 3
36360: DOUBLE
36361: EQUAL
36362: IFTRUE 36366
36364: GO 36422
36366: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36367: LD_ADDR_VAR 0 9
36371: PUSH
36372: LD_VAR 0 23
36376: PUSH
36377: LD_VAR 0 24
36381: PUSH
36382: LD_VAR 0 25
36386: PUSH
36387: LD_VAR 0 26
36391: PUSH
36392: LD_VAR 0 27
36396: PUSH
36397: LD_VAR 0 28
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: PUSH
36410: LD_VAR 0 4
36414: PUSH
36415: LD_INT 1
36417: PLUS
36418: ARRAY
36419: ST_TO_ADDR
36420: GO 36423
36422: POP
36423: GO 36972
36425: LD_INT 2
36427: DOUBLE
36428: EQUAL
36429: IFTRUE 36439
36431: LD_INT 3
36433: DOUBLE
36434: EQUAL
36435: IFTRUE 36439
36437: GO 36495
36439: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36440: LD_ADDR_VAR 0 9
36444: PUSH
36445: LD_VAR 0 29
36449: PUSH
36450: LD_VAR 0 30
36454: PUSH
36455: LD_VAR 0 31
36459: PUSH
36460: LD_VAR 0 32
36464: PUSH
36465: LD_VAR 0 33
36469: PUSH
36470: LD_VAR 0 34
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: PUSH
36483: LD_VAR 0 4
36487: PUSH
36488: LD_INT 1
36490: PLUS
36491: ARRAY
36492: ST_TO_ADDR
36493: GO 36972
36495: LD_INT 16
36497: DOUBLE
36498: EQUAL
36499: IFTRUE 36551
36501: LD_INT 17
36503: DOUBLE
36504: EQUAL
36505: IFTRUE 36551
36507: LD_INT 18
36509: DOUBLE
36510: EQUAL
36511: IFTRUE 36551
36513: LD_INT 19
36515: DOUBLE
36516: EQUAL
36517: IFTRUE 36551
36519: LD_INT 20
36521: DOUBLE
36522: EQUAL
36523: IFTRUE 36551
36525: LD_INT 21
36527: DOUBLE
36528: EQUAL
36529: IFTRUE 36551
36531: LD_INT 23
36533: DOUBLE
36534: EQUAL
36535: IFTRUE 36551
36537: LD_INT 24
36539: DOUBLE
36540: EQUAL
36541: IFTRUE 36551
36543: LD_INT 25
36545: DOUBLE
36546: EQUAL
36547: IFTRUE 36551
36549: GO 36607
36551: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36552: LD_ADDR_VAR 0 9
36556: PUSH
36557: LD_VAR 0 35
36561: PUSH
36562: LD_VAR 0 36
36566: PUSH
36567: LD_VAR 0 37
36571: PUSH
36572: LD_VAR 0 38
36576: PUSH
36577: LD_VAR 0 39
36581: PUSH
36582: LD_VAR 0 40
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: PUSH
36595: LD_VAR 0 4
36599: PUSH
36600: LD_INT 1
36602: PLUS
36603: ARRAY
36604: ST_TO_ADDR
36605: GO 36972
36607: LD_INT 6
36609: DOUBLE
36610: EQUAL
36611: IFTRUE 36663
36613: LD_INT 7
36615: DOUBLE
36616: EQUAL
36617: IFTRUE 36663
36619: LD_INT 8
36621: DOUBLE
36622: EQUAL
36623: IFTRUE 36663
36625: LD_INT 13
36627: DOUBLE
36628: EQUAL
36629: IFTRUE 36663
36631: LD_INT 12
36633: DOUBLE
36634: EQUAL
36635: IFTRUE 36663
36637: LD_INT 15
36639: DOUBLE
36640: EQUAL
36641: IFTRUE 36663
36643: LD_INT 11
36645: DOUBLE
36646: EQUAL
36647: IFTRUE 36663
36649: LD_INT 14
36651: DOUBLE
36652: EQUAL
36653: IFTRUE 36663
36655: LD_INT 10
36657: DOUBLE
36658: EQUAL
36659: IFTRUE 36663
36661: GO 36719
36663: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
36664: LD_ADDR_VAR 0 9
36668: PUSH
36669: LD_VAR 0 41
36673: PUSH
36674: LD_VAR 0 42
36678: PUSH
36679: LD_VAR 0 43
36683: PUSH
36684: LD_VAR 0 44
36688: PUSH
36689: LD_VAR 0 45
36693: PUSH
36694: LD_VAR 0 46
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: PUSH
36707: LD_VAR 0 4
36711: PUSH
36712: LD_INT 1
36714: PLUS
36715: ARRAY
36716: ST_TO_ADDR
36717: GO 36972
36719: LD_INT 36
36721: DOUBLE
36722: EQUAL
36723: IFTRUE 36727
36725: GO 36783
36727: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36728: LD_ADDR_VAR 0 9
36732: PUSH
36733: LD_VAR 0 47
36737: PUSH
36738: LD_VAR 0 48
36742: PUSH
36743: LD_VAR 0 49
36747: PUSH
36748: LD_VAR 0 50
36752: PUSH
36753: LD_VAR 0 51
36757: PUSH
36758: LD_VAR 0 52
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: PUSH
36771: LD_VAR 0 4
36775: PUSH
36776: LD_INT 1
36778: PLUS
36779: ARRAY
36780: ST_TO_ADDR
36781: GO 36972
36783: LD_INT 4
36785: DOUBLE
36786: EQUAL
36787: IFTRUE 36809
36789: LD_INT 5
36791: DOUBLE
36792: EQUAL
36793: IFTRUE 36809
36795: LD_INT 34
36797: DOUBLE
36798: EQUAL
36799: IFTRUE 36809
36801: LD_INT 37
36803: DOUBLE
36804: EQUAL
36805: IFTRUE 36809
36807: GO 36865
36809: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36810: LD_ADDR_VAR 0 9
36814: PUSH
36815: LD_VAR 0 53
36819: PUSH
36820: LD_VAR 0 54
36824: PUSH
36825: LD_VAR 0 55
36829: PUSH
36830: LD_VAR 0 56
36834: PUSH
36835: LD_VAR 0 57
36839: PUSH
36840: LD_VAR 0 58
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: PUSH
36853: LD_VAR 0 4
36857: PUSH
36858: LD_INT 1
36860: PLUS
36861: ARRAY
36862: ST_TO_ADDR
36863: GO 36972
36865: LD_INT 31
36867: DOUBLE
36868: EQUAL
36869: IFTRUE 36915
36871: LD_INT 32
36873: DOUBLE
36874: EQUAL
36875: IFTRUE 36915
36877: LD_INT 33
36879: DOUBLE
36880: EQUAL
36881: IFTRUE 36915
36883: LD_INT 27
36885: DOUBLE
36886: EQUAL
36887: IFTRUE 36915
36889: LD_INT 26
36891: DOUBLE
36892: EQUAL
36893: IFTRUE 36915
36895: LD_INT 28
36897: DOUBLE
36898: EQUAL
36899: IFTRUE 36915
36901: LD_INT 29
36903: DOUBLE
36904: EQUAL
36905: IFTRUE 36915
36907: LD_INT 30
36909: DOUBLE
36910: EQUAL
36911: IFTRUE 36915
36913: GO 36971
36915: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
36916: LD_ADDR_VAR 0 9
36920: PUSH
36921: LD_VAR 0 59
36925: PUSH
36926: LD_VAR 0 60
36930: PUSH
36931: LD_VAR 0 61
36935: PUSH
36936: LD_VAR 0 62
36940: PUSH
36941: LD_VAR 0 63
36945: PUSH
36946: LD_VAR 0 64
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: PUSH
36959: LD_VAR 0 4
36963: PUSH
36964: LD_INT 1
36966: PLUS
36967: ARRAY
36968: ST_TO_ADDR
36969: GO 36972
36971: POP
// temp_list2 = [ ] ;
36972: LD_ADDR_VAR 0 10
36976: PUSH
36977: EMPTY
36978: ST_TO_ADDR
// for i in temp_list do
36979: LD_ADDR_VAR 0 8
36983: PUSH
36984: LD_VAR 0 9
36988: PUSH
36989: FOR_IN
36990: IFFALSE 37042
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36992: LD_ADDR_VAR 0 10
36996: PUSH
36997: LD_VAR 0 10
37001: PUSH
37002: LD_VAR 0 8
37006: PUSH
37007: LD_INT 1
37009: ARRAY
37010: PUSH
37011: LD_VAR 0 2
37015: PLUS
37016: PUSH
37017: LD_VAR 0 8
37021: PUSH
37022: LD_INT 2
37024: ARRAY
37025: PUSH
37026: LD_VAR 0 3
37030: PLUS
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: EMPTY
37037: LIST
37038: ADD
37039: ST_TO_ADDR
37040: GO 36989
37042: POP
37043: POP
// result = temp_list2 ;
37044: LD_ADDR_VAR 0 7
37048: PUSH
37049: LD_VAR 0 10
37053: ST_TO_ADDR
// end ;
37054: LD_VAR 0 7
37058: RET
// export function GetDriverVehicle ( unit ) ; begin
37059: LD_INT 0
37061: PPUSH
// if not unit then
37062: LD_VAR 0 1
37066: NOT
37067: IFFALSE 37071
// exit ;
37069: GO 37109
// result := IsInUnit ( unit ) ;
37071: LD_ADDR_VAR 0 2
37075: PUSH
37076: LD_VAR 0 1
37080: PPUSH
37081: CALL_OW 310
37085: ST_TO_ADDR
// if GetType ( result ) <> unit_vehicle then
37086: LD_VAR 0 2
37090: PPUSH
37091: CALL_OW 247
37095: PUSH
37096: LD_INT 2
37098: NONEQUAL
37099: IFFALSE 37109
// result := 0 ;
37101: LD_ADDR_VAR 0 2
37105: PUSH
37106: LD_INT 0
37108: ST_TO_ADDR
// end ; end_of_file
37109: LD_VAR 0 2
37113: RET
// every 1 do var i ;
37114: GO 37116
37116: DISABLE
37117: LD_INT 0
37119: PPUSH
// begin Video ( true ) ;
37120: LD_INT 1
37122: PPUSH
37123: CALL 7097 0 1
// CenterOnXY ( 53 , 40 ) ;
37127: LD_INT 53
37129: PPUSH
37130: LD_INT 40
37132: PPUSH
37133: CALL_OW 84
// wait ( 0 0$5 ) ;
37137: LD_INT 175
37139: PPUSH
37140: CALL_OW 67
// if gammaCommander = 1 then
37144: LD_EXP 12
37148: PUSH
37149: LD_INT 1
37151: EQUAL
37152: IFFALSE 37166
// Say ( Donaldson , D1-Don-1 ) ;
37154: LD_EXP 3
37158: PPUSH
37159: LD_STRING D1-Don-1
37161: PPUSH
37162: CALL_OW 88
// if gammaCommander = 2 then
37166: LD_EXP 12
37170: PUSH
37171: LD_INT 2
37173: EQUAL
37174: IFFALSE 37188
// Say ( Brown , D1-Brown-1 ) ;
37176: LD_EXP 2
37180: PPUSH
37181: LD_STRING D1-Brown-1
37183: PPUSH
37184: CALL_OW 88
// if gammaCommander = 3 then
37188: LD_EXP 12
37192: PUSH
37193: LD_INT 3
37195: EQUAL
37196: IFFALSE 37210
// Say ( Houten , D1-VanH-1 ) ;
37198: LD_EXP 13
37202: PPUSH
37203: LD_STRING D1-VanH-1
37205: PPUSH
37206: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
37210: LD_EXP 22
37214: PPUSH
37215: LD_STRING D1-Har-1
37217: PPUSH
37218: CALL_OW 94
// if gammaCommander = 1 then
37222: LD_EXP 12
37226: PUSH
37227: LD_INT 1
37229: EQUAL
37230: IFFALSE 37244
// Say ( Donaldson , D1-Don-2 ) ;
37232: LD_EXP 3
37236: PPUSH
37237: LD_STRING D1-Don-2
37239: PPUSH
37240: CALL_OW 88
// if gammaCommander = 2 then
37244: LD_EXP 12
37248: PUSH
37249: LD_INT 2
37251: EQUAL
37252: IFFALSE 37266
// Say ( Brown , D1-Brown-2 ) ;
37254: LD_EXP 2
37258: PPUSH
37259: LD_STRING D1-Brown-2
37261: PPUSH
37262: CALL_OW 88
// if gammaCommander = 3 then
37266: LD_EXP 12
37270: PUSH
37271: LD_INT 3
37273: EQUAL
37274: IFFALSE 37288
// Say ( Houten , D1-VanH-2 ) ;
37276: LD_EXP 13
37280: PPUSH
37281: LD_STRING D1-VanH-2
37283: PPUSH
37284: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
37288: LD_EXP 22
37292: PPUSH
37293: LD_STRING D1-Har-2
37295: PPUSH
37296: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
37300: LD_INT 22
37302: PUSH
37303: LD_INT 1
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 33
37312: PUSH
37313: LD_INT 2
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 61
37322: PUSH
37323: EMPTY
37324: LIST
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: LIST
37330: PPUSH
37331: CALL_OW 69
37335: IFFALSE 37400
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
37337: LD_ADDR_VAR 0 1
37341: PUSH
37342: LD_INT 22
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 33
37354: PUSH
37355: LD_INT 2
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 61
37364: PUSH
37365: EMPTY
37366: LIST
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: LIST
37372: PPUSH
37373: CALL_OW 69
37377: PUSH
37378: FOR_IN
37379: IFFALSE 37398
// ComAgressiveMove ( i , 70 , 41 ) ;
37381: LD_VAR 0 1
37385: PPUSH
37386: LD_INT 70
37388: PPUSH
37389: LD_INT 41
37391: PPUSH
37392: CALL_OW 114
37396: GO 37378
37398: POP
37399: POP
// repeat wait ( 0 0$1 ) ;
37400: LD_INT 35
37402: PPUSH
37403: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
37407: LD_ADDR_VAR 0 1
37411: PUSH
37412: LD_INT 22
37414: PUSH
37415: LD_INT 6
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: EMPTY
37423: LIST
37424: PPUSH
37425: CALL_OW 69
37429: PUSH
37430: FOR_IN
37431: IFFALSE 37450
// ComAgressiveMove ( i , 54 , 20 ) ;
37433: LD_VAR 0 1
37437: PPUSH
37438: LD_INT 54
37440: PPUSH
37441: LD_INT 20
37443: PPUSH
37444: CALL_OW 114
37448: GO 37430
37450: POP
37451: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
37452: LD_ADDR_VAR 0 1
37456: PUSH
37457: LD_INT 22
37459: PUSH
37460: LD_INT 1
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 25
37469: PUSH
37470: LD_INT 1
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 3
37479: PUSH
37480: LD_INT 54
37482: PUSH
37483: EMPTY
37484: LIST
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: LIST
37494: PPUSH
37495: CALL_OW 69
37499: PUSH
37500: FOR_IN
37501: IFFALSE 37535
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
37503: LD_VAR 0 1
37507: PPUSH
37508: LD_INT 70
37510: PPUSH
37511: LD_INT 41
37513: PPUSH
37514: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
37518: LD_VAR 0 1
37522: PPUSH
37523: LD_INT 46
37525: PPUSH
37526: LD_INT 39
37528: PPUSH
37529: CALL_OW 174
// end ;
37533: GO 37500
37535: POP
37536: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
37537: LD_ADDR_VAR 0 1
37541: PUSH
37542: LD_INT 22
37544: PUSH
37545: LD_INT 1
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 21
37554: PUSH
37555: LD_INT 1
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 3
37564: PUSH
37565: LD_INT 24
37567: PUSH
37568: LD_INT 500
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: LIST
37583: PPUSH
37584: CALL_OW 69
37588: PUSH
37589: FOR_IN
37590: IFFALSE 37623
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
37592: LD_VAR 0 1
37596: PPUSH
37597: LD_EXP 37
37601: PPUSH
37602: CALL_OW 250
37606: PPUSH
37607: LD_EXP 37
37611: PPUSH
37612: CALL_OW 251
37616: PPUSH
37617: CALL_OW 111
37621: GO 37589
37623: POP
37624: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
37625: LD_INT 22
37627: PUSH
37628: LD_INT 6
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 21
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 24
37647: PUSH
37648: LD_INT 250
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: LIST
37659: PPUSH
37660: CALL_OW 69
37664: PUSH
37665: LD_INT 5
37667: LESS
37668: IFFALSE 37400
// Video ( false ) ;
37670: LD_INT 0
37672: PPUSH
37673: CALL 7097 0 1
// ChangeMissionObjectives ( M1 ) ;
37677: LD_STRING M1
37679: PPUSH
37680: CALL_OW 337
// SaveForQuickRestart ;
37684: CALL_OW 22
// startCutscene = 0 ;
37688: LD_ADDR_EXP 38
37692: PUSH
37693: LD_INT 0
37695: ST_TO_ADDR
// end ;
37696: PPOPN 1
37698: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
37699: LD_EXP 38
37703: IFFALSE 37794
37705: GO 37707
37707: DISABLE
37708: LD_INT 0
37710: PPUSH
37711: PPUSH
// begin enable ;
37712: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
37713: LD_ADDR_VAR 0 1
37717: PUSH
37718: LD_INT 22
37720: PUSH
37721: LD_INT 1
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 21
37730: PUSH
37731: LD_INT 1
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 3
37740: PUSH
37741: LD_INT 24
37743: PUSH
37744: LD_INT 700
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: LIST
37759: PPUSH
37760: CALL_OW 69
37764: ST_TO_ADDR
// for i in tmp do
37765: LD_ADDR_VAR 0 2
37769: PUSH
37770: LD_VAR 0 1
37774: PUSH
37775: FOR_IN
37776: IFFALSE 37792
// SetLives ( i , 700 ) ;
37778: LD_VAR 0 2
37782: PPUSH
37783: LD_INT 700
37785: PPUSH
37786: CALL_OW 234
37790: GO 37775
37792: POP
37793: POP
// end ;
37794: PPOPN 2
37796: END
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 6 ] ] ) = 0 do
37797: LD_INT 22
37799: PUSH
37800: LD_INT 1
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 101
37809: PUSH
37810: LD_INT 6
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PPUSH
37821: CALL_OW 69
37825: PUSH
37826: LD_INT 0
37828: EQUAL
37829: IFFALSE 38078
37831: GO 37833
37833: DISABLE
// begin PrepareSupportFromDelta ;
37834: CALL 3811 0 0
// firstAttack = 1 ;
37838: LD_ADDR_EXP 33
37842: PUSH
37843: LD_INT 1
37845: ST_TO_ADDR
// if IsOk ( Gladstone ) then
37846: LD_EXP 8
37850: PPUSH
37851: CALL_OW 302
37855: IFFALSE 37871
// Say ( Gladstone , D2-Glad-1 ) else
37857: LD_EXP 8
37861: PPUSH
37862: LD_STRING D2-Glad-1
37864: PPUSH
37865: CALL_OW 88
37869: GO 37979
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
37871: LD_INT 4
37873: PPUSH
37874: LD_INT 22
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 21
37886: PUSH
37887: LD_INT 1
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 2
37896: PUSH
37897: LD_INT 25
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 25
37909: PUSH
37910: LD_INT 2
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 25
37919: PUSH
37920: LD_INT 3
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 25
37929: PUSH
37930: LD_INT 4
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: LIST
37948: PPUSH
37949: CALL_OW 70
37953: PUSH
37954: LD_EXP 15
37958: PUSH
37959: LD_EXP 14
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: DIFF
37968: PPUSH
37969: LD_STRING D2-Sol1-1
37971: PPUSH
37972: LD_STRING D2-FSol1-1
37974: PPUSH
37975: CALL 7125 0 3
// if IsOK ( Donaldson ) and gammaCommander = 1 then
37979: LD_EXP 3
37983: PPUSH
37984: CALL_OW 302
37988: PUSH
37989: LD_EXP 12
37993: PUSH
37994: LD_INT 1
37996: EQUAL
37997: AND
37998: IFFALSE 38012
// Say ( Donaldson , D2-Don-1 ) ;
38000: LD_EXP 3
38004: PPUSH
38005: LD_STRING D2-Don-1
38007: PPUSH
38008: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
38012: LD_EXP 2
38016: PPUSH
38017: CALL_OW 302
38021: PUSH
38022: LD_EXP 12
38026: PUSH
38027: LD_INT 2
38029: EQUAL
38030: AND
38031: IFFALSE 38045
// Say ( Brown , D2-Brown-1 ) ;
38033: LD_EXP 2
38037: PPUSH
38038: LD_STRING D2-Brown-1
38040: PPUSH
38041: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
38045: LD_EXP 13
38049: PPUSH
38050: CALL_OW 302
38054: PUSH
38055: LD_EXP 12
38059: PUSH
38060: LD_INT 3
38062: EQUAL
38063: AND
38064: IFFALSE 38078
// Say ( Houten , D2-VanH-1 ) ;
38066: LD_EXP 13
38070: PPUSH
38071: LD_STRING D2-VanH-1
38073: PPUSH
38074: CALL_OW 88
// end ;
38078: END
// every 0 0$1 do var none ;
38079: GO 38081
38081: DISABLE
38082: LD_INT 0
38084: PPUSH
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
38085: LD_STRING 07_time
38087: PPUSH
38088: LD_INT 12600
38090: PPUSH
38091: CALL_OW 30
38095: PUSH
38096: LD_INT 3
38098: DIV
38099: PPUSH
38100: CALL_OW 67
// PrepareMacmillanSquad ;
38104: CALL 4473 0 0
// CenterNowOnUnits ( JMM ) ;
38108: LD_EXP 1
38112: PPUSH
38113: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
38117: LD_EXP 1
38121: PPUSH
38122: LD_STRING D3-JMM-1
38124: PPUSH
38125: CALL_OW 88
// JMMArrive = 1 ;
38129: LD_ADDR_EXP 39
38133: PUSH
38134: LD_INT 1
38136: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
38137: LD_EXP 3
38141: PPUSH
38142: CALL_OW 302
38146: PUSH
38147: LD_EXP 12
38151: PUSH
38152: LD_INT 1
38154: EQUAL
38155: AND
38156: IFFALSE 38172
// begin Say ( Donaldson , D3-Don-1 ) ;
38158: LD_EXP 3
38162: PPUSH
38163: LD_STRING D3-Don-1
38165: PPUSH
38166: CALL_OW 88
// end else
38170: GO 38224
// begin if gammaCommander = 1 then
38172: LD_EXP 12
38176: PUSH
38177: LD_INT 1
38179: EQUAL
38180: IFFALSE 38224
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
38182: LD_EXP 11
38186: PPUSH
38187: LD_INT 26
38189: PUSH
38190: LD_INT 1
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PPUSH
38197: CALL_OW 72
38201: PPUSH
38202: LD_STRING D3-Sol1-1
38204: PPUSH
38205: LD_STRING D3-Sol1-1
38207: PPUSH
38208: CALL 7125 0 3
// Say ( JMM , D3-JMM-2 ) ;
38212: LD_EXP 1
38216: PPUSH
38217: LD_STRING D3-JMM-2
38219: PPUSH
38220: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
38224: LD_EXP 2
38228: PPUSH
38229: CALL_OW 302
38233: PUSH
38234: LD_EXP 12
38238: PUSH
38239: LD_INT 2
38241: EQUAL
38242: AND
38243: IFFALSE 38259
// begin Say ( Brown , D3-Brown-1 ) ;
38245: LD_EXP 2
38249: PPUSH
38250: LD_STRING D3-Brown-1
38252: PPUSH
38253: CALL_OW 88
// end else
38257: GO 38311
// begin if gammaCommander = 2 then
38259: LD_EXP 12
38263: PUSH
38264: LD_INT 2
38266: EQUAL
38267: IFFALSE 38311
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
38269: LD_EXP 11
38273: PPUSH
38274: LD_INT 26
38276: PUSH
38277: LD_INT 1
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PPUSH
38284: CALL_OW 72
38288: PPUSH
38289: LD_STRING D3-Sol1-1a
38291: PPUSH
38292: LD_STRING D3-Sol1-1a
38294: PPUSH
38295: CALL 7125 0 3
// Say ( JMM , D3-JMM-2 ) ;
38299: LD_EXP 1
38303: PPUSH
38304: LD_STRING D3-JMM-2
38306: PPUSH
38307: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
38311: LD_EXP 13
38315: PPUSH
38316: CALL_OW 302
38320: PUSH
38321: LD_EXP 12
38325: PUSH
38326: LD_INT 3
38328: EQUAL
38329: AND
38330: IFFALSE 38346
// begin Say ( Houten , D3-VanH-1 ) ;
38332: LD_EXP 13
38336: PPUSH
38337: LD_STRING D3-VanH-1
38339: PPUSH
38340: CALL_OW 88
// end else
38344: GO 38398
// begin if gammaCommander = 3 then
38346: LD_EXP 12
38350: PUSH
38351: LD_INT 3
38353: EQUAL
38354: IFFALSE 38398
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
38356: LD_EXP 11
38360: PPUSH
38361: LD_INT 26
38363: PUSH
38364: LD_INT 1
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PPUSH
38371: CALL_OW 72
38375: PPUSH
38376: LD_STRING D3-Sol1-1b
38378: PPUSH
38379: LD_STRING D3-Sol1-1b
38381: PPUSH
38382: CALL 7125 0 3
// Say ( JMM , D3-JMM-2 ) ;
38386: LD_EXP 1
38390: PPUSH
38391: LD_STRING D3-JMM-2
38393: PPUSH
38394: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
38398: LD_EXP 15
38402: PPUSH
38403: CALL_OW 302
38407: IFFALSE 38435
// begin Say ( Joan , D3a-Joan-1 ) ;
38409: LD_EXP 15
38413: PPUSH
38414: LD_STRING D3a-Joan-1
38416: PPUSH
38417: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
38421: LD_EXP 1
38425: PPUSH
38426: LD_STRING D3a-JMM-1
38428: PPUSH
38429: CALL_OW 88
// end else
38433: GO 38777
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
38435: LD_STRING 06_JoanStatus_1
38437: PPUSH
38438: LD_INT 0
38440: PPUSH
38441: CALL_OW 30
38445: PUSH
38446: LD_INT 1
38448: EQUAL
38449: IFFALSE 38777
// begin Say ( JMM , D3b-JMM-1 ) ;
38451: LD_EXP 1
38455: PPUSH
38456: LD_STRING D3b-JMM-1
38458: PPUSH
38459: CALL_OW 88
// if gammaCommander = 1 then
38463: LD_EXP 12
38467: PUSH
38468: LD_INT 1
38470: EQUAL
38471: IFFALSE 38528
// if IsOK ( Donaldson ) then
38473: LD_EXP 3
38477: PPUSH
38478: CALL_OW 302
38482: IFFALSE 38498
// Say ( Donaldson , D3b-Don-1 ) else
38484: LD_EXP 3
38488: PPUSH
38489: LD_STRING D3b-Don-1
38491: PPUSH
38492: CALL_OW 88
38496: GO 38528
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38498: LD_EXP 11
38502: PPUSH
38503: LD_INT 26
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PPUSH
38513: CALL_OW 72
38517: PPUSH
38518: LD_STRING D3b-Sol1-1
38520: PPUSH
38521: LD_STRING D3b-Sol1-1
38523: PPUSH
38524: CALL 7125 0 3
// if gammaCommander = 2 then
38528: LD_EXP 12
38532: PUSH
38533: LD_INT 2
38535: EQUAL
38536: IFFALSE 38593
// if IsOk ( Brown ) then
38538: LD_EXP 2
38542: PPUSH
38543: CALL_OW 302
38547: IFFALSE 38563
// Say ( Brown , D3b-Brown-1 ) else
38549: LD_EXP 2
38553: PPUSH
38554: LD_STRING D3b-Brown-1
38556: PPUSH
38557: CALL_OW 88
38561: GO 38593
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38563: LD_EXP 11
38567: PPUSH
38568: LD_INT 26
38570: PUSH
38571: LD_INT 1
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PPUSH
38578: CALL_OW 72
38582: PPUSH
38583: LD_STRING D3b-Sol1-1
38585: PPUSH
38586: LD_STRING D3b-Sol1-1
38588: PPUSH
38589: CALL 7125 0 3
// if gammaCommander = 3 then
38593: LD_EXP 12
38597: PUSH
38598: LD_INT 3
38600: EQUAL
38601: IFFALSE 38658
// if IsOk ( Houten ) then
38603: LD_EXP 13
38607: PPUSH
38608: CALL_OW 302
38612: IFFALSE 38628
// Say ( Houten , D3b-VanH-1 ) else
38614: LD_EXP 13
38618: PPUSH
38619: LD_STRING D3b-VanH-1
38621: PPUSH
38622: CALL_OW 88
38626: GO 38658
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38628: LD_EXP 11
38632: PPUSH
38633: LD_INT 26
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PPUSH
38643: CALL_OW 72
38647: PPUSH
38648: LD_STRING D3b-Sol1-1
38650: PPUSH
38651: LD_STRING D3b-Sol1-1
38653: PPUSH
38654: CALL 7125 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
38658: LD_EXP 11
38662: PPUSH
38663: LD_INT 26
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PPUSH
38673: CALL_OW 72
38677: PUSH
38678: LD_EXP 12
38682: PUSH
38683: LD_INT 1
38685: EQUAL
38686: PUSH
38687: LD_EXP 3
38691: PPUSH
38692: CALL_OW 302
38696: AND
38697: OR
38698: PUSH
38699: LD_EXP 12
38703: PUSH
38704: LD_INT 2
38706: EQUAL
38707: PUSH
38708: LD_EXP 2
38712: PPUSH
38713: CALL_OW 302
38717: AND
38718: OR
38719: PUSH
38720: LD_EXP 12
38724: PUSH
38725: LD_INT 3
38727: EQUAL
38728: PUSH
38729: LD_EXP 13
38733: PPUSH
38734: CALL_OW 302
38738: AND
38739: OR
38740: IFFALSE 38754
// Say ( JMM , D3b-JMM-2 ) ;
38742: LD_EXP 1
38746: PPUSH
38747: LD_STRING D3b-JMM-2
38749: PPUSH
38750: CALL_OW 88
// if IsOK ( Lisa ) then
38754: LD_EXP 6
38758: PPUSH
38759: CALL_OW 302
38763: IFFALSE 38777
// Say ( Lisa , D3b-Lisa-2 ) ;
38765: LD_EXP 6
38769: PPUSH
38770: LD_STRING D3b-Lisa-2
38772: PPUSH
38773: CALL_OW 88
// end ; end ; none := [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] ^ macmilan_squad ;
38777: LD_ADDR_VAR 0 1
38781: PUSH
38782: LD_EXP 1
38786: PUSH
38787: LD_EXP 2
38791: PUSH
38792: LD_EXP 3
38796: PUSH
38797: LD_EXP 4
38801: PUSH
38802: LD_EXP 5
38806: PUSH
38807: LD_EXP 6
38811: PUSH
38812: LD_EXP 7
38816: PUSH
38817: LD_EXP 8
38821: PUSH
38822: LD_EXP 9
38826: PUSH
38827: LD_EXP 10
38831: PUSH
38832: LD_EXP 15
38836: PUSH
38837: LD_EXP 14
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: PUSH
38856: LD_EXP 42
38860: ADD
38861: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCa-Sol1-1 , DCa-Sol1-1 ) ;
38862: LD_INT 22
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 21
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 26
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 2
38894: PUSH
38895: LD_INT 25
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 25
38907: PUSH
38908: LD_INT 2
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 25
38917: PUSH
38918: LD_INT 3
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 25
38927: PUSH
38928: LD_INT 4
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: PPUSH
38948: CALL_OW 69
38952: PUSH
38953: LD_VAR 0 1
38957: DIFF
38958: PPUSH
38959: LD_STRING DCa-Sol1-1
38961: PPUSH
38962: LD_STRING DCa-Sol1-1
38964: PPUSH
38965: CALL 7125 0 3
// Say ( JMM , DCb-JMM-1 ) ;
38969: LD_EXP 1
38973: PPUSH
38974: LD_STRING DCb-JMM-1
38976: PPUSH
38977: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCb-Sol1-1 , DCb-Sol1-1 ) ;
38981: LD_INT 22
38983: PUSH
38984: LD_INT 1
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 21
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 26
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 2
39013: PUSH
39014: LD_INT 25
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 25
39026: PUSH
39027: LD_INT 2
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 25
39036: PUSH
39037: LD_INT 3
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 25
39046: PUSH
39047: LD_INT 4
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: PPUSH
39067: CALL_OW 69
39071: PUSH
39072: LD_VAR 0 1
39076: DIFF
39077: PPUSH
39078: LD_STRING DCb-Sol1-1
39080: PPUSH
39081: LD_STRING DCb-Sol1-1
39083: PPUSH
39084: CALL 7125 0 3
// Say ( JMM , DCb-JMM-2 ) ;
39088: LD_EXP 1
39092: PPUSH
39093: LD_STRING DCb-JMM-2
39095: PPUSH
39096: CALL_OW 88
// secondAttack = 1 ;
39100: LD_ADDR_EXP 34
39104: PUSH
39105: LD_INT 1
39107: ST_TO_ADDR
// end ;
39108: PPOPN 1
39110: END
// every 0 0$01 trigger JMMArrive = 1 do
39111: LD_EXP 39
39115: PUSH
39116: LD_INT 1
39118: EQUAL
39119: IFFALSE 39199
39121: GO 39123
39123: DISABLE
// begin wait ( 3 3$0 ) ;
39124: LD_INT 6300
39126: PPUSH
39127: CALL_OW 67
// DialogueOn ;
39131: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
39135: LD_EXP 23
39139: PPUSH
39140: LD_STRING D4-Pow-1
39142: PPUSH
39143: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
39147: LD_EXP 1
39151: PPUSH
39152: LD_STRING D4-JMM-1
39154: PPUSH
39155: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
39159: LD_EXP 23
39163: PPUSH
39164: LD_STRING D4-Pow-2
39166: PPUSH
39167: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
39171: LD_EXP 1
39175: PPUSH
39176: LD_STRING D4-JMM-2
39178: PPUSH
39179: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
39183: LD_EXP 23
39187: PPUSH
39188: LD_STRING D4-Pow-3
39190: PPUSH
39191: CALL_OW 94
// DialogueOff ;
39195: CALL_OW 7
// end ;
39199: END
// every 0 0$01 trigger JMMArrive = 1 do
39200: LD_EXP 39
39204: PUSH
39205: LD_INT 1
39207: EQUAL
39208: IFFALSE 39240
39210: GO 39212
39212: DISABLE
// begin wait ( 8 8$0 ) ;
39213: LD_INT 16800
39215: PPUSH
39216: CALL_OW 67
// DialogueOn ;
39220: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
39224: LD_EXP 23
39228: PPUSH
39229: LD_STRING D4a-Pow-1
39231: PPUSH
39232: CALL_OW 94
// DialogueOff ;
39236: CALL_OW 7
// end ;
39240: END
// every 0 0$01 trigger JMMArrive = 1 do
39241: LD_EXP 39
39245: PUSH
39246: LD_INT 1
39248: EQUAL
39249: IFFALSE 39294
39251: GO 39253
39253: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
39254: LD_INT 21000
39256: PUSH
39257: LD_INT 25200
39259: PUSH
39260: LD_INT 31500
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: LIST
39267: PUSH
39268: LD_OWVAR 67
39272: ARRAY
39273: PPUSH
39274: CALL_OW 67
// PrepareSikorsky ;
39278: CALL 5598 0 0
// SikorskyArrive = 1 ;
39282: LD_ADDR_EXP 18
39286: PUSH
39287: LD_INT 1
39289: ST_TO_ADDR
// PrepareSikorskyArmy ;
39290: CALL 5771 0 0
// end ;
39294: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
39295: LD_EXP 17
39299: PPUSH
39300: LD_INT 5
39302: PPUSH
39303: CALL_OW 308
39307: IFFALSE 39499
39309: GO 39311
39311: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
39312: LD_EXP 17
39316: PPUSH
39317: CALL_OW 87
// DialogueOn ;
39321: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
39325: LD_EXP 16
39329: PPUSH
39330: LD_STRING D5-Sik-1
39332: PPUSH
39333: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
39337: LD_EXP 1
39341: PPUSH
39342: LD_STRING D5-JMM-1a
39344: PPUSH
39345: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
39349: LD_EXP 16
39353: PPUSH
39354: LD_STRING D5-Sik-2
39356: PPUSH
39357: CALL_OW 88
// case query ( QSikorski ) of 1 :
39361: LD_STRING QSikorski
39363: PPUSH
39364: CALL_OW 97
39368: PUSH
39369: LD_INT 1
39371: DOUBLE
39372: EQUAL
39373: IFTRUE 39377
39375: GO 39400
39377: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
39378: LD_EXP 16
39382: PPUSH
39383: LD_STRING D5a-Sik-1
39385: PPUSH
39386: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
39390: LD_ADDR_EXP 19
39394: PUSH
39395: LD_INT 2100
39397: ST_TO_ADDR
// end ; 2 :
39398: GO 39487
39400: LD_INT 2
39402: DOUBLE
39403: EQUAL
39404: IFTRUE 39408
39406: GO 39431
39408: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
39409: LD_EXP 16
39413: PPUSH
39414: LD_STRING D5b-Sik-1
39416: PPUSH
39417: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39421: LD_ADDR_EXP 19
39425: PUSH
39426: LD_INT 10500
39428: ST_TO_ADDR
// end ; 3 :
39429: GO 39487
39431: LD_INT 3
39433: DOUBLE
39434: EQUAL
39435: IFTRUE 39439
39437: GO 39486
39439: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
39440: LD_EXP 16
39444: PPUSH
39445: LD_STRING D5c-Sik-1
39447: PPUSH
39448: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
39452: LD_EXP 1
39456: PPUSH
39457: LD_STRING D5c-JMM-1
39459: PPUSH
39460: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
39464: LD_EXP 16
39468: PPUSH
39469: LD_STRING D5c-Sik-2
39471: PPUSH
39472: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39476: LD_ADDR_EXP 19
39480: PUSH
39481: LD_INT 10500
39483: ST_TO_ADDR
// end ; end ;
39484: GO 39487
39486: POP
// DialogueOff ;
39487: CALL_OW 7
// timerStatus = 1 ;
39491: LD_ADDR_EXP 35
39495: PUSH
39496: LD_INT 1
39498: ST_TO_ADDR
// end ;
39499: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
39500: LD_EXP 19
39504: PUSH
39505: LD_INT 35
39507: LESS
39508: IFFALSE 39556
39510: GO 39512
39512: DISABLE
// begin timerStatus = 0 ;
39513: LD_ADDR_EXP 35
39517: PUSH
39518: LD_INT 0
39520: ST_TO_ADDR
// DialogueOn ;
39521: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
39525: LD_EXP 16
39529: PPUSH
39530: LD_STRING D6-Sik-1
39532: PPUSH
39533: CALL_OW 88
// DialogueOff ;
39537: CALL_OW 7
// SikorskyAI = 1 ;
39541: LD_ADDR_EXP 20
39545: PUSH
39546: LD_INT 1
39548: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
39549: LD_STRING M2
39551: PPUSH
39552: CALL_OW 337
// end ;
39556: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
39557: LD_EXP 17
39561: PPUSH
39562: LD_INT 18
39564: PPUSH
39565: CALL_OW 308
39569: IFFALSE 39679
39571: GO 39573
39573: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
39574: LD_EXP 16
39578: PPUSH
39579: LD_STRING D7-Sik-1
39581: PPUSH
39582: CALL_OW 88
// wait ( 0 0$10 ) ;
39586: LD_INT 350
39588: PPUSH
39589: CALL_OW 67
// if IsInArea ( JMM , RussianBaseTerritory ) or ( GetDriverVehicle ( JMM ) and IsInArea ( GetDriverVehicle ( JMM ) , RussianBaseTerritory ) ) then
39593: LD_EXP 1
39597: PPUSH
39598: LD_INT 24
39600: PPUSH
39601: CALL_OW 308
39605: PUSH
39606: LD_EXP 1
39610: PPUSH
39611: CALL 37059 0 1
39615: PUSH
39616: LD_EXP 1
39620: PPUSH
39621: CALL 37059 0 1
39625: PPUSH
39626: LD_INT 24
39628: PPUSH
39629: CALL_OW 308
39633: AND
39634: OR
39635: IFFALSE 39659
// begin Say ( Sikorski , D7a-Sik-1 ) ;
39637: LD_EXP 16
39641: PPUSH
39642: LD_STRING D7a-Sik-1
39644: PPUSH
39645: CALL_OW 88
// SikorskyStatus = 1 ;
39649: LD_ADDR_EXP 21
39653: PUSH
39654: LD_INT 1
39656: ST_TO_ADDR
// end else
39657: GO 39679
// begin Say ( Sikorski , D7b-Sik-1 ) ;
39659: LD_EXP 16
39663: PPUSH
39664: LD_STRING D7b-Sik-1
39666: PPUSH
39667: CALL_OW 88
// SikorskyStatus = 2 ;
39671: LD_ADDR_EXP 21
39675: PUSH
39676: LD_INT 2
39678: ST_TO_ADDR
// end ; end ;
39679: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
39680: LD_EXP 36
39684: PUSH
39685: LD_INT 1
39687: EQUAL
39688: IFFALSE 39797
39690: GO 39692
39692: DISABLE
39693: LD_INT 0
39695: PPUSH
// begin enable ;
39696: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
39697: LD_ADDR_VAR 0 1
39701: PUSH
39702: LD_INT 22
39704: PUSH
39705: LD_INT 3
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PPUSH
39712: CALL_OW 69
39716: PUSH
39717: FOR_IN
39718: IFFALSE 39745
// if IsInArea ( i , RussianEscape ) then
39720: LD_VAR 0 1
39724: PPUSH
39725: LD_INT 22
39727: PPUSH
39728: CALL_OW 308
39732: IFFALSE 39743
// RemoveUnit ( i ) ;
39734: LD_VAR 0 1
39738: PPUSH
39739: CALL_OW 64
39743: GO 39717
39745: POP
39746: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
39747: LD_ADDR_VAR 0 1
39751: PUSH
39752: LD_INT 22
39754: PUSH
39755: LD_INT 6
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PPUSH
39762: CALL_OW 69
39766: PUSH
39767: FOR_IN
39768: IFFALSE 39795
// if IsInArea ( i , RussianEscape ) then
39770: LD_VAR 0 1
39774: PPUSH
39775: LD_INT 22
39777: PPUSH
39778: CALL_OW 308
39782: IFFALSE 39793
// RemoveUnit ( i ) ;
39784: LD_VAR 0 1
39788: PPUSH
39789: CALL_OW 64
39793: GO 39767
39795: POP
39796: POP
// end ; end_of_file
39797: PPOPN 1
39799: END
// on BuildingComplete ( building ) do var tmp , un ;
39800: LD_INT 0
39802: PPUSH
39803: PPUSH
// begin if GetSide ( building ) = 3 then
39804: LD_VAR 0 1
39808: PPUSH
39809: CALL_OW 255
39813: PUSH
39814: LD_INT 3
39816: EQUAL
39817: IFFALSE 40354
// begin if GetBType ( building ) = b_depot then
39819: LD_VAR 0 1
39823: PPUSH
39824: CALL_OW 266
39828: PUSH
39829: LD_INT 0
39831: EQUAL
39832: IFFALSE 39900
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
39834: LD_VAR 0 1
39838: PPUSH
39839: CALL_OW 274
39843: PPUSH
39844: LD_INT 1
39846: PPUSH
39847: LD_INT 5000
39849: PPUSH
39850: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
39854: LD_VAR 0 1
39858: PPUSH
39859: CALL_OW 274
39863: PPUSH
39864: LD_INT 2
39866: PPUSH
39867: LD_INT 5000
39869: PPUSH
39870: CALL_OW 277
// SetBName ( building , konev ) ;
39874: LD_VAR 0 1
39878: PPUSH
39879: LD_STRING konev
39881: PPUSH
39882: CALL_OW 500
// ruDepot = building ;
39886: LD_ADDR_EXP 28
39890: PUSH
39891: LD_VAR 0 1
39895: ST_TO_ADDR
// BuildRussianBase ;
39896: CALL 7736 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
39900: LD_VAR 0 1
39904: PPUSH
39905: CALL_OW 266
39909: PUSH
39910: LD_INT 0
39912: EQUAL
39913: PUSH
39914: LD_VAR 0 1
39918: PPUSH
39919: CALL_OW 266
39923: PUSH
39924: LD_INT 2
39926: EQUAL
39927: OR
39928: PUSH
39929: LD_VAR 0 1
39933: PPUSH
39934: CALL_OW 266
39938: PUSH
39939: LD_INT 4
39941: EQUAL
39942: OR
39943: IFFALSE 39954
// ComUpgrade ( building ) ;
39945: LD_VAR 0 1
39949: PPUSH
39950: CALL_OW 146
// if GetBType ( building ) = b_lab then
39954: LD_VAR 0 1
39958: PPUSH
39959: CALL_OW 266
39963: PUSH
39964: LD_INT 6
39966: EQUAL
39967: IFFALSE 40018
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
39969: LD_VAR 0 1
39973: PPUSH
39974: LD_INT 10
39976: PPUSH
39977: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
39981: LD_VAR 0 1
39985: PPUSH
39986: LD_INT 12
39988: PPUSH
39989: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
39993: LD_INT 3
39995: PPUSH
39996: LD_VAR 0 1
40000: PPUSH
40001: LD_INT 3
40003: PPUSH
40004: CALL 8280 0 3
// ruLab = building ;
40008: LD_ADDR_EXP 29
40012: PUSH
40013: LD_VAR 0 1
40017: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
40018: LD_VAR 0 1
40022: PPUSH
40023: CALL_OW 266
40027: PUSH
40028: LD_INT 32
40030: EQUAL
40031: IFFALSE 40149
// begin uc_side = 3 ;
40033: LD_ADDR_OWVAR 20
40037: PUSH
40038: LD_INT 3
40040: ST_TO_ADDR
// uc_nation = 3 ;
40041: LD_ADDR_OWVAR 21
40045: PUSH
40046: LD_INT 3
40048: ST_TO_ADDR
// hc_gallery =  ;
40049: LD_ADDR_OWVAR 33
40053: PUSH
40054: LD_STRING 
40056: ST_TO_ADDR
// hc_name =  ;
40057: LD_ADDR_OWVAR 26
40061: PUSH
40062: LD_STRING 
40064: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
40065: LD_INT 0
40067: PPUSH
40068: LD_INT 1
40070: PPUSH
40071: LD_EXP 25
40075: PPUSH
40076: LD_EXP 26
40080: PPUSH
40081: CALL_OW 12
40085: PPUSH
40086: CALL_OW 380
// un = CreateHuman ;
40090: LD_ADDR_VAR 0 3
40094: PUSH
40095: CALL_OW 44
40099: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
40100: LD_VAR 0 3
40104: PPUSH
40105: LD_VAR 0 1
40109: PPUSH
40110: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40114: LD_VAR 0 1
40118: PPUSH
40119: LD_INT 43
40121: PUSH
40122: LD_INT 44
40124: PUSH
40125: LD_INT 46
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: PPUSH
40136: LD_INT 3
40138: PPUSH
40139: CALL_OW 12
40143: ARRAY
40144: PPUSH
40145: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
40149: LD_VAR 0 1
40153: PPUSH
40154: CALL_OW 266
40158: PUSH
40159: LD_INT 33
40161: EQUAL
40162: IFFALSE 40199
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40164: LD_VAR 0 1
40168: PPUSH
40169: LD_INT 43
40171: PUSH
40172: LD_INT 44
40174: PUSH
40175: LD_INT 46
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 1
40185: PPUSH
40186: LD_INT 3
40188: PPUSH
40189: CALL_OW 12
40193: ARRAY
40194: PPUSH
40195: CALL_OW 208
// if GetBType ( building ) = b_bunker then
40199: LD_VAR 0 1
40203: PPUSH
40204: CALL_OW 266
40208: PUSH
40209: LD_INT 32
40211: EQUAL
40212: IFFALSE 40249
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40214: LD_VAR 0 1
40218: PPUSH
40219: LD_INT 43
40221: PUSH
40222: LD_INT 44
40224: PUSH
40225: LD_INT 46
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 1
40235: PPUSH
40236: LD_INT 3
40238: PPUSH
40239: CALL_OW 12
40243: ARRAY
40244: PPUSH
40245: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
40249: LD_VAR 0 1
40253: PPUSH
40254: CALL_OW 266
40258: PUSH
40259: LD_INT 24
40261: EQUAL
40262: IFFALSE 40272
// russianAI = 1 ;
40264: LD_ADDR_EXP 27
40268: PUSH
40269: LD_INT 1
40271: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
40272: LD_EXP 31
40276: PUSH
40277: LD_INT 0
40279: GREATER
40280: IFFALSE 40354
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40282: LD_ADDR_EXP 31
40286: PUSH
40287: LD_EXP 31
40291: PPUSH
40292: LD_INT 1
40294: PPUSH
40295: CALL_OW 3
40299: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40300: LD_ADDR_EXP 31
40304: PUSH
40305: LD_EXP 31
40309: PPUSH
40310: LD_INT 1
40312: PPUSH
40313: CALL_OW 3
40317: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40318: LD_ADDR_EXP 31
40322: PUSH
40323: LD_EXP 31
40327: PPUSH
40328: LD_INT 1
40330: PPUSH
40331: CALL_OW 3
40335: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40336: LD_ADDR_EXP 31
40340: PUSH
40341: LD_EXP 31
40345: PPUSH
40346: LD_INT 1
40348: PPUSH
40349: CALL_OW 3
40353: ST_TO_ADDR
// end ; end ; end ;
40354: PPOPN 3
40356: END
// on UpgradeComplete ( building ) do var i ;
40357: LD_INT 0
40359: PPUSH
// begin if GetSide ( building ) = 3 then
40360: LD_VAR 0 1
40364: PPUSH
40365: CALL_OW 255
40369: PUSH
40370: LD_INT 3
40372: EQUAL
40373: IFFALSE 40554
// begin if GetBType ( building ) = b_factory then
40375: LD_VAR 0 1
40379: PPUSH
40380: CALL_OW 266
40384: PUSH
40385: LD_INT 3
40387: EQUAL
40388: IFFALSE 40455
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
40390: LD_ADDR_VAR 0 2
40394: PUSH
40395: LD_INT 22
40397: PUSH
40398: LD_INT 3
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 25
40407: PUSH
40408: LD_INT 3
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PPUSH
40419: CALL_OW 69
40423: PUSH
40424: FOR_IN
40425: IFFALSE 40443
// ComEnterUnit ( i , building ) ;
40427: LD_VAR 0 2
40431: PPUSH
40432: LD_VAR 0 1
40436: PPUSH
40437: CALL_OW 120
40441: GO 40424
40443: POP
40444: POP
// ruFab = building ;
40445: LD_ADDR_EXP 30
40449: PUSH
40450: LD_VAR 0 1
40454: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
40455: LD_VAR 0 1
40459: PPUSH
40460: CALL_OW 266
40464: PUSH
40465: LD_INT 8
40467: EQUAL
40468: IFFALSE 40525
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
40470: LD_ADDR_VAR 0 2
40474: PUSH
40475: LD_INT 22
40477: PUSH
40478: LD_INT 3
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 25
40487: PUSH
40488: LD_INT 4
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PPUSH
40499: CALL_OW 69
40503: PUSH
40504: FOR_IN
40505: IFFALSE 40523
// ComEnterUnit ( i , building ) ;
40507: LD_VAR 0 2
40511: PPUSH
40512: LD_VAR 0 1
40516: PPUSH
40517: CALL_OW 120
40521: GO 40504
40523: POP
40524: POP
// if GetBType ( building ) = b_warehouse then
40525: LD_VAR 0 1
40529: PPUSH
40530: CALL_OW 266
40534: PUSH
40535: LD_INT 1
40537: EQUAL
40538: IFFALSE 40554
// begin ComEnterUnit ( Borodin , building ) ;
40540: LD_EXP 24
40544: PPUSH
40545: LD_VAR 0 1
40549: PPUSH
40550: CALL_OW 120
// end ; end ; end ;
40554: PPOPN 2
40556: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
40557: LD_VAR 0 1
40561: PPUSH
40562: CALL_OW 247
40566: PUSH
40567: LD_INT 2
40569: EQUAL
40570: PUSH
40571: LD_VAR 0 1
40575: PPUSH
40576: CALL_OW 263
40580: PUSH
40581: LD_INT 3
40583: EQUAL
40584: AND
40585: PUSH
40586: LD_EXP 41
40590: PUSH
40591: LD_INT 0
40593: EQUAL
40594: AND
40595: IFFALSE 40713
// begin varEvent1 = 1 ;
40597: LD_ADDR_EXP 41
40601: PUSH
40602: LD_INT 1
40604: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
40605: LD_VAR 0 1
40609: PPUSH
40610: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
40614: LD_INT 22
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 21
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 2
40636: PUSH
40637: LD_INT 25
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 25
40649: PUSH
40650: LD_INT 2
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 25
40659: PUSH
40660: LD_INT 3
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 25
40669: PUSH
40670: LD_INT 4
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: LIST
40688: PPUSH
40689: CALL_OW 69
40693: PUSH
40694: LD_EXP 1
40698: PUSH
40699: EMPTY
40700: LIST
40701: DIFF
40702: PPUSH
40703: LD_STRING DC-Sol1-1
40705: PPUSH
40706: LD_STRING DC-FSol1-1
40708: PPUSH
40709: CALL 7125 0 3
// end ; end ;
40713: PPOPN 1
40715: END
// on UnitDestroyed ( unit ) do var i ;
40716: LD_INT 0
40718: PPUSH
// begin if unit = Joan then
40719: LD_VAR 0 1
40723: PUSH
40724: LD_EXP 15
40728: EQUAL
40729: IFFALSE 40738
// DeleteCharacters ( Joan ) ;
40731: LD_STRING Joan
40733: PPUSH
40734: CALL_OW 40
// if GetSide ( unit ) = 3 then
40738: LD_VAR 0 1
40742: PPUSH
40743: CALL_OW 255
40747: PUSH
40748: LD_INT 3
40750: EQUAL
40751: IFFALSE 41521
// begin if GetType ( unit ) = unit_building then
40753: LD_VAR 0 1
40757: PPUSH
40758: CALL_OW 247
40762: PUSH
40763: LD_INT 3
40765: EQUAL
40766: IFFALSE 41458
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
40768: LD_VAR 0 1
40772: PPUSH
40773: CALL_OW 266
40777: PUSH
40778: LD_INT 31
40780: EQUAL
40781: PUSH
40782: LD_VAR 0 1
40786: PPUSH
40787: CALL_OW 266
40791: PUSH
40792: LD_INT 32
40794: EQUAL
40795: OR
40796: PUSH
40797: LD_VAR 0 1
40801: PPUSH
40802: CALL_OW 266
40806: PUSH
40807: LD_INT 36
40809: EQUAL
40810: OR
40811: PUSH
40812: LD_VAR 0 1
40816: PPUSH
40817: CALL_OW 266
40821: PUSH
40822: LD_INT 0
40824: EQUAL
40825: OR
40826: PUSH
40827: LD_VAR 0 1
40831: PPUSH
40832: CALL_OW 266
40836: PUSH
40837: LD_INT 24
40839: EQUAL
40840: OR
40841: PUSH
40842: LD_VAR 0 1
40846: PPUSH
40847: CALL_OW 266
40851: PUSH
40852: LD_INT 17
40854: EQUAL
40855: OR
40856: PUSH
40857: LD_VAR 0 1
40861: PPUSH
40862: CALL_OW 266
40866: PUSH
40867: LD_INT 25
40869: EQUAL
40870: OR
40871: PUSH
40872: LD_VAR 0 1
40876: PPUSH
40877: CALL_OW 266
40881: PUSH
40882: LD_INT 19
40884: EQUAL
40885: OR
40886: PUSH
40887: LD_VAR 0 1
40891: PPUSH
40892: CALL_OW 266
40896: PUSH
40897: LD_INT 20
40899: EQUAL
40900: OR
40901: PUSH
40902: LD_VAR 0 1
40906: PPUSH
40907: CALL_OW 266
40911: PUSH
40912: LD_INT 18
40914: EQUAL
40915: OR
40916: PUSH
40917: LD_VAR 0 1
40921: PPUSH
40922: CALL_OW 266
40926: PUSH
40927: LD_INT 21
40929: EQUAL
40930: OR
40931: PUSH
40932: LD_VAR 0 1
40936: PPUSH
40937: CALL_OW 266
40941: PUSH
40942: LD_INT 23
40944: EQUAL
40945: OR
40946: PUSH
40947: LD_VAR 0 1
40951: PPUSH
40952: CALL_OW 266
40956: PUSH
40957: LD_INT 16
40959: EQUAL
40960: OR
40961: PUSH
40962: LD_VAR 0 1
40966: PPUSH
40967: CALL_OW 266
40971: PUSH
40972: LD_INT 6
40974: EQUAL
40975: OR
40976: PUSH
40977: LD_VAR 0 1
40981: PPUSH
40982: CALL_OW 266
40986: PUSH
40987: LD_INT 29
40989: EQUAL
40990: OR
40991: PUSH
40992: LD_VAR 0 1
40996: PPUSH
40997: CALL_OW 266
41001: PUSH
41002: LD_INT 26
41004: EQUAL
41005: OR
41006: PUSH
41007: LD_VAR 0 1
41011: PPUSH
41012: CALL_OW 266
41016: PUSH
41017: LD_INT 30
41019: EQUAL
41020: OR
41021: PUSH
41022: LD_VAR 0 1
41026: PPUSH
41027: CALL_OW 266
41031: PUSH
41032: LD_INT 28
41034: EQUAL
41035: OR
41036: PUSH
41037: LD_VAR 0 1
41041: PPUSH
41042: CALL_OW 266
41046: PUSH
41047: LD_INT 27
41049: EQUAL
41050: OR
41051: PUSH
41052: LD_VAR 0 1
41056: PPUSH
41057: CALL_OW 266
41061: PUSH
41062: LD_INT 33
41064: EQUAL
41065: OR
41066: PUSH
41067: LD_VAR 0 1
41071: PPUSH
41072: CALL_OW 266
41076: PUSH
41077: LD_INT 2
41079: EQUAL
41080: OR
41081: PUSH
41082: LD_VAR 0 1
41086: PPUSH
41087: CALL_OW 266
41091: PUSH
41092: LD_INT 4
41094: EQUAL
41095: OR
41096: IFFALSE 41182
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
41098: LD_ADDR_EXP 31
41102: PUSH
41103: LD_EXP 31
41107: PUSH
41108: LD_VAR 0 1
41112: PPUSH
41113: CALL_OW 266
41117: ADD
41118: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41119: LD_ADDR_EXP 31
41123: PUSH
41124: LD_EXP 31
41128: PUSH
41129: LD_VAR 0 1
41133: PPUSH
41134: CALL_OW 250
41138: ADD
41139: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41140: LD_ADDR_EXP 31
41144: PUSH
41145: LD_EXP 31
41149: PUSH
41150: LD_VAR 0 1
41154: PPUSH
41155: CALL_OW 251
41159: ADD
41160: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41161: LD_ADDR_EXP 31
41165: PUSH
41166: LD_EXP 31
41170: PUSH
41171: LD_VAR 0 1
41175: PPUSH
41176: CALL_OW 254
41180: ADD
41181: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
41182: LD_VAR 0 1
41186: PPUSH
41187: CALL_OW 266
41191: PUSH
41192: LD_INT 1
41194: EQUAL
41195: IFFALSE 41274
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
41197: LD_ADDR_EXP 31
41201: PUSH
41202: LD_EXP 31
41206: PUSH
41207: LD_INT 0
41209: ADD
41210: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41211: LD_ADDR_EXP 31
41215: PUSH
41216: LD_EXP 31
41220: PUSH
41221: LD_VAR 0 1
41225: PPUSH
41226: CALL_OW 250
41230: ADD
41231: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41232: LD_ADDR_EXP 31
41236: PUSH
41237: LD_EXP 31
41241: PUSH
41242: LD_VAR 0 1
41246: PPUSH
41247: CALL_OW 251
41251: ADD
41252: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41253: LD_ADDR_EXP 31
41257: PUSH
41258: LD_EXP 31
41262: PUSH
41263: LD_VAR 0 1
41267: PPUSH
41268: CALL_OW 254
41272: ADD
41273: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
41274: LD_VAR 0 1
41278: PPUSH
41279: CALL_OW 266
41283: PUSH
41284: LD_INT 3
41286: EQUAL
41287: IFFALSE 41366
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
41289: LD_ADDR_EXP 31
41293: PUSH
41294: LD_EXP 31
41298: PUSH
41299: LD_INT 2
41301: ADD
41302: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41303: LD_ADDR_EXP 31
41307: PUSH
41308: LD_EXP 31
41312: PUSH
41313: LD_VAR 0 1
41317: PPUSH
41318: CALL_OW 250
41322: ADD
41323: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41324: LD_ADDR_EXP 31
41328: PUSH
41329: LD_EXP 31
41333: PUSH
41334: LD_VAR 0 1
41338: PPUSH
41339: CALL_OW 251
41343: ADD
41344: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41345: LD_ADDR_EXP 31
41349: PUSH
41350: LD_EXP 31
41354: PUSH
41355: LD_VAR 0 1
41359: PPUSH
41360: CALL_OW 254
41364: ADD
41365: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
41366: LD_VAR 0 1
41370: PPUSH
41371: CALL_OW 266
41375: PUSH
41376: LD_INT 5
41378: EQUAL
41379: IFFALSE 41458
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
41381: LD_ADDR_EXP 31
41385: PUSH
41386: LD_EXP 31
41390: PUSH
41391: LD_INT 4
41393: ADD
41394: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41395: LD_ADDR_EXP 31
41399: PUSH
41400: LD_EXP 31
41404: PUSH
41405: LD_VAR 0 1
41409: PPUSH
41410: CALL_OW 250
41414: ADD
41415: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41416: LD_ADDR_EXP 31
41420: PUSH
41421: LD_EXP 31
41425: PUSH
41426: LD_VAR 0 1
41430: PPUSH
41431: CALL_OW 251
41435: ADD
41436: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41437: LD_ADDR_EXP 31
41441: PUSH
41442: LD_EXP 31
41446: PUSH
41447: LD_VAR 0 1
41451: PPUSH
41452: CALL_OW 254
41456: ADD
41457: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
41458: LD_VAR 0 1
41462: PPUSH
41463: CALL_OW 247
41467: PUSH
41468: LD_INT 1
41470: EQUAL
41471: IFFALSE 41521
// begin for i in defenders_list do
41473: LD_ADDR_VAR 0 2
41477: PUSH
41478: LD_EXP 32
41482: PUSH
41483: FOR_IN
41484: IFFALSE 41519
// if i = unit then
41486: LD_VAR 0 2
41490: PUSH
41491: LD_VAR 0 1
41495: EQUAL
41496: IFFALSE 41517
// defenders_list = defenders_list diff [ unit ] ;
41498: LD_ADDR_EXP 32
41502: PUSH
41503: LD_EXP 32
41507: PUSH
41508: LD_VAR 0 1
41512: PUSH
41513: EMPTY
41514: LIST
41515: DIFF
41516: ST_TO_ADDR
41517: GO 41483
41519: POP
41520: POP
// end ; end ; end ; end_of_file
41521: PPOPN 2
41523: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
41524: GO 41526
41526: DISABLE
41527: LD_INT 0
41529: PPUSH
// begin enemyWayX = [ ] ;
41530: LD_ADDR_EXP 46
41534: PUSH
41535: EMPTY
41536: ST_TO_ADDR
// enemyWayY = [ ] ;
41537: LD_ADDR_EXP 47
41541: PUSH
41542: EMPTY
41543: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
41544: LD_ADDR_VAR 0 1
41548: PUSH
41549: LD_INT 1
41551: PPUSH
41552: LD_INT 3
41554: PPUSH
41555: CALL_OW 12
41559: ST_TO_ADDR
// if rnd = 1 then
41560: LD_VAR 0 1
41564: PUSH
41565: LD_INT 1
41567: EQUAL
41568: IFFALSE 41608
// begin enemyWayX = [ 73 , 46 , 29 ] ;
41570: LD_ADDR_EXP 46
41574: PUSH
41575: LD_INT 73
41577: PUSH
41578: LD_INT 46
41580: PUSH
41581: LD_INT 29
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: LIST
41588: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
41589: LD_ADDR_EXP 47
41593: PUSH
41594: LD_INT 71
41596: PUSH
41597: LD_INT 43
41599: PUSH
41600: LD_INT 29
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: LIST
41607: ST_TO_ADDR
// end ; if rnd = 2 then
41608: LD_VAR 0 1
41612: PUSH
41613: LD_INT 2
41615: EQUAL
41616: IFFALSE 41640
// begin enemyWayX = [ 64 ] ;
41618: LD_ADDR_EXP 46
41622: PUSH
41623: LD_INT 64
41625: PUSH
41626: EMPTY
41627: LIST
41628: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
41629: LD_ADDR_EXP 47
41633: PUSH
41634: LD_INT 43
41636: PUSH
41637: EMPTY
41638: LIST
41639: ST_TO_ADDR
// end ; if rnd = 3 then
41640: LD_VAR 0 1
41644: PUSH
41645: LD_INT 3
41647: EQUAL
41648: IFFALSE 41672
// begin enemyWayX = [ 80 ] ;
41650: LD_ADDR_EXP 46
41654: PUSH
41655: LD_INT 80
41657: PUSH
41658: EMPTY
41659: LIST
41660: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
41661: LD_ADDR_EXP 47
41665: PUSH
41666: LD_INT 28
41668: PUSH
41669: EMPTY
41670: LIST
41671: ST_TO_ADDR
// end ; enable ;
41672: ENABLE
// end ;
41673: PPOPN 1
41675: END
// every 0 0$1 do
41676: GO 41678
41678: DISABLE
// begin enable ;
41679: ENABLE
// if escapeAvalaible = 0 then
41680: LD_EXP 36
41684: PUSH
41685: LD_INT 0
41687: EQUAL
41688: IFFALSE 41700
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
41690: LD_INT 3
41692: PPUSH
41693: LD_INT 6
41695: PPUSH
41696: CALL 8521 0 2
// if escapeAvalaible = 0 then
41700: LD_EXP 36
41704: PUSH
41705: LD_INT 0
41707: EQUAL
41708: IFFALSE 41720
// DefenseBase ( 1 , RussianBaseTerritory ) ;
41710: LD_INT 1
41712: PPUSH
41713: LD_INT 24
41715: PPUSH
41716: CALL 9181 0 2
// if russianAI = 1 then
41720: LD_EXP 27
41724: PUSH
41725: LD_INT 1
41727: EQUAL
41728: IFFALSE 41798
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
41730: LD_INT 3
41732: PPUSH
41733: LD_INT 7
41735: PPUSH
41736: LD_INT 6
41738: PPUSH
41739: LD_EXP 29
41743: PPUSH
41744: CALL 11619 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
41748: LD_INT 3
41750: PPUSH
41751: LD_EXP 28
41755: PPUSH
41756: LD_INT 6
41758: PPUSH
41759: LD_EXP 31
41763: PPUSH
41764: CALL 11213 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
41768: LD_INT 3
41770: PPUSH
41771: LD_INT 26
41773: PPUSH
41774: LD_EXP 46
41778: PPUSH
41779: LD_EXP 47
41783: PPUSH
41784: CALL 10081 0 4
// AttackNearBuildings ( 3 , 1 ) ;
41788: LD_INT 3
41790: PPUSH
41791: LD_INT 1
41793: PPUSH
41794: CALL 12163 0 2
// end ; if SikorskyArrive = 1 then
41798: LD_EXP 18
41802: PUSH
41803: LD_INT 1
41805: EQUAL
41806: IFFALSE 41824
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
41808: LD_INT 3
41810: PPUSH
41811: LD_INT 10
41813: PPUSH
41814: LD_INT 53
41816: PPUSH
41817: LD_INT 59
41819: PPUSH
41820: CALL 9878 0 4
// end ;
41824: END
// every 0 0$1 trigger russianAI = 1 do var i ;
41825: LD_EXP 27
41829: PUSH
41830: LD_INT 1
41832: EQUAL
41833: IFFALSE 42109
41835: GO 41837
41837: DISABLE
41838: LD_INT 0
41840: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41841: LD_ADDR_VAR 0 1
41845: PUSH
41846: LD_INT 22
41848: PUSH
41849: LD_INT 3
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 21
41858: PUSH
41859: LD_INT 3
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 30
41868: PUSH
41869: LD_INT 32
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 3
41878: PUSH
41879: LD_INT 2
41881: PUSH
41882: LD_INT 35
41884: PUSH
41885: LD_INT 43
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 35
41894: PUSH
41895: LD_INT 44
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 35
41904: PUSH
41905: LD_INT 46
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: PPUSH
41928: CALL_OW 69
41932: PUSH
41933: FOR_IN
41934: IFFALSE 41973
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41936: LD_VAR 0 1
41940: PPUSH
41941: LD_INT 43
41943: PUSH
41944: LD_INT 44
41946: PUSH
41947: LD_INT 46
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 1
41957: PPUSH
41958: LD_INT 3
41960: PPUSH
41961: CALL_OW 12
41965: ARRAY
41966: PPUSH
41967: CALL_OW 431
41971: GO 41933
41973: POP
41974: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41975: LD_ADDR_VAR 0 1
41979: PUSH
41980: LD_INT 22
41982: PUSH
41983: LD_INT 3
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 21
41992: PUSH
41993: LD_INT 3
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 30
42002: PUSH
42003: LD_INT 33
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 3
42012: PUSH
42013: LD_INT 2
42015: PUSH
42016: LD_INT 35
42018: PUSH
42019: LD_INT 43
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 35
42028: PUSH
42029: LD_INT 44
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 35
42038: PUSH
42039: LD_INT 46
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: PPUSH
42062: CALL_OW 69
42066: PUSH
42067: FOR_IN
42068: IFFALSE 42107
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
42070: LD_VAR 0 1
42074: PPUSH
42075: LD_INT 43
42077: PUSH
42078: LD_INT 44
42080: PUSH
42081: LD_INT 46
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: PPUSH
42092: LD_INT 3
42094: PPUSH
42095: CALL_OW 12
42099: ARRAY
42100: PPUSH
42101: CALL_OW 431
42105: GO 42067
42107: POP
42108: POP
// end ;
42109: PPOPN 1
42111: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
42112: LD_EXP 24
42116: PPUSH
42117: CALL_OW 310
42121: NOT
42122: PUSH
42123: LD_EXP 28
42127: PPUSH
42128: CALL_OW 302
42132: AND
42133: PUSH
42134: LD_EXP 28
42138: PPUSH
42139: CALL_OW 255
42143: PUSH
42144: LD_INT 3
42146: EQUAL
42147: AND
42148: IFFALSE 42168
42150: GO 42152
42152: DISABLE
// begin enable ;
42153: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
42154: LD_EXP 24
42158: PPUSH
42159: LD_EXP 28
42163: PPUSH
42164: CALL_OW 120
// end ;
42168: END
// every 0 0$1 trigger SikorskyAI = 1 do
42169: LD_EXP 20
42173: PUSH
42174: LD_INT 1
42176: EQUAL
42177: IFFALSE 42212
42179: GO 42181
42181: DISABLE
// begin enable ;
42182: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
42183: LD_INT 4
42185: PPUSH
42186: LD_INT 10
42188: PPUSH
42189: LD_INT 93
42191: PPUSH
42192: LD_INT 93
42194: PPUSH
42195: CALL 9878 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
42199: LD_INT 4
42201: PPUSH
42202: LD_INT 11
42204: PPUSH
42205: LD_INT 3
42207: PPUSH
42208: CALL 16375 0 3
// end ;
42212: END
// every 0 0$1 trigger SikorskyAI = 1 do
42213: LD_EXP 20
42217: PUSH
42218: LD_INT 1
42220: EQUAL
42221: IFFALSE 42233
42223: GO 42225
42225: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
42226: LD_INT 4
42228: PPUSH
42229: CALL 10885 0 1
42233: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
42234: LD_EXP 27
42238: PUSH
42239: LD_INT 1
42241: EQUAL
42242: PUSH
42243: LD_EXP 30
42247: PPUSH
42248: CALL_OW 302
42252: AND
42253: PUSH
42254: LD_EXP 30
42258: PPUSH
42259: CALL_OW 255
42263: PUSH
42264: LD_INT 3
42266: EQUAL
42267: AND
42268: PUSH
42269: LD_INT 22
42271: PUSH
42272: LD_INT 3
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 21
42281: PUSH
42282: LD_INT 2
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 33
42291: PUSH
42292: LD_INT 3
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: LIST
42303: PPUSH
42304: CALL_OW 69
42308: PUSH
42309: LD_INT 0
42311: EQUAL
42312: AND
42313: IFFALSE 42547
42315: GO 42317
42317: DISABLE
// begin enable ;
42318: ENABLE
// if Difficulty = 1 then
42319: LD_OWVAR 67
42323: PUSH
42324: LD_INT 1
42326: EQUAL
42327: IFFALSE 42395
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
42329: LD_INT 3
42331: PPUSH
42332: LD_EXP 30
42336: PPUSH
42337: LD_INT 5
42339: PPUSH
42340: LD_INT 8
42342: PPUSH
42343: CALL_OW 12
42347: PPUSH
42348: LD_INT 43
42350: PUSH
42351: LD_INT 43
42353: PUSH
42354: LD_INT 43
42356: PUSH
42357: LD_INT 43
42359: PUSH
42360: LD_INT 44
42362: PUSH
42363: LD_INT 44
42365: PUSH
42366: LD_INT 44
42368: PUSH
42369: LD_INT 46
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: PPUSH
42382: LD_INT 1
42384: PPUSH
42385: LD_INT 3
42387: PPUSH
42388: LD_INT 24
42390: PPUSH
42391: CALL 9724 0 7
// if Difficulty = 2 then
42395: LD_OWVAR 67
42399: PUSH
42400: LD_INT 2
42402: EQUAL
42403: IFFALSE 42471
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
42405: LD_INT 3
42407: PPUSH
42408: LD_EXP 30
42412: PPUSH
42413: LD_INT 6
42415: PPUSH
42416: LD_INT 8
42418: PPUSH
42419: CALL_OW 12
42423: PPUSH
42424: LD_INT 43
42426: PUSH
42427: LD_INT 43
42429: PUSH
42430: LD_INT 44
42432: PUSH
42433: LD_INT 44
42435: PUSH
42436: LD_INT 44
42438: PUSH
42439: LD_INT 44
42441: PUSH
42442: LD_INT 46
42444: PUSH
42445: LD_INT 46
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: PPUSH
42458: LD_INT 1
42460: PPUSH
42461: LD_INT 3
42463: PPUSH
42464: LD_INT 24
42466: PPUSH
42467: CALL 9724 0 7
// if Difficulty = 3 then
42471: LD_OWVAR 67
42475: PUSH
42476: LD_INT 3
42478: EQUAL
42479: IFFALSE 42547
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
42481: LD_INT 3
42483: PPUSH
42484: LD_EXP 30
42488: PPUSH
42489: LD_INT 7
42491: PPUSH
42492: LD_INT 8
42494: PPUSH
42495: CALL_OW 12
42499: PPUSH
42500: LD_INT 43
42502: PUSH
42503: LD_INT 43
42505: PUSH
42506: LD_INT 44
42508: PUSH
42509: LD_INT 44
42511: PUSH
42512: LD_INT 44
42514: PUSH
42515: LD_INT 46
42517: PUSH
42518: LD_INT 46
42520: PUSH
42521: LD_INT 46
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: PPUSH
42534: LD_INT 1
42536: PPUSH
42537: LD_INT 3
42539: PPUSH
42540: LD_INT 24
42542: PPUSH
42543: CALL 9724 0 7
// end ;
42547: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
42548: LD_EXP 38
42552: PUSH
42553: LD_INT 1
42555: EQUAL
42556: IFFALSE 42638
42558: GO 42560
42560: DISABLE
42561: LD_INT 0
42563: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
42564: LD_ADDR_VAR 0 1
42568: PUSH
42569: LD_INT 22
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 21
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 3
42591: PUSH
42592: LD_INT 24
42594: PUSH
42595: LD_INT 650
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: LIST
42610: PPUSH
42611: CALL_OW 69
42615: PUSH
42616: FOR_IN
42617: IFFALSE 42636
// ComMoveXY ( i , 51 , 12 ) ;
42619: LD_VAR 0 1
42623: PPUSH
42624: LD_INT 51
42626: PPUSH
42627: LD_INT 12
42629: PPUSH
42630: CALL_OW 111
42634: GO 42616
42636: POP
42637: POP
// end ; end_of_file
42638: PPOPN 1
42640: END
// every 1 1$20 trigger firstAttack = 1 do
42641: LD_EXP 33
42645: PUSH
42646: LD_INT 1
42648: EQUAL
42649: IFFALSE 42755
42651: GO 42653
42653: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42654: LD_INT 6
42656: PPUSH
42657: LD_INT 3
42659: PPUSH
42660: LD_INT 5
42662: PPUSH
42663: LD_INT 6
42665: PPUSH
42666: CALL_OW 12
42670: PUSH
42671: LD_INT 5
42673: PPUSH
42674: LD_INT 6
42676: PPUSH
42677: CALL_OW 12
42681: PUSH
42682: LD_INT 5
42684: PPUSH
42685: LD_INT 6
42687: PPUSH
42688: CALL_OW 12
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: LIST
42697: PUSH
42698: LD_OWVAR 67
42702: ARRAY
42703: PPUSH
42704: LD_INT 0
42706: PPUSH
42707: LD_INT 0
42709: PPUSH
42710: LD_INT 0
42712: PPUSH
42713: LD_INT 0
42715: PPUSH
42716: LD_EXP 25
42720: PPUSH
42721: LD_EXP 26
42725: PPUSH
42726: CALL_OW 12
42730: PPUSH
42731: LD_INT 16
42733: PPUSH
42734: LD_INT 7
42736: PPUSH
42737: LD_INT 1
42739: PPUSH
42740: LD_INT 1
42742: PPUSH
42743: LD_INT 3
42745: PPUSH
42746: CALL_OW 12
42750: PPUSH
42751: CALL 12393 0 12
42755: END
// every 1 1$40 trigger firstAttack = 1 do
42756: LD_EXP 33
42760: PUSH
42761: LD_INT 1
42763: EQUAL
42764: IFFALSE 42856
42766: GO 42768
42768: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42769: LD_INT 16
42771: PPUSH
42772: LD_INT 6
42774: PPUSH
42775: LD_INT 3
42777: PPUSH
42778: LD_INT 4
42780: PPUSH
42781: CALL_OW 12
42785: PUSH
42786: LD_INT 4
42788: PPUSH
42789: LD_INT 5
42791: PPUSH
42792: CALL_OW 12
42796: PUSH
42797: LD_INT 5
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: LIST
42804: PUSH
42805: LD_OWVAR 67
42809: ARRAY
42810: PPUSH
42811: LD_EXP 25
42815: PPUSH
42816: LD_EXP 26
42820: PPUSH
42821: CALL_OW 12
42825: PPUSH
42826: LD_INT 3
42828: PPUSH
42829: LD_INT 1
42831: PPUSH
42832: LD_INT 3
42834: PPUSH
42835: LD_INT 44
42837: PUSH
42838: LD_INT 46
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PPUSH
42845: EMPTY
42846: PPUSH
42847: EMPTY
42848: PPUSH
42849: LD_INT 1
42851: PPUSH
42852: CALL 14686 0 11
42856: END
// every 6 6$40 trigger firstAttack = 1 and JMMArrive = 0 do
42857: LD_EXP 33
42861: PUSH
42862: LD_INT 1
42864: EQUAL
42865: PUSH
42866: LD_EXP 39
42870: PUSH
42871: LD_INT 0
42873: EQUAL
42874: AND
42875: IFFALSE 42981
42877: GO 42879
42879: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42880: LD_INT 6
42882: PPUSH
42883: LD_INT 3
42885: PPUSH
42886: LD_INT 5
42888: PPUSH
42889: LD_INT 6
42891: PPUSH
42892: CALL_OW 12
42896: PUSH
42897: LD_INT 5
42899: PPUSH
42900: LD_INT 6
42902: PPUSH
42903: CALL_OW 12
42907: PUSH
42908: LD_INT 5
42910: PPUSH
42911: LD_INT 6
42913: PPUSH
42914: CALL_OW 12
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: LIST
42923: PUSH
42924: LD_OWVAR 67
42928: ARRAY
42929: PPUSH
42930: LD_INT 0
42932: PPUSH
42933: LD_INT 0
42935: PPUSH
42936: LD_INT 0
42938: PPUSH
42939: LD_INT 0
42941: PPUSH
42942: LD_EXP 25
42946: PPUSH
42947: LD_EXP 26
42951: PPUSH
42952: CALL_OW 12
42956: PPUSH
42957: LD_INT 16
42959: PPUSH
42960: LD_INT 7
42962: PPUSH
42963: LD_INT 1
42965: PPUSH
42966: LD_INT 1
42968: PPUSH
42969: LD_INT 3
42971: PPUSH
42972: CALL_OW 12
42976: PPUSH
42977: CALL 12393 0 12
42981: END
// every 6 6$50 trigger firstAttack = 1 and JMMArrive = 0 do
42982: LD_EXP 33
42986: PUSH
42987: LD_INT 1
42989: EQUAL
42990: PUSH
42991: LD_EXP 39
42995: PUSH
42996: LD_INT 0
42998: EQUAL
42999: AND
43000: IFFALSE 43096
43002: GO 43004
43004: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43005: LD_INT 16
43007: PPUSH
43008: LD_INT 6
43010: PPUSH
43011: LD_INT 5
43013: PPUSH
43014: LD_INT 6
43016: PPUSH
43017: CALL_OW 12
43021: PUSH
43022: LD_INT 6
43024: PPUSH
43025: LD_INT 7
43027: PPUSH
43028: CALL_OW 12
43032: PUSH
43033: LD_INT 7
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: LIST
43040: PUSH
43041: LD_OWVAR 67
43045: ARRAY
43046: PPUSH
43047: LD_EXP 25
43051: PPUSH
43052: LD_EXP 26
43056: PPUSH
43057: CALL_OW 12
43061: PPUSH
43062: LD_INT 3
43064: PPUSH
43065: LD_INT 1
43067: PPUSH
43068: LD_INT 3
43070: PPUSH
43071: LD_INT 43
43073: PUSH
43074: LD_INT 44
43076: PUSH
43077: LD_INT 46
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: LIST
43084: PPUSH
43085: EMPTY
43086: PPUSH
43087: EMPTY
43088: PPUSH
43089: LD_INT 1
43091: PPUSH
43092: CALL 14686 0 11
43096: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
43097: LD_EXP 33
43101: PUSH
43102: LD_INT 1
43104: EQUAL
43105: PUSH
43106: LD_EXP 39
43110: PUSH
43111: LD_INT 0
43113: EQUAL
43114: AND
43115: IFFALSE 43211
43117: GO 43119
43119: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43120: LD_INT 16
43122: PPUSH
43123: LD_INT 6
43125: PPUSH
43126: LD_INT 5
43128: PPUSH
43129: LD_INT 6
43131: PPUSH
43132: CALL_OW 12
43136: PUSH
43137: LD_INT 6
43139: PPUSH
43140: LD_INT 7
43142: PPUSH
43143: CALL_OW 12
43147: PUSH
43148: LD_INT 7
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: LIST
43155: PUSH
43156: LD_OWVAR 67
43160: ARRAY
43161: PPUSH
43162: LD_EXP 25
43166: PPUSH
43167: LD_EXP 26
43171: PPUSH
43172: CALL_OW 12
43176: PPUSH
43177: LD_INT 3
43179: PPUSH
43180: LD_INT 1
43182: PPUSH
43183: LD_INT 3
43185: PPUSH
43186: LD_INT 43
43188: PUSH
43189: LD_INT 44
43191: PUSH
43192: LD_INT 46
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: LIST
43199: PPUSH
43200: EMPTY
43201: PPUSH
43202: EMPTY
43203: PPUSH
43204: LD_INT 1
43206: PPUSH
43207: CALL 14686 0 11
43211: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
43212: LD_EXP 33
43216: PUSH
43217: LD_INT 1
43219: EQUAL
43220: PUSH
43221: LD_EXP 39
43225: PUSH
43226: LD_INT 0
43228: EQUAL
43229: AND
43230: IFFALSE 43306
43232: GO 43234
43234: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43235: LD_INT 16
43237: PPUSH
43238: LD_INT 6
43240: PPUSH
43241: LD_INT 5
43243: PUSH
43244: LD_INT 6
43246: PUSH
43247: LD_INT 7
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: LIST
43254: PUSH
43255: LD_OWVAR 67
43259: ARRAY
43260: PPUSH
43261: LD_EXP 25
43265: PPUSH
43266: LD_EXP 26
43270: PPUSH
43271: CALL_OW 12
43275: PPUSH
43276: LD_INT 3
43278: PPUSH
43279: LD_INT 1
43281: PPUSH
43282: LD_INT 3
43284: PPUSH
43285: LD_INT 44
43287: PUSH
43288: LD_INT 46
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PPUSH
43295: EMPTY
43296: PPUSH
43297: EMPTY
43298: PPUSH
43299: LD_INT 1
43301: PPUSH
43302: CALL 14686 0 11
43306: END
// every 1 1$00 trigger secondAttack = 1 do
43307: LD_EXP 34
43311: PUSH
43312: LD_INT 1
43314: EQUAL
43315: IFFALSE 43397
43317: GO 43319
43319: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43320: LD_INT 6
43322: PPUSH
43323: LD_INT 3
43325: PPUSH
43326: LD_INT 3
43328: PUSH
43329: LD_INT 4
43331: PUSH
43332: LD_INT 5
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: LIST
43339: PUSH
43340: LD_OWVAR 67
43344: ARRAY
43345: PPUSH
43346: LD_INT 0
43348: PPUSH
43349: LD_INT 0
43351: PPUSH
43352: LD_INT 0
43354: PPUSH
43355: LD_INT 0
43357: PPUSH
43358: LD_EXP 25
43362: PPUSH
43363: LD_EXP 26
43367: PPUSH
43368: CALL_OW 12
43372: PPUSH
43373: LD_INT 16
43375: PPUSH
43376: LD_INT 7
43378: PPUSH
43379: LD_INT 1
43381: PPUSH
43382: LD_INT 1
43384: PPUSH
43385: LD_INT 3
43387: PPUSH
43388: CALL_OW 12
43392: PPUSH
43393: CALL 12393 0 12
43397: END
// every 1 1$00 trigger secondAttack = 1 do
43398: LD_EXP 34
43402: PUSH
43403: LD_INT 1
43405: EQUAL
43406: IFFALSE 43510
43408: GO 43410
43410: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43411: LD_INT 16
43413: PPUSH
43414: LD_INT 6
43416: PPUSH
43417: LD_INT 5
43419: PPUSH
43420: LD_INT 8
43422: PPUSH
43423: CALL_OW 12
43427: PUSH
43428: LD_INT 6
43430: PPUSH
43431: LD_INT 9
43433: PPUSH
43434: CALL_OW 12
43438: PUSH
43439: LD_INT 7
43441: PPUSH
43442: LD_INT 9
43444: PPUSH
43445: CALL_OW 12
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: LIST
43454: PUSH
43455: LD_OWVAR 67
43459: ARRAY
43460: PPUSH
43461: LD_EXP 25
43465: PPUSH
43466: LD_EXP 26
43470: PPUSH
43471: CALL_OW 12
43475: PPUSH
43476: LD_INT 3
43478: PPUSH
43479: LD_INT 1
43481: PPUSH
43482: LD_INT 3
43484: PPUSH
43485: LD_INT 43
43487: PUSH
43488: LD_INT 44
43490: PUSH
43491: LD_INT 46
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: LIST
43498: PPUSH
43499: EMPTY
43500: PPUSH
43501: EMPTY
43502: PPUSH
43503: LD_INT 1
43505: PPUSH
43506: CALL 14686 0 11
43510: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43511: LD_EXP 18
43515: PUSH
43516: LD_INT 0
43518: EQUAL
43519: IFFALSE 43601
43521: GO 43523
43523: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43524: LD_INT 6
43526: PPUSH
43527: LD_INT 3
43529: PPUSH
43530: LD_INT 3
43532: PUSH
43533: LD_INT 4
43535: PUSH
43536: LD_INT 5
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: LIST
43543: PUSH
43544: LD_OWVAR 67
43548: ARRAY
43549: PPUSH
43550: LD_INT 0
43552: PPUSH
43553: LD_INT 0
43555: PPUSH
43556: LD_INT 0
43558: PPUSH
43559: LD_INT 0
43561: PPUSH
43562: LD_EXP 25
43566: PPUSH
43567: LD_EXP 26
43571: PPUSH
43572: CALL_OW 12
43576: PPUSH
43577: LD_INT 16
43579: PPUSH
43580: LD_INT 7
43582: PPUSH
43583: LD_INT 1
43585: PPUSH
43586: LD_INT 1
43588: PPUSH
43589: LD_INT 3
43591: PPUSH
43592: CALL_OW 12
43596: PPUSH
43597: CALL 12393 0 12
43601: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43602: LD_EXP 18
43606: PUSH
43607: LD_INT 0
43609: EQUAL
43610: IFFALSE 43710
43612: GO 43614
43614: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43615: LD_INT 16
43617: PPUSH
43618: LD_INT 6
43620: PPUSH
43621: LD_INT 5
43623: PPUSH
43624: LD_INT 8
43626: PPUSH
43627: CALL_OW 12
43631: PUSH
43632: LD_INT 6
43634: PPUSH
43635: LD_INT 9
43637: PPUSH
43638: CALL_OW 12
43642: PUSH
43643: LD_INT 7
43645: PPUSH
43646: LD_INT 9
43648: PPUSH
43649: CALL_OW 12
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: LIST
43658: PUSH
43659: LD_OWVAR 67
43663: ARRAY
43664: PPUSH
43665: LD_EXP 25
43669: PPUSH
43670: LD_EXP 26
43674: PPUSH
43675: CALL_OW 12
43679: PPUSH
43680: LD_INT 3
43682: PPUSH
43683: LD_INT 1
43685: PPUSH
43686: LD_INT 3
43688: PPUSH
43689: LD_INT 44
43691: PUSH
43692: LD_INT 46
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PPUSH
43699: EMPTY
43700: PPUSH
43701: EMPTY
43702: PPUSH
43703: LD_INT 1
43705: PPUSH
43706: CALL 14686 0 11
43710: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43711: LD_EXP 18
43715: PUSH
43716: LD_INT 0
43718: EQUAL
43719: IFFALSE 43801
43721: GO 43723
43723: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43724: LD_INT 6
43726: PPUSH
43727: LD_INT 3
43729: PPUSH
43730: LD_INT 3
43732: PUSH
43733: LD_INT 4
43735: PUSH
43736: LD_INT 5
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: LIST
43743: PUSH
43744: LD_OWVAR 67
43748: ARRAY
43749: PPUSH
43750: LD_INT 0
43752: PPUSH
43753: LD_INT 0
43755: PPUSH
43756: LD_INT 0
43758: PPUSH
43759: LD_INT 0
43761: PPUSH
43762: LD_EXP 25
43766: PPUSH
43767: LD_EXP 26
43771: PPUSH
43772: CALL_OW 12
43776: PPUSH
43777: LD_INT 16
43779: PPUSH
43780: LD_INT 7
43782: PPUSH
43783: LD_INT 1
43785: PPUSH
43786: LD_INT 1
43788: PPUSH
43789: LD_INT 3
43791: PPUSH
43792: CALL_OW 12
43796: PPUSH
43797: CALL 12393 0 12
43801: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43802: LD_EXP 18
43806: PUSH
43807: LD_INT 0
43809: EQUAL
43810: IFFALSE 43910
43812: GO 43814
43814: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43815: LD_INT 16
43817: PPUSH
43818: LD_INT 6
43820: PPUSH
43821: LD_INT 5
43823: PPUSH
43824: LD_INT 8
43826: PPUSH
43827: CALL_OW 12
43831: PUSH
43832: LD_INT 6
43834: PPUSH
43835: LD_INT 9
43837: PPUSH
43838: CALL_OW 12
43842: PUSH
43843: LD_INT 7
43845: PPUSH
43846: LD_INT 9
43848: PPUSH
43849: CALL_OW 12
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: LIST
43858: PUSH
43859: LD_OWVAR 67
43863: ARRAY
43864: PPUSH
43865: LD_EXP 25
43869: PPUSH
43870: LD_EXP 26
43874: PPUSH
43875: CALL_OW 12
43879: PPUSH
43880: LD_INT 3
43882: PPUSH
43883: LD_INT 1
43885: PPUSH
43886: LD_INT 3
43888: PPUSH
43889: LD_INT 44
43891: PUSH
43892: LD_INT 46
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PPUSH
43899: EMPTY
43900: PPUSH
43901: EMPTY
43902: PPUSH
43903: LD_INT 1
43905: PPUSH
43906: CALL 14686 0 11
43910: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43911: LD_EXP 18
43915: PUSH
43916: LD_INT 0
43918: EQUAL
43919: IFFALSE 44001
43921: GO 43923
43923: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43924: LD_INT 6
43926: PPUSH
43927: LD_INT 3
43929: PPUSH
43930: LD_INT 3
43932: PUSH
43933: LD_INT 4
43935: PUSH
43936: LD_INT 5
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: LIST
43943: PUSH
43944: LD_OWVAR 67
43948: ARRAY
43949: PPUSH
43950: LD_INT 0
43952: PPUSH
43953: LD_INT 0
43955: PPUSH
43956: LD_INT 0
43958: PPUSH
43959: LD_INT 0
43961: PPUSH
43962: LD_EXP 25
43966: PPUSH
43967: LD_EXP 26
43971: PPUSH
43972: CALL_OW 12
43976: PPUSH
43977: LD_INT 16
43979: PPUSH
43980: LD_INT 7
43982: PPUSH
43983: LD_INT 1
43985: PPUSH
43986: LD_INT 1
43988: PPUSH
43989: LD_INT 3
43991: PPUSH
43992: CALL_OW 12
43996: PPUSH
43997: CALL 12393 0 12
44001: END
// every 35 35$0 trigger SikorskyArrive = 0 do
44002: LD_EXP 18
44006: PUSH
44007: LD_INT 0
44009: EQUAL
44010: IFFALSE 44110
44012: GO 44014
44014: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
44015: LD_INT 16
44017: PPUSH
44018: LD_INT 6
44020: PPUSH
44021: LD_INT 5
44023: PPUSH
44024: LD_INT 8
44026: PPUSH
44027: CALL_OW 12
44031: PUSH
44032: LD_INT 6
44034: PPUSH
44035: LD_INT 9
44037: PPUSH
44038: CALL_OW 12
44042: PUSH
44043: LD_INT 7
44045: PPUSH
44046: LD_INT 9
44048: PPUSH
44049: CALL_OW 12
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: LIST
44058: PUSH
44059: LD_OWVAR 67
44063: ARRAY
44064: PPUSH
44065: LD_EXP 25
44069: PPUSH
44070: LD_EXP 26
44074: PPUSH
44075: CALL_OW 12
44079: PPUSH
44080: LD_INT 3
44082: PPUSH
44083: LD_INT 1
44085: PPUSH
44086: LD_INT 3
44088: PPUSH
44089: LD_INT 44
44091: PUSH
44092: LD_INT 46
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PPUSH
44099: EMPTY
44100: PPUSH
44101: EMPTY
44102: PPUSH
44103: LD_INT 1
44105: PPUSH
44106: CALL 14686 0 11
44110: END
// every 0 0$1 trigger timerStatus = 1 do
44111: LD_EXP 35
44115: PUSH
44116: LD_INT 1
44118: EQUAL
44119: IFFALSE 44179
44121: GO 44123
44123: DISABLE
// begin repeat wait ( 0 0$1 ) ;
44124: LD_INT 35
44126: PPUSH
44127: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
44131: LD_ADDR_OWVAR 47
44135: PUSH
44136: LD_STRING #Am08-1
44138: PUSH
44139: LD_EXP 19
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
44148: LD_ADDR_EXP 19
44152: PUSH
44153: LD_EXP 19
44157: PUSH
44158: LD_INT 35
44160: MINUS
44161: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
44162: LD_EXP 19
44166: PUSH
44167: LD_INT 0
44169: EQUAL
44170: IFFALSE 44124
// display_strings := [ ] ;
44172: LD_ADDR_OWVAR 47
44176: PUSH
44177: EMPTY
44178: ST_TO_ADDR
// end ; end_of_file
44179: END
// every 1 1$0 do
44180: GO 44182
44182: DISABLE
// begin if supply <= 13 and supply > 7 then
44183: LD_EXP 40
44187: PUSH
44188: LD_INT 13
44190: LESSEQUAL
44191: PUSH
44192: LD_EXP 40
44196: PUSH
44197: LD_INT 7
44199: GREATER
44200: AND
44201: IFFALSE 44224
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
44203: LD_INT 3
44205: PPUSH
44206: LD_INT 5
44208: PPUSH
44209: CALL_OW 12
44213: PPUSH
44214: LD_INT 5
44216: PPUSH
44217: LD_INT 1
44219: PPUSH
44220: CALL_OW 55
// if supply <= 7 and supply > 4 then
44224: LD_EXP 40
44228: PUSH
44229: LD_INT 7
44231: LESSEQUAL
44232: PUSH
44233: LD_EXP 40
44237: PUSH
44238: LD_INT 4
44240: GREATER
44241: AND
44242: IFFALSE 44265
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
44244: LD_INT 3
44246: PPUSH
44247: LD_INT 5
44249: PPUSH
44250: CALL_OW 12
44254: PPUSH
44255: LD_INT 20
44257: PPUSH
44258: LD_INT 1
44260: PPUSH
44261: CALL_OW 55
// if supply <= 4 and supply > 0 then
44265: LD_EXP 40
44269: PUSH
44270: LD_INT 4
44272: LESSEQUAL
44273: PUSH
44274: LD_EXP 40
44278: PUSH
44279: LD_INT 0
44281: GREATER
44282: AND
44283: IFFALSE 44306
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
44285: LD_INT 3
44287: PPUSH
44288: LD_INT 5
44290: PPUSH
44291: CALL_OW 12
44295: PPUSH
44296: LD_INT 21
44298: PPUSH
44299: LD_INT 1
44301: PPUSH
44302: CALL_OW 55
// if supply > 0 then
44306: LD_EXP 40
44310: PUSH
44311: LD_INT 0
44313: GREATER
44314: IFFALSE 44331
// begin supply = supply - 1 ;
44316: LD_ADDR_EXP 40
44320: PUSH
44321: LD_EXP 40
44325: PUSH
44326: LD_INT 1
44328: MINUS
44329: ST_TO_ADDR
// enable ;
44330: ENABLE
// end ; end ; end_of_file
44331: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
44332: LD_EXP 39
44336: PUSH
44337: LD_INT 1
44339: EQUAL
44340: PUSH
44341: LD_EXP 1
44345: PPUSH
44346: CALL_OW 301
44350: AND
44351: IFFALSE 44363
44353: GO 44355
44355: DISABLE
// YouLost ( JMM ) ;
44356: LD_STRING JMM
44358: PPUSH
44359: CALL_OW 104
44363: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
44364: LD_EXP 18
44368: PUSH
44369: LD_INT 1
44371: EQUAL
44372: PUSH
44373: LD_EXP 16
44377: PPUSH
44378: CALL_OW 301
44382: AND
44383: IFFALSE 44415
44385: GO 44387
44387: DISABLE
// begin DialogueOn ;
44388: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
44392: LD_EXP 23
44396: PPUSH
44397: LD_STRING D8a-Pow-1
44399: PPUSH
44400: CALL_OW 94
// DialogueOff ;
44404: CALL_OW 7
// YouLost ( Dismissed ) ;
44408: LD_STRING Dismissed
44410: PPUSH
44411: CALL_OW 104
// end ;
44415: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
44416: LD_INT 22
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: LD_INT 30
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 30
44441: PUSH
44442: LD_INT 1
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: LIST
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PPUSH
44458: CALL_OW 69
44462: PUSH
44463: LD_INT 0
44465: EQUAL
44466: IFFALSE 44478
44468: GO 44470
44470: DISABLE
// YouLost ( Destroyed ) ; end_of_file
44471: LD_STRING Destroyed
44473: PPUSH
44474: CALL_OW 104
44478: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , p ;
44479: LD_EXP 24
44483: PPUSH
44484: CALL_OW 301
44488: PUSH
44489: LD_INT 22
44491: PUSH
44492: LD_INT 3
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 21
44501: PUSH
44502: LD_INT 1
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PPUSH
44513: CALL_OW 69
44517: PUSH
44518: LD_INT 7
44520: PUSH
44521: LD_INT 6
44523: PUSH
44524: LD_INT 5
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: LIST
44531: PUSH
44532: LD_OWVAR 67
44536: ARRAY
44537: LESS
44538: AND
44539: PUSH
44540: LD_EXP 1
44544: PPUSH
44545: CALL_OW 305
44549: AND
44550: IFFALSE 44998
44552: GO 44554
44554: DISABLE
44555: LD_INT 0
44557: PPUSH
44558: PPUSH
// begin russianAI = 0 ;
44559: LD_ADDR_EXP 27
44563: PUSH
44564: LD_INT 0
44566: ST_TO_ADDR
// escapeAvalaible = 1 ;
44567: LD_ADDR_EXP 36
44571: PUSH
44572: LD_INT 1
44574: ST_TO_ADDR
// InGameOn ;
44575: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
44579: LD_INT 3
44581: PPUSH
44582: LD_INT 1
44584: PPUSH
44585: LD_INT 1
44587: PPUSH
44588: LD_INT 0
44590: PPUSH
44591: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
44595: LD_INT 6
44597: PPUSH
44598: LD_INT 1
44600: PPUSH
44601: LD_INT 1
44603: PPUSH
44604: LD_INT 0
44606: PPUSH
44607: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
44611: LD_INT 3
44613: PPUSH
44614: LD_INT 1
44616: PPUSH
44617: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
44621: LD_INT 97
44623: PPUSH
44624: LD_INT 91
44626: PPUSH
44627: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
44631: LD_INT 22
44633: PUSH
44634: LD_INT 3
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 21
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PPUSH
44655: CALL_OW 69
44659: PPUSH
44660: CALL_OW 121
// wait ( 0 0$01 ) ;
44664: LD_INT 35
44666: PPUSH
44667: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44671: LD_INT 22
44673: PUSH
44674: LD_INT 3
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 21
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PPUSH
44695: CALL_OW 69
44699: PPUSH
44700: LD_INT 124
44702: PPUSH
44703: LD_INT 98
44705: PPUSH
44706: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
44710: LD_INT 22
44712: PUSH
44713: LD_INT 6
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 21
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PPUSH
44734: CALL_OW 69
44738: PPUSH
44739: CALL_OW 121
// wait ( 0 0$01 ) ;
44743: LD_INT 35
44745: PPUSH
44746: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44750: LD_INT 22
44752: PUSH
44753: LD_INT 6
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 21
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PPUSH
44774: CALL_OW 69
44778: PPUSH
44779: LD_INT 124
44781: PPUSH
44782: LD_INT 98
44784: PPUSH
44785: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
44789: LD_INT 22
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 21
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 3
44811: PUSH
44812: LD_INT 54
44814: PUSH
44815: EMPTY
44816: LIST
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: LIST
44826: PPUSH
44827: CALL_OW 69
44831: PPUSH
44832: LD_INT 124
44834: PPUSH
44835: LD_INT 98
44837: PPUSH
44838: CALL_OW 114
// wait ( 0 0$4 ) ;
44842: LD_INT 140
44844: PPUSH
44845: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
44849: LD_INT 124
44851: PPUSH
44852: LD_INT 98
44854: PPUSH
44855: CALL_OW 84
// if SikorskyStatus = 1 then
44859: LD_EXP 21
44863: PUSH
44864: LD_INT 1
44866: EQUAL
44867: IFFALSE 44881
// begin Say ( Sikorski , D9-Sik-1 ) ;
44869: LD_EXP 16
44873: PPUSH
44874: LD_STRING D9-Sik-1
44876: PPUSH
44877: CALL_OW 88
// end ; if SikorskyStatus = 2 then
44881: LD_EXP 21
44885: PUSH
44886: LD_INT 2
44888: EQUAL
44889: IFFALSE 44910
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
44891: LD_EXP 23
44895: PPUSH
44896: LD_STRING D8b-Pow-1
44898: PPUSH
44899: CALL_OW 94
// YouLost ( Dismissed ) ;
44903: LD_STRING Dismissed
44905: PPUSH
44906: CALL_OW 104
// end ; p := 0 0$0 ;
44910: LD_ADDR_VAR 0 2
44914: PUSH
44915: LD_INT 0
44917: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
44918: LD_INT 35
44920: PPUSH
44921: CALL_OW 67
// p := p + 0 0$1 ;
44925: LD_ADDR_VAR 0 2
44929: PUSH
44930: LD_VAR 0 2
44934: PUSH
44935: LD_INT 35
44937: PLUS
44938: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
44939: LD_INT 23
44941: PUSH
44942: LD_INT 3
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 21
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 24
44961: PUSH
44962: LD_INT 250
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: LIST
44973: PPUSH
44974: CALL_OW 69
44978: PUSH
44979: LD_INT 0
44981: EQUAL
44982: PUSH
44983: LD_VAR 0 2
44987: PUSH
44988: LD_INT 245
44990: GREATEREQUAL
44991: OR
44992: IFFALSE 44918
// FinishMission ;
44994: CALL 45001 0 0
// end ;
44998: PPOPN 2
45000: END
// export function FinishMission ; var tmp ; begin
45001: LD_INT 0
45003: PPUSH
45004: PPUSH
// AddMedal ( med1 , 1 ) ;
45005: LD_STRING med1
45007: PPUSH
45008: LD_INT 1
45010: PPUSH
45011: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
45015: LD_STRING med2
45017: PPUSH
45018: LD_INT 1
45020: PPUSH
45021: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
45025: LD_STRING perfect
45027: PPUSH
45028: LD_INT 1
45030: PPUSH
45031: CALL_OW 101
// GiveMedals ( Main ) ;
45035: LD_STRING Main
45037: PPUSH
45038: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
45042: LD_INT 22
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 23
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 21
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 2
45074: PUSH
45075: LD_INT 25
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 25
45087: PUSH
45088: LD_INT 2
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 25
45097: PUSH
45098: LD_INT 3
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 25
45107: PUSH
45108: LD_INT 4
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: PPUSH
45128: CALL_OW 69
45132: PPUSH
45133: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
45137: LD_EXP 1
45141: PPUSH
45142: LD_EXP 43
45146: PUSH
45147: LD_STRING JMM
45149: STR
45150: PPUSH
45151: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
45155: LD_EXP 2
45159: PPUSH
45160: LD_EXP 43
45164: PUSH
45165: LD_STRING Brown
45167: STR
45168: PPUSH
45169: CALL 8240 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
45173: LD_EXP 3
45177: PPUSH
45178: LD_EXP 43
45182: PUSH
45183: LD_STRING Donaldson
45185: STR
45186: PPUSH
45187: CALL 8240 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
45191: LD_EXP 4
45195: PPUSH
45196: LD_EXP 43
45200: PUSH
45201: LD_STRING Bobby
45203: STR
45204: PPUSH
45205: CALL 8240 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
45209: LD_EXP 5
45213: PPUSH
45214: LD_EXP 43
45218: PUSH
45219: LD_STRING Cyrus
45221: STR
45222: PPUSH
45223: CALL 8240 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
45227: LD_EXP 6
45231: PPUSH
45232: LD_EXP 43
45236: PUSH
45237: LD_STRING Lisa
45239: STR
45240: PPUSH
45241: CALL 8240 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
45245: LD_EXP 7
45249: PPUSH
45250: LD_EXP 43
45254: PUSH
45255: LD_STRING Frank
45257: STR
45258: PPUSH
45259: CALL 8240 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
45263: LD_EXP 8
45267: PPUSH
45268: LD_EXP 43
45272: PUSH
45273: LD_STRING Gladstone
45275: STR
45276: PPUSH
45277: CALL 8240 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
45281: LD_EXP 9
45285: PPUSH
45286: LD_EXP 43
45290: PUSH
45291: LD_STRING Kikuchi
45293: STR
45294: PPUSH
45295: CALL 8240 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
45299: LD_EXP 14
45303: PPUSH
45304: LD_EXP 43
45308: PUSH
45309: LD_STRING Denis
45311: STR
45312: PPUSH
45313: CALL 8240 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
45317: LD_EXP 15
45321: PPUSH
45322: LD_EXP 43
45326: PUSH
45327: LD_STRING Joan
45329: STR
45330: PPUSH
45331: CALL 8240 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
45335: LD_EXP 10
45339: PPUSH
45340: LD_EXP 43
45344: PUSH
45345: LD_STRING Khatam
45347: STR
45348: PPUSH
45349: CALL 8240 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
45353: LD_EXP 13
45357: PPUSH
45358: LD_EXP 43
45362: PUSH
45363: LD_STRING Houten
45365: STR
45366: PPUSH
45367: CALL 8240 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
45371: LD_INT 50
45373: PUSH
45374: EMPTY
45375: LIST
45376: PUSH
45377: LD_INT 22
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 21
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: LD_INT 25
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 25
45412: PUSH
45413: LD_INT 2
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 25
45422: PUSH
45423: LD_INT 3
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 25
45432: PUSH
45433: LD_INT 4
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: PPUSH
45453: CALL_OW 69
45457: PUSH
45458: LD_EXP 1
45462: PUSH
45463: LD_EXP 2
45467: PUSH
45468: LD_EXP 3
45472: PUSH
45473: LD_EXP 4
45477: PUSH
45478: LD_EXP 5
45482: PUSH
45483: LD_EXP 6
45487: PUSH
45488: LD_EXP 7
45492: PUSH
45493: LD_EXP 8
45497: PUSH
45498: LD_EXP 9
45502: PUSH
45503: LD_EXP 14
45507: PUSH
45508: LD_EXP 15
45512: PUSH
45513: LD_EXP 13
45517: PUSH
45518: LD_EXP 10
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: DIFF
45538: PPUSH
45539: LD_STRING 08_other_survivors
45541: PPUSH
45542: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
45546: LD_INT 23
45548: PPUSH
45549: CALL 45562 0 1
// YouWin ;
45553: CALL_OW 103
// end ;
45557: LD_VAR 0 1
45561: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
45562: LD_INT 0
45564: PPUSH
45565: PPUSH
45566: PPUSH
45567: PPUSH
// gammaBase = [ ] ;
45568: LD_ADDR_VAR 0 4
45572: PUSH
45573: EMPTY
45574: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
45575: LD_ADDR_VAR 0 5
45579: PUSH
45580: LD_VAR 0 1
45584: PPUSH
45585: LD_INT 22
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 21
45597: PUSH
45598: LD_INT 3
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 50
45607: PUSH
45608: EMPTY
45609: LIST
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: LIST
45615: PPUSH
45616: CALL_OW 70
45620: ST_TO_ADDR
// for i in buildings do
45621: LD_ADDR_VAR 0 3
45625: PUSH
45626: LD_VAR 0 5
45630: PUSH
45631: FOR_IN
45632: IFFALSE 46069
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
45634: LD_VAR 0 3
45638: PPUSH
45639: CALL_OW 266
45643: PUSH
45644: LD_INT 6
45646: PUSH
45647: LD_INT 7
45649: PUSH
45650: LD_INT 8
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: LIST
45657: IN
45658: IFFALSE 45772
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
45660: LD_ADDR_VAR 0 4
45664: PUSH
45665: LD_VAR 0 4
45669: PUSH
45670: LD_VAR 0 3
45674: PPUSH
45675: CALL_OW 266
45679: PUSH
45680: LD_VAR 0 3
45684: PPUSH
45685: CALL_OW 250
45689: PUSH
45690: LD_VAR 0 3
45694: PPUSH
45695: CALL_OW 251
45699: PUSH
45700: LD_VAR 0 3
45704: PPUSH
45705: CALL_OW 254
45709: PUSH
45710: LD_VAR 0 3
45714: PPUSH
45715: CALL_OW 267
45719: PUSH
45720: LD_VAR 0 3
45724: PPUSH
45725: CALL_OW 248
45729: PUSH
45730: LD_VAR 0 3
45734: PPUSH
45735: LD_INT 1
45737: PPUSH
45738: CALL_OW 268
45742: PUSH
45743: LD_VAR 0 3
45747: PPUSH
45748: LD_INT 2
45750: PPUSH
45751: CALL_OW 268
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: PUSH
45766: EMPTY
45767: LIST
45768: ADD
45769: ST_TO_ADDR
45770: GO 46067
// if GetBType ( i ) = b_bunker then
45772: LD_VAR 0 3
45776: PPUSH
45777: CALL_OW 266
45781: PUSH
45782: LD_INT 32
45784: EQUAL
45785: IFFALSE 45882
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
45787: LD_ADDR_VAR 0 4
45791: PUSH
45792: LD_VAR 0 4
45796: PUSH
45797: LD_VAR 0 3
45801: PPUSH
45802: CALL_OW 266
45806: PUSH
45807: LD_VAR 0 3
45811: PPUSH
45812: CALL_OW 250
45816: PUSH
45817: LD_VAR 0 3
45821: PPUSH
45822: CALL_OW 251
45826: PUSH
45827: LD_VAR 0 3
45831: PPUSH
45832: CALL_OW 254
45836: PUSH
45837: LD_VAR 0 3
45841: PPUSH
45842: CALL_OW 267
45846: PUSH
45847: LD_VAR 0 3
45851: PPUSH
45852: CALL_OW 248
45856: PUSH
45857: LD_VAR 0 3
45861: PPUSH
45862: CALL_OW 269
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: PUSH
45876: EMPTY
45877: LIST
45878: ADD
45879: ST_TO_ADDR
45880: GO 46067
// if GetBType ( i ) = b_factory then
45882: LD_VAR 0 3
45886: PPUSH
45887: CALL_OW 266
45891: PUSH
45892: LD_INT 3
45894: EQUAL
45895: IFFALSE 45985
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
45897: LD_ADDR_VAR 0 4
45901: PUSH
45902: LD_VAR 0 4
45906: PPUSH
45907: LD_INT 1
45909: PPUSH
45910: LD_VAR 0 3
45914: PPUSH
45915: CALL_OW 266
45919: PUSH
45920: LD_VAR 0 3
45924: PPUSH
45925: CALL_OW 250
45929: PUSH
45930: LD_VAR 0 3
45934: PPUSH
45935: CALL_OW 251
45939: PUSH
45940: LD_VAR 0 3
45944: PPUSH
45945: CALL_OW 254
45949: PUSH
45950: LD_VAR 0 3
45954: PPUSH
45955: CALL_OW 267
45959: PUSH
45960: LD_VAR 0 3
45964: PPUSH
45965: CALL_OW 248
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: PPUSH
45978: CALL_OW 2
45982: ST_TO_ADDR
45983: GO 46067
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
45985: LD_ADDR_VAR 0 4
45989: PUSH
45990: LD_VAR 0 4
45994: PUSH
45995: LD_VAR 0 3
45999: PPUSH
46000: CALL_OW 266
46004: PUSH
46005: LD_VAR 0 3
46009: PPUSH
46010: CALL_OW 250
46014: PUSH
46015: LD_VAR 0 3
46019: PPUSH
46020: CALL_OW 251
46024: PUSH
46025: LD_VAR 0 3
46029: PPUSH
46030: CALL_OW 254
46034: PUSH
46035: LD_VAR 0 3
46039: PPUSH
46040: CALL_OW 267
46044: PUSH
46045: LD_VAR 0 3
46049: PPUSH
46050: CALL_OW 248
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: PUSH
46063: EMPTY
46064: LIST
46065: ADD
46066: ST_TO_ADDR
// end ;
46067: GO 45631
46069: POP
46070: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
46071: LD_VAR 0 4
46075: PPUSH
46076: LD_STRING 08_GammaBase
46078: PPUSH
46079: CALL_OW 39
// end ;
46083: LD_VAR 0 2
46087: RET
