// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 , macmilan_squad ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// mission_prefix := 08_ ;
  15: LD_ADDR_EXP 43
  19: PUSH
  20: LD_STRING 08_
  22: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  23: LD_ADDR_EXP 44
  27: PUSH
  28: LD_STRING 07c_
  30: ST_TO_ADDR
// JMMArrive = 0 ;
  31: LD_ADDR_EXP 39
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// SikorskyArrive = 0 ;
  39: LD_ADDR_EXP 18
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  47: LD_ADDR_EXP 19
  51: PUSH
  52: LD_INT 35
  54: ST_TO_ADDR
// SikorskyAI = 0 ;
  55: LD_ADDR_EXP 20
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// SikorskyStatus = 0 ;
  63: LD_ADDR_EXP 21
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// firstAttack = 0 ;
  71: LD_ADDR_EXP 33
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// secondAttack = 0 ;
  79: LD_ADDR_EXP 34
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// startCutscene = 1 ;
  87: LD_ADDR_EXP 38
  91: PUSH
  92: LD_INT 1
  94: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  95: LD_ADDR_EXP 12
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 0
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// russianAI = 0 ;
 111: LD_ADDR_EXP 27
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// escapeAvalaible = 0 ;
 126: LD_ADDR_EXP 36
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// defenders_list = [ ] ;
 134: LD_ADDR_EXP 32
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// varEvent1 = 0 ;
 141: LD_ADDR_EXP 41
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// timerStatus = 0 ;
 149: LD_ADDR_EXP 35
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 157: LD_ADDR_EXP 40
 161: PUSH
 162: LD_INT 18
 164: PUSH
 165: LD_INT 17
 167: PUSH
 168: LD_INT 15
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// debugMode = 0 ;
 182: LD_ADDR_EXP 45
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// PrepareDifficulty ;
 190: CALL 7663 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 194: LD_INT 43
 196: PPUSH
 197: LD_INT 22
 199: PPUSH
 200: LD_INT 1
 202: PPUSH
 203: LD_INT 333
 205: NEG
 206: PPUSH
 207: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 211: LD_INT 43
 213: PPUSH
 214: LD_INT 22
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 331
// PrepareGammaBase ;
 224: CALL 2635 0 0
// PrepareHeroes ;
 228: CALL 571 0 0
// PrepareRussianCommander ;
 232: CALL 6519 0 0
// PrepareRussians ;
 236: CALL 6837 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 240: LD_INT 22
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 25
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 69
 268: PPUSH
 269: LD_INT 0
 271: PPUSH
 272: LD_INT 90
 274: PPUSH
 275: LD_INT 86
 277: PPUSH
 278: LD_INT 3
 280: PPUSH
 281: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 285: LD_INT 3
 287: PPUSH
 288: LD_INT 24
 290: PPUSH
 291: LD_INT 3
 293: PPUSH
 294: LD_EXP 25
 298: PPUSH
 299: LD_EXP 26
 303: PPUSH
 304: CALL_OW 12
 308: PPUSH
 309: LD_INT 6
 311: PPUSH
 312: LD_INT 4
 314: PPUSH
 315: CALL 9073 0 6
// PrepareCutsceneAttack ;
 319: CALL 6571 0 0
// end ;
 323: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 324: LD_INT 22
 326: PUSH
 327: LD_INT 1
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: PUSH
 334: LD_INT 34
 336: PUSH
 337: LD_INT 6
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: PUSH
 353: LD_INT 6
 355: GREATEREQUAL
 356: IFFALSE 368
 358: GO 360
 360: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 361: LD_STRING ACH_ARMOR
 363: PPUSH
 364: CALL_OW 543
 368: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 369: LD_EXP 45
 373: PUSH
 374: LD_INT 1
 376: EQUAL
 377: IFFALSE 568
 379: GO 381
 381: DISABLE
 382: LD_INT 0
 384: PPUSH
// begin enable ;
 385: ENABLE
// fogoff ( true ) ;
 386: LD_INT 1
 388: PPUSH
 389: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 393: LD_ADDR_VAR 0 1
 397: PUSH
 398: LD_INT 22
 400: PUSH
 401: LD_INT 1
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: PUSH
 408: LD_INT 21
 410: PUSH
 411: LD_INT 1
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PPUSH
 422: CALL_OW 69
 426: PUSH
 427: FOR_IN
 428: IFFALSE 444
// SetLives ( i , 1000 ) ;
 430: LD_VAR 0 1
 434: PPUSH
 435: LD_INT 1000
 437: PPUSH
 438: CALL_OW 234
 442: GO 427
 444: POP
 445: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 446: LD_ADDR_VAR 0 1
 450: PUSH
 451: LD_INT 22
 453: PUSH
 454: LD_INT 1
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PUSH
 461: LD_INT 30
 463: PUSH
 464: LD_INT 1
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PPUSH
 475: CALL_OW 69
 479: PUSH
 480: FOR_IN
 481: IFFALSE 505
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 483: LD_VAR 0 1
 487: PPUSH
 488: CALL_OW 274
 492: PPUSH
 493: LD_INT 1
 495: PPUSH
 496: LD_INT 9999
 498: PPUSH
 499: CALL_OW 277
 503: GO 480
 505: POP
 506: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 507: LD_ADDR_VAR 0 1
 511: PUSH
 512: LD_INT 22
 514: PUSH
 515: LD_INT 1
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PUSH
 522: LD_INT 30
 524: PUSH
 525: LD_INT 1
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PPUSH
 536: CALL_OW 69
 540: PUSH
 541: FOR_IN
 542: IFFALSE 566
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 544: LD_VAR 0 1
 548: PPUSH
 549: CALL_OW 274
 553: PPUSH
 554: LD_INT 2
 556: PPUSH
 557: LD_INT 9999
 559: PPUSH
 560: CALL_OW 277
 564: GO 541
 566: POP
 567: POP
// end ; end_of_file
 568: PPOPN 1
 570: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
 577: PPUSH
 578: PPUSH
 579: PPUSH
 580: PPUSH
 581: PPUSH
 582: PPUSH
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
 587: PPUSH
// uc_side = 1 ;
 588: LD_ADDR_OWVAR 20
 592: PUSH
 593: LD_INT 1
 595: ST_TO_ADDR
// uc_nation = 1 ;
 596: LD_ADDR_OWVAR 21
 600: PUSH
 601: LD_INT 1
 603: ST_TO_ADDR
// if gammaCommander = 1 then
 604: LD_EXP 12
 608: PUSH
 609: LD_INT 1
 611: EQUAL
 612: IFFALSE 663
// begin Donaldson = PrepareUnit ( Donaldson , true , 04_ ) ;
 614: LD_ADDR_EXP 3
 618: PUSH
 619: LD_STRING Donaldson
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: LD_STRING 04_
 627: PPUSH
 628: CALL 44198 0 3
 632: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 633: LD_EXP 3
 637: PPUSH
 638: LD_INT 54
 640: PPUSH
 641: LD_INT 25
 643: PPUSH
 644: LD_INT 8
 646: PPUSH
 647: LD_INT 0
 649: PPUSH
 650: CALL_OW 50
// ComHold ( Donaldson ) ;
 654: LD_EXP 3
 658: PPUSH
 659: CALL_OW 140
// end ; if gammaCommander = 2 then
 663: LD_EXP 12
 667: PUSH
 668: LD_INT 2
 670: EQUAL
 671: IFFALSE 722
// begin Brown = PrepareUnit ( Brown , true , 04_ ) ;
 673: LD_ADDR_EXP 2
 677: PUSH
 678: LD_STRING Brown
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: LD_STRING 04_
 686: PPUSH
 687: CALL 44198 0 3
 691: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 692: LD_EXP 2
 696: PPUSH
 697: LD_INT 54
 699: PPUSH
 700: LD_INT 25
 702: PPUSH
 703: LD_INT 8
 705: PPUSH
 706: LD_INT 0
 708: PPUSH
 709: CALL_OW 50
// ComHold ( Brown ) ;
 713: LD_EXP 2
 717: PPUSH
 718: CALL_OW 140
// end ; if gammaCommander = 3 then
 722: LD_EXP 12
 726: PUSH
 727: LD_INT 3
 729: EQUAL
 730: IFFALSE 781
// begin Houten = PrepareUnit ( VanHouten , false ,  ) ;
 732: LD_ADDR_EXP 13
 736: PUSH
 737: LD_STRING VanHouten
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: LD_STRING 
 745: PPUSH
 746: CALL 44198 0 3
 750: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 751: LD_EXP 13
 755: PPUSH
 756: LD_INT 54
 758: PPUSH
 759: LD_INT 25
 761: PPUSH
 762: LD_INT 8
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 50
// ComHold ( Houten ) ;
 772: LD_EXP 13
 776: PPUSH
 777: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ,  ) ;
 781: LD_ADDR_EXP 22
 785: PUSH
 786: LD_STRING Harisson
 788: PPUSH
 789: LD_INT 0
 791: PPUSH
 792: LD_STRING 
 794: PPUSH
 795: CALL 44198 0 3
 799: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 800: LD_ADDR_EXP 23
 804: PUSH
 805: LD_STRING Powell
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: LD_STRING 
 813: PPUSH
 814: CALL 44198 0 3
 818: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 819: LD_STRING 04_Lisa
 821: PUSH
 822: EMPTY
 823: LIST
 824: PPUSH
 825: CALL_OW 28
 829: PUSH
 830: LD_STRING LisaInDelta
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 30
 840: NOT
 841: AND
 842: PUSH
 843: LD_STRING 07_Lisa
 845: PUSH
 846: EMPTY
 847: LIST
 848: PPUSH
 849: CALL_OW 28
 853: NOT
 854: AND
 855: IFFALSE 894
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 857: LD_ADDR_EXP 6
 861: PUSH
 862: LD_STRING Lisa
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_STRING 04_
 870: PPUSH
 871: CALL 44198 0 3
 875: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 876: LD_ADDR_VAR 0 15
 880: PUSH
 881: LD_VAR 0 15
 885: PUSH
 886: LD_EXP 6
 890: ADD
 891: ST_TO_ADDR
// end else
 892: GO 949
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 894: LD_EXP 6
 898: NOT
 899: PUSH
 900: LD_STRING LisaIn07
 902: PPUSH
 903: LD_INT 0
 905: PPUSH
 906: CALL_OW 30
 910: NOT
 911: AND
 912: IFFALSE 949
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 914: LD_ADDR_EXP 6
 918: PUSH
 919: LD_STRING Lisa
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: LD_STRING 07_
 927: PPUSH
 928: CALL 44198 0 3
 932: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 933: LD_ADDR_VAR 0 15
 937: PUSH
 938: LD_VAR 0 15
 942: PUSH
 943: LD_EXP 6
 947: ADD
 948: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 949: LD_STRING 04_Bobby
 951: PUSH
 952: EMPTY
 953: LIST
 954: PPUSH
 955: CALL_OW 28
 959: PUSH
 960: LD_STRING BobbyInDelta
 962: PPUSH
 963: LD_INT 0
 965: PPUSH
 966: CALL_OW 30
 970: NOT
 971: AND
 972: PUSH
 973: LD_STRING 07_Bobby
 975: PUSH
 976: EMPTY
 977: LIST
 978: PPUSH
 979: CALL_OW 28
 983: NOT
 984: AND
 985: IFFALSE 1024
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 987: LD_ADDR_EXP 4
 991: PUSH
 992: LD_STRING Bobby
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_STRING 04_
1000: PPUSH
1001: CALL 44198 0 3
1005: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1006: LD_ADDR_VAR 0 15
1010: PUSH
1011: LD_VAR 0 15
1015: PUSH
1016: LD_EXP 4
1020: ADD
1021: ST_TO_ADDR
// end else
1022: GO 1079
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
1024: LD_EXP 4
1028: NOT
1029: PUSH
1030: LD_STRING BobbyIn07
1032: PPUSH
1033: LD_INT 0
1035: PPUSH
1036: CALL_OW 30
1040: NOT
1041: AND
1042: IFFALSE 1079
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
1044: LD_ADDR_EXP 4
1048: PUSH
1049: LD_STRING Bobby
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: LD_STRING 07_
1057: PPUSH
1058: CALL 44198 0 3
1062: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1063: LD_ADDR_VAR 0 15
1067: PUSH
1068: LD_VAR 0 15
1072: PUSH
1073: LD_EXP 4
1077: ADD
1078: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1079: LD_STRING 04_Cyrus
1081: PUSH
1082: EMPTY
1083: LIST
1084: PPUSH
1085: CALL_OW 28
1089: PUSH
1090: LD_STRING CyrusInDelta
1092: PPUSH
1093: LD_INT 0
1095: PPUSH
1096: CALL_OW 30
1100: NOT
1101: AND
1102: PUSH
1103: LD_STRING 07_Cyrus
1105: PUSH
1106: EMPTY
1107: LIST
1108: PPUSH
1109: CALL_OW 28
1113: NOT
1114: AND
1115: IFFALSE 1154
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
1117: LD_ADDR_EXP 5
1121: PUSH
1122: LD_STRING Cyrus
1124: PPUSH
1125: LD_INT 1
1127: PPUSH
1128: LD_STRING 04_
1130: PPUSH
1131: CALL 44198 0 3
1135: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1136: LD_ADDR_VAR 0 15
1140: PUSH
1141: LD_VAR 0 15
1145: PUSH
1146: LD_EXP 5
1150: ADD
1151: ST_TO_ADDR
// end else
1152: GO 1209
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1154: LD_EXP 5
1158: NOT
1159: PUSH
1160: LD_STRING CyrusIn07
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 30
1170: NOT
1171: AND
1172: IFFALSE 1209
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
1174: LD_ADDR_EXP 5
1178: PUSH
1179: LD_STRING Cyrus
1181: PPUSH
1182: LD_INT 1
1184: PPUSH
1185: LD_STRING 07_
1187: PPUSH
1188: CALL 44198 0 3
1192: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1193: LD_ADDR_VAR 0 15
1197: PUSH
1198: LD_VAR 0 15
1202: PUSH
1203: LD_EXP 5
1207: ADD
1208: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1209: LD_STRING 04_Brown
1211: PUSH
1212: EMPTY
1213: LIST
1214: PPUSH
1215: CALL_OW 28
1219: PUSH
1220: LD_STRING BrownInDelta
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL_OW 30
1230: NOT
1231: AND
1232: PUSH
1233: LD_STRING 07_Brown
1235: PUSH
1236: EMPTY
1237: LIST
1238: PPUSH
1239: CALL_OW 28
1243: NOT
1244: AND
1245: PUSH
1246: LD_EXP 12
1250: PUSH
1251: LD_INT 2
1253: NONEQUAL
1254: AND
1255: IFFALSE 1294
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1257: LD_ADDR_EXP 2
1261: PUSH
1262: LD_STRING Brown
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_STRING 04_
1270: PPUSH
1271: CALL 44198 0 3
1275: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1276: LD_ADDR_VAR 0 15
1280: PUSH
1281: LD_VAR 0 15
1285: PUSH
1286: LD_EXP 2
1290: ADD
1291: ST_TO_ADDR
// end else
1292: GO 1359
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1294: LD_EXP 2
1298: NOT
1299: PUSH
1300: LD_STRING BrownIn07
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL_OW 30
1310: NOT
1311: AND
1312: PUSH
1313: LD_EXP 12
1317: PUSH
1318: LD_INT 2
1320: NONEQUAL
1321: AND
1322: IFFALSE 1359
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1324: LD_ADDR_EXP 2
1328: PUSH
1329: LD_STRING Brown
1331: PPUSH
1332: LD_INT 1
1334: PPUSH
1335: LD_STRING 07_
1337: PPUSH
1338: CALL 44198 0 3
1342: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1343: LD_ADDR_VAR 0 15
1347: PUSH
1348: LD_VAR 0 15
1352: PUSH
1353: LD_EXP 2
1357: ADD
1358: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1359: LD_STRING 04_Donaldson
1361: PUSH
1362: EMPTY
1363: LIST
1364: PPUSH
1365: CALL_OW 28
1369: PUSH
1370: LD_STRING DonaldsonInDelta
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 30
1380: NOT
1381: AND
1382: PUSH
1383: LD_STRING 07_Donaldson
1385: PUSH
1386: EMPTY
1387: LIST
1388: PPUSH
1389: CALL_OW 28
1393: NOT
1394: AND
1395: PUSH
1396: LD_EXP 12
1400: PUSH
1401: LD_INT 1
1403: NONEQUAL
1404: AND
1405: IFFALSE 1444
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1407: LD_ADDR_EXP 3
1411: PUSH
1412: LD_STRING Donaldson
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: LD_STRING 04_
1420: PPUSH
1421: CALL 44198 0 3
1425: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1426: LD_ADDR_VAR 0 15
1430: PUSH
1431: LD_VAR 0 15
1435: PUSH
1436: LD_EXP 3
1440: ADD
1441: ST_TO_ADDR
// end else
1442: GO 1509
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1444: LD_EXP 3
1448: NOT
1449: PUSH
1450: LD_STRING DonaldsonIn07
1452: PPUSH
1453: LD_INT 0
1455: PPUSH
1456: CALL_OW 30
1460: NOT
1461: AND
1462: PUSH
1463: LD_EXP 12
1467: PUSH
1468: LD_INT 1
1470: NONEQUAL
1471: AND
1472: IFFALSE 1509
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1474: LD_ADDR_EXP 3
1478: PUSH
1479: LD_STRING Donaldson
1481: PPUSH
1482: LD_INT 1
1484: PPUSH
1485: LD_STRING 07_
1487: PPUSH
1488: CALL 44198 0 3
1492: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1493: LD_ADDR_VAR 0 15
1497: PUSH
1498: LD_VAR 0 15
1502: PUSH
1503: LD_EXP 3
1507: ADD
1508: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1509: LD_STRING KhatamIn07
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 30
1519: NOT
1520: IFFALSE 1557
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1522: LD_ADDR_EXP 10
1526: PUSH
1527: LD_STRING Khatam
1529: PPUSH
1530: LD_INT 1
1532: PPUSH
1533: LD_STRING 07_
1535: PPUSH
1536: CALL 44198 0 3
1540: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1541: LD_ADDR_VAR 0 15
1545: PUSH
1546: LD_VAR 0 15
1550: PUSH
1551: LD_EXP 10
1555: ADD
1556: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1557: LD_ADDR_EXP 11
1561: PUSH
1562: LD_STRING 07_othersGamma
1564: PPUSH
1565: CALL_OW 31
1569: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1570: LD_ADDR_VAR 0 14
1574: PUSH
1575: LD_INT 8
1577: PUSH
1578: LD_EXP 11
1582: MINUS
1583: ST_TO_ADDR
// if tmp then
1584: LD_VAR 0 14
1588: IFFALSE 1641
// for i = 1 to tmp do
1590: LD_ADDR_VAR 0 2
1594: PUSH
1595: DOUBLE
1596: LD_INT 1
1598: DEC
1599: ST_TO_ADDR
1600: LD_VAR 0 14
1604: PUSH
1605: FOR_TO
1606: IFFALSE 1639
// begin PrepareHuman ( false , 1 , 5 ) ;
1608: LD_INT 0
1610: PPUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_INT 5
1616: PPUSH
1617: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1621: LD_ADDR_EXP 11
1625: PUSH
1626: LD_EXP 11
1630: PUSH
1631: CALL_OW 44
1635: ADD
1636: ST_TO_ADDR
// end ;
1637: GO 1605
1639: POP
1640: POP
// if HexInfo ( 61 , 29 ) = 0 then
1641: LD_INT 61
1643: PPUSH
1644: LD_INT 29
1646: PPUSH
1647: CALL_OW 428
1651: PUSH
1652: LD_INT 0
1654: EQUAL
1655: IFFALSE 1686
// begin bc_type := b_barracks ;
1657: LD_ADDR_OWVAR 42
1661: PUSH
1662: LD_INT 5
1664: ST_TO_ADDR
// bc_level := 6 ;
1665: LD_ADDR_OWVAR 43
1669: PUSH
1670: LD_INT 6
1672: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1673: LD_INT 61
1675: PPUSH
1676: LD_INT 29
1678: PPUSH
1679: LD_INT 5
1681: PPUSH
1682: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1686: LD_ADDR_VAR 0 13
1690: PUSH
1691: LD_INT 22
1693: PUSH
1694: LD_INT 1
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 30
1703: PUSH
1704: LD_INT 31
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PPUSH
1715: CALL_OW 69
1719: ST_TO_ADDR
// for i in bun do
1720: LD_ADDR_VAR 0 2
1724: PUSH
1725: LD_VAR 0 13
1729: PUSH
1730: FOR_IN
1731: IFFALSE 1863
// begin x := GetX ( i ) ;
1733: LD_ADDR_VAR 0 3
1737: PUSH
1738: LD_VAR 0 2
1742: PPUSH
1743: CALL_OW 250
1747: ST_TO_ADDR
// y := GetY ( i ) ;
1748: LD_ADDR_VAR 0 4
1752: PUSH
1753: LD_VAR 0 2
1757: PPUSH
1758: CALL_OW 251
1762: ST_TO_ADDR
// d := GetDir ( i ) ;
1763: LD_ADDR_VAR 0 5
1767: PUSH
1768: LD_VAR 0 2
1772: PPUSH
1773: CALL_OW 254
1777: ST_TO_ADDR
// RemoveUnit ( i ) ;
1778: LD_VAR 0 2
1782: PPUSH
1783: CALL_OW 64
// bc_type := b_bunker ;
1787: LD_ADDR_OWVAR 42
1791: PUSH
1792: LD_INT 32
1794: ST_TO_ADDR
// bc_level := 6 ;
1795: LD_ADDR_OWVAR 43
1799: PUSH
1800: LD_INT 6
1802: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1803: LD_ADDR_VAR 0 6
1807: PUSH
1808: LD_VAR 0 3
1812: PPUSH
1813: LD_VAR 0 4
1817: PPUSH
1818: LD_VAR 0 5
1822: PPUSH
1823: CALL_OW 47
1827: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1828: LD_VAR 0 6
1832: PPUSH
1833: LD_INT 5
1835: PUSH
1836: LD_INT 4
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_VAR 0 2
1847: PUSH
1848: LD_INT 2
1850: MOD
1851: PUSH
1852: LD_INT 1
1854: PLUS
1855: ARRAY
1856: PPUSH
1857: CALL_OW 431
// end ;
1861: GO 1730
1863: POP
1864: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1865: LD_ADDR_VAR 0 9
1869: PUSH
1870: LD_INT 22
1872: PUSH
1873: LD_INT 1
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 30
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PPUSH
1894: CALL_OW 69
1898: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1899: LD_ADDR_VAR 0 8
1903: PUSH
1904: LD_INT 22
1906: PUSH
1907: LD_INT 1
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 2
1916: PUSH
1917: LD_INT 30
1919: PUSH
1920: LD_INT 6
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: LD_INT 30
1929: PUSH
1930: LD_INT 7
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: PUSH
1937: LD_INT 30
1939: PUSH
1940: LD_INT 8
1942: PUSH
1943: EMPTY
1944: LIST
1945: LIST
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PPUSH
1957: CALL_OW 69
1961: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1962: LD_ADDR_VAR 0 7
1966: PUSH
1967: LD_INT 22
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: LD_INT 30
1979: PUSH
1980: LD_INT 3
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 69
1995: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1996: LD_ADDR_VAR 0 12
2000: PUSH
2001: LD_INT 22
2003: PUSH
2004: LD_INT 1
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 30
2013: PUSH
2014: LD_INT 36
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PPUSH
2025: CALL_OW 69
2029: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
2030: LD_ADDR_VAR 0 13
2034: PUSH
2035: LD_INT 22
2037: PUSH
2038: LD_INT 1
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PUSH
2045: LD_INT 2
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 31
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 30
2060: PUSH
2061: LD_INT 32
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: PPUSH
2077: CALL_OW 69
2081: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
2082: LD_ADDR_VAR 0 2
2086: PUSH
2087: LD_EXP 11
2091: PUSH
2092: LD_VAR 0 15
2096: ADD
2097: PUSH
2098: FOR_IN
2099: IFFALSE 2520
// begin placed := false ;
2101: LD_ADDR_VAR 0 11
2105: PUSH
2106: LD_INT 0
2108: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2109: LD_VAR 0 2
2113: PPUSH
2114: CALL_OW 257
2118: PUSH
2119: LD_INT 1
2121: EQUAL
2122: IFFALSE 2247
// begin if UnitFilter ( bun , [ f_empty ] ) then
2124: LD_VAR 0 13
2128: PPUSH
2129: LD_INT 58
2131: PUSH
2132: EMPTY
2133: LIST
2134: PPUSH
2135: CALL_OW 72
2139: IFFALSE 2178
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2141: LD_VAR 0 2
2145: PPUSH
2146: LD_VAR 0 13
2150: PPUSH
2151: LD_INT 58
2153: PUSH
2154: EMPTY
2155: LIST
2156: PPUSH
2157: CALL_OW 72
2161: PUSH
2162: LD_INT 1
2164: ARRAY
2165: PPUSH
2166: CALL_OW 52
// placed := true ;
2170: LD_ADDR_VAR 0 11
2174: PUSH
2175: LD_INT 1
2177: ST_TO_ADDR
// end ; if arm and not placed then
2178: LD_VAR 0 9
2182: PUSH
2183: LD_VAR 0 11
2187: NOT
2188: AND
2189: IFFALSE 2247
// begin for j in arm do
2191: LD_ADDR_VAR 0 10
2195: PUSH
2196: LD_VAR 0 9
2200: PUSH
2201: FOR_IN
2202: IFFALSE 2245
// if UnitsInside ( j ) < 6 then
2204: LD_VAR 0 10
2208: PPUSH
2209: CALL_OW 313
2213: PUSH
2214: LD_INT 6
2216: LESS
2217: IFFALSE 2243
// begin PlaceHumanInUnit ( i , j ) ;
2219: LD_VAR 0 2
2223: PPUSH
2224: LD_VAR 0 10
2228: PPUSH
2229: CALL_OW 52
// placed := true ;
2233: LD_ADDR_VAR 0 11
2237: PUSH
2238: LD_INT 1
2240: ST_TO_ADDR
// break ;
2241: GO 2245
// end ;
2243: GO 2201
2245: POP
2246: POP
// end ; end ; if GetClass ( i ) = 2 then
2247: LD_VAR 0 2
2251: PPUSH
2252: CALL_OW 257
2256: PUSH
2257: LD_INT 2
2259: EQUAL
2260: IFFALSE 2293
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 52
2269: PPUSH
2270: LD_INT 20
2272: PPUSH
2273: LD_INT 6
2275: PPUSH
2276: LD_INT 0
2278: PPUSH
2279: CALL_OW 50
// placed := true ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_INT 1
2290: ST_TO_ADDR
// continue ;
2291: GO 2098
// end ; if GetClass ( i ) = 3 then
2293: LD_VAR 0 2
2297: PPUSH
2298: CALL_OW 257
2302: PUSH
2303: LD_INT 3
2305: EQUAL
2306: IFFALSE 2410
// if fac then
2308: LD_VAR 0 7
2312: IFFALSE 2410
// begin if ct then
2314: LD_VAR 0 12
2318: IFFALSE 2346
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: LD_VAR 0 12
2329: PUSH
2330: LD_INT 1
2332: ARRAY
2333: PPUSH
2334: CALL_OW 52
// placed := true ;
2338: LD_ADDR_VAR 0 11
2342: PUSH
2343: LD_INT 1
2345: ST_TO_ADDR
// end ; if placed then
2346: LD_VAR 0 11
2350: IFFALSE 2354
// continue ;
2352: GO 2098
// for j in fac do
2354: LD_ADDR_VAR 0 10
2358: PUSH
2359: LD_VAR 0 7
2363: PUSH
2364: FOR_IN
2365: IFFALSE 2408
// if UnitsInside ( j ) < 6 then
2367: LD_VAR 0 10
2371: PPUSH
2372: CALL_OW 313
2376: PUSH
2377: LD_INT 6
2379: LESS
2380: IFFALSE 2406
// begin PlaceHumanInUnit ( i , j ) ;
2382: LD_VAR 0 2
2386: PPUSH
2387: LD_VAR 0 10
2391: PPUSH
2392: CALL_OW 52
// placed := true ;
2396: LD_ADDR_VAR 0 11
2400: PUSH
2401: LD_INT 1
2403: ST_TO_ADDR
// break ;
2404: GO 2408
// end ;
2406: GO 2364
2408: POP
2409: POP
// end ; if GetClass ( i ) = 4 then
2410: LD_VAR 0 2
2414: PPUSH
2415: CALL_OW 257
2419: PUSH
2420: LD_INT 4
2422: EQUAL
2423: IFFALSE 2487
// if lab then
2425: LD_VAR 0 8
2429: IFFALSE 2487
// begin for j in lab do
2431: LD_ADDR_VAR 0 10
2435: PUSH
2436: LD_VAR 0 8
2440: PUSH
2441: FOR_IN
2442: IFFALSE 2485
// if UnitsInside ( j ) < 6 then
2444: LD_VAR 0 10
2448: PPUSH
2449: CALL_OW 313
2453: PUSH
2454: LD_INT 6
2456: LESS
2457: IFFALSE 2483
// begin PlaceHumanInUnit ( i , j ) ;
2459: LD_VAR 0 2
2463: PPUSH
2464: LD_VAR 0 10
2468: PPUSH
2469: CALL_OW 52
// placed := true ;
2473: LD_ADDR_VAR 0 11
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// break ;
2481: GO 2485
// end ;
2483: GO 2441
2485: POP
2486: POP
// end ; if not placed then
2487: LD_VAR 0 11
2491: NOT
2492: IFFALSE 2518
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_INT 5
2501: PPUSH
2502: LD_INT 0
2504: PPUSH
2505: CALL_OW 49
// ComHold ( i ) ;
2509: LD_VAR 0 2
2513: PPUSH
2514: CALL_OW 140
// end ; end ;
2518: GO 2098
2520: POP
2521: POP
// if ct then
2522: LD_VAR 0 12
2526: IFFALSE 2630
// if UnitsInside ( ct [ 1 ] ) then
2528: LD_VAR 0 12
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PPUSH
2537: CALL_OW 313
2541: IFFALSE 2630
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2543: LD_ADDR_VAR 0 2
2547: PUSH
2548: LD_INT 22
2550: PUSH
2551: LD_INT 1
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: PUSH
2558: LD_INT 33
2560: PUSH
2561: LD_INT 2
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PPUSH
2572: CALL_OW 69
2576: PUSH
2577: FOR_IN
2578: IFFALSE 2628
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2580: LD_VAR 0 2
2584: PPUSH
2585: LD_VAR 0 12
2589: PUSH
2590: LD_INT 1
2592: ARRAY
2593: PPUSH
2594: CALL_OW 313
2598: PUSH
2599: LD_INT 1
2601: PPUSH
2602: LD_VAR 0 12
2606: PUSH
2607: LD_INT 1
2609: ARRAY
2610: PPUSH
2611: CALL_OW 313
2615: PPUSH
2616: CALL_OW 12
2620: ARRAY
2621: PPUSH
2622: CALL_OW 135
2626: GO 2577
2628: POP
2629: POP
// end ; end ;
2630: LD_VAR 0 1
2634: RET
// export function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2635: LD_INT 0
2637: PPUSH
2638: PPUSH
2639: PPUSH
2640: PPUSH
2641: PPUSH
2642: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2643: LD_INT 71
2645: PPUSH
2646: LD_INT 5
2648: PPUSH
2649: LD_INT 1
2651: PPUSH
2652: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2656: LD_ADDR_VAR 0 2
2660: PUSH
2661: LD_STRING GammaBase
2663: PPUSH
2664: EMPTY
2665: PPUSH
2666: CALL_OW 30
2670: ST_TO_ADDR
// if not blist then
2671: LD_VAR 0 2
2675: NOT
2676: IFFALSE 2716
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2678: LD_ADDR_VAR 0 2
2682: PUSH
2683: LD_INT 1
2685: PUSH
2686: LD_INT 52
2688: PUSH
2689: LD_INT 12
2691: PUSH
2692: LD_INT 3
2694: PUSH
2695: LD_INT 3
2697: PUSH
2698: LD_INT 0
2700: PUSH
2701: LD_INT 0
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: LIST
2710: LIST
2711: LIST
2712: PUSH
2713: EMPTY
2714: LIST
2715: ST_TO_ADDR
// uc_side := 1 ;
2716: LD_ADDR_OWVAR 20
2720: PUSH
2721: LD_INT 1
2723: ST_TO_ADDR
// uc_nation := 1 ;
2724: LD_ADDR_OWVAR 21
2728: PUSH
2729: LD_INT 1
2731: ST_TO_ADDR
// bc_kind1 := - 1 ;
2732: LD_ADDR_OWVAR 44
2736: PUSH
2737: LD_INT 1
2739: NEG
2740: ST_TO_ADDR
// bc_kind2 := - 1 ;
2741: LD_ADDR_OWVAR 45
2745: PUSH
2746: LD_INT 1
2748: NEG
2749: ST_TO_ADDR
// for i in blist do
2750: LD_ADDR_VAR 0 3
2754: PUSH
2755: LD_VAR 0 2
2759: PUSH
2760: FOR_IN
2761: IFFALSE 3037
// begin bc_type := i [ 1 ] ;
2763: LD_ADDR_OWVAR 42
2767: PUSH
2768: LD_VAR 0 3
2772: PUSH
2773: LD_INT 1
2775: ARRAY
2776: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2777: LD_ADDR_OWVAR 43
2781: PUSH
2782: LD_VAR 0 3
2786: PUSH
2787: LD_INT 5
2789: ARRAY
2790: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2791: LD_OWVAR 42
2795: PUSH
2796: LD_INT 6
2798: PUSH
2799: LD_INT 7
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: IN
2806: IFFALSE 2872
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2808: LD_STRING 06_remoteVehs_1
2810: PPUSH
2811: LD_INT 0
2813: PPUSH
2814: CALL_OW 30
2818: NOT
2819: IFFALSE 2847
// begin bc_type := b_lab_full ;
2821: LD_ADDR_OWVAR 42
2825: PUSH
2826: LD_INT 8
2828: ST_TO_ADDR
// bc_kind1 := 10 ;
2829: LD_ADDR_OWVAR 44
2833: PUSH
2834: LD_INT 10
2836: ST_TO_ADDR
// bc_kind2 := 15 ;
2837: LD_ADDR_OWVAR 45
2841: PUSH
2842: LD_INT 15
2844: ST_TO_ADDR
// end else
2845: GO 2872
// begin bc_type := b_lab_half ;
2847: LD_ADDR_OWVAR 42
2851: PUSH
2852: LD_INT 7
2854: ST_TO_ADDR
// bc_kind1 := 10 ;
2855: LD_ADDR_OWVAR 44
2859: PUSH
2860: LD_INT 10
2862: ST_TO_ADDR
// bc_kind2 := - 1 ;
2863: LD_ADDR_OWVAR 45
2867: PUSH
2868: LD_INT 1
2870: NEG
2871: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2872: LD_OWVAR 42
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: IFFALSE 2890
// bc_type := b_factory ;
2882: LD_ADDR_OWVAR 42
2886: PUSH
2887: LD_INT 3
2889: ST_TO_ADDR
// if bc_type = b_depot then
2890: LD_OWVAR 42
2894: PUSH
2895: LD_INT 0
2897: EQUAL
2898: IFFALSE 2947
// begin bc_type := b_warehouse ;
2900: LD_ADDR_OWVAR 42
2904: PUSH
2905: LD_INT 1
2907: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2908: LD_ADDR_EXP 37
2912: PUSH
2913: LD_VAR 0 3
2917: PUSH
2918: LD_INT 2
2920: ARRAY
2921: PPUSH
2922: LD_VAR 0 3
2926: PUSH
2927: LD_INT 3
2929: ARRAY
2930: PPUSH
2931: LD_VAR 0 3
2935: PUSH
2936: LD_INT 4
2938: ARRAY
2939: PPUSH
2940: CALL_OW 47
2944: ST_TO_ADDR
// continue ;
2945: GO 2760
// end ; if bc_type = b_armoury then
2947: LD_OWVAR 42
2951: PUSH
2952: LD_INT 4
2954: EQUAL
2955: IFFALSE 2965
// bc_type = b_barracks ;
2957: LD_ADDR_OWVAR 42
2961: PUSH
2962: LD_INT 5
2964: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2965: LD_ADDR_VAR 0 4
2969: PUSH
2970: LD_VAR 0 3
2974: PUSH
2975: LD_INT 2
2977: ARRAY
2978: PPUSH
2979: LD_VAR 0 3
2983: PUSH
2984: LD_INT 3
2986: ARRAY
2987: PPUSH
2988: LD_VAR 0 3
2992: PUSH
2993: LD_INT 4
2995: ARRAY
2996: PPUSH
2997: CALL_OW 47
3001: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
3002: LD_VAR 0 4
3006: PPUSH
3007: CALL_OW 266
3011: PUSH
3012: LD_INT 32
3014: EQUAL
3015: IFFALSE 3035
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3017: LD_VAR 0 4
3021: PPUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_INT 7
3029: ARRAY
3030: PPUSH
3031: CALL_OW 431
// end ;
3035: GO 2760
3037: POP
3038: POP
// if not amDepot then
3039: LD_EXP 37
3043: NOT
3044: IFFALSE 3081
// begin bc_type := b_warehouse ;
3046: LD_ADDR_OWVAR 42
3050: PUSH
3051: LD_INT 1
3053: ST_TO_ADDR
// bc_level := 6 ;
3054: LD_ADDR_OWVAR 43
3058: PUSH
3059: LD_INT 6
3061: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
3062: LD_ADDR_EXP 37
3066: PUSH
3067: LD_INT 52
3069: PPUSH
3070: LD_INT 12
3072: PPUSH
3073: LD_INT 3
3075: PPUSH
3076: CALL_OW 47
3080: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
3081: LD_EXP 37
3085: PPUSH
3086: LD_STRING gamma
3088: PPUSH
3089: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
3093: LD_EXP 37
3097: PPUSH
3098: CALL_OW 274
3102: PPUSH
3103: LD_INT 1
3105: PPUSH
3106: LD_INT 500
3108: PUSH
3109: LD_INT 420
3111: PUSH
3112: LD_INT 350
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: LIST
3119: PUSH
3120: LD_OWVAR 67
3124: ARRAY
3125: PPUSH
3126: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3130: LD_EXP 37
3134: PPUSH
3135: CALL_OW 274
3139: PPUSH
3140: LD_INT 2
3142: PPUSH
3143: LD_INT 200
3145: PPUSH
3146: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3150: LD_INT 22
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 30
3162: PUSH
3163: LD_INT 3
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: PPUSH
3174: CALL_OW 69
3178: IFFALSE 3426
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3180: LD_ADDR_VAR 0 4
3184: PUSH
3185: LD_INT 22
3187: PUSH
3188: LD_INT 1
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: LD_INT 30
3197: PUSH
3198: LD_INT 3
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PPUSH
3209: CALL_OW 69
3213: PUSH
3214: LD_INT 1
3216: ARRAY
3217: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3218: LD_ADDR_VAR 0 6
3222: PUSH
3223: LD_VAR 0 4
3227: PPUSH
3228: CALL_OW 250
3232: PPUSH
3233: LD_VAR 0 4
3237: PPUSH
3238: CALL_OW 251
3242: PPUSH
3243: LD_VAR 0 4
3247: PPUSH
3248: CALL_OW 254
3252: PPUSH
3253: CALL 77823 0 3
3257: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3258: LD_ADDR_VAR 0 2
3262: PUSH
3263: LD_INT 19
3265: PUSH
3266: LD_INT 17
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3273: LD_STRING 06_remoteVehs_1
3275: PPUSH
3276: LD_INT 0
3278: PPUSH
3279: CALL_OW 30
3283: IFFALSE 3306
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3285: LD_ADDR_VAR 0 2
3289: PUSH
3290: LD_VAR 0 2
3294: PPUSH
3295: LD_INT 1
3297: PPUSH
3298: LD_INT 22
3300: PPUSH
3301: CALL_OW 2
3305: ST_TO_ADDR
// for i in tmp do
3306: LD_ADDR_VAR 0 3
3310: PUSH
3311: LD_VAR 0 6
3315: PUSH
3316: FOR_IN
3317: IFFALSE 3424
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3319: LD_VAR 0 3
3323: PUSH
3324: LD_INT 1
3326: ARRAY
3327: PPUSH
3328: LD_VAR 0 3
3332: PUSH
3333: LD_INT 2
3335: ARRAY
3336: PPUSH
3337: CALL_OW 428
3341: PUSH
3342: LD_INT 0
3344: EQUAL
3345: IFFALSE 3422
// begin bc_type := blist [ 1 ] ;
3347: LD_ADDR_OWVAR 42
3351: PUSH
3352: LD_VAR 0 2
3356: PUSH
3357: LD_INT 1
3359: ARRAY
3360: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3361: LD_VAR 0 3
3365: PUSH
3366: LD_INT 1
3368: ARRAY
3369: PPUSH
3370: LD_VAR 0 3
3374: PUSH
3375: LD_INT 2
3377: ARRAY
3378: PPUSH
3379: LD_VAR 0 3
3383: PUSH
3384: LD_INT 3
3386: ARRAY
3387: PPUSH
3388: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3392: LD_ADDR_VAR 0 2
3396: PUSH
3397: LD_VAR 0 2
3401: PPUSH
3402: LD_INT 1
3404: PPUSH
3405: CALL_OW 3
3409: ST_TO_ADDR
// if blist = 0 then
3410: LD_VAR 0 2
3414: PUSH
3415: LD_INT 0
3417: EQUAL
3418: IFFALSE 3422
// break ;
3420: GO 3424
// end ;
3422: GO 3316
3424: POP
3425: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3426: LD_STRING 06_remoteVehs_1
3428: PPUSH
3429: LD_INT 0
3431: PPUSH
3432: CALL_OW 30
3436: IFFALSE 3895
// begin bc_type = 36 ;
3438: LD_ADDR_OWVAR 42
3442: PUSH
3443: LD_INT 36
3445: ST_TO_ADDR
// bc_level = 4 ;
3446: LD_ADDR_OWVAR 43
3450: PUSH
3451: LD_INT 4
3453: ST_TO_ADDR
// if CanBeBuiltCost ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3454: LD_EXP 37
3458: PPUSH
3459: LD_INT 36
3461: PPUSH
3462: LD_INT 62
3464: PPUSH
3465: LD_INT 12
3467: PPUSH
3468: LD_INT 3
3470: PPUSH
3471: LD_INT 0
3473: PPUSH
3474: CALL 17040 0 6
3478: PUSH
3479: LD_INT 92
3481: PUSH
3482: LD_INT 62
3484: PUSH
3485: LD_INT 12
3487: PUSH
3488: LD_INT 3
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: PPUSH
3497: CALL_OW 69
3501: NOT
3502: AND
3503: IFFALSE 3520
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3505: LD_INT 62
3507: PPUSH
3508: LD_INT 12
3510: PPUSH
3511: LD_INT 3
3513: PPUSH
3514: CALL_OW 47
3518: GO 3691
// if CanBeBuiltCost ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3520: LD_EXP 37
3524: PPUSH
3525: LD_INT 36
3527: PPUSH
3528: LD_INT 37
3530: PPUSH
3531: LD_INT 18
3533: PPUSH
3534: LD_INT 2
3536: PPUSH
3537: LD_INT 0
3539: PPUSH
3540: CALL 17040 0 6
3544: PUSH
3545: LD_INT 92
3547: PUSH
3548: LD_INT 37
3550: PUSH
3551: LD_INT 18
3553: PUSH
3554: LD_INT 3
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: PPUSH
3563: CALL_OW 69
3567: NOT
3568: AND
3569: IFFALSE 3586
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3571: LD_INT 37
3573: PPUSH
3574: LD_INT 18
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 47
3584: GO 3691
// if CanBeBuiltCost ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3586: LD_EXP 37
3590: PPUSH
3591: LD_INT 36
3593: PPUSH
3594: LD_INT 66
3596: PPUSH
3597: LD_INT 14
3599: PPUSH
3600: LD_INT 4
3602: PPUSH
3603: LD_INT 0
3605: PPUSH
3606: CALL 17040 0 6
3610: PUSH
3611: LD_INT 92
3613: PUSH
3614: LD_INT 66
3616: PUSH
3617: LD_INT 14
3619: PUSH
3620: LD_INT 3
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PPUSH
3629: CALL_OW 69
3633: NOT
3634: AND
3635: IFFALSE 3652
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3637: LD_INT 66
3639: PPUSH
3640: LD_INT 14
3642: PPUSH
3643: LD_INT 4
3645: PPUSH
3646: CALL_OW 47
3650: GO 3691
// if CanBeBuiltCost ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3652: LD_EXP 37
3656: PPUSH
3657: LD_INT 36
3659: PPUSH
3660: LD_INT 74
3662: PPUSH
3663: LD_INT 26
3665: PPUSH
3666: LD_INT 4
3668: PPUSH
3669: LD_INT 0
3671: PPUSH
3672: CALL 17040 0 6
3676: IFFALSE 3691
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3678: LD_INT 74
3680: PPUSH
3681: LD_INT 26
3683: PPUSH
3684: LD_INT 4
3686: PPUSH
3687: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3691: LD_INT 22
3693: PUSH
3694: LD_INT 1
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: LD_INT 30
3703: PUSH
3704: LD_INT 36
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PPUSH
3715: CALL_OW 69
3719: NOT
3720: IFFALSE 3724
// exit ;
3722: GO 3895
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3724: LD_ADDR_VAR 0 3
3728: PUSH
3729: DOUBLE
3730: LD_INT 1
3732: DEC
3733: ST_TO_ADDR
3734: LD_INT 3
3736: PUSH
3737: LD_INT 2
3739: PUSH
3740: LD_INT 2
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: LIST
3747: PUSH
3748: LD_OWVAR 67
3752: ARRAY
3753: PUSH
3754: FOR_TO
3755: IFFALSE 3893
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3757: LD_ADDR_OWVAR 37
3761: PUSH
3762: LD_INT 3
3764: PUSH
3765: LD_INT 2
3767: PUSH
3768: LD_INT 3
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: PUSH
3775: LD_INT 1
3777: PPUSH
3778: LD_INT 2
3780: PPUSH
3781: CALL_OW 12
3785: ARRAY
3786: PUSH
3787: LD_INT 2
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: LIST
3794: PUSH
3795: LD_OWVAR 67
3799: ARRAY
3800: ST_TO_ADDR
// vc_engine = 1 ;
3801: LD_ADDR_OWVAR 39
3805: PUSH
3806: LD_INT 1
3808: ST_TO_ADDR
// vc_control = 2 ;
3809: LD_ADDR_OWVAR 38
3813: PUSH
3814: LD_INT 2
3816: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3817: LD_ADDR_OWVAR 40
3821: PUSH
3822: LD_INT 3
3824: PUSH
3825: LD_INT 4
3827: PUSH
3828: LD_INT 5
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 1
3838: PPUSH
3839: LD_INT 3
3841: PPUSH
3842: CALL_OW 12
3846: ARRAY
3847: ST_TO_ADDR
// veh = CreateVehicle ;
3848: LD_ADDR_VAR 0 5
3852: PUSH
3853: CALL_OW 45
3857: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3858: LD_VAR 0 5
3862: PPUSH
3863: LD_INT 4
3865: PPUSH
3866: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3870: LD_VAR 0 5
3874: PPUSH
3875: LD_INT 56
3877: PPUSH
3878: LD_INT 17
3880: PPUSH
3881: LD_INT 9
3883: PPUSH
3884: LD_INT 0
3886: PPUSH
3887: CALL_OW 50
// end ;
3891: GO 3754
3893: POP
3894: POP
// end ; end ;
3895: LD_VAR 0 1
3899: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3900: LD_INT 0
3902: PPUSH
3903: PPUSH
3904: PPUSH
3905: PPUSH
// uc_side = 1 ;
3906: LD_ADDR_OWVAR 20
3910: PUSH
3911: LD_INT 1
3913: ST_TO_ADDR
// uc_nation = 1 ;
3914: LD_ADDR_OWVAR 21
3918: PUSH
3919: LD_INT 1
3921: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 06c_ ) ;
3922: LD_ADDR_EXP 14
3926: PUSH
3927: LD_STRING Denis
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_STRING 06c_
3935: PPUSH
3936: CALL 44198 0 3
3940: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3941: LD_EXP 14
3945: PPUSH
3946: LD_INT 4
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 49
// Joan = PrepareUnit ( Joan , true , 06c_ ) ;
3956: LD_ADDR_EXP 15
3960: PUSH
3961: LD_STRING Joan
3963: PPUSH
3964: LD_INT 1
3966: PPUSH
3967: LD_STRING 06c_
3969: PPUSH
3970: CALL 44198 0 3
3974: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3975: LD_EXP 15
3979: PPUSH
3980: LD_INT 4
3982: PPUSH
3983: LD_INT 0
3985: PPUSH
3986: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3990: LD_STRING GladstoneIn07
3992: PPUSH
3993: LD_INT 0
3995: PPUSH
3996: CALL_OW 30
4000: NOT
4001: IFFALSE 4075
// begin Gladstone = PrepareUnit ( Gladstone , true , 06c_ ) ;
4003: LD_ADDR_EXP 8
4007: PUSH
4008: LD_STRING Gladstone
4010: PPUSH
4011: LD_INT 1
4013: PPUSH
4014: LD_STRING 06c_
4016: PPUSH
4017: CALL 44198 0 3
4021: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4022: LD_EXP 8
4026: NOT
4027: PUSH
4028: LD_STRING GladstoneStayInDelta
4030: PPUSH
4031: LD_INT 0
4033: PPUSH
4034: CALL_OW 30
4038: AND
4039: IFFALSE 4060
// Gladstone = PrepareUnit ( Gladstone , true , 05_ ) ;
4041: LD_ADDR_EXP 8
4045: PUSH
4046: LD_STRING Gladstone
4048: PPUSH
4049: LD_INT 1
4051: PPUSH
4052: LD_STRING 05_
4054: PPUSH
4055: CALL 44198 0 3
4059: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4060: LD_EXP 8
4064: PPUSH
4065: LD_INT 4
4067: PPUSH
4068: LD_INT 0
4070: PPUSH
4071: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4075: LD_STRING LisaStayInDelta
4077: PPUSH
4078: LD_INT 0
4080: PPUSH
4081: CALL_OW 30
4085: IFFALSE 4121
// begin Lisa = PrepareUnit ( Lisa , true , 05_ ) ;
4087: LD_ADDR_EXP 6
4091: PUSH
4092: LD_STRING Lisa
4094: PPUSH
4095: LD_INT 1
4097: PPUSH
4098: LD_STRING 05_
4100: PPUSH
4101: CALL 44198 0 3
4105: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4106: LD_EXP 6
4110: PPUSH
4111: LD_INT 4
4113: PPUSH
4114: LD_INT 0
4116: PPUSH
4117: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4121: LD_STRING BobbyStayInDelta
4123: PPUSH
4124: LD_INT 0
4126: PPUSH
4127: CALL_OW 30
4131: IFFALSE 4167
// begin Bobby = PrepareUnit ( Bobby , true , 05_ ) ;
4133: LD_ADDR_EXP 4
4137: PUSH
4138: LD_STRING Bobby
4140: PPUSH
4141: LD_INT 1
4143: PPUSH
4144: LD_STRING 05_
4146: PPUSH
4147: CALL 44198 0 3
4151: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4152: LD_EXP 4
4156: PPUSH
4157: LD_INT 4
4159: PPUSH
4160: LD_INT 0
4162: PPUSH
4163: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4167: LD_STRING CyrusStayInDelta
4169: PPUSH
4170: LD_INT 0
4172: PPUSH
4173: CALL_OW 30
4177: IFFALSE 4213
// begin Cyrus = PrepareUnit ( Cyrus , true , 05_ ) ;
4179: LD_ADDR_EXP 5
4183: PUSH
4184: LD_STRING Cyrus
4186: PPUSH
4187: LD_INT 1
4189: PPUSH
4190: LD_STRING 05_
4192: PPUSH
4193: CALL 44198 0 3
4197: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4198: LD_EXP 5
4202: PPUSH
4203: LD_INT 4
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4213: LD_STRING BrownStayInDelta
4215: PPUSH
4216: LD_INT 0
4218: PPUSH
4219: CALL_OW 30
4223: IFFALSE 4259
// begin Brown = PrepareUnit ( Brown , true , 05_ ) ;
4225: LD_ADDR_EXP 2
4229: PUSH
4230: LD_STRING Brown
4232: PPUSH
4233: LD_INT 1
4235: PPUSH
4236: LD_STRING 05_
4238: PPUSH
4239: CALL 44198 0 3
4243: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4244: LD_EXP 2
4248: PPUSH
4249: LD_INT 4
4251: PPUSH
4252: LD_INT 0
4254: PPUSH
4255: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4259: LD_STRING DonaldsonStayInDelta
4261: PPUSH
4262: LD_INT 0
4264: PPUSH
4265: CALL_OW 30
4269: IFFALSE 4305
// begin Donaldson = PrepareUnit ( Donaldson , true , 05_ ) ;
4271: LD_ADDR_EXP 3
4275: PUSH
4276: LD_STRING Donaldson
4278: PPUSH
4279: LD_INT 1
4281: PPUSH
4282: LD_STRING 05_
4284: PPUSH
4285: CALL 44198 0 3
4289: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4290: LD_EXP 3
4294: PPUSH
4295: LD_INT 4
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4305: LD_ADDR_VAR 0 4
4309: PUSH
4310: LD_STRING OthersStayInDelta
4312: PPUSH
4313: CALL_OW 31
4317: ST_TO_ADDR
// if other > 2 then
4318: LD_VAR 0 4
4322: PUSH
4323: LD_INT 2
4325: GREATER
4326: IFFALSE 4371
// begin for j = 1 to 2 do
4328: LD_ADDR_VAR 0 3
4332: PUSH
4333: DOUBLE
4334: LD_INT 1
4336: DEC
4337: ST_TO_ADDR
4338: LD_INT 2
4340: PUSH
4341: FOR_TO
4342: IFFALSE 4367
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4344: LD_VAR 0 4
4348: PUSH
4349: LD_VAR 0 3
4353: ARRAY
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_INT 0
4360: PPUSH
4361: CALL_OW 49
4365: GO 4341
4367: POP
4368: POP
// end else
4369: GO 4414
// begin for j = 1 to other do
4371: LD_ADDR_VAR 0 3
4375: PUSH
4376: DOUBLE
4377: LD_INT 1
4379: DEC
4380: ST_TO_ADDR
4381: LD_VAR 0 4
4385: PUSH
4386: FOR_TO
4387: IFFALSE 4412
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4389: LD_VAR 0 4
4393: PUSH
4394: LD_VAR 0 3
4398: ARRAY
4399: PPUSH
4400: LD_INT 4
4402: PPUSH
4403: LD_INT 0
4405: PPUSH
4406: CALL_OW 49
4410: GO 4386
4412: POP
4413: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4414: LD_ADDR_VAR 0 4
4418: PUSH
4419: LD_STRING 06_other_apemans
4421: PPUSH
4422: CALL_OW 31
4426: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4427: LD_VAR 0 4
4431: PUSH
4432: LD_INT 5
4434: PUSH
4435: LD_INT 4
4437: PUSH
4438: LD_INT 3
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: LD_OWVAR 67
4450: ARRAY
4451: GREATEREQUAL
4452: IFFALSE 4481
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4454: LD_ADDR_VAR 0 3
4458: PUSH
4459: LD_INT 5
4461: PUSH
4462: LD_INT 4
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: LD_OWVAR 67
4477: ARRAY
4478: ST_TO_ADDR
4479: GO 4491
// j := other ;
4481: LD_ADDR_VAR 0 3
4485: PUSH
4486: LD_VAR 0 4
4490: ST_TO_ADDR
// for i = 1 to j do
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: DOUBLE
4497: LD_INT 1
4499: DEC
4500: ST_TO_ADDR
4501: LD_VAR 0 3
4505: PUSH
4506: FOR_TO
4507: IFFALSE 4532
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4509: LD_VAR 0 4
4513: PUSH
4514: LD_VAR 0 2
4518: ARRAY
4519: PPUSH
4520: LD_INT 4
4522: PPUSH
4523: LD_INT 0
4525: PPUSH
4526: CALL_OW 49
4530: GO 4506
4532: POP
4533: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 22
4539: PUSH
4540: LD_INT 1
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PUSH
4547: LD_INT 21
4549: PUSH
4550: LD_INT 1
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PPUSH
4561: CALL_OW 70
4565: PPUSH
4566: LD_INT 53
4568: PPUSH
4569: LD_INT 19
4571: PPUSH
4572: CALL_OW 111
// firstAttack = 1 ;
4576: LD_ADDR_EXP 33
4580: PUSH
4581: LD_INT 1
4583: ST_TO_ADDR
// end ;
4584: LD_VAR 0 1
4588: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4589: LD_INT 0
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
4596: PPUSH
4597: PPUSH
4598: PPUSH
4599: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4600: LD_ADDR_VAR 0 8
4604: PUSH
4605: LD_STRING 07_vehicles
4607: PPUSH
4608: EMPTY
4609: PPUSH
4610: CALL_OW 30
4614: ST_TO_ADDR
// macmilan_squad := [ ] ;
4615: LD_ADDR_EXP 42
4619: PUSH
4620: EMPTY
4621: ST_TO_ADDR
// tmp_vehs := [ ] ;
4622: LD_ADDR_VAR 0 7
4626: PUSH
4627: EMPTY
4628: ST_TO_ADDR
// uc_side := 1 ;
4629: LD_ADDR_OWVAR 20
4633: PUSH
4634: LD_INT 1
4636: ST_TO_ADDR
// uc_nation := 1 ;
4637: LD_ADDR_OWVAR 21
4641: PUSH
4642: LD_INT 1
4644: ST_TO_ADDR
// if vehicles then
4645: LD_VAR 0 8
4649: IFFALSE 4808
// begin k := 1 ;
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: LD_INT 1
4658: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4659: LD_ADDR_VAR 0 2
4663: PUSH
4664: DOUBLE
4665: LD_INT 1
4667: DEC
4668: ST_TO_ADDR
4669: LD_VAR 0 8
4673: PUSH
4674: LD_INT 4
4676: DIV
4677: PUSH
4678: FOR_TO
4679: IFFALSE 4806
// begin vc_chassis = vehicles [ k ] ;
4681: LD_ADDR_OWVAR 37
4685: PUSH
4686: LD_VAR 0 8
4690: PUSH
4691: LD_VAR 0 3
4695: ARRAY
4696: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4697: LD_ADDR_OWVAR 39
4701: PUSH
4702: LD_VAR 0 8
4706: PUSH
4707: LD_VAR 0 3
4711: PUSH
4712: LD_INT 1
4714: PLUS
4715: ARRAY
4716: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4717: LD_ADDR_OWVAR 38
4721: PUSH
4722: LD_VAR 0 8
4726: PUSH
4727: LD_VAR 0 3
4731: PUSH
4732: LD_INT 2
4734: PLUS
4735: ARRAY
4736: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4737: LD_ADDR_OWVAR 40
4741: PUSH
4742: LD_VAR 0 8
4746: PUSH
4747: LD_VAR 0 3
4751: PUSH
4752: LD_INT 3
4754: PLUS
4755: ARRAY
4756: ST_TO_ADDR
// k := k + 4 ;
4757: LD_ADDR_VAR 0 3
4761: PUSH
4762: LD_VAR 0 3
4766: PUSH
4767: LD_INT 4
4769: PLUS
4770: ST_TO_ADDR
// veh := CreateVehicle ;
4771: LD_ADDR_VAR 0 9
4775: PUSH
4776: CALL_OW 45
4780: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4781: LD_ADDR_VAR 0 7
4785: PUSH
4786: LD_VAR 0 7
4790: PPUSH
4791: LD_INT 1
4793: PPUSH
4794: LD_VAR 0 9
4798: PPUSH
4799: CALL_OW 2
4803: ST_TO_ADDR
// end ;
4804: GO 4678
4806: POP
4807: POP
// end ; JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
4808: LD_ADDR_EXP 1
4812: PUSH
4813: LD_STRING JMM
4815: PPUSH
4816: LD_INT 1
4818: PPUSH
4819: LD_EXP 44
4823: PPUSH
4824: CALL 44198 0 3
4828: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4829: LD_EXP 12
4833: PUSH
4834: LD_INT 1
4836: EQUAL
4837: PUSH
4838: LD_EXP 12
4842: PUSH
4843: LD_INT 3
4845: EQUAL
4846: OR
4847: PUSH
4848: LD_EXP 2
4852: NOT
4853: AND
4854: IFFALSE 4906
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
4856: LD_ADDR_EXP 2
4860: PUSH
4861: LD_STRING Brown
4863: PPUSH
4864: LD_INT 1
4866: PPUSH
4867: LD_EXP 44
4871: PPUSH
4872: CALL 44198 0 3
4876: ST_TO_ADDR
// if Brown then
4877: LD_EXP 2
4881: IFFALSE 4906
// tmp := Insert ( tmp , 1 , Brown ) ;
4883: LD_ADDR_VAR 0 6
4887: PUSH
4888: LD_VAR 0 6
4892: PPUSH
4893: LD_INT 1
4895: PPUSH
4896: LD_EXP 2
4900: PPUSH
4901: CALL_OW 2
4905: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4906: LD_EXP 12
4910: PUSH
4911: LD_INT 2
4913: EQUAL
4914: PUSH
4915: LD_EXP 12
4919: PUSH
4920: LD_INT 3
4922: EQUAL
4923: OR
4924: PUSH
4925: LD_EXP 3
4929: NOT
4930: AND
4931: IFFALSE 4983
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
4933: LD_ADDR_EXP 3
4937: PUSH
4938: LD_STRING Donaldson
4940: PPUSH
4941: LD_INT 1
4943: PPUSH
4944: LD_EXP 44
4948: PPUSH
4949: CALL 44198 0 3
4953: ST_TO_ADDR
// if Donaldson then
4954: LD_EXP 3
4958: IFFALSE 4983
// tmp := Insert ( tmp , 1 , Donaldson ) ;
4960: LD_ADDR_VAR 0 6
4964: PUSH
4965: LD_VAR 0 6
4969: PPUSH
4970: LD_INT 1
4972: PPUSH
4973: LD_EXP 3
4977: PPUSH
4978: CALL_OW 2
4982: ST_TO_ADDR
// end ; if not Bobby then
4983: LD_EXP 4
4987: NOT
4988: IFFALSE 5040
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
4990: LD_ADDR_EXP 4
4994: PUSH
4995: LD_STRING Bobby
4997: PPUSH
4998: LD_INT 1
5000: PPUSH
5001: LD_EXP 44
5005: PPUSH
5006: CALL 44198 0 3
5010: ST_TO_ADDR
// if Bobby then
5011: LD_EXP 4
5015: IFFALSE 5040
// tmp := Insert ( tmp , 1 , Bobby ) ;
5017: LD_ADDR_VAR 0 6
5021: PUSH
5022: LD_VAR 0 6
5026: PPUSH
5027: LD_INT 1
5029: PPUSH
5030: LD_EXP 4
5034: PPUSH
5035: CALL_OW 2
5039: ST_TO_ADDR
// end ; if not Cyrus then
5040: LD_EXP 5
5044: NOT
5045: IFFALSE 5097
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
5047: LD_ADDR_EXP 5
5051: PUSH
5052: LD_STRING Cyrus
5054: PPUSH
5055: LD_INT 1
5057: PPUSH
5058: LD_EXP 44
5062: PPUSH
5063: CALL 44198 0 3
5067: ST_TO_ADDR
// if Cyrus then
5068: LD_EXP 5
5072: IFFALSE 5097
// tmp := Insert ( tmp , 1 , Cyrus ) ;
5074: LD_ADDR_VAR 0 6
5078: PUSH
5079: LD_VAR 0 6
5083: PPUSH
5084: LD_INT 1
5086: PPUSH
5087: LD_EXP 5
5091: PPUSH
5092: CALL_OW 2
5096: ST_TO_ADDR
// end ; if not Lisa then
5097: LD_EXP 6
5101: NOT
5102: IFFALSE 5154
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
5104: LD_ADDR_EXP 6
5108: PUSH
5109: LD_STRING Lisa
5111: PPUSH
5112: LD_INT 1
5114: PPUSH
5115: LD_EXP 44
5119: PPUSH
5120: CALL 44198 0 3
5124: ST_TO_ADDR
// if Lisa then
5125: LD_EXP 6
5129: IFFALSE 5154
// tmp := Insert ( tmp , 1 , Lisa ) ;
5131: LD_ADDR_VAR 0 6
5135: PUSH
5136: LD_VAR 0 6
5140: PPUSH
5141: LD_INT 1
5143: PPUSH
5144: LD_EXP 6
5148: PPUSH
5149: CALL_OW 2
5153: ST_TO_ADDR
// end ; if not Frank then
5154: LD_EXP 7
5158: NOT
5159: IFFALSE 5211
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
5161: LD_ADDR_EXP 7
5165: PUSH
5166: LD_STRING Frank
5168: PPUSH
5169: LD_INT 1
5171: PPUSH
5172: LD_EXP 44
5176: PPUSH
5177: CALL 44198 0 3
5181: ST_TO_ADDR
// if Frank then
5182: LD_EXP 7
5186: IFFALSE 5211
// tmp := Insert ( tmp , 1 , Frank ) ;
5188: LD_ADDR_VAR 0 6
5192: PUSH
5193: LD_VAR 0 6
5197: PPUSH
5198: LD_INT 1
5200: PPUSH
5201: LD_EXP 7
5205: PPUSH
5206: CALL_OW 2
5210: ST_TO_ADDR
// end ; if not Kikuchi then
5211: LD_EXP 9
5215: NOT
5216: IFFALSE 5268
// begin Kikuchi = PrepareUnit ( Kikuchi , true , mission_prefix_prev ) ;
5218: LD_ADDR_EXP 9
5222: PUSH
5223: LD_STRING Kikuchi
5225: PPUSH
5226: LD_INT 1
5228: PPUSH
5229: LD_EXP 44
5233: PPUSH
5234: CALL 44198 0 3
5238: ST_TO_ADDR
// if Kikuchi then
5239: LD_EXP 9
5243: IFFALSE 5268
// tmp := Insert ( tmp , 1 , Kikuchi ) ;
5245: LD_ADDR_VAR 0 6
5249: PUSH
5250: LD_VAR 0 6
5254: PPUSH
5255: LD_INT 1
5257: PPUSH
5258: LD_EXP 9
5262: PPUSH
5263: CALL_OW 2
5267: ST_TO_ADDR
// end ; if not Gladstone then
5268: LD_EXP 8
5272: NOT
5273: IFFALSE 5325
// begin Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
5275: LD_ADDR_EXP 8
5279: PUSH
5280: LD_STRING Gladstone
5282: PPUSH
5283: LD_INT 1
5285: PPUSH
5286: LD_EXP 44
5290: PPUSH
5291: CALL 44198 0 3
5295: ST_TO_ADDR
// if Gladstone then
5296: LD_EXP 8
5300: IFFALSE 5325
// tmp := Insert ( tmp , 1 , Gladstone ) ;
5302: LD_ADDR_VAR 0 6
5306: PUSH
5307: LD_VAR 0 6
5311: PPUSH
5312: LD_INT 1
5314: PPUSH
5315: LD_EXP 8
5319: PPUSH
5320: CALL_OW 2
5324: ST_TO_ADDR
// end ; if not Khatam then
5325: LD_EXP 10
5329: NOT
5330: IFFALSE 5382
// begin Khatam = PrepareUnit ( Khatam , true , mission_prefix_prev ) ;
5332: LD_ADDR_EXP 10
5336: PUSH
5337: LD_STRING Khatam
5339: PPUSH
5340: LD_INT 1
5342: PPUSH
5343: LD_EXP 44
5347: PPUSH
5348: CALL 44198 0 3
5352: ST_TO_ADDR
// if Khatam then
5353: LD_EXP 10
5357: IFFALSE 5382
// tmp := Insert ( tmp , 1 , Khatam ) ;
5359: LD_ADDR_VAR 0 6
5363: PUSH
5364: LD_VAR 0 6
5368: PPUSH
5369: LD_INT 1
5371: PPUSH
5372: LD_EXP 10
5376: PPUSH
5377: CALL_OW 2
5381: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5382: LD_ADDR_VAR 0 5
5386: PUSH
5387: LD_STRING 07c_others
5389: PPUSH
5390: CALL_OW 31
5394: ST_TO_ADDR
// macmilan_squad := others ;
5395: LD_ADDR_EXP 42
5399: PUSH
5400: LD_VAR 0 5
5404: ST_TO_ADDR
// if others then
5405: LD_VAR 0 5
5409: IFFALSE 5497
// for i in others do
5411: LD_ADDR_VAR 0 2
5415: PUSH
5416: LD_VAR 0 5
5420: PUSH
5421: FOR_IN
5422: IFFALSE 5495
// if GetClass ( i ) = 3 then
5424: LD_VAR 0 2
5428: PPUSH
5429: CALL_OW 257
5433: PUSH
5434: LD_INT 3
5436: EQUAL
5437: IFFALSE 5464
// tmp := Insert ( tmp , 1 , i ) else
5439: LD_ADDR_VAR 0 6
5443: PUSH
5444: LD_VAR 0 6
5448: PPUSH
5449: LD_INT 1
5451: PPUSH
5452: LD_VAR 0 2
5456: PPUSH
5457: CALL_OW 2
5461: ST_TO_ADDR
5462: GO 5493
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5464: LD_ADDR_VAR 0 6
5468: PUSH
5469: LD_VAR 0 6
5473: PPUSH
5474: LD_VAR 0 6
5478: PUSH
5479: LD_INT 1
5481: PLUS
5482: PPUSH
5483: LD_VAR 0 2
5487: PPUSH
5488: CALL_OW 2
5492: ST_TO_ADDR
5493: GO 5421
5495: POP
5496: POP
// if FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) then
5497: LD_INT 4
5499: PPUSH
5500: LD_INT 21
5502: PUSH
5503: LD_INT 3
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: PPUSH
5510: CALL_OW 70
5514: IFFALSE 5555
// for i in FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) do
5516: LD_ADDR_VAR 0 2
5520: PUSH
5521: LD_INT 4
5523: PPUSH
5524: LD_INT 21
5526: PUSH
5527: LD_INT 3
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PPUSH
5534: CALL_OW 70
5538: PUSH
5539: FOR_IN
5540: IFFALSE 5553
// RemoveUnit ( i ) ;
5542: LD_VAR 0 2
5546: PPUSH
5547: CALL_OW 64
5551: GO 5539
5553: POP
5554: POP
// wait ( 0 0$1 ) ;
5555: LD_INT 35
5557: PPUSH
5558: CALL_OW 67
// for i in tmp do
5562: LD_ADDR_VAR 0 2
5566: PUSH
5567: LD_VAR 0 6
5571: PUSH
5572: FOR_IN
5573: IFFALSE 5743
// begin SetDir ( i , 3 ) ;
5575: LD_VAR 0 2
5579: PPUSH
5580: LD_INT 3
5582: PPUSH
5583: CALL_OW 233
// if tmp_vehs then
5587: LD_VAR 0 7
5591: IFFALSE 5669
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5593: LD_VAR 0 7
5597: PUSH
5598: LD_INT 1
5600: ARRAY
5601: PPUSH
5602: LD_INT 3
5604: PPUSH
5605: CALL_OW 233
// PlaceUnitXY ( tmp_vehs [ 1 ] , 78 , 5 , false ) ;
5609: LD_VAR 0 7
5613: PUSH
5614: LD_INT 1
5616: ARRAY
5617: PPUSH
5618: LD_INT 78
5620: PPUSH
5621: LD_INT 5
5623: PPUSH
5624: LD_INT 0
5626: PPUSH
5627: CALL_OW 48
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5631: LD_VAR 0 2
5635: PPUSH
5636: LD_VAR 0 7
5640: PUSH
5641: LD_INT 1
5643: ARRAY
5644: PPUSH
5645: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5649: LD_ADDR_VAR 0 7
5653: PUSH
5654: LD_VAR 0 7
5658: PPUSH
5659: LD_INT 1
5661: PPUSH
5662: CALL_OW 3
5666: ST_TO_ADDR
// end else
5667: GO 5684
// PlaceUnitArea ( i , GammaSupport , false ) ;
5669: LD_VAR 0 2
5673: PPUSH
5674: LD_INT 4
5676: PPUSH
5677: LD_INT 0
5679: PPUSH
5680: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5684: LD_VAR 0 2
5688: PPUSH
5689: LD_INT 77
5691: PPUSH
5692: LD_INT 16
5694: PPUSH
5695: CALL_OW 111
// AddComMoveXY ( i , 65 , 24 ) ;
5699: LD_VAR 0 2
5703: PPUSH
5704: LD_INT 65
5706: PPUSH
5707: LD_INT 24
5709: PPUSH
5710: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5714: LD_INT 35
5716: PPUSH
5717: CALL_OW 67
// until not FilterUnitsInArea ( GammaSupport , [ f_side , 1 ] ) ;
5721: LD_INT 4
5723: PPUSH
5724: LD_INT 22
5726: PUSH
5727: LD_INT 1
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: PPUSH
5734: CALL_OW 70
5738: NOT
5739: IFFALSE 5714
// end ;
5741: GO 5572
5743: POP
5744: POP
// PlaceUnitArea ( JMM , GammaSupport , false ) ;
5745: LD_EXP 1
5749: PPUSH
5750: LD_INT 4
5752: PPUSH
5753: LD_INT 0
5755: PPUSH
5756: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5760: LD_EXP 1
5764: PPUSH
5765: LD_INT 77
5767: PPUSH
5768: LD_INT 16
5770: PPUSH
5771: CALL_OW 111
// end ;
5775: LD_VAR 0 1
5779: RET
// export function PrepareSikorsky ; begin
5780: LD_INT 0
5782: PPUSH
// uc_side = 4 ;
5783: LD_ADDR_OWVAR 20
5787: PUSH
5788: LD_INT 4
5790: ST_TO_ADDR
// uc_nation = 1 ;
5791: LD_ADDR_OWVAR 21
5795: PUSH
5796: LD_INT 1
5798: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ,  ) ;
5799: LD_ADDR_EXP 16
5803: PUSH
5804: LD_STRING Sikorski
5806: PPUSH
5807: LD_INT 0
5809: PPUSH
5810: LD_STRING 
5812: PPUSH
5813: CALL 44198 0 3
5817: ST_TO_ADDR
// vc_engine = 1 ;
5818: LD_ADDR_OWVAR 39
5822: PUSH
5823: LD_INT 1
5825: ST_TO_ADDR
// vc_control = 1 ;
5826: LD_ADDR_OWVAR 38
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5834: LD_ADDR_OWVAR 40
5838: PUSH
5839: LD_INT 5
5841: PUSH
5842: LD_INT 3
5844: PUSH
5845: LD_INT 4
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: LIST
5852: PUSH
5853: LD_OWVAR 67
5857: ARRAY
5858: ST_TO_ADDR
// vc_chassis = 4 ;
5859: LD_ADDR_OWVAR 37
5863: PUSH
5864: LD_INT 4
5866: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5867: LD_ADDR_EXP 17
5871: PUSH
5872: CALL_OW 45
5876: ST_TO_ADDR
// SetDir ( SikorskyTank , 3 ) ;
5877: LD_EXP 17
5881: PPUSH
5882: LD_INT 3
5884: PPUSH
5885: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
5889: LD_INT 35
5891: PPUSH
5892: CALL_OW 67
// PlaceUnitXY ( SikorskyTank , 18 , 5 , false ) ;
5896: LD_EXP 17
5900: PPUSH
5901: LD_INT 18
5903: PPUSH
5904: LD_INT 5
5906: PPUSH
5907: LD_INT 0
5909: PPUSH
5910: CALL_OW 48
// until IsPlaced ( SikorskyTank ) ;
5914: LD_EXP 17
5918: PPUSH
5919: CALL_OW 305
5923: IFFALSE 5889
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5925: LD_EXP 16
5929: PPUSH
5930: LD_EXP 17
5934: PPUSH
5935: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5939: LD_EXP 17
5943: PPUSH
5944: LD_INT 5
5946: PPUSH
5947: CALL_OW 113
// end ;
5951: LD_VAR 0 1
5955: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5956: LD_INT 0
5958: PPUSH
5959: PPUSH
5960: PPUSH
5961: PPUSH
// InitHc ;
5962: CALL_OW 19
// for i = 1 to [ 5 , 4 , 4 ] [ Difficulty ] do
5966: LD_ADDR_VAR 0 2
5970: PUSH
5971: DOUBLE
5972: LD_INT 1
5974: DEC
5975: ST_TO_ADDR
5976: LD_INT 5
5978: PUSH
5979: LD_INT 4
5981: PUSH
5982: LD_INT 4
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: LIST
5989: PUSH
5990: LD_OWVAR 67
5994: ARRAY
5995: PUSH
5996: FOR_TO
5997: IFFALSE 6113
// begin uc_side = 4 ;
5999: LD_ADDR_OWVAR 20
6003: PUSH
6004: LD_INT 4
6006: ST_TO_ADDR
// uc_nation = 1 ;
6007: LD_ADDR_OWVAR 21
6011: PUSH
6012: LD_INT 1
6014: ST_TO_ADDR
// hc_name =  ;
6015: LD_ADDR_OWVAR 26
6019: PUSH
6020: LD_STRING 
6022: ST_TO_ADDR
// hc_gallery =  ;
6023: LD_ADDR_OWVAR 33
6027: PUSH
6028: LD_STRING 
6030: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
6031: LD_INT 0
6033: PPUSH
6034: LD_INT 1
6036: PPUSH
6037: LD_INT 5
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: CALL_OW 12
6047: PPUSH
6048: CALL_OW 380
// un = CreateHuman ;
6052: LD_ADDR_VAR 0 3
6056: PUSH
6057: CALL_OW 44
6061: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6062: LD_VAR 0 3
6066: PPUSH
6067: LD_INT 3
6069: PPUSH
6070: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6074: LD_VAR 0 3
6078: PPUSH
6079: LD_INT 9
6081: PPUSH
6082: LD_INT 0
6084: PPUSH
6085: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6089: LD_VAR 0 3
6093: PPUSH
6094: LD_INT 53
6096: PPUSH
6097: LD_INT 23
6099: PPUSH
6100: CALL_OW 111
// wait ( 0 0$1 ) ;
6104: LD_INT 35
6106: PPUSH
6107: CALL_OW 67
// end ;
6111: GO 5996
6113: POP
6114: POP
// for i = 1 to 2 do
6115: LD_ADDR_VAR 0 2
6119: PUSH
6120: DOUBLE
6121: LD_INT 1
6123: DEC
6124: ST_TO_ADDR
6125: LD_INT 2
6127: PUSH
6128: FOR_TO
6129: IFFALSE 6245
// begin uc_side = 4 ;
6131: LD_ADDR_OWVAR 20
6135: PUSH
6136: LD_INT 4
6138: ST_TO_ADDR
// uc_nation = 1 ;
6139: LD_ADDR_OWVAR 21
6143: PUSH
6144: LD_INT 1
6146: ST_TO_ADDR
// hc_name =  ;
6147: LD_ADDR_OWVAR 26
6151: PUSH
6152: LD_STRING 
6154: ST_TO_ADDR
// hc_gallery =  ;
6155: LD_ADDR_OWVAR 33
6159: PUSH
6160: LD_STRING 
6162: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
6163: LD_INT 0
6165: PPUSH
6166: LD_INT 4
6168: PPUSH
6169: LD_INT 5
6171: PPUSH
6172: LD_INT 8
6174: PPUSH
6175: CALL_OW 12
6179: PPUSH
6180: CALL_OW 380
// un = CreateHuman ;
6184: LD_ADDR_VAR 0 3
6188: PUSH
6189: CALL_OW 44
6193: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6194: LD_VAR 0 3
6198: PPUSH
6199: LD_INT 3
6201: PPUSH
6202: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6206: LD_VAR 0 3
6210: PPUSH
6211: LD_INT 9
6213: PPUSH
6214: LD_INT 0
6216: PPUSH
6217: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6221: LD_VAR 0 3
6225: PPUSH
6226: LD_INT 53
6228: PPUSH
6229: LD_INT 23
6231: PPUSH
6232: CALL_OW 111
// wait ( 0 0$1 ) ;
6236: LD_INT 35
6238: PPUSH
6239: CALL_OW 67
// end ;
6243: GO 6128
6245: POP
6246: POP
// for i = 1 to [ 5 , 5 , 4 ] [ Difficulty ] do
6247: LD_ADDR_VAR 0 2
6251: PUSH
6252: DOUBLE
6253: LD_INT 1
6255: DEC
6256: ST_TO_ADDR
6257: LD_INT 5
6259: PUSH
6260: LD_INT 5
6262: PUSH
6263: LD_INT 4
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: LIST
6270: PUSH
6271: LD_OWVAR 67
6275: ARRAY
6276: PUSH
6277: FOR_TO
6278: IFFALSE 6512
// begin uc_side = 4 ;
6280: LD_ADDR_OWVAR 20
6284: PUSH
6285: LD_INT 4
6287: ST_TO_ADDR
// uc_nation = 1 ;
6288: LD_ADDR_OWVAR 21
6292: PUSH
6293: LD_INT 1
6295: ST_TO_ADDR
// vc_engine = 1 ;
6296: LD_ADDR_OWVAR 39
6300: PUSH
6301: LD_INT 1
6303: ST_TO_ADDR
// vc_control = 1 ;
6304: LD_ADDR_OWVAR 38
6308: PUSH
6309: LD_INT 1
6311: ST_TO_ADDR
// vc_weapon = [ 7 , 4 , 5 , 6 ] [ i mod 4 + 1 ] ;
6312: LD_ADDR_OWVAR 40
6316: PUSH
6317: LD_INT 7
6319: PUSH
6320: LD_INT 4
6322: PUSH
6323: LD_INT 5
6325: PUSH
6326: LD_INT 6
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: PUSH
6335: LD_VAR 0 2
6339: PUSH
6340: LD_INT 4
6342: MOD
6343: PUSH
6344: LD_INT 1
6346: PLUS
6347: ARRAY
6348: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6349: LD_ADDR_OWVAR 37
6353: PUSH
6354: LD_INT 3
6356: PUSH
6357: LD_INT 3
6359: PUSH
6360: LD_INT 4
6362: PUSH
6363: LD_INT 4
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: PUSH
6372: LD_VAR 0 2
6376: PUSH
6377: LD_INT 4
6379: MOD
6380: PUSH
6381: LD_INT 1
6383: PLUS
6384: ARRAY
6385: ST_TO_ADDR
// veh = CreateVehicle ;
6386: LD_ADDR_VAR 0 4
6390: PUSH
6391: CALL_OW 45
6395: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6396: LD_VAR 0 4
6400: PPUSH
6401: LD_INT 3
6403: PPUSH
6404: CALL_OW 233
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6408: LD_VAR 0 4
6412: PPUSH
6413: LD_INT 9
6415: PPUSH
6416: LD_INT 0
6418: PPUSH
6419: CALL_OW 49
// InitHc ;
6423: CALL_OW 19
// hc_name =  ;
6427: LD_ADDR_OWVAR 26
6431: PUSH
6432: LD_STRING 
6434: ST_TO_ADDR
// hc_gallery =  ;
6435: LD_ADDR_OWVAR 33
6439: PUSH
6440: LD_STRING 
6442: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6443: LD_INT 0
6445: PPUSH
6446: LD_INT 3
6448: PPUSH
6449: LD_INT 5
6451: PPUSH
6452: LD_INT 8
6454: PPUSH
6455: CALL_OW 12
6459: PPUSH
6460: CALL_OW 380
// un = CreateHuman ;
6464: LD_ADDR_VAR 0 3
6468: PUSH
6469: CALL_OW 44
6473: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6474: LD_VAR 0 3
6478: PPUSH
6479: LD_VAR 0 4
6483: PPUSH
6484: CALL_OW 52
// ComMoveXY ( un , 53 , 23 ) ;
6488: LD_VAR 0 3
6492: PPUSH
6493: LD_INT 53
6495: PPUSH
6496: LD_INT 23
6498: PPUSH
6499: CALL_OW 111
// wait ( 0 0$5 ) ;
6503: LD_INT 175
6505: PPUSH
6506: CALL_OW 67
// end ;
6510: GO 6277
6512: POP
6513: POP
// end ; end_of_file
6514: LD_VAR 0 1
6518: RET
// export function PrepareRussianCommander ; begin
6519: LD_INT 0
6521: PPUSH
// uc_side = 3 ;
6522: LD_ADDR_OWVAR 20
6526: PUSH
6527: LD_INT 3
6529: ST_TO_ADDR
// uc_nation = 3 ;
6530: LD_ADDR_OWVAR 21
6534: PUSH
6535: LD_INT 3
6537: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6538: LD_ADDR_EXP 24
6542: PUSH
6543: LD_STRING Borodin
6545: PPUSH
6546: CALL_OW 25
6550: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6551: LD_EXP 24
6555: PPUSH
6556: LD_INT 25
6558: PPUSH
6559: LD_INT 0
6561: PPUSH
6562: CALL_OW 49
// end ;
6566: LD_VAR 0 1
6570: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6571: LD_INT 0
6573: PPUSH
6574: PPUSH
6575: PPUSH
6576: PPUSH
// for i = 1 to 10 do
6577: LD_ADDR_VAR 0 2
6581: PUSH
6582: DOUBLE
6583: LD_INT 1
6585: DEC
6586: ST_TO_ADDR
6587: LD_INT 10
6589: PUSH
6590: FOR_TO
6591: IFFALSE 6665
// begin uc_side = 6 ;
6593: LD_ADDR_OWVAR 20
6597: PUSH
6598: LD_INT 6
6600: ST_TO_ADDR
// uc_nation = 3 ;
6601: LD_ADDR_OWVAR 21
6605: PUSH
6606: LD_INT 3
6608: ST_TO_ADDR
// hc_gallery =  ;
6609: LD_ADDR_OWVAR 33
6613: PUSH
6614: LD_STRING 
6616: ST_TO_ADDR
// hc_name =  ;
6617: LD_ADDR_OWVAR 26
6621: PUSH
6622: LD_STRING 
6624: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6625: LD_INT 0
6627: PPUSH
6628: LD_INT 1
6630: PPUSH
6631: LD_INT 3
6633: PPUSH
6634: CALL_OW 380
// un = CreateHuman ;
6638: LD_ADDR_VAR 0 3
6642: PUSH
6643: CALL_OW 44
6647: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6648: LD_VAR 0 3
6652: PPUSH
6653: LD_INT 1
6655: PPUSH
6656: LD_INT 0
6658: PPUSH
6659: CALL_OW 49
// end ;
6663: GO 6590
6665: POP
6666: POP
// for i = 1 to 3 do
6667: LD_ADDR_VAR 0 2
6671: PUSH
6672: DOUBLE
6673: LD_INT 1
6675: DEC
6676: ST_TO_ADDR
6677: LD_INT 3
6679: PUSH
6680: FOR_TO
6681: IFFALSE 6830
// begin uc_side = 6 ;
6683: LD_ADDR_OWVAR 20
6687: PUSH
6688: LD_INT 6
6690: ST_TO_ADDR
// uc_nation = 3 ;
6691: LD_ADDR_OWVAR 21
6695: PUSH
6696: LD_INT 3
6698: ST_TO_ADDR
// vc_engine = 1 ;
6699: LD_ADDR_OWVAR 39
6703: PUSH
6704: LD_INT 1
6706: ST_TO_ADDR
// vc_control = 1 ;
6707: LD_ADDR_OWVAR 38
6711: PUSH
6712: LD_INT 1
6714: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6715: LD_ADDR_OWVAR 40
6719: PUSH
6720: LD_INT 43
6722: PUSH
6723: LD_INT 44
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: LD_INT 1
6732: PPUSH
6733: LD_INT 2
6735: PPUSH
6736: CALL_OW 12
6740: ARRAY
6741: ST_TO_ADDR
// vc_chassis = 22 ;
6742: LD_ADDR_OWVAR 37
6746: PUSH
6747: LD_INT 22
6749: ST_TO_ADDR
// veh = CreateVehicle ;
6750: LD_ADDR_VAR 0 4
6754: PUSH
6755: CALL_OW 45
6759: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6760: LD_VAR 0 4
6764: PPUSH
6765: LD_INT 2
6767: PPUSH
6768: LD_INT 0
6770: PPUSH
6771: CALL_OW 49
// hc_gallery =  ;
6775: LD_ADDR_OWVAR 33
6779: PUSH
6780: LD_STRING 
6782: ST_TO_ADDR
// hc_name =  ;
6783: LD_ADDR_OWVAR 26
6787: PUSH
6788: LD_STRING 
6790: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6791: LD_INT 0
6793: PPUSH
6794: LD_INT 3
6796: PPUSH
6797: LD_INT 4
6799: PPUSH
6800: CALL_OW 380
// un = CreateHuman ;
6804: LD_ADDR_VAR 0 3
6808: PUSH
6809: CALL_OW 44
6813: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6814: LD_VAR 0 3
6818: PPUSH
6819: LD_VAR 0 4
6823: PPUSH
6824: CALL_OW 52
// end ;
6828: GO 6680
6830: POP
6831: POP
// end ;
6832: LD_VAR 0 1
6836: RET
// export function PrepareRussians ; var i , un ; begin
6837: LD_INT 0
6839: PPUSH
6840: PPUSH
6841: PPUSH
// for i = 1 to 8 do
6842: LD_ADDR_VAR 0 2
6846: PUSH
6847: DOUBLE
6848: LD_INT 1
6850: DEC
6851: ST_TO_ADDR
6852: LD_INT 8
6854: PUSH
6855: FOR_TO
6856: IFFALSE 6942
// begin uc_side = 3 ;
6858: LD_ADDR_OWVAR 20
6862: PUSH
6863: LD_INT 3
6865: ST_TO_ADDR
// uc_nation = 3 ;
6866: LD_ADDR_OWVAR 21
6870: PUSH
6871: LD_INT 3
6873: ST_TO_ADDR
// hc_gallery =  ;
6874: LD_ADDR_OWVAR 33
6878: PUSH
6879: LD_STRING 
6881: ST_TO_ADDR
// hc_name =  ;
6882: LD_ADDR_OWVAR 26
6886: PUSH
6887: LD_STRING 
6889: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6890: LD_INT 0
6892: PPUSH
6893: LD_INT 1
6895: PPUSH
6896: LD_EXP 25
6900: PPUSH
6901: LD_EXP 26
6905: PPUSH
6906: CALL_OW 12
6910: PPUSH
6911: CALL_OW 380
// un = CreateHuman ;
6915: LD_ADDR_VAR 0 3
6919: PUSH
6920: CALL_OW 44
6924: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6925: LD_VAR 0 3
6929: PPUSH
6930: LD_INT 3
6932: PPUSH
6933: LD_INT 0
6935: PPUSH
6936: CALL_OW 49
// end ;
6940: GO 6855
6942: POP
6943: POP
// for i = 1 to 4 do
6944: LD_ADDR_VAR 0 2
6948: PUSH
6949: DOUBLE
6950: LD_INT 1
6952: DEC
6953: ST_TO_ADDR
6954: LD_INT 4
6956: PUSH
6957: FOR_TO
6958: IFFALSE 7044
// begin uc_side = 3 ;
6960: LD_ADDR_OWVAR 20
6964: PUSH
6965: LD_INT 3
6967: ST_TO_ADDR
// uc_nation = 3 ;
6968: LD_ADDR_OWVAR 21
6972: PUSH
6973: LD_INT 3
6975: ST_TO_ADDR
// hc_gallery =  ;
6976: LD_ADDR_OWVAR 33
6980: PUSH
6981: LD_STRING 
6983: ST_TO_ADDR
// hc_name =  ;
6984: LD_ADDR_OWVAR 26
6988: PUSH
6989: LD_STRING 
6991: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6992: LD_INT 0
6994: PPUSH
6995: LD_INT 2
6997: PPUSH
6998: LD_EXP 25
7002: PPUSH
7003: LD_EXP 26
7007: PPUSH
7008: CALL_OW 12
7012: PPUSH
7013: CALL_OW 380
// un = CreateHuman ;
7017: LD_ADDR_VAR 0 3
7021: PUSH
7022: CALL_OW 44
7026: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7027: LD_VAR 0 3
7031: PPUSH
7032: LD_INT 3
7034: PPUSH
7035: LD_INT 0
7037: PPUSH
7038: CALL_OW 49
// end ;
7042: GO 6957
7044: POP
7045: POP
// for i = 1 to 3 do
7046: LD_ADDR_VAR 0 2
7050: PUSH
7051: DOUBLE
7052: LD_INT 1
7054: DEC
7055: ST_TO_ADDR
7056: LD_INT 3
7058: PUSH
7059: FOR_TO
7060: IFFALSE 7146
// begin uc_side = 3 ;
7062: LD_ADDR_OWVAR 20
7066: PUSH
7067: LD_INT 3
7069: ST_TO_ADDR
// uc_nation = 3 ;
7070: LD_ADDR_OWVAR 21
7074: PUSH
7075: LD_INT 3
7077: ST_TO_ADDR
// hc_gallery =  ;
7078: LD_ADDR_OWVAR 33
7082: PUSH
7083: LD_STRING 
7085: ST_TO_ADDR
// hc_name =  ;
7086: LD_ADDR_OWVAR 26
7090: PUSH
7091: LD_STRING 
7093: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7094: LD_INT 0
7096: PPUSH
7097: LD_INT 3
7099: PPUSH
7100: LD_EXP 25
7104: PPUSH
7105: LD_EXP 26
7109: PPUSH
7110: CALL_OW 12
7114: PPUSH
7115: CALL_OW 380
// un = CreateHuman ;
7119: LD_ADDR_VAR 0 3
7123: PUSH
7124: CALL_OW 44
7128: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7129: LD_VAR 0 3
7133: PPUSH
7134: LD_INT 3
7136: PPUSH
7137: LD_INT 0
7139: PPUSH
7140: CALL_OW 49
// end ;
7144: GO 7059
7146: POP
7147: POP
// for i = 1 to 2 do
7148: LD_ADDR_VAR 0 2
7152: PUSH
7153: DOUBLE
7154: LD_INT 1
7156: DEC
7157: ST_TO_ADDR
7158: LD_INT 2
7160: PUSH
7161: FOR_TO
7162: IFFALSE 7248
// begin uc_side = 3 ;
7164: LD_ADDR_OWVAR 20
7168: PUSH
7169: LD_INT 3
7171: ST_TO_ADDR
// uc_nation = 3 ;
7172: LD_ADDR_OWVAR 21
7176: PUSH
7177: LD_INT 3
7179: ST_TO_ADDR
// hc_gallery =  ;
7180: LD_ADDR_OWVAR 33
7184: PUSH
7185: LD_STRING 
7187: ST_TO_ADDR
// hc_name =  ;
7188: LD_ADDR_OWVAR 26
7192: PUSH
7193: LD_STRING 
7195: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7196: LD_INT 0
7198: PPUSH
7199: LD_INT 4
7201: PPUSH
7202: LD_EXP 25
7206: PPUSH
7207: LD_EXP 26
7211: PPUSH
7212: CALL_OW 12
7216: PPUSH
7217: CALL_OW 380
// un = CreateHuman ;
7221: LD_ADDR_VAR 0 3
7225: PUSH
7226: CALL_OW 44
7230: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7231: LD_VAR 0 3
7235: PPUSH
7236: LD_INT 3
7238: PPUSH
7239: LD_INT 0
7241: PPUSH
7242: CALL_OW 49
// end ;
7246: GO 7161
7248: POP
7249: POP
// end ; end_of_file
7250: LD_VAR 0 1
7254: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7255: LD_INT 0
7257: PPUSH
7258: PPUSH
7259: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7260: LD_ADDR_VAR 0 1
7264: PUSH
7265: LD_VAR 0 1
7269: PUSH
7270: LD_EXP 1
7274: PUSH
7275: LD_EXP 2
7279: PUSH
7280: LD_EXP 3
7284: PUSH
7285: LD_EXP 4
7289: PUSH
7290: LD_EXP 5
7294: PUSH
7295: LD_EXP 6
7299: PUSH
7300: LD_EXP 7
7304: PUSH
7305: LD_EXP 8
7309: PUSH
7310: LD_EXP 9
7314: PUSH
7315: LD_EXP 10
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: DIFF
7332: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7333: LD_ADDR_VAR 0 6
7337: PUSH
7338: LD_VAR 0 1
7342: PUSH
7343: LD_INT 1
7345: PPUSH
7346: LD_VAR 0 1
7350: PPUSH
7351: CALL_OW 12
7355: ARRAY
7356: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7357: LD_VAR 0 6
7361: PPUSH
7362: CALL_OW 258
7366: PUSH
7367: LD_INT 1
7369: EQUAL
7370: IFFALSE 7388
// Say ( speaker , dialogMID ) else
7372: LD_VAR 0 6
7376: PPUSH
7377: LD_VAR 0 2
7381: PPUSH
7382: CALL_OW 88
7386: GO 7402
// Say ( speaker , dialogFID ) ;
7388: LD_VAR 0 6
7392: PPUSH
7393: LD_VAR 0 3
7397: PPUSH
7398: CALL_OW 88
// result := speaker ;
7402: LD_ADDR_VAR 0 4
7406: PUSH
7407: LD_VAR 0 6
7411: ST_TO_ADDR
// end ;
7412: LD_VAR 0 4
7416: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7417: LD_INT 0
7419: PPUSH
7420: PPUSH
7421: PPUSH
// uc_side := GetSide ( b ) ;
7422: LD_ADDR_OWVAR 20
7426: PUSH
7427: LD_VAR 0 2
7431: PPUSH
7432: CALL_OW 255
7436: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7437: LD_ADDR_OWVAR 21
7441: PUSH
7442: LD_VAR 0 2
7446: PPUSH
7447: CALL_OW 248
7451: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7452: LD_INT 0
7454: PPUSH
7455: LD_INT 1
7457: PPUSH
7458: LD_VAR 0 1
7462: PPUSH
7463: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7467: LD_ADDR_VAR 0 5
7471: PUSH
7472: LD_VAR 0 2
7476: PPUSH
7477: CALL_OW 254
7481: PUSH
7482: LD_INT 3
7484: MINUS
7485: ST_TO_ADDR
// if dir < 0 then
7486: LD_VAR 0 5
7490: PUSH
7491: LD_INT 0
7493: LESS
7494: IFFALSE 7510
// dir := 6 + dir ;
7496: LD_ADDR_VAR 0 5
7500: PUSH
7501: LD_INT 6
7503: PUSH
7504: LD_VAR 0 5
7508: PLUS
7509: ST_TO_ADDR
// un := CreateHuman ;
7510: LD_ADDR_VAR 0 4
7514: PUSH
7515: CALL_OW 44
7519: ST_TO_ADDR
// SetDir ( un , dir ) ;
7520: LD_VAR 0 4
7524: PPUSH
7525: LD_VAR 0 5
7529: PPUSH
7530: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7534: LD_VAR 0 4
7538: PPUSH
7539: LD_VAR 0 2
7543: PPUSH
7544: CALL_OW 52
// end ;
7548: LD_VAR 0 3
7552: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7553: LD_INT 0
7555: PPUSH
7556: PPUSH
7557: PPUSH
7558: PPUSH
// for i = 1 to count do
7559: LD_ADDR_VAR 0 8
7563: PUSH
7564: DOUBLE
7565: LD_INT 1
7567: DEC
7568: ST_TO_ADDR
7569: LD_VAR 0 6
7573: PUSH
7574: FOR_TO
7575: IFFALSE 7656
// begin uc_side = side ;
7577: LD_ADDR_OWVAR 20
7581: PUSH
7582: LD_VAR 0 1
7586: ST_TO_ADDR
// uc_nation = nation ;
7587: LD_ADDR_OWVAR 21
7591: PUSH
7592: LD_VAR 0 2
7596: ST_TO_ADDR
// hc_gallery =  ;
7597: LD_ADDR_OWVAR 33
7601: PUSH
7602: LD_STRING 
7604: ST_TO_ADDR
// hc_name =  ;
7605: LD_ADDR_OWVAR 26
7609: PUSH
7610: LD_STRING 
7612: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7613: LD_INT 0
7615: PPUSH
7616: LD_VAR 0 5
7620: PPUSH
7621: LD_VAR 0 4
7625: PPUSH
7626: CALL_OW 380
// un = CreateHuman ;
7630: LD_ADDR_VAR 0 10
7634: PUSH
7635: CALL_OW 44
7639: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7640: LD_VAR 0 10
7644: PPUSH
7645: LD_VAR 0 3
7649: PPUSH
7650: CALL_OW 52
// end ;
7654: GO 7574
7656: POP
7657: POP
// end ;
7658: LD_VAR 0 7
7662: RET
// export function PrepareDifficulty ; begin
7663: LD_INT 0
7665: PPUSH
// if Difficulty = 1 then
7666: LD_OWVAR 67
7670: PUSH
7671: LD_INT 1
7673: EQUAL
7674: IFFALSE 7692
// begin RuSolMinLevel = 3 ;
7676: LD_ADDR_EXP 25
7680: PUSH
7681: LD_INT 3
7683: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7684: LD_ADDR_EXP 26
7688: PUSH
7689: LD_INT 5
7691: ST_TO_ADDR
// end ; if Difficulty = 2 then
7692: LD_OWVAR 67
7696: PUSH
7697: LD_INT 2
7699: EQUAL
7700: IFFALSE 7770
// begin RuSolMinLevel = 5 ;
7702: LD_ADDR_EXP 25
7706: PUSH
7707: LD_INT 5
7709: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7710: LD_ADDR_EXP 26
7714: PUSH
7715: LD_INT 6
7717: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7718: LD_INT 51
7720: PPUSH
7721: LD_INT 3
7723: PPUSH
7724: LD_INT 1
7726: PPUSH
7727: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7731: LD_INT 57
7733: PPUSH
7734: LD_INT 3
7736: PPUSH
7737: LD_INT 1
7739: PPUSH
7740: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7744: LD_INT 57
7746: PPUSH
7747: LD_INT 6
7749: PPUSH
7750: LD_INT 2
7752: PPUSH
7753: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7757: LD_INT 51
7759: PPUSH
7760: LD_INT 6
7762: PPUSH
7763: LD_INT 2
7765: PPUSH
7766: CALL_OW 322
// end ; if Difficulty = 3 then
7770: LD_OWVAR 67
7774: PUSH
7775: LD_INT 3
7777: EQUAL
7778: IFFALSE 7861
// begin RuSolMinLevel = 5 ;
7780: LD_ADDR_EXP 25
7784: PUSH
7785: LD_INT 5
7787: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7788: LD_ADDR_EXP 26
7792: PUSH
7793: LD_INT 6
7795: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7796: LD_INT 57
7798: PPUSH
7799: LD_INT 3
7801: PPUSH
7802: LD_INT 1
7804: PPUSH
7805: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7809: LD_INT 51
7811: PPUSH
7812: LD_INT 3
7814: PPUSH
7815: LD_INT 1
7817: PPUSH
7818: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7822: LD_INT 52
7824: PPUSH
7825: LD_INT 3
7827: PPUSH
7828: LD_INT 1
7830: PPUSH
7831: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7835: LD_INT 57
7837: PPUSH
7838: LD_INT 6
7840: PPUSH
7841: LD_INT 2
7843: PPUSH
7844: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7848: LD_INT 52
7850: PPUSH
7851: LD_INT 6
7853: PPUSH
7854: LD_INT 2
7856: PPUSH
7857: CALL_OW 322
// end ; end ;
7861: LD_VAR 0 1
7865: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7866: LD_INT 0
7868: PPUSH
7869: PPUSH
7870: PPUSH
7871: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7872: LD_ADDR_VAR 0 3
7876: PUSH
7877: LD_INT 22
7879: PUSH
7880: LD_INT 3
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: LD_INT 25
7889: PUSH
7890: LD_INT 2
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PPUSH
7901: CALL_OW 69
7905: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7906: LD_ADDR_VAR 0 4
7910: PUSH
7911: LD_INT 4
7913: PUSH
7914: LD_INT 75
7916: PUSH
7917: LD_INT 79
7919: PUSH
7920: LD_INT 2
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: PUSH
7929: LD_INT 4
7931: PUSH
7932: LD_INT 113
7934: PUSH
7935: LD_INT 94
7937: PUSH
7938: LD_INT 4
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: PUSH
7947: LD_INT 29
7949: PUSH
7950: LD_INT 106
7952: PUSH
7953: LD_INT 97
7955: PUSH
7956: LD_INT 3
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: PUSH
7965: LD_INT 26
7967: PUSH
7968: LD_INT 93
7970: PUSH
7971: LD_INT 97
7973: PUSH
7974: LD_INT 5
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: PUSH
7983: LD_INT 2
7985: PUSH
7986: LD_INT 100
7988: PUSH
7989: LD_INT 89
7991: PUSH
7992: LD_INT 3
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: PUSH
8001: LD_INT 17
8003: PUSH
8004: LD_INT 96
8006: PUSH
8007: LD_INT 89
8009: PUSH
8010: LD_INT 1
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: PUSH
8019: LD_INT 32
8021: PUSH
8022: LD_INT 78
8024: PUSH
8025: LD_INT 94
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: PUSH
8037: LD_INT 32
8039: PUSH
8040: LD_INT 95
8042: PUSH
8043: LD_INT 82
8045: PUSH
8046: LD_INT 3
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 32
8057: PUSH
8058: LD_INT 104
8060: PUSH
8061: LD_INT 85
8063: PUSH
8064: LD_INT 2
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 32
8075: PUSH
8076: LD_INT 81
8078: PUSH
8079: LD_INT 78
8081: PUSH
8082: LD_INT 2
8084: PUSH
8085: EMPTY
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: PUSH
8091: LD_INT 33
8093: PUSH
8094: LD_INT 109
8096: PUSH
8097: LD_INT 90
8099: PUSH
8100: LD_INT 3
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: PUSH
8109: LD_INT 33
8111: PUSH
8112: LD_INT 88
8114: PUSH
8115: LD_INT 79
8117: PUSH
8118: LD_INT 3
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: PUSH
8127: LD_INT 33
8129: PUSH
8130: LD_INT 76
8132: PUSH
8133: LD_INT 87
8135: PUSH
8136: LD_INT 1
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 26
8147: PUSH
8148: LD_INT 96
8150: PUSH
8151: LD_INT 97
8153: PUSH
8154: LD_INT 5
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 26
8165: PUSH
8166: LD_INT 85
8168: PUSH
8169: LD_INT 84
8171: PUSH
8172: LD_INT 2
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: PUSH
8181: LD_INT 6
8183: PUSH
8184: LD_INT 88
8186: PUSH
8187: LD_INT 95
8189: PUSH
8190: LD_INT 0
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: PUSH
8199: LD_INT 19
8201: PUSH
8202: LD_INT 103
8204: PUSH
8205: LD_INT 89
8207: PUSH
8208: LD_INT 4
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: PUSH
8217: LD_INT 16
8219: PUSH
8220: LD_INT 97
8222: PUSH
8223: LD_INT 86
8225: PUSH
8226: LD_INT 2
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: PUSH
8235: LD_INT 24
8237: PUSH
8238: LD_INT 100
8240: PUSH
8241: LD_INT 85
8243: PUSH
8244: LD_INT 3
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: ST_TO_ADDR
// for i := 1 to buildingsTab do
8274: LD_ADDR_VAR 0 2
8278: PUSH
8279: DOUBLE
8280: LD_INT 1
8282: DEC
8283: ST_TO_ADDR
8284: LD_VAR 0 4
8288: PUSH
8289: FOR_TO
8290: IFFALSE 8363
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8292: LD_VAR 0 3
8296: PPUSH
8297: LD_VAR 0 4
8301: PUSH
8302: LD_VAR 0 2
8306: ARRAY
8307: PUSH
8308: LD_INT 1
8310: ARRAY
8311: PPUSH
8312: LD_VAR 0 4
8316: PUSH
8317: LD_VAR 0 2
8321: ARRAY
8322: PUSH
8323: LD_INT 2
8325: ARRAY
8326: PPUSH
8327: LD_VAR 0 4
8331: PUSH
8332: LD_VAR 0 2
8336: ARRAY
8337: PUSH
8338: LD_INT 3
8340: ARRAY
8341: PPUSH
8342: LD_VAR 0 4
8346: PUSH
8347: LD_VAR 0 2
8351: ARRAY
8352: PUSH
8353: LD_INT 4
8355: ARRAY
8356: PPUSH
8357: CALL_OW 205
8361: GO 8289
8363: POP
8364: POP
// end ;
8365: LD_VAR 0 1
8369: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8370: LD_INT 0
8372: PPUSH
8373: PPUSH
// for i in charactersList do
8374: LD_ADDR_VAR 0 4
8378: PUSH
8379: LD_VAR 0 1
8383: PUSH
8384: FOR_IN
8385: IFFALSE 8403
// SaveCharacters ( i , ident ) ;
8387: LD_VAR 0 4
8391: PPUSH
8392: LD_VAR 0 2
8396: PPUSH
8397: CALL_OW 38
8401: GO 8384
8403: POP
8404: POP
// end ;
8405: LD_VAR 0 3
8409: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8410: LD_INT 0
8412: PPUSH
8413: PPUSH
8414: PPUSH
8415: PPUSH
8416: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8417: LD_ADDR_VAR 0 8
8421: PUSH
8422: LD_INT 48
8424: PUSH
8425: LD_INT 49
8427: PUSH
8428: LD_INT 50
8430: PUSH
8431: LD_INT 20
8433: PUSH
8434: LD_INT 1
8436: PUSH
8437: LD_INT 51
8439: PUSH
8440: LD_INT 52
8442: PUSH
8443: LD_INT 69
8445: PUSH
8446: LD_INT 39
8448: PUSH
8449: LD_INT 34
8451: PUSH
8452: LD_INT 40
8454: PUSH
8455: LD_INT 53
8457: PUSH
8458: LD_INT 71
8460: PUSH
8461: LD_INT 57
8463: PUSH
8464: LD_INT 58
8466: PUSH
8467: LD_INT 44
8469: PUSH
8470: LD_INT 32
8472: PUSH
8473: LD_INT 27
8475: PUSH
8476: LD_INT 23
8478: PUSH
8479: LD_INT 33
8481: PUSH
8482: LD_INT 59
8484: PUSH
8485: LD_INT 54
8487: PUSH
8488: LD_INT 55
8490: PUSH
8491: LD_INT 56
8493: PUSH
8494: LD_INT 63
8496: PUSH
8497: LD_INT 64
8499: PUSH
8500: LD_INT 65
8502: PUSH
8503: LD_INT 30
8505: PUSH
8506: LD_INT 31
8508: PUSH
8509: LD_INT 21
8511: PUSH
8512: LD_INT 22
8514: PUSH
8515: LD_INT 25
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8552: LD_ADDR_VAR 0 5
8556: PUSH
8557: DOUBLE
8558: LD_INT 1
8560: DEC
8561: ST_TO_ADDR
8562: LD_VAR 0 8
8566: PUSH
8567: FOR_TO
8568: IFFALSE 8644
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8570: LD_VAR 0 8
8574: PUSH
8575: LD_VAR 0 5
8579: ARRAY
8580: PPUSH
8581: LD_VAR 0 1
8585: PPUSH
8586: CALL_OW 321
8590: PUSH
8591: LD_INT 1
8593: EQUAL
8594: PUSH
8595: LD_VAR 0 8
8599: PUSH
8600: LD_VAR 0 5
8604: ARRAY
8605: PPUSH
8606: LD_VAR 0 3
8610: PPUSH
8611: CALL_OW 482
8615: PUSH
8616: LD_INT 1
8618: EQUAL
8619: AND
8620: IFFALSE 8642
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8622: LD_VAR 0 2
8626: PPUSH
8627: LD_VAR 0 8
8631: PUSH
8632: LD_VAR 0 5
8636: ARRAY
8637: PPUSH
8638: CALL_OW 184
8642: GO 8567
8644: POP
8645: POP
// end ;
8646: LD_VAR 0 4
8650: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8651: LD_INT 0
8653: PPUSH
8654: PPUSH
8655: PPUSH
8656: PPUSH
8657: PPUSH
8658: PPUSH
8659: PPUSH
8660: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8661: LD_ADDR_VAR 0 6
8665: PUSH
8666: LD_VAR 0 2
8670: PPUSH
8671: LD_INT 22
8673: PUSH
8674: LD_VAR 0 1
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 56
8685: PUSH
8686: EMPTY
8687: LIST
8688: PUSH
8689: LD_INT 24
8691: PUSH
8692: LD_INT 700
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: PUSH
8699: LD_INT 3
8701: PUSH
8702: LD_INT 60
8704: PUSH
8705: EMPTY
8706: LIST
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: PUSH
8712: LD_INT 2
8714: PUSH
8715: LD_INT 25
8717: PUSH
8718: LD_INT 1
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: PUSH
8725: LD_INT 25
8727: PUSH
8728: LD_INT 5
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: PUSH
8735: LD_INT 25
8737: PUSH
8738: LD_INT 8
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: LD_INT 25
8747: PUSH
8748: LD_INT 9
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: PPUSH
8769: CALL_OW 70
8773: PUSH
8774: LD_EXP 24
8778: PUSH
8779: EMPTY
8780: LIST
8781: DIFF
8782: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8783: LD_ADDR_VAR 0 7
8787: PUSH
8788: LD_VAR 0 2
8792: PPUSH
8793: LD_INT 22
8795: PUSH
8796: LD_VAR 0 1
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PUSH
8805: LD_INT 30
8807: PUSH
8808: LD_INT 32
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: PUSH
8815: LD_INT 58
8817: PUSH
8818: EMPTY
8819: LIST
8820: PUSH
8821: LD_INT 24
8823: PUSH
8824: LD_INT 251
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: PPUSH
8837: CALL_OW 70
8841: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8842: LD_ADDR_VAR 0 9
8846: PUSH
8847: LD_VAR 0 2
8851: PPUSH
8852: LD_INT 22
8854: PUSH
8855: LD_VAR 0 1
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: LD_INT 2
8866: PUSH
8867: LD_INT 30
8869: PUSH
8870: LD_INT 4
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 30
8879: PUSH
8880: LD_INT 5
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: LIST
8891: PUSH
8892: LD_INT 24
8894: PUSH
8895: LD_INT 251
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: LIST
8906: PPUSH
8907: CALL_OW 70
8911: ST_TO_ADDR
// if barrackList > 0 then
8912: LD_VAR 0 9
8916: PUSH
8917: LD_INT 0
8919: GREATER
8920: IFFALSE 9068
// begin if turretList = 0 then
8922: LD_VAR 0 7
8926: PUSH
8927: LD_INT 0
8929: EQUAL
8930: IFFALSE 8972
// begin if soldiers_list > 0 then
8932: LD_VAR 0 6
8936: PUSH
8937: LD_INT 0
8939: GREATER
8940: IFFALSE 8970
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8942: LD_VAR 0 6
8946: PPUSH
8947: LD_VAR 0 9
8951: PUSH
8952: LD_INT 1
8954: PPUSH
8955: LD_VAR 0 9
8959: PPUSH
8960: CALL_OW 12
8964: ARRAY
8965: PPUSH
8966: CALL_OW 120
// end else
8970: GO 9068
// begin for i in barrackList do
8972: LD_ADDR_VAR 0 4
8976: PUSH
8977: LD_VAR 0 9
8981: PUSH
8982: FOR_IN
8983: IFFALSE 9066
// begin insideUnits = UnitsInside ( i ) ;
8985: LD_ADDR_VAR 0 10
8989: PUSH
8990: LD_VAR 0 4
8994: PPUSH
8995: CALL_OW 313
8999: ST_TO_ADDR
// if insideUnits > 0 then
9000: LD_VAR 0 10
9004: PUSH
9005: LD_INT 0
9007: GREATER
9008: IFFALSE 9032
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9010: LD_VAR 0 10
9014: PUSH
9015: LD_INT 1
9017: ARRAY
9018: PPUSH
9019: LD_VAR 0 7
9023: PUSH
9024: LD_INT 1
9026: ARRAY
9027: PPUSH
9028: CALL_OW 120
// if soldiers_list > 0 then
9032: LD_VAR 0 6
9036: PUSH
9037: LD_INT 0
9039: GREATER
9040: IFFALSE 9064
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9042: LD_VAR 0 6
9046: PUSH
9047: LD_INT 1
9049: ARRAY
9050: PPUSH
9051: LD_VAR 0 7
9055: PUSH
9056: LD_INT 1
9058: ARRAY
9059: PPUSH
9060: CALL_OW 120
// end ;
9064: GO 8982
9066: POP
9067: POP
// end ; end ; end ;
9068: LD_VAR 0 3
9072: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
9073: LD_INT 0
9075: PPUSH
9076: PPUSH
9077: PPUSH
9078: PPUSH
9079: PPUSH
9080: PPUSH
// for i = 1 to vehCount do
9081: LD_ADDR_VAR 0 8
9085: PUSH
9086: DOUBLE
9087: LD_INT 1
9089: DEC
9090: ST_TO_ADDR
9091: LD_VAR 0 6
9095: PUSH
9096: FOR_TO
9097: IFFALSE 9304
// begin uc_side = side ;
9099: LD_ADDR_OWVAR 20
9103: PUSH
9104: LD_VAR 0 1
9108: ST_TO_ADDR
// uc_nation = nation ;
9109: LD_ADDR_OWVAR 21
9113: PUSH
9114: LD_VAR 0 3
9118: ST_TO_ADDR
// vc_Chassis = 22 ;
9119: LD_ADDR_OWVAR 37
9123: PUSH
9124: LD_INT 22
9126: ST_TO_ADDR
// vc_engine = 1 ;
9127: LD_ADDR_OWVAR 39
9131: PUSH
9132: LD_INT 1
9134: ST_TO_ADDR
// vc_control = 1 ;
9135: LD_ADDR_OWVAR 38
9139: PUSH
9140: LD_INT 1
9142: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
9143: LD_ADDR_OWVAR 40
9147: PUSH
9148: LD_INT 43
9150: PUSH
9151: LD_INT 44
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: LD_INT 1
9160: PPUSH
9161: LD_INT 2
9163: PPUSH
9164: CALL_OW 12
9168: ARRAY
9169: ST_TO_ADDR
// veh = CreateVehicle ;
9170: LD_ADDR_VAR 0 12
9174: PUSH
9175: CALL_OW 45
9179: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9180: LD_VAR 0 12
9184: PPUSH
9185: LD_VAR 0 2
9189: PPUSH
9190: LD_INT 0
9192: PPUSH
9193: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9197: LD_ADDR_EXP 32
9201: PUSH
9202: LD_EXP 32
9206: PUSH
9207: LD_VAR 0 12
9211: ADD
9212: ST_TO_ADDR
// hc_class = 3 ;
9213: LD_ADDR_OWVAR 28
9217: PUSH
9218: LD_INT 3
9220: ST_TO_ADDR
// hc_name =  ;
9221: LD_ADDR_OWVAR 26
9225: PUSH
9226: LD_STRING 
9228: ST_TO_ADDR
// hc_gallery =  ;
9229: LD_ADDR_OWVAR 33
9233: PUSH
9234: LD_STRING 
9236: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9237: LD_INT 0
9239: PPUSH
9240: LD_INT 3
9242: PPUSH
9243: LD_EXP 25
9247: PPUSH
9248: LD_EXP 26
9252: PPUSH
9253: CALL_OW 12
9257: PPUSH
9258: CALL_OW 380
// un = CreateHuman ;
9262: LD_ADDR_VAR 0 10
9266: PUSH
9267: CALL_OW 44
9271: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9272: LD_VAR 0 10
9276: PPUSH
9277: LD_VAR 0 12
9281: PPUSH
9282: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9286: LD_ADDR_EXP 32
9290: PUSH
9291: LD_EXP 32
9295: PUSH
9296: LD_VAR 0 10
9300: ADD
9301: ST_TO_ADDR
// end ;
9302: GO 9096
9304: POP
9305: POP
// end ;
9306: LD_VAR 0 7
9310: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9311: LD_INT 0
9313: PPUSH
9314: PPUSH
9315: PPUSH
9316: PPUSH
9317: PPUSH
9318: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9319: LD_VAR 0 2
9323: PPUSH
9324: LD_INT 22
9326: PUSH
9327: LD_VAR 0 1
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: EMPTY
9337: LIST
9338: PPUSH
9339: CALL_OW 70
9343: PUSH
9344: LD_INT 0
9346: EQUAL
9347: PUSH
9348: LD_EXP 32
9352: AND
9353: IFFALSE 9640
// begin for i in defenders_list do
9355: LD_ADDR_VAR 0 4
9359: PUSH
9360: LD_EXP 32
9364: PUSH
9365: FOR_IN
9366: IFFALSE 9638
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9368: LD_VAR 0 4
9372: PPUSH
9373: LD_INT 63
9375: PPUSH
9376: LD_INT 75
9378: PPUSH
9379: CALL_OW 297
9383: PUSH
9384: LD_INT 8
9386: GREATER
9387: PUSH
9388: LD_VAR 0 4
9392: PPUSH
9393: CALL_OW 314
9397: NOT
9398: AND
9399: IFFALSE 9418
// ComMoveXY ( i , 63 , 75 ) else
9401: LD_VAR 0 4
9405: PPUSH
9406: LD_INT 63
9408: PPUSH
9409: LD_INT 75
9411: PPUSH
9412: CALL_OW 111
9416: GO 9636
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9418: LD_VAR 0 4
9422: PPUSH
9423: CALL_OW 257
9427: PUSH
9428: LD_INT 3
9430: EQUAL
9431: PUSH
9432: LD_VAR 0 4
9436: PPUSH
9437: CALL_OW 310
9441: NOT
9442: AND
9443: PUSH
9444: LD_VAR 0 4
9448: PPUSH
9449: CALL_OW 314
9453: NOT
9454: AND
9455: IFFALSE 9508
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9457: LD_VAR 0 4
9461: PPUSH
9462: LD_EXP 32
9466: PPUSH
9467: LD_INT 58
9469: PUSH
9470: EMPTY
9471: LIST
9472: PUSH
9473: LD_INT 24
9475: PUSH
9476: LD_INT 1000
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PPUSH
9487: CALL_OW 72
9491: PPUSH
9492: LD_VAR 0 4
9496: PPUSH
9497: CALL_OW 74
9501: PPUSH
9502: CALL_OW 120
9506: GO 9636
// if GetFuel ( i ) < 100 then
9508: LD_VAR 0 4
9512: PPUSH
9513: CALL_OW 261
9517: PUSH
9518: LD_INT 100
9520: LESS
9521: IFFALSE 9537
// SetFuel ( defenders_list , 100 ) else
9523: LD_EXP 32
9527: PPUSH
9528: LD_INT 100
9530: PPUSH
9531: CALL_OW 240
9535: GO 9636
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9537: LD_VAR 0 4
9541: PPUSH
9542: CALL_OW 263
9546: PUSH
9547: LD_INT 1
9549: EQUAL
9550: PUSH
9551: LD_VAR 0 4
9555: PPUSH
9556: CALL_OW 256
9560: PUSH
9561: LD_INT 990
9563: LESS
9564: AND
9565: IFFALSE 9636
// begin veh := i ;
9567: LD_ADDR_VAR 0 7
9571: PUSH
9572: LD_VAR 0 4
9576: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9577: LD_ADDR_VAR 0 8
9581: PUSH
9582: LD_VAR 0 4
9586: PPUSH
9587: CALL_OW 311
9591: ST_TO_ADDR
// if veh then
9592: LD_VAR 0 7
9596: IFFALSE 9636
// begin ComMoveXY ( i , 63 , 75 ) ;
9598: LD_VAR 0 4
9602: PPUSH
9603: LD_INT 63
9605: PPUSH
9606: LD_INT 75
9608: PPUSH
9609: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9613: LD_VAR 0 7
9617: PPUSH
9618: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9622: LD_VAR 0 8
9626: PPUSH
9627: LD_VAR 0 7
9631: PPUSH
9632: CALL_OW 189
// end ; end ; end ;
9636: GO 9365
9638: POP
9639: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9640: LD_ADDR_VAR 0 6
9644: PUSH
9645: LD_VAR 0 2
9649: PPUSH
9650: LD_INT 22
9652: PUSH
9653: LD_VAR 0 1
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PUSH
9662: EMPTY
9663: LIST
9664: PPUSH
9665: CALL_OW 70
9669: ST_TO_ADDR
// if tmp and defenders_list then
9670: LD_VAR 0 6
9674: PUSH
9675: LD_EXP 32
9679: AND
9680: IFFALSE 9849
// for i in defenders_list do
9682: LD_ADDR_VAR 0 4
9686: PUSH
9687: LD_EXP 32
9691: PUSH
9692: FOR_IN
9693: IFFALSE 9847
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9695: LD_VAR 0 4
9699: PPUSH
9700: CALL_OW 257
9704: PUSH
9705: LD_INT 3
9707: EQUAL
9708: PUSH
9709: LD_VAR 0 4
9713: PPUSH
9714: CALL_OW 310
9718: NOT
9719: AND
9720: IFFALSE 9759
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9722: LD_VAR 0 4
9726: PPUSH
9727: LD_EXP 32
9731: PPUSH
9732: LD_INT 58
9734: PUSH
9735: EMPTY
9736: LIST
9737: PPUSH
9738: CALL_OW 72
9742: PPUSH
9743: LD_VAR 0 4
9747: PPUSH
9748: CALL_OW 74
9752: PPUSH
9753: CALL_OW 120
9757: GO 9845
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9759: LD_VAR 0 4
9763: PPUSH
9764: CALL_OW 314
9768: NOT
9769: PUSH
9770: LD_VAR 0 4
9774: PPUSH
9775: LD_VAR 0 2
9779: PPUSH
9780: CALL_OW 308
9784: AND
9785: IFFALSE 9813
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9787: LD_VAR 0 4
9791: PPUSH
9792: LD_VAR 0 6
9796: PPUSH
9797: LD_VAR 0 4
9801: PPUSH
9802: CALL_OW 74
9806: PPUSH
9807: CALL_OW 115
9811: GO 9845
// if not IsInArea ( i , defenseArea ) then
9813: LD_VAR 0 4
9817: PPUSH
9818: LD_VAR 0 2
9822: PPUSH
9823: CALL_OW 308
9827: NOT
9828: IFFALSE 9845
// ComMoveXY ( i , 63 , 75 ) ;
9830: LD_VAR 0 4
9834: PPUSH
9835: LD_INT 63
9837: PPUSH
9838: LD_INT 75
9840: PPUSH
9841: CALL_OW 111
// end ;
9845: GO 9692
9847: POP
9848: POP
// end ;
9849: LD_VAR 0 3
9853: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9854: LD_INT 0
9856: PPUSH
9857: PPUSH
9858: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9859: LD_INT 22
9861: PUSH
9862: LD_VAR 0 1
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: LD_INT 21
9873: PUSH
9874: LD_INT 2
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PPUSH
9885: CALL_OW 69
9889: PUSH
9890: LD_VAR 0 3
9894: LESSEQUAL
9895: IFFALSE 10003
// begin for i = 1 to vehCount do
9897: LD_ADDR_VAR 0 9
9901: PUSH
9902: DOUBLE
9903: LD_INT 1
9905: DEC
9906: ST_TO_ADDR
9907: LD_VAR 0 3
9911: PUSH
9912: FOR_TO
9913: IFFALSE 10001
// begin weapon = weaponTab [ i ] ;
9915: LD_ADDR_VAR 0 10
9919: PUSH
9920: LD_VAR 0 4
9924: PUSH
9925: LD_VAR 0 9
9929: ARRAY
9930: ST_TO_ADDR
// if weapon = 46 then
9931: LD_VAR 0 10
9935: PUSH
9936: LD_INT 46
9938: EQUAL
9939: IFFALSE 9970
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9941: LD_VAR 0 2
9945: PPUSH
9946: LD_INT 24
9948: PPUSH
9949: LD_VAR 0 5
9953: PPUSH
9954: LD_VAR 0 6
9958: PPUSH
9959: LD_VAR 0 10
9963: PPUSH
9964: CALL_OW 185
// end else
9968: GO 9999
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9970: LD_VAR 0 2
9974: PPUSH
9975: LD_VAR 0 7
9979: PPUSH
9980: LD_VAR 0 5
9984: PPUSH
9985: LD_VAR 0 6
9989: PPUSH
9990: LD_VAR 0 10
9994: PPUSH
9995: CALL_OW 185
// end ; end ;
9999: GO 9912
10001: POP
10002: POP
// end ; end ;
10003: LD_VAR 0 8
10007: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
10008: LD_INT 0
10010: PPUSH
10011: PPUSH
10012: PPUSH
10013: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
10014: LD_ADDR_VAR 0 8
10018: PUSH
10019: LD_INT 22
10021: PUSH
10022: LD_VAR 0 1
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: LD_INT 21
10033: PUSH
10034: LD_INT 2
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PUSH
10041: LD_INT 3
10043: PUSH
10044: LD_INT 24
10046: PUSH
10047: LD_INT 650
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: PPUSH
10063: CALL_OW 69
10067: ST_TO_ADDR
// if damageVehicles > 0 then
10068: LD_VAR 0 8
10072: PUSH
10073: LD_INT 0
10075: GREATER
10076: IFFALSE 10097
// ComMoveXY ( damageVehicles , repX , repY ) ;
10078: LD_VAR 0 8
10082: PPUSH
10083: LD_VAR 0 3
10087: PPUSH
10088: LD_VAR 0 4
10092: PPUSH
10093: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10097: LD_VAR 0 8
10101: PPUSH
10102: LD_INT 95
10104: PUSH
10105: LD_VAR 0 2
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 3
10116: PUSH
10117: LD_INT 58
10119: PUSH
10120: EMPTY
10121: LIST
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PPUSH
10131: CALL_OW 72
10135: PUSH
10136: LD_INT 0
10138: GREATER
10139: IFFALSE 10206
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
10141: LD_ADDR_VAR 0 6
10145: PUSH
10146: LD_VAR 0 8
10150: PPUSH
10151: LD_INT 95
10153: PUSH
10154: LD_VAR 0 2
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: LD_INT 3
10165: PUSH
10166: LD_INT 58
10168: PUSH
10169: EMPTY
10170: LIST
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PPUSH
10180: CALL_OW 72
10184: PUSH
10185: FOR_IN
10186: IFFALSE 10204
// ComExitVehicle ( UnitsInside ( i ) ) ;
10188: LD_VAR 0 6
10192: PPUSH
10193: CALL_OW 313
10197: PPUSH
10198: CALL_OW 121
10202: GO 10185
10204: POP
10205: POP
// end ;
10206: LD_VAR 0 5
10210: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10211: LD_INT 0
10213: PPUSH
10214: PPUSH
10215: PPUSH
10216: PPUSH
10217: PPUSH
10218: PPUSH
10219: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10220: LD_ADDR_VAR 0 8
10224: PUSH
10225: LD_INT 22
10227: PUSH
10228: LD_VAR 0 1
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: PUSH
10237: LD_INT 21
10239: PUSH
10240: LD_INT 2
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 24
10249: PUSH
10250: LD_INT 250
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 3
10259: PUSH
10260: LD_INT 58
10262: PUSH
10263: EMPTY
10264: LIST
10265: PUSH
10266: LD_INT 2
10268: PUSH
10269: LD_INT 34
10271: PUSH
10272: LD_INT 43
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PUSH
10279: LD_INT 34
10281: PUSH
10282: LD_INT 44
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 34
10291: PUSH
10292: LD_INT 46
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: PPUSH
10316: CALL_OW 69
10320: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
10321: LD_INT 22
10323: PUSH
10324: LD_VAR 0 1
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: PUSH
10333: LD_INT 21
10335: PUSH
10336: LD_INT 2
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: LD_INT 24
10345: PUSH
10346: LD_INT 1000
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: LD_INT 3
10355: PUSH
10356: LD_INT 58
10358: PUSH
10359: EMPTY
10360: LIST
10361: PUSH
10362: LD_INT 2
10364: PUSH
10365: LD_INT 34
10367: PUSH
10368: LD_INT 43
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 34
10377: PUSH
10378: LD_INT 44
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: LD_INT 34
10387: PUSH
10388: LD_INT 46
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: LIST
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: PPUSH
10412: CALL_OW 69
10416: PUSH
10417: LD_INT 5
10419: PUSH
10420: LD_INT 6
10422: PUSH
10423: LD_INT 7
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: LIST
10430: PUSH
10431: LD_OWVAR 67
10435: ARRAY
10436: GREATEREQUAL
10437: IFFALSE 11002
// repeat wait ( 0 0$1 ) ;
10439: LD_INT 35
10441: PPUSH
10442: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10446: LD_ADDR_VAR 0 8
10450: PUSH
10451: LD_INT 22
10453: PUSH
10454: LD_VAR 0 1
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PUSH
10463: LD_INT 21
10465: PUSH
10466: LD_INT 2
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: PUSH
10473: LD_INT 24
10475: PUSH
10476: LD_INT 250
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PUSH
10483: LD_INT 2
10485: PUSH
10486: LD_INT 34
10488: PUSH
10489: LD_INT 43
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PUSH
10496: LD_INT 34
10498: PUSH
10499: LD_INT 44
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: LD_INT 34
10508: PUSH
10509: LD_INT 46
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 3
10524: PUSH
10525: LD_INT 58
10527: PUSH
10528: EMPTY
10529: LIST
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: PPUSH
10542: CALL_OW 69
10546: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10547: LD_INT 22
10549: PUSH
10550: LD_VAR 0 1
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: LD_INT 95
10561: PUSH
10562: LD_VAR 0 2
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PPUSH
10575: CALL_OW 69
10579: NOT
10580: PUSH
10581: LD_VAR 0 11
10585: PUSH
10586: LD_INT 0
10588: EQUAL
10589: AND
10590: IFFALSE 10645
// for i := 1 to wayX do
10592: LD_ADDR_VAR 0 6
10596: PUSH
10597: DOUBLE
10598: LD_INT 1
10600: DEC
10601: ST_TO_ADDR
10602: LD_VAR 0 3
10606: PUSH
10607: FOR_TO
10608: IFFALSE 10643
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10610: LD_VAR 0 8
10614: PPUSH
10615: LD_VAR 0 3
10619: PUSH
10620: LD_VAR 0 6
10624: ARRAY
10625: PPUSH
10626: LD_VAR 0 4
10630: PUSH
10631: LD_VAR 0 6
10635: ARRAY
10636: PPUSH
10637: CALL_OW 114
10641: GO 10607
10643: POP
10644: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10645: LD_INT 22
10647: PUSH
10648: LD_VAR 0 1
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PUSH
10657: LD_INT 95
10659: PUSH
10660: LD_VAR 0 2
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PPUSH
10673: CALL_OW 69
10677: IFFALSE 10901
// begin seeEnemy = 1 ;
10679: LD_ADDR_VAR 0 11
10683: PUSH
10684: LD_INT 1
10686: ST_TO_ADDR
// for j in vehiclesOK do
10687: LD_ADDR_VAR 0 7
10691: PUSH
10692: LD_VAR 0 8
10696: PUSH
10697: FOR_IN
10698: IFFALSE 10899
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10700: LD_ADDR_VAR 0 9
10704: PUSH
10705: LD_INT 81
10707: PUSH
10708: LD_VAR 0 1
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: LD_INT 101
10719: PUSH
10720: LD_INT 1
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PPUSH
10731: CALL_OW 69
10735: PPUSH
10736: LD_VAR 0 7
10740: PPUSH
10741: CALL_OW 74
10745: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10746: LD_ADDR_VAR 0 10
10750: PUSH
10751: LD_INT 81
10753: PUSH
10754: LD_VAR 0 1
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 101
10765: PUSH
10766: LD_INT 1
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 2
10775: PUSH
10776: LD_INT 59
10778: PUSH
10779: EMPTY
10780: LIST
10781: PUSH
10782: LD_INT 21
10784: PUSH
10785: LD_INT 1
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 21
10794: PUSH
10795: LD_INT 2
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: PUSH
10813: EMPTY
10814: LIST
10815: PPUSH
10816: CALL_OW 69
10820: PPUSH
10821: LD_VAR 0 7
10825: PPUSH
10826: CALL_OW 74
10830: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10831: LD_VAR 0 7
10835: PPUSH
10836: LD_VAR 0 9
10840: PPUSH
10841: CALL_OW 296
10845: PUSH
10846: LD_INT 8
10848: PLUS
10849: PUSH
10850: LD_VAR 0 7
10854: PPUSH
10855: LD_VAR 0 10
10859: PPUSH
10860: CALL_OW 296
10864: LESS
10865: IFFALSE 10883
// ComAttackUnit ( j , target1 ) else
10867: LD_VAR 0 7
10871: PPUSH
10872: LD_VAR 0 9
10876: PPUSH
10877: CALL_OW 115
10881: GO 10897
// ComAttackUnit ( j , target2 ) ;
10883: LD_VAR 0 7
10887: PPUSH
10888: LD_VAR 0 10
10892: PPUSH
10893: CALL_OW 115
// end ;
10897: GO 10697
10899: POP
10900: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10901: LD_INT 22
10903: PUSH
10904: LD_VAR 0 1
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 21
10915: PUSH
10916: LD_INT 2
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 24
10925: PUSH
10926: LD_INT 250
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 2
10935: PUSH
10936: LD_INT 34
10938: PUSH
10939: LD_INT 43
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PUSH
10946: LD_INT 34
10948: PUSH
10949: LD_INT 44
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: LD_INT 34
10958: PUSH
10959: LD_INT 46
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: PUSH
10972: LD_INT 3
10974: PUSH
10975: LD_INT 58
10977: PUSH
10978: EMPTY
10979: LIST
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: PPUSH
10992: CALL_OW 69
10996: PUSH
10997: LD_INT 0
10999: EQUAL
11000: IFFALSE 10439
// seeEnemy = 0 ;
11002: LD_ADDR_VAR 0 11
11006: PUSH
11007: LD_INT 0
11009: ST_TO_ADDR
// end ;
11010: LD_VAR 0 5
11014: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
11015: LD_INT 0
11017: PPUSH
11018: PPUSH
11019: PPUSH
11020: PPUSH
11021: PPUSH
11022: PPUSH
// repeat wait ( 0 0$1 ) ;
11023: LD_INT 35
11025: PPUSH
11026: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
11030: LD_ADDR_VAR 0 7
11034: PUSH
11035: LD_INT 22
11037: PUSH
11038: LD_VAR 0 1
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: LD_INT 21
11049: PUSH
11050: LD_INT 2
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 24
11059: PUSH
11060: LD_INT 651
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: LIST
11071: PPUSH
11072: CALL_OW 69
11076: ST_TO_ADDR
// for j in vehiclesOK do
11077: LD_ADDR_VAR 0 4
11081: PUSH
11082: LD_VAR 0 7
11086: PUSH
11087: FOR_IN
11088: IFFALSE 11289
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
11090: LD_ADDR_VAR 0 5
11094: PUSH
11095: LD_INT 81
11097: PUSH
11098: LD_VAR 0 1
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 101
11109: PUSH
11110: LD_INT 1
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PPUSH
11121: CALL_OW 69
11125: PPUSH
11126: LD_VAR 0 4
11130: PPUSH
11131: CALL_OW 74
11135: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
11136: LD_ADDR_VAR 0 6
11140: PUSH
11141: LD_INT 81
11143: PUSH
11144: LD_VAR 0 1
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PUSH
11153: LD_INT 101
11155: PUSH
11156: LD_INT 1
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: LD_INT 2
11165: PUSH
11166: LD_INT 59
11168: PUSH
11169: EMPTY
11170: LIST
11171: PUSH
11172: LD_INT 21
11174: PUSH
11175: LD_INT 1
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: LD_INT 21
11184: PUSH
11185: LD_INT 2
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: LIST
11202: PUSH
11203: EMPTY
11204: LIST
11205: PPUSH
11206: CALL_OW 69
11210: PPUSH
11211: LD_VAR 0 4
11215: PPUSH
11216: CALL_OW 74
11220: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11221: LD_VAR 0 4
11225: PPUSH
11226: LD_VAR 0 5
11230: PPUSH
11231: CALL_OW 296
11235: PUSH
11236: LD_INT 8
11238: PLUS
11239: PUSH
11240: LD_VAR 0 4
11244: PPUSH
11245: LD_VAR 0 6
11249: PPUSH
11250: CALL_OW 296
11254: LESS
11255: IFFALSE 11273
// ComAttackUnit ( j , target1 ) else
11257: LD_VAR 0 4
11261: PPUSH
11262: LD_VAR 0 5
11266: PPUSH
11267: CALL_OW 115
11271: GO 11287
// ComAttackUnit ( j , target2 ) ;
11273: LD_VAR 0 4
11277: PPUSH
11278: LD_VAR 0 6
11282: PPUSH
11283: CALL_OW 115
// end ;
11287: GO 11087
11289: POP
11290: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11291: LD_INT 22
11293: PUSH
11294: LD_VAR 0 1
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 21
11305: PUSH
11306: LD_INT 2
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: LD_INT 24
11315: PUSH
11316: LD_INT 250
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: LIST
11327: PPUSH
11328: CALL_OW 69
11332: PUSH
11333: LD_INT 0
11335: EQUAL
11336: IFFALSE 11023
// end ;
11338: LD_VAR 0 2
11342: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11343: LD_INT 0
11345: PPUSH
11346: PPUSH
11347: PPUSH
11348: PPUSH
11349: PPUSH
11350: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11351: LD_ADDR_VAR 0 8
11355: PUSH
11356: LD_VAR 0 2
11360: PPUSH
11361: CALL_OW 313
11365: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11366: LD_ADDR_VAR 0 9
11370: PUSH
11371: LD_VAR 0 3
11375: PPUSH
11376: LD_INT 22
11378: PUSH
11379: LD_VAR 0 1
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: LD_INT 25
11390: PUSH
11391: LD_INT 2
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: PUSH
11398: LD_INT 24
11400: PUSH
11401: LD_INT 750
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: PUSH
11408: LD_INT 3
11410: PUSH
11411: LD_INT 54
11413: PUSH
11414: EMPTY
11415: LIST
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: PPUSH
11427: CALL_OW 70
11431: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11432: LD_ADDR_VAR 0 6
11436: PUSH
11437: LD_VAR 0 3
11441: PPUSH
11442: LD_INT 22
11444: PUSH
11445: LD_VAR 0 1
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 21
11456: PUSH
11457: LD_INT 3
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: LD_INT 3
11466: PUSH
11467: LD_INT 24
11469: PUSH
11470: LD_INT 1000
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: LIST
11485: PUSH
11486: EMPTY
11487: LIST
11488: PPUSH
11489: CALL_OW 70
11493: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11494: LD_VAR 0 6
11498: NOT
11499: PUSH
11500: LD_INT 22
11502: PUSH
11503: LD_VAR 0 1
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PUSH
11512: LD_INT 25
11514: PUSH
11515: LD_INT 2
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: LD_INT 24
11524: PUSH
11525: LD_INT 250
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: PPUSH
11537: CALL_OW 69
11541: NOT
11542: AND
11543: IFFALSE 11547
// exit ;
11545: GO 11744
// if buildings_list > 0 and engineerOkInside then
11547: LD_VAR 0 6
11551: PUSH
11552: LD_INT 0
11554: GREATER
11555: PUSH
11556: LD_VAR 0 8
11560: AND
11561: IFFALSE 11587
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11563: LD_VAR 0 8
11567: PPUSH
11568: LD_INT 25
11570: PUSH
11571: LD_INT 2
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PPUSH
11578: CALL_OW 72
11582: PPUSH
11583: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11587: LD_VAR 0 6
11591: PUSH
11592: LD_INT 0
11594: GREATER
11595: PUSH
11596: LD_VAR 0 9
11600: PUSH
11601: LD_INT 0
11603: GREATER
11604: AND
11605: IFFALSE 11625
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11607: LD_VAR 0 9
11611: PPUSH
11612: LD_VAR 0 6
11616: PUSH
11617: LD_INT 1
11619: ARRAY
11620: PPUSH
11621: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11625: LD_VAR 0 6
11629: PUSH
11630: LD_INT 0
11632: EQUAL
11633: PUSH
11634: LD_VAR 0 4
11638: PUSH
11639: LD_INT 0
11641: EQUAL
11642: AND
11643: PUSH
11644: LD_VAR 0 9
11648: PUSH
11649: LD_INT 0
11651: GREATER
11652: AND
11653: IFFALSE 11669
// ComEnterUnit ( engineerOkOutside , building ) ;
11655: LD_VAR 0 9
11659: PPUSH
11660: LD_VAR 0 2
11664: PPUSH
11665: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11669: LD_VAR 0 9
11673: PUSH
11674: LD_INT 0
11676: GREATER
11677: PUSH
11678: LD_VAR 0 6
11682: PUSH
11683: LD_INT 0
11685: EQUAL
11686: AND
11687: PUSH
11688: LD_VAR 0 4
11692: PUSH
11693: LD_INT 0
11695: GREATER
11696: AND
11697: IFFALSE 11744
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11699: LD_VAR 0 9
11703: PPUSH
11704: LD_VAR 0 4
11708: PUSH
11709: LD_INT 1
11711: ARRAY
11712: PPUSH
11713: LD_VAR 0 4
11717: PUSH
11718: LD_INT 2
11720: ARRAY
11721: PPUSH
11722: LD_VAR 0 4
11726: PUSH
11727: LD_INT 3
11729: ARRAY
11730: PPUSH
11731: LD_VAR 0 4
11735: PUSH
11736: LD_INT 4
11738: ARRAY
11739: PPUSH
11740: CALL_OW 145
// end ;
11744: LD_VAR 0 5
11748: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11749: LD_INT 0
11751: PPUSH
11752: PPUSH
11753: PPUSH
11754: PPUSH
11755: PPUSH
11756: PPUSH
11757: PPUSH
11758: PPUSH
11759: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11760: LD_ADDR_VAR 0 6
11764: PUSH
11765: LD_INT 22
11767: PUSH
11768: LD_VAR 0 1
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 25
11779: PUSH
11780: LD_INT 4
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PUSH
11787: LD_INT 23
11789: PUSH
11790: LD_INT 2
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: LD_INT 24
11799: PUSH
11800: LD_INT 251
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: PPUSH
11813: CALL_OW 69
11817: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11818: LD_ADDR_VAR 0 7
11822: PUSH
11823: LD_VAR 0 3
11827: PPUSH
11828: LD_INT 22
11830: PUSH
11831: LD_VAR 0 1
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PUSH
11840: LD_INT 23
11842: PUSH
11843: LD_INT 2
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 25
11852: PUSH
11853: LD_INT 4
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: LD_INT 50
11862: PUSH
11863: EMPTY
11864: LIST
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: PPUSH
11872: CALL_OW 70
11876: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11877: LD_ADDR_VAR 0 10
11881: PUSH
11882: LD_VAR 0 3
11886: PPUSH
11887: LD_INT 22
11889: PUSH
11890: LD_VAR 0 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 21
11901: PUSH
11902: LD_INT 1
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 3
11911: PUSH
11912: LD_INT 25
11914: PUSH
11915: LD_INT 3
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 3
11928: PUSH
11929: LD_INT 24
11931: PUSH
11932: LD_INT 750
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: PPUSH
11949: CALL_OW 70
11953: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11954: LD_ADDR_VAR 0 11
11958: PUSH
11959: LD_VAR 0 2
11963: PPUSH
11964: LD_INT 22
11966: PUSH
11967: LD_VAR 0 1
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 21
11978: PUSH
11979: LD_INT 1
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PUSH
11986: LD_INT 3
11988: PUSH
11989: LD_INT 25
11991: PUSH
11992: LD_INT 3
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 3
12005: PUSH
12006: LD_INT 24
12008: PUSH
12009: LD_INT 1000
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: PPUSH
12026: CALL_OW 70
12030: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
12031: LD_VAR 0 10
12035: NOT
12036: PUSH
12037: LD_VAR 0 11
12041: NOT
12042: AND
12043: PUSH
12044: LD_VAR 0 6
12048: NOT
12049: AND
12050: IFFALSE 12054
// exit ;
12052: GO 12288
// if damageUnits > 0 and sci_list > 0 then
12054: LD_VAR 0 10
12058: PUSH
12059: LD_INT 0
12061: GREATER
12062: PUSH
12063: LD_VAR 0 6
12067: PUSH
12068: LD_INT 0
12070: GREATER
12071: AND
12072: IFFALSE 12088
// ComMoveToArea ( damageUnits , healArea ) ;
12074: LD_VAR 0 10
12078: PPUSH
12079: LD_VAR 0 2
12083: PPUSH
12084: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
12088: LD_VAR 0 11
12092: PUSH
12093: LD_INT 0
12095: GREATER
12096: PUSH
12097: LD_VAR 0 6
12101: PUSH
12102: LD_INT 0
12104: GREATER
12105: AND
12106: IFFALSE 12117
// ComExitBuilding ( sci_list ) ;
12108: LD_VAR 0 6
12112: PPUSH
12113: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
12117: LD_VAR 0 11
12121: PUSH
12122: LD_INT 0
12124: GREATER
12125: PUSH
12126: LD_VAR 0 7
12130: PUSH
12131: LD_INT 0
12133: GREATER
12134: AND
12135: IFFALSE 12155
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
12137: LD_VAR 0 7
12141: PPUSH
12142: LD_VAR 0 11
12146: PUSH
12147: LD_INT 1
12149: ARRAY
12150: PPUSH
12151: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12155: LD_VAR 0 10
12159: PUSH
12160: LD_INT 0
12162: EQUAL
12163: PUSH
12164: LD_VAR 0 11
12168: PUSH
12169: LD_INT 0
12171: EQUAL
12172: AND
12173: PUSH
12174: LD_VAR 0 7
12178: PUSH
12179: LD_INT 0
12181: GREATER
12182: AND
12183: IFFALSE 12288
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12185: LD_ADDR_VAR 0 12
12189: PUSH
12190: LD_INT 22
12192: PUSH
12193: LD_VAR 0 1
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 21
12204: PUSH
12205: LD_INT 3
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PUSH
12212: LD_INT 30
12214: PUSH
12215: LD_INT 8
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: PPUSH
12227: CALL_OW 69
12231: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12232: LD_ADDR_VAR 0 13
12236: PUSH
12237: LD_INT 1
12239: PPUSH
12240: LD_VAR 0 12
12244: PPUSH
12245: CALL_OW 12
12249: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12250: LD_VAR 0 7
12254: PPUSH
12255: LD_INT 3
12257: PUSH
12258: LD_INT 60
12260: PUSH
12261: EMPTY
12262: LIST
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PPUSH
12268: CALL_OW 72
12272: PPUSH
12273: LD_VAR 0 12
12277: PUSH
12278: LD_VAR 0 13
12282: ARRAY
12283: PPUSH
12284: CALL_OW 120
// end ; end ;
12288: LD_VAR 0 5
12292: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12293: LD_INT 0
12295: PPUSH
12296: PPUSH
12297: PPUSH
12298: PPUSH
12299: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12300: LD_ADDR_VAR 0 6
12304: PUSH
12305: LD_INT 22
12307: PUSH
12308: LD_VAR 0 1
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: LD_INT 2
12319: PUSH
12320: LD_INT 30
12322: PUSH
12323: LD_INT 31
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PUSH
12330: LD_INT 30
12332: PUSH
12333: LD_INT 32
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PUSH
12340: LD_INT 30
12342: PUSH
12343: LD_INT 33
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PUSH
12350: LD_INT 30
12352: PUSH
12353: LD_INT 4
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 30
12362: PUSH
12363: LD_INT 5
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PPUSH
12382: CALL_OW 69
12386: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12387: LD_ADDR_VAR 0 7
12391: PUSH
12392: LD_INT 22
12394: PUSH
12395: LD_VAR 0 2
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PUSH
12404: LD_INT 21
12406: PUSH
12407: LD_INT 3
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 58
12416: PUSH
12417: EMPTY
12418: LIST
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: PPUSH
12425: CALL_OW 69
12429: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12430: LD_VAR 0 6
12434: PUSH
12435: LD_INT 0
12437: GREATER
12438: PUSH
12439: LD_VAR 0 7
12443: PUSH
12444: LD_INT 0
12446: GREATER
12447: AND
12448: IFFALSE 12518
// begin for i in turretsList do
12450: LD_ADDR_VAR 0 4
12454: PUSH
12455: LD_VAR 0 6
12459: PUSH
12460: FOR_IN
12461: IFFALSE 12516
// begin for j in enemyBuildings do
12463: LD_ADDR_VAR 0 5
12467: PUSH
12468: LD_VAR 0 7
12472: PUSH
12473: FOR_IN
12474: IFFALSE 12512
// begin if GetDistUnits ( i , j ) < 20 then
12476: LD_VAR 0 4
12480: PPUSH
12481: LD_VAR 0 5
12485: PPUSH
12486: CALL_OW 296
12490: PUSH
12491: LD_INT 20
12493: LESS
12494: IFFALSE 12510
// begin ComAttackUnit ( i , j ) ;
12496: LD_VAR 0 4
12500: PPUSH
12501: LD_VAR 0 5
12505: PPUSH
12506: CALL_OW 115
// end ; end ;
12510: GO 12473
12512: POP
12513: POP
// end ;
12514: GO 12460
12516: POP
12517: POP
// end ; end ;
12518: LD_VAR 0 3
12522: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12523: LD_INT 0
12525: PPUSH
12526: PPUSH
12527: PPUSH
12528: PPUSH
12529: PPUSH
12530: PPUSH
12531: PPUSH
12532: PPUSH
12533: PPUSH
12534: PPUSH
12535: PPUSH
// for i = 1 to medicCount do
12536: LD_ADDR_VAR 0 14
12540: PUSH
12541: DOUBLE
12542: LD_INT 1
12544: DEC
12545: ST_TO_ADDR
12546: LD_VAR 0 7
12550: PUSH
12551: FOR_TO
12552: IFFALSE 12634
// begin uc_side = side ;
12554: LD_ADDR_OWVAR 20
12558: PUSH
12559: LD_VAR 0 1
12563: ST_TO_ADDR
// uc_nation = nation ;
12564: LD_ADDR_OWVAR 21
12568: PUSH
12569: LD_VAR 0 2
12573: ST_TO_ADDR
// hc_name =  ;
12574: LD_ADDR_OWVAR 26
12578: PUSH
12579: LD_STRING 
12581: ST_TO_ADDR
// hc_gallery =  ;
12582: LD_ADDR_OWVAR 33
12586: PUSH
12587: LD_STRING 
12589: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12590: LD_INT 0
12592: PPUSH
12593: LD_INT 4
12595: PPUSH
12596: LD_VAR 0 8
12600: PPUSH
12601: CALL_OW 380
// un = CreateHuman ;
12605: LD_ADDR_VAR 0 16
12609: PUSH
12610: CALL_OW 44
12614: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12615: LD_VAR 0 16
12619: PPUSH
12620: LD_VAR 0 9
12624: PPUSH
12625: LD_INT 0
12627: PPUSH
12628: CALL_OW 49
// end ;
12632: GO 12551
12634: POP
12635: POP
// for i = 1 to soldierCount do
12636: LD_ADDR_VAR 0 14
12640: PUSH
12641: DOUBLE
12642: LD_INT 1
12644: DEC
12645: ST_TO_ADDR
12646: LD_VAR 0 3
12650: PUSH
12651: FOR_TO
12652: IFFALSE 12734
// begin uc_side = side ;
12654: LD_ADDR_OWVAR 20
12658: PUSH
12659: LD_VAR 0 1
12663: ST_TO_ADDR
// uc_nation = nation ;
12664: LD_ADDR_OWVAR 21
12668: PUSH
12669: LD_VAR 0 2
12673: ST_TO_ADDR
// hc_name =  ;
12674: LD_ADDR_OWVAR 26
12678: PUSH
12679: LD_STRING 
12681: ST_TO_ADDR
// hc_gallery =  ;
12682: LD_ADDR_OWVAR 33
12686: PUSH
12687: LD_STRING 
12689: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12690: LD_INT 0
12692: PPUSH
12693: LD_INT 1
12695: PPUSH
12696: LD_VAR 0 8
12700: PPUSH
12701: CALL_OW 380
// un = CreateHuman ;
12705: LD_ADDR_VAR 0 16
12709: PUSH
12710: CALL_OW 44
12714: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12715: LD_VAR 0 16
12719: PPUSH
12720: LD_VAR 0 9
12724: PPUSH
12725: LD_INT 0
12727: PPUSH
12728: CALL_OW 49
// end ;
12732: GO 12651
12734: POP
12735: POP
// for i = 1 to sniperCount do
12736: LD_ADDR_VAR 0 14
12740: PUSH
12741: DOUBLE
12742: LD_INT 1
12744: DEC
12745: ST_TO_ADDR
12746: LD_VAR 0 4
12750: PUSH
12751: FOR_TO
12752: IFFALSE 12834
// begin uc_side = side ;
12754: LD_ADDR_OWVAR 20
12758: PUSH
12759: LD_VAR 0 1
12763: ST_TO_ADDR
// uc_nation = nation ;
12764: LD_ADDR_OWVAR 21
12768: PUSH
12769: LD_VAR 0 2
12773: ST_TO_ADDR
// hc_name =  ;
12774: LD_ADDR_OWVAR 26
12778: PUSH
12779: LD_STRING 
12781: ST_TO_ADDR
// hc_gallery =  ;
12782: LD_ADDR_OWVAR 33
12786: PUSH
12787: LD_STRING 
12789: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12790: LD_INT 0
12792: PPUSH
12793: LD_INT 5
12795: PPUSH
12796: LD_VAR 0 8
12800: PPUSH
12801: CALL_OW 380
// un = CreateHuman ;
12805: LD_ADDR_VAR 0 16
12809: PUSH
12810: CALL_OW 44
12814: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12815: LD_VAR 0 16
12819: PPUSH
12820: LD_VAR 0 9
12824: PPUSH
12825: LD_INT 0
12827: PPUSH
12828: CALL_OW 49
// end ;
12832: GO 12751
12834: POP
12835: POP
// for i = 1 to bazookCount do
12836: LD_ADDR_VAR 0 14
12840: PUSH
12841: DOUBLE
12842: LD_INT 1
12844: DEC
12845: ST_TO_ADDR
12846: LD_VAR 0 5
12850: PUSH
12851: FOR_TO
12852: IFFALSE 12934
// begin uc_side = side ;
12854: LD_ADDR_OWVAR 20
12858: PUSH
12859: LD_VAR 0 1
12863: ST_TO_ADDR
// uc_nation = nation ;
12864: LD_ADDR_OWVAR 21
12868: PUSH
12869: LD_VAR 0 2
12873: ST_TO_ADDR
// hc_name =  ;
12874: LD_ADDR_OWVAR 26
12878: PUSH
12879: LD_STRING 
12881: ST_TO_ADDR
// hc_gallery =  ;
12882: LD_ADDR_OWVAR 33
12886: PUSH
12887: LD_STRING 
12889: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12890: LD_INT 0
12892: PPUSH
12893: LD_INT 9
12895: PPUSH
12896: LD_VAR 0 8
12900: PPUSH
12901: CALL_OW 380
// un = CreateHuman ;
12905: LD_ADDR_VAR 0 16
12909: PUSH
12910: CALL_OW 44
12914: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12915: LD_VAR 0 16
12919: PPUSH
12920: LD_VAR 0 9
12924: PPUSH
12925: LD_INT 0
12927: PPUSH
12928: CALL_OW 49
// end ;
12932: GO 12851
12934: POP
12935: POP
// for i = 1 to mortalCount do
12936: LD_ADDR_VAR 0 14
12940: PUSH
12941: DOUBLE
12942: LD_INT 1
12944: DEC
12945: ST_TO_ADDR
12946: LD_VAR 0 6
12950: PUSH
12951: FOR_TO
12952: IFFALSE 13034
// begin uc_side = side ;
12954: LD_ADDR_OWVAR 20
12958: PUSH
12959: LD_VAR 0 1
12963: ST_TO_ADDR
// uc_nation = nation ;
12964: LD_ADDR_OWVAR 21
12968: PUSH
12969: LD_VAR 0 2
12973: ST_TO_ADDR
// hc_name =  ;
12974: LD_ADDR_OWVAR 26
12978: PUSH
12979: LD_STRING 
12981: ST_TO_ADDR
// hc_gallery =  ;
12982: LD_ADDR_OWVAR 33
12986: PUSH
12987: LD_STRING 
12989: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12990: LD_INT 0
12992: PPUSH
12993: LD_INT 8
12995: PPUSH
12996: LD_VAR 0 8
13000: PPUSH
13001: CALL_OW 380
// un = CreateHuman ;
13005: LD_ADDR_VAR 0 16
13009: PUSH
13010: CALL_OW 44
13014: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13015: LD_VAR 0 16
13019: PPUSH
13020: LD_VAR 0 9
13024: PPUSH
13025: LD_INT 0
13027: PPUSH
13028: CALL_OW 49
// end ;
13032: GO 12951
13034: POP
13035: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
13036: LD_ADDR_VAR 0 19
13040: PUSH
13041: LD_INT 22
13043: PUSH
13044: LD_VAR 0 1
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PUSH
13053: LD_INT 2
13055: PUSH
13056: LD_INT 25
13058: PUSH
13059: LD_INT 1
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: LD_INT 25
13068: PUSH
13069: LD_INT 5
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PUSH
13076: LD_INT 25
13078: PUSH
13079: LD_INT 8
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: PUSH
13086: LD_INT 25
13088: PUSH
13089: LD_INT 9
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: PPUSH
13107: CALL_OW 69
13111: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
13112: LD_ADDR_VAR 0 18
13116: PUSH
13117: LD_INT 22
13119: PUSH
13120: LD_VAR 0 1
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 25
13131: PUSH
13132: LD_INT 4
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PPUSH
13143: CALL_OW 69
13147: ST_TO_ADDR
// for i in medic_list do
13148: LD_ADDR_VAR 0 14
13152: PUSH
13153: LD_VAR 0 18
13157: PUSH
13158: FOR_IN
13159: IFFALSE 13177
// ComMoveToArea ( i , healArea ) ;
13161: LD_VAR 0 14
13165: PPUSH
13166: LD_VAR 0 10
13170: PPUSH
13171: CALL_OW 113
13175: GO 13158
13177: POP
13178: POP
// if strategy = 1 then
13179: LD_VAR 0 12
13183: PUSH
13184: LD_INT 1
13186: EQUAL
13187: IFFALSE 13733
// begin repeat wait ( 0 0$3 ) ;
13189: LD_INT 105
13191: PPUSH
13192: CALL_OW 67
// for i in soldiersOK_list do
13196: LD_ADDR_VAR 0 14
13200: PUSH
13201: LD_VAR 0 19
13205: PUSH
13206: FOR_IN
13207: IFFALSE 13271
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13209: LD_VAR 0 14
13213: PPUSH
13214: LD_INT 91
13216: PPUSH
13217: LD_INT 63
13219: PPUSH
13220: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13224: LD_VAR 0 14
13228: PPUSH
13229: LD_INT 101
13231: PPUSH
13232: LD_INT 53
13234: PPUSH
13235: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13239: LD_VAR 0 14
13243: PPUSH
13244: LD_INT 75
13246: PPUSH
13247: LD_INT 23
13249: PPUSH
13250: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13254: LD_VAR 0 14
13258: PPUSH
13259: LD_INT 78
13261: PPUSH
13262: LD_INT 8
13264: PPUSH
13265: CALL_OW 174
// end ;
13269: GO 13206
13271: POP
13272: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13273: LD_INT 12
13275: PPUSH
13276: LD_INT 22
13278: PUSH
13279: LD_VAR 0 1
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PPUSH
13288: CALL_OW 70
13292: PUSH
13293: LD_INT 2
13295: GREATER
13296: IFFALSE 13189
// repeat wait ( 0 0$1 ) ;
13298: LD_INT 35
13300: PPUSH
13301: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13305: LD_ADDR_VAR 0 17
13309: PUSH
13310: LD_INT 22
13312: PUSH
13313: LD_VAR 0 1
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 1
13324: PUSH
13325: LD_INT 3
13327: PUSH
13328: LD_INT 24
13330: PUSH
13331: LD_INT 550
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 24
13344: PUSH
13345: LD_INT 250
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PPUSH
13361: CALL_OW 69
13365: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13366: LD_ADDR_VAR 0 19
13370: PUSH
13371: LD_INT 22
13373: PUSH
13374: LD_VAR 0 1
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: LD_INT 25
13388: PUSH
13389: LD_INT 1
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 25
13398: PUSH
13399: LD_INT 5
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: LD_INT 25
13408: PUSH
13409: LD_INT 8
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: LD_INT 25
13418: PUSH
13419: LD_INT 9
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 24
13435: PUSH
13436: LD_INT 1000
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: LIST
13447: PPUSH
13448: CALL_OW 69
13452: ST_TO_ADDR
// if medicCount > 0 then
13453: LD_VAR 0 7
13457: PUSH
13458: LD_INT 0
13460: GREATER
13461: IFFALSE 13535
// begin if damageUnit_list > 0 then
13463: LD_VAR 0 17
13467: PUSH
13468: LD_INT 0
13470: GREATER
13471: IFFALSE 13535
// begin for i in damageUnit_list do
13473: LD_ADDR_VAR 0 14
13477: PUSH
13478: LD_VAR 0 17
13482: PUSH
13483: FOR_IN
13484: IFFALSE 13533
// begin ComMoveToArea ( i , healArea ) ;
13486: LD_VAR 0 14
13490: PPUSH
13491: LD_VAR 0 10
13495: PPUSH
13496: CALL_OW 113
// for j in medic_list do
13500: LD_ADDR_VAR 0 15
13504: PUSH
13505: LD_VAR 0 18
13509: PUSH
13510: FOR_IN
13511: IFFALSE 13529
// AddComHeal ( j , i ) ;
13513: LD_VAR 0 15
13517: PPUSH
13518: LD_VAR 0 14
13522: PPUSH
13523: CALL_OW 188
13527: GO 13510
13529: POP
13530: POP
// end ;
13531: GO 13483
13533: POP
13534: POP
// end ; end ; for i in soldiersOK_list do
13535: LD_ADDR_VAR 0 14
13539: PUSH
13540: LD_VAR 0 19
13544: PUSH
13545: FOR_IN
13546: IFFALSE 13722
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13548: LD_ADDR_VAR 0 22
13552: PUSH
13553: LD_INT 22
13555: PUSH
13556: LD_VAR 0 11
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PPUSH
13565: CALL_OW 69
13569: PPUSH
13570: LD_VAR 0 14
13574: PPUSH
13575: CALL_OW 74
13579: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13580: LD_ADDR_VAR 0 23
13584: PUSH
13585: LD_INT 22
13587: PUSH
13588: LD_VAR 0 11
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PUSH
13597: LD_INT 2
13599: PUSH
13600: LD_INT 59
13602: PUSH
13603: EMPTY
13604: LIST
13605: PUSH
13606: LD_INT 21
13608: PUSH
13609: LD_INT 1
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: LD_INT 21
13618: PUSH
13619: LD_INT 2
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: EMPTY
13637: LIST
13638: PPUSH
13639: CALL_OW 69
13643: PPUSH
13644: LD_VAR 0 14
13648: PPUSH
13649: CALL_OW 74
13653: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13654: LD_VAR 0 14
13658: PPUSH
13659: LD_VAR 0 22
13663: PPUSH
13664: CALL_OW 296
13668: PUSH
13669: LD_INT 6
13671: PLUS
13672: PUSH
13673: LD_VAR 0 14
13677: PPUSH
13678: LD_VAR 0 23
13682: PPUSH
13683: CALL_OW 296
13687: LESS
13688: IFFALSE 13706
// begin ComAttackUnit ( i , target1 ) ;
13690: LD_VAR 0 14
13694: PPUSH
13695: LD_VAR 0 22
13699: PPUSH
13700: CALL_OW 115
// end else
13704: GO 13720
// begin ComAttackUnit ( i , target2 ) ;
13706: LD_VAR 0 14
13710: PPUSH
13711: LD_VAR 0 23
13715: PPUSH
13716: CALL_OW 115
// end ; end ;
13720: GO 13545
13722: POP
13723: POP
// until soldiersOK_list = [ ] ;
13724: LD_VAR 0 19
13728: PUSH
13729: EMPTY
13730: EQUAL
13731: IFFALSE 13298
// end ; if strategy = 2 then
13733: LD_VAR 0 12
13737: PUSH
13738: LD_INT 2
13740: EQUAL
13741: IFFALSE 14257
// begin repeat wait ( 0 0$1 ) ;
13743: LD_INT 35
13745: PPUSH
13746: CALL_OW 67
// for i in soldiersOK_list do
13750: LD_ADDR_VAR 0 14
13754: PUSH
13755: LD_VAR 0 19
13759: PUSH
13760: FOR_IN
13761: IFFALSE 13795
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13763: LD_VAR 0 14
13767: PPUSH
13768: LD_INT 91
13770: PPUSH
13771: LD_INT 63
13773: PPUSH
13774: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13778: LD_VAR 0 14
13782: PPUSH
13783: LD_INT 75
13785: PPUSH
13786: LD_INT 33
13788: PPUSH
13789: CALL_OW 174
// end ;
13793: GO 13760
13795: POP
13796: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13797: LD_INT 13
13799: PPUSH
13800: LD_INT 22
13802: PUSH
13803: LD_VAR 0 1
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PPUSH
13812: CALL_OW 70
13816: PUSH
13817: LD_INT 2
13819: GREATER
13820: IFFALSE 13743
// repeat wait ( 0 0$3 ) ;
13822: LD_INT 105
13824: PPUSH
13825: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13829: LD_ADDR_VAR 0 17
13833: PUSH
13834: LD_INT 22
13836: PUSH
13837: LD_VAR 0 1
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PUSH
13846: LD_INT 1
13848: PUSH
13849: LD_INT 3
13851: PUSH
13852: LD_INT 24
13854: PUSH
13855: LD_INT 550
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PUSH
13866: LD_INT 24
13868: PUSH
13869: LD_INT 250
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: LIST
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: PPUSH
13885: CALL_OW 69
13889: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13890: LD_ADDR_VAR 0 19
13894: PUSH
13895: LD_INT 22
13897: PUSH
13898: LD_VAR 0 1
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 2
13909: PUSH
13910: LD_INT 25
13912: PUSH
13913: LD_INT 1
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 25
13922: PUSH
13923: LD_INT 5
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: LD_INT 25
13932: PUSH
13933: LD_INT 8
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: LD_INT 25
13942: PUSH
13943: LD_INT 9
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: PUSH
13957: LD_INT 24
13959: PUSH
13960: LD_INT 1000
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: LIST
13971: PPUSH
13972: CALL_OW 69
13976: ST_TO_ADDR
// if medicCount > 0 then
13977: LD_VAR 0 7
13981: PUSH
13982: LD_INT 0
13984: GREATER
13985: IFFALSE 14059
// begin if damageUnit_list > 0 then
13987: LD_VAR 0 17
13991: PUSH
13992: LD_INT 0
13994: GREATER
13995: IFFALSE 14059
// begin for i in damageUnit_list do
13997: LD_ADDR_VAR 0 14
14001: PUSH
14002: LD_VAR 0 17
14006: PUSH
14007: FOR_IN
14008: IFFALSE 14057
// begin ComMoveToArea ( i , healArea ) ;
14010: LD_VAR 0 14
14014: PPUSH
14015: LD_VAR 0 10
14019: PPUSH
14020: CALL_OW 113
// for j in medic_list do
14024: LD_ADDR_VAR 0 15
14028: PUSH
14029: LD_VAR 0 18
14033: PUSH
14034: FOR_IN
14035: IFFALSE 14053
// AddComHeal ( j , i ) ;
14037: LD_VAR 0 15
14041: PPUSH
14042: LD_VAR 0 14
14046: PPUSH
14047: CALL_OW 188
14051: GO 14034
14053: POP
14054: POP
// end ;
14055: GO 14007
14057: POP
14058: POP
// end ; end ; for i in soldiersOK_list do
14059: LD_ADDR_VAR 0 14
14063: PUSH
14064: LD_VAR 0 19
14068: PUSH
14069: FOR_IN
14070: IFFALSE 14246
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14072: LD_ADDR_VAR 0 22
14076: PUSH
14077: LD_INT 22
14079: PUSH
14080: LD_VAR 0 11
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PPUSH
14089: CALL_OW 69
14093: PPUSH
14094: LD_VAR 0 14
14098: PPUSH
14099: CALL_OW 74
14103: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14104: LD_ADDR_VAR 0 23
14108: PUSH
14109: LD_INT 22
14111: PUSH
14112: LD_VAR 0 11
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 2
14123: PUSH
14124: LD_INT 59
14126: PUSH
14127: EMPTY
14128: LIST
14129: PUSH
14130: LD_INT 21
14132: PUSH
14133: LD_INT 1
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PUSH
14140: LD_INT 21
14142: PUSH
14143: LD_INT 2
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PUSH
14160: EMPTY
14161: LIST
14162: PPUSH
14163: CALL_OW 69
14167: PPUSH
14168: LD_VAR 0 14
14172: PPUSH
14173: CALL_OW 74
14177: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14178: LD_VAR 0 14
14182: PPUSH
14183: LD_VAR 0 22
14187: PPUSH
14188: CALL_OW 296
14192: PUSH
14193: LD_INT 6
14195: PLUS
14196: PUSH
14197: LD_VAR 0 14
14201: PPUSH
14202: LD_VAR 0 23
14206: PPUSH
14207: CALL_OW 296
14211: LESS
14212: IFFALSE 14230
// begin ComAttackUnit ( i , target1 ) ;
14214: LD_VAR 0 14
14218: PPUSH
14219: LD_VAR 0 22
14223: PPUSH
14224: CALL_OW 115
// end else
14228: GO 14244
// begin ComAttackUnit ( i , target2 ) ;
14230: LD_VAR 0 14
14234: PPUSH
14235: LD_VAR 0 23
14239: PPUSH
14240: CALL_OW 115
// end ; end ;
14244: GO 14069
14246: POP
14247: POP
// until soldiersOK_list = [ ] ;
14248: LD_VAR 0 19
14252: PUSH
14253: EMPTY
14254: EQUAL
14255: IFFALSE 13822
// end ; if strategy = 3 then
14257: LD_VAR 0 12
14261: PUSH
14262: LD_INT 3
14264: EQUAL
14265: IFFALSE 14811
// begin repeat wait ( 0 0$3 ) ;
14267: LD_INT 105
14269: PPUSH
14270: CALL_OW 67
// for i in soldiersOK_list do
14274: LD_ADDR_VAR 0 14
14278: PUSH
14279: LD_VAR 0 19
14283: PUSH
14284: FOR_IN
14285: IFFALSE 14349
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14287: LD_VAR 0 14
14291: PPUSH
14292: LD_INT 63
14294: PPUSH
14295: LD_INT 71
14297: PPUSH
14298: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14302: LD_VAR 0 14
14306: PPUSH
14307: LD_INT 35
14309: PPUSH
14310: LD_INT 44
14312: PPUSH
14313: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14317: LD_VAR 0 14
14321: PPUSH
14322: LD_INT 23
14324: PPUSH
14325: LD_INT 18
14327: PPUSH
14328: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14332: LD_VAR 0 14
14336: PPUSH
14337: LD_INT 26
14339: PPUSH
14340: LD_INT 12
14342: PPUSH
14343: CALL_OW 174
// end ;
14347: GO 14284
14349: POP
14350: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14351: LD_INT 14
14353: PPUSH
14354: LD_INT 22
14356: PUSH
14357: LD_VAR 0 1
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: PPUSH
14366: CALL_OW 70
14370: PUSH
14371: LD_INT 2
14373: GREATER
14374: IFFALSE 14267
// repeat wait ( 0 0$1 ) ;
14376: LD_INT 35
14378: PPUSH
14379: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14383: LD_ADDR_VAR 0 17
14387: PUSH
14388: LD_INT 22
14390: PUSH
14391: LD_VAR 0 1
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 1
14402: PUSH
14403: LD_INT 3
14405: PUSH
14406: LD_INT 24
14408: PUSH
14409: LD_INT 550
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PUSH
14420: LD_INT 24
14422: PUSH
14423: LD_INT 250
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PPUSH
14439: CALL_OW 69
14443: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14444: LD_ADDR_VAR 0 19
14448: PUSH
14449: LD_INT 22
14451: PUSH
14452: LD_VAR 0 1
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 2
14463: PUSH
14464: LD_INT 25
14466: PUSH
14467: LD_INT 1
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 25
14476: PUSH
14477: LD_INT 5
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: LD_INT 25
14486: PUSH
14487: LD_INT 8
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: LD_INT 25
14496: PUSH
14497: LD_INT 9
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: PUSH
14511: LD_INT 24
14513: PUSH
14514: LD_INT 1000
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: LIST
14525: PPUSH
14526: CALL_OW 69
14530: ST_TO_ADDR
// if medicCount > 0 then
14531: LD_VAR 0 7
14535: PUSH
14536: LD_INT 0
14538: GREATER
14539: IFFALSE 14613
// begin if damageUnit_list > 0 then
14541: LD_VAR 0 17
14545: PUSH
14546: LD_INT 0
14548: GREATER
14549: IFFALSE 14613
// begin for i in damageUnit_list do
14551: LD_ADDR_VAR 0 14
14555: PUSH
14556: LD_VAR 0 17
14560: PUSH
14561: FOR_IN
14562: IFFALSE 14611
// begin ComMoveToArea ( i , healArea ) ;
14564: LD_VAR 0 14
14568: PPUSH
14569: LD_VAR 0 10
14573: PPUSH
14574: CALL_OW 113
// for j in medic_list do
14578: LD_ADDR_VAR 0 15
14582: PUSH
14583: LD_VAR 0 18
14587: PUSH
14588: FOR_IN
14589: IFFALSE 14607
// AddComHeal ( j , i ) ;
14591: LD_VAR 0 15
14595: PPUSH
14596: LD_VAR 0 14
14600: PPUSH
14601: CALL_OW 188
14605: GO 14588
14607: POP
14608: POP
// end ;
14609: GO 14561
14611: POP
14612: POP
// end ; end ; for i in soldiersOK_list do
14613: LD_ADDR_VAR 0 14
14617: PUSH
14618: LD_VAR 0 19
14622: PUSH
14623: FOR_IN
14624: IFFALSE 14800
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14626: LD_ADDR_VAR 0 22
14630: PUSH
14631: LD_INT 22
14633: PUSH
14634: LD_VAR 0 11
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PPUSH
14643: CALL_OW 69
14647: PPUSH
14648: LD_VAR 0 14
14652: PPUSH
14653: CALL_OW 74
14657: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14658: LD_ADDR_VAR 0 23
14662: PUSH
14663: LD_INT 22
14665: PUSH
14666: LD_VAR 0 11
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: PUSH
14675: LD_INT 2
14677: PUSH
14678: LD_INT 59
14680: PUSH
14681: EMPTY
14682: LIST
14683: PUSH
14684: LD_INT 21
14686: PUSH
14687: LD_INT 1
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: LD_INT 21
14696: PUSH
14697: LD_INT 2
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: EMPTY
14715: LIST
14716: PPUSH
14717: CALL_OW 69
14721: PPUSH
14722: LD_VAR 0 14
14726: PPUSH
14727: CALL_OW 74
14731: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14732: LD_VAR 0 14
14736: PPUSH
14737: LD_VAR 0 22
14741: PPUSH
14742: CALL_OW 296
14746: PUSH
14747: LD_INT 6
14749: PLUS
14750: PUSH
14751: LD_VAR 0 14
14755: PPUSH
14756: LD_VAR 0 23
14760: PPUSH
14761: CALL_OW 296
14765: LESS
14766: IFFALSE 14784
// begin ComAttackUnit ( i , target1 ) ;
14768: LD_VAR 0 14
14772: PPUSH
14773: LD_VAR 0 22
14777: PPUSH
14778: CALL_OW 115
// end else
14782: GO 14798
// begin ComAttackUnit ( i , target2 ) ;
14784: LD_VAR 0 14
14788: PPUSH
14789: LD_VAR 0 23
14793: PPUSH
14794: CALL_OW 115
// end ; end ;
14798: GO 14623
14800: POP
14801: POP
// until soldiersOK_list = [ ] ;
14802: LD_VAR 0 19
14806: PUSH
14807: EMPTY
14808: EQUAL
14809: IFFALSE 14376
// end ; end ;
14811: LD_VAR 0 13
14815: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14816: LD_INT 0
14818: PPUSH
14819: PPUSH
14820: PPUSH
14821: PPUSH
14822: PPUSH
14823: PPUSH
14824: PPUSH
14825: PPUSH
14826: PPUSH
14827: PPUSH
14828: PPUSH
// amChassisTab = [ ] ;
14829: LD_ADDR_VAR 0 19
14833: PUSH
14834: EMPTY
14835: ST_TO_ADDR
// arChassisTab = [ ] ;
14836: LD_ADDR_VAR 0 18
14840: PUSH
14841: EMPTY
14842: ST_TO_ADDR
// ruChassisTab = [ ] ;
14843: LD_ADDR_VAR 0 17
14847: PUSH
14848: EMPTY
14849: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14850: LD_INT 35
14852: PPUSH
14853: CALL_OW 67
// if nation = 1 then
14857: LD_VAR 0 5
14861: PUSH
14862: LD_INT 1
14864: EQUAL
14865: IFFALSE 15356
// begin uc_side = side ;
14867: LD_ADDR_OWVAR 20
14871: PUSH
14872: LD_VAR 0 2
14876: ST_TO_ADDR
// uc_nation = nation ;
14877: LD_ADDR_OWVAR 21
14881: PUSH
14882: LD_VAR 0 5
14886: ST_TO_ADDR
// vc_engine = vehengine ;
14887: LD_ADDR_OWVAR 39
14891: PUSH
14892: LD_VAR 0 6
14896: ST_TO_ADDR
// vc_control = vehcontrol ;
14897: LD_ADDR_OWVAR 38
14901: PUSH
14902: LD_VAR 0 7
14906: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14907: LD_ADDR_OWVAR 40
14911: PUSH
14912: LD_VAR 0 10
14916: PUSH
14917: LD_INT 1
14919: PPUSH
14920: LD_VAR 0 10
14924: PPUSH
14925: CALL_OW 12
14929: ARRAY
14930: ST_TO_ADDR
// for j = 1 to AMWeapon do
14931: LD_ADDR_VAR 0 14
14935: PUSH
14936: DOUBLE
14937: LD_INT 1
14939: DEC
14940: ST_TO_ADDR
14941: LD_VAR 0 10
14945: PUSH
14946: FOR_TO
14947: IFFALSE 15248
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14949: LD_VAR 0 10
14953: PUSH
14954: LD_VAR 0 14
14958: ARRAY
14959: PUSH
14960: LD_INT 2
14962: EQUAL
14963: PUSH
14964: LD_VAR 0 10
14968: PUSH
14969: LD_VAR 0 14
14973: ARRAY
14974: PUSH
14975: LD_INT 3
14977: EQUAL
14978: OR
14979: IFFALSE 15032
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14981: LD_ADDR_VAR 0 19
14985: PUSH
14986: LD_INT 1
14988: PUSH
14989: LD_INT 2
14991: PUSH
14992: LD_INT 3
14994: PUSH
14995: LD_INT 4
14997: PUSH
14998: LD_INT 5
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15008: LD_ADDR_OWVAR 37
15012: PUSH
15013: LD_VAR 0 19
15017: PUSH
15018: LD_INT 1
15020: PPUSH
15021: LD_VAR 0 19
15025: PPUSH
15026: CALL_OW 12
15030: ARRAY
15031: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15032: LD_VAR 0 10
15036: PUSH
15037: LD_VAR 0 14
15041: ARRAY
15042: PUSH
15043: LD_INT 4
15045: EQUAL
15046: PUSH
15047: LD_VAR 0 10
15051: PUSH
15052: LD_VAR 0 14
15056: ARRAY
15057: PUSH
15058: LD_INT 5
15060: EQUAL
15061: OR
15062: PUSH
15063: LD_VAR 0 10
15067: PUSH
15068: LD_VAR 0 14
15072: ARRAY
15073: PUSH
15074: LD_INT 9
15076: EQUAL
15077: OR
15078: PUSH
15079: LD_VAR 0 10
15083: PUSH
15084: LD_VAR 0 14
15088: ARRAY
15089: PUSH
15090: LD_INT 11
15092: EQUAL
15093: OR
15094: PUSH
15095: LD_VAR 0 10
15099: PUSH
15100: LD_VAR 0 14
15104: ARRAY
15105: PUSH
15106: LD_INT 7
15108: EQUAL
15109: OR
15110: IFFALSE 15159
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15112: LD_ADDR_VAR 0 19
15116: PUSH
15117: LD_INT 2
15119: PUSH
15120: LD_INT 3
15122: PUSH
15123: LD_INT 4
15125: PUSH
15126: LD_INT 5
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15135: LD_ADDR_OWVAR 37
15139: PUSH
15140: LD_VAR 0 19
15144: PUSH
15145: LD_INT 1
15147: PPUSH
15148: LD_VAR 0 19
15152: PPUSH
15153: CALL_OW 12
15157: ARRAY
15158: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15159: LD_VAR 0 10
15163: PUSH
15164: LD_VAR 0 14
15168: ARRAY
15169: PUSH
15170: LD_INT 8
15172: EQUAL
15173: PUSH
15174: LD_VAR 0 10
15178: PUSH
15179: LD_VAR 0 14
15183: ARRAY
15184: PUSH
15185: LD_INT 6
15187: EQUAL
15188: OR
15189: PUSH
15190: LD_VAR 0 10
15194: PUSH
15195: LD_VAR 0 14
15199: ARRAY
15200: PUSH
15201: LD_INT 10
15203: EQUAL
15204: OR
15205: IFFALSE 15246
// begin amChassisTab = [ 4 , 5 ] ;
15207: LD_ADDR_VAR 0 19
15211: PUSH
15212: LD_INT 4
15214: PUSH
15215: LD_INT 5
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15222: LD_ADDR_OWVAR 37
15226: PUSH
15227: LD_VAR 0 19
15231: PUSH
15232: LD_INT 1
15234: PPUSH
15235: LD_VAR 0 19
15239: PPUSH
15240: CALL_OW 12
15244: ARRAY
15245: ST_TO_ADDR
// end ; end ;
15246: GO 14946
15248: POP
15249: POP
// veh = CreateVehicle ;
15250: LD_ADDR_VAR 0 16
15254: PUSH
15255: CALL_OW 45
15259: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15260: LD_VAR 0 16
15264: PPUSH
15265: LD_VAR 0 1
15269: PPUSH
15270: LD_INT 0
15272: PPUSH
15273: CALL_OW 49
// if vehControl = 1 then
15277: LD_VAR 0 7
15281: PUSH
15282: LD_INT 1
15284: EQUAL
15285: IFFALSE 15342
// begin hc_gallery =  ;
15287: LD_ADDR_OWVAR 33
15291: PUSH
15292: LD_STRING 
15294: ST_TO_ADDR
// hc_name =  ;
15295: LD_ADDR_OWVAR 26
15299: PUSH
15300: LD_STRING 
15302: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15303: LD_INT 0
15305: PPUSH
15306: LD_INT 3
15308: PPUSH
15309: LD_VAR 0 4
15313: PPUSH
15314: CALL_OW 380
// un = CreateHuman ;
15318: LD_ADDR_VAR 0 15
15322: PUSH
15323: CALL_OW 44
15327: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15328: LD_VAR 0 15
15332: PPUSH
15333: LD_VAR 0 16
15337: PPUSH
15338: CALL_OW 52
// end ; i = i + 1 ;
15342: LD_ADDR_VAR 0 13
15346: PUSH
15347: LD_VAR 0 13
15351: PUSH
15352: LD_INT 1
15354: PLUS
15355: ST_TO_ADDR
// end ; if nation = 2 then
15356: LD_VAR 0 5
15360: PUSH
15361: LD_INT 2
15363: EQUAL
15364: IFFALSE 15788
// begin uc_side = side ;
15366: LD_ADDR_OWVAR 20
15370: PUSH
15371: LD_VAR 0 2
15375: ST_TO_ADDR
// uc_nation = nation ;
15376: LD_ADDR_OWVAR 21
15380: PUSH
15381: LD_VAR 0 5
15385: ST_TO_ADDR
// vc_engine = vehengine ;
15386: LD_ADDR_OWVAR 39
15390: PUSH
15391: LD_VAR 0 6
15395: ST_TO_ADDR
// vc_control = vehcontrol ;
15396: LD_ADDR_OWVAR 38
15400: PUSH
15401: LD_VAR 0 7
15405: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15406: LD_ADDR_OWVAR 40
15410: PUSH
15411: LD_VAR 0 9
15415: PUSH
15416: LD_INT 1
15418: PPUSH
15419: LD_VAR 0 9
15423: PPUSH
15424: CALL_OW 12
15428: ARRAY
15429: ST_TO_ADDR
// for j = 1 to ARWeapons do
15430: LD_ADDR_VAR 0 14
15434: PUSH
15435: DOUBLE
15436: LD_INT 1
15438: DEC
15439: ST_TO_ADDR
15440: LD_VAR 0 9
15444: PUSH
15445: FOR_TO
15446: IFFALSE 15680
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15448: LD_VAR 0 9
15452: PUSH
15453: LD_VAR 0 14
15457: ARRAY
15458: PUSH
15459: LD_INT 24
15461: EQUAL
15462: PUSH
15463: LD_VAR 0 9
15467: PUSH
15468: LD_VAR 0 14
15472: ARRAY
15473: PUSH
15474: LD_INT 22
15476: EQUAL
15477: OR
15478: PUSH
15479: LD_VAR 0 9
15483: PUSH
15484: LD_VAR 0 14
15488: ARRAY
15489: PUSH
15490: LD_INT 23
15492: EQUAL
15493: OR
15494: PUSH
15495: LD_VAR 0 9
15499: PUSH
15500: LD_VAR 0 14
15504: ARRAY
15505: PUSH
15506: LD_INT 30
15508: EQUAL
15509: OR
15510: IFFALSE 15559
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15512: LD_ADDR_VAR 0 18
15516: PUSH
15517: LD_INT 11
15519: PUSH
15520: LD_INT 12
15522: PUSH
15523: LD_INT 13
15525: PUSH
15526: LD_INT 14
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15535: LD_ADDR_OWVAR 37
15539: PUSH
15540: LD_VAR 0 18
15544: PUSH
15545: LD_INT 1
15547: PPUSH
15548: LD_VAR 0 18
15552: PPUSH
15553: CALL_OW 12
15557: ARRAY
15558: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15559: LD_VAR 0 9
15563: PUSH
15564: LD_VAR 0 14
15568: ARRAY
15569: PUSH
15570: LD_INT 29
15572: EQUAL
15573: PUSH
15574: LD_VAR 0 9
15578: PUSH
15579: LD_VAR 0 14
15583: ARRAY
15584: PUSH
15585: LD_INT 28
15587: EQUAL
15588: OR
15589: PUSH
15590: LD_VAR 0 9
15594: PUSH
15595: LD_VAR 0 14
15599: ARRAY
15600: PUSH
15601: LD_INT 27
15603: EQUAL
15604: OR
15605: PUSH
15606: LD_VAR 0 9
15610: PUSH
15611: LD_VAR 0 14
15615: ARRAY
15616: PUSH
15617: LD_INT 26
15619: EQUAL
15620: OR
15621: PUSH
15622: LD_VAR 0 9
15626: PUSH
15627: LD_VAR 0 14
15631: ARRAY
15632: PUSH
15633: LD_INT 25
15635: EQUAL
15636: OR
15637: IFFALSE 15678
// begin arChassisTab = [ 13 , 14 ] ;
15639: LD_ADDR_VAR 0 18
15643: PUSH
15644: LD_INT 13
15646: PUSH
15647: LD_INT 14
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15654: LD_ADDR_OWVAR 37
15658: PUSH
15659: LD_VAR 0 18
15663: PUSH
15664: LD_INT 1
15666: PPUSH
15667: LD_VAR 0 18
15671: PPUSH
15672: CALL_OW 12
15676: ARRAY
15677: ST_TO_ADDR
// end ; end ;
15678: GO 15445
15680: POP
15681: POP
// veh = CreateVehicle ;
15682: LD_ADDR_VAR 0 16
15686: PUSH
15687: CALL_OW 45
15691: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15692: LD_VAR 0 16
15696: PPUSH
15697: LD_VAR 0 1
15701: PPUSH
15702: LD_INT 0
15704: PPUSH
15705: CALL_OW 49
// if vehcontrol = 1 then
15709: LD_VAR 0 7
15713: PUSH
15714: LD_INT 1
15716: EQUAL
15717: IFFALSE 15774
// begin hc_gallery =  ;
15719: LD_ADDR_OWVAR 33
15723: PUSH
15724: LD_STRING 
15726: ST_TO_ADDR
// hc_name =  ;
15727: LD_ADDR_OWVAR 26
15731: PUSH
15732: LD_STRING 
15734: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15735: LD_INT 0
15737: PPUSH
15738: LD_INT 3
15740: PPUSH
15741: LD_VAR 0 4
15745: PPUSH
15746: CALL_OW 380
// un = CreateHuman ;
15750: LD_ADDR_VAR 0 15
15754: PUSH
15755: CALL_OW 44
15759: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15760: LD_VAR 0 15
15764: PPUSH
15765: LD_VAR 0 16
15769: PPUSH
15770: CALL_OW 52
// end ; i = i + 1 ;
15774: LD_ADDR_VAR 0 13
15778: PUSH
15779: LD_VAR 0 13
15783: PUSH
15784: LD_INT 1
15786: PLUS
15787: ST_TO_ADDR
// end ; if nation = 3 then
15788: LD_VAR 0 5
15792: PUSH
15793: LD_INT 3
15795: EQUAL
15796: IFFALSE 16188
// begin uc_side = side ;
15798: LD_ADDR_OWVAR 20
15802: PUSH
15803: LD_VAR 0 2
15807: ST_TO_ADDR
// uc_nation = nation ;
15808: LD_ADDR_OWVAR 21
15812: PUSH
15813: LD_VAR 0 5
15817: ST_TO_ADDR
// vc_engine = vehengine ;
15818: LD_ADDR_OWVAR 39
15822: PUSH
15823: LD_VAR 0 6
15827: ST_TO_ADDR
// vc_control = vehcontrol ;
15828: LD_ADDR_OWVAR 38
15832: PUSH
15833: LD_VAR 0 7
15837: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15838: LD_ADDR_OWVAR 40
15842: PUSH
15843: LD_VAR 0 8
15847: PUSH
15848: LD_INT 1
15850: PPUSH
15851: LD_VAR 0 8
15855: PPUSH
15856: CALL_OW 12
15860: ARRAY
15861: ST_TO_ADDR
// for j = 1 to RuWeapons do
15862: LD_ADDR_VAR 0 14
15866: PUSH
15867: DOUBLE
15868: LD_INT 1
15870: DEC
15871: ST_TO_ADDR
15872: LD_VAR 0 8
15876: PUSH
15877: FOR_TO
15878: IFFALSE 16080
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15880: LD_VAR 0 8
15884: PUSH
15885: LD_VAR 0 14
15889: ARRAY
15890: PUSH
15891: LD_INT 42
15893: EQUAL
15894: PUSH
15895: LD_VAR 0 8
15899: PUSH
15900: LD_VAR 0 14
15904: ARRAY
15905: PUSH
15906: LD_INT 43
15908: EQUAL
15909: OR
15910: PUSH
15911: LD_VAR 0 8
15915: PUSH
15916: LD_VAR 0 14
15920: ARRAY
15921: PUSH
15922: LD_INT 44
15924: EQUAL
15925: OR
15926: PUSH
15927: LD_VAR 0 8
15931: PUSH
15932: LD_VAR 0 14
15936: ARRAY
15937: PUSH
15938: LD_INT 45
15940: EQUAL
15941: OR
15942: PUSH
15943: LD_VAR 0 8
15947: PUSH
15948: LD_VAR 0 14
15952: ARRAY
15953: PUSH
15954: LD_INT 49
15956: EQUAL
15957: OR
15958: IFFALSE 16007
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15960: LD_ADDR_VAR 0 17
15964: PUSH
15965: LD_INT 21
15967: PUSH
15968: LD_INT 22
15970: PUSH
15971: LD_INT 23
15973: PUSH
15974: LD_INT 24
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15983: LD_ADDR_OWVAR 37
15987: PUSH
15988: LD_VAR 0 17
15992: PUSH
15993: LD_INT 1
15995: PPUSH
15996: LD_VAR 0 17
16000: PPUSH
16001: CALL_OW 12
16005: ARRAY
16006: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16007: LD_VAR 0 8
16011: PUSH
16012: LD_VAR 0 14
16016: ARRAY
16017: PUSH
16018: LD_INT 46
16020: EQUAL
16021: PUSH
16022: LD_VAR 0 8
16026: PUSH
16027: LD_VAR 0 14
16031: ARRAY
16032: PUSH
16033: LD_INT 47
16035: EQUAL
16036: OR
16037: IFFALSE 16078
// begin ruChassisTab = [ 23 , 24 ] ;
16039: LD_ADDR_VAR 0 17
16043: PUSH
16044: LD_INT 23
16046: PUSH
16047: LD_INT 24
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16054: LD_ADDR_OWVAR 37
16058: PUSH
16059: LD_VAR 0 17
16063: PUSH
16064: LD_INT 1
16066: PPUSH
16067: LD_VAR 0 17
16071: PPUSH
16072: CALL_OW 12
16076: ARRAY
16077: ST_TO_ADDR
// end ; end ;
16078: GO 15877
16080: POP
16081: POP
// veh = CreateVehicle ;
16082: LD_ADDR_VAR 0 16
16086: PUSH
16087: CALL_OW 45
16091: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16092: LD_VAR 0 16
16096: PPUSH
16097: LD_VAR 0 1
16101: PPUSH
16102: LD_INT 0
16104: PPUSH
16105: CALL_OW 49
// if vehcontrol = 1 then
16109: LD_VAR 0 7
16113: PUSH
16114: LD_INT 1
16116: EQUAL
16117: IFFALSE 16174
// begin hc_gallery =  ;
16119: LD_ADDR_OWVAR 33
16123: PUSH
16124: LD_STRING 
16126: ST_TO_ADDR
// hc_name =  ;
16127: LD_ADDR_OWVAR 26
16131: PUSH
16132: LD_STRING 
16134: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16135: LD_INT 0
16137: PPUSH
16138: LD_INT 3
16140: PPUSH
16141: LD_VAR 0 4
16145: PPUSH
16146: CALL_OW 380
// un = CreateHuman ;
16150: LD_ADDR_VAR 0 15
16154: PUSH
16155: CALL_OW 44
16159: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16160: LD_VAR 0 15
16164: PPUSH
16165: LD_VAR 0 16
16169: PPUSH
16170: CALL_OW 52
// end ; i = i + 1 ;
16174: LD_ADDR_VAR 0 13
16178: PUSH
16179: LD_VAR 0 13
16183: PUSH
16184: LD_INT 1
16186: PLUS
16187: ST_TO_ADDR
// end ; until i = vehCount ;
16188: LD_VAR 0 13
16192: PUSH
16193: LD_VAR 0 3
16197: EQUAL
16198: IFFALSE 14850
// repeat wait ( 0 0$1 ) ;
16200: LD_INT 35
16202: PPUSH
16203: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16207: LD_ADDR_VAR 0 20
16211: PUSH
16212: LD_INT 22
16214: PUSH
16215: LD_VAR 0 2
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: LD_INT 21
16226: PUSH
16227: LD_INT 2
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PUSH
16234: LD_INT 24
16236: PUSH
16237: LD_INT 250
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: LIST
16248: PPUSH
16249: CALL_OW 69
16253: ST_TO_ADDR
// if vehicleOK_list > 0 then
16254: LD_VAR 0 20
16258: PUSH
16259: LD_INT 0
16261: GREATER
16262: IFFALSE 16453
// begin for i in vehicleOK_list do
16264: LD_ADDR_VAR 0 13
16268: PUSH
16269: LD_VAR 0 20
16273: PUSH
16274: FOR_IN
16275: IFFALSE 16451
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16277: LD_ADDR_VAR 0 21
16281: PUSH
16282: LD_INT 22
16284: PUSH
16285: LD_VAR 0 11
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PPUSH
16294: CALL_OW 69
16298: PPUSH
16299: LD_VAR 0 13
16303: PPUSH
16304: CALL_OW 74
16308: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16309: LD_ADDR_VAR 0 22
16313: PUSH
16314: LD_INT 22
16316: PUSH
16317: LD_VAR 0 11
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: LD_INT 2
16328: PUSH
16329: LD_INT 59
16331: PUSH
16332: EMPTY
16333: LIST
16334: PUSH
16335: LD_INT 21
16337: PUSH
16338: LD_INT 1
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: LD_INT 21
16347: PUSH
16348: LD_INT 2
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: EMPTY
16366: LIST
16367: PPUSH
16368: CALL_OW 69
16372: PPUSH
16373: LD_VAR 0 13
16377: PPUSH
16378: CALL_OW 74
16382: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16383: LD_VAR 0 13
16387: PPUSH
16388: LD_VAR 0 21
16392: PPUSH
16393: CALL_OW 296
16397: PUSH
16398: LD_INT 6
16400: PLUS
16401: PUSH
16402: LD_VAR 0 13
16406: PPUSH
16407: LD_VAR 0 22
16411: PPUSH
16412: CALL_OW 296
16416: LESS
16417: IFFALSE 16435
// begin ComAttackUnit ( i , target1 ) ;
16419: LD_VAR 0 13
16423: PPUSH
16424: LD_VAR 0 21
16428: PPUSH
16429: CALL_OW 115
// end else
16433: GO 16449
// begin ComAttackUnit ( i , target2 ) ;
16435: LD_VAR 0 13
16439: PPUSH
16440: LD_VAR 0 22
16444: PPUSH
16445: CALL_OW 115
// end ; end ;
16449: GO 16274
16451: POP
16452: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16453: LD_INT 22
16455: PUSH
16456: LD_VAR 0 2
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 21
16467: PUSH
16468: LD_INT 2
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 24
16477: PUSH
16478: LD_INT 250
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: LIST
16489: PPUSH
16490: CALL_OW 69
16494: PUSH
16495: LD_INT 0
16497: EQUAL
16498: IFFALSE 16200
// end ;
16500: LD_VAR 0 12
16504: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16505: LD_INT 0
16507: PPUSH
16508: PPUSH
16509: PPUSH
16510: PPUSH
16511: PPUSH
16512: PPUSH
16513: PPUSH
16514: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16515: LD_ADDR_VAR 0 7
16519: PUSH
16520: LD_INT 22
16522: PUSH
16523: LD_VAR 0 1
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 1
16534: PUSH
16535: LD_INT 3
16537: PUSH
16538: LD_INT 24
16540: PUSH
16541: LD_INT 550
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 24
16554: PUSH
16555: LD_INT 250
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: LIST
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PPUSH
16571: CALL_OW 69
16575: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16576: LD_ADDR_VAR 0 8
16580: PUSH
16581: LD_INT 22
16583: PUSH
16584: LD_VAR 0 1
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 2
16595: PUSH
16596: LD_INT 25
16598: PUSH
16599: LD_INT 1
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: LD_INT 25
16608: PUSH
16609: LD_INT 5
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: LD_INT 25
16618: PUSH
16619: LD_INT 8
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 25
16628: PUSH
16629: LD_INT 9
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 24
16645: PUSH
16646: LD_INT 1000
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: LIST
16657: PPUSH
16658: CALL_OW 69
16662: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16663: LD_ADDR_VAR 0 9
16667: PUSH
16668: LD_INT 22
16670: PUSH
16671: LD_VAR 0 1
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 25
16682: PUSH
16683: LD_INT 4
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PPUSH
16694: CALL_OW 69
16698: ST_TO_ADDR
// if medicCount > 0 then
16699: LD_VAR 0 9
16703: PUSH
16704: LD_INT 0
16706: GREATER
16707: IFFALSE 16781
// begin if damageUnit_list > 0 then
16709: LD_VAR 0 7
16713: PUSH
16714: LD_INT 0
16716: GREATER
16717: IFFALSE 16781
// begin for i in damageUnit_list do
16719: LD_ADDR_VAR 0 5
16723: PUSH
16724: LD_VAR 0 7
16728: PUSH
16729: FOR_IN
16730: IFFALSE 16779
// begin ComMoveToArea ( i , healArea ) ;
16732: LD_VAR 0 5
16736: PPUSH
16737: LD_VAR 0 2
16741: PPUSH
16742: CALL_OW 113
// for j in medicCount do
16746: LD_ADDR_VAR 0 6
16750: PUSH
16751: LD_VAR 0 9
16755: PUSH
16756: FOR_IN
16757: IFFALSE 16775
// AddComHeal ( j , i ) ;
16759: LD_VAR 0 6
16763: PPUSH
16764: LD_VAR 0 5
16768: PPUSH
16769: CALL_OW 188
16773: GO 16756
16775: POP
16776: POP
// end ;
16777: GO 16729
16779: POP
16780: POP
// end ; end ; if soldiersOK_list > 0 then
16781: LD_VAR 0 8
16785: PUSH
16786: LD_INT 0
16788: GREATER
16789: IFFALSE 16980
// begin for i in soldiersOK_list do
16791: LD_ADDR_VAR 0 5
16795: PUSH
16796: LD_VAR 0 8
16800: PUSH
16801: FOR_IN
16802: IFFALSE 16978
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16804: LD_ADDR_VAR 0 10
16808: PUSH
16809: LD_INT 22
16811: PUSH
16812: LD_VAR 0 3
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PPUSH
16821: CALL_OW 69
16825: PPUSH
16826: LD_VAR 0 5
16830: PPUSH
16831: CALL_OW 74
16835: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16836: LD_ADDR_VAR 0 11
16840: PUSH
16841: LD_INT 22
16843: PUSH
16844: LD_VAR 0 3
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 2
16855: PUSH
16856: LD_INT 59
16858: PUSH
16859: EMPTY
16860: LIST
16861: PUSH
16862: LD_INT 21
16864: PUSH
16865: LD_INT 1
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: LD_INT 21
16874: PUSH
16875: LD_INT 2
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: EMPTY
16893: LIST
16894: PPUSH
16895: CALL_OW 69
16899: PPUSH
16900: LD_VAR 0 5
16904: PPUSH
16905: CALL_OW 74
16909: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16910: LD_VAR 0 5
16914: PPUSH
16915: LD_VAR 0 10
16919: PPUSH
16920: CALL_OW 296
16924: PUSH
16925: LD_INT 8
16927: PLUS
16928: PUSH
16929: LD_VAR 0 5
16933: PPUSH
16934: LD_VAR 0 11
16938: PPUSH
16939: CALL_OW 296
16943: LESS
16944: IFFALSE 16962
// begin ComAttackUnit ( i , target1 ) ;
16946: LD_VAR 0 5
16950: PPUSH
16951: LD_VAR 0 10
16955: PPUSH
16956: CALL_OW 115
// end else
16960: GO 16976
// begin ComAttackUnit ( i , target2 ) ;
16962: LD_VAR 0 5
16966: PPUSH
16967: LD_VAR 0 11
16971: PPUSH
16972: CALL_OW 115
// end ; end ;
16976: GO 16801
16978: POP
16979: POP
// end ; end ;
16980: LD_VAR 0 4
16984: RET
// export function GetDriverVehicle ( unit ) ; begin
16985: LD_INT 0
16987: PPUSH
// if not unit then
16988: LD_VAR 0 1
16992: NOT
16993: IFFALSE 16997
// exit ;
16995: GO 17035
// result := IsInUnit ( unit ) ;
16997: LD_ADDR_VAR 0 2
17001: PUSH
17002: LD_VAR 0 1
17006: PPUSH
17007: CALL_OW 310
17011: ST_TO_ADDR
// if GetType ( result ) <> unit_vehicle then
17012: LD_VAR 0 2
17016: PPUSH
17017: CALL_OW 247
17021: PUSH
17022: LD_INT 2
17024: NONEQUAL
17025: IFFALSE 17035
// result := 0 ;
17027: LD_ADDR_VAR 0 2
17031: PUSH
17032: LD_INT 0
17034: ST_TO_ADDR
// end ;
17035: LD_VAR 0 2
17039: RET
// export function CanBeBuiltCost ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17040: LD_INT 0
17042: PPUSH
17043: PPUSH
17044: PPUSH
17045: PPUSH
17046: PPUSH
17047: PPUSH
17048: PPUSH
17049: PPUSH
17050: PPUSH
// result := false ;
17051: LD_ADDR_VAR 0 7
17055: PUSH
17056: LD_INT 0
17058: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17059: LD_VAR 0 1
17063: NOT
17064: PUSH
17065: LD_VAR 0 1
17069: PPUSH
17070: CALL_OW 266
17074: PUSH
17075: LD_INT 0
17077: PUSH
17078: LD_INT 1
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: IN
17085: NOT
17086: OR
17087: PUSH
17088: LD_VAR 0 2
17092: NOT
17093: OR
17094: PUSH
17095: LD_VAR 0 5
17099: PUSH
17100: LD_INT 0
17102: PUSH
17103: LD_INT 1
17105: PUSH
17106: LD_INT 2
17108: PUSH
17109: LD_INT 3
17111: PUSH
17112: LD_INT 4
17114: PUSH
17115: LD_INT 5
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: IN
17126: NOT
17127: OR
17128: PUSH
17129: LD_VAR 0 3
17133: PPUSH
17134: LD_VAR 0 4
17138: PPUSH
17139: CALL_OW 488
17143: NOT
17144: OR
17145: IFFALSE 17149
// exit ;
17147: GO 17830
// pom := GetBase ( bdepot ) ;
17149: LD_ADDR_VAR 0 10
17153: PUSH
17154: LD_VAR 0 1
17158: PPUSH
17159: CALL_OW 274
17163: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17164: LD_ADDR_VAR 0 11
17168: PUSH
17169: LD_VAR 0 2
17173: PPUSH
17174: LD_VAR 0 1
17178: PPUSH
17179: CALL_OW 248
17183: PPUSH
17184: CALL_OW 450
17188: ST_TO_ADDR
// if check_cost then
17189: LD_VAR 0 6
17193: IFFALSE 17270
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17195: LD_VAR 0 10
17199: PPUSH
17200: LD_INT 1
17202: PPUSH
17203: CALL_OW 275
17207: PUSH
17208: LD_VAR 0 11
17212: PUSH
17213: LD_INT 1
17215: ARRAY
17216: GREATEREQUAL
17217: PUSH
17218: LD_VAR 0 10
17222: PPUSH
17223: LD_INT 2
17225: PPUSH
17226: CALL_OW 275
17230: PUSH
17231: LD_VAR 0 11
17235: PUSH
17236: LD_INT 2
17238: ARRAY
17239: GREATEREQUAL
17240: AND
17241: PUSH
17242: LD_VAR 0 10
17246: PPUSH
17247: LD_INT 3
17249: PPUSH
17250: CALL_OW 275
17254: PUSH
17255: LD_VAR 0 11
17259: PUSH
17260: LD_INT 3
17262: ARRAY
17263: GREATEREQUAL
17264: AND
17265: NOT
17266: IFFALSE 17270
// exit ;
17268: GO 17830
// if GetBType ( bdepot ) = b_depot then
17270: LD_VAR 0 1
17274: PPUSH
17275: CALL_OW 266
17279: PUSH
17280: LD_INT 0
17282: EQUAL
17283: IFFALSE 17295
// dist := 28 else
17285: LD_ADDR_VAR 0 14
17289: PUSH
17290: LD_INT 28
17292: ST_TO_ADDR
17293: GO 17303
// dist := 36 ;
17295: LD_ADDR_VAR 0 14
17299: PUSH
17300: LD_INT 36
17302: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17303: LD_VAR 0 1
17307: PPUSH
17308: LD_VAR 0 3
17312: PPUSH
17313: LD_VAR 0 4
17317: PPUSH
17318: CALL_OW 297
17322: PUSH
17323: LD_VAR 0 14
17327: GREATER
17328: IFFALSE 17332
// exit ;
17330: GO 17830
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17332: LD_ADDR_VAR 0 12
17336: PUSH
17337: LD_VAR 0 2
17341: PPUSH
17342: LD_VAR 0 3
17346: PPUSH
17347: LD_VAR 0 4
17351: PPUSH
17352: LD_VAR 0 5
17356: PPUSH
17357: LD_VAR 0 1
17361: PPUSH
17362: CALL_OW 248
17366: PPUSH
17367: LD_INT 0
17369: PPUSH
17370: CALL 57391 0 6
17374: ST_TO_ADDR
// if not hexes then
17375: LD_VAR 0 12
17379: NOT
17380: IFFALSE 17384
// exit ;
17382: GO 17830
// hex := GetHexInfo ( x , y ) ;
17384: LD_ADDR_VAR 0 15
17388: PUSH
17389: LD_VAR 0 3
17393: PPUSH
17394: LD_VAR 0 4
17398: PPUSH
17399: CALL_OW 546
17403: ST_TO_ADDR
// if hex [ 1 ] then
17404: LD_VAR 0 15
17408: PUSH
17409: LD_INT 1
17411: ARRAY
17412: IFFALSE 17416
// exit ;
17414: GO 17830
// height := hex [ 2 ] ;
17416: LD_ADDR_VAR 0 13
17420: PUSH
17421: LD_VAR 0 15
17425: PUSH
17426: LD_INT 2
17428: ARRAY
17429: ST_TO_ADDR
// for i = 1 to hexes do
17430: LD_ADDR_VAR 0 8
17434: PUSH
17435: DOUBLE
17436: LD_INT 1
17438: DEC
17439: ST_TO_ADDR
17440: LD_VAR 0 12
17444: PUSH
17445: FOR_TO
17446: IFFALSE 17774
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17448: LD_VAR 0 12
17452: PUSH
17453: LD_VAR 0 8
17457: ARRAY
17458: PUSH
17459: LD_INT 1
17461: ARRAY
17462: PPUSH
17463: LD_VAR 0 12
17467: PUSH
17468: LD_VAR 0 8
17472: ARRAY
17473: PUSH
17474: LD_INT 2
17476: ARRAY
17477: PPUSH
17478: CALL_OW 488
17482: NOT
17483: IFFALSE 17487
// continue ;
17485: GO 17445
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17487: LD_ADDR_VAR 0 9
17491: PUSH
17492: LD_VAR 0 12
17496: PUSH
17497: LD_VAR 0 8
17501: ARRAY
17502: PUSH
17503: LD_INT 1
17505: ARRAY
17506: PPUSH
17507: LD_VAR 0 12
17511: PUSH
17512: LD_VAR 0 8
17516: ARRAY
17517: PUSH
17518: LD_INT 2
17520: ARRAY
17521: PPUSH
17522: CALL_OW 546
17526: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17527: LD_VAR 0 9
17531: PUSH
17532: LD_INT 1
17534: ARRAY
17535: PUSH
17536: LD_VAR 0 9
17540: PUSH
17541: LD_INT 2
17543: ARRAY
17544: PUSH
17545: LD_VAR 0 13
17549: PUSH
17550: LD_INT 2
17552: PLUS
17553: GREATER
17554: OR
17555: PUSH
17556: LD_VAR 0 9
17560: PUSH
17561: LD_INT 2
17563: ARRAY
17564: PUSH
17565: LD_VAR 0 13
17569: PUSH
17570: LD_INT 2
17572: MINUS
17573: LESS
17574: OR
17575: PUSH
17576: LD_VAR 0 9
17580: PUSH
17581: LD_INT 3
17583: ARRAY
17584: PUSH
17585: LD_INT 0
17587: PUSH
17588: LD_INT 8
17590: PUSH
17591: LD_INT 9
17593: PUSH
17594: LD_INT 10
17596: PUSH
17597: LD_INT 11
17599: PUSH
17600: LD_INT 12
17602: PUSH
17603: LD_INT 13
17605: PUSH
17606: LD_INT 16
17608: PUSH
17609: LD_INT 17
17611: PUSH
17612: LD_INT 18
17614: PUSH
17615: LD_INT 19
17617: PUSH
17618: LD_INT 20
17620: PUSH
17621: LD_INT 21
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: IN
17639: NOT
17640: OR
17641: PUSH
17642: LD_VAR 0 9
17646: PUSH
17647: LD_INT 5
17649: ARRAY
17650: NOT
17651: OR
17652: PUSH
17653: LD_VAR 0 9
17657: PUSH
17658: LD_INT 6
17660: ARRAY
17661: PUSH
17662: LD_INT 1
17664: PUSH
17665: LD_INT 2
17667: PUSH
17668: LD_INT 7
17670: PUSH
17671: LD_INT 9
17673: PUSH
17674: LD_INT 10
17676: PUSH
17677: LD_INT 11
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: IN
17688: NOT
17689: OR
17690: PUSH
17691: LD_VAR 0 12
17695: PUSH
17696: LD_VAR 0 8
17700: ARRAY
17701: PUSH
17702: LD_INT 1
17704: ARRAY
17705: PPUSH
17706: LD_VAR 0 12
17710: PUSH
17711: LD_VAR 0 8
17715: ARRAY
17716: PUSH
17717: LD_INT 2
17719: ARRAY
17720: PPUSH
17721: CALL_OW 428
17725: PUSH
17726: LD_INT 0
17728: GREATER
17729: OR
17730: PUSH
17731: LD_VAR 0 12
17735: PUSH
17736: LD_VAR 0 8
17740: ARRAY
17741: PUSH
17742: LD_INT 1
17744: ARRAY
17745: PPUSH
17746: LD_VAR 0 12
17750: PUSH
17751: LD_VAR 0 8
17755: ARRAY
17756: PUSH
17757: LD_INT 2
17759: ARRAY
17760: PPUSH
17761: CALL_OW 351
17765: OR
17766: IFFALSE 17772
// exit ;
17768: POP
17769: POP
17770: GO 17830
// end ;
17772: GO 17445
17774: POP
17775: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
17776: LD_VAR 0 2
17780: PUSH
17781: LD_INT 29
17783: PUSH
17784: LD_INT 30
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: IN
17791: PUSH
17792: LD_VAR 0 3
17796: PPUSH
17797: LD_VAR 0 4
17801: PPUSH
17802: LD_VAR 0 1
17806: PPUSH
17807: CALL_OW 255
17811: PPUSH
17812: CALL_OW 440
17816: NOT
17817: AND
17818: IFFALSE 17822
// exit ;
17820: GO 17830
// result := true ;
17822: LD_ADDR_VAR 0 7
17826: PUSH
17827: LD_INT 1
17829: ST_TO_ADDR
// end ; end_of_file
17830: LD_VAR 0 7
17834: RET
// every 1 do var i ;
17835: GO 17837
17837: DISABLE
17838: LD_INT 0
17840: PPUSH
// begin Video ( true ) ;
17841: LD_INT 1
17843: PPUSH
17844: CALL 80159 0 1
// CenterOnXY ( 53 , 40 ) ;
17848: LD_INT 53
17850: PPUSH
17851: LD_INT 40
17853: PPUSH
17854: CALL_OW 84
// wait ( 0 0$5 ) ;
17858: LD_INT 175
17860: PPUSH
17861: CALL_OW 67
// if gammaCommander = 1 then
17865: LD_EXP 12
17869: PUSH
17870: LD_INT 1
17872: EQUAL
17873: IFFALSE 17887
// Say ( Donaldson , D1-Don-1 ) ;
17875: LD_EXP 3
17879: PPUSH
17880: LD_STRING D1-Don-1
17882: PPUSH
17883: CALL_OW 88
// if gammaCommander = 2 then
17887: LD_EXP 12
17891: PUSH
17892: LD_INT 2
17894: EQUAL
17895: IFFALSE 17909
// Say ( Brown , D1-Brown-1 ) ;
17897: LD_EXP 2
17901: PPUSH
17902: LD_STRING D1-Brown-1
17904: PPUSH
17905: CALL_OW 88
// if gammaCommander = 3 then
17909: LD_EXP 12
17913: PUSH
17914: LD_INT 3
17916: EQUAL
17917: IFFALSE 17931
// Say ( Houten , D1-VanH-1 ) ;
17919: LD_EXP 13
17923: PPUSH
17924: LD_STRING D1-VanH-1
17926: PPUSH
17927: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
17931: LD_EXP 22
17935: PPUSH
17936: LD_STRING D1-Har-1
17938: PPUSH
17939: CALL_OW 94
// if gammaCommander = 1 then
17943: LD_EXP 12
17947: PUSH
17948: LD_INT 1
17950: EQUAL
17951: IFFALSE 17965
// Say ( Donaldson , D1-Don-2 ) ;
17953: LD_EXP 3
17957: PPUSH
17958: LD_STRING D1-Don-2
17960: PPUSH
17961: CALL_OW 88
// if gammaCommander = 2 then
17965: LD_EXP 12
17969: PUSH
17970: LD_INT 2
17972: EQUAL
17973: IFFALSE 17987
// Say ( Brown , D1-Brown-2 ) ;
17975: LD_EXP 2
17979: PPUSH
17980: LD_STRING D1-Brown-2
17982: PPUSH
17983: CALL_OW 88
// if gammaCommander = 3 then
17987: LD_EXP 12
17991: PUSH
17992: LD_INT 3
17994: EQUAL
17995: IFFALSE 18009
// Say ( Houten , D1-VanH-2 ) ;
17997: LD_EXP 13
18001: PPUSH
18002: LD_STRING D1-VanH-2
18004: PPUSH
18005: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
18009: LD_EXP 22
18013: PPUSH
18014: LD_STRING D1-Har-2
18016: PPUSH
18017: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
18021: LD_INT 22
18023: PUSH
18024: LD_INT 1
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 33
18033: PUSH
18034: LD_INT 2
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 61
18043: PUSH
18044: EMPTY
18045: LIST
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: LIST
18051: PPUSH
18052: CALL_OW 69
18056: IFFALSE 18121
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
18058: LD_ADDR_VAR 0 1
18062: PUSH
18063: LD_INT 22
18065: PUSH
18066: LD_INT 1
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 33
18075: PUSH
18076: LD_INT 2
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 61
18085: PUSH
18086: EMPTY
18087: LIST
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: LIST
18093: PPUSH
18094: CALL_OW 69
18098: PUSH
18099: FOR_IN
18100: IFFALSE 18119
// ComAgressiveMove ( i , 70 , 41 ) ;
18102: LD_VAR 0 1
18106: PPUSH
18107: LD_INT 70
18109: PPUSH
18110: LD_INT 41
18112: PPUSH
18113: CALL_OW 114
18117: GO 18099
18119: POP
18120: POP
// repeat wait ( 0 0$1 ) ;
18121: LD_INT 35
18123: PPUSH
18124: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
18128: LD_ADDR_VAR 0 1
18132: PUSH
18133: LD_INT 22
18135: PUSH
18136: LD_INT 6
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: EMPTY
18144: LIST
18145: PPUSH
18146: CALL_OW 69
18150: PUSH
18151: FOR_IN
18152: IFFALSE 18171
// ComAgressiveMove ( i , 54 , 20 ) ;
18154: LD_VAR 0 1
18158: PPUSH
18159: LD_INT 54
18161: PPUSH
18162: LD_INT 20
18164: PPUSH
18165: CALL_OW 114
18169: GO 18151
18171: POP
18172: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
18173: LD_ADDR_VAR 0 1
18177: PUSH
18178: LD_INT 22
18180: PUSH
18181: LD_INT 1
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 25
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 3
18200: PUSH
18201: LD_INT 54
18203: PUSH
18204: EMPTY
18205: LIST
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL_OW 69
18220: PUSH
18221: FOR_IN
18222: IFFALSE 18256
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
18224: LD_VAR 0 1
18228: PPUSH
18229: LD_INT 70
18231: PPUSH
18232: LD_INT 41
18234: PPUSH
18235: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
18239: LD_VAR 0 1
18243: PPUSH
18244: LD_INT 46
18246: PPUSH
18247: LD_INT 39
18249: PPUSH
18250: CALL_OW 174
// end ;
18254: GO 18221
18256: POP
18257: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
18258: LD_ADDR_VAR 0 1
18262: PUSH
18263: LD_INT 22
18265: PUSH
18266: LD_INT 1
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 21
18275: PUSH
18276: LD_INT 1
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 3
18285: PUSH
18286: LD_INT 24
18288: PUSH
18289: LD_INT 500
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: LIST
18304: PPUSH
18305: CALL_OW 69
18309: PUSH
18310: FOR_IN
18311: IFFALSE 18344
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
18313: LD_VAR 0 1
18317: PPUSH
18318: LD_EXP 37
18322: PPUSH
18323: CALL_OW 250
18327: PPUSH
18328: LD_EXP 37
18332: PPUSH
18333: CALL_OW 251
18337: PPUSH
18338: CALL_OW 111
18342: GO 18310
18344: POP
18345: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
18346: LD_INT 22
18348: PUSH
18349: LD_INT 6
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 21
18358: PUSH
18359: LD_INT 1
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 24
18368: PUSH
18369: LD_INT 250
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: LIST
18380: PPUSH
18381: CALL_OW 69
18385: PUSH
18386: LD_INT 5
18388: LESS
18389: IFFALSE 18121
// Video ( false ) ;
18391: LD_INT 0
18393: PPUSH
18394: CALL 80159 0 1
// ChangeMissionObjectives ( M1 ) ;
18398: LD_STRING M1
18400: PPUSH
18401: CALL_OW 337
// wait ( 0 0$2 ) ;
18405: LD_INT 70
18407: PPUSH
18408: CALL_OW 67
// SaveForQuickRestart ;
18412: CALL_OW 22
// startCutscene = 0 ;
18416: LD_ADDR_EXP 38
18420: PUSH
18421: LD_INT 0
18423: ST_TO_ADDR
// end ;
18424: PPOPN 1
18426: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
18427: LD_EXP 38
18431: IFFALSE 18522
18433: GO 18435
18435: DISABLE
18436: LD_INT 0
18438: PPUSH
18439: PPUSH
// begin enable ;
18440: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
18441: LD_ADDR_VAR 0 1
18445: PUSH
18446: LD_INT 22
18448: PUSH
18449: LD_INT 1
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 21
18458: PUSH
18459: LD_INT 1
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 3
18468: PUSH
18469: LD_INT 24
18471: PUSH
18472: LD_INT 700
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: LIST
18487: PPUSH
18488: CALL_OW 69
18492: ST_TO_ADDR
// for i in tmp do
18493: LD_ADDR_VAR 0 2
18497: PUSH
18498: LD_VAR 0 1
18502: PUSH
18503: FOR_IN
18504: IFFALSE 18520
// SetLives ( i , 700 ) ;
18506: LD_VAR 0 2
18510: PPUSH
18511: LD_INT 700
18513: PPUSH
18514: CALL_OW 234
18518: GO 18503
18520: POP
18521: POP
// end ;
18522: PPOPN 2
18524: END
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 6 ] ] ) = 0 or tick > 3 3$00 do
18525: LD_INT 22
18527: PUSH
18528: LD_INT 1
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 101
18537: PUSH
18538: LD_INT 6
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PPUSH
18549: CALL_OW 69
18553: PUSH
18554: LD_INT 0
18556: EQUAL
18557: PUSH
18558: LD_OWVAR 1
18562: PUSH
18563: LD_INT 6300
18565: GREATER
18566: OR
18567: IFFALSE 18816
18569: GO 18571
18571: DISABLE
// begin PrepareSupportFromDelta ;
18572: CALL 3900 0 0
// firstAttack = 1 ;
18576: LD_ADDR_EXP 33
18580: PUSH
18581: LD_INT 1
18583: ST_TO_ADDR
// if IsOk ( Gladstone ) then
18584: LD_EXP 8
18588: PPUSH
18589: CALL_OW 302
18593: IFFALSE 18609
// Say ( Gladstone , D2-Glad-1 ) else
18595: LD_EXP 8
18599: PPUSH
18600: LD_STRING D2-Glad-1
18602: PPUSH
18603: CALL_OW 88
18607: GO 18717
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
18609: LD_INT 4
18611: PPUSH
18612: LD_INT 22
18614: PUSH
18615: LD_INT 1
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 21
18624: PUSH
18625: LD_INT 1
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 2
18634: PUSH
18635: LD_INT 25
18637: PUSH
18638: LD_INT 1
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 25
18647: PUSH
18648: LD_INT 2
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 25
18657: PUSH
18658: LD_INT 3
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 25
18667: PUSH
18668: LD_INT 4
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: LIST
18686: PPUSH
18687: CALL_OW 70
18691: PUSH
18692: LD_EXP 15
18696: PUSH
18697: LD_EXP 14
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: DIFF
18706: PPUSH
18707: LD_STRING D2-Sol1-1
18709: PPUSH
18710: LD_STRING D2-FSol1-1
18712: PPUSH
18713: CALL 7255 0 3
// if IsOK ( Donaldson ) and gammaCommander = 1 then
18717: LD_EXP 3
18721: PPUSH
18722: CALL_OW 302
18726: PUSH
18727: LD_EXP 12
18731: PUSH
18732: LD_INT 1
18734: EQUAL
18735: AND
18736: IFFALSE 18750
// Say ( Donaldson , D2-Don-1 ) ;
18738: LD_EXP 3
18742: PPUSH
18743: LD_STRING D2-Don-1
18745: PPUSH
18746: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
18750: LD_EXP 2
18754: PPUSH
18755: CALL_OW 302
18759: PUSH
18760: LD_EXP 12
18764: PUSH
18765: LD_INT 2
18767: EQUAL
18768: AND
18769: IFFALSE 18783
// Say ( Brown , D2-Brown-1 ) ;
18771: LD_EXP 2
18775: PPUSH
18776: LD_STRING D2-Brown-1
18778: PPUSH
18779: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
18783: LD_EXP 13
18787: PPUSH
18788: CALL_OW 302
18792: PUSH
18793: LD_EXP 12
18797: PUSH
18798: LD_INT 3
18800: EQUAL
18801: AND
18802: IFFALSE 18816
// Say ( Houten , D2-VanH-1 ) ;
18804: LD_EXP 13
18808: PPUSH
18809: LD_STRING D2-VanH-1
18811: PPUSH
18812: CALL_OW 88
// end ;
18816: END
// every 0 0$1 trigger tick > 3 3$00 do var none ;
18817: LD_OWVAR 1
18821: PUSH
18822: LD_INT 6300
18824: GREATER
18825: IFFALSE 19879
18827: GO 18829
18829: DISABLE
18830: LD_INT 0
18832: PPUSH
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
18833: LD_STRING 07_time
18835: PPUSH
18836: LD_INT 12600
18838: PPUSH
18839: CALL_OW 30
18843: PUSH
18844: LD_INT 3
18846: DIV
18847: PPUSH
18848: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
18852: LD_INT 34
18854: PPUSH
18855: LD_INT 1
18857: PPUSH
18858: CALL_OW 321
18862: PUSH
18863: LD_INT 2
18865: EQUAL
18866: IFFALSE 18875
// SetAchievement ( ACH_HEAVYGUN ) ;
18868: LD_STRING ACH_HEAVYGUN
18870: PPUSH
18871: CALL_OW 543
// PrepareMacmillanSquad ;
18875: CALL 4589 0 0
// CenterNowOnUnits ( JMM ) ;
18879: LD_EXP 1
18883: PPUSH
18884: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
18888: LD_EXP 1
18892: PPUSH
18893: LD_STRING D3-JMM-1
18895: PPUSH
18896: CALL_OW 88
// JMMArrive = 1 ;
18900: LD_ADDR_EXP 39
18904: PUSH
18905: LD_INT 1
18907: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
18908: LD_EXP 3
18912: PPUSH
18913: CALL_OW 302
18917: PUSH
18918: LD_EXP 12
18922: PUSH
18923: LD_INT 1
18925: EQUAL
18926: AND
18927: IFFALSE 18943
// begin Say ( Donaldson , D3-Don-1 ) ;
18929: LD_EXP 3
18933: PPUSH
18934: LD_STRING D3-Don-1
18936: PPUSH
18937: CALL_OW 88
// end else
18941: GO 18995
// begin if gammaCommander = 1 then
18943: LD_EXP 12
18947: PUSH
18948: LD_INT 1
18950: EQUAL
18951: IFFALSE 18995
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
18953: LD_EXP 11
18957: PPUSH
18958: LD_INT 26
18960: PUSH
18961: LD_INT 1
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PPUSH
18968: CALL_OW 72
18972: PPUSH
18973: LD_STRING D3-Sol1-1
18975: PPUSH
18976: LD_STRING D3-Sol1-1
18978: PPUSH
18979: CALL 7255 0 3
// Say ( JMM , D3-JMM-2 ) ;
18983: LD_EXP 1
18987: PPUSH
18988: LD_STRING D3-JMM-2
18990: PPUSH
18991: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
18995: LD_EXP 2
18999: PPUSH
19000: CALL_OW 302
19004: PUSH
19005: LD_EXP 12
19009: PUSH
19010: LD_INT 2
19012: EQUAL
19013: AND
19014: IFFALSE 19030
// begin Say ( Brown , D3-Brown-1 ) ;
19016: LD_EXP 2
19020: PPUSH
19021: LD_STRING D3-Brown-1
19023: PPUSH
19024: CALL_OW 88
// end else
19028: GO 19082
// begin if gammaCommander = 2 then
19030: LD_EXP 12
19034: PUSH
19035: LD_INT 2
19037: EQUAL
19038: IFFALSE 19082
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
19040: LD_EXP 11
19044: PPUSH
19045: LD_INT 26
19047: PUSH
19048: LD_INT 1
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PPUSH
19055: CALL_OW 72
19059: PPUSH
19060: LD_STRING D3-Sol1-1a
19062: PPUSH
19063: LD_STRING D3-Sol1-1a
19065: PPUSH
19066: CALL 7255 0 3
// Say ( JMM , D3-JMM-2 ) ;
19070: LD_EXP 1
19074: PPUSH
19075: LD_STRING D3-JMM-2
19077: PPUSH
19078: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
19082: LD_EXP 13
19086: PPUSH
19087: CALL_OW 302
19091: PUSH
19092: LD_EXP 12
19096: PUSH
19097: LD_INT 3
19099: EQUAL
19100: AND
19101: IFFALSE 19117
// begin Say ( Houten , D3-VanH-1 ) ;
19103: LD_EXP 13
19107: PPUSH
19108: LD_STRING D3-VanH-1
19110: PPUSH
19111: CALL_OW 88
// end else
19115: GO 19169
// begin if gammaCommander = 3 then
19117: LD_EXP 12
19121: PUSH
19122: LD_INT 3
19124: EQUAL
19125: IFFALSE 19169
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
19127: LD_EXP 11
19131: PPUSH
19132: LD_INT 26
19134: PUSH
19135: LD_INT 1
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PPUSH
19142: CALL_OW 72
19146: PPUSH
19147: LD_STRING D3-Sol1-1b
19149: PPUSH
19150: LD_STRING D3-Sol1-1b
19152: PPUSH
19153: CALL 7255 0 3
// Say ( JMM , D3-JMM-2 ) ;
19157: LD_EXP 1
19161: PPUSH
19162: LD_STRING D3-JMM-2
19164: PPUSH
19165: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
19169: LD_EXP 15
19173: PPUSH
19174: CALL_OW 302
19178: IFFALSE 19206
// begin Say ( Joan , D3a-Joan-1 ) ;
19180: LD_EXP 15
19184: PPUSH
19185: LD_STRING D3a-Joan-1
19187: PPUSH
19188: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
19192: LD_EXP 1
19196: PPUSH
19197: LD_STRING D3a-JMM-1
19199: PPUSH
19200: CALL_OW 88
// end else
19204: GO 19548
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
19206: LD_STRING 06_JoanStatus_1
19208: PPUSH
19209: LD_INT 0
19211: PPUSH
19212: CALL_OW 30
19216: PUSH
19217: LD_INT 1
19219: EQUAL
19220: IFFALSE 19548
// begin Say ( JMM , D3b-JMM-1 ) ;
19222: LD_EXP 1
19226: PPUSH
19227: LD_STRING D3b-JMM-1
19229: PPUSH
19230: CALL_OW 88
// if gammaCommander = 1 then
19234: LD_EXP 12
19238: PUSH
19239: LD_INT 1
19241: EQUAL
19242: IFFALSE 19299
// if IsOK ( Donaldson ) then
19244: LD_EXP 3
19248: PPUSH
19249: CALL_OW 302
19253: IFFALSE 19269
// Say ( Donaldson , D3b-Don-1 ) else
19255: LD_EXP 3
19259: PPUSH
19260: LD_STRING D3b-Don-1
19262: PPUSH
19263: CALL_OW 88
19267: GO 19299
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19269: LD_EXP 11
19273: PPUSH
19274: LD_INT 26
19276: PUSH
19277: LD_INT 1
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PPUSH
19284: CALL_OW 72
19288: PPUSH
19289: LD_STRING D3b-Sol1-1
19291: PPUSH
19292: LD_STRING D3b-Sol1-1
19294: PPUSH
19295: CALL 7255 0 3
// if gammaCommander = 2 then
19299: LD_EXP 12
19303: PUSH
19304: LD_INT 2
19306: EQUAL
19307: IFFALSE 19364
// if IsOk ( Brown ) then
19309: LD_EXP 2
19313: PPUSH
19314: CALL_OW 302
19318: IFFALSE 19334
// Say ( Brown , D3b-Brown-1 ) else
19320: LD_EXP 2
19324: PPUSH
19325: LD_STRING D3b-Brown-1
19327: PPUSH
19328: CALL_OW 88
19332: GO 19364
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19334: LD_EXP 11
19338: PPUSH
19339: LD_INT 26
19341: PUSH
19342: LD_INT 1
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PPUSH
19349: CALL_OW 72
19353: PPUSH
19354: LD_STRING D3b-Sol1-1
19356: PPUSH
19357: LD_STRING D3b-Sol1-1
19359: PPUSH
19360: CALL 7255 0 3
// if gammaCommander = 3 then
19364: LD_EXP 12
19368: PUSH
19369: LD_INT 3
19371: EQUAL
19372: IFFALSE 19429
// if IsOk ( Houten ) then
19374: LD_EXP 13
19378: PPUSH
19379: CALL_OW 302
19383: IFFALSE 19399
// Say ( Houten , D3b-VanH-1 ) else
19385: LD_EXP 13
19389: PPUSH
19390: LD_STRING D3b-VanH-1
19392: PPUSH
19393: CALL_OW 88
19397: GO 19429
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19399: LD_EXP 11
19403: PPUSH
19404: LD_INT 26
19406: PUSH
19407: LD_INT 1
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PPUSH
19414: CALL_OW 72
19418: PPUSH
19419: LD_STRING D3b-Sol1-1
19421: PPUSH
19422: LD_STRING D3b-Sol1-1
19424: PPUSH
19425: CALL 7255 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
19429: LD_EXP 11
19433: PPUSH
19434: LD_INT 26
19436: PUSH
19437: LD_INT 1
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PPUSH
19444: CALL_OW 72
19448: PUSH
19449: LD_EXP 12
19453: PUSH
19454: LD_INT 1
19456: EQUAL
19457: PUSH
19458: LD_EXP 3
19462: PPUSH
19463: CALL_OW 302
19467: AND
19468: OR
19469: PUSH
19470: LD_EXP 12
19474: PUSH
19475: LD_INT 2
19477: EQUAL
19478: PUSH
19479: LD_EXP 2
19483: PPUSH
19484: CALL_OW 302
19488: AND
19489: OR
19490: PUSH
19491: LD_EXP 12
19495: PUSH
19496: LD_INT 3
19498: EQUAL
19499: PUSH
19500: LD_EXP 13
19504: PPUSH
19505: CALL_OW 302
19509: AND
19510: OR
19511: IFFALSE 19525
// Say ( JMM , D3b-JMM-2 ) ;
19513: LD_EXP 1
19517: PPUSH
19518: LD_STRING D3b-JMM-2
19520: PPUSH
19521: CALL_OW 88
// if IsOK ( Lisa ) then
19525: LD_EXP 6
19529: PPUSH
19530: CALL_OW 302
19534: IFFALSE 19548
// Say ( Lisa , D3b-Lisa-2 ) ;
19536: LD_EXP 6
19540: PPUSH
19541: LD_STRING D3b-Lisa-2
19543: PPUSH
19544: CALL_OW 88
// end ; end ; none := [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] ^ macmilan_squad ;
19548: LD_ADDR_VAR 0 1
19552: PUSH
19553: LD_EXP 1
19557: PUSH
19558: LD_EXP 2
19562: PUSH
19563: LD_EXP 3
19567: PUSH
19568: LD_EXP 4
19572: PUSH
19573: LD_EXP 5
19577: PUSH
19578: LD_EXP 6
19582: PUSH
19583: LD_EXP 7
19587: PUSH
19588: LD_EXP 8
19592: PUSH
19593: LD_EXP 9
19597: PUSH
19598: LD_EXP 10
19602: PUSH
19603: LD_EXP 15
19607: PUSH
19608: LD_EXP 14
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: PUSH
19627: LD_EXP 42
19631: ADD
19632: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCa-Sol1-1 , DCa-Sol1-1 ) ;
19633: LD_INT 22
19635: PUSH
19636: LD_INT 1
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 21
19645: PUSH
19646: LD_INT 1
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 26
19655: PUSH
19656: LD_INT 1
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 2
19665: PUSH
19666: LD_INT 25
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 25
19678: PUSH
19679: LD_INT 2
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 25
19688: PUSH
19689: LD_INT 3
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 25
19698: PUSH
19699: LD_INT 4
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: PPUSH
19719: CALL_OW 69
19723: PUSH
19724: LD_VAR 0 1
19728: DIFF
19729: PPUSH
19730: LD_STRING DCa-Sol1-1
19732: PPUSH
19733: LD_STRING DCa-Sol1-1
19735: PPUSH
19736: CALL 7255 0 3
// Say ( JMM , DCb-JMM-1 ) ;
19740: LD_EXP 1
19744: PPUSH
19745: LD_STRING DCb-JMM-1
19747: PPUSH
19748: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCb-Sol1-1 , DCb-Sol1-1 ) ;
19752: LD_INT 22
19754: PUSH
19755: LD_INT 1
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 21
19764: PUSH
19765: LD_INT 1
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 26
19774: PUSH
19775: LD_INT 1
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 2
19784: PUSH
19785: LD_INT 25
19787: PUSH
19788: LD_INT 1
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 25
19797: PUSH
19798: LD_INT 2
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 25
19807: PUSH
19808: LD_INT 3
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 25
19817: PUSH
19818: LD_INT 4
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: PPUSH
19838: CALL_OW 69
19842: PUSH
19843: LD_VAR 0 1
19847: DIFF
19848: PPUSH
19849: LD_STRING DCb-Sol1-1
19851: PPUSH
19852: LD_STRING DCb-Sol1-1
19854: PPUSH
19855: CALL 7255 0 3
// Say ( JMM , DCb-JMM-2 ) ;
19859: LD_EXP 1
19863: PPUSH
19864: LD_STRING DCb-JMM-2
19866: PPUSH
19867: CALL_OW 88
// secondAttack = 1 ;
19871: LD_ADDR_EXP 34
19875: PUSH
19876: LD_INT 1
19878: ST_TO_ADDR
// end ;
19879: PPOPN 1
19881: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 18 18$00 do
19882: LD_EXP 39
19886: PUSH
19887: LD_INT 1
19889: EQUAL
19890: PUSH
19891: LD_OWVAR 1
19895: PUSH
19896: LD_INT 37800
19898: GREATEREQUAL
19899: AND
19900: IFFALSE 19973
19902: GO 19904
19904: DISABLE
// begin DialogueOn ;
19905: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
19909: LD_EXP 23
19913: PPUSH
19914: LD_STRING D4-Pow-1
19916: PPUSH
19917: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
19921: LD_EXP 1
19925: PPUSH
19926: LD_STRING D4-JMM-1
19928: PPUSH
19929: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
19933: LD_EXP 23
19937: PPUSH
19938: LD_STRING D4-Pow-2
19940: PPUSH
19941: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
19945: LD_EXP 1
19949: PPUSH
19950: LD_STRING D4-JMM-2
19952: PPUSH
19953: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
19957: LD_EXP 23
19961: PPUSH
19962: LD_STRING D4-Pow-3
19964: PPUSH
19965: CALL_OW 94
// DialogueOff ;
19969: CALL_OW 7
// end ;
19973: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 24 24$00 do
19974: LD_EXP 39
19978: PUSH
19979: LD_INT 1
19981: EQUAL
19982: PUSH
19983: LD_OWVAR 1
19987: PUSH
19988: LD_INT 50400
19990: GREATEREQUAL
19991: AND
19992: IFFALSE 20017
19994: GO 19996
19996: DISABLE
// begin DialogueOn ;
19997: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
20001: LD_EXP 23
20005: PPUSH
20006: LD_STRING D4a-Pow-1
20008: PPUSH
20009: CALL_OW 94
// DialogueOff ;
20013: CALL_OW 7
// end ;
20017: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 35 35$00 do
20018: LD_EXP 39
20022: PUSH
20023: LD_INT 1
20025: EQUAL
20026: PUSH
20027: LD_OWVAR 1
20031: PUSH
20032: LD_INT 73500
20034: GREATEREQUAL
20035: AND
20036: IFFALSE 20057
20038: GO 20040
20040: DISABLE
// begin PrepareSikorsky ;
20041: CALL 5780 0 0
// SikorskyArrive = 1 ;
20045: LD_ADDR_EXP 18
20049: PUSH
20050: LD_INT 1
20052: ST_TO_ADDR
// PrepareSikorskyArmy ;
20053: CALL 5956 0 0
// end ;
20057: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
20058: LD_EXP 17
20062: PPUSH
20063: LD_INT 5
20065: PPUSH
20066: CALL_OW 308
20070: IFFALSE 20262
20072: GO 20074
20074: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
20075: LD_EXP 17
20079: PPUSH
20080: CALL_OW 87
// DialogueOn ;
20084: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
20088: LD_EXP 16
20092: PPUSH
20093: LD_STRING D5-Sik-1
20095: PPUSH
20096: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
20100: LD_EXP 1
20104: PPUSH
20105: LD_STRING D5-JMM-1a
20107: PPUSH
20108: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
20112: LD_EXP 16
20116: PPUSH
20117: LD_STRING D5-Sik-2
20119: PPUSH
20120: CALL_OW 88
// case query ( QSikorski ) of 1 :
20124: LD_STRING QSikorski
20126: PPUSH
20127: CALL_OW 97
20131: PUSH
20132: LD_INT 1
20134: DOUBLE
20135: EQUAL
20136: IFTRUE 20140
20138: GO 20163
20140: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
20141: LD_EXP 16
20145: PPUSH
20146: LD_STRING D5a-Sik-1
20148: PPUSH
20149: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
20153: LD_ADDR_EXP 19
20157: PUSH
20158: LD_INT 2100
20160: ST_TO_ADDR
// end ; 2 :
20161: GO 20250
20163: LD_INT 2
20165: DOUBLE
20166: EQUAL
20167: IFTRUE 20171
20169: GO 20194
20171: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
20172: LD_EXP 16
20176: PPUSH
20177: LD_STRING D5b-Sik-1
20179: PPUSH
20180: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20184: LD_ADDR_EXP 19
20188: PUSH
20189: LD_INT 10500
20191: ST_TO_ADDR
// end ; 3 :
20192: GO 20250
20194: LD_INT 3
20196: DOUBLE
20197: EQUAL
20198: IFTRUE 20202
20200: GO 20249
20202: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
20203: LD_EXP 16
20207: PPUSH
20208: LD_STRING D5c-Sik-1
20210: PPUSH
20211: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
20215: LD_EXP 1
20219: PPUSH
20220: LD_STRING D5c-JMM-1
20222: PPUSH
20223: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
20227: LD_EXP 16
20231: PPUSH
20232: LD_STRING D5c-Sik-2
20234: PPUSH
20235: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20239: LD_ADDR_EXP 19
20243: PUSH
20244: LD_INT 10500
20246: ST_TO_ADDR
// end ; end ;
20247: GO 20250
20249: POP
// DialogueOff ;
20250: CALL_OW 7
// timerStatus = 1 ;
20254: LD_ADDR_EXP 35
20258: PUSH
20259: LD_INT 1
20261: ST_TO_ADDR
// end ;
20262: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
20263: LD_EXP 19
20267: PUSH
20268: LD_INT 35
20270: LESS
20271: IFFALSE 20319
20273: GO 20275
20275: DISABLE
// begin timerStatus = 0 ;
20276: LD_ADDR_EXP 35
20280: PUSH
20281: LD_INT 0
20283: ST_TO_ADDR
// DialogueOn ;
20284: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
20288: LD_EXP 16
20292: PPUSH
20293: LD_STRING D6-Sik-1
20295: PPUSH
20296: CALL_OW 88
// DialogueOff ;
20300: CALL_OW 7
// SikorskyAI = 1 ;
20304: LD_ADDR_EXP 20
20308: PUSH
20309: LD_INT 1
20311: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
20312: LD_STRING M2
20314: PPUSH
20315: CALL_OW 337
// end ;
20319: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
20320: LD_EXP 17
20324: PPUSH
20325: LD_INT 18
20327: PPUSH
20328: CALL_OW 308
20332: IFFALSE 20442
20334: GO 20336
20336: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
20337: LD_EXP 16
20341: PPUSH
20342: LD_STRING D7-Sik-1
20344: PPUSH
20345: CALL_OW 88
// wait ( 0 0$10 ) ;
20349: LD_INT 350
20351: PPUSH
20352: CALL_OW 67
// if IsInArea ( JMM , RussianBaseTerritory ) or ( GetDriverVehicle ( JMM ) and IsInArea ( GetDriverVehicle ( JMM ) , RussianBaseTerritory ) ) then
20356: LD_EXP 1
20360: PPUSH
20361: LD_INT 24
20363: PPUSH
20364: CALL_OW 308
20368: PUSH
20369: LD_EXP 1
20373: PPUSH
20374: CALL 16985 0 1
20378: PUSH
20379: LD_EXP 1
20383: PPUSH
20384: CALL 16985 0 1
20388: PPUSH
20389: LD_INT 24
20391: PPUSH
20392: CALL_OW 308
20396: AND
20397: OR
20398: IFFALSE 20422
// begin Say ( Sikorski , D7a-Sik-1 ) ;
20400: LD_EXP 16
20404: PPUSH
20405: LD_STRING D7a-Sik-1
20407: PPUSH
20408: CALL_OW 88
// SikorskyStatus = 1 ;
20412: LD_ADDR_EXP 21
20416: PUSH
20417: LD_INT 1
20419: ST_TO_ADDR
// end else
20420: GO 20442
// begin Say ( Sikorski , D7b-Sik-1 ) ;
20422: LD_EXP 16
20426: PPUSH
20427: LD_STRING D7b-Sik-1
20429: PPUSH
20430: CALL_OW 88
// SikorskyStatus = 2 ;
20434: LD_ADDR_EXP 21
20438: PUSH
20439: LD_INT 2
20441: ST_TO_ADDR
// end ; end ; end_of_file
20442: END
// on BuildingComplete ( building ) do var tmp , un ;
20443: LD_INT 0
20445: PPUSH
20446: PPUSH
// begin if GetSide ( building ) = 3 then
20447: LD_VAR 0 1
20451: PPUSH
20452: CALL_OW 255
20456: PUSH
20457: LD_INT 3
20459: EQUAL
20460: IFFALSE 20997
// begin if GetBType ( building ) = b_depot then
20462: LD_VAR 0 1
20466: PPUSH
20467: CALL_OW 266
20471: PUSH
20472: LD_INT 0
20474: EQUAL
20475: IFFALSE 20543
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
20477: LD_VAR 0 1
20481: PPUSH
20482: CALL_OW 274
20486: PPUSH
20487: LD_INT 1
20489: PPUSH
20490: LD_INT 5000
20492: PPUSH
20493: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
20497: LD_VAR 0 1
20501: PPUSH
20502: CALL_OW 274
20506: PPUSH
20507: LD_INT 2
20509: PPUSH
20510: LD_INT 5000
20512: PPUSH
20513: CALL_OW 277
// SetBName ( building , konev ) ;
20517: LD_VAR 0 1
20521: PPUSH
20522: LD_STRING konev
20524: PPUSH
20525: CALL_OW 500
// ruDepot = building ;
20529: LD_ADDR_EXP 28
20533: PUSH
20534: LD_VAR 0 1
20538: ST_TO_ADDR
// BuildRussianBase ;
20539: CALL 7866 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
20543: LD_VAR 0 1
20547: PPUSH
20548: CALL_OW 266
20552: PUSH
20553: LD_INT 0
20555: EQUAL
20556: PUSH
20557: LD_VAR 0 1
20561: PPUSH
20562: CALL_OW 266
20566: PUSH
20567: LD_INT 2
20569: EQUAL
20570: OR
20571: PUSH
20572: LD_VAR 0 1
20576: PPUSH
20577: CALL_OW 266
20581: PUSH
20582: LD_INT 4
20584: EQUAL
20585: OR
20586: IFFALSE 20597
// ComUpgrade ( building ) ;
20588: LD_VAR 0 1
20592: PPUSH
20593: CALL_OW 146
// if GetBType ( building ) = b_lab then
20597: LD_VAR 0 1
20601: PPUSH
20602: CALL_OW 266
20606: PUSH
20607: LD_INT 6
20609: EQUAL
20610: IFFALSE 20661
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20612: LD_VAR 0 1
20616: PPUSH
20617: LD_INT 10
20619: PPUSH
20620: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
20624: LD_VAR 0 1
20628: PPUSH
20629: LD_INT 12
20631: PPUSH
20632: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
20636: LD_INT 3
20638: PPUSH
20639: LD_VAR 0 1
20643: PPUSH
20644: LD_INT 3
20646: PPUSH
20647: CALL 8410 0 3
// ruLab = building ;
20651: LD_ADDR_EXP 29
20655: PUSH
20656: LD_VAR 0 1
20660: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
20661: LD_VAR 0 1
20665: PPUSH
20666: CALL_OW 266
20670: PUSH
20671: LD_INT 32
20673: EQUAL
20674: IFFALSE 20792
// begin uc_side = 3 ;
20676: LD_ADDR_OWVAR 20
20680: PUSH
20681: LD_INT 3
20683: ST_TO_ADDR
// uc_nation = 3 ;
20684: LD_ADDR_OWVAR 21
20688: PUSH
20689: LD_INT 3
20691: ST_TO_ADDR
// hc_gallery =  ;
20692: LD_ADDR_OWVAR 33
20696: PUSH
20697: LD_STRING 
20699: ST_TO_ADDR
// hc_name =  ;
20700: LD_ADDR_OWVAR 26
20704: PUSH
20705: LD_STRING 
20707: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
20708: LD_INT 0
20710: PPUSH
20711: LD_INT 1
20713: PPUSH
20714: LD_EXP 25
20718: PPUSH
20719: LD_EXP 26
20723: PPUSH
20724: CALL_OW 12
20728: PPUSH
20729: CALL_OW 380
// un = CreateHuman ;
20733: LD_ADDR_VAR 0 3
20737: PUSH
20738: CALL_OW 44
20742: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
20743: LD_VAR 0 3
20747: PPUSH
20748: LD_VAR 0 1
20752: PPUSH
20753: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20757: LD_VAR 0 1
20761: PPUSH
20762: LD_INT 43
20764: PUSH
20765: LD_INT 44
20767: PUSH
20768: LD_INT 46
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 1
20778: PPUSH
20779: LD_INT 3
20781: PPUSH
20782: CALL_OW 12
20786: ARRAY
20787: PPUSH
20788: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
20792: LD_VAR 0 1
20796: PPUSH
20797: CALL_OW 266
20801: PUSH
20802: LD_INT 33
20804: EQUAL
20805: IFFALSE 20842
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20807: LD_VAR 0 1
20811: PPUSH
20812: LD_INT 43
20814: PUSH
20815: LD_INT 44
20817: PUSH
20818: LD_INT 46
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 1
20828: PPUSH
20829: LD_INT 3
20831: PPUSH
20832: CALL_OW 12
20836: ARRAY
20837: PPUSH
20838: CALL_OW 208
// if GetBType ( building ) = b_bunker then
20842: LD_VAR 0 1
20846: PPUSH
20847: CALL_OW 266
20851: PUSH
20852: LD_INT 32
20854: EQUAL
20855: IFFALSE 20892
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20857: LD_VAR 0 1
20861: PPUSH
20862: LD_INT 43
20864: PUSH
20865: LD_INT 44
20867: PUSH
20868: LD_INT 46
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 1
20878: PPUSH
20879: LD_INT 3
20881: PPUSH
20882: CALL_OW 12
20886: ARRAY
20887: PPUSH
20888: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
20892: LD_VAR 0 1
20896: PPUSH
20897: CALL_OW 266
20901: PUSH
20902: LD_INT 24
20904: EQUAL
20905: IFFALSE 20915
// russianAI = 1 ;
20907: LD_ADDR_EXP 27
20911: PUSH
20912: LD_INT 1
20914: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
20915: LD_EXP 31
20919: PUSH
20920: LD_INT 0
20922: GREATER
20923: IFFALSE 20997
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20925: LD_ADDR_EXP 31
20929: PUSH
20930: LD_EXP 31
20934: PPUSH
20935: LD_INT 1
20937: PPUSH
20938: CALL_OW 3
20942: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20943: LD_ADDR_EXP 31
20947: PUSH
20948: LD_EXP 31
20952: PPUSH
20953: LD_INT 1
20955: PPUSH
20956: CALL_OW 3
20960: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20961: LD_ADDR_EXP 31
20965: PUSH
20966: LD_EXP 31
20970: PPUSH
20971: LD_INT 1
20973: PPUSH
20974: CALL_OW 3
20978: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20979: LD_ADDR_EXP 31
20983: PUSH
20984: LD_EXP 31
20988: PPUSH
20989: LD_INT 1
20991: PPUSH
20992: CALL_OW 3
20996: ST_TO_ADDR
// end ; end ; end ;
20997: PPOPN 3
20999: END
// on UpgradeComplete ( building ) do var i ;
21000: LD_INT 0
21002: PPUSH
// begin if GetSide ( building ) = 3 then
21003: LD_VAR 0 1
21007: PPUSH
21008: CALL_OW 255
21012: PUSH
21013: LD_INT 3
21015: EQUAL
21016: IFFALSE 21197
// begin if GetBType ( building ) = b_factory then
21018: LD_VAR 0 1
21022: PPUSH
21023: CALL_OW 266
21027: PUSH
21028: LD_INT 3
21030: EQUAL
21031: IFFALSE 21098
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
21033: LD_ADDR_VAR 0 2
21037: PUSH
21038: LD_INT 22
21040: PUSH
21041: LD_INT 3
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 25
21050: PUSH
21051: LD_INT 3
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PPUSH
21062: CALL_OW 69
21066: PUSH
21067: FOR_IN
21068: IFFALSE 21086
// ComEnterUnit ( i , building ) ;
21070: LD_VAR 0 2
21074: PPUSH
21075: LD_VAR 0 1
21079: PPUSH
21080: CALL_OW 120
21084: GO 21067
21086: POP
21087: POP
// ruFab = building ;
21088: LD_ADDR_EXP 30
21092: PUSH
21093: LD_VAR 0 1
21097: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
21098: LD_VAR 0 1
21102: PPUSH
21103: CALL_OW 266
21107: PUSH
21108: LD_INT 8
21110: EQUAL
21111: IFFALSE 21168
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21113: LD_ADDR_VAR 0 2
21117: PUSH
21118: LD_INT 22
21120: PUSH
21121: LD_INT 3
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 25
21130: PUSH
21131: LD_INT 4
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PPUSH
21142: CALL_OW 69
21146: PUSH
21147: FOR_IN
21148: IFFALSE 21166
// ComEnterUnit ( i , building ) ;
21150: LD_VAR 0 2
21154: PPUSH
21155: LD_VAR 0 1
21159: PPUSH
21160: CALL_OW 120
21164: GO 21147
21166: POP
21167: POP
// if GetBType ( building ) = b_warehouse then
21168: LD_VAR 0 1
21172: PPUSH
21173: CALL_OW 266
21177: PUSH
21178: LD_INT 1
21180: EQUAL
21181: IFFALSE 21197
// begin ComEnterUnit ( Borodin , building ) ;
21183: LD_EXP 24
21187: PPUSH
21188: LD_VAR 0 1
21192: PPUSH
21193: CALL_OW 120
// end ; end ; end ;
21197: PPOPN 2
21199: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
21200: LD_VAR 0 1
21204: PPUSH
21205: CALL_OW 247
21209: PUSH
21210: LD_INT 2
21212: EQUAL
21213: PUSH
21214: LD_VAR 0 1
21218: PPUSH
21219: CALL_OW 263
21223: PUSH
21224: LD_INT 3
21226: EQUAL
21227: AND
21228: PUSH
21229: LD_EXP 41
21233: PUSH
21234: LD_INT 0
21236: EQUAL
21237: AND
21238: IFFALSE 21356
// begin varEvent1 = 1 ;
21240: LD_ADDR_EXP 41
21244: PUSH
21245: LD_INT 1
21247: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
21248: LD_VAR 0 1
21252: PPUSH
21253: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
21257: LD_INT 22
21259: PUSH
21260: LD_INT 1
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 21
21269: PUSH
21270: LD_INT 1
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PUSH
21277: LD_INT 2
21279: PUSH
21280: LD_INT 25
21282: PUSH
21283: LD_INT 1
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 25
21292: PUSH
21293: LD_INT 2
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 25
21302: PUSH
21303: LD_INT 3
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 25
21312: PUSH
21313: LD_INT 4
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: LIST
21331: PPUSH
21332: CALL_OW 69
21336: PUSH
21337: LD_EXP 1
21341: PUSH
21342: EMPTY
21343: LIST
21344: DIFF
21345: PPUSH
21346: LD_STRING DC-Sol1-1
21348: PPUSH
21349: LD_STRING DC-FSol1-1
21351: PPUSH
21352: CALL 7255 0 3
// end ; end ;
21356: PPOPN 1
21358: END
// on UnitDestroyed ( unit ) do var i ;
21359: LD_INT 0
21361: PPUSH
// begin if unit = Joan then
21362: LD_VAR 0 1
21366: PUSH
21367: LD_EXP 15
21371: EQUAL
21372: IFFALSE 21381
// DeleteCharacters ( Joan ) ;
21374: LD_STRING Joan
21376: PPUSH
21377: CALL_OW 40
// if GetSide ( unit ) = 3 then
21381: LD_VAR 0 1
21385: PPUSH
21386: CALL_OW 255
21390: PUSH
21391: LD_INT 3
21393: EQUAL
21394: IFFALSE 22164
// begin if GetType ( unit ) = unit_building then
21396: LD_VAR 0 1
21400: PPUSH
21401: CALL_OW 247
21405: PUSH
21406: LD_INT 3
21408: EQUAL
21409: IFFALSE 22101
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
21411: LD_VAR 0 1
21415: PPUSH
21416: CALL_OW 266
21420: PUSH
21421: LD_INT 31
21423: EQUAL
21424: PUSH
21425: LD_VAR 0 1
21429: PPUSH
21430: CALL_OW 266
21434: PUSH
21435: LD_INT 32
21437: EQUAL
21438: OR
21439: PUSH
21440: LD_VAR 0 1
21444: PPUSH
21445: CALL_OW 266
21449: PUSH
21450: LD_INT 36
21452: EQUAL
21453: OR
21454: PUSH
21455: LD_VAR 0 1
21459: PPUSH
21460: CALL_OW 266
21464: PUSH
21465: LD_INT 0
21467: EQUAL
21468: OR
21469: PUSH
21470: LD_VAR 0 1
21474: PPUSH
21475: CALL_OW 266
21479: PUSH
21480: LD_INT 24
21482: EQUAL
21483: OR
21484: PUSH
21485: LD_VAR 0 1
21489: PPUSH
21490: CALL_OW 266
21494: PUSH
21495: LD_INT 17
21497: EQUAL
21498: OR
21499: PUSH
21500: LD_VAR 0 1
21504: PPUSH
21505: CALL_OW 266
21509: PUSH
21510: LD_INT 25
21512: EQUAL
21513: OR
21514: PUSH
21515: LD_VAR 0 1
21519: PPUSH
21520: CALL_OW 266
21524: PUSH
21525: LD_INT 19
21527: EQUAL
21528: OR
21529: PUSH
21530: LD_VAR 0 1
21534: PPUSH
21535: CALL_OW 266
21539: PUSH
21540: LD_INT 20
21542: EQUAL
21543: OR
21544: PUSH
21545: LD_VAR 0 1
21549: PPUSH
21550: CALL_OW 266
21554: PUSH
21555: LD_INT 18
21557: EQUAL
21558: OR
21559: PUSH
21560: LD_VAR 0 1
21564: PPUSH
21565: CALL_OW 266
21569: PUSH
21570: LD_INT 21
21572: EQUAL
21573: OR
21574: PUSH
21575: LD_VAR 0 1
21579: PPUSH
21580: CALL_OW 266
21584: PUSH
21585: LD_INT 23
21587: EQUAL
21588: OR
21589: PUSH
21590: LD_VAR 0 1
21594: PPUSH
21595: CALL_OW 266
21599: PUSH
21600: LD_INT 16
21602: EQUAL
21603: OR
21604: PUSH
21605: LD_VAR 0 1
21609: PPUSH
21610: CALL_OW 266
21614: PUSH
21615: LD_INT 6
21617: EQUAL
21618: OR
21619: PUSH
21620: LD_VAR 0 1
21624: PPUSH
21625: CALL_OW 266
21629: PUSH
21630: LD_INT 29
21632: EQUAL
21633: OR
21634: PUSH
21635: LD_VAR 0 1
21639: PPUSH
21640: CALL_OW 266
21644: PUSH
21645: LD_INT 26
21647: EQUAL
21648: OR
21649: PUSH
21650: LD_VAR 0 1
21654: PPUSH
21655: CALL_OW 266
21659: PUSH
21660: LD_INT 30
21662: EQUAL
21663: OR
21664: PUSH
21665: LD_VAR 0 1
21669: PPUSH
21670: CALL_OW 266
21674: PUSH
21675: LD_INT 28
21677: EQUAL
21678: OR
21679: PUSH
21680: LD_VAR 0 1
21684: PPUSH
21685: CALL_OW 266
21689: PUSH
21690: LD_INT 27
21692: EQUAL
21693: OR
21694: PUSH
21695: LD_VAR 0 1
21699: PPUSH
21700: CALL_OW 266
21704: PUSH
21705: LD_INT 33
21707: EQUAL
21708: OR
21709: PUSH
21710: LD_VAR 0 1
21714: PPUSH
21715: CALL_OW 266
21719: PUSH
21720: LD_INT 2
21722: EQUAL
21723: OR
21724: PUSH
21725: LD_VAR 0 1
21729: PPUSH
21730: CALL_OW 266
21734: PUSH
21735: LD_INT 4
21737: EQUAL
21738: OR
21739: IFFALSE 21825
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
21741: LD_ADDR_EXP 31
21745: PUSH
21746: LD_EXP 31
21750: PUSH
21751: LD_VAR 0 1
21755: PPUSH
21756: CALL_OW 266
21760: ADD
21761: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21762: LD_ADDR_EXP 31
21766: PUSH
21767: LD_EXP 31
21771: PUSH
21772: LD_VAR 0 1
21776: PPUSH
21777: CALL_OW 250
21781: ADD
21782: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21783: LD_ADDR_EXP 31
21787: PUSH
21788: LD_EXP 31
21792: PUSH
21793: LD_VAR 0 1
21797: PPUSH
21798: CALL_OW 251
21802: ADD
21803: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21804: LD_ADDR_EXP 31
21808: PUSH
21809: LD_EXP 31
21813: PUSH
21814: LD_VAR 0 1
21818: PPUSH
21819: CALL_OW 254
21823: ADD
21824: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
21825: LD_VAR 0 1
21829: PPUSH
21830: CALL_OW 266
21834: PUSH
21835: LD_INT 1
21837: EQUAL
21838: IFFALSE 21917
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
21840: LD_ADDR_EXP 31
21844: PUSH
21845: LD_EXP 31
21849: PUSH
21850: LD_INT 0
21852: ADD
21853: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21854: LD_ADDR_EXP 31
21858: PUSH
21859: LD_EXP 31
21863: PUSH
21864: LD_VAR 0 1
21868: PPUSH
21869: CALL_OW 250
21873: ADD
21874: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21875: LD_ADDR_EXP 31
21879: PUSH
21880: LD_EXP 31
21884: PUSH
21885: LD_VAR 0 1
21889: PPUSH
21890: CALL_OW 251
21894: ADD
21895: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21896: LD_ADDR_EXP 31
21900: PUSH
21901: LD_EXP 31
21905: PUSH
21906: LD_VAR 0 1
21910: PPUSH
21911: CALL_OW 254
21915: ADD
21916: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
21917: LD_VAR 0 1
21921: PPUSH
21922: CALL_OW 266
21926: PUSH
21927: LD_INT 3
21929: EQUAL
21930: IFFALSE 22009
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
21932: LD_ADDR_EXP 31
21936: PUSH
21937: LD_EXP 31
21941: PUSH
21942: LD_INT 2
21944: ADD
21945: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21946: LD_ADDR_EXP 31
21950: PUSH
21951: LD_EXP 31
21955: PUSH
21956: LD_VAR 0 1
21960: PPUSH
21961: CALL_OW 250
21965: ADD
21966: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21967: LD_ADDR_EXP 31
21971: PUSH
21972: LD_EXP 31
21976: PUSH
21977: LD_VAR 0 1
21981: PPUSH
21982: CALL_OW 251
21986: ADD
21987: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21988: LD_ADDR_EXP 31
21992: PUSH
21993: LD_EXP 31
21997: PUSH
21998: LD_VAR 0 1
22002: PPUSH
22003: CALL_OW 254
22007: ADD
22008: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
22009: LD_VAR 0 1
22013: PPUSH
22014: CALL_OW 266
22018: PUSH
22019: LD_INT 5
22021: EQUAL
22022: IFFALSE 22101
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
22024: LD_ADDR_EXP 31
22028: PUSH
22029: LD_EXP 31
22033: PUSH
22034: LD_INT 4
22036: ADD
22037: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22038: LD_ADDR_EXP 31
22042: PUSH
22043: LD_EXP 31
22047: PUSH
22048: LD_VAR 0 1
22052: PPUSH
22053: CALL_OW 250
22057: ADD
22058: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22059: LD_ADDR_EXP 31
22063: PUSH
22064: LD_EXP 31
22068: PUSH
22069: LD_VAR 0 1
22073: PPUSH
22074: CALL_OW 251
22078: ADD
22079: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22080: LD_ADDR_EXP 31
22084: PUSH
22085: LD_EXP 31
22089: PUSH
22090: LD_VAR 0 1
22094: PPUSH
22095: CALL_OW 254
22099: ADD
22100: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
22101: LD_VAR 0 1
22105: PPUSH
22106: CALL_OW 247
22110: PUSH
22111: LD_INT 1
22113: EQUAL
22114: IFFALSE 22164
// begin for i in defenders_list do
22116: LD_ADDR_VAR 0 2
22120: PUSH
22121: LD_EXP 32
22125: PUSH
22126: FOR_IN
22127: IFFALSE 22162
// if i = unit then
22129: LD_VAR 0 2
22133: PUSH
22134: LD_VAR 0 1
22138: EQUAL
22139: IFFALSE 22160
// defenders_list = defenders_list diff [ unit ] ;
22141: LD_ADDR_EXP 32
22145: PUSH
22146: LD_EXP 32
22150: PUSH
22151: LD_VAR 0 1
22155: PUSH
22156: EMPTY
22157: LIST
22158: DIFF
22159: ST_TO_ADDR
22160: GO 22126
22162: POP
22163: POP
// end ; end ; end ;
22164: PPOPN 2
22166: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
22167: LD_VAR 0 1
22171: PPUSH
22172: CALL 40315 0 1
// end ; end_of_file
22176: PPOPN 1
22178: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
22179: GO 22181
22181: DISABLE
22182: LD_INT 0
22184: PPUSH
// begin enemyWayX = [ ] ;
22185: LD_ADDR_EXP 46
22189: PUSH
22190: EMPTY
22191: ST_TO_ADDR
// enemyWayY = [ ] ;
22192: LD_ADDR_EXP 47
22196: PUSH
22197: EMPTY
22198: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
22199: LD_ADDR_VAR 0 1
22203: PUSH
22204: LD_INT 1
22206: PPUSH
22207: LD_INT 3
22209: PPUSH
22210: CALL_OW 12
22214: ST_TO_ADDR
// if rnd = 1 then
22215: LD_VAR 0 1
22219: PUSH
22220: LD_INT 1
22222: EQUAL
22223: IFFALSE 22263
// begin enemyWayX = [ 73 , 46 , 29 ] ;
22225: LD_ADDR_EXP 46
22229: PUSH
22230: LD_INT 73
22232: PUSH
22233: LD_INT 46
22235: PUSH
22236: LD_INT 29
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: LIST
22243: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
22244: LD_ADDR_EXP 47
22248: PUSH
22249: LD_INT 71
22251: PUSH
22252: LD_INT 43
22254: PUSH
22255: LD_INT 29
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: LIST
22262: ST_TO_ADDR
// end ; if rnd = 2 then
22263: LD_VAR 0 1
22267: PUSH
22268: LD_INT 2
22270: EQUAL
22271: IFFALSE 22295
// begin enemyWayX = [ 64 ] ;
22273: LD_ADDR_EXP 46
22277: PUSH
22278: LD_INT 64
22280: PUSH
22281: EMPTY
22282: LIST
22283: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
22284: LD_ADDR_EXP 47
22288: PUSH
22289: LD_INT 43
22291: PUSH
22292: EMPTY
22293: LIST
22294: ST_TO_ADDR
// end ; if rnd = 3 then
22295: LD_VAR 0 1
22299: PUSH
22300: LD_INT 3
22302: EQUAL
22303: IFFALSE 22327
// begin enemyWayX = [ 80 ] ;
22305: LD_ADDR_EXP 46
22309: PUSH
22310: LD_INT 80
22312: PUSH
22313: EMPTY
22314: LIST
22315: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
22316: LD_ADDR_EXP 47
22320: PUSH
22321: LD_INT 28
22323: PUSH
22324: EMPTY
22325: LIST
22326: ST_TO_ADDR
// end ; enable ;
22327: ENABLE
// end ;
22328: PPOPN 1
22330: END
// every 0 0$1 do
22331: GO 22333
22333: DISABLE
// begin enable ;
22334: ENABLE
// if escapeAvalaible = 0 then
22335: LD_EXP 36
22339: PUSH
22340: LD_INT 0
22342: EQUAL
22343: IFFALSE 22355
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
22345: LD_INT 3
22347: PPUSH
22348: LD_INT 6
22350: PPUSH
22351: CALL 8651 0 2
// if escapeAvalaible = 0 then
22355: LD_EXP 36
22359: PUSH
22360: LD_INT 0
22362: EQUAL
22363: IFFALSE 22375
// DefenseBase ( 1 , RussianBaseTerritory ) ;
22365: LD_INT 1
22367: PPUSH
22368: LD_INT 24
22370: PPUSH
22371: CALL 9311 0 2
// if russianAI = 1 then
22375: LD_EXP 27
22379: PUSH
22380: LD_INT 1
22382: EQUAL
22383: IFFALSE 22453
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
22385: LD_INT 3
22387: PPUSH
22388: LD_INT 7
22390: PPUSH
22391: LD_INT 6
22393: PPUSH
22394: LD_EXP 29
22398: PPUSH
22399: CALL 11749 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
22403: LD_INT 3
22405: PPUSH
22406: LD_EXP 28
22410: PPUSH
22411: LD_INT 6
22413: PPUSH
22414: LD_EXP 31
22418: PPUSH
22419: CALL 11343 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
22423: LD_INT 3
22425: PPUSH
22426: LD_INT 26
22428: PPUSH
22429: LD_EXP 46
22433: PPUSH
22434: LD_EXP 47
22438: PPUSH
22439: CALL 10211 0 4
// AttackNearBuildings ( 3 , 1 ) ;
22443: LD_INT 3
22445: PPUSH
22446: LD_INT 1
22448: PPUSH
22449: CALL 12293 0 2
// end ; if SikorskyArrive = 1 then
22453: LD_EXP 18
22457: PUSH
22458: LD_INT 1
22460: EQUAL
22461: IFFALSE 22479
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
22463: LD_INT 3
22465: PPUSH
22466: LD_INT 10
22468: PPUSH
22469: LD_INT 53
22471: PPUSH
22472: LD_INT 59
22474: PPUSH
22475: CALL 10008 0 4
// end ;
22479: END
// every 0 0$1 trigger russianAI = 1 do var i ;
22480: LD_EXP 27
22484: PUSH
22485: LD_INT 1
22487: EQUAL
22488: IFFALSE 22764
22490: GO 22492
22492: DISABLE
22493: LD_INT 0
22495: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22496: LD_ADDR_VAR 0 1
22500: PUSH
22501: LD_INT 22
22503: PUSH
22504: LD_INT 3
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 21
22513: PUSH
22514: LD_INT 3
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 30
22523: PUSH
22524: LD_INT 32
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: LD_INT 3
22533: PUSH
22534: LD_INT 2
22536: PUSH
22537: LD_INT 35
22539: PUSH
22540: LD_INT 43
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 35
22549: PUSH
22550: LD_INT 44
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 35
22559: PUSH
22560: LD_INT 46
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: PPUSH
22583: CALL_OW 69
22587: PUSH
22588: FOR_IN
22589: IFFALSE 22628
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22591: LD_VAR 0 1
22595: PPUSH
22596: LD_INT 43
22598: PUSH
22599: LD_INT 44
22601: PUSH
22602: LD_INT 46
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 1
22612: PPUSH
22613: LD_INT 3
22615: PPUSH
22616: CALL_OW 12
22620: ARRAY
22621: PPUSH
22622: CALL_OW 431
22626: GO 22588
22628: POP
22629: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22630: LD_ADDR_VAR 0 1
22634: PUSH
22635: LD_INT 22
22637: PUSH
22638: LD_INT 3
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 21
22647: PUSH
22648: LD_INT 3
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 30
22657: PUSH
22658: LD_INT 33
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 3
22667: PUSH
22668: LD_INT 2
22670: PUSH
22671: LD_INT 35
22673: PUSH
22674: LD_INT 43
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 35
22683: PUSH
22684: LD_INT 44
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 35
22693: PUSH
22694: LD_INT 46
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: PPUSH
22717: CALL_OW 69
22721: PUSH
22722: FOR_IN
22723: IFFALSE 22762
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22725: LD_VAR 0 1
22729: PPUSH
22730: LD_INT 43
22732: PUSH
22733: LD_INT 44
22735: PUSH
22736: LD_INT 46
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 1
22746: PPUSH
22747: LD_INT 3
22749: PPUSH
22750: CALL_OW 12
22754: ARRAY
22755: PPUSH
22756: CALL_OW 431
22760: GO 22722
22762: POP
22763: POP
// end ;
22764: PPOPN 1
22766: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
22767: LD_EXP 24
22771: PPUSH
22772: CALL_OW 310
22776: NOT
22777: PUSH
22778: LD_EXP 28
22782: PPUSH
22783: CALL_OW 302
22787: AND
22788: PUSH
22789: LD_EXP 28
22793: PPUSH
22794: CALL_OW 255
22798: PUSH
22799: LD_INT 3
22801: EQUAL
22802: AND
22803: IFFALSE 22823
22805: GO 22807
22807: DISABLE
// begin enable ;
22808: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
22809: LD_EXP 24
22813: PPUSH
22814: LD_EXP 28
22818: PPUSH
22819: CALL_OW 120
// end ;
22823: END
// every 0 0$1 trigger SikorskyAI = 1 do
22824: LD_EXP 20
22828: PUSH
22829: LD_INT 1
22831: EQUAL
22832: IFFALSE 22867
22834: GO 22836
22836: DISABLE
// begin enable ;
22837: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
22838: LD_INT 4
22840: PPUSH
22841: LD_INT 10
22843: PPUSH
22844: LD_INT 93
22846: PPUSH
22847: LD_INT 93
22849: PPUSH
22850: CALL 10008 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
22854: LD_INT 4
22856: PPUSH
22857: LD_INT 11
22859: PPUSH
22860: LD_INT 3
22862: PPUSH
22863: CALL 16505 0 3
// end ;
22867: END
// every 0 0$1 trigger SikorskyAI = 1 do
22868: LD_EXP 20
22872: PUSH
22873: LD_INT 1
22875: EQUAL
22876: IFFALSE 22888
22878: GO 22880
22880: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
22881: LD_INT 4
22883: PPUSH
22884: CALL 11015 0 1
22888: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
22889: LD_EXP 27
22893: PUSH
22894: LD_INT 1
22896: EQUAL
22897: PUSH
22898: LD_EXP 30
22902: PPUSH
22903: CALL_OW 302
22907: AND
22908: PUSH
22909: LD_EXP 30
22913: PPUSH
22914: CALL_OW 255
22918: PUSH
22919: LD_INT 3
22921: EQUAL
22922: AND
22923: PUSH
22924: LD_INT 22
22926: PUSH
22927: LD_INT 3
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 21
22936: PUSH
22937: LD_INT 2
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 33
22946: PUSH
22947: LD_INT 3
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: LIST
22958: PPUSH
22959: CALL_OW 69
22963: PUSH
22964: LD_INT 0
22966: EQUAL
22967: AND
22968: IFFALSE 23202
22970: GO 22972
22972: DISABLE
// begin enable ;
22973: ENABLE
// if Difficulty = 1 then
22974: LD_OWVAR 67
22978: PUSH
22979: LD_INT 1
22981: EQUAL
22982: IFFALSE 23050
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
22984: LD_INT 3
22986: PPUSH
22987: LD_EXP 30
22991: PPUSH
22992: LD_INT 5
22994: PPUSH
22995: LD_INT 8
22997: PPUSH
22998: CALL_OW 12
23002: PPUSH
23003: LD_INT 43
23005: PUSH
23006: LD_INT 43
23008: PUSH
23009: LD_INT 43
23011: PUSH
23012: LD_INT 43
23014: PUSH
23015: LD_INT 44
23017: PUSH
23018: LD_INT 44
23020: PUSH
23021: LD_INT 44
23023: PUSH
23024: LD_INT 46
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: PPUSH
23037: LD_INT 1
23039: PPUSH
23040: LD_INT 3
23042: PPUSH
23043: LD_INT 24
23045: PPUSH
23046: CALL 9854 0 7
// if Difficulty = 2 then
23050: LD_OWVAR 67
23054: PUSH
23055: LD_INT 2
23057: EQUAL
23058: IFFALSE 23126
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
23060: LD_INT 3
23062: PPUSH
23063: LD_EXP 30
23067: PPUSH
23068: LD_INT 6
23070: PPUSH
23071: LD_INT 8
23073: PPUSH
23074: CALL_OW 12
23078: PPUSH
23079: LD_INT 43
23081: PUSH
23082: LD_INT 43
23084: PUSH
23085: LD_INT 44
23087: PUSH
23088: LD_INT 44
23090: PUSH
23091: LD_INT 44
23093: PUSH
23094: LD_INT 44
23096: PUSH
23097: LD_INT 46
23099: PUSH
23100: LD_INT 46
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: PPUSH
23113: LD_INT 1
23115: PPUSH
23116: LD_INT 3
23118: PPUSH
23119: LD_INT 24
23121: PPUSH
23122: CALL 9854 0 7
// if Difficulty = 3 then
23126: LD_OWVAR 67
23130: PUSH
23131: LD_INT 3
23133: EQUAL
23134: IFFALSE 23202
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
23136: LD_INT 3
23138: PPUSH
23139: LD_EXP 30
23143: PPUSH
23144: LD_INT 7
23146: PPUSH
23147: LD_INT 8
23149: PPUSH
23150: CALL_OW 12
23154: PPUSH
23155: LD_INT 43
23157: PUSH
23158: LD_INT 43
23160: PUSH
23161: LD_INT 44
23163: PUSH
23164: LD_INT 44
23166: PUSH
23167: LD_INT 44
23169: PUSH
23170: LD_INT 46
23172: PUSH
23173: LD_INT 46
23175: PUSH
23176: LD_INT 46
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: PPUSH
23189: LD_INT 1
23191: PPUSH
23192: LD_INT 3
23194: PPUSH
23195: LD_INT 24
23197: PPUSH
23198: CALL 9854 0 7
// end ;
23202: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
23203: LD_EXP 38
23207: PUSH
23208: LD_INT 1
23210: EQUAL
23211: IFFALSE 23293
23213: GO 23215
23215: DISABLE
23216: LD_INT 0
23218: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
23219: LD_ADDR_VAR 0 1
23223: PUSH
23224: LD_INT 22
23226: PUSH
23227: LD_INT 1
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 21
23236: PUSH
23237: LD_INT 1
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 3
23246: PUSH
23247: LD_INT 24
23249: PUSH
23250: LD_INT 650
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: LIST
23265: PPUSH
23266: CALL_OW 69
23270: PUSH
23271: FOR_IN
23272: IFFALSE 23291
// ComMoveXY ( i , 51 , 12 ) ;
23274: LD_VAR 0 1
23278: PPUSH
23279: LD_INT 51
23281: PPUSH
23282: LD_INT 12
23284: PPUSH
23285: CALL_OW 111
23289: GO 23271
23291: POP
23292: POP
// end ; end_of_file
23293: PPOPN 1
23295: END
// every 1 1$20 trigger firstAttack = 1 do
23296: LD_EXP 33
23300: PUSH
23301: LD_INT 1
23303: EQUAL
23304: IFFALSE 23410
23306: GO 23308
23308: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23309: LD_INT 6
23311: PPUSH
23312: LD_INT 3
23314: PPUSH
23315: LD_INT 3
23317: PPUSH
23318: LD_INT 4
23320: PPUSH
23321: CALL_OW 12
23325: PUSH
23326: LD_INT 4
23328: PPUSH
23329: LD_INT 6
23331: PPUSH
23332: CALL_OW 12
23336: PUSH
23337: LD_INT 5
23339: PPUSH
23340: LD_INT 6
23342: PPUSH
23343: CALL_OW 12
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: LIST
23352: PUSH
23353: LD_OWVAR 67
23357: ARRAY
23358: PPUSH
23359: LD_INT 0
23361: PPUSH
23362: LD_INT 0
23364: PPUSH
23365: LD_INT 0
23367: PPUSH
23368: LD_INT 0
23370: PPUSH
23371: LD_EXP 25
23375: PPUSH
23376: LD_EXP 26
23380: PPUSH
23381: CALL_OW 12
23385: PPUSH
23386: LD_INT 16
23388: PPUSH
23389: LD_INT 7
23391: PPUSH
23392: LD_INT 1
23394: PPUSH
23395: LD_INT 1
23397: PPUSH
23398: LD_INT 3
23400: PPUSH
23401: CALL_OW 12
23405: PPUSH
23406: CALL 12523 0 12
23410: END
// every 1 1$40 trigger firstAttack = 1 do
23411: LD_EXP 33
23415: PUSH
23416: LD_INT 1
23418: EQUAL
23419: IFFALSE 23511
23421: GO 23423
23423: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23424: LD_INT 16
23426: PPUSH
23427: LD_INT 6
23429: PPUSH
23430: LD_INT 3
23432: PPUSH
23433: LD_INT 4
23435: PPUSH
23436: CALL_OW 12
23440: PUSH
23441: LD_INT 4
23443: PPUSH
23444: LD_INT 5
23446: PPUSH
23447: CALL_OW 12
23451: PUSH
23452: LD_INT 5
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: LIST
23459: PUSH
23460: LD_OWVAR 67
23464: ARRAY
23465: PPUSH
23466: LD_EXP 25
23470: PPUSH
23471: LD_EXP 26
23475: PPUSH
23476: CALL_OW 12
23480: PPUSH
23481: LD_INT 3
23483: PPUSH
23484: LD_INT 1
23486: PPUSH
23487: LD_INT 3
23489: PPUSH
23490: LD_INT 44
23492: PUSH
23493: LD_INT 46
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PPUSH
23500: EMPTY
23501: PPUSH
23502: EMPTY
23503: PPUSH
23504: LD_INT 1
23506: PPUSH
23507: CALL 14816 0 11
23511: END
// every 6 6$40 trigger firstAttack = 1 and JMMArrive = 0 do
23512: LD_EXP 33
23516: PUSH
23517: LD_INT 1
23519: EQUAL
23520: PUSH
23521: LD_EXP 39
23525: PUSH
23526: LD_INT 0
23528: EQUAL
23529: AND
23530: IFFALSE 23636
23532: GO 23534
23534: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23535: LD_INT 6
23537: PPUSH
23538: LD_INT 3
23540: PPUSH
23541: LD_INT 4
23543: PPUSH
23544: LD_INT 5
23546: PPUSH
23547: CALL_OW 12
23551: PUSH
23552: LD_INT 5
23554: PPUSH
23555: LD_INT 6
23557: PPUSH
23558: CALL_OW 12
23562: PUSH
23563: LD_INT 5
23565: PPUSH
23566: LD_INT 6
23568: PPUSH
23569: CALL_OW 12
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: LIST
23578: PUSH
23579: LD_OWVAR 67
23583: ARRAY
23584: PPUSH
23585: LD_INT 0
23587: PPUSH
23588: LD_INT 0
23590: PPUSH
23591: LD_INT 0
23593: PPUSH
23594: LD_INT 0
23596: PPUSH
23597: LD_EXP 25
23601: PPUSH
23602: LD_EXP 26
23606: PPUSH
23607: CALL_OW 12
23611: PPUSH
23612: LD_INT 16
23614: PPUSH
23615: LD_INT 7
23617: PPUSH
23618: LD_INT 1
23620: PPUSH
23621: LD_INT 1
23623: PPUSH
23624: LD_INT 3
23626: PPUSH
23627: CALL_OW 12
23631: PPUSH
23632: CALL 12523 0 12
23636: END
// every 6 6$50 trigger firstAttack = 1 and JMMArrive = 0 do
23637: LD_EXP 33
23641: PUSH
23642: LD_INT 1
23644: EQUAL
23645: PUSH
23646: LD_EXP 39
23650: PUSH
23651: LD_INT 0
23653: EQUAL
23654: AND
23655: IFFALSE 23751
23657: GO 23659
23659: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23660: LD_INT 16
23662: PPUSH
23663: LD_INT 6
23665: PPUSH
23666: LD_INT 4
23668: PPUSH
23669: LD_INT 5
23671: PPUSH
23672: CALL_OW 12
23676: PUSH
23677: LD_INT 6
23679: PPUSH
23680: LD_INT 7
23682: PPUSH
23683: CALL_OW 12
23687: PUSH
23688: LD_INT 7
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: LIST
23695: PUSH
23696: LD_OWVAR 67
23700: ARRAY
23701: PPUSH
23702: LD_EXP 25
23706: PPUSH
23707: LD_EXP 26
23711: PPUSH
23712: CALL_OW 12
23716: PPUSH
23717: LD_INT 3
23719: PPUSH
23720: LD_INT 1
23722: PPUSH
23723: LD_INT 3
23725: PPUSH
23726: LD_INT 43
23728: PUSH
23729: LD_INT 44
23731: PUSH
23732: LD_INT 46
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: LIST
23739: PPUSH
23740: EMPTY
23741: PPUSH
23742: EMPTY
23743: PPUSH
23744: LD_INT 1
23746: PPUSH
23747: CALL 14816 0 11
23751: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
23752: LD_EXP 33
23756: PUSH
23757: LD_INT 1
23759: EQUAL
23760: PUSH
23761: LD_EXP 39
23765: PUSH
23766: LD_INT 0
23768: EQUAL
23769: AND
23770: IFFALSE 23866
23772: GO 23774
23774: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23775: LD_INT 16
23777: PPUSH
23778: LD_INT 6
23780: PPUSH
23781: LD_INT 4
23783: PPUSH
23784: LD_INT 5
23786: PPUSH
23787: CALL_OW 12
23791: PUSH
23792: LD_INT 6
23794: PPUSH
23795: LD_INT 7
23797: PPUSH
23798: CALL_OW 12
23802: PUSH
23803: LD_INT 7
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: LIST
23810: PUSH
23811: LD_OWVAR 67
23815: ARRAY
23816: PPUSH
23817: LD_EXP 25
23821: PPUSH
23822: LD_EXP 26
23826: PPUSH
23827: CALL_OW 12
23831: PPUSH
23832: LD_INT 3
23834: PPUSH
23835: LD_INT 1
23837: PPUSH
23838: LD_INT 3
23840: PPUSH
23841: LD_INT 43
23843: PUSH
23844: LD_INT 44
23846: PUSH
23847: LD_INT 46
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: PPUSH
23855: EMPTY
23856: PPUSH
23857: EMPTY
23858: PPUSH
23859: LD_INT 1
23861: PPUSH
23862: CALL 14816 0 11
23866: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
23867: LD_EXP 33
23871: PUSH
23872: LD_INT 1
23874: EQUAL
23875: PUSH
23876: LD_EXP 39
23880: PUSH
23881: LD_INT 0
23883: EQUAL
23884: AND
23885: IFFALSE 23961
23887: GO 23889
23889: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 4 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23890: LD_INT 16
23892: PPUSH
23893: LD_INT 6
23895: PPUSH
23896: LD_INT 4
23898: PUSH
23899: LD_INT 6
23901: PUSH
23902: LD_INT 7
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: LIST
23909: PUSH
23910: LD_OWVAR 67
23914: ARRAY
23915: PPUSH
23916: LD_EXP 25
23920: PPUSH
23921: LD_EXP 26
23925: PPUSH
23926: CALL_OW 12
23930: PPUSH
23931: LD_INT 3
23933: PPUSH
23934: LD_INT 1
23936: PPUSH
23937: LD_INT 3
23939: PPUSH
23940: LD_INT 44
23942: PUSH
23943: LD_INT 46
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PPUSH
23950: EMPTY
23951: PPUSH
23952: EMPTY
23953: PPUSH
23954: LD_INT 1
23956: PPUSH
23957: CALL 14816 0 11
23961: END
// every 1 1$00 trigger secondAttack = 1 do
23962: LD_EXP 34
23966: PUSH
23967: LD_INT 1
23969: EQUAL
23970: IFFALSE 24052
23972: GO 23974
23974: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23975: LD_INT 6
23977: PPUSH
23978: LD_INT 3
23980: PPUSH
23981: LD_INT 3
23983: PUSH
23984: LD_INT 4
23986: PUSH
23987: LD_INT 5
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: LIST
23994: PUSH
23995: LD_OWVAR 67
23999: ARRAY
24000: PPUSH
24001: LD_INT 0
24003: PPUSH
24004: LD_INT 0
24006: PPUSH
24007: LD_INT 0
24009: PPUSH
24010: LD_INT 0
24012: PPUSH
24013: LD_EXP 25
24017: PPUSH
24018: LD_EXP 26
24022: PPUSH
24023: CALL_OW 12
24027: PPUSH
24028: LD_INT 16
24030: PPUSH
24031: LD_INT 7
24033: PPUSH
24034: LD_INT 1
24036: PPUSH
24037: LD_INT 1
24039: PPUSH
24040: LD_INT 3
24042: PPUSH
24043: CALL_OW 12
24047: PPUSH
24048: CALL 12523 0 12
24052: END
// every 1 1$00 trigger secondAttack = 1 do
24053: LD_EXP 34
24057: PUSH
24058: LD_INT 1
24060: EQUAL
24061: IFFALSE 24165
24063: GO 24065
24065: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
24066: LD_INT 16
24068: PPUSH
24069: LD_INT 6
24071: PPUSH
24072: LD_INT 5
24074: PPUSH
24075: LD_INT 6
24077: PPUSH
24078: CALL_OW 12
24082: PUSH
24083: LD_INT 6
24085: PPUSH
24086: LD_INT 9
24088: PPUSH
24089: CALL_OW 12
24093: PUSH
24094: LD_INT 7
24096: PPUSH
24097: LD_INT 9
24099: PPUSH
24100: CALL_OW 12
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: LIST
24109: PUSH
24110: LD_OWVAR 67
24114: ARRAY
24115: PPUSH
24116: LD_EXP 25
24120: PPUSH
24121: LD_EXP 26
24125: PPUSH
24126: CALL_OW 12
24130: PPUSH
24131: LD_INT 3
24133: PPUSH
24134: LD_INT 1
24136: PPUSH
24137: LD_INT 3
24139: PPUSH
24140: LD_INT 43
24142: PUSH
24143: LD_INT 44
24145: PUSH
24146: LD_INT 46
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: LIST
24153: PPUSH
24154: EMPTY
24155: PPUSH
24156: EMPTY
24157: PPUSH
24158: LD_INT 1
24160: PPUSH
24161: CALL 14816 0 11
24165: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24166: LD_EXP 18
24170: PUSH
24171: LD_INT 0
24173: EQUAL
24174: IFFALSE 24256
24176: GO 24178
24178: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24179: LD_INT 6
24181: PPUSH
24182: LD_INT 3
24184: PPUSH
24185: LD_INT 3
24187: PUSH
24188: LD_INT 4
24190: PUSH
24191: LD_INT 5
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: LIST
24198: PUSH
24199: LD_OWVAR 67
24203: ARRAY
24204: PPUSH
24205: LD_INT 0
24207: PPUSH
24208: LD_INT 0
24210: PPUSH
24211: LD_INT 0
24213: PPUSH
24214: LD_INT 0
24216: PPUSH
24217: LD_EXP 25
24221: PPUSH
24222: LD_EXP 26
24226: PPUSH
24227: CALL_OW 12
24231: PPUSH
24232: LD_INT 16
24234: PPUSH
24235: LD_INT 7
24237: PPUSH
24238: LD_INT 1
24240: PPUSH
24241: LD_INT 1
24243: PPUSH
24244: LD_INT 3
24246: PPUSH
24247: CALL_OW 12
24251: PPUSH
24252: CALL 12523 0 12
24256: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24257: LD_EXP 18
24261: PUSH
24262: LD_INT 0
24264: EQUAL
24265: IFFALSE 24365
24267: GO 24269
24269: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24270: LD_INT 16
24272: PPUSH
24273: LD_INT 6
24275: PPUSH
24276: LD_INT 5
24278: PPUSH
24279: LD_INT 6
24281: PPUSH
24282: CALL_OW 12
24286: PUSH
24287: LD_INT 6
24289: PPUSH
24290: LD_INT 9
24292: PPUSH
24293: CALL_OW 12
24297: PUSH
24298: LD_INT 7
24300: PPUSH
24301: LD_INT 9
24303: PPUSH
24304: CALL_OW 12
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: LIST
24313: PUSH
24314: LD_OWVAR 67
24318: ARRAY
24319: PPUSH
24320: LD_EXP 25
24324: PPUSH
24325: LD_EXP 26
24329: PPUSH
24330: CALL_OW 12
24334: PPUSH
24335: LD_INT 3
24337: PPUSH
24338: LD_INT 1
24340: PPUSH
24341: LD_INT 3
24343: PPUSH
24344: LD_INT 44
24346: PUSH
24347: LD_INT 46
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PPUSH
24354: EMPTY
24355: PPUSH
24356: EMPTY
24357: PPUSH
24358: LD_INT 1
24360: PPUSH
24361: CALL 14816 0 11
24365: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24366: LD_EXP 18
24370: PUSH
24371: LD_INT 0
24373: EQUAL
24374: IFFALSE 24456
24376: GO 24378
24378: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24379: LD_INT 6
24381: PPUSH
24382: LD_INT 3
24384: PPUSH
24385: LD_INT 3
24387: PUSH
24388: LD_INT 4
24390: PUSH
24391: LD_INT 5
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: LIST
24398: PUSH
24399: LD_OWVAR 67
24403: ARRAY
24404: PPUSH
24405: LD_INT 0
24407: PPUSH
24408: LD_INT 0
24410: PPUSH
24411: LD_INT 0
24413: PPUSH
24414: LD_INT 0
24416: PPUSH
24417: LD_EXP 25
24421: PPUSH
24422: LD_EXP 26
24426: PPUSH
24427: CALL_OW 12
24431: PPUSH
24432: LD_INT 16
24434: PPUSH
24435: LD_INT 7
24437: PPUSH
24438: LD_INT 1
24440: PPUSH
24441: LD_INT 1
24443: PPUSH
24444: LD_INT 3
24446: PPUSH
24447: CALL_OW 12
24451: PPUSH
24452: CALL 12523 0 12
24456: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24457: LD_EXP 18
24461: PUSH
24462: LD_INT 0
24464: EQUAL
24465: IFFALSE 24565
24467: GO 24469
24469: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24470: LD_INT 16
24472: PPUSH
24473: LD_INT 6
24475: PPUSH
24476: LD_INT 5
24478: PPUSH
24479: LD_INT 6
24481: PPUSH
24482: CALL_OW 12
24486: PUSH
24487: LD_INT 6
24489: PPUSH
24490: LD_INT 9
24492: PPUSH
24493: CALL_OW 12
24497: PUSH
24498: LD_INT 7
24500: PPUSH
24501: LD_INT 9
24503: PPUSH
24504: CALL_OW 12
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: LIST
24513: PUSH
24514: LD_OWVAR 67
24518: ARRAY
24519: PPUSH
24520: LD_EXP 25
24524: PPUSH
24525: LD_EXP 26
24529: PPUSH
24530: CALL_OW 12
24534: PPUSH
24535: LD_INT 3
24537: PPUSH
24538: LD_INT 1
24540: PPUSH
24541: LD_INT 3
24543: PPUSH
24544: LD_INT 44
24546: PUSH
24547: LD_INT 46
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PPUSH
24554: EMPTY
24555: PPUSH
24556: EMPTY
24557: PPUSH
24558: LD_INT 1
24560: PPUSH
24561: CALL 14816 0 11
24565: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24566: LD_EXP 18
24570: PUSH
24571: LD_INT 0
24573: EQUAL
24574: IFFALSE 24656
24576: GO 24578
24578: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24579: LD_INT 6
24581: PPUSH
24582: LD_INT 3
24584: PPUSH
24585: LD_INT 3
24587: PUSH
24588: LD_INT 4
24590: PUSH
24591: LD_INT 5
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: LIST
24598: PUSH
24599: LD_OWVAR 67
24603: ARRAY
24604: PPUSH
24605: LD_INT 0
24607: PPUSH
24608: LD_INT 0
24610: PPUSH
24611: LD_INT 0
24613: PPUSH
24614: LD_INT 0
24616: PPUSH
24617: LD_EXP 25
24621: PPUSH
24622: LD_EXP 26
24626: PPUSH
24627: CALL_OW 12
24631: PPUSH
24632: LD_INT 16
24634: PPUSH
24635: LD_INT 7
24637: PPUSH
24638: LD_INT 1
24640: PPUSH
24641: LD_INT 1
24643: PPUSH
24644: LD_INT 3
24646: PPUSH
24647: CALL_OW 12
24651: PPUSH
24652: CALL 12523 0 12
24656: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24657: LD_EXP 18
24661: PUSH
24662: LD_INT 0
24664: EQUAL
24665: IFFALSE 24741
24667: GO 24669
24669: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 7 , 8 , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
24670: LD_INT 16
24672: PPUSH
24673: LD_INT 6
24675: PPUSH
24676: LD_INT 7
24678: PUSH
24679: LD_INT 8
24681: PUSH
24682: LD_INT 9
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: LIST
24689: PUSH
24690: LD_OWVAR 67
24694: ARRAY
24695: PPUSH
24696: LD_EXP 25
24700: PPUSH
24701: LD_EXP 26
24705: PPUSH
24706: CALL_OW 12
24710: PPUSH
24711: LD_INT 3
24713: PPUSH
24714: LD_INT 1
24716: PPUSH
24717: LD_INT 3
24719: PPUSH
24720: LD_INT 44
24722: PUSH
24723: LD_INT 46
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PPUSH
24730: EMPTY
24731: PPUSH
24732: EMPTY
24733: PPUSH
24734: LD_INT 1
24736: PPUSH
24737: CALL 14816 0 11
24741: END
// every 0 0$1 trigger timerStatus = 1 do
24742: LD_EXP 35
24746: PUSH
24747: LD_INT 1
24749: EQUAL
24750: IFFALSE 24810
24752: GO 24754
24754: DISABLE
// begin repeat wait ( 0 0$1 ) ;
24755: LD_INT 35
24757: PPUSH
24758: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
24762: LD_ADDR_OWVAR 47
24766: PUSH
24767: LD_STRING #Am08-1
24769: PUSH
24770: LD_EXP 19
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
24779: LD_ADDR_EXP 19
24783: PUSH
24784: LD_EXP 19
24788: PUSH
24789: LD_INT 35
24791: MINUS
24792: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
24793: LD_EXP 19
24797: PUSH
24798: LD_INT 0
24800: EQUAL
24801: IFFALSE 24755
// display_strings := [ ] ;
24803: LD_ADDR_OWVAR 47
24807: PUSH
24808: EMPTY
24809: ST_TO_ADDR
// end ; end_of_file
24810: END
// every 1 1$0 do
24811: GO 24813
24813: DISABLE
// begin if supply <= 13 and supply > 7 then
24814: LD_EXP 40
24818: PUSH
24819: LD_INT 13
24821: LESSEQUAL
24822: PUSH
24823: LD_EXP 40
24827: PUSH
24828: LD_INT 7
24830: GREATER
24831: AND
24832: IFFALSE 24855
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
24834: LD_INT 3
24836: PPUSH
24837: LD_INT 5
24839: PPUSH
24840: CALL_OW 12
24844: PPUSH
24845: LD_INT 5
24847: PPUSH
24848: LD_INT 1
24850: PPUSH
24851: CALL_OW 55
// if supply <= 7 and supply > 4 then
24855: LD_EXP 40
24859: PUSH
24860: LD_INT 7
24862: LESSEQUAL
24863: PUSH
24864: LD_EXP 40
24868: PUSH
24869: LD_INT 4
24871: GREATER
24872: AND
24873: IFFALSE 24896
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
24875: LD_INT 3
24877: PPUSH
24878: LD_INT 5
24880: PPUSH
24881: CALL_OW 12
24885: PPUSH
24886: LD_INT 20
24888: PPUSH
24889: LD_INT 1
24891: PPUSH
24892: CALL_OW 55
// if supply <= 4 and supply > 0 then
24896: LD_EXP 40
24900: PUSH
24901: LD_INT 4
24903: LESSEQUAL
24904: PUSH
24905: LD_EXP 40
24909: PUSH
24910: LD_INT 0
24912: GREATER
24913: AND
24914: IFFALSE 24937
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
24916: LD_INT 3
24918: PPUSH
24919: LD_INT 5
24921: PPUSH
24922: CALL_OW 12
24926: PPUSH
24927: LD_INT 21
24929: PPUSH
24930: LD_INT 1
24932: PPUSH
24933: CALL_OW 55
// if supply > 0 then
24937: LD_EXP 40
24941: PUSH
24942: LD_INT 0
24944: GREATER
24945: IFFALSE 24962
// begin supply = supply - 1 ;
24947: LD_ADDR_EXP 40
24951: PUSH
24952: LD_EXP 40
24956: PUSH
24957: LD_INT 1
24959: MINUS
24960: ST_TO_ADDR
// enable ;
24961: ENABLE
// end ; end ; end_of_file
24962: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
24963: LD_EXP 39
24967: PUSH
24968: LD_INT 1
24970: EQUAL
24971: PUSH
24972: LD_EXP 1
24976: PPUSH
24977: CALL_OW 301
24981: AND
24982: IFFALSE 24994
24984: GO 24986
24986: DISABLE
// YouLost ( JMM ) ;
24987: LD_STRING JMM
24989: PPUSH
24990: CALL_OW 104
24994: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
24995: LD_EXP 18
24999: PUSH
25000: LD_INT 1
25002: EQUAL
25003: PUSH
25004: LD_EXP 16
25008: PPUSH
25009: CALL_OW 301
25013: AND
25014: IFFALSE 25046
25016: GO 25018
25018: DISABLE
// begin DialogueOn ;
25019: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
25023: LD_EXP 23
25027: PPUSH
25028: LD_STRING D8a-Pow-1
25030: PPUSH
25031: CALL_OW 94
// DialogueOff ;
25035: CALL_OW 7
// YouLost ( Dismissed ) ;
25039: LD_STRING Dismissed
25041: PPUSH
25042: CALL_OW 104
// end ;
25046: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
25047: LD_INT 22
25049: PUSH
25050: LD_INT 1
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 2
25059: PUSH
25060: LD_INT 30
25062: PUSH
25063: LD_INT 0
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 30
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: LIST
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PPUSH
25089: CALL_OW 69
25093: PUSH
25094: LD_INT 0
25096: EQUAL
25097: IFFALSE 25109
25099: GO 25101
25101: DISABLE
// YouLost ( Destroyed ) ; end_of_file
25102: LD_STRING Destroyed
25104: PPUSH
25105: CALL_OW 104
25109: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , tmp , p ;
25110: LD_EXP 24
25114: PPUSH
25115: CALL_OW 301
25119: PUSH
25120: LD_INT 22
25122: PUSH
25123: LD_INT 3
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 21
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PPUSH
25144: CALL_OW 69
25148: PUSH
25149: LD_INT 7
25151: PUSH
25152: LD_INT 6
25154: PUSH
25155: LD_INT 5
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: LIST
25162: PUSH
25163: LD_OWVAR 67
25167: ARRAY
25168: LESS
25169: AND
25170: PUSH
25171: LD_EXP 1
25175: PPUSH
25176: CALL_OW 305
25180: AND
25181: IFFALSE 25737
25183: GO 25185
25185: DISABLE
25186: LD_INT 0
25188: PPUSH
25189: PPUSH
25190: PPUSH
// begin russianAI = 0 ;
25191: LD_ADDR_EXP 27
25195: PUSH
25196: LD_INT 0
25198: ST_TO_ADDR
// escapeAvalaible = 1 ;
25199: LD_ADDR_EXP 36
25203: PUSH
25204: LD_INT 1
25206: ST_TO_ADDR
// Video ( true ) ;
25207: LD_INT 1
25209: PPUSH
25210: CALL 80159 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
25214: LD_INT 3
25216: PPUSH
25217: LD_INT 1
25219: PPUSH
25220: LD_INT 1
25222: PPUSH
25223: LD_INT 0
25225: PPUSH
25226: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
25230: LD_INT 6
25232: PPUSH
25233: LD_INT 1
25235: PPUSH
25236: LD_INT 1
25238: PPUSH
25239: LD_INT 0
25241: PPUSH
25242: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
25246: LD_INT 3
25248: PPUSH
25249: LD_INT 1
25251: PPUSH
25252: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
25256: LD_INT 97
25258: PPUSH
25259: LD_INT 91
25261: PPUSH
25262: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
25266: LD_INT 22
25268: PUSH
25269: LD_INT 3
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 21
25278: PUSH
25279: LD_INT 1
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PPUSH
25290: CALL_OW 69
25294: PPUSH
25295: CALL_OW 121
// wait ( 0 0$01 ) ;
25299: LD_INT 35
25301: PPUSH
25302: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25306: LD_INT 22
25308: PUSH
25309: LD_INT 3
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: LD_INT 21
25318: PUSH
25319: LD_INT 1
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PPUSH
25330: CALL_OW 69
25334: PPUSH
25335: LD_INT 124
25337: PPUSH
25338: LD_INT 98
25340: PPUSH
25341: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
25345: LD_INT 22
25347: PUSH
25348: LD_INT 6
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 21
25357: PUSH
25358: LD_INT 1
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PPUSH
25369: CALL_OW 69
25373: PPUSH
25374: CALL_OW 121
// wait ( 0 0$01 ) ;
25378: LD_INT 35
25380: PPUSH
25381: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25385: LD_INT 22
25387: PUSH
25388: LD_INT 6
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 21
25397: PUSH
25398: LD_INT 1
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PPUSH
25409: CALL_OW 69
25413: PPUSH
25414: LD_INT 124
25416: PPUSH
25417: LD_INT 98
25419: PPUSH
25420: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
25424: LD_INT 22
25426: PUSH
25427: LD_INT 1
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 21
25436: PUSH
25437: LD_INT 1
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 3
25446: PUSH
25447: LD_INT 54
25449: PUSH
25450: EMPTY
25451: LIST
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: LIST
25461: PPUSH
25462: CALL_OW 69
25466: PPUSH
25467: LD_INT 124
25469: PPUSH
25470: LD_INT 98
25472: PPUSH
25473: CALL_OW 114
// wait ( 0 0$4 ) ;
25477: LD_INT 140
25479: PPUSH
25480: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
25484: LD_INT 124
25486: PPUSH
25487: LD_INT 98
25489: PPUSH
25490: CALL_OW 84
// if SikorskyStatus = 1 then
25494: LD_EXP 21
25498: PUSH
25499: LD_INT 1
25501: EQUAL
25502: IFFALSE 25516
// Say ( Sikorski , D9-Sik-1 ) ;
25504: LD_EXP 16
25508: PPUSH
25509: LD_STRING D9-Sik-1
25511: PPUSH
25512: CALL_OW 88
// if SikorskyStatus = 2 then
25516: LD_EXP 21
25520: PUSH
25521: LD_INT 2
25523: EQUAL
25524: IFFALSE 25545
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
25526: LD_EXP 23
25530: PPUSH
25531: LD_STRING D8b-Pow-1
25533: PPUSH
25534: CALL_OW 94
// YouLost ( Dismissed ) ;
25538: LD_STRING Dismissed
25540: PPUSH
25541: CALL_OW 104
// end ; p := 0 0$0 ;
25545: LD_ADDR_VAR 0 3
25549: PUSH
25550: LD_INT 0
25552: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
25553: LD_ADDR_VAR 0 2
25557: PUSH
25558: LD_INT 2
25560: PUSH
25561: LD_INT 22
25563: PUSH
25564: LD_INT 3
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 22
25573: PUSH
25574: LD_INT 6
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 21
25588: PUSH
25589: LD_INT 1
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PPUSH
25600: CALL_OW 69
25604: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25605: LD_INT 35
25607: PPUSH
25608: CALL_OW 67
// p := p + 0 0$1 ;
25612: LD_ADDR_VAR 0 3
25616: PUSH
25617: LD_VAR 0 3
25621: PUSH
25622: LD_INT 35
25624: PLUS
25625: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
25626: LD_VAR 0 2
25630: PPUSH
25631: LD_INT 22
25633: PPUSH
25634: CALL_OW 113
// for i in tmp do
25638: LD_ADDR_VAR 0 1
25642: PUSH
25643: LD_VAR 0 2
25647: PUSH
25648: FOR_IN
25649: IFFALSE 25676
// if IsInArea ( i , RussianEscape ) then
25651: LD_VAR 0 1
25655: PPUSH
25656: LD_INT 22
25658: PPUSH
25659: CALL_OW 308
25663: IFFALSE 25674
// RemoveUnit ( i ) ;
25665: LD_VAR 0 1
25669: PPUSH
25670: CALL_OW 64
25674: GO 25648
25676: POP
25677: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
25678: LD_INT 23
25680: PUSH
25681: LD_INT 3
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 21
25690: PUSH
25691: LD_INT 1
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 24
25700: PUSH
25701: LD_INT 250
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: LIST
25712: PPUSH
25713: CALL_OW 69
25717: PUSH
25718: LD_INT 0
25720: EQUAL
25721: PUSH
25722: LD_VAR 0 3
25726: PUSH
25727: LD_INT 245
25729: GREATEREQUAL
25730: OR
25731: IFFALSE 25605
// FinishMission ;
25733: CALL 25740 0 0
// end ;
25737: PPOPN 3
25739: END
// export function FinishMission ; var tmp ; begin
25740: LD_INT 0
25742: PPUSH
25743: PPUSH
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 then
25744: LD_INT 22
25746: PUSH
25747: LD_INT 4
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PPUSH
25754: CALL_OW 69
25758: PUSH
25759: LD_INT 0
25761: EQUAL
25762: IFFALSE 25771
// SetAchievement ( ACH_BLITZKRIEG ) ;
25764: LD_STRING ACH_BLITZKRIEG
25766: PPUSH
25767: CALL_OW 543
// if tick <= 25 25$00 then
25771: LD_OWVAR 1
25775: PUSH
25776: LD_INT 52500
25778: LESSEQUAL
25779: IFFALSE 25795
// begin wait ( 3 ) ;
25781: LD_INT 3
25783: PPUSH
25784: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
25788: LD_STRING ACH_ASPEED_8
25790: PPUSH
25791: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
25795: LD_STRING med1
25797: PPUSH
25798: LD_INT 1
25800: PPUSH
25801: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
25805: LD_STRING med2
25807: PPUSH
25808: LD_INT 1
25810: PPUSH
25811: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
25815: LD_STRING perfect
25817: PPUSH
25818: LD_INT 1
25820: PPUSH
25821: CALL_OW 101
// if Difficulty = 3 then
25825: LD_OWVAR 67
25829: PUSH
25830: LD_INT 3
25832: EQUAL
25833: IFFALSE 25845
// SetAchievementEX ( ACH_AMER , 8 ) ;
25835: LD_STRING ACH_AMER
25837: PPUSH
25838: LD_INT 8
25840: PPUSH
25841: CALL_OW 564
// GiveMedals ( Main ) ;
25845: LD_STRING Main
25847: PPUSH
25848: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
25852: LD_INT 22
25854: PUSH
25855: LD_INT 1
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 23
25864: PUSH
25865: LD_INT 1
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 21
25874: PUSH
25875: LD_INT 1
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 2
25884: PUSH
25885: LD_INT 25
25887: PUSH
25888: LD_INT 1
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 25
25897: PUSH
25898: LD_INT 2
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 25
25907: PUSH
25908: LD_INT 3
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 25
25917: PUSH
25918: LD_INT 4
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: PPUSH
25938: CALL_OW 69
25942: PPUSH
25943: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
25947: LD_EXP 1
25951: PPUSH
25952: LD_EXP 43
25956: PUSH
25957: LD_STRING JMM
25959: STR
25960: PPUSH
25961: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
25965: LD_EXP 2
25969: PPUSH
25970: LD_EXP 43
25974: PUSH
25975: LD_STRING Brown
25977: STR
25978: PPUSH
25979: CALL 8370 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
25983: LD_EXP 3
25987: PPUSH
25988: LD_EXP 43
25992: PUSH
25993: LD_STRING Donaldson
25995: STR
25996: PPUSH
25997: CALL 8370 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26001: LD_EXP 4
26005: PPUSH
26006: LD_EXP 43
26010: PUSH
26011: LD_STRING Bobby
26013: STR
26014: PPUSH
26015: CALL 8370 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26019: LD_EXP 5
26023: PPUSH
26024: LD_EXP 43
26028: PUSH
26029: LD_STRING Cyrus
26031: STR
26032: PPUSH
26033: CALL 8370 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26037: LD_EXP 6
26041: PPUSH
26042: LD_EXP 43
26046: PUSH
26047: LD_STRING Lisa
26049: STR
26050: PPUSH
26051: CALL 8370 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26055: LD_EXP 7
26059: PPUSH
26060: LD_EXP 43
26064: PUSH
26065: LD_STRING Frank
26067: STR
26068: PPUSH
26069: CALL 8370 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26073: LD_EXP 8
26077: PPUSH
26078: LD_EXP 43
26082: PUSH
26083: LD_STRING Gladstone
26085: STR
26086: PPUSH
26087: CALL 8370 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26091: LD_EXP 9
26095: PPUSH
26096: LD_EXP 43
26100: PUSH
26101: LD_STRING Kikuchi
26103: STR
26104: PPUSH
26105: CALL 8370 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26109: LD_EXP 14
26113: PPUSH
26114: LD_EXP 43
26118: PUSH
26119: LD_STRING Denis
26121: STR
26122: PPUSH
26123: CALL 8370 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26127: LD_EXP 15
26131: PPUSH
26132: LD_EXP 43
26136: PUSH
26137: LD_STRING Joan
26139: STR
26140: PPUSH
26141: CALL 8370 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
26145: LD_EXP 10
26149: PPUSH
26150: LD_EXP 43
26154: PUSH
26155: LD_STRING Khatam
26157: STR
26158: PPUSH
26159: CALL 8370 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26163: LD_EXP 13
26167: PPUSH
26168: LD_EXP 43
26172: PUSH
26173: LD_STRING Houten
26175: STR
26176: PPUSH
26177: CALL 8370 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
26181: LD_INT 50
26183: PUSH
26184: EMPTY
26185: LIST
26186: PUSH
26187: LD_INT 22
26189: PUSH
26190: LD_INT 1
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 21
26199: PUSH
26200: LD_INT 1
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 2
26209: PUSH
26210: LD_INT 25
26212: PUSH
26213: LD_INT 1
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 25
26222: PUSH
26223: LD_INT 2
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 25
26232: PUSH
26233: LD_INT 3
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 25
26242: PUSH
26243: LD_INT 4
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: PPUSH
26263: CALL_OW 69
26267: PUSH
26268: LD_EXP 1
26272: PUSH
26273: LD_EXP 2
26277: PUSH
26278: LD_EXP 3
26282: PUSH
26283: LD_EXP 4
26287: PUSH
26288: LD_EXP 5
26292: PUSH
26293: LD_EXP 6
26297: PUSH
26298: LD_EXP 7
26302: PUSH
26303: LD_EXP 8
26307: PUSH
26308: LD_EXP 9
26312: PUSH
26313: LD_EXP 14
26317: PUSH
26318: LD_EXP 15
26322: PUSH
26323: LD_EXP 13
26327: PUSH
26328: LD_EXP 10
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: DIFF
26348: PPUSH
26349: LD_STRING 08_other_survivors
26351: PPUSH
26352: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
26356: LD_INT 23
26358: PPUSH
26359: CALL 26372 0 1
// YouWin ;
26363: CALL_OW 103
// end ;
26367: LD_VAR 0 1
26371: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
26372: LD_INT 0
26374: PPUSH
26375: PPUSH
26376: PPUSH
26377: PPUSH
// gammaBase = [ ] ;
26378: LD_ADDR_VAR 0 4
26382: PUSH
26383: EMPTY
26384: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26385: LD_ADDR_VAR 0 5
26389: PUSH
26390: LD_VAR 0 1
26394: PPUSH
26395: LD_INT 22
26397: PUSH
26398: LD_INT 1
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 21
26407: PUSH
26408: LD_INT 3
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 50
26417: PUSH
26418: EMPTY
26419: LIST
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: LIST
26425: PPUSH
26426: CALL_OW 70
26430: ST_TO_ADDR
// for i in buildings do
26431: LD_ADDR_VAR 0 3
26435: PUSH
26436: LD_VAR 0 5
26440: PUSH
26441: FOR_IN
26442: IFFALSE 26879
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26444: LD_VAR 0 3
26448: PPUSH
26449: CALL_OW 266
26453: PUSH
26454: LD_INT 6
26456: PUSH
26457: LD_INT 7
26459: PUSH
26460: LD_INT 8
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: LIST
26467: IN
26468: IFFALSE 26582
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26470: LD_ADDR_VAR 0 4
26474: PUSH
26475: LD_VAR 0 4
26479: PUSH
26480: LD_VAR 0 3
26484: PPUSH
26485: CALL_OW 266
26489: PUSH
26490: LD_VAR 0 3
26494: PPUSH
26495: CALL_OW 250
26499: PUSH
26500: LD_VAR 0 3
26504: PPUSH
26505: CALL_OW 251
26509: PUSH
26510: LD_VAR 0 3
26514: PPUSH
26515: CALL_OW 254
26519: PUSH
26520: LD_VAR 0 3
26524: PPUSH
26525: CALL_OW 267
26529: PUSH
26530: LD_VAR 0 3
26534: PPUSH
26535: CALL_OW 248
26539: PUSH
26540: LD_VAR 0 3
26544: PPUSH
26545: LD_INT 1
26547: PPUSH
26548: CALL_OW 268
26552: PUSH
26553: LD_VAR 0 3
26557: PPUSH
26558: LD_INT 2
26560: PPUSH
26561: CALL_OW 268
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: PUSH
26576: EMPTY
26577: LIST
26578: ADD
26579: ST_TO_ADDR
26580: GO 26877
// if GetBType ( i ) = b_bunker then
26582: LD_VAR 0 3
26586: PPUSH
26587: CALL_OW 266
26591: PUSH
26592: LD_INT 32
26594: EQUAL
26595: IFFALSE 26692
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26597: LD_ADDR_VAR 0 4
26601: PUSH
26602: LD_VAR 0 4
26606: PUSH
26607: LD_VAR 0 3
26611: PPUSH
26612: CALL_OW 266
26616: PUSH
26617: LD_VAR 0 3
26621: PPUSH
26622: CALL_OW 250
26626: PUSH
26627: LD_VAR 0 3
26631: PPUSH
26632: CALL_OW 251
26636: PUSH
26637: LD_VAR 0 3
26641: PPUSH
26642: CALL_OW 254
26646: PUSH
26647: LD_VAR 0 3
26651: PPUSH
26652: CALL_OW 267
26656: PUSH
26657: LD_VAR 0 3
26661: PPUSH
26662: CALL_OW 248
26666: PUSH
26667: LD_VAR 0 3
26671: PPUSH
26672: CALL_OW 269
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: PUSH
26686: EMPTY
26687: LIST
26688: ADD
26689: ST_TO_ADDR
26690: GO 26877
// if GetBType ( i ) = b_factory then
26692: LD_VAR 0 3
26696: PPUSH
26697: CALL_OW 266
26701: PUSH
26702: LD_INT 3
26704: EQUAL
26705: IFFALSE 26795
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
26707: LD_ADDR_VAR 0 4
26711: PUSH
26712: LD_VAR 0 4
26716: PPUSH
26717: LD_INT 1
26719: PPUSH
26720: LD_VAR 0 3
26724: PPUSH
26725: CALL_OW 266
26729: PUSH
26730: LD_VAR 0 3
26734: PPUSH
26735: CALL_OW 250
26739: PUSH
26740: LD_VAR 0 3
26744: PPUSH
26745: CALL_OW 251
26749: PUSH
26750: LD_VAR 0 3
26754: PPUSH
26755: CALL_OW 254
26759: PUSH
26760: LD_VAR 0 3
26764: PPUSH
26765: CALL_OW 267
26769: PUSH
26770: LD_VAR 0 3
26774: PPUSH
26775: CALL_OW 248
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: PPUSH
26788: CALL_OW 2
26792: ST_TO_ADDR
26793: GO 26877
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
26795: LD_ADDR_VAR 0 4
26799: PUSH
26800: LD_VAR 0 4
26804: PUSH
26805: LD_VAR 0 3
26809: PPUSH
26810: CALL_OW 266
26814: PUSH
26815: LD_VAR 0 3
26819: PPUSH
26820: CALL_OW 250
26824: PUSH
26825: LD_VAR 0 3
26829: PPUSH
26830: CALL_OW 251
26834: PUSH
26835: LD_VAR 0 3
26839: PPUSH
26840: CALL_OW 254
26844: PUSH
26845: LD_VAR 0 3
26849: PPUSH
26850: CALL_OW 267
26854: PUSH
26855: LD_VAR 0 3
26859: PPUSH
26860: CALL_OW 248
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: PUSH
26873: EMPTY
26874: LIST
26875: ADD
26876: ST_TO_ADDR
// end ;
26877: GO 26441
26879: POP
26880: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
26881: LD_VAR 0 4
26885: PPUSH
26886: LD_STRING 08_GammaBase
26888: PPUSH
26889: CALL_OW 39
// end ; end_of_file
26893: LD_VAR 0 2
26897: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
26898: LD_INT 0
26900: PPUSH
// ar_miner := 81 ;
26901: LD_ADDR_EXP 55
26905: PUSH
26906: LD_INT 81
26908: ST_TO_ADDR
// ar_crane := 88 ;
26909: LD_ADDR_EXP 54
26913: PUSH
26914: LD_INT 88
26916: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
26917: LD_ADDR_EXP 49
26921: PUSH
26922: LD_INT 89
26924: ST_TO_ADDR
// us_hack := 99 ;
26925: LD_ADDR_EXP 50
26929: PUSH
26930: LD_INT 99
26932: ST_TO_ADDR
// us_artillery := 97 ;
26933: LD_ADDR_EXP 51
26937: PUSH
26938: LD_INT 97
26940: ST_TO_ADDR
// ar_bio_bomb := 91 ;
26941: LD_ADDR_EXP 52
26945: PUSH
26946: LD_INT 91
26948: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
26949: LD_ADDR_EXP 53
26953: PUSH
26954: LD_INT 92
26956: ST_TO_ADDR
// ru_radar := 98 ;
26957: LD_ADDR_EXP 48
26961: PUSH
26962: LD_INT 98
26964: ST_TO_ADDR
// tech_Artillery := 80 ;
26965: LD_ADDR_EXP 56
26969: PUSH
26970: LD_INT 80
26972: ST_TO_ADDR
// tech_RadMat := 81 ;
26973: LD_ADDR_EXP 57
26977: PUSH
26978: LD_INT 81
26980: ST_TO_ADDR
// tech_BasicTools := 82 ;
26981: LD_ADDR_EXP 58
26985: PUSH
26986: LD_INT 82
26988: ST_TO_ADDR
// tech_Cargo := 83 ;
26989: LD_ADDR_EXP 59
26993: PUSH
26994: LD_INT 83
26996: ST_TO_ADDR
// tech_Track := 84 ;
26997: LD_ADDR_EXP 60
27001: PUSH
27002: LD_INT 84
27004: ST_TO_ADDR
// tech_Crane := 85 ;
27005: LD_ADDR_EXP 61
27009: PUSH
27010: LD_INT 85
27012: ST_TO_ADDR
// tech_Bulldozer := 86 ;
27013: LD_ADDR_EXP 62
27017: PUSH
27018: LD_INT 86
27020: ST_TO_ADDR
// tech_Hovercraft := 87 ;
27021: LD_ADDR_EXP 63
27025: PUSH
27026: LD_INT 87
27028: ST_TO_ADDR
// end ;
27029: LD_VAR 0 1
27033: RET
// every 1 do
27034: GO 27036
27036: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
27037: CALL 26898 0 0
27041: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
27042: LD_VAR 0 2
27046: PUSH
27047: LD_INT 100
27049: EQUAL
27050: IFFALSE 27999
// begin if not StreamModeActive then
27052: LD_EXP 64
27056: NOT
27057: IFFALSE 27067
// StreamModeActive := true ;
27059: LD_ADDR_EXP 64
27063: PUSH
27064: LD_INT 1
27066: ST_TO_ADDR
// if p3 = 0 then
27067: LD_VAR 0 3
27071: PUSH
27072: LD_INT 0
27074: EQUAL
27075: IFFALSE 27081
// InitStreamMode ;
27077: CALL 28157 0 0
// if p3 = 1 then
27081: LD_VAR 0 3
27085: PUSH
27086: LD_INT 1
27088: EQUAL
27089: IFFALSE 27099
// sRocket := true ;
27091: LD_ADDR_EXP 69
27095: PUSH
27096: LD_INT 1
27098: ST_TO_ADDR
// if p3 = 2 then
27099: LD_VAR 0 3
27103: PUSH
27104: LD_INT 2
27106: EQUAL
27107: IFFALSE 27117
// sSpeed := true ;
27109: LD_ADDR_EXP 68
27113: PUSH
27114: LD_INT 1
27116: ST_TO_ADDR
// if p3 = 3 then
27117: LD_VAR 0 3
27121: PUSH
27122: LD_INT 3
27124: EQUAL
27125: IFFALSE 27135
// sEngine := true ;
27127: LD_ADDR_EXP 70
27131: PUSH
27132: LD_INT 1
27134: ST_TO_ADDR
// if p3 = 4 then
27135: LD_VAR 0 3
27139: PUSH
27140: LD_INT 4
27142: EQUAL
27143: IFFALSE 27153
// sSpec := true ;
27145: LD_ADDR_EXP 67
27149: PUSH
27150: LD_INT 1
27152: ST_TO_ADDR
// if p3 = 5 then
27153: LD_VAR 0 3
27157: PUSH
27158: LD_INT 5
27160: EQUAL
27161: IFFALSE 27171
// sLevel := true ;
27163: LD_ADDR_EXP 71
27167: PUSH
27168: LD_INT 1
27170: ST_TO_ADDR
// if p3 = 6 then
27171: LD_VAR 0 3
27175: PUSH
27176: LD_INT 6
27178: EQUAL
27179: IFFALSE 27189
// sArmoury := true ;
27181: LD_ADDR_EXP 72
27185: PUSH
27186: LD_INT 1
27188: ST_TO_ADDR
// if p3 = 7 then
27189: LD_VAR 0 3
27193: PUSH
27194: LD_INT 7
27196: EQUAL
27197: IFFALSE 27207
// sRadar := true ;
27199: LD_ADDR_EXP 73
27203: PUSH
27204: LD_INT 1
27206: ST_TO_ADDR
// if p3 = 8 then
27207: LD_VAR 0 3
27211: PUSH
27212: LD_INT 8
27214: EQUAL
27215: IFFALSE 27225
// sBunker := true ;
27217: LD_ADDR_EXP 74
27221: PUSH
27222: LD_INT 1
27224: ST_TO_ADDR
// if p3 = 9 then
27225: LD_VAR 0 3
27229: PUSH
27230: LD_INT 9
27232: EQUAL
27233: IFFALSE 27243
// sHack := true ;
27235: LD_ADDR_EXP 75
27239: PUSH
27240: LD_INT 1
27242: ST_TO_ADDR
// if p3 = 10 then
27243: LD_VAR 0 3
27247: PUSH
27248: LD_INT 10
27250: EQUAL
27251: IFFALSE 27261
// sFire := true ;
27253: LD_ADDR_EXP 76
27257: PUSH
27258: LD_INT 1
27260: ST_TO_ADDR
// if p3 = 11 then
27261: LD_VAR 0 3
27265: PUSH
27266: LD_INT 11
27268: EQUAL
27269: IFFALSE 27279
// sRefresh := true ;
27271: LD_ADDR_EXP 77
27275: PUSH
27276: LD_INT 1
27278: ST_TO_ADDR
// if p3 = 12 then
27279: LD_VAR 0 3
27283: PUSH
27284: LD_INT 12
27286: EQUAL
27287: IFFALSE 27297
// sExp := true ;
27289: LD_ADDR_EXP 78
27293: PUSH
27294: LD_INT 1
27296: ST_TO_ADDR
// if p3 = 13 then
27297: LD_VAR 0 3
27301: PUSH
27302: LD_INT 13
27304: EQUAL
27305: IFFALSE 27315
// sDepot := true ;
27307: LD_ADDR_EXP 79
27311: PUSH
27312: LD_INT 1
27314: ST_TO_ADDR
// if p3 = 14 then
27315: LD_VAR 0 3
27319: PUSH
27320: LD_INT 14
27322: EQUAL
27323: IFFALSE 27333
// sFlag := true ;
27325: LD_ADDR_EXP 80
27329: PUSH
27330: LD_INT 1
27332: ST_TO_ADDR
// if p3 = 15 then
27333: LD_VAR 0 3
27337: PUSH
27338: LD_INT 15
27340: EQUAL
27341: IFFALSE 27351
// sKamikadze := true ;
27343: LD_ADDR_EXP 88
27347: PUSH
27348: LD_INT 1
27350: ST_TO_ADDR
// if p3 = 16 then
27351: LD_VAR 0 3
27355: PUSH
27356: LD_INT 16
27358: EQUAL
27359: IFFALSE 27369
// sTroll := true ;
27361: LD_ADDR_EXP 89
27365: PUSH
27366: LD_INT 1
27368: ST_TO_ADDR
// if p3 = 17 then
27369: LD_VAR 0 3
27373: PUSH
27374: LD_INT 17
27376: EQUAL
27377: IFFALSE 27387
// sSlow := true ;
27379: LD_ADDR_EXP 90
27383: PUSH
27384: LD_INT 1
27386: ST_TO_ADDR
// if p3 = 18 then
27387: LD_VAR 0 3
27391: PUSH
27392: LD_INT 18
27394: EQUAL
27395: IFFALSE 27405
// sLack := true ;
27397: LD_ADDR_EXP 91
27401: PUSH
27402: LD_INT 1
27404: ST_TO_ADDR
// if p3 = 19 then
27405: LD_VAR 0 3
27409: PUSH
27410: LD_INT 19
27412: EQUAL
27413: IFFALSE 27423
// sTank := true ;
27415: LD_ADDR_EXP 93
27419: PUSH
27420: LD_INT 1
27422: ST_TO_ADDR
// if p3 = 20 then
27423: LD_VAR 0 3
27427: PUSH
27428: LD_INT 20
27430: EQUAL
27431: IFFALSE 27441
// sRemote := true ;
27433: LD_ADDR_EXP 94
27437: PUSH
27438: LD_INT 1
27440: ST_TO_ADDR
// if p3 = 21 then
27441: LD_VAR 0 3
27445: PUSH
27446: LD_INT 21
27448: EQUAL
27449: IFFALSE 27459
// sPowell := true ;
27451: LD_ADDR_EXP 95
27455: PUSH
27456: LD_INT 1
27458: ST_TO_ADDR
// if p3 = 22 then
27459: LD_VAR 0 3
27463: PUSH
27464: LD_INT 22
27466: EQUAL
27467: IFFALSE 27477
// sTeleport := true ;
27469: LD_ADDR_EXP 98
27473: PUSH
27474: LD_INT 1
27476: ST_TO_ADDR
// if p3 = 23 then
27477: LD_VAR 0 3
27481: PUSH
27482: LD_INT 23
27484: EQUAL
27485: IFFALSE 27495
// sOilTower := true ;
27487: LD_ADDR_EXP 100
27491: PUSH
27492: LD_INT 1
27494: ST_TO_ADDR
// if p3 = 24 then
27495: LD_VAR 0 3
27499: PUSH
27500: LD_INT 24
27502: EQUAL
27503: IFFALSE 27513
// sShovel := true ;
27505: LD_ADDR_EXP 101
27509: PUSH
27510: LD_INT 1
27512: ST_TO_ADDR
// if p3 = 25 then
27513: LD_VAR 0 3
27517: PUSH
27518: LD_INT 25
27520: EQUAL
27521: IFFALSE 27531
// sSheik := true ;
27523: LD_ADDR_EXP 102
27527: PUSH
27528: LD_INT 1
27530: ST_TO_ADDR
// if p3 = 26 then
27531: LD_VAR 0 3
27535: PUSH
27536: LD_INT 26
27538: EQUAL
27539: IFFALSE 27549
// sEarthquake := true ;
27541: LD_ADDR_EXP 104
27545: PUSH
27546: LD_INT 1
27548: ST_TO_ADDR
// if p3 = 27 then
27549: LD_VAR 0 3
27553: PUSH
27554: LD_INT 27
27556: EQUAL
27557: IFFALSE 27567
// sAI := true ;
27559: LD_ADDR_EXP 105
27563: PUSH
27564: LD_INT 1
27566: ST_TO_ADDR
// if p3 = 28 then
27567: LD_VAR 0 3
27571: PUSH
27572: LD_INT 28
27574: EQUAL
27575: IFFALSE 27585
// sCargo := true ;
27577: LD_ADDR_EXP 108
27581: PUSH
27582: LD_INT 1
27584: ST_TO_ADDR
// if p3 = 29 then
27585: LD_VAR 0 3
27589: PUSH
27590: LD_INT 29
27592: EQUAL
27593: IFFALSE 27603
// sDLaser := true ;
27595: LD_ADDR_EXP 109
27599: PUSH
27600: LD_INT 1
27602: ST_TO_ADDR
// if p3 = 30 then
27603: LD_VAR 0 3
27607: PUSH
27608: LD_INT 30
27610: EQUAL
27611: IFFALSE 27621
// sExchange := true ;
27613: LD_ADDR_EXP 110
27617: PUSH
27618: LD_INT 1
27620: ST_TO_ADDR
// if p3 = 31 then
27621: LD_VAR 0 3
27625: PUSH
27626: LD_INT 31
27628: EQUAL
27629: IFFALSE 27639
// sFac := true ;
27631: LD_ADDR_EXP 111
27635: PUSH
27636: LD_INT 1
27638: ST_TO_ADDR
// if p3 = 32 then
27639: LD_VAR 0 3
27643: PUSH
27644: LD_INT 32
27646: EQUAL
27647: IFFALSE 27657
// sPower := true ;
27649: LD_ADDR_EXP 112
27653: PUSH
27654: LD_INT 1
27656: ST_TO_ADDR
// if p3 = 33 then
27657: LD_VAR 0 3
27661: PUSH
27662: LD_INT 33
27664: EQUAL
27665: IFFALSE 27675
// sRandom := true ;
27667: LD_ADDR_EXP 113
27671: PUSH
27672: LD_INT 1
27674: ST_TO_ADDR
// if p3 = 34 then
27675: LD_VAR 0 3
27679: PUSH
27680: LD_INT 34
27682: EQUAL
27683: IFFALSE 27693
// sShield := true ;
27685: LD_ADDR_EXP 114
27689: PUSH
27690: LD_INT 1
27692: ST_TO_ADDR
// if p3 = 35 then
27693: LD_VAR 0 3
27697: PUSH
27698: LD_INT 35
27700: EQUAL
27701: IFFALSE 27711
// sTime := true ;
27703: LD_ADDR_EXP 115
27707: PUSH
27708: LD_INT 1
27710: ST_TO_ADDR
// if p3 = 36 then
27711: LD_VAR 0 3
27715: PUSH
27716: LD_INT 36
27718: EQUAL
27719: IFFALSE 27729
// sTools := true ;
27721: LD_ADDR_EXP 116
27725: PUSH
27726: LD_INT 1
27728: ST_TO_ADDR
// if p3 = 101 then
27729: LD_VAR 0 3
27733: PUSH
27734: LD_INT 101
27736: EQUAL
27737: IFFALSE 27747
// sSold := true ;
27739: LD_ADDR_EXP 81
27743: PUSH
27744: LD_INT 1
27746: ST_TO_ADDR
// if p3 = 102 then
27747: LD_VAR 0 3
27751: PUSH
27752: LD_INT 102
27754: EQUAL
27755: IFFALSE 27765
// sDiff := true ;
27757: LD_ADDR_EXP 82
27761: PUSH
27762: LD_INT 1
27764: ST_TO_ADDR
// if p3 = 103 then
27765: LD_VAR 0 3
27769: PUSH
27770: LD_INT 103
27772: EQUAL
27773: IFFALSE 27783
// sFog := true ;
27775: LD_ADDR_EXP 85
27779: PUSH
27780: LD_INT 1
27782: ST_TO_ADDR
// if p3 = 104 then
27783: LD_VAR 0 3
27787: PUSH
27788: LD_INT 104
27790: EQUAL
27791: IFFALSE 27801
// sReset := true ;
27793: LD_ADDR_EXP 86
27797: PUSH
27798: LD_INT 1
27800: ST_TO_ADDR
// if p3 = 105 then
27801: LD_VAR 0 3
27805: PUSH
27806: LD_INT 105
27808: EQUAL
27809: IFFALSE 27819
// sSun := true ;
27811: LD_ADDR_EXP 87
27815: PUSH
27816: LD_INT 1
27818: ST_TO_ADDR
// if p3 = 106 then
27819: LD_VAR 0 3
27823: PUSH
27824: LD_INT 106
27826: EQUAL
27827: IFFALSE 27837
// sTiger := true ;
27829: LD_ADDR_EXP 83
27833: PUSH
27834: LD_INT 1
27836: ST_TO_ADDR
// if p3 = 107 then
27837: LD_VAR 0 3
27841: PUSH
27842: LD_INT 107
27844: EQUAL
27845: IFFALSE 27855
// sBomb := true ;
27847: LD_ADDR_EXP 84
27851: PUSH
27852: LD_INT 1
27854: ST_TO_ADDR
// if p3 = 108 then
27855: LD_VAR 0 3
27859: PUSH
27860: LD_INT 108
27862: EQUAL
27863: IFFALSE 27873
// sWound := true ;
27865: LD_ADDR_EXP 92
27869: PUSH
27870: LD_INT 1
27872: ST_TO_ADDR
// if p3 = 109 then
27873: LD_VAR 0 3
27877: PUSH
27878: LD_INT 109
27880: EQUAL
27881: IFFALSE 27891
// sBetray := true ;
27883: LD_ADDR_EXP 96
27887: PUSH
27888: LD_INT 1
27890: ST_TO_ADDR
// if p3 = 110 then
27891: LD_VAR 0 3
27895: PUSH
27896: LD_INT 110
27898: EQUAL
27899: IFFALSE 27909
// sContamin := true ;
27901: LD_ADDR_EXP 97
27905: PUSH
27906: LD_INT 1
27908: ST_TO_ADDR
// if p3 = 111 then
27909: LD_VAR 0 3
27913: PUSH
27914: LD_INT 111
27916: EQUAL
27917: IFFALSE 27927
// sOil := true ;
27919: LD_ADDR_EXP 99
27923: PUSH
27924: LD_INT 1
27926: ST_TO_ADDR
// if p3 = 112 then
27927: LD_VAR 0 3
27931: PUSH
27932: LD_INT 112
27934: EQUAL
27935: IFFALSE 27945
// sStu := true ;
27937: LD_ADDR_EXP 103
27941: PUSH
27942: LD_INT 1
27944: ST_TO_ADDR
// if p3 = 113 then
27945: LD_VAR 0 3
27949: PUSH
27950: LD_INT 113
27952: EQUAL
27953: IFFALSE 27963
// sBazooka := true ;
27955: LD_ADDR_EXP 106
27959: PUSH
27960: LD_INT 1
27962: ST_TO_ADDR
// if p3 = 114 then
27963: LD_VAR 0 3
27967: PUSH
27968: LD_INT 114
27970: EQUAL
27971: IFFALSE 27981
// sMortar := true ;
27973: LD_ADDR_EXP 107
27977: PUSH
27978: LD_INT 1
27980: ST_TO_ADDR
// if p3 = 115 then
27981: LD_VAR 0 3
27985: PUSH
27986: LD_INT 115
27988: EQUAL
27989: IFFALSE 27999
// sRanger := true ;
27991: LD_ADDR_EXP 117
27995: PUSH
27996: LD_INT 1
27998: ST_TO_ADDR
// end ; if p2 = 101 then
27999: LD_VAR 0 2
28003: PUSH
28004: LD_INT 101
28006: EQUAL
28007: IFFALSE 28135
// begin case p3 of 1 :
28009: LD_VAR 0 3
28013: PUSH
28014: LD_INT 1
28016: DOUBLE
28017: EQUAL
28018: IFTRUE 28022
28020: GO 28029
28022: POP
// hHackUnlimitedResources ; 2 :
28023: CALL 39170 0 0
28027: GO 28135
28029: LD_INT 2
28031: DOUBLE
28032: EQUAL
28033: IFTRUE 28037
28035: GO 28044
28037: POP
// hHackSetLevel10 ; 3 :
28038: CALL 39303 0 0
28042: GO 28135
28044: LD_INT 3
28046: DOUBLE
28047: EQUAL
28048: IFTRUE 28052
28050: GO 28059
28052: POP
// hHackSetLevel10YourUnits ; 4 :
28053: CALL 39388 0 0
28057: GO 28135
28059: LD_INT 4
28061: DOUBLE
28062: EQUAL
28063: IFTRUE 28067
28065: GO 28074
28067: POP
// hHackInvincible ; 5 :
28068: CALL 39836 0 0
28072: GO 28135
28074: LD_INT 5
28076: DOUBLE
28077: EQUAL
28078: IFTRUE 28082
28080: GO 28089
28082: POP
// hHackInvisible ; 6 :
28083: CALL 39947 0 0
28087: GO 28135
28089: LD_INT 6
28091: DOUBLE
28092: EQUAL
28093: IFTRUE 28097
28095: GO 28104
28097: POP
// hHackChangeYourSide ; 7 :
28098: CALL 40004 0 0
28102: GO 28135
28104: LD_INT 7
28106: DOUBLE
28107: EQUAL
28108: IFTRUE 28112
28110: GO 28119
28112: POP
// hHackChangeUnitSide ; 8 :
28113: CALL 40046 0 0
28117: GO 28135
28119: LD_INT 8
28121: DOUBLE
28122: EQUAL
28123: IFTRUE 28127
28125: GO 28134
28127: POP
// hHackFog ; end ;
28128: CALL 40147 0 0
28132: GO 28135
28134: POP
// end ; end ;
28135: PPOPN 6
28137: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
28138: GO 28140
28140: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
28141: LD_STRING initStreamRollete();
28143: PPUSH
28144: CALL_OW 559
// InitStreamMode ;
28148: CALL 28157 0 0
// DefineStreamItems ( ) ;
28152: CALL 28597 0 0
// end ;
28156: END
// function InitStreamMode ; begin
28157: LD_INT 0
28159: PPUSH
// streamModeActive := false ;
28160: LD_ADDR_EXP 64
28164: PUSH
28165: LD_INT 0
28167: ST_TO_ADDR
// normalCounter := 36 ;
28168: LD_ADDR_EXP 65
28172: PUSH
28173: LD_INT 36
28175: ST_TO_ADDR
// hardcoreCounter := 16 ;
28176: LD_ADDR_EXP 66
28180: PUSH
28181: LD_INT 16
28183: ST_TO_ADDR
// sRocket := false ;
28184: LD_ADDR_EXP 69
28188: PUSH
28189: LD_INT 0
28191: ST_TO_ADDR
// sSpeed := false ;
28192: LD_ADDR_EXP 68
28196: PUSH
28197: LD_INT 0
28199: ST_TO_ADDR
// sEngine := false ;
28200: LD_ADDR_EXP 70
28204: PUSH
28205: LD_INT 0
28207: ST_TO_ADDR
// sSpec := false ;
28208: LD_ADDR_EXP 67
28212: PUSH
28213: LD_INT 0
28215: ST_TO_ADDR
// sLevel := false ;
28216: LD_ADDR_EXP 71
28220: PUSH
28221: LD_INT 0
28223: ST_TO_ADDR
// sArmoury := false ;
28224: LD_ADDR_EXP 72
28228: PUSH
28229: LD_INT 0
28231: ST_TO_ADDR
// sRadar := false ;
28232: LD_ADDR_EXP 73
28236: PUSH
28237: LD_INT 0
28239: ST_TO_ADDR
// sBunker := false ;
28240: LD_ADDR_EXP 74
28244: PUSH
28245: LD_INT 0
28247: ST_TO_ADDR
// sHack := false ;
28248: LD_ADDR_EXP 75
28252: PUSH
28253: LD_INT 0
28255: ST_TO_ADDR
// sFire := false ;
28256: LD_ADDR_EXP 76
28260: PUSH
28261: LD_INT 0
28263: ST_TO_ADDR
// sRefresh := false ;
28264: LD_ADDR_EXP 77
28268: PUSH
28269: LD_INT 0
28271: ST_TO_ADDR
// sExp := false ;
28272: LD_ADDR_EXP 78
28276: PUSH
28277: LD_INT 0
28279: ST_TO_ADDR
// sDepot := false ;
28280: LD_ADDR_EXP 79
28284: PUSH
28285: LD_INT 0
28287: ST_TO_ADDR
// sFlag := false ;
28288: LD_ADDR_EXP 80
28292: PUSH
28293: LD_INT 0
28295: ST_TO_ADDR
// sKamikadze := false ;
28296: LD_ADDR_EXP 88
28300: PUSH
28301: LD_INT 0
28303: ST_TO_ADDR
// sTroll := false ;
28304: LD_ADDR_EXP 89
28308: PUSH
28309: LD_INT 0
28311: ST_TO_ADDR
// sSlow := false ;
28312: LD_ADDR_EXP 90
28316: PUSH
28317: LD_INT 0
28319: ST_TO_ADDR
// sLack := false ;
28320: LD_ADDR_EXP 91
28324: PUSH
28325: LD_INT 0
28327: ST_TO_ADDR
// sTank := false ;
28328: LD_ADDR_EXP 93
28332: PUSH
28333: LD_INT 0
28335: ST_TO_ADDR
// sRemote := false ;
28336: LD_ADDR_EXP 94
28340: PUSH
28341: LD_INT 0
28343: ST_TO_ADDR
// sPowell := false ;
28344: LD_ADDR_EXP 95
28348: PUSH
28349: LD_INT 0
28351: ST_TO_ADDR
// sTeleport := false ;
28352: LD_ADDR_EXP 98
28356: PUSH
28357: LD_INT 0
28359: ST_TO_ADDR
// sOilTower := false ;
28360: LD_ADDR_EXP 100
28364: PUSH
28365: LD_INT 0
28367: ST_TO_ADDR
// sShovel := false ;
28368: LD_ADDR_EXP 101
28372: PUSH
28373: LD_INT 0
28375: ST_TO_ADDR
// sSheik := false ;
28376: LD_ADDR_EXP 102
28380: PUSH
28381: LD_INT 0
28383: ST_TO_ADDR
// sEarthquake := false ;
28384: LD_ADDR_EXP 104
28388: PUSH
28389: LD_INT 0
28391: ST_TO_ADDR
// sAI := false ;
28392: LD_ADDR_EXP 105
28396: PUSH
28397: LD_INT 0
28399: ST_TO_ADDR
// sCargo := false ;
28400: LD_ADDR_EXP 108
28404: PUSH
28405: LD_INT 0
28407: ST_TO_ADDR
// sDLaser := false ;
28408: LD_ADDR_EXP 109
28412: PUSH
28413: LD_INT 0
28415: ST_TO_ADDR
// sExchange := false ;
28416: LD_ADDR_EXP 110
28420: PUSH
28421: LD_INT 0
28423: ST_TO_ADDR
// sFac := false ;
28424: LD_ADDR_EXP 111
28428: PUSH
28429: LD_INT 0
28431: ST_TO_ADDR
// sPower := false ;
28432: LD_ADDR_EXP 112
28436: PUSH
28437: LD_INT 0
28439: ST_TO_ADDR
// sRandom := false ;
28440: LD_ADDR_EXP 113
28444: PUSH
28445: LD_INT 0
28447: ST_TO_ADDR
// sShield := false ;
28448: LD_ADDR_EXP 114
28452: PUSH
28453: LD_INT 0
28455: ST_TO_ADDR
// sTime := false ;
28456: LD_ADDR_EXP 115
28460: PUSH
28461: LD_INT 0
28463: ST_TO_ADDR
// sTools := false ;
28464: LD_ADDR_EXP 116
28468: PUSH
28469: LD_INT 0
28471: ST_TO_ADDR
// sSold := false ;
28472: LD_ADDR_EXP 81
28476: PUSH
28477: LD_INT 0
28479: ST_TO_ADDR
// sDiff := false ;
28480: LD_ADDR_EXP 82
28484: PUSH
28485: LD_INT 0
28487: ST_TO_ADDR
// sFog := false ;
28488: LD_ADDR_EXP 85
28492: PUSH
28493: LD_INT 0
28495: ST_TO_ADDR
// sReset := false ;
28496: LD_ADDR_EXP 86
28500: PUSH
28501: LD_INT 0
28503: ST_TO_ADDR
// sSun := false ;
28504: LD_ADDR_EXP 87
28508: PUSH
28509: LD_INT 0
28511: ST_TO_ADDR
// sTiger := false ;
28512: LD_ADDR_EXP 83
28516: PUSH
28517: LD_INT 0
28519: ST_TO_ADDR
// sBomb := false ;
28520: LD_ADDR_EXP 84
28524: PUSH
28525: LD_INT 0
28527: ST_TO_ADDR
// sWound := false ;
28528: LD_ADDR_EXP 92
28532: PUSH
28533: LD_INT 0
28535: ST_TO_ADDR
// sBetray := false ;
28536: LD_ADDR_EXP 96
28540: PUSH
28541: LD_INT 0
28543: ST_TO_ADDR
// sContamin := false ;
28544: LD_ADDR_EXP 97
28548: PUSH
28549: LD_INT 0
28551: ST_TO_ADDR
// sOil := false ;
28552: LD_ADDR_EXP 99
28556: PUSH
28557: LD_INT 0
28559: ST_TO_ADDR
// sStu := false ;
28560: LD_ADDR_EXP 103
28564: PUSH
28565: LD_INT 0
28567: ST_TO_ADDR
// sBazooka := false ;
28568: LD_ADDR_EXP 106
28572: PUSH
28573: LD_INT 0
28575: ST_TO_ADDR
// sMortar := false ;
28576: LD_ADDR_EXP 107
28580: PUSH
28581: LD_INT 0
28583: ST_TO_ADDR
// sRanger := false ;
28584: LD_ADDR_EXP 117
28588: PUSH
28589: LD_INT 0
28591: ST_TO_ADDR
// end ;
28592: LD_VAR 0 1
28596: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
28597: LD_INT 0
28599: PPUSH
28600: PPUSH
28601: PPUSH
28602: PPUSH
28603: PPUSH
// result := [ ] ;
28604: LD_ADDR_VAR 0 1
28608: PUSH
28609: EMPTY
28610: ST_TO_ADDR
// if campaign_id = 1 then
28611: LD_OWVAR 69
28615: PUSH
28616: LD_INT 1
28618: EQUAL
28619: IFFALSE 31557
// begin case mission_number of 1 :
28621: LD_OWVAR 70
28625: PUSH
28626: LD_INT 1
28628: DOUBLE
28629: EQUAL
28630: IFTRUE 28634
28632: GO 28698
28634: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
28635: LD_ADDR_VAR 0 1
28639: PUSH
28640: LD_INT 2
28642: PUSH
28643: LD_INT 4
28645: PUSH
28646: LD_INT 11
28648: PUSH
28649: LD_INT 12
28651: PUSH
28652: LD_INT 15
28654: PUSH
28655: LD_INT 16
28657: PUSH
28658: LD_INT 22
28660: PUSH
28661: LD_INT 23
28663: PUSH
28664: LD_INT 26
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 101
28680: PUSH
28681: LD_INT 102
28683: PUSH
28684: LD_INT 106
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: ST_TO_ADDR
28696: GO 31555
28698: LD_INT 2
28700: DOUBLE
28701: EQUAL
28702: IFTRUE 28706
28704: GO 28778
28706: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
28707: LD_ADDR_VAR 0 1
28711: PUSH
28712: LD_INT 2
28714: PUSH
28715: LD_INT 4
28717: PUSH
28718: LD_INT 11
28720: PUSH
28721: LD_INT 12
28723: PUSH
28724: LD_INT 15
28726: PUSH
28727: LD_INT 16
28729: PUSH
28730: LD_INT 22
28732: PUSH
28733: LD_INT 23
28735: PUSH
28736: LD_INT 26
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 101
28752: PUSH
28753: LD_INT 102
28755: PUSH
28756: LD_INT 105
28758: PUSH
28759: LD_INT 106
28761: PUSH
28762: LD_INT 108
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: ST_TO_ADDR
28776: GO 31555
28778: LD_INT 3
28780: DOUBLE
28781: EQUAL
28782: IFTRUE 28786
28784: GO 28862
28786: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
28787: LD_ADDR_VAR 0 1
28791: PUSH
28792: LD_INT 2
28794: PUSH
28795: LD_INT 4
28797: PUSH
28798: LD_INT 5
28800: PUSH
28801: LD_INT 11
28803: PUSH
28804: LD_INT 12
28806: PUSH
28807: LD_INT 15
28809: PUSH
28810: LD_INT 16
28812: PUSH
28813: LD_INT 22
28815: PUSH
28816: LD_INT 26
28818: PUSH
28819: LD_INT 36
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 101
28836: PUSH
28837: LD_INT 102
28839: PUSH
28840: LD_INT 105
28842: PUSH
28843: LD_INT 106
28845: PUSH
28846: LD_INT 108
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: ST_TO_ADDR
28860: GO 31555
28862: LD_INT 4
28864: DOUBLE
28865: EQUAL
28866: IFTRUE 28870
28868: GO 28954
28870: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
28871: LD_ADDR_VAR 0 1
28875: PUSH
28876: LD_INT 2
28878: PUSH
28879: LD_INT 4
28881: PUSH
28882: LD_INT 5
28884: PUSH
28885: LD_INT 8
28887: PUSH
28888: LD_INT 11
28890: PUSH
28891: LD_INT 12
28893: PUSH
28894: LD_INT 15
28896: PUSH
28897: LD_INT 16
28899: PUSH
28900: LD_INT 22
28902: PUSH
28903: LD_INT 23
28905: PUSH
28906: LD_INT 26
28908: PUSH
28909: LD_INT 36
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 101
28928: PUSH
28929: LD_INT 102
28931: PUSH
28932: LD_INT 105
28934: PUSH
28935: LD_INT 106
28937: PUSH
28938: LD_INT 108
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: ST_TO_ADDR
28952: GO 31555
28954: LD_INT 5
28956: DOUBLE
28957: EQUAL
28958: IFTRUE 28962
28960: GO 29062
28962: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
28963: LD_ADDR_VAR 0 1
28967: PUSH
28968: LD_INT 2
28970: PUSH
28971: LD_INT 4
28973: PUSH
28974: LD_INT 5
28976: PUSH
28977: LD_INT 6
28979: PUSH
28980: LD_INT 8
28982: PUSH
28983: LD_INT 11
28985: PUSH
28986: LD_INT 12
28988: PUSH
28989: LD_INT 15
28991: PUSH
28992: LD_INT 16
28994: PUSH
28995: LD_INT 22
28997: PUSH
28998: LD_INT 23
29000: PUSH
29001: LD_INT 25
29003: PUSH
29004: LD_INT 26
29006: PUSH
29007: LD_INT 36
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 101
29028: PUSH
29029: LD_INT 102
29031: PUSH
29032: LD_INT 105
29034: PUSH
29035: LD_INT 106
29037: PUSH
29038: LD_INT 108
29040: PUSH
29041: LD_INT 109
29043: PUSH
29044: LD_INT 112
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: ST_TO_ADDR
29060: GO 31555
29062: LD_INT 6
29064: DOUBLE
29065: EQUAL
29066: IFTRUE 29070
29068: GO 29190
29070: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
29071: LD_ADDR_VAR 0 1
29075: PUSH
29076: LD_INT 2
29078: PUSH
29079: LD_INT 4
29081: PUSH
29082: LD_INT 5
29084: PUSH
29085: LD_INT 6
29087: PUSH
29088: LD_INT 8
29090: PUSH
29091: LD_INT 11
29093: PUSH
29094: LD_INT 12
29096: PUSH
29097: LD_INT 15
29099: PUSH
29100: LD_INT 16
29102: PUSH
29103: LD_INT 20
29105: PUSH
29106: LD_INT 21
29108: PUSH
29109: LD_INT 22
29111: PUSH
29112: LD_INT 23
29114: PUSH
29115: LD_INT 25
29117: PUSH
29118: LD_INT 26
29120: PUSH
29121: LD_INT 30
29123: PUSH
29124: LD_INT 31
29126: PUSH
29127: LD_INT 32
29129: PUSH
29130: LD_INT 36
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 101
29156: PUSH
29157: LD_INT 102
29159: PUSH
29160: LD_INT 105
29162: PUSH
29163: LD_INT 106
29165: PUSH
29166: LD_INT 108
29168: PUSH
29169: LD_INT 109
29171: PUSH
29172: LD_INT 112
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: ST_TO_ADDR
29188: GO 31555
29190: LD_INT 7
29192: DOUBLE
29193: EQUAL
29194: IFTRUE 29198
29196: GO 29298
29198: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
29199: LD_ADDR_VAR 0 1
29203: PUSH
29204: LD_INT 2
29206: PUSH
29207: LD_INT 4
29209: PUSH
29210: LD_INT 5
29212: PUSH
29213: LD_INT 7
29215: PUSH
29216: LD_INT 11
29218: PUSH
29219: LD_INT 12
29221: PUSH
29222: LD_INT 15
29224: PUSH
29225: LD_INT 16
29227: PUSH
29228: LD_INT 20
29230: PUSH
29231: LD_INT 21
29233: PUSH
29234: LD_INT 22
29236: PUSH
29237: LD_INT 23
29239: PUSH
29240: LD_INT 25
29242: PUSH
29243: LD_INT 26
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 101
29264: PUSH
29265: LD_INT 102
29267: PUSH
29268: LD_INT 103
29270: PUSH
29271: LD_INT 105
29273: PUSH
29274: LD_INT 106
29276: PUSH
29277: LD_INT 108
29279: PUSH
29280: LD_INT 112
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: ST_TO_ADDR
29296: GO 31555
29298: LD_INT 8
29300: DOUBLE
29301: EQUAL
29302: IFTRUE 29306
29304: GO 29434
29306: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
29307: LD_ADDR_VAR 0 1
29311: PUSH
29312: LD_INT 2
29314: PUSH
29315: LD_INT 4
29317: PUSH
29318: LD_INT 5
29320: PUSH
29321: LD_INT 6
29323: PUSH
29324: LD_INT 7
29326: PUSH
29327: LD_INT 8
29329: PUSH
29330: LD_INT 11
29332: PUSH
29333: LD_INT 12
29335: PUSH
29336: LD_INT 15
29338: PUSH
29339: LD_INT 16
29341: PUSH
29342: LD_INT 20
29344: PUSH
29345: LD_INT 21
29347: PUSH
29348: LD_INT 22
29350: PUSH
29351: LD_INT 23
29353: PUSH
29354: LD_INT 25
29356: PUSH
29357: LD_INT 26
29359: PUSH
29360: LD_INT 30
29362: PUSH
29363: LD_INT 31
29365: PUSH
29366: LD_INT 32
29368: PUSH
29369: LD_INT 36
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 101
29396: PUSH
29397: LD_INT 102
29399: PUSH
29400: LD_INT 103
29402: PUSH
29403: LD_INT 105
29405: PUSH
29406: LD_INT 106
29408: PUSH
29409: LD_INT 108
29411: PUSH
29412: LD_INT 109
29414: PUSH
29415: LD_INT 112
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: ST_TO_ADDR
29432: GO 31555
29434: LD_INT 9
29436: DOUBLE
29437: EQUAL
29438: IFTRUE 29442
29440: GO 29578
29442: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
29443: LD_ADDR_VAR 0 1
29447: PUSH
29448: LD_INT 2
29450: PUSH
29451: LD_INT 4
29453: PUSH
29454: LD_INT 5
29456: PUSH
29457: LD_INT 6
29459: PUSH
29460: LD_INT 7
29462: PUSH
29463: LD_INT 8
29465: PUSH
29466: LD_INT 11
29468: PUSH
29469: LD_INT 12
29471: PUSH
29472: LD_INT 15
29474: PUSH
29475: LD_INT 16
29477: PUSH
29478: LD_INT 20
29480: PUSH
29481: LD_INT 21
29483: PUSH
29484: LD_INT 22
29486: PUSH
29487: LD_INT 23
29489: PUSH
29490: LD_INT 25
29492: PUSH
29493: LD_INT 26
29495: PUSH
29496: LD_INT 28
29498: PUSH
29499: LD_INT 30
29501: PUSH
29502: LD_INT 31
29504: PUSH
29505: LD_INT 32
29507: PUSH
29508: LD_INT 36
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 101
29536: PUSH
29537: LD_INT 102
29539: PUSH
29540: LD_INT 103
29542: PUSH
29543: LD_INT 105
29545: PUSH
29546: LD_INT 106
29548: PUSH
29549: LD_INT 108
29551: PUSH
29552: LD_INT 109
29554: PUSH
29555: LD_INT 112
29557: PUSH
29558: LD_INT 114
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: ST_TO_ADDR
29576: GO 31555
29578: LD_INT 10
29580: DOUBLE
29581: EQUAL
29582: IFTRUE 29586
29584: GO 29770
29586: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
29587: LD_ADDR_VAR 0 1
29591: PUSH
29592: LD_INT 2
29594: PUSH
29595: LD_INT 4
29597: PUSH
29598: LD_INT 5
29600: PUSH
29601: LD_INT 6
29603: PUSH
29604: LD_INT 7
29606: PUSH
29607: LD_INT 8
29609: PUSH
29610: LD_INT 9
29612: PUSH
29613: LD_INT 10
29615: PUSH
29616: LD_INT 11
29618: PUSH
29619: LD_INT 12
29621: PUSH
29622: LD_INT 13
29624: PUSH
29625: LD_INT 14
29627: PUSH
29628: LD_INT 15
29630: PUSH
29631: LD_INT 16
29633: PUSH
29634: LD_INT 17
29636: PUSH
29637: LD_INT 18
29639: PUSH
29640: LD_INT 19
29642: PUSH
29643: LD_INT 20
29645: PUSH
29646: LD_INT 21
29648: PUSH
29649: LD_INT 22
29651: PUSH
29652: LD_INT 23
29654: PUSH
29655: LD_INT 24
29657: PUSH
29658: LD_INT 25
29660: PUSH
29661: LD_INT 26
29663: PUSH
29664: LD_INT 28
29666: PUSH
29667: LD_INT 30
29669: PUSH
29670: LD_INT 31
29672: PUSH
29673: LD_INT 32
29675: PUSH
29676: LD_INT 36
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 101
29712: PUSH
29713: LD_INT 102
29715: PUSH
29716: LD_INT 103
29718: PUSH
29719: LD_INT 104
29721: PUSH
29722: LD_INT 105
29724: PUSH
29725: LD_INT 106
29727: PUSH
29728: LD_INT 107
29730: PUSH
29731: LD_INT 108
29733: PUSH
29734: LD_INT 109
29736: PUSH
29737: LD_INT 110
29739: PUSH
29740: LD_INT 111
29742: PUSH
29743: LD_INT 112
29745: PUSH
29746: LD_INT 114
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: ST_TO_ADDR
29768: GO 31555
29770: LD_INT 11
29772: DOUBLE
29773: EQUAL
29774: IFTRUE 29778
29776: GO 29970
29778: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
29779: LD_ADDR_VAR 0 1
29783: PUSH
29784: LD_INT 2
29786: PUSH
29787: LD_INT 3
29789: PUSH
29790: LD_INT 4
29792: PUSH
29793: LD_INT 5
29795: PUSH
29796: LD_INT 6
29798: PUSH
29799: LD_INT 7
29801: PUSH
29802: LD_INT 8
29804: PUSH
29805: LD_INT 9
29807: PUSH
29808: LD_INT 10
29810: PUSH
29811: LD_INT 11
29813: PUSH
29814: LD_INT 12
29816: PUSH
29817: LD_INT 13
29819: PUSH
29820: LD_INT 14
29822: PUSH
29823: LD_INT 15
29825: PUSH
29826: LD_INT 16
29828: PUSH
29829: LD_INT 17
29831: PUSH
29832: LD_INT 18
29834: PUSH
29835: LD_INT 19
29837: PUSH
29838: LD_INT 20
29840: PUSH
29841: LD_INT 21
29843: PUSH
29844: LD_INT 22
29846: PUSH
29847: LD_INT 23
29849: PUSH
29850: LD_INT 24
29852: PUSH
29853: LD_INT 25
29855: PUSH
29856: LD_INT 26
29858: PUSH
29859: LD_INT 28
29861: PUSH
29862: LD_INT 30
29864: PUSH
29865: LD_INT 31
29867: PUSH
29868: LD_INT 32
29870: PUSH
29871: LD_INT 34
29873: PUSH
29874: LD_INT 36
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 101
29912: PUSH
29913: LD_INT 102
29915: PUSH
29916: LD_INT 103
29918: PUSH
29919: LD_INT 104
29921: PUSH
29922: LD_INT 105
29924: PUSH
29925: LD_INT 106
29927: PUSH
29928: LD_INT 107
29930: PUSH
29931: LD_INT 108
29933: PUSH
29934: LD_INT 109
29936: PUSH
29937: LD_INT 110
29939: PUSH
29940: LD_INT 111
29942: PUSH
29943: LD_INT 112
29945: PUSH
29946: LD_INT 114
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: ST_TO_ADDR
29968: GO 31555
29970: LD_INT 12
29972: DOUBLE
29973: EQUAL
29974: IFTRUE 29978
29976: GO 30186
29978: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
29979: LD_ADDR_VAR 0 1
29983: PUSH
29984: LD_INT 1
29986: PUSH
29987: LD_INT 2
29989: PUSH
29990: LD_INT 3
29992: PUSH
29993: LD_INT 4
29995: PUSH
29996: LD_INT 5
29998: PUSH
29999: LD_INT 6
30001: PUSH
30002: LD_INT 7
30004: PUSH
30005: LD_INT 8
30007: PUSH
30008: LD_INT 9
30010: PUSH
30011: LD_INT 10
30013: PUSH
30014: LD_INT 11
30016: PUSH
30017: LD_INT 12
30019: PUSH
30020: LD_INT 13
30022: PUSH
30023: LD_INT 14
30025: PUSH
30026: LD_INT 15
30028: PUSH
30029: LD_INT 16
30031: PUSH
30032: LD_INT 17
30034: PUSH
30035: LD_INT 18
30037: PUSH
30038: LD_INT 19
30040: PUSH
30041: LD_INT 20
30043: PUSH
30044: LD_INT 21
30046: PUSH
30047: LD_INT 22
30049: PUSH
30050: LD_INT 23
30052: PUSH
30053: LD_INT 24
30055: PUSH
30056: LD_INT 25
30058: PUSH
30059: LD_INT 26
30061: PUSH
30062: LD_INT 27
30064: PUSH
30065: LD_INT 28
30067: PUSH
30068: LD_INT 30
30070: PUSH
30071: LD_INT 31
30073: PUSH
30074: LD_INT 32
30076: PUSH
30077: LD_INT 33
30079: PUSH
30080: LD_INT 34
30082: PUSH
30083: LD_INT 36
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 101
30124: PUSH
30125: LD_INT 102
30127: PUSH
30128: LD_INT 103
30130: PUSH
30131: LD_INT 104
30133: PUSH
30134: LD_INT 105
30136: PUSH
30137: LD_INT 106
30139: PUSH
30140: LD_INT 107
30142: PUSH
30143: LD_INT 108
30145: PUSH
30146: LD_INT 109
30148: PUSH
30149: LD_INT 110
30151: PUSH
30152: LD_INT 111
30154: PUSH
30155: LD_INT 112
30157: PUSH
30158: LD_INT 113
30160: PUSH
30161: LD_INT 114
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: ST_TO_ADDR
30184: GO 31555
30186: LD_INT 13
30188: DOUBLE
30189: EQUAL
30190: IFTRUE 30194
30192: GO 30390
30194: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
30195: LD_ADDR_VAR 0 1
30199: PUSH
30200: LD_INT 1
30202: PUSH
30203: LD_INT 2
30205: PUSH
30206: LD_INT 3
30208: PUSH
30209: LD_INT 4
30211: PUSH
30212: LD_INT 5
30214: PUSH
30215: LD_INT 8
30217: PUSH
30218: LD_INT 9
30220: PUSH
30221: LD_INT 10
30223: PUSH
30224: LD_INT 11
30226: PUSH
30227: LD_INT 12
30229: PUSH
30230: LD_INT 14
30232: PUSH
30233: LD_INT 15
30235: PUSH
30236: LD_INT 16
30238: PUSH
30239: LD_INT 17
30241: PUSH
30242: LD_INT 18
30244: PUSH
30245: LD_INT 19
30247: PUSH
30248: LD_INT 20
30250: PUSH
30251: LD_INT 21
30253: PUSH
30254: LD_INT 22
30256: PUSH
30257: LD_INT 23
30259: PUSH
30260: LD_INT 24
30262: PUSH
30263: LD_INT 25
30265: PUSH
30266: LD_INT 26
30268: PUSH
30269: LD_INT 27
30271: PUSH
30272: LD_INT 28
30274: PUSH
30275: LD_INT 30
30277: PUSH
30278: LD_INT 31
30280: PUSH
30281: LD_INT 32
30283: PUSH
30284: LD_INT 33
30286: PUSH
30287: LD_INT 34
30289: PUSH
30290: LD_INT 36
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 101
30328: PUSH
30329: LD_INT 102
30331: PUSH
30332: LD_INT 103
30334: PUSH
30335: LD_INT 104
30337: PUSH
30338: LD_INT 105
30340: PUSH
30341: LD_INT 106
30343: PUSH
30344: LD_INT 107
30346: PUSH
30347: LD_INT 108
30349: PUSH
30350: LD_INT 109
30352: PUSH
30353: LD_INT 110
30355: PUSH
30356: LD_INT 111
30358: PUSH
30359: LD_INT 112
30361: PUSH
30362: LD_INT 113
30364: PUSH
30365: LD_INT 114
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: ST_TO_ADDR
30388: GO 31555
30390: LD_INT 14
30392: DOUBLE
30393: EQUAL
30394: IFTRUE 30398
30396: GO 30610
30398: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
30399: LD_ADDR_VAR 0 1
30403: PUSH
30404: LD_INT 1
30406: PUSH
30407: LD_INT 2
30409: PUSH
30410: LD_INT 3
30412: PUSH
30413: LD_INT 4
30415: PUSH
30416: LD_INT 5
30418: PUSH
30419: LD_INT 6
30421: PUSH
30422: LD_INT 7
30424: PUSH
30425: LD_INT 8
30427: PUSH
30428: LD_INT 9
30430: PUSH
30431: LD_INT 10
30433: PUSH
30434: LD_INT 11
30436: PUSH
30437: LD_INT 12
30439: PUSH
30440: LD_INT 13
30442: PUSH
30443: LD_INT 14
30445: PUSH
30446: LD_INT 15
30448: PUSH
30449: LD_INT 16
30451: PUSH
30452: LD_INT 17
30454: PUSH
30455: LD_INT 18
30457: PUSH
30458: LD_INT 19
30460: PUSH
30461: LD_INT 20
30463: PUSH
30464: LD_INT 21
30466: PUSH
30467: LD_INT 22
30469: PUSH
30470: LD_INT 23
30472: PUSH
30473: LD_INT 24
30475: PUSH
30476: LD_INT 25
30478: PUSH
30479: LD_INT 26
30481: PUSH
30482: LD_INT 27
30484: PUSH
30485: LD_INT 28
30487: PUSH
30488: LD_INT 29
30490: PUSH
30491: LD_INT 30
30493: PUSH
30494: LD_INT 31
30496: PUSH
30497: LD_INT 32
30499: PUSH
30500: LD_INT 33
30502: PUSH
30503: LD_INT 34
30505: PUSH
30506: LD_INT 36
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 101
30548: PUSH
30549: LD_INT 102
30551: PUSH
30552: LD_INT 103
30554: PUSH
30555: LD_INT 104
30557: PUSH
30558: LD_INT 105
30560: PUSH
30561: LD_INT 106
30563: PUSH
30564: LD_INT 107
30566: PUSH
30567: LD_INT 108
30569: PUSH
30570: LD_INT 109
30572: PUSH
30573: LD_INT 110
30575: PUSH
30576: LD_INT 111
30578: PUSH
30579: LD_INT 112
30581: PUSH
30582: LD_INT 113
30584: PUSH
30585: LD_INT 114
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: ST_TO_ADDR
30608: GO 31555
30610: LD_INT 15
30612: DOUBLE
30613: EQUAL
30614: IFTRUE 30618
30616: GO 30830
30618: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
30619: LD_ADDR_VAR 0 1
30623: PUSH
30624: LD_INT 1
30626: PUSH
30627: LD_INT 2
30629: PUSH
30630: LD_INT 3
30632: PUSH
30633: LD_INT 4
30635: PUSH
30636: LD_INT 5
30638: PUSH
30639: LD_INT 6
30641: PUSH
30642: LD_INT 7
30644: PUSH
30645: LD_INT 8
30647: PUSH
30648: LD_INT 9
30650: PUSH
30651: LD_INT 10
30653: PUSH
30654: LD_INT 11
30656: PUSH
30657: LD_INT 12
30659: PUSH
30660: LD_INT 13
30662: PUSH
30663: LD_INT 14
30665: PUSH
30666: LD_INT 15
30668: PUSH
30669: LD_INT 16
30671: PUSH
30672: LD_INT 17
30674: PUSH
30675: LD_INT 18
30677: PUSH
30678: LD_INT 19
30680: PUSH
30681: LD_INT 20
30683: PUSH
30684: LD_INT 21
30686: PUSH
30687: LD_INT 22
30689: PUSH
30690: LD_INT 23
30692: PUSH
30693: LD_INT 24
30695: PUSH
30696: LD_INT 25
30698: PUSH
30699: LD_INT 26
30701: PUSH
30702: LD_INT 27
30704: PUSH
30705: LD_INT 28
30707: PUSH
30708: LD_INT 29
30710: PUSH
30711: LD_INT 30
30713: PUSH
30714: LD_INT 31
30716: PUSH
30717: LD_INT 32
30719: PUSH
30720: LD_INT 33
30722: PUSH
30723: LD_INT 34
30725: PUSH
30726: LD_INT 36
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 101
30768: PUSH
30769: LD_INT 102
30771: PUSH
30772: LD_INT 103
30774: PUSH
30775: LD_INT 104
30777: PUSH
30778: LD_INT 105
30780: PUSH
30781: LD_INT 106
30783: PUSH
30784: LD_INT 107
30786: PUSH
30787: LD_INT 108
30789: PUSH
30790: LD_INT 109
30792: PUSH
30793: LD_INT 110
30795: PUSH
30796: LD_INT 111
30798: PUSH
30799: LD_INT 112
30801: PUSH
30802: LD_INT 113
30804: PUSH
30805: LD_INT 114
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: ST_TO_ADDR
30828: GO 31555
30830: LD_INT 16
30832: DOUBLE
30833: EQUAL
30834: IFTRUE 30838
30836: GO 30962
30838: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
30839: LD_ADDR_VAR 0 1
30843: PUSH
30844: LD_INT 2
30846: PUSH
30847: LD_INT 4
30849: PUSH
30850: LD_INT 5
30852: PUSH
30853: LD_INT 7
30855: PUSH
30856: LD_INT 11
30858: PUSH
30859: LD_INT 12
30861: PUSH
30862: LD_INT 15
30864: PUSH
30865: LD_INT 16
30867: PUSH
30868: LD_INT 20
30870: PUSH
30871: LD_INT 21
30873: PUSH
30874: LD_INT 22
30876: PUSH
30877: LD_INT 23
30879: PUSH
30880: LD_INT 25
30882: PUSH
30883: LD_INT 26
30885: PUSH
30886: LD_INT 30
30888: PUSH
30889: LD_INT 31
30891: PUSH
30892: LD_INT 32
30894: PUSH
30895: LD_INT 33
30897: PUSH
30898: LD_INT 34
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 101
30924: PUSH
30925: LD_INT 102
30927: PUSH
30928: LD_INT 103
30930: PUSH
30931: LD_INT 106
30933: PUSH
30934: LD_INT 108
30936: PUSH
30937: LD_INT 112
30939: PUSH
30940: LD_INT 113
30942: PUSH
30943: LD_INT 114
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: ST_TO_ADDR
30960: GO 31555
30962: LD_INT 17
30964: DOUBLE
30965: EQUAL
30966: IFTRUE 30970
30968: GO 31182
30970: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
30971: LD_ADDR_VAR 0 1
30975: PUSH
30976: LD_INT 1
30978: PUSH
30979: LD_INT 2
30981: PUSH
30982: LD_INT 3
30984: PUSH
30985: LD_INT 4
30987: PUSH
30988: LD_INT 5
30990: PUSH
30991: LD_INT 6
30993: PUSH
30994: LD_INT 7
30996: PUSH
30997: LD_INT 8
30999: PUSH
31000: LD_INT 9
31002: PUSH
31003: LD_INT 10
31005: PUSH
31006: LD_INT 11
31008: PUSH
31009: LD_INT 12
31011: PUSH
31012: LD_INT 13
31014: PUSH
31015: LD_INT 14
31017: PUSH
31018: LD_INT 15
31020: PUSH
31021: LD_INT 16
31023: PUSH
31024: LD_INT 17
31026: PUSH
31027: LD_INT 18
31029: PUSH
31030: LD_INT 19
31032: PUSH
31033: LD_INT 20
31035: PUSH
31036: LD_INT 21
31038: PUSH
31039: LD_INT 22
31041: PUSH
31042: LD_INT 23
31044: PUSH
31045: LD_INT 24
31047: PUSH
31048: LD_INT 25
31050: PUSH
31051: LD_INT 26
31053: PUSH
31054: LD_INT 27
31056: PUSH
31057: LD_INT 28
31059: PUSH
31060: LD_INT 29
31062: PUSH
31063: LD_INT 30
31065: PUSH
31066: LD_INT 31
31068: PUSH
31069: LD_INT 32
31071: PUSH
31072: LD_INT 33
31074: PUSH
31075: LD_INT 34
31077: PUSH
31078: LD_INT 36
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 101
31120: PUSH
31121: LD_INT 102
31123: PUSH
31124: LD_INT 103
31126: PUSH
31127: LD_INT 104
31129: PUSH
31130: LD_INT 105
31132: PUSH
31133: LD_INT 106
31135: PUSH
31136: LD_INT 107
31138: PUSH
31139: LD_INT 108
31141: PUSH
31142: LD_INT 109
31144: PUSH
31145: LD_INT 110
31147: PUSH
31148: LD_INT 111
31150: PUSH
31151: LD_INT 112
31153: PUSH
31154: LD_INT 113
31156: PUSH
31157: LD_INT 114
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: ST_TO_ADDR
31180: GO 31555
31182: LD_INT 18
31184: DOUBLE
31185: EQUAL
31186: IFTRUE 31190
31188: GO 31326
31190: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
31191: LD_ADDR_VAR 0 1
31195: PUSH
31196: LD_INT 2
31198: PUSH
31199: LD_INT 4
31201: PUSH
31202: LD_INT 5
31204: PUSH
31205: LD_INT 7
31207: PUSH
31208: LD_INT 11
31210: PUSH
31211: LD_INT 12
31213: PUSH
31214: LD_INT 15
31216: PUSH
31217: LD_INT 16
31219: PUSH
31220: LD_INT 20
31222: PUSH
31223: LD_INT 21
31225: PUSH
31226: LD_INT 22
31228: PUSH
31229: LD_INT 23
31231: PUSH
31232: LD_INT 25
31234: PUSH
31235: LD_INT 26
31237: PUSH
31238: LD_INT 30
31240: PUSH
31241: LD_INT 31
31243: PUSH
31244: LD_INT 32
31246: PUSH
31247: LD_INT 33
31249: PUSH
31250: LD_INT 34
31252: PUSH
31253: LD_INT 35
31255: PUSH
31256: LD_INT 36
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 101
31284: PUSH
31285: LD_INT 102
31287: PUSH
31288: LD_INT 103
31290: PUSH
31291: LD_INT 106
31293: PUSH
31294: LD_INT 108
31296: PUSH
31297: LD_INT 112
31299: PUSH
31300: LD_INT 113
31302: PUSH
31303: LD_INT 114
31305: PUSH
31306: LD_INT 115
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: ST_TO_ADDR
31324: GO 31555
31326: LD_INT 19
31328: DOUBLE
31329: EQUAL
31330: IFTRUE 31334
31332: GO 31554
31334: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
31335: LD_ADDR_VAR 0 1
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: LD_INT 2
31345: PUSH
31346: LD_INT 3
31348: PUSH
31349: LD_INT 4
31351: PUSH
31352: LD_INT 5
31354: PUSH
31355: LD_INT 6
31357: PUSH
31358: LD_INT 7
31360: PUSH
31361: LD_INT 8
31363: PUSH
31364: LD_INT 9
31366: PUSH
31367: LD_INT 10
31369: PUSH
31370: LD_INT 11
31372: PUSH
31373: LD_INT 12
31375: PUSH
31376: LD_INT 13
31378: PUSH
31379: LD_INT 14
31381: PUSH
31382: LD_INT 15
31384: PUSH
31385: LD_INT 16
31387: PUSH
31388: LD_INT 17
31390: PUSH
31391: LD_INT 18
31393: PUSH
31394: LD_INT 19
31396: PUSH
31397: LD_INT 20
31399: PUSH
31400: LD_INT 21
31402: PUSH
31403: LD_INT 22
31405: PUSH
31406: LD_INT 23
31408: PUSH
31409: LD_INT 24
31411: PUSH
31412: LD_INT 25
31414: PUSH
31415: LD_INT 26
31417: PUSH
31418: LD_INT 27
31420: PUSH
31421: LD_INT 28
31423: PUSH
31424: LD_INT 29
31426: PUSH
31427: LD_INT 30
31429: PUSH
31430: LD_INT 31
31432: PUSH
31433: LD_INT 32
31435: PUSH
31436: LD_INT 33
31438: PUSH
31439: LD_INT 34
31441: PUSH
31442: LD_INT 35
31444: PUSH
31445: LD_INT 36
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 101
31488: PUSH
31489: LD_INT 102
31491: PUSH
31492: LD_INT 103
31494: PUSH
31495: LD_INT 104
31497: PUSH
31498: LD_INT 105
31500: PUSH
31501: LD_INT 106
31503: PUSH
31504: LD_INT 107
31506: PUSH
31507: LD_INT 108
31509: PUSH
31510: LD_INT 109
31512: PUSH
31513: LD_INT 110
31515: PUSH
31516: LD_INT 111
31518: PUSH
31519: LD_INT 112
31521: PUSH
31522: LD_INT 113
31524: PUSH
31525: LD_INT 114
31527: PUSH
31528: LD_INT 115
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: ST_TO_ADDR
31552: GO 31555
31554: POP
// end else
31555: GO 31774
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
31557: LD_ADDR_VAR 0 1
31561: PUSH
31562: LD_INT 1
31564: PUSH
31565: LD_INT 2
31567: PUSH
31568: LD_INT 3
31570: PUSH
31571: LD_INT 4
31573: PUSH
31574: LD_INT 5
31576: PUSH
31577: LD_INT 6
31579: PUSH
31580: LD_INT 7
31582: PUSH
31583: LD_INT 8
31585: PUSH
31586: LD_INT 9
31588: PUSH
31589: LD_INT 10
31591: PUSH
31592: LD_INT 11
31594: PUSH
31595: LD_INT 12
31597: PUSH
31598: LD_INT 13
31600: PUSH
31601: LD_INT 14
31603: PUSH
31604: LD_INT 15
31606: PUSH
31607: LD_INT 16
31609: PUSH
31610: LD_INT 17
31612: PUSH
31613: LD_INT 18
31615: PUSH
31616: LD_INT 19
31618: PUSH
31619: LD_INT 20
31621: PUSH
31622: LD_INT 21
31624: PUSH
31625: LD_INT 22
31627: PUSH
31628: LD_INT 23
31630: PUSH
31631: LD_INT 24
31633: PUSH
31634: LD_INT 25
31636: PUSH
31637: LD_INT 26
31639: PUSH
31640: LD_INT 27
31642: PUSH
31643: LD_INT 28
31645: PUSH
31646: LD_INT 29
31648: PUSH
31649: LD_INT 30
31651: PUSH
31652: LD_INT 31
31654: PUSH
31655: LD_INT 32
31657: PUSH
31658: LD_INT 33
31660: PUSH
31661: LD_INT 34
31663: PUSH
31664: LD_INT 35
31666: PUSH
31667: LD_INT 36
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 101
31710: PUSH
31711: LD_INT 102
31713: PUSH
31714: LD_INT 103
31716: PUSH
31717: LD_INT 104
31719: PUSH
31720: LD_INT 105
31722: PUSH
31723: LD_INT 106
31725: PUSH
31726: LD_INT 107
31728: PUSH
31729: LD_INT 108
31731: PUSH
31732: LD_INT 109
31734: PUSH
31735: LD_INT 110
31737: PUSH
31738: LD_INT 111
31740: PUSH
31741: LD_INT 112
31743: PUSH
31744: LD_INT 113
31746: PUSH
31747: LD_INT 114
31749: PUSH
31750: LD_INT 115
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: ST_TO_ADDR
// if result then
31774: LD_VAR 0 1
31778: IFFALSE 32067
// begin normal :=  ;
31780: LD_ADDR_VAR 0 3
31784: PUSH
31785: LD_STRING 
31787: ST_TO_ADDR
// hardcore :=  ;
31788: LD_ADDR_VAR 0 4
31792: PUSH
31793: LD_STRING 
31795: ST_TO_ADDR
// for i = 1 to normalCounter do
31796: LD_ADDR_VAR 0 5
31800: PUSH
31801: DOUBLE
31802: LD_INT 1
31804: DEC
31805: ST_TO_ADDR
31806: LD_EXP 65
31810: PUSH
31811: FOR_TO
31812: IFFALSE 31913
// begin tmp := 0 ;
31814: LD_ADDR_VAR 0 2
31818: PUSH
31819: LD_STRING 0
31821: ST_TO_ADDR
// if result [ 1 ] then
31822: LD_VAR 0 1
31826: PUSH
31827: LD_INT 1
31829: ARRAY
31830: IFFALSE 31895
// if result [ 1 ] [ 1 ] = i then
31832: LD_VAR 0 1
31836: PUSH
31837: LD_INT 1
31839: ARRAY
31840: PUSH
31841: LD_INT 1
31843: ARRAY
31844: PUSH
31845: LD_VAR 0 5
31849: EQUAL
31850: IFFALSE 31895
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
31852: LD_ADDR_VAR 0 1
31856: PUSH
31857: LD_VAR 0 1
31861: PPUSH
31862: LD_INT 1
31864: PPUSH
31865: LD_VAR 0 1
31869: PUSH
31870: LD_INT 1
31872: ARRAY
31873: PPUSH
31874: LD_INT 1
31876: PPUSH
31877: CALL_OW 3
31881: PPUSH
31882: CALL_OW 1
31886: ST_TO_ADDR
// tmp := 1 ;
31887: LD_ADDR_VAR 0 2
31891: PUSH
31892: LD_STRING 1
31894: ST_TO_ADDR
// end ; normal := normal & tmp ;
31895: LD_ADDR_VAR 0 3
31899: PUSH
31900: LD_VAR 0 3
31904: PUSH
31905: LD_VAR 0 2
31909: STR
31910: ST_TO_ADDR
// end ;
31911: GO 31811
31913: POP
31914: POP
// for i = 1 to hardcoreCounter do
31915: LD_ADDR_VAR 0 5
31919: PUSH
31920: DOUBLE
31921: LD_INT 1
31923: DEC
31924: ST_TO_ADDR
31925: LD_EXP 66
31929: PUSH
31930: FOR_TO
31931: IFFALSE 32036
// begin tmp := 0 ;
31933: LD_ADDR_VAR 0 2
31937: PUSH
31938: LD_STRING 0
31940: ST_TO_ADDR
// if result [ 2 ] then
31941: LD_VAR 0 1
31945: PUSH
31946: LD_INT 2
31948: ARRAY
31949: IFFALSE 32018
// if result [ 2 ] [ 1 ] = 100 + i then
31951: LD_VAR 0 1
31955: PUSH
31956: LD_INT 2
31958: ARRAY
31959: PUSH
31960: LD_INT 1
31962: ARRAY
31963: PUSH
31964: LD_INT 100
31966: PUSH
31967: LD_VAR 0 5
31971: PLUS
31972: EQUAL
31973: IFFALSE 32018
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
31975: LD_ADDR_VAR 0 1
31979: PUSH
31980: LD_VAR 0 1
31984: PPUSH
31985: LD_INT 2
31987: PPUSH
31988: LD_VAR 0 1
31992: PUSH
31993: LD_INT 2
31995: ARRAY
31996: PPUSH
31997: LD_INT 1
31999: PPUSH
32000: CALL_OW 3
32004: PPUSH
32005: CALL_OW 1
32009: ST_TO_ADDR
// tmp := 1 ;
32010: LD_ADDR_VAR 0 2
32014: PUSH
32015: LD_STRING 1
32017: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
32018: LD_ADDR_VAR 0 4
32022: PUSH
32023: LD_VAR 0 4
32027: PUSH
32028: LD_VAR 0 2
32032: STR
32033: ST_TO_ADDR
// end ;
32034: GO 31930
32036: POP
32037: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
32038: LD_STRING getStreamItemsFromMission("
32040: PUSH
32041: LD_VAR 0 3
32045: STR
32046: PUSH
32047: LD_STRING ","
32049: STR
32050: PUSH
32051: LD_VAR 0 4
32055: STR
32056: PUSH
32057: LD_STRING ")
32059: STR
32060: PPUSH
32061: CALL_OW 559
// end else
32065: GO 32074
// ToLua ( getStreamItemsFromMission("","") ) ;
32067: LD_STRING getStreamItemsFromMission("","")
32069: PPUSH
32070: CALL_OW 559
// end ;
32074: LD_VAR 0 1
32078: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
32079: LD_EXP 64
32083: PUSH
32084: LD_EXP 69
32088: AND
32089: IFFALSE 32213
32091: GO 32093
32093: DISABLE
32094: LD_INT 0
32096: PPUSH
32097: PPUSH
// begin enable ;
32098: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
32099: LD_ADDR_VAR 0 2
32103: PUSH
32104: LD_INT 22
32106: PUSH
32107: LD_OWVAR 2
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 2
32118: PUSH
32119: LD_INT 34
32121: PUSH
32122: LD_INT 7
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 34
32131: PUSH
32132: LD_INT 45
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 34
32141: PUSH
32142: LD_INT 28
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 34
32151: PUSH
32152: LD_INT 47
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PPUSH
32170: CALL_OW 69
32174: ST_TO_ADDR
// if not tmp then
32175: LD_VAR 0 2
32179: NOT
32180: IFFALSE 32184
// exit ;
32182: GO 32213
// for i in tmp do
32184: LD_ADDR_VAR 0 1
32188: PUSH
32189: LD_VAR 0 2
32193: PUSH
32194: FOR_IN
32195: IFFALSE 32211
// begin SetLives ( i , 0 ) ;
32197: LD_VAR 0 1
32201: PPUSH
32202: LD_INT 0
32204: PPUSH
32205: CALL_OW 234
// end ;
32209: GO 32194
32211: POP
32212: POP
// end ;
32213: PPOPN 2
32215: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
32216: LD_EXP 64
32220: PUSH
32221: LD_EXP 70
32225: AND
32226: IFFALSE 32310
32228: GO 32230
32230: DISABLE
32231: LD_INT 0
32233: PPUSH
32234: PPUSH
// begin enable ;
32235: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
32236: LD_ADDR_VAR 0 2
32240: PUSH
32241: LD_INT 22
32243: PUSH
32244: LD_OWVAR 2
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 32
32255: PUSH
32256: LD_INT 3
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PPUSH
32267: CALL_OW 69
32271: ST_TO_ADDR
// if not tmp then
32272: LD_VAR 0 2
32276: NOT
32277: IFFALSE 32281
// exit ;
32279: GO 32310
// for i in tmp do
32281: LD_ADDR_VAR 0 1
32285: PUSH
32286: LD_VAR 0 2
32290: PUSH
32291: FOR_IN
32292: IFFALSE 32308
// begin SetLives ( i , 0 ) ;
32294: LD_VAR 0 1
32298: PPUSH
32299: LD_INT 0
32301: PPUSH
32302: CALL_OW 234
// end ;
32306: GO 32291
32308: POP
32309: POP
// end ;
32310: PPOPN 2
32312: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
32313: LD_EXP 64
32317: PUSH
32318: LD_EXP 67
32322: AND
32323: IFFALSE 32416
32325: GO 32327
32327: DISABLE
32328: LD_INT 0
32330: PPUSH
// begin enable ;
32331: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
32332: LD_ADDR_VAR 0 1
32336: PUSH
32337: LD_INT 22
32339: PUSH
32340: LD_OWVAR 2
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 2
32351: PUSH
32352: LD_INT 25
32354: PUSH
32355: LD_INT 5
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 25
32364: PUSH
32365: LD_INT 9
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 25
32374: PUSH
32375: LD_INT 8
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PPUSH
32392: CALL_OW 69
32396: PUSH
32397: FOR_IN
32398: IFFALSE 32414
// begin SetClass ( i , 1 ) ;
32400: LD_VAR 0 1
32404: PPUSH
32405: LD_INT 1
32407: PPUSH
32408: CALL_OW 336
// end ;
32412: GO 32397
32414: POP
32415: POP
// end ;
32416: PPOPN 1
32418: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
32419: LD_EXP 64
32423: PUSH
32424: LD_EXP 68
32428: AND
32429: PUSH
32430: LD_OWVAR 65
32434: PUSH
32435: LD_INT 7
32437: LESS
32438: AND
32439: IFFALSE 32453
32441: GO 32443
32443: DISABLE
// begin enable ;
32444: ENABLE
// game_speed := 7 ;
32445: LD_ADDR_OWVAR 65
32449: PUSH
32450: LD_INT 7
32452: ST_TO_ADDR
// end ;
32453: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
32454: LD_EXP 64
32458: PUSH
32459: LD_EXP 71
32463: AND
32464: IFFALSE 32666
32466: GO 32468
32468: DISABLE
32469: LD_INT 0
32471: PPUSH
32472: PPUSH
32473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32474: LD_ADDR_VAR 0 3
32478: PUSH
32479: LD_INT 81
32481: PUSH
32482: LD_OWVAR 2
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 21
32493: PUSH
32494: LD_INT 1
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PPUSH
32505: CALL_OW 69
32509: ST_TO_ADDR
// if not tmp then
32510: LD_VAR 0 3
32514: NOT
32515: IFFALSE 32519
// exit ;
32517: GO 32666
// if tmp > 5 then
32519: LD_VAR 0 3
32523: PUSH
32524: LD_INT 5
32526: GREATER
32527: IFFALSE 32539
// k := 5 else
32529: LD_ADDR_VAR 0 2
32533: PUSH
32534: LD_INT 5
32536: ST_TO_ADDR
32537: GO 32549
// k := tmp ;
32539: LD_ADDR_VAR 0 2
32543: PUSH
32544: LD_VAR 0 3
32548: ST_TO_ADDR
// for i := 1 to k do
32549: LD_ADDR_VAR 0 1
32553: PUSH
32554: DOUBLE
32555: LD_INT 1
32557: DEC
32558: ST_TO_ADDR
32559: LD_VAR 0 2
32563: PUSH
32564: FOR_TO
32565: IFFALSE 32664
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
32567: LD_VAR 0 3
32571: PUSH
32572: LD_VAR 0 1
32576: ARRAY
32577: PPUSH
32578: LD_VAR 0 1
32582: PUSH
32583: LD_INT 4
32585: MOD
32586: PUSH
32587: LD_INT 1
32589: PLUS
32590: PPUSH
32591: CALL_OW 259
32595: PUSH
32596: LD_INT 10
32598: LESS
32599: IFFALSE 32662
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
32601: LD_VAR 0 3
32605: PUSH
32606: LD_VAR 0 1
32610: ARRAY
32611: PPUSH
32612: LD_VAR 0 1
32616: PUSH
32617: LD_INT 4
32619: MOD
32620: PUSH
32621: LD_INT 1
32623: PLUS
32624: PPUSH
32625: LD_VAR 0 3
32629: PUSH
32630: LD_VAR 0 1
32634: ARRAY
32635: PPUSH
32636: LD_VAR 0 1
32640: PUSH
32641: LD_INT 4
32643: MOD
32644: PUSH
32645: LD_INT 1
32647: PLUS
32648: PPUSH
32649: CALL_OW 259
32653: PUSH
32654: LD_INT 1
32656: PLUS
32657: PPUSH
32658: CALL_OW 237
32662: GO 32564
32664: POP
32665: POP
// end ;
32666: PPOPN 3
32668: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
32669: LD_EXP 64
32673: PUSH
32674: LD_EXP 72
32678: AND
32679: IFFALSE 32699
32681: GO 32683
32683: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
32684: LD_INT 4
32686: PPUSH
32687: LD_OWVAR 2
32691: PPUSH
32692: LD_INT 0
32694: PPUSH
32695: CALL_OW 324
32699: END
// every 0 0$1 trigger StreamModeActive and sShovel do
32700: LD_EXP 64
32704: PUSH
32705: LD_EXP 101
32709: AND
32710: IFFALSE 32730
32712: GO 32714
32714: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
32715: LD_INT 19
32717: PPUSH
32718: LD_OWVAR 2
32722: PPUSH
32723: LD_INT 0
32725: PPUSH
32726: CALL_OW 324
32730: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
32731: LD_EXP 64
32735: PUSH
32736: LD_EXP 73
32740: AND
32741: IFFALSE 32843
32743: GO 32745
32745: DISABLE
32746: LD_INT 0
32748: PPUSH
32749: PPUSH
// begin enable ;
32750: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
32751: LD_ADDR_VAR 0 2
32755: PUSH
32756: LD_INT 22
32758: PUSH
32759: LD_OWVAR 2
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 2
32770: PUSH
32771: LD_INT 34
32773: PUSH
32774: LD_INT 11
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 34
32783: PUSH
32784: LD_INT 30
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: LIST
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PPUSH
32800: CALL_OW 69
32804: ST_TO_ADDR
// if not tmp then
32805: LD_VAR 0 2
32809: NOT
32810: IFFALSE 32814
// exit ;
32812: GO 32843
// for i in tmp do
32814: LD_ADDR_VAR 0 1
32818: PUSH
32819: LD_VAR 0 2
32823: PUSH
32824: FOR_IN
32825: IFFALSE 32841
// begin SetLives ( i , 0 ) ;
32827: LD_VAR 0 1
32831: PPUSH
32832: LD_INT 0
32834: PPUSH
32835: CALL_OW 234
// end ;
32839: GO 32824
32841: POP
32842: POP
// end ;
32843: PPOPN 2
32845: END
// every 0 0$1 trigger StreamModeActive and sBunker do
32846: LD_EXP 64
32850: PUSH
32851: LD_EXP 74
32855: AND
32856: IFFALSE 32876
32858: GO 32860
32860: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
32861: LD_INT 32
32863: PPUSH
32864: LD_OWVAR 2
32868: PPUSH
32869: LD_INT 0
32871: PPUSH
32872: CALL_OW 324
32876: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
32877: LD_EXP 64
32881: PUSH
32882: LD_EXP 75
32886: AND
32887: IFFALSE 33068
32889: GO 32891
32891: DISABLE
32892: LD_INT 0
32894: PPUSH
32895: PPUSH
32896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
32897: LD_ADDR_VAR 0 2
32901: PUSH
32902: LD_INT 22
32904: PUSH
32905: LD_OWVAR 2
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 33
32916: PUSH
32917: LD_INT 3
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PPUSH
32928: CALL_OW 69
32932: ST_TO_ADDR
// if not tmp then
32933: LD_VAR 0 2
32937: NOT
32938: IFFALSE 32942
// exit ;
32940: GO 33068
// side := 0 ;
32942: LD_ADDR_VAR 0 3
32946: PUSH
32947: LD_INT 0
32949: ST_TO_ADDR
// for i := 1 to 8 do
32950: LD_ADDR_VAR 0 1
32954: PUSH
32955: DOUBLE
32956: LD_INT 1
32958: DEC
32959: ST_TO_ADDR
32960: LD_INT 8
32962: PUSH
32963: FOR_TO
32964: IFFALSE 33012
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
32966: LD_OWVAR 2
32970: PUSH
32971: LD_VAR 0 1
32975: NONEQUAL
32976: PUSH
32977: LD_OWVAR 2
32981: PPUSH
32982: LD_VAR 0 1
32986: PPUSH
32987: CALL_OW 81
32991: PUSH
32992: LD_INT 2
32994: EQUAL
32995: AND
32996: IFFALSE 33010
// begin side := i ;
32998: LD_ADDR_VAR 0 3
33002: PUSH
33003: LD_VAR 0 1
33007: ST_TO_ADDR
// break ;
33008: GO 33012
// end ;
33010: GO 32963
33012: POP
33013: POP
// if not side then
33014: LD_VAR 0 3
33018: NOT
33019: IFFALSE 33023
// exit ;
33021: GO 33068
// for i := 1 to tmp do
33023: LD_ADDR_VAR 0 1
33027: PUSH
33028: DOUBLE
33029: LD_INT 1
33031: DEC
33032: ST_TO_ADDR
33033: LD_VAR 0 2
33037: PUSH
33038: FOR_TO
33039: IFFALSE 33066
// if Prob ( 60 ) then
33041: LD_INT 60
33043: PPUSH
33044: CALL_OW 13
33048: IFFALSE 33064
// SetSide ( i , side ) ;
33050: LD_VAR 0 1
33054: PPUSH
33055: LD_VAR 0 3
33059: PPUSH
33060: CALL_OW 235
33064: GO 33038
33066: POP
33067: POP
// end ;
33068: PPOPN 3
33070: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
33071: LD_EXP 64
33075: PUSH
33076: LD_EXP 77
33080: AND
33081: IFFALSE 33200
33083: GO 33085
33085: DISABLE
33086: LD_INT 0
33088: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
33089: LD_ADDR_VAR 0 1
33093: PUSH
33094: LD_INT 22
33096: PUSH
33097: LD_OWVAR 2
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 21
33108: PUSH
33109: LD_INT 1
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 3
33118: PUSH
33119: LD_INT 23
33121: PUSH
33122: LD_INT 0
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: LIST
33137: PPUSH
33138: CALL_OW 69
33142: PUSH
33143: FOR_IN
33144: IFFALSE 33198
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
33146: LD_VAR 0 1
33150: PPUSH
33151: CALL_OW 257
33155: PUSH
33156: LD_INT 1
33158: PUSH
33159: LD_INT 2
33161: PUSH
33162: LD_INT 3
33164: PUSH
33165: LD_INT 4
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: IN
33174: IFFALSE 33196
// SetClass ( un , rand ( 1 , 4 ) ) ;
33176: LD_VAR 0 1
33180: PPUSH
33181: LD_INT 1
33183: PPUSH
33184: LD_INT 4
33186: PPUSH
33187: CALL_OW 12
33191: PPUSH
33192: CALL_OW 336
33196: GO 33143
33198: POP
33199: POP
// end ;
33200: PPOPN 1
33202: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
33203: LD_EXP 64
33207: PUSH
33208: LD_EXP 76
33212: AND
33213: IFFALSE 33292
33215: GO 33217
33217: DISABLE
33218: LD_INT 0
33220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
33221: LD_ADDR_VAR 0 1
33225: PUSH
33226: LD_INT 22
33228: PUSH
33229: LD_OWVAR 2
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 21
33240: PUSH
33241: LD_INT 3
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PPUSH
33252: CALL_OW 69
33256: ST_TO_ADDR
// if not tmp then
33257: LD_VAR 0 1
33261: NOT
33262: IFFALSE 33266
// exit ;
33264: GO 33292
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
33266: LD_VAR 0 1
33270: PUSH
33271: LD_INT 1
33273: PPUSH
33274: LD_VAR 0 1
33278: PPUSH
33279: CALL_OW 12
33283: ARRAY
33284: PPUSH
33285: LD_INT 100
33287: PPUSH
33288: CALL_OW 234
// end ;
33292: PPOPN 1
33294: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
33295: LD_EXP 64
33299: PUSH
33300: LD_EXP 78
33304: AND
33305: IFFALSE 33403
33307: GO 33309
33309: DISABLE
33310: LD_INT 0
33312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33313: LD_ADDR_VAR 0 1
33317: PUSH
33318: LD_INT 22
33320: PUSH
33321: LD_OWVAR 2
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 21
33332: PUSH
33333: LD_INT 1
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PPUSH
33344: CALL_OW 69
33348: ST_TO_ADDR
// if not tmp then
33349: LD_VAR 0 1
33353: NOT
33354: IFFALSE 33358
// exit ;
33356: GO 33403
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
33358: LD_VAR 0 1
33362: PUSH
33363: LD_INT 1
33365: PPUSH
33366: LD_VAR 0 1
33370: PPUSH
33371: CALL_OW 12
33375: ARRAY
33376: PPUSH
33377: LD_INT 1
33379: PPUSH
33380: LD_INT 4
33382: PPUSH
33383: CALL_OW 12
33387: PPUSH
33388: LD_INT 3000
33390: PPUSH
33391: LD_INT 9000
33393: PPUSH
33394: CALL_OW 12
33398: PPUSH
33399: CALL_OW 492
// end ;
33403: PPOPN 1
33405: END
// every 0 0$1 trigger StreamModeActive and sDepot do
33406: LD_EXP 64
33410: PUSH
33411: LD_EXP 79
33415: AND
33416: IFFALSE 33436
33418: GO 33420
33420: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
33421: LD_INT 1
33423: PPUSH
33424: LD_OWVAR 2
33428: PPUSH
33429: LD_INT 0
33431: PPUSH
33432: CALL_OW 324
33436: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
33437: LD_EXP 64
33441: PUSH
33442: LD_EXP 80
33446: AND
33447: IFFALSE 33530
33449: GO 33451
33451: DISABLE
33452: LD_INT 0
33454: PPUSH
33455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
33456: LD_ADDR_VAR 0 2
33460: PUSH
33461: LD_INT 22
33463: PUSH
33464: LD_OWVAR 2
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 21
33475: PUSH
33476: LD_INT 3
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PPUSH
33487: CALL_OW 69
33491: ST_TO_ADDR
// if not tmp then
33492: LD_VAR 0 2
33496: NOT
33497: IFFALSE 33501
// exit ;
33499: GO 33530
// for i in tmp do
33501: LD_ADDR_VAR 0 1
33505: PUSH
33506: LD_VAR 0 2
33510: PUSH
33511: FOR_IN
33512: IFFALSE 33528
// SetBLevel ( i , 10 ) ;
33514: LD_VAR 0 1
33518: PPUSH
33519: LD_INT 10
33521: PPUSH
33522: CALL_OW 241
33526: GO 33511
33528: POP
33529: POP
// end ;
33530: PPOPN 2
33532: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
33533: LD_EXP 64
33537: PUSH
33538: LD_EXP 81
33542: AND
33543: IFFALSE 33654
33545: GO 33547
33547: DISABLE
33548: LD_INT 0
33550: PPUSH
33551: PPUSH
33552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33553: LD_ADDR_VAR 0 3
33557: PUSH
33558: LD_INT 22
33560: PUSH
33561: LD_OWVAR 2
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 25
33572: PUSH
33573: LD_INT 1
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PPUSH
33584: CALL_OW 69
33588: ST_TO_ADDR
// if not tmp then
33589: LD_VAR 0 3
33593: NOT
33594: IFFALSE 33598
// exit ;
33596: GO 33654
// un := tmp [ rand ( 1 , tmp ) ] ;
33598: LD_ADDR_VAR 0 2
33602: PUSH
33603: LD_VAR 0 3
33607: PUSH
33608: LD_INT 1
33610: PPUSH
33611: LD_VAR 0 3
33615: PPUSH
33616: CALL_OW 12
33620: ARRAY
33621: ST_TO_ADDR
// if Crawls ( un ) then
33622: LD_VAR 0 2
33626: PPUSH
33627: CALL_OW 318
33631: IFFALSE 33642
// ComWalk ( un ) ;
33633: LD_VAR 0 2
33637: PPUSH
33638: CALL_OW 138
// SetClass ( un , class_sniper ) ;
33642: LD_VAR 0 2
33646: PPUSH
33647: LD_INT 5
33649: PPUSH
33650: CALL_OW 336
// end ;
33654: PPOPN 3
33656: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
33657: LD_EXP 64
33661: PUSH
33662: LD_EXP 82
33666: AND
33667: PUSH
33668: LD_OWVAR 67
33672: PUSH
33673: LD_INT 3
33675: LESS
33676: AND
33677: IFFALSE 33696
33679: GO 33681
33681: DISABLE
// Difficulty := Difficulty + 1 ;
33682: LD_ADDR_OWVAR 67
33686: PUSH
33687: LD_OWVAR 67
33691: PUSH
33692: LD_INT 1
33694: PLUS
33695: ST_TO_ADDR
33696: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
33697: LD_EXP 64
33701: PUSH
33702: LD_EXP 83
33706: AND
33707: IFFALSE 33810
33709: GO 33711
33711: DISABLE
33712: LD_INT 0
33714: PPUSH
// begin for i := 1 to 5 do
33715: LD_ADDR_VAR 0 1
33719: PUSH
33720: DOUBLE
33721: LD_INT 1
33723: DEC
33724: ST_TO_ADDR
33725: LD_INT 5
33727: PUSH
33728: FOR_TO
33729: IFFALSE 33808
// begin uc_nation := nation_nature ;
33731: LD_ADDR_OWVAR 21
33735: PUSH
33736: LD_INT 0
33738: ST_TO_ADDR
// uc_side := 0 ;
33739: LD_ADDR_OWVAR 20
33743: PUSH
33744: LD_INT 0
33746: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
33747: LD_ADDR_OWVAR 29
33751: PUSH
33752: LD_INT 12
33754: PUSH
33755: LD_INT 12
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: ST_TO_ADDR
// hc_agressivity := 20 ;
33762: LD_ADDR_OWVAR 35
33766: PUSH
33767: LD_INT 20
33769: ST_TO_ADDR
// hc_class := class_tiger ;
33770: LD_ADDR_OWVAR 28
33774: PUSH
33775: LD_INT 14
33777: ST_TO_ADDR
// hc_gallery :=  ;
33778: LD_ADDR_OWVAR 33
33782: PUSH
33783: LD_STRING 
33785: ST_TO_ADDR
// hc_name :=  ;
33786: LD_ADDR_OWVAR 26
33790: PUSH
33791: LD_STRING 
33793: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
33794: CALL_OW 44
33798: PPUSH
33799: LD_INT 0
33801: PPUSH
33802: CALL_OW 51
// end ;
33806: GO 33728
33808: POP
33809: POP
// end ;
33810: PPOPN 1
33812: END
// every 0 0$1 trigger StreamModeActive and sBomb do
33813: LD_EXP 64
33817: PUSH
33818: LD_EXP 84
33822: AND
33823: IFFALSE 33832
33825: GO 33827
33827: DISABLE
// StreamSibBomb ;
33828: CALL 33833 0 0
33832: END
// export function StreamSibBomb ; var i , x , y ; begin
33833: LD_INT 0
33835: PPUSH
33836: PPUSH
33837: PPUSH
33838: PPUSH
// result := false ;
33839: LD_ADDR_VAR 0 1
33843: PUSH
33844: LD_INT 0
33846: ST_TO_ADDR
// for i := 1 to 16 do
33847: LD_ADDR_VAR 0 2
33851: PUSH
33852: DOUBLE
33853: LD_INT 1
33855: DEC
33856: ST_TO_ADDR
33857: LD_INT 16
33859: PUSH
33860: FOR_TO
33861: IFFALSE 34060
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
33863: LD_ADDR_VAR 0 3
33867: PUSH
33868: LD_INT 10
33870: PUSH
33871: LD_INT 20
33873: PUSH
33874: LD_INT 30
33876: PUSH
33877: LD_INT 40
33879: PUSH
33880: LD_INT 50
33882: PUSH
33883: LD_INT 60
33885: PUSH
33886: LD_INT 70
33888: PUSH
33889: LD_INT 80
33891: PUSH
33892: LD_INT 90
33894: PUSH
33895: LD_INT 100
33897: PUSH
33898: LD_INT 110
33900: PUSH
33901: LD_INT 120
33903: PUSH
33904: LD_INT 130
33906: PUSH
33907: LD_INT 140
33909: PUSH
33910: LD_INT 150
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 1
33932: PPUSH
33933: LD_INT 15
33935: PPUSH
33936: CALL_OW 12
33940: ARRAY
33941: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
33942: LD_ADDR_VAR 0 4
33946: PUSH
33947: LD_INT 10
33949: PUSH
33950: LD_INT 20
33952: PUSH
33953: LD_INT 30
33955: PUSH
33956: LD_INT 40
33958: PUSH
33959: LD_INT 50
33961: PUSH
33962: LD_INT 60
33964: PUSH
33965: LD_INT 70
33967: PUSH
33968: LD_INT 80
33970: PUSH
33971: LD_INT 90
33973: PUSH
33974: LD_INT 100
33976: PUSH
33977: LD_INT 110
33979: PUSH
33980: LD_INT 120
33982: PUSH
33983: LD_INT 130
33985: PUSH
33986: LD_INT 140
33988: PUSH
33989: LD_INT 150
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: PPUSH
34012: LD_INT 15
34014: PPUSH
34015: CALL_OW 12
34019: ARRAY
34020: ST_TO_ADDR
// if ValidHex ( x , y ) then
34021: LD_VAR 0 3
34025: PPUSH
34026: LD_VAR 0 4
34030: PPUSH
34031: CALL_OW 488
34035: IFFALSE 34058
// begin result := [ x , y ] ;
34037: LD_ADDR_VAR 0 1
34041: PUSH
34042: LD_VAR 0 3
34046: PUSH
34047: LD_VAR 0 4
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: ST_TO_ADDR
// break ;
34056: GO 34060
// end ; end ;
34058: GO 33860
34060: POP
34061: POP
// if result then
34062: LD_VAR 0 1
34066: IFFALSE 34126
// begin ToLua ( playSibBomb() ) ;
34068: LD_STRING playSibBomb()
34070: PPUSH
34071: CALL_OW 559
// wait ( 0 0$14 ) ;
34075: LD_INT 490
34077: PPUSH
34078: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
34082: LD_VAR 0 1
34086: PUSH
34087: LD_INT 1
34089: ARRAY
34090: PPUSH
34091: LD_VAR 0 1
34095: PUSH
34096: LD_INT 2
34098: ARRAY
34099: PPUSH
34100: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
34104: LD_VAR 0 1
34108: PUSH
34109: LD_INT 1
34111: ARRAY
34112: PPUSH
34113: LD_VAR 0 1
34117: PUSH
34118: LD_INT 2
34120: ARRAY
34121: PPUSH
34122: CALL_OW 429
// end ; end ;
34126: LD_VAR 0 1
34130: RET
// every 0 0$1 trigger StreamModeActive and sReset do
34131: LD_EXP 64
34135: PUSH
34136: LD_EXP 86
34140: AND
34141: IFFALSE 34153
34143: GO 34145
34145: DISABLE
// YouLost (  ) ;
34146: LD_STRING 
34148: PPUSH
34149: CALL_OW 104
34153: END
// every 0 0$1 trigger StreamModeActive and sFog do
34154: LD_EXP 64
34158: PUSH
34159: LD_EXP 85
34163: AND
34164: IFFALSE 34178
34166: GO 34168
34168: DISABLE
// FogOff ( your_side ) ;
34169: LD_OWVAR 2
34173: PPUSH
34174: CALL_OW 344
34178: END
// every 0 0$1 trigger StreamModeActive and sSun do
34179: LD_EXP 64
34183: PUSH
34184: LD_EXP 87
34188: AND
34189: IFFALSE 34217
34191: GO 34193
34193: DISABLE
// begin solar_recharge_percent := 0 ;
34194: LD_ADDR_OWVAR 79
34198: PUSH
34199: LD_INT 0
34201: ST_TO_ADDR
// wait ( 5 5$00 ) ;
34202: LD_INT 10500
34204: PPUSH
34205: CALL_OW 67
// solar_recharge_percent := 100 ;
34209: LD_ADDR_OWVAR 79
34213: PUSH
34214: LD_INT 100
34216: ST_TO_ADDR
// end ;
34217: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
34218: LD_EXP 64
34222: PUSH
34223: LD_EXP 88
34227: AND
34228: IFFALSE 34467
34230: GO 34232
34232: DISABLE
34233: LD_INT 0
34235: PPUSH
34236: PPUSH
34237: PPUSH
// begin tmp := [ ] ;
34238: LD_ADDR_VAR 0 3
34242: PUSH
34243: EMPTY
34244: ST_TO_ADDR
// for i := 1 to 6 do
34245: LD_ADDR_VAR 0 1
34249: PUSH
34250: DOUBLE
34251: LD_INT 1
34253: DEC
34254: ST_TO_ADDR
34255: LD_INT 6
34257: PUSH
34258: FOR_TO
34259: IFFALSE 34364
// begin uc_nation := nation_nature ;
34261: LD_ADDR_OWVAR 21
34265: PUSH
34266: LD_INT 0
34268: ST_TO_ADDR
// uc_side := 0 ;
34269: LD_ADDR_OWVAR 20
34273: PUSH
34274: LD_INT 0
34276: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34277: LD_ADDR_OWVAR 29
34281: PUSH
34282: LD_INT 12
34284: PUSH
34285: LD_INT 12
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: ST_TO_ADDR
// hc_agressivity := 20 ;
34292: LD_ADDR_OWVAR 35
34296: PUSH
34297: LD_INT 20
34299: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
34300: LD_ADDR_OWVAR 28
34304: PUSH
34305: LD_INT 17
34307: ST_TO_ADDR
// hc_gallery :=  ;
34308: LD_ADDR_OWVAR 33
34312: PUSH
34313: LD_STRING 
34315: ST_TO_ADDR
// hc_name :=  ;
34316: LD_ADDR_OWVAR 26
34320: PUSH
34321: LD_STRING 
34323: ST_TO_ADDR
// un := CreateHuman ;
34324: LD_ADDR_VAR 0 2
34328: PUSH
34329: CALL_OW 44
34333: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
34334: LD_VAR 0 2
34338: PPUSH
34339: LD_INT 1
34341: PPUSH
34342: CALL_OW 51
// tmp := tmp ^ un ;
34346: LD_ADDR_VAR 0 3
34350: PUSH
34351: LD_VAR 0 3
34355: PUSH
34356: LD_VAR 0 2
34360: ADD
34361: ST_TO_ADDR
// end ;
34362: GO 34258
34364: POP
34365: POP
// repeat wait ( 0 0$1 ) ;
34366: LD_INT 35
34368: PPUSH
34369: CALL_OW 67
// for un in tmp do
34373: LD_ADDR_VAR 0 2
34377: PUSH
34378: LD_VAR 0 3
34382: PUSH
34383: FOR_IN
34384: IFFALSE 34458
// begin if IsDead ( un ) then
34386: LD_VAR 0 2
34390: PPUSH
34391: CALL_OW 301
34395: IFFALSE 34415
// begin tmp := tmp diff un ;
34397: LD_ADDR_VAR 0 3
34401: PUSH
34402: LD_VAR 0 3
34406: PUSH
34407: LD_VAR 0 2
34411: DIFF
34412: ST_TO_ADDR
// continue ;
34413: GO 34383
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
34415: LD_VAR 0 2
34419: PPUSH
34420: LD_INT 3
34422: PUSH
34423: LD_INT 22
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PPUSH
34437: CALL_OW 69
34441: PPUSH
34442: LD_VAR 0 2
34446: PPUSH
34447: CALL_OW 74
34451: PPUSH
34452: CALL_OW 115
// end ;
34456: GO 34383
34458: POP
34459: POP
// until not tmp ;
34460: LD_VAR 0 3
34464: NOT
34465: IFFALSE 34366
// end ;
34467: PPOPN 3
34469: END
// every 0 0$1 trigger StreamModeActive and sTroll do
34470: LD_EXP 64
34474: PUSH
34475: LD_EXP 89
34479: AND
34480: IFFALSE 34534
34482: GO 34484
34484: DISABLE
// begin ToLua ( displayTroll(); ) ;
34485: LD_STRING displayTroll();
34487: PPUSH
34488: CALL_OW 559
// wait ( 3 3$00 ) ;
34492: LD_INT 6300
34494: PPUSH
34495: CALL_OW 67
// ToLua ( hideTroll(); ) ;
34499: LD_STRING hideTroll();
34501: PPUSH
34502: CALL_OW 559
// wait ( 1 1$00 ) ;
34506: LD_INT 2100
34508: PPUSH
34509: CALL_OW 67
// ToLua ( displayTroll(); ) ;
34513: LD_STRING displayTroll();
34515: PPUSH
34516: CALL_OW 559
// wait ( 1 1$00 ) ;
34520: LD_INT 2100
34522: PPUSH
34523: CALL_OW 67
// ToLua ( hideTroll(); ) ;
34527: LD_STRING hideTroll();
34529: PPUSH
34530: CALL_OW 559
// end ;
34534: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
34535: LD_EXP 64
34539: PUSH
34540: LD_EXP 90
34544: AND
34545: IFFALSE 34608
34547: GO 34549
34549: DISABLE
34550: LD_INT 0
34552: PPUSH
// begin p := 0 ;
34553: LD_ADDR_VAR 0 1
34557: PUSH
34558: LD_INT 0
34560: ST_TO_ADDR
// repeat game_speed := 1 ;
34561: LD_ADDR_OWVAR 65
34565: PUSH
34566: LD_INT 1
34568: ST_TO_ADDR
// wait ( 0 0$1 ) ;
34569: LD_INT 35
34571: PPUSH
34572: CALL_OW 67
// p := p + 1 ;
34576: LD_ADDR_VAR 0 1
34580: PUSH
34581: LD_VAR 0 1
34585: PUSH
34586: LD_INT 1
34588: PLUS
34589: ST_TO_ADDR
// until p >= 60 ;
34590: LD_VAR 0 1
34594: PUSH
34595: LD_INT 60
34597: GREATEREQUAL
34598: IFFALSE 34561
// game_speed := 4 ;
34600: LD_ADDR_OWVAR 65
34604: PUSH
34605: LD_INT 4
34607: ST_TO_ADDR
// end ;
34608: PPOPN 1
34610: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
34611: LD_EXP 64
34615: PUSH
34616: LD_EXP 91
34620: AND
34621: IFFALSE 34767
34623: GO 34625
34625: DISABLE
34626: LD_INT 0
34628: PPUSH
34629: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34630: LD_ADDR_VAR 0 1
34634: PUSH
34635: LD_INT 22
34637: PUSH
34638: LD_OWVAR 2
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: LD_INT 30
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 30
34662: PUSH
34663: LD_INT 1
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: LIST
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PPUSH
34679: CALL_OW 69
34683: ST_TO_ADDR
// if not depot then
34684: LD_VAR 0 1
34688: NOT
34689: IFFALSE 34693
// exit ;
34691: GO 34767
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
34693: LD_ADDR_VAR 0 2
34697: PUSH
34698: LD_VAR 0 1
34702: PUSH
34703: LD_INT 1
34705: PPUSH
34706: LD_VAR 0 1
34710: PPUSH
34711: CALL_OW 12
34715: ARRAY
34716: PPUSH
34717: CALL_OW 274
34721: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
34722: LD_VAR 0 2
34726: PPUSH
34727: LD_INT 1
34729: PPUSH
34730: LD_INT 0
34732: PPUSH
34733: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
34737: LD_VAR 0 2
34741: PPUSH
34742: LD_INT 2
34744: PPUSH
34745: LD_INT 0
34747: PPUSH
34748: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
34752: LD_VAR 0 2
34756: PPUSH
34757: LD_INT 3
34759: PPUSH
34760: LD_INT 0
34762: PPUSH
34763: CALL_OW 277
// end ;
34767: PPOPN 2
34769: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
34770: LD_EXP 64
34774: PUSH
34775: LD_EXP 92
34779: AND
34780: IFFALSE 34877
34782: GO 34784
34784: DISABLE
34785: LD_INT 0
34787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34788: LD_ADDR_VAR 0 1
34792: PUSH
34793: LD_INT 22
34795: PUSH
34796: LD_OWVAR 2
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 21
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 3
34817: PUSH
34818: LD_INT 23
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: LIST
34836: PPUSH
34837: CALL_OW 69
34841: ST_TO_ADDR
// if not tmp then
34842: LD_VAR 0 1
34846: NOT
34847: IFFALSE 34851
// exit ;
34849: GO 34877
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
34851: LD_VAR 0 1
34855: PUSH
34856: LD_INT 1
34858: PPUSH
34859: LD_VAR 0 1
34863: PPUSH
34864: CALL_OW 12
34868: ARRAY
34869: PPUSH
34870: LD_INT 200
34872: PPUSH
34873: CALL_OW 234
// end ;
34877: PPOPN 1
34879: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
34880: LD_EXP 64
34884: PUSH
34885: LD_EXP 93
34889: AND
34890: IFFALSE 34969
34892: GO 34894
34894: DISABLE
34895: LD_INT 0
34897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
34898: LD_ADDR_VAR 0 1
34902: PUSH
34903: LD_INT 22
34905: PUSH
34906: LD_OWVAR 2
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 21
34917: PUSH
34918: LD_INT 2
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PPUSH
34929: CALL_OW 69
34933: ST_TO_ADDR
// if not tmp then
34934: LD_VAR 0 1
34938: NOT
34939: IFFALSE 34943
// exit ;
34941: GO 34969
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
34943: LD_VAR 0 1
34947: PUSH
34948: LD_INT 1
34950: PPUSH
34951: LD_VAR 0 1
34955: PPUSH
34956: CALL_OW 12
34960: ARRAY
34961: PPUSH
34962: LD_INT 60
34964: PPUSH
34965: CALL_OW 234
// end ;
34969: PPOPN 1
34971: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
34972: LD_EXP 64
34976: PUSH
34977: LD_EXP 94
34981: AND
34982: IFFALSE 35081
34984: GO 34986
34986: DISABLE
34987: LD_INT 0
34989: PPUSH
34990: PPUSH
// begin enable ;
34991: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
34992: LD_ADDR_VAR 0 1
34996: PUSH
34997: LD_INT 22
34999: PUSH
35000: LD_OWVAR 2
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 61
35011: PUSH
35012: EMPTY
35013: LIST
35014: PUSH
35015: LD_INT 33
35017: PUSH
35018: LD_INT 2
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: LIST
35029: PPUSH
35030: CALL_OW 69
35034: ST_TO_ADDR
// if not tmp then
35035: LD_VAR 0 1
35039: NOT
35040: IFFALSE 35044
// exit ;
35042: GO 35081
// for i in tmp do
35044: LD_ADDR_VAR 0 2
35048: PUSH
35049: LD_VAR 0 1
35053: PUSH
35054: FOR_IN
35055: IFFALSE 35079
// if IsControledBy ( i ) then
35057: LD_VAR 0 2
35061: PPUSH
35062: CALL_OW 312
35066: IFFALSE 35077
// ComUnlink ( i ) ;
35068: LD_VAR 0 2
35072: PPUSH
35073: CALL_OW 136
35077: GO 35054
35079: POP
35080: POP
// end ;
35081: PPOPN 2
35083: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
35084: LD_EXP 64
35088: PUSH
35089: LD_EXP 95
35093: AND
35094: IFFALSE 35234
35096: GO 35098
35098: DISABLE
35099: LD_INT 0
35101: PPUSH
35102: PPUSH
// begin ToLua ( displayPowell(); ) ;
35103: LD_STRING displayPowell();
35105: PPUSH
35106: CALL_OW 559
// uc_side := 0 ;
35110: LD_ADDR_OWVAR 20
35114: PUSH
35115: LD_INT 0
35117: ST_TO_ADDR
// uc_nation := 2 ;
35118: LD_ADDR_OWVAR 21
35122: PUSH
35123: LD_INT 2
35125: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
35126: LD_ADDR_OWVAR 37
35130: PUSH
35131: LD_INT 14
35133: ST_TO_ADDR
// vc_engine := engine_siberite ;
35134: LD_ADDR_OWVAR 39
35138: PUSH
35139: LD_INT 3
35141: ST_TO_ADDR
// vc_control := control_apeman ;
35142: LD_ADDR_OWVAR 38
35146: PUSH
35147: LD_INT 5
35149: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
35150: LD_ADDR_OWVAR 40
35154: PUSH
35155: LD_INT 29
35157: ST_TO_ADDR
// un := CreateVehicle ;
35158: LD_ADDR_VAR 0 2
35162: PUSH
35163: CALL_OW 45
35167: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35168: LD_VAR 0 2
35172: PPUSH
35173: LD_INT 1
35175: PPUSH
35176: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
35180: LD_INT 35
35182: PPUSH
35183: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
35187: LD_VAR 0 2
35191: PPUSH
35192: LD_INT 22
35194: PUSH
35195: LD_OWVAR 2
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PPUSH
35204: CALL_OW 69
35208: PPUSH
35209: LD_VAR 0 2
35213: PPUSH
35214: CALL_OW 74
35218: PPUSH
35219: CALL_OW 115
// until IsDead ( un ) ;
35223: LD_VAR 0 2
35227: PPUSH
35228: CALL_OW 301
35232: IFFALSE 35180
// end ;
35234: PPOPN 2
35236: END
// every 0 0$1 trigger StreamModeActive and sStu do
35237: LD_EXP 64
35241: PUSH
35242: LD_EXP 103
35246: AND
35247: IFFALSE 35263
35249: GO 35251
35251: DISABLE
// begin ToLua ( displayStucuk(); ) ;
35252: LD_STRING displayStucuk();
35254: PPUSH
35255: CALL_OW 559
// ResetFog ;
35259: CALL_OW 335
// end ;
35263: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
35264: LD_EXP 64
35268: PUSH
35269: LD_EXP 96
35273: AND
35274: IFFALSE 35415
35276: GO 35278
35278: DISABLE
35279: LD_INT 0
35281: PPUSH
35282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35283: LD_ADDR_VAR 0 2
35287: PUSH
35288: LD_INT 22
35290: PUSH
35291: LD_OWVAR 2
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 21
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PPUSH
35314: CALL_OW 69
35318: ST_TO_ADDR
// if not tmp then
35319: LD_VAR 0 2
35323: NOT
35324: IFFALSE 35328
// exit ;
35326: GO 35415
// un := tmp [ rand ( 1 , tmp ) ] ;
35328: LD_ADDR_VAR 0 1
35332: PUSH
35333: LD_VAR 0 2
35337: PUSH
35338: LD_INT 1
35340: PPUSH
35341: LD_VAR 0 2
35345: PPUSH
35346: CALL_OW 12
35350: ARRAY
35351: ST_TO_ADDR
// SetSide ( un , 0 ) ;
35352: LD_VAR 0 1
35356: PPUSH
35357: LD_INT 0
35359: PPUSH
35360: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
35364: LD_VAR 0 1
35368: PPUSH
35369: LD_OWVAR 3
35373: PUSH
35374: LD_VAR 0 1
35378: DIFF
35379: PPUSH
35380: LD_VAR 0 1
35384: PPUSH
35385: CALL_OW 74
35389: PPUSH
35390: CALL_OW 115
// wait ( 0 0$20 ) ;
35394: LD_INT 700
35396: PPUSH
35397: CALL_OW 67
// SetSide ( un , your_side ) ;
35401: LD_VAR 0 1
35405: PPUSH
35406: LD_OWVAR 2
35410: PPUSH
35411: CALL_OW 235
// end ;
35415: PPOPN 2
35417: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
35418: LD_EXP 64
35422: PUSH
35423: LD_EXP 97
35427: AND
35428: IFFALSE 35534
35430: GO 35432
35432: DISABLE
35433: LD_INT 0
35435: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35436: LD_ADDR_VAR 0 1
35440: PUSH
35441: LD_INT 22
35443: PUSH
35444: LD_OWVAR 2
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 2
35455: PUSH
35456: LD_INT 30
35458: PUSH
35459: LD_INT 0
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 30
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: LIST
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PPUSH
35485: CALL_OW 69
35489: ST_TO_ADDR
// if not depot then
35490: LD_VAR 0 1
35494: NOT
35495: IFFALSE 35499
// exit ;
35497: GO 35534
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
35499: LD_VAR 0 1
35503: PUSH
35504: LD_INT 1
35506: ARRAY
35507: PPUSH
35508: CALL_OW 250
35512: PPUSH
35513: LD_VAR 0 1
35517: PUSH
35518: LD_INT 1
35520: ARRAY
35521: PPUSH
35522: CALL_OW 251
35526: PPUSH
35527: LD_INT 70
35529: PPUSH
35530: CALL_OW 495
// end ;
35534: PPOPN 1
35536: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
35537: LD_EXP 64
35541: PUSH
35542: LD_EXP 98
35546: AND
35547: IFFALSE 35758
35549: GO 35551
35551: DISABLE
35552: LD_INT 0
35554: PPUSH
35555: PPUSH
35556: PPUSH
35557: PPUSH
35558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35559: LD_ADDR_VAR 0 5
35563: PUSH
35564: LD_INT 22
35566: PUSH
35567: LD_OWVAR 2
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 21
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PPUSH
35590: CALL_OW 69
35594: ST_TO_ADDR
// if not tmp then
35595: LD_VAR 0 5
35599: NOT
35600: IFFALSE 35604
// exit ;
35602: GO 35758
// for i in tmp do
35604: LD_ADDR_VAR 0 1
35608: PUSH
35609: LD_VAR 0 5
35613: PUSH
35614: FOR_IN
35615: IFFALSE 35756
// begin d := rand ( 0 , 5 ) ;
35617: LD_ADDR_VAR 0 4
35621: PUSH
35622: LD_INT 0
35624: PPUSH
35625: LD_INT 5
35627: PPUSH
35628: CALL_OW 12
35632: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
35633: LD_ADDR_VAR 0 2
35637: PUSH
35638: LD_VAR 0 1
35642: PPUSH
35643: CALL_OW 250
35647: PPUSH
35648: LD_VAR 0 4
35652: PPUSH
35653: LD_INT 3
35655: PPUSH
35656: LD_INT 12
35658: PPUSH
35659: CALL_OW 12
35663: PPUSH
35664: CALL_OW 272
35668: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
35669: LD_ADDR_VAR 0 3
35673: PUSH
35674: LD_VAR 0 1
35678: PPUSH
35679: CALL_OW 251
35683: PPUSH
35684: LD_VAR 0 4
35688: PPUSH
35689: LD_INT 3
35691: PPUSH
35692: LD_INT 12
35694: PPUSH
35695: CALL_OW 12
35699: PPUSH
35700: CALL_OW 273
35704: ST_TO_ADDR
// if ValidHex ( x , y ) then
35705: LD_VAR 0 2
35709: PPUSH
35710: LD_VAR 0 3
35714: PPUSH
35715: CALL_OW 488
35719: IFFALSE 35754
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
35721: LD_VAR 0 1
35725: PPUSH
35726: LD_VAR 0 2
35730: PPUSH
35731: LD_VAR 0 3
35735: PPUSH
35736: LD_INT 3
35738: PPUSH
35739: LD_INT 6
35741: PPUSH
35742: CALL_OW 12
35746: PPUSH
35747: LD_INT 1
35749: PPUSH
35750: CALL_OW 483
// end ;
35754: GO 35614
35756: POP
35757: POP
// end ;
35758: PPOPN 5
35760: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
35761: LD_EXP 64
35765: PUSH
35766: LD_EXP 99
35770: AND
35771: IFFALSE 35865
35773: GO 35775
35775: DISABLE
35776: LD_INT 0
35778: PPUSH
35779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
35780: LD_ADDR_VAR 0 2
35784: PUSH
35785: LD_INT 22
35787: PUSH
35788: LD_OWVAR 2
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 32
35799: PUSH
35800: LD_INT 1
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 21
35809: PUSH
35810: LD_INT 2
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: LIST
35821: PPUSH
35822: CALL_OW 69
35826: ST_TO_ADDR
// if not tmp then
35827: LD_VAR 0 2
35831: NOT
35832: IFFALSE 35836
// exit ;
35834: GO 35865
// for i in tmp do
35836: LD_ADDR_VAR 0 1
35840: PUSH
35841: LD_VAR 0 2
35845: PUSH
35846: FOR_IN
35847: IFFALSE 35863
// SetFuel ( i , 0 ) ;
35849: LD_VAR 0 1
35853: PPUSH
35854: LD_INT 0
35856: PPUSH
35857: CALL_OW 240
35861: GO 35846
35863: POP
35864: POP
// end ;
35865: PPOPN 2
35867: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
35868: LD_EXP 64
35872: PUSH
35873: LD_EXP 100
35877: AND
35878: IFFALSE 35944
35880: GO 35882
35882: DISABLE
35883: LD_INT 0
35885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
35886: LD_ADDR_VAR 0 1
35890: PUSH
35891: LD_INT 22
35893: PUSH
35894: LD_OWVAR 2
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 30
35905: PUSH
35906: LD_INT 29
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PPUSH
35917: CALL_OW 69
35921: ST_TO_ADDR
// if not tmp then
35922: LD_VAR 0 1
35926: NOT
35927: IFFALSE 35931
// exit ;
35929: GO 35944
// DestroyUnit ( tmp [ 1 ] ) ;
35931: LD_VAR 0 1
35935: PUSH
35936: LD_INT 1
35938: ARRAY
35939: PPUSH
35940: CALL_OW 65
// end ;
35944: PPOPN 1
35946: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
35947: LD_EXP 64
35951: PUSH
35952: LD_EXP 102
35956: AND
35957: IFFALSE 36086
35959: GO 35961
35961: DISABLE
35962: LD_INT 0
35964: PPUSH
// begin uc_side := 0 ;
35965: LD_ADDR_OWVAR 20
35969: PUSH
35970: LD_INT 0
35972: ST_TO_ADDR
// uc_nation := nation_arabian ;
35973: LD_ADDR_OWVAR 21
35977: PUSH
35978: LD_INT 2
35980: ST_TO_ADDR
// hc_gallery :=  ;
35981: LD_ADDR_OWVAR 33
35985: PUSH
35986: LD_STRING 
35988: ST_TO_ADDR
// hc_name :=  ;
35989: LD_ADDR_OWVAR 26
35993: PUSH
35994: LD_STRING 
35996: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
35997: LD_INT 1
35999: PPUSH
36000: LD_INT 11
36002: PPUSH
36003: LD_INT 10
36005: PPUSH
36006: CALL_OW 380
// un := CreateHuman ;
36010: LD_ADDR_VAR 0 1
36014: PUSH
36015: CALL_OW 44
36019: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36020: LD_VAR 0 1
36024: PPUSH
36025: LD_INT 1
36027: PPUSH
36028: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
36032: LD_INT 35
36034: PPUSH
36035: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36039: LD_VAR 0 1
36043: PPUSH
36044: LD_INT 22
36046: PUSH
36047: LD_OWVAR 2
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PPUSH
36056: CALL_OW 69
36060: PPUSH
36061: LD_VAR 0 1
36065: PPUSH
36066: CALL_OW 74
36070: PPUSH
36071: CALL_OW 115
// until IsDead ( un ) ;
36075: LD_VAR 0 1
36079: PPUSH
36080: CALL_OW 301
36084: IFFALSE 36032
// end ;
36086: PPOPN 1
36088: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
36089: LD_EXP 64
36093: PUSH
36094: LD_EXP 104
36098: AND
36099: IFFALSE 36111
36101: GO 36103
36103: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
36104: LD_STRING earthquake(getX(game), 0, 32)
36106: PPUSH
36107: CALL_OW 559
36111: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
36112: LD_EXP 64
36116: PUSH
36117: LD_EXP 105
36121: AND
36122: IFFALSE 36213
36124: GO 36126
36126: DISABLE
36127: LD_INT 0
36129: PPUSH
// begin enable ;
36130: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
36131: LD_ADDR_VAR 0 1
36135: PUSH
36136: LD_INT 22
36138: PUSH
36139: LD_OWVAR 2
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 21
36150: PUSH
36151: LD_INT 2
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 33
36160: PUSH
36161: LD_INT 3
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: LIST
36172: PPUSH
36173: CALL_OW 69
36177: ST_TO_ADDR
// if not tmp then
36178: LD_VAR 0 1
36182: NOT
36183: IFFALSE 36187
// exit ;
36185: GO 36213
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
36187: LD_VAR 0 1
36191: PUSH
36192: LD_INT 1
36194: PPUSH
36195: LD_VAR 0 1
36199: PPUSH
36200: CALL_OW 12
36204: ARRAY
36205: PPUSH
36206: LD_INT 1
36208: PPUSH
36209: CALL_OW 234
// end ;
36213: PPOPN 1
36215: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
36216: LD_EXP 64
36220: PUSH
36221: LD_EXP 106
36225: AND
36226: IFFALSE 36367
36228: GO 36230
36230: DISABLE
36231: LD_INT 0
36233: PPUSH
36234: PPUSH
36235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36236: LD_ADDR_VAR 0 3
36240: PUSH
36241: LD_INT 22
36243: PUSH
36244: LD_OWVAR 2
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 25
36255: PUSH
36256: LD_INT 1
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PPUSH
36267: CALL_OW 69
36271: ST_TO_ADDR
// if not tmp then
36272: LD_VAR 0 3
36276: NOT
36277: IFFALSE 36281
// exit ;
36279: GO 36367
// un := tmp [ rand ( 1 , tmp ) ] ;
36281: LD_ADDR_VAR 0 2
36285: PUSH
36286: LD_VAR 0 3
36290: PUSH
36291: LD_INT 1
36293: PPUSH
36294: LD_VAR 0 3
36298: PPUSH
36299: CALL_OW 12
36303: ARRAY
36304: ST_TO_ADDR
// if Crawls ( un ) then
36305: LD_VAR 0 2
36309: PPUSH
36310: CALL_OW 318
36314: IFFALSE 36325
// ComWalk ( un ) ;
36316: LD_VAR 0 2
36320: PPUSH
36321: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
36325: LD_VAR 0 2
36329: PPUSH
36330: LD_INT 9
36332: PPUSH
36333: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
36337: LD_INT 28
36339: PPUSH
36340: LD_OWVAR 2
36344: PPUSH
36345: LD_INT 2
36347: PPUSH
36348: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
36352: LD_INT 29
36354: PPUSH
36355: LD_OWVAR 2
36359: PPUSH
36360: LD_INT 2
36362: PPUSH
36363: CALL_OW 322
// end ;
36367: PPOPN 3
36369: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
36370: LD_EXP 64
36374: PUSH
36375: LD_EXP 107
36379: AND
36380: IFFALSE 36491
36382: GO 36384
36384: DISABLE
36385: LD_INT 0
36387: PPUSH
36388: PPUSH
36389: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36390: LD_ADDR_VAR 0 3
36394: PUSH
36395: LD_INT 22
36397: PUSH
36398: LD_OWVAR 2
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 25
36409: PUSH
36410: LD_INT 1
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PPUSH
36421: CALL_OW 69
36425: ST_TO_ADDR
// if not tmp then
36426: LD_VAR 0 3
36430: NOT
36431: IFFALSE 36435
// exit ;
36433: GO 36491
// un := tmp [ rand ( 1 , tmp ) ] ;
36435: LD_ADDR_VAR 0 2
36439: PUSH
36440: LD_VAR 0 3
36444: PUSH
36445: LD_INT 1
36447: PPUSH
36448: LD_VAR 0 3
36452: PPUSH
36453: CALL_OW 12
36457: ARRAY
36458: ST_TO_ADDR
// if Crawls ( un ) then
36459: LD_VAR 0 2
36463: PPUSH
36464: CALL_OW 318
36468: IFFALSE 36479
// ComWalk ( un ) ;
36470: LD_VAR 0 2
36474: PPUSH
36475: CALL_OW 138
// SetClass ( un , class_mortar ) ;
36479: LD_VAR 0 2
36483: PPUSH
36484: LD_INT 8
36486: PPUSH
36487: CALL_OW 336
// end ;
36491: PPOPN 3
36493: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
36494: LD_EXP 64
36498: PUSH
36499: LD_EXP 108
36503: AND
36504: IFFALSE 36648
36506: GO 36508
36508: DISABLE
36509: LD_INT 0
36511: PPUSH
36512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
36513: LD_ADDR_VAR 0 2
36517: PUSH
36518: LD_INT 22
36520: PUSH
36521: LD_OWVAR 2
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 21
36532: PUSH
36533: LD_INT 2
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 2
36542: PUSH
36543: LD_INT 34
36545: PUSH
36546: LD_INT 12
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 34
36555: PUSH
36556: LD_INT 51
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 34
36565: PUSH
36566: LD_INT 32
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: LIST
36583: PPUSH
36584: CALL_OW 69
36588: ST_TO_ADDR
// if not tmp then
36589: LD_VAR 0 2
36593: NOT
36594: IFFALSE 36598
// exit ;
36596: GO 36648
// for i in tmp do
36598: LD_ADDR_VAR 0 1
36602: PUSH
36603: LD_VAR 0 2
36607: PUSH
36608: FOR_IN
36609: IFFALSE 36646
// if GetCargo ( i , mat_artifact ) = 0 then
36611: LD_VAR 0 1
36615: PPUSH
36616: LD_INT 4
36618: PPUSH
36619: CALL_OW 289
36623: PUSH
36624: LD_INT 0
36626: EQUAL
36627: IFFALSE 36644
// SetCargo ( i , mat_siberit , 100 ) ;
36629: LD_VAR 0 1
36633: PPUSH
36634: LD_INT 3
36636: PPUSH
36637: LD_INT 100
36639: PPUSH
36640: CALL_OW 290
36644: GO 36608
36646: POP
36647: POP
// end ;
36648: PPOPN 2
36650: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
36651: LD_EXP 64
36655: PUSH
36656: LD_EXP 109
36660: AND
36661: IFFALSE 36844
36663: GO 36665
36665: DISABLE
36666: LD_INT 0
36668: PPUSH
36669: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
36670: LD_ADDR_VAR 0 2
36674: PUSH
36675: LD_INT 22
36677: PUSH
36678: LD_OWVAR 2
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PPUSH
36687: CALL_OW 69
36691: ST_TO_ADDR
// if not tmp then
36692: LD_VAR 0 2
36696: NOT
36697: IFFALSE 36701
// exit ;
36699: GO 36844
// for i := 1 to 2 do
36701: LD_ADDR_VAR 0 1
36705: PUSH
36706: DOUBLE
36707: LD_INT 1
36709: DEC
36710: ST_TO_ADDR
36711: LD_INT 2
36713: PUSH
36714: FOR_TO
36715: IFFALSE 36842
// begin uc_side := your_side ;
36717: LD_ADDR_OWVAR 20
36721: PUSH
36722: LD_OWVAR 2
36726: ST_TO_ADDR
// uc_nation := nation_american ;
36727: LD_ADDR_OWVAR 21
36731: PUSH
36732: LD_INT 1
36734: ST_TO_ADDR
// vc_chassis := us_morphling ;
36735: LD_ADDR_OWVAR 37
36739: PUSH
36740: LD_INT 5
36742: ST_TO_ADDR
// vc_engine := engine_siberite ;
36743: LD_ADDR_OWVAR 39
36747: PUSH
36748: LD_INT 3
36750: ST_TO_ADDR
// vc_control := control_computer ;
36751: LD_ADDR_OWVAR 38
36755: PUSH
36756: LD_INT 3
36758: ST_TO_ADDR
// vc_weapon := us_double_laser ;
36759: LD_ADDR_OWVAR 40
36763: PUSH
36764: LD_INT 10
36766: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
36767: LD_VAR 0 2
36771: PUSH
36772: LD_INT 1
36774: ARRAY
36775: PPUSH
36776: CALL_OW 310
36780: NOT
36781: IFFALSE 36828
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
36783: CALL_OW 45
36787: PPUSH
36788: LD_VAR 0 2
36792: PUSH
36793: LD_INT 1
36795: ARRAY
36796: PPUSH
36797: CALL_OW 250
36801: PPUSH
36802: LD_VAR 0 2
36806: PUSH
36807: LD_INT 1
36809: ARRAY
36810: PPUSH
36811: CALL_OW 251
36815: PPUSH
36816: LD_INT 12
36818: PPUSH
36819: LD_INT 1
36821: PPUSH
36822: CALL_OW 50
36826: GO 36840
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
36828: CALL_OW 45
36832: PPUSH
36833: LD_INT 1
36835: PPUSH
36836: CALL_OW 51
// end ;
36840: GO 36714
36842: POP
36843: POP
// end ;
36844: PPOPN 2
36846: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
36847: LD_EXP 64
36851: PUSH
36852: LD_EXP 110
36856: AND
36857: IFFALSE 37079
36859: GO 36861
36861: DISABLE
36862: LD_INT 0
36864: PPUSH
36865: PPUSH
36866: PPUSH
36867: PPUSH
36868: PPUSH
36869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
36870: LD_ADDR_VAR 0 6
36874: PUSH
36875: LD_INT 22
36877: PUSH
36878: LD_OWVAR 2
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 21
36889: PUSH
36890: LD_INT 1
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 3
36899: PUSH
36900: LD_INT 23
36902: PUSH
36903: LD_INT 0
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: LIST
36918: PPUSH
36919: CALL_OW 69
36923: ST_TO_ADDR
// if not tmp then
36924: LD_VAR 0 6
36928: NOT
36929: IFFALSE 36933
// exit ;
36931: GO 37079
// s1 := rand ( 1 , 4 ) ;
36933: LD_ADDR_VAR 0 2
36937: PUSH
36938: LD_INT 1
36940: PPUSH
36941: LD_INT 4
36943: PPUSH
36944: CALL_OW 12
36948: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
36949: LD_ADDR_VAR 0 4
36953: PUSH
36954: LD_VAR 0 6
36958: PUSH
36959: LD_INT 1
36961: ARRAY
36962: PPUSH
36963: LD_VAR 0 2
36967: PPUSH
36968: CALL_OW 259
36972: ST_TO_ADDR
// if s1 = 1 then
36973: LD_VAR 0 2
36977: PUSH
36978: LD_INT 1
36980: EQUAL
36981: IFFALSE 37001
// s2 := rand ( 2 , 4 ) else
36983: LD_ADDR_VAR 0 3
36987: PUSH
36988: LD_INT 2
36990: PPUSH
36991: LD_INT 4
36993: PPUSH
36994: CALL_OW 12
36998: ST_TO_ADDR
36999: GO 37009
// s2 := 1 ;
37001: LD_ADDR_VAR 0 3
37005: PUSH
37006: LD_INT 1
37008: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
37009: LD_ADDR_VAR 0 5
37013: PUSH
37014: LD_VAR 0 6
37018: PUSH
37019: LD_INT 1
37021: ARRAY
37022: PPUSH
37023: LD_VAR 0 3
37027: PPUSH
37028: CALL_OW 259
37032: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
37033: LD_VAR 0 6
37037: PUSH
37038: LD_INT 1
37040: ARRAY
37041: PPUSH
37042: LD_VAR 0 2
37046: PPUSH
37047: LD_VAR 0 5
37051: PPUSH
37052: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
37056: LD_VAR 0 6
37060: PUSH
37061: LD_INT 1
37063: ARRAY
37064: PPUSH
37065: LD_VAR 0 3
37069: PPUSH
37070: LD_VAR 0 4
37074: PPUSH
37075: CALL_OW 237
// end ;
37079: PPOPN 6
37081: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
37082: LD_EXP 64
37086: PUSH
37087: LD_EXP 111
37091: AND
37092: IFFALSE 37171
37094: GO 37096
37096: DISABLE
37097: LD_INT 0
37099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
37100: LD_ADDR_VAR 0 1
37104: PUSH
37105: LD_INT 22
37107: PUSH
37108: LD_OWVAR 2
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 30
37119: PUSH
37120: LD_INT 3
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PPUSH
37131: CALL_OW 69
37135: ST_TO_ADDR
// if not tmp then
37136: LD_VAR 0 1
37140: NOT
37141: IFFALSE 37145
// exit ;
37143: GO 37171
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37145: LD_VAR 0 1
37149: PUSH
37150: LD_INT 1
37152: PPUSH
37153: LD_VAR 0 1
37157: PPUSH
37158: CALL_OW 12
37162: ARRAY
37163: PPUSH
37164: LD_INT 1
37166: PPUSH
37167: CALL_OW 234
// end ;
37171: PPOPN 1
37173: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
37174: LD_EXP 64
37178: PUSH
37179: LD_EXP 112
37183: AND
37184: IFFALSE 37296
37186: GO 37188
37188: DISABLE
37189: LD_INT 0
37191: PPUSH
37192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
37193: LD_ADDR_VAR 0 2
37197: PUSH
37198: LD_INT 22
37200: PUSH
37201: LD_OWVAR 2
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: LD_INT 30
37215: PUSH
37216: LD_INT 27
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 30
37225: PUSH
37226: LD_INT 26
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 30
37235: PUSH
37236: LD_INT 28
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PPUSH
37253: CALL_OW 69
37257: ST_TO_ADDR
// if not tmp then
37258: LD_VAR 0 2
37262: NOT
37263: IFFALSE 37267
// exit ;
37265: GO 37296
// for i in tmp do
37267: LD_ADDR_VAR 0 1
37271: PUSH
37272: LD_VAR 0 2
37276: PUSH
37277: FOR_IN
37278: IFFALSE 37294
// SetLives ( i , 1 ) ;
37280: LD_VAR 0 1
37284: PPUSH
37285: LD_INT 1
37287: PPUSH
37288: CALL_OW 234
37292: GO 37277
37294: POP
37295: POP
// end ;
37296: PPOPN 2
37298: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
37299: LD_EXP 64
37303: PUSH
37304: LD_EXP 113
37308: AND
37309: IFFALSE 37583
37311: GO 37313
37313: DISABLE
37314: LD_INT 0
37316: PPUSH
37317: PPUSH
37318: PPUSH
// begin i := rand ( 1 , 7 ) ;
37319: LD_ADDR_VAR 0 1
37323: PUSH
37324: LD_INT 1
37326: PPUSH
37327: LD_INT 7
37329: PPUSH
37330: CALL_OW 12
37334: ST_TO_ADDR
// case i of 1 :
37335: LD_VAR 0 1
37339: PUSH
37340: LD_INT 1
37342: DOUBLE
37343: EQUAL
37344: IFTRUE 37348
37346: GO 37358
37348: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
37349: LD_STRING earthquake(getX(game), 0, 32)
37351: PPUSH
37352: CALL_OW 559
37356: GO 37583
37358: LD_INT 2
37360: DOUBLE
37361: EQUAL
37362: IFTRUE 37366
37364: GO 37380
37366: POP
// begin ToLua ( displayStucuk(); ) ;
37367: LD_STRING displayStucuk();
37369: PPUSH
37370: CALL_OW 559
// ResetFog ;
37374: CALL_OW 335
// end ; 3 :
37378: GO 37583
37380: LD_INT 3
37382: DOUBLE
37383: EQUAL
37384: IFTRUE 37388
37386: GO 37492
37388: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37389: LD_ADDR_VAR 0 2
37393: PUSH
37394: LD_INT 22
37396: PUSH
37397: LD_OWVAR 2
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 25
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PPUSH
37420: CALL_OW 69
37424: ST_TO_ADDR
// if not tmp then
37425: LD_VAR 0 2
37429: NOT
37430: IFFALSE 37434
// exit ;
37432: GO 37583
// un := tmp [ rand ( 1 , tmp ) ] ;
37434: LD_ADDR_VAR 0 3
37438: PUSH
37439: LD_VAR 0 2
37443: PUSH
37444: LD_INT 1
37446: PPUSH
37447: LD_VAR 0 2
37451: PPUSH
37452: CALL_OW 12
37456: ARRAY
37457: ST_TO_ADDR
// if Crawls ( un ) then
37458: LD_VAR 0 3
37462: PPUSH
37463: CALL_OW 318
37467: IFFALSE 37478
// ComWalk ( un ) ;
37469: LD_VAR 0 3
37473: PPUSH
37474: CALL_OW 138
// SetClass ( un , class_mortar ) ;
37478: LD_VAR 0 3
37482: PPUSH
37483: LD_INT 8
37485: PPUSH
37486: CALL_OW 336
// end ; 4 :
37490: GO 37583
37492: LD_INT 4
37494: DOUBLE
37495: EQUAL
37496: IFTRUE 37500
37498: GO 37561
37500: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
37501: LD_ADDR_VAR 0 2
37505: PUSH
37506: LD_INT 22
37508: PUSH
37509: LD_OWVAR 2
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 30
37520: PUSH
37521: LD_INT 29
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PPUSH
37532: CALL_OW 69
37536: ST_TO_ADDR
// if not tmp then
37537: LD_VAR 0 2
37541: NOT
37542: IFFALSE 37546
// exit ;
37544: GO 37583
// DestroyUnit ( tmp [ 1 ] ) ;
37546: LD_VAR 0 2
37550: PUSH
37551: LD_INT 1
37553: ARRAY
37554: PPUSH
37555: CALL_OW 65
// end ; 5 .. 7 :
37559: GO 37583
37561: LD_INT 5
37563: DOUBLE
37564: GREATEREQUAL
37565: IFFALSE 37573
37567: LD_INT 7
37569: DOUBLE
37570: LESSEQUAL
37571: IFTRUE 37575
37573: GO 37582
37575: POP
// StreamSibBomb ; end ;
37576: CALL 33833 0 0
37580: GO 37583
37582: POP
// end ;
37583: PPOPN 3
37585: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
37586: LD_EXP 64
37590: PUSH
37591: LD_EXP 114
37595: AND
37596: IFFALSE 37752
37598: GO 37600
37600: DISABLE
37601: LD_INT 0
37603: PPUSH
37604: PPUSH
37605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
37606: LD_ADDR_VAR 0 2
37610: PUSH
37611: LD_INT 81
37613: PUSH
37614: LD_OWVAR 2
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 2
37625: PUSH
37626: LD_INT 21
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 21
37638: PUSH
37639: LD_INT 2
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: LIST
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PPUSH
37655: CALL_OW 69
37659: ST_TO_ADDR
// if not tmp then
37660: LD_VAR 0 2
37664: NOT
37665: IFFALSE 37669
// exit ;
37667: GO 37752
// p := 0 ;
37669: LD_ADDR_VAR 0 3
37673: PUSH
37674: LD_INT 0
37676: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
37677: LD_INT 35
37679: PPUSH
37680: CALL_OW 67
// p := p + 1 ;
37684: LD_ADDR_VAR 0 3
37688: PUSH
37689: LD_VAR 0 3
37693: PUSH
37694: LD_INT 1
37696: PLUS
37697: ST_TO_ADDR
// for i in tmp do
37698: LD_ADDR_VAR 0 1
37702: PUSH
37703: LD_VAR 0 2
37707: PUSH
37708: FOR_IN
37709: IFFALSE 37740
// if GetLives ( i ) < 1000 then
37711: LD_VAR 0 1
37715: PPUSH
37716: CALL_OW 256
37720: PUSH
37721: LD_INT 1000
37723: LESS
37724: IFFALSE 37738
// SetLives ( i , 1000 ) ;
37726: LD_VAR 0 1
37730: PPUSH
37731: LD_INT 1000
37733: PPUSH
37734: CALL_OW 234
37738: GO 37708
37740: POP
37741: POP
// until p > 20 ;
37742: LD_VAR 0 3
37746: PUSH
37747: LD_INT 20
37749: GREATER
37750: IFFALSE 37677
// end ;
37752: PPOPN 3
37754: END
// every 0 0$1 trigger StreamModeActive and sTime do
37755: LD_EXP 64
37759: PUSH
37760: LD_EXP 115
37764: AND
37765: IFFALSE 37800
37767: GO 37769
37769: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
37770: LD_INT 28
37772: PPUSH
37773: LD_OWVAR 2
37777: PPUSH
37778: LD_INT 2
37780: PPUSH
37781: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
37785: LD_INT 30
37787: PPUSH
37788: LD_OWVAR 2
37792: PPUSH
37793: LD_INT 2
37795: PPUSH
37796: CALL_OW 322
// end ;
37800: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
37801: LD_EXP 64
37805: PUSH
37806: LD_EXP 116
37810: AND
37811: IFFALSE 37932
37813: GO 37815
37815: DISABLE
37816: LD_INT 0
37818: PPUSH
37819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37820: LD_ADDR_VAR 0 2
37824: PUSH
37825: LD_INT 22
37827: PUSH
37828: LD_OWVAR 2
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 21
37839: PUSH
37840: LD_INT 1
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 3
37849: PUSH
37850: LD_INT 23
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: LIST
37868: PPUSH
37869: CALL_OW 69
37873: ST_TO_ADDR
// if not tmp then
37874: LD_VAR 0 2
37878: NOT
37879: IFFALSE 37883
// exit ;
37881: GO 37932
// for i in tmp do
37883: LD_ADDR_VAR 0 1
37887: PUSH
37888: LD_VAR 0 2
37892: PUSH
37893: FOR_IN
37894: IFFALSE 37930
// begin if Crawls ( i ) then
37896: LD_VAR 0 1
37900: PPUSH
37901: CALL_OW 318
37905: IFFALSE 37916
// ComWalk ( i ) ;
37907: LD_VAR 0 1
37911: PPUSH
37912: CALL_OW 138
// SetClass ( i , 2 ) ;
37916: LD_VAR 0 1
37920: PPUSH
37921: LD_INT 2
37923: PPUSH
37924: CALL_OW 336
// end ;
37928: GO 37893
37930: POP
37931: POP
// end ;
37932: PPOPN 2
37934: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
37935: LD_EXP 64
37939: PUSH
37940: LD_EXP 117
37944: AND
37945: IFFALSE 38226
37947: GO 37949
37949: DISABLE
37950: LD_INT 0
37952: PPUSH
37953: PPUSH
37954: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
37955: LD_OWVAR 2
37959: PPUSH
37960: LD_INT 9
37962: PPUSH
37963: LD_INT 1
37965: PPUSH
37966: LD_INT 1
37968: PPUSH
37969: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
37973: LD_INT 9
37975: PPUSH
37976: LD_OWVAR 2
37980: PPUSH
37981: CALL_OW 343
// uc_side := 9 ;
37985: LD_ADDR_OWVAR 20
37989: PUSH
37990: LD_INT 9
37992: ST_TO_ADDR
// uc_nation := 2 ;
37993: LD_ADDR_OWVAR 21
37997: PUSH
37998: LD_INT 2
38000: ST_TO_ADDR
// hc_name := Dark Warrior ;
38001: LD_ADDR_OWVAR 26
38005: PUSH
38006: LD_STRING Dark Warrior
38008: ST_TO_ADDR
// hc_gallery :=  ;
38009: LD_ADDR_OWVAR 33
38013: PUSH
38014: LD_STRING 
38016: ST_TO_ADDR
// hc_noskilllimit := true ;
38017: LD_ADDR_OWVAR 76
38021: PUSH
38022: LD_INT 1
38024: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
38025: LD_ADDR_OWVAR 31
38029: PUSH
38030: LD_INT 30
38032: PUSH
38033: LD_INT 30
38035: PUSH
38036: LD_INT 30
38038: PUSH
38039: LD_INT 30
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: ST_TO_ADDR
// un := CreateHuman ;
38048: LD_ADDR_VAR 0 3
38052: PUSH
38053: CALL_OW 44
38057: ST_TO_ADDR
// hc_noskilllimit := false ;
38058: LD_ADDR_OWVAR 76
38062: PUSH
38063: LD_INT 0
38065: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38066: LD_VAR 0 3
38070: PPUSH
38071: LD_INT 1
38073: PPUSH
38074: CALL_OW 51
// p := 0 ;
38078: LD_ADDR_VAR 0 2
38082: PUSH
38083: LD_INT 0
38085: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38086: LD_INT 35
38088: PPUSH
38089: CALL_OW 67
// p := p + 1 ;
38093: LD_ADDR_VAR 0 2
38097: PUSH
38098: LD_VAR 0 2
38102: PUSH
38103: LD_INT 1
38105: PLUS
38106: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
38107: LD_VAR 0 3
38111: PPUSH
38112: CALL_OW 256
38116: PUSH
38117: LD_INT 1000
38119: LESS
38120: IFFALSE 38134
// SetLives ( un , 1000 ) ;
38122: LD_VAR 0 3
38126: PPUSH
38127: LD_INT 1000
38129: PPUSH
38130: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
38134: LD_VAR 0 3
38138: PPUSH
38139: LD_INT 81
38141: PUSH
38142: LD_OWVAR 2
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 91
38153: PUSH
38154: LD_VAR 0 3
38158: PUSH
38159: LD_INT 30
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: LIST
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PPUSH
38171: CALL_OW 69
38175: PPUSH
38176: LD_VAR 0 3
38180: PPUSH
38181: CALL_OW 74
38185: PPUSH
38186: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
38190: LD_VAR 0 2
38194: PUSH
38195: LD_INT 60
38197: GREATER
38198: PUSH
38199: LD_VAR 0 3
38203: PPUSH
38204: CALL_OW 301
38208: OR
38209: IFFALSE 38086
// if un then
38211: LD_VAR 0 3
38215: IFFALSE 38226
// RemoveUnit ( un ) ;
38217: LD_VAR 0 3
38221: PPUSH
38222: CALL_OW 64
// end ;
38226: PPOPN 3
38228: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
38229: LD_INT 0
38231: PPUSH
// case cmd of 301 :
38232: LD_VAR 0 1
38236: PUSH
38237: LD_INT 301
38239: DOUBLE
38240: EQUAL
38241: IFTRUE 38245
38243: GO 38277
38245: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
38246: LD_VAR 0 6
38250: PPUSH
38251: LD_VAR 0 7
38255: PPUSH
38256: LD_VAR 0 8
38260: PPUSH
38261: LD_VAR 0 4
38265: PPUSH
38266: LD_VAR 0 5
38270: PPUSH
38271: CALL 39478 0 5
38275: GO 38398
38277: LD_INT 302
38279: DOUBLE
38280: EQUAL
38281: IFTRUE 38285
38283: GO 38322
38285: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
38286: LD_VAR 0 6
38290: PPUSH
38291: LD_VAR 0 7
38295: PPUSH
38296: LD_VAR 0 8
38300: PPUSH
38301: LD_VAR 0 9
38305: PPUSH
38306: LD_VAR 0 4
38310: PPUSH
38311: LD_VAR 0 5
38315: PPUSH
38316: CALL 39569 0 6
38320: GO 38398
38322: LD_INT 303
38324: DOUBLE
38325: EQUAL
38326: IFTRUE 38330
38328: GO 38367
38330: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
38331: LD_VAR 0 6
38335: PPUSH
38336: LD_VAR 0 7
38340: PPUSH
38341: LD_VAR 0 8
38345: PPUSH
38346: LD_VAR 0 9
38350: PPUSH
38351: LD_VAR 0 4
38355: PPUSH
38356: LD_VAR 0 5
38360: PPUSH
38361: CALL 38403 0 6
38365: GO 38398
38367: LD_INT 304
38369: DOUBLE
38370: EQUAL
38371: IFTRUE 38375
38373: GO 38397
38375: POP
// hHackTeleport ( unit , x , y ) ; end ;
38376: LD_VAR 0 2
38380: PPUSH
38381: LD_VAR 0 4
38385: PPUSH
38386: LD_VAR 0 5
38390: PPUSH
38391: CALL 40162 0 3
38395: GO 38398
38397: POP
// end ;
38398: LD_VAR 0 12
38402: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
38403: LD_INT 0
38405: PPUSH
38406: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
38407: LD_VAR 0 1
38411: PUSH
38412: LD_INT 1
38414: LESS
38415: PUSH
38416: LD_VAR 0 1
38420: PUSH
38421: LD_INT 3
38423: GREATER
38424: OR
38425: PUSH
38426: LD_VAR 0 5
38430: PPUSH
38431: LD_VAR 0 6
38435: PPUSH
38436: CALL_OW 428
38440: OR
38441: IFFALSE 38445
// exit ;
38443: GO 39165
// uc_side := your_side ;
38445: LD_ADDR_OWVAR 20
38449: PUSH
38450: LD_OWVAR 2
38454: ST_TO_ADDR
// uc_nation := nation ;
38455: LD_ADDR_OWVAR 21
38459: PUSH
38460: LD_VAR 0 1
38464: ST_TO_ADDR
// bc_level = 1 ;
38465: LD_ADDR_OWVAR 43
38469: PUSH
38470: LD_INT 1
38472: ST_TO_ADDR
// case btype of 1 :
38473: LD_VAR 0 2
38477: PUSH
38478: LD_INT 1
38480: DOUBLE
38481: EQUAL
38482: IFTRUE 38486
38484: GO 38497
38486: POP
// bc_type := b_depot ; 2 :
38487: LD_ADDR_OWVAR 42
38491: PUSH
38492: LD_INT 0
38494: ST_TO_ADDR
38495: GO 39109
38497: LD_INT 2
38499: DOUBLE
38500: EQUAL
38501: IFTRUE 38505
38503: GO 38516
38505: POP
// bc_type := b_warehouse ; 3 :
38506: LD_ADDR_OWVAR 42
38510: PUSH
38511: LD_INT 1
38513: ST_TO_ADDR
38514: GO 39109
38516: LD_INT 3
38518: DOUBLE
38519: EQUAL
38520: IFTRUE 38524
38522: GO 38535
38524: POP
// bc_type := b_lab ; 4 .. 9 :
38525: LD_ADDR_OWVAR 42
38529: PUSH
38530: LD_INT 6
38532: ST_TO_ADDR
38533: GO 39109
38535: LD_INT 4
38537: DOUBLE
38538: GREATEREQUAL
38539: IFFALSE 38547
38541: LD_INT 9
38543: DOUBLE
38544: LESSEQUAL
38545: IFTRUE 38549
38547: GO 38601
38549: POP
// begin bc_type := b_lab_half ;
38550: LD_ADDR_OWVAR 42
38554: PUSH
38555: LD_INT 7
38557: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
38558: LD_ADDR_OWVAR 44
38562: PUSH
38563: LD_INT 10
38565: PUSH
38566: LD_INT 11
38568: PUSH
38569: LD_INT 12
38571: PUSH
38572: LD_INT 15
38574: PUSH
38575: LD_INT 14
38577: PUSH
38578: LD_INT 13
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: PUSH
38589: LD_VAR 0 2
38593: PUSH
38594: LD_INT 3
38596: MINUS
38597: ARRAY
38598: ST_TO_ADDR
// end ; 10 .. 13 :
38599: GO 39109
38601: LD_INT 10
38603: DOUBLE
38604: GREATEREQUAL
38605: IFFALSE 38613
38607: LD_INT 13
38609: DOUBLE
38610: LESSEQUAL
38611: IFTRUE 38615
38613: GO 38692
38615: POP
// begin bc_type := b_lab_full ;
38616: LD_ADDR_OWVAR 42
38620: PUSH
38621: LD_INT 8
38623: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
38624: LD_ADDR_OWVAR 44
38628: PUSH
38629: LD_INT 10
38631: PUSH
38632: LD_INT 12
38634: PUSH
38635: LD_INT 14
38637: PUSH
38638: LD_INT 13
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: PUSH
38647: LD_VAR 0 2
38651: PUSH
38652: LD_INT 9
38654: MINUS
38655: ARRAY
38656: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
38657: LD_ADDR_OWVAR 45
38661: PUSH
38662: LD_INT 11
38664: PUSH
38665: LD_INT 15
38667: PUSH
38668: LD_INT 12
38670: PUSH
38671: LD_INT 15
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: PUSH
38680: LD_VAR 0 2
38684: PUSH
38685: LD_INT 9
38687: MINUS
38688: ARRAY
38689: ST_TO_ADDR
// end ; 14 :
38690: GO 39109
38692: LD_INT 14
38694: DOUBLE
38695: EQUAL
38696: IFTRUE 38700
38698: GO 38711
38700: POP
// bc_type := b_workshop ; 15 :
38701: LD_ADDR_OWVAR 42
38705: PUSH
38706: LD_INT 2
38708: ST_TO_ADDR
38709: GO 39109
38711: LD_INT 15
38713: DOUBLE
38714: EQUAL
38715: IFTRUE 38719
38717: GO 38730
38719: POP
// bc_type := b_factory ; 16 :
38720: LD_ADDR_OWVAR 42
38724: PUSH
38725: LD_INT 3
38727: ST_TO_ADDR
38728: GO 39109
38730: LD_INT 16
38732: DOUBLE
38733: EQUAL
38734: IFTRUE 38738
38736: GO 38749
38738: POP
// bc_type := b_ext_gun ; 17 :
38739: LD_ADDR_OWVAR 42
38743: PUSH
38744: LD_INT 17
38746: ST_TO_ADDR
38747: GO 39109
38749: LD_INT 17
38751: DOUBLE
38752: EQUAL
38753: IFTRUE 38757
38755: GO 38785
38757: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
38758: LD_ADDR_OWVAR 42
38762: PUSH
38763: LD_INT 19
38765: PUSH
38766: LD_INT 23
38768: PUSH
38769: LD_INT 19
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: LIST
38776: PUSH
38777: LD_VAR 0 1
38781: ARRAY
38782: ST_TO_ADDR
38783: GO 39109
38785: LD_INT 18
38787: DOUBLE
38788: EQUAL
38789: IFTRUE 38793
38791: GO 38804
38793: POP
// bc_type := b_ext_radar ; 19 :
38794: LD_ADDR_OWVAR 42
38798: PUSH
38799: LD_INT 20
38801: ST_TO_ADDR
38802: GO 39109
38804: LD_INT 19
38806: DOUBLE
38807: EQUAL
38808: IFTRUE 38812
38810: GO 38823
38812: POP
// bc_type := b_ext_radio ; 20 :
38813: LD_ADDR_OWVAR 42
38817: PUSH
38818: LD_INT 22
38820: ST_TO_ADDR
38821: GO 39109
38823: LD_INT 20
38825: DOUBLE
38826: EQUAL
38827: IFTRUE 38831
38829: GO 38842
38831: POP
// bc_type := b_ext_siberium ; 21 :
38832: LD_ADDR_OWVAR 42
38836: PUSH
38837: LD_INT 21
38839: ST_TO_ADDR
38840: GO 39109
38842: LD_INT 21
38844: DOUBLE
38845: EQUAL
38846: IFTRUE 38850
38848: GO 38861
38850: POP
// bc_type := b_ext_computer ; 22 :
38851: LD_ADDR_OWVAR 42
38855: PUSH
38856: LD_INT 24
38858: ST_TO_ADDR
38859: GO 39109
38861: LD_INT 22
38863: DOUBLE
38864: EQUAL
38865: IFTRUE 38869
38867: GO 38880
38869: POP
// bc_type := b_ext_track ; 23 :
38870: LD_ADDR_OWVAR 42
38874: PUSH
38875: LD_INT 16
38877: ST_TO_ADDR
38878: GO 39109
38880: LD_INT 23
38882: DOUBLE
38883: EQUAL
38884: IFTRUE 38888
38886: GO 38899
38888: POP
// bc_type := b_ext_laser ; 24 :
38889: LD_ADDR_OWVAR 42
38893: PUSH
38894: LD_INT 25
38896: ST_TO_ADDR
38897: GO 39109
38899: LD_INT 24
38901: DOUBLE
38902: EQUAL
38903: IFTRUE 38907
38905: GO 38918
38907: POP
// bc_type := b_control_tower ; 25 :
38908: LD_ADDR_OWVAR 42
38912: PUSH
38913: LD_INT 36
38915: ST_TO_ADDR
38916: GO 39109
38918: LD_INT 25
38920: DOUBLE
38921: EQUAL
38922: IFTRUE 38926
38924: GO 38937
38926: POP
// bc_type := b_breastwork ; 26 :
38927: LD_ADDR_OWVAR 42
38931: PUSH
38932: LD_INT 31
38934: ST_TO_ADDR
38935: GO 39109
38937: LD_INT 26
38939: DOUBLE
38940: EQUAL
38941: IFTRUE 38945
38943: GO 38956
38945: POP
// bc_type := b_bunker ; 27 :
38946: LD_ADDR_OWVAR 42
38950: PUSH
38951: LD_INT 32
38953: ST_TO_ADDR
38954: GO 39109
38956: LD_INT 27
38958: DOUBLE
38959: EQUAL
38960: IFTRUE 38964
38962: GO 38975
38964: POP
// bc_type := b_turret ; 28 :
38965: LD_ADDR_OWVAR 42
38969: PUSH
38970: LD_INT 33
38972: ST_TO_ADDR
38973: GO 39109
38975: LD_INT 28
38977: DOUBLE
38978: EQUAL
38979: IFTRUE 38983
38981: GO 38994
38983: POP
// bc_type := b_armoury ; 29 :
38984: LD_ADDR_OWVAR 42
38988: PUSH
38989: LD_INT 4
38991: ST_TO_ADDR
38992: GO 39109
38994: LD_INT 29
38996: DOUBLE
38997: EQUAL
38998: IFTRUE 39002
39000: GO 39013
39002: POP
// bc_type := b_barracks ; 30 :
39003: LD_ADDR_OWVAR 42
39007: PUSH
39008: LD_INT 5
39010: ST_TO_ADDR
39011: GO 39109
39013: LD_INT 30
39015: DOUBLE
39016: EQUAL
39017: IFTRUE 39021
39019: GO 39032
39021: POP
// bc_type := b_solar_power ; 31 :
39022: LD_ADDR_OWVAR 42
39026: PUSH
39027: LD_INT 27
39029: ST_TO_ADDR
39030: GO 39109
39032: LD_INT 31
39034: DOUBLE
39035: EQUAL
39036: IFTRUE 39040
39038: GO 39051
39040: POP
// bc_type := b_oil_power ; 32 :
39041: LD_ADDR_OWVAR 42
39045: PUSH
39046: LD_INT 26
39048: ST_TO_ADDR
39049: GO 39109
39051: LD_INT 32
39053: DOUBLE
39054: EQUAL
39055: IFTRUE 39059
39057: GO 39070
39059: POP
// bc_type := b_siberite_power ; 33 :
39060: LD_ADDR_OWVAR 42
39064: PUSH
39065: LD_INT 28
39067: ST_TO_ADDR
39068: GO 39109
39070: LD_INT 33
39072: DOUBLE
39073: EQUAL
39074: IFTRUE 39078
39076: GO 39089
39078: POP
// bc_type := b_oil_mine ; 34 :
39079: LD_ADDR_OWVAR 42
39083: PUSH
39084: LD_INT 29
39086: ST_TO_ADDR
39087: GO 39109
39089: LD_INT 34
39091: DOUBLE
39092: EQUAL
39093: IFTRUE 39097
39095: GO 39108
39097: POP
// bc_type := b_siberite_mine ; end ;
39098: LD_ADDR_OWVAR 42
39102: PUSH
39103: LD_INT 30
39105: ST_TO_ADDR
39106: GO 39109
39108: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
39109: LD_ADDR_VAR 0 8
39113: PUSH
39114: LD_VAR 0 5
39118: PPUSH
39119: LD_VAR 0 6
39123: PPUSH
39124: LD_VAR 0 3
39128: PPUSH
39129: CALL_OW 47
39133: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
39134: LD_OWVAR 42
39138: PUSH
39139: LD_INT 32
39141: PUSH
39142: LD_INT 33
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: IN
39149: IFFALSE 39165
// PlaceWeaponTurret ( b , weapon ) ;
39151: LD_VAR 0 8
39155: PPUSH
39156: LD_VAR 0 4
39160: PPUSH
39161: CALL_OW 431
// end ;
39165: LD_VAR 0 7
39169: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
39170: LD_INT 0
39172: PPUSH
39173: PPUSH
39174: PPUSH
39175: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39176: LD_ADDR_VAR 0 4
39180: PUSH
39181: LD_INT 22
39183: PUSH
39184: LD_OWVAR 2
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 2
39195: PUSH
39196: LD_INT 30
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 30
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: LIST
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PPUSH
39225: CALL_OW 69
39229: ST_TO_ADDR
// if not tmp then
39230: LD_VAR 0 4
39234: NOT
39235: IFFALSE 39239
// exit ;
39237: GO 39298
// for i in tmp do
39239: LD_ADDR_VAR 0 2
39243: PUSH
39244: LD_VAR 0 4
39248: PUSH
39249: FOR_IN
39250: IFFALSE 39296
// for j = 1 to 3 do
39252: LD_ADDR_VAR 0 3
39256: PUSH
39257: DOUBLE
39258: LD_INT 1
39260: DEC
39261: ST_TO_ADDR
39262: LD_INT 3
39264: PUSH
39265: FOR_TO
39266: IFFALSE 39292
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
39268: LD_VAR 0 2
39272: PPUSH
39273: CALL_OW 274
39277: PPUSH
39278: LD_VAR 0 3
39282: PPUSH
39283: LD_INT 99999
39285: PPUSH
39286: CALL_OW 277
39290: GO 39265
39292: POP
39293: POP
39294: GO 39249
39296: POP
39297: POP
// end ;
39298: LD_VAR 0 1
39302: RET
// export function hHackSetLevel10 ; var i , j ; begin
39303: LD_INT 0
39305: PPUSH
39306: PPUSH
39307: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
39308: LD_ADDR_VAR 0 2
39312: PUSH
39313: LD_INT 21
39315: PUSH
39316: LD_INT 1
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PPUSH
39323: CALL_OW 69
39327: PUSH
39328: FOR_IN
39329: IFFALSE 39381
// if IsSelected ( i ) then
39331: LD_VAR 0 2
39335: PPUSH
39336: CALL_OW 306
39340: IFFALSE 39379
// begin for j := 1 to 4 do
39342: LD_ADDR_VAR 0 3
39346: PUSH
39347: DOUBLE
39348: LD_INT 1
39350: DEC
39351: ST_TO_ADDR
39352: LD_INT 4
39354: PUSH
39355: FOR_TO
39356: IFFALSE 39377
// SetSkill ( i , j , 10 ) ;
39358: LD_VAR 0 2
39362: PPUSH
39363: LD_VAR 0 3
39367: PPUSH
39368: LD_INT 10
39370: PPUSH
39371: CALL_OW 237
39375: GO 39355
39377: POP
39378: POP
// end ;
39379: GO 39328
39381: POP
39382: POP
// end ;
39383: LD_VAR 0 1
39387: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
39388: LD_INT 0
39390: PPUSH
39391: PPUSH
39392: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
39393: LD_ADDR_VAR 0 2
39397: PUSH
39398: LD_INT 22
39400: PUSH
39401: LD_OWVAR 2
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 21
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PPUSH
39424: CALL_OW 69
39428: PUSH
39429: FOR_IN
39430: IFFALSE 39471
// begin for j := 1 to 4 do
39432: LD_ADDR_VAR 0 3
39436: PUSH
39437: DOUBLE
39438: LD_INT 1
39440: DEC
39441: ST_TO_ADDR
39442: LD_INT 4
39444: PUSH
39445: FOR_TO
39446: IFFALSE 39467
// SetSkill ( i , j , 10 ) ;
39448: LD_VAR 0 2
39452: PPUSH
39453: LD_VAR 0 3
39457: PPUSH
39458: LD_INT 10
39460: PPUSH
39461: CALL_OW 237
39465: GO 39445
39467: POP
39468: POP
// end ;
39469: GO 39429
39471: POP
39472: POP
// end ;
39473: LD_VAR 0 1
39477: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
39478: LD_INT 0
39480: PPUSH
// uc_side := your_side ;
39481: LD_ADDR_OWVAR 20
39485: PUSH
39486: LD_OWVAR 2
39490: ST_TO_ADDR
// uc_nation := nation ;
39491: LD_ADDR_OWVAR 21
39495: PUSH
39496: LD_VAR 0 1
39500: ST_TO_ADDR
// InitHc ;
39501: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
39505: LD_INT 0
39507: PPUSH
39508: LD_VAR 0 2
39512: PPUSH
39513: LD_VAR 0 3
39517: PPUSH
39518: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
39522: LD_VAR 0 4
39526: PPUSH
39527: LD_VAR 0 5
39531: PPUSH
39532: CALL_OW 428
39536: PUSH
39537: LD_INT 0
39539: EQUAL
39540: IFFALSE 39564
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
39542: CALL_OW 44
39546: PPUSH
39547: LD_VAR 0 4
39551: PPUSH
39552: LD_VAR 0 5
39556: PPUSH
39557: LD_INT 1
39559: PPUSH
39560: CALL_OW 48
// end ;
39564: LD_VAR 0 6
39568: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
39569: LD_INT 0
39571: PPUSH
39572: PPUSH
// uc_side := your_side ;
39573: LD_ADDR_OWVAR 20
39577: PUSH
39578: LD_OWVAR 2
39582: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
39583: LD_VAR 0 1
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: LD_INT 2
39593: PUSH
39594: LD_INT 3
39596: PUSH
39597: LD_INT 4
39599: PUSH
39600: LD_INT 5
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: IN
39610: IFFALSE 39622
// uc_nation := nation_american else
39612: LD_ADDR_OWVAR 21
39616: PUSH
39617: LD_INT 1
39619: ST_TO_ADDR
39620: GO 39665
// if chassis in [ 11 , 12 , 13 , 14 ] then
39622: LD_VAR 0 1
39626: PUSH
39627: LD_INT 11
39629: PUSH
39630: LD_INT 12
39632: PUSH
39633: LD_INT 13
39635: PUSH
39636: LD_INT 14
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: IN
39645: IFFALSE 39657
// uc_nation := nation_arabian else
39647: LD_ADDR_OWVAR 21
39651: PUSH
39652: LD_INT 2
39654: ST_TO_ADDR
39655: GO 39665
// uc_nation := nation_russian ;
39657: LD_ADDR_OWVAR 21
39661: PUSH
39662: LD_INT 3
39664: ST_TO_ADDR
// vc_chassis := chassis ;
39665: LD_ADDR_OWVAR 37
39669: PUSH
39670: LD_VAR 0 1
39674: ST_TO_ADDR
// vc_engine := engine ;
39675: LD_ADDR_OWVAR 39
39679: PUSH
39680: LD_VAR 0 2
39684: ST_TO_ADDR
// vc_control := control ;
39685: LD_ADDR_OWVAR 38
39689: PUSH
39690: LD_VAR 0 3
39694: ST_TO_ADDR
// vc_weapon := weapon ;
39695: LD_ADDR_OWVAR 40
39699: PUSH
39700: LD_VAR 0 4
39704: ST_TO_ADDR
// un := CreateVehicle ;
39705: LD_ADDR_VAR 0 8
39709: PUSH
39710: CALL_OW 45
39714: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
39715: LD_VAR 0 8
39719: PPUSH
39720: LD_INT 0
39722: PPUSH
39723: LD_INT 5
39725: PPUSH
39726: CALL_OW 12
39730: PPUSH
39731: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
39735: LD_VAR 0 8
39739: PPUSH
39740: LD_VAR 0 5
39744: PPUSH
39745: LD_VAR 0 6
39749: PPUSH
39750: LD_INT 1
39752: PPUSH
39753: CALL_OW 48
// end ;
39757: LD_VAR 0 7
39761: RET
// export hInvincible ; every 1 do
39762: GO 39764
39764: DISABLE
// hInvincible := [ ] ;
39765: LD_ADDR_EXP 118
39769: PUSH
39770: EMPTY
39771: ST_TO_ADDR
39772: END
// every 10 do var i ;
39773: GO 39775
39775: DISABLE
39776: LD_INT 0
39778: PPUSH
// begin enable ;
39779: ENABLE
// if not hInvincible then
39780: LD_EXP 118
39784: NOT
39785: IFFALSE 39789
// exit ;
39787: GO 39833
// for i in hInvincible do
39789: LD_ADDR_VAR 0 1
39793: PUSH
39794: LD_EXP 118
39798: PUSH
39799: FOR_IN
39800: IFFALSE 39831
// if GetLives ( i ) < 1000 then
39802: LD_VAR 0 1
39806: PPUSH
39807: CALL_OW 256
39811: PUSH
39812: LD_INT 1000
39814: LESS
39815: IFFALSE 39829
// SetLives ( i , 1000 ) ;
39817: LD_VAR 0 1
39821: PPUSH
39822: LD_INT 1000
39824: PPUSH
39825: CALL_OW 234
39829: GO 39799
39831: POP
39832: POP
// end ;
39833: PPOPN 1
39835: END
// export function hHackInvincible ; var i ; begin
39836: LD_INT 0
39838: PPUSH
39839: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
39840: LD_ADDR_VAR 0 2
39844: PUSH
39845: LD_INT 2
39847: PUSH
39848: LD_INT 21
39850: PUSH
39851: LD_INT 1
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 21
39860: PUSH
39861: LD_INT 2
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: LIST
39872: PPUSH
39873: CALL_OW 69
39877: PUSH
39878: FOR_IN
39879: IFFALSE 39940
// if IsSelected ( i ) then
39881: LD_VAR 0 2
39885: PPUSH
39886: CALL_OW 306
39890: IFFALSE 39938
// begin if i in hInvincible then
39892: LD_VAR 0 2
39896: PUSH
39897: LD_EXP 118
39901: IN
39902: IFFALSE 39922
// hInvincible := hInvincible diff i else
39904: LD_ADDR_EXP 118
39908: PUSH
39909: LD_EXP 118
39913: PUSH
39914: LD_VAR 0 2
39918: DIFF
39919: ST_TO_ADDR
39920: GO 39938
// hInvincible := hInvincible union i ;
39922: LD_ADDR_EXP 118
39926: PUSH
39927: LD_EXP 118
39931: PUSH
39932: LD_VAR 0 2
39936: UNION
39937: ST_TO_ADDR
// end ;
39938: GO 39878
39940: POP
39941: POP
// end ;
39942: LD_VAR 0 1
39946: RET
// export function hHackInvisible ; var i , j ; begin
39947: LD_INT 0
39949: PPUSH
39950: PPUSH
39951: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
39952: LD_ADDR_VAR 0 2
39956: PUSH
39957: LD_INT 21
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PPUSH
39967: CALL_OW 69
39971: PUSH
39972: FOR_IN
39973: IFFALSE 39997
// if IsSelected ( i ) then
39975: LD_VAR 0 2
39979: PPUSH
39980: CALL_OW 306
39984: IFFALSE 39995
// ComForceInvisible ( i ) ;
39986: LD_VAR 0 2
39990: PPUSH
39991: CALL_OW 496
39995: GO 39972
39997: POP
39998: POP
// end ;
39999: LD_VAR 0 1
40003: RET
// export function hHackChangeYourSide ; begin
40004: LD_INT 0
40006: PPUSH
// if your_side = 8 then
40007: LD_OWVAR 2
40011: PUSH
40012: LD_INT 8
40014: EQUAL
40015: IFFALSE 40027
// your_side := 0 else
40017: LD_ADDR_OWVAR 2
40021: PUSH
40022: LD_INT 0
40024: ST_TO_ADDR
40025: GO 40041
// your_side := your_side + 1 ;
40027: LD_ADDR_OWVAR 2
40031: PUSH
40032: LD_OWVAR 2
40036: PUSH
40037: LD_INT 1
40039: PLUS
40040: ST_TO_ADDR
// end ;
40041: LD_VAR 0 1
40045: RET
// export function hHackChangeUnitSide ; var i , j ; begin
40046: LD_INT 0
40048: PPUSH
40049: PPUSH
40050: PPUSH
// for i in all_units do
40051: LD_ADDR_VAR 0 2
40055: PUSH
40056: LD_OWVAR 3
40060: PUSH
40061: FOR_IN
40062: IFFALSE 40140
// if IsSelected ( i ) then
40064: LD_VAR 0 2
40068: PPUSH
40069: CALL_OW 306
40073: IFFALSE 40138
// begin j := GetSide ( i ) ;
40075: LD_ADDR_VAR 0 3
40079: PUSH
40080: LD_VAR 0 2
40084: PPUSH
40085: CALL_OW 255
40089: ST_TO_ADDR
// if j = 8 then
40090: LD_VAR 0 3
40094: PUSH
40095: LD_INT 8
40097: EQUAL
40098: IFFALSE 40110
// j := 0 else
40100: LD_ADDR_VAR 0 3
40104: PUSH
40105: LD_INT 0
40107: ST_TO_ADDR
40108: GO 40124
// j := j + 1 ;
40110: LD_ADDR_VAR 0 3
40114: PUSH
40115: LD_VAR 0 3
40119: PUSH
40120: LD_INT 1
40122: PLUS
40123: ST_TO_ADDR
// SetSide ( i , j ) ;
40124: LD_VAR 0 2
40128: PPUSH
40129: LD_VAR 0 3
40133: PPUSH
40134: CALL_OW 235
// end ;
40138: GO 40061
40140: POP
40141: POP
// end ;
40142: LD_VAR 0 1
40146: RET
// export function hHackFog ; begin
40147: LD_INT 0
40149: PPUSH
// FogOff ( true ) ;
40150: LD_INT 1
40152: PPUSH
40153: CALL_OW 344
// end ;
40157: LD_VAR 0 1
40161: RET
// export function hHackTeleport ( unit , x , y ) ; begin
40162: LD_INT 0
40164: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
40165: LD_VAR 0 1
40169: PPUSH
40170: LD_VAR 0 2
40174: PPUSH
40175: LD_VAR 0 3
40179: PPUSH
40180: LD_INT 1
40182: PPUSH
40183: LD_INT 1
40185: PPUSH
40186: CALL_OW 483
// CenterOnXY ( x , y ) ;
40190: LD_VAR 0 2
40194: PPUSH
40195: LD_VAR 0 3
40199: PPUSH
40200: CALL_OW 84
// end ; end_of_file
40204: LD_VAR 0 4
40208: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
40209: LD_INT 0
40211: PPUSH
40212: PPUSH
40213: PPUSH
40214: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
40215: LD_VAR 0 1
40219: PPUSH
40220: CALL_OW 264
40224: PUSH
40225: LD_EXP 52
40229: EQUAL
40230: IFFALSE 40302
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
40232: LD_INT 68
40234: PPUSH
40235: LD_VAR 0 1
40239: PPUSH
40240: CALL_OW 255
40244: PPUSH
40245: CALL_OW 321
40249: PUSH
40250: LD_INT 2
40252: EQUAL
40253: IFFALSE 40265
// eff := 70 else
40255: LD_ADDR_VAR 0 4
40259: PUSH
40260: LD_INT 70
40262: ST_TO_ADDR
40263: GO 40273
// eff := 30 ;
40265: LD_ADDR_VAR 0 4
40269: PUSH
40270: LD_INT 30
40272: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
40273: LD_VAR 0 1
40277: PPUSH
40278: CALL_OW 250
40282: PPUSH
40283: LD_VAR 0 1
40287: PPUSH
40288: CALL_OW 251
40292: PPUSH
40293: LD_VAR 0 4
40297: PPUSH
40298: CALL_OW 495
// end ; end ;
40302: LD_VAR 0 2
40306: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
40307: LD_INT 0
40309: PPUSH
// end ;
40310: LD_VAR 0 4
40314: RET
// export function SOS_Command ( cmd ) ; begin
40315: LD_INT 0
40317: PPUSH
// end ;
40318: LD_VAR 0 2
40322: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
40323: LD_INT 0
40325: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
40326: LD_VAR 0 1
40330: PUSH
40331: LD_INT 250
40333: EQUAL
40334: PUSH
40335: LD_VAR 0 2
40339: PPUSH
40340: CALL_OW 264
40344: PUSH
40345: LD_EXP 55
40349: EQUAL
40350: AND
40351: IFFALSE 40372
// MinerPlaceMine ( unit , x , y ) ;
40353: LD_VAR 0 2
40357: PPUSH
40358: LD_VAR 0 4
40362: PPUSH
40363: LD_VAR 0 5
40367: PPUSH
40368: CALL 42713 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
40372: LD_VAR 0 1
40376: PUSH
40377: LD_INT 251
40379: EQUAL
40380: PUSH
40381: LD_VAR 0 2
40385: PPUSH
40386: CALL_OW 264
40390: PUSH
40391: LD_EXP 55
40395: EQUAL
40396: AND
40397: IFFALSE 40418
// MinerDetonateMine ( unit , x , y ) ;
40399: LD_VAR 0 2
40403: PPUSH
40404: LD_VAR 0 4
40408: PPUSH
40409: LD_VAR 0 5
40413: PPUSH
40414: CALL 42990 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
40418: LD_VAR 0 1
40422: PUSH
40423: LD_INT 252
40425: EQUAL
40426: PUSH
40427: LD_VAR 0 2
40431: PPUSH
40432: CALL_OW 264
40436: PUSH
40437: LD_EXP 55
40441: EQUAL
40442: AND
40443: IFFALSE 40464
// MinerCreateMinefield ( unit , x , y ) ;
40445: LD_VAR 0 2
40449: PPUSH
40450: LD_VAR 0 4
40454: PPUSH
40455: LD_VAR 0 5
40459: PPUSH
40460: CALL 43407 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
40464: LD_VAR 0 1
40468: PUSH
40469: LD_INT 253
40471: EQUAL
40472: PUSH
40473: LD_VAR 0 2
40477: PPUSH
40478: CALL_OW 257
40482: PUSH
40483: LD_INT 5
40485: EQUAL
40486: AND
40487: IFFALSE 40508
// ComBinocular ( unit , x , y ) ;
40489: LD_VAR 0 2
40493: PPUSH
40494: LD_VAR 0 4
40498: PPUSH
40499: LD_VAR 0 5
40503: PPUSH
40504: CALL 43778 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
40508: LD_VAR 0 1
40512: PUSH
40513: LD_INT 254
40515: EQUAL
40516: PUSH
40517: LD_VAR 0 2
40521: PPUSH
40522: CALL_OW 264
40526: PUSH
40527: LD_EXP 50
40531: EQUAL
40532: AND
40533: PUSH
40534: LD_VAR 0 3
40538: PPUSH
40539: CALL_OW 263
40543: PUSH
40544: LD_INT 3
40546: EQUAL
40547: AND
40548: IFFALSE 40564
// HackDestroyVehicle ( unit , selectedUnit ) ;
40550: LD_VAR 0 2
40554: PPUSH
40555: LD_VAR 0 3
40559: PPUSH
40560: CALL 42073 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
40564: LD_VAR 0 1
40568: PUSH
40569: LD_INT 255
40571: EQUAL
40572: PUSH
40573: LD_VAR 0 2
40577: PPUSH
40578: CALL_OW 264
40582: PUSH
40583: LD_INT 14
40585: PUSH
40586: LD_INT 53
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: IN
40593: AND
40594: PUSH
40595: LD_VAR 0 4
40599: PPUSH
40600: LD_VAR 0 5
40604: PPUSH
40605: CALL_OW 488
40609: AND
40610: IFFALSE 40634
// CutTreeXYR ( unit , x , y , 12 ) ;
40612: LD_VAR 0 2
40616: PPUSH
40617: LD_VAR 0 4
40621: PPUSH
40622: LD_VAR 0 5
40626: PPUSH
40627: LD_INT 12
40629: PPUSH
40630: CALL 40639 0 4
// end ;
40634: LD_VAR 0 6
40638: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
40639: LD_INT 0
40641: PPUSH
40642: PPUSH
40643: PPUSH
40644: PPUSH
40645: PPUSH
40646: PPUSH
40647: PPUSH
40648: PPUSH
40649: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
40650: LD_VAR 0 1
40654: NOT
40655: PUSH
40656: LD_VAR 0 2
40660: PPUSH
40661: LD_VAR 0 3
40665: PPUSH
40666: CALL_OW 488
40670: NOT
40671: OR
40672: PUSH
40673: LD_VAR 0 4
40677: NOT
40678: OR
40679: IFFALSE 40683
// exit ;
40681: GO 41023
// list := [ ] ;
40683: LD_ADDR_VAR 0 13
40687: PUSH
40688: EMPTY
40689: ST_TO_ADDR
// if x - r < 0 then
40690: LD_VAR 0 2
40694: PUSH
40695: LD_VAR 0 4
40699: MINUS
40700: PUSH
40701: LD_INT 0
40703: LESS
40704: IFFALSE 40716
// min_x := 0 else
40706: LD_ADDR_VAR 0 7
40710: PUSH
40711: LD_INT 0
40713: ST_TO_ADDR
40714: GO 40732
// min_x := x - r ;
40716: LD_ADDR_VAR 0 7
40720: PUSH
40721: LD_VAR 0 2
40725: PUSH
40726: LD_VAR 0 4
40730: MINUS
40731: ST_TO_ADDR
// if y - r < 0 then
40732: LD_VAR 0 3
40736: PUSH
40737: LD_VAR 0 4
40741: MINUS
40742: PUSH
40743: LD_INT 0
40745: LESS
40746: IFFALSE 40758
// min_y := 0 else
40748: LD_ADDR_VAR 0 8
40752: PUSH
40753: LD_INT 0
40755: ST_TO_ADDR
40756: GO 40774
// min_y := y - r ;
40758: LD_ADDR_VAR 0 8
40762: PUSH
40763: LD_VAR 0 3
40767: PUSH
40768: LD_VAR 0 4
40772: MINUS
40773: ST_TO_ADDR
// max_x := x + r ;
40774: LD_ADDR_VAR 0 9
40778: PUSH
40779: LD_VAR 0 2
40783: PUSH
40784: LD_VAR 0 4
40788: PLUS
40789: ST_TO_ADDR
// max_y := y + r ;
40790: LD_ADDR_VAR 0 10
40794: PUSH
40795: LD_VAR 0 3
40799: PUSH
40800: LD_VAR 0 4
40804: PLUS
40805: ST_TO_ADDR
// for _x = min_x to max_x do
40806: LD_ADDR_VAR 0 11
40810: PUSH
40811: DOUBLE
40812: LD_VAR 0 7
40816: DEC
40817: ST_TO_ADDR
40818: LD_VAR 0 9
40822: PUSH
40823: FOR_TO
40824: IFFALSE 40941
// for _y = min_y to max_y do
40826: LD_ADDR_VAR 0 12
40830: PUSH
40831: DOUBLE
40832: LD_VAR 0 8
40836: DEC
40837: ST_TO_ADDR
40838: LD_VAR 0 10
40842: PUSH
40843: FOR_TO
40844: IFFALSE 40937
// begin if not ValidHex ( _x , _y ) then
40846: LD_VAR 0 11
40850: PPUSH
40851: LD_VAR 0 12
40855: PPUSH
40856: CALL_OW 488
40860: NOT
40861: IFFALSE 40865
// continue ;
40863: GO 40843
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
40865: LD_VAR 0 11
40869: PPUSH
40870: LD_VAR 0 12
40874: PPUSH
40875: CALL_OW 351
40879: PUSH
40880: LD_VAR 0 11
40884: PPUSH
40885: LD_VAR 0 12
40889: PPUSH
40890: CALL_OW 554
40894: AND
40895: IFFALSE 40935
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
40897: LD_ADDR_VAR 0 13
40901: PUSH
40902: LD_VAR 0 13
40906: PPUSH
40907: LD_VAR 0 13
40911: PUSH
40912: LD_INT 1
40914: PLUS
40915: PPUSH
40916: LD_VAR 0 11
40920: PUSH
40921: LD_VAR 0 12
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PPUSH
40930: CALL_OW 2
40934: ST_TO_ADDR
// end ;
40935: GO 40843
40937: POP
40938: POP
40939: GO 40823
40941: POP
40942: POP
// if not list then
40943: LD_VAR 0 13
40947: NOT
40948: IFFALSE 40952
// exit ;
40950: GO 41023
// for i in list do
40952: LD_ADDR_VAR 0 6
40956: PUSH
40957: LD_VAR 0 13
40961: PUSH
40962: FOR_IN
40963: IFFALSE 41021
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
40965: LD_VAR 0 1
40969: PPUSH
40970: LD_STRING M
40972: PUSH
40973: LD_VAR 0 6
40977: PUSH
40978: LD_INT 1
40980: ARRAY
40981: PUSH
40982: LD_VAR 0 6
40986: PUSH
40987: LD_INT 2
40989: ARRAY
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: PUSH
41012: EMPTY
41013: LIST
41014: PPUSH
41015: CALL_OW 447
41019: GO 40962
41021: POP
41022: POP
// end ;
41023: LD_VAR 0 5
41027: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
41028: LD_EXP 119
41032: NOT
41033: IFFALSE 41083
41035: GO 41037
41037: DISABLE
// begin initHack := true ;
41038: LD_ADDR_EXP 119
41042: PUSH
41043: LD_INT 1
41045: ST_TO_ADDR
// hackTanks := [ ] ;
41046: LD_ADDR_EXP 120
41050: PUSH
41051: EMPTY
41052: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
41053: LD_ADDR_EXP 121
41057: PUSH
41058: EMPTY
41059: ST_TO_ADDR
// hackLimit := 3 ;
41060: LD_ADDR_EXP 122
41064: PUSH
41065: LD_INT 3
41067: ST_TO_ADDR
// hackDist := 12 ;
41068: LD_ADDR_EXP 123
41072: PUSH
41073: LD_INT 12
41075: ST_TO_ADDR
// hackCounter := [ ] ;
41076: LD_ADDR_EXP 124
41080: PUSH
41081: EMPTY
41082: ST_TO_ADDR
// end ;
41083: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
41084: LD_EXP 119
41088: PUSH
41089: LD_INT 34
41091: PUSH
41092: LD_EXP 50
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PPUSH
41101: CALL_OW 69
41105: AND
41106: IFFALSE 41361
41108: GO 41110
41110: DISABLE
41111: LD_INT 0
41113: PPUSH
41114: PPUSH
// begin enable ;
41115: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
41116: LD_ADDR_VAR 0 1
41120: PUSH
41121: LD_INT 34
41123: PUSH
41124: LD_EXP 50
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PPUSH
41133: CALL_OW 69
41137: PUSH
41138: FOR_IN
41139: IFFALSE 41359
// begin if not i in hackTanks then
41141: LD_VAR 0 1
41145: PUSH
41146: LD_EXP 120
41150: IN
41151: NOT
41152: IFFALSE 41235
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
41154: LD_ADDR_EXP 120
41158: PUSH
41159: LD_EXP 120
41163: PPUSH
41164: LD_EXP 120
41168: PUSH
41169: LD_INT 1
41171: PLUS
41172: PPUSH
41173: LD_VAR 0 1
41177: PPUSH
41178: CALL_OW 1
41182: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
41183: LD_ADDR_EXP 121
41187: PUSH
41188: LD_EXP 121
41192: PPUSH
41193: LD_EXP 121
41197: PUSH
41198: LD_INT 1
41200: PLUS
41201: PPUSH
41202: EMPTY
41203: PPUSH
41204: CALL_OW 1
41208: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
41209: LD_ADDR_EXP 124
41213: PUSH
41214: LD_EXP 124
41218: PPUSH
41219: LD_EXP 124
41223: PUSH
41224: LD_INT 1
41226: PLUS
41227: PPUSH
41228: EMPTY
41229: PPUSH
41230: CALL_OW 1
41234: ST_TO_ADDR
// end ; if not IsOk ( i ) then
41235: LD_VAR 0 1
41239: PPUSH
41240: CALL_OW 302
41244: NOT
41245: IFFALSE 41258
// begin HackUnlinkAll ( i ) ;
41247: LD_VAR 0 1
41251: PPUSH
41252: CALL 41364 0 1
// continue ;
41256: GO 41138
// end ; HackCheckCapturedStatus ( i ) ;
41258: LD_VAR 0 1
41262: PPUSH
41263: CALL 41807 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
41267: LD_ADDR_VAR 0 2
41271: PUSH
41272: LD_INT 81
41274: PUSH
41275: LD_VAR 0 1
41279: PPUSH
41280: CALL_OW 255
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 33
41291: PUSH
41292: LD_INT 3
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 91
41301: PUSH
41302: LD_VAR 0 1
41306: PUSH
41307: LD_EXP 123
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 50
41319: PUSH
41320: EMPTY
41321: LIST
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: PPUSH
41329: CALL_OW 69
41333: ST_TO_ADDR
// if not tmp then
41334: LD_VAR 0 2
41338: NOT
41339: IFFALSE 41343
// continue ;
41341: GO 41138
// HackLink ( i , tmp ) ;
41343: LD_VAR 0 1
41347: PPUSH
41348: LD_VAR 0 2
41352: PPUSH
41353: CALL 41500 0 2
// end ;
41357: GO 41138
41359: POP
41360: POP
// end ;
41361: PPOPN 2
41363: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
41364: LD_INT 0
41366: PPUSH
41367: PPUSH
41368: PPUSH
// if not hack in hackTanks then
41369: LD_VAR 0 1
41373: PUSH
41374: LD_EXP 120
41378: IN
41379: NOT
41380: IFFALSE 41384
// exit ;
41382: GO 41495
// index := GetElementIndex ( hackTanks , hack ) ;
41384: LD_ADDR_VAR 0 4
41388: PUSH
41389: LD_EXP 120
41393: PPUSH
41394: LD_VAR 0 1
41398: PPUSH
41399: CALL 48929 0 2
41403: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
41404: LD_EXP 121
41408: PUSH
41409: LD_VAR 0 4
41413: ARRAY
41414: IFFALSE 41495
// begin for i in hackTanksCaptured [ index ] do
41416: LD_ADDR_VAR 0 3
41420: PUSH
41421: LD_EXP 121
41425: PUSH
41426: LD_VAR 0 4
41430: ARRAY
41431: PUSH
41432: FOR_IN
41433: IFFALSE 41459
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
41435: LD_VAR 0 3
41439: PUSH
41440: LD_INT 1
41442: ARRAY
41443: PPUSH
41444: LD_VAR 0 3
41448: PUSH
41449: LD_INT 2
41451: ARRAY
41452: PPUSH
41453: CALL_OW 235
41457: GO 41432
41459: POP
41460: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
41461: LD_ADDR_EXP 121
41465: PUSH
41466: LD_EXP 121
41470: PPUSH
41471: LD_VAR 0 4
41475: PPUSH
41476: EMPTY
41477: PPUSH
41478: CALL_OW 1
41482: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
41483: LD_VAR 0 1
41487: PPUSH
41488: LD_INT 0
41490: PPUSH
41491: CALL_OW 505
// end ; end ;
41495: LD_VAR 0 2
41499: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
41500: LD_INT 0
41502: PPUSH
41503: PPUSH
41504: PPUSH
// if not hack in hackTanks or not vehicles then
41505: LD_VAR 0 1
41509: PUSH
41510: LD_EXP 120
41514: IN
41515: NOT
41516: PUSH
41517: LD_VAR 0 2
41521: NOT
41522: OR
41523: IFFALSE 41527
// exit ;
41525: GO 41802
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
41527: LD_ADDR_VAR 0 2
41531: PUSH
41532: LD_VAR 0 1
41536: PPUSH
41537: LD_VAR 0 2
41541: PPUSH
41542: LD_INT 1
41544: PPUSH
41545: LD_INT 1
41547: PPUSH
41548: CALL 49579 0 4
41552: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
41553: LD_ADDR_VAR 0 5
41557: PUSH
41558: LD_EXP 120
41562: PPUSH
41563: LD_VAR 0 1
41567: PPUSH
41568: CALL 48929 0 2
41572: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
41573: LD_EXP 121
41577: PUSH
41578: LD_VAR 0 5
41582: ARRAY
41583: PUSH
41584: LD_EXP 122
41588: LESS
41589: IFFALSE 41778
// begin for i := 1 to vehicles do
41591: LD_ADDR_VAR 0 4
41595: PUSH
41596: DOUBLE
41597: LD_INT 1
41599: DEC
41600: ST_TO_ADDR
41601: LD_VAR 0 2
41605: PUSH
41606: FOR_TO
41607: IFFALSE 41776
// begin if hackTanksCaptured [ index ] = hackLimit then
41609: LD_EXP 121
41613: PUSH
41614: LD_VAR 0 5
41618: ARRAY
41619: PUSH
41620: LD_EXP 122
41624: EQUAL
41625: IFFALSE 41629
// break ;
41627: GO 41776
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
41629: LD_ADDR_EXP 124
41633: PUSH
41634: LD_EXP 124
41638: PPUSH
41639: LD_VAR 0 5
41643: PPUSH
41644: LD_EXP 124
41648: PUSH
41649: LD_VAR 0 5
41653: ARRAY
41654: PUSH
41655: LD_INT 1
41657: PLUS
41658: PPUSH
41659: CALL_OW 1
41663: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
41664: LD_ADDR_EXP 121
41668: PUSH
41669: LD_EXP 121
41673: PPUSH
41674: LD_VAR 0 5
41678: PUSH
41679: LD_EXP 121
41683: PUSH
41684: LD_VAR 0 5
41688: ARRAY
41689: PUSH
41690: LD_INT 1
41692: PLUS
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PPUSH
41698: LD_VAR 0 2
41702: PUSH
41703: LD_VAR 0 4
41707: ARRAY
41708: PUSH
41709: LD_VAR 0 2
41713: PUSH
41714: LD_VAR 0 4
41718: ARRAY
41719: PPUSH
41720: CALL_OW 255
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PPUSH
41729: CALL 49144 0 3
41733: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
41734: LD_VAR 0 2
41738: PUSH
41739: LD_VAR 0 4
41743: ARRAY
41744: PPUSH
41745: LD_VAR 0 1
41749: PPUSH
41750: CALL_OW 255
41754: PPUSH
41755: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
41759: LD_VAR 0 2
41763: PUSH
41764: LD_VAR 0 4
41768: ARRAY
41769: PPUSH
41770: CALL_OW 141
// end ;
41774: GO 41606
41776: POP
41777: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41778: LD_VAR 0 1
41782: PPUSH
41783: LD_EXP 121
41787: PUSH
41788: LD_VAR 0 5
41792: ARRAY
41793: PUSH
41794: LD_INT 0
41796: PLUS
41797: PPUSH
41798: CALL_OW 505
// end ;
41802: LD_VAR 0 3
41806: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
41807: LD_INT 0
41809: PPUSH
41810: PPUSH
41811: PPUSH
41812: PPUSH
// if not hack in hackTanks then
41813: LD_VAR 0 1
41817: PUSH
41818: LD_EXP 120
41822: IN
41823: NOT
41824: IFFALSE 41828
// exit ;
41826: GO 42068
// index := GetElementIndex ( hackTanks , hack ) ;
41828: LD_ADDR_VAR 0 4
41832: PUSH
41833: LD_EXP 120
41837: PPUSH
41838: LD_VAR 0 1
41842: PPUSH
41843: CALL 48929 0 2
41847: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
41848: LD_ADDR_VAR 0 3
41852: PUSH
41853: DOUBLE
41854: LD_EXP 121
41858: PUSH
41859: LD_VAR 0 4
41863: ARRAY
41864: INC
41865: ST_TO_ADDR
41866: LD_INT 1
41868: PUSH
41869: FOR_DOWNTO
41870: IFFALSE 42042
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
41872: LD_ADDR_VAR 0 5
41876: PUSH
41877: LD_EXP 121
41881: PUSH
41882: LD_VAR 0 4
41886: ARRAY
41887: PUSH
41888: LD_VAR 0 3
41892: ARRAY
41893: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
41894: LD_VAR 0 5
41898: PUSH
41899: LD_INT 1
41901: ARRAY
41902: PPUSH
41903: CALL_OW 302
41907: NOT
41908: PUSH
41909: LD_VAR 0 5
41913: PUSH
41914: LD_INT 1
41916: ARRAY
41917: PPUSH
41918: CALL_OW 255
41922: PUSH
41923: LD_VAR 0 1
41927: PPUSH
41928: CALL_OW 255
41932: NONEQUAL
41933: OR
41934: IFFALSE 42040
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
41936: LD_VAR 0 5
41940: PUSH
41941: LD_INT 1
41943: ARRAY
41944: PPUSH
41945: CALL_OW 305
41949: PUSH
41950: LD_VAR 0 5
41954: PUSH
41955: LD_INT 1
41957: ARRAY
41958: PPUSH
41959: CALL_OW 255
41963: PUSH
41964: LD_VAR 0 1
41968: PPUSH
41969: CALL_OW 255
41973: EQUAL
41974: AND
41975: IFFALSE 41999
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
41977: LD_VAR 0 5
41981: PUSH
41982: LD_INT 1
41984: ARRAY
41985: PPUSH
41986: LD_VAR 0 5
41990: PUSH
41991: LD_INT 2
41993: ARRAY
41994: PPUSH
41995: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
41999: LD_ADDR_EXP 121
42003: PUSH
42004: LD_EXP 121
42008: PPUSH
42009: LD_VAR 0 4
42013: PPUSH
42014: LD_EXP 121
42018: PUSH
42019: LD_VAR 0 4
42023: ARRAY
42024: PPUSH
42025: LD_VAR 0 3
42029: PPUSH
42030: CALL_OW 3
42034: PPUSH
42035: CALL_OW 1
42039: ST_TO_ADDR
// end ; end ;
42040: GO 41869
42042: POP
42043: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
42044: LD_VAR 0 1
42048: PPUSH
42049: LD_EXP 121
42053: PUSH
42054: LD_VAR 0 4
42058: ARRAY
42059: PUSH
42060: LD_INT 0
42062: PLUS
42063: PPUSH
42064: CALL_OW 505
// end ;
42068: LD_VAR 0 2
42072: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
42073: LD_INT 0
42075: PPUSH
42076: PPUSH
42077: PPUSH
42078: PPUSH
// if not hack in hackTanks then
42079: LD_VAR 0 1
42083: PUSH
42084: LD_EXP 120
42088: IN
42089: NOT
42090: IFFALSE 42094
// exit ;
42092: GO 42179
// index := GetElementIndex ( hackTanks , hack ) ;
42094: LD_ADDR_VAR 0 5
42098: PUSH
42099: LD_EXP 120
42103: PPUSH
42104: LD_VAR 0 1
42108: PPUSH
42109: CALL 48929 0 2
42113: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
42114: LD_ADDR_VAR 0 4
42118: PUSH
42119: DOUBLE
42120: LD_INT 1
42122: DEC
42123: ST_TO_ADDR
42124: LD_EXP 121
42128: PUSH
42129: LD_VAR 0 5
42133: ARRAY
42134: PUSH
42135: FOR_TO
42136: IFFALSE 42177
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
42138: LD_EXP 121
42142: PUSH
42143: LD_VAR 0 5
42147: ARRAY
42148: PUSH
42149: LD_VAR 0 4
42153: ARRAY
42154: PUSH
42155: LD_INT 1
42157: ARRAY
42158: PUSH
42159: LD_VAR 0 2
42163: EQUAL
42164: IFFALSE 42175
// KillUnit ( vehicle ) ;
42166: LD_VAR 0 2
42170: PPUSH
42171: CALL_OW 66
42175: GO 42135
42177: POP
42178: POP
// end ;
42179: LD_VAR 0 3
42183: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
42184: LD_EXP 125
42188: NOT
42189: IFFALSE 42224
42191: GO 42193
42193: DISABLE
// begin initMiner := true ;
42194: LD_ADDR_EXP 125
42198: PUSH
42199: LD_INT 1
42201: ST_TO_ADDR
// minersList := [ ] ;
42202: LD_ADDR_EXP 126
42206: PUSH
42207: EMPTY
42208: ST_TO_ADDR
// minerMinesList := [ ] ;
42209: LD_ADDR_EXP 127
42213: PUSH
42214: EMPTY
42215: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
42216: LD_ADDR_EXP 128
42220: PUSH
42221: LD_INT 5
42223: ST_TO_ADDR
// end ;
42224: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
42225: LD_EXP 125
42229: PUSH
42230: LD_INT 34
42232: PUSH
42233: LD_EXP 55
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PPUSH
42242: CALL_OW 69
42246: AND
42247: IFFALSE 42710
42249: GO 42251
42251: DISABLE
42252: LD_INT 0
42254: PPUSH
42255: PPUSH
42256: PPUSH
42257: PPUSH
// begin enable ;
42258: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
42259: LD_ADDR_VAR 0 1
42263: PUSH
42264: LD_INT 34
42266: PUSH
42267: LD_EXP 55
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PPUSH
42276: CALL_OW 69
42280: PUSH
42281: FOR_IN
42282: IFFALSE 42354
// begin if not i in minersList then
42284: LD_VAR 0 1
42288: PUSH
42289: LD_EXP 126
42293: IN
42294: NOT
42295: IFFALSE 42352
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
42297: LD_ADDR_EXP 126
42301: PUSH
42302: LD_EXP 126
42306: PPUSH
42307: LD_EXP 126
42311: PUSH
42312: LD_INT 1
42314: PLUS
42315: PPUSH
42316: LD_VAR 0 1
42320: PPUSH
42321: CALL_OW 1
42325: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
42326: LD_ADDR_EXP 127
42330: PUSH
42331: LD_EXP 127
42335: PPUSH
42336: LD_EXP 127
42340: PUSH
42341: LD_INT 1
42343: PLUS
42344: PPUSH
42345: EMPTY
42346: PPUSH
42347: CALL_OW 1
42351: ST_TO_ADDR
// end end ;
42352: GO 42281
42354: POP
42355: POP
// for i := minerMinesList downto 1 do
42356: LD_ADDR_VAR 0 1
42360: PUSH
42361: DOUBLE
42362: LD_EXP 127
42366: INC
42367: ST_TO_ADDR
42368: LD_INT 1
42370: PUSH
42371: FOR_DOWNTO
42372: IFFALSE 42708
// begin if IsLive ( minersList [ i ] ) then
42374: LD_EXP 126
42378: PUSH
42379: LD_VAR 0 1
42383: ARRAY
42384: PPUSH
42385: CALL_OW 300
42389: IFFALSE 42417
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
42391: LD_EXP 126
42395: PUSH
42396: LD_VAR 0 1
42400: ARRAY
42401: PPUSH
42402: LD_EXP 127
42406: PUSH
42407: LD_VAR 0 1
42411: ARRAY
42412: PPUSH
42413: CALL_OW 505
// if not minerMinesList [ i ] then
42417: LD_EXP 127
42421: PUSH
42422: LD_VAR 0 1
42426: ARRAY
42427: NOT
42428: IFFALSE 42432
// continue ;
42430: GO 42371
// for j := minerMinesList [ i ] downto 1 do
42432: LD_ADDR_VAR 0 2
42436: PUSH
42437: DOUBLE
42438: LD_EXP 127
42442: PUSH
42443: LD_VAR 0 1
42447: ARRAY
42448: INC
42449: ST_TO_ADDR
42450: LD_INT 1
42452: PUSH
42453: FOR_DOWNTO
42454: IFFALSE 42704
// begin side := GetSide ( minersList [ i ] ) ;
42456: LD_ADDR_VAR 0 3
42460: PUSH
42461: LD_EXP 126
42465: PUSH
42466: LD_VAR 0 1
42470: ARRAY
42471: PPUSH
42472: CALL_OW 255
42476: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
42477: LD_ADDR_VAR 0 4
42481: PUSH
42482: LD_EXP 127
42486: PUSH
42487: LD_VAR 0 1
42491: ARRAY
42492: PUSH
42493: LD_VAR 0 2
42497: ARRAY
42498: PUSH
42499: LD_INT 1
42501: ARRAY
42502: PPUSH
42503: LD_EXP 127
42507: PUSH
42508: LD_VAR 0 1
42512: ARRAY
42513: PUSH
42514: LD_VAR 0 2
42518: ARRAY
42519: PUSH
42520: LD_INT 2
42522: ARRAY
42523: PPUSH
42524: CALL_OW 428
42528: ST_TO_ADDR
// if not tmp then
42529: LD_VAR 0 4
42533: NOT
42534: IFFALSE 42538
// continue ;
42536: GO 42453
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
42538: LD_VAR 0 4
42542: PUSH
42543: LD_INT 81
42545: PUSH
42546: LD_VAR 0 3
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PPUSH
42555: CALL_OW 69
42559: IN
42560: PUSH
42561: LD_EXP 127
42565: PUSH
42566: LD_VAR 0 1
42570: ARRAY
42571: PUSH
42572: LD_VAR 0 2
42576: ARRAY
42577: PUSH
42578: LD_INT 1
42580: ARRAY
42581: PPUSH
42582: LD_EXP 127
42586: PUSH
42587: LD_VAR 0 1
42591: ARRAY
42592: PUSH
42593: LD_VAR 0 2
42597: ARRAY
42598: PUSH
42599: LD_INT 2
42601: ARRAY
42602: PPUSH
42603: CALL_OW 458
42607: AND
42608: IFFALSE 42702
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
42610: LD_EXP 127
42614: PUSH
42615: LD_VAR 0 1
42619: ARRAY
42620: PUSH
42621: LD_VAR 0 2
42625: ARRAY
42626: PUSH
42627: LD_INT 1
42629: ARRAY
42630: PPUSH
42631: LD_EXP 127
42635: PUSH
42636: LD_VAR 0 1
42640: ARRAY
42641: PUSH
42642: LD_VAR 0 2
42646: ARRAY
42647: PUSH
42648: LD_INT 2
42650: ARRAY
42651: PPUSH
42652: LD_VAR 0 3
42656: PPUSH
42657: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
42661: LD_ADDR_EXP 127
42665: PUSH
42666: LD_EXP 127
42670: PPUSH
42671: LD_VAR 0 1
42675: PPUSH
42676: LD_EXP 127
42680: PUSH
42681: LD_VAR 0 1
42685: ARRAY
42686: PPUSH
42687: LD_VAR 0 2
42691: PPUSH
42692: CALL_OW 3
42696: PPUSH
42697: CALL_OW 1
42701: ST_TO_ADDR
// end ; end ;
42702: GO 42453
42704: POP
42705: POP
// end ;
42706: GO 42371
42708: POP
42709: POP
// end ;
42710: PPOPN 4
42712: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
42713: LD_INT 0
42715: PPUSH
42716: PPUSH
// result := false ;
42717: LD_ADDR_VAR 0 4
42721: PUSH
42722: LD_INT 0
42724: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
42725: LD_VAR 0 1
42729: PPUSH
42730: CALL_OW 264
42734: PUSH
42735: LD_EXP 55
42739: EQUAL
42740: NOT
42741: IFFALSE 42745
// exit ;
42743: GO 42985
// index := GetElementIndex ( minersList , unit ) ;
42745: LD_ADDR_VAR 0 5
42749: PUSH
42750: LD_EXP 126
42754: PPUSH
42755: LD_VAR 0 1
42759: PPUSH
42760: CALL 48929 0 2
42764: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
42765: LD_EXP 127
42769: PUSH
42770: LD_VAR 0 5
42774: ARRAY
42775: PUSH
42776: LD_EXP 128
42780: GREATEREQUAL
42781: IFFALSE 42785
// exit ;
42783: GO 42985
// ComMoveXY ( unit , x , y ) ;
42785: LD_VAR 0 1
42789: PPUSH
42790: LD_VAR 0 2
42794: PPUSH
42795: LD_VAR 0 3
42799: PPUSH
42800: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42804: LD_INT 35
42806: PPUSH
42807: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
42811: LD_VAR 0 1
42815: PPUSH
42816: LD_VAR 0 2
42820: PPUSH
42821: LD_VAR 0 3
42825: PPUSH
42826: CALL 78993 0 3
42830: NOT
42831: PUSH
42832: LD_VAR 0 1
42836: PPUSH
42837: CALL_OW 314
42841: AND
42842: IFFALSE 42846
// exit ;
42844: GO 42985
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
42846: LD_VAR 0 2
42850: PPUSH
42851: LD_VAR 0 3
42855: PPUSH
42856: CALL_OW 428
42860: PUSH
42861: LD_VAR 0 1
42865: EQUAL
42866: PUSH
42867: LD_VAR 0 1
42871: PPUSH
42872: CALL_OW 314
42876: NOT
42877: AND
42878: IFFALSE 42804
// PlaySoundXY ( x , y , PlantMine ) ;
42880: LD_VAR 0 2
42884: PPUSH
42885: LD_VAR 0 3
42889: PPUSH
42890: LD_STRING PlantMine
42892: PPUSH
42893: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
42897: LD_VAR 0 2
42901: PPUSH
42902: LD_VAR 0 3
42906: PPUSH
42907: LD_VAR 0 1
42911: PPUSH
42912: CALL_OW 255
42916: PPUSH
42917: LD_INT 0
42919: PPUSH
42920: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
42924: LD_ADDR_EXP 127
42928: PUSH
42929: LD_EXP 127
42933: PPUSH
42934: LD_VAR 0 5
42938: PUSH
42939: LD_EXP 127
42943: PUSH
42944: LD_VAR 0 5
42948: ARRAY
42949: PUSH
42950: LD_INT 1
42952: PLUS
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PPUSH
42958: LD_VAR 0 2
42962: PUSH
42963: LD_VAR 0 3
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PPUSH
42972: CALL 49144 0 3
42976: ST_TO_ADDR
// result := true ;
42977: LD_ADDR_VAR 0 4
42981: PUSH
42982: LD_INT 1
42984: ST_TO_ADDR
// end ;
42985: LD_VAR 0 4
42989: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
42990: LD_INT 0
42992: PPUSH
42993: PPUSH
42994: PPUSH
// if not unit in minersList then
42995: LD_VAR 0 1
42999: PUSH
43000: LD_EXP 126
43004: IN
43005: NOT
43006: IFFALSE 43010
// exit ;
43008: GO 43402
// index := GetElementIndex ( minersList , unit ) ;
43010: LD_ADDR_VAR 0 6
43014: PUSH
43015: LD_EXP 126
43019: PPUSH
43020: LD_VAR 0 1
43024: PPUSH
43025: CALL 48929 0 2
43029: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
43030: LD_ADDR_VAR 0 5
43034: PUSH
43035: DOUBLE
43036: LD_EXP 127
43040: PUSH
43041: LD_VAR 0 6
43045: ARRAY
43046: INC
43047: ST_TO_ADDR
43048: LD_INT 1
43050: PUSH
43051: FOR_DOWNTO
43052: IFFALSE 43213
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
43054: LD_EXP 127
43058: PUSH
43059: LD_VAR 0 6
43063: ARRAY
43064: PUSH
43065: LD_VAR 0 5
43069: ARRAY
43070: PUSH
43071: LD_INT 1
43073: ARRAY
43074: PUSH
43075: LD_VAR 0 2
43079: EQUAL
43080: PUSH
43081: LD_EXP 127
43085: PUSH
43086: LD_VAR 0 6
43090: ARRAY
43091: PUSH
43092: LD_VAR 0 5
43096: ARRAY
43097: PUSH
43098: LD_INT 2
43100: ARRAY
43101: PUSH
43102: LD_VAR 0 3
43106: EQUAL
43107: AND
43108: IFFALSE 43211
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43110: LD_EXP 127
43114: PUSH
43115: LD_VAR 0 6
43119: ARRAY
43120: PUSH
43121: LD_VAR 0 5
43125: ARRAY
43126: PUSH
43127: LD_INT 1
43129: ARRAY
43130: PPUSH
43131: LD_EXP 127
43135: PUSH
43136: LD_VAR 0 6
43140: ARRAY
43141: PUSH
43142: LD_VAR 0 5
43146: ARRAY
43147: PUSH
43148: LD_INT 2
43150: ARRAY
43151: PPUSH
43152: LD_VAR 0 1
43156: PPUSH
43157: CALL_OW 255
43161: PPUSH
43162: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43166: LD_ADDR_EXP 127
43170: PUSH
43171: LD_EXP 127
43175: PPUSH
43176: LD_VAR 0 6
43180: PPUSH
43181: LD_EXP 127
43185: PUSH
43186: LD_VAR 0 6
43190: ARRAY
43191: PPUSH
43192: LD_VAR 0 5
43196: PPUSH
43197: CALL_OW 3
43201: PPUSH
43202: CALL_OW 1
43206: ST_TO_ADDR
// exit ;
43207: POP
43208: POP
43209: GO 43402
// end ; end ;
43211: GO 43051
43213: POP
43214: POP
// for i := minerMinesList [ index ] downto 1 do
43215: LD_ADDR_VAR 0 5
43219: PUSH
43220: DOUBLE
43221: LD_EXP 127
43225: PUSH
43226: LD_VAR 0 6
43230: ARRAY
43231: INC
43232: ST_TO_ADDR
43233: LD_INT 1
43235: PUSH
43236: FOR_DOWNTO
43237: IFFALSE 43400
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
43239: LD_EXP 127
43243: PUSH
43244: LD_VAR 0 6
43248: ARRAY
43249: PUSH
43250: LD_VAR 0 5
43254: ARRAY
43255: PUSH
43256: LD_INT 1
43258: ARRAY
43259: PPUSH
43260: LD_EXP 127
43264: PUSH
43265: LD_VAR 0 6
43269: ARRAY
43270: PUSH
43271: LD_VAR 0 5
43275: ARRAY
43276: PUSH
43277: LD_INT 2
43279: ARRAY
43280: PPUSH
43281: LD_VAR 0 2
43285: PPUSH
43286: LD_VAR 0 3
43290: PPUSH
43291: CALL_OW 298
43295: PUSH
43296: LD_INT 6
43298: LESS
43299: IFFALSE 43398
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43301: LD_EXP 127
43305: PUSH
43306: LD_VAR 0 6
43310: ARRAY
43311: PUSH
43312: LD_VAR 0 5
43316: ARRAY
43317: PUSH
43318: LD_INT 1
43320: ARRAY
43321: PPUSH
43322: LD_EXP 127
43326: PUSH
43327: LD_VAR 0 6
43331: ARRAY
43332: PUSH
43333: LD_VAR 0 5
43337: ARRAY
43338: PUSH
43339: LD_INT 2
43341: ARRAY
43342: PPUSH
43343: LD_VAR 0 1
43347: PPUSH
43348: CALL_OW 255
43352: PPUSH
43353: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43357: LD_ADDR_EXP 127
43361: PUSH
43362: LD_EXP 127
43366: PPUSH
43367: LD_VAR 0 6
43371: PPUSH
43372: LD_EXP 127
43376: PUSH
43377: LD_VAR 0 6
43381: ARRAY
43382: PPUSH
43383: LD_VAR 0 5
43387: PPUSH
43388: CALL_OW 3
43392: PPUSH
43393: CALL_OW 1
43397: ST_TO_ADDR
// end ; end ;
43398: GO 43236
43400: POP
43401: POP
// end ;
43402: LD_VAR 0 4
43406: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
43407: LD_INT 0
43409: PPUSH
43410: PPUSH
43411: PPUSH
43412: PPUSH
43413: PPUSH
43414: PPUSH
43415: PPUSH
43416: PPUSH
43417: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
43418: LD_VAR 0 1
43422: PPUSH
43423: CALL_OW 264
43427: PUSH
43428: LD_EXP 55
43432: EQUAL
43433: NOT
43434: PUSH
43435: LD_VAR 0 1
43439: PUSH
43440: LD_EXP 126
43444: IN
43445: NOT
43446: OR
43447: IFFALSE 43451
// exit ;
43449: GO 43773
// index := GetElementIndex ( minersList , unit ) ;
43451: LD_ADDR_VAR 0 6
43455: PUSH
43456: LD_EXP 126
43460: PPUSH
43461: LD_VAR 0 1
43465: PPUSH
43466: CALL 48929 0 2
43470: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
43471: LD_ADDR_VAR 0 8
43475: PUSH
43476: LD_EXP 128
43480: PUSH
43481: LD_EXP 127
43485: PUSH
43486: LD_VAR 0 6
43490: ARRAY
43491: MINUS
43492: ST_TO_ADDR
// if not minesFreeAmount then
43493: LD_VAR 0 8
43497: NOT
43498: IFFALSE 43502
// exit ;
43500: GO 43773
// tmp := [ ] ;
43502: LD_ADDR_VAR 0 7
43506: PUSH
43507: EMPTY
43508: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
43509: LD_ADDR_VAR 0 5
43513: PUSH
43514: DOUBLE
43515: LD_INT 1
43517: DEC
43518: ST_TO_ADDR
43519: LD_VAR 0 8
43523: PUSH
43524: FOR_TO
43525: IFFALSE 43720
// begin _d := rand ( 0 , 5 ) ;
43527: LD_ADDR_VAR 0 11
43531: PUSH
43532: LD_INT 0
43534: PPUSH
43535: LD_INT 5
43537: PPUSH
43538: CALL_OW 12
43542: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
43543: LD_ADDR_VAR 0 12
43547: PUSH
43548: LD_INT 2
43550: PPUSH
43551: LD_INT 6
43553: PPUSH
43554: CALL_OW 12
43558: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
43559: LD_ADDR_VAR 0 9
43563: PUSH
43564: LD_VAR 0 2
43568: PPUSH
43569: LD_VAR 0 11
43573: PPUSH
43574: LD_VAR 0 12
43578: PPUSH
43579: CALL_OW 272
43583: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
43584: LD_ADDR_VAR 0 10
43588: PUSH
43589: LD_VAR 0 3
43593: PPUSH
43594: LD_VAR 0 11
43598: PPUSH
43599: LD_VAR 0 12
43603: PPUSH
43604: CALL_OW 273
43608: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
43609: LD_VAR 0 9
43613: PPUSH
43614: LD_VAR 0 10
43618: PPUSH
43619: CALL_OW 488
43623: PUSH
43624: LD_VAR 0 9
43628: PUSH
43629: LD_VAR 0 10
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_VAR 0 7
43642: IN
43643: NOT
43644: AND
43645: PUSH
43646: LD_VAR 0 9
43650: PPUSH
43651: LD_VAR 0 10
43655: PPUSH
43656: CALL_OW 458
43660: NOT
43661: AND
43662: IFFALSE 43704
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
43664: LD_ADDR_VAR 0 7
43668: PUSH
43669: LD_VAR 0 7
43673: PPUSH
43674: LD_VAR 0 7
43678: PUSH
43679: LD_INT 1
43681: PLUS
43682: PPUSH
43683: LD_VAR 0 9
43687: PUSH
43688: LD_VAR 0 10
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PPUSH
43697: CALL_OW 1
43701: ST_TO_ADDR
43702: GO 43718
// i := i - 1 ;
43704: LD_ADDR_VAR 0 5
43708: PUSH
43709: LD_VAR 0 5
43713: PUSH
43714: LD_INT 1
43716: MINUS
43717: ST_TO_ADDR
// end ;
43718: GO 43524
43720: POP
43721: POP
// for i in tmp do
43722: LD_ADDR_VAR 0 5
43726: PUSH
43727: LD_VAR 0 7
43731: PUSH
43732: FOR_IN
43733: IFFALSE 43771
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
43735: LD_VAR 0 1
43739: PPUSH
43740: LD_VAR 0 5
43744: PUSH
43745: LD_INT 1
43747: ARRAY
43748: PPUSH
43749: LD_VAR 0 5
43753: PUSH
43754: LD_INT 2
43756: ARRAY
43757: PPUSH
43758: CALL 42713 0 3
43762: NOT
43763: IFFALSE 43769
// exit ;
43765: POP
43766: POP
43767: GO 43773
43769: GO 43732
43771: POP
43772: POP
// end ;
43773: LD_VAR 0 4
43777: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
43778: LD_INT 0
43780: PPUSH
43781: PPUSH
43782: PPUSH
43783: PPUSH
43784: PPUSH
43785: PPUSH
43786: PPUSH
// if not GetClass ( unit ) = class_sniper then
43787: LD_VAR 0 1
43791: PPUSH
43792: CALL_OW 257
43796: PUSH
43797: LD_INT 5
43799: EQUAL
43800: NOT
43801: IFFALSE 43805
// exit ;
43803: GO 44193
// dist := 8 ;
43805: LD_ADDR_VAR 0 5
43809: PUSH
43810: LD_INT 8
43812: ST_TO_ADDR
// viewRange := 12 ;
43813: LD_ADDR_VAR 0 7
43817: PUSH
43818: LD_INT 12
43820: ST_TO_ADDR
// side := GetSide ( unit ) ;
43821: LD_ADDR_VAR 0 6
43825: PUSH
43826: LD_VAR 0 1
43830: PPUSH
43831: CALL_OW 255
43835: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
43836: LD_INT 61
43838: PPUSH
43839: LD_VAR 0 6
43843: PPUSH
43844: CALL_OW 321
43848: PUSH
43849: LD_INT 2
43851: EQUAL
43852: IFFALSE 43862
// viewRange := 16 ;
43854: LD_ADDR_VAR 0 7
43858: PUSH
43859: LD_INT 16
43861: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
43862: LD_VAR 0 1
43866: PPUSH
43867: LD_VAR 0 2
43871: PPUSH
43872: LD_VAR 0 3
43876: PPUSH
43877: CALL_OW 297
43881: PUSH
43882: LD_VAR 0 5
43886: GREATER
43887: IFFALSE 43966
// begin ComMoveXY ( unit , x , y ) ;
43889: LD_VAR 0 1
43893: PPUSH
43894: LD_VAR 0 2
43898: PPUSH
43899: LD_VAR 0 3
43903: PPUSH
43904: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
43908: LD_INT 35
43910: PPUSH
43911: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
43915: LD_VAR 0 1
43919: PPUSH
43920: LD_VAR 0 2
43924: PPUSH
43925: LD_VAR 0 3
43929: PPUSH
43930: CALL 78993 0 3
43934: NOT
43935: IFFALSE 43939
// exit ;
43937: GO 44193
// until GetDistUnitXY ( unit , x , y ) < dist ;
43939: LD_VAR 0 1
43943: PPUSH
43944: LD_VAR 0 2
43948: PPUSH
43949: LD_VAR 0 3
43953: PPUSH
43954: CALL_OW 297
43958: PUSH
43959: LD_VAR 0 5
43963: LESS
43964: IFFALSE 43908
// end ; ComTurnXY ( unit , x , y ) ;
43966: LD_VAR 0 1
43970: PPUSH
43971: LD_VAR 0 2
43975: PPUSH
43976: LD_VAR 0 3
43980: PPUSH
43981: CALL_OW 118
// wait ( 5 ) ;
43985: LD_INT 5
43987: PPUSH
43988: CALL_OW 67
// _d := GetDir ( unit ) ;
43992: LD_ADDR_VAR 0 10
43996: PUSH
43997: LD_VAR 0 1
44001: PPUSH
44002: CALL_OW 254
44006: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
44007: LD_ADDR_VAR 0 8
44011: PUSH
44012: LD_VAR 0 1
44016: PPUSH
44017: CALL_OW 250
44021: PPUSH
44022: LD_VAR 0 10
44026: PPUSH
44027: LD_VAR 0 5
44031: PPUSH
44032: CALL_OW 272
44036: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
44037: LD_ADDR_VAR 0 9
44041: PUSH
44042: LD_VAR 0 1
44046: PPUSH
44047: CALL_OW 251
44051: PPUSH
44052: LD_VAR 0 10
44056: PPUSH
44057: LD_VAR 0 5
44061: PPUSH
44062: CALL_OW 273
44066: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44067: LD_VAR 0 8
44071: PPUSH
44072: LD_VAR 0 9
44076: PPUSH
44077: CALL_OW 488
44081: NOT
44082: IFFALSE 44086
// exit ;
44084: GO 44193
// ComAnimCustom ( unit , 1 ) ;
44086: LD_VAR 0 1
44090: PPUSH
44091: LD_INT 1
44093: PPUSH
44094: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
44098: LD_VAR 0 8
44102: PPUSH
44103: LD_VAR 0 9
44107: PPUSH
44108: LD_VAR 0 6
44112: PPUSH
44113: LD_VAR 0 7
44117: PPUSH
44118: CALL_OW 330
// repeat wait ( 1 ) ;
44122: LD_INT 1
44124: PPUSH
44125: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
44129: LD_VAR 0 1
44133: PPUSH
44134: CALL_OW 316
44138: PUSH
44139: LD_VAR 0 1
44143: PPUSH
44144: CALL_OW 314
44148: OR
44149: PUSH
44150: LD_VAR 0 1
44154: PPUSH
44155: CALL_OW 302
44159: NOT
44160: OR
44161: PUSH
44162: LD_VAR 0 1
44166: PPUSH
44167: CALL_OW 301
44171: OR
44172: IFFALSE 44122
// RemoveSeeing ( _x , _y , side ) ;
44174: LD_VAR 0 8
44178: PPUSH
44179: LD_VAR 0 9
44183: PPUSH
44184: LD_VAR 0 6
44188: PPUSH
44189: CALL_OW 331
// end ; end_of_file
44193: LD_VAR 0 4
44197: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
44198: LD_INT 0
44200: PPUSH
44201: PPUSH
// if exist_mode then
44202: LD_VAR 0 2
44206: IFFALSE 44231
// unit := CreateCharacter ( prefix & ident ) else
44208: LD_ADDR_VAR 0 5
44212: PUSH
44213: LD_VAR 0 3
44217: PUSH
44218: LD_VAR 0 1
44222: STR
44223: PPUSH
44224: CALL_OW 34
44228: ST_TO_ADDR
44229: GO 44246
// unit := NewCharacter ( ident ) ;
44231: LD_ADDR_VAR 0 5
44235: PUSH
44236: LD_VAR 0 1
44240: PPUSH
44241: CALL_OW 25
44245: ST_TO_ADDR
// result := unit ;
44246: LD_ADDR_VAR 0 4
44250: PUSH
44251: LD_VAR 0 5
44255: ST_TO_ADDR
// end ;
44256: LD_VAR 0 4
44260: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
44261: LD_INT 0
44263: PPUSH
44264: PPUSH
// if not side or not nation then
44265: LD_VAR 0 1
44269: NOT
44270: PUSH
44271: LD_VAR 0 2
44275: NOT
44276: OR
44277: IFFALSE 44281
// exit ;
44279: GO 45045
// case nation of nation_american :
44281: LD_VAR 0 2
44285: PUSH
44286: LD_INT 1
44288: DOUBLE
44289: EQUAL
44290: IFTRUE 44294
44292: GO 44508
44294: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
44295: LD_ADDR_VAR 0 4
44299: PUSH
44300: LD_INT 35
44302: PUSH
44303: LD_INT 45
44305: PUSH
44306: LD_INT 46
44308: PUSH
44309: LD_INT 47
44311: PUSH
44312: LD_INT 82
44314: PUSH
44315: LD_INT 83
44317: PUSH
44318: LD_INT 84
44320: PUSH
44321: LD_INT 85
44323: PUSH
44324: LD_INT 86
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: LD_INT 6
44335: PUSH
44336: LD_INT 15
44338: PUSH
44339: LD_INT 16
44341: PUSH
44342: LD_INT 7
44344: PUSH
44345: LD_INT 12
44347: PUSH
44348: LD_INT 13
44350: PUSH
44351: LD_INT 10
44353: PUSH
44354: LD_INT 14
44356: PUSH
44357: LD_INT 20
44359: PUSH
44360: LD_INT 21
44362: PUSH
44363: LD_INT 22
44365: PUSH
44366: LD_INT 25
44368: PUSH
44369: LD_INT 32
44371: PUSH
44372: LD_INT 27
44374: PUSH
44375: LD_INT 36
44377: PUSH
44378: LD_INT 69
44380: PUSH
44381: LD_INT 39
44383: PUSH
44384: LD_INT 34
44386: PUSH
44387: LD_INT 40
44389: PUSH
44390: LD_INT 48
44392: PUSH
44393: LD_INT 49
44395: PUSH
44396: LD_INT 50
44398: PUSH
44399: LD_INT 51
44401: PUSH
44402: LD_INT 52
44404: PUSH
44405: LD_INT 53
44407: PUSH
44408: LD_INT 54
44410: PUSH
44411: LD_INT 55
44413: PUSH
44414: LD_INT 56
44416: PUSH
44417: LD_INT 57
44419: PUSH
44420: LD_INT 58
44422: PUSH
44423: LD_INT 59
44425: PUSH
44426: LD_INT 60
44428: PUSH
44429: LD_INT 61
44431: PUSH
44432: LD_INT 62
44434: PUSH
44435: LD_INT 80
44437: PUSH
44438: LD_INT 82
44440: PUSH
44441: LD_INT 83
44443: PUSH
44444: LD_INT 84
44446: PUSH
44447: LD_INT 85
44449: PUSH
44450: LD_INT 86
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: ST_TO_ADDR
44506: GO 44969
44508: LD_INT 2
44510: DOUBLE
44511: EQUAL
44512: IFTRUE 44516
44514: GO 44738
44516: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
44517: LD_ADDR_VAR 0 4
44521: PUSH
44522: LD_INT 35
44524: PUSH
44525: LD_INT 45
44527: PUSH
44528: LD_INT 46
44530: PUSH
44531: LD_INT 47
44533: PUSH
44534: LD_INT 82
44536: PUSH
44537: LD_INT 83
44539: PUSH
44540: LD_INT 84
44542: PUSH
44543: LD_INT 85
44545: PUSH
44546: LD_INT 87
44548: PUSH
44549: LD_INT 70
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: LD_INT 11
44557: PUSH
44558: LD_INT 3
44560: PUSH
44561: LD_INT 4
44563: PUSH
44564: LD_INT 5
44566: PUSH
44567: LD_INT 6
44569: PUSH
44570: LD_INT 15
44572: PUSH
44573: LD_INT 18
44575: PUSH
44576: LD_INT 7
44578: PUSH
44579: LD_INT 17
44581: PUSH
44582: LD_INT 8
44584: PUSH
44585: LD_INT 20
44587: PUSH
44588: LD_INT 21
44590: PUSH
44591: LD_INT 22
44593: PUSH
44594: LD_INT 72
44596: PUSH
44597: LD_INT 26
44599: PUSH
44600: LD_INT 69
44602: PUSH
44603: LD_INT 39
44605: PUSH
44606: LD_INT 40
44608: PUSH
44609: LD_INT 41
44611: PUSH
44612: LD_INT 42
44614: PUSH
44615: LD_INT 43
44617: PUSH
44618: LD_INT 48
44620: PUSH
44621: LD_INT 49
44623: PUSH
44624: LD_INT 50
44626: PUSH
44627: LD_INT 51
44629: PUSH
44630: LD_INT 52
44632: PUSH
44633: LD_INT 53
44635: PUSH
44636: LD_INT 54
44638: PUSH
44639: LD_INT 55
44641: PUSH
44642: LD_INT 56
44644: PUSH
44645: LD_INT 60
44647: PUSH
44648: LD_INT 61
44650: PUSH
44651: LD_INT 62
44653: PUSH
44654: LD_INT 66
44656: PUSH
44657: LD_INT 67
44659: PUSH
44660: LD_INT 68
44662: PUSH
44663: LD_INT 81
44665: PUSH
44666: LD_INT 82
44668: PUSH
44669: LD_INT 83
44671: PUSH
44672: LD_INT 84
44674: PUSH
44675: LD_INT 85
44677: PUSH
44678: LD_INT 87
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: ST_TO_ADDR
44736: GO 44969
44738: LD_INT 3
44740: DOUBLE
44741: EQUAL
44742: IFTRUE 44746
44744: GO 44968
44746: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
44747: LD_ADDR_VAR 0 4
44751: PUSH
44752: LD_INT 46
44754: PUSH
44755: LD_INT 47
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: LD_INT 82
44766: PUSH
44767: LD_INT 83
44769: PUSH
44770: LD_INT 84
44772: PUSH
44773: LD_INT 85
44775: PUSH
44776: LD_INT 86
44778: PUSH
44779: LD_INT 11
44781: PUSH
44782: LD_INT 9
44784: PUSH
44785: LD_INT 20
44787: PUSH
44788: LD_INT 19
44790: PUSH
44791: LD_INT 21
44793: PUSH
44794: LD_INT 24
44796: PUSH
44797: LD_INT 22
44799: PUSH
44800: LD_INT 25
44802: PUSH
44803: LD_INT 28
44805: PUSH
44806: LD_INT 29
44808: PUSH
44809: LD_INT 30
44811: PUSH
44812: LD_INT 31
44814: PUSH
44815: LD_INT 37
44817: PUSH
44818: LD_INT 38
44820: PUSH
44821: LD_INT 32
44823: PUSH
44824: LD_INT 27
44826: PUSH
44827: LD_INT 33
44829: PUSH
44830: LD_INT 69
44832: PUSH
44833: LD_INT 39
44835: PUSH
44836: LD_INT 34
44838: PUSH
44839: LD_INT 40
44841: PUSH
44842: LD_INT 71
44844: PUSH
44845: LD_INT 23
44847: PUSH
44848: LD_INT 44
44850: PUSH
44851: LD_INT 48
44853: PUSH
44854: LD_INT 49
44856: PUSH
44857: LD_INT 50
44859: PUSH
44860: LD_INT 51
44862: PUSH
44863: LD_INT 52
44865: PUSH
44866: LD_INT 53
44868: PUSH
44869: LD_INT 54
44871: PUSH
44872: LD_INT 55
44874: PUSH
44875: LD_INT 56
44877: PUSH
44878: LD_INT 57
44880: PUSH
44881: LD_INT 58
44883: PUSH
44884: LD_INT 59
44886: PUSH
44887: LD_INT 63
44889: PUSH
44890: LD_INT 64
44892: PUSH
44893: LD_INT 65
44895: PUSH
44896: LD_INT 82
44898: PUSH
44899: LD_INT 83
44901: PUSH
44902: LD_INT 84
44904: PUSH
44905: LD_INT 85
44907: PUSH
44908: LD_INT 86
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: ST_TO_ADDR
44966: GO 44969
44968: POP
// if state > - 1 and state < 3 then
44969: LD_VAR 0 3
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: GREATER
44978: PUSH
44979: LD_VAR 0 3
44983: PUSH
44984: LD_INT 3
44986: LESS
44987: AND
44988: IFFALSE 45045
// for i in result do
44990: LD_ADDR_VAR 0 5
44994: PUSH
44995: LD_VAR 0 4
44999: PUSH
45000: FOR_IN
45001: IFFALSE 45043
// if GetTech ( i , side ) <> state then
45003: LD_VAR 0 5
45007: PPUSH
45008: LD_VAR 0 1
45012: PPUSH
45013: CALL_OW 321
45017: PUSH
45018: LD_VAR 0 3
45022: NONEQUAL
45023: IFFALSE 45041
// result := result diff i ;
45025: LD_ADDR_VAR 0 4
45029: PUSH
45030: LD_VAR 0 4
45034: PUSH
45035: LD_VAR 0 5
45039: DIFF
45040: ST_TO_ADDR
45041: GO 45000
45043: POP
45044: POP
// end ;
45045: LD_VAR 0 4
45049: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
45050: LD_INT 0
45052: PPUSH
45053: PPUSH
45054: PPUSH
// result := true ;
45055: LD_ADDR_VAR 0 3
45059: PUSH
45060: LD_INT 1
45062: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
45063: LD_ADDR_VAR 0 5
45067: PUSH
45068: LD_VAR 0 2
45072: PPUSH
45073: CALL_OW 480
45077: ST_TO_ADDR
// if not tmp then
45078: LD_VAR 0 5
45082: NOT
45083: IFFALSE 45087
// exit ;
45085: GO 45136
// for i in tmp do
45087: LD_ADDR_VAR 0 4
45091: PUSH
45092: LD_VAR 0 5
45096: PUSH
45097: FOR_IN
45098: IFFALSE 45134
// if GetTech ( i , side ) <> state_researched then
45100: LD_VAR 0 4
45104: PPUSH
45105: LD_VAR 0 1
45109: PPUSH
45110: CALL_OW 321
45114: PUSH
45115: LD_INT 2
45117: NONEQUAL
45118: IFFALSE 45132
// begin result := false ;
45120: LD_ADDR_VAR 0 3
45124: PUSH
45125: LD_INT 0
45127: ST_TO_ADDR
// exit ;
45128: POP
45129: POP
45130: GO 45136
// end ;
45132: GO 45097
45134: POP
45135: POP
// end ;
45136: LD_VAR 0 3
45140: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
45141: LD_INT 0
45143: PPUSH
45144: PPUSH
45145: PPUSH
45146: PPUSH
45147: PPUSH
45148: PPUSH
45149: PPUSH
45150: PPUSH
45151: PPUSH
45152: PPUSH
45153: PPUSH
45154: PPUSH
45155: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
45156: LD_VAR 0 1
45160: NOT
45161: PUSH
45162: LD_VAR 0 1
45166: PPUSH
45167: CALL_OW 257
45171: PUSH
45172: LD_INT 9
45174: NONEQUAL
45175: OR
45176: IFFALSE 45180
// exit ;
45178: GO 45753
// side := GetSide ( unit ) ;
45180: LD_ADDR_VAR 0 9
45184: PUSH
45185: LD_VAR 0 1
45189: PPUSH
45190: CALL_OW 255
45194: ST_TO_ADDR
// tech_space := tech_spacanom ;
45195: LD_ADDR_VAR 0 12
45199: PUSH
45200: LD_INT 29
45202: ST_TO_ADDR
// tech_time := tech_taurad ;
45203: LD_ADDR_VAR 0 13
45207: PUSH
45208: LD_INT 28
45210: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
45211: LD_ADDR_VAR 0 11
45215: PUSH
45216: LD_VAR 0 1
45220: PPUSH
45221: CALL_OW 310
45225: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
45226: LD_VAR 0 11
45230: PPUSH
45231: CALL_OW 247
45235: PUSH
45236: LD_INT 2
45238: EQUAL
45239: IFFALSE 45243
// exit ;
45241: GO 45753
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45243: LD_ADDR_VAR 0 8
45247: PUSH
45248: LD_INT 81
45250: PUSH
45251: LD_VAR 0 9
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 3
45262: PUSH
45263: LD_INT 21
45265: PUSH
45266: LD_INT 3
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PPUSH
45281: CALL_OW 69
45285: ST_TO_ADDR
// if not tmp then
45286: LD_VAR 0 8
45290: NOT
45291: IFFALSE 45295
// exit ;
45293: GO 45753
// if in_unit then
45295: LD_VAR 0 11
45299: IFFALSE 45323
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
45301: LD_ADDR_VAR 0 10
45305: PUSH
45306: LD_VAR 0 8
45310: PPUSH
45311: LD_VAR 0 11
45315: PPUSH
45316: CALL_OW 74
45320: ST_TO_ADDR
45321: GO 45343
// enemy := NearestUnitToUnit ( tmp , unit ) ;
45323: LD_ADDR_VAR 0 10
45327: PUSH
45328: LD_VAR 0 8
45332: PPUSH
45333: LD_VAR 0 1
45337: PPUSH
45338: CALL_OW 74
45342: ST_TO_ADDR
// if not enemy then
45343: LD_VAR 0 10
45347: NOT
45348: IFFALSE 45352
// exit ;
45350: GO 45753
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
45352: LD_VAR 0 11
45356: PUSH
45357: LD_VAR 0 11
45361: PPUSH
45362: LD_VAR 0 10
45366: PPUSH
45367: CALL_OW 296
45371: PUSH
45372: LD_INT 13
45374: GREATER
45375: AND
45376: PUSH
45377: LD_VAR 0 1
45381: PPUSH
45382: LD_VAR 0 10
45386: PPUSH
45387: CALL_OW 296
45391: PUSH
45392: LD_INT 12
45394: GREATER
45395: OR
45396: IFFALSE 45400
// exit ;
45398: GO 45753
// missile := [ 1 ] ;
45400: LD_ADDR_VAR 0 14
45404: PUSH
45405: LD_INT 1
45407: PUSH
45408: EMPTY
45409: LIST
45410: ST_TO_ADDR
// if Researched ( side , tech_space ) then
45411: LD_VAR 0 9
45415: PPUSH
45416: LD_VAR 0 12
45420: PPUSH
45421: CALL_OW 325
45425: IFFALSE 45454
// missile := Insert ( missile , missile + 1 , 2 ) ;
45427: LD_ADDR_VAR 0 14
45431: PUSH
45432: LD_VAR 0 14
45436: PPUSH
45437: LD_VAR 0 14
45441: PUSH
45442: LD_INT 1
45444: PLUS
45445: PPUSH
45446: LD_INT 2
45448: PPUSH
45449: CALL_OW 2
45453: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
45454: LD_VAR 0 9
45458: PPUSH
45459: LD_VAR 0 13
45463: PPUSH
45464: CALL_OW 325
45468: PUSH
45469: LD_VAR 0 10
45473: PPUSH
45474: CALL_OW 255
45478: PPUSH
45479: LD_VAR 0 13
45483: PPUSH
45484: CALL_OW 325
45488: NOT
45489: AND
45490: IFFALSE 45519
// missile := Insert ( missile , missile + 1 , 3 ) ;
45492: LD_ADDR_VAR 0 14
45496: PUSH
45497: LD_VAR 0 14
45501: PPUSH
45502: LD_VAR 0 14
45506: PUSH
45507: LD_INT 1
45509: PLUS
45510: PPUSH
45511: LD_INT 3
45513: PPUSH
45514: CALL_OW 2
45518: ST_TO_ADDR
// if missile < 2 then
45519: LD_VAR 0 14
45523: PUSH
45524: LD_INT 2
45526: LESS
45527: IFFALSE 45531
// exit ;
45529: GO 45753
// x := GetX ( enemy ) ;
45531: LD_ADDR_VAR 0 4
45535: PUSH
45536: LD_VAR 0 10
45540: PPUSH
45541: CALL_OW 250
45545: ST_TO_ADDR
// y := GetY ( enemy ) ;
45546: LD_ADDR_VAR 0 5
45550: PUSH
45551: LD_VAR 0 10
45555: PPUSH
45556: CALL_OW 251
45560: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
45561: LD_ADDR_VAR 0 6
45565: PUSH
45566: LD_VAR 0 4
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PPUSH
45575: LD_INT 1
45577: PPUSH
45578: CALL_OW 12
45582: PLUS
45583: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
45584: LD_ADDR_VAR 0 7
45588: PUSH
45589: LD_VAR 0 5
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PPUSH
45598: LD_INT 1
45600: PPUSH
45601: CALL_OW 12
45605: PLUS
45606: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45607: LD_VAR 0 6
45611: PPUSH
45612: LD_VAR 0 7
45616: PPUSH
45617: CALL_OW 488
45621: NOT
45622: IFFALSE 45644
// begin _x := x ;
45624: LD_ADDR_VAR 0 6
45628: PUSH
45629: LD_VAR 0 4
45633: ST_TO_ADDR
// _y := y ;
45634: LD_ADDR_VAR 0 7
45638: PUSH
45639: LD_VAR 0 5
45643: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
45644: LD_ADDR_VAR 0 3
45648: PUSH
45649: LD_INT 1
45651: PPUSH
45652: LD_VAR 0 14
45656: PPUSH
45657: CALL_OW 12
45661: ST_TO_ADDR
// case i of 1 :
45662: LD_VAR 0 3
45666: PUSH
45667: LD_INT 1
45669: DOUBLE
45670: EQUAL
45671: IFTRUE 45675
45673: GO 45692
45675: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
45676: LD_VAR 0 1
45680: PPUSH
45681: LD_VAR 0 10
45685: PPUSH
45686: CALL_OW 115
45690: GO 45753
45692: LD_INT 2
45694: DOUBLE
45695: EQUAL
45696: IFTRUE 45700
45698: GO 45722
45700: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
45701: LD_VAR 0 1
45705: PPUSH
45706: LD_VAR 0 6
45710: PPUSH
45711: LD_VAR 0 7
45715: PPUSH
45716: CALL_OW 153
45720: GO 45753
45722: LD_INT 3
45724: DOUBLE
45725: EQUAL
45726: IFTRUE 45730
45728: GO 45752
45730: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
45731: LD_VAR 0 1
45735: PPUSH
45736: LD_VAR 0 6
45740: PPUSH
45741: LD_VAR 0 7
45745: PPUSH
45746: CALL_OW 154
45750: GO 45753
45752: POP
// end ;
45753: LD_VAR 0 2
45757: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
45758: LD_INT 0
45760: PPUSH
45761: PPUSH
45762: PPUSH
45763: PPUSH
45764: PPUSH
45765: PPUSH
// if not unit or not building then
45766: LD_VAR 0 1
45770: NOT
45771: PUSH
45772: LD_VAR 0 2
45776: NOT
45777: OR
45778: IFFALSE 45782
// exit ;
45780: GO 45940
// x := GetX ( building ) ;
45782: LD_ADDR_VAR 0 5
45786: PUSH
45787: LD_VAR 0 2
45791: PPUSH
45792: CALL_OW 250
45796: ST_TO_ADDR
// y := GetY ( building ) ;
45797: LD_ADDR_VAR 0 6
45801: PUSH
45802: LD_VAR 0 2
45806: PPUSH
45807: CALL_OW 251
45811: ST_TO_ADDR
// for i = 0 to 5 do
45812: LD_ADDR_VAR 0 4
45816: PUSH
45817: DOUBLE
45818: LD_INT 0
45820: DEC
45821: ST_TO_ADDR
45822: LD_INT 5
45824: PUSH
45825: FOR_TO
45826: IFFALSE 45938
// begin _x := ShiftX ( x , i , 3 ) ;
45828: LD_ADDR_VAR 0 7
45832: PUSH
45833: LD_VAR 0 5
45837: PPUSH
45838: LD_VAR 0 4
45842: PPUSH
45843: LD_INT 3
45845: PPUSH
45846: CALL_OW 272
45850: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
45851: LD_ADDR_VAR 0 8
45855: PUSH
45856: LD_VAR 0 6
45860: PPUSH
45861: LD_VAR 0 4
45865: PPUSH
45866: LD_INT 3
45868: PPUSH
45869: CALL_OW 273
45873: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45874: LD_VAR 0 7
45878: PPUSH
45879: LD_VAR 0 8
45883: PPUSH
45884: CALL_OW 488
45888: NOT
45889: IFFALSE 45893
// continue ;
45891: GO 45825
// if HexInfo ( _x , _y ) = 0 then
45893: LD_VAR 0 7
45897: PPUSH
45898: LD_VAR 0 8
45902: PPUSH
45903: CALL_OW 428
45907: PUSH
45908: LD_INT 0
45910: EQUAL
45911: IFFALSE 45936
// begin ComMoveXY ( unit , _x , _y ) ;
45913: LD_VAR 0 1
45917: PPUSH
45918: LD_VAR 0 7
45922: PPUSH
45923: LD_VAR 0 8
45927: PPUSH
45928: CALL_OW 111
// exit ;
45932: POP
45933: POP
45934: GO 45940
// end ; end ;
45936: GO 45825
45938: POP
45939: POP
// end ;
45940: LD_VAR 0 3
45944: RET
// export function ScanBase ( side , base_area ) ; begin
45945: LD_INT 0
45947: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
45948: LD_ADDR_VAR 0 3
45952: PUSH
45953: LD_VAR 0 2
45957: PPUSH
45958: LD_INT 81
45960: PUSH
45961: LD_VAR 0 1
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PPUSH
45970: CALL_OW 70
45974: ST_TO_ADDR
// end ;
45975: LD_VAR 0 3
45979: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
45980: LD_INT 0
45982: PPUSH
45983: PPUSH
45984: PPUSH
45985: PPUSH
// result := false ;
45986: LD_ADDR_VAR 0 2
45990: PUSH
45991: LD_INT 0
45993: ST_TO_ADDR
// side := GetSide ( unit ) ;
45994: LD_ADDR_VAR 0 3
45998: PUSH
45999: LD_VAR 0 1
46003: PPUSH
46004: CALL_OW 255
46008: ST_TO_ADDR
// nat := GetNation ( unit ) ;
46009: LD_ADDR_VAR 0 4
46013: PUSH
46014: LD_VAR 0 1
46018: PPUSH
46019: CALL_OW 248
46023: ST_TO_ADDR
// case nat of 1 :
46024: LD_VAR 0 4
46028: PUSH
46029: LD_INT 1
46031: DOUBLE
46032: EQUAL
46033: IFTRUE 46037
46035: GO 46048
46037: POP
// tech := tech_lassight ; 2 :
46038: LD_ADDR_VAR 0 5
46042: PUSH
46043: LD_INT 12
46045: ST_TO_ADDR
46046: GO 46087
46048: LD_INT 2
46050: DOUBLE
46051: EQUAL
46052: IFTRUE 46056
46054: GO 46067
46056: POP
// tech := tech_mortar ; 3 :
46057: LD_ADDR_VAR 0 5
46061: PUSH
46062: LD_INT 41
46064: ST_TO_ADDR
46065: GO 46087
46067: LD_INT 3
46069: DOUBLE
46070: EQUAL
46071: IFTRUE 46075
46073: GO 46086
46075: POP
// tech := tech_bazooka ; end ;
46076: LD_ADDR_VAR 0 5
46080: PUSH
46081: LD_INT 44
46083: ST_TO_ADDR
46084: GO 46087
46086: POP
// if Researched ( side , tech ) then
46087: LD_VAR 0 3
46091: PPUSH
46092: LD_VAR 0 5
46096: PPUSH
46097: CALL_OW 325
46101: IFFALSE 46128
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
46103: LD_ADDR_VAR 0 2
46107: PUSH
46108: LD_INT 5
46110: PUSH
46111: LD_INT 8
46113: PUSH
46114: LD_INT 9
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: LIST
46121: PUSH
46122: LD_VAR 0 4
46126: ARRAY
46127: ST_TO_ADDR
// end ;
46128: LD_VAR 0 2
46132: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
46133: LD_INT 0
46135: PPUSH
46136: PPUSH
46137: PPUSH
// if not mines then
46138: LD_VAR 0 2
46142: NOT
46143: IFFALSE 46147
// exit ;
46145: GO 46291
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46147: LD_ADDR_VAR 0 5
46151: PUSH
46152: LD_INT 81
46154: PUSH
46155: LD_VAR 0 1
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 3
46166: PUSH
46167: LD_INT 21
46169: PUSH
46170: LD_INT 3
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PPUSH
46185: CALL_OW 69
46189: ST_TO_ADDR
// for i in mines do
46190: LD_ADDR_VAR 0 4
46194: PUSH
46195: LD_VAR 0 2
46199: PUSH
46200: FOR_IN
46201: IFFALSE 46289
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
46203: LD_VAR 0 4
46207: PUSH
46208: LD_INT 1
46210: ARRAY
46211: PPUSH
46212: LD_VAR 0 4
46216: PUSH
46217: LD_INT 2
46219: ARRAY
46220: PPUSH
46221: CALL_OW 458
46225: NOT
46226: IFFALSE 46230
// continue ;
46228: GO 46200
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
46230: LD_VAR 0 4
46234: PUSH
46235: LD_INT 1
46237: ARRAY
46238: PPUSH
46239: LD_VAR 0 4
46243: PUSH
46244: LD_INT 2
46246: ARRAY
46247: PPUSH
46248: CALL_OW 428
46252: PUSH
46253: LD_VAR 0 5
46257: IN
46258: IFFALSE 46287
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
46260: LD_VAR 0 4
46264: PUSH
46265: LD_INT 1
46267: ARRAY
46268: PPUSH
46269: LD_VAR 0 4
46273: PUSH
46274: LD_INT 2
46276: ARRAY
46277: PPUSH
46278: LD_VAR 0 1
46282: PPUSH
46283: CALL_OW 456
// end ;
46287: GO 46200
46289: POP
46290: POP
// end ;
46291: LD_VAR 0 3
46295: RET
// export function Count ( array ) ; var i ; begin
46296: LD_INT 0
46298: PPUSH
46299: PPUSH
// result := 0 ;
46300: LD_ADDR_VAR 0 2
46304: PUSH
46305: LD_INT 0
46307: ST_TO_ADDR
// for i in array do
46308: LD_ADDR_VAR 0 3
46312: PUSH
46313: LD_VAR 0 1
46317: PUSH
46318: FOR_IN
46319: IFFALSE 46343
// if i then
46321: LD_VAR 0 3
46325: IFFALSE 46341
// result := result + 1 ;
46327: LD_ADDR_VAR 0 2
46331: PUSH
46332: LD_VAR 0 2
46336: PUSH
46337: LD_INT 1
46339: PLUS
46340: ST_TO_ADDR
46341: GO 46318
46343: POP
46344: POP
// end ;
46345: LD_VAR 0 2
46349: RET
// export function IsEmpty ( building ) ; begin
46350: LD_INT 0
46352: PPUSH
// if not building then
46353: LD_VAR 0 1
46357: NOT
46358: IFFALSE 46362
// exit ;
46360: GO 46405
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
46362: LD_ADDR_VAR 0 2
46366: PUSH
46367: LD_VAR 0 1
46371: PUSH
46372: LD_INT 22
46374: PUSH
46375: LD_VAR 0 1
46379: PPUSH
46380: CALL_OW 255
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 58
46391: PUSH
46392: EMPTY
46393: LIST
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PPUSH
46399: CALL_OW 69
46403: IN
46404: ST_TO_ADDR
// end ;
46405: LD_VAR 0 2
46409: RET
// export function IsNotFull ( building ) ; begin
46410: LD_INT 0
46412: PPUSH
// if not building then
46413: LD_VAR 0 1
46417: NOT
46418: IFFALSE 46422
// exit ;
46420: GO 46441
// result := UnitsInside ( building ) < 6 ;
46422: LD_ADDR_VAR 0 2
46426: PUSH
46427: LD_VAR 0 1
46431: PPUSH
46432: CALL_OW 313
46436: PUSH
46437: LD_INT 6
46439: LESS
46440: ST_TO_ADDR
// end ;
46441: LD_VAR 0 2
46445: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
46446: LD_INT 0
46448: PPUSH
46449: PPUSH
46450: PPUSH
46451: PPUSH
// tmp := [ ] ;
46452: LD_ADDR_VAR 0 3
46456: PUSH
46457: EMPTY
46458: ST_TO_ADDR
// list := [ ] ;
46459: LD_ADDR_VAR 0 5
46463: PUSH
46464: EMPTY
46465: ST_TO_ADDR
// for i = 16 to 25 do
46466: LD_ADDR_VAR 0 4
46470: PUSH
46471: DOUBLE
46472: LD_INT 16
46474: DEC
46475: ST_TO_ADDR
46476: LD_INT 25
46478: PUSH
46479: FOR_TO
46480: IFFALSE 46553
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
46482: LD_ADDR_VAR 0 3
46486: PUSH
46487: LD_VAR 0 3
46491: PUSH
46492: LD_INT 22
46494: PUSH
46495: LD_VAR 0 1
46499: PPUSH
46500: CALL_OW 255
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 91
46511: PUSH
46512: LD_VAR 0 1
46516: PUSH
46517: LD_INT 6
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 30
46527: PUSH
46528: LD_VAR 0 4
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: LIST
46541: PUSH
46542: EMPTY
46543: LIST
46544: PPUSH
46545: CALL_OW 69
46549: ADD
46550: ST_TO_ADDR
46551: GO 46479
46553: POP
46554: POP
// for i = 1 to tmp do
46555: LD_ADDR_VAR 0 4
46559: PUSH
46560: DOUBLE
46561: LD_INT 1
46563: DEC
46564: ST_TO_ADDR
46565: LD_VAR 0 3
46569: PUSH
46570: FOR_TO
46571: IFFALSE 46659
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
46573: LD_ADDR_VAR 0 5
46577: PUSH
46578: LD_VAR 0 5
46582: PUSH
46583: LD_VAR 0 3
46587: PUSH
46588: LD_VAR 0 4
46592: ARRAY
46593: PPUSH
46594: CALL_OW 266
46598: PUSH
46599: LD_VAR 0 3
46603: PUSH
46604: LD_VAR 0 4
46608: ARRAY
46609: PPUSH
46610: CALL_OW 250
46614: PUSH
46615: LD_VAR 0 3
46619: PUSH
46620: LD_VAR 0 4
46624: ARRAY
46625: PPUSH
46626: CALL_OW 251
46630: PUSH
46631: LD_VAR 0 3
46635: PUSH
46636: LD_VAR 0 4
46640: ARRAY
46641: PPUSH
46642: CALL_OW 254
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: PUSH
46653: EMPTY
46654: LIST
46655: ADD
46656: ST_TO_ADDR
46657: GO 46570
46659: POP
46660: POP
// result := list ;
46661: LD_ADDR_VAR 0 2
46665: PUSH
46666: LD_VAR 0 5
46670: ST_TO_ADDR
// end ;
46671: LD_VAR 0 2
46675: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
46676: LD_INT 0
46678: PPUSH
46679: PPUSH
46680: PPUSH
46681: PPUSH
46682: PPUSH
46683: PPUSH
46684: PPUSH
// if not factory then
46685: LD_VAR 0 1
46689: NOT
46690: IFFALSE 46694
// exit ;
46692: GO 47287
// if control = control_apeman then
46694: LD_VAR 0 4
46698: PUSH
46699: LD_INT 5
46701: EQUAL
46702: IFFALSE 46811
// begin tmp := UnitsInside ( factory ) ;
46704: LD_ADDR_VAR 0 8
46708: PUSH
46709: LD_VAR 0 1
46713: PPUSH
46714: CALL_OW 313
46718: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
46719: LD_VAR 0 8
46723: PPUSH
46724: LD_INT 25
46726: PUSH
46727: LD_INT 12
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PPUSH
46734: CALL_OW 72
46738: NOT
46739: IFFALSE 46749
// control := control_manual ;
46741: LD_ADDR_VAR 0 4
46745: PUSH
46746: LD_INT 1
46748: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
46749: LD_ADDR_VAR 0 8
46753: PUSH
46754: LD_VAR 0 1
46758: PPUSH
46759: CALL 46446 0 1
46763: ST_TO_ADDR
// if tmp then
46764: LD_VAR 0 8
46768: IFFALSE 46811
// begin for i in tmp do
46770: LD_ADDR_VAR 0 7
46774: PUSH
46775: LD_VAR 0 8
46779: PUSH
46780: FOR_IN
46781: IFFALSE 46809
// if i [ 1 ] = b_ext_radio then
46783: LD_VAR 0 7
46787: PUSH
46788: LD_INT 1
46790: ARRAY
46791: PUSH
46792: LD_INT 22
46794: EQUAL
46795: IFFALSE 46807
// begin control := control_remote ;
46797: LD_ADDR_VAR 0 4
46801: PUSH
46802: LD_INT 2
46804: ST_TO_ADDR
// break ;
46805: GO 46809
// end ;
46807: GO 46780
46809: POP
46810: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46811: LD_VAR 0 1
46815: PPUSH
46816: LD_VAR 0 2
46820: PPUSH
46821: LD_VAR 0 3
46825: PPUSH
46826: LD_VAR 0 4
46830: PPUSH
46831: LD_VAR 0 5
46835: PPUSH
46836: CALL_OW 448
46840: IFFALSE 46875
// begin result := [ chassis , engine , control , weapon ] ;
46842: LD_ADDR_VAR 0 6
46846: PUSH
46847: LD_VAR 0 2
46851: PUSH
46852: LD_VAR 0 3
46856: PUSH
46857: LD_VAR 0 4
46861: PUSH
46862: LD_VAR 0 5
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: ST_TO_ADDR
// exit ;
46873: GO 47287
// end ; _chassis := AvailableChassisList ( factory ) ;
46875: LD_ADDR_VAR 0 9
46879: PUSH
46880: LD_VAR 0 1
46884: PPUSH
46885: CALL_OW 475
46889: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
46890: LD_ADDR_VAR 0 11
46894: PUSH
46895: LD_VAR 0 1
46899: PPUSH
46900: CALL_OW 476
46904: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
46905: LD_ADDR_VAR 0 12
46909: PUSH
46910: LD_VAR 0 1
46914: PPUSH
46915: CALL_OW 477
46919: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
46920: LD_ADDR_VAR 0 10
46924: PUSH
46925: LD_VAR 0 1
46929: PPUSH
46930: CALL_OW 478
46934: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
46935: LD_VAR 0 9
46939: NOT
46940: PUSH
46941: LD_VAR 0 11
46945: NOT
46946: OR
46947: PUSH
46948: LD_VAR 0 12
46952: NOT
46953: OR
46954: PUSH
46955: LD_VAR 0 10
46959: NOT
46960: OR
46961: IFFALSE 46996
// begin result := [ chassis , engine , control , weapon ] ;
46963: LD_ADDR_VAR 0 6
46967: PUSH
46968: LD_VAR 0 2
46972: PUSH
46973: LD_VAR 0 3
46977: PUSH
46978: LD_VAR 0 4
46982: PUSH
46983: LD_VAR 0 5
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: ST_TO_ADDR
// exit ;
46994: GO 47287
// end ; if not chassis in _chassis then
46996: LD_VAR 0 2
47000: PUSH
47001: LD_VAR 0 9
47005: IN
47006: NOT
47007: IFFALSE 47033
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
47009: LD_ADDR_VAR 0 2
47013: PUSH
47014: LD_VAR 0 9
47018: PUSH
47019: LD_INT 1
47021: PPUSH
47022: LD_VAR 0 9
47026: PPUSH
47027: CALL_OW 12
47031: ARRAY
47032: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
47033: LD_VAR 0 2
47037: PPUSH
47038: LD_VAR 0 3
47042: PPUSH
47043: CALL 47292 0 2
47047: NOT
47048: IFFALSE 47107
// repeat engine := _engine [ 1 ] ;
47050: LD_ADDR_VAR 0 3
47054: PUSH
47055: LD_VAR 0 11
47059: PUSH
47060: LD_INT 1
47062: ARRAY
47063: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
47064: LD_ADDR_VAR 0 11
47068: PUSH
47069: LD_VAR 0 11
47073: PPUSH
47074: LD_INT 1
47076: PPUSH
47077: CALL_OW 3
47081: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
47082: LD_VAR 0 2
47086: PPUSH
47087: LD_VAR 0 3
47091: PPUSH
47092: CALL 47292 0 2
47096: PUSH
47097: LD_VAR 0 11
47101: PUSH
47102: EMPTY
47103: EQUAL
47104: OR
47105: IFFALSE 47050
// if not control in _control then
47107: LD_VAR 0 4
47111: PUSH
47112: LD_VAR 0 12
47116: IN
47117: NOT
47118: IFFALSE 47144
// control := _control [ rand ( 1 , _control ) ] ;
47120: LD_ADDR_VAR 0 4
47124: PUSH
47125: LD_VAR 0 12
47129: PUSH
47130: LD_INT 1
47132: PPUSH
47133: LD_VAR 0 12
47137: PPUSH
47138: CALL_OW 12
47142: ARRAY
47143: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
47144: LD_VAR 0 2
47148: PPUSH
47149: LD_VAR 0 5
47153: PPUSH
47154: CALL 47512 0 2
47158: NOT
47159: IFFALSE 47218
// repeat weapon := _weapon [ 1 ] ;
47161: LD_ADDR_VAR 0 5
47165: PUSH
47166: LD_VAR 0 10
47170: PUSH
47171: LD_INT 1
47173: ARRAY
47174: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
47175: LD_ADDR_VAR 0 10
47179: PUSH
47180: LD_VAR 0 10
47184: PPUSH
47185: LD_INT 1
47187: PPUSH
47188: CALL_OW 3
47192: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
47193: LD_VAR 0 2
47197: PPUSH
47198: LD_VAR 0 5
47202: PPUSH
47203: CALL 47512 0 2
47207: PUSH
47208: LD_VAR 0 10
47212: PUSH
47213: EMPTY
47214: EQUAL
47215: OR
47216: IFFALSE 47161
// result := [ ] ;
47218: LD_ADDR_VAR 0 6
47222: PUSH
47223: EMPTY
47224: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
47225: LD_VAR 0 1
47229: PPUSH
47230: LD_VAR 0 2
47234: PPUSH
47235: LD_VAR 0 3
47239: PPUSH
47240: LD_VAR 0 4
47244: PPUSH
47245: LD_VAR 0 5
47249: PPUSH
47250: CALL_OW 448
47254: IFFALSE 47287
// result := [ chassis , engine , control , weapon ] ;
47256: LD_ADDR_VAR 0 6
47260: PUSH
47261: LD_VAR 0 2
47265: PUSH
47266: LD_VAR 0 3
47270: PUSH
47271: LD_VAR 0 4
47275: PUSH
47276: LD_VAR 0 5
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: ST_TO_ADDR
// end ;
47287: LD_VAR 0 6
47291: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
47292: LD_INT 0
47294: PPUSH
// if not chassis or not engine then
47295: LD_VAR 0 1
47299: NOT
47300: PUSH
47301: LD_VAR 0 2
47305: NOT
47306: OR
47307: IFFALSE 47311
// exit ;
47309: GO 47507
// case engine of engine_solar :
47311: LD_VAR 0 2
47315: PUSH
47316: LD_INT 2
47318: DOUBLE
47319: EQUAL
47320: IFTRUE 47324
47322: GO 47362
47324: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
47325: LD_ADDR_VAR 0 3
47329: PUSH
47330: LD_INT 11
47332: PUSH
47333: LD_INT 12
47335: PUSH
47336: LD_INT 13
47338: PUSH
47339: LD_INT 14
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: LD_INT 2
47347: PUSH
47348: LD_INT 3
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: ST_TO_ADDR
47360: GO 47491
47362: LD_INT 1
47364: DOUBLE
47365: EQUAL
47366: IFTRUE 47370
47368: GO 47432
47370: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
47371: LD_ADDR_VAR 0 3
47375: PUSH
47376: LD_INT 11
47378: PUSH
47379: LD_INT 12
47381: PUSH
47382: LD_INT 13
47384: PUSH
47385: LD_INT 14
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: LD_INT 3
47396: PUSH
47397: LD_INT 4
47399: PUSH
47400: LD_INT 5
47402: PUSH
47403: LD_INT 21
47405: PUSH
47406: LD_INT 23
47408: PUSH
47409: LD_INT 22
47411: PUSH
47412: LD_INT 24
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: ST_TO_ADDR
47430: GO 47491
47432: LD_INT 3
47434: DOUBLE
47435: EQUAL
47436: IFTRUE 47440
47438: GO 47490
47440: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47441: LD_ADDR_VAR 0 3
47445: PUSH
47446: LD_INT 13
47448: PUSH
47449: LD_INT 14
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: LD_INT 3
47457: PUSH
47458: LD_INT 4
47460: PUSH
47461: LD_INT 5
47463: PUSH
47464: LD_INT 21
47466: PUSH
47467: LD_INT 22
47469: PUSH
47470: LD_INT 23
47472: PUSH
47473: LD_INT 24
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: ST_TO_ADDR
47488: GO 47491
47490: POP
// result := ( chassis in result ) ;
47491: LD_ADDR_VAR 0 3
47495: PUSH
47496: LD_VAR 0 1
47500: PUSH
47501: LD_VAR 0 3
47505: IN
47506: ST_TO_ADDR
// end ;
47507: LD_VAR 0 3
47511: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
47512: LD_INT 0
47514: PPUSH
// if not chassis or not weapon then
47515: LD_VAR 0 1
47519: NOT
47520: PUSH
47521: LD_VAR 0 2
47525: NOT
47526: OR
47527: IFFALSE 47531
// exit ;
47529: GO 48557
// case weapon of us_machine_gun :
47531: LD_VAR 0 2
47535: PUSH
47536: LD_INT 2
47538: DOUBLE
47539: EQUAL
47540: IFTRUE 47544
47542: GO 47574
47544: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
47545: LD_ADDR_VAR 0 3
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: LD_INT 3
47558: PUSH
47559: LD_INT 4
47561: PUSH
47562: LD_INT 5
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: ST_TO_ADDR
47572: GO 48541
47574: LD_INT 3
47576: DOUBLE
47577: EQUAL
47578: IFTRUE 47582
47580: GO 47612
47582: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
47583: LD_ADDR_VAR 0 3
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: LD_INT 3
47596: PUSH
47597: LD_INT 4
47599: PUSH
47600: LD_INT 5
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: ST_TO_ADDR
47610: GO 48541
47612: LD_INT 11
47614: DOUBLE
47615: EQUAL
47616: IFTRUE 47620
47618: GO 47650
47620: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
47621: LD_ADDR_VAR 0 3
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: LD_INT 2
47631: PUSH
47632: LD_INT 3
47634: PUSH
47635: LD_INT 4
47637: PUSH
47638: LD_INT 5
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: ST_TO_ADDR
47648: GO 48541
47650: LD_INT 4
47652: DOUBLE
47653: EQUAL
47654: IFTRUE 47658
47656: GO 47684
47658: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
47659: LD_ADDR_VAR 0 3
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: LD_INT 3
47669: PUSH
47670: LD_INT 4
47672: PUSH
47673: LD_INT 5
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: ST_TO_ADDR
47682: GO 48541
47684: LD_INT 5
47686: DOUBLE
47687: EQUAL
47688: IFTRUE 47692
47690: GO 47718
47692: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
47693: LD_ADDR_VAR 0 3
47697: PUSH
47698: LD_INT 2
47700: PUSH
47701: LD_INT 3
47703: PUSH
47704: LD_INT 4
47706: PUSH
47707: LD_INT 5
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: ST_TO_ADDR
47716: GO 48541
47718: LD_INT 9
47720: DOUBLE
47721: EQUAL
47722: IFTRUE 47726
47724: GO 47752
47726: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
47727: LD_ADDR_VAR 0 3
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: LD_INT 3
47737: PUSH
47738: LD_INT 4
47740: PUSH
47741: LD_INT 5
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: ST_TO_ADDR
47750: GO 48541
47752: LD_INT 7
47754: DOUBLE
47755: EQUAL
47756: IFTRUE 47760
47758: GO 47786
47760: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
47761: LD_ADDR_VAR 0 3
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: LD_INT 3
47771: PUSH
47772: LD_INT 4
47774: PUSH
47775: LD_INT 5
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: ST_TO_ADDR
47784: GO 48541
47786: LD_INT 12
47788: DOUBLE
47789: EQUAL
47790: IFTRUE 47794
47792: GO 47820
47794: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
47795: LD_ADDR_VAR 0 3
47799: PUSH
47800: LD_INT 2
47802: PUSH
47803: LD_INT 3
47805: PUSH
47806: LD_INT 4
47808: PUSH
47809: LD_INT 5
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: ST_TO_ADDR
47818: GO 48541
47820: LD_INT 13
47822: DOUBLE
47823: EQUAL
47824: IFTRUE 47828
47826: GO 47854
47828: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
47829: LD_ADDR_VAR 0 3
47833: PUSH
47834: LD_INT 2
47836: PUSH
47837: LD_INT 3
47839: PUSH
47840: LD_INT 4
47842: PUSH
47843: LD_INT 5
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: ST_TO_ADDR
47852: GO 48541
47854: LD_INT 14
47856: DOUBLE
47857: EQUAL
47858: IFTRUE 47862
47860: GO 47880
47862: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
47863: LD_ADDR_VAR 0 3
47867: PUSH
47868: LD_INT 4
47870: PUSH
47871: LD_INT 5
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: ST_TO_ADDR
47878: GO 48541
47880: LD_INT 6
47882: DOUBLE
47883: EQUAL
47884: IFTRUE 47888
47886: GO 47906
47888: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
47889: LD_ADDR_VAR 0 3
47893: PUSH
47894: LD_INT 4
47896: PUSH
47897: LD_INT 5
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: ST_TO_ADDR
47904: GO 48541
47906: LD_INT 10
47908: DOUBLE
47909: EQUAL
47910: IFTRUE 47914
47912: GO 47932
47914: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
47915: LD_ADDR_VAR 0 3
47919: PUSH
47920: LD_INT 4
47922: PUSH
47923: LD_INT 5
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: ST_TO_ADDR
47930: GO 48541
47932: LD_INT 22
47934: DOUBLE
47935: EQUAL
47936: IFTRUE 47940
47938: GO 47966
47940: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
47941: LD_ADDR_VAR 0 3
47945: PUSH
47946: LD_INT 11
47948: PUSH
47949: LD_INT 12
47951: PUSH
47952: LD_INT 13
47954: PUSH
47955: LD_INT 14
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: ST_TO_ADDR
47964: GO 48541
47966: LD_INT 23
47968: DOUBLE
47969: EQUAL
47970: IFTRUE 47974
47972: GO 48000
47974: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
47975: LD_ADDR_VAR 0 3
47979: PUSH
47980: LD_INT 11
47982: PUSH
47983: LD_INT 12
47985: PUSH
47986: LD_INT 13
47988: PUSH
47989: LD_INT 14
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: ST_TO_ADDR
47998: GO 48541
48000: LD_INT 24
48002: DOUBLE
48003: EQUAL
48004: IFTRUE 48008
48006: GO 48034
48008: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
48009: LD_ADDR_VAR 0 3
48013: PUSH
48014: LD_INT 11
48016: PUSH
48017: LD_INT 12
48019: PUSH
48020: LD_INT 13
48022: PUSH
48023: LD_INT 14
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: ST_TO_ADDR
48032: GO 48541
48034: LD_INT 30
48036: DOUBLE
48037: EQUAL
48038: IFTRUE 48042
48040: GO 48068
48042: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
48043: LD_ADDR_VAR 0 3
48047: PUSH
48048: LD_INT 11
48050: PUSH
48051: LD_INT 12
48053: PUSH
48054: LD_INT 13
48056: PUSH
48057: LD_INT 14
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: ST_TO_ADDR
48066: GO 48541
48068: LD_INT 25
48070: DOUBLE
48071: EQUAL
48072: IFTRUE 48076
48074: GO 48094
48076: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
48077: LD_ADDR_VAR 0 3
48081: PUSH
48082: LD_INT 13
48084: PUSH
48085: LD_INT 14
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: ST_TO_ADDR
48092: GO 48541
48094: LD_INT 27
48096: DOUBLE
48097: EQUAL
48098: IFTRUE 48102
48100: GO 48120
48102: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
48103: LD_ADDR_VAR 0 3
48107: PUSH
48108: LD_INT 13
48110: PUSH
48111: LD_INT 14
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: ST_TO_ADDR
48118: GO 48541
48120: LD_INT 28
48122: DOUBLE
48123: EQUAL
48124: IFTRUE 48128
48126: GO 48146
48128: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
48129: LD_ADDR_VAR 0 3
48133: PUSH
48134: LD_INT 13
48136: PUSH
48137: LD_INT 14
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: ST_TO_ADDR
48144: GO 48541
48146: LD_INT 29
48148: DOUBLE
48149: EQUAL
48150: IFTRUE 48154
48152: GO 48172
48154: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
48155: LD_ADDR_VAR 0 3
48159: PUSH
48160: LD_INT 13
48162: PUSH
48163: LD_INT 14
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: ST_TO_ADDR
48170: GO 48541
48172: LD_INT 31
48174: DOUBLE
48175: EQUAL
48176: IFTRUE 48180
48178: GO 48198
48180: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
48181: LD_ADDR_VAR 0 3
48185: PUSH
48186: LD_INT 13
48188: PUSH
48189: LD_INT 14
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: ST_TO_ADDR
48196: GO 48541
48198: LD_INT 26
48200: DOUBLE
48201: EQUAL
48202: IFTRUE 48206
48204: GO 48224
48206: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
48207: LD_ADDR_VAR 0 3
48211: PUSH
48212: LD_INT 13
48214: PUSH
48215: LD_INT 14
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: ST_TO_ADDR
48222: GO 48541
48224: LD_INT 42
48226: DOUBLE
48227: EQUAL
48228: IFTRUE 48232
48230: GO 48258
48232: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
48233: LD_ADDR_VAR 0 3
48237: PUSH
48238: LD_INT 21
48240: PUSH
48241: LD_INT 22
48243: PUSH
48244: LD_INT 23
48246: PUSH
48247: LD_INT 24
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: ST_TO_ADDR
48256: GO 48541
48258: LD_INT 43
48260: DOUBLE
48261: EQUAL
48262: IFTRUE 48266
48264: GO 48292
48266: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
48267: LD_ADDR_VAR 0 3
48271: PUSH
48272: LD_INT 21
48274: PUSH
48275: LD_INT 22
48277: PUSH
48278: LD_INT 23
48280: PUSH
48281: LD_INT 24
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: ST_TO_ADDR
48290: GO 48541
48292: LD_INT 44
48294: DOUBLE
48295: EQUAL
48296: IFTRUE 48300
48298: GO 48326
48300: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
48301: LD_ADDR_VAR 0 3
48305: PUSH
48306: LD_INT 21
48308: PUSH
48309: LD_INT 22
48311: PUSH
48312: LD_INT 23
48314: PUSH
48315: LD_INT 24
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: ST_TO_ADDR
48324: GO 48541
48326: LD_INT 45
48328: DOUBLE
48329: EQUAL
48330: IFTRUE 48334
48332: GO 48360
48334: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
48335: LD_ADDR_VAR 0 3
48339: PUSH
48340: LD_INT 21
48342: PUSH
48343: LD_INT 22
48345: PUSH
48346: LD_INT 23
48348: PUSH
48349: LD_INT 24
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: ST_TO_ADDR
48358: GO 48541
48360: LD_INT 49
48362: DOUBLE
48363: EQUAL
48364: IFTRUE 48368
48366: GO 48394
48368: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
48369: LD_ADDR_VAR 0 3
48373: PUSH
48374: LD_INT 21
48376: PUSH
48377: LD_INT 22
48379: PUSH
48380: LD_INT 23
48382: PUSH
48383: LD_INT 24
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: ST_TO_ADDR
48392: GO 48541
48394: LD_INT 51
48396: DOUBLE
48397: EQUAL
48398: IFTRUE 48402
48400: GO 48428
48402: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
48403: LD_ADDR_VAR 0 3
48407: PUSH
48408: LD_INT 21
48410: PUSH
48411: LD_INT 22
48413: PUSH
48414: LD_INT 23
48416: PUSH
48417: LD_INT 24
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: ST_TO_ADDR
48426: GO 48541
48428: LD_INT 52
48430: DOUBLE
48431: EQUAL
48432: IFTRUE 48436
48434: GO 48462
48436: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
48437: LD_ADDR_VAR 0 3
48441: PUSH
48442: LD_INT 21
48444: PUSH
48445: LD_INT 22
48447: PUSH
48448: LD_INT 23
48450: PUSH
48451: LD_INT 24
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: ST_TO_ADDR
48460: GO 48541
48462: LD_INT 53
48464: DOUBLE
48465: EQUAL
48466: IFTRUE 48470
48468: GO 48488
48470: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
48471: LD_ADDR_VAR 0 3
48475: PUSH
48476: LD_INT 23
48478: PUSH
48479: LD_INT 24
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: ST_TO_ADDR
48486: GO 48541
48488: LD_INT 46
48490: DOUBLE
48491: EQUAL
48492: IFTRUE 48496
48494: GO 48514
48496: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
48497: LD_ADDR_VAR 0 3
48501: PUSH
48502: LD_INT 23
48504: PUSH
48505: LD_INT 24
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: ST_TO_ADDR
48512: GO 48541
48514: LD_INT 47
48516: DOUBLE
48517: EQUAL
48518: IFTRUE 48522
48520: GO 48540
48522: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
48523: LD_ADDR_VAR 0 3
48527: PUSH
48528: LD_INT 23
48530: PUSH
48531: LD_INT 24
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: ST_TO_ADDR
48538: GO 48541
48540: POP
// result := ( chassis in result ) ;
48541: LD_ADDR_VAR 0 3
48545: PUSH
48546: LD_VAR 0 1
48550: PUSH
48551: LD_VAR 0 3
48555: IN
48556: ST_TO_ADDR
// end ;
48557: LD_VAR 0 3
48561: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
48562: LD_INT 0
48564: PPUSH
48565: PPUSH
48566: PPUSH
48567: PPUSH
48568: PPUSH
48569: PPUSH
48570: PPUSH
// result := array ;
48571: LD_ADDR_VAR 0 5
48575: PUSH
48576: LD_VAR 0 1
48580: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
48581: LD_VAR 0 1
48585: NOT
48586: PUSH
48587: LD_VAR 0 2
48591: NOT
48592: OR
48593: PUSH
48594: LD_VAR 0 3
48598: NOT
48599: OR
48600: PUSH
48601: LD_VAR 0 2
48605: PUSH
48606: LD_VAR 0 1
48610: GREATER
48611: OR
48612: PUSH
48613: LD_VAR 0 3
48617: PUSH
48618: LD_VAR 0 1
48622: GREATER
48623: OR
48624: IFFALSE 48628
// exit ;
48626: GO 48924
// if direction then
48628: LD_VAR 0 4
48632: IFFALSE 48696
// begin d := 1 ;
48634: LD_ADDR_VAR 0 9
48638: PUSH
48639: LD_INT 1
48641: ST_TO_ADDR
// if i_from > i_to then
48642: LD_VAR 0 2
48646: PUSH
48647: LD_VAR 0 3
48651: GREATER
48652: IFFALSE 48678
// length := ( array - i_from ) + i_to else
48654: LD_ADDR_VAR 0 11
48658: PUSH
48659: LD_VAR 0 1
48663: PUSH
48664: LD_VAR 0 2
48668: MINUS
48669: PUSH
48670: LD_VAR 0 3
48674: PLUS
48675: ST_TO_ADDR
48676: GO 48694
// length := i_to - i_from ;
48678: LD_ADDR_VAR 0 11
48682: PUSH
48683: LD_VAR 0 3
48687: PUSH
48688: LD_VAR 0 2
48692: MINUS
48693: ST_TO_ADDR
// end else
48694: GO 48757
// begin d := - 1 ;
48696: LD_ADDR_VAR 0 9
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: ST_TO_ADDR
// if i_from > i_to then
48705: LD_VAR 0 2
48709: PUSH
48710: LD_VAR 0 3
48714: GREATER
48715: IFFALSE 48735
// length := i_from - i_to else
48717: LD_ADDR_VAR 0 11
48721: PUSH
48722: LD_VAR 0 2
48726: PUSH
48727: LD_VAR 0 3
48731: MINUS
48732: ST_TO_ADDR
48733: GO 48757
// length := ( array - i_to ) + i_from ;
48735: LD_ADDR_VAR 0 11
48739: PUSH
48740: LD_VAR 0 1
48744: PUSH
48745: LD_VAR 0 3
48749: MINUS
48750: PUSH
48751: LD_VAR 0 2
48755: PLUS
48756: ST_TO_ADDR
// end ; if not length then
48757: LD_VAR 0 11
48761: NOT
48762: IFFALSE 48766
// exit ;
48764: GO 48924
// tmp := array ;
48766: LD_ADDR_VAR 0 10
48770: PUSH
48771: LD_VAR 0 1
48775: ST_TO_ADDR
// for i = 1 to length do
48776: LD_ADDR_VAR 0 6
48780: PUSH
48781: DOUBLE
48782: LD_INT 1
48784: DEC
48785: ST_TO_ADDR
48786: LD_VAR 0 11
48790: PUSH
48791: FOR_TO
48792: IFFALSE 48912
// begin for j = 1 to array do
48794: LD_ADDR_VAR 0 7
48798: PUSH
48799: DOUBLE
48800: LD_INT 1
48802: DEC
48803: ST_TO_ADDR
48804: LD_VAR 0 1
48808: PUSH
48809: FOR_TO
48810: IFFALSE 48898
// begin k := j + d ;
48812: LD_ADDR_VAR 0 8
48816: PUSH
48817: LD_VAR 0 7
48821: PUSH
48822: LD_VAR 0 9
48826: PLUS
48827: ST_TO_ADDR
// if k > array then
48828: LD_VAR 0 8
48832: PUSH
48833: LD_VAR 0 1
48837: GREATER
48838: IFFALSE 48848
// k := 1 ;
48840: LD_ADDR_VAR 0 8
48844: PUSH
48845: LD_INT 1
48847: ST_TO_ADDR
// if not k then
48848: LD_VAR 0 8
48852: NOT
48853: IFFALSE 48865
// k := array ;
48855: LD_ADDR_VAR 0 8
48859: PUSH
48860: LD_VAR 0 1
48864: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
48865: LD_ADDR_VAR 0 10
48869: PUSH
48870: LD_VAR 0 10
48874: PPUSH
48875: LD_VAR 0 8
48879: PPUSH
48880: LD_VAR 0 1
48884: PUSH
48885: LD_VAR 0 7
48889: ARRAY
48890: PPUSH
48891: CALL_OW 1
48895: ST_TO_ADDR
// end ;
48896: GO 48809
48898: POP
48899: POP
// array := tmp ;
48900: LD_ADDR_VAR 0 1
48904: PUSH
48905: LD_VAR 0 10
48909: ST_TO_ADDR
// end ;
48910: GO 48791
48912: POP
48913: POP
// result := array ;
48914: LD_ADDR_VAR 0 5
48918: PUSH
48919: LD_VAR 0 1
48923: ST_TO_ADDR
// end ;
48924: LD_VAR 0 5
48928: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
48929: LD_INT 0
48931: PPUSH
48932: PPUSH
// result := 0 ;
48933: LD_ADDR_VAR 0 3
48937: PUSH
48938: LD_INT 0
48940: ST_TO_ADDR
// if not array or not value in array then
48941: LD_VAR 0 1
48945: NOT
48946: PUSH
48947: LD_VAR 0 2
48951: PUSH
48952: LD_VAR 0 1
48956: IN
48957: NOT
48958: OR
48959: IFFALSE 48963
// exit ;
48961: GO 49017
// for i = 1 to array do
48963: LD_ADDR_VAR 0 4
48967: PUSH
48968: DOUBLE
48969: LD_INT 1
48971: DEC
48972: ST_TO_ADDR
48973: LD_VAR 0 1
48977: PUSH
48978: FOR_TO
48979: IFFALSE 49015
// if value = array [ i ] then
48981: LD_VAR 0 2
48985: PUSH
48986: LD_VAR 0 1
48990: PUSH
48991: LD_VAR 0 4
48995: ARRAY
48996: EQUAL
48997: IFFALSE 49013
// begin result := i ;
48999: LD_ADDR_VAR 0 3
49003: PUSH
49004: LD_VAR 0 4
49008: ST_TO_ADDR
// exit ;
49009: POP
49010: POP
49011: GO 49017
// end ;
49013: GO 48978
49015: POP
49016: POP
// end ;
49017: LD_VAR 0 3
49021: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
49022: LD_INT 0
49024: PPUSH
// vc_chassis := chassis ;
49025: LD_ADDR_OWVAR 37
49029: PUSH
49030: LD_VAR 0 1
49034: ST_TO_ADDR
// vc_engine := engine ;
49035: LD_ADDR_OWVAR 39
49039: PUSH
49040: LD_VAR 0 2
49044: ST_TO_ADDR
// vc_control := control ;
49045: LD_ADDR_OWVAR 38
49049: PUSH
49050: LD_VAR 0 3
49054: ST_TO_ADDR
// vc_weapon := weapon ;
49055: LD_ADDR_OWVAR 40
49059: PUSH
49060: LD_VAR 0 4
49064: ST_TO_ADDR
// vc_fuel_battery := fuel ;
49065: LD_ADDR_OWVAR 41
49069: PUSH
49070: LD_VAR 0 5
49074: ST_TO_ADDR
// end ;
49075: LD_VAR 0 6
49079: RET
// export function WantPlant ( unit ) ; var task ; begin
49080: LD_INT 0
49082: PPUSH
49083: PPUSH
// result := false ;
49084: LD_ADDR_VAR 0 2
49088: PUSH
49089: LD_INT 0
49091: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
49092: LD_ADDR_VAR 0 3
49096: PUSH
49097: LD_VAR 0 1
49101: PPUSH
49102: CALL_OW 437
49106: ST_TO_ADDR
// if task then
49107: LD_VAR 0 3
49111: IFFALSE 49139
// if task [ 1 ] [ 1 ] = p then
49113: LD_VAR 0 3
49117: PUSH
49118: LD_INT 1
49120: ARRAY
49121: PUSH
49122: LD_INT 1
49124: ARRAY
49125: PUSH
49126: LD_STRING p
49128: EQUAL
49129: IFFALSE 49139
// result := true ;
49131: LD_ADDR_VAR 0 2
49135: PUSH
49136: LD_INT 1
49138: ST_TO_ADDR
// end ;
49139: LD_VAR 0 2
49143: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
49144: LD_INT 0
49146: PPUSH
49147: PPUSH
49148: PPUSH
49149: PPUSH
// if pos < 1 then
49150: LD_VAR 0 2
49154: PUSH
49155: LD_INT 1
49157: LESS
49158: IFFALSE 49162
// exit ;
49160: GO 49465
// if pos = 1 then
49162: LD_VAR 0 2
49166: PUSH
49167: LD_INT 1
49169: EQUAL
49170: IFFALSE 49203
// result := Replace ( arr , pos [ 1 ] , value ) else
49172: LD_ADDR_VAR 0 4
49176: PUSH
49177: LD_VAR 0 1
49181: PPUSH
49182: LD_VAR 0 2
49186: PUSH
49187: LD_INT 1
49189: ARRAY
49190: PPUSH
49191: LD_VAR 0 3
49195: PPUSH
49196: CALL_OW 1
49200: ST_TO_ADDR
49201: GO 49465
// begin tmp := arr ;
49203: LD_ADDR_VAR 0 6
49207: PUSH
49208: LD_VAR 0 1
49212: ST_TO_ADDR
// s_arr := [ tmp ] ;
49213: LD_ADDR_VAR 0 7
49217: PUSH
49218: LD_VAR 0 6
49222: PUSH
49223: EMPTY
49224: LIST
49225: ST_TO_ADDR
// for i = 1 to pos - 1 do
49226: LD_ADDR_VAR 0 5
49230: PUSH
49231: DOUBLE
49232: LD_INT 1
49234: DEC
49235: ST_TO_ADDR
49236: LD_VAR 0 2
49240: PUSH
49241: LD_INT 1
49243: MINUS
49244: PUSH
49245: FOR_TO
49246: IFFALSE 49291
// begin tmp := tmp [ pos [ i ] ] ;
49248: LD_ADDR_VAR 0 6
49252: PUSH
49253: LD_VAR 0 6
49257: PUSH
49258: LD_VAR 0 2
49262: PUSH
49263: LD_VAR 0 5
49267: ARRAY
49268: ARRAY
49269: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
49270: LD_ADDR_VAR 0 7
49274: PUSH
49275: LD_VAR 0 7
49279: PUSH
49280: LD_VAR 0 6
49284: PUSH
49285: EMPTY
49286: LIST
49287: ADD
49288: ST_TO_ADDR
// end ;
49289: GO 49245
49291: POP
49292: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
49293: LD_ADDR_VAR 0 6
49297: PUSH
49298: LD_VAR 0 6
49302: PPUSH
49303: LD_VAR 0 2
49307: PUSH
49308: LD_VAR 0 2
49312: ARRAY
49313: PPUSH
49314: LD_VAR 0 3
49318: PPUSH
49319: CALL_OW 1
49323: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
49324: LD_ADDR_VAR 0 7
49328: PUSH
49329: LD_VAR 0 7
49333: PPUSH
49334: LD_VAR 0 7
49338: PPUSH
49339: LD_VAR 0 6
49343: PPUSH
49344: CALL_OW 1
49348: ST_TO_ADDR
// for i = s_arr downto 2 do
49349: LD_ADDR_VAR 0 5
49353: PUSH
49354: DOUBLE
49355: LD_VAR 0 7
49359: INC
49360: ST_TO_ADDR
49361: LD_INT 2
49363: PUSH
49364: FOR_DOWNTO
49365: IFFALSE 49449
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
49367: LD_ADDR_VAR 0 6
49371: PUSH
49372: LD_VAR 0 7
49376: PUSH
49377: LD_VAR 0 5
49381: PUSH
49382: LD_INT 1
49384: MINUS
49385: ARRAY
49386: PPUSH
49387: LD_VAR 0 2
49391: PUSH
49392: LD_VAR 0 5
49396: PUSH
49397: LD_INT 1
49399: MINUS
49400: ARRAY
49401: PPUSH
49402: LD_VAR 0 7
49406: PUSH
49407: LD_VAR 0 5
49411: ARRAY
49412: PPUSH
49413: CALL_OW 1
49417: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
49418: LD_ADDR_VAR 0 7
49422: PUSH
49423: LD_VAR 0 7
49427: PPUSH
49428: LD_VAR 0 5
49432: PUSH
49433: LD_INT 1
49435: MINUS
49436: PPUSH
49437: LD_VAR 0 6
49441: PPUSH
49442: CALL_OW 1
49446: ST_TO_ADDR
// end ;
49447: GO 49364
49449: POP
49450: POP
// result := s_arr [ 1 ] ;
49451: LD_ADDR_VAR 0 4
49455: PUSH
49456: LD_VAR 0 7
49460: PUSH
49461: LD_INT 1
49463: ARRAY
49464: ST_TO_ADDR
// end ; end ;
49465: LD_VAR 0 4
49469: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
49470: LD_INT 0
49472: PPUSH
49473: PPUSH
// if not list then
49474: LD_VAR 0 1
49478: NOT
49479: IFFALSE 49483
// exit ;
49481: GO 49574
// i := list [ pos1 ] ;
49483: LD_ADDR_VAR 0 5
49487: PUSH
49488: LD_VAR 0 1
49492: PUSH
49493: LD_VAR 0 2
49497: ARRAY
49498: ST_TO_ADDR
// if not i then
49499: LD_VAR 0 5
49503: NOT
49504: IFFALSE 49508
// exit ;
49506: GO 49574
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
49508: LD_ADDR_VAR 0 1
49512: PUSH
49513: LD_VAR 0 1
49517: PPUSH
49518: LD_VAR 0 2
49522: PPUSH
49523: LD_VAR 0 1
49527: PUSH
49528: LD_VAR 0 3
49532: ARRAY
49533: PPUSH
49534: CALL_OW 1
49538: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
49539: LD_ADDR_VAR 0 1
49543: PUSH
49544: LD_VAR 0 1
49548: PPUSH
49549: LD_VAR 0 3
49553: PPUSH
49554: LD_VAR 0 5
49558: PPUSH
49559: CALL_OW 1
49563: ST_TO_ADDR
// result := list ;
49564: LD_ADDR_VAR 0 4
49568: PUSH
49569: LD_VAR 0 1
49573: ST_TO_ADDR
// end ;
49574: LD_VAR 0 4
49578: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
49579: LD_INT 0
49581: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
49582: LD_ADDR_VAR 0 5
49586: PUSH
49587: LD_VAR 0 1
49591: PPUSH
49592: CALL_OW 250
49596: PPUSH
49597: LD_VAR 0 1
49601: PPUSH
49602: CALL_OW 251
49606: PPUSH
49607: LD_VAR 0 2
49611: PPUSH
49612: LD_VAR 0 3
49616: PPUSH
49617: LD_VAR 0 4
49621: PPUSH
49622: CALL 49632 0 5
49626: ST_TO_ADDR
// end ;
49627: LD_VAR 0 5
49631: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49632: LD_INT 0
49634: PPUSH
49635: PPUSH
49636: PPUSH
49637: PPUSH
// if not list then
49638: LD_VAR 0 3
49642: NOT
49643: IFFALSE 49647
// exit ;
49645: GO 50035
// result := [ ] ;
49647: LD_ADDR_VAR 0 6
49651: PUSH
49652: EMPTY
49653: ST_TO_ADDR
// for i in list do
49654: LD_ADDR_VAR 0 7
49658: PUSH
49659: LD_VAR 0 3
49663: PUSH
49664: FOR_IN
49665: IFFALSE 49867
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49667: LD_ADDR_VAR 0 9
49671: PUSH
49672: LD_VAR 0 7
49676: PPUSH
49677: LD_VAR 0 1
49681: PPUSH
49682: LD_VAR 0 2
49686: PPUSH
49687: CALL_OW 297
49691: ST_TO_ADDR
// if not result then
49692: LD_VAR 0 6
49696: NOT
49697: IFFALSE 49723
// result := [ [ i , tmp ] ] else
49699: LD_ADDR_VAR 0 6
49703: PUSH
49704: LD_VAR 0 7
49708: PUSH
49709: LD_VAR 0 9
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: EMPTY
49719: LIST
49720: ST_TO_ADDR
49721: GO 49865
// begin if result [ result ] [ 2 ] < tmp then
49723: LD_VAR 0 6
49727: PUSH
49728: LD_VAR 0 6
49732: ARRAY
49733: PUSH
49734: LD_INT 2
49736: ARRAY
49737: PUSH
49738: LD_VAR 0 9
49742: LESS
49743: IFFALSE 49785
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
49745: LD_ADDR_VAR 0 6
49749: PUSH
49750: LD_VAR 0 6
49754: PPUSH
49755: LD_VAR 0 6
49759: PUSH
49760: LD_INT 1
49762: PLUS
49763: PPUSH
49764: LD_VAR 0 7
49768: PUSH
49769: LD_VAR 0 9
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PPUSH
49778: CALL_OW 2
49782: ST_TO_ADDR
49783: GO 49865
// for j = 1 to result do
49785: LD_ADDR_VAR 0 8
49789: PUSH
49790: DOUBLE
49791: LD_INT 1
49793: DEC
49794: ST_TO_ADDR
49795: LD_VAR 0 6
49799: PUSH
49800: FOR_TO
49801: IFFALSE 49863
// begin if tmp < result [ j ] [ 2 ] then
49803: LD_VAR 0 9
49807: PUSH
49808: LD_VAR 0 6
49812: PUSH
49813: LD_VAR 0 8
49817: ARRAY
49818: PUSH
49819: LD_INT 2
49821: ARRAY
49822: LESS
49823: IFFALSE 49861
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49825: LD_ADDR_VAR 0 6
49829: PUSH
49830: LD_VAR 0 6
49834: PPUSH
49835: LD_VAR 0 8
49839: PPUSH
49840: LD_VAR 0 7
49844: PUSH
49845: LD_VAR 0 9
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PPUSH
49854: CALL_OW 2
49858: ST_TO_ADDR
// break ;
49859: GO 49863
// end ; end ;
49861: GO 49800
49863: POP
49864: POP
// end ; end ;
49865: GO 49664
49867: POP
49868: POP
// if result and not asc then
49869: LD_VAR 0 6
49873: PUSH
49874: LD_VAR 0 4
49878: NOT
49879: AND
49880: IFFALSE 49955
// begin tmp := result ;
49882: LD_ADDR_VAR 0 9
49886: PUSH
49887: LD_VAR 0 6
49891: ST_TO_ADDR
// for i = tmp downto 1 do
49892: LD_ADDR_VAR 0 7
49896: PUSH
49897: DOUBLE
49898: LD_VAR 0 9
49902: INC
49903: ST_TO_ADDR
49904: LD_INT 1
49906: PUSH
49907: FOR_DOWNTO
49908: IFFALSE 49953
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
49910: LD_ADDR_VAR 0 6
49914: PUSH
49915: LD_VAR 0 6
49919: PPUSH
49920: LD_VAR 0 9
49924: PUSH
49925: LD_VAR 0 7
49929: MINUS
49930: PUSH
49931: LD_INT 1
49933: PLUS
49934: PPUSH
49935: LD_VAR 0 9
49939: PUSH
49940: LD_VAR 0 7
49944: ARRAY
49945: PPUSH
49946: CALL_OW 1
49950: ST_TO_ADDR
49951: GO 49907
49953: POP
49954: POP
// end ; tmp := [ ] ;
49955: LD_ADDR_VAR 0 9
49959: PUSH
49960: EMPTY
49961: ST_TO_ADDR
// if mode then
49962: LD_VAR 0 5
49966: IFFALSE 50035
// begin for i = 1 to result do
49968: LD_ADDR_VAR 0 7
49972: PUSH
49973: DOUBLE
49974: LD_INT 1
49976: DEC
49977: ST_TO_ADDR
49978: LD_VAR 0 6
49982: PUSH
49983: FOR_TO
49984: IFFALSE 50023
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
49986: LD_ADDR_VAR 0 9
49990: PUSH
49991: LD_VAR 0 9
49995: PPUSH
49996: LD_VAR 0 7
50000: PPUSH
50001: LD_VAR 0 6
50005: PUSH
50006: LD_VAR 0 7
50010: ARRAY
50011: PUSH
50012: LD_INT 1
50014: ARRAY
50015: PPUSH
50016: CALL_OW 1
50020: ST_TO_ADDR
50021: GO 49983
50023: POP
50024: POP
// result := tmp ;
50025: LD_ADDR_VAR 0 6
50029: PUSH
50030: LD_VAR 0 9
50034: ST_TO_ADDR
// end ; end ;
50035: LD_VAR 0 6
50039: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
50040: LD_INT 0
50042: PPUSH
50043: PPUSH
50044: PPUSH
50045: PPUSH
50046: PPUSH
50047: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
50048: LD_ADDR_VAR 0 5
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: EMPTY
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: ST_TO_ADDR
// if not x or not y then
50070: LD_VAR 0 2
50074: NOT
50075: PUSH
50076: LD_VAR 0 3
50080: NOT
50081: OR
50082: IFFALSE 50086
// exit ;
50084: GO 51732
// if not range then
50086: LD_VAR 0 4
50090: NOT
50091: IFFALSE 50101
// range := 10 ;
50093: LD_ADDR_VAR 0 4
50097: PUSH
50098: LD_INT 10
50100: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
50101: LD_ADDR_VAR 0 8
50105: PUSH
50106: LD_INT 81
50108: PUSH
50109: LD_VAR 0 1
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 92
50120: PUSH
50121: LD_VAR 0 2
50125: PUSH
50126: LD_VAR 0 3
50130: PUSH
50131: LD_VAR 0 4
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 3
50144: PUSH
50145: LD_INT 21
50147: PUSH
50148: LD_INT 3
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: LIST
50163: PPUSH
50164: CALL_OW 69
50168: ST_TO_ADDR
// if not tmp then
50169: LD_VAR 0 8
50173: NOT
50174: IFFALSE 50178
// exit ;
50176: GO 51732
// for i in tmp do
50178: LD_ADDR_VAR 0 6
50182: PUSH
50183: LD_VAR 0 8
50187: PUSH
50188: FOR_IN
50189: IFFALSE 51707
// begin points := [ 0 , 0 , 0 ] ;
50191: LD_ADDR_VAR 0 9
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: LIST
50209: ST_TO_ADDR
// bpoints := 1 ;
50210: LD_ADDR_VAR 0 10
50214: PUSH
50215: LD_INT 1
50217: ST_TO_ADDR
// case GetType ( i ) of unit_human :
50218: LD_VAR 0 6
50222: PPUSH
50223: CALL_OW 247
50227: PUSH
50228: LD_INT 1
50230: DOUBLE
50231: EQUAL
50232: IFTRUE 50236
50234: GO 50814
50236: POP
// begin if GetClass ( i ) = 1 then
50237: LD_VAR 0 6
50241: PPUSH
50242: CALL_OW 257
50246: PUSH
50247: LD_INT 1
50249: EQUAL
50250: IFFALSE 50271
// points := [ 10 , 5 , 3 ] ;
50252: LD_ADDR_VAR 0 9
50256: PUSH
50257: LD_INT 10
50259: PUSH
50260: LD_INT 5
50262: PUSH
50263: LD_INT 3
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: LIST
50270: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
50271: LD_VAR 0 6
50275: PPUSH
50276: CALL_OW 257
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: LD_INT 3
50286: PUSH
50287: LD_INT 4
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: LIST
50294: IN
50295: IFFALSE 50316
// points := [ 3 , 2 , 1 ] ;
50297: LD_ADDR_VAR 0 9
50301: PUSH
50302: LD_INT 3
50304: PUSH
50305: LD_INT 2
50307: PUSH
50308: LD_INT 1
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: LIST
50315: ST_TO_ADDR
// if GetClass ( i ) = 5 then
50316: LD_VAR 0 6
50320: PPUSH
50321: CALL_OW 257
50325: PUSH
50326: LD_INT 5
50328: EQUAL
50329: IFFALSE 50350
// points := [ 130 , 5 , 2 ] ;
50331: LD_ADDR_VAR 0 9
50335: PUSH
50336: LD_INT 130
50338: PUSH
50339: LD_INT 5
50341: PUSH
50342: LD_INT 2
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: LIST
50349: ST_TO_ADDR
// if GetClass ( i ) = 8 then
50350: LD_VAR 0 6
50354: PPUSH
50355: CALL_OW 257
50359: PUSH
50360: LD_INT 8
50362: EQUAL
50363: IFFALSE 50384
// points := [ 35 , 35 , 30 ] ;
50365: LD_ADDR_VAR 0 9
50369: PUSH
50370: LD_INT 35
50372: PUSH
50373: LD_INT 35
50375: PUSH
50376: LD_INT 30
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: LIST
50383: ST_TO_ADDR
// if GetClass ( i ) = 9 then
50384: LD_VAR 0 6
50388: PPUSH
50389: CALL_OW 257
50393: PUSH
50394: LD_INT 9
50396: EQUAL
50397: IFFALSE 50418
// points := [ 20 , 55 , 40 ] ;
50399: LD_ADDR_VAR 0 9
50403: PUSH
50404: LD_INT 20
50406: PUSH
50407: LD_INT 55
50409: PUSH
50410: LD_INT 40
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: LIST
50417: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
50418: LD_VAR 0 6
50422: PPUSH
50423: CALL_OW 257
50427: PUSH
50428: LD_INT 12
50430: PUSH
50431: LD_INT 16
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: IN
50438: IFFALSE 50459
// points := [ 5 , 3 , 2 ] ;
50440: LD_ADDR_VAR 0 9
50444: PUSH
50445: LD_INT 5
50447: PUSH
50448: LD_INT 3
50450: PUSH
50451: LD_INT 2
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: LIST
50458: ST_TO_ADDR
// if GetClass ( i ) = 17 then
50459: LD_VAR 0 6
50463: PPUSH
50464: CALL_OW 257
50468: PUSH
50469: LD_INT 17
50471: EQUAL
50472: IFFALSE 50493
// points := [ 100 , 50 , 75 ] ;
50474: LD_ADDR_VAR 0 9
50478: PUSH
50479: LD_INT 100
50481: PUSH
50482: LD_INT 50
50484: PUSH
50485: LD_INT 75
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: LIST
50492: ST_TO_ADDR
// if GetClass ( i ) = 15 then
50493: LD_VAR 0 6
50497: PPUSH
50498: CALL_OW 257
50502: PUSH
50503: LD_INT 15
50505: EQUAL
50506: IFFALSE 50527
// points := [ 10 , 5 , 3 ] ;
50508: LD_ADDR_VAR 0 9
50512: PUSH
50513: LD_INT 10
50515: PUSH
50516: LD_INT 5
50518: PUSH
50519: LD_INT 3
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: LIST
50526: ST_TO_ADDR
// if GetClass ( i ) = 14 then
50527: LD_VAR 0 6
50531: PPUSH
50532: CALL_OW 257
50536: PUSH
50537: LD_INT 14
50539: EQUAL
50540: IFFALSE 50561
// points := [ 10 , 0 , 0 ] ;
50542: LD_ADDR_VAR 0 9
50546: PUSH
50547: LD_INT 10
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: LIST
50560: ST_TO_ADDR
// if GetClass ( i ) = 11 then
50561: LD_VAR 0 6
50565: PPUSH
50566: CALL_OW 257
50570: PUSH
50571: LD_INT 11
50573: EQUAL
50574: IFFALSE 50595
// points := [ 30 , 10 , 5 ] ;
50576: LD_ADDR_VAR 0 9
50580: PUSH
50581: LD_INT 30
50583: PUSH
50584: LD_INT 10
50586: PUSH
50587: LD_INT 5
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: LIST
50594: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50595: LD_VAR 0 1
50599: PPUSH
50600: LD_INT 5
50602: PPUSH
50603: CALL_OW 321
50607: PUSH
50608: LD_INT 2
50610: EQUAL
50611: IFFALSE 50628
// bpoints := bpoints * 1.8 ;
50613: LD_ADDR_VAR 0 10
50617: PUSH
50618: LD_VAR 0 10
50622: PUSH
50623: LD_REAL  1.80000000000000E+0000
50626: MUL
50627: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50628: LD_VAR 0 6
50632: PPUSH
50633: CALL_OW 257
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: LD_INT 3
50646: PUSH
50647: LD_INT 4
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: IN
50656: PUSH
50657: LD_VAR 0 1
50661: PPUSH
50662: LD_INT 51
50664: PPUSH
50665: CALL_OW 321
50669: PUSH
50670: LD_INT 2
50672: EQUAL
50673: AND
50674: IFFALSE 50691
// bpoints := bpoints * 1.2 ;
50676: LD_ADDR_VAR 0 10
50680: PUSH
50681: LD_VAR 0 10
50685: PUSH
50686: LD_REAL  1.20000000000000E+0000
50689: MUL
50690: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50691: LD_VAR 0 6
50695: PPUSH
50696: CALL_OW 257
50700: PUSH
50701: LD_INT 5
50703: PUSH
50704: LD_INT 7
50706: PUSH
50707: LD_INT 9
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: LIST
50714: IN
50715: PUSH
50716: LD_VAR 0 1
50720: PPUSH
50721: LD_INT 52
50723: PPUSH
50724: CALL_OW 321
50728: PUSH
50729: LD_INT 2
50731: EQUAL
50732: AND
50733: IFFALSE 50750
// bpoints := bpoints * 1.5 ;
50735: LD_ADDR_VAR 0 10
50739: PUSH
50740: LD_VAR 0 10
50744: PUSH
50745: LD_REAL  1.50000000000000E+0000
50748: MUL
50749: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
50750: LD_VAR 0 1
50754: PPUSH
50755: LD_INT 66
50757: PPUSH
50758: CALL_OW 321
50762: PUSH
50763: LD_INT 2
50765: EQUAL
50766: IFFALSE 50783
// bpoints := bpoints * 1.1 ;
50768: LD_ADDR_VAR 0 10
50772: PUSH
50773: LD_VAR 0 10
50777: PUSH
50778: LD_REAL  1.10000000000000E+0000
50781: MUL
50782: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
50783: LD_ADDR_VAR 0 10
50787: PUSH
50788: LD_VAR 0 10
50792: PUSH
50793: LD_VAR 0 6
50797: PPUSH
50798: LD_INT 1
50800: PPUSH
50801: CALL_OW 259
50805: PUSH
50806: LD_REAL  1.15000000000000E+0000
50809: MUL
50810: MUL
50811: ST_TO_ADDR
// end ; unit_vehicle :
50812: GO 51636
50814: LD_INT 2
50816: DOUBLE
50817: EQUAL
50818: IFTRUE 50822
50820: GO 51624
50822: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
50823: LD_VAR 0 6
50827: PPUSH
50828: CALL_OW 264
50832: PUSH
50833: LD_INT 2
50835: PUSH
50836: LD_INT 42
50838: PUSH
50839: LD_INT 24
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: LIST
50846: IN
50847: IFFALSE 50868
// points := [ 25 , 5 , 3 ] ;
50849: LD_ADDR_VAR 0 9
50853: PUSH
50854: LD_INT 25
50856: PUSH
50857: LD_INT 5
50859: PUSH
50860: LD_INT 3
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: LIST
50867: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
50868: LD_VAR 0 6
50872: PPUSH
50873: CALL_OW 264
50877: PUSH
50878: LD_INT 4
50880: PUSH
50881: LD_INT 43
50883: PUSH
50884: LD_INT 25
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: LIST
50891: IN
50892: IFFALSE 50913
// points := [ 40 , 15 , 5 ] ;
50894: LD_ADDR_VAR 0 9
50898: PUSH
50899: LD_INT 40
50901: PUSH
50902: LD_INT 15
50904: PUSH
50905: LD_INT 5
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: LIST
50912: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
50913: LD_VAR 0 6
50917: PPUSH
50918: CALL_OW 264
50922: PUSH
50923: LD_INT 3
50925: PUSH
50926: LD_INT 23
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: IN
50933: IFFALSE 50954
// points := [ 7 , 25 , 8 ] ;
50935: LD_ADDR_VAR 0 9
50939: PUSH
50940: LD_INT 7
50942: PUSH
50943: LD_INT 25
50945: PUSH
50946: LD_INT 8
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: LIST
50953: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
50954: LD_VAR 0 6
50958: PPUSH
50959: CALL_OW 264
50963: PUSH
50964: LD_INT 5
50966: PUSH
50967: LD_INT 27
50969: PUSH
50970: LD_INT 44
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: LIST
50977: IN
50978: IFFALSE 50999
// points := [ 14 , 50 , 16 ] ;
50980: LD_ADDR_VAR 0 9
50984: PUSH
50985: LD_INT 14
50987: PUSH
50988: LD_INT 50
50990: PUSH
50991: LD_INT 16
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: LIST
50998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
50999: LD_VAR 0 6
51003: PPUSH
51004: CALL_OW 264
51008: PUSH
51009: LD_INT 6
51011: PUSH
51012: LD_INT 46
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: IN
51019: IFFALSE 51040
// points := [ 32 , 120 , 70 ] ;
51021: LD_ADDR_VAR 0 9
51025: PUSH
51026: LD_INT 32
51028: PUSH
51029: LD_INT 120
51031: PUSH
51032: LD_INT 70
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: LIST
51039: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
51040: LD_VAR 0 6
51044: PPUSH
51045: CALL_OW 264
51049: PUSH
51050: LD_INT 7
51052: PUSH
51053: LD_INT 28
51055: PUSH
51056: LD_INT 45
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: LIST
51063: IN
51064: IFFALSE 51085
// points := [ 35 , 20 , 45 ] ;
51066: LD_ADDR_VAR 0 9
51070: PUSH
51071: LD_INT 35
51073: PUSH
51074: LD_INT 20
51076: PUSH
51077: LD_INT 45
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: LIST
51084: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
51085: LD_VAR 0 6
51089: PPUSH
51090: CALL_OW 264
51094: PUSH
51095: LD_INT 47
51097: PUSH
51098: EMPTY
51099: LIST
51100: IN
51101: IFFALSE 51122
// points := [ 67 , 45 , 75 ] ;
51103: LD_ADDR_VAR 0 9
51107: PUSH
51108: LD_INT 67
51110: PUSH
51111: LD_INT 45
51113: PUSH
51114: LD_INT 75
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: LIST
51121: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
51122: LD_VAR 0 6
51126: PPUSH
51127: CALL_OW 264
51131: PUSH
51132: LD_INT 26
51134: PUSH
51135: EMPTY
51136: LIST
51137: IN
51138: IFFALSE 51159
// points := [ 120 , 30 , 80 ] ;
51140: LD_ADDR_VAR 0 9
51144: PUSH
51145: LD_INT 120
51147: PUSH
51148: LD_INT 30
51150: PUSH
51151: LD_INT 80
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: LIST
51158: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
51159: LD_VAR 0 6
51163: PPUSH
51164: CALL_OW 264
51168: PUSH
51169: LD_INT 22
51171: PUSH
51172: EMPTY
51173: LIST
51174: IN
51175: IFFALSE 51196
// points := [ 40 , 1 , 1 ] ;
51177: LD_ADDR_VAR 0 9
51181: PUSH
51182: LD_INT 40
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: LIST
51195: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
51196: LD_VAR 0 6
51200: PPUSH
51201: CALL_OW 264
51205: PUSH
51206: LD_INT 29
51208: PUSH
51209: EMPTY
51210: LIST
51211: IN
51212: IFFALSE 51233
// points := [ 70 , 200 , 400 ] ;
51214: LD_ADDR_VAR 0 9
51218: PUSH
51219: LD_INT 70
51221: PUSH
51222: LD_INT 200
51224: PUSH
51225: LD_INT 400
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: LIST
51232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
51233: LD_VAR 0 6
51237: PPUSH
51238: CALL_OW 264
51242: PUSH
51243: LD_INT 14
51245: PUSH
51246: LD_INT 53
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: IN
51253: IFFALSE 51274
// points := [ 40 , 10 , 20 ] ;
51255: LD_ADDR_VAR 0 9
51259: PUSH
51260: LD_INT 40
51262: PUSH
51263: LD_INT 10
51265: PUSH
51266: LD_INT 20
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: LIST
51273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
51274: LD_VAR 0 6
51278: PPUSH
51279: CALL_OW 264
51283: PUSH
51284: LD_INT 9
51286: PUSH
51287: EMPTY
51288: LIST
51289: IN
51290: IFFALSE 51311
// points := [ 5 , 70 , 20 ] ;
51292: LD_ADDR_VAR 0 9
51296: PUSH
51297: LD_INT 5
51299: PUSH
51300: LD_INT 70
51302: PUSH
51303: LD_INT 20
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: LIST
51310: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
51311: LD_VAR 0 6
51315: PPUSH
51316: CALL_OW 264
51320: PUSH
51321: LD_INT 10
51323: PUSH
51324: EMPTY
51325: LIST
51326: IN
51327: IFFALSE 51348
// points := [ 35 , 110 , 70 ] ;
51329: LD_ADDR_VAR 0 9
51333: PUSH
51334: LD_INT 35
51336: PUSH
51337: LD_INT 110
51339: PUSH
51340: LD_INT 70
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: LIST
51347: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
51348: LD_VAR 0 6
51352: PPUSH
51353: CALL_OW 265
51357: PUSH
51358: LD_INT 25
51360: EQUAL
51361: IFFALSE 51382
// points := [ 80 , 65 , 100 ] ;
51363: LD_ADDR_VAR 0 9
51367: PUSH
51368: LD_INT 80
51370: PUSH
51371: LD_INT 65
51373: PUSH
51374: LD_INT 100
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: LIST
51381: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
51382: LD_VAR 0 6
51386: PPUSH
51387: CALL_OW 263
51391: PUSH
51392: LD_INT 1
51394: EQUAL
51395: IFFALSE 51430
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
51397: LD_ADDR_VAR 0 10
51401: PUSH
51402: LD_VAR 0 10
51406: PUSH
51407: LD_VAR 0 6
51411: PPUSH
51412: CALL_OW 311
51416: PPUSH
51417: LD_INT 3
51419: PPUSH
51420: CALL_OW 259
51424: PUSH
51425: LD_INT 4
51427: MUL
51428: MUL
51429: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
51430: LD_VAR 0 6
51434: PPUSH
51435: CALL_OW 263
51439: PUSH
51440: LD_INT 2
51442: EQUAL
51443: IFFALSE 51494
// begin j := IsControledBy ( i ) ;
51445: LD_ADDR_VAR 0 7
51449: PUSH
51450: LD_VAR 0 6
51454: PPUSH
51455: CALL_OW 312
51459: ST_TO_ADDR
// if j then
51460: LD_VAR 0 7
51464: IFFALSE 51494
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
51466: LD_ADDR_VAR 0 10
51470: PUSH
51471: LD_VAR 0 10
51475: PUSH
51476: LD_VAR 0 7
51480: PPUSH
51481: LD_INT 3
51483: PPUSH
51484: CALL_OW 259
51488: PUSH
51489: LD_INT 3
51491: MUL
51492: MUL
51493: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
51494: LD_VAR 0 6
51498: PPUSH
51499: CALL_OW 264
51503: PUSH
51504: LD_INT 5
51506: PUSH
51507: LD_INT 6
51509: PUSH
51510: LD_INT 46
51512: PUSH
51513: LD_INT 44
51515: PUSH
51516: LD_INT 47
51518: PUSH
51519: LD_INT 45
51521: PUSH
51522: LD_INT 28
51524: PUSH
51525: LD_INT 7
51527: PUSH
51528: LD_INT 27
51530: PUSH
51531: LD_INT 29
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: IN
51546: PUSH
51547: LD_VAR 0 1
51551: PPUSH
51552: LD_INT 52
51554: PPUSH
51555: CALL_OW 321
51559: PUSH
51560: LD_INT 2
51562: EQUAL
51563: AND
51564: IFFALSE 51581
// bpoints := bpoints * 1.2 ;
51566: LD_ADDR_VAR 0 10
51570: PUSH
51571: LD_VAR 0 10
51575: PUSH
51576: LD_REAL  1.20000000000000E+0000
51579: MUL
51580: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51581: LD_VAR 0 6
51585: PPUSH
51586: CALL_OW 264
51590: PUSH
51591: LD_INT 6
51593: PUSH
51594: LD_INT 46
51596: PUSH
51597: LD_INT 47
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: LIST
51604: IN
51605: IFFALSE 51622
// bpoints := bpoints * 1.2 ;
51607: LD_ADDR_VAR 0 10
51611: PUSH
51612: LD_VAR 0 10
51616: PUSH
51617: LD_REAL  1.20000000000000E+0000
51620: MUL
51621: ST_TO_ADDR
// end ; unit_building :
51622: GO 51636
51624: LD_INT 3
51626: DOUBLE
51627: EQUAL
51628: IFTRUE 51632
51630: GO 51635
51632: POP
// ; end ;
51633: GO 51636
51635: POP
// for j = 1 to 3 do
51636: LD_ADDR_VAR 0 7
51640: PUSH
51641: DOUBLE
51642: LD_INT 1
51644: DEC
51645: ST_TO_ADDR
51646: LD_INT 3
51648: PUSH
51649: FOR_TO
51650: IFFALSE 51703
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51652: LD_ADDR_VAR 0 5
51656: PUSH
51657: LD_VAR 0 5
51661: PPUSH
51662: LD_VAR 0 7
51666: PPUSH
51667: LD_VAR 0 5
51671: PUSH
51672: LD_VAR 0 7
51676: ARRAY
51677: PUSH
51678: LD_VAR 0 9
51682: PUSH
51683: LD_VAR 0 7
51687: ARRAY
51688: PUSH
51689: LD_VAR 0 10
51693: MUL
51694: PLUS
51695: PPUSH
51696: CALL_OW 1
51700: ST_TO_ADDR
51701: GO 51649
51703: POP
51704: POP
// end ;
51705: GO 50188
51707: POP
51708: POP
// result := Replace ( result , 4 , tmp ) ;
51709: LD_ADDR_VAR 0 5
51713: PUSH
51714: LD_VAR 0 5
51718: PPUSH
51719: LD_INT 4
51721: PPUSH
51722: LD_VAR 0 8
51726: PPUSH
51727: CALL_OW 1
51731: ST_TO_ADDR
// end ;
51732: LD_VAR 0 5
51736: RET
// export function DangerAtRange ( unit , range ) ; begin
51737: LD_INT 0
51739: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
51740: LD_ADDR_VAR 0 3
51744: PUSH
51745: LD_VAR 0 1
51749: PPUSH
51750: CALL_OW 255
51754: PPUSH
51755: LD_VAR 0 1
51759: PPUSH
51760: CALL_OW 250
51764: PPUSH
51765: LD_VAR 0 1
51769: PPUSH
51770: CALL_OW 251
51774: PPUSH
51775: LD_VAR 0 2
51779: PPUSH
51780: CALL 50040 0 4
51784: ST_TO_ADDR
// end ;
51785: LD_VAR 0 3
51789: RET
// export function DangerInArea ( side , area ) ; begin
51790: LD_INT 0
51792: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
51793: LD_ADDR_VAR 0 3
51797: PUSH
51798: LD_VAR 0 2
51802: PPUSH
51803: LD_INT 81
51805: PUSH
51806: LD_VAR 0 1
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PPUSH
51815: CALL_OW 70
51819: ST_TO_ADDR
// end ;
51820: LD_VAR 0 3
51824: RET
// export function IsExtension ( b ) ; begin
51825: LD_INT 0
51827: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
51828: LD_ADDR_VAR 0 2
51832: PUSH
51833: LD_VAR 0 1
51837: PUSH
51838: LD_INT 23
51840: PUSH
51841: LD_INT 20
51843: PUSH
51844: LD_INT 22
51846: PUSH
51847: LD_INT 17
51849: PUSH
51850: LD_INT 24
51852: PUSH
51853: LD_INT 21
51855: PUSH
51856: LD_INT 19
51858: PUSH
51859: LD_INT 16
51861: PUSH
51862: LD_INT 25
51864: PUSH
51865: LD_INT 18
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: IN
51880: ST_TO_ADDR
// end ;
51881: LD_VAR 0 2
51885: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
51886: LD_INT 0
51888: PPUSH
51889: PPUSH
51890: PPUSH
// result := [ ] ;
51891: LD_ADDR_VAR 0 3
51895: PUSH
51896: EMPTY
51897: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
51898: LD_ADDR_VAR 0 4
51902: PUSH
51903: LD_VAR 0 2
51907: PPUSH
51908: LD_INT 21
51910: PUSH
51911: LD_INT 3
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PPUSH
51918: CALL_OW 70
51922: ST_TO_ADDR
// if not tmp then
51923: LD_VAR 0 4
51927: NOT
51928: IFFALSE 51932
// exit ;
51930: GO 51990
// for i in tmp do
51932: LD_ADDR_VAR 0 5
51936: PUSH
51937: LD_VAR 0 4
51941: PUSH
51942: FOR_IN
51943: IFFALSE 51978
// if GetBase ( i ) <> base then
51945: LD_VAR 0 5
51949: PPUSH
51950: CALL_OW 274
51954: PUSH
51955: LD_VAR 0 1
51959: NONEQUAL
51960: IFFALSE 51976
// ComLinkToBase ( base , i ) ;
51962: LD_VAR 0 1
51966: PPUSH
51967: LD_VAR 0 5
51971: PPUSH
51972: CALL_OW 169
51976: GO 51942
51978: POP
51979: POP
// result := tmp ;
51980: LD_ADDR_VAR 0 3
51984: PUSH
51985: LD_VAR 0 4
51989: ST_TO_ADDR
// end ;
51990: LD_VAR 0 3
51994: RET
// export function ComComplete ( unit , b ) ; var i ; begin
51995: LD_INT 0
51997: PPUSH
51998: PPUSH
// if BuildingStatus ( b ) = bs_build then
51999: LD_VAR 0 2
52003: PPUSH
52004: CALL_OW 461
52008: PUSH
52009: LD_INT 1
52011: EQUAL
52012: IFFALSE 52072
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
52014: LD_VAR 0 1
52018: PPUSH
52019: LD_STRING h
52021: PUSH
52022: LD_VAR 0 2
52026: PPUSH
52027: CALL_OW 250
52031: PUSH
52032: LD_VAR 0 2
52036: PPUSH
52037: CALL_OW 251
52041: PUSH
52042: LD_VAR 0 2
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: PUSH
52065: EMPTY
52066: LIST
52067: PPUSH
52068: CALL_OW 446
// end ;
52072: LD_VAR 0 3
52076: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
52077: LD_INT 0
52079: PPUSH
52080: PPUSH
52081: PPUSH
52082: PPUSH
52083: PPUSH
52084: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
52085: LD_VAR 0 1
52089: NOT
52090: PUSH
52091: LD_VAR 0 1
52095: PPUSH
52096: CALL_OW 263
52100: PUSH
52101: LD_INT 2
52103: EQUAL
52104: NOT
52105: OR
52106: IFFALSE 52110
// exit ;
52108: GO 52426
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
52110: LD_ADDR_VAR 0 6
52114: PUSH
52115: LD_INT 22
52117: PUSH
52118: LD_VAR 0 1
52122: PPUSH
52123: CALL_OW 255
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: LD_INT 30
52137: PUSH
52138: LD_INT 36
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 34
52147: PUSH
52148: LD_INT 31
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: LIST
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PPUSH
52164: CALL_OW 69
52168: ST_TO_ADDR
// if not tmp then
52169: LD_VAR 0 6
52173: NOT
52174: IFFALSE 52178
// exit ;
52176: GO 52426
// result := [ ] ;
52178: LD_ADDR_VAR 0 2
52182: PUSH
52183: EMPTY
52184: ST_TO_ADDR
// for i in tmp do
52185: LD_ADDR_VAR 0 3
52189: PUSH
52190: LD_VAR 0 6
52194: PUSH
52195: FOR_IN
52196: IFFALSE 52267
// begin t := UnitsInside ( i ) ;
52198: LD_ADDR_VAR 0 4
52202: PUSH
52203: LD_VAR 0 3
52207: PPUSH
52208: CALL_OW 313
52212: ST_TO_ADDR
// if t then
52213: LD_VAR 0 4
52217: IFFALSE 52265
// for j in t do
52219: LD_ADDR_VAR 0 7
52223: PUSH
52224: LD_VAR 0 4
52228: PUSH
52229: FOR_IN
52230: IFFALSE 52263
// result := Insert ( result , result + 1 , j ) ;
52232: LD_ADDR_VAR 0 2
52236: PUSH
52237: LD_VAR 0 2
52241: PPUSH
52242: LD_VAR 0 2
52246: PUSH
52247: LD_INT 1
52249: PLUS
52250: PPUSH
52251: LD_VAR 0 7
52255: PPUSH
52256: CALL_OW 2
52260: ST_TO_ADDR
52261: GO 52229
52263: POP
52264: POP
// end ;
52265: GO 52195
52267: POP
52268: POP
// if not result then
52269: LD_VAR 0 2
52273: NOT
52274: IFFALSE 52278
// exit ;
52276: GO 52426
// mech := result [ 1 ] ;
52278: LD_ADDR_VAR 0 5
52282: PUSH
52283: LD_VAR 0 2
52287: PUSH
52288: LD_INT 1
52290: ARRAY
52291: ST_TO_ADDR
// if result > 1 then
52292: LD_VAR 0 2
52296: PUSH
52297: LD_INT 1
52299: GREATER
52300: IFFALSE 52412
// for i = 2 to result do
52302: LD_ADDR_VAR 0 3
52306: PUSH
52307: DOUBLE
52308: LD_INT 2
52310: DEC
52311: ST_TO_ADDR
52312: LD_VAR 0 2
52316: PUSH
52317: FOR_TO
52318: IFFALSE 52410
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
52320: LD_ADDR_VAR 0 4
52324: PUSH
52325: LD_VAR 0 2
52329: PUSH
52330: LD_VAR 0 3
52334: ARRAY
52335: PPUSH
52336: LD_INT 3
52338: PPUSH
52339: CALL_OW 259
52343: PUSH
52344: LD_VAR 0 2
52348: PUSH
52349: LD_VAR 0 3
52353: ARRAY
52354: PPUSH
52355: CALL_OW 432
52359: MINUS
52360: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
52361: LD_VAR 0 4
52365: PUSH
52366: LD_VAR 0 5
52370: PPUSH
52371: LD_INT 3
52373: PPUSH
52374: CALL_OW 259
52378: PUSH
52379: LD_VAR 0 5
52383: PPUSH
52384: CALL_OW 432
52388: MINUS
52389: GREATEREQUAL
52390: IFFALSE 52408
// mech := result [ i ] ;
52392: LD_ADDR_VAR 0 5
52396: PUSH
52397: LD_VAR 0 2
52401: PUSH
52402: LD_VAR 0 3
52406: ARRAY
52407: ST_TO_ADDR
// end ;
52408: GO 52317
52410: POP
52411: POP
// ComLinkTo ( vehicle , mech ) ;
52412: LD_VAR 0 1
52416: PPUSH
52417: LD_VAR 0 5
52421: PPUSH
52422: CALL_OW 135
// end ;
52426: LD_VAR 0 2
52430: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
52431: LD_INT 0
52433: PPUSH
52434: PPUSH
52435: PPUSH
52436: PPUSH
52437: PPUSH
52438: PPUSH
52439: PPUSH
52440: PPUSH
52441: PPUSH
52442: PPUSH
52443: PPUSH
52444: PPUSH
52445: PPUSH
// result := [ ] ;
52446: LD_ADDR_VAR 0 7
52450: PUSH
52451: EMPTY
52452: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
52453: LD_VAR 0 1
52457: PPUSH
52458: CALL_OW 266
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: IN
52473: NOT
52474: IFFALSE 52478
// exit ;
52476: GO 54109
// if name then
52478: LD_VAR 0 3
52482: IFFALSE 52498
// SetBName ( base_dep , name ) ;
52484: LD_VAR 0 1
52488: PPUSH
52489: LD_VAR 0 3
52493: PPUSH
52494: CALL_OW 500
// base := GetBase ( base_dep ) ;
52498: LD_ADDR_VAR 0 15
52502: PUSH
52503: LD_VAR 0 1
52507: PPUSH
52508: CALL_OW 274
52512: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
52513: LD_ADDR_VAR 0 16
52517: PUSH
52518: LD_VAR 0 1
52522: PPUSH
52523: CALL_OW 255
52527: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
52528: LD_ADDR_VAR 0 17
52532: PUSH
52533: LD_VAR 0 1
52537: PPUSH
52538: CALL_OW 248
52542: ST_TO_ADDR
// if sources then
52543: LD_VAR 0 5
52547: IFFALSE 52594
// for i = 1 to 3 do
52549: LD_ADDR_VAR 0 8
52553: PUSH
52554: DOUBLE
52555: LD_INT 1
52557: DEC
52558: ST_TO_ADDR
52559: LD_INT 3
52561: PUSH
52562: FOR_TO
52563: IFFALSE 52592
// AddResourceType ( base , i , sources [ i ] ) ;
52565: LD_VAR 0 15
52569: PPUSH
52570: LD_VAR 0 8
52574: PPUSH
52575: LD_VAR 0 5
52579: PUSH
52580: LD_VAR 0 8
52584: ARRAY
52585: PPUSH
52586: CALL_OW 276
52590: GO 52562
52592: POP
52593: POP
// buildings := GetBaseBuildings ( base , area ) ;
52594: LD_ADDR_VAR 0 18
52598: PUSH
52599: LD_VAR 0 15
52603: PPUSH
52604: LD_VAR 0 2
52608: PPUSH
52609: CALL 51886 0 2
52613: ST_TO_ADDR
// InitHc ;
52614: CALL_OW 19
// InitUc ;
52618: CALL_OW 18
// uc_side := side ;
52622: LD_ADDR_OWVAR 20
52626: PUSH
52627: LD_VAR 0 16
52631: ST_TO_ADDR
// uc_nation := nation ;
52632: LD_ADDR_OWVAR 21
52636: PUSH
52637: LD_VAR 0 17
52641: ST_TO_ADDR
// if buildings then
52642: LD_VAR 0 18
52646: IFFALSE 53968
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
52648: LD_ADDR_VAR 0 19
52652: PUSH
52653: LD_VAR 0 18
52657: PPUSH
52658: LD_INT 2
52660: PUSH
52661: LD_INT 30
52663: PUSH
52664: LD_INT 29
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 30
52673: PUSH
52674: LD_INT 30
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: LIST
52685: PPUSH
52686: CALL_OW 72
52690: ST_TO_ADDR
// if tmp then
52691: LD_VAR 0 19
52695: IFFALSE 52743
// for i in tmp do
52697: LD_ADDR_VAR 0 8
52701: PUSH
52702: LD_VAR 0 19
52706: PUSH
52707: FOR_IN
52708: IFFALSE 52741
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
52710: LD_VAR 0 8
52714: PPUSH
52715: CALL_OW 250
52719: PPUSH
52720: LD_VAR 0 8
52724: PPUSH
52725: CALL_OW 251
52729: PPUSH
52730: LD_VAR 0 16
52734: PPUSH
52735: CALL_OW 441
52739: GO 52707
52741: POP
52742: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
52743: LD_VAR 0 18
52747: PPUSH
52748: LD_INT 2
52750: PUSH
52751: LD_INT 30
52753: PUSH
52754: LD_INT 32
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 30
52763: PUSH
52764: LD_INT 33
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: LIST
52775: PPUSH
52776: CALL_OW 72
52780: IFFALSE 52868
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
52782: LD_ADDR_VAR 0 8
52786: PUSH
52787: LD_VAR 0 18
52791: PPUSH
52792: LD_INT 2
52794: PUSH
52795: LD_INT 30
52797: PUSH
52798: LD_INT 32
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 30
52807: PUSH
52808: LD_INT 33
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: LIST
52819: PPUSH
52820: CALL_OW 72
52824: PUSH
52825: FOR_IN
52826: IFFALSE 52866
// begin if not GetBWeapon ( i ) then
52828: LD_VAR 0 8
52832: PPUSH
52833: CALL_OW 269
52837: NOT
52838: IFFALSE 52864
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
52840: LD_VAR 0 8
52844: PPUSH
52845: LD_VAR 0 8
52849: PPUSH
52850: LD_VAR 0 2
52854: PPUSH
52855: CALL 54114 0 2
52859: PPUSH
52860: CALL_OW 431
// end ;
52864: GO 52825
52866: POP
52867: POP
// end ; for i = 1 to personel do
52868: LD_ADDR_VAR 0 8
52872: PUSH
52873: DOUBLE
52874: LD_INT 1
52876: DEC
52877: ST_TO_ADDR
52878: LD_VAR 0 6
52882: PUSH
52883: FOR_TO
52884: IFFALSE 53948
// begin if i > 4 then
52886: LD_VAR 0 8
52890: PUSH
52891: LD_INT 4
52893: GREATER
52894: IFFALSE 52898
// break ;
52896: GO 53948
// case i of 1 :
52898: LD_VAR 0 8
52902: PUSH
52903: LD_INT 1
52905: DOUBLE
52906: EQUAL
52907: IFTRUE 52911
52909: GO 52991
52911: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
52912: LD_ADDR_VAR 0 12
52916: PUSH
52917: LD_VAR 0 18
52921: PPUSH
52922: LD_INT 22
52924: PUSH
52925: LD_VAR 0 16
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 58
52936: PUSH
52937: EMPTY
52938: LIST
52939: PUSH
52940: LD_INT 2
52942: PUSH
52943: LD_INT 30
52945: PUSH
52946: LD_INT 32
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 30
52955: PUSH
52956: LD_INT 4
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 30
52965: PUSH
52966: LD_INT 5
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: LIST
52983: PPUSH
52984: CALL_OW 72
52988: ST_TO_ADDR
52989: GO 53213
52991: LD_INT 2
52993: DOUBLE
52994: EQUAL
52995: IFTRUE 52999
52997: GO 53061
52999: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
53000: LD_ADDR_VAR 0 12
53004: PUSH
53005: LD_VAR 0 18
53009: PPUSH
53010: LD_INT 22
53012: PUSH
53013: LD_VAR 0 16
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 2
53024: PUSH
53025: LD_INT 30
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 30
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: LIST
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PPUSH
53054: CALL_OW 72
53058: ST_TO_ADDR
53059: GO 53213
53061: LD_INT 3
53063: DOUBLE
53064: EQUAL
53065: IFTRUE 53069
53067: GO 53131
53069: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
53070: LD_ADDR_VAR 0 12
53074: PUSH
53075: LD_VAR 0 18
53079: PPUSH
53080: LD_INT 22
53082: PUSH
53083: LD_VAR 0 16
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: LD_INT 30
53097: PUSH
53098: LD_INT 2
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 30
53107: PUSH
53108: LD_INT 3
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: LIST
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PPUSH
53124: CALL_OW 72
53128: ST_TO_ADDR
53129: GO 53213
53131: LD_INT 4
53133: DOUBLE
53134: EQUAL
53135: IFTRUE 53139
53137: GO 53212
53139: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
53140: LD_ADDR_VAR 0 12
53144: PUSH
53145: LD_VAR 0 18
53149: PPUSH
53150: LD_INT 22
53152: PUSH
53153: LD_VAR 0 16
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: LD_INT 30
53167: PUSH
53168: LD_INT 6
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 30
53177: PUSH
53178: LD_INT 7
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 30
53187: PUSH
53188: LD_INT 8
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PPUSH
53205: CALL_OW 72
53209: ST_TO_ADDR
53210: GO 53213
53212: POP
// if i = 1 then
53213: LD_VAR 0 8
53217: PUSH
53218: LD_INT 1
53220: EQUAL
53221: IFFALSE 53332
// begin tmp := [ ] ;
53223: LD_ADDR_VAR 0 19
53227: PUSH
53228: EMPTY
53229: ST_TO_ADDR
// for j in f do
53230: LD_ADDR_VAR 0 9
53234: PUSH
53235: LD_VAR 0 12
53239: PUSH
53240: FOR_IN
53241: IFFALSE 53314
// if GetBType ( j ) = b_bunker then
53243: LD_VAR 0 9
53247: PPUSH
53248: CALL_OW 266
53252: PUSH
53253: LD_INT 32
53255: EQUAL
53256: IFFALSE 53283
// tmp := Insert ( tmp , 1 , j ) else
53258: LD_ADDR_VAR 0 19
53262: PUSH
53263: LD_VAR 0 19
53267: PPUSH
53268: LD_INT 1
53270: PPUSH
53271: LD_VAR 0 9
53275: PPUSH
53276: CALL_OW 2
53280: ST_TO_ADDR
53281: GO 53312
// tmp := Insert ( tmp , tmp + 1 , j ) ;
53283: LD_ADDR_VAR 0 19
53287: PUSH
53288: LD_VAR 0 19
53292: PPUSH
53293: LD_VAR 0 19
53297: PUSH
53298: LD_INT 1
53300: PLUS
53301: PPUSH
53302: LD_VAR 0 9
53306: PPUSH
53307: CALL_OW 2
53311: ST_TO_ADDR
53312: GO 53240
53314: POP
53315: POP
// if tmp then
53316: LD_VAR 0 19
53320: IFFALSE 53332
// f := tmp ;
53322: LD_ADDR_VAR 0 12
53326: PUSH
53327: LD_VAR 0 19
53331: ST_TO_ADDR
// end ; x := personel [ i ] ;
53332: LD_ADDR_VAR 0 13
53336: PUSH
53337: LD_VAR 0 6
53341: PUSH
53342: LD_VAR 0 8
53346: ARRAY
53347: ST_TO_ADDR
// if x = - 1 then
53348: LD_VAR 0 13
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: EQUAL
53357: IFFALSE 53566
// begin for j in f do
53359: LD_ADDR_VAR 0 9
53363: PUSH
53364: LD_VAR 0 12
53368: PUSH
53369: FOR_IN
53370: IFFALSE 53562
// repeat InitHc ;
53372: CALL_OW 19
// if GetBType ( j ) = b_barracks then
53376: LD_VAR 0 9
53380: PPUSH
53381: CALL_OW 266
53385: PUSH
53386: LD_INT 5
53388: EQUAL
53389: IFFALSE 53459
// begin if UnitsInside ( j ) < 3 then
53391: LD_VAR 0 9
53395: PPUSH
53396: CALL_OW 313
53400: PUSH
53401: LD_INT 3
53403: LESS
53404: IFFALSE 53440
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53406: LD_INT 0
53408: PPUSH
53409: LD_INT 5
53411: PUSH
53412: LD_INT 8
53414: PUSH
53415: LD_INT 9
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: LIST
53422: PUSH
53423: LD_VAR 0 17
53427: ARRAY
53428: PPUSH
53429: LD_VAR 0 4
53433: PPUSH
53434: CALL_OW 380
53438: GO 53457
// PrepareHuman ( false , i , skill ) ;
53440: LD_INT 0
53442: PPUSH
53443: LD_VAR 0 8
53447: PPUSH
53448: LD_VAR 0 4
53452: PPUSH
53453: CALL_OW 380
// end else
53457: GO 53476
// PrepareHuman ( false , i , skill ) ;
53459: LD_INT 0
53461: PPUSH
53462: LD_VAR 0 8
53466: PPUSH
53467: LD_VAR 0 4
53471: PPUSH
53472: CALL_OW 380
// un := CreateHuman ;
53476: LD_ADDR_VAR 0 14
53480: PUSH
53481: CALL_OW 44
53485: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53486: LD_ADDR_VAR 0 7
53490: PUSH
53491: LD_VAR 0 7
53495: PPUSH
53496: LD_INT 1
53498: PPUSH
53499: LD_VAR 0 14
53503: PPUSH
53504: CALL_OW 2
53508: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
53509: LD_VAR 0 14
53513: PPUSH
53514: LD_VAR 0 9
53518: PPUSH
53519: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
53523: LD_VAR 0 9
53527: PPUSH
53528: CALL_OW 313
53532: PUSH
53533: LD_INT 6
53535: EQUAL
53536: PUSH
53537: LD_VAR 0 9
53541: PPUSH
53542: CALL_OW 266
53546: PUSH
53547: LD_INT 32
53549: PUSH
53550: LD_INT 31
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: IN
53557: OR
53558: IFFALSE 53372
53560: GO 53369
53562: POP
53563: POP
// end else
53564: GO 53946
// for j = 1 to x do
53566: LD_ADDR_VAR 0 9
53570: PUSH
53571: DOUBLE
53572: LD_INT 1
53574: DEC
53575: ST_TO_ADDR
53576: LD_VAR 0 13
53580: PUSH
53581: FOR_TO
53582: IFFALSE 53944
// begin InitHc ;
53584: CALL_OW 19
// if not f then
53588: LD_VAR 0 12
53592: NOT
53593: IFFALSE 53682
// begin PrepareHuman ( false , i , skill ) ;
53595: LD_INT 0
53597: PPUSH
53598: LD_VAR 0 8
53602: PPUSH
53603: LD_VAR 0 4
53607: PPUSH
53608: CALL_OW 380
// un := CreateHuman ;
53612: LD_ADDR_VAR 0 14
53616: PUSH
53617: CALL_OW 44
53621: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53622: LD_ADDR_VAR 0 7
53626: PUSH
53627: LD_VAR 0 7
53631: PPUSH
53632: LD_INT 1
53634: PPUSH
53635: LD_VAR 0 14
53639: PPUSH
53640: CALL_OW 2
53644: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53645: LD_VAR 0 14
53649: PPUSH
53650: LD_VAR 0 1
53654: PPUSH
53655: CALL_OW 250
53659: PPUSH
53660: LD_VAR 0 1
53664: PPUSH
53665: CALL_OW 251
53669: PPUSH
53670: LD_INT 10
53672: PPUSH
53673: LD_INT 0
53675: PPUSH
53676: CALL_OW 50
// continue ;
53680: GO 53581
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
53682: LD_VAR 0 12
53686: PUSH
53687: LD_INT 1
53689: ARRAY
53690: PPUSH
53691: CALL_OW 313
53695: PUSH
53696: LD_VAR 0 12
53700: PUSH
53701: LD_INT 1
53703: ARRAY
53704: PPUSH
53705: CALL_OW 266
53709: PUSH
53710: LD_INT 32
53712: PUSH
53713: LD_INT 31
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: IN
53720: AND
53721: PUSH
53722: LD_VAR 0 12
53726: PUSH
53727: LD_INT 1
53729: ARRAY
53730: PPUSH
53731: CALL_OW 313
53735: PUSH
53736: LD_INT 6
53738: EQUAL
53739: OR
53740: IFFALSE 53760
// f := Delete ( f , 1 ) ;
53742: LD_ADDR_VAR 0 12
53746: PUSH
53747: LD_VAR 0 12
53751: PPUSH
53752: LD_INT 1
53754: PPUSH
53755: CALL_OW 3
53759: ST_TO_ADDR
// if not f then
53760: LD_VAR 0 12
53764: NOT
53765: IFFALSE 53783
// begin x := x + 2 ;
53767: LD_ADDR_VAR 0 13
53771: PUSH
53772: LD_VAR 0 13
53776: PUSH
53777: LD_INT 2
53779: PLUS
53780: ST_TO_ADDR
// continue ;
53781: GO 53581
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
53783: LD_VAR 0 12
53787: PUSH
53788: LD_INT 1
53790: ARRAY
53791: PPUSH
53792: CALL_OW 266
53796: PUSH
53797: LD_INT 5
53799: EQUAL
53800: IFFALSE 53874
// begin if UnitsInside ( f [ 1 ] ) < 3 then
53802: LD_VAR 0 12
53806: PUSH
53807: LD_INT 1
53809: ARRAY
53810: PPUSH
53811: CALL_OW 313
53815: PUSH
53816: LD_INT 3
53818: LESS
53819: IFFALSE 53855
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53821: LD_INT 0
53823: PPUSH
53824: LD_INT 5
53826: PUSH
53827: LD_INT 8
53829: PUSH
53830: LD_INT 9
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: LIST
53837: PUSH
53838: LD_VAR 0 17
53842: ARRAY
53843: PPUSH
53844: LD_VAR 0 4
53848: PPUSH
53849: CALL_OW 380
53853: GO 53872
// PrepareHuman ( false , i , skill ) ;
53855: LD_INT 0
53857: PPUSH
53858: LD_VAR 0 8
53862: PPUSH
53863: LD_VAR 0 4
53867: PPUSH
53868: CALL_OW 380
// end else
53872: GO 53891
// PrepareHuman ( false , i , skill ) ;
53874: LD_INT 0
53876: PPUSH
53877: LD_VAR 0 8
53881: PPUSH
53882: LD_VAR 0 4
53886: PPUSH
53887: CALL_OW 380
// un := CreateHuman ;
53891: LD_ADDR_VAR 0 14
53895: PUSH
53896: CALL_OW 44
53900: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53901: LD_ADDR_VAR 0 7
53905: PUSH
53906: LD_VAR 0 7
53910: PPUSH
53911: LD_INT 1
53913: PPUSH
53914: LD_VAR 0 14
53918: PPUSH
53919: CALL_OW 2
53923: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
53924: LD_VAR 0 14
53928: PPUSH
53929: LD_VAR 0 12
53933: PUSH
53934: LD_INT 1
53936: ARRAY
53937: PPUSH
53938: CALL_OW 52
// end ;
53942: GO 53581
53944: POP
53945: POP
// end ;
53946: GO 52883
53948: POP
53949: POP
// result := result ^ buildings ;
53950: LD_ADDR_VAR 0 7
53954: PUSH
53955: LD_VAR 0 7
53959: PUSH
53960: LD_VAR 0 18
53964: ADD
53965: ST_TO_ADDR
// end else
53966: GO 54109
// begin for i = 1 to personel do
53968: LD_ADDR_VAR 0 8
53972: PUSH
53973: DOUBLE
53974: LD_INT 1
53976: DEC
53977: ST_TO_ADDR
53978: LD_VAR 0 6
53982: PUSH
53983: FOR_TO
53984: IFFALSE 54107
// begin if i > 4 then
53986: LD_VAR 0 8
53990: PUSH
53991: LD_INT 4
53993: GREATER
53994: IFFALSE 53998
// break ;
53996: GO 54107
// x := personel [ i ] ;
53998: LD_ADDR_VAR 0 13
54002: PUSH
54003: LD_VAR 0 6
54007: PUSH
54008: LD_VAR 0 8
54012: ARRAY
54013: ST_TO_ADDR
// if x = - 1 then
54014: LD_VAR 0 13
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: EQUAL
54023: IFFALSE 54027
// continue ;
54025: GO 53983
// PrepareHuman ( false , i , skill ) ;
54027: LD_INT 0
54029: PPUSH
54030: LD_VAR 0 8
54034: PPUSH
54035: LD_VAR 0 4
54039: PPUSH
54040: CALL_OW 380
// un := CreateHuman ;
54044: LD_ADDR_VAR 0 14
54048: PUSH
54049: CALL_OW 44
54053: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
54054: LD_VAR 0 14
54058: PPUSH
54059: LD_VAR 0 1
54063: PPUSH
54064: CALL_OW 250
54068: PPUSH
54069: LD_VAR 0 1
54073: PPUSH
54074: CALL_OW 251
54078: PPUSH
54079: LD_INT 10
54081: PPUSH
54082: LD_INT 0
54084: PPUSH
54085: CALL_OW 50
// result := result ^ un ;
54089: LD_ADDR_VAR 0 7
54093: PUSH
54094: LD_VAR 0 7
54098: PUSH
54099: LD_VAR 0 14
54103: ADD
54104: ST_TO_ADDR
// end ;
54105: GO 53983
54107: POP
54108: POP
// end ; end ;
54109: LD_VAR 0 7
54113: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
54114: LD_INT 0
54116: PPUSH
54117: PPUSH
54118: PPUSH
54119: PPUSH
54120: PPUSH
54121: PPUSH
54122: PPUSH
54123: PPUSH
54124: PPUSH
54125: PPUSH
54126: PPUSH
54127: PPUSH
54128: PPUSH
54129: PPUSH
54130: PPUSH
54131: PPUSH
// result := false ;
54132: LD_ADDR_VAR 0 3
54136: PUSH
54137: LD_INT 0
54139: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
54140: LD_VAR 0 1
54144: NOT
54145: PUSH
54146: LD_VAR 0 1
54150: PPUSH
54151: CALL_OW 266
54155: PUSH
54156: LD_INT 32
54158: PUSH
54159: LD_INT 33
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: IN
54166: NOT
54167: OR
54168: IFFALSE 54172
// exit ;
54170: GO 55308
// nat := GetNation ( tower ) ;
54172: LD_ADDR_VAR 0 12
54176: PUSH
54177: LD_VAR 0 1
54181: PPUSH
54182: CALL_OW 248
54186: ST_TO_ADDR
// side := GetSide ( tower ) ;
54187: LD_ADDR_VAR 0 16
54191: PUSH
54192: LD_VAR 0 1
54196: PPUSH
54197: CALL_OW 255
54201: ST_TO_ADDR
// x := GetX ( tower ) ;
54202: LD_ADDR_VAR 0 10
54206: PUSH
54207: LD_VAR 0 1
54211: PPUSH
54212: CALL_OW 250
54216: ST_TO_ADDR
// y := GetY ( tower ) ;
54217: LD_ADDR_VAR 0 11
54221: PUSH
54222: LD_VAR 0 1
54226: PPUSH
54227: CALL_OW 251
54231: ST_TO_ADDR
// if not x or not y then
54232: LD_VAR 0 10
54236: NOT
54237: PUSH
54238: LD_VAR 0 11
54242: NOT
54243: OR
54244: IFFALSE 54248
// exit ;
54246: GO 55308
// weapon := 0 ;
54248: LD_ADDR_VAR 0 18
54252: PUSH
54253: LD_INT 0
54255: ST_TO_ADDR
// fac_list := [ ] ;
54256: LD_ADDR_VAR 0 17
54260: PUSH
54261: EMPTY
54262: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
54263: LD_ADDR_VAR 0 6
54267: PUSH
54268: LD_VAR 0 1
54272: PPUSH
54273: CALL_OW 274
54277: PPUSH
54278: LD_VAR 0 2
54282: PPUSH
54283: CALL 51886 0 2
54287: PPUSH
54288: LD_INT 30
54290: PUSH
54291: LD_INT 3
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PPUSH
54298: CALL_OW 72
54302: ST_TO_ADDR
// if not factories then
54303: LD_VAR 0 6
54307: NOT
54308: IFFALSE 54312
// exit ;
54310: GO 55308
// for i in factories do
54312: LD_ADDR_VAR 0 8
54316: PUSH
54317: LD_VAR 0 6
54321: PUSH
54322: FOR_IN
54323: IFFALSE 54348
// fac_list := fac_list union AvailableWeaponList ( i ) ;
54325: LD_ADDR_VAR 0 17
54329: PUSH
54330: LD_VAR 0 17
54334: PUSH
54335: LD_VAR 0 8
54339: PPUSH
54340: CALL_OW 478
54344: UNION
54345: ST_TO_ADDR
54346: GO 54322
54348: POP
54349: POP
// if not fac_list then
54350: LD_VAR 0 17
54354: NOT
54355: IFFALSE 54359
// exit ;
54357: GO 55308
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
54359: LD_ADDR_VAR 0 5
54363: PUSH
54364: LD_INT 4
54366: PUSH
54367: LD_INT 5
54369: PUSH
54370: LD_INT 9
54372: PUSH
54373: LD_INT 10
54375: PUSH
54376: LD_INT 6
54378: PUSH
54379: LD_INT 7
54381: PUSH
54382: LD_INT 11
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 27
54396: PUSH
54397: LD_INT 28
54399: PUSH
54400: LD_INT 26
54402: PUSH
54403: LD_INT 30
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 43
54414: PUSH
54415: LD_INT 44
54417: PUSH
54418: LD_INT 46
54420: PUSH
54421: LD_INT 45
54423: PUSH
54424: LD_INT 47
54426: PUSH
54427: LD_INT 49
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: LIST
54442: PUSH
54443: LD_VAR 0 12
54447: ARRAY
54448: ST_TO_ADDR
// for i in list do
54449: LD_ADDR_VAR 0 8
54453: PUSH
54454: LD_VAR 0 5
54458: PUSH
54459: FOR_IN
54460: IFFALSE 54493
// if not i in fac_list then
54462: LD_VAR 0 8
54466: PUSH
54467: LD_VAR 0 17
54471: IN
54472: NOT
54473: IFFALSE 54491
// list := list diff i ;
54475: LD_ADDR_VAR 0 5
54479: PUSH
54480: LD_VAR 0 5
54484: PUSH
54485: LD_VAR 0 8
54489: DIFF
54490: ST_TO_ADDR
54491: GO 54459
54493: POP
54494: POP
// if not list then
54495: LD_VAR 0 5
54499: NOT
54500: IFFALSE 54504
// exit ;
54502: GO 55308
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
54504: LD_VAR 0 12
54508: PUSH
54509: LD_INT 3
54511: EQUAL
54512: PUSH
54513: LD_INT 49
54515: PUSH
54516: LD_VAR 0 5
54520: IN
54521: AND
54522: PUSH
54523: LD_INT 31
54525: PPUSH
54526: LD_VAR 0 16
54530: PPUSH
54531: CALL_OW 321
54535: PUSH
54536: LD_INT 2
54538: EQUAL
54539: AND
54540: IFFALSE 54600
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
54542: LD_INT 22
54544: PUSH
54545: LD_VAR 0 16
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 35
54556: PUSH
54557: LD_INT 49
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 91
54566: PUSH
54567: LD_VAR 0 1
54571: PUSH
54572: LD_INT 10
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: LIST
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: LIST
54584: PPUSH
54585: CALL_OW 69
54589: NOT
54590: IFFALSE 54600
// weapon := ru_time_lapser ;
54592: LD_ADDR_VAR 0 18
54596: PUSH
54597: LD_INT 49
54599: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
54600: LD_VAR 0 12
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: LD_INT 2
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: IN
54615: PUSH
54616: LD_INT 11
54618: PUSH
54619: LD_VAR 0 5
54623: IN
54624: PUSH
54625: LD_INT 30
54627: PUSH
54628: LD_VAR 0 5
54632: IN
54633: OR
54634: AND
54635: PUSH
54636: LD_INT 6
54638: PPUSH
54639: LD_VAR 0 16
54643: PPUSH
54644: CALL_OW 321
54648: PUSH
54649: LD_INT 2
54651: EQUAL
54652: AND
54653: IFFALSE 54818
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
54655: LD_INT 22
54657: PUSH
54658: LD_VAR 0 16
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 2
54669: PUSH
54670: LD_INT 35
54672: PUSH
54673: LD_INT 11
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 35
54682: PUSH
54683: LD_INT 30
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 91
54697: PUSH
54698: LD_VAR 0 1
54702: PUSH
54703: LD_INT 18
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: LIST
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: LIST
54715: PPUSH
54716: CALL_OW 69
54720: NOT
54721: PUSH
54722: LD_INT 22
54724: PUSH
54725: LD_VAR 0 16
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 2
54736: PUSH
54737: LD_INT 30
54739: PUSH
54740: LD_INT 32
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 30
54749: PUSH
54750: LD_INT 33
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 91
54764: PUSH
54765: LD_VAR 0 1
54769: PUSH
54770: LD_INT 12
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: LIST
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: LIST
54782: PUSH
54783: EMPTY
54784: LIST
54785: PPUSH
54786: CALL_OW 69
54790: PUSH
54791: LD_INT 2
54793: GREATER
54794: AND
54795: IFFALSE 54818
// weapon := [ us_radar , ar_radar ] [ nat ] ;
54797: LD_ADDR_VAR 0 18
54801: PUSH
54802: LD_INT 11
54804: PUSH
54805: LD_INT 30
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_VAR 0 12
54816: ARRAY
54817: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
54818: LD_VAR 0 18
54822: NOT
54823: PUSH
54824: LD_INT 40
54826: PPUSH
54827: LD_VAR 0 16
54831: PPUSH
54832: CALL_OW 321
54836: PUSH
54837: LD_INT 2
54839: EQUAL
54840: AND
54841: PUSH
54842: LD_INT 7
54844: PUSH
54845: LD_VAR 0 5
54849: IN
54850: PUSH
54851: LD_INT 28
54853: PUSH
54854: LD_VAR 0 5
54858: IN
54859: OR
54860: PUSH
54861: LD_INT 45
54863: PUSH
54864: LD_VAR 0 5
54868: IN
54869: OR
54870: AND
54871: IFFALSE 55125
// begin hex := GetHexInfo ( x , y ) ;
54873: LD_ADDR_VAR 0 4
54877: PUSH
54878: LD_VAR 0 10
54882: PPUSH
54883: LD_VAR 0 11
54887: PPUSH
54888: CALL_OW 546
54892: ST_TO_ADDR
// if hex [ 1 ] then
54893: LD_VAR 0 4
54897: PUSH
54898: LD_INT 1
54900: ARRAY
54901: IFFALSE 54905
// exit ;
54903: GO 55308
// height := hex [ 2 ] ;
54905: LD_ADDR_VAR 0 15
54909: PUSH
54910: LD_VAR 0 4
54914: PUSH
54915: LD_INT 2
54917: ARRAY
54918: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
54919: LD_ADDR_VAR 0 14
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: LD_INT 2
54929: PUSH
54930: LD_INT 3
54932: PUSH
54933: LD_INT 5
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: ST_TO_ADDR
// for i in tmp do
54942: LD_ADDR_VAR 0 8
54946: PUSH
54947: LD_VAR 0 14
54951: PUSH
54952: FOR_IN
54953: IFFALSE 55123
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
54955: LD_ADDR_VAR 0 9
54959: PUSH
54960: LD_VAR 0 10
54964: PPUSH
54965: LD_VAR 0 8
54969: PPUSH
54970: LD_INT 5
54972: PPUSH
54973: CALL_OW 272
54977: PUSH
54978: LD_VAR 0 11
54982: PPUSH
54983: LD_VAR 0 8
54987: PPUSH
54988: LD_INT 5
54990: PPUSH
54991: CALL_OW 273
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
55000: LD_VAR 0 9
55004: PUSH
55005: LD_INT 1
55007: ARRAY
55008: PPUSH
55009: LD_VAR 0 9
55013: PUSH
55014: LD_INT 2
55016: ARRAY
55017: PPUSH
55018: CALL_OW 488
55022: IFFALSE 55121
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
55024: LD_ADDR_VAR 0 4
55028: PUSH
55029: LD_VAR 0 9
55033: PUSH
55034: LD_INT 1
55036: ARRAY
55037: PPUSH
55038: LD_VAR 0 9
55042: PUSH
55043: LD_INT 2
55045: ARRAY
55046: PPUSH
55047: CALL_OW 546
55051: ST_TO_ADDR
// if hex [ 1 ] then
55052: LD_VAR 0 4
55056: PUSH
55057: LD_INT 1
55059: ARRAY
55060: IFFALSE 55064
// continue ;
55062: GO 54952
// h := hex [ 2 ] ;
55064: LD_ADDR_VAR 0 13
55068: PUSH
55069: LD_VAR 0 4
55073: PUSH
55074: LD_INT 2
55076: ARRAY
55077: ST_TO_ADDR
// if h + 7 < height then
55078: LD_VAR 0 13
55082: PUSH
55083: LD_INT 7
55085: PLUS
55086: PUSH
55087: LD_VAR 0 15
55091: LESS
55092: IFFALSE 55121
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
55094: LD_ADDR_VAR 0 18
55098: PUSH
55099: LD_INT 7
55101: PUSH
55102: LD_INT 28
55104: PUSH
55105: LD_INT 45
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: LIST
55112: PUSH
55113: LD_VAR 0 12
55117: ARRAY
55118: ST_TO_ADDR
// break ;
55119: GO 55123
// end ; end ; end ;
55121: GO 54952
55123: POP
55124: POP
// end ; if not weapon then
55125: LD_VAR 0 18
55129: NOT
55130: IFFALSE 55190
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
55132: LD_ADDR_VAR 0 5
55136: PUSH
55137: LD_VAR 0 5
55141: PUSH
55142: LD_INT 11
55144: PUSH
55145: LD_INT 30
55147: PUSH
55148: LD_INT 49
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: LIST
55155: DIFF
55156: ST_TO_ADDR
// if not list then
55157: LD_VAR 0 5
55161: NOT
55162: IFFALSE 55166
// exit ;
55164: GO 55308
// weapon := list [ rand ( 1 , list ) ] ;
55166: LD_ADDR_VAR 0 18
55170: PUSH
55171: LD_VAR 0 5
55175: PUSH
55176: LD_INT 1
55178: PPUSH
55179: LD_VAR 0 5
55183: PPUSH
55184: CALL_OW 12
55188: ARRAY
55189: ST_TO_ADDR
// end ; if weapon then
55190: LD_VAR 0 18
55194: IFFALSE 55308
// begin tmp := CostOfWeapon ( weapon ) ;
55196: LD_ADDR_VAR 0 14
55200: PUSH
55201: LD_VAR 0 18
55205: PPUSH
55206: CALL_OW 451
55210: ST_TO_ADDR
// j := GetBase ( tower ) ;
55211: LD_ADDR_VAR 0 9
55215: PUSH
55216: LD_VAR 0 1
55220: PPUSH
55221: CALL_OW 274
55225: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
55226: LD_VAR 0 9
55230: PPUSH
55231: LD_INT 1
55233: PPUSH
55234: CALL_OW 275
55238: PUSH
55239: LD_VAR 0 14
55243: PUSH
55244: LD_INT 1
55246: ARRAY
55247: GREATEREQUAL
55248: PUSH
55249: LD_VAR 0 9
55253: PPUSH
55254: LD_INT 2
55256: PPUSH
55257: CALL_OW 275
55261: PUSH
55262: LD_VAR 0 14
55266: PUSH
55267: LD_INT 2
55269: ARRAY
55270: GREATEREQUAL
55271: AND
55272: PUSH
55273: LD_VAR 0 9
55277: PPUSH
55278: LD_INT 3
55280: PPUSH
55281: CALL_OW 275
55285: PUSH
55286: LD_VAR 0 14
55290: PUSH
55291: LD_INT 3
55293: ARRAY
55294: GREATEREQUAL
55295: AND
55296: IFFALSE 55308
// result := weapon ;
55298: LD_ADDR_VAR 0 3
55302: PUSH
55303: LD_VAR 0 18
55307: ST_TO_ADDR
// end ; end ;
55308: LD_VAR 0 3
55312: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
55313: LD_INT 0
55315: PPUSH
55316: PPUSH
// result := true ;
55317: LD_ADDR_VAR 0 3
55321: PUSH
55322: LD_INT 1
55324: ST_TO_ADDR
// if array1 = array2 then
55325: LD_VAR 0 1
55329: PUSH
55330: LD_VAR 0 2
55334: EQUAL
55335: IFFALSE 55395
// begin for i = 1 to array1 do
55337: LD_ADDR_VAR 0 4
55341: PUSH
55342: DOUBLE
55343: LD_INT 1
55345: DEC
55346: ST_TO_ADDR
55347: LD_VAR 0 1
55351: PUSH
55352: FOR_TO
55353: IFFALSE 55391
// if array1 [ i ] <> array2 [ i ] then
55355: LD_VAR 0 1
55359: PUSH
55360: LD_VAR 0 4
55364: ARRAY
55365: PUSH
55366: LD_VAR 0 2
55370: PUSH
55371: LD_VAR 0 4
55375: ARRAY
55376: NONEQUAL
55377: IFFALSE 55389
// begin result := false ;
55379: LD_ADDR_VAR 0 3
55383: PUSH
55384: LD_INT 0
55386: ST_TO_ADDR
// break ;
55387: GO 55391
// end ;
55389: GO 55352
55391: POP
55392: POP
// end else
55393: GO 55403
// result := false ;
55395: LD_ADDR_VAR 0 3
55399: PUSH
55400: LD_INT 0
55402: ST_TO_ADDR
// end ;
55403: LD_VAR 0 3
55407: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
55408: LD_INT 0
55410: PPUSH
55411: PPUSH
55412: PPUSH
// pom := GetBase ( fac ) ;
55413: LD_ADDR_VAR 0 5
55417: PUSH
55418: LD_VAR 0 1
55422: PPUSH
55423: CALL_OW 274
55427: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
55428: LD_ADDR_VAR 0 4
55432: PUSH
55433: LD_VAR 0 2
55437: PUSH
55438: LD_INT 1
55440: ARRAY
55441: PPUSH
55442: LD_VAR 0 2
55446: PUSH
55447: LD_INT 2
55449: ARRAY
55450: PPUSH
55451: LD_VAR 0 2
55455: PUSH
55456: LD_INT 3
55458: ARRAY
55459: PPUSH
55460: LD_VAR 0 2
55464: PUSH
55465: LD_INT 4
55467: ARRAY
55468: PPUSH
55469: CALL_OW 449
55473: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55474: LD_ADDR_VAR 0 3
55478: PUSH
55479: LD_VAR 0 5
55483: PPUSH
55484: LD_INT 1
55486: PPUSH
55487: CALL_OW 275
55491: PUSH
55492: LD_VAR 0 4
55496: PUSH
55497: LD_INT 1
55499: ARRAY
55500: GREATEREQUAL
55501: PUSH
55502: LD_VAR 0 5
55506: PPUSH
55507: LD_INT 2
55509: PPUSH
55510: CALL_OW 275
55514: PUSH
55515: LD_VAR 0 4
55519: PUSH
55520: LD_INT 2
55522: ARRAY
55523: GREATEREQUAL
55524: AND
55525: PUSH
55526: LD_VAR 0 5
55530: PPUSH
55531: LD_INT 3
55533: PPUSH
55534: CALL_OW 275
55538: PUSH
55539: LD_VAR 0 4
55543: PUSH
55544: LD_INT 3
55546: ARRAY
55547: GREATEREQUAL
55548: AND
55549: ST_TO_ADDR
// end ;
55550: LD_VAR 0 3
55554: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
55555: LD_INT 0
55557: PPUSH
55558: PPUSH
55559: PPUSH
55560: PPUSH
// pom := GetBase ( building ) ;
55561: LD_ADDR_VAR 0 3
55565: PUSH
55566: LD_VAR 0 1
55570: PPUSH
55571: CALL_OW 274
55575: ST_TO_ADDR
// if not pom then
55576: LD_VAR 0 3
55580: NOT
55581: IFFALSE 55585
// exit ;
55583: GO 55755
// btype := GetBType ( building ) ;
55585: LD_ADDR_VAR 0 5
55589: PUSH
55590: LD_VAR 0 1
55594: PPUSH
55595: CALL_OW 266
55599: ST_TO_ADDR
// if btype = b_armoury then
55600: LD_VAR 0 5
55604: PUSH
55605: LD_INT 4
55607: EQUAL
55608: IFFALSE 55618
// btype := b_barracks ;
55610: LD_ADDR_VAR 0 5
55614: PUSH
55615: LD_INT 5
55617: ST_TO_ADDR
// if btype = b_depot then
55618: LD_VAR 0 5
55622: PUSH
55623: LD_INT 0
55625: EQUAL
55626: IFFALSE 55636
// btype := b_warehouse ;
55628: LD_ADDR_VAR 0 5
55632: PUSH
55633: LD_INT 1
55635: ST_TO_ADDR
// if btype = b_workshop then
55636: LD_VAR 0 5
55640: PUSH
55641: LD_INT 2
55643: EQUAL
55644: IFFALSE 55654
// btype := b_factory ;
55646: LD_ADDR_VAR 0 5
55650: PUSH
55651: LD_INT 3
55653: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55654: LD_ADDR_VAR 0 4
55658: PUSH
55659: LD_VAR 0 5
55663: PPUSH
55664: LD_VAR 0 1
55668: PPUSH
55669: CALL_OW 248
55673: PPUSH
55674: CALL_OW 450
55678: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55679: LD_ADDR_VAR 0 2
55683: PUSH
55684: LD_VAR 0 3
55688: PPUSH
55689: LD_INT 1
55691: PPUSH
55692: CALL_OW 275
55696: PUSH
55697: LD_VAR 0 4
55701: PUSH
55702: LD_INT 1
55704: ARRAY
55705: GREATEREQUAL
55706: PUSH
55707: LD_VAR 0 3
55711: PPUSH
55712: LD_INT 2
55714: PPUSH
55715: CALL_OW 275
55719: PUSH
55720: LD_VAR 0 4
55724: PUSH
55725: LD_INT 2
55727: ARRAY
55728: GREATEREQUAL
55729: AND
55730: PUSH
55731: LD_VAR 0 3
55735: PPUSH
55736: LD_INT 3
55738: PPUSH
55739: CALL_OW 275
55743: PUSH
55744: LD_VAR 0 4
55748: PUSH
55749: LD_INT 3
55751: ARRAY
55752: GREATEREQUAL
55753: AND
55754: ST_TO_ADDR
// end ;
55755: LD_VAR 0 2
55759: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
55760: LD_INT 0
55762: PPUSH
55763: PPUSH
55764: PPUSH
// pom := GetBase ( building ) ;
55765: LD_ADDR_VAR 0 4
55769: PUSH
55770: LD_VAR 0 1
55774: PPUSH
55775: CALL_OW 274
55779: ST_TO_ADDR
// if not pom then
55780: LD_VAR 0 4
55784: NOT
55785: IFFALSE 55789
// exit ;
55787: GO 55890
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55789: LD_ADDR_VAR 0 5
55793: PUSH
55794: LD_VAR 0 2
55798: PPUSH
55799: LD_VAR 0 1
55803: PPUSH
55804: CALL_OW 248
55808: PPUSH
55809: CALL_OW 450
55813: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55814: LD_ADDR_VAR 0 3
55818: PUSH
55819: LD_VAR 0 4
55823: PPUSH
55824: LD_INT 1
55826: PPUSH
55827: CALL_OW 275
55831: PUSH
55832: LD_VAR 0 5
55836: PUSH
55837: LD_INT 1
55839: ARRAY
55840: GREATEREQUAL
55841: PUSH
55842: LD_VAR 0 4
55846: PPUSH
55847: LD_INT 2
55849: PPUSH
55850: CALL_OW 275
55854: PUSH
55855: LD_VAR 0 5
55859: PUSH
55860: LD_INT 2
55862: ARRAY
55863: GREATEREQUAL
55864: AND
55865: PUSH
55866: LD_VAR 0 4
55870: PPUSH
55871: LD_INT 3
55873: PPUSH
55874: CALL_OW 275
55878: PUSH
55879: LD_VAR 0 5
55883: PUSH
55884: LD_INT 3
55886: ARRAY
55887: GREATEREQUAL
55888: AND
55889: ST_TO_ADDR
// end ;
55890: LD_VAR 0 3
55894: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
55895: LD_INT 0
55897: PPUSH
55898: PPUSH
55899: PPUSH
55900: PPUSH
55901: PPUSH
55902: PPUSH
55903: PPUSH
55904: PPUSH
55905: PPUSH
55906: PPUSH
// result := false ;
55907: LD_ADDR_VAR 0 6
55911: PUSH
55912: LD_INT 0
55914: ST_TO_ADDR
// if not base or not btype or not x or not y then
55915: LD_VAR 0 1
55919: NOT
55920: PUSH
55921: LD_VAR 0 2
55925: NOT
55926: OR
55927: PUSH
55928: LD_VAR 0 3
55932: NOT
55933: OR
55934: PUSH
55935: LD_VAR 0 4
55939: NOT
55940: OR
55941: IFFALSE 55945
// exit ;
55943: GO 56554
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
55945: LD_ADDR_VAR 0 12
55949: PUSH
55950: LD_VAR 0 2
55954: PPUSH
55955: LD_VAR 0 3
55959: PPUSH
55960: LD_VAR 0 4
55964: PPUSH
55965: LD_VAR 0 5
55969: PPUSH
55970: LD_VAR 0 1
55974: PUSH
55975: LD_INT 1
55977: ARRAY
55978: PPUSH
55979: CALL_OW 248
55983: PPUSH
55984: LD_INT 0
55986: PPUSH
55987: CALL 57391 0 6
55991: ST_TO_ADDR
// if not hexes then
55992: LD_VAR 0 12
55996: NOT
55997: IFFALSE 56001
// exit ;
55999: GO 56554
// for i = 1 to hexes do
56001: LD_ADDR_VAR 0 7
56005: PUSH
56006: DOUBLE
56007: LD_INT 1
56009: DEC
56010: ST_TO_ADDR
56011: LD_VAR 0 12
56015: PUSH
56016: FOR_TO
56017: IFFALSE 56552
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56019: LD_ADDR_VAR 0 11
56023: PUSH
56024: LD_VAR 0 12
56028: PUSH
56029: LD_VAR 0 7
56033: ARRAY
56034: PUSH
56035: LD_INT 1
56037: ARRAY
56038: PPUSH
56039: LD_VAR 0 12
56043: PUSH
56044: LD_VAR 0 7
56048: ARRAY
56049: PUSH
56050: LD_INT 2
56052: ARRAY
56053: PPUSH
56054: CALL_OW 428
56058: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
56059: LD_VAR 0 12
56063: PUSH
56064: LD_VAR 0 7
56068: ARRAY
56069: PUSH
56070: LD_INT 1
56072: ARRAY
56073: PPUSH
56074: LD_VAR 0 12
56078: PUSH
56079: LD_VAR 0 7
56083: ARRAY
56084: PUSH
56085: LD_INT 2
56087: ARRAY
56088: PPUSH
56089: CALL_OW 351
56093: PUSH
56094: LD_VAR 0 12
56098: PUSH
56099: LD_VAR 0 7
56103: ARRAY
56104: PUSH
56105: LD_INT 1
56107: ARRAY
56108: PPUSH
56109: LD_VAR 0 12
56113: PUSH
56114: LD_VAR 0 7
56118: ARRAY
56119: PUSH
56120: LD_INT 2
56122: ARRAY
56123: PPUSH
56124: CALL_OW 488
56128: NOT
56129: OR
56130: PUSH
56131: LD_VAR 0 11
56135: PPUSH
56136: CALL_OW 247
56140: PUSH
56141: LD_INT 3
56143: EQUAL
56144: OR
56145: IFFALSE 56151
// exit ;
56147: POP
56148: POP
56149: GO 56554
// if not tmp or not tmp in base then
56151: LD_VAR 0 11
56155: NOT
56156: PUSH
56157: LD_VAR 0 11
56161: PUSH
56162: LD_VAR 0 1
56166: IN
56167: NOT
56168: OR
56169: IFFALSE 56173
// continue ;
56171: GO 56016
// result := true ;
56173: LD_ADDR_VAR 0 6
56177: PUSH
56178: LD_INT 1
56180: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56181: LD_ADDR_VAR 0 15
56185: PUSH
56186: LD_VAR 0 1
56190: PPUSH
56191: LD_INT 22
56193: PUSH
56194: LD_VAR 0 11
56198: PPUSH
56199: CALL_OW 255
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: LD_INT 30
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 30
56223: PUSH
56224: LD_INT 1
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: LIST
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PPUSH
56240: CALL_OW 72
56244: ST_TO_ADDR
// if dep then
56245: LD_VAR 0 15
56249: IFFALSE 56385
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
56251: LD_ADDR_VAR 0 14
56255: PUSH
56256: LD_VAR 0 15
56260: PUSH
56261: LD_INT 1
56263: ARRAY
56264: PPUSH
56265: CALL_OW 250
56269: PPUSH
56270: LD_VAR 0 15
56274: PUSH
56275: LD_INT 1
56277: ARRAY
56278: PPUSH
56279: CALL_OW 254
56283: PPUSH
56284: LD_INT 5
56286: PPUSH
56287: CALL_OW 272
56291: PUSH
56292: LD_VAR 0 15
56296: PUSH
56297: LD_INT 1
56299: ARRAY
56300: PPUSH
56301: CALL_OW 251
56305: PPUSH
56306: LD_VAR 0 15
56310: PUSH
56311: LD_INT 1
56313: ARRAY
56314: PPUSH
56315: CALL_OW 254
56319: PPUSH
56320: LD_INT 5
56322: PPUSH
56323: CALL_OW 273
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
56332: LD_VAR 0 14
56336: PUSH
56337: LD_INT 1
56339: ARRAY
56340: PPUSH
56341: LD_VAR 0 14
56345: PUSH
56346: LD_INT 2
56348: ARRAY
56349: PPUSH
56350: CALL_OW 488
56354: IFFALSE 56385
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
56356: LD_VAR 0 11
56360: PPUSH
56361: LD_VAR 0 14
56365: PUSH
56366: LD_INT 1
56368: ARRAY
56369: PPUSH
56370: LD_VAR 0 14
56374: PUSH
56375: LD_INT 2
56377: ARRAY
56378: PPUSH
56379: CALL_OW 111
// continue ;
56383: GO 56016
// end ; end ; r := GetDir ( tmp ) ;
56385: LD_ADDR_VAR 0 13
56389: PUSH
56390: LD_VAR 0 11
56394: PPUSH
56395: CALL_OW 254
56399: ST_TO_ADDR
// if r = 5 then
56400: LD_VAR 0 13
56404: PUSH
56405: LD_INT 5
56407: EQUAL
56408: IFFALSE 56418
// r := 0 ;
56410: LD_ADDR_VAR 0 13
56414: PUSH
56415: LD_INT 0
56417: ST_TO_ADDR
// for j = r to 5 do
56418: LD_ADDR_VAR 0 8
56422: PUSH
56423: DOUBLE
56424: LD_VAR 0 13
56428: DEC
56429: ST_TO_ADDR
56430: LD_INT 5
56432: PUSH
56433: FOR_TO
56434: IFFALSE 56548
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
56436: LD_ADDR_VAR 0 9
56440: PUSH
56441: LD_VAR 0 11
56445: PPUSH
56446: CALL_OW 250
56450: PPUSH
56451: LD_VAR 0 8
56455: PPUSH
56456: LD_INT 2
56458: PPUSH
56459: CALL_OW 272
56463: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
56464: LD_ADDR_VAR 0 10
56468: PUSH
56469: LD_VAR 0 11
56473: PPUSH
56474: CALL_OW 251
56478: PPUSH
56479: LD_VAR 0 8
56483: PPUSH
56484: LD_INT 2
56486: PPUSH
56487: CALL_OW 273
56491: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
56492: LD_VAR 0 9
56496: PPUSH
56497: LD_VAR 0 10
56501: PPUSH
56502: CALL_OW 488
56506: PUSH
56507: LD_VAR 0 9
56511: PPUSH
56512: LD_VAR 0 10
56516: PPUSH
56517: CALL_OW 428
56521: NOT
56522: AND
56523: IFFALSE 56546
// begin ComMoveXY ( tmp , _x , _y ) ;
56525: LD_VAR 0 11
56529: PPUSH
56530: LD_VAR 0 9
56534: PPUSH
56535: LD_VAR 0 10
56539: PPUSH
56540: CALL_OW 111
// break ;
56544: GO 56548
// end ; end ;
56546: GO 56433
56548: POP
56549: POP
// end ;
56550: GO 56016
56552: POP
56553: POP
// end ;
56554: LD_VAR 0 6
56558: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
56559: LD_INT 0
56561: PPUSH
56562: PPUSH
56563: PPUSH
56564: PPUSH
56565: PPUSH
56566: PPUSH
56567: PPUSH
56568: PPUSH
56569: PPUSH
56570: PPUSH
// result := false ;
56571: LD_ADDR_VAR 0 6
56575: PUSH
56576: LD_INT 0
56578: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56579: LD_VAR 0 1
56583: NOT
56584: PUSH
56585: LD_VAR 0 1
56589: PPUSH
56590: CALL_OW 266
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: IN
56605: NOT
56606: OR
56607: PUSH
56608: LD_VAR 0 2
56612: NOT
56613: OR
56614: PUSH
56615: LD_VAR 0 5
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: LD_INT 2
56628: PUSH
56629: LD_INT 3
56631: PUSH
56632: LD_INT 4
56634: PUSH
56635: LD_INT 5
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: IN
56646: NOT
56647: OR
56648: PUSH
56649: LD_VAR 0 3
56653: PPUSH
56654: LD_VAR 0 4
56658: PPUSH
56659: CALL_OW 488
56663: NOT
56664: OR
56665: IFFALSE 56669
// exit ;
56667: GO 57386
// pom := GetBase ( depot ) ;
56669: LD_ADDR_VAR 0 10
56673: PUSH
56674: LD_VAR 0 1
56678: PPUSH
56679: CALL_OW 274
56683: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56684: LD_ADDR_VAR 0 11
56688: PUSH
56689: LD_VAR 0 2
56693: PPUSH
56694: LD_VAR 0 1
56698: PPUSH
56699: CALL_OW 248
56703: PPUSH
56704: CALL_OW 450
56708: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
56709: LD_VAR 0 10
56713: PPUSH
56714: LD_INT 1
56716: PPUSH
56717: CALL_OW 275
56721: PUSH
56722: LD_VAR 0 11
56726: PUSH
56727: LD_INT 1
56729: ARRAY
56730: GREATEREQUAL
56731: PUSH
56732: LD_VAR 0 10
56736: PPUSH
56737: LD_INT 2
56739: PPUSH
56740: CALL_OW 275
56744: PUSH
56745: LD_VAR 0 11
56749: PUSH
56750: LD_INT 2
56752: ARRAY
56753: GREATEREQUAL
56754: AND
56755: PUSH
56756: LD_VAR 0 10
56760: PPUSH
56761: LD_INT 3
56763: PPUSH
56764: CALL_OW 275
56768: PUSH
56769: LD_VAR 0 11
56773: PUSH
56774: LD_INT 3
56776: ARRAY
56777: GREATEREQUAL
56778: AND
56779: NOT
56780: IFFALSE 56784
// exit ;
56782: GO 57386
// if GetBType ( depot ) = b_depot then
56784: LD_VAR 0 1
56788: PPUSH
56789: CALL_OW 266
56793: PUSH
56794: LD_INT 0
56796: EQUAL
56797: IFFALSE 56809
// dist := 28 else
56799: LD_ADDR_VAR 0 14
56803: PUSH
56804: LD_INT 28
56806: ST_TO_ADDR
56807: GO 56817
// dist := 36 ;
56809: LD_ADDR_VAR 0 14
56813: PUSH
56814: LD_INT 36
56816: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
56817: LD_VAR 0 1
56821: PPUSH
56822: LD_VAR 0 3
56826: PPUSH
56827: LD_VAR 0 4
56831: PPUSH
56832: CALL_OW 297
56836: PUSH
56837: LD_VAR 0 14
56841: GREATER
56842: IFFALSE 56846
// exit ;
56844: GO 57386
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
56846: LD_ADDR_VAR 0 12
56850: PUSH
56851: LD_VAR 0 2
56855: PPUSH
56856: LD_VAR 0 3
56860: PPUSH
56861: LD_VAR 0 4
56865: PPUSH
56866: LD_VAR 0 5
56870: PPUSH
56871: LD_VAR 0 1
56875: PPUSH
56876: CALL_OW 248
56880: PPUSH
56881: LD_INT 0
56883: PPUSH
56884: CALL 57391 0 6
56888: ST_TO_ADDR
// if not hexes then
56889: LD_VAR 0 12
56893: NOT
56894: IFFALSE 56898
// exit ;
56896: GO 57386
// hex := GetHexInfo ( x , y ) ;
56898: LD_ADDR_VAR 0 15
56902: PUSH
56903: LD_VAR 0 3
56907: PPUSH
56908: LD_VAR 0 4
56912: PPUSH
56913: CALL_OW 546
56917: ST_TO_ADDR
// if hex [ 1 ] then
56918: LD_VAR 0 15
56922: PUSH
56923: LD_INT 1
56925: ARRAY
56926: IFFALSE 56930
// exit ;
56928: GO 57386
// height := hex [ 2 ] ;
56930: LD_ADDR_VAR 0 13
56934: PUSH
56935: LD_VAR 0 15
56939: PUSH
56940: LD_INT 2
56942: ARRAY
56943: ST_TO_ADDR
// for i = 1 to hexes do
56944: LD_ADDR_VAR 0 7
56948: PUSH
56949: DOUBLE
56950: LD_INT 1
56952: DEC
56953: ST_TO_ADDR
56954: LD_VAR 0 12
56958: PUSH
56959: FOR_TO
56960: IFFALSE 57290
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56962: LD_VAR 0 12
56966: PUSH
56967: LD_VAR 0 7
56971: ARRAY
56972: PUSH
56973: LD_INT 1
56975: ARRAY
56976: PPUSH
56977: LD_VAR 0 12
56981: PUSH
56982: LD_VAR 0 7
56986: ARRAY
56987: PUSH
56988: LD_INT 2
56990: ARRAY
56991: PPUSH
56992: CALL_OW 488
56996: NOT
56997: PUSH
56998: LD_VAR 0 12
57002: PUSH
57003: LD_VAR 0 7
57007: ARRAY
57008: PUSH
57009: LD_INT 1
57011: ARRAY
57012: PPUSH
57013: LD_VAR 0 12
57017: PUSH
57018: LD_VAR 0 7
57022: ARRAY
57023: PUSH
57024: LD_INT 2
57026: ARRAY
57027: PPUSH
57028: CALL_OW 428
57032: PUSH
57033: LD_INT 0
57035: GREATER
57036: OR
57037: PUSH
57038: LD_VAR 0 12
57042: PUSH
57043: LD_VAR 0 7
57047: ARRAY
57048: PUSH
57049: LD_INT 1
57051: ARRAY
57052: PPUSH
57053: LD_VAR 0 12
57057: PUSH
57058: LD_VAR 0 7
57062: ARRAY
57063: PUSH
57064: LD_INT 2
57066: ARRAY
57067: PPUSH
57068: CALL_OW 351
57072: OR
57073: IFFALSE 57079
// exit ;
57075: POP
57076: POP
57077: GO 57386
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57079: LD_ADDR_VAR 0 8
57083: PUSH
57084: LD_VAR 0 12
57088: PUSH
57089: LD_VAR 0 7
57093: ARRAY
57094: PUSH
57095: LD_INT 1
57097: ARRAY
57098: PPUSH
57099: LD_VAR 0 12
57103: PUSH
57104: LD_VAR 0 7
57108: ARRAY
57109: PUSH
57110: LD_INT 2
57112: ARRAY
57113: PPUSH
57114: CALL_OW 546
57118: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
57119: LD_VAR 0 8
57123: PUSH
57124: LD_INT 1
57126: ARRAY
57127: PUSH
57128: LD_VAR 0 8
57132: PUSH
57133: LD_INT 2
57135: ARRAY
57136: PUSH
57137: LD_VAR 0 13
57141: PUSH
57142: LD_INT 2
57144: PLUS
57145: GREATER
57146: OR
57147: PUSH
57148: LD_VAR 0 8
57152: PUSH
57153: LD_INT 2
57155: ARRAY
57156: PUSH
57157: LD_VAR 0 13
57161: PUSH
57162: LD_INT 2
57164: MINUS
57165: LESS
57166: OR
57167: PUSH
57168: LD_VAR 0 8
57172: PUSH
57173: LD_INT 3
57175: ARRAY
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: LD_INT 8
57182: PUSH
57183: LD_INT 9
57185: PUSH
57186: LD_INT 10
57188: PUSH
57189: LD_INT 11
57191: PUSH
57192: LD_INT 12
57194: PUSH
57195: LD_INT 13
57197: PUSH
57198: LD_INT 16
57200: PUSH
57201: LD_INT 17
57203: PUSH
57204: LD_INT 18
57206: PUSH
57207: LD_INT 19
57209: PUSH
57210: LD_INT 20
57212: PUSH
57213: LD_INT 21
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: IN
57231: NOT
57232: OR
57233: PUSH
57234: LD_VAR 0 8
57238: PUSH
57239: LD_INT 5
57241: ARRAY
57242: NOT
57243: OR
57244: PUSH
57245: LD_VAR 0 8
57249: PUSH
57250: LD_INT 6
57252: ARRAY
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: LD_INT 2
57259: PUSH
57260: LD_INT 7
57262: PUSH
57263: LD_INT 9
57265: PUSH
57266: LD_INT 10
57268: PUSH
57269: LD_INT 11
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: IN
57280: NOT
57281: OR
57282: IFFALSE 57288
// exit ;
57284: POP
57285: POP
57286: GO 57386
// end ;
57288: GO 56959
57290: POP
57291: POP
// side := GetSide ( depot ) ;
57292: LD_ADDR_VAR 0 9
57296: PUSH
57297: LD_VAR 0 1
57301: PPUSH
57302: CALL_OW 255
57306: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
57307: LD_VAR 0 9
57311: PPUSH
57312: LD_VAR 0 3
57316: PPUSH
57317: LD_VAR 0 4
57321: PPUSH
57322: LD_INT 20
57324: PPUSH
57325: CALL 50040 0 4
57329: PUSH
57330: LD_INT 4
57332: ARRAY
57333: IFFALSE 57337
// exit ;
57335: GO 57386
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
57337: LD_VAR 0 2
57341: PUSH
57342: LD_INT 29
57344: PUSH
57345: LD_INT 30
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: IN
57352: PUSH
57353: LD_VAR 0 3
57357: PPUSH
57358: LD_VAR 0 4
57362: PPUSH
57363: LD_VAR 0 9
57367: PPUSH
57368: CALL_OW 440
57372: NOT
57373: AND
57374: IFFALSE 57378
// exit ;
57376: GO 57386
// result := true ;
57378: LD_ADDR_VAR 0 6
57382: PUSH
57383: LD_INT 1
57385: ST_TO_ADDR
// end ;
57386: LD_VAR 0 6
57390: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
57391: LD_INT 0
57393: PPUSH
57394: PPUSH
57395: PPUSH
57396: PPUSH
57397: PPUSH
57398: PPUSH
57399: PPUSH
57400: PPUSH
57401: PPUSH
57402: PPUSH
57403: PPUSH
57404: PPUSH
57405: PPUSH
57406: PPUSH
57407: PPUSH
57408: PPUSH
57409: PPUSH
57410: PPUSH
57411: PPUSH
57412: PPUSH
57413: PPUSH
57414: PPUSH
57415: PPUSH
57416: PPUSH
57417: PPUSH
57418: PPUSH
57419: PPUSH
57420: PPUSH
57421: PPUSH
57422: PPUSH
57423: PPUSH
57424: PPUSH
57425: PPUSH
57426: PPUSH
57427: PPUSH
57428: PPUSH
57429: PPUSH
57430: PPUSH
57431: PPUSH
57432: PPUSH
57433: PPUSH
57434: PPUSH
57435: PPUSH
57436: PPUSH
57437: PPUSH
57438: PPUSH
57439: PPUSH
57440: PPUSH
57441: PPUSH
57442: PPUSH
57443: PPUSH
57444: PPUSH
57445: PPUSH
57446: PPUSH
57447: PPUSH
57448: PPUSH
57449: PPUSH
57450: PPUSH
// result = [ ] ;
57451: LD_ADDR_VAR 0 7
57455: PUSH
57456: EMPTY
57457: ST_TO_ADDR
// temp_list = [ ] ;
57458: LD_ADDR_VAR 0 9
57462: PUSH
57463: EMPTY
57464: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57465: LD_VAR 0 4
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: LD_INT 2
57478: PUSH
57479: LD_INT 3
57481: PUSH
57482: LD_INT 4
57484: PUSH
57485: LD_INT 5
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: IN
57496: NOT
57497: PUSH
57498: LD_VAR 0 1
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: IN
57513: PUSH
57514: LD_VAR 0 5
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: LD_INT 2
57524: PUSH
57525: LD_INT 3
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: LIST
57532: IN
57533: NOT
57534: AND
57535: OR
57536: IFFALSE 57540
// exit ;
57538: GO 75931
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57540: LD_VAR 0 1
57544: PUSH
57545: LD_INT 6
57547: PUSH
57548: LD_INT 7
57550: PUSH
57551: LD_INT 8
57553: PUSH
57554: LD_INT 13
57556: PUSH
57557: LD_INT 12
57559: PUSH
57560: LD_INT 15
57562: PUSH
57563: LD_INT 11
57565: PUSH
57566: LD_INT 14
57568: PUSH
57569: LD_INT 10
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: IN
57583: IFFALSE 57593
// btype = b_lab ;
57585: LD_ADDR_VAR 0 1
57589: PUSH
57590: LD_INT 6
57592: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57593: LD_VAR 0 6
57597: PUSH
57598: LD_INT 0
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: LD_INT 2
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: LIST
57611: IN
57612: NOT
57613: PUSH
57614: LD_VAR 0 1
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: LD_INT 2
57627: PUSH
57628: LD_INT 3
57630: PUSH
57631: LD_INT 6
57633: PUSH
57634: LD_INT 36
57636: PUSH
57637: LD_INT 4
57639: PUSH
57640: LD_INT 5
57642: PUSH
57643: LD_INT 31
57645: PUSH
57646: LD_INT 32
57648: PUSH
57649: LD_INT 33
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: IN
57665: NOT
57666: PUSH
57667: LD_VAR 0 6
57671: PUSH
57672: LD_INT 1
57674: EQUAL
57675: AND
57676: OR
57677: PUSH
57678: LD_VAR 0 1
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: LD_INT 3
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: IN
57693: NOT
57694: PUSH
57695: LD_VAR 0 6
57699: PUSH
57700: LD_INT 2
57702: EQUAL
57703: AND
57704: OR
57705: IFFALSE 57715
// mode = 0 ;
57707: LD_ADDR_VAR 0 6
57711: PUSH
57712: LD_INT 0
57714: ST_TO_ADDR
// case mode of 0 :
57715: LD_VAR 0 6
57719: PUSH
57720: LD_INT 0
57722: DOUBLE
57723: EQUAL
57724: IFTRUE 57728
57726: GO 69181
57728: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57729: LD_ADDR_VAR 0 11
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: NEG
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: LD_INT 1
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: LD_INT 2
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: LD_INT 2
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: LD_INT 2
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: LD_INT 3
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: LD_INT 3
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: LD_INT 2
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57922: LD_ADDR_VAR 0 12
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: LD_INT 1
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: LD_INT 1
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: LD_INT 1
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 2
58045: NEG
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 2
58056: NEG
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 2
58068: NEG
58069: PUSH
58070: LD_INT 1
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 3
58079: NEG
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 3
58090: NEG
58091: PUSH
58092: LD_INT 1
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58118: LD_ADDR_VAR 0 13
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: LD_INT 1
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 1
58176: NEG
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 1
58199: NEG
58200: PUSH
58201: LD_INT 2
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 2
58211: PUSH
58212: LD_INT 1
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 2
58221: PUSH
58222: LD_INT 2
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: LD_INT 2
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 2
58241: NEG
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 2
58253: NEG
58254: PUSH
58255: LD_INT 2
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 2
58265: NEG
58266: PUSH
58267: LD_INT 3
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 3
58277: NEG
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 3
58289: NEG
58290: PUSH
58291: LD_INT 3
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58317: LD_ADDR_VAR 0 14
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: LD_INT 1
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 0
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 1
58375: NEG
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: LD_INT 2
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: LD_INT 2
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: LD_INT 1
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: LD_INT 2
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: LD_INT 2
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: NEG
58464: PUSH
58465: LD_INT 3
58467: NEG
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: LD_INT 3
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: LD_INT 2
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58513: LD_ADDR_VAR 0 15
58517: PUSH
58518: LD_INT 0
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: LD_INT 0
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: LD_INT 1
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 1
58571: NEG
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: LD_INT 1
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 2
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 2
58615: PUSH
58616: LD_INT 1
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 2
58636: NEG
58637: PUSH
58638: LD_INT 0
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 2
58647: NEG
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 2
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 3
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 3
58680: PUSH
58681: LD_INT 1
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58706: LD_ADDR_VAR 0 16
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: LD_INT 1
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: LD_INT 1
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: LD_INT 1
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: LD_INT 2
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 2
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 2
58809: PUSH
58810: LD_INT 2
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: LD_INT 2
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 2
58829: NEG
58830: PUSH
58831: LD_INT 1
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 2
58841: NEG
58842: PUSH
58843: LD_INT 2
58845: NEG
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 3
58853: PUSH
58854: LD_INT 2
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 3
58863: PUSH
58864: LD_INT 3
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 2
58873: PUSH
58874: LD_INT 3
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58899: LD_ADDR_VAR 0 17
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: LD_INT 0
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: LD_INT 1
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: LD_INT 0
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 1
58937: PUSH
58938: LD_INT 1
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 1
58957: NEG
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 1
58968: NEG
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: LD_INT 2
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: LD_INT 2
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 2
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 2
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: PUSH
59035: LD_INT 2
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: LD_INT 2
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: LD_INT 2
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 2
59075: NEG
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 2
59086: NEG
59087: PUSH
59088: LD_INT 1
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 2
59098: NEG
59099: PUSH
59100: LD_INT 2
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59129: LD_ADDR_VAR 0 18
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: LD_INT 1
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 1
59187: NEG
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 1
59210: NEG
59211: PUSH
59212: LD_INT 2
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: LD_INT 2
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 2
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 2
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 2
59264: PUSH
59265: LD_INT 2
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 1
59274: PUSH
59275: LD_INT 2
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 0
59284: PUSH
59285: LD_INT 2
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 2
59305: NEG
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 2
59316: NEG
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 2
59328: NEG
59329: PUSH
59330: LD_INT 2
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59359: LD_ADDR_VAR 0 19
59363: PUSH
59364: LD_INT 0
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 1
59417: NEG
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: LD_INT 1
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: LD_INT 2
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: LD_INT 2
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 2
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: PUSH
59495: LD_INT 2
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: LD_INT 2
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 0
59514: PUSH
59515: LD_INT 2
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 1
59524: NEG
59525: PUSH
59526: LD_INT 1
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 2
59535: NEG
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 2
59546: NEG
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 2
59558: NEG
59559: PUSH
59560: LD_INT 2
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59589: LD_ADDR_VAR 0 20
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 1
59627: PUSH
59628: LD_INT 1
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: NEG
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: LD_INT 2
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 0
59682: PUSH
59683: LD_INT 2
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 2
59704: PUSH
59705: LD_INT 0
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 2
59714: PUSH
59715: LD_INT 1
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 2
59724: PUSH
59725: LD_INT 2
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 1
59734: PUSH
59735: LD_INT 2
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: LD_INT 2
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 2
59776: NEG
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 2
59788: NEG
59789: PUSH
59790: LD_INT 2
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59819: LD_ADDR_VAR 0 21
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: LD_INT 1
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: LD_INT 1
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: LD_INT 2
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: LD_INT 2
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 2
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 2
59944: PUSH
59945: LD_INT 1
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 2
59995: NEG
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 2
60006: NEG
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 2
60018: NEG
60019: PUSH
60020: LD_INT 2
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60049: LD_ADDR_VAR 0 22
60053: PUSH
60054: LD_INT 0
60056: PUSH
60057: LD_INT 0
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 0
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 1
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 1
60087: PUSH
60088: LD_INT 1
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: LD_INT 1
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 1
60107: NEG
60108: PUSH
60109: LD_INT 0
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: NEG
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 1
60130: NEG
60131: PUSH
60132: LD_INT 2
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 1
60153: PUSH
60154: LD_INT 1
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 2
60164: PUSH
60165: LD_INT 0
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 2
60174: PUSH
60175: LD_INT 1
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: LD_INT 2
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: LD_INT 2
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 0
60204: PUSH
60205: LD_INT 2
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 1
60214: NEG
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 2
60225: NEG
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 2
60236: NEG
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 2
60248: NEG
60249: PUSH
60250: LD_INT 2
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60279: LD_ADDR_VAR 0 23
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: LD_INT 1
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: LD_INT 1
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: LD_INT 1
60352: NEG
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 1
60360: NEG
60361: PUSH
60362: LD_INT 2
60364: NEG
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 0
60372: PUSH
60373: LD_INT 2
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 1
60383: PUSH
60384: LD_INT 1
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 2
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 2
60404: PUSH
60405: LD_INT 1
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 2
60414: PUSH
60415: LD_INT 2
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: LD_INT 2
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: LD_INT 2
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 2
60455: NEG
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 2
60466: NEG
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 2
60478: NEG
60479: PUSH
60480: LD_INT 2
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 2
60490: NEG
60491: PUSH
60492: LD_INT 3
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: LD_INT 3
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 1
60514: PUSH
60515: LD_INT 2
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 2
60525: PUSH
60526: LD_INT 1
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60559: LD_ADDR_VAR 0 24
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: LD_INT 1
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 1
60597: PUSH
60598: LD_INT 1
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 0
60607: PUSH
60608: LD_INT 1
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 1
60617: NEG
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: LD_INT 1
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 1
60640: NEG
60641: PUSH
60642: LD_INT 2
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: LD_INT 2
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 2
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 2
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 2
60694: PUSH
60695: LD_INT 2
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 1
60704: PUSH
60705: LD_INT 2
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: LD_INT 2
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: LD_INT 1
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 2
60735: NEG
60736: PUSH
60737: LD_INT 0
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 2
60746: NEG
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 2
60758: NEG
60759: PUSH
60760: LD_INT 2
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 1
60770: PUSH
60771: LD_INT 2
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 3
60792: PUSH
60793: LD_INT 1
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 3
60802: PUSH
60803: LD_INT 2
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
60835: LD_ADDR_VAR 0 25
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: LD_INT 1
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 1
60873: PUSH
60874: LD_INT 1
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: LD_INT 0
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 1
60904: NEG
60905: PUSH
60906: LD_INT 1
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 1
60916: NEG
60917: PUSH
60918: LD_INT 2
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: LD_INT 2
60931: NEG
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 1
60939: PUSH
60940: LD_INT 1
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 2
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 2
60970: PUSH
60971: LD_INT 2
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 0
60990: PUSH
60991: LD_INT 2
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 1
61000: NEG
61001: PUSH
61002: LD_INT 1
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 2
61011: NEG
61012: PUSH
61013: LD_INT 0
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 2
61022: NEG
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 2
61034: NEG
61035: PUSH
61036: LD_INT 2
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 3
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 3
61056: PUSH
61057: LD_INT 2
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 2
61066: PUSH
61067: LD_INT 3
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 1
61076: PUSH
61077: LD_INT 3
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61109: LD_ADDR_VAR 0 26
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: LD_INT 1
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 1
61167: NEG
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 1
61178: NEG
61179: PUSH
61180: LD_INT 1
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: LD_INT 2
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 0
61202: PUSH
61203: LD_INT 2
61205: NEG
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 1
61213: PUSH
61214: LD_INT 1
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 2
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 2
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 2
61244: PUSH
61245: LD_INT 2
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 1
61254: PUSH
61255: LD_INT 2
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: LD_INT 2
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 2
61285: NEG
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 2
61296: NEG
61297: PUSH
61298: LD_INT 1
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 2
61308: NEG
61309: PUSH
61310: LD_INT 2
61312: NEG
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 2
61320: PUSH
61321: LD_INT 3
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: LD_INT 3
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 1
61340: NEG
61341: PUSH
61342: LD_INT 2
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 2
61351: NEG
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61385: LD_ADDR_VAR 0 27
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: LD_INT 1
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 1
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: LD_INT 1
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: LD_INT 1
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 1
61443: NEG
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 1
61454: NEG
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: NEG
61467: PUSH
61468: LD_INT 2
61470: NEG
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: LD_INT 2
61481: NEG
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 2
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 2
61510: PUSH
61511: LD_INT 1
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: PUSH
61521: LD_INT 2
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: LD_INT 2
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: LD_INT 2
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 2
61561: NEG
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 2
61572: NEG
61573: PUSH
61574: LD_INT 1
61576: NEG
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 2
61584: NEG
61585: PUSH
61586: LD_INT 2
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: LD_INT 2
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 2
61607: NEG
61608: PUSH
61609: LD_INT 1
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 3
61618: NEG
61619: PUSH
61620: LD_INT 1
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 3
61630: NEG
61631: PUSH
61632: LD_INT 2
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61665: LD_ADDR_VAR 0 28
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: LD_INT 1
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 1
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 1
61734: NEG
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: LD_INT 2
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: LD_INT 2
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 2
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 2
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 2
61800: PUSH
61801: LD_INT 2
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: PUSH
61811: LD_INT 2
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: LD_INT 2
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 2
61841: NEG
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 2
61852: NEG
61853: PUSH
61854: LD_INT 1
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 2
61864: NEG
61865: PUSH
61866: LD_INT 2
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: NEG
61877: PUSH
61878: LD_INT 3
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 1
61888: NEG
61889: PUSH
61890: LD_INT 3
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 3
61900: NEG
61901: PUSH
61902: LD_INT 1
61904: NEG
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 3
61912: NEG
61913: PUSH
61914: LD_INT 2
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61947: LD_ADDR_VAR 0 29
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: LD_INT 0
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: LD_INT 1
61967: NEG
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 1
61975: PUSH
61976: LD_INT 0
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: LD_INT 1
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 1
62005: NEG
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 1
62016: NEG
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 1
62028: NEG
62029: PUSH
62030: LD_INT 2
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: LD_INT 2
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: LD_INT 1
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 2
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 2
62072: PUSH
62073: LD_INT 1
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: LD_INT 2
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: LD_INT 2
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 2
62113: NEG
62114: PUSH
62115: LD_INT 1
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 2
62125: NEG
62126: PUSH
62127: LD_INT 2
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 2
62137: NEG
62138: PUSH
62139: LD_INT 3
62141: NEG
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 2
62149: PUSH
62150: LD_INT 1
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 3
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: LD_INT 3
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 1
62180: NEG
62181: PUSH
62182: LD_INT 2
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 3
62191: NEG
62192: PUSH
62193: LD_INT 2
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62226: LD_ADDR_VAR 0 30
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: LD_INT 1
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 1
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 1
62284: NEG
62285: PUSH
62286: LD_INT 0
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: LD_INT 1
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 1
62307: NEG
62308: PUSH
62309: LD_INT 2
62311: NEG
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 0
62319: PUSH
62320: LD_INT 2
62322: NEG
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 1
62330: PUSH
62331: LD_INT 1
62333: NEG
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 2
62341: PUSH
62342: LD_INT 0
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 2
62351: PUSH
62352: LD_INT 1
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 2
62361: PUSH
62362: LD_INT 2
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 1
62371: PUSH
62372: LD_INT 2
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 1
62381: NEG
62382: PUSH
62383: LD_INT 1
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 2
62392: NEG
62393: PUSH
62394: LD_INT 0
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 2
62403: NEG
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: PUSH
62417: LD_INT 3
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 1
62427: PUSH
62428: LD_INT 2
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 3
62438: PUSH
62439: LD_INT 2
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 2
62448: PUSH
62449: LD_INT 3
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 2
62458: NEG
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 3
62469: NEG
62470: PUSH
62471: LD_INT 1
62473: NEG
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62504: LD_ADDR_VAR 0 31
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 0
62521: PUSH
62522: LD_INT 1
62524: NEG
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 1
62532: PUSH
62533: LD_INT 0
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 1
62542: PUSH
62543: LD_INT 1
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: LD_INT 1
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 1
62562: NEG
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: NEG
62574: PUSH
62575: LD_INT 1
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 1
62585: NEG
62586: PUSH
62587: LD_INT 2
62589: NEG
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 1
62597: PUSH
62598: LD_INT 1
62600: NEG
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 2
62608: PUSH
62609: LD_INT 0
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 2
62618: PUSH
62619: LD_INT 1
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 2
62628: PUSH
62629: LD_INT 2
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: LD_INT 2
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: LD_INT 2
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 1
62658: NEG
62659: PUSH
62660: LD_INT 1
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 2
62669: NEG
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 2
62681: NEG
62682: PUSH
62683: LD_INT 2
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 2
62693: NEG
62694: PUSH
62695: LD_INT 3
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 2
62705: PUSH
62706: LD_INT 1
62708: NEG
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 3
62716: PUSH
62717: LD_INT 1
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 1
62726: PUSH
62727: LD_INT 3
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 1
62736: NEG
62737: PUSH
62738: LD_INT 2
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 3
62747: NEG
62748: PUSH
62749: LD_INT 2
62751: NEG
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62782: LD_ADDR_VAR 0 32
62786: PUSH
62787: LD_INT 0
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 0
62799: PUSH
62800: LD_INT 1
62802: NEG
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 1
62820: PUSH
62821: LD_INT 1
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 0
62830: PUSH
62831: LD_INT 1
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 1
62840: NEG
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 1
62851: NEG
62852: PUSH
62853: LD_INT 1
62855: NEG
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 1
62863: NEG
62864: PUSH
62865: LD_INT 2
62867: NEG
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 0
62875: PUSH
62876: LD_INT 2
62878: NEG
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: LD_INT 1
62889: NEG
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 2
62897: PUSH
62898: LD_INT 1
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 2
62907: PUSH
62908: LD_INT 2
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 1
62917: PUSH
62918: LD_INT 2
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: LD_INT 2
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 1
62937: NEG
62938: PUSH
62939: LD_INT 1
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 2
62948: NEG
62949: PUSH
62950: LD_INT 0
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 2
62959: NEG
62960: PUSH
62961: LD_INT 1
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 1
62971: NEG
62972: PUSH
62973: LD_INT 3
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: LD_INT 2
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 3
62994: PUSH
62995: LD_INT 2
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 2
63004: PUSH
63005: LD_INT 3
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 2
63014: NEG
63015: PUSH
63016: LD_INT 1
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 3
63025: NEG
63026: PUSH
63027: LD_INT 1
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63060: LD_ADDR_VAR 0 33
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 0
63077: PUSH
63078: LD_INT 1
63080: NEG
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 1
63088: PUSH
63089: LD_INT 0
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 1
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: LD_INT 1
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 1
63118: NEG
63119: PUSH
63120: LD_INT 0
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 1
63129: NEG
63130: PUSH
63131: LD_INT 1
63133: NEG
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 1
63141: NEG
63142: PUSH
63143: LD_INT 2
63145: NEG
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 1
63153: PUSH
63154: LD_INT 1
63156: NEG
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 2
63164: PUSH
63165: LD_INT 0
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 2
63174: PUSH
63175: LD_INT 1
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 1
63184: PUSH
63185: LD_INT 2
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 0
63194: PUSH
63195: LD_INT 2
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 1
63204: NEG
63205: PUSH
63206: LD_INT 1
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 2
63215: NEG
63216: PUSH
63217: LD_INT 0
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 2
63226: NEG
63227: PUSH
63228: LD_INT 1
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 2
63238: NEG
63239: PUSH
63240: LD_INT 2
63242: NEG
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 2
63250: NEG
63251: PUSH
63252: LD_INT 3
63254: NEG
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 2
63262: PUSH
63263: LD_INT 1
63265: NEG
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 3
63273: PUSH
63274: LD_INT 1
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 1
63283: PUSH
63284: LD_INT 3
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 1
63293: NEG
63294: PUSH
63295: LD_INT 2
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 3
63304: NEG
63305: PUSH
63306: LD_INT 2
63308: NEG
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63339: LD_ADDR_VAR 0 34
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: LD_INT 0
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: LD_INT 1
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: LD_INT 1
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 1
63397: NEG
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: NEG
63409: PUSH
63410: LD_INT 1
63412: NEG
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 1
63420: NEG
63421: PUSH
63422: LD_INT 2
63424: NEG
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: LD_INT 2
63435: NEG
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: LD_INT 1
63446: NEG
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 2
63454: PUSH
63455: LD_INT 1
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 2
63464: PUSH
63465: LD_INT 2
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 1
63474: PUSH
63475: LD_INT 2
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 1
63484: NEG
63485: PUSH
63486: LD_INT 1
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 2
63495: NEG
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 2
63506: NEG
63507: PUSH
63508: LD_INT 1
63510: NEG
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 2
63518: NEG
63519: PUSH
63520: LD_INT 2
63522: NEG
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 1
63530: NEG
63531: PUSH
63532: LD_INT 3
63534: NEG
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 1
63542: PUSH
63543: LD_INT 2
63545: NEG
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 3
63553: PUSH
63554: LD_INT 2
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 2
63563: PUSH
63564: LD_INT 3
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 2
63573: NEG
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 3
63584: NEG
63585: PUSH
63586: LD_INT 1
63588: NEG
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63619: LD_ADDR_VAR 0 35
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: LD_INT 1
63639: NEG
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 1
63657: PUSH
63658: LD_INT 1
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: NEG
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 2
63700: PUSH
63701: LD_INT 1
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 2
63710: NEG
63711: PUSH
63712: LD_INT 1
63714: NEG
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63731: LD_ADDR_VAR 0 36
63735: PUSH
63736: LD_INT 0
63738: PUSH
63739: LD_INT 0
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 0
63748: PUSH
63749: LD_INT 1
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 1
63769: PUSH
63770: LD_INT 1
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: LD_INT 1
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 1
63789: NEG
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: LD_INT 1
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 1
63812: NEG
63813: PUSH
63814: LD_INT 2
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 1
63824: PUSH
63825: LD_INT 2
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63843: LD_ADDR_VAR 0 37
63847: PUSH
63848: LD_INT 0
63850: PUSH
63851: LD_INT 0
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 0
63860: PUSH
63861: LD_INT 1
63863: NEG
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 1
63871: PUSH
63872: LD_INT 0
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 1
63881: PUSH
63882: LD_INT 1
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 0
63891: PUSH
63892: LD_INT 1
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 1
63901: NEG
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 1
63912: NEG
63913: PUSH
63914: LD_INT 1
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 1
63924: PUSH
63925: LD_INT 1
63927: NEG
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 1
63935: NEG
63936: PUSH
63937: LD_INT 1
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63955: LD_ADDR_VAR 0 38
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: LD_INT 0
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 0
63972: PUSH
63973: LD_INT 1
63975: NEG
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 1
63983: PUSH
63984: LD_INT 0
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 1
63993: PUSH
63994: LD_INT 1
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 0
64003: PUSH
64004: LD_INT 1
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 1
64013: NEG
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 1
64024: NEG
64025: PUSH
64026: LD_INT 1
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 2
64036: PUSH
64037: LD_INT 1
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 2
64046: NEG
64047: PUSH
64048: LD_INT 1
64050: NEG
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64067: LD_ADDR_VAR 0 39
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 0
64084: PUSH
64085: LD_INT 1
64087: NEG
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 1
64095: PUSH
64096: LD_INT 0
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 1
64105: PUSH
64106: LD_INT 1
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 0
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 1
64125: NEG
64126: PUSH
64127: LD_INT 0
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 1
64136: NEG
64137: PUSH
64138: LD_INT 1
64140: NEG
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 1
64148: NEG
64149: PUSH
64150: LD_INT 2
64152: NEG
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 1
64160: PUSH
64161: LD_INT 2
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64179: LD_ADDR_VAR 0 40
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: LD_INT 1
64199: NEG
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 1
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 1
64217: PUSH
64218: LD_INT 1
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: LD_INT 1
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: NEG
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: LD_INT 1
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 1
64260: PUSH
64261: LD_INT 1
64263: NEG
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 1
64271: NEG
64272: PUSH
64273: LD_INT 1
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64291: LD_ADDR_VAR 0 41
64295: PUSH
64296: LD_INT 0
64298: PUSH
64299: LD_INT 0
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 0
64308: PUSH
64309: LD_INT 1
64311: NEG
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 1
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 1
64329: PUSH
64330: LD_INT 1
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 0
64339: PUSH
64340: LD_INT 1
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 1
64360: NEG
64361: PUSH
64362: LD_INT 1
64364: NEG
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 1
64372: NEG
64373: PUSH
64374: LD_INT 2
64376: NEG
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: LD_INT 1
64387: NEG
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 2
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 2
64405: PUSH
64406: LD_INT 1
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 2
64415: PUSH
64416: LD_INT 2
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: LD_INT 2
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 1
64435: NEG
64436: PUSH
64437: LD_INT 1
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 2
64446: NEG
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 2
64457: NEG
64458: PUSH
64459: LD_INT 1
64461: NEG
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 2
64469: NEG
64470: PUSH
64471: LD_INT 2
64473: NEG
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 2
64481: NEG
64482: PUSH
64483: LD_INT 3
64485: NEG
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 2
64493: PUSH
64494: LD_INT 1
64496: NEG
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 3
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 3
64514: PUSH
64515: LD_INT 1
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 3
64524: PUSH
64525: LD_INT 2
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 3
64534: PUSH
64535: LD_INT 3
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 2
64544: PUSH
64545: LD_INT 3
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 2
64554: NEG
64555: PUSH
64556: LD_INT 1
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 3
64565: NEG
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 3
64576: NEG
64577: PUSH
64578: LD_INT 1
64580: NEG
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 3
64588: NEG
64589: PUSH
64590: LD_INT 2
64592: NEG
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 3
64600: NEG
64601: PUSH
64602: LD_INT 3
64604: NEG
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64641: LD_ADDR_VAR 0 42
64645: PUSH
64646: LD_INT 0
64648: PUSH
64649: LD_INT 0
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 0
64658: PUSH
64659: LD_INT 1
64661: NEG
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 1
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 1
64679: PUSH
64680: LD_INT 1
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: LD_INT 1
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: LD_INT 0
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 1
64710: NEG
64711: PUSH
64712: LD_INT 1
64714: NEG
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 1
64722: NEG
64723: PUSH
64724: LD_INT 2
64726: NEG
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 0
64734: PUSH
64735: LD_INT 2
64737: NEG
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 1
64745: PUSH
64746: LD_INT 1
64748: NEG
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 2
64756: PUSH
64757: LD_INT 1
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 2
64766: PUSH
64767: LD_INT 2
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 1
64776: PUSH
64777: LD_INT 2
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 0
64786: PUSH
64787: LD_INT 2
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 1
64796: NEG
64797: PUSH
64798: LD_INT 1
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 2
64807: NEG
64808: PUSH
64809: LD_INT 1
64811: NEG
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 2
64819: NEG
64820: PUSH
64821: LD_INT 2
64823: NEG
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 2
64831: NEG
64832: PUSH
64833: LD_INT 3
64835: NEG
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 1
64843: NEG
64844: PUSH
64845: LD_INT 3
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: LD_INT 3
64858: NEG
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 1
64866: PUSH
64867: LD_INT 2
64869: NEG
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 3
64877: PUSH
64878: LD_INT 2
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 3
64887: PUSH
64888: LD_INT 3
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 2
64897: PUSH
64898: LD_INT 3
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 1
64907: PUSH
64908: LD_INT 3
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: LD_INT 3
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 1
64927: NEG
64928: PUSH
64929: LD_INT 2
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 3
64938: NEG
64939: PUSH
64940: LD_INT 2
64942: NEG
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 3
64950: NEG
64951: PUSH
64952: LD_INT 3
64954: NEG
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64991: LD_ADDR_VAR 0 43
64995: PUSH
64996: LD_INT 0
64998: PUSH
64999: LD_INT 0
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 0
65008: PUSH
65009: LD_INT 1
65011: NEG
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 1
65019: PUSH
65020: LD_INT 0
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 1
65029: PUSH
65030: LD_INT 1
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 0
65039: PUSH
65040: LD_INT 1
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 1
65049: NEG
65050: PUSH
65051: LD_INT 0
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 1
65060: NEG
65061: PUSH
65062: LD_INT 1
65064: NEG
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: PUSH
65074: LD_INT 2
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: LD_INT 2
65087: NEG
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 1
65095: PUSH
65096: LD_INT 1
65098: NEG
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 2
65106: PUSH
65107: LD_INT 0
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 2
65116: PUSH
65117: LD_INT 1
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 1
65126: PUSH
65127: LD_INT 2
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 0
65136: PUSH
65137: LD_INT 2
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 1
65146: NEG
65147: PUSH
65148: LD_INT 1
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 2
65157: NEG
65158: PUSH
65159: LD_INT 0
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 2
65168: NEG
65169: PUSH
65170: LD_INT 1
65172: NEG
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: LD_INT 3
65184: NEG
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 0
65192: PUSH
65193: LD_INT 3
65195: NEG
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 1
65203: PUSH
65204: LD_INT 2
65206: NEG
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 2
65214: PUSH
65215: LD_INT 1
65217: NEG
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 3
65225: PUSH
65226: LD_INT 0
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 3
65235: PUSH
65236: LD_INT 1
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 1
65245: PUSH
65246: LD_INT 3
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 0
65255: PUSH
65256: LD_INT 3
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 1
65265: NEG
65266: PUSH
65267: LD_INT 2
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 2
65276: NEG
65277: PUSH
65278: LD_INT 1
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 3
65287: NEG
65288: PUSH
65289: LD_INT 0
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 3
65298: NEG
65299: PUSH
65300: LD_INT 1
65302: NEG
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65339: LD_ADDR_VAR 0 44
65343: PUSH
65344: LD_INT 0
65346: PUSH
65347: LD_INT 0
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 0
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 1
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 1
65377: PUSH
65378: LD_INT 1
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 0
65387: PUSH
65388: LD_INT 1
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 1
65397: NEG
65398: PUSH
65399: LD_INT 0
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: LD_INT 1
65412: NEG
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 1
65420: NEG
65421: PUSH
65422: LD_INT 2
65424: NEG
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 1
65432: PUSH
65433: LD_INT 1
65435: NEG
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 2
65443: PUSH
65444: LD_INT 0
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 2
65453: PUSH
65454: LD_INT 1
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 2
65463: PUSH
65464: LD_INT 2
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 1
65473: PUSH
65474: LD_INT 2
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 1
65483: NEG
65484: PUSH
65485: LD_INT 1
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 2
65494: NEG
65495: PUSH
65496: LD_INT 0
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 2
65505: NEG
65506: PUSH
65507: LD_INT 1
65509: NEG
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 2
65517: NEG
65518: PUSH
65519: LD_INT 2
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 2
65529: NEG
65530: PUSH
65531: LD_INT 3
65533: NEG
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 2
65541: PUSH
65542: LD_INT 1
65544: NEG
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 3
65552: PUSH
65553: LD_INT 0
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 3
65562: PUSH
65563: LD_INT 1
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 3
65572: PUSH
65573: LD_INT 2
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 3
65582: PUSH
65583: LD_INT 3
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 2
65592: PUSH
65593: LD_INT 3
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 2
65602: NEG
65603: PUSH
65604: LD_INT 1
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 3
65613: NEG
65614: PUSH
65615: LD_INT 0
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 3
65624: NEG
65625: PUSH
65626: LD_INT 1
65628: NEG
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 3
65636: NEG
65637: PUSH
65638: LD_INT 2
65640: NEG
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 3
65648: NEG
65649: PUSH
65650: LD_INT 3
65652: NEG
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65689: LD_ADDR_VAR 0 45
65693: PUSH
65694: LD_INT 0
65696: PUSH
65697: LD_INT 0
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 0
65706: PUSH
65707: LD_INT 1
65709: NEG
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 1
65717: PUSH
65718: LD_INT 0
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 1
65727: PUSH
65728: LD_INT 1
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 0
65737: PUSH
65738: LD_INT 1
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 1
65747: NEG
65748: PUSH
65749: LD_INT 0
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 1
65758: NEG
65759: PUSH
65760: LD_INT 1
65762: NEG
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 1
65770: NEG
65771: PUSH
65772: LD_INT 2
65774: NEG
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 0
65782: PUSH
65783: LD_INT 2
65785: NEG
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 1
65793: PUSH
65794: LD_INT 1
65796: NEG
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 2
65804: PUSH
65805: LD_INT 1
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 2
65814: PUSH
65815: LD_INT 2
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 1
65824: PUSH
65825: LD_INT 2
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 0
65834: PUSH
65835: LD_INT 2
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 1
65844: NEG
65845: PUSH
65846: LD_INT 1
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 2
65855: NEG
65856: PUSH
65857: LD_INT 1
65859: NEG
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 2
65867: NEG
65868: PUSH
65869: LD_INT 2
65871: NEG
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 2
65879: NEG
65880: PUSH
65881: LD_INT 3
65883: NEG
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 1
65891: NEG
65892: PUSH
65893: LD_INT 3
65895: NEG
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 0
65903: PUSH
65904: LD_INT 3
65906: NEG
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 1
65914: PUSH
65915: LD_INT 2
65917: NEG
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 3
65925: PUSH
65926: LD_INT 2
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 3
65935: PUSH
65936: LD_INT 3
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 2
65945: PUSH
65946: LD_INT 3
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 1
65955: PUSH
65956: LD_INT 3
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 0
65965: PUSH
65966: LD_INT 3
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 1
65975: NEG
65976: PUSH
65977: LD_INT 2
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 3
65986: NEG
65987: PUSH
65988: LD_INT 2
65990: NEG
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 3
65998: NEG
65999: PUSH
66000: LD_INT 3
66002: NEG
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66039: LD_ADDR_VAR 0 46
66043: PUSH
66044: LD_INT 0
66046: PUSH
66047: LD_INT 0
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 0
66056: PUSH
66057: LD_INT 1
66059: NEG
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 1
66067: PUSH
66068: LD_INT 0
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 1
66077: PUSH
66078: LD_INT 1
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 0
66087: PUSH
66088: LD_INT 1
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 1
66097: NEG
66098: PUSH
66099: LD_INT 0
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 1
66108: NEG
66109: PUSH
66110: LD_INT 1
66112: NEG
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 1
66120: NEG
66121: PUSH
66122: LD_INT 2
66124: NEG
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 0
66132: PUSH
66133: LD_INT 2
66135: NEG
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 1
66143: PUSH
66144: LD_INT 1
66146: NEG
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 2
66154: PUSH
66155: LD_INT 0
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 2
66164: PUSH
66165: LD_INT 1
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 1
66174: PUSH
66175: LD_INT 2
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 0
66184: PUSH
66185: LD_INT 2
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 1
66194: NEG
66195: PUSH
66196: LD_INT 1
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 2
66205: NEG
66206: PUSH
66207: LD_INT 0
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 2
66216: NEG
66217: PUSH
66218: LD_INT 1
66220: NEG
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 1
66228: NEG
66229: PUSH
66230: LD_INT 3
66232: NEG
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 0
66240: PUSH
66241: LD_INT 3
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 1
66251: PUSH
66252: LD_INT 2
66254: NEG
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 2
66262: PUSH
66263: LD_INT 1
66265: NEG
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 3
66273: PUSH
66274: LD_INT 0
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 3
66283: PUSH
66284: LD_INT 1
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 1
66293: PUSH
66294: LD_INT 3
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 0
66303: PUSH
66304: LD_INT 3
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 1
66313: NEG
66314: PUSH
66315: LD_INT 2
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 2
66324: NEG
66325: PUSH
66326: LD_INT 1
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 3
66335: NEG
66336: PUSH
66337: LD_INT 0
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 3
66346: NEG
66347: PUSH
66348: LD_INT 1
66350: NEG
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66387: LD_ADDR_VAR 0 47
66391: PUSH
66392: LD_INT 0
66394: PUSH
66395: LD_INT 0
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 0
66404: PUSH
66405: LD_INT 1
66407: NEG
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 1
66415: PUSH
66416: LD_INT 0
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 1
66425: PUSH
66426: LD_INT 1
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: LD_INT 1
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 1
66445: NEG
66446: PUSH
66447: LD_INT 0
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 1
66456: NEG
66457: PUSH
66458: LD_INT 1
66460: NEG
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 1
66468: NEG
66469: PUSH
66470: LD_INT 2
66472: NEG
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 0
66480: PUSH
66481: LD_INT 2
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 1
66491: PUSH
66492: LD_INT 1
66494: NEG
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 2
66502: NEG
66503: PUSH
66504: LD_INT 1
66506: NEG
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 2
66514: NEG
66515: PUSH
66516: LD_INT 2
66518: NEG
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66538: LD_ADDR_VAR 0 48
66542: PUSH
66543: LD_INT 0
66545: PUSH
66546: LD_INT 0
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 0
66555: PUSH
66556: LD_INT 1
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 1
66566: PUSH
66567: LD_INT 0
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 1
66576: PUSH
66577: LD_INT 1
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 0
66586: PUSH
66587: LD_INT 1
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 1
66596: NEG
66597: PUSH
66598: LD_INT 0
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 1
66607: NEG
66608: PUSH
66609: LD_INT 1
66611: NEG
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 1
66619: NEG
66620: PUSH
66621: LD_INT 2
66623: NEG
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 0
66631: PUSH
66632: LD_INT 2
66634: NEG
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 1
66642: PUSH
66643: LD_INT 1
66645: NEG
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 2
66653: PUSH
66654: LD_INT 0
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 2
66663: PUSH
66664: LD_INT 1
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66685: LD_ADDR_VAR 0 49
66689: PUSH
66690: LD_INT 0
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 0
66702: PUSH
66703: LD_INT 1
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 1
66723: PUSH
66724: LD_INT 1
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 0
66733: PUSH
66734: LD_INT 1
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 1
66743: NEG
66744: PUSH
66745: LD_INT 0
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 1
66754: NEG
66755: PUSH
66756: LD_INT 1
66758: NEG
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 1
66766: PUSH
66767: LD_INT 1
66769: NEG
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 2
66777: PUSH
66778: LD_INT 0
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 2
66787: PUSH
66788: LD_INT 1
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 2
66797: PUSH
66798: LD_INT 2
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 1
66807: PUSH
66808: LD_INT 2
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66829: LD_ADDR_VAR 0 50
66833: PUSH
66834: LD_INT 0
66836: PUSH
66837: LD_INT 0
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 0
66846: PUSH
66847: LD_INT 1
66849: NEG
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: LD_INT 1
66857: PUSH
66858: LD_INT 0
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 1
66867: PUSH
66868: LD_INT 1
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 0
66877: PUSH
66878: LD_INT 1
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 1
66887: NEG
66888: PUSH
66889: LD_INT 0
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 1
66898: NEG
66899: PUSH
66900: LD_INT 1
66902: NEG
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 2
66910: PUSH
66911: LD_INT 1
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 2
66920: PUSH
66921: LD_INT 2
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 1
66930: PUSH
66931: LD_INT 2
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 0
66940: PUSH
66941: LD_INT 2
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 1
66950: NEG
66951: PUSH
66952: LD_INT 1
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66973: LD_ADDR_VAR 0 51
66977: PUSH
66978: LD_INT 0
66980: PUSH
66981: LD_INT 0
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 0
66990: PUSH
66991: LD_INT 1
66993: NEG
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 1
67001: PUSH
67002: LD_INT 0
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 1
67011: PUSH
67012: LD_INT 1
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 0
67021: PUSH
67022: LD_INT 1
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 1
67031: NEG
67032: PUSH
67033: LD_INT 0
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 1
67042: NEG
67043: PUSH
67044: LD_INT 1
67046: NEG
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 1
67054: PUSH
67055: LD_INT 2
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 0
67064: PUSH
67065: LD_INT 2
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 1
67074: NEG
67075: PUSH
67076: LD_INT 1
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 2
67085: NEG
67086: PUSH
67087: LD_INT 0
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 2
67096: NEG
67097: PUSH
67098: LD_INT 1
67100: NEG
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67120: LD_ADDR_VAR 0 52
67124: PUSH
67125: LD_INT 0
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 0
67137: PUSH
67138: LD_INT 1
67140: NEG
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 1
67148: PUSH
67149: LD_INT 0
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 1
67158: PUSH
67159: LD_INT 1
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 0
67168: PUSH
67169: LD_INT 1
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 1
67178: NEG
67179: PUSH
67180: LD_INT 0
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 1
67189: NEG
67190: PUSH
67191: LD_INT 1
67193: NEG
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 1
67201: NEG
67202: PUSH
67203: LD_INT 2
67205: NEG
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 1
67213: NEG
67214: PUSH
67215: LD_INT 1
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 2
67224: NEG
67225: PUSH
67226: LD_INT 0
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 2
67235: NEG
67236: PUSH
67237: LD_INT 1
67239: NEG
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 2
67247: NEG
67248: PUSH
67249: LD_INT 2
67251: NEG
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67271: LD_ADDR_VAR 0 53
67275: PUSH
67276: LD_INT 0
67278: PUSH
67279: LD_INT 0
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 0
67288: PUSH
67289: LD_INT 1
67291: NEG
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 1
67299: PUSH
67300: LD_INT 0
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 1
67309: PUSH
67310: LD_INT 1
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 0
67319: PUSH
67320: LD_INT 1
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 1
67329: NEG
67330: PUSH
67331: LD_INT 0
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 1
67340: NEG
67341: PUSH
67342: LD_INT 1
67344: NEG
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 1
67352: NEG
67353: PUSH
67354: LD_INT 2
67356: NEG
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 0
67364: PUSH
67365: LD_INT 2
67367: NEG
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 1
67375: PUSH
67376: LD_INT 1
67378: NEG
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 2
67386: PUSH
67387: LD_INT 0
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 2
67396: PUSH
67397: LD_INT 1
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 2
67406: PUSH
67407: LD_INT 2
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 1
67416: PUSH
67417: LD_INT 2
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 0
67426: PUSH
67427: LD_INT 2
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 1
67436: NEG
67437: PUSH
67438: LD_INT 1
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 2
67447: NEG
67448: PUSH
67449: LD_INT 0
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 2
67458: NEG
67459: PUSH
67460: LD_INT 1
67462: NEG
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 2
67470: NEG
67471: PUSH
67472: LD_INT 2
67474: NEG
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67501: LD_ADDR_VAR 0 54
67505: PUSH
67506: LD_INT 0
67508: PUSH
67509: LD_INT 0
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 0
67518: PUSH
67519: LD_INT 1
67521: NEG
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 1
67529: PUSH
67530: LD_INT 0
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 1
67539: PUSH
67540: LD_INT 1
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 0
67549: PUSH
67550: LD_INT 1
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 1
67559: NEG
67560: PUSH
67561: LD_INT 0
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 1
67570: NEG
67571: PUSH
67572: LD_INT 1
67574: NEG
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 1
67582: NEG
67583: PUSH
67584: LD_INT 2
67586: NEG
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 0
67594: PUSH
67595: LD_INT 2
67597: NEG
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 1
67605: PUSH
67606: LD_INT 1
67608: NEG
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 2
67616: PUSH
67617: LD_INT 0
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 2
67626: PUSH
67627: LD_INT 1
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 2
67636: PUSH
67637: LD_INT 2
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 1
67646: PUSH
67647: LD_INT 2
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 0
67656: PUSH
67657: LD_INT 2
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 1
67666: NEG
67667: PUSH
67668: LD_INT 1
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 2
67677: NEG
67678: PUSH
67679: LD_INT 0
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 2
67688: NEG
67689: PUSH
67690: LD_INT 1
67692: NEG
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 2
67700: NEG
67701: PUSH
67702: LD_INT 2
67704: NEG
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67731: LD_ADDR_VAR 0 55
67735: PUSH
67736: LD_INT 0
67738: PUSH
67739: LD_INT 0
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 0
67748: PUSH
67749: LD_INT 1
67751: NEG
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 1
67759: PUSH
67760: LD_INT 0
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 1
67769: PUSH
67770: LD_INT 1
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 0
67779: PUSH
67780: LD_INT 1
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 1
67789: NEG
67790: PUSH
67791: LD_INT 0
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 1
67800: NEG
67801: PUSH
67802: LD_INT 1
67804: NEG
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 1
67812: NEG
67813: PUSH
67814: LD_INT 2
67816: NEG
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: LD_INT 0
67824: PUSH
67825: LD_INT 2
67827: NEG
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 1
67835: PUSH
67836: LD_INT 1
67838: NEG
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 2
67846: PUSH
67847: LD_INT 0
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 2
67856: PUSH
67857: LD_INT 1
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 2
67866: PUSH
67867: LD_INT 2
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 1
67876: PUSH
67877: LD_INT 2
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 0
67886: PUSH
67887: LD_INT 2
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 1
67896: NEG
67897: PUSH
67898: LD_INT 1
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 2
67907: NEG
67908: PUSH
67909: LD_INT 0
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 2
67918: NEG
67919: PUSH
67920: LD_INT 1
67922: NEG
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 2
67930: NEG
67931: PUSH
67932: LD_INT 2
67934: NEG
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67961: LD_ADDR_VAR 0 56
67965: PUSH
67966: LD_INT 0
67968: PUSH
67969: LD_INT 0
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 0
67978: PUSH
67979: LD_INT 1
67981: NEG
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 1
67989: PUSH
67990: LD_INT 0
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 1
67999: PUSH
68000: LD_INT 1
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 0
68009: PUSH
68010: LD_INT 1
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 1
68019: NEG
68020: PUSH
68021: LD_INT 0
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 1
68030: NEG
68031: PUSH
68032: LD_INT 1
68034: NEG
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 1
68042: NEG
68043: PUSH
68044: LD_INT 2
68046: NEG
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 0
68054: PUSH
68055: LD_INT 2
68057: NEG
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 1
68065: PUSH
68066: LD_INT 1
68068: NEG
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: LD_INT 2
68076: PUSH
68077: LD_INT 0
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 2
68086: PUSH
68087: LD_INT 1
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 2
68096: PUSH
68097: LD_INT 2
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 1
68106: PUSH
68107: LD_INT 2
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 0
68116: PUSH
68117: LD_INT 2
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: LD_INT 1
68126: NEG
68127: PUSH
68128: LD_INT 1
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 2
68137: NEG
68138: PUSH
68139: LD_INT 0
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 2
68148: NEG
68149: PUSH
68150: LD_INT 1
68152: NEG
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 2
68160: NEG
68161: PUSH
68162: LD_INT 2
68164: NEG
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68191: LD_ADDR_VAR 0 57
68195: PUSH
68196: LD_INT 0
68198: PUSH
68199: LD_INT 0
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 0
68208: PUSH
68209: LD_INT 1
68211: NEG
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 1
68219: PUSH
68220: LD_INT 0
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 1
68229: PUSH
68230: LD_INT 1
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: LD_INT 0
68239: PUSH
68240: LD_INT 1
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 1
68249: NEG
68250: PUSH
68251: LD_INT 0
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 1
68260: NEG
68261: PUSH
68262: LD_INT 1
68264: NEG
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 1
68272: NEG
68273: PUSH
68274: LD_INT 2
68276: NEG
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 0
68284: PUSH
68285: LD_INT 2
68287: NEG
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 1
68295: PUSH
68296: LD_INT 1
68298: NEG
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 2
68306: PUSH
68307: LD_INT 0
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 2
68316: PUSH
68317: LD_INT 1
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 2
68326: PUSH
68327: LD_INT 2
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 1
68336: PUSH
68337: LD_INT 2
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 0
68346: PUSH
68347: LD_INT 2
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 1
68356: NEG
68357: PUSH
68358: LD_INT 1
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 2
68367: NEG
68368: PUSH
68369: LD_INT 0
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 2
68378: NEG
68379: PUSH
68380: LD_INT 1
68382: NEG
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 2
68390: NEG
68391: PUSH
68392: LD_INT 2
68394: NEG
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68421: LD_ADDR_VAR 0 58
68425: PUSH
68426: LD_INT 0
68428: PUSH
68429: LD_INT 0
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 0
68438: PUSH
68439: LD_INT 1
68441: NEG
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 1
68449: PUSH
68450: LD_INT 0
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 1
68459: PUSH
68460: LD_INT 1
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 0
68469: PUSH
68470: LD_INT 1
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 1
68479: NEG
68480: PUSH
68481: LD_INT 0
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 1
68490: NEG
68491: PUSH
68492: LD_INT 1
68494: NEG
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 1
68502: NEG
68503: PUSH
68504: LD_INT 2
68506: NEG
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 0
68514: PUSH
68515: LD_INT 2
68517: NEG
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 1
68525: PUSH
68526: LD_INT 1
68528: NEG
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 2
68536: PUSH
68537: LD_INT 0
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 2
68546: PUSH
68547: LD_INT 1
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 2
68556: PUSH
68557: LD_INT 2
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: LD_INT 1
68566: PUSH
68567: LD_INT 2
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 0
68576: PUSH
68577: LD_INT 2
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 1
68586: NEG
68587: PUSH
68588: LD_INT 1
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 2
68597: NEG
68598: PUSH
68599: LD_INT 0
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 2
68608: NEG
68609: PUSH
68610: LD_INT 1
68612: NEG
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 2
68620: NEG
68621: PUSH
68622: LD_INT 2
68624: NEG
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: LIST
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68651: LD_ADDR_VAR 0 59
68655: PUSH
68656: LD_INT 0
68658: PUSH
68659: LD_INT 0
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 0
68668: PUSH
68669: LD_INT 1
68671: NEG
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 1
68679: PUSH
68680: LD_INT 0
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: LD_INT 1
68689: PUSH
68690: LD_INT 1
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 0
68699: PUSH
68700: LD_INT 1
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 1
68709: NEG
68710: PUSH
68711: LD_INT 0
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 1
68720: NEG
68721: PUSH
68722: LD_INT 1
68724: NEG
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68739: LD_ADDR_VAR 0 60
68743: PUSH
68744: LD_INT 0
68746: PUSH
68747: LD_INT 0
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: LD_INT 1
68759: NEG
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 1
68767: PUSH
68768: LD_INT 0
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 1
68777: PUSH
68778: LD_INT 1
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 0
68787: PUSH
68788: LD_INT 1
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 1
68797: NEG
68798: PUSH
68799: LD_INT 0
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 1
68808: NEG
68809: PUSH
68810: LD_INT 1
68812: NEG
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68827: LD_ADDR_VAR 0 61
68831: PUSH
68832: LD_INT 0
68834: PUSH
68835: LD_INT 0
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 0
68844: PUSH
68845: LD_INT 1
68847: NEG
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 1
68855: PUSH
68856: LD_INT 0
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 1
68865: PUSH
68866: LD_INT 1
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 0
68875: PUSH
68876: LD_INT 1
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 1
68885: NEG
68886: PUSH
68887: LD_INT 0
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 1
68896: NEG
68897: PUSH
68898: LD_INT 1
68900: NEG
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68915: LD_ADDR_VAR 0 62
68919: PUSH
68920: LD_INT 0
68922: PUSH
68923: LD_INT 0
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 0
68932: PUSH
68933: LD_INT 1
68935: NEG
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: LD_INT 1
68943: PUSH
68944: LD_INT 0
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 1
68953: PUSH
68954: LD_INT 1
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 0
68963: PUSH
68964: LD_INT 1
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 1
68973: NEG
68974: PUSH
68975: LD_INT 0
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: LD_INT 1
68984: NEG
68985: PUSH
68986: LD_INT 1
68988: NEG
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69003: LD_ADDR_VAR 0 63
69007: PUSH
69008: LD_INT 0
69010: PUSH
69011: LD_INT 0
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 0
69020: PUSH
69021: LD_INT 1
69023: NEG
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 1
69031: PUSH
69032: LD_INT 0
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 1
69041: PUSH
69042: LD_INT 1
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 0
69051: PUSH
69052: LD_INT 1
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 1
69061: NEG
69062: PUSH
69063: LD_INT 0
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: LD_INT 1
69072: NEG
69073: PUSH
69074: LD_INT 1
69076: NEG
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69091: LD_ADDR_VAR 0 64
69095: PUSH
69096: LD_INT 0
69098: PUSH
69099: LD_INT 0
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 0
69108: PUSH
69109: LD_INT 1
69111: NEG
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 1
69119: PUSH
69120: LD_INT 0
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 1
69129: PUSH
69130: LD_INT 1
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 0
69139: PUSH
69140: LD_INT 1
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 1
69149: NEG
69150: PUSH
69151: LD_INT 0
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 1
69160: NEG
69161: PUSH
69162: LD_INT 1
69164: NEG
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: ST_TO_ADDR
// end ; 1 :
69179: GO 75076
69181: LD_INT 1
69183: DOUBLE
69184: EQUAL
69185: IFTRUE 69189
69187: GO 71812
69189: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69190: LD_ADDR_VAR 0 11
69194: PUSH
69195: LD_INT 1
69197: NEG
69198: PUSH
69199: LD_INT 3
69201: NEG
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 0
69209: PUSH
69210: LD_INT 3
69212: NEG
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 1
69220: PUSH
69221: LD_INT 2
69223: NEG
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: LIST
69233: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69234: LD_ADDR_VAR 0 12
69238: PUSH
69239: LD_INT 2
69241: PUSH
69242: LD_INT 1
69244: NEG
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 3
69252: PUSH
69253: LD_INT 0
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 3
69262: PUSH
69263: LD_INT 1
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: LIST
69274: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69275: LD_ADDR_VAR 0 13
69279: PUSH
69280: LD_INT 3
69282: PUSH
69283: LD_INT 2
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 3
69292: PUSH
69293: LD_INT 3
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 2
69302: PUSH
69303: LD_INT 3
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: LIST
69314: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69315: LD_ADDR_VAR 0 14
69319: PUSH
69320: LD_INT 1
69322: PUSH
69323: LD_INT 3
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 0
69332: PUSH
69333: LD_INT 3
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 1
69342: NEG
69343: PUSH
69344: LD_INT 2
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: LIST
69355: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69356: LD_ADDR_VAR 0 15
69360: PUSH
69361: LD_INT 2
69363: NEG
69364: PUSH
69365: LD_INT 1
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 3
69374: NEG
69375: PUSH
69376: LD_INT 0
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 3
69385: NEG
69386: PUSH
69387: LD_INT 1
69389: NEG
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: LIST
69399: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69400: LD_ADDR_VAR 0 16
69404: PUSH
69405: LD_INT 2
69407: NEG
69408: PUSH
69409: LD_INT 3
69411: NEG
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 3
69419: NEG
69420: PUSH
69421: LD_INT 2
69423: NEG
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 3
69431: NEG
69432: PUSH
69433: LD_INT 3
69435: NEG
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: LIST
69445: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69446: LD_ADDR_VAR 0 17
69450: PUSH
69451: LD_INT 1
69453: NEG
69454: PUSH
69455: LD_INT 3
69457: NEG
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: PUSH
69463: LD_INT 0
69465: PUSH
69466: LD_INT 3
69468: NEG
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 1
69476: PUSH
69477: LD_INT 2
69479: NEG
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: LIST
69489: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69490: LD_ADDR_VAR 0 18
69494: PUSH
69495: LD_INT 2
69497: PUSH
69498: LD_INT 1
69500: NEG
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 3
69508: PUSH
69509: LD_INT 0
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 3
69518: PUSH
69519: LD_INT 1
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: LIST
69530: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69531: LD_ADDR_VAR 0 19
69535: PUSH
69536: LD_INT 3
69538: PUSH
69539: LD_INT 2
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 3
69548: PUSH
69549: LD_INT 3
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 2
69558: PUSH
69559: LD_INT 3
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: LIST
69570: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69571: LD_ADDR_VAR 0 20
69575: PUSH
69576: LD_INT 1
69578: PUSH
69579: LD_INT 3
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 0
69588: PUSH
69589: LD_INT 3
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 1
69598: NEG
69599: PUSH
69600: LD_INT 2
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: LIST
69611: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69612: LD_ADDR_VAR 0 21
69616: PUSH
69617: LD_INT 2
69619: NEG
69620: PUSH
69621: LD_INT 1
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 3
69630: NEG
69631: PUSH
69632: LD_INT 0
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 3
69641: NEG
69642: PUSH
69643: LD_INT 1
69645: NEG
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: LIST
69655: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69656: LD_ADDR_VAR 0 22
69660: PUSH
69661: LD_INT 2
69663: NEG
69664: PUSH
69665: LD_INT 3
69667: NEG
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 3
69675: NEG
69676: PUSH
69677: LD_INT 2
69679: NEG
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 3
69687: NEG
69688: PUSH
69689: LD_INT 3
69691: NEG
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: LIST
69701: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
69702: LD_ADDR_VAR 0 23
69706: PUSH
69707: LD_INT 0
69709: PUSH
69710: LD_INT 3
69712: NEG
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 1
69720: NEG
69721: PUSH
69722: LD_INT 4
69724: NEG
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 1
69732: PUSH
69733: LD_INT 3
69735: NEG
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: LIST
69745: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
69746: LD_ADDR_VAR 0 24
69750: PUSH
69751: LD_INT 3
69753: PUSH
69754: LD_INT 0
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PUSH
69761: LD_INT 3
69763: PUSH
69764: LD_INT 1
69766: NEG
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 4
69774: PUSH
69775: LD_INT 1
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: LIST
69786: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
69787: LD_ADDR_VAR 0 25
69791: PUSH
69792: LD_INT 3
69794: PUSH
69795: LD_INT 3
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 4
69804: PUSH
69805: LD_INT 3
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 3
69814: PUSH
69815: LD_INT 4
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: LIST
69826: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
69827: LD_ADDR_VAR 0 26
69831: PUSH
69832: LD_INT 0
69834: PUSH
69835: LD_INT 3
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 1
69844: PUSH
69845: LD_INT 4
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PUSH
69852: LD_INT 1
69854: NEG
69855: PUSH
69856: LD_INT 3
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: LIST
69867: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
69868: LD_ADDR_VAR 0 27
69872: PUSH
69873: LD_INT 3
69875: NEG
69876: PUSH
69877: LD_INT 0
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 3
69886: NEG
69887: PUSH
69888: LD_INT 1
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 4
69897: NEG
69898: PUSH
69899: LD_INT 1
69901: NEG
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: LIST
69911: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
69912: LD_ADDR_VAR 0 28
69916: PUSH
69917: LD_INT 3
69919: NEG
69920: PUSH
69921: LD_INT 3
69923: NEG
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 3
69931: NEG
69932: PUSH
69933: LD_INT 4
69935: NEG
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 4
69943: NEG
69944: PUSH
69945: LD_INT 3
69947: NEG
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: LIST
69957: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69958: LD_ADDR_VAR 0 29
69962: PUSH
69963: LD_INT 1
69965: NEG
69966: PUSH
69967: LD_INT 3
69969: NEG
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 0
69977: PUSH
69978: LD_INT 3
69980: NEG
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 1
69988: PUSH
69989: LD_INT 2
69991: NEG
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: LD_INT 1
69999: NEG
70000: PUSH
70001: LD_INT 4
70003: NEG
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 0
70011: PUSH
70012: LD_INT 4
70014: NEG
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 1
70022: PUSH
70023: LD_INT 3
70025: NEG
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 1
70033: NEG
70034: PUSH
70035: LD_INT 5
70037: NEG
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 0
70045: PUSH
70046: LD_INT 5
70048: NEG
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 1
70056: PUSH
70057: LD_INT 4
70059: NEG
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 1
70067: NEG
70068: PUSH
70069: LD_INT 6
70071: NEG
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 0
70079: PUSH
70080: LD_INT 6
70082: NEG
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 1
70090: PUSH
70091: LD_INT 5
70093: NEG
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
70113: LD_ADDR_VAR 0 30
70117: PUSH
70118: LD_INT 2
70120: PUSH
70121: LD_INT 1
70123: NEG
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: LD_INT 3
70131: PUSH
70132: LD_INT 0
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 3
70141: PUSH
70142: LD_INT 1
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 3
70151: PUSH
70152: LD_INT 1
70154: NEG
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 4
70162: PUSH
70163: LD_INT 0
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 4
70172: PUSH
70173: LD_INT 1
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PUSH
70180: LD_INT 4
70182: PUSH
70183: LD_INT 1
70185: NEG
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 5
70193: PUSH
70194: LD_INT 0
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 5
70203: PUSH
70204: LD_INT 1
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 5
70213: PUSH
70214: LD_INT 1
70216: NEG
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 6
70224: PUSH
70225: LD_INT 0
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 6
70234: PUSH
70235: LD_INT 1
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
70256: LD_ADDR_VAR 0 31
70260: PUSH
70261: LD_INT 3
70263: PUSH
70264: LD_INT 2
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PUSH
70271: LD_INT 3
70273: PUSH
70274: LD_INT 3
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 2
70283: PUSH
70284: LD_INT 3
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: PUSH
70291: LD_INT 4
70293: PUSH
70294: LD_INT 3
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 4
70303: PUSH
70304: LD_INT 4
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 3
70313: PUSH
70314: LD_INT 4
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 5
70323: PUSH
70324: LD_INT 4
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 5
70333: PUSH
70334: LD_INT 5
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 4
70343: PUSH
70344: LD_INT 5
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 6
70353: PUSH
70354: LD_INT 5
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 6
70363: PUSH
70364: LD_INT 6
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: PUSH
70371: LD_INT 5
70373: PUSH
70374: LD_INT 6
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: LIST
70393: LIST
70394: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
70395: LD_ADDR_VAR 0 32
70399: PUSH
70400: LD_INT 1
70402: PUSH
70403: LD_INT 3
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 0
70412: PUSH
70413: LD_INT 3
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 1
70422: NEG
70423: PUSH
70424: LD_INT 2
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 1
70433: PUSH
70434: LD_INT 4
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: LD_INT 0
70443: PUSH
70444: LD_INT 4
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 1
70453: NEG
70454: PUSH
70455: LD_INT 3
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 1
70464: PUSH
70465: LD_INT 5
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: LD_INT 0
70474: PUSH
70475: LD_INT 5
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 1
70484: NEG
70485: PUSH
70486: LD_INT 4
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 1
70495: PUSH
70496: LD_INT 6
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: LD_INT 0
70505: PUSH
70506: LD_INT 6
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: PUSH
70513: LD_INT 1
70515: NEG
70516: PUSH
70517: LD_INT 5
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70538: LD_ADDR_VAR 0 33
70542: PUSH
70543: LD_INT 2
70545: NEG
70546: PUSH
70547: LD_INT 1
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: LD_INT 3
70556: NEG
70557: PUSH
70558: LD_INT 0
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 3
70567: NEG
70568: PUSH
70569: LD_INT 1
70571: NEG
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 3
70579: NEG
70580: PUSH
70581: LD_INT 1
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: LD_INT 4
70590: NEG
70591: PUSH
70592: LD_INT 0
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 4
70601: NEG
70602: PUSH
70603: LD_INT 1
70605: NEG
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: PUSH
70611: LD_INT 4
70613: NEG
70614: PUSH
70615: LD_INT 1
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 5
70624: NEG
70625: PUSH
70626: LD_INT 0
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: LD_INT 5
70635: NEG
70636: PUSH
70637: LD_INT 1
70639: NEG
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PUSH
70645: LD_INT 5
70647: NEG
70648: PUSH
70649: LD_INT 1
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 6
70658: NEG
70659: PUSH
70660: LD_INT 0
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 6
70669: NEG
70670: PUSH
70671: LD_INT 1
70673: NEG
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
70693: LD_ADDR_VAR 0 34
70697: PUSH
70698: LD_INT 2
70700: NEG
70701: PUSH
70702: LD_INT 3
70704: NEG
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: PUSH
70710: LD_INT 3
70712: NEG
70713: PUSH
70714: LD_INT 2
70716: NEG
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 3
70724: NEG
70725: PUSH
70726: LD_INT 3
70728: NEG
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 3
70736: NEG
70737: PUSH
70738: LD_INT 4
70740: NEG
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: PUSH
70746: LD_INT 4
70748: NEG
70749: PUSH
70750: LD_INT 3
70752: NEG
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 4
70760: NEG
70761: PUSH
70762: LD_INT 4
70764: NEG
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: PUSH
70770: LD_INT 4
70772: NEG
70773: PUSH
70774: LD_INT 5
70776: NEG
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 5
70784: NEG
70785: PUSH
70786: LD_INT 4
70788: NEG
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 5
70796: NEG
70797: PUSH
70798: LD_INT 5
70800: NEG
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: PUSH
70806: LD_INT 5
70808: NEG
70809: PUSH
70810: LD_INT 6
70812: NEG
70813: PUSH
70814: EMPTY
70815: LIST
70816: LIST
70817: PUSH
70818: LD_INT 6
70820: NEG
70821: PUSH
70822: LD_INT 5
70824: NEG
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 6
70832: NEG
70833: PUSH
70834: LD_INT 6
70836: NEG
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
70856: LD_ADDR_VAR 0 41
70860: PUSH
70861: LD_INT 0
70863: PUSH
70864: LD_INT 2
70866: NEG
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 1
70874: NEG
70875: PUSH
70876: LD_INT 3
70878: NEG
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 1
70886: PUSH
70887: LD_INT 2
70889: NEG
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: LIST
70899: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
70900: LD_ADDR_VAR 0 42
70904: PUSH
70905: LD_INT 2
70907: PUSH
70908: LD_INT 0
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PUSH
70915: LD_INT 2
70917: PUSH
70918: LD_INT 1
70920: NEG
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: LD_INT 3
70928: PUSH
70929: LD_INT 1
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: LIST
70940: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70941: LD_ADDR_VAR 0 43
70945: PUSH
70946: LD_INT 2
70948: PUSH
70949: LD_INT 2
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 3
70958: PUSH
70959: LD_INT 2
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 2
70968: PUSH
70969: LD_INT 3
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: LIST
70980: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70981: LD_ADDR_VAR 0 44
70985: PUSH
70986: LD_INT 0
70988: PUSH
70989: LD_INT 2
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PUSH
70996: LD_INT 1
70998: PUSH
70999: LD_INT 3
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 1
71008: NEG
71009: PUSH
71010: LD_INT 2
71012: PUSH
71013: EMPTY
71014: LIST
71015: LIST
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: LIST
71021: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71022: LD_ADDR_VAR 0 45
71026: PUSH
71027: LD_INT 2
71029: NEG
71030: PUSH
71031: LD_INT 0
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: PUSH
71038: LD_INT 2
71040: NEG
71041: PUSH
71042: LD_INT 1
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PUSH
71049: LD_INT 3
71051: NEG
71052: PUSH
71053: LD_INT 1
71055: NEG
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: LIST
71065: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
71066: LD_ADDR_VAR 0 46
71070: PUSH
71071: LD_INT 2
71073: NEG
71074: PUSH
71075: LD_INT 2
71077: NEG
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 2
71085: NEG
71086: PUSH
71087: LD_INT 3
71089: NEG
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 3
71097: NEG
71098: PUSH
71099: LD_INT 2
71101: NEG
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: LIST
71111: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
71112: LD_ADDR_VAR 0 47
71116: PUSH
71117: LD_INT 2
71119: NEG
71120: PUSH
71121: LD_INT 3
71123: NEG
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: LD_INT 1
71131: NEG
71132: PUSH
71133: LD_INT 3
71135: NEG
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71145: LD_ADDR_VAR 0 48
71149: PUSH
71150: LD_INT 1
71152: PUSH
71153: LD_INT 2
71155: NEG
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_INT 2
71163: PUSH
71164: LD_INT 1
71166: NEG
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
71176: LD_ADDR_VAR 0 49
71180: PUSH
71181: LD_INT 3
71183: PUSH
71184: LD_INT 1
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PUSH
71191: LD_INT 3
71193: PUSH
71194: LD_INT 2
71196: PUSH
71197: EMPTY
71198: LIST
71199: LIST
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
71205: LD_ADDR_VAR 0 50
71209: PUSH
71210: LD_INT 2
71212: PUSH
71213: LD_INT 3
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: LD_INT 1
71222: PUSH
71223: LD_INT 3
71225: PUSH
71226: EMPTY
71227: LIST
71228: LIST
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
71234: LD_ADDR_VAR 0 51
71238: PUSH
71239: LD_INT 1
71241: NEG
71242: PUSH
71243: LD_INT 2
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PUSH
71250: LD_INT 2
71252: NEG
71253: PUSH
71254: LD_INT 1
71256: PUSH
71257: EMPTY
71258: LIST
71259: LIST
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
71265: LD_ADDR_VAR 0 52
71269: PUSH
71270: LD_INT 3
71272: NEG
71273: PUSH
71274: LD_INT 1
71276: NEG
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 3
71284: NEG
71285: PUSH
71286: LD_INT 2
71288: NEG
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71298: LD_ADDR_VAR 0 53
71302: PUSH
71303: LD_INT 1
71305: NEG
71306: PUSH
71307: LD_INT 3
71309: NEG
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: PUSH
71315: LD_INT 0
71317: PUSH
71318: LD_INT 3
71320: NEG
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: PUSH
71326: LD_INT 1
71328: PUSH
71329: LD_INT 2
71331: NEG
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: LIST
71341: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71342: LD_ADDR_VAR 0 54
71346: PUSH
71347: LD_INT 2
71349: PUSH
71350: LD_INT 1
71352: NEG
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 3
71360: PUSH
71361: LD_INT 0
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: PUSH
71368: LD_INT 3
71370: PUSH
71371: LD_INT 1
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: LIST
71382: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71383: LD_ADDR_VAR 0 55
71387: PUSH
71388: LD_INT 3
71390: PUSH
71391: LD_INT 2
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: PUSH
71398: LD_INT 3
71400: PUSH
71401: LD_INT 3
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 2
71410: PUSH
71411: LD_INT 3
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: LIST
71422: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71423: LD_ADDR_VAR 0 56
71427: PUSH
71428: LD_INT 1
71430: PUSH
71431: LD_INT 3
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: PUSH
71438: LD_INT 0
71440: PUSH
71441: LD_INT 3
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 1
71450: NEG
71451: PUSH
71452: LD_INT 2
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: LIST
71463: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71464: LD_ADDR_VAR 0 57
71468: PUSH
71469: LD_INT 2
71471: NEG
71472: PUSH
71473: LD_INT 1
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 3
71482: NEG
71483: PUSH
71484: LD_INT 0
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: PUSH
71491: LD_INT 3
71493: NEG
71494: PUSH
71495: LD_INT 1
71497: NEG
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: LIST
71507: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71508: LD_ADDR_VAR 0 58
71512: PUSH
71513: LD_INT 2
71515: NEG
71516: PUSH
71517: LD_INT 3
71519: NEG
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PUSH
71525: LD_INT 3
71527: NEG
71528: PUSH
71529: LD_INT 2
71531: NEG
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: PUSH
71537: LD_INT 3
71539: NEG
71540: PUSH
71541: LD_INT 3
71543: NEG
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: LIST
71553: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71554: LD_ADDR_VAR 0 59
71558: PUSH
71559: LD_INT 1
71561: NEG
71562: PUSH
71563: LD_INT 2
71565: NEG
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PUSH
71571: LD_INT 0
71573: PUSH
71574: LD_INT 2
71576: NEG
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PUSH
71582: LD_INT 1
71584: PUSH
71585: LD_INT 1
71587: NEG
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: LIST
71597: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71598: LD_ADDR_VAR 0 60
71602: PUSH
71603: LD_INT 1
71605: PUSH
71606: LD_INT 1
71608: NEG
71609: PUSH
71610: EMPTY
71611: LIST
71612: LIST
71613: PUSH
71614: LD_INT 2
71616: PUSH
71617: LD_INT 0
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: PUSH
71624: LD_INT 2
71626: PUSH
71627: LD_INT 1
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: LIST
71638: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71639: LD_ADDR_VAR 0 61
71643: PUSH
71644: LD_INT 2
71646: PUSH
71647: LD_INT 1
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: LD_INT 2
71656: PUSH
71657: LD_INT 2
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: LD_INT 1
71666: PUSH
71667: LD_INT 2
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: LIST
71678: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71679: LD_ADDR_VAR 0 62
71683: PUSH
71684: LD_INT 1
71686: PUSH
71687: LD_INT 2
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: PUSH
71694: LD_INT 0
71696: PUSH
71697: LD_INT 2
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: PUSH
71704: LD_INT 1
71706: NEG
71707: PUSH
71708: LD_INT 1
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: LIST
71719: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71720: LD_ADDR_VAR 0 63
71724: PUSH
71725: LD_INT 1
71727: NEG
71728: PUSH
71729: LD_INT 1
71731: PUSH
71732: EMPTY
71733: LIST
71734: LIST
71735: PUSH
71736: LD_INT 2
71738: NEG
71739: PUSH
71740: LD_INT 0
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: LD_INT 2
71749: NEG
71750: PUSH
71751: LD_INT 1
71753: NEG
71754: PUSH
71755: EMPTY
71756: LIST
71757: LIST
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: LIST
71763: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71764: LD_ADDR_VAR 0 64
71768: PUSH
71769: LD_INT 1
71771: NEG
71772: PUSH
71773: LD_INT 2
71775: NEG
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 2
71783: NEG
71784: PUSH
71785: LD_INT 1
71787: NEG
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: PUSH
71793: LD_INT 2
71795: NEG
71796: PUSH
71797: LD_INT 2
71799: NEG
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: LIST
71809: ST_TO_ADDR
// end ; 2 :
71810: GO 75076
71812: LD_INT 2
71814: DOUBLE
71815: EQUAL
71816: IFTRUE 71820
71818: GO 75075
71820: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
71821: LD_ADDR_VAR 0 29
71825: PUSH
71826: LD_INT 4
71828: PUSH
71829: LD_INT 0
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: PUSH
71836: LD_INT 4
71838: PUSH
71839: LD_INT 1
71841: NEG
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: LD_INT 5
71849: PUSH
71850: LD_INT 0
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 5
71859: PUSH
71860: LD_INT 1
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: PUSH
71867: LD_INT 4
71869: PUSH
71870: LD_INT 1
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PUSH
71877: LD_INT 3
71879: PUSH
71880: LD_INT 0
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PUSH
71887: LD_INT 3
71889: PUSH
71890: LD_INT 1
71892: NEG
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: PUSH
71898: LD_INT 3
71900: PUSH
71901: LD_INT 2
71903: NEG
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: LD_INT 5
71911: PUSH
71912: LD_INT 2
71914: PUSH
71915: EMPTY
71916: LIST
71917: LIST
71918: PUSH
71919: LD_INT 3
71921: PUSH
71922: LD_INT 3
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: PUSH
71929: LD_INT 3
71931: PUSH
71932: LD_INT 2
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: LD_INT 4
71941: PUSH
71942: LD_INT 3
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PUSH
71949: LD_INT 4
71951: PUSH
71952: LD_INT 4
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PUSH
71959: LD_INT 3
71961: PUSH
71962: LD_INT 4
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: PUSH
71969: LD_INT 2
71971: PUSH
71972: LD_INT 3
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: PUSH
71979: LD_INT 2
71981: PUSH
71982: LD_INT 2
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: PUSH
71989: LD_INT 4
71991: PUSH
71992: LD_INT 2
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: LD_INT 2
72001: PUSH
72002: LD_INT 4
72004: PUSH
72005: EMPTY
72006: LIST
72007: LIST
72008: PUSH
72009: LD_INT 0
72011: PUSH
72012: LD_INT 4
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: PUSH
72019: LD_INT 0
72021: PUSH
72022: LD_INT 3
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: PUSH
72029: LD_INT 1
72031: PUSH
72032: LD_INT 4
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: PUSH
72039: LD_INT 1
72041: PUSH
72042: LD_INT 5
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: PUSH
72049: LD_INT 0
72051: PUSH
72052: LD_INT 5
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PUSH
72059: LD_INT 1
72061: NEG
72062: PUSH
72063: LD_INT 4
72065: PUSH
72066: EMPTY
72067: LIST
72068: LIST
72069: PUSH
72070: LD_INT 1
72072: NEG
72073: PUSH
72074: LD_INT 3
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: PUSH
72081: LD_INT 2
72083: PUSH
72084: LD_INT 5
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: PUSH
72091: LD_INT 2
72093: NEG
72094: PUSH
72095: LD_INT 3
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: PUSH
72102: LD_INT 3
72104: NEG
72105: PUSH
72106: LD_INT 0
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: PUSH
72113: LD_INT 3
72115: NEG
72116: PUSH
72117: LD_INT 1
72119: NEG
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: PUSH
72125: LD_INT 2
72127: NEG
72128: PUSH
72129: LD_INT 0
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: PUSH
72136: LD_INT 2
72138: NEG
72139: PUSH
72140: LD_INT 1
72142: PUSH
72143: EMPTY
72144: LIST
72145: LIST
72146: PUSH
72147: LD_INT 3
72149: NEG
72150: PUSH
72151: LD_INT 1
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: PUSH
72158: LD_INT 4
72160: NEG
72161: PUSH
72162: LD_INT 0
72164: PUSH
72165: EMPTY
72166: LIST
72167: LIST
72168: PUSH
72169: LD_INT 4
72171: NEG
72172: PUSH
72173: LD_INT 1
72175: NEG
72176: PUSH
72177: EMPTY
72178: LIST
72179: LIST
72180: PUSH
72181: LD_INT 4
72183: NEG
72184: PUSH
72185: LD_INT 2
72187: NEG
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: PUSH
72193: LD_INT 2
72195: NEG
72196: PUSH
72197: LD_INT 2
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: PUSH
72204: LD_INT 4
72206: NEG
72207: PUSH
72208: LD_INT 4
72210: NEG
72211: PUSH
72212: EMPTY
72213: LIST
72214: LIST
72215: PUSH
72216: LD_INT 4
72218: NEG
72219: PUSH
72220: LD_INT 5
72222: NEG
72223: PUSH
72224: EMPTY
72225: LIST
72226: LIST
72227: PUSH
72228: LD_INT 3
72230: NEG
72231: PUSH
72232: LD_INT 4
72234: NEG
72235: PUSH
72236: EMPTY
72237: LIST
72238: LIST
72239: PUSH
72240: LD_INT 3
72242: NEG
72243: PUSH
72244: LD_INT 3
72246: NEG
72247: PUSH
72248: EMPTY
72249: LIST
72250: LIST
72251: PUSH
72252: LD_INT 4
72254: NEG
72255: PUSH
72256: LD_INT 3
72258: NEG
72259: PUSH
72260: EMPTY
72261: LIST
72262: LIST
72263: PUSH
72264: LD_INT 5
72266: NEG
72267: PUSH
72268: LD_INT 4
72270: NEG
72271: PUSH
72272: EMPTY
72273: LIST
72274: LIST
72275: PUSH
72276: LD_INT 5
72278: NEG
72279: PUSH
72280: LD_INT 5
72282: NEG
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: PUSH
72288: LD_INT 3
72290: NEG
72291: PUSH
72292: LD_INT 5
72294: NEG
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: PUSH
72300: LD_INT 5
72302: NEG
72303: PUSH
72304: LD_INT 3
72306: NEG
72307: PUSH
72308: EMPTY
72309: LIST
72310: LIST
72311: PUSH
72312: EMPTY
72313: LIST
72314: LIST
72315: LIST
72316: LIST
72317: LIST
72318: LIST
72319: LIST
72320: LIST
72321: LIST
72322: LIST
72323: LIST
72324: LIST
72325: LIST
72326: LIST
72327: LIST
72328: LIST
72329: LIST
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: LIST
72340: LIST
72341: LIST
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: LIST
72349: LIST
72350: LIST
72351: LIST
72352: LIST
72353: LIST
72354: LIST
72355: LIST
72356: LIST
72357: LIST
72358: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
72359: LD_ADDR_VAR 0 30
72363: PUSH
72364: LD_INT 4
72366: PUSH
72367: LD_INT 4
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: LD_INT 4
72376: PUSH
72377: LD_INT 3
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: PUSH
72384: LD_INT 5
72386: PUSH
72387: LD_INT 4
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: PUSH
72394: LD_INT 5
72396: PUSH
72397: LD_INT 5
72399: PUSH
72400: EMPTY
72401: LIST
72402: LIST
72403: PUSH
72404: LD_INT 4
72406: PUSH
72407: LD_INT 5
72409: PUSH
72410: EMPTY
72411: LIST
72412: LIST
72413: PUSH
72414: LD_INT 3
72416: PUSH
72417: LD_INT 4
72419: PUSH
72420: EMPTY
72421: LIST
72422: LIST
72423: PUSH
72424: LD_INT 3
72426: PUSH
72427: LD_INT 3
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PUSH
72434: LD_INT 5
72436: PUSH
72437: LD_INT 3
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: LD_INT 3
72446: PUSH
72447: LD_INT 5
72449: PUSH
72450: EMPTY
72451: LIST
72452: LIST
72453: PUSH
72454: LD_INT 0
72456: PUSH
72457: LD_INT 3
72459: PUSH
72460: EMPTY
72461: LIST
72462: LIST
72463: PUSH
72464: LD_INT 0
72466: PUSH
72467: LD_INT 2
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: PUSH
72474: LD_INT 1
72476: PUSH
72477: LD_INT 3
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: PUSH
72484: LD_INT 1
72486: PUSH
72487: LD_INT 4
72489: PUSH
72490: EMPTY
72491: LIST
72492: LIST
72493: PUSH
72494: LD_INT 0
72496: PUSH
72497: LD_INT 4
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: PUSH
72504: LD_INT 1
72506: NEG
72507: PUSH
72508: LD_INT 3
72510: PUSH
72511: EMPTY
72512: LIST
72513: LIST
72514: PUSH
72515: LD_INT 1
72517: NEG
72518: PUSH
72519: LD_INT 2
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: PUSH
72526: LD_INT 2
72528: PUSH
72529: LD_INT 4
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: PUSH
72536: LD_INT 2
72538: NEG
72539: PUSH
72540: LD_INT 2
72542: PUSH
72543: EMPTY
72544: LIST
72545: LIST
72546: PUSH
72547: LD_INT 4
72549: NEG
72550: PUSH
72551: LD_INT 0
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: PUSH
72558: LD_INT 4
72560: NEG
72561: PUSH
72562: LD_INT 1
72564: NEG
72565: PUSH
72566: EMPTY
72567: LIST
72568: LIST
72569: PUSH
72570: LD_INT 3
72572: NEG
72573: PUSH
72574: LD_INT 0
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: PUSH
72581: LD_INT 3
72583: NEG
72584: PUSH
72585: LD_INT 1
72587: PUSH
72588: EMPTY
72589: LIST
72590: LIST
72591: PUSH
72592: LD_INT 4
72594: NEG
72595: PUSH
72596: LD_INT 1
72598: PUSH
72599: EMPTY
72600: LIST
72601: LIST
72602: PUSH
72603: LD_INT 5
72605: NEG
72606: PUSH
72607: LD_INT 0
72609: PUSH
72610: EMPTY
72611: LIST
72612: LIST
72613: PUSH
72614: LD_INT 5
72616: NEG
72617: PUSH
72618: LD_INT 1
72620: NEG
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: PUSH
72626: LD_INT 5
72628: NEG
72629: PUSH
72630: LD_INT 2
72632: NEG
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PUSH
72638: LD_INT 3
72640: NEG
72641: PUSH
72642: LD_INT 2
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: PUSH
72649: LD_INT 3
72651: NEG
72652: PUSH
72653: LD_INT 3
72655: NEG
72656: PUSH
72657: EMPTY
72658: LIST
72659: LIST
72660: PUSH
72661: LD_INT 3
72663: NEG
72664: PUSH
72665: LD_INT 4
72667: NEG
72668: PUSH
72669: EMPTY
72670: LIST
72671: LIST
72672: PUSH
72673: LD_INT 2
72675: NEG
72676: PUSH
72677: LD_INT 3
72679: NEG
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PUSH
72685: LD_INT 2
72687: NEG
72688: PUSH
72689: LD_INT 2
72691: NEG
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: PUSH
72697: LD_INT 3
72699: NEG
72700: PUSH
72701: LD_INT 2
72703: NEG
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: PUSH
72709: LD_INT 4
72711: NEG
72712: PUSH
72713: LD_INT 3
72715: NEG
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: PUSH
72721: LD_INT 4
72723: NEG
72724: PUSH
72725: LD_INT 4
72727: NEG
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: PUSH
72733: LD_INT 2
72735: NEG
72736: PUSH
72737: LD_INT 4
72739: NEG
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: PUSH
72745: LD_INT 4
72747: NEG
72748: PUSH
72749: LD_INT 2
72751: NEG
72752: PUSH
72753: EMPTY
72754: LIST
72755: LIST
72756: PUSH
72757: LD_INT 0
72759: PUSH
72760: LD_INT 4
72762: NEG
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: PUSH
72768: LD_INT 0
72770: PUSH
72771: LD_INT 5
72773: NEG
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PUSH
72779: LD_INT 1
72781: PUSH
72782: LD_INT 4
72784: NEG
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: PUSH
72790: LD_INT 1
72792: PUSH
72793: LD_INT 3
72795: NEG
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: PUSH
72801: LD_INT 0
72803: PUSH
72804: LD_INT 3
72806: NEG
72807: PUSH
72808: EMPTY
72809: LIST
72810: LIST
72811: PUSH
72812: LD_INT 1
72814: NEG
72815: PUSH
72816: LD_INT 4
72818: NEG
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: PUSH
72824: LD_INT 1
72826: NEG
72827: PUSH
72828: LD_INT 5
72830: NEG
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PUSH
72836: LD_INT 2
72838: PUSH
72839: LD_INT 3
72841: NEG
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: PUSH
72847: LD_INT 2
72849: NEG
72850: PUSH
72851: LD_INT 5
72853: NEG
72854: PUSH
72855: EMPTY
72856: LIST
72857: LIST
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: LIST
72863: LIST
72864: LIST
72865: LIST
72866: LIST
72867: LIST
72868: LIST
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: LIST
72881: LIST
72882: LIST
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: LIST
72902: LIST
72903: LIST
72904: LIST
72905: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
72906: LD_ADDR_VAR 0 31
72910: PUSH
72911: LD_INT 0
72913: PUSH
72914: LD_INT 4
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: PUSH
72921: LD_INT 0
72923: PUSH
72924: LD_INT 3
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: PUSH
72931: LD_INT 1
72933: PUSH
72934: LD_INT 4
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PUSH
72941: LD_INT 1
72943: PUSH
72944: LD_INT 5
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PUSH
72951: LD_INT 0
72953: PUSH
72954: LD_INT 5
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 1
72963: NEG
72964: PUSH
72965: LD_INT 4
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PUSH
72972: LD_INT 1
72974: NEG
72975: PUSH
72976: LD_INT 3
72978: PUSH
72979: EMPTY
72980: LIST
72981: LIST
72982: PUSH
72983: LD_INT 2
72985: PUSH
72986: LD_INT 5
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: PUSH
72993: LD_INT 2
72995: NEG
72996: PUSH
72997: LD_INT 3
72999: PUSH
73000: EMPTY
73001: LIST
73002: LIST
73003: PUSH
73004: LD_INT 3
73006: NEG
73007: PUSH
73008: LD_INT 0
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: PUSH
73015: LD_INT 3
73017: NEG
73018: PUSH
73019: LD_INT 1
73021: NEG
73022: PUSH
73023: EMPTY
73024: LIST
73025: LIST
73026: PUSH
73027: LD_INT 2
73029: NEG
73030: PUSH
73031: LD_INT 0
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: PUSH
73038: LD_INT 2
73040: NEG
73041: PUSH
73042: LD_INT 1
73044: PUSH
73045: EMPTY
73046: LIST
73047: LIST
73048: PUSH
73049: LD_INT 3
73051: NEG
73052: PUSH
73053: LD_INT 1
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: PUSH
73060: LD_INT 4
73062: NEG
73063: PUSH
73064: LD_INT 0
73066: PUSH
73067: EMPTY
73068: LIST
73069: LIST
73070: PUSH
73071: LD_INT 4
73073: NEG
73074: PUSH
73075: LD_INT 1
73077: NEG
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: PUSH
73083: LD_INT 4
73085: NEG
73086: PUSH
73087: LD_INT 2
73089: NEG
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: PUSH
73095: LD_INT 2
73097: NEG
73098: PUSH
73099: LD_INT 2
73101: PUSH
73102: EMPTY
73103: LIST
73104: LIST
73105: PUSH
73106: LD_INT 4
73108: NEG
73109: PUSH
73110: LD_INT 4
73112: NEG
73113: PUSH
73114: EMPTY
73115: LIST
73116: LIST
73117: PUSH
73118: LD_INT 4
73120: NEG
73121: PUSH
73122: LD_INT 5
73124: NEG
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: PUSH
73130: LD_INT 3
73132: NEG
73133: PUSH
73134: LD_INT 4
73136: NEG
73137: PUSH
73138: EMPTY
73139: LIST
73140: LIST
73141: PUSH
73142: LD_INT 3
73144: NEG
73145: PUSH
73146: LD_INT 3
73148: NEG
73149: PUSH
73150: EMPTY
73151: LIST
73152: LIST
73153: PUSH
73154: LD_INT 4
73156: NEG
73157: PUSH
73158: LD_INT 3
73160: NEG
73161: PUSH
73162: EMPTY
73163: LIST
73164: LIST
73165: PUSH
73166: LD_INT 5
73168: NEG
73169: PUSH
73170: LD_INT 4
73172: NEG
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: PUSH
73178: LD_INT 5
73180: NEG
73181: PUSH
73182: LD_INT 5
73184: NEG
73185: PUSH
73186: EMPTY
73187: LIST
73188: LIST
73189: PUSH
73190: LD_INT 3
73192: NEG
73193: PUSH
73194: LD_INT 5
73196: NEG
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PUSH
73202: LD_INT 5
73204: NEG
73205: PUSH
73206: LD_INT 3
73208: NEG
73209: PUSH
73210: EMPTY
73211: LIST
73212: LIST
73213: PUSH
73214: LD_INT 0
73216: PUSH
73217: LD_INT 3
73219: NEG
73220: PUSH
73221: EMPTY
73222: LIST
73223: LIST
73224: PUSH
73225: LD_INT 0
73227: PUSH
73228: LD_INT 4
73230: NEG
73231: PUSH
73232: EMPTY
73233: LIST
73234: LIST
73235: PUSH
73236: LD_INT 1
73238: PUSH
73239: LD_INT 3
73241: NEG
73242: PUSH
73243: EMPTY
73244: LIST
73245: LIST
73246: PUSH
73247: LD_INT 1
73249: PUSH
73250: LD_INT 2
73252: NEG
73253: PUSH
73254: EMPTY
73255: LIST
73256: LIST
73257: PUSH
73258: LD_INT 0
73260: PUSH
73261: LD_INT 2
73263: NEG
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: PUSH
73269: LD_INT 1
73271: NEG
73272: PUSH
73273: LD_INT 3
73275: NEG
73276: PUSH
73277: EMPTY
73278: LIST
73279: LIST
73280: PUSH
73281: LD_INT 1
73283: NEG
73284: PUSH
73285: LD_INT 4
73287: NEG
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: PUSH
73293: LD_INT 2
73295: PUSH
73296: LD_INT 2
73298: NEG
73299: PUSH
73300: EMPTY
73301: LIST
73302: LIST
73303: PUSH
73304: LD_INT 2
73306: NEG
73307: PUSH
73308: LD_INT 4
73310: NEG
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: PUSH
73316: LD_INT 4
73318: PUSH
73319: LD_INT 0
73321: PUSH
73322: EMPTY
73323: LIST
73324: LIST
73325: PUSH
73326: LD_INT 4
73328: PUSH
73329: LD_INT 1
73331: NEG
73332: PUSH
73333: EMPTY
73334: LIST
73335: LIST
73336: PUSH
73337: LD_INT 5
73339: PUSH
73340: LD_INT 0
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: PUSH
73347: LD_INT 5
73349: PUSH
73350: LD_INT 1
73352: PUSH
73353: EMPTY
73354: LIST
73355: LIST
73356: PUSH
73357: LD_INT 4
73359: PUSH
73360: LD_INT 1
73362: PUSH
73363: EMPTY
73364: LIST
73365: LIST
73366: PUSH
73367: LD_INT 3
73369: PUSH
73370: LD_INT 0
73372: PUSH
73373: EMPTY
73374: LIST
73375: LIST
73376: PUSH
73377: LD_INT 3
73379: PUSH
73380: LD_INT 1
73382: NEG
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: PUSH
73388: LD_INT 3
73390: PUSH
73391: LD_INT 2
73393: NEG
73394: PUSH
73395: EMPTY
73396: LIST
73397: LIST
73398: PUSH
73399: LD_INT 5
73401: PUSH
73402: LD_INT 2
73404: PUSH
73405: EMPTY
73406: LIST
73407: LIST
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: LIST
73418: LIST
73419: LIST
73420: LIST
73421: LIST
73422: LIST
73423: LIST
73424: LIST
73425: LIST
73426: LIST
73427: LIST
73428: LIST
73429: LIST
73430: LIST
73431: LIST
73432: LIST
73433: LIST
73434: LIST
73435: LIST
73436: LIST
73437: LIST
73438: LIST
73439: LIST
73440: LIST
73441: LIST
73442: LIST
73443: LIST
73444: LIST
73445: LIST
73446: LIST
73447: LIST
73448: LIST
73449: LIST
73450: LIST
73451: LIST
73452: LIST
73453: LIST
73454: LIST
73455: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73456: LD_ADDR_VAR 0 32
73460: PUSH
73461: LD_INT 4
73463: NEG
73464: PUSH
73465: LD_INT 0
73467: PUSH
73468: EMPTY
73469: LIST
73470: LIST
73471: PUSH
73472: LD_INT 4
73474: NEG
73475: PUSH
73476: LD_INT 1
73478: NEG
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: PUSH
73484: LD_INT 3
73486: NEG
73487: PUSH
73488: LD_INT 0
73490: PUSH
73491: EMPTY
73492: LIST
73493: LIST
73494: PUSH
73495: LD_INT 3
73497: NEG
73498: PUSH
73499: LD_INT 1
73501: PUSH
73502: EMPTY
73503: LIST
73504: LIST
73505: PUSH
73506: LD_INT 4
73508: NEG
73509: PUSH
73510: LD_INT 1
73512: PUSH
73513: EMPTY
73514: LIST
73515: LIST
73516: PUSH
73517: LD_INT 5
73519: NEG
73520: PUSH
73521: LD_INT 0
73523: PUSH
73524: EMPTY
73525: LIST
73526: LIST
73527: PUSH
73528: LD_INT 5
73530: NEG
73531: PUSH
73532: LD_INT 1
73534: NEG
73535: PUSH
73536: EMPTY
73537: LIST
73538: LIST
73539: PUSH
73540: LD_INT 5
73542: NEG
73543: PUSH
73544: LD_INT 2
73546: NEG
73547: PUSH
73548: EMPTY
73549: LIST
73550: LIST
73551: PUSH
73552: LD_INT 3
73554: NEG
73555: PUSH
73556: LD_INT 2
73558: PUSH
73559: EMPTY
73560: LIST
73561: LIST
73562: PUSH
73563: LD_INT 3
73565: NEG
73566: PUSH
73567: LD_INT 3
73569: NEG
73570: PUSH
73571: EMPTY
73572: LIST
73573: LIST
73574: PUSH
73575: LD_INT 3
73577: NEG
73578: PUSH
73579: LD_INT 4
73581: NEG
73582: PUSH
73583: EMPTY
73584: LIST
73585: LIST
73586: PUSH
73587: LD_INT 2
73589: NEG
73590: PUSH
73591: LD_INT 3
73593: NEG
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: PUSH
73599: LD_INT 2
73601: NEG
73602: PUSH
73603: LD_INT 2
73605: NEG
73606: PUSH
73607: EMPTY
73608: LIST
73609: LIST
73610: PUSH
73611: LD_INT 3
73613: NEG
73614: PUSH
73615: LD_INT 2
73617: NEG
73618: PUSH
73619: EMPTY
73620: LIST
73621: LIST
73622: PUSH
73623: LD_INT 4
73625: NEG
73626: PUSH
73627: LD_INT 3
73629: NEG
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: PUSH
73635: LD_INT 4
73637: NEG
73638: PUSH
73639: LD_INT 4
73641: NEG
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: PUSH
73647: LD_INT 2
73649: NEG
73650: PUSH
73651: LD_INT 4
73653: NEG
73654: PUSH
73655: EMPTY
73656: LIST
73657: LIST
73658: PUSH
73659: LD_INT 4
73661: NEG
73662: PUSH
73663: LD_INT 2
73665: NEG
73666: PUSH
73667: EMPTY
73668: LIST
73669: LIST
73670: PUSH
73671: LD_INT 0
73673: PUSH
73674: LD_INT 4
73676: NEG
73677: PUSH
73678: EMPTY
73679: LIST
73680: LIST
73681: PUSH
73682: LD_INT 0
73684: PUSH
73685: LD_INT 5
73687: NEG
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: PUSH
73693: LD_INT 1
73695: PUSH
73696: LD_INT 4
73698: NEG
73699: PUSH
73700: EMPTY
73701: LIST
73702: LIST
73703: PUSH
73704: LD_INT 1
73706: PUSH
73707: LD_INT 3
73709: NEG
73710: PUSH
73711: EMPTY
73712: LIST
73713: LIST
73714: PUSH
73715: LD_INT 0
73717: PUSH
73718: LD_INT 3
73720: NEG
73721: PUSH
73722: EMPTY
73723: LIST
73724: LIST
73725: PUSH
73726: LD_INT 1
73728: NEG
73729: PUSH
73730: LD_INT 4
73732: NEG
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: PUSH
73738: LD_INT 1
73740: NEG
73741: PUSH
73742: LD_INT 5
73744: NEG
73745: PUSH
73746: EMPTY
73747: LIST
73748: LIST
73749: PUSH
73750: LD_INT 2
73752: PUSH
73753: LD_INT 3
73755: NEG
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PUSH
73761: LD_INT 2
73763: NEG
73764: PUSH
73765: LD_INT 5
73767: NEG
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: PUSH
73773: LD_INT 3
73775: PUSH
73776: LD_INT 0
73778: PUSH
73779: EMPTY
73780: LIST
73781: LIST
73782: PUSH
73783: LD_INT 3
73785: PUSH
73786: LD_INT 1
73788: NEG
73789: PUSH
73790: EMPTY
73791: LIST
73792: LIST
73793: PUSH
73794: LD_INT 4
73796: PUSH
73797: LD_INT 0
73799: PUSH
73800: EMPTY
73801: LIST
73802: LIST
73803: PUSH
73804: LD_INT 4
73806: PUSH
73807: LD_INT 1
73809: PUSH
73810: EMPTY
73811: LIST
73812: LIST
73813: PUSH
73814: LD_INT 3
73816: PUSH
73817: LD_INT 1
73819: PUSH
73820: EMPTY
73821: LIST
73822: LIST
73823: PUSH
73824: LD_INT 2
73826: PUSH
73827: LD_INT 0
73829: PUSH
73830: EMPTY
73831: LIST
73832: LIST
73833: PUSH
73834: LD_INT 2
73836: PUSH
73837: LD_INT 1
73839: NEG
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: PUSH
73845: LD_INT 2
73847: PUSH
73848: LD_INT 2
73850: NEG
73851: PUSH
73852: EMPTY
73853: LIST
73854: LIST
73855: PUSH
73856: LD_INT 4
73858: PUSH
73859: LD_INT 2
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: PUSH
73866: LD_INT 4
73868: PUSH
73869: LD_INT 4
73871: PUSH
73872: EMPTY
73873: LIST
73874: LIST
73875: PUSH
73876: LD_INT 4
73878: PUSH
73879: LD_INT 3
73881: PUSH
73882: EMPTY
73883: LIST
73884: LIST
73885: PUSH
73886: LD_INT 5
73888: PUSH
73889: LD_INT 4
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: PUSH
73896: LD_INT 5
73898: PUSH
73899: LD_INT 5
73901: PUSH
73902: EMPTY
73903: LIST
73904: LIST
73905: PUSH
73906: LD_INT 4
73908: PUSH
73909: LD_INT 5
73911: PUSH
73912: EMPTY
73913: LIST
73914: LIST
73915: PUSH
73916: LD_INT 3
73918: PUSH
73919: LD_INT 4
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: PUSH
73926: LD_INT 3
73928: PUSH
73929: LD_INT 3
73931: PUSH
73932: EMPTY
73933: LIST
73934: LIST
73935: PUSH
73936: LD_INT 5
73938: PUSH
73939: LD_INT 3
73941: PUSH
73942: EMPTY
73943: LIST
73944: LIST
73945: PUSH
73946: LD_INT 3
73948: PUSH
73949: LD_INT 5
73951: PUSH
73952: EMPTY
73953: LIST
73954: LIST
73955: PUSH
73956: EMPTY
73957: LIST
73958: LIST
73959: LIST
73960: LIST
73961: LIST
73962: LIST
73963: LIST
73964: LIST
73965: LIST
73966: LIST
73967: LIST
73968: LIST
73969: LIST
73970: LIST
73971: LIST
73972: LIST
73973: LIST
73974: LIST
73975: LIST
73976: LIST
73977: LIST
73978: LIST
73979: LIST
73980: LIST
73981: LIST
73982: LIST
73983: LIST
73984: LIST
73985: LIST
73986: LIST
73987: LIST
73988: LIST
73989: LIST
73990: LIST
73991: LIST
73992: LIST
73993: LIST
73994: LIST
73995: LIST
73996: LIST
73997: LIST
73998: LIST
73999: LIST
74000: LIST
74001: LIST
74002: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
74003: LD_ADDR_VAR 0 33
74007: PUSH
74008: LD_INT 4
74010: NEG
74011: PUSH
74012: LD_INT 4
74014: NEG
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PUSH
74020: LD_INT 4
74022: NEG
74023: PUSH
74024: LD_INT 5
74026: NEG
74027: PUSH
74028: EMPTY
74029: LIST
74030: LIST
74031: PUSH
74032: LD_INT 3
74034: NEG
74035: PUSH
74036: LD_INT 4
74038: NEG
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: PUSH
74044: LD_INT 3
74046: NEG
74047: PUSH
74048: LD_INT 3
74050: NEG
74051: PUSH
74052: EMPTY
74053: LIST
74054: LIST
74055: PUSH
74056: LD_INT 4
74058: NEG
74059: PUSH
74060: LD_INT 3
74062: NEG
74063: PUSH
74064: EMPTY
74065: LIST
74066: LIST
74067: PUSH
74068: LD_INT 5
74070: NEG
74071: PUSH
74072: LD_INT 4
74074: NEG
74075: PUSH
74076: EMPTY
74077: LIST
74078: LIST
74079: PUSH
74080: LD_INT 5
74082: NEG
74083: PUSH
74084: LD_INT 5
74086: NEG
74087: PUSH
74088: EMPTY
74089: LIST
74090: LIST
74091: PUSH
74092: LD_INT 3
74094: NEG
74095: PUSH
74096: LD_INT 5
74098: NEG
74099: PUSH
74100: EMPTY
74101: LIST
74102: LIST
74103: PUSH
74104: LD_INT 5
74106: NEG
74107: PUSH
74108: LD_INT 3
74110: NEG
74111: PUSH
74112: EMPTY
74113: LIST
74114: LIST
74115: PUSH
74116: LD_INT 0
74118: PUSH
74119: LD_INT 3
74121: NEG
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: PUSH
74127: LD_INT 0
74129: PUSH
74130: LD_INT 4
74132: NEG
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: PUSH
74138: LD_INT 1
74140: PUSH
74141: LD_INT 3
74143: NEG
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: PUSH
74149: LD_INT 1
74151: PUSH
74152: LD_INT 2
74154: NEG
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: PUSH
74160: LD_INT 0
74162: PUSH
74163: LD_INT 2
74165: NEG
74166: PUSH
74167: EMPTY
74168: LIST
74169: LIST
74170: PUSH
74171: LD_INT 1
74173: NEG
74174: PUSH
74175: LD_INT 3
74177: NEG
74178: PUSH
74179: EMPTY
74180: LIST
74181: LIST
74182: PUSH
74183: LD_INT 1
74185: NEG
74186: PUSH
74187: LD_INT 4
74189: NEG
74190: PUSH
74191: EMPTY
74192: LIST
74193: LIST
74194: PUSH
74195: LD_INT 2
74197: PUSH
74198: LD_INT 2
74200: NEG
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PUSH
74206: LD_INT 2
74208: NEG
74209: PUSH
74210: LD_INT 4
74212: NEG
74213: PUSH
74214: EMPTY
74215: LIST
74216: LIST
74217: PUSH
74218: LD_INT 4
74220: PUSH
74221: LD_INT 0
74223: PUSH
74224: EMPTY
74225: LIST
74226: LIST
74227: PUSH
74228: LD_INT 4
74230: PUSH
74231: LD_INT 1
74233: NEG
74234: PUSH
74235: EMPTY
74236: LIST
74237: LIST
74238: PUSH
74239: LD_INT 5
74241: PUSH
74242: LD_INT 0
74244: PUSH
74245: EMPTY
74246: LIST
74247: LIST
74248: PUSH
74249: LD_INT 5
74251: PUSH
74252: LD_INT 1
74254: PUSH
74255: EMPTY
74256: LIST
74257: LIST
74258: PUSH
74259: LD_INT 4
74261: PUSH
74262: LD_INT 1
74264: PUSH
74265: EMPTY
74266: LIST
74267: LIST
74268: PUSH
74269: LD_INT 3
74271: PUSH
74272: LD_INT 0
74274: PUSH
74275: EMPTY
74276: LIST
74277: LIST
74278: PUSH
74279: LD_INT 3
74281: PUSH
74282: LD_INT 1
74284: NEG
74285: PUSH
74286: EMPTY
74287: LIST
74288: LIST
74289: PUSH
74290: LD_INT 3
74292: PUSH
74293: LD_INT 2
74295: NEG
74296: PUSH
74297: EMPTY
74298: LIST
74299: LIST
74300: PUSH
74301: LD_INT 5
74303: PUSH
74304: LD_INT 2
74306: PUSH
74307: EMPTY
74308: LIST
74309: LIST
74310: PUSH
74311: LD_INT 3
74313: PUSH
74314: LD_INT 3
74316: PUSH
74317: EMPTY
74318: LIST
74319: LIST
74320: PUSH
74321: LD_INT 3
74323: PUSH
74324: LD_INT 2
74326: PUSH
74327: EMPTY
74328: LIST
74329: LIST
74330: PUSH
74331: LD_INT 4
74333: PUSH
74334: LD_INT 3
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: PUSH
74341: LD_INT 4
74343: PUSH
74344: LD_INT 4
74346: PUSH
74347: EMPTY
74348: LIST
74349: LIST
74350: PUSH
74351: LD_INT 3
74353: PUSH
74354: LD_INT 4
74356: PUSH
74357: EMPTY
74358: LIST
74359: LIST
74360: PUSH
74361: LD_INT 2
74363: PUSH
74364: LD_INT 3
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: PUSH
74371: LD_INT 2
74373: PUSH
74374: LD_INT 2
74376: PUSH
74377: EMPTY
74378: LIST
74379: LIST
74380: PUSH
74381: LD_INT 4
74383: PUSH
74384: LD_INT 2
74386: PUSH
74387: EMPTY
74388: LIST
74389: LIST
74390: PUSH
74391: LD_INT 2
74393: PUSH
74394: LD_INT 4
74396: PUSH
74397: EMPTY
74398: LIST
74399: LIST
74400: PUSH
74401: LD_INT 0
74403: PUSH
74404: LD_INT 4
74406: PUSH
74407: EMPTY
74408: LIST
74409: LIST
74410: PUSH
74411: LD_INT 0
74413: PUSH
74414: LD_INT 3
74416: PUSH
74417: EMPTY
74418: LIST
74419: LIST
74420: PUSH
74421: LD_INT 1
74423: PUSH
74424: LD_INT 4
74426: PUSH
74427: EMPTY
74428: LIST
74429: LIST
74430: PUSH
74431: LD_INT 1
74433: PUSH
74434: LD_INT 5
74436: PUSH
74437: EMPTY
74438: LIST
74439: LIST
74440: PUSH
74441: LD_INT 0
74443: PUSH
74444: LD_INT 5
74446: PUSH
74447: EMPTY
74448: LIST
74449: LIST
74450: PUSH
74451: LD_INT 1
74453: NEG
74454: PUSH
74455: LD_INT 4
74457: PUSH
74458: EMPTY
74459: LIST
74460: LIST
74461: PUSH
74462: LD_INT 1
74464: NEG
74465: PUSH
74466: LD_INT 3
74468: PUSH
74469: EMPTY
74470: LIST
74471: LIST
74472: PUSH
74473: LD_INT 2
74475: PUSH
74476: LD_INT 5
74478: PUSH
74479: EMPTY
74480: LIST
74481: LIST
74482: PUSH
74483: LD_INT 2
74485: NEG
74486: PUSH
74487: LD_INT 3
74489: PUSH
74490: EMPTY
74491: LIST
74492: LIST
74493: PUSH
74494: EMPTY
74495: LIST
74496: LIST
74497: LIST
74498: LIST
74499: LIST
74500: LIST
74501: LIST
74502: LIST
74503: LIST
74504: LIST
74505: LIST
74506: LIST
74507: LIST
74508: LIST
74509: LIST
74510: LIST
74511: LIST
74512: LIST
74513: LIST
74514: LIST
74515: LIST
74516: LIST
74517: LIST
74518: LIST
74519: LIST
74520: LIST
74521: LIST
74522: LIST
74523: LIST
74524: LIST
74525: LIST
74526: LIST
74527: LIST
74528: LIST
74529: LIST
74530: LIST
74531: LIST
74532: LIST
74533: LIST
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: LIST
74539: LIST
74540: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74541: LD_ADDR_VAR 0 34
74545: PUSH
74546: LD_INT 0
74548: PUSH
74549: LD_INT 4
74551: NEG
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: PUSH
74557: LD_INT 0
74559: PUSH
74560: LD_INT 5
74562: NEG
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: PUSH
74568: LD_INT 1
74570: PUSH
74571: LD_INT 4
74573: NEG
74574: PUSH
74575: EMPTY
74576: LIST
74577: LIST
74578: PUSH
74579: LD_INT 1
74581: PUSH
74582: LD_INT 3
74584: NEG
74585: PUSH
74586: EMPTY
74587: LIST
74588: LIST
74589: PUSH
74590: LD_INT 0
74592: PUSH
74593: LD_INT 3
74595: NEG
74596: PUSH
74597: EMPTY
74598: LIST
74599: LIST
74600: PUSH
74601: LD_INT 1
74603: NEG
74604: PUSH
74605: LD_INT 4
74607: NEG
74608: PUSH
74609: EMPTY
74610: LIST
74611: LIST
74612: PUSH
74613: LD_INT 1
74615: NEG
74616: PUSH
74617: LD_INT 5
74619: NEG
74620: PUSH
74621: EMPTY
74622: LIST
74623: LIST
74624: PUSH
74625: LD_INT 2
74627: PUSH
74628: LD_INT 3
74630: NEG
74631: PUSH
74632: EMPTY
74633: LIST
74634: LIST
74635: PUSH
74636: LD_INT 2
74638: NEG
74639: PUSH
74640: LD_INT 5
74642: NEG
74643: PUSH
74644: EMPTY
74645: LIST
74646: LIST
74647: PUSH
74648: LD_INT 3
74650: PUSH
74651: LD_INT 0
74653: PUSH
74654: EMPTY
74655: LIST
74656: LIST
74657: PUSH
74658: LD_INT 3
74660: PUSH
74661: LD_INT 1
74663: NEG
74664: PUSH
74665: EMPTY
74666: LIST
74667: LIST
74668: PUSH
74669: LD_INT 4
74671: PUSH
74672: LD_INT 0
74674: PUSH
74675: EMPTY
74676: LIST
74677: LIST
74678: PUSH
74679: LD_INT 4
74681: PUSH
74682: LD_INT 1
74684: PUSH
74685: EMPTY
74686: LIST
74687: LIST
74688: PUSH
74689: LD_INT 3
74691: PUSH
74692: LD_INT 1
74694: PUSH
74695: EMPTY
74696: LIST
74697: LIST
74698: PUSH
74699: LD_INT 2
74701: PUSH
74702: LD_INT 0
74704: PUSH
74705: EMPTY
74706: LIST
74707: LIST
74708: PUSH
74709: LD_INT 2
74711: PUSH
74712: LD_INT 1
74714: NEG
74715: PUSH
74716: EMPTY
74717: LIST
74718: LIST
74719: PUSH
74720: LD_INT 2
74722: PUSH
74723: LD_INT 2
74725: NEG
74726: PUSH
74727: EMPTY
74728: LIST
74729: LIST
74730: PUSH
74731: LD_INT 4
74733: PUSH
74734: LD_INT 2
74736: PUSH
74737: EMPTY
74738: LIST
74739: LIST
74740: PUSH
74741: LD_INT 4
74743: PUSH
74744: LD_INT 4
74746: PUSH
74747: EMPTY
74748: LIST
74749: LIST
74750: PUSH
74751: LD_INT 4
74753: PUSH
74754: LD_INT 3
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: PUSH
74761: LD_INT 5
74763: PUSH
74764: LD_INT 4
74766: PUSH
74767: EMPTY
74768: LIST
74769: LIST
74770: PUSH
74771: LD_INT 5
74773: PUSH
74774: LD_INT 5
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: PUSH
74781: LD_INT 4
74783: PUSH
74784: LD_INT 5
74786: PUSH
74787: EMPTY
74788: LIST
74789: LIST
74790: PUSH
74791: LD_INT 3
74793: PUSH
74794: LD_INT 4
74796: PUSH
74797: EMPTY
74798: LIST
74799: LIST
74800: PUSH
74801: LD_INT 3
74803: PUSH
74804: LD_INT 3
74806: PUSH
74807: EMPTY
74808: LIST
74809: LIST
74810: PUSH
74811: LD_INT 5
74813: PUSH
74814: LD_INT 3
74816: PUSH
74817: EMPTY
74818: LIST
74819: LIST
74820: PUSH
74821: LD_INT 3
74823: PUSH
74824: LD_INT 5
74826: PUSH
74827: EMPTY
74828: LIST
74829: LIST
74830: PUSH
74831: LD_INT 0
74833: PUSH
74834: LD_INT 3
74836: PUSH
74837: EMPTY
74838: LIST
74839: LIST
74840: PUSH
74841: LD_INT 0
74843: PUSH
74844: LD_INT 2
74846: PUSH
74847: EMPTY
74848: LIST
74849: LIST
74850: PUSH
74851: LD_INT 1
74853: PUSH
74854: LD_INT 3
74856: PUSH
74857: EMPTY
74858: LIST
74859: LIST
74860: PUSH
74861: LD_INT 1
74863: PUSH
74864: LD_INT 4
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: PUSH
74871: LD_INT 0
74873: PUSH
74874: LD_INT 4
74876: PUSH
74877: EMPTY
74878: LIST
74879: LIST
74880: PUSH
74881: LD_INT 1
74883: NEG
74884: PUSH
74885: LD_INT 3
74887: PUSH
74888: EMPTY
74889: LIST
74890: LIST
74891: PUSH
74892: LD_INT 1
74894: NEG
74895: PUSH
74896: LD_INT 2
74898: PUSH
74899: EMPTY
74900: LIST
74901: LIST
74902: PUSH
74903: LD_INT 2
74905: PUSH
74906: LD_INT 4
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: PUSH
74913: LD_INT 2
74915: NEG
74916: PUSH
74917: LD_INT 2
74919: PUSH
74920: EMPTY
74921: LIST
74922: LIST
74923: PUSH
74924: LD_INT 4
74926: NEG
74927: PUSH
74928: LD_INT 0
74930: PUSH
74931: EMPTY
74932: LIST
74933: LIST
74934: PUSH
74935: LD_INT 4
74937: NEG
74938: PUSH
74939: LD_INT 1
74941: NEG
74942: PUSH
74943: EMPTY
74944: LIST
74945: LIST
74946: PUSH
74947: LD_INT 3
74949: NEG
74950: PUSH
74951: LD_INT 0
74953: PUSH
74954: EMPTY
74955: LIST
74956: LIST
74957: PUSH
74958: LD_INT 3
74960: NEG
74961: PUSH
74962: LD_INT 1
74964: PUSH
74965: EMPTY
74966: LIST
74967: LIST
74968: PUSH
74969: LD_INT 4
74971: NEG
74972: PUSH
74973: LD_INT 1
74975: PUSH
74976: EMPTY
74977: LIST
74978: LIST
74979: PUSH
74980: LD_INT 5
74982: NEG
74983: PUSH
74984: LD_INT 0
74986: PUSH
74987: EMPTY
74988: LIST
74989: LIST
74990: PUSH
74991: LD_INT 5
74993: NEG
74994: PUSH
74995: LD_INT 1
74997: NEG
74998: PUSH
74999: EMPTY
75000: LIST
75001: LIST
75002: PUSH
75003: LD_INT 5
75005: NEG
75006: PUSH
75007: LD_INT 2
75009: NEG
75010: PUSH
75011: EMPTY
75012: LIST
75013: LIST
75014: PUSH
75015: LD_INT 3
75017: NEG
75018: PUSH
75019: LD_INT 2
75021: PUSH
75022: EMPTY
75023: LIST
75024: LIST
75025: PUSH
75026: EMPTY
75027: LIST
75028: LIST
75029: LIST
75030: LIST
75031: LIST
75032: LIST
75033: LIST
75034: LIST
75035: LIST
75036: LIST
75037: LIST
75038: LIST
75039: LIST
75040: LIST
75041: LIST
75042: LIST
75043: LIST
75044: LIST
75045: LIST
75046: LIST
75047: LIST
75048: LIST
75049: LIST
75050: LIST
75051: LIST
75052: LIST
75053: LIST
75054: LIST
75055: LIST
75056: LIST
75057: LIST
75058: LIST
75059: LIST
75060: LIST
75061: LIST
75062: LIST
75063: LIST
75064: LIST
75065: LIST
75066: LIST
75067: LIST
75068: LIST
75069: LIST
75070: LIST
75071: LIST
75072: ST_TO_ADDR
// end ; end ;
75073: GO 75076
75075: POP
// case btype of b_depot , b_warehouse :
75076: LD_VAR 0 1
75080: PUSH
75081: LD_INT 0
75083: DOUBLE
75084: EQUAL
75085: IFTRUE 75095
75087: LD_INT 1
75089: DOUBLE
75090: EQUAL
75091: IFTRUE 75095
75093: GO 75296
75095: POP
// case nation of nation_american :
75096: LD_VAR 0 5
75100: PUSH
75101: LD_INT 1
75103: DOUBLE
75104: EQUAL
75105: IFTRUE 75109
75107: GO 75165
75109: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
75110: LD_ADDR_VAR 0 9
75114: PUSH
75115: LD_VAR 0 11
75119: PUSH
75120: LD_VAR 0 12
75124: PUSH
75125: LD_VAR 0 13
75129: PUSH
75130: LD_VAR 0 14
75134: PUSH
75135: LD_VAR 0 15
75139: PUSH
75140: LD_VAR 0 16
75144: PUSH
75145: EMPTY
75146: LIST
75147: LIST
75148: LIST
75149: LIST
75150: LIST
75151: LIST
75152: PUSH
75153: LD_VAR 0 4
75157: PUSH
75158: LD_INT 1
75160: PLUS
75161: ARRAY
75162: ST_TO_ADDR
75163: GO 75294
75165: LD_INT 2
75167: DOUBLE
75168: EQUAL
75169: IFTRUE 75173
75171: GO 75229
75173: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
75174: LD_ADDR_VAR 0 9
75178: PUSH
75179: LD_VAR 0 17
75183: PUSH
75184: LD_VAR 0 18
75188: PUSH
75189: LD_VAR 0 19
75193: PUSH
75194: LD_VAR 0 20
75198: PUSH
75199: LD_VAR 0 21
75203: PUSH
75204: LD_VAR 0 22
75208: PUSH
75209: EMPTY
75210: LIST
75211: LIST
75212: LIST
75213: LIST
75214: LIST
75215: LIST
75216: PUSH
75217: LD_VAR 0 4
75221: PUSH
75222: LD_INT 1
75224: PLUS
75225: ARRAY
75226: ST_TO_ADDR
75227: GO 75294
75229: LD_INT 3
75231: DOUBLE
75232: EQUAL
75233: IFTRUE 75237
75235: GO 75293
75237: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
75238: LD_ADDR_VAR 0 9
75242: PUSH
75243: LD_VAR 0 23
75247: PUSH
75248: LD_VAR 0 24
75252: PUSH
75253: LD_VAR 0 25
75257: PUSH
75258: LD_VAR 0 26
75262: PUSH
75263: LD_VAR 0 27
75267: PUSH
75268: LD_VAR 0 28
75272: PUSH
75273: EMPTY
75274: LIST
75275: LIST
75276: LIST
75277: LIST
75278: LIST
75279: LIST
75280: PUSH
75281: LD_VAR 0 4
75285: PUSH
75286: LD_INT 1
75288: PLUS
75289: ARRAY
75290: ST_TO_ADDR
75291: GO 75294
75293: POP
75294: GO 75849
75296: LD_INT 2
75298: DOUBLE
75299: EQUAL
75300: IFTRUE 75310
75302: LD_INT 3
75304: DOUBLE
75305: EQUAL
75306: IFTRUE 75310
75308: GO 75366
75310: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
75311: LD_ADDR_VAR 0 9
75315: PUSH
75316: LD_VAR 0 29
75320: PUSH
75321: LD_VAR 0 30
75325: PUSH
75326: LD_VAR 0 31
75330: PUSH
75331: LD_VAR 0 32
75335: PUSH
75336: LD_VAR 0 33
75340: PUSH
75341: LD_VAR 0 34
75345: PUSH
75346: EMPTY
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: LIST
75353: PUSH
75354: LD_VAR 0 4
75358: PUSH
75359: LD_INT 1
75361: PLUS
75362: ARRAY
75363: ST_TO_ADDR
75364: GO 75849
75366: LD_INT 16
75368: DOUBLE
75369: EQUAL
75370: IFTRUE 75428
75372: LD_INT 17
75374: DOUBLE
75375: EQUAL
75376: IFTRUE 75428
75378: LD_INT 18
75380: DOUBLE
75381: EQUAL
75382: IFTRUE 75428
75384: LD_INT 19
75386: DOUBLE
75387: EQUAL
75388: IFTRUE 75428
75390: LD_INT 22
75392: DOUBLE
75393: EQUAL
75394: IFTRUE 75428
75396: LD_INT 20
75398: DOUBLE
75399: EQUAL
75400: IFTRUE 75428
75402: LD_INT 21
75404: DOUBLE
75405: EQUAL
75406: IFTRUE 75428
75408: LD_INT 23
75410: DOUBLE
75411: EQUAL
75412: IFTRUE 75428
75414: LD_INT 24
75416: DOUBLE
75417: EQUAL
75418: IFTRUE 75428
75420: LD_INT 25
75422: DOUBLE
75423: EQUAL
75424: IFTRUE 75428
75426: GO 75484
75428: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75429: LD_ADDR_VAR 0 9
75433: PUSH
75434: LD_VAR 0 35
75438: PUSH
75439: LD_VAR 0 36
75443: PUSH
75444: LD_VAR 0 37
75448: PUSH
75449: LD_VAR 0 38
75453: PUSH
75454: LD_VAR 0 39
75458: PUSH
75459: LD_VAR 0 40
75463: PUSH
75464: EMPTY
75465: LIST
75466: LIST
75467: LIST
75468: LIST
75469: LIST
75470: LIST
75471: PUSH
75472: LD_VAR 0 4
75476: PUSH
75477: LD_INT 1
75479: PLUS
75480: ARRAY
75481: ST_TO_ADDR
75482: GO 75849
75484: LD_INT 6
75486: DOUBLE
75487: EQUAL
75488: IFTRUE 75540
75490: LD_INT 7
75492: DOUBLE
75493: EQUAL
75494: IFTRUE 75540
75496: LD_INT 8
75498: DOUBLE
75499: EQUAL
75500: IFTRUE 75540
75502: LD_INT 13
75504: DOUBLE
75505: EQUAL
75506: IFTRUE 75540
75508: LD_INT 12
75510: DOUBLE
75511: EQUAL
75512: IFTRUE 75540
75514: LD_INT 15
75516: DOUBLE
75517: EQUAL
75518: IFTRUE 75540
75520: LD_INT 11
75522: DOUBLE
75523: EQUAL
75524: IFTRUE 75540
75526: LD_INT 14
75528: DOUBLE
75529: EQUAL
75530: IFTRUE 75540
75532: LD_INT 10
75534: DOUBLE
75535: EQUAL
75536: IFTRUE 75540
75538: GO 75596
75540: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75541: LD_ADDR_VAR 0 9
75545: PUSH
75546: LD_VAR 0 41
75550: PUSH
75551: LD_VAR 0 42
75555: PUSH
75556: LD_VAR 0 43
75560: PUSH
75561: LD_VAR 0 44
75565: PUSH
75566: LD_VAR 0 45
75570: PUSH
75571: LD_VAR 0 46
75575: PUSH
75576: EMPTY
75577: LIST
75578: LIST
75579: LIST
75580: LIST
75581: LIST
75582: LIST
75583: PUSH
75584: LD_VAR 0 4
75588: PUSH
75589: LD_INT 1
75591: PLUS
75592: ARRAY
75593: ST_TO_ADDR
75594: GO 75849
75596: LD_INT 36
75598: DOUBLE
75599: EQUAL
75600: IFTRUE 75604
75602: GO 75660
75604: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75605: LD_ADDR_VAR 0 9
75609: PUSH
75610: LD_VAR 0 47
75614: PUSH
75615: LD_VAR 0 48
75619: PUSH
75620: LD_VAR 0 49
75624: PUSH
75625: LD_VAR 0 50
75629: PUSH
75630: LD_VAR 0 51
75634: PUSH
75635: LD_VAR 0 52
75639: PUSH
75640: EMPTY
75641: LIST
75642: LIST
75643: LIST
75644: LIST
75645: LIST
75646: LIST
75647: PUSH
75648: LD_VAR 0 4
75652: PUSH
75653: LD_INT 1
75655: PLUS
75656: ARRAY
75657: ST_TO_ADDR
75658: GO 75849
75660: LD_INT 4
75662: DOUBLE
75663: EQUAL
75664: IFTRUE 75686
75666: LD_INT 5
75668: DOUBLE
75669: EQUAL
75670: IFTRUE 75686
75672: LD_INT 34
75674: DOUBLE
75675: EQUAL
75676: IFTRUE 75686
75678: LD_INT 37
75680: DOUBLE
75681: EQUAL
75682: IFTRUE 75686
75684: GO 75742
75686: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75687: LD_ADDR_VAR 0 9
75691: PUSH
75692: LD_VAR 0 53
75696: PUSH
75697: LD_VAR 0 54
75701: PUSH
75702: LD_VAR 0 55
75706: PUSH
75707: LD_VAR 0 56
75711: PUSH
75712: LD_VAR 0 57
75716: PUSH
75717: LD_VAR 0 58
75721: PUSH
75722: EMPTY
75723: LIST
75724: LIST
75725: LIST
75726: LIST
75727: LIST
75728: LIST
75729: PUSH
75730: LD_VAR 0 4
75734: PUSH
75735: LD_INT 1
75737: PLUS
75738: ARRAY
75739: ST_TO_ADDR
75740: GO 75849
75742: LD_INT 31
75744: DOUBLE
75745: EQUAL
75746: IFTRUE 75792
75748: LD_INT 32
75750: DOUBLE
75751: EQUAL
75752: IFTRUE 75792
75754: LD_INT 33
75756: DOUBLE
75757: EQUAL
75758: IFTRUE 75792
75760: LD_INT 27
75762: DOUBLE
75763: EQUAL
75764: IFTRUE 75792
75766: LD_INT 26
75768: DOUBLE
75769: EQUAL
75770: IFTRUE 75792
75772: LD_INT 28
75774: DOUBLE
75775: EQUAL
75776: IFTRUE 75792
75778: LD_INT 29
75780: DOUBLE
75781: EQUAL
75782: IFTRUE 75792
75784: LD_INT 30
75786: DOUBLE
75787: EQUAL
75788: IFTRUE 75792
75790: GO 75848
75792: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
75793: LD_ADDR_VAR 0 9
75797: PUSH
75798: LD_VAR 0 59
75802: PUSH
75803: LD_VAR 0 60
75807: PUSH
75808: LD_VAR 0 61
75812: PUSH
75813: LD_VAR 0 62
75817: PUSH
75818: LD_VAR 0 63
75822: PUSH
75823: LD_VAR 0 64
75827: PUSH
75828: EMPTY
75829: LIST
75830: LIST
75831: LIST
75832: LIST
75833: LIST
75834: LIST
75835: PUSH
75836: LD_VAR 0 4
75840: PUSH
75841: LD_INT 1
75843: PLUS
75844: ARRAY
75845: ST_TO_ADDR
75846: GO 75849
75848: POP
// temp_list2 = [ ] ;
75849: LD_ADDR_VAR 0 10
75853: PUSH
75854: EMPTY
75855: ST_TO_ADDR
// for i in temp_list do
75856: LD_ADDR_VAR 0 8
75860: PUSH
75861: LD_VAR 0 9
75865: PUSH
75866: FOR_IN
75867: IFFALSE 75919
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
75869: LD_ADDR_VAR 0 10
75873: PUSH
75874: LD_VAR 0 10
75878: PUSH
75879: LD_VAR 0 8
75883: PUSH
75884: LD_INT 1
75886: ARRAY
75887: PUSH
75888: LD_VAR 0 2
75892: PLUS
75893: PUSH
75894: LD_VAR 0 8
75898: PUSH
75899: LD_INT 2
75901: ARRAY
75902: PUSH
75903: LD_VAR 0 3
75907: PLUS
75908: PUSH
75909: EMPTY
75910: LIST
75911: LIST
75912: PUSH
75913: EMPTY
75914: LIST
75915: ADD
75916: ST_TO_ADDR
75917: GO 75866
75919: POP
75920: POP
// result = temp_list2 ;
75921: LD_ADDR_VAR 0 7
75925: PUSH
75926: LD_VAR 0 10
75930: ST_TO_ADDR
// end ;
75931: LD_VAR 0 7
75935: RET
// export function EnemyInRange ( unit , dist ) ; begin
75936: LD_INT 0
75938: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75939: LD_ADDR_VAR 0 3
75943: PUSH
75944: LD_VAR 0 1
75948: PPUSH
75949: CALL_OW 255
75953: PPUSH
75954: LD_VAR 0 1
75958: PPUSH
75959: CALL_OW 250
75963: PPUSH
75964: LD_VAR 0 1
75968: PPUSH
75969: CALL_OW 251
75973: PPUSH
75974: LD_VAR 0 2
75978: PPUSH
75979: CALL 50040 0 4
75983: PUSH
75984: LD_INT 4
75986: ARRAY
75987: ST_TO_ADDR
// end ;
75988: LD_VAR 0 3
75992: RET
// export function PlayerSeeMe ( unit ) ; begin
75993: LD_INT 0
75995: PPUSH
// result := See ( your_side , unit ) ;
75996: LD_ADDR_VAR 0 2
76000: PUSH
76001: LD_OWVAR 2
76005: PPUSH
76006: LD_VAR 0 1
76010: PPUSH
76011: CALL_OW 292
76015: ST_TO_ADDR
// end ;
76016: LD_VAR 0 2
76020: RET
// export function ReverseDir ( unit ) ; begin
76021: LD_INT 0
76023: PPUSH
// if not unit then
76024: LD_VAR 0 1
76028: NOT
76029: IFFALSE 76033
// exit ;
76031: GO 76056
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
76033: LD_ADDR_VAR 0 2
76037: PUSH
76038: LD_VAR 0 1
76042: PPUSH
76043: CALL_OW 254
76047: PUSH
76048: LD_INT 3
76050: PLUS
76051: PUSH
76052: LD_INT 6
76054: MOD
76055: ST_TO_ADDR
// end ;
76056: LD_VAR 0 2
76060: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
76061: LD_INT 0
76063: PPUSH
76064: PPUSH
76065: PPUSH
76066: PPUSH
76067: PPUSH
// if not hexes then
76068: LD_VAR 0 2
76072: NOT
76073: IFFALSE 76077
// exit ;
76075: GO 76225
// dist := 9999 ;
76077: LD_ADDR_VAR 0 5
76081: PUSH
76082: LD_INT 9999
76084: ST_TO_ADDR
// for i = 1 to hexes do
76085: LD_ADDR_VAR 0 4
76089: PUSH
76090: DOUBLE
76091: LD_INT 1
76093: DEC
76094: ST_TO_ADDR
76095: LD_VAR 0 2
76099: PUSH
76100: FOR_TO
76101: IFFALSE 76213
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
76103: LD_VAR 0 1
76107: PPUSH
76108: LD_VAR 0 2
76112: PUSH
76113: LD_VAR 0 4
76117: ARRAY
76118: PUSH
76119: LD_INT 1
76121: ARRAY
76122: PPUSH
76123: LD_VAR 0 2
76127: PUSH
76128: LD_VAR 0 4
76132: ARRAY
76133: PUSH
76134: LD_INT 2
76136: ARRAY
76137: PPUSH
76138: CALL_OW 297
76142: PUSH
76143: LD_VAR 0 5
76147: LESS
76148: IFFALSE 76211
// begin hex := hexes [ i ] ;
76150: LD_ADDR_VAR 0 7
76154: PUSH
76155: LD_VAR 0 2
76159: PUSH
76160: LD_VAR 0 4
76164: ARRAY
76165: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
76166: LD_ADDR_VAR 0 5
76170: PUSH
76171: LD_VAR 0 1
76175: PPUSH
76176: LD_VAR 0 2
76180: PUSH
76181: LD_VAR 0 4
76185: ARRAY
76186: PUSH
76187: LD_INT 1
76189: ARRAY
76190: PPUSH
76191: LD_VAR 0 2
76195: PUSH
76196: LD_VAR 0 4
76200: ARRAY
76201: PUSH
76202: LD_INT 2
76204: ARRAY
76205: PPUSH
76206: CALL_OW 297
76210: ST_TO_ADDR
// end ; end ;
76211: GO 76100
76213: POP
76214: POP
// result := hex ;
76215: LD_ADDR_VAR 0 3
76219: PUSH
76220: LD_VAR 0 7
76224: ST_TO_ADDR
// end ;
76225: LD_VAR 0 3
76229: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
76230: LD_INT 0
76232: PPUSH
76233: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
76234: LD_VAR 0 1
76238: NOT
76239: PUSH
76240: LD_VAR 0 1
76244: PUSH
76245: LD_INT 21
76247: PUSH
76248: LD_INT 2
76250: PUSH
76251: EMPTY
76252: LIST
76253: LIST
76254: PUSH
76255: LD_INT 23
76257: PUSH
76258: LD_INT 2
76260: PUSH
76261: EMPTY
76262: LIST
76263: LIST
76264: PUSH
76265: EMPTY
76266: LIST
76267: LIST
76268: PPUSH
76269: CALL_OW 69
76273: IN
76274: NOT
76275: OR
76276: IFFALSE 76280
// exit ;
76278: GO 76327
// for i = 1 to 3 do
76280: LD_ADDR_VAR 0 3
76284: PUSH
76285: DOUBLE
76286: LD_INT 1
76288: DEC
76289: ST_TO_ADDR
76290: LD_INT 3
76292: PUSH
76293: FOR_TO
76294: IFFALSE 76325
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
76296: LD_VAR 0 1
76300: PPUSH
76301: CALL_OW 250
76305: PPUSH
76306: LD_VAR 0 1
76310: PPUSH
76311: CALL_OW 251
76315: PPUSH
76316: LD_INT 1
76318: PPUSH
76319: CALL_OW 453
76323: GO 76293
76325: POP
76326: POP
// end ;
76327: LD_VAR 0 2
76331: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
76332: LD_INT 0
76334: PPUSH
76335: PPUSH
76336: PPUSH
76337: PPUSH
76338: PPUSH
76339: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
76340: LD_VAR 0 1
76344: NOT
76345: PUSH
76346: LD_VAR 0 2
76350: NOT
76351: OR
76352: PUSH
76353: LD_VAR 0 1
76357: PPUSH
76358: CALL_OW 314
76362: OR
76363: IFFALSE 76367
// exit ;
76365: GO 76808
// x := GetX ( enemy_unit ) ;
76367: LD_ADDR_VAR 0 7
76371: PUSH
76372: LD_VAR 0 2
76376: PPUSH
76377: CALL_OW 250
76381: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76382: LD_ADDR_VAR 0 8
76386: PUSH
76387: LD_VAR 0 2
76391: PPUSH
76392: CALL_OW 251
76396: ST_TO_ADDR
// if not x or not y then
76397: LD_VAR 0 7
76401: NOT
76402: PUSH
76403: LD_VAR 0 8
76407: NOT
76408: OR
76409: IFFALSE 76413
// exit ;
76411: GO 76808
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76413: LD_ADDR_VAR 0 6
76417: PUSH
76418: LD_VAR 0 7
76422: PPUSH
76423: LD_INT 0
76425: PPUSH
76426: LD_INT 4
76428: PPUSH
76429: CALL_OW 272
76433: PUSH
76434: LD_VAR 0 8
76438: PPUSH
76439: LD_INT 0
76441: PPUSH
76442: LD_INT 4
76444: PPUSH
76445: CALL_OW 273
76449: PUSH
76450: EMPTY
76451: LIST
76452: LIST
76453: PUSH
76454: LD_VAR 0 7
76458: PPUSH
76459: LD_INT 1
76461: PPUSH
76462: LD_INT 4
76464: PPUSH
76465: CALL_OW 272
76469: PUSH
76470: LD_VAR 0 8
76474: PPUSH
76475: LD_INT 1
76477: PPUSH
76478: LD_INT 4
76480: PPUSH
76481: CALL_OW 273
76485: PUSH
76486: EMPTY
76487: LIST
76488: LIST
76489: PUSH
76490: LD_VAR 0 7
76494: PPUSH
76495: LD_INT 2
76497: PPUSH
76498: LD_INT 4
76500: PPUSH
76501: CALL_OW 272
76505: PUSH
76506: LD_VAR 0 8
76510: PPUSH
76511: LD_INT 2
76513: PPUSH
76514: LD_INT 4
76516: PPUSH
76517: CALL_OW 273
76521: PUSH
76522: EMPTY
76523: LIST
76524: LIST
76525: PUSH
76526: LD_VAR 0 7
76530: PPUSH
76531: LD_INT 3
76533: PPUSH
76534: LD_INT 4
76536: PPUSH
76537: CALL_OW 272
76541: PUSH
76542: LD_VAR 0 8
76546: PPUSH
76547: LD_INT 3
76549: PPUSH
76550: LD_INT 4
76552: PPUSH
76553: CALL_OW 273
76557: PUSH
76558: EMPTY
76559: LIST
76560: LIST
76561: PUSH
76562: LD_VAR 0 7
76566: PPUSH
76567: LD_INT 4
76569: PPUSH
76570: LD_INT 4
76572: PPUSH
76573: CALL_OW 272
76577: PUSH
76578: LD_VAR 0 8
76582: PPUSH
76583: LD_INT 4
76585: PPUSH
76586: LD_INT 4
76588: PPUSH
76589: CALL_OW 273
76593: PUSH
76594: EMPTY
76595: LIST
76596: LIST
76597: PUSH
76598: LD_VAR 0 7
76602: PPUSH
76603: LD_INT 5
76605: PPUSH
76606: LD_INT 4
76608: PPUSH
76609: CALL_OW 272
76613: PUSH
76614: LD_VAR 0 8
76618: PPUSH
76619: LD_INT 5
76621: PPUSH
76622: LD_INT 4
76624: PPUSH
76625: CALL_OW 273
76629: PUSH
76630: EMPTY
76631: LIST
76632: LIST
76633: PUSH
76634: EMPTY
76635: LIST
76636: LIST
76637: LIST
76638: LIST
76639: LIST
76640: LIST
76641: ST_TO_ADDR
// for i = tmp downto 1 do
76642: LD_ADDR_VAR 0 4
76646: PUSH
76647: DOUBLE
76648: LD_VAR 0 6
76652: INC
76653: ST_TO_ADDR
76654: LD_INT 1
76656: PUSH
76657: FOR_DOWNTO
76658: IFFALSE 76759
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
76660: LD_VAR 0 6
76664: PUSH
76665: LD_VAR 0 4
76669: ARRAY
76670: PUSH
76671: LD_INT 1
76673: ARRAY
76674: PPUSH
76675: LD_VAR 0 6
76679: PUSH
76680: LD_VAR 0 4
76684: ARRAY
76685: PUSH
76686: LD_INT 2
76688: ARRAY
76689: PPUSH
76690: CALL_OW 488
76694: NOT
76695: PUSH
76696: LD_VAR 0 6
76700: PUSH
76701: LD_VAR 0 4
76705: ARRAY
76706: PUSH
76707: LD_INT 1
76709: ARRAY
76710: PPUSH
76711: LD_VAR 0 6
76715: PUSH
76716: LD_VAR 0 4
76720: ARRAY
76721: PUSH
76722: LD_INT 2
76724: ARRAY
76725: PPUSH
76726: CALL_OW 428
76730: PUSH
76731: LD_INT 0
76733: NONEQUAL
76734: OR
76735: IFFALSE 76757
// tmp := Delete ( tmp , i ) ;
76737: LD_ADDR_VAR 0 6
76741: PUSH
76742: LD_VAR 0 6
76746: PPUSH
76747: LD_VAR 0 4
76751: PPUSH
76752: CALL_OW 3
76756: ST_TO_ADDR
76757: GO 76657
76759: POP
76760: POP
// j := GetClosestHex ( unit , tmp ) ;
76761: LD_ADDR_VAR 0 5
76765: PUSH
76766: LD_VAR 0 1
76770: PPUSH
76771: LD_VAR 0 6
76775: PPUSH
76776: CALL 76061 0 2
76780: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
76781: LD_VAR 0 1
76785: PPUSH
76786: LD_VAR 0 5
76790: PUSH
76791: LD_INT 1
76793: ARRAY
76794: PPUSH
76795: LD_VAR 0 5
76799: PUSH
76800: LD_INT 2
76802: ARRAY
76803: PPUSH
76804: CALL_OW 111
// end ;
76808: LD_VAR 0 3
76812: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76813: LD_INT 0
76815: PPUSH
76816: PPUSH
76817: PPUSH
// uc_side = 0 ;
76818: LD_ADDR_OWVAR 20
76822: PUSH
76823: LD_INT 0
76825: ST_TO_ADDR
// uc_nation = 0 ;
76826: LD_ADDR_OWVAR 21
76830: PUSH
76831: LD_INT 0
76833: ST_TO_ADDR
// InitHc_All ( ) ;
76834: CALL_OW 584
// InitVc ;
76838: CALL_OW 20
// if mastodonts then
76842: LD_VAR 0 6
76846: IFFALSE 76913
// for i = 1 to mastodonts do
76848: LD_ADDR_VAR 0 11
76852: PUSH
76853: DOUBLE
76854: LD_INT 1
76856: DEC
76857: ST_TO_ADDR
76858: LD_VAR 0 6
76862: PUSH
76863: FOR_TO
76864: IFFALSE 76911
// begin vc_chassis := 31 ;
76866: LD_ADDR_OWVAR 37
76870: PUSH
76871: LD_INT 31
76873: ST_TO_ADDR
// vc_control := control_rider ;
76874: LD_ADDR_OWVAR 38
76878: PUSH
76879: LD_INT 4
76881: ST_TO_ADDR
// animal := CreateVehicle ;
76882: LD_ADDR_VAR 0 12
76886: PUSH
76887: CALL_OW 45
76891: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76892: LD_VAR 0 12
76896: PPUSH
76897: LD_VAR 0 8
76901: PPUSH
76902: LD_INT 0
76904: PPUSH
76905: CALL 79101 0 3
// end ;
76909: GO 76863
76911: POP
76912: POP
// if horses then
76913: LD_VAR 0 5
76917: IFFALSE 76984
// for i = 1 to horses do
76919: LD_ADDR_VAR 0 11
76923: PUSH
76924: DOUBLE
76925: LD_INT 1
76927: DEC
76928: ST_TO_ADDR
76929: LD_VAR 0 5
76933: PUSH
76934: FOR_TO
76935: IFFALSE 76982
// begin hc_class := 21 ;
76937: LD_ADDR_OWVAR 28
76941: PUSH
76942: LD_INT 21
76944: ST_TO_ADDR
// hc_gallery :=  ;
76945: LD_ADDR_OWVAR 33
76949: PUSH
76950: LD_STRING 
76952: ST_TO_ADDR
// animal := CreateHuman ;
76953: LD_ADDR_VAR 0 12
76957: PUSH
76958: CALL_OW 44
76962: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76963: LD_VAR 0 12
76967: PPUSH
76968: LD_VAR 0 8
76972: PPUSH
76973: LD_INT 0
76975: PPUSH
76976: CALL 79101 0 3
// end ;
76980: GO 76934
76982: POP
76983: POP
// if birds then
76984: LD_VAR 0 1
76988: IFFALSE 77055
// for i = 1 to birds do
76990: LD_ADDR_VAR 0 11
76994: PUSH
76995: DOUBLE
76996: LD_INT 1
76998: DEC
76999: ST_TO_ADDR
77000: LD_VAR 0 1
77004: PUSH
77005: FOR_TO
77006: IFFALSE 77053
// begin hc_class = 18 ;
77008: LD_ADDR_OWVAR 28
77012: PUSH
77013: LD_INT 18
77015: ST_TO_ADDR
// hc_gallery =  ;
77016: LD_ADDR_OWVAR 33
77020: PUSH
77021: LD_STRING 
77023: ST_TO_ADDR
// animal := CreateHuman ;
77024: LD_ADDR_VAR 0 12
77028: PUSH
77029: CALL_OW 44
77033: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77034: LD_VAR 0 12
77038: PPUSH
77039: LD_VAR 0 8
77043: PPUSH
77044: LD_INT 0
77046: PPUSH
77047: CALL 79101 0 3
// end ;
77051: GO 77005
77053: POP
77054: POP
// if tigers then
77055: LD_VAR 0 2
77059: IFFALSE 77143
// for i = 1 to tigers do
77061: LD_ADDR_VAR 0 11
77065: PUSH
77066: DOUBLE
77067: LD_INT 1
77069: DEC
77070: ST_TO_ADDR
77071: LD_VAR 0 2
77075: PUSH
77076: FOR_TO
77077: IFFALSE 77141
// begin hc_class = class_tiger ;
77079: LD_ADDR_OWVAR 28
77083: PUSH
77084: LD_INT 14
77086: ST_TO_ADDR
// hc_gallery =  ;
77087: LD_ADDR_OWVAR 33
77091: PUSH
77092: LD_STRING 
77094: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77095: LD_ADDR_OWVAR 35
77099: PUSH
77100: LD_INT 7
77102: NEG
77103: PPUSH
77104: LD_INT 7
77106: PPUSH
77107: CALL_OW 12
77111: ST_TO_ADDR
// animal := CreateHuman ;
77112: LD_ADDR_VAR 0 12
77116: PUSH
77117: CALL_OW 44
77121: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77122: LD_VAR 0 12
77126: PPUSH
77127: LD_VAR 0 8
77131: PPUSH
77132: LD_INT 0
77134: PPUSH
77135: CALL 79101 0 3
// end ;
77139: GO 77076
77141: POP
77142: POP
// if apemans then
77143: LD_VAR 0 3
77147: IFFALSE 77270
// for i = 1 to apemans do
77149: LD_ADDR_VAR 0 11
77153: PUSH
77154: DOUBLE
77155: LD_INT 1
77157: DEC
77158: ST_TO_ADDR
77159: LD_VAR 0 3
77163: PUSH
77164: FOR_TO
77165: IFFALSE 77268
// begin hc_class = class_apeman ;
77167: LD_ADDR_OWVAR 28
77171: PUSH
77172: LD_INT 12
77174: ST_TO_ADDR
// hc_gallery =  ;
77175: LD_ADDR_OWVAR 33
77179: PUSH
77180: LD_STRING 
77182: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
77183: LD_ADDR_OWVAR 35
77187: PUSH
77188: LD_INT 5
77190: NEG
77191: PPUSH
77192: LD_INT 5
77194: PPUSH
77195: CALL_OW 12
77199: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
77200: LD_ADDR_OWVAR 31
77204: PUSH
77205: LD_INT 1
77207: PPUSH
77208: LD_INT 3
77210: PPUSH
77211: CALL_OW 12
77215: PUSH
77216: LD_INT 1
77218: PPUSH
77219: LD_INT 3
77221: PPUSH
77222: CALL_OW 12
77226: PUSH
77227: LD_INT 0
77229: PUSH
77230: LD_INT 0
77232: PUSH
77233: EMPTY
77234: LIST
77235: LIST
77236: LIST
77237: LIST
77238: ST_TO_ADDR
// animal := CreateHuman ;
77239: LD_ADDR_VAR 0 12
77243: PUSH
77244: CALL_OW 44
77248: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77249: LD_VAR 0 12
77253: PPUSH
77254: LD_VAR 0 8
77258: PPUSH
77259: LD_INT 0
77261: PPUSH
77262: CALL 79101 0 3
// end ;
77266: GO 77164
77268: POP
77269: POP
// if enchidnas then
77270: LD_VAR 0 4
77274: IFFALSE 77341
// for i = 1 to enchidnas do
77276: LD_ADDR_VAR 0 11
77280: PUSH
77281: DOUBLE
77282: LD_INT 1
77284: DEC
77285: ST_TO_ADDR
77286: LD_VAR 0 4
77290: PUSH
77291: FOR_TO
77292: IFFALSE 77339
// begin hc_class = 13 ;
77294: LD_ADDR_OWVAR 28
77298: PUSH
77299: LD_INT 13
77301: ST_TO_ADDR
// hc_gallery =  ;
77302: LD_ADDR_OWVAR 33
77306: PUSH
77307: LD_STRING 
77309: ST_TO_ADDR
// animal := CreateHuman ;
77310: LD_ADDR_VAR 0 12
77314: PUSH
77315: CALL_OW 44
77319: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77320: LD_VAR 0 12
77324: PPUSH
77325: LD_VAR 0 8
77329: PPUSH
77330: LD_INT 0
77332: PPUSH
77333: CALL 79101 0 3
// end ;
77337: GO 77291
77339: POP
77340: POP
// if fishes then
77341: LD_VAR 0 7
77345: IFFALSE 77412
// for i = 1 to fishes do
77347: LD_ADDR_VAR 0 11
77351: PUSH
77352: DOUBLE
77353: LD_INT 1
77355: DEC
77356: ST_TO_ADDR
77357: LD_VAR 0 7
77361: PUSH
77362: FOR_TO
77363: IFFALSE 77410
// begin hc_class = 20 ;
77365: LD_ADDR_OWVAR 28
77369: PUSH
77370: LD_INT 20
77372: ST_TO_ADDR
// hc_gallery =  ;
77373: LD_ADDR_OWVAR 33
77377: PUSH
77378: LD_STRING 
77380: ST_TO_ADDR
// animal := CreateHuman ;
77381: LD_ADDR_VAR 0 12
77385: PUSH
77386: CALL_OW 44
77390: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77391: LD_VAR 0 12
77395: PPUSH
77396: LD_VAR 0 9
77400: PPUSH
77401: LD_INT 0
77403: PPUSH
77404: CALL 79101 0 3
// end ;
77408: GO 77362
77410: POP
77411: POP
// end ;
77412: LD_VAR 0 10
77416: RET
// export function WantHeal ( sci , unit ) ; begin
77417: LD_INT 0
77419: PPUSH
// if GetTaskList ( sci ) > 0 then
77420: LD_VAR 0 1
77424: PPUSH
77425: CALL_OW 437
77429: PUSH
77430: LD_INT 0
77432: GREATER
77433: IFFALSE 77503
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77435: LD_VAR 0 1
77439: PPUSH
77440: CALL_OW 437
77444: PUSH
77445: LD_INT 1
77447: ARRAY
77448: PUSH
77449: LD_INT 1
77451: ARRAY
77452: PUSH
77453: LD_STRING l
77455: EQUAL
77456: PUSH
77457: LD_VAR 0 1
77461: PPUSH
77462: CALL_OW 437
77466: PUSH
77467: LD_INT 1
77469: ARRAY
77470: PUSH
77471: LD_INT 4
77473: ARRAY
77474: PUSH
77475: LD_VAR 0 2
77479: EQUAL
77480: AND
77481: IFFALSE 77493
// result := true else
77483: LD_ADDR_VAR 0 3
77487: PUSH
77488: LD_INT 1
77490: ST_TO_ADDR
77491: GO 77501
// result := false ;
77493: LD_ADDR_VAR 0 3
77497: PUSH
77498: LD_INT 0
77500: ST_TO_ADDR
// end else
77501: GO 77511
// result := false ;
77503: LD_ADDR_VAR 0 3
77507: PUSH
77508: LD_INT 0
77510: ST_TO_ADDR
// end ;
77511: LD_VAR 0 3
77515: RET
// export function HealTarget ( sci ) ; begin
77516: LD_INT 0
77518: PPUSH
// if not sci then
77519: LD_VAR 0 1
77523: NOT
77524: IFFALSE 77528
// exit ;
77526: GO 77593
// result := 0 ;
77528: LD_ADDR_VAR 0 2
77532: PUSH
77533: LD_INT 0
77535: ST_TO_ADDR
// if GetTaskList ( sci ) then
77536: LD_VAR 0 1
77540: PPUSH
77541: CALL_OW 437
77545: IFFALSE 77593
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77547: LD_VAR 0 1
77551: PPUSH
77552: CALL_OW 437
77556: PUSH
77557: LD_INT 1
77559: ARRAY
77560: PUSH
77561: LD_INT 1
77563: ARRAY
77564: PUSH
77565: LD_STRING l
77567: EQUAL
77568: IFFALSE 77593
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77570: LD_ADDR_VAR 0 2
77574: PUSH
77575: LD_VAR 0 1
77579: PPUSH
77580: CALL_OW 437
77584: PUSH
77585: LD_INT 1
77587: ARRAY
77588: PUSH
77589: LD_INT 4
77591: ARRAY
77592: ST_TO_ADDR
// end ;
77593: LD_VAR 0 2
77597: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77598: LD_INT 0
77600: PPUSH
77601: PPUSH
77602: PPUSH
77603: PPUSH
// if not base_units then
77604: LD_VAR 0 1
77608: NOT
77609: IFFALSE 77613
// exit ;
77611: GO 77700
// result := false ;
77613: LD_ADDR_VAR 0 2
77617: PUSH
77618: LD_INT 0
77620: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77621: LD_ADDR_VAR 0 5
77625: PUSH
77626: LD_VAR 0 1
77630: PPUSH
77631: LD_INT 21
77633: PUSH
77634: LD_INT 3
77636: PUSH
77637: EMPTY
77638: LIST
77639: LIST
77640: PPUSH
77641: CALL_OW 72
77645: ST_TO_ADDR
// if not tmp then
77646: LD_VAR 0 5
77650: NOT
77651: IFFALSE 77655
// exit ;
77653: GO 77700
// for i in tmp do
77655: LD_ADDR_VAR 0 3
77659: PUSH
77660: LD_VAR 0 5
77664: PUSH
77665: FOR_IN
77666: IFFALSE 77698
// begin result := EnemyInRange ( i , 22 ) ;
77668: LD_ADDR_VAR 0 2
77672: PUSH
77673: LD_VAR 0 3
77677: PPUSH
77678: LD_INT 22
77680: PPUSH
77681: CALL 75936 0 2
77685: ST_TO_ADDR
// if result then
77686: LD_VAR 0 2
77690: IFFALSE 77696
// exit ;
77692: POP
77693: POP
77694: GO 77700
// end ;
77696: GO 77665
77698: POP
77699: POP
// end ;
77700: LD_VAR 0 2
77704: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
77705: LD_INT 0
77707: PPUSH
77708: PPUSH
// if not units then
77709: LD_VAR 0 1
77713: NOT
77714: IFFALSE 77718
// exit ;
77716: GO 77788
// result := [ ] ;
77718: LD_ADDR_VAR 0 3
77722: PUSH
77723: EMPTY
77724: ST_TO_ADDR
// for i in units do
77725: LD_ADDR_VAR 0 4
77729: PUSH
77730: LD_VAR 0 1
77734: PUSH
77735: FOR_IN
77736: IFFALSE 77786
// if GetTag ( i ) = tag then
77738: LD_VAR 0 4
77742: PPUSH
77743: CALL_OW 110
77747: PUSH
77748: LD_VAR 0 2
77752: EQUAL
77753: IFFALSE 77784
// result := Insert ( result , result + 1 , i ) ;
77755: LD_ADDR_VAR 0 3
77759: PUSH
77760: LD_VAR 0 3
77764: PPUSH
77765: LD_VAR 0 3
77769: PUSH
77770: LD_INT 1
77772: PLUS
77773: PPUSH
77774: LD_VAR 0 4
77778: PPUSH
77779: CALL_OW 2
77783: ST_TO_ADDR
77784: GO 77735
77786: POP
77787: POP
// end ;
77788: LD_VAR 0 3
77792: RET
// export function IsDriver ( un ) ; begin
77793: LD_INT 0
77795: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77796: LD_ADDR_VAR 0 2
77800: PUSH
77801: LD_VAR 0 1
77805: PUSH
77806: LD_INT 55
77808: PUSH
77809: EMPTY
77810: LIST
77811: PPUSH
77812: CALL_OW 69
77816: IN
77817: ST_TO_ADDR
// end ;
77818: LD_VAR 0 2
77822: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77823: LD_INT 0
77825: PPUSH
77826: PPUSH
// list := [ ] ;
77827: LD_ADDR_VAR 0 5
77831: PUSH
77832: EMPTY
77833: ST_TO_ADDR
// case d of 0 :
77834: LD_VAR 0 3
77838: PUSH
77839: LD_INT 0
77841: DOUBLE
77842: EQUAL
77843: IFTRUE 77847
77845: GO 77980
77847: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77848: LD_ADDR_VAR 0 5
77852: PUSH
77853: LD_VAR 0 1
77857: PUSH
77858: LD_INT 4
77860: MINUS
77861: PUSH
77862: LD_VAR 0 2
77866: PUSH
77867: LD_INT 4
77869: MINUS
77870: PUSH
77871: LD_INT 2
77873: PUSH
77874: EMPTY
77875: LIST
77876: LIST
77877: LIST
77878: PUSH
77879: LD_VAR 0 1
77883: PUSH
77884: LD_INT 3
77886: MINUS
77887: PUSH
77888: LD_VAR 0 2
77892: PUSH
77893: LD_INT 1
77895: PUSH
77896: EMPTY
77897: LIST
77898: LIST
77899: LIST
77900: PUSH
77901: LD_VAR 0 1
77905: PUSH
77906: LD_INT 4
77908: PLUS
77909: PUSH
77910: LD_VAR 0 2
77914: PUSH
77915: LD_INT 4
77917: PUSH
77918: EMPTY
77919: LIST
77920: LIST
77921: LIST
77922: PUSH
77923: LD_VAR 0 1
77927: PUSH
77928: LD_INT 3
77930: PLUS
77931: PUSH
77932: LD_VAR 0 2
77936: PUSH
77937: LD_INT 3
77939: PLUS
77940: PUSH
77941: LD_INT 5
77943: PUSH
77944: EMPTY
77945: LIST
77946: LIST
77947: LIST
77948: PUSH
77949: LD_VAR 0 1
77953: PUSH
77954: LD_VAR 0 2
77958: PUSH
77959: LD_INT 4
77961: PLUS
77962: PUSH
77963: LD_INT 0
77965: PUSH
77966: EMPTY
77967: LIST
77968: LIST
77969: LIST
77970: PUSH
77971: EMPTY
77972: LIST
77973: LIST
77974: LIST
77975: LIST
77976: LIST
77977: ST_TO_ADDR
// end ; 1 :
77978: GO 78678
77980: LD_INT 1
77982: DOUBLE
77983: EQUAL
77984: IFTRUE 77988
77986: GO 78121
77988: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77989: LD_ADDR_VAR 0 5
77993: PUSH
77994: LD_VAR 0 1
77998: PUSH
77999: LD_VAR 0 2
78003: PUSH
78004: LD_INT 4
78006: MINUS
78007: PUSH
78008: LD_INT 3
78010: PUSH
78011: EMPTY
78012: LIST
78013: LIST
78014: LIST
78015: PUSH
78016: LD_VAR 0 1
78020: PUSH
78021: LD_INT 3
78023: MINUS
78024: PUSH
78025: LD_VAR 0 2
78029: PUSH
78030: LD_INT 3
78032: MINUS
78033: PUSH
78034: LD_INT 2
78036: PUSH
78037: EMPTY
78038: LIST
78039: LIST
78040: LIST
78041: PUSH
78042: LD_VAR 0 1
78046: PUSH
78047: LD_INT 4
78049: MINUS
78050: PUSH
78051: LD_VAR 0 2
78055: PUSH
78056: LD_INT 1
78058: PUSH
78059: EMPTY
78060: LIST
78061: LIST
78062: LIST
78063: PUSH
78064: LD_VAR 0 1
78068: PUSH
78069: LD_VAR 0 2
78073: PUSH
78074: LD_INT 3
78076: PLUS
78077: PUSH
78078: LD_INT 0
78080: PUSH
78081: EMPTY
78082: LIST
78083: LIST
78084: LIST
78085: PUSH
78086: LD_VAR 0 1
78090: PUSH
78091: LD_INT 4
78093: PLUS
78094: PUSH
78095: LD_VAR 0 2
78099: PUSH
78100: LD_INT 4
78102: PLUS
78103: PUSH
78104: LD_INT 5
78106: PUSH
78107: EMPTY
78108: LIST
78109: LIST
78110: LIST
78111: PUSH
78112: EMPTY
78113: LIST
78114: LIST
78115: LIST
78116: LIST
78117: LIST
78118: ST_TO_ADDR
// end ; 2 :
78119: GO 78678
78121: LD_INT 2
78123: DOUBLE
78124: EQUAL
78125: IFTRUE 78129
78127: GO 78258
78129: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78130: LD_ADDR_VAR 0 5
78134: PUSH
78135: LD_VAR 0 1
78139: PUSH
78140: LD_VAR 0 2
78144: PUSH
78145: LD_INT 3
78147: MINUS
78148: PUSH
78149: LD_INT 3
78151: PUSH
78152: EMPTY
78153: LIST
78154: LIST
78155: LIST
78156: PUSH
78157: LD_VAR 0 1
78161: PUSH
78162: LD_INT 4
78164: PLUS
78165: PUSH
78166: LD_VAR 0 2
78170: PUSH
78171: LD_INT 4
78173: PUSH
78174: EMPTY
78175: LIST
78176: LIST
78177: LIST
78178: PUSH
78179: LD_VAR 0 1
78183: PUSH
78184: LD_VAR 0 2
78188: PUSH
78189: LD_INT 4
78191: PLUS
78192: PUSH
78193: LD_INT 0
78195: PUSH
78196: EMPTY
78197: LIST
78198: LIST
78199: LIST
78200: PUSH
78201: LD_VAR 0 1
78205: PUSH
78206: LD_INT 3
78208: MINUS
78209: PUSH
78210: LD_VAR 0 2
78214: PUSH
78215: LD_INT 1
78217: PUSH
78218: EMPTY
78219: LIST
78220: LIST
78221: LIST
78222: PUSH
78223: LD_VAR 0 1
78227: PUSH
78228: LD_INT 4
78230: MINUS
78231: PUSH
78232: LD_VAR 0 2
78236: PUSH
78237: LD_INT 4
78239: MINUS
78240: PUSH
78241: LD_INT 2
78243: PUSH
78244: EMPTY
78245: LIST
78246: LIST
78247: LIST
78248: PUSH
78249: EMPTY
78250: LIST
78251: LIST
78252: LIST
78253: LIST
78254: LIST
78255: ST_TO_ADDR
// end ; 3 :
78256: GO 78678
78258: LD_INT 3
78260: DOUBLE
78261: EQUAL
78262: IFTRUE 78266
78264: GO 78399
78266: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78267: LD_ADDR_VAR 0 5
78271: PUSH
78272: LD_VAR 0 1
78276: PUSH
78277: LD_INT 3
78279: PLUS
78280: PUSH
78281: LD_VAR 0 2
78285: PUSH
78286: LD_INT 4
78288: PUSH
78289: EMPTY
78290: LIST
78291: LIST
78292: LIST
78293: PUSH
78294: LD_VAR 0 1
78298: PUSH
78299: LD_INT 4
78301: PLUS
78302: PUSH
78303: LD_VAR 0 2
78307: PUSH
78308: LD_INT 4
78310: PLUS
78311: PUSH
78312: LD_INT 5
78314: PUSH
78315: EMPTY
78316: LIST
78317: LIST
78318: LIST
78319: PUSH
78320: LD_VAR 0 1
78324: PUSH
78325: LD_INT 4
78327: MINUS
78328: PUSH
78329: LD_VAR 0 2
78333: PUSH
78334: LD_INT 1
78336: PUSH
78337: EMPTY
78338: LIST
78339: LIST
78340: LIST
78341: PUSH
78342: LD_VAR 0 1
78346: PUSH
78347: LD_VAR 0 2
78351: PUSH
78352: LD_INT 4
78354: MINUS
78355: PUSH
78356: LD_INT 3
78358: PUSH
78359: EMPTY
78360: LIST
78361: LIST
78362: LIST
78363: PUSH
78364: LD_VAR 0 1
78368: PUSH
78369: LD_INT 3
78371: MINUS
78372: PUSH
78373: LD_VAR 0 2
78377: PUSH
78378: LD_INT 3
78380: MINUS
78381: PUSH
78382: LD_INT 2
78384: PUSH
78385: EMPTY
78386: LIST
78387: LIST
78388: LIST
78389: PUSH
78390: EMPTY
78391: LIST
78392: LIST
78393: LIST
78394: LIST
78395: LIST
78396: ST_TO_ADDR
// end ; 4 :
78397: GO 78678
78399: LD_INT 4
78401: DOUBLE
78402: EQUAL
78403: IFTRUE 78407
78405: GO 78540
78407: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78408: LD_ADDR_VAR 0 5
78412: PUSH
78413: LD_VAR 0 1
78417: PUSH
78418: LD_VAR 0 2
78422: PUSH
78423: LD_INT 4
78425: PLUS
78426: PUSH
78427: LD_INT 0
78429: PUSH
78430: EMPTY
78431: LIST
78432: LIST
78433: LIST
78434: PUSH
78435: LD_VAR 0 1
78439: PUSH
78440: LD_INT 3
78442: PLUS
78443: PUSH
78444: LD_VAR 0 2
78448: PUSH
78449: LD_INT 3
78451: PLUS
78452: PUSH
78453: LD_INT 5
78455: PUSH
78456: EMPTY
78457: LIST
78458: LIST
78459: LIST
78460: PUSH
78461: LD_VAR 0 1
78465: PUSH
78466: LD_INT 4
78468: PLUS
78469: PUSH
78470: LD_VAR 0 2
78474: PUSH
78475: LD_INT 4
78477: PUSH
78478: EMPTY
78479: LIST
78480: LIST
78481: LIST
78482: PUSH
78483: LD_VAR 0 1
78487: PUSH
78488: LD_VAR 0 2
78492: PUSH
78493: LD_INT 3
78495: MINUS
78496: PUSH
78497: LD_INT 3
78499: PUSH
78500: EMPTY
78501: LIST
78502: LIST
78503: LIST
78504: PUSH
78505: LD_VAR 0 1
78509: PUSH
78510: LD_INT 4
78512: MINUS
78513: PUSH
78514: LD_VAR 0 2
78518: PUSH
78519: LD_INT 4
78521: MINUS
78522: PUSH
78523: LD_INT 2
78525: PUSH
78526: EMPTY
78527: LIST
78528: LIST
78529: LIST
78530: PUSH
78531: EMPTY
78532: LIST
78533: LIST
78534: LIST
78535: LIST
78536: LIST
78537: ST_TO_ADDR
// end ; 5 :
78538: GO 78678
78540: LD_INT 5
78542: DOUBLE
78543: EQUAL
78544: IFTRUE 78548
78546: GO 78677
78548: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78549: LD_ADDR_VAR 0 5
78553: PUSH
78554: LD_VAR 0 1
78558: PUSH
78559: LD_INT 4
78561: MINUS
78562: PUSH
78563: LD_VAR 0 2
78567: PUSH
78568: LD_INT 1
78570: PUSH
78571: EMPTY
78572: LIST
78573: LIST
78574: LIST
78575: PUSH
78576: LD_VAR 0 1
78580: PUSH
78581: LD_VAR 0 2
78585: PUSH
78586: LD_INT 4
78588: MINUS
78589: PUSH
78590: LD_INT 3
78592: PUSH
78593: EMPTY
78594: LIST
78595: LIST
78596: LIST
78597: PUSH
78598: LD_VAR 0 1
78602: PUSH
78603: LD_INT 4
78605: PLUS
78606: PUSH
78607: LD_VAR 0 2
78611: PUSH
78612: LD_INT 4
78614: PLUS
78615: PUSH
78616: LD_INT 5
78618: PUSH
78619: EMPTY
78620: LIST
78621: LIST
78622: LIST
78623: PUSH
78624: LD_VAR 0 1
78628: PUSH
78629: LD_INT 3
78631: PLUS
78632: PUSH
78633: LD_VAR 0 2
78637: PUSH
78638: LD_INT 4
78640: PUSH
78641: EMPTY
78642: LIST
78643: LIST
78644: LIST
78645: PUSH
78646: LD_VAR 0 1
78650: PUSH
78651: LD_VAR 0 2
78655: PUSH
78656: LD_INT 3
78658: PLUS
78659: PUSH
78660: LD_INT 0
78662: PUSH
78663: EMPTY
78664: LIST
78665: LIST
78666: LIST
78667: PUSH
78668: EMPTY
78669: LIST
78670: LIST
78671: LIST
78672: LIST
78673: LIST
78674: ST_TO_ADDR
// end ; end ;
78675: GO 78678
78677: POP
// result := list ;
78678: LD_ADDR_VAR 0 4
78682: PUSH
78683: LD_VAR 0 5
78687: ST_TO_ADDR
// end ;
78688: LD_VAR 0 4
78692: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78693: LD_INT 0
78695: PPUSH
78696: PPUSH
78697: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78698: LD_VAR 0 1
78702: NOT
78703: PUSH
78704: LD_VAR 0 2
78708: PUSH
78709: LD_INT 1
78711: PUSH
78712: LD_INT 2
78714: PUSH
78715: LD_INT 3
78717: PUSH
78718: LD_INT 4
78720: PUSH
78721: EMPTY
78722: LIST
78723: LIST
78724: LIST
78725: LIST
78726: IN
78727: NOT
78728: OR
78729: IFFALSE 78733
// exit ;
78731: GO 78825
// tmp := [ ] ;
78733: LD_ADDR_VAR 0 5
78737: PUSH
78738: EMPTY
78739: ST_TO_ADDR
// for i in units do
78740: LD_ADDR_VAR 0 4
78744: PUSH
78745: LD_VAR 0 1
78749: PUSH
78750: FOR_IN
78751: IFFALSE 78794
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
78753: LD_ADDR_VAR 0 5
78757: PUSH
78758: LD_VAR 0 5
78762: PPUSH
78763: LD_VAR 0 5
78767: PUSH
78768: LD_INT 1
78770: PLUS
78771: PPUSH
78772: LD_VAR 0 4
78776: PPUSH
78777: LD_VAR 0 2
78781: PPUSH
78782: CALL_OW 259
78786: PPUSH
78787: CALL_OW 2
78791: ST_TO_ADDR
78792: GO 78750
78794: POP
78795: POP
// if not tmp then
78796: LD_VAR 0 5
78800: NOT
78801: IFFALSE 78805
// exit ;
78803: GO 78825
// result := SortListByListDesc ( units , tmp ) ;
78805: LD_ADDR_VAR 0 3
78809: PUSH
78810: LD_VAR 0 1
78814: PPUSH
78815: LD_VAR 0 5
78819: PPUSH
78820: CALL_OW 77
78824: ST_TO_ADDR
// end ;
78825: LD_VAR 0 3
78829: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78830: LD_INT 0
78832: PPUSH
78833: PPUSH
78834: PPUSH
// result := false ;
78835: LD_ADDR_VAR 0 3
78839: PUSH
78840: LD_INT 0
78842: ST_TO_ADDR
// x := GetX ( building ) ;
78843: LD_ADDR_VAR 0 4
78847: PUSH
78848: LD_VAR 0 2
78852: PPUSH
78853: CALL_OW 250
78857: ST_TO_ADDR
// y := GetY ( building ) ;
78858: LD_ADDR_VAR 0 5
78862: PUSH
78863: LD_VAR 0 2
78867: PPUSH
78868: CALL_OW 251
78872: ST_TO_ADDR
// if not building or not x or not y then
78873: LD_VAR 0 2
78877: NOT
78878: PUSH
78879: LD_VAR 0 4
78883: NOT
78884: OR
78885: PUSH
78886: LD_VAR 0 5
78890: NOT
78891: OR
78892: IFFALSE 78896
// exit ;
78894: GO 78988
// if GetTaskList ( unit ) then
78896: LD_VAR 0 1
78900: PPUSH
78901: CALL_OW 437
78905: IFFALSE 78988
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78907: LD_STRING e
78909: PUSH
78910: LD_VAR 0 1
78914: PPUSH
78915: CALL_OW 437
78919: PUSH
78920: LD_INT 1
78922: ARRAY
78923: PUSH
78924: LD_INT 1
78926: ARRAY
78927: EQUAL
78928: PUSH
78929: LD_VAR 0 4
78933: PUSH
78934: LD_VAR 0 1
78938: PPUSH
78939: CALL_OW 437
78943: PUSH
78944: LD_INT 1
78946: ARRAY
78947: PUSH
78948: LD_INT 2
78950: ARRAY
78951: EQUAL
78952: AND
78953: PUSH
78954: LD_VAR 0 5
78958: PUSH
78959: LD_VAR 0 1
78963: PPUSH
78964: CALL_OW 437
78968: PUSH
78969: LD_INT 1
78971: ARRAY
78972: PUSH
78973: LD_INT 3
78975: ARRAY
78976: EQUAL
78977: AND
78978: IFFALSE 78988
// result := true end ;
78980: LD_ADDR_VAR 0 3
78984: PUSH
78985: LD_INT 1
78987: ST_TO_ADDR
// end ;
78988: LD_VAR 0 3
78992: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78993: LD_INT 0
78995: PPUSH
// result := false ;
78996: LD_ADDR_VAR 0 4
79000: PUSH
79001: LD_INT 0
79003: ST_TO_ADDR
// if GetTaskList ( unit ) then
79004: LD_VAR 0 1
79008: PPUSH
79009: CALL_OW 437
79013: IFFALSE 79096
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79015: LD_STRING M
79017: PUSH
79018: LD_VAR 0 1
79022: PPUSH
79023: CALL_OW 437
79027: PUSH
79028: LD_INT 1
79030: ARRAY
79031: PUSH
79032: LD_INT 1
79034: ARRAY
79035: EQUAL
79036: PUSH
79037: LD_VAR 0 2
79041: PUSH
79042: LD_VAR 0 1
79046: PPUSH
79047: CALL_OW 437
79051: PUSH
79052: LD_INT 1
79054: ARRAY
79055: PUSH
79056: LD_INT 2
79058: ARRAY
79059: EQUAL
79060: AND
79061: PUSH
79062: LD_VAR 0 3
79066: PUSH
79067: LD_VAR 0 1
79071: PPUSH
79072: CALL_OW 437
79076: PUSH
79077: LD_INT 1
79079: ARRAY
79080: PUSH
79081: LD_INT 3
79083: ARRAY
79084: EQUAL
79085: AND
79086: IFFALSE 79096
// result := true ;
79088: LD_ADDR_VAR 0 4
79092: PUSH
79093: LD_INT 1
79095: ST_TO_ADDR
// end ; end ;
79096: LD_VAR 0 4
79100: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79101: LD_INT 0
79103: PPUSH
79104: PPUSH
79105: PPUSH
79106: PPUSH
// if not unit or not area then
79107: LD_VAR 0 1
79111: NOT
79112: PUSH
79113: LD_VAR 0 2
79117: NOT
79118: OR
79119: IFFALSE 79123
// exit ;
79121: GO 79287
// tmp := AreaToList ( area , i ) ;
79123: LD_ADDR_VAR 0 6
79127: PUSH
79128: LD_VAR 0 2
79132: PPUSH
79133: LD_VAR 0 5
79137: PPUSH
79138: CALL_OW 517
79142: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
79143: LD_ADDR_VAR 0 5
79147: PUSH
79148: DOUBLE
79149: LD_INT 1
79151: DEC
79152: ST_TO_ADDR
79153: LD_VAR 0 6
79157: PUSH
79158: LD_INT 1
79160: ARRAY
79161: PUSH
79162: FOR_TO
79163: IFFALSE 79285
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
79165: LD_ADDR_VAR 0 7
79169: PUSH
79170: LD_VAR 0 6
79174: PUSH
79175: LD_INT 1
79177: ARRAY
79178: PUSH
79179: LD_VAR 0 5
79183: ARRAY
79184: PUSH
79185: LD_VAR 0 6
79189: PUSH
79190: LD_INT 2
79192: ARRAY
79193: PUSH
79194: LD_VAR 0 5
79198: ARRAY
79199: PUSH
79200: EMPTY
79201: LIST
79202: LIST
79203: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
79204: LD_VAR 0 7
79208: PUSH
79209: LD_INT 1
79211: ARRAY
79212: PPUSH
79213: LD_VAR 0 7
79217: PUSH
79218: LD_INT 2
79220: ARRAY
79221: PPUSH
79222: CALL_OW 428
79226: PUSH
79227: LD_INT 0
79229: EQUAL
79230: IFFALSE 79283
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79232: LD_VAR 0 1
79236: PPUSH
79237: LD_VAR 0 7
79241: PUSH
79242: LD_INT 1
79244: ARRAY
79245: PPUSH
79246: LD_VAR 0 7
79250: PUSH
79251: LD_INT 2
79253: ARRAY
79254: PPUSH
79255: LD_VAR 0 3
79259: PPUSH
79260: CALL_OW 48
// result := IsPlaced ( unit ) ;
79264: LD_ADDR_VAR 0 4
79268: PUSH
79269: LD_VAR 0 1
79273: PPUSH
79274: CALL_OW 305
79278: ST_TO_ADDR
// exit ;
79279: POP
79280: POP
79281: GO 79287
// end ; end ;
79283: GO 79162
79285: POP
79286: POP
// end ;
79287: LD_VAR 0 4
79291: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79292: LD_INT 0
79294: PPUSH
79295: PPUSH
79296: PPUSH
// if not side or side > 8 then
79297: LD_VAR 0 1
79301: NOT
79302: PUSH
79303: LD_VAR 0 1
79307: PUSH
79308: LD_INT 8
79310: GREATER
79311: OR
79312: IFFALSE 79316
// exit ;
79314: GO 79503
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79316: LD_ADDR_VAR 0 4
79320: PUSH
79321: LD_INT 22
79323: PUSH
79324: LD_VAR 0 1
79328: PUSH
79329: EMPTY
79330: LIST
79331: LIST
79332: PUSH
79333: LD_INT 21
79335: PUSH
79336: LD_INT 3
79338: PUSH
79339: EMPTY
79340: LIST
79341: LIST
79342: PUSH
79343: EMPTY
79344: LIST
79345: LIST
79346: PPUSH
79347: CALL_OW 69
79351: ST_TO_ADDR
// if not tmp then
79352: LD_VAR 0 4
79356: NOT
79357: IFFALSE 79361
// exit ;
79359: GO 79503
// enable_addtolog := true ;
79361: LD_ADDR_OWVAR 81
79365: PUSH
79366: LD_INT 1
79368: ST_TO_ADDR
// AddToLog ( [ ) ;
79369: LD_STRING [
79371: PPUSH
79372: CALL_OW 561
// for i in tmp do
79376: LD_ADDR_VAR 0 3
79380: PUSH
79381: LD_VAR 0 4
79385: PUSH
79386: FOR_IN
79387: IFFALSE 79494
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79389: LD_STRING [
79391: PUSH
79392: LD_VAR 0 3
79396: PPUSH
79397: CALL_OW 266
79401: STR
79402: PUSH
79403: LD_STRING , 
79405: STR
79406: PUSH
79407: LD_VAR 0 3
79411: PPUSH
79412: CALL_OW 250
79416: STR
79417: PUSH
79418: LD_STRING , 
79420: STR
79421: PUSH
79422: LD_VAR 0 3
79426: PPUSH
79427: CALL_OW 251
79431: STR
79432: PUSH
79433: LD_STRING , 
79435: STR
79436: PUSH
79437: LD_VAR 0 3
79441: PPUSH
79442: CALL_OW 254
79446: STR
79447: PUSH
79448: LD_STRING , 
79450: STR
79451: PUSH
79452: LD_VAR 0 3
79456: PPUSH
79457: LD_INT 1
79459: PPUSH
79460: CALL_OW 268
79464: STR
79465: PUSH
79466: LD_STRING , 
79468: STR
79469: PUSH
79470: LD_VAR 0 3
79474: PPUSH
79475: LD_INT 2
79477: PPUSH
79478: CALL_OW 268
79482: STR
79483: PUSH
79484: LD_STRING ],
79486: STR
79487: PPUSH
79488: CALL_OW 561
// end ;
79492: GO 79386
79494: POP
79495: POP
// AddToLog ( ]; ) ;
79496: LD_STRING ];
79498: PPUSH
79499: CALL_OW 561
// end ;
79503: LD_VAR 0 2
79507: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79508: LD_INT 0
79510: PPUSH
79511: PPUSH
79512: PPUSH
79513: PPUSH
79514: PPUSH
// if not area or not rate or not max then
79515: LD_VAR 0 1
79519: NOT
79520: PUSH
79521: LD_VAR 0 2
79525: NOT
79526: OR
79527: PUSH
79528: LD_VAR 0 4
79532: NOT
79533: OR
79534: IFFALSE 79538
// exit ;
79536: GO 79730
// while 1 do
79538: LD_INT 1
79540: IFFALSE 79730
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79542: LD_ADDR_VAR 0 9
79546: PUSH
79547: LD_VAR 0 1
79551: PPUSH
79552: LD_INT 1
79554: PPUSH
79555: CALL_OW 287
79559: PUSH
79560: LD_INT 10
79562: MUL
79563: ST_TO_ADDR
// r := rate / 10 ;
79564: LD_ADDR_VAR 0 7
79568: PUSH
79569: LD_VAR 0 2
79573: PUSH
79574: LD_INT 10
79576: DIVREAL
79577: ST_TO_ADDR
// time := 1 1$00 ;
79578: LD_ADDR_VAR 0 8
79582: PUSH
79583: LD_INT 2100
79585: ST_TO_ADDR
// if amount < min then
79586: LD_VAR 0 9
79590: PUSH
79591: LD_VAR 0 3
79595: LESS
79596: IFFALSE 79614
// r := r * 2 else
79598: LD_ADDR_VAR 0 7
79602: PUSH
79603: LD_VAR 0 7
79607: PUSH
79608: LD_INT 2
79610: MUL
79611: ST_TO_ADDR
79612: GO 79640
// if amount > max then
79614: LD_VAR 0 9
79618: PUSH
79619: LD_VAR 0 4
79623: GREATER
79624: IFFALSE 79640
// r := r / 2 ;
79626: LD_ADDR_VAR 0 7
79630: PUSH
79631: LD_VAR 0 7
79635: PUSH
79636: LD_INT 2
79638: DIVREAL
79639: ST_TO_ADDR
// time := time / r ;
79640: LD_ADDR_VAR 0 8
79644: PUSH
79645: LD_VAR 0 8
79649: PUSH
79650: LD_VAR 0 7
79654: DIVREAL
79655: ST_TO_ADDR
// if time < 0 then
79656: LD_VAR 0 8
79660: PUSH
79661: LD_INT 0
79663: LESS
79664: IFFALSE 79681
// time := time * - 1 ;
79666: LD_ADDR_VAR 0 8
79670: PUSH
79671: LD_VAR 0 8
79675: PUSH
79676: LD_INT 1
79678: NEG
79679: MUL
79680: ST_TO_ADDR
// wait ( time ) ;
79681: LD_VAR 0 8
79685: PPUSH
79686: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
79690: LD_INT 35
79692: PPUSH
79693: LD_INT 875
79695: PPUSH
79696: CALL_OW 12
79700: PPUSH
79701: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79705: LD_INT 1
79707: PPUSH
79708: LD_INT 5
79710: PPUSH
79711: CALL_OW 12
79715: PPUSH
79716: LD_VAR 0 1
79720: PPUSH
79721: LD_INT 1
79723: PPUSH
79724: CALL_OW 55
// end ;
79728: GO 79538
// end ;
79730: LD_VAR 0 5
79734: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79735: LD_INT 0
79737: PPUSH
79738: PPUSH
79739: PPUSH
79740: PPUSH
79741: PPUSH
79742: PPUSH
79743: PPUSH
79744: PPUSH
// if not turrets or not factories then
79745: LD_VAR 0 1
79749: NOT
79750: PUSH
79751: LD_VAR 0 2
79755: NOT
79756: OR
79757: IFFALSE 79761
// exit ;
79759: GO 80068
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79761: LD_ADDR_VAR 0 10
79765: PUSH
79766: LD_INT 5
79768: PUSH
79769: LD_INT 6
79771: PUSH
79772: EMPTY
79773: LIST
79774: LIST
79775: PUSH
79776: LD_INT 2
79778: PUSH
79779: LD_INT 4
79781: PUSH
79782: EMPTY
79783: LIST
79784: LIST
79785: PUSH
79786: LD_INT 3
79788: PUSH
79789: LD_INT 5
79791: PUSH
79792: EMPTY
79793: LIST
79794: LIST
79795: PUSH
79796: EMPTY
79797: LIST
79798: LIST
79799: LIST
79800: PUSH
79801: LD_INT 24
79803: PUSH
79804: LD_INT 25
79806: PUSH
79807: EMPTY
79808: LIST
79809: LIST
79810: PUSH
79811: LD_INT 23
79813: PUSH
79814: LD_INT 27
79816: PUSH
79817: EMPTY
79818: LIST
79819: LIST
79820: PUSH
79821: EMPTY
79822: LIST
79823: LIST
79824: PUSH
79825: LD_INT 42
79827: PUSH
79828: LD_INT 43
79830: PUSH
79831: EMPTY
79832: LIST
79833: LIST
79834: PUSH
79835: LD_INT 44
79837: PUSH
79838: LD_INT 46
79840: PUSH
79841: EMPTY
79842: LIST
79843: LIST
79844: PUSH
79845: LD_INT 45
79847: PUSH
79848: LD_INT 47
79850: PUSH
79851: EMPTY
79852: LIST
79853: LIST
79854: PUSH
79855: EMPTY
79856: LIST
79857: LIST
79858: LIST
79859: PUSH
79860: EMPTY
79861: LIST
79862: LIST
79863: LIST
79864: ST_TO_ADDR
// result := [ ] ;
79865: LD_ADDR_VAR 0 3
79869: PUSH
79870: EMPTY
79871: ST_TO_ADDR
// for i in turrets do
79872: LD_ADDR_VAR 0 4
79876: PUSH
79877: LD_VAR 0 1
79881: PUSH
79882: FOR_IN
79883: IFFALSE 80066
// begin nat := GetNation ( i ) ;
79885: LD_ADDR_VAR 0 7
79889: PUSH
79890: LD_VAR 0 4
79894: PPUSH
79895: CALL_OW 248
79899: ST_TO_ADDR
// weapon := 0 ;
79900: LD_ADDR_VAR 0 8
79904: PUSH
79905: LD_INT 0
79907: ST_TO_ADDR
// if not nat then
79908: LD_VAR 0 7
79912: NOT
79913: IFFALSE 79917
// continue ;
79915: GO 79882
// for j in list [ nat ] do
79917: LD_ADDR_VAR 0 5
79921: PUSH
79922: LD_VAR 0 10
79926: PUSH
79927: LD_VAR 0 7
79931: ARRAY
79932: PUSH
79933: FOR_IN
79934: IFFALSE 79975
// if GetBWeapon ( i ) = j [ 1 ] then
79936: LD_VAR 0 4
79940: PPUSH
79941: CALL_OW 269
79945: PUSH
79946: LD_VAR 0 5
79950: PUSH
79951: LD_INT 1
79953: ARRAY
79954: EQUAL
79955: IFFALSE 79973
// begin weapon := j [ 2 ] ;
79957: LD_ADDR_VAR 0 8
79961: PUSH
79962: LD_VAR 0 5
79966: PUSH
79967: LD_INT 2
79969: ARRAY
79970: ST_TO_ADDR
// break ;
79971: GO 79975
// end ;
79973: GO 79933
79975: POP
79976: POP
// if not weapon then
79977: LD_VAR 0 8
79981: NOT
79982: IFFALSE 79986
// continue ;
79984: GO 79882
// for k in factories do
79986: LD_ADDR_VAR 0 6
79990: PUSH
79991: LD_VAR 0 2
79995: PUSH
79996: FOR_IN
79997: IFFALSE 80062
// begin weapons := AvailableWeaponList ( k ) ;
79999: LD_ADDR_VAR 0 9
80003: PUSH
80004: LD_VAR 0 6
80008: PPUSH
80009: CALL_OW 478
80013: ST_TO_ADDR
// if not weapons then
80014: LD_VAR 0 9
80018: NOT
80019: IFFALSE 80023
// continue ;
80021: GO 79996
// if weapon in weapons then
80023: LD_VAR 0 8
80027: PUSH
80028: LD_VAR 0 9
80032: IN
80033: IFFALSE 80060
// begin result := [ i , weapon ] ;
80035: LD_ADDR_VAR 0 3
80039: PUSH
80040: LD_VAR 0 4
80044: PUSH
80045: LD_VAR 0 8
80049: PUSH
80050: EMPTY
80051: LIST
80052: LIST
80053: ST_TO_ADDR
// exit ;
80054: POP
80055: POP
80056: POP
80057: POP
80058: GO 80068
// end ; end ;
80060: GO 79996
80062: POP
80063: POP
// end ;
80064: GO 79882
80066: POP
80067: POP
// end ;
80068: LD_VAR 0 3
80072: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80073: LD_INT 0
80075: PPUSH
// if not side or side > 8 then
80076: LD_VAR 0 3
80080: NOT
80081: PUSH
80082: LD_VAR 0 3
80086: PUSH
80087: LD_INT 8
80089: GREATER
80090: OR
80091: IFFALSE 80095
// exit ;
80093: GO 80154
// if not range then
80095: LD_VAR 0 4
80099: NOT
80100: IFFALSE 80111
// range := - 12 ;
80102: LD_ADDR_VAR 0 4
80106: PUSH
80107: LD_INT 12
80109: NEG
80110: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80111: LD_VAR 0 1
80115: PPUSH
80116: LD_VAR 0 2
80120: PPUSH
80121: LD_VAR 0 3
80125: PPUSH
80126: LD_VAR 0 4
80130: PPUSH
80131: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
80135: LD_VAR 0 1
80139: PPUSH
80140: LD_VAR 0 2
80144: PPUSH
80145: LD_VAR 0 3
80149: PPUSH
80150: CALL_OW 331
// end ;
80154: LD_VAR 0 5
80158: RET
// export function Video ( mode ) ; begin
80159: LD_INT 0
80161: PPUSH
// ingame_video = mode ;
80162: LD_ADDR_OWVAR 52
80166: PUSH
80167: LD_VAR 0 1
80171: ST_TO_ADDR
// interface_hidden = mode ;
80172: LD_ADDR_OWVAR 54
80176: PUSH
80177: LD_VAR 0 1
80181: ST_TO_ADDR
// end ;
80182: LD_VAR 0 2
80186: RET
// export function Join ( array , element ) ; begin
80187: LD_INT 0
80189: PPUSH
// result := Replace ( array , array + 1 , element ) ;
80190: LD_ADDR_VAR 0 3
80194: PUSH
80195: LD_VAR 0 1
80199: PPUSH
80200: LD_VAR 0 1
80204: PUSH
80205: LD_INT 1
80207: PLUS
80208: PPUSH
80209: LD_VAR 0 2
80213: PPUSH
80214: CALL_OW 1
80218: ST_TO_ADDR
// end ;
80219: LD_VAR 0 3
80223: RET
// export function JoinUnion ( array , element ) ; begin
80224: LD_INT 0
80226: PPUSH
// result := array union element ;
80227: LD_ADDR_VAR 0 3
80231: PUSH
80232: LD_VAR 0 1
80236: PUSH
80237: LD_VAR 0 2
80241: UNION
80242: ST_TO_ADDR
// end ;
80243: LD_VAR 0 3
80247: RET
// export function GetBehemoths ( side ) ; begin
80248: LD_INT 0
80250: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
80251: LD_ADDR_VAR 0 2
80255: PUSH
80256: LD_INT 22
80258: PUSH
80259: LD_VAR 0 1
80263: PUSH
80264: EMPTY
80265: LIST
80266: LIST
80267: PUSH
80268: LD_INT 31
80270: PUSH
80271: LD_INT 25
80273: PUSH
80274: EMPTY
80275: LIST
80276: LIST
80277: PUSH
80278: EMPTY
80279: LIST
80280: LIST
80281: PPUSH
80282: CALL_OW 69
80286: ST_TO_ADDR
// end ;
80287: LD_VAR 0 2
80291: RET
// export function Shuffle ( array ) ; var i , index ; begin
80292: LD_INT 0
80294: PPUSH
80295: PPUSH
80296: PPUSH
// result := [ ] ;
80297: LD_ADDR_VAR 0 2
80301: PUSH
80302: EMPTY
80303: ST_TO_ADDR
// if not array then
80304: LD_VAR 0 1
80308: NOT
80309: IFFALSE 80313
// exit ;
80311: GO 80412
// Randomize ;
80313: CALL_OW 10
// for i = array downto 1 do
80317: LD_ADDR_VAR 0 3
80321: PUSH
80322: DOUBLE
80323: LD_VAR 0 1
80327: INC
80328: ST_TO_ADDR
80329: LD_INT 1
80331: PUSH
80332: FOR_DOWNTO
80333: IFFALSE 80410
// begin index := rand ( 1 , array ) ;
80335: LD_ADDR_VAR 0 4
80339: PUSH
80340: LD_INT 1
80342: PPUSH
80343: LD_VAR 0 1
80347: PPUSH
80348: CALL_OW 12
80352: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80353: LD_ADDR_VAR 0 2
80357: PUSH
80358: LD_VAR 0 2
80362: PPUSH
80363: LD_VAR 0 2
80367: PUSH
80368: LD_INT 1
80370: PLUS
80371: PPUSH
80372: LD_VAR 0 1
80376: PUSH
80377: LD_VAR 0 4
80381: ARRAY
80382: PPUSH
80383: CALL_OW 2
80387: ST_TO_ADDR
// array := Delete ( array , index ) ;
80388: LD_ADDR_VAR 0 1
80392: PUSH
80393: LD_VAR 0 1
80397: PPUSH
80398: LD_VAR 0 4
80402: PPUSH
80403: CALL_OW 3
80407: ST_TO_ADDR
// end ;
80408: GO 80332
80410: POP
80411: POP
// end ;
80412: LD_VAR 0 2
80416: RET
// export function GetBaseMaterials ( base ) ; begin
80417: LD_INT 0
80419: PPUSH
// result := [ 0 , 0 , 0 ] ;
80420: LD_ADDR_VAR 0 2
80424: PUSH
80425: LD_INT 0
80427: PUSH
80428: LD_INT 0
80430: PUSH
80431: LD_INT 0
80433: PUSH
80434: EMPTY
80435: LIST
80436: LIST
80437: LIST
80438: ST_TO_ADDR
// if not base then
80439: LD_VAR 0 1
80443: NOT
80444: IFFALSE 80448
// exit ;
80446: GO 80497
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80448: LD_ADDR_VAR 0 2
80452: PUSH
80453: LD_VAR 0 1
80457: PPUSH
80458: LD_INT 1
80460: PPUSH
80461: CALL_OW 275
80465: PUSH
80466: LD_VAR 0 1
80470: PPUSH
80471: LD_INT 2
80473: PPUSH
80474: CALL_OW 275
80478: PUSH
80479: LD_VAR 0 1
80483: PPUSH
80484: LD_INT 3
80486: PPUSH
80487: CALL_OW 275
80491: PUSH
80492: EMPTY
80493: LIST
80494: LIST
80495: LIST
80496: ST_TO_ADDR
// end ;
80497: LD_VAR 0 2
80501: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80502: LD_INT 0
80504: PPUSH
80505: PPUSH
// result := array ;
80506: LD_ADDR_VAR 0 3
80510: PUSH
80511: LD_VAR 0 1
80515: ST_TO_ADDR
// if size > 0 then
80516: LD_VAR 0 2
80520: PUSH
80521: LD_INT 0
80523: GREATER
80524: IFFALSE 80570
// for i := array downto size do
80526: LD_ADDR_VAR 0 4
80530: PUSH
80531: DOUBLE
80532: LD_VAR 0 1
80536: INC
80537: ST_TO_ADDR
80538: LD_VAR 0 2
80542: PUSH
80543: FOR_DOWNTO
80544: IFFALSE 80568
// result := Delete ( result , result ) ;
80546: LD_ADDR_VAR 0 3
80550: PUSH
80551: LD_VAR 0 3
80555: PPUSH
80556: LD_VAR 0 3
80560: PPUSH
80561: CALL_OW 3
80565: ST_TO_ADDR
80566: GO 80543
80568: POP
80569: POP
// end ;
80570: LD_VAR 0 3
80574: RET
// export function ComExit ( unit ) ; var tmp ; begin
80575: LD_INT 0
80577: PPUSH
80578: PPUSH
// if not IsInUnit ( unit ) then
80579: LD_VAR 0 1
80583: PPUSH
80584: CALL_OW 310
80588: NOT
80589: IFFALSE 80593
// exit ;
80591: GO 80653
// tmp := IsInUnit ( unit ) ;
80593: LD_ADDR_VAR 0 3
80597: PUSH
80598: LD_VAR 0 1
80602: PPUSH
80603: CALL_OW 310
80607: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80608: LD_VAR 0 3
80612: PPUSH
80613: CALL_OW 247
80617: PUSH
80618: LD_INT 2
80620: EQUAL
80621: IFFALSE 80634
// ComExitVehicle ( unit ) else
80623: LD_VAR 0 1
80627: PPUSH
80628: CALL_OW 121
80632: GO 80643
// ComExitBuilding ( unit ) ;
80634: LD_VAR 0 1
80638: PPUSH
80639: CALL_OW 122
// result := tmp ;
80643: LD_ADDR_VAR 0 2
80647: PUSH
80648: LD_VAR 0 3
80652: ST_TO_ADDR
// end ;
80653: LD_VAR 0 2
80657: RET
// export function ResetHc ; begin
80658: LD_INT 0
80660: PPUSH
// InitHc ;
80661: CALL_OW 19
// hc_importance := 0 ;
80665: LD_ADDR_OWVAR 32
80669: PUSH
80670: LD_INT 0
80672: ST_TO_ADDR
// end ;
80673: LD_VAR 0 1
80677: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80678: LD_INT 0
80680: PPUSH
80681: PPUSH
80682: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80683: LD_ADDR_VAR 0 6
80687: PUSH
80688: LD_VAR 0 1
80692: PUSH
80693: LD_VAR 0 3
80697: PLUS
80698: PUSH
80699: LD_INT 2
80701: DIV
80702: ST_TO_ADDR
// if _x < 0 then
80703: LD_VAR 0 6
80707: PUSH
80708: LD_INT 0
80710: LESS
80711: IFFALSE 80728
// _x := _x * - 1 ;
80713: LD_ADDR_VAR 0 6
80717: PUSH
80718: LD_VAR 0 6
80722: PUSH
80723: LD_INT 1
80725: NEG
80726: MUL
80727: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80728: LD_ADDR_VAR 0 7
80732: PUSH
80733: LD_VAR 0 2
80737: PUSH
80738: LD_VAR 0 4
80742: PLUS
80743: PUSH
80744: LD_INT 2
80746: DIV
80747: ST_TO_ADDR
// if _y < 0 then
80748: LD_VAR 0 7
80752: PUSH
80753: LD_INT 0
80755: LESS
80756: IFFALSE 80773
// _y := _y * - 1 ;
80758: LD_ADDR_VAR 0 7
80762: PUSH
80763: LD_VAR 0 7
80767: PUSH
80768: LD_INT 1
80770: NEG
80771: MUL
80772: ST_TO_ADDR
// result := [ _x , _y ] ;
80773: LD_ADDR_VAR 0 5
80777: PUSH
80778: LD_VAR 0 6
80782: PUSH
80783: LD_VAR 0 7
80787: PUSH
80788: EMPTY
80789: LIST
80790: LIST
80791: ST_TO_ADDR
// end ;
80792: LD_VAR 0 5
80796: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80797: LD_INT 0
80799: PPUSH
80800: PPUSH
80801: PPUSH
80802: PPUSH
// task := GetTaskList ( unit ) ;
80803: LD_ADDR_VAR 0 7
80807: PUSH
80808: LD_VAR 0 1
80812: PPUSH
80813: CALL_OW 437
80817: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80818: LD_VAR 0 7
80822: NOT
80823: PUSH
80824: LD_VAR 0 1
80828: PPUSH
80829: LD_VAR 0 2
80833: PPUSH
80834: CALL_OW 308
80838: NOT
80839: AND
80840: IFFALSE 80844
// exit ;
80842: GO 80962
// if IsInArea ( unit , area ) then
80844: LD_VAR 0 1
80848: PPUSH
80849: LD_VAR 0 2
80853: PPUSH
80854: CALL_OW 308
80858: IFFALSE 80876
// begin ComMoveToArea ( unit , goAway ) ;
80860: LD_VAR 0 1
80864: PPUSH
80865: LD_VAR 0 3
80869: PPUSH
80870: CALL_OW 113
// exit ;
80874: GO 80962
// end ; if task [ 1 ] [ 1 ] <> M then
80876: LD_VAR 0 7
80880: PUSH
80881: LD_INT 1
80883: ARRAY
80884: PUSH
80885: LD_INT 1
80887: ARRAY
80888: PUSH
80889: LD_STRING M
80891: NONEQUAL
80892: IFFALSE 80896
// exit ;
80894: GO 80962
// x := task [ 1 ] [ 2 ] ;
80896: LD_ADDR_VAR 0 5
80900: PUSH
80901: LD_VAR 0 7
80905: PUSH
80906: LD_INT 1
80908: ARRAY
80909: PUSH
80910: LD_INT 2
80912: ARRAY
80913: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80914: LD_ADDR_VAR 0 6
80918: PUSH
80919: LD_VAR 0 7
80923: PUSH
80924: LD_INT 1
80926: ARRAY
80927: PUSH
80928: LD_INT 3
80930: ARRAY
80931: ST_TO_ADDR
// if InArea ( x , y , area ) then
80932: LD_VAR 0 5
80936: PPUSH
80937: LD_VAR 0 6
80941: PPUSH
80942: LD_VAR 0 2
80946: PPUSH
80947: CALL_OW 309
80951: IFFALSE 80962
// ComStop ( unit ) ;
80953: LD_VAR 0 1
80957: PPUSH
80958: CALL_OW 141
// end ;
80962: LD_VAR 0 4
80966: RET
// export function Abs ( value ) ; begin
80967: LD_INT 0
80969: PPUSH
// result := value ;
80970: LD_ADDR_VAR 0 2
80974: PUSH
80975: LD_VAR 0 1
80979: ST_TO_ADDR
// if value < 0 then
80980: LD_VAR 0 1
80984: PUSH
80985: LD_INT 0
80987: LESS
80988: IFFALSE 81005
// result := value * - 1 ;
80990: LD_ADDR_VAR 0 2
80994: PUSH
80995: LD_VAR 0 1
80999: PUSH
81000: LD_INT 1
81002: NEG
81003: MUL
81004: ST_TO_ADDR
// end ;
81005: LD_VAR 0 2
81009: RET
