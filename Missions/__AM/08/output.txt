// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 291 0 0
// PrepareRussian ;
  23: CALL 9142 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 76081 0 9
// Action ;
  79: CALL 15510 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 9
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// sikorskiIsKilled := false ;
 167: LD_ADDR_EXP 10
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// invincibleMode := false ;
 175: LD_ADDR_EXP 5
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// captureRocketCounter := 0 ;
 183: LD_ADDR_EXP 11
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// killMechCounter := 0 ;
 191: LD_ADDR_EXP 12
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// end ;
 199: LD_VAR 0 1
 203: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 204: LD_INT 22
 206: PUSH
 207: LD_INT 1
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 34
 216: PUSH
 217: LD_INT 6
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: PUSH
 233: LD_INT 6
 235: GREATEREQUAL
 236: IFFALSE 248
 238: GO 240
 240: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 241: LD_STRING ACH_ARMOR
 243: PPUSH
 244: CALL_OW 543
 248: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 249: LD_EXP 11
 253: PUSH
 254: LD_INT 3
 256: GREATEREQUAL
 257: IFFALSE 269
 259: GO 261
 261: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 262: LD_STRING ACH_TOOL
 264: PPUSH
 265: CALL_OW 543
 269: END
// every 0 0$1 trigger killMechCounter >= 10 do
 270: LD_EXP 12
 274: PUSH
 275: LD_INT 10
 277: GREATEREQUAL
 278: IFFALSE 290
 280: GO 282
 282: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 283: LD_STRING ACH_MECH
 285: PPUSH
 286: CALL_OW 543
 290: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
 306: PPUSH
 307: PPUSH
 308: PPUSH
// uc_side := 1 ;
 309: LD_ADDR_OWVAR 20
 313: PUSH
 314: LD_INT 1
 316: ST_TO_ADDR
// uc_nation := 1 ;
 317: LD_ADDR_OWVAR 21
 321: PUSH
 322: LD_INT 1
 324: ST_TO_ADDR
// PrepareGammaBase ;
 325: CALL 2428 0 0
// x := 52 ;
 329: LD_ADDR_VAR 0 13
 333: PUSH
 334: LD_INT 52
 336: ST_TO_ADDR
// y := 16 ;
 337: LD_ADDR_VAR 0 14
 341: PUSH
 342: LD_INT 16
 344: ST_TO_ADDR
// case gammaCommander of 1 :
 345: LD_EXP 13
 349: PUSH
 350: LD_INT 1
 352: DOUBLE
 353: EQUAL
 354: IFTRUE 358
 356: GO 443
 358: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 359: LD_ADDR_EXP 16
 363: PUSH
 364: LD_STRING Donaldson
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_STRING 04_
 372: PPUSH
 373: CALL 41672 0 3
 377: ST_TO_ADDR
// if HexInfo ( x , y ) then
 378: LD_VAR 0 13
 382: PPUSH
 383: LD_VAR 0 14
 387: PPUSH
 388: CALL_OW 428
 392: IFFALSE 410
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 394: LD_EXP 16
 398: PPUSH
 399: LD_EXP 31
 403: PPUSH
 404: CALL_OW 52
 408: GO 432
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 410: LD_EXP 16
 414: PPUSH
 415: LD_VAR 0 13
 419: PPUSH
 420: LD_VAR 0 14
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 48
// ComHold ( Donaldson ) ;
 432: LD_EXP 16
 436: PPUSH
 437: CALL_OW 140
// end ; 2 :
 441: GO 630
 443: LD_INT 2
 445: DOUBLE
 446: EQUAL
 447: IFTRUE 451
 449: GO 536
 451: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 452: LD_ADDR_EXP 15
 456: PUSH
 457: LD_STRING Brown
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_STRING 04_
 465: PPUSH
 466: CALL 41672 0 3
 470: ST_TO_ADDR
// if HexInfo ( x , y ) then
 471: LD_VAR 0 13
 475: PPUSH
 476: LD_VAR 0 14
 480: PPUSH
 481: CALL_OW 428
 485: IFFALSE 503
// PlaceHumanInUnit ( Brown , amDepot ) else
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 31
 496: PPUSH
 497: CALL_OW 52
 501: GO 525
// PlaceUnitXY ( Brown , x , y , false ) ;
 503: LD_EXP 15
 507: PPUSH
 508: LD_VAR 0 13
 512: PPUSH
 513: LD_VAR 0 14
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 48
// ComHold ( Brown ) ;
 525: LD_EXP 15
 529: PPUSH
 530: CALL_OW 140
// end ; 3 :
 534: GO 630
 536: LD_INT 3
 538: DOUBLE
 539: EQUAL
 540: IFTRUE 544
 542: GO 629
 544: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_STRING VanHouten
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_STRING 
 558: PPUSH
 559: CALL 41672 0 3
 563: ST_TO_ADDR
// if HexInfo ( x , y ) then
 564: LD_VAR 0 13
 568: PPUSH
 569: LD_VAR 0 14
 573: PPUSH
 574: CALL_OW 428
 578: IFFALSE 596
// PlaceHumanInUnit ( Houten , amDepot ) else
 580: LD_EXP 25
 584: PPUSH
 585: LD_EXP 31
 589: PPUSH
 590: CALL_OW 52
 594: GO 618
// PlaceUnitXY ( Houten , x , y , false ) ;
 596: LD_EXP 25
 600: PPUSH
 601: LD_VAR 0 13
 605: PPUSH
 606: LD_VAR 0 14
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// ComHold ( Houten ) ;
 618: LD_EXP 25
 622: PPUSH
 623: CALL_OW 140
// end ; end ;
 627: GO 630
 629: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 630: LD_ADDR_EXP 29
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: LD_STRING 
 643: PPUSH
 644: CALL 41672 0 3
 648: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 649: LD_ADDR_EXP 30
 653: PUSH
 654: LD_STRING Powell
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: LD_STRING 
 662: PPUSH
 663: CALL 41672 0 3
 667: ST_TO_ADDR
// tmp := [ ] ;
 668: LD_ADDR_VAR 0 4
 672: PUSH
 673: EMPTY
 674: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) then
 675: LD_STRING 04_Lisa
 677: PUSH
 678: EMPTY
 679: LIST
 680: PPUSH
 681: CALL_OW 28
 685: IFFALSE 792
// begin if not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 687: LD_STRING LisaInDelta
 689: PPUSH
 690: LD_INT 0
 692: PPUSH
 693: CALL_OW 30
 697: NOT
 698: PUSH
 699: LD_STRING 07_Lisa
 701: PUSH
 702: EMPTY
 703: LIST
 704: PPUSH
 705: CALL_OW 28
 709: NOT
 710: AND
 711: IFFALSE 734
// Lisa := PrepareUnit ( Lisa , true , 04_ ) else
 713: LD_ADDR_EXP 19
 717: PUSH
 718: LD_STRING Lisa
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: LD_STRING 04_
 726: PPUSH
 727: CALL 41672 0 3
 731: ST_TO_ADDR
 732: GO 766
// if not LoadVariable ( LisaIn07 , false ) then
 734: LD_STRING LisaIn07
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: CALL_OW 30
 744: NOT
 745: IFFALSE 766
// Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 747: LD_ADDR_EXP 19
 751: PUSH
 752: LD_STRING Lisa
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_STRING 07_
 760: PPUSH
 761: CALL 41672 0 3
 765: ST_TO_ADDR
// if Lisa then
 766: LD_EXP 19
 770: IFFALSE 792
// tmp2 := Join ( tmp2 , Lisa ) ;
 772: LD_ADDR_VAR 0 5
 776: PUSH
 777: LD_VAR 0 5
 781: PPUSH
 782: LD_EXP 19
 786: PPUSH
 787: CALL 79404 0 2
 791: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) then
 792: LD_STRING 04_Bobby
 794: PUSH
 795: EMPTY
 796: LIST
 797: PPUSH
 798: CALL_OW 28
 802: IFFALSE 909
// begin if not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 804: LD_STRING BobbyInDelta
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 30
 814: NOT
 815: PUSH
 816: LD_STRING 07_Bobby
 818: PUSH
 819: EMPTY
 820: LIST
 821: PPUSH
 822: CALL_OW 28
 826: NOT
 827: AND
 828: IFFALSE 851
// Bobby := PrepareUnit ( Bobby , true , 04_ ) else
 830: LD_ADDR_EXP 17
 834: PUSH
 835: LD_STRING Bobby
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: LD_STRING 04_
 843: PPUSH
 844: CALL 41672 0 3
 848: ST_TO_ADDR
 849: GO 883
// if not LoadVariable ( BobbyIn07 , false ) then
 851: LD_STRING BobbyIn07
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 30
 861: NOT
 862: IFFALSE 883
// Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 864: LD_ADDR_EXP 17
 868: PUSH
 869: LD_STRING Bobby
 871: PPUSH
 872: LD_INT 1
 874: PPUSH
 875: LD_STRING 07_
 877: PPUSH
 878: CALL 41672 0 3
 882: ST_TO_ADDR
// if Bobby then
 883: LD_EXP 17
 887: IFFALSE 909
// tmp2 := Join ( tmp2 , Bobby ) ;
 889: LD_ADDR_VAR 0 5
 893: PUSH
 894: LD_VAR 0 5
 898: PPUSH
 899: LD_EXP 17
 903: PPUSH
 904: CALL 79404 0 2
 908: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) then
 909: LD_STRING 04_Cyrus
 911: PUSH
 912: EMPTY
 913: LIST
 914: PPUSH
 915: CALL_OW 28
 919: IFFALSE 1026
// begin if not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 921: LD_STRING CyrusInDelta
 923: PPUSH
 924: LD_INT 0
 926: PPUSH
 927: CALL_OW 30
 931: NOT
 932: PUSH
 933: LD_STRING 07_Cyrus
 935: PUSH
 936: EMPTY
 937: LIST
 938: PPUSH
 939: CALL_OW 28
 943: NOT
 944: AND
 945: IFFALSE 968
// Cyrus := PrepareUnit ( Cyrus , true , 04_ ) else
 947: LD_ADDR_EXP 18
 951: PUSH
 952: LD_STRING Cyrus
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_STRING 04_
 960: PPUSH
 961: CALL 41672 0 3
 965: ST_TO_ADDR
 966: GO 1000
// if not LoadVariable ( CyrusIn07 , false ) then
 968: LD_STRING CyrusIn07
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 30
 978: NOT
 979: IFFALSE 1000
// Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 981: LD_ADDR_EXP 18
 985: PUSH
 986: LD_STRING Cyrus
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: LD_STRING 07_
 994: PPUSH
 995: CALL 41672 0 3
 999: ST_TO_ADDR
// if Cyrus then
1000: LD_EXP 18
1004: IFFALSE 1026
// tmp2 := Join ( tmp2 , Cyrus ) ;
1006: LD_ADDR_VAR 0 5
1010: PUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_EXP 18
1020: PPUSH
1021: CALL 79404 0 2
1025: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1026: LD_STRING 04_Brown
1028: PUSH
1029: EMPTY
1030: LIST
1031: PPUSH
1032: CALL_OW 28
1036: PUSH
1037: LD_STRING BrownInDelta
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 30
1047: NOT
1048: AND
1049: PUSH
1050: LD_STRING 07_Brown
1052: PUSH
1053: EMPTY
1054: LIST
1055: PPUSH
1056: CALL_OW 28
1060: NOT
1061: AND
1062: PUSH
1063: LD_EXP 13
1067: PUSH
1068: LD_INT 2
1070: NONEQUAL
1071: AND
1072: IFFALSE 1115
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1074: LD_ADDR_EXP 15
1078: PUSH
1079: LD_STRING Brown
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: LD_STRING 04_
1087: PPUSH
1088: CALL 41672 0 3
1092: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_VAR 0 5
1102: PPUSH
1103: LD_EXP 15
1107: PPUSH
1108: CALL 79404 0 2
1112: ST_TO_ADDR
// end else
1113: GO 1177
// if not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1115: LD_STRING BrownIn07
1117: PPUSH
1118: LD_INT 0
1120: PPUSH
1121: CALL_OW 30
1125: NOT
1126: PUSH
1127: LD_EXP 13
1131: PUSH
1132: LD_INT 2
1134: NONEQUAL
1135: AND
1136: IFFALSE 1177
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1138: LD_ADDR_EXP 15
1142: PUSH
1143: LD_STRING Brown
1145: PPUSH
1146: LD_INT 1
1148: PPUSH
1149: LD_STRING 07_
1151: PPUSH
1152: CALL 41672 0 3
1156: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_VAR 0 5
1166: PPUSH
1167: LD_EXP 15
1171: PPUSH
1172: CALL 79404 0 2
1176: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1177: LD_STRING 04_Donaldson
1179: PUSH
1180: EMPTY
1181: LIST
1182: PPUSH
1183: CALL_OW 28
1187: PUSH
1188: LD_STRING DonaldsonInDelta
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 30
1198: NOT
1199: AND
1200: PUSH
1201: LD_STRING 07_Donaldson
1203: PUSH
1204: EMPTY
1205: LIST
1206: PPUSH
1207: CALL_OW 28
1211: NOT
1212: AND
1213: PUSH
1214: LD_EXP 13
1218: PUSH
1219: LD_INT 1
1221: NONEQUAL
1222: AND
1223: IFFALSE 1266
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1225: LD_ADDR_EXP 16
1229: PUSH
1230: LD_STRING Donaldson
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_STRING 04_
1238: PPUSH
1239: CALL 41672 0 3
1243: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1244: LD_ADDR_VAR 0 5
1248: PUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: LD_EXP 16
1258: PPUSH
1259: CALL 79404 0 2
1263: ST_TO_ADDR
// end else
1264: GO 1328
// if not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1266: LD_STRING DonaldsonIn07
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 30
1276: NOT
1277: PUSH
1278: LD_EXP 13
1282: PUSH
1283: LD_INT 1
1285: NONEQUAL
1286: AND
1287: IFFALSE 1328
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1289: LD_ADDR_EXP 16
1293: PUSH
1294: LD_STRING Donaldson
1296: PPUSH
1297: LD_INT 1
1299: PPUSH
1300: LD_STRING 07_
1302: PPUSH
1303: CALL 41672 0 3
1307: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1308: LD_ADDR_VAR 0 5
1312: PUSH
1313: LD_VAR 0 5
1317: PPUSH
1318: LD_EXP 16
1322: PPUSH
1323: CALL 79404 0 2
1327: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1328: LD_STRING KhatamIn07
1330: PPUSH
1331: LD_INT 0
1333: PPUSH
1334: CALL_OW 30
1338: NOT
1339: IFFALSE 1380
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1341: LD_ADDR_EXP 23
1345: PUSH
1346: LD_STRING Khatam
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_STRING 07_
1354: PPUSH
1355: CALL 41672 0 3
1359: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1360: LD_ADDR_VAR 0 5
1364: PUSH
1365: LD_VAR 0 5
1369: PPUSH
1370: LD_EXP 23
1374: PPUSH
1375: CALL 79404 0 2
1379: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1380: LD_ADDR_VAR 0 6
1384: PUSH
1385: LD_STRING 07_othersGamma
1387: PPUSH
1388: CALL_OW 31
1392: ST_TO_ADDR
// tmp := 5 - others ;
1393: LD_ADDR_VAR 0 4
1397: PUSH
1398: LD_INT 5
1400: PUSH
1401: LD_VAR 0 6
1405: MINUS
1406: ST_TO_ADDR
// if tmp then
1407: LD_VAR 0 4
1411: IFFALSE 1468
// for i := tmp downto 1 do
1413: LD_ADDR_VAR 0 2
1417: PUSH
1418: DOUBLE
1419: LD_VAR 0 4
1423: INC
1424: ST_TO_ADDR
1425: LD_INT 1
1427: PUSH
1428: FOR_DOWNTO
1429: IFFALSE 1466
// begin PrepareHuman ( false , 1 , 5 ) ;
1431: LD_INT 0
1433: PPUSH
1434: LD_INT 1
1436: PPUSH
1437: LD_INT 5
1439: PPUSH
1440: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1444: LD_ADDR_VAR 0 6
1448: PUSH
1449: LD_VAR 0 6
1453: PPUSH
1454: CALL_OW 44
1458: PPUSH
1459: CALL 79404 0 2
1463: ST_TO_ADDR
// end ;
1464: GO 1428
1466: POP
1467: POP
// for i in others do
1468: LD_ADDR_VAR 0 2
1472: PUSH
1473: LD_VAR 0 6
1477: PUSH
1478: FOR_IN
1479: IFFALSE 1495
// SetTag ( i , 106 ) ;
1481: LD_VAR 0 2
1485: PPUSH
1486: LD_INT 106
1488: PPUSH
1489: CALL_OW 109
1493: GO 1478
1495: POP
1496: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1497: LD_ADDR_VAR 0 8
1501: PUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 30
1514: PUSH
1515: LD_INT 31
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL_OW 69
1530: ST_TO_ADDR
// for i in bun do
1531: LD_ADDR_VAR 0 2
1535: PUSH
1536: LD_VAR 0 8
1540: PUSH
1541: FOR_IN
1542: IFFALSE 1674
// begin x := GetX ( i ) ;
1544: LD_ADDR_VAR 0 13
1548: PUSH
1549: LD_VAR 0 2
1553: PPUSH
1554: CALL_OW 250
1558: ST_TO_ADDR
// y := GetY ( i ) ;
1559: LD_ADDR_VAR 0 14
1563: PUSH
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 251
1573: ST_TO_ADDR
// d := GetDir ( i ) ;
1574: LD_ADDR_VAR 0 15
1578: PUSH
1579: LD_VAR 0 2
1583: PPUSH
1584: CALL_OW 254
1588: ST_TO_ADDR
// RemoveUnit ( i ) ;
1589: LD_VAR 0 2
1593: PPUSH
1594: CALL_OW 64
// bc_type := b_bunker ;
1598: LD_ADDR_OWVAR 42
1602: PUSH
1603: LD_INT 32
1605: ST_TO_ADDR
// bc_level := 6 ;
1606: LD_ADDR_OWVAR 43
1610: PUSH
1611: LD_INT 6
1613: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1614: LD_ADDR_VAR 0 16
1618: PUSH
1619: LD_VAR 0 13
1623: PPUSH
1624: LD_VAR 0 14
1628: PPUSH
1629: LD_VAR 0 15
1633: PPUSH
1634: CALL_OW 47
1638: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1639: LD_VAR 0 16
1643: PPUSH
1644: LD_INT 5
1646: PUSH
1647: LD_INT 4
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_VAR 0 2
1658: PUSH
1659: LD_INT 2
1661: MOD
1662: PUSH
1663: LD_INT 1
1665: PLUS
1666: ARRAY
1667: PPUSH
1668: CALL_OW 431
// end ;
1672: GO 1541
1674: POP
1675: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1676: LD_ADDR_VAR 0 7
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 1
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 30
1693: PUSH
1694: LD_INT 5
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1710: LD_ADDR_VAR 0 9
1714: PUSH
1715: LD_INT 22
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 2
1727: PUSH
1728: LD_INT 30
1730: PUSH
1731: LD_INT 6
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 30
1740: PUSH
1741: LD_INT 7
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 30
1750: PUSH
1751: LD_INT 8
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PPUSH
1768: CALL_OW 69
1772: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1773: LD_ADDR_VAR 0 10
1777: PUSH
1778: LD_INT 22
1780: PUSH
1781: LD_INT 1
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 30
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PPUSH
1802: CALL_OW 69
1806: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1807: LD_ADDR_VAR 0 11
1811: PUSH
1812: LD_INT 22
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 30
1824: PUSH
1825: LD_INT 36
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PPUSH
1836: CALL_OW 69
1840: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1841: LD_ADDR_VAR 0 8
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: LD_INT 30
1861: PUSH
1862: LD_INT 31
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 30
1871: PUSH
1872: LD_INT 32
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PPUSH
1888: CALL_OW 69
1892: ST_TO_ADDR
// for i in others union tmp2 do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_VAR 0 6
1902: PUSH
1903: LD_VAR 0 5
1907: UNION
1908: PUSH
1909: FOR_IN
1910: IFFALSE 2350
// begin placed := false ;
1912: LD_ADDR_VAR 0 12
1916: PUSH
1917: LD_INT 0
1919: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1920: LD_VAR 0 2
1924: PPUSH
1925: CALL_OW 257
1929: PUSH
1930: LD_INT 1
1932: EQUAL
1933: IFFALSE 2058
// begin if UnitFilter ( bun , [ f_empty ] ) then
1935: LD_VAR 0 8
1939: PPUSH
1940: LD_INT 58
1942: PUSH
1943: EMPTY
1944: LIST
1945: PPUSH
1946: CALL_OW 72
1950: IFFALSE 1989
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 8
1961: PPUSH
1962: LD_INT 58
1964: PUSH
1965: EMPTY
1966: LIST
1967: PPUSH
1968: CALL_OW 72
1972: PUSH
1973: LD_INT 1
1975: ARRAY
1976: PPUSH
1977: CALL_OW 52
// placed := true ;
1981: LD_ADDR_VAR 0 12
1985: PUSH
1986: LD_INT 1
1988: ST_TO_ADDR
// end ; if arm and not placed then
1989: LD_VAR 0 7
1993: PUSH
1994: LD_VAR 0 12
1998: NOT
1999: AND
2000: IFFALSE 2058
// begin for j in arm do
2002: LD_ADDR_VAR 0 3
2006: PUSH
2007: LD_VAR 0 7
2011: PUSH
2012: FOR_IN
2013: IFFALSE 2056
// if UnitsInside ( j ) < 6 then
2015: LD_VAR 0 3
2019: PPUSH
2020: CALL_OW 313
2024: PUSH
2025: LD_INT 6
2027: LESS
2028: IFFALSE 2054
// begin PlaceHumanInUnit ( i , j ) ;
2030: LD_VAR 0 2
2034: PPUSH
2035: LD_VAR 0 3
2039: PPUSH
2040: CALL_OW 52
// placed := true ;
2044: LD_ADDR_VAR 0 12
2048: PUSH
2049: LD_INT 1
2051: ST_TO_ADDR
// break ;
2052: GO 2056
// end ;
2054: GO 2012
2056: POP
2057: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2058: LD_VAR 0 2
2062: PPUSH
2063: CALL_OW 257
2067: PUSH
2068: LD_INT 2
2070: EQUAL
2071: IFFALSE 2104
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: LD_INT 52
2080: PPUSH
2081: LD_INT 20
2083: PPUSH
2084: LD_INT 6
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL_OW 50
// placed := true ;
2094: LD_ADDR_VAR 0 12
2098: PUSH
2099: LD_INT 1
2101: ST_TO_ADDR
// continue ;
2102: GO 1909
// end ; if GetClass ( i ) = class_mechanic then
2104: LD_VAR 0 2
2108: PPUSH
2109: CALL_OW 257
2113: PUSH
2114: LD_INT 3
2116: EQUAL
2117: IFFALSE 2240
// begin if fac then
2119: LD_VAR 0 10
2123: IFFALSE 2240
// begin if ct and UnitsInside ( ct [ 1 ] ) < 3 then
2125: LD_VAR 0 11
2129: PUSH
2130: LD_VAR 0 11
2134: PUSH
2135: LD_INT 1
2137: ARRAY
2138: PPUSH
2139: CALL_OW 313
2143: PUSH
2144: LD_INT 3
2146: LESS
2147: AND
2148: IFFALSE 2176
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_VAR 0 11
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: PPUSH
2164: CALL_OW 52
// placed := true ;
2168: LD_ADDR_VAR 0 12
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// end ; if placed then
2176: LD_VAR 0 12
2180: IFFALSE 2184
// continue ;
2182: GO 1909
// for j in fac do
2184: LD_ADDR_VAR 0 3
2188: PUSH
2189: LD_VAR 0 10
2193: PUSH
2194: FOR_IN
2195: IFFALSE 2238
// if UnitsInside ( j ) < 6 then
2197: LD_VAR 0 3
2201: PPUSH
2202: CALL_OW 313
2206: PUSH
2207: LD_INT 6
2209: LESS
2210: IFFALSE 2236
// begin PlaceHumanInUnit ( i , j ) ;
2212: LD_VAR 0 2
2216: PPUSH
2217: LD_VAR 0 3
2221: PPUSH
2222: CALL_OW 52
// placed := true ;
2226: LD_ADDR_VAR 0 12
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// break ;
2234: GO 2238
// end ;
2236: GO 2194
2238: POP
2239: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2240: LD_VAR 0 2
2244: PPUSH
2245: CALL_OW 257
2249: PUSH
2250: LD_INT 4
2252: EQUAL
2253: IFFALSE 2317
// begin if lab then
2255: LD_VAR 0 9
2259: IFFALSE 2317
// begin for j in lab do
2261: LD_ADDR_VAR 0 3
2265: PUSH
2266: LD_VAR 0 9
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2315
// if UnitsInside ( j ) < 6 then
2274: LD_VAR 0 3
2278: PPUSH
2279: CALL_OW 313
2283: PUSH
2284: LD_INT 6
2286: LESS
2287: IFFALSE 2313
// begin PlaceHumanInUnit ( i , j ) ;
2289: LD_VAR 0 2
2293: PPUSH
2294: LD_VAR 0 3
2298: PPUSH
2299: CALL_OW 52
// placed := true ;
2303: LD_ADDR_VAR 0 12
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// break ;
2311: GO 2315
// end ;
2313: GO 2271
2315: POP
2316: POP
// end ; end ; if not placed then
2317: LD_VAR 0 12
2321: NOT
2322: IFFALSE 2348
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 49
// ComHold ( i ) ;
2339: LD_VAR 0 2
2343: PPUSH
2344: CALL_OW 140
// end ; end ;
2348: GO 1909
2350: POP
2351: POP
// if ct then
2352: LD_VAR 0 11
2356: IFFALSE 2423
// if UnitsInside ( ct [ 1 ] ) then
2358: LD_VAR 0 11
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: CALL_OW 313
2371: IFFALSE 2423
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2373: LD_ADDR_VAR 0 2
2377: PUSH
2378: LD_INT 22
2380: PUSH
2381: LD_INT 1
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: PUSH
2388: LD_INT 33
2390: PUSH
2391: LD_INT 2
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PPUSH
2402: CALL_OW 69
2406: PUSH
2407: FOR_IN
2408: IFFALSE 2421
// Connect ( i ) ;
2410: LD_VAR 0 2
2414: PPUSH
2415: CALL 50001 0 1
2419: GO 2407
2421: POP
2422: POP
// end ; end ;
2423: LD_VAR 0 1
2427: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2428: LD_INT 0
2430: PPUSH
2431: PPUSH
2432: PPUSH
2433: PPUSH
2434: PPUSH
2435: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2436: LD_INT 71
2438: PPUSH
2439: LD_INT 5
2441: PPUSH
2442: LD_INT 1
2444: PPUSH
2445: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2449: LD_ADDR_VAR 0 2
2453: PUSH
2454: LD_STRING GammaBase
2456: PPUSH
2457: EMPTY
2458: PPUSH
2459: CALL_OW 30
2463: ST_TO_ADDR
// if not blist then
2464: LD_VAR 0 2
2468: NOT
2469: IFFALSE 2509
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2471: LD_ADDR_VAR 0 2
2475: PUSH
2476: LD_INT 1
2478: PUSH
2479: LD_INT 52
2481: PUSH
2482: LD_INT 12
2484: PUSH
2485: LD_INT 3
2487: PUSH
2488: LD_INT 3
2490: PUSH
2491: LD_INT 0
2493: PUSH
2494: LD_INT 0
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: PUSH
2506: EMPTY
2507: LIST
2508: ST_TO_ADDR
// uc_side := 1 ;
2509: LD_ADDR_OWVAR 20
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// uc_nation := 1 ;
2517: LD_ADDR_OWVAR 21
2521: PUSH
2522: LD_INT 1
2524: ST_TO_ADDR
// for i in blist do
2525: LD_ADDR_VAR 0 3
2529: PUSH
2530: LD_VAR 0 2
2534: PUSH
2535: FOR_IN
2536: IFFALSE 2814
// begin InitBc ;
2538: CALL_OW 21
// bc_type := i [ 1 ] ;
2542: LD_ADDR_OWVAR 42
2546: PUSH
2547: LD_VAR 0 3
2551: PUSH
2552: LD_INT 1
2554: ARRAY
2555: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2556: LD_ADDR_OWVAR 43
2560: PUSH
2561: LD_VAR 0 3
2565: PUSH
2566: LD_INT 5
2568: ARRAY
2569: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2570: LD_OWVAR 42
2574: PUSH
2575: LD_INT 6
2577: PUSH
2578: LD_INT 7
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: IN
2585: IFFALSE 2649
// begin if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2587: LD_STRING 06_remoteVehs_1
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL_OW 30
2597: IFFALSE 2625
// begin bc_type := b_lab_full ;
2599: LD_ADDR_OWVAR 42
2603: PUSH
2604: LD_INT 8
2606: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2607: LD_ADDR_OWVAR 44
2611: PUSH
2612: LD_INT 10
2614: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2615: LD_ADDR_OWVAR 45
2619: PUSH
2620: LD_INT 15
2622: ST_TO_ADDR
// end else
2623: GO 2649
// begin bc_type := b_lab_half ;
2625: LD_ADDR_OWVAR 42
2629: PUSH
2630: LD_INT 7
2632: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2633: LD_ADDR_OWVAR 44
2637: PUSH
2638: LD_INT 10
2640: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2641: LD_ADDR_OWVAR 45
2645: PUSH
2646: LD_INT 9
2648: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2649: LD_OWVAR 42
2653: PUSH
2654: LD_INT 2
2656: EQUAL
2657: IFFALSE 2667
// bc_type := b_factory ;
2659: LD_ADDR_OWVAR 42
2663: PUSH
2664: LD_INT 3
2666: ST_TO_ADDR
// if bc_type = b_depot then
2667: LD_OWVAR 42
2671: PUSH
2672: LD_INT 0
2674: EQUAL
2675: IFFALSE 2724
// begin bc_type := b_warehouse ;
2677: LD_ADDR_OWVAR 42
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2685: LD_ADDR_EXP 31
2689: PUSH
2690: LD_VAR 0 3
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 3
2706: ARRAY
2707: PPUSH
2708: LD_VAR 0 3
2712: PUSH
2713: LD_INT 4
2715: ARRAY
2716: PPUSH
2717: CALL_OW 47
2721: ST_TO_ADDR
// continue ;
2722: GO 2535
// end ; if bc_type = b_armoury then
2724: LD_OWVAR 42
2728: PUSH
2729: LD_INT 4
2731: EQUAL
2732: IFFALSE 2742
// bc_type = b_barracks ;
2734: LD_ADDR_OWVAR 42
2738: PUSH
2739: LD_INT 5
2741: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 2
2754: ARRAY
2755: PPUSH
2756: LD_VAR 0 3
2760: PUSH
2761: LD_INT 3
2763: ARRAY
2764: PPUSH
2765: LD_VAR 0 3
2769: PUSH
2770: LD_INT 4
2772: ARRAY
2773: PPUSH
2774: CALL_OW 47
2778: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2779: LD_VAR 0 4
2783: PPUSH
2784: CALL_OW 266
2788: PUSH
2789: LD_INT 32
2791: EQUAL
2792: IFFALSE 2812
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_VAR 0 3
2803: PUSH
2804: LD_INT 7
2806: ARRAY
2807: PPUSH
2808: CALL_OW 431
// end ;
2812: GO 2535
2814: POP
2815: POP
// if not amDepot then
2816: LD_EXP 31
2820: NOT
2821: IFFALSE 2858
// begin bc_type := b_warehouse ;
2823: LD_ADDR_OWVAR 42
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// bc_level := 6 ;
2831: LD_ADDR_OWVAR 43
2835: PUSH
2836: LD_INT 6
2838: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2839: LD_ADDR_EXP 31
2843: PUSH
2844: LD_INT 52
2846: PPUSH
2847: LD_INT 12
2849: PPUSH
2850: LD_INT 3
2852: PPUSH
2853: CALL_OW 47
2857: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2858: LD_ADDR_OWVAR 42
2862: PUSH
2863: LD_INT 5
2865: ST_TO_ADDR
// bc_level := 6 ;
2866: LD_ADDR_OWVAR 43
2870: PUSH
2871: LD_INT 6
2873: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2874: LD_INT 61
2876: PPUSH
2877: LD_INT 29
2879: PPUSH
2880: LD_INT 5
2882: PPUSH
2883: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2887: LD_EXP 31
2891: PPUSH
2892: LD_STRING gamma
2894: PPUSH
2895: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2899: LD_EXP 31
2903: PPUSH
2904: CALL_OW 274
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: LD_INT 400
2914: PUSH
2915: LD_INT 320
2917: PUSH
2918: LD_INT 270
2920: PUSH
2921: LD_INT 230
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_OWVAR 67
2934: ARRAY
2935: PPUSH
2936: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2940: LD_EXP 31
2944: PPUSH
2945: CALL_OW 274
2949: PPUSH
2950: LD_INT 2
2952: PPUSH
2953: LD_INT 130
2955: PPUSH
2956: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 30
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: IFFALSE 3236
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_INT 22
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_INT 30
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PPUSH
3019: CALL_OW 69
3023: PUSH
3024: LD_INT 1
3026: ARRAY
3027: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3028: LD_ADDR_VAR 0 6
3032: PUSH
3033: LD_VAR 0 4
3037: PPUSH
3038: CALL_OW 250
3042: PPUSH
3043: LD_VAR 0 4
3047: PPUSH
3048: CALL_OW 251
3052: PPUSH
3053: LD_VAR 0 4
3057: PPUSH
3058: CALL_OW 254
3062: PPUSH
3063: CALL 77038 0 3
3067: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: LD_INT 19
3075: PUSH
3076: LD_INT 17
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3083: LD_STRING 06_remoteVehs_1
3085: PPUSH
3086: LD_INT 0
3088: PPUSH
3089: CALL_OW 30
3093: IFFALSE 3116
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: LD_VAR 0 2
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: LD_INT 22
3110: PPUSH
3111: CALL_OW 2
3115: ST_TO_ADDR
// for i in tmp do
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_VAR 0 6
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3234
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3129: LD_VAR 0 3
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: LD_VAR 0 3
3142: PUSH
3143: LD_INT 2
3145: ARRAY
3146: PPUSH
3147: CALL_OW 428
3151: PUSH
3152: LD_INT 0
3154: EQUAL
3155: IFFALSE 3232
// begin bc_type := blist [ 1 ] ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_VAR 0 2
3166: PUSH
3167: LD_INT 1
3169: ARRAY
3170: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3171: LD_VAR 0 3
3175: PUSH
3176: LD_INT 1
3178: ARRAY
3179: PPUSH
3180: LD_VAR 0 3
3184: PUSH
3185: LD_INT 2
3187: ARRAY
3188: PPUSH
3189: LD_VAR 0 3
3193: PUSH
3194: LD_INT 3
3196: ARRAY
3197: PPUSH
3198: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: CALL_OW 3
3219: ST_TO_ADDR
// if blist = 0 then
3220: LD_VAR 0 2
3224: PUSH
3225: LD_INT 0
3227: EQUAL
3228: IFFALSE 3232
// break ;
3230: GO 3234
// end ;
3232: GO 3126
3234: POP
3235: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3236: LD_STRING 06_remoteVehs_1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 30
3246: IFFALSE 3699
// begin bc_type := b_control_tower ;
3248: LD_ADDR_OWVAR 42
3252: PUSH
3253: LD_INT 36
3255: ST_TO_ADDR
// bc_level := 4 ;
3256: LD_ADDR_OWVAR 43
3260: PUSH
3261: LD_INT 4
3263: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3264: LD_EXP 31
3268: PPUSH
3269: LD_INT 36
3271: PPUSH
3272: LD_INT 62
3274: PPUSH
3275: LD_INT 12
3277: PPUSH
3278: LD_INT 3
3280: PPUSH
3281: CALL 55129 0 5
3285: PUSH
3286: LD_INT 92
3288: PUSH
3289: LD_INT 62
3291: PUSH
3292: LD_INT 12
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: NOT
3309: AND
3310: IFFALSE 3327
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3312: LD_INT 62
3314: PPUSH
3315: LD_INT 12
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: CALL_OW 47
3325: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3327: LD_EXP 31
3331: PPUSH
3332: LD_INT 36
3334: PPUSH
3335: LD_INT 37
3337: PPUSH
3338: LD_INT 18
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL 55129 0 5
3348: PUSH
3349: LD_INT 92
3351: PUSH
3352: LD_INT 37
3354: PUSH
3355: LD_INT 18
3357: PUSH
3358: LD_INT 3
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: PPUSH
3367: CALL_OW 69
3371: NOT
3372: AND
3373: IFFALSE 3390
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3375: LD_INT 37
3377: PPUSH
3378: LD_INT 18
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: CALL_OW 47
3388: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3390: LD_EXP 31
3394: PPUSH
3395: LD_INT 36
3397: PPUSH
3398: LD_INT 66
3400: PPUSH
3401: LD_INT 14
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: CALL 55129 0 5
3411: PUSH
3412: LD_INT 92
3414: PUSH
3415: LD_INT 66
3417: PUSH
3418: LD_INT 14
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: NOT
3435: AND
3436: IFFALSE 3453
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3438: LD_INT 66
3440: PPUSH
3441: LD_INT 14
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: CALL_OW 47
3451: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3453: LD_EXP 31
3457: PPUSH
3458: LD_INT 36
3460: PPUSH
3461: LD_INT 74
3463: PPUSH
3464: LD_INT 26
3466: PPUSH
3467: LD_INT 4
3469: PPUSH
3470: CALL 55129 0 5
3474: IFFALSE 3489
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3476: LD_INT 74
3478: PPUSH
3479: LD_INT 26
3481: PPUSH
3482: LD_INT 4
3484: PPUSH
3485: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3489: LD_INT 22
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 36
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: NOT
3518: IFFALSE 3522
// exit ;
3520: GO 4047
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: DOUBLE
3528: LD_INT 1
3530: DEC
3531: ST_TO_ADDR
3532: LD_INT 3
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 2
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_OWVAR 67
3554: ARRAY
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3697
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3559: LD_ADDR_OWVAR 37
3563: PUSH
3564: LD_INT 3
3566: PUSH
3567: LD_INT 2
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3586: LD_ADDR_OWVAR 39
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 2
3606: PPUSH
3607: CALL_OW 12
3611: ARRAY
3612: ST_TO_ADDR
// vc_control := control_remote ;
3613: LD_ADDR_OWVAR 38
3617: PUSH
3618: LD_INT 2
3620: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_OWVAR 40
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 5
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// veh := CreateVehicle ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: CALL_OW 45
3661: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_INT 3
3669: PPUSH
3670: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3674: LD_VAR 0 5
3678: PPUSH
3679: LD_INT 61
3681: PPUSH
3682: LD_INT 23
3684: PPUSH
3685: LD_INT 9
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 50
// end ;
3695: GO 3556
3697: POP
3698: POP
// end ; if gammaCommander = 1 then
3699: LD_EXP 13
3703: PUSH
3704: LD_INT 1
3706: EQUAL
3707: IFFALSE 3884
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3709: LD_ADDR_VAR 0 3
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 3
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: PUSH
3737: LD_OWVAR 67
3741: ARRAY
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3880
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3746: LD_ADDR_OWVAR 37
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 2
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 1
3763: PPUSH
3764: LD_INT 2
3766: PPUSH
3767: CALL_OW 12
3771: ARRAY
3772: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3773: LD_ADDR_OWVAR 39
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 2
3793: PPUSH
3794: CALL_OW 12
3798: ARRAY
3799: ST_TO_ADDR
// vc_control := control_manual ;
3800: LD_ADDR_OWVAR 38
3804: PUSH
3805: LD_INT 1
3807: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3808: LD_ADDR_OWVAR 40
3812: PUSH
3813: LD_INT 4
3815: PUSH
3816: LD_INT 5
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: CALL_OW 12
3833: ARRAY
3834: ST_TO_ADDR
// veh := CreateVehicle ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: CALL_OW 45
3844: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3845: LD_VAR 0 5
3849: PPUSH
3850: LD_INT 3
3852: PPUSH
3853: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3857: LD_VAR 0 5
3861: PPUSH
3862: LD_INT 61
3864: PPUSH
3865: LD_INT 23
3867: PPUSH
3868: LD_INT 9
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 50
// end ;
3878: GO 3743
3880: POP
3881: POP
// end else
3882: GO 4047
// if gammaCommander = 2 then
3884: LD_EXP 13
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: IFFALSE 4047
// begin bc_type := b_bunker ;
3894: LD_ADDR_OWVAR 42
3898: PUSH
3899: LD_INT 32
3901: ST_TO_ADDR
// bc_level := 6 ;
3902: LD_ADDR_OWVAR 43
3906: PUSH
3907: LD_INT 6
3909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: LD_INT 67
3917: PPUSH
3918: LD_INT 36
3920: PPUSH
3921: LD_INT 5
3923: PPUSH
3924: CALL_OW 47
3928: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3941: LD_ADDR_VAR 0 4
3945: PUSH
3946: LD_INT 61
3948: PPUSH
3949: LD_INT 40
3951: PPUSH
3952: LD_INT 5
3954: PPUSH
3955: CALL_OW 47
3959: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3960: LD_VAR 0 4
3964: PPUSH
3965: LD_INT 5
3967: PPUSH
3968: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3972: LD_ADDR_OWVAR 37
3976: PUSH
3977: LD_INT 2
3979: ST_TO_ADDR
// vc_engine := engine_combustion ;
3980: LD_ADDR_OWVAR 39
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// vc_control := control_manual ;
3988: LD_ADDR_OWVAR 38
3992: PUSH
3993: LD_INT 1
3995: ST_TO_ADDR
// vc_weapon := us_crane ;
3996: LD_ADDR_OWVAR 40
4000: PUSH
4001: LD_INT 13
4003: ST_TO_ADDR
// veh := CreateVehicle ;
4004: LD_ADDR_VAR 0 5
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 5
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4026: LD_VAR 0 5
4030: PPUSH
4031: LD_INT 61
4033: PPUSH
4034: LD_INT 23
4036: PPUSH
4037: LD_INT 9
4039: PPUSH
4040: LD_INT 0
4042: PPUSH
4043: CALL_OW 50
// end ; end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
// uc_side := 1 ;
4058: LD_ADDR_OWVAR 20
4062: PUSH
4063: LD_INT 1
4065: ST_TO_ADDR
// uc_nation := 1 ;
4066: LD_ADDR_OWVAR 21
4070: PUSH
4071: LD_INT 1
4073: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4074: LD_ADDR_EXP 26
4078: PUSH
4079: LD_STRING Denis
4081: PPUSH
4082: LD_EXP 1
4086: NOT
4087: PPUSH
4088: LD_STRING 06c_
4090: PPUSH
4091: CALL 41672 0 3
4095: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4096: LD_EXP 26
4100: PPUSH
4101: LD_INT 4
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4111: LD_ADDR_EXP 27
4115: PUSH
4116: LD_STRING Joan
4118: PPUSH
4119: LD_EXP 1
4123: NOT
4124: PPUSH
4125: LD_STRING 06c_
4127: PPUSH
4128: CALL 41672 0 3
4132: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4133: LD_EXP 27
4137: PPUSH
4138: LD_INT 4
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4148: LD_ADDR_EXP 24
4152: PUSH
4153: LD_STRING Mike
4155: PPUSH
4156: LD_EXP 1
4160: NOT
4161: PPUSH
4162: LD_STRING 06c_
4164: PPUSH
4165: CALL 41672 0 3
4169: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4170: LD_EXP 24
4174: PPUSH
4175: LD_INT 4
4177: PPUSH
4178: LD_INT 0
4180: PPUSH
4181: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4185: LD_STRING GladstoneIn07
4187: PPUSH
4188: LD_INT 0
4190: PPUSH
4191: CALL_OW 30
4195: NOT
4196: IFFALSE 4276
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4198: LD_ADDR_EXP 21
4202: PUSH
4203: LD_STRING Gladstone
4205: PPUSH
4206: LD_EXP 1
4210: NOT
4211: PPUSH
4212: LD_STRING 06c_
4214: PPUSH
4215: CALL 41672 0 3
4219: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4220: LD_EXP 21
4224: NOT
4225: PUSH
4226: LD_STRING GladstoneStayInDelta
4228: PPUSH
4229: LD_INT 0
4231: PPUSH
4232: CALL_OW 30
4236: AND
4237: IFFALSE 4261
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4239: LD_ADDR_EXP 21
4243: PUSH
4244: LD_STRING Gladstone
4246: PPUSH
4247: LD_EXP 1
4251: NOT
4252: PPUSH
4253: LD_STRING 05_
4255: PPUSH
4256: CALL 41672 0 3
4260: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4261: LD_EXP 21
4265: PPUSH
4266: LD_INT 4
4268: PPUSH
4269: LD_INT 0
4271: PPUSH
4272: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4276: LD_STRING LisaStayInDelta
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 30
4286: IFFALSE 4322
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4288: LD_ADDR_EXP 19
4292: PUSH
4293: LD_STRING Lisa
4295: PPUSH
4296: LD_INT 1
4298: PPUSH
4299: LD_STRING 05_
4301: PPUSH
4302: CALL 41672 0 3
4306: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4307: LD_EXP 19
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4322: LD_STRING BobbyStayInDelta
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 30
4332: IFFALSE 4368
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4334: LD_ADDR_EXP 17
4338: PUSH
4339: LD_STRING Bobby
4341: PPUSH
4342: LD_INT 1
4344: PPUSH
4345: LD_STRING 05_
4347: PPUSH
4348: CALL 41672 0 3
4352: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4353: LD_EXP 17
4357: PPUSH
4358: LD_INT 4
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4368: LD_STRING CyrusStayInDelta
4370: PPUSH
4371: LD_INT 0
4373: PPUSH
4374: CALL_OW 30
4378: IFFALSE 4414
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4380: LD_ADDR_EXP 18
4384: PUSH
4385: LD_STRING Cyrus
4387: PPUSH
4388: LD_INT 1
4390: PPUSH
4391: LD_STRING 05_
4393: PPUSH
4394: CALL 41672 0 3
4398: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4399: LD_EXP 18
4403: PPUSH
4404: LD_INT 4
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4414: LD_STRING BrownStayInDelta
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 30
4424: IFFALSE 4460
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4426: LD_ADDR_EXP 15
4430: PUSH
4431: LD_STRING Brown
4433: PPUSH
4434: LD_INT 1
4436: PPUSH
4437: LD_STRING 05_
4439: PPUSH
4440: CALL 41672 0 3
4444: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4445: LD_EXP 15
4449: PPUSH
4450: LD_INT 4
4452: PPUSH
4453: LD_INT 0
4455: PPUSH
4456: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4460: LD_STRING DonaldsonStayInDelta
4462: PPUSH
4463: LD_INT 0
4465: PPUSH
4466: CALL_OW 30
4470: IFFALSE 4506
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4472: LD_ADDR_EXP 16
4476: PUSH
4477: LD_STRING Donaldson
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_STRING 05_
4485: PPUSH
4486: CALL 41672 0 3
4490: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4491: LD_EXP 16
4495: PPUSH
4496: LD_INT 4
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4506: LD_ADDR_VAR 0 4
4510: PUSH
4511: LD_STRING OthersStayInDelta
4513: PPUSH
4514: CALL_OW 31
4518: ST_TO_ADDR
// if others > 2 then
4519: LD_VAR 0 4
4523: PUSH
4524: LD_INT 2
4526: GREATER
4527: IFFALSE 4590
// begin for j := 1 to 2 do
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_INT 2
4541: PUSH
4542: FOR_TO
4543: IFFALSE 4586
// begin SetTag ( others [ j ] , 107 ) ;
4545: LD_VAR 0 4
4549: PUSH
4550: LD_VAR 0 3
4554: ARRAY
4555: PPUSH
4556: LD_INT 107
4558: PPUSH
4559: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4563: LD_VAR 0 4
4567: PUSH
4568: LD_VAR 0 3
4572: ARRAY
4573: PPUSH
4574: LD_INT 4
4576: PPUSH
4577: LD_INT 0
4579: PPUSH
4580: CALL_OW 49
// end ;
4584: GO 4542
4586: POP
4587: POP
// end else
4588: GO 4651
// begin for j := 1 to others do
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: DOUBLE
4596: LD_INT 1
4598: DEC
4599: ST_TO_ADDR
4600: LD_VAR 0 4
4604: PUSH
4605: FOR_TO
4606: IFFALSE 4649
// begin SetTag ( others [ i ] , 107 ) ;
4608: LD_VAR 0 4
4612: PUSH
4613: LD_VAR 0 2
4617: ARRAY
4618: PPUSH
4619: LD_INT 107
4621: PPUSH
4622: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4626: LD_VAR 0 4
4630: PUSH
4631: LD_VAR 0 3
4635: ARRAY
4636: PPUSH
4637: LD_INT 4
4639: PPUSH
4640: LD_INT 0
4642: PPUSH
4643: CALL_OW 49
// end ;
4647: GO 4605
4649: POP
4650: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4651: LD_ADDR_VAR 0 4
4655: PUSH
4656: LD_STRING 06_other_apemans
4658: PPUSH
4659: CALL_OW 31
4663: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4664: LD_VAR 0 4
4668: PUSH
4669: LD_INT 3
4671: PUSH
4672: LD_INT 2
4674: PUSH
4675: LD_INT 2
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: PUSH
4687: LD_OWVAR 67
4691: ARRAY
4692: GREATEREQUAL
4693: IFFALSE 4726
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: LD_INT 3
4702: PUSH
4703: LD_INT 2
4705: PUSH
4706: LD_INT 2
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_OWVAR 67
4722: ARRAY
4723: ST_TO_ADDR
4724: GO 4736
// j := others ;
4726: LD_ADDR_VAR 0 3
4730: PUSH
4731: LD_VAR 0 4
4735: ST_TO_ADDR
// for i := 1 to j do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_VAR 0 3
4750: PUSH
4751: FOR_TO
4752: IFFALSE 4777
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4754: LD_VAR 0 4
4758: PUSH
4759: LD_VAR 0 2
4763: ARRAY
4764: PPUSH
4765: LD_INT 4
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
4775: GO 4751
4777: POP
4778: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4779: LD_INT 4
4781: PPUSH
4782: LD_INT 22
4784: PUSH
4785: LD_INT 1
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 21
4794: PUSH
4795: LD_INT 1
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: PPUSH
4811: LD_INT 53
4813: PPUSH
4814: LD_INT 19
4816: PPUSH
4817: CALL_OW 111
// end ;
4821: LD_VAR 0 1
4825: RET
// export function PrepareMacmillanSquad ; var i , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4826: LD_INT 0
4828: PPUSH
4829: PPUSH
4830: PPUSH
4831: PPUSH
4832: PPUSH
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
4840: PPUSH
4841: PPUSH
// prefix := 07c_ ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_STRING 07c_
4849: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4850: LD_ADDR_VAR 0 8
4854: PUSH
4855: LD_STRING 07_vehicles
4857: PPUSH
4858: EMPTY
4859: PPUSH
4860: CALL_OW 30
4864: ST_TO_ADDR
// if not vehicles and debug then
4865: LD_VAR 0 8
4869: NOT
4870: PUSH
4871: LD_EXP 1
4875: AND
4876: IFFALSE 4904
// vehicles := [ [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
4878: LD_ADDR_VAR 0 8
4882: PUSH
4883: LD_INT 2
4885: PUSH
4886: LD_INT 1
4888: PUSH
4889: LD_INT 1
4891: PUSH
4892: LD_INT 4
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: PUSH
4901: EMPTY
4902: LIST
4903: ST_TO_ADDR
// if not vehicles then
4904: LD_VAR 0 8
4908: NOT
4909: IFFALSE 4966
// begin area := westGammaSupportArea ;
4911: LD_ADDR_VAR 0 11
4915: PUSH
4916: LD_INT 16
4918: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4919: LD_ADDR_VAR 0 14
4923: PUSH
4924: LD_INT 37
4926: PUSH
4927: LD_INT 70
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4934: LD_ADDR_VAR 0 13
4938: PUSH
4939: LD_INT 43
4941: PUSH
4942: LD_INT 67
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// dir := 1 ;
4949: LD_ADDR_VAR 0 12
4953: PUSH
4954: LD_INT 1
4956: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4957: LD_INT 4200
4959: PPUSH
4960: CALL_OW 67
// end else
4964: GO 5012
// begin area := southGammaSupportArea ;
4966: LD_ADDR_VAR 0 11
4970: PUSH
4971: LD_INT 5
4973: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4974: LD_ADDR_VAR 0 14
4978: PUSH
4979: LD_INT 87
4981: PUSH
4982: LD_INT 147
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4989: LD_ADDR_VAR 0 13
4993: PUSH
4994: LD_INT 74
4996: PUSH
4997: LD_INT 129
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: ST_TO_ADDR
// dir := 0 ;
5004: LD_ADDR_VAR 0 12
5008: PUSH
5009: LD_INT 0
5011: ST_TO_ADDR
// end ; squad := [ ] ;
5012: LD_ADDR_VAR 0 5
5016: PUSH
5017: EMPTY
5018: ST_TO_ADDR
// tmp := [ ] ;
5019: LD_ADDR_VAR 0 6
5023: PUSH
5024: EMPTY
5025: ST_TO_ADDR
// tmpVehs := [ ] ;
5026: LD_ADDR_VAR 0 7
5030: PUSH
5031: EMPTY
5032: ST_TO_ADDR
// uc_side := 1 ;
5033: LD_ADDR_OWVAR 20
5037: PUSH
5038: LD_INT 1
5040: ST_TO_ADDR
// uc_nation := 1 ;
5041: LD_ADDR_OWVAR 21
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// if vehicles then
5049: LD_VAR 0 8
5053: IFFALSE 5275
// begin for i := 1 to vehicles do
5055: LD_ADDR_VAR 0 2
5059: PUSH
5060: DOUBLE
5061: LD_INT 1
5063: DEC
5064: ST_TO_ADDR
5065: LD_VAR 0 8
5069: PUSH
5070: FOR_TO
5071: IFFALSE 5273
// begin if vehicles [ i ] then
5073: LD_VAR 0 8
5077: PUSH
5078: LD_VAR 0 2
5082: ARRAY
5083: IFFALSE 5271
// begin if not vehicles [ i ] [ 1 ] then
5085: LD_VAR 0 8
5089: PUSH
5090: LD_VAR 0 2
5094: ARRAY
5095: PUSH
5096: LD_INT 1
5098: ARRAY
5099: NOT
5100: IFFALSE 5104
// continue ;
5102: GO 5070
// if not vehicles [ i ] [ 2 ] then
5104: LD_VAR 0 8
5108: PUSH
5109: LD_VAR 0 2
5113: ARRAY
5114: PUSH
5115: LD_INT 2
5117: ARRAY
5118: NOT
5119: IFFALSE 5123
// continue ;
5121: GO 5070
// if not vehicles [ i ] [ 3 ] then
5123: LD_VAR 0 8
5127: PUSH
5128: LD_VAR 0 2
5132: ARRAY
5133: PUSH
5134: LD_INT 3
5136: ARRAY
5137: NOT
5138: IFFALSE 5142
// continue ;
5140: GO 5070
// if not vehicles [ i ] [ 4 ] then
5142: LD_VAR 0 8
5146: PUSH
5147: LD_VAR 0 2
5151: ARRAY
5152: PUSH
5153: LD_INT 4
5155: ARRAY
5156: NOT
5157: IFFALSE 5161
// continue ;
5159: GO 5070
// vc_chassis := vehicles [ i ] [ 1 ] ;
5161: LD_ADDR_OWVAR 37
5165: PUSH
5166: LD_VAR 0 8
5170: PUSH
5171: LD_VAR 0 2
5175: ARRAY
5176: PUSH
5177: LD_INT 1
5179: ARRAY
5180: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
5181: LD_ADDR_OWVAR 39
5185: PUSH
5186: LD_VAR 0 8
5190: PUSH
5191: LD_VAR 0 2
5195: ARRAY
5196: PUSH
5197: LD_INT 2
5199: ARRAY
5200: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
5201: LD_ADDR_OWVAR 38
5205: PUSH
5206: LD_VAR 0 8
5210: PUSH
5211: LD_VAR 0 2
5215: ARRAY
5216: PUSH
5217: LD_INT 3
5219: ARRAY
5220: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
5221: LD_ADDR_OWVAR 40
5225: PUSH
5226: LD_VAR 0 8
5230: PUSH
5231: LD_VAR 0 2
5235: ARRAY
5236: PUSH
5237: LD_INT 4
5239: ARRAY
5240: ST_TO_ADDR
// veh := CreateVehicle ;
5241: LD_ADDR_VAR 0 9
5245: PUSH
5246: CALL_OW 45
5250: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5251: LD_ADDR_VAR 0 7
5255: PUSH
5256: LD_VAR 0 7
5260: PPUSH
5261: LD_VAR 0 9
5265: PPUSH
5266: CALL 79404 0 2
5270: ST_TO_ADDR
// end ; end ;
5271: GO 5070
5273: POP
5274: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5275: LD_ADDR_EXP 14
5279: PUSH
5280: LD_STRING JMM
5282: PPUSH
5283: LD_EXP 1
5287: NOT
5288: PPUSH
5289: LD_VAR 0 10
5293: PPUSH
5294: CALL 41672 0 3
5298: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5299: LD_EXP 13
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: LD_INT 3
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: IN
5314: PUSH
5315: LD_EXP 15
5319: NOT
5320: AND
5321: IFFALSE 5382
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5323: LD_ADDR_EXP 15
5327: PUSH
5328: LD_STRING Brown
5330: PPUSH
5331: LD_EXP 1
5335: NOT
5336: PPUSH
5337: LD_VAR 0 10
5341: PPUSH
5342: CALL 41672 0 3
5346: ST_TO_ADDR
// if Brown then
5347: LD_EXP 15
5351: IFFALSE 5382
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5353: LD_ADDR_VAR 0 6
5357: PUSH
5358: LD_VAR 0 6
5362: PPUSH
5363: LD_VAR 0 6
5367: PUSH
5368: LD_INT 1
5370: PLUS
5371: PPUSH
5372: LD_EXP 15
5376: PPUSH
5377: CALL_OW 1
5381: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5382: LD_EXP 13
5386: PUSH
5387: LD_INT 2
5389: PUSH
5390: LD_INT 3
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: IN
5397: PUSH
5398: LD_EXP 16
5402: NOT
5403: AND
5404: IFFALSE 5465
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5406: LD_ADDR_EXP 16
5410: PUSH
5411: LD_STRING Donaldson
5413: PPUSH
5414: LD_EXP 1
5418: NOT
5419: PPUSH
5420: LD_VAR 0 10
5424: PPUSH
5425: CALL 41672 0 3
5429: ST_TO_ADDR
// if Donaldson then
5430: LD_EXP 16
5434: IFFALSE 5465
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5436: LD_ADDR_VAR 0 6
5440: PUSH
5441: LD_VAR 0 6
5445: PPUSH
5446: LD_VAR 0 6
5450: PUSH
5451: LD_INT 1
5453: PLUS
5454: PPUSH
5455: LD_EXP 16
5459: PPUSH
5460: CALL_OW 1
5464: ST_TO_ADDR
// end ; if not Bobby then
5465: LD_EXP 17
5469: NOT
5470: IFFALSE 5528
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5472: LD_ADDR_EXP 17
5476: PUSH
5477: LD_STRING Bobby
5479: PPUSH
5480: LD_INT 1
5482: PPUSH
5483: LD_VAR 0 10
5487: PPUSH
5488: CALL 41672 0 3
5492: ST_TO_ADDR
// if Bobby then
5493: LD_EXP 17
5497: IFFALSE 5528
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5499: LD_ADDR_VAR 0 6
5503: PUSH
5504: LD_VAR 0 6
5508: PPUSH
5509: LD_VAR 0 6
5513: PUSH
5514: LD_INT 1
5516: PLUS
5517: PPUSH
5518: LD_EXP 17
5522: PPUSH
5523: CALL_OW 1
5527: ST_TO_ADDR
// end ; if not Cyrus then
5528: LD_EXP 18
5532: NOT
5533: IFFALSE 5591
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5535: LD_ADDR_EXP 18
5539: PUSH
5540: LD_STRING Cyrus
5542: PPUSH
5543: LD_INT 1
5545: PPUSH
5546: LD_VAR 0 10
5550: PPUSH
5551: CALL 41672 0 3
5555: ST_TO_ADDR
// if Cyrus then
5556: LD_EXP 18
5560: IFFALSE 5591
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5562: LD_ADDR_VAR 0 6
5566: PUSH
5567: LD_VAR 0 6
5571: PPUSH
5572: LD_VAR 0 6
5576: PUSH
5577: LD_INT 1
5579: PLUS
5580: PPUSH
5581: LD_EXP 18
5585: PPUSH
5586: CALL_OW 1
5590: ST_TO_ADDR
// end ; if not Lisa then
5591: LD_EXP 19
5595: NOT
5596: IFFALSE 5657
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5598: LD_ADDR_EXP 19
5602: PUSH
5603: LD_STRING Lisa
5605: PPUSH
5606: LD_EXP 1
5610: NOT
5611: PPUSH
5612: LD_VAR 0 10
5616: PPUSH
5617: CALL 41672 0 3
5621: ST_TO_ADDR
// if Lisa then
5622: LD_EXP 19
5626: IFFALSE 5657
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5628: LD_ADDR_VAR 0 6
5632: PUSH
5633: LD_VAR 0 6
5637: PPUSH
5638: LD_VAR 0 6
5642: PUSH
5643: LD_INT 1
5645: PLUS
5646: PPUSH
5647: LD_EXP 19
5651: PPUSH
5652: CALL_OW 1
5656: ST_TO_ADDR
// end ; if not Frank then
5657: LD_EXP 20
5661: NOT
5662: IFFALSE 5723
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5664: LD_ADDR_EXP 20
5668: PUSH
5669: LD_STRING Frank
5671: PPUSH
5672: LD_EXP 1
5676: NOT
5677: PPUSH
5678: LD_VAR 0 10
5682: PPUSH
5683: CALL 41672 0 3
5687: ST_TO_ADDR
// if Frank then
5688: LD_EXP 20
5692: IFFALSE 5723
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5694: LD_ADDR_VAR 0 6
5698: PUSH
5699: LD_VAR 0 6
5703: PPUSH
5704: LD_VAR 0 6
5708: PUSH
5709: LD_INT 1
5711: PLUS
5712: PPUSH
5713: LD_EXP 20
5717: PPUSH
5718: CALL_OW 1
5722: ST_TO_ADDR
// end ; if not Kikuchi then
5723: LD_EXP 22
5727: NOT
5728: IFFALSE 5786
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5730: LD_ADDR_EXP 22
5734: PUSH
5735: LD_STRING Kikuchi
5737: PPUSH
5738: LD_INT 1
5740: PPUSH
5741: LD_VAR 0 10
5745: PPUSH
5746: CALL 41672 0 3
5750: ST_TO_ADDR
// if Kikuchi then
5751: LD_EXP 22
5755: IFFALSE 5786
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5757: LD_ADDR_VAR 0 6
5761: PUSH
5762: LD_VAR 0 6
5766: PPUSH
5767: LD_VAR 0 6
5771: PUSH
5772: LD_INT 1
5774: PLUS
5775: PPUSH
5776: LD_EXP 22
5780: PPUSH
5781: CALL_OW 1
5785: ST_TO_ADDR
// end ; if not Gladstone then
5786: LD_EXP 21
5790: NOT
5791: IFFALSE 5852
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5793: LD_ADDR_EXP 21
5797: PUSH
5798: LD_STRING Gladstone
5800: PPUSH
5801: LD_EXP 1
5805: NOT
5806: PPUSH
5807: LD_VAR 0 10
5811: PPUSH
5812: CALL 41672 0 3
5816: ST_TO_ADDR
// if Gladstone then
5817: LD_EXP 21
5821: IFFALSE 5852
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5823: LD_ADDR_VAR 0 6
5827: PUSH
5828: LD_VAR 0 6
5832: PPUSH
5833: LD_VAR 0 6
5837: PUSH
5838: LD_INT 1
5840: PLUS
5841: PPUSH
5842: LD_EXP 21
5846: PPUSH
5847: CALL_OW 1
5851: ST_TO_ADDR
// end ; if not Khatam then
5852: LD_EXP 23
5856: NOT
5857: IFFALSE 5915
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5859: LD_ADDR_EXP 23
5863: PUSH
5864: LD_STRING Khatam
5866: PPUSH
5867: LD_INT 1
5869: PPUSH
5870: LD_VAR 0 10
5874: PPUSH
5875: CALL 41672 0 3
5879: ST_TO_ADDR
// if Khatam then
5880: LD_EXP 23
5884: IFFALSE 5915
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5886: LD_ADDR_VAR 0 6
5890: PUSH
5891: LD_VAR 0 6
5895: PPUSH
5896: LD_VAR 0 6
5900: PUSH
5901: LD_INT 1
5903: PLUS
5904: PPUSH
5905: LD_EXP 23
5909: PPUSH
5910: CALL_OW 1
5914: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5915: LD_ADDR_VAR 0 4
5919: PUSH
5920: LD_STRING 07c_others
5922: PPUSH
5923: CALL_OW 31
5927: ST_TO_ADDR
// squad := others ;
5928: LD_ADDR_VAR 0 5
5932: PUSH
5933: LD_VAR 0 4
5937: ST_TO_ADDR
// if others then
5938: LD_VAR 0 4
5942: IFFALSE 5993
// for i in others do
5944: LD_ADDR_VAR 0 2
5948: PUSH
5949: LD_VAR 0 4
5953: PUSH
5954: FOR_IN
5955: IFFALSE 5991
// begin SetTag ( i , 108 ) ;
5957: LD_VAR 0 2
5961: PPUSH
5962: LD_INT 108
5964: PPUSH
5965: CALL_OW 109
// tmp := Join ( tmp , i ) ;
5969: LD_ADDR_VAR 0 6
5973: PUSH
5974: LD_VAR 0 6
5978: PPUSH
5979: LD_VAR 0 2
5983: PPUSH
5984: CALL 79404 0 2
5988: ST_TO_ADDR
// end ;
5989: GO 5954
5991: POP
5992: POP
// if tmp then
5993: LD_VAR 0 6
5997: IFFALSE 6232
// begin tmp := Join ( tmp , JMM ) ;
5999: LD_ADDR_VAR 0 6
6003: PUSH
6004: LD_VAR 0 6
6008: PPUSH
6009: LD_EXP 14
6013: PPUSH
6014: CALL 79404 0 2
6018: ST_TO_ADDR
// for i in tmp do
6019: LD_ADDR_VAR 0 2
6023: PUSH
6024: LD_VAR 0 6
6028: PUSH
6029: FOR_IN
6030: IFFALSE 6230
// begin SetDir ( i , dir ) ;
6032: LD_VAR 0 2
6036: PPUSH
6037: LD_VAR 0 12
6041: PPUSH
6042: CALL_OW 233
// if GetClass ( i ) = class_mechanic and tmpVehs then
6046: LD_VAR 0 2
6050: PPUSH
6051: CALL_OW 257
6055: PUSH
6056: LD_INT 3
6058: EQUAL
6059: PUSH
6060: LD_VAR 0 7
6064: AND
6065: IFFALSE 6155
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
6067: LD_VAR 0 7
6071: PUSH
6072: LD_INT 1
6074: ARRAY
6075: PPUSH
6076: LD_INT 0
6078: PPUSH
6079: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
6083: LD_VAR 0 7
6087: PUSH
6088: LD_INT 1
6090: ARRAY
6091: PPUSH
6092: LD_VAR 0 14
6096: PUSH
6097: LD_INT 1
6099: ARRAY
6100: PPUSH
6101: LD_VAR 0 14
6105: PUSH
6106: LD_INT 2
6108: ARRAY
6109: PPUSH
6110: LD_INT 0
6112: PPUSH
6113: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6117: LD_VAR 0 2
6121: PPUSH
6122: LD_VAR 0 7
6126: PUSH
6127: LD_INT 1
6129: ARRAY
6130: PPUSH
6131: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6135: LD_ADDR_VAR 0 7
6139: PUSH
6140: LD_VAR 0 7
6144: PPUSH
6145: LD_INT 1
6147: PPUSH
6148: CALL_OW 3
6152: ST_TO_ADDR
// end else
6153: GO 6172
// PlaceUnitArea ( i , area , false ) ;
6155: LD_VAR 0 2
6159: PPUSH
6160: LD_VAR 0 11
6164: PPUSH
6165: LD_INT 0
6167: PPUSH
6168: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6172: LD_VAR 0 2
6176: PPUSH
6177: LD_VAR 0 13
6181: PUSH
6182: LD_INT 1
6184: ARRAY
6185: PPUSH
6186: LD_VAR 0 13
6190: PUSH
6191: LD_INT 2
6193: ARRAY
6194: PPUSH
6195: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6199: LD_INT 35
6201: PPUSH
6202: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6206: LD_VAR 0 11
6210: PPUSH
6211: LD_INT 22
6213: PUSH
6214: LD_INT 1
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: PPUSH
6221: CALL_OW 70
6225: NOT
6226: IFFALSE 6199
// end ;
6228: GO 6029
6230: POP
6231: POP
// end ; if not IsPlaced ( JMM ) or not IsInUnit ( JMM ) then
6232: LD_EXP 14
6236: PPUSH
6237: CALL_OW 305
6241: NOT
6242: PUSH
6243: LD_EXP 14
6247: PPUSH
6248: CALL_OW 310
6252: NOT
6253: OR
6254: IFFALSE 6286
// PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6256: LD_EXP 14
6260: PPUSH
6261: LD_VAR 0 14
6265: PUSH
6266: LD_INT 1
6268: ARRAY
6269: PPUSH
6270: LD_VAR 0 14
6274: PUSH
6275: LD_INT 2
6277: ARRAY
6278: PPUSH
6279: LD_INT 0
6281: PPUSH
6282: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6286: LD_EXP 14
6290: PPUSH
6291: LD_VAR 0 13
6295: PUSH
6296: LD_INT 1
6298: ARRAY
6299: PPUSH
6300: LD_VAR 0 13
6304: PUSH
6305: LD_INT 2
6307: ARRAY
6308: PPUSH
6309: CALL_OW 111
// jmmArrival := true ;
6313: LD_ADDR_EXP 8
6317: PUSH
6318: LD_INT 1
6320: ST_TO_ADDR
// end ;
6321: LD_VAR 0 1
6325: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6326: LD_INT 0
6328: PPUSH
6329: PPUSH
6330: PPUSH
6331: PPUSH
6332: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6333: LD_INT 1
6335: PPUSH
6336: LD_INT 17
6338: PPUSH
6339: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6343: LD_INT 2
6345: PPUSH
6346: LD_INT 17
6348: PPUSH
6349: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_empty ] ) ;
6353: LD_ADDR_VAR 0 5
6357: PUSH
6358: LD_INT 6
6360: PPUSH
6361: LD_INT 58
6363: PUSH
6364: EMPTY
6365: LIST
6366: PPUSH
6367: CALL_OW 70
6371: ST_TO_ADDR
// if tmp then
6372: LD_VAR 0 5
6376: IFFALSE 6404
// for i in tmp do
6378: LD_ADDR_VAR 0 2
6382: PUSH
6383: LD_VAR 0 5
6387: PUSH
6388: FOR_IN
6389: IFFALSE 6402
// RemoveUnit ( i ) ;
6391: LD_VAR 0 2
6395: PPUSH
6396: CALL_OW 64
6400: GO 6388
6402: POP
6403: POP
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6404: LD_ADDR_VAR 0 5
6408: PUSH
6409: LD_INT 6
6411: PPUSH
6412: LD_INT 3
6414: PUSH
6415: LD_INT 21
6417: PUSH
6418: LD_INT 3
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PPUSH
6429: CALL_OW 70
6433: ST_TO_ADDR
// if tmp then
6434: LD_VAR 0 5
6438: IFFALSE 6462
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6440: LD_VAR 0 5
6444: PPUSH
6445: LD_INT 33
6447: PPUSH
6448: LD_INT 39
6450: PPUSH
6451: CALL_OW 111
// wait ( 0 0$3 ) ;
6455: LD_INT 105
6457: PPUSH
6458: CALL_OW 67
// end ; repeat wait ( 0 0$2 ) ;
6462: LD_INT 70
6464: PPUSH
6465: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6469: LD_INT 6
6471: PPUSH
6472: LD_INT 50
6474: PUSH
6475: EMPTY
6476: LIST
6477: PPUSH
6478: CALL_OW 70
6482: NOT
6483: IFFALSE 6462
// uc_side := 4 ;
6485: LD_ADDR_OWVAR 20
6489: PUSH
6490: LD_INT 4
6492: ST_TO_ADDR
// uc_nation := 1 ;
6493: LD_ADDR_OWVAR 21
6497: PUSH
6498: LD_INT 1
6500: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6501: LD_ADDR_EXP 28
6505: PUSH
6506: LD_STRING Sikorski
6508: PPUSH
6509: LD_INT 0
6511: PPUSH
6512: LD_STRING 
6514: PPUSH
6515: CALL 41672 0 3
6519: ST_TO_ADDR
// vc_engine := engine_combustion ;
6520: LD_ADDR_OWVAR 39
6524: PUSH
6525: LD_INT 1
6527: ST_TO_ADDR
// vc_control := control_manual ;
6528: LD_ADDR_OWVAR 38
6532: PUSH
6533: LD_INT 1
6535: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6536: LD_ADDR_OWVAR 40
6540: PUSH
6541: LD_INT 6
6543: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6544: LD_ADDR_OWVAR 37
6548: PUSH
6549: LD_INT 4
6551: ST_TO_ADDR
// veh := CreateVehicle ;
6552: LD_ADDR_VAR 0 4
6556: PUSH
6557: CALL_OW 45
6561: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6562: LD_VAR 0 4
6566: PPUSH
6567: LD_INT 3
6569: PPUSH
6570: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6574: LD_VAR 0 4
6578: PPUSH
6579: LD_INT 4
6581: NEG
6582: PPUSH
6583: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6587: LD_VAR 0 4
6591: PPUSH
6592: LD_INT 70
6594: PPUSH
6595: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6599: LD_VAR 0 4
6603: PPUSH
6604: LD_INT 6
6606: PPUSH
6607: LD_INT 0
6609: PPUSH
6610: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6614: LD_EXP 28
6618: PPUSH
6619: LD_VAR 0 4
6623: PPUSH
6624: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6628: LD_EXP 28
6632: PPUSH
6633: LD_INT 37
6635: PPUSH
6636: LD_INT 30
6638: PPUSH
6639: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6643: LD_INT 10
6645: PPUSH
6646: CALL_OW 67
// InitHc_All ( ) ;
6650: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6654: LD_ADDR_VAR 0 2
6658: PUSH
6659: DOUBLE
6660: LD_INT 1
6662: DEC
6663: ST_TO_ADDR
6664: LD_INT 3
6666: PUSH
6667: LD_INT 2
6669: PUSH
6670: LD_INT 2
6672: PUSH
6673: LD_INT 2
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: PUSH
6682: LD_OWVAR 67
6686: ARRAY
6687: PUSH
6688: FOR_TO
6689: IFFALSE 6824
// begin repeat wait ( 0 0$2 ) ;
6691: LD_INT 70
6693: PPUSH
6694: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6698: LD_INT 6
6700: PPUSH
6701: LD_INT 50
6703: PUSH
6704: EMPTY
6705: LIST
6706: PPUSH
6707: CALL_OW 70
6711: NOT
6712: IFFALSE 6691
// uc_side := 4 ;
6714: LD_ADDR_OWVAR 20
6718: PUSH
6719: LD_INT 4
6721: ST_TO_ADDR
// uc_nation := 1 ;
6722: LD_ADDR_OWVAR 21
6726: PUSH
6727: LD_INT 1
6729: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6730: LD_INT 0
6732: PPUSH
6733: LD_INT 1
6735: PPUSH
6736: LD_INT 4
6738: PPUSH
6739: LD_INT 7
6741: PPUSH
6742: CALL_OW 12
6746: PPUSH
6747: CALL_OW 380
// un := CreateHuman ;
6751: LD_ADDR_VAR 0 3
6755: PUSH
6756: CALL_OW 44
6760: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6761: LD_VAR 0 3
6765: PPUSH
6766: LD_INT 3
6768: PPUSH
6769: CALL_OW 233
// SetTag ( un , 101 ) ;
6773: LD_VAR 0 3
6777: PPUSH
6778: LD_INT 101
6780: PPUSH
6781: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6785: LD_VAR 0 3
6789: PPUSH
6790: LD_INT 6
6792: PPUSH
6793: LD_INT 0
6795: PPUSH
6796: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6800: LD_VAR 0 3
6804: PPUSH
6805: LD_INT 25
6807: PPUSH
6808: LD_INT 27
6810: PPUSH
6811: CALL_OW 111
// wait ( 0 0$1 ) ;
6815: LD_INT 35
6817: PPUSH
6818: CALL_OW 67
// end ;
6822: GO 6688
6824: POP
6825: POP
// repeat wait ( 0 0$2 ) ;
6826: LD_INT 70
6828: PPUSH
6829: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , class_soldier ] ] ) do
6833: LD_ADDR_VAR 0 2
6837: PUSH
6838: LD_INT 22
6840: PUSH
6841: LD_INT 4
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PUSH
6848: LD_INT 25
6850: PUSH
6851: LD_INT 1
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PPUSH
6862: CALL_OW 69
6866: PUSH
6867: FOR_IN
6868: IFFALSE 6931
// ComAttackUnit ( i , FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) [ 1 ] ) ;
6870: LD_VAR 0 2
6874: PPUSH
6875: LD_INT 17
6877: PPUSH
6878: LD_INT 22
6880: PUSH
6881: LD_INT 1
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: LD_INT 2
6890: PUSH
6891: LD_INT 58
6893: PUSH
6894: EMPTY
6895: LIST
6896: PUSH
6897: LD_INT 33
6899: PUSH
6900: LD_INT 2
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: LIST
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PPUSH
6916: CALL_OW 70
6920: PUSH
6921: LD_INT 1
6923: ARRAY
6924: PPUSH
6925: CALL_OW 115
6929: GO 6867
6931: POP
6932: POP
// until not FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) ;
6933: LD_INT 17
6935: PPUSH
6936: LD_INT 22
6938: PUSH
6939: LD_INT 1
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 2
6948: PUSH
6949: LD_INT 58
6951: PUSH
6952: EMPTY
6953: LIST
6954: PUSH
6955: LD_INT 33
6957: PUSH
6958: LD_INT 2
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PPUSH
6974: CALL_OW 70
6978: NOT
6979: IFFALSE 6826
// for i := 1 to 2 do
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: DOUBLE
6987: LD_INT 1
6989: DEC
6990: ST_TO_ADDR
6991: LD_INT 2
6993: PUSH
6994: FOR_TO
6995: IFFALSE 7107
// begin uc_side := 4 ;
6997: LD_ADDR_OWVAR 20
7001: PUSH
7002: LD_INT 4
7004: ST_TO_ADDR
// uc_nation := 1 ;
7005: LD_ADDR_OWVAR 21
7009: PUSH
7010: LD_INT 1
7012: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
7013: LD_INT 0
7015: PPUSH
7016: LD_INT 4
7018: PPUSH
7019: LD_INT 3
7021: PPUSH
7022: LD_INT 5
7024: PPUSH
7025: CALL_OW 12
7029: PPUSH
7030: CALL_OW 380
// un := CreateHuman ;
7034: LD_ADDR_VAR 0 3
7038: PUSH
7039: CALL_OW 44
7043: ST_TO_ADDR
// SetDir ( un , 3 ) ;
7044: LD_VAR 0 3
7048: PPUSH
7049: LD_INT 3
7051: PPUSH
7052: CALL_OW 233
// SetTag ( un , 101 ) ;
7056: LD_VAR 0 3
7060: PPUSH
7061: LD_INT 101
7063: PPUSH
7064: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
7068: LD_VAR 0 3
7072: PPUSH
7073: LD_INT 6
7075: PPUSH
7076: LD_INT 0
7078: PPUSH
7079: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
7083: LD_VAR 0 3
7087: PPUSH
7088: LD_INT 25
7090: PPUSH
7091: LD_INT 27
7093: PPUSH
7094: CALL_OW 111
// wait ( 0 0$1 ) ;
7098: LD_INT 35
7100: PPUSH
7101: CALL_OW 67
// end ;
7105: GO 6994
7107: POP
7108: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
7109: LD_ADDR_VAR 0 2
7113: PUSH
7114: DOUBLE
7115: LD_INT 1
7117: DEC
7118: ST_TO_ADDR
7119: LD_INT 5
7121: PUSH
7122: LD_INT 4
7124: PUSH
7125: LD_INT 3
7127: PUSH
7128: LD_INT 3
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: PUSH
7137: LD_OWVAR 67
7141: ARRAY
7142: PUSH
7143: FOR_TO
7144: IFFALSE 7409
// begin repeat wait ( 0 0$2 ) ;
7146: LD_INT 70
7148: PPUSH
7149: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
7153: LD_INT 6
7155: PPUSH
7156: LD_INT 50
7158: PUSH
7159: EMPTY
7160: LIST
7161: PPUSH
7162: CALL_OW 70
7166: NOT
7167: IFFALSE 7146
// uc_side := 4 ;
7169: LD_ADDR_OWVAR 20
7173: PUSH
7174: LD_INT 4
7176: ST_TO_ADDR
// uc_nation := 1 ;
7177: LD_ADDR_OWVAR 21
7181: PUSH
7182: LD_INT 1
7184: ST_TO_ADDR
// vc_engine := engine_combustion ;
7185: LD_ADDR_OWVAR 39
7189: PUSH
7190: LD_INT 1
7192: ST_TO_ADDR
// vc_control := control_manual ;
7193: LD_ADDR_OWVAR 38
7197: PUSH
7198: LD_INT 1
7200: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
7201: LD_ADDR_OWVAR 40
7205: PUSH
7206: LD_INT 5
7208: PUSH
7209: LD_INT 7
7211: PUSH
7212: LD_INT 5
7214: PUSH
7215: LD_INT 4
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: PUSH
7224: LD_VAR 0 2
7228: PUSH
7229: LD_INT 4
7231: MOD
7232: PUSH
7233: LD_INT 1
7235: PLUS
7236: ARRAY
7237: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
7238: LD_ADDR_OWVAR 37
7242: PUSH
7243: LD_INT 3
7245: PUSH
7246: LD_INT 3
7248: PUSH
7249: LD_INT 4
7251: PUSH
7252: LD_INT 4
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: PUSH
7261: LD_VAR 0 2
7265: PUSH
7266: LD_INT 4
7268: MOD
7269: PUSH
7270: LD_INT 1
7272: PLUS
7273: ARRAY
7274: ST_TO_ADDR
// veh := CreateVehicle ;
7275: LD_ADDR_VAR 0 4
7279: PUSH
7280: CALL_OW 45
7284: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
7285: LD_VAR 0 4
7289: PPUSH
7290: LD_INT 3
7292: PPUSH
7293: CALL_OW 233
// SetTag ( veh , 0 ) ;
7297: LD_VAR 0 4
7301: PPUSH
7302: LD_INT 0
7304: PPUSH
7305: CALL_OW 109
// SetFuel ( veh , 70 ) ;
7309: LD_VAR 0 4
7313: PPUSH
7314: LD_INT 70
7316: PPUSH
7317: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
7321: LD_VAR 0 4
7325: PPUSH
7326: LD_INT 6
7328: PPUSH
7329: LD_INT 0
7331: PPUSH
7332: CALL_OW 49
// InitHc ;
7336: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
7340: LD_INT 0
7342: PPUSH
7343: LD_INT 3
7345: PPUSH
7346: LD_INT 4
7348: PPUSH
7349: LD_INT 7
7351: PPUSH
7352: CALL_OW 12
7356: PPUSH
7357: CALL_OW 380
// un := CreateHuman ;
7361: LD_ADDR_VAR 0 3
7365: PUSH
7366: CALL_OW 44
7370: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7371: LD_VAR 0 3
7375: PPUSH
7376: LD_VAR 0 4
7380: PPUSH
7381: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
7385: LD_VAR 0 3
7389: PPUSH
7390: LD_INT 30
7392: PPUSH
7393: LD_INT 22
7395: PPUSH
7396: CALL_OW 111
// wait ( 0 0$3 ) ;
7400: LD_INT 105
7402: PPUSH
7403: CALL_OW 67
// end ;
7407: GO 7143
7409: POP
7410: POP
// wait ( 0 0$10 ) ;
7411: LD_INT 350
7413: PPUSH
7414: CALL_OW 67
// end ;
7418: LD_VAR 0 1
7422: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7423: LD_INT 0
7425: PPUSH
7426: PPUSH
7427: PPUSH
7428: PPUSH
// gammaBase := [ ] ;
7429: LD_ADDR_VAR 0 4
7433: PUSH
7434: EMPTY
7435: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7436: LD_ADDR_VAR 0 5
7440: PUSH
7441: LD_VAR 0 1
7445: PPUSH
7446: LD_INT 22
7448: PUSH
7449: LD_INT 1
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: LD_INT 21
7458: PUSH
7459: LD_INT 3
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: LD_INT 50
7468: PUSH
7469: EMPTY
7470: LIST
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: PPUSH
7477: CALL_OW 70
7481: ST_TO_ADDR
// for i in buildings do
7482: LD_ADDR_VAR 0 3
7486: PUSH
7487: LD_VAR 0 5
7491: PUSH
7492: FOR_IN
7493: IFFALSE 7930
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7495: LD_VAR 0 3
7499: PPUSH
7500: CALL_OW 266
7504: PUSH
7505: LD_INT 6
7507: PUSH
7508: LD_INT 7
7510: PUSH
7511: LD_INT 8
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: IN
7519: IFFALSE 7633
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7521: LD_ADDR_VAR 0 4
7525: PUSH
7526: LD_VAR 0 4
7530: PUSH
7531: LD_VAR 0 3
7535: PPUSH
7536: CALL_OW 266
7540: PUSH
7541: LD_VAR 0 3
7545: PPUSH
7546: CALL_OW 250
7550: PUSH
7551: LD_VAR 0 3
7555: PPUSH
7556: CALL_OW 251
7560: PUSH
7561: LD_VAR 0 3
7565: PPUSH
7566: CALL_OW 254
7570: PUSH
7571: LD_VAR 0 3
7575: PPUSH
7576: CALL_OW 267
7580: PUSH
7581: LD_VAR 0 3
7585: PPUSH
7586: CALL_OW 248
7590: PUSH
7591: LD_VAR 0 3
7595: PPUSH
7596: LD_INT 1
7598: PPUSH
7599: CALL_OW 268
7603: PUSH
7604: LD_VAR 0 3
7608: PPUSH
7609: LD_INT 2
7611: PPUSH
7612: CALL_OW 268
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: PUSH
7627: EMPTY
7628: LIST
7629: ADD
7630: ST_TO_ADDR
7631: GO 7928
// if GetBType ( i ) = b_bunker then
7633: LD_VAR 0 3
7637: PPUSH
7638: CALL_OW 266
7642: PUSH
7643: LD_INT 32
7645: EQUAL
7646: IFFALSE 7743
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7648: LD_ADDR_VAR 0 4
7652: PUSH
7653: LD_VAR 0 4
7657: PUSH
7658: LD_VAR 0 3
7662: PPUSH
7663: CALL_OW 266
7667: PUSH
7668: LD_VAR 0 3
7672: PPUSH
7673: CALL_OW 250
7677: PUSH
7678: LD_VAR 0 3
7682: PPUSH
7683: CALL_OW 251
7687: PUSH
7688: LD_VAR 0 3
7692: PPUSH
7693: CALL_OW 254
7697: PUSH
7698: LD_VAR 0 3
7702: PPUSH
7703: CALL_OW 267
7707: PUSH
7708: LD_VAR 0 3
7712: PPUSH
7713: CALL_OW 248
7717: PUSH
7718: LD_VAR 0 3
7722: PPUSH
7723: CALL_OW 269
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: ADD
7740: ST_TO_ADDR
7741: GO 7928
// if GetBType ( i ) = b_factory then
7743: LD_VAR 0 3
7747: PPUSH
7748: CALL_OW 266
7752: PUSH
7753: LD_INT 3
7755: EQUAL
7756: IFFALSE 7846
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7758: LD_ADDR_VAR 0 4
7762: PUSH
7763: LD_VAR 0 4
7767: PPUSH
7768: LD_INT 1
7770: PPUSH
7771: LD_VAR 0 3
7775: PPUSH
7776: CALL_OW 266
7780: PUSH
7781: LD_VAR 0 3
7785: PPUSH
7786: CALL_OW 250
7790: PUSH
7791: LD_VAR 0 3
7795: PPUSH
7796: CALL_OW 251
7800: PUSH
7801: LD_VAR 0 3
7805: PPUSH
7806: CALL_OW 254
7810: PUSH
7811: LD_VAR 0 3
7815: PPUSH
7816: CALL_OW 267
7820: PUSH
7821: LD_VAR 0 3
7825: PPUSH
7826: CALL_OW 248
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: PPUSH
7839: CALL_OW 2
7843: ST_TO_ADDR
7844: GO 7928
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7846: LD_ADDR_VAR 0 4
7850: PUSH
7851: LD_VAR 0 4
7855: PUSH
7856: LD_VAR 0 3
7860: PPUSH
7861: CALL_OW 266
7865: PUSH
7866: LD_VAR 0 3
7870: PPUSH
7871: CALL_OW 250
7875: PUSH
7876: LD_VAR 0 3
7880: PPUSH
7881: CALL_OW 251
7885: PUSH
7886: LD_VAR 0 3
7890: PPUSH
7891: CALL_OW 254
7895: PUSH
7896: LD_VAR 0 3
7900: PPUSH
7901: CALL_OW 267
7905: PUSH
7906: LD_VAR 0 3
7910: PPUSH
7911: CALL_OW 248
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: PUSH
7924: EMPTY
7925: LIST
7926: ADD
7927: ST_TO_ADDR
// end ;
7928: GO 7492
7930: POP
7931: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7932: LD_VAR 0 4
7936: PPUSH
7937: LD_STRING 08_GammaBase
7939: PPUSH
7940: CALL_OW 39
// end ;
7944: LD_VAR 0 2
7948: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7949: LD_INT 0
7951: PPUSH
7952: PPUSH
7953: PPUSH
7954: PPUSH
7955: PPUSH
7956: PPUSH
7957: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
7958: LD_ADDR_VAR 0 3
7962: PUSH
7963: LD_INT 17
7965: PPUSH
7966: LD_INT 22
7968: PUSH
7969: LD_INT 1
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PUSH
7976: LD_INT 3
7978: PUSH
7979: LD_INT 21
7981: PUSH
7982: LD_INT 3
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: PUSH
7993: LD_INT 3
7995: PUSH
7996: LD_INT 33
7998: PUSH
7999: LD_INT 2
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: LIST
8014: PPUSH
8015: CALL_OW 70
8019: ST_TO_ADDR
// if tmp then
8020: LD_VAR 0 3
8024: IFFALSE 8143
// begin for i in tmp do
8026: LD_ADDR_VAR 0 2
8030: PUSH
8031: LD_VAR 0 3
8035: PUSH
8036: FOR_IN
8037: IFFALSE 8068
// begin SetSide ( i , 4 ) ;
8039: LD_VAR 0 2
8043: PPUSH
8044: LD_INT 4
8046: PPUSH
8047: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
8051: LD_VAR 0 2
8055: PPUSH
8056: LD_INT 42
8058: PPUSH
8059: LD_INT 22
8061: PPUSH
8062: CALL_OW 111
// end ;
8066: GO 8036
8068: POP
8069: POP
// repeat wait ( 0 0$3 ) ;
8070: LD_INT 105
8072: PPUSH
8073: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
8077: LD_VAR 0 3
8081: PPUSH
8082: LD_INT 51
8084: PPUSH
8085: LD_INT 16
8087: PPUSH
8088: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
8092: LD_VAR 0 3
8096: PPUSH
8097: LD_INT 95
8099: PUSH
8100: LD_INT 17
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PPUSH
8107: CALL_OW 72
8111: NOT
8112: IFFALSE 8070
// for i in tmp do
8114: LD_ADDR_VAR 0 2
8118: PUSH
8119: LD_VAR 0 3
8123: PUSH
8124: FOR_IN
8125: IFFALSE 8141
// SetSide ( i , 1 ) ;
8127: LD_VAR 0 2
8131: PPUSH
8132: LD_INT 1
8134: PPUSH
8135: CALL_OW 235
8139: GO 8124
8141: POP
8142: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
8143: LD_ADDR_VAR 0 3
8147: PUSH
8148: LD_INT 17
8150: PPUSH
8151: LD_INT 22
8153: PUSH
8154: LD_INT 1
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: LD_INT 33
8163: PUSH
8164: LD_INT 2
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: PPUSH
8175: CALL_OW 70
8179: ST_TO_ADDR
// if tmp then
8180: LD_VAR 0 3
8184: IFFALSE 8208
// begin ComMoveXY ( tmp , 40 , 32 ) ;
8186: LD_VAR 0 3
8190: PPUSH
8191: LD_INT 40
8193: PPUSH
8194: LD_INT 32
8196: PPUSH
8197: CALL_OW 111
// wait ( 0 0$3 ) ;
8201: LD_INT 105
8203: PPUSH
8204: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8208: LD_ADDR_VAR 0 3
8212: PUSH
8213: LD_INT 17
8215: PPUSH
8216: LD_INT 22
8218: PUSH
8219: LD_INT 1
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: PUSH
8226: LD_INT 2
8228: PUSH
8229: LD_INT 21
8231: PUSH
8232: LD_INT 2
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: PUSH
8239: LD_INT 21
8241: PUSH
8242: LD_INT 3
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: LIST
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PPUSH
8258: CALL_OW 70
8262: ST_TO_ADDR
// if tmp then
8263: LD_VAR 0 3
8267: IFFALSE 8415
// begin repeat wait ( 0 0$1 ) ;
8269: LD_INT 35
8271: PPUSH
8272: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8276: LD_ADDR_VAR 0 3
8280: PUSH
8281: LD_INT 17
8283: PPUSH
8284: LD_INT 22
8286: PUSH
8287: LD_INT 1
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PUSH
8294: LD_INT 2
8296: PUSH
8297: LD_INT 21
8299: PUSH
8300: LD_INT 2
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 21
8309: PUSH
8310: LD_INT 3
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: LIST
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: PPUSH
8326: CALL_OW 70
8330: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
8331: LD_ADDR_VAR 0 2
8335: PUSH
8336: LD_INT 22
8338: PUSH
8339: LD_INT 4
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: PUSH
8346: LD_INT 2
8348: PUSH
8349: LD_INT 25
8351: PUSH
8352: LD_INT 1
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: LD_INT 21
8361: PUSH
8362: LD_INT 2
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PPUSH
8378: CALL_OW 69
8382: PUSH
8383: FOR_IN
8384: IFFALSE 8406
// ComAttackUnit ( i , tmp [ 1 ] ) ;
8386: LD_VAR 0 2
8390: PPUSH
8391: LD_VAR 0 3
8395: PUSH
8396: LD_INT 1
8398: ARRAY
8399: PPUSH
8400: CALL_OW 115
8404: GO 8383
8406: POP
8407: POP
// until not tmp ;
8408: LD_VAR 0 3
8412: NOT
8413: IFFALSE 8269
// end ; wait ( 0 0$2 ) ;
8415: LD_INT 70
8417: PPUSH
8418: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8422: LD_ADDR_VAR 0 3
8426: PUSH
8427: LD_INT 22
8429: PUSH
8430: LD_INT 4
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PPUSH
8437: CALL_OW 69
8441: ST_TO_ADDR
// ComAgressiveMove ( tmp , 52 , 54 ) ;
8442: LD_VAR 0 3
8446: PPUSH
8447: LD_INT 52
8449: PPUSH
8450: LD_INT 54
8452: PPUSH
8453: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
8457: LD_VAR 0 3
8461: PPUSH
8462: LD_INT 175
8464: PPUSH
8465: CALL_OW 202
// wait ( 0 0$5 ) ;
8469: LD_INT 175
8471: PPUSH
8472: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 42 , 52 ) ;
8476: LD_VAR 0 3
8480: PPUSH
8481: LD_INT 120
8483: PUSH
8484: LD_INT 101
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: PPUSH
8491: CALL_OW 72
8495: PPUSH
8496: LD_INT 42
8498: PPUSH
8499: LD_INT 52
8501: PPUSH
8502: CALL_OW 114
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8506: LD_VAR 0 3
8510: PPUSH
8511: LD_INT 120
8513: PUSH
8514: LD_INT 101
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PPUSH
8521: CALL_OW 72
8525: PPUSH
8526: CALL_OW 200
// ComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 34 , 47 ) ;
8530: LD_VAR 0 3
8534: PPUSH
8535: LD_INT 120
8537: PUSH
8538: LD_INT 101
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: PUSH
8545: LD_INT 25
8547: PUSH
8548: LD_INT 4
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: PPUSH
8559: CALL_OW 72
8563: PPUSH
8564: LD_INT 34
8566: PPUSH
8567: LD_INT 47
8569: PPUSH
8570: CALL_OW 114
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8574: LD_VAR 0 3
8578: PPUSH
8579: LD_INT 120
8581: PUSH
8582: LD_INT 101
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: LD_INT 25
8591: PUSH
8592: LD_INT 4
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: PPUSH
8603: CALL_OW 72
8607: PPUSH
8608: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8612: LD_ADDR_VAR 0 7
8616: PUSH
8617: LD_VAR 0 3
8621: PPUSH
8622: LD_INT 21
8624: PUSH
8625: LD_INT 2
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PPUSH
8632: CALL_OW 72
8636: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8637: LD_ADDR_VAR 0 4
8641: PUSH
8642: LD_INT 81
8644: PUSH
8645: LD_INT 1
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: PPUSH
8652: CALL_OW 69
8656: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8657: LD_ADDR_VAR 0 5
8661: PUSH
8662: LD_INT 57
8664: PUSH
8665: LD_INT 66
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: PUSH
8672: LD_INT 62
8674: PUSH
8675: LD_INT 58
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8686: LD_INT 35
8688: PPUSH
8689: CALL_OW 67
// for i in filter do
8693: LD_ADDR_VAR 0 2
8697: PUSH
8698: LD_VAR 0 7
8702: PUSH
8703: FOR_IN
8704: IFFALSE 9128
// begin if IsDead ( i ) then
8706: LD_VAR 0 2
8710: PPUSH
8711: CALL_OW 301
8715: IFFALSE 8735
// begin filter := filter diff i ;
8717: LD_ADDR_VAR 0 7
8721: PUSH
8722: LD_VAR 0 7
8726: PUSH
8727: LD_VAR 0 2
8731: DIFF
8732: ST_TO_ADDR
// continue ;
8733: GO 8703
// end ; tmp := IsDrivenBy ( i ) ;
8735: LD_ADDR_VAR 0 3
8739: PUSH
8740: LD_VAR 0 2
8744: PPUSH
8745: CALL_OW 311
8749: ST_TO_ADDR
// if not tmp then
8750: LD_VAR 0 3
8754: NOT
8755: IFFALSE 8759
// continue ;
8757: GO 8703
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8759: LD_VAR 0 2
8763: PPUSH
8764: CALL_OW 261
8768: PUSH
8769: LD_INT 30
8771: GREATER
8772: PUSH
8773: LD_VAR 0 2
8777: PPUSH
8778: CALL_OW 110
8782: PUSH
8783: LD_INT 2
8785: EQUAL
8786: AND
8787: IFFALSE 8803
// SetTag ( i , 0 ) else
8789: LD_VAR 0 2
8793: PPUSH
8794: LD_INT 0
8796: PPUSH
8797: CALL_OW 109
8801: GO 8832
// if GetTag ( i ) = 2 then
8803: LD_VAR 0 2
8807: PPUSH
8808: CALL_OW 110
8812: PUSH
8813: LD_INT 2
8815: EQUAL
8816: IFFALSE 8832
// begin ComMoveUnit ( i , amDepot ) ;
8818: LD_VAR 0 2
8822: PPUSH
8823: LD_EXP 31
8827: PPUSH
8828: CALL_OW 112
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8832: LD_VAR 0 2
8836: PPUSH
8837: CALL_OW 256
8841: PUSH
8842: LD_INT 600
8844: GREATEREQUAL
8845: PUSH
8846: LD_VAR 0 2
8850: PPUSH
8851: CALL_OW 110
8855: NOT
8856: AND
8857: IFFALSE 8883
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8859: LD_VAR 0 2
8863: PPUSH
8864: LD_VAR 0 4
8868: PPUSH
8869: LD_VAR 0 2
8873: PPUSH
8874: CALL_OW 74
8878: PPUSH
8879: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8883: LD_VAR 0 2
8887: PPUSH
8888: CALL_OW 256
8892: PUSH
8893: LD_INT 600
8895: LESS
8896: PUSH
8897: LD_VAR 0 2
8901: PPUSH
8902: CALL_OW 110
8906: NOT
8907: AND
8908: IFFALSE 8984
// begin SetTag ( i , 1 ) ;
8910: LD_VAR 0 2
8914: PPUSH
8915: LD_INT 1
8917: PPUSH
8918: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8922: LD_ADDR_VAR 0 6
8926: PUSH
8927: LD_VAR 0 2
8931: PPUSH
8932: LD_VAR 0 5
8936: PPUSH
8937: CALL 82752 0 2
8941: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8942: LD_VAR 0 2
8946: PPUSH
8947: LD_VAR 0 6
8951: PUSH
8952: LD_INT 1
8954: ARRAY
8955: PPUSH
8956: LD_VAR 0 6
8960: PUSH
8961: LD_INT 2
8963: ARRAY
8964: PPUSH
8965: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8969: LD_VAR 0 2
8973: PPUSH
8974: LD_INT 40
8976: PPUSH
8977: LD_INT 49
8979: PPUSH
8980: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8984: LD_VAR 0 2
8988: PPUSH
8989: CALL_OW 110
8993: PUSH
8994: LD_INT 1
8996: EQUAL
8997: PUSH
8998: LD_VAR 0 2
9002: PPUSH
9003: LD_INT 40
9005: PPUSH
9006: LD_INT 49
9008: PPUSH
9009: CALL_OW 297
9013: PUSH
9014: LD_INT 9
9016: LESS
9017: AND
9018: PUSH
9019: LD_VAR 0 3
9023: AND
9024: IFFALSE 9126
// begin ComExitVehicle ( tmp ) ;
9026: LD_VAR 0 3
9030: PPUSH
9031: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
9035: LD_VAR 0 3
9039: PPUSH
9040: LD_VAR 0 2
9044: PPUSH
9045: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9049: LD_INT 35
9051: PPUSH
9052: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9056: LD_VAR 0 2
9060: PPUSH
9061: CALL_OW 256
9065: PUSH
9066: LD_INT 1000
9068: EQUAL
9069: IFFALSE 9049
// ComEnterUnit ( tmp , i ) ;
9071: LD_VAR 0 3
9075: PPUSH
9076: LD_VAR 0 2
9080: PPUSH
9081: CALL_OW 120
// if GetFuel ( i ) <= 30 then
9085: LD_VAR 0 2
9089: PPUSH
9090: CALL_OW 261
9094: PUSH
9095: LD_INT 30
9097: LESSEQUAL
9098: IFFALSE 9114
// SetTag ( i , 2 ) else
9100: LD_VAR 0 2
9104: PPUSH
9105: LD_INT 2
9107: PPUSH
9108: CALL_OW 109
9112: GO 9126
// SetTag ( i , 0 ) ;
9114: LD_VAR 0 2
9118: PPUSH
9119: LD_INT 0
9121: PPUSH
9122: CALL_OW 109
// end ; end ;
9126: GO 8703
9128: POP
9129: POP
// until not filter ;
9130: LD_VAR 0 7
9134: NOT
9135: IFFALSE 8686
// end ; end_of_file
9137: LD_VAR 0 1
9141: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
9142: LD_INT 0
9144: PPUSH
9145: PPUSH
9146: PPUSH
9147: PPUSH
9148: PPUSH
// uc_side := 3 ;
9149: LD_ADDR_OWVAR 20
9153: PUSH
9154: LD_INT 3
9156: ST_TO_ADDR
// uc_nation := 3 ;
9157: LD_ADDR_OWVAR 21
9161: PUSH
9162: LD_INT 3
9164: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
9165: LD_ADDR_EXP 33
9169: PUSH
9170: LD_INT 8
9172: PUSH
9173: LD_INT 11
9175: PUSH
9176: LD_INT 14
9178: PUSH
9179: LD_INT 17
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: PUSH
9188: LD_OWVAR 67
9192: ARRAY
9193: ST_TO_ADDR
// ruMobile := [ ] ;
9194: LD_ADDR_EXP 34
9198: PUSH
9199: EMPTY
9200: ST_TO_ADDR
// ruBuildList := [ ] ;
9201: LD_ADDR_EXP 35
9205: PUSH
9206: EMPTY
9207: ST_TO_ADDR
// russianAttackers := [ ] ;
9208: LD_ADDR_EXP 36
9212: PUSH
9213: EMPTY
9214: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
9215: LD_ADDR_VAR 0 5
9219: PUSH
9220: LD_INT 43
9222: PUSH
9223: LD_INT 44
9225: PUSH
9226: LD_INT 46
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: LIST
9233: ST_TO_ADDR
// if Difficulty > 2 then
9234: LD_OWVAR 67
9238: PUSH
9239: LD_INT 2
9241: GREATER
9242: IFFALSE 9265
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
9244: LD_ADDR_VAR 0 5
9248: PUSH
9249: LD_VAR 0 5
9253: PUSH
9254: LD_INT 45
9256: PUSH
9257: LD_INT 46
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: ADD
9264: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
9265: LD_ADDR_EXP 32
9269: PUSH
9270: LD_STRING Borodin
9272: PPUSH
9273: CALL_OW 25
9277: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
9278: LD_EXP 32
9282: PPUSH
9283: LD_INT 28
9285: PPUSH
9286: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
9290: LD_INT 28
9292: PPUSH
9293: CALL_OW 274
9297: PPUSH
9298: LD_INT 1
9300: PPUSH
9301: LD_INT 3000
9303: PUSH
9304: LD_INT 4000
9306: PUSH
9307: LD_INT 5000
9309: PUSH
9310: LD_INT 6000
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: PUSH
9319: LD_OWVAR 67
9323: ARRAY
9324: PPUSH
9325: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
9329: LD_INT 28
9331: PPUSH
9332: CALL_OW 274
9336: PPUSH
9337: LD_INT 2
9339: PPUSH
9340: LD_INT 1000
9342: PPUSH
9343: CALL_OW 277
// if Difficulty > 2 then
9347: LD_OWVAR 67
9351: PUSH
9352: LD_INT 2
9354: GREATER
9355: IFFALSE 9479
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
9357: LD_ADDR_VAR 0 4
9361: PUSH
9362: LD_INT 99
9364: PUSH
9365: LD_INT 130
9367: PUSH
9368: LD_INT 2
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: LIST
9375: PUSH
9376: LD_INT 121
9378: PUSH
9379: LD_INT 127
9381: PUSH
9382: LD_INT 4
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: LIST
9389: PUSH
9390: LD_INT 117
9392: PUSH
9393: LD_INT 121
9395: PUSH
9396: LD_INT 4
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: LIST
9408: ST_TO_ADDR
// for i in tmp do
9409: LD_ADDR_VAR 0 2
9413: PUSH
9414: LD_VAR 0 4
9418: PUSH
9419: FOR_IN
9420: IFFALSE 9477
// begin bc_type := b_turret ;
9422: LD_ADDR_OWVAR 42
9426: PUSH
9427: LD_INT 33
9429: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9430: LD_ADDR_OWVAR 43
9434: PUSH
9435: LD_INT 2
9437: PUSH
9438: LD_OWVAR 67
9442: PLUS
9443: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9444: LD_VAR 0 2
9448: PUSH
9449: LD_INT 1
9451: ARRAY
9452: PPUSH
9453: LD_VAR 0 2
9457: PUSH
9458: LD_INT 2
9460: ARRAY
9461: PPUSH
9462: LD_VAR 0 2
9466: PUSH
9467: LD_INT 3
9469: ARRAY
9470: PPUSH
9471: CALL_OW 47
// end ;
9475: GO 9419
9477: POP
9478: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9479: LD_ADDR_VAR 0 2
9483: PUSH
9484: LD_INT 22
9486: PUSH
9487: LD_INT 3
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: PUSH
9494: LD_INT 21
9496: PUSH
9497: LD_INT 3
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: PPUSH
9508: CALL_OW 69
9512: PUSH
9513: FOR_IN
9514: IFFALSE 9536
// SetBLevel ( i , 2 + Difficulty ) ;
9516: LD_VAR 0 2
9520: PPUSH
9521: LD_INT 2
9523: PUSH
9524: LD_OWVAR 67
9528: PLUS
9529: PPUSH
9530: CALL_OW 241
9534: GO 9513
9536: POP
9537: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9538: LD_ADDR_VAR 0 4
9542: PUSH
9543: LD_INT 22
9545: PUSH
9546: LD_INT 3
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: PUSH
9553: LD_INT 2
9555: PUSH
9556: LD_INT 30
9558: PUSH
9559: LD_INT 32
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PUSH
9566: LD_INT 30
9568: PUSH
9569: LD_INT 33
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: LIST
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: PPUSH
9585: CALL_OW 69
9589: ST_TO_ADDR
// for i in tmp do
9590: LD_ADDR_VAR 0 2
9594: PUSH
9595: LD_VAR 0 4
9599: PUSH
9600: FOR_IN
9601: IFFALSE 9633
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9603: LD_VAR 0 2
9607: PPUSH
9608: LD_VAR 0 5
9612: PUSH
9613: LD_INT 1
9615: PPUSH
9616: LD_VAR 0 5
9620: PPUSH
9621: CALL_OW 12
9625: ARRAY
9626: PPUSH
9627: CALL_OW 431
9631: GO 9600
9633: POP
9634: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9635: LD_ADDR_VAR 0 2
9639: PUSH
9640: LD_INT 22
9642: PUSH
9643: LD_INT 3
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PUSH
9650: LD_INT 30
9652: PUSH
9653: LD_INT 32
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PPUSH
9664: CALL_OW 69
9668: PUSH
9669: FOR_IN
9670: IFFALSE 9719
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9672: LD_INT 0
9674: PPUSH
9675: LD_INT 5
9677: PUSH
9678: LD_INT 6
9680: PUSH
9681: LD_INT 7
9683: PUSH
9684: LD_INT 8
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: PUSH
9693: LD_OWVAR 67
9697: ARRAY
9698: PPUSH
9699: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9703: CALL_OW 44
9707: PPUSH
9708: LD_VAR 0 2
9712: PPUSH
9713: CALL_OW 52
// end ;
9717: GO 9669
9719: POP
9720: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9721: LD_ADDR_VAR 0 2
9725: PUSH
9726: LD_INT 22
9728: PUSH
9729: LD_INT 3
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: LD_INT 30
9738: PUSH
9739: LD_INT 5
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PPUSH
9750: CALL_OW 69
9754: PUSH
9755: FOR_IN
9756: IFFALSE 9846
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9758: LD_ADDR_VAR 0 3
9762: PUSH
9763: DOUBLE
9764: LD_INT 1
9766: DEC
9767: ST_TO_ADDR
9768: LD_INT 2
9770: PUSH
9771: LD_INT 3
9773: PUSH
9774: LD_INT 4
9776: PUSH
9777: LD_INT 5
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: PUSH
9786: LD_OWVAR 67
9790: ARRAY
9791: PUSH
9792: FOR_TO
9793: IFFALSE 9842
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9795: LD_INT 0
9797: PPUSH
9798: LD_INT 5
9800: PUSH
9801: LD_INT 6
9803: PUSH
9804: LD_INT 7
9806: PUSH
9807: LD_INT 8
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: PUSH
9816: LD_OWVAR 67
9820: ARRAY
9821: PPUSH
9822: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9826: CALL_OW 44
9830: PPUSH
9831: LD_VAR 0 2
9835: PPUSH
9836: CALL_OW 52
// end ;
9840: GO 9792
9842: POP
9843: POP
// end ;
9844: GO 9755
9846: POP
9847: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9848: LD_ADDR_VAR 0 2
9852: PUSH
9853: DOUBLE
9854: LD_INT 1
9856: DEC
9857: ST_TO_ADDR
9858: LD_INT 3
9860: PUSH
9861: LD_INT 4
9863: PUSH
9864: LD_INT 5
9866: PUSH
9867: LD_INT 5
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: PUSH
9876: LD_OWVAR 67
9880: ARRAY
9881: PUSH
9882: FOR_TO
9883: IFFALSE 9930
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9885: LD_INT 0
9887: PPUSH
9888: LD_INT 4
9890: PUSH
9891: LD_INT 5
9893: PUSH
9894: LD_INT 5
9896: PUSH
9897: LD_INT 6
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: PUSH
9906: LD_OWVAR 67
9910: ARRAY
9911: PPUSH
9912: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9916: CALL_OW 44
9920: PPUSH
9921: LD_INT 28
9923: PPUSH
9924: CALL_OW 52
// end ;
9928: GO 9882
9930: POP
9931: POP
// for i := 1 to 2 do
9932: LD_ADDR_VAR 0 2
9936: PUSH
9937: DOUBLE
9938: LD_INT 1
9940: DEC
9941: ST_TO_ADDR
9942: LD_INT 2
9944: PUSH
9945: FOR_TO
9946: IFFALSE 9980
// begin PrepareScientist ( false , 6 ) ;
9948: LD_INT 0
9950: PPUSH
9951: LD_INT 6
9953: PPUSH
9954: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9958: CALL_OW 44
9962: PPUSH
9963: LD_INT 81
9965: PPUSH
9966: LD_INT 93
9968: PPUSH
9969: CALL_OW 428
9973: PPUSH
9974: CALL_OW 52
// end ;
9978: GO 9945
9980: POP
9981: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9982: LD_INT 22
9984: PPUSH
9985: LD_INT 1
9987: PPUSH
9988: LD_INT 3
9990: PPUSH
9991: LD_INT 51
9993: PPUSH
9994: LD_INT 100
9996: PPUSH
9997: CALL 46533 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
10001: CALL_OW 45
10005: PPUSH
10006: LD_INT 91
10008: PPUSH
10009: LD_INT 94
10011: PPUSH
10012: LD_INT 3
10014: PPUSH
10015: LD_INT 0
10017: PPUSH
10018: CALL_OW 50
// for i := 1 to 2 do
10022: LD_ADDR_VAR 0 2
10026: PUSH
10027: DOUBLE
10028: LD_INT 1
10030: DEC
10031: ST_TO_ADDR
10032: LD_INT 2
10034: PUSH
10035: FOR_TO
10036: IFFALSE 10080
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
10038: LD_INT 22
10040: PPUSH
10041: LD_INT 1
10043: PPUSH
10044: LD_INT 3
10046: PPUSH
10047: LD_INT 52
10049: PPUSH
10050: LD_INT 100
10052: PPUSH
10053: CALL 46533 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
10057: CALL_OW 45
10061: PPUSH
10062: LD_INT 91
10064: PPUSH
10065: LD_INT 94
10067: PPUSH
10068: LD_INT 4
10070: PPUSH
10071: LD_INT 0
10073: PPUSH
10074: CALL_OW 50
// end ;
10078: GO 10035
10080: POP
10081: POP
// end ;
10082: LD_VAR 0 1
10086: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
10087: LD_INT 0
10089: PPUSH
10090: PPUSH
10091: PPUSH
10092: PPUSH
10093: PPUSH
// uc_side := 3 ;
10094: LD_ADDR_OWVAR 20
10098: PUSH
10099: LD_INT 3
10101: ST_TO_ADDR
// uc_nation := 3 ;
10102: LD_ADDR_OWVAR 21
10106: PUSH
10107: LD_INT 3
10109: ST_TO_ADDR
// for i := 1 to 4 do
10110: LD_ADDR_VAR 0 2
10114: PUSH
10115: DOUBLE
10116: LD_INT 1
10118: DEC
10119: ST_TO_ADDR
10120: LD_INT 4
10122: PUSH
10123: FOR_TO
10124: IFFALSE 10251
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10126: LD_INT 22
10128: PPUSH
10129: LD_INT 1
10131: PPUSH
10132: LD_INT 1
10134: PPUSH
10135: LD_INT 42
10137: PUSH
10138: LD_INT 43
10140: PUSH
10141: LD_INT 44
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 1
10151: PPUSH
10152: LD_INT 3
10154: PPUSH
10155: CALL_OW 12
10159: ARRAY
10160: PPUSH
10161: LD_INT 40
10163: PPUSH
10164: CALL 46533 0 5
// veh := CreateVehicle ;
10168: LD_ADDR_VAR 0 4
10172: PUSH
10173: CALL_OW 45
10177: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10178: LD_VAR 0 4
10182: PPUSH
10183: LD_INT 5
10185: PPUSH
10186: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
10190: LD_VAR 0 4
10194: PPUSH
10195: LD_INT 7
10197: PPUSH
10198: LD_INT 0
10200: PPUSH
10201: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10205: LD_INT 0
10207: PPUSH
10208: LD_INT 5
10210: PPUSH
10211: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10215: CALL_OW 44
10219: PPUSH
10220: LD_VAR 0 4
10224: PPUSH
10225: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10229: LD_ADDR_VAR 0 5
10233: PUSH
10234: LD_VAR 0 5
10238: PPUSH
10239: LD_VAR 0 4
10243: PPUSH
10244: CALL 79404 0 2
10248: ST_TO_ADDR
// end ;
10249: GO 10123
10251: POP
10252: POP
// for i := 1 to 3 do
10253: LD_ADDR_VAR 0 2
10257: PUSH
10258: DOUBLE
10259: LD_INT 1
10261: DEC
10262: ST_TO_ADDR
10263: LD_INT 3
10265: PUSH
10266: FOR_TO
10267: IFFALSE 10394
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10269: LD_INT 22
10271: PPUSH
10272: LD_INT 1
10274: PPUSH
10275: LD_INT 1
10277: PPUSH
10278: LD_INT 42
10280: PUSH
10281: LD_INT 43
10283: PUSH
10284: LD_INT 44
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 1
10294: PPUSH
10295: LD_INT 3
10297: PPUSH
10298: CALL_OW 12
10302: ARRAY
10303: PPUSH
10304: LD_INT 40
10306: PPUSH
10307: CALL 46533 0 5
// veh := CreateVehicle ;
10311: LD_ADDR_VAR 0 4
10315: PUSH
10316: CALL_OW 45
10320: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10321: LD_VAR 0 4
10325: PPUSH
10326: LD_INT 5
10328: PPUSH
10329: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
10333: LD_VAR 0 4
10337: PPUSH
10338: LD_INT 8
10340: PPUSH
10341: LD_INT 0
10343: PPUSH
10344: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10348: LD_INT 0
10350: PPUSH
10351: LD_INT 5
10353: PPUSH
10354: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10358: CALL_OW 44
10362: PPUSH
10363: LD_VAR 0 4
10367: PPUSH
10368: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10372: LD_ADDR_VAR 0 5
10376: PUSH
10377: LD_VAR 0 5
10381: PPUSH
10382: LD_VAR 0 4
10386: PPUSH
10387: CALL 79404 0 2
10391: ST_TO_ADDR
// end ;
10392: GO 10266
10394: POP
10395: POP
// for i := 1 to 2 do
10396: LD_ADDR_VAR 0 2
10400: PUSH
10401: DOUBLE
10402: LD_INT 1
10404: DEC
10405: ST_TO_ADDR
10406: LD_INT 2
10408: PUSH
10409: FOR_TO
10410: IFFALSE 10469
// begin PrepareSoldier ( false , 5 ) ;
10412: LD_INT 0
10414: PPUSH
10415: LD_INT 5
10417: PPUSH
10418: CALL_OW 381
// un := CreateHuman ;
10422: LD_ADDR_VAR 0 3
10426: PUSH
10427: CALL_OW 44
10431: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10432: LD_VAR 0 3
10436: PPUSH
10437: LD_INT 8
10439: PPUSH
10440: LD_INT 0
10442: PPUSH
10443: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10447: LD_ADDR_VAR 0 5
10451: PUSH
10452: LD_VAR 0 5
10456: PPUSH
10457: LD_VAR 0 3
10461: PPUSH
10462: CALL 79404 0 2
10466: ST_TO_ADDR
// end ;
10467: GO 10409
10469: POP
10470: POP
// for i in tmp do
10471: LD_ADDR_VAR 0 2
10475: PUSH
10476: LD_VAR 0 5
10480: PUSH
10481: FOR_IN
10482: IFFALSE 10501
// ComAgressiveMove ( i , 51 , 16 ) ;
10484: LD_VAR 0 2
10488: PPUSH
10489: LD_INT 51
10491: PPUSH
10492: LD_INT 16
10494: PPUSH
10495: CALL_OW 114
10499: GO 10481
10501: POP
10502: POP
// end ;
10503: LD_VAR 0 1
10507: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10508: LD_EXP 34
10512: IFFALSE 11087
10514: GO 10516
10516: DISABLE
10517: LD_INT 0
10519: PPUSH
10520: PPUSH
10521: PPUSH
// begin enable ;
10522: ENABLE
// if not ruMobile then
10523: LD_EXP 34
10527: NOT
10528: IFFALSE 10532
// exit ;
10530: GO 11087
// for i in ruMobile do
10532: LD_ADDR_VAR 0 1
10536: PUSH
10537: LD_EXP 34
10541: PUSH
10542: FOR_IN
10543: IFFALSE 11085
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10545: LD_VAR 0 1
10549: PPUSH
10550: CALL_OW 302
10554: NOT
10555: PUSH
10556: LD_VAR 0 1
10560: PPUSH
10561: CALL_OW 255
10565: PUSH
10566: LD_INT 3
10568: NONEQUAL
10569: OR
10570: IFFALSE 10590
// begin ruMobile := ruMobile diff i ;
10572: LD_ADDR_EXP 34
10576: PUSH
10577: LD_EXP 34
10581: PUSH
10582: LD_VAR 0 1
10586: DIFF
10587: ST_TO_ADDR
// continue ;
10588: GO 10542
// end ; if GetTag ( i ) = 300 then
10590: LD_VAR 0 1
10594: PPUSH
10595: CALL_OW 110
10599: PUSH
10600: LD_INT 300
10602: EQUAL
10603: IFFALSE 10718
// begin if GetFuel ( i ) < 50 then
10605: LD_VAR 0 1
10609: PPUSH
10610: CALL_OW 261
10614: PUSH
10615: LD_INT 50
10617: LESS
10618: IFFALSE 10677
// begin ComMoveXY ( i , 93 , 100 ) ;
10620: LD_VAR 0 1
10624: PPUSH
10625: LD_INT 93
10627: PPUSH
10628: LD_INT 100
10630: PPUSH
10631: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10635: LD_INT 35
10637: PPUSH
10638: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10642: LD_VAR 0 1
10646: PPUSH
10647: LD_INT 93
10649: PPUSH
10650: LD_INT 100
10652: PPUSH
10653: CALL_OW 297
10657: PUSH
10658: LD_INT 4
10660: LESS
10661: IFFALSE 10635
// SetFuel ( i , 100 ) ;
10663: LD_VAR 0 1
10667: PPUSH
10668: LD_INT 100
10670: PPUSH
10671: CALL_OW 240
// end else
10675: GO 10718
// if not IsInArea ( i , ruParkingArea ) then
10677: LD_VAR 0 1
10681: PPUSH
10682: LD_INT 10
10684: PPUSH
10685: CALL_OW 308
10689: NOT
10690: IFFALSE 10706
// ComMoveToArea ( i , ruParkingArea ) else
10692: LD_VAR 0 1
10696: PPUSH
10697: LD_INT 10
10699: PPUSH
10700: CALL_OW 113
10704: GO 10718
// SetTag ( i , 301 ) ;
10706: LD_VAR 0 1
10710: PPUSH
10711: LD_INT 301
10713: PPUSH
10714: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 110
10727: PUSH
10728: LD_INT 301
10730: EQUAL
10731: IFFALSE 10861
// begin if GetLives ( i ) < 1000 then
10733: LD_VAR 0 1
10737: PPUSH
10738: CALL_OW 256
10742: PUSH
10743: LD_INT 1000
10745: LESS
10746: IFFALSE 10838
// begin if not IsDrivenBy ( i ) then
10748: LD_VAR 0 1
10752: PPUSH
10753: CALL_OW 311
10757: NOT
10758: IFFALSE 10762
// continue ;
10760: GO 10542
// mech := IsDrivenBy ( i ) ;
10762: LD_ADDR_VAR 0 2
10766: PUSH
10767: LD_VAR 0 1
10771: PPUSH
10772: CALL_OW 311
10776: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10777: LD_VAR 0 2
10781: PPUSH
10782: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10786: LD_VAR 0 2
10790: PPUSH
10791: LD_VAR 0 1
10795: PPUSH
10796: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10800: LD_INT 35
10802: PPUSH
10803: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10807: LD_VAR 0 1
10811: PPUSH
10812: CALL_OW 256
10816: PUSH
10817: LD_INT 1000
10819: EQUAL
10820: IFFALSE 10800
// ComEnterUnit ( mech , i ) ;
10822: LD_VAR 0 2
10826: PPUSH
10827: LD_VAR 0 1
10831: PPUSH
10832: CALL_OW 120
// end else
10836: GO 10861
// if IsDrivenBy ( i ) then
10838: LD_VAR 0 1
10842: PPUSH
10843: CALL_OW 311
10847: IFFALSE 10861
// SetTag ( i , 0 ) ;
10849: LD_VAR 0 1
10853: PPUSH
10854: LD_INT 0
10856: PPUSH
10857: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10861: LD_VAR 0 1
10865: PPUSH
10866: CALL_OW 110
10870: PUSH
10871: LD_INT 300
10873: LESS
10874: IFFALSE 11083
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10876: LD_ADDR_VAR 0 3
10880: PUSH
10881: LD_INT 11
10883: PPUSH
10884: LD_INT 81
10886: PUSH
10887: LD_INT 3
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: PPUSH
10894: CALL_OW 70
10898: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10899: LD_VAR 0 1
10903: PPUSH
10904: CALL_OW 256
10908: PUSH
10909: LD_INT 650
10911: LESS
10912: IFFALSE 10937
// begin ComStop ( i ) ;
10914: LD_VAR 0 1
10918: PPUSH
10919: CALL_OW 141
// SetTag ( i , 300 ) ;
10923: LD_VAR 0 1
10927: PPUSH
10928: LD_INT 300
10930: PPUSH
10931: CALL_OW 109
// continue ;
10935: GO 10542
// end ; if enemy then
10937: LD_VAR 0 3
10941: IFFALSE 10981
// begin if not HasTask ( i ) then
10943: LD_VAR 0 1
10947: PPUSH
10948: CALL_OW 314
10952: NOT
10953: IFFALSE 10979
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10955: LD_VAR 0 1
10959: PPUSH
10960: LD_VAR 0 3
10964: PPUSH
10965: LD_VAR 0 1
10969: PPUSH
10970: CALL_OW 74
10974: PPUSH
10975: CALL_OW 115
// end else
10979: GO 11083
// if ruMobile > 1 then
10981: LD_EXP 34
10985: PUSH
10986: LD_INT 1
10988: GREATER
10989: IFFALSE 11083
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10991: LD_ADDR_VAR 0 3
10995: PUSH
10996: LD_INT 81
10998: PUSH
10999: LD_INT 3
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: PPUSH
11006: CALL_OW 69
11010: ST_TO_ADDR
// if enemy then
11011: LD_VAR 0 3
11015: IFFALSE 11083
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
11017: LD_VAR 0 1
11021: PPUSH
11022: LD_INT 116
11024: PUSH
11025: LD_INT 95
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PUSH
11032: LD_INT 84
11034: PUSH
11035: LD_INT 68
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 58
11044: PUSH
11045: LD_INT 53
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 44
11054: PUSH
11055: LD_INT 35
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PUSH
11062: LD_INT 45
11064: PUSH
11065: LD_INT 23
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: PPUSH
11079: CALL 82008 0 2
// end ; end ; end ;
11083: GO 10542
11085: POP
11086: POP
// end ;
11087: PPOPN 3
11089: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
11090: LD_INT 3
11092: PUSH
11093: LD_INT 22
11095: PUSH
11096: LD_INT 1
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 32
11109: PUSH
11110: LD_INT 1
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PPUSH
11121: CALL_OW 69
11125: IFFALSE 11209
11127: GO 11129
11129: DISABLE
11130: LD_INT 0
11132: PPUSH
// begin enable ;
11133: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
11134: LD_ADDR_VAR 0 1
11138: PUSH
11139: LD_INT 3
11141: PUSH
11142: LD_INT 22
11144: PUSH
11145: LD_INT 1
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: PUSH
11156: LD_INT 32
11158: PUSH
11159: LD_INT 1
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PPUSH
11170: CALL_OW 69
11174: PUSH
11175: FOR_IN
11176: IFFALSE 11207
// if GetFuel ( i ) < 3 then
11178: LD_VAR 0 1
11182: PPUSH
11183: CALL_OW 261
11187: PUSH
11188: LD_INT 3
11190: LESS
11191: IFFALSE 11205
// SetFuel ( i , 3 ) ;
11193: LD_VAR 0 1
11197: PPUSH
11198: LD_INT 3
11200: PPUSH
11201: CALL_OW 240
11205: GO 11175
11207: POP
11208: POP
// end ;
11209: PPOPN 1
11211: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
11212: LD_INT 29
11214: PPUSH
11215: CALL_OW 302
11219: PUSH
11220: LD_INT 29
11222: PPUSH
11223: CALL_OW 461
11227: PUSH
11228: LD_INT 2
11230: EQUAL
11231: AND
11232: IFFALSE 11465
11234: GO 11236
11236: DISABLE
11237: LD_INT 0
11239: PPUSH
11240: PPUSH
// begin enable ;
11241: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11242: LD_ADDR_VAR 0 1
11246: PUSH
11247: LD_INT 21
11249: PUSH
11250: LD_INT 22
11252: PUSH
11253: LD_INT 23
11255: PUSH
11256: LD_INT 24
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: PUSH
11265: LD_INT 1
11267: PPUSH
11268: LD_INT 4
11270: PPUSH
11271: CALL_OW 12
11275: ARRAY
11276: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11277: LD_ADDR_VAR 0 2
11281: PUSH
11282: LD_INT 42
11284: PUSH
11285: LD_INT 44
11287: PUSH
11288: LD_INT 43
11290: PUSH
11291: LD_INT 46
11293: PUSH
11294: LD_INT 45
11296: PUSH
11297: LD_INT 46
11299: PUSH
11300: LD_INT 45
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: PUSH
11312: LD_OWVAR 67
11316: PUSH
11317: LD_INT 0
11319: PPUSH
11320: LD_INT 3
11322: PPUSH
11323: CALL_OW 12
11327: PLUS
11328: ARRAY
11329: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11330: LD_VAR 0 1
11334: PUSH
11335: LD_INT 21
11337: PUSH
11338: LD_INT 22
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: IN
11345: PUSH
11346: LD_VAR 0 2
11350: PUSH
11351: LD_INT 46
11353: EQUAL
11354: AND
11355: IFFALSE 11384
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11357: LD_ADDR_VAR 0 2
11361: PUSH
11362: LD_INT 44
11364: PUSH
11365: LD_INT 45
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 1
11374: PPUSH
11375: LD_INT 2
11377: PPUSH
11378: CALL_OW 12
11382: ARRAY
11383: ST_TO_ADDR
// if tick < [ 15 15$00 , 12 12$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
11384: LD_OWVAR 1
11388: PUSH
11389: LD_INT 31500
11391: PUSH
11392: LD_INT 25200
11394: PUSH
11395: LD_INT 21000
11397: PUSH
11398: LD_INT 18900
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: PUSH
11407: LD_OWVAR 67
11411: ARRAY
11412: LESS
11413: IFFALSE 11442
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11415: LD_ADDR_VAR 0 2
11419: PUSH
11420: LD_INT 44
11422: PUSH
11423: LD_INT 43
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PUSH
11430: LD_INT 1
11432: PPUSH
11433: LD_INT 2
11435: PPUSH
11436: CALL_OW 12
11440: ARRAY
11441: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11442: LD_INT 29
11444: PPUSH
11445: LD_VAR 0 1
11449: PPUSH
11450: LD_INT 1
11452: PPUSH
11453: LD_INT 1
11455: PPUSH
11456: LD_VAR 0 2
11460: PPUSH
11461: CALL_OW 185
// end ;
11465: PPOPN 2
11467: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , j , tmp , b , eng , crane , tag , sci , lab , emptyTowers , sol , barracks , e ;
11468: LD_INT 28
11470: PPUSH
11471: CALL_OW 302
11475: IFFALSE 13067
11477: GO 11479
11479: DISABLE
11480: LD_INT 0
11482: PPUSH
11483: PPUSH
11484: PPUSH
11485: PPUSH
11486: PPUSH
11487: PPUSH
11488: PPUSH
11489: PPUSH
11490: PPUSH
11491: PPUSH
11492: PPUSH
11493: PPUSH
11494: PPUSH
// begin enable ;
11495: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11496: LD_ADDR_VAR 0 4
11500: PUSH
11501: LD_INT 12
11503: PPUSH
11504: LD_INT 3
11506: PUSH
11507: LD_INT 24
11509: PUSH
11510: LD_INT 1000
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: LD_INT 21
11523: PUSH
11524: LD_INT 3
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PPUSH
11535: CALL_OW 70
11539: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11540: LD_ADDR_VAR 0 5
11544: PUSH
11545: LD_INT 22
11547: PUSH
11548: LD_INT 3
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PUSH
11555: LD_INT 25
11557: PUSH
11558: LD_INT 2
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PPUSH
11569: CALL_OW 69
11573: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11574: LD_ADDR_VAR 0 6
11578: PUSH
11579: LD_INT 22
11581: PUSH
11582: LD_INT 3
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: LD_INT 34
11591: PUSH
11592: LD_INT 52
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PPUSH
11603: CALL_OW 69
11607: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11608: LD_ADDR_VAR 0 8
11612: PUSH
11613: LD_INT 22
11615: PUSH
11616: LD_INT 3
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PUSH
11623: LD_INT 25
11625: PUSH
11626: LD_INT 4
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PPUSH
11637: CALL_OW 69
11641: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11642: LD_ADDR_VAR 0 9
11646: PUSH
11647: LD_INT 81
11649: PPUSH
11650: LD_INT 93
11652: PPUSH
11653: CALL_OW 428
11657: ST_TO_ADDR
// emptyTowers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11658: LD_ADDR_VAR 0 10
11662: PUSH
11663: LD_INT 22
11665: PUSH
11666: LD_INT 3
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PUSH
11673: LD_INT 30
11675: PUSH
11676: LD_INT 32
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: LD_INT 50
11685: PUSH
11686: EMPTY
11687: LIST
11688: PUSH
11689: LD_INT 58
11691: PUSH
11692: EMPTY
11693: LIST
11694: PUSH
11695: LD_INT 3
11697: PUSH
11698: LD_INT 120
11700: PUSH
11701: LD_INT 701
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: PPUSH
11719: CALL_OW 69
11723: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_ok ] , [ f_not , [ f_full ] ] ] ) ;
11724: LD_ADDR_VAR 0 12
11728: PUSH
11729: LD_INT 22
11731: PUSH
11732: LD_INT 3
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: PUSH
11739: LD_INT 30
11741: PUSH
11742: LD_INT 5
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 50
11751: PUSH
11752: EMPTY
11753: LIST
11754: PUSH
11755: LD_INT 3
11757: PUSH
11758: LD_INT 62
11760: PUSH
11761: EMPTY
11762: LIST
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: PPUSH
11774: CALL_OW 69
11778: ST_TO_ADDR
// if emptyTowers then
11779: LD_VAR 0 10
11783: IFFALSE 12044
// begin for i in emptyTowers do
11785: LD_ADDR_VAR 0 1
11789: PUSH
11790: LD_VAR 0 10
11794: PUSH
11795: FOR_IN
11796: IFFALSE 12040
// begin sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_inside ] , [ f_inarea , ruBaseArea ] ] , [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11798: LD_ADDR_VAR 0 11
11802: PUSH
11803: LD_INT 22
11805: PUSH
11806: LD_INT 3
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: PUSH
11813: LD_INT 2
11815: PUSH
11816: LD_INT 54
11818: PUSH
11819: EMPTY
11820: LIST
11821: PUSH
11822: LD_INT 95
11824: PUSH
11825: LD_INT 12
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: LIST
11836: PUSH
11837: LD_INT 25
11839: PUSH
11840: LD_INT 1
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: PUSH
11847: LD_INT 50
11849: PUSH
11850: EMPTY
11851: LIST
11852: PUSH
11853: LD_INT 3
11855: PUSH
11856: LD_INT 120
11858: PUSH
11859: LD_INT 701
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: PPUSH
11877: CALL_OW 69
11881: ST_TO_ADDR
// if not sol then
11882: LD_VAR 0 11
11886: NOT
11887: IFFALSE 11891
// break ;
11889: GO 12040
// for j in sol do
11891: LD_ADDR_VAR 0 2
11895: PUSH
11896: LD_VAR 0 11
11900: PUSH
11901: FOR_IN
11902: IFFALSE 11953
// if IsInUnit ( j ) and GetBType ( IsInUnit ( j ) ) = b_bunker then
11904: LD_VAR 0 2
11908: PPUSH
11909: CALL_OW 310
11913: PUSH
11914: LD_VAR 0 2
11918: PPUSH
11919: CALL_OW 310
11923: PPUSH
11924: CALL_OW 266
11928: PUSH
11929: LD_INT 32
11931: EQUAL
11932: AND
11933: IFFALSE 11951
// sol := sol diff j ;
11935: LD_ADDR_VAR 0 11
11939: PUSH
11940: LD_VAR 0 11
11944: PUSH
11945: LD_VAR 0 2
11949: DIFF
11950: ST_TO_ADDR
11951: GO 11901
11953: POP
11954: POP
// if not sol then
11955: LD_VAR 0 11
11959: NOT
11960: IFFALSE 11964
// break ;
11962: GO 12040
// if IsInUnit ( sol [ 1 ] ) then
11964: LD_VAR 0 11
11968: PUSH
11969: LD_INT 1
11971: ARRAY
11972: PPUSH
11973: CALL_OW 310
11977: IFFALSE 11992
// ComExit ( sol [ 1 ] ) ;
11979: LD_VAR 0 11
11983: PUSH
11984: LD_INT 1
11986: ARRAY
11987: PPUSH
11988: CALL 79802 0 1
// SetTag ( sol [ 1 ] , 701 ) ;
11992: LD_VAR 0 11
11996: PUSH
11997: LD_INT 1
11999: ARRAY
12000: PPUSH
12001: LD_INT 701
12003: PPUSH
12004: CALL_OW 109
// SetTag ( i , 701 ) ;
12008: LD_VAR 0 1
12012: PPUSH
12013: LD_INT 701
12015: PPUSH
12016: CALL_OW 109
// AddComEnterUnit ( sol [ 1 ] , i ) ;
12020: LD_VAR 0 11
12024: PUSH
12025: LD_INT 1
12027: ARRAY
12028: PPUSH
12029: LD_VAR 0 1
12033: PPUSH
12034: CALL_OW 180
// end ;
12038: GO 11795
12040: POP
12041: POP
// end else
12042: GO 12290
// if UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) then
12044: LD_VAR 0 11
12048: PPUSH
12049: LD_INT 3
12051: PUSH
12052: LD_INT 54
12054: PUSH
12055: EMPTY
12056: LIST
12057: PUSH
12058: LD_INT 95
12060: PUSH
12061: LD_INT 12
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 72
12077: IFFALSE 12290
// begin if barracks then
12079: LD_VAR 0 12
12083: IFFALSE 12151
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12085: LD_ADDR_VAR 0 1
12089: PUSH
12090: LD_VAR 0 11
12094: PPUSH
12095: LD_INT 3
12097: PUSH
12098: LD_INT 54
12100: PUSH
12101: EMPTY
12102: LIST
12103: PUSH
12104: LD_INT 95
12106: PUSH
12107: LD_INT 12
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: LIST
12118: PPUSH
12119: CALL_OW 72
12123: PUSH
12124: FOR_IN
12125: IFFALSE 12147
// ComEnterUnit ( i , barracks [ 1 ] ) ;
12127: LD_VAR 0 1
12131: PPUSH
12132: LD_VAR 0 12
12136: PUSH
12137: LD_INT 1
12139: ARRAY
12140: PPUSH
12141: CALL_OW 120
12145: GO 12124
12147: POP
12148: POP
// end else
12149: GO 12290
// if FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) then
12151: LD_INT 12
12153: PPUSH
12154: LD_INT 81
12156: PUSH
12157: LD_INT 3
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PPUSH
12164: CALL_OW 70
12168: IFFALSE 12290
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12170: LD_ADDR_VAR 0 1
12174: PUSH
12175: LD_VAR 0 11
12179: PPUSH
12180: LD_INT 3
12182: PUSH
12183: LD_INT 54
12185: PUSH
12186: EMPTY
12187: LIST
12188: PUSH
12189: LD_INT 95
12191: PUSH
12192: LD_INT 12
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: LIST
12203: PPUSH
12204: CALL_OW 72
12208: PUSH
12209: FOR_IN
12210: IFFALSE 12288
// begin SetTag ( i , 702 ) ;
12212: LD_VAR 0 1
12216: PPUSH
12217: LD_INT 702
12219: PPUSH
12220: CALL_OW 109
// e := NearestUnitToUnit ( FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) , i ) ;
12224: LD_ADDR_VAR 0 13
12228: PUSH
12229: LD_INT 12
12231: PPUSH
12232: LD_INT 81
12234: PUSH
12235: LD_INT 3
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PPUSH
12242: CALL_OW 70
12246: PPUSH
12247: LD_VAR 0 1
12251: PPUSH
12252: CALL_OW 74
12256: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( e ) , GetY ( e ) ) ;
12257: LD_VAR 0 1
12261: PPUSH
12262: LD_VAR 0 13
12266: PPUSH
12267: CALL_OW 250
12271: PPUSH
12272: LD_VAR 0 13
12276: PPUSH
12277: CALL_OW 251
12281: PPUSH
12282: CALL_OW 114
// end ;
12286: GO 12209
12288: POP
12289: POP
// end ; end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , ruDefendArea ] , [ f_ok ] , [ f_class , class_soldier ] , [ f_tag , 702 ] ] ) ;
12290: LD_ADDR_VAR 0 3
12294: PUSH
12295: LD_INT 22
12297: PUSH
12298: LD_INT 3
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PUSH
12305: LD_INT 95
12307: PUSH
12308: LD_INT 11
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PUSH
12315: LD_INT 50
12317: PUSH
12318: EMPTY
12319: LIST
12320: PUSH
12321: LD_INT 25
12323: PUSH
12324: LD_INT 1
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 120
12333: PUSH
12334: LD_INT 702
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: PPUSH
12348: CALL_OW 69
12352: ST_TO_ADDR
// if tmp then
12353: LD_VAR 0 3
12357: IFFALSE 12403
// for i in tmp do
12359: LD_ADDR_VAR 0 1
12363: PUSH
12364: LD_VAR 0 3
12368: PUSH
12369: FOR_IN
12370: IFFALSE 12401
// begin ComMoveXY ( i , 90 , 94 ) ;
12372: LD_VAR 0 1
12376: PPUSH
12377: LD_INT 90
12379: PPUSH
12380: LD_INT 94
12382: PPUSH
12383: CALL_OW 111
// SetTag ( i , 0 ) ;
12387: LD_VAR 0 1
12391: PPUSH
12392: LD_INT 0
12394: PPUSH
12395: CALL_OW 109
// end ;
12399: GO 12369
12401: POP
12402: POP
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
12403: LD_VAR 0 8
12407: PUSH
12408: LD_VAR 0 5
12412: PPUSH
12413: LD_INT 120
12415: PUSH
12416: LD_INT 2
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PPUSH
12423: CALL_OW 72
12427: AND
12428: IFFALSE 12441
// ComExitAll ( sci ) else
12430: LD_VAR 0 8
12434: PPUSH
12435: CALL 79885 0 1
12439: GO 12514
// if sci then
12441: LD_VAR 0 8
12445: IFFALSE 12514
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
12447: LD_VAR 0 8
12451: PPUSH
12452: LD_INT 3
12454: PUSH
12455: LD_INT 54
12457: PUSH
12458: EMPTY
12459: LIST
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PPUSH
12465: CALL_OW 72
12469: PUSH
12470: LD_VAR 0 9
12474: PPUSH
12475: CALL_OW 302
12479: AND
12480: IFFALSE 12514
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
12482: LD_VAR 0 8
12486: PPUSH
12487: LD_INT 3
12489: PUSH
12490: LD_INT 54
12492: PUSH
12493: EMPTY
12494: LIST
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PPUSH
12500: CALL_OW 72
12504: PPUSH
12505: LD_VAR 0 9
12509: PPUSH
12510: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
12514: LD_VAR 0 6
12518: PPUSH
12519: LD_INT 50
12521: PUSH
12522: EMPTY
12523: LIST
12524: PPUSH
12525: CALL_OW 72
12529: PUSH
12530: LD_VAR 0 4
12534: AND
12535: IFFALSE 12566
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
12537: LD_VAR 0 6
12541: PPUSH
12542: LD_INT 50
12544: PUSH
12545: EMPTY
12546: LIST
12547: PPUSH
12548: CALL_OW 72
12552: PPUSH
12553: LD_VAR 0 4
12557: PUSH
12558: LD_INT 1
12560: ARRAY
12561: PPUSH
12562: CALL_OW 130
// if eng then
12566: LD_VAR 0 5
12570: IFFALSE 13067
// begin for i in eng do
12572: LD_ADDR_VAR 0 1
12576: PUSH
12577: LD_VAR 0 5
12581: PUSH
12582: FOR_IN
12583: IFFALSE 13065
// begin tag := GetTag ( i ) ;
12585: LD_ADDR_VAR 0 7
12589: PUSH
12590: LD_VAR 0 1
12594: PPUSH
12595: CALL_OW 110
12599: ST_TO_ADDR
// case tag of 0 :
12600: LD_VAR 0 7
12604: PUSH
12605: LD_INT 0
12607: DOUBLE
12608: EQUAL
12609: IFTRUE 12613
12611: GO 12824
12613: POP
// begin if b then
12614: LD_VAR 0 4
12618: IFFALSE 12634
// begin SetTag ( i , 1 ) ;
12620: LD_VAR 0 1
12624: PPUSH
12625: LD_INT 1
12627: PPUSH
12628: CALL_OW 109
// continue ;
12632: GO 12582
// end ; if not ruBuildList then
12634: LD_EXP 35
12638: NOT
12639: IFFALSE 12655
// ComEnterUnit ( i , ruDep ) else
12641: LD_VAR 0 1
12645: PPUSH
12646: LD_INT 28
12648: PPUSH
12649: CALL_OW 120
12653: GO 12822
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
12655: LD_INT 11
12657: PPUSH
12658: LD_INT 81
12660: PUSH
12661: LD_INT 3
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PPUSH
12668: CALL_OW 70
12672: PUSH
12673: LD_INT 0
12675: EQUAL
12676: PUSH
12677: LD_INT 28
12679: PPUSH
12680: LD_EXP 35
12684: PUSH
12685: LD_INT 1
12687: ARRAY
12688: PUSH
12689: LD_INT 1
12691: ARRAY
12692: PPUSH
12693: LD_EXP 35
12697: PUSH
12698: LD_INT 1
12700: ARRAY
12701: PUSH
12702: LD_INT 2
12704: ARRAY
12705: PPUSH
12706: LD_EXP 35
12710: PUSH
12711: LD_INT 1
12713: ARRAY
12714: PUSH
12715: LD_INT 3
12717: ARRAY
12718: PPUSH
12719: LD_EXP 35
12723: PUSH
12724: LD_INT 1
12726: ARRAY
12727: PUSH
12728: LD_INT 4
12730: ARRAY
12731: PPUSH
12732: CALL 55129 0 5
12736: AND
12737: IFFALSE 12822
// begin if IsInUnit ( i ) then
12739: LD_VAR 0 1
12743: PPUSH
12744: CALL_OW 310
12748: IFFALSE 12761
// ComExitBuilding ( i ) else
12750: LD_VAR 0 1
12754: PPUSH
12755: CALL_OW 122
12759: GO 12822
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
12761: LD_VAR 0 1
12765: PPUSH
12766: LD_EXP 35
12770: PUSH
12771: LD_INT 1
12773: ARRAY
12774: PUSH
12775: LD_INT 1
12777: ARRAY
12778: PPUSH
12779: LD_EXP 35
12783: PUSH
12784: LD_INT 1
12786: ARRAY
12787: PUSH
12788: LD_INT 2
12790: ARRAY
12791: PPUSH
12792: LD_EXP 35
12796: PUSH
12797: LD_INT 1
12799: ARRAY
12800: PUSH
12801: LD_INT 3
12803: ARRAY
12804: PPUSH
12805: LD_EXP 35
12809: PUSH
12810: LD_INT 1
12812: ARRAY
12813: PUSH
12814: LD_INT 4
12816: ARRAY
12817: PPUSH
12818: CALL_OW 145
// end ; end ; 1 :
12822: GO 13021
12824: LD_INT 1
12826: DOUBLE
12827: EQUAL
12828: IFTRUE 12832
12830: GO 12935
12832: POP
// begin if not b then
12833: LD_VAR 0 4
12837: NOT
12838: IFFALSE 12854
// begin SetTag ( i , 0 ) ;
12840: LD_VAR 0 1
12844: PPUSH
12845: LD_INT 0
12847: PPUSH
12848: CALL_OW 109
// continue ;
12852: GO 12582
// end ; if IsInUnit ( i ) then
12854: LD_VAR 0 1
12858: PPUSH
12859: CALL_OW 310
12863: IFFALSE 12874
// ComExitBuilding ( i ) ;
12865: LD_VAR 0 1
12869: PPUSH
12870: CALL_OW 122
// if GetLives ( i ) < 650 then
12874: LD_VAR 0 1
12878: PPUSH
12879: CALL_OW 256
12883: PUSH
12884: LD_INT 650
12886: LESS
12887: IFFALSE 12903
// begin SetTag ( i , 2 ) ;
12889: LD_VAR 0 1
12893: PPUSH
12894: LD_INT 2
12896: PPUSH
12897: CALL_OW 109
// continue ;
12901: GO 12582
// end ; if b then
12903: LD_VAR 0 4
12907: IFFALSE 12933
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
12909: LD_VAR 0 1
12913: PPUSH
12914: LD_VAR 0 4
12918: PPUSH
12919: LD_VAR 0 1
12923: PPUSH
12924: CALL_OW 74
12928: PPUSH
12929: CALL_OW 130
// end ; 2 :
12933: GO 13021
12935: LD_INT 2
12937: DOUBLE
12938: EQUAL
12939: IFTRUE 12943
12941: GO 13020
12943: POP
// begin if GetLives ( i ) = 1000 then
12944: LD_VAR 0 1
12948: PPUSH
12949: CALL_OW 256
12953: PUSH
12954: LD_INT 1000
12956: EQUAL
12957: IFFALSE 12973
// begin SetTag ( i , 1 ) ;
12959: LD_VAR 0 1
12963: PPUSH
12964: LD_INT 1
12966: PPUSH
12967: CALL_OW 109
// continue ;
12971: GO 12582
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
12973: LD_VAR 0 1
12977: PPUSH
12978: LD_INT 84
12980: PPUSH
12981: LD_INT 93
12983: PPUSH
12984: CALL_OW 297
12988: PUSH
12989: LD_INT 6
12991: GREATER
12992: IFFALSE 13018
// begin ComMoveXY ( i , 84 , 93 ) ;
12994: LD_VAR 0 1
12998: PPUSH
12999: LD_INT 84
13001: PPUSH
13002: LD_INT 93
13004: PPUSH
13005: CALL_OW 111
// AddComHold ( i ) ;
13009: LD_VAR 0 1
13013: PPUSH
13014: CALL_OW 200
// end ; end ; end ;
13018: GO 13021
13020: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
13021: LD_VAR 0 1
13025: PPUSH
13026: LD_INT 12
13028: PPUSH
13029: CALL_OW 308
13033: NOT
13034: PUSH
13035: LD_VAR 0 1
13039: PPUSH
13040: CALL_OW 310
13044: NOT
13045: AND
13046: IFFALSE 13063
// ComMoveXY ( i , 91 , 95 ) ;
13048: LD_VAR 0 1
13052: PPUSH
13053: LD_INT 91
13055: PPUSH
13056: LD_INT 95
13058: PPUSH
13059: CALL_OW 111
// end ;
13063: GO 12582
13065: POP
13066: POP
// end ; end ;
13067: PPOPN 13
13069: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
13070: LD_INT 0
13072: PPUSH
13073: PPUSH
13074: PPUSH
13075: PPUSH
13076: PPUSH
13077: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
13078: LD_ADDR_VAR 0 3
13082: PUSH
13083: DOUBLE
13084: LD_INT 1
13086: DEC
13087: ST_TO_ADDR
13088: LD_INT 3
13090: PUSH
13091: LD_INT 4
13093: PUSH
13094: LD_INT 5
13096: PUSH
13097: LD_INT 6
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_OWVAR 67
13110: ARRAY
13111: PUSH
13112: LD_VAR 0 1
13116: PLUS
13117: PUSH
13118: FOR_TO
13119: IFFALSE 13436
// begin uc_side := 6 ;
13121: LD_ADDR_OWVAR 20
13125: PUSH
13126: LD_INT 6
13128: ST_TO_ADDR
// uc_nation := 3 ;
13129: LD_ADDR_OWVAR 21
13133: PUSH
13134: LD_INT 3
13136: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13137: LD_ADDR_VAR 0 6
13141: PUSH
13142: LD_INT 21
13144: PUSH
13145: LD_INT 22
13147: PUSH
13148: LD_INT 23
13150: PUSH
13151: LD_INT 24
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 1
13162: PPUSH
13163: LD_INT 4
13165: PPUSH
13166: CALL_OW 12
13170: ARRAY
13171: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13172: LD_ADDR_VAR 0 7
13176: PUSH
13177: LD_INT 42
13179: PUSH
13180: LD_INT 44
13182: PUSH
13183: LD_INT 43
13185: PUSH
13186: LD_INT 46
13188: PUSH
13189: LD_INT 45
13191: PUSH
13192: LD_INT 46
13194: PUSH
13195: LD_INT 45
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: PUSH
13207: LD_OWVAR 67
13211: PUSH
13212: LD_INT 0
13214: PPUSH
13215: LD_INT 3
13217: PPUSH
13218: CALL_OW 12
13222: PLUS
13223: ARRAY
13224: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13225: LD_VAR 0 6
13229: PUSH
13230: LD_INT 21
13232: PUSH
13233: LD_INT 22
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: IN
13240: PUSH
13241: LD_VAR 0 7
13245: PUSH
13246: LD_INT 46
13248: EQUAL
13249: AND
13250: IFFALSE 13279
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13252: LD_ADDR_VAR 0 7
13256: PUSH
13257: LD_INT 44
13259: PUSH
13260: LD_INT 45
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: LD_INT 1
13269: PPUSH
13270: LD_INT 2
13272: PPUSH
13273: CALL_OW 12
13277: ARRAY
13278: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
13279: LD_OWVAR 1
13283: PUSH
13284: LD_INT 31500
13286: PUSH
13287: LD_INT 27300
13289: PUSH
13290: LD_INT 23100
13292: PUSH
13293: LD_INT 18900
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: PUSH
13302: LD_OWVAR 67
13306: ARRAY
13307: LESS
13308: IFFALSE 13341
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
13310: LD_ADDR_VAR 0 7
13314: PUSH
13315: LD_INT 44
13317: PUSH
13318: LD_INT 43
13320: PUSH
13321: LD_INT 42
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: LIST
13328: PUSH
13329: LD_INT 1
13331: PPUSH
13332: LD_INT 3
13334: PPUSH
13335: CALL_OW 12
13339: ARRAY
13340: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
13341: LD_VAR 0 6
13345: PPUSH
13346: LD_INT 1
13348: PPUSH
13349: LD_INT 3
13351: PPUSH
13352: LD_VAR 0 7
13356: PPUSH
13357: LD_INT 90
13359: PPUSH
13360: CALL 46533 0 5
// un := CreateVehicle ;
13364: LD_ADDR_VAR 0 4
13368: PUSH
13369: CALL_OW 45
13373: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
13374: LD_VAR 0 4
13378: PPUSH
13379: LD_INT 140
13381: PPUSH
13382: LD_INT 146
13384: PPUSH
13385: LD_INT 0
13387: PPUSH
13388: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
13392: LD_VAR 0 4
13396: PPUSH
13397: LD_INT 131
13399: PPUSH
13400: LD_INT 128
13402: PPUSH
13403: CALL_OW 111
// wait ( 0 0$3 ) ;
13407: LD_INT 105
13409: PPUSH
13410: CALL_OW 67
// tmp := Join ( tmp , un ) ;
13414: LD_ADDR_VAR 0 5
13418: PUSH
13419: LD_VAR 0 5
13423: PPUSH
13424: LD_VAR 0 4
13428: PPUSH
13429: CALL 79404 0 2
13433: ST_TO_ADDR
// end ;
13434: GO 13118
13436: POP
13437: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
13438: LD_ADDR_EXP 36
13442: PUSH
13443: LD_EXP 36
13447: PPUSH
13448: LD_VAR 0 5
13452: PPUSH
13453: CALL 79441 0 2
13457: ST_TO_ADDR
// end ;
13458: LD_VAR 0 2
13462: RET
// every 0 0$3 trigger russianAttackers do
13463: LD_EXP 36
13467: IFFALSE 13550
13469: GO 13471
13471: DISABLE
// begin enable ;
13472: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
13473: LD_EXP 36
13477: PPUSH
13478: LD_INT 126
13480: PUSH
13481: LD_INT 108
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 107
13490: PUSH
13491: LD_INT 85
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: LD_INT 82
13500: PUSH
13501: LD_INT 62
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 73
13510: PUSH
13511: LD_INT 46
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 62
13520: PUSH
13521: LD_INT 31
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 52
13530: PUSH
13531: LD_INT 17
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: PPUSH
13546: CALL 82008 0 2
// end ;
13550: END
// every 20 20$0 trigger Difficulty > 2 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
13551: LD_OWVAR 67
13555: PUSH
13556: LD_INT 2
13558: GREATER
13559: PUSH
13560: LD_INT 22
13562: PUSH
13563: LD_INT 6
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 21
13572: PUSH
13573: LD_INT 2
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 50
13582: PUSH
13583: EMPTY
13584: LIST
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: LIST
13590: PPUSH
13591: CALL_OW 69
13595: PUSH
13596: LD_INT 0
13598: EQUAL
13599: AND
13600: IFFALSE 13654
13602: GO 13604
13604: DISABLE
// begin SetTech ( tech_weap1 , 6 , state_researched ) ;
13605: LD_INT 51
13607: PPUSH
13608: LD_INT 6
13610: PPUSH
13611: LD_INT 2
13613: PPUSH
13614: CALL_OW 322
// SetTech ( tech_comp1 , 6 , state_researched ) ;
13618: LD_INT 57
13620: PPUSH
13621: LD_INT 6
13623: PPUSH
13624: LD_INT 2
13626: PPUSH
13627: CALL_OW 322
// if Difficulty > 3 then
13631: LD_OWVAR 67
13635: PUSH
13636: LD_INT 3
13638: GREATER
13639: IFFALSE 13654
// SetTech ( tech_weap2 , 6 , state_researched ) ;
13641: LD_INT 52
13643: PPUSH
13644: LD_INT 6
13646: PPUSH
13647: LD_INT 2
13649: PPUSH
13650: CALL_OW 322
// end ; end_of_file
13654: END
// on SailEvent ( event ) do begin if event = 1 then
13655: LD_VAR 0 1
13659: PUSH
13660: LD_INT 1
13662: EQUAL
13663: IFFALSE 13693
// PrepareRussianAttack ( [ 2 , 4 , 6 , 8 ] [ Difficulty ] ) ;
13665: LD_INT 2
13667: PUSH
13668: LD_INT 4
13670: PUSH
13671: LD_INT 6
13673: PUSH
13674: LD_INT 8
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: PUSH
13683: LD_OWVAR 67
13687: ARRAY
13688: PPUSH
13689: CALL 13070 0 1
// end ;
13693: PPOPN 1
13695: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Sikorski and killerSide = 1 then
13696: LD_VAR 0 1
13700: PUSH
13701: LD_EXP 28
13705: EQUAL
13706: PUSH
13707: LD_VAR 0 2
13711: PUSH
13712: LD_INT 1
13714: EQUAL
13715: AND
13716: IFFALSE 13722
// SikorskiKilledInAction ;
13718: CALL 18839 0 0
// end ;
13722: PPOPN 3
13724: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
13725: LD_INT 0
13727: PPUSH
13728: PPUSH
13729: PPUSH
13730: PPUSH
13731: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
13732: LD_VAR 0 1
13736: PPUSH
13737: CALL 36388 0 1
// if un = JMM then
13741: LD_VAR 0 1
13745: PUSH
13746: LD_EXP 14
13750: EQUAL
13751: IFFALSE 13760
// YouLost ( JMM ) ;
13753: LD_STRING JMM
13755: PPUSH
13756: CALL_OW 104
// if un = Sikorski then
13760: LD_VAR 0 1
13764: PUSH
13765: LD_EXP 28
13769: EQUAL
13770: IFFALSE 13796
// if sikorskiStatus = 0 then
13772: LD_EXP 9
13776: PUSH
13777: LD_INT 0
13779: EQUAL
13780: IFFALSE 13788
// SikorskiKilledInAction else
13782: CALL 18839 0 0
13786: GO 13796
// sikorskiIsKilled := true ;
13788: LD_ADDR_EXP 10
13792: PUSH
13793: LD_INT 1
13795: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetNation ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
13796: LD_VAR 0 1
13800: PPUSH
13801: CALL_OW 255
13805: PUSH
13806: LD_INT 1
13808: EQUAL
13809: PUSH
13810: LD_VAR 0 1
13814: PPUSH
13815: CALL_OW 248
13819: PUSH
13820: LD_INT 1
13822: EQUAL
13823: AND
13824: PUSH
13825: LD_VAR 0 1
13829: PPUSH
13830: CALL_OW 266
13834: PUSH
13835: LD_INT 0
13837: PUSH
13838: LD_INT 1
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: IN
13845: AND
13846: IFFALSE 13855
// YouLost ( Destroyed ) ;
13848: LD_STRING Destroyed
13850: PPUSH
13851: CALL_OW 104
// if un = ruDep then
13855: LD_VAR 0 1
13859: PUSH
13860: LD_INT 28
13862: EQUAL
13863: IFFALSE 13997
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
13865: LD_ADDR_VAR 0 2
13869: PUSH
13870: LD_INT 22
13872: PUSH
13873: LD_INT 3
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PUSH
13880: LD_INT 25
13882: PUSH
13883: LD_INT 1
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: PPUSH
13894: CALL_OW 69
13898: PUSH
13899: FOR_IN
13900: IFFALSE 13995
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
13902: LD_ADDR_VAR 0 3
13906: PUSH
13907: LD_INT 11
13909: PPUSH
13910: LD_INT 81
13912: PUSH
13913: LD_INT 3
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PPUSH
13920: CALL_OW 70
13924: PPUSH
13925: LD_VAR 0 2
13929: PPUSH
13930: CALL_OW 74
13934: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
13935: LD_VAR 0 2
13939: PPUSH
13940: CALL_OW 310
13944: PPUSH
13945: CALL_OW 266
13949: PUSH
13950: LD_INT 32
13952: EQUAL
13953: IFFALSE 13993
// begin ComExitBuilding ( i ) ;
13955: LD_VAR 0 2
13959: PPUSH
13960: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
13964: LD_VAR 0 2
13968: PPUSH
13969: LD_VAR 0 3
13973: PPUSH
13974: CALL_OW 250
13978: PPUSH
13979: LD_VAR 0 3
13983: PPUSH
13984: CALL_OW 251
13988: PPUSH
13989: CALL_OW 174
// end ; end ;
13993: GO 13899
13995: POP
13996: POP
// end ; if un in ruMobile then
13997: LD_VAR 0 1
14001: PUSH
14002: LD_EXP 34
14006: IN
14007: IFFALSE 14025
// ruMobile := ruMobile diff un ;
14009: LD_ADDR_EXP 34
14013: PUSH
14014: LD_EXP 34
14018: PUSH
14019: LD_VAR 0 1
14023: DIFF
14024: ST_TO_ADDR
// if GetSide ( un ) = 3 then
14025: LD_VAR 0 1
14029: PPUSH
14030: CALL_OW 255
14034: PUSH
14035: LD_INT 3
14037: EQUAL
14038: IFFALSE 14673
// begin if GetType ( un ) = unit_building then
14040: LD_VAR 0 1
14044: PPUSH
14045: CALL_OW 247
14049: PUSH
14050: LD_INT 3
14052: EQUAL
14053: IFFALSE 14189
// begin btype := GetBType ( un ) ;
14055: LD_ADDR_VAR 0 6
14059: PUSH
14060: LD_VAR 0 1
14064: PPUSH
14065: CALL_OW 266
14069: ST_TO_ADDR
// if btype = b_warehouse then
14070: LD_VAR 0 6
14074: PUSH
14075: LD_INT 1
14077: EQUAL
14078: IFFALSE 14088
// btype := b_depot ;
14080: LD_ADDR_VAR 0 6
14084: PUSH
14085: LD_INT 0
14087: ST_TO_ADDR
// if btype = b_barracks then
14088: LD_VAR 0 6
14092: PUSH
14093: LD_INT 5
14095: EQUAL
14096: IFFALSE 14106
// btype := b_armoury ;
14098: LD_ADDR_VAR 0 6
14102: PUSH
14103: LD_INT 4
14105: ST_TO_ADDR
// if btype = b_lab_full then
14106: LD_VAR 0 6
14110: PUSH
14111: LD_INT 8
14113: EQUAL
14114: IFFALSE 14124
// btype := b_lab ;
14116: LD_ADDR_VAR 0 6
14120: PUSH
14121: LD_INT 6
14123: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
14124: LD_ADDR_EXP 35
14128: PUSH
14129: LD_EXP 35
14133: PPUSH
14134: LD_EXP 35
14138: PUSH
14139: LD_INT 1
14141: PLUS
14142: PPUSH
14143: LD_VAR 0 6
14147: PUSH
14148: LD_VAR 0 1
14152: PPUSH
14153: CALL_OW 250
14157: PUSH
14158: LD_VAR 0 1
14162: PPUSH
14163: CALL_OW 251
14167: PUSH
14168: LD_VAR 0 1
14172: PPUSH
14173: CALL_OW 254
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: PPUSH
14184: CALL_OW 1
14188: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
14189: LD_VAR 0 1
14193: PPUSH
14194: CALL_OW 247
14198: PUSH
14199: LD_INT 2
14201: EQUAL
14202: IFFALSE 14477
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
14204: LD_VAR 0 1
14208: PPUSH
14209: CALL_OW 264
14213: PUSH
14214: LD_INT 52
14216: PUSH
14217: LD_INT 51
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: IN
14224: IFFALSE 14254
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
14226: LD_INT 29
14228: PPUSH
14229: LD_INT 22
14231: PPUSH
14232: LD_INT 1
14234: PPUSH
14235: LD_INT 3
14237: PPUSH
14238: LD_VAR 0 1
14242: PPUSH
14243: CALL_OW 264
14247: PPUSH
14248: CALL_OW 185
// end else
14252: GO 14477
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
14254: LD_ADDR_VAR 0 4
14258: PUSH
14259: LD_INT 21
14261: PUSH
14262: LD_INT 22
14264: PUSH
14265: LD_INT 23
14267: PUSH
14268: LD_INT 24
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 1
14279: PPUSH
14280: LD_INT 4
14282: PPUSH
14283: CALL_OW 12
14287: ARRAY
14288: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
14289: LD_ADDR_VAR 0 5
14293: PUSH
14294: LD_INT 42
14296: PUSH
14297: LD_INT 44
14299: PUSH
14300: LD_INT 43
14302: PUSH
14303: LD_INT 46
14305: PUSH
14306: LD_INT 45
14308: PUSH
14309: LD_INT 46
14311: PUSH
14312: LD_INT 45
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: PUSH
14324: LD_OWVAR 67
14328: PUSH
14329: LD_INT 0
14331: PPUSH
14332: LD_INT 3
14334: PPUSH
14335: CALL_OW 12
14339: PLUS
14340: ARRAY
14341: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
14342: LD_VAR 0 4
14346: PUSH
14347: LD_INT 21
14349: PUSH
14350: LD_INT 22
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: IN
14357: PUSH
14358: LD_VAR 0 5
14362: PUSH
14363: LD_INT 46
14365: EQUAL
14366: AND
14367: IFFALSE 14396
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
14369: LD_ADDR_VAR 0 5
14373: PUSH
14374: LD_INT 44
14376: PUSH
14377: LD_INT 45
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: LD_INT 1
14386: PPUSH
14387: LD_INT 2
14389: PPUSH
14390: CALL_OW 12
14394: ARRAY
14395: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
14396: LD_OWVAR 1
14400: PUSH
14401: LD_INT 31500
14403: PUSH
14404: LD_INT 27300
14406: PUSH
14407: LD_INT 23100
14409: PUSH
14410: LD_INT 21000
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: PUSH
14419: LD_OWVAR 67
14423: ARRAY
14424: LESS
14425: IFFALSE 14454
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
14427: LD_ADDR_VAR 0 5
14431: PUSH
14432: LD_INT 44
14434: PUSH
14435: LD_INT 43
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: LD_INT 1
14444: PPUSH
14445: LD_INT 2
14447: PPUSH
14448: CALL_OW 12
14452: ARRAY
14453: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
14454: LD_INT 29
14456: PPUSH
14457: LD_VAR 0 4
14461: PPUSH
14462: LD_INT 1
14464: PPUSH
14465: LD_INT 1
14467: PPUSH
14468: LD_VAR 0 5
14472: PPUSH
14473: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
14477: LD_VAR 0 1
14481: PPUSH
14482: CALL_OW 257
14486: PUSH
14487: LD_INT 3
14489: EQUAL
14490: IFFALSE 14673
// begin killMechCounter := Inc ( killMechCounter ) ;
14492: LD_ADDR_EXP 12
14496: PUSH
14497: LD_EXP 12
14501: PPUSH
14502: CALL 80765 0 1
14506: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
14507: LD_EXP 33
14511: PUSH
14512: LD_INT 0
14514: EQUAL
14515: PUSH
14516: LD_INT 29
14518: PPUSH
14519: CALL_OW 302
14523: NOT
14524: OR
14525: IFFALSE 14529
// exit ;
14527: GO 14673
// ruMechCounter := Dec ( ruMechCounter ) ;
14529: LD_ADDR_EXP 33
14533: PUSH
14534: LD_EXP 33
14538: PPUSH
14539: CALL 80787 0 1
14543: ST_TO_ADDR
// uc_side := 3 ;
14544: LD_ADDR_OWVAR 20
14548: PUSH
14549: LD_INT 3
14551: ST_TO_ADDR
// uc_nation := 3 ;
14552: LD_ADDR_OWVAR 21
14556: PUSH
14557: LD_INT 3
14559: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
14560: LD_INT 0
14562: PPUSH
14563: LD_INT 5
14565: PUSH
14566: LD_INT 6
14568: PUSH
14569: LD_INT 7
14571: PUSH
14572: LD_INT 8
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: PUSH
14581: LD_OWVAR 67
14585: ARRAY
14586: PPUSH
14587: CALL_OW 383
// tmp := CreateHuman ;
14591: LD_ADDR_VAR 0 3
14595: PUSH
14596: CALL_OW 44
14600: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
14601: LD_VAR 0 3
14605: PPUSH
14606: LD_INT 145
14608: PPUSH
14609: LD_INT 133
14611: PPUSH
14612: LD_INT 0
14614: PPUSH
14615: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
14619: LD_VAR 0 3
14623: PPUSH
14624: LD_INT 29
14626: PPUSH
14627: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14631: LD_INT 35
14633: PPUSH
14634: CALL_OW 67
// if not HasTask ( tmp ) then
14638: LD_VAR 0 3
14642: PPUSH
14643: CALL_OW 314
14647: NOT
14648: IFFALSE 14662
// ComEnterUnit ( tmp , ruFac ) ;
14650: LD_VAR 0 3
14654: PPUSH
14655: LD_INT 29
14657: PPUSH
14658: CALL_OW 120
// until IsInUnit ( tmp ) ;
14662: LD_VAR 0 3
14666: PPUSH
14667: CALL_OW 310
14671: IFFALSE 14631
// end ; end ; end ;
14673: PPOPN 6
14675: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
14676: LD_VAR 0 1
14680: PPUSH
14681: CALL_OW 255
14685: PUSH
14686: LD_INT 4
14688: EQUAL
14689: IFFALSE 14706
// ComMoveXY ( driver , 40 , 47 ) ;
14691: LD_VAR 0 1
14695: PPUSH
14696: LD_INT 40
14698: PPUSH
14699: LD_INT 47
14701: PPUSH
14702: CALL_OW 111
// if GetSide ( driver ) = 3 then
14706: LD_VAR 0 1
14710: PPUSH
14711: CALL_OW 255
14715: PUSH
14716: LD_INT 3
14718: EQUAL
14719: IFFALSE 14933
// begin ComMoveXY ( driver , 90 , 97 ) ;
14721: LD_VAR 0 1
14725: PPUSH
14726: LD_INT 90
14728: PPUSH
14729: LD_INT 97
14731: PPUSH
14732: CALL_OW 111
// if IsOk ( ruFac ) then
14736: LD_INT 29
14738: PPUSH
14739: CALL_OW 302
14743: IFFALSE 14857
// begin repeat wait ( 0 0$1 ) ;
14745: LD_INT 35
14747: PPUSH
14748: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
14752: LD_INT 29
14754: PPUSH
14755: CALL_OW 313
14759: PUSH
14760: LD_INT 6
14762: LESS
14763: PUSH
14764: LD_VAR 0 1
14768: PPUSH
14769: CALL_OW 301
14773: OR
14774: IFFALSE 14745
// if IsDead ( driver ) then
14776: LD_VAR 0 1
14780: PPUSH
14781: CALL_OW 301
14785: IFFALSE 14789
// exit ;
14787: GO 14933
// repeat wait ( 0 0$10 ) ;
14789: LD_INT 350
14791: PPUSH
14792: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
14796: LD_VAR 0 1
14800: PPUSH
14801: CALL_OW 314
14805: NOT
14806: PUSH
14807: LD_INT 29
14809: PPUSH
14810: CALL_OW 313
14814: PUSH
14815: LD_INT 6
14817: LESS
14818: AND
14819: IFFALSE 14833
// ComEnterUnit ( driver , ruFac ) ;
14821: LD_VAR 0 1
14825: PPUSH
14826: LD_INT 29
14828: PPUSH
14829: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
14833: LD_VAR 0 1
14837: PPUSH
14838: CALL_OW 301
14842: PUSH
14843: LD_VAR 0 1
14847: PPUSH
14848: CALL_OW 310
14852: OR
14853: IFFALSE 14789
// end else
14855: GO 14933
// begin ComMoveXY ( driver , 142 , 148 ) ;
14857: LD_VAR 0 1
14861: PPUSH
14862: LD_INT 142
14864: PPUSH
14865: LD_INT 148
14867: PPUSH
14868: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14872: LD_INT 35
14874: PPUSH
14875: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
14879: LD_VAR 0 1
14883: PPUSH
14884: CALL_OW 301
14888: PUSH
14889: LD_VAR 0 1
14893: PPUSH
14894: LD_INT 142
14896: PPUSH
14897: LD_INT 148
14899: PPUSH
14900: CALL_OW 307
14904: OR
14905: IFFALSE 14872
// if IsAt ( driver , 142 , 148 ) then
14907: LD_VAR 0 1
14911: PPUSH
14912: LD_INT 142
14914: PPUSH
14915: LD_INT 148
14917: PPUSH
14918: CALL_OW 307
14922: IFFALSE 14933
// RemoveUnit ( driver ) ;
14924: LD_VAR 0 1
14928: PPUSH
14929: CALL_OW 64
// end ; end ; end ;
14933: PPOPN 4
14935: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
14936: LD_VAR 0 2
14940: PPUSH
14941: CALL_OW 257
14945: PUSH
14946: LD_INT 3
14948: EQUAL
14949: PUSH
14950: LD_VAR 0 1
14954: PPUSH
14955: CALL_OW 255
14959: PUSH
14960: LD_INT 3
14962: EQUAL
14963: AND
14964: PUSH
14965: LD_VAR 0 1
14969: PUSH
14970: LD_INT 29
14972: EQUAL
14973: AND
14974: IFFALSE 14988
// SetLives ( un , 1000 ) ;
14976: LD_VAR 0 2
14980: PPUSH
14981: LD_INT 1000
14983: PPUSH
14984: CALL_OW 234
// if GetTag ( b ) = 701 then
14988: LD_VAR 0 1
14992: PPUSH
14993: CALL_OW 110
14997: PUSH
14998: LD_INT 701
15000: EQUAL
15001: IFFALSE 15027
// begin SetTag ( b , 0 ) ;
15003: LD_VAR 0 1
15007: PPUSH
15008: LD_INT 0
15010: PPUSH
15011: CALL_OW 109
// SetTag ( un , 0 ) ;
15015: LD_VAR 0 2
15019: PPUSH
15020: LD_INT 0
15022: PPUSH
15023: CALL_OW 109
// end ; end ;
15027: PPOPN 2
15029: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
15030: LD_VAR 0 1
15034: PPUSH
15035: CALL_OW 255
15039: PUSH
15040: LD_INT 3
15042: PUSH
15043: LD_INT 6
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: IN
15050: PUSH
15051: LD_VAR 0 1
15055: PPUSH
15056: CALL_OW 263
15060: PUSH
15061: LD_INT 3
15063: EQUAL
15064: AND
15065: PUSH
15066: LD_EXP 7
15070: NOT
15071: AND
15072: IFFALSE 15091
// begin seenComputer := true ;
15074: LD_ADDR_EXP 7
15078: PUSH
15079: LD_INT 1
15081: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
15082: LD_VAR 0 1
15086: PPUSH
15087: CALL 18030 0 1
// end ; end ;
15091: PPOPN 1
15093: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
15094: LD_INT 0
15096: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15097: LD_VAR 0 1
15101: PPUSH
15102: LD_VAR 0 2
15106: PPUSH
15107: CALL 36446 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
15111: LD_VAR 0 1
15115: PPUSH
15116: CALL_OW 255
15120: PUSH
15121: LD_INT 3
15123: EQUAL
15124: PUSH
15125: LD_VAR 0 1
15129: PPUSH
15130: CALL_OW 263
15134: PUSH
15135: LD_INT 1
15137: EQUAL
15138: AND
15139: PUSH
15140: LD_VAR 0 1
15144: PPUSH
15145: CALL_OW 264
15149: PUSH
15150: LD_INT 42
15152: PUSH
15153: LD_INT 43
15155: PUSH
15156: LD_INT 44
15158: PUSH
15159: LD_INT 46
15161: PUSH
15162: LD_INT 45
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: IN
15172: AND
15173: IFFALSE 15203
// begin SetTag ( vehicle , 300 ) ;
15175: LD_VAR 0 1
15179: PPUSH
15180: LD_INT 300
15182: PPUSH
15183: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
15187: LD_ADDR_EXP 34
15191: PUSH
15192: LD_EXP 34
15196: PUSH
15197: LD_VAR 0 1
15201: UNION
15202: ST_TO_ADDR
// end ; end ;
15203: PPOPN 3
15205: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
15206: LD_INT 0
15208: PPUSH
// begin if InArea ( x , y , ruCrates ) then
15209: LD_VAR 0 2
15213: PPUSH
15214: LD_VAR 0 3
15218: PPUSH
15219: LD_INT 13
15221: PPUSH
15222: CALL_OW 309
15226: IFFALSE 15357
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
15228: LD_ADDR_VAR 0 6
15232: PUSH
15233: LD_INT 22
15235: PUSH
15236: LD_INT 3
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PUSH
15243: LD_INT 50
15245: PUSH
15246: EMPTY
15247: LIST
15248: PUSH
15249: LD_INT 34
15251: PUSH
15252: LD_INT 51
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: LIST
15263: PPUSH
15264: CALL_OW 69
15268: ST_TO_ADDR
// if not cargo then
15269: LD_VAR 0 6
15273: NOT
15274: IFFALSE 15278
// exit ;
15276: GO 15357
// wait ( 0 0$5 ) ;
15278: LD_INT 175
15280: PPUSH
15281: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
15285: LD_VAR 0 6
15289: PUSH
15290: LD_INT 1
15292: ARRAY
15293: PPUSH
15294: LD_INT 28
15296: PPUSH
15297: CALL_OW 296
15301: PUSH
15302: LD_INT 6
15304: LESS
15305: PUSH
15306: LD_VAR 0 6
15310: PUSH
15311: LD_INT 1
15313: ARRAY
15314: PPUSH
15315: CALL_OW 261
15319: PUSH
15320: LD_INT 50
15322: LESS
15323: AND
15324: IFFALSE 15338
// ComMoveUnit ( cargo , ruDep ) ;
15326: LD_VAR 0 6
15330: PPUSH
15331: LD_INT 28
15333: PPUSH
15334: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
15338: LD_VAR 0 6
15342: PPUSH
15343: LD_VAR 0 2
15347: PPUSH
15348: LD_VAR 0 3
15352: PPUSH
15353: CALL_OW 177
// end ; end ;
15357: PPOPN 6
15359: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
15360: LD_VAR 0 1
15364: PPUSH
15365: CALL_OW 264
15369: PUSH
15370: LD_INT 45
15372: EQUAL
15373: IFFALSE 15390
// captureRocketCounter := Inc ( captureRocketCounter ) ;
15375: LD_ADDR_EXP 11
15379: PUSH
15380: LD_EXP 11
15384: PPUSH
15385: CALL 80765 0 1
15389: ST_TO_ADDR
// end ;
15390: PPOPN 4
15392: END
// on BuildingComplete ( b ) do var i , tmp ;
15393: LD_INT 0
15395: PPUSH
15396: PPUSH
// begin if GetSide ( b ) = 3 then
15397: LD_VAR 0 1
15401: PPUSH
15402: CALL_OW 255
15406: PUSH
15407: LD_INT 3
15409: EQUAL
15410: IFFALSE 15507
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
15412: LD_ADDR_EXP 35
15416: PUSH
15417: LD_EXP 35
15421: PPUSH
15422: LD_INT 1
15424: PPUSH
15425: CALL_OW 3
15429: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
15430: LD_VAR 0 1
15434: PPUSH
15435: CALL_OW 266
15439: PUSH
15440: LD_INT 4
15442: EQUAL
15443: IFFALSE 15454
// ComUpgrade ( b ) ;
15445: LD_VAR 0 1
15449: PPUSH
15450: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
15454: LD_VAR 0 1
15458: PPUSH
15459: CALL_OW 266
15463: PUSH
15464: LD_INT 32
15466: PUSH
15467: LD_INT 33
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: IN
15474: IFFALSE 15507
// AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
15476: LD_VAR 0 1
15480: PPUSH
15481: LD_INT 46
15483: PUSH
15484: LD_INT 45
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: LD_INT 1
15493: PPUSH
15494: LD_INT 2
15496: PPUSH
15497: CALL_OW 12
15501: ARRAY
15502: PPUSH
15503: CALL_OW 208
// end ; end ; end_of_file
15507: PPOPN 3
15509: END
// export function Action ; var i , tmp , un , inUnit ; begin
15510: LD_INT 0
15512: PPUSH
15513: PPUSH
15514: PPUSH
15515: PPUSH
15516: PPUSH
// Video ( true ) ;
15517: LD_INT 1
15519: PPUSH
15520: CALL 79376 0 1
// invincibleMode := true ;
15524: LD_ADDR_EXP 5
15528: PUSH
15529: LD_INT 1
15531: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
15532: LD_INT 50
15534: PPUSH
15535: LD_INT 12
15537: PPUSH
15538: LD_INT 1
15540: PPUSH
15541: LD_INT 56
15543: NEG
15544: PPUSH
15545: CALL 79290 0 4
// CenterOnXY ( 50 , 12 ) ;
15549: LD_INT 50
15551: PPUSH
15552: LD_INT 12
15554: PPUSH
15555: CALL_OW 84
// wait ( 0 0$3 ) ;
15559: LD_INT 105
15561: PPUSH
15562: CALL_OW 67
// PrepareStartRussianAttack ;
15566: CALL 10087 0 0
// CenterOnXY ( 66 , 47 ) ;
15570: LD_INT 66
15572: PPUSH
15573: LD_INT 47
15575: PPUSH
15576: CALL_OW 84
// wait ( 0 0$5 ) ;
15580: LD_INT 175
15582: PPUSH
15583: CALL_OW 67
// case gammaCommander of 1 :
15587: LD_EXP 13
15591: PUSH
15592: LD_INT 1
15594: DOUBLE
15595: EQUAL
15596: IFTRUE 15600
15598: GO 15615
15600: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
15601: LD_EXP 16
15605: PPUSH
15606: LD_STRING D1-Don-1
15608: PPUSH
15609: CALL_OW 88
15613: GO 15662
15615: LD_INT 2
15617: DOUBLE
15618: EQUAL
15619: IFTRUE 15623
15621: GO 15638
15623: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
15624: LD_EXP 15
15628: PPUSH
15629: LD_STRING D1-Brown-1
15631: PPUSH
15632: CALL_OW 88
15636: GO 15662
15638: LD_INT 3
15640: DOUBLE
15641: EQUAL
15642: IFTRUE 15646
15644: GO 15661
15646: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
15647: LD_EXP 25
15651: PPUSH
15652: LD_STRING D1-VanH-1
15654: PPUSH
15655: CALL_OW 88
15659: GO 15662
15661: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
15662: LD_ADDR_VAR 0 3
15666: PUSH
15667: LD_INT 22
15669: PUSH
15670: LD_INT 1
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 33
15679: PUSH
15680: LD_INT 2
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 61
15689: PUSH
15690: EMPTY
15691: LIST
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: LIST
15697: PPUSH
15698: CALL_OW 69
15702: ST_TO_ADDR
// if tmp then
15703: LD_VAR 0 3
15707: IFFALSE 15724
// ComAgressiveMove ( tmp , 74 , 44 ) ;
15709: LD_VAR 0 3
15713: PPUSH
15714: LD_INT 74
15716: PPUSH
15717: LD_INT 44
15719: PPUSH
15720: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
15724: LD_ADDR_VAR 0 3
15728: PUSH
15729: LD_INT 22
15731: PUSH
15732: LD_INT 1
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PUSH
15739: LD_INT 25
15741: PUSH
15742: LD_INT 1
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PPUSH
15753: CALL_OW 69
15757: PUSH
15758: LD_EXP 16
15762: PUSH
15763: LD_EXP 15
15767: PUSH
15768: LD_EXP 25
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: LIST
15777: DIFF
15778: ST_TO_ADDR
// if tmp then
15779: LD_VAR 0 3
15783: IFFALSE 15861
// for i in tmp do
15785: LD_ADDR_VAR 0 2
15789: PUSH
15790: LD_VAR 0 3
15794: PUSH
15795: FOR_IN
15796: IFFALSE 15859
// begin inUnit := IsInUnit ( i ) ;
15798: LD_ADDR_VAR 0 5
15802: PUSH
15803: LD_VAR 0 2
15807: PPUSH
15808: CALL_OW 310
15812: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
15813: LD_VAR 0 5
15817: PUSH
15818: LD_VAR 0 5
15822: PPUSH
15823: CALL_OW 266
15827: PUSH
15828: LD_INT 32
15830: PUSH
15831: LD_INT 31
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: IN
15838: AND
15839: IFFALSE 15857
// tmp := tmp diff i ;
15841: LD_ADDR_VAR 0 3
15845: PUSH
15846: LD_VAR 0 3
15850: PUSH
15851: LD_VAR 0 2
15855: DIFF
15856: ST_TO_ADDR
// end ;
15857: GO 15795
15859: POP
15860: POP
// if tmp then
15861: LD_VAR 0 3
15865: IFFALSE 15955
// begin ComExitAll ( tmp ) ;
15867: LD_VAR 0 3
15871: PPUSH
15872: CALL 79885 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
15876: LD_VAR 0 3
15880: PPUSH
15881: LD_INT 74
15883: PPUSH
15884: LD_INT 44
15886: PPUSH
15887: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
15891: LD_ADDR_VAR 0 3
15895: PUSH
15896: LD_INT 22
15898: PUSH
15899: LD_INT 1
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 25
15908: PUSH
15909: LD_INT 4
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PPUSH
15920: CALL_OW 69
15924: ST_TO_ADDR
// if tmp then
15925: LD_VAR 0 3
15929: IFFALSE 15955
// begin ComExitAll ( tmp ) ;
15931: LD_VAR 0 3
15935: PPUSH
15936: CALL 79885 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
15940: LD_VAR 0 3
15944: PPUSH
15945: LD_INT 66
15947: PPUSH
15948: LD_INT 28
15950: PPUSH
15951: CALL_OW 171
// end ; end ; game_speed := 4 ;
15955: LD_ADDR_OWVAR 65
15959: PUSH
15960: LD_INT 4
15962: ST_TO_ADDR
// wait ( 0 0$2 ) ;
15963: LD_INT 70
15965: PPUSH
15966: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
15970: LD_EXP 29
15974: PPUSH
15975: LD_STRING D1-Har-1
15977: PPUSH
15978: CALL_OW 94
// case gammaCommander of 1 :
15982: LD_EXP 13
15986: PUSH
15987: LD_INT 1
15989: DOUBLE
15990: EQUAL
15991: IFTRUE 15995
15993: GO 16010
15995: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
15996: LD_EXP 16
16000: PPUSH
16001: LD_STRING D1-Don-2
16003: PPUSH
16004: CALL_OW 88
16008: GO 16057
16010: LD_INT 2
16012: DOUBLE
16013: EQUAL
16014: IFTRUE 16018
16016: GO 16033
16018: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
16019: LD_EXP 15
16023: PPUSH
16024: LD_STRING D1-Brown-2
16026: PPUSH
16027: CALL_OW 88
16031: GO 16057
16033: LD_INT 3
16035: DOUBLE
16036: EQUAL
16037: IFTRUE 16041
16039: GO 16056
16041: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
16042: LD_EXP 25
16046: PPUSH
16047: LD_STRING D1-VanH-2
16049: PPUSH
16050: CALL_OW 88
16054: GO 16057
16056: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
16057: LD_EXP 29
16061: PPUSH
16062: LD_STRING D1-Har-2
16064: PPUSH
16065: CALL_OW 94
// invincibleMode := false ;
16069: LD_ADDR_EXP 5
16073: PUSH
16074: LD_INT 0
16076: ST_TO_ADDR
// Video ( false ) ;
16077: LD_INT 0
16079: PPUSH
16080: CALL 79376 0 1
// ChangeMissionObjectives ( M1 ) ;
16084: LD_STRING M1
16086: PPUSH
16087: CALL_OW 337
// SaveForQuickRestart ;
16091: CALL_OW 22
// wait ( 2 2$30 ) ;
16095: LD_INT 5250
16097: PPUSH
16098: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
16102: LD_INT 1
16104: PPUSH
16105: CALL 13070 0 1
// wait ( 4 4$30 ) ;
16109: LD_INT 9450
16111: PPUSH
16112: CALL_OW 67
// if Difficulty > 1 then
16116: LD_OWVAR 67
16120: PUSH
16121: LD_INT 1
16123: GREATER
16124: IFFALSE 16133
// PrepareRussianAttack ( 2 ) ;
16126: LD_INT 2
16128: PPUSH
16129: CALL 13070 0 1
// if Difficulty > 2 then
16133: LD_OWVAR 67
16137: PUSH
16138: LD_INT 2
16140: GREATER
16141: IFFALSE 16300
// begin for i := 1 to 4 do
16143: LD_ADDR_VAR 0 2
16147: PUSH
16148: DOUBLE
16149: LD_INT 1
16151: DEC
16152: ST_TO_ADDR
16153: LD_INT 4
16155: PUSH
16156: FOR_TO
16157: IFFALSE 16242
// begin uc_side := 6 ;
16159: LD_ADDR_OWVAR 20
16163: PUSH
16164: LD_INT 6
16166: ST_TO_ADDR
// uc_nation := 3 ;
16167: LD_ADDR_OWVAR 21
16171: PUSH
16172: LD_INT 3
16174: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
16175: LD_INT 0
16177: PPUSH
16178: LD_INT 7
16180: PPUSH
16181: CALL_OW 381
// un := CreateHuman ;
16185: LD_ADDR_VAR 0 4
16189: PUSH
16190: CALL_OW 44
16194: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16195: LD_VAR 0 4
16199: PPUSH
16200: LD_INT 122
16202: PPUSH
16203: LD_INT 89
16205: PPUSH
16206: LD_INT 3
16208: PPUSH
16209: LD_INT 0
16211: PPUSH
16212: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
16216: LD_VAR 0 4
16220: PPUSH
16221: LD_INT 88
16223: PPUSH
16224: LD_INT 42
16226: PPUSH
16227: CALL_OW 114
// AddComHold ( un ) ;
16231: LD_VAR 0 4
16235: PPUSH
16236: CALL_OW 200
// end ;
16240: GO 16156
16242: POP
16243: POP
// PrepareScientist ( false , 6 ) ;
16244: LD_INT 0
16246: PPUSH
16247: LD_INT 6
16249: PPUSH
16250: CALL_OW 384
// un := CreateHuman ;
16254: LD_ADDR_VAR 0 4
16258: PUSH
16259: CALL_OW 44
16263: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16264: LD_VAR 0 4
16268: PPUSH
16269: LD_INT 122
16271: PPUSH
16272: LD_INT 89
16274: PPUSH
16275: LD_INT 3
16277: PPUSH
16278: LD_INT 0
16280: PPUSH
16281: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
16285: LD_VAR 0 4
16289: PPUSH
16290: LD_INT 91
16292: PPUSH
16293: LD_INT 48
16295: PPUSH
16296: CALL_OW 111
// end ; end ;
16300: LD_VAR 0 1
16304: RET
// every 0 0$1 trigger invincibleMode do var i ;
16305: LD_EXP 5
16309: IFFALSE 16406
16311: GO 16313
16313: DISABLE
16314: LD_INT 0
16316: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_human ] ] , [ f_not , [ f_lives , 900 ] ] ] ) do
16317: LD_ADDR_VAR 0 1
16321: PUSH
16322: LD_INT 22
16324: PUSH
16325: LD_INT 1
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 2
16334: PUSH
16335: LD_INT 21
16337: PUSH
16338: LD_INT 3
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: LD_INT 21
16347: PUSH
16348: LD_INT 1
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: LIST
16359: PUSH
16360: LD_INT 3
16362: PUSH
16363: LD_INT 24
16365: PUSH
16366: LD_INT 900
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: LIST
16381: PPUSH
16382: CALL_OW 69
16386: PUSH
16387: FOR_IN
16388: IFFALSE 16404
// SetLives ( i , 900 ) ;
16390: LD_VAR 0 1
16394: PPUSH
16395: LD_INT 900
16397: PPUSH
16398: CALL_OW 234
16402: GO 16387
16404: POP
16405: POP
// end ;
16406: PPOPN 1
16408: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
16409: LD_OWVAR 1
16413: PUSH
16414: LD_INT 14700
16416: GREATER
16417: IFFALSE 18027
16419: GO 16421
16421: DISABLE
16422: LD_INT 0
16424: PPUSH
16425: PPUSH
// begin PrepareSupportFromDelta ;
16426: CALL 4052 0 0
// deltaSupport := true ;
16430: LD_ADDR_EXP 6
16434: PUSH
16435: LD_INT 1
16437: ST_TO_ADDR
// dialog := false ;
16438: LD_ADDR_VAR 0 1
16442: PUSH
16443: LD_INT 0
16445: ST_TO_ADDR
// if IsOk ( Gladstone ) then
16446: LD_EXP 21
16450: PPUSH
16451: CALL_OW 302
16455: IFFALSE 16477
// dialog := Say ( Gladstone , D2-Glad-1 ) else
16457: LD_ADDR_VAR 0 1
16461: PUSH
16462: LD_EXP 21
16466: PPUSH
16467: LD_STRING D2-Glad-1
16469: PPUSH
16470: CALL_OW 88
16474: ST_TO_ADDR
16475: GO 16559
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
16477: LD_ADDR_VAR 0 1
16481: PUSH
16482: LD_INT 22
16484: PUSH
16485: LD_INT 1
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: LD_INT 120
16494: PUSH
16495: LD_INT 107
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 21
16504: PUSH
16505: LD_INT 1
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 23
16514: PUSH
16515: LD_INT 1
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: PPUSH
16528: CALL_OW 69
16532: PUSH
16533: LD_EXP 27
16537: PUSH
16538: LD_EXP 26
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: DIFF
16547: PPUSH
16548: LD_STRING D2-Sol1-1
16550: PPUSH
16551: LD_STRING D2-FSol1-1
16553: PPUSH
16554: CALL 20298 0 3
16558: ST_TO_ADDR
// if dialog then
16559: LD_VAR 0 1
16563: IFFALSE 16664
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
16565: LD_EXP 16
16569: PPUSH
16570: CALL_OW 302
16574: PUSH
16575: LD_EXP 13
16579: PUSH
16580: LD_INT 1
16582: EQUAL
16583: AND
16584: IFFALSE 16598
// Say ( Donaldson , D2-Don-1 ) ;
16586: LD_EXP 16
16590: PPUSH
16591: LD_STRING D2-Don-1
16593: PPUSH
16594: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
16598: LD_EXP 15
16602: PPUSH
16603: CALL_OW 302
16607: PUSH
16608: LD_EXP 13
16612: PUSH
16613: LD_INT 2
16615: EQUAL
16616: AND
16617: IFFALSE 16631
// Say ( Brown , D2-Brown-1 ) ;
16619: LD_EXP 15
16623: PPUSH
16624: LD_STRING D2-Brown-1
16626: PPUSH
16627: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
16631: LD_EXP 25
16635: PPUSH
16636: CALL_OW 302
16640: PUSH
16641: LD_EXP 13
16645: PUSH
16646: LD_INT 3
16648: EQUAL
16649: AND
16650: IFFALSE 16664
// Say ( Houten , D2-VanH-1 ) ;
16652: LD_EXP 25
16656: PPUSH
16657: LD_STRING D2-VanH-1
16659: PPUSH
16660: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
16664: LD_INT 3
16666: PPUSH
16667: CALL 13070 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
16671: LD_STRING 07_time
16673: PPUSH
16674: LD_INT 18900
16676: PPUSH
16677: CALL_OW 30
16681: PUSH
16682: LD_INT 3
16684: DIV
16685: PPUSH
16686: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
16690: LD_INT 34
16692: PPUSH
16693: LD_INT 1
16695: PPUSH
16696: CALL_OW 321
16700: PUSH
16701: LD_INT 2
16703: EQUAL
16704: IFFALSE 16713
// SetAchievement ( ACH_HEAVYGUN ) ;
16706: LD_STRING ACH_HEAVYGUN
16708: PPUSH
16709: CALL_OW 543
// PrepareMacmillanSquad ;
16713: CALL 4826 0 0
// wait ( 0 0$1 ) ;
16717: LD_INT 35
16719: PPUSH
16720: CALL_OW 67
// DialogueOn ;
16724: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
16728: LD_EXP 14
16732: PPUSH
16733: CALL_OW 87
// dwait ( 0 0$2 ) ;
16737: LD_INT 70
16739: PPUSH
16740: CALL_OW 68
// DialogueOff ;
16744: CALL_OW 7
// wait ( 0 0$10 ) ;
16748: LD_INT 350
16750: PPUSH
16751: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16755: LD_INT 1
16757: PPUSH
16758: CALL_OW 427
// p := 0 ;
16762: LD_ADDR_VAR 0 2
16766: PUSH
16767: LD_INT 0
16769: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16770: LD_INT 35
16772: PPUSH
16773: CALL_OW 67
// p := Inc ( p ) ;
16777: LD_ADDR_VAR 0 2
16781: PUSH
16782: LD_VAR 0 2
16786: PPUSH
16787: CALL 80765 0 1
16791: ST_TO_ADDR
// if p > 300 then
16792: LD_VAR 0 2
16796: PUSH
16797: LD_INT 300
16799: GREATER
16800: IFFALSE 16804
// exit ;
16802: GO 18027
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
16804: LD_EXP 14
16808: PPUSH
16809: LD_INT 15
16811: PPUSH
16812: CALL_OW 308
16816: PUSH
16817: LD_EXP 14
16821: PPUSH
16822: CALL_OW 310
16826: PPUSH
16827: LD_INT 15
16829: PPUSH
16830: CALL_OW 308
16834: OR
16835: PUSH
16836: LD_EXP 14
16840: PPUSH
16841: LD_EXP 27
16845: PPUSH
16846: CALL_OW 296
16850: PUSH
16851: LD_INT 10
16853: LESS
16854: OR
16855: PUSH
16856: LD_INT 22
16858: PUSH
16859: LD_INT 1
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: PUSH
16866: LD_INT 2
16868: PUSH
16869: LD_INT 120
16871: PUSH
16872: LD_INT 106
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: LD_INT 120
16881: PUSH
16882: LD_INT 107
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 91
16896: PUSH
16897: LD_EXP 14
16901: PUSH
16902: LD_INT 12
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: LIST
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: LIST
16914: PPUSH
16915: CALL_OW 69
16919: OR
16920: IFFALSE 16770
// DialogueOn ;
16922: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
16926: LD_EXP 14
16930: PPUSH
16931: LD_STRING D3-JMM-1
16933: PPUSH
16934: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16938: LD_EXP 16
16942: PPUSH
16943: CALL_OW 302
16947: PUSH
16948: LD_EXP 13
16952: PUSH
16953: LD_INT 1
16955: EQUAL
16956: AND
16957: IFFALSE 16973
// Say ( Donaldson , D3-Don-1 ) else
16959: LD_EXP 16
16963: PPUSH
16964: LD_STRING D3-Don-1
16966: PPUSH
16967: CALL_OW 88
16971: GO 17069
// begin if gammaCommander = 1 then
16973: LD_EXP 13
16977: PUSH
16978: LD_INT 1
16980: EQUAL
16981: IFFALSE 17069
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
16983: LD_INT 22
16985: PUSH
16986: LD_INT 1
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 21
16995: PUSH
16996: LD_INT 1
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 23
17005: PUSH
17006: LD_INT 1
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PUSH
17013: LD_INT 120
17015: PUSH
17016: LD_INT 106
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 26
17025: PUSH
17026: LD_INT 1
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 69
17044: PPUSH
17045: LD_STRING D3-Sol1-1
17047: PPUSH
17048: LD_STRING 
17050: PPUSH
17051: CALL 20298 0 3
17055: IFFALSE 17069
// Say ( JMM , D3-JMM-2 ) ;
17057: LD_EXP 14
17061: PPUSH
17062: LD_STRING D3-JMM-2
17064: PPUSH
17065: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
17069: LD_EXP 15
17073: PPUSH
17074: CALL_OW 302
17078: PUSH
17079: LD_EXP 13
17083: PUSH
17084: LD_INT 2
17086: EQUAL
17087: AND
17088: IFFALSE 17104
// Say ( Brown , D3-Brown-1 ) else
17090: LD_EXP 15
17094: PPUSH
17095: LD_STRING D3-Brown-1
17097: PPUSH
17098: CALL_OW 88
17102: GO 17200
// begin if gammaCommander = 2 then
17104: LD_EXP 13
17108: PUSH
17109: LD_INT 2
17111: EQUAL
17112: IFFALSE 17200
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
17114: LD_INT 22
17116: PUSH
17117: LD_INT 1
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 21
17126: PUSH
17127: LD_INT 1
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 23
17136: PUSH
17137: LD_INT 1
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 120
17146: PUSH
17147: LD_INT 106
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 26
17156: PUSH
17157: LD_INT 1
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: PPUSH
17171: CALL_OW 69
17175: PPUSH
17176: LD_STRING D3-Sol1-1a
17178: PPUSH
17179: LD_STRING 
17181: PPUSH
17182: CALL 20298 0 3
17186: IFFALSE 17200
// Say ( JMM , D3-JMM-2 ) ;
17188: LD_EXP 14
17192: PPUSH
17193: LD_STRING D3-JMM-2
17195: PPUSH
17196: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17200: LD_EXP 25
17204: PPUSH
17205: CALL_OW 302
17209: PUSH
17210: LD_EXP 13
17214: PUSH
17215: LD_INT 3
17217: EQUAL
17218: AND
17219: IFFALSE 17235
// Say ( Houten , D3-VanH-1 ) else
17221: LD_EXP 25
17225: PPUSH
17226: LD_STRING D3-VanH-1
17228: PPUSH
17229: CALL_OW 88
17233: GO 17331
// begin if gammaCommander = 3 then
17235: LD_EXP 13
17239: PUSH
17240: LD_INT 3
17242: EQUAL
17243: IFFALSE 17331
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
17245: LD_INT 22
17247: PUSH
17248: LD_INT 1
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 21
17257: PUSH
17258: LD_INT 1
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: LD_INT 23
17267: PUSH
17268: LD_INT 1
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 120
17277: PUSH
17278: LD_INT 106
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 26
17287: PUSH
17288: LD_INT 1
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: PPUSH
17302: CALL_OW 69
17306: PPUSH
17307: LD_STRING D3-Sol1-1b
17309: PPUSH
17310: LD_STRING 
17312: PPUSH
17313: CALL 20298 0 3
17317: IFFALSE 17331
// Say ( JMM , D3-JMM-2 ) ;
17319: LD_EXP 14
17323: PPUSH
17324: LD_STRING D3-JMM-2
17326: PPUSH
17327: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17331: LD_EXP 27
17335: PPUSH
17336: CALL_OW 302
17340: IFFALSE 17368
// begin Say ( Joan , D3a-Joan-1 ) ;
17342: LD_EXP 27
17346: PPUSH
17347: LD_STRING D3a-Joan-1
17349: PPUSH
17350: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
17354: LD_EXP 14
17358: PPUSH
17359: LD_STRING D3a-JMM-1
17361: PPUSH
17362: CALL_OW 88
// end else
17366: GO 17802
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17368: LD_STRING 06_JoanStatus_1
17370: PPUSH
17371: LD_INT 0
17373: PPUSH
17374: CALL_OW 30
17378: PUSH
17379: LD_INT 1
17381: EQUAL
17382: IFFALSE 17802
// begin Say ( JMM , D3b-JMM-1 ) ;
17384: LD_EXP 14
17388: PPUSH
17389: LD_STRING D3b-JMM-1
17391: PPUSH
17392: CALL_OW 88
// dialog := false ;
17396: LD_ADDR_VAR 0 1
17400: PUSH
17401: LD_INT 0
17403: ST_TO_ADDR
// if gammaCommander = 1 then
17404: LD_EXP 13
17408: PUSH
17409: LD_INT 1
17411: EQUAL
17412: IFFALSE 17523
// if IsOK ( Donaldson ) then
17414: LD_EXP 16
17418: PPUSH
17419: CALL_OW 302
17423: IFFALSE 17445
// dialog := Say ( Donaldson , D3b-Don-1 ) else
17425: LD_ADDR_VAR 0 1
17429: PUSH
17430: LD_EXP 16
17434: PPUSH
17435: LD_STRING D3b-Don-1
17437: PPUSH
17438: CALL_OW 88
17442: ST_TO_ADDR
17443: GO 17523
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17445: LD_ADDR_VAR 0 1
17449: PUSH
17450: LD_INT 22
17452: PUSH
17453: LD_INT 1
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 21
17462: PUSH
17463: LD_INT 1
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 23
17472: PUSH
17473: LD_INT 1
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: LD_INT 120
17482: PUSH
17483: LD_INT 106
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 26
17492: PUSH
17493: LD_INT 1
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: PPUSH
17507: CALL_OW 69
17511: PPUSH
17512: LD_STRING D3b-Sol1-1
17514: PPUSH
17515: LD_STRING 
17517: PPUSH
17518: CALL 20298 0 3
17522: ST_TO_ADDR
// if gammaCommander = 2 then
17523: LD_EXP 13
17527: PUSH
17528: LD_INT 2
17530: EQUAL
17531: IFFALSE 17642
// if IsOk ( Brown ) then
17533: LD_EXP 15
17537: PPUSH
17538: CALL_OW 302
17542: IFFALSE 17564
// dialog := Say ( Brown , D3b-Brown-1 ) else
17544: LD_ADDR_VAR 0 1
17548: PUSH
17549: LD_EXP 15
17553: PPUSH
17554: LD_STRING D3b-Brown-1
17556: PPUSH
17557: CALL_OW 88
17561: ST_TO_ADDR
17562: GO 17642
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17564: LD_ADDR_VAR 0 1
17568: PUSH
17569: LD_INT 22
17571: PUSH
17572: LD_INT 1
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 21
17581: PUSH
17582: LD_INT 1
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: PUSH
17589: LD_INT 23
17591: PUSH
17592: LD_INT 1
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: PUSH
17599: LD_INT 120
17601: PUSH
17602: LD_INT 106
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 26
17611: PUSH
17612: LD_INT 1
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: PPUSH
17626: CALL_OW 69
17630: PPUSH
17631: LD_STRING D3b-Sol1-1
17633: PPUSH
17634: LD_STRING 
17636: PPUSH
17637: CALL 20298 0 3
17641: ST_TO_ADDR
// if gammaCommander = 3 then
17642: LD_EXP 13
17646: PUSH
17647: LD_INT 3
17649: EQUAL
17650: IFFALSE 17761
// if IsOk ( Houten ) then
17652: LD_EXP 25
17656: PPUSH
17657: CALL_OW 302
17661: IFFALSE 17683
// dialog := Say ( Houten , D3b-VanH-1 ) else
17663: LD_ADDR_VAR 0 1
17667: PUSH
17668: LD_EXP 25
17672: PPUSH
17673: LD_STRING D3b-VanH-1
17675: PPUSH
17676: CALL_OW 88
17680: ST_TO_ADDR
17681: GO 17761
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17683: LD_ADDR_VAR 0 1
17687: PUSH
17688: LD_INT 22
17690: PUSH
17691: LD_INT 1
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 21
17700: PUSH
17701: LD_INT 1
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: LD_INT 23
17710: PUSH
17711: LD_INT 1
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 120
17720: PUSH
17721: LD_INT 106
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 26
17730: PUSH
17731: LD_INT 1
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: PPUSH
17745: CALL_OW 69
17749: PPUSH
17750: LD_STRING D3b-Sol1-1
17752: PPUSH
17753: LD_STRING 
17755: PPUSH
17756: CALL 20298 0 3
17760: ST_TO_ADDR
// if dialog then
17761: LD_VAR 0 1
17765: IFFALSE 17802
// begin Say ( JMM , D3b-JMM-2 ) ;
17767: LD_EXP 14
17771: PPUSH
17772: LD_STRING D3b-JMM-2
17774: PPUSH
17775: CALL_OW 88
// if IsOK ( Lisa ) then
17779: LD_EXP 19
17783: PPUSH
17784: CALL_OW 302
17788: IFFALSE 17802
// Say ( Lisa , D3b-Lisa-2 ) ;
17790: LD_EXP 19
17794: PPUSH
17795: LD_STRING D3b-Lisa-2
17797: PPUSH
17798: CALL_OW 88
// end ; end ; end ; if not seenComputer then
17802: LD_EXP 7
17806: NOT
17807: IFFALSE 17815
// begin DialogueOff ;
17809: CALL_OW 7
// exit ;
17813: GO 18027
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
17815: LD_INT 22
17817: PUSH
17818: LD_INT 1
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 21
17827: PUSH
17828: LD_INT 1
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 23
17837: PUSH
17838: LD_INT 1
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 2
17847: PUSH
17848: LD_INT 120
17850: PUSH
17851: LD_INT 106
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 120
17860: PUSH
17861: LD_INT 107
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 26
17875: PUSH
17876: LD_INT 1
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: PPUSH
17890: CALL_OW 69
17894: PPUSH
17895: LD_STRING DCa-Sol1-1
17897: PPUSH
17898: LD_STRING 
17900: PPUSH
17901: CALL 20298 0 3
17905: IFFALSE 17919
// Say ( JMM , DCb-JMM-1 ) ;
17907: LD_EXP 14
17911: PPUSH
17912: LD_STRING DCb-JMM-1
17914: PPUSH
17915: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
17919: LD_INT 22
17921: PUSH
17922: LD_INT 1
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 21
17931: PUSH
17932: LD_INT 1
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 23
17941: PUSH
17942: LD_INT 1
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 2
17951: PUSH
17952: LD_INT 120
17954: PUSH
17955: LD_INT 106
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PUSH
17962: LD_INT 120
17964: PUSH
17965: LD_INT 107
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 26
17979: PUSH
17980: LD_INT 1
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: PPUSH
17994: CALL_OW 69
17998: PPUSH
17999: LD_STRING DCb-Sol1-1
18001: PPUSH
18002: LD_STRING 
18004: PPUSH
18005: CALL 20298 0 3
18009: IFFALSE 18023
// Say ( JMM , DCb-JMM-2 ) ;
18011: LD_EXP 14
18015: PPUSH
18016: LD_STRING DCb-JMM-2
18018: PPUSH
18019: CALL_OW 88
// DialogueOff ;
18023: CALL_OW 7
// end ;
18027: PPOPN 2
18029: END
// export function DialogSeenComputer ( un ) ; begin
18030: LD_INT 0
18032: PPUSH
// if jmmArrival then
18033: LD_EXP 8
18037: IFFALSE 18041
// exit ;
18039: GO 18107
// CenterOnUnits ( un ) ;
18041: LD_VAR 0 1
18045: PPUSH
18046: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
18050: LD_INT 22
18052: PUSH
18053: LD_INT 1
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 2
18062: PUSH
18063: LD_INT 120
18065: PUSH
18066: LD_INT 106
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 120
18075: PUSH
18076: LD_INT 107
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: LIST
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PPUSH
18092: CALL_OW 69
18096: PPUSH
18097: LD_STRING DC-Sol1-1
18099: PPUSH
18100: LD_STRING DC-FSol1-1
18102: PPUSH
18103: CALL 20298 0 3
// end ;
18107: LD_VAR 0 2
18111: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
18112: LD_EXP 8
18116: PUSH
18117: LD_OWVAR 1
18121: PUSH
18122: LD_INT 48300
18124: GREATEREQUAL
18125: AND
18126: PUSH
18127: LD_EXP 14
18131: PPUSH
18132: CALL_OW 302
18136: AND
18137: IFFALSE 18623
18139: GO 18141
18141: DISABLE
// begin wait ( 2 2$00 ) ;
18142: LD_INT 4200
18144: PPUSH
18145: CALL_OW 67
// DialogueOn ;
18149: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
18153: LD_EXP 30
18157: PPUSH
18158: LD_STRING D4-Pow-1
18160: PPUSH
18161: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
18165: LD_EXP 14
18169: PPUSH
18170: LD_STRING D4-JMM-1
18172: PPUSH
18173: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
18177: LD_EXP 30
18181: PPUSH
18182: LD_STRING D4-Pow-2
18184: PPUSH
18185: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
18189: LD_EXP 14
18193: PPUSH
18194: LD_STRING D4-JMM-2
18196: PPUSH
18197: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18201: LD_EXP 30
18205: PPUSH
18206: LD_STRING D4-Pow-3
18208: PPUSH
18209: CALL_OW 94
// DialogueOff ;
18213: CALL_OW 7
// wait ( 1 1$00 ) ;
18217: LD_INT 2100
18219: PPUSH
18220: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
18224: LD_INT 1
18226: PPUSH
18227: CALL_OW 427
// wait ( 7 7$30 ) ;
18231: LD_INT 15750
18233: PPUSH
18234: CALL_OW 67
// DialogueOn ;
18238: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18242: LD_EXP 30
18246: PPUSH
18247: LD_STRING D4a-Pow-1
18249: PPUSH
18250: CALL_OW 94
// DialogueOff ;
18254: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
18258: LD_INT 1
18260: PPUSH
18261: CALL_OW 427
// SikorskiCounter ;
18265: CALL 20082 0 0
// PrepareSikorsky ;
18269: CALL 6326 0 0
// CenterNowOnUnits ( Sikorski ) ;
18273: LD_EXP 28
18277: PPUSH
18278: CALL_OW 87
// DialogueOn ;
18282: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18286: LD_EXP 28
18290: PPUSH
18291: LD_STRING D5-Sik-1
18293: PPUSH
18294: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 or not IsOk ( ruDep ) or GetSide ( ruDep ) = 1 then
18298: LD_INT 11
18300: PPUSH
18301: LD_INT 22
18303: PUSH
18304: LD_INT 1
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PPUSH
18311: CALL_OW 70
18315: PUSH
18316: LD_INT 1
18318: GREATER
18319: PUSH
18320: LD_INT 28
18322: PPUSH
18323: CALL_OW 302
18327: NOT
18328: OR
18329: PUSH
18330: LD_INT 28
18332: PPUSH
18333: CALL_OW 255
18337: PUSH
18338: LD_INT 1
18340: EQUAL
18341: OR
18342: IFFALSE 18394
// begin Say ( JMM , D5-JMM-1 ) ;
18344: LD_EXP 14
18348: PPUSH
18349: LD_STRING D5-JMM-1
18351: PPUSH
18352: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
18356: LD_EXP 28
18360: PPUSH
18361: LD_STRING D7a-Sik-1
18363: PPUSH
18364: CALL_OW 88
// DialogueOff ;
18368: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18372: LD_STRING M2
18374: PPUSH
18375: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18379: LD_INT 1
18381: PPUSH
18382: CALL_OW 427
// SikorskiAttack ;
18386: CALL 7949 0 0
// exit ;
18390: GO 18623
// end else
18392: GO 18439
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
18394: LD_INT 15
18396: PPUSH
18397: LD_INT 81
18399: PUSH
18400: LD_INT 1
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PPUSH
18407: CALL_OW 70
18411: IFFALSE 18427
// Say ( JMM , D5-JMM-1b ) else
18413: LD_EXP 14
18417: PPUSH
18418: LD_STRING D5-JMM-1b
18420: PPUSH
18421: CALL_OW 88
18425: GO 18439
// Say ( JMM , D5-JMM-1a ) ;
18427: LD_EXP 14
18431: PPUSH
18432: LD_STRING D5-JMM-1a
18434: PPUSH
18435: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18439: LD_EXP 28
18443: PPUSH
18444: LD_STRING D5-Sik-2
18446: PPUSH
18447: CALL_OW 88
// case Query ( QSikorski ) of 1 :
18451: LD_STRING QSikorski
18453: PPUSH
18454: CALL_OW 97
18458: PUSH
18459: LD_INT 1
18461: DOUBLE
18462: EQUAL
18463: IFTRUE 18467
18465: GO 18490
18467: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18468: LD_EXP 28
18472: PPUSH
18473: LD_STRING D5a-Sik-1
18475: PPUSH
18476: CALL_OW 88
// sikorskiWait := 1 1$00 ;
18480: LD_ADDR_EXP 4
18484: PUSH
18485: LD_INT 2100
18487: ST_TO_ADDR
// end ; 2 :
18488: GO 18577
18490: LD_INT 2
18492: DOUBLE
18493: EQUAL
18494: IFTRUE 18498
18496: GO 18521
18498: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18499: LD_EXP 28
18503: PPUSH
18504: LD_STRING D5b-Sik-1
18506: PPUSH
18507: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18511: LD_ADDR_EXP 4
18515: PUSH
18516: LD_INT 10500
18518: ST_TO_ADDR
// end ; 3 :
18519: GO 18577
18521: LD_INT 3
18523: DOUBLE
18524: EQUAL
18525: IFTRUE 18529
18527: GO 18576
18529: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18530: LD_EXP 28
18534: PPUSH
18535: LD_STRING D5c-Sik-1
18537: PPUSH
18538: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18542: LD_EXP 14
18546: PPUSH
18547: LD_STRING D5c-JMM-1
18549: PPUSH
18550: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18554: LD_EXP 28
18558: PPUSH
18559: LD_STRING D5c-Sik-2
18561: PPUSH
18562: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18566: LD_ADDR_EXP 4
18570: PUSH
18571: LD_INT 10500
18573: ST_TO_ADDR
// end ; end ;
18574: GO 18577
18576: POP
// DialogueOff ;
18577: CALL_OW 7
// SikorskiWaitCounter ;
18581: CALL 20145 0 0
// DialogueOn ;
18585: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
18589: LD_EXP 28
18593: PPUSH
18594: LD_STRING D6-Sik-1
18596: PPUSH
18597: CALL_OW 88
// DialogueOff ;
18601: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18605: LD_STRING M2
18607: PPUSH
18608: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18612: LD_INT 1
18614: PPUSH
18615: CALL_OW 427
// SikorskiAttack ;
18619: CALL 7949 0 0
// end ;
18623: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
18624: LD_INT 11
18626: PPUSH
18627: LD_INT 22
18629: PUSH
18630: LD_INT 4
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PPUSH
18637: CALL_OW 70
18641: PUSH
18642: LD_INT 2
18644: GREATER
18645: IFFALSE 18838
18647: GO 18649
18649: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18650: LD_EXP 28
18654: PPUSH
18655: LD_STRING D7-Sik-1
18657: PPUSH
18658: CALL_OW 88
// wait ( 0 0$10 ) ;
18662: LD_INT 350
18664: PPUSH
18665: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
18669: LD_EXP 14
18673: PPUSH
18674: LD_INT 11
18676: PPUSH
18677: CALL_OW 308
18681: PUSH
18682: LD_EXP 14
18686: PPUSH
18687: CALL_OW 310
18691: PPUSH
18692: LD_INT 11
18694: PPUSH
18695: CALL_OW 308
18699: OR
18700: IFFALSE 18724
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18702: LD_EXP 28
18706: PPUSH
18707: LD_STRING D7a-Sik-1
18709: PPUSH
18710: CALL_OW 88
// sikorskiStatus := 1 ;
18714: LD_ADDR_EXP 9
18718: PUSH
18719: LD_INT 1
18721: ST_TO_ADDR
// end else
18722: GO 18744
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18724: LD_EXP 28
18728: PPUSH
18729: LD_STRING D7b-Sik-1
18731: PPUSH
18732: CALL_OW 88
// sikorskiStatus := 0 ;
18736: LD_ADDR_EXP 9
18740: PUSH
18741: LD_INT 0
18743: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
18744: LD_INT 1575
18746: PPUSH
18747: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
18751: LD_EXP 14
18755: PPUSH
18756: LD_INT 11
18758: PPUSH
18759: CALL_OW 308
18763: PUSH
18764: LD_EXP 14
18768: PPUSH
18769: CALL_OW 310
18773: PPUSH
18774: LD_INT 11
18776: PPUSH
18777: CALL_OW 308
18781: OR
18782: PUSH
18783: LD_EXP 14
18787: PPUSH
18788: CALL_OW 302
18792: NOT
18793: OR
18794: IFFALSE 18818
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18796: LD_EXP 28
18800: PPUSH
18801: LD_STRING D7a-Sik-1
18803: PPUSH
18804: CALL_OW 88
// sikorskiStatus := 1 ;
18808: LD_ADDR_EXP 9
18812: PUSH
18813: LD_INT 1
18815: ST_TO_ADDR
// end else
18816: GO 18838
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18818: LD_EXP 28
18822: PPUSH
18823: LD_STRING D7b-Sik-1
18825: PPUSH
18826: CALL_OW 88
// sikorskiStatus := 0 ;
18830: LD_ADDR_EXP 9
18834: PUSH
18835: LD_INT 0
18837: ST_TO_ADDR
// end ; end ;
18838: END
// export function SikorskiKilledInAction ; begin
18839: LD_INT 0
18841: PPUSH
// wait ( 0 0$2 ) ;
18842: LD_INT 70
18844: PPUSH
18845: CALL_OW 67
// DialogueOn ;
18849: CALL_OW 6
// dwait ( 0 0$1 ) ;
18853: LD_INT 35
18855: PPUSH
18856: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
18860: LD_EXP 30
18864: PPUSH
18865: LD_STRING D8b-Pow-1
18867: PPUSH
18868: CALL_OW 94
// YouLost ( Dismissed ) ;
18872: LD_STRING Dismissed
18874: PPUSH
18875: CALL_OW 104
// DialogueOff ;
18879: CALL_OW 7
// end ;
18883: LD_VAR 0 1
18887: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
18888: LD_EXP 8
18892: PUSH
18893: LD_INT 28
18895: PPUSH
18896: CALL_OW 301
18900: AND
18901: PUSH
18902: LD_EXP 32
18906: PPUSH
18907: CALL_OW 301
18911: AND
18912: PUSH
18913: LD_INT 22
18915: PUSH
18916: LD_INT 3
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 50
18925: PUSH
18926: EMPTY
18927: LIST
18928: PUSH
18929: LD_INT 30
18931: PUSH
18932: LD_INT 5
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: LIST
18943: PPUSH
18944: CALL_OW 69
18948: PUSH
18949: LD_INT 0
18951: EQUAL
18952: AND
18953: IFFALSE 20079
18955: GO 18957
18957: DISABLE
18958: LD_INT 0
18960: PPUSH
18961: PPUSH
18962: PPUSH
// begin Video ( true ) ;
18963: LD_INT 1
18965: PPUSH
18966: CALL 79376 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
18970: LD_INT 104
18972: PPUSH
18973: LD_INT 108
18975: PPUSH
18976: LD_INT 1
18978: PPUSH
18979: LD_INT 36
18981: NEG
18982: PPUSH
18983: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
18987: LD_INT 104
18989: PPUSH
18990: LD_INT 108
18992: PPUSH
18993: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
18997: LD_ADDR_VAR 0 2
19001: PUSH
19002: LD_INT 22
19004: PUSH
19005: LD_INT 1
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 21
19014: PUSH
19015: LD_INT 1
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 3
19024: PUSH
19025: LD_INT 24
19027: PUSH
19028: LD_INT 249
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: LIST
19043: PPUSH
19044: CALL_OW 69
19048: ST_TO_ADDR
// if tmp then
19049: LD_VAR 0 2
19053: IFFALSE 19084
// for i in tmp do
19055: LD_ADDR_VAR 0 1
19059: PUSH
19060: LD_VAR 0 2
19064: PUSH
19065: FOR_IN
19066: IFFALSE 19082
// SetLives ( i , 249 ) ;
19068: LD_VAR 0 1
19072: PPUSH
19073: LD_INT 249
19075: PPUSH
19076: CALL_OW 234
19080: GO 19065
19082: POP
19083: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
19084: LD_ADDR_VAR 0 1
19088: PUSH
19089: LD_INT 22
19091: PUSH
19092: LD_INT 3
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 21
19101: PUSH
19102: LD_INT 1
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PPUSH
19113: CALL_OW 69
19117: PUSH
19118: FOR_IN
19119: IFFALSE 19162
// begin ComExit ( i ) ;
19121: LD_VAR 0 1
19125: PPUSH
19126: CALL 79802 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
19130: LD_VAR 0 1
19134: PPUSH
19135: LD_INT 131
19137: PPUSH
19138: LD_INT 127
19140: PPUSH
19141: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
19145: LD_VAR 0 1
19149: PPUSH
19150: LD_INT 141
19152: PPUSH
19153: LD_INT 147
19155: PPUSH
19156: CALL_OW 171
// end ;
19160: GO 19118
19162: POP
19163: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
19164: LD_INT 81
19166: PUSH
19167: LD_INT 3
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 3
19176: PUSH
19177: LD_INT 21
19179: PUSH
19180: LD_INT 3
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PPUSH
19195: CALL_OW 69
19199: PPUSH
19200: LD_INT 131
19202: PPUSH
19203: LD_INT 127
19205: PPUSH
19206: CALL_OW 174
// wait ( 0 0$08 ) ;
19210: LD_INT 280
19212: PPUSH
19213: CALL_OW 67
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 7 then
19217: LD_INT 22
19219: PUSH
19220: LD_INT 1
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 21
19229: PUSH
19230: LD_INT 1
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 23
19239: PUSH
19240: LD_INT 1
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 50
19249: PUSH
19250: EMPTY
19251: LIST
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: PPUSH
19259: CALL_OW 69
19263: PPUSH
19264: CALL 43795 0 1
19268: PUSH
19269: LD_INT 7
19271: LESS
19272: IFFALSE 19283
// begin YouLost ( LostVictory ) ;
19274: LD_STRING LostVictory
19276: PPUSH
19277: CALL_OW 104
// exit ;
19281: GO 20079
// end ; DialogueOn ;
19283: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
19287: LD_EXP 9
19291: PUSH
19292: LD_INT 1
19294: EQUAL
19295: PUSH
19296: LD_EXP 28
19300: PPUSH
19301: CALL_OW 302
19305: AND
19306: IFFALSE 19320
// Say ( Sikorski , D9-Sik-1 ) ;
19308: LD_EXP 28
19312: PPUSH
19313: LD_STRING D9-Sik-1
19315: PPUSH
19316: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
19320: LD_INT 22
19322: PUSH
19323: LD_INT 4
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PPUSH
19330: CALL_OW 69
19334: PUSH
19335: LD_INT 0
19337: EQUAL
19338: PUSH
19339: LD_EXP 3
19343: AND
19344: IFFALSE 19353
// SetAchievement ( ACH_BLITZKRIEG ) ;
19346: LD_STRING ACH_BLITZKRIEG
19348: PPUSH
19349: CALL_OW 543
// if tick <= 45 45$10 then
19353: LD_OWVAR 1
19357: PUSH
19358: LD_INT 94850
19360: LESSEQUAL
19361: IFFALSE 19377
// begin wait ( 3 ) ;
19363: LD_INT 3
19365: PPUSH
19366: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
19370: LD_STRING ACH_ASPEED_8
19372: PPUSH
19373: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
19377: LD_STRING med1
19379: PPUSH
19380: LD_INT 1
19382: PPUSH
19383: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
19387: LD_STRING med2
19389: PPUSH
19390: LD_INT 1
19392: PPUSH
19393: CALL_OW 101
// if sikorskiStatus = 1 then
19397: LD_EXP 9
19401: PUSH
19402: LD_INT 1
19404: EQUAL
19405: IFFALSE 19419
// AddMedal ( perfect , 1 ) else
19407: LD_STRING perfect
19409: PPUSH
19410: LD_INT 1
19412: PPUSH
19413: CALL_OW 101
19417: GO 19430
// AddMedal ( perfect , - 1 ) ;
19419: LD_STRING perfect
19421: PPUSH
19422: LD_INT 1
19424: NEG
19425: PPUSH
19426: CALL_OW 101
// if Difficulty >= 3 then
19430: LD_OWVAR 67
19434: PUSH
19435: LD_INT 3
19437: GREATEREQUAL
19438: IFFALSE 19450
// SetAchievementEX ( ACH_AMER , 8 ) ;
19440: LD_STRING ACH_AMER
19442: PPUSH
19443: LD_INT 8
19445: PPUSH
19446: CALL_OW 564
// GiveMedals ( Main ) ;
19450: LD_STRING Main
19452: PPUSH
19453: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19457: LD_INT 22
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 23
19469: PUSH
19470: LD_INT 1
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 21
19479: PUSH
19480: LD_INT 1
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: LIST
19491: PPUSH
19492: CALL_OW 69
19496: PPUSH
19497: CALL_OW 43
// prefix := 08_ ;
19501: LD_ADDR_VAR 0 3
19505: PUSH
19506: LD_STRING 08_
19508: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
19509: LD_EXP 14
19513: PPUSH
19514: LD_VAR 0 3
19518: PUSH
19519: LD_STRING JMM
19521: STR
19522: PPUSH
19523: CALL_OW 38
// if IsLive ( Brown ) then
19527: LD_EXP 15
19531: PPUSH
19532: CALL_OW 300
19536: IFFALSE 19556
// SaveCharacters ( Brown , prefix & Brown ) ;
19538: LD_EXP 15
19542: PPUSH
19543: LD_VAR 0 3
19547: PUSH
19548: LD_STRING Brown
19550: STR
19551: PPUSH
19552: CALL_OW 38
// if IsLive ( Donaldson ) then
19556: LD_EXP 16
19560: PPUSH
19561: CALL_OW 300
19565: IFFALSE 19585
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
19567: LD_EXP 16
19571: PPUSH
19572: LD_VAR 0 3
19576: PUSH
19577: LD_STRING Donaldson
19579: STR
19580: PPUSH
19581: CALL_OW 38
// if IsLive ( Bobby ) then
19585: LD_EXP 17
19589: PPUSH
19590: CALL_OW 300
19594: IFFALSE 19614
// SaveCharacters ( Bobby , prefix & Bobby ) ;
19596: LD_EXP 17
19600: PPUSH
19601: LD_VAR 0 3
19605: PUSH
19606: LD_STRING Bobby
19608: STR
19609: PPUSH
19610: CALL_OW 38
// if IsLive ( Cyrus ) then
19614: LD_EXP 18
19618: PPUSH
19619: CALL_OW 300
19623: IFFALSE 19643
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
19625: LD_EXP 18
19629: PPUSH
19630: LD_VAR 0 3
19634: PUSH
19635: LD_STRING Cyrus
19637: STR
19638: PPUSH
19639: CALL_OW 38
// if IsLive ( Lisa ) then
19643: LD_EXP 19
19647: PPUSH
19648: CALL_OW 300
19652: IFFALSE 19672
// SaveCharacters ( Lisa , prefix & Lisa ) ;
19654: LD_EXP 19
19658: PPUSH
19659: LD_VAR 0 3
19663: PUSH
19664: LD_STRING Lisa
19666: STR
19667: PPUSH
19668: CALL_OW 38
// if IsLive ( Frank ) then
19672: LD_EXP 20
19676: PPUSH
19677: CALL_OW 300
19681: IFFALSE 19701
// SaveCharacters ( Frank , prefix & Frank ) ;
19683: LD_EXP 20
19687: PPUSH
19688: LD_VAR 0 3
19692: PUSH
19693: LD_STRING Frank
19695: STR
19696: PPUSH
19697: CALL_OW 38
// if IsLive ( Gladstone ) then
19701: LD_EXP 21
19705: PPUSH
19706: CALL_OW 300
19710: IFFALSE 19730
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
19712: LD_EXP 21
19716: PPUSH
19717: LD_VAR 0 3
19721: PUSH
19722: LD_STRING Gladstone
19724: STR
19725: PPUSH
19726: CALL_OW 38
// if IsLive ( Kikuchi ) then
19730: LD_EXP 22
19734: PPUSH
19735: CALL_OW 300
19739: IFFALSE 19759
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
19741: LD_EXP 22
19745: PPUSH
19746: LD_VAR 0 3
19750: PUSH
19751: LD_STRING Kikuchi
19753: STR
19754: PPUSH
19755: CALL_OW 38
// if IsLive ( Denis ) then
19759: LD_EXP 26
19763: PPUSH
19764: CALL_OW 300
19768: IFFALSE 19788
// SaveCharacters ( Denis , prefix & Denis ) ;
19770: LD_EXP 26
19774: PPUSH
19775: LD_VAR 0 3
19779: PUSH
19780: LD_STRING Denis
19782: STR
19783: PPUSH
19784: CALL_OW 38
// if IsLive ( Joan ) then
19788: LD_EXP 27
19792: PPUSH
19793: CALL_OW 300
19797: IFFALSE 19819
// SaveCharacters ( Joan , prefix & Joan ) else
19799: LD_EXP 27
19803: PPUSH
19804: LD_VAR 0 3
19808: PUSH
19809: LD_STRING Joan
19811: STR
19812: PPUSH
19813: CALL_OW 38
19817: GO 19826
// DeleteCharacters ( Joan ) ;
19819: LD_STRING Joan
19821: PPUSH
19822: CALL_OW 40
// if IsLive ( Khatam ) then
19826: LD_EXP 23
19830: PPUSH
19831: CALL_OW 300
19835: IFFALSE 19855
// SaveCharacters ( Khatam , prefix & Khatam ) ;
19837: LD_EXP 23
19841: PPUSH
19842: LD_VAR 0 3
19846: PUSH
19847: LD_STRING Khatam
19849: STR
19850: PPUSH
19851: CALL_OW 38
// if IsLive ( Houten ) then
19855: LD_EXP 25
19859: PPUSH
19860: CALL_OW 300
19864: IFFALSE 19891
// begin ToLua ( enableBioCharacter(BIO_HOUT) ) ;
19866: LD_STRING enableBioCharacter(BIO_HOUT)
19868: PPUSH
19869: CALL_OW 559
// SaveCharacters ( Houten , prefix & Houten ) ;
19873: LD_EXP 25
19877: PPUSH
19878: LD_VAR 0 3
19882: PUSH
19883: LD_STRING Houten
19885: STR
19886: PPUSH
19887: CALL_OW 38
// end ; if IsLive ( Mike ) then
19891: LD_EXP 24
19895: PPUSH
19896: CALL_OW 300
19900: IFFALSE 19920
// SaveCharacters ( Mike , prefix & Mike ) ;
19902: LD_EXP 24
19906: PPUSH
19907: LD_VAR 0 3
19911: PUSH
19912: LD_STRING Mike
19914: STR
19915: PPUSH
19916: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
19920: LD_INT 22
19922: PUSH
19923: LD_INT 1
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 21
19932: PUSH
19933: LD_INT 1
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 23
19942: PUSH
19943: LD_INT 1
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: LIST
19954: PPUSH
19955: CALL_OW 69
19959: PUSH
19960: LD_EXP 14
19964: PUSH
19965: LD_EXP 15
19969: PUSH
19970: LD_EXP 16
19974: PUSH
19975: LD_EXP 17
19979: PUSH
19980: LD_EXP 18
19984: PUSH
19985: LD_EXP 19
19989: PUSH
19990: LD_EXP 20
19994: PUSH
19995: LD_EXP 21
19999: PUSH
20000: LD_EXP 22
20004: PUSH
20005: LD_EXP 26
20009: PUSH
20010: LD_EXP 27
20014: PUSH
20015: LD_EXP 25
20019: PUSH
20020: LD_EXP 23
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: DIFF
20040: PPUSH
20041: LD_STRING 08_other_survivors
20043: PPUSH
20044: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
20048: LD_INT 15
20050: PPUSH
20051: CALL 7423 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
20055: LD_EXP 10
20059: NOT
20060: PPUSH
20061: LD_STRING 08_SikorskiStatus
20063: PPUSH
20064: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_SIK) ) ;
20068: LD_STRING enableBioCharacter(BIO_SIK)
20070: PPUSH
20071: CALL_OW 559
// YouWin ;
20075: CALL_OW 103
// end ; end_of_file
20079: PPOPN 3
20081: END
// export function SikorskiCounter ; begin
20082: LD_INT 0
20084: PPUSH
// repeat wait ( 0 0$1 ) ;
20085: LD_INT 35
20087: PPUSH
20088: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
20092: LD_ADDR_OWVAR 47
20096: PUSH
20097: LD_STRING #Am08-2
20099: PUSH
20100: LD_EXP 3
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
20109: LD_ADDR_EXP 3
20113: PUSH
20114: LD_EXP 3
20118: PUSH
20119: LD_INT 35
20121: MINUS
20122: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
20123: LD_EXP 3
20127: PUSH
20128: LD_INT 0
20130: EQUAL
20131: IFFALSE 20085
// display_strings := [ ] ;
20133: LD_ADDR_OWVAR 47
20137: PUSH
20138: EMPTY
20139: ST_TO_ADDR
// end ;
20140: LD_VAR 0 1
20144: RET
// export function SikorskiWaitCounter ; begin
20145: LD_INT 0
20147: PPUSH
// repeat wait ( 0 0$1 ) ;
20148: LD_INT 35
20150: PPUSH
20151: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
20155: LD_ADDR_OWVAR 47
20159: PUSH
20160: LD_STRING #Am08-1
20162: PUSH
20163: LD_EXP 4
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
20172: LD_ADDR_EXP 4
20176: PUSH
20177: LD_EXP 4
20181: PUSH
20182: LD_INT 35
20184: MINUS
20185: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
20186: LD_EXP 4
20190: PUSH
20191: LD_INT 0
20193: EQUAL
20194: IFFALSE 20148
// display_strings := [ ] ;
20196: LD_ADDR_OWVAR 47
20200: PUSH
20201: EMPTY
20202: ST_TO_ADDR
// end ; end_of_file
20203: LD_VAR 0 1
20207: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
20208: LD_EXP 3
20212: IFFALSE 20252
20214: GO 20216
20216: DISABLE
// begin enable ;
20217: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
20218: LD_INT 14
20220: PPUSH
20221: CALL_OW 435
20225: PUSH
20226: LD_INT 10
20228: LESS
20229: IFFALSE 20252
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
20231: LD_INT 1
20233: PPUSH
20234: LD_INT 5
20236: PPUSH
20237: CALL_OW 12
20241: PPUSH
20242: LD_INT 14
20244: PPUSH
20245: LD_INT 1
20247: PPUSH
20248: CALL_OW 55
// end ;
20252: END
// every 0 0$55 trigger sikorskiArriveCounter do
20253: LD_EXP 3
20257: IFFALSE 20297
20259: GO 20261
20261: DISABLE
// begin enable ;
20262: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
20263: LD_INT 13
20265: PPUSH
20266: CALL_OW 435
20270: PUSH
20271: LD_INT 10
20273: LESS
20274: IFFALSE 20297
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
20276: LD_INT 1
20278: PPUSH
20279: LD_INT 5
20281: PPUSH
20282: CALL_OW 12
20286: PPUSH
20287: LD_INT 13
20289: PPUSH
20290: LD_INT 1
20292: PPUSH
20293: CALL_OW 55
// end ; end_of_file
20297: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
20298: LD_INT 0
20300: PPUSH
20301: PPUSH
// if not units then
20302: LD_VAR 0 1
20306: NOT
20307: IFFALSE 20311
// exit ;
20309: GO 20436
// result := false ;
20311: LD_ADDR_VAR 0 4
20315: PUSH
20316: LD_INT 0
20318: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
20319: LD_ADDR_VAR 0 5
20323: PUSH
20324: LD_VAR 0 1
20328: PPUSH
20329: LD_INT 26
20331: PUSH
20332: LD_INT 1
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PPUSH
20339: CALL_OW 72
20343: ST_TO_ADDR
// if tmp then
20344: LD_VAR 0 5
20348: IFFALSE 20374
// result := Say ( tmp [ 1 ] , menDialog ) ;
20350: LD_ADDR_VAR 0 4
20354: PUSH
20355: LD_VAR 0 5
20359: PUSH
20360: LD_INT 1
20362: ARRAY
20363: PPUSH
20364: LD_VAR 0 2
20368: PPUSH
20369: CALL_OW 88
20373: ST_TO_ADDR
// if not result then
20374: LD_VAR 0 4
20378: NOT
20379: IFFALSE 20436
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
20381: LD_ADDR_VAR 0 5
20385: PUSH
20386: LD_VAR 0 1
20390: PPUSH
20391: LD_INT 26
20393: PUSH
20394: LD_INT 2
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PPUSH
20401: CALL_OW 72
20405: ST_TO_ADDR
// if tmp then
20406: LD_VAR 0 5
20410: IFFALSE 20436
// result := Say ( tmp [ 1 ] , womenDialog ) ;
20412: LD_ADDR_VAR 0 4
20416: PUSH
20417: LD_VAR 0 5
20421: PUSH
20422: LD_INT 1
20424: ARRAY
20425: PPUSH
20426: LD_VAR 0 3
20430: PPUSH
20431: CALL_OW 88
20435: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
20436: LD_VAR 0 4
20440: RET
// export globalGameSaveCounter ; every 0 0$1 do
20441: GO 20443
20443: DISABLE
// begin enable ;
20444: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20445: LD_STRING updateTimer(
20447: PUSH
20448: LD_OWVAR 1
20452: STR
20453: PUSH
20454: LD_STRING );
20456: STR
20457: PPUSH
20458: CALL_OW 559
// end ;
20462: END
// every 0 0$1 do
20463: GO 20465
20465: DISABLE
// begin globalGameSaveCounter := 0 ;
20466: LD_ADDR_EXP 37
20470: PUSH
20471: LD_INT 0
20473: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20474: LD_STRING setGameSaveCounter(0)
20476: PPUSH
20477: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20481: LD_STRING initStreamRollete();
20483: PPUSH
20484: CALL_OW 559
// InitStreamMode ;
20488: CALL 21831 0 0
// DefineStreamItems ( false ) ;
20492: LD_INT 0
20494: PPUSH
20495: CALL 22295 0 1
// end ;
20499: END
// export function SOS_MapStart ( ) ; begin
20500: LD_INT 0
20502: PPUSH
// if streamModeActive then
20503: LD_EXP 38
20507: IFFALSE 20516
// DefineStreamItems ( true ) ;
20509: LD_INT 1
20511: PPUSH
20512: CALL 22295 0 1
// UpdateLuaVariables ( ) ;
20516: CALL 20533 0 0
// UpdateFactoryWaypoints ( ) ;
20520: CALL 35297 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20524: CALL 35549 0 0
// end ;
20528: LD_VAR 0 1
20532: RET
// function UpdateLuaVariables ( ) ; begin
20533: LD_INT 0
20535: PPUSH
// if globalGameSaveCounter then
20536: LD_EXP 37
20540: IFFALSE 20574
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20542: LD_ADDR_EXP 37
20546: PUSH
20547: LD_EXP 37
20551: PPUSH
20552: CALL 80765 0 1
20556: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20557: LD_STRING setGameSaveCounter(
20559: PUSH
20560: LD_EXP 37
20564: STR
20565: PUSH
20566: LD_STRING )
20568: STR
20569: PPUSH
20570: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20574: LD_STRING setGameDifficulty(
20576: PUSH
20577: LD_OWVAR 67
20581: STR
20582: PUSH
20583: LD_STRING )
20585: STR
20586: PPUSH
20587: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20591: LD_STRING displayDifficulty(
20593: PUSH
20594: LD_OWVAR 67
20598: STR
20599: PUSH
20600: LD_STRING )
20602: STR
20603: PPUSH
20604: CALL_OW 559
// end ;
20608: LD_VAR 0 1
20612: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20613: LD_INT 0
20615: PPUSH
// if p2 = stream_mode then
20616: LD_VAR 0 2
20620: PUSH
20621: LD_INT 100
20623: EQUAL
20624: IFFALSE 21627
// begin if not StreamModeActive then
20626: LD_EXP 38
20630: NOT
20631: IFFALSE 20641
// StreamModeActive := true ;
20633: LD_ADDR_EXP 38
20637: PUSH
20638: LD_INT 1
20640: ST_TO_ADDR
// if p3 = 0 then
20641: LD_VAR 0 3
20645: PUSH
20646: LD_INT 0
20648: EQUAL
20649: IFFALSE 20655
// InitStreamMode ;
20651: CALL 21831 0 0
// if p3 = 1 then
20655: LD_VAR 0 3
20659: PUSH
20660: LD_INT 1
20662: EQUAL
20663: IFFALSE 20673
// sRocket := true ;
20665: LD_ADDR_EXP 43
20669: PUSH
20670: LD_INT 1
20672: ST_TO_ADDR
// if p3 = 2 then
20673: LD_VAR 0 3
20677: PUSH
20678: LD_INT 2
20680: EQUAL
20681: IFFALSE 20691
// sSpeed := true ;
20683: LD_ADDR_EXP 42
20687: PUSH
20688: LD_INT 1
20690: ST_TO_ADDR
// if p3 = 3 then
20691: LD_VAR 0 3
20695: PUSH
20696: LD_INT 3
20698: EQUAL
20699: IFFALSE 20709
// sEngine := true ;
20701: LD_ADDR_EXP 44
20705: PUSH
20706: LD_INT 1
20708: ST_TO_ADDR
// if p3 = 4 then
20709: LD_VAR 0 3
20713: PUSH
20714: LD_INT 4
20716: EQUAL
20717: IFFALSE 20727
// sSpec := true ;
20719: LD_ADDR_EXP 41
20723: PUSH
20724: LD_INT 1
20726: ST_TO_ADDR
// if p3 = 5 then
20727: LD_VAR 0 3
20731: PUSH
20732: LD_INT 5
20734: EQUAL
20735: IFFALSE 20745
// sLevel := true ;
20737: LD_ADDR_EXP 45
20741: PUSH
20742: LD_INT 1
20744: ST_TO_ADDR
// if p3 = 6 then
20745: LD_VAR 0 3
20749: PUSH
20750: LD_INT 6
20752: EQUAL
20753: IFFALSE 20763
// sArmoury := true ;
20755: LD_ADDR_EXP 46
20759: PUSH
20760: LD_INT 1
20762: ST_TO_ADDR
// if p3 = 7 then
20763: LD_VAR 0 3
20767: PUSH
20768: LD_INT 7
20770: EQUAL
20771: IFFALSE 20781
// sRadar := true ;
20773: LD_ADDR_EXP 47
20777: PUSH
20778: LD_INT 1
20780: ST_TO_ADDR
// if p3 = 8 then
20781: LD_VAR 0 3
20785: PUSH
20786: LD_INT 8
20788: EQUAL
20789: IFFALSE 20799
// sBunker := true ;
20791: LD_ADDR_EXP 48
20795: PUSH
20796: LD_INT 1
20798: ST_TO_ADDR
// if p3 = 9 then
20799: LD_VAR 0 3
20803: PUSH
20804: LD_INT 9
20806: EQUAL
20807: IFFALSE 20817
// sHack := true ;
20809: LD_ADDR_EXP 49
20813: PUSH
20814: LD_INT 1
20816: ST_TO_ADDR
// if p3 = 10 then
20817: LD_VAR 0 3
20821: PUSH
20822: LD_INT 10
20824: EQUAL
20825: IFFALSE 20835
// sFire := true ;
20827: LD_ADDR_EXP 50
20831: PUSH
20832: LD_INT 1
20834: ST_TO_ADDR
// if p3 = 11 then
20835: LD_VAR 0 3
20839: PUSH
20840: LD_INT 11
20842: EQUAL
20843: IFFALSE 20853
// sRefresh := true ;
20845: LD_ADDR_EXP 51
20849: PUSH
20850: LD_INT 1
20852: ST_TO_ADDR
// if p3 = 12 then
20853: LD_VAR 0 3
20857: PUSH
20858: LD_INT 12
20860: EQUAL
20861: IFFALSE 20871
// sExp := true ;
20863: LD_ADDR_EXP 52
20867: PUSH
20868: LD_INT 1
20870: ST_TO_ADDR
// if p3 = 13 then
20871: LD_VAR 0 3
20875: PUSH
20876: LD_INT 13
20878: EQUAL
20879: IFFALSE 20889
// sDepot := true ;
20881: LD_ADDR_EXP 53
20885: PUSH
20886: LD_INT 1
20888: ST_TO_ADDR
// if p3 = 14 then
20889: LD_VAR 0 3
20893: PUSH
20894: LD_INT 14
20896: EQUAL
20897: IFFALSE 20907
// sFlag := true ;
20899: LD_ADDR_EXP 54
20903: PUSH
20904: LD_INT 1
20906: ST_TO_ADDR
// if p3 = 15 then
20907: LD_VAR 0 3
20911: PUSH
20912: LD_INT 15
20914: EQUAL
20915: IFFALSE 20925
// sKamikadze := true ;
20917: LD_ADDR_EXP 62
20921: PUSH
20922: LD_INT 1
20924: ST_TO_ADDR
// if p3 = 16 then
20925: LD_VAR 0 3
20929: PUSH
20930: LD_INT 16
20932: EQUAL
20933: IFFALSE 20943
// sTroll := true ;
20935: LD_ADDR_EXP 63
20939: PUSH
20940: LD_INT 1
20942: ST_TO_ADDR
// if p3 = 17 then
20943: LD_VAR 0 3
20947: PUSH
20948: LD_INT 17
20950: EQUAL
20951: IFFALSE 20961
// sSlow := true ;
20953: LD_ADDR_EXP 64
20957: PUSH
20958: LD_INT 1
20960: ST_TO_ADDR
// if p3 = 18 then
20961: LD_VAR 0 3
20965: PUSH
20966: LD_INT 18
20968: EQUAL
20969: IFFALSE 20979
// sLack := true ;
20971: LD_ADDR_EXP 65
20975: PUSH
20976: LD_INT 1
20978: ST_TO_ADDR
// if p3 = 19 then
20979: LD_VAR 0 3
20983: PUSH
20984: LD_INT 19
20986: EQUAL
20987: IFFALSE 20997
// sTank := true ;
20989: LD_ADDR_EXP 67
20993: PUSH
20994: LD_INT 1
20996: ST_TO_ADDR
// if p3 = 20 then
20997: LD_VAR 0 3
21001: PUSH
21002: LD_INT 20
21004: EQUAL
21005: IFFALSE 21015
// sRemote := true ;
21007: LD_ADDR_EXP 68
21011: PUSH
21012: LD_INT 1
21014: ST_TO_ADDR
// if p3 = 21 then
21015: LD_VAR 0 3
21019: PUSH
21020: LD_INT 21
21022: EQUAL
21023: IFFALSE 21033
// sPowell := true ;
21025: LD_ADDR_EXP 69
21029: PUSH
21030: LD_INT 1
21032: ST_TO_ADDR
// if p3 = 22 then
21033: LD_VAR 0 3
21037: PUSH
21038: LD_INT 22
21040: EQUAL
21041: IFFALSE 21051
// sTeleport := true ;
21043: LD_ADDR_EXP 72
21047: PUSH
21048: LD_INT 1
21050: ST_TO_ADDR
// if p3 = 23 then
21051: LD_VAR 0 3
21055: PUSH
21056: LD_INT 23
21058: EQUAL
21059: IFFALSE 21069
// sOilTower := true ;
21061: LD_ADDR_EXP 74
21065: PUSH
21066: LD_INT 1
21068: ST_TO_ADDR
// if p3 = 24 then
21069: LD_VAR 0 3
21073: PUSH
21074: LD_INT 24
21076: EQUAL
21077: IFFALSE 21087
// sShovel := true ;
21079: LD_ADDR_EXP 75
21083: PUSH
21084: LD_INT 1
21086: ST_TO_ADDR
// if p3 = 25 then
21087: LD_VAR 0 3
21091: PUSH
21092: LD_INT 25
21094: EQUAL
21095: IFFALSE 21105
// sSheik := true ;
21097: LD_ADDR_EXP 76
21101: PUSH
21102: LD_INT 1
21104: ST_TO_ADDR
// if p3 = 26 then
21105: LD_VAR 0 3
21109: PUSH
21110: LD_INT 26
21112: EQUAL
21113: IFFALSE 21123
// sEarthquake := true ;
21115: LD_ADDR_EXP 78
21119: PUSH
21120: LD_INT 1
21122: ST_TO_ADDR
// if p3 = 27 then
21123: LD_VAR 0 3
21127: PUSH
21128: LD_INT 27
21130: EQUAL
21131: IFFALSE 21141
// sAI := true ;
21133: LD_ADDR_EXP 79
21137: PUSH
21138: LD_INT 1
21140: ST_TO_ADDR
// if p3 = 28 then
21141: LD_VAR 0 3
21145: PUSH
21146: LD_INT 28
21148: EQUAL
21149: IFFALSE 21159
// sCargo := true ;
21151: LD_ADDR_EXP 82
21155: PUSH
21156: LD_INT 1
21158: ST_TO_ADDR
// if p3 = 29 then
21159: LD_VAR 0 3
21163: PUSH
21164: LD_INT 29
21166: EQUAL
21167: IFFALSE 21177
// sDLaser := true ;
21169: LD_ADDR_EXP 83
21173: PUSH
21174: LD_INT 1
21176: ST_TO_ADDR
// if p3 = 30 then
21177: LD_VAR 0 3
21181: PUSH
21182: LD_INT 30
21184: EQUAL
21185: IFFALSE 21195
// sExchange := true ;
21187: LD_ADDR_EXP 84
21191: PUSH
21192: LD_INT 1
21194: ST_TO_ADDR
// if p3 = 31 then
21195: LD_VAR 0 3
21199: PUSH
21200: LD_INT 31
21202: EQUAL
21203: IFFALSE 21213
// sFac := true ;
21205: LD_ADDR_EXP 85
21209: PUSH
21210: LD_INT 1
21212: ST_TO_ADDR
// if p3 = 32 then
21213: LD_VAR 0 3
21217: PUSH
21218: LD_INT 32
21220: EQUAL
21221: IFFALSE 21231
// sPower := true ;
21223: LD_ADDR_EXP 86
21227: PUSH
21228: LD_INT 1
21230: ST_TO_ADDR
// if p3 = 33 then
21231: LD_VAR 0 3
21235: PUSH
21236: LD_INT 33
21238: EQUAL
21239: IFFALSE 21249
// sRandom := true ;
21241: LD_ADDR_EXP 87
21245: PUSH
21246: LD_INT 1
21248: ST_TO_ADDR
// if p3 = 34 then
21249: LD_VAR 0 3
21253: PUSH
21254: LD_INT 34
21256: EQUAL
21257: IFFALSE 21267
// sShield := true ;
21259: LD_ADDR_EXP 88
21263: PUSH
21264: LD_INT 1
21266: ST_TO_ADDR
// if p3 = 35 then
21267: LD_VAR 0 3
21271: PUSH
21272: LD_INT 35
21274: EQUAL
21275: IFFALSE 21285
// sTime := true ;
21277: LD_ADDR_EXP 89
21281: PUSH
21282: LD_INT 1
21284: ST_TO_ADDR
// if p3 = 36 then
21285: LD_VAR 0 3
21289: PUSH
21290: LD_INT 36
21292: EQUAL
21293: IFFALSE 21303
// sTools := true ;
21295: LD_ADDR_EXP 90
21299: PUSH
21300: LD_INT 1
21302: ST_TO_ADDR
// if p3 = 101 then
21303: LD_VAR 0 3
21307: PUSH
21308: LD_INT 101
21310: EQUAL
21311: IFFALSE 21321
// sSold := true ;
21313: LD_ADDR_EXP 55
21317: PUSH
21318: LD_INT 1
21320: ST_TO_ADDR
// if p3 = 102 then
21321: LD_VAR 0 3
21325: PUSH
21326: LD_INT 102
21328: EQUAL
21329: IFFALSE 21339
// sDiff := true ;
21331: LD_ADDR_EXP 56
21335: PUSH
21336: LD_INT 1
21338: ST_TO_ADDR
// if p3 = 103 then
21339: LD_VAR 0 3
21343: PUSH
21344: LD_INT 103
21346: EQUAL
21347: IFFALSE 21357
// sFog := true ;
21349: LD_ADDR_EXP 59
21353: PUSH
21354: LD_INT 1
21356: ST_TO_ADDR
// if p3 = 104 then
21357: LD_VAR 0 3
21361: PUSH
21362: LD_INT 104
21364: EQUAL
21365: IFFALSE 21375
// sReset := true ;
21367: LD_ADDR_EXP 60
21371: PUSH
21372: LD_INT 1
21374: ST_TO_ADDR
// if p3 = 105 then
21375: LD_VAR 0 3
21379: PUSH
21380: LD_INT 105
21382: EQUAL
21383: IFFALSE 21393
// sSun := true ;
21385: LD_ADDR_EXP 61
21389: PUSH
21390: LD_INT 1
21392: ST_TO_ADDR
// if p3 = 106 then
21393: LD_VAR 0 3
21397: PUSH
21398: LD_INT 106
21400: EQUAL
21401: IFFALSE 21411
// sTiger := true ;
21403: LD_ADDR_EXP 57
21407: PUSH
21408: LD_INT 1
21410: ST_TO_ADDR
// if p3 = 107 then
21411: LD_VAR 0 3
21415: PUSH
21416: LD_INT 107
21418: EQUAL
21419: IFFALSE 21429
// sBomb := true ;
21421: LD_ADDR_EXP 58
21425: PUSH
21426: LD_INT 1
21428: ST_TO_ADDR
// if p3 = 108 then
21429: LD_VAR 0 3
21433: PUSH
21434: LD_INT 108
21436: EQUAL
21437: IFFALSE 21447
// sWound := true ;
21439: LD_ADDR_EXP 66
21443: PUSH
21444: LD_INT 1
21446: ST_TO_ADDR
// if p3 = 109 then
21447: LD_VAR 0 3
21451: PUSH
21452: LD_INT 109
21454: EQUAL
21455: IFFALSE 21465
// sBetray := true ;
21457: LD_ADDR_EXP 70
21461: PUSH
21462: LD_INT 1
21464: ST_TO_ADDR
// if p3 = 110 then
21465: LD_VAR 0 3
21469: PUSH
21470: LD_INT 110
21472: EQUAL
21473: IFFALSE 21483
// sContamin := true ;
21475: LD_ADDR_EXP 71
21479: PUSH
21480: LD_INT 1
21482: ST_TO_ADDR
// if p3 = 111 then
21483: LD_VAR 0 3
21487: PUSH
21488: LD_INT 111
21490: EQUAL
21491: IFFALSE 21501
// sOil := true ;
21493: LD_ADDR_EXP 73
21497: PUSH
21498: LD_INT 1
21500: ST_TO_ADDR
// if p3 = 112 then
21501: LD_VAR 0 3
21505: PUSH
21506: LD_INT 112
21508: EQUAL
21509: IFFALSE 21519
// sStu := true ;
21511: LD_ADDR_EXP 77
21515: PUSH
21516: LD_INT 1
21518: ST_TO_ADDR
// if p3 = 113 then
21519: LD_VAR 0 3
21523: PUSH
21524: LD_INT 113
21526: EQUAL
21527: IFFALSE 21537
// sBazooka := true ;
21529: LD_ADDR_EXP 80
21533: PUSH
21534: LD_INT 1
21536: ST_TO_ADDR
// if p3 = 114 then
21537: LD_VAR 0 3
21541: PUSH
21542: LD_INT 114
21544: EQUAL
21545: IFFALSE 21555
// sMortar := true ;
21547: LD_ADDR_EXP 81
21551: PUSH
21552: LD_INT 1
21554: ST_TO_ADDR
// if p3 = 115 then
21555: LD_VAR 0 3
21559: PUSH
21560: LD_INT 115
21562: EQUAL
21563: IFFALSE 21573
// sRanger := true ;
21565: LD_ADDR_EXP 91
21569: PUSH
21570: LD_INT 1
21572: ST_TO_ADDR
// if p3 = 116 then
21573: LD_VAR 0 3
21577: PUSH
21578: LD_INT 116
21580: EQUAL
21581: IFFALSE 21591
// sComputer := true ;
21583: LD_ADDR_EXP 92
21587: PUSH
21588: LD_INT 1
21590: ST_TO_ADDR
// if p3 = 117 then
21591: LD_VAR 0 3
21595: PUSH
21596: LD_INT 117
21598: EQUAL
21599: IFFALSE 21609
// s30 := true ;
21601: LD_ADDR_EXP 93
21605: PUSH
21606: LD_INT 1
21608: ST_TO_ADDR
// if p3 = 118 then
21609: LD_VAR 0 3
21613: PUSH
21614: LD_INT 118
21616: EQUAL
21617: IFFALSE 21627
// s60 := true ;
21619: LD_ADDR_EXP 94
21623: PUSH
21624: LD_INT 1
21626: ST_TO_ADDR
// end ; if p2 = hack_mode then
21627: LD_VAR 0 2
21631: PUSH
21632: LD_INT 101
21634: EQUAL
21635: IFFALSE 21763
// begin case p3 of 1 :
21637: LD_VAR 0 3
21641: PUSH
21642: LD_INT 1
21644: DOUBLE
21645: EQUAL
21646: IFTRUE 21650
21648: GO 21657
21650: POP
// hHackUnlimitedResources ; 2 :
21651: CALL 33910 0 0
21655: GO 21763
21657: LD_INT 2
21659: DOUBLE
21660: EQUAL
21661: IFTRUE 21665
21663: GO 21672
21665: POP
// hHackSetLevel10 ; 3 :
21666: CALL 34043 0 0
21670: GO 21763
21672: LD_INT 3
21674: DOUBLE
21675: EQUAL
21676: IFTRUE 21680
21678: GO 21687
21680: POP
// hHackSetLevel10YourUnits ; 4 :
21681: CALL 34128 0 0
21685: GO 21763
21687: LD_INT 4
21689: DOUBLE
21690: EQUAL
21691: IFTRUE 21695
21693: GO 21702
21695: POP
// hHackInvincible ; 5 :
21696: CALL 34576 0 0
21700: GO 21763
21702: LD_INT 5
21704: DOUBLE
21705: EQUAL
21706: IFTRUE 21710
21708: GO 21717
21710: POP
// hHackInvisible ; 6 :
21711: CALL 34687 0 0
21715: GO 21763
21717: LD_INT 6
21719: DOUBLE
21720: EQUAL
21721: IFTRUE 21725
21723: GO 21732
21725: POP
// hHackChangeYourSide ; 7 :
21726: CALL 34744 0 0
21730: GO 21763
21732: LD_INT 7
21734: DOUBLE
21735: EQUAL
21736: IFTRUE 21740
21738: GO 21747
21740: POP
// hHackChangeUnitSide ; 8 :
21741: CALL 34786 0 0
21745: GO 21763
21747: LD_INT 8
21749: DOUBLE
21750: EQUAL
21751: IFTRUE 21755
21753: GO 21762
21755: POP
// hHackFog ; end ;
21756: CALL 34887 0 0
21760: GO 21763
21762: POP
// end ; if p2 = game_save_mode then
21763: LD_VAR 0 2
21767: PUSH
21768: LD_INT 102
21770: EQUAL
21771: IFFALSE 21826
// begin if p3 = 1 then
21773: LD_VAR 0 3
21777: PUSH
21778: LD_INT 1
21780: EQUAL
21781: IFFALSE 21793
// globalGameSaveCounter := p4 ;
21783: LD_ADDR_EXP 37
21787: PUSH
21788: LD_VAR 0 4
21792: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21793: LD_VAR 0 3
21797: PUSH
21798: LD_INT 2
21800: EQUAL
21801: PUSH
21802: LD_EXP 37
21806: AND
21807: IFFALSE 21826
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21809: LD_STRING setGameSaveCounter(
21811: PUSH
21812: LD_EXP 37
21816: STR
21817: PUSH
21818: LD_STRING )
21820: STR
21821: PPUSH
21822: CALL_OW 559
// end ; end ;
21826: LD_VAR 0 7
21830: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21831: LD_INT 0
21833: PPUSH
// streamModeActive := false ;
21834: LD_ADDR_EXP 38
21838: PUSH
21839: LD_INT 0
21841: ST_TO_ADDR
// normalCounter := 36 ;
21842: LD_ADDR_EXP 39
21846: PUSH
21847: LD_INT 36
21849: ST_TO_ADDR
// hardcoreCounter := 18 ;
21850: LD_ADDR_EXP 40
21854: PUSH
21855: LD_INT 18
21857: ST_TO_ADDR
// sRocket := false ;
21858: LD_ADDR_EXP 43
21862: PUSH
21863: LD_INT 0
21865: ST_TO_ADDR
// sSpeed := false ;
21866: LD_ADDR_EXP 42
21870: PUSH
21871: LD_INT 0
21873: ST_TO_ADDR
// sEngine := false ;
21874: LD_ADDR_EXP 44
21878: PUSH
21879: LD_INT 0
21881: ST_TO_ADDR
// sSpec := false ;
21882: LD_ADDR_EXP 41
21886: PUSH
21887: LD_INT 0
21889: ST_TO_ADDR
// sLevel := false ;
21890: LD_ADDR_EXP 45
21894: PUSH
21895: LD_INT 0
21897: ST_TO_ADDR
// sArmoury := false ;
21898: LD_ADDR_EXP 46
21902: PUSH
21903: LD_INT 0
21905: ST_TO_ADDR
// sRadar := false ;
21906: LD_ADDR_EXP 47
21910: PUSH
21911: LD_INT 0
21913: ST_TO_ADDR
// sBunker := false ;
21914: LD_ADDR_EXP 48
21918: PUSH
21919: LD_INT 0
21921: ST_TO_ADDR
// sHack := false ;
21922: LD_ADDR_EXP 49
21926: PUSH
21927: LD_INT 0
21929: ST_TO_ADDR
// sFire := false ;
21930: LD_ADDR_EXP 50
21934: PUSH
21935: LD_INT 0
21937: ST_TO_ADDR
// sRefresh := false ;
21938: LD_ADDR_EXP 51
21942: PUSH
21943: LD_INT 0
21945: ST_TO_ADDR
// sExp := false ;
21946: LD_ADDR_EXP 52
21950: PUSH
21951: LD_INT 0
21953: ST_TO_ADDR
// sDepot := false ;
21954: LD_ADDR_EXP 53
21958: PUSH
21959: LD_INT 0
21961: ST_TO_ADDR
// sFlag := false ;
21962: LD_ADDR_EXP 54
21966: PUSH
21967: LD_INT 0
21969: ST_TO_ADDR
// sKamikadze := false ;
21970: LD_ADDR_EXP 62
21974: PUSH
21975: LD_INT 0
21977: ST_TO_ADDR
// sTroll := false ;
21978: LD_ADDR_EXP 63
21982: PUSH
21983: LD_INT 0
21985: ST_TO_ADDR
// sSlow := false ;
21986: LD_ADDR_EXP 64
21990: PUSH
21991: LD_INT 0
21993: ST_TO_ADDR
// sLack := false ;
21994: LD_ADDR_EXP 65
21998: PUSH
21999: LD_INT 0
22001: ST_TO_ADDR
// sTank := false ;
22002: LD_ADDR_EXP 67
22006: PUSH
22007: LD_INT 0
22009: ST_TO_ADDR
// sRemote := false ;
22010: LD_ADDR_EXP 68
22014: PUSH
22015: LD_INT 0
22017: ST_TO_ADDR
// sPowell := false ;
22018: LD_ADDR_EXP 69
22022: PUSH
22023: LD_INT 0
22025: ST_TO_ADDR
// sTeleport := false ;
22026: LD_ADDR_EXP 72
22030: PUSH
22031: LD_INT 0
22033: ST_TO_ADDR
// sOilTower := false ;
22034: LD_ADDR_EXP 74
22038: PUSH
22039: LD_INT 0
22041: ST_TO_ADDR
// sShovel := false ;
22042: LD_ADDR_EXP 75
22046: PUSH
22047: LD_INT 0
22049: ST_TO_ADDR
// sSheik := false ;
22050: LD_ADDR_EXP 76
22054: PUSH
22055: LD_INT 0
22057: ST_TO_ADDR
// sEarthquake := false ;
22058: LD_ADDR_EXP 78
22062: PUSH
22063: LD_INT 0
22065: ST_TO_ADDR
// sAI := false ;
22066: LD_ADDR_EXP 79
22070: PUSH
22071: LD_INT 0
22073: ST_TO_ADDR
// sCargo := false ;
22074: LD_ADDR_EXP 82
22078: PUSH
22079: LD_INT 0
22081: ST_TO_ADDR
// sDLaser := false ;
22082: LD_ADDR_EXP 83
22086: PUSH
22087: LD_INT 0
22089: ST_TO_ADDR
// sExchange := false ;
22090: LD_ADDR_EXP 84
22094: PUSH
22095: LD_INT 0
22097: ST_TO_ADDR
// sFac := false ;
22098: LD_ADDR_EXP 85
22102: PUSH
22103: LD_INT 0
22105: ST_TO_ADDR
// sPower := false ;
22106: LD_ADDR_EXP 86
22110: PUSH
22111: LD_INT 0
22113: ST_TO_ADDR
// sRandom := false ;
22114: LD_ADDR_EXP 87
22118: PUSH
22119: LD_INT 0
22121: ST_TO_ADDR
// sShield := false ;
22122: LD_ADDR_EXP 88
22126: PUSH
22127: LD_INT 0
22129: ST_TO_ADDR
// sTime := false ;
22130: LD_ADDR_EXP 89
22134: PUSH
22135: LD_INT 0
22137: ST_TO_ADDR
// sTools := false ;
22138: LD_ADDR_EXP 90
22142: PUSH
22143: LD_INT 0
22145: ST_TO_ADDR
// sSold := false ;
22146: LD_ADDR_EXP 55
22150: PUSH
22151: LD_INT 0
22153: ST_TO_ADDR
// sDiff := false ;
22154: LD_ADDR_EXP 56
22158: PUSH
22159: LD_INT 0
22161: ST_TO_ADDR
// sFog := false ;
22162: LD_ADDR_EXP 59
22166: PUSH
22167: LD_INT 0
22169: ST_TO_ADDR
// sReset := false ;
22170: LD_ADDR_EXP 60
22174: PUSH
22175: LD_INT 0
22177: ST_TO_ADDR
// sSun := false ;
22178: LD_ADDR_EXP 61
22182: PUSH
22183: LD_INT 0
22185: ST_TO_ADDR
// sTiger := false ;
22186: LD_ADDR_EXP 57
22190: PUSH
22191: LD_INT 0
22193: ST_TO_ADDR
// sBomb := false ;
22194: LD_ADDR_EXP 58
22198: PUSH
22199: LD_INT 0
22201: ST_TO_ADDR
// sWound := false ;
22202: LD_ADDR_EXP 66
22206: PUSH
22207: LD_INT 0
22209: ST_TO_ADDR
// sBetray := false ;
22210: LD_ADDR_EXP 70
22214: PUSH
22215: LD_INT 0
22217: ST_TO_ADDR
// sContamin := false ;
22218: LD_ADDR_EXP 71
22222: PUSH
22223: LD_INT 0
22225: ST_TO_ADDR
// sOil := false ;
22226: LD_ADDR_EXP 73
22230: PUSH
22231: LD_INT 0
22233: ST_TO_ADDR
// sStu := false ;
22234: LD_ADDR_EXP 77
22238: PUSH
22239: LD_INT 0
22241: ST_TO_ADDR
// sBazooka := false ;
22242: LD_ADDR_EXP 80
22246: PUSH
22247: LD_INT 0
22249: ST_TO_ADDR
// sMortar := false ;
22250: LD_ADDR_EXP 81
22254: PUSH
22255: LD_INT 0
22257: ST_TO_ADDR
// sRanger := false ;
22258: LD_ADDR_EXP 91
22262: PUSH
22263: LD_INT 0
22265: ST_TO_ADDR
// sComputer := false ;
22266: LD_ADDR_EXP 92
22270: PUSH
22271: LD_INT 0
22273: ST_TO_ADDR
// s30 := false ;
22274: LD_ADDR_EXP 93
22278: PUSH
22279: LD_INT 0
22281: ST_TO_ADDR
// s60 := false ;
22282: LD_ADDR_EXP 94
22286: PUSH
22287: LD_INT 0
22289: ST_TO_ADDR
// end ;
22290: LD_VAR 0 1
22294: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22295: LD_INT 0
22297: PPUSH
22298: PPUSH
22299: PPUSH
22300: PPUSH
22301: PPUSH
22302: PPUSH
22303: PPUSH
// result := [ ] ;
22304: LD_ADDR_VAR 0 2
22308: PUSH
22309: EMPTY
22310: ST_TO_ADDR
// if campaign_id = 1 then
22311: LD_OWVAR 69
22315: PUSH
22316: LD_INT 1
22318: EQUAL
22319: IFFALSE 25485
// begin case mission_number of 1 :
22321: LD_OWVAR 70
22325: PUSH
22326: LD_INT 1
22328: DOUBLE
22329: EQUAL
22330: IFTRUE 22334
22332: GO 22410
22334: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22335: LD_ADDR_VAR 0 2
22339: PUSH
22340: LD_INT 2
22342: PUSH
22343: LD_INT 4
22345: PUSH
22346: LD_INT 11
22348: PUSH
22349: LD_INT 12
22351: PUSH
22352: LD_INT 15
22354: PUSH
22355: LD_INT 16
22357: PUSH
22358: LD_INT 22
22360: PUSH
22361: LD_INT 23
22363: PUSH
22364: LD_INT 26
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 101
22380: PUSH
22381: LD_INT 102
22383: PUSH
22384: LD_INT 106
22386: PUSH
22387: LD_INT 116
22389: PUSH
22390: LD_INT 117
22392: PUSH
22393: LD_INT 118
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: ST_TO_ADDR
22408: GO 25483
22410: LD_INT 2
22412: DOUBLE
22413: EQUAL
22414: IFTRUE 22418
22416: GO 22502
22418: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22419: LD_ADDR_VAR 0 2
22423: PUSH
22424: LD_INT 2
22426: PUSH
22427: LD_INT 4
22429: PUSH
22430: LD_INT 11
22432: PUSH
22433: LD_INT 12
22435: PUSH
22436: LD_INT 15
22438: PUSH
22439: LD_INT 16
22441: PUSH
22442: LD_INT 22
22444: PUSH
22445: LD_INT 23
22447: PUSH
22448: LD_INT 26
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 101
22464: PUSH
22465: LD_INT 102
22467: PUSH
22468: LD_INT 105
22470: PUSH
22471: LD_INT 106
22473: PUSH
22474: LD_INT 108
22476: PUSH
22477: LD_INT 116
22479: PUSH
22480: LD_INT 117
22482: PUSH
22483: LD_INT 118
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: ST_TO_ADDR
22500: GO 25483
22502: LD_INT 3
22504: DOUBLE
22505: EQUAL
22506: IFTRUE 22510
22508: GO 22598
22510: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22511: LD_ADDR_VAR 0 2
22515: PUSH
22516: LD_INT 2
22518: PUSH
22519: LD_INT 4
22521: PUSH
22522: LD_INT 5
22524: PUSH
22525: LD_INT 11
22527: PUSH
22528: LD_INT 12
22530: PUSH
22531: LD_INT 15
22533: PUSH
22534: LD_INT 16
22536: PUSH
22537: LD_INT 22
22539: PUSH
22540: LD_INT 26
22542: PUSH
22543: LD_INT 36
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 101
22560: PUSH
22561: LD_INT 102
22563: PUSH
22564: LD_INT 105
22566: PUSH
22567: LD_INT 106
22569: PUSH
22570: LD_INT 108
22572: PUSH
22573: LD_INT 116
22575: PUSH
22576: LD_INT 117
22578: PUSH
22579: LD_INT 118
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: ST_TO_ADDR
22596: GO 25483
22598: LD_INT 4
22600: DOUBLE
22601: EQUAL
22602: IFTRUE 22606
22604: GO 22702
22606: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22607: LD_ADDR_VAR 0 2
22611: PUSH
22612: LD_INT 2
22614: PUSH
22615: LD_INT 4
22617: PUSH
22618: LD_INT 5
22620: PUSH
22621: LD_INT 8
22623: PUSH
22624: LD_INT 11
22626: PUSH
22627: LD_INT 12
22629: PUSH
22630: LD_INT 15
22632: PUSH
22633: LD_INT 16
22635: PUSH
22636: LD_INT 22
22638: PUSH
22639: LD_INT 23
22641: PUSH
22642: LD_INT 26
22644: PUSH
22645: LD_INT 36
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 101
22664: PUSH
22665: LD_INT 102
22667: PUSH
22668: LD_INT 105
22670: PUSH
22671: LD_INT 106
22673: PUSH
22674: LD_INT 108
22676: PUSH
22677: LD_INT 116
22679: PUSH
22680: LD_INT 117
22682: PUSH
22683: LD_INT 118
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: ST_TO_ADDR
22700: GO 25483
22702: LD_INT 5
22704: DOUBLE
22705: EQUAL
22706: IFTRUE 22710
22708: GO 22822
22710: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22711: LD_ADDR_VAR 0 2
22715: PUSH
22716: LD_INT 2
22718: PUSH
22719: LD_INT 4
22721: PUSH
22722: LD_INT 5
22724: PUSH
22725: LD_INT 6
22727: PUSH
22728: LD_INT 8
22730: PUSH
22731: LD_INT 11
22733: PUSH
22734: LD_INT 12
22736: PUSH
22737: LD_INT 15
22739: PUSH
22740: LD_INT 16
22742: PUSH
22743: LD_INT 22
22745: PUSH
22746: LD_INT 23
22748: PUSH
22749: LD_INT 25
22751: PUSH
22752: LD_INT 26
22754: PUSH
22755: LD_INT 36
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 101
22776: PUSH
22777: LD_INT 102
22779: PUSH
22780: LD_INT 105
22782: PUSH
22783: LD_INT 106
22785: PUSH
22786: LD_INT 108
22788: PUSH
22789: LD_INT 109
22791: PUSH
22792: LD_INT 112
22794: PUSH
22795: LD_INT 116
22797: PUSH
22798: LD_INT 117
22800: PUSH
22801: LD_INT 118
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: ST_TO_ADDR
22820: GO 25483
22822: LD_INT 6
22824: DOUBLE
22825: EQUAL
22826: IFTRUE 22830
22828: GO 22962
22830: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22831: LD_ADDR_VAR 0 2
22835: PUSH
22836: LD_INT 2
22838: PUSH
22839: LD_INT 4
22841: PUSH
22842: LD_INT 5
22844: PUSH
22845: LD_INT 6
22847: PUSH
22848: LD_INT 8
22850: PUSH
22851: LD_INT 11
22853: PUSH
22854: LD_INT 12
22856: PUSH
22857: LD_INT 15
22859: PUSH
22860: LD_INT 16
22862: PUSH
22863: LD_INT 20
22865: PUSH
22866: LD_INT 21
22868: PUSH
22869: LD_INT 22
22871: PUSH
22872: LD_INT 23
22874: PUSH
22875: LD_INT 25
22877: PUSH
22878: LD_INT 26
22880: PUSH
22881: LD_INT 30
22883: PUSH
22884: LD_INT 31
22886: PUSH
22887: LD_INT 32
22889: PUSH
22890: LD_INT 36
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 101
22916: PUSH
22917: LD_INT 102
22919: PUSH
22920: LD_INT 105
22922: PUSH
22923: LD_INT 106
22925: PUSH
22926: LD_INT 108
22928: PUSH
22929: LD_INT 109
22931: PUSH
22932: LD_INT 112
22934: PUSH
22935: LD_INT 116
22937: PUSH
22938: LD_INT 117
22940: PUSH
22941: LD_INT 118
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: ST_TO_ADDR
22960: GO 25483
22962: LD_INT 7
22964: DOUBLE
22965: EQUAL
22966: IFTRUE 22970
22968: GO 23082
22970: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22971: LD_ADDR_VAR 0 2
22975: PUSH
22976: LD_INT 2
22978: PUSH
22979: LD_INT 4
22981: PUSH
22982: LD_INT 5
22984: PUSH
22985: LD_INT 7
22987: PUSH
22988: LD_INT 11
22990: PUSH
22991: LD_INT 12
22993: PUSH
22994: LD_INT 15
22996: PUSH
22997: LD_INT 16
22999: PUSH
23000: LD_INT 20
23002: PUSH
23003: LD_INT 21
23005: PUSH
23006: LD_INT 22
23008: PUSH
23009: LD_INT 23
23011: PUSH
23012: LD_INT 25
23014: PUSH
23015: LD_INT 26
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 101
23036: PUSH
23037: LD_INT 102
23039: PUSH
23040: LD_INT 103
23042: PUSH
23043: LD_INT 105
23045: PUSH
23046: LD_INT 106
23048: PUSH
23049: LD_INT 108
23051: PUSH
23052: LD_INT 112
23054: PUSH
23055: LD_INT 116
23057: PUSH
23058: LD_INT 117
23060: PUSH
23061: LD_INT 118
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: ST_TO_ADDR
23080: GO 25483
23082: LD_INT 8
23084: DOUBLE
23085: EQUAL
23086: IFTRUE 23090
23088: GO 23230
23090: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23091: LD_ADDR_VAR 0 2
23095: PUSH
23096: LD_INT 2
23098: PUSH
23099: LD_INT 4
23101: PUSH
23102: LD_INT 5
23104: PUSH
23105: LD_INT 6
23107: PUSH
23108: LD_INT 7
23110: PUSH
23111: LD_INT 8
23113: PUSH
23114: LD_INT 11
23116: PUSH
23117: LD_INT 12
23119: PUSH
23120: LD_INT 15
23122: PUSH
23123: LD_INT 16
23125: PUSH
23126: LD_INT 20
23128: PUSH
23129: LD_INT 21
23131: PUSH
23132: LD_INT 22
23134: PUSH
23135: LD_INT 23
23137: PUSH
23138: LD_INT 25
23140: PUSH
23141: LD_INT 26
23143: PUSH
23144: LD_INT 30
23146: PUSH
23147: LD_INT 31
23149: PUSH
23150: LD_INT 32
23152: PUSH
23153: LD_INT 36
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 101
23180: PUSH
23181: LD_INT 102
23183: PUSH
23184: LD_INT 103
23186: PUSH
23187: LD_INT 105
23189: PUSH
23190: LD_INT 106
23192: PUSH
23193: LD_INT 108
23195: PUSH
23196: LD_INT 109
23198: PUSH
23199: LD_INT 112
23201: PUSH
23202: LD_INT 116
23204: PUSH
23205: LD_INT 117
23207: PUSH
23208: LD_INT 118
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: ST_TO_ADDR
23228: GO 25483
23230: LD_INT 9
23232: DOUBLE
23233: EQUAL
23234: IFTRUE 23238
23236: GO 23386
23238: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23239: LD_ADDR_VAR 0 2
23243: PUSH
23244: LD_INT 2
23246: PUSH
23247: LD_INT 4
23249: PUSH
23250: LD_INT 5
23252: PUSH
23253: LD_INT 6
23255: PUSH
23256: LD_INT 7
23258: PUSH
23259: LD_INT 8
23261: PUSH
23262: LD_INT 11
23264: PUSH
23265: LD_INT 12
23267: PUSH
23268: LD_INT 15
23270: PUSH
23271: LD_INT 16
23273: PUSH
23274: LD_INT 20
23276: PUSH
23277: LD_INT 21
23279: PUSH
23280: LD_INT 22
23282: PUSH
23283: LD_INT 23
23285: PUSH
23286: LD_INT 25
23288: PUSH
23289: LD_INT 26
23291: PUSH
23292: LD_INT 28
23294: PUSH
23295: LD_INT 30
23297: PUSH
23298: LD_INT 31
23300: PUSH
23301: LD_INT 32
23303: PUSH
23304: LD_INT 36
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 101
23332: PUSH
23333: LD_INT 102
23335: PUSH
23336: LD_INT 103
23338: PUSH
23339: LD_INT 105
23341: PUSH
23342: LD_INT 106
23344: PUSH
23345: LD_INT 108
23347: PUSH
23348: LD_INT 109
23350: PUSH
23351: LD_INT 112
23353: PUSH
23354: LD_INT 114
23356: PUSH
23357: LD_INT 116
23359: PUSH
23360: LD_INT 117
23362: PUSH
23363: LD_INT 118
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: ST_TO_ADDR
23384: GO 25483
23386: LD_INT 10
23388: DOUBLE
23389: EQUAL
23390: IFTRUE 23394
23392: GO 23590
23394: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23395: LD_ADDR_VAR 0 2
23399: PUSH
23400: LD_INT 2
23402: PUSH
23403: LD_INT 4
23405: PUSH
23406: LD_INT 5
23408: PUSH
23409: LD_INT 6
23411: PUSH
23412: LD_INT 7
23414: PUSH
23415: LD_INT 8
23417: PUSH
23418: LD_INT 9
23420: PUSH
23421: LD_INT 10
23423: PUSH
23424: LD_INT 11
23426: PUSH
23427: LD_INT 12
23429: PUSH
23430: LD_INT 13
23432: PUSH
23433: LD_INT 14
23435: PUSH
23436: LD_INT 15
23438: PUSH
23439: LD_INT 16
23441: PUSH
23442: LD_INT 17
23444: PUSH
23445: LD_INT 18
23447: PUSH
23448: LD_INT 19
23450: PUSH
23451: LD_INT 20
23453: PUSH
23454: LD_INT 21
23456: PUSH
23457: LD_INT 22
23459: PUSH
23460: LD_INT 23
23462: PUSH
23463: LD_INT 24
23465: PUSH
23466: LD_INT 25
23468: PUSH
23469: LD_INT 26
23471: PUSH
23472: LD_INT 28
23474: PUSH
23475: LD_INT 30
23477: PUSH
23478: LD_INT 31
23480: PUSH
23481: LD_INT 32
23483: PUSH
23484: LD_INT 36
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 101
23520: PUSH
23521: LD_INT 102
23523: PUSH
23524: LD_INT 103
23526: PUSH
23527: LD_INT 104
23529: PUSH
23530: LD_INT 105
23532: PUSH
23533: LD_INT 106
23535: PUSH
23536: LD_INT 107
23538: PUSH
23539: LD_INT 108
23541: PUSH
23542: LD_INT 109
23544: PUSH
23545: LD_INT 110
23547: PUSH
23548: LD_INT 111
23550: PUSH
23551: LD_INT 112
23553: PUSH
23554: LD_INT 114
23556: PUSH
23557: LD_INT 116
23559: PUSH
23560: LD_INT 117
23562: PUSH
23563: LD_INT 118
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: ST_TO_ADDR
23588: GO 25483
23590: LD_INT 11
23592: DOUBLE
23593: EQUAL
23594: IFTRUE 23598
23596: GO 23802
23598: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23599: LD_ADDR_VAR 0 2
23603: PUSH
23604: LD_INT 2
23606: PUSH
23607: LD_INT 3
23609: PUSH
23610: LD_INT 4
23612: PUSH
23613: LD_INT 5
23615: PUSH
23616: LD_INT 6
23618: PUSH
23619: LD_INT 7
23621: PUSH
23622: LD_INT 8
23624: PUSH
23625: LD_INT 9
23627: PUSH
23628: LD_INT 10
23630: PUSH
23631: LD_INT 11
23633: PUSH
23634: LD_INT 12
23636: PUSH
23637: LD_INT 13
23639: PUSH
23640: LD_INT 14
23642: PUSH
23643: LD_INT 15
23645: PUSH
23646: LD_INT 16
23648: PUSH
23649: LD_INT 17
23651: PUSH
23652: LD_INT 18
23654: PUSH
23655: LD_INT 19
23657: PUSH
23658: LD_INT 20
23660: PUSH
23661: LD_INT 21
23663: PUSH
23664: LD_INT 22
23666: PUSH
23667: LD_INT 23
23669: PUSH
23670: LD_INT 24
23672: PUSH
23673: LD_INT 25
23675: PUSH
23676: LD_INT 26
23678: PUSH
23679: LD_INT 28
23681: PUSH
23682: LD_INT 30
23684: PUSH
23685: LD_INT 31
23687: PUSH
23688: LD_INT 32
23690: PUSH
23691: LD_INT 34
23693: PUSH
23694: LD_INT 36
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 101
23732: PUSH
23733: LD_INT 102
23735: PUSH
23736: LD_INT 103
23738: PUSH
23739: LD_INT 104
23741: PUSH
23742: LD_INT 105
23744: PUSH
23745: LD_INT 106
23747: PUSH
23748: LD_INT 107
23750: PUSH
23751: LD_INT 108
23753: PUSH
23754: LD_INT 109
23756: PUSH
23757: LD_INT 110
23759: PUSH
23760: LD_INT 111
23762: PUSH
23763: LD_INT 112
23765: PUSH
23766: LD_INT 114
23768: PUSH
23769: LD_INT 116
23771: PUSH
23772: LD_INT 117
23774: PUSH
23775: LD_INT 118
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: ST_TO_ADDR
23800: GO 25483
23802: LD_INT 12
23804: DOUBLE
23805: EQUAL
23806: IFTRUE 23810
23808: GO 24030
23810: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23811: LD_ADDR_VAR 0 2
23815: PUSH
23816: LD_INT 1
23818: PUSH
23819: LD_INT 2
23821: PUSH
23822: LD_INT 3
23824: PUSH
23825: LD_INT 4
23827: PUSH
23828: LD_INT 5
23830: PUSH
23831: LD_INT 6
23833: PUSH
23834: LD_INT 7
23836: PUSH
23837: LD_INT 8
23839: PUSH
23840: LD_INT 9
23842: PUSH
23843: LD_INT 10
23845: PUSH
23846: LD_INT 11
23848: PUSH
23849: LD_INT 12
23851: PUSH
23852: LD_INT 13
23854: PUSH
23855: LD_INT 14
23857: PUSH
23858: LD_INT 15
23860: PUSH
23861: LD_INT 16
23863: PUSH
23864: LD_INT 17
23866: PUSH
23867: LD_INT 18
23869: PUSH
23870: LD_INT 19
23872: PUSH
23873: LD_INT 20
23875: PUSH
23876: LD_INT 21
23878: PUSH
23879: LD_INT 22
23881: PUSH
23882: LD_INT 23
23884: PUSH
23885: LD_INT 24
23887: PUSH
23888: LD_INT 25
23890: PUSH
23891: LD_INT 26
23893: PUSH
23894: LD_INT 27
23896: PUSH
23897: LD_INT 28
23899: PUSH
23900: LD_INT 30
23902: PUSH
23903: LD_INT 31
23905: PUSH
23906: LD_INT 32
23908: PUSH
23909: LD_INT 33
23911: PUSH
23912: LD_INT 34
23914: PUSH
23915: LD_INT 36
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 101
23956: PUSH
23957: LD_INT 102
23959: PUSH
23960: LD_INT 103
23962: PUSH
23963: LD_INT 104
23965: PUSH
23966: LD_INT 105
23968: PUSH
23969: LD_INT 106
23971: PUSH
23972: LD_INT 107
23974: PUSH
23975: LD_INT 108
23977: PUSH
23978: LD_INT 109
23980: PUSH
23981: LD_INT 110
23983: PUSH
23984: LD_INT 111
23986: PUSH
23987: LD_INT 112
23989: PUSH
23990: LD_INT 113
23992: PUSH
23993: LD_INT 114
23995: PUSH
23996: LD_INT 116
23998: PUSH
23999: LD_INT 117
24001: PUSH
24002: LD_INT 118
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: ST_TO_ADDR
24028: GO 25483
24030: LD_INT 13
24032: DOUBLE
24033: EQUAL
24034: IFTRUE 24038
24036: GO 24246
24038: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24039: LD_ADDR_VAR 0 2
24043: PUSH
24044: LD_INT 1
24046: PUSH
24047: LD_INT 2
24049: PUSH
24050: LD_INT 3
24052: PUSH
24053: LD_INT 4
24055: PUSH
24056: LD_INT 5
24058: PUSH
24059: LD_INT 8
24061: PUSH
24062: LD_INT 9
24064: PUSH
24065: LD_INT 10
24067: PUSH
24068: LD_INT 11
24070: PUSH
24071: LD_INT 12
24073: PUSH
24074: LD_INT 14
24076: PUSH
24077: LD_INT 15
24079: PUSH
24080: LD_INT 16
24082: PUSH
24083: LD_INT 17
24085: PUSH
24086: LD_INT 18
24088: PUSH
24089: LD_INT 19
24091: PUSH
24092: LD_INT 20
24094: PUSH
24095: LD_INT 21
24097: PUSH
24098: LD_INT 22
24100: PUSH
24101: LD_INT 23
24103: PUSH
24104: LD_INT 24
24106: PUSH
24107: LD_INT 25
24109: PUSH
24110: LD_INT 26
24112: PUSH
24113: LD_INT 27
24115: PUSH
24116: LD_INT 28
24118: PUSH
24119: LD_INT 30
24121: PUSH
24122: LD_INT 31
24124: PUSH
24125: LD_INT 32
24127: PUSH
24128: LD_INT 33
24130: PUSH
24131: LD_INT 34
24133: PUSH
24134: LD_INT 36
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 101
24172: PUSH
24173: LD_INT 102
24175: PUSH
24176: LD_INT 103
24178: PUSH
24179: LD_INT 104
24181: PUSH
24182: LD_INT 105
24184: PUSH
24185: LD_INT 106
24187: PUSH
24188: LD_INT 107
24190: PUSH
24191: LD_INT 108
24193: PUSH
24194: LD_INT 109
24196: PUSH
24197: LD_INT 110
24199: PUSH
24200: LD_INT 111
24202: PUSH
24203: LD_INT 112
24205: PUSH
24206: LD_INT 113
24208: PUSH
24209: LD_INT 114
24211: PUSH
24212: LD_INT 116
24214: PUSH
24215: LD_INT 117
24217: PUSH
24218: LD_INT 118
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: ST_TO_ADDR
24244: GO 25483
24246: LD_INT 14
24248: DOUBLE
24249: EQUAL
24250: IFTRUE 24254
24252: GO 24478
24254: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24255: LD_ADDR_VAR 0 2
24259: PUSH
24260: LD_INT 1
24262: PUSH
24263: LD_INT 2
24265: PUSH
24266: LD_INT 3
24268: PUSH
24269: LD_INT 4
24271: PUSH
24272: LD_INT 5
24274: PUSH
24275: LD_INT 6
24277: PUSH
24278: LD_INT 7
24280: PUSH
24281: LD_INT 8
24283: PUSH
24284: LD_INT 9
24286: PUSH
24287: LD_INT 10
24289: PUSH
24290: LD_INT 11
24292: PUSH
24293: LD_INT 12
24295: PUSH
24296: LD_INT 13
24298: PUSH
24299: LD_INT 14
24301: PUSH
24302: LD_INT 15
24304: PUSH
24305: LD_INT 16
24307: PUSH
24308: LD_INT 17
24310: PUSH
24311: LD_INT 18
24313: PUSH
24314: LD_INT 19
24316: PUSH
24317: LD_INT 20
24319: PUSH
24320: LD_INT 21
24322: PUSH
24323: LD_INT 22
24325: PUSH
24326: LD_INT 23
24328: PUSH
24329: LD_INT 24
24331: PUSH
24332: LD_INT 25
24334: PUSH
24335: LD_INT 26
24337: PUSH
24338: LD_INT 27
24340: PUSH
24341: LD_INT 28
24343: PUSH
24344: LD_INT 29
24346: PUSH
24347: LD_INT 30
24349: PUSH
24350: LD_INT 31
24352: PUSH
24353: LD_INT 32
24355: PUSH
24356: LD_INT 33
24358: PUSH
24359: LD_INT 34
24361: PUSH
24362: LD_INT 36
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 101
24404: PUSH
24405: LD_INT 102
24407: PUSH
24408: LD_INT 103
24410: PUSH
24411: LD_INT 104
24413: PUSH
24414: LD_INT 105
24416: PUSH
24417: LD_INT 106
24419: PUSH
24420: LD_INT 107
24422: PUSH
24423: LD_INT 108
24425: PUSH
24426: LD_INT 109
24428: PUSH
24429: LD_INT 110
24431: PUSH
24432: LD_INT 111
24434: PUSH
24435: LD_INT 112
24437: PUSH
24438: LD_INT 113
24440: PUSH
24441: LD_INT 114
24443: PUSH
24444: LD_INT 116
24446: PUSH
24447: LD_INT 117
24449: PUSH
24450: LD_INT 118
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: ST_TO_ADDR
24476: GO 25483
24478: LD_INT 15
24480: DOUBLE
24481: EQUAL
24482: IFTRUE 24486
24484: GO 24710
24486: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24487: LD_ADDR_VAR 0 2
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: LD_INT 2
24497: PUSH
24498: LD_INT 3
24500: PUSH
24501: LD_INT 4
24503: PUSH
24504: LD_INT 5
24506: PUSH
24507: LD_INT 6
24509: PUSH
24510: LD_INT 7
24512: PUSH
24513: LD_INT 8
24515: PUSH
24516: LD_INT 9
24518: PUSH
24519: LD_INT 10
24521: PUSH
24522: LD_INT 11
24524: PUSH
24525: LD_INT 12
24527: PUSH
24528: LD_INT 13
24530: PUSH
24531: LD_INT 14
24533: PUSH
24534: LD_INT 15
24536: PUSH
24537: LD_INT 16
24539: PUSH
24540: LD_INT 17
24542: PUSH
24543: LD_INT 18
24545: PUSH
24546: LD_INT 19
24548: PUSH
24549: LD_INT 20
24551: PUSH
24552: LD_INT 21
24554: PUSH
24555: LD_INT 22
24557: PUSH
24558: LD_INT 23
24560: PUSH
24561: LD_INT 24
24563: PUSH
24564: LD_INT 25
24566: PUSH
24567: LD_INT 26
24569: PUSH
24570: LD_INT 27
24572: PUSH
24573: LD_INT 28
24575: PUSH
24576: LD_INT 29
24578: PUSH
24579: LD_INT 30
24581: PUSH
24582: LD_INT 31
24584: PUSH
24585: LD_INT 32
24587: PUSH
24588: LD_INT 33
24590: PUSH
24591: LD_INT 34
24593: PUSH
24594: LD_INT 36
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 101
24636: PUSH
24637: LD_INT 102
24639: PUSH
24640: LD_INT 103
24642: PUSH
24643: LD_INT 104
24645: PUSH
24646: LD_INT 105
24648: PUSH
24649: LD_INT 106
24651: PUSH
24652: LD_INT 107
24654: PUSH
24655: LD_INT 108
24657: PUSH
24658: LD_INT 109
24660: PUSH
24661: LD_INT 110
24663: PUSH
24664: LD_INT 111
24666: PUSH
24667: LD_INT 112
24669: PUSH
24670: LD_INT 113
24672: PUSH
24673: LD_INT 114
24675: PUSH
24676: LD_INT 116
24678: PUSH
24679: LD_INT 117
24681: PUSH
24682: LD_INT 118
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: ST_TO_ADDR
24708: GO 25483
24710: LD_INT 16
24712: DOUBLE
24713: EQUAL
24714: IFTRUE 24718
24716: GO 24854
24718: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24719: LD_ADDR_VAR 0 2
24723: PUSH
24724: LD_INT 2
24726: PUSH
24727: LD_INT 4
24729: PUSH
24730: LD_INT 5
24732: PUSH
24733: LD_INT 7
24735: PUSH
24736: LD_INT 11
24738: PUSH
24739: LD_INT 12
24741: PUSH
24742: LD_INT 15
24744: PUSH
24745: LD_INT 16
24747: PUSH
24748: LD_INT 20
24750: PUSH
24751: LD_INT 21
24753: PUSH
24754: LD_INT 22
24756: PUSH
24757: LD_INT 23
24759: PUSH
24760: LD_INT 25
24762: PUSH
24763: LD_INT 26
24765: PUSH
24766: LD_INT 30
24768: PUSH
24769: LD_INT 31
24771: PUSH
24772: LD_INT 32
24774: PUSH
24775: LD_INT 33
24777: PUSH
24778: LD_INT 34
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 101
24804: PUSH
24805: LD_INT 102
24807: PUSH
24808: LD_INT 103
24810: PUSH
24811: LD_INT 106
24813: PUSH
24814: LD_INT 108
24816: PUSH
24817: LD_INT 112
24819: PUSH
24820: LD_INT 113
24822: PUSH
24823: LD_INT 114
24825: PUSH
24826: LD_INT 116
24828: PUSH
24829: LD_INT 117
24831: PUSH
24832: LD_INT 118
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: ST_TO_ADDR
24852: GO 25483
24854: LD_INT 17
24856: DOUBLE
24857: EQUAL
24858: IFTRUE 24862
24860: GO 25086
24862: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24863: LD_ADDR_VAR 0 2
24867: PUSH
24868: LD_INT 1
24870: PUSH
24871: LD_INT 2
24873: PUSH
24874: LD_INT 3
24876: PUSH
24877: LD_INT 4
24879: PUSH
24880: LD_INT 5
24882: PUSH
24883: LD_INT 6
24885: PUSH
24886: LD_INT 7
24888: PUSH
24889: LD_INT 8
24891: PUSH
24892: LD_INT 9
24894: PUSH
24895: LD_INT 10
24897: PUSH
24898: LD_INT 11
24900: PUSH
24901: LD_INT 12
24903: PUSH
24904: LD_INT 13
24906: PUSH
24907: LD_INT 14
24909: PUSH
24910: LD_INT 15
24912: PUSH
24913: LD_INT 16
24915: PUSH
24916: LD_INT 17
24918: PUSH
24919: LD_INT 18
24921: PUSH
24922: LD_INT 19
24924: PUSH
24925: LD_INT 20
24927: PUSH
24928: LD_INT 21
24930: PUSH
24931: LD_INT 22
24933: PUSH
24934: LD_INT 23
24936: PUSH
24937: LD_INT 24
24939: PUSH
24940: LD_INT 25
24942: PUSH
24943: LD_INT 26
24945: PUSH
24946: LD_INT 27
24948: PUSH
24949: LD_INT 28
24951: PUSH
24952: LD_INT 29
24954: PUSH
24955: LD_INT 30
24957: PUSH
24958: LD_INT 31
24960: PUSH
24961: LD_INT 32
24963: PUSH
24964: LD_INT 33
24966: PUSH
24967: LD_INT 34
24969: PUSH
24970: LD_INT 36
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 101
25012: PUSH
25013: LD_INT 102
25015: PUSH
25016: LD_INT 103
25018: PUSH
25019: LD_INT 104
25021: PUSH
25022: LD_INT 105
25024: PUSH
25025: LD_INT 106
25027: PUSH
25028: LD_INT 107
25030: PUSH
25031: LD_INT 108
25033: PUSH
25034: LD_INT 109
25036: PUSH
25037: LD_INT 110
25039: PUSH
25040: LD_INT 111
25042: PUSH
25043: LD_INT 112
25045: PUSH
25046: LD_INT 113
25048: PUSH
25049: LD_INT 114
25051: PUSH
25052: LD_INT 116
25054: PUSH
25055: LD_INT 117
25057: PUSH
25058: LD_INT 118
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: ST_TO_ADDR
25084: GO 25483
25086: LD_INT 18
25088: DOUBLE
25089: EQUAL
25090: IFTRUE 25094
25092: GO 25242
25094: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25095: LD_ADDR_VAR 0 2
25099: PUSH
25100: LD_INT 2
25102: PUSH
25103: LD_INT 4
25105: PUSH
25106: LD_INT 5
25108: PUSH
25109: LD_INT 7
25111: PUSH
25112: LD_INT 11
25114: PUSH
25115: LD_INT 12
25117: PUSH
25118: LD_INT 15
25120: PUSH
25121: LD_INT 16
25123: PUSH
25124: LD_INT 20
25126: PUSH
25127: LD_INT 21
25129: PUSH
25130: LD_INT 22
25132: PUSH
25133: LD_INT 23
25135: PUSH
25136: LD_INT 25
25138: PUSH
25139: LD_INT 26
25141: PUSH
25142: LD_INT 30
25144: PUSH
25145: LD_INT 31
25147: PUSH
25148: LD_INT 32
25150: PUSH
25151: LD_INT 33
25153: PUSH
25154: LD_INT 34
25156: PUSH
25157: LD_INT 35
25159: PUSH
25160: LD_INT 36
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 101
25188: PUSH
25189: LD_INT 102
25191: PUSH
25192: LD_INT 103
25194: PUSH
25195: LD_INT 106
25197: PUSH
25198: LD_INT 108
25200: PUSH
25201: LD_INT 112
25203: PUSH
25204: LD_INT 113
25206: PUSH
25207: LD_INT 114
25209: PUSH
25210: LD_INT 115
25212: PUSH
25213: LD_INT 116
25215: PUSH
25216: LD_INT 117
25218: PUSH
25219: LD_INT 118
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: ST_TO_ADDR
25240: GO 25483
25242: LD_INT 19
25244: DOUBLE
25245: EQUAL
25246: IFTRUE 25250
25248: GO 25482
25250: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25251: LD_ADDR_VAR 0 2
25255: PUSH
25256: LD_INT 1
25258: PUSH
25259: LD_INT 2
25261: PUSH
25262: LD_INT 3
25264: PUSH
25265: LD_INT 4
25267: PUSH
25268: LD_INT 5
25270: PUSH
25271: LD_INT 6
25273: PUSH
25274: LD_INT 7
25276: PUSH
25277: LD_INT 8
25279: PUSH
25280: LD_INT 9
25282: PUSH
25283: LD_INT 10
25285: PUSH
25286: LD_INT 11
25288: PUSH
25289: LD_INT 12
25291: PUSH
25292: LD_INT 13
25294: PUSH
25295: LD_INT 14
25297: PUSH
25298: LD_INT 15
25300: PUSH
25301: LD_INT 16
25303: PUSH
25304: LD_INT 17
25306: PUSH
25307: LD_INT 18
25309: PUSH
25310: LD_INT 19
25312: PUSH
25313: LD_INT 20
25315: PUSH
25316: LD_INT 21
25318: PUSH
25319: LD_INT 22
25321: PUSH
25322: LD_INT 23
25324: PUSH
25325: LD_INT 24
25327: PUSH
25328: LD_INT 25
25330: PUSH
25331: LD_INT 26
25333: PUSH
25334: LD_INT 27
25336: PUSH
25337: LD_INT 28
25339: PUSH
25340: LD_INT 29
25342: PUSH
25343: LD_INT 30
25345: PUSH
25346: LD_INT 31
25348: PUSH
25349: LD_INT 32
25351: PUSH
25352: LD_INT 33
25354: PUSH
25355: LD_INT 34
25357: PUSH
25358: LD_INT 35
25360: PUSH
25361: LD_INT 36
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 101
25404: PUSH
25405: LD_INT 102
25407: PUSH
25408: LD_INT 103
25410: PUSH
25411: LD_INT 104
25413: PUSH
25414: LD_INT 105
25416: PUSH
25417: LD_INT 106
25419: PUSH
25420: LD_INT 107
25422: PUSH
25423: LD_INT 108
25425: PUSH
25426: LD_INT 109
25428: PUSH
25429: LD_INT 110
25431: PUSH
25432: LD_INT 111
25434: PUSH
25435: LD_INT 112
25437: PUSH
25438: LD_INT 113
25440: PUSH
25441: LD_INT 114
25443: PUSH
25444: LD_INT 115
25446: PUSH
25447: LD_INT 116
25449: PUSH
25450: LD_INT 117
25452: PUSH
25453: LD_INT 118
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: ST_TO_ADDR
25480: GO 25483
25482: POP
// end else
25483: GO 25714
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25485: LD_ADDR_VAR 0 2
25489: PUSH
25490: LD_INT 1
25492: PUSH
25493: LD_INT 2
25495: PUSH
25496: LD_INT 3
25498: PUSH
25499: LD_INT 4
25501: PUSH
25502: LD_INT 5
25504: PUSH
25505: LD_INT 6
25507: PUSH
25508: LD_INT 7
25510: PUSH
25511: LD_INT 8
25513: PUSH
25514: LD_INT 9
25516: PUSH
25517: LD_INT 10
25519: PUSH
25520: LD_INT 11
25522: PUSH
25523: LD_INT 12
25525: PUSH
25526: LD_INT 13
25528: PUSH
25529: LD_INT 14
25531: PUSH
25532: LD_INT 15
25534: PUSH
25535: LD_INT 16
25537: PUSH
25538: LD_INT 17
25540: PUSH
25541: LD_INT 18
25543: PUSH
25544: LD_INT 19
25546: PUSH
25547: LD_INT 20
25549: PUSH
25550: LD_INT 21
25552: PUSH
25553: LD_INT 22
25555: PUSH
25556: LD_INT 23
25558: PUSH
25559: LD_INT 24
25561: PUSH
25562: LD_INT 25
25564: PUSH
25565: LD_INT 26
25567: PUSH
25568: LD_INT 27
25570: PUSH
25571: LD_INT 28
25573: PUSH
25574: LD_INT 29
25576: PUSH
25577: LD_INT 30
25579: PUSH
25580: LD_INT 31
25582: PUSH
25583: LD_INT 32
25585: PUSH
25586: LD_INT 33
25588: PUSH
25589: LD_INT 34
25591: PUSH
25592: LD_INT 35
25594: PUSH
25595: LD_INT 36
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 101
25638: PUSH
25639: LD_INT 102
25641: PUSH
25642: LD_INT 103
25644: PUSH
25645: LD_INT 104
25647: PUSH
25648: LD_INT 105
25650: PUSH
25651: LD_INT 106
25653: PUSH
25654: LD_INT 107
25656: PUSH
25657: LD_INT 108
25659: PUSH
25660: LD_INT 109
25662: PUSH
25663: LD_INT 110
25665: PUSH
25666: LD_INT 111
25668: PUSH
25669: LD_INT 112
25671: PUSH
25672: LD_INT 113
25674: PUSH
25675: LD_INT 114
25677: PUSH
25678: LD_INT 115
25680: PUSH
25681: LD_INT 116
25683: PUSH
25684: LD_INT 117
25686: PUSH
25687: LD_INT 118
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: ST_TO_ADDR
// if result then
25714: LD_VAR 0 2
25718: IFFALSE 26504
// begin normal :=  ;
25720: LD_ADDR_VAR 0 5
25724: PUSH
25725: LD_STRING 
25727: ST_TO_ADDR
// hardcore :=  ;
25728: LD_ADDR_VAR 0 6
25732: PUSH
25733: LD_STRING 
25735: ST_TO_ADDR
// active :=  ;
25736: LD_ADDR_VAR 0 7
25740: PUSH
25741: LD_STRING 
25743: ST_TO_ADDR
// for i = 1 to normalCounter do
25744: LD_ADDR_VAR 0 8
25748: PUSH
25749: DOUBLE
25750: LD_INT 1
25752: DEC
25753: ST_TO_ADDR
25754: LD_EXP 39
25758: PUSH
25759: FOR_TO
25760: IFFALSE 25861
// begin tmp := 0 ;
25762: LD_ADDR_VAR 0 3
25766: PUSH
25767: LD_STRING 0
25769: ST_TO_ADDR
// if result [ 1 ] then
25770: LD_VAR 0 2
25774: PUSH
25775: LD_INT 1
25777: ARRAY
25778: IFFALSE 25843
// if result [ 1 ] [ 1 ] = i then
25780: LD_VAR 0 2
25784: PUSH
25785: LD_INT 1
25787: ARRAY
25788: PUSH
25789: LD_INT 1
25791: ARRAY
25792: PUSH
25793: LD_VAR 0 8
25797: EQUAL
25798: IFFALSE 25843
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25800: LD_ADDR_VAR 0 2
25804: PUSH
25805: LD_VAR 0 2
25809: PPUSH
25810: LD_INT 1
25812: PPUSH
25813: LD_VAR 0 2
25817: PUSH
25818: LD_INT 1
25820: ARRAY
25821: PPUSH
25822: LD_INT 1
25824: PPUSH
25825: CALL_OW 3
25829: PPUSH
25830: CALL_OW 1
25834: ST_TO_ADDR
// tmp := 1 ;
25835: LD_ADDR_VAR 0 3
25839: PUSH
25840: LD_STRING 1
25842: ST_TO_ADDR
// end ; normal := normal & tmp ;
25843: LD_ADDR_VAR 0 5
25847: PUSH
25848: LD_VAR 0 5
25852: PUSH
25853: LD_VAR 0 3
25857: STR
25858: ST_TO_ADDR
// end ;
25859: GO 25759
25861: POP
25862: POP
// for i = 1 to hardcoreCounter do
25863: LD_ADDR_VAR 0 8
25867: PUSH
25868: DOUBLE
25869: LD_INT 1
25871: DEC
25872: ST_TO_ADDR
25873: LD_EXP 40
25877: PUSH
25878: FOR_TO
25879: IFFALSE 25984
// begin tmp := 0 ;
25881: LD_ADDR_VAR 0 3
25885: PUSH
25886: LD_STRING 0
25888: ST_TO_ADDR
// if result [ 2 ] then
25889: LD_VAR 0 2
25893: PUSH
25894: LD_INT 2
25896: ARRAY
25897: IFFALSE 25966
// if result [ 2 ] [ 1 ] = 100 + i then
25899: LD_VAR 0 2
25903: PUSH
25904: LD_INT 2
25906: ARRAY
25907: PUSH
25908: LD_INT 1
25910: ARRAY
25911: PUSH
25912: LD_INT 100
25914: PUSH
25915: LD_VAR 0 8
25919: PLUS
25920: EQUAL
25921: IFFALSE 25966
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25923: LD_ADDR_VAR 0 2
25927: PUSH
25928: LD_VAR 0 2
25932: PPUSH
25933: LD_INT 2
25935: PPUSH
25936: LD_VAR 0 2
25940: PUSH
25941: LD_INT 2
25943: ARRAY
25944: PPUSH
25945: LD_INT 1
25947: PPUSH
25948: CALL_OW 3
25952: PPUSH
25953: CALL_OW 1
25957: ST_TO_ADDR
// tmp := 1 ;
25958: LD_ADDR_VAR 0 3
25962: PUSH
25963: LD_STRING 1
25965: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25966: LD_ADDR_VAR 0 6
25970: PUSH
25971: LD_VAR 0 6
25975: PUSH
25976: LD_VAR 0 3
25980: STR
25981: ST_TO_ADDR
// end ;
25982: GO 25878
25984: POP
25985: POP
// if isGameLoad then
25986: LD_VAR 0 1
25990: IFFALSE 26465
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25992: LD_ADDR_VAR 0 4
25996: PUSH
25997: LD_EXP 43
26001: PUSH
26002: LD_EXP 42
26006: PUSH
26007: LD_EXP 44
26011: PUSH
26012: LD_EXP 41
26016: PUSH
26017: LD_EXP 45
26021: PUSH
26022: LD_EXP 46
26026: PUSH
26027: LD_EXP 47
26031: PUSH
26032: LD_EXP 48
26036: PUSH
26037: LD_EXP 49
26041: PUSH
26042: LD_EXP 50
26046: PUSH
26047: LD_EXP 51
26051: PUSH
26052: LD_EXP 52
26056: PUSH
26057: LD_EXP 53
26061: PUSH
26062: LD_EXP 54
26066: PUSH
26067: LD_EXP 62
26071: PUSH
26072: LD_EXP 63
26076: PUSH
26077: LD_EXP 64
26081: PUSH
26082: LD_EXP 65
26086: PUSH
26087: LD_EXP 67
26091: PUSH
26092: LD_EXP 68
26096: PUSH
26097: LD_EXP 69
26101: PUSH
26102: LD_EXP 72
26106: PUSH
26107: LD_EXP 74
26111: PUSH
26112: LD_EXP 75
26116: PUSH
26117: LD_EXP 76
26121: PUSH
26122: LD_EXP 78
26126: PUSH
26127: LD_EXP 79
26131: PUSH
26132: LD_EXP 82
26136: PUSH
26137: LD_EXP 83
26141: PUSH
26142: LD_EXP 84
26146: PUSH
26147: LD_EXP 85
26151: PUSH
26152: LD_EXP 86
26156: PUSH
26157: LD_EXP 87
26161: PUSH
26162: LD_EXP 88
26166: PUSH
26167: LD_EXP 89
26171: PUSH
26172: LD_EXP 90
26176: PUSH
26177: LD_EXP 55
26181: PUSH
26182: LD_EXP 56
26186: PUSH
26187: LD_EXP 59
26191: PUSH
26192: LD_EXP 60
26196: PUSH
26197: LD_EXP 61
26201: PUSH
26202: LD_EXP 57
26206: PUSH
26207: LD_EXP 58
26211: PUSH
26212: LD_EXP 66
26216: PUSH
26217: LD_EXP 70
26221: PUSH
26222: LD_EXP 71
26226: PUSH
26227: LD_EXP 73
26231: PUSH
26232: LD_EXP 77
26236: PUSH
26237: LD_EXP 80
26241: PUSH
26242: LD_EXP 81
26246: PUSH
26247: LD_EXP 91
26251: PUSH
26252: LD_EXP 92
26256: PUSH
26257: LD_EXP 93
26261: PUSH
26262: LD_EXP 94
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: ST_TO_ADDR
// tmp :=  ;
26323: LD_ADDR_VAR 0 3
26327: PUSH
26328: LD_STRING 
26330: ST_TO_ADDR
// for i = 1 to normalCounter do
26331: LD_ADDR_VAR 0 8
26335: PUSH
26336: DOUBLE
26337: LD_INT 1
26339: DEC
26340: ST_TO_ADDR
26341: LD_EXP 39
26345: PUSH
26346: FOR_TO
26347: IFFALSE 26383
// begin if flags [ i ] then
26349: LD_VAR 0 4
26353: PUSH
26354: LD_VAR 0 8
26358: ARRAY
26359: IFFALSE 26381
// tmp := tmp & i & ; ;
26361: LD_ADDR_VAR 0 3
26365: PUSH
26366: LD_VAR 0 3
26370: PUSH
26371: LD_VAR 0 8
26375: STR
26376: PUSH
26377: LD_STRING ;
26379: STR
26380: ST_TO_ADDR
// end ;
26381: GO 26346
26383: POP
26384: POP
// for i = 1 to hardcoreCounter do
26385: LD_ADDR_VAR 0 8
26389: PUSH
26390: DOUBLE
26391: LD_INT 1
26393: DEC
26394: ST_TO_ADDR
26395: LD_EXP 40
26399: PUSH
26400: FOR_TO
26401: IFFALSE 26447
// begin if flags [ normalCounter + i ] then
26403: LD_VAR 0 4
26407: PUSH
26408: LD_EXP 39
26412: PUSH
26413: LD_VAR 0 8
26417: PLUS
26418: ARRAY
26419: IFFALSE 26445
// tmp := tmp & ( 100 + i ) & ; ;
26421: LD_ADDR_VAR 0 3
26425: PUSH
26426: LD_VAR 0 3
26430: PUSH
26431: LD_INT 100
26433: PUSH
26434: LD_VAR 0 8
26438: PLUS
26439: STR
26440: PUSH
26441: LD_STRING ;
26443: STR
26444: ST_TO_ADDR
// end ;
26445: GO 26400
26447: POP
26448: POP
// if tmp then
26449: LD_VAR 0 3
26453: IFFALSE 26465
// active := tmp ;
26455: LD_ADDR_VAR 0 7
26459: PUSH
26460: LD_VAR 0 3
26464: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26465: LD_STRING getStreamItemsFromMission("
26467: PUSH
26468: LD_VAR 0 5
26472: STR
26473: PUSH
26474: LD_STRING ","
26476: STR
26477: PUSH
26478: LD_VAR 0 6
26482: STR
26483: PUSH
26484: LD_STRING ","
26486: STR
26487: PUSH
26488: LD_VAR 0 7
26492: STR
26493: PUSH
26494: LD_STRING ")
26496: STR
26497: PPUSH
26498: CALL_OW 559
// end else
26502: GO 26511
// ToLua ( getStreamItemsFromMission("","","") ) ;
26504: LD_STRING getStreamItemsFromMission("","","")
26506: PPUSH
26507: CALL_OW 559
// end ;
26511: LD_VAR 0 2
26515: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26516: LD_EXP 38
26520: PUSH
26521: LD_EXP 43
26525: AND
26526: IFFALSE 26650
26528: GO 26530
26530: DISABLE
26531: LD_INT 0
26533: PPUSH
26534: PPUSH
// begin enable ;
26535: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26536: LD_ADDR_VAR 0 2
26540: PUSH
26541: LD_INT 22
26543: PUSH
26544: LD_OWVAR 2
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 2
26555: PUSH
26556: LD_INT 34
26558: PUSH
26559: LD_INT 7
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 34
26568: PUSH
26569: LD_INT 45
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 34
26578: PUSH
26579: LD_INT 28
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 34
26588: PUSH
26589: LD_INT 47
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PPUSH
26607: CALL_OW 69
26611: ST_TO_ADDR
// if not tmp then
26612: LD_VAR 0 2
26616: NOT
26617: IFFALSE 26621
// exit ;
26619: GO 26650
// for i in tmp do
26621: LD_ADDR_VAR 0 1
26625: PUSH
26626: LD_VAR 0 2
26630: PUSH
26631: FOR_IN
26632: IFFALSE 26648
// begin SetLives ( i , 0 ) ;
26634: LD_VAR 0 1
26638: PPUSH
26639: LD_INT 0
26641: PPUSH
26642: CALL_OW 234
// end ;
26646: GO 26631
26648: POP
26649: POP
// end ;
26650: PPOPN 2
26652: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26653: LD_EXP 38
26657: PUSH
26658: LD_EXP 44
26662: AND
26663: IFFALSE 26747
26665: GO 26667
26667: DISABLE
26668: LD_INT 0
26670: PPUSH
26671: PPUSH
// begin enable ;
26672: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26673: LD_ADDR_VAR 0 2
26677: PUSH
26678: LD_INT 22
26680: PUSH
26681: LD_OWVAR 2
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 32
26692: PUSH
26693: LD_INT 3
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PPUSH
26704: CALL_OW 69
26708: ST_TO_ADDR
// if not tmp then
26709: LD_VAR 0 2
26713: NOT
26714: IFFALSE 26718
// exit ;
26716: GO 26747
// for i in tmp do
26718: LD_ADDR_VAR 0 1
26722: PUSH
26723: LD_VAR 0 2
26727: PUSH
26728: FOR_IN
26729: IFFALSE 26745
// begin SetLives ( i , 0 ) ;
26731: LD_VAR 0 1
26735: PPUSH
26736: LD_INT 0
26738: PPUSH
26739: CALL_OW 234
// end ;
26743: GO 26728
26745: POP
26746: POP
// end ;
26747: PPOPN 2
26749: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26750: LD_EXP 38
26754: PUSH
26755: LD_EXP 41
26759: AND
26760: IFFALSE 26853
26762: GO 26764
26764: DISABLE
26765: LD_INT 0
26767: PPUSH
// begin enable ;
26768: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26769: LD_ADDR_VAR 0 1
26773: PUSH
26774: LD_INT 22
26776: PUSH
26777: LD_OWVAR 2
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 2
26788: PUSH
26789: LD_INT 25
26791: PUSH
26792: LD_INT 5
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 25
26801: PUSH
26802: LD_INT 9
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 25
26811: PUSH
26812: LD_INT 8
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PPUSH
26829: CALL_OW 69
26833: PUSH
26834: FOR_IN
26835: IFFALSE 26851
// begin SetClass ( i , 1 ) ;
26837: LD_VAR 0 1
26841: PPUSH
26842: LD_INT 1
26844: PPUSH
26845: CALL_OW 336
// end ;
26849: GO 26834
26851: POP
26852: POP
// end ;
26853: PPOPN 1
26855: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26856: LD_EXP 38
26860: PUSH
26861: LD_EXP 42
26865: AND
26866: PUSH
26867: LD_OWVAR 65
26871: PUSH
26872: LD_INT 7
26874: LESS
26875: AND
26876: IFFALSE 26890
26878: GO 26880
26880: DISABLE
// begin enable ;
26881: ENABLE
// game_speed := 7 ;
26882: LD_ADDR_OWVAR 65
26886: PUSH
26887: LD_INT 7
26889: ST_TO_ADDR
// end ;
26890: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26891: LD_EXP 38
26895: PUSH
26896: LD_EXP 45
26900: AND
26901: IFFALSE 27103
26903: GO 26905
26905: DISABLE
26906: LD_INT 0
26908: PPUSH
26909: PPUSH
26910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26911: LD_ADDR_VAR 0 3
26915: PUSH
26916: LD_INT 81
26918: PUSH
26919: LD_OWVAR 2
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 21
26930: PUSH
26931: LD_INT 1
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PPUSH
26942: CALL_OW 69
26946: ST_TO_ADDR
// if not tmp then
26947: LD_VAR 0 3
26951: NOT
26952: IFFALSE 26956
// exit ;
26954: GO 27103
// if tmp > 5 then
26956: LD_VAR 0 3
26960: PUSH
26961: LD_INT 5
26963: GREATER
26964: IFFALSE 26976
// k := 5 else
26966: LD_ADDR_VAR 0 2
26970: PUSH
26971: LD_INT 5
26973: ST_TO_ADDR
26974: GO 26986
// k := tmp ;
26976: LD_ADDR_VAR 0 2
26980: PUSH
26981: LD_VAR 0 3
26985: ST_TO_ADDR
// for i := 1 to k do
26986: LD_ADDR_VAR 0 1
26990: PUSH
26991: DOUBLE
26992: LD_INT 1
26994: DEC
26995: ST_TO_ADDR
26996: LD_VAR 0 2
27000: PUSH
27001: FOR_TO
27002: IFFALSE 27101
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27004: LD_VAR 0 3
27008: PUSH
27009: LD_VAR 0 1
27013: ARRAY
27014: PPUSH
27015: LD_VAR 0 1
27019: PUSH
27020: LD_INT 4
27022: MOD
27023: PUSH
27024: LD_INT 1
27026: PLUS
27027: PPUSH
27028: CALL_OW 259
27032: PUSH
27033: LD_INT 10
27035: LESS
27036: IFFALSE 27099
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27038: LD_VAR 0 3
27042: PUSH
27043: LD_VAR 0 1
27047: ARRAY
27048: PPUSH
27049: LD_VAR 0 1
27053: PUSH
27054: LD_INT 4
27056: MOD
27057: PUSH
27058: LD_INT 1
27060: PLUS
27061: PPUSH
27062: LD_VAR 0 3
27066: PUSH
27067: LD_VAR 0 1
27071: ARRAY
27072: PPUSH
27073: LD_VAR 0 1
27077: PUSH
27078: LD_INT 4
27080: MOD
27081: PUSH
27082: LD_INT 1
27084: PLUS
27085: PPUSH
27086: CALL_OW 259
27090: PUSH
27091: LD_INT 1
27093: PLUS
27094: PPUSH
27095: CALL_OW 237
27099: GO 27001
27101: POP
27102: POP
// end ;
27103: PPOPN 3
27105: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27106: LD_EXP 38
27110: PUSH
27111: LD_EXP 46
27115: AND
27116: IFFALSE 27136
27118: GO 27120
27120: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27121: LD_INT 4
27123: PPUSH
27124: LD_OWVAR 2
27128: PPUSH
27129: LD_INT 0
27131: PPUSH
27132: CALL_OW 324
27136: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27137: LD_EXP 38
27141: PUSH
27142: LD_EXP 75
27146: AND
27147: IFFALSE 27167
27149: GO 27151
27151: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27152: LD_INT 19
27154: PPUSH
27155: LD_OWVAR 2
27159: PPUSH
27160: LD_INT 0
27162: PPUSH
27163: CALL_OW 324
27167: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27168: LD_EXP 38
27172: PUSH
27173: LD_EXP 47
27177: AND
27178: IFFALSE 27280
27180: GO 27182
27182: DISABLE
27183: LD_INT 0
27185: PPUSH
27186: PPUSH
// begin enable ;
27187: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27188: LD_ADDR_VAR 0 2
27192: PUSH
27193: LD_INT 22
27195: PUSH
27196: LD_OWVAR 2
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 2
27207: PUSH
27208: LD_INT 34
27210: PUSH
27211: LD_INT 11
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 34
27220: PUSH
27221: LD_INT 30
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: LIST
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PPUSH
27237: CALL_OW 69
27241: ST_TO_ADDR
// if not tmp then
27242: LD_VAR 0 2
27246: NOT
27247: IFFALSE 27251
// exit ;
27249: GO 27280
// for i in tmp do
27251: LD_ADDR_VAR 0 1
27255: PUSH
27256: LD_VAR 0 2
27260: PUSH
27261: FOR_IN
27262: IFFALSE 27278
// begin SetLives ( i , 0 ) ;
27264: LD_VAR 0 1
27268: PPUSH
27269: LD_INT 0
27271: PPUSH
27272: CALL_OW 234
// end ;
27276: GO 27261
27278: POP
27279: POP
// end ;
27280: PPOPN 2
27282: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27283: LD_EXP 38
27287: PUSH
27288: LD_EXP 48
27292: AND
27293: IFFALSE 27313
27295: GO 27297
27297: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27298: LD_INT 32
27300: PPUSH
27301: LD_OWVAR 2
27305: PPUSH
27306: LD_INT 0
27308: PPUSH
27309: CALL_OW 324
27313: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27314: LD_EXP 38
27318: PUSH
27319: LD_EXP 49
27323: AND
27324: IFFALSE 27505
27326: GO 27328
27328: DISABLE
27329: LD_INT 0
27331: PPUSH
27332: PPUSH
27333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27334: LD_ADDR_VAR 0 2
27338: PUSH
27339: LD_INT 22
27341: PUSH
27342: LD_OWVAR 2
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 33
27353: PUSH
27354: LD_INT 3
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PPUSH
27365: CALL_OW 69
27369: ST_TO_ADDR
// if not tmp then
27370: LD_VAR 0 2
27374: NOT
27375: IFFALSE 27379
// exit ;
27377: GO 27505
// side := 0 ;
27379: LD_ADDR_VAR 0 3
27383: PUSH
27384: LD_INT 0
27386: ST_TO_ADDR
// for i := 1 to 8 do
27387: LD_ADDR_VAR 0 1
27391: PUSH
27392: DOUBLE
27393: LD_INT 1
27395: DEC
27396: ST_TO_ADDR
27397: LD_INT 8
27399: PUSH
27400: FOR_TO
27401: IFFALSE 27449
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27403: LD_OWVAR 2
27407: PUSH
27408: LD_VAR 0 1
27412: NONEQUAL
27413: PUSH
27414: LD_OWVAR 2
27418: PPUSH
27419: LD_VAR 0 1
27423: PPUSH
27424: CALL_OW 81
27428: PUSH
27429: LD_INT 2
27431: EQUAL
27432: AND
27433: IFFALSE 27447
// begin side := i ;
27435: LD_ADDR_VAR 0 3
27439: PUSH
27440: LD_VAR 0 1
27444: ST_TO_ADDR
// break ;
27445: GO 27449
// end ;
27447: GO 27400
27449: POP
27450: POP
// if not side then
27451: LD_VAR 0 3
27455: NOT
27456: IFFALSE 27460
// exit ;
27458: GO 27505
// for i := 1 to tmp do
27460: LD_ADDR_VAR 0 1
27464: PUSH
27465: DOUBLE
27466: LD_INT 1
27468: DEC
27469: ST_TO_ADDR
27470: LD_VAR 0 2
27474: PUSH
27475: FOR_TO
27476: IFFALSE 27503
// if Prob ( 60 ) then
27478: LD_INT 60
27480: PPUSH
27481: CALL_OW 13
27485: IFFALSE 27501
// SetSide ( i , side ) ;
27487: LD_VAR 0 1
27491: PPUSH
27492: LD_VAR 0 3
27496: PPUSH
27497: CALL_OW 235
27501: GO 27475
27503: POP
27504: POP
// end ;
27505: PPOPN 3
27507: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27508: LD_EXP 38
27512: PUSH
27513: LD_EXP 51
27517: AND
27518: IFFALSE 27637
27520: GO 27522
27522: DISABLE
27523: LD_INT 0
27525: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27526: LD_ADDR_VAR 0 1
27530: PUSH
27531: LD_INT 22
27533: PUSH
27534: LD_OWVAR 2
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 21
27545: PUSH
27546: LD_INT 1
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 3
27555: PUSH
27556: LD_INT 23
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: LIST
27574: PPUSH
27575: CALL_OW 69
27579: PUSH
27580: FOR_IN
27581: IFFALSE 27635
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27583: LD_VAR 0 1
27587: PPUSH
27588: CALL_OW 257
27592: PUSH
27593: LD_INT 1
27595: PUSH
27596: LD_INT 2
27598: PUSH
27599: LD_INT 3
27601: PUSH
27602: LD_INT 4
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: IN
27611: IFFALSE 27633
// SetClass ( un , rand ( 1 , 4 ) ) ;
27613: LD_VAR 0 1
27617: PPUSH
27618: LD_INT 1
27620: PPUSH
27621: LD_INT 4
27623: PPUSH
27624: CALL_OW 12
27628: PPUSH
27629: CALL_OW 336
27633: GO 27580
27635: POP
27636: POP
// end ;
27637: PPOPN 1
27639: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27640: LD_EXP 38
27644: PUSH
27645: LD_EXP 50
27649: AND
27650: IFFALSE 27729
27652: GO 27654
27654: DISABLE
27655: LD_INT 0
27657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27658: LD_ADDR_VAR 0 1
27662: PUSH
27663: LD_INT 22
27665: PUSH
27666: LD_OWVAR 2
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 21
27677: PUSH
27678: LD_INT 3
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PPUSH
27689: CALL_OW 69
27693: ST_TO_ADDR
// if not tmp then
27694: LD_VAR 0 1
27698: NOT
27699: IFFALSE 27703
// exit ;
27701: GO 27729
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27703: LD_VAR 0 1
27707: PUSH
27708: LD_INT 1
27710: PPUSH
27711: LD_VAR 0 1
27715: PPUSH
27716: CALL_OW 12
27720: ARRAY
27721: PPUSH
27722: LD_INT 100
27724: PPUSH
27725: CALL_OW 234
// end ;
27729: PPOPN 1
27731: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27732: LD_EXP 38
27736: PUSH
27737: LD_EXP 52
27741: AND
27742: IFFALSE 27840
27744: GO 27746
27746: DISABLE
27747: LD_INT 0
27749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27750: LD_ADDR_VAR 0 1
27754: PUSH
27755: LD_INT 22
27757: PUSH
27758: LD_OWVAR 2
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 21
27769: PUSH
27770: LD_INT 1
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PPUSH
27781: CALL_OW 69
27785: ST_TO_ADDR
// if not tmp then
27786: LD_VAR 0 1
27790: NOT
27791: IFFALSE 27795
// exit ;
27793: GO 27840
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27795: LD_VAR 0 1
27799: PUSH
27800: LD_INT 1
27802: PPUSH
27803: LD_VAR 0 1
27807: PPUSH
27808: CALL_OW 12
27812: ARRAY
27813: PPUSH
27814: LD_INT 1
27816: PPUSH
27817: LD_INT 4
27819: PPUSH
27820: CALL_OW 12
27824: PPUSH
27825: LD_INT 3000
27827: PPUSH
27828: LD_INT 9000
27830: PPUSH
27831: CALL_OW 12
27835: PPUSH
27836: CALL_OW 492
// end ;
27840: PPOPN 1
27842: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27843: LD_EXP 38
27847: PUSH
27848: LD_EXP 53
27852: AND
27853: IFFALSE 27873
27855: GO 27857
27857: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27858: LD_INT 1
27860: PPUSH
27861: LD_OWVAR 2
27865: PPUSH
27866: LD_INT 0
27868: PPUSH
27869: CALL_OW 324
27873: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27874: LD_EXP 38
27878: PUSH
27879: LD_EXP 54
27883: AND
27884: IFFALSE 27967
27886: GO 27888
27888: DISABLE
27889: LD_INT 0
27891: PPUSH
27892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27893: LD_ADDR_VAR 0 2
27897: PUSH
27898: LD_INT 22
27900: PUSH
27901: LD_OWVAR 2
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 21
27912: PUSH
27913: LD_INT 3
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PPUSH
27924: CALL_OW 69
27928: ST_TO_ADDR
// if not tmp then
27929: LD_VAR 0 2
27933: NOT
27934: IFFALSE 27938
// exit ;
27936: GO 27967
// for i in tmp do
27938: LD_ADDR_VAR 0 1
27942: PUSH
27943: LD_VAR 0 2
27947: PUSH
27948: FOR_IN
27949: IFFALSE 27965
// SetBLevel ( i , 10 ) ;
27951: LD_VAR 0 1
27955: PPUSH
27956: LD_INT 10
27958: PPUSH
27959: CALL_OW 241
27963: GO 27948
27965: POP
27966: POP
// end ;
27967: PPOPN 2
27969: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27970: LD_EXP 38
27974: PUSH
27975: LD_EXP 55
27979: AND
27980: IFFALSE 28091
27982: GO 27984
27984: DISABLE
27985: LD_INT 0
27987: PPUSH
27988: PPUSH
27989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27990: LD_ADDR_VAR 0 3
27994: PUSH
27995: LD_INT 22
27997: PUSH
27998: LD_OWVAR 2
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 25
28009: PUSH
28010: LD_INT 1
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PPUSH
28021: CALL_OW 69
28025: ST_TO_ADDR
// if not tmp then
28026: LD_VAR 0 3
28030: NOT
28031: IFFALSE 28035
// exit ;
28033: GO 28091
// un := tmp [ rand ( 1 , tmp ) ] ;
28035: LD_ADDR_VAR 0 2
28039: PUSH
28040: LD_VAR 0 3
28044: PUSH
28045: LD_INT 1
28047: PPUSH
28048: LD_VAR 0 3
28052: PPUSH
28053: CALL_OW 12
28057: ARRAY
28058: ST_TO_ADDR
// if Crawls ( un ) then
28059: LD_VAR 0 2
28063: PPUSH
28064: CALL_OW 318
28068: IFFALSE 28079
// ComWalk ( un ) ;
28070: LD_VAR 0 2
28074: PPUSH
28075: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28079: LD_VAR 0 2
28083: PPUSH
28084: LD_INT 5
28086: PPUSH
28087: CALL_OW 336
// end ;
28091: PPOPN 3
28093: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28094: LD_EXP 38
28098: PUSH
28099: LD_EXP 56
28103: AND
28104: PUSH
28105: LD_OWVAR 67
28109: PUSH
28110: LD_INT 4
28112: LESS
28113: AND
28114: IFFALSE 28133
28116: GO 28118
28118: DISABLE
// begin Difficulty := Difficulty + 1 ;
28119: LD_ADDR_OWVAR 67
28123: PUSH
28124: LD_OWVAR 67
28128: PUSH
28129: LD_INT 1
28131: PLUS
28132: ST_TO_ADDR
// end ;
28133: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28134: LD_EXP 38
28138: PUSH
28139: LD_EXP 57
28143: AND
28144: IFFALSE 28247
28146: GO 28148
28148: DISABLE
28149: LD_INT 0
28151: PPUSH
// begin for i := 1 to 5 do
28152: LD_ADDR_VAR 0 1
28156: PUSH
28157: DOUBLE
28158: LD_INT 1
28160: DEC
28161: ST_TO_ADDR
28162: LD_INT 5
28164: PUSH
28165: FOR_TO
28166: IFFALSE 28245
// begin uc_nation := nation_nature ;
28168: LD_ADDR_OWVAR 21
28172: PUSH
28173: LD_INT 0
28175: ST_TO_ADDR
// uc_side := 0 ;
28176: LD_ADDR_OWVAR 20
28180: PUSH
28181: LD_INT 0
28183: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28184: LD_ADDR_OWVAR 29
28188: PUSH
28189: LD_INT 12
28191: PUSH
28192: LD_INT 12
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: ST_TO_ADDR
// hc_agressivity := 20 ;
28199: LD_ADDR_OWVAR 35
28203: PUSH
28204: LD_INT 20
28206: ST_TO_ADDR
// hc_class := class_tiger ;
28207: LD_ADDR_OWVAR 28
28211: PUSH
28212: LD_INT 14
28214: ST_TO_ADDR
// hc_gallery :=  ;
28215: LD_ADDR_OWVAR 33
28219: PUSH
28220: LD_STRING 
28222: ST_TO_ADDR
// hc_name :=  ;
28223: LD_ADDR_OWVAR 26
28227: PUSH
28228: LD_STRING 
28230: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28231: CALL_OW 44
28235: PPUSH
28236: LD_INT 0
28238: PPUSH
28239: CALL_OW 51
// end ;
28243: GO 28165
28245: POP
28246: POP
// end ;
28247: PPOPN 1
28249: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28250: LD_EXP 38
28254: PUSH
28255: LD_EXP 58
28259: AND
28260: IFFALSE 28269
28262: GO 28264
28264: DISABLE
// StreamSibBomb ;
28265: CALL 28270 0 0
28269: END
// export function StreamSibBomb ; var i , x , y ; begin
28270: LD_INT 0
28272: PPUSH
28273: PPUSH
28274: PPUSH
28275: PPUSH
// result := false ;
28276: LD_ADDR_VAR 0 1
28280: PUSH
28281: LD_INT 0
28283: ST_TO_ADDR
// for i := 1 to 16 do
28284: LD_ADDR_VAR 0 2
28288: PUSH
28289: DOUBLE
28290: LD_INT 1
28292: DEC
28293: ST_TO_ADDR
28294: LD_INT 16
28296: PUSH
28297: FOR_TO
28298: IFFALSE 28497
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28300: LD_ADDR_VAR 0 3
28304: PUSH
28305: LD_INT 10
28307: PUSH
28308: LD_INT 20
28310: PUSH
28311: LD_INT 30
28313: PUSH
28314: LD_INT 40
28316: PUSH
28317: LD_INT 50
28319: PUSH
28320: LD_INT 60
28322: PUSH
28323: LD_INT 70
28325: PUSH
28326: LD_INT 80
28328: PUSH
28329: LD_INT 90
28331: PUSH
28332: LD_INT 100
28334: PUSH
28335: LD_INT 110
28337: PUSH
28338: LD_INT 120
28340: PUSH
28341: LD_INT 130
28343: PUSH
28344: LD_INT 140
28346: PUSH
28347: LD_INT 150
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 1
28369: PPUSH
28370: LD_INT 15
28372: PPUSH
28373: CALL_OW 12
28377: ARRAY
28378: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28379: LD_ADDR_VAR 0 4
28383: PUSH
28384: LD_INT 10
28386: PUSH
28387: LD_INT 20
28389: PUSH
28390: LD_INT 30
28392: PUSH
28393: LD_INT 40
28395: PUSH
28396: LD_INT 50
28398: PUSH
28399: LD_INT 60
28401: PUSH
28402: LD_INT 70
28404: PUSH
28405: LD_INT 80
28407: PUSH
28408: LD_INT 90
28410: PUSH
28411: LD_INT 100
28413: PUSH
28414: LD_INT 110
28416: PUSH
28417: LD_INT 120
28419: PUSH
28420: LD_INT 130
28422: PUSH
28423: LD_INT 140
28425: PUSH
28426: LD_INT 150
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 1
28448: PPUSH
28449: LD_INT 15
28451: PPUSH
28452: CALL_OW 12
28456: ARRAY
28457: ST_TO_ADDR
// if ValidHex ( x , y ) then
28458: LD_VAR 0 3
28462: PPUSH
28463: LD_VAR 0 4
28467: PPUSH
28468: CALL_OW 488
28472: IFFALSE 28495
// begin result := [ x , y ] ;
28474: LD_ADDR_VAR 0 1
28478: PUSH
28479: LD_VAR 0 3
28483: PUSH
28484: LD_VAR 0 4
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: ST_TO_ADDR
// break ;
28493: GO 28497
// end ; end ;
28495: GO 28297
28497: POP
28498: POP
// if result then
28499: LD_VAR 0 1
28503: IFFALSE 28563
// begin ToLua ( playSibBomb() ) ;
28505: LD_STRING playSibBomb()
28507: PPUSH
28508: CALL_OW 559
// wait ( 0 0$14 ) ;
28512: LD_INT 490
28514: PPUSH
28515: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28519: LD_VAR 0 1
28523: PUSH
28524: LD_INT 1
28526: ARRAY
28527: PPUSH
28528: LD_VAR 0 1
28532: PUSH
28533: LD_INT 2
28535: ARRAY
28536: PPUSH
28537: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28541: LD_VAR 0 1
28545: PUSH
28546: LD_INT 1
28548: ARRAY
28549: PPUSH
28550: LD_VAR 0 1
28554: PUSH
28555: LD_INT 2
28557: ARRAY
28558: PPUSH
28559: CALL_OW 429
// end ; end ;
28563: LD_VAR 0 1
28567: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28568: LD_EXP 38
28572: PUSH
28573: LD_EXP 60
28577: AND
28578: IFFALSE 28590
28580: GO 28582
28582: DISABLE
// YouLost (  ) ;
28583: LD_STRING 
28585: PPUSH
28586: CALL_OW 104
28590: END
// every 0 0$1 trigger StreamModeActive and sFog do
28591: LD_EXP 38
28595: PUSH
28596: LD_EXP 59
28600: AND
28601: IFFALSE 28615
28603: GO 28605
28605: DISABLE
// FogOff ( your_side ) ;
28606: LD_OWVAR 2
28610: PPUSH
28611: CALL_OW 344
28615: END
// every 0 0$1 trigger StreamModeActive and sSun do
28616: LD_EXP 38
28620: PUSH
28621: LD_EXP 61
28625: AND
28626: IFFALSE 28654
28628: GO 28630
28630: DISABLE
// begin solar_recharge_percent := 0 ;
28631: LD_ADDR_OWVAR 79
28635: PUSH
28636: LD_INT 0
28638: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28639: LD_INT 10500
28641: PPUSH
28642: CALL_OW 67
// solar_recharge_percent := 100 ;
28646: LD_ADDR_OWVAR 79
28650: PUSH
28651: LD_INT 100
28653: ST_TO_ADDR
// end ;
28654: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28655: LD_EXP 38
28659: PUSH
28660: LD_EXP 62
28664: AND
28665: IFFALSE 28904
28667: GO 28669
28669: DISABLE
28670: LD_INT 0
28672: PPUSH
28673: PPUSH
28674: PPUSH
// begin tmp := [ ] ;
28675: LD_ADDR_VAR 0 3
28679: PUSH
28680: EMPTY
28681: ST_TO_ADDR
// for i := 1 to 6 do
28682: LD_ADDR_VAR 0 1
28686: PUSH
28687: DOUBLE
28688: LD_INT 1
28690: DEC
28691: ST_TO_ADDR
28692: LD_INT 6
28694: PUSH
28695: FOR_TO
28696: IFFALSE 28801
// begin uc_nation := nation_nature ;
28698: LD_ADDR_OWVAR 21
28702: PUSH
28703: LD_INT 0
28705: ST_TO_ADDR
// uc_side := 0 ;
28706: LD_ADDR_OWVAR 20
28710: PUSH
28711: LD_INT 0
28713: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28714: LD_ADDR_OWVAR 29
28718: PUSH
28719: LD_INT 12
28721: PUSH
28722: LD_INT 12
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: ST_TO_ADDR
// hc_agressivity := 20 ;
28729: LD_ADDR_OWVAR 35
28733: PUSH
28734: LD_INT 20
28736: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28737: LD_ADDR_OWVAR 28
28741: PUSH
28742: LD_INT 17
28744: ST_TO_ADDR
// hc_gallery :=  ;
28745: LD_ADDR_OWVAR 33
28749: PUSH
28750: LD_STRING 
28752: ST_TO_ADDR
// hc_name :=  ;
28753: LD_ADDR_OWVAR 26
28757: PUSH
28758: LD_STRING 
28760: ST_TO_ADDR
// un := CreateHuman ;
28761: LD_ADDR_VAR 0 2
28765: PUSH
28766: CALL_OW 44
28770: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28771: LD_VAR 0 2
28775: PPUSH
28776: LD_INT 1
28778: PPUSH
28779: CALL_OW 51
// tmp := tmp ^ un ;
28783: LD_ADDR_VAR 0 3
28787: PUSH
28788: LD_VAR 0 3
28792: PUSH
28793: LD_VAR 0 2
28797: ADD
28798: ST_TO_ADDR
// end ;
28799: GO 28695
28801: POP
28802: POP
// repeat wait ( 0 0$1 ) ;
28803: LD_INT 35
28805: PPUSH
28806: CALL_OW 67
// for un in tmp do
28810: LD_ADDR_VAR 0 2
28814: PUSH
28815: LD_VAR 0 3
28819: PUSH
28820: FOR_IN
28821: IFFALSE 28895
// begin if IsDead ( un ) then
28823: LD_VAR 0 2
28827: PPUSH
28828: CALL_OW 301
28832: IFFALSE 28852
// begin tmp := tmp diff un ;
28834: LD_ADDR_VAR 0 3
28838: PUSH
28839: LD_VAR 0 3
28843: PUSH
28844: LD_VAR 0 2
28848: DIFF
28849: ST_TO_ADDR
// continue ;
28850: GO 28820
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28852: LD_VAR 0 2
28856: PPUSH
28857: LD_INT 3
28859: PUSH
28860: LD_INT 22
28862: PUSH
28863: LD_INT 0
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PPUSH
28874: CALL_OW 69
28878: PPUSH
28879: LD_VAR 0 2
28883: PPUSH
28884: CALL_OW 74
28888: PPUSH
28889: CALL_OW 115
// end ;
28893: GO 28820
28895: POP
28896: POP
// until not tmp ;
28897: LD_VAR 0 3
28901: NOT
28902: IFFALSE 28803
// end ;
28904: PPOPN 3
28906: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28907: LD_EXP 38
28911: PUSH
28912: LD_EXP 63
28916: AND
28917: IFFALSE 28971
28919: GO 28921
28921: DISABLE
// begin ToLua ( displayTroll(); ) ;
28922: LD_STRING displayTroll();
28924: PPUSH
28925: CALL_OW 559
// wait ( 3 3$00 ) ;
28929: LD_INT 6300
28931: PPUSH
28932: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28936: LD_STRING hideTroll();
28938: PPUSH
28939: CALL_OW 559
// wait ( 1 1$00 ) ;
28943: LD_INT 2100
28945: PPUSH
28946: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28950: LD_STRING displayTroll();
28952: PPUSH
28953: CALL_OW 559
// wait ( 1 1$00 ) ;
28957: LD_INT 2100
28959: PPUSH
28960: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28964: LD_STRING hideTroll();
28966: PPUSH
28967: CALL_OW 559
// end ;
28971: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28972: LD_EXP 38
28976: PUSH
28977: LD_EXP 64
28981: AND
28982: IFFALSE 29045
28984: GO 28986
28986: DISABLE
28987: LD_INT 0
28989: PPUSH
// begin p := 0 ;
28990: LD_ADDR_VAR 0 1
28994: PUSH
28995: LD_INT 0
28997: ST_TO_ADDR
// repeat game_speed := 1 ;
28998: LD_ADDR_OWVAR 65
29002: PUSH
29003: LD_INT 1
29005: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29006: LD_INT 35
29008: PPUSH
29009: CALL_OW 67
// p := p + 1 ;
29013: LD_ADDR_VAR 0 1
29017: PUSH
29018: LD_VAR 0 1
29022: PUSH
29023: LD_INT 1
29025: PLUS
29026: ST_TO_ADDR
// until p >= 60 ;
29027: LD_VAR 0 1
29031: PUSH
29032: LD_INT 60
29034: GREATEREQUAL
29035: IFFALSE 28998
// game_speed := 4 ;
29037: LD_ADDR_OWVAR 65
29041: PUSH
29042: LD_INT 4
29044: ST_TO_ADDR
// end ;
29045: PPOPN 1
29047: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29048: LD_EXP 38
29052: PUSH
29053: LD_EXP 65
29057: AND
29058: IFFALSE 29204
29060: GO 29062
29062: DISABLE
29063: LD_INT 0
29065: PPUSH
29066: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29067: LD_ADDR_VAR 0 1
29071: PUSH
29072: LD_INT 22
29074: PUSH
29075: LD_OWVAR 2
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 2
29086: PUSH
29087: LD_INT 30
29089: PUSH
29090: LD_INT 0
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 30
29099: PUSH
29100: LD_INT 1
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: LIST
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PPUSH
29116: CALL_OW 69
29120: ST_TO_ADDR
// if not depot then
29121: LD_VAR 0 1
29125: NOT
29126: IFFALSE 29130
// exit ;
29128: GO 29204
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29130: LD_ADDR_VAR 0 2
29134: PUSH
29135: LD_VAR 0 1
29139: PUSH
29140: LD_INT 1
29142: PPUSH
29143: LD_VAR 0 1
29147: PPUSH
29148: CALL_OW 12
29152: ARRAY
29153: PPUSH
29154: CALL_OW 274
29158: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29159: LD_VAR 0 2
29163: PPUSH
29164: LD_INT 1
29166: PPUSH
29167: LD_INT 0
29169: PPUSH
29170: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29174: LD_VAR 0 2
29178: PPUSH
29179: LD_INT 2
29181: PPUSH
29182: LD_INT 0
29184: PPUSH
29185: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29189: LD_VAR 0 2
29193: PPUSH
29194: LD_INT 3
29196: PPUSH
29197: LD_INT 0
29199: PPUSH
29200: CALL_OW 277
// end ;
29204: PPOPN 2
29206: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29207: LD_EXP 38
29211: PUSH
29212: LD_EXP 66
29216: AND
29217: IFFALSE 29314
29219: GO 29221
29221: DISABLE
29222: LD_INT 0
29224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29225: LD_ADDR_VAR 0 1
29229: PUSH
29230: LD_INT 22
29232: PUSH
29233: LD_OWVAR 2
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 21
29244: PUSH
29245: LD_INT 1
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 3
29254: PUSH
29255: LD_INT 23
29257: PUSH
29258: LD_INT 0
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: LIST
29273: PPUSH
29274: CALL_OW 69
29278: ST_TO_ADDR
// if not tmp then
29279: LD_VAR 0 1
29283: NOT
29284: IFFALSE 29288
// exit ;
29286: GO 29314
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29288: LD_VAR 0 1
29292: PUSH
29293: LD_INT 1
29295: PPUSH
29296: LD_VAR 0 1
29300: PPUSH
29301: CALL_OW 12
29305: ARRAY
29306: PPUSH
29307: LD_INT 200
29309: PPUSH
29310: CALL_OW 234
// end ;
29314: PPOPN 1
29316: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29317: LD_EXP 38
29321: PUSH
29322: LD_EXP 67
29326: AND
29327: IFFALSE 29406
29329: GO 29331
29331: DISABLE
29332: LD_INT 0
29334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29335: LD_ADDR_VAR 0 1
29339: PUSH
29340: LD_INT 22
29342: PUSH
29343: LD_OWVAR 2
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 21
29354: PUSH
29355: LD_INT 2
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PPUSH
29366: CALL_OW 69
29370: ST_TO_ADDR
// if not tmp then
29371: LD_VAR 0 1
29375: NOT
29376: IFFALSE 29380
// exit ;
29378: GO 29406
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29380: LD_VAR 0 1
29384: PUSH
29385: LD_INT 1
29387: PPUSH
29388: LD_VAR 0 1
29392: PPUSH
29393: CALL_OW 12
29397: ARRAY
29398: PPUSH
29399: LD_INT 60
29401: PPUSH
29402: CALL_OW 234
// end ;
29406: PPOPN 1
29408: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29409: LD_EXP 38
29413: PUSH
29414: LD_EXP 68
29418: AND
29419: IFFALSE 29518
29421: GO 29423
29423: DISABLE
29424: LD_INT 0
29426: PPUSH
29427: PPUSH
// begin enable ;
29428: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29429: LD_ADDR_VAR 0 1
29433: PUSH
29434: LD_INT 22
29436: PUSH
29437: LD_OWVAR 2
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 61
29448: PUSH
29449: EMPTY
29450: LIST
29451: PUSH
29452: LD_INT 33
29454: PUSH
29455: LD_INT 2
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: LIST
29466: PPUSH
29467: CALL_OW 69
29471: ST_TO_ADDR
// if not tmp then
29472: LD_VAR 0 1
29476: NOT
29477: IFFALSE 29481
// exit ;
29479: GO 29518
// for i in tmp do
29481: LD_ADDR_VAR 0 2
29485: PUSH
29486: LD_VAR 0 1
29490: PUSH
29491: FOR_IN
29492: IFFALSE 29516
// if IsControledBy ( i ) then
29494: LD_VAR 0 2
29498: PPUSH
29499: CALL_OW 312
29503: IFFALSE 29514
// ComUnlink ( i ) ;
29505: LD_VAR 0 2
29509: PPUSH
29510: CALL_OW 136
29514: GO 29491
29516: POP
29517: POP
// end ;
29518: PPOPN 2
29520: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29521: LD_EXP 38
29525: PUSH
29526: LD_EXP 69
29530: AND
29531: IFFALSE 29671
29533: GO 29535
29535: DISABLE
29536: LD_INT 0
29538: PPUSH
29539: PPUSH
// begin ToLua ( displayPowell(); ) ;
29540: LD_STRING displayPowell();
29542: PPUSH
29543: CALL_OW 559
// uc_side := 0 ;
29547: LD_ADDR_OWVAR 20
29551: PUSH
29552: LD_INT 0
29554: ST_TO_ADDR
// uc_nation := 2 ;
29555: LD_ADDR_OWVAR 21
29559: PUSH
29560: LD_INT 2
29562: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29563: LD_ADDR_OWVAR 37
29567: PUSH
29568: LD_INT 14
29570: ST_TO_ADDR
// vc_engine := engine_siberite ;
29571: LD_ADDR_OWVAR 39
29575: PUSH
29576: LD_INT 3
29578: ST_TO_ADDR
// vc_control := control_apeman ;
29579: LD_ADDR_OWVAR 38
29583: PUSH
29584: LD_INT 5
29586: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29587: LD_ADDR_OWVAR 40
29591: PUSH
29592: LD_INT 29
29594: ST_TO_ADDR
// un := CreateVehicle ;
29595: LD_ADDR_VAR 0 2
29599: PUSH
29600: CALL_OW 45
29604: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29605: LD_VAR 0 2
29609: PPUSH
29610: LD_INT 1
29612: PPUSH
29613: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29617: LD_INT 35
29619: PPUSH
29620: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29624: LD_VAR 0 2
29628: PPUSH
29629: LD_INT 22
29631: PUSH
29632: LD_OWVAR 2
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PPUSH
29641: CALL_OW 69
29645: PPUSH
29646: LD_VAR 0 2
29650: PPUSH
29651: CALL_OW 74
29655: PPUSH
29656: CALL_OW 115
// until IsDead ( un ) ;
29660: LD_VAR 0 2
29664: PPUSH
29665: CALL_OW 301
29669: IFFALSE 29617
// end ;
29671: PPOPN 2
29673: END
// every 0 0$1 trigger StreamModeActive and sStu do
29674: LD_EXP 38
29678: PUSH
29679: LD_EXP 77
29683: AND
29684: IFFALSE 29700
29686: GO 29688
29688: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29689: LD_STRING displayStucuk();
29691: PPUSH
29692: CALL_OW 559
// ResetFog ;
29696: CALL_OW 335
// end ;
29700: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29701: LD_EXP 38
29705: PUSH
29706: LD_EXP 70
29710: AND
29711: IFFALSE 29852
29713: GO 29715
29715: DISABLE
29716: LD_INT 0
29718: PPUSH
29719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29720: LD_ADDR_VAR 0 2
29724: PUSH
29725: LD_INT 22
29727: PUSH
29728: LD_OWVAR 2
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 21
29739: PUSH
29740: LD_INT 1
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PPUSH
29751: CALL_OW 69
29755: ST_TO_ADDR
// if not tmp then
29756: LD_VAR 0 2
29760: NOT
29761: IFFALSE 29765
// exit ;
29763: GO 29852
// un := tmp [ rand ( 1 , tmp ) ] ;
29765: LD_ADDR_VAR 0 1
29769: PUSH
29770: LD_VAR 0 2
29774: PUSH
29775: LD_INT 1
29777: PPUSH
29778: LD_VAR 0 2
29782: PPUSH
29783: CALL_OW 12
29787: ARRAY
29788: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29789: LD_VAR 0 1
29793: PPUSH
29794: LD_INT 0
29796: PPUSH
29797: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29801: LD_VAR 0 1
29805: PPUSH
29806: LD_OWVAR 3
29810: PUSH
29811: LD_VAR 0 1
29815: DIFF
29816: PPUSH
29817: LD_VAR 0 1
29821: PPUSH
29822: CALL_OW 74
29826: PPUSH
29827: CALL_OW 115
// wait ( 0 0$20 ) ;
29831: LD_INT 700
29833: PPUSH
29834: CALL_OW 67
// SetSide ( un , your_side ) ;
29838: LD_VAR 0 1
29842: PPUSH
29843: LD_OWVAR 2
29847: PPUSH
29848: CALL_OW 235
// end ;
29852: PPOPN 2
29854: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29855: LD_EXP 38
29859: PUSH
29860: LD_EXP 71
29864: AND
29865: IFFALSE 29971
29867: GO 29869
29869: DISABLE
29870: LD_INT 0
29872: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29873: LD_ADDR_VAR 0 1
29877: PUSH
29878: LD_INT 22
29880: PUSH
29881: LD_OWVAR 2
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 2
29892: PUSH
29893: LD_INT 30
29895: PUSH
29896: LD_INT 0
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 30
29905: PUSH
29906: LD_INT 1
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: LIST
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PPUSH
29922: CALL_OW 69
29926: ST_TO_ADDR
// if not depot then
29927: LD_VAR 0 1
29931: NOT
29932: IFFALSE 29936
// exit ;
29934: GO 29971
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29936: LD_VAR 0 1
29940: PUSH
29941: LD_INT 1
29943: ARRAY
29944: PPUSH
29945: CALL_OW 250
29949: PPUSH
29950: LD_VAR 0 1
29954: PUSH
29955: LD_INT 1
29957: ARRAY
29958: PPUSH
29959: CALL_OW 251
29963: PPUSH
29964: LD_INT 70
29966: PPUSH
29967: CALL_OW 495
// end ;
29971: PPOPN 1
29973: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29974: LD_EXP 38
29978: PUSH
29979: LD_EXP 72
29983: AND
29984: IFFALSE 30195
29986: GO 29988
29988: DISABLE
29989: LD_INT 0
29991: PPUSH
29992: PPUSH
29993: PPUSH
29994: PPUSH
29995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29996: LD_ADDR_VAR 0 5
30000: PUSH
30001: LD_INT 22
30003: PUSH
30004: LD_OWVAR 2
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 21
30015: PUSH
30016: LD_INT 1
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PPUSH
30027: CALL_OW 69
30031: ST_TO_ADDR
// if not tmp then
30032: LD_VAR 0 5
30036: NOT
30037: IFFALSE 30041
// exit ;
30039: GO 30195
// for i in tmp do
30041: LD_ADDR_VAR 0 1
30045: PUSH
30046: LD_VAR 0 5
30050: PUSH
30051: FOR_IN
30052: IFFALSE 30193
// begin d := rand ( 0 , 5 ) ;
30054: LD_ADDR_VAR 0 4
30058: PUSH
30059: LD_INT 0
30061: PPUSH
30062: LD_INT 5
30064: PPUSH
30065: CALL_OW 12
30069: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30070: LD_ADDR_VAR 0 2
30074: PUSH
30075: LD_VAR 0 1
30079: PPUSH
30080: CALL_OW 250
30084: PPUSH
30085: LD_VAR 0 4
30089: PPUSH
30090: LD_INT 3
30092: PPUSH
30093: LD_INT 12
30095: PPUSH
30096: CALL_OW 12
30100: PPUSH
30101: CALL_OW 272
30105: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30106: LD_ADDR_VAR 0 3
30110: PUSH
30111: LD_VAR 0 1
30115: PPUSH
30116: CALL_OW 251
30120: PPUSH
30121: LD_VAR 0 4
30125: PPUSH
30126: LD_INT 3
30128: PPUSH
30129: LD_INT 12
30131: PPUSH
30132: CALL_OW 12
30136: PPUSH
30137: CALL_OW 273
30141: ST_TO_ADDR
// if ValidHex ( x , y ) then
30142: LD_VAR 0 2
30146: PPUSH
30147: LD_VAR 0 3
30151: PPUSH
30152: CALL_OW 488
30156: IFFALSE 30191
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30158: LD_VAR 0 1
30162: PPUSH
30163: LD_VAR 0 2
30167: PPUSH
30168: LD_VAR 0 3
30172: PPUSH
30173: LD_INT 3
30175: PPUSH
30176: LD_INT 6
30178: PPUSH
30179: CALL_OW 12
30183: PPUSH
30184: LD_INT 1
30186: PPUSH
30187: CALL_OW 483
// end ;
30191: GO 30051
30193: POP
30194: POP
// end ;
30195: PPOPN 5
30197: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30198: LD_EXP 38
30202: PUSH
30203: LD_EXP 73
30207: AND
30208: IFFALSE 30302
30210: GO 30212
30212: DISABLE
30213: LD_INT 0
30215: PPUSH
30216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30217: LD_ADDR_VAR 0 2
30221: PUSH
30222: LD_INT 22
30224: PUSH
30225: LD_OWVAR 2
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 32
30236: PUSH
30237: LD_INT 1
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 21
30246: PUSH
30247: LD_INT 2
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: LIST
30258: PPUSH
30259: CALL_OW 69
30263: ST_TO_ADDR
// if not tmp then
30264: LD_VAR 0 2
30268: NOT
30269: IFFALSE 30273
// exit ;
30271: GO 30302
// for i in tmp do
30273: LD_ADDR_VAR 0 1
30277: PUSH
30278: LD_VAR 0 2
30282: PUSH
30283: FOR_IN
30284: IFFALSE 30300
// SetFuel ( i , 0 ) ;
30286: LD_VAR 0 1
30290: PPUSH
30291: LD_INT 0
30293: PPUSH
30294: CALL_OW 240
30298: GO 30283
30300: POP
30301: POP
// end ;
30302: PPOPN 2
30304: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30305: LD_EXP 38
30309: PUSH
30310: LD_EXP 74
30314: AND
30315: IFFALSE 30381
30317: GO 30319
30319: DISABLE
30320: LD_INT 0
30322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30323: LD_ADDR_VAR 0 1
30327: PUSH
30328: LD_INT 22
30330: PUSH
30331: LD_OWVAR 2
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 30
30342: PUSH
30343: LD_INT 29
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PPUSH
30354: CALL_OW 69
30358: ST_TO_ADDR
// if not tmp then
30359: LD_VAR 0 1
30363: NOT
30364: IFFALSE 30368
// exit ;
30366: GO 30381
// DestroyUnit ( tmp [ 1 ] ) ;
30368: LD_VAR 0 1
30372: PUSH
30373: LD_INT 1
30375: ARRAY
30376: PPUSH
30377: CALL_OW 65
// end ;
30381: PPOPN 1
30383: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30384: LD_EXP 38
30388: PUSH
30389: LD_EXP 76
30393: AND
30394: IFFALSE 30523
30396: GO 30398
30398: DISABLE
30399: LD_INT 0
30401: PPUSH
// begin uc_side := 0 ;
30402: LD_ADDR_OWVAR 20
30406: PUSH
30407: LD_INT 0
30409: ST_TO_ADDR
// uc_nation := nation_arabian ;
30410: LD_ADDR_OWVAR 21
30414: PUSH
30415: LD_INT 2
30417: ST_TO_ADDR
// hc_gallery :=  ;
30418: LD_ADDR_OWVAR 33
30422: PUSH
30423: LD_STRING 
30425: ST_TO_ADDR
// hc_name :=  ;
30426: LD_ADDR_OWVAR 26
30430: PUSH
30431: LD_STRING 
30433: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30434: LD_INT 1
30436: PPUSH
30437: LD_INT 11
30439: PPUSH
30440: LD_INT 10
30442: PPUSH
30443: CALL_OW 380
// un := CreateHuman ;
30447: LD_ADDR_VAR 0 1
30451: PUSH
30452: CALL_OW 44
30456: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30457: LD_VAR 0 1
30461: PPUSH
30462: LD_INT 1
30464: PPUSH
30465: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30469: LD_INT 35
30471: PPUSH
30472: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30476: LD_VAR 0 1
30480: PPUSH
30481: LD_INT 22
30483: PUSH
30484: LD_OWVAR 2
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PPUSH
30493: CALL_OW 69
30497: PPUSH
30498: LD_VAR 0 1
30502: PPUSH
30503: CALL_OW 74
30507: PPUSH
30508: CALL_OW 115
// until IsDead ( un ) ;
30512: LD_VAR 0 1
30516: PPUSH
30517: CALL_OW 301
30521: IFFALSE 30469
// end ;
30523: PPOPN 1
30525: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30526: LD_EXP 38
30530: PUSH
30531: LD_EXP 78
30535: AND
30536: IFFALSE 30548
30538: GO 30540
30540: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30541: LD_STRING earthquake(getX(game), 0, 32)
30543: PPUSH
30544: CALL_OW 559
30548: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30549: LD_EXP 38
30553: PUSH
30554: LD_EXP 79
30558: AND
30559: IFFALSE 30650
30561: GO 30563
30563: DISABLE
30564: LD_INT 0
30566: PPUSH
// begin enable ;
30567: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30568: LD_ADDR_VAR 0 1
30572: PUSH
30573: LD_INT 22
30575: PUSH
30576: LD_OWVAR 2
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 21
30587: PUSH
30588: LD_INT 2
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 33
30597: PUSH
30598: LD_INT 3
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: LIST
30609: PPUSH
30610: CALL_OW 69
30614: ST_TO_ADDR
// if not tmp then
30615: LD_VAR 0 1
30619: NOT
30620: IFFALSE 30624
// exit ;
30622: GO 30650
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30624: LD_VAR 0 1
30628: PUSH
30629: LD_INT 1
30631: PPUSH
30632: LD_VAR 0 1
30636: PPUSH
30637: CALL_OW 12
30641: ARRAY
30642: PPUSH
30643: LD_INT 1
30645: PPUSH
30646: CALL_OW 234
// end ;
30650: PPOPN 1
30652: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30653: LD_EXP 38
30657: PUSH
30658: LD_EXP 80
30662: AND
30663: IFFALSE 30804
30665: GO 30667
30667: DISABLE
30668: LD_INT 0
30670: PPUSH
30671: PPUSH
30672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30673: LD_ADDR_VAR 0 3
30677: PUSH
30678: LD_INT 22
30680: PUSH
30681: LD_OWVAR 2
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 25
30692: PUSH
30693: LD_INT 1
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PPUSH
30704: CALL_OW 69
30708: ST_TO_ADDR
// if not tmp then
30709: LD_VAR 0 3
30713: NOT
30714: IFFALSE 30718
// exit ;
30716: GO 30804
// un := tmp [ rand ( 1 , tmp ) ] ;
30718: LD_ADDR_VAR 0 2
30722: PUSH
30723: LD_VAR 0 3
30727: PUSH
30728: LD_INT 1
30730: PPUSH
30731: LD_VAR 0 3
30735: PPUSH
30736: CALL_OW 12
30740: ARRAY
30741: ST_TO_ADDR
// if Crawls ( un ) then
30742: LD_VAR 0 2
30746: PPUSH
30747: CALL_OW 318
30751: IFFALSE 30762
// ComWalk ( un ) ;
30753: LD_VAR 0 2
30757: PPUSH
30758: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30762: LD_VAR 0 2
30766: PPUSH
30767: LD_INT 9
30769: PPUSH
30770: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30774: LD_INT 28
30776: PPUSH
30777: LD_OWVAR 2
30781: PPUSH
30782: LD_INT 2
30784: PPUSH
30785: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30789: LD_INT 29
30791: PPUSH
30792: LD_OWVAR 2
30796: PPUSH
30797: LD_INT 2
30799: PPUSH
30800: CALL_OW 322
// end ;
30804: PPOPN 3
30806: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30807: LD_EXP 38
30811: PUSH
30812: LD_EXP 81
30816: AND
30817: IFFALSE 30928
30819: GO 30821
30821: DISABLE
30822: LD_INT 0
30824: PPUSH
30825: PPUSH
30826: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30827: LD_ADDR_VAR 0 3
30831: PUSH
30832: LD_INT 22
30834: PUSH
30835: LD_OWVAR 2
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 25
30846: PUSH
30847: LD_INT 1
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PPUSH
30858: CALL_OW 69
30862: ST_TO_ADDR
// if not tmp then
30863: LD_VAR 0 3
30867: NOT
30868: IFFALSE 30872
// exit ;
30870: GO 30928
// un := tmp [ rand ( 1 , tmp ) ] ;
30872: LD_ADDR_VAR 0 2
30876: PUSH
30877: LD_VAR 0 3
30881: PUSH
30882: LD_INT 1
30884: PPUSH
30885: LD_VAR 0 3
30889: PPUSH
30890: CALL_OW 12
30894: ARRAY
30895: ST_TO_ADDR
// if Crawls ( un ) then
30896: LD_VAR 0 2
30900: PPUSH
30901: CALL_OW 318
30905: IFFALSE 30916
// ComWalk ( un ) ;
30907: LD_VAR 0 2
30911: PPUSH
30912: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30916: LD_VAR 0 2
30920: PPUSH
30921: LD_INT 8
30923: PPUSH
30924: CALL_OW 336
// end ;
30928: PPOPN 3
30930: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30931: LD_EXP 38
30935: PUSH
30936: LD_EXP 82
30940: AND
30941: IFFALSE 31085
30943: GO 30945
30945: DISABLE
30946: LD_INT 0
30948: PPUSH
30949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30950: LD_ADDR_VAR 0 2
30954: PUSH
30955: LD_INT 22
30957: PUSH
30958: LD_OWVAR 2
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 21
30969: PUSH
30970: LD_INT 2
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 2
30979: PUSH
30980: LD_INT 34
30982: PUSH
30983: LD_INT 12
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 34
30992: PUSH
30993: LD_INT 51
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 34
31002: PUSH
31003: LD_INT 32
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: LIST
31020: PPUSH
31021: CALL_OW 69
31025: ST_TO_ADDR
// if not tmp then
31026: LD_VAR 0 2
31030: NOT
31031: IFFALSE 31035
// exit ;
31033: GO 31085
// for i in tmp do
31035: LD_ADDR_VAR 0 1
31039: PUSH
31040: LD_VAR 0 2
31044: PUSH
31045: FOR_IN
31046: IFFALSE 31083
// if GetCargo ( i , mat_artifact ) = 0 then
31048: LD_VAR 0 1
31052: PPUSH
31053: LD_INT 4
31055: PPUSH
31056: CALL_OW 289
31060: PUSH
31061: LD_INT 0
31063: EQUAL
31064: IFFALSE 31081
// SetCargo ( i , mat_siberit , 100 ) ;
31066: LD_VAR 0 1
31070: PPUSH
31071: LD_INT 3
31073: PPUSH
31074: LD_INT 100
31076: PPUSH
31077: CALL_OW 290
31081: GO 31045
31083: POP
31084: POP
// end ;
31085: PPOPN 2
31087: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31088: LD_EXP 38
31092: PUSH
31093: LD_EXP 83
31097: AND
31098: IFFALSE 31281
31100: GO 31102
31102: DISABLE
31103: LD_INT 0
31105: PPUSH
31106: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31107: LD_ADDR_VAR 0 2
31111: PUSH
31112: LD_INT 22
31114: PUSH
31115: LD_OWVAR 2
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PPUSH
31124: CALL_OW 69
31128: ST_TO_ADDR
// if not tmp then
31129: LD_VAR 0 2
31133: NOT
31134: IFFALSE 31138
// exit ;
31136: GO 31281
// for i := 1 to 2 do
31138: LD_ADDR_VAR 0 1
31142: PUSH
31143: DOUBLE
31144: LD_INT 1
31146: DEC
31147: ST_TO_ADDR
31148: LD_INT 2
31150: PUSH
31151: FOR_TO
31152: IFFALSE 31279
// begin uc_side := your_side ;
31154: LD_ADDR_OWVAR 20
31158: PUSH
31159: LD_OWVAR 2
31163: ST_TO_ADDR
// uc_nation := nation_american ;
31164: LD_ADDR_OWVAR 21
31168: PUSH
31169: LD_INT 1
31171: ST_TO_ADDR
// vc_chassis := us_morphling ;
31172: LD_ADDR_OWVAR 37
31176: PUSH
31177: LD_INT 5
31179: ST_TO_ADDR
// vc_engine := engine_siberite ;
31180: LD_ADDR_OWVAR 39
31184: PUSH
31185: LD_INT 3
31187: ST_TO_ADDR
// vc_control := control_computer ;
31188: LD_ADDR_OWVAR 38
31192: PUSH
31193: LD_INT 3
31195: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31196: LD_ADDR_OWVAR 40
31200: PUSH
31201: LD_INT 10
31203: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31204: LD_VAR 0 2
31208: PUSH
31209: LD_INT 1
31211: ARRAY
31212: PPUSH
31213: CALL_OW 310
31217: NOT
31218: IFFALSE 31265
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31220: CALL_OW 45
31224: PPUSH
31225: LD_VAR 0 2
31229: PUSH
31230: LD_INT 1
31232: ARRAY
31233: PPUSH
31234: CALL_OW 250
31238: PPUSH
31239: LD_VAR 0 2
31243: PUSH
31244: LD_INT 1
31246: ARRAY
31247: PPUSH
31248: CALL_OW 251
31252: PPUSH
31253: LD_INT 12
31255: PPUSH
31256: LD_INT 1
31258: PPUSH
31259: CALL_OW 50
31263: GO 31277
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31265: CALL_OW 45
31269: PPUSH
31270: LD_INT 1
31272: PPUSH
31273: CALL_OW 51
// end ;
31277: GO 31151
31279: POP
31280: POP
// end ;
31281: PPOPN 2
31283: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31284: LD_EXP 38
31288: PUSH
31289: LD_EXP 84
31293: AND
31294: IFFALSE 31516
31296: GO 31298
31298: DISABLE
31299: LD_INT 0
31301: PPUSH
31302: PPUSH
31303: PPUSH
31304: PPUSH
31305: PPUSH
31306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31307: LD_ADDR_VAR 0 6
31311: PUSH
31312: LD_INT 22
31314: PUSH
31315: LD_OWVAR 2
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 21
31326: PUSH
31327: LD_INT 1
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 3
31336: PUSH
31337: LD_INT 23
31339: PUSH
31340: LD_INT 0
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: LIST
31355: PPUSH
31356: CALL_OW 69
31360: ST_TO_ADDR
// if not tmp then
31361: LD_VAR 0 6
31365: NOT
31366: IFFALSE 31370
// exit ;
31368: GO 31516
// s1 := rand ( 1 , 4 ) ;
31370: LD_ADDR_VAR 0 2
31374: PUSH
31375: LD_INT 1
31377: PPUSH
31378: LD_INT 4
31380: PPUSH
31381: CALL_OW 12
31385: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31386: LD_ADDR_VAR 0 4
31390: PUSH
31391: LD_VAR 0 6
31395: PUSH
31396: LD_INT 1
31398: ARRAY
31399: PPUSH
31400: LD_VAR 0 2
31404: PPUSH
31405: CALL_OW 259
31409: ST_TO_ADDR
// if s1 = 1 then
31410: LD_VAR 0 2
31414: PUSH
31415: LD_INT 1
31417: EQUAL
31418: IFFALSE 31438
// s2 := rand ( 2 , 4 ) else
31420: LD_ADDR_VAR 0 3
31424: PUSH
31425: LD_INT 2
31427: PPUSH
31428: LD_INT 4
31430: PPUSH
31431: CALL_OW 12
31435: ST_TO_ADDR
31436: GO 31446
// s2 := 1 ;
31438: LD_ADDR_VAR 0 3
31442: PUSH
31443: LD_INT 1
31445: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31446: LD_ADDR_VAR 0 5
31450: PUSH
31451: LD_VAR 0 6
31455: PUSH
31456: LD_INT 1
31458: ARRAY
31459: PPUSH
31460: LD_VAR 0 3
31464: PPUSH
31465: CALL_OW 259
31469: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31470: LD_VAR 0 6
31474: PUSH
31475: LD_INT 1
31477: ARRAY
31478: PPUSH
31479: LD_VAR 0 2
31483: PPUSH
31484: LD_VAR 0 5
31488: PPUSH
31489: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31493: LD_VAR 0 6
31497: PUSH
31498: LD_INT 1
31500: ARRAY
31501: PPUSH
31502: LD_VAR 0 3
31506: PPUSH
31507: LD_VAR 0 4
31511: PPUSH
31512: CALL_OW 237
// end ;
31516: PPOPN 6
31518: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31519: LD_EXP 38
31523: PUSH
31524: LD_EXP 85
31528: AND
31529: IFFALSE 31608
31531: GO 31533
31533: DISABLE
31534: LD_INT 0
31536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31537: LD_ADDR_VAR 0 1
31541: PUSH
31542: LD_INT 22
31544: PUSH
31545: LD_OWVAR 2
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 30
31556: PUSH
31557: LD_INT 3
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PPUSH
31568: CALL_OW 69
31572: ST_TO_ADDR
// if not tmp then
31573: LD_VAR 0 1
31577: NOT
31578: IFFALSE 31582
// exit ;
31580: GO 31608
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31582: LD_VAR 0 1
31586: PUSH
31587: LD_INT 1
31589: PPUSH
31590: LD_VAR 0 1
31594: PPUSH
31595: CALL_OW 12
31599: ARRAY
31600: PPUSH
31601: LD_INT 1
31603: PPUSH
31604: CALL_OW 234
// end ;
31608: PPOPN 1
31610: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31611: LD_EXP 38
31615: PUSH
31616: LD_EXP 86
31620: AND
31621: IFFALSE 31733
31623: GO 31625
31625: DISABLE
31626: LD_INT 0
31628: PPUSH
31629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31630: LD_ADDR_VAR 0 2
31634: PUSH
31635: LD_INT 22
31637: PUSH
31638: LD_OWVAR 2
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 2
31649: PUSH
31650: LD_INT 30
31652: PUSH
31653: LD_INT 27
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 30
31662: PUSH
31663: LD_INT 26
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 30
31672: PUSH
31673: LD_INT 28
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PPUSH
31690: CALL_OW 69
31694: ST_TO_ADDR
// if not tmp then
31695: LD_VAR 0 2
31699: NOT
31700: IFFALSE 31704
// exit ;
31702: GO 31733
// for i in tmp do
31704: LD_ADDR_VAR 0 1
31708: PUSH
31709: LD_VAR 0 2
31713: PUSH
31714: FOR_IN
31715: IFFALSE 31731
// SetLives ( i , 1 ) ;
31717: LD_VAR 0 1
31721: PPUSH
31722: LD_INT 1
31724: PPUSH
31725: CALL_OW 234
31729: GO 31714
31731: POP
31732: POP
// end ;
31733: PPOPN 2
31735: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31736: LD_EXP 38
31740: PUSH
31741: LD_EXP 87
31745: AND
31746: IFFALSE 32033
31748: GO 31750
31750: DISABLE
31751: LD_INT 0
31753: PPUSH
31754: PPUSH
31755: PPUSH
// begin i := rand ( 1 , 7 ) ;
31756: LD_ADDR_VAR 0 1
31760: PUSH
31761: LD_INT 1
31763: PPUSH
31764: LD_INT 7
31766: PPUSH
31767: CALL_OW 12
31771: ST_TO_ADDR
// case i of 1 :
31772: LD_VAR 0 1
31776: PUSH
31777: LD_INT 1
31779: DOUBLE
31780: EQUAL
31781: IFTRUE 31785
31783: GO 31795
31785: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31786: LD_STRING earthquake(getX(game), 0, 32)
31788: PPUSH
31789: CALL_OW 559
31793: GO 32033
31795: LD_INT 2
31797: DOUBLE
31798: EQUAL
31799: IFTRUE 31803
31801: GO 31817
31803: POP
// begin ToLua ( displayStucuk(); ) ;
31804: LD_STRING displayStucuk();
31806: PPUSH
31807: CALL_OW 559
// ResetFog ;
31811: CALL_OW 335
// end ; 3 :
31815: GO 32033
31817: LD_INT 3
31819: DOUBLE
31820: EQUAL
31821: IFTRUE 31825
31823: GO 31929
31825: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31826: LD_ADDR_VAR 0 2
31830: PUSH
31831: LD_INT 22
31833: PUSH
31834: LD_OWVAR 2
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 25
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PPUSH
31857: CALL_OW 69
31861: ST_TO_ADDR
// if not tmp then
31862: LD_VAR 0 2
31866: NOT
31867: IFFALSE 31871
// exit ;
31869: GO 32033
// un := tmp [ rand ( 1 , tmp ) ] ;
31871: LD_ADDR_VAR 0 3
31875: PUSH
31876: LD_VAR 0 2
31880: PUSH
31881: LD_INT 1
31883: PPUSH
31884: LD_VAR 0 2
31888: PPUSH
31889: CALL_OW 12
31893: ARRAY
31894: ST_TO_ADDR
// if Crawls ( un ) then
31895: LD_VAR 0 3
31899: PPUSH
31900: CALL_OW 318
31904: IFFALSE 31915
// ComWalk ( un ) ;
31906: LD_VAR 0 3
31910: PPUSH
31911: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31915: LD_VAR 0 3
31919: PPUSH
31920: LD_INT 8
31922: PPUSH
31923: CALL_OW 336
// end ; 4 :
31927: GO 32033
31929: LD_INT 4
31931: DOUBLE
31932: EQUAL
31933: IFTRUE 31937
31935: GO 32011
31937: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31938: LD_ADDR_VAR 0 2
31942: PUSH
31943: LD_INT 22
31945: PUSH
31946: LD_OWVAR 2
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 30
31957: PUSH
31958: LD_INT 29
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PPUSH
31969: CALL_OW 69
31973: ST_TO_ADDR
// if not tmp then
31974: LD_VAR 0 2
31978: NOT
31979: IFFALSE 31983
// exit ;
31981: GO 32033
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31983: LD_VAR 0 2
31987: PUSH
31988: LD_INT 1
31990: ARRAY
31991: PPUSH
31992: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31996: LD_VAR 0 2
32000: PUSH
32001: LD_INT 1
32003: ARRAY
32004: PPUSH
32005: CALL_OW 65
// end ; 5 .. 7 :
32009: GO 32033
32011: LD_INT 5
32013: DOUBLE
32014: GREATEREQUAL
32015: IFFALSE 32023
32017: LD_INT 7
32019: DOUBLE
32020: LESSEQUAL
32021: IFTRUE 32025
32023: GO 32032
32025: POP
// StreamSibBomb ; end ;
32026: CALL 28270 0 0
32030: GO 32033
32032: POP
// end ;
32033: PPOPN 3
32035: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32036: LD_EXP 38
32040: PUSH
32041: LD_EXP 88
32045: AND
32046: IFFALSE 32202
32048: GO 32050
32050: DISABLE
32051: LD_INT 0
32053: PPUSH
32054: PPUSH
32055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32056: LD_ADDR_VAR 0 2
32060: PUSH
32061: LD_INT 81
32063: PUSH
32064: LD_OWVAR 2
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: LD_INT 21
32078: PUSH
32079: LD_INT 1
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 21
32088: PUSH
32089: LD_INT 2
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: LIST
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PPUSH
32105: CALL_OW 69
32109: ST_TO_ADDR
// if not tmp then
32110: LD_VAR 0 2
32114: NOT
32115: IFFALSE 32119
// exit ;
32117: GO 32202
// p := 0 ;
32119: LD_ADDR_VAR 0 3
32123: PUSH
32124: LD_INT 0
32126: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32127: LD_INT 35
32129: PPUSH
32130: CALL_OW 67
// p := p + 1 ;
32134: LD_ADDR_VAR 0 3
32138: PUSH
32139: LD_VAR 0 3
32143: PUSH
32144: LD_INT 1
32146: PLUS
32147: ST_TO_ADDR
// for i in tmp do
32148: LD_ADDR_VAR 0 1
32152: PUSH
32153: LD_VAR 0 2
32157: PUSH
32158: FOR_IN
32159: IFFALSE 32190
// if GetLives ( i ) < 1000 then
32161: LD_VAR 0 1
32165: PPUSH
32166: CALL_OW 256
32170: PUSH
32171: LD_INT 1000
32173: LESS
32174: IFFALSE 32188
// SetLives ( i , 1000 ) ;
32176: LD_VAR 0 1
32180: PPUSH
32181: LD_INT 1000
32183: PPUSH
32184: CALL_OW 234
32188: GO 32158
32190: POP
32191: POP
// until p > 20 ;
32192: LD_VAR 0 3
32196: PUSH
32197: LD_INT 20
32199: GREATER
32200: IFFALSE 32127
// end ;
32202: PPOPN 3
32204: END
// every 0 0$1 trigger StreamModeActive and sTime do
32205: LD_EXP 38
32209: PUSH
32210: LD_EXP 89
32214: AND
32215: IFFALSE 32250
32217: GO 32219
32219: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32220: LD_INT 28
32222: PPUSH
32223: LD_OWVAR 2
32227: PPUSH
32228: LD_INT 2
32230: PPUSH
32231: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32235: LD_INT 30
32237: PPUSH
32238: LD_OWVAR 2
32242: PPUSH
32243: LD_INT 2
32245: PPUSH
32246: CALL_OW 322
// end ;
32250: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32251: LD_EXP 38
32255: PUSH
32256: LD_EXP 90
32260: AND
32261: IFFALSE 32382
32263: GO 32265
32265: DISABLE
32266: LD_INT 0
32268: PPUSH
32269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32270: LD_ADDR_VAR 0 2
32274: PUSH
32275: LD_INT 22
32277: PUSH
32278: LD_OWVAR 2
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 21
32289: PUSH
32290: LD_INT 1
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 3
32299: PUSH
32300: LD_INT 23
32302: PUSH
32303: LD_INT 0
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: LIST
32318: PPUSH
32319: CALL_OW 69
32323: ST_TO_ADDR
// if not tmp then
32324: LD_VAR 0 2
32328: NOT
32329: IFFALSE 32333
// exit ;
32331: GO 32382
// for i in tmp do
32333: LD_ADDR_VAR 0 1
32337: PUSH
32338: LD_VAR 0 2
32342: PUSH
32343: FOR_IN
32344: IFFALSE 32380
// begin if Crawls ( i ) then
32346: LD_VAR 0 1
32350: PPUSH
32351: CALL_OW 318
32355: IFFALSE 32366
// ComWalk ( i ) ;
32357: LD_VAR 0 1
32361: PPUSH
32362: CALL_OW 138
// SetClass ( i , 2 ) ;
32366: LD_VAR 0 1
32370: PPUSH
32371: LD_INT 2
32373: PPUSH
32374: CALL_OW 336
// end ;
32378: GO 32343
32380: POP
32381: POP
// end ;
32382: PPOPN 2
32384: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32385: LD_EXP 38
32389: PUSH
32390: LD_EXP 91
32394: AND
32395: IFFALSE 32683
32397: GO 32399
32399: DISABLE
32400: LD_INT 0
32402: PPUSH
32403: PPUSH
32404: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32405: LD_OWVAR 2
32409: PPUSH
32410: LD_INT 9
32412: PPUSH
32413: LD_INT 1
32415: PPUSH
32416: LD_INT 1
32418: PPUSH
32419: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32423: LD_INT 9
32425: PPUSH
32426: LD_OWVAR 2
32430: PPUSH
32431: CALL_OW 343
// uc_side := 9 ;
32435: LD_ADDR_OWVAR 20
32439: PUSH
32440: LD_INT 9
32442: ST_TO_ADDR
// uc_nation := 2 ;
32443: LD_ADDR_OWVAR 21
32447: PUSH
32448: LD_INT 2
32450: ST_TO_ADDR
// hc_name := Dark Warrior ;
32451: LD_ADDR_OWVAR 26
32455: PUSH
32456: LD_STRING Dark Warrior
32458: ST_TO_ADDR
// hc_gallery :=  ;
32459: LD_ADDR_OWVAR 33
32463: PUSH
32464: LD_STRING 
32466: ST_TO_ADDR
// hc_noskilllimit := true ;
32467: LD_ADDR_OWVAR 76
32471: PUSH
32472: LD_INT 1
32474: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32475: LD_ADDR_OWVAR 31
32479: PUSH
32480: LD_INT 30
32482: PUSH
32483: LD_INT 30
32485: PUSH
32486: LD_INT 30
32488: PUSH
32489: LD_INT 30
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: ST_TO_ADDR
// un := CreateHuman ;
32498: LD_ADDR_VAR 0 3
32502: PUSH
32503: CALL_OW 44
32507: ST_TO_ADDR
// hc_noskilllimit := false ;
32508: LD_ADDR_OWVAR 76
32512: PUSH
32513: LD_INT 0
32515: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32516: LD_VAR 0 3
32520: PPUSH
32521: LD_INT 1
32523: PPUSH
32524: CALL_OW 51
// ToLua ( playRanger() ) ;
32528: LD_STRING playRanger()
32530: PPUSH
32531: CALL_OW 559
// p := 0 ;
32535: LD_ADDR_VAR 0 2
32539: PUSH
32540: LD_INT 0
32542: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32543: LD_INT 35
32545: PPUSH
32546: CALL_OW 67
// p := p + 1 ;
32550: LD_ADDR_VAR 0 2
32554: PUSH
32555: LD_VAR 0 2
32559: PUSH
32560: LD_INT 1
32562: PLUS
32563: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32564: LD_VAR 0 3
32568: PPUSH
32569: CALL_OW 256
32573: PUSH
32574: LD_INT 1000
32576: LESS
32577: IFFALSE 32591
// SetLives ( un , 1000 ) ;
32579: LD_VAR 0 3
32583: PPUSH
32584: LD_INT 1000
32586: PPUSH
32587: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32591: LD_VAR 0 3
32595: PPUSH
32596: LD_INT 81
32598: PUSH
32599: LD_OWVAR 2
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 91
32610: PUSH
32611: LD_VAR 0 3
32615: PUSH
32616: LD_INT 30
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: LIST
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PPUSH
32628: CALL_OW 69
32632: PPUSH
32633: LD_VAR 0 3
32637: PPUSH
32638: CALL_OW 74
32642: PPUSH
32643: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32647: LD_VAR 0 2
32651: PUSH
32652: LD_INT 80
32654: GREATER
32655: PUSH
32656: LD_VAR 0 3
32660: PPUSH
32661: CALL_OW 301
32665: OR
32666: IFFALSE 32543
// if un then
32668: LD_VAR 0 3
32672: IFFALSE 32683
// RemoveUnit ( un ) ;
32674: LD_VAR 0 3
32678: PPUSH
32679: CALL_OW 64
// end ;
32683: PPOPN 3
32685: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32686: LD_EXP 92
32690: IFFALSE 32806
32692: GO 32694
32694: DISABLE
32695: LD_INT 0
32697: PPUSH
32698: PPUSH
32699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32700: LD_ADDR_VAR 0 2
32704: PUSH
32705: LD_INT 81
32707: PUSH
32708: LD_OWVAR 2
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 21
32719: PUSH
32720: LD_INT 1
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PPUSH
32731: CALL_OW 69
32735: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32736: LD_STRING playComputer()
32738: PPUSH
32739: CALL_OW 559
// if not tmp then
32743: LD_VAR 0 2
32747: NOT
32748: IFFALSE 32752
// exit ;
32750: GO 32806
// for i in tmp do
32752: LD_ADDR_VAR 0 1
32756: PUSH
32757: LD_VAR 0 2
32761: PUSH
32762: FOR_IN
32763: IFFALSE 32804
// for j := 1 to 4 do
32765: LD_ADDR_VAR 0 3
32769: PUSH
32770: DOUBLE
32771: LD_INT 1
32773: DEC
32774: ST_TO_ADDR
32775: LD_INT 4
32777: PUSH
32778: FOR_TO
32779: IFFALSE 32800
// SetSkill ( i , j , 10 ) ;
32781: LD_VAR 0 1
32785: PPUSH
32786: LD_VAR 0 3
32790: PPUSH
32791: LD_INT 10
32793: PPUSH
32794: CALL_OW 237
32798: GO 32778
32800: POP
32801: POP
32802: GO 32762
32804: POP
32805: POP
// end ;
32806: PPOPN 3
32808: END
// every 0 0$1 trigger s30 do var i , tmp ;
32809: LD_EXP 93
32813: IFFALSE 32882
32815: GO 32817
32817: DISABLE
32818: LD_INT 0
32820: PPUSH
32821: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32822: LD_ADDR_VAR 0 2
32826: PUSH
32827: LD_INT 22
32829: PUSH
32830: LD_OWVAR 2
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PPUSH
32839: CALL_OW 69
32843: ST_TO_ADDR
// if not tmp then
32844: LD_VAR 0 2
32848: NOT
32849: IFFALSE 32853
// exit ;
32851: GO 32882
// for i in tmp do
32853: LD_ADDR_VAR 0 1
32857: PUSH
32858: LD_VAR 0 2
32862: PUSH
32863: FOR_IN
32864: IFFALSE 32880
// SetLives ( i , 300 ) ;
32866: LD_VAR 0 1
32870: PPUSH
32871: LD_INT 300
32873: PPUSH
32874: CALL_OW 234
32878: GO 32863
32880: POP
32881: POP
// end ;
32882: PPOPN 2
32884: END
// every 0 0$1 trigger s60 do var i , tmp ;
32885: LD_EXP 94
32889: IFFALSE 32958
32891: GO 32893
32893: DISABLE
32894: LD_INT 0
32896: PPUSH
32897: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32898: LD_ADDR_VAR 0 2
32902: PUSH
32903: LD_INT 22
32905: PUSH
32906: LD_OWVAR 2
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PPUSH
32915: CALL_OW 69
32919: ST_TO_ADDR
// if not tmp then
32920: LD_VAR 0 2
32924: NOT
32925: IFFALSE 32929
// exit ;
32927: GO 32958
// for i in tmp do
32929: LD_ADDR_VAR 0 1
32933: PUSH
32934: LD_VAR 0 2
32938: PUSH
32939: FOR_IN
32940: IFFALSE 32956
// SetLives ( i , 600 ) ;
32942: LD_VAR 0 1
32946: PPUSH
32947: LD_INT 600
32949: PPUSH
32950: CALL_OW 234
32954: GO 32939
32956: POP
32957: POP
// end ;
32958: PPOPN 2
32960: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32961: LD_INT 0
32963: PPUSH
// case cmd of 301 :
32964: LD_VAR 0 1
32968: PUSH
32969: LD_INT 301
32971: DOUBLE
32972: EQUAL
32973: IFTRUE 32977
32975: GO 33009
32977: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32978: LD_VAR 0 6
32982: PPUSH
32983: LD_VAR 0 7
32987: PPUSH
32988: LD_VAR 0 8
32992: PPUSH
32993: LD_VAR 0 4
32997: PPUSH
32998: LD_VAR 0 5
33002: PPUSH
33003: CALL 34218 0 5
33007: GO 33130
33009: LD_INT 302
33011: DOUBLE
33012: EQUAL
33013: IFTRUE 33017
33015: GO 33054
33017: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33018: LD_VAR 0 6
33022: PPUSH
33023: LD_VAR 0 7
33027: PPUSH
33028: LD_VAR 0 8
33032: PPUSH
33033: LD_VAR 0 9
33037: PPUSH
33038: LD_VAR 0 4
33042: PPUSH
33043: LD_VAR 0 5
33047: PPUSH
33048: CALL 34309 0 6
33052: GO 33130
33054: LD_INT 303
33056: DOUBLE
33057: EQUAL
33058: IFTRUE 33062
33060: GO 33099
33062: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33063: LD_VAR 0 6
33067: PPUSH
33068: LD_VAR 0 7
33072: PPUSH
33073: LD_VAR 0 8
33077: PPUSH
33078: LD_VAR 0 9
33082: PPUSH
33083: LD_VAR 0 4
33087: PPUSH
33088: LD_VAR 0 5
33092: PPUSH
33093: CALL 33135 0 6
33097: GO 33130
33099: LD_INT 304
33101: DOUBLE
33102: EQUAL
33103: IFTRUE 33107
33105: GO 33129
33107: POP
// hHackTeleport ( unit , x , y ) ; end ;
33108: LD_VAR 0 2
33112: PPUSH
33113: LD_VAR 0 4
33117: PPUSH
33118: LD_VAR 0 5
33122: PPUSH
33123: CALL 34902 0 3
33127: GO 33130
33129: POP
// end ;
33130: LD_VAR 0 12
33134: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33135: LD_INT 0
33137: PPUSH
33138: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33139: LD_VAR 0 1
33143: PUSH
33144: LD_INT 1
33146: LESS
33147: PUSH
33148: LD_VAR 0 1
33152: PUSH
33153: LD_INT 3
33155: GREATER
33156: OR
33157: PUSH
33158: LD_VAR 0 5
33162: PPUSH
33163: LD_VAR 0 6
33167: PPUSH
33168: CALL_OW 428
33172: OR
33173: IFFALSE 33177
// exit ;
33175: GO 33905
// uc_side := your_side ;
33177: LD_ADDR_OWVAR 20
33181: PUSH
33182: LD_OWVAR 2
33186: ST_TO_ADDR
// uc_nation := nation ;
33187: LD_ADDR_OWVAR 21
33191: PUSH
33192: LD_VAR 0 1
33196: ST_TO_ADDR
// bc_level = 1 ;
33197: LD_ADDR_OWVAR 43
33201: PUSH
33202: LD_INT 1
33204: ST_TO_ADDR
// case btype of 1 :
33205: LD_VAR 0 2
33209: PUSH
33210: LD_INT 1
33212: DOUBLE
33213: EQUAL
33214: IFTRUE 33218
33216: GO 33229
33218: POP
// bc_type := b_depot ; 2 :
33219: LD_ADDR_OWVAR 42
33223: PUSH
33224: LD_INT 0
33226: ST_TO_ADDR
33227: GO 33849
33229: LD_INT 2
33231: DOUBLE
33232: EQUAL
33233: IFTRUE 33237
33235: GO 33248
33237: POP
// bc_type := b_warehouse ; 3 :
33238: LD_ADDR_OWVAR 42
33242: PUSH
33243: LD_INT 1
33245: ST_TO_ADDR
33246: GO 33849
33248: LD_INT 3
33250: DOUBLE
33251: EQUAL
33252: IFTRUE 33256
33254: GO 33267
33256: POP
// bc_type := b_lab ; 4 .. 9 :
33257: LD_ADDR_OWVAR 42
33261: PUSH
33262: LD_INT 6
33264: ST_TO_ADDR
33265: GO 33849
33267: LD_INT 4
33269: DOUBLE
33270: GREATEREQUAL
33271: IFFALSE 33279
33273: LD_INT 9
33275: DOUBLE
33276: LESSEQUAL
33277: IFTRUE 33281
33279: GO 33341
33281: POP
// begin bc_type := b_lab_half ;
33282: LD_ADDR_OWVAR 42
33286: PUSH
33287: LD_INT 7
33289: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33290: LD_ADDR_OWVAR 44
33294: PUSH
33295: LD_INT 10
33297: PUSH
33298: LD_INT 11
33300: PUSH
33301: LD_INT 12
33303: PUSH
33304: LD_INT 15
33306: PUSH
33307: LD_INT 14
33309: PUSH
33310: LD_INT 13
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: PUSH
33321: LD_VAR 0 2
33325: PUSH
33326: LD_INT 3
33328: MINUS
33329: ARRAY
33330: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33331: LD_ADDR_OWVAR 45
33335: PUSH
33336: LD_INT 9
33338: ST_TO_ADDR
// end ; 10 .. 13 :
33339: GO 33849
33341: LD_INT 10
33343: DOUBLE
33344: GREATEREQUAL
33345: IFFALSE 33353
33347: LD_INT 13
33349: DOUBLE
33350: LESSEQUAL
33351: IFTRUE 33355
33353: GO 33432
33355: POP
// begin bc_type := b_lab_full ;
33356: LD_ADDR_OWVAR 42
33360: PUSH
33361: LD_INT 8
33363: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33364: LD_ADDR_OWVAR 44
33368: PUSH
33369: LD_INT 10
33371: PUSH
33372: LD_INT 12
33374: PUSH
33375: LD_INT 14
33377: PUSH
33378: LD_INT 13
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: PUSH
33387: LD_VAR 0 2
33391: PUSH
33392: LD_INT 9
33394: MINUS
33395: ARRAY
33396: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33397: LD_ADDR_OWVAR 45
33401: PUSH
33402: LD_INT 11
33404: PUSH
33405: LD_INT 15
33407: PUSH
33408: LD_INT 12
33410: PUSH
33411: LD_INT 15
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: PUSH
33420: LD_VAR 0 2
33424: PUSH
33425: LD_INT 9
33427: MINUS
33428: ARRAY
33429: ST_TO_ADDR
// end ; 14 :
33430: GO 33849
33432: LD_INT 14
33434: DOUBLE
33435: EQUAL
33436: IFTRUE 33440
33438: GO 33451
33440: POP
// bc_type := b_workshop ; 15 :
33441: LD_ADDR_OWVAR 42
33445: PUSH
33446: LD_INT 2
33448: ST_TO_ADDR
33449: GO 33849
33451: LD_INT 15
33453: DOUBLE
33454: EQUAL
33455: IFTRUE 33459
33457: GO 33470
33459: POP
// bc_type := b_factory ; 16 :
33460: LD_ADDR_OWVAR 42
33464: PUSH
33465: LD_INT 3
33467: ST_TO_ADDR
33468: GO 33849
33470: LD_INT 16
33472: DOUBLE
33473: EQUAL
33474: IFTRUE 33478
33476: GO 33489
33478: POP
// bc_type := b_ext_gun ; 17 :
33479: LD_ADDR_OWVAR 42
33483: PUSH
33484: LD_INT 17
33486: ST_TO_ADDR
33487: GO 33849
33489: LD_INT 17
33491: DOUBLE
33492: EQUAL
33493: IFTRUE 33497
33495: GO 33525
33497: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33498: LD_ADDR_OWVAR 42
33502: PUSH
33503: LD_INT 19
33505: PUSH
33506: LD_INT 23
33508: PUSH
33509: LD_INT 19
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: LIST
33516: PUSH
33517: LD_VAR 0 1
33521: ARRAY
33522: ST_TO_ADDR
33523: GO 33849
33525: LD_INT 18
33527: DOUBLE
33528: EQUAL
33529: IFTRUE 33533
33531: GO 33544
33533: POP
// bc_type := b_ext_radar ; 19 :
33534: LD_ADDR_OWVAR 42
33538: PUSH
33539: LD_INT 20
33541: ST_TO_ADDR
33542: GO 33849
33544: LD_INT 19
33546: DOUBLE
33547: EQUAL
33548: IFTRUE 33552
33550: GO 33563
33552: POP
// bc_type := b_ext_radio ; 20 :
33553: LD_ADDR_OWVAR 42
33557: PUSH
33558: LD_INT 22
33560: ST_TO_ADDR
33561: GO 33849
33563: LD_INT 20
33565: DOUBLE
33566: EQUAL
33567: IFTRUE 33571
33569: GO 33582
33571: POP
// bc_type := b_ext_siberium ; 21 :
33572: LD_ADDR_OWVAR 42
33576: PUSH
33577: LD_INT 21
33579: ST_TO_ADDR
33580: GO 33849
33582: LD_INT 21
33584: DOUBLE
33585: EQUAL
33586: IFTRUE 33590
33588: GO 33601
33590: POP
// bc_type := b_ext_computer ; 22 :
33591: LD_ADDR_OWVAR 42
33595: PUSH
33596: LD_INT 24
33598: ST_TO_ADDR
33599: GO 33849
33601: LD_INT 22
33603: DOUBLE
33604: EQUAL
33605: IFTRUE 33609
33607: GO 33620
33609: POP
// bc_type := b_ext_track ; 23 :
33610: LD_ADDR_OWVAR 42
33614: PUSH
33615: LD_INT 16
33617: ST_TO_ADDR
33618: GO 33849
33620: LD_INT 23
33622: DOUBLE
33623: EQUAL
33624: IFTRUE 33628
33626: GO 33639
33628: POP
// bc_type := b_ext_laser ; 24 :
33629: LD_ADDR_OWVAR 42
33633: PUSH
33634: LD_INT 25
33636: ST_TO_ADDR
33637: GO 33849
33639: LD_INT 24
33641: DOUBLE
33642: EQUAL
33643: IFTRUE 33647
33645: GO 33658
33647: POP
// bc_type := b_control_tower ; 25 :
33648: LD_ADDR_OWVAR 42
33652: PUSH
33653: LD_INT 36
33655: ST_TO_ADDR
33656: GO 33849
33658: LD_INT 25
33660: DOUBLE
33661: EQUAL
33662: IFTRUE 33666
33664: GO 33677
33666: POP
// bc_type := b_breastwork ; 26 :
33667: LD_ADDR_OWVAR 42
33671: PUSH
33672: LD_INT 31
33674: ST_TO_ADDR
33675: GO 33849
33677: LD_INT 26
33679: DOUBLE
33680: EQUAL
33681: IFTRUE 33685
33683: GO 33696
33685: POP
// bc_type := b_bunker ; 27 :
33686: LD_ADDR_OWVAR 42
33690: PUSH
33691: LD_INT 32
33693: ST_TO_ADDR
33694: GO 33849
33696: LD_INT 27
33698: DOUBLE
33699: EQUAL
33700: IFTRUE 33704
33702: GO 33715
33704: POP
// bc_type := b_turret ; 28 :
33705: LD_ADDR_OWVAR 42
33709: PUSH
33710: LD_INT 33
33712: ST_TO_ADDR
33713: GO 33849
33715: LD_INT 28
33717: DOUBLE
33718: EQUAL
33719: IFTRUE 33723
33721: GO 33734
33723: POP
// bc_type := b_armoury ; 29 :
33724: LD_ADDR_OWVAR 42
33728: PUSH
33729: LD_INT 4
33731: ST_TO_ADDR
33732: GO 33849
33734: LD_INT 29
33736: DOUBLE
33737: EQUAL
33738: IFTRUE 33742
33740: GO 33753
33742: POP
// bc_type := b_barracks ; 30 :
33743: LD_ADDR_OWVAR 42
33747: PUSH
33748: LD_INT 5
33750: ST_TO_ADDR
33751: GO 33849
33753: LD_INT 30
33755: DOUBLE
33756: EQUAL
33757: IFTRUE 33761
33759: GO 33772
33761: POP
// bc_type := b_solar_power ; 31 :
33762: LD_ADDR_OWVAR 42
33766: PUSH
33767: LD_INT 27
33769: ST_TO_ADDR
33770: GO 33849
33772: LD_INT 31
33774: DOUBLE
33775: EQUAL
33776: IFTRUE 33780
33778: GO 33791
33780: POP
// bc_type := b_oil_power ; 32 :
33781: LD_ADDR_OWVAR 42
33785: PUSH
33786: LD_INT 26
33788: ST_TO_ADDR
33789: GO 33849
33791: LD_INT 32
33793: DOUBLE
33794: EQUAL
33795: IFTRUE 33799
33797: GO 33810
33799: POP
// bc_type := b_siberite_power ; 33 :
33800: LD_ADDR_OWVAR 42
33804: PUSH
33805: LD_INT 28
33807: ST_TO_ADDR
33808: GO 33849
33810: LD_INT 33
33812: DOUBLE
33813: EQUAL
33814: IFTRUE 33818
33816: GO 33829
33818: POP
// bc_type := b_oil_mine ; 34 :
33819: LD_ADDR_OWVAR 42
33823: PUSH
33824: LD_INT 29
33826: ST_TO_ADDR
33827: GO 33849
33829: LD_INT 34
33831: DOUBLE
33832: EQUAL
33833: IFTRUE 33837
33835: GO 33848
33837: POP
// bc_type := b_siberite_mine ; end ;
33838: LD_ADDR_OWVAR 42
33842: PUSH
33843: LD_INT 30
33845: ST_TO_ADDR
33846: GO 33849
33848: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33849: LD_ADDR_VAR 0 8
33853: PUSH
33854: LD_VAR 0 5
33858: PPUSH
33859: LD_VAR 0 6
33863: PPUSH
33864: LD_VAR 0 3
33868: PPUSH
33869: CALL_OW 47
33873: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33874: LD_OWVAR 42
33878: PUSH
33879: LD_INT 32
33881: PUSH
33882: LD_INT 33
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: IN
33889: IFFALSE 33905
// PlaceWeaponTurret ( b , weapon ) ;
33891: LD_VAR 0 8
33895: PPUSH
33896: LD_VAR 0 4
33900: PPUSH
33901: CALL_OW 431
// end ;
33905: LD_VAR 0 7
33909: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33910: LD_INT 0
33912: PPUSH
33913: PPUSH
33914: PPUSH
33915: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33916: LD_ADDR_VAR 0 4
33920: PUSH
33921: LD_INT 22
33923: PUSH
33924: LD_OWVAR 2
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 2
33935: PUSH
33936: LD_INT 30
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 30
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: LIST
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PPUSH
33965: CALL_OW 69
33969: ST_TO_ADDR
// if not tmp then
33970: LD_VAR 0 4
33974: NOT
33975: IFFALSE 33979
// exit ;
33977: GO 34038
// for i in tmp do
33979: LD_ADDR_VAR 0 2
33983: PUSH
33984: LD_VAR 0 4
33988: PUSH
33989: FOR_IN
33990: IFFALSE 34036
// for j = 1 to 3 do
33992: LD_ADDR_VAR 0 3
33996: PUSH
33997: DOUBLE
33998: LD_INT 1
34000: DEC
34001: ST_TO_ADDR
34002: LD_INT 3
34004: PUSH
34005: FOR_TO
34006: IFFALSE 34032
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34008: LD_VAR 0 2
34012: PPUSH
34013: CALL_OW 274
34017: PPUSH
34018: LD_VAR 0 3
34022: PPUSH
34023: LD_INT 99999
34025: PPUSH
34026: CALL_OW 277
34030: GO 34005
34032: POP
34033: POP
34034: GO 33989
34036: POP
34037: POP
// end ;
34038: LD_VAR 0 1
34042: RET
// export function hHackSetLevel10 ; var i , j ; begin
34043: LD_INT 0
34045: PPUSH
34046: PPUSH
34047: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34048: LD_ADDR_VAR 0 2
34052: PUSH
34053: LD_INT 21
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PPUSH
34063: CALL_OW 69
34067: PUSH
34068: FOR_IN
34069: IFFALSE 34121
// if IsSelected ( i ) then
34071: LD_VAR 0 2
34075: PPUSH
34076: CALL_OW 306
34080: IFFALSE 34119
// begin for j := 1 to 4 do
34082: LD_ADDR_VAR 0 3
34086: PUSH
34087: DOUBLE
34088: LD_INT 1
34090: DEC
34091: ST_TO_ADDR
34092: LD_INT 4
34094: PUSH
34095: FOR_TO
34096: IFFALSE 34117
// SetSkill ( i , j , 10 ) ;
34098: LD_VAR 0 2
34102: PPUSH
34103: LD_VAR 0 3
34107: PPUSH
34108: LD_INT 10
34110: PPUSH
34111: CALL_OW 237
34115: GO 34095
34117: POP
34118: POP
// end ;
34119: GO 34068
34121: POP
34122: POP
// end ;
34123: LD_VAR 0 1
34127: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34128: LD_INT 0
34130: PPUSH
34131: PPUSH
34132: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34133: LD_ADDR_VAR 0 2
34137: PUSH
34138: LD_INT 22
34140: PUSH
34141: LD_OWVAR 2
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 21
34152: PUSH
34153: LD_INT 1
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PPUSH
34164: CALL_OW 69
34168: PUSH
34169: FOR_IN
34170: IFFALSE 34211
// begin for j := 1 to 4 do
34172: LD_ADDR_VAR 0 3
34176: PUSH
34177: DOUBLE
34178: LD_INT 1
34180: DEC
34181: ST_TO_ADDR
34182: LD_INT 4
34184: PUSH
34185: FOR_TO
34186: IFFALSE 34207
// SetSkill ( i , j , 10 ) ;
34188: LD_VAR 0 2
34192: PPUSH
34193: LD_VAR 0 3
34197: PPUSH
34198: LD_INT 10
34200: PPUSH
34201: CALL_OW 237
34205: GO 34185
34207: POP
34208: POP
// end ;
34209: GO 34169
34211: POP
34212: POP
// end ;
34213: LD_VAR 0 1
34217: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34218: LD_INT 0
34220: PPUSH
// uc_side := your_side ;
34221: LD_ADDR_OWVAR 20
34225: PUSH
34226: LD_OWVAR 2
34230: ST_TO_ADDR
// uc_nation := nation ;
34231: LD_ADDR_OWVAR 21
34235: PUSH
34236: LD_VAR 0 1
34240: ST_TO_ADDR
// InitHc ;
34241: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34245: LD_INT 0
34247: PPUSH
34248: LD_VAR 0 2
34252: PPUSH
34253: LD_VAR 0 3
34257: PPUSH
34258: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34262: LD_VAR 0 4
34266: PPUSH
34267: LD_VAR 0 5
34271: PPUSH
34272: CALL_OW 428
34276: PUSH
34277: LD_INT 0
34279: EQUAL
34280: IFFALSE 34304
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34282: CALL_OW 44
34286: PPUSH
34287: LD_VAR 0 4
34291: PPUSH
34292: LD_VAR 0 5
34296: PPUSH
34297: LD_INT 1
34299: PPUSH
34300: CALL_OW 48
// end ;
34304: LD_VAR 0 6
34308: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34309: LD_INT 0
34311: PPUSH
34312: PPUSH
// uc_side := your_side ;
34313: LD_ADDR_OWVAR 20
34317: PUSH
34318: LD_OWVAR 2
34322: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34323: LD_VAR 0 1
34327: PUSH
34328: LD_INT 1
34330: PUSH
34331: LD_INT 2
34333: PUSH
34334: LD_INT 3
34336: PUSH
34337: LD_INT 4
34339: PUSH
34340: LD_INT 5
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: IN
34350: IFFALSE 34362
// uc_nation := nation_american else
34352: LD_ADDR_OWVAR 21
34356: PUSH
34357: LD_INT 1
34359: ST_TO_ADDR
34360: GO 34405
// if chassis in [ 11 , 12 , 13 , 14 ] then
34362: LD_VAR 0 1
34366: PUSH
34367: LD_INT 11
34369: PUSH
34370: LD_INT 12
34372: PUSH
34373: LD_INT 13
34375: PUSH
34376: LD_INT 14
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: IN
34385: IFFALSE 34397
// uc_nation := nation_arabian else
34387: LD_ADDR_OWVAR 21
34391: PUSH
34392: LD_INT 2
34394: ST_TO_ADDR
34395: GO 34405
// uc_nation := nation_russian ;
34397: LD_ADDR_OWVAR 21
34401: PUSH
34402: LD_INT 3
34404: ST_TO_ADDR
// vc_chassis := chassis ;
34405: LD_ADDR_OWVAR 37
34409: PUSH
34410: LD_VAR 0 1
34414: ST_TO_ADDR
// vc_engine := engine ;
34415: LD_ADDR_OWVAR 39
34419: PUSH
34420: LD_VAR 0 2
34424: ST_TO_ADDR
// vc_control := control ;
34425: LD_ADDR_OWVAR 38
34429: PUSH
34430: LD_VAR 0 3
34434: ST_TO_ADDR
// vc_weapon := weapon ;
34435: LD_ADDR_OWVAR 40
34439: PUSH
34440: LD_VAR 0 4
34444: ST_TO_ADDR
// un := CreateVehicle ;
34445: LD_ADDR_VAR 0 8
34449: PUSH
34450: CALL_OW 45
34454: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34455: LD_VAR 0 8
34459: PPUSH
34460: LD_INT 0
34462: PPUSH
34463: LD_INT 5
34465: PPUSH
34466: CALL_OW 12
34470: PPUSH
34471: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34475: LD_VAR 0 8
34479: PPUSH
34480: LD_VAR 0 5
34484: PPUSH
34485: LD_VAR 0 6
34489: PPUSH
34490: LD_INT 1
34492: PPUSH
34493: CALL_OW 48
// end ;
34497: LD_VAR 0 7
34501: RET
// export hInvincible ; every 1 do
34502: GO 34504
34504: DISABLE
// hInvincible := [ ] ;
34505: LD_ADDR_EXP 95
34509: PUSH
34510: EMPTY
34511: ST_TO_ADDR
34512: END
// every 10 do var i ;
34513: GO 34515
34515: DISABLE
34516: LD_INT 0
34518: PPUSH
// begin enable ;
34519: ENABLE
// if not hInvincible then
34520: LD_EXP 95
34524: NOT
34525: IFFALSE 34529
// exit ;
34527: GO 34573
// for i in hInvincible do
34529: LD_ADDR_VAR 0 1
34533: PUSH
34534: LD_EXP 95
34538: PUSH
34539: FOR_IN
34540: IFFALSE 34571
// if GetLives ( i ) < 1000 then
34542: LD_VAR 0 1
34546: PPUSH
34547: CALL_OW 256
34551: PUSH
34552: LD_INT 1000
34554: LESS
34555: IFFALSE 34569
// SetLives ( i , 1000 ) ;
34557: LD_VAR 0 1
34561: PPUSH
34562: LD_INT 1000
34564: PPUSH
34565: CALL_OW 234
34569: GO 34539
34571: POP
34572: POP
// end ;
34573: PPOPN 1
34575: END
// export function hHackInvincible ; var i ; begin
34576: LD_INT 0
34578: PPUSH
34579: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34580: LD_ADDR_VAR 0 2
34584: PUSH
34585: LD_INT 2
34587: PUSH
34588: LD_INT 21
34590: PUSH
34591: LD_INT 1
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 21
34600: PUSH
34601: LD_INT 2
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: LIST
34612: PPUSH
34613: CALL_OW 69
34617: PUSH
34618: FOR_IN
34619: IFFALSE 34680
// if IsSelected ( i ) then
34621: LD_VAR 0 2
34625: PPUSH
34626: CALL_OW 306
34630: IFFALSE 34678
// begin if i in hInvincible then
34632: LD_VAR 0 2
34636: PUSH
34637: LD_EXP 95
34641: IN
34642: IFFALSE 34662
// hInvincible := hInvincible diff i else
34644: LD_ADDR_EXP 95
34648: PUSH
34649: LD_EXP 95
34653: PUSH
34654: LD_VAR 0 2
34658: DIFF
34659: ST_TO_ADDR
34660: GO 34678
// hInvincible := hInvincible union i ;
34662: LD_ADDR_EXP 95
34666: PUSH
34667: LD_EXP 95
34671: PUSH
34672: LD_VAR 0 2
34676: UNION
34677: ST_TO_ADDR
// end ;
34678: GO 34618
34680: POP
34681: POP
// end ;
34682: LD_VAR 0 1
34686: RET
// export function hHackInvisible ; var i , j ; begin
34687: LD_INT 0
34689: PPUSH
34690: PPUSH
34691: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34692: LD_ADDR_VAR 0 2
34696: PUSH
34697: LD_INT 21
34699: PUSH
34700: LD_INT 1
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PPUSH
34707: CALL_OW 69
34711: PUSH
34712: FOR_IN
34713: IFFALSE 34737
// if IsSelected ( i ) then
34715: LD_VAR 0 2
34719: PPUSH
34720: CALL_OW 306
34724: IFFALSE 34735
// ComForceInvisible ( i ) ;
34726: LD_VAR 0 2
34730: PPUSH
34731: CALL_OW 496
34735: GO 34712
34737: POP
34738: POP
// end ;
34739: LD_VAR 0 1
34743: RET
// export function hHackChangeYourSide ; begin
34744: LD_INT 0
34746: PPUSH
// if your_side = 8 then
34747: LD_OWVAR 2
34751: PUSH
34752: LD_INT 8
34754: EQUAL
34755: IFFALSE 34767
// your_side := 0 else
34757: LD_ADDR_OWVAR 2
34761: PUSH
34762: LD_INT 0
34764: ST_TO_ADDR
34765: GO 34781
// your_side := your_side + 1 ;
34767: LD_ADDR_OWVAR 2
34771: PUSH
34772: LD_OWVAR 2
34776: PUSH
34777: LD_INT 1
34779: PLUS
34780: ST_TO_ADDR
// end ;
34781: LD_VAR 0 1
34785: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34786: LD_INT 0
34788: PPUSH
34789: PPUSH
34790: PPUSH
// for i in all_units do
34791: LD_ADDR_VAR 0 2
34795: PUSH
34796: LD_OWVAR 3
34800: PUSH
34801: FOR_IN
34802: IFFALSE 34880
// if IsSelected ( i ) then
34804: LD_VAR 0 2
34808: PPUSH
34809: CALL_OW 306
34813: IFFALSE 34878
// begin j := GetSide ( i ) ;
34815: LD_ADDR_VAR 0 3
34819: PUSH
34820: LD_VAR 0 2
34824: PPUSH
34825: CALL_OW 255
34829: ST_TO_ADDR
// if j = 8 then
34830: LD_VAR 0 3
34834: PUSH
34835: LD_INT 8
34837: EQUAL
34838: IFFALSE 34850
// j := 0 else
34840: LD_ADDR_VAR 0 3
34844: PUSH
34845: LD_INT 0
34847: ST_TO_ADDR
34848: GO 34864
// j := j + 1 ;
34850: LD_ADDR_VAR 0 3
34854: PUSH
34855: LD_VAR 0 3
34859: PUSH
34860: LD_INT 1
34862: PLUS
34863: ST_TO_ADDR
// SetSide ( i , j ) ;
34864: LD_VAR 0 2
34868: PPUSH
34869: LD_VAR 0 3
34873: PPUSH
34874: CALL_OW 235
// end ;
34878: GO 34801
34880: POP
34881: POP
// end ;
34882: LD_VAR 0 1
34886: RET
// export function hHackFog ; begin
34887: LD_INT 0
34889: PPUSH
// FogOff ( true ) ;
34890: LD_INT 1
34892: PPUSH
34893: CALL_OW 344
// end ;
34897: LD_VAR 0 1
34901: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34902: LD_INT 0
34904: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34905: LD_VAR 0 1
34909: PPUSH
34910: LD_VAR 0 2
34914: PPUSH
34915: LD_VAR 0 3
34919: PPUSH
34920: LD_INT 1
34922: PPUSH
34923: LD_INT 1
34925: PPUSH
34926: CALL_OW 483
// CenterOnXY ( x , y ) ;
34930: LD_VAR 0 2
34934: PPUSH
34935: LD_VAR 0 3
34939: PPUSH
34940: CALL_OW 84
// end ;
34944: LD_VAR 0 4
34948: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34949: LD_INT 0
34951: PPUSH
34952: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34953: LD_VAR 0 1
34957: NOT
34958: PUSH
34959: LD_VAR 0 2
34963: PPUSH
34964: LD_VAR 0 3
34968: PPUSH
34969: CALL_OW 488
34973: NOT
34974: OR
34975: PUSH
34976: LD_VAR 0 1
34980: PPUSH
34981: CALL_OW 266
34985: PUSH
34986: LD_INT 3
34988: NONEQUAL
34989: PUSH
34990: LD_VAR 0 1
34994: PPUSH
34995: CALL_OW 247
34999: PUSH
35000: LD_INT 1
35002: EQUAL
35003: NOT
35004: AND
35005: OR
35006: IFFALSE 35010
// exit ;
35008: GO 35292
// if GetType ( factory ) = unit_human then
35010: LD_VAR 0 1
35014: PPUSH
35015: CALL_OW 247
35019: PUSH
35020: LD_INT 1
35022: EQUAL
35023: IFFALSE 35040
// factory := IsInUnit ( factory ) ;
35025: LD_ADDR_VAR 0 1
35029: PUSH
35030: LD_VAR 0 1
35034: PPUSH
35035: CALL_OW 310
35039: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35040: LD_VAR 0 1
35044: PPUSH
35045: CALL_OW 266
35049: PUSH
35050: LD_INT 3
35052: NONEQUAL
35053: IFFALSE 35057
// exit ;
35055: GO 35292
// for i := 1 to Count ( factoryWaypoints ) do
35057: LD_ADDR_VAR 0 5
35061: PUSH
35062: DOUBLE
35063: LD_INT 1
35065: DEC
35066: ST_TO_ADDR
35067: LD_EXP 96
35071: PPUSH
35072: CALL 43795 0 1
35076: PUSH
35077: FOR_TO
35078: IFFALSE 35240
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
35080: LD_VAR 0 2
35084: PPUSH
35085: LD_VAR 0 3
35089: PPUSH
35090: CALL_OW 428
35094: PUSH
35095: LD_EXP 96
35099: PUSH
35100: LD_VAR 0 5
35104: ARRAY
35105: PUSH
35106: LD_INT 2
35108: ARRAY
35109: EQUAL
35110: IFFALSE 35142
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35112: LD_ADDR_EXP 96
35116: PUSH
35117: LD_EXP 96
35121: PPUSH
35122: LD_VAR 0 5
35126: PPUSH
35127: CALL_OW 3
35131: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35132: CALL 35297 0 0
// exit ;
35136: POP
35137: POP
35138: GO 35292
// end else
35140: GO 35238
// if factory = factoryWaypoints [ i ] [ 2 ] then
35142: LD_VAR 0 1
35146: PUSH
35147: LD_EXP 96
35151: PUSH
35152: LD_VAR 0 5
35156: ARRAY
35157: PUSH
35158: LD_INT 2
35160: ARRAY
35161: EQUAL
35162: IFFALSE 35238
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35164: LD_ADDR_EXP 96
35168: PUSH
35169: LD_EXP 96
35173: PPUSH
35174: LD_VAR 0 5
35178: PPUSH
35179: CALL_OW 3
35183: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35184: LD_ADDR_EXP 96
35188: PUSH
35189: LD_EXP 96
35193: PPUSH
35194: LD_VAR 0 1
35198: PPUSH
35199: CALL_OW 255
35203: PUSH
35204: LD_VAR 0 1
35208: PUSH
35209: LD_VAR 0 2
35213: PUSH
35214: LD_VAR 0 3
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: PPUSH
35225: CALL 79404 0 2
35229: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35230: CALL 35297 0 0
// exit ;
35234: POP
35235: POP
35236: GO 35292
// end ; end ;
35238: GO 35077
35240: POP
35241: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35242: LD_ADDR_EXP 96
35246: PUSH
35247: LD_EXP 96
35251: PPUSH
35252: LD_VAR 0 1
35256: PPUSH
35257: CALL_OW 255
35261: PUSH
35262: LD_VAR 0 1
35266: PUSH
35267: LD_VAR 0 2
35271: PUSH
35272: LD_VAR 0 3
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: PPUSH
35283: CALL 79404 0 2
35287: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35288: CALL 35297 0 0
// end ;
35292: LD_VAR 0 4
35296: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35297: LD_INT 0
35299: PPUSH
35300: PPUSH
35301: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35302: LD_STRING resetFactoryWaypoint();
35304: PPUSH
35305: CALL_OW 559
// if factoryWaypoints then
35309: LD_EXP 96
35313: IFFALSE 35434
// begin list := factoryWaypoints ;
35315: LD_ADDR_VAR 0 3
35319: PUSH
35320: LD_EXP 96
35324: ST_TO_ADDR
// for i := 1 to list do
35325: LD_ADDR_VAR 0 2
35329: PUSH
35330: DOUBLE
35331: LD_INT 1
35333: DEC
35334: ST_TO_ADDR
35335: LD_VAR 0 3
35339: PUSH
35340: FOR_TO
35341: IFFALSE 35432
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35343: LD_STRING setFactoryWaypointXY(
35345: PUSH
35346: LD_VAR 0 3
35350: PUSH
35351: LD_VAR 0 2
35355: ARRAY
35356: PUSH
35357: LD_INT 1
35359: ARRAY
35360: STR
35361: PUSH
35362: LD_STRING ,
35364: STR
35365: PUSH
35366: LD_VAR 0 3
35370: PUSH
35371: LD_VAR 0 2
35375: ARRAY
35376: PUSH
35377: LD_INT 2
35379: ARRAY
35380: STR
35381: PUSH
35382: LD_STRING ,
35384: STR
35385: PUSH
35386: LD_VAR 0 3
35390: PUSH
35391: LD_VAR 0 2
35395: ARRAY
35396: PUSH
35397: LD_INT 3
35399: ARRAY
35400: STR
35401: PUSH
35402: LD_STRING ,
35404: STR
35405: PUSH
35406: LD_VAR 0 3
35410: PUSH
35411: LD_VAR 0 2
35415: ARRAY
35416: PUSH
35417: LD_INT 4
35419: ARRAY
35420: STR
35421: PUSH
35422: LD_STRING )
35424: STR
35425: PPUSH
35426: CALL_OW 559
35430: GO 35340
35432: POP
35433: POP
// end ; end ;
35434: LD_VAR 0 1
35438: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35439: LD_INT 0
35441: PPUSH
// if HexInfo ( x , y ) = warehouse then
35442: LD_VAR 0 2
35446: PPUSH
35447: LD_VAR 0 3
35451: PPUSH
35452: CALL_OW 428
35456: PUSH
35457: LD_VAR 0 1
35461: EQUAL
35462: IFFALSE 35489
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35464: LD_ADDR_EXP 97
35468: PUSH
35469: LD_EXP 97
35473: PPUSH
35474: LD_VAR 0 1
35478: PPUSH
35479: LD_INT 0
35481: PPUSH
35482: CALL_OW 1
35486: ST_TO_ADDR
35487: GO 35540
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35489: LD_ADDR_EXP 97
35493: PUSH
35494: LD_EXP 97
35498: PPUSH
35499: LD_VAR 0 1
35503: PPUSH
35504: LD_VAR 0 1
35508: PPUSH
35509: CALL_OW 255
35513: PUSH
35514: LD_VAR 0 1
35518: PUSH
35519: LD_VAR 0 2
35523: PUSH
35524: LD_VAR 0 3
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: PPUSH
35535: CALL_OW 1
35539: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35540: CALL 35549 0 0
// end ;
35544: LD_VAR 0 4
35548: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35549: LD_INT 0
35551: PPUSH
35552: PPUSH
35553: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35554: LD_STRING resetWarehouseGatheringPoints();
35556: PPUSH
35557: CALL_OW 559
// if warehouseGatheringPoints then
35561: LD_EXP 97
35565: IFFALSE 35691
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35567: LD_ADDR_VAR 0 3
35571: PUSH
35572: LD_EXP 97
35576: PPUSH
35577: CALL 83166 0 1
35581: ST_TO_ADDR
// for i := 1 to list do
35582: LD_ADDR_VAR 0 2
35586: PUSH
35587: DOUBLE
35588: LD_INT 1
35590: DEC
35591: ST_TO_ADDR
35592: LD_VAR 0 3
35596: PUSH
35597: FOR_TO
35598: IFFALSE 35689
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35600: LD_STRING setWarehouseGatheringPointXY(
35602: PUSH
35603: LD_VAR 0 3
35607: PUSH
35608: LD_VAR 0 2
35612: ARRAY
35613: PUSH
35614: LD_INT 1
35616: ARRAY
35617: STR
35618: PUSH
35619: LD_STRING ,
35621: STR
35622: PUSH
35623: LD_VAR 0 3
35627: PUSH
35628: LD_VAR 0 2
35632: ARRAY
35633: PUSH
35634: LD_INT 2
35636: ARRAY
35637: STR
35638: PUSH
35639: LD_STRING ,
35641: STR
35642: PUSH
35643: LD_VAR 0 3
35647: PUSH
35648: LD_VAR 0 2
35652: ARRAY
35653: PUSH
35654: LD_INT 3
35656: ARRAY
35657: STR
35658: PUSH
35659: LD_STRING ,
35661: STR
35662: PUSH
35663: LD_VAR 0 3
35667: PUSH
35668: LD_VAR 0 2
35672: ARRAY
35673: PUSH
35674: LD_INT 4
35676: ARRAY
35677: STR
35678: PUSH
35679: LD_STRING )
35681: STR
35682: PPUSH
35683: CALL_OW 559
35687: GO 35597
35689: POP
35690: POP
// end ; end ;
35691: LD_VAR 0 1
35695: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35696: LD_EXP 97
35700: IFFALSE 36385
35702: GO 35704
35704: DISABLE
35705: LD_INT 0
35707: PPUSH
35708: PPUSH
35709: PPUSH
35710: PPUSH
35711: PPUSH
35712: PPUSH
35713: PPUSH
35714: PPUSH
35715: PPUSH
// begin enable ;
35716: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35717: LD_ADDR_VAR 0 3
35721: PUSH
35722: LD_EXP 97
35726: PPUSH
35727: CALL 83166 0 1
35731: ST_TO_ADDR
// if not list then
35732: LD_VAR 0 3
35736: NOT
35737: IFFALSE 35741
// exit ;
35739: GO 36385
// for i := 1 to list do
35741: LD_ADDR_VAR 0 1
35745: PUSH
35746: DOUBLE
35747: LD_INT 1
35749: DEC
35750: ST_TO_ADDR
35751: LD_VAR 0 3
35755: PUSH
35756: FOR_TO
35757: IFFALSE 36383
// begin depot := list [ i ] [ 2 ] ;
35759: LD_ADDR_VAR 0 8
35763: PUSH
35764: LD_VAR 0 3
35768: PUSH
35769: LD_VAR 0 1
35773: ARRAY
35774: PUSH
35775: LD_INT 2
35777: ARRAY
35778: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35779: LD_ADDR_VAR 0 5
35783: PUSH
35784: LD_VAR 0 3
35788: PUSH
35789: LD_VAR 0 1
35793: ARRAY
35794: PUSH
35795: LD_INT 1
35797: ARRAY
35798: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35799: LD_VAR 0 8
35803: PPUSH
35804: CALL_OW 301
35808: PUSH
35809: LD_VAR 0 5
35813: PUSH
35814: LD_VAR 0 8
35818: PPUSH
35819: CALL_OW 255
35823: NONEQUAL
35824: OR
35825: IFFALSE 35854
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35827: LD_ADDR_EXP 97
35831: PUSH
35832: LD_EXP 97
35836: PPUSH
35837: LD_VAR 0 8
35841: PPUSH
35842: LD_INT 0
35844: PPUSH
35845: CALL_OW 1
35849: ST_TO_ADDR
// exit ;
35850: POP
35851: POP
35852: GO 36385
// end ; x := list [ i ] [ 3 ] ;
35854: LD_ADDR_VAR 0 6
35858: PUSH
35859: LD_VAR 0 3
35863: PUSH
35864: LD_VAR 0 1
35868: ARRAY
35869: PUSH
35870: LD_INT 3
35872: ARRAY
35873: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35874: LD_ADDR_VAR 0 7
35878: PUSH
35879: LD_VAR 0 3
35883: PUSH
35884: LD_VAR 0 1
35888: ARRAY
35889: PUSH
35890: LD_INT 4
35892: ARRAY
35893: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35894: LD_ADDR_VAR 0 9
35898: PUSH
35899: LD_VAR 0 6
35903: PPUSH
35904: LD_VAR 0 7
35908: PPUSH
35909: LD_INT 16
35911: PPUSH
35912: CALL 81750 0 3
35916: ST_TO_ADDR
// if not cratesNearbyPoint then
35917: LD_VAR 0 9
35921: NOT
35922: IFFALSE 35928
// exit ;
35924: POP
35925: POP
35926: GO 36385
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35928: LD_ADDR_VAR 0 4
35932: PUSH
35933: LD_INT 22
35935: PUSH
35936: LD_VAR 0 5
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 3
35947: PUSH
35948: LD_INT 60
35950: PUSH
35951: EMPTY
35952: LIST
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 91
35960: PUSH
35961: LD_VAR 0 8
35965: PUSH
35966: LD_INT 6
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 2
35976: PUSH
35977: LD_INT 25
35979: PUSH
35980: LD_INT 2
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 25
35989: PUSH
35990: LD_INT 16
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: LIST
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: PPUSH
36008: CALL_OW 69
36012: PUSH
36013: LD_VAR 0 8
36017: PPUSH
36018: CALL_OW 313
36022: PPUSH
36023: LD_INT 3
36025: PUSH
36026: LD_INT 60
36028: PUSH
36029: EMPTY
36030: LIST
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 2
36038: PUSH
36039: LD_INT 25
36041: PUSH
36042: LD_INT 2
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 25
36051: PUSH
36052: LD_INT 16
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: LIST
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PPUSH
36068: CALL_OW 72
36072: UNION
36073: ST_TO_ADDR
// if tmp then
36074: LD_VAR 0 4
36078: IFFALSE 36158
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36080: LD_ADDR_VAR 0 4
36084: PUSH
36085: LD_VAR 0 4
36089: PPUSH
36090: LD_INT 3
36092: PPUSH
36093: CALL 79719 0 2
36097: ST_TO_ADDR
// for j in tmp do
36098: LD_ADDR_VAR 0 2
36102: PUSH
36103: LD_VAR 0 4
36107: PUSH
36108: FOR_IN
36109: IFFALSE 36152
// begin if IsInUnit ( j ) then
36111: LD_VAR 0 2
36115: PPUSH
36116: CALL_OW 310
36120: IFFALSE 36131
// ComExit ( j ) ;
36122: LD_VAR 0 2
36126: PPUSH
36127: CALL 79802 0 1
// AddComCollect ( j , x , y ) ;
36131: LD_VAR 0 2
36135: PPUSH
36136: LD_VAR 0 6
36140: PPUSH
36141: LD_VAR 0 7
36145: PPUSH
36146: CALL_OW 177
// end ;
36150: GO 36108
36152: POP
36153: POP
// exit ;
36154: POP
36155: POP
36156: GO 36385
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36158: LD_ADDR_VAR 0 4
36162: PUSH
36163: LD_INT 22
36165: PUSH
36166: LD_VAR 0 5
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 91
36177: PUSH
36178: LD_VAR 0 8
36182: PUSH
36183: LD_INT 8
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 2
36193: PUSH
36194: LD_INT 34
36196: PUSH
36197: LD_INT 12
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 34
36206: PUSH
36207: LD_INT 51
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 34
36216: PUSH
36217: LD_INT 32
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 34
36226: PUSH
36227: LD_INT 89
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: LIST
36245: PPUSH
36246: CALL_OW 69
36250: ST_TO_ADDR
// if tmp then
36251: LD_VAR 0 4
36255: IFFALSE 36381
// begin for j in tmp do
36257: LD_ADDR_VAR 0 2
36261: PUSH
36262: LD_VAR 0 4
36266: PUSH
36267: FOR_IN
36268: IFFALSE 36379
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36270: LD_VAR 0 2
36274: PPUSH
36275: CALL_OW 262
36279: PUSH
36280: LD_INT 3
36282: EQUAL
36283: PUSH
36284: LD_VAR 0 2
36288: PPUSH
36289: CALL_OW 261
36293: PUSH
36294: LD_INT 20
36296: GREATER
36297: OR
36298: PUSH
36299: LD_VAR 0 2
36303: PPUSH
36304: CALL_OW 314
36308: NOT
36309: AND
36310: PUSH
36311: LD_VAR 0 2
36315: PPUSH
36316: CALL_OW 263
36320: PUSH
36321: LD_INT 1
36323: NONEQUAL
36324: PUSH
36325: LD_VAR 0 2
36329: PPUSH
36330: CALL_OW 311
36334: OR
36335: AND
36336: IFFALSE 36377
// begin ComCollect ( j , x , y ) ;
36338: LD_VAR 0 2
36342: PPUSH
36343: LD_VAR 0 6
36347: PPUSH
36348: LD_VAR 0 7
36352: PPUSH
36353: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36357: LD_VAR 0 2
36361: PPUSH
36362: LD_VAR 0 8
36366: PPUSH
36367: CALL_OW 172
// exit ;
36371: POP
36372: POP
36373: POP
36374: POP
36375: GO 36385
// end ;
36377: GO 36267
36379: POP
36380: POP
// end ; end ;
36381: GO 35756
36383: POP
36384: POP
// end ; end_of_file
36385: PPOPN 9
36387: END
// export function SOS_UnitDestroyed ( un ) ; begin
36388: LD_INT 0
36390: PPUSH
// ComRadiation ( un ) ;
36391: LD_VAR 0 1
36395: PPUSH
36396: CALL 37377 0 1
// end ;
36400: LD_VAR 0 2
36404: RET
// export function SOS_UnitKamikazed ( un ) ; begin
36405: LD_INT 0
36407: PPUSH
// ComRadiation ( un ) ;
36408: LD_VAR 0 1
36412: PPUSH
36413: CALL 37377 0 1
// end ;
36417: LD_VAR 0 2
36421: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36422: LD_INT 0
36424: PPUSH
// end ;
36425: LD_VAR 0 4
36429: RET
// export function SOS_Command ( cmd ) ; begin
36430: LD_INT 0
36432: PPUSH
// end ;
36433: LD_VAR 0 2
36437: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36438: LD_INT 0
36440: PPUSH
// end ;
36441: LD_VAR 0 6
36445: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
36446: LD_INT 0
36448: PPUSH
36449: PPUSH
36450: PPUSH
36451: PPUSH
36452: PPUSH
// if not vehicle or not factory then
36453: LD_VAR 0 1
36457: NOT
36458: PUSH
36459: LD_VAR 0 2
36463: NOT
36464: OR
36465: IFFALSE 36469
// exit ;
36467: GO 36968
// if not factoryWaypoints then
36469: LD_EXP 96
36473: NOT
36474: IFFALSE 36478
// exit ;
36476: GO 36968
// for i := 1 to Count ( factoryWaypoints ) do
36478: LD_ADDR_VAR 0 4
36482: PUSH
36483: DOUBLE
36484: LD_INT 1
36486: DEC
36487: ST_TO_ADDR
36488: LD_EXP 96
36492: PPUSH
36493: CALL 43795 0 1
36497: PUSH
36498: FOR_TO
36499: IFFALSE 36966
// if factoryWaypoints [ i ] [ 2 ] = factory then
36501: LD_EXP 96
36505: PUSH
36506: LD_VAR 0 4
36510: ARRAY
36511: PUSH
36512: LD_INT 2
36514: ARRAY
36515: PUSH
36516: LD_VAR 0 2
36520: EQUAL
36521: IFFALSE 36964
// begin if GetControl ( vehicle ) = control_manual then
36523: LD_VAR 0 1
36527: PPUSH
36528: CALL_OW 263
36532: PUSH
36533: LD_INT 1
36535: EQUAL
36536: IFFALSE 36847
// begin driver := IsDrivenBy ( vehicle ) ;
36538: LD_ADDR_VAR 0 6
36542: PUSH
36543: LD_VAR 0 1
36547: PPUSH
36548: CALL_OW 311
36552: ST_TO_ADDR
// tag := GetTag ( driver ) ;
36553: LD_ADDR_VAR 0 5
36557: PUSH
36558: LD_VAR 0 6
36562: PPUSH
36563: CALL_OW 110
36567: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
36568: LD_VAR 0 5
36572: PUSH
36573: LD_INT 501
36575: EQUAL
36576: PUSH
36577: LD_VAR 0 1
36581: PPUSH
36582: CALL_OW 110
36586: PUSH
36587: LD_INT 501
36589: EQUAL
36590: OR
36591: IFFALSE 36597
// exit ;
36593: POP
36594: POP
36595: GO 36968
// if not HasTask ( driver ) then
36597: LD_VAR 0 6
36601: PPUSH
36602: CALL_OW 314
36606: NOT
36607: IFFALSE 36845
// begin SetTag ( driver , tDriver ) ;
36609: LD_VAR 0 6
36613: PPUSH
36614: LD_INT 501
36616: PPUSH
36617: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
36621: LD_VAR 0 1
36625: PPUSH
36626: LD_INT 501
36628: PPUSH
36629: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36633: LD_ADDR_VAR 0 7
36637: PUSH
36638: LD_EXP 96
36642: PUSH
36643: LD_VAR 0 4
36647: ARRAY
36648: PUSH
36649: LD_INT 3
36651: ARRAY
36652: PPUSH
36653: LD_EXP 96
36657: PUSH
36658: LD_VAR 0 4
36662: ARRAY
36663: PUSH
36664: LD_INT 4
36666: ARRAY
36667: PPUSH
36668: CALL_OW 428
36672: ST_TO_ADDR
// if hex then
36673: LD_VAR 0 7
36677: IFFALSE 36695
// ComMoveUnit ( driver , hex ) else
36679: LD_VAR 0 6
36683: PPUSH
36684: LD_VAR 0 7
36688: PPUSH
36689: CALL_OW 112
36693: GO 36734
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36695: LD_VAR 0 6
36699: PPUSH
36700: LD_EXP 96
36704: PUSH
36705: LD_VAR 0 4
36709: ARRAY
36710: PUSH
36711: LD_INT 3
36713: ARRAY
36714: PPUSH
36715: LD_EXP 96
36719: PUSH
36720: LD_VAR 0 4
36724: ARRAY
36725: PUSH
36726: LD_INT 4
36728: ARRAY
36729: PPUSH
36730: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36734: LD_VAR 0 6
36738: PPUSH
36739: CALL_OW 181
// if Multiplayer then
36743: LD_OWVAR 4
36747: IFFALSE 36796
// begin repeat wait ( 10 ) ;
36749: LD_INT 10
36751: PPUSH
36752: CALL_OW 67
// until not IsInUnit ( driver ) ;
36756: LD_VAR 0 6
36760: PPUSH
36761: CALL_OW 310
36765: NOT
36766: IFFALSE 36749
// if not HasTask ( driver ) then
36768: LD_VAR 0 6
36772: PPUSH
36773: CALL_OW 314
36777: NOT
36778: IFFALSE 36794
// ComEnterUnit ( driver , factory ) ;
36780: LD_VAR 0 6
36784: PPUSH
36785: LD_VAR 0 2
36789: PPUSH
36790: CALL_OW 120
// end else
36794: GO 36810
// AddComEnterUnit ( driver , factory ) ;
36796: LD_VAR 0 6
36800: PPUSH
36801: LD_VAR 0 2
36805: PPUSH
36806: CALL_OW 180
// wait ( 0 0$1 ) ;
36810: LD_INT 35
36812: PPUSH
36813: CALL_OW 67
// SetTag ( driver , tag ) ;
36817: LD_VAR 0 6
36821: PPUSH
36822: LD_VAR 0 5
36826: PPUSH
36827: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
36831: LD_VAR 0 1
36835: PPUSH
36836: LD_INT 0
36838: PPUSH
36839: CALL_OW 109
// break ;
36843: GO 36966
// end ; end else
36845: GO 36964
// if GetControl ( vehicle ) = control_remote then
36847: LD_VAR 0 1
36851: PPUSH
36852: CALL_OW 263
36856: PUSH
36857: LD_INT 2
36859: EQUAL
36860: IFFALSE 36923
// begin wait ( 0 0$2 ) ;
36862: LD_INT 70
36864: PPUSH
36865: CALL_OW 67
// if Connect ( vehicle ) then
36869: LD_VAR 0 1
36873: PPUSH
36874: CALL 50001 0 1
36878: IFFALSE 36919
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36880: LD_VAR 0 1
36884: PPUSH
36885: LD_EXP 96
36889: PUSH
36890: LD_VAR 0 4
36894: ARRAY
36895: PUSH
36896: LD_INT 3
36898: ARRAY
36899: PPUSH
36900: LD_EXP 96
36904: PUSH
36905: LD_VAR 0 4
36909: ARRAY
36910: PUSH
36911: LD_INT 4
36913: ARRAY
36914: PPUSH
36915: CALL_OW 171
// break ;
36919: GO 36966
// end else
36921: GO 36964
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36923: LD_VAR 0 1
36927: PPUSH
36928: LD_EXP 96
36932: PUSH
36933: LD_VAR 0 4
36937: ARRAY
36938: PUSH
36939: LD_INT 3
36941: ARRAY
36942: PPUSH
36943: LD_EXP 96
36947: PUSH
36948: LD_VAR 0 4
36952: ARRAY
36953: PUSH
36954: LD_INT 4
36956: ARRAY
36957: PPUSH
36958: CALL_OW 171
// break ;
36962: GO 36966
// end ; end ;
36964: GO 36498
36966: POP
36967: POP
// end ;
36968: LD_VAR 0 3
36972: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36973: LD_INT 0
36975: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36976: LD_VAR 0 1
36980: PUSH
36981: LD_INT 250
36983: EQUAL
36984: PUSH
36985: LD_VAR 0 2
36989: PPUSH
36990: CALL_OW 264
36994: PUSH
36995: LD_INT 81
36997: EQUAL
36998: AND
36999: IFFALSE 37020
// MinerPlaceMine ( unit , x , y ) ;
37001: LD_VAR 0 2
37005: PPUSH
37006: LD_VAR 0 4
37010: PPUSH
37011: LD_VAR 0 5
37015: PPUSH
37016: CALL 40112 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37020: LD_VAR 0 1
37024: PUSH
37025: LD_INT 251
37027: EQUAL
37028: PUSH
37029: LD_VAR 0 2
37033: PPUSH
37034: CALL_OW 264
37038: PUSH
37039: LD_INT 81
37041: EQUAL
37042: AND
37043: IFFALSE 37064
// MinerDetonateMine ( unit , x , y ) ;
37045: LD_VAR 0 2
37049: PPUSH
37050: LD_VAR 0 4
37054: PPUSH
37055: LD_VAR 0 5
37059: PPUSH
37060: CALL 40387 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37064: LD_VAR 0 1
37068: PUSH
37069: LD_INT 252
37071: EQUAL
37072: PUSH
37073: LD_VAR 0 2
37077: PPUSH
37078: CALL_OW 264
37082: PUSH
37083: LD_INT 81
37085: EQUAL
37086: AND
37087: IFFALSE 37108
// MinerCreateMinefield ( unit , x , y ) ;
37089: LD_VAR 0 2
37093: PPUSH
37094: LD_VAR 0 4
37098: PPUSH
37099: LD_VAR 0 5
37103: PPUSH
37104: CALL 40804 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37108: LD_VAR 0 1
37112: PUSH
37113: LD_INT 253
37115: EQUAL
37116: PUSH
37117: LD_VAR 0 2
37121: PPUSH
37122: CALL_OW 257
37126: PUSH
37127: LD_INT 5
37129: EQUAL
37130: AND
37131: IFFALSE 37152
// ComBinocular ( unit , x , y ) ;
37133: LD_VAR 0 2
37137: PPUSH
37138: LD_VAR 0 4
37142: PPUSH
37143: LD_VAR 0 5
37147: PPUSH
37148: CALL 41173 0 3
// if selectedUnit then
37152: LD_VAR 0 3
37156: IFFALSE 37212
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37158: LD_VAR 0 1
37162: PUSH
37163: LD_INT 254
37165: EQUAL
37166: PUSH
37167: LD_VAR 0 2
37171: PPUSH
37172: CALL_OW 264
37176: PUSH
37177: LD_INT 99
37179: EQUAL
37180: AND
37181: PUSH
37182: LD_VAR 0 3
37186: PPUSH
37187: CALL_OW 263
37191: PUSH
37192: LD_INT 3
37194: EQUAL
37195: AND
37196: IFFALSE 37212
// HackDestroyVehicle ( unit , selectedUnit ) ;
37198: LD_VAR 0 2
37202: PPUSH
37203: LD_VAR 0 3
37207: PPUSH
37208: CALL 39476 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37212: LD_VAR 0 1
37216: PUSH
37217: LD_INT 255
37219: EQUAL
37220: PUSH
37221: LD_VAR 0 2
37225: PPUSH
37226: CALL_OW 264
37230: PUSH
37231: LD_INT 14
37233: PUSH
37234: LD_INT 53
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: IN
37241: AND
37242: PUSH
37243: LD_VAR 0 4
37247: PPUSH
37248: LD_VAR 0 5
37252: PPUSH
37253: CALL_OW 488
37257: AND
37258: IFFALSE 37282
// CutTreeXYR ( unit , x , y , 12 ) ;
37260: LD_VAR 0 2
37264: PPUSH
37265: LD_VAR 0 4
37269: PPUSH
37270: LD_VAR 0 5
37274: PPUSH
37275: LD_INT 12
37277: PPUSH
37278: CALL 37473 0 4
// if cmd = 256 then
37282: LD_VAR 0 1
37286: PUSH
37287: LD_INT 256
37289: EQUAL
37290: IFFALSE 37311
// SetFactoryWaypoint ( unit , x , y ) ;
37292: LD_VAR 0 2
37296: PPUSH
37297: LD_VAR 0 4
37301: PPUSH
37302: LD_VAR 0 5
37306: PPUSH
37307: CALL 34949 0 3
// if cmd = 257 then
37311: LD_VAR 0 1
37315: PUSH
37316: LD_INT 257
37318: EQUAL
37319: IFFALSE 37340
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37321: LD_VAR 0 2
37325: PPUSH
37326: LD_VAR 0 4
37330: PPUSH
37331: LD_VAR 0 5
37335: PPUSH
37336: CALL 35439 0 3
// if cmd = 258 then
37340: LD_VAR 0 1
37344: PUSH
37345: LD_INT 258
37347: EQUAL
37348: IFFALSE 37372
// BurnTreeXYR ( unit , x , y , 8 ) ;
37350: LD_VAR 0 2
37354: PPUSH
37355: LD_VAR 0 4
37359: PPUSH
37360: LD_VAR 0 5
37364: PPUSH
37365: LD_INT 8
37367: PPUSH
37368: CALL 37867 0 4
// end ;
37372: LD_VAR 0 6
37376: RET
// export function ComRadiation ( un ) ; var eff ; begin
37377: LD_INT 0
37379: PPUSH
37380: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
37381: LD_VAR 0 1
37385: PPUSH
37386: CALL_OW 264
37390: PUSH
37391: LD_INT 91
37393: NONEQUAL
37394: IFFALSE 37398
// exit ;
37396: GO 37468
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37398: LD_INT 68
37400: PPUSH
37401: LD_VAR 0 1
37405: PPUSH
37406: CALL_OW 255
37410: PPUSH
37411: CALL_OW 321
37415: PUSH
37416: LD_INT 2
37418: EQUAL
37419: IFFALSE 37431
// eff := 70 else
37421: LD_ADDR_VAR 0 3
37425: PUSH
37426: LD_INT 70
37428: ST_TO_ADDR
37429: GO 37439
// eff := 30 ;
37431: LD_ADDR_VAR 0 3
37435: PUSH
37436: LD_INT 30
37438: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37439: LD_VAR 0 1
37443: PPUSH
37444: CALL_OW 250
37448: PPUSH
37449: LD_VAR 0 1
37453: PPUSH
37454: CALL_OW 251
37458: PPUSH
37459: LD_VAR 0 3
37463: PPUSH
37464: CALL_OW 495
// end ;
37468: LD_VAR 0 2
37472: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37473: LD_INT 0
37475: PPUSH
37476: PPUSH
37477: PPUSH
37478: PPUSH
37479: PPUSH
37480: PPUSH
37481: PPUSH
37482: PPUSH
37483: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37484: LD_VAR 0 1
37488: PPUSH
37489: CALL_OW 302
37493: NOT
37494: PUSH
37495: LD_VAR 0 2
37499: PPUSH
37500: LD_VAR 0 3
37504: PPUSH
37505: CALL_OW 488
37509: NOT
37510: OR
37511: PUSH
37512: LD_VAR 0 4
37516: NOT
37517: OR
37518: IFFALSE 37522
// exit ;
37520: GO 37862
// list := [ ] ;
37522: LD_ADDR_VAR 0 13
37526: PUSH
37527: EMPTY
37528: ST_TO_ADDR
// if x - r < 0 then
37529: LD_VAR 0 2
37533: PUSH
37534: LD_VAR 0 4
37538: MINUS
37539: PUSH
37540: LD_INT 0
37542: LESS
37543: IFFALSE 37555
// min_x := 0 else
37545: LD_ADDR_VAR 0 7
37549: PUSH
37550: LD_INT 0
37552: ST_TO_ADDR
37553: GO 37571
// min_x := x - r ;
37555: LD_ADDR_VAR 0 7
37559: PUSH
37560: LD_VAR 0 2
37564: PUSH
37565: LD_VAR 0 4
37569: MINUS
37570: ST_TO_ADDR
// if y - r < 0 then
37571: LD_VAR 0 3
37575: PUSH
37576: LD_VAR 0 4
37580: MINUS
37581: PUSH
37582: LD_INT 0
37584: LESS
37585: IFFALSE 37597
// min_y := 0 else
37587: LD_ADDR_VAR 0 8
37591: PUSH
37592: LD_INT 0
37594: ST_TO_ADDR
37595: GO 37613
// min_y := y - r ;
37597: LD_ADDR_VAR 0 8
37601: PUSH
37602: LD_VAR 0 3
37606: PUSH
37607: LD_VAR 0 4
37611: MINUS
37612: ST_TO_ADDR
// max_x := x + r ;
37613: LD_ADDR_VAR 0 9
37617: PUSH
37618: LD_VAR 0 2
37622: PUSH
37623: LD_VAR 0 4
37627: PLUS
37628: ST_TO_ADDR
// max_y := y + r ;
37629: LD_ADDR_VAR 0 10
37633: PUSH
37634: LD_VAR 0 3
37638: PUSH
37639: LD_VAR 0 4
37643: PLUS
37644: ST_TO_ADDR
// for _x = min_x to max_x do
37645: LD_ADDR_VAR 0 11
37649: PUSH
37650: DOUBLE
37651: LD_VAR 0 7
37655: DEC
37656: ST_TO_ADDR
37657: LD_VAR 0 9
37661: PUSH
37662: FOR_TO
37663: IFFALSE 37780
// for _y = min_y to max_y do
37665: LD_ADDR_VAR 0 12
37669: PUSH
37670: DOUBLE
37671: LD_VAR 0 8
37675: DEC
37676: ST_TO_ADDR
37677: LD_VAR 0 10
37681: PUSH
37682: FOR_TO
37683: IFFALSE 37776
// begin if not ValidHex ( _x , _y ) then
37685: LD_VAR 0 11
37689: PPUSH
37690: LD_VAR 0 12
37694: PPUSH
37695: CALL_OW 488
37699: NOT
37700: IFFALSE 37704
// continue ;
37702: GO 37682
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37704: LD_VAR 0 11
37708: PPUSH
37709: LD_VAR 0 12
37713: PPUSH
37714: CALL_OW 351
37718: PUSH
37719: LD_VAR 0 11
37723: PPUSH
37724: LD_VAR 0 12
37728: PPUSH
37729: CALL_OW 554
37733: AND
37734: IFFALSE 37774
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37736: LD_ADDR_VAR 0 13
37740: PUSH
37741: LD_VAR 0 13
37745: PPUSH
37746: LD_VAR 0 13
37750: PUSH
37751: LD_INT 1
37753: PLUS
37754: PPUSH
37755: LD_VAR 0 11
37759: PUSH
37760: LD_VAR 0 12
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PPUSH
37769: CALL_OW 2
37773: ST_TO_ADDR
// end ;
37774: GO 37682
37776: POP
37777: POP
37778: GO 37662
37780: POP
37781: POP
// if not list then
37782: LD_VAR 0 13
37786: NOT
37787: IFFALSE 37791
// exit ;
37789: GO 37862
// for i in list do
37791: LD_ADDR_VAR 0 6
37795: PUSH
37796: LD_VAR 0 13
37800: PUSH
37801: FOR_IN
37802: IFFALSE 37860
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37804: LD_VAR 0 1
37808: PPUSH
37809: LD_STRING M
37811: PUSH
37812: LD_VAR 0 6
37816: PUSH
37817: LD_INT 1
37819: ARRAY
37820: PUSH
37821: LD_VAR 0 6
37825: PUSH
37826: LD_INT 2
37828: ARRAY
37829: PUSH
37830: LD_INT 0
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: LD_INT 0
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: PUSH
37851: EMPTY
37852: LIST
37853: PPUSH
37854: CALL_OW 447
37858: GO 37801
37860: POP
37861: POP
// end ;
37862: LD_VAR 0 5
37866: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37867: LD_INT 0
37869: PPUSH
37870: PPUSH
37871: PPUSH
37872: PPUSH
37873: PPUSH
37874: PPUSH
37875: PPUSH
37876: PPUSH
37877: PPUSH
37878: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37879: LD_VAR 0 1
37883: PPUSH
37884: CALL_OW 302
37888: NOT
37889: PUSH
37890: LD_VAR 0 2
37894: PPUSH
37895: LD_VAR 0 3
37899: PPUSH
37900: CALL_OW 488
37904: NOT
37905: OR
37906: PUSH
37907: LD_VAR 0 4
37911: NOT
37912: OR
37913: IFFALSE 37917
// exit ;
37915: GO 38430
// list := [ ] ;
37917: LD_ADDR_VAR 0 13
37921: PUSH
37922: EMPTY
37923: ST_TO_ADDR
// if x - r < 0 then
37924: LD_VAR 0 2
37928: PUSH
37929: LD_VAR 0 4
37933: MINUS
37934: PUSH
37935: LD_INT 0
37937: LESS
37938: IFFALSE 37950
// min_x := 0 else
37940: LD_ADDR_VAR 0 7
37944: PUSH
37945: LD_INT 0
37947: ST_TO_ADDR
37948: GO 37966
// min_x := x - r ;
37950: LD_ADDR_VAR 0 7
37954: PUSH
37955: LD_VAR 0 2
37959: PUSH
37960: LD_VAR 0 4
37964: MINUS
37965: ST_TO_ADDR
// if y - r < 0 then
37966: LD_VAR 0 3
37970: PUSH
37971: LD_VAR 0 4
37975: MINUS
37976: PUSH
37977: LD_INT 0
37979: LESS
37980: IFFALSE 37992
// min_y := 0 else
37982: LD_ADDR_VAR 0 8
37986: PUSH
37987: LD_INT 0
37989: ST_TO_ADDR
37990: GO 38008
// min_y := y - r ;
37992: LD_ADDR_VAR 0 8
37996: PUSH
37997: LD_VAR 0 3
38001: PUSH
38002: LD_VAR 0 4
38006: MINUS
38007: ST_TO_ADDR
// max_x := x + r ;
38008: LD_ADDR_VAR 0 9
38012: PUSH
38013: LD_VAR 0 2
38017: PUSH
38018: LD_VAR 0 4
38022: PLUS
38023: ST_TO_ADDR
// max_y := y + r ;
38024: LD_ADDR_VAR 0 10
38028: PUSH
38029: LD_VAR 0 3
38033: PUSH
38034: LD_VAR 0 4
38038: PLUS
38039: ST_TO_ADDR
// for _x = min_x to max_x do
38040: LD_ADDR_VAR 0 11
38044: PUSH
38045: DOUBLE
38046: LD_VAR 0 7
38050: DEC
38051: ST_TO_ADDR
38052: LD_VAR 0 9
38056: PUSH
38057: FOR_TO
38058: IFFALSE 38175
// for _y = min_y to max_y do
38060: LD_ADDR_VAR 0 12
38064: PUSH
38065: DOUBLE
38066: LD_VAR 0 8
38070: DEC
38071: ST_TO_ADDR
38072: LD_VAR 0 10
38076: PUSH
38077: FOR_TO
38078: IFFALSE 38171
// begin if not ValidHex ( _x , _y ) then
38080: LD_VAR 0 11
38084: PPUSH
38085: LD_VAR 0 12
38089: PPUSH
38090: CALL_OW 488
38094: NOT
38095: IFFALSE 38099
// continue ;
38097: GO 38077
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38099: LD_VAR 0 11
38103: PPUSH
38104: LD_VAR 0 12
38108: PPUSH
38109: CALL_OW 351
38113: PUSH
38114: LD_VAR 0 11
38118: PPUSH
38119: LD_VAR 0 12
38123: PPUSH
38124: CALL_OW 554
38128: AND
38129: IFFALSE 38169
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38131: LD_ADDR_VAR 0 13
38135: PUSH
38136: LD_VAR 0 13
38140: PPUSH
38141: LD_VAR 0 13
38145: PUSH
38146: LD_INT 1
38148: PLUS
38149: PPUSH
38150: LD_VAR 0 11
38154: PUSH
38155: LD_VAR 0 12
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PPUSH
38164: CALL_OW 2
38168: ST_TO_ADDR
// end ;
38169: GO 38077
38171: POP
38172: POP
38173: GO 38057
38175: POP
38176: POP
// if not list then
38177: LD_VAR 0 13
38181: NOT
38182: IFFALSE 38186
// exit ;
38184: GO 38430
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
38186: LD_ADDR_VAR 0 13
38190: PUSH
38191: LD_VAR 0 1
38195: PPUSH
38196: LD_VAR 0 13
38200: PPUSH
38201: LD_INT 1
38203: PPUSH
38204: LD_INT 1
38206: PPUSH
38207: CALL 47143 0 4
38211: ST_TO_ADDR
// ComStop ( flame ) ;
38212: LD_VAR 0 1
38216: PPUSH
38217: CALL_OW 141
// for i in list do
38221: LD_ADDR_VAR 0 6
38225: PUSH
38226: LD_VAR 0 13
38230: PUSH
38231: FOR_IN
38232: IFFALSE 38263
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
38234: LD_VAR 0 1
38238: PPUSH
38239: LD_VAR 0 6
38243: PUSH
38244: LD_INT 1
38246: ARRAY
38247: PPUSH
38248: LD_VAR 0 6
38252: PUSH
38253: LD_INT 2
38255: ARRAY
38256: PPUSH
38257: CALL_OW 176
38261: GO 38231
38263: POP
38264: POP
// repeat wait ( 0 0$1 ) ;
38265: LD_INT 35
38267: PPUSH
38268: CALL_OW 67
// task := GetTaskList ( flame ) ;
38272: LD_ADDR_VAR 0 14
38276: PUSH
38277: LD_VAR 0 1
38281: PPUSH
38282: CALL_OW 437
38286: ST_TO_ADDR
// if not task then
38287: LD_VAR 0 14
38291: NOT
38292: IFFALSE 38296
// exit ;
38294: GO 38430
// if task [ 1 ] [ 1 ] <> | then
38296: LD_VAR 0 14
38300: PUSH
38301: LD_INT 1
38303: ARRAY
38304: PUSH
38305: LD_INT 1
38307: ARRAY
38308: PUSH
38309: LD_STRING |
38311: NONEQUAL
38312: IFFALSE 38316
// exit ;
38314: GO 38430
// _x := task [ 1 ] [ 2 ] ;
38316: LD_ADDR_VAR 0 11
38320: PUSH
38321: LD_VAR 0 14
38325: PUSH
38326: LD_INT 1
38328: ARRAY
38329: PUSH
38330: LD_INT 2
38332: ARRAY
38333: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
38334: LD_ADDR_VAR 0 12
38338: PUSH
38339: LD_VAR 0 14
38343: PUSH
38344: LD_INT 1
38346: ARRAY
38347: PUSH
38348: LD_INT 3
38350: ARRAY
38351: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
38352: LD_VAR 0 11
38356: PPUSH
38357: LD_VAR 0 12
38361: PPUSH
38362: CALL_OW 351
38366: NOT
38367: PUSH
38368: LD_VAR 0 11
38372: PPUSH
38373: LD_VAR 0 12
38377: PPUSH
38378: CALL_OW 554
38382: NOT
38383: OR
38384: IFFALSE 38418
// begin task := Delete ( task , 1 ) ;
38386: LD_ADDR_VAR 0 14
38390: PUSH
38391: LD_VAR 0 14
38395: PPUSH
38396: LD_INT 1
38398: PPUSH
38399: CALL_OW 3
38403: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38404: LD_VAR 0 1
38408: PPUSH
38409: LD_VAR 0 14
38413: PPUSH
38414: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38418: LD_VAR 0 1
38422: PPUSH
38423: CALL_OW 314
38427: NOT
38428: IFFALSE 38265
// end ;
38430: LD_VAR 0 5
38434: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38435: LD_EXP 99
38439: NOT
38440: IFFALSE 38490
38442: GO 38444
38444: DISABLE
// begin initHack := true ;
38445: LD_ADDR_EXP 99
38449: PUSH
38450: LD_INT 1
38452: ST_TO_ADDR
// hackTanks := [ ] ;
38453: LD_ADDR_EXP 100
38457: PUSH
38458: EMPTY
38459: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38460: LD_ADDR_EXP 101
38464: PUSH
38465: EMPTY
38466: ST_TO_ADDR
// hackLimit := 3 ;
38467: LD_ADDR_EXP 102
38471: PUSH
38472: LD_INT 3
38474: ST_TO_ADDR
// hackDist := 12 ;
38475: LD_ADDR_EXP 103
38479: PUSH
38480: LD_INT 12
38482: ST_TO_ADDR
// hackCounter := [ ] ;
38483: LD_ADDR_EXP 104
38487: PUSH
38488: EMPTY
38489: ST_TO_ADDR
// end ;
38490: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38491: LD_EXP 99
38495: PUSH
38496: LD_INT 34
38498: PUSH
38499: LD_INT 99
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PPUSH
38506: CALL_OW 69
38510: AND
38511: IFFALSE 38764
38513: GO 38515
38515: DISABLE
38516: LD_INT 0
38518: PPUSH
38519: PPUSH
// begin enable ;
38520: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38521: LD_ADDR_VAR 0 1
38525: PUSH
38526: LD_INT 34
38528: PUSH
38529: LD_INT 99
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PPUSH
38536: CALL_OW 69
38540: PUSH
38541: FOR_IN
38542: IFFALSE 38762
// begin if not i in hackTanks then
38544: LD_VAR 0 1
38548: PUSH
38549: LD_EXP 100
38553: IN
38554: NOT
38555: IFFALSE 38638
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38557: LD_ADDR_EXP 100
38561: PUSH
38562: LD_EXP 100
38566: PPUSH
38567: LD_EXP 100
38571: PUSH
38572: LD_INT 1
38574: PLUS
38575: PPUSH
38576: LD_VAR 0 1
38580: PPUSH
38581: CALL_OW 1
38585: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38586: LD_ADDR_EXP 101
38590: PUSH
38591: LD_EXP 101
38595: PPUSH
38596: LD_EXP 101
38600: PUSH
38601: LD_INT 1
38603: PLUS
38604: PPUSH
38605: EMPTY
38606: PPUSH
38607: CALL_OW 1
38611: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38612: LD_ADDR_EXP 104
38616: PUSH
38617: LD_EXP 104
38621: PPUSH
38622: LD_EXP 104
38626: PUSH
38627: LD_INT 1
38629: PLUS
38630: PPUSH
38631: EMPTY
38632: PPUSH
38633: CALL_OW 1
38637: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38638: LD_VAR 0 1
38642: PPUSH
38643: CALL_OW 302
38647: NOT
38648: IFFALSE 38661
// begin HackUnlinkAll ( i ) ;
38650: LD_VAR 0 1
38654: PPUSH
38655: CALL 38767 0 1
// continue ;
38659: GO 38541
// end ; HackCheckCapturedStatus ( i ) ;
38661: LD_VAR 0 1
38665: PPUSH
38666: CALL 39210 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38670: LD_ADDR_VAR 0 2
38674: PUSH
38675: LD_INT 81
38677: PUSH
38678: LD_VAR 0 1
38682: PPUSH
38683: CALL_OW 255
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 33
38694: PUSH
38695: LD_INT 3
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 91
38704: PUSH
38705: LD_VAR 0 1
38709: PUSH
38710: LD_EXP 103
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 50
38722: PUSH
38723: EMPTY
38724: LIST
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: PPUSH
38732: CALL_OW 69
38736: ST_TO_ADDR
// if not tmp then
38737: LD_VAR 0 2
38741: NOT
38742: IFFALSE 38746
// continue ;
38744: GO 38541
// HackLink ( i , tmp ) ;
38746: LD_VAR 0 1
38750: PPUSH
38751: LD_VAR 0 2
38755: PPUSH
38756: CALL 38903 0 2
// end ;
38760: GO 38541
38762: POP
38763: POP
// end ;
38764: PPOPN 2
38766: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38767: LD_INT 0
38769: PPUSH
38770: PPUSH
38771: PPUSH
// if not hack in hackTanks then
38772: LD_VAR 0 1
38776: PUSH
38777: LD_EXP 100
38781: IN
38782: NOT
38783: IFFALSE 38787
// exit ;
38785: GO 38898
// index := GetElementIndex ( hackTanks , hack ) ;
38787: LD_ADDR_VAR 0 4
38791: PUSH
38792: LD_EXP 100
38796: PPUSH
38797: LD_VAR 0 1
38801: PPUSH
38802: CALL 46440 0 2
38806: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38807: LD_EXP 101
38811: PUSH
38812: LD_VAR 0 4
38816: ARRAY
38817: IFFALSE 38898
// begin for i in hackTanksCaptured [ index ] do
38819: LD_ADDR_VAR 0 3
38823: PUSH
38824: LD_EXP 101
38828: PUSH
38829: LD_VAR 0 4
38833: ARRAY
38834: PUSH
38835: FOR_IN
38836: IFFALSE 38862
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38838: LD_VAR 0 3
38842: PUSH
38843: LD_INT 1
38845: ARRAY
38846: PPUSH
38847: LD_VAR 0 3
38851: PUSH
38852: LD_INT 2
38854: ARRAY
38855: PPUSH
38856: CALL_OW 235
38860: GO 38835
38862: POP
38863: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38864: LD_ADDR_EXP 101
38868: PUSH
38869: LD_EXP 101
38873: PPUSH
38874: LD_VAR 0 4
38878: PPUSH
38879: EMPTY
38880: PPUSH
38881: CALL_OW 1
38885: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38886: LD_VAR 0 1
38890: PPUSH
38891: LD_INT 0
38893: PPUSH
38894: CALL_OW 505
// end ; end ;
38898: LD_VAR 0 2
38902: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38903: LD_INT 0
38905: PPUSH
38906: PPUSH
38907: PPUSH
// if not hack in hackTanks or not vehicles then
38908: LD_VAR 0 1
38912: PUSH
38913: LD_EXP 100
38917: IN
38918: NOT
38919: PUSH
38920: LD_VAR 0 2
38924: NOT
38925: OR
38926: IFFALSE 38930
// exit ;
38928: GO 39205
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38930: LD_ADDR_VAR 0 2
38934: PUSH
38935: LD_VAR 0 1
38939: PPUSH
38940: LD_VAR 0 2
38944: PPUSH
38945: LD_INT 1
38947: PPUSH
38948: LD_INT 1
38950: PPUSH
38951: CALL 47090 0 4
38955: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38956: LD_ADDR_VAR 0 5
38960: PUSH
38961: LD_EXP 100
38965: PPUSH
38966: LD_VAR 0 1
38970: PPUSH
38971: CALL 46440 0 2
38975: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38976: LD_EXP 101
38980: PUSH
38981: LD_VAR 0 5
38985: ARRAY
38986: PUSH
38987: LD_EXP 102
38991: LESS
38992: IFFALSE 39181
// begin for i := 1 to vehicles do
38994: LD_ADDR_VAR 0 4
38998: PUSH
38999: DOUBLE
39000: LD_INT 1
39002: DEC
39003: ST_TO_ADDR
39004: LD_VAR 0 2
39008: PUSH
39009: FOR_TO
39010: IFFALSE 39179
// begin if hackTanksCaptured [ index ] = hackLimit then
39012: LD_EXP 101
39016: PUSH
39017: LD_VAR 0 5
39021: ARRAY
39022: PUSH
39023: LD_EXP 102
39027: EQUAL
39028: IFFALSE 39032
// break ;
39030: GO 39179
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39032: LD_ADDR_EXP 104
39036: PUSH
39037: LD_EXP 104
39041: PPUSH
39042: LD_VAR 0 5
39046: PPUSH
39047: LD_EXP 104
39051: PUSH
39052: LD_VAR 0 5
39056: ARRAY
39057: PUSH
39058: LD_INT 1
39060: PLUS
39061: PPUSH
39062: CALL_OW 1
39066: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39067: LD_ADDR_EXP 101
39071: PUSH
39072: LD_EXP 101
39076: PPUSH
39077: LD_VAR 0 5
39081: PUSH
39082: LD_EXP 101
39086: PUSH
39087: LD_VAR 0 5
39091: ARRAY
39092: PUSH
39093: LD_INT 1
39095: PLUS
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PPUSH
39101: LD_VAR 0 2
39105: PUSH
39106: LD_VAR 0 4
39110: ARRAY
39111: PUSH
39112: LD_VAR 0 2
39116: PUSH
39117: LD_VAR 0 4
39121: ARRAY
39122: PPUSH
39123: CALL_OW 255
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PPUSH
39132: CALL 46655 0 3
39136: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39137: LD_VAR 0 2
39141: PUSH
39142: LD_VAR 0 4
39146: ARRAY
39147: PPUSH
39148: LD_VAR 0 1
39152: PPUSH
39153: CALL_OW 255
39157: PPUSH
39158: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39162: LD_VAR 0 2
39166: PUSH
39167: LD_VAR 0 4
39171: ARRAY
39172: PPUSH
39173: CALL_OW 141
// end ;
39177: GO 39009
39179: POP
39180: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39181: LD_VAR 0 1
39185: PPUSH
39186: LD_EXP 101
39190: PUSH
39191: LD_VAR 0 5
39195: ARRAY
39196: PUSH
39197: LD_INT 0
39199: PLUS
39200: PPUSH
39201: CALL_OW 505
// end ;
39205: LD_VAR 0 3
39209: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39210: LD_INT 0
39212: PPUSH
39213: PPUSH
39214: PPUSH
39215: PPUSH
// if not hack in hackTanks then
39216: LD_VAR 0 1
39220: PUSH
39221: LD_EXP 100
39225: IN
39226: NOT
39227: IFFALSE 39231
// exit ;
39229: GO 39471
// index := GetElementIndex ( hackTanks , hack ) ;
39231: LD_ADDR_VAR 0 4
39235: PUSH
39236: LD_EXP 100
39240: PPUSH
39241: LD_VAR 0 1
39245: PPUSH
39246: CALL 46440 0 2
39250: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39251: LD_ADDR_VAR 0 3
39255: PUSH
39256: DOUBLE
39257: LD_EXP 101
39261: PUSH
39262: LD_VAR 0 4
39266: ARRAY
39267: INC
39268: ST_TO_ADDR
39269: LD_INT 1
39271: PUSH
39272: FOR_DOWNTO
39273: IFFALSE 39445
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39275: LD_ADDR_VAR 0 5
39279: PUSH
39280: LD_EXP 101
39284: PUSH
39285: LD_VAR 0 4
39289: ARRAY
39290: PUSH
39291: LD_VAR 0 3
39295: ARRAY
39296: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39297: LD_VAR 0 5
39301: PUSH
39302: LD_INT 1
39304: ARRAY
39305: PPUSH
39306: CALL_OW 302
39310: NOT
39311: PUSH
39312: LD_VAR 0 5
39316: PUSH
39317: LD_INT 1
39319: ARRAY
39320: PPUSH
39321: CALL_OW 255
39325: PUSH
39326: LD_VAR 0 1
39330: PPUSH
39331: CALL_OW 255
39335: NONEQUAL
39336: OR
39337: IFFALSE 39443
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39339: LD_VAR 0 5
39343: PUSH
39344: LD_INT 1
39346: ARRAY
39347: PPUSH
39348: CALL_OW 305
39352: PUSH
39353: LD_VAR 0 5
39357: PUSH
39358: LD_INT 1
39360: ARRAY
39361: PPUSH
39362: CALL_OW 255
39366: PUSH
39367: LD_VAR 0 1
39371: PPUSH
39372: CALL_OW 255
39376: EQUAL
39377: AND
39378: IFFALSE 39402
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39380: LD_VAR 0 5
39384: PUSH
39385: LD_INT 1
39387: ARRAY
39388: PPUSH
39389: LD_VAR 0 5
39393: PUSH
39394: LD_INT 2
39396: ARRAY
39397: PPUSH
39398: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39402: LD_ADDR_EXP 101
39406: PUSH
39407: LD_EXP 101
39411: PPUSH
39412: LD_VAR 0 4
39416: PPUSH
39417: LD_EXP 101
39421: PUSH
39422: LD_VAR 0 4
39426: ARRAY
39427: PPUSH
39428: LD_VAR 0 3
39432: PPUSH
39433: CALL_OW 3
39437: PPUSH
39438: CALL_OW 1
39442: ST_TO_ADDR
// end ; end ;
39443: GO 39272
39445: POP
39446: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39447: LD_VAR 0 1
39451: PPUSH
39452: LD_EXP 101
39456: PUSH
39457: LD_VAR 0 4
39461: ARRAY
39462: PUSH
39463: LD_INT 0
39465: PLUS
39466: PPUSH
39467: CALL_OW 505
// end ;
39471: LD_VAR 0 2
39475: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39476: LD_INT 0
39478: PPUSH
39479: PPUSH
39480: PPUSH
39481: PPUSH
// if not hack in hackTanks then
39482: LD_VAR 0 1
39486: PUSH
39487: LD_EXP 100
39491: IN
39492: NOT
39493: IFFALSE 39497
// exit ;
39495: GO 39582
// index := GetElementIndex ( hackTanks , hack ) ;
39497: LD_ADDR_VAR 0 5
39501: PUSH
39502: LD_EXP 100
39506: PPUSH
39507: LD_VAR 0 1
39511: PPUSH
39512: CALL 46440 0 2
39516: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39517: LD_ADDR_VAR 0 4
39521: PUSH
39522: DOUBLE
39523: LD_INT 1
39525: DEC
39526: ST_TO_ADDR
39527: LD_EXP 101
39531: PUSH
39532: LD_VAR 0 5
39536: ARRAY
39537: PUSH
39538: FOR_TO
39539: IFFALSE 39580
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39541: LD_EXP 101
39545: PUSH
39546: LD_VAR 0 5
39550: ARRAY
39551: PUSH
39552: LD_VAR 0 4
39556: ARRAY
39557: PUSH
39558: LD_INT 1
39560: ARRAY
39561: PUSH
39562: LD_VAR 0 2
39566: EQUAL
39567: IFFALSE 39578
// KillUnit ( vehicle ) ;
39569: LD_VAR 0 2
39573: PPUSH
39574: CALL_OW 66
39578: GO 39538
39580: POP
39581: POP
// end ;
39582: LD_VAR 0 3
39586: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39587: LD_EXP 105
39591: NOT
39592: IFFALSE 39627
39594: GO 39596
39596: DISABLE
// begin initMiner := true ;
39597: LD_ADDR_EXP 105
39601: PUSH
39602: LD_INT 1
39604: ST_TO_ADDR
// minersList := [ ] ;
39605: LD_ADDR_EXP 106
39609: PUSH
39610: EMPTY
39611: ST_TO_ADDR
// minerMinesList := [ ] ;
39612: LD_ADDR_EXP 107
39616: PUSH
39617: EMPTY
39618: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39619: LD_ADDR_EXP 108
39623: PUSH
39624: LD_INT 5
39626: ST_TO_ADDR
// end ;
39627: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39628: LD_EXP 105
39632: PUSH
39633: LD_INT 34
39635: PUSH
39636: LD_INT 81
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PPUSH
39643: CALL_OW 69
39647: AND
39648: IFFALSE 40109
39650: GO 39652
39652: DISABLE
39653: LD_INT 0
39655: PPUSH
39656: PPUSH
39657: PPUSH
39658: PPUSH
// begin enable ;
39659: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39660: LD_ADDR_VAR 0 1
39664: PUSH
39665: LD_INT 34
39667: PUSH
39668: LD_INT 81
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PPUSH
39675: CALL_OW 69
39679: PUSH
39680: FOR_IN
39681: IFFALSE 39753
// begin if not i in minersList then
39683: LD_VAR 0 1
39687: PUSH
39688: LD_EXP 106
39692: IN
39693: NOT
39694: IFFALSE 39751
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39696: LD_ADDR_EXP 106
39700: PUSH
39701: LD_EXP 106
39705: PPUSH
39706: LD_EXP 106
39710: PUSH
39711: LD_INT 1
39713: PLUS
39714: PPUSH
39715: LD_VAR 0 1
39719: PPUSH
39720: CALL_OW 1
39724: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39725: LD_ADDR_EXP 107
39729: PUSH
39730: LD_EXP 107
39734: PPUSH
39735: LD_EXP 107
39739: PUSH
39740: LD_INT 1
39742: PLUS
39743: PPUSH
39744: EMPTY
39745: PPUSH
39746: CALL_OW 1
39750: ST_TO_ADDR
// end end ;
39751: GO 39680
39753: POP
39754: POP
// for i := minerMinesList downto 1 do
39755: LD_ADDR_VAR 0 1
39759: PUSH
39760: DOUBLE
39761: LD_EXP 107
39765: INC
39766: ST_TO_ADDR
39767: LD_INT 1
39769: PUSH
39770: FOR_DOWNTO
39771: IFFALSE 40107
// begin if IsLive ( minersList [ i ] ) then
39773: LD_EXP 106
39777: PUSH
39778: LD_VAR 0 1
39782: ARRAY
39783: PPUSH
39784: CALL_OW 300
39788: IFFALSE 39816
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39790: LD_EXP 106
39794: PUSH
39795: LD_VAR 0 1
39799: ARRAY
39800: PPUSH
39801: LD_EXP 107
39805: PUSH
39806: LD_VAR 0 1
39810: ARRAY
39811: PPUSH
39812: CALL_OW 505
// if not minerMinesList [ i ] then
39816: LD_EXP 107
39820: PUSH
39821: LD_VAR 0 1
39825: ARRAY
39826: NOT
39827: IFFALSE 39831
// continue ;
39829: GO 39770
// for j := minerMinesList [ i ] downto 1 do
39831: LD_ADDR_VAR 0 2
39835: PUSH
39836: DOUBLE
39837: LD_EXP 107
39841: PUSH
39842: LD_VAR 0 1
39846: ARRAY
39847: INC
39848: ST_TO_ADDR
39849: LD_INT 1
39851: PUSH
39852: FOR_DOWNTO
39853: IFFALSE 40103
// begin side := GetSide ( minersList [ i ] ) ;
39855: LD_ADDR_VAR 0 3
39859: PUSH
39860: LD_EXP 106
39864: PUSH
39865: LD_VAR 0 1
39869: ARRAY
39870: PPUSH
39871: CALL_OW 255
39875: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39876: LD_ADDR_VAR 0 4
39880: PUSH
39881: LD_EXP 107
39885: PUSH
39886: LD_VAR 0 1
39890: ARRAY
39891: PUSH
39892: LD_VAR 0 2
39896: ARRAY
39897: PUSH
39898: LD_INT 1
39900: ARRAY
39901: PPUSH
39902: LD_EXP 107
39906: PUSH
39907: LD_VAR 0 1
39911: ARRAY
39912: PUSH
39913: LD_VAR 0 2
39917: ARRAY
39918: PUSH
39919: LD_INT 2
39921: ARRAY
39922: PPUSH
39923: CALL_OW 428
39927: ST_TO_ADDR
// if not tmp then
39928: LD_VAR 0 4
39932: NOT
39933: IFFALSE 39937
// continue ;
39935: GO 39852
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39937: LD_VAR 0 4
39941: PUSH
39942: LD_INT 81
39944: PUSH
39945: LD_VAR 0 3
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PPUSH
39954: CALL_OW 69
39958: IN
39959: PUSH
39960: LD_EXP 107
39964: PUSH
39965: LD_VAR 0 1
39969: ARRAY
39970: PUSH
39971: LD_VAR 0 2
39975: ARRAY
39976: PUSH
39977: LD_INT 1
39979: ARRAY
39980: PPUSH
39981: LD_EXP 107
39985: PUSH
39986: LD_VAR 0 1
39990: ARRAY
39991: PUSH
39992: LD_VAR 0 2
39996: ARRAY
39997: PUSH
39998: LD_INT 2
40000: ARRAY
40001: PPUSH
40002: CALL_OW 458
40006: AND
40007: IFFALSE 40101
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40009: LD_EXP 107
40013: PUSH
40014: LD_VAR 0 1
40018: ARRAY
40019: PUSH
40020: LD_VAR 0 2
40024: ARRAY
40025: PUSH
40026: LD_INT 1
40028: ARRAY
40029: PPUSH
40030: LD_EXP 107
40034: PUSH
40035: LD_VAR 0 1
40039: ARRAY
40040: PUSH
40041: LD_VAR 0 2
40045: ARRAY
40046: PUSH
40047: LD_INT 2
40049: ARRAY
40050: PPUSH
40051: LD_VAR 0 3
40055: PPUSH
40056: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40060: LD_ADDR_EXP 107
40064: PUSH
40065: LD_EXP 107
40069: PPUSH
40070: LD_VAR 0 1
40074: PPUSH
40075: LD_EXP 107
40079: PUSH
40080: LD_VAR 0 1
40084: ARRAY
40085: PPUSH
40086: LD_VAR 0 2
40090: PPUSH
40091: CALL_OW 3
40095: PPUSH
40096: CALL_OW 1
40100: ST_TO_ADDR
// end ; end ;
40101: GO 39852
40103: POP
40104: POP
// end ;
40105: GO 39770
40107: POP
40108: POP
// end ;
40109: PPOPN 4
40111: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
40112: LD_INT 0
40114: PPUSH
40115: PPUSH
// result := false ;
40116: LD_ADDR_VAR 0 4
40120: PUSH
40121: LD_INT 0
40123: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40124: LD_VAR 0 1
40128: PPUSH
40129: CALL_OW 264
40133: PUSH
40134: LD_INT 81
40136: EQUAL
40137: NOT
40138: IFFALSE 40142
// exit ;
40140: GO 40382
// index := GetElementIndex ( minersList , unit ) ;
40142: LD_ADDR_VAR 0 5
40146: PUSH
40147: LD_EXP 106
40151: PPUSH
40152: LD_VAR 0 1
40156: PPUSH
40157: CALL 46440 0 2
40161: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40162: LD_EXP 107
40166: PUSH
40167: LD_VAR 0 5
40171: ARRAY
40172: PUSH
40173: LD_EXP 108
40177: GREATEREQUAL
40178: IFFALSE 40182
// exit ;
40180: GO 40382
// ComMoveXY ( unit , x , y ) ;
40182: LD_VAR 0 1
40186: PPUSH
40187: LD_VAR 0 2
40191: PPUSH
40192: LD_VAR 0 3
40196: PPUSH
40197: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40201: LD_INT 35
40203: PPUSH
40204: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40208: LD_VAR 0 1
40212: PPUSH
40213: LD_VAR 0 2
40217: PPUSH
40218: LD_VAR 0 3
40222: PPUSH
40223: CALL 78201 0 3
40227: NOT
40228: PUSH
40229: LD_VAR 0 1
40233: PPUSH
40234: CALL_OW 314
40238: AND
40239: IFFALSE 40243
// exit ;
40241: GO 40382
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40243: LD_VAR 0 2
40247: PPUSH
40248: LD_VAR 0 3
40252: PPUSH
40253: CALL_OW 428
40257: PUSH
40258: LD_VAR 0 1
40262: EQUAL
40263: PUSH
40264: LD_VAR 0 1
40268: PPUSH
40269: CALL_OW 314
40273: NOT
40274: AND
40275: IFFALSE 40201
// PlaySoundXY ( x , y , PlantMine ) ;
40277: LD_VAR 0 2
40281: PPUSH
40282: LD_VAR 0 3
40286: PPUSH
40287: LD_STRING PlantMine
40289: PPUSH
40290: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40294: LD_VAR 0 2
40298: PPUSH
40299: LD_VAR 0 3
40303: PPUSH
40304: LD_VAR 0 1
40308: PPUSH
40309: CALL_OW 255
40313: PPUSH
40314: LD_INT 0
40316: PPUSH
40317: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40321: LD_ADDR_EXP 107
40325: PUSH
40326: LD_EXP 107
40330: PPUSH
40331: LD_VAR 0 5
40335: PUSH
40336: LD_EXP 107
40340: PUSH
40341: LD_VAR 0 5
40345: ARRAY
40346: PUSH
40347: LD_INT 1
40349: PLUS
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PPUSH
40355: LD_VAR 0 2
40359: PUSH
40360: LD_VAR 0 3
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PPUSH
40369: CALL 46655 0 3
40373: ST_TO_ADDR
// result := true ;
40374: LD_ADDR_VAR 0 4
40378: PUSH
40379: LD_INT 1
40381: ST_TO_ADDR
// end ;
40382: LD_VAR 0 4
40386: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40387: LD_INT 0
40389: PPUSH
40390: PPUSH
40391: PPUSH
// if not unit in minersList then
40392: LD_VAR 0 1
40396: PUSH
40397: LD_EXP 106
40401: IN
40402: NOT
40403: IFFALSE 40407
// exit ;
40405: GO 40799
// index := GetElementIndex ( minersList , unit ) ;
40407: LD_ADDR_VAR 0 6
40411: PUSH
40412: LD_EXP 106
40416: PPUSH
40417: LD_VAR 0 1
40421: PPUSH
40422: CALL 46440 0 2
40426: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40427: LD_ADDR_VAR 0 5
40431: PUSH
40432: DOUBLE
40433: LD_EXP 107
40437: PUSH
40438: LD_VAR 0 6
40442: ARRAY
40443: INC
40444: ST_TO_ADDR
40445: LD_INT 1
40447: PUSH
40448: FOR_DOWNTO
40449: IFFALSE 40610
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40451: LD_EXP 107
40455: PUSH
40456: LD_VAR 0 6
40460: ARRAY
40461: PUSH
40462: LD_VAR 0 5
40466: ARRAY
40467: PUSH
40468: LD_INT 1
40470: ARRAY
40471: PUSH
40472: LD_VAR 0 2
40476: EQUAL
40477: PUSH
40478: LD_EXP 107
40482: PUSH
40483: LD_VAR 0 6
40487: ARRAY
40488: PUSH
40489: LD_VAR 0 5
40493: ARRAY
40494: PUSH
40495: LD_INT 2
40497: ARRAY
40498: PUSH
40499: LD_VAR 0 3
40503: EQUAL
40504: AND
40505: IFFALSE 40608
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40507: LD_EXP 107
40511: PUSH
40512: LD_VAR 0 6
40516: ARRAY
40517: PUSH
40518: LD_VAR 0 5
40522: ARRAY
40523: PUSH
40524: LD_INT 1
40526: ARRAY
40527: PPUSH
40528: LD_EXP 107
40532: PUSH
40533: LD_VAR 0 6
40537: ARRAY
40538: PUSH
40539: LD_VAR 0 5
40543: ARRAY
40544: PUSH
40545: LD_INT 2
40547: ARRAY
40548: PPUSH
40549: LD_VAR 0 1
40553: PPUSH
40554: CALL_OW 255
40558: PPUSH
40559: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40563: LD_ADDR_EXP 107
40567: PUSH
40568: LD_EXP 107
40572: PPUSH
40573: LD_VAR 0 6
40577: PPUSH
40578: LD_EXP 107
40582: PUSH
40583: LD_VAR 0 6
40587: ARRAY
40588: PPUSH
40589: LD_VAR 0 5
40593: PPUSH
40594: CALL_OW 3
40598: PPUSH
40599: CALL_OW 1
40603: ST_TO_ADDR
// exit ;
40604: POP
40605: POP
40606: GO 40799
// end ; end ;
40608: GO 40448
40610: POP
40611: POP
// for i := minerMinesList [ index ] downto 1 do
40612: LD_ADDR_VAR 0 5
40616: PUSH
40617: DOUBLE
40618: LD_EXP 107
40622: PUSH
40623: LD_VAR 0 6
40627: ARRAY
40628: INC
40629: ST_TO_ADDR
40630: LD_INT 1
40632: PUSH
40633: FOR_DOWNTO
40634: IFFALSE 40797
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40636: LD_EXP 107
40640: PUSH
40641: LD_VAR 0 6
40645: ARRAY
40646: PUSH
40647: LD_VAR 0 5
40651: ARRAY
40652: PUSH
40653: LD_INT 1
40655: ARRAY
40656: PPUSH
40657: LD_EXP 107
40661: PUSH
40662: LD_VAR 0 6
40666: ARRAY
40667: PUSH
40668: LD_VAR 0 5
40672: ARRAY
40673: PUSH
40674: LD_INT 2
40676: ARRAY
40677: PPUSH
40678: LD_VAR 0 2
40682: PPUSH
40683: LD_VAR 0 3
40687: PPUSH
40688: CALL_OW 298
40692: PUSH
40693: LD_INT 6
40695: LESS
40696: IFFALSE 40795
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40698: LD_EXP 107
40702: PUSH
40703: LD_VAR 0 6
40707: ARRAY
40708: PUSH
40709: LD_VAR 0 5
40713: ARRAY
40714: PUSH
40715: LD_INT 1
40717: ARRAY
40718: PPUSH
40719: LD_EXP 107
40723: PUSH
40724: LD_VAR 0 6
40728: ARRAY
40729: PUSH
40730: LD_VAR 0 5
40734: ARRAY
40735: PUSH
40736: LD_INT 2
40738: ARRAY
40739: PPUSH
40740: LD_VAR 0 1
40744: PPUSH
40745: CALL_OW 255
40749: PPUSH
40750: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40754: LD_ADDR_EXP 107
40758: PUSH
40759: LD_EXP 107
40763: PPUSH
40764: LD_VAR 0 6
40768: PPUSH
40769: LD_EXP 107
40773: PUSH
40774: LD_VAR 0 6
40778: ARRAY
40779: PPUSH
40780: LD_VAR 0 5
40784: PPUSH
40785: CALL_OW 3
40789: PPUSH
40790: CALL_OW 1
40794: ST_TO_ADDR
// end ; end ;
40795: GO 40633
40797: POP
40798: POP
// end ;
40799: LD_VAR 0 4
40803: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40804: LD_INT 0
40806: PPUSH
40807: PPUSH
40808: PPUSH
40809: PPUSH
40810: PPUSH
40811: PPUSH
40812: PPUSH
40813: PPUSH
40814: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40815: LD_VAR 0 1
40819: PPUSH
40820: CALL_OW 264
40824: PUSH
40825: LD_INT 81
40827: EQUAL
40828: NOT
40829: PUSH
40830: LD_VAR 0 1
40834: PUSH
40835: LD_EXP 106
40839: IN
40840: NOT
40841: OR
40842: IFFALSE 40846
// exit ;
40844: GO 41168
// index := GetElementIndex ( minersList , unit ) ;
40846: LD_ADDR_VAR 0 6
40850: PUSH
40851: LD_EXP 106
40855: PPUSH
40856: LD_VAR 0 1
40860: PPUSH
40861: CALL 46440 0 2
40865: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40866: LD_ADDR_VAR 0 8
40870: PUSH
40871: LD_EXP 108
40875: PUSH
40876: LD_EXP 107
40880: PUSH
40881: LD_VAR 0 6
40885: ARRAY
40886: MINUS
40887: ST_TO_ADDR
// if not minesFreeAmount then
40888: LD_VAR 0 8
40892: NOT
40893: IFFALSE 40897
// exit ;
40895: GO 41168
// tmp := [ ] ;
40897: LD_ADDR_VAR 0 7
40901: PUSH
40902: EMPTY
40903: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40904: LD_ADDR_VAR 0 5
40908: PUSH
40909: DOUBLE
40910: LD_INT 1
40912: DEC
40913: ST_TO_ADDR
40914: LD_VAR 0 8
40918: PUSH
40919: FOR_TO
40920: IFFALSE 41115
// begin _d := rand ( 0 , 5 ) ;
40922: LD_ADDR_VAR 0 11
40926: PUSH
40927: LD_INT 0
40929: PPUSH
40930: LD_INT 5
40932: PPUSH
40933: CALL_OW 12
40937: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40938: LD_ADDR_VAR 0 12
40942: PUSH
40943: LD_INT 2
40945: PPUSH
40946: LD_INT 6
40948: PPUSH
40949: CALL_OW 12
40953: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40954: LD_ADDR_VAR 0 9
40958: PUSH
40959: LD_VAR 0 2
40963: PPUSH
40964: LD_VAR 0 11
40968: PPUSH
40969: LD_VAR 0 12
40973: PPUSH
40974: CALL_OW 272
40978: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40979: LD_ADDR_VAR 0 10
40983: PUSH
40984: LD_VAR 0 3
40988: PPUSH
40989: LD_VAR 0 11
40993: PPUSH
40994: LD_VAR 0 12
40998: PPUSH
40999: CALL_OW 273
41003: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41004: LD_VAR 0 9
41008: PPUSH
41009: LD_VAR 0 10
41013: PPUSH
41014: CALL_OW 488
41018: PUSH
41019: LD_VAR 0 9
41023: PUSH
41024: LD_VAR 0 10
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_VAR 0 7
41037: IN
41038: NOT
41039: AND
41040: PUSH
41041: LD_VAR 0 9
41045: PPUSH
41046: LD_VAR 0 10
41050: PPUSH
41051: CALL_OW 458
41055: NOT
41056: AND
41057: IFFALSE 41099
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41059: LD_ADDR_VAR 0 7
41063: PUSH
41064: LD_VAR 0 7
41068: PPUSH
41069: LD_VAR 0 7
41073: PUSH
41074: LD_INT 1
41076: PLUS
41077: PPUSH
41078: LD_VAR 0 9
41082: PUSH
41083: LD_VAR 0 10
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PPUSH
41092: CALL_OW 1
41096: ST_TO_ADDR
41097: GO 41113
// i := i - 1 ;
41099: LD_ADDR_VAR 0 5
41103: PUSH
41104: LD_VAR 0 5
41108: PUSH
41109: LD_INT 1
41111: MINUS
41112: ST_TO_ADDR
// end ;
41113: GO 40919
41115: POP
41116: POP
// for i in tmp do
41117: LD_ADDR_VAR 0 5
41121: PUSH
41122: LD_VAR 0 7
41126: PUSH
41127: FOR_IN
41128: IFFALSE 41166
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41130: LD_VAR 0 1
41134: PPUSH
41135: LD_VAR 0 5
41139: PUSH
41140: LD_INT 1
41142: ARRAY
41143: PPUSH
41144: LD_VAR 0 5
41148: PUSH
41149: LD_INT 2
41151: ARRAY
41152: PPUSH
41153: CALL 40112 0 3
41157: NOT
41158: IFFALSE 41164
// exit ;
41160: POP
41161: POP
41162: GO 41168
41164: GO 41127
41166: POP
41167: POP
// end ;
41168: LD_VAR 0 4
41172: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
41173: LD_INT 0
41175: PPUSH
41176: PPUSH
41177: PPUSH
41178: PPUSH
41179: PPUSH
41180: PPUSH
41181: PPUSH
41182: PPUSH
41183: PPUSH
// if GetClass ( unit ) <> class_sniper then
41184: LD_VAR 0 1
41188: PPUSH
41189: CALL_OW 257
41193: PUSH
41194: LD_INT 5
41196: NONEQUAL
41197: IFFALSE 41201
// exit ;
41199: GO 41667
// dist := 8 ;
41201: LD_ADDR_VAR 0 5
41205: PUSH
41206: LD_INT 8
41208: ST_TO_ADDR
// viewRange := 12 ;
41209: LD_ADDR_VAR 0 8
41213: PUSH
41214: LD_INT 12
41216: ST_TO_ADDR
// side := GetSide ( unit ) ;
41217: LD_ADDR_VAR 0 6
41221: PUSH
41222: LD_VAR 0 1
41226: PPUSH
41227: CALL_OW 255
41231: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41232: LD_INT 61
41234: PPUSH
41235: LD_VAR 0 6
41239: PPUSH
41240: CALL_OW 321
41244: PUSH
41245: LD_INT 2
41247: EQUAL
41248: IFFALSE 41258
// viewRange := 16 ;
41250: LD_ADDR_VAR 0 8
41254: PUSH
41255: LD_INT 16
41257: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41258: LD_VAR 0 1
41262: PPUSH
41263: LD_VAR 0 2
41267: PPUSH
41268: LD_VAR 0 3
41272: PPUSH
41273: CALL_OW 297
41277: PUSH
41278: LD_VAR 0 5
41282: GREATER
41283: IFFALSE 41362
// begin ComMoveXY ( unit , x , y ) ;
41285: LD_VAR 0 1
41289: PPUSH
41290: LD_VAR 0 2
41294: PPUSH
41295: LD_VAR 0 3
41299: PPUSH
41300: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41304: LD_INT 35
41306: PPUSH
41307: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41311: LD_VAR 0 1
41315: PPUSH
41316: LD_VAR 0 2
41320: PPUSH
41321: LD_VAR 0 3
41325: PPUSH
41326: CALL 78201 0 3
41330: NOT
41331: IFFALSE 41335
// exit ;
41333: GO 41667
// until GetDistUnitXY ( unit , x , y ) < dist ;
41335: LD_VAR 0 1
41339: PPUSH
41340: LD_VAR 0 2
41344: PPUSH
41345: LD_VAR 0 3
41349: PPUSH
41350: CALL_OW 297
41354: PUSH
41355: LD_VAR 0 5
41359: LESS
41360: IFFALSE 41304
// end ; ComTurnXY ( unit , x , y ) ;
41362: LD_VAR 0 1
41366: PPUSH
41367: LD_VAR 0 2
41371: PPUSH
41372: LD_VAR 0 3
41376: PPUSH
41377: CALL_OW 118
// repeat if Multiplayer then
41381: LD_OWVAR 4
41385: IFFALSE 41396
// wait ( 35 ) else
41387: LD_INT 35
41389: PPUSH
41390: CALL_OW 67
41394: GO 41403
// wait ( 5 ) ;
41396: LD_INT 5
41398: PPUSH
41399: CALL_OW 67
// _d := GetDir ( unit ) ;
41403: LD_ADDR_VAR 0 11
41407: PUSH
41408: LD_VAR 0 1
41412: PPUSH
41413: CALL_OW 254
41417: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
41418: LD_ADDR_VAR 0 7
41422: PUSH
41423: LD_VAR 0 1
41427: PPUSH
41428: CALL_OW 250
41432: PPUSH
41433: LD_VAR 0 1
41437: PPUSH
41438: CALL_OW 251
41442: PPUSH
41443: LD_VAR 0 2
41447: PPUSH
41448: LD_VAR 0 3
41452: PPUSH
41453: CALL 80809 0 4
41457: ST_TO_ADDR
// until dir = _d ;
41458: LD_VAR 0 7
41462: PUSH
41463: LD_VAR 0 11
41467: EQUAL
41468: IFFALSE 41381
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
41470: LD_ADDR_VAR 0 9
41474: PUSH
41475: LD_VAR 0 1
41479: PPUSH
41480: CALL_OW 250
41484: PPUSH
41485: LD_VAR 0 7
41489: PPUSH
41490: LD_VAR 0 5
41494: PPUSH
41495: CALL_OW 272
41499: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41500: LD_ADDR_VAR 0 10
41504: PUSH
41505: LD_VAR 0 1
41509: PPUSH
41510: CALL_OW 251
41514: PPUSH
41515: LD_VAR 0 7
41519: PPUSH
41520: LD_VAR 0 5
41524: PPUSH
41525: CALL_OW 273
41529: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41530: LD_VAR 0 9
41534: PPUSH
41535: LD_VAR 0 10
41539: PPUSH
41540: CALL_OW 488
41544: NOT
41545: IFFALSE 41549
// exit ;
41547: GO 41667
// ComAnimCustom ( unit , 1 ) ;
41549: LD_VAR 0 1
41553: PPUSH
41554: LD_INT 1
41556: PPUSH
41557: CALL_OW 592
// p := 0 ;
41561: LD_ADDR_VAR 0 12
41565: PUSH
41566: LD_INT 0
41568: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41569: LD_VAR 0 9
41573: PPUSH
41574: LD_VAR 0 10
41578: PPUSH
41579: LD_VAR 0 6
41583: PPUSH
41584: LD_VAR 0 8
41588: PPUSH
41589: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41593: LD_INT 35
41595: PPUSH
41596: CALL_OW 67
// p := Inc ( p ) ;
41600: LD_ADDR_VAR 0 12
41604: PUSH
41605: LD_VAR 0 12
41609: PPUSH
41610: CALL 80765 0 1
41614: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41615: LD_VAR 0 12
41619: PUSH
41620: LD_INT 3
41622: EQUAL
41623: PUSH
41624: LD_VAR 0 1
41628: PPUSH
41629: CALL_OW 302
41633: NOT
41634: OR
41635: PUSH
41636: LD_VAR 0 1
41640: PPUSH
41641: CALL_OW 301
41645: OR
41646: IFFALSE 41593
// RemoveSeeing ( _x , _y , side ) ;
41648: LD_VAR 0 9
41652: PPUSH
41653: LD_VAR 0 10
41657: PPUSH
41658: LD_VAR 0 6
41662: PPUSH
41663: CALL_OW 331
// end ; end_of_file
41667: LD_VAR 0 4
41671: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41672: LD_INT 0
41674: PPUSH
41675: PPUSH
// if exist_mode then
41676: LD_VAR 0 2
41680: IFFALSE 41726
// begin unit := CreateCharacter ( prefix & ident ) ;
41682: LD_ADDR_VAR 0 5
41686: PUSH
41687: LD_VAR 0 3
41691: PUSH
41692: LD_VAR 0 1
41696: STR
41697: PPUSH
41698: CALL_OW 34
41702: ST_TO_ADDR
// if unit then
41703: LD_VAR 0 5
41707: IFFALSE 41724
// DeleteCharacters ( prefix & ident ) ;
41709: LD_VAR 0 3
41713: PUSH
41714: LD_VAR 0 1
41718: STR
41719: PPUSH
41720: CALL_OW 40
// end else
41724: GO 41741
// unit := NewCharacter ( ident ) ;
41726: LD_ADDR_VAR 0 5
41730: PUSH
41731: LD_VAR 0 1
41735: PPUSH
41736: CALL_OW 25
41740: ST_TO_ADDR
// result := unit ;
41741: LD_ADDR_VAR 0 4
41745: PUSH
41746: LD_VAR 0 5
41750: ST_TO_ADDR
// end ;
41751: LD_VAR 0 4
41755: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41756: LD_INT 0
41758: PPUSH
41759: PPUSH
// if not side or not nation then
41760: LD_VAR 0 1
41764: NOT
41765: PUSH
41766: LD_VAR 0 2
41770: NOT
41771: OR
41772: IFFALSE 41776
// exit ;
41774: GO 42544
// case nation of nation_american :
41776: LD_VAR 0 2
41780: PUSH
41781: LD_INT 1
41783: DOUBLE
41784: EQUAL
41785: IFTRUE 41789
41787: GO 42003
41789: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41790: LD_ADDR_VAR 0 4
41794: PUSH
41795: LD_INT 35
41797: PUSH
41798: LD_INT 45
41800: PUSH
41801: LD_INT 46
41803: PUSH
41804: LD_INT 47
41806: PUSH
41807: LD_INT 82
41809: PUSH
41810: LD_INT 83
41812: PUSH
41813: LD_INT 84
41815: PUSH
41816: LD_INT 85
41818: PUSH
41819: LD_INT 86
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: LD_INT 2
41827: PUSH
41828: LD_INT 6
41830: PUSH
41831: LD_INT 15
41833: PUSH
41834: LD_INT 16
41836: PUSH
41837: LD_INT 7
41839: PUSH
41840: LD_INT 12
41842: PUSH
41843: LD_INT 13
41845: PUSH
41846: LD_INT 10
41848: PUSH
41849: LD_INT 14
41851: PUSH
41852: LD_INT 20
41854: PUSH
41855: LD_INT 21
41857: PUSH
41858: LD_INT 22
41860: PUSH
41861: LD_INT 25
41863: PUSH
41864: LD_INT 32
41866: PUSH
41867: LD_INT 27
41869: PUSH
41870: LD_INT 36
41872: PUSH
41873: LD_INT 69
41875: PUSH
41876: LD_INT 39
41878: PUSH
41879: LD_INT 34
41881: PUSH
41882: LD_INT 40
41884: PUSH
41885: LD_INT 48
41887: PUSH
41888: LD_INT 49
41890: PUSH
41891: LD_INT 50
41893: PUSH
41894: LD_INT 51
41896: PUSH
41897: LD_INT 52
41899: PUSH
41900: LD_INT 53
41902: PUSH
41903: LD_INT 54
41905: PUSH
41906: LD_INT 55
41908: PUSH
41909: LD_INT 56
41911: PUSH
41912: LD_INT 57
41914: PUSH
41915: LD_INT 58
41917: PUSH
41918: LD_INT 59
41920: PUSH
41921: LD_INT 60
41923: PUSH
41924: LD_INT 61
41926: PUSH
41927: LD_INT 62
41929: PUSH
41930: LD_INT 80
41932: PUSH
41933: LD_INT 82
41935: PUSH
41936: LD_INT 83
41938: PUSH
41939: LD_INT 84
41941: PUSH
41942: LD_INT 85
41944: PUSH
41945: LD_INT 86
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: ST_TO_ADDR
42001: GO 42468
42003: LD_INT 2
42005: DOUBLE
42006: EQUAL
42007: IFTRUE 42011
42009: GO 42237
42011: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
42012: LD_ADDR_VAR 0 4
42016: PUSH
42017: LD_INT 35
42019: PUSH
42020: LD_INT 45
42022: PUSH
42023: LD_INT 46
42025: PUSH
42026: LD_INT 47
42028: PUSH
42029: LD_INT 82
42031: PUSH
42032: LD_INT 83
42034: PUSH
42035: LD_INT 84
42037: PUSH
42038: LD_INT 85
42040: PUSH
42041: LD_INT 87
42043: PUSH
42044: LD_INT 70
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: LD_INT 11
42052: PUSH
42053: LD_INT 3
42055: PUSH
42056: LD_INT 4
42058: PUSH
42059: LD_INT 5
42061: PUSH
42062: LD_INT 6
42064: PUSH
42065: LD_INT 15
42067: PUSH
42068: LD_INT 18
42070: PUSH
42071: LD_INT 7
42073: PUSH
42074: LD_INT 17
42076: PUSH
42077: LD_INT 8
42079: PUSH
42080: LD_INT 20
42082: PUSH
42083: LD_INT 21
42085: PUSH
42086: LD_INT 22
42088: PUSH
42089: LD_INT 72
42091: PUSH
42092: LD_INT 26
42094: PUSH
42095: LD_INT 69
42097: PUSH
42098: LD_INT 39
42100: PUSH
42101: LD_INT 40
42103: PUSH
42104: LD_INT 41
42106: PUSH
42107: LD_INT 42
42109: PUSH
42110: LD_INT 43
42112: PUSH
42113: LD_INT 48
42115: PUSH
42116: LD_INT 49
42118: PUSH
42119: LD_INT 50
42121: PUSH
42122: LD_INT 51
42124: PUSH
42125: LD_INT 52
42127: PUSH
42128: LD_INT 53
42130: PUSH
42131: LD_INT 54
42133: PUSH
42134: LD_INT 55
42136: PUSH
42137: LD_INT 56
42139: PUSH
42140: LD_INT 60
42142: PUSH
42143: LD_INT 61
42145: PUSH
42146: LD_INT 62
42148: PUSH
42149: LD_INT 66
42151: PUSH
42152: LD_INT 67
42154: PUSH
42155: LD_INT 68
42157: PUSH
42158: LD_INT 81
42160: PUSH
42161: LD_INT 82
42163: PUSH
42164: LD_INT 83
42166: PUSH
42167: LD_INT 84
42169: PUSH
42170: LD_INT 85
42172: PUSH
42173: LD_INT 87
42175: PUSH
42176: LD_INT 88
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: ST_TO_ADDR
42235: GO 42468
42237: LD_INT 3
42239: DOUBLE
42240: EQUAL
42241: IFTRUE 42245
42243: GO 42467
42245: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42246: LD_ADDR_VAR 0 4
42250: PUSH
42251: LD_INT 46
42253: PUSH
42254: LD_INT 47
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: LD_INT 2
42262: PUSH
42263: LD_INT 82
42265: PUSH
42266: LD_INT 83
42268: PUSH
42269: LD_INT 84
42271: PUSH
42272: LD_INT 85
42274: PUSH
42275: LD_INT 86
42277: PUSH
42278: LD_INT 11
42280: PUSH
42281: LD_INT 9
42283: PUSH
42284: LD_INT 20
42286: PUSH
42287: LD_INT 19
42289: PUSH
42290: LD_INT 21
42292: PUSH
42293: LD_INT 24
42295: PUSH
42296: LD_INT 22
42298: PUSH
42299: LD_INT 25
42301: PUSH
42302: LD_INT 28
42304: PUSH
42305: LD_INT 29
42307: PUSH
42308: LD_INT 30
42310: PUSH
42311: LD_INT 31
42313: PUSH
42314: LD_INT 37
42316: PUSH
42317: LD_INT 38
42319: PUSH
42320: LD_INT 32
42322: PUSH
42323: LD_INT 27
42325: PUSH
42326: LD_INT 33
42328: PUSH
42329: LD_INT 69
42331: PUSH
42332: LD_INT 39
42334: PUSH
42335: LD_INT 34
42337: PUSH
42338: LD_INT 40
42340: PUSH
42341: LD_INT 71
42343: PUSH
42344: LD_INT 23
42346: PUSH
42347: LD_INT 44
42349: PUSH
42350: LD_INT 48
42352: PUSH
42353: LD_INT 49
42355: PUSH
42356: LD_INT 50
42358: PUSH
42359: LD_INT 51
42361: PUSH
42362: LD_INT 52
42364: PUSH
42365: LD_INT 53
42367: PUSH
42368: LD_INT 54
42370: PUSH
42371: LD_INT 55
42373: PUSH
42374: LD_INT 56
42376: PUSH
42377: LD_INT 57
42379: PUSH
42380: LD_INT 58
42382: PUSH
42383: LD_INT 59
42385: PUSH
42386: LD_INT 63
42388: PUSH
42389: LD_INT 64
42391: PUSH
42392: LD_INT 65
42394: PUSH
42395: LD_INT 82
42397: PUSH
42398: LD_INT 83
42400: PUSH
42401: LD_INT 84
42403: PUSH
42404: LD_INT 85
42406: PUSH
42407: LD_INT 86
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: ST_TO_ADDR
42465: GO 42468
42467: POP
// if state > - 1 and state < 3 then
42468: LD_VAR 0 3
42472: PUSH
42473: LD_INT 1
42475: NEG
42476: GREATER
42477: PUSH
42478: LD_VAR 0 3
42482: PUSH
42483: LD_INT 3
42485: LESS
42486: AND
42487: IFFALSE 42544
// for i in result do
42489: LD_ADDR_VAR 0 5
42493: PUSH
42494: LD_VAR 0 4
42498: PUSH
42499: FOR_IN
42500: IFFALSE 42542
// if GetTech ( i , side ) <> state then
42502: LD_VAR 0 5
42506: PPUSH
42507: LD_VAR 0 1
42511: PPUSH
42512: CALL_OW 321
42516: PUSH
42517: LD_VAR 0 3
42521: NONEQUAL
42522: IFFALSE 42540
// result := result diff i ;
42524: LD_ADDR_VAR 0 4
42528: PUSH
42529: LD_VAR 0 4
42533: PUSH
42534: LD_VAR 0 5
42538: DIFF
42539: ST_TO_ADDR
42540: GO 42499
42542: POP
42543: POP
// end ;
42544: LD_VAR 0 4
42548: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42549: LD_INT 0
42551: PPUSH
42552: PPUSH
42553: PPUSH
// result := true ;
42554: LD_ADDR_VAR 0 3
42558: PUSH
42559: LD_INT 1
42561: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42562: LD_ADDR_VAR 0 5
42566: PUSH
42567: LD_VAR 0 2
42571: PPUSH
42572: CALL_OW 480
42576: ST_TO_ADDR
// if not tmp then
42577: LD_VAR 0 5
42581: NOT
42582: IFFALSE 42586
// exit ;
42584: GO 42635
// for i in tmp do
42586: LD_ADDR_VAR 0 4
42590: PUSH
42591: LD_VAR 0 5
42595: PUSH
42596: FOR_IN
42597: IFFALSE 42633
// if GetTech ( i , side ) <> state_researched then
42599: LD_VAR 0 4
42603: PPUSH
42604: LD_VAR 0 1
42608: PPUSH
42609: CALL_OW 321
42613: PUSH
42614: LD_INT 2
42616: NONEQUAL
42617: IFFALSE 42631
// begin result := false ;
42619: LD_ADDR_VAR 0 3
42623: PUSH
42624: LD_INT 0
42626: ST_TO_ADDR
// exit ;
42627: POP
42628: POP
42629: GO 42635
// end ;
42631: GO 42596
42633: POP
42634: POP
// end ;
42635: LD_VAR 0 3
42639: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42640: LD_INT 0
42642: PPUSH
42643: PPUSH
42644: PPUSH
42645: PPUSH
42646: PPUSH
42647: PPUSH
42648: PPUSH
42649: PPUSH
42650: PPUSH
42651: PPUSH
42652: PPUSH
42653: PPUSH
42654: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42655: LD_VAR 0 1
42659: NOT
42660: PUSH
42661: LD_VAR 0 1
42665: PPUSH
42666: CALL_OW 257
42670: PUSH
42671: LD_INT 9
42673: NONEQUAL
42674: OR
42675: IFFALSE 42679
// exit ;
42677: GO 43252
// side := GetSide ( unit ) ;
42679: LD_ADDR_VAR 0 9
42683: PUSH
42684: LD_VAR 0 1
42688: PPUSH
42689: CALL_OW 255
42693: ST_TO_ADDR
// tech_space := tech_spacanom ;
42694: LD_ADDR_VAR 0 12
42698: PUSH
42699: LD_INT 29
42701: ST_TO_ADDR
// tech_time := tech_taurad ;
42702: LD_ADDR_VAR 0 13
42706: PUSH
42707: LD_INT 28
42709: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42710: LD_ADDR_VAR 0 11
42714: PUSH
42715: LD_VAR 0 1
42719: PPUSH
42720: CALL_OW 310
42724: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42725: LD_VAR 0 11
42729: PPUSH
42730: CALL_OW 247
42734: PUSH
42735: LD_INT 2
42737: EQUAL
42738: IFFALSE 42742
// exit ;
42740: GO 43252
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42742: LD_ADDR_VAR 0 8
42746: PUSH
42747: LD_INT 81
42749: PUSH
42750: LD_VAR 0 9
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 3
42761: PUSH
42762: LD_INT 21
42764: PUSH
42765: LD_INT 3
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PPUSH
42780: CALL_OW 69
42784: ST_TO_ADDR
// if not tmp then
42785: LD_VAR 0 8
42789: NOT
42790: IFFALSE 42794
// exit ;
42792: GO 43252
// if in_unit then
42794: LD_VAR 0 11
42798: IFFALSE 42822
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42800: LD_ADDR_VAR 0 10
42804: PUSH
42805: LD_VAR 0 8
42809: PPUSH
42810: LD_VAR 0 11
42814: PPUSH
42815: CALL_OW 74
42819: ST_TO_ADDR
42820: GO 42842
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42822: LD_ADDR_VAR 0 10
42826: PUSH
42827: LD_VAR 0 8
42831: PPUSH
42832: LD_VAR 0 1
42836: PPUSH
42837: CALL_OW 74
42841: ST_TO_ADDR
// if not enemy then
42842: LD_VAR 0 10
42846: NOT
42847: IFFALSE 42851
// exit ;
42849: GO 43252
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42851: LD_VAR 0 11
42855: PUSH
42856: LD_VAR 0 11
42860: PPUSH
42861: LD_VAR 0 10
42865: PPUSH
42866: CALL_OW 296
42870: PUSH
42871: LD_INT 13
42873: GREATER
42874: AND
42875: PUSH
42876: LD_VAR 0 1
42880: PPUSH
42881: LD_VAR 0 10
42885: PPUSH
42886: CALL_OW 296
42890: PUSH
42891: LD_INT 12
42893: GREATER
42894: OR
42895: IFFALSE 42899
// exit ;
42897: GO 43252
// missile := [ 1 ] ;
42899: LD_ADDR_VAR 0 14
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: EMPTY
42908: LIST
42909: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42910: LD_VAR 0 9
42914: PPUSH
42915: LD_VAR 0 12
42919: PPUSH
42920: CALL_OW 325
42924: IFFALSE 42953
// missile := Replace ( missile , missile + 1 , 2 ) ;
42926: LD_ADDR_VAR 0 14
42930: PUSH
42931: LD_VAR 0 14
42935: PPUSH
42936: LD_VAR 0 14
42940: PUSH
42941: LD_INT 1
42943: PLUS
42944: PPUSH
42945: LD_INT 2
42947: PPUSH
42948: CALL_OW 1
42952: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42953: LD_VAR 0 9
42957: PPUSH
42958: LD_VAR 0 13
42962: PPUSH
42963: CALL_OW 325
42967: PUSH
42968: LD_VAR 0 10
42972: PPUSH
42973: CALL_OW 255
42977: PPUSH
42978: LD_VAR 0 13
42982: PPUSH
42983: CALL_OW 325
42987: NOT
42988: AND
42989: IFFALSE 43018
// missile := Replace ( missile , missile + 1 , 3 ) ;
42991: LD_ADDR_VAR 0 14
42995: PUSH
42996: LD_VAR 0 14
43000: PPUSH
43001: LD_VAR 0 14
43005: PUSH
43006: LD_INT 1
43008: PLUS
43009: PPUSH
43010: LD_INT 3
43012: PPUSH
43013: CALL_OW 1
43017: ST_TO_ADDR
// if missile < 2 then
43018: LD_VAR 0 14
43022: PUSH
43023: LD_INT 2
43025: LESS
43026: IFFALSE 43030
// exit ;
43028: GO 43252
// x := GetX ( enemy ) ;
43030: LD_ADDR_VAR 0 4
43034: PUSH
43035: LD_VAR 0 10
43039: PPUSH
43040: CALL_OW 250
43044: ST_TO_ADDR
// y := GetY ( enemy ) ;
43045: LD_ADDR_VAR 0 5
43049: PUSH
43050: LD_VAR 0 10
43054: PPUSH
43055: CALL_OW 251
43059: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43060: LD_ADDR_VAR 0 6
43064: PUSH
43065: LD_VAR 0 4
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PPUSH
43074: LD_INT 1
43076: PPUSH
43077: CALL_OW 12
43081: PLUS
43082: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43083: LD_ADDR_VAR 0 7
43087: PUSH
43088: LD_VAR 0 5
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PPUSH
43097: LD_INT 1
43099: PPUSH
43100: CALL_OW 12
43104: PLUS
43105: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43106: LD_VAR 0 6
43110: PPUSH
43111: LD_VAR 0 7
43115: PPUSH
43116: CALL_OW 488
43120: NOT
43121: IFFALSE 43143
// begin _x := x ;
43123: LD_ADDR_VAR 0 6
43127: PUSH
43128: LD_VAR 0 4
43132: ST_TO_ADDR
// _y := y ;
43133: LD_ADDR_VAR 0 7
43137: PUSH
43138: LD_VAR 0 5
43142: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43143: LD_ADDR_VAR 0 3
43147: PUSH
43148: LD_INT 1
43150: PPUSH
43151: LD_VAR 0 14
43155: PPUSH
43156: CALL_OW 12
43160: ST_TO_ADDR
// case i of 1 :
43161: LD_VAR 0 3
43165: PUSH
43166: LD_INT 1
43168: DOUBLE
43169: EQUAL
43170: IFTRUE 43174
43172: GO 43191
43174: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43175: LD_VAR 0 1
43179: PPUSH
43180: LD_VAR 0 10
43184: PPUSH
43185: CALL_OW 115
43189: GO 43252
43191: LD_INT 2
43193: DOUBLE
43194: EQUAL
43195: IFTRUE 43199
43197: GO 43221
43199: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43200: LD_VAR 0 1
43204: PPUSH
43205: LD_VAR 0 6
43209: PPUSH
43210: LD_VAR 0 7
43214: PPUSH
43215: CALL_OW 153
43219: GO 43252
43221: LD_INT 3
43223: DOUBLE
43224: EQUAL
43225: IFTRUE 43229
43227: GO 43251
43229: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43230: LD_VAR 0 1
43234: PPUSH
43235: LD_VAR 0 6
43239: PPUSH
43240: LD_VAR 0 7
43244: PPUSH
43245: CALL_OW 154
43249: GO 43252
43251: POP
// end ;
43252: LD_VAR 0 2
43256: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43257: LD_INT 0
43259: PPUSH
43260: PPUSH
43261: PPUSH
43262: PPUSH
43263: PPUSH
43264: PPUSH
// if not unit or not building then
43265: LD_VAR 0 1
43269: NOT
43270: PUSH
43271: LD_VAR 0 2
43275: NOT
43276: OR
43277: IFFALSE 43281
// exit ;
43279: GO 43439
// x := GetX ( building ) ;
43281: LD_ADDR_VAR 0 5
43285: PUSH
43286: LD_VAR 0 2
43290: PPUSH
43291: CALL_OW 250
43295: ST_TO_ADDR
// y := GetY ( building ) ;
43296: LD_ADDR_VAR 0 6
43300: PUSH
43301: LD_VAR 0 2
43305: PPUSH
43306: CALL_OW 251
43310: ST_TO_ADDR
// for i = 0 to 5 do
43311: LD_ADDR_VAR 0 4
43315: PUSH
43316: DOUBLE
43317: LD_INT 0
43319: DEC
43320: ST_TO_ADDR
43321: LD_INT 5
43323: PUSH
43324: FOR_TO
43325: IFFALSE 43437
// begin _x := ShiftX ( x , i , 3 ) ;
43327: LD_ADDR_VAR 0 7
43331: PUSH
43332: LD_VAR 0 5
43336: PPUSH
43337: LD_VAR 0 4
43341: PPUSH
43342: LD_INT 3
43344: PPUSH
43345: CALL_OW 272
43349: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43350: LD_ADDR_VAR 0 8
43354: PUSH
43355: LD_VAR 0 6
43359: PPUSH
43360: LD_VAR 0 4
43364: PPUSH
43365: LD_INT 3
43367: PPUSH
43368: CALL_OW 273
43372: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43373: LD_VAR 0 7
43377: PPUSH
43378: LD_VAR 0 8
43382: PPUSH
43383: CALL_OW 488
43387: NOT
43388: IFFALSE 43392
// continue ;
43390: GO 43324
// if HexInfo ( _x , _y ) = 0 then
43392: LD_VAR 0 7
43396: PPUSH
43397: LD_VAR 0 8
43401: PPUSH
43402: CALL_OW 428
43406: PUSH
43407: LD_INT 0
43409: EQUAL
43410: IFFALSE 43435
// begin ComMoveXY ( unit , _x , _y ) ;
43412: LD_VAR 0 1
43416: PPUSH
43417: LD_VAR 0 7
43421: PPUSH
43422: LD_VAR 0 8
43426: PPUSH
43427: CALL_OW 111
// exit ;
43431: POP
43432: POP
43433: GO 43439
// end ; end ;
43435: GO 43324
43437: POP
43438: POP
// end ;
43439: LD_VAR 0 3
43443: RET
// export function ScanBase ( side , base_area ) ; begin
43444: LD_INT 0
43446: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43447: LD_ADDR_VAR 0 3
43451: PUSH
43452: LD_VAR 0 2
43456: PPUSH
43457: LD_INT 81
43459: PUSH
43460: LD_VAR 0 1
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PPUSH
43469: CALL_OW 70
43473: ST_TO_ADDR
// end ;
43474: LD_VAR 0 3
43478: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43479: LD_INT 0
43481: PPUSH
43482: PPUSH
43483: PPUSH
43484: PPUSH
// result := false ;
43485: LD_ADDR_VAR 0 2
43489: PUSH
43490: LD_INT 0
43492: ST_TO_ADDR
// side := GetSide ( unit ) ;
43493: LD_ADDR_VAR 0 3
43497: PUSH
43498: LD_VAR 0 1
43502: PPUSH
43503: CALL_OW 255
43507: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43508: LD_ADDR_VAR 0 4
43512: PUSH
43513: LD_VAR 0 1
43517: PPUSH
43518: CALL_OW 248
43522: ST_TO_ADDR
// case nat of 1 :
43523: LD_VAR 0 4
43527: PUSH
43528: LD_INT 1
43530: DOUBLE
43531: EQUAL
43532: IFTRUE 43536
43534: GO 43547
43536: POP
// tech := tech_lassight ; 2 :
43537: LD_ADDR_VAR 0 5
43541: PUSH
43542: LD_INT 12
43544: ST_TO_ADDR
43545: GO 43586
43547: LD_INT 2
43549: DOUBLE
43550: EQUAL
43551: IFTRUE 43555
43553: GO 43566
43555: POP
// tech := tech_mortar ; 3 :
43556: LD_ADDR_VAR 0 5
43560: PUSH
43561: LD_INT 41
43563: ST_TO_ADDR
43564: GO 43586
43566: LD_INT 3
43568: DOUBLE
43569: EQUAL
43570: IFTRUE 43574
43572: GO 43585
43574: POP
// tech := tech_bazooka ; end ;
43575: LD_ADDR_VAR 0 5
43579: PUSH
43580: LD_INT 44
43582: ST_TO_ADDR
43583: GO 43586
43585: POP
// if Researched ( side , tech ) then
43586: LD_VAR 0 3
43590: PPUSH
43591: LD_VAR 0 5
43595: PPUSH
43596: CALL_OW 325
43600: IFFALSE 43627
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43602: LD_ADDR_VAR 0 2
43606: PUSH
43607: LD_INT 5
43609: PUSH
43610: LD_INT 8
43612: PUSH
43613: LD_INT 9
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: LIST
43620: PUSH
43621: LD_VAR 0 4
43625: ARRAY
43626: ST_TO_ADDR
// end ;
43627: LD_VAR 0 2
43631: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43632: LD_INT 0
43634: PPUSH
43635: PPUSH
43636: PPUSH
// if not mines then
43637: LD_VAR 0 2
43641: NOT
43642: IFFALSE 43646
// exit ;
43644: GO 43790
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43646: LD_ADDR_VAR 0 5
43650: PUSH
43651: LD_INT 81
43653: PUSH
43654: LD_VAR 0 1
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 3
43665: PUSH
43666: LD_INT 21
43668: PUSH
43669: LD_INT 3
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PPUSH
43684: CALL_OW 69
43688: ST_TO_ADDR
// for i in mines do
43689: LD_ADDR_VAR 0 4
43693: PUSH
43694: LD_VAR 0 2
43698: PUSH
43699: FOR_IN
43700: IFFALSE 43788
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43702: LD_VAR 0 4
43706: PUSH
43707: LD_INT 1
43709: ARRAY
43710: PPUSH
43711: LD_VAR 0 4
43715: PUSH
43716: LD_INT 2
43718: ARRAY
43719: PPUSH
43720: CALL_OW 458
43724: NOT
43725: IFFALSE 43729
// continue ;
43727: GO 43699
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43729: LD_VAR 0 4
43733: PUSH
43734: LD_INT 1
43736: ARRAY
43737: PPUSH
43738: LD_VAR 0 4
43742: PUSH
43743: LD_INT 2
43745: ARRAY
43746: PPUSH
43747: CALL_OW 428
43751: PUSH
43752: LD_VAR 0 5
43756: IN
43757: IFFALSE 43786
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43759: LD_VAR 0 4
43763: PUSH
43764: LD_INT 1
43766: ARRAY
43767: PPUSH
43768: LD_VAR 0 4
43772: PUSH
43773: LD_INT 2
43775: ARRAY
43776: PPUSH
43777: LD_VAR 0 1
43781: PPUSH
43782: CALL_OW 456
// end ;
43786: GO 43699
43788: POP
43789: POP
// end ;
43790: LD_VAR 0 3
43794: RET
// export function Count ( array ) ; begin
43795: LD_INT 0
43797: PPUSH
// result := array + 0 ;
43798: LD_ADDR_VAR 0 2
43802: PUSH
43803: LD_VAR 0 1
43807: PUSH
43808: LD_INT 0
43810: PLUS
43811: ST_TO_ADDR
// end ;
43812: LD_VAR 0 2
43816: RET
// export function IsEmpty ( building ) ; begin
43817: LD_INT 0
43819: PPUSH
// if not building then
43820: LD_VAR 0 1
43824: NOT
43825: IFFALSE 43829
// exit ;
43827: GO 43872
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43829: LD_ADDR_VAR 0 2
43833: PUSH
43834: LD_VAR 0 1
43838: PUSH
43839: LD_INT 22
43841: PUSH
43842: LD_VAR 0 1
43846: PPUSH
43847: CALL_OW 255
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 58
43858: PUSH
43859: EMPTY
43860: LIST
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PPUSH
43866: CALL_OW 69
43870: IN
43871: ST_TO_ADDR
// end ;
43872: LD_VAR 0 2
43876: RET
// export function IsNotFull ( building ) ; var places ; begin
43877: LD_INT 0
43879: PPUSH
43880: PPUSH
// if not building then
43881: LD_VAR 0 1
43885: NOT
43886: IFFALSE 43890
// exit ;
43888: GO 43918
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43890: LD_ADDR_VAR 0 2
43894: PUSH
43895: LD_VAR 0 1
43899: PPUSH
43900: LD_INT 3
43902: PUSH
43903: LD_INT 62
43905: PUSH
43906: EMPTY
43907: LIST
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PPUSH
43913: CALL_OW 72
43917: ST_TO_ADDR
// end ;
43918: LD_VAR 0 2
43922: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43923: LD_INT 0
43925: PPUSH
43926: PPUSH
43927: PPUSH
43928: PPUSH
// tmp := [ ] ;
43929: LD_ADDR_VAR 0 3
43933: PUSH
43934: EMPTY
43935: ST_TO_ADDR
// list := [ ] ;
43936: LD_ADDR_VAR 0 5
43940: PUSH
43941: EMPTY
43942: ST_TO_ADDR
// for i = 16 to 25 do
43943: LD_ADDR_VAR 0 4
43947: PUSH
43948: DOUBLE
43949: LD_INT 16
43951: DEC
43952: ST_TO_ADDR
43953: LD_INT 25
43955: PUSH
43956: FOR_TO
43957: IFFALSE 44030
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43959: LD_ADDR_VAR 0 3
43963: PUSH
43964: LD_VAR 0 3
43968: PUSH
43969: LD_INT 22
43971: PUSH
43972: LD_VAR 0 1
43976: PPUSH
43977: CALL_OW 255
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 91
43988: PUSH
43989: LD_VAR 0 1
43993: PUSH
43994: LD_INT 6
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 30
44004: PUSH
44005: LD_VAR 0 4
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: LIST
44018: PUSH
44019: EMPTY
44020: LIST
44021: PPUSH
44022: CALL_OW 69
44026: ADD
44027: ST_TO_ADDR
44028: GO 43956
44030: POP
44031: POP
// for i = 1 to tmp do
44032: LD_ADDR_VAR 0 4
44036: PUSH
44037: DOUBLE
44038: LD_INT 1
44040: DEC
44041: ST_TO_ADDR
44042: LD_VAR 0 3
44046: PUSH
44047: FOR_TO
44048: IFFALSE 44136
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44050: LD_ADDR_VAR 0 5
44054: PUSH
44055: LD_VAR 0 5
44059: PUSH
44060: LD_VAR 0 3
44064: PUSH
44065: LD_VAR 0 4
44069: ARRAY
44070: PPUSH
44071: CALL_OW 266
44075: PUSH
44076: LD_VAR 0 3
44080: PUSH
44081: LD_VAR 0 4
44085: ARRAY
44086: PPUSH
44087: CALL_OW 250
44091: PUSH
44092: LD_VAR 0 3
44096: PUSH
44097: LD_VAR 0 4
44101: ARRAY
44102: PPUSH
44103: CALL_OW 251
44107: PUSH
44108: LD_VAR 0 3
44112: PUSH
44113: LD_VAR 0 4
44117: ARRAY
44118: PPUSH
44119: CALL_OW 254
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: PUSH
44130: EMPTY
44131: LIST
44132: ADD
44133: ST_TO_ADDR
44134: GO 44047
44136: POP
44137: POP
// result := list ;
44138: LD_ADDR_VAR 0 2
44142: PUSH
44143: LD_VAR 0 5
44147: ST_TO_ADDR
// end ;
44148: LD_VAR 0 2
44152: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44153: LD_INT 0
44155: PPUSH
44156: PPUSH
44157: PPUSH
44158: PPUSH
44159: PPUSH
44160: PPUSH
44161: PPUSH
// if not factory then
44162: LD_VAR 0 1
44166: NOT
44167: IFFALSE 44171
// exit ;
44169: GO 44764
// if control = control_apeman then
44171: LD_VAR 0 4
44175: PUSH
44176: LD_INT 5
44178: EQUAL
44179: IFFALSE 44288
// begin tmp := UnitsInside ( factory ) ;
44181: LD_ADDR_VAR 0 8
44185: PUSH
44186: LD_VAR 0 1
44190: PPUSH
44191: CALL_OW 313
44195: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44196: LD_VAR 0 8
44200: PPUSH
44201: LD_INT 25
44203: PUSH
44204: LD_INT 12
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PPUSH
44211: CALL_OW 72
44215: NOT
44216: IFFALSE 44226
// control := control_manual ;
44218: LD_ADDR_VAR 0 4
44222: PUSH
44223: LD_INT 1
44225: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44226: LD_ADDR_VAR 0 8
44230: PUSH
44231: LD_VAR 0 1
44235: PPUSH
44236: CALL 43923 0 1
44240: ST_TO_ADDR
// if tmp then
44241: LD_VAR 0 8
44245: IFFALSE 44288
// begin for i in tmp do
44247: LD_ADDR_VAR 0 7
44251: PUSH
44252: LD_VAR 0 8
44256: PUSH
44257: FOR_IN
44258: IFFALSE 44286
// if i [ 1 ] = b_ext_radio then
44260: LD_VAR 0 7
44264: PUSH
44265: LD_INT 1
44267: ARRAY
44268: PUSH
44269: LD_INT 22
44271: EQUAL
44272: IFFALSE 44284
// begin control := control_remote ;
44274: LD_ADDR_VAR 0 4
44278: PUSH
44279: LD_INT 2
44281: ST_TO_ADDR
// break ;
44282: GO 44286
// end ;
44284: GO 44257
44286: POP
44287: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44288: LD_VAR 0 1
44292: PPUSH
44293: LD_VAR 0 2
44297: PPUSH
44298: LD_VAR 0 3
44302: PPUSH
44303: LD_VAR 0 4
44307: PPUSH
44308: LD_VAR 0 5
44312: PPUSH
44313: CALL_OW 448
44317: IFFALSE 44352
// begin result := [ chassis , engine , control , weapon ] ;
44319: LD_ADDR_VAR 0 6
44323: PUSH
44324: LD_VAR 0 2
44328: PUSH
44329: LD_VAR 0 3
44333: PUSH
44334: LD_VAR 0 4
44338: PUSH
44339: LD_VAR 0 5
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: ST_TO_ADDR
// exit ;
44350: GO 44764
// end ; _chassis := AvailableChassisList ( factory ) ;
44352: LD_ADDR_VAR 0 9
44356: PUSH
44357: LD_VAR 0 1
44361: PPUSH
44362: CALL_OW 475
44366: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44367: LD_ADDR_VAR 0 11
44371: PUSH
44372: LD_VAR 0 1
44376: PPUSH
44377: CALL_OW 476
44381: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44382: LD_ADDR_VAR 0 12
44386: PUSH
44387: LD_VAR 0 1
44391: PPUSH
44392: CALL_OW 477
44396: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44397: LD_ADDR_VAR 0 10
44401: PUSH
44402: LD_VAR 0 1
44406: PPUSH
44407: CALL_OW 478
44411: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44412: LD_VAR 0 9
44416: NOT
44417: PUSH
44418: LD_VAR 0 11
44422: NOT
44423: OR
44424: PUSH
44425: LD_VAR 0 12
44429: NOT
44430: OR
44431: PUSH
44432: LD_VAR 0 10
44436: NOT
44437: OR
44438: IFFALSE 44473
// begin result := [ chassis , engine , control , weapon ] ;
44440: LD_ADDR_VAR 0 6
44444: PUSH
44445: LD_VAR 0 2
44449: PUSH
44450: LD_VAR 0 3
44454: PUSH
44455: LD_VAR 0 4
44459: PUSH
44460: LD_VAR 0 5
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: ST_TO_ADDR
// exit ;
44471: GO 44764
// end ; if not chassis in _chassis then
44473: LD_VAR 0 2
44477: PUSH
44478: LD_VAR 0 9
44482: IN
44483: NOT
44484: IFFALSE 44510
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44486: LD_ADDR_VAR 0 2
44490: PUSH
44491: LD_VAR 0 9
44495: PUSH
44496: LD_INT 1
44498: PPUSH
44499: LD_VAR 0 9
44503: PPUSH
44504: CALL_OW 12
44508: ARRAY
44509: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44510: LD_VAR 0 2
44514: PPUSH
44515: LD_VAR 0 3
44519: PPUSH
44520: CALL 44769 0 2
44524: NOT
44525: IFFALSE 44584
// repeat engine := _engine [ 1 ] ;
44527: LD_ADDR_VAR 0 3
44531: PUSH
44532: LD_VAR 0 11
44536: PUSH
44537: LD_INT 1
44539: ARRAY
44540: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44541: LD_ADDR_VAR 0 11
44545: PUSH
44546: LD_VAR 0 11
44550: PPUSH
44551: LD_INT 1
44553: PPUSH
44554: CALL_OW 3
44558: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44559: LD_VAR 0 2
44563: PPUSH
44564: LD_VAR 0 3
44568: PPUSH
44569: CALL 44769 0 2
44573: PUSH
44574: LD_VAR 0 11
44578: PUSH
44579: EMPTY
44580: EQUAL
44581: OR
44582: IFFALSE 44527
// if not control in _control then
44584: LD_VAR 0 4
44588: PUSH
44589: LD_VAR 0 12
44593: IN
44594: NOT
44595: IFFALSE 44621
// control := _control [ rand ( 1 , _control ) ] ;
44597: LD_ADDR_VAR 0 4
44601: PUSH
44602: LD_VAR 0 12
44606: PUSH
44607: LD_INT 1
44609: PPUSH
44610: LD_VAR 0 12
44614: PPUSH
44615: CALL_OW 12
44619: ARRAY
44620: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44621: LD_VAR 0 2
44625: PPUSH
44626: LD_VAR 0 5
44630: PPUSH
44631: CALL 44989 0 2
44635: NOT
44636: IFFALSE 44695
// repeat weapon := _weapon [ 1 ] ;
44638: LD_ADDR_VAR 0 5
44642: PUSH
44643: LD_VAR 0 10
44647: PUSH
44648: LD_INT 1
44650: ARRAY
44651: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44652: LD_ADDR_VAR 0 10
44656: PUSH
44657: LD_VAR 0 10
44661: PPUSH
44662: LD_INT 1
44664: PPUSH
44665: CALL_OW 3
44669: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44670: LD_VAR 0 2
44674: PPUSH
44675: LD_VAR 0 5
44679: PPUSH
44680: CALL 44989 0 2
44684: PUSH
44685: LD_VAR 0 10
44689: PUSH
44690: EMPTY
44691: EQUAL
44692: OR
44693: IFFALSE 44638
// result := [ ] ;
44695: LD_ADDR_VAR 0 6
44699: PUSH
44700: EMPTY
44701: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44702: LD_VAR 0 1
44706: PPUSH
44707: LD_VAR 0 2
44711: PPUSH
44712: LD_VAR 0 3
44716: PPUSH
44717: LD_VAR 0 4
44721: PPUSH
44722: LD_VAR 0 5
44726: PPUSH
44727: CALL_OW 448
44731: IFFALSE 44764
// result := [ chassis , engine , control , weapon ] ;
44733: LD_ADDR_VAR 0 6
44737: PUSH
44738: LD_VAR 0 2
44742: PUSH
44743: LD_VAR 0 3
44747: PUSH
44748: LD_VAR 0 4
44752: PUSH
44753: LD_VAR 0 5
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: ST_TO_ADDR
// end ;
44764: LD_VAR 0 6
44768: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44769: LD_INT 0
44771: PPUSH
// if not chassis or not engine then
44772: LD_VAR 0 1
44776: NOT
44777: PUSH
44778: LD_VAR 0 2
44782: NOT
44783: OR
44784: IFFALSE 44788
// exit ;
44786: GO 44984
// case engine of engine_solar :
44788: LD_VAR 0 2
44792: PUSH
44793: LD_INT 2
44795: DOUBLE
44796: EQUAL
44797: IFTRUE 44801
44799: GO 44839
44801: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44802: LD_ADDR_VAR 0 3
44806: PUSH
44807: LD_INT 11
44809: PUSH
44810: LD_INT 12
44812: PUSH
44813: LD_INT 13
44815: PUSH
44816: LD_INT 14
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: LD_INT 2
44824: PUSH
44825: LD_INT 3
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: ST_TO_ADDR
44837: GO 44968
44839: LD_INT 1
44841: DOUBLE
44842: EQUAL
44843: IFTRUE 44847
44845: GO 44909
44847: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44848: LD_ADDR_VAR 0 3
44852: PUSH
44853: LD_INT 11
44855: PUSH
44856: LD_INT 12
44858: PUSH
44859: LD_INT 13
44861: PUSH
44862: LD_INT 14
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: LD_INT 2
44870: PUSH
44871: LD_INT 3
44873: PUSH
44874: LD_INT 4
44876: PUSH
44877: LD_INT 5
44879: PUSH
44880: LD_INT 21
44882: PUSH
44883: LD_INT 23
44885: PUSH
44886: LD_INT 22
44888: PUSH
44889: LD_INT 24
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: ST_TO_ADDR
44907: GO 44968
44909: LD_INT 3
44911: DOUBLE
44912: EQUAL
44913: IFTRUE 44917
44915: GO 44967
44917: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44918: LD_ADDR_VAR 0 3
44922: PUSH
44923: LD_INT 13
44925: PUSH
44926: LD_INT 14
44928: PUSH
44929: LD_INT 2
44931: PUSH
44932: LD_INT 3
44934: PUSH
44935: LD_INT 4
44937: PUSH
44938: LD_INT 5
44940: PUSH
44941: LD_INT 21
44943: PUSH
44944: LD_INT 22
44946: PUSH
44947: LD_INT 23
44949: PUSH
44950: LD_INT 24
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: ST_TO_ADDR
44965: GO 44968
44967: POP
// result := ( chassis in result ) ;
44968: LD_ADDR_VAR 0 3
44972: PUSH
44973: LD_VAR 0 1
44977: PUSH
44978: LD_VAR 0 3
44982: IN
44983: ST_TO_ADDR
// end ;
44984: LD_VAR 0 3
44988: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44989: LD_INT 0
44991: PPUSH
// if not chassis or not weapon then
44992: LD_VAR 0 1
44996: NOT
44997: PUSH
44998: LD_VAR 0 2
45002: NOT
45003: OR
45004: IFFALSE 45008
// exit ;
45006: GO 46068
// case weapon of us_machine_gun :
45008: LD_VAR 0 2
45012: PUSH
45013: LD_INT 2
45015: DOUBLE
45016: EQUAL
45017: IFTRUE 45021
45019: GO 45051
45021: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45022: LD_ADDR_VAR 0 3
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: LD_INT 3
45035: PUSH
45036: LD_INT 4
45038: PUSH
45039: LD_INT 5
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: ST_TO_ADDR
45049: GO 46052
45051: LD_INT 3
45053: DOUBLE
45054: EQUAL
45055: IFTRUE 45059
45057: GO 45089
45059: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45060: LD_ADDR_VAR 0 3
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: LD_INT 2
45070: PUSH
45071: LD_INT 3
45073: PUSH
45074: LD_INT 4
45076: PUSH
45077: LD_INT 5
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: ST_TO_ADDR
45087: GO 46052
45089: LD_INT 11
45091: DOUBLE
45092: EQUAL
45093: IFTRUE 45097
45095: GO 45127
45097: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45098: LD_ADDR_VAR 0 3
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: LD_INT 3
45111: PUSH
45112: LD_INT 4
45114: PUSH
45115: LD_INT 5
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: ST_TO_ADDR
45125: GO 46052
45127: LD_INT 4
45129: DOUBLE
45130: EQUAL
45131: IFTRUE 45135
45133: GO 45161
45135: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45136: LD_ADDR_VAR 0 3
45140: PUSH
45141: LD_INT 2
45143: PUSH
45144: LD_INT 3
45146: PUSH
45147: LD_INT 4
45149: PUSH
45150: LD_INT 5
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: ST_TO_ADDR
45159: GO 46052
45161: LD_INT 5
45163: DOUBLE
45164: EQUAL
45165: IFTRUE 45169
45167: GO 45195
45169: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45170: LD_ADDR_VAR 0 3
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: LD_INT 3
45180: PUSH
45181: LD_INT 4
45183: PUSH
45184: LD_INT 5
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: ST_TO_ADDR
45193: GO 46052
45195: LD_INT 9
45197: DOUBLE
45198: EQUAL
45199: IFTRUE 45203
45201: GO 45229
45203: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45204: LD_ADDR_VAR 0 3
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: LD_INT 3
45214: PUSH
45215: LD_INT 4
45217: PUSH
45218: LD_INT 5
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: ST_TO_ADDR
45227: GO 46052
45229: LD_INT 7
45231: DOUBLE
45232: EQUAL
45233: IFTRUE 45237
45235: GO 45263
45237: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45238: LD_ADDR_VAR 0 3
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: LD_INT 3
45248: PUSH
45249: LD_INT 4
45251: PUSH
45252: LD_INT 5
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: ST_TO_ADDR
45261: GO 46052
45263: LD_INT 12
45265: DOUBLE
45266: EQUAL
45267: IFTRUE 45271
45269: GO 45297
45271: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45272: LD_ADDR_VAR 0 3
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: LD_INT 3
45282: PUSH
45283: LD_INT 4
45285: PUSH
45286: LD_INT 5
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: ST_TO_ADDR
45295: GO 46052
45297: LD_INT 13
45299: DOUBLE
45300: EQUAL
45301: IFTRUE 45305
45303: GO 45331
45305: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45306: LD_ADDR_VAR 0 3
45310: PUSH
45311: LD_INT 2
45313: PUSH
45314: LD_INT 3
45316: PUSH
45317: LD_INT 4
45319: PUSH
45320: LD_INT 5
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: ST_TO_ADDR
45329: GO 46052
45331: LD_INT 14
45333: DOUBLE
45334: EQUAL
45335: IFTRUE 45339
45337: GO 45357
45339: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45340: LD_ADDR_VAR 0 3
45344: PUSH
45345: LD_INT 4
45347: PUSH
45348: LD_INT 5
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: ST_TO_ADDR
45355: GO 46052
45357: LD_INT 6
45359: DOUBLE
45360: EQUAL
45361: IFTRUE 45365
45363: GO 45383
45365: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45366: LD_ADDR_VAR 0 3
45370: PUSH
45371: LD_INT 4
45373: PUSH
45374: LD_INT 5
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: ST_TO_ADDR
45381: GO 46052
45383: LD_INT 10
45385: DOUBLE
45386: EQUAL
45387: IFTRUE 45391
45389: GO 45409
45391: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45392: LD_ADDR_VAR 0 3
45396: PUSH
45397: LD_INT 4
45399: PUSH
45400: LD_INT 5
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: ST_TO_ADDR
45407: GO 46052
45409: LD_INT 22
45411: DOUBLE
45412: EQUAL
45413: IFTRUE 45417
45415: GO 45443
45417: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45418: LD_ADDR_VAR 0 3
45422: PUSH
45423: LD_INT 11
45425: PUSH
45426: LD_INT 12
45428: PUSH
45429: LD_INT 13
45431: PUSH
45432: LD_INT 14
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: ST_TO_ADDR
45441: GO 46052
45443: LD_INT 23
45445: DOUBLE
45446: EQUAL
45447: IFTRUE 45451
45449: GO 45477
45451: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45452: LD_ADDR_VAR 0 3
45456: PUSH
45457: LD_INT 11
45459: PUSH
45460: LD_INT 12
45462: PUSH
45463: LD_INT 13
45465: PUSH
45466: LD_INT 14
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: ST_TO_ADDR
45475: GO 46052
45477: LD_INT 24
45479: DOUBLE
45480: EQUAL
45481: IFTRUE 45485
45483: GO 45511
45485: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45486: LD_ADDR_VAR 0 3
45490: PUSH
45491: LD_INT 11
45493: PUSH
45494: LD_INT 12
45496: PUSH
45497: LD_INT 13
45499: PUSH
45500: LD_INT 14
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: ST_TO_ADDR
45509: GO 46052
45511: LD_INT 30
45513: DOUBLE
45514: EQUAL
45515: IFTRUE 45519
45517: GO 45545
45519: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45520: LD_ADDR_VAR 0 3
45524: PUSH
45525: LD_INT 11
45527: PUSH
45528: LD_INT 12
45530: PUSH
45531: LD_INT 13
45533: PUSH
45534: LD_INT 14
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: ST_TO_ADDR
45543: GO 46052
45545: LD_INT 25
45547: DOUBLE
45548: EQUAL
45549: IFTRUE 45553
45551: GO 45571
45553: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45554: LD_ADDR_VAR 0 3
45558: PUSH
45559: LD_INT 13
45561: PUSH
45562: LD_INT 14
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: ST_TO_ADDR
45569: GO 46052
45571: LD_INT 27
45573: DOUBLE
45574: EQUAL
45575: IFTRUE 45579
45577: GO 45597
45579: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45580: LD_ADDR_VAR 0 3
45584: PUSH
45585: LD_INT 13
45587: PUSH
45588: LD_INT 14
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: ST_TO_ADDR
45595: GO 46052
45597: LD_INT 92
45599: DOUBLE
45600: EQUAL
45601: IFTRUE 45605
45603: GO 45631
45605: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45606: LD_ADDR_VAR 0 3
45610: PUSH
45611: LD_INT 11
45613: PUSH
45614: LD_INT 12
45616: PUSH
45617: LD_INT 13
45619: PUSH
45620: LD_INT 14
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: ST_TO_ADDR
45629: GO 46052
45631: LD_INT 28
45633: DOUBLE
45634: EQUAL
45635: IFTRUE 45639
45637: GO 45657
45639: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45640: LD_ADDR_VAR 0 3
45644: PUSH
45645: LD_INT 13
45647: PUSH
45648: LD_INT 14
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: ST_TO_ADDR
45655: GO 46052
45657: LD_INT 29
45659: DOUBLE
45660: EQUAL
45661: IFTRUE 45665
45663: GO 45683
45665: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45666: LD_ADDR_VAR 0 3
45670: PUSH
45671: LD_INT 13
45673: PUSH
45674: LD_INT 14
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: ST_TO_ADDR
45681: GO 46052
45683: LD_INT 31
45685: DOUBLE
45686: EQUAL
45687: IFTRUE 45691
45689: GO 45709
45691: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45692: LD_ADDR_VAR 0 3
45696: PUSH
45697: LD_INT 13
45699: PUSH
45700: LD_INT 14
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: ST_TO_ADDR
45707: GO 46052
45709: LD_INT 26
45711: DOUBLE
45712: EQUAL
45713: IFTRUE 45717
45715: GO 45735
45717: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45718: LD_ADDR_VAR 0 3
45722: PUSH
45723: LD_INT 13
45725: PUSH
45726: LD_INT 14
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: ST_TO_ADDR
45733: GO 46052
45735: LD_INT 42
45737: DOUBLE
45738: EQUAL
45739: IFTRUE 45743
45741: GO 45769
45743: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45744: LD_ADDR_VAR 0 3
45748: PUSH
45749: LD_INT 21
45751: PUSH
45752: LD_INT 22
45754: PUSH
45755: LD_INT 23
45757: PUSH
45758: LD_INT 24
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: ST_TO_ADDR
45767: GO 46052
45769: LD_INT 43
45771: DOUBLE
45772: EQUAL
45773: IFTRUE 45777
45775: GO 45803
45777: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45778: LD_ADDR_VAR 0 3
45782: PUSH
45783: LD_INT 21
45785: PUSH
45786: LD_INT 22
45788: PUSH
45789: LD_INT 23
45791: PUSH
45792: LD_INT 24
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: ST_TO_ADDR
45801: GO 46052
45803: LD_INT 44
45805: DOUBLE
45806: EQUAL
45807: IFTRUE 45811
45809: GO 45837
45811: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45812: LD_ADDR_VAR 0 3
45816: PUSH
45817: LD_INT 21
45819: PUSH
45820: LD_INT 22
45822: PUSH
45823: LD_INT 23
45825: PUSH
45826: LD_INT 24
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: ST_TO_ADDR
45835: GO 46052
45837: LD_INT 45
45839: DOUBLE
45840: EQUAL
45841: IFTRUE 45845
45843: GO 45871
45845: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45846: LD_ADDR_VAR 0 3
45850: PUSH
45851: LD_INT 21
45853: PUSH
45854: LD_INT 22
45856: PUSH
45857: LD_INT 23
45859: PUSH
45860: LD_INT 24
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: ST_TO_ADDR
45869: GO 46052
45871: LD_INT 49
45873: DOUBLE
45874: EQUAL
45875: IFTRUE 45879
45877: GO 45905
45879: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45880: LD_ADDR_VAR 0 3
45884: PUSH
45885: LD_INT 21
45887: PUSH
45888: LD_INT 22
45890: PUSH
45891: LD_INT 23
45893: PUSH
45894: LD_INT 24
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: ST_TO_ADDR
45903: GO 46052
45905: LD_INT 51
45907: DOUBLE
45908: EQUAL
45909: IFTRUE 45913
45911: GO 45939
45913: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45914: LD_ADDR_VAR 0 3
45918: PUSH
45919: LD_INT 21
45921: PUSH
45922: LD_INT 22
45924: PUSH
45925: LD_INT 23
45927: PUSH
45928: LD_INT 24
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: ST_TO_ADDR
45937: GO 46052
45939: LD_INT 52
45941: DOUBLE
45942: EQUAL
45943: IFTRUE 45947
45945: GO 45973
45947: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45948: LD_ADDR_VAR 0 3
45952: PUSH
45953: LD_INT 21
45955: PUSH
45956: LD_INT 22
45958: PUSH
45959: LD_INT 23
45961: PUSH
45962: LD_INT 24
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: ST_TO_ADDR
45971: GO 46052
45973: LD_INT 53
45975: DOUBLE
45976: EQUAL
45977: IFTRUE 45981
45979: GO 45999
45981: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45982: LD_ADDR_VAR 0 3
45986: PUSH
45987: LD_INT 23
45989: PUSH
45990: LD_INT 24
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: ST_TO_ADDR
45997: GO 46052
45999: LD_INT 46
46001: DOUBLE
46002: EQUAL
46003: IFTRUE 46007
46005: GO 46025
46007: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46008: LD_ADDR_VAR 0 3
46012: PUSH
46013: LD_INT 23
46015: PUSH
46016: LD_INT 24
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: ST_TO_ADDR
46023: GO 46052
46025: LD_INT 47
46027: DOUBLE
46028: EQUAL
46029: IFTRUE 46033
46031: GO 46051
46033: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46034: LD_ADDR_VAR 0 3
46038: PUSH
46039: LD_INT 23
46041: PUSH
46042: LD_INT 24
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: ST_TO_ADDR
46049: GO 46052
46051: POP
// result := ( chassis in result ) ;
46052: LD_ADDR_VAR 0 3
46056: PUSH
46057: LD_VAR 0 1
46061: PUSH
46062: LD_VAR 0 3
46066: IN
46067: ST_TO_ADDR
// end ;
46068: LD_VAR 0 3
46072: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46073: LD_INT 0
46075: PPUSH
46076: PPUSH
46077: PPUSH
46078: PPUSH
46079: PPUSH
46080: PPUSH
46081: PPUSH
// result := array ;
46082: LD_ADDR_VAR 0 5
46086: PUSH
46087: LD_VAR 0 1
46091: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46092: LD_VAR 0 1
46096: NOT
46097: PUSH
46098: LD_VAR 0 2
46102: NOT
46103: OR
46104: PUSH
46105: LD_VAR 0 3
46109: NOT
46110: OR
46111: PUSH
46112: LD_VAR 0 2
46116: PUSH
46117: LD_VAR 0 1
46121: GREATER
46122: OR
46123: PUSH
46124: LD_VAR 0 3
46128: PUSH
46129: LD_VAR 0 1
46133: GREATER
46134: OR
46135: IFFALSE 46139
// exit ;
46137: GO 46435
// if direction then
46139: LD_VAR 0 4
46143: IFFALSE 46207
// begin d := 1 ;
46145: LD_ADDR_VAR 0 9
46149: PUSH
46150: LD_INT 1
46152: ST_TO_ADDR
// if i_from > i_to then
46153: LD_VAR 0 2
46157: PUSH
46158: LD_VAR 0 3
46162: GREATER
46163: IFFALSE 46189
// length := ( array - i_from ) + i_to else
46165: LD_ADDR_VAR 0 11
46169: PUSH
46170: LD_VAR 0 1
46174: PUSH
46175: LD_VAR 0 2
46179: MINUS
46180: PUSH
46181: LD_VAR 0 3
46185: PLUS
46186: ST_TO_ADDR
46187: GO 46205
// length := i_to - i_from ;
46189: LD_ADDR_VAR 0 11
46193: PUSH
46194: LD_VAR 0 3
46198: PUSH
46199: LD_VAR 0 2
46203: MINUS
46204: ST_TO_ADDR
// end else
46205: GO 46268
// begin d := - 1 ;
46207: LD_ADDR_VAR 0 9
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: ST_TO_ADDR
// if i_from > i_to then
46216: LD_VAR 0 2
46220: PUSH
46221: LD_VAR 0 3
46225: GREATER
46226: IFFALSE 46246
// length := i_from - i_to else
46228: LD_ADDR_VAR 0 11
46232: PUSH
46233: LD_VAR 0 2
46237: PUSH
46238: LD_VAR 0 3
46242: MINUS
46243: ST_TO_ADDR
46244: GO 46268
// length := ( array - i_to ) + i_from ;
46246: LD_ADDR_VAR 0 11
46250: PUSH
46251: LD_VAR 0 1
46255: PUSH
46256: LD_VAR 0 3
46260: MINUS
46261: PUSH
46262: LD_VAR 0 2
46266: PLUS
46267: ST_TO_ADDR
// end ; if not length then
46268: LD_VAR 0 11
46272: NOT
46273: IFFALSE 46277
// exit ;
46275: GO 46435
// tmp := array ;
46277: LD_ADDR_VAR 0 10
46281: PUSH
46282: LD_VAR 0 1
46286: ST_TO_ADDR
// for i = 1 to length do
46287: LD_ADDR_VAR 0 6
46291: PUSH
46292: DOUBLE
46293: LD_INT 1
46295: DEC
46296: ST_TO_ADDR
46297: LD_VAR 0 11
46301: PUSH
46302: FOR_TO
46303: IFFALSE 46423
// begin for j = 1 to array do
46305: LD_ADDR_VAR 0 7
46309: PUSH
46310: DOUBLE
46311: LD_INT 1
46313: DEC
46314: ST_TO_ADDR
46315: LD_VAR 0 1
46319: PUSH
46320: FOR_TO
46321: IFFALSE 46409
// begin k := j + d ;
46323: LD_ADDR_VAR 0 8
46327: PUSH
46328: LD_VAR 0 7
46332: PUSH
46333: LD_VAR 0 9
46337: PLUS
46338: ST_TO_ADDR
// if k > array then
46339: LD_VAR 0 8
46343: PUSH
46344: LD_VAR 0 1
46348: GREATER
46349: IFFALSE 46359
// k := 1 ;
46351: LD_ADDR_VAR 0 8
46355: PUSH
46356: LD_INT 1
46358: ST_TO_ADDR
// if not k then
46359: LD_VAR 0 8
46363: NOT
46364: IFFALSE 46376
// k := array ;
46366: LD_ADDR_VAR 0 8
46370: PUSH
46371: LD_VAR 0 1
46375: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46376: LD_ADDR_VAR 0 10
46380: PUSH
46381: LD_VAR 0 10
46385: PPUSH
46386: LD_VAR 0 8
46390: PPUSH
46391: LD_VAR 0 1
46395: PUSH
46396: LD_VAR 0 7
46400: ARRAY
46401: PPUSH
46402: CALL_OW 1
46406: ST_TO_ADDR
// end ;
46407: GO 46320
46409: POP
46410: POP
// array := tmp ;
46411: LD_ADDR_VAR 0 1
46415: PUSH
46416: LD_VAR 0 10
46420: ST_TO_ADDR
// end ;
46421: GO 46302
46423: POP
46424: POP
// result := array ;
46425: LD_ADDR_VAR 0 5
46429: PUSH
46430: LD_VAR 0 1
46434: ST_TO_ADDR
// end ;
46435: LD_VAR 0 5
46439: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46440: LD_INT 0
46442: PPUSH
46443: PPUSH
// result := 0 ;
46444: LD_ADDR_VAR 0 3
46448: PUSH
46449: LD_INT 0
46451: ST_TO_ADDR
// if not array or not value in array then
46452: LD_VAR 0 1
46456: NOT
46457: PUSH
46458: LD_VAR 0 2
46462: PUSH
46463: LD_VAR 0 1
46467: IN
46468: NOT
46469: OR
46470: IFFALSE 46474
// exit ;
46472: GO 46528
// for i = 1 to array do
46474: LD_ADDR_VAR 0 4
46478: PUSH
46479: DOUBLE
46480: LD_INT 1
46482: DEC
46483: ST_TO_ADDR
46484: LD_VAR 0 1
46488: PUSH
46489: FOR_TO
46490: IFFALSE 46526
// if value = array [ i ] then
46492: LD_VAR 0 2
46496: PUSH
46497: LD_VAR 0 1
46501: PUSH
46502: LD_VAR 0 4
46506: ARRAY
46507: EQUAL
46508: IFFALSE 46524
// begin result := i ;
46510: LD_ADDR_VAR 0 3
46514: PUSH
46515: LD_VAR 0 4
46519: ST_TO_ADDR
// exit ;
46520: POP
46521: POP
46522: GO 46528
// end ;
46524: GO 46489
46526: POP
46527: POP
// end ;
46528: LD_VAR 0 3
46532: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46533: LD_INT 0
46535: PPUSH
// vc_chassis := chassis ;
46536: LD_ADDR_OWVAR 37
46540: PUSH
46541: LD_VAR 0 1
46545: ST_TO_ADDR
// vc_engine := engine ;
46546: LD_ADDR_OWVAR 39
46550: PUSH
46551: LD_VAR 0 2
46555: ST_TO_ADDR
// vc_control := control ;
46556: LD_ADDR_OWVAR 38
46560: PUSH
46561: LD_VAR 0 3
46565: ST_TO_ADDR
// vc_weapon := weapon ;
46566: LD_ADDR_OWVAR 40
46570: PUSH
46571: LD_VAR 0 4
46575: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46576: LD_ADDR_OWVAR 41
46580: PUSH
46581: LD_VAR 0 5
46585: ST_TO_ADDR
// end ;
46586: LD_VAR 0 6
46590: RET
// export function WantPlant ( unit ) ; var task ; begin
46591: LD_INT 0
46593: PPUSH
46594: PPUSH
// result := false ;
46595: LD_ADDR_VAR 0 2
46599: PUSH
46600: LD_INT 0
46602: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46603: LD_ADDR_VAR 0 3
46607: PUSH
46608: LD_VAR 0 1
46612: PPUSH
46613: CALL_OW 437
46617: ST_TO_ADDR
// if task then
46618: LD_VAR 0 3
46622: IFFALSE 46650
// if task [ 1 ] [ 1 ] = p then
46624: LD_VAR 0 3
46628: PUSH
46629: LD_INT 1
46631: ARRAY
46632: PUSH
46633: LD_INT 1
46635: ARRAY
46636: PUSH
46637: LD_STRING p
46639: EQUAL
46640: IFFALSE 46650
// result := true ;
46642: LD_ADDR_VAR 0 2
46646: PUSH
46647: LD_INT 1
46649: ST_TO_ADDR
// end ;
46650: LD_VAR 0 2
46654: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46655: LD_INT 0
46657: PPUSH
46658: PPUSH
46659: PPUSH
46660: PPUSH
// if pos < 1 then
46661: LD_VAR 0 2
46665: PUSH
46666: LD_INT 1
46668: LESS
46669: IFFALSE 46673
// exit ;
46671: GO 46976
// if pos = 1 then
46673: LD_VAR 0 2
46677: PUSH
46678: LD_INT 1
46680: EQUAL
46681: IFFALSE 46714
// result := Replace ( arr , pos [ 1 ] , value ) else
46683: LD_ADDR_VAR 0 4
46687: PUSH
46688: LD_VAR 0 1
46692: PPUSH
46693: LD_VAR 0 2
46697: PUSH
46698: LD_INT 1
46700: ARRAY
46701: PPUSH
46702: LD_VAR 0 3
46706: PPUSH
46707: CALL_OW 1
46711: ST_TO_ADDR
46712: GO 46976
// begin tmp := arr ;
46714: LD_ADDR_VAR 0 6
46718: PUSH
46719: LD_VAR 0 1
46723: ST_TO_ADDR
// s_arr := [ tmp ] ;
46724: LD_ADDR_VAR 0 7
46728: PUSH
46729: LD_VAR 0 6
46733: PUSH
46734: EMPTY
46735: LIST
46736: ST_TO_ADDR
// for i = 1 to pos - 1 do
46737: LD_ADDR_VAR 0 5
46741: PUSH
46742: DOUBLE
46743: LD_INT 1
46745: DEC
46746: ST_TO_ADDR
46747: LD_VAR 0 2
46751: PUSH
46752: LD_INT 1
46754: MINUS
46755: PUSH
46756: FOR_TO
46757: IFFALSE 46802
// begin tmp := tmp [ pos [ i ] ] ;
46759: LD_ADDR_VAR 0 6
46763: PUSH
46764: LD_VAR 0 6
46768: PUSH
46769: LD_VAR 0 2
46773: PUSH
46774: LD_VAR 0 5
46778: ARRAY
46779: ARRAY
46780: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46781: LD_ADDR_VAR 0 7
46785: PUSH
46786: LD_VAR 0 7
46790: PUSH
46791: LD_VAR 0 6
46795: PUSH
46796: EMPTY
46797: LIST
46798: ADD
46799: ST_TO_ADDR
// end ;
46800: GO 46756
46802: POP
46803: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46804: LD_ADDR_VAR 0 6
46808: PUSH
46809: LD_VAR 0 6
46813: PPUSH
46814: LD_VAR 0 2
46818: PUSH
46819: LD_VAR 0 2
46823: ARRAY
46824: PPUSH
46825: LD_VAR 0 3
46829: PPUSH
46830: CALL_OW 1
46834: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46835: LD_ADDR_VAR 0 7
46839: PUSH
46840: LD_VAR 0 7
46844: PPUSH
46845: LD_VAR 0 7
46849: PPUSH
46850: LD_VAR 0 6
46854: PPUSH
46855: CALL_OW 1
46859: ST_TO_ADDR
// for i = s_arr downto 2 do
46860: LD_ADDR_VAR 0 5
46864: PUSH
46865: DOUBLE
46866: LD_VAR 0 7
46870: INC
46871: ST_TO_ADDR
46872: LD_INT 2
46874: PUSH
46875: FOR_DOWNTO
46876: IFFALSE 46960
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46878: LD_ADDR_VAR 0 6
46882: PUSH
46883: LD_VAR 0 7
46887: PUSH
46888: LD_VAR 0 5
46892: PUSH
46893: LD_INT 1
46895: MINUS
46896: ARRAY
46897: PPUSH
46898: LD_VAR 0 2
46902: PUSH
46903: LD_VAR 0 5
46907: PUSH
46908: LD_INT 1
46910: MINUS
46911: ARRAY
46912: PPUSH
46913: LD_VAR 0 7
46917: PUSH
46918: LD_VAR 0 5
46922: ARRAY
46923: PPUSH
46924: CALL_OW 1
46928: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46929: LD_ADDR_VAR 0 7
46933: PUSH
46934: LD_VAR 0 7
46938: PPUSH
46939: LD_VAR 0 5
46943: PUSH
46944: LD_INT 1
46946: MINUS
46947: PPUSH
46948: LD_VAR 0 6
46952: PPUSH
46953: CALL_OW 1
46957: ST_TO_ADDR
// end ;
46958: GO 46875
46960: POP
46961: POP
// result := s_arr [ 1 ] ;
46962: LD_ADDR_VAR 0 4
46966: PUSH
46967: LD_VAR 0 7
46971: PUSH
46972: LD_INT 1
46974: ARRAY
46975: ST_TO_ADDR
// end ; end ;
46976: LD_VAR 0 4
46980: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46981: LD_INT 0
46983: PPUSH
46984: PPUSH
// if not list then
46985: LD_VAR 0 1
46989: NOT
46990: IFFALSE 46994
// exit ;
46992: GO 47085
// i := list [ pos1 ] ;
46994: LD_ADDR_VAR 0 5
46998: PUSH
46999: LD_VAR 0 1
47003: PUSH
47004: LD_VAR 0 2
47008: ARRAY
47009: ST_TO_ADDR
// if not i then
47010: LD_VAR 0 5
47014: NOT
47015: IFFALSE 47019
// exit ;
47017: GO 47085
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47019: LD_ADDR_VAR 0 1
47023: PUSH
47024: LD_VAR 0 1
47028: PPUSH
47029: LD_VAR 0 2
47033: PPUSH
47034: LD_VAR 0 1
47038: PUSH
47039: LD_VAR 0 3
47043: ARRAY
47044: PPUSH
47045: CALL_OW 1
47049: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47050: LD_ADDR_VAR 0 1
47054: PUSH
47055: LD_VAR 0 1
47059: PPUSH
47060: LD_VAR 0 3
47064: PPUSH
47065: LD_VAR 0 5
47069: PPUSH
47070: CALL_OW 1
47074: ST_TO_ADDR
// result := list ;
47075: LD_ADDR_VAR 0 4
47079: PUSH
47080: LD_VAR 0 1
47084: ST_TO_ADDR
// end ;
47085: LD_VAR 0 4
47089: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47090: LD_INT 0
47092: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47093: LD_ADDR_VAR 0 5
47097: PUSH
47098: LD_VAR 0 1
47102: PPUSH
47103: CALL_OW 250
47107: PPUSH
47108: LD_VAR 0 1
47112: PPUSH
47113: CALL_OW 251
47117: PPUSH
47118: LD_VAR 0 2
47122: PPUSH
47123: LD_VAR 0 3
47127: PPUSH
47128: LD_VAR 0 4
47132: PPUSH
47133: CALL 47511 0 5
47137: ST_TO_ADDR
// end ;
47138: LD_VAR 0 5
47142: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
47143: LD_INT 0
47145: PPUSH
47146: PPUSH
47147: PPUSH
47148: PPUSH
// if not list or not unit then
47149: LD_VAR 0 2
47153: NOT
47154: PUSH
47155: LD_VAR 0 1
47159: NOT
47160: OR
47161: IFFALSE 47165
// exit ;
47163: GO 47506
// result := [ ] ;
47165: LD_ADDR_VAR 0 5
47169: PUSH
47170: EMPTY
47171: ST_TO_ADDR
// for i in list do
47172: LD_ADDR_VAR 0 6
47176: PUSH
47177: LD_VAR 0 2
47181: PUSH
47182: FOR_IN
47183: IFFALSE 47401
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47185: LD_ADDR_VAR 0 8
47189: PUSH
47190: LD_VAR 0 1
47194: PPUSH
47195: LD_VAR 0 6
47199: PUSH
47200: LD_INT 1
47202: ARRAY
47203: PPUSH
47204: LD_VAR 0 6
47208: PUSH
47209: LD_INT 2
47211: ARRAY
47212: PPUSH
47213: CALL_OW 297
47217: ST_TO_ADDR
// if not Count ( result ) then
47218: LD_VAR 0 5
47222: PPUSH
47223: CALL 43795 0 1
47227: NOT
47228: IFFALSE 47261
// begin result := Join ( result , [ i , tmp ] ) ;
47230: LD_ADDR_VAR 0 5
47234: PUSH
47235: LD_VAR 0 5
47239: PPUSH
47240: LD_VAR 0 6
47244: PUSH
47245: LD_VAR 0 8
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PPUSH
47254: CALL 79404 0 2
47258: ST_TO_ADDR
// continue ;
47259: GO 47182
// end ; if result [ result ] [ 2 ] <= tmp then
47261: LD_VAR 0 5
47265: PUSH
47266: LD_VAR 0 5
47270: ARRAY
47271: PUSH
47272: LD_INT 2
47274: ARRAY
47275: PUSH
47276: LD_VAR 0 8
47280: LESSEQUAL
47281: IFFALSE 47314
// result := Join ( result , [ i , tmp ] ) else
47283: LD_ADDR_VAR 0 5
47287: PUSH
47288: LD_VAR 0 5
47292: PPUSH
47293: LD_VAR 0 6
47297: PUSH
47298: LD_VAR 0 8
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PPUSH
47307: CALL 79404 0 2
47311: ST_TO_ADDR
47312: GO 47399
// begin for j := 1 to Count ( result ) do
47314: LD_ADDR_VAR 0 7
47318: PUSH
47319: DOUBLE
47320: LD_INT 1
47322: DEC
47323: ST_TO_ADDR
47324: LD_VAR 0 5
47328: PPUSH
47329: CALL 43795 0 1
47333: PUSH
47334: FOR_TO
47335: IFFALSE 47397
// begin if tmp < result [ j ] [ 2 ] then
47337: LD_VAR 0 8
47341: PUSH
47342: LD_VAR 0 5
47346: PUSH
47347: LD_VAR 0 7
47351: ARRAY
47352: PUSH
47353: LD_INT 2
47355: ARRAY
47356: LESS
47357: IFFALSE 47395
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47359: LD_ADDR_VAR 0 5
47363: PUSH
47364: LD_VAR 0 5
47368: PPUSH
47369: LD_VAR 0 7
47373: PPUSH
47374: LD_VAR 0 6
47378: PUSH
47379: LD_VAR 0 8
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PPUSH
47388: CALL_OW 2
47392: ST_TO_ADDR
// break ;
47393: GO 47397
// end ; end ;
47395: GO 47334
47397: POP
47398: POP
// end ; end ;
47399: GO 47182
47401: POP
47402: POP
// if result and not asc then
47403: LD_VAR 0 5
47407: PUSH
47408: LD_VAR 0 3
47412: NOT
47413: AND
47414: IFFALSE 47431
// result := ReverseArray ( result ) ;
47416: LD_ADDR_VAR 0 5
47420: PUSH
47421: LD_VAR 0 5
47425: PPUSH
47426: CALL 74671 0 1
47430: ST_TO_ADDR
// tmp := [ ] ;
47431: LD_ADDR_VAR 0 8
47435: PUSH
47436: EMPTY
47437: ST_TO_ADDR
// if mode then
47438: LD_VAR 0 4
47442: IFFALSE 47506
// begin for i := 1 to result do
47444: LD_ADDR_VAR 0 6
47448: PUSH
47449: DOUBLE
47450: LD_INT 1
47452: DEC
47453: ST_TO_ADDR
47454: LD_VAR 0 5
47458: PUSH
47459: FOR_TO
47460: IFFALSE 47494
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
47462: LD_ADDR_VAR 0 8
47466: PUSH
47467: LD_VAR 0 8
47471: PPUSH
47472: LD_VAR 0 5
47476: PUSH
47477: LD_VAR 0 6
47481: ARRAY
47482: PUSH
47483: LD_INT 1
47485: ARRAY
47486: PPUSH
47487: CALL 79404 0 2
47491: ST_TO_ADDR
47492: GO 47459
47494: POP
47495: POP
// result := tmp ;
47496: LD_ADDR_VAR 0 5
47500: PUSH
47501: LD_VAR 0 8
47505: ST_TO_ADDR
// end ; end ;
47506: LD_VAR 0 5
47510: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47511: LD_INT 0
47513: PPUSH
47514: PPUSH
47515: PPUSH
47516: PPUSH
// if not list then
47517: LD_VAR 0 3
47521: NOT
47522: IFFALSE 47526
// exit ;
47524: GO 47914
// result := [ ] ;
47526: LD_ADDR_VAR 0 6
47530: PUSH
47531: EMPTY
47532: ST_TO_ADDR
// for i in list do
47533: LD_ADDR_VAR 0 7
47537: PUSH
47538: LD_VAR 0 3
47542: PUSH
47543: FOR_IN
47544: IFFALSE 47746
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47546: LD_ADDR_VAR 0 9
47550: PUSH
47551: LD_VAR 0 7
47555: PPUSH
47556: LD_VAR 0 1
47560: PPUSH
47561: LD_VAR 0 2
47565: PPUSH
47566: CALL_OW 297
47570: ST_TO_ADDR
// if not result then
47571: LD_VAR 0 6
47575: NOT
47576: IFFALSE 47602
// result := [ [ i , tmp ] ] else
47578: LD_ADDR_VAR 0 6
47582: PUSH
47583: LD_VAR 0 7
47587: PUSH
47588: LD_VAR 0 9
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: EMPTY
47598: LIST
47599: ST_TO_ADDR
47600: GO 47744
// begin if result [ result ] [ 2 ] <= tmp then
47602: LD_VAR 0 6
47606: PUSH
47607: LD_VAR 0 6
47611: ARRAY
47612: PUSH
47613: LD_INT 2
47615: ARRAY
47616: PUSH
47617: LD_VAR 0 9
47621: LESSEQUAL
47622: IFFALSE 47664
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47624: LD_ADDR_VAR 0 6
47628: PUSH
47629: LD_VAR 0 6
47633: PPUSH
47634: LD_VAR 0 6
47638: PUSH
47639: LD_INT 1
47641: PLUS
47642: PPUSH
47643: LD_VAR 0 7
47647: PUSH
47648: LD_VAR 0 9
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PPUSH
47657: CALL_OW 2
47661: ST_TO_ADDR
47662: GO 47744
// for j := 1 to result do
47664: LD_ADDR_VAR 0 8
47668: PUSH
47669: DOUBLE
47670: LD_INT 1
47672: DEC
47673: ST_TO_ADDR
47674: LD_VAR 0 6
47678: PUSH
47679: FOR_TO
47680: IFFALSE 47742
// begin if tmp < result [ j ] [ 2 ] then
47682: LD_VAR 0 9
47686: PUSH
47687: LD_VAR 0 6
47691: PUSH
47692: LD_VAR 0 8
47696: ARRAY
47697: PUSH
47698: LD_INT 2
47700: ARRAY
47701: LESS
47702: IFFALSE 47740
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47704: LD_ADDR_VAR 0 6
47708: PUSH
47709: LD_VAR 0 6
47713: PPUSH
47714: LD_VAR 0 8
47718: PPUSH
47719: LD_VAR 0 7
47723: PUSH
47724: LD_VAR 0 9
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PPUSH
47733: CALL_OW 2
47737: ST_TO_ADDR
// break ;
47738: GO 47742
// end ; end ;
47740: GO 47679
47742: POP
47743: POP
// end ; end ;
47744: GO 47543
47746: POP
47747: POP
// if result and not asc then
47748: LD_VAR 0 6
47752: PUSH
47753: LD_VAR 0 4
47757: NOT
47758: AND
47759: IFFALSE 47834
// begin tmp := result ;
47761: LD_ADDR_VAR 0 9
47765: PUSH
47766: LD_VAR 0 6
47770: ST_TO_ADDR
// for i = tmp downto 1 do
47771: LD_ADDR_VAR 0 7
47775: PUSH
47776: DOUBLE
47777: LD_VAR 0 9
47781: INC
47782: ST_TO_ADDR
47783: LD_INT 1
47785: PUSH
47786: FOR_DOWNTO
47787: IFFALSE 47832
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47789: LD_ADDR_VAR 0 6
47793: PUSH
47794: LD_VAR 0 6
47798: PPUSH
47799: LD_VAR 0 9
47803: PUSH
47804: LD_VAR 0 7
47808: MINUS
47809: PUSH
47810: LD_INT 1
47812: PLUS
47813: PPUSH
47814: LD_VAR 0 9
47818: PUSH
47819: LD_VAR 0 7
47823: ARRAY
47824: PPUSH
47825: CALL_OW 1
47829: ST_TO_ADDR
47830: GO 47786
47832: POP
47833: POP
// end ; tmp := [ ] ;
47834: LD_ADDR_VAR 0 9
47838: PUSH
47839: EMPTY
47840: ST_TO_ADDR
// if mode then
47841: LD_VAR 0 5
47845: IFFALSE 47914
// begin for i = 1 to result do
47847: LD_ADDR_VAR 0 7
47851: PUSH
47852: DOUBLE
47853: LD_INT 1
47855: DEC
47856: ST_TO_ADDR
47857: LD_VAR 0 6
47861: PUSH
47862: FOR_TO
47863: IFFALSE 47902
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47865: LD_ADDR_VAR 0 9
47869: PUSH
47870: LD_VAR 0 9
47874: PPUSH
47875: LD_VAR 0 7
47879: PPUSH
47880: LD_VAR 0 6
47884: PUSH
47885: LD_VAR 0 7
47889: ARRAY
47890: PUSH
47891: LD_INT 1
47893: ARRAY
47894: PPUSH
47895: CALL_OW 1
47899: ST_TO_ADDR
47900: GO 47862
47902: POP
47903: POP
// result := tmp ;
47904: LD_ADDR_VAR 0 6
47908: PUSH
47909: LD_VAR 0 9
47913: ST_TO_ADDR
// end ; end ;
47914: LD_VAR 0 6
47918: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47919: LD_INT 0
47921: PPUSH
47922: PPUSH
47923: PPUSH
47924: PPUSH
47925: PPUSH
47926: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47927: LD_ADDR_VAR 0 5
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: EMPTY
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: ST_TO_ADDR
// if not x or not y then
47949: LD_VAR 0 2
47953: NOT
47954: PUSH
47955: LD_VAR 0 3
47959: NOT
47960: OR
47961: IFFALSE 47965
// exit ;
47963: GO 49615
// if not range then
47965: LD_VAR 0 4
47969: NOT
47970: IFFALSE 47980
// range := 10 ;
47972: LD_ADDR_VAR 0 4
47976: PUSH
47977: LD_INT 10
47979: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47980: LD_ADDR_VAR 0 8
47984: PUSH
47985: LD_INT 81
47987: PUSH
47988: LD_VAR 0 1
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 92
47999: PUSH
48000: LD_VAR 0 2
48004: PUSH
48005: LD_VAR 0 3
48009: PUSH
48010: LD_VAR 0 4
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 3
48023: PUSH
48024: LD_INT 21
48026: PUSH
48027: LD_INT 3
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: LIST
48042: PPUSH
48043: CALL_OW 69
48047: ST_TO_ADDR
// if not tmp then
48048: LD_VAR 0 8
48052: NOT
48053: IFFALSE 48057
// exit ;
48055: GO 49615
// for i in tmp do
48057: LD_ADDR_VAR 0 6
48061: PUSH
48062: LD_VAR 0 8
48066: PUSH
48067: FOR_IN
48068: IFFALSE 49590
// begin points := [ 0 , 0 , 0 ] ;
48070: LD_ADDR_VAR 0 9
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: LIST
48088: ST_TO_ADDR
// bpoints := 1 ;
48089: LD_ADDR_VAR 0 10
48093: PUSH
48094: LD_INT 1
48096: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48097: LD_VAR 0 6
48101: PPUSH
48102: CALL_OW 247
48106: PUSH
48107: LD_INT 1
48109: DOUBLE
48110: EQUAL
48111: IFTRUE 48115
48113: GO 48693
48115: POP
// begin if GetClass ( i ) = 1 then
48116: LD_VAR 0 6
48120: PPUSH
48121: CALL_OW 257
48125: PUSH
48126: LD_INT 1
48128: EQUAL
48129: IFFALSE 48150
// points := [ 10 , 5 , 3 ] ;
48131: LD_ADDR_VAR 0 9
48135: PUSH
48136: LD_INT 10
48138: PUSH
48139: LD_INT 5
48141: PUSH
48142: LD_INT 3
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: LIST
48149: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48150: LD_VAR 0 6
48154: PPUSH
48155: CALL_OW 257
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: LD_INT 3
48165: PUSH
48166: LD_INT 4
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: LIST
48173: IN
48174: IFFALSE 48195
// points := [ 3 , 2 , 1 ] ;
48176: LD_ADDR_VAR 0 9
48180: PUSH
48181: LD_INT 3
48183: PUSH
48184: LD_INT 2
48186: PUSH
48187: LD_INT 1
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: LIST
48194: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48195: LD_VAR 0 6
48199: PPUSH
48200: CALL_OW 257
48204: PUSH
48205: LD_INT 5
48207: EQUAL
48208: IFFALSE 48229
// points := [ 130 , 5 , 2 ] ;
48210: LD_ADDR_VAR 0 9
48214: PUSH
48215: LD_INT 130
48217: PUSH
48218: LD_INT 5
48220: PUSH
48221: LD_INT 2
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: LIST
48228: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48229: LD_VAR 0 6
48233: PPUSH
48234: CALL_OW 257
48238: PUSH
48239: LD_INT 8
48241: EQUAL
48242: IFFALSE 48263
// points := [ 35 , 35 , 30 ] ;
48244: LD_ADDR_VAR 0 9
48248: PUSH
48249: LD_INT 35
48251: PUSH
48252: LD_INT 35
48254: PUSH
48255: LD_INT 30
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: LIST
48262: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48263: LD_VAR 0 6
48267: PPUSH
48268: CALL_OW 257
48272: PUSH
48273: LD_INT 9
48275: EQUAL
48276: IFFALSE 48297
// points := [ 20 , 55 , 40 ] ;
48278: LD_ADDR_VAR 0 9
48282: PUSH
48283: LD_INT 20
48285: PUSH
48286: LD_INT 55
48288: PUSH
48289: LD_INT 40
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: LIST
48296: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48297: LD_VAR 0 6
48301: PPUSH
48302: CALL_OW 257
48306: PUSH
48307: LD_INT 12
48309: PUSH
48310: LD_INT 16
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: IN
48317: IFFALSE 48338
// points := [ 5 , 3 , 2 ] ;
48319: LD_ADDR_VAR 0 9
48323: PUSH
48324: LD_INT 5
48326: PUSH
48327: LD_INT 3
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: LIST
48337: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48338: LD_VAR 0 6
48342: PPUSH
48343: CALL_OW 257
48347: PUSH
48348: LD_INT 17
48350: EQUAL
48351: IFFALSE 48372
// points := [ 100 , 50 , 75 ] ;
48353: LD_ADDR_VAR 0 9
48357: PUSH
48358: LD_INT 100
48360: PUSH
48361: LD_INT 50
48363: PUSH
48364: LD_INT 75
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: LIST
48371: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48372: LD_VAR 0 6
48376: PPUSH
48377: CALL_OW 257
48381: PUSH
48382: LD_INT 15
48384: EQUAL
48385: IFFALSE 48406
// points := [ 10 , 5 , 3 ] ;
48387: LD_ADDR_VAR 0 9
48391: PUSH
48392: LD_INT 10
48394: PUSH
48395: LD_INT 5
48397: PUSH
48398: LD_INT 3
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: LIST
48405: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48406: LD_VAR 0 6
48410: PPUSH
48411: CALL_OW 257
48415: PUSH
48416: LD_INT 14
48418: EQUAL
48419: IFFALSE 48440
// points := [ 10 , 0 , 0 ] ;
48421: LD_ADDR_VAR 0 9
48425: PUSH
48426: LD_INT 10
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: LIST
48439: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48440: LD_VAR 0 6
48444: PPUSH
48445: CALL_OW 257
48449: PUSH
48450: LD_INT 11
48452: EQUAL
48453: IFFALSE 48474
// points := [ 30 , 10 , 5 ] ;
48455: LD_ADDR_VAR 0 9
48459: PUSH
48460: LD_INT 30
48462: PUSH
48463: LD_INT 10
48465: PUSH
48466: LD_INT 5
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: LIST
48473: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48474: LD_VAR 0 1
48478: PPUSH
48479: LD_INT 5
48481: PPUSH
48482: CALL_OW 321
48486: PUSH
48487: LD_INT 2
48489: EQUAL
48490: IFFALSE 48507
// bpoints := bpoints * 1.8 ;
48492: LD_ADDR_VAR 0 10
48496: PUSH
48497: LD_VAR 0 10
48501: PUSH
48502: LD_REAL  1.80000000000000E+0000
48505: MUL
48506: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48507: LD_VAR 0 6
48511: PPUSH
48512: CALL_OW 257
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: LD_INT 2
48522: PUSH
48523: LD_INT 3
48525: PUSH
48526: LD_INT 4
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: IN
48535: PUSH
48536: LD_VAR 0 1
48540: PPUSH
48541: LD_INT 51
48543: PPUSH
48544: CALL_OW 321
48548: PUSH
48549: LD_INT 2
48551: EQUAL
48552: AND
48553: IFFALSE 48570
// bpoints := bpoints * 1.2 ;
48555: LD_ADDR_VAR 0 10
48559: PUSH
48560: LD_VAR 0 10
48564: PUSH
48565: LD_REAL  1.20000000000000E+0000
48568: MUL
48569: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48570: LD_VAR 0 6
48574: PPUSH
48575: CALL_OW 257
48579: PUSH
48580: LD_INT 5
48582: PUSH
48583: LD_INT 7
48585: PUSH
48586: LD_INT 9
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: LIST
48593: IN
48594: PUSH
48595: LD_VAR 0 1
48599: PPUSH
48600: LD_INT 52
48602: PPUSH
48603: CALL_OW 321
48607: PUSH
48608: LD_INT 2
48610: EQUAL
48611: AND
48612: IFFALSE 48629
// bpoints := bpoints * 1.5 ;
48614: LD_ADDR_VAR 0 10
48618: PUSH
48619: LD_VAR 0 10
48623: PUSH
48624: LD_REAL  1.50000000000000E+0000
48627: MUL
48628: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48629: LD_VAR 0 1
48633: PPUSH
48634: LD_INT 66
48636: PPUSH
48637: CALL_OW 321
48641: PUSH
48642: LD_INT 2
48644: EQUAL
48645: IFFALSE 48662
// bpoints := bpoints * 1.1 ;
48647: LD_ADDR_VAR 0 10
48651: PUSH
48652: LD_VAR 0 10
48656: PUSH
48657: LD_REAL  1.10000000000000E+0000
48660: MUL
48661: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48662: LD_ADDR_VAR 0 10
48666: PUSH
48667: LD_VAR 0 10
48671: PUSH
48672: LD_VAR 0 6
48676: PPUSH
48677: LD_INT 1
48679: PPUSH
48680: CALL_OW 259
48684: PUSH
48685: LD_REAL  1.15000000000000E+0000
48688: MUL
48689: MUL
48690: ST_TO_ADDR
// end ; unit_vehicle :
48691: GO 49519
48693: LD_INT 2
48695: DOUBLE
48696: EQUAL
48697: IFTRUE 48701
48699: GO 49507
48701: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48702: LD_VAR 0 6
48706: PPUSH
48707: CALL_OW 264
48711: PUSH
48712: LD_INT 2
48714: PUSH
48715: LD_INT 42
48717: PUSH
48718: LD_INT 24
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: LIST
48725: IN
48726: IFFALSE 48747
// points := [ 25 , 5 , 3 ] ;
48728: LD_ADDR_VAR 0 9
48732: PUSH
48733: LD_INT 25
48735: PUSH
48736: LD_INT 5
48738: PUSH
48739: LD_INT 3
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: LIST
48746: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48747: LD_VAR 0 6
48751: PPUSH
48752: CALL_OW 264
48756: PUSH
48757: LD_INT 4
48759: PUSH
48760: LD_INT 43
48762: PUSH
48763: LD_INT 25
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: LIST
48770: IN
48771: IFFALSE 48792
// points := [ 40 , 15 , 5 ] ;
48773: LD_ADDR_VAR 0 9
48777: PUSH
48778: LD_INT 40
48780: PUSH
48781: LD_INT 15
48783: PUSH
48784: LD_INT 5
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: LIST
48791: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48792: LD_VAR 0 6
48796: PPUSH
48797: CALL_OW 264
48801: PUSH
48802: LD_INT 3
48804: PUSH
48805: LD_INT 23
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: IN
48812: IFFALSE 48833
// points := [ 7 , 25 , 8 ] ;
48814: LD_ADDR_VAR 0 9
48818: PUSH
48819: LD_INT 7
48821: PUSH
48822: LD_INT 25
48824: PUSH
48825: LD_INT 8
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: LIST
48832: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48833: LD_VAR 0 6
48837: PPUSH
48838: CALL_OW 264
48842: PUSH
48843: LD_INT 5
48845: PUSH
48846: LD_INT 27
48848: PUSH
48849: LD_INT 44
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: LIST
48856: IN
48857: IFFALSE 48878
// points := [ 14 , 50 , 16 ] ;
48859: LD_ADDR_VAR 0 9
48863: PUSH
48864: LD_INT 14
48866: PUSH
48867: LD_INT 50
48869: PUSH
48870: LD_INT 16
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: LIST
48877: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48878: LD_VAR 0 6
48882: PPUSH
48883: CALL_OW 264
48887: PUSH
48888: LD_INT 6
48890: PUSH
48891: LD_INT 46
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: IN
48898: IFFALSE 48919
// points := [ 32 , 120 , 70 ] ;
48900: LD_ADDR_VAR 0 9
48904: PUSH
48905: LD_INT 32
48907: PUSH
48908: LD_INT 120
48910: PUSH
48911: LD_INT 70
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: LIST
48918: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48919: LD_VAR 0 6
48923: PPUSH
48924: CALL_OW 264
48928: PUSH
48929: LD_INT 7
48931: PUSH
48932: LD_INT 28
48934: PUSH
48935: LD_INT 45
48937: PUSH
48938: LD_INT 92
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: IN
48947: IFFALSE 48968
// points := [ 35 , 20 , 45 ] ;
48949: LD_ADDR_VAR 0 9
48953: PUSH
48954: LD_INT 35
48956: PUSH
48957: LD_INT 20
48959: PUSH
48960: LD_INT 45
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: LIST
48967: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48968: LD_VAR 0 6
48972: PPUSH
48973: CALL_OW 264
48977: PUSH
48978: LD_INT 47
48980: PUSH
48981: EMPTY
48982: LIST
48983: IN
48984: IFFALSE 49005
// points := [ 67 , 45 , 75 ] ;
48986: LD_ADDR_VAR 0 9
48990: PUSH
48991: LD_INT 67
48993: PUSH
48994: LD_INT 45
48996: PUSH
48997: LD_INT 75
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: LIST
49004: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49005: LD_VAR 0 6
49009: PPUSH
49010: CALL_OW 264
49014: PUSH
49015: LD_INT 26
49017: PUSH
49018: EMPTY
49019: LIST
49020: IN
49021: IFFALSE 49042
// points := [ 120 , 30 , 80 ] ;
49023: LD_ADDR_VAR 0 9
49027: PUSH
49028: LD_INT 120
49030: PUSH
49031: LD_INT 30
49033: PUSH
49034: LD_INT 80
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: LIST
49041: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49042: LD_VAR 0 6
49046: PPUSH
49047: CALL_OW 264
49051: PUSH
49052: LD_INT 22
49054: PUSH
49055: EMPTY
49056: LIST
49057: IN
49058: IFFALSE 49079
// points := [ 40 , 1 , 1 ] ;
49060: LD_ADDR_VAR 0 9
49064: PUSH
49065: LD_INT 40
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: LIST
49078: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49079: LD_VAR 0 6
49083: PPUSH
49084: CALL_OW 264
49088: PUSH
49089: LD_INT 29
49091: PUSH
49092: EMPTY
49093: LIST
49094: IN
49095: IFFALSE 49116
// points := [ 70 , 200 , 400 ] ;
49097: LD_ADDR_VAR 0 9
49101: PUSH
49102: LD_INT 70
49104: PUSH
49105: LD_INT 200
49107: PUSH
49108: LD_INT 400
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: LIST
49115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49116: LD_VAR 0 6
49120: PPUSH
49121: CALL_OW 264
49125: PUSH
49126: LD_INT 14
49128: PUSH
49129: LD_INT 53
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: IN
49136: IFFALSE 49157
// points := [ 40 , 10 , 20 ] ;
49138: LD_ADDR_VAR 0 9
49142: PUSH
49143: LD_INT 40
49145: PUSH
49146: LD_INT 10
49148: PUSH
49149: LD_INT 20
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: LIST
49156: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49157: LD_VAR 0 6
49161: PPUSH
49162: CALL_OW 264
49166: PUSH
49167: LD_INT 9
49169: PUSH
49170: EMPTY
49171: LIST
49172: IN
49173: IFFALSE 49194
// points := [ 5 , 70 , 20 ] ;
49175: LD_ADDR_VAR 0 9
49179: PUSH
49180: LD_INT 5
49182: PUSH
49183: LD_INT 70
49185: PUSH
49186: LD_INT 20
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: LIST
49193: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49194: LD_VAR 0 6
49198: PPUSH
49199: CALL_OW 264
49203: PUSH
49204: LD_INT 10
49206: PUSH
49207: EMPTY
49208: LIST
49209: IN
49210: IFFALSE 49231
// points := [ 35 , 110 , 70 ] ;
49212: LD_ADDR_VAR 0 9
49216: PUSH
49217: LD_INT 35
49219: PUSH
49220: LD_INT 110
49222: PUSH
49223: LD_INT 70
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: LIST
49230: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49231: LD_VAR 0 6
49235: PPUSH
49236: CALL_OW 265
49240: PUSH
49241: LD_INT 25
49243: EQUAL
49244: IFFALSE 49265
// points := [ 80 , 65 , 100 ] ;
49246: LD_ADDR_VAR 0 9
49250: PUSH
49251: LD_INT 80
49253: PUSH
49254: LD_INT 65
49256: PUSH
49257: LD_INT 100
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: LIST
49264: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49265: LD_VAR 0 6
49269: PPUSH
49270: CALL_OW 263
49274: PUSH
49275: LD_INT 1
49277: EQUAL
49278: IFFALSE 49313
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49280: LD_ADDR_VAR 0 10
49284: PUSH
49285: LD_VAR 0 10
49289: PUSH
49290: LD_VAR 0 6
49294: PPUSH
49295: CALL_OW 311
49299: PPUSH
49300: LD_INT 3
49302: PPUSH
49303: CALL_OW 259
49307: PUSH
49308: LD_INT 4
49310: MUL
49311: MUL
49312: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49313: LD_VAR 0 6
49317: PPUSH
49318: CALL_OW 263
49322: PUSH
49323: LD_INT 2
49325: EQUAL
49326: IFFALSE 49377
// begin j := IsControledBy ( i ) ;
49328: LD_ADDR_VAR 0 7
49332: PUSH
49333: LD_VAR 0 6
49337: PPUSH
49338: CALL_OW 312
49342: ST_TO_ADDR
// if j then
49343: LD_VAR 0 7
49347: IFFALSE 49377
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49349: LD_ADDR_VAR 0 10
49353: PUSH
49354: LD_VAR 0 10
49358: PUSH
49359: LD_VAR 0 7
49363: PPUSH
49364: LD_INT 3
49366: PPUSH
49367: CALL_OW 259
49371: PUSH
49372: LD_INT 3
49374: MUL
49375: MUL
49376: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49377: LD_VAR 0 6
49381: PPUSH
49382: CALL_OW 264
49386: PUSH
49387: LD_INT 5
49389: PUSH
49390: LD_INT 6
49392: PUSH
49393: LD_INT 46
49395: PUSH
49396: LD_INT 44
49398: PUSH
49399: LD_INT 47
49401: PUSH
49402: LD_INT 45
49404: PUSH
49405: LD_INT 28
49407: PUSH
49408: LD_INT 7
49410: PUSH
49411: LD_INT 27
49413: PUSH
49414: LD_INT 29
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: IN
49429: PUSH
49430: LD_VAR 0 1
49434: PPUSH
49435: LD_INT 52
49437: PPUSH
49438: CALL_OW 321
49442: PUSH
49443: LD_INT 2
49445: EQUAL
49446: AND
49447: IFFALSE 49464
// bpoints := bpoints * 1.2 ;
49449: LD_ADDR_VAR 0 10
49453: PUSH
49454: LD_VAR 0 10
49458: PUSH
49459: LD_REAL  1.20000000000000E+0000
49462: MUL
49463: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49464: LD_VAR 0 6
49468: PPUSH
49469: CALL_OW 264
49473: PUSH
49474: LD_INT 6
49476: PUSH
49477: LD_INT 46
49479: PUSH
49480: LD_INT 47
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: LIST
49487: IN
49488: IFFALSE 49505
// bpoints := bpoints * 1.2 ;
49490: LD_ADDR_VAR 0 10
49494: PUSH
49495: LD_VAR 0 10
49499: PUSH
49500: LD_REAL  1.20000000000000E+0000
49503: MUL
49504: ST_TO_ADDR
// end ; unit_building :
49505: GO 49519
49507: LD_INT 3
49509: DOUBLE
49510: EQUAL
49511: IFTRUE 49515
49513: GO 49518
49515: POP
// ; end ;
49516: GO 49519
49518: POP
// for j = 1 to 3 do
49519: LD_ADDR_VAR 0 7
49523: PUSH
49524: DOUBLE
49525: LD_INT 1
49527: DEC
49528: ST_TO_ADDR
49529: LD_INT 3
49531: PUSH
49532: FOR_TO
49533: IFFALSE 49586
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49535: LD_ADDR_VAR 0 5
49539: PUSH
49540: LD_VAR 0 5
49544: PPUSH
49545: LD_VAR 0 7
49549: PPUSH
49550: LD_VAR 0 5
49554: PUSH
49555: LD_VAR 0 7
49559: ARRAY
49560: PUSH
49561: LD_VAR 0 9
49565: PUSH
49566: LD_VAR 0 7
49570: ARRAY
49571: PUSH
49572: LD_VAR 0 10
49576: MUL
49577: PLUS
49578: PPUSH
49579: CALL_OW 1
49583: ST_TO_ADDR
49584: GO 49532
49586: POP
49587: POP
// end ;
49588: GO 48067
49590: POP
49591: POP
// result := Replace ( result , 4 , tmp ) ;
49592: LD_ADDR_VAR 0 5
49596: PUSH
49597: LD_VAR 0 5
49601: PPUSH
49602: LD_INT 4
49604: PPUSH
49605: LD_VAR 0 8
49609: PPUSH
49610: CALL_OW 1
49614: ST_TO_ADDR
// end ;
49615: LD_VAR 0 5
49619: RET
// export function DangerAtRange ( unit , range ) ; begin
49620: LD_INT 0
49622: PPUSH
// if not unit then
49623: LD_VAR 0 1
49627: NOT
49628: IFFALSE 49632
// exit ;
49630: GO 49677
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49632: LD_ADDR_VAR 0 3
49636: PUSH
49637: LD_VAR 0 1
49641: PPUSH
49642: CALL_OW 255
49646: PPUSH
49647: LD_VAR 0 1
49651: PPUSH
49652: CALL_OW 250
49656: PPUSH
49657: LD_VAR 0 1
49661: PPUSH
49662: CALL_OW 251
49666: PPUSH
49667: LD_VAR 0 2
49671: PPUSH
49672: CALL 47919 0 4
49676: ST_TO_ADDR
// end ;
49677: LD_VAR 0 3
49681: RET
// export function DangerInArea ( side , area ) ; begin
49682: LD_INT 0
49684: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49685: LD_ADDR_VAR 0 3
49689: PUSH
49690: LD_VAR 0 2
49694: PPUSH
49695: LD_INT 81
49697: PUSH
49698: LD_VAR 0 1
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PPUSH
49707: CALL_OW 70
49711: ST_TO_ADDR
// end ;
49712: LD_VAR 0 3
49716: RET
// export function IsExtension ( b ) ; begin
49717: LD_INT 0
49719: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49720: LD_ADDR_VAR 0 2
49724: PUSH
49725: LD_VAR 0 1
49729: PUSH
49730: LD_INT 23
49732: PUSH
49733: LD_INT 20
49735: PUSH
49736: LD_INT 22
49738: PUSH
49739: LD_INT 17
49741: PUSH
49742: LD_INT 24
49744: PUSH
49745: LD_INT 21
49747: PUSH
49748: LD_INT 19
49750: PUSH
49751: LD_INT 16
49753: PUSH
49754: LD_INT 25
49756: PUSH
49757: LD_INT 18
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: IN
49772: ST_TO_ADDR
// end ;
49773: LD_VAR 0 2
49777: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49778: LD_INT 0
49780: PPUSH
49781: PPUSH
49782: PPUSH
// result := [ ] ;
49783: LD_ADDR_VAR 0 4
49787: PUSH
49788: EMPTY
49789: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49790: LD_ADDR_VAR 0 5
49794: PUSH
49795: LD_VAR 0 2
49799: PPUSH
49800: LD_INT 21
49802: PUSH
49803: LD_INT 3
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PPUSH
49810: CALL_OW 70
49814: ST_TO_ADDR
// if not tmp then
49815: LD_VAR 0 5
49819: NOT
49820: IFFALSE 49824
// exit ;
49822: GO 49888
// if checkLink then
49824: LD_VAR 0 3
49828: IFFALSE 49878
// begin for i in tmp do
49830: LD_ADDR_VAR 0 6
49834: PUSH
49835: LD_VAR 0 5
49839: PUSH
49840: FOR_IN
49841: IFFALSE 49876
// if GetBase ( i ) <> base then
49843: LD_VAR 0 6
49847: PPUSH
49848: CALL_OW 274
49852: PUSH
49853: LD_VAR 0 1
49857: NONEQUAL
49858: IFFALSE 49874
// ComLinkToBase ( base , i ) ;
49860: LD_VAR 0 1
49864: PPUSH
49865: LD_VAR 0 6
49869: PPUSH
49870: CALL_OW 169
49874: GO 49840
49876: POP
49877: POP
// end ; result := tmp ;
49878: LD_ADDR_VAR 0 4
49882: PUSH
49883: LD_VAR 0 5
49887: ST_TO_ADDR
// end ;
49888: LD_VAR 0 4
49892: RET
// export function ComComplete ( units , b ) ; var i ; begin
49893: LD_INT 0
49895: PPUSH
49896: PPUSH
// if not units then
49897: LD_VAR 0 1
49901: NOT
49902: IFFALSE 49906
// exit ;
49904: GO 49996
// for i in units do
49906: LD_ADDR_VAR 0 4
49910: PUSH
49911: LD_VAR 0 1
49915: PUSH
49916: FOR_IN
49917: IFFALSE 49994
// if BuildingStatus ( b ) = bs_build then
49919: LD_VAR 0 2
49923: PPUSH
49924: CALL_OW 461
49928: PUSH
49929: LD_INT 1
49931: EQUAL
49932: IFFALSE 49992
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49934: LD_VAR 0 4
49938: PPUSH
49939: LD_STRING h
49941: PUSH
49942: LD_VAR 0 2
49946: PPUSH
49947: CALL_OW 250
49951: PUSH
49952: LD_VAR 0 2
49956: PPUSH
49957: CALL_OW 251
49961: PUSH
49962: LD_VAR 0 2
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: PUSH
49985: EMPTY
49986: LIST
49987: PPUSH
49988: CALL_OW 446
49992: GO 49916
49994: POP
49995: POP
// end ;
49996: LD_VAR 0 3
50000: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50001: LD_INT 0
50003: PPUSH
50004: PPUSH
50005: PPUSH
50006: PPUSH
50007: PPUSH
50008: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50009: LD_VAR 0 1
50013: NOT
50014: PUSH
50015: LD_VAR 0 1
50019: PPUSH
50020: CALL_OW 263
50024: PUSH
50025: LD_INT 2
50027: NONEQUAL
50028: OR
50029: IFFALSE 50033
// exit ;
50031: GO 50349
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50033: LD_ADDR_VAR 0 6
50037: PUSH
50038: LD_INT 22
50040: PUSH
50041: LD_VAR 0 1
50045: PPUSH
50046: CALL_OW 255
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 2
50057: PUSH
50058: LD_INT 30
50060: PUSH
50061: LD_INT 36
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 34
50070: PUSH
50071: LD_INT 31
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: LIST
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PPUSH
50087: CALL_OW 69
50091: ST_TO_ADDR
// if not tmp then
50092: LD_VAR 0 6
50096: NOT
50097: IFFALSE 50101
// exit ;
50099: GO 50349
// result := [ ] ;
50101: LD_ADDR_VAR 0 2
50105: PUSH
50106: EMPTY
50107: ST_TO_ADDR
// for i in tmp do
50108: LD_ADDR_VAR 0 3
50112: PUSH
50113: LD_VAR 0 6
50117: PUSH
50118: FOR_IN
50119: IFFALSE 50190
// begin t := UnitsInside ( i ) ;
50121: LD_ADDR_VAR 0 4
50125: PUSH
50126: LD_VAR 0 3
50130: PPUSH
50131: CALL_OW 313
50135: ST_TO_ADDR
// if t then
50136: LD_VAR 0 4
50140: IFFALSE 50188
// for j in t do
50142: LD_ADDR_VAR 0 7
50146: PUSH
50147: LD_VAR 0 4
50151: PUSH
50152: FOR_IN
50153: IFFALSE 50186
// result := Replace ( result , result + 1 , j ) ;
50155: LD_ADDR_VAR 0 2
50159: PUSH
50160: LD_VAR 0 2
50164: PPUSH
50165: LD_VAR 0 2
50169: PUSH
50170: LD_INT 1
50172: PLUS
50173: PPUSH
50174: LD_VAR 0 7
50178: PPUSH
50179: CALL_OW 1
50183: ST_TO_ADDR
50184: GO 50152
50186: POP
50187: POP
// end ;
50188: GO 50118
50190: POP
50191: POP
// if not result then
50192: LD_VAR 0 2
50196: NOT
50197: IFFALSE 50201
// exit ;
50199: GO 50349
// mech := result [ 1 ] ;
50201: LD_ADDR_VAR 0 5
50205: PUSH
50206: LD_VAR 0 2
50210: PUSH
50211: LD_INT 1
50213: ARRAY
50214: ST_TO_ADDR
// if result > 1 then
50215: LD_VAR 0 2
50219: PUSH
50220: LD_INT 1
50222: GREATER
50223: IFFALSE 50335
// begin for i = 2 to result do
50225: LD_ADDR_VAR 0 3
50229: PUSH
50230: DOUBLE
50231: LD_INT 2
50233: DEC
50234: ST_TO_ADDR
50235: LD_VAR 0 2
50239: PUSH
50240: FOR_TO
50241: IFFALSE 50333
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50243: LD_ADDR_VAR 0 4
50247: PUSH
50248: LD_VAR 0 2
50252: PUSH
50253: LD_VAR 0 3
50257: ARRAY
50258: PPUSH
50259: LD_INT 3
50261: PPUSH
50262: CALL_OW 259
50266: PUSH
50267: LD_VAR 0 2
50271: PUSH
50272: LD_VAR 0 3
50276: ARRAY
50277: PPUSH
50278: CALL_OW 432
50282: MINUS
50283: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50284: LD_VAR 0 4
50288: PUSH
50289: LD_VAR 0 5
50293: PPUSH
50294: LD_INT 3
50296: PPUSH
50297: CALL_OW 259
50301: PUSH
50302: LD_VAR 0 5
50306: PPUSH
50307: CALL_OW 432
50311: MINUS
50312: GREATEREQUAL
50313: IFFALSE 50331
// mech := result [ i ] ;
50315: LD_ADDR_VAR 0 5
50319: PUSH
50320: LD_VAR 0 2
50324: PUSH
50325: LD_VAR 0 3
50329: ARRAY
50330: ST_TO_ADDR
// end ;
50331: GO 50240
50333: POP
50334: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50335: LD_VAR 0 1
50339: PPUSH
50340: LD_VAR 0 5
50344: PPUSH
50345: CALL_OW 135
// end ;
50349: LD_VAR 0 2
50353: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50354: LD_INT 0
50356: PPUSH
50357: PPUSH
50358: PPUSH
50359: PPUSH
50360: PPUSH
50361: PPUSH
50362: PPUSH
50363: PPUSH
50364: PPUSH
50365: PPUSH
50366: PPUSH
50367: PPUSH
50368: PPUSH
// result := [ ] ;
50369: LD_ADDR_VAR 0 7
50373: PUSH
50374: EMPTY
50375: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50376: LD_VAR 0 1
50380: PPUSH
50381: CALL_OW 266
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: IN
50396: NOT
50397: IFFALSE 50401
// exit ;
50399: GO 52035
// if name then
50401: LD_VAR 0 3
50405: IFFALSE 50421
// SetBName ( base_dep , name ) ;
50407: LD_VAR 0 1
50411: PPUSH
50412: LD_VAR 0 3
50416: PPUSH
50417: CALL_OW 500
// base := GetBase ( base_dep ) ;
50421: LD_ADDR_VAR 0 15
50425: PUSH
50426: LD_VAR 0 1
50430: PPUSH
50431: CALL_OW 274
50435: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50436: LD_ADDR_VAR 0 16
50440: PUSH
50441: LD_VAR 0 1
50445: PPUSH
50446: CALL_OW 255
50450: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50451: LD_ADDR_VAR 0 17
50455: PUSH
50456: LD_VAR 0 1
50460: PPUSH
50461: CALL_OW 248
50465: ST_TO_ADDR
// if sources then
50466: LD_VAR 0 5
50470: IFFALSE 50517
// for i = 1 to 3 do
50472: LD_ADDR_VAR 0 8
50476: PUSH
50477: DOUBLE
50478: LD_INT 1
50480: DEC
50481: ST_TO_ADDR
50482: LD_INT 3
50484: PUSH
50485: FOR_TO
50486: IFFALSE 50515
// AddResourceType ( base , i , sources [ i ] ) ;
50488: LD_VAR 0 15
50492: PPUSH
50493: LD_VAR 0 8
50497: PPUSH
50498: LD_VAR 0 5
50502: PUSH
50503: LD_VAR 0 8
50507: ARRAY
50508: PPUSH
50509: CALL_OW 276
50513: GO 50485
50515: POP
50516: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50517: LD_ADDR_VAR 0 18
50521: PUSH
50522: LD_VAR 0 15
50526: PPUSH
50527: LD_VAR 0 2
50531: PPUSH
50532: LD_INT 1
50534: PPUSH
50535: CALL 49778 0 3
50539: ST_TO_ADDR
// InitHc ;
50540: CALL_OW 19
// InitUc ;
50544: CALL_OW 18
// uc_side := side ;
50548: LD_ADDR_OWVAR 20
50552: PUSH
50553: LD_VAR 0 16
50557: ST_TO_ADDR
// uc_nation := nation ;
50558: LD_ADDR_OWVAR 21
50562: PUSH
50563: LD_VAR 0 17
50567: ST_TO_ADDR
// if buildings then
50568: LD_VAR 0 18
50572: IFFALSE 51894
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50574: LD_ADDR_VAR 0 19
50578: PUSH
50579: LD_VAR 0 18
50583: PPUSH
50584: LD_INT 2
50586: PUSH
50587: LD_INT 30
50589: PUSH
50590: LD_INT 29
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 30
50599: PUSH
50600: LD_INT 30
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: LIST
50611: PPUSH
50612: CALL_OW 72
50616: ST_TO_ADDR
// if tmp then
50617: LD_VAR 0 19
50621: IFFALSE 50669
// for i in tmp do
50623: LD_ADDR_VAR 0 8
50627: PUSH
50628: LD_VAR 0 19
50632: PUSH
50633: FOR_IN
50634: IFFALSE 50667
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50636: LD_VAR 0 8
50640: PPUSH
50641: CALL_OW 250
50645: PPUSH
50646: LD_VAR 0 8
50650: PPUSH
50651: CALL_OW 251
50655: PPUSH
50656: LD_VAR 0 16
50660: PPUSH
50661: CALL_OW 441
50665: GO 50633
50667: POP
50668: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50669: LD_VAR 0 18
50673: PPUSH
50674: LD_INT 2
50676: PUSH
50677: LD_INT 30
50679: PUSH
50680: LD_INT 32
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 30
50689: PUSH
50690: LD_INT 33
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: LIST
50701: PPUSH
50702: CALL_OW 72
50706: IFFALSE 50794
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50708: LD_ADDR_VAR 0 8
50712: PUSH
50713: LD_VAR 0 18
50717: PPUSH
50718: LD_INT 2
50720: PUSH
50721: LD_INT 30
50723: PUSH
50724: LD_INT 32
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 30
50733: PUSH
50734: LD_INT 33
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: LIST
50745: PPUSH
50746: CALL_OW 72
50750: PUSH
50751: FOR_IN
50752: IFFALSE 50792
// begin if not GetBWeapon ( i ) then
50754: LD_VAR 0 8
50758: PPUSH
50759: CALL_OW 269
50763: NOT
50764: IFFALSE 50790
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50766: LD_VAR 0 8
50770: PPUSH
50771: LD_VAR 0 8
50775: PPUSH
50776: LD_VAR 0 2
50780: PPUSH
50781: CALL 52040 0 2
50785: PPUSH
50786: CALL_OW 431
// end ;
50790: GO 50751
50792: POP
50793: POP
// end ; for i = 1 to personel do
50794: LD_ADDR_VAR 0 8
50798: PUSH
50799: DOUBLE
50800: LD_INT 1
50802: DEC
50803: ST_TO_ADDR
50804: LD_VAR 0 6
50808: PUSH
50809: FOR_TO
50810: IFFALSE 51874
// begin if i > 4 then
50812: LD_VAR 0 8
50816: PUSH
50817: LD_INT 4
50819: GREATER
50820: IFFALSE 50824
// break ;
50822: GO 51874
// case i of 1 :
50824: LD_VAR 0 8
50828: PUSH
50829: LD_INT 1
50831: DOUBLE
50832: EQUAL
50833: IFTRUE 50837
50835: GO 50917
50837: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50838: LD_ADDR_VAR 0 12
50842: PUSH
50843: LD_VAR 0 18
50847: PPUSH
50848: LD_INT 22
50850: PUSH
50851: LD_VAR 0 16
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 58
50862: PUSH
50863: EMPTY
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: PUSH
50869: LD_INT 30
50871: PUSH
50872: LD_INT 32
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 30
50881: PUSH
50882: LD_INT 4
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 30
50891: PUSH
50892: LD_INT 5
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: LIST
50909: PPUSH
50910: CALL_OW 72
50914: ST_TO_ADDR
50915: GO 51139
50917: LD_INT 2
50919: DOUBLE
50920: EQUAL
50921: IFTRUE 50925
50923: GO 50987
50925: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50926: LD_ADDR_VAR 0 12
50930: PUSH
50931: LD_VAR 0 18
50935: PPUSH
50936: LD_INT 22
50938: PUSH
50939: LD_VAR 0 16
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 2
50950: PUSH
50951: LD_INT 30
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 30
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: LIST
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PPUSH
50980: CALL_OW 72
50984: ST_TO_ADDR
50985: GO 51139
50987: LD_INT 3
50989: DOUBLE
50990: EQUAL
50991: IFTRUE 50995
50993: GO 51057
50995: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50996: LD_ADDR_VAR 0 12
51000: PUSH
51001: LD_VAR 0 18
51005: PPUSH
51006: LD_INT 22
51008: PUSH
51009: LD_VAR 0 16
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 2
51020: PUSH
51021: LD_INT 30
51023: PUSH
51024: LD_INT 2
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 30
51033: PUSH
51034: LD_INT 3
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: LIST
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PPUSH
51050: CALL_OW 72
51054: ST_TO_ADDR
51055: GO 51139
51057: LD_INT 4
51059: DOUBLE
51060: EQUAL
51061: IFTRUE 51065
51063: GO 51138
51065: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51066: LD_ADDR_VAR 0 12
51070: PUSH
51071: LD_VAR 0 18
51075: PPUSH
51076: LD_INT 22
51078: PUSH
51079: LD_VAR 0 16
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 2
51090: PUSH
51091: LD_INT 30
51093: PUSH
51094: LD_INT 6
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 30
51103: PUSH
51104: LD_INT 7
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 30
51113: PUSH
51114: LD_INT 8
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PPUSH
51131: CALL_OW 72
51135: ST_TO_ADDR
51136: GO 51139
51138: POP
// if i = 1 then
51139: LD_VAR 0 8
51143: PUSH
51144: LD_INT 1
51146: EQUAL
51147: IFFALSE 51258
// begin tmp := [ ] ;
51149: LD_ADDR_VAR 0 19
51153: PUSH
51154: EMPTY
51155: ST_TO_ADDR
// for j in f do
51156: LD_ADDR_VAR 0 9
51160: PUSH
51161: LD_VAR 0 12
51165: PUSH
51166: FOR_IN
51167: IFFALSE 51240
// if GetBType ( j ) = b_bunker then
51169: LD_VAR 0 9
51173: PPUSH
51174: CALL_OW 266
51178: PUSH
51179: LD_INT 32
51181: EQUAL
51182: IFFALSE 51209
// tmp := Insert ( tmp , 1 , j ) else
51184: LD_ADDR_VAR 0 19
51188: PUSH
51189: LD_VAR 0 19
51193: PPUSH
51194: LD_INT 1
51196: PPUSH
51197: LD_VAR 0 9
51201: PPUSH
51202: CALL_OW 2
51206: ST_TO_ADDR
51207: GO 51238
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51209: LD_ADDR_VAR 0 19
51213: PUSH
51214: LD_VAR 0 19
51218: PPUSH
51219: LD_VAR 0 19
51223: PUSH
51224: LD_INT 1
51226: PLUS
51227: PPUSH
51228: LD_VAR 0 9
51232: PPUSH
51233: CALL_OW 2
51237: ST_TO_ADDR
51238: GO 51166
51240: POP
51241: POP
// if tmp then
51242: LD_VAR 0 19
51246: IFFALSE 51258
// f := tmp ;
51248: LD_ADDR_VAR 0 12
51252: PUSH
51253: LD_VAR 0 19
51257: ST_TO_ADDR
// end ; x := personel [ i ] ;
51258: LD_ADDR_VAR 0 13
51262: PUSH
51263: LD_VAR 0 6
51267: PUSH
51268: LD_VAR 0 8
51272: ARRAY
51273: ST_TO_ADDR
// if x = - 1 then
51274: LD_VAR 0 13
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: EQUAL
51283: IFFALSE 51492
// begin for j in f do
51285: LD_ADDR_VAR 0 9
51289: PUSH
51290: LD_VAR 0 12
51294: PUSH
51295: FOR_IN
51296: IFFALSE 51488
// repeat InitHc ;
51298: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51302: LD_VAR 0 9
51306: PPUSH
51307: CALL_OW 266
51311: PUSH
51312: LD_INT 5
51314: EQUAL
51315: IFFALSE 51385
// begin if UnitsInside ( j ) < 3 then
51317: LD_VAR 0 9
51321: PPUSH
51322: CALL_OW 313
51326: PUSH
51327: LD_INT 3
51329: LESS
51330: IFFALSE 51366
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51332: LD_INT 0
51334: PPUSH
51335: LD_INT 5
51337: PUSH
51338: LD_INT 8
51340: PUSH
51341: LD_INT 9
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: LIST
51348: PUSH
51349: LD_VAR 0 17
51353: ARRAY
51354: PPUSH
51355: LD_VAR 0 4
51359: PPUSH
51360: CALL_OW 380
51364: GO 51383
// PrepareHuman ( false , i , skill ) ;
51366: LD_INT 0
51368: PPUSH
51369: LD_VAR 0 8
51373: PPUSH
51374: LD_VAR 0 4
51378: PPUSH
51379: CALL_OW 380
// end else
51383: GO 51402
// PrepareHuman ( false , i , skill ) ;
51385: LD_INT 0
51387: PPUSH
51388: LD_VAR 0 8
51392: PPUSH
51393: LD_VAR 0 4
51397: PPUSH
51398: CALL_OW 380
// un := CreateHuman ;
51402: LD_ADDR_VAR 0 14
51406: PUSH
51407: CALL_OW 44
51411: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51412: LD_ADDR_VAR 0 7
51416: PUSH
51417: LD_VAR 0 7
51421: PPUSH
51422: LD_INT 1
51424: PPUSH
51425: LD_VAR 0 14
51429: PPUSH
51430: CALL_OW 2
51434: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51435: LD_VAR 0 14
51439: PPUSH
51440: LD_VAR 0 9
51444: PPUSH
51445: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51449: LD_VAR 0 9
51453: PPUSH
51454: CALL_OW 313
51458: PUSH
51459: LD_INT 6
51461: EQUAL
51462: PUSH
51463: LD_VAR 0 9
51467: PPUSH
51468: CALL_OW 266
51472: PUSH
51473: LD_INT 32
51475: PUSH
51476: LD_INT 31
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: IN
51483: OR
51484: IFFALSE 51298
51486: GO 51295
51488: POP
51489: POP
// end else
51490: GO 51872
// for j = 1 to x do
51492: LD_ADDR_VAR 0 9
51496: PUSH
51497: DOUBLE
51498: LD_INT 1
51500: DEC
51501: ST_TO_ADDR
51502: LD_VAR 0 13
51506: PUSH
51507: FOR_TO
51508: IFFALSE 51870
// begin InitHc ;
51510: CALL_OW 19
// if not f then
51514: LD_VAR 0 12
51518: NOT
51519: IFFALSE 51608
// begin PrepareHuman ( false , i , skill ) ;
51521: LD_INT 0
51523: PPUSH
51524: LD_VAR 0 8
51528: PPUSH
51529: LD_VAR 0 4
51533: PPUSH
51534: CALL_OW 380
// un := CreateHuman ;
51538: LD_ADDR_VAR 0 14
51542: PUSH
51543: CALL_OW 44
51547: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51548: LD_ADDR_VAR 0 7
51552: PUSH
51553: LD_VAR 0 7
51557: PPUSH
51558: LD_INT 1
51560: PPUSH
51561: LD_VAR 0 14
51565: PPUSH
51566: CALL_OW 2
51570: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51571: LD_VAR 0 14
51575: PPUSH
51576: LD_VAR 0 1
51580: PPUSH
51581: CALL_OW 250
51585: PPUSH
51586: LD_VAR 0 1
51590: PPUSH
51591: CALL_OW 251
51595: PPUSH
51596: LD_INT 10
51598: PPUSH
51599: LD_INT 0
51601: PPUSH
51602: CALL_OW 50
// continue ;
51606: GO 51507
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51608: LD_VAR 0 12
51612: PUSH
51613: LD_INT 1
51615: ARRAY
51616: PPUSH
51617: CALL_OW 313
51621: PUSH
51622: LD_VAR 0 12
51626: PUSH
51627: LD_INT 1
51629: ARRAY
51630: PPUSH
51631: CALL_OW 266
51635: PUSH
51636: LD_INT 32
51638: PUSH
51639: LD_INT 31
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: IN
51646: AND
51647: PUSH
51648: LD_VAR 0 12
51652: PUSH
51653: LD_INT 1
51655: ARRAY
51656: PPUSH
51657: CALL_OW 313
51661: PUSH
51662: LD_INT 6
51664: EQUAL
51665: OR
51666: IFFALSE 51686
// f := Delete ( f , 1 ) ;
51668: LD_ADDR_VAR 0 12
51672: PUSH
51673: LD_VAR 0 12
51677: PPUSH
51678: LD_INT 1
51680: PPUSH
51681: CALL_OW 3
51685: ST_TO_ADDR
// if not f then
51686: LD_VAR 0 12
51690: NOT
51691: IFFALSE 51709
// begin x := x + 2 ;
51693: LD_ADDR_VAR 0 13
51697: PUSH
51698: LD_VAR 0 13
51702: PUSH
51703: LD_INT 2
51705: PLUS
51706: ST_TO_ADDR
// continue ;
51707: GO 51507
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51709: LD_VAR 0 12
51713: PUSH
51714: LD_INT 1
51716: ARRAY
51717: PPUSH
51718: CALL_OW 266
51722: PUSH
51723: LD_INT 5
51725: EQUAL
51726: IFFALSE 51800
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51728: LD_VAR 0 12
51732: PUSH
51733: LD_INT 1
51735: ARRAY
51736: PPUSH
51737: CALL_OW 313
51741: PUSH
51742: LD_INT 3
51744: LESS
51745: IFFALSE 51781
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51747: LD_INT 0
51749: PPUSH
51750: LD_INT 5
51752: PUSH
51753: LD_INT 8
51755: PUSH
51756: LD_INT 9
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: LIST
51763: PUSH
51764: LD_VAR 0 17
51768: ARRAY
51769: PPUSH
51770: LD_VAR 0 4
51774: PPUSH
51775: CALL_OW 380
51779: GO 51798
// PrepareHuman ( false , i , skill ) ;
51781: LD_INT 0
51783: PPUSH
51784: LD_VAR 0 8
51788: PPUSH
51789: LD_VAR 0 4
51793: PPUSH
51794: CALL_OW 380
// end else
51798: GO 51817
// PrepareHuman ( false , i , skill ) ;
51800: LD_INT 0
51802: PPUSH
51803: LD_VAR 0 8
51807: PPUSH
51808: LD_VAR 0 4
51812: PPUSH
51813: CALL_OW 380
// un := CreateHuman ;
51817: LD_ADDR_VAR 0 14
51821: PUSH
51822: CALL_OW 44
51826: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51827: LD_ADDR_VAR 0 7
51831: PUSH
51832: LD_VAR 0 7
51836: PPUSH
51837: LD_INT 1
51839: PPUSH
51840: LD_VAR 0 14
51844: PPUSH
51845: CALL_OW 2
51849: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51850: LD_VAR 0 14
51854: PPUSH
51855: LD_VAR 0 12
51859: PUSH
51860: LD_INT 1
51862: ARRAY
51863: PPUSH
51864: CALL_OW 52
// end ;
51868: GO 51507
51870: POP
51871: POP
// end ;
51872: GO 50809
51874: POP
51875: POP
// result := result ^ buildings ;
51876: LD_ADDR_VAR 0 7
51880: PUSH
51881: LD_VAR 0 7
51885: PUSH
51886: LD_VAR 0 18
51890: ADD
51891: ST_TO_ADDR
// end else
51892: GO 52035
// begin for i = 1 to personel do
51894: LD_ADDR_VAR 0 8
51898: PUSH
51899: DOUBLE
51900: LD_INT 1
51902: DEC
51903: ST_TO_ADDR
51904: LD_VAR 0 6
51908: PUSH
51909: FOR_TO
51910: IFFALSE 52033
// begin if i > 4 then
51912: LD_VAR 0 8
51916: PUSH
51917: LD_INT 4
51919: GREATER
51920: IFFALSE 51924
// break ;
51922: GO 52033
// x := personel [ i ] ;
51924: LD_ADDR_VAR 0 13
51928: PUSH
51929: LD_VAR 0 6
51933: PUSH
51934: LD_VAR 0 8
51938: ARRAY
51939: ST_TO_ADDR
// if x = - 1 then
51940: LD_VAR 0 13
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: EQUAL
51949: IFFALSE 51953
// continue ;
51951: GO 51909
// PrepareHuman ( false , i , skill ) ;
51953: LD_INT 0
51955: PPUSH
51956: LD_VAR 0 8
51960: PPUSH
51961: LD_VAR 0 4
51965: PPUSH
51966: CALL_OW 380
// un := CreateHuman ;
51970: LD_ADDR_VAR 0 14
51974: PUSH
51975: CALL_OW 44
51979: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51980: LD_VAR 0 14
51984: PPUSH
51985: LD_VAR 0 1
51989: PPUSH
51990: CALL_OW 250
51994: PPUSH
51995: LD_VAR 0 1
51999: PPUSH
52000: CALL_OW 251
52004: PPUSH
52005: LD_INT 10
52007: PPUSH
52008: LD_INT 0
52010: PPUSH
52011: CALL_OW 50
// result := result ^ un ;
52015: LD_ADDR_VAR 0 7
52019: PUSH
52020: LD_VAR 0 7
52024: PUSH
52025: LD_VAR 0 14
52029: ADD
52030: ST_TO_ADDR
// end ;
52031: GO 51909
52033: POP
52034: POP
// end ; end ;
52035: LD_VAR 0 7
52039: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52040: LD_INT 0
52042: PPUSH
52043: PPUSH
52044: PPUSH
52045: PPUSH
52046: PPUSH
52047: PPUSH
52048: PPUSH
52049: PPUSH
52050: PPUSH
52051: PPUSH
52052: PPUSH
52053: PPUSH
52054: PPUSH
52055: PPUSH
52056: PPUSH
52057: PPUSH
// result := false ;
52058: LD_ADDR_VAR 0 3
52062: PUSH
52063: LD_INT 0
52065: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52066: LD_VAR 0 1
52070: NOT
52071: PUSH
52072: LD_VAR 0 1
52076: PPUSH
52077: CALL_OW 266
52081: PUSH
52082: LD_INT 32
52084: PUSH
52085: LD_INT 33
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: IN
52092: NOT
52093: OR
52094: IFFALSE 52098
// exit ;
52096: GO 53207
// nat := GetNation ( tower ) ;
52098: LD_ADDR_VAR 0 12
52102: PUSH
52103: LD_VAR 0 1
52107: PPUSH
52108: CALL_OW 248
52112: ST_TO_ADDR
// side := GetSide ( tower ) ;
52113: LD_ADDR_VAR 0 16
52117: PUSH
52118: LD_VAR 0 1
52122: PPUSH
52123: CALL_OW 255
52127: ST_TO_ADDR
// x := GetX ( tower ) ;
52128: LD_ADDR_VAR 0 10
52132: PUSH
52133: LD_VAR 0 1
52137: PPUSH
52138: CALL_OW 250
52142: ST_TO_ADDR
// y := GetY ( tower ) ;
52143: LD_ADDR_VAR 0 11
52147: PUSH
52148: LD_VAR 0 1
52152: PPUSH
52153: CALL_OW 251
52157: ST_TO_ADDR
// if not x or not y then
52158: LD_VAR 0 10
52162: NOT
52163: PUSH
52164: LD_VAR 0 11
52168: NOT
52169: OR
52170: IFFALSE 52174
// exit ;
52172: GO 53207
// weapon := 0 ;
52174: LD_ADDR_VAR 0 18
52178: PUSH
52179: LD_INT 0
52181: ST_TO_ADDR
// fac_list := [ ] ;
52182: LD_ADDR_VAR 0 17
52186: PUSH
52187: EMPTY
52188: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52189: LD_ADDR_VAR 0 6
52193: PUSH
52194: LD_VAR 0 1
52198: PPUSH
52199: CALL_OW 274
52203: PPUSH
52204: LD_VAR 0 2
52208: PPUSH
52209: LD_INT 0
52211: PPUSH
52212: CALL 49778 0 3
52216: PPUSH
52217: LD_INT 30
52219: PUSH
52220: LD_INT 3
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PPUSH
52227: CALL_OW 72
52231: ST_TO_ADDR
// if not factories then
52232: LD_VAR 0 6
52236: NOT
52237: IFFALSE 52241
// exit ;
52239: GO 53207
// for i in factories do
52241: LD_ADDR_VAR 0 8
52245: PUSH
52246: LD_VAR 0 6
52250: PUSH
52251: FOR_IN
52252: IFFALSE 52277
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52254: LD_ADDR_VAR 0 17
52258: PUSH
52259: LD_VAR 0 17
52263: PUSH
52264: LD_VAR 0 8
52268: PPUSH
52269: CALL_OW 478
52273: UNION
52274: ST_TO_ADDR
52275: GO 52251
52277: POP
52278: POP
// if not fac_list then
52279: LD_VAR 0 17
52283: NOT
52284: IFFALSE 52288
// exit ;
52286: GO 53207
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52288: LD_ADDR_VAR 0 5
52292: PUSH
52293: LD_INT 4
52295: PUSH
52296: LD_INT 5
52298: PUSH
52299: LD_INT 9
52301: PUSH
52302: LD_INT 10
52304: PUSH
52305: LD_INT 6
52307: PUSH
52308: LD_INT 7
52310: PUSH
52311: LD_INT 11
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 27
52325: PUSH
52326: LD_INT 28
52328: PUSH
52329: LD_INT 26
52331: PUSH
52332: LD_INT 30
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 43
52343: PUSH
52344: LD_INT 44
52346: PUSH
52347: LD_INT 46
52349: PUSH
52350: LD_INT 45
52352: PUSH
52353: LD_INT 47
52355: PUSH
52356: LD_INT 49
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: LIST
52371: PUSH
52372: LD_VAR 0 12
52376: ARRAY
52377: ST_TO_ADDR
// list := list isect fac_list ;
52378: LD_ADDR_VAR 0 5
52382: PUSH
52383: LD_VAR 0 5
52387: PUSH
52388: LD_VAR 0 17
52392: ISECT
52393: ST_TO_ADDR
// if not list then
52394: LD_VAR 0 5
52398: NOT
52399: IFFALSE 52403
// exit ;
52401: GO 53207
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52403: LD_VAR 0 12
52407: PUSH
52408: LD_INT 3
52410: EQUAL
52411: PUSH
52412: LD_INT 49
52414: PUSH
52415: LD_VAR 0 5
52419: IN
52420: AND
52421: PUSH
52422: LD_INT 31
52424: PPUSH
52425: LD_VAR 0 16
52429: PPUSH
52430: CALL_OW 321
52434: PUSH
52435: LD_INT 2
52437: EQUAL
52438: AND
52439: IFFALSE 52499
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52441: LD_INT 22
52443: PUSH
52444: LD_VAR 0 16
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 35
52455: PUSH
52456: LD_INT 49
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 91
52465: PUSH
52466: LD_VAR 0 1
52470: PUSH
52471: LD_INT 10
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: LIST
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: LIST
52483: PPUSH
52484: CALL_OW 69
52488: NOT
52489: IFFALSE 52499
// weapon := ru_time_lapser ;
52491: LD_ADDR_VAR 0 18
52495: PUSH
52496: LD_INT 49
52498: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52499: LD_VAR 0 12
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: LD_INT 2
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: IN
52514: PUSH
52515: LD_INT 11
52517: PUSH
52518: LD_VAR 0 5
52522: IN
52523: PUSH
52524: LD_INT 30
52526: PUSH
52527: LD_VAR 0 5
52531: IN
52532: OR
52533: AND
52534: PUSH
52535: LD_INT 6
52537: PPUSH
52538: LD_VAR 0 16
52542: PPUSH
52543: CALL_OW 321
52547: PUSH
52548: LD_INT 2
52550: EQUAL
52551: AND
52552: IFFALSE 52717
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52554: LD_INT 22
52556: PUSH
52557: LD_VAR 0 16
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: PUSH
52569: LD_INT 35
52571: PUSH
52572: LD_INT 11
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 35
52581: PUSH
52582: LD_INT 30
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 91
52596: PUSH
52597: LD_VAR 0 1
52601: PUSH
52602: LD_INT 18
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: LIST
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: LIST
52614: PPUSH
52615: CALL_OW 69
52619: NOT
52620: PUSH
52621: LD_INT 22
52623: PUSH
52624: LD_VAR 0 16
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 2
52635: PUSH
52636: LD_INT 30
52638: PUSH
52639: LD_INT 32
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 30
52648: PUSH
52649: LD_INT 33
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 91
52663: PUSH
52664: LD_VAR 0 1
52668: PUSH
52669: LD_INT 12
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: LIST
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: LIST
52681: PUSH
52682: EMPTY
52683: LIST
52684: PPUSH
52685: CALL_OW 69
52689: PUSH
52690: LD_INT 2
52692: GREATER
52693: AND
52694: IFFALSE 52717
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52696: LD_ADDR_VAR 0 18
52700: PUSH
52701: LD_INT 11
52703: PUSH
52704: LD_INT 30
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_VAR 0 12
52715: ARRAY
52716: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52717: LD_VAR 0 18
52721: NOT
52722: PUSH
52723: LD_INT 40
52725: PPUSH
52726: LD_VAR 0 16
52730: PPUSH
52731: CALL_OW 321
52735: PUSH
52736: LD_INT 2
52738: EQUAL
52739: AND
52740: PUSH
52741: LD_INT 7
52743: PUSH
52744: LD_VAR 0 5
52748: IN
52749: PUSH
52750: LD_INT 28
52752: PUSH
52753: LD_VAR 0 5
52757: IN
52758: OR
52759: PUSH
52760: LD_INT 45
52762: PUSH
52763: LD_VAR 0 5
52767: IN
52768: OR
52769: AND
52770: IFFALSE 53024
// begin hex := GetHexInfo ( x , y ) ;
52772: LD_ADDR_VAR 0 4
52776: PUSH
52777: LD_VAR 0 10
52781: PPUSH
52782: LD_VAR 0 11
52786: PPUSH
52787: CALL_OW 546
52791: ST_TO_ADDR
// if hex [ 1 ] then
52792: LD_VAR 0 4
52796: PUSH
52797: LD_INT 1
52799: ARRAY
52800: IFFALSE 52804
// exit ;
52802: GO 53207
// height := hex [ 2 ] ;
52804: LD_ADDR_VAR 0 15
52808: PUSH
52809: LD_VAR 0 4
52813: PUSH
52814: LD_INT 2
52816: ARRAY
52817: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52818: LD_ADDR_VAR 0 14
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: LD_INT 3
52831: PUSH
52832: LD_INT 5
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: ST_TO_ADDR
// for i in tmp do
52841: LD_ADDR_VAR 0 8
52845: PUSH
52846: LD_VAR 0 14
52850: PUSH
52851: FOR_IN
52852: IFFALSE 53022
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52854: LD_ADDR_VAR 0 9
52858: PUSH
52859: LD_VAR 0 10
52863: PPUSH
52864: LD_VAR 0 8
52868: PPUSH
52869: LD_INT 5
52871: PPUSH
52872: CALL_OW 272
52876: PUSH
52877: LD_VAR 0 11
52881: PPUSH
52882: LD_VAR 0 8
52886: PPUSH
52887: LD_INT 5
52889: PPUSH
52890: CALL_OW 273
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52899: LD_VAR 0 9
52903: PUSH
52904: LD_INT 1
52906: ARRAY
52907: PPUSH
52908: LD_VAR 0 9
52912: PUSH
52913: LD_INT 2
52915: ARRAY
52916: PPUSH
52917: CALL_OW 488
52921: IFFALSE 53020
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52923: LD_ADDR_VAR 0 4
52927: PUSH
52928: LD_VAR 0 9
52932: PUSH
52933: LD_INT 1
52935: ARRAY
52936: PPUSH
52937: LD_VAR 0 9
52941: PUSH
52942: LD_INT 2
52944: ARRAY
52945: PPUSH
52946: CALL_OW 546
52950: ST_TO_ADDR
// if hex [ 1 ] then
52951: LD_VAR 0 4
52955: PUSH
52956: LD_INT 1
52958: ARRAY
52959: IFFALSE 52963
// continue ;
52961: GO 52851
// h := hex [ 2 ] ;
52963: LD_ADDR_VAR 0 13
52967: PUSH
52968: LD_VAR 0 4
52972: PUSH
52973: LD_INT 2
52975: ARRAY
52976: ST_TO_ADDR
// if h + 7 < height then
52977: LD_VAR 0 13
52981: PUSH
52982: LD_INT 7
52984: PLUS
52985: PUSH
52986: LD_VAR 0 15
52990: LESS
52991: IFFALSE 53020
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52993: LD_ADDR_VAR 0 18
52997: PUSH
52998: LD_INT 7
53000: PUSH
53001: LD_INT 28
53003: PUSH
53004: LD_INT 45
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: LIST
53011: PUSH
53012: LD_VAR 0 12
53016: ARRAY
53017: ST_TO_ADDR
// break ;
53018: GO 53022
// end ; end ; end ;
53020: GO 52851
53022: POP
53023: POP
// end ; if not weapon then
53024: LD_VAR 0 18
53028: NOT
53029: IFFALSE 53089
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53031: LD_ADDR_VAR 0 5
53035: PUSH
53036: LD_VAR 0 5
53040: PUSH
53041: LD_INT 11
53043: PUSH
53044: LD_INT 30
53046: PUSH
53047: LD_INT 49
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: LIST
53054: DIFF
53055: ST_TO_ADDR
// if not list then
53056: LD_VAR 0 5
53060: NOT
53061: IFFALSE 53065
// exit ;
53063: GO 53207
// weapon := list [ rand ( 1 , list ) ] ;
53065: LD_ADDR_VAR 0 18
53069: PUSH
53070: LD_VAR 0 5
53074: PUSH
53075: LD_INT 1
53077: PPUSH
53078: LD_VAR 0 5
53082: PPUSH
53083: CALL_OW 12
53087: ARRAY
53088: ST_TO_ADDR
// end ; if weapon then
53089: LD_VAR 0 18
53093: IFFALSE 53207
// begin tmp := CostOfWeapon ( weapon ) ;
53095: LD_ADDR_VAR 0 14
53099: PUSH
53100: LD_VAR 0 18
53104: PPUSH
53105: CALL_OW 451
53109: ST_TO_ADDR
// j := GetBase ( tower ) ;
53110: LD_ADDR_VAR 0 9
53114: PUSH
53115: LD_VAR 0 1
53119: PPUSH
53120: CALL_OW 274
53124: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53125: LD_VAR 0 9
53129: PPUSH
53130: LD_INT 1
53132: PPUSH
53133: CALL_OW 275
53137: PUSH
53138: LD_VAR 0 14
53142: PUSH
53143: LD_INT 1
53145: ARRAY
53146: GREATEREQUAL
53147: PUSH
53148: LD_VAR 0 9
53152: PPUSH
53153: LD_INT 2
53155: PPUSH
53156: CALL_OW 275
53160: PUSH
53161: LD_VAR 0 14
53165: PUSH
53166: LD_INT 2
53168: ARRAY
53169: GREATEREQUAL
53170: AND
53171: PUSH
53172: LD_VAR 0 9
53176: PPUSH
53177: LD_INT 3
53179: PPUSH
53180: CALL_OW 275
53184: PUSH
53185: LD_VAR 0 14
53189: PUSH
53190: LD_INT 3
53192: ARRAY
53193: GREATEREQUAL
53194: AND
53195: IFFALSE 53207
// result := weapon ;
53197: LD_ADDR_VAR 0 3
53201: PUSH
53202: LD_VAR 0 18
53206: ST_TO_ADDR
// end ; end ;
53207: LD_VAR 0 3
53211: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53212: LD_INT 0
53214: PPUSH
53215: PPUSH
// result := true ;
53216: LD_ADDR_VAR 0 3
53220: PUSH
53221: LD_INT 1
53223: ST_TO_ADDR
// if array1 = array2 then
53224: LD_VAR 0 1
53228: PUSH
53229: LD_VAR 0 2
53233: EQUAL
53234: IFFALSE 53294
// begin for i = 1 to array1 do
53236: LD_ADDR_VAR 0 4
53240: PUSH
53241: DOUBLE
53242: LD_INT 1
53244: DEC
53245: ST_TO_ADDR
53246: LD_VAR 0 1
53250: PUSH
53251: FOR_TO
53252: IFFALSE 53290
// if array1 [ i ] <> array2 [ i ] then
53254: LD_VAR 0 1
53258: PUSH
53259: LD_VAR 0 4
53263: ARRAY
53264: PUSH
53265: LD_VAR 0 2
53269: PUSH
53270: LD_VAR 0 4
53274: ARRAY
53275: NONEQUAL
53276: IFFALSE 53288
// begin result := false ;
53278: LD_ADDR_VAR 0 3
53282: PUSH
53283: LD_INT 0
53285: ST_TO_ADDR
// break ;
53286: GO 53290
// end ;
53288: GO 53251
53290: POP
53291: POP
// end else
53292: GO 53302
// result := false ;
53294: LD_ADDR_VAR 0 3
53298: PUSH
53299: LD_INT 0
53301: ST_TO_ADDR
// end ;
53302: LD_VAR 0 3
53306: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53307: LD_INT 0
53309: PPUSH
53310: PPUSH
// if not array1 or not array2 then
53311: LD_VAR 0 1
53315: NOT
53316: PUSH
53317: LD_VAR 0 2
53321: NOT
53322: OR
53323: IFFALSE 53327
// exit ;
53325: GO 53391
// result := true ;
53327: LD_ADDR_VAR 0 3
53331: PUSH
53332: LD_INT 1
53334: ST_TO_ADDR
// for i = 1 to array1 do
53335: LD_ADDR_VAR 0 4
53339: PUSH
53340: DOUBLE
53341: LD_INT 1
53343: DEC
53344: ST_TO_ADDR
53345: LD_VAR 0 1
53349: PUSH
53350: FOR_TO
53351: IFFALSE 53389
// if array1 [ i ] <> array2 [ i ] then
53353: LD_VAR 0 1
53357: PUSH
53358: LD_VAR 0 4
53362: ARRAY
53363: PUSH
53364: LD_VAR 0 2
53368: PUSH
53369: LD_VAR 0 4
53373: ARRAY
53374: NONEQUAL
53375: IFFALSE 53387
// begin result := false ;
53377: LD_ADDR_VAR 0 3
53381: PUSH
53382: LD_INT 0
53384: ST_TO_ADDR
// break ;
53385: GO 53389
// end ;
53387: GO 53350
53389: POP
53390: POP
// end ;
53391: LD_VAR 0 3
53395: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53396: LD_INT 0
53398: PPUSH
53399: PPUSH
53400: PPUSH
// pom := GetBase ( fac ) ;
53401: LD_ADDR_VAR 0 5
53405: PUSH
53406: LD_VAR 0 1
53410: PPUSH
53411: CALL_OW 274
53415: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53416: LD_ADDR_VAR 0 4
53420: PUSH
53421: LD_VAR 0 2
53425: PUSH
53426: LD_INT 1
53428: ARRAY
53429: PPUSH
53430: LD_VAR 0 2
53434: PUSH
53435: LD_INT 2
53437: ARRAY
53438: PPUSH
53439: LD_VAR 0 2
53443: PUSH
53444: LD_INT 3
53446: ARRAY
53447: PPUSH
53448: LD_VAR 0 2
53452: PUSH
53453: LD_INT 4
53455: ARRAY
53456: PPUSH
53457: CALL_OW 449
53461: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53462: LD_ADDR_VAR 0 3
53466: PUSH
53467: LD_VAR 0 5
53471: PPUSH
53472: LD_INT 1
53474: PPUSH
53475: CALL_OW 275
53479: PUSH
53480: LD_VAR 0 4
53484: PUSH
53485: LD_INT 1
53487: ARRAY
53488: GREATEREQUAL
53489: PUSH
53490: LD_VAR 0 5
53494: PPUSH
53495: LD_INT 2
53497: PPUSH
53498: CALL_OW 275
53502: PUSH
53503: LD_VAR 0 4
53507: PUSH
53508: LD_INT 2
53510: ARRAY
53511: GREATEREQUAL
53512: AND
53513: PUSH
53514: LD_VAR 0 5
53518: PPUSH
53519: LD_INT 3
53521: PPUSH
53522: CALL_OW 275
53526: PUSH
53527: LD_VAR 0 4
53531: PUSH
53532: LD_INT 3
53534: ARRAY
53535: GREATEREQUAL
53536: AND
53537: ST_TO_ADDR
// end ;
53538: LD_VAR 0 3
53542: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53543: LD_INT 0
53545: PPUSH
53546: PPUSH
53547: PPUSH
53548: PPUSH
// pom := GetBase ( building ) ;
53549: LD_ADDR_VAR 0 3
53553: PUSH
53554: LD_VAR 0 1
53558: PPUSH
53559: CALL_OW 274
53563: ST_TO_ADDR
// if not pom then
53564: LD_VAR 0 3
53568: NOT
53569: IFFALSE 53573
// exit ;
53571: GO 53743
// btype := GetBType ( building ) ;
53573: LD_ADDR_VAR 0 5
53577: PUSH
53578: LD_VAR 0 1
53582: PPUSH
53583: CALL_OW 266
53587: ST_TO_ADDR
// if btype = b_armoury then
53588: LD_VAR 0 5
53592: PUSH
53593: LD_INT 4
53595: EQUAL
53596: IFFALSE 53606
// btype := b_barracks ;
53598: LD_ADDR_VAR 0 5
53602: PUSH
53603: LD_INT 5
53605: ST_TO_ADDR
// if btype = b_depot then
53606: LD_VAR 0 5
53610: PUSH
53611: LD_INT 0
53613: EQUAL
53614: IFFALSE 53624
// btype := b_warehouse ;
53616: LD_ADDR_VAR 0 5
53620: PUSH
53621: LD_INT 1
53623: ST_TO_ADDR
// if btype = b_workshop then
53624: LD_VAR 0 5
53628: PUSH
53629: LD_INT 2
53631: EQUAL
53632: IFFALSE 53642
// btype := b_factory ;
53634: LD_ADDR_VAR 0 5
53638: PUSH
53639: LD_INT 3
53641: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53642: LD_ADDR_VAR 0 4
53646: PUSH
53647: LD_VAR 0 5
53651: PPUSH
53652: LD_VAR 0 1
53656: PPUSH
53657: CALL_OW 248
53661: PPUSH
53662: CALL_OW 450
53666: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53667: LD_ADDR_VAR 0 2
53671: PUSH
53672: LD_VAR 0 3
53676: PPUSH
53677: LD_INT 1
53679: PPUSH
53680: CALL_OW 275
53684: PUSH
53685: LD_VAR 0 4
53689: PUSH
53690: LD_INT 1
53692: ARRAY
53693: GREATEREQUAL
53694: PUSH
53695: LD_VAR 0 3
53699: PPUSH
53700: LD_INT 2
53702: PPUSH
53703: CALL_OW 275
53707: PUSH
53708: LD_VAR 0 4
53712: PUSH
53713: LD_INT 2
53715: ARRAY
53716: GREATEREQUAL
53717: AND
53718: PUSH
53719: LD_VAR 0 3
53723: PPUSH
53724: LD_INT 3
53726: PPUSH
53727: CALL_OW 275
53731: PUSH
53732: LD_VAR 0 4
53736: PUSH
53737: LD_INT 3
53739: ARRAY
53740: GREATEREQUAL
53741: AND
53742: ST_TO_ADDR
// end ;
53743: LD_VAR 0 2
53747: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53748: LD_INT 0
53750: PPUSH
53751: PPUSH
53752: PPUSH
// pom := GetBase ( building ) ;
53753: LD_ADDR_VAR 0 4
53757: PUSH
53758: LD_VAR 0 1
53762: PPUSH
53763: CALL_OW 274
53767: ST_TO_ADDR
// if not pom then
53768: LD_VAR 0 4
53772: NOT
53773: IFFALSE 53777
// exit ;
53775: GO 53878
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53777: LD_ADDR_VAR 0 5
53781: PUSH
53782: LD_VAR 0 2
53786: PPUSH
53787: LD_VAR 0 1
53791: PPUSH
53792: CALL_OW 248
53796: PPUSH
53797: CALL_OW 450
53801: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53802: LD_ADDR_VAR 0 3
53806: PUSH
53807: LD_VAR 0 4
53811: PPUSH
53812: LD_INT 1
53814: PPUSH
53815: CALL_OW 275
53819: PUSH
53820: LD_VAR 0 5
53824: PUSH
53825: LD_INT 1
53827: ARRAY
53828: GREATEREQUAL
53829: PUSH
53830: LD_VAR 0 4
53834: PPUSH
53835: LD_INT 2
53837: PPUSH
53838: CALL_OW 275
53842: PUSH
53843: LD_VAR 0 5
53847: PUSH
53848: LD_INT 2
53850: ARRAY
53851: GREATEREQUAL
53852: AND
53853: PUSH
53854: LD_VAR 0 4
53858: PPUSH
53859: LD_INT 3
53861: PPUSH
53862: CALL_OW 275
53866: PUSH
53867: LD_VAR 0 5
53871: PUSH
53872: LD_INT 3
53874: ARRAY
53875: GREATEREQUAL
53876: AND
53877: ST_TO_ADDR
// end ;
53878: LD_VAR 0 3
53882: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53883: LD_INT 0
53885: PPUSH
53886: PPUSH
53887: PPUSH
53888: PPUSH
53889: PPUSH
53890: PPUSH
53891: PPUSH
53892: PPUSH
53893: PPUSH
53894: PPUSH
53895: PPUSH
// result := false ;
53896: LD_ADDR_VAR 0 8
53900: PUSH
53901: LD_INT 0
53903: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53904: LD_VAR 0 5
53908: NOT
53909: PUSH
53910: LD_VAR 0 1
53914: NOT
53915: OR
53916: PUSH
53917: LD_VAR 0 2
53921: NOT
53922: OR
53923: PUSH
53924: LD_VAR 0 3
53928: NOT
53929: OR
53930: IFFALSE 53934
// exit ;
53932: GO 54748
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53934: LD_ADDR_VAR 0 14
53938: PUSH
53939: LD_VAR 0 1
53943: PPUSH
53944: LD_VAR 0 2
53948: PPUSH
53949: LD_VAR 0 3
53953: PPUSH
53954: LD_VAR 0 4
53958: PPUSH
53959: LD_VAR 0 5
53963: PUSH
53964: LD_INT 1
53966: ARRAY
53967: PPUSH
53968: CALL_OW 248
53972: PPUSH
53973: LD_INT 0
53975: PPUSH
53976: CALL 56001 0 6
53980: ST_TO_ADDR
// if not hexes then
53981: LD_VAR 0 14
53985: NOT
53986: IFFALSE 53990
// exit ;
53988: GO 54748
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53990: LD_ADDR_VAR 0 17
53994: PUSH
53995: LD_VAR 0 5
53999: PPUSH
54000: LD_INT 22
54002: PUSH
54003: LD_VAR 0 13
54007: PPUSH
54008: CALL_OW 255
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: LD_INT 30
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 30
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: LIST
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PPUSH
54049: CALL_OW 72
54053: ST_TO_ADDR
// for i = 1 to hexes do
54054: LD_ADDR_VAR 0 9
54058: PUSH
54059: DOUBLE
54060: LD_INT 1
54062: DEC
54063: ST_TO_ADDR
54064: LD_VAR 0 14
54068: PUSH
54069: FOR_TO
54070: IFFALSE 54746
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54072: LD_ADDR_VAR 0 13
54076: PUSH
54077: LD_VAR 0 14
54081: PUSH
54082: LD_VAR 0 9
54086: ARRAY
54087: PUSH
54088: LD_INT 1
54090: ARRAY
54091: PPUSH
54092: LD_VAR 0 14
54096: PUSH
54097: LD_VAR 0 9
54101: ARRAY
54102: PUSH
54103: LD_INT 2
54105: ARRAY
54106: PPUSH
54107: CALL_OW 428
54111: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54112: LD_VAR 0 14
54116: PUSH
54117: LD_VAR 0 9
54121: ARRAY
54122: PUSH
54123: LD_INT 1
54125: ARRAY
54126: PPUSH
54127: LD_VAR 0 14
54131: PUSH
54132: LD_VAR 0 9
54136: ARRAY
54137: PUSH
54138: LD_INT 2
54140: ARRAY
54141: PPUSH
54142: CALL_OW 351
54146: PUSH
54147: LD_VAR 0 14
54151: PUSH
54152: LD_VAR 0 9
54156: ARRAY
54157: PUSH
54158: LD_INT 1
54160: ARRAY
54161: PPUSH
54162: LD_VAR 0 14
54166: PUSH
54167: LD_VAR 0 9
54171: ARRAY
54172: PUSH
54173: LD_INT 2
54175: ARRAY
54176: PPUSH
54177: CALL_OW 488
54181: NOT
54182: OR
54183: PUSH
54184: LD_VAR 0 13
54188: PPUSH
54189: CALL_OW 247
54193: PUSH
54194: LD_INT 3
54196: EQUAL
54197: OR
54198: IFFALSE 54204
// exit ;
54200: POP
54201: POP
54202: GO 54748
// if not tmp then
54204: LD_VAR 0 13
54208: NOT
54209: IFFALSE 54213
// continue ;
54211: GO 54069
// result := true ;
54213: LD_ADDR_VAR 0 8
54217: PUSH
54218: LD_INT 1
54220: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54221: LD_VAR 0 6
54225: PUSH
54226: LD_VAR 0 13
54230: PPUSH
54231: CALL_OW 247
54235: PUSH
54236: LD_INT 2
54238: EQUAL
54239: AND
54240: PUSH
54241: LD_VAR 0 13
54245: PPUSH
54246: CALL_OW 263
54250: PUSH
54251: LD_INT 1
54253: EQUAL
54254: AND
54255: IFFALSE 54419
// begin if IsDrivenBy ( tmp ) then
54257: LD_VAR 0 13
54261: PPUSH
54262: CALL_OW 311
54266: IFFALSE 54270
// continue ;
54268: GO 54069
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54270: LD_VAR 0 6
54274: PPUSH
54275: LD_INT 3
54277: PUSH
54278: LD_INT 60
54280: PUSH
54281: EMPTY
54282: LIST
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 3
54290: PUSH
54291: LD_INT 55
54293: PUSH
54294: EMPTY
54295: LIST
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PPUSH
54305: CALL_OW 72
54309: IFFALSE 54417
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54311: LD_ADDR_VAR 0 18
54315: PUSH
54316: LD_VAR 0 6
54320: PPUSH
54321: LD_INT 3
54323: PUSH
54324: LD_INT 60
54326: PUSH
54327: EMPTY
54328: LIST
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 3
54336: PUSH
54337: LD_INT 55
54339: PUSH
54340: EMPTY
54341: LIST
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PPUSH
54351: CALL_OW 72
54355: PUSH
54356: LD_INT 1
54358: ARRAY
54359: ST_TO_ADDR
// if IsInUnit ( driver ) then
54360: LD_VAR 0 18
54364: PPUSH
54365: CALL_OW 310
54369: IFFALSE 54380
// ComExit ( driver ) ;
54371: LD_VAR 0 18
54375: PPUSH
54376: CALL 79802 0 1
// AddComEnterUnit ( driver , tmp ) ;
54380: LD_VAR 0 18
54384: PPUSH
54385: LD_VAR 0 13
54389: PPUSH
54390: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54394: LD_VAR 0 18
54398: PPUSH
54399: LD_VAR 0 7
54403: PPUSH
54404: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54408: LD_VAR 0 18
54412: PPUSH
54413: CALL_OW 181
// end ; continue ;
54417: GO 54069
// end ; if not cleaners or not tmp in cleaners then
54419: LD_VAR 0 6
54423: NOT
54424: PUSH
54425: LD_VAR 0 13
54429: PUSH
54430: LD_VAR 0 6
54434: IN
54435: NOT
54436: OR
54437: IFFALSE 54744
// begin if dep then
54439: LD_VAR 0 17
54443: IFFALSE 54579
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54445: LD_ADDR_VAR 0 16
54449: PUSH
54450: LD_VAR 0 17
54454: PUSH
54455: LD_INT 1
54457: ARRAY
54458: PPUSH
54459: CALL_OW 250
54463: PPUSH
54464: LD_VAR 0 17
54468: PUSH
54469: LD_INT 1
54471: ARRAY
54472: PPUSH
54473: CALL_OW 254
54477: PPUSH
54478: LD_INT 5
54480: PPUSH
54481: CALL_OW 272
54485: PUSH
54486: LD_VAR 0 17
54490: PUSH
54491: LD_INT 1
54493: ARRAY
54494: PPUSH
54495: CALL_OW 251
54499: PPUSH
54500: LD_VAR 0 17
54504: PUSH
54505: LD_INT 1
54507: ARRAY
54508: PPUSH
54509: CALL_OW 254
54513: PPUSH
54514: LD_INT 5
54516: PPUSH
54517: CALL_OW 273
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54526: LD_VAR 0 16
54530: PUSH
54531: LD_INT 1
54533: ARRAY
54534: PPUSH
54535: LD_VAR 0 16
54539: PUSH
54540: LD_INT 2
54542: ARRAY
54543: PPUSH
54544: CALL_OW 488
54548: IFFALSE 54579
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54550: LD_VAR 0 13
54554: PPUSH
54555: LD_VAR 0 16
54559: PUSH
54560: LD_INT 1
54562: ARRAY
54563: PPUSH
54564: LD_VAR 0 16
54568: PUSH
54569: LD_INT 2
54571: ARRAY
54572: PPUSH
54573: CALL_OW 111
// continue ;
54577: GO 54069
// end ; end ; r := GetDir ( tmp ) ;
54579: LD_ADDR_VAR 0 15
54583: PUSH
54584: LD_VAR 0 13
54588: PPUSH
54589: CALL_OW 254
54593: ST_TO_ADDR
// if r = 5 then
54594: LD_VAR 0 15
54598: PUSH
54599: LD_INT 5
54601: EQUAL
54602: IFFALSE 54612
// r := 0 ;
54604: LD_ADDR_VAR 0 15
54608: PUSH
54609: LD_INT 0
54611: ST_TO_ADDR
// for j = r to 5 do
54612: LD_ADDR_VAR 0 10
54616: PUSH
54617: DOUBLE
54618: LD_VAR 0 15
54622: DEC
54623: ST_TO_ADDR
54624: LD_INT 5
54626: PUSH
54627: FOR_TO
54628: IFFALSE 54742
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54630: LD_ADDR_VAR 0 11
54634: PUSH
54635: LD_VAR 0 13
54639: PPUSH
54640: CALL_OW 250
54644: PPUSH
54645: LD_VAR 0 10
54649: PPUSH
54650: LD_INT 2
54652: PPUSH
54653: CALL_OW 272
54657: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54658: LD_ADDR_VAR 0 12
54662: PUSH
54663: LD_VAR 0 13
54667: PPUSH
54668: CALL_OW 251
54672: PPUSH
54673: LD_VAR 0 10
54677: PPUSH
54678: LD_INT 2
54680: PPUSH
54681: CALL_OW 273
54685: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54686: LD_VAR 0 11
54690: PPUSH
54691: LD_VAR 0 12
54695: PPUSH
54696: CALL_OW 488
54700: PUSH
54701: LD_VAR 0 11
54705: PPUSH
54706: LD_VAR 0 12
54710: PPUSH
54711: CALL_OW 428
54715: NOT
54716: AND
54717: IFFALSE 54740
// begin ComMoveXY ( tmp , _x , _y ) ;
54719: LD_VAR 0 13
54723: PPUSH
54724: LD_VAR 0 11
54728: PPUSH
54729: LD_VAR 0 12
54733: PPUSH
54734: CALL_OW 111
// break ;
54738: GO 54742
// end ; end ;
54740: GO 54627
54742: POP
54743: POP
// end ; end ;
54744: GO 54069
54746: POP
54747: POP
// end ;
54748: LD_VAR 0 8
54752: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54753: LD_INT 0
54755: PPUSH
// result := true ;
54756: LD_ADDR_VAR 0 3
54760: PUSH
54761: LD_INT 1
54763: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54764: LD_VAR 0 2
54768: PUSH
54769: LD_INT 24
54771: DOUBLE
54772: EQUAL
54773: IFTRUE 54783
54775: LD_INT 33
54777: DOUBLE
54778: EQUAL
54779: IFTRUE 54783
54781: GO 54808
54783: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54784: LD_ADDR_VAR 0 3
54788: PUSH
54789: LD_INT 32
54791: PPUSH
54792: LD_VAR 0 1
54796: PPUSH
54797: CALL_OW 321
54801: PUSH
54802: LD_INT 2
54804: EQUAL
54805: ST_TO_ADDR
54806: GO 55124
54808: LD_INT 20
54810: DOUBLE
54811: EQUAL
54812: IFTRUE 54816
54814: GO 54841
54816: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54817: LD_ADDR_VAR 0 3
54821: PUSH
54822: LD_INT 6
54824: PPUSH
54825: LD_VAR 0 1
54829: PPUSH
54830: CALL_OW 321
54834: PUSH
54835: LD_INT 2
54837: EQUAL
54838: ST_TO_ADDR
54839: GO 55124
54841: LD_INT 22
54843: DOUBLE
54844: EQUAL
54845: IFTRUE 54855
54847: LD_INT 36
54849: DOUBLE
54850: EQUAL
54851: IFTRUE 54855
54853: GO 54880
54855: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54856: LD_ADDR_VAR 0 3
54860: PUSH
54861: LD_INT 15
54863: PPUSH
54864: LD_VAR 0 1
54868: PPUSH
54869: CALL_OW 321
54873: PUSH
54874: LD_INT 2
54876: EQUAL
54877: ST_TO_ADDR
54878: GO 55124
54880: LD_INT 30
54882: DOUBLE
54883: EQUAL
54884: IFTRUE 54888
54886: GO 54913
54888: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54889: LD_ADDR_VAR 0 3
54893: PUSH
54894: LD_INT 20
54896: PPUSH
54897: LD_VAR 0 1
54901: PPUSH
54902: CALL_OW 321
54906: PUSH
54907: LD_INT 2
54909: EQUAL
54910: ST_TO_ADDR
54911: GO 55124
54913: LD_INT 28
54915: DOUBLE
54916: EQUAL
54917: IFTRUE 54927
54919: LD_INT 21
54921: DOUBLE
54922: EQUAL
54923: IFTRUE 54927
54925: GO 54952
54927: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54928: LD_ADDR_VAR 0 3
54932: PUSH
54933: LD_INT 21
54935: PPUSH
54936: LD_VAR 0 1
54940: PPUSH
54941: CALL_OW 321
54945: PUSH
54946: LD_INT 2
54948: EQUAL
54949: ST_TO_ADDR
54950: GO 55124
54952: LD_INT 16
54954: DOUBLE
54955: EQUAL
54956: IFTRUE 54960
54958: GO 54985
54960: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54961: LD_ADDR_VAR 0 3
54965: PUSH
54966: LD_INT 84
54968: PPUSH
54969: LD_VAR 0 1
54973: PPUSH
54974: CALL_OW 321
54978: PUSH
54979: LD_INT 2
54981: EQUAL
54982: ST_TO_ADDR
54983: GO 55124
54985: LD_INT 19
54987: DOUBLE
54988: EQUAL
54989: IFTRUE 54999
54991: LD_INT 23
54993: DOUBLE
54994: EQUAL
54995: IFTRUE 54999
54997: GO 55024
54999: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55000: LD_ADDR_VAR 0 3
55004: PUSH
55005: LD_INT 83
55007: PPUSH
55008: LD_VAR 0 1
55012: PPUSH
55013: CALL_OW 321
55017: PUSH
55018: LD_INT 2
55020: EQUAL
55021: ST_TO_ADDR
55022: GO 55124
55024: LD_INT 17
55026: DOUBLE
55027: EQUAL
55028: IFTRUE 55032
55030: GO 55057
55032: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55033: LD_ADDR_VAR 0 3
55037: PUSH
55038: LD_INT 39
55040: PPUSH
55041: LD_VAR 0 1
55045: PPUSH
55046: CALL_OW 321
55050: PUSH
55051: LD_INT 2
55053: EQUAL
55054: ST_TO_ADDR
55055: GO 55124
55057: LD_INT 18
55059: DOUBLE
55060: EQUAL
55061: IFTRUE 55065
55063: GO 55090
55065: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55066: LD_ADDR_VAR 0 3
55070: PUSH
55071: LD_INT 40
55073: PPUSH
55074: LD_VAR 0 1
55078: PPUSH
55079: CALL_OW 321
55083: PUSH
55084: LD_INT 2
55086: EQUAL
55087: ST_TO_ADDR
55088: GO 55124
55090: LD_INT 27
55092: DOUBLE
55093: EQUAL
55094: IFTRUE 55098
55096: GO 55123
55098: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55099: LD_ADDR_VAR 0 3
55103: PUSH
55104: LD_INT 35
55106: PPUSH
55107: LD_VAR 0 1
55111: PPUSH
55112: CALL_OW 321
55116: PUSH
55117: LD_INT 2
55119: EQUAL
55120: ST_TO_ADDR
55121: GO 55124
55123: POP
// end ;
55124: LD_VAR 0 3
55128: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55129: LD_INT 0
55131: PPUSH
55132: PPUSH
55133: PPUSH
55134: PPUSH
55135: PPUSH
55136: PPUSH
55137: PPUSH
55138: PPUSH
55139: PPUSH
55140: PPUSH
55141: PPUSH
// result := false ;
55142: LD_ADDR_VAR 0 6
55146: PUSH
55147: LD_INT 0
55149: ST_TO_ADDR
// if btype = b_depot then
55150: LD_VAR 0 2
55154: PUSH
55155: LD_INT 0
55157: EQUAL
55158: IFFALSE 55170
// begin result := true ;
55160: LD_ADDR_VAR 0 6
55164: PUSH
55165: LD_INT 1
55167: ST_TO_ADDR
// exit ;
55168: GO 55996
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55170: LD_VAR 0 1
55174: NOT
55175: PUSH
55176: LD_VAR 0 1
55180: PPUSH
55181: CALL_OW 266
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: IN
55196: NOT
55197: OR
55198: PUSH
55199: LD_VAR 0 2
55203: NOT
55204: OR
55205: PUSH
55206: LD_VAR 0 5
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: LD_INT 2
55219: PUSH
55220: LD_INT 3
55222: PUSH
55223: LD_INT 4
55225: PUSH
55226: LD_INT 5
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: IN
55237: NOT
55238: OR
55239: PUSH
55240: LD_VAR 0 3
55244: PPUSH
55245: LD_VAR 0 4
55249: PPUSH
55250: CALL_OW 488
55254: NOT
55255: OR
55256: IFFALSE 55260
// exit ;
55258: GO 55996
// side := GetSide ( depot ) ;
55260: LD_ADDR_VAR 0 9
55264: PUSH
55265: LD_VAR 0 1
55269: PPUSH
55270: CALL_OW 255
55274: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55275: LD_VAR 0 9
55279: PPUSH
55280: LD_VAR 0 2
55284: PPUSH
55285: CALL 54753 0 2
55289: NOT
55290: IFFALSE 55294
// exit ;
55292: GO 55996
// pom := GetBase ( depot ) ;
55294: LD_ADDR_VAR 0 10
55298: PUSH
55299: LD_VAR 0 1
55303: PPUSH
55304: CALL_OW 274
55308: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55309: LD_ADDR_VAR 0 11
55313: PUSH
55314: LD_VAR 0 2
55318: PPUSH
55319: LD_VAR 0 1
55323: PPUSH
55324: CALL_OW 248
55328: PPUSH
55329: CALL_OW 450
55333: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55334: LD_VAR 0 10
55338: PPUSH
55339: LD_INT 1
55341: PPUSH
55342: CALL_OW 275
55346: PUSH
55347: LD_VAR 0 11
55351: PUSH
55352: LD_INT 1
55354: ARRAY
55355: GREATEREQUAL
55356: PUSH
55357: LD_VAR 0 10
55361: PPUSH
55362: LD_INT 2
55364: PPUSH
55365: CALL_OW 275
55369: PUSH
55370: LD_VAR 0 11
55374: PUSH
55375: LD_INT 2
55377: ARRAY
55378: GREATEREQUAL
55379: AND
55380: PUSH
55381: LD_VAR 0 10
55385: PPUSH
55386: LD_INT 3
55388: PPUSH
55389: CALL_OW 275
55393: PUSH
55394: LD_VAR 0 11
55398: PUSH
55399: LD_INT 3
55401: ARRAY
55402: GREATEREQUAL
55403: AND
55404: NOT
55405: IFFALSE 55409
// exit ;
55407: GO 55996
// if GetBType ( depot ) = b_depot then
55409: LD_VAR 0 1
55413: PPUSH
55414: CALL_OW 266
55418: PUSH
55419: LD_INT 0
55421: EQUAL
55422: IFFALSE 55434
// dist := 28 else
55424: LD_ADDR_VAR 0 14
55428: PUSH
55429: LD_INT 28
55431: ST_TO_ADDR
55432: GO 55442
// dist := 36 ;
55434: LD_ADDR_VAR 0 14
55438: PUSH
55439: LD_INT 36
55441: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55442: LD_VAR 0 1
55446: PPUSH
55447: LD_VAR 0 3
55451: PPUSH
55452: LD_VAR 0 4
55456: PPUSH
55457: CALL_OW 297
55461: PUSH
55462: LD_VAR 0 14
55466: GREATER
55467: IFFALSE 55471
// exit ;
55469: GO 55996
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55471: LD_ADDR_VAR 0 12
55475: PUSH
55476: LD_VAR 0 2
55480: PPUSH
55481: LD_VAR 0 3
55485: PPUSH
55486: LD_VAR 0 4
55490: PPUSH
55491: LD_VAR 0 5
55495: PPUSH
55496: LD_VAR 0 1
55500: PPUSH
55501: CALL_OW 248
55505: PPUSH
55506: LD_INT 0
55508: PPUSH
55509: CALL 56001 0 6
55513: ST_TO_ADDR
// if not hexes then
55514: LD_VAR 0 12
55518: NOT
55519: IFFALSE 55523
// exit ;
55521: GO 55996
// hex := GetHexInfo ( x , y ) ;
55523: LD_ADDR_VAR 0 15
55527: PUSH
55528: LD_VAR 0 3
55532: PPUSH
55533: LD_VAR 0 4
55537: PPUSH
55538: CALL_OW 546
55542: ST_TO_ADDR
// if hex [ 1 ] then
55543: LD_VAR 0 15
55547: PUSH
55548: LD_INT 1
55550: ARRAY
55551: IFFALSE 55555
// exit ;
55553: GO 55996
// height := hex [ 2 ] ;
55555: LD_ADDR_VAR 0 13
55559: PUSH
55560: LD_VAR 0 15
55564: PUSH
55565: LD_INT 2
55567: ARRAY
55568: ST_TO_ADDR
// for i = 1 to hexes do
55569: LD_ADDR_VAR 0 7
55573: PUSH
55574: DOUBLE
55575: LD_INT 1
55577: DEC
55578: ST_TO_ADDR
55579: LD_VAR 0 12
55583: PUSH
55584: FOR_TO
55585: IFFALSE 55915
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55587: LD_VAR 0 12
55591: PUSH
55592: LD_VAR 0 7
55596: ARRAY
55597: PUSH
55598: LD_INT 1
55600: ARRAY
55601: PPUSH
55602: LD_VAR 0 12
55606: PUSH
55607: LD_VAR 0 7
55611: ARRAY
55612: PUSH
55613: LD_INT 2
55615: ARRAY
55616: PPUSH
55617: CALL_OW 488
55621: NOT
55622: PUSH
55623: LD_VAR 0 12
55627: PUSH
55628: LD_VAR 0 7
55632: ARRAY
55633: PUSH
55634: LD_INT 1
55636: ARRAY
55637: PPUSH
55638: LD_VAR 0 12
55642: PUSH
55643: LD_VAR 0 7
55647: ARRAY
55648: PUSH
55649: LD_INT 2
55651: ARRAY
55652: PPUSH
55653: CALL_OW 428
55657: PUSH
55658: LD_INT 0
55660: GREATER
55661: OR
55662: PUSH
55663: LD_VAR 0 12
55667: PUSH
55668: LD_VAR 0 7
55672: ARRAY
55673: PUSH
55674: LD_INT 1
55676: ARRAY
55677: PPUSH
55678: LD_VAR 0 12
55682: PUSH
55683: LD_VAR 0 7
55687: ARRAY
55688: PUSH
55689: LD_INT 2
55691: ARRAY
55692: PPUSH
55693: CALL_OW 351
55697: OR
55698: IFFALSE 55704
// exit ;
55700: POP
55701: POP
55702: GO 55996
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55704: LD_ADDR_VAR 0 8
55708: PUSH
55709: LD_VAR 0 12
55713: PUSH
55714: LD_VAR 0 7
55718: ARRAY
55719: PUSH
55720: LD_INT 1
55722: ARRAY
55723: PPUSH
55724: LD_VAR 0 12
55728: PUSH
55729: LD_VAR 0 7
55733: ARRAY
55734: PUSH
55735: LD_INT 2
55737: ARRAY
55738: PPUSH
55739: CALL_OW 546
55743: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55744: LD_VAR 0 8
55748: PUSH
55749: LD_INT 1
55751: ARRAY
55752: PUSH
55753: LD_VAR 0 8
55757: PUSH
55758: LD_INT 2
55760: ARRAY
55761: PUSH
55762: LD_VAR 0 13
55766: PUSH
55767: LD_INT 2
55769: PLUS
55770: GREATER
55771: OR
55772: PUSH
55773: LD_VAR 0 8
55777: PUSH
55778: LD_INT 2
55780: ARRAY
55781: PUSH
55782: LD_VAR 0 13
55786: PUSH
55787: LD_INT 2
55789: MINUS
55790: LESS
55791: OR
55792: PUSH
55793: LD_VAR 0 8
55797: PUSH
55798: LD_INT 3
55800: ARRAY
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: LD_INT 8
55807: PUSH
55808: LD_INT 9
55810: PUSH
55811: LD_INT 10
55813: PUSH
55814: LD_INT 11
55816: PUSH
55817: LD_INT 12
55819: PUSH
55820: LD_INT 13
55822: PUSH
55823: LD_INT 16
55825: PUSH
55826: LD_INT 17
55828: PUSH
55829: LD_INT 18
55831: PUSH
55832: LD_INT 19
55834: PUSH
55835: LD_INT 20
55837: PUSH
55838: LD_INT 21
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: IN
55856: NOT
55857: OR
55858: PUSH
55859: LD_VAR 0 8
55863: PUSH
55864: LD_INT 5
55866: ARRAY
55867: NOT
55868: OR
55869: PUSH
55870: LD_VAR 0 8
55874: PUSH
55875: LD_INT 6
55877: ARRAY
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: LD_INT 2
55884: PUSH
55885: LD_INT 7
55887: PUSH
55888: LD_INT 9
55890: PUSH
55891: LD_INT 10
55893: PUSH
55894: LD_INT 11
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: IN
55905: NOT
55906: OR
55907: IFFALSE 55913
// exit ;
55909: POP
55910: POP
55911: GO 55996
// end ;
55913: GO 55584
55915: POP
55916: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55917: LD_VAR 0 9
55921: PPUSH
55922: LD_VAR 0 3
55926: PPUSH
55927: LD_VAR 0 4
55931: PPUSH
55932: LD_INT 20
55934: PPUSH
55935: CALL 47919 0 4
55939: PUSH
55940: LD_INT 4
55942: ARRAY
55943: IFFALSE 55947
// exit ;
55945: GO 55996
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55947: LD_VAR 0 2
55951: PUSH
55952: LD_INT 29
55954: PUSH
55955: LD_INT 30
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: IN
55962: PUSH
55963: LD_VAR 0 3
55967: PPUSH
55968: LD_VAR 0 4
55972: PPUSH
55973: LD_VAR 0 9
55977: PPUSH
55978: CALL_OW 440
55982: NOT
55983: AND
55984: IFFALSE 55988
// exit ;
55986: GO 55996
// result := true ;
55988: LD_ADDR_VAR 0 6
55992: PUSH
55993: LD_INT 1
55995: ST_TO_ADDR
// end ;
55996: LD_VAR 0 6
56000: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56001: LD_INT 0
56003: PPUSH
56004: PPUSH
56005: PPUSH
56006: PPUSH
56007: PPUSH
56008: PPUSH
56009: PPUSH
56010: PPUSH
56011: PPUSH
56012: PPUSH
56013: PPUSH
56014: PPUSH
56015: PPUSH
56016: PPUSH
56017: PPUSH
56018: PPUSH
56019: PPUSH
56020: PPUSH
56021: PPUSH
56022: PPUSH
56023: PPUSH
56024: PPUSH
56025: PPUSH
56026: PPUSH
56027: PPUSH
56028: PPUSH
56029: PPUSH
56030: PPUSH
56031: PPUSH
56032: PPUSH
56033: PPUSH
56034: PPUSH
56035: PPUSH
56036: PPUSH
56037: PPUSH
56038: PPUSH
56039: PPUSH
56040: PPUSH
56041: PPUSH
56042: PPUSH
56043: PPUSH
56044: PPUSH
56045: PPUSH
56046: PPUSH
56047: PPUSH
56048: PPUSH
56049: PPUSH
56050: PPUSH
56051: PPUSH
56052: PPUSH
56053: PPUSH
56054: PPUSH
56055: PPUSH
56056: PPUSH
56057: PPUSH
56058: PPUSH
56059: PPUSH
56060: PPUSH
// result = [ ] ;
56061: LD_ADDR_VAR 0 7
56065: PUSH
56066: EMPTY
56067: ST_TO_ADDR
// temp_list = [ ] ;
56068: LD_ADDR_VAR 0 9
56072: PUSH
56073: EMPTY
56074: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56075: LD_VAR 0 4
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: LD_INT 2
56088: PUSH
56089: LD_INT 3
56091: PUSH
56092: LD_INT 4
56094: PUSH
56095: LD_INT 5
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: IN
56106: NOT
56107: PUSH
56108: LD_VAR 0 1
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: IN
56123: PUSH
56124: LD_VAR 0 5
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: LD_INT 3
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: LIST
56142: IN
56143: NOT
56144: AND
56145: OR
56146: IFFALSE 56150
// exit ;
56148: GO 74541
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56150: LD_VAR 0 1
56154: PUSH
56155: LD_INT 6
56157: PUSH
56158: LD_INT 7
56160: PUSH
56161: LD_INT 8
56163: PUSH
56164: LD_INT 13
56166: PUSH
56167: LD_INT 12
56169: PUSH
56170: LD_INT 15
56172: PUSH
56173: LD_INT 11
56175: PUSH
56176: LD_INT 14
56178: PUSH
56179: LD_INT 10
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: IN
56193: IFFALSE 56203
// btype = b_lab ;
56195: LD_ADDR_VAR 0 1
56199: PUSH
56200: LD_INT 6
56202: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56203: LD_VAR 0 6
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: LIST
56221: IN
56222: NOT
56223: PUSH
56224: LD_VAR 0 1
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: LD_INT 3
56240: PUSH
56241: LD_INT 6
56243: PUSH
56244: LD_INT 36
56246: PUSH
56247: LD_INT 4
56249: PUSH
56250: LD_INT 5
56252: PUSH
56253: LD_INT 31
56255: PUSH
56256: LD_INT 32
56258: PUSH
56259: LD_INT 33
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: IN
56275: NOT
56276: PUSH
56277: LD_VAR 0 6
56281: PUSH
56282: LD_INT 1
56284: EQUAL
56285: AND
56286: OR
56287: PUSH
56288: LD_VAR 0 1
56292: PUSH
56293: LD_INT 2
56295: PUSH
56296: LD_INT 3
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: IN
56303: NOT
56304: PUSH
56305: LD_VAR 0 6
56309: PUSH
56310: LD_INT 2
56312: EQUAL
56313: AND
56314: OR
56315: IFFALSE 56325
// mode = 0 ;
56317: LD_ADDR_VAR 0 6
56321: PUSH
56322: LD_INT 0
56324: ST_TO_ADDR
// case mode of 0 :
56325: LD_VAR 0 6
56329: PUSH
56330: LD_INT 0
56332: DOUBLE
56333: EQUAL
56334: IFTRUE 56338
56336: GO 67791
56338: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56339: LD_ADDR_VAR 0 11
56343: PUSH
56344: LD_INT 0
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: LD_INT 1
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: NEG
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: LD_INT 2
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: LD_INT 2
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: LD_INT 2
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: LD_INT 2
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: LD_INT 3
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: LD_INT 3
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56532: LD_ADDR_VAR 0 12
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: LD_INT 1
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: LD_INT 0
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: LD_INT 1
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: NEG
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 2
56655: NEG
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 2
56678: NEG
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 3
56689: NEG
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 3
56700: NEG
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56728: LD_ADDR_VAR 0 13
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 0
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: LD_INT 1
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: LD_INT 2
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 2
56821: PUSH
56822: LD_INT 1
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: LD_INT 2
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: LD_INT 2
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 2
56851: NEG
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: LD_INT 2
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: LD_INT 3
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 3
56887: NEG
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 3
56899: NEG
56900: PUSH
56901: LD_INT 3
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56927: LD_ADDR_VAR 0 14
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: NEG
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: LD_INT 2
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: LD_INT 2
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: LD_INT 3
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: LD_INT 3
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: LD_INT 2
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57123: LD_ADDR_VAR 0 15
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: LD_INT 1
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 1
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 2
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 2
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 2
57246: NEG
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 2
57257: NEG
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 2
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 3
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 3
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57316: LD_ADDR_VAR 0 16
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 2
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 2
57419: PUSH
57420: LD_INT 2
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: LD_INT 2
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 2
57451: NEG
57452: PUSH
57453: LD_INT 2
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 3
57463: PUSH
57464: LD_INT 2
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 3
57473: PUSH
57474: LD_INT 3
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 2
57483: PUSH
57484: LD_INT 3
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57509: LD_ADDR_VAR 0 17
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: LD_INT 2
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: LD_INT 2
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 2
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 1
57654: PUSH
57655: LD_INT 2
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: LD_INT 2
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 2
57708: NEG
57709: PUSH
57710: LD_INT 2
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57739: LD_ADDR_VAR 0 18
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: LD_INT 0
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: NEG
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: LD_INT 2
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: LD_INT 2
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 1
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 2
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 2
57864: PUSH
57865: LD_INT 1
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: LD_INT 2
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: LD_INT 2
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 2
57915: NEG
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 2
57926: NEG
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 2
57938: NEG
57939: PUSH
57940: LD_INT 2
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57969: LD_ADDR_VAR 0 19
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: NEG
58039: PUSH
58040: LD_INT 1
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: LD_INT 2
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: LD_INT 2
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 2
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 2
58104: PUSH
58105: LD_INT 2
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: PUSH
58115: LD_INT 2
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: LD_INT 2
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 1
58134: NEG
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 2
58145: NEG
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 2
58156: NEG
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 2
58168: NEG
58169: PUSH
58170: LD_INT 2
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58199: LD_ADDR_VAR 0 20
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: LD_INT 0
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: LD_INT 1
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 1
58280: NEG
58281: PUSH
58282: LD_INT 2
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: LD_INT 2
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 2
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 2
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 2
58334: PUSH
58335: LD_INT 2
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: PUSH
58345: LD_INT 2
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: LD_INT 2
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 1
58364: NEG
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 2
58386: NEG
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 2
58398: NEG
58399: PUSH
58400: LD_INT 2
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58429: LD_ADDR_VAR 0 21
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: NEG
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: LD_INT 2
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: LD_INT 2
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 2
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 2
58564: PUSH
58565: LD_INT 2
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: PUSH
58575: LD_INT 2
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: LD_INT 2
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 1
58594: NEG
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 2
58605: NEG
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 2
58616: NEG
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 2
58628: NEG
58629: PUSH
58630: LD_INT 2
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58659: LD_ADDR_VAR 0 22
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: NEG
58741: PUSH
58742: LD_INT 2
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: LD_INT 2
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: LD_INT 2
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: LD_INT 2
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: LD_INT 1
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 2
58835: NEG
58836: PUSH
58837: LD_INT 0
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 2
58846: NEG
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 2
58858: NEG
58859: PUSH
58860: LD_INT 2
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58889: LD_ADDR_VAR 0 23
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: LD_INT 0
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: LD_INT 1
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 0
58937: PUSH
58938: LD_INT 1
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 1
58947: NEG
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 1
58958: NEG
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: NEG
58971: PUSH
58972: LD_INT 2
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 0
58982: PUSH
58983: LD_INT 2
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 2
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 2
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 2
59024: PUSH
59025: LD_INT 2
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 1
59034: PUSH
59035: LD_INT 2
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: LD_INT 2
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: NEG
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 2
59065: NEG
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 2
59076: NEG
59077: PUSH
59078: LD_INT 1
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 2
59088: NEG
59089: PUSH
59090: LD_INT 2
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: LD_INT 3
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 1
59112: NEG
59113: PUSH
59114: LD_INT 3
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 1
59124: PUSH
59125: LD_INT 2
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 2
59135: PUSH
59136: LD_INT 1
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59169: LD_ADDR_VAR 0 24
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 1
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: NEG
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: LD_INT 2
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: LD_INT 2
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 1
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 2
59284: PUSH
59285: LD_INT 0
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 2
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 2
59304: PUSH
59305: LD_INT 2
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 1
59314: PUSH
59315: LD_INT 2
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: NEG
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: NEG
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 2
59356: NEG
59357: PUSH
59358: LD_INT 1
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 2
59368: NEG
59369: PUSH
59370: LD_INT 2
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: LD_INT 2
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 2
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 3
59402: PUSH
59403: LD_INT 1
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 3
59412: PUSH
59413: LD_INT 2
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59445: LD_ADDR_VAR 0 25
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: LD_INT 1
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: LD_INT 1
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: LD_INT 2
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: LD_INT 2
59541: NEG
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 1
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 2
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 2
59570: PUSH
59571: LD_INT 1
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 2
59580: PUSH
59581: LD_INT 2
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 1
59590: PUSH
59591: LD_INT 2
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: LD_INT 2
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 1
59610: NEG
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 2
59621: NEG
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 2
59632: NEG
59633: PUSH
59634: LD_INT 1
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 2
59644: NEG
59645: PUSH
59646: LD_INT 2
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 3
59656: PUSH
59657: LD_INT 1
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 3
59666: PUSH
59667: LD_INT 2
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 2
59676: PUSH
59677: LD_INT 3
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: LD_INT 3
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59719: LD_ADDR_VAR 0 26
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: LD_INT 0
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: LD_INT 1
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 1
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: LD_INT 1
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: NEG
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: PUSH
59802: LD_INT 2
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: LD_INT 2
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 2
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 2
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: LD_INT 2
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: PUSH
59865: LD_INT 2
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: LD_INT 2
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 2
59895: NEG
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: LD_INT 1
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 2
59918: NEG
59919: PUSH
59920: LD_INT 2
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 2
59930: PUSH
59931: LD_INT 3
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: LD_INT 3
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 1
59950: NEG
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 2
59961: NEG
59962: PUSH
59963: LD_INT 1
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59995: LD_ADDR_VAR 0 27
59999: PUSH
60000: LD_INT 0
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: LD_INT 0
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: LD_INT 1
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 0
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 1
60064: NEG
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 1
60076: NEG
60077: PUSH
60078: LD_INT 2
60080: NEG
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 0
60088: PUSH
60089: LD_INT 2
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 1
60099: PUSH
60100: LD_INT 1
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 2
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 2
60120: PUSH
60121: LD_INT 1
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 2
60130: PUSH
60131: LD_INT 2
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 1
60140: PUSH
60141: LD_INT 2
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: LD_INT 2
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 2
60171: NEG
60172: PUSH
60173: LD_INT 0
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 2
60182: NEG
60183: PUSH
60184: LD_INT 1
60186: NEG
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 2
60194: NEG
60195: PUSH
60196: LD_INT 2
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 1
60206: NEG
60207: PUSH
60208: LD_INT 2
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 2
60217: NEG
60218: PUSH
60219: LD_INT 1
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 3
60228: NEG
60229: PUSH
60230: LD_INT 1
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 3
60240: NEG
60241: PUSH
60242: LD_INT 2
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60275: LD_ADDR_VAR 0 28
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 0
60292: PUSH
60293: LD_INT 1
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 1
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: LD_INT 1
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: LD_INT 1
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 1
60333: NEG
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 1
60356: NEG
60357: PUSH
60358: LD_INT 2
60360: NEG
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: LD_INT 2
60371: NEG
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 1
60379: PUSH
60380: LD_INT 1
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 2
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 2
60400: PUSH
60401: LD_INT 1
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 2
60410: PUSH
60411: LD_INT 2
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: PUSH
60421: LD_INT 2
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: LD_INT 2
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 1
60440: NEG
60441: PUSH
60442: LD_INT 1
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 2
60451: NEG
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 2
60462: NEG
60463: PUSH
60464: LD_INT 1
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 2
60474: NEG
60475: PUSH
60476: LD_INT 2
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 2
60486: NEG
60487: PUSH
60488: LD_INT 3
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 1
60498: NEG
60499: PUSH
60500: LD_INT 3
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 3
60510: NEG
60511: PUSH
60512: LD_INT 1
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 3
60522: NEG
60523: PUSH
60524: LD_INT 2
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60557: LD_ADDR_VAR 0 29
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 1
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: LD_INT 1
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 1
60615: NEG
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: LD_INT 1
60630: NEG
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: LD_INT 2
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 0
60650: PUSH
60651: LD_INT 2
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 1
60661: PUSH
60662: LD_INT 1
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 2
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 2
60682: PUSH
60683: LD_INT 1
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: LD_INT 2
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 0
60702: PUSH
60703: LD_INT 2
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 1
60712: NEG
60713: PUSH
60714: LD_INT 1
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 2
60723: NEG
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 2
60735: NEG
60736: PUSH
60737: LD_INT 2
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 2
60747: NEG
60748: PUSH
60749: LD_INT 3
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 2
60759: PUSH
60760: LD_INT 1
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 3
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 1
60780: PUSH
60781: LD_INT 3
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: LD_INT 2
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 3
60801: NEG
60802: PUSH
60803: LD_INT 2
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60836: LD_ADDR_VAR 0 30
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 1
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 1
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: LD_INT 1
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 1
60894: NEG
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: LD_INT 1
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 1
60917: NEG
60918: PUSH
60919: LD_INT 2
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: LD_INT 2
60932: NEG
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 1
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 2
60951: PUSH
60952: LD_INT 0
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 2
60961: PUSH
60962: LD_INT 1
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 2
60971: PUSH
60972: LD_INT 2
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 1
60981: PUSH
60982: LD_INT 2
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: LD_INT 1
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 2
61002: NEG
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 2
61013: NEG
61014: PUSH
61015: LD_INT 1
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 1
61025: NEG
61026: PUSH
61027: LD_INT 3
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: LD_INT 2
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 3
61048: PUSH
61049: LD_INT 2
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 2
61058: PUSH
61059: LD_INT 3
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 2
61068: NEG
61069: PUSH
61070: LD_INT 1
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 3
61079: NEG
61080: PUSH
61081: LD_INT 1
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61114: LD_ADDR_VAR 0 31
61118: PUSH
61119: LD_INT 0
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: LD_INT 1
61134: NEG
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 1
61142: PUSH
61143: LD_INT 0
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: LD_INT 1
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: LD_INT 1
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 1
61172: NEG
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: NEG
61196: PUSH
61197: LD_INT 2
61199: NEG
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: LD_INT 1
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 2
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 2
61228: PUSH
61229: LD_INT 1
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 2
61238: PUSH
61239: LD_INT 2
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: PUSH
61249: LD_INT 2
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: LD_INT 2
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: LD_INT 1
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 2
61279: NEG
61280: PUSH
61281: LD_INT 1
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 2
61291: NEG
61292: PUSH
61293: LD_INT 2
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 2
61303: NEG
61304: PUSH
61305: LD_INT 3
61307: NEG
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: LD_INT 1
61318: NEG
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 3
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: LD_INT 3
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: LD_INT 2
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 3
61357: NEG
61358: PUSH
61359: LD_INT 2
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61392: LD_ADDR_VAR 0 32
61396: PUSH
61397: LD_INT 0
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: PUSH
61431: LD_INT 1
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: LD_INT 1
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: LD_INT 1
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: LD_INT 2
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: LD_INT 2
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 1
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 2
61507: PUSH
61508: LD_INT 1
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 2
61517: PUSH
61518: LD_INT 2
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 1
61527: PUSH
61528: LD_INT 2
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 0
61537: PUSH
61538: LD_INT 2
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 1
61547: NEG
61548: PUSH
61549: LD_INT 1
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 2
61558: NEG
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 2
61569: NEG
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 1
61581: NEG
61582: PUSH
61583: LD_INT 3
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: LD_INT 2
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 3
61604: PUSH
61605: LD_INT 2
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 2
61614: PUSH
61615: LD_INT 3
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 2
61624: NEG
61625: PUSH
61626: LD_INT 1
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 3
61635: NEG
61636: PUSH
61637: LD_INT 1
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61670: LD_ADDR_VAR 0 33
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: LD_INT 1
61690: NEG
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 1
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 1
61708: PUSH
61709: LD_INT 1
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 0
61718: PUSH
61719: LD_INT 1
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 1
61739: NEG
61740: PUSH
61741: LD_INT 1
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: NEG
61752: PUSH
61753: LD_INT 2
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 2
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 2
61784: PUSH
61785: LD_INT 1
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 1
61794: PUSH
61795: LD_INT 2
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 0
61804: PUSH
61805: LD_INT 2
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 1
61814: NEG
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 2
61825: NEG
61826: PUSH
61827: LD_INT 0
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 2
61836: NEG
61837: PUSH
61838: LD_INT 1
61840: NEG
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 2
61848: NEG
61849: PUSH
61850: LD_INT 2
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 2
61860: NEG
61861: PUSH
61862: LD_INT 3
61864: NEG
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 2
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 3
61883: PUSH
61884: LD_INT 1
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: PUSH
61894: LD_INT 3
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 1
61903: NEG
61904: PUSH
61905: LD_INT 2
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 3
61914: NEG
61915: PUSH
61916: LD_INT 2
61918: NEG
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61949: LD_ADDR_VAR 0 34
61953: PUSH
61954: LD_INT 0
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 0
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 1
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 1
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 0
61997: PUSH
61998: LD_INT 1
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 1
62007: NEG
62008: PUSH
62009: LD_INT 0
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 1
62018: NEG
62019: PUSH
62020: LD_INT 1
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 1
62030: NEG
62031: PUSH
62032: LD_INT 2
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 0
62042: PUSH
62043: LD_INT 2
62045: NEG
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 1
62053: PUSH
62054: LD_INT 1
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 2
62064: PUSH
62065: LD_INT 1
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 2
62074: PUSH
62075: LD_INT 2
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 1
62084: PUSH
62085: LD_INT 2
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: NEG
62095: PUSH
62096: LD_INT 1
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 2
62105: NEG
62106: PUSH
62107: LD_INT 0
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 2
62116: NEG
62117: PUSH
62118: LD_INT 1
62120: NEG
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 2
62128: NEG
62129: PUSH
62130: LD_INT 2
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: NEG
62141: PUSH
62142: LD_INT 3
62144: NEG
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 1
62152: PUSH
62153: LD_INT 2
62155: NEG
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 3
62163: PUSH
62164: LD_INT 2
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 2
62173: PUSH
62174: LD_INT 3
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 2
62183: NEG
62184: PUSH
62185: LD_INT 1
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 3
62194: NEG
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62229: LD_ADDR_VAR 0 35
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: LD_INT 0
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 1
62287: NEG
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 1
62298: NEG
62299: PUSH
62300: LD_INT 1
62302: NEG
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 2
62310: PUSH
62311: LD_INT 1
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 2
62320: NEG
62321: PUSH
62322: LD_INT 1
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62341: LD_ADDR_VAR 0 36
62345: PUSH
62346: LD_INT 0
62348: PUSH
62349: LD_INT 0
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: LD_INT 1
62361: NEG
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 1
62379: PUSH
62380: LD_INT 1
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: LD_INT 1
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: LD_INT 0
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 1
62410: NEG
62411: PUSH
62412: LD_INT 1
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: LD_INT 2
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 1
62434: PUSH
62435: LD_INT 2
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62453: LD_ADDR_VAR 0 37
62457: PUSH
62458: LD_INT 0
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 0
62470: PUSH
62471: LD_INT 1
62473: NEG
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 1
62481: PUSH
62482: LD_INT 0
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 1
62491: PUSH
62492: LD_INT 1
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 0
62501: PUSH
62502: LD_INT 1
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 1
62511: NEG
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 1
62522: NEG
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 1
62534: PUSH
62535: LD_INT 1
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: PUSH
62547: LD_INT 1
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62565: LD_ADDR_VAR 0 38
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: LD_INT 0
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: LD_INT 1
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 1
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 1
62603: PUSH
62604: LD_INT 1
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 0
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 1
62623: NEG
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 1
62634: NEG
62635: PUSH
62636: LD_INT 1
62638: NEG
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 2
62646: PUSH
62647: LD_INT 1
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 2
62656: NEG
62657: PUSH
62658: LD_INT 1
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62677: LD_ADDR_VAR 0 39
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 0
62694: PUSH
62695: LD_INT 1
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 1
62715: PUSH
62716: LD_INT 1
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 1
62735: NEG
62736: PUSH
62737: LD_INT 0
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 1
62746: NEG
62747: PUSH
62748: LD_INT 1
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: NEG
62759: PUSH
62760: LD_INT 2
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 1
62770: PUSH
62771: LD_INT 2
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62789: LD_ADDR_VAR 0 40
62793: PUSH
62794: LD_INT 0
62796: PUSH
62797: LD_INT 0
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 0
62806: PUSH
62807: LD_INT 1
62809: NEG
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 1
62817: PUSH
62818: LD_INT 0
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 1
62827: PUSH
62828: LD_INT 1
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 0
62837: PUSH
62838: LD_INT 1
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: LD_INT 0
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 1
62858: NEG
62859: PUSH
62860: LD_INT 1
62862: NEG
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 1
62870: PUSH
62871: LD_INT 1
62873: NEG
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: LD_INT 1
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62901: LD_ADDR_VAR 0 41
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: LD_INT 0
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 0
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: LD_INT 0
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: LD_INT 1
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 0
62949: PUSH
62950: LD_INT 1
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 1
62959: NEG
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 1
62970: NEG
62971: PUSH
62972: LD_INT 1
62974: NEG
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 1
62982: NEG
62983: PUSH
62984: LD_INT 2
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 1
62994: PUSH
62995: LD_INT 1
62997: NEG
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 2
63005: PUSH
63006: LD_INT 0
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 2
63015: PUSH
63016: LD_INT 1
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 2
63025: PUSH
63026: LD_INT 2
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: LD_INT 2
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 1
63045: NEG
63046: PUSH
63047: LD_INT 1
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 2
63056: NEG
63057: PUSH
63058: LD_INT 0
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 2
63067: NEG
63068: PUSH
63069: LD_INT 1
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 2
63079: NEG
63080: PUSH
63081: LD_INT 2
63083: NEG
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 2
63091: NEG
63092: PUSH
63093: LD_INT 3
63095: NEG
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 2
63103: PUSH
63104: LD_INT 1
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 3
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 3
63124: PUSH
63125: LD_INT 1
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 3
63134: PUSH
63135: LD_INT 2
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 3
63144: PUSH
63145: LD_INT 3
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 2
63154: PUSH
63155: LD_INT 3
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 2
63164: NEG
63165: PUSH
63166: LD_INT 1
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 3
63175: NEG
63176: PUSH
63177: LD_INT 0
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 3
63186: NEG
63187: PUSH
63188: LD_INT 1
63190: NEG
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 3
63198: NEG
63199: PUSH
63200: LD_INT 2
63202: NEG
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 3
63210: NEG
63211: PUSH
63212: LD_INT 3
63214: NEG
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63251: LD_ADDR_VAR 0 42
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: LD_INT 0
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 0
63268: PUSH
63269: LD_INT 1
63271: NEG
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 1
63279: PUSH
63280: LD_INT 0
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 1
63289: PUSH
63290: LD_INT 1
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 0
63299: PUSH
63300: LD_INT 1
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 1
63309: NEG
63310: PUSH
63311: LD_INT 0
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 1
63320: NEG
63321: PUSH
63322: LD_INT 1
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 1
63332: NEG
63333: PUSH
63334: LD_INT 2
63336: NEG
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 0
63344: PUSH
63345: LD_INT 2
63347: NEG
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 1
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 2
63366: PUSH
63367: LD_INT 1
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 2
63376: PUSH
63377: LD_INT 2
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 1
63386: PUSH
63387: LD_INT 2
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 0
63396: PUSH
63397: LD_INT 2
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: LD_INT 1
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 2
63417: NEG
63418: PUSH
63419: LD_INT 1
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 2
63429: NEG
63430: PUSH
63431: LD_INT 2
63433: NEG
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 2
63441: NEG
63442: PUSH
63443: LD_INT 3
63445: NEG
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: LD_INT 3
63457: NEG
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: LD_INT 3
63468: NEG
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 1
63476: PUSH
63477: LD_INT 2
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 3
63487: PUSH
63488: LD_INT 2
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 3
63497: PUSH
63498: LD_INT 3
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 2
63507: PUSH
63508: LD_INT 3
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: PUSH
63518: LD_INT 3
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: LD_INT 3
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 1
63537: NEG
63538: PUSH
63539: LD_INT 2
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 3
63548: NEG
63549: PUSH
63550: LD_INT 2
63552: NEG
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 3
63560: NEG
63561: PUSH
63562: LD_INT 3
63564: NEG
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63601: LD_ADDR_VAR 0 43
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: LD_INT 1
63621: NEG
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 1
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 1
63639: PUSH
63640: LD_INT 1
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 0
63649: PUSH
63650: LD_INT 1
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 1
63659: NEG
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: NEG
63671: PUSH
63672: LD_INT 1
63674: NEG
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 1
63682: NEG
63683: PUSH
63684: LD_INT 2
63686: NEG
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 0
63694: PUSH
63695: LD_INT 2
63697: NEG
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 1
63705: PUSH
63706: LD_INT 1
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 2
63716: PUSH
63717: LD_INT 0
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 2
63726: PUSH
63727: LD_INT 1
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 1
63736: PUSH
63737: LD_INT 2
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 0
63746: PUSH
63747: LD_INT 2
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 1
63756: NEG
63757: PUSH
63758: LD_INT 1
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 2
63767: NEG
63768: PUSH
63769: LD_INT 0
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 2
63778: NEG
63779: PUSH
63780: LD_INT 1
63782: NEG
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: LD_INT 3
63794: NEG
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 0
63802: PUSH
63803: LD_INT 3
63805: NEG
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: LD_INT 2
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 2
63824: PUSH
63825: LD_INT 1
63827: NEG
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 3
63835: PUSH
63836: LD_INT 0
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 3
63845: PUSH
63846: LD_INT 1
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 1
63855: PUSH
63856: LD_INT 3
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: LD_INT 3
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 1
63875: NEG
63876: PUSH
63877: LD_INT 2
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 2
63886: NEG
63887: PUSH
63888: LD_INT 1
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 3
63897: NEG
63898: PUSH
63899: LD_INT 0
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 3
63908: NEG
63909: PUSH
63910: LD_INT 1
63912: NEG
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63949: LD_ADDR_VAR 0 44
63953: PUSH
63954: LD_INT 0
63956: PUSH
63957: LD_INT 0
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 0
63966: PUSH
63967: LD_INT 1
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 1
63977: PUSH
63978: LD_INT 0
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 1
63987: PUSH
63988: LD_INT 1
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 1
64007: NEG
64008: PUSH
64009: LD_INT 0
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 1
64018: NEG
64019: PUSH
64020: LD_INT 1
64022: NEG
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 1
64030: NEG
64031: PUSH
64032: LD_INT 2
64034: NEG
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: LD_INT 1
64045: NEG
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 2
64053: PUSH
64054: LD_INT 0
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 2
64063: PUSH
64064: LD_INT 1
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 2
64073: PUSH
64074: LD_INT 2
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 1
64083: PUSH
64084: LD_INT 2
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 2
64104: NEG
64105: PUSH
64106: LD_INT 0
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 2
64115: NEG
64116: PUSH
64117: LD_INT 1
64119: NEG
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 2
64127: NEG
64128: PUSH
64129: LD_INT 2
64131: NEG
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 2
64139: NEG
64140: PUSH
64141: LD_INT 3
64143: NEG
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 2
64151: PUSH
64152: LD_INT 1
64154: NEG
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 3
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 3
64172: PUSH
64173: LD_INT 1
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 3
64182: PUSH
64183: LD_INT 2
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 3
64192: PUSH
64193: LD_INT 3
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 2
64202: PUSH
64203: LD_INT 3
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 2
64212: NEG
64213: PUSH
64214: LD_INT 1
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 3
64223: NEG
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 3
64234: NEG
64235: PUSH
64236: LD_INT 1
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 3
64246: NEG
64247: PUSH
64248: LD_INT 2
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 3
64258: NEG
64259: PUSH
64260: LD_INT 3
64262: NEG
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64299: LD_ADDR_VAR 0 45
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: LD_INT 0
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 0
64316: PUSH
64317: LD_INT 1
64319: NEG
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 1
64327: PUSH
64328: LD_INT 0
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 1
64337: PUSH
64338: LD_INT 1
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 0
64347: PUSH
64348: LD_INT 1
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 1
64357: NEG
64358: PUSH
64359: LD_INT 0
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 1
64368: NEG
64369: PUSH
64370: LD_INT 1
64372: NEG
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 1
64380: NEG
64381: PUSH
64382: LD_INT 2
64384: NEG
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 0
64392: PUSH
64393: LD_INT 2
64395: NEG
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 1
64403: PUSH
64404: LD_INT 1
64406: NEG
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 2
64414: PUSH
64415: LD_INT 1
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 2
64424: PUSH
64425: LD_INT 2
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 1
64434: PUSH
64435: LD_INT 2
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 0
64444: PUSH
64445: LD_INT 2
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 1
64454: NEG
64455: PUSH
64456: LD_INT 1
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 2
64465: NEG
64466: PUSH
64467: LD_INT 1
64469: NEG
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 2
64477: NEG
64478: PUSH
64479: LD_INT 2
64481: NEG
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 2
64489: NEG
64490: PUSH
64491: LD_INT 3
64493: NEG
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: NEG
64502: PUSH
64503: LD_INT 3
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: LD_INT 3
64516: NEG
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 1
64524: PUSH
64525: LD_INT 2
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 3
64535: PUSH
64536: LD_INT 2
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 3
64545: PUSH
64546: LD_INT 3
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 2
64555: PUSH
64556: LD_INT 3
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 1
64565: PUSH
64566: LD_INT 3
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 0
64575: PUSH
64576: LD_INT 3
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 1
64585: NEG
64586: PUSH
64587: LD_INT 2
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 3
64596: NEG
64597: PUSH
64598: LD_INT 2
64600: NEG
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 3
64608: NEG
64609: PUSH
64610: LD_INT 3
64612: NEG
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64649: LD_ADDR_VAR 0 46
64653: PUSH
64654: LD_INT 0
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 0
64666: PUSH
64667: LD_INT 1
64669: NEG
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 1
64677: PUSH
64678: LD_INT 0
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 1
64687: PUSH
64688: LD_INT 1
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 0
64697: PUSH
64698: LD_INT 1
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 1
64707: NEG
64708: PUSH
64709: LD_INT 0
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 1
64718: NEG
64719: PUSH
64720: LD_INT 1
64722: NEG
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 1
64730: NEG
64731: PUSH
64732: LD_INT 2
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 0
64742: PUSH
64743: LD_INT 2
64745: NEG
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 1
64753: PUSH
64754: LD_INT 1
64756: NEG
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 2
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 2
64774: PUSH
64775: LD_INT 1
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 1
64784: PUSH
64785: LD_INT 2
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 0
64794: PUSH
64795: LD_INT 2
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 1
64804: NEG
64805: PUSH
64806: LD_INT 1
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 2
64815: NEG
64816: PUSH
64817: LD_INT 0
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 2
64826: NEG
64827: PUSH
64828: LD_INT 1
64830: NEG
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 1
64838: NEG
64839: PUSH
64840: LD_INT 3
64842: NEG
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 0
64850: PUSH
64851: LD_INT 3
64853: NEG
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 1
64861: PUSH
64862: LD_INT 2
64864: NEG
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 2
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 3
64883: PUSH
64884: LD_INT 0
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 3
64893: PUSH
64894: LD_INT 1
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 1
64903: PUSH
64904: LD_INT 3
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: LD_INT 3
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 1
64923: NEG
64924: PUSH
64925: LD_INT 2
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 2
64934: NEG
64935: PUSH
64936: LD_INT 1
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 3
64945: NEG
64946: PUSH
64947: LD_INT 0
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 3
64956: NEG
64957: PUSH
64958: LD_INT 1
64960: NEG
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64997: LD_ADDR_VAR 0 47
65001: PUSH
65002: LD_INT 0
65004: PUSH
65005: LD_INT 0
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: LD_INT 1
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 1
65025: PUSH
65026: LD_INT 0
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 1
65035: PUSH
65036: LD_INT 1
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 0
65045: PUSH
65046: LD_INT 1
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 1
65055: NEG
65056: PUSH
65057: LD_INT 0
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 1
65066: NEG
65067: PUSH
65068: LD_INT 1
65070: NEG
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 1
65078: NEG
65079: PUSH
65080: LD_INT 2
65082: NEG
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 0
65090: PUSH
65091: LD_INT 2
65093: NEG
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 1
65101: PUSH
65102: LD_INT 1
65104: NEG
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 2
65112: NEG
65113: PUSH
65114: LD_INT 1
65116: NEG
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 2
65124: NEG
65125: PUSH
65126: LD_INT 2
65128: NEG
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65148: LD_ADDR_VAR 0 48
65152: PUSH
65153: LD_INT 0
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 0
65165: PUSH
65166: LD_INT 1
65168: NEG
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 1
65176: PUSH
65177: LD_INT 0
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 1
65186: PUSH
65187: LD_INT 1
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 0
65196: PUSH
65197: LD_INT 1
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 1
65206: NEG
65207: PUSH
65208: LD_INT 0
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 1
65217: NEG
65218: PUSH
65219: LD_INT 1
65221: NEG
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 1
65229: NEG
65230: PUSH
65231: LD_INT 2
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 0
65241: PUSH
65242: LD_INT 2
65244: NEG
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 1
65252: PUSH
65253: LD_INT 1
65255: NEG
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 2
65263: PUSH
65264: LD_INT 0
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 2
65273: PUSH
65274: LD_INT 1
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65295: LD_ADDR_VAR 0 49
65299: PUSH
65300: LD_INT 0
65302: PUSH
65303: LD_INT 0
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: LD_INT 1
65315: NEG
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 1
65323: PUSH
65324: LD_INT 0
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 1
65333: PUSH
65334: LD_INT 1
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 0
65343: PUSH
65344: LD_INT 1
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 1
65353: NEG
65354: PUSH
65355: LD_INT 0
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 1
65364: NEG
65365: PUSH
65366: LD_INT 1
65368: NEG
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 1
65376: PUSH
65377: LD_INT 1
65379: NEG
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 2
65387: PUSH
65388: LD_INT 0
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 2
65397: PUSH
65398: LD_INT 1
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 2
65407: PUSH
65408: LD_INT 2
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 1
65417: PUSH
65418: LD_INT 2
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65439: LD_ADDR_VAR 0 50
65443: PUSH
65444: LD_INT 0
65446: PUSH
65447: LD_INT 0
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 0
65456: PUSH
65457: LD_INT 1
65459: NEG
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 1
65467: PUSH
65468: LD_INT 0
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 1
65477: PUSH
65478: LD_INT 1
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 0
65487: PUSH
65488: LD_INT 1
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 1
65497: NEG
65498: PUSH
65499: LD_INT 0
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 1
65508: NEG
65509: PUSH
65510: LD_INT 1
65512: NEG
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 2
65520: PUSH
65521: LD_INT 1
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 2
65530: PUSH
65531: LD_INT 2
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 1
65540: PUSH
65541: LD_INT 2
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 0
65550: PUSH
65551: LD_INT 2
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 1
65560: NEG
65561: PUSH
65562: LD_INT 1
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65583: LD_ADDR_VAR 0 51
65587: PUSH
65588: LD_INT 0
65590: PUSH
65591: LD_INT 0
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 0
65600: PUSH
65601: LD_INT 1
65603: NEG
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 1
65611: PUSH
65612: LD_INT 0
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: LD_INT 1
65621: PUSH
65622: LD_INT 1
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 0
65631: PUSH
65632: LD_INT 1
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 1
65641: NEG
65642: PUSH
65643: LD_INT 0
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 1
65652: NEG
65653: PUSH
65654: LD_INT 1
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 1
65664: PUSH
65665: LD_INT 2
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 0
65674: PUSH
65675: LD_INT 2
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 1
65684: NEG
65685: PUSH
65686: LD_INT 1
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 2
65695: NEG
65696: PUSH
65697: LD_INT 0
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 2
65706: NEG
65707: PUSH
65708: LD_INT 1
65710: NEG
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65730: LD_ADDR_VAR 0 52
65734: PUSH
65735: LD_INT 0
65737: PUSH
65738: LD_INT 0
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 0
65747: PUSH
65748: LD_INT 1
65750: NEG
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 1
65758: PUSH
65759: LD_INT 0
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 1
65768: PUSH
65769: LD_INT 1
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 0
65778: PUSH
65779: LD_INT 1
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 1
65788: NEG
65789: PUSH
65790: LD_INT 0
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 1
65799: NEG
65800: PUSH
65801: LD_INT 1
65803: NEG
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 1
65811: NEG
65812: PUSH
65813: LD_INT 2
65815: NEG
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 1
65823: NEG
65824: PUSH
65825: LD_INT 1
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 2
65834: NEG
65835: PUSH
65836: LD_INT 0
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 2
65845: NEG
65846: PUSH
65847: LD_INT 1
65849: NEG
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 2
65857: NEG
65858: PUSH
65859: LD_INT 2
65861: NEG
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65881: LD_ADDR_VAR 0 53
65885: PUSH
65886: LD_INT 0
65888: PUSH
65889: LD_INT 0
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 0
65898: PUSH
65899: LD_INT 1
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 1
65909: PUSH
65910: LD_INT 0
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 1
65919: PUSH
65920: LD_INT 1
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 0
65929: PUSH
65930: LD_INT 1
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 1
65939: NEG
65940: PUSH
65941: LD_INT 0
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 1
65950: NEG
65951: PUSH
65952: LD_INT 1
65954: NEG
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 1
65962: NEG
65963: PUSH
65964: LD_INT 2
65966: NEG
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 0
65974: PUSH
65975: LD_INT 2
65977: NEG
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 1
65985: PUSH
65986: LD_INT 1
65988: NEG
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 2
65996: PUSH
65997: LD_INT 0
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 2
66006: PUSH
66007: LD_INT 1
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 2
66016: PUSH
66017: LD_INT 2
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 1
66026: PUSH
66027: LD_INT 2
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 0
66036: PUSH
66037: LD_INT 2
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 1
66046: NEG
66047: PUSH
66048: LD_INT 1
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 2
66057: NEG
66058: PUSH
66059: LD_INT 0
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 2
66068: NEG
66069: PUSH
66070: LD_INT 1
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 2
66080: NEG
66081: PUSH
66082: LD_INT 2
66084: NEG
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66111: LD_ADDR_VAR 0 54
66115: PUSH
66116: LD_INT 0
66118: PUSH
66119: LD_INT 0
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 0
66128: PUSH
66129: LD_INT 1
66131: NEG
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 1
66139: PUSH
66140: LD_INT 0
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 1
66149: PUSH
66150: LD_INT 1
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 0
66159: PUSH
66160: LD_INT 1
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 1
66169: NEG
66170: PUSH
66171: LD_INT 0
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 1
66180: NEG
66181: PUSH
66182: LD_INT 1
66184: NEG
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 1
66192: NEG
66193: PUSH
66194: LD_INT 2
66196: NEG
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 0
66204: PUSH
66205: LD_INT 2
66207: NEG
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 1
66215: PUSH
66216: LD_INT 1
66218: NEG
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 2
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 2
66236: PUSH
66237: LD_INT 1
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 2
66246: PUSH
66247: LD_INT 2
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 1
66256: PUSH
66257: LD_INT 2
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 0
66266: PUSH
66267: LD_INT 2
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 1
66276: NEG
66277: PUSH
66278: LD_INT 1
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 2
66287: NEG
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 2
66298: NEG
66299: PUSH
66300: LD_INT 1
66302: NEG
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 2
66310: NEG
66311: PUSH
66312: LD_INT 2
66314: NEG
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66341: LD_ADDR_VAR 0 55
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: LD_INT 0
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 0
66358: PUSH
66359: LD_INT 1
66361: NEG
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 1
66369: PUSH
66370: LD_INT 0
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 1
66379: PUSH
66380: LD_INT 1
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 0
66389: PUSH
66390: LD_INT 1
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 1
66399: NEG
66400: PUSH
66401: LD_INT 0
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 1
66410: NEG
66411: PUSH
66412: LD_INT 1
66414: NEG
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 1
66422: NEG
66423: PUSH
66424: LD_INT 2
66426: NEG
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 0
66434: PUSH
66435: LD_INT 2
66437: NEG
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 1
66445: PUSH
66446: LD_INT 1
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 2
66456: PUSH
66457: LD_INT 0
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 2
66466: PUSH
66467: LD_INT 1
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 2
66476: PUSH
66477: LD_INT 2
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 1
66486: PUSH
66487: LD_INT 2
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 0
66496: PUSH
66497: LD_INT 2
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 1
66506: NEG
66507: PUSH
66508: LD_INT 1
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 2
66517: NEG
66518: PUSH
66519: LD_INT 0
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 2
66528: NEG
66529: PUSH
66530: LD_INT 1
66532: NEG
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 2
66540: NEG
66541: PUSH
66542: LD_INT 2
66544: NEG
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66571: LD_ADDR_VAR 0 56
66575: PUSH
66576: LD_INT 0
66578: PUSH
66579: LD_INT 0
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 0
66588: PUSH
66589: LD_INT 1
66591: NEG
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 1
66599: PUSH
66600: LD_INT 0
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 1
66609: PUSH
66610: LD_INT 1
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 0
66619: PUSH
66620: LD_INT 1
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 1
66629: NEG
66630: PUSH
66631: LD_INT 0
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 1
66640: NEG
66641: PUSH
66642: LD_INT 1
66644: NEG
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 1
66652: NEG
66653: PUSH
66654: LD_INT 2
66656: NEG
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: LD_INT 2
66667: NEG
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 1
66675: PUSH
66676: LD_INT 1
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 2
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 2
66696: PUSH
66697: LD_INT 1
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 2
66706: PUSH
66707: LD_INT 2
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 1
66716: PUSH
66717: LD_INT 2
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: LD_INT 2
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 1
66736: NEG
66737: PUSH
66738: LD_INT 1
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 2
66747: NEG
66748: PUSH
66749: LD_INT 0
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 2
66758: NEG
66759: PUSH
66760: LD_INT 1
66762: NEG
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 2
66770: NEG
66771: PUSH
66772: LD_INT 2
66774: NEG
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66801: LD_ADDR_VAR 0 57
66805: PUSH
66806: LD_INT 0
66808: PUSH
66809: LD_INT 0
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 0
66818: PUSH
66819: LD_INT 1
66821: NEG
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 1
66829: PUSH
66830: LD_INT 0
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 1
66839: PUSH
66840: LD_INT 1
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 0
66849: PUSH
66850: LD_INT 1
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 1
66859: NEG
66860: PUSH
66861: LD_INT 0
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 1
66870: NEG
66871: PUSH
66872: LD_INT 1
66874: NEG
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 1
66882: NEG
66883: PUSH
66884: LD_INT 2
66886: NEG
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 0
66894: PUSH
66895: LD_INT 2
66897: NEG
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 1
66905: PUSH
66906: LD_INT 1
66908: NEG
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 2
66916: PUSH
66917: LD_INT 0
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 2
66926: PUSH
66927: LD_INT 1
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 2
66936: PUSH
66937: LD_INT 2
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 1
66946: PUSH
66947: LD_INT 2
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 0
66956: PUSH
66957: LD_INT 2
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 1
66966: NEG
66967: PUSH
66968: LD_INT 1
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 2
66977: NEG
66978: PUSH
66979: LD_INT 0
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 2
66988: NEG
66989: PUSH
66990: LD_INT 1
66992: NEG
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 2
67000: NEG
67001: PUSH
67002: LD_INT 2
67004: NEG
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67031: LD_ADDR_VAR 0 58
67035: PUSH
67036: LD_INT 0
67038: PUSH
67039: LD_INT 0
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 0
67048: PUSH
67049: LD_INT 1
67051: NEG
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 1
67059: PUSH
67060: LD_INT 0
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 1
67069: PUSH
67070: LD_INT 1
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 0
67079: PUSH
67080: LD_INT 1
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 1
67089: NEG
67090: PUSH
67091: LD_INT 0
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 1
67100: NEG
67101: PUSH
67102: LD_INT 1
67104: NEG
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 1
67112: NEG
67113: PUSH
67114: LD_INT 2
67116: NEG
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 0
67124: PUSH
67125: LD_INT 2
67127: NEG
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 1
67135: PUSH
67136: LD_INT 1
67138: NEG
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 2
67146: PUSH
67147: LD_INT 0
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 2
67156: PUSH
67157: LD_INT 1
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 2
67166: PUSH
67167: LD_INT 2
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 1
67176: PUSH
67177: LD_INT 2
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 0
67186: PUSH
67187: LD_INT 2
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 1
67196: NEG
67197: PUSH
67198: LD_INT 1
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 2
67207: NEG
67208: PUSH
67209: LD_INT 0
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 2
67218: NEG
67219: PUSH
67220: LD_INT 1
67222: NEG
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 2
67230: NEG
67231: PUSH
67232: LD_INT 2
67234: NEG
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67261: LD_ADDR_VAR 0 59
67265: PUSH
67266: LD_INT 0
67268: PUSH
67269: LD_INT 0
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 0
67278: PUSH
67279: LD_INT 1
67281: NEG
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 1
67289: PUSH
67290: LD_INT 0
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 1
67299: PUSH
67300: LD_INT 1
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 0
67309: PUSH
67310: LD_INT 1
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 1
67319: NEG
67320: PUSH
67321: LD_INT 0
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 1
67330: NEG
67331: PUSH
67332: LD_INT 1
67334: NEG
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67349: LD_ADDR_VAR 0 60
67353: PUSH
67354: LD_INT 0
67356: PUSH
67357: LD_INT 0
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 0
67366: PUSH
67367: LD_INT 1
67369: NEG
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 1
67377: PUSH
67378: LD_INT 0
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 1
67387: PUSH
67388: LD_INT 1
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 0
67397: PUSH
67398: LD_INT 1
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 1
67407: NEG
67408: PUSH
67409: LD_INT 0
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_INT 1
67418: NEG
67419: PUSH
67420: LD_INT 1
67422: NEG
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67437: LD_ADDR_VAR 0 61
67441: PUSH
67442: LD_INT 0
67444: PUSH
67445: LD_INT 0
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 0
67454: PUSH
67455: LD_INT 1
67457: NEG
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 1
67465: PUSH
67466: LD_INT 0
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 1
67475: PUSH
67476: LD_INT 1
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 0
67485: PUSH
67486: LD_INT 1
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 1
67495: NEG
67496: PUSH
67497: LD_INT 0
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 1
67506: NEG
67507: PUSH
67508: LD_INT 1
67510: NEG
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67525: LD_ADDR_VAR 0 62
67529: PUSH
67530: LD_INT 0
67532: PUSH
67533: LD_INT 0
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 0
67542: PUSH
67543: LD_INT 1
67545: NEG
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 1
67553: PUSH
67554: LD_INT 0
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 1
67563: PUSH
67564: LD_INT 1
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 0
67573: PUSH
67574: LD_INT 1
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 1
67583: NEG
67584: PUSH
67585: LD_INT 0
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 1
67594: NEG
67595: PUSH
67596: LD_INT 1
67598: NEG
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67613: LD_ADDR_VAR 0 63
67617: PUSH
67618: LD_INT 0
67620: PUSH
67621: LD_INT 0
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 0
67630: PUSH
67631: LD_INT 1
67633: NEG
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 1
67641: PUSH
67642: LD_INT 0
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 1
67651: PUSH
67652: LD_INT 1
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 0
67661: PUSH
67662: LD_INT 1
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 1
67671: NEG
67672: PUSH
67673: LD_INT 0
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 1
67682: NEG
67683: PUSH
67684: LD_INT 1
67686: NEG
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67701: LD_ADDR_VAR 0 64
67705: PUSH
67706: LD_INT 0
67708: PUSH
67709: LD_INT 0
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 0
67718: PUSH
67719: LD_INT 1
67721: NEG
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 1
67729: PUSH
67730: LD_INT 0
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 1
67739: PUSH
67740: LD_INT 1
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 0
67749: PUSH
67750: LD_INT 1
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 1
67759: NEG
67760: PUSH
67761: LD_INT 0
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 1
67770: NEG
67771: PUSH
67772: LD_INT 1
67774: NEG
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: ST_TO_ADDR
// end ; 1 :
67789: GO 73686
67791: LD_INT 1
67793: DOUBLE
67794: EQUAL
67795: IFTRUE 67799
67797: GO 70422
67799: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67800: LD_ADDR_VAR 0 11
67804: PUSH
67805: LD_INT 1
67807: NEG
67808: PUSH
67809: LD_INT 3
67811: NEG
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 0
67819: PUSH
67820: LD_INT 3
67822: NEG
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 1
67830: PUSH
67831: LD_INT 2
67833: NEG
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: LIST
67843: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67844: LD_ADDR_VAR 0 12
67848: PUSH
67849: LD_INT 2
67851: PUSH
67852: LD_INT 1
67854: NEG
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 3
67862: PUSH
67863: LD_INT 0
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 3
67872: PUSH
67873: LD_INT 1
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: LIST
67884: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67885: LD_ADDR_VAR 0 13
67889: PUSH
67890: LD_INT 3
67892: PUSH
67893: LD_INT 2
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 3
67902: PUSH
67903: LD_INT 3
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 2
67912: PUSH
67913: LD_INT 3
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: LIST
67924: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67925: LD_ADDR_VAR 0 14
67929: PUSH
67930: LD_INT 1
67932: PUSH
67933: LD_INT 3
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 0
67942: PUSH
67943: LD_INT 3
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 1
67952: NEG
67953: PUSH
67954: LD_INT 2
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: LIST
67965: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67966: LD_ADDR_VAR 0 15
67970: PUSH
67971: LD_INT 2
67973: NEG
67974: PUSH
67975: LD_INT 1
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 3
67984: NEG
67985: PUSH
67986: LD_INT 0
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 3
67995: NEG
67996: PUSH
67997: LD_INT 1
67999: NEG
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: LIST
68009: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68010: LD_ADDR_VAR 0 16
68014: PUSH
68015: LD_INT 2
68017: NEG
68018: PUSH
68019: LD_INT 3
68021: NEG
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 3
68029: NEG
68030: PUSH
68031: LD_INT 2
68033: NEG
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 3
68041: NEG
68042: PUSH
68043: LD_INT 3
68045: NEG
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: LIST
68055: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68056: LD_ADDR_VAR 0 17
68060: PUSH
68061: LD_INT 1
68063: NEG
68064: PUSH
68065: LD_INT 3
68067: NEG
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 0
68075: PUSH
68076: LD_INT 3
68078: NEG
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 1
68086: PUSH
68087: LD_INT 2
68089: NEG
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: LIST
68099: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68100: LD_ADDR_VAR 0 18
68104: PUSH
68105: LD_INT 2
68107: PUSH
68108: LD_INT 1
68110: NEG
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 3
68118: PUSH
68119: LD_INT 0
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 3
68128: PUSH
68129: LD_INT 1
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: LIST
68140: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68141: LD_ADDR_VAR 0 19
68145: PUSH
68146: LD_INT 3
68148: PUSH
68149: LD_INT 2
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 3
68158: PUSH
68159: LD_INT 3
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 2
68168: PUSH
68169: LD_INT 3
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: LIST
68180: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68181: LD_ADDR_VAR 0 20
68185: PUSH
68186: LD_INT 1
68188: PUSH
68189: LD_INT 3
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 0
68198: PUSH
68199: LD_INT 3
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 1
68208: NEG
68209: PUSH
68210: LD_INT 2
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: LIST
68221: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68222: LD_ADDR_VAR 0 21
68226: PUSH
68227: LD_INT 2
68229: NEG
68230: PUSH
68231: LD_INT 1
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 3
68240: NEG
68241: PUSH
68242: LD_INT 0
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 3
68251: NEG
68252: PUSH
68253: LD_INT 1
68255: NEG
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: LIST
68265: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68266: LD_ADDR_VAR 0 22
68270: PUSH
68271: LD_INT 2
68273: NEG
68274: PUSH
68275: LD_INT 3
68277: NEG
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 3
68285: NEG
68286: PUSH
68287: LD_INT 2
68289: NEG
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 3
68297: NEG
68298: PUSH
68299: LD_INT 3
68301: NEG
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: LIST
68311: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68312: LD_ADDR_VAR 0 23
68316: PUSH
68317: LD_INT 0
68319: PUSH
68320: LD_INT 3
68322: NEG
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 1
68330: NEG
68331: PUSH
68332: LD_INT 4
68334: NEG
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 1
68342: PUSH
68343: LD_INT 3
68345: NEG
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: LIST
68355: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68356: LD_ADDR_VAR 0 24
68360: PUSH
68361: LD_INT 3
68363: PUSH
68364: LD_INT 0
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 3
68373: PUSH
68374: LD_INT 1
68376: NEG
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 4
68384: PUSH
68385: LD_INT 1
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: LIST
68396: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68397: LD_ADDR_VAR 0 25
68401: PUSH
68402: LD_INT 3
68404: PUSH
68405: LD_INT 3
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 4
68414: PUSH
68415: LD_INT 3
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 3
68424: PUSH
68425: LD_INT 4
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: LIST
68436: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68437: LD_ADDR_VAR 0 26
68441: PUSH
68442: LD_INT 0
68444: PUSH
68445: LD_INT 3
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 1
68454: PUSH
68455: LD_INT 4
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: LD_INT 1
68464: NEG
68465: PUSH
68466: LD_INT 3
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: LIST
68477: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68478: LD_ADDR_VAR 0 27
68482: PUSH
68483: LD_INT 3
68485: NEG
68486: PUSH
68487: LD_INT 0
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 3
68496: NEG
68497: PUSH
68498: LD_INT 1
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 4
68507: NEG
68508: PUSH
68509: LD_INT 1
68511: NEG
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: LIST
68521: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68522: LD_ADDR_VAR 0 28
68526: PUSH
68527: LD_INT 3
68529: NEG
68530: PUSH
68531: LD_INT 3
68533: NEG
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 3
68541: NEG
68542: PUSH
68543: LD_INT 4
68545: NEG
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 4
68553: NEG
68554: PUSH
68555: LD_INT 3
68557: NEG
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: LIST
68567: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68568: LD_ADDR_VAR 0 29
68572: PUSH
68573: LD_INT 1
68575: NEG
68576: PUSH
68577: LD_INT 3
68579: NEG
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 0
68587: PUSH
68588: LD_INT 3
68590: NEG
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 1
68598: PUSH
68599: LD_INT 2
68601: NEG
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 1
68609: NEG
68610: PUSH
68611: LD_INT 4
68613: NEG
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 0
68621: PUSH
68622: LD_INT 4
68624: NEG
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 1
68632: PUSH
68633: LD_INT 3
68635: NEG
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 1
68643: NEG
68644: PUSH
68645: LD_INT 5
68647: NEG
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 0
68655: PUSH
68656: LD_INT 5
68658: NEG
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 1
68666: PUSH
68667: LD_INT 4
68669: NEG
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 1
68677: NEG
68678: PUSH
68679: LD_INT 6
68681: NEG
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: LD_INT 0
68689: PUSH
68690: LD_INT 6
68692: NEG
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 1
68700: PUSH
68701: LD_INT 5
68703: NEG
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68723: LD_ADDR_VAR 0 30
68727: PUSH
68728: LD_INT 2
68730: PUSH
68731: LD_INT 1
68733: NEG
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 3
68741: PUSH
68742: LD_INT 0
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 3
68751: PUSH
68752: LD_INT 1
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 3
68761: PUSH
68762: LD_INT 1
68764: NEG
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: LD_INT 4
68772: PUSH
68773: LD_INT 0
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 4
68782: PUSH
68783: LD_INT 1
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PUSH
68790: LD_INT 4
68792: PUSH
68793: LD_INT 1
68795: NEG
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 5
68803: PUSH
68804: LD_INT 0
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 5
68813: PUSH
68814: LD_INT 1
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 5
68823: PUSH
68824: LD_INT 1
68826: NEG
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 6
68834: PUSH
68835: LD_INT 0
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 6
68844: PUSH
68845: LD_INT 1
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68866: LD_ADDR_VAR 0 31
68870: PUSH
68871: LD_INT 3
68873: PUSH
68874: LD_INT 2
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 3
68883: PUSH
68884: LD_INT 3
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 2
68893: PUSH
68894: LD_INT 3
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: LD_INT 4
68903: PUSH
68904: LD_INT 3
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 4
68913: PUSH
68914: LD_INT 4
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 3
68923: PUSH
68924: LD_INT 4
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 5
68933: PUSH
68934: LD_INT 4
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: LD_INT 5
68943: PUSH
68944: LD_INT 5
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 4
68953: PUSH
68954: LD_INT 5
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 6
68963: PUSH
68964: LD_INT 5
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 6
68973: PUSH
68974: LD_INT 6
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 5
68983: PUSH
68984: LD_INT 6
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69005: LD_ADDR_VAR 0 32
69009: PUSH
69010: LD_INT 1
69012: PUSH
69013: LD_INT 3
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 0
69022: PUSH
69023: LD_INT 3
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 1
69032: NEG
69033: PUSH
69034: LD_INT 2
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: LD_INT 1
69043: PUSH
69044: LD_INT 4
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 0
69053: PUSH
69054: LD_INT 4
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 1
69063: NEG
69064: PUSH
69065: LD_INT 3
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 1
69074: PUSH
69075: LD_INT 5
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 0
69084: PUSH
69085: LD_INT 5
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 1
69094: NEG
69095: PUSH
69096: LD_INT 4
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 1
69105: PUSH
69106: LD_INT 6
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 0
69115: PUSH
69116: LD_INT 6
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 1
69125: NEG
69126: PUSH
69127: LD_INT 5
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69148: LD_ADDR_VAR 0 33
69152: PUSH
69153: LD_INT 2
69155: NEG
69156: PUSH
69157: LD_INT 1
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 3
69166: NEG
69167: PUSH
69168: LD_INT 0
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 3
69177: NEG
69178: PUSH
69179: LD_INT 1
69181: NEG
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 3
69189: NEG
69190: PUSH
69191: LD_INT 1
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PUSH
69198: LD_INT 4
69200: NEG
69201: PUSH
69202: LD_INT 0
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: LD_INT 4
69211: NEG
69212: PUSH
69213: LD_INT 1
69215: NEG
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: LD_INT 4
69223: NEG
69224: PUSH
69225: LD_INT 1
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 5
69234: NEG
69235: PUSH
69236: LD_INT 0
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 5
69245: NEG
69246: PUSH
69247: LD_INT 1
69249: NEG
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 5
69257: NEG
69258: PUSH
69259: LD_INT 1
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 6
69268: NEG
69269: PUSH
69270: LD_INT 0
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 6
69279: NEG
69280: PUSH
69281: LD_INT 1
69283: NEG
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69303: LD_ADDR_VAR 0 34
69307: PUSH
69308: LD_INT 2
69310: NEG
69311: PUSH
69312: LD_INT 3
69314: NEG
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 3
69322: NEG
69323: PUSH
69324: LD_INT 2
69326: NEG
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 3
69334: NEG
69335: PUSH
69336: LD_INT 3
69338: NEG
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 3
69346: NEG
69347: PUSH
69348: LD_INT 4
69350: NEG
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 4
69358: NEG
69359: PUSH
69360: LD_INT 3
69362: NEG
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 4
69370: NEG
69371: PUSH
69372: LD_INT 4
69374: NEG
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 4
69382: NEG
69383: PUSH
69384: LD_INT 5
69386: NEG
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 5
69394: NEG
69395: PUSH
69396: LD_INT 4
69398: NEG
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 5
69406: NEG
69407: PUSH
69408: LD_INT 5
69410: NEG
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 5
69418: NEG
69419: PUSH
69420: LD_INT 6
69422: NEG
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 6
69430: NEG
69431: PUSH
69432: LD_INT 5
69434: NEG
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 6
69442: NEG
69443: PUSH
69444: LD_INT 6
69446: NEG
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69466: LD_ADDR_VAR 0 41
69470: PUSH
69471: LD_INT 0
69473: PUSH
69474: LD_INT 2
69476: NEG
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 1
69484: NEG
69485: PUSH
69486: LD_INT 3
69488: NEG
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 1
69496: PUSH
69497: LD_INT 2
69499: NEG
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: LIST
69509: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69510: LD_ADDR_VAR 0 42
69514: PUSH
69515: LD_INT 2
69517: PUSH
69518: LD_INT 0
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 2
69527: PUSH
69528: LD_INT 1
69530: NEG
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 3
69538: PUSH
69539: LD_INT 1
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: LIST
69550: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69551: LD_ADDR_VAR 0 43
69555: PUSH
69556: LD_INT 2
69558: PUSH
69559: LD_INT 2
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 3
69568: PUSH
69569: LD_INT 2
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 2
69578: PUSH
69579: LD_INT 3
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: LIST
69590: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69591: LD_ADDR_VAR 0 44
69595: PUSH
69596: LD_INT 0
69598: PUSH
69599: LD_INT 2
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 1
69608: PUSH
69609: LD_INT 3
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 1
69618: NEG
69619: PUSH
69620: LD_INT 2
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: LIST
69631: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69632: LD_ADDR_VAR 0 45
69636: PUSH
69637: LD_INT 2
69639: NEG
69640: PUSH
69641: LD_INT 0
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 2
69650: NEG
69651: PUSH
69652: LD_INT 1
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: LD_INT 3
69661: NEG
69662: PUSH
69663: LD_INT 1
69665: NEG
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: LIST
69675: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69676: LD_ADDR_VAR 0 46
69680: PUSH
69681: LD_INT 2
69683: NEG
69684: PUSH
69685: LD_INT 2
69687: NEG
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 2
69695: NEG
69696: PUSH
69697: LD_INT 3
69699: NEG
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: LD_INT 3
69707: NEG
69708: PUSH
69709: LD_INT 2
69711: NEG
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: LIST
69721: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69722: LD_ADDR_VAR 0 47
69726: PUSH
69727: LD_INT 2
69729: NEG
69730: PUSH
69731: LD_INT 3
69733: NEG
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 1
69741: NEG
69742: PUSH
69743: LD_INT 3
69745: NEG
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69755: LD_ADDR_VAR 0 48
69759: PUSH
69760: LD_INT 1
69762: PUSH
69763: LD_INT 2
69765: NEG
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: LD_INT 2
69773: PUSH
69774: LD_INT 1
69776: NEG
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69786: LD_ADDR_VAR 0 49
69790: PUSH
69791: LD_INT 3
69793: PUSH
69794: LD_INT 1
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 3
69803: PUSH
69804: LD_INT 2
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69815: LD_ADDR_VAR 0 50
69819: PUSH
69820: LD_INT 2
69822: PUSH
69823: LD_INT 3
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 1
69832: PUSH
69833: LD_INT 3
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69844: LD_ADDR_VAR 0 51
69848: PUSH
69849: LD_INT 1
69851: NEG
69852: PUSH
69853: LD_INT 2
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 2
69862: NEG
69863: PUSH
69864: LD_INT 1
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69875: LD_ADDR_VAR 0 52
69879: PUSH
69880: LD_INT 3
69882: NEG
69883: PUSH
69884: LD_INT 1
69886: NEG
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 3
69894: NEG
69895: PUSH
69896: LD_INT 2
69898: NEG
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69908: LD_ADDR_VAR 0 53
69912: PUSH
69913: LD_INT 1
69915: NEG
69916: PUSH
69917: LD_INT 3
69919: NEG
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 0
69927: PUSH
69928: LD_INT 3
69930: NEG
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 1
69938: PUSH
69939: LD_INT 2
69941: NEG
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: LIST
69951: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69952: LD_ADDR_VAR 0 54
69956: PUSH
69957: LD_INT 2
69959: PUSH
69960: LD_INT 1
69962: NEG
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 3
69970: PUSH
69971: LD_INT 0
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 3
69980: PUSH
69981: LD_INT 1
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: LIST
69992: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69993: LD_ADDR_VAR 0 55
69997: PUSH
69998: LD_INT 3
70000: PUSH
70001: LD_INT 2
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 3
70010: PUSH
70011: LD_INT 3
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 2
70020: PUSH
70021: LD_INT 3
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: LIST
70032: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70033: LD_ADDR_VAR 0 56
70037: PUSH
70038: LD_INT 1
70040: PUSH
70041: LD_INT 3
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 0
70050: PUSH
70051: LD_INT 3
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 1
70060: NEG
70061: PUSH
70062: LD_INT 2
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: LIST
70073: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70074: LD_ADDR_VAR 0 57
70078: PUSH
70079: LD_INT 2
70081: NEG
70082: PUSH
70083: LD_INT 1
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 3
70092: NEG
70093: PUSH
70094: LD_INT 0
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 3
70103: NEG
70104: PUSH
70105: LD_INT 1
70107: NEG
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: LIST
70117: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70118: LD_ADDR_VAR 0 58
70122: PUSH
70123: LD_INT 2
70125: NEG
70126: PUSH
70127: LD_INT 3
70129: NEG
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: LD_INT 3
70137: NEG
70138: PUSH
70139: LD_INT 2
70141: NEG
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: LD_INT 3
70149: NEG
70150: PUSH
70151: LD_INT 3
70153: NEG
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: LIST
70163: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70164: LD_ADDR_VAR 0 59
70168: PUSH
70169: LD_INT 1
70171: NEG
70172: PUSH
70173: LD_INT 2
70175: NEG
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 0
70183: PUSH
70184: LD_INT 2
70186: NEG
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 1
70194: PUSH
70195: LD_INT 1
70197: NEG
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: LIST
70207: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70208: LD_ADDR_VAR 0 60
70212: PUSH
70213: LD_INT 1
70215: PUSH
70216: LD_INT 1
70218: NEG
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 2
70226: PUSH
70227: LD_INT 0
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 2
70236: PUSH
70237: LD_INT 1
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: LIST
70248: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70249: LD_ADDR_VAR 0 61
70253: PUSH
70254: LD_INT 2
70256: PUSH
70257: LD_INT 1
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PUSH
70264: LD_INT 2
70266: PUSH
70267: LD_INT 2
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 1
70276: PUSH
70277: LD_INT 2
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: LIST
70288: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70289: LD_ADDR_VAR 0 62
70293: PUSH
70294: LD_INT 1
70296: PUSH
70297: LD_INT 2
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 0
70306: PUSH
70307: LD_INT 2
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 1
70316: NEG
70317: PUSH
70318: LD_INT 1
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: LIST
70329: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70330: LD_ADDR_VAR 0 63
70334: PUSH
70335: LD_INT 1
70337: NEG
70338: PUSH
70339: LD_INT 1
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PUSH
70346: LD_INT 2
70348: NEG
70349: PUSH
70350: LD_INT 0
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 2
70359: NEG
70360: PUSH
70361: LD_INT 1
70363: NEG
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: LIST
70373: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70374: LD_ADDR_VAR 0 64
70378: PUSH
70379: LD_INT 1
70381: NEG
70382: PUSH
70383: LD_INT 2
70385: NEG
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 2
70393: NEG
70394: PUSH
70395: LD_INT 1
70397: NEG
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 2
70405: NEG
70406: PUSH
70407: LD_INT 2
70409: NEG
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: LIST
70419: ST_TO_ADDR
// end ; 2 :
70420: GO 73686
70422: LD_INT 2
70424: DOUBLE
70425: EQUAL
70426: IFTRUE 70430
70428: GO 73685
70430: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70431: LD_ADDR_VAR 0 29
70435: PUSH
70436: LD_INT 4
70438: PUSH
70439: LD_INT 0
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: LD_INT 4
70448: PUSH
70449: LD_INT 1
70451: NEG
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: LD_INT 5
70459: PUSH
70460: LD_INT 0
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 5
70469: PUSH
70470: LD_INT 1
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 4
70479: PUSH
70480: LD_INT 1
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 3
70489: PUSH
70490: LD_INT 0
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 3
70499: PUSH
70500: LD_INT 1
70502: NEG
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 3
70510: PUSH
70511: LD_INT 2
70513: NEG
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PUSH
70519: LD_INT 5
70521: PUSH
70522: LD_INT 2
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: PUSH
70529: LD_INT 3
70531: PUSH
70532: LD_INT 3
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PUSH
70539: LD_INT 3
70541: PUSH
70542: LD_INT 2
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 4
70551: PUSH
70552: LD_INT 3
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: PUSH
70559: LD_INT 4
70561: PUSH
70562: LD_INT 4
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: PUSH
70569: LD_INT 3
70571: PUSH
70572: LD_INT 4
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: LD_INT 2
70581: PUSH
70582: LD_INT 3
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 2
70591: PUSH
70592: LD_INT 2
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 4
70601: PUSH
70602: LD_INT 2
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 2
70611: PUSH
70612: LD_INT 4
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 0
70621: PUSH
70622: LD_INT 4
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: PUSH
70629: LD_INT 0
70631: PUSH
70632: LD_INT 3
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 1
70641: PUSH
70642: LD_INT 4
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: PUSH
70649: LD_INT 1
70651: PUSH
70652: LD_INT 5
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: PUSH
70659: LD_INT 0
70661: PUSH
70662: LD_INT 5
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 1
70671: NEG
70672: PUSH
70673: LD_INT 4
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 1
70682: NEG
70683: PUSH
70684: LD_INT 3
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 2
70693: PUSH
70694: LD_INT 5
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 2
70703: NEG
70704: PUSH
70705: LD_INT 3
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 3
70714: NEG
70715: PUSH
70716: LD_INT 0
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: PUSH
70723: LD_INT 3
70725: NEG
70726: PUSH
70727: LD_INT 1
70729: NEG
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PUSH
70735: LD_INT 2
70737: NEG
70738: PUSH
70739: LD_INT 0
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: PUSH
70746: LD_INT 2
70748: NEG
70749: PUSH
70750: LD_INT 1
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: PUSH
70757: LD_INT 3
70759: NEG
70760: PUSH
70761: LD_INT 1
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 4
70770: NEG
70771: PUSH
70772: LD_INT 0
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: LD_INT 4
70781: NEG
70782: PUSH
70783: LD_INT 1
70785: NEG
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 4
70793: NEG
70794: PUSH
70795: LD_INT 2
70797: NEG
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 2
70805: NEG
70806: PUSH
70807: LD_INT 2
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 4
70816: NEG
70817: PUSH
70818: LD_INT 4
70820: NEG
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: PUSH
70826: LD_INT 4
70828: NEG
70829: PUSH
70830: LD_INT 5
70832: NEG
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: LD_INT 3
70840: NEG
70841: PUSH
70842: LD_INT 4
70844: NEG
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 3
70852: NEG
70853: PUSH
70854: LD_INT 3
70856: NEG
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 4
70864: NEG
70865: PUSH
70866: LD_INT 3
70868: NEG
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 5
70876: NEG
70877: PUSH
70878: LD_INT 4
70880: NEG
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: LD_INT 5
70888: NEG
70889: PUSH
70890: LD_INT 5
70892: NEG
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: LD_INT 3
70900: NEG
70901: PUSH
70902: LD_INT 5
70904: NEG
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 5
70912: NEG
70913: PUSH
70914: LD_INT 3
70916: NEG
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: LIST
70944: LIST
70945: LIST
70946: LIST
70947: LIST
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70969: LD_ADDR_VAR 0 30
70973: PUSH
70974: LD_INT 4
70976: PUSH
70977: LD_INT 4
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PUSH
70984: LD_INT 4
70986: PUSH
70987: LD_INT 3
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: PUSH
70994: LD_INT 5
70996: PUSH
70997: LD_INT 4
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PUSH
71004: LD_INT 5
71006: PUSH
71007: LD_INT 5
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 4
71016: PUSH
71017: LD_INT 5
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 3
71026: PUSH
71027: LD_INT 4
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 3
71036: PUSH
71037: LD_INT 3
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 5
71046: PUSH
71047: LD_INT 3
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 3
71056: PUSH
71057: LD_INT 5
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PUSH
71064: LD_INT 0
71066: PUSH
71067: LD_INT 3
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: PUSH
71074: LD_INT 0
71076: PUSH
71077: LD_INT 2
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PUSH
71084: LD_INT 1
71086: PUSH
71087: LD_INT 3
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 1
71096: PUSH
71097: LD_INT 4
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 0
71106: PUSH
71107: LD_INT 4
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 1
71116: NEG
71117: PUSH
71118: LD_INT 3
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_INT 1
71127: NEG
71128: PUSH
71129: LD_INT 2
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 2
71138: PUSH
71139: LD_INT 4
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: LD_INT 2
71148: NEG
71149: PUSH
71150: LD_INT 2
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: LD_INT 4
71159: NEG
71160: PUSH
71161: LD_INT 0
71163: PUSH
71164: EMPTY
71165: LIST
71166: LIST
71167: PUSH
71168: LD_INT 4
71170: NEG
71171: PUSH
71172: LD_INT 1
71174: NEG
71175: PUSH
71176: EMPTY
71177: LIST
71178: LIST
71179: PUSH
71180: LD_INT 3
71182: NEG
71183: PUSH
71184: LD_INT 0
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PUSH
71191: LD_INT 3
71193: NEG
71194: PUSH
71195: LD_INT 1
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: PUSH
71202: LD_INT 4
71204: NEG
71205: PUSH
71206: LD_INT 1
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PUSH
71213: LD_INT 5
71215: NEG
71216: PUSH
71217: LD_INT 0
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 5
71226: NEG
71227: PUSH
71228: LD_INT 1
71230: NEG
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 5
71238: NEG
71239: PUSH
71240: LD_INT 2
71242: NEG
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: PUSH
71248: LD_INT 3
71250: NEG
71251: PUSH
71252: LD_INT 2
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: PUSH
71259: LD_INT 3
71261: NEG
71262: PUSH
71263: LD_INT 3
71265: NEG
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PUSH
71271: LD_INT 3
71273: NEG
71274: PUSH
71275: LD_INT 4
71277: NEG
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: PUSH
71283: LD_INT 2
71285: NEG
71286: PUSH
71287: LD_INT 3
71289: NEG
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 2
71297: NEG
71298: PUSH
71299: LD_INT 2
71301: NEG
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 3
71309: NEG
71310: PUSH
71311: LD_INT 2
71313: NEG
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: PUSH
71319: LD_INT 4
71321: NEG
71322: PUSH
71323: LD_INT 3
71325: NEG
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: PUSH
71331: LD_INT 4
71333: NEG
71334: PUSH
71335: LD_INT 4
71337: NEG
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: LD_INT 2
71345: NEG
71346: PUSH
71347: LD_INT 4
71349: NEG
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 4
71357: NEG
71358: PUSH
71359: LD_INT 2
71361: NEG
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: LD_INT 0
71369: PUSH
71370: LD_INT 4
71372: NEG
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 0
71380: PUSH
71381: LD_INT 5
71383: NEG
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 1
71391: PUSH
71392: LD_INT 4
71394: NEG
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PUSH
71400: LD_INT 1
71402: PUSH
71403: LD_INT 3
71405: NEG
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: PUSH
71411: LD_INT 0
71413: PUSH
71414: LD_INT 3
71416: NEG
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 1
71424: NEG
71425: PUSH
71426: LD_INT 4
71428: NEG
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 1
71436: NEG
71437: PUSH
71438: LD_INT 5
71440: NEG
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 2
71448: PUSH
71449: LD_INT 3
71451: NEG
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: PUSH
71457: LD_INT 2
71459: NEG
71460: PUSH
71461: LD_INT 5
71463: NEG
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: EMPTY
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71516: LD_ADDR_VAR 0 31
71520: PUSH
71521: LD_INT 0
71523: PUSH
71524: LD_INT 4
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: LD_INT 0
71533: PUSH
71534: LD_INT 3
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PUSH
71541: LD_INT 1
71543: PUSH
71544: LD_INT 4
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 1
71553: PUSH
71554: LD_INT 5
71556: PUSH
71557: EMPTY
71558: LIST
71559: LIST
71560: PUSH
71561: LD_INT 0
71563: PUSH
71564: LD_INT 5
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PUSH
71571: LD_INT 1
71573: NEG
71574: PUSH
71575: LD_INT 4
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PUSH
71582: LD_INT 1
71584: NEG
71585: PUSH
71586: LD_INT 3
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: LD_INT 2
71595: PUSH
71596: LD_INT 5
71598: PUSH
71599: EMPTY
71600: LIST
71601: LIST
71602: PUSH
71603: LD_INT 2
71605: NEG
71606: PUSH
71607: LD_INT 3
71609: PUSH
71610: EMPTY
71611: LIST
71612: LIST
71613: PUSH
71614: LD_INT 3
71616: NEG
71617: PUSH
71618: LD_INT 0
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: PUSH
71625: LD_INT 3
71627: NEG
71628: PUSH
71629: LD_INT 1
71631: NEG
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 2
71639: NEG
71640: PUSH
71641: LD_INT 0
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PUSH
71648: LD_INT 2
71650: NEG
71651: PUSH
71652: LD_INT 1
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: PUSH
71659: LD_INT 3
71661: NEG
71662: PUSH
71663: LD_INT 1
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: LD_INT 4
71672: NEG
71673: PUSH
71674: LD_INT 0
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 4
71683: NEG
71684: PUSH
71685: LD_INT 1
71687: NEG
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: LD_INT 4
71695: NEG
71696: PUSH
71697: LD_INT 2
71699: NEG
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: LD_INT 2
71707: NEG
71708: PUSH
71709: LD_INT 2
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: PUSH
71716: LD_INT 4
71718: NEG
71719: PUSH
71720: LD_INT 4
71722: NEG
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: PUSH
71728: LD_INT 4
71730: NEG
71731: PUSH
71732: LD_INT 5
71734: NEG
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 3
71742: NEG
71743: PUSH
71744: LD_INT 4
71746: NEG
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: LD_INT 3
71754: NEG
71755: PUSH
71756: LD_INT 3
71758: NEG
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: PUSH
71764: LD_INT 4
71766: NEG
71767: PUSH
71768: LD_INT 3
71770: NEG
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: PUSH
71776: LD_INT 5
71778: NEG
71779: PUSH
71780: LD_INT 4
71782: NEG
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: LD_INT 5
71790: NEG
71791: PUSH
71792: LD_INT 5
71794: NEG
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PUSH
71800: LD_INT 3
71802: NEG
71803: PUSH
71804: LD_INT 5
71806: NEG
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 5
71814: NEG
71815: PUSH
71816: LD_INT 3
71818: NEG
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: PUSH
71824: LD_INT 0
71826: PUSH
71827: LD_INT 3
71829: NEG
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: PUSH
71835: LD_INT 0
71837: PUSH
71838: LD_INT 4
71840: NEG
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: PUSH
71846: LD_INT 1
71848: PUSH
71849: LD_INT 3
71851: NEG
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 1
71859: PUSH
71860: LD_INT 2
71862: NEG
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: PUSH
71868: LD_INT 0
71870: PUSH
71871: LD_INT 2
71873: NEG
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 1
71881: NEG
71882: PUSH
71883: LD_INT 3
71885: NEG
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: LD_INT 1
71893: NEG
71894: PUSH
71895: LD_INT 4
71897: NEG
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: PUSH
71903: LD_INT 2
71905: PUSH
71906: LD_INT 2
71908: NEG
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: PUSH
71914: LD_INT 2
71916: NEG
71917: PUSH
71918: LD_INT 4
71920: NEG
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: LD_INT 4
71928: PUSH
71929: LD_INT 0
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PUSH
71936: LD_INT 4
71938: PUSH
71939: LD_INT 1
71941: NEG
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: PUSH
71947: LD_INT 5
71949: PUSH
71950: LD_INT 0
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 5
71959: PUSH
71960: LD_INT 1
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: PUSH
71967: LD_INT 4
71969: PUSH
71970: LD_INT 1
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 3
71979: PUSH
71980: LD_INT 0
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: PUSH
71987: LD_INT 3
71989: PUSH
71990: LD_INT 1
71992: NEG
71993: PUSH
71994: EMPTY
71995: LIST
71996: LIST
71997: PUSH
71998: LD_INT 3
72000: PUSH
72001: LD_INT 2
72003: NEG
72004: PUSH
72005: EMPTY
72006: LIST
72007: LIST
72008: PUSH
72009: LD_INT 5
72011: PUSH
72012: LD_INT 2
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: LIST
72023: LIST
72024: LIST
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: LIST
72032: LIST
72033: LIST
72034: LIST
72035: LIST
72036: LIST
72037: LIST
72038: LIST
72039: LIST
72040: LIST
72041: LIST
72042: LIST
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: LIST
72048: LIST
72049: LIST
72050: LIST
72051: LIST
72052: LIST
72053: LIST
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72066: LD_ADDR_VAR 0 32
72070: PUSH
72071: LD_INT 4
72073: NEG
72074: PUSH
72075: LD_INT 0
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: PUSH
72082: LD_INT 4
72084: NEG
72085: PUSH
72086: LD_INT 1
72088: NEG
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PUSH
72094: LD_INT 3
72096: NEG
72097: PUSH
72098: LD_INT 0
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: PUSH
72105: LD_INT 3
72107: NEG
72108: PUSH
72109: LD_INT 1
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: LD_INT 4
72118: NEG
72119: PUSH
72120: LD_INT 1
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: PUSH
72127: LD_INT 5
72129: NEG
72130: PUSH
72131: LD_INT 0
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PUSH
72138: LD_INT 5
72140: NEG
72141: PUSH
72142: LD_INT 1
72144: NEG
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: PUSH
72150: LD_INT 5
72152: NEG
72153: PUSH
72154: LD_INT 2
72156: NEG
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: LD_INT 3
72164: NEG
72165: PUSH
72166: LD_INT 2
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: PUSH
72173: LD_INT 3
72175: NEG
72176: PUSH
72177: LD_INT 3
72179: NEG
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: PUSH
72185: LD_INT 3
72187: NEG
72188: PUSH
72189: LD_INT 4
72191: NEG
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: PUSH
72197: LD_INT 2
72199: NEG
72200: PUSH
72201: LD_INT 3
72203: NEG
72204: PUSH
72205: EMPTY
72206: LIST
72207: LIST
72208: PUSH
72209: LD_INT 2
72211: NEG
72212: PUSH
72213: LD_INT 2
72215: NEG
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: LD_INT 3
72223: NEG
72224: PUSH
72225: LD_INT 2
72227: NEG
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: PUSH
72233: LD_INT 4
72235: NEG
72236: PUSH
72237: LD_INT 3
72239: NEG
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: PUSH
72245: LD_INT 4
72247: NEG
72248: PUSH
72249: LD_INT 4
72251: NEG
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: PUSH
72257: LD_INT 2
72259: NEG
72260: PUSH
72261: LD_INT 4
72263: NEG
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: PUSH
72269: LD_INT 4
72271: NEG
72272: PUSH
72273: LD_INT 2
72275: NEG
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: PUSH
72281: LD_INT 0
72283: PUSH
72284: LD_INT 4
72286: NEG
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: PUSH
72292: LD_INT 0
72294: PUSH
72295: LD_INT 5
72297: NEG
72298: PUSH
72299: EMPTY
72300: LIST
72301: LIST
72302: PUSH
72303: LD_INT 1
72305: PUSH
72306: LD_INT 4
72308: NEG
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 1
72316: PUSH
72317: LD_INT 3
72319: NEG
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: PUSH
72325: LD_INT 0
72327: PUSH
72328: LD_INT 3
72330: NEG
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: PUSH
72336: LD_INT 1
72338: NEG
72339: PUSH
72340: LD_INT 4
72342: NEG
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PUSH
72348: LD_INT 1
72350: NEG
72351: PUSH
72352: LD_INT 5
72354: NEG
72355: PUSH
72356: EMPTY
72357: LIST
72358: LIST
72359: PUSH
72360: LD_INT 2
72362: PUSH
72363: LD_INT 3
72365: NEG
72366: PUSH
72367: EMPTY
72368: LIST
72369: LIST
72370: PUSH
72371: LD_INT 2
72373: NEG
72374: PUSH
72375: LD_INT 5
72377: NEG
72378: PUSH
72379: EMPTY
72380: LIST
72381: LIST
72382: PUSH
72383: LD_INT 3
72385: PUSH
72386: LD_INT 0
72388: PUSH
72389: EMPTY
72390: LIST
72391: LIST
72392: PUSH
72393: LD_INT 3
72395: PUSH
72396: LD_INT 1
72398: NEG
72399: PUSH
72400: EMPTY
72401: LIST
72402: LIST
72403: PUSH
72404: LD_INT 4
72406: PUSH
72407: LD_INT 0
72409: PUSH
72410: EMPTY
72411: LIST
72412: LIST
72413: PUSH
72414: LD_INT 4
72416: PUSH
72417: LD_INT 1
72419: PUSH
72420: EMPTY
72421: LIST
72422: LIST
72423: PUSH
72424: LD_INT 3
72426: PUSH
72427: LD_INT 1
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PUSH
72434: LD_INT 2
72436: PUSH
72437: LD_INT 0
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: LD_INT 2
72446: PUSH
72447: LD_INT 1
72449: NEG
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: PUSH
72455: LD_INT 2
72457: PUSH
72458: LD_INT 2
72460: NEG
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: PUSH
72466: LD_INT 4
72468: PUSH
72469: LD_INT 2
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: PUSH
72476: LD_INT 4
72478: PUSH
72479: LD_INT 4
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: PUSH
72486: LD_INT 4
72488: PUSH
72489: LD_INT 3
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: PUSH
72496: LD_INT 5
72498: PUSH
72499: LD_INT 4
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: PUSH
72506: LD_INT 5
72508: PUSH
72509: LD_INT 5
72511: PUSH
72512: EMPTY
72513: LIST
72514: LIST
72515: PUSH
72516: LD_INT 4
72518: PUSH
72519: LD_INT 5
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: PUSH
72526: LD_INT 3
72528: PUSH
72529: LD_INT 4
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: PUSH
72536: LD_INT 3
72538: PUSH
72539: LD_INT 3
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: PUSH
72546: LD_INT 5
72548: PUSH
72549: LD_INT 3
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: PUSH
72556: LD_INT 3
72558: PUSH
72559: LD_INT 5
72561: PUSH
72562: EMPTY
72563: LIST
72564: LIST
72565: PUSH
72566: EMPTY
72567: LIST
72568: LIST
72569: LIST
72570: LIST
72571: LIST
72572: LIST
72573: LIST
72574: LIST
72575: LIST
72576: LIST
72577: LIST
72578: LIST
72579: LIST
72580: LIST
72581: LIST
72582: LIST
72583: LIST
72584: LIST
72585: LIST
72586: LIST
72587: LIST
72588: LIST
72589: LIST
72590: LIST
72591: LIST
72592: LIST
72593: LIST
72594: LIST
72595: LIST
72596: LIST
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: LIST
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: LIST
72610: LIST
72611: LIST
72612: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72613: LD_ADDR_VAR 0 33
72617: PUSH
72618: LD_INT 4
72620: NEG
72621: PUSH
72622: LD_INT 4
72624: NEG
72625: PUSH
72626: EMPTY
72627: LIST
72628: LIST
72629: PUSH
72630: LD_INT 4
72632: NEG
72633: PUSH
72634: LD_INT 5
72636: NEG
72637: PUSH
72638: EMPTY
72639: LIST
72640: LIST
72641: PUSH
72642: LD_INT 3
72644: NEG
72645: PUSH
72646: LD_INT 4
72648: NEG
72649: PUSH
72650: EMPTY
72651: LIST
72652: LIST
72653: PUSH
72654: LD_INT 3
72656: NEG
72657: PUSH
72658: LD_INT 3
72660: NEG
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: PUSH
72666: LD_INT 4
72668: NEG
72669: PUSH
72670: LD_INT 3
72672: NEG
72673: PUSH
72674: EMPTY
72675: LIST
72676: LIST
72677: PUSH
72678: LD_INT 5
72680: NEG
72681: PUSH
72682: LD_INT 4
72684: NEG
72685: PUSH
72686: EMPTY
72687: LIST
72688: LIST
72689: PUSH
72690: LD_INT 5
72692: NEG
72693: PUSH
72694: LD_INT 5
72696: NEG
72697: PUSH
72698: EMPTY
72699: LIST
72700: LIST
72701: PUSH
72702: LD_INT 3
72704: NEG
72705: PUSH
72706: LD_INT 5
72708: NEG
72709: PUSH
72710: EMPTY
72711: LIST
72712: LIST
72713: PUSH
72714: LD_INT 5
72716: NEG
72717: PUSH
72718: LD_INT 3
72720: NEG
72721: PUSH
72722: EMPTY
72723: LIST
72724: LIST
72725: PUSH
72726: LD_INT 0
72728: PUSH
72729: LD_INT 3
72731: NEG
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: PUSH
72737: LD_INT 0
72739: PUSH
72740: LD_INT 4
72742: NEG
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 1
72750: PUSH
72751: LD_INT 3
72753: NEG
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: PUSH
72759: LD_INT 1
72761: PUSH
72762: LD_INT 2
72764: NEG
72765: PUSH
72766: EMPTY
72767: LIST
72768: LIST
72769: PUSH
72770: LD_INT 0
72772: PUSH
72773: LD_INT 2
72775: NEG
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: PUSH
72781: LD_INT 1
72783: NEG
72784: PUSH
72785: LD_INT 3
72787: NEG
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: PUSH
72793: LD_INT 1
72795: NEG
72796: PUSH
72797: LD_INT 4
72799: NEG
72800: PUSH
72801: EMPTY
72802: LIST
72803: LIST
72804: PUSH
72805: LD_INT 2
72807: PUSH
72808: LD_INT 2
72810: NEG
72811: PUSH
72812: EMPTY
72813: LIST
72814: LIST
72815: PUSH
72816: LD_INT 2
72818: NEG
72819: PUSH
72820: LD_INT 4
72822: NEG
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: PUSH
72828: LD_INT 4
72830: PUSH
72831: LD_INT 0
72833: PUSH
72834: EMPTY
72835: LIST
72836: LIST
72837: PUSH
72838: LD_INT 4
72840: PUSH
72841: LD_INT 1
72843: NEG
72844: PUSH
72845: EMPTY
72846: LIST
72847: LIST
72848: PUSH
72849: LD_INT 5
72851: PUSH
72852: LD_INT 0
72854: PUSH
72855: EMPTY
72856: LIST
72857: LIST
72858: PUSH
72859: LD_INT 5
72861: PUSH
72862: LD_INT 1
72864: PUSH
72865: EMPTY
72866: LIST
72867: LIST
72868: PUSH
72869: LD_INT 4
72871: PUSH
72872: LD_INT 1
72874: PUSH
72875: EMPTY
72876: LIST
72877: LIST
72878: PUSH
72879: LD_INT 3
72881: PUSH
72882: LD_INT 0
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: PUSH
72889: LD_INT 3
72891: PUSH
72892: LD_INT 1
72894: NEG
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: PUSH
72900: LD_INT 3
72902: PUSH
72903: LD_INT 2
72905: NEG
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PUSH
72911: LD_INT 5
72913: PUSH
72914: LD_INT 2
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: PUSH
72921: LD_INT 3
72923: PUSH
72924: LD_INT 3
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: PUSH
72931: LD_INT 3
72933: PUSH
72934: LD_INT 2
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PUSH
72941: LD_INT 4
72943: PUSH
72944: LD_INT 3
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PUSH
72951: LD_INT 4
72953: PUSH
72954: LD_INT 4
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 3
72963: PUSH
72964: LD_INT 4
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: LD_INT 2
72973: PUSH
72974: LD_INT 3
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: PUSH
72981: LD_INT 2
72983: PUSH
72984: LD_INT 2
72986: PUSH
72987: EMPTY
72988: LIST
72989: LIST
72990: PUSH
72991: LD_INT 4
72993: PUSH
72994: LD_INT 2
72996: PUSH
72997: EMPTY
72998: LIST
72999: LIST
73000: PUSH
73001: LD_INT 2
73003: PUSH
73004: LD_INT 4
73006: PUSH
73007: EMPTY
73008: LIST
73009: LIST
73010: PUSH
73011: LD_INT 0
73013: PUSH
73014: LD_INT 4
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: PUSH
73021: LD_INT 0
73023: PUSH
73024: LD_INT 3
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: PUSH
73031: LD_INT 1
73033: PUSH
73034: LD_INT 4
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: PUSH
73041: LD_INT 1
73043: PUSH
73044: LD_INT 5
73046: PUSH
73047: EMPTY
73048: LIST
73049: LIST
73050: PUSH
73051: LD_INT 0
73053: PUSH
73054: LD_INT 5
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: PUSH
73061: LD_INT 1
73063: NEG
73064: PUSH
73065: LD_INT 4
73067: PUSH
73068: EMPTY
73069: LIST
73070: LIST
73071: PUSH
73072: LD_INT 1
73074: NEG
73075: PUSH
73076: LD_INT 3
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: PUSH
73083: LD_INT 2
73085: PUSH
73086: LD_INT 5
73088: PUSH
73089: EMPTY
73090: LIST
73091: LIST
73092: PUSH
73093: LD_INT 2
73095: NEG
73096: PUSH
73097: LD_INT 3
73099: PUSH
73100: EMPTY
73101: LIST
73102: LIST
73103: PUSH
73104: EMPTY
73105: LIST
73106: LIST
73107: LIST
73108: LIST
73109: LIST
73110: LIST
73111: LIST
73112: LIST
73113: LIST
73114: LIST
73115: LIST
73116: LIST
73117: LIST
73118: LIST
73119: LIST
73120: LIST
73121: LIST
73122: LIST
73123: LIST
73124: LIST
73125: LIST
73126: LIST
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: LIST
73132: LIST
73133: LIST
73134: LIST
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: LIST
73140: LIST
73141: LIST
73142: LIST
73143: LIST
73144: LIST
73145: LIST
73146: LIST
73147: LIST
73148: LIST
73149: LIST
73150: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73151: LD_ADDR_VAR 0 34
73155: PUSH
73156: LD_INT 0
73158: PUSH
73159: LD_INT 4
73161: NEG
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: PUSH
73167: LD_INT 0
73169: PUSH
73170: LD_INT 5
73172: NEG
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: PUSH
73178: LD_INT 1
73180: PUSH
73181: LD_INT 4
73183: NEG
73184: PUSH
73185: EMPTY
73186: LIST
73187: LIST
73188: PUSH
73189: LD_INT 1
73191: PUSH
73192: LD_INT 3
73194: NEG
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: PUSH
73200: LD_INT 0
73202: PUSH
73203: LD_INT 3
73205: NEG
73206: PUSH
73207: EMPTY
73208: LIST
73209: LIST
73210: PUSH
73211: LD_INT 1
73213: NEG
73214: PUSH
73215: LD_INT 4
73217: NEG
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: PUSH
73223: LD_INT 1
73225: NEG
73226: PUSH
73227: LD_INT 5
73229: NEG
73230: PUSH
73231: EMPTY
73232: LIST
73233: LIST
73234: PUSH
73235: LD_INT 2
73237: PUSH
73238: LD_INT 3
73240: NEG
73241: PUSH
73242: EMPTY
73243: LIST
73244: LIST
73245: PUSH
73246: LD_INT 2
73248: NEG
73249: PUSH
73250: LD_INT 5
73252: NEG
73253: PUSH
73254: EMPTY
73255: LIST
73256: LIST
73257: PUSH
73258: LD_INT 3
73260: PUSH
73261: LD_INT 0
73263: PUSH
73264: EMPTY
73265: LIST
73266: LIST
73267: PUSH
73268: LD_INT 3
73270: PUSH
73271: LD_INT 1
73273: NEG
73274: PUSH
73275: EMPTY
73276: LIST
73277: LIST
73278: PUSH
73279: LD_INT 4
73281: PUSH
73282: LD_INT 0
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: PUSH
73289: LD_INT 4
73291: PUSH
73292: LD_INT 1
73294: PUSH
73295: EMPTY
73296: LIST
73297: LIST
73298: PUSH
73299: LD_INT 3
73301: PUSH
73302: LD_INT 1
73304: PUSH
73305: EMPTY
73306: LIST
73307: LIST
73308: PUSH
73309: LD_INT 2
73311: PUSH
73312: LD_INT 0
73314: PUSH
73315: EMPTY
73316: LIST
73317: LIST
73318: PUSH
73319: LD_INT 2
73321: PUSH
73322: LD_INT 1
73324: NEG
73325: PUSH
73326: EMPTY
73327: LIST
73328: LIST
73329: PUSH
73330: LD_INT 2
73332: PUSH
73333: LD_INT 2
73335: NEG
73336: PUSH
73337: EMPTY
73338: LIST
73339: LIST
73340: PUSH
73341: LD_INT 4
73343: PUSH
73344: LD_INT 2
73346: PUSH
73347: EMPTY
73348: LIST
73349: LIST
73350: PUSH
73351: LD_INT 4
73353: PUSH
73354: LD_INT 4
73356: PUSH
73357: EMPTY
73358: LIST
73359: LIST
73360: PUSH
73361: LD_INT 4
73363: PUSH
73364: LD_INT 3
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: PUSH
73371: LD_INT 5
73373: PUSH
73374: LD_INT 4
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: PUSH
73381: LD_INT 5
73383: PUSH
73384: LD_INT 5
73386: PUSH
73387: EMPTY
73388: LIST
73389: LIST
73390: PUSH
73391: LD_INT 4
73393: PUSH
73394: LD_INT 5
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: PUSH
73401: LD_INT 3
73403: PUSH
73404: LD_INT 4
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: PUSH
73411: LD_INT 3
73413: PUSH
73414: LD_INT 3
73416: PUSH
73417: EMPTY
73418: LIST
73419: LIST
73420: PUSH
73421: LD_INT 5
73423: PUSH
73424: LD_INT 3
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PUSH
73431: LD_INT 3
73433: PUSH
73434: LD_INT 5
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: PUSH
73441: LD_INT 0
73443: PUSH
73444: LD_INT 3
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: LD_INT 0
73453: PUSH
73454: LD_INT 2
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: PUSH
73461: LD_INT 1
73463: PUSH
73464: LD_INT 3
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: LD_INT 1
73473: PUSH
73474: LD_INT 4
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PUSH
73481: LD_INT 0
73483: PUSH
73484: LD_INT 4
73486: PUSH
73487: EMPTY
73488: LIST
73489: LIST
73490: PUSH
73491: LD_INT 1
73493: NEG
73494: PUSH
73495: LD_INT 3
73497: PUSH
73498: EMPTY
73499: LIST
73500: LIST
73501: PUSH
73502: LD_INT 1
73504: NEG
73505: PUSH
73506: LD_INT 2
73508: PUSH
73509: EMPTY
73510: LIST
73511: LIST
73512: PUSH
73513: LD_INT 2
73515: PUSH
73516: LD_INT 4
73518: PUSH
73519: EMPTY
73520: LIST
73521: LIST
73522: PUSH
73523: LD_INT 2
73525: NEG
73526: PUSH
73527: LD_INT 2
73529: PUSH
73530: EMPTY
73531: LIST
73532: LIST
73533: PUSH
73534: LD_INT 4
73536: NEG
73537: PUSH
73538: LD_INT 0
73540: PUSH
73541: EMPTY
73542: LIST
73543: LIST
73544: PUSH
73545: LD_INT 4
73547: NEG
73548: PUSH
73549: LD_INT 1
73551: NEG
73552: PUSH
73553: EMPTY
73554: LIST
73555: LIST
73556: PUSH
73557: LD_INT 3
73559: NEG
73560: PUSH
73561: LD_INT 0
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: PUSH
73568: LD_INT 3
73570: NEG
73571: PUSH
73572: LD_INT 1
73574: PUSH
73575: EMPTY
73576: LIST
73577: LIST
73578: PUSH
73579: LD_INT 4
73581: NEG
73582: PUSH
73583: LD_INT 1
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: PUSH
73590: LD_INT 5
73592: NEG
73593: PUSH
73594: LD_INT 0
73596: PUSH
73597: EMPTY
73598: LIST
73599: LIST
73600: PUSH
73601: LD_INT 5
73603: NEG
73604: PUSH
73605: LD_INT 1
73607: NEG
73608: PUSH
73609: EMPTY
73610: LIST
73611: LIST
73612: PUSH
73613: LD_INT 5
73615: NEG
73616: PUSH
73617: LD_INT 2
73619: NEG
73620: PUSH
73621: EMPTY
73622: LIST
73623: LIST
73624: PUSH
73625: LD_INT 3
73627: NEG
73628: PUSH
73629: LD_INT 2
73631: PUSH
73632: EMPTY
73633: LIST
73634: LIST
73635: PUSH
73636: EMPTY
73637: LIST
73638: LIST
73639: LIST
73640: LIST
73641: LIST
73642: LIST
73643: LIST
73644: LIST
73645: LIST
73646: LIST
73647: LIST
73648: LIST
73649: LIST
73650: LIST
73651: LIST
73652: LIST
73653: LIST
73654: LIST
73655: LIST
73656: LIST
73657: LIST
73658: LIST
73659: LIST
73660: LIST
73661: LIST
73662: LIST
73663: LIST
73664: LIST
73665: LIST
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: LIST
73682: ST_TO_ADDR
// end ; end ;
73683: GO 73686
73685: POP
// case btype of b_depot , b_warehouse :
73686: LD_VAR 0 1
73690: PUSH
73691: LD_INT 0
73693: DOUBLE
73694: EQUAL
73695: IFTRUE 73705
73697: LD_INT 1
73699: DOUBLE
73700: EQUAL
73701: IFTRUE 73705
73703: GO 73906
73705: POP
// case nation of nation_american :
73706: LD_VAR 0 5
73710: PUSH
73711: LD_INT 1
73713: DOUBLE
73714: EQUAL
73715: IFTRUE 73719
73717: GO 73775
73719: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73720: LD_ADDR_VAR 0 9
73724: PUSH
73725: LD_VAR 0 11
73729: PUSH
73730: LD_VAR 0 12
73734: PUSH
73735: LD_VAR 0 13
73739: PUSH
73740: LD_VAR 0 14
73744: PUSH
73745: LD_VAR 0 15
73749: PUSH
73750: LD_VAR 0 16
73754: PUSH
73755: EMPTY
73756: LIST
73757: LIST
73758: LIST
73759: LIST
73760: LIST
73761: LIST
73762: PUSH
73763: LD_VAR 0 4
73767: PUSH
73768: LD_INT 1
73770: PLUS
73771: ARRAY
73772: ST_TO_ADDR
73773: GO 73904
73775: LD_INT 2
73777: DOUBLE
73778: EQUAL
73779: IFTRUE 73783
73781: GO 73839
73783: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73784: LD_ADDR_VAR 0 9
73788: PUSH
73789: LD_VAR 0 17
73793: PUSH
73794: LD_VAR 0 18
73798: PUSH
73799: LD_VAR 0 19
73803: PUSH
73804: LD_VAR 0 20
73808: PUSH
73809: LD_VAR 0 21
73813: PUSH
73814: LD_VAR 0 22
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: LIST
73826: PUSH
73827: LD_VAR 0 4
73831: PUSH
73832: LD_INT 1
73834: PLUS
73835: ARRAY
73836: ST_TO_ADDR
73837: GO 73904
73839: LD_INT 3
73841: DOUBLE
73842: EQUAL
73843: IFTRUE 73847
73845: GO 73903
73847: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73848: LD_ADDR_VAR 0 9
73852: PUSH
73853: LD_VAR 0 23
73857: PUSH
73858: LD_VAR 0 24
73862: PUSH
73863: LD_VAR 0 25
73867: PUSH
73868: LD_VAR 0 26
73872: PUSH
73873: LD_VAR 0 27
73877: PUSH
73878: LD_VAR 0 28
73882: PUSH
73883: EMPTY
73884: LIST
73885: LIST
73886: LIST
73887: LIST
73888: LIST
73889: LIST
73890: PUSH
73891: LD_VAR 0 4
73895: PUSH
73896: LD_INT 1
73898: PLUS
73899: ARRAY
73900: ST_TO_ADDR
73901: GO 73904
73903: POP
73904: GO 74459
73906: LD_INT 2
73908: DOUBLE
73909: EQUAL
73910: IFTRUE 73920
73912: LD_INT 3
73914: DOUBLE
73915: EQUAL
73916: IFTRUE 73920
73918: GO 73976
73920: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73921: LD_ADDR_VAR 0 9
73925: PUSH
73926: LD_VAR 0 29
73930: PUSH
73931: LD_VAR 0 30
73935: PUSH
73936: LD_VAR 0 31
73940: PUSH
73941: LD_VAR 0 32
73945: PUSH
73946: LD_VAR 0 33
73950: PUSH
73951: LD_VAR 0 34
73955: PUSH
73956: EMPTY
73957: LIST
73958: LIST
73959: LIST
73960: LIST
73961: LIST
73962: LIST
73963: PUSH
73964: LD_VAR 0 4
73968: PUSH
73969: LD_INT 1
73971: PLUS
73972: ARRAY
73973: ST_TO_ADDR
73974: GO 74459
73976: LD_INT 16
73978: DOUBLE
73979: EQUAL
73980: IFTRUE 74038
73982: LD_INT 17
73984: DOUBLE
73985: EQUAL
73986: IFTRUE 74038
73988: LD_INT 18
73990: DOUBLE
73991: EQUAL
73992: IFTRUE 74038
73994: LD_INT 19
73996: DOUBLE
73997: EQUAL
73998: IFTRUE 74038
74000: LD_INT 22
74002: DOUBLE
74003: EQUAL
74004: IFTRUE 74038
74006: LD_INT 20
74008: DOUBLE
74009: EQUAL
74010: IFTRUE 74038
74012: LD_INT 21
74014: DOUBLE
74015: EQUAL
74016: IFTRUE 74038
74018: LD_INT 23
74020: DOUBLE
74021: EQUAL
74022: IFTRUE 74038
74024: LD_INT 24
74026: DOUBLE
74027: EQUAL
74028: IFTRUE 74038
74030: LD_INT 25
74032: DOUBLE
74033: EQUAL
74034: IFTRUE 74038
74036: GO 74094
74038: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74039: LD_ADDR_VAR 0 9
74043: PUSH
74044: LD_VAR 0 35
74048: PUSH
74049: LD_VAR 0 36
74053: PUSH
74054: LD_VAR 0 37
74058: PUSH
74059: LD_VAR 0 38
74063: PUSH
74064: LD_VAR 0 39
74068: PUSH
74069: LD_VAR 0 40
74073: PUSH
74074: EMPTY
74075: LIST
74076: LIST
74077: LIST
74078: LIST
74079: LIST
74080: LIST
74081: PUSH
74082: LD_VAR 0 4
74086: PUSH
74087: LD_INT 1
74089: PLUS
74090: ARRAY
74091: ST_TO_ADDR
74092: GO 74459
74094: LD_INT 6
74096: DOUBLE
74097: EQUAL
74098: IFTRUE 74150
74100: LD_INT 7
74102: DOUBLE
74103: EQUAL
74104: IFTRUE 74150
74106: LD_INT 8
74108: DOUBLE
74109: EQUAL
74110: IFTRUE 74150
74112: LD_INT 13
74114: DOUBLE
74115: EQUAL
74116: IFTRUE 74150
74118: LD_INT 12
74120: DOUBLE
74121: EQUAL
74122: IFTRUE 74150
74124: LD_INT 15
74126: DOUBLE
74127: EQUAL
74128: IFTRUE 74150
74130: LD_INT 11
74132: DOUBLE
74133: EQUAL
74134: IFTRUE 74150
74136: LD_INT 14
74138: DOUBLE
74139: EQUAL
74140: IFTRUE 74150
74142: LD_INT 10
74144: DOUBLE
74145: EQUAL
74146: IFTRUE 74150
74148: GO 74206
74150: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74151: LD_ADDR_VAR 0 9
74155: PUSH
74156: LD_VAR 0 41
74160: PUSH
74161: LD_VAR 0 42
74165: PUSH
74166: LD_VAR 0 43
74170: PUSH
74171: LD_VAR 0 44
74175: PUSH
74176: LD_VAR 0 45
74180: PUSH
74181: LD_VAR 0 46
74185: PUSH
74186: EMPTY
74187: LIST
74188: LIST
74189: LIST
74190: LIST
74191: LIST
74192: LIST
74193: PUSH
74194: LD_VAR 0 4
74198: PUSH
74199: LD_INT 1
74201: PLUS
74202: ARRAY
74203: ST_TO_ADDR
74204: GO 74459
74206: LD_INT 36
74208: DOUBLE
74209: EQUAL
74210: IFTRUE 74214
74212: GO 74270
74214: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74215: LD_ADDR_VAR 0 9
74219: PUSH
74220: LD_VAR 0 47
74224: PUSH
74225: LD_VAR 0 48
74229: PUSH
74230: LD_VAR 0 49
74234: PUSH
74235: LD_VAR 0 50
74239: PUSH
74240: LD_VAR 0 51
74244: PUSH
74245: LD_VAR 0 52
74249: PUSH
74250: EMPTY
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: LIST
74256: LIST
74257: PUSH
74258: LD_VAR 0 4
74262: PUSH
74263: LD_INT 1
74265: PLUS
74266: ARRAY
74267: ST_TO_ADDR
74268: GO 74459
74270: LD_INT 4
74272: DOUBLE
74273: EQUAL
74274: IFTRUE 74296
74276: LD_INT 5
74278: DOUBLE
74279: EQUAL
74280: IFTRUE 74296
74282: LD_INT 34
74284: DOUBLE
74285: EQUAL
74286: IFTRUE 74296
74288: LD_INT 37
74290: DOUBLE
74291: EQUAL
74292: IFTRUE 74296
74294: GO 74352
74296: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74297: LD_ADDR_VAR 0 9
74301: PUSH
74302: LD_VAR 0 53
74306: PUSH
74307: LD_VAR 0 54
74311: PUSH
74312: LD_VAR 0 55
74316: PUSH
74317: LD_VAR 0 56
74321: PUSH
74322: LD_VAR 0 57
74326: PUSH
74327: LD_VAR 0 58
74331: PUSH
74332: EMPTY
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: LIST
74338: LIST
74339: PUSH
74340: LD_VAR 0 4
74344: PUSH
74345: LD_INT 1
74347: PLUS
74348: ARRAY
74349: ST_TO_ADDR
74350: GO 74459
74352: LD_INT 31
74354: DOUBLE
74355: EQUAL
74356: IFTRUE 74402
74358: LD_INT 32
74360: DOUBLE
74361: EQUAL
74362: IFTRUE 74402
74364: LD_INT 33
74366: DOUBLE
74367: EQUAL
74368: IFTRUE 74402
74370: LD_INT 27
74372: DOUBLE
74373: EQUAL
74374: IFTRUE 74402
74376: LD_INT 26
74378: DOUBLE
74379: EQUAL
74380: IFTRUE 74402
74382: LD_INT 28
74384: DOUBLE
74385: EQUAL
74386: IFTRUE 74402
74388: LD_INT 29
74390: DOUBLE
74391: EQUAL
74392: IFTRUE 74402
74394: LD_INT 30
74396: DOUBLE
74397: EQUAL
74398: IFTRUE 74402
74400: GO 74458
74402: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74403: LD_ADDR_VAR 0 9
74407: PUSH
74408: LD_VAR 0 59
74412: PUSH
74413: LD_VAR 0 60
74417: PUSH
74418: LD_VAR 0 61
74422: PUSH
74423: LD_VAR 0 62
74427: PUSH
74428: LD_VAR 0 63
74432: PUSH
74433: LD_VAR 0 64
74437: PUSH
74438: EMPTY
74439: LIST
74440: LIST
74441: LIST
74442: LIST
74443: LIST
74444: LIST
74445: PUSH
74446: LD_VAR 0 4
74450: PUSH
74451: LD_INT 1
74453: PLUS
74454: ARRAY
74455: ST_TO_ADDR
74456: GO 74459
74458: POP
// temp_list2 = [ ] ;
74459: LD_ADDR_VAR 0 10
74463: PUSH
74464: EMPTY
74465: ST_TO_ADDR
// for i in temp_list do
74466: LD_ADDR_VAR 0 8
74470: PUSH
74471: LD_VAR 0 9
74475: PUSH
74476: FOR_IN
74477: IFFALSE 74529
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74479: LD_ADDR_VAR 0 10
74483: PUSH
74484: LD_VAR 0 10
74488: PUSH
74489: LD_VAR 0 8
74493: PUSH
74494: LD_INT 1
74496: ARRAY
74497: PUSH
74498: LD_VAR 0 2
74502: PLUS
74503: PUSH
74504: LD_VAR 0 8
74508: PUSH
74509: LD_INT 2
74511: ARRAY
74512: PUSH
74513: LD_VAR 0 3
74517: PLUS
74518: PUSH
74519: EMPTY
74520: LIST
74521: LIST
74522: PUSH
74523: EMPTY
74524: LIST
74525: ADD
74526: ST_TO_ADDR
74527: GO 74476
74529: POP
74530: POP
// result = temp_list2 ;
74531: LD_ADDR_VAR 0 7
74535: PUSH
74536: LD_VAR 0 10
74540: ST_TO_ADDR
// end ;
74541: LD_VAR 0 7
74545: RET
// export function EnemyInRange ( unit , dist ) ; begin
74546: LD_INT 0
74548: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74549: LD_ADDR_VAR 0 3
74553: PUSH
74554: LD_VAR 0 1
74558: PPUSH
74559: CALL_OW 255
74563: PPUSH
74564: LD_VAR 0 1
74568: PPUSH
74569: CALL_OW 250
74573: PPUSH
74574: LD_VAR 0 1
74578: PPUSH
74579: CALL_OW 251
74583: PPUSH
74584: LD_VAR 0 2
74588: PPUSH
74589: CALL 47919 0 4
74593: PUSH
74594: LD_INT 4
74596: ARRAY
74597: ST_TO_ADDR
// end ;
74598: LD_VAR 0 3
74602: RET
// export function PlayerSeeMe ( unit ) ; begin
74603: LD_INT 0
74605: PPUSH
// result := See ( your_side , unit ) ;
74606: LD_ADDR_VAR 0 2
74610: PUSH
74611: LD_OWVAR 2
74615: PPUSH
74616: LD_VAR 0 1
74620: PPUSH
74621: CALL_OW 292
74625: ST_TO_ADDR
// end ;
74626: LD_VAR 0 2
74630: RET
// export function ReverseDir ( unit ) ; begin
74631: LD_INT 0
74633: PPUSH
// if not unit then
74634: LD_VAR 0 1
74638: NOT
74639: IFFALSE 74643
// exit ;
74641: GO 74666
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74643: LD_ADDR_VAR 0 2
74647: PUSH
74648: LD_VAR 0 1
74652: PPUSH
74653: CALL_OW 254
74657: PUSH
74658: LD_INT 3
74660: PLUS
74661: PUSH
74662: LD_INT 6
74664: MOD
74665: ST_TO_ADDR
// end ;
74666: LD_VAR 0 2
74670: RET
// export function ReverseArray ( array ) ; var i ; begin
74671: LD_INT 0
74673: PPUSH
74674: PPUSH
// if not array then
74675: LD_VAR 0 1
74679: NOT
74680: IFFALSE 74684
// exit ;
74682: GO 74739
// result := [ ] ;
74684: LD_ADDR_VAR 0 2
74688: PUSH
74689: EMPTY
74690: ST_TO_ADDR
// for i := array downto 1 do
74691: LD_ADDR_VAR 0 3
74695: PUSH
74696: DOUBLE
74697: LD_VAR 0 1
74701: INC
74702: ST_TO_ADDR
74703: LD_INT 1
74705: PUSH
74706: FOR_DOWNTO
74707: IFFALSE 74737
// result := Join ( result , array [ i ] ) ;
74709: LD_ADDR_VAR 0 2
74713: PUSH
74714: LD_VAR 0 2
74718: PPUSH
74719: LD_VAR 0 1
74723: PUSH
74724: LD_VAR 0 3
74728: ARRAY
74729: PPUSH
74730: CALL 79404 0 2
74734: ST_TO_ADDR
74735: GO 74706
74737: POP
74738: POP
// end ;
74739: LD_VAR 0 2
74743: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74744: LD_INT 0
74746: PPUSH
74747: PPUSH
74748: PPUSH
74749: PPUSH
74750: PPUSH
74751: PPUSH
// if not unit or not hexes then
74752: LD_VAR 0 1
74756: NOT
74757: PUSH
74758: LD_VAR 0 2
74762: NOT
74763: OR
74764: IFFALSE 74768
// exit ;
74766: GO 74891
// dist := 9999 ;
74768: LD_ADDR_VAR 0 5
74772: PUSH
74773: LD_INT 9999
74775: ST_TO_ADDR
// for i = 1 to hexes do
74776: LD_ADDR_VAR 0 4
74780: PUSH
74781: DOUBLE
74782: LD_INT 1
74784: DEC
74785: ST_TO_ADDR
74786: LD_VAR 0 2
74790: PUSH
74791: FOR_TO
74792: IFFALSE 74879
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74794: LD_ADDR_VAR 0 6
74798: PUSH
74799: LD_VAR 0 1
74803: PPUSH
74804: LD_VAR 0 2
74808: PUSH
74809: LD_VAR 0 4
74813: ARRAY
74814: PUSH
74815: LD_INT 1
74817: ARRAY
74818: PPUSH
74819: LD_VAR 0 2
74823: PUSH
74824: LD_VAR 0 4
74828: ARRAY
74829: PUSH
74830: LD_INT 2
74832: ARRAY
74833: PPUSH
74834: CALL_OW 297
74838: ST_TO_ADDR
// if tdist < dist then
74839: LD_VAR 0 6
74843: PUSH
74844: LD_VAR 0 5
74848: LESS
74849: IFFALSE 74877
// begin hex := hexes [ i ] ;
74851: LD_ADDR_VAR 0 8
74855: PUSH
74856: LD_VAR 0 2
74860: PUSH
74861: LD_VAR 0 4
74865: ARRAY
74866: ST_TO_ADDR
// dist := tdist ;
74867: LD_ADDR_VAR 0 5
74871: PUSH
74872: LD_VAR 0 6
74876: ST_TO_ADDR
// end ; end ;
74877: GO 74791
74879: POP
74880: POP
// result := hex ;
74881: LD_ADDR_VAR 0 3
74885: PUSH
74886: LD_VAR 0 8
74890: ST_TO_ADDR
// end ;
74891: LD_VAR 0 3
74895: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74896: LD_INT 0
74898: PPUSH
74899: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74900: LD_VAR 0 1
74904: NOT
74905: PUSH
74906: LD_VAR 0 1
74910: PUSH
74911: LD_INT 21
74913: PUSH
74914: LD_INT 2
74916: PUSH
74917: EMPTY
74918: LIST
74919: LIST
74920: PUSH
74921: LD_INT 23
74923: PUSH
74924: LD_INT 2
74926: PUSH
74927: EMPTY
74928: LIST
74929: LIST
74930: PUSH
74931: EMPTY
74932: LIST
74933: LIST
74934: PPUSH
74935: CALL_OW 69
74939: IN
74940: NOT
74941: OR
74942: IFFALSE 74946
// exit ;
74944: GO 74993
// for i = 1 to 3 do
74946: LD_ADDR_VAR 0 3
74950: PUSH
74951: DOUBLE
74952: LD_INT 1
74954: DEC
74955: ST_TO_ADDR
74956: LD_INT 3
74958: PUSH
74959: FOR_TO
74960: IFFALSE 74991
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74962: LD_VAR 0 1
74966: PPUSH
74967: CALL_OW 250
74971: PPUSH
74972: LD_VAR 0 1
74976: PPUSH
74977: CALL_OW 251
74981: PPUSH
74982: LD_INT 1
74984: PPUSH
74985: CALL_OW 453
74989: GO 74959
74991: POP
74992: POP
// end ;
74993: LD_VAR 0 2
74997: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74998: LD_INT 0
75000: PPUSH
75001: PPUSH
75002: PPUSH
75003: PPUSH
75004: PPUSH
75005: PPUSH
// if not unit or not enemy_unit then
75006: LD_VAR 0 1
75010: NOT
75011: PUSH
75012: LD_VAR 0 2
75016: NOT
75017: OR
75018: IFFALSE 75022
// exit ;
75020: GO 75489
// if GetLives ( i ) < 250 then
75022: LD_VAR 0 4
75026: PPUSH
75027: CALL_OW 256
75031: PUSH
75032: LD_INT 250
75034: LESS
75035: IFFALSE 75048
// begin ComAutodestruct ( i ) ;
75037: LD_VAR 0 4
75041: PPUSH
75042: CALL 74896 0 1
// exit ;
75046: GO 75489
// end ; x := GetX ( enemy_unit ) ;
75048: LD_ADDR_VAR 0 7
75052: PUSH
75053: LD_VAR 0 2
75057: PPUSH
75058: CALL_OW 250
75062: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75063: LD_ADDR_VAR 0 8
75067: PUSH
75068: LD_VAR 0 2
75072: PPUSH
75073: CALL_OW 251
75077: ST_TO_ADDR
// if not x or not y then
75078: LD_VAR 0 7
75082: NOT
75083: PUSH
75084: LD_VAR 0 8
75088: NOT
75089: OR
75090: IFFALSE 75094
// exit ;
75092: GO 75489
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75094: LD_ADDR_VAR 0 6
75098: PUSH
75099: LD_VAR 0 7
75103: PPUSH
75104: LD_INT 0
75106: PPUSH
75107: LD_INT 4
75109: PPUSH
75110: CALL_OW 272
75114: PUSH
75115: LD_VAR 0 8
75119: PPUSH
75120: LD_INT 0
75122: PPUSH
75123: LD_INT 4
75125: PPUSH
75126: CALL_OW 273
75130: PUSH
75131: EMPTY
75132: LIST
75133: LIST
75134: PUSH
75135: LD_VAR 0 7
75139: PPUSH
75140: LD_INT 1
75142: PPUSH
75143: LD_INT 4
75145: PPUSH
75146: CALL_OW 272
75150: PUSH
75151: LD_VAR 0 8
75155: PPUSH
75156: LD_INT 1
75158: PPUSH
75159: LD_INT 4
75161: PPUSH
75162: CALL_OW 273
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: PUSH
75171: LD_VAR 0 7
75175: PPUSH
75176: LD_INT 2
75178: PPUSH
75179: LD_INT 4
75181: PPUSH
75182: CALL_OW 272
75186: PUSH
75187: LD_VAR 0 8
75191: PPUSH
75192: LD_INT 2
75194: PPUSH
75195: LD_INT 4
75197: PPUSH
75198: CALL_OW 273
75202: PUSH
75203: EMPTY
75204: LIST
75205: LIST
75206: PUSH
75207: LD_VAR 0 7
75211: PPUSH
75212: LD_INT 3
75214: PPUSH
75215: LD_INT 4
75217: PPUSH
75218: CALL_OW 272
75222: PUSH
75223: LD_VAR 0 8
75227: PPUSH
75228: LD_INT 3
75230: PPUSH
75231: LD_INT 4
75233: PPUSH
75234: CALL_OW 273
75238: PUSH
75239: EMPTY
75240: LIST
75241: LIST
75242: PUSH
75243: LD_VAR 0 7
75247: PPUSH
75248: LD_INT 4
75250: PPUSH
75251: LD_INT 4
75253: PPUSH
75254: CALL_OW 272
75258: PUSH
75259: LD_VAR 0 8
75263: PPUSH
75264: LD_INT 4
75266: PPUSH
75267: LD_INT 4
75269: PPUSH
75270: CALL_OW 273
75274: PUSH
75275: EMPTY
75276: LIST
75277: LIST
75278: PUSH
75279: LD_VAR 0 7
75283: PPUSH
75284: LD_INT 5
75286: PPUSH
75287: LD_INT 4
75289: PPUSH
75290: CALL_OW 272
75294: PUSH
75295: LD_VAR 0 8
75299: PPUSH
75300: LD_INT 5
75302: PPUSH
75303: LD_INT 4
75305: PPUSH
75306: CALL_OW 273
75310: PUSH
75311: EMPTY
75312: LIST
75313: LIST
75314: PUSH
75315: EMPTY
75316: LIST
75317: LIST
75318: LIST
75319: LIST
75320: LIST
75321: LIST
75322: ST_TO_ADDR
// for i = tmp downto 1 do
75323: LD_ADDR_VAR 0 4
75327: PUSH
75328: DOUBLE
75329: LD_VAR 0 6
75333: INC
75334: ST_TO_ADDR
75335: LD_INT 1
75337: PUSH
75338: FOR_DOWNTO
75339: IFFALSE 75440
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75341: LD_VAR 0 6
75345: PUSH
75346: LD_VAR 0 4
75350: ARRAY
75351: PUSH
75352: LD_INT 1
75354: ARRAY
75355: PPUSH
75356: LD_VAR 0 6
75360: PUSH
75361: LD_VAR 0 4
75365: ARRAY
75366: PUSH
75367: LD_INT 2
75369: ARRAY
75370: PPUSH
75371: CALL_OW 488
75375: NOT
75376: PUSH
75377: LD_VAR 0 6
75381: PUSH
75382: LD_VAR 0 4
75386: ARRAY
75387: PUSH
75388: LD_INT 1
75390: ARRAY
75391: PPUSH
75392: LD_VAR 0 6
75396: PUSH
75397: LD_VAR 0 4
75401: ARRAY
75402: PUSH
75403: LD_INT 2
75405: ARRAY
75406: PPUSH
75407: CALL_OW 428
75411: PUSH
75412: LD_INT 0
75414: NONEQUAL
75415: OR
75416: IFFALSE 75438
// tmp := Delete ( tmp , i ) ;
75418: LD_ADDR_VAR 0 6
75422: PUSH
75423: LD_VAR 0 6
75427: PPUSH
75428: LD_VAR 0 4
75432: PPUSH
75433: CALL_OW 3
75437: ST_TO_ADDR
75438: GO 75338
75440: POP
75441: POP
// j := GetClosestHex ( unit , tmp ) ;
75442: LD_ADDR_VAR 0 5
75446: PUSH
75447: LD_VAR 0 1
75451: PPUSH
75452: LD_VAR 0 6
75456: PPUSH
75457: CALL 74744 0 2
75461: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75462: LD_VAR 0 1
75466: PPUSH
75467: LD_VAR 0 5
75471: PUSH
75472: LD_INT 1
75474: ARRAY
75475: PPUSH
75476: LD_VAR 0 5
75480: PUSH
75481: LD_INT 2
75483: ARRAY
75484: PPUSH
75485: CALL_OW 111
// end ;
75489: LD_VAR 0 3
75493: RET
// export function PrepareApemanSoldier ( ) ; begin
75494: LD_INT 0
75496: PPUSH
// uc_nation := 0 ;
75497: LD_ADDR_OWVAR 21
75501: PUSH
75502: LD_INT 0
75504: ST_TO_ADDR
// hc_sex := sex_male ;
75505: LD_ADDR_OWVAR 27
75509: PUSH
75510: LD_INT 1
75512: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75513: LD_ADDR_OWVAR 28
75517: PUSH
75518: LD_INT 15
75520: ST_TO_ADDR
// hc_gallery :=  ;
75521: LD_ADDR_OWVAR 33
75525: PUSH
75526: LD_STRING 
75528: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75529: LD_ADDR_OWVAR 31
75533: PUSH
75534: LD_INT 0
75536: PPUSH
75537: LD_INT 3
75539: PPUSH
75540: CALL_OW 12
75544: PUSH
75545: LD_INT 0
75547: PPUSH
75548: LD_INT 3
75550: PPUSH
75551: CALL_OW 12
75555: PUSH
75556: LD_INT 0
75558: PUSH
75559: LD_INT 0
75561: PUSH
75562: EMPTY
75563: LIST
75564: LIST
75565: LIST
75566: LIST
75567: ST_TO_ADDR
// end ;
75568: LD_VAR 0 1
75572: RET
// export function PrepareApemanEngineer ( ) ; begin
75573: LD_INT 0
75575: PPUSH
// uc_nation := 0 ;
75576: LD_ADDR_OWVAR 21
75580: PUSH
75581: LD_INT 0
75583: ST_TO_ADDR
// hc_sex := sex_male ;
75584: LD_ADDR_OWVAR 27
75588: PUSH
75589: LD_INT 1
75591: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75592: LD_ADDR_OWVAR 28
75596: PUSH
75597: LD_INT 16
75599: ST_TO_ADDR
// hc_gallery :=  ;
75600: LD_ADDR_OWVAR 33
75604: PUSH
75605: LD_STRING 
75607: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75608: LD_ADDR_OWVAR 31
75612: PUSH
75613: LD_INT 0
75615: PPUSH
75616: LD_INT 3
75618: PPUSH
75619: CALL_OW 12
75623: PUSH
75624: LD_INT 0
75626: PPUSH
75627: LD_INT 3
75629: PPUSH
75630: CALL_OW 12
75634: PUSH
75635: LD_INT 0
75637: PUSH
75638: LD_INT 0
75640: PUSH
75641: EMPTY
75642: LIST
75643: LIST
75644: LIST
75645: LIST
75646: ST_TO_ADDR
// end ;
75647: LD_VAR 0 1
75651: RET
// export function PrepareApeman ( agressivity ) ; begin
75652: LD_INT 0
75654: PPUSH
// uc_side := 0 ;
75655: LD_ADDR_OWVAR 20
75659: PUSH
75660: LD_INT 0
75662: ST_TO_ADDR
// uc_nation := 0 ;
75663: LD_ADDR_OWVAR 21
75667: PUSH
75668: LD_INT 0
75670: ST_TO_ADDR
// hc_sex := sex_male ;
75671: LD_ADDR_OWVAR 27
75675: PUSH
75676: LD_INT 1
75678: ST_TO_ADDR
// hc_class := class_apeman ;
75679: LD_ADDR_OWVAR 28
75683: PUSH
75684: LD_INT 12
75686: ST_TO_ADDR
// hc_gallery :=  ;
75687: LD_ADDR_OWVAR 33
75691: PUSH
75692: LD_STRING 
75694: ST_TO_ADDR
// if agressivity = 0 then
75695: LD_VAR 0 1
75699: PUSH
75700: LD_INT 0
75702: EQUAL
75703: IFFALSE 75715
// hc_agressivity := 0 else
75705: LD_ADDR_OWVAR 35
75709: PUSH
75710: LD_INT 0
75712: ST_TO_ADDR
75713: GO 75736
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75715: LD_ADDR_OWVAR 35
75719: PUSH
75720: LD_VAR 0 1
75724: NEG
75725: PPUSH
75726: LD_VAR 0 1
75730: PPUSH
75731: CALL_OW 12
75735: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75736: LD_ADDR_OWVAR 31
75740: PUSH
75741: LD_INT 0
75743: PPUSH
75744: LD_INT 3
75746: PPUSH
75747: CALL_OW 12
75751: PUSH
75752: LD_INT 0
75754: PPUSH
75755: LD_INT 3
75757: PPUSH
75758: CALL_OW 12
75762: PUSH
75763: LD_INT 0
75765: PUSH
75766: LD_INT 0
75768: PUSH
75769: EMPTY
75770: LIST
75771: LIST
75772: LIST
75773: LIST
75774: ST_TO_ADDR
// end ;
75775: LD_VAR 0 2
75779: RET
// export function PrepareTiger ( agressivity ) ; begin
75780: LD_INT 0
75782: PPUSH
// uc_side := 0 ;
75783: LD_ADDR_OWVAR 20
75787: PUSH
75788: LD_INT 0
75790: ST_TO_ADDR
// uc_nation := 0 ;
75791: LD_ADDR_OWVAR 21
75795: PUSH
75796: LD_INT 0
75798: ST_TO_ADDR
// hc_class := class_tiger ;
75799: LD_ADDR_OWVAR 28
75803: PUSH
75804: LD_INT 14
75806: ST_TO_ADDR
// hc_gallery :=  ;
75807: LD_ADDR_OWVAR 33
75811: PUSH
75812: LD_STRING 
75814: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75815: LD_ADDR_OWVAR 35
75819: PUSH
75820: LD_VAR 0 1
75824: NEG
75825: PPUSH
75826: LD_VAR 0 1
75830: PPUSH
75831: CALL_OW 12
75835: ST_TO_ADDR
// end ;
75836: LD_VAR 0 2
75840: RET
// export function PrepareEnchidna ( ) ; begin
75841: LD_INT 0
75843: PPUSH
// uc_side := 0 ;
75844: LD_ADDR_OWVAR 20
75848: PUSH
75849: LD_INT 0
75851: ST_TO_ADDR
// uc_nation := 0 ;
75852: LD_ADDR_OWVAR 21
75856: PUSH
75857: LD_INT 0
75859: ST_TO_ADDR
// hc_class := class_baggie ;
75860: LD_ADDR_OWVAR 28
75864: PUSH
75865: LD_INT 13
75867: ST_TO_ADDR
// hc_gallery :=  ;
75868: LD_ADDR_OWVAR 33
75872: PUSH
75873: LD_STRING 
75875: ST_TO_ADDR
// end ;
75876: LD_VAR 0 1
75880: RET
// export function PrepareFrog ( ) ; begin
75881: LD_INT 0
75883: PPUSH
// uc_side := 0 ;
75884: LD_ADDR_OWVAR 20
75888: PUSH
75889: LD_INT 0
75891: ST_TO_ADDR
// uc_nation := 0 ;
75892: LD_ADDR_OWVAR 21
75896: PUSH
75897: LD_INT 0
75899: ST_TO_ADDR
// hc_class := class_frog ;
75900: LD_ADDR_OWVAR 28
75904: PUSH
75905: LD_INT 19
75907: ST_TO_ADDR
// hc_gallery :=  ;
75908: LD_ADDR_OWVAR 33
75912: PUSH
75913: LD_STRING 
75915: ST_TO_ADDR
// end ;
75916: LD_VAR 0 1
75920: RET
// export function PrepareFish ( ) ; begin
75921: LD_INT 0
75923: PPUSH
// uc_side := 0 ;
75924: LD_ADDR_OWVAR 20
75928: PUSH
75929: LD_INT 0
75931: ST_TO_ADDR
// uc_nation := 0 ;
75932: LD_ADDR_OWVAR 21
75936: PUSH
75937: LD_INT 0
75939: ST_TO_ADDR
// hc_class := class_fish ;
75940: LD_ADDR_OWVAR 28
75944: PUSH
75945: LD_INT 20
75947: ST_TO_ADDR
// hc_gallery :=  ;
75948: LD_ADDR_OWVAR 33
75952: PUSH
75953: LD_STRING 
75955: ST_TO_ADDR
// end ;
75956: LD_VAR 0 1
75960: RET
// export function PrepareBird ( ) ; begin
75961: LD_INT 0
75963: PPUSH
// uc_side := 0 ;
75964: LD_ADDR_OWVAR 20
75968: PUSH
75969: LD_INT 0
75971: ST_TO_ADDR
// uc_nation := 0 ;
75972: LD_ADDR_OWVAR 21
75976: PUSH
75977: LD_INT 0
75979: ST_TO_ADDR
// hc_class := class_phororhacos ;
75980: LD_ADDR_OWVAR 28
75984: PUSH
75985: LD_INT 18
75987: ST_TO_ADDR
// hc_gallery :=  ;
75988: LD_ADDR_OWVAR 33
75992: PUSH
75993: LD_STRING 
75995: ST_TO_ADDR
// end ;
75996: LD_VAR 0 1
76000: RET
// export function PrepareHorse ( ) ; begin
76001: LD_INT 0
76003: PPUSH
// uc_side := 0 ;
76004: LD_ADDR_OWVAR 20
76008: PUSH
76009: LD_INT 0
76011: ST_TO_ADDR
// uc_nation := 0 ;
76012: LD_ADDR_OWVAR 21
76016: PUSH
76017: LD_INT 0
76019: ST_TO_ADDR
// hc_class := class_horse ;
76020: LD_ADDR_OWVAR 28
76024: PUSH
76025: LD_INT 21
76027: ST_TO_ADDR
// hc_gallery :=  ;
76028: LD_ADDR_OWVAR 33
76032: PUSH
76033: LD_STRING 
76035: ST_TO_ADDR
// end ;
76036: LD_VAR 0 1
76040: RET
// export function PrepareMastodont ( ) ; begin
76041: LD_INT 0
76043: PPUSH
// uc_side := 0 ;
76044: LD_ADDR_OWVAR 20
76048: PUSH
76049: LD_INT 0
76051: ST_TO_ADDR
// uc_nation := 0 ;
76052: LD_ADDR_OWVAR 21
76056: PUSH
76057: LD_INT 0
76059: ST_TO_ADDR
// vc_chassis := class_mastodont ;
76060: LD_ADDR_OWVAR 37
76064: PUSH
76065: LD_INT 31
76067: ST_TO_ADDR
// vc_control := control_rider ;
76068: LD_ADDR_OWVAR 38
76072: PUSH
76073: LD_INT 4
76075: ST_TO_ADDR
// end ;
76076: LD_VAR 0 1
76080: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76081: LD_INT 0
76083: PPUSH
76084: PPUSH
76085: PPUSH
// uc_side = 0 ;
76086: LD_ADDR_OWVAR 20
76090: PUSH
76091: LD_INT 0
76093: ST_TO_ADDR
// uc_nation = 0 ;
76094: LD_ADDR_OWVAR 21
76098: PUSH
76099: LD_INT 0
76101: ST_TO_ADDR
// InitHc_All ( ) ;
76102: CALL_OW 584
// InitVc ;
76106: CALL_OW 20
// if mastodonts then
76110: LD_VAR 0 6
76114: IFFALSE 76181
// for i = 1 to mastodonts do
76116: LD_ADDR_VAR 0 11
76120: PUSH
76121: DOUBLE
76122: LD_INT 1
76124: DEC
76125: ST_TO_ADDR
76126: LD_VAR 0 6
76130: PUSH
76131: FOR_TO
76132: IFFALSE 76179
// begin vc_chassis := 31 ;
76134: LD_ADDR_OWVAR 37
76138: PUSH
76139: LD_INT 31
76141: ST_TO_ADDR
// vc_control := control_rider ;
76142: LD_ADDR_OWVAR 38
76146: PUSH
76147: LD_INT 4
76149: ST_TO_ADDR
// animal := CreateVehicle ;
76150: LD_ADDR_VAR 0 12
76154: PUSH
76155: CALL_OW 45
76159: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76160: LD_VAR 0 12
76164: PPUSH
76165: LD_VAR 0 8
76169: PPUSH
76170: LD_INT 0
76172: PPUSH
76173: CALL 78309 0 3
// end ;
76177: GO 76131
76179: POP
76180: POP
// if horses then
76181: LD_VAR 0 5
76185: IFFALSE 76252
// for i = 1 to horses do
76187: LD_ADDR_VAR 0 11
76191: PUSH
76192: DOUBLE
76193: LD_INT 1
76195: DEC
76196: ST_TO_ADDR
76197: LD_VAR 0 5
76201: PUSH
76202: FOR_TO
76203: IFFALSE 76250
// begin hc_class := 21 ;
76205: LD_ADDR_OWVAR 28
76209: PUSH
76210: LD_INT 21
76212: ST_TO_ADDR
// hc_gallery :=  ;
76213: LD_ADDR_OWVAR 33
76217: PUSH
76218: LD_STRING 
76220: ST_TO_ADDR
// animal := CreateHuman ;
76221: LD_ADDR_VAR 0 12
76225: PUSH
76226: CALL_OW 44
76230: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76231: LD_VAR 0 12
76235: PPUSH
76236: LD_VAR 0 8
76240: PPUSH
76241: LD_INT 0
76243: PPUSH
76244: CALL 78309 0 3
// end ;
76248: GO 76202
76250: POP
76251: POP
// if birds then
76252: LD_VAR 0 1
76256: IFFALSE 76323
// for i = 1 to birds do
76258: LD_ADDR_VAR 0 11
76262: PUSH
76263: DOUBLE
76264: LD_INT 1
76266: DEC
76267: ST_TO_ADDR
76268: LD_VAR 0 1
76272: PUSH
76273: FOR_TO
76274: IFFALSE 76321
// begin hc_class := 18 ;
76276: LD_ADDR_OWVAR 28
76280: PUSH
76281: LD_INT 18
76283: ST_TO_ADDR
// hc_gallery =  ;
76284: LD_ADDR_OWVAR 33
76288: PUSH
76289: LD_STRING 
76291: ST_TO_ADDR
// animal := CreateHuman ;
76292: LD_ADDR_VAR 0 12
76296: PUSH
76297: CALL_OW 44
76301: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76302: LD_VAR 0 12
76306: PPUSH
76307: LD_VAR 0 8
76311: PPUSH
76312: LD_INT 0
76314: PPUSH
76315: CALL 78309 0 3
// end ;
76319: GO 76273
76321: POP
76322: POP
// if tigers then
76323: LD_VAR 0 2
76327: IFFALSE 76411
// for i = 1 to tigers do
76329: LD_ADDR_VAR 0 11
76333: PUSH
76334: DOUBLE
76335: LD_INT 1
76337: DEC
76338: ST_TO_ADDR
76339: LD_VAR 0 2
76343: PUSH
76344: FOR_TO
76345: IFFALSE 76409
// begin hc_class = class_tiger ;
76347: LD_ADDR_OWVAR 28
76351: PUSH
76352: LD_INT 14
76354: ST_TO_ADDR
// hc_gallery =  ;
76355: LD_ADDR_OWVAR 33
76359: PUSH
76360: LD_STRING 
76362: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76363: LD_ADDR_OWVAR 35
76367: PUSH
76368: LD_INT 7
76370: NEG
76371: PPUSH
76372: LD_INT 7
76374: PPUSH
76375: CALL_OW 12
76379: ST_TO_ADDR
// animal := CreateHuman ;
76380: LD_ADDR_VAR 0 12
76384: PUSH
76385: CALL_OW 44
76389: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76390: LD_VAR 0 12
76394: PPUSH
76395: LD_VAR 0 8
76399: PPUSH
76400: LD_INT 0
76402: PPUSH
76403: CALL 78309 0 3
// end ;
76407: GO 76344
76409: POP
76410: POP
// if apemans then
76411: LD_VAR 0 3
76415: IFFALSE 76538
// for i = 1 to apemans do
76417: LD_ADDR_VAR 0 11
76421: PUSH
76422: DOUBLE
76423: LD_INT 1
76425: DEC
76426: ST_TO_ADDR
76427: LD_VAR 0 3
76431: PUSH
76432: FOR_TO
76433: IFFALSE 76536
// begin hc_class = class_apeman ;
76435: LD_ADDR_OWVAR 28
76439: PUSH
76440: LD_INT 12
76442: ST_TO_ADDR
// hc_gallery =  ;
76443: LD_ADDR_OWVAR 33
76447: PUSH
76448: LD_STRING 
76450: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76451: LD_ADDR_OWVAR 35
76455: PUSH
76456: LD_INT 2
76458: NEG
76459: PPUSH
76460: LD_INT 2
76462: PPUSH
76463: CALL_OW 12
76467: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76468: LD_ADDR_OWVAR 31
76472: PUSH
76473: LD_INT 1
76475: PPUSH
76476: LD_INT 3
76478: PPUSH
76479: CALL_OW 12
76483: PUSH
76484: LD_INT 1
76486: PPUSH
76487: LD_INT 3
76489: PPUSH
76490: CALL_OW 12
76494: PUSH
76495: LD_INT 0
76497: PUSH
76498: LD_INT 0
76500: PUSH
76501: EMPTY
76502: LIST
76503: LIST
76504: LIST
76505: LIST
76506: ST_TO_ADDR
// animal := CreateHuman ;
76507: LD_ADDR_VAR 0 12
76511: PUSH
76512: CALL_OW 44
76516: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76517: LD_VAR 0 12
76521: PPUSH
76522: LD_VAR 0 8
76526: PPUSH
76527: LD_INT 0
76529: PPUSH
76530: CALL 78309 0 3
// end ;
76534: GO 76432
76536: POP
76537: POP
// if enchidnas then
76538: LD_VAR 0 4
76542: IFFALSE 76609
// for i = 1 to enchidnas do
76544: LD_ADDR_VAR 0 11
76548: PUSH
76549: DOUBLE
76550: LD_INT 1
76552: DEC
76553: ST_TO_ADDR
76554: LD_VAR 0 4
76558: PUSH
76559: FOR_TO
76560: IFFALSE 76607
// begin hc_class = 13 ;
76562: LD_ADDR_OWVAR 28
76566: PUSH
76567: LD_INT 13
76569: ST_TO_ADDR
// hc_gallery =  ;
76570: LD_ADDR_OWVAR 33
76574: PUSH
76575: LD_STRING 
76577: ST_TO_ADDR
// animal := CreateHuman ;
76578: LD_ADDR_VAR 0 12
76582: PUSH
76583: CALL_OW 44
76587: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76588: LD_VAR 0 12
76592: PPUSH
76593: LD_VAR 0 8
76597: PPUSH
76598: LD_INT 0
76600: PPUSH
76601: CALL 78309 0 3
// end ;
76605: GO 76559
76607: POP
76608: POP
// if fishes then
76609: LD_VAR 0 7
76613: IFFALSE 76680
// for i = 1 to fishes do
76615: LD_ADDR_VAR 0 11
76619: PUSH
76620: DOUBLE
76621: LD_INT 1
76623: DEC
76624: ST_TO_ADDR
76625: LD_VAR 0 7
76629: PUSH
76630: FOR_TO
76631: IFFALSE 76678
// begin hc_class = 20 ;
76633: LD_ADDR_OWVAR 28
76637: PUSH
76638: LD_INT 20
76640: ST_TO_ADDR
// hc_gallery =  ;
76641: LD_ADDR_OWVAR 33
76645: PUSH
76646: LD_STRING 
76648: ST_TO_ADDR
// animal := CreateHuman ;
76649: LD_ADDR_VAR 0 12
76653: PUSH
76654: CALL_OW 44
76658: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76659: LD_VAR 0 12
76663: PPUSH
76664: LD_VAR 0 9
76668: PPUSH
76669: LD_INT 0
76671: PPUSH
76672: CALL 78309 0 3
// end ;
76676: GO 76630
76678: POP
76679: POP
// end ;
76680: LD_VAR 0 10
76684: RET
// export function WantHeal ( sci , unit ) ; begin
76685: LD_INT 0
76687: PPUSH
// if GetTaskList ( sci ) > 0 then
76688: LD_VAR 0 1
76692: PPUSH
76693: CALL_OW 437
76697: PUSH
76698: LD_INT 0
76700: GREATER
76701: IFFALSE 76771
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76703: LD_VAR 0 1
76707: PPUSH
76708: CALL_OW 437
76712: PUSH
76713: LD_INT 1
76715: ARRAY
76716: PUSH
76717: LD_INT 1
76719: ARRAY
76720: PUSH
76721: LD_STRING l
76723: EQUAL
76724: PUSH
76725: LD_VAR 0 1
76729: PPUSH
76730: CALL_OW 437
76734: PUSH
76735: LD_INT 1
76737: ARRAY
76738: PUSH
76739: LD_INT 4
76741: ARRAY
76742: PUSH
76743: LD_VAR 0 2
76747: EQUAL
76748: AND
76749: IFFALSE 76761
// result := true else
76751: LD_ADDR_VAR 0 3
76755: PUSH
76756: LD_INT 1
76758: ST_TO_ADDR
76759: GO 76769
// result := false ;
76761: LD_ADDR_VAR 0 3
76765: PUSH
76766: LD_INT 0
76768: ST_TO_ADDR
// end else
76769: GO 76779
// result := false ;
76771: LD_ADDR_VAR 0 3
76775: PUSH
76776: LD_INT 0
76778: ST_TO_ADDR
// end ;
76779: LD_VAR 0 3
76783: RET
// export function HealTarget ( sci ) ; begin
76784: LD_INT 0
76786: PPUSH
// if not sci then
76787: LD_VAR 0 1
76791: NOT
76792: IFFALSE 76796
// exit ;
76794: GO 76861
// result := 0 ;
76796: LD_ADDR_VAR 0 2
76800: PUSH
76801: LD_INT 0
76803: ST_TO_ADDR
// if GetTaskList ( sci ) then
76804: LD_VAR 0 1
76808: PPUSH
76809: CALL_OW 437
76813: IFFALSE 76861
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76815: LD_VAR 0 1
76819: PPUSH
76820: CALL_OW 437
76824: PUSH
76825: LD_INT 1
76827: ARRAY
76828: PUSH
76829: LD_INT 1
76831: ARRAY
76832: PUSH
76833: LD_STRING l
76835: EQUAL
76836: IFFALSE 76861
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76838: LD_ADDR_VAR 0 2
76842: PUSH
76843: LD_VAR 0 1
76847: PPUSH
76848: CALL_OW 437
76852: PUSH
76853: LD_INT 1
76855: ARRAY
76856: PUSH
76857: LD_INT 4
76859: ARRAY
76860: ST_TO_ADDR
// end ;
76861: LD_VAR 0 2
76865: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76866: LD_INT 0
76868: PPUSH
76869: PPUSH
76870: PPUSH
76871: PPUSH
// if not base_units then
76872: LD_VAR 0 1
76876: NOT
76877: IFFALSE 76881
// exit ;
76879: GO 76968
// result := false ;
76881: LD_ADDR_VAR 0 2
76885: PUSH
76886: LD_INT 0
76888: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76889: LD_ADDR_VAR 0 5
76893: PUSH
76894: LD_VAR 0 1
76898: PPUSH
76899: LD_INT 21
76901: PUSH
76902: LD_INT 3
76904: PUSH
76905: EMPTY
76906: LIST
76907: LIST
76908: PPUSH
76909: CALL_OW 72
76913: ST_TO_ADDR
// if not tmp then
76914: LD_VAR 0 5
76918: NOT
76919: IFFALSE 76923
// exit ;
76921: GO 76968
// for i in tmp do
76923: LD_ADDR_VAR 0 3
76927: PUSH
76928: LD_VAR 0 5
76932: PUSH
76933: FOR_IN
76934: IFFALSE 76966
// begin result := EnemyInRange ( i , 22 ) ;
76936: LD_ADDR_VAR 0 2
76940: PUSH
76941: LD_VAR 0 3
76945: PPUSH
76946: LD_INT 22
76948: PPUSH
76949: CALL 74546 0 2
76953: ST_TO_ADDR
// if result then
76954: LD_VAR 0 2
76958: IFFALSE 76964
// exit ;
76960: POP
76961: POP
76962: GO 76968
// end ;
76964: GO 76933
76966: POP
76967: POP
// end ;
76968: LD_VAR 0 2
76972: RET
// export function FilterByTag ( units , tag ) ; begin
76973: LD_INT 0
76975: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76976: LD_ADDR_VAR 0 3
76980: PUSH
76981: LD_VAR 0 1
76985: PPUSH
76986: LD_INT 120
76988: PUSH
76989: LD_VAR 0 2
76993: PUSH
76994: EMPTY
76995: LIST
76996: LIST
76997: PPUSH
76998: CALL_OW 72
77002: ST_TO_ADDR
// end ;
77003: LD_VAR 0 3
77007: RET
// export function IsDriver ( un ) ; begin
77008: LD_INT 0
77010: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77011: LD_ADDR_VAR 0 2
77015: PUSH
77016: LD_VAR 0 1
77020: PUSH
77021: LD_INT 55
77023: PUSH
77024: EMPTY
77025: LIST
77026: PPUSH
77027: CALL_OW 69
77031: IN
77032: ST_TO_ADDR
// end ;
77033: LD_VAR 0 2
77037: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77038: LD_INT 0
77040: PPUSH
77041: PPUSH
// list := [ ] ;
77042: LD_ADDR_VAR 0 5
77046: PUSH
77047: EMPTY
77048: ST_TO_ADDR
// case d of 0 :
77049: LD_VAR 0 3
77053: PUSH
77054: LD_INT 0
77056: DOUBLE
77057: EQUAL
77058: IFTRUE 77062
77060: GO 77195
77062: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77063: LD_ADDR_VAR 0 5
77067: PUSH
77068: LD_VAR 0 1
77072: PUSH
77073: LD_INT 4
77075: MINUS
77076: PUSH
77077: LD_VAR 0 2
77081: PUSH
77082: LD_INT 4
77084: MINUS
77085: PUSH
77086: LD_INT 2
77088: PUSH
77089: EMPTY
77090: LIST
77091: LIST
77092: LIST
77093: PUSH
77094: LD_VAR 0 1
77098: PUSH
77099: LD_INT 3
77101: MINUS
77102: PUSH
77103: LD_VAR 0 2
77107: PUSH
77108: LD_INT 1
77110: PUSH
77111: EMPTY
77112: LIST
77113: LIST
77114: LIST
77115: PUSH
77116: LD_VAR 0 1
77120: PUSH
77121: LD_INT 4
77123: PLUS
77124: PUSH
77125: LD_VAR 0 2
77129: PUSH
77130: LD_INT 4
77132: PUSH
77133: EMPTY
77134: LIST
77135: LIST
77136: LIST
77137: PUSH
77138: LD_VAR 0 1
77142: PUSH
77143: LD_INT 3
77145: PLUS
77146: PUSH
77147: LD_VAR 0 2
77151: PUSH
77152: LD_INT 3
77154: PLUS
77155: PUSH
77156: LD_INT 5
77158: PUSH
77159: EMPTY
77160: LIST
77161: LIST
77162: LIST
77163: PUSH
77164: LD_VAR 0 1
77168: PUSH
77169: LD_VAR 0 2
77173: PUSH
77174: LD_INT 4
77176: PLUS
77177: PUSH
77178: LD_INT 0
77180: PUSH
77181: EMPTY
77182: LIST
77183: LIST
77184: LIST
77185: PUSH
77186: EMPTY
77187: LIST
77188: LIST
77189: LIST
77190: LIST
77191: LIST
77192: ST_TO_ADDR
// end ; 1 :
77193: GO 77893
77195: LD_INT 1
77197: DOUBLE
77198: EQUAL
77199: IFTRUE 77203
77201: GO 77336
77203: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77204: LD_ADDR_VAR 0 5
77208: PUSH
77209: LD_VAR 0 1
77213: PUSH
77214: LD_VAR 0 2
77218: PUSH
77219: LD_INT 4
77221: MINUS
77222: PUSH
77223: LD_INT 3
77225: PUSH
77226: EMPTY
77227: LIST
77228: LIST
77229: LIST
77230: PUSH
77231: LD_VAR 0 1
77235: PUSH
77236: LD_INT 3
77238: MINUS
77239: PUSH
77240: LD_VAR 0 2
77244: PUSH
77245: LD_INT 3
77247: MINUS
77248: PUSH
77249: LD_INT 2
77251: PUSH
77252: EMPTY
77253: LIST
77254: LIST
77255: LIST
77256: PUSH
77257: LD_VAR 0 1
77261: PUSH
77262: LD_INT 4
77264: MINUS
77265: PUSH
77266: LD_VAR 0 2
77270: PUSH
77271: LD_INT 1
77273: PUSH
77274: EMPTY
77275: LIST
77276: LIST
77277: LIST
77278: PUSH
77279: LD_VAR 0 1
77283: PUSH
77284: LD_VAR 0 2
77288: PUSH
77289: LD_INT 3
77291: PLUS
77292: PUSH
77293: LD_INT 0
77295: PUSH
77296: EMPTY
77297: LIST
77298: LIST
77299: LIST
77300: PUSH
77301: LD_VAR 0 1
77305: PUSH
77306: LD_INT 4
77308: PLUS
77309: PUSH
77310: LD_VAR 0 2
77314: PUSH
77315: LD_INT 4
77317: PLUS
77318: PUSH
77319: LD_INT 5
77321: PUSH
77322: EMPTY
77323: LIST
77324: LIST
77325: LIST
77326: PUSH
77327: EMPTY
77328: LIST
77329: LIST
77330: LIST
77331: LIST
77332: LIST
77333: ST_TO_ADDR
// end ; 2 :
77334: GO 77893
77336: LD_INT 2
77338: DOUBLE
77339: EQUAL
77340: IFTRUE 77344
77342: GO 77473
77344: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77345: LD_ADDR_VAR 0 5
77349: PUSH
77350: LD_VAR 0 1
77354: PUSH
77355: LD_VAR 0 2
77359: PUSH
77360: LD_INT 3
77362: MINUS
77363: PUSH
77364: LD_INT 3
77366: PUSH
77367: EMPTY
77368: LIST
77369: LIST
77370: LIST
77371: PUSH
77372: LD_VAR 0 1
77376: PUSH
77377: LD_INT 4
77379: PLUS
77380: PUSH
77381: LD_VAR 0 2
77385: PUSH
77386: LD_INT 4
77388: PUSH
77389: EMPTY
77390: LIST
77391: LIST
77392: LIST
77393: PUSH
77394: LD_VAR 0 1
77398: PUSH
77399: LD_VAR 0 2
77403: PUSH
77404: LD_INT 4
77406: PLUS
77407: PUSH
77408: LD_INT 0
77410: PUSH
77411: EMPTY
77412: LIST
77413: LIST
77414: LIST
77415: PUSH
77416: LD_VAR 0 1
77420: PUSH
77421: LD_INT 3
77423: MINUS
77424: PUSH
77425: LD_VAR 0 2
77429: PUSH
77430: LD_INT 1
77432: PUSH
77433: EMPTY
77434: LIST
77435: LIST
77436: LIST
77437: PUSH
77438: LD_VAR 0 1
77442: PUSH
77443: LD_INT 4
77445: MINUS
77446: PUSH
77447: LD_VAR 0 2
77451: PUSH
77452: LD_INT 4
77454: MINUS
77455: PUSH
77456: LD_INT 2
77458: PUSH
77459: EMPTY
77460: LIST
77461: LIST
77462: LIST
77463: PUSH
77464: EMPTY
77465: LIST
77466: LIST
77467: LIST
77468: LIST
77469: LIST
77470: ST_TO_ADDR
// end ; 3 :
77471: GO 77893
77473: LD_INT 3
77475: DOUBLE
77476: EQUAL
77477: IFTRUE 77481
77479: GO 77614
77481: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77482: LD_ADDR_VAR 0 5
77486: PUSH
77487: LD_VAR 0 1
77491: PUSH
77492: LD_INT 3
77494: PLUS
77495: PUSH
77496: LD_VAR 0 2
77500: PUSH
77501: LD_INT 4
77503: PUSH
77504: EMPTY
77505: LIST
77506: LIST
77507: LIST
77508: PUSH
77509: LD_VAR 0 1
77513: PUSH
77514: LD_INT 4
77516: PLUS
77517: PUSH
77518: LD_VAR 0 2
77522: PUSH
77523: LD_INT 4
77525: PLUS
77526: PUSH
77527: LD_INT 5
77529: PUSH
77530: EMPTY
77531: LIST
77532: LIST
77533: LIST
77534: PUSH
77535: LD_VAR 0 1
77539: PUSH
77540: LD_INT 4
77542: MINUS
77543: PUSH
77544: LD_VAR 0 2
77548: PUSH
77549: LD_INT 1
77551: PUSH
77552: EMPTY
77553: LIST
77554: LIST
77555: LIST
77556: PUSH
77557: LD_VAR 0 1
77561: PUSH
77562: LD_VAR 0 2
77566: PUSH
77567: LD_INT 4
77569: MINUS
77570: PUSH
77571: LD_INT 3
77573: PUSH
77574: EMPTY
77575: LIST
77576: LIST
77577: LIST
77578: PUSH
77579: LD_VAR 0 1
77583: PUSH
77584: LD_INT 3
77586: MINUS
77587: PUSH
77588: LD_VAR 0 2
77592: PUSH
77593: LD_INT 3
77595: MINUS
77596: PUSH
77597: LD_INT 2
77599: PUSH
77600: EMPTY
77601: LIST
77602: LIST
77603: LIST
77604: PUSH
77605: EMPTY
77606: LIST
77607: LIST
77608: LIST
77609: LIST
77610: LIST
77611: ST_TO_ADDR
// end ; 4 :
77612: GO 77893
77614: LD_INT 4
77616: DOUBLE
77617: EQUAL
77618: IFTRUE 77622
77620: GO 77755
77622: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77623: LD_ADDR_VAR 0 5
77627: PUSH
77628: LD_VAR 0 1
77632: PUSH
77633: LD_VAR 0 2
77637: PUSH
77638: LD_INT 4
77640: PLUS
77641: PUSH
77642: LD_INT 0
77644: PUSH
77645: EMPTY
77646: LIST
77647: LIST
77648: LIST
77649: PUSH
77650: LD_VAR 0 1
77654: PUSH
77655: LD_INT 3
77657: PLUS
77658: PUSH
77659: LD_VAR 0 2
77663: PUSH
77664: LD_INT 3
77666: PLUS
77667: PUSH
77668: LD_INT 5
77670: PUSH
77671: EMPTY
77672: LIST
77673: LIST
77674: LIST
77675: PUSH
77676: LD_VAR 0 1
77680: PUSH
77681: LD_INT 4
77683: PLUS
77684: PUSH
77685: LD_VAR 0 2
77689: PUSH
77690: LD_INT 4
77692: PUSH
77693: EMPTY
77694: LIST
77695: LIST
77696: LIST
77697: PUSH
77698: LD_VAR 0 1
77702: PUSH
77703: LD_VAR 0 2
77707: PUSH
77708: LD_INT 3
77710: MINUS
77711: PUSH
77712: LD_INT 3
77714: PUSH
77715: EMPTY
77716: LIST
77717: LIST
77718: LIST
77719: PUSH
77720: LD_VAR 0 1
77724: PUSH
77725: LD_INT 4
77727: MINUS
77728: PUSH
77729: LD_VAR 0 2
77733: PUSH
77734: LD_INT 4
77736: MINUS
77737: PUSH
77738: LD_INT 2
77740: PUSH
77741: EMPTY
77742: LIST
77743: LIST
77744: LIST
77745: PUSH
77746: EMPTY
77747: LIST
77748: LIST
77749: LIST
77750: LIST
77751: LIST
77752: ST_TO_ADDR
// end ; 5 :
77753: GO 77893
77755: LD_INT 5
77757: DOUBLE
77758: EQUAL
77759: IFTRUE 77763
77761: GO 77892
77763: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77764: LD_ADDR_VAR 0 5
77768: PUSH
77769: LD_VAR 0 1
77773: PUSH
77774: LD_INT 4
77776: MINUS
77777: PUSH
77778: LD_VAR 0 2
77782: PUSH
77783: LD_INT 1
77785: PUSH
77786: EMPTY
77787: LIST
77788: LIST
77789: LIST
77790: PUSH
77791: LD_VAR 0 1
77795: PUSH
77796: LD_VAR 0 2
77800: PUSH
77801: LD_INT 4
77803: MINUS
77804: PUSH
77805: LD_INT 3
77807: PUSH
77808: EMPTY
77809: LIST
77810: LIST
77811: LIST
77812: PUSH
77813: LD_VAR 0 1
77817: PUSH
77818: LD_INT 4
77820: PLUS
77821: PUSH
77822: LD_VAR 0 2
77826: PUSH
77827: LD_INT 4
77829: PLUS
77830: PUSH
77831: LD_INT 5
77833: PUSH
77834: EMPTY
77835: LIST
77836: LIST
77837: LIST
77838: PUSH
77839: LD_VAR 0 1
77843: PUSH
77844: LD_INT 3
77846: PLUS
77847: PUSH
77848: LD_VAR 0 2
77852: PUSH
77853: LD_INT 4
77855: PUSH
77856: EMPTY
77857: LIST
77858: LIST
77859: LIST
77860: PUSH
77861: LD_VAR 0 1
77865: PUSH
77866: LD_VAR 0 2
77870: PUSH
77871: LD_INT 3
77873: PLUS
77874: PUSH
77875: LD_INT 0
77877: PUSH
77878: EMPTY
77879: LIST
77880: LIST
77881: LIST
77882: PUSH
77883: EMPTY
77884: LIST
77885: LIST
77886: LIST
77887: LIST
77888: LIST
77889: ST_TO_ADDR
// end ; end ;
77890: GO 77893
77892: POP
// result := list ;
77893: LD_ADDR_VAR 0 4
77897: PUSH
77898: LD_VAR 0 5
77902: ST_TO_ADDR
// end ;
77903: LD_VAR 0 4
77907: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77908: LD_INT 0
77910: PPUSH
77911: PPUSH
77912: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77913: LD_VAR 0 1
77917: NOT
77918: PUSH
77919: LD_VAR 0 2
77923: PUSH
77924: LD_INT 1
77926: PUSH
77927: LD_INT 2
77929: PUSH
77930: LD_INT 3
77932: PUSH
77933: LD_INT 4
77935: PUSH
77936: EMPTY
77937: LIST
77938: LIST
77939: LIST
77940: LIST
77941: IN
77942: NOT
77943: OR
77944: IFFALSE 77948
// exit ;
77946: GO 78031
// tmp := [ ] ;
77948: LD_ADDR_VAR 0 5
77952: PUSH
77953: EMPTY
77954: ST_TO_ADDR
// for i in units do
77955: LD_ADDR_VAR 0 4
77959: PUSH
77960: LD_VAR 0 1
77964: PUSH
77965: FOR_IN
77966: IFFALSE 78000
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77968: LD_ADDR_VAR 0 5
77972: PUSH
77973: LD_VAR 0 5
77977: PPUSH
77978: LD_VAR 0 4
77982: PPUSH
77983: LD_VAR 0 2
77987: PPUSH
77988: CALL_OW 259
77992: PPUSH
77993: CALL 79404 0 2
77997: ST_TO_ADDR
77998: GO 77965
78000: POP
78001: POP
// if not tmp then
78002: LD_VAR 0 5
78006: NOT
78007: IFFALSE 78011
// exit ;
78009: GO 78031
// result := SortListByListDesc ( units , tmp ) ;
78011: LD_ADDR_VAR 0 3
78015: PUSH
78016: LD_VAR 0 1
78020: PPUSH
78021: LD_VAR 0 5
78025: PPUSH
78026: CALL_OW 77
78030: ST_TO_ADDR
// end ;
78031: LD_VAR 0 3
78035: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78036: LD_INT 0
78038: PPUSH
78039: PPUSH
78040: PPUSH
// result := false ;
78041: LD_ADDR_VAR 0 3
78045: PUSH
78046: LD_INT 0
78048: ST_TO_ADDR
// if not building then
78049: LD_VAR 0 2
78053: NOT
78054: IFFALSE 78058
// exit ;
78056: GO 78196
// x := GetX ( building ) ;
78058: LD_ADDR_VAR 0 4
78062: PUSH
78063: LD_VAR 0 2
78067: PPUSH
78068: CALL_OW 250
78072: ST_TO_ADDR
// y := GetY ( building ) ;
78073: LD_ADDR_VAR 0 5
78077: PUSH
78078: LD_VAR 0 2
78082: PPUSH
78083: CALL_OW 251
78087: ST_TO_ADDR
// if not x or not y then
78088: LD_VAR 0 4
78092: NOT
78093: PUSH
78094: LD_VAR 0 5
78098: NOT
78099: OR
78100: IFFALSE 78104
// exit ;
78102: GO 78196
// if GetTaskList ( unit ) then
78104: LD_VAR 0 1
78108: PPUSH
78109: CALL_OW 437
78113: IFFALSE 78196
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78115: LD_STRING e
78117: PUSH
78118: LD_VAR 0 1
78122: PPUSH
78123: CALL_OW 437
78127: PUSH
78128: LD_INT 1
78130: ARRAY
78131: PUSH
78132: LD_INT 1
78134: ARRAY
78135: EQUAL
78136: PUSH
78137: LD_VAR 0 4
78141: PUSH
78142: LD_VAR 0 1
78146: PPUSH
78147: CALL_OW 437
78151: PUSH
78152: LD_INT 1
78154: ARRAY
78155: PUSH
78156: LD_INT 2
78158: ARRAY
78159: EQUAL
78160: AND
78161: PUSH
78162: LD_VAR 0 5
78166: PUSH
78167: LD_VAR 0 1
78171: PPUSH
78172: CALL_OW 437
78176: PUSH
78177: LD_INT 1
78179: ARRAY
78180: PUSH
78181: LD_INT 3
78183: ARRAY
78184: EQUAL
78185: AND
78186: IFFALSE 78196
// result := true end ;
78188: LD_ADDR_VAR 0 3
78192: PUSH
78193: LD_INT 1
78195: ST_TO_ADDR
// end ;
78196: LD_VAR 0 3
78200: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78201: LD_INT 0
78203: PPUSH
// result := false ;
78204: LD_ADDR_VAR 0 4
78208: PUSH
78209: LD_INT 0
78211: ST_TO_ADDR
// if GetTaskList ( unit ) then
78212: LD_VAR 0 1
78216: PPUSH
78217: CALL_OW 437
78221: IFFALSE 78304
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78223: LD_STRING M
78225: PUSH
78226: LD_VAR 0 1
78230: PPUSH
78231: CALL_OW 437
78235: PUSH
78236: LD_INT 1
78238: ARRAY
78239: PUSH
78240: LD_INT 1
78242: ARRAY
78243: EQUAL
78244: PUSH
78245: LD_VAR 0 2
78249: PUSH
78250: LD_VAR 0 1
78254: PPUSH
78255: CALL_OW 437
78259: PUSH
78260: LD_INT 1
78262: ARRAY
78263: PUSH
78264: LD_INT 2
78266: ARRAY
78267: EQUAL
78268: AND
78269: PUSH
78270: LD_VAR 0 3
78274: PUSH
78275: LD_VAR 0 1
78279: PPUSH
78280: CALL_OW 437
78284: PUSH
78285: LD_INT 1
78287: ARRAY
78288: PUSH
78289: LD_INT 3
78291: ARRAY
78292: EQUAL
78293: AND
78294: IFFALSE 78304
// result := true ;
78296: LD_ADDR_VAR 0 4
78300: PUSH
78301: LD_INT 1
78303: ST_TO_ADDR
// end ; end ;
78304: LD_VAR 0 4
78308: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78309: LD_INT 0
78311: PPUSH
78312: PPUSH
78313: PPUSH
78314: PPUSH
// if not unit or not area then
78315: LD_VAR 0 1
78319: NOT
78320: PUSH
78321: LD_VAR 0 2
78325: NOT
78326: OR
78327: IFFALSE 78331
// exit ;
78329: GO 78507
// tmp := AreaToList ( area , i ) ;
78331: LD_ADDR_VAR 0 6
78335: PUSH
78336: LD_VAR 0 2
78340: PPUSH
78341: LD_VAR 0 5
78345: PPUSH
78346: CALL_OW 517
78350: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78351: LD_ADDR_VAR 0 5
78355: PUSH
78356: DOUBLE
78357: LD_INT 1
78359: DEC
78360: ST_TO_ADDR
78361: LD_VAR 0 6
78365: PUSH
78366: LD_INT 1
78368: ARRAY
78369: PUSH
78370: FOR_TO
78371: IFFALSE 78505
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78373: LD_ADDR_VAR 0 7
78377: PUSH
78378: LD_VAR 0 6
78382: PUSH
78383: LD_INT 1
78385: ARRAY
78386: PUSH
78387: LD_VAR 0 5
78391: ARRAY
78392: PUSH
78393: LD_VAR 0 6
78397: PUSH
78398: LD_INT 2
78400: ARRAY
78401: PUSH
78402: LD_VAR 0 5
78406: ARRAY
78407: PUSH
78408: EMPTY
78409: LIST
78410: LIST
78411: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78412: LD_INT 92
78414: PUSH
78415: LD_VAR 0 7
78419: PUSH
78420: LD_INT 1
78422: ARRAY
78423: PUSH
78424: LD_VAR 0 7
78428: PUSH
78429: LD_INT 2
78431: ARRAY
78432: PUSH
78433: LD_INT 2
78435: PUSH
78436: EMPTY
78437: LIST
78438: LIST
78439: LIST
78440: LIST
78441: PPUSH
78442: CALL_OW 69
78446: PUSH
78447: LD_INT 0
78449: EQUAL
78450: IFFALSE 78503
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78452: LD_VAR 0 1
78456: PPUSH
78457: LD_VAR 0 7
78461: PUSH
78462: LD_INT 1
78464: ARRAY
78465: PPUSH
78466: LD_VAR 0 7
78470: PUSH
78471: LD_INT 2
78473: ARRAY
78474: PPUSH
78475: LD_VAR 0 3
78479: PPUSH
78480: CALL_OW 48
// result := IsPlaced ( unit ) ;
78484: LD_ADDR_VAR 0 4
78488: PUSH
78489: LD_VAR 0 1
78493: PPUSH
78494: CALL_OW 305
78498: ST_TO_ADDR
// exit ;
78499: POP
78500: POP
78501: GO 78507
// end ; end ;
78503: GO 78370
78505: POP
78506: POP
// end ;
78507: LD_VAR 0 4
78511: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78512: LD_INT 0
78514: PPUSH
78515: PPUSH
78516: PPUSH
// if not side or side > 8 then
78517: LD_VAR 0 1
78521: NOT
78522: PUSH
78523: LD_VAR 0 1
78527: PUSH
78528: LD_INT 8
78530: GREATER
78531: OR
78532: IFFALSE 78536
// exit ;
78534: GO 78723
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78536: LD_ADDR_VAR 0 4
78540: PUSH
78541: LD_INT 22
78543: PUSH
78544: LD_VAR 0 1
78548: PUSH
78549: EMPTY
78550: LIST
78551: LIST
78552: PUSH
78553: LD_INT 21
78555: PUSH
78556: LD_INT 3
78558: PUSH
78559: EMPTY
78560: LIST
78561: LIST
78562: PUSH
78563: EMPTY
78564: LIST
78565: LIST
78566: PPUSH
78567: CALL_OW 69
78571: ST_TO_ADDR
// if not tmp then
78572: LD_VAR 0 4
78576: NOT
78577: IFFALSE 78581
// exit ;
78579: GO 78723
// enable_addtolog := true ;
78581: LD_ADDR_OWVAR 81
78585: PUSH
78586: LD_INT 1
78588: ST_TO_ADDR
// AddToLog ( [ ) ;
78589: LD_STRING [
78591: PPUSH
78592: CALL_OW 561
// for i in tmp do
78596: LD_ADDR_VAR 0 3
78600: PUSH
78601: LD_VAR 0 4
78605: PUSH
78606: FOR_IN
78607: IFFALSE 78714
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78609: LD_STRING [
78611: PUSH
78612: LD_VAR 0 3
78616: PPUSH
78617: CALL_OW 266
78621: STR
78622: PUSH
78623: LD_STRING , 
78625: STR
78626: PUSH
78627: LD_VAR 0 3
78631: PPUSH
78632: CALL_OW 250
78636: STR
78637: PUSH
78638: LD_STRING , 
78640: STR
78641: PUSH
78642: LD_VAR 0 3
78646: PPUSH
78647: CALL_OW 251
78651: STR
78652: PUSH
78653: LD_STRING , 
78655: STR
78656: PUSH
78657: LD_VAR 0 3
78661: PPUSH
78662: CALL_OW 254
78666: STR
78667: PUSH
78668: LD_STRING , 
78670: STR
78671: PUSH
78672: LD_VAR 0 3
78676: PPUSH
78677: LD_INT 1
78679: PPUSH
78680: CALL_OW 268
78684: STR
78685: PUSH
78686: LD_STRING , 
78688: STR
78689: PUSH
78690: LD_VAR 0 3
78694: PPUSH
78695: LD_INT 2
78697: PPUSH
78698: CALL_OW 268
78702: STR
78703: PUSH
78704: LD_STRING ],
78706: STR
78707: PPUSH
78708: CALL_OW 561
// end ;
78712: GO 78606
78714: POP
78715: POP
// AddToLog ( ]; ) ;
78716: LD_STRING ];
78718: PPUSH
78719: CALL_OW 561
// end ;
78723: LD_VAR 0 2
78727: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78728: LD_INT 0
78730: PPUSH
78731: PPUSH
78732: PPUSH
78733: PPUSH
78734: PPUSH
// if not area or not rate or not max then
78735: LD_VAR 0 1
78739: NOT
78740: PUSH
78741: LD_VAR 0 2
78745: NOT
78746: OR
78747: PUSH
78748: LD_VAR 0 4
78752: NOT
78753: OR
78754: IFFALSE 78758
// exit ;
78756: GO 78947
// while 1 do
78758: LD_INT 1
78760: IFFALSE 78947
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78762: LD_ADDR_VAR 0 9
78766: PUSH
78767: LD_VAR 0 1
78771: PPUSH
78772: LD_INT 1
78774: PPUSH
78775: CALL_OW 287
78779: PUSH
78780: LD_INT 10
78782: MUL
78783: ST_TO_ADDR
// r := rate / 10 ;
78784: LD_ADDR_VAR 0 7
78788: PUSH
78789: LD_VAR 0 2
78793: PUSH
78794: LD_INT 10
78796: DIVREAL
78797: ST_TO_ADDR
// time := 1 1$00 ;
78798: LD_ADDR_VAR 0 8
78802: PUSH
78803: LD_INT 2100
78805: ST_TO_ADDR
// if amount < min then
78806: LD_VAR 0 9
78810: PUSH
78811: LD_VAR 0 3
78815: LESS
78816: IFFALSE 78834
// r := r * 2 else
78818: LD_ADDR_VAR 0 7
78822: PUSH
78823: LD_VAR 0 7
78827: PUSH
78828: LD_INT 2
78830: MUL
78831: ST_TO_ADDR
78832: GO 78860
// if amount > max then
78834: LD_VAR 0 9
78838: PUSH
78839: LD_VAR 0 4
78843: GREATER
78844: IFFALSE 78860
// r := r / 2 ;
78846: LD_ADDR_VAR 0 7
78850: PUSH
78851: LD_VAR 0 7
78855: PUSH
78856: LD_INT 2
78858: DIVREAL
78859: ST_TO_ADDR
// time := time / r ;
78860: LD_ADDR_VAR 0 8
78864: PUSH
78865: LD_VAR 0 8
78869: PUSH
78870: LD_VAR 0 7
78874: DIVREAL
78875: ST_TO_ADDR
// if time < 0 then
78876: LD_VAR 0 8
78880: PUSH
78881: LD_INT 0
78883: LESS
78884: IFFALSE 78901
// time := time * - 1 ;
78886: LD_ADDR_VAR 0 8
78890: PUSH
78891: LD_VAR 0 8
78895: PUSH
78896: LD_INT 1
78898: NEG
78899: MUL
78900: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78901: LD_VAR 0 8
78905: PUSH
78906: LD_INT 35
78908: PPUSH
78909: LD_INT 875
78911: PPUSH
78912: CALL_OW 12
78916: PLUS
78917: PPUSH
78918: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78922: LD_INT 1
78924: PPUSH
78925: LD_INT 5
78927: PPUSH
78928: CALL_OW 12
78932: PPUSH
78933: LD_VAR 0 1
78937: PPUSH
78938: LD_INT 1
78940: PPUSH
78941: CALL_OW 55
// end ;
78945: GO 78758
// end ;
78947: LD_VAR 0 5
78951: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78952: LD_INT 0
78954: PPUSH
78955: PPUSH
78956: PPUSH
78957: PPUSH
78958: PPUSH
78959: PPUSH
78960: PPUSH
78961: PPUSH
// if not turrets or not factories then
78962: LD_VAR 0 1
78966: NOT
78967: PUSH
78968: LD_VAR 0 2
78972: NOT
78973: OR
78974: IFFALSE 78978
// exit ;
78976: GO 79285
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78978: LD_ADDR_VAR 0 10
78982: PUSH
78983: LD_INT 5
78985: PUSH
78986: LD_INT 6
78988: PUSH
78989: EMPTY
78990: LIST
78991: LIST
78992: PUSH
78993: LD_INT 2
78995: PUSH
78996: LD_INT 4
78998: PUSH
78999: EMPTY
79000: LIST
79001: LIST
79002: PUSH
79003: LD_INT 3
79005: PUSH
79006: LD_INT 5
79008: PUSH
79009: EMPTY
79010: LIST
79011: LIST
79012: PUSH
79013: EMPTY
79014: LIST
79015: LIST
79016: LIST
79017: PUSH
79018: LD_INT 24
79020: PUSH
79021: LD_INT 25
79023: PUSH
79024: EMPTY
79025: LIST
79026: LIST
79027: PUSH
79028: LD_INT 23
79030: PUSH
79031: LD_INT 27
79033: PUSH
79034: EMPTY
79035: LIST
79036: LIST
79037: PUSH
79038: EMPTY
79039: LIST
79040: LIST
79041: PUSH
79042: LD_INT 42
79044: PUSH
79045: LD_INT 43
79047: PUSH
79048: EMPTY
79049: LIST
79050: LIST
79051: PUSH
79052: LD_INT 44
79054: PUSH
79055: LD_INT 46
79057: PUSH
79058: EMPTY
79059: LIST
79060: LIST
79061: PUSH
79062: LD_INT 45
79064: PUSH
79065: LD_INT 47
79067: PUSH
79068: EMPTY
79069: LIST
79070: LIST
79071: PUSH
79072: EMPTY
79073: LIST
79074: LIST
79075: LIST
79076: PUSH
79077: EMPTY
79078: LIST
79079: LIST
79080: LIST
79081: ST_TO_ADDR
// result := [ ] ;
79082: LD_ADDR_VAR 0 3
79086: PUSH
79087: EMPTY
79088: ST_TO_ADDR
// for i in turrets do
79089: LD_ADDR_VAR 0 4
79093: PUSH
79094: LD_VAR 0 1
79098: PUSH
79099: FOR_IN
79100: IFFALSE 79283
// begin nat := GetNation ( i ) ;
79102: LD_ADDR_VAR 0 7
79106: PUSH
79107: LD_VAR 0 4
79111: PPUSH
79112: CALL_OW 248
79116: ST_TO_ADDR
// weapon := 0 ;
79117: LD_ADDR_VAR 0 8
79121: PUSH
79122: LD_INT 0
79124: ST_TO_ADDR
// if not nat then
79125: LD_VAR 0 7
79129: NOT
79130: IFFALSE 79134
// continue ;
79132: GO 79099
// for j in list [ nat ] do
79134: LD_ADDR_VAR 0 5
79138: PUSH
79139: LD_VAR 0 10
79143: PUSH
79144: LD_VAR 0 7
79148: ARRAY
79149: PUSH
79150: FOR_IN
79151: IFFALSE 79192
// if GetBWeapon ( i ) = j [ 1 ] then
79153: LD_VAR 0 4
79157: PPUSH
79158: CALL_OW 269
79162: PUSH
79163: LD_VAR 0 5
79167: PUSH
79168: LD_INT 1
79170: ARRAY
79171: EQUAL
79172: IFFALSE 79190
// begin weapon := j [ 2 ] ;
79174: LD_ADDR_VAR 0 8
79178: PUSH
79179: LD_VAR 0 5
79183: PUSH
79184: LD_INT 2
79186: ARRAY
79187: ST_TO_ADDR
// break ;
79188: GO 79192
// end ;
79190: GO 79150
79192: POP
79193: POP
// if not weapon then
79194: LD_VAR 0 8
79198: NOT
79199: IFFALSE 79203
// continue ;
79201: GO 79099
// for k in factories do
79203: LD_ADDR_VAR 0 6
79207: PUSH
79208: LD_VAR 0 2
79212: PUSH
79213: FOR_IN
79214: IFFALSE 79279
// begin weapons := AvailableWeaponList ( k ) ;
79216: LD_ADDR_VAR 0 9
79220: PUSH
79221: LD_VAR 0 6
79225: PPUSH
79226: CALL_OW 478
79230: ST_TO_ADDR
// if not weapons then
79231: LD_VAR 0 9
79235: NOT
79236: IFFALSE 79240
// continue ;
79238: GO 79213
// if weapon in weapons then
79240: LD_VAR 0 8
79244: PUSH
79245: LD_VAR 0 9
79249: IN
79250: IFFALSE 79277
// begin result := [ i , weapon ] ;
79252: LD_ADDR_VAR 0 3
79256: PUSH
79257: LD_VAR 0 4
79261: PUSH
79262: LD_VAR 0 8
79266: PUSH
79267: EMPTY
79268: LIST
79269: LIST
79270: ST_TO_ADDR
// exit ;
79271: POP
79272: POP
79273: POP
79274: POP
79275: GO 79285
// end ; end ;
79277: GO 79213
79279: POP
79280: POP
// end ;
79281: GO 79099
79283: POP
79284: POP
// end ;
79285: LD_VAR 0 3
79289: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79290: LD_INT 0
79292: PPUSH
// if not side or side > 8 then
79293: LD_VAR 0 3
79297: NOT
79298: PUSH
79299: LD_VAR 0 3
79303: PUSH
79304: LD_INT 8
79306: GREATER
79307: OR
79308: IFFALSE 79312
// exit ;
79310: GO 79371
// if not range then
79312: LD_VAR 0 4
79316: NOT
79317: IFFALSE 79328
// range := - 12 ;
79319: LD_ADDR_VAR 0 4
79323: PUSH
79324: LD_INT 12
79326: NEG
79327: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79328: LD_VAR 0 1
79332: PPUSH
79333: LD_VAR 0 2
79337: PPUSH
79338: LD_VAR 0 3
79342: PPUSH
79343: LD_VAR 0 4
79347: PPUSH
79348: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79352: LD_VAR 0 1
79356: PPUSH
79357: LD_VAR 0 2
79361: PPUSH
79362: LD_VAR 0 3
79366: PPUSH
79367: CALL_OW 331
// end ;
79371: LD_VAR 0 5
79375: RET
// export function Video ( mode ) ; begin
79376: LD_INT 0
79378: PPUSH
// ingame_video = mode ;
79379: LD_ADDR_OWVAR 52
79383: PUSH
79384: LD_VAR 0 1
79388: ST_TO_ADDR
// interface_hidden = mode ;
79389: LD_ADDR_OWVAR 54
79393: PUSH
79394: LD_VAR 0 1
79398: ST_TO_ADDR
// end ;
79399: LD_VAR 0 2
79403: RET
// export function Join ( array , element ) ; begin
79404: LD_INT 0
79406: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79407: LD_ADDR_VAR 0 3
79411: PUSH
79412: LD_VAR 0 1
79416: PPUSH
79417: LD_VAR 0 1
79421: PUSH
79422: LD_INT 1
79424: PLUS
79425: PPUSH
79426: LD_VAR 0 2
79430: PPUSH
79431: CALL_OW 1
79435: ST_TO_ADDR
// end ;
79436: LD_VAR 0 3
79440: RET
// export function JoinUnion ( array , element ) ; begin
79441: LD_INT 0
79443: PPUSH
// result := array union element ;
79444: LD_ADDR_VAR 0 3
79448: PUSH
79449: LD_VAR 0 1
79453: PUSH
79454: LD_VAR 0 2
79458: UNION
79459: ST_TO_ADDR
// end ;
79460: LD_VAR 0 3
79464: RET
// export function GetBehemoths ( side ) ; begin
79465: LD_INT 0
79467: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79468: LD_ADDR_VAR 0 2
79472: PUSH
79473: LD_INT 22
79475: PUSH
79476: LD_VAR 0 1
79480: PUSH
79481: EMPTY
79482: LIST
79483: LIST
79484: PUSH
79485: LD_INT 31
79487: PUSH
79488: LD_INT 25
79490: PUSH
79491: EMPTY
79492: LIST
79493: LIST
79494: PUSH
79495: EMPTY
79496: LIST
79497: LIST
79498: PPUSH
79499: CALL_OW 69
79503: ST_TO_ADDR
// end ;
79504: LD_VAR 0 2
79508: RET
// export function Shuffle ( array ) ; var i , index ; begin
79509: LD_INT 0
79511: PPUSH
79512: PPUSH
79513: PPUSH
// result := [ ] ;
79514: LD_ADDR_VAR 0 2
79518: PUSH
79519: EMPTY
79520: ST_TO_ADDR
// if not array then
79521: LD_VAR 0 1
79525: NOT
79526: IFFALSE 79530
// exit ;
79528: GO 79629
// Randomize ;
79530: CALL_OW 10
// for i = array downto 1 do
79534: LD_ADDR_VAR 0 3
79538: PUSH
79539: DOUBLE
79540: LD_VAR 0 1
79544: INC
79545: ST_TO_ADDR
79546: LD_INT 1
79548: PUSH
79549: FOR_DOWNTO
79550: IFFALSE 79627
// begin index := rand ( 1 , array ) ;
79552: LD_ADDR_VAR 0 4
79556: PUSH
79557: LD_INT 1
79559: PPUSH
79560: LD_VAR 0 1
79564: PPUSH
79565: CALL_OW 12
79569: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79570: LD_ADDR_VAR 0 2
79574: PUSH
79575: LD_VAR 0 2
79579: PPUSH
79580: LD_VAR 0 2
79584: PUSH
79585: LD_INT 1
79587: PLUS
79588: PPUSH
79589: LD_VAR 0 1
79593: PUSH
79594: LD_VAR 0 4
79598: ARRAY
79599: PPUSH
79600: CALL_OW 2
79604: ST_TO_ADDR
// array := Delete ( array , index ) ;
79605: LD_ADDR_VAR 0 1
79609: PUSH
79610: LD_VAR 0 1
79614: PPUSH
79615: LD_VAR 0 4
79619: PPUSH
79620: CALL_OW 3
79624: ST_TO_ADDR
// end ;
79625: GO 79549
79627: POP
79628: POP
// end ;
79629: LD_VAR 0 2
79633: RET
// export function GetBaseMaterials ( base ) ; begin
79634: LD_INT 0
79636: PPUSH
// result := [ 0 , 0 , 0 ] ;
79637: LD_ADDR_VAR 0 2
79641: PUSH
79642: LD_INT 0
79644: PUSH
79645: LD_INT 0
79647: PUSH
79648: LD_INT 0
79650: PUSH
79651: EMPTY
79652: LIST
79653: LIST
79654: LIST
79655: ST_TO_ADDR
// if not base then
79656: LD_VAR 0 1
79660: NOT
79661: IFFALSE 79665
// exit ;
79663: GO 79714
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79665: LD_ADDR_VAR 0 2
79669: PUSH
79670: LD_VAR 0 1
79674: PPUSH
79675: LD_INT 1
79677: PPUSH
79678: CALL_OW 275
79682: PUSH
79683: LD_VAR 0 1
79687: PPUSH
79688: LD_INT 2
79690: PPUSH
79691: CALL_OW 275
79695: PUSH
79696: LD_VAR 0 1
79700: PPUSH
79701: LD_INT 3
79703: PPUSH
79704: CALL_OW 275
79708: PUSH
79709: EMPTY
79710: LIST
79711: LIST
79712: LIST
79713: ST_TO_ADDR
// end ;
79714: LD_VAR 0 2
79718: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79719: LD_INT 0
79721: PPUSH
79722: PPUSH
// result := array ;
79723: LD_ADDR_VAR 0 3
79727: PUSH
79728: LD_VAR 0 1
79732: ST_TO_ADDR
// if size >= result then
79733: LD_VAR 0 2
79737: PUSH
79738: LD_VAR 0 3
79742: GREATEREQUAL
79743: IFFALSE 79747
// exit ;
79745: GO 79797
// if size then
79747: LD_VAR 0 2
79751: IFFALSE 79797
// for i := array downto size do
79753: LD_ADDR_VAR 0 4
79757: PUSH
79758: DOUBLE
79759: LD_VAR 0 1
79763: INC
79764: ST_TO_ADDR
79765: LD_VAR 0 2
79769: PUSH
79770: FOR_DOWNTO
79771: IFFALSE 79795
// result := Delete ( result , result ) ;
79773: LD_ADDR_VAR 0 3
79777: PUSH
79778: LD_VAR 0 3
79782: PPUSH
79783: LD_VAR 0 3
79787: PPUSH
79788: CALL_OW 3
79792: ST_TO_ADDR
79793: GO 79770
79795: POP
79796: POP
// end ;
79797: LD_VAR 0 3
79801: RET
// export function ComExit ( unit ) ; var tmp ; begin
79802: LD_INT 0
79804: PPUSH
79805: PPUSH
// if not IsInUnit ( unit ) then
79806: LD_VAR 0 1
79810: PPUSH
79811: CALL_OW 310
79815: NOT
79816: IFFALSE 79820
// exit ;
79818: GO 79880
// tmp := IsInUnit ( unit ) ;
79820: LD_ADDR_VAR 0 3
79824: PUSH
79825: LD_VAR 0 1
79829: PPUSH
79830: CALL_OW 310
79834: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79835: LD_VAR 0 3
79839: PPUSH
79840: CALL_OW 247
79844: PUSH
79845: LD_INT 2
79847: EQUAL
79848: IFFALSE 79861
// ComExitVehicle ( unit ) else
79850: LD_VAR 0 1
79854: PPUSH
79855: CALL_OW 121
79859: GO 79870
// ComExitBuilding ( unit ) ;
79861: LD_VAR 0 1
79865: PPUSH
79866: CALL_OW 122
// result := tmp ;
79870: LD_ADDR_VAR 0 2
79874: PUSH
79875: LD_VAR 0 3
79879: ST_TO_ADDR
// end ;
79880: LD_VAR 0 2
79884: RET
// export function ComExitAll ( units ) ; var i ; begin
79885: LD_INT 0
79887: PPUSH
79888: PPUSH
// if not units then
79889: LD_VAR 0 1
79893: NOT
79894: IFFALSE 79898
// exit ;
79896: GO 79924
// for i in units do
79898: LD_ADDR_VAR 0 3
79902: PUSH
79903: LD_VAR 0 1
79907: PUSH
79908: FOR_IN
79909: IFFALSE 79922
// ComExit ( i ) ;
79911: LD_VAR 0 3
79915: PPUSH
79916: CALL 79802 0 1
79920: GO 79908
79922: POP
79923: POP
// end ;
79924: LD_VAR 0 2
79928: RET
// export function ResetHc ; begin
79929: LD_INT 0
79931: PPUSH
// InitHc ;
79932: CALL_OW 19
// hc_importance := 0 ;
79936: LD_ADDR_OWVAR 32
79940: PUSH
79941: LD_INT 0
79943: ST_TO_ADDR
// end ;
79944: LD_VAR 0 1
79948: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79949: LD_INT 0
79951: PPUSH
79952: PPUSH
79953: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79954: LD_ADDR_VAR 0 6
79958: PUSH
79959: LD_VAR 0 1
79963: PUSH
79964: LD_VAR 0 3
79968: PLUS
79969: PUSH
79970: LD_INT 2
79972: DIV
79973: ST_TO_ADDR
// if _x < 0 then
79974: LD_VAR 0 6
79978: PUSH
79979: LD_INT 0
79981: LESS
79982: IFFALSE 79999
// _x := _x * - 1 ;
79984: LD_ADDR_VAR 0 6
79988: PUSH
79989: LD_VAR 0 6
79993: PUSH
79994: LD_INT 1
79996: NEG
79997: MUL
79998: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79999: LD_ADDR_VAR 0 7
80003: PUSH
80004: LD_VAR 0 2
80008: PUSH
80009: LD_VAR 0 4
80013: PLUS
80014: PUSH
80015: LD_INT 2
80017: DIV
80018: ST_TO_ADDR
// if _y < 0 then
80019: LD_VAR 0 7
80023: PUSH
80024: LD_INT 0
80026: LESS
80027: IFFALSE 80044
// _y := _y * - 1 ;
80029: LD_ADDR_VAR 0 7
80033: PUSH
80034: LD_VAR 0 7
80038: PUSH
80039: LD_INT 1
80041: NEG
80042: MUL
80043: ST_TO_ADDR
// result := [ _x , _y ] ;
80044: LD_ADDR_VAR 0 5
80048: PUSH
80049: LD_VAR 0 6
80053: PUSH
80054: LD_VAR 0 7
80058: PUSH
80059: EMPTY
80060: LIST
80061: LIST
80062: ST_TO_ADDR
// end ;
80063: LD_VAR 0 5
80067: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80068: LD_INT 0
80070: PPUSH
80071: PPUSH
80072: PPUSH
80073: PPUSH
// task := GetTaskList ( unit ) ;
80074: LD_ADDR_VAR 0 7
80078: PUSH
80079: LD_VAR 0 1
80083: PPUSH
80084: CALL_OW 437
80088: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80089: LD_VAR 0 7
80093: NOT
80094: PUSH
80095: LD_VAR 0 1
80099: PPUSH
80100: LD_VAR 0 2
80104: PPUSH
80105: CALL_OW 308
80109: NOT
80110: AND
80111: IFFALSE 80115
// exit ;
80113: GO 80233
// if IsInArea ( unit , area ) then
80115: LD_VAR 0 1
80119: PPUSH
80120: LD_VAR 0 2
80124: PPUSH
80125: CALL_OW 308
80129: IFFALSE 80147
// begin ComMoveToArea ( unit , goAway ) ;
80131: LD_VAR 0 1
80135: PPUSH
80136: LD_VAR 0 3
80140: PPUSH
80141: CALL_OW 113
// exit ;
80145: GO 80233
// end ; if task [ 1 ] [ 1 ] <> M then
80147: LD_VAR 0 7
80151: PUSH
80152: LD_INT 1
80154: ARRAY
80155: PUSH
80156: LD_INT 1
80158: ARRAY
80159: PUSH
80160: LD_STRING M
80162: NONEQUAL
80163: IFFALSE 80167
// exit ;
80165: GO 80233
// x := task [ 1 ] [ 2 ] ;
80167: LD_ADDR_VAR 0 5
80171: PUSH
80172: LD_VAR 0 7
80176: PUSH
80177: LD_INT 1
80179: ARRAY
80180: PUSH
80181: LD_INT 2
80183: ARRAY
80184: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80185: LD_ADDR_VAR 0 6
80189: PUSH
80190: LD_VAR 0 7
80194: PUSH
80195: LD_INT 1
80197: ARRAY
80198: PUSH
80199: LD_INT 3
80201: ARRAY
80202: ST_TO_ADDR
// if InArea ( x , y , area ) then
80203: LD_VAR 0 5
80207: PPUSH
80208: LD_VAR 0 6
80212: PPUSH
80213: LD_VAR 0 2
80217: PPUSH
80218: CALL_OW 309
80222: IFFALSE 80233
// ComStop ( unit ) ;
80224: LD_VAR 0 1
80228: PPUSH
80229: CALL_OW 141
// end ;
80233: LD_VAR 0 4
80237: RET
// export function Abs ( value ) ; begin
80238: LD_INT 0
80240: PPUSH
// result := value ;
80241: LD_ADDR_VAR 0 2
80245: PUSH
80246: LD_VAR 0 1
80250: ST_TO_ADDR
// if value < 0 then
80251: LD_VAR 0 1
80255: PUSH
80256: LD_INT 0
80258: LESS
80259: IFFALSE 80276
// result := value * - 1 ;
80261: LD_ADDR_VAR 0 2
80265: PUSH
80266: LD_VAR 0 1
80270: PUSH
80271: LD_INT 1
80273: NEG
80274: MUL
80275: ST_TO_ADDR
// end ;
80276: LD_VAR 0 2
80280: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
80281: LD_INT 0
80283: PPUSH
80284: PPUSH
80285: PPUSH
80286: PPUSH
80287: PPUSH
80288: PPUSH
80289: PPUSH
80290: PPUSH
// if not unit or not building then
80291: LD_VAR 0 1
80295: NOT
80296: PUSH
80297: LD_VAR 0 2
80301: NOT
80302: OR
80303: IFFALSE 80307
// exit ;
80305: GO 80533
// x := GetX ( building ) ;
80307: LD_ADDR_VAR 0 4
80311: PUSH
80312: LD_VAR 0 2
80316: PPUSH
80317: CALL_OW 250
80321: ST_TO_ADDR
// y := GetY ( building ) ;
80322: LD_ADDR_VAR 0 6
80326: PUSH
80327: LD_VAR 0 2
80331: PPUSH
80332: CALL_OW 251
80336: ST_TO_ADDR
// d := GetDir ( building ) ;
80337: LD_ADDR_VAR 0 8
80341: PUSH
80342: LD_VAR 0 2
80346: PPUSH
80347: CALL_OW 254
80351: ST_TO_ADDR
// r := 4 ;
80352: LD_ADDR_VAR 0 9
80356: PUSH
80357: LD_INT 4
80359: ST_TO_ADDR
// for i := 1 to 5 do
80360: LD_ADDR_VAR 0 10
80364: PUSH
80365: DOUBLE
80366: LD_INT 1
80368: DEC
80369: ST_TO_ADDR
80370: LD_INT 5
80372: PUSH
80373: FOR_TO
80374: IFFALSE 80531
// begin _x := ShiftX ( x , d , r + i ) ;
80376: LD_ADDR_VAR 0 5
80380: PUSH
80381: LD_VAR 0 4
80385: PPUSH
80386: LD_VAR 0 8
80390: PPUSH
80391: LD_VAR 0 9
80395: PUSH
80396: LD_VAR 0 10
80400: PLUS
80401: PPUSH
80402: CALL_OW 272
80406: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80407: LD_ADDR_VAR 0 7
80411: PUSH
80412: LD_VAR 0 6
80416: PPUSH
80417: LD_VAR 0 8
80421: PPUSH
80422: LD_VAR 0 9
80426: PUSH
80427: LD_VAR 0 10
80431: PLUS
80432: PPUSH
80433: CALL_OW 273
80437: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80438: LD_VAR 0 5
80442: PPUSH
80443: LD_VAR 0 7
80447: PPUSH
80448: CALL_OW 488
80452: PUSH
80453: LD_VAR 0 5
80457: PPUSH
80458: LD_VAR 0 7
80462: PPUSH
80463: CALL_OW 428
80467: PPUSH
80468: CALL_OW 247
80472: PUSH
80473: LD_INT 3
80475: PUSH
80476: LD_INT 2
80478: PUSH
80479: EMPTY
80480: LIST
80481: LIST
80482: IN
80483: NOT
80484: AND
80485: IFFALSE 80529
// begin ComMoveXY ( unit , _x , _y ) ;
80487: LD_VAR 0 1
80491: PPUSH
80492: LD_VAR 0 5
80496: PPUSH
80497: LD_VAR 0 7
80501: PPUSH
80502: CALL_OW 111
// result := [ _x , _y ] ;
80506: LD_ADDR_VAR 0 3
80510: PUSH
80511: LD_VAR 0 5
80515: PUSH
80516: LD_VAR 0 7
80520: PUSH
80521: EMPTY
80522: LIST
80523: LIST
80524: ST_TO_ADDR
// exit ;
80525: POP
80526: POP
80527: GO 80533
// end ; end ;
80529: GO 80373
80531: POP
80532: POP
// end ;
80533: LD_VAR 0 3
80537: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80538: LD_INT 0
80540: PPUSH
80541: PPUSH
80542: PPUSH
// result := 0 ;
80543: LD_ADDR_VAR 0 3
80547: PUSH
80548: LD_INT 0
80550: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80551: LD_VAR 0 1
80555: PUSH
80556: LD_INT 0
80558: LESS
80559: PUSH
80560: LD_VAR 0 1
80564: PUSH
80565: LD_INT 8
80567: GREATER
80568: OR
80569: PUSH
80570: LD_VAR 0 2
80574: PUSH
80575: LD_INT 0
80577: LESS
80578: OR
80579: PUSH
80580: LD_VAR 0 2
80584: PUSH
80585: LD_INT 8
80587: GREATER
80588: OR
80589: IFFALSE 80593
// exit ;
80591: GO 80668
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80593: LD_ADDR_VAR 0 4
80597: PUSH
80598: LD_INT 22
80600: PUSH
80601: LD_VAR 0 2
80605: PUSH
80606: EMPTY
80607: LIST
80608: LIST
80609: PPUSH
80610: CALL_OW 69
80614: PUSH
80615: FOR_IN
80616: IFFALSE 80666
// begin un := UnitShoot ( i ) ;
80618: LD_ADDR_VAR 0 5
80622: PUSH
80623: LD_VAR 0 4
80627: PPUSH
80628: CALL_OW 504
80632: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80633: LD_VAR 0 5
80637: PPUSH
80638: CALL_OW 255
80642: PUSH
80643: LD_VAR 0 1
80647: EQUAL
80648: IFFALSE 80664
// begin result := un ;
80650: LD_ADDR_VAR 0 3
80654: PUSH
80655: LD_VAR 0 5
80659: ST_TO_ADDR
// exit ;
80660: POP
80661: POP
80662: GO 80668
// end ; end ;
80664: GO 80615
80666: POP
80667: POP
// end ;
80668: LD_VAR 0 3
80672: RET
// export function GetCargoBay ( units ) ; begin
80673: LD_INT 0
80675: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80676: LD_ADDR_VAR 0 2
80680: PUSH
80681: LD_VAR 0 1
80685: PPUSH
80686: LD_INT 2
80688: PUSH
80689: LD_INT 34
80691: PUSH
80692: LD_INT 12
80694: PUSH
80695: EMPTY
80696: LIST
80697: LIST
80698: PUSH
80699: LD_INT 34
80701: PUSH
80702: LD_INT 51
80704: PUSH
80705: EMPTY
80706: LIST
80707: LIST
80708: PUSH
80709: LD_INT 34
80711: PUSH
80712: LD_INT 32
80714: PUSH
80715: EMPTY
80716: LIST
80717: LIST
80718: PUSH
80719: LD_INT 34
80721: PUSH
80722: LD_INT 89
80724: PUSH
80725: EMPTY
80726: LIST
80727: LIST
80728: PUSH
80729: EMPTY
80730: LIST
80731: LIST
80732: LIST
80733: LIST
80734: LIST
80735: PPUSH
80736: CALL_OW 72
80740: ST_TO_ADDR
// end ;
80741: LD_VAR 0 2
80745: RET
// export function Negate ( value ) ; begin
80746: LD_INT 0
80748: PPUSH
// result := not value ;
80749: LD_ADDR_VAR 0 2
80753: PUSH
80754: LD_VAR 0 1
80758: NOT
80759: ST_TO_ADDR
// end ;
80760: LD_VAR 0 2
80764: RET
// export function Inc ( value ) ; begin
80765: LD_INT 0
80767: PPUSH
// result := value + 1 ;
80768: LD_ADDR_VAR 0 2
80772: PUSH
80773: LD_VAR 0 1
80777: PUSH
80778: LD_INT 1
80780: PLUS
80781: ST_TO_ADDR
// end ;
80782: LD_VAR 0 2
80786: RET
// export function Dec ( value ) ; begin
80787: LD_INT 0
80789: PPUSH
// result := value - 1 ;
80790: LD_ADDR_VAR 0 2
80794: PUSH
80795: LD_VAR 0 1
80799: PUSH
80800: LD_INT 1
80802: MINUS
80803: ST_TO_ADDR
// end ;
80804: LD_VAR 0 2
80808: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80809: LD_INT 0
80811: PPUSH
80812: PPUSH
80813: PPUSH
80814: PPUSH
80815: PPUSH
80816: PPUSH
80817: PPUSH
80818: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80819: LD_VAR 0 1
80823: PPUSH
80824: LD_VAR 0 2
80828: PPUSH
80829: CALL_OW 488
80833: NOT
80834: PUSH
80835: LD_VAR 0 3
80839: PPUSH
80840: LD_VAR 0 4
80844: PPUSH
80845: CALL_OW 488
80849: NOT
80850: OR
80851: IFFALSE 80864
// begin result := - 1 ;
80853: LD_ADDR_VAR 0 5
80857: PUSH
80858: LD_INT 1
80860: NEG
80861: ST_TO_ADDR
// exit ;
80862: GO 81099
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80864: LD_ADDR_VAR 0 12
80868: PUSH
80869: LD_VAR 0 1
80873: PPUSH
80874: LD_VAR 0 2
80878: PPUSH
80879: LD_VAR 0 3
80883: PPUSH
80884: LD_VAR 0 4
80888: PPUSH
80889: CALL 79949 0 4
80893: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80894: LD_ADDR_VAR 0 11
80898: PUSH
80899: LD_VAR 0 1
80903: PPUSH
80904: LD_VAR 0 2
80908: PPUSH
80909: LD_VAR 0 12
80913: PUSH
80914: LD_INT 1
80916: ARRAY
80917: PPUSH
80918: LD_VAR 0 12
80922: PUSH
80923: LD_INT 2
80925: ARRAY
80926: PPUSH
80927: CALL_OW 298
80931: ST_TO_ADDR
// distance := 9999 ;
80932: LD_ADDR_VAR 0 10
80936: PUSH
80937: LD_INT 9999
80939: ST_TO_ADDR
// for i := 0 to 5 do
80940: LD_ADDR_VAR 0 6
80944: PUSH
80945: DOUBLE
80946: LD_INT 0
80948: DEC
80949: ST_TO_ADDR
80950: LD_INT 5
80952: PUSH
80953: FOR_TO
80954: IFFALSE 81097
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80956: LD_ADDR_VAR 0 7
80960: PUSH
80961: LD_VAR 0 1
80965: PPUSH
80966: LD_VAR 0 6
80970: PPUSH
80971: LD_VAR 0 11
80975: PPUSH
80976: CALL_OW 272
80980: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80981: LD_ADDR_VAR 0 8
80985: PUSH
80986: LD_VAR 0 2
80990: PPUSH
80991: LD_VAR 0 6
80995: PPUSH
80996: LD_VAR 0 11
81000: PPUSH
81001: CALL_OW 273
81005: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81006: LD_VAR 0 7
81010: PPUSH
81011: LD_VAR 0 8
81015: PPUSH
81016: CALL_OW 488
81020: NOT
81021: IFFALSE 81025
// continue ;
81023: GO 80953
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81025: LD_ADDR_VAR 0 9
81029: PUSH
81030: LD_VAR 0 12
81034: PUSH
81035: LD_INT 1
81037: ARRAY
81038: PPUSH
81039: LD_VAR 0 12
81043: PUSH
81044: LD_INT 2
81046: ARRAY
81047: PPUSH
81048: LD_VAR 0 7
81052: PPUSH
81053: LD_VAR 0 8
81057: PPUSH
81058: CALL_OW 298
81062: ST_TO_ADDR
// if tmp < distance then
81063: LD_VAR 0 9
81067: PUSH
81068: LD_VAR 0 10
81072: LESS
81073: IFFALSE 81095
// begin result := i ;
81075: LD_ADDR_VAR 0 5
81079: PUSH
81080: LD_VAR 0 6
81084: ST_TO_ADDR
// distance := tmp ;
81085: LD_ADDR_VAR 0 10
81089: PUSH
81090: LD_VAR 0 9
81094: ST_TO_ADDR
// end ; end ;
81095: GO 80953
81097: POP
81098: POP
// end ;
81099: LD_VAR 0 5
81103: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81104: LD_INT 0
81106: PPUSH
81107: PPUSH
// if not driver or not IsInUnit ( driver ) then
81108: LD_VAR 0 1
81112: NOT
81113: PUSH
81114: LD_VAR 0 1
81118: PPUSH
81119: CALL_OW 310
81123: NOT
81124: OR
81125: IFFALSE 81129
// exit ;
81127: GO 81219
// vehicle := IsInUnit ( driver ) ;
81129: LD_ADDR_VAR 0 3
81133: PUSH
81134: LD_VAR 0 1
81138: PPUSH
81139: CALL_OW 310
81143: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81144: LD_VAR 0 1
81148: PPUSH
81149: LD_STRING \
81151: PUSH
81152: LD_INT 0
81154: PUSH
81155: LD_INT 0
81157: PUSH
81158: LD_INT 0
81160: PUSH
81161: LD_INT 0
81163: PUSH
81164: LD_INT 0
81166: PUSH
81167: LD_INT 0
81169: PUSH
81170: EMPTY
81171: LIST
81172: LIST
81173: LIST
81174: LIST
81175: LIST
81176: LIST
81177: LIST
81178: PUSH
81179: LD_STRING E
81181: PUSH
81182: LD_INT 0
81184: PUSH
81185: LD_INT 0
81187: PUSH
81188: LD_VAR 0 3
81192: PUSH
81193: LD_INT 0
81195: PUSH
81196: LD_INT 0
81198: PUSH
81199: LD_INT 0
81201: PUSH
81202: EMPTY
81203: LIST
81204: LIST
81205: LIST
81206: LIST
81207: LIST
81208: LIST
81209: LIST
81210: PUSH
81211: EMPTY
81212: LIST
81213: LIST
81214: PPUSH
81215: CALL_OW 446
// end ;
81219: LD_VAR 0 2
81223: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81224: LD_INT 0
81226: PPUSH
81227: PPUSH
// if not driver or not IsInUnit ( driver ) then
81228: LD_VAR 0 1
81232: NOT
81233: PUSH
81234: LD_VAR 0 1
81238: PPUSH
81239: CALL_OW 310
81243: NOT
81244: OR
81245: IFFALSE 81249
// exit ;
81247: GO 81339
// vehicle := IsInUnit ( driver ) ;
81249: LD_ADDR_VAR 0 3
81253: PUSH
81254: LD_VAR 0 1
81258: PPUSH
81259: CALL_OW 310
81263: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81264: LD_VAR 0 1
81268: PPUSH
81269: LD_STRING \
81271: PUSH
81272: LD_INT 0
81274: PUSH
81275: LD_INT 0
81277: PUSH
81278: LD_INT 0
81280: PUSH
81281: LD_INT 0
81283: PUSH
81284: LD_INT 0
81286: PUSH
81287: LD_INT 0
81289: PUSH
81290: EMPTY
81291: LIST
81292: LIST
81293: LIST
81294: LIST
81295: LIST
81296: LIST
81297: LIST
81298: PUSH
81299: LD_STRING E
81301: PUSH
81302: LD_INT 0
81304: PUSH
81305: LD_INT 0
81307: PUSH
81308: LD_VAR 0 3
81312: PUSH
81313: LD_INT 0
81315: PUSH
81316: LD_INT 0
81318: PUSH
81319: LD_INT 0
81321: PUSH
81322: EMPTY
81323: LIST
81324: LIST
81325: LIST
81326: LIST
81327: LIST
81328: LIST
81329: LIST
81330: PUSH
81331: EMPTY
81332: LIST
81333: LIST
81334: PPUSH
81335: CALL_OW 447
// end ;
81339: LD_VAR 0 2
81343: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81344: LD_INT 0
81346: PPUSH
81347: PPUSH
81348: PPUSH
// tmp := [ ] ;
81349: LD_ADDR_VAR 0 5
81353: PUSH
81354: EMPTY
81355: ST_TO_ADDR
// for i in units do
81356: LD_ADDR_VAR 0 4
81360: PUSH
81361: LD_VAR 0 1
81365: PUSH
81366: FOR_IN
81367: IFFALSE 81405
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81369: LD_ADDR_VAR 0 5
81373: PUSH
81374: LD_VAR 0 5
81378: PPUSH
81379: LD_VAR 0 5
81383: PUSH
81384: LD_INT 1
81386: PLUS
81387: PPUSH
81388: LD_VAR 0 4
81392: PPUSH
81393: CALL_OW 256
81397: PPUSH
81398: CALL_OW 2
81402: ST_TO_ADDR
81403: GO 81366
81405: POP
81406: POP
// if not tmp then
81407: LD_VAR 0 5
81411: NOT
81412: IFFALSE 81416
// exit ;
81414: GO 81464
// if asc then
81416: LD_VAR 0 2
81420: IFFALSE 81444
// result := SortListByListAsc ( units , tmp ) else
81422: LD_ADDR_VAR 0 3
81426: PUSH
81427: LD_VAR 0 1
81431: PPUSH
81432: LD_VAR 0 5
81436: PPUSH
81437: CALL_OW 76
81441: ST_TO_ADDR
81442: GO 81464
// result := SortListByListDesc ( units , tmp ) ;
81444: LD_ADDR_VAR 0 3
81448: PUSH
81449: LD_VAR 0 1
81453: PPUSH
81454: LD_VAR 0 5
81458: PPUSH
81459: CALL_OW 77
81463: ST_TO_ADDR
// end ;
81464: LD_VAR 0 3
81468: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81469: LD_INT 0
81471: PPUSH
81472: PPUSH
// task := GetTaskList ( mech ) ;
81473: LD_ADDR_VAR 0 4
81477: PUSH
81478: LD_VAR 0 1
81482: PPUSH
81483: CALL_OW 437
81487: ST_TO_ADDR
// if not task then
81488: LD_VAR 0 4
81492: NOT
81493: IFFALSE 81497
// exit ;
81495: GO 81539
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81497: LD_ADDR_VAR 0 3
81501: PUSH
81502: LD_VAR 0 4
81506: PUSH
81507: LD_INT 1
81509: ARRAY
81510: PUSH
81511: LD_INT 1
81513: ARRAY
81514: PUSH
81515: LD_STRING r
81517: EQUAL
81518: PUSH
81519: LD_VAR 0 4
81523: PUSH
81524: LD_INT 1
81526: ARRAY
81527: PUSH
81528: LD_INT 4
81530: ARRAY
81531: PUSH
81532: LD_VAR 0 2
81536: EQUAL
81537: AND
81538: ST_TO_ADDR
// end ;
81539: LD_VAR 0 3
81543: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81544: LD_INT 0
81546: PPUSH
// SetDir ( unit , d ) ;
81547: LD_VAR 0 1
81551: PPUSH
81552: LD_VAR 0 4
81556: PPUSH
81557: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
81561: LD_VAR 0 1
81565: PPUSH
81566: LD_VAR 0 2
81570: PPUSH
81571: LD_VAR 0 3
81575: PPUSH
81576: LD_VAR 0 5
81580: PPUSH
81581: CALL_OW 48
// end ;
81585: LD_VAR 0 6
81589: RET
// export function ToNaturalNumber ( number ) ; begin
81590: LD_INT 0
81592: PPUSH
// result := number div 1 ;
81593: LD_ADDR_VAR 0 2
81597: PUSH
81598: LD_VAR 0 1
81602: PUSH
81603: LD_INT 1
81605: DIV
81606: ST_TO_ADDR
// if number < 0 then
81607: LD_VAR 0 1
81611: PUSH
81612: LD_INT 0
81614: LESS
81615: IFFALSE 81625
// result := 0 ;
81617: LD_ADDR_VAR 0 2
81621: PUSH
81622: LD_INT 0
81624: ST_TO_ADDR
// end ;
81625: LD_VAR 0 2
81629: RET
// export function SortByClass ( units , class ) ; var un ; begin
81630: LD_INT 0
81632: PPUSH
81633: PPUSH
// if not units or not class then
81634: LD_VAR 0 1
81638: NOT
81639: PUSH
81640: LD_VAR 0 2
81644: NOT
81645: OR
81646: IFFALSE 81650
// exit ;
81648: GO 81745
// result := [ ] ;
81650: LD_ADDR_VAR 0 3
81654: PUSH
81655: EMPTY
81656: ST_TO_ADDR
// for un in units do
81657: LD_ADDR_VAR 0 4
81661: PUSH
81662: LD_VAR 0 1
81666: PUSH
81667: FOR_IN
81668: IFFALSE 81743
// if GetClass ( un ) = class then
81670: LD_VAR 0 4
81674: PPUSH
81675: CALL_OW 257
81679: PUSH
81680: LD_VAR 0 2
81684: EQUAL
81685: IFFALSE 81712
// result := Insert ( result , 1 , un ) else
81687: LD_ADDR_VAR 0 3
81691: PUSH
81692: LD_VAR 0 3
81696: PPUSH
81697: LD_INT 1
81699: PPUSH
81700: LD_VAR 0 4
81704: PPUSH
81705: CALL_OW 2
81709: ST_TO_ADDR
81710: GO 81741
// result := Replace ( result , result + 1 , un ) ;
81712: LD_ADDR_VAR 0 3
81716: PUSH
81717: LD_VAR 0 3
81721: PPUSH
81722: LD_VAR 0 3
81726: PUSH
81727: LD_INT 1
81729: PLUS
81730: PPUSH
81731: LD_VAR 0 4
81735: PPUSH
81736: CALL_OW 1
81740: ST_TO_ADDR
81741: GO 81667
81743: POP
81744: POP
// end ;
81745: LD_VAR 0 3
81749: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81750: LD_INT 0
81752: PPUSH
81753: PPUSH
81754: PPUSH
81755: PPUSH
81756: PPUSH
81757: PPUSH
81758: PPUSH
// result := [ ] ;
81759: LD_ADDR_VAR 0 4
81763: PUSH
81764: EMPTY
81765: ST_TO_ADDR
// if x - r < 0 then
81766: LD_VAR 0 1
81770: PUSH
81771: LD_VAR 0 3
81775: MINUS
81776: PUSH
81777: LD_INT 0
81779: LESS
81780: IFFALSE 81792
// min_x := 0 else
81782: LD_ADDR_VAR 0 8
81786: PUSH
81787: LD_INT 0
81789: ST_TO_ADDR
81790: GO 81808
// min_x := x - r ;
81792: LD_ADDR_VAR 0 8
81796: PUSH
81797: LD_VAR 0 1
81801: PUSH
81802: LD_VAR 0 3
81806: MINUS
81807: ST_TO_ADDR
// if y - r < 0 then
81808: LD_VAR 0 2
81812: PUSH
81813: LD_VAR 0 3
81817: MINUS
81818: PUSH
81819: LD_INT 0
81821: LESS
81822: IFFALSE 81834
// min_y := 0 else
81824: LD_ADDR_VAR 0 7
81828: PUSH
81829: LD_INT 0
81831: ST_TO_ADDR
81832: GO 81850
// min_y := y - r ;
81834: LD_ADDR_VAR 0 7
81838: PUSH
81839: LD_VAR 0 2
81843: PUSH
81844: LD_VAR 0 3
81848: MINUS
81849: ST_TO_ADDR
// max_x := x + r ;
81850: LD_ADDR_VAR 0 9
81854: PUSH
81855: LD_VAR 0 1
81859: PUSH
81860: LD_VAR 0 3
81864: PLUS
81865: ST_TO_ADDR
// max_y := y + r ;
81866: LD_ADDR_VAR 0 10
81870: PUSH
81871: LD_VAR 0 2
81875: PUSH
81876: LD_VAR 0 3
81880: PLUS
81881: ST_TO_ADDR
// for _x = min_x to max_x do
81882: LD_ADDR_VAR 0 5
81886: PUSH
81887: DOUBLE
81888: LD_VAR 0 8
81892: DEC
81893: ST_TO_ADDR
81894: LD_VAR 0 9
81898: PUSH
81899: FOR_TO
81900: IFFALSE 82001
// for _y = min_y to max_y do
81902: LD_ADDR_VAR 0 6
81906: PUSH
81907: DOUBLE
81908: LD_VAR 0 7
81912: DEC
81913: ST_TO_ADDR
81914: LD_VAR 0 10
81918: PUSH
81919: FOR_TO
81920: IFFALSE 81997
// begin if not ValidHex ( _x , _y ) then
81922: LD_VAR 0 5
81926: PPUSH
81927: LD_VAR 0 6
81931: PPUSH
81932: CALL_OW 488
81936: NOT
81937: IFFALSE 81941
// continue ;
81939: GO 81919
// if GetResourceTypeXY ( _x , _y ) then
81941: LD_VAR 0 5
81945: PPUSH
81946: LD_VAR 0 6
81950: PPUSH
81951: CALL_OW 283
81955: IFFALSE 81995
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81957: LD_ADDR_VAR 0 4
81961: PUSH
81962: LD_VAR 0 4
81966: PPUSH
81967: LD_VAR 0 4
81971: PUSH
81972: LD_INT 1
81974: PLUS
81975: PPUSH
81976: LD_VAR 0 5
81980: PUSH
81981: LD_VAR 0 6
81985: PUSH
81986: EMPTY
81987: LIST
81988: LIST
81989: PPUSH
81990: CALL_OW 1
81994: ST_TO_ADDR
// end ;
81995: GO 81919
81997: POP
81998: POP
81999: GO 81899
82001: POP
82002: POP
// end ;
82003: LD_VAR 0 4
82007: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82008: LD_INT 0
82010: PPUSH
82011: PPUSH
82012: PPUSH
82013: PPUSH
82014: PPUSH
82015: PPUSH
82016: PPUSH
82017: PPUSH
// if not units then
82018: LD_VAR 0 1
82022: NOT
82023: IFFALSE 82027
// exit ;
82025: GO 82555
// result := UnitFilter ( units , [ f_ok ] ) ;
82027: LD_ADDR_VAR 0 3
82031: PUSH
82032: LD_VAR 0 1
82036: PPUSH
82037: LD_INT 50
82039: PUSH
82040: EMPTY
82041: LIST
82042: PPUSH
82043: CALL_OW 72
82047: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
82048: LD_ADDR_VAR 0 8
82052: PUSH
82053: LD_VAR 0 1
82057: PUSH
82058: LD_INT 1
82060: ARRAY
82061: PPUSH
82062: CALL_OW 255
82066: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
82067: LD_ADDR_VAR 0 10
82071: PUSH
82072: LD_INT 29
82074: PUSH
82075: LD_INT 91
82077: PUSH
82078: LD_INT 49
82080: PUSH
82081: EMPTY
82082: LIST
82083: LIST
82084: LIST
82085: ST_TO_ADDR
// if not result then
82086: LD_VAR 0 3
82090: NOT
82091: IFFALSE 82095
// exit ;
82093: GO 82555
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
82095: LD_ADDR_VAR 0 5
82099: PUSH
82100: LD_INT 81
82102: PUSH
82103: LD_VAR 0 8
82107: PUSH
82108: EMPTY
82109: LIST
82110: LIST
82111: PPUSH
82112: CALL_OW 69
82116: ST_TO_ADDR
// for i in result do
82117: LD_ADDR_VAR 0 4
82121: PUSH
82122: LD_VAR 0 3
82126: PUSH
82127: FOR_IN
82128: IFFALSE 82553
// begin tag := GetTag ( i ) + 1 ;
82130: LD_ADDR_VAR 0 9
82134: PUSH
82135: LD_VAR 0 4
82139: PPUSH
82140: CALL_OW 110
82144: PUSH
82145: LD_INT 1
82147: PLUS
82148: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
82149: LD_ADDR_VAR 0 7
82153: PUSH
82154: LD_VAR 0 4
82158: PPUSH
82159: CALL_OW 250
82163: PPUSH
82164: LD_VAR 0 4
82168: PPUSH
82169: CALL_OW 251
82173: PPUSH
82174: LD_INT 4
82176: PPUSH
82177: CALL 81750 0 3
82181: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
82182: LD_VAR 0 4
82186: PPUSH
82187: CALL_OW 247
82191: PUSH
82192: LD_INT 2
82194: EQUAL
82195: PUSH
82196: LD_VAR 0 7
82200: PUSH
82201: LD_INT 2
82203: GREATER
82204: AND
82205: PUSH
82206: LD_VAR 0 4
82210: PPUSH
82211: CALL_OW 264
82215: PUSH
82216: LD_VAR 0 10
82220: IN
82221: NOT
82222: AND
82223: IFFALSE 82262
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
82225: LD_VAR 0 4
82229: PPUSH
82230: LD_VAR 0 7
82234: PUSH
82235: LD_INT 1
82237: ARRAY
82238: PUSH
82239: LD_INT 1
82241: ARRAY
82242: PPUSH
82243: LD_VAR 0 7
82247: PUSH
82248: LD_INT 1
82250: ARRAY
82251: PUSH
82252: LD_INT 2
82254: ARRAY
82255: PPUSH
82256: CALL_OW 116
82260: GO 82551
// if path > tag then
82262: LD_VAR 0 2
82266: PUSH
82267: LD_VAR 0 9
82271: GREATER
82272: IFFALSE 82480
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82274: LD_ADDR_VAR 0 6
82278: PUSH
82279: LD_VAR 0 5
82283: PPUSH
82284: LD_INT 91
82286: PUSH
82287: LD_VAR 0 4
82291: PUSH
82292: LD_INT 8
82294: PUSH
82295: EMPTY
82296: LIST
82297: LIST
82298: LIST
82299: PPUSH
82300: CALL_OW 72
82304: ST_TO_ADDR
// if nearEnemy then
82305: LD_VAR 0 6
82309: IFFALSE 82378
// begin if GetWeapon ( i ) = ru_time_lapser then
82311: LD_VAR 0 4
82315: PPUSH
82316: CALL_OW 264
82320: PUSH
82321: LD_INT 49
82323: EQUAL
82324: IFFALSE 82352
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82326: LD_VAR 0 4
82330: PPUSH
82331: LD_VAR 0 6
82335: PPUSH
82336: LD_VAR 0 4
82340: PPUSH
82341: CALL_OW 74
82345: PPUSH
82346: CALL_OW 112
82350: GO 82376
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82352: LD_VAR 0 4
82356: PPUSH
82357: LD_VAR 0 6
82361: PPUSH
82362: LD_VAR 0 4
82366: PPUSH
82367: CALL_OW 74
82371: PPUSH
82372: CALL 83626 0 2
// end else
82376: GO 82478
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82378: LD_VAR 0 4
82382: PPUSH
82383: LD_VAR 0 2
82387: PUSH
82388: LD_VAR 0 9
82392: ARRAY
82393: PUSH
82394: LD_INT 1
82396: ARRAY
82397: PPUSH
82398: LD_VAR 0 2
82402: PUSH
82403: LD_VAR 0 9
82407: ARRAY
82408: PUSH
82409: LD_INT 2
82411: ARRAY
82412: PPUSH
82413: CALL_OW 297
82417: PUSH
82418: LD_INT 6
82420: GREATER
82421: IFFALSE 82464
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82423: LD_VAR 0 4
82427: PPUSH
82428: LD_VAR 0 2
82432: PUSH
82433: LD_VAR 0 9
82437: ARRAY
82438: PUSH
82439: LD_INT 1
82441: ARRAY
82442: PPUSH
82443: LD_VAR 0 2
82447: PUSH
82448: LD_VAR 0 9
82452: ARRAY
82453: PUSH
82454: LD_INT 2
82456: ARRAY
82457: PPUSH
82458: CALL_OW 114
82462: GO 82478
// SetTag ( i , tag ) ;
82464: LD_VAR 0 4
82468: PPUSH
82469: LD_VAR 0 9
82473: PPUSH
82474: CALL_OW 109
// end else
82478: GO 82551
// if enemy then
82480: LD_VAR 0 5
82484: IFFALSE 82551
// begin if GetWeapon ( i ) = ru_time_lapser then
82486: LD_VAR 0 4
82490: PPUSH
82491: CALL_OW 264
82495: PUSH
82496: LD_INT 49
82498: EQUAL
82499: IFFALSE 82527
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82501: LD_VAR 0 4
82505: PPUSH
82506: LD_VAR 0 5
82510: PPUSH
82511: LD_VAR 0 4
82515: PPUSH
82516: CALL_OW 74
82520: PPUSH
82521: CALL_OW 112
82525: GO 82551
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82527: LD_VAR 0 4
82531: PPUSH
82532: LD_VAR 0 5
82536: PPUSH
82537: LD_VAR 0 4
82541: PPUSH
82542: CALL_OW 74
82546: PPUSH
82547: CALL 83626 0 2
// end ; end ;
82551: GO 82127
82553: POP
82554: POP
// end ;
82555: LD_VAR 0 3
82559: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82560: LD_INT 0
82562: PPUSH
82563: PPUSH
82564: PPUSH
// if not unit or IsInUnit ( unit ) then
82565: LD_VAR 0 1
82569: NOT
82570: PUSH
82571: LD_VAR 0 1
82575: PPUSH
82576: CALL_OW 310
82580: OR
82581: IFFALSE 82585
// exit ;
82583: GO 82676
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82585: LD_ADDR_VAR 0 4
82589: PUSH
82590: LD_VAR 0 1
82594: PPUSH
82595: CALL_OW 250
82599: PPUSH
82600: LD_VAR 0 2
82604: PPUSH
82605: LD_INT 1
82607: PPUSH
82608: CALL_OW 272
82612: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82613: LD_ADDR_VAR 0 5
82617: PUSH
82618: LD_VAR 0 1
82622: PPUSH
82623: CALL_OW 251
82627: PPUSH
82628: LD_VAR 0 2
82632: PPUSH
82633: LD_INT 1
82635: PPUSH
82636: CALL_OW 273
82640: ST_TO_ADDR
// if ValidHex ( x , y ) then
82641: LD_VAR 0 4
82645: PPUSH
82646: LD_VAR 0 5
82650: PPUSH
82651: CALL_OW 488
82655: IFFALSE 82676
// ComTurnXY ( unit , x , y ) ;
82657: LD_VAR 0 1
82661: PPUSH
82662: LD_VAR 0 4
82666: PPUSH
82667: LD_VAR 0 5
82671: PPUSH
82672: CALL_OW 118
// end ;
82676: LD_VAR 0 3
82680: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82681: LD_INT 0
82683: PPUSH
82684: PPUSH
// result := false ;
82685: LD_ADDR_VAR 0 3
82689: PUSH
82690: LD_INT 0
82692: ST_TO_ADDR
// if not units then
82693: LD_VAR 0 2
82697: NOT
82698: IFFALSE 82702
// exit ;
82700: GO 82747
// for i in units do
82702: LD_ADDR_VAR 0 4
82706: PUSH
82707: LD_VAR 0 2
82711: PUSH
82712: FOR_IN
82713: IFFALSE 82745
// if See ( side , i ) then
82715: LD_VAR 0 1
82719: PPUSH
82720: LD_VAR 0 4
82724: PPUSH
82725: CALL_OW 292
82729: IFFALSE 82743
// begin result := true ;
82731: LD_ADDR_VAR 0 3
82735: PUSH
82736: LD_INT 1
82738: ST_TO_ADDR
// exit ;
82739: POP
82740: POP
82741: GO 82747
// end ;
82743: GO 82712
82745: POP
82746: POP
// end ;
82747: LD_VAR 0 3
82751: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82752: LD_INT 0
82754: PPUSH
82755: PPUSH
82756: PPUSH
82757: PPUSH
// if not unit or not points then
82758: LD_VAR 0 1
82762: NOT
82763: PUSH
82764: LD_VAR 0 2
82768: NOT
82769: OR
82770: IFFALSE 82774
// exit ;
82772: GO 82864
// dist := 99999 ;
82774: LD_ADDR_VAR 0 5
82778: PUSH
82779: LD_INT 99999
82781: ST_TO_ADDR
// for i in points do
82782: LD_ADDR_VAR 0 4
82786: PUSH
82787: LD_VAR 0 2
82791: PUSH
82792: FOR_IN
82793: IFFALSE 82862
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82795: LD_ADDR_VAR 0 6
82799: PUSH
82800: LD_VAR 0 1
82804: PPUSH
82805: LD_VAR 0 4
82809: PUSH
82810: LD_INT 1
82812: ARRAY
82813: PPUSH
82814: LD_VAR 0 4
82818: PUSH
82819: LD_INT 2
82821: ARRAY
82822: PPUSH
82823: CALL_OW 297
82827: ST_TO_ADDR
// if tmpDist < dist then
82828: LD_VAR 0 6
82832: PUSH
82833: LD_VAR 0 5
82837: LESS
82838: IFFALSE 82860
// begin result := i ;
82840: LD_ADDR_VAR 0 3
82844: PUSH
82845: LD_VAR 0 4
82849: ST_TO_ADDR
// dist := tmpDist ;
82850: LD_ADDR_VAR 0 5
82854: PUSH
82855: LD_VAR 0 6
82859: ST_TO_ADDR
// end ; end ;
82860: GO 82792
82862: POP
82863: POP
// end ;
82864: LD_VAR 0 3
82868: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82869: LD_INT 0
82871: PPUSH
// uc_side := side ;
82872: LD_ADDR_OWVAR 20
82876: PUSH
82877: LD_VAR 0 1
82881: ST_TO_ADDR
// uc_nation := 3 ;
82882: LD_ADDR_OWVAR 21
82886: PUSH
82887: LD_INT 3
82889: ST_TO_ADDR
// vc_chassis := 25 ;
82890: LD_ADDR_OWVAR 37
82894: PUSH
82895: LD_INT 25
82897: ST_TO_ADDR
// vc_engine := engine_siberite ;
82898: LD_ADDR_OWVAR 39
82902: PUSH
82903: LD_INT 3
82905: ST_TO_ADDR
// vc_control := control_computer ;
82906: LD_ADDR_OWVAR 38
82910: PUSH
82911: LD_INT 3
82913: ST_TO_ADDR
// vc_weapon := 59 ;
82914: LD_ADDR_OWVAR 40
82918: PUSH
82919: LD_INT 59
82921: ST_TO_ADDR
// result := CreateVehicle ;
82922: LD_ADDR_VAR 0 5
82926: PUSH
82927: CALL_OW 45
82931: ST_TO_ADDR
// SetDir ( result , d ) ;
82932: LD_VAR 0 5
82936: PPUSH
82937: LD_VAR 0 4
82941: PPUSH
82942: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82946: LD_VAR 0 5
82950: PPUSH
82951: LD_VAR 0 2
82955: PPUSH
82956: LD_VAR 0 3
82960: PPUSH
82961: LD_INT 0
82963: PPUSH
82964: CALL_OW 48
// end ;
82968: LD_VAR 0 5
82972: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82973: LD_INT 0
82975: PPUSH
82976: PPUSH
82977: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82978: LD_ADDR_VAR 0 2
82982: PUSH
82983: LD_INT 0
82985: PUSH
82986: LD_INT 0
82988: PUSH
82989: LD_INT 0
82991: PUSH
82992: LD_INT 0
82994: PUSH
82995: EMPTY
82996: LIST
82997: LIST
82998: LIST
82999: LIST
83000: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83001: LD_VAR 0 1
83005: NOT
83006: PUSH
83007: LD_VAR 0 1
83011: PPUSH
83012: CALL_OW 264
83016: PUSH
83017: LD_INT 12
83019: PUSH
83020: LD_INT 51
83022: PUSH
83023: LD_INT 32
83025: PUSH
83026: LD_INT 89
83028: PUSH
83029: EMPTY
83030: LIST
83031: LIST
83032: LIST
83033: LIST
83034: IN
83035: NOT
83036: OR
83037: IFFALSE 83041
// exit ;
83039: GO 83139
// for i := 1 to 3 do
83041: LD_ADDR_VAR 0 3
83045: PUSH
83046: DOUBLE
83047: LD_INT 1
83049: DEC
83050: ST_TO_ADDR
83051: LD_INT 3
83053: PUSH
83054: FOR_TO
83055: IFFALSE 83137
// begin tmp := GetCargo ( cargo , i ) ;
83057: LD_ADDR_VAR 0 4
83061: PUSH
83062: LD_VAR 0 1
83066: PPUSH
83067: LD_VAR 0 3
83071: PPUSH
83072: CALL_OW 289
83076: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
83077: LD_ADDR_VAR 0 2
83081: PUSH
83082: LD_VAR 0 2
83086: PPUSH
83087: LD_VAR 0 3
83091: PPUSH
83092: LD_VAR 0 4
83096: PPUSH
83097: CALL_OW 1
83101: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
83102: LD_ADDR_VAR 0 2
83106: PUSH
83107: LD_VAR 0 2
83111: PPUSH
83112: LD_INT 4
83114: PPUSH
83115: LD_VAR 0 2
83119: PUSH
83120: LD_INT 4
83122: ARRAY
83123: PUSH
83124: LD_VAR 0 4
83128: PLUS
83129: PPUSH
83130: CALL_OW 1
83134: ST_TO_ADDR
// end ;
83135: GO 83054
83137: POP
83138: POP
// end ;
83139: LD_VAR 0 2
83143: RET
// export function Length ( array ) ; begin
83144: LD_INT 0
83146: PPUSH
// result := array + 0 ;
83147: LD_ADDR_VAR 0 2
83151: PUSH
83152: LD_VAR 0 1
83156: PUSH
83157: LD_INT 0
83159: PLUS
83160: ST_TO_ADDR
// end ;
83161: LD_VAR 0 2
83165: RET
// export function PrepareArray ( array ) ; begin
83166: LD_INT 0
83168: PPUSH
// result := array diff 0 ;
83169: LD_ADDR_VAR 0 2
83173: PUSH
83174: LD_VAR 0 1
83178: PUSH
83179: LD_INT 0
83181: DIFF
83182: ST_TO_ADDR
// if not result [ 1 ] then
83183: LD_VAR 0 2
83187: PUSH
83188: LD_INT 1
83190: ARRAY
83191: NOT
83192: IFFALSE 83212
// result := Delete ( result , 1 ) ;
83194: LD_ADDR_VAR 0 2
83198: PUSH
83199: LD_VAR 0 2
83203: PPUSH
83204: LD_INT 1
83206: PPUSH
83207: CALL_OW 3
83211: ST_TO_ADDR
// end ;
83212: LD_VAR 0 2
83216: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
83217: LD_INT 0
83219: PPUSH
83220: PPUSH
83221: PPUSH
83222: PPUSH
// sibRocketRange := 25 ;
83223: LD_ADDR_VAR 0 6
83227: PUSH
83228: LD_INT 25
83230: ST_TO_ADDR
// result := false ;
83231: LD_ADDR_VAR 0 4
83235: PUSH
83236: LD_INT 0
83238: ST_TO_ADDR
// for i := 0 to 5 do
83239: LD_ADDR_VAR 0 5
83243: PUSH
83244: DOUBLE
83245: LD_INT 0
83247: DEC
83248: ST_TO_ADDR
83249: LD_INT 5
83251: PUSH
83252: FOR_TO
83253: IFFALSE 83320
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83255: LD_VAR 0 1
83259: PPUSH
83260: LD_VAR 0 5
83264: PPUSH
83265: LD_VAR 0 6
83269: PPUSH
83270: CALL_OW 272
83274: PPUSH
83275: LD_VAR 0 2
83279: PPUSH
83280: LD_VAR 0 5
83284: PPUSH
83285: LD_VAR 0 6
83289: PPUSH
83290: CALL_OW 273
83294: PPUSH
83295: LD_VAR 0 3
83299: PPUSH
83300: CALL_OW 309
83304: IFFALSE 83318
// begin result := true ;
83306: LD_ADDR_VAR 0 4
83310: PUSH
83311: LD_INT 1
83313: ST_TO_ADDR
// exit ;
83314: POP
83315: POP
83316: GO 83322
// end ;
83318: GO 83252
83320: POP
83321: POP
// end ;
83322: LD_VAR 0 4
83326: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83327: LD_INT 0
83329: PPUSH
83330: PPUSH
83331: PPUSH
// if btype = b_depot then
83332: LD_VAR 0 2
83336: PUSH
83337: LD_INT 0
83339: EQUAL
83340: IFFALSE 83352
// begin result := true ;
83342: LD_ADDR_VAR 0 3
83346: PUSH
83347: LD_INT 1
83349: ST_TO_ADDR
// exit ;
83350: GO 83468
// end ; pom := GetBase ( depot ) ;
83352: LD_ADDR_VAR 0 4
83356: PUSH
83357: LD_VAR 0 1
83361: PPUSH
83362: CALL_OW 274
83366: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83367: LD_ADDR_VAR 0 5
83371: PUSH
83372: LD_VAR 0 2
83376: PPUSH
83377: LD_VAR 0 1
83381: PPUSH
83382: CALL_OW 248
83386: PPUSH
83387: CALL_OW 450
83391: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83392: LD_ADDR_VAR 0 3
83396: PUSH
83397: LD_VAR 0 4
83401: PPUSH
83402: LD_INT 1
83404: PPUSH
83405: CALL_OW 275
83409: PUSH
83410: LD_VAR 0 5
83414: PUSH
83415: LD_INT 1
83417: ARRAY
83418: GREATEREQUAL
83419: PUSH
83420: LD_VAR 0 4
83424: PPUSH
83425: LD_INT 2
83427: PPUSH
83428: CALL_OW 275
83432: PUSH
83433: LD_VAR 0 5
83437: PUSH
83438: LD_INT 2
83440: ARRAY
83441: GREATEREQUAL
83442: AND
83443: PUSH
83444: LD_VAR 0 4
83448: PPUSH
83449: LD_INT 3
83451: PPUSH
83452: CALL_OW 275
83456: PUSH
83457: LD_VAR 0 5
83461: PUSH
83462: LD_INT 3
83464: ARRAY
83465: GREATEREQUAL
83466: AND
83467: ST_TO_ADDR
// end ;
83468: LD_VAR 0 3
83472: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83473: LD_INT 0
83475: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83476: LD_VAR 0 1
83480: PPUSH
83481: LD_VAR 0 2
83485: PPUSH
83486: LD_INT 0
83488: PPUSH
83489: LD_INT 0
83491: PPUSH
83492: LD_INT 1
83494: PPUSH
83495: LD_INT 0
83497: PPUSH
83498: CALL_OW 587
// end ;
83502: LD_VAR 0 3
83506: RET
// export function CenterOnNow ( unit ) ; begin
83507: LD_INT 0
83509: PPUSH
// result := IsInUnit ( unit ) ;
83510: LD_ADDR_VAR 0 2
83514: PUSH
83515: LD_VAR 0 1
83519: PPUSH
83520: CALL_OW 310
83524: ST_TO_ADDR
// if not result then
83525: LD_VAR 0 2
83529: NOT
83530: IFFALSE 83542
// result := unit ;
83532: LD_ADDR_VAR 0 2
83536: PUSH
83537: LD_VAR 0 1
83541: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83542: LD_VAR 0 1
83546: PPUSH
83547: CALL_OW 87
// end ;
83551: LD_VAR 0 2
83555: RET
// export function ComMoveHex ( unit , hex ) ; begin
83556: LD_INT 0
83558: PPUSH
// if not hex then
83559: LD_VAR 0 2
83563: NOT
83564: IFFALSE 83568
// exit ;
83566: GO 83621
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83568: LD_VAR 0 2
83572: PUSH
83573: LD_INT 1
83575: ARRAY
83576: PPUSH
83577: LD_VAR 0 2
83581: PUSH
83582: LD_INT 2
83584: ARRAY
83585: PPUSH
83586: CALL_OW 428
83590: IFFALSE 83594
// exit ;
83592: GO 83621
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83594: LD_VAR 0 1
83598: PPUSH
83599: LD_VAR 0 2
83603: PUSH
83604: LD_INT 1
83606: ARRAY
83607: PPUSH
83608: LD_VAR 0 2
83612: PUSH
83613: LD_INT 2
83615: ARRAY
83616: PPUSH
83617: CALL_OW 111
// end ;
83621: LD_VAR 0 3
83625: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83626: LD_INT 0
83628: PPUSH
83629: PPUSH
83630: PPUSH
// if not unit or not enemy then
83631: LD_VAR 0 1
83635: NOT
83636: PUSH
83637: LD_VAR 0 2
83641: NOT
83642: OR
83643: IFFALSE 83647
// exit ;
83645: GO 83771
// x := GetX ( enemy ) ;
83647: LD_ADDR_VAR 0 4
83651: PUSH
83652: LD_VAR 0 2
83656: PPUSH
83657: CALL_OW 250
83661: ST_TO_ADDR
// y := GetY ( enemy ) ;
83662: LD_ADDR_VAR 0 5
83666: PUSH
83667: LD_VAR 0 2
83671: PPUSH
83672: CALL_OW 251
83676: ST_TO_ADDR
// if ValidHex ( x , y ) then
83677: LD_VAR 0 4
83681: PPUSH
83682: LD_VAR 0 5
83686: PPUSH
83687: CALL_OW 488
83691: IFFALSE 83771
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
83693: LD_VAR 0 2
83697: PPUSH
83698: CALL_OW 247
83702: PUSH
83703: LD_INT 3
83705: PUSH
83706: LD_INT 2
83708: PUSH
83709: EMPTY
83710: LIST
83711: LIST
83712: IN
83713: PUSH
83714: LD_VAR 0 1
83718: PPUSH
83719: CALL_OW 255
83723: PPUSH
83724: LD_VAR 0 2
83728: PPUSH
83729: CALL_OW 292
83733: OR
83734: IFFALSE 83752
// ComAttackUnit ( unit , enemy ) else
83736: LD_VAR 0 1
83740: PPUSH
83741: LD_VAR 0 2
83745: PPUSH
83746: CALL_OW 115
83750: GO 83771
// ComAgressiveMove ( unit , x , y ) ;
83752: LD_VAR 0 1
83756: PPUSH
83757: LD_VAR 0 4
83761: PPUSH
83762: LD_VAR 0 5
83766: PPUSH
83767: CALL_OW 114
// end ;
83771: LD_VAR 0 3
83775: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
83776: LD_INT 0
83778: PPUSH
83779: PPUSH
83780: PPUSH
// list := AreaToList ( area , 0 ) ;
83781: LD_ADDR_VAR 0 5
83785: PUSH
83786: LD_VAR 0 1
83790: PPUSH
83791: LD_INT 0
83793: PPUSH
83794: CALL_OW 517
83798: ST_TO_ADDR
// if not list then
83799: LD_VAR 0 5
83803: NOT
83804: IFFALSE 83808
// exit ;
83806: GO 83938
// if all then
83808: LD_VAR 0 2
83812: IFFALSE 83900
// begin for i := 1 to list [ 1 ] do
83814: LD_ADDR_VAR 0 4
83818: PUSH
83819: DOUBLE
83820: LD_INT 1
83822: DEC
83823: ST_TO_ADDR
83824: LD_VAR 0 5
83828: PUSH
83829: LD_INT 1
83831: ARRAY
83832: PUSH
83833: FOR_TO
83834: IFFALSE 83896
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
83836: LD_ADDR_VAR 0 3
83840: PUSH
83841: LD_VAR 0 3
83845: PPUSH
83846: LD_VAR 0 3
83850: PUSH
83851: LD_INT 1
83853: PLUS
83854: PPUSH
83855: LD_VAR 0 5
83859: PUSH
83860: LD_INT 1
83862: ARRAY
83863: PUSH
83864: LD_VAR 0 4
83868: ARRAY
83869: PUSH
83870: LD_VAR 0 5
83874: PUSH
83875: LD_INT 2
83877: ARRAY
83878: PUSH
83879: LD_VAR 0 4
83883: ARRAY
83884: PUSH
83885: EMPTY
83886: LIST
83887: LIST
83888: PPUSH
83889: CALL_OW 1
83893: ST_TO_ADDR
83894: GO 83833
83896: POP
83897: POP
// exit ;
83898: GO 83938
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
83900: LD_ADDR_VAR 0 3
83904: PUSH
83905: LD_VAR 0 5
83909: PUSH
83910: LD_INT 1
83912: ARRAY
83913: PUSH
83914: LD_INT 1
83916: ARRAY
83917: PUSH
83918: LD_VAR 0 5
83922: PUSH
83923: LD_INT 2
83925: ARRAY
83926: PUSH
83927: LD_INT 1
83929: ARRAY
83930: PUSH
83931: EMPTY
83932: LIST
83933: LIST
83934: PUSH
83935: EMPTY
83936: LIST
83937: ST_TO_ADDR
// end ;
83938: LD_VAR 0 3
83942: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
83943: LD_INT 0
83945: PPUSH
83946: PPUSH
// list := AreaToList ( area , 0 ) ;
83947: LD_ADDR_VAR 0 4
83951: PUSH
83952: LD_VAR 0 1
83956: PPUSH
83957: LD_INT 0
83959: PPUSH
83960: CALL_OW 517
83964: ST_TO_ADDR
// if not list then
83965: LD_VAR 0 4
83969: NOT
83970: IFFALSE 83974
// exit ;
83972: GO 84015
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
83974: LD_ADDR_VAR 0 3
83978: PUSH
83979: LD_VAR 0 4
83983: PUSH
83984: LD_INT 1
83986: ARRAY
83987: PUSH
83988: LD_INT 1
83990: ARRAY
83991: PUSH
83992: LD_VAR 0 4
83996: PUSH
83997: LD_INT 2
83999: ARRAY
84000: PUSH
84001: LD_INT 1
84003: ARRAY
84004: PUSH
84005: LD_VAR 0 2
84009: PUSH
84010: EMPTY
84011: LIST
84012: LIST
84013: LIST
84014: ST_TO_ADDR
// end ;
84015: LD_VAR 0 3
84019: RET
// export function First ( array ) ; begin
84020: LD_INT 0
84022: PPUSH
// if not array then
84023: LD_VAR 0 1
84027: NOT
84028: IFFALSE 84032
// exit ;
84030: GO 84046
// result := array [ 1 ] ;
84032: LD_ADDR_VAR 0 2
84036: PUSH
84037: LD_VAR 0 1
84041: PUSH
84042: LD_INT 1
84044: ARRAY
84045: ST_TO_ADDR
// end ;
84046: LD_VAR 0 2
84050: RET
// export function Last ( array ) ; begin
84051: LD_INT 0
84053: PPUSH
// if not array then
84054: LD_VAR 0 1
84058: NOT
84059: IFFALSE 84063
// exit ;
84061: GO 84079
// result := array [ array ] ;
84063: LD_ADDR_VAR 0 2
84067: PUSH
84068: LD_VAR 0 1
84072: PUSH
84073: LD_VAR 0 1
84077: ARRAY
84078: ST_TO_ADDR
// end ;
84079: LD_VAR 0 2
84083: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
84084: LD_INT 0
84086: PPUSH
84087: PPUSH
// result := [ ] ;
84088: LD_ADDR_VAR 0 5
84092: PUSH
84093: EMPTY
84094: ST_TO_ADDR
// if not array then
84095: LD_VAR 0 1
84099: NOT
84100: IFFALSE 84104
// exit ;
84102: GO 84216
// for i := 1 to array do
84104: LD_ADDR_VAR 0 6
84108: PUSH
84109: DOUBLE
84110: LD_INT 1
84112: DEC
84113: ST_TO_ADDR
84114: LD_VAR 0 1
84118: PUSH
84119: FOR_TO
84120: IFFALSE 84214
// if array [ i ] [ index ] = value then
84122: LD_VAR 0 1
84126: PUSH
84127: LD_VAR 0 6
84131: ARRAY
84132: PUSH
84133: LD_VAR 0 2
84137: ARRAY
84138: PUSH
84139: LD_VAR 0 3
84143: EQUAL
84144: IFFALSE 84212
// begin if indexColumn then
84146: LD_VAR 0 4
84150: IFFALSE 84186
// result := Join ( result , array [ i ] [ indexColumn ] ) else
84152: LD_ADDR_VAR 0 5
84156: PUSH
84157: LD_VAR 0 5
84161: PPUSH
84162: LD_VAR 0 1
84166: PUSH
84167: LD_VAR 0 6
84171: ARRAY
84172: PUSH
84173: LD_VAR 0 4
84177: ARRAY
84178: PPUSH
84179: CALL 79404 0 2
84183: ST_TO_ADDR
84184: GO 84212
// result := Join ( result , array [ i ] ) ;
84186: LD_ADDR_VAR 0 5
84190: PUSH
84191: LD_VAR 0 5
84195: PPUSH
84196: LD_VAR 0 1
84200: PUSH
84201: LD_VAR 0 6
84205: ARRAY
84206: PPUSH
84207: CALL 79404 0 2
84211: ST_TO_ADDR
// end ;
84212: GO 84119
84214: POP
84215: POP
// end ;
84216: LD_VAR 0 5
84220: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
84221: LD_INT 0
84223: PPUSH
// if not vehicles or not parkingPoint then
84224: LD_VAR 0 1
84228: NOT
84229: PUSH
84230: LD_VAR 0 2
84234: NOT
84235: OR
84236: IFFALSE 84240
// exit ;
84238: GO 84338
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
84240: LD_ADDR_VAR 0 1
84244: PUSH
84245: LD_VAR 0 1
84249: PPUSH
84250: LD_INT 50
84252: PUSH
84253: EMPTY
84254: LIST
84255: PUSH
84256: LD_INT 3
84258: PUSH
84259: LD_INT 92
84261: PUSH
84262: LD_VAR 0 2
84266: PUSH
84267: LD_INT 1
84269: ARRAY
84270: PUSH
84271: LD_VAR 0 2
84275: PUSH
84276: LD_INT 2
84278: ARRAY
84279: PUSH
84280: LD_INT 8
84282: PUSH
84283: EMPTY
84284: LIST
84285: LIST
84286: LIST
84287: LIST
84288: PUSH
84289: EMPTY
84290: LIST
84291: LIST
84292: PUSH
84293: EMPTY
84294: LIST
84295: LIST
84296: PPUSH
84297: CALL_OW 72
84301: ST_TO_ADDR
// if not vehicles then
84302: LD_VAR 0 1
84306: NOT
84307: IFFALSE 84311
// exit ;
84309: GO 84338
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
84311: LD_VAR 0 1
84315: PPUSH
84316: LD_VAR 0 2
84320: PUSH
84321: LD_INT 1
84323: ARRAY
84324: PPUSH
84325: LD_VAR 0 2
84329: PUSH
84330: LD_INT 2
84332: ARRAY
84333: PPUSH
84334: CALL_OW 111
// end ;
84338: LD_VAR 0 3
84342: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
84343: LD_INT 0
84345: PPUSH
84346: PPUSH
84347: PPUSH
// if not side or not area then
84348: LD_VAR 0 1
84352: NOT
84353: PUSH
84354: LD_VAR 0 2
84358: NOT
84359: OR
84360: IFFALSE 84364
// exit ;
84362: GO 84483
// tmp := AreaToList ( area , 0 ) ;
84364: LD_ADDR_VAR 0 5
84368: PUSH
84369: LD_VAR 0 2
84373: PPUSH
84374: LD_INT 0
84376: PPUSH
84377: CALL_OW 517
84381: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
84382: LD_ADDR_VAR 0 4
84386: PUSH
84387: DOUBLE
84388: LD_INT 1
84390: DEC
84391: ST_TO_ADDR
84392: LD_VAR 0 5
84396: PUSH
84397: LD_INT 1
84399: ARRAY
84400: PUSH
84401: FOR_TO
84402: IFFALSE 84481
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
84404: LD_VAR 0 5
84408: PUSH
84409: LD_INT 1
84411: ARRAY
84412: PUSH
84413: LD_VAR 0 4
84417: ARRAY
84418: PPUSH
84419: LD_VAR 0 5
84423: PUSH
84424: LD_INT 2
84426: ARRAY
84427: PUSH
84428: LD_VAR 0 4
84432: ARRAY
84433: PPUSH
84434: CALL_OW 351
84438: IFFALSE 84479
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
84440: LD_VAR 0 5
84444: PUSH
84445: LD_INT 1
84447: ARRAY
84448: PUSH
84449: LD_VAR 0 4
84453: ARRAY
84454: PPUSH
84455: LD_VAR 0 5
84459: PUSH
84460: LD_INT 2
84462: ARRAY
84463: PUSH
84464: LD_VAR 0 4
84468: ARRAY
84469: PPUSH
84470: LD_VAR 0 1
84474: PPUSH
84475: CALL_OW 244
// end ;
84479: GO 84401
84481: POP
84482: POP
// end ; end_of_file
84483: LD_VAR 0 3
84487: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84488: LD_VAR 0 1
84492: PUSH
84493: LD_INT 200
84495: DOUBLE
84496: GREATEREQUAL
84497: IFFALSE 84505
84499: LD_INT 299
84501: DOUBLE
84502: LESSEQUAL
84503: IFTRUE 84507
84505: GO 84539
84507: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84508: LD_VAR 0 1
84512: PPUSH
84513: LD_VAR 0 2
84517: PPUSH
84518: LD_VAR 0 3
84522: PPUSH
84523: LD_VAR 0 4
84527: PPUSH
84528: LD_VAR 0 5
84532: PPUSH
84533: CALL 36973 0 5
84537: GO 84616
84539: LD_INT 300
84541: DOUBLE
84542: GREATEREQUAL
84543: IFFALSE 84551
84545: LD_INT 399
84547: DOUBLE
84548: LESSEQUAL
84549: IFTRUE 84553
84551: GO 84615
84553: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84554: LD_VAR 0 1
84558: PPUSH
84559: LD_VAR 0 2
84563: PPUSH
84564: LD_VAR 0 3
84568: PPUSH
84569: LD_VAR 0 4
84573: PPUSH
84574: LD_VAR 0 5
84578: PPUSH
84579: LD_VAR 0 6
84583: PPUSH
84584: LD_VAR 0 7
84588: PPUSH
84589: LD_VAR 0 8
84593: PPUSH
84594: LD_VAR 0 9
84598: PPUSH
84599: LD_VAR 0 10
84603: PPUSH
84604: LD_VAR 0 11
84608: PPUSH
84609: CALL 32961 0 11
84613: GO 84616
84615: POP
// end ;
84616: PPOPN 11
84618: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84619: LD_VAR 0 1
84623: PPUSH
84624: LD_VAR 0 2
84628: PPUSH
84629: LD_VAR 0 3
84633: PPUSH
84634: LD_VAR 0 4
84638: PPUSH
84639: LD_VAR 0 5
84643: PPUSH
84644: CALL 36438 0 5
// end ; end_of_file
84648: PPOPN 5
84650: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84651: LD_VAR 0 1
84655: PPUSH
84656: LD_VAR 0 2
84660: PPUSH
84661: LD_VAR 0 3
84665: PPUSH
84666: LD_VAR 0 4
84670: PPUSH
84671: LD_VAR 0 5
84675: PPUSH
84676: LD_VAR 0 6
84680: PPUSH
84681: CALL 20613 0 6
// end ;
84685: PPOPN 6
84687: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84688: LD_INT 0
84690: PPUSH
// begin if not units then
84691: LD_VAR 0 1
84695: NOT
84696: IFFALSE 84700
// exit ;
84698: GO 84700
// end ;
84700: PPOPN 7
84702: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84703: CALL 20500 0 0
// end ;
84707: PPOPN 1
84709: END
