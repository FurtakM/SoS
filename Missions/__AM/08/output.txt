// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 , macmilan_squad ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// mission_prefix := 08_ ;
  15: LD_ADDR_EXP 43
  19: PUSH
  20: LD_STRING 08_
  22: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  23: LD_ADDR_EXP 44
  27: PUSH
  28: LD_STRING 07c_
  30: ST_TO_ADDR
// JMMArrive = 0 ;
  31: LD_ADDR_EXP 39
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// SikorskyArrive = 0 ;
  39: LD_ADDR_EXP 18
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  47: LD_ADDR_EXP 19
  51: PUSH
  52: LD_INT 35
  54: ST_TO_ADDR
// SikorskyAI = 0 ;
  55: LD_ADDR_EXP 20
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// SikorskyStatus = 0 ;
  63: LD_ADDR_EXP 21
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// firstAttack = 0 ;
  71: LD_ADDR_EXP 33
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// secondAttack = 0 ;
  79: LD_ADDR_EXP 34
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// startCutscene = 1 ;
  87: LD_ADDR_EXP 38
  91: PUSH
  92: LD_INT 1
  94: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  95: LD_ADDR_EXP 12
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 0
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// russianAI = 0 ;
 111: LD_ADDR_EXP 27
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// escapeAvalaible = 0 ;
 126: LD_ADDR_EXP 36
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// defenders_list = [ ] ;
 134: LD_ADDR_EXP 32
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// varEvent1 = 0 ;
 141: LD_ADDR_EXP 41
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// timerStatus = 0 ;
 149: LD_ADDR_EXP 35
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// supply = [ 18 , 17 , 15 , 14 ] [ Difficulty ] ;
 157: LD_ADDR_EXP 40
 161: PUSH
 162: LD_INT 18
 164: PUSH
 165: LD_INT 17
 167: PUSH
 168: LD_INT 15
 170: PUSH
 171: LD_INT 14
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_OWVAR 67
 184: ARRAY
 185: ST_TO_ADDR
// debugMode = 0 ;
 186: LD_ADDR_EXP 45
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// PrepareDifficulty ;
 194: CALL 7766 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 198: LD_INT 43
 200: PPUSH
 201: LD_INT 22
 203: PPUSH
 204: LD_INT 1
 206: PPUSH
 207: LD_INT 333
 209: NEG
 210: PPUSH
 211: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 215: LD_INT 43
 217: PPUSH
 218: LD_INT 22
 220: PPUSH
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 331
// PrepareGammaBase ;
 228: CALL 2639 0 0
// PrepareHeroes ;
 232: CALL 575 0 0
// PrepareRussianCommander ;
 236: CALL 6622 0 0
// PrepareRussians ;
 240: CALL 6940 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 244: LD_INT 22
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: PUSH
 254: LD_INT 25
 256: PUSH
 257: LD_INT 2
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PPUSH
 268: CALL_OW 69
 272: PPUSH
 273: LD_INT 0
 275: PPUSH
 276: LD_INT 90
 278: PPUSH
 279: LD_INT 86
 281: PPUSH
 282: LD_INT 3
 284: PPUSH
 285: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 289: LD_INT 3
 291: PPUSH
 292: LD_INT 24
 294: PPUSH
 295: LD_INT 3
 297: PPUSH
 298: LD_EXP 25
 302: PPUSH
 303: LD_EXP 26
 307: PPUSH
 308: CALL_OW 12
 312: PPUSH
 313: LD_INT 6
 315: PPUSH
 316: LD_INT 4
 318: PPUSH
 319: CALL 9191 0 6
// PrepareCutsceneAttack ;
 323: CALL 6674 0 0
// end ;
 327: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 328: LD_INT 22
 330: PUSH
 331: LD_INT 1
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 34
 340: PUSH
 341: LD_INT 6
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: PPUSH
 352: CALL_OW 69
 356: PUSH
 357: LD_INT 6
 359: GREATEREQUAL
 360: IFFALSE 372
 362: GO 364
 364: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 365: LD_STRING ACH_ARMOR
 367: PPUSH
 368: CALL_OW 543
 372: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 373: LD_EXP 45
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 572
 383: GO 385
 385: DISABLE
 386: LD_INT 0
 388: PPUSH
// begin enable ;
 389: ENABLE
// fogoff ( true ) ;
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 397: LD_ADDR_VAR 0 1
 401: PUSH
 402: LD_INT 22
 404: PUSH
 405: LD_INT 1
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: PUSH
 412: LD_INT 21
 414: PUSH
 415: LD_INT 1
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PPUSH
 426: CALL_OW 69
 430: PUSH
 431: FOR_IN
 432: IFFALSE 448
// SetLives ( i , 1000 ) ;
 434: LD_VAR 0 1
 438: PPUSH
 439: LD_INT 1000
 441: PPUSH
 442: CALL_OW 234
 446: GO 431
 448: POP
 449: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 450: LD_ADDR_VAR 0 1
 454: PUSH
 455: LD_INT 22
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 1
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PPUSH
 479: CALL_OW 69
 483: PUSH
 484: FOR_IN
 485: IFFALSE 509
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 274
 496: PPUSH
 497: LD_INT 1
 499: PPUSH
 500: LD_INT 9999
 502: PPUSH
 503: CALL_OW 277
 507: GO 484
 509: POP
 510: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 511: LD_ADDR_VAR 0 1
 515: PUSH
 516: LD_INT 22
 518: PUSH
 519: LD_INT 1
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: PUSH
 526: LD_INT 30
 528: PUSH
 529: LD_INT 1
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PPUSH
 540: CALL_OW 69
 544: PUSH
 545: FOR_IN
 546: IFFALSE 570
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 548: LD_VAR 0 1
 552: PPUSH
 553: CALL_OW 274
 557: PPUSH
 558: LD_INT 2
 560: PPUSH
 561: LD_INT 9999
 563: PPUSH
 564: CALL_OW 277
 568: GO 545
 570: POP
 571: POP
// end ; end_of_file
 572: PPOPN 1
 574: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 575: LD_INT 0
 577: PPUSH
 578: PPUSH
 579: PPUSH
 580: PPUSH
 581: PPUSH
 582: PPUSH
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
 587: PPUSH
 588: PPUSH
 589: PPUSH
 590: PPUSH
 591: PPUSH
// uc_side = 1 ;
 592: LD_ADDR_OWVAR 20
 596: PUSH
 597: LD_INT 1
 599: ST_TO_ADDR
// uc_nation = 1 ;
 600: LD_ADDR_OWVAR 21
 604: PUSH
 605: LD_INT 1
 607: ST_TO_ADDR
// if gammaCommander = 1 then
 608: LD_EXP 12
 612: PUSH
 613: LD_INT 1
 615: EQUAL
 616: IFFALSE 667
// begin Donaldson = PrepareUnit ( Donaldson , true , 04_ ) ;
 618: LD_ADDR_EXP 3
 622: PUSH
 623: LD_STRING Donaldson
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: LD_STRING 04_
 631: PPUSH
 632: CALL 46240 0 3
 636: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 637: LD_EXP 3
 641: PPUSH
 642: LD_INT 54
 644: PPUSH
 645: LD_INT 25
 647: PPUSH
 648: LD_INT 8
 650: PPUSH
 651: LD_INT 0
 653: PPUSH
 654: CALL_OW 50
// ComHold ( Donaldson ) ;
 658: LD_EXP 3
 662: PPUSH
 663: CALL_OW 140
// end ; if gammaCommander = 2 then
 667: LD_EXP 12
 671: PUSH
 672: LD_INT 2
 674: EQUAL
 675: IFFALSE 726
// begin Brown = PrepareUnit ( Brown , true , 04_ ) ;
 677: LD_ADDR_EXP 2
 681: PUSH
 682: LD_STRING Brown
 684: PPUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_STRING 04_
 690: PPUSH
 691: CALL 46240 0 3
 695: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 696: LD_EXP 2
 700: PPUSH
 701: LD_INT 54
 703: PPUSH
 704: LD_INT 25
 706: PPUSH
 707: LD_INT 8
 709: PPUSH
 710: LD_INT 0
 712: PPUSH
 713: CALL_OW 50
// ComHold ( Brown ) ;
 717: LD_EXP 2
 721: PPUSH
 722: CALL_OW 140
// end ; if gammaCommander = 3 then
 726: LD_EXP 12
 730: PUSH
 731: LD_INT 3
 733: EQUAL
 734: IFFALSE 785
// begin Houten = PrepareUnit ( VanHouten , false ,  ) ;
 736: LD_ADDR_EXP 13
 740: PUSH
 741: LD_STRING VanHouten
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: LD_STRING 
 749: PPUSH
 750: CALL 46240 0 3
 754: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 755: LD_EXP 13
 759: PPUSH
 760: LD_INT 54
 762: PPUSH
 763: LD_INT 25
 765: PPUSH
 766: LD_INT 8
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL_OW 50
// ComHold ( Houten ) ;
 776: LD_EXP 13
 780: PPUSH
 781: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ,  ) ;
 785: LD_ADDR_EXP 22
 789: PUSH
 790: LD_STRING Harisson
 792: PPUSH
 793: LD_INT 0
 795: PPUSH
 796: LD_STRING 
 798: PPUSH
 799: CALL 46240 0 3
 803: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 804: LD_ADDR_EXP 23
 808: PUSH
 809: LD_STRING Powell
 811: PPUSH
 812: LD_INT 0
 814: PPUSH
 815: LD_STRING 
 817: PPUSH
 818: CALL 46240 0 3
 822: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 823: LD_STRING 04_Lisa
 825: PUSH
 826: EMPTY
 827: LIST
 828: PPUSH
 829: CALL_OW 28
 833: PUSH
 834: LD_STRING LisaInDelta
 836: PPUSH
 837: LD_INT 0
 839: PPUSH
 840: CALL_OW 30
 844: NOT
 845: AND
 846: PUSH
 847: LD_STRING 07_Lisa
 849: PUSH
 850: EMPTY
 851: LIST
 852: PPUSH
 853: CALL_OW 28
 857: NOT
 858: AND
 859: IFFALSE 898
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 861: LD_ADDR_EXP 6
 865: PUSH
 866: LD_STRING Lisa
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: LD_STRING 04_
 874: PPUSH
 875: CALL 46240 0 3
 879: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 880: LD_ADDR_VAR 0 15
 884: PUSH
 885: LD_VAR 0 15
 889: PUSH
 890: LD_EXP 6
 894: ADD
 895: ST_TO_ADDR
// end else
 896: GO 953
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 898: LD_EXP 6
 902: NOT
 903: PUSH
 904: LD_STRING LisaIn07
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 30
 914: NOT
 915: AND
 916: IFFALSE 953
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 918: LD_ADDR_EXP 6
 922: PUSH
 923: LD_STRING Lisa
 925: PPUSH
 926: LD_INT 1
 928: PPUSH
 929: LD_STRING 07_
 931: PPUSH
 932: CALL 46240 0 3
 936: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 937: LD_ADDR_VAR 0 15
 941: PUSH
 942: LD_VAR 0 15
 946: PUSH
 947: LD_EXP 6
 951: ADD
 952: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 953: LD_STRING 04_Bobby
 955: PUSH
 956: EMPTY
 957: LIST
 958: PPUSH
 959: CALL_OW 28
 963: PUSH
 964: LD_STRING BobbyInDelta
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 30
 974: NOT
 975: AND
 976: PUSH
 977: LD_STRING 07_Bobby
 979: PUSH
 980: EMPTY
 981: LIST
 982: PPUSH
 983: CALL_OW 28
 987: NOT
 988: AND
 989: IFFALSE 1028
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 991: LD_ADDR_EXP 4
 995: PUSH
 996: LD_STRING Bobby
 998: PPUSH
 999: LD_INT 1
1001: PPUSH
1002: LD_STRING 04_
1004: PPUSH
1005: CALL 46240 0 3
1009: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1010: LD_ADDR_VAR 0 15
1014: PUSH
1015: LD_VAR 0 15
1019: PUSH
1020: LD_EXP 4
1024: ADD
1025: ST_TO_ADDR
// end else
1026: GO 1083
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
1028: LD_EXP 4
1032: NOT
1033: PUSH
1034: LD_STRING BobbyIn07
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL_OW 30
1044: NOT
1045: AND
1046: IFFALSE 1083
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
1048: LD_ADDR_EXP 4
1052: PUSH
1053: LD_STRING Bobby
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: LD_STRING 07_
1061: PPUSH
1062: CALL 46240 0 3
1066: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1067: LD_ADDR_VAR 0 15
1071: PUSH
1072: LD_VAR 0 15
1076: PUSH
1077: LD_EXP 4
1081: ADD
1082: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1083: LD_STRING 04_Cyrus
1085: PUSH
1086: EMPTY
1087: LIST
1088: PPUSH
1089: CALL_OW 28
1093: PUSH
1094: LD_STRING CyrusInDelta
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: CALL_OW 30
1104: NOT
1105: AND
1106: PUSH
1107: LD_STRING 07_Cyrus
1109: PUSH
1110: EMPTY
1111: LIST
1112: PPUSH
1113: CALL_OW 28
1117: NOT
1118: AND
1119: IFFALSE 1158
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
1121: LD_ADDR_EXP 5
1125: PUSH
1126: LD_STRING Cyrus
1128: PPUSH
1129: LD_INT 1
1131: PPUSH
1132: LD_STRING 04_
1134: PPUSH
1135: CALL 46240 0 3
1139: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1140: LD_ADDR_VAR 0 15
1144: PUSH
1145: LD_VAR 0 15
1149: PUSH
1150: LD_EXP 5
1154: ADD
1155: ST_TO_ADDR
// end else
1156: GO 1213
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1158: LD_EXP 5
1162: NOT
1163: PUSH
1164: LD_STRING CyrusIn07
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 30
1174: NOT
1175: AND
1176: IFFALSE 1213
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
1178: LD_ADDR_EXP 5
1182: PUSH
1183: LD_STRING Cyrus
1185: PPUSH
1186: LD_INT 1
1188: PPUSH
1189: LD_STRING 07_
1191: PPUSH
1192: CALL 46240 0 3
1196: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1197: LD_ADDR_VAR 0 15
1201: PUSH
1202: LD_VAR 0 15
1206: PUSH
1207: LD_EXP 5
1211: ADD
1212: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1213: LD_STRING 04_Brown
1215: PUSH
1216: EMPTY
1217: LIST
1218: PPUSH
1219: CALL_OW 28
1223: PUSH
1224: LD_STRING BrownInDelta
1226: PPUSH
1227: LD_INT 0
1229: PPUSH
1230: CALL_OW 30
1234: NOT
1235: AND
1236: PUSH
1237: LD_STRING 07_Brown
1239: PUSH
1240: EMPTY
1241: LIST
1242: PPUSH
1243: CALL_OW 28
1247: NOT
1248: AND
1249: PUSH
1250: LD_EXP 12
1254: PUSH
1255: LD_INT 2
1257: NONEQUAL
1258: AND
1259: IFFALSE 1298
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1261: LD_ADDR_EXP 2
1265: PUSH
1266: LD_STRING Brown
1268: PPUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_STRING 04_
1274: PPUSH
1275: CALL 46240 0 3
1279: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1280: LD_ADDR_VAR 0 15
1284: PUSH
1285: LD_VAR 0 15
1289: PUSH
1290: LD_EXP 2
1294: ADD
1295: ST_TO_ADDR
// end else
1296: GO 1363
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1298: LD_EXP 2
1302: NOT
1303: PUSH
1304: LD_STRING BrownIn07
1306: PPUSH
1307: LD_INT 0
1309: PPUSH
1310: CALL_OW 30
1314: NOT
1315: AND
1316: PUSH
1317: LD_EXP 12
1321: PUSH
1322: LD_INT 2
1324: NONEQUAL
1325: AND
1326: IFFALSE 1363
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1328: LD_ADDR_EXP 2
1332: PUSH
1333: LD_STRING Brown
1335: PPUSH
1336: LD_INT 1
1338: PPUSH
1339: LD_STRING 07_
1341: PPUSH
1342: CALL 46240 0 3
1346: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1347: LD_ADDR_VAR 0 15
1351: PUSH
1352: LD_VAR 0 15
1356: PUSH
1357: LD_EXP 2
1361: ADD
1362: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1363: LD_STRING 04_Donaldson
1365: PUSH
1366: EMPTY
1367: LIST
1368: PPUSH
1369: CALL_OW 28
1373: PUSH
1374: LD_STRING DonaldsonInDelta
1376: PPUSH
1377: LD_INT 0
1379: PPUSH
1380: CALL_OW 30
1384: NOT
1385: AND
1386: PUSH
1387: LD_STRING 07_Donaldson
1389: PUSH
1390: EMPTY
1391: LIST
1392: PPUSH
1393: CALL_OW 28
1397: NOT
1398: AND
1399: PUSH
1400: LD_EXP 12
1404: PUSH
1405: LD_INT 1
1407: NONEQUAL
1408: AND
1409: IFFALSE 1448
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1411: LD_ADDR_EXP 3
1415: PUSH
1416: LD_STRING Donaldson
1418: PPUSH
1419: LD_INT 1
1421: PPUSH
1422: LD_STRING 04_
1424: PPUSH
1425: CALL 46240 0 3
1429: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1430: LD_ADDR_VAR 0 15
1434: PUSH
1435: LD_VAR 0 15
1439: PUSH
1440: LD_EXP 3
1444: ADD
1445: ST_TO_ADDR
// end else
1446: GO 1513
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1448: LD_EXP 3
1452: NOT
1453: PUSH
1454: LD_STRING DonaldsonIn07
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 30
1464: NOT
1465: AND
1466: PUSH
1467: LD_EXP 12
1471: PUSH
1472: LD_INT 1
1474: NONEQUAL
1475: AND
1476: IFFALSE 1513
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1478: LD_ADDR_EXP 3
1482: PUSH
1483: LD_STRING Donaldson
1485: PPUSH
1486: LD_INT 1
1488: PPUSH
1489: LD_STRING 07_
1491: PPUSH
1492: CALL 46240 0 3
1496: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1497: LD_ADDR_VAR 0 15
1501: PUSH
1502: LD_VAR 0 15
1506: PUSH
1507: LD_EXP 3
1511: ADD
1512: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1513: LD_STRING KhatamIn07
1515: PPUSH
1516: LD_INT 0
1518: PPUSH
1519: CALL_OW 30
1523: NOT
1524: IFFALSE 1561
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1526: LD_ADDR_EXP 10
1530: PUSH
1531: LD_STRING Khatam
1533: PPUSH
1534: LD_INT 1
1536: PPUSH
1537: LD_STRING 07_
1539: PPUSH
1540: CALL 46240 0 3
1544: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1545: LD_ADDR_VAR 0 15
1549: PUSH
1550: LD_VAR 0 15
1554: PUSH
1555: LD_EXP 10
1559: ADD
1560: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1561: LD_ADDR_EXP 11
1565: PUSH
1566: LD_STRING 07_othersGamma
1568: PPUSH
1569: CALL_OW 31
1573: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1574: LD_ADDR_VAR 0 14
1578: PUSH
1579: LD_INT 8
1581: PUSH
1582: LD_EXP 11
1586: MINUS
1587: ST_TO_ADDR
// if tmp then
1588: LD_VAR 0 14
1592: IFFALSE 1645
// for i = 1 to tmp do
1594: LD_ADDR_VAR 0 2
1598: PUSH
1599: DOUBLE
1600: LD_INT 1
1602: DEC
1603: ST_TO_ADDR
1604: LD_VAR 0 14
1608: PUSH
1609: FOR_TO
1610: IFFALSE 1643
// begin PrepareHuman ( false , 1 , 5 ) ;
1612: LD_INT 0
1614: PPUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 5
1620: PPUSH
1621: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1625: LD_ADDR_EXP 11
1629: PUSH
1630: LD_EXP 11
1634: PUSH
1635: CALL_OW 44
1639: ADD
1640: ST_TO_ADDR
// end ;
1641: GO 1609
1643: POP
1644: POP
// if HexInfo ( 61 , 29 ) = 0 then
1645: LD_INT 61
1647: PPUSH
1648: LD_INT 29
1650: PPUSH
1651: CALL_OW 428
1655: PUSH
1656: LD_INT 0
1658: EQUAL
1659: IFFALSE 1690
// begin bc_type := b_barracks ;
1661: LD_ADDR_OWVAR 42
1665: PUSH
1666: LD_INT 5
1668: ST_TO_ADDR
// bc_level := 6 ;
1669: LD_ADDR_OWVAR 43
1673: PUSH
1674: LD_INT 6
1676: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1677: LD_INT 61
1679: PPUSH
1680: LD_INT 29
1682: PPUSH
1683: LD_INT 5
1685: PPUSH
1686: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1690: LD_ADDR_VAR 0 13
1694: PUSH
1695: LD_INT 22
1697: PUSH
1698: LD_INT 1
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 31
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PPUSH
1719: CALL_OW 69
1723: ST_TO_ADDR
// for i in bun do
1724: LD_ADDR_VAR 0 2
1728: PUSH
1729: LD_VAR 0 13
1733: PUSH
1734: FOR_IN
1735: IFFALSE 1867
// begin x := GetX ( i ) ;
1737: LD_ADDR_VAR 0 3
1741: PUSH
1742: LD_VAR 0 2
1746: PPUSH
1747: CALL_OW 250
1751: ST_TO_ADDR
// y := GetY ( i ) ;
1752: LD_ADDR_VAR 0 4
1756: PUSH
1757: LD_VAR 0 2
1761: PPUSH
1762: CALL_OW 251
1766: ST_TO_ADDR
// d := GetDir ( i ) ;
1767: LD_ADDR_VAR 0 5
1771: PUSH
1772: LD_VAR 0 2
1776: PPUSH
1777: CALL_OW 254
1781: ST_TO_ADDR
// RemoveUnit ( i ) ;
1782: LD_VAR 0 2
1786: PPUSH
1787: CALL_OW 64
// bc_type := b_bunker ;
1791: LD_ADDR_OWVAR 42
1795: PUSH
1796: LD_INT 32
1798: ST_TO_ADDR
// bc_level := 6 ;
1799: LD_ADDR_OWVAR 43
1803: PUSH
1804: LD_INT 6
1806: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1807: LD_ADDR_VAR 0 6
1811: PUSH
1812: LD_VAR 0 3
1816: PPUSH
1817: LD_VAR 0 4
1821: PPUSH
1822: LD_VAR 0 5
1826: PPUSH
1827: CALL_OW 47
1831: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1832: LD_VAR 0 6
1836: PPUSH
1837: LD_INT 5
1839: PUSH
1840: LD_INT 4
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: LD_VAR 0 2
1851: PUSH
1852: LD_INT 2
1854: MOD
1855: PUSH
1856: LD_INT 1
1858: PLUS
1859: ARRAY
1860: PPUSH
1861: CALL_OW 431
// end ;
1865: GO 1734
1867: POP
1868: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1869: LD_ADDR_VAR 0 9
1873: PUSH
1874: LD_INT 22
1876: PUSH
1877: LD_INT 1
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 30
1886: PUSH
1887: LD_INT 5
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PPUSH
1898: CALL_OW 69
1902: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1903: LD_ADDR_VAR 0 8
1907: PUSH
1908: LD_INT 22
1910: PUSH
1911: LD_INT 1
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 2
1920: PUSH
1921: LD_INT 30
1923: PUSH
1924: LD_INT 6
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 30
1933: PUSH
1934: LD_INT 7
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 30
1943: PUSH
1944: LD_INT 8
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: PPUSH
1961: CALL_OW 69
1965: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1966: LD_ADDR_VAR 0 7
1970: PUSH
1971: LD_INT 22
1973: PUSH
1974: LD_INT 1
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PUSH
1981: LD_INT 30
1983: PUSH
1984: LD_INT 3
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PPUSH
1995: CALL_OW 69
1999: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
2000: LD_ADDR_VAR 0 12
2004: PUSH
2005: LD_INT 22
2007: PUSH
2008: LD_INT 1
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 30
2017: PUSH
2018: LD_INT 36
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
2034: LD_ADDR_VAR 0 13
2038: PUSH
2039: LD_INT 22
2041: PUSH
2042: LD_INT 1
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 2
2051: PUSH
2052: LD_INT 30
2054: PUSH
2055: LD_INT 31
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PUSH
2062: LD_INT 30
2064: PUSH
2065: LD_INT 32
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PPUSH
2081: CALL_OW 69
2085: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
2086: LD_ADDR_VAR 0 2
2090: PUSH
2091: LD_EXP 11
2095: PUSH
2096: LD_VAR 0 15
2100: ADD
2101: PUSH
2102: FOR_IN
2103: IFFALSE 2524
// begin placed := false ;
2105: LD_ADDR_VAR 0 11
2109: PUSH
2110: LD_INT 0
2112: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2113: LD_VAR 0 2
2117: PPUSH
2118: CALL_OW 257
2122: PUSH
2123: LD_INT 1
2125: EQUAL
2126: IFFALSE 2251
// begin if UnitFilter ( bun , [ f_empty ] ) then
2128: LD_VAR 0 13
2132: PPUSH
2133: LD_INT 58
2135: PUSH
2136: EMPTY
2137: LIST
2138: PPUSH
2139: CALL_OW 72
2143: IFFALSE 2182
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2145: LD_VAR 0 2
2149: PPUSH
2150: LD_VAR 0 13
2154: PPUSH
2155: LD_INT 58
2157: PUSH
2158: EMPTY
2159: LIST
2160: PPUSH
2161: CALL_OW 72
2165: PUSH
2166: LD_INT 1
2168: ARRAY
2169: PPUSH
2170: CALL_OW 52
// placed := true ;
2174: LD_ADDR_VAR 0 11
2178: PUSH
2179: LD_INT 1
2181: ST_TO_ADDR
// end ; if arm and not placed then
2182: LD_VAR 0 9
2186: PUSH
2187: LD_VAR 0 11
2191: NOT
2192: AND
2193: IFFALSE 2251
// begin for j in arm do
2195: LD_ADDR_VAR 0 10
2199: PUSH
2200: LD_VAR 0 9
2204: PUSH
2205: FOR_IN
2206: IFFALSE 2249
// if UnitsInside ( j ) < 6 then
2208: LD_VAR 0 10
2212: PPUSH
2213: CALL_OW 313
2217: PUSH
2218: LD_INT 6
2220: LESS
2221: IFFALSE 2247
// begin PlaceHumanInUnit ( i , j ) ;
2223: LD_VAR 0 2
2227: PPUSH
2228: LD_VAR 0 10
2232: PPUSH
2233: CALL_OW 52
// placed := true ;
2237: LD_ADDR_VAR 0 11
2241: PUSH
2242: LD_INT 1
2244: ST_TO_ADDR
// break ;
2245: GO 2249
// end ;
2247: GO 2205
2249: POP
2250: POP
// end ; end ; if GetClass ( i ) = 2 then
2251: LD_VAR 0 2
2255: PPUSH
2256: CALL_OW 257
2260: PUSH
2261: LD_INT 2
2263: EQUAL
2264: IFFALSE 2297
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2266: LD_VAR 0 2
2270: PPUSH
2271: LD_INT 52
2273: PPUSH
2274: LD_INT 20
2276: PPUSH
2277: LD_INT 6
2279: PPUSH
2280: LD_INT 0
2282: PPUSH
2283: CALL_OW 50
// placed := true ;
2287: LD_ADDR_VAR 0 11
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// continue ;
2295: GO 2102
// end ; if GetClass ( i ) = 3 then
2297: LD_VAR 0 2
2301: PPUSH
2302: CALL_OW 257
2306: PUSH
2307: LD_INT 3
2309: EQUAL
2310: IFFALSE 2414
// if fac then
2312: LD_VAR 0 7
2316: IFFALSE 2414
// begin if ct then
2318: LD_VAR 0 12
2322: IFFALSE 2350
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_VAR 0 12
2333: PUSH
2334: LD_INT 1
2336: ARRAY
2337: PPUSH
2338: CALL_OW 52
// placed := true ;
2342: LD_ADDR_VAR 0 11
2346: PUSH
2347: LD_INT 1
2349: ST_TO_ADDR
// end ; if placed then
2350: LD_VAR 0 11
2354: IFFALSE 2358
// continue ;
2356: GO 2102
// for j in fac do
2358: LD_ADDR_VAR 0 10
2362: PUSH
2363: LD_VAR 0 7
2367: PUSH
2368: FOR_IN
2369: IFFALSE 2412
// if UnitsInside ( j ) < 6 then
2371: LD_VAR 0 10
2375: PPUSH
2376: CALL_OW 313
2380: PUSH
2381: LD_INT 6
2383: LESS
2384: IFFALSE 2410
// begin PlaceHumanInUnit ( i , j ) ;
2386: LD_VAR 0 2
2390: PPUSH
2391: LD_VAR 0 10
2395: PPUSH
2396: CALL_OW 52
// placed := true ;
2400: LD_ADDR_VAR 0 11
2404: PUSH
2405: LD_INT 1
2407: ST_TO_ADDR
// break ;
2408: GO 2412
// end ;
2410: GO 2368
2412: POP
2413: POP
// end ; if GetClass ( i ) = 4 then
2414: LD_VAR 0 2
2418: PPUSH
2419: CALL_OW 257
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2491
// if lab then
2429: LD_VAR 0 8
2433: IFFALSE 2491
// begin for j in lab do
2435: LD_ADDR_VAR 0 10
2439: PUSH
2440: LD_VAR 0 8
2444: PUSH
2445: FOR_IN
2446: IFFALSE 2489
// if UnitsInside ( j ) < 6 then
2448: LD_VAR 0 10
2452: PPUSH
2453: CALL_OW 313
2457: PUSH
2458: LD_INT 6
2460: LESS
2461: IFFALSE 2487
// begin PlaceHumanInUnit ( i , j ) ;
2463: LD_VAR 0 2
2467: PPUSH
2468: LD_VAR 0 10
2472: PPUSH
2473: CALL_OW 52
// placed := true ;
2477: LD_ADDR_VAR 0 11
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// break ;
2485: GO 2489
// end ;
2487: GO 2445
2489: POP
2490: POP
// end ; if not placed then
2491: LD_VAR 0 11
2495: NOT
2496: IFFALSE 2522
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2498: LD_VAR 0 2
2502: PPUSH
2503: LD_INT 5
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: CALL_OW 49
// ComHold ( i ) ;
2513: LD_VAR 0 2
2517: PPUSH
2518: CALL_OW 140
// end ; end ;
2522: GO 2102
2524: POP
2525: POP
// if ct then
2526: LD_VAR 0 12
2530: IFFALSE 2634
// if UnitsInside ( ct [ 1 ] ) then
2532: LD_VAR 0 12
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: CALL_OW 313
2545: IFFALSE 2634
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2547: LD_ADDR_VAR 0 2
2551: PUSH
2552: LD_INT 22
2554: PUSH
2555: LD_INT 1
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 33
2564: PUSH
2565: LD_INT 2
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PPUSH
2576: CALL_OW 69
2580: PUSH
2581: FOR_IN
2582: IFFALSE 2632
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_VAR 0 12
2593: PUSH
2594: LD_INT 1
2596: ARRAY
2597: PPUSH
2598: CALL_OW 313
2602: PUSH
2603: LD_INT 1
2605: PPUSH
2606: LD_VAR 0 12
2610: PUSH
2611: LD_INT 1
2613: ARRAY
2614: PPUSH
2615: CALL_OW 313
2619: PPUSH
2620: CALL_OW 12
2624: ARRAY
2625: PPUSH
2626: CALL_OW 135
2630: GO 2581
2632: POP
2633: POP
// end ; end ;
2634: LD_VAR 0 1
2638: RET
// export function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2639: LD_INT 0
2641: PPUSH
2642: PPUSH
2643: PPUSH
2644: PPUSH
2645: PPUSH
2646: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2647: LD_INT 71
2649: PPUSH
2650: LD_INT 5
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2660: LD_ADDR_VAR 0 2
2664: PUSH
2665: LD_STRING GammaBase
2667: PPUSH
2668: EMPTY
2669: PPUSH
2670: CALL_OW 30
2674: ST_TO_ADDR
// if not blist then
2675: LD_VAR 0 2
2679: NOT
2680: IFFALSE 2720
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2682: LD_ADDR_VAR 0 2
2686: PUSH
2687: LD_INT 1
2689: PUSH
2690: LD_INT 52
2692: PUSH
2693: LD_INT 12
2695: PUSH
2696: LD_INT 3
2698: PUSH
2699: LD_INT 3
2701: PUSH
2702: LD_INT 0
2704: PUSH
2705: LD_INT 0
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: LIST
2712: LIST
2713: LIST
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: ST_TO_ADDR
// uc_side := 1 ;
2720: LD_ADDR_OWVAR 20
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// uc_nation := 1 ;
2728: LD_ADDR_OWVAR 21
2732: PUSH
2733: LD_INT 1
2735: ST_TO_ADDR
// bc_kind1 := - 1 ;
2736: LD_ADDR_OWVAR 44
2740: PUSH
2741: LD_INT 1
2743: NEG
2744: ST_TO_ADDR
// bc_kind2 := - 1 ;
2745: LD_ADDR_OWVAR 45
2749: PUSH
2750: LD_INT 1
2752: NEG
2753: ST_TO_ADDR
// for i in blist do
2754: LD_ADDR_VAR 0 3
2758: PUSH
2759: LD_VAR 0 2
2763: PUSH
2764: FOR_IN
2765: IFFALSE 3041
// begin bc_type := i [ 1 ] ;
2767: LD_ADDR_OWVAR 42
2771: PUSH
2772: LD_VAR 0 3
2776: PUSH
2777: LD_INT 1
2779: ARRAY
2780: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2781: LD_ADDR_OWVAR 43
2785: PUSH
2786: LD_VAR 0 3
2790: PUSH
2791: LD_INT 5
2793: ARRAY
2794: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2795: LD_OWVAR 42
2799: PUSH
2800: LD_INT 6
2802: PUSH
2803: LD_INT 7
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: IN
2810: IFFALSE 2876
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2812: LD_STRING 06_remoteVehs_1
2814: PPUSH
2815: LD_INT 0
2817: PPUSH
2818: CALL_OW 30
2822: NOT
2823: IFFALSE 2851
// begin bc_type := b_lab_full ;
2825: LD_ADDR_OWVAR 42
2829: PUSH
2830: LD_INT 8
2832: ST_TO_ADDR
// bc_kind1 := 10 ;
2833: LD_ADDR_OWVAR 44
2837: PUSH
2838: LD_INT 10
2840: ST_TO_ADDR
// bc_kind2 := 15 ;
2841: LD_ADDR_OWVAR 45
2845: PUSH
2846: LD_INT 15
2848: ST_TO_ADDR
// end else
2849: GO 2876
// begin bc_type := b_lab_half ;
2851: LD_ADDR_OWVAR 42
2855: PUSH
2856: LD_INT 7
2858: ST_TO_ADDR
// bc_kind1 := 10 ;
2859: LD_ADDR_OWVAR 44
2863: PUSH
2864: LD_INT 10
2866: ST_TO_ADDR
// bc_kind2 := - 1 ;
2867: LD_ADDR_OWVAR 45
2871: PUSH
2872: LD_INT 1
2874: NEG
2875: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2876: LD_OWVAR 42
2880: PUSH
2881: LD_INT 2
2883: EQUAL
2884: IFFALSE 2894
// bc_type := b_factory ;
2886: LD_ADDR_OWVAR 42
2890: PUSH
2891: LD_INT 3
2893: ST_TO_ADDR
// if bc_type = b_depot then
2894: LD_OWVAR 42
2898: PUSH
2899: LD_INT 0
2901: EQUAL
2902: IFFALSE 2951
// begin bc_type := b_warehouse ;
2904: LD_ADDR_OWVAR 42
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2912: LD_ADDR_EXP 37
2916: PUSH
2917: LD_VAR 0 3
2921: PUSH
2922: LD_INT 2
2924: ARRAY
2925: PPUSH
2926: LD_VAR 0 3
2930: PUSH
2931: LD_INT 3
2933: ARRAY
2934: PPUSH
2935: LD_VAR 0 3
2939: PUSH
2940: LD_INT 4
2942: ARRAY
2943: PPUSH
2944: CALL_OW 47
2948: ST_TO_ADDR
// continue ;
2949: GO 2764
// end ; if bc_type = b_armoury then
2951: LD_OWVAR 42
2955: PUSH
2956: LD_INT 4
2958: EQUAL
2959: IFFALSE 2969
// bc_type = b_barracks ;
2961: LD_ADDR_OWVAR 42
2965: PUSH
2966: LD_INT 5
2968: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2969: LD_ADDR_VAR 0 4
2973: PUSH
2974: LD_VAR 0 3
2978: PUSH
2979: LD_INT 2
2981: ARRAY
2982: PPUSH
2983: LD_VAR 0 3
2987: PUSH
2988: LD_INT 3
2990: ARRAY
2991: PPUSH
2992: LD_VAR 0 3
2996: PUSH
2997: LD_INT 4
2999: ARRAY
3000: PPUSH
3001: CALL_OW 47
3005: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
3006: LD_VAR 0 4
3010: PPUSH
3011: CALL_OW 266
3015: PUSH
3016: LD_INT 32
3018: EQUAL
3019: IFFALSE 3039
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3021: LD_VAR 0 4
3025: PPUSH
3026: LD_VAR 0 3
3030: PUSH
3031: LD_INT 7
3033: ARRAY
3034: PPUSH
3035: CALL_OW 431
// end ;
3039: GO 2764
3041: POP
3042: POP
// if not amDepot then
3043: LD_EXP 37
3047: NOT
3048: IFFALSE 3085
// begin bc_type := b_warehouse ;
3050: LD_ADDR_OWVAR 42
3054: PUSH
3055: LD_INT 1
3057: ST_TO_ADDR
// bc_level := 6 ;
3058: LD_ADDR_OWVAR 43
3062: PUSH
3063: LD_INT 6
3065: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
3066: LD_ADDR_EXP 37
3070: PUSH
3071: LD_INT 52
3073: PPUSH
3074: LD_INT 12
3076: PPUSH
3077: LD_INT 3
3079: PPUSH
3080: CALL_OW 47
3084: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
3085: LD_EXP 37
3089: PPUSH
3090: LD_STRING gamma
3092: PPUSH
3093: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 , 280 ] [ Difficulty ] ) ;
3097: LD_EXP 37
3101: PPUSH
3102: CALL_OW 274
3106: PPUSH
3107: LD_INT 1
3109: PPUSH
3110: LD_INT 500
3112: PUSH
3113: LD_INT 420
3115: PUSH
3116: LD_INT 350
3118: PUSH
3119: LD_INT 280
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: PUSH
3128: LD_OWVAR 67
3132: ARRAY
3133: PPUSH
3134: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3138: LD_EXP 37
3142: PPUSH
3143: CALL_OW 274
3147: PPUSH
3148: LD_INT 2
3150: PPUSH
3151: LD_INT 200
3153: PPUSH
3154: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3158: LD_INT 22
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: LD_INT 30
3170: PUSH
3171: LD_INT 3
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PPUSH
3182: CALL_OW 69
3186: IFFALSE 3434
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3188: LD_ADDR_VAR 0 4
3192: PUSH
3193: LD_INT 22
3195: PUSH
3196: LD_INT 1
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 30
3205: PUSH
3206: LD_INT 3
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: PPUSH
3217: CALL_OW 69
3221: PUSH
3222: LD_INT 1
3224: ARRAY
3225: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3226: LD_ADDR_VAR 0 6
3230: PUSH
3231: LD_VAR 0 4
3235: PPUSH
3236: CALL_OW 250
3240: PPUSH
3241: LD_VAR 0 4
3245: PPUSH
3246: CALL_OW 251
3250: PPUSH
3251: LD_VAR 0 4
3255: PPUSH
3256: CALL_OW 254
3260: PPUSH
3261: CALL 80560 0 3
3265: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3266: LD_ADDR_VAR 0 2
3270: PUSH
3271: LD_INT 19
3273: PUSH
3274: LD_INT 17
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3281: LD_STRING 06_remoteVehs_1
3283: PPUSH
3284: LD_INT 0
3286: PPUSH
3287: CALL_OW 30
3291: IFFALSE 3314
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3293: LD_ADDR_VAR 0 2
3297: PUSH
3298: LD_VAR 0 2
3302: PPUSH
3303: LD_INT 1
3305: PPUSH
3306: LD_INT 22
3308: PPUSH
3309: CALL_OW 2
3313: ST_TO_ADDR
// for i in tmp do
3314: LD_ADDR_VAR 0 3
3318: PUSH
3319: LD_VAR 0 6
3323: PUSH
3324: FOR_IN
3325: IFFALSE 3432
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3327: LD_VAR 0 3
3331: PUSH
3332: LD_INT 1
3334: ARRAY
3335: PPUSH
3336: LD_VAR 0 3
3340: PUSH
3341: LD_INT 2
3343: ARRAY
3344: PPUSH
3345: CALL_OW 428
3349: PUSH
3350: LD_INT 0
3352: EQUAL
3353: IFFALSE 3430
// begin bc_type := blist [ 1 ] ;
3355: LD_ADDR_OWVAR 42
3359: PUSH
3360: LD_VAR 0 2
3364: PUSH
3365: LD_INT 1
3367: ARRAY
3368: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3369: LD_VAR 0 3
3373: PUSH
3374: LD_INT 1
3376: ARRAY
3377: PPUSH
3378: LD_VAR 0 3
3382: PUSH
3383: LD_INT 2
3385: ARRAY
3386: PPUSH
3387: LD_VAR 0 3
3391: PUSH
3392: LD_INT 3
3394: ARRAY
3395: PPUSH
3396: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3400: LD_ADDR_VAR 0 2
3404: PUSH
3405: LD_VAR 0 2
3409: PPUSH
3410: LD_INT 1
3412: PPUSH
3413: CALL_OW 3
3417: ST_TO_ADDR
// if blist = 0 then
3418: LD_VAR 0 2
3422: PUSH
3423: LD_INT 0
3425: EQUAL
3426: IFFALSE 3430
// break ;
3428: GO 3432
// end ;
3430: GO 3324
3432: POP
3433: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3434: LD_STRING 06_remoteVehs_1
3436: PPUSH
3437: LD_INT 0
3439: PPUSH
3440: CALL_OW 30
3444: IFFALSE 3911
// begin bc_type = 36 ;
3446: LD_ADDR_OWVAR 42
3450: PUSH
3451: LD_INT 36
3453: ST_TO_ADDR
// bc_level = 4 ;
3454: LD_ADDR_OWVAR 43
3458: PUSH
3459: LD_INT 4
3461: ST_TO_ADDR
// if CanBeBuiltCost ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3462: LD_EXP 37
3466: PPUSH
3467: LD_INT 36
3469: PPUSH
3470: LD_INT 62
3472: PPUSH
3473: LD_INT 12
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL 17162 0 6
3486: PUSH
3487: LD_INT 92
3489: PUSH
3490: LD_INT 62
3492: PUSH
3493: LD_INT 12
3495: PUSH
3496: LD_INT 3
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: PPUSH
3505: CALL_OW 69
3509: NOT
3510: AND
3511: IFFALSE 3528
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3513: LD_INT 62
3515: PPUSH
3516: LD_INT 12
3518: PPUSH
3519: LD_INT 3
3521: PPUSH
3522: CALL_OW 47
3526: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3528: LD_EXP 37
3532: PPUSH
3533: LD_INT 36
3535: PPUSH
3536: LD_INT 37
3538: PPUSH
3539: LD_INT 18
3541: PPUSH
3542: LD_INT 2
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL 17162 0 6
3552: PUSH
3553: LD_INT 92
3555: PUSH
3556: LD_INT 37
3558: PUSH
3559: LD_INT 18
3561: PUSH
3562: LD_INT 3
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: PPUSH
3571: CALL_OW 69
3575: NOT
3576: AND
3577: IFFALSE 3594
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3579: LD_INT 37
3581: PPUSH
3582: LD_INT 18
3584: PPUSH
3585: LD_INT 2
3587: PPUSH
3588: CALL_OW 47
3592: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3594: LD_EXP 37
3598: PPUSH
3599: LD_INT 36
3601: PPUSH
3602: LD_INT 66
3604: PPUSH
3605: LD_INT 14
3607: PPUSH
3608: LD_INT 4
3610: PPUSH
3611: LD_INT 0
3613: PPUSH
3614: CALL 17162 0 6
3618: PUSH
3619: LD_INT 92
3621: PUSH
3622: LD_INT 66
3624: PUSH
3625: LD_INT 14
3627: PUSH
3628: LD_INT 3
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 69
3641: NOT
3642: AND
3643: IFFALSE 3660
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3645: LD_INT 66
3647: PPUSH
3648: LD_INT 14
3650: PPUSH
3651: LD_INT 4
3653: PPUSH
3654: CALL_OW 47
3658: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3660: LD_EXP 37
3664: PPUSH
3665: LD_INT 36
3667: PPUSH
3668: LD_INT 74
3670: PPUSH
3671: LD_INT 26
3673: PPUSH
3674: LD_INT 4
3676: PPUSH
3677: LD_INT 0
3679: PPUSH
3680: CALL 17162 0 6
3684: IFFALSE 3699
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3686: LD_INT 74
3688: PPUSH
3689: LD_INT 26
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3699: LD_INT 22
3701: PUSH
3702: LD_INT 1
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PUSH
3709: LD_INT 30
3711: PUSH
3712: LD_INT 36
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PPUSH
3723: CALL_OW 69
3727: NOT
3728: IFFALSE 3732
// exit ;
3730: GO 3911
// for i := 1 to [ 3 , 2 , 2 , 1 ] [ Difficulty ] do
3732: LD_ADDR_VAR 0 3
3736: PUSH
3737: DOUBLE
3738: LD_INT 1
3740: DEC
3741: ST_TO_ADDR
3742: LD_INT 3
3744: PUSH
3745: LD_INT 2
3747: PUSH
3748: LD_INT 2
3750: PUSH
3751: LD_INT 1
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: PUSH
3760: LD_OWVAR 67
3764: ARRAY
3765: PUSH
3766: FOR_TO
3767: IFFALSE 3909
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 , 2 ] [ Difficulty ] ;
3769: LD_ADDR_OWVAR 37
3773: PUSH
3774: LD_INT 3
3776: PUSH
3777: LD_INT 2
3779: PUSH
3780: LD_INT 3
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: PUSH
3787: LD_INT 1
3789: PPUSH
3790: LD_INT 2
3792: PPUSH
3793: CALL_OW 12
3797: ARRAY
3798: PUSH
3799: LD_INT 2
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: PUSH
3811: LD_OWVAR 67
3815: ARRAY
3816: ST_TO_ADDR
// vc_engine = 1 ;
3817: LD_ADDR_OWVAR 39
3821: PUSH
3822: LD_INT 1
3824: ST_TO_ADDR
// vc_control = 2 ;
3825: LD_ADDR_OWVAR 38
3829: PUSH
3830: LD_INT 2
3832: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3833: LD_ADDR_OWVAR 40
3837: PUSH
3838: LD_INT 3
3840: PUSH
3841: LD_INT 4
3843: PUSH
3844: LD_INT 5
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: LD_INT 1
3854: PPUSH
3855: LD_INT 3
3857: PPUSH
3858: CALL_OW 12
3862: ARRAY
3863: ST_TO_ADDR
// veh = CreateVehicle ;
3864: LD_ADDR_VAR 0 5
3868: PUSH
3869: CALL_OW 45
3873: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3874: LD_VAR 0 5
3878: PPUSH
3879: LD_INT 4
3881: PPUSH
3882: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3886: LD_VAR 0 5
3890: PPUSH
3891: LD_INT 56
3893: PPUSH
3894: LD_INT 17
3896: PPUSH
3897: LD_INT 9
3899: PPUSH
3900: LD_INT 0
3902: PPUSH
3903: CALL_OW 50
// end ;
3907: GO 3766
3909: POP
3910: POP
// end ; end ;
3911: LD_VAR 0 1
3915: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3916: LD_INT 0
3918: PPUSH
3919: PPUSH
3920: PPUSH
3921: PPUSH
// uc_side = 1 ;
3922: LD_ADDR_OWVAR 20
3926: PUSH
3927: LD_INT 1
3929: ST_TO_ADDR
// uc_nation = 1 ;
3930: LD_ADDR_OWVAR 21
3934: PUSH
3935: LD_INT 1
3937: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 06c_ ) ;
3938: LD_ADDR_EXP 14
3942: PUSH
3943: LD_STRING Denis
3945: PPUSH
3946: LD_INT 1
3948: PPUSH
3949: LD_STRING 06c_
3951: PPUSH
3952: CALL 46240 0 3
3956: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3957: LD_EXP 14
3961: PPUSH
3962: LD_INT 4
3964: PPUSH
3965: LD_INT 0
3967: PPUSH
3968: CALL_OW 49
// Joan = PrepareUnit ( Joan , true , 06c_ ) ;
3972: LD_ADDR_EXP 15
3976: PUSH
3977: LD_STRING Joan
3979: PPUSH
3980: LD_INT 1
3982: PPUSH
3983: LD_STRING 06c_
3985: PPUSH
3986: CALL 46240 0 3
3990: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3991: LD_EXP 15
3995: PPUSH
3996: LD_INT 4
3998: PPUSH
3999: LD_INT 0
4001: PPUSH
4002: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4006: LD_STRING GladstoneIn07
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 30
4016: NOT
4017: IFFALSE 4091
// begin Gladstone = PrepareUnit ( Gladstone , true , 06c_ ) ;
4019: LD_ADDR_EXP 8
4023: PUSH
4024: LD_STRING Gladstone
4026: PPUSH
4027: LD_INT 1
4029: PPUSH
4030: LD_STRING 06c_
4032: PPUSH
4033: CALL 46240 0 3
4037: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4038: LD_EXP 8
4042: NOT
4043: PUSH
4044: LD_STRING GladstoneStayInDelta
4046: PPUSH
4047: LD_INT 0
4049: PPUSH
4050: CALL_OW 30
4054: AND
4055: IFFALSE 4076
// Gladstone = PrepareUnit ( Gladstone , true , 05_ ) ;
4057: LD_ADDR_EXP 8
4061: PUSH
4062: LD_STRING Gladstone
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: LD_STRING 05_
4070: PPUSH
4071: CALL 46240 0 3
4075: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4076: LD_EXP 8
4080: PPUSH
4081: LD_INT 4
4083: PPUSH
4084: LD_INT 0
4086: PPUSH
4087: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4091: LD_STRING LisaStayInDelta
4093: PPUSH
4094: LD_INT 0
4096: PPUSH
4097: CALL_OW 30
4101: IFFALSE 4137
// begin Lisa = PrepareUnit ( Lisa , true , 05_ ) ;
4103: LD_ADDR_EXP 6
4107: PUSH
4108: LD_STRING Lisa
4110: PPUSH
4111: LD_INT 1
4113: PPUSH
4114: LD_STRING 05_
4116: PPUSH
4117: CALL 46240 0 3
4121: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4122: LD_EXP 6
4126: PPUSH
4127: LD_INT 4
4129: PPUSH
4130: LD_INT 0
4132: PPUSH
4133: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4137: LD_STRING BobbyStayInDelta
4139: PPUSH
4140: LD_INT 0
4142: PPUSH
4143: CALL_OW 30
4147: IFFALSE 4183
// begin Bobby = PrepareUnit ( Bobby , true , 05_ ) ;
4149: LD_ADDR_EXP 4
4153: PUSH
4154: LD_STRING Bobby
4156: PPUSH
4157: LD_INT 1
4159: PPUSH
4160: LD_STRING 05_
4162: PPUSH
4163: CALL 46240 0 3
4167: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4168: LD_EXP 4
4172: PPUSH
4173: LD_INT 4
4175: PPUSH
4176: LD_INT 0
4178: PPUSH
4179: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4183: LD_STRING CyrusStayInDelta
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL_OW 30
4193: IFFALSE 4229
// begin Cyrus = PrepareUnit ( Cyrus , true , 05_ ) ;
4195: LD_ADDR_EXP 5
4199: PUSH
4200: LD_STRING Cyrus
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: LD_STRING 05_
4208: PPUSH
4209: CALL 46240 0 3
4213: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4214: LD_EXP 5
4218: PPUSH
4219: LD_INT 4
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4229: LD_STRING BrownStayInDelta
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL_OW 30
4239: IFFALSE 4275
// begin Brown = PrepareUnit ( Brown , true , 05_ ) ;
4241: LD_ADDR_EXP 2
4245: PUSH
4246: LD_STRING Brown
4248: PPUSH
4249: LD_INT 1
4251: PPUSH
4252: LD_STRING 05_
4254: PPUSH
4255: CALL 46240 0 3
4259: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4260: LD_EXP 2
4264: PPUSH
4265: LD_INT 4
4267: PPUSH
4268: LD_INT 0
4270: PPUSH
4271: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4275: LD_STRING DonaldsonStayInDelta
4277: PPUSH
4278: LD_INT 0
4280: PPUSH
4281: CALL_OW 30
4285: IFFALSE 4321
// begin Donaldson = PrepareUnit ( Donaldson , true , 05_ ) ;
4287: LD_ADDR_EXP 3
4291: PUSH
4292: LD_STRING Donaldson
4294: PPUSH
4295: LD_INT 1
4297: PPUSH
4298: LD_STRING 05_
4300: PPUSH
4301: CALL 46240 0 3
4305: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4306: LD_EXP 3
4310: PPUSH
4311: LD_INT 4
4313: PPUSH
4314: LD_INT 0
4316: PPUSH
4317: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4321: LD_ADDR_VAR 0 4
4325: PUSH
4326: LD_STRING OthersStayInDelta
4328: PPUSH
4329: CALL_OW 31
4333: ST_TO_ADDR
// if other > 2 then
4334: LD_VAR 0 4
4338: PUSH
4339: LD_INT 2
4341: GREATER
4342: IFFALSE 4387
// begin for j = 1 to 2 do
4344: LD_ADDR_VAR 0 3
4348: PUSH
4349: DOUBLE
4350: LD_INT 1
4352: DEC
4353: ST_TO_ADDR
4354: LD_INT 2
4356: PUSH
4357: FOR_TO
4358: IFFALSE 4383
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4360: LD_VAR 0 4
4364: PUSH
4365: LD_VAR 0 3
4369: ARRAY
4370: PPUSH
4371: LD_INT 4
4373: PPUSH
4374: LD_INT 0
4376: PPUSH
4377: CALL_OW 49
4381: GO 4357
4383: POP
4384: POP
// end else
4385: GO 4430
// begin for j = 1 to other do
4387: LD_ADDR_VAR 0 3
4391: PUSH
4392: DOUBLE
4393: LD_INT 1
4395: DEC
4396: ST_TO_ADDR
4397: LD_VAR 0 4
4401: PUSH
4402: FOR_TO
4403: IFFALSE 4428
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4405: LD_VAR 0 4
4409: PUSH
4410: LD_VAR 0 3
4414: ARRAY
4415: PPUSH
4416: LD_INT 4
4418: PPUSH
4419: LD_INT 0
4421: PPUSH
4422: CALL_OW 49
4426: GO 4402
4428: POP
4429: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4430: LD_ADDR_VAR 0 4
4434: PUSH
4435: LD_STRING 06_other_apemans
4437: PPUSH
4438: CALL_OW 31
4442: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
4443: LD_VAR 0 4
4447: PUSH
4448: LD_INT 5
4450: PUSH
4451: LD_INT 4
4453: PUSH
4454: LD_INT 3
4456: PUSH
4457: LD_INT 3
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: PUSH
4466: LD_OWVAR 67
4470: ARRAY
4471: GREATEREQUAL
4472: IFFALSE 4505
// j := [ 5 , 4 , 3 , 3 ] [ Difficulty ] else
4474: LD_ADDR_VAR 0 3
4478: PUSH
4479: LD_INT 5
4481: PUSH
4482: LD_INT 4
4484: PUSH
4485: LD_INT 3
4487: PUSH
4488: LD_INT 3
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: PUSH
4497: LD_OWVAR 67
4501: ARRAY
4502: ST_TO_ADDR
4503: GO 4515
// j := other ;
4505: LD_ADDR_VAR 0 3
4509: PUSH
4510: LD_VAR 0 4
4514: ST_TO_ADDR
// for i = 1 to j do
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: DOUBLE
4521: LD_INT 1
4523: DEC
4524: ST_TO_ADDR
4525: LD_VAR 0 3
4529: PUSH
4530: FOR_TO
4531: IFFALSE 4556
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4533: LD_VAR 0 4
4537: PUSH
4538: LD_VAR 0 2
4542: ARRAY
4543: PPUSH
4544: LD_INT 4
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 49
4554: GO 4530
4556: POP
4557: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4558: LD_INT 4
4560: PPUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 21
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PPUSH
4585: CALL_OW 70
4589: PPUSH
4590: LD_INT 53
4592: PPUSH
4593: LD_INT 19
4595: PPUSH
4596: CALL_OW 111
// firstAttack = 1 ;
4600: LD_ADDR_EXP 33
4604: PUSH
4605: LD_INT 1
4607: ST_TO_ADDR
// end ;
4608: LD_VAR 0 1
4612: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4613: LD_INT 0
4615: PPUSH
4616: PPUSH
4617: PPUSH
4618: PPUSH
4619: PPUSH
4620: PPUSH
4621: PPUSH
4622: PPUSH
4623: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4624: LD_ADDR_VAR 0 8
4628: PUSH
4629: LD_STRING 07_vehicles
4631: PPUSH
4632: EMPTY
4633: PPUSH
4634: CALL_OW 30
4638: ST_TO_ADDR
// macmilan_squad := [ ] ;
4639: LD_ADDR_EXP 42
4643: PUSH
4644: EMPTY
4645: ST_TO_ADDR
// tmp := [ ] ;
4646: LD_ADDR_VAR 0 6
4650: PUSH
4651: EMPTY
4652: ST_TO_ADDR
// tmp_vehs := [ ] ;
4653: LD_ADDR_VAR 0 7
4657: PUSH
4658: EMPTY
4659: ST_TO_ADDR
// uc_side := 1 ;
4660: LD_ADDR_OWVAR 20
4664: PUSH
4665: LD_INT 1
4667: ST_TO_ADDR
// uc_nation := 1 ;
4668: LD_ADDR_OWVAR 21
4672: PUSH
4673: LD_INT 1
4675: ST_TO_ADDR
// if vehicles then
4676: LD_VAR 0 8
4680: IFFALSE 4839
// begin k := 1 ;
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: LD_INT 1
4689: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4690: LD_ADDR_VAR 0 2
4694: PUSH
4695: DOUBLE
4696: LD_INT 1
4698: DEC
4699: ST_TO_ADDR
4700: LD_VAR 0 8
4704: PUSH
4705: LD_INT 4
4707: DIV
4708: PUSH
4709: FOR_TO
4710: IFFALSE 4837
// begin vc_chassis = vehicles [ k ] ;
4712: LD_ADDR_OWVAR 37
4716: PUSH
4717: LD_VAR 0 8
4721: PUSH
4722: LD_VAR 0 3
4726: ARRAY
4727: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4728: LD_ADDR_OWVAR 39
4732: PUSH
4733: LD_VAR 0 8
4737: PUSH
4738: LD_VAR 0 3
4742: PUSH
4743: LD_INT 1
4745: PLUS
4746: ARRAY
4747: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4748: LD_ADDR_OWVAR 38
4752: PUSH
4753: LD_VAR 0 8
4757: PUSH
4758: LD_VAR 0 3
4762: PUSH
4763: LD_INT 2
4765: PLUS
4766: ARRAY
4767: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4768: LD_ADDR_OWVAR 40
4772: PUSH
4773: LD_VAR 0 8
4777: PUSH
4778: LD_VAR 0 3
4782: PUSH
4783: LD_INT 3
4785: PLUS
4786: ARRAY
4787: ST_TO_ADDR
// k := k + 4 ;
4788: LD_ADDR_VAR 0 3
4792: PUSH
4793: LD_VAR 0 3
4797: PUSH
4798: LD_INT 4
4800: PLUS
4801: ST_TO_ADDR
// veh := CreateVehicle ;
4802: LD_ADDR_VAR 0 9
4806: PUSH
4807: CALL_OW 45
4811: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4812: LD_ADDR_VAR 0 7
4816: PUSH
4817: LD_VAR 0 7
4821: PPUSH
4822: LD_INT 1
4824: PPUSH
4825: LD_VAR 0 9
4829: PPUSH
4830: CALL_OW 2
4834: ST_TO_ADDR
// end ;
4835: GO 4709
4837: POP
4838: POP
// end ; JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
4839: LD_ADDR_EXP 1
4843: PUSH
4844: LD_STRING JMM
4846: PPUSH
4847: LD_INT 1
4849: PPUSH
4850: LD_EXP 44
4854: PPUSH
4855: CALL 46240 0 3
4859: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4860: LD_EXP 12
4864: PUSH
4865: LD_INT 1
4867: EQUAL
4868: PUSH
4869: LD_EXP 12
4873: PUSH
4874: LD_INT 3
4876: EQUAL
4877: OR
4878: PUSH
4879: LD_EXP 2
4883: NOT
4884: AND
4885: IFFALSE 4943
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
4887: LD_ADDR_EXP 2
4891: PUSH
4892: LD_STRING Brown
4894: PPUSH
4895: LD_INT 1
4897: PPUSH
4898: LD_EXP 44
4902: PPUSH
4903: CALL 46240 0 3
4907: ST_TO_ADDR
// if Brown then
4908: LD_EXP 2
4912: IFFALSE 4943
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
4914: LD_ADDR_VAR 0 6
4918: PUSH
4919: LD_VAR 0 6
4923: PPUSH
4924: LD_VAR 0 6
4928: PUSH
4929: LD_INT 1
4931: PLUS
4932: PPUSH
4933: LD_EXP 2
4937: PPUSH
4938: CALL_OW 1
4942: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4943: LD_EXP 12
4947: PUSH
4948: LD_INT 2
4950: EQUAL
4951: PUSH
4952: LD_EXP 12
4956: PUSH
4957: LD_INT 3
4959: EQUAL
4960: OR
4961: PUSH
4962: LD_EXP 3
4966: NOT
4967: AND
4968: IFFALSE 5026
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
4970: LD_ADDR_EXP 3
4974: PUSH
4975: LD_STRING Donaldson
4977: PPUSH
4978: LD_INT 1
4980: PPUSH
4981: LD_EXP 44
4985: PPUSH
4986: CALL 46240 0 3
4990: ST_TO_ADDR
// if Donaldson then
4991: LD_EXP 3
4995: IFFALSE 5026
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
4997: LD_ADDR_VAR 0 6
5001: PUSH
5002: LD_VAR 0 6
5006: PPUSH
5007: LD_VAR 0 6
5011: PUSH
5012: LD_INT 1
5014: PLUS
5015: PPUSH
5016: LD_EXP 3
5020: PPUSH
5021: CALL_OW 1
5025: ST_TO_ADDR
// end ; if not Bobby then
5026: LD_EXP 4
5030: NOT
5031: IFFALSE 5089
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
5033: LD_ADDR_EXP 4
5037: PUSH
5038: LD_STRING Bobby
5040: PPUSH
5041: LD_INT 1
5043: PPUSH
5044: LD_EXP 44
5048: PPUSH
5049: CALL 46240 0 3
5053: ST_TO_ADDR
// if Bobby then
5054: LD_EXP 4
5058: IFFALSE 5089
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5060: LD_ADDR_VAR 0 6
5064: PUSH
5065: LD_VAR 0 6
5069: PPUSH
5070: LD_VAR 0 6
5074: PUSH
5075: LD_INT 1
5077: PLUS
5078: PPUSH
5079: LD_EXP 4
5083: PPUSH
5084: CALL_OW 1
5088: ST_TO_ADDR
// end ; if not Cyrus then
5089: LD_EXP 5
5093: NOT
5094: IFFALSE 5152
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
5096: LD_ADDR_EXP 5
5100: PUSH
5101: LD_STRING Cyrus
5103: PPUSH
5104: LD_INT 1
5106: PPUSH
5107: LD_EXP 44
5111: PPUSH
5112: CALL 46240 0 3
5116: ST_TO_ADDR
// if Cyrus then
5117: LD_EXP 5
5121: IFFALSE 5152
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5123: LD_ADDR_VAR 0 6
5127: PUSH
5128: LD_VAR 0 6
5132: PPUSH
5133: LD_VAR 0 6
5137: PUSH
5138: LD_INT 1
5140: PLUS
5141: PPUSH
5142: LD_EXP 5
5146: PPUSH
5147: CALL_OW 1
5151: ST_TO_ADDR
// end ; if not Lisa then
5152: LD_EXP 6
5156: NOT
5157: IFFALSE 5215
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
5159: LD_ADDR_EXP 6
5163: PUSH
5164: LD_STRING Lisa
5166: PPUSH
5167: LD_INT 1
5169: PPUSH
5170: LD_EXP 44
5174: PPUSH
5175: CALL 46240 0 3
5179: ST_TO_ADDR
// if Lisa then
5180: LD_EXP 6
5184: IFFALSE 5215
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5186: LD_ADDR_VAR 0 6
5190: PUSH
5191: LD_VAR 0 6
5195: PPUSH
5196: LD_VAR 0 6
5200: PUSH
5201: LD_INT 1
5203: PLUS
5204: PPUSH
5205: LD_EXP 6
5209: PPUSH
5210: CALL_OW 1
5214: ST_TO_ADDR
// end ; if not Frank then
5215: LD_EXP 7
5219: NOT
5220: IFFALSE 5278
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
5222: LD_ADDR_EXP 7
5226: PUSH
5227: LD_STRING Frank
5229: PPUSH
5230: LD_INT 1
5232: PPUSH
5233: LD_EXP 44
5237: PPUSH
5238: CALL 46240 0 3
5242: ST_TO_ADDR
// if Frank then
5243: LD_EXP 7
5247: IFFALSE 5278
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5249: LD_ADDR_VAR 0 6
5253: PUSH
5254: LD_VAR 0 6
5258: PPUSH
5259: LD_VAR 0 6
5263: PUSH
5264: LD_INT 1
5266: PLUS
5267: PPUSH
5268: LD_EXP 7
5272: PPUSH
5273: CALL_OW 1
5277: ST_TO_ADDR
// end ; if not Kikuchi then
5278: LD_EXP 9
5282: NOT
5283: IFFALSE 5341
// begin Kikuchi = PrepareUnit ( Kikuchi , true , mission_prefix_prev ) ;
5285: LD_ADDR_EXP 9
5289: PUSH
5290: LD_STRING Kikuchi
5292: PPUSH
5293: LD_INT 1
5295: PPUSH
5296: LD_EXP 44
5300: PPUSH
5301: CALL 46240 0 3
5305: ST_TO_ADDR
// if Kikuchi then
5306: LD_EXP 9
5310: IFFALSE 5341
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5312: LD_ADDR_VAR 0 6
5316: PUSH
5317: LD_VAR 0 6
5321: PPUSH
5322: LD_VAR 0 6
5326: PUSH
5327: LD_INT 1
5329: PLUS
5330: PPUSH
5331: LD_EXP 9
5335: PPUSH
5336: CALL_OW 1
5340: ST_TO_ADDR
// end ; if not Gladstone then
5341: LD_EXP 8
5345: NOT
5346: IFFALSE 5404
// begin Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
5348: LD_ADDR_EXP 8
5352: PUSH
5353: LD_STRING Gladstone
5355: PPUSH
5356: LD_INT 1
5358: PPUSH
5359: LD_EXP 44
5363: PPUSH
5364: CALL 46240 0 3
5368: ST_TO_ADDR
// if Gladstone then
5369: LD_EXP 8
5373: IFFALSE 5404
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5375: LD_ADDR_VAR 0 6
5379: PUSH
5380: LD_VAR 0 6
5384: PPUSH
5385: LD_VAR 0 6
5389: PUSH
5390: LD_INT 1
5392: PLUS
5393: PPUSH
5394: LD_EXP 8
5398: PPUSH
5399: CALL_OW 1
5403: ST_TO_ADDR
// end ; if not Khatam then
5404: LD_EXP 10
5408: NOT
5409: IFFALSE 5467
// begin Khatam = PrepareUnit ( Khatam , true , mission_prefix_prev ) ;
5411: LD_ADDR_EXP 10
5415: PUSH
5416: LD_STRING Khatam
5418: PPUSH
5419: LD_INT 1
5421: PPUSH
5422: LD_EXP 44
5426: PPUSH
5427: CALL 46240 0 3
5431: ST_TO_ADDR
// if Khatam then
5432: LD_EXP 10
5436: IFFALSE 5467
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5438: LD_ADDR_VAR 0 6
5442: PUSH
5443: LD_VAR 0 6
5447: PPUSH
5448: LD_VAR 0 6
5452: PUSH
5453: LD_INT 1
5455: PLUS
5456: PPUSH
5457: LD_EXP 10
5461: PPUSH
5462: CALL_OW 1
5466: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5467: LD_ADDR_VAR 0 5
5471: PUSH
5472: LD_STRING 07c_others
5474: PPUSH
5475: CALL_OW 31
5479: ST_TO_ADDR
// macmilan_squad := others ;
5480: LD_ADDR_EXP 42
5484: PUSH
5485: LD_VAR 0 5
5489: ST_TO_ADDR
// if others then
5490: LD_VAR 0 5
5494: IFFALSE 5582
// for i in others do
5496: LD_ADDR_VAR 0 2
5500: PUSH
5501: LD_VAR 0 5
5505: PUSH
5506: FOR_IN
5507: IFFALSE 5580
// if GetClass ( i ) = 3 then
5509: LD_VAR 0 2
5513: PPUSH
5514: CALL_OW 257
5518: PUSH
5519: LD_INT 3
5521: EQUAL
5522: IFFALSE 5549
// tmp := Insert ( tmp , 1 , i ) else
5524: LD_ADDR_VAR 0 6
5528: PUSH
5529: LD_VAR 0 6
5533: PPUSH
5534: LD_INT 1
5536: PPUSH
5537: LD_VAR 0 2
5541: PPUSH
5542: CALL_OW 2
5546: ST_TO_ADDR
5547: GO 5578
// tmp := Replace ( tmp , tmp + 1 , i ) ;
5549: LD_ADDR_VAR 0 6
5553: PUSH
5554: LD_VAR 0 6
5558: PPUSH
5559: LD_VAR 0 6
5563: PUSH
5564: LD_INT 1
5566: PLUS
5567: PPUSH
5568: LD_VAR 0 2
5572: PPUSH
5573: CALL_OW 1
5577: ST_TO_ADDR
5578: GO 5506
5580: POP
5581: POP
// if FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) then
5582: LD_INT 4
5584: PPUSH
5585: LD_INT 21
5587: PUSH
5588: LD_INT 3
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PPUSH
5595: CALL_OW 70
5599: IFFALSE 5640
// for i in FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) do
5601: LD_ADDR_VAR 0 2
5605: PUSH
5606: LD_INT 4
5608: PPUSH
5609: LD_INT 21
5611: PUSH
5612: LD_INT 3
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PPUSH
5619: CALL_OW 70
5623: PUSH
5624: FOR_IN
5625: IFFALSE 5638
// RemoveUnit ( i ) ;
5627: LD_VAR 0 2
5631: PPUSH
5632: CALL_OW 64
5636: GO 5624
5638: POP
5639: POP
// wait ( 0 0$1 ) ;
5640: LD_INT 35
5642: PPUSH
5643: CALL_OW 67
// if tmp then
5647: LD_VAR 0 6
5651: IFFALSE 5836
// begin for i in tmp do
5653: LD_ADDR_VAR 0 2
5657: PUSH
5658: LD_VAR 0 6
5662: PUSH
5663: FOR_IN
5664: IFFALSE 5834
// begin SetDir ( i , 3 ) ;
5666: LD_VAR 0 2
5670: PPUSH
5671: LD_INT 3
5673: PPUSH
5674: CALL_OW 233
// if tmp_vehs then
5678: LD_VAR 0 7
5682: IFFALSE 5760
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5684: LD_VAR 0 7
5688: PUSH
5689: LD_INT 1
5691: ARRAY
5692: PPUSH
5693: LD_INT 3
5695: PPUSH
5696: CALL_OW 233
// PlaceUnitXY ( tmp_vehs [ 1 ] , 78 , 5 , false ) ;
5700: LD_VAR 0 7
5704: PUSH
5705: LD_INT 1
5707: ARRAY
5708: PPUSH
5709: LD_INT 78
5711: PPUSH
5712: LD_INT 5
5714: PPUSH
5715: LD_INT 0
5717: PPUSH
5718: CALL_OW 48
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5722: LD_VAR 0 2
5726: PPUSH
5727: LD_VAR 0 7
5731: PUSH
5732: LD_INT 1
5734: ARRAY
5735: PPUSH
5736: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5740: LD_ADDR_VAR 0 7
5744: PUSH
5745: LD_VAR 0 7
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: CALL_OW 3
5757: ST_TO_ADDR
// end else
5758: GO 5775
// PlaceUnitArea ( i , GammaSupport , false ) ;
5760: LD_VAR 0 2
5764: PPUSH
5765: LD_INT 4
5767: PPUSH
5768: LD_INT 0
5770: PPUSH
5771: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5775: LD_VAR 0 2
5779: PPUSH
5780: LD_INT 77
5782: PPUSH
5783: LD_INT 16
5785: PPUSH
5786: CALL_OW 111
// AddComMoveXY ( i , 65 , 24 ) ;
5790: LD_VAR 0 2
5794: PPUSH
5795: LD_INT 65
5797: PPUSH
5798: LD_INT 24
5800: PPUSH
5801: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5805: LD_INT 35
5807: PPUSH
5808: CALL_OW 67
// until not FilterUnitsInArea ( GammaSupport , [ f_side , 1 ] ) ;
5812: LD_INT 4
5814: PPUSH
5815: LD_INT 22
5817: PUSH
5818: LD_INT 1
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: PPUSH
5825: CALL_OW 70
5829: NOT
5830: IFFALSE 5805
// end ;
5832: GO 5663
5834: POP
5835: POP
// end ; PlaceUnitArea ( JMM , GammaSupport , false ) ;
5836: LD_EXP 1
5840: PPUSH
5841: LD_INT 4
5843: PPUSH
5844: LD_INT 0
5846: PPUSH
5847: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5851: LD_EXP 1
5855: PPUSH
5856: LD_INT 77
5858: PPUSH
5859: LD_INT 16
5861: PPUSH
5862: CALL_OW 111
// end ;
5866: LD_VAR 0 1
5870: RET
// export function PrepareSikorsky ; begin
5871: LD_INT 0
5873: PPUSH
// uc_side = 4 ;
5874: LD_ADDR_OWVAR 20
5878: PUSH
5879: LD_INT 4
5881: ST_TO_ADDR
// uc_nation = 1 ;
5882: LD_ADDR_OWVAR 21
5886: PUSH
5887: LD_INT 1
5889: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ,  ) ;
5890: LD_ADDR_EXP 16
5894: PUSH
5895: LD_STRING Sikorski
5897: PPUSH
5898: LD_INT 0
5900: PPUSH
5901: LD_STRING 
5903: PPUSH
5904: CALL 46240 0 3
5908: ST_TO_ADDR
// vc_engine = 1 ;
5909: LD_ADDR_OWVAR 39
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// vc_control = 1 ;
5917: LD_ADDR_OWVAR 38
5921: PUSH
5922: LD_INT 1
5924: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 , 4 ] [ Difficulty ] ;
5925: LD_ADDR_OWVAR 40
5929: PUSH
5930: LD_INT 5
5932: PUSH
5933: LD_INT 3
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 4
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: PUSH
5948: LD_OWVAR 67
5952: ARRAY
5953: ST_TO_ADDR
// vc_chassis = 4 ;
5954: LD_ADDR_OWVAR 37
5958: PUSH
5959: LD_INT 4
5961: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5962: LD_ADDR_EXP 17
5966: PUSH
5967: CALL_OW 45
5971: ST_TO_ADDR
// SetDir ( SikorskyTank , 3 ) ;
5972: LD_EXP 17
5976: PPUSH
5977: LD_INT 3
5979: PPUSH
5980: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
5984: LD_INT 35
5986: PPUSH
5987: CALL_OW 67
// PlaceUnitXY ( SikorskyTank , 18 , 5 , false ) ;
5991: LD_EXP 17
5995: PPUSH
5996: LD_INT 18
5998: PPUSH
5999: LD_INT 5
6001: PPUSH
6002: LD_INT 0
6004: PPUSH
6005: CALL_OW 48
// until IsPlaced ( SikorskyTank ) ;
6009: LD_EXP 17
6013: PPUSH
6014: CALL_OW 305
6018: IFFALSE 5984
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
6020: LD_EXP 16
6024: PPUSH
6025: LD_EXP 17
6029: PPUSH
6030: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
6034: LD_EXP 17
6038: PPUSH
6039: LD_INT 5
6041: PPUSH
6042: CALL_OW 113
// end ;
6046: LD_VAR 0 1
6050: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
6051: LD_INT 0
6053: PPUSH
6054: PPUSH
6055: PPUSH
6056: PPUSH
// InitHc ;
6057: CALL_OW 19
// for i = 1 to [ 5 , 4 , 4 , 3 ] [ Difficulty ] do
6061: LD_ADDR_VAR 0 2
6065: PUSH
6066: DOUBLE
6067: LD_INT 1
6069: DEC
6070: ST_TO_ADDR
6071: LD_INT 5
6073: PUSH
6074: LD_INT 4
6076: PUSH
6077: LD_INT 4
6079: PUSH
6080: LD_INT 3
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: PUSH
6089: LD_OWVAR 67
6093: ARRAY
6094: PUSH
6095: FOR_TO
6096: IFFALSE 6212
// begin uc_side = 4 ;
6098: LD_ADDR_OWVAR 20
6102: PUSH
6103: LD_INT 4
6105: ST_TO_ADDR
// uc_nation = 1 ;
6106: LD_ADDR_OWVAR 21
6110: PUSH
6111: LD_INT 1
6113: ST_TO_ADDR
// hc_name =  ;
6114: LD_ADDR_OWVAR 26
6118: PUSH
6119: LD_STRING 
6121: ST_TO_ADDR
// hc_gallery =  ;
6122: LD_ADDR_OWVAR 33
6126: PUSH
6127: LD_STRING 
6129: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
6130: LD_INT 0
6132: PPUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_INT 5
6138: PPUSH
6139: LD_INT 8
6141: PPUSH
6142: CALL_OW 12
6146: PPUSH
6147: CALL_OW 380
// un = CreateHuman ;
6151: LD_ADDR_VAR 0 3
6155: PUSH
6156: CALL_OW 44
6160: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6161: LD_VAR 0 3
6165: PPUSH
6166: LD_INT 3
6168: PPUSH
6169: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6173: LD_VAR 0 3
6177: PPUSH
6178: LD_INT 9
6180: PPUSH
6181: LD_INT 0
6183: PPUSH
6184: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6188: LD_VAR 0 3
6192: PPUSH
6193: LD_INT 53
6195: PPUSH
6196: LD_INT 23
6198: PPUSH
6199: CALL_OW 111
// wait ( 0 0$1 ) ;
6203: LD_INT 35
6205: PPUSH
6206: CALL_OW 67
// end ;
6210: GO 6095
6212: POP
6213: POP
// for i = 1 to 2 do
6214: LD_ADDR_VAR 0 2
6218: PUSH
6219: DOUBLE
6220: LD_INT 1
6222: DEC
6223: ST_TO_ADDR
6224: LD_INT 2
6226: PUSH
6227: FOR_TO
6228: IFFALSE 6344
// begin uc_side = 4 ;
6230: LD_ADDR_OWVAR 20
6234: PUSH
6235: LD_INT 4
6237: ST_TO_ADDR
// uc_nation = 1 ;
6238: LD_ADDR_OWVAR 21
6242: PUSH
6243: LD_INT 1
6245: ST_TO_ADDR
// hc_name =  ;
6246: LD_ADDR_OWVAR 26
6250: PUSH
6251: LD_STRING 
6253: ST_TO_ADDR
// hc_gallery =  ;
6254: LD_ADDR_OWVAR 33
6258: PUSH
6259: LD_STRING 
6261: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
6262: LD_INT 0
6264: PPUSH
6265: LD_INT 4
6267: PPUSH
6268: LD_INT 5
6270: PPUSH
6271: LD_INT 8
6273: PPUSH
6274: CALL_OW 12
6278: PPUSH
6279: CALL_OW 380
// un = CreateHuman ;
6283: LD_ADDR_VAR 0 3
6287: PUSH
6288: CALL_OW 44
6292: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6293: LD_VAR 0 3
6297: PPUSH
6298: LD_INT 3
6300: PPUSH
6301: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6305: LD_VAR 0 3
6309: PPUSH
6310: LD_INT 9
6312: PPUSH
6313: LD_INT 0
6315: PPUSH
6316: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6320: LD_VAR 0 3
6324: PPUSH
6325: LD_INT 53
6327: PPUSH
6328: LD_INT 23
6330: PPUSH
6331: CALL_OW 111
// wait ( 0 0$1 ) ;
6335: LD_INT 35
6337: PPUSH
6338: CALL_OW 67
// end ;
6342: GO 6227
6344: POP
6345: POP
// for i = 1 to [ 5 , 5 , 4 , 3 ] [ Difficulty ] do
6346: LD_ADDR_VAR 0 2
6350: PUSH
6351: DOUBLE
6352: LD_INT 1
6354: DEC
6355: ST_TO_ADDR
6356: LD_INT 5
6358: PUSH
6359: LD_INT 5
6361: PUSH
6362: LD_INT 4
6364: PUSH
6365: LD_INT 3
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: PUSH
6374: LD_OWVAR 67
6378: ARRAY
6379: PUSH
6380: FOR_TO
6381: IFFALSE 6615
// begin uc_side = 4 ;
6383: LD_ADDR_OWVAR 20
6387: PUSH
6388: LD_INT 4
6390: ST_TO_ADDR
// uc_nation = 1 ;
6391: LD_ADDR_OWVAR 21
6395: PUSH
6396: LD_INT 1
6398: ST_TO_ADDR
// vc_engine = 1 ;
6399: LD_ADDR_OWVAR 39
6403: PUSH
6404: LD_INT 1
6406: ST_TO_ADDR
// vc_control = 1 ;
6407: LD_ADDR_OWVAR 38
6411: PUSH
6412: LD_INT 1
6414: ST_TO_ADDR
// vc_weapon = [ 7 , 4 , 5 , 6 ] [ i mod 4 + 1 ] ;
6415: LD_ADDR_OWVAR 40
6419: PUSH
6420: LD_INT 7
6422: PUSH
6423: LD_INT 4
6425: PUSH
6426: LD_INT 5
6428: PUSH
6429: LD_INT 6
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: PUSH
6438: LD_VAR 0 2
6442: PUSH
6443: LD_INT 4
6445: MOD
6446: PUSH
6447: LD_INT 1
6449: PLUS
6450: ARRAY
6451: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6452: LD_ADDR_OWVAR 37
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: LD_INT 3
6462: PUSH
6463: LD_INT 4
6465: PUSH
6466: LD_INT 4
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_VAR 0 2
6479: PUSH
6480: LD_INT 4
6482: MOD
6483: PUSH
6484: LD_INT 1
6486: PLUS
6487: ARRAY
6488: ST_TO_ADDR
// veh = CreateVehicle ;
6489: LD_ADDR_VAR 0 4
6493: PUSH
6494: CALL_OW 45
6498: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6499: LD_VAR 0 4
6503: PPUSH
6504: LD_INT 3
6506: PPUSH
6507: CALL_OW 233
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: LD_INT 9
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// InitHc ;
6526: CALL_OW 19
// hc_name =  ;
6530: LD_ADDR_OWVAR 26
6534: PUSH
6535: LD_STRING 
6537: ST_TO_ADDR
// hc_gallery =  ;
6538: LD_ADDR_OWVAR 33
6542: PUSH
6543: LD_STRING 
6545: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6546: LD_INT 0
6548: PPUSH
6549: LD_INT 3
6551: PPUSH
6552: LD_INT 5
6554: PPUSH
6555: LD_INT 8
6557: PPUSH
6558: CALL_OW 12
6562: PPUSH
6563: CALL_OW 380
// un = CreateHuman ;
6567: LD_ADDR_VAR 0 3
6571: PUSH
6572: CALL_OW 44
6576: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6577: LD_VAR 0 3
6581: PPUSH
6582: LD_VAR 0 4
6586: PPUSH
6587: CALL_OW 52
// ComMoveXY ( un , 53 , 23 ) ;
6591: LD_VAR 0 3
6595: PPUSH
6596: LD_INT 53
6598: PPUSH
6599: LD_INT 23
6601: PPUSH
6602: CALL_OW 111
// wait ( 0 0$5 ) ;
6606: LD_INT 175
6608: PPUSH
6609: CALL_OW 67
// end ;
6613: GO 6380
6615: POP
6616: POP
// end ; end_of_file
6617: LD_VAR 0 1
6621: RET
// export function PrepareRussianCommander ; begin
6622: LD_INT 0
6624: PPUSH
// uc_side = 3 ;
6625: LD_ADDR_OWVAR 20
6629: PUSH
6630: LD_INT 3
6632: ST_TO_ADDR
// uc_nation = 3 ;
6633: LD_ADDR_OWVAR 21
6637: PUSH
6638: LD_INT 3
6640: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6641: LD_ADDR_EXP 24
6645: PUSH
6646: LD_STRING Borodin
6648: PPUSH
6649: CALL_OW 25
6653: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6654: LD_EXP 24
6658: PPUSH
6659: LD_INT 25
6661: PPUSH
6662: LD_INT 0
6664: PPUSH
6665: CALL_OW 49
// end ;
6669: LD_VAR 0 1
6673: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6674: LD_INT 0
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
// for i = 1 to 10 do
6680: LD_ADDR_VAR 0 2
6684: PUSH
6685: DOUBLE
6686: LD_INT 1
6688: DEC
6689: ST_TO_ADDR
6690: LD_INT 10
6692: PUSH
6693: FOR_TO
6694: IFFALSE 6768
// begin uc_side = 6 ;
6696: LD_ADDR_OWVAR 20
6700: PUSH
6701: LD_INT 6
6703: ST_TO_ADDR
// uc_nation = 3 ;
6704: LD_ADDR_OWVAR 21
6708: PUSH
6709: LD_INT 3
6711: ST_TO_ADDR
// hc_gallery =  ;
6712: LD_ADDR_OWVAR 33
6716: PUSH
6717: LD_STRING 
6719: ST_TO_ADDR
// hc_name =  ;
6720: LD_ADDR_OWVAR 26
6724: PUSH
6725: LD_STRING 
6727: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6728: LD_INT 0
6730: PPUSH
6731: LD_INT 1
6733: PPUSH
6734: LD_INT 3
6736: PPUSH
6737: CALL_OW 380
// un = CreateHuman ;
6741: LD_ADDR_VAR 0 3
6745: PUSH
6746: CALL_OW 44
6750: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6751: LD_VAR 0 3
6755: PPUSH
6756: LD_INT 1
6758: PPUSH
6759: LD_INT 0
6761: PPUSH
6762: CALL_OW 49
// end ;
6766: GO 6693
6768: POP
6769: POP
// for i = 1 to 3 do
6770: LD_ADDR_VAR 0 2
6774: PUSH
6775: DOUBLE
6776: LD_INT 1
6778: DEC
6779: ST_TO_ADDR
6780: LD_INT 3
6782: PUSH
6783: FOR_TO
6784: IFFALSE 6933
// begin uc_side = 6 ;
6786: LD_ADDR_OWVAR 20
6790: PUSH
6791: LD_INT 6
6793: ST_TO_ADDR
// uc_nation = 3 ;
6794: LD_ADDR_OWVAR 21
6798: PUSH
6799: LD_INT 3
6801: ST_TO_ADDR
// vc_engine = 1 ;
6802: LD_ADDR_OWVAR 39
6806: PUSH
6807: LD_INT 1
6809: ST_TO_ADDR
// vc_control = 1 ;
6810: LD_ADDR_OWVAR 38
6814: PUSH
6815: LD_INT 1
6817: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6818: LD_ADDR_OWVAR 40
6822: PUSH
6823: LD_INT 43
6825: PUSH
6826: LD_INT 44
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 1
6835: PPUSH
6836: LD_INT 2
6838: PPUSH
6839: CALL_OW 12
6843: ARRAY
6844: ST_TO_ADDR
// vc_chassis = 22 ;
6845: LD_ADDR_OWVAR 37
6849: PUSH
6850: LD_INT 22
6852: ST_TO_ADDR
// veh = CreateVehicle ;
6853: LD_ADDR_VAR 0 4
6857: PUSH
6858: CALL_OW 45
6862: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6863: LD_VAR 0 4
6867: PPUSH
6868: LD_INT 2
6870: PPUSH
6871: LD_INT 0
6873: PPUSH
6874: CALL_OW 49
// hc_gallery =  ;
6878: LD_ADDR_OWVAR 33
6882: PUSH
6883: LD_STRING 
6885: ST_TO_ADDR
// hc_name =  ;
6886: LD_ADDR_OWVAR 26
6890: PUSH
6891: LD_STRING 
6893: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6894: LD_INT 0
6896: PPUSH
6897: LD_INT 3
6899: PPUSH
6900: LD_INT 4
6902: PPUSH
6903: CALL_OW 380
// un = CreateHuman ;
6907: LD_ADDR_VAR 0 3
6911: PUSH
6912: CALL_OW 44
6916: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6917: LD_VAR 0 3
6921: PPUSH
6922: LD_VAR 0 4
6926: PPUSH
6927: CALL_OW 52
// end ;
6931: GO 6783
6933: POP
6934: POP
// end ;
6935: LD_VAR 0 1
6939: RET
// export function PrepareRussians ; var i , un ; begin
6940: LD_INT 0
6942: PPUSH
6943: PPUSH
6944: PPUSH
// for i = 1 to 8 do
6945: LD_ADDR_VAR 0 2
6949: PUSH
6950: DOUBLE
6951: LD_INT 1
6953: DEC
6954: ST_TO_ADDR
6955: LD_INT 8
6957: PUSH
6958: FOR_TO
6959: IFFALSE 7045
// begin uc_side = 3 ;
6961: LD_ADDR_OWVAR 20
6965: PUSH
6966: LD_INT 3
6968: ST_TO_ADDR
// uc_nation = 3 ;
6969: LD_ADDR_OWVAR 21
6973: PUSH
6974: LD_INT 3
6976: ST_TO_ADDR
// hc_gallery =  ;
6977: LD_ADDR_OWVAR 33
6981: PUSH
6982: LD_STRING 
6984: ST_TO_ADDR
// hc_name =  ;
6985: LD_ADDR_OWVAR 26
6989: PUSH
6990: LD_STRING 
6992: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6993: LD_INT 0
6995: PPUSH
6996: LD_INT 1
6998: PPUSH
6999: LD_EXP 25
7003: PPUSH
7004: LD_EXP 26
7008: PPUSH
7009: CALL_OW 12
7013: PPUSH
7014: CALL_OW 380
// un = CreateHuman ;
7018: LD_ADDR_VAR 0 3
7022: PUSH
7023: CALL_OW 44
7027: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7028: LD_VAR 0 3
7032: PPUSH
7033: LD_INT 3
7035: PPUSH
7036: LD_INT 0
7038: PPUSH
7039: CALL_OW 49
// end ;
7043: GO 6958
7045: POP
7046: POP
// for i = 1 to 4 do
7047: LD_ADDR_VAR 0 2
7051: PUSH
7052: DOUBLE
7053: LD_INT 1
7055: DEC
7056: ST_TO_ADDR
7057: LD_INT 4
7059: PUSH
7060: FOR_TO
7061: IFFALSE 7147
// begin uc_side = 3 ;
7063: LD_ADDR_OWVAR 20
7067: PUSH
7068: LD_INT 3
7070: ST_TO_ADDR
// uc_nation = 3 ;
7071: LD_ADDR_OWVAR 21
7075: PUSH
7076: LD_INT 3
7078: ST_TO_ADDR
// hc_gallery =  ;
7079: LD_ADDR_OWVAR 33
7083: PUSH
7084: LD_STRING 
7086: ST_TO_ADDR
// hc_name =  ;
7087: LD_ADDR_OWVAR 26
7091: PUSH
7092: LD_STRING 
7094: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7095: LD_INT 0
7097: PPUSH
7098: LD_INT 2
7100: PPUSH
7101: LD_EXP 25
7105: PPUSH
7106: LD_EXP 26
7110: PPUSH
7111: CALL_OW 12
7115: PPUSH
7116: CALL_OW 380
// un = CreateHuman ;
7120: LD_ADDR_VAR 0 3
7124: PUSH
7125: CALL_OW 44
7129: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7130: LD_VAR 0 3
7134: PPUSH
7135: LD_INT 3
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7060
7147: POP
7148: POP
// for i = 1 to 3 do
7149: LD_ADDR_VAR 0 2
7153: PUSH
7154: DOUBLE
7155: LD_INT 1
7157: DEC
7158: ST_TO_ADDR
7159: LD_INT 3
7161: PUSH
7162: FOR_TO
7163: IFFALSE 7249
// begin uc_side = 3 ;
7165: LD_ADDR_OWVAR 20
7169: PUSH
7170: LD_INT 3
7172: ST_TO_ADDR
// uc_nation = 3 ;
7173: LD_ADDR_OWVAR 21
7177: PUSH
7178: LD_INT 3
7180: ST_TO_ADDR
// hc_gallery =  ;
7181: LD_ADDR_OWVAR 33
7185: PUSH
7186: LD_STRING 
7188: ST_TO_ADDR
// hc_name =  ;
7189: LD_ADDR_OWVAR 26
7193: PUSH
7194: LD_STRING 
7196: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7197: LD_INT 0
7199: PPUSH
7200: LD_INT 3
7202: PPUSH
7203: LD_EXP 25
7207: PPUSH
7208: LD_EXP 26
7212: PPUSH
7213: CALL_OW 12
7217: PPUSH
7218: CALL_OW 380
// un = CreateHuman ;
7222: LD_ADDR_VAR 0 3
7226: PUSH
7227: CALL_OW 44
7231: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7232: LD_VAR 0 3
7236: PPUSH
7237: LD_INT 3
7239: PPUSH
7240: LD_INT 0
7242: PPUSH
7243: CALL_OW 49
// end ;
7247: GO 7162
7249: POP
7250: POP
// for i = 1 to 2 do
7251: LD_ADDR_VAR 0 2
7255: PUSH
7256: DOUBLE
7257: LD_INT 1
7259: DEC
7260: ST_TO_ADDR
7261: LD_INT 2
7263: PUSH
7264: FOR_TO
7265: IFFALSE 7351
// begin uc_side = 3 ;
7267: LD_ADDR_OWVAR 20
7271: PUSH
7272: LD_INT 3
7274: ST_TO_ADDR
// uc_nation = 3 ;
7275: LD_ADDR_OWVAR 21
7279: PUSH
7280: LD_INT 3
7282: ST_TO_ADDR
// hc_gallery =  ;
7283: LD_ADDR_OWVAR 33
7287: PUSH
7288: LD_STRING 
7290: ST_TO_ADDR
// hc_name =  ;
7291: LD_ADDR_OWVAR 26
7295: PUSH
7296: LD_STRING 
7298: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7299: LD_INT 0
7301: PPUSH
7302: LD_INT 4
7304: PPUSH
7305: LD_EXP 25
7309: PPUSH
7310: LD_EXP 26
7314: PPUSH
7315: CALL_OW 12
7319: PPUSH
7320: CALL_OW 380
// un = CreateHuman ;
7324: LD_ADDR_VAR 0 3
7328: PUSH
7329: CALL_OW 44
7333: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7334: LD_VAR 0 3
7338: PPUSH
7339: LD_INT 3
7341: PPUSH
7342: LD_INT 0
7344: PPUSH
7345: CALL_OW 49
// end ;
7349: GO 7264
7351: POP
7352: POP
// end ; end_of_file
7353: LD_VAR 0 1
7357: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7358: LD_INT 0
7360: PPUSH
7361: PPUSH
7362: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7363: LD_ADDR_VAR 0 1
7367: PUSH
7368: LD_VAR 0 1
7372: PUSH
7373: LD_EXP 1
7377: PUSH
7378: LD_EXP 2
7382: PUSH
7383: LD_EXP 3
7387: PUSH
7388: LD_EXP 4
7392: PUSH
7393: LD_EXP 5
7397: PUSH
7398: LD_EXP 6
7402: PUSH
7403: LD_EXP 7
7407: PUSH
7408: LD_EXP 8
7412: PUSH
7413: LD_EXP 9
7417: PUSH
7418: LD_EXP 10
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: DIFF
7435: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7436: LD_ADDR_VAR 0 6
7440: PUSH
7441: LD_VAR 0 1
7445: PUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_VAR 0 1
7453: PPUSH
7454: CALL_OW 12
7458: ARRAY
7459: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7460: LD_VAR 0 6
7464: PPUSH
7465: CALL_OW 258
7469: PUSH
7470: LD_INT 1
7472: EQUAL
7473: IFFALSE 7491
// Say ( speaker , dialogMID ) else
7475: LD_VAR 0 6
7479: PPUSH
7480: LD_VAR 0 2
7484: PPUSH
7485: CALL_OW 88
7489: GO 7505
// Say ( speaker , dialogFID ) ;
7491: LD_VAR 0 6
7495: PPUSH
7496: LD_VAR 0 3
7500: PPUSH
7501: CALL_OW 88
// result := speaker ;
7505: LD_ADDR_VAR 0 4
7509: PUSH
7510: LD_VAR 0 6
7514: ST_TO_ADDR
// end ;
7515: LD_VAR 0 4
7519: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7520: LD_INT 0
7522: PPUSH
7523: PPUSH
7524: PPUSH
// uc_side := GetSide ( b ) ;
7525: LD_ADDR_OWVAR 20
7529: PUSH
7530: LD_VAR 0 2
7534: PPUSH
7535: CALL_OW 255
7539: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7540: LD_ADDR_OWVAR 21
7544: PUSH
7545: LD_VAR 0 2
7549: PPUSH
7550: CALL_OW 248
7554: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7555: LD_INT 0
7557: PPUSH
7558: LD_INT 1
7560: PPUSH
7561: LD_VAR 0 1
7565: PPUSH
7566: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7570: LD_ADDR_VAR 0 5
7574: PUSH
7575: LD_VAR 0 2
7579: PPUSH
7580: CALL_OW 254
7584: PUSH
7585: LD_INT 3
7587: MINUS
7588: ST_TO_ADDR
// if dir < 0 then
7589: LD_VAR 0 5
7593: PUSH
7594: LD_INT 0
7596: LESS
7597: IFFALSE 7613
// dir := 6 + dir ;
7599: LD_ADDR_VAR 0 5
7603: PUSH
7604: LD_INT 6
7606: PUSH
7607: LD_VAR 0 5
7611: PLUS
7612: ST_TO_ADDR
// un := CreateHuman ;
7613: LD_ADDR_VAR 0 4
7617: PUSH
7618: CALL_OW 44
7622: ST_TO_ADDR
// SetDir ( un , dir ) ;
7623: LD_VAR 0 4
7627: PPUSH
7628: LD_VAR 0 5
7632: PPUSH
7633: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7637: LD_VAR 0 4
7641: PPUSH
7642: LD_VAR 0 2
7646: PPUSH
7647: CALL_OW 52
// end ;
7651: LD_VAR 0 3
7655: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7656: LD_INT 0
7658: PPUSH
7659: PPUSH
7660: PPUSH
7661: PPUSH
// for i = 1 to count do
7662: LD_ADDR_VAR 0 8
7666: PUSH
7667: DOUBLE
7668: LD_INT 1
7670: DEC
7671: ST_TO_ADDR
7672: LD_VAR 0 6
7676: PUSH
7677: FOR_TO
7678: IFFALSE 7759
// begin uc_side = side ;
7680: LD_ADDR_OWVAR 20
7684: PUSH
7685: LD_VAR 0 1
7689: ST_TO_ADDR
// uc_nation = nation ;
7690: LD_ADDR_OWVAR 21
7694: PUSH
7695: LD_VAR 0 2
7699: ST_TO_ADDR
// hc_gallery =  ;
7700: LD_ADDR_OWVAR 33
7704: PUSH
7705: LD_STRING 
7707: ST_TO_ADDR
// hc_name =  ;
7708: LD_ADDR_OWVAR 26
7712: PUSH
7713: LD_STRING 
7715: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7716: LD_INT 0
7718: PPUSH
7719: LD_VAR 0 5
7723: PPUSH
7724: LD_VAR 0 4
7728: PPUSH
7729: CALL_OW 380
// un = CreateHuman ;
7733: LD_ADDR_VAR 0 10
7737: PUSH
7738: CALL_OW 44
7742: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7743: LD_VAR 0 10
7747: PPUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: CALL_OW 52
// end ;
7757: GO 7677
7759: POP
7760: POP
// end ;
7761: LD_VAR 0 7
7765: RET
// export function PrepareDifficulty ; begin
7766: LD_INT 0
7768: PPUSH
// case Difficulty of 1 :
7769: LD_OWVAR 67
7773: PUSH
7774: LD_INT 1
7776: DOUBLE
7777: EQUAL
7778: IFTRUE 7782
7780: GO 7801
7782: POP
// begin RuSolMinLevel = 3 ;
7783: LD_ADDR_EXP 25
7787: PUSH
7788: LD_INT 3
7790: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7791: LD_ADDR_EXP 26
7795: PUSH
7796: LD_INT 5
7798: ST_TO_ADDR
// end ; 2 :
7799: GO 7979
7801: LD_INT 2
7803: DOUBLE
7804: EQUAL
7805: IFTRUE 7809
7807: GO 7880
7809: POP
// begin RuSolMinLevel = 5 ;
7810: LD_ADDR_EXP 25
7814: PUSH
7815: LD_INT 5
7817: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7818: LD_ADDR_EXP 26
7822: PUSH
7823: LD_INT 6
7825: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7826: LD_INT 51
7828: PPUSH
7829: LD_INT 3
7831: PPUSH
7832: LD_INT 1
7834: PPUSH
7835: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7839: LD_INT 57
7841: PPUSH
7842: LD_INT 3
7844: PPUSH
7845: LD_INT 1
7847: PPUSH
7848: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7852: LD_INT 57
7854: PPUSH
7855: LD_INT 6
7857: PPUSH
7858: LD_INT 2
7860: PPUSH
7861: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7865: LD_INT 51
7867: PPUSH
7868: LD_INT 6
7870: PPUSH
7871: LD_INT 2
7873: PPUSH
7874: CALL_OW 322
// end ; 3 .. 4 :
7878: GO 7979
7880: LD_INT 3
7882: DOUBLE
7883: GREATEREQUAL
7884: IFFALSE 7892
7886: LD_INT 4
7888: DOUBLE
7889: LESSEQUAL
7890: IFTRUE 7894
7892: GO 7978
7894: POP
// begin RuSolMinLevel = 5 ;
7895: LD_ADDR_EXP 25
7899: PUSH
7900: LD_INT 5
7902: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7903: LD_ADDR_EXP 26
7907: PUSH
7908: LD_INT 6
7910: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7911: LD_INT 57
7913: PPUSH
7914: LD_INT 3
7916: PPUSH
7917: LD_INT 1
7919: PPUSH
7920: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7924: LD_INT 51
7926: PPUSH
7927: LD_INT 3
7929: PPUSH
7930: LD_INT 1
7932: PPUSH
7933: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7937: LD_INT 52
7939: PPUSH
7940: LD_INT 3
7942: PPUSH
7943: LD_INT 1
7945: PPUSH
7946: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7950: LD_INT 57
7952: PPUSH
7953: LD_INT 6
7955: PPUSH
7956: LD_INT 2
7958: PPUSH
7959: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7963: LD_INT 52
7965: PPUSH
7966: LD_INT 6
7968: PPUSH
7969: LD_INT 2
7971: PPUSH
7972: CALL_OW 322
// end ; end ;
7976: GO 7979
7978: POP
// end ;
7979: LD_VAR 0 1
7983: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7984: LD_INT 0
7986: PPUSH
7987: PPUSH
7988: PPUSH
7989: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7990: LD_ADDR_VAR 0 3
7994: PUSH
7995: LD_INT 22
7997: PUSH
7998: LD_INT 3
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: LD_INT 25
8007: PUSH
8008: LD_INT 2
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PPUSH
8019: CALL_OW 69
8023: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
8024: LD_ADDR_VAR 0 4
8028: PUSH
8029: LD_INT 4
8031: PUSH
8032: LD_INT 75
8034: PUSH
8035: LD_INT 79
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: LD_INT 4
8049: PUSH
8050: LD_INT 113
8052: PUSH
8053: LD_INT 94
8055: PUSH
8056: LD_INT 4
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 29
8067: PUSH
8068: LD_INT 106
8070: PUSH
8071: LD_INT 97
8073: PUSH
8074: LD_INT 3
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: PUSH
8083: LD_INT 26
8085: PUSH
8086: LD_INT 93
8088: PUSH
8089: LD_INT 97
8091: PUSH
8092: LD_INT 5
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: LD_INT 100
8106: PUSH
8107: LD_INT 89
8109: PUSH
8110: LD_INT 3
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 17
8121: PUSH
8122: LD_INT 96
8124: PUSH
8125: LD_INT 89
8127: PUSH
8128: LD_INT 1
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 32
8139: PUSH
8140: LD_INT 78
8142: PUSH
8143: LD_INT 94
8145: PUSH
8146: LD_INT 1
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: PUSH
8155: LD_INT 32
8157: PUSH
8158: LD_INT 95
8160: PUSH
8161: LD_INT 82
8163: PUSH
8164: LD_INT 3
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 32
8175: PUSH
8176: LD_INT 104
8178: PUSH
8179: LD_INT 85
8181: PUSH
8182: LD_INT 2
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 32
8193: PUSH
8194: LD_INT 81
8196: PUSH
8197: LD_INT 78
8199: PUSH
8200: LD_INT 2
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 33
8211: PUSH
8212: LD_INT 109
8214: PUSH
8215: LD_INT 90
8217: PUSH
8218: LD_INT 3
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: PUSH
8227: LD_INT 33
8229: PUSH
8230: LD_INT 88
8232: PUSH
8233: LD_INT 79
8235: PUSH
8236: LD_INT 3
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: PUSH
8245: LD_INT 33
8247: PUSH
8248: LD_INT 76
8250: PUSH
8251: LD_INT 87
8253: PUSH
8254: LD_INT 1
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: PUSH
8263: LD_INT 26
8265: PUSH
8266: LD_INT 96
8268: PUSH
8269: LD_INT 97
8271: PUSH
8272: LD_INT 5
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 26
8283: PUSH
8284: LD_INT 85
8286: PUSH
8287: LD_INT 84
8289: PUSH
8290: LD_INT 2
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: PUSH
8299: LD_INT 6
8301: PUSH
8302: LD_INT 88
8304: PUSH
8305: LD_INT 95
8307: PUSH
8308: LD_INT 0
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 19
8319: PUSH
8320: LD_INT 103
8322: PUSH
8323: LD_INT 89
8325: PUSH
8326: LD_INT 4
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 16
8337: PUSH
8338: LD_INT 97
8340: PUSH
8341: LD_INT 86
8343: PUSH
8344: LD_INT 2
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 24
8355: PUSH
8356: LD_INT 100
8358: PUSH
8359: LD_INT 85
8361: PUSH
8362: LD_INT 3
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: ST_TO_ADDR
// for i := 1 to buildingsTab do
8392: LD_ADDR_VAR 0 2
8396: PUSH
8397: DOUBLE
8398: LD_INT 1
8400: DEC
8401: ST_TO_ADDR
8402: LD_VAR 0 4
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8481
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8410: LD_VAR 0 3
8414: PPUSH
8415: LD_VAR 0 4
8419: PUSH
8420: LD_VAR 0 2
8424: ARRAY
8425: PUSH
8426: LD_INT 1
8428: ARRAY
8429: PPUSH
8430: LD_VAR 0 4
8434: PUSH
8435: LD_VAR 0 2
8439: ARRAY
8440: PUSH
8441: LD_INT 2
8443: ARRAY
8444: PPUSH
8445: LD_VAR 0 4
8449: PUSH
8450: LD_VAR 0 2
8454: ARRAY
8455: PUSH
8456: LD_INT 3
8458: ARRAY
8459: PPUSH
8460: LD_VAR 0 4
8464: PUSH
8465: LD_VAR 0 2
8469: ARRAY
8470: PUSH
8471: LD_INT 4
8473: ARRAY
8474: PPUSH
8475: CALL_OW 205
8479: GO 8407
8481: POP
8482: POP
// end ;
8483: LD_VAR 0 1
8487: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8488: LD_INT 0
8490: PPUSH
8491: PPUSH
// for i in charactersList do
8492: LD_ADDR_VAR 0 4
8496: PUSH
8497: LD_VAR 0 1
8501: PUSH
8502: FOR_IN
8503: IFFALSE 8521
// SaveCharacters ( i , ident ) ;
8505: LD_VAR 0 4
8509: PPUSH
8510: LD_VAR 0 2
8514: PPUSH
8515: CALL_OW 38
8519: GO 8502
8521: POP
8522: POP
// end ;
8523: LD_VAR 0 3
8527: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8528: LD_INT 0
8530: PPUSH
8531: PPUSH
8532: PPUSH
8533: PPUSH
8534: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8535: LD_ADDR_VAR 0 8
8539: PUSH
8540: LD_INT 48
8542: PUSH
8543: LD_INT 49
8545: PUSH
8546: LD_INT 50
8548: PUSH
8549: LD_INT 20
8551: PUSH
8552: LD_INT 1
8554: PUSH
8555: LD_INT 51
8557: PUSH
8558: LD_INT 52
8560: PUSH
8561: LD_INT 69
8563: PUSH
8564: LD_INT 39
8566: PUSH
8567: LD_INT 34
8569: PUSH
8570: LD_INT 40
8572: PUSH
8573: LD_INT 53
8575: PUSH
8576: LD_INT 71
8578: PUSH
8579: LD_INT 57
8581: PUSH
8582: LD_INT 58
8584: PUSH
8585: LD_INT 44
8587: PUSH
8588: LD_INT 32
8590: PUSH
8591: LD_INT 27
8593: PUSH
8594: LD_INT 23
8596: PUSH
8597: LD_INT 33
8599: PUSH
8600: LD_INT 59
8602: PUSH
8603: LD_INT 54
8605: PUSH
8606: LD_INT 55
8608: PUSH
8609: LD_INT 56
8611: PUSH
8612: LD_INT 63
8614: PUSH
8615: LD_INT 64
8617: PUSH
8618: LD_INT 65
8620: PUSH
8621: LD_INT 30
8623: PUSH
8624: LD_INT 31
8626: PUSH
8627: LD_INT 21
8629: PUSH
8630: LD_INT 22
8632: PUSH
8633: LD_INT 25
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8670: LD_ADDR_VAR 0 5
8674: PUSH
8675: DOUBLE
8676: LD_INT 1
8678: DEC
8679: ST_TO_ADDR
8680: LD_VAR 0 8
8684: PUSH
8685: FOR_TO
8686: IFFALSE 8762
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8688: LD_VAR 0 8
8692: PUSH
8693: LD_VAR 0 5
8697: ARRAY
8698: PPUSH
8699: LD_VAR 0 1
8703: PPUSH
8704: CALL_OW 321
8708: PUSH
8709: LD_INT 1
8711: EQUAL
8712: PUSH
8713: LD_VAR 0 8
8717: PUSH
8718: LD_VAR 0 5
8722: ARRAY
8723: PPUSH
8724: LD_VAR 0 3
8728: PPUSH
8729: CALL_OW 482
8733: PUSH
8734: LD_INT 1
8736: EQUAL
8737: AND
8738: IFFALSE 8760
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8740: LD_VAR 0 2
8744: PPUSH
8745: LD_VAR 0 8
8749: PUSH
8750: LD_VAR 0 5
8754: ARRAY
8755: PPUSH
8756: CALL_OW 184
8760: GO 8685
8762: POP
8763: POP
// end ;
8764: LD_VAR 0 4
8768: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8769: LD_INT 0
8771: PPUSH
8772: PPUSH
8773: PPUSH
8774: PPUSH
8775: PPUSH
8776: PPUSH
8777: PPUSH
8778: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8779: LD_ADDR_VAR 0 6
8783: PUSH
8784: LD_VAR 0 2
8788: PPUSH
8789: LD_INT 22
8791: PUSH
8792: LD_VAR 0 1
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: LD_INT 56
8803: PUSH
8804: EMPTY
8805: LIST
8806: PUSH
8807: LD_INT 24
8809: PUSH
8810: LD_INT 700
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: LD_INT 3
8819: PUSH
8820: LD_INT 60
8822: PUSH
8823: EMPTY
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 2
8832: PUSH
8833: LD_INT 25
8835: PUSH
8836: LD_INT 1
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 25
8845: PUSH
8846: LD_INT 5
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 25
8855: PUSH
8856: LD_INT 8
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: LD_INT 25
8865: PUSH
8866: LD_INT 9
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: PPUSH
8887: CALL_OW 70
8891: PUSH
8892: LD_EXP 24
8896: PUSH
8897: EMPTY
8898: LIST
8899: DIFF
8900: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8901: LD_ADDR_VAR 0 7
8905: PUSH
8906: LD_VAR 0 2
8910: PPUSH
8911: LD_INT 22
8913: PUSH
8914: LD_VAR 0 1
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: LD_INT 30
8925: PUSH
8926: LD_INT 32
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 58
8935: PUSH
8936: EMPTY
8937: LIST
8938: PUSH
8939: LD_INT 24
8941: PUSH
8942: LD_INT 251
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: PPUSH
8955: CALL_OW 70
8959: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8960: LD_ADDR_VAR 0 9
8964: PUSH
8965: LD_VAR 0 2
8969: PPUSH
8970: LD_INT 22
8972: PUSH
8973: LD_VAR 0 1
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: PUSH
8982: LD_INT 2
8984: PUSH
8985: LD_INT 30
8987: PUSH
8988: LD_INT 4
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: PUSH
8995: LD_INT 30
8997: PUSH
8998: LD_INT 5
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: LIST
9009: PUSH
9010: LD_INT 24
9012: PUSH
9013: LD_INT 251
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: LIST
9024: PPUSH
9025: CALL_OW 70
9029: ST_TO_ADDR
// if barrackList > 0 then
9030: LD_VAR 0 9
9034: PUSH
9035: LD_INT 0
9037: GREATER
9038: IFFALSE 9186
// begin if turretList = 0 then
9040: LD_VAR 0 7
9044: PUSH
9045: LD_INT 0
9047: EQUAL
9048: IFFALSE 9090
// begin if soldiers_list > 0 then
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 0
9057: GREATER
9058: IFFALSE 9088
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9060: LD_VAR 0 6
9064: PPUSH
9065: LD_VAR 0 9
9069: PUSH
9070: LD_INT 1
9072: PPUSH
9073: LD_VAR 0 9
9077: PPUSH
9078: CALL_OW 12
9082: ARRAY
9083: PPUSH
9084: CALL_OW 120
// end else
9088: GO 9186
// begin for i in barrackList do
9090: LD_ADDR_VAR 0 4
9094: PUSH
9095: LD_VAR 0 9
9099: PUSH
9100: FOR_IN
9101: IFFALSE 9184
// begin insideUnits = UnitsInside ( i ) ;
9103: LD_ADDR_VAR 0 10
9107: PUSH
9108: LD_VAR 0 4
9112: PPUSH
9113: CALL_OW 313
9117: ST_TO_ADDR
// if insideUnits > 0 then
9118: LD_VAR 0 10
9122: PUSH
9123: LD_INT 0
9125: GREATER
9126: IFFALSE 9150
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9128: LD_VAR 0 10
9132: PUSH
9133: LD_INT 1
9135: ARRAY
9136: PPUSH
9137: LD_VAR 0 7
9141: PUSH
9142: LD_INT 1
9144: ARRAY
9145: PPUSH
9146: CALL_OW 120
// if soldiers_list > 0 then
9150: LD_VAR 0 6
9154: PUSH
9155: LD_INT 0
9157: GREATER
9158: IFFALSE 9182
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9160: LD_VAR 0 6
9164: PUSH
9165: LD_INT 1
9167: ARRAY
9168: PPUSH
9169: LD_VAR 0 7
9173: PUSH
9174: LD_INT 1
9176: ARRAY
9177: PPUSH
9178: CALL_OW 120
// end ;
9182: GO 9100
9184: POP
9185: POP
// end ; end ; end ;
9186: LD_VAR 0 3
9190: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
9191: LD_INT 0
9193: PPUSH
9194: PPUSH
9195: PPUSH
9196: PPUSH
9197: PPUSH
9198: PPUSH
// for i = 1 to vehCount do
9199: LD_ADDR_VAR 0 8
9203: PUSH
9204: DOUBLE
9205: LD_INT 1
9207: DEC
9208: ST_TO_ADDR
9209: LD_VAR 0 6
9213: PUSH
9214: FOR_TO
9215: IFFALSE 9422
// begin uc_side = side ;
9217: LD_ADDR_OWVAR 20
9221: PUSH
9222: LD_VAR 0 1
9226: ST_TO_ADDR
// uc_nation = nation ;
9227: LD_ADDR_OWVAR 21
9231: PUSH
9232: LD_VAR 0 3
9236: ST_TO_ADDR
// vc_Chassis = 22 ;
9237: LD_ADDR_OWVAR 37
9241: PUSH
9242: LD_INT 22
9244: ST_TO_ADDR
// vc_engine = 1 ;
9245: LD_ADDR_OWVAR 39
9249: PUSH
9250: LD_INT 1
9252: ST_TO_ADDR
// vc_control = 1 ;
9253: LD_ADDR_OWVAR 38
9257: PUSH
9258: LD_INT 1
9260: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
9261: LD_ADDR_OWVAR 40
9265: PUSH
9266: LD_INT 43
9268: PUSH
9269: LD_INT 44
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 1
9278: PPUSH
9279: LD_INT 2
9281: PPUSH
9282: CALL_OW 12
9286: ARRAY
9287: ST_TO_ADDR
// veh = CreateVehicle ;
9288: LD_ADDR_VAR 0 12
9292: PUSH
9293: CALL_OW 45
9297: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9298: LD_VAR 0 12
9302: PPUSH
9303: LD_VAR 0 2
9307: PPUSH
9308: LD_INT 0
9310: PPUSH
9311: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9315: LD_ADDR_EXP 32
9319: PUSH
9320: LD_EXP 32
9324: PUSH
9325: LD_VAR 0 12
9329: ADD
9330: ST_TO_ADDR
// hc_class = 3 ;
9331: LD_ADDR_OWVAR 28
9335: PUSH
9336: LD_INT 3
9338: ST_TO_ADDR
// hc_name =  ;
9339: LD_ADDR_OWVAR 26
9343: PUSH
9344: LD_STRING 
9346: ST_TO_ADDR
// hc_gallery =  ;
9347: LD_ADDR_OWVAR 33
9351: PUSH
9352: LD_STRING 
9354: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9355: LD_INT 0
9357: PPUSH
9358: LD_INT 3
9360: PPUSH
9361: LD_EXP 25
9365: PPUSH
9366: LD_EXP 26
9370: PPUSH
9371: CALL_OW 12
9375: PPUSH
9376: CALL_OW 380
// un = CreateHuman ;
9380: LD_ADDR_VAR 0 10
9384: PUSH
9385: CALL_OW 44
9389: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9390: LD_VAR 0 10
9394: PPUSH
9395: LD_VAR 0 12
9399: PPUSH
9400: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9404: LD_ADDR_EXP 32
9408: PUSH
9409: LD_EXP 32
9413: PUSH
9414: LD_VAR 0 10
9418: ADD
9419: ST_TO_ADDR
// end ;
9420: GO 9214
9422: POP
9423: POP
// end ;
9424: LD_VAR 0 7
9428: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9429: LD_INT 0
9431: PPUSH
9432: PPUSH
9433: PPUSH
9434: PPUSH
9435: PPUSH
9436: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9437: LD_VAR 0 2
9441: PPUSH
9442: LD_INT 22
9444: PUSH
9445: LD_VAR 0 1
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PUSH
9454: EMPTY
9455: LIST
9456: PPUSH
9457: CALL_OW 70
9461: PUSH
9462: LD_INT 0
9464: EQUAL
9465: PUSH
9466: LD_EXP 32
9470: AND
9471: IFFALSE 9758
// begin for i in defenders_list do
9473: LD_ADDR_VAR 0 4
9477: PUSH
9478: LD_EXP 32
9482: PUSH
9483: FOR_IN
9484: IFFALSE 9756
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9486: LD_VAR 0 4
9490: PPUSH
9491: LD_INT 63
9493: PPUSH
9494: LD_INT 75
9496: PPUSH
9497: CALL_OW 297
9501: PUSH
9502: LD_INT 8
9504: GREATER
9505: PUSH
9506: LD_VAR 0 4
9510: PPUSH
9511: CALL_OW 314
9515: NOT
9516: AND
9517: IFFALSE 9536
// ComMoveXY ( i , 63 , 75 ) else
9519: LD_VAR 0 4
9523: PPUSH
9524: LD_INT 63
9526: PPUSH
9527: LD_INT 75
9529: PPUSH
9530: CALL_OW 111
9534: GO 9754
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9536: LD_VAR 0 4
9540: PPUSH
9541: CALL_OW 257
9545: PUSH
9546: LD_INT 3
9548: EQUAL
9549: PUSH
9550: LD_VAR 0 4
9554: PPUSH
9555: CALL_OW 310
9559: NOT
9560: AND
9561: PUSH
9562: LD_VAR 0 4
9566: PPUSH
9567: CALL_OW 314
9571: NOT
9572: AND
9573: IFFALSE 9626
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9575: LD_VAR 0 4
9579: PPUSH
9580: LD_EXP 32
9584: PPUSH
9585: LD_INT 58
9587: PUSH
9588: EMPTY
9589: LIST
9590: PUSH
9591: LD_INT 24
9593: PUSH
9594: LD_INT 1000
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PPUSH
9605: CALL_OW 72
9609: PPUSH
9610: LD_VAR 0 4
9614: PPUSH
9615: CALL_OW 74
9619: PPUSH
9620: CALL_OW 120
9624: GO 9754
// if GetFuel ( i ) < 100 then
9626: LD_VAR 0 4
9630: PPUSH
9631: CALL_OW 261
9635: PUSH
9636: LD_INT 100
9638: LESS
9639: IFFALSE 9655
// SetFuel ( defenders_list , 100 ) else
9641: LD_EXP 32
9645: PPUSH
9646: LD_INT 100
9648: PPUSH
9649: CALL_OW 240
9653: GO 9754
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9655: LD_VAR 0 4
9659: PPUSH
9660: CALL_OW 263
9664: PUSH
9665: LD_INT 1
9667: EQUAL
9668: PUSH
9669: LD_VAR 0 4
9673: PPUSH
9674: CALL_OW 256
9678: PUSH
9679: LD_INT 990
9681: LESS
9682: AND
9683: IFFALSE 9754
// begin veh := i ;
9685: LD_ADDR_VAR 0 7
9689: PUSH
9690: LD_VAR 0 4
9694: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9695: LD_ADDR_VAR 0 8
9699: PUSH
9700: LD_VAR 0 4
9704: PPUSH
9705: CALL_OW 311
9709: ST_TO_ADDR
// if veh then
9710: LD_VAR 0 7
9714: IFFALSE 9754
// begin ComMoveXY ( i , 63 , 75 ) ;
9716: LD_VAR 0 4
9720: PPUSH
9721: LD_INT 63
9723: PPUSH
9724: LD_INT 75
9726: PPUSH
9727: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9731: LD_VAR 0 7
9735: PPUSH
9736: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9740: LD_VAR 0 8
9744: PPUSH
9745: LD_VAR 0 7
9749: PPUSH
9750: CALL_OW 189
// end ; end ; end ;
9754: GO 9483
9756: POP
9757: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9758: LD_ADDR_VAR 0 6
9762: PUSH
9763: LD_VAR 0 2
9767: PPUSH
9768: LD_INT 22
9770: PUSH
9771: LD_VAR 0 1
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PUSH
9780: EMPTY
9781: LIST
9782: PPUSH
9783: CALL_OW 70
9787: ST_TO_ADDR
// if tmp and defenders_list then
9788: LD_VAR 0 6
9792: PUSH
9793: LD_EXP 32
9797: AND
9798: IFFALSE 9967
// for i in defenders_list do
9800: LD_ADDR_VAR 0 4
9804: PUSH
9805: LD_EXP 32
9809: PUSH
9810: FOR_IN
9811: IFFALSE 9965
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9813: LD_VAR 0 4
9817: PPUSH
9818: CALL_OW 257
9822: PUSH
9823: LD_INT 3
9825: EQUAL
9826: PUSH
9827: LD_VAR 0 4
9831: PPUSH
9832: CALL_OW 310
9836: NOT
9837: AND
9838: IFFALSE 9877
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9840: LD_VAR 0 4
9844: PPUSH
9845: LD_EXP 32
9849: PPUSH
9850: LD_INT 58
9852: PUSH
9853: EMPTY
9854: LIST
9855: PPUSH
9856: CALL_OW 72
9860: PPUSH
9861: LD_VAR 0 4
9865: PPUSH
9866: CALL_OW 74
9870: PPUSH
9871: CALL_OW 120
9875: GO 9963
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9877: LD_VAR 0 4
9881: PPUSH
9882: CALL_OW 314
9886: NOT
9887: PUSH
9888: LD_VAR 0 4
9892: PPUSH
9893: LD_VAR 0 2
9897: PPUSH
9898: CALL_OW 308
9902: AND
9903: IFFALSE 9931
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9905: LD_VAR 0 4
9909: PPUSH
9910: LD_VAR 0 6
9914: PPUSH
9915: LD_VAR 0 4
9919: PPUSH
9920: CALL_OW 74
9924: PPUSH
9925: CALL_OW 115
9929: GO 9963
// if not IsInArea ( i , defenseArea ) then
9931: LD_VAR 0 4
9935: PPUSH
9936: LD_VAR 0 2
9940: PPUSH
9941: CALL_OW 308
9945: NOT
9946: IFFALSE 9963
// ComMoveXY ( i , 63 , 75 ) ;
9948: LD_VAR 0 4
9952: PPUSH
9953: LD_INT 63
9955: PPUSH
9956: LD_INT 75
9958: PPUSH
9959: CALL_OW 111
// end ;
9963: GO 9810
9965: POP
9966: POP
// end ;
9967: LD_VAR 0 3
9971: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9972: LD_INT 0
9974: PPUSH
9975: PPUSH
9976: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9977: LD_INT 22
9979: PUSH
9980: LD_VAR 0 1
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 21
9991: PUSH
9992: LD_INT 2
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PPUSH
10003: CALL_OW 69
10007: PUSH
10008: LD_VAR 0 3
10012: LESSEQUAL
10013: IFFALSE 10121
// begin for i = 1 to vehCount do
10015: LD_ADDR_VAR 0 9
10019: PUSH
10020: DOUBLE
10021: LD_INT 1
10023: DEC
10024: ST_TO_ADDR
10025: LD_VAR 0 3
10029: PUSH
10030: FOR_TO
10031: IFFALSE 10119
// begin weapon = weaponTab [ i ] ;
10033: LD_ADDR_VAR 0 10
10037: PUSH
10038: LD_VAR 0 4
10042: PUSH
10043: LD_VAR 0 9
10047: ARRAY
10048: ST_TO_ADDR
// if weapon = 46 then
10049: LD_VAR 0 10
10053: PUSH
10054: LD_INT 46
10056: EQUAL
10057: IFFALSE 10088
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
10059: LD_VAR 0 2
10063: PPUSH
10064: LD_INT 24
10066: PPUSH
10067: LD_VAR 0 5
10071: PPUSH
10072: LD_VAR 0 6
10076: PPUSH
10077: LD_VAR 0 10
10081: PPUSH
10082: CALL_OW 185
// end else
10086: GO 10117
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
10088: LD_VAR 0 2
10092: PPUSH
10093: LD_VAR 0 7
10097: PPUSH
10098: LD_VAR 0 5
10102: PPUSH
10103: LD_VAR 0 6
10107: PPUSH
10108: LD_VAR 0 10
10112: PPUSH
10113: CALL_OW 185
// end ; end ;
10117: GO 10030
10119: POP
10120: POP
// end ; end ;
10121: LD_VAR 0 8
10125: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
10126: LD_INT 0
10128: PPUSH
10129: PPUSH
10130: PPUSH
10131: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
10132: LD_ADDR_VAR 0 8
10136: PUSH
10137: LD_INT 22
10139: PUSH
10140: LD_VAR 0 1
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 21
10151: PUSH
10152: LD_INT 2
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 3
10161: PUSH
10162: LD_INT 24
10164: PUSH
10165: LD_INT 650
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: LIST
10180: PPUSH
10181: CALL_OW 69
10185: ST_TO_ADDR
// if damageVehicles > 0 then
10186: LD_VAR 0 8
10190: PUSH
10191: LD_INT 0
10193: GREATER
10194: IFFALSE 10215
// ComMoveXY ( damageVehicles , repX , repY ) ;
10196: LD_VAR 0 8
10200: PPUSH
10201: LD_VAR 0 3
10205: PPUSH
10206: LD_VAR 0 4
10210: PPUSH
10211: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10215: LD_VAR 0 8
10219: PPUSH
10220: LD_INT 95
10222: PUSH
10223: LD_VAR 0 2
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: LD_INT 3
10234: PUSH
10235: LD_INT 58
10237: PUSH
10238: EMPTY
10239: LIST
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PPUSH
10249: CALL_OW 72
10253: PUSH
10254: LD_INT 0
10256: GREATER
10257: IFFALSE 10324
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
10259: LD_ADDR_VAR 0 6
10263: PUSH
10264: LD_VAR 0 8
10268: PPUSH
10269: LD_INT 95
10271: PUSH
10272: LD_VAR 0 2
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 3
10283: PUSH
10284: LD_INT 58
10286: PUSH
10287: EMPTY
10288: LIST
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 72
10302: PUSH
10303: FOR_IN
10304: IFFALSE 10322
// ComExitVehicle ( UnitsInside ( i ) ) ;
10306: LD_VAR 0 6
10310: PPUSH
10311: CALL_OW 313
10315: PPUSH
10316: CALL_OW 121
10320: GO 10303
10322: POP
10323: POP
// end ;
10324: LD_VAR 0 5
10328: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10329: LD_INT 0
10331: PPUSH
10332: PPUSH
10333: PPUSH
10334: PPUSH
10335: PPUSH
10336: PPUSH
10337: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10338: LD_ADDR_VAR 0 8
10342: PUSH
10343: LD_INT 22
10345: PUSH
10346: LD_VAR 0 1
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 21
10357: PUSH
10358: LD_INT 2
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 24
10367: PUSH
10368: LD_INT 250
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 58
10380: PUSH
10381: EMPTY
10382: LIST
10383: PUSH
10384: LD_INT 2
10386: PUSH
10387: LD_INT 34
10389: PUSH
10390: LD_INT 43
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 34
10399: PUSH
10400: LD_INT 44
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 34
10409: PUSH
10410: LD_INT 46
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: LIST
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 69
10438: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 , 7 ] [ Difficulty ] then
10439: LD_INT 22
10441: PUSH
10442: LD_VAR 0 1
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 21
10453: PUSH
10454: LD_INT 2
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 24
10463: PUSH
10464: LD_INT 1000
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PUSH
10471: LD_INT 3
10473: PUSH
10474: LD_INT 58
10476: PUSH
10477: EMPTY
10478: LIST
10479: PUSH
10480: LD_INT 2
10482: PUSH
10483: LD_INT 34
10485: PUSH
10486: LD_INT 43
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 34
10495: PUSH
10496: LD_INT 44
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 34
10505: PUSH
10506: LD_INT 46
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: PPUSH
10530: CALL_OW 69
10534: PUSH
10535: LD_INT 5
10537: PUSH
10538: LD_INT 6
10540: PUSH
10541: LD_INT 7
10543: PUSH
10544: LD_INT 7
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_OWVAR 67
10557: ARRAY
10558: GREATEREQUAL
10559: IFFALSE 11124
// repeat wait ( 0 0$1 ) ;
10561: LD_INT 35
10563: PPUSH
10564: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10568: LD_ADDR_VAR 0 8
10572: PUSH
10573: LD_INT 22
10575: PUSH
10576: LD_VAR 0 1
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 21
10587: PUSH
10588: LD_INT 2
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 24
10597: PUSH
10598: LD_INT 250
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 2
10607: PUSH
10608: LD_INT 34
10610: PUSH
10611: LD_INT 43
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PUSH
10618: LD_INT 34
10620: PUSH
10621: LD_INT 44
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 34
10630: PUSH
10631: LD_INT 46
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 3
10646: PUSH
10647: LD_INT 58
10649: PUSH
10650: EMPTY
10651: LIST
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: PPUSH
10664: CALL_OW 69
10668: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10669: LD_INT 22
10671: PUSH
10672: LD_VAR 0 1
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 95
10683: PUSH
10684: LD_VAR 0 2
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PPUSH
10697: CALL_OW 69
10701: NOT
10702: PUSH
10703: LD_VAR 0 11
10707: PUSH
10708: LD_INT 0
10710: EQUAL
10711: AND
10712: IFFALSE 10767
// for i := 1 to wayX do
10714: LD_ADDR_VAR 0 6
10718: PUSH
10719: DOUBLE
10720: LD_INT 1
10722: DEC
10723: ST_TO_ADDR
10724: LD_VAR 0 3
10728: PUSH
10729: FOR_TO
10730: IFFALSE 10765
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10732: LD_VAR 0 8
10736: PPUSH
10737: LD_VAR 0 3
10741: PUSH
10742: LD_VAR 0 6
10746: ARRAY
10747: PPUSH
10748: LD_VAR 0 4
10752: PUSH
10753: LD_VAR 0 6
10757: ARRAY
10758: PPUSH
10759: CALL_OW 114
10763: GO 10729
10765: POP
10766: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10767: LD_INT 22
10769: PUSH
10770: LD_VAR 0 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 95
10781: PUSH
10782: LD_VAR 0 2
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PPUSH
10795: CALL_OW 69
10799: IFFALSE 11023
// begin seeEnemy = 1 ;
10801: LD_ADDR_VAR 0 11
10805: PUSH
10806: LD_INT 1
10808: ST_TO_ADDR
// for j in vehiclesOK do
10809: LD_ADDR_VAR 0 7
10813: PUSH
10814: LD_VAR 0 8
10818: PUSH
10819: FOR_IN
10820: IFFALSE 11021
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10822: LD_ADDR_VAR 0 9
10826: PUSH
10827: LD_INT 81
10829: PUSH
10830: LD_VAR 0 1
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: LD_INT 101
10841: PUSH
10842: LD_INT 1
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PPUSH
10853: CALL_OW 69
10857: PPUSH
10858: LD_VAR 0 7
10862: PPUSH
10863: CALL_OW 74
10867: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10868: LD_ADDR_VAR 0 10
10872: PUSH
10873: LD_INT 81
10875: PUSH
10876: LD_VAR 0 1
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: PUSH
10885: LD_INT 101
10887: PUSH
10888: LD_INT 1
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PUSH
10895: LD_INT 2
10897: PUSH
10898: LD_INT 59
10900: PUSH
10901: EMPTY
10902: LIST
10903: PUSH
10904: LD_INT 21
10906: PUSH
10907: LD_INT 1
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: PUSH
10914: LD_INT 21
10916: PUSH
10917: LD_INT 2
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: EMPTY
10936: LIST
10937: PPUSH
10938: CALL_OW 69
10942: PPUSH
10943: LD_VAR 0 7
10947: PPUSH
10948: CALL_OW 74
10952: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10953: LD_VAR 0 7
10957: PPUSH
10958: LD_VAR 0 9
10962: PPUSH
10963: CALL_OW 296
10967: PUSH
10968: LD_INT 8
10970: PLUS
10971: PUSH
10972: LD_VAR 0 7
10976: PPUSH
10977: LD_VAR 0 10
10981: PPUSH
10982: CALL_OW 296
10986: LESS
10987: IFFALSE 11005
// ComAttackUnit ( j , target1 ) else
10989: LD_VAR 0 7
10993: PPUSH
10994: LD_VAR 0 9
10998: PPUSH
10999: CALL_OW 115
11003: GO 11019
// ComAttackUnit ( j , target2 ) ;
11005: LD_VAR 0 7
11009: PPUSH
11010: LD_VAR 0 10
11014: PPUSH
11015: CALL_OW 115
// end ;
11019: GO 10819
11021: POP
11022: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11023: LD_INT 22
11025: PUSH
11026: LD_VAR 0 1
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PUSH
11035: LD_INT 21
11037: PUSH
11038: LD_INT 2
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: LD_INT 24
11047: PUSH
11048: LD_INT 250
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: LD_INT 2
11057: PUSH
11058: LD_INT 34
11060: PUSH
11061: LD_INT 43
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 34
11070: PUSH
11071: LD_INT 44
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 34
11080: PUSH
11081: LD_INT 46
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 3
11096: PUSH
11097: LD_INT 58
11099: PUSH
11100: EMPTY
11101: LIST
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: PPUSH
11114: CALL_OW 69
11118: PUSH
11119: LD_INT 0
11121: EQUAL
11122: IFFALSE 10561
// seeEnemy = 0 ;
11124: LD_ADDR_VAR 0 11
11128: PUSH
11129: LD_INT 0
11131: ST_TO_ADDR
// end ;
11132: LD_VAR 0 5
11136: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
11137: LD_INT 0
11139: PPUSH
11140: PPUSH
11141: PPUSH
11142: PPUSH
11143: PPUSH
11144: PPUSH
// repeat wait ( 0 0$1 ) ;
11145: LD_INT 35
11147: PPUSH
11148: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
11152: LD_ADDR_VAR 0 7
11156: PUSH
11157: LD_INT 22
11159: PUSH
11160: LD_VAR 0 1
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 21
11171: PUSH
11172: LD_INT 2
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 24
11181: PUSH
11182: LD_INT 651
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: PPUSH
11194: CALL_OW 69
11198: ST_TO_ADDR
// for j in vehiclesOK do
11199: LD_ADDR_VAR 0 4
11203: PUSH
11204: LD_VAR 0 7
11208: PUSH
11209: FOR_IN
11210: IFFALSE 11411
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
11212: LD_ADDR_VAR 0 5
11216: PUSH
11217: LD_INT 81
11219: PUSH
11220: LD_VAR 0 1
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: LD_INT 101
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PPUSH
11243: CALL_OW 69
11247: PPUSH
11248: LD_VAR 0 4
11252: PPUSH
11253: CALL_OW 74
11257: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
11258: LD_ADDR_VAR 0 6
11262: PUSH
11263: LD_INT 81
11265: PUSH
11266: LD_VAR 0 1
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 101
11277: PUSH
11278: LD_INT 1
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 2
11287: PUSH
11288: LD_INT 59
11290: PUSH
11291: EMPTY
11292: LIST
11293: PUSH
11294: LD_INT 21
11296: PUSH
11297: LD_INT 1
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 21
11306: PUSH
11307: LD_INT 2
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: LIST
11324: PUSH
11325: EMPTY
11326: LIST
11327: PPUSH
11328: CALL_OW 69
11332: PPUSH
11333: LD_VAR 0 4
11337: PPUSH
11338: CALL_OW 74
11342: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11343: LD_VAR 0 4
11347: PPUSH
11348: LD_VAR 0 5
11352: PPUSH
11353: CALL_OW 296
11357: PUSH
11358: LD_INT 8
11360: PLUS
11361: PUSH
11362: LD_VAR 0 4
11366: PPUSH
11367: LD_VAR 0 6
11371: PPUSH
11372: CALL_OW 296
11376: LESS
11377: IFFALSE 11395
// ComAttackUnit ( j , target1 ) else
11379: LD_VAR 0 4
11383: PPUSH
11384: LD_VAR 0 5
11388: PPUSH
11389: CALL_OW 115
11393: GO 11409
// ComAttackUnit ( j , target2 ) ;
11395: LD_VAR 0 4
11399: PPUSH
11400: LD_VAR 0 6
11404: PPUSH
11405: CALL_OW 115
// end ;
11409: GO 11209
11411: POP
11412: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11413: LD_INT 22
11415: PUSH
11416: LD_VAR 0 1
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 21
11427: PUSH
11428: LD_INT 2
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 24
11437: PUSH
11438: LD_INT 250
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: LIST
11449: PPUSH
11450: CALL_OW 69
11454: PUSH
11455: LD_INT 0
11457: EQUAL
11458: IFFALSE 11145
// end ;
11460: LD_VAR 0 2
11464: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11465: LD_INT 0
11467: PPUSH
11468: PPUSH
11469: PPUSH
11470: PPUSH
11471: PPUSH
11472: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11473: LD_ADDR_VAR 0 8
11477: PUSH
11478: LD_VAR 0 2
11482: PPUSH
11483: CALL_OW 313
11487: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11488: LD_ADDR_VAR 0 9
11492: PUSH
11493: LD_VAR 0 3
11497: PPUSH
11498: LD_INT 22
11500: PUSH
11501: LD_VAR 0 1
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 25
11512: PUSH
11513: LD_INT 2
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 24
11522: PUSH
11523: LD_INT 750
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PUSH
11530: LD_INT 3
11532: PUSH
11533: LD_INT 54
11535: PUSH
11536: EMPTY
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: PPUSH
11549: CALL_OW 70
11553: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11554: LD_ADDR_VAR 0 6
11558: PUSH
11559: LD_VAR 0 3
11563: PPUSH
11564: LD_INT 22
11566: PUSH
11567: LD_VAR 0 1
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: LD_INT 21
11578: PUSH
11579: LD_INT 3
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 3
11588: PUSH
11589: LD_INT 24
11591: PUSH
11592: LD_INT 1000
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: LIST
11607: PUSH
11608: EMPTY
11609: LIST
11610: PPUSH
11611: CALL_OW 70
11615: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11616: LD_VAR 0 6
11620: NOT
11621: PUSH
11622: LD_INT 22
11624: PUSH
11625: LD_VAR 0 1
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: PUSH
11634: LD_INT 25
11636: PUSH
11637: LD_INT 2
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 24
11646: PUSH
11647: LD_INT 250
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: LIST
11658: PPUSH
11659: CALL_OW 69
11663: NOT
11664: AND
11665: IFFALSE 11669
// exit ;
11667: GO 11866
// if buildings_list > 0 and engineerOkInside then
11669: LD_VAR 0 6
11673: PUSH
11674: LD_INT 0
11676: GREATER
11677: PUSH
11678: LD_VAR 0 8
11682: AND
11683: IFFALSE 11709
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11685: LD_VAR 0 8
11689: PPUSH
11690: LD_INT 25
11692: PUSH
11693: LD_INT 2
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PPUSH
11700: CALL_OW 72
11704: PPUSH
11705: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11709: LD_VAR 0 6
11713: PUSH
11714: LD_INT 0
11716: GREATER
11717: PUSH
11718: LD_VAR 0 9
11722: PUSH
11723: LD_INT 0
11725: GREATER
11726: AND
11727: IFFALSE 11747
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11729: LD_VAR 0 9
11733: PPUSH
11734: LD_VAR 0 6
11738: PUSH
11739: LD_INT 1
11741: ARRAY
11742: PPUSH
11743: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11747: LD_VAR 0 6
11751: PUSH
11752: LD_INT 0
11754: EQUAL
11755: PUSH
11756: LD_VAR 0 4
11760: PUSH
11761: LD_INT 0
11763: EQUAL
11764: AND
11765: PUSH
11766: LD_VAR 0 9
11770: PUSH
11771: LD_INT 0
11773: GREATER
11774: AND
11775: IFFALSE 11791
// ComEnterUnit ( engineerOkOutside , building ) ;
11777: LD_VAR 0 9
11781: PPUSH
11782: LD_VAR 0 2
11786: PPUSH
11787: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11791: LD_VAR 0 9
11795: PUSH
11796: LD_INT 0
11798: GREATER
11799: PUSH
11800: LD_VAR 0 6
11804: PUSH
11805: LD_INT 0
11807: EQUAL
11808: AND
11809: PUSH
11810: LD_VAR 0 4
11814: PUSH
11815: LD_INT 0
11817: GREATER
11818: AND
11819: IFFALSE 11866
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11821: LD_VAR 0 9
11825: PPUSH
11826: LD_VAR 0 4
11830: PUSH
11831: LD_INT 1
11833: ARRAY
11834: PPUSH
11835: LD_VAR 0 4
11839: PUSH
11840: LD_INT 2
11842: ARRAY
11843: PPUSH
11844: LD_VAR 0 4
11848: PUSH
11849: LD_INT 3
11851: ARRAY
11852: PPUSH
11853: LD_VAR 0 4
11857: PUSH
11858: LD_INT 4
11860: ARRAY
11861: PPUSH
11862: CALL_OW 145
// end ;
11866: LD_VAR 0 5
11870: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11871: LD_INT 0
11873: PPUSH
11874: PPUSH
11875: PPUSH
11876: PPUSH
11877: PPUSH
11878: PPUSH
11879: PPUSH
11880: PPUSH
11881: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11882: LD_ADDR_VAR 0 6
11886: PUSH
11887: LD_INT 22
11889: PUSH
11890: LD_VAR 0 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 25
11901: PUSH
11902: LD_INT 4
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 23
11911: PUSH
11912: LD_INT 2
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 24
11921: PUSH
11922: LD_INT 251
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11940: LD_ADDR_VAR 0 7
11944: PUSH
11945: LD_VAR 0 3
11949: PPUSH
11950: LD_INT 22
11952: PUSH
11953: LD_VAR 0 1
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 23
11964: PUSH
11965: LD_INT 2
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: LD_INT 25
11974: PUSH
11975: LD_INT 4
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 50
11984: PUSH
11985: EMPTY
11986: LIST
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: PPUSH
11994: CALL_OW 70
11998: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11999: LD_ADDR_VAR 0 10
12003: PUSH
12004: LD_VAR 0 3
12008: PPUSH
12009: LD_INT 22
12011: PUSH
12012: LD_VAR 0 1
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 21
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 3
12033: PUSH
12034: LD_INT 25
12036: PUSH
12037: LD_INT 3
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 3
12050: PUSH
12051: LD_INT 24
12053: PUSH
12054: LD_INT 750
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 70
12075: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12076: LD_ADDR_VAR 0 11
12080: PUSH
12081: LD_VAR 0 2
12085: PPUSH
12086: LD_INT 22
12088: PUSH
12089: LD_VAR 0 1
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: LD_INT 21
12100: PUSH
12101: LD_INT 1
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: PUSH
12108: LD_INT 3
12110: PUSH
12111: LD_INT 25
12113: PUSH
12114: LD_INT 3
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 3
12127: PUSH
12128: LD_INT 24
12130: PUSH
12131: LD_INT 1000
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: PPUSH
12148: CALL_OW 70
12152: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
12153: LD_VAR 0 10
12157: NOT
12158: PUSH
12159: LD_VAR 0 11
12163: NOT
12164: AND
12165: PUSH
12166: LD_VAR 0 6
12170: NOT
12171: AND
12172: IFFALSE 12176
// exit ;
12174: GO 12410
// if damageUnits > 0 and sci_list > 0 then
12176: LD_VAR 0 10
12180: PUSH
12181: LD_INT 0
12183: GREATER
12184: PUSH
12185: LD_VAR 0 6
12189: PUSH
12190: LD_INT 0
12192: GREATER
12193: AND
12194: IFFALSE 12210
// ComMoveToArea ( damageUnits , healArea ) ;
12196: LD_VAR 0 10
12200: PPUSH
12201: LD_VAR 0 2
12205: PPUSH
12206: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
12210: LD_VAR 0 11
12214: PUSH
12215: LD_INT 0
12217: GREATER
12218: PUSH
12219: LD_VAR 0 6
12223: PUSH
12224: LD_INT 0
12226: GREATER
12227: AND
12228: IFFALSE 12239
// ComExitBuilding ( sci_list ) ;
12230: LD_VAR 0 6
12234: PPUSH
12235: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
12239: LD_VAR 0 11
12243: PUSH
12244: LD_INT 0
12246: GREATER
12247: PUSH
12248: LD_VAR 0 7
12252: PUSH
12253: LD_INT 0
12255: GREATER
12256: AND
12257: IFFALSE 12277
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
12259: LD_VAR 0 7
12263: PPUSH
12264: LD_VAR 0 11
12268: PUSH
12269: LD_INT 1
12271: ARRAY
12272: PPUSH
12273: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12277: LD_VAR 0 10
12281: PUSH
12282: LD_INT 0
12284: EQUAL
12285: PUSH
12286: LD_VAR 0 11
12290: PUSH
12291: LD_INT 0
12293: EQUAL
12294: AND
12295: PUSH
12296: LD_VAR 0 7
12300: PUSH
12301: LD_INT 0
12303: GREATER
12304: AND
12305: IFFALSE 12410
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12307: LD_ADDR_VAR 0 12
12311: PUSH
12312: LD_INT 22
12314: PUSH
12315: LD_VAR 0 1
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 21
12326: PUSH
12327: LD_INT 3
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 30
12336: PUSH
12337: LD_INT 8
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: PPUSH
12349: CALL_OW 69
12353: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12354: LD_ADDR_VAR 0 13
12358: PUSH
12359: LD_INT 1
12361: PPUSH
12362: LD_VAR 0 12
12366: PPUSH
12367: CALL_OW 12
12371: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12372: LD_VAR 0 7
12376: PPUSH
12377: LD_INT 3
12379: PUSH
12380: LD_INT 60
12382: PUSH
12383: EMPTY
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PPUSH
12390: CALL_OW 72
12394: PPUSH
12395: LD_VAR 0 12
12399: PUSH
12400: LD_VAR 0 13
12404: ARRAY
12405: PPUSH
12406: CALL_OW 120
// end ; end ;
12410: LD_VAR 0 5
12414: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12415: LD_INT 0
12417: PPUSH
12418: PPUSH
12419: PPUSH
12420: PPUSH
12421: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12422: LD_ADDR_VAR 0 6
12426: PUSH
12427: LD_INT 22
12429: PUSH
12430: LD_VAR 0 1
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 2
12441: PUSH
12442: LD_INT 30
12444: PUSH
12445: LD_INT 31
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: LD_INT 30
12454: PUSH
12455: LD_INT 32
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 30
12464: PUSH
12465: LD_INT 33
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 30
12474: PUSH
12475: LD_INT 4
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 30
12484: PUSH
12485: LD_INT 5
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PPUSH
12504: CALL_OW 69
12508: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12509: LD_ADDR_VAR 0 7
12513: PUSH
12514: LD_INT 22
12516: PUSH
12517: LD_VAR 0 2
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 21
12528: PUSH
12529: LD_INT 3
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 58
12538: PUSH
12539: EMPTY
12540: LIST
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: PPUSH
12547: CALL_OW 69
12551: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12552: LD_VAR 0 6
12556: PUSH
12557: LD_INT 0
12559: GREATER
12560: PUSH
12561: LD_VAR 0 7
12565: PUSH
12566: LD_INT 0
12568: GREATER
12569: AND
12570: IFFALSE 12640
// begin for i in turretsList do
12572: LD_ADDR_VAR 0 4
12576: PUSH
12577: LD_VAR 0 6
12581: PUSH
12582: FOR_IN
12583: IFFALSE 12638
// begin for j in enemyBuildings do
12585: LD_ADDR_VAR 0 5
12589: PUSH
12590: LD_VAR 0 7
12594: PUSH
12595: FOR_IN
12596: IFFALSE 12634
// begin if GetDistUnits ( i , j ) < 20 then
12598: LD_VAR 0 4
12602: PPUSH
12603: LD_VAR 0 5
12607: PPUSH
12608: CALL_OW 296
12612: PUSH
12613: LD_INT 20
12615: LESS
12616: IFFALSE 12632
// begin ComAttackUnit ( i , j ) ;
12618: LD_VAR 0 4
12622: PPUSH
12623: LD_VAR 0 5
12627: PPUSH
12628: CALL_OW 115
// end ; end ;
12632: GO 12595
12634: POP
12635: POP
// end ;
12636: GO 12582
12638: POP
12639: POP
// end ; end ;
12640: LD_VAR 0 3
12644: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12645: LD_INT 0
12647: PPUSH
12648: PPUSH
12649: PPUSH
12650: PPUSH
12651: PPUSH
12652: PPUSH
12653: PPUSH
12654: PPUSH
12655: PPUSH
12656: PPUSH
12657: PPUSH
// for i = 1 to medicCount do
12658: LD_ADDR_VAR 0 14
12662: PUSH
12663: DOUBLE
12664: LD_INT 1
12666: DEC
12667: ST_TO_ADDR
12668: LD_VAR 0 7
12672: PUSH
12673: FOR_TO
12674: IFFALSE 12756
// begin uc_side = side ;
12676: LD_ADDR_OWVAR 20
12680: PUSH
12681: LD_VAR 0 1
12685: ST_TO_ADDR
// uc_nation = nation ;
12686: LD_ADDR_OWVAR 21
12690: PUSH
12691: LD_VAR 0 2
12695: ST_TO_ADDR
// hc_name =  ;
12696: LD_ADDR_OWVAR 26
12700: PUSH
12701: LD_STRING 
12703: ST_TO_ADDR
// hc_gallery =  ;
12704: LD_ADDR_OWVAR 33
12708: PUSH
12709: LD_STRING 
12711: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12712: LD_INT 0
12714: PPUSH
12715: LD_INT 4
12717: PPUSH
12718: LD_VAR 0 8
12722: PPUSH
12723: CALL_OW 380
// un = CreateHuman ;
12727: LD_ADDR_VAR 0 16
12731: PUSH
12732: CALL_OW 44
12736: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12737: LD_VAR 0 16
12741: PPUSH
12742: LD_VAR 0 9
12746: PPUSH
12747: LD_INT 0
12749: PPUSH
12750: CALL_OW 49
// end ;
12754: GO 12673
12756: POP
12757: POP
// for i = 1 to soldierCount do
12758: LD_ADDR_VAR 0 14
12762: PUSH
12763: DOUBLE
12764: LD_INT 1
12766: DEC
12767: ST_TO_ADDR
12768: LD_VAR 0 3
12772: PUSH
12773: FOR_TO
12774: IFFALSE 12856
// begin uc_side = side ;
12776: LD_ADDR_OWVAR 20
12780: PUSH
12781: LD_VAR 0 1
12785: ST_TO_ADDR
// uc_nation = nation ;
12786: LD_ADDR_OWVAR 21
12790: PUSH
12791: LD_VAR 0 2
12795: ST_TO_ADDR
// hc_name =  ;
12796: LD_ADDR_OWVAR 26
12800: PUSH
12801: LD_STRING 
12803: ST_TO_ADDR
// hc_gallery =  ;
12804: LD_ADDR_OWVAR 33
12808: PUSH
12809: LD_STRING 
12811: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12812: LD_INT 0
12814: PPUSH
12815: LD_INT 1
12817: PPUSH
12818: LD_VAR 0 8
12822: PPUSH
12823: CALL_OW 380
// un = CreateHuman ;
12827: LD_ADDR_VAR 0 16
12831: PUSH
12832: CALL_OW 44
12836: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12837: LD_VAR 0 16
12841: PPUSH
12842: LD_VAR 0 9
12846: PPUSH
12847: LD_INT 0
12849: PPUSH
12850: CALL_OW 49
// end ;
12854: GO 12773
12856: POP
12857: POP
// for i = 1 to sniperCount do
12858: LD_ADDR_VAR 0 14
12862: PUSH
12863: DOUBLE
12864: LD_INT 1
12866: DEC
12867: ST_TO_ADDR
12868: LD_VAR 0 4
12872: PUSH
12873: FOR_TO
12874: IFFALSE 12956
// begin uc_side = side ;
12876: LD_ADDR_OWVAR 20
12880: PUSH
12881: LD_VAR 0 1
12885: ST_TO_ADDR
// uc_nation = nation ;
12886: LD_ADDR_OWVAR 21
12890: PUSH
12891: LD_VAR 0 2
12895: ST_TO_ADDR
// hc_name =  ;
12896: LD_ADDR_OWVAR 26
12900: PUSH
12901: LD_STRING 
12903: ST_TO_ADDR
// hc_gallery =  ;
12904: LD_ADDR_OWVAR 33
12908: PUSH
12909: LD_STRING 
12911: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12912: LD_INT 0
12914: PPUSH
12915: LD_INT 5
12917: PPUSH
12918: LD_VAR 0 8
12922: PPUSH
12923: CALL_OW 380
// un = CreateHuman ;
12927: LD_ADDR_VAR 0 16
12931: PUSH
12932: CALL_OW 44
12936: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12937: LD_VAR 0 16
12941: PPUSH
12942: LD_VAR 0 9
12946: PPUSH
12947: LD_INT 0
12949: PPUSH
12950: CALL_OW 49
// end ;
12954: GO 12873
12956: POP
12957: POP
// for i = 1 to bazookCount do
12958: LD_ADDR_VAR 0 14
12962: PUSH
12963: DOUBLE
12964: LD_INT 1
12966: DEC
12967: ST_TO_ADDR
12968: LD_VAR 0 5
12972: PUSH
12973: FOR_TO
12974: IFFALSE 13056
// begin uc_side = side ;
12976: LD_ADDR_OWVAR 20
12980: PUSH
12981: LD_VAR 0 1
12985: ST_TO_ADDR
// uc_nation = nation ;
12986: LD_ADDR_OWVAR 21
12990: PUSH
12991: LD_VAR 0 2
12995: ST_TO_ADDR
// hc_name =  ;
12996: LD_ADDR_OWVAR 26
13000: PUSH
13001: LD_STRING 
13003: ST_TO_ADDR
// hc_gallery =  ;
13004: LD_ADDR_OWVAR 33
13008: PUSH
13009: LD_STRING 
13011: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
13012: LD_INT 0
13014: PPUSH
13015: LD_INT 9
13017: PPUSH
13018: LD_VAR 0 8
13022: PPUSH
13023: CALL_OW 380
// un = CreateHuman ;
13027: LD_ADDR_VAR 0 16
13031: PUSH
13032: CALL_OW 44
13036: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13037: LD_VAR 0 16
13041: PPUSH
13042: LD_VAR 0 9
13046: PPUSH
13047: LD_INT 0
13049: PPUSH
13050: CALL_OW 49
// end ;
13054: GO 12973
13056: POP
13057: POP
// for i = 1 to mortalCount do
13058: LD_ADDR_VAR 0 14
13062: PUSH
13063: DOUBLE
13064: LD_INT 1
13066: DEC
13067: ST_TO_ADDR
13068: LD_VAR 0 6
13072: PUSH
13073: FOR_TO
13074: IFFALSE 13156
// begin uc_side = side ;
13076: LD_ADDR_OWVAR 20
13080: PUSH
13081: LD_VAR 0 1
13085: ST_TO_ADDR
// uc_nation = nation ;
13086: LD_ADDR_OWVAR 21
13090: PUSH
13091: LD_VAR 0 2
13095: ST_TO_ADDR
// hc_name =  ;
13096: LD_ADDR_OWVAR 26
13100: PUSH
13101: LD_STRING 
13103: ST_TO_ADDR
// hc_gallery =  ;
13104: LD_ADDR_OWVAR 33
13108: PUSH
13109: LD_STRING 
13111: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
13112: LD_INT 0
13114: PPUSH
13115: LD_INT 8
13117: PPUSH
13118: LD_VAR 0 8
13122: PPUSH
13123: CALL_OW 380
// un = CreateHuman ;
13127: LD_ADDR_VAR 0 16
13131: PUSH
13132: CALL_OW 44
13136: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13137: LD_VAR 0 16
13141: PPUSH
13142: LD_VAR 0 9
13146: PPUSH
13147: LD_INT 0
13149: PPUSH
13150: CALL_OW 49
// end ;
13154: GO 13073
13156: POP
13157: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
13158: LD_ADDR_VAR 0 19
13162: PUSH
13163: LD_INT 22
13165: PUSH
13166: LD_VAR 0 1
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 2
13177: PUSH
13178: LD_INT 25
13180: PUSH
13181: LD_INT 1
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 25
13190: PUSH
13191: LD_INT 5
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 25
13200: PUSH
13201: LD_INT 8
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 25
13210: PUSH
13211: LD_INT 9
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PPUSH
13229: CALL_OW 69
13233: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
13234: LD_ADDR_VAR 0 18
13238: PUSH
13239: LD_INT 22
13241: PUSH
13242: LD_VAR 0 1
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 25
13253: PUSH
13254: LD_INT 4
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PPUSH
13265: CALL_OW 69
13269: ST_TO_ADDR
// for i in medic_list do
13270: LD_ADDR_VAR 0 14
13274: PUSH
13275: LD_VAR 0 18
13279: PUSH
13280: FOR_IN
13281: IFFALSE 13299
// ComMoveToArea ( i , healArea ) ;
13283: LD_VAR 0 14
13287: PPUSH
13288: LD_VAR 0 10
13292: PPUSH
13293: CALL_OW 113
13297: GO 13280
13299: POP
13300: POP
// if strategy = 1 then
13301: LD_VAR 0 12
13305: PUSH
13306: LD_INT 1
13308: EQUAL
13309: IFFALSE 13855
// begin repeat wait ( 0 0$3 ) ;
13311: LD_INT 105
13313: PPUSH
13314: CALL_OW 67
// for i in soldiersOK_list do
13318: LD_ADDR_VAR 0 14
13322: PUSH
13323: LD_VAR 0 19
13327: PUSH
13328: FOR_IN
13329: IFFALSE 13393
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13331: LD_VAR 0 14
13335: PPUSH
13336: LD_INT 91
13338: PPUSH
13339: LD_INT 63
13341: PPUSH
13342: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13346: LD_VAR 0 14
13350: PPUSH
13351: LD_INT 101
13353: PPUSH
13354: LD_INT 53
13356: PPUSH
13357: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13361: LD_VAR 0 14
13365: PPUSH
13366: LD_INT 75
13368: PPUSH
13369: LD_INT 23
13371: PPUSH
13372: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13376: LD_VAR 0 14
13380: PPUSH
13381: LD_INT 78
13383: PPUSH
13384: LD_INT 8
13386: PPUSH
13387: CALL_OW 174
// end ;
13391: GO 13328
13393: POP
13394: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13395: LD_INT 12
13397: PPUSH
13398: LD_INT 22
13400: PUSH
13401: LD_VAR 0 1
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 70
13414: PUSH
13415: LD_INT 2
13417: GREATER
13418: IFFALSE 13311
// repeat wait ( 0 0$1 ) ;
13420: LD_INT 35
13422: PPUSH
13423: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13427: LD_ADDR_VAR 0 17
13431: PUSH
13432: LD_INT 22
13434: PUSH
13435: LD_VAR 0 1
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 1
13446: PUSH
13447: LD_INT 3
13449: PUSH
13450: LD_INT 24
13452: PUSH
13453: LD_INT 550
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 24
13466: PUSH
13467: LD_INT 250
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PPUSH
13483: CALL_OW 69
13487: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13488: LD_ADDR_VAR 0 19
13492: PUSH
13493: LD_INT 22
13495: PUSH
13496: LD_VAR 0 1
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 2
13507: PUSH
13508: LD_INT 25
13510: PUSH
13511: LD_INT 1
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 25
13520: PUSH
13521: LD_INT 5
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 25
13530: PUSH
13531: LD_INT 8
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 25
13540: PUSH
13541: LD_INT 9
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: PUSH
13555: LD_INT 24
13557: PUSH
13558: LD_INT 1000
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: LIST
13569: PPUSH
13570: CALL_OW 69
13574: ST_TO_ADDR
// if medicCount > 0 then
13575: LD_VAR 0 7
13579: PUSH
13580: LD_INT 0
13582: GREATER
13583: IFFALSE 13657
// begin if damageUnit_list > 0 then
13585: LD_VAR 0 17
13589: PUSH
13590: LD_INT 0
13592: GREATER
13593: IFFALSE 13657
// begin for i in damageUnit_list do
13595: LD_ADDR_VAR 0 14
13599: PUSH
13600: LD_VAR 0 17
13604: PUSH
13605: FOR_IN
13606: IFFALSE 13655
// begin ComMoveToArea ( i , healArea ) ;
13608: LD_VAR 0 14
13612: PPUSH
13613: LD_VAR 0 10
13617: PPUSH
13618: CALL_OW 113
// for j in medic_list do
13622: LD_ADDR_VAR 0 15
13626: PUSH
13627: LD_VAR 0 18
13631: PUSH
13632: FOR_IN
13633: IFFALSE 13651
// AddComHeal ( j , i ) ;
13635: LD_VAR 0 15
13639: PPUSH
13640: LD_VAR 0 14
13644: PPUSH
13645: CALL_OW 188
13649: GO 13632
13651: POP
13652: POP
// end ;
13653: GO 13605
13655: POP
13656: POP
// end ; end ; for i in soldiersOK_list do
13657: LD_ADDR_VAR 0 14
13661: PUSH
13662: LD_VAR 0 19
13666: PUSH
13667: FOR_IN
13668: IFFALSE 13844
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13670: LD_ADDR_VAR 0 22
13674: PUSH
13675: LD_INT 22
13677: PUSH
13678: LD_VAR 0 11
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 69
13691: PPUSH
13692: LD_VAR 0 14
13696: PPUSH
13697: CALL_OW 74
13701: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13702: LD_ADDR_VAR 0 23
13706: PUSH
13707: LD_INT 22
13709: PUSH
13710: LD_VAR 0 11
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: LD_INT 2
13721: PUSH
13722: LD_INT 59
13724: PUSH
13725: EMPTY
13726: LIST
13727: PUSH
13728: LD_INT 21
13730: PUSH
13731: LD_INT 1
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 21
13740: PUSH
13741: LD_INT 2
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PUSH
13758: EMPTY
13759: LIST
13760: PPUSH
13761: CALL_OW 69
13765: PPUSH
13766: LD_VAR 0 14
13770: PPUSH
13771: CALL_OW 74
13775: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13776: LD_VAR 0 14
13780: PPUSH
13781: LD_VAR 0 22
13785: PPUSH
13786: CALL_OW 296
13790: PUSH
13791: LD_INT 6
13793: PLUS
13794: PUSH
13795: LD_VAR 0 14
13799: PPUSH
13800: LD_VAR 0 23
13804: PPUSH
13805: CALL_OW 296
13809: LESS
13810: IFFALSE 13828
// begin ComAttackUnit ( i , target1 ) ;
13812: LD_VAR 0 14
13816: PPUSH
13817: LD_VAR 0 22
13821: PPUSH
13822: CALL_OW 115
// end else
13826: GO 13842
// begin ComAttackUnit ( i , target2 ) ;
13828: LD_VAR 0 14
13832: PPUSH
13833: LD_VAR 0 23
13837: PPUSH
13838: CALL_OW 115
// end ; end ;
13842: GO 13667
13844: POP
13845: POP
// until soldiersOK_list = [ ] ;
13846: LD_VAR 0 19
13850: PUSH
13851: EMPTY
13852: EQUAL
13853: IFFALSE 13420
// end ; if strategy = 2 then
13855: LD_VAR 0 12
13859: PUSH
13860: LD_INT 2
13862: EQUAL
13863: IFFALSE 14379
// begin repeat wait ( 0 0$1 ) ;
13865: LD_INT 35
13867: PPUSH
13868: CALL_OW 67
// for i in soldiersOK_list do
13872: LD_ADDR_VAR 0 14
13876: PUSH
13877: LD_VAR 0 19
13881: PUSH
13882: FOR_IN
13883: IFFALSE 13917
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13885: LD_VAR 0 14
13889: PPUSH
13890: LD_INT 91
13892: PPUSH
13893: LD_INT 63
13895: PPUSH
13896: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13900: LD_VAR 0 14
13904: PPUSH
13905: LD_INT 75
13907: PPUSH
13908: LD_INT 33
13910: PPUSH
13911: CALL_OW 174
// end ;
13915: GO 13882
13917: POP
13918: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13919: LD_INT 13
13921: PPUSH
13922: LD_INT 22
13924: PUSH
13925: LD_VAR 0 1
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PPUSH
13934: CALL_OW 70
13938: PUSH
13939: LD_INT 2
13941: GREATER
13942: IFFALSE 13865
// repeat wait ( 0 0$3 ) ;
13944: LD_INT 105
13946: PPUSH
13947: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13951: LD_ADDR_VAR 0 17
13955: PUSH
13956: LD_INT 22
13958: PUSH
13959: LD_VAR 0 1
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 1
13970: PUSH
13971: LD_INT 3
13973: PUSH
13974: LD_INT 24
13976: PUSH
13977: LD_INT 550
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 24
13990: PUSH
13991: LD_INT 250
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: LIST
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PPUSH
14007: CALL_OW 69
14011: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14012: LD_ADDR_VAR 0 19
14016: PUSH
14017: LD_INT 22
14019: PUSH
14020: LD_VAR 0 1
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 2
14031: PUSH
14032: LD_INT 25
14034: PUSH
14035: LD_INT 1
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 25
14044: PUSH
14045: LD_INT 5
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 25
14054: PUSH
14055: LD_INT 8
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: LD_INT 25
14064: PUSH
14065: LD_INT 9
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: PUSH
14079: LD_INT 24
14081: PUSH
14082: LD_INT 1000
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: PPUSH
14094: CALL_OW 69
14098: ST_TO_ADDR
// if medicCount > 0 then
14099: LD_VAR 0 7
14103: PUSH
14104: LD_INT 0
14106: GREATER
14107: IFFALSE 14181
// begin if damageUnit_list > 0 then
14109: LD_VAR 0 17
14113: PUSH
14114: LD_INT 0
14116: GREATER
14117: IFFALSE 14181
// begin for i in damageUnit_list do
14119: LD_ADDR_VAR 0 14
14123: PUSH
14124: LD_VAR 0 17
14128: PUSH
14129: FOR_IN
14130: IFFALSE 14179
// begin ComMoveToArea ( i , healArea ) ;
14132: LD_VAR 0 14
14136: PPUSH
14137: LD_VAR 0 10
14141: PPUSH
14142: CALL_OW 113
// for j in medic_list do
14146: LD_ADDR_VAR 0 15
14150: PUSH
14151: LD_VAR 0 18
14155: PUSH
14156: FOR_IN
14157: IFFALSE 14175
// AddComHeal ( j , i ) ;
14159: LD_VAR 0 15
14163: PPUSH
14164: LD_VAR 0 14
14168: PPUSH
14169: CALL_OW 188
14173: GO 14156
14175: POP
14176: POP
// end ;
14177: GO 14129
14179: POP
14180: POP
// end ; end ; for i in soldiersOK_list do
14181: LD_ADDR_VAR 0 14
14185: PUSH
14186: LD_VAR 0 19
14190: PUSH
14191: FOR_IN
14192: IFFALSE 14368
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14194: LD_ADDR_VAR 0 22
14198: PUSH
14199: LD_INT 22
14201: PUSH
14202: LD_VAR 0 11
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: PPUSH
14211: CALL_OW 69
14215: PPUSH
14216: LD_VAR 0 14
14220: PPUSH
14221: CALL_OW 74
14225: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14226: LD_ADDR_VAR 0 23
14230: PUSH
14231: LD_INT 22
14233: PUSH
14234: LD_VAR 0 11
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 2
14245: PUSH
14246: LD_INT 59
14248: PUSH
14249: EMPTY
14250: LIST
14251: PUSH
14252: LD_INT 21
14254: PUSH
14255: LD_INT 1
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: LD_INT 21
14264: PUSH
14265: LD_INT 2
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: PPUSH
14285: CALL_OW 69
14289: PPUSH
14290: LD_VAR 0 14
14294: PPUSH
14295: CALL_OW 74
14299: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14300: LD_VAR 0 14
14304: PPUSH
14305: LD_VAR 0 22
14309: PPUSH
14310: CALL_OW 296
14314: PUSH
14315: LD_INT 6
14317: PLUS
14318: PUSH
14319: LD_VAR 0 14
14323: PPUSH
14324: LD_VAR 0 23
14328: PPUSH
14329: CALL_OW 296
14333: LESS
14334: IFFALSE 14352
// begin ComAttackUnit ( i , target1 ) ;
14336: LD_VAR 0 14
14340: PPUSH
14341: LD_VAR 0 22
14345: PPUSH
14346: CALL_OW 115
// end else
14350: GO 14366
// begin ComAttackUnit ( i , target2 ) ;
14352: LD_VAR 0 14
14356: PPUSH
14357: LD_VAR 0 23
14361: PPUSH
14362: CALL_OW 115
// end ; end ;
14366: GO 14191
14368: POP
14369: POP
// until soldiersOK_list = [ ] ;
14370: LD_VAR 0 19
14374: PUSH
14375: EMPTY
14376: EQUAL
14377: IFFALSE 13944
// end ; if strategy = 3 then
14379: LD_VAR 0 12
14383: PUSH
14384: LD_INT 3
14386: EQUAL
14387: IFFALSE 14933
// begin repeat wait ( 0 0$3 ) ;
14389: LD_INT 105
14391: PPUSH
14392: CALL_OW 67
// for i in soldiersOK_list do
14396: LD_ADDR_VAR 0 14
14400: PUSH
14401: LD_VAR 0 19
14405: PUSH
14406: FOR_IN
14407: IFFALSE 14471
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14409: LD_VAR 0 14
14413: PPUSH
14414: LD_INT 63
14416: PPUSH
14417: LD_INT 71
14419: PPUSH
14420: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14424: LD_VAR 0 14
14428: PPUSH
14429: LD_INT 35
14431: PPUSH
14432: LD_INT 44
14434: PPUSH
14435: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14439: LD_VAR 0 14
14443: PPUSH
14444: LD_INT 23
14446: PPUSH
14447: LD_INT 18
14449: PPUSH
14450: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14454: LD_VAR 0 14
14458: PPUSH
14459: LD_INT 26
14461: PPUSH
14462: LD_INT 12
14464: PPUSH
14465: CALL_OW 174
// end ;
14469: GO 14406
14471: POP
14472: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14473: LD_INT 14
14475: PPUSH
14476: LD_INT 22
14478: PUSH
14479: LD_VAR 0 1
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PPUSH
14488: CALL_OW 70
14492: PUSH
14493: LD_INT 2
14495: GREATER
14496: IFFALSE 14389
// repeat wait ( 0 0$1 ) ;
14498: LD_INT 35
14500: PPUSH
14501: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14505: LD_ADDR_VAR 0 17
14509: PUSH
14510: LD_INT 22
14512: PUSH
14513: LD_VAR 0 1
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PUSH
14522: LD_INT 1
14524: PUSH
14525: LD_INT 3
14527: PUSH
14528: LD_INT 24
14530: PUSH
14531: LD_INT 550
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 24
14544: PUSH
14545: LD_INT 250
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: LIST
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PPUSH
14561: CALL_OW 69
14565: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14566: LD_ADDR_VAR 0 19
14570: PUSH
14571: LD_INT 22
14573: PUSH
14574: LD_VAR 0 1
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 2
14585: PUSH
14586: LD_INT 25
14588: PUSH
14589: LD_INT 1
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PUSH
14596: LD_INT 25
14598: PUSH
14599: LD_INT 5
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 25
14608: PUSH
14609: LD_INT 8
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 25
14618: PUSH
14619: LD_INT 9
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: PUSH
14633: LD_INT 24
14635: PUSH
14636: LD_INT 1000
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: LIST
14647: PPUSH
14648: CALL_OW 69
14652: ST_TO_ADDR
// if medicCount > 0 then
14653: LD_VAR 0 7
14657: PUSH
14658: LD_INT 0
14660: GREATER
14661: IFFALSE 14735
// begin if damageUnit_list > 0 then
14663: LD_VAR 0 17
14667: PUSH
14668: LD_INT 0
14670: GREATER
14671: IFFALSE 14735
// begin for i in damageUnit_list do
14673: LD_ADDR_VAR 0 14
14677: PUSH
14678: LD_VAR 0 17
14682: PUSH
14683: FOR_IN
14684: IFFALSE 14733
// begin ComMoveToArea ( i , healArea ) ;
14686: LD_VAR 0 14
14690: PPUSH
14691: LD_VAR 0 10
14695: PPUSH
14696: CALL_OW 113
// for j in medic_list do
14700: LD_ADDR_VAR 0 15
14704: PUSH
14705: LD_VAR 0 18
14709: PUSH
14710: FOR_IN
14711: IFFALSE 14729
// AddComHeal ( j , i ) ;
14713: LD_VAR 0 15
14717: PPUSH
14718: LD_VAR 0 14
14722: PPUSH
14723: CALL_OW 188
14727: GO 14710
14729: POP
14730: POP
// end ;
14731: GO 14683
14733: POP
14734: POP
// end ; end ; for i in soldiersOK_list do
14735: LD_ADDR_VAR 0 14
14739: PUSH
14740: LD_VAR 0 19
14744: PUSH
14745: FOR_IN
14746: IFFALSE 14922
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14748: LD_ADDR_VAR 0 22
14752: PUSH
14753: LD_INT 22
14755: PUSH
14756: LD_VAR 0 11
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PPUSH
14765: CALL_OW 69
14769: PPUSH
14770: LD_VAR 0 14
14774: PPUSH
14775: CALL_OW 74
14779: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14780: LD_ADDR_VAR 0 23
14784: PUSH
14785: LD_INT 22
14787: PUSH
14788: LD_VAR 0 11
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 2
14799: PUSH
14800: LD_INT 59
14802: PUSH
14803: EMPTY
14804: LIST
14805: PUSH
14806: LD_INT 21
14808: PUSH
14809: LD_INT 1
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 21
14818: PUSH
14819: LD_INT 2
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: EMPTY
14837: LIST
14838: PPUSH
14839: CALL_OW 69
14843: PPUSH
14844: LD_VAR 0 14
14848: PPUSH
14849: CALL_OW 74
14853: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14854: LD_VAR 0 14
14858: PPUSH
14859: LD_VAR 0 22
14863: PPUSH
14864: CALL_OW 296
14868: PUSH
14869: LD_INT 6
14871: PLUS
14872: PUSH
14873: LD_VAR 0 14
14877: PPUSH
14878: LD_VAR 0 23
14882: PPUSH
14883: CALL_OW 296
14887: LESS
14888: IFFALSE 14906
// begin ComAttackUnit ( i , target1 ) ;
14890: LD_VAR 0 14
14894: PPUSH
14895: LD_VAR 0 22
14899: PPUSH
14900: CALL_OW 115
// end else
14904: GO 14920
// begin ComAttackUnit ( i , target2 ) ;
14906: LD_VAR 0 14
14910: PPUSH
14911: LD_VAR 0 23
14915: PPUSH
14916: CALL_OW 115
// end ; end ;
14920: GO 14745
14922: POP
14923: POP
// until soldiersOK_list = [ ] ;
14924: LD_VAR 0 19
14928: PUSH
14929: EMPTY
14930: EQUAL
14931: IFFALSE 14498
// end ; end ;
14933: LD_VAR 0 13
14937: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14938: LD_INT 0
14940: PPUSH
14941: PPUSH
14942: PPUSH
14943: PPUSH
14944: PPUSH
14945: PPUSH
14946: PPUSH
14947: PPUSH
14948: PPUSH
14949: PPUSH
14950: PPUSH
// amChassisTab = [ ] ;
14951: LD_ADDR_VAR 0 19
14955: PUSH
14956: EMPTY
14957: ST_TO_ADDR
// arChassisTab = [ ] ;
14958: LD_ADDR_VAR 0 18
14962: PUSH
14963: EMPTY
14964: ST_TO_ADDR
// ruChassisTab = [ ] ;
14965: LD_ADDR_VAR 0 17
14969: PUSH
14970: EMPTY
14971: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14972: LD_INT 35
14974: PPUSH
14975: CALL_OW 67
// if nation = 1 then
14979: LD_VAR 0 5
14983: PUSH
14984: LD_INT 1
14986: EQUAL
14987: IFFALSE 15478
// begin uc_side = side ;
14989: LD_ADDR_OWVAR 20
14993: PUSH
14994: LD_VAR 0 2
14998: ST_TO_ADDR
// uc_nation = nation ;
14999: LD_ADDR_OWVAR 21
15003: PUSH
15004: LD_VAR 0 5
15008: ST_TO_ADDR
// vc_engine = vehengine ;
15009: LD_ADDR_OWVAR 39
15013: PUSH
15014: LD_VAR 0 6
15018: ST_TO_ADDR
// vc_control = vehcontrol ;
15019: LD_ADDR_OWVAR 38
15023: PUSH
15024: LD_VAR 0 7
15028: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15029: LD_ADDR_OWVAR 40
15033: PUSH
15034: LD_VAR 0 10
15038: PUSH
15039: LD_INT 1
15041: PPUSH
15042: LD_VAR 0 10
15046: PPUSH
15047: CALL_OW 12
15051: ARRAY
15052: ST_TO_ADDR
// for j = 1 to AMWeapon do
15053: LD_ADDR_VAR 0 14
15057: PUSH
15058: DOUBLE
15059: LD_INT 1
15061: DEC
15062: ST_TO_ADDR
15063: LD_VAR 0 10
15067: PUSH
15068: FOR_TO
15069: IFFALSE 15370
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15071: LD_VAR 0 10
15075: PUSH
15076: LD_VAR 0 14
15080: ARRAY
15081: PUSH
15082: LD_INT 2
15084: EQUAL
15085: PUSH
15086: LD_VAR 0 10
15090: PUSH
15091: LD_VAR 0 14
15095: ARRAY
15096: PUSH
15097: LD_INT 3
15099: EQUAL
15100: OR
15101: IFFALSE 15154
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15103: LD_ADDR_VAR 0 19
15107: PUSH
15108: LD_INT 1
15110: PUSH
15111: LD_INT 2
15113: PUSH
15114: LD_INT 3
15116: PUSH
15117: LD_INT 4
15119: PUSH
15120: LD_INT 5
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15130: LD_ADDR_OWVAR 37
15134: PUSH
15135: LD_VAR 0 19
15139: PUSH
15140: LD_INT 1
15142: PPUSH
15143: LD_VAR 0 19
15147: PPUSH
15148: CALL_OW 12
15152: ARRAY
15153: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15154: LD_VAR 0 10
15158: PUSH
15159: LD_VAR 0 14
15163: ARRAY
15164: PUSH
15165: LD_INT 4
15167: EQUAL
15168: PUSH
15169: LD_VAR 0 10
15173: PUSH
15174: LD_VAR 0 14
15178: ARRAY
15179: PUSH
15180: LD_INT 5
15182: EQUAL
15183: OR
15184: PUSH
15185: LD_VAR 0 10
15189: PUSH
15190: LD_VAR 0 14
15194: ARRAY
15195: PUSH
15196: LD_INT 9
15198: EQUAL
15199: OR
15200: PUSH
15201: LD_VAR 0 10
15205: PUSH
15206: LD_VAR 0 14
15210: ARRAY
15211: PUSH
15212: LD_INT 11
15214: EQUAL
15215: OR
15216: PUSH
15217: LD_VAR 0 10
15221: PUSH
15222: LD_VAR 0 14
15226: ARRAY
15227: PUSH
15228: LD_INT 7
15230: EQUAL
15231: OR
15232: IFFALSE 15281
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15234: LD_ADDR_VAR 0 19
15238: PUSH
15239: LD_INT 2
15241: PUSH
15242: LD_INT 3
15244: PUSH
15245: LD_INT 4
15247: PUSH
15248: LD_INT 5
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15257: LD_ADDR_OWVAR 37
15261: PUSH
15262: LD_VAR 0 19
15266: PUSH
15267: LD_INT 1
15269: PPUSH
15270: LD_VAR 0 19
15274: PPUSH
15275: CALL_OW 12
15279: ARRAY
15280: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15281: LD_VAR 0 10
15285: PUSH
15286: LD_VAR 0 14
15290: ARRAY
15291: PUSH
15292: LD_INT 8
15294: EQUAL
15295: PUSH
15296: LD_VAR 0 10
15300: PUSH
15301: LD_VAR 0 14
15305: ARRAY
15306: PUSH
15307: LD_INT 6
15309: EQUAL
15310: OR
15311: PUSH
15312: LD_VAR 0 10
15316: PUSH
15317: LD_VAR 0 14
15321: ARRAY
15322: PUSH
15323: LD_INT 10
15325: EQUAL
15326: OR
15327: IFFALSE 15368
// begin amChassisTab = [ 4 , 5 ] ;
15329: LD_ADDR_VAR 0 19
15333: PUSH
15334: LD_INT 4
15336: PUSH
15337: LD_INT 5
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15344: LD_ADDR_OWVAR 37
15348: PUSH
15349: LD_VAR 0 19
15353: PUSH
15354: LD_INT 1
15356: PPUSH
15357: LD_VAR 0 19
15361: PPUSH
15362: CALL_OW 12
15366: ARRAY
15367: ST_TO_ADDR
// end ; end ;
15368: GO 15068
15370: POP
15371: POP
// veh = CreateVehicle ;
15372: LD_ADDR_VAR 0 16
15376: PUSH
15377: CALL_OW 45
15381: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15382: LD_VAR 0 16
15386: PPUSH
15387: LD_VAR 0 1
15391: PPUSH
15392: LD_INT 0
15394: PPUSH
15395: CALL_OW 49
// if vehControl = 1 then
15399: LD_VAR 0 7
15403: PUSH
15404: LD_INT 1
15406: EQUAL
15407: IFFALSE 15464
// begin hc_gallery =  ;
15409: LD_ADDR_OWVAR 33
15413: PUSH
15414: LD_STRING 
15416: ST_TO_ADDR
// hc_name =  ;
15417: LD_ADDR_OWVAR 26
15421: PUSH
15422: LD_STRING 
15424: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15425: LD_INT 0
15427: PPUSH
15428: LD_INT 3
15430: PPUSH
15431: LD_VAR 0 4
15435: PPUSH
15436: CALL_OW 380
// un = CreateHuman ;
15440: LD_ADDR_VAR 0 15
15444: PUSH
15445: CALL_OW 44
15449: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15450: LD_VAR 0 15
15454: PPUSH
15455: LD_VAR 0 16
15459: PPUSH
15460: CALL_OW 52
// end ; i = i + 1 ;
15464: LD_ADDR_VAR 0 13
15468: PUSH
15469: LD_VAR 0 13
15473: PUSH
15474: LD_INT 1
15476: PLUS
15477: ST_TO_ADDR
// end ; if nation = 2 then
15478: LD_VAR 0 5
15482: PUSH
15483: LD_INT 2
15485: EQUAL
15486: IFFALSE 15910
// begin uc_side = side ;
15488: LD_ADDR_OWVAR 20
15492: PUSH
15493: LD_VAR 0 2
15497: ST_TO_ADDR
// uc_nation = nation ;
15498: LD_ADDR_OWVAR 21
15502: PUSH
15503: LD_VAR 0 5
15507: ST_TO_ADDR
// vc_engine = vehengine ;
15508: LD_ADDR_OWVAR 39
15512: PUSH
15513: LD_VAR 0 6
15517: ST_TO_ADDR
// vc_control = vehcontrol ;
15518: LD_ADDR_OWVAR 38
15522: PUSH
15523: LD_VAR 0 7
15527: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15528: LD_ADDR_OWVAR 40
15532: PUSH
15533: LD_VAR 0 9
15537: PUSH
15538: LD_INT 1
15540: PPUSH
15541: LD_VAR 0 9
15545: PPUSH
15546: CALL_OW 12
15550: ARRAY
15551: ST_TO_ADDR
// for j = 1 to ARWeapons do
15552: LD_ADDR_VAR 0 14
15556: PUSH
15557: DOUBLE
15558: LD_INT 1
15560: DEC
15561: ST_TO_ADDR
15562: LD_VAR 0 9
15566: PUSH
15567: FOR_TO
15568: IFFALSE 15802
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15570: LD_VAR 0 9
15574: PUSH
15575: LD_VAR 0 14
15579: ARRAY
15580: PUSH
15581: LD_INT 24
15583: EQUAL
15584: PUSH
15585: LD_VAR 0 9
15589: PUSH
15590: LD_VAR 0 14
15594: ARRAY
15595: PUSH
15596: LD_INT 22
15598: EQUAL
15599: OR
15600: PUSH
15601: LD_VAR 0 9
15605: PUSH
15606: LD_VAR 0 14
15610: ARRAY
15611: PUSH
15612: LD_INT 23
15614: EQUAL
15615: OR
15616: PUSH
15617: LD_VAR 0 9
15621: PUSH
15622: LD_VAR 0 14
15626: ARRAY
15627: PUSH
15628: LD_INT 30
15630: EQUAL
15631: OR
15632: IFFALSE 15681
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15634: LD_ADDR_VAR 0 18
15638: PUSH
15639: LD_INT 11
15641: PUSH
15642: LD_INT 12
15644: PUSH
15645: LD_INT 13
15647: PUSH
15648: LD_INT 14
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15657: LD_ADDR_OWVAR 37
15661: PUSH
15662: LD_VAR 0 18
15666: PUSH
15667: LD_INT 1
15669: PPUSH
15670: LD_VAR 0 18
15674: PPUSH
15675: CALL_OW 12
15679: ARRAY
15680: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15681: LD_VAR 0 9
15685: PUSH
15686: LD_VAR 0 14
15690: ARRAY
15691: PUSH
15692: LD_INT 29
15694: EQUAL
15695: PUSH
15696: LD_VAR 0 9
15700: PUSH
15701: LD_VAR 0 14
15705: ARRAY
15706: PUSH
15707: LD_INT 28
15709: EQUAL
15710: OR
15711: PUSH
15712: LD_VAR 0 9
15716: PUSH
15717: LD_VAR 0 14
15721: ARRAY
15722: PUSH
15723: LD_INT 27
15725: EQUAL
15726: OR
15727: PUSH
15728: LD_VAR 0 9
15732: PUSH
15733: LD_VAR 0 14
15737: ARRAY
15738: PUSH
15739: LD_INT 26
15741: EQUAL
15742: OR
15743: PUSH
15744: LD_VAR 0 9
15748: PUSH
15749: LD_VAR 0 14
15753: ARRAY
15754: PUSH
15755: LD_INT 25
15757: EQUAL
15758: OR
15759: IFFALSE 15800
// begin arChassisTab = [ 13 , 14 ] ;
15761: LD_ADDR_VAR 0 18
15765: PUSH
15766: LD_INT 13
15768: PUSH
15769: LD_INT 14
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15776: LD_ADDR_OWVAR 37
15780: PUSH
15781: LD_VAR 0 18
15785: PUSH
15786: LD_INT 1
15788: PPUSH
15789: LD_VAR 0 18
15793: PPUSH
15794: CALL_OW 12
15798: ARRAY
15799: ST_TO_ADDR
// end ; end ;
15800: GO 15567
15802: POP
15803: POP
// veh = CreateVehicle ;
15804: LD_ADDR_VAR 0 16
15808: PUSH
15809: CALL_OW 45
15813: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15814: LD_VAR 0 16
15818: PPUSH
15819: LD_VAR 0 1
15823: PPUSH
15824: LD_INT 0
15826: PPUSH
15827: CALL_OW 49
// if vehcontrol = 1 then
15831: LD_VAR 0 7
15835: PUSH
15836: LD_INT 1
15838: EQUAL
15839: IFFALSE 15896
// begin hc_gallery =  ;
15841: LD_ADDR_OWVAR 33
15845: PUSH
15846: LD_STRING 
15848: ST_TO_ADDR
// hc_name =  ;
15849: LD_ADDR_OWVAR 26
15853: PUSH
15854: LD_STRING 
15856: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15857: LD_INT 0
15859: PPUSH
15860: LD_INT 3
15862: PPUSH
15863: LD_VAR 0 4
15867: PPUSH
15868: CALL_OW 380
// un = CreateHuman ;
15872: LD_ADDR_VAR 0 15
15876: PUSH
15877: CALL_OW 44
15881: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15882: LD_VAR 0 15
15886: PPUSH
15887: LD_VAR 0 16
15891: PPUSH
15892: CALL_OW 52
// end ; i = i + 1 ;
15896: LD_ADDR_VAR 0 13
15900: PUSH
15901: LD_VAR 0 13
15905: PUSH
15906: LD_INT 1
15908: PLUS
15909: ST_TO_ADDR
// end ; if nation = 3 then
15910: LD_VAR 0 5
15914: PUSH
15915: LD_INT 3
15917: EQUAL
15918: IFFALSE 16310
// begin uc_side = side ;
15920: LD_ADDR_OWVAR 20
15924: PUSH
15925: LD_VAR 0 2
15929: ST_TO_ADDR
// uc_nation = nation ;
15930: LD_ADDR_OWVAR 21
15934: PUSH
15935: LD_VAR 0 5
15939: ST_TO_ADDR
// vc_engine = vehengine ;
15940: LD_ADDR_OWVAR 39
15944: PUSH
15945: LD_VAR 0 6
15949: ST_TO_ADDR
// vc_control = vehcontrol ;
15950: LD_ADDR_OWVAR 38
15954: PUSH
15955: LD_VAR 0 7
15959: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15960: LD_ADDR_OWVAR 40
15964: PUSH
15965: LD_VAR 0 8
15969: PUSH
15970: LD_INT 1
15972: PPUSH
15973: LD_VAR 0 8
15977: PPUSH
15978: CALL_OW 12
15982: ARRAY
15983: ST_TO_ADDR
// for j = 1 to RuWeapons do
15984: LD_ADDR_VAR 0 14
15988: PUSH
15989: DOUBLE
15990: LD_INT 1
15992: DEC
15993: ST_TO_ADDR
15994: LD_VAR 0 8
15998: PUSH
15999: FOR_TO
16000: IFFALSE 16202
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16002: LD_VAR 0 8
16006: PUSH
16007: LD_VAR 0 14
16011: ARRAY
16012: PUSH
16013: LD_INT 42
16015: EQUAL
16016: PUSH
16017: LD_VAR 0 8
16021: PUSH
16022: LD_VAR 0 14
16026: ARRAY
16027: PUSH
16028: LD_INT 43
16030: EQUAL
16031: OR
16032: PUSH
16033: LD_VAR 0 8
16037: PUSH
16038: LD_VAR 0 14
16042: ARRAY
16043: PUSH
16044: LD_INT 44
16046: EQUAL
16047: OR
16048: PUSH
16049: LD_VAR 0 8
16053: PUSH
16054: LD_VAR 0 14
16058: ARRAY
16059: PUSH
16060: LD_INT 45
16062: EQUAL
16063: OR
16064: PUSH
16065: LD_VAR 0 8
16069: PUSH
16070: LD_VAR 0 14
16074: ARRAY
16075: PUSH
16076: LD_INT 49
16078: EQUAL
16079: OR
16080: IFFALSE 16129
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16082: LD_ADDR_VAR 0 17
16086: PUSH
16087: LD_INT 21
16089: PUSH
16090: LD_INT 22
16092: PUSH
16093: LD_INT 23
16095: PUSH
16096: LD_INT 24
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16105: LD_ADDR_OWVAR 37
16109: PUSH
16110: LD_VAR 0 17
16114: PUSH
16115: LD_INT 1
16117: PPUSH
16118: LD_VAR 0 17
16122: PPUSH
16123: CALL_OW 12
16127: ARRAY
16128: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16129: LD_VAR 0 8
16133: PUSH
16134: LD_VAR 0 14
16138: ARRAY
16139: PUSH
16140: LD_INT 46
16142: EQUAL
16143: PUSH
16144: LD_VAR 0 8
16148: PUSH
16149: LD_VAR 0 14
16153: ARRAY
16154: PUSH
16155: LD_INT 47
16157: EQUAL
16158: OR
16159: IFFALSE 16200
// begin ruChassisTab = [ 23 , 24 ] ;
16161: LD_ADDR_VAR 0 17
16165: PUSH
16166: LD_INT 23
16168: PUSH
16169: LD_INT 24
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16176: LD_ADDR_OWVAR 37
16180: PUSH
16181: LD_VAR 0 17
16185: PUSH
16186: LD_INT 1
16188: PPUSH
16189: LD_VAR 0 17
16193: PPUSH
16194: CALL_OW 12
16198: ARRAY
16199: ST_TO_ADDR
// end ; end ;
16200: GO 15999
16202: POP
16203: POP
// veh = CreateVehicle ;
16204: LD_ADDR_VAR 0 16
16208: PUSH
16209: CALL_OW 45
16213: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16214: LD_VAR 0 16
16218: PPUSH
16219: LD_VAR 0 1
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 49
// if vehcontrol = 1 then
16231: LD_VAR 0 7
16235: PUSH
16236: LD_INT 1
16238: EQUAL
16239: IFFALSE 16296
// begin hc_gallery =  ;
16241: LD_ADDR_OWVAR 33
16245: PUSH
16246: LD_STRING 
16248: ST_TO_ADDR
// hc_name =  ;
16249: LD_ADDR_OWVAR 26
16253: PUSH
16254: LD_STRING 
16256: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16257: LD_INT 0
16259: PPUSH
16260: LD_INT 3
16262: PPUSH
16263: LD_VAR 0 4
16267: PPUSH
16268: CALL_OW 380
// un = CreateHuman ;
16272: LD_ADDR_VAR 0 15
16276: PUSH
16277: CALL_OW 44
16281: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16282: LD_VAR 0 15
16286: PPUSH
16287: LD_VAR 0 16
16291: PPUSH
16292: CALL_OW 52
// end ; i = i + 1 ;
16296: LD_ADDR_VAR 0 13
16300: PUSH
16301: LD_VAR 0 13
16305: PUSH
16306: LD_INT 1
16308: PLUS
16309: ST_TO_ADDR
// end ; until i = vehCount ;
16310: LD_VAR 0 13
16314: PUSH
16315: LD_VAR 0 3
16319: EQUAL
16320: IFFALSE 14972
// repeat wait ( 0 0$1 ) ;
16322: LD_INT 35
16324: PPUSH
16325: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16329: LD_ADDR_VAR 0 20
16333: PUSH
16334: LD_INT 22
16336: PUSH
16337: LD_VAR 0 2
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 21
16348: PUSH
16349: LD_INT 2
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: LD_INT 24
16358: PUSH
16359: LD_INT 250
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: LIST
16370: PPUSH
16371: CALL_OW 69
16375: ST_TO_ADDR
// if vehicleOK_list > 0 then
16376: LD_VAR 0 20
16380: PUSH
16381: LD_INT 0
16383: GREATER
16384: IFFALSE 16575
// begin for i in vehicleOK_list do
16386: LD_ADDR_VAR 0 13
16390: PUSH
16391: LD_VAR 0 20
16395: PUSH
16396: FOR_IN
16397: IFFALSE 16573
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16399: LD_ADDR_VAR 0 21
16403: PUSH
16404: LD_INT 22
16406: PUSH
16407: LD_VAR 0 11
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PPUSH
16416: CALL_OW 69
16420: PPUSH
16421: LD_VAR 0 13
16425: PPUSH
16426: CALL_OW 74
16430: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16431: LD_ADDR_VAR 0 22
16435: PUSH
16436: LD_INT 22
16438: PUSH
16439: LD_VAR 0 11
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 59
16453: PUSH
16454: EMPTY
16455: LIST
16456: PUSH
16457: LD_INT 21
16459: PUSH
16460: LD_INT 1
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 21
16469: PUSH
16470: LD_INT 2
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: PPUSH
16490: CALL_OW 69
16494: PPUSH
16495: LD_VAR 0 13
16499: PPUSH
16500: CALL_OW 74
16504: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16505: LD_VAR 0 13
16509: PPUSH
16510: LD_VAR 0 21
16514: PPUSH
16515: CALL_OW 296
16519: PUSH
16520: LD_INT 6
16522: PLUS
16523: PUSH
16524: LD_VAR 0 13
16528: PPUSH
16529: LD_VAR 0 22
16533: PPUSH
16534: CALL_OW 296
16538: LESS
16539: IFFALSE 16557
// begin ComAttackUnit ( i , target1 ) ;
16541: LD_VAR 0 13
16545: PPUSH
16546: LD_VAR 0 21
16550: PPUSH
16551: CALL_OW 115
// end else
16555: GO 16571
// begin ComAttackUnit ( i , target2 ) ;
16557: LD_VAR 0 13
16561: PPUSH
16562: LD_VAR 0 22
16566: PPUSH
16567: CALL_OW 115
// end ; end ;
16571: GO 16396
16573: POP
16574: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16575: LD_INT 22
16577: PUSH
16578: LD_VAR 0 2
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 21
16589: PUSH
16590: LD_INT 2
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 24
16599: PUSH
16600: LD_INT 250
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: PUSH
16617: LD_INT 0
16619: EQUAL
16620: IFFALSE 16322
// end ;
16622: LD_VAR 0 12
16626: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16627: LD_INT 0
16629: PPUSH
16630: PPUSH
16631: PPUSH
16632: PPUSH
16633: PPUSH
16634: PPUSH
16635: PPUSH
16636: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16637: LD_ADDR_VAR 0 7
16641: PUSH
16642: LD_INT 22
16644: PUSH
16645: LD_VAR 0 1
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 1
16656: PUSH
16657: LD_INT 3
16659: PUSH
16660: LD_INT 24
16662: PUSH
16663: LD_INT 550
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 24
16676: PUSH
16677: LD_INT 250
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PPUSH
16693: CALL_OW 69
16697: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16698: LD_ADDR_VAR 0 8
16702: PUSH
16703: LD_INT 22
16705: PUSH
16706: LD_VAR 0 1
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 2
16717: PUSH
16718: LD_INT 25
16720: PUSH
16721: LD_INT 1
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 25
16730: PUSH
16731: LD_INT 5
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 25
16740: PUSH
16741: LD_INT 8
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 25
16750: PUSH
16751: LD_INT 9
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 24
16767: PUSH
16768: LD_INT 1000
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: LIST
16779: PPUSH
16780: CALL_OW 69
16784: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16785: LD_ADDR_VAR 0 9
16789: PUSH
16790: LD_INT 22
16792: PUSH
16793: LD_VAR 0 1
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 25
16804: PUSH
16805: LD_INT 4
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PPUSH
16816: CALL_OW 69
16820: ST_TO_ADDR
// if medicCount > 0 then
16821: LD_VAR 0 9
16825: PUSH
16826: LD_INT 0
16828: GREATER
16829: IFFALSE 16903
// begin if damageUnit_list > 0 then
16831: LD_VAR 0 7
16835: PUSH
16836: LD_INT 0
16838: GREATER
16839: IFFALSE 16903
// begin for i in damageUnit_list do
16841: LD_ADDR_VAR 0 5
16845: PUSH
16846: LD_VAR 0 7
16850: PUSH
16851: FOR_IN
16852: IFFALSE 16901
// begin ComMoveToArea ( i , healArea ) ;
16854: LD_VAR 0 5
16858: PPUSH
16859: LD_VAR 0 2
16863: PPUSH
16864: CALL_OW 113
// for j in medicCount do
16868: LD_ADDR_VAR 0 6
16872: PUSH
16873: LD_VAR 0 9
16877: PUSH
16878: FOR_IN
16879: IFFALSE 16897
// AddComHeal ( j , i ) ;
16881: LD_VAR 0 6
16885: PPUSH
16886: LD_VAR 0 5
16890: PPUSH
16891: CALL_OW 188
16895: GO 16878
16897: POP
16898: POP
// end ;
16899: GO 16851
16901: POP
16902: POP
// end ; end ; if soldiersOK_list > 0 then
16903: LD_VAR 0 8
16907: PUSH
16908: LD_INT 0
16910: GREATER
16911: IFFALSE 17102
// begin for i in soldiersOK_list do
16913: LD_ADDR_VAR 0 5
16917: PUSH
16918: LD_VAR 0 8
16922: PUSH
16923: FOR_IN
16924: IFFALSE 17100
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16926: LD_ADDR_VAR 0 10
16930: PUSH
16931: LD_INT 22
16933: PUSH
16934: LD_VAR 0 3
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PPUSH
16943: CALL_OW 69
16947: PPUSH
16948: LD_VAR 0 5
16952: PPUSH
16953: CALL_OW 74
16957: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16958: LD_ADDR_VAR 0 11
16962: PUSH
16963: LD_INT 22
16965: PUSH
16966: LD_VAR 0 3
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 2
16977: PUSH
16978: LD_INT 59
16980: PUSH
16981: EMPTY
16982: LIST
16983: PUSH
16984: LD_INT 21
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 21
16996: PUSH
16997: LD_INT 2
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: EMPTY
17015: LIST
17016: PPUSH
17017: CALL_OW 69
17021: PPUSH
17022: LD_VAR 0 5
17026: PPUSH
17027: CALL_OW 74
17031: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17032: LD_VAR 0 5
17036: PPUSH
17037: LD_VAR 0 10
17041: PPUSH
17042: CALL_OW 296
17046: PUSH
17047: LD_INT 8
17049: PLUS
17050: PUSH
17051: LD_VAR 0 5
17055: PPUSH
17056: LD_VAR 0 11
17060: PPUSH
17061: CALL_OW 296
17065: LESS
17066: IFFALSE 17084
// begin ComAttackUnit ( i , target1 ) ;
17068: LD_VAR 0 5
17072: PPUSH
17073: LD_VAR 0 10
17077: PPUSH
17078: CALL_OW 115
// end else
17082: GO 17098
// begin ComAttackUnit ( i , target2 ) ;
17084: LD_VAR 0 5
17088: PPUSH
17089: LD_VAR 0 11
17093: PPUSH
17094: CALL_OW 115
// end ; end ;
17098: GO 16923
17100: POP
17101: POP
// end ; end ;
17102: LD_VAR 0 4
17106: RET
// export function GetDriverVehicle ( unit ) ; begin
17107: LD_INT 0
17109: PPUSH
// if not unit then
17110: LD_VAR 0 1
17114: NOT
17115: IFFALSE 17119
// exit ;
17117: GO 17157
// result := IsInUnit ( unit ) ;
17119: LD_ADDR_VAR 0 2
17123: PUSH
17124: LD_VAR 0 1
17128: PPUSH
17129: CALL_OW 310
17133: ST_TO_ADDR
// if GetType ( result ) <> unit_vehicle then
17134: LD_VAR 0 2
17138: PPUSH
17139: CALL_OW 247
17143: PUSH
17144: LD_INT 2
17146: NONEQUAL
17147: IFFALSE 17157
// result := 0 ;
17149: LD_ADDR_VAR 0 2
17153: PUSH
17154: LD_INT 0
17156: ST_TO_ADDR
// end ;
17157: LD_VAR 0 2
17161: RET
// export function CanBeBuiltCost ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17162: LD_INT 0
17164: PPUSH
17165: PPUSH
17166: PPUSH
17167: PPUSH
17168: PPUSH
17169: PPUSH
17170: PPUSH
17171: PPUSH
17172: PPUSH
// result := false ;
17173: LD_ADDR_VAR 0 7
17177: PUSH
17178: LD_INT 0
17180: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17181: LD_VAR 0 1
17185: NOT
17186: PUSH
17187: LD_VAR 0 1
17191: PPUSH
17192: CALL_OW 266
17196: PUSH
17197: LD_INT 0
17199: PUSH
17200: LD_INT 1
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: IN
17207: NOT
17208: OR
17209: PUSH
17210: LD_VAR 0 2
17214: NOT
17215: OR
17216: PUSH
17217: LD_VAR 0 5
17221: PUSH
17222: LD_INT 0
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: LD_INT 3
17233: PUSH
17234: LD_INT 4
17236: PUSH
17237: LD_INT 5
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: IN
17248: NOT
17249: OR
17250: PUSH
17251: LD_VAR 0 3
17255: PPUSH
17256: LD_VAR 0 4
17260: PPUSH
17261: CALL_OW 488
17265: NOT
17266: OR
17267: IFFALSE 17271
// exit ;
17269: GO 17952
// pom := GetBase ( bdepot ) ;
17271: LD_ADDR_VAR 0 10
17275: PUSH
17276: LD_VAR 0 1
17280: PPUSH
17281: CALL_OW 274
17285: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17286: LD_ADDR_VAR 0 11
17290: PUSH
17291: LD_VAR 0 2
17295: PPUSH
17296: LD_VAR 0 1
17300: PPUSH
17301: CALL_OW 248
17305: PPUSH
17306: CALL_OW 450
17310: ST_TO_ADDR
// if check_cost then
17311: LD_VAR 0 6
17315: IFFALSE 17392
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17317: LD_VAR 0 10
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: CALL_OW 275
17329: PUSH
17330: LD_VAR 0 11
17334: PUSH
17335: LD_INT 1
17337: ARRAY
17338: GREATEREQUAL
17339: PUSH
17340: LD_VAR 0 10
17344: PPUSH
17345: LD_INT 2
17347: PPUSH
17348: CALL_OW 275
17352: PUSH
17353: LD_VAR 0 11
17357: PUSH
17358: LD_INT 2
17360: ARRAY
17361: GREATEREQUAL
17362: AND
17363: PUSH
17364: LD_VAR 0 10
17368: PPUSH
17369: LD_INT 3
17371: PPUSH
17372: CALL_OW 275
17376: PUSH
17377: LD_VAR 0 11
17381: PUSH
17382: LD_INT 3
17384: ARRAY
17385: GREATEREQUAL
17386: AND
17387: NOT
17388: IFFALSE 17392
// exit ;
17390: GO 17952
// if GetBType ( bdepot ) = b_depot then
17392: LD_VAR 0 1
17396: PPUSH
17397: CALL_OW 266
17401: PUSH
17402: LD_INT 0
17404: EQUAL
17405: IFFALSE 17417
// dist := 28 else
17407: LD_ADDR_VAR 0 14
17411: PUSH
17412: LD_INT 28
17414: ST_TO_ADDR
17415: GO 17425
// dist := 36 ;
17417: LD_ADDR_VAR 0 14
17421: PUSH
17422: LD_INT 36
17424: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17425: LD_VAR 0 1
17429: PPUSH
17430: LD_VAR 0 3
17434: PPUSH
17435: LD_VAR 0 4
17439: PPUSH
17440: CALL_OW 297
17444: PUSH
17445: LD_VAR 0 14
17449: GREATER
17450: IFFALSE 17454
// exit ;
17452: GO 17952
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17454: LD_ADDR_VAR 0 12
17458: PUSH
17459: LD_VAR 0 2
17463: PPUSH
17464: LD_VAR 0 3
17468: PPUSH
17469: LD_VAR 0 4
17473: PPUSH
17474: LD_VAR 0 5
17478: PPUSH
17479: LD_VAR 0 1
17483: PPUSH
17484: CALL_OW 248
17488: PPUSH
17489: LD_INT 0
17491: PPUSH
17492: CALL 60181 0 6
17496: ST_TO_ADDR
// if not hexes then
17497: LD_VAR 0 12
17501: NOT
17502: IFFALSE 17506
// exit ;
17504: GO 17952
// hex := GetHexInfo ( x , y ) ;
17506: LD_ADDR_VAR 0 15
17510: PUSH
17511: LD_VAR 0 3
17515: PPUSH
17516: LD_VAR 0 4
17520: PPUSH
17521: CALL_OW 546
17525: ST_TO_ADDR
// if hex [ 1 ] then
17526: LD_VAR 0 15
17530: PUSH
17531: LD_INT 1
17533: ARRAY
17534: IFFALSE 17538
// exit ;
17536: GO 17952
// height := hex [ 2 ] ;
17538: LD_ADDR_VAR 0 13
17542: PUSH
17543: LD_VAR 0 15
17547: PUSH
17548: LD_INT 2
17550: ARRAY
17551: ST_TO_ADDR
// for i = 1 to hexes do
17552: LD_ADDR_VAR 0 8
17556: PUSH
17557: DOUBLE
17558: LD_INT 1
17560: DEC
17561: ST_TO_ADDR
17562: LD_VAR 0 12
17566: PUSH
17567: FOR_TO
17568: IFFALSE 17896
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17570: LD_VAR 0 12
17574: PUSH
17575: LD_VAR 0 8
17579: ARRAY
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: LD_VAR 0 12
17589: PUSH
17590: LD_VAR 0 8
17594: ARRAY
17595: PUSH
17596: LD_INT 2
17598: ARRAY
17599: PPUSH
17600: CALL_OW 488
17604: NOT
17605: IFFALSE 17609
// continue ;
17607: GO 17567
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17609: LD_ADDR_VAR 0 9
17613: PUSH
17614: LD_VAR 0 12
17618: PUSH
17619: LD_VAR 0 8
17623: ARRAY
17624: PUSH
17625: LD_INT 1
17627: ARRAY
17628: PPUSH
17629: LD_VAR 0 12
17633: PUSH
17634: LD_VAR 0 8
17638: ARRAY
17639: PUSH
17640: LD_INT 2
17642: ARRAY
17643: PPUSH
17644: CALL_OW 546
17648: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17649: LD_VAR 0 9
17653: PUSH
17654: LD_INT 1
17656: ARRAY
17657: PUSH
17658: LD_VAR 0 9
17662: PUSH
17663: LD_INT 2
17665: ARRAY
17666: PUSH
17667: LD_VAR 0 13
17671: PUSH
17672: LD_INT 2
17674: PLUS
17675: GREATER
17676: OR
17677: PUSH
17678: LD_VAR 0 9
17682: PUSH
17683: LD_INT 2
17685: ARRAY
17686: PUSH
17687: LD_VAR 0 13
17691: PUSH
17692: LD_INT 2
17694: MINUS
17695: LESS
17696: OR
17697: PUSH
17698: LD_VAR 0 9
17702: PUSH
17703: LD_INT 3
17705: ARRAY
17706: PUSH
17707: LD_INT 0
17709: PUSH
17710: LD_INT 8
17712: PUSH
17713: LD_INT 9
17715: PUSH
17716: LD_INT 10
17718: PUSH
17719: LD_INT 11
17721: PUSH
17722: LD_INT 12
17724: PUSH
17725: LD_INT 13
17727: PUSH
17728: LD_INT 16
17730: PUSH
17731: LD_INT 17
17733: PUSH
17734: LD_INT 18
17736: PUSH
17737: LD_INT 19
17739: PUSH
17740: LD_INT 20
17742: PUSH
17743: LD_INT 21
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: IN
17761: NOT
17762: OR
17763: PUSH
17764: LD_VAR 0 9
17768: PUSH
17769: LD_INT 5
17771: ARRAY
17772: NOT
17773: OR
17774: PUSH
17775: LD_VAR 0 9
17779: PUSH
17780: LD_INT 6
17782: ARRAY
17783: PUSH
17784: LD_INT 1
17786: PUSH
17787: LD_INT 2
17789: PUSH
17790: LD_INT 7
17792: PUSH
17793: LD_INT 9
17795: PUSH
17796: LD_INT 10
17798: PUSH
17799: LD_INT 11
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: IN
17810: NOT
17811: OR
17812: PUSH
17813: LD_VAR 0 12
17817: PUSH
17818: LD_VAR 0 8
17822: ARRAY
17823: PUSH
17824: LD_INT 1
17826: ARRAY
17827: PPUSH
17828: LD_VAR 0 12
17832: PUSH
17833: LD_VAR 0 8
17837: ARRAY
17838: PUSH
17839: LD_INT 2
17841: ARRAY
17842: PPUSH
17843: CALL_OW 428
17847: PUSH
17848: LD_INT 0
17850: GREATER
17851: OR
17852: PUSH
17853: LD_VAR 0 12
17857: PUSH
17858: LD_VAR 0 8
17862: ARRAY
17863: PUSH
17864: LD_INT 1
17866: ARRAY
17867: PPUSH
17868: LD_VAR 0 12
17872: PUSH
17873: LD_VAR 0 8
17877: ARRAY
17878: PUSH
17879: LD_INT 2
17881: ARRAY
17882: PPUSH
17883: CALL_OW 351
17887: OR
17888: IFFALSE 17894
// exit ;
17890: POP
17891: POP
17892: GO 17952
// end ;
17894: GO 17567
17896: POP
17897: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
17898: LD_VAR 0 2
17902: PUSH
17903: LD_INT 29
17905: PUSH
17906: LD_INT 30
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: IN
17913: PUSH
17914: LD_VAR 0 3
17918: PPUSH
17919: LD_VAR 0 4
17923: PPUSH
17924: LD_VAR 0 1
17928: PPUSH
17929: CALL_OW 255
17933: PPUSH
17934: CALL_OW 440
17938: NOT
17939: AND
17940: IFFALSE 17944
// exit ;
17942: GO 17952
// result := true ;
17944: LD_ADDR_VAR 0 7
17948: PUSH
17949: LD_INT 1
17951: ST_TO_ADDR
// end ; end_of_file
17952: LD_VAR 0 7
17956: RET
// every 1 do var i ;
17957: GO 17959
17959: DISABLE
17960: LD_INT 0
17962: PPUSH
// begin Video ( true ) ;
17963: LD_INT 1
17965: PPUSH
17966: CALL 82893 0 1
// CenterOnXY ( 53 , 40 ) ;
17970: LD_INT 53
17972: PPUSH
17973: LD_INT 40
17975: PPUSH
17976: CALL_OW 84
// wait ( 0 0$5 ) ;
17980: LD_INT 175
17982: PPUSH
17983: CALL_OW 67
// if gammaCommander = 1 then
17987: LD_EXP 12
17991: PUSH
17992: LD_INT 1
17994: EQUAL
17995: IFFALSE 18009
// Say ( Donaldson , D1-Don-1 ) ;
17997: LD_EXP 3
18001: PPUSH
18002: LD_STRING D1-Don-1
18004: PPUSH
18005: CALL_OW 88
// if gammaCommander = 2 then
18009: LD_EXP 12
18013: PUSH
18014: LD_INT 2
18016: EQUAL
18017: IFFALSE 18031
// Say ( Brown , D1-Brown-1 ) ;
18019: LD_EXP 2
18023: PPUSH
18024: LD_STRING D1-Brown-1
18026: PPUSH
18027: CALL_OW 88
// if gammaCommander = 3 then
18031: LD_EXP 12
18035: PUSH
18036: LD_INT 3
18038: EQUAL
18039: IFFALSE 18053
// Say ( Houten , D1-VanH-1 ) ;
18041: LD_EXP 13
18045: PPUSH
18046: LD_STRING D1-VanH-1
18048: PPUSH
18049: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
18053: LD_EXP 22
18057: PPUSH
18058: LD_STRING D1-Har-1
18060: PPUSH
18061: CALL_OW 94
// if gammaCommander = 1 then
18065: LD_EXP 12
18069: PUSH
18070: LD_INT 1
18072: EQUAL
18073: IFFALSE 18087
// Say ( Donaldson , D1-Don-2 ) ;
18075: LD_EXP 3
18079: PPUSH
18080: LD_STRING D1-Don-2
18082: PPUSH
18083: CALL_OW 88
// if gammaCommander = 2 then
18087: LD_EXP 12
18091: PUSH
18092: LD_INT 2
18094: EQUAL
18095: IFFALSE 18109
// Say ( Brown , D1-Brown-2 ) ;
18097: LD_EXP 2
18101: PPUSH
18102: LD_STRING D1-Brown-2
18104: PPUSH
18105: CALL_OW 88
// if gammaCommander = 3 then
18109: LD_EXP 12
18113: PUSH
18114: LD_INT 3
18116: EQUAL
18117: IFFALSE 18131
// Say ( Houten , D1-VanH-2 ) ;
18119: LD_EXP 13
18123: PPUSH
18124: LD_STRING D1-VanH-2
18126: PPUSH
18127: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
18131: LD_EXP 22
18135: PPUSH
18136: LD_STRING D1-Har-2
18138: PPUSH
18139: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
18143: LD_INT 22
18145: PUSH
18146: LD_INT 1
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 33
18155: PUSH
18156: LD_INT 2
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 61
18165: PUSH
18166: EMPTY
18167: LIST
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: LIST
18173: PPUSH
18174: CALL_OW 69
18178: IFFALSE 18243
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
18180: LD_ADDR_VAR 0 1
18184: PUSH
18185: LD_INT 22
18187: PUSH
18188: LD_INT 1
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 33
18197: PUSH
18198: LD_INT 2
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 61
18207: PUSH
18208: EMPTY
18209: LIST
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL_OW 69
18220: PUSH
18221: FOR_IN
18222: IFFALSE 18241
// ComAgressiveMove ( i , 70 , 41 ) ;
18224: LD_VAR 0 1
18228: PPUSH
18229: LD_INT 70
18231: PPUSH
18232: LD_INT 41
18234: PPUSH
18235: CALL_OW 114
18239: GO 18221
18241: POP
18242: POP
// repeat wait ( 0 0$1 ) ;
18243: LD_INT 35
18245: PPUSH
18246: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
18250: LD_ADDR_VAR 0 1
18254: PUSH
18255: LD_INT 22
18257: PUSH
18258: LD_INT 6
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: EMPTY
18266: LIST
18267: PPUSH
18268: CALL_OW 69
18272: PUSH
18273: FOR_IN
18274: IFFALSE 18293
// ComAgressiveMove ( i , 54 , 20 ) ;
18276: LD_VAR 0 1
18280: PPUSH
18281: LD_INT 54
18283: PPUSH
18284: LD_INT 20
18286: PPUSH
18287: CALL_OW 114
18291: GO 18273
18293: POP
18294: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
18295: LD_ADDR_VAR 0 1
18299: PUSH
18300: LD_INT 22
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 25
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 3
18322: PUSH
18323: LD_INT 54
18325: PUSH
18326: EMPTY
18327: LIST
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: LIST
18337: PPUSH
18338: CALL_OW 69
18342: PUSH
18343: FOR_IN
18344: IFFALSE 18378
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
18346: LD_VAR 0 1
18350: PPUSH
18351: LD_INT 70
18353: PPUSH
18354: LD_INT 41
18356: PPUSH
18357: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
18361: LD_VAR 0 1
18365: PPUSH
18366: LD_INT 46
18368: PPUSH
18369: LD_INT 39
18371: PPUSH
18372: CALL_OW 174
// end ;
18376: GO 18343
18378: POP
18379: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
18380: LD_ADDR_VAR 0 1
18384: PUSH
18385: LD_INT 22
18387: PUSH
18388: LD_INT 1
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 21
18397: PUSH
18398: LD_INT 1
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 3
18407: PUSH
18408: LD_INT 24
18410: PUSH
18411: LD_INT 500
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: LIST
18426: PPUSH
18427: CALL_OW 69
18431: PUSH
18432: FOR_IN
18433: IFFALSE 18466
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
18435: LD_VAR 0 1
18439: PPUSH
18440: LD_EXP 37
18444: PPUSH
18445: CALL_OW 250
18449: PPUSH
18450: LD_EXP 37
18454: PPUSH
18455: CALL_OW 251
18459: PPUSH
18460: CALL_OW 111
18464: GO 18432
18466: POP
18467: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
18468: LD_INT 22
18470: PUSH
18471: LD_INT 6
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 21
18480: PUSH
18481: LD_INT 1
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 24
18490: PUSH
18491: LD_INT 250
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: LIST
18502: PPUSH
18503: CALL_OW 69
18507: PUSH
18508: LD_INT 5
18510: LESS
18511: IFFALSE 18243
// Video ( false ) ;
18513: LD_INT 0
18515: PPUSH
18516: CALL 82893 0 1
// ChangeMissionObjectives ( M1 ) ;
18520: LD_STRING M1
18522: PPUSH
18523: CALL_OW 337
// wait ( 0 0$2 ) ;
18527: LD_INT 70
18529: PPUSH
18530: CALL_OW 67
// SaveForQuickRestart ;
18534: CALL_OW 22
// startCutscene = 0 ;
18538: LD_ADDR_EXP 38
18542: PUSH
18543: LD_INT 0
18545: ST_TO_ADDR
// end ;
18546: PPOPN 1
18548: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
18549: LD_EXP 38
18553: IFFALSE 18644
18555: GO 18557
18557: DISABLE
18558: LD_INT 0
18560: PPUSH
18561: PPUSH
// begin enable ;
18562: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
18563: LD_ADDR_VAR 0 1
18567: PUSH
18568: LD_INT 22
18570: PUSH
18571: LD_INT 1
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 21
18580: PUSH
18581: LD_INT 1
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 3
18590: PUSH
18591: LD_INT 24
18593: PUSH
18594: LD_INT 700
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: LIST
18609: PPUSH
18610: CALL_OW 69
18614: ST_TO_ADDR
// for i in tmp do
18615: LD_ADDR_VAR 0 2
18619: PUSH
18620: LD_VAR 0 1
18624: PUSH
18625: FOR_IN
18626: IFFALSE 18642
// SetLives ( i , 700 ) ;
18628: LD_VAR 0 2
18632: PPUSH
18633: LD_INT 700
18635: PPUSH
18636: CALL_OW 234
18640: GO 18625
18642: POP
18643: POP
// end ;
18644: PPOPN 2
18646: END
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 6 ] ] ) = 0 or tick > 3 3$00 do
18647: LD_INT 22
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 101
18659: PUSH
18660: LD_INT 6
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: PUSH
18676: LD_INT 0
18678: EQUAL
18679: PUSH
18680: LD_OWVAR 1
18684: PUSH
18685: LD_INT 6300
18687: GREATER
18688: OR
18689: IFFALSE 18938
18691: GO 18693
18693: DISABLE
// begin PrepareSupportFromDelta ;
18694: CALL 3916 0 0
// firstAttack = 1 ;
18698: LD_ADDR_EXP 33
18702: PUSH
18703: LD_INT 1
18705: ST_TO_ADDR
// if IsOk ( Gladstone ) then
18706: LD_EXP 8
18710: PPUSH
18711: CALL_OW 302
18715: IFFALSE 18731
// Say ( Gladstone , D2-Glad-1 ) else
18717: LD_EXP 8
18721: PPUSH
18722: LD_STRING D2-Glad-1
18724: PPUSH
18725: CALL_OW 88
18729: GO 18839
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
18731: LD_INT 4
18733: PPUSH
18734: LD_INT 22
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 21
18746: PUSH
18747: LD_INT 1
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 25
18759: PUSH
18760: LD_INT 1
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 25
18769: PUSH
18770: LD_INT 2
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 25
18779: PUSH
18780: LD_INT 3
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 25
18789: PUSH
18790: LD_INT 4
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: LIST
18808: PPUSH
18809: CALL_OW 70
18813: PUSH
18814: LD_EXP 15
18818: PUSH
18819: LD_EXP 14
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: DIFF
18828: PPUSH
18829: LD_STRING D2-Sol1-1
18831: PPUSH
18832: LD_STRING D2-FSol1-1
18834: PPUSH
18835: CALL 7358 0 3
// if IsOK ( Donaldson ) and gammaCommander = 1 then
18839: LD_EXP 3
18843: PPUSH
18844: CALL_OW 302
18848: PUSH
18849: LD_EXP 12
18853: PUSH
18854: LD_INT 1
18856: EQUAL
18857: AND
18858: IFFALSE 18872
// Say ( Donaldson , D2-Don-1 ) ;
18860: LD_EXP 3
18864: PPUSH
18865: LD_STRING D2-Don-1
18867: PPUSH
18868: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
18872: LD_EXP 2
18876: PPUSH
18877: CALL_OW 302
18881: PUSH
18882: LD_EXP 12
18886: PUSH
18887: LD_INT 2
18889: EQUAL
18890: AND
18891: IFFALSE 18905
// Say ( Brown , D2-Brown-1 ) ;
18893: LD_EXP 2
18897: PPUSH
18898: LD_STRING D2-Brown-1
18900: PPUSH
18901: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
18905: LD_EXP 13
18909: PPUSH
18910: CALL_OW 302
18914: PUSH
18915: LD_EXP 12
18919: PUSH
18920: LD_INT 3
18922: EQUAL
18923: AND
18924: IFFALSE 18938
// Say ( Houten , D2-VanH-1 ) ;
18926: LD_EXP 13
18930: PPUSH
18931: LD_STRING D2-VanH-1
18933: PPUSH
18934: CALL_OW 88
// end ;
18938: END
// every 0 0$1 trigger tick > 3 3$00 do var none ;
18939: LD_OWVAR 1
18943: PUSH
18944: LD_INT 6300
18946: GREATER
18947: IFFALSE 20001
18949: GO 18951
18951: DISABLE
18952: LD_INT 0
18954: PPUSH
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
18955: LD_STRING 07_time
18957: PPUSH
18958: LD_INT 12600
18960: PPUSH
18961: CALL_OW 30
18965: PUSH
18966: LD_INT 3
18968: DIV
18969: PPUSH
18970: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
18974: LD_INT 34
18976: PPUSH
18977: LD_INT 1
18979: PPUSH
18980: CALL_OW 321
18984: PUSH
18985: LD_INT 2
18987: EQUAL
18988: IFFALSE 18997
// SetAchievement ( ACH_HEAVYGUN ) ;
18990: LD_STRING ACH_HEAVYGUN
18992: PPUSH
18993: CALL_OW 543
// PrepareMacmillanSquad ;
18997: CALL 4613 0 0
// CenterNowOnUnits ( JMM ) ;
19001: LD_EXP 1
19005: PPUSH
19006: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
19010: LD_EXP 1
19014: PPUSH
19015: LD_STRING D3-JMM-1
19017: PPUSH
19018: CALL_OW 88
// JMMArrive = 1 ;
19022: LD_ADDR_EXP 39
19026: PUSH
19027: LD_INT 1
19029: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
19030: LD_EXP 3
19034: PPUSH
19035: CALL_OW 302
19039: PUSH
19040: LD_EXP 12
19044: PUSH
19045: LD_INT 1
19047: EQUAL
19048: AND
19049: IFFALSE 19065
// begin Say ( Donaldson , D3-Don-1 ) ;
19051: LD_EXP 3
19055: PPUSH
19056: LD_STRING D3-Don-1
19058: PPUSH
19059: CALL_OW 88
// end else
19063: GO 19117
// begin if gammaCommander = 1 then
19065: LD_EXP 12
19069: PUSH
19070: LD_INT 1
19072: EQUAL
19073: IFFALSE 19117
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
19075: LD_EXP 11
19079: PPUSH
19080: LD_INT 26
19082: PUSH
19083: LD_INT 1
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PPUSH
19090: CALL_OW 72
19094: PPUSH
19095: LD_STRING D3-Sol1-1
19097: PPUSH
19098: LD_STRING D3-Sol1-1
19100: PPUSH
19101: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19105: LD_EXP 1
19109: PPUSH
19110: LD_STRING D3-JMM-2
19112: PPUSH
19113: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
19117: LD_EXP 2
19121: PPUSH
19122: CALL_OW 302
19126: PUSH
19127: LD_EXP 12
19131: PUSH
19132: LD_INT 2
19134: EQUAL
19135: AND
19136: IFFALSE 19152
// begin Say ( Brown , D3-Brown-1 ) ;
19138: LD_EXP 2
19142: PPUSH
19143: LD_STRING D3-Brown-1
19145: PPUSH
19146: CALL_OW 88
// end else
19150: GO 19204
// begin if gammaCommander = 2 then
19152: LD_EXP 12
19156: PUSH
19157: LD_INT 2
19159: EQUAL
19160: IFFALSE 19204
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
19162: LD_EXP 11
19166: PPUSH
19167: LD_INT 26
19169: PUSH
19170: LD_INT 1
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PPUSH
19177: CALL_OW 72
19181: PPUSH
19182: LD_STRING D3-Sol1-1a
19184: PPUSH
19185: LD_STRING D3-Sol1-1a
19187: PPUSH
19188: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19192: LD_EXP 1
19196: PPUSH
19197: LD_STRING D3-JMM-2
19199: PPUSH
19200: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
19204: LD_EXP 13
19208: PPUSH
19209: CALL_OW 302
19213: PUSH
19214: LD_EXP 12
19218: PUSH
19219: LD_INT 3
19221: EQUAL
19222: AND
19223: IFFALSE 19239
// begin Say ( Houten , D3-VanH-1 ) ;
19225: LD_EXP 13
19229: PPUSH
19230: LD_STRING D3-VanH-1
19232: PPUSH
19233: CALL_OW 88
// end else
19237: GO 19291
// begin if gammaCommander = 3 then
19239: LD_EXP 12
19243: PUSH
19244: LD_INT 3
19246: EQUAL
19247: IFFALSE 19291
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
19249: LD_EXP 11
19253: PPUSH
19254: LD_INT 26
19256: PUSH
19257: LD_INT 1
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PPUSH
19264: CALL_OW 72
19268: PPUSH
19269: LD_STRING D3-Sol1-1b
19271: PPUSH
19272: LD_STRING D3-Sol1-1b
19274: PPUSH
19275: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19279: LD_EXP 1
19283: PPUSH
19284: LD_STRING D3-JMM-2
19286: PPUSH
19287: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
19291: LD_EXP 15
19295: PPUSH
19296: CALL_OW 302
19300: IFFALSE 19328
// begin Say ( Joan , D3a-Joan-1 ) ;
19302: LD_EXP 15
19306: PPUSH
19307: LD_STRING D3a-Joan-1
19309: PPUSH
19310: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
19314: LD_EXP 1
19318: PPUSH
19319: LD_STRING D3a-JMM-1
19321: PPUSH
19322: CALL_OW 88
// end else
19326: GO 19670
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
19328: LD_STRING 06_JoanStatus_1
19330: PPUSH
19331: LD_INT 0
19333: PPUSH
19334: CALL_OW 30
19338: PUSH
19339: LD_INT 1
19341: EQUAL
19342: IFFALSE 19670
// begin Say ( JMM , D3b-JMM-1 ) ;
19344: LD_EXP 1
19348: PPUSH
19349: LD_STRING D3b-JMM-1
19351: PPUSH
19352: CALL_OW 88
// if gammaCommander = 1 then
19356: LD_EXP 12
19360: PUSH
19361: LD_INT 1
19363: EQUAL
19364: IFFALSE 19421
// if IsOK ( Donaldson ) then
19366: LD_EXP 3
19370: PPUSH
19371: CALL_OW 302
19375: IFFALSE 19391
// Say ( Donaldson , D3b-Don-1 ) else
19377: LD_EXP 3
19381: PPUSH
19382: LD_STRING D3b-Don-1
19384: PPUSH
19385: CALL_OW 88
19389: GO 19421
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19391: LD_EXP 11
19395: PPUSH
19396: LD_INT 26
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PPUSH
19406: CALL_OW 72
19410: PPUSH
19411: LD_STRING D3b-Sol1-1
19413: PPUSH
19414: LD_STRING D3b-Sol1-1
19416: PPUSH
19417: CALL 7358 0 3
// if gammaCommander = 2 then
19421: LD_EXP 12
19425: PUSH
19426: LD_INT 2
19428: EQUAL
19429: IFFALSE 19486
// if IsOk ( Brown ) then
19431: LD_EXP 2
19435: PPUSH
19436: CALL_OW 302
19440: IFFALSE 19456
// Say ( Brown , D3b-Brown-1 ) else
19442: LD_EXP 2
19446: PPUSH
19447: LD_STRING D3b-Brown-1
19449: PPUSH
19450: CALL_OW 88
19454: GO 19486
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19456: LD_EXP 11
19460: PPUSH
19461: LD_INT 26
19463: PUSH
19464: LD_INT 1
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PPUSH
19471: CALL_OW 72
19475: PPUSH
19476: LD_STRING D3b-Sol1-1
19478: PPUSH
19479: LD_STRING D3b-Sol1-1
19481: PPUSH
19482: CALL 7358 0 3
// if gammaCommander = 3 then
19486: LD_EXP 12
19490: PUSH
19491: LD_INT 3
19493: EQUAL
19494: IFFALSE 19551
// if IsOk ( Houten ) then
19496: LD_EXP 13
19500: PPUSH
19501: CALL_OW 302
19505: IFFALSE 19521
// Say ( Houten , D3b-VanH-1 ) else
19507: LD_EXP 13
19511: PPUSH
19512: LD_STRING D3b-VanH-1
19514: PPUSH
19515: CALL_OW 88
19519: GO 19551
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19521: LD_EXP 11
19525: PPUSH
19526: LD_INT 26
19528: PUSH
19529: LD_INT 1
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PPUSH
19536: CALL_OW 72
19540: PPUSH
19541: LD_STRING D3b-Sol1-1
19543: PPUSH
19544: LD_STRING D3b-Sol1-1
19546: PPUSH
19547: CALL 7358 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
19551: LD_EXP 11
19555: PPUSH
19556: LD_INT 26
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PPUSH
19566: CALL_OW 72
19570: PUSH
19571: LD_EXP 12
19575: PUSH
19576: LD_INT 1
19578: EQUAL
19579: PUSH
19580: LD_EXP 3
19584: PPUSH
19585: CALL_OW 302
19589: AND
19590: OR
19591: PUSH
19592: LD_EXP 12
19596: PUSH
19597: LD_INT 2
19599: EQUAL
19600: PUSH
19601: LD_EXP 2
19605: PPUSH
19606: CALL_OW 302
19610: AND
19611: OR
19612: PUSH
19613: LD_EXP 12
19617: PUSH
19618: LD_INT 3
19620: EQUAL
19621: PUSH
19622: LD_EXP 13
19626: PPUSH
19627: CALL_OW 302
19631: AND
19632: OR
19633: IFFALSE 19647
// Say ( JMM , D3b-JMM-2 ) ;
19635: LD_EXP 1
19639: PPUSH
19640: LD_STRING D3b-JMM-2
19642: PPUSH
19643: CALL_OW 88
// if IsOK ( Lisa ) then
19647: LD_EXP 6
19651: PPUSH
19652: CALL_OW 302
19656: IFFALSE 19670
// Say ( Lisa , D3b-Lisa-2 ) ;
19658: LD_EXP 6
19662: PPUSH
19663: LD_STRING D3b-Lisa-2
19665: PPUSH
19666: CALL_OW 88
// end ; end ; none := [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] ^ macmilan_squad ;
19670: LD_ADDR_VAR 0 1
19674: PUSH
19675: LD_EXP 1
19679: PUSH
19680: LD_EXP 2
19684: PUSH
19685: LD_EXP 3
19689: PUSH
19690: LD_EXP 4
19694: PUSH
19695: LD_EXP 5
19699: PUSH
19700: LD_EXP 6
19704: PUSH
19705: LD_EXP 7
19709: PUSH
19710: LD_EXP 8
19714: PUSH
19715: LD_EXP 9
19719: PUSH
19720: LD_EXP 10
19724: PUSH
19725: LD_EXP 15
19729: PUSH
19730: LD_EXP 14
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: PUSH
19749: LD_EXP 42
19753: ADD
19754: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCa-Sol1-1 , DCa-Sol1-1 ) ;
19755: LD_INT 22
19757: PUSH
19758: LD_INT 1
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 21
19767: PUSH
19768: LD_INT 1
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 26
19777: PUSH
19778: LD_INT 1
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: LD_INT 25
19790: PUSH
19791: LD_INT 1
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 25
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 25
19810: PUSH
19811: LD_INT 3
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 25
19820: PUSH
19821: LD_INT 4
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: PPUSH
19841: CALL_OW 69
19845: PUSH
19846: LD_VAR 0 1
19850: DIFF
19851: PPUSH
19852: LD_STRING DCa-Sol1-1
19854: PPUSH
19855: LD_STRING DCa-Sol1-1
19857: PPUSH
19858: CALL 7358 0 3
// Say ( JMM , DCb-JMM-1 ) ;
19862: LD_EXP 1
19866: PPUSH
19867: LD_STRING DCb-JMM-1
19869: PPUSH
19870: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCb-Sol1-1 , DCb-Sol1-1 ) ;
19874: LD_INT 22
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 21
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 26
19896: PUSH
19897: LD_INT 1
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 2
19906: PUSH
19907: LD_INT 25
19909: PUSH
19910: LD_INT 1
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 25
19919: PUSH
19920: LD_INT 2
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 25
19929: PUSH
19930: LD_INT 3
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 25
19939: PUSH
19940: LD_INT 4
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: PPUSH
19960: CALL_OW 69
19964: PUSH
19965: LD_VAR 0 1
19969: DIFF
19970: PPUSH
19971: LD_STRING DCb-Sol1-1
19973: PPUSH
19974: LD_STRING DCb-Sol1-1
19976: PPUSH
19977: CALL 7358 0 3
// Say ( JMM , DCb-JMM-2 ) ;
19981: LD_EXP 1
19985: PPUSH
19986: LD_STRING DCb-JMM-2
19988: PPUSH
19989: CALL_OW 88
// secondAttack = 1 ;
19993: LD_ADDR_EXP 34
19997: PUSH
19998: LD_INT 1
20000: ST_TO_ADDR
// end ;
20001: PPOPN 1
20003: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 18 18$00 do
20004: LD_EXP 39
20008: PUSH
20009: LD_INT 1
20011: EQUAL
20012: PUSH
20013: LD_OWVAR 1
20017: PUSH
20018: LD_INT 37800
20020: GREATEREQUAL
20021: AND
20022: IFFALSE 20095
20024: GO 20026
20026: DISABLE
// begin DialogueOn ;
20027: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
20031: LD_EXP 23
20035: PPUSH
20036: LD_STRING D4-Pow-1
20038: PPUSH
20039: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
20043: LD_EXP 1
20047: PPUSH
20048: LD_STRING D4-JMM-1
20050: PPUSH
20051: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
20055: LD_EXP 23
20059: PPUSH
20060: LD_STRING D4-Pow-2
20062: PPUSH
20063: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
20067: LD_EXP 1
20071: PPUSH
20072: LD_STRING D4-JMM-2
20074: PPUSH
20075: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
20079: LD_EXP 23
20083: PPUSH
20084: LD_STRING D4-Pow-3
20086: PPUSH
20087: CALL_OW 94
// DialogueOff ;
20091: CALL_OW 7
// end ;
20095: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 24 24$00 do
20096: LD_EXP 39
20100: PUSH
20101: LD_INT 1
20103: EQUAL
20104: PUSH
20105: LD_OWVAR 1
20109: PUSH
20110: LD_INT 50400
20112: GREATEREQUAL
20113: AND
20114: IFFALSE 20139
20116: GO 20118
20118: DISABLE
// begin DialogueOn ;
20119: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
20123: LD_EXP 23
20127: PPUSH
20128: LD_STRING D4a-Pow-1
20130: PPUSH
20131: CALL_OW 94
// DialogueOff ;
20135: CALL_OW 7
// end ;
20139: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 35 35$00 do
20140: LD_EXP 39
20144: PUSH
20145: LD_INT 1
20147: EQUAL
20148: PUSH
20149: LD_OWVAR 1
20153: PUSH
20154: LD_INT 73500
20156: GREATEREQUAL
20157: AND
20158: IFFALSE 20179
20160: GO 20162
20162: DISABLE
// begin PrepareSikorsky ;
20163: CALL 5871 0 0
// SikorskyArrive = 1 ;
20167: LD_ADDR_EXP 18
20171: PUSH
20172: LD_INT 1
20174: ST_TO_ADDR
// PrepareSikorskyArmy ;
20175: CALL 6051 0 0
// end ;
20179: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
20180: LD_EXP 17
20184: PPUSH
20185: LD_INT 5
20187: PPUSH
20188: CALL_OW 308
20192: IFFALSE 20384
20194: GO 20196
20196: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
20197: LD_EXP 17
20201: PPUSH
20202: CALL_OW 87
// DialogueOn ;
20206: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
20210: LD_EXP 16
20214: PPUSH
20215: LD_STRING D5-Sik-1
20217: PPUSH
20218: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
20222: LD_EXP 1
20226: PPUSH
20227: LD_STRING D5-JMM-1a
20229: PPUSH
20230: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
20234: LD_EXP 16
20238: PPUSH
20239: LD_STRING D5-Sik-2
20241: PPUSH
20242: CALL_OW 88
// case query ( QSikorski ) of 1 :
20246: LD_STRING QSikorski
20248: PPUSH
20249: CALL_OW 97
20253: PUSH
20254: LD_INT 1
20256: DOUBLE
20257: EQUAL
20258: IFTRUE 20262
20260: GO 20285
20262: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
20263: LD_EXP 16
20267: PPUSH
20268: LD_STRING D5a-Sik-1
20270: PPUSH
20271: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
20275: LD_ADDR_EXP 19
20279: PUSH
20280: LD_INT 2100
20282: ST_TO_ADDR
// end ; 2 :
20283: GO 20372
20285: LD_INT 2
20287: DOUBLE
20288: EQUAL
20289: IFTRUE 20293
20291: GO 20316
20293: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
20294: LD_EXP 16
20298: PPUSH
20299: LD_STRING D5b-Sik-1
20301: PPUSH
20302: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20306: LD_ADDR_EXP 19
20310: PUSH
20311: LD_INT 10500
20313: ST_TO_ADDR
// end ; 3 :
20314: GO 20372
20316: LD_INT 3
20318: DOUBLE
20319: EQUAL
20320: IFTRUE 20324
20322: GO 20371
20324: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
20325: LD_EXP 16
20329: PPUSH
20330: LD_STRING D5c-Sik-1
20332: PPUSH
20333: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
20337: LD_EXP 1
20341: PPUSH
20342: LD_STRING D5c-JMM-1
20344: PPUSH
20345: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
20349: LD_EXP 16
20353: PPUSH
20354: LD_STRING D5c-Sik-2
20356: PPUSH
20357: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20361: LD_ADDR_EXP 19
20365: PUSH
20366: LD_INT 10500
20368: ST_TO_ADDR
// end ; end ;
20369: GO 20372
20371: POP
// DialogueOff ;
20372: CALL_OW 7
// timerStatus = 1 ;
20376: LD_ADDR_EXP 35
20380: PUSH
20381: LD_INT 1
20383: ST_TO_ADDR
// end ;
20384: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
20385: LD_EXP 19
20389: PUSH
20390: LD_INT 35
20392: LESS
20393: IFFALSE 20441
20395: GO 20397
20397: DISABLE
// begin timerStatus = 0 ;
20398: LD_ADDR_EXP 35
20402: PUSH
20403: LD_INT 0
20405: ST_TO_ADDR
// DialogueOn ;
20406: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
20410: LD_EXP 16
20414: PPUSH
20415: LD_STRING D6-Sik-1
20417: PPUSH
20418: CALL_OW 88
// DialogueOff ;
20422: CALL_OW 7
// SikorskyAI = 1 ;
20426: LD_ADDR_EXP 20
20430: PUSH
20431: LD_INT 1
20433: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
20434: LD_STRING M2
20436: PPUSH
20437: CALL_OW 337
// end ;
20441: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
20442: LD_EXP 17
20446: PPUSH
20447: LD_INT 18
20449: PPUSH
20450: CALL_OW 308
20454: IFFALSE 20564
20456: GO 20458
20458: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
20459: LD_EXP 16
20463: PPUSH
20464: LD_STRING D7-Sik-1
20466: PPUSH
20467: CALL_OW 88
// wait ( 0 0$10 ) ;
20471: LD_INT 350
20473: PPUSH
20474: CALL_OW 67
// if IsInArea ( JMM , RussianBaseTerritory ) or ( GetDriverVehicle ( JMM ) and IsInArea ( GetDriverVehicle ( JMM ) , RussianBaseTerritory ) ) then
20478: LD_EXP 1
20482: PPUSH
20483: LD_INT 24
20485: PPUSH
20486: CALL_OW 308
20490: PUSH
20491: LD_EXP 1
20495: PPUSH
20496: CALL 17107 0 1
20500: PUSH
20501: LD_EXP 1
20505: PPUSH
20506: CALL 17107 0 1
20510: PPUSH
20511: LD_INT 24
20513: PPUSH
20514: CALL_OW 308
20518: AND
20519: OR
20520: IFFALSE 20544
// begin Say ( Sikorski , D7a-Sik-1 ) ;
20522: LD_EXP 16
20526: PPUSH
20527: LD_STRING D7a-Sik-1
20529: PPUSH
20530: CALL_OW 88
// SikorskyStatus = 1 ;
20534: LD_ADDR_EXP 21
20538: PUSH
20539: LD_INT 1
20541: ST_TO_ADDR
// end else
20542: GO 20564
// begin Say ( Sikorski , D7b-Sik-1 ) ;
20544: LD_EXP 16
20548: PPUSH
20549: LD_STRING D7b-Sik-1
20551: PPUSH
20552: CALL_OW 88
// SikorskyStatus = 2 ;
20556: LD_ADDR_EXP 21
20560: PUSH
20561: LD_INT 2
20563: ST_TO_ADDR
// end ; end ; end_of_file
20564: END
// on BuildingComplete ( building ) do var tmp , un ;
20565: LD_INT 0
20567: PPUSH
20568: PPUSH
// begin if GetSide ( building ) = 3 then
20569: LD_VAR 0 1
20573: PPUSH
20574: CALL_OW 255
20578: PUSH
20579: LD_INT 3
20581: EQUAL
20582: IFFALSE 21119
// begin if GetBType ( building ) = b_depot then
20584: LD_VAR 0 1
20588: PPUSH
20589: CALL_OW 266
20593: PUSH
20594: LD_INT 0
20596: EQUAL
20597: IFFALSE 20665
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
20599: LD_VAR 0 1
20603: PPUSH
20604: CALL_OW 274
20608: PPUSH
20609: LD_INT 1
20611: PPUSH
20612: LD_INT 5000
20614: PPUSH
20615: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
20619: LD_VAR 0 1
20623: PPUSH
20624: CALL_OW 274
20628: PPUSH
20629: LD_INT 2
20631: PPUSH
20632: LD_INT 5000
20634: PPUSH
20635: CALL_OW 277
// SetBName ( building , konev ) ;
20639: LD_VAR 0 1
20643: PPUSH
20644: LD_STRING konev
20646: PPUSH
20647: CALL_OW 500
// ruDepot = building ;
20651: LD_ADDR_EXP 28
20655: PUSH
20656: LD_VAR 0 1
20660: ST_TO_ADDR
// BuildRussianBase ;
20661: CALL 7984 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
20665: LD_VAR 0 1
20669: PPUSH
20670: CALL_OW 266
20674: PUSH
20675: LD_INT 0
20677: EQUAL
20678: PUSH
20679: LD_VAR 0 1
20683: PPUSH
20684: CALL_OW 266
20688: PUSH
20689: LD_INT 2
20691: EQUAL
20692: OR
20693: PUSH
20694: LD_VAR 0 1
20698: PPUSH
20699: CALL_OW 266
20703: PUSH
20704: LD_INT 4
20706: EQUAL
20707: OR
20708: IFFALSE 20719
// ComUpgrade ( building ) ;
20710: LD_VAR 0 1
20714: PPUSH
20715: CALL_OW 146
// if GetBType ( building ) = b_lab then
20719: LD_VAR 0 1
20723: PPUSH
20724: CALL_OW 266
20728: PUSH
20729: LD_INT 6
20731: EQUAL
20732: IFFALSE 20783
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20734: LD_VAR 0 1
20738: PPUSH
20739: LD_INT 10
20741: PPUSH
20742: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
20746: LD_VAR 0 1
20750: PPUSH
20751: LD_INT 12
20753: PPUSH
20754: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
20758: LD_INT 3
20760: PPUSH
20761: LD_VAR 0 1
20765: PPUSH
20766: LD_INT 3
20768: PPUSH
20769: CALL 8528 0 3
// ruLab = building ;
20773: LD_ADDR_EXP 29
20777: PUSH
20778: LD_VAR 0 1
20782: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
20783: LD_VAR 0 1
20787: PPUSH
20788: CALL_OW 266
20792: PUSH
20793: LD_INT 32
20795: EQUAL
20796: IFFALSE 20914
// begin uc_side = 3 ;
20798: LD_ADDR_OWVAR 20
20802: PUSH
20803: LD_INT 3
20805: ST_TO_ADDR
// uc_nation = 3 ;
20806: LD_ADDR_OWVAR 21
20810: PUSH
20811: LD_INT 3
20813: ST_TO_ADDR
// hc_gallery =  ;
20814: LD_ADDR_OWVAR 33
20818: PUSH
20819: LD_STRING 
20821: ST_TO_ADDR
// hc_name =  ;
20822: LD_ADDR_OWVAR 26
20826: PUSH
20827: LD_STRING 
20829: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
20830: LD_INT 0
20832: PPUSH
20833: LD_INT 1
20835: PPUSH
20836: LD_EXP 25
20840: PPUSH
20841: LD_EXP 26
20845: PPUSH
20846: CALL_OW 12
20850: PPUSH
20851: CALL_OW 380
// un = CreateHuman ;
20855: LD_ADDR_VAR 0 3
20859: PUSH
20860: CALL_OW 44
20864: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
20865: LD_VAR 0 3
20869: PPUSH
20870: LD_VAR 0 1
20874: PPUSH
20875: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20879: LD_VAR 0 1
20883: PPUSH
20884: LD_INT 43
20886: PUSH
20887: LD_INT 44
20889: PUSH
20890: LD_INT 46
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: PPUSH
20901: LD_INT 3
20903: PPUSH
20904: CALL_OW 12
20908: ARRAY
20909: PPUSH
20910: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
20914: LD_VAR 0 1
20918: PPUSH
20919: CALL_OW 266
20923: PUSH
20924: LD_INT 33
20926: EQUAL
20927: IFFALSE 20964
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20929: LD_VAR 0 1
20933: PPUSH
20934: LD_INT 43
20936: PUSH
20937: LD_INT 44
20939: PUSH
20940: LD_INT 46
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 1
20950: PPUSH
20951: LD_INT 3
20953: PPUSH
20954: CALL_OW 12
20958: ARRAY
20959: PPUSH
20960: CALL_OW 208
// if GetBType ( building ) = b_bunker then
20964: LD_VAR 0 1
20968: PPUSH
20969: CALL_OW 266
20973: PUSH
20974: LD_INT 32
20976: EQUAL
20977: IFFALSE 21014
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20979: LD_VAR 0 1
20983: PPUSH
20984: LD_INT 43
20986: PUSH
20987: LD_INT 44
20989: PUSH
20990: LD_INT 46
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 1
21000: PPUSH
21001: LD_INT 3
21003: PPUSH
21004: CALL_OW 12
21008: ARRAY
21009: PPUSH
21010: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21014: LD_VAR 0 1
21018: PPUSH
21019: CALL_OW 266
21023: PUSH
21024: LD_INT 24
21026: EQUAL
21027: IFFALSE 21037
// russianAI = 1 ;
21029: LD_ADDR_EXP 27
21033: PUSH
21034: LD_INT 1
21036: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
21037: LD_EXP 31
21041: PUSH
21042: LD_INT 0
21044: GREATER
21045: IFFALSE 21119
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21047: LD_ADDR_EXP 31
21051: PUSH
21052: LD_EXP 31
21056: PPUSH
21057: LD_INT 1
21059: PPUSH
21060: CALL_OW 3
21064: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21065: LD_ADDR_EXP 31
21069: PUSH
21070: LD_EXP 31
21074: PPUSH
21075: LD_INT 1
21077: PPUSH
21078: CALL_OW 3
21082: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21083: LD_ADDR_EXP 31
21087: PUSH
21088: LD_EXP 31
21092: PPUSH
21093: LD_INT 1
21095: PPUSH
21096: CALL_OW 3
21100: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21101: LD_ADDR_EXP 31
21105: PUSH
21106: LD_EXP 31
21110: PPUSH
21111: LD_INT 1
21113: PPUSH
21114: CALL_OW 3
21118: ST_TO_ADDR
// end ; end ; end ;
21119: PPOPN 3
21121: END
// on UpgradeComplete ( building ) do var i ;
21122: LD_INT 0
21124: PPUSH
// begin if GetSide ( building ) = 3 then
21125: LD_VAR 0 1
21129: PPUSH
21130: CALL_OW 255
21134: PUSH
21135: LD_INT 3
21137: EQUAL
21138: IFFALSE 21319
// begin if GetBType ( building ) = b_factory then
21140: LD_VAR 0 1
21144: PPUSH
21145: CALL_OW 266
21149: PUSH
21150: LD_INT 3
21152: EQUAL
21153: IFFALSE 21220
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
21155: LD_ADDR_VAR 0 2
21159: PUSH
21160: LD_INT 22
21162: PUSH
21163: LD_INT 3
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 25
21172: PUSH
21173: LD_INT 3
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PPUSH
21184: CALL_OW 69
21188: PUSH
21189: FOR_IN
21190: IFFALSE 21208
// ComEnterUnit ( i , building ) ;
21192: LD_VAR 0 2
21196: PPUSH
21197: LD_VAR 0 1
21201: PPUSH
21202: CALL_OW 120
21206: GO 21189
21208: POP
21209: POP
// ruFab = building ;
21210: LD_ADDR_EXP 30
21214: PUSH
21215: LD_VAR 0 1
21219: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
21220: LD_VAR 0 1
21224: PPUSH
21225: CALL_OW 266
21229: PUSH
21230: LD_INT 8
21232: EQUAL
21233: IFFALSE 21290
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21235: LD_ADDR_VAR 0 2
21239: PUSH
21240: LD_INT 22
21242: PUSH
21243: LD_INT 3
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 25
21252: PUSH
21253: LD_INT 4
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PPUSH
21264: CALL_OW 69
21268: PUSH
21269: FOR_IN
21270: IFFALSE 21288
// ComEnterUnit ( i , building ) ;
21272: LD_VAR 0 2
21276: PPUSH
21277: LD_VAR 0 1
21281: PPUSH
21282: CALL_OW 120
21286: GO 21269
21288: POP
21289: POP
// if GetBType ( building ) = b_warehouse then
21290: LD_VAR 0 1
21294: PPUSH
21295: CALL_OW 266
21299: PUSH
21300: LD_INT 1
21302: EQUAL
21303: IFFALSE 21319
// begin ComEnterUnit ( Borodin , building ) ;
21305: LD_EXP 24
21309: PPUSH
21310: LD_VAR 0 1
21314: PPUSH
21315: CALL_OW 120
// end ; end ; end ;
21319: PPOPN 2
21321: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 247
21331: PUSH
21332: LD_INT 2
21334: EQUAL
21335: PUSH
21336: LD_VAR 0 1
21340: PPUSH
21341: CALL_OW 263
21345: PUSH
21346: LD_INT 3
21348: EQUAL
21349: AND
21350: PUSH
21351: LD_EXP 41
21355: PUSH
21356: LD_INT 0
21358: EQUAL
21359: AND
21360: IFFALSE 21478
// begin varEvent1 = 1 ;
21362: LD_ADDR_EXP 41
21366: PUSH
21367: LD_INT 1
21369: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
21370: LD_VAR 0 1
21374: PPUSH
21375: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
21379: LD_INT 22
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 21
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 2
21401: PUSH
21402: LD_INT 25
21404: PUSH
21405: LD_INT 1
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 25
21414: PUSH
21415: LD_INT 2
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 25
21424: PUSH
21425: LD_INT 3
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 25
21434: PUSH
21435: LD_INT 4
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: LIST
21453: PPUSH
21454: CALL_OW 69
21458: PUSH
21459: LD_EXP 1
21463: PUSH
21464: EMPTY
21465: LIST
21466: DIFF
21467: PPUSH
21468: LD_STRING DC-Sol1-1
21470: PPUSH
21471: LD_STRING DC-FSol1-1
21473: PPUSH
21474: CALL 7358 0 3
// end ; end ;
21478: PPOPN 1
21480: END
// on UnitDestroyed ( unit ) do var i ;
21481: LD_INT 0
21483: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
21484: LD_VAR 0 1
21488: PPUSH
21489: CALL 41600 0 1
// if unit = Joan then
21493: LD_VAR 0 1
21497: PUSH
21498: LD_EXP 15
21502: EQUAL
21503: IFFALSE 21512
// DeleteCharacters ( Joan ) ;
21505: LD_STRING Joan
21507: PPUSH
21508: CALL_OW 40
// if GetSide ( unit ) = 3 then
21512: LD_VAR 0 1
21516: PPUSH
21517: CALL_OW 255
21521: PUSH
21522: LD_INT 3
21524: EQUAL
21525: IFFALSE 22295
// begin if GetType ( unit ) = unit_building then
21527: LD_VAR 0 1
21531: PPUSH
21532: CALL_OW 247
21536: PUSH
21537: LD_INT 3
21539: EQUAL
21540: IFFALSE 22232
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
21542: LD_VAR 0 1
21546: PPUSH
21547: CALL_OW 266
21551: PUSH
21552: LD_INT 31
21554: EQUAL
21555: PUSH
21556: LD_VAR 0 1
21560: PPUSH
21561: CALL_OW 266
21565: PUSH
21566: LD_INT 32
21568: EQUAL
21569: OR
21570: PUSH
21571: LD_VAR 0 1
21575: PPUSH
21576: CALL_OW 266
21580: PUSH
21581: LD_INT 36
21583: EQUAL
21584: OR
21585: PUSH
21586: LD_VAR 0 1
21590: PPUSH
21591: CALL_OW 266
21595: PUSH
21596: LD_INT 0
21598: EQUAL
21599: OR
21600: PUSH
21601: LD_VAR 0 1
21605: PPUSH
21606: CALL_OW 266
21610: PUSH
21611: LD_INT 24
21613: EQUAL
21614: OR
21615: PUSH
21616: LD_VAR 0 1
21620: PPUSH
21621: CALL_OW 266
21625: PUSH
21626: LD_INT 17
21628: EQUAL
21629: OR
21630: PUSH
21631: LD_VAR 0 1
21635: PPUSH
21636: CALL_OW 266
21640: PUSH
21641: LD_INT 25
21643: EQUAL
21644: OR
21645: PUSH
21646: LD_VAR 0 1
21650: PPUSH
21651: CALL_OW 266
21655: PUSH
21656: LD_INT 19
21658: EQUAL
21659: OR
21660: PUSH
21661: LD_VAR 0 1
21665: PPUSH
21666: CALL_OW 266
21670: PUSH
21671: LD_INT 20
21673: EQUAL
21674: OR
21675: PUSH
21676: LD_VAR 0 1
21680: PPUSH
21681: CALL_OW 266
21685: PUSH
21686: LD_INT 18
21688: EQUAL
21689: OR
21690: PUSH
21691: LD_VAR 0 1
21695: PPUSH
21696: CALL_OW 266
21700: PUSH
21701: LD_INT 21
21703: EQUAL
21704: OR
21705: PUSH
21706: LD_VAR 0 1
21710: PPUSH
21711: CALL_OW 266
21715: PUSH
21716: LD_INT 23
21718: EQUAL
21719: OR
21720: PUSH
21721: LD_VAR 0 1
21725: PPUSH
21726: CALL_OW 266
21730: PUSH
21731: LD_INT 16
21733: EQUAL
21734: OR
21735: PUSH
21736: LD_VAR 0 1
21740: PPUSH
21741: CALL_OW 266
21745: PUSH
21746: LD_INT 6
21748: EQUAL
21749: OR
21750: PUSH
21751: LD_VAR 0 1
21755: PPUSH
21756: CALL_OW 266
21760: PUSH
21761: LD_INT 29
21763: EQUAL
21764: OR
21765: PUSH
21766: LD_VAR 0 1
21770: PPUSH
21771: CALL_OW 266
21775: PUSH
21776: LD_INT 26
21778: EQUAL
21779: OR
21780: PUSH
21781: LD_VAR 0 1
21785: PPUSH
21786: CALL_OW 266
21790: PUSH
21791: LD_INT 30
21793: EQUAL
21794: OR
21795: PUSH
21796: LD_VAR 0 1
21800: PPUSH
21801: CALL_OW 266
21805: PUSH
21806: LD_INT 28
21808: EQUAL
21809: OR
21810: PUSH
21811: LD_VAR 0 1
21815: PPUSH
21816: CALL_OW 266
21820: PUSH
21821: LD_INT 27
21823: EQUAL
21824: OR
21825: PUSH
21826: LD_VAR 0 1
21830: PPUSH
21831: CALL_OW 266
21835: PUSH
21836: LD_INT 33
21838: EQUAL
21839: OR
21840: PUSH
21841: LD_VAR 0 1
21845: PPUSH
21846: CALL_OW 266
21850: PUSH
21851: LD_INT 2
21853: EQUAL
21854: OR
21855: PUSH
21856: LD_VAR 0 1
21860: PPUSH
21861: CALL_OW 266
21865: PUSH
21866: LD_INT 4
21868: EQUAL
21869: OR
21870: IFFALSE 21956
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
21872: LD_ADDR_EXP 31
21876: PUSH
21877: LD_EXP 31
21881: PUSH
21882: LD_VAR 0 1
21886: PPUSH
21887: CALL_OW 266
21891: ADD
21892: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21893: LD_ADDR_EXP 31
21897: PUSH
21898: LD_EXP 31
21902: PUSH
21903: LD_VAR 0 1
21907: PPUSH
21908: CALL_OW 250
21912: ADD
21913: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21914: LD_ADDR_EXP 31
21918: PUSH
21919: LD_EXP 31
21923: PUSH
21924: LD_VAR 0 1
21928: PPUSH
21929: CALL_OW 251
21933: ADD
21934: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21935: LD_ADDR_EXP 31
21939: PUSH
21940: LD_EXP 31
21944: PUSH
21945: LD_VAR 0 1
21949: PPUSH
21950: CALL_OW 254
21954: ADD
21955: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
21956: LD_VAR 0 1
21960: PPUSH
21961: CALL_OW 266
21965: PUSH
21966: LD_INT 1
21968: EQUAL
21969: IFFALSE 22048
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
21971: LD_ADDR_EXP 31
21975: PUSH
21976: LD_EXP 31
21980: PUSH
21981: LD_INT 0
21983: ADD
21984: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21985: LD_ADDR_EXP 31
21989: PUSH
21990: LD_EXP 31
21994: PUSH
21995: LD_VAR 0 1
21999: PPUSH
22000: CALL_OW 250
22004: ADD
22005: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22006: LD_ADDR_EXP 31
22010: PUSH
22011: LD_EXP 31
22015: PUSH
22016: LD_VAR 0 1
22020: PPUSH
22021: CALL_OW 251
22025: ADD
22026: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22027: LD_ADDR_EXP 31
22031: PUSH
22032: LD_EXP 31
22036: PUSH
22037: LD_VAR 0 1
22041: PPUSH
22042: CALL_OW 254
22046: ADD
22047: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
22048: LD_VAR 0 1
22052: PPUSH
22053: CALL_OW 266
22057: PUSH
22058: LD_INT 3
22060: EQUAL
22061: IFFALSE 22140
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
22063: LD_ADDR_EXP 31
22067: PUSH
22068: LD_EXP 31
22072: PUSH
22073: LD_INT 2
22075: ADD
22076: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22077: LD_ADDR_EXP 31
22081: PUSH
22082: LD_EXP 31
22086: PUSH
22087: LD_VAR 0 1
22091: PPUSH
22092: CALL_OW 250
22096: ADD
22097: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22098: LD_ADDR_EXP 31
22102: PUSH
22103: LD_EXP 31
22107: PUSH
22108: LD_VAR 0 1
22112: PPUSH
22113: CALL_OW 251
22117: ADD
22118: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22119: LD_ADDR_EXP 31
22123: PUSH
22124: LD_EXP 31
22128: PUSH
22129: LD_VAR 0 1
22133: PPUSH
22134: CALL_OW 254
22138: ADD
22139: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
22140: LD_VAR 0 1
22144: PPUSH
22145: CALL_OW 266
22149: PUSH
22150: LD_INT 5
22152: EQUAL
22153: IFFALSE 22232
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
22155: LD_ADDR_EXP 31
22159: PUSH
22160: LD_EXP 31
22164: PUSH
22165: LD_INT 4
22167: ADD
22168: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22169: LD_ADDR_EXP 31
22173: PUSH
22174: LD_EXP 31
22178: PUSH
22179: LD_VAR 0 1
22183: PPUSH
22184: CALL_OW 250
22188: ADD
22189: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22190: LD_ADDR_EXP 31
22194: PUSH
22195: LD_EXP 31
22199: PUSH
22200: LD_VAR 0 1
22204: PPUSH
22205: CALL_OW 251
22209: ADD
22210: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22211: LD_ADDR_EXP 31
22215: PUSH
22216: LD_EXP 31
22220: PUSH
22221: LD_VAR 0 1
22225: PPUSH
22226: CALL_OW 254
22230: ADD
22231: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
22232: LD_VAR 0 1
22236: PPUSH
22237: CALL_OW 247
22241: PUSH
22242: LD_INT 1
22244: EQUAL
22245: IFFALSE 22295
// begin for i in defenders_list do
22247: LD_ADDR_VAR 0 2
22251: PUSH
22252: LD_EXP 32
22256: PUSH
22257: FOR_IN
22258: IFFALSE 22293
// if i = unit then
22260: LD_VAR 0 2
22264: PUSH
22265: LD_VAR 0 1
22269: EQUAL
22270: IFFALSE 22291
// defenders_list = defenders_list diff [ unit ] ;
22272: LD_ADDR_EXP 32
22276: PUSH
22277: LD_EXP 32
22281: PUSH
22282: LD_VAR 0 1
22286: PUSH
22287: EMPTY
22288: LIST
22289: DIFF
22290: ST_TO_ADDR
22291: GO 22257
22293: POP
22294: POP
// end ; end ; end ;
22295: PPOPN 2
22297: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
22298: LD_VAR 0 1
22302: PPUSH
22303: LD_VAR 0 2
22307: PPUSH
22308: CALL 41722 0 2
// end ;
22312: PPOPN 2
22314: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
22315: LD_VAR 0 1
22319: PPUSH
22320: CALL 41706 0 1
// end ; end_of_file
22324: PPOPN 1
22326: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
22327: GO 22329
22329: DISABLE
22330: LD_INT 0
22332: PPUSH
// begin enemyWayX = [ ] ;
22333: LD_ADDR_EXP 46
22337: PUSH
22338: EMPTY
22339: ST_TO_ADDR
// enemyWayY = [ ] ;
22340: LD_ADDR_EXP 47
22344: PUSH
22345: EMPTY
22346: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
22347: LD_ADDR_VAR 0 1
22351: PUSH
22352: LD_INT 1
22354: PPUSH
22355: LD_INT 3
22357: PPUSH
22358: CALL_OW 12
22362: ST_TO_ADDR
// if rnd = 1 then
22363: LD_VAR 0 1
22367: PUSH
22368: LD_INT 1
22370: EQUAL
22371: IFFALSE 22411
// begin enemyWayX = [ 73 , 46 , 29 ] ;
22373: LD_ADDR_EXP 46
22377: PUSH
22378: LD_INT 73
22380: PUSH
22381: LD_INT 46
22383: PUSH
22384: LD_INT 29
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: LIST
22391: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
22392: LD_ADDR_EXP 47
22396: PUSH
22397: LD_INT 71
22399: PUSH
22400: LD_INT 43
22402: PUSH
22403: LD_INT 29
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: LIST
22410: ST_TO_ADDR
// end ; if rnd = 2 then
22411: LD_VAR 0 1
22415: PUSH
22416: LD_INT 2
22418: EQUAL
22419: IFFALSE 22443
// begin enemyWayX = [ 64 ] ;
22421: LD_ADDR_EXP 46
22425: PUSH
22426: LD_INT 64
22428: PUSH
22429: EMPTY
22430: LIST
22431: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
22432: LD_ADDR_EXP 47
22436: PUSH
22437: LD_INT 43
22439: PUSH
22440: EMPTY
22441: LIST
22442: ST_TO_ADDR
// end ; if rnd = 3 then
22443: LD_VAR 0 1
22447: PUSH
22448: LD_INT 3
22450: EQUAL
22451: IFFALSE 22475
// begin enemyWayX = [ 80 ] ;
22453: LD_ADDR_EXP 46
22457: PUSH
22458: LD_INT 80
22460: PUSH
22461: EMPTY
22462: LIST
22463: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
22464: LD_ADDR_EXP 47
22468: PUSH
22469: LD_INT 28
22471: PUSH
22472: EMPTY
22473: LIST
22474: ST_TO_ADDR
// end ; enable ;
22475: ENABLE
// end ;
22476: PPOPN 1
22478: END
// every 0 0$1 do
22479: GO 22481
22481: DISABLE
// begin enable ;
22482: ENABLE
// if escapeAvalaible = 0 then
22483: LD_EXP 36
22487: PUSH
22488: LD_INT 0
22490: EQUAL
22491: IFFALSE 22503
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
22493: LD_INT 3
22495: PPUSH
22496: LD_INT 6
22498: PPUSH
22499: CALL 8769 0 2
// if escapeAvalaible = 0 then
22503: LD_EXP 36
22507: PUSH
22508: LD_INT 0
22510: EQUAL
22511: IFFALSE 22523
// DefenseBase ( 1 , RussianBaseTerritory ) ;
22513: LD_INT 1
22515: PPUSH
22516: LD_INT 24
22518: PPUSH
22519: CALL 9429 0 2
// if russianAI = 1 then
22523: LD_EXP 27
22527: PUSH
22528: LD_INT 1
22530: EQUAL
22531: IFFALSE 22601
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
22533: LD_INT 3
22535: PPUSH
22536: LD_INT 7
22538: PPUSH
22539: LD_INT 6
22541: PPUSH
22542: LD_EXP 29
22546: PPUSH
22547: CALL 11871 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
22551: LD_INT 3
22553: PPUSH
22554: LD_EXP 28
22558: PPUSH
22559: LD_INT 6
22561: PPUSH
22562: LD_EXP 31
22566: PPUSH
22567: CALL 11465 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
22571: LD_INT 3
22573: PPUSH
22574: LD_INT 26
22576: PPUSH
22577: LD_EXP 46
22581: PPUSH
22582: LD_EXP 47
22586: PPUSH
22587: CALL 10329 0 4
// AttackNearBuildings ( 3 , 1 ) ;
22591: LD_INT 3
22593: PPUSH
22594: LD_INT 1
22596: PPUSH
22597: CALL 12415 0 2
// end ; if SikorskyArrive = 1 then
22601: LD_EXP 18
22605: PUSH
22606: LD_INT 1
22608: EQUAL
22609: IFFALSE 22627
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
22611: LD_INT 3
22613: PPUSH
22614: LD_INT 10
22616: PPUSH
22617: LD_INT 53
22619: PPUSH
22620: LD_INT 59
22622: PPUSH
22623: CALL 10126 0 4
// end ;
22627: END
// every 0 0$1 trigger russianAI = 1 do var i ;
22628: LD_EXP 27
22632: PUSH
22633: LD_INT 1
22635: EQUAL
22636: IFFALSE 22912
22638: GO 22640
22640: DISABLE
22641: LD_INT 0
22643: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22644: LD_ADDR_VAR 0 1
22648: PUSH
22649: LD_INT 22
22651: PUSH
22652: LD_INT 3
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 21
22661: PUSH
22662: LD_INT 3
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 30
22671: PUSH
22672: LD_INT 32
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 3
22681: PUSH
22682: LD_INT 2
22684: PUSH
22685: LD_INT 35
22687: PUSH
22688: LD_INT 43
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 35
22697: PUSH
22698: LD_INT 44
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 35
22707: PUSH
22708: LD_INT 46
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: PPUSH
22731: CALL_OW 69
22735: PUSH
22736: FOR_IN
22737: IFFALSE 22776
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22739: LD_VAR 0 1
22743: PPUSH
22744: LD_INT 43
22746: PUSH
22747: LD_INT 44
22749: PUSH
22750: LD_INT 46
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 1
22760: PPUSH
22761: LD_INT 3
22763: PPUSH
22764: CALL_OW 12
22768: ARRAY
22769: PPUSH
22770: CALL_OW 431
22774: GO 22736
22776: POP
22777: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22778: LD_ADDR_VAR 0 1
22782: PUSH
22783: LD_INT 22
22785: PUSH
22786: LD_INT 3
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 21
22795: PUSH
22796: LD_INT 3
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 30
22805: PUSH
22806: LD_INT 33
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 3
22815: PUSH
22816: LD_INT 2
22818: PUSH
22819: LD_INT 35
22821: PUSH
22822: LD_INT 43
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 35
22831: PUSH
22832: LD_INT 44
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 35
22841: PUSH
22842: LD_INT 46
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: PPUSH
22865: CALL_OW 69
22869: PUSH
22870: FOR_IN
22871: IFFALSE 22910
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22873: LD_VAR 0 1
22877: PPUSH
22878: LD_INT 43
22880: PUSH
22881: LD_INT 44
22883: PUSH
22884: LD_INT 46
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 1
22894: PPUSH
22895: LD_INT 3
22897: PPUSH
22898: CALL_OW 12
22902: ARRAY
22903: PPUSH
22904: CALL_OW 431
22908: GO 22870
22910: POP
22911: POP
// end ;
22912: PPOPN 1
22914: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
22915: LD_EXP 24
22919: PPUSH
22920: CALL_OW 310
22924: NOT
22925: PUSH
22926: LD_EXP 28
22930: PPUSH
22931: CALL_OW 302
22935: AND
22936: PUSH
22937: LD_EXP 28
22941: PPUSH
22942: CALL_OW 255
22946: PUSH
22947: LD_INT 3
22949: EQUAL
22950: AND
22951: IFFALSE 22971
22953: GO 22955
22955: DISABLE
// begin enable ;
22956: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
22957: LD_EXP 24
22961: PPUSH
22962: LD_EXP 28
22966: PPUSH
22967: CALL_OW 120
// end ;
22971: END
// every 0 0$1 trigger SikorskyAI = 1 do
22972: LD_EXP 20
22976: PUSH
22977: LD_INT 1
22979: EQUAL
22980: IFFALSE 23015
22982: GO 22984
22984: DISABLE
// begin enable ;
22985: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
22986: LD_INT 4
22988: PPUSH
22989: LD_INT 10
22991: PPUSH
22992: LD_INT 93
22994: PPUSH
22995: LD_INT 93
22997: PPUSH
22998: CALL 10126 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
23002: LD_INT 4
23004: PPUSH
23005: LD_INT 11
23007: PPUSH
23008: LD_INT 3
23010: PPUSH
23011: CALL 16627 0 3
// end ;
23015: END
// every 0 0$1 trigger SikorskyAI = 1 do
23016: LD_EXP 20
23020: PUSH
23021: LD_INT 1
23023: EQUAL
23024: IFFALSE 23036
23026: GO 23028
23028: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
23029: LD_INT 4
23031: PPUSH
23032: CALL 11137 0 1
23036: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
23037: LD_EXP 27
23041: PUSH
23042: LD_INT 1
23044: EQUAL
23045: PUSH
23046: LD_EXP 30
23050: PPUSH
23051: CALL_OW 302
23055: AND
23056: PUSH
23057: LD_EXP 30
23061: PPUSH
23062: CALL_OW 255
23066: PUSH
23067: LD_INT 3
23069: EQUAL
23070: AND
23071: PUSH
23072: LD_INT 22
23074: PUSH
23075: LD_INT 3
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 21
23084: PUSH
23085: LD_INT 2
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: LD_INT 33
23094: PUSH
23095: LD_INT 3
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: LIST
23106: PPUSH
23107: CALL_OW 69
23111: PUSH
23112: LD_INT 0
23114: EQUAL
23115: AND
23116: IFFALSE 23350
23118: GO 23120
23120: DISABLE
// begin enable ;
23121: ENABLE
// if Difficulty = 1 then
23122: LD_OWVAR 67
23126: PUSH
23127: LD_INT 1
23129: EQUAL
23130: IFFALSE 23198
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
23132: LD_INT 3
23134: PPUSH
23135: LD_EXP 30
23139: PPUSH
23140: LD_INT 5
23142: PPUSH
23143: LD_INT 8
23145: PPUSH
23146: CALL_OW 12
23150: PPUSH
23151: LD_INT 43
23153: PUSH
23154: LD_INT 43
23156: PUSH
23157: LD_INT 43
23159: PUSH
23160: LD_INT 43
23162: PUSH
23163: LD_INT 44
23165: PUSH
23166: LD_INT 44
23168: PUSH
23169: LD_INT 44
23171: PUSH
23172: LD_INT 46
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: PPUSH
23185: LD_INT 1
23187: PPUSH
23188: LD_INT 3
23190: PPUSH
23191: LD_INT 24
23193: PPUSH
23194: CALL 9972 0 7
// if Difficulty = 2 then
23198: LD_OWVAR 67
23202: PUSH
23203: LD_INT 2
23205: EQUAL
23206: IFFALSE 23274
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
23208: LD_INT 3
23210: PPUSH
23211: LD_EXP 30
23215: PPUSH
23216: LD_INT 6
23218: PPUSH
23219: LD_INT 8
23221: PPUSH
23222: CALL_OW 12
23226: PPUSH
23227: LD_INT 43
23229: PUSH
23230: LD_INT 43
23232: PUSH
23233: LD_INT 44
23235: PUSH
23236: LD_INT 44
23238: PUSH
23239: LD_INT 44
23241: PUSH
23242: LD_INT 44
23244: PUSH
23245: LD_INT 46
23247: PUSH
23248: LD_INT 46
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: PPUSH
23261: LD_INT 1
23263: PPUSH
23264: LD_INT 3
23266: PPUSH
23267: LD_INT 24
23269: PPUSH
23270: CALL 9972 0 7
// if Difficulty >= 3 then
23274: LD_OWVAR 67
23278: PUSH
23279: LD_INT 3
23281: GREATEREQUAL
23282: IFFALSE 23350
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
23284: LD_INT 3
23286: PPUSH
23287: LD_EXP 30
23291: PPUSH
23292: LD_INT 7
23294: PPUSH
23295: LD_INT 8
23297: PPUSH
23298: CALL_OW 12
23302: PPUSH
23303: LD_INT 43
23305: PUSH
23306: LD_INT 43
23308: PUSH
23309: LD_INT 44
23311: PUSH
23312: LD_INT 44
23314: PUSH
23315: LD_INT 44
23317: PUSH
23318: LD_INT 46
23320: PUSH
23321: LD_INT 46
23323: PUSH
23324: LD_INT 46
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: PPUSH
23337: LD_INT 1
23339: PPUSH
23340: LD_INT 3
23342: PPUSH
23343: LD_INT 24
23345: PPUSH
23346: CALL 9972 0 7
// end ;
23350: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
23351: LD_EXP 38
23355: PUSH
23356: LD_INT 1
23358: EQUAL
23359: IFFALSE 23441
23361: GO 23363
23363: DISABLE
23364: LD_INT 0
23366: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
23367: LD_ADDR_VAR 0 1
23371: PUSH
23372: LD_INT 22
23374: PUSH
23375: LD_INT 1
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 21
23384: PUSH
23385: LD_INT 1
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 3
23394: PUSH
23395: LD_INT 24
23397: PUSH
23398: LD_INT 650
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: LIST
23413: PPUSH
23414: CALL_OW 69
23418: PUSH
23419: FOR_IN
23420: IFFALSE 23439
// ComMoveXY ( i , 51 , 12 ) ;
23422: LD_VAR 0 1
23426: PPUSH
23427: LD_INT 51
23429: PPUSH
23430: LD_INT 12
23432: PPUSH
23433: CALL_OW 111
23437: GO 23419
23439: POP
23440: POP
// end ; end_of_file
23441: PPOPN 1
23443: END
// every 1 1$20 trigger firstAttack = 1 do
23444: LD_EXP 33
23448: PUSH
23449: LD_INT 1
23451: EQUAL
23452: IFFALSE 23562
23454: GO 23456
23456: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 6 ) , rand ( 5 , 6 ) , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23457: LD_INT 6
23459: PPUSH
23460: LD_INT 3
23462: PPUSH
23463: LD_INT 3
23465: PPUSH
23466: LD_INT 4
23468: PPUSH
23469: CALL_OW 12
23473: PUSH
23474: LD_INT 4
23476: PPUSH
23477: LD_INT 6
23479: PPUSH
23480: CALL_OW 12
23484: PUSH
23485: LD_INT 5
23487: PPUSH
23488: LD_INT 6
23490: PPUSH
23491: CALL_OW 12
23495: PUSH
23496: LD_INT 6
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: PUSH
23505: LD_OWVAR 67
23509: ARRAY
23510: PPUSH
23511: LD_INT 0
23513: PPUSH
23514: LD_INT 0
23516: PPUSH
23517: LD_INT 0
23519: PPUSH
23520: LD_INT 0
23522: PPUSH
23523: LD_EXP 25
23527: PPUSH
23528: LD_EXP 26
23532: PPUSH
23533: CALL_OW 12
23537: PPUSH
23538: LD_INT 16
23540: PPUSH
23541: LD_INT 7
23543: PPUSH
23544: LD_INT 1
23546: PPUSH
23547: LD_INT 1
23549: PPUSH
23550: LD_INT 3
23552: PPUSH
23553: CALL_OW 12
23557: PPUSH
23558: CALL 12645 0 12
23562: END
// every 1 1$40 trigger firstAttack = 1 do
23563: LD_EXP 33
23567: PUSH
23568: LD_INT 1
23570: EQUAL
23571: IFFALSE 23667
23573: GO 23575
23575: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23576: LD_INT 16
23578: PPUSH
23579: LD_INT 6
23581: PPUSH
23582: LD_INT 3
23584: PPUSH
23585: LD_INT 4
23587: PPUSH
23588: CALL_OW 12
23592: PUSH
23593: LD_INT 4
23595: PPUSH
23596: LD_INT 5
23598: PPUSH
23599: CALL_OW 12
23603: PUSH
23604: LD_INT 5
23606: PUSH
23607: LD_INT 6
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: PUSH
23616: LD_OWVAR 67
23620: ARRAY
23621: PPUSH
23622: LD_EXP 25
23626: PPUSH
23627: LD_EXP 26
23631: PPUSH
23632: CALL_OW 12
23636: PPUSH
23637: LD_INT 3
23639: PPUSH
23640: LD_INT 1
23642: PPUSH
23643: LD_INT 3
23645: PPUSH
23646: LD_INT 44
23648: PUSH
23649: LD_INT 46
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PPUSH
23656: EMPTY
23657: PPUSH
23658: EMPTY
23659: PPUSH
23660: LD_INT 1
23662: PPUSH
23663: CALL 14938 0 11
23667: END
// every 6 6$40 trigger firstAttack = 1 and JMMArrive = 0 do
23668: LD_EXP 33
23672: PUSH
23673: LD_INT 1
23675: EQUAL
23676: PUSH
23677: LD_EXP 39
23681: PUSH
23682: LD_INT 0
23684: EQUAL
23685: AND
23686: IFFALSE 23796
23688: GO 23690
23690: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23691: LD_INT 6
23693: PPUSH
23694: LD_INT 3
23696: PPUSH
23697: LD_INT 4
23699: PPUSH
23700: LD_INT 5
23702: PPUSH
23703: CALL_OW 12
23707: PUSH
23708: LD_INT 5
23710: PPUSH
23711: LD_INT 6
23713: PPUSH
23714: CALL_OW 12
23718: PUSH
23719: LD_INT 5
23721: PPUSH
23722: LD_INT 6
23724: PPUSH
23725: CALL_OW 12
23729: PUSH
23730: LD_INT 6
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: PUSH
23739: LD_OWVAR 67
23743: ARRAY
23744: PPUSH
23745: LD_INT 0
23747: PPUSH
23748: LD_INT 0
23750: PPUSH
23751: LD_INT 0
23753: PPUSH
23754: LD_INT 0
23756: PPUSH
23757: LD_EXP 25
23761: PPUSH
23762: LD_EXP 26
23766: PPUSH
23767: CALL_OW 12
23771: PPUSH
23772: LD_INT 16
23774: PPUSH
23775: LD_INT 7
23777: PPUSH
23778: LD_INT 1
23780: PPUSH
23781: LD_INT 1
23783: PPUSH
23784: LD_INT 3
23786: PPUSH
23787: CALL_OW 12
23791: PPUSH
23792: CALL 12645 0 12
23796: END
// every 6 6$50 trigger firstAttack = 1 and JMMArrive = 0 do
23797: LD_EXP 33
23801: PUSH
23802: LD_INT 1
23804: EQUAL
23805: PUSH
23806: LD_EXP 39
23810: PUSH
23811: LD_INT 0
23813: EQUAL
23814: AND
23815: IFFALSE 23915
23817: GO 23819
23819: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23820: LD_INT 16
23822: PPUSH
23823: LD_INT 6
23825: PPUSH
23826: LD_INT 4
23828: PPUSH
23829: LD_INT 5
23831: PPUSH
23832: CALL_OW 12
23836: PUSH
23837: LD_INT 6
23839: PPUSH
23840: LD_INT 7
23842: PPUSH
23843: CALL_OW 12
23847: PUSH
23848: LD_INT 7
23850: PUSH
23851: LD_INT 7
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: PUSH
23860: LD_OWVAR 67
23864: ARRAY
23865: PPUSH
23866: LD_EXP 25
23870: PPUSH
23871: LD_EXP 26
23875: PPUSH
23876: CALL_OW 12
23880: PPUSH
23881: LD_INT 3
23883: PPUSH
23884: LD_INT 1
23886: PPUSH
23887: LD_INT 3
23889: PPUSH
23890: LD_INT 43
23892: PUSH
23893: LD_INT 44
23895: PUSH
23896: LD_INT 46
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: LIST
23903: PPUSH
23904: EMPTY
23905: PPUSH
23906: EMPTY
23907: PPUSH
23908: LD_INT 1
23910: PPUSH
23911: CALL 14938 0 11
23915: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
23916: LD_EXP 33
23920: PUSH
23921: LD_INT 1
23923: EQUAL
23924: PUSH
23925: LD_EXP 39
23929: PUSH
23930: LD_INT 0
23932: EQUAL
23933: AND
23934: IFFALSE 24034
23936: GO 23938
23938: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 , 8 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23939: LD_INT 16
23941: PPUSH
23942: LD_INT 6
23944: PPUSH
23945: LD_INT 4
23947: PPUSH
23948: LD_INT 5
23950: PPUSH
23951: CALL_OW 12
23955: PUSH
23956: LD_INT 6
23958: PPUSH
23959: LD_INT 7
23961: PPUSH
23962: CALL_OW 12
23966: PUSH
23967: LD_INT 7
23969: PUSH
23970: LD_INT 8
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: PUSH
23979: LD_OWVAR 67
23983: ARRAY
23984: PPUSH
23985: LD_EXP 25
23989: PPUSH
23990: LD_EXP 26
23994: PPUSH
23995: CALL_OW 12
23999: PPUSH
24000: LD_INT 3
24002: PPUSH
24003: LD_INT 1
24005: PPUSH
24006: LD_INT 3
24008: PPUSH
24009: LD_INT 43
24011: PUSH
24012: LD_INT 44
24014: PUSH
24015: LD_INT 46
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: LIST
24022: PPUSH
24023: EMPTY
24024: PPUSH
24025: EMPTY
24026: PPUSH
24027: LD_INT 1
24029: PPUSH
24030: CALL 14938 0 11
24034: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
24035: LD_EXP 33
24039: PUSH
24040: LD_INT 1
24042: EQUAL
24043: PUSH
24044: LD_EXP 39
24048: PUSH
24049: LD_INT 0
24051: EQUAL
24052: AND
24053: IFFALSE 24133
24055: GO 24057
24057: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 4 , 6 , 7 , 8 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24058: LD_INT 16
24060: PPUSH
24061: LD_INT 6
24063: PPUSH
24064: LD_INT 4
24066: PUSH
24067: LD_INT 6
24069: PUSH
24070: LD_INT 7
24072: PUSH
24073: LD_INT 8
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: PUSH
24082: LD_OWVAR 67
24086: ARRAY
24087: PPUSH
24088: LD_EXP 25
24092: PPUSH
24093: LD_EXP 26
24097: PPUSH
24098: CALL_OW 12
24102: PPUSH
24103: LD_INT 3
24105: PPUSH
24106: LD_INT 1
24108: PPUSH
24109: LD_INT 3
24111: PPUSH
24112: LD_INT 44
24114: PUSH
24115: LD_INT 46
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PPUSH
24122: EMPTY
24123: PPUSH
24124: EMPTY
24125: PPUSH
24126: LD_INT 1
24128: PPUSH
24129: CALL 14938 0 11
24133: END
// every 1 1$00 trigger secondAttack = 1 do
24134: LD_EXP 34
24138: PUSH
24139: LD_INT 1
24141: EQUAL
24142: IFFALSE 24228
24144: GO 24146
24146: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24147: LD_INT 6
24149: PPUSH
24150: LD_INT 3
24152: PPUSH
24153: LD_INT 3
24155: PUSH
24156: LD_INT 4
24158: PUSH
24159: LD_INT 5
24161: PUSH
24162: LD_INT 6
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: PUSH
24171: LD_OWVAR 67
24175: ARRAY
24176: PPUSH
24177: LD_INT 0
24179: PPUSH
24180: LD_INT 0
24182: PPUSH
24183: LD_INT 0
24185: PPUSH
24186: LD_INT 0
24188: PPUSH
24189: LD_EXP 25
24193: PPUSH
24194: LD_EXP 26
24198: PPUSH
24199: CALL_OW 12
24203: PPUSH
24204: LD_INT 16
24206: PPUSH
24207: LD_INT 7
24209: PPUSH
24210: LD_INT 1
24212: PPUSH
24213: LD_INT 1
24215: PPUSH
24216: LD_INT 3
24218: PPUSH
24219: CALL_OW 12
24223: PPUSH
24224: CALL 12645 0 12
24228: END
// every 1 1$00 trigger secondAttack = 1 do
24229: LD_EXP 34
24233: PUSH
24234: LD_INT 1
24236: EQUAL
24237: IFFALSE 24345
24239: GO 24241
24241: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
24242: LD_INT 16
24244: PPUSH
24245: LD_INT 6
24247: PPUSH
24248: LD_INT 5
24250: PPUSH
24251: LD_INT 6
24253: PPUSH
24254: CALL_OW 12
24258: PUSH
24259: LD_INT 6
24261: PPUSH
24262: LD_INT 9
24264: PPUSH
24265: CALL_OW 12
24269: PUSH
24270: LD_INT 7
24272: PPUSH
24273: LD_INT 9
24275: PPUSH
24276: CALL_OW 12
24280: PUSH
24281: LD_INT 9
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: PUSH
24290: LD_OWVAR 67
24294: ARRAY
24295: PPUSH
24296: LD_EXP 25
24300: PPUSH
24301: LD_EXP 26
24305: PPUSH
24306: CALL_OW 12
24310: PPUSH
24311: LD_INT 3
24313: PPUSH
24314: LD_INT 1
24316: PPUSH
24317: LD_INT 3
24319: PPUSH
24320: LD_INT 43
24322: PUSH
24323: LD_INT 44
24325: PUSH
24326: LD_INT 46
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: LIST
24333: PPUSH
24334: EMPTY
24335: PPUSH
24336: EMPTY
24337: PPUSH
24338: LD_INT 1
24340: PPUSH
24341: CALL 14938 0 11
24345: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24346: LD_EXP 18
24350: PUSH
24351: LD_INT 0
24353: EQUAL
24354: IFFALSE 24436
24356: GO 24358
24358: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24359: LD_INT 6
24361: PPUSH
24362: LD_INT 3
24364: PPUSH
24365: LD_INT 3
24367: PUSH
24368: LD_INT 4
24370: PUSH
24371: LD_INT 5
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: LIST
24378: PUSH
24379: LD_OWVAR 67
24383: ARRAY
24384: PPUSH
24385: LD_INT 0
24387: PPUSH
24388: LD_INT 0
24390: PPUSH
24391: LD_INT 0
24393: PPUSH
24394: LD_INT 0
24396: PPUSH
24397: LD_EXP 25
24401: PPUSH
24402: LD_EXP 26
24406: PPUSH
24407: CALL_OW 12
24411: PPUSH
24412: LD_INT 16
24414: PPUSH
24415: LD_INT 7
24417: PPUSH
24418: LD_INT 1
24420: PPUSH
24421: LD_INT 1
24423: PPUSH
24424: LD_INT 3
24426: PPUSH
24427: CALL_OW 12
24431: PPUSH
24432: CALL 12645 0 12
24436: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24437: LD_EXP 18
24441: PUSH
24442: LD_INT 0
24444: EQUAL
24445: IFFALSE 24549
24447: GO 24449
24449: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24450: LD_INT 16
24452: PPUSH
24453: LD_INT 6
24455: PPUSH
24456: LD_INT 5
24458: PPUSH
24459: LD_INT 6
24461: PPUSH
24462: CALL_OW 12
24466: PUSH
24467: LD_INT 6
24469: PPUSH
24470: LD_INT 9
24472: PPUSH
24473: CALL_OW 12
24477: PUSH
24478: LD_INT 7
24480: PPUSH
24481: LD_INT 9
24483: PPUSH
24484: CALL_OW 12
24488: PUSH
24489: LD_INT 9
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: PUSH
24498: LD_OWVAR 67
24502: ARRAY
24503: PPUSH
24504: LD_EXP 25
24508: PPUSH
24509: LD_EXP 26
24513: PPUSH
24514: CALL_OW 12
24518: PPUSH
24519: LD_INT 3
24521: PPUSH
24522: LD_INT 1
24524: PPUSH
24525: LD_INT 3
24527: PPUSH
24528: LD_INT 44
24530: PUSH
24531: LD_INT 46
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PPUSH
24538: EMPTY
24539: PPUSH
24540: EMPTY
24541: PPUSH
24542: LD_INT 1
24544: PPUSH
24545: CALL 14938 0 11
24549: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24550: LD_EXP 18
24554: PUSH
24555: LD_INT 0
24557: EQUAL
24558: IFFALSE 24640
24560: GO 24562
24562: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24563: LD_INT 6
24565: PPUSH
24566: LD_INT 3
24568: PPUSH
24569: LD_INT 3
24571: PUSH
24572: LD_INT 4
24574: PUSH
24575: LD_INT 5
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: LIST
24582: PUSH
24583: LD_OWVAR 67
24587: ARRAY
24588: PPUSH
24589: LD_INT 0
24591: PPUSH
24592: LD_INT 0
24594: PPUSH
24595: LD_INT 0
24597: PPUSH
24598: LD_INT 0
24600: PPUSH
24601: LD_EXP 25
24605: PPUSH
24606: LD_EXP 26
24610: PPUSH
24611: CALL_OW 12
24615: PPUSH
24616: LD_INT 16
24618: PPUSH
24619: LD_INT 7
24621: PPUSH
24622: LD_INT 1
24624: PPUSH
24625: LD_INT 1
24627: PPUSH
24628: LD_INT 3
24630: PPUSH
24631: CALL_OW 12
24635: PPUSH
24636: CALL 12645 0 12
24640: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24641: LD_EXP 18
24645: PUSH
24646: LD_INT 0
24648: EQUAL
24649: IFFALSE 24753
24651: GO 24653
24653: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24654: LD_INT 16
24656: PPUSH
24657: LD_INT 6
24659: PPUSH
24660: LD_INT 5
24662: PPUSH
24663: LD_INT 6
24665: PPUSH
24666: CALL_OW 12
24670: PUSH
24671: LD_INT 6
24673: PPUSH
24674: LD_INT 9
24676: PPUSH
24677: CALL_OW 12
24681: PUSH
24682: LD_INT 7
24684: PPUSH
24685: LD_INT 9
24687: PPUSH
24688: CALL_OW 12
24692: PUSH
24693: LD_INT 9
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: PUSH
24702: LD_OWVAR 67
24706: ARRAY
24707: PPUSH
24708: LD_EXP 25
24712: PPUSH
24713: LD_EXP 26
24717: PPUSH
24718: CALL_OW 12
24722: PPUSH
24723: LD_INT 3
24725: PPUSH
24726: LD_INT 1
24728: PPUSH
24729: LD_INT 3
24731: PPUSH
24732: LD_INT 44
24734: PUSH
24735: LD_INT 46
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PPUSH
24742: EMPTY
24743: PPUSH
24744: EMPTY
24745: PPUSH
24746: LD_INT 1
24748: PPUSH
24749: CALL 14938 0 11
24753: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24754: LD_EXP 18
24758: PUSH
24759: LD_INT 0
24761: EQUAL
24762: IFFALSE 24848
24764: GO 24766
24766: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24767: LD_INT 6
24769: PPUSH
24770: LD_INT 3
24772: PPUSH
24773: LD_INT 3
24775: PUSH
24776: LD_INT 4
24778: PUSH
24779: LD_INT 5
24781: PUSH
24782: LD_INT 6
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: PUSH
24791: LD_OWVAR 67
24795: ARRAY
24796: PPUSH
24797: LD_INT 0
24799: PPUSH
24800: LD_INT 0
24802: PPUSH
24803: LD_INT 0
24805: PPUSH
24806: LD_INT 0
24808: PPUSH
24809: LD_EXP 25
24813: PPUSH
24814: LD_EXP 26
24818: PPUSH
24819: CALL_OW 12
24823: PPUSH
24824: LD_INT 16
24826: PPUSH
24827: LD_INT 7
24829: PPUSH
24830: LD_INT 1
24832: PPUSH
24833: LD_INT 1
24835: PPUSH
24836: LD_INT 3
24838: PPUSH
24839: CALL_OW 12
24843: PPUSH
24844: CALL 12645 0 12
24848: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24849: LD_EXP 18
24853: PUSH
24854: LD_INT 0
24856: EQUAL
24857: IFFALSE 24937
24859: GO 24861
24861: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
24862: LD_INT 16
24864: PPUSH
24865: LD_INT 6
24867: PPUSH
24868: LD_INT 7
24870: PUSH
24871: LD_INT 8
24873: PUSH
24874: LD_INT 9
24876: PUSH
24877: LD_INT 10
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: PUSH
24886: LD_OWVAR 67
24890: ARRAY
24891: PPUSH
24892: LD_EXP 25
24896: PPUSH
24897: LD_EXP 26
24901: PPUSH
24902: CALL_OW 12
24906: PPUSH
24907: LD_INT 3
24909: PPUSH
24910: LD_INT 1
24912: PPUSH
24913: LD_INT 3
24915: PPUSH
24916: LD_INT 44
24918: PUSH
24919: LD_INT 46
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PPUSH
24926: EMPTY
24927: PPUSH
24928: EMPTY
24929: PPUSH
24930: LD_INT 1
24932: PPUSH
24933: CALL 14938 0 11
24937: END
// every 0 0$1 trigger timerStatus = 1 do
24938: LD_EXP 35
24942: PUSH
24943: LD_INT 1
24945: EQUAL
24946: IFFALSE 25006
24948: GO 24950
24950: DISABLE
// begin repeat wait ( 0 0$1 ) ;
24951: LD_INT 35
24953: PPUSH
24954: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
24958: LD_ADDR_OWVAR 47
24962: PUSH
24963: LD_STRING #Am08-1
24965: PUSH
24966: LD_EXP 19
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
24975: LD_ADDR_EXP 19
24979: PUSH
24980: LD_EXP 19
24984: PUSH
24985: LD_INT 35
24987: MINUS
24988: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
24989: LD_EXP 19
24993: PUSH
24994: LD_INT 0
24996: EQUAL
24997: IFFALSE 24951
// display_strings := [ ] ;
24999: LD_ADDR_OWVAR 47
25003: PUSH
25004: EMPTY
25005: ST_TO_ADDR
// end ; end_of_file
25006: END
// every 1 1$0 do
25007: GO 25009
25009: DISABLE
// begin if supply <= 13 and supply > 7 then
25010: LD_EXP 40
25014: PUSH
25015: LD_INT 13
25017: LESSEQUAL
25018: PUSH
25019: LD_EXP 40
25023: PUSH
25024: LD_INT 7
25026: GREATER
25027: AND
25028: IFFALSE 25051
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
25030: LD_INT 3
25032: PPUSH
25033: LD_INT 5
25035: PPUSH
25036: CALL_OW 12
25040: PPUSH
25041: LD_INT 5
25043: PPUSH
25044: LD_INT 1
25046: PPUSH
25047: CALL_OW 55
// if supply <= 7 and supply > 4 then
25051: LD_EXP 40
25055: PUSH
25056: LD_INT 7
25058: LESSEQUAL
25059: PUSH
25060: LD_EXP 40
25064: PUSH
25065: LD_INT 4
25067: GREATER
25068: AND
25069: IFFALSE 25092
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
25071: LD_INT 3
25073: PPUSH
25074: LD_INT 5
25076: PPUSH
25077: CALL_OW 12
25081: PPUSH
25082: LD_INT 20
25084: PPUSH
25085: LD_INT 1
25087: PPUSH
25088: CALL_OW 55
// if supply <= 4 and supply > 0 then
25092: LD_EXP 40
25096: PUSH
25097: LD_INT 4
25099: LESSEQUAL
25100: PUSH
25101: LD_EXP 40
25105: PUSH
25106: LD_INT 0
25108: GREATER
25109: AND
25110: IFFALSE 25133
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
25112: LD_INT 3
25114: PPUSH
25115: LD_INT 5
25117: PPUSH
25118: CALL_OW 12
25122: PPUSH
25123: LD_INT 21
25125: PPUSH
25126: LD_INT 1
25128: PPUSH
25129: CALL_OW 55
// if supply > 0 then
25133: LD_EXP 40
25137: PUSH
25138: LD_INT 0
25140: GREATER
25141: IFFALSE 25158
// begin supply = supply - 1 ;
25143: LD_ADDR_EXP 40
25147: PUSH
25148: LD_EXP 40
25152: PUSH
25153: LD_INT 1
25155: MINUS
25156: ST_TO_ADDR
// enable ;
25157: ENABLE
// end ; end ; end_of_file
25158: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
25159: LD_EXP 39
25163: PUSH
25164: LD_INT 1
25166: EQUAL
25167: PUSH
25168: LD_EXP 1
25172: PPUSH
25173: CALL_OW 301
25177: AND
25178: IFFALSE 25190
25180: GO 25182
25182: DISABLE
// YouLost ( JMM ) ;
25183: LD_STRING JMM
25185: PPUSH
25186: CALL_OW 104
25190: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
25191: LD_EXP 18
25195: PUSH
25196: LD_INT 1
25198: EQUAL
25199: PUSH
25200: LD_EXP 16
25204: PPUSH
25205: CALL_OW 301
25209: AND
25210: IFFALSE 25242
25212: GO 25214
25214: DISABLE
// begin DialogueOn ;
25215: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
25219: LD_EXP 23
25223: PPUSH
25224: LD_STRING D8a-Pow-1
25226: PPUSH
25227: CALL_OW 94
// DialogueOff ;
25231: CALL_OW 7
// YouLost ( Dismissed ) ;
25235: LD_STRING Dismissed
25237: PPUSH
25238: CALL_OW 104
// end ;
25242: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
25243: LD_INT 22
25245: PUSH
25246: LD_INT 1
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 2
25255: PUSH
25256: LD_INT 30
25258: PUSH
25259: LD_INT 0
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: LD_INT 30
25268: PUSH
25269: LD_INT 1
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: LIST
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PPUSH
25285: CALL_OW 69
25289: PUSH
25290: LD_INT 0
25292: EQUAL
25293: IFFALSE 25305
25295: GO 25297
25297: DISABLE
// YouLost ( Destroyed ) ; end_of_file
25298: LD_STRING Destroyed
25300: PPUSH
25301: CALL_OW 104
25305: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , tmp , p ;
25306: LD_EXP 24
25310: PPUSH
25311: CALL_OW 301
25315: PUSH
25316: LD_INT 22
25318: PUSH
25319: LD_INT 3
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 21
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PPUSH
25340: CALL_OW 69
25344: PUSH
25345: LD_INT 7
25347: PUSH
25348: LD_INT 6
25350: PUSH
25351: LD_INT 5
25353: PUSH
25354: LD_INT 5
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: PUSH
25363: LD_OWVAR 67
25367: ARRAY
25368: LESS
25369: AND
25370: PUSH
25371: LD_EXP 1
25375: PPUSH
25376: CALL_OW 305
25380: AND
25381: IFFALSE 25937
25383: GO 25385
25385: DISABLE
25386: LD_INT 0
25388: PPUSH
25389: PPUSH
25390: PPUSH
// begin russianAI = 0 ;
25391: LD_ADDR_EXP 27
25395: PUSH
25396: LD_INT 0
25398: ST_TO_ADDR
// escapeAvalaible = 1 ;
25399: LD_ADDR_EXP 36
25403: PUSH
25404: LD_INT 1
25406: ST_TO_ADDR
// Video ( true ) ;
25407: LD_INT 1
25409: PPUSH
25410: CALL 82893 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
25414: LD_INT 3
25416: PPUSH
25417: LD_INT 1
25419: PPUSH
25420: LD_INT 1
25422: PPUSH
25423: LD_INT 0
25425: PPUSH
25426: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
25430: LD_INT 6
25432: PPUSH
25433: LD_INT 1
25435: PPUSH
25436: LD_INT 1
25438: PPUSH
25439: LD_INT 0
25441: PPUSH
25442: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
25446: LD_INT 3
25448: PPUSH
25449: LD_INT 1
25451: PPUSH
25452: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
25456: LD_INT 97
25458: PPUSH
25459: LD_INT 91
25461: PPUSH
25462: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
25466: LD_INT 22
25468: PUSH
25469: LD_INT 3
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 21
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PPUSH
25490: CALL_OW 69
25494: PPUSH
25495: CALL_OW 121
// wait ( 0 0$01 ) ;
25499: LD_INT 35
25501: PPUSH
25502: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25506: LD_INT 22
25508: PUSH
25509: LD_INT 3
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 21
25518: PUSH
25519: LD_INT 1
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PPUSH
25530: CALL_OW 69
25534: PPUSH
25535: LD_INT 124
25537: PPUSH
25538: LD_INT 98
25540: PPUSH
25541: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
25545: LD_INT 22
25547: PUSH
25548: LD_INT 6
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 21
25557: PUSH
25558: LD_INT 1
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PPUSH
25569: CALL_OW 69
25573: PPUSH
25574: CALL_OW 121
// wait ( 0 0$01 ) ;
25578: LD_INT 35
25580: PPUSH
25581: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25585: LD_INT 22
25587: PUSH
25588: LD_INT 6
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 21
25597: PUSH
25598: LD_INT 1
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PPUSH
25609: CALL_OW 69
25613: PPUSH
25614: LD_INT 124
25616: PPUSH
25617: LD_INT 98
25619: PPUSH
25620: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
25624: LD_INT 22
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 21
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 3
25646: PUSH
25647: LD_INT 54
25649: PUSH
25650: EMPTY
25651: LIST
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: LIST
25661: PPUSH
25662: CALL_OW 69
25666: PPUSH
25667: LD_INT 124
25669: PPUSH
25670: LD_INT 98
25672: PPUSH
25673: CALL_OW 114
// wait ( 0 0$4 ) ;
25677: LD_INT 140
25679: PPUSH
25680: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
25684: LD_INT 124
25686: PPUSH
25687: LD_INT 98
25689: PPUSH
25690: CALL_OW 84
// if SikorskyStatus = 1 then
25694: LD_EXP 21
25698: PUSH
25699: LD_INT 1
25701: EQUAL
25702: IFFALSE 25716
// Say ( Sikorski , D9-Sik-1 ) ;
25704: LD_EXP 16
25708: PPUSH
25709: LD_STRING D9-Sik-1
25711: PPUSH
25712: CALL_OW 88
// if SikorskyStatus = 2 then
25716: LD_EXP 21
25720: PUSH
25721: LD_INT 2
25723: EQUAL
25724: IFFALSE 25745
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
25726: LD_EXP 23
25730: PPUSH
25731: LD_STRING D8b-Pow-1
25733: PPUSH
25734: CALL_OW 94
// YouLost ( Dismissed ) ;
25738: LD_STRING Dismissed
25740: PPUSH
25741: CALL_OW 104
// end ; p := 0 0$0 ;
25745: LD_ADDR_VAR 0 3
25749: PUSH
25750: LD_INT 0
25752: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
25753: LD_ADDR_VAR 0 2
25757: PUSH
25758: LD_INT 2
25760: PUSH
25761: LD_INT 22
25763: PUSH
25764: LD_INT 3
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 22
25773: PUSH
25774: LD_INT 6
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 21
25788: PUSH
25789: LD_INT 1
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PPUSH
25800: CALL_OW 69
25804: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25805: LD_INT 35
25807: PPUSH
25808: CALL_OW 67
// p := p + 0 0$1 ;
25812: LD_ADDR_VAR 0 3
25816: PUSH
25817: LD_VAR 0 3
25821: PUSH
25822: LD_INT 35
25824: PLUS
25825: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
25826: LD_VAR 0 2
25830: PPUSH
25831: LD_INT 22
25833: PPUSH
25834: CALL_OW 113
// for i in tmp do
25838: LD_ADDR_VAR 0 1
25842: PUSH
25843: LD_VAR 0 2
25847: PUSH
25848: FOR_IN
25849: IFFALSE 25876
// if IsInArea ( i , RussianEscape ) then
25851: LD_VAR 0 1
25855: PPUSH
25856: LD_INT 22
25858: PPUSH
25859: CALL_OW 308
25863: IFFALSE 25874
// RemoveUnit ( i ) ;
25865: LD_VAR 0 1
25869: PPUSH
25870: CALL_OW 64
25874: GO 25848
25876: POP
25877: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
25878: LD_INT 23
25880: PUSH
25881: LD_INT 3
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 21
25890: PUSH
25891: LD_INT 1
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 24
25900: PUSH
25901: LD_INT 250
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: LIST
25912: PPUSH
25913: CALL_OW 69
25917: PUSH
25918: LD_INT 0
25920: EQUAL
25921: PUSH
25922: LD_VAR 0 3
25926: PUSH
25927: LD_INT 245
25929: GREATEREQUAL
25930: OR
25931: IFFALSE 25805
// FinishMission ;
25933: CALL 25940 0 0
// end ;
25937: PPOPN 3
25939: END
// export function FinishMission ; var tmp ; begin
25940: LD_INT 0
25942: PPUSH
25943: PPUSH
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 then
25944: LD_INT 22
25946: PUSH
25947: LD_INT 4
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PPUSH
25954: CALL_OW 69
25958: PUSH
25959: LD_INT 0
25961: EQUAL
25962: IFFALSE 25971
// SetAchievement ( ACH_BLITZKRIEG ) ;
25964: LD_STRING ACH_BLITZKRIEG
25966: PPUSH
25967: CALL_OW 543
// if tick <= 25 25$00 then
25971: LD_OWVAR 1
25975: PUSH
25976: LD_INT 52500
25978: LESSEQUAL
25979: IFFALSE 25995
// begin wait ( 3 ) ;
25981: LD_INT 3
25983: PPUSH
25984: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
25988: LD_STRING ACH_ASPEED_8
25990: PPUSH
25991: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
25995: LD_STRING med1
25997: PPUSH
25998: LD_INT 1
26000: PPUSH
26001: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
26005: LD_STRING med2
26007: PPUSH
26008: LD_INT 1
26010: PPUSH
26011: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
26015: LD_STRING perfect
26017: PPUSH
26018: LD_INT 1
26020: PPUSH
26021: CALL_OW 101
// if Difficulty >= 3 then
26025: LD_OWVAR 67
26029: PUSH
26030: LD_INT 3
26032: GREATEREQUAL
26033: IFFALSE 26045
// SetAchievementEX ( ACH_AMER , 8 ) ;
26035: LD_STRING ACH_AMER
26037: PPUSH
26038: LD_INT 8
26040: PPUSH
26041: CALL_OW 564
// GiveMedals ( Main ) ;
26045: LD_STRING Main
26047: PPUSH
26048: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
26052: LD_INT 22
26054: PUSH
26055: LD_INT 1
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 23
26064: PUSH
26065: LD_INT 1
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 21
26074: PUSH
26075: LD_INT 1
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 2
26084: PUSH
26085: LD_INT 25
26087: PUSH
26088: LD_INT 1
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 25
26097: PUSH
26098: LD_INT 2
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 25
26107: PUSH
26108: LD_INT 3
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 25
26117: PUSH
26118: LD_INT 4
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: PPUSH
26138: CALL_OW 69
26142: PPUSH
26143: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26147: LD_EXP 1
26151: PPUSH
26152: LD_EXP 43
26156: PUSH
26157: LD_STRING JMM
26159: STR
26160: PPUSH
26161: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26165: LD_EXP 2
26169: PPUSH
26170: LD_EXP 43
26174: PUSH
26175: LD_STRING Brown
26177: STR
26178: PPUSH
26179: CALL 8488 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26183: LD_EXP 3
26187: PPUSH
26188: LD_EXP 43
26192: PUSH
26193: LD_STRING Donaldson
26195: STR
26196: PPUSH
26197: CALL 8488 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26201: LD_EXP 4
26205: PPUSH
26206: LD_EXP 43
26210: PUSH
26211: LD_STRING Bobby
26213: STR
26214: PPUSH
26215: CALL 8488 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26219: LD_EXP 5
26223: PPUSH
26224: LD_EXP 43
26228: PUSH
26229: LD_STRING Cyrus
26231: STR
26232: PPUSH
26233: CALL 8488 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26237: LD_EXP 6
26241: PPUSH
26242: LD_EXP 43
26246: PUSH
26247: LD_STRING Lisa
26249: STR
26250: PPUSH
26251: CALL 8488 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26255: LD_EXP 7
26259: PPUSH
26260: LD_EXP 43
26264: PUSH
26265: LD_STRING Frank
26267: STR
26268: PPUSH
26269: CALL 8488 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26273: LD_EXP 8
26277: PPUSH
26278: LD_EXP 43
26282: PUSH
26283: LD_STRING Gladstone
26285: STR
26286: PPUSH
26287: CALL 8488 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26291: LD_EXP 9
26295: PPUSH
26296: LD_EXP 43
26300: PUSH
26301: LD_STRING Kikuchi
26303: STR
26304: PPUSH
26305: CALL 8488 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26309: LD_EXP 14
26313: PPUSH
26314: LD_EXP 43
26318: PUSH
26319: LD_STRING Denis
26321: STR
26322: PPUSH
26323: CALL 8488 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26327: LD_EXP 15
26331: PPUSH
26332: LD_EXP 43
26336: PUSH
26337: LD_STRING Joan
26339: STR
26340: PPUSH
26341: CALL 8488 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
26345: LD_EXP 10
26349: PPUSH
26350: LD_EXP 43
26354: PUSH
26355: LD_STRING Khatam
26357: STR
26358: PPUSH
26359: CALL 8488 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26363: LD_EXP 13
26367: PPUSH
26368: LD_EXP 43
26372: PUSH
26373: LD_STRING Houten
26375: STR
26376: PPUSH
26377: CALL 8488 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
26381: LD_INT 50
26383: PUSH
26384: EMPTY
26385: LIST
26386: PUSH
26387: LD_INT 22
26389: PUSH
26390: LD_INT 1
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 21
26399: PUSH
26400: LD_INT 1
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 2
26409: PUSH
26410: LD_INT 25
26412: PUSH
26413: LD_INT 1
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 25
26422: PUSH
26423: LD_INT 2
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 25
26432: PUSH
26433: LD_INT 3
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 25
26442: PUSH
26443: LD_INT 4
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: PPUSH
26463: CALL_OW 69
26467: PUSH
26468: LD_EXP 1
26472: PUSH
26473: LD_EXP 2
26477: PUSH
26478: LD_EXP 3
26482: PUSH
26483: LD_EXP 4
26487: PUSH
26488: LD_EXP 5
26492: PUSH
26493: LD_EXP 6
26497: PUSH
26498: LD_EXP 7
26502: PUSH
26503: LD_EXP 8
26507: PUSH
26508: LD_EXP 9
26512: PUSH
26513: LD_EXP 14
26517: PUSH
26518: LD_EXP 15
26522: PUSH
26523: LD_EXP 13
26527: PUSH
26528: LD_EXP 10
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: DIFF
26548: PPUSH
26549: LD_STRING 08_other_survivors
26551: PPUSH
26552: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
26556: LD_INT 23
26558: PPUSH
26559: CALL 26572 0 1
// YouWin ;
26563: CALL_OW 103
// end ;
26567: LD_VAR 0 1
26571: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
26572: LD_INT 0
26574: PPUSH
26575: PPUSH
26576: PPUSH
26577: PPUSH
// gammaBase = [ ] ;
26578: LD_ADDR_VAR 0 4
26582: PUSH
26583: EMPTY
26584: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26585: LD_ADDR_VAR 0 5
26589: PUSH
26590: LD_VAR 0 1
26594: PPUSH
26595: LD_INT 22
26597: PUSH
26598: LD_INT 1
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 21
26607: PUSH
26608: LD_INT 3
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 50
26617: PUSH
26618: EMPTY
26619: LIST
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: LIST
26625: PPUSH
26626: CALL_OW 70
26630: ST_TO_ADDR
// for i in buildings do
26631: LD_ADDR_VAR 0 3
26635: PUSH
26636: LD_VAR 0 5
26640: PUSH
26641: FOR_IN
26642: IFFALSE 27079
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26644: LD_VAR 0 3
26648: PPUSH
26649: CALL_OW 266
26653: PUSH
26654: LD_INT 6
26656: PUSH
26657: LD_INT 7
26659: PUSH
26660: LD_INT 8
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: LIST
26667: IN
26668: IFFALSE 26782
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26670: LD_ADDR_VAR 0 4
26674: PUSH
26675: LD_VAR 0 4
26679: PUSH
26680: LD_VAR 0 3
26684: PPUSH
26685: CALL_OW 266
26689: PUSH
26690: LD_VAR 0 3
26694: PPUSH
26695: CALL_OW 250
26699: PUSH
26700: LD_VAR 0 3
26704: PPUSH
26705: CALL_OW 251
26709: PUSH
26710: LD_VAR 0 3
26714: PPUSH
26715: CALL_OW 254
26719: PUSH
26720: LD_VAR 0 3
26724: PPUSH
26725: CALL_OW 267
26729: PUSH
26730: LD_VAR 0 3
26734: PPUSH
26735: CALL_OW 248
26739: PUSH
26740: LD_VAR 0 3
26744: PPUSH
26745: LD_INT 1
26747: PPUSH
26748: CALL_OW 268
26752: PUSH
26753: LD_VAR 0 3
26757: PPUSH
26758: LD_INT 2
26760: PPUSH
26761: CALL_OW 268
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: PUSH
26776: EMPTY
26777: LIST
26778: ADD
26779: ST_TO_ADDR
26780: GO 27077
// if GetBType ( i ) = b_bunker then
26782: LD_VAR 0 3
26786: PPUSH
26787: CALL_OW 266
26791: PUSH
26792: LD_INT 32
26794: EQUAL
26795: IFFALSE 26892
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26797: LD_ADDR_VAR 0 4
26801: PUSH
26802: LD_VAR 0 4
26806: PUSH
26807: LD_VAR 0 3
26811: PPUSH
26812: CALL_OW 266
26816: PUSH
26817: LD_VAR 0 3
26821: PPUSH
26822: CALL_OW 250
26826: PUSH
26827: LD_VAR 0 3
26831: PPUSH
26832: CALL_OW 251
26836: PUSH
26837: LD_VAR 0 3
26841: PPUSH
26842: CALL_OW 254
26846: PUSH
26847: LD_VAR 0 3
26851: PPUSH
26852: CALL_OW 267
26856: PUSH
26857: LD_VAR 0 3
26861: PPUSH
26862: CALL_OW 248
26866: PUSH
26867: LD_VAR 0 3
26871: PPUSH
26872: CALL_OW 269
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: PUSH
26886: EMPTY
26887: LIST
26888: ADD
26889: ST_TO_ADDR
26890: GO 27077
// if GetBType ( i ) = b_factory then
26892: LD_VAR 0 3
26896: PPUSH
26897: CALL_OW 266
26901: PUSH
26902: LD_INT 3
26904: EQUAL
26905: IFFALSE 26995
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
26907: LD_ADDR_VAR 0 4
26911: PUSH
26912: LD_VAR 0 4
26916: PPUSH
26917: LD_INT 1
26919: PPUSH
26920: LD_VAR 0 3
26924: PPUSH
26925: CALL_OW 266
26929: PUSH
26930: LD_VAR 0 3
26934: PPUSH
26935: CALL_OW 250
26939: PUSH
26940: LD_VAR 0 3
26944: PPUSH
26945: CALL_OW 251
26949: PUSH
26950: LD_VAR 0 3
26954: PPUSH
26955: CALL_OW 254
26959: PUSH
26960: LD_VAR 0 3
26964: PPUSH
26965: CALL_OW 267
26969: PUSH
26970: LD_VAR 0 3
26974: PPUSH
26975: CALL_OW 248
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: PPUSH
26988: CALL_OW 2
26992: ST_TO_ADDR
26993: GO 27077
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
26995: LD_ADDR_VAR 0 4
26999: PUSH
27000: LD_VAR 0 4
27004: PUSH
27005: LD_VAR 0 3
27009: PPUSH
27010: CALL_OW 266
27014: PUSH
27015: LD_VAR 0 3
27019: PPUSH
27020: CALL_OW 250
27024: PUSH
27025: LD_VAR 0 3
27029: PPUSH
27030: CALL_OW 251
27034: PUSH
27035: LD_VAR 0 3
27039: PPUSH
27040: CALL_OW 254
27044: PUSH
27045: LD_VAR 0 3
27049: PPUSH
27050: CALL_OW 267
27054: PUSH
27055: LD_VAR 0 3
27059: PPUSH
27060: CALL_OW 248
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: PUSH
27073: EMPTY
27074: LIST
27075: ADD
27076: ST_TO_ADDR
// end ;
27077: GO 26641
27079: POP
27080: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
27081: LD_VAR 0 4
27085: PPUSH
27086: LD_STRING 08_GammaBase
27088: PPUSH
27089: CALL_OW 39
// end ; end_of_file
27093: LD_VAR 0 2
27097: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
27098: LD_INT 0
27100: PPUSH
// ar_miner := 81 ;
27101: LD_ADDR_EXP 55
27105: PUSH
27106: LD_INT 81
27108: ST_TO_ADDR
// ar_crane := 88 ;
27109: LD_ADDR_EXP 54
27113: PUSH
27114: LD_INT 88
27116: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
27117: LD_ADDR_EXP 49
27121: PUSH
27122: LD_INT 89
27124: ST_TO_ADDR
// us_hack := 99 ;
27125: LD_ADDR_EXP 50
27129: PUSH
27130: LD_INT 99
27132: ST_TO_ADDR
// us_artillery := 97 ;
27133: LD_ADDR_EXP 51
27137: PUSH
27138: LD_INT 97
27140: ST_TO_ADDR
// ar_bio_bomb := 91 ;
27141: LD_ADDR_EXP 52
27145: PUSH
27146: LD_INT 91
27148: ST_TO_ADDR
// ar_mortar := 92 ;
27149: LD_ADDR_EXP 53
27153: PUSH
27154: LD_INT 92
27156: ST_TO_ADDR
// ru_radar := 98 ;
27157: LD_ADDR_EXP 48
27161: PUSH
27162: LD_INT 98
27164: ST_TO_ADDR
// tech_Artillery := 80 ;
27165: LD_ADDR_EXP 56
27169: PUSH
27170: LD_INT 80
27172: ST_TO_ADDR
// tech_RadMat := 81 ;
27173: LD_ADDR_EXP 57
27177: PUSH
27178: LD_INT 81
27180: ST_TO_ADDR
// tech_BasicTools := 82 ;
27181: LD_ADDR_EXP 58
27185: PUSH
27186: LD_INT 82
27188: ST_TO_ADDR
// tech_Cargo := 83 ;
27189: LD_ADDR_EXP 59
27193: PUSH
27194: LD_INT 83
27196: ST_TO_ADDR
// tech_Track := 84 ;
27197: LD_ADDR_EXP 60
27201: PUSH
27202: LD_INT 84
27204: ST_TO_ADDR
// tech_Crane := 85 ;
27205: LD_ADDR_EXP 61
27209: PUSH
27210: LD_INT 85
27212: ST_TO_ADDR
// tech_Bulldozer := 86 ;
27213: LD_ADDR_EXP 62
27217: PUSH
27218: LD_INT 86
27220: ST_TO_ADDR
// tech_Hovercraft := 87 ;
27221: LD_ADDR_EXP 63
27225: PUSH
27226: LD_INT 87
27228: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
27229: LD_ADDR_EXP 64
27233: PUSH
27234: LD_INT 88
27236: ST_TO_ADDR
// class_mastodont := 31 ;
27237: LD_ADDR_EXP 65
27241: PUSH
27242: LD_INT 31
27244: ST_TO_ADDR
// class_horse := 21 ;
27245: LD_ADDR_EXP 66
27249: PUSH
27250: LD_INT 21
27252: ST_TO_ADDR
// end ;
27253: LD_VAR 0 1
27257: RET
// every 1 do
27258: GO 27260
27260: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
27261: CALL 27098 0 0
27265: END
// every 0 0$1 do
27266: GO 27268
27268: DISABLE
// begin enable ;
27269: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
27270: LD_STRING updateTimer(
27272: PUSH
27273: LD_OWVAR 1
27277: STR
27278: PUSH
27279: LD_STRING );
27281: STR
27282: PPUSH
27283: CALL_OW 559
// end ;
27287: END
// export function SOS_MapStart ( ) ; begin
27288: LD_INT 0
27290: PPUSH
// if streamModeActive then
27291: LD_EXP 67
27295: IFFALSE 27304
// DefineStreamItems ( true ) ;
27297: LD_INT 1
27299: PPUSH
27300: CALL 28954 0 1
// UpdateFactoryWaypoints ( ) ;
27304: CALL 42538 0 0
// end ;
27308: LD_VAR 0 1
27312: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27313: LD_INT 0
27315: PPUSH
// if p2 = 100 then
27316: LD_VAR 0 2
27320: PUSH
27321: LD_INT 100
27323: EQUAL
27324: IFFALSE 28327
// begin if not StreamModeActive then
27326: LD_EXP 67
27330: NOT
27331: IFFALSE 27341
// StreamModeActive := true ;
27333: LD_ADDR_EXP 67
27337: PUSH
27338: LD_INT 1
27340: ST_TO_ADDR
// if p3 = 0 then
27341: LD_VAR 0 3
27345: PUSH
27346: LD_INT 0
27348: EQUAL
27349: IFFALSE 27355
// InitStreamMode ;
27351: CALL 28490 0 0
// if p3 = 1 then
27355: LD_VAR 0 3
27359: PUSH
27360: LD_INT 1
27362: EQUAL
27363: IFFALSE 27373
// sRocket := true ;
27365: LD_ADDR_EXP 72
27369: PUSH
27370: LD_INT 1
27372: ST_TO_ADDR
// if p3 = 2 then
27373: LD_VAR 0 3
27377: PUSH
27378: LD_INT 2
27380: EQUAL
27381: IFFALSE 27391
// sSpeed := true ;
27383: LD_ADDR_EXP 71
27387: PUSH
27388: LD_INT 1
27390: ST_TO_ADDR
// if p3 = 3 then
27391: LD_VAR 0 3
27395: PUSH
27396: LD_INT 3
27398: EQUAL
27399: IFFALSE 27409
// sEngine := true ;
27401: LD_ADDR_EXP 73
27405: PUSH
27406: LD_INT 1
27408: ST_TO_ADDR
// if p3 = 4 then
27409: LD_VAR 0 3
27413: PUSH
27414: LD_INT 4
27416: EQUAL
27417: IFFALSE 27427
// sSpec := true ;
27419: LD_ADDR_EXP 70
27423: PUSH
27424: LD_INT 1
27426: ST_TO_ADDR
// if p3 = 5 then
27427: LD_VAR 0 3
27431: PUSH
27432: LD_INT 5
27434: EQUAL
27435: IFFALSE 27445
// sLevel := true ;
27437: LD_ADDR_EXP 74
27441: PUSH
27442: LD_INT 1
27444: ST_TO_ADDR
// if p3 = 6 then
27445: LD_VAR 0 3
27449: PUSH
27450: LD_INT 6
27452: EQUAL
27453: IFFALSE 27463
// sArmoury := true ;
27455: LD_ADDR_EXP 75
27459: PUSH
27460: LD_INT 1
27462: ST_TO_ADDR
// if p3 = 7 then
27463: LD_VAR 0 3
27467: PUSH
27468: LD_INT 7
27470: EQUAL
27471: IFFALSE 27481
// sRadar := true ;
27473: LD_ADDR_EXP 76
27477: PUSH
27478: LD_INT 1
27480: ST_TO_ADDR
// if p3 = 8 then
27481: LD_VAR 0 3
27485: PUSH
27486: LD_INT 8
27488: EQUAL
27489: IFFALSE 27499
// sBunker := true ;
27491: LD_ADDR_EXP 77
27495: PUSH
27496: LD_INT 1
27498: ST_TO_ADDR
// if p3 = 9 then
27499: LD_VAR 0 3
27503: PUSH
27504: LD_INT 9
27506: EQUAL
27507: IFFALSE 27517
// sHack := true ;
27509: LD_ADDR_EXP 78
27513: PUSH
27514: LD_INT 1
27516: ST_TO_ADDR
// if p3 = 10 then
27517: LD_VAR 0 3
27521: PUSH
27522: LD_INT 10
27524: EQUAL
27525: IFFALSE 27535
// sFire := true ;
27527: LD_ADDR_EXP 79
27531: PUSH
27532: LD_INT 1
27534: ST_TO_ADDR
// if p3 = 11 then
27535: LD_VAR 0 3
27539: PUSH
27540: LD_INT 11
27542: EQUAL
27543: IFFALSE 27553
// sRefresh := true ;
27545: LD_ADDR_EXP 80
27549: PUSH
27550: LD_INT 1
27552: ST_TO_ADDR
// if p3 = 12 then
27553: LD_VAR 0 3
27557: PUSH
27558: LD_INT 12
27560: EQUAL
27561: IFFALSE 27571
// sExp := true ;
27563: LD_ADDR_EXP 81
27567: PUSH
27568: LD_INT 1
27570: ST_TO_ADDR
// if p3 = 13 then
27571: LD_VAR 0 3
27575: PUSH
27576: LD_INT 13
27578: EQUAL
27579: IFFALSE 27589
// sDepot := true ;
27581: LD_ADDR_EXP 82
27585: PUSH
27586: LD_INT 1
27588: ST_TO_ADDR
// if p3 = 14 then
27589: LD_VAR 0 3
27593: PUSH
27594: LD_INT 14
27596: EQUAL
27597: IFFALSE 27607
// sFlag := true ;
27599: LD_ADDR_EXP 83
27603: PUSH
27604: LD_INT 1
27606: ST_TO_ADDR
// if p3 = 15 then
27607: LD_VAR 0 3
27611: PUSH
27612: LD_INT 15
27614: EQUAL
27615: IFFALSE 27625
// sKamikadze := true ;
27617: LD_ADDR_EXP 91
27621: PUSH
27622: LD_INT 1
27624: ST_TO_ADDR
// if p3 = 16 then
27625: LD_VAR 0 3
27629: PUSH
27630: LD_INT 16
27632: EQUAL
27633: IFFALSE 27643
// sTroll := true ;
27635: LD_ADDR_EXP 92
27639: PUSH
27640: LD_INT 1
27642: ST_TO_ADDR
// if p3 = 17 then
27643: LD_VAR 0 3
27647: PUSH
27648: LD_INT 17
27650: EQUAL
27651: IFFALSE 27661
// sSlow := true ;
27653: LD_ADDR_EXP 93
27657: PUSH
27658: LD_INT 1
27660: ST_TO_ADDR
// if p3 = 18 then
27661: LD_VAR 0 3
27665: PUSH
27666: LD_INT 18
27668: EQUAL
27669: IFFALSE 27679
// sLack := true ;
27671: LD_ADDR_EXP 94
27675: PUSH
27676: LD_INT 1
27678: ST_TO_ADDR
// if p3 = 19 then
27679: LD_VAR 0 3
27683: PUSH
27684: LD_INT 19
27686: EQUAL
27687: IFFALSE 27697
// sTank := true ;
27689: LD_ADDR_EXP 96
27693: PUSH
27694: LD_INT 1
27696: ST_TO_ADDR
// if p3 = 20 then
27697: LD_VAR 0 3
27701: PUSH
27702: LD_INT 20
27704: EQUAL
27705: IFFALSE 27715
// sRemote := true ;
27707: LD_ADDR_EXP 97
27711: PUSH
27712: LD_INT 1
27714: ST_TO_ADDR
// if p3 = 21 then
27715: LD_VAR 0 3
27719: PUSH
27720: LD_INT 21
27722: EQUAL
27723: IFFALSE 27733
// sPowell := true ;
27725: LD_ADDR_EXP 98
27729: PUSH
27730: LD_INT 1
27732: ST_TO_ADDR
// if p3 = 22 then
27733: LD_VAR 0 3
27737: PUSH
27738: LD_INT 22
27740: EQUAL
27741: IFFALSE 27751
// sTeleport := true ;
27743: LD_ADDR_EXP 101
27747: PUSH
27748: LD_INT 1
27750: ST_TO_ADDR
// if p3 = 23 then
27751: LD_VAR 0 3
27755: PUSH
27756: LD_INT 23
27758: EQUAL
27759: IFFALSE 27769
// sOilTower := true ;
27761: LD_ADDR_EXP 103
27765: PUSH
27766: LD_INT 1
27768: ST_TO_ADDR
// if p3 = 24 then
27769: LD_VAR 0 3
27773: PUSH
27774: LD_INT 24
27776: EQUAL
27777: IFFALSE 27787
// sShovel := true ;
27779: LD_ADDR_EXP 104
27783: PUSH
27784: LD_INT 1
27786: ST_TO_ADDR
// if p3 = 25 then
27787: LD_VAR 0 3
27791: PUSH
27792: LD_INT 25
27794: EQUAL
27795: IFFALSE 27805
// sSheik := true ;
27797: LD_ADDR_EXP 105
27801: PUSH
27802: LD_INT 1
27804: ST_TO_ADDR
// if p3 = 26 then
27805: LD_VAR 0 3
27809: PUSH
27810: LD_INT 26
27812: EQUAL
27813: IFFALSE 27823
// sEarthquake := true ;
27815: LD_ADDR_EXP 107
27819: PUSH
27820: LD_INT 1
27822: ST_TO_ADDR
// if p3 = 27 then
27823: LD_VAR 0 3
27827: PUSH
27828: LD_INT 27
27830: EQUAL
27831: IFFALSE 27841
// sAI := true ;
27833: LD_ADDR_EXP 108
27837: PUSH
27838: LD_INT 1
27840: ST_TO_ADDR
// if p3 = 28 then
27841: LD_VAR 0 3
27845: PUSH
27846: LD_INT 28
27848: EQUAL
27849: IFFALSE 27859
// sCargo := true ;
27851: LD_ADDR_EXP 111
27855: PUSH
27856: LD_INT 1
27858: ST_TO_ADDR
// if p3 = 29 then
27859: LD_VAR 0 3
27863: PUSH
27864: LD_INT 29
27866: EQUAL
27867: IFFALSE 27877
// sDLaser := true ;
27869: LD_ADDR_EXP 112
27873: PUSH
27874: LD_INT 1
27876: ST_TO_ADDR
// if p3 = 30 then
27877: LD_VAR 0 3
27881: PUSH
27882: LD_INT 30
27884: EQUAL
27885: IFFALSE 27895
// sExchange := true ;
27887: LD_ADDR_EXP 113
27891: PUSH
27892: LD_INT 1
27894: ST_TO_ADDR
// if p3 = 31 then
27895: LD_VAR 0 3
27899: PUSH
27900: LD_INT 31
27902: EQUAL
27903: IFFALSE 27913
// sFac := true ;
27905: LD_ADDR_EXP 114
27909: PUSH
27910: LD_INT 1
27912: ST_TO_ADDR
// if p3 = 32 then
27913: LD_VAR 0 3
27917: PUSH
27918: LD_INT 32
27920: EQUAL
27921: IFFALSE 27931
// sPower := true ;
27923: LD_ADDR_EXP 115
27927: PUSH
27928: LD_INT 1
27930: ST_TO_ADDR
// if p3 = 33 then
27931: LD_VAR 0 3
27935: PUSH
27936: LD_INT 33
27938: EQUAL
27939: IFFALSE 27949
// sRandom := true ;
27941: LD_ADDR_EXP 116
27945: PUSH
27946: LD_INT 1
27948: ST_TO_ADDR
// if p3 = 34 then
27949: LD_VAR 0 3
27953: PUSH
27954: LD_INT 34
27956: EQUAL
27957: IFFALSE 27967
// sShield := true ;
27959: LD_ADDR_EXP 117
27963: PUSH
27964: LD_INT 1
27966: ST_TO_ADDR
// if p3 = 35 then
27967: LD_VAR 0 3
27971: PUSH
27972: LD_INT 35
27974: EQUAL
27975: IFFALSE 27985
// sTime := true ;
27977: LD_ADDR_EXP 118
27981: PUSH
27982: LD_INT 1
27984: ST_TO_ADDR
// if p3 = 36 then
27985: LD_VAR 0 3
27989: PUSH
27990: LD_INT 36
27992: EQUAL
27993: IFFALSE 28003
// sTools := true ;
27995: LD_ADDR_EXP 119
27999: PUSH
28000: LD_INT 1
28002: ST_TO_ADDR
// if p3 = 101 then
28003: LD_VAR 0 3
28007: PUSH
28008: LD_INT 101
28010: EQUAL
28011: IFFALSE 28021
// sSold := true ;
28013: LD_ADDR_EXP 84
28017: PUSH
28018: LD_INT 1
28020: ST_TO_ADDR
// if p3 = 102 then
28021: LD_VAR 0 3
28025: PUSH
28026: LD_INT 102
28028: EQUAL
28029: IFFALSE 28039
// sDiff := true ;
28031: LD_ADDR_EXP 85
28035: PUSH
28036: LD_INT 1
28038: ST_TO_ADDR
// if p3 = 103 then
28039: LD_VAR 0 3
28043: PUSH
28044: LD_INT 103
28046: EQUAL
28047: IFFALSE 28057
// sFog := true ;
28049: LD_ADDR_EXP 88
28053: PUSH
28054: LD_INT 1
28056: ST_TO_ADDR
// if p3 = 104 then
28057: LD_VAR 0 3
28061: PUSH
28062: LD_INT 104
28064: EQUAL
28065: IFFALSE 28075
// sReset := true ;
28067: LD_ADDR_EXP 89
28071: PUSH
28072: LD_INT 1
28074: ST_TO_ADDR
// if p3 = 105 then
28075: LD_VAR 0 3
28079: PUSH
28080: LD_INT 105
28082: EQUAL
28083: IFFALSE 28093
// sSun := true ;
28085: LD_ADDR_EXP 90
28089: PUSH
28090: LD_INT 1
28092: ST_TO_ADDR
// if p3 = 106 then
28093: LD_VAR 0 3
28097: PUSH
28098: LD_INT 106
28100: EQUAL
28101: IFFALSE 28111
// sTiger := true ;
28103: LD_ADDR_EXP 86
28107: PUSH
28108: LD_INT 1
28110: ST_TO_ADDR
// if p3 = 107 then
28111: LD_VAR 0 3
28115: PUSH
28116: LD_INT 107
28118: EQUAL
28119: IFFALSE 28129
// sBomb := true ;
28121: LD_ADDR_EXP 87
28125: PUSH
28126: LD_INT 1
28128: ST_TO_ADDR
// if p3 = 108 then
28129: LD_VAR 0 3
28133: PUSH
28134: LD_INT 108
28136: EQUAL
28137: IFFALSE 28147
// sWound := true ;
28139: LD_ADDR_EXP 95
28143: PUSH
28144: LD_INT 1
28146: ST_TO_ADDR
// if p3 = 109 then
28147: LD_VAR 0 3
28151: PUSH
28152: LD_INT 109
28154: EQUAL
28155: IFFALSE 28165
// sBetray := true ;
28157: LD_ADDR_EXP 99
28161: PUSH
28162: LD_INT 1
28164: ST_TO_ADDR
// if p3 = 110 then
28165: LD_VAR 0 3
28169: PUSH
28170: LD_INT 110
28172: EQUAL
28173: IFFALSE 28183
// sContamin := true ;
28175: LD_ADDR_EXP 100
28179: PUSH
28180: LD_INT 1
28182: ST_TO_ADDR
// if p3 = 111 then
28183: LD_VAR 0 3
28187: PUSH
28188: LD_INT 111
28190: EQUAL
28191: IFFALSE 28201
// sOil := true ;
28193: LD_ADDR_EXP 102
28197: PUSH
28198: LD_INT 1
28200: ST_TO_ADDR
// if p3 = 112 then
28201: LD_VAR 0 3
28205: PUSH
28206: LD_INT 112
28208: EQUAL
28209: IFFALSE 28219
// sStu := true ;
28211: LD_ADDR_EXP 106
28215: PUSH
28216: LD_INT 1
28218: ST_TO_ADDR
// if p3 = 113 then
28219: LD_VAR 0 3
28223: PUSH
28224: LD_INT 113
28226: EQUAL
28227: IFFALSE 28237
// sBazooka := true ;
28229: LD_ADDR_EXP 109
28233: PUSH
28234: LD_INT 1
28236: ST_TO_ADDR
// if p3 = 114 then
28237: LD_VAR 0 3
28241: PUSH
28242: LD_INT 114
28244: EQUAL
28245: IFFALSE 28255
// sMortar := true ;
28247: LD_ADDR_EXP 110
28251: PUSH
28252: LD_INT 1
28254: ST_TO_ADDR
// if p3 = 115 then
28255: LD_VAR 0 3
28259: PUSH
28260: LD_INT 115
28262: EQUAL
28263: IFFALSE 28273
// sRanger := true ;
28265: LD_ADDR_EXP 120
28269: PUSH
28270: LD_INT 1
28272: ST_TO_ADDR
// if p3 = 116 then
28273: LD_VAR 0 3
28277: PUSH
28278: LD_INT 116
28280: EQUAL
28281: IFFALSE 28291
// sComputer := true ;
28283: LD_ADDR_EXP 121
28287: PUSH
28288: LD_INT 1
28290: ST_TO_ADDR
// if p3 = 117 then
28291: LD_VAR 0 3
28295: PUSH
28296: LD_INT 117
28298: EQUAL
28299: IFFALSE 28309
// s30 := true ;
28301: LD_ADDR_EXP 122
28305: PUSH
28306: LD_INT 1
28308: ST_TO_ADDR
// if p3 = 118 then
28309: LD_VAR 0 3
28313: PUSH
28314: LD_INT 118
28316: EQUAL
28317: IFFALSE 28327
// s60 := true ;
28319: LD_ADDR_EXP 123
28323: PUSH
28324: LD_INT 1
28326: ST_TO_ADDR
// end ; if p2 = 101 then
28327: LD_VAR 0 2
28331: PUSH
28332: LD_INT 101
28334: EQUAL
28335: IFFALSE 28463
// begin case p3 of 1 :
28337: LD_VAR 0 3
28341: PUSH
28342: LD_INT 1
28344: DOUBLE
28345: EQUAL
28346: IFTRUE 28350
28348: GO 28357
28350: POP
// hHackUnlimitedResources ; 2 :
28351: CALL 40561 0 0
28355: GO 28463
28357: LD_INT 2
28359: DOUBLE
28360: EQUAL
28361: IFTRUE 28365
28363: GO 28372
28365: POP
// hHackSetLevel10 ; 3 :
28366: CALL 40694 0 0
28370: GO 28463
28372: LD_INT 3
28374: DOUBLE
28375: EQUAL
28376: IFTRUE 28380
28378: GO 28387
28380: POP
// hHackSetLevel10YourUnits ; 4 :
28381: CALL 40779 0 0
28385: GO 28463
28387: LD_INT 4
28389: DOUBLE
28390: EQUAL
28391: IFTRUE 28395
28393: GO 28402
28395: POP
// hHackInvincible ; 5 :
28396: CALL 41227 0 0
28400: GO 28463
28402: LD_INT 5
28404: DOUBLE
28405: EQUAL
28406: IFTRUE 28410
28408: GO 28417
28410: POP
// hHackInvisible ; 6 :
28411: CALL 41338 0 0
28415: GO 28463
28417: LD_INT 6
28419: DOUBLE
28420: EQUAL
28421: IFTRUE 28425
28423: GO 28432
28425: POP
// hHackChangeYourSide ; 7 :
28426: CALL 41395 0 0
28430: GO 28463
28432: LD_INT 7
28434: DOUBLE
28435: EQUAL
28436: IFTRUE 28440
28438: GO 28447
28440: POP
// hHackChangeUnitSide ; 8 :
28441: CALL 41437 0 0
28445: GO 28463
28447: LD_INT 8
28449: DOUBLE
28450: EQUAL
28451: IFTRUE 28455
28453: GO 28462
28455: POP
// hHackFog ; end ;
28456: CALL 41538 0 0
28460: GO 28463
28462: POP
// end ; end ;
28463: LD_VAR 0 7
28467: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
28468: GO 28470
28470: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
28471: LD_STRING initStreamRollete();
28473: PPUSH
28474: CALL_OW 559
// InitStreamMode ;
28478: CALL 28490 0 0
// DefineStreamItems ( false ) ;
28482: LD_INT 0
28484: PPUSH
28485: CALL 28954 0 1
// end ;
28489: END
// function InitStreamMode ; begin
28490: LD_INT 0
28492: PPUSH
// streamModeActive := false ;
28493: LD_ADDR_EXP 67
28497: PUSH
28498: LD_INT 0
28500: ST_TO_ADDR
// normalCounter := 36 ;
28501: LD_ADDR_EXP 68
28505: PUSH
28506: LD_INT 36
28508: ST_TO_ADDR
// hardcoreCounter := 18 ;
28509: LD_ADDR_EXP 69
28513: PUSH
28514: LD_INT 18
28516: ST_TO_ADDR
// sRocket := false ;
28517: LD_ADDR_EXP 72
28521: PUSH
28522: LD_INT 0
28524: ST_TO_ADDR
// sSpeed := false ;
28525: LD_ADDR_EXP 71
28529: PUSH
28530: LD_INT 0
28532: ST_TO_ADDR
// sEngine := false ;
28533: LD_ADDR_EXP 73
28537: PUSH
28538: LD_INT 0
28540: ST_TO_ADDR
// sSpec := false ;
28541: LD_ADDR_EXP 70
28545: PUSH
28546: LD_INT 0
28548: ST_TO_ADDR
// sLevel := false ;
28549: LD_ADDR_EXP 74
28553: PUSH
28554: LD_INT 0
28556: ST_TO_ADDR
// sArmoury := false ;
28557: LD_ADDR_EXP 75
28561: PUSH
28562: LD_INT 0
28564: ST_TO_ADDR
// sRadar := false ;
28565: LD_ADDR_EXP 76
28569: PUSH
28570: LD_INT 0
28572: ST_TO_ADDR
// sBunker := false ;
28573: LD_ADDR_EXP 77
28577: PUSH
28578: LD_INT 0
28580: ST_TO_ADDR
// sHack := false ;
28581: LD_ADDR_EXP 78
28585: PUSH
28586: LD_INT 0
28588: ST_TO_ADDR
// sFire := false ;
28589: LD_ADDR_EXP 79
28593: PUSH
28594: LD_INT 0
28596: ST_TO_ADDR
// sRefresh := false ;
28597: LD_ADDR_EXP 80
28601: PUSH
28602: LD_INT 0
28604: ST_TO_ADDR
// sExp := false ;
28605: LD_ADDR_EXP 81
28609: PUSH
28610: LD_INT 0
28612: ST_TO_ADDR
// sDepot := false ;
28613: LD_ADDR_EXP 82
28617: PUSH
28618: LD_INT 0
28620: ST_TO_ADDR
// sFlag := false ;
28621: LD_ADDR_EXP 83
28625: PUSH
28626: LD_INT 0
28628: ST_TO_ADDR
// sKamikadze := false ;
28629: LD_ADDR_EXP 91
28633: PUSH
28634: LD_INT 0
28636: ST_TO_ADDR
// sTroll := false ;
28637: LD_ADDR_EXP 92
28641: PUSH
28642: LD_INT 0
28644: ST_TO_ADDR
// sSlow := false ;
28645: LD_ADDR_EXP 93
28649: PUSH
28650: LD_INT 0
28652: ST_TO_ADDR
// sLack := false ;
28653: LD_ADDR_EXP 94
28657: PUSH
28658: LD_INT 0
28660: ST_TO_ADDR
// sTank := false ;
28661: LD_ADDR_EXP 96
28665: PUSH
28666: LD_INT 0
28668: ST_TO_ADDR
// sRemote := false ;
28669: LD_ADDR_EXP 97
28673: PUSH
28674: LD_INT 0
28676: ST_TO_ADDR
// sPowell := false ;
28677: LD_ADDR_EXP 98
28681: PUSH
28682: LD_INT 0
28684: ST_TO_ADDR
// sTeleport := false ;
28685: LD_ADDR_EXP 101
28689: PUSH
28690: LD_INT 0
28692: ST_TO_ADDR
// sOilTower := false ;
28693: LD_ADDR_EXP 103
28697: PUSH
28698: LD_INT 0
28700: ST_TO_ADDR
// sShovel := false ;
28701: LD_ADDR_EXP 104
28705: PUSH
28706: LD_INT 0
28708: ST_TO_ADDR
// sSheik := false ;
28709: LD_ADDR_EXP 105
28713: PUSH
28714: LD_INT 0
28716: ST_TO_ADDR
// sEarthquake := false ;
28717: LD_ADDR_EXP 107
28721: PUSH
28722: LD_INT 0
28724: ST_TO_ADDR
// sAI := false ;
28725: LD_ADDR_EXP 108
28729: PUSH
28730: LD_INT 0
28732: ST_TO_ADDR
// sCargo := false ;
28733: LD_ADDR_EXP 111
28737: PUSH
28738: LD_INT 0
28740: ST_TO_ADDR
// sDLaser := false ;
28741: LD_ADDR_EXP 112
28745: PUSH
28746: LD_INT 0
28748: ST_TO_ADDR
// sExchange := false ;
28749: LD_ADDR_EXP 113
28753: PUSH
28754: LD_INT 0
28756: ST_TO_ADDR
// sFac := false ;
28757: LD_ADDR_EXP 114
28761: PUSH
28762: LD_INT 0
28764: ST_TO_ADDR
// sPower := false ;
28765: LD_ADDR_EXP 115
28769: PUSH
28770: LD_INT 0
28772: ST_TO_ADDR
// sRandom := false ;
28773: LD_ADDR_EXP 116
28777: PUSH
28778: LD_INT 0
28780: ST_TO_ADDR
// sShield := false ;
28781: LD_ADDR_EXP 117
28785: PUSH
28786: LD_INT 0
28788: ST_TO_ADDR
// sTime := false ;
28789: LD_ADDR_EXP 118
28793: PUSH
28794: LD_INT 0
28796: ST_TO_ADDR
// sTools := false ;
28797: LD_ADDR_EXP 119
28801: PUSH
28802: LD_INT 0
28804: ST_TO_ADDR
// sSold := false ;
28805: LD_ADDR_EXP 84
28809: PUSH
28810: LD_INT 0
28812: ST_TO_ADDR
// sDiff := false ;
28813: LD_ADDR_EXP 85
28817: PUSH
28818: LD_INT 0
28820: ST_TO_ADDR
// sFog := false ;
28821: LD_ADDR_EXP 88
28825: PUSH
28826: LD_INT 0
28828: ST_TO_ADDR
// sReset := false ;
28829: LD_ADDR_EXP 89
28833: PUSH
28834: LD_INT 0
28836: ST_TO_ADDR
// sSun := false ;
28837: LD_ADDR_EXP 90
28841: PUSH
28842: LD_INT 0
28844: ST_TO_ADDR
// sTiger := false ;
28845: LD_ADDR_EXP 86
28849: PUSH
28850: LD_INT 0
28852: ST_TO_ADDR
// sBomb := false ;
28853: LD_ADDR_EXP 87
28857: PUSH
28858: LD_INT 0
28860: ST_TO_ADDR
// sWound := false ;
28861: LD_ADDR_EXP 95
28865: PUSH
28866: LD_INT 0
28868: ST_TO_ADDR
// sBetray := false ;
28869: LD_ADDR_EXP 99
28873: PUSH
28874: LD_INT 0
28876: ST_TO_ADDR
// sContamin := false ;
28877: LD_ADDR_EXP 100
28881: PUSH
28882: LD_INT 0
28884: ST_TO_ADDR
// sOil := false ;
28885: LD_ADDR_EXP 102
28889: PUSH
28890: LD_INT 0
28892: ST_TO_ADDR
// sStu := false ;
28893: LD_ADDR_EXP 106
28897: PUSH
28898: LD_INT 0
28900: ST_TO_ADDR
// sBazooka := false ;
28901: LD_ADDR_EXP 109
28905: PUSH
28906: LD_INT 0
28908: ST_TO_ADDR
// sMortar := false ;
28909: LD_ADDR_EXP 110
28913: PUSH
28914: LD_INT 0
28916: ST_TO_ADDR
// sRanger := false ;
28917: LD_ADDR_EXP 120
28921: PUSH
28922: LD_INT 0
28924: ST_TO_ADDR
// sComputer := false ;
28925: LD_ADDR_EXP 121
28929: PUSH
28930: LD_INT 0
28932: ST_TO_ADDR
// s30 := false ;
28933: LD_ADDR_EXP 122
28937: PUSH
28938: LD_INT 0
28940: ST_TO_ADDR
// s60 := false ;
28941: LD_ADDR_EXP 123
28945: PUSH
28946: LD_INT 0
28948: ST_TO_ADDR
// end ;
28949: LD_VAR 0 1
28953: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
28954: LD_INT 0
28956: PPUSH
28957: PPUSH
28958: PPUSH
28959: PPUSH
28960: PPUSH
28961: PPUSH
28962: PPUSH
// result := [ ] ;
28963: LD_ADDR_VAR 0 2
28967: PUSH
28968: EMPTY
28969: ST_TO_ADDR
// if campaign_id = 1 then
28970: LD_OWVAR 69
28974: PUSH
28975: LD_INT 1
28977: EQUAL
28978: IFFALSE 32144
// begin case mission_number of 1 :
28980: LD_OWVAR 70
28984: PUSH
28985: LD_INT 1
28987: DOUBLE
28988: EQUAL
28989: IFTRUE 28993
28991: GO 29069
28993: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
28994: LD_ADDR_VAR 0 2
28998: PUSH
28999: LD_INT 2
29001: PUSH
29002: LD_INT 4
29004: PUSH
29005: LD_INT 11
29007: PUSH
29008: LD_INT 12
29010: PUSH
29011: LD_INT 15
29013: PUSH
29014: LD_INT 16
29016: PUSH
29017: LD_INT 22
29019: PUSH
29020: LD_INT 23
29022: PUSH
29023: LD_INT 26
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 101
29039: PUSH
29040: LD_INT 102
29042: PUSH
29043: LD_INT 106
29045: PUSH
29046: LD_INT 116
29048: PUSH
29049: LD_INT 117
29051: PUSH
29052: LD_INT 118
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: ST_TO_ADDR
29067: GO 32142
29069: LD_INT 2
29071: DOUBLE
29072: EQUAL
29073: IFTRUE 29077
29075: GO 29161
29077: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
29078: LD_ADDR_VAR 0 2
29082: PUSH
29083: LD_INT 2
29085: PUSH
29086: LD_INT 4
29088: PUSH
29089: LD_INT 11
29091: PUSH
29092: LD_INT 12
29094: PUSH
29095: LD_INT 15
29097: PUSH
29098: LD_INT 16
29100: PUSH
29101: LD_INT 22
29103: PUSH
29104: LD_INT 23
29106: PUSH
29107: LD_INT 26
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 101
29123: PUSH
29124: LD_INT 102
29126: PUSH
29127: LD_INT 105
29129: PUSH
29130: LD_INT 106
29132: PUSH
29133: LD_INT 108
29135: PUSH
29136: LD_INT 116
29138: PUSH
29139: LD_INT 117
29141: PUSH
29142: LD_INT 118
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: ST_TO_ADDR
29159: GO 32142
29161: LD_INT 3
29163: DOUBLE
29164: EQUAL
29165: IFTRUE 29169
29167: GO 29257
29169: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
29170: LD_ADDR_VAR 0 2
29174: PUSH
29175: LD_INT 2
29177: PUSH
29178: LD_INT 4
29180: PUSH
29181: LD_INT 5
29183: PUSH
29184: LD_INT 11
29186: PUSH
29187: LD_INT 12
29189: PUSH
29190: LD_INT 15
29192: PUSH
29193: LD_INT 16
29195: PUSH
29196: LD_INT 22
29198: PUSH
29199: LD_INT 26
29201: PUSH
29202: LD_INT 36
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 101
29219: PUSH
29220: LD_INT 102
29222: PUSH
29223: LD_INT 105
29225: PUSH
29226: LD_INT 106
29228: PUSH
29229: LD_INT 108
29231: PUSH
29232: LD_INT 116
29234: PUSH
29235: LD_INT 117
29237: PUSH
29238: LD_INT 118
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: ST_TO_ADDR
29255: GO 32142
29257: LD_INT 4
29259: DOUBLE
29260: EQUAL
29261: IFTRUE 29265
29263: GO 29361
29265: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
29266: LD_ADDR_VAR 0 2
29270: PUSH
29271: LD_INT 2
29273: PUSH
29274: LD_INT 4
29276: PUSH
29277: LD_INT 5
29279: PUSH
29280: LD_INT 8
29282: PUSH
29283: LD_INT 11
29285: PUSH
29286: LD_INT 12
29288: PUSH
29289: LD_INT 15
29291: PUSH
29292: LD_INT 16
29294: PUSH
29295: LD_INT 22
29297: PUSH
29298: LD_INT 23
29300: PUSH
29301: LD_INT 26
29303: PUSH
29304: LD_INT 36
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 101
29323: PUSH
29324: LD_INT 102
29326: PUSH
29327: LD_INT 105
29329: PUSH
29330: LD_INT 106
29332: PUSH
29333: LD_INT 108
29335: PUSH
29336: LD_INT 116
29338: PUSH
29339: LD_INT 117
29341: PUSH
29342: LD_INT 118
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: ST_TO_ADDR
29359: GO 32142
29361: LD_INT 5
29363: DOUBLE
29364: EQUAL
29365: IFTRUE 29369
29367: GO 29481
29369: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
29370: LD_ADDR_VAR 0 2
29374: PUSH
29375: LD_INT 2
29377: PUSH
29378: LD_INT 4
29380: PUSH
29381: LD_INT 5
29383: PUSH
29384: LD_INT 6
29386: PUSH
29387: LD_INT 8
29389: PUSH
29390: LD_INT 11
29392: PUSH
29393: LD_INT 12
29395: PUSH
29396: LD_INT 15
29398: PUSH
29399: LD_INT 16
29401: PUSH
29402: LD_INT 22
29404: PUSH
29405: LD_INT 23
29407: PUSH
29408: LD_INT 25
29410: PUSH
29411: LD_INT 26
29413: PUSH
29414: LD_INT 36
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 101
29435: PUSH
29436: LD_INT 102
29438: PUSH
29439: LD_INT 105
29441: PUSH
29442: LD_INT 106
29444: PUSH
29445: LD_INT 108
29447: PUSH
29448: LD_INT 109
29450: PUSH
29451: LD_INT 112
29453: PUSH
29454: LD_INT 116
29456: PUSH
29457: LD_INT 117
29459: PUSH
29460: LD_INT 118
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: ST_TO_ADDR
29479: GO 32142
29481: LD_INT 6
29483: DOUBLE
29484: EQUAL
29485: IFTRUE 29489
29487: GO 29621
29489: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
29490: LD_ADDR_VAR 0 2
29494: PUSH
29495: LD_INT 2
29497: PUSH
29498: LD_INT 4
29500: PUSH
29501: LD_INT 5
29503: PUSH
29504: LD_INT 6
29506: PUSH
29507: LD_INT 8
29509: PUSH
29510: LD_INT 11
29512: PUSH
29513: LD_INT 12
29515: PUSH
29516: LD_INT 15
29518: PUSH
29519: LD_INT 16
29521: PUSH
29522: LD_INT 20
29524: PUSH
29525: LD_INT 21
29527: PUSH
29528: LD_INT 22
29530: PUSH
29531: LD_INT 23
29533: PUSH
29534: LD_INT 25
29536: PUSH
29537: LD_INT 26
29539: PUSH
29540: LD_INT 30
29542: PUSH
29543: LD_INT 31
29545: PUSH
29546: LD_INT 32
29548: PUSH
29549: LD_INT 36
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 101
29575: PUSH
29576: LD_INT 102
29578: PUSH
29579: LD_INT 105
29581: PUSH
29582: LD_INT 106
29584: PUSH
29585: LD_INT 108
29587: PUSH
29588: LD_INT 109
29590: PUSH
29591: LD_INT 112
29593: PUSH
29594: LD_INT 116
29596: PUSH
29597: LD_INT 117
29599: PUSH
29600: LD_INT 118
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: ST_TO_ADDR
29619: GO 32142
29621: LD_INT 7
29623: DOUBLE
29624: EQUAL
29625: IFTRUE 29629
29627: GO 29741
29629: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
29630: LD_ADDR_VAR 0 2
29634: PUSH
29635: LD_INT 2
29637: PUSH
29638: LD_INT 4
29640: PUSH
29641: LD_INT 5
29643: PUSH
29644: LD_INT 7
29646: PUSH
29647: LD_INT 11
29649: PUSH
29650: LD_INT 12
29652: PUSH
29653: LD_INT 15
29655: PUSH
29656: LD_INT 16
29658: PUSH
29659: LD_INT 20
29661: PUSH
29662: LD_INT 21
29664: PUSH
29665: LD_INT 22
29667: PUSH
29668: LD_INT 23
29670: PUSH
29671: LD_INT 25
29673: PUSH
29674: LD_INT 26
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 101
29695: PUSH
29696: LD_INT 102
29698: PUSH
29699: LD_INT 103
29701: PUSH
29702: LD_INT 105
29704: PUSH
29705: LD_INT 106
29707: PUSH
29708: LD_INT 108
29710: PUSH
29711: LD_INT 112
29713: PUSH
29714: LD_INT 116
29716: PUSH
29717: LD_INT 117
29719: PUSH
29720: LD_INT 118
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: ST_TO_ADDR
29739: GO 32142
29741: LD_INT 8
29743: DOUBLE
29744: EQUAL
29745: IFTRUE 29749
29747: GO 29889
29749: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
29750: LD_ADDR_VAR 0 2
29754: PUSH
29755: LD_INT 2
29757: PUSH
29758: LD_INT 4
29760: PUSH
29761: LD_INT 5
29763: PUSH
29764: LD_INT 6
29766: PUSH
29767: LD_INT 7
29769: PUSH
29770: LD_INT 8
29772: PUSH
29773: LD_INT 11
29775: PUSH
29776: LD_INT 12
29778: PUSH
29779: LD_INT 15
29781: PUSH
29782: LD_INT 16
29784: PUSH
29785: LD_INT 20
29787: PUSH
29788: LD_INT 21
29790: PUSH
29791: LD_INT 22
29793: PUSH
29794: LD_INT 23
29796: PUSH
29797: LD_INT 25
29799: PUSH
29800: LD_INT 26
29802: PUSH
29803: LD_INT 30
29805: PUSH
29806: LD_INT 31
29808: PUSH
29809: LD_INT 32
29811: PUSH
29812: LD_INT 36
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 101
29839: PUSH
29840: LD_INT 102
29842: PUSH
29843: LD_INT 103
29845: PUSH
29846: LD_INT 105
29848: PUSH
29849: LD_INT 106
29851: PUSH
29852: LD_INT 108
29854: PUSH
29855: LD_INT 109
29857: PUSH
29858: LD_INT 112
29860: PUSH
29861: LD_INT 116
29863: PUSH
29864: LD_INT 117
29866: PUSH
29867: LD_INT 118
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: ST_TO_ADDR
29887: GO 32142
29889: LD_INT 9
29891: DOUBLE
29892: EQUAL
29893: IFTRUE 29897
29895: GO 30045
29897: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
29898: LD_ADDR_VAR 0 2
29902: PUSH
29903: LD_INT 2
29905: PUSH
29906: LD_INT 4
29908: PUSH
29909: LD_INT 5
29911: PUSH
29912: LD_INT 6
29914: PUSH
29915: LD_INT 7
29917: PUSH
29918: LD_INT 8
29920: PUSH
29921: LD_INT 11
29923: PUSH
29924: LD_INT 12
29926: PUSH
29927: LD_INT 15
29929: PUSH
29930: LD_INT 16
29932: PUSH
29933: LD_INT 20
29935: PUSH
29936: LD_INT 21
29938: PUSH
29939: LD_INT 22
29941: PUSH
29942: LD_INT 23
29944: PUSH
29945: LD_INT 25
29947: PUSH
29948: LD_INT 26
29950: PUSH
29951: LD_INT 28
29953: PUSH
29954: LD_INT 30
29956: PUSH
29957: LD_INT 31
29959: PUSH
29960: LD_INT 32
29962: PUSH
29963: LD_INT 36
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 101
29991: PUSH
29992: LD_INT 102
29994: PUSH
29995: LD_INT 103
29997: PUSH
29998: LD_INT 105
30000: PUSH
30001: LD_INT 106
30003: PUSH
30004: LD_INT 108
30006: PUSH
30007: LD_INT 109
30009: PUSH
30010: LD_INT 112
30012: PUSH
30013: LD_INT 114
30015: PUSH
30016: LD_INT 116
30018: PUSH
30019: LD_INT 117
30021: PUSH
30022: LD_INT 118
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: ST_TO_ADDR
30043: GO 32142
30045: LD_INT 10
30047: DOUBLE
30048: EQUAL
30049: IFTRUE 30053
30051: GO 30249
30053: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
30054: LD_ADDR_VAR 0 2
30058: PUSH
30059: LD_INT 2
30061: PUSH
30062: LD_INT 4
30064: PUSH
30065: LD_INT 5
30067: PUSH
30068: LD_INT 6
30070: PUSH
30071: LD_INT 7
30073: PUSH
30074: LD_INT 8
30076: PUSH
30077: LD_INT 9
30079: PUSH
30080: LD_INT 10
30082: PUSH
30083: LD_INT 11
30085: PUSH
30086: LD_INT 12
30088: PUSH
30089: LD_INT 13
30091: PUSH
30092: LD_INT 14
30094: PUSH
30095: LD_INT 15
30097: PUSH
30098: LD_INT 16
30100: PUSH
30101: LD_INT 17
30103: PUSH
30104: LD_INT 18
30106: PUSH
30107: LD_INT 19
30109: PUSH
30110: LD_INT 20
30112: PUSH
30113: LD_INT 21
30115: PUSH
30116: LD_INT 22
30118: PUSH
30119: LD_INT 23
30121: PUSH
30122: LD_INT 24
30124: PUSH
30125: LD_INT 25
30127: PUSH
30128: LD_INT 26
30130: PUSH
30131: LD_INT 28
30133: PUSH
30134: LD_INT 30
30136: PUSH
30137: LD_INT 31
30139: PUSH
30140: LD_INT 32
30142: PUSH
30143: LD_INT 36
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 101
30179: PUSH
30180: LD_INT 102
30182: PUSH
30183: LD_INT 103
30185: PUSH
30186: LD_INT 104
30188: PUSH
30189: LD_INT 105
30191: PUSH
30192: LD_INT 106
30194: PUSH
30195: LD_INT 107
30197: PUSH
30198: LD_INT 108
30200: PUSH
30201: LD_INT 109
30203: PUSH
30204: LD_INT 110
30206: PUSH
30207: LD_INT 111
30209: PUSH
30210: LD_INT 112
30212: PUSH
30213: LD_INT 114
30215: PUSH
30216: LD_INT 116
30218: PUSH
30219: LD_INT 117
30221: PUSH
30222: LD_INT 118
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: ST_TO_ADDR
30247: GO 32142
30249: LD_INT 11
30251: DOUBLE
30252: EQUAL
30253: IFTRUE 30257
30255: GO 30461
30257: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
30258: LD_ADDR_VAR 0 2
30262: PUSH
30263: LD_INT 2
30265: PUSH
30266: LD_INT 3
30268: PUSH
30269: LD_INT 4
30271: PUSH
30272: LD_INT 5
30274: PUSH
30275: LD_INT 6
30277: PUSH
30278: LD_INT 7
30280: PUSH
30281: LD_INT 8
30283: PUSH
30284: LD_INT 9
30286: PUSH
30287: LD_INT 10
30289: PUSH
30290: LD_INT 11
30292: PUSH
30293: LD_INT 12
30295: PUSH
30296: LD_INT 13
30298: PUSH
30299: LD_INT 14
30301: PUSH
30302: LD_INT 15
30304: PUSH
30305: LD_INT 16
30307: PUSH
30308: LD_INT 17
30310: PUSH
30311: LD_INT 18
30313: PUSH
30314: LD_INT 19
30316: PUSH
30317: LD_INT 20
30319: PUSH
30320: LD_INT 21
30322: PUSH
30323: LD_INT 22
30325: PUSH
30326: LD_INT 23
30328: PUSH
30329: LD_INT 24
30331: PUSH
30332: LD_INT 25
30334: PUSH
30335: LD_INT 26
30337: PUSH
30338: LD_INT 28
30340: PUSH
30341: LD_INT 30
30343: PUSH
30344: LD_INT 31
30346: PUSH
30347: LD_INT 32
30349: PUSH
30350: LD_INT 34
30352: PUSH
30353: LD_INT 36
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 101
30391: PUSH
30392: LD_INT 102
30394: PUSH
30395: LD_INT 103
30397: PUSH
30398: LD_INT 104
30400: PUSH
30401: LD_INT 105
30403: PUSH
30404: LD_INT 106
30406: PUSH
30407: LD_INT 107
30409: PUSH
30410: LD_INT 108
30412: PUSH
30413: LD_INT 109
30415: PUSH
30416: LD_INT 110
30418: PUSH
30419: LD_INT 111
30421: PUSH
30422: LD_INT 112
30424: PUSH
30425: LD_INT 114
30427: PUSH
30428: LD_INT 116
30430: PUSH
30431: LD_INT 117
30433: PUSH
30434: LD_INT 118
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: ST_TO_ADDR
30459: GO 32142
30461: LD_INT 12
30463: DOUBLE
30464: EQUAL
30465: IFTRUE 30469
30467: GO 30689
30469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
30470: LD_ADDR_VAR 0 2
30474: PUSH
30475: LD_INT 1
30477: PUSH
30478: LD_INT 2
30480: PUSH
30481: LD_INT 3
30483: PUSH
30484: LD_INT 4
30486: PUSH
30487: LD_INT 5
30489: PUSH
30490: LD_INT 6
30492: PUSH
30493: LD_INT 7
30495: PUSH
30496: LD_INT 8
30498: PUSH
30499: LD_INT 9
30501: PUSH
30502: LD_INT 10
30504: PUSH
30505: LD_INT 11
30507: PUSH
30508: LD_INT 12
30510: PUSH
30511: LD_INT 13
30513: PUSH
30514: LD_INT 14
30516: PUSH
30517: LD_INT 15
30519: PUSH
30520: LD_INT 16
30522: PUSH
30523: LD_INT 17
30525: PUSH
30526: LD_INT 18
30528: PUSH
30529: LD_INT 19
30531: PUSH
30532: LD_INT 20
30534: PUSH
30535: LD_INT 21
30537: PUSH
30538: LD_INT 22
30540: PUSH
30541: LD_INT 23
30543: PUSH
30544: LD_INT 24
30546: PUSH
30547: LD_INT 25
30549: PUSH
30550: LD_INT 26
30552: PUSH
30553: LD_INT 27
30555: PUSH
30556: LD_INT 28
30558: PUSH
30559: LD_INT 30
30561: PUSH
30562: LD_INT 31
30564: PUSH
30565: LD_INT 32
30567: PUSH
30568: LD_INT 33
30570: PUSH
30571: LD_INT 34
30573: PUSH
30574: LD_INT 36
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 101
30615: PUSH
30616: LD_INT 102
30618: PUSH
30619: LD_INT 103
30621: PUSH
30622: LD_INT 104
30624: PUSH
30625: LD_INT 105
30627: PUSH
30628: LD_INT 106
30630: PUSH
30631: LD_INT 107
30633: PUSH
30634: LD_INT 108
30636: PUSH
30637: LD_INT 109
30639: PUSH
30640: LD_INT 110
30642: PUSH
30643: LD_INT 111
30645: PUSH
30646: LD_INT 112
30648: PUSH
30649: LD_INT 113
30651: PUSH
30652: LD_INT 114
30654: PUSH
30655: LD_INT 116
30657: PUSH
30658: LD_INT 117
30660: PUSH
30661: LD_INT 118
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: ST_TO_ADDR
30687: GO 32142
30689: LD_INT 13
30691: DOUBLE
30692: EQUAL
30693: IFTRUE 30697
30695: GO 30905
30697: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
30698: LD_ADDR_VAR 0 2
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: LD_INT 2
30708: PUSH
30709: LD_INT 3
30711: PUSH
30712: LD_INT 4
30714: PUSH
30715: LD_INT 5
30717: PUSH
30718: LD_INT 8
30720: PUSH
30721: LD_INT 9
30723: PUSH
30724: LD_INT 10
30726: PUSH
30727: LD_INT 11
30729: PUSH
30730: LD_INT 12
30732: PUSH
30733: LD_INT 14
30735: PUSH
30736: LD_INT 15
30738: PUSH
30739: LD_INT 16
30741: PUSH
30742: LD_INT 17
30744: PUSH
30745: LD_INT 18
30747: PUSH
30748: LD_INT 19
30750: PUSH
30751: LD_INT 20
30753: PUSH
30754: LD_INT 21
30756: PUSH
30757: LD_INT 22
30759: PUSH
30760: LD_INT 23
30762: PUSH
30763: LD_INT 24
30765: PUSH
30766: LD_INT 25
30768: PUSH
30769: LD_INT 26
30771: PUSH
30772: LD_INT 27
30774: PUSH
30775: LD_INT 28
30777: PUSH
30778: LD_INT 30
30780: PUSH
30781: LD_INT 31
30783: PUSH
30784: LD_INT 32
30786: PUSH
30787: LD_INT 33
30789: PUSH
30790: LD_INT 34
30792: PUSH
30793: LD_INT 36
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 101
30831: PUSH
30832: LD_INT 102
30834: PUSH
30835: LD_INT 103
30837: PUSH
30838: LD_INT 104
30840: PUSH
30841: LD_INT 105
30843: PUSH
30844: LD_INT 106
30846: PUSH
30847: LD_INT 107
30849: PUSH
30850: LD_INT 108
30852: PUSH
30853: LD_INT 109
30855: PUSH
30856: LD_INT 110
30858: PUSH
30859: LD_INT 111
30861: PUSH
30862: LD_INT 112
30864: PUSH
30865: LD_INT 113
30867: PUSH
30868: LD_INT 114
30870: PUSH
30871: LD_INT 116
30873: PUSH
30874: LD_INT 117
30876: PUSH
30877: LD_INT 118
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: ST_TO_ADDR
30903: GO 32142
30905: LD_INT 14
30907: DOUBLE
30908: EQUAL
30909: IFTRUE 30913
30911: GO 31137
30913: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
30914: LD_ADDR_VAR 0 2
30918: PUSH
30919: LD_INT 1
30921: PUSH
30922: LD_INT 2
30924: PUSH
30925: LD_INT 3
30927: PUSH
30928: LD_INT 4
30930: PUSH
30931: LD_INT 5
30933: PUSH
30934: LD_INT 6
30936: PUSH
30937: LD_INT 7
30939: PUSH
30940: LD_INT 8
30942: PUSH
30943: LD_INT 9
30945: PUSH
30946: LD_INT 10
30948: PUSH
30949: LD_INT 11
30951: PUSH
30952: LD_INT 12
30954: PUSH
30955: LD_INT 13
30957: PUSH
30958: LD_INT 14
30960: PUSH
30961: LD_INT 15
30963: PUSH
30964: LD_INT 16
30966: PUSH
30967: LD_INT 17
30969: PUSH
30970: LD_INT 18
30972: PUSH
30973: LD_INT 19
30975: PUSH
30976: LD_INT 20
30978: PUSH
30979: LD_INT 21
30981: PUSH
30982: LD_INT 22
30984: PUSH
30985: LD_INT 23
30987: PUSH
30988: LD_INT 24
30990: PUSH
30991: LD_INT 25
30993: PUSH
30994: LD_INT 26
30996: PUSH
30997: LD_INT 27
30999: PUSH
31000: LD_INT 28
31002: PUSH
31003: LD_INT 29
31005: PUSH
31006: LD_INT 30
31008: PUSH
31009: LD_INT 31
31011: PUSH
31012: LD_INT 32
31014: PUSH
31015: LD_INT 33
31017: PUSH
31018: LD_INT 34
31020: PUSH
31021: LD_INT 36
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 101
31063: PUSH
31064: LD_INT 102
31066: PUSH
31067: LD_INT 103
31069: PUSH
31070: LD_INT 104
31072: PUSH
31073: LD_INT 105
31075: PUSH
31076: LD_INT 106
31078: PUSH
31079: LD_INT 107
31081: PUSH
31082: LD_INT 108
31084: PUSH
31085: LD_INT 109
31087: PUSH
31088: LD_INT 110
31090: PUSH
31091: LD_INT 111
31093: PUSH
31094: LD_INT 112
31096: PUSH
31097: LD_INT 113
31099: PUSH
31100: LD_INT 114
31102: PUSH
31103: LD_INT 116
31105: PUSH
31106: LD_INT 117
31108: PUSH
31109: LD_INT 118
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: ST_TO_ADDR
31135: GO 32142
31137: LD_INT 15
31139: DOUBLE
31140: EQUAL
31141: IFTRUE 31145
31143: GO 31369
31145: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
31146: LD_ADDR_VAR 0 2
31150: PUSH
31151: LD_INT 1
31153: PUSH
31154: LD_INT 2
31156: PUSH
31157: LD_INT 3
31159: PUSH
31160: LD_INT 4
31162: PUSH
31163: LD_INT 5
31165: PUSH
31166: LD_INT 6
31168: PUSH
31169: LD_INT 7
31171: PUSH
31172: LD_INT 8
31174: PUSH
31175: LD_INT 9
31177: PUSH
31178: LD_INT 10
31180: PUSH
31181: LD_INT 11
31183: PUSH
31184: LD_INT 12
31186: PUSH
31187: LD_INT 13
31189: PUSH
31190: LD_INT 14
31192: PUSH
31193: LD_INT 15
31195: PUSH
31196: LD_INT 16
31198: PUSH
31199: LD_INT 17
31201: PUSH
31202: LD_INT 18
31204: PUSH
31205: LD_INT 19
31207: PUSH
31208: LD_INT 20
31210: PUSH
31211: LD_INT 21
31213: PUSH
31214: LD_INT 22
31216: PUSH
31217: LD_INT 23
31219: PUSH
31220: LD_INT 24
31222: PUSH
31223: LD_INT 25
31225: PUSH
31226: LD_INT 26
31228: PUSH
31229: LD_INT 27
31231: PUSH
31232: LD_INT 28
31234: PUSH
31235: LD_INT 29
31237: PUSH
31238: LD_INT 30
31240: PUSH
31241: LD_INT 31
31243: PUSH
31244: LD_INT 32
31246: PUSH
31247: LD_INT 33
31249: PUSH
31250: LD_INT 34
31252: PUSH
31253: LD_INT 36
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 101
31295: PUSH
31296: LD_INT 102
31298: PUSH
31299: LD_INT 103
31301: PUSH
31302: LD_INT 104
31304: PUSH
31305: LD_INT 105
31307: PUSH
31308: LD_INT 106
31310: PUSH
31311: LD_INT 107
31313: PUSH
31314: LD_INT 108
31316: PUSH
31317: LD_INT 109
31319: PUSH
31320: LD_INT 110
31322: PUSH
31323: LD_INT 111
31325: PUSH
31326: LD_INT 112
31328: PUSH
31329: LD_INT 113
31331: PUSH
31332: LD_INT 114
31334: PUSH
31335: LD_INT 116
31337: PUSH
31338: LD_INT 117
31340: PUSH
31341: LD_INT 118
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: ST_TO_ADDR
31367: GO 32142
31369: LD_INT 16
31371: DOUBLE
31372: EQUAL
31373: IFTRUE 31377
31375: GO 31513
31377: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
31378: LD_ADDR_VAR 0 2
31382: PUSH
31383: LD_INT 2
31385: PUSH
31386: LD_INT 4
31388: PUSH
31389: LD_INT 5
31391: PUSH
31392: LD_INT 7
31394: PUSH
31395: LD_INT 11
31397: PUSH
31398: LD_INT 12
31400: PUSH
31401: LD_INT 15
31403: PUSH
31404: LD_INT 16
31406: PUSH
31407: LD_INT 20
31409: PUSH
31410: LD_INT 21
31412: PUSH
31413: LD_INT 22
31415: PUSH
31416: LD_INT 23
31418: PUSH
31419: LD_INT 25
31421: PUSH
31422: LD_INT 26
31424: PUSH
31425: LD_INT 30
31427: PUSH
31428: LD_INT 31
31430: PUSH
31431: LD_INT 32
31433: PUSH
31434: LD_INT 33
31436: PUSH
31437: LD_INT 34
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 101
31463: PUSH
31464: LD_INT 102
31466: PUSH
31467: LD_INT 103
31469: PUSH
31470: LD_INT 106
31472: PUSH
31473: LD_INT 108
31475: PUSH
31476: LD_INT 112
31478: PUSH
31479: LD_INT 113
31481: PUSH
31482: LD_INT 114
31484: PUSH
31485: LD_INT 116
31487: PUSH
31488: LD_INT 117
31490: PUSH
31491: LD_INT 118
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: ST_TO_ADDR
31511: GO 32142
31513: LD_INT 17
31515: DOUBLE
31516: EQUAL
31517: IFTRUE 31521
31519: GO 31745
31521: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
31522: LD_ADDR_VAR 0 2
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: LD_INT 2
31532: PUSH
31533: LD_INT 3
31535: PUSH
31536: LD_INT 4
31538: PUSH
31539: LD_INT 5
31541: PUSH
31542: LD_INT 6
31544: PUSH
31545: LD_INT 7
31547: PUSH
31548: LD_INT 8
31550: PUSH
31551: LD_INT 9
31553: PUSH
31554: LD_INT 10
31556: PUSH
31557: LD_INT 11
31559: PUSH
31560: LD_INT 12
31562: PUSH
31563: LD_INT 13
31565: PUSH
31566: LD_INT 14
31568: PUSH
31569: LD_INT 15
31571: PUSH
31572: LD_INT 16
31574: PUSH
31575: LD_INT 17
31577: PUSH
31578: LD_INT 18
31580: PUSH
31581: LD_INT 19
31583: PUSH
31584: LD_INT 20
31586: PUSH
31587: LD_INT 21
31589: PUSH
31590: LD_INT 22
31592: PUSH
31593: LD_INT 23
31595: PUSH
31596: LD_INT 24
31598: PUSH
31599: LD_INT 25
31601: PUSH
31602: LD_INT 26
31604: PUSH
31605: LD_INT 27
31607: PUSH
31608: LD_INT 28
31610: PUSH
31611: LD_INT 29
31613: PUSH
31614: LD_INT 30
31616: PUSH
31617: LD_INT 31
31619: PUSH
31620: LD_INT 32
31622: PUSH
31623: LD_INT 33
31625: PUSH
31626: LD_INT 34
31628: PUSH
31629: LD_INT 36
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 101
31671: PUSH
31672: LD_INT 102
31674: PUSH
31675: LD_INT 103
31677: PUSH
31678: LD_INT 104
31680: PUSH
31681: LD_INT 105
31683: PUSH
31684: LD_INT 106
31686: PUSH
31687: LD_INT 107
31689: PUSH
31690: LD_INT 108
31692: PUSH
31693: LD_INT 109
31695: PUSH
31696: LD_INT 110
31698: PUSH
31699: LD_INT 111
31701: PUSH
31702: LD_INT 112
31704: PUSH
31705: LD_INT 113
31707: PUSH
31708: LD_INT 114
31710: PUSH
31711: LD_INT 116
31713: PUSH
31714: LD_INT 117
31716: PUSH
31717: LD_INT 118
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: ST_TO_ADDR
31743: GO 32142
31745: LD_INT 18
31747: DOUBLE
31748: EQUAL
31749: IFTRUE 31753
31751: GO 31901
31753: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
31754: LD_ADDR_VAR 0 2
31758: PUSH
31759: LD_INT 2
31761: PUSH
31762: LD_INT 4
31764: PUSH
31765: LD_INT 5
31767: PUSH
31768: LD_INT 7
31770: PUSH
31771: LD_INT 11
31773: PUSH
31774: LD_INT 12
31776: PUSH
31777: LD_INT 15
31779: PUSH
31780: LD_INT 16
31782: PUSH
31783: LD_INT 20
31785: PUSH
31786: LD_INT 21
31788: PUSH
31789: LD_INT 22
31791: PUSH
31792: LD_INT 23
31794: PUSH
31795: LD_INT 25
31797: PUSH
31798: LD_INT 26
31800: PUSH
31801: LD_INT 30
31803: PUSH
31804: LD_INT 31
31806: PUSH
31807: LD_INT 32
31809: PUSH
31810: LD_INT 33
31812: PUSH
31813: LD_INT 34
31815: PUSH
31816: LD_INT 35
31818: PUSH
31819: LD_INT 36
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 101
31847: PUSH
31848: LD_INT 102
31850: PUSH
31851: LD_INT 103
31853: PUSH
31854: LD_INT 106
31856: PUSH
31857: LD_INT 108
31859: PUSH
31860: LD_INT 112
31862: PUSH
31863: LD_INT 113
31865: PUSH
31866: LD_INT 114
31868: PUSH
31869: LD_INT 115
31871: PUSH
31872: LD_INT 116
31874: PUSH
31875: LD_INT 117
31877: PUSH
31878: LD_INT 118
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: ST_TO_ADDR
31899: GO 32142
31901: LD_INT 19
31903: DOUBLE
31904: EQUAL
31905: IFTRUE 31909
31907: GO 32141
31909: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
31910: LD_ADDR_VAR 0 2
31914: PUSH
31915: LD_INT 1
31917: PUSH
31918: LD_INT 2
31920: PUSH
31921: LD_INT 3
31923: PUSH
31924: LD_INT 4
31926: PUSH
31927: LD_INT 5
31929: PUSH
31930: LD_INT 6
31932: PUSH
31933: LD_INT 7
31935: PUSH
31936: LD_INT 8
31938: PUSH
31939: LD_INT 9
31941: PUSH
31942: LD_INT 10
31944: PUSH
31945: LD_INT 11
31947: PUSH
31948: LD_INT 12
31950: PUSH
31951: LD_INT 13
31953: PUSH
31954: LD_INT 14
31956: PUSH
31957: LD_INT 15
31959: PUSH
31960: LD_INT 16
31962: PUSH
31963: LD_INT 17
31965: PUSH
31966: LD_INT 18
31968: PUSH
31969: LD_INT 19
31971: PUSH
31972: LD_INT 20
31974: PUSH
31975: LD_INT 21
31977: PUSH
31978: LD_INT 22
31980: PUSH
31981: LD_INT 23
31983: PUSH
31984: LD_INT 24
31986: PUSH
31987: LD_INT 25
31989: PUSH
31990: LD_INT 26
31992: PUSH
31993: LD_INT 27
31995: PUSH
31996: LD_INT 28
31998: PUSH
31999: LD_INT 29
32001: PUSH
32002: LD_INT 30
32004: PUSH
32005: LD_INT 31
32007: PUSH
32008: LD_INT 32
32010: PUSH
32011: LD_INT 33
32013: PUSH
32014: LD_INT 34
32016: PUSH
32017: LD_INT 35
32019: PUSH
32020: LD_INT 36
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 101
32063: PUSH
32064: LD_INT 102
32066: PUSH
32067: LD_INT 103
32069: PUSH
32070: LD_INT 104
32072: PUSH
32073: LD_INT 105
32075: PUSH
32076: LD_INT 106
32078: PUSH
32079: LD_INT 107
32081: PUSH
32082: LD_INT 108
32084: PUSH
32085: LD_INT 109
32087: PUSH
32088: LD_INT 110
32090: PUSH
32091: LD_INT 111
32093: PUSH
32094: LD_INT 112
32096: PUSH
32097: LD_INT 113
32099: PUSH
32100: LD_INT 114
32102: PUSH
32103: LD_INT 115
32105: PUSH
32106: LD_INT 116
32108: PUSH
32109: LD_INT 117
32111: PUSH
32112: LD_INT 118
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: ST_TO_ADDR
32139: GO 32142
32141: POP
// end else
32142: GO 32373
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
32144: LD_ADDR_VAR 0 2
32148: PUSH
32149: LD_INT 1
32151: PUSH
32152: LD_INT 2
32154: PUSH
32155: LD_INT 3
32157: PUSH
32158: LD_INT 4
32160: PUSH
32161: LD_INT 5
32163: PUSH
32164: LD_INT 6
32166: PUSH
32167: LD_INT 7
32169: PUSH
32170: LD_INT 8
32172: PUSH
32173: LD_INT 9
32175: PUSH
32176: LD_INT 10
32178: PUSH
32179: LD_INT 11
32181: PUSH
32182: LD_INT 12
32184: PUSH
32185: LD_INT 13
32187: PUSH
32188: LD_INT 14
32190: PUSH
32191: LD_INT 15
32193: PUSH
32194: LD_INT 16
32196: PUSH
32197: LD_INT 17
32199: PUSH
32200: LD_INT 18
32202: PUSH
32203: LD_INT 19
32205: PUSH
32206: LD_INT 20
32208: PUSH
32209: LD_INT 21
32211: PUSH
32212: LD_INT 22
32214: PUSH
32215: LD_INT 23
32217: PUSH
32218: LD_INT 24
32220: PUSH
32221: LD_INT 25
32223: PUSH
32224: LD_INT 26
32226: PUSH
32227: LD_INT 27
32229: PUSH
32230: LD_INT 28
32232: PUSH
32233: LD_INT 29
32235: PUSH
32236: LD_INT 30
32238: PUSH
32239: LD_INT 31
32241: PUSH
32242: LD_INT 32
32244: PUSH
32245: LD_INT 33
32247: PUSH
32248: LD_INT 34
32250: PUSH
32251: LD_INT 35
32253: PUSH
32254: LD_INT 36
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 101
32297: PUSH
32298: LD_INT 102
32300: PUSH
32301: LD_INT 103
32303: PUSH
32304: LD_INT 104
32306: PUSH
32307: LD_INT 105
32309: PUSH
32310: LD_INT 106
32312: PUSH
32313: LD_INT 107
32315: PUSH
32316: LD_INT 108
32318: PUSH
32319: LD_INT 109
32321: PUSH
32322: LD_INT 110
32324: PUSH
32325: LD_INT 111
32327: PUSH
32328: LD_INT 112
32330: PUSH
32331: LD_INT 113
32333: PUSH
32334: LD_INT 114
32336: PUSH
32337: LD_INT 115
32339: PUSH
32340: LD_INT 116
32342: PUSH
32343: LD_INT 117
32345: PUSH
32346: LD_INT 118
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: ST_TO_ADDR
// if result then
32373: LD_VAR 0 2
32377: IFFALSE 33163
// begin normal :=  ;
32379: LD_ADDR_VAR 0 5
32383: PUSH
32384: LD_STRING 
32386: ST_TO_ADDR
// hardcore :=  ;
32387: LD_ADDR_VAR 0 6
32391: PUSH
32392: LD_STRING 
32394: ST_TO_ADDR
// active :=  ;
32395: LD_ADDR_VAR 0 7
32399: PUSH
32400: LD_STRING 
32402: ST_TO_ADDR
// for i = 1 to normalCounter do
32403: LD_ADDR_VAR 0 8
32407: PUSH
32408: DOUBLE
32409: LD_INT 1
32411: DEC
32412: ST_TO_ADDR
32413: LD_EXP 68
32417: PUSH
32418: FOR_TO
32419: IFFALSE 32520
// begin tmp := 0 ;
32421: LD_ADDR_VAR 0 3
32425: PUSH
32426: LD_STRING 0
32428: ST_TO_ADDR
// if result [ 1 ] then
32429: LD_VAR 0 2
32433: PUSH
32434: LD_INT 1
32436: ARRAY
32437: IFFALSE 32502
// if result [ 1 ] [ 1 ] = i then
32439: LD_VAR 0 2
32443: PUSH
32444: LD_INT 1
32446: ARRAY
32447: PUSH
32448: LD_INT 1
32450: ARRAY
32451: PUSH
32452: LD_VAR 0 8
32456: EQUAL
32457: IFFALSE 32502
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
32459: LD_ADDR_VAR 0 2
32463: PUSH
32464: LD_VAR 0 2
32468: PPUSH
32469: LD_INT 1
32471: PPUSH
32472: LD_VAR 0 2
32476: PUSH
32477: LD_INT 1
32479: ARRAY
32480: PPUSH
32481: LD_INT 1
32483: PPUSH
32484: CALL_OW 3
32488: PPUSH
32489: CALL_OW 1
32493: ST_TO_ADDR
// tmp := 1 ;
32494: LD_ADDR_VAR 0 3
32498: PUSH
32499: LD_STRING 1
32501: ST_TO_ADDR
// end ; normal := normal & tmp ;
32502: LD_ADDR_VAR 0 5
32506: PUSH
32507: LD_VAR 0 5
32511: PUSH
32512: LD_VAR 0 3
32516: STR
32517: ST_TO_ADDR
// end ;
32518: GO 32418
32520: POP
32521: POP
// for i = 1 to hardcoreCounter do
32522: LD_ADDR_VAR 0 8
32526: PUSH
32527: DOUBLE
32528: LD_INT 1
32530: DEC
32531: ST_TO_ADDR
32532: LD_EXP 69
32536: PUSH
32537: FOR_TO
32538: IFFALSE 32643
// begin tmp := 0 ;
32540: LD_ADDR_VAR 0 3
32544: PUSH
32545: LD_STRING 0
32547: ST_TO_ADDR
// if result [ 2 ] then
32548: LD_VAR 0 2
32552: PUSH
32553: LD_INT 2
32555: ARRAY
32556: IFFALSE 32625
// if result [ 2 ] [ 1 ] = 100 + i then
32558: LD_VAR 0 2
32562: PUSH
32563: LD_INT 2
32565: ARRAY
32566: PUSH
32567: LD_INT 1
32569: ARRAY
32570: PUSH
32571: LD_INT 100
32573: PUSH
32574: LD_VAR 0 8
32578: PLUS
32579: EQUAL
32580: IFFALSE 32625
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
32582: LD_ADDR_VAR 0 2
32586: PUSH
32587: LD_VAR 0 2
32591: PPUSH
32592: LD_INT 2
32594: PPUSH
32595: LD_VAR 0 2
32599: PUSH
32600: LD_INT 2
32602: ARRAY
32603: PPUSH
32604: LD_INT 1
32606: PPUSH
32607: CALL_OW 3
32611: PPUSH
32612: CALL_OW 1
32616: ST_TO_ADDR
// tmp := 1 ;
32617: LD_ADDR_VAR 0 3
32621: PUSH
32622: LD_STRING 1
32624: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
32625: LD_ADDR_VAR 0 6
32629: PUSH
32630: LD_VAR 0 6
32634: PUSH
32635: LD_VAR 0 3
32639: STR
32640: ST_TO_ADDR
// end ;
32641: GO 32537
32643: POP
32644: POP
// if isGameLoad then
32645: LD_VAR 0 1
32649: IFFALSE 33124
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
32651: LD_ADDR_VAR 0 4
32655: PUSH
32656: LD_EXP 72
32660: PUSH
32661: LD_EXP 71
32665: PUSH
32666: LD_EXP 73
32670: PUSH
32671: LD_EXP 70
32675: PUSH
32676: LD_EXP 74
32680: PUSH
32681: LD_EXP 75
32685: PUSH
32686: LD_EXP 76
32690: PUSH
32691: LD_EXP 77
32695: PUSH
32696: LD_EXP 78
32700: PUSH
32701: LD_EXP 79
32705: PUSH
32706: LD_EXP 80
32710: PUSH
32711: LD_EXP 81
32715: PUSH
32716: LD_EXP 82
32720: PUSH
32721: LD_EXP 83
32725: PUSH
32726: LD_EXP 91
32730: PUSH
32731: LD_EXP 92
32735: PUSH
32736: LD_EXP 93
32740: PUSH
32741: LD_EXP 94
32745: PUSH
32746: LD_EXP 96
32750: PUSH
32751: LD_EXP 97
32755: PUSH
32756: LD_EXP 98
32760: PUSH
32761: LD_EXP 101
32765: PUSH
32766: LD_EXP 103
32770: PUSH
32771: LD_EXP 104
32775: PUSH
32776: LD_EXP 105
32780: PUSH
32781: LD_EXP 107
32785: PUSH
32786: LD_EXP 108
32790: PUSH
32791: LD_EXP 111
32795: PUSH
32796: LD_EXP 112
32800: PUSH
32801: LD_EXP 113
32805: PUSH
32806: LD_EXP 114
32810: PUSH
32811: LD_EXP 115
32815: PUSH
32816: LD_EXP 116
32820: PUSH
32821: LD_EXP 117
32825: PUSH
32826: LD_EXP 118
32830: PUSH
32831: LD_EXP 119
32835: PUSH
32836: LD_EXP 84
32840: PUSH
32841: LD_EXP 85
32845: PUSH
32846: LD_EXP 88
32850: PUSH
32851: LD_EXP 89
32855: PUSH
32856: LD_EXP 90
32860: PUSH
32861: LD_EXP 86
32865: PUSH
32866: LD_EXP 87
32870: PUSH
32871: LD_EXP 95
32875: PUSH
32876: LD_EXP 99
32880: PUSH
32881: LD_EXP 100
32885: PUSH
32886: LD_EXP 102
32890: PUSH
32891: LD_EXP 106
32895: PUSH
32896: LD_EXP 109
32900: PUSH
32901: LD_EXP 110
32905: PUSH
32906: LD_EXP 120
32910: PUSH
32911: LD_EXP 121
32915: PUSH
32916: LD_EXP 122
32920: PUSH
32921: LD_EXP 123
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: ST_TO_ADDR
// tmp :=  ;
32982: LD_ADDR_VAR 0 3
32986: PUSH
32987: LD_STRING 
32989: ST_TO_ADDR
// for i = 1 to normalCounter do
32990: LD_ADDR_VAR 0 8
32994: PUSH
32995: DOUBLE
32996: LD_INT 1
32998: DEC
32999: ST_TO_ADDR
33000: LD_EXP 68
33004: PUSH
33005: FOR_TO
33006: IFFALSE 33042
// begin if flags [ i ] then
33008: LD_VAR 0 4
33012: PUSH
33013: LD_VAR 0 8
33017: ARRAY
33018: IFFALSE 33040
// tmp := tmp & i & ; ;
33020: LD_ADDR_VAR 0 3
33024: PUSH
33025: LD_VAR 0 3
33029: PUSH
33030: LD_VAR 0 8
33034: STR
33035: PUSH
33036: LD_STRING ;
33038: STR
33039: ST_TO_ADDR
// end ;
33040: GO 33005
33042: POP
33043: POP
// for i = 1 to hardcoreCounter do
33044: LD_ADDR_VAR 0 8
33048: PUSH
33049: DOUBLE
33050: LD_INT 1
33052: DEC
33053: ST_TO_ADDR
33054: LD_EXP 69
33058: PUSH
33059: FOR_TO
33060: IFFALSE 33106
// begin if flags [ normalCounter + i ] then
33062: LD_VAR 0 4
33066: PUSH
33067: LD_EXP 68
33071: PUSH
33072: LD_VAR 0 8
33076: PLUS
33077: ARRAY
33078: IFFALSE 33104
// tmp := tmp & ( 100 + i ) & ; ;
33080: LD_ADDR_VAR 0 3
33084: PUSH
33085: LD_VAR 0 3
33089: PUSH
33090: LD_INT 100
33092: PUSH
33093: LD_VAR 0 8
33097: PLUS
33098: STR
33099: PUSH
33100: LD_STRING ;
33102: STR
33103: ST_TO_ADDR
// end ;
33104: GO 33059
33106: POP
33107: POP
// if tmp then
33108: LD_VAR 0 3
33112: IFFALSE 33124
// active := tmp ;
33114: LD_ADDR_VAR 0 7
33118: PUSH
33119: LD_VAR 0 3
33123: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
33124: LD_STRING getStreamItemsFromMission("
33126: PUSH
33127: LD_VAR 0 5
33131: STR
33132: PUSH
33133: LD_STRING ","
33135: STR
33136: PUSH
33137: LD_VAR 0 6
33141: STR
33142: PUSH
33143: LD_STRING ","
33145: STR
33146: PUSH
33147: LD_VAR 0 7
33151: STR
33152: PUSH
33153: LD_STRING ")
33155: STR
33156: PPUSH
33157: CALL_OW 559
// end else
33161: GO 33170
// ToLua ( getStreamItemsFromMission("","","") ) ;
33163: LD_STRING getStreamItemsFromMission("","","")
33165: PPUSH
33166: CALL_OW 559
// end ;
33170: LD_VAR 0 2
33174: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
33175: LD_EXP 67
33179: PUSH
33180: LD_EXP 72
33184: AND
33185: IFFALSE 33309
33187: GO 33189
33189: DISABLE
33190: LD_INT 0
33192: PPUSH
33193: PPUSH
// begin enable ;
33194: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
33195: LD_ADDR_VAR 0 2
33199: PUSH
33200: LD_INT 22
33202: PUSH
33203: LD_OWVAR 2
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 2
33214: PUSH
33215: LD_INT 34
33217: PUSH
33218: LD_INT 7
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 34
33227: PUSH
33228: LD_INT 45
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 34
33237: PUSH
33238: LD_INT 28
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 34
33247: PUSH
33248: LD_INT 47
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PPUSH
33266: CALL_OW 69
33270: ST_TO_ADDR
// if not tmp then
33271: LD_VAR 0 2
33275: NOT
33276: IFFALSE 33280
// exit ;
33278: GO 33309
// for i in tmp do
33280: LD_ADDR_VAR 0 1
33284: PUSH
33285: LD_VAR 0 2
33289: PUSH
33290: FOR_IN
33291: IFFALSE 33307
// begin SetLives ( i , 0 ) ;
33293: LD_VAR 0 1
33297: PPUSH
33298: LD_INT 0
33300: PPUSH
33301: CALL_OW 234
// end ;
33305: GO 33290
33307: POP
33308: POP
// end ;
33309: PPOPN 2
33311: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
33312: LD_EXP 67
33316: PUSH
33317: LD_EXP 73
33321: AND
33322: IFFALSE 33406
33324: GO 33326
33326: DISABLE
33327: LD_INT 0
33329: PPUSH
33330: PPUSH
// begin enable ;
33331: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
33332: LD_ADDR_VAR 0 2
33336: PUSH
33337: LD_INT 22
33339: PUSH
33340: LD_OWVAR 2
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 32
33351: PUSH
33352: LD_INT 3
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PPUSH
33363: CALL_OW 69
33367: ST_TO_ADDR
// if not tmp then
33368: LD_VAR 0 2
33372: NOT
33373: IFFALSE 33377
// exit ;
33375: GO 33406
// for i in tmp do
33377: LD_ADDR_VAR 0 1
33381: PUSH
33382: LD_VAR 0 2
33386: PUSH
33387: FOR_IN
33388: IFFALSE 33404
// begin SetLives ( i , 0 ) ;
33390: LD_VAR 0 1
33394: PPUSH
33395: LD_INT 0
33397: PPUSH
33398: CALL_OW 234
// end ;
33402: GO 33387
33404: POP
33405: POP
// end ;
33406: PPOPN 2
33408: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
33409: LD_EXP 67
33413: PUSH
33414: LD_EXP 70
33418: AND
33419: IFFALSE 33512
33421: GO 33423
33423: DISABLE
33424: LD_INT 0
33426: PPUSH
// begin enable ;
33427: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
33428: LD_ADDR_VAR 0 1
33432: PUSH
33433: LD_INT 22
33435: PUSH
33436: LD_OWVAR 2
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 2
33447: PUSH
33448: LD_INT 25
33450: PUSH
33451: LD_INT 5
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 25
33460: PUSH
33461: LD_INT 9
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 25
33470: PUSH
33471: LD_INT 8
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PPUSH
33488: CALL_OW 69
33492: PUSH
33493: FOR_IN
33494: IFFALSE 33510
// begin SetClass ( i , 1 ) ;
33496: LD_VAR 0 1
33500: PPUSH
33501: LD_INT 1
33503: PPUSH
33504: CALL_OW 336
// end ;
33508: GO 33493
33510: POP
33511: POP
// end ;
33512: PPOPN 1
33514: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
33515: LD_EXP 67
33519: PUSH
33520: LD_EXP 71
33524: AND
33525: PUSH
33526: LD_OWVAR 65
33530: PUSH
33531: LD_INT 7
33533: LESS
33534: AND
33535: IFFALSE 33549
33537: GO 33539
33539: DISABLE
// begin enable ;
33540: ENABLE
// game_speed := 7 ;
33541: LD_ADDR_OWVAR 65
33545: PUSH
33546: LD_INT 7
33548: ST_TO_ADDR
// end ;
33549: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
33550: LD_EXP 67
33554: PUSH
33555: LD_EXP 74
33559: AND
33560: IFFALSE 33762
33562: GO 33564
33564: DISABLE
33565: LD_INT 0
33567: PPUSH
33568: PPUSH
33569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33570: LD_ADDR_VAR 0 3
33574: PUSH
33575: LD_INT 81
33577: PUSH
33578: LD_OWVAR 2
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 21
33589: PUSH
33590: LD_INT 1
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PPUSH
33601: CALL_OW 69
33605: ST_TO_ADDR
// if not tmp then
33606: LD_VAR 0 3
33610: NOT
33611: IFFALSE 33615
// exit ;
33613: GO 33762
// if tmp > 5 then
33615: LD_VAR 0 3
33619: PUSH
33620: LD_INT 5
33622: GREATER
33623: IFFALSE 33635
// k := 5 else
33625: LD_ADDR_VAR 0 2
33629: PUSH
33630: LD_INT 5
33632: ST_TO_ADDR
33633: GO 33645
// k := tmp ;
33635: LD_ADDR_VAR 0 2
33639: PUSH
33640: LD_VAR 0 3
33644: ST_TO_ADDR
// for i := 1 to k do
33645: LD_ADDR_VAR 0 1
33649: PUSH
33650: DOUBLE
33651: LD_INT 1
33653: DEC
33654: ST_TO_ADDR
33655: LD_VAR 0 2
33659: PUSH
33660: FOR_TO
33661: IFFALSE 33760
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
33663: LD_VAR 0 3
33667: PUSH
33668: LD_VAR 0 1
33672: ARRAY
33673: PPUSH
33674: LD_VAR 0 1
33678: PUSH
33679: LD_INT 4
33681: MOD
33682: PUSH
33683: LD_INT 1
33685: PLUS
33686: PPUSH
33687: CALL_OW 259
33691: PUSH
33692: LD_INT 10
33694: LESS
33695: IFFALSE 33758
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
33697: LD_VAR 0 3
33701: PUSH
33702: LD_VAR 0 1
33706: ARRAY
33707: PPUSH
33708: LD_VAR 0 1
33712: PUSH
33713: LD_INT 4
33715: MOD
33716: PUSH
33717: LD_INT 1
33719: PLUS
33720: PPUSH
33721: LD_VAR 0 3
33725: PUSH
33726: LD_VAR 0 1
33730: ARRAY
33731: PPUSH
33732: LD_VAR 0 1
33736: PUSH
33737: LD_INT 4
33739: MOD
33740: PUSH
33741: LD_INT 1
33743: PLUS
33744: PPUSH
33745: CALL_OW 259
33749: PUSH
33750: LD_INT 1
33752: PLUS
33753: PPUSH
33754: CALL_OW 237
33758: GO 33660
33760: POP
33761: POP
// end ;
33762: PPOPN 3
33764: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
33765: LD_EXP 67
33769: PUSH
33770: LD_EXP 75
33774: AND
33775: IFFALSE 33795
33777: GO 33779
33779: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
33780: LD_INT 4
33782: PPUSH
33783: LD_OWVAR 2
33787: PPUSH
33788: LD_INT 0
33790: PPUSH
33791: CALL_OW 324
33795: END
// every 0 0$1 trigger StreamModeActive and sShovel do
33796: LD_EXP 67
33800: PUSH
33801: LD_EXP 104
33805: AND
33806: IFFALSE 33826
33808: GO 33810
33810: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
33811: LD_INT 19
33813: PPUSH
33814: LD_OWVAR 2
33818: PPUSH
33819: LD_INT 0
33821: PPUSH
33822: CALL_OW 324
33826: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
33827: LD_EXP 67
33831: PUSH
33832: LD_EXP 76
33836: AND
33837: IFFALSE 33939
33839: GO 33841
33841: DISABLE
33842: LD_INT 0
33844: PPUSH
33845: PPUSH
// begin enable ;
33846: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
33847: LD_ADDR_VAR 0 2
33851: PUSH
33852: LD_INT 22
33854: PUSH
33855: LD_OWVAR 2
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 2
33866: PUSH
33867: LD_INT 34
33869: PUSH
33870: LD_INT 11
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 34
33879: PUSH
33880: LD_INT 30
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: LIST
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PPUSH
33896: CALL_OW 69
33900: ST_TO_ADDR
// if not tmp then
33901: LD_VAR 0 2
33905: NOT
33906: IFFALSE 33910
// exit ;
33908: GO 33939
// for i in tmp do
33910: LD_ADDR_VAR 0 1
33914: PUSH
33915: LD_VAR 0 2
33919: PUSH
33920: FOR_IN
33921: IFFALSE 33937
// begin SetLives ( i , 0 ) ;
33923: LD_VAR 0 1
33927: PPUSH
33928: LD_INT 0
33930: PPUSH
33931: CALL_OW 234
// end ;
33935: GO 33920
33937: POP
33938: POP
// end ;
33939: PPOPN 2
33941: END
// every 0 0$1 trigger StreamModeActive and sBunker do
33942: LD_EXP 67
33946: PUSH
33947: LD_EXP 77
33951: AND
33952: IFFALSE 33972
33954: GO 33956
33956: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
33957: LD_INT 32
33959: PPUSH
33960: LD_OWVAR 2
33964: PPUSH
33965: LD_INT 0
33967: PPUSH
33968: CALL_OW 324
33972: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
33973: LD_EXP 67
33977: PUSH
33978: LD_EXP 78
33982: AND
33983: IFFALSE 34164
33985: GO 33987
33987: DISABLE
33988: LD_INT 0
33990: PPUSH
33991: PPUSH
33992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
33993: LD_ADDR_VAR 0 2
33997: PUSH
33998: LD_INT 22
34000: PUSH
34001: LD_OWVAR 2
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 33
34012: PUSH
34013: LD_INT 3
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PPUSH
34024: CALL_OW 69
34028: ST_TO_ADDR
// if not tmp then
34029: LD_VAR 0 2
34033: NOT
34034: IFFALSE 34038
// exit ;
34036: GO 34164
// side := 0 ;
34038: LD_ADDR_VAR 0 3
34042: PUSH
34043: LD_INT 0
34045: ST_TO_ADDR
// for i := 1 to 8 do
34046: LD_ADDR_VAR 0 1
34050: PUSH
34051: DOUBLE
34052: LD_INT 1
34054: DEC
34055: ST_TO_ADDR
34056: LD_INT 8
34058: PUSH
34059: FOR_TO
34060: IFFALSE 34108
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
34062: LD_OWVAR 2
34066: PUSH
34067: LD_VAR 0 1
34071: NONEQUAL
34072: PUSH
34073: LD_OWVAR 2
34077: PPUSH
34078: LD_VAR 0 1
34082: PPUSH
34083: CALL_OW 81
34087: PUSH
34088: LD_INT 2
34090: EQUAL
34091: AND
34092: IFFALSE 34106
// begin side := i ;
34094: LD_ADDR_VAR 0 3
34098: PUSH
34099: LD_VAR 0 1
34103: ST_TO_ADDR
// break ;
34104: GO 34108
// end ;
34106: GO 34059
34108: POP
34109: POP
// if not side then
34110: LD_VAR 0 3
34114: NOT
34115: IFFALSE 34119
// exit ;
34117: GO 34164
// for i := 1 to tmp do
34119: LD_ADDR_VAR 0 1
34123: PUSH
34124: DOUBLE
34125: LD_INT 1
34127: DEC
34128: ST_TO_ADDR
34129: LD_VAR 0 2
34133: PUSH
34134: FOR_TO
34135: IFFALSE 34162
// if Prob ( 60 ) then
34137: LD_INT 60
34139: PPUSH
34140: CALL_OW 13
34144: IFFALSE 34160
// SetSide ( i , side ) ;
34146: LD_VAR 0 1
34150: PPUSH
34151: LD_VAR 0 3
34155: PPUSH
34156: CALL_OW 235
34160: GO 34134
34162: POP
34163: POP
// end ;
34164: PPOPN 3
34166: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
34167: LD_EXP 67
34171: PUSH
34172: LD_EXP 80
34176: AND
34177: IFFALSE 34296
34179: GO 34181
34181: DISABLE
34182: LD_INT 0
34184: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
34185: LD_ADDR_VAR 0 1
34189: PUSH
34190: LD_INT 22
34192: PUSH
34193: LD_OWVAR 2
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 21
34204: PUSH
34205: LD_INT 1
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 3
34214: PUSH
34215: LD_INT 23
34217: PUSH
34218: LD_INT 0
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: LIST
34233: PPUSH
34234: CALL_OW 69
34238: PUSH
34239: FOR_IN
34240: IFFALSE 34294
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
34242: LD_VAR 0 1
34246: PPUSH
34247: CALL_OW 257
34251: PUSH
34252: LD_INT 1
34254: PUSH
34255: LD_INT 2
34257: PUSH
34258: LD_INT 3
34260: PUSH
34261: LD_INT 4
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: IN
34270: IFFALSE 34292
// SetClass ( un , rand ( 1 , 4 ) ) ;
34272: LD_VAR 0 1
34276: PPUSH
34277: LD_INT 1
34279: PPUSH
34280: LD_INT 4
34282: PPUSH
34283: CALL_OW 12
34287: PPUSH
34288: CALL_OW 336
34292: GO 34239
34294: POP
34295: POP
// end ;
34296: PPOPN 1
34298: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
34299: LD_EXP 67
34303: PUSH
34304: LD_EXP 79
34308: AND
34309: IFFALSE 34388
34311: GO 34313
34313: DISABLE
34314: LD_INT 0
34316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
34317: LD_ADDR_VAR 0 1
34321: PUSH
34322: LD_INT 22
34324: PUSH
34325: LD_OWVAR 2
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 21
34336: PUSH
34337: LD_INT 3
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PPUSH
34348: CALL_OW 69
34352: ST_TO_ADDR
// if not tmp then
34353: LD_VAR 0 1
34357: NOT
34358: IFFALSE 34362
// exit ;
34360: GO 34388
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
34362: LD_VAR 0 1
34366: PUSH
34367: LD_INT 1
34369: PPUSH
34370: LD_VAR 0 1
34374: PPUSH
34375: CALL_OW 12
34379: ARRAY
34380: PPUSH
34381: LD_INT 100
34383: PPUSH
34384: CALL_OW 234
// end ;
34388: PPOPN 1
34390: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
34391: LD_EXP 67
34395: PUSH
34396: LD_EXP 81
34400: AND
34401: IFFALSE 34499
34403: GO 34405
34405: DISABLE
34406: LD_INT 0
34408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
34409: LD_ADDR_VAR 0 1
34413: PUSH
34414: LD_INT 22
34416: PUSH
34417: LD_OWVAR 2
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 21
34428: PUSH
34429: LD_INT 1
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PPUSH
34440: CALL_OW 69
34444: ST_TO_ADDR
// if not tmp then
34445: LD_VAR 0 1
34449: NOT
34450: IFFALSE 34454
// exit ;
34452: GO 34499
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
34454: LD_VAR 0 1
34458: PUSH
34459: LD_INT 1
34461: PPUSH
34462: LD_VAR 0 1
34466: PPUSH
34467: CALL_OW 12
34471: ARRAY
34472: PPUSH
34473: LD_INT 1
34475: PPUSH
34476: LD_INT 4
34478: PPUSH
34479: CALL_OW 12
34483: PPUSH
34484: LD_INT 3000
34486: PPUSH
34487: LD_INT 9000
34489: PPUSH
34490: CALL_OW 12
34494: PPUSH
34495: CALL_OW 492
// end ;
34499: PPOPN 1
34501: END
// every 0 0$1 trigger StreamModeActive and sDepot do
34502: LD_EXP 67
34506: PUSH
34507: LD_EXP 82
34511: AND
34512: IFFALSE 34532
34514: GO 34516
34516: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
34517: LD_INT 1
34519: PPUSH
34520: LD_OWVAR 2
34524: PPUSH
34525: LD_INT 0
34527: PPUSH
34528: CALL_OW 324
34532: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
34533: LD_EXP 67
34537: PUSH
34538: LD_EXP 83
34542: AND
34543: IFFALSE 34626
34545: GO 34547
34547: DISABLE
34548: LD_INT 0
34550: PPUSH
34551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
34552: LD_ADDR_VAR 0 2
34556: PUSH
34557: LD_INT 22
34559: PUSH
34560: LD_OWVAR 2
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 21
34571: PUSH
34572: LD_INT 3
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PPUSH
34583: CALL_OW 69
34587: ST_TO_ADDR
// if not tmp then
34588: LD_VAR 0 2
34592: NOT
34593: IFFALSE 34597
// exit ;
34595: GO 34626
// for i in tmp do
34597: LD_ADDR_VAR 0 1
34601: PUSH
34602: LD_VAR 0 2
34606: PUSH
34607: FOR_IN
34608: IFFALSE 34624
// SetBLevel ( i , 10 ) ;
34610: LD_VAR 0 1
34614: PPUSH
34615: LD_INT 10
34617: PPUSH
34618: CALL_OW 241
34622: GO 34607
34624: POP
34625: POP
// end ;
34626: PPOPN 2
34628: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
34629: LD_EXP 67
34633: PUSH
34634: LD_EXP 84
34638: AND
34639: IFFALSE 34750
34641: GO 34643
34643: DISABLE
34644: LD_INT 0
34646: PPUSH
34647: PPUSH
34648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34649: LD_ADDR_VAR 0 3
34653: PUSH
34654: LD_INT 22
34656: PUSH
34657: LD_OWVAR 2
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 25
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PPUSH
34680: CALL_OW 69
34684: ST_TO_ADDR
// if not tmp then
34685: LD_VAR 0 3
34689: NOT
34690: IFFALSE 34694
// exit ;
34692: GO 34750
// un := tmp [ rand ( 1 , tmp ) ] ;
34694: LD_ADDR_VAR 0 2
34698: PUSH
34699: LD_VAR 0 3
34703: PUSH
34704: LD_INT 1
34706: PPUSH
34707: LD_VAR 0 3
34711: PPUSH
34712: CALL_OW 12
34716: ARRAY
34717: ST_TO_ADDR
// if Crawls ( un ) then
34718: LD_VAR 0 2
34722: PPUSH
34723: CALL_OW 318
34727: IFFALSE 34738
// ComWalk ( un ) ;
34729: LD_VAR 0 2
34733: PPUSH
34734: CALL_OW 138
// SetClass ( un , class_sniper ) ;
34738: LD_VAR 0 2
34742: PPUSH
34743: LD_INT 5
34745: PPUSH
34746: CALL_OW 336
// end ;
34750: PPOPN 3
34752: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
34753: LD_EXP 67
34757: PUSH
34758: LD_EXP 85
34762: AND
34763: PUSH
34764: LD_OWVAR 67
34768: PUSH
34769: LD_INT 4
34771: LESS
34772: AND
34773: IFFALSE 34792
34775: GO 34777
34777: DISABLE
// begin Difficulty := Difficulty + 1 ;
34778: LD_ADDR_OWVAR 67
34782: PUSH
34783: LD_OWVAR 67
34787: PUSH
34788: LD_INT 1
34790: PLUS
34791: ST_TO_ADDR
// end ;
34792: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
34793: LD_EXP 67
34797: PUSH
34798: LD_EXP 86
34802: AND
34803: IFFALSE 34906
34805: GO 34807
34807: DISABLE
34808: LD_INT 0
34810: PPUSH
// begin for i := 1 to 5 do
34811: LD_ADDR_VAR 0 1
34815: PUSH
34816: DOUBLE
34817: LD_INT 1
34819: DEC
34820: ST_TO_ADDR
34821: LD_INT 5
34823: PUSH
34824: FOR_TO
34825: IFFALSE 34904
// begin uc_nation := nation_nature ;
34827: LD_ADDR_OWVAR 21
34831: PUSH
34832: LD_INT 0
34834: ST_TO_ADDR
// uc_side := 0 ;
34835: LD_ADDR_OWVAR 20
34839: PUSH
34840: LD_INT 0
34842: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34843: LD_ADDR_OWVAR 29
34847: PUSH
34848: LD_INT 12
34850: PUSH
34851: LD_INT 12
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: ST_TO_ADDR
// hc_agressivity := 20 ;
34858: LD_ADDR_OWVAR 35
34862: PUSH
34863: LD_INT 20
34865: ST_TO_ADDR
// hc_class := class_tiger ;
34866: LD_ADDR_OWVAR 28
34870: PUSH
34871: LD_INT 14
34873: ST_TO_ADDR
// hc_gallery :=  ;
34874: LD_ADDR_OWVAR 33
34878: PUSH
34879: LD_STRING 
34881: ST_TO_ADDR
// hc_name :=  ;
34882: LD_ADDR_OWVAR 26
34886: PUSH
34887: LD_STRING 
34889: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
34890: CALL_OW 44
34894: PPUSH
34895: LD_INT 0
34897: PPUSH
34898: CALL_OW 51
// end ;
34902: GO 34824
34904: POP
34905: POP
// end ;
34906: PPOPN 1
34908: END
// every 0 0$1 trigger StreamModeActive and sBomb do
34909: LD_EXP 67
34913: PUSH
34914: LD_EXP 87
34918: AND
34919: IFFALSE 34928
34921: GO 34923
34923: DISABLE
// StreamSibBomb ;
34924: CALL 34929 0 0
34928: END
// export function StreamSibBomb ; var i , x , y ; begin
34929: LD_INT 0
34931: PPUSH
34932: PPUSH
34933: PPUSH
34934: PPUSH
// result := false ;
34935: LD_ADDR_VAR 0 1
34939: PUSH
34940: LD_INT 0
34942: ST_TO_ADDR
// for i := 1 to 16 do
34943: LD_ADDR_VAR 0 2
34947: PUSH
34948: DOUBLE
34949: LD_INT 1
34951: DEC
34952: ST_TO_ADDR
34953: LD_INT 16
34955: PUSH
34956: FOR_TO
34957: IFFALSE 35156
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
34959: LD_ADDR_VAR 0 3
34963: PUSH
34964: LD_INT 10
34966: PUSH
34967: LD_INT 20
34969: PUSH
34970: LD_INT 30
34972: PUSH
34973: LD_INT 40
34975: PUSH
34976: LD_INT 50
34978: PUSH
34979: LD_INT 60
34981: PUSH
34982: LD_INT 70
34984: PUSH
34985: LD_INT 80
34987: PUSH
34988: LD_INT 90
34990: PUSH
34991: LD_INT 100
34993: PUSH
34994: LD_INT 110
34996: PUSH
34997: LD_INT 120
34999: PUSH
35000: LD_INT 130
35002: PUSH
35003: LD_INT 140
35005: PUSH
35006: LD_INT 150
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 1
35028: PPUSH
35029: LD_INT 15
35031: PPUSH
35032: CALL_OW 12
35036: ARRAY
35037: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
35038: LD_ADDR_VAR 0 4
35042: PUSH
35043: LD_INT 10
35045: PUSH
35046: LD_INT 20
35048: PUSH
35049: LD_INT 30
35051: PUSH
35052: LD_INT 40
35054: PUSH
35055: LD_INT 50
35057: PUSH
35058: LD_INT 60
35060: PUSH
35061: LD_INT 70
35063: PUSH
35064: LD_INT 80
35066: PUSH
35067: LD_INT 90
35069: PUSH
35070: LD_INT 100
35072: PUSH
35073: LD_INT 110
35075: PUSH
35076: LD_INT 120
35078: PUSH
35079: LD_INT 130
35081: PUSH
35082: LD_INT 140
35084: PUSH
35085: LD_INT 150
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 1
35107: PPUSH
35108: LD_INT 15
35110: PPUSH
35111: CALL_OW 12
35115: ARRAY
35116: ST_TO_ADDR
// if ValidHex ( x , y ) then
35117: LD_VAR 0 3
35121: PPUSH
35122: LD_VAR 0 4
35126: PPUSH
35127: CALL_OW 488
35131: IFFALSE 35154
// begin result := [ x , y ] ;
35133: LD_ADDR_VAR 0 1
35137: PUSH
35138: LD_VAR 0 3
35142: PUSH
35143: LD_VAR 0 4
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: ST_TO_ADDR
// break ;
35152: GO 35156
// end ; end ;
35154: GO 34956
35156: POP
35157: POP
// if result then
35158: LD_VAR 0 1
35162: IFFALSE 35222
// begin ToLua ( playSibBomb() ) ;
35164: LD_STRING playSibBomb()
35166: PPUSH
35167: CALL_OW 559
// wait ( 0 0$14 ) ;
35171: LD_INT 490
35173: PPUSH
35174: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
35178: LD_VAR 0 1
35182: PUSH
35183: LD_INT 1
35185: ARRAY
35186: PPUSH
35187: LD_VAR 0 1
35191: PUSH
35192: LD_INT 2
35194: ARRAY
35195: PPUSH
35196: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
35200: LD_VAR 0 1
35204: PUSH
35205: LD_INT 1
35207: ARRAY
35208: PPUSH
35209: LD_VAR 0 1
35213: PUSH
35214: LD_INT 2
35216: ARRAY
35217: PPUSH
35218: CALL_OW 429
// end ; end ;
35222: LD_VAR 0 1
35226: RET
// every 0 0$1 trigger StreamModeActive and sReset do
35227: LD_EXP 67
35231: PUSH
35232: LD_EXP 89
35236: AND
35237: IFFALSE 35249
35239: GO 35241
35241: DISABLE
// YouLost (  ) ;
35242: LD_STRING 
35244: PPUSH
35245: CALL_OW 104
35249: END
// every 0 0$1 trigger StreamModeActive and sFog do
35250: LD_EXP 67
35254: PUSH
35255: LD_EXP 88
35259: AND
35260: IFFALSE 35274
35262: GO 35264
35264: DISABLE
// FogOff ( your_side ) ;
35265: LD_OWVAR 2
35269: PPUSH
35270: CALL_OW 344
35274: END
// every 0 0$1 trigger StreamModeActive and sSun do
35275: LD_EXP 67
35279: PUSH
35280: LD_EXP 90
35284: AND
35285: IFFALSE 35313
35287: GO 35289
35289: DISABLE
// begin solar_recharge_percent := 0 ;
35290: LD_ADDR_OWVAR 79
35294: PUSH
35295: LD_INT 0
35297: ST_TO_ADDR
// wait ( 5 5$00 ) ;
35298: LD_INT 10500
35300: PPUSH
35301: CALL_OW 67
// solar_recharge_percent := 100 ;
35305: LD_ADDR_OWVAR 79
35309: PUSH
35310: LD_INT 100
35312: ST_TO_ADDR
// end ;
35313: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
35314: LD_EXP 67
35318: PUSH
35319: LD_EXP 91
35323: AND
35324: IFFALSE 35563
35326: GO 35328
35328: DISABLE
35329: LD_INT 0
35331: PPUSH
35332: PPUSH
35333: PPUSH
// begin tmp := [ ] ;
35334: LD_ADDR_VAR 0 3
35338: PUSH
35339: EMPTY
35340: ST_TO_ADDR
// for i := 1 to 6 do
35341: LD_ADDR_VAR 0 1
35345: PUSH
35346: DOUBLE
35347: LD_INT 1
35349: DEC
35350: ST_TO_ADDR
35351: LD_INT 6
35353: PUSH
35354: FOR_TO
35355: IFFALSE 35460
// begin uc_nation := nation_nature ;
35357: LD_ADDR_OWVAR 21
35361: PUSH
35362: LD_INT 0
35364: ST_TO_ADDR
// uc_side := 0 ;
35365: LD_ADDR_OWVAR 20
35369: PUSH
35370: LD_INT 0
35372: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35373: LD_ADDR_OWVAR 29
35377: PUSH
35378: LD_INT 12
35380: PUSH
35381: LD_INT 12
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: ST_TO_ADDR
// hc_agressivity := 20 ;
35388: LD_ADDR_OWVAR 35
35392: PUSH
35393: LD_INT 20
35395: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
35396: LD_ADDR_OWVAR 28
35400: PUSH
35401: LD_INT 17
35403: ST_TO_ADDR
// hc_gallery :=  ;
35404: LD_ADDR_OWVAR 33
35408: PUSH
35409: LD_STRING 
35411: ST_TO_ADDR
// hc_name :=  ;
35412: LD_ADDR_OWVAR 26
35416: PUSH
35417: LD_STRING 
35419: ST_TO_ADDR
// un := CreateHuman ;
35420: LD_ADDR_VAR 0 2
35424: PUSH
35425: CALL_OW 44
35429: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
35430: LD_VAR 0 2
35434: PPUSH
35435: LD_INT 1
35437: PPUSH
35438: CALL_OW 51
// tmp := tmp ^ un ;
35442: LD_ADDR_VAR 0 3
35446: PUSH
35447: LD_VAR 0 3
35451: PUSH
35452: LD_VAR 0 2
35456: ADD
35457: ST_TO_ADDR
// end ;
35458: GO 35354
35460: POP
35461: POP
// repeat wait ( 0 0$1 ) ;
35462: LD_INT 35
35464: PPUSH
35465: CALL_OW 67
// for un in tmp do
35469: LD_ADDR_VAR 0 2
35473: PUSH
35474: LD_VAR 0 3
35478: PUSH
35479: FOR_IN
35480: IFFALSE 35554
// begin if IsDead ( un ) then
35482: LD_VAR 0 2
35486: PPUSH
35487: CALL_OW 301
35491: IFFALSE 35511
// begin tmp := tmp diff un ;
35493: LD_ADDR_VAR 0 3
35497: PUSH
35498: LD_VAR 0 3
35502: PUSH
35503: LD_VAR 0 2
35507: DIFF
35508: ST_TO_ADDR
// continue ;
35509: GO 35479
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
35511: LD_VAR 0 2
35515: PPUSH
35516: LD_INT 3
35518: PUSH
35519: LD_INT 22
35521: PUSH
35522: LD_INT 0
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PPUSH
35533: CALL_OW 69
35537: PPUSH
35538: LD_VAR 0 2
35542: PPUSH
35543: CALL_OW 74
35547: PPUSH
35548: CALL_OW 115
// end ;
35552: GO 35479
35554: POP
35555: POP
// until not tmp ;
35556: LD_VAR 0 3
35560: NOT
35561: IFFALSE 35462
// end ;
35563: PPOPN 3
35565: END
// every 0 0$1 trigger StreamModeActive and sTroll do
35566: LD_EXP 67
35570: PUSH
35571: LD_EXP 92
35575: AND
35576: IFFALSE 35630
35578: GO 35580
35580: DISABLE
// begin ToLua ( displayTroll(); ) ;
35581: LD_STRING displayTroll();
35583: PPUSH
35584: CALL_OW 559
// wait ( 3 3$00 ) ;
35588: LD_INT 6300
35590: PPUSH
35591: CALL_OW 67
// ToLua ( hideTroll(); ) ;
35595: LD_STRING hideTroll();
35597: PPUSH
35598: CALL_OW 559
// wait ( 1 1$00 ) ;
35602: LD_INT 2100
35604: PPUSH
35605: CALL_OW 67
// ToLua ( displayTroll(); ) ;
35609: LD_STRING displayTroll();
35611: PPUSH
35612: CALL_OW 559
// wait ( 1 1$00 ) ;
35616: LD_INT 2100
35618: PPUSH
35619: CALL_OW 67
// ToLua ( hideTroll(); ) ;
35623: LD_STRING hideTroll();
35625: PPUSH
35626: CALL_OW 559
// end ;
35630: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
35631: LD_EXP 67
35635: PUSH
35636: LD_EXP 93
35640: AND
35641: IFFALSE 35704
35643: GO 35645
35645: DISABLE
35646: LD_INT 0
35648: PPUSH
// begin p := 0 ;
35649: LD_ADDR_VAR 0 1
35653: PUSH
35654: LD_INT 0
35656: ST_TO_ADDR
// repeat game_speed := 1 ;
35657: LD_ADDR_OWVAR 65
35661: PUSH
35662: LD_INT 1
35664: ST_TO_ADDR
// wait ( 0 0$1 ) ;
35665: LD_INT 35
35667: PPUSH
35668: CALL_OW 67
// p := p + 1 ;
35672: LD_ADDR_VAR 0 1
35676: PUSH
35677: LD_VAR 0 1
35681: PUSH
35682: LD_INT 1
35684: PLUS
35685: ST_TO_ADDR
// until p >= 60 ;
35686: LD_VAR 0 1
35690: PUSH
35691: LD_INT 60
35693: GREATEREQUAL
35694: IFFALSE 35657
// game_speed := 4 ;
35696: LD_ADDR_OWVAR 65
35700: PUSH
35701: LD_INT 4
35703: ST_TO_ADDR
// end ;
35704: PPOPN 1
35706: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
35707: LD_EXP 67
35711: PUSH
35712: LD_EXP 94
35716: AND
35717: IFFALSE 35863
35719: GO 35721
35721: DISABLE
35722: LD_INT 0
35724: PPUSH
35725: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35726: LD_ADDR_VAR 0 1
35730: PUSH
35731: LD_INT 22
35733: PUSH
35734: LD_OWVAR 2
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 2
35745: PUSH
35746: LD_INT 30
35748: PUSH
35749: LD_INT 0
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 30
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: LIST
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PPUSH
35775: CALL_OW 69
35779: ST_TO_ADDR
// if not depot then
35780: LD_VAR 0 1
35784: NOT
35785: IFFALSE 35789
// exit ;
35787: GO 35863
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
35789: LD_ADDR_VAR 0 2
35793: PUSH
35794: LD_VAR 0 1
35798: PUSH
35799: LD_INT 1
35801: PPUSH
35802: LD_VAR 0 1
35806: PPUSH
35807: CALL_OW 12
35811: ARRAY
35812: PPUSH
35813: CALL_OW 274
35817: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
35818: LD_VAR 0 2
35822: PPUSH
35823: LD_INT 1
35825: PPUSH
35826: LD_INT 0
35828: PPUSH
35829: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
35833: LD_VAR 0 2
35837: PPUSH
35838: LD_INT 2
35840: PPUSH
35841: LD_INT 0
35843: PPUSH
35844: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
35848: LD_VAR 0 2
35852: PPUSH
35853: LD_INT 3
35855: PPUSH
35856: LD_INT 0
35858: PPUSH
35859: CALL_OW 277
// end ;
35863: PPOPN 2
35865: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
35866: LD_EXP 67
35870: PUSH
35871: LD_EXP 95
35875: AND
35876: IFFALSE 35973
35878: GO 35880
35880: DISABLE
35881: LD_INT 0
35883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35884: LD_ADDR_VAR 0 1
35888: PUSH
35889: LD_INT 22
35891: PUSH
35892: LD_OWVAR 2
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 21
35903: PUSH
35904: LD_INT 1
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 3
35913: PUSH
35914: LD_INT 23
35916: PUSH
35917: LD_INT 0
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: LIST
35932: PPUSH
35933: CALL_OW 69
35937: ST_TO_ADDR
// if not tmp then
35938: LD_VAR 0 1
35942: NOT
35943: IFFALSE 35947
// exit ;
35945: GO 35973
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
35947: LD_VAR 0 1
35951: PUSH
35952: LD_INT 1
35954: PPUSH
35955: LD_VAR 0 1
35959: PPUSH
35960: CALL_OW 12
35964: ARRAY
35965: PPUSH
35966: LD_INT 200
35968: PPUSH
35969: CALL_OW 234
// end ;
35973: PPOPN 1
35975: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
35976: LD_EXP 67
35980: PUSH
35981: LD_EXP 96
35985: AND
35986: IFFALSE 36065
35988: GO 35990
35990: DISABLE
35991: LD_INT 0
35993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
35994: LD_ADDR_VAR 0 1
35998: PUSH
35999: LD_INT 22
36001: PUSH
36002: LD_OWVAR 2
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 21
36013: PUSH
36014: LD_INT 2
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PPUSH
36025: CALL_OW 69
36029: ST_TO_ADDR
// if not tmp then
36030: LD_VAR 0 1
36034: NOT
36035: IFFALSE 36039
// exit ;
36037: GO 36065
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
36039: LD_VAR 0 1
36043: PUSH
36044: LD_INT 1
36046: PPUSH
36047: LD_VAR 0 1
36051: PPUSH
36052: CALL_OW 12
36056: ARRAY
36057: PPUSH
36058: LD_INT 60
36060: PPUSH
36061: CALL_OW 234
// end ;
36065: PPOPN 1
36067: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
36068: LD_EXP 67
36072: PUSH
36073: LD_EXP 97
36077: AND
36078: IFFALSE 36177
36080: GO 36082
36082: DISABLE
36083: LD_INT 0
36085: PPUSH
36086: PPUSH
// begin enable ;
36087: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
36088: LD_ADDR_VAR 0 1
36092: PUSH
36093: LD_INT 22
36095: PUSH
36096: LD_OWVAR 2
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 61
36107: PUSH
36108: EMPTY
36109: LIST
36110: PUSH
36111: LD_INT 33
36113: PUSH
36114: LD_INT 2
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: LIST
36125: PPUSH
36126: CALL_OW 69
36130: ST_TO_ADDR
// if not tmp then
36131: LD_VAR 0 1
36135: NOT
36136: IFFALSE 36140
// exit ;
36138: GO 36177
// for i in tmp do
36140: LD_ADDR_VAR 0 2
36144: PUSH
36145: LD_VAR 0 1
36149: PUSH
36150: FOR_IN
36151: IFFALSE 36175
// if IsControledBy ( i ) then
36153: LD_VAR 0 2
36157: PPUSH
36158: CALL_OW 312
36162: IFFALSE 36173
// ComUnlink ( i ) ;
36164: LD_VAR 0 2
36168: PPUSH
36169: CALL_OW 136
36173: GO 36150
36175: POP
36176: POP
// end ;
36177: PPOPN 2
36179: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
36180: LD_EXP 67
36184: PUSH
36185: LD_EXP 98
36189: AND
36190: IFFALSE 36330
36192: GO 36194
36194: DISABLE
36195: LD_INT 0
36197: PPUSH
36198: PPUSH
// begin ToLua ( displayPowell(); ) ;
36199: LD_STRING displayPowell();
36201: PPUSH
36202: CALL_OW 559
// uc_side := 0 ;
36206: LD_ADDR_OWVAR 20
36210: PUSH
36211: LD_INT 0
36213: ST_TO_ADDR
// uc_nation := 2 ;
36214: LD_ADDR_OWVAR 21
36218: PUSH
36219: LD_INT 2
36221: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
36222: LD_ADDR_OWVAR 37
36226: PUSH
36227: LD_INT 14
36229: ST_TO_ADDR
// vc_engine := engine_siberite ;
36230: LD_ADDR_OWVAR 39
36234: PUSH
36235: LD_INT 3
36237: ST_TO_ADDR
// vc_control := control_apeman ;
36238: LD_ADDR_OWVAR 38
36242: PUSH
36243: LD_INT 5
36245: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
36246: LD_ADDR_OWVAR 40
36250: PUSH
36251: LD_INT 29
36253: ST_TO_ADDR
// un := CreateVehicle ;
36254: LD_ADDR_VAR 0 2
36258: PUSH
36259: CALL_OW 45
36263: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36264: LD_VAR 0 2
36268: PPUSH
36269: LD_INT 1
36271: PPUSH
36272: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
36276: LD_INT 35
36278: PPUSH
36279: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36283: LD_VAR 0 2
36287: PPUSH
36288: LD_INT 22
36290: PUSH
36291: LD_OWVAR 2
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PPUSH
36300: CALL_OW 69
36304: PPUSH
36305: LD_VAR 0 2
36309: PPUSH
36310: CALL_OW 74
36314: PPUSH
36315: CALL_OW 115
// until IsDead ( un ) ;
36319: LD_VAR 0 2
36323: PPUSH
36324: CALL_OW 301
36328: IFFALSE 36276
// end ;
36330: PPOPN 2
36332: END
// every 0 0$1 trigger StreamModeActive and sStu do
36333: LD_EXP 67
36337: PUSH
36338: LD_EXP 106
36342: AND
36343: IFFALSE 36359
36345: GO 36347
36347: DISABLE
// begin ToLua ( displayStucuk(); ) ;
36348: LD_STRING displayStucuk();
36350: PPUSH
36351: CALL_OW 559
// ResetFog ;
36355: CALL_OW 335
// end ;
36359: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
36360: LD_EXP 67
36364: PUSH
36365: LD_EXP 99
36369: AND
36370: IFFALSE 36511
36372: GO 36374
36374: DISABLE
36375: LD_INT 0
36377: PPUSH
36378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36379: LD_ADDR_VAR 0 2
36383: PUSH
36384: LD_INT 22
36386: PUSH
36387: LD_OWVAR 2
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 21
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PPUSH
36410: CALL_OW 69
36414: ST_TO_ADDR
// if not tmp then
36415: LD_VAR 0 2
36419: NOT
36420: IFFALSE 36424
// exit ;
36422: GO 36511
// un := tmp [ rand ( 1 , tmp ) ] ;
36424: LD_ADDR_VAR 0 1
36428: PUSH
36429: LD_VAR 0 2
36433: PUSH
36434: LD_INT 1
36436: PPUSH
36437: LD_VAR 0 2
36441: PPUSH
36442: CALL_OW 12
36446: ARRAY
36447: ST_TO_ADDR
// SetSide ( un , 0 ) ;
36448: LD_VAR 0 1
36452: PPUSH
36453: LD_INT 0
36455: PPUSH
36456: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
36460: LD_VAR 0 1
36464: PPUSH
36465: LD_OWVAR 3
36469: PUSH
36470: LD_VAR 0 1
36474: DIFF
36475: PPUSH
36476: LD_VAR 0 1
36480: PPUSH
36481: CALL_OW 74
36485: PPUSH
36486: CALL_OW 115
// wait ( 0 0$20 ) ;
36490: LD_INT 700
36492: PPUSH
36493: CALL_OW 67
// SetSide ( un , your_side ) ;
36497: LD_VAR 0 1
36501: PPUSH
36502: LD_OWVAR 2
36506: PPUSH
36507: CALL_OW 235
// end ;
36511: PPOPN 2
36513: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
36514: LD_EXP 67
36518: PUSH
36519: LD_EXP 100
36523: AND
36524: IFFALSE 36630
36526: GO 36528
36528: DISABLE
36529: LD_INT 0
36531: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36532: LD_ADDR_VAR 0 1
36536: PUSH
36537: LD_INT 22
36539: PUSH
36540: LD_OWVAR 2
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 2
36551: PUSH
36552: LD_INT 30
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 30
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: LIST
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PPUSH
36581: CALL_OW 69
36585: ST_TO_ADDR
// if not depot then
36586: LD_VAR 0 1
36590: NOT
36591: IFFALSE 36595
// exit ;
36593: GO 36630
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
36595: LD_VAR 0 1
36599: PUSH
36600: LD_INT 1
36602: ARRAY
36603: PPUSH
36604: CALL_OW 250
36608: PPUSH
36609: LD_VAR 0 1
36613: PUSH
36614: LD_INT 1
36616: ARRAY
36617: PPUSH
36618: CALL_OW 251
36622: PPUSH
36623: LD_INT 70
36625: PPUSH
36626: CALL_OW 495
// end ;
36630: PPOPN 1
36632: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
36633: LD_EXP 67
36637: PUSH
36638: LD_EXP 101
36642: AND
36643: IFFALSE 36854
36645: GO 36647
36647: DISABLE
36648: LD_INT 0
36650: PPUSH
36651: PPUSH
36652: PPUSH
36653: PPUSH
36654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36655: LD_ADDR_VAR 0 5
36659: PUSH
36660: LD_INT 22
36662: PUSH
36663: LD_OWVAR 2
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 21
36674: PUSH
36675: LD_INT 1
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PPUSH
36686: CALL_OW 69
36690: ST_TO_ADDR
// if not tmp then
36691: LD_VAR 0 5
36695: NOT
36696: IFFALSE 36700
// exit ;
36698: GO 36854
// for i in tmp do
36700: LD_ADDR_VAR 0 1
36704: PUSH
36705: LD_VAR 0 5
36709: PUSH
36710: FOR_IN
36711: IFFALSE 36852
// begin d := rand ( 0 , 5 ) ;
36713: LD_ADDR_VAR 0 4
36717: PUSH
36718: LD_INT 0
36720: PPUSH
36721: LD_INT 5
36723: PPUSH
36724: CALL_OW 12
36728: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
36729: LD_ADDR_VAR 0 2
36733: PUSH
36734: LD_VAR 0 1
36738: PPUSH
36739: CALL_OW 250
36743: PPUSH
36744: LD_VAR 0 4
36748: PPUSH
36749: LD_INT 3
36751: PPUSH
36752: LD_INT 12
36754: PPUSH
36755: CALL_OW 12
36759: PPUSH
36760: CALL_OW 272
36764: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
36765: LD_ADDR_VAR 0 3
36769: PUSH
36770: LD_VAR 0 1
36774: PPUSH
36775: CALL_OW 251
36779: PPUSH
36780: LD_VAR 0 4
36784: PPUSH
36785: LD_INT 3
36787: PPUSH
36788: LD_INT 12
36790: PPUSH
36791: CALL_OW 12
36795: PPUSH
36796: CALL_OW 273
36800: ST_TO_ADDR
// if ValidHex ( x , y ) then
36801: LD_VAR 0 2
36805: PPUSH
36806: LD_VAR 0 3
36810: PPUSH
36811: CALL_OW 488
36815: IFFALSE 36850
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
36817: LD_VAR 0 1
36821: PPUSH
36822: LD_VAR 0 2
36826: PPUSH
36827: LD_VAR 0 3
36831: PPUSH
36832: LD_INT 3
36834: PPUSH
36835: LD_INT 6
36837: PPUSH
36838: CALL_OW 12
36842: PPUSH
36843: LD_INT 1
36845: PPUSH
36846: CALL_OW 483
// end ;
36850: GO 36710
36852: POP
36853: POP
// end ;
36854: PPOPN 5
36856: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
36857: LD_EXP 67
36861: PUSH
36862: LD_EXP 102
36866: AND
36867: IFFALSE 36961
36869: GO 36871
36871: DISABLE
36872: LD_INT 0
36874: PPUSH
36875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
36876: LD_ADDR_VAR 0 2
36880: PUSH
36881: LD_INT 22
36883: PUSH
36884: LD_OWVAR 2
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 32
36895: PUSH
36896: LD_INT 1
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 21
36905: PUSH
36906: LD_INT 2
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: LIST
36917: PPUSH
36918: CALL_OW 69
36922: ST_TO_ADDR
// if not tmp then
36923: LD_VAR 0 2
36927: NOT
36928: IFFALSE 36932
// exit ;
36930: GO 36961
// for i in tmp do
36932: LD_ADDR_VAR 0 1
36936: PUSH
36937: LD_VAR 0 2
36941: PUSH
36942: FOR_IN
36943: IFFALSE 36959
// SetFuel ( i , 0 ) ;
36945: LD_VAR 0 1
36949: PPUSH
36950: LD_INT 0
36952: PPUSH
36953: CALL_OW 240
36957: GO 36942
36959: POP
36960: POP
// end ;
36961: PPOPN 2
36963: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
36964: LD_EXP 67
36968: PUSH
36969: LD_EXP 103
36973: AND
36974: IFFALSE 37040
36976: GO 36978
36978: DISABLE
36979: LD_INT 0
36981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
36982: LD_ADDR_VAR 0 1
36986: PUSH
36987: LD_INT 22
36989: PUSH
36990: LD_OWVAR 2
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 30
37001: PUSH
37002: LD_INT 29
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PPUSH
37013: CALL_OW 69
37017: ST_TO_ADDR
// if not tmp then
37018: LD_VAR 0 1
37022: NOT
37023: IFFALSE 37027
// exit ;
37025: GO 37040
// DestroyUnit ( tmp [ 1 ] ) ;
37027: LD_VAR 0 1
37031: PUSH
37032: LD_INT 1
37034: ARRAY
37035: PPUSH
37036: CALL_OW 65
// end ;
37040: PPOPN 1
37042: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
37043: LD_EXP 67
37047: PUSH
37048: LD_EXP 105
37052: AND
37053: IFFALSE 37182
37055: GO 37057
37057: DISABLE
37058: LD_INT 0
37060: PPUSH
// begin uc_side := 0 ;
37061: LD_ADDR_OWVAR 20
37065: PUSH
37066: LD_INT 0
37068: ST_TO_ADDR
// uc_nation := nation_arabian ;
37069: LD_ADDR_OWVAR 21
37073: PUSH
37074: LD_INT 2
37076: ST_TO_ADDR
// hc_gallery :=  ;
37077: LD_ADDR_OWVAR 33
37081: PUSH
37082: LD_STRING 
37084: ST_TO_ADDR
// hc_name :=  ;
37085: LD_ADDR_OWVAR 26
37089: PUSH
37090: LD_STRING 
37092: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
37093: LD_INT 1
37095: PPUSH
37096: LD_INT 11
37098: PPUSH
37099: LD_INT 10
37101: PPUSH
37102: CALL_OW 380
// un := CreateHuman ;
37106: LD_ADDR_VAR 0 1
37110: PUSH
37111: CALL_OW 44
37115: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37116: LD_VAR 0 1
37120: PPUSH
37121: LD_INT 1
37123: PPUSH
37124: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
37128: LD_INT 35
37130: PPUSH
37131: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
37135: LD_VAR 0 1
37139: PPUSH
37140: LD_INT 22
37142: PUSH
37143: LD_OWVAR 2
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PPUSH
37152: CALL_OW 69
37156: PPUSH
37157: LD_VAR 0 1
37161: PPUSH
37162: CALL_OW 74
37166: PPUSH
37167: CALL_OW 115
// until IsDead ( un ) ;
37171: LD_VAR 0 1
37175: PPUSH
37176: CALL_OW 301
37180: IFFALSE 37128
// end ;
37182: PPOPN 1
37184: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
37185: LD_EXP 67
37189: PUSH
37190: LD_EXP 107
37194: AND
37195: IFFALSE 37207
37197: GO 37199
37199: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
37200: LD_STRING earthquake(getX(game), 0, 32)
37202: PPUSH
37203: CALL_OW 559
37207: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
37208: LD_EXP 67
37212: PUSH
37213: LD_EXP 108
37217: AND
37218: IFFALSE 37309
37220: GO 37222
37222: DISABLE
37223: LD_INT 0
37225: PPUSH
// begin enable ;
37226: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
37227: LD_ADDR_VAR 0 1
37231: PUSH
37232: LD_INT 22
37234: PUSH
37235: LD_OWVAR 2
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 21
37246: PUSH
37247: LD_INT 2
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 33
37256: PUSH
37257: LD_INT 3
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: LIST
37268: PPUSH
37269: CALL_OW 69
37273: ST_TO_ADDR
// if not tmp then
37274: LD_VAR 0 1
37278: NOT
37279: IFFALSE 37283
// exit ;
37281: GO 37309
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37283: LD_VAR 0 1
37287: PUSH
37288: LD_INT 1
37290: PPUSH
37291: LD_VAR 0 1
37295: PPUSH
37296: CALL_OW 12
37300: ARRAY
37301: PPUSH
37302: LD_INT 1
37304: PPUSH
37305: CALL_OW 234
// end ;
37309: PPOPN 1
37311: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
37312: LD_EXP 67
37316: PUSH
37317: LD_EXP 109
37321: AND
37322: IFFALSE 37463
37324: GO 37326
37326: DISABLE
37327: LD_INT 0
37329: PPUSH
37330: PPUSH
37331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37332: LD_ADDR_VAR 0 3
37336: PUSH
37337: LD_INT 22
37339: PUSH
37340: LD_OWVAR 2
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 25
37351: PUSH
37352: LD_INT 1
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PPUSH
37363: CALL_OW 69
37367: ST_TO_ADDR
// if not tmp then
37368: LD_VAR 0 3
37372: NOT
37373: IFFALSE 37377
// exit ;
37375: GO 37463
// un := tmp [ rand ( 1 , tmp ) ] ;
37377: LD_ADDR_VAR 0 2
37381: PUSH
37382: LD_VAR 0 3
37386: PUSH
37387: LD_INT 1
37389: PPUSH
37390: LD_VAR 0 3
37394: PPUSH
37395: CALL_OW 12
37399: ARRAY
37400: ST_TO_ADDR
// if Crawls ( un ) then
37401: LD_VAR 0 2
37405: PPUSH
37406: CALL_OW 318
37410: IFFALSE 37421
// ComWalk ( un ) ;
37412: LD_VAR 0 2
37416: PPUSH
37417: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
37421: LD_VAR 0 2
37425: PPUSH
37426: LD_INT 9
37428: PPUSH
37429: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
37433: LD_INT 28
37435: PPUSH
37436: LD_OWVAR 2
37440: PPUSH
37441: LD_INT 2
37443: PPUSH
37444: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
37448: LD_INT 29
37450: PPUSH
37451: LD_OWVAR 2
37455: PPUSH
37456: LD_INT 2
37458: PPUSH
37459: CALL_OW 322
// end ;
37463: PPOPN 3
37465: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
37466: LD_EXP 67
37470: PUSH
37471: LD_EXP 110
37475: AND
37476: IFFALSE 37587
37478: GO 37480
37480: DISABLE
37481: LD_INT 0
37483: PPUSH
37484: PPUSH
37485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37486: LD_ADDR_VAR 0 3
37490: PUSH
37491: LD_INT 22
37493: PUSH
37494: LD_OWVAR 2
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 25
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PPUSH
37517: CALL_OW 69
37521: ST_TO_ADDR
// if not tmp then
37522: LD_VAR 0 3
37526: NOT
37527: IFFALSE 37531
// exit ;
37529: GO 37587
// un := tmp [ rand ( 1 , tmp ) ] ;
37531: LD_ADDR_VAR 0 2
37535: PUSH
37536: LD_VAR 0 3
37540: PUSH
37541: LD_INT 1
37543: PPUSH
37544: LD_VAR 0 3
37548: PPUSH
37549: CALL_OW 12
37553: ARRAY
37554: ST_TO_ADDR
// if Crawls ( un ) then
37555: LD_VAR 0 2
37559: PPUSH
37560: CALL_OW 318
37564: IFFALSE 37575
// ComWalk ( un ) ;
37566: LD_VAR 0 2
37570: PPUSH
37571: CALL_OW 138
// SetClass ( un , class_mortar ) ;
37575: LD_VAR 0 2
37579: PPUSH
37580: LD_INT 8
37582: PPUSH
37583: CALL_OW 336
// end ;
37587: PPOPN 3
37589: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
37590: LD_EXP 67
37594: PUSH
37595: LD_EXP 111
37599: AND
37600: IFFALSE 37744
37602: GO 37604
37604: DISABLE
37605: LD_INT 0
37607: PPUSH
37608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
37609: LD_ADDR_VAR 0 2
37613: PUSH
37614: LD_INT 22
37616: PUSH
37617: LD_OWVAR 2
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 21
37628: PUSH
37629: LD_INT 2
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 2
37638: PUSH
37639: LD_INT 34
37641: PUSH
37642: LD_INT 12
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 34
37651: PUSH
37652: LD_INT 51
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 34
37661: PUSH
37662: LD_INT 32
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: LIST
37679: PPUSH
37680: CALL_OW 69
37684: ST_TO_ADDR
// if not tmp then
37685: LD_VAR 0 2
37689: NOT
37690: IFFALSE 37694
// exit ;
37692: GO 37744
// for i in tmp do
37694: LD_ADDR_VAR 0 1
37698: PUSH
37699: LD_VAR 0 2
37703: PUSH
37704: FOR_IN
37705: IFFALSE 37742
// if GetCargo ( i , mat_artifact ) = 0 then
37707: LD_VAR 0 1
37711: PPUSH
37712: LD_INT 4
37714: PPUSH
37715: CALL_OW 289
37719: PUSH
37720: LD_INT 0
37722: EQUAL
37723: IFFALSE 37740
// SetCargo ( i , mat_siberit , 100 ) ;
37725: LD_VAR 0 1
37729: PPUSH
37730: LD_INT 3
37732: PPUSH
37733: LD_INT 100
37735: PPUSH
37736: CALL_OW 290
37740: GO 37704
37742: POP
37743: POP
// end ;
37744: PPOPN 2
37746: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
37747: LD_EXP 67
37751: PUSH
37752: LD_EXP 112
37756: AND
37757: IFFALSE 37940
37759: GO 37761
37761: DISABLE
37762: LD_INT 0
37764: PPUSH
37765: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
37766: LD_ADDR_VAR 0 2
37770: PUSH
37771: LD_INT 22
37773: PUSH
37774: LD_OWVAR 2
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PPUSH
37783: CALL_OW 69
37787: ST_TO_ADDR
// if not tmp then
37788: LD_VAR 0 2
37792: NOT
37793: IFFALSE 37797
// exit ;
37795: GO 37940
// for i := 1 to 2 do
37797: LD_ADDR_VAR 0 1
37801: PUSH
37802: DOUBLE
37803: LD_INT 1
37805: DEC
37806: ST_TO_ADDR
37807: LD_INT 2
37809: PUSH
37810: FOR_TO
37811: IFFALSE 37938
// begin uc_side := your_side ;
37813: LD_ADDR_OWVAR 20
37817: PUSH
37818: LD_OWVAR 2
37822: ST_TO_ADDR
// uc_nation := nation_american ;
37823: LD_ADDR_OWVAR 21
37827: PUSH
37828: LD_INT 1
37830: ST_TO_ADDR
// vc_chassis := us_morphling ;
37831: LD_ADDR_OWVAR 37
37835: PUSH
37836: LD_INT 5
37838: ST_TO_ADDR
// vc_engine := engine_siberite ;
37839: LD_ADDR_OWVAR 39
37843: PUSH
37844: LD_INT 3
37846: ST_TO_ADDR
// vc_control := control_computer ;
37847: LD_ADDR_OWVAR 38
37851: PUSH
37852: LD_INT 3
37854: ST_TO_ADDR
// vc_weapon := us_double_laser ;
37855: LD_ADDR_OWVAR 40
37859: PUSH
37860: LD_INT 10
37862: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
37863: LD_VAR 0 2
37867: PUSH
37868: LD_INT 1
37870: ARRAY
37871: PPUSH
37872: CALL_OW 310
37876: NOT
37877: IFFALSE 37924
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
37879: CALL_OW 45
37883: PPUSH
37884: LD_VAR 0 2
37888: PUSH
37889: LD_INT 1
37891: ARRAY
37892: PPUSH
37893: CALL_OW 250
37897: PPUSH
37898: LD_VAR 0 2
37902: PUSH
37903: LD_INT 1
37905: ARRAY
37906: PPUSH
37907: CALL_OW 251
37911: PPUSH
37912: LD_INT 12
37914: PPUSH
37915: LD_INT 1
37917: PPUSH
37918: CALL_OW 50
37922: GO 37936
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
37924: CALL_OW 45
37928: PPUSH
37929: LD_INT 1
37931: PPUSH
37932: CALL_OW 51
// end ;
37936: GO 37810
37938: POP
37939: POP
// end ;
37940: PPOPN 2
37942: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
37943: LD_EXP 67
37947: PUSH
37948: LD_EXP 113
37952: AND
37953: IFFALSE 38175
37955: GO 37957
37957: DISABLE
37958: LD_INT 0
37960: PPUSH
37961: PPUSH
37962: PPUSH
37963: PPUSH
37964: PPUSH
37965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37966: LD_ADDR_VAR 0 6
37970: PUSH
37971: LD_INT 22
37973: PUSH
37974: LD_OWVAR 2
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 21
37985: PUSH
37986: LD_INT 1
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 3
37995: PUSH
37996: LD_INT 23
37998: PUSH
37999: LD_INT 0
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: LIST
38014: PPUSH
38015: CALL_OW 69
38019: ST_TO_ADDR
// if not tmp then
38020: LD_VAR 0 6
38024: NOT
38025: IFFALSE 38029
// exit ;
38027: GO 38175
// s1 := rand ( 1 , 4 ) ;
38029: LD_ADDR_VAR 0 2
38033: PUSH
38034: LD_INT 1
38036: PPUSH
38037: LD_INT 4
38039: PPUSH
38040: CALL_OW 12
38044: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
38045: LD_ADDR_VAR 0 4
38049: PUSH
38050: LD_VAR 0 6
38054: PUSH
38055: LD_INT 1
38057: ARRAY
38058: PPUSH
38059: LD_VAR 0 2
38063: PPUSH
38064: CALL_OW 259
38068: ST_TO_ADDR
// if s1 = 1 then
38069: LD_VAR 0 2
38073: PUSH
38074: LD_INT 1
38076: EQUAL
38077: IFFALSE 38097
// s2 := rand ( 2 , 4 ) else
38079: LD_ADDR_VAR 0 3
38083: PUSH
38084: LD_INT 2
38086: PPUSH
38087: LD_INT 4
38089: PPUSH
38090: CALL_OW 12
38094: ST_TO_ADDR
38095: GO 38105
// s2 := 1 ;
38097: LD_ADDR_VAR 0 3
38101: PUSH
38102: LD_INT 1
38104: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
38105: LD_ADDR_VAR 0 5
38109: PUSH
38110: LD_VAR 0 6
38114: PUSH
38115: LD_INT 1
38117: ARRAY
38118: PPUSH
38119: LD_VAR 0 3
38123: PPUSH
38124: CALL_OW 259
38128: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
38129: LD_VAR 0 6
38133: PUSH
38134: LD_INT 1
38136: ARRAY
38137: PPUSH
38138: LD_VAR 0 2
38142: PPUSH
38143: LD_VAR 0 5
38147: PPUSH
38148: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
38152: LD_VAR 0 6
38156: PUSH
38157: LD_INT 1
38159: ARRAY
38160: PPUSH
38161: LD_VAR 0 3
38165: PPUSH
38166: LD_VAR 0 4
38170: PPUSH
38171: CALL_OW 237
// end ;
38175: PPOPN 6
38177: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
38178: LD_EXP 67
38182: PUSH
38183: LD_EXP 114
38187: AND
38188: IFFALSE 38267
38190: GO 38192
38192: DISABLE
38193: LD_INT 0
38195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
38196: LD_ADDR_VAR 0 1
38200: PUSH
38201: LD_INT 22
38203: PUSH
38204: LD_OWVAR 2
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 30
38215: PUSH
38216: LD_INT 3
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PPUSH
38227: CALL_OW 69
38231: ST_TO_ADDR
// if not tmp then
38232: LD_VAR 0 1
38236: NOT
38237: IFFALSE 38241
// exit ;
38239: GO 38267
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
38241: LD_VAR 0 1
38245: PUSH
38246: LD_INT 1
38248: PPUSH
38249: LD_VAR 0 1
38253: PPUSH
38254: CALL_OW 12
38258: ARRAY
38259: PPUSH
38260: LD_INT 1
38262: PPUSH
38263: CALL_OW 234
// end ;
38267: PPOPN 1
38269: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
38270: LD_EXP 67
38274: PUSH
38275: LD_EXP 115
38279: AND
38280: IFFALSE 38392
38282: GO 38284
38284: DISABLE
38285: LD_INT 0
38287: PPUSH
38288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
38289: LD_ADDR_VAR 0 2
38293: PUSH
38294: LD_INT 22
38296: PUSH
38297: LD_OWVAR 2
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 2
38308: PUSH
38309: LD_INT 30
38311: PUSH
38312: LD_INT 27
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 30
38321: PUSH
38322: LD_INT 26
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 30
38331: PUSH
38332: LD_INT 28
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PPUSH
38349: CALL_OW 69
38353: ST_TO_ADDR
// if not tmp then
38354: LD_VAR 0 2
38358: NOT
38359: IFFALSE 38363
// exit ;
38361: GO 38392
// for i in tmp do
38363: LD_ADDR_VAR 0 1
38367: PUSH
38368: LD_VAR 0 2
38372: PUSH
38373: FOR_IN
38374: IFFALSE 38390
// SetLives ( i , 1 ) ;
38376: LD_VAR 0 1
38380: PPUSH
38381: LD_INT 1
38383: PPUSH
38384: CALL_OW 234
38388: GO 38373
38390: POP
38391: POP
// end ;
38392: PPOPN 2
38394: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
38395: LD_EXP 67
38399: PUSH
38400: LD_EXP 116
38404: AND
38405: IFFALSE 38692
38407: GO 38409
38409: DISABLE
38410: LD_INT 0
38412: PPUSH
38413: PPUSH
38414: PPUSH
// begin i := rand ( 1 , 7 ) ;
38415: LD_ADDR_VAR 0 1
38419: PUSH
38420: LD_INT 1
38422: PPUSH
38423: LD_INT 7
38425: PPUSH
38426: CALL_OW 12
38430: ST_TO_ADDR
// case i of 1 :
38431: LD_VAR 0 1
38435: PUSH
38436: LD_INT 1
38438: DOUBLE
38439: EQUAL
38440: IFTRUE 38444
38442: GO 38454
38444: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
38445: LD_STRING earthquake(getX(game), 0, 32)
38447: PPUSH
38448: CALL_OW 559
38452: GO 38692
38454: LD_INT 2
38456: DOUBLE
38457: EQUAL
38458: IFTRUE 38462
38460: GO 38476
38462: POP
// begin ToLua ( displayStucuk(); ) ;
38463: LD_STRING displayStucuk();
38465: PPUSH
38466: CALL_OW 559
// ResetFog ;
38470: CALL_OW 335
// end ; 3 :
38474: GO 38692
38476: LD_INT 3
38478: DOUBLE
38479: EQUAL
38480: IFTRUE 38484
38482: GO 38588
38484: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38485: LD_ADDR_VAR 0 2
38489: PUSH
38490: LD_INT 22
38492: PUSH
38493: LD_OWVAR 2
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 25
38504: PUSH
38505: LD_INT 1
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PPUSH
38516: CALL_OW 69
38520: ST_TO_ADDR
// if not tmp then
38521: LD_VAR 0 2
38525: NOT
38526: IFFALSE 38530
// exit ;
38528: GO 38692
// un := tmp [ rand ( 1 , tmp ) ] ;
38530: LD_ADDR_VAR 0 3
38534: PUSH
38535: LD_VAR 0 2
38539: PUSH
38540: LD_INT 1
38542: PPUSH
38543: LD_VAR 0 2
38547: PPUSH
38548: CALL_OW 12
38552: ARRAY
38553: ST_TO_ADDR
// if Crawls ( un ) then
38554: LD_VAR 0 3
38558: PPUSH
38559: CALL_OW 318
38563: IFFALSE 38574
// ComWalk ( un ) ;
38565: LD_VAR 0 3
38569: PPUSH
38570: CALL_OW 138
// SetClass ( un , class_mortar ) ;
38574: LD_VAR 0 3
38578: PPUSH
38579: LD_INT 8
38581: PPUSH
38582: CALL_OW 336
// end ; 4 :
38586: GO 38692
38588: LD_INT 4
38590: DOUBLE
38591: EQUAL
38592: IFTRUE 38596
38594: GO 38670
38596: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
38597: LD_ADDR_VAR 0 2
38601: PUSH
38602: LD_INT 22
38604: PUSH
38605: LD_OWVAR 2
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 30
38616: PUSH
38617: LD_INT 29
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PPUSH
38628: CALL_OW 69
38632: ST_TO_ADDR
// if not tmp then
38633: LD_VAR 0 2
38637: NOT
38638: IFFALSE 38642
// exit ;
38640: GO 38692
// CenterNowOnUnits ( tmp [ 1 ] ) ;
38642: LD_VAR 0 2
38646: PUSH
38647: LD_INT 1
38649: ARRAY
38650: PPUSH
38651: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
38655: LD_VAR 0 2
38659: PUSH
38660: LD_INT 1
38662: ARRAY
38663: PPUSH
38664: CALL_OW 65
// end ; 5 .. 7 :
38668: GO 38692
38670: LD_INT 5
38672: DOUBLE
38673: GREATEREQUAL
38674: IFFALSE 38682
38676: LD_INT 7
38678: DOUBLE
38679: LESSEQUAL
38680: IFTRUE 38684
38682: GO 38691
38684: POP
// StreamSibBomb ; end ;
38685: CALL 34929 0 0
38689: GO 38692
38691: POP
// end ;
38692: PPOPN 3
38694: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
38695: LD_EXP 67
38699: PUSH
38700: LD_EXP 117
38704: AND
38705: IFFALSE 38861
38707: GO 38709
38709: DISABLE
38710: LD_INT 0
38712: PPUSH
38713: PPUSH
38714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
38715: LD_ADDR_VAR 0 2
38719: PUSH
38720: LD_INT 81
38722: PUSH
38723: LD_OWVAR 2
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 2
38734: PUSH
38735: LD_INT 21
38737: PUSH
38738: LD_INT 1
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 21
38747: PUSH
38748: LD_INT 2
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: LIST
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PPUSH
38764: CALL_OW 69
38768: ST_TO_ADDR
// if not tmp then
38769: LD_VAR 0 2
38773: NOT
38774: IFFALSE 38778
// exit ;
38776: GO 38861
// p := 0 ;
38778: LD_ADDR_VAR 0 3
38782: PUSH
38783: LD_INT 0
38785: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38786: LD_INT 35
38788: PPUSH
38789: CALL_OW 67
// p := p + 1 ;
38793: LD_ADDR_VAR 0 3
38797: PUSH
38798: LD_VAR 0 3
38802: PUSH
38803: LD_INT 1
38805: PLUS
38806: ST_TO_ADDR
// for i in tmp do
38807: LD_ADDR_VAR 0 1
38811: PUSH
38812: LD_VAR 0 2
38816: PUSH
38817: FOR_IN
38818: IFFALSE 38849
// if GetLives ( i ) < 1000 then
38820: LD_VAR 0 1
38824: PPUSH
38825: CALL_OW 256
38829: PUSH
38830: LD_INT 1000
38832: LESS
38833: IFFALSE 38847
// SetLives ( i , 1000 ) ;
38835: LD_VAR 0 1
38839: PPUSH
38840: LD_INT 1000
38842: PPUSH
38843: CALL_OW 234
38847: GO 38817
38849: POP
38850: POP
// until p > 20 ;
38851: LD_VAR 0 3
38855: PUSH
38856: LD_INT 20
38858: GREATER
38859: IFFALSE 38786
// end ;
38861: PPOPN 3
38863: END
// every 0 0$1 trigger StreamModeActive and sTime do
38864: LD_EXP 67
38868: PUSH
38869: LD_EXP 118
38873: AND
38874: IFFALSE 38909
38876: GO 38878
38878: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
38879: LD_INT 28
38881: PPUSH
38882: LD_OWVAR 2
38886: PPUSH
38887: LD_INT 2
38889: PPUSH
38890: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
38894: LD_INT 30
38896: PPUSH
38897: LD_OWVAR 2
38901: PPUSH
38902: LD_INT 2
38904: PPUSH
38905: CALL_OW 322
// end ;
38909: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
38910: LD_EXP 67
38914: PUSH
38915: LD_EXP 119
38919: AND
38920: IFFALSE 39041
38922: GO 38924
38924: DISABLE
38925: LD_INT 0
38927: PPUSH
38928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38929: LD_ADDR_VAR 0 2
38933: PUSH
38934: LD_INT 22
38936: PUSH
38937: LD_OWVAR 2
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 21
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 3
38958: PUSH
38959: LD_INT 23
38961: PUSH
38962: LD_INT 0
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: LIST
38977: PPUSH
38978: CALL_OW 69
38982: ST_TO_ADDR
// if not tmp then
38983: LD_VAR 0 2
38987: NOT
38988: IFFALSE 38992
// exit ;
38990: GO 39041
// for i in tmp do
38992: LD_ADDR_VAR 0 1
38996: PUSH
38997: LD_VAR 0 2
39001: PUSH
39002: FOR_IN
39003: IFFALSE 39039
// begin if Crawls ( i ) then
39005: LD_VAR 0 1
39009: PPUSH
39010: CALL_OW 318
39014: IFFALSE 39025
// ComWalk ( i ) ;
39016: LD_VAR 0 1
39020: PPUSH
39021: CALL_OW 138
// SetClass ( i , 2 ) ;
39025: LD_VAR 0 1
39029: PPUSH
39030: LD_INT 2
39032: PPUSH
39033: CALL_OW 336
// end ;
39037: GO 39002
39039: POP
39040: POP
// end ;
39041: PPOPN 2
39043: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
39044: LD_EXP 67
39048: PUSH
39049: LD_EXP 120
39053: AND
39054: IFFALSE 39342
39056: GO 39058
39058: DISABLE
39059: LD_INT 0
39061: PPUSH
39062: PPUSH
39063: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
39064: LD_OWVAR 2
39068: PPUSH
39069: LD_INT 9
39071: PPUSH
39072: LD_INT 1
39074: PPUSH
39075: LD_INT 1
39077: PPUSH
39078: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
39082: LD_INT 9
39084: PPUSH
39085: LD_OWVAR 2
39089: PPUSH
39090: CALL_OW 343
// uc_side := 9 ;
39094: LD_ADDR_OWVAR 20
39098: PUSH
39099: LD_INT 9
39101: ST_TO_ADDR
// uc_nation := 2 ;
39102: LD_ADDR_OWVAR 21
39106: PUSH
39107: LD_INT 2
39109: ST_TO_ADDR
// hc_name := Dark Warrior ;
39110: LD_ADDR_OWVAR 26
39114: PUSH
39115: LD_STRING Dark Warrior
39117: ST_TO_ADDR
// hc_gallery :=  ;
39118: LD_ADDR_OWVAR 33
39122: PUSH
39123: LD_STRING 
39125: ST_TO_ADDR
// hc_noskilllimit := true ;
39126: LD_ADDR_OWVAR 76
39130: PUSH
39131: LD_INT 1
39133: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
39134: LD_ADDR_OWVAR 31
39138: PUSH
39139: LD_INT 30
39141: PUSH
39142: LD_INT 30
39144: PUSH
39145: LD_INT 30
39147: PUSH
39148: LD_INT 30
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: ST_TO_ADDR
// un := CreateHuman ;
39157: LD_ADDR_VAR 0 3
39161: PUSH
39162: CALL_OW 44
39166: ST_TO_ADDR
// hc_noskilllimit := false ;
39167: LD_ADDR_OWVAR 76
39171: PUSH
39172: LD_INT 0
39174: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39175: LD_VAR 0 3
39179: PPUSH
39180: LD_INT 1
39182: PPUSH
39183: CALL_OW 51
// ToLua ( playRanger() ) ;
39187: LD_STRING playRanger()
39189: PPUSH
39190: CALL_OW 559
// p := 0 ;
39194: LD_ADDR_VAR 0 2
39198: PUSH
39199: LD_INT 0
39201: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
39202: LD_INT 35
39204: PPUSH
39205: CALL_OW 67
// p := p + 1 ;
39209: LD_ADDR_VAR 0 2
39213: PUSH
39214: LD_VAR 0 2
39218: PUSH
39219: LD_INT 1
39221: PLUS
39222: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
39223: LD_VAR 0 3
39227: PPUSH
39228: CALL_OW 256
39232: PUSH
39233: LD_INT 1000
39235: LESS
39236: IFFALSE 39250
// SetLives ( un , 1000 ) ;
39238: LD_VAR 0 3
39242: PPUSH
39243: LD_INT 1000
39245: PPUSH
39246: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
39250: LD_VAR 0 3
39254: PPUSH
39255: LD_INT 81
39257: PUSH
39258: LD_OWVAR 2
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 91
39269: PUSH
39270: LD_VAR 0 3
39274: PUSH
39275: LD_INT 30
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: LIST
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PPUSH
39287: CALL_OW 69
39291: PPUSH
39292: LD_VAR 0 3
39296: PPUSH
39297: CALL_OW 74
39301: PPUSH
39302: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
39306: LD_VAR 0 2
39310: PUSH
39311: LD_INT 80
39313: GREATER
39314: PUSH
39315: LD_VAR 0 3
39319: PPUSH
39320: CALL_OW 301
39324: OR
39325: IFFALSE 39202
// if un then
39327: LD_VAR 0 3
39331: IFFALSE 39342
// RemoveUnit ( un ) ;
39333: LD_VAR 0 3
39337: PPUSH
39338: CALL_OW 64
// end ;
39342: PPOPN 3
39344: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
39345: LD_EXP 121
39349: IFFALSE 39465
39351: GO 39353
39353: DISABLE
39354: LD_INT 0
39356: PPUSH
39357: PPUSH
39358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
39359: LD_ADDR_VAR 0 2
39363: PUSH
39364: LD_INT 81
39366: PUSH
39367: LD_OWVAR 2
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 21
39378: PUSH
39379: LD_INT 1
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PPUSH
39390: CALL_OW 69
39394: ST_TO_ADDR
// ToLua ( playComputer() ) ;
39395: LD_STRING playComputer()
39397: PPUSH
39398: CALL_OW 559
// if not tmp then
39402: LD_VAR 0 2
39406: NOT
39407: IFFALSE 39411
// exit ;
39409: GO 39465
// for i in tmp do
39411: LD_ADDR_VAR 0 1
39415: PUSH
39416: LD_VAR 0 2
39420: PUSH
39421: FOR_IN
39422: IFFALSE 39463
// for j := 1 to 4 do
39424: LD_ADDR_VAR 0 3
39428: PUSH
39429: DOUBLE
39430: LD_INT 1
39432: DEC
39433: ST_TO_ADDR
39434: LD_INT 4
39436: PUSH
39437: FOR_TO
39438: IFFALSE 39459
// SetSkill ( i , j , 10 ) ;
39440: LD_VAR 0 1
39444: PPUSH
39445: LD_VAR 0 3
39449: PPUSH
39450: LD_INT 10
39452: PPUSH
39453: CALL_OW 237
39457: GO 39437
39459: POP
39460: POP
39461: GO 39421
39463: POP
39464: POP
// end ;
39465: PPOPN 3
39467: END
// every 0 0$1 trigger s30 do var i , tmp ;
39468: LD_EXP 122
39472: IFFALSE 39541
39474: GO 39476
39476: DISABLE
39477: LD_INT 0
39479: PPUSH
39480: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39481: LD_ADDR_VAR 0 2
39485: PUSH
39486: LD_INT 22
39488: PUSH
39489: LD_OWVAR 2
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PPUSH
39498: CALL_OW 69
39502: ST_TO_ADDR
// if not tmp then
39503: LD_VAR 0 2
39507: NOT
39508: IFFALSE 39512
// exit ;
39510: GO 39541
// for i in tmp do
39512: LD_ADDR_VAR 0 1
39516: PUSH
39517: LD_VAR 0 2
39521: PUSH
39522: FOR_IN
39523: IFFALSE 39539
// SetLives ( i , 300 ) ;
39525: LD_VAR 0 1
39529: PPUSH
39530: LD_INT 300
39532: PPUSH
39533: CALL_OW 234
39537: GO 39522
39539: POP
39540: POP
// end ;
39541: PPOPN 2
39543: END
// every 0 0$1 trigger s60 do var i , tmp ;
39544: LD_EXP 123
39548: IFFALSE 39617
39550: GO 39552
39552: DISABLE
39553: LD_INT 0
39555: PPUSH
39556: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39557: LD_ADDR_VAR 0 2
39561: PUSH
39562: LD_INT 22
39564: PUSH
39565: LD_OWVAR 2
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PPUSH
39574: CALL_OW 69
39578: ST_TO_ADDR
// if not tmp then
39579: LD_VAR 0 2
39583: NOT
39584: IFFALSE 39588
// exit ;
39586: GO 39617
// for i in tmp do
39588: LD_ADDR_VAR 0 1
39592: PUSH
39593: LD_VAR 0 2
39597: PUSH
39598: FOR_IN
39599: IFFALSE 39615
// SetLives ( i , 600 ) ;
39601: LD_VAR 0 1
39605: PPUSH
39606: LD_INT 600
39608: PPUSH
39609: CALL_OW 234
39613: GO 39598
39615: POP
39616: POP
// end ;
39617: PPOPN 2
39619: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
39620: LD_INT 0
39622: PPUSH
// case cmd of 301 :
39623: LD_VAR 0 1
39627: PUSH
39628: LD_INT 301
39630: DOUBLE
39631: EQUAL
39632: IFTRUE 39636
39634: GO 39668
39636: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
39637: LD_VAR 0 6
39641: PPUSH
39642: LD_VAR 0 7
39646: PPUSH
39647: LD_VAR 0 8
39651: PPUSH
39652: LD_VAR 0 4
39656: PPUSH
39657: LD_VAR 0 5
39661: PPUSH
39662: CALL 40869 0 5
39666: GO 39789
39668: LD_INT 302
39670: DOUBLE
39671: EQUAL
39672: IFTRUE 39676
39674: GO 39713
39676: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
39677: LD_VAR 0 6
39681: PPUSH
39682: LD_VAR 0 7
39686: PPUSH
39687: LD_VAR 0 8
39691: PPUSH
39692: LD_VAR 0 9
39696: PPUSH
39697: LD_VAR 0 4
39701: PPUSH
39702: LD_VAR 0 5
39706: PPUSH
39707: CALL 40960 0 6
39711: GO 39789
39713: LD_INT 303
39715: DOUBLE
39716: EQUAL
39717: IFTRUE 39721
39719: GO 39758
39721: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
39722: LD_VAR 0 6
39726: PPUSH
39727: LD_VAR 0 7
39731: PPUSH
39732: LD_VAR 0 8
39736: PPUSH
39737: LD_VAR 0 9
39741: PPUSH
39742: LD_VAR 0 4
39746: PPUSH
39747: LD_VAR 0 5
39751: PPUSH
39752: CALL 39794 0 6
39756: GO 39789
39758: LD_INT 304
39760: DOUBLE
39761: EQUAL
39762: IFTRUE 39766
39764: GO 39788
39766: POP
// hHackTeleport ( unit , x , y ) ; end ;
39767: LD_VAR 0 2
39771: PPUSH
39772: LD_VAR 0 4
39776: PPUSH
39777: LD_VAR 0 5
39781: PPUSH
39782: CALL 41553 0 3
39786: GO 39789
39788: POP
// end ;
39789: LD_VAR 0 12
39793: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
39794: LD_INT 0
39796: PPUSH
39797: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
39798: LD_VAR 0 1
39802: PUSH
39803: LD_INT 1
39805: LESS
39806: PUSH
39807: LD_VAR 0 1
39811: PUSH
39812: LD_INT 3
39814: GREATER
39815: OR
39816: PUSH
39817: LD_VAR 0 5
39821: PPUSH
39822: LD_VAR 0 6
39826: PPUSH
39827: CALL_OW 428
39831: OR
39832: IFFALSE 39836
// exit ;
39834: GO 40556
// uc_side := your_side ;
39836: LD_ADDR_OWVAR 20
39840: PUSH
39841: LD_OWVAR 2
39845: ST_TO_ADDR
// uc_nation := nation ;
39846: LD_ADDR_OWVAR 21
39850: PUSH
39851: LD_VAR 0 1
39855: ST_TO_ADDR
// bc_level = 1 ;
39856: LD_ADDR_OWVAR 43
39860: PUSH
39861: LD_INT 1
39863: ST_TO_ADDR
// case btype of 1 :
39864: LD_VAR 0 2
39868: PUSH
39869: LD_INT 1
39871: DOUBLE
39872: EQUAL
39873: IFTRUE 39877
39875: GO 39888
39877: POP
// bc_type := b_depot ; 2 :
39878: LD_ADDR_OWVAR 42
39882: PUSH
39883: LD_INT 0
39885: ST_TO_ADDR
39886: GO 40500
39888: LD_INT 2
39890: DOUBLE
39891: EQUAL
39892: IFTRUE 39896
39894: GO 39907
39896: POP
// bc_type := b_warehouse ; 3 :
39897: LD_ADDR_OWVAR 42
39901: PUSH
39902: LD_INT 1
39904: ST_TO_ADDR
39905: GO 40500
39907: LD_INT 3
39909: DOUBLE
39910: EQUAL
39911: IFTRUE 39915
39913: GO 39926
39915: POP
// bc_type := b_lab ; 4 .. 9 :
39916: LD_ADDR_OWVAR 42
39920: PUSH
39921: LD_INT 6
39923: ST_TO_ADDR
39924: GO 40500
39926: LD_INT 4
39928: DOUBLE
39929: GREATEREQUAL
39930: IFFALSE 39938
39932: LD_INT 9
39934: DOUBLE
39935: LESSEQUAL
39936: IFTRUE 39940
39938: GO 39992
39940: POP
// begin bc_type := b_lab_half ;
39941: LD_ADDR_OWVAR 42
39945: PUSH
39946: LD_INT 7
39948: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
39949: LD_ADDR_OWVAR 44
39953: PUSH
39954: LD_INT 10
39956: PUSH
39957: LD_INT 11
39959: PUSH
39960: LD_INT 12
39962: PUSH
39963: LD_INT 15
39965: PUSH
39966: LD_INT 14
39968: PUSH
39969: LD_INT 13
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: PUSH
39980: LD_VAR 0 2
39984: PUSH
39985: LD_INT 3
39987: MINUS
39988: ARRAY
39989: ST_TO_ADDR
// end ; 10 .. 13 :
39990: GO 40500
39992: LD_INT 10
39994: DOUBLE
39995: GREATEREQUAL
39996: IFFALSE 40004
39998: LD_INT 13
40000: DOUBLE
40001: LESSEQUAL
40002: IFTRUE 40006
40004: GO 40083
40006: POP
// begin bc_type := b_lab_full ;
40007: LD_ADDR_OWVAR 42
40011: PUSH
40012: LD_INT 8
40014: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
40015: LD_ADDR_OWVAR 44
40019: PUSH
40020: LD_INT 10
40022: PUSH
40023: LD_INT 12
40025: PUSH
40026: LD_INT 14
40028: PUSH
40029: LD_INT 13
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: PUSH
40038: LD_VAR 0 2
40042: PUSH
40043: LD_INT 9
40045: MINUS
40046: ARRAY
40047: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
40048: LD_ADDR_OWVAR 45
40052: PUSH
40053: LD_INT 11
40055: PUSH
40056: LD_INT 15
40058: PUSH
40059: LD_INT 12
40061: PUSH
40062: LD_INT 15
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: PUSH
40071: LD_VAR 0 2
40075: PUSH
40076: LD_INT 9
40078: MINUS
40079: ARRAY
40080: ST_TO_ADDR
// end ; 14 :
40081: GO 40500
40083: LD_INT 14
40085: DOUBLE
40086: EQUAL
40087: IFTRUE 40091
40089: GO 40102
40091: POP
// bc_type := b_workshop ; 15 :
40092: LD_ADDR_OWVAR 42
40096: PUSH
40097: LD_INT 2
40099: ST_TO_ADDR
40100: GO 40500
40102: LD_INT 15
40104: DOUBLE
40105: EQUAL
40106: IFTRUE 40110
40108: GO 40121
40110: POP
// bc_type := b_factory ; 16 :
40111: LD_ADDR_OWVAR 42
40115: PUSH
40116: LD_INT 3
40118: ST_TO_ADDR
40119: GO 40500
40121: LD_INT 16
40123: DOUBLE
40124: EQUAL
40125: IFTRUE 40129
40127: GO 40140
40129: POP
// bc_type := b_ext_gun ; 17 :
40130: LD_ADDR_OWVAR 42
40134: PUSH
40135: LD_INT 17
40137: ST_TO_ADDR
40138: GO 40500
40140: LD_INT 17
40142: DOUBLE
40143: EQUAL
40144: IFTRUE 40148
40146: GO 40176
40148: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
40149: LD_ADDR_OWVAR 42
40153: PUSH
40154: LD_INT 19
40156: PUSH
40157: LD_INT 23
40159: PUSH
40160: LD_INT 19
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: LIST
40167: PUSH
40168: LD_VAR 0 1
40172: ARRAY
40173: ST_TO_ADDR
40174: GO 40500
40176: LD_INT 18
40178: DOUBLE
40179: EQUAL
40180: IFTRUE 40184
40182: GO 40195
40184: POP
// bc_type := b_ext_radar ; 19 :
40185: LD_ADDR_OWVAR 42
40189: PUSH
40190: LD_INT 20
40192: ST_TO_ADDR
40193: GO 40500
40195: LD_INT 19
40197: DOUBLE
40198: EQUAL
40199: IFTRUE 40203
40201: GO 40214
40203: POP
// bc_type := b_ext_radio ; 20 :
40204: LD_ADDR_OWVAR 42
40208: PUSH
40209: LD_INT 22
40211: ST_TO_ADDR
40212: GO 40500
40214: LD_INT 20
40216: DOUBLE
40217: EQUAL
40218: IFTRUE 40222
40220: GO 40233
40222: POP
// bc_type := b_ext_siberium ; 21 :
40223: LD_ADDR_OWVAR 42
40227: PUSH
40228: LD_INT 21
40230: ST_TO_ADDR
40231: GO 40500
40233: LD_INT 21
40235: DOUBLE
40236: EQUAL
40237: IFTRUE 40241
40239: GO 40252
40241: POP
// bc_type := b_ext_computer ; 22 :
40242: LD_ADDR_OWVAR 42
40246: PUSH
40247: LD_INT 24
40249: ST_TO_ADDR
40250: GO 40500
40252: LD_INT 22
40254: DOUBLE
40255: EQUAL
40256: IFTRUE 40260
40258: GO 40271
40260: POP
// bc_type := b_ext_track ; 23 :
40261: LD_ADDR_OWVAR 42
40265: PUSH
40266: LD_INT 16
40268: ST_TO_ADDR
40269: GO 40500
40271: LD_INT 23
40273: DOUBLE
40274: EQUAL
40275: IFTRUE 40279
40277: GO 40290
40279: POP
// bc_type := b_ext_laser ; 24 :
40280: LD_ADDR_OWVAR 42
40284: PUSH
40285: LD_INT 25
40287: ST_TO_ADDR
40288: GO 40500
40290: LD_INT 24
40292: DOUBLE
40293: EQUAL
40294: IFTRUE 40298
40296: GO 40309
40298: POP
// bc_type := b_control_tower ; 25 :
40299: LD_ADDR_OWVAR 42
40303: PUSH
40304: LD_INT 36
40306: ST_TO_ADDR
40307: GO 40500
40309: LD_INT 25
40311: DOUBLE
40312: EQUAL
40313: IFTRUE 40317
40315: GO 40328
40317: POP
// bc_type := b_breastwork ; 26 :
40318: LD_ADDR_OWVAR 42
40322: PUSH
40323: LD_INT 31
40325: ST_TO_ADDR
40326: GO 40500
40328: LD_INT 26
40330: DOUBLE
40331: EQUAL
40332: IFTRUE 40336
40334: GO 40347
40336: POP
// bc_type := b_bunker ; 27 :
40337: LD_ADDR_OWVAR 42
40341: PUSH
40342: LD_INT 32
40344: ST_TO_ADDR
40345: GO 40500
40347: LD_INT 27
40349: DOUBLE
40350: EQUAL
40351: IFTRUE 40355
40353: GO 40366
40355: POP
// bc_type := b_turret ; 28 :
40356: LD_ADDR_OWVAR 42
40360: PUSH
40361: LD_INT 33
40363: ST_TO_ADDR
40364: GO 40500
40366: LD_INT 28
40368: DOUBLE
40369: EQUAL
40370: IFTRUE 40374
40372: GO 40385
40374: POP
// bc_type := b_armoury ; 29 :
40375: LD_ADDR_OWVAR 42
40379: PUSH
40380: LD_INT 4
40382: ST_TO_ADDR
40383: GO 40500
40385: LD_INT 29
40387: DOUBLE
40388: EQUAL
40389: IFTRUE 40393
40391: GO 40404
40393: POP
// bc_type := b_barracks ; 30 :
40394: LD_ADDR_OWVAR 42
40398: PUSH
40399: LD_INT 5
40401: ST_TO_ADDR
40402: GO 40500
40404: LD_INT 30
40406: DOUBLE
40407: EQUAL
40408: IFTRUE 40412
40410: GO 40423
40412: POP
// bc_type := b_solar_power ; 31 :
40413: LD_ADDR_OWVAR 42
40417: PUSH
40418: LD_INT 27
40420: ST_TO_ADDR
40421: GO 40500
40423: LD_INT 31
40425: DOUBLE
40426: EQUAL
40427: IFTRUE 40431
40429: GO 40442
40431: POP
// bc_type := b_oil_power ; 32 :
40432: LD_ADDR_OWVAR 42
40436: PUSH
40437: LD_INT 26
40439: ST_TO_ADDR
40440: GO 40500
40442: LD_INT 32
40444: DOUBLE
40445: EQUAL
40446: IFTRUE 40450
40448: GO 40461
40450: POP
// bc_type := b_siberite_power ; 33 :
40451: LD_ADDR_OWVAR 42
40455: PUSH
40456: LD_INT 28
40458: ST_TO_ADDR
40459: GO 40500
40461: LD_INT 33
40463: DOUBLE
40464: EQUAL
40465: IFTRUE 40469
40467: GO 40480
40469: POP
// bc_type := b_oil_mine ; 34 :
40470: LD_ADDR_OWVAR 42
40474: PUSH
40475: LD_INT 29
40477: ST_TO_ADDR
40478: GO 40500
40480: LD_INT 34
40482: DOUBLE
40483: EQUAL
40484: IFTRUE 40488
40486: GO 40499
40488: POP
// bc_type := b_siberite_mine ; end ;
40489: LD_ADDR_OWVAR 42
40493: PUSH
40494: LD_INT 30
40496: ST_TO_ADDR
40497: GO 40500
40499: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
40500: LD_ADDR_VAR 0 8
40504: PUSH
40505: LD_VAR 0 5
40509: PPUSH
40510: LD_VAR 0 6
40514: PPUSH
40515: LD_VAR 0 3
40519: PPUSH
40520: CALL_OW 47
40524: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
40525: LD_OWVAR 42
40529: PUSH
40530: LD_INT 32
40532: PUSH
40533: LD_INT 33
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: IN
40540: IFFALSE 40556
// PlaceWeaponTurret ( b , weapon ) ;
40542: LD_VAR 0 8
40546: PPUSH
40547: LD_VAR 0 4
40551: PPUSH
40552: CALL_OW 431
// end ;
40556: LD_VAR 0 7
40560: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
40561: LD_INT 0
40563: PPUSH
40564: PPUSH
40565: PPUSH
40566: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40567: LD_ADDR_VAR 0 4
40571: PUSH
40572: LD_INT 22
40574: PUSH
40575: LD_OWVAR 2
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 2
40586: PUSH
40587: LD_INT 30
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 30
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: LIST
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PPUSH
40616: CALL_OW 69
40620: ST_TO_ADDR
// if not tmp then
40621: LD_VAR 0 4
40625: NOT
40626: IFFALSE 40630
// exit ;
40628: GO 40689
// for i in tmp do
40630: LD_ADDR_VAR 0 2
40634: PUSH
40635: LD_VAR 0 4
40639: PUSH
40640: FOR_IN
40641: IFFALSE 40687
// for j = 1 to 3 do
40643: LD_ADDR_VAR 0 3
40647: PUSH
40648: DOUBLE
40649: LD_INT 1
40651: DEC
40652: ST_TO_ADDR
40653: LD_INT 3
40655: PUSH
40656: FOR_TO
40657: IFFALSE 40683
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
40659: LD_VAR 0 2
40663: PPUSH
40664: CALL_OW 274
40668: PPUSH
40669: LD_VAR 0 3
40673: PPUSH
40674: LD_INT 99999
40676: PPUSH
40677: CALL_OW 277
40681: GO 40656
40683: POP
40684: POP
40685: GO 40640
40687: POP
40688: POP
// end ;
40689: LD_VAR 0 1
40693: RET
// export function hHackSetLevel10 ; var i , j ; begin
40694: LD_INT 0
40696: PPUSH
40697: PPUSH
40698: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40699: LD_ADDR_VAR 0 2
40703: PUSH
40704: LD_INT 21
40706: PUSH
40707: LD_INT 1
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PPUSH
40714: CALL_OW 69
40718: PUSH
40719: FOR_IN
40720: IFFALSE 40772
// if IsSelected ( i ) then
40722: LD_VAR 0 2
40726: PPUSH
40727: CALL_OW 306
40731: IFFALSE 40770
// begin for j := 1 to 4 do
40733: LD_ADDR_VAR 0 3
40737: PUSH
40738: DOUBLE
40739: LD_INT 1
40741: DEC
40742: ST_TO_ADDR
40743: LD_INT 4
40745: PUSH
40746: FOR_TO
40747: IFFALSE 40768
// SetSkill ( i , j , 10 ) ;
40749: LD_VAR 0 2
40753: PPUSH
40754: LD_VAR 0 3
40758: PPUSH
40759: LD_INT 10
40761: PPUSH
40762: CALL_OW 237
40766: GO 40746
40768: POP
40769: POP
// end ;
40770: GO 40719
40772: POP
40773: POP
// end ;
40774: LD_VAR 0 1
40778: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
40779: LD_INT 0
40781: PPUSH
40782: PPUSH
40783: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
40784: LD_ADDR_VAR 0 2
40788: PUSH
40789: LD_INT 22
40791: PUSH
40792: LD_OWVAR 2
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 21
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PPUSH
40815: CALL_OW 69
40819: PUSH
40820: FOR_IN
40821: IFFALSE 40862
// begin for j := 1 to 4 do
40823: LD_ADDR_VAR 0 3
40827: PUSH
40828: DOUBLE
40829: LD_INT 1
40831: DEC
40832: ST_TO_ADDR
40833: LD_INT 4
40835: PUSH
40836: FOR_TO
40837: IFFALSE 40858
// SetSkill ( i , j , 10 ) ;
40839: LD_VAR 0 2
40843: PPUSH
40844: LD_VAR 0 3
40848: PPUSH
40849: LD_INT 10
40851: PPUSH
40852: CALL_OW 237
40856: GO 40836
40858: POP
40859: POP
// end ;
40860: GO 40820
40862: POP
40863: POP
// end ;
40864: LD_VAR 0 1
40868: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
40869: LD_INT 0
40871: PPUSH
// uc_side := your_side ;
40872: LD_ADDR_OWVAR 20
40876: PUSH
40877: LD_OWVAR 2
40881: ST_TO_ADDR
// uc_nation := nation ;
40882: LD_ADDR_OWVAR 21
40886: PUSH
40887: LD_VAR 0 1
40891: ST_TO_ADDR
// InitHc ;
40892: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
40896: LD_INT 0
40898: PPUSH
40899: LD_VAR 0 2
40903: PPUSH
40904: LD_VAR 0 3
40908: PPUSH
40909: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
40913: LD_VAR 0 4
40917: PPUSH
40918: LD_VAR 0 5
40922: PPUSH
40923: CALL_OW 428
40927: PUSH
40928: LD_INT 0
40930: EQUAL
40931: IFFALSE 40955
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
40933: CALL_OW 44
40937: PPUSH
40938: LD_VAR 0 4
40942: PPUSH
40943: LD_VAR 0 5
40947: PPUSH
40948: LD_INT 1
40950: PPUSH
40951: CALL_OW 48
// end ;
40955: LD_VAR 0 6
40959: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
40960: LD_INT 0
40962: PPUSH
40963: PPUSH
// uc_side := your_side ;
40964: LD_ADDR_OWVAR 20
40968: PUSH
40969: LD_OWVAR 2
40973: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
40974: LD_VAR 0 1
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 2
40984: PUSH
40985: LD_INT 3
40987: PUSH
40988: LD_INT 4
40990: PUSH
40991: LD_INT 5
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: IN
41001: IFFALSE 41013
// uc_nation := nation_american else
41003: LD_ADDR_OWVAR 21
41007: PUSH
41008: LD_INT 1
41010: ST_TO_ADDR
41011: GO 41056
// if chassis in [ 11 , 12 , 13 , 14 ] then
41013: LD_VAR 0 1
41017: PUSH
41018: LD_INT 11
41020: PUSH
41021: LD_INT 12
41023: PUSH
41024: LD_INT 13
41026: PUSH
41027: LD_INT 14
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: IN
41036: IFFALSE 41048
// uc_nation := nation_arabian else
41038: LD_ADDR_OWVAR 21
41042: PUSH
41043: LD_INT 2
41045: ST_TO_ADDR
41046: GO 41056
// uc_nation := nation_russian ;
41048: LD_ADDR_OWVAR 21
41052: PUSH
41053: LD_INT 3
41055: ST_TO_ADDR
// vc_chassis := chassis ;
41056: LD_ADDR_OWVAR 37
41060: PUSH
41061: LD_VAR 0 1
41065: ST_TO_ADDR
// vc_engine := engine ;
41066: LD_ADDR_OWVAR 39
41070: PUSH
41071: LD_VAR 0 2
41075: ST_TO_ADDR
// vc_control := control ;
41076: LD_ADDR_OWVAR 38
41080: PUSH
41081: LD_VAR 0 3
41085: ST_TO_ADDR
// vc_weapon := weapon ;
41086: LD_ADDR_OWVAR 40
41090: PUSH
41091: LD_VAR 0 4
41095: ST_TO_ADDR
// un := CreateVehicle ;
41096: LD_ADDR_VAR 0 8
41100: PUSH
41101: CALL_OW 45
41105: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
41106: LD_VAR 0 8
41110: PPUSH
41111: LD_INT 0
41113: PPUSH
41114: LD_INT 5
41116: PPUSH
41117: CALL_OW 12
41121: PPUSH
41122: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
41126: LD_VAR 0 8
41130: PPUSH
41131: LD_VAR 0 5
41135: PPUSH
41136: LD_VAR 0 6
41140: PPUSH
41141: LD_INT 1
41143: PPUSH
41144: CALL_OW 48
// end ;
41148: LD_VAR 0 7
41152: RET
// export hInvincible ; every 1 do
41153: GO 41155
41155: DISABLE
// hInvincible := [ ] ;
41156: LD_ADDR_EXP 124
41160: PUSH
41161: EMPTY
41162: ST_TO_ADDR
41163: END
// every 10 do var i ;
41164: GO 41166
41166: DISABLE
41167: LD_INT 0
41169: PPUSH
// begin enable ;
41170: ENABLE
// if not hInvincible then
41171: LD_EXP 124
41175: NOT
41176: IFFALSE 41180
// exit ;
41178: GO 41224
// for i in hInvincible do
41180: LD_ADDR_VAR 0 1
41184: PUSH
41185: LD_EXP 124
41189: PUSH
41190: FOR_IN
41191: IFFALSE 41222
// if GetLives ( i ) < 1000 then
41193: LD_VAR 0 1
41197: PPUSH
41198: CALL_OW 256
41202: PUSH
41203: LD_INT 1000
41205: LESS
41206: IFFALSE 41220
// SetLives ( i , 1000 ) ;
41208: LD_VAR 0 1
41212: PPUSH
41213: LD_INT 1000
41215: PPUSH
41216: CALL_OW 234
41220: GO 41190
41222: POP
41223: POP
// end ;
41224: PPOPN 1
41226: END
// export function hHackInvincible ; var i ; begin
41227: LD_INT 0
41229: PPUSH
41230: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
41231: LD_ADDR_VAR 0 2
41235: PUSH
41236: LD_INT 2
41238: PUSH
41239: LD_INT 21
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 21
41251: PUSH
41252: LD_INT 2
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: LIST
41263: PPUSH
41264: CALL_OW 69
41268: PUSH
41269: FOR_IN
41270: IFFALSE 41331
// if IsSelected ( i ) then
41272: LD_VAR 0 2
41276: PPUSH
41277: CALL_OW 306
41281: IFFALSE 41329
// begin if i in hInvincible then
41283: LD_VAR 0 2
41287: PUSH
41288: LD_EXP 124
41292: IN
41293: IFFALSE 41313
// hInvincible := hInvincible diff i else
41295: LD_ADDR_EXP 124
41299: PUSH
41300: LD_EXP 124
41304: PUSH
41305: LD_VAR 0 2
41309: DIFF
41310: ST_TO_ADDR
41311: GO 41329
// hInvincible := hInvincible union i ;
41313: LD_ADDR_EXP 124
41317: PUSH
41318: LD_EXP 124
41322: PUSH
41323: LD_VAR 0 2
41327: UNION
41328: ST_TO_ADDR
// end ;
41329: GO 41269
41331: POP
41332: POP
// end ;
41333: LD_VAR 0 1
41337: RET
// export function hHackInvisible ; var i , j ; begin
41338: LD_INT 0
41340: PPUSH
41341: PPUSH
41342: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
41343: LD_ADDR_VAR 0 2
41347: PUSH
41348: LD_INT 21
41350: PUSH
41351: LD_INT 1
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PPUSH
41358: CALL_OW 69
41362: PUSH
41363: FOR_IN
41364: IFFALSE 41388
// if IsSelected ( i ) then
41366: LD_VAR 0 2
41370: PPUSH
41371: CALL_OW 306
41375: IFFALSE 41386
// ComForceInvisible ( i ) ;
41377: LD_VAR 0 2
41381: PPUSH
41382: CALL_OW 496
41386: GO 41363
41388: POP
41389: POP
// end ;
41390: LD_VAR 0 1
41394: RET
// export function hHackChangeYourSide ; begin
41395: LD_INT 0
41397: PPUSH
// if your_side = 8 then
41398: LD_OWVAR 2
41402: PUSH
41403: LD_INT 8
41405: EQUAL
41406: IFFALSE 41418
// your_side := 0 else
41408: LD_ADDR_OWVAR 2
41412: PUSH
41413: LD_INT 0
41415: ST_TO_ADDR
41416: GO 41432
// your_side := your_side + 1 ;
41418: LD_ADDR_OWVAR 2
41422: PUSH
41423: LD_OWVAR 2
41427: PUSH
41428: LD_INT 1
41430: PLUS
41431: ST_TO_ADDR
// end ;
41432: LD_VAR 0 1
41436: RET
// export function hHackChangeUnitSide ; var i , j ; begin
41437: LD_INT 0
41439: PPUSH
41440: PPUSH
41441: PPUSH
// for i in all_units do
41442: LD_ADDR_VAR 0 2
41446: PUSH
41447: LD_OWVAR 3
41451: PUSH
41452: FOR_IN
41453: IFFALSE 41531
// if IsSelected ( i ) then
41455: LD_VAR 0 2
41459: PPUSH
41460: CALL_OW 306
41464: IFFALSE 41529
// begin j := GetSide ( i ) ;
41466: LD_ADDR_VAR 0 3
41470: PUSH
41471: LD_VAR 0 2
41475: PPUSH
41476: CALL_OW 255
41480: ST_TO_ADDR
// if j = 8 then
41481: LD_VAR 0 3
41485: PUSH
41486: LD_INT 8
41488: EQUAL
41489: IFFALSE 41501
// j := 0 else
41491: LD_ADDR_VAR 0 3
41495: PUSH
41496: LD_INT 0
41498: ST_TO_ADDR
41499: GO 41515
// j := j + 1 ;
41501: LD_ADDR_VAR 0 3
41505: PUSH
41506: LD_VAR 0 3
41510: PUSH
41511: LD_INT 1
41513: PLUS
41514: ST_TO_ADDR
// SetSide ( i , j ) ;
41515: LD_VAR 0 2
41519: PPUSH
41520: LD_VAR 0 3
41524: PPUSH
41525: CALL_OW 235
// end ;
41529: GO 41452
41531: POP
41532: POP
// end ;
41533: LD_VAR 0 1
41537: RET
// export function hHackFog ; begin
41538: LD_INT 0
41540: PPUSH
// FogOff ( true ) ;
41541: LD_INT 1
41543: PPUSH
41544: CALL_OW 344
// end ;
41548: LD_VAR 0 1
41552: RET
// export function hHackTeleport ( unit , x , y ) ; begin
41553: LD_INT 0
41555: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
41556: LD_VAR 0 1
41560: PPUSH
41561: LD_VAR 0 2
41565: PPUSH
41566: LD_VAR 0 3
41570: PPUSH
41571: LD_INT 1
41573: PPUSH
41574: LD_INT 1
41576: PPUSH
41577: CALL_OW 483
// CenterOnXY ( x , y ) ;
41581: LD_VAR 0 2
41585: PPUSH
41586: LD_VAR 0 3
41590: PPUSH
41591: CALL_OW 84
// end ; end_of_file
41595: LD_VAR 0 4
41599: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
41600: LD_INT 0
41602: PPUSH
41603: PPUSH
41604: PPUSH
41605: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
41606: LD_VAR 0 1
41610: PPUSH
41611: CALL_OW 264
41615: PUSH
41616: LD_EXP 52
41620: EQUAL
41621: IFFALSE 41693
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
41623: LD_INT 68
41625: PPUSH
41626: LD_VAR 0 1
41630: PPUSH
41631: CALL_OW 255
41635: PPUSH
41636: CALL_OW 321
41640: PUSH
41641: LD_INT 2
41643: EQUAL
41644: IFFALSE 41656
// eff := 70 else
41646: LD_ADDR_VAR 0 4
41650: PUSH
41651: LD_INT 70
41653: ST_TO_ADDR
41654: GO 41664
// eff := 30 ;
41656: LD_ADDR_VAR 0 4
41660: PUSH
41661: LD_INT 30
41663: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
41664: LD_VAR 0 1
41668: PPUSH
41669: CALL_OW 250
41673: PPUSH
41674: LD_VAR 0 1
41678: PPUSH
41679: CALL_OW 251
41683: PPUSH
41684: LD_VAR 0 4
41688: PPUSH
41689: CALL_OW 495
// end ; end ;
41693: LD_VAR 0 2
41697: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
41698: LD_INT 0
41700: PPUSH
// end ;
41701: LD_VAR 0 4
41705: RET
// export function SOS_Command ( cmd ) ; begin
41706: LD_INT 0
41708: PPUSH
// end ;
41709: LD_VAR 0 2
41713: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
41714: LD_INT 0
41716: PPUSH
// end ;
41717: LD_VAR 0 6
41721: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
41722: LD_INT 0
41724: PPUSH
41725: PPUSH
// if not vehicle or not factory then
41726: LD_VAR 0 1
41730: NOT
41731: PUSH
41732: LD_VAR 0 2
41736: NOT
41737: OR
41738: IFFALSE 41742
// exit ;
41740: GO 41973
// if factoryWaypoints >= factory then
41742: LD_EXP 125
41746: PUSH
41747: LD_VAR 0 2
41751: GREATEREQUAL
41752: IFFALSE 41973
// if factoryWaypoints [ factory ] then
41754: LD_EXP 125
41758: PUSH
41759: LD_VAR 0 2
41763: ARRAY
41764: IFFALSE 41973
// begin if GetControl ( vehicle ) = control_manual then
41766: LD_VAR 0 1
41770: PPUSH
41771: CALL_OW 263
41775: PUSH
41776: LD_INT 1
41778: EQUAL
41779: IFFALSE 41860
// begin driver := IsDrivenBy ( vehicle ) ;
41781: LD_ADDR_VAR 0 4
41785: PUSH
41786: LD_VAR 0 1
41790: PPUSH
41791: CALL_OW 311
41795: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
41796: LD_VAR 0 4
41800: PPUSH
41801: LD_EXP 125
41805: PUSH
41806: LD_VAR 0 2
41810: ARRAY
41811: PUSH
41812: LD_INT 3
41814: ARRAY
41815: PPUSH
41816: LD_EXP 125
41820: PUSH
41821: LD_VAR 0 2
41825: ARRAY
41826: PUSH
41827: LD_INT 4
41829: ARRAY
41830: PPUSH
41831: CALL_OW 171
// AddComExitVehicle ( driver ) ;
41835: LD_VAR 0 4
41839: PPUSH
41840: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
41844: LD_VAR 0 4
41848: PPUSH
41849: LD_VAR 0 2
41853: PPUSH
41854: CALL_OW 180
// end else
41858: GO 41973
// if GetControl ( vehicle ) = control_remote then
41860: LD_VAR 0 1
41864: PPUSH
41865: CALL_OW 263
41869: PUSH
41870: LD_INT 2
41872: EQUAL
41873: IFFALSE 41934
// begin wait ( 0 0$2 ) ;
41875: LD_INT 70
41877: PPUSH
41878: CALL_OW 67
// if Connect ( vehicle ) then
41882: LD_VAR 0 1
41886: PPUSH
41887: CALL 54197 0 1
41891: IFFALSE 41932
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
41893: LD_VAR 0 1
41897: PPUSH
41898: LD_EXP 125
41902: PUSH
41903: LD_VAR 0 2
41907: ARRAY
41908: PUSH
41909: LD_INT 3
41911: ARRAY
41912: PPUSH
41913: LD_EXP 125
41917: PUSH
41918: LD_VAR 0 2
41922: ARRAY
41923: PUSH
41924: LD_INT 4
41926: ARRAY
41927: PPUSH
41928: CALL_OW 171
// end else
41932: GO 41973
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
41934: LD_VAR 0 1
41938: PPUSH
41939: LD_EXP 125
41943: PUSH
41944: LD_VAR 0 2
41948: ARRAY
41949: PUSH
41950: LD_INT 3
41952: ARRAY
41953: PPUSH
41954: LD_EXP 125
41958: PUSH
41959: LD_VAR 0 2
41963: ARRAY
41964: PUSH
41965: LD_INT 4
41967: ARRAY
41968: PPUSH
41969: CALL_OW 171
// end ; end ;
41973: LD_VAR 0 3
41977: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
41978: LD_INT 0
41980: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
41981: LD_VAR 0 1
41985: PUSH
41986: LD_INT 250
41988: EQUAL
41989: PUSH
41990: LD_VAR 0 2
41994: PPUSH
41995: CALL_OW 264
41999: PUSH
42000: LD_EXP 55
42004: EQUAL
42005: AND
42006: IFFALSE 42027
// MinerPlaceMine ( unit , x , y ) ;
42008: LD_VAR 0 2
42012: PPUSH
42013: LD_VAR 0 4
42017: PPUSH
42018: LD_VAR 0 5
42022: PPUSH
42023: CALL 44755 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
42027: LD_VAR 0 1
42031: PUSH
42032: LD_INT 251
42034: EQUAL
42035: PUSH
42036: LD_VAR 0 2
42040: PPUSH
42041: CALL_OW 264
42045: PUSH
42046: LD_EXP 55
42050: EQUAL
42051: AND
42052: IFFALSE 42073
// MinerDetonateMine ( unit , x , y ) ;
42054: LD_VAR 0 2
42058: PPUSH
42059: LD_VAR 0 4
42063: PPUSH
42064: LD_VAR 0 5
42068: PPUSH
42069: CALL 45032 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
42073: LD_VAR 0 1
42077: PUSH
42078: LD_INT 252
42080: EQUAL
42081: PUSH
42082: LD_VAR 0 2
42086: PPUSH
42087: CALL_OW 264
42091: PUSH
42092: LD_EXP 55
42096: EQUAL
42097: AND
42098: IFFALSE 42119
// MinerCreateMinefield ( unit , x , y ) ;
42100: LD_VAR 0 2
42104: PPUSH
42105: LD_VAR 0 4
42109: PPUSH
42110: LD_VAR 0 5
42114: PPUSH
42115: CALL 45449 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
42119: LD_VAR 0 1
42123: PUSH
42124: LD_INT 253
42126: EQUAL
42127: PUSH
42128: LD_VAR 0 2
42132: PPUSH
42133: CALL_OW 257
42137: PUSH
42138: LD_INT 5
42140: EQUAL
42141: AND
42142: IFFALSE 42163
// ComBinocular ( unit , x , y ) ;
42144: LD_VAR 0 2
42148: PPUSH
42149: LD_VAR 0 4
42153: PPUSH
42154: LD_VAR 0 5
42158: PPUSH
42159: CALL 45820 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
42163: LD_VAR 0 1
42167: PUSH
42168: LD_INT 254
42170: EQUAL
42171: PUSH
42172: LD_VAR 0 2
42176: PPUSH
42177: CALL_OW 264
42181: PUSH
42182: LD_EXP 50
42186: EQUAL
42187: AND
42188: PUSH
42189: LD_VAR 0 3
42193: PPUSH
42194: CALL_OW 263
42198: PUSH
42199: LD_INT 3
42201: EQUAL
42202: AND
42203: IFFALSE 42219
// HackDestroyVehicle ( unit , selectedUnit ) ;
42205: LD_VAR 0 2
42209: PPUSH
42210: LD_VAR 0 3
42214: PPUSH
42215: CALL 44115 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
42219: LD_VAR 0 1
42223: PUSH
42224: LD_INT 255
42226: EQUAL
42227: PUSH
42228: LD_VAR 0 2
42232: PPUSH
42233: CALL_OW 264
42237: PUSH
42238: LD_INT 14
42240: PUSH
42241: LD_INT 53
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: IN
42248: AND
42249: PUSH
42250: LD_VAR 0 4
42254: PPUSH
42255: LD_VAR 0 5
42259: PPUSH
42260: CALL_OW 488
42264: AND
42265: IFFALSE 42289
// CutTreeXYR ( unit , x , y , 12 ) ;
42267: LD_VAR 0 2
42271: PPUSH
42272: LD_VAR 0 4
42276: PPUSH
42277: LD_VAR 0 5
42281: PPUSH
42282: LD_INT 12
42284: PPUSH
42285: CALL 42681 0 4
// if cmd = 256 then
42289: LD_VAR 0 1
42293: PUSH
42294: LD_INT 256
42296: EQUAL
42297: IFFALSE 42318
// SetFactoryWaypoint ( unit , x , y ) ;
42299: LD_VAR 0 2
42303: PPUSH
42304: LD_VAR 0 4
42308: PPUSH
42309: LD_VAR 0 5
42313: PPUSH
42314: CALL 42323 0 3
// end ;
42318: LD_VAR 0 6
42322: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
42323: LD_INT 0
42325: PPUSH
42326: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
42327: LD_VAR 0 1
42331: NOT
42332: PUSH
42333: LD_VAR 0 2
42337: PPUSH
42338: LD_VAR 0 3
42342: PPUSH
42343: CALL_OW 488
42347: NOT
42348: OR
42349: PUSH
42350: LD_VAR 0 1
42354: PPUSH
42355: CALL_OW 266
42359: PUSH
42360: LD_INT 3
42362: NONEQUAL
42363: PUSH
42364: LD_VAR 0 1
42368: PPUSH
42369: CALL_OW 247
42373: PUSH
42374: LD_INT 1
42376: EQUAL
42377: NOT
42378: AND
42379: OR
42380: IFFALSE 42384
// exit ;
42382: GO 42533
// if GetType ( factory ) = unit_human then
42384: LD_VAR 0 1
42388: PPUSH
42389: CALL_OW 247
42393: PUSH
42394: LD_INT 1
42396: EQUAL
42397: IFFALSE 42414
// factory := IsInUnit ( factory ) ;
42399: LD_ADDR_VAR 0 1
42403: PUSH
42404: LD_VAR 0 1
42408: PPUSH
42409: CALL_OW 310
42413: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
42414: LD_VAR 0 1
42418: PPUSH
42419: CALL_OW 266
42423: PUSH
42424: LD_INT 3
42426: NONEQUAL
42427: IFFALSE 42431
// exit ;
42429: GO 42533
// if HexInfo ( x , y ) = factory then
42431: LD_VAR 0 2
42435: PPUSH
42436: LD_VAR 0 3
42440: PPUSH
42441: CALL_OW 428
42445: PUSH
42446: LD_VAR 0 1
42450: EQUAL
42451: IFFALSE 42478
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
42453: LD_ADDR_EXP 125
42457: PUSH
42458: LD_EXP 125
42462: PPUSH
42463: LD_VAR 0 1
42467: PPUSH
42468: LD_INT 0
42470: PPUSH
42471: CALL_OW 1
42475: ST_TO_ADDR
42476: GO 42529
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
42478: LD_ADDR_EXP 125
42482: PUSH
42483: LD_EXP 125
42487: PPUSH
42488: LD_VAR 0 1
42492: PPUSH
42493: LD_VAR 0 1
42497: PPUSH
42498: CALL_OW 255
42502: PUSH
42503: LD_VAR 0 1
42507: PUSH
42508: LD_VAR 0 2
42512: PUSH
42513: LD_VAR 0 3
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: PPUSH
42524: CALL_OW 1
42528: ST_TO_ADDR
// UpdateFactoryWaypoints ;
42529: CALL 42538 0 0
// end ;
42533: LD_VAR 0 4
42537: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
42538: LD_INT 0
42540: PPUSH
42541: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
42542: LD_STRING resetFactoryWaypoint();
42544: PPUSH
42545: CALL_OW 559
// if factoryWaypoints then
42549: LD_EXP 125
42553: IFFALSE 42676
// begin for i := 1 to factoryWaypoints do
42555: LD_ADDR_VAR 0 2
42559: PUSH
42560: DOUBLE
42561: LD_INT 1
42563: DEC
42564: ST_TO_ADDR
42565: LD_EXP 125
42569: PUSH
42570: FOR_TO
42571: IFFALSE 42674
// if factoryWaypoints [ i ] then
42573: LD_EXP 125
42577: PUSH
42578: LD_VAR 0 2
42582: ARRAY
42583: IFFALSE 42672
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
42585: LD_STRING setFactoryWaypointXY(
42587: PUSH
42588: LD_EXP 125
42592: PUSH
42593: LD_VAR 0 2
42597: ARRAY
42598: PUSH
42599: LD_INT 1
42601: ARRAY
42602: STR
42603: PUSH
42604: LD_STRING ,
42606: STR
42607: PUSH
42608: LD_EXP 125
42612: PUSH
42613: LD_VAR 0 2
42617: ARRAY
42618: PUSH
42619: LD_INT 2
42621: ARRAY
42622: STR
42623: PUSH
42624: LD_STRING ,
42626: STR
42627: PUSH
42628: LD_EXP 125
42632: PUSH
42633: LD_VAR 0 2
42637: ARRAY
42638: PUSH
42639: LD_INT 3
42641: ARRAY
42642: STR
42643: PUSH
42644: LD_STRING ,
42646: STR
42647: PUSH
42648: LD_EXP 125
42652: PUSH
42653: LD_VAR 0 2
42657: ARRAY
42658: PUSH
42659: LD_INT 4
42661: ARRAY
42662: STR
42663: PUSH
42664: LD_STRING )
42666: STR
42667: PPUSH
42668: CALL_OW 559
42672: GO 42570
42674: POP
42675: POP
// end ; end ;
42676: LD_VAR 0 1
42680: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
42681: LD_INT 0
42683: PPUSH
42684: PPUSH
42685: PPUSH
42686: PPUSH
42687: PPUSH
42688: PPUSH
42689: PPUSH
42690: PPUSH
42691: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
42692: LD_VAR 0 1
42696: NOT
42697: PUSH
42698: LD_VAR 0 2
42702: PPUSH
42703: LD_VAR 0 3
42707: PPUSH
42708: CALL_OW 488
42712: NOT
42713: OR
42714: PUSH
42715: LD_VAR 0 4
42719: NOT
42720: OR
42721: IFFALSE 42725
// exit ;
42723: GO 43065
// list := [ ] ;
42725: LD_ADDR_VAR 0 13
42729: PUSH
42730: EMPTY
42731: ST_TO_ADDR
// if x - r < 0 then
42732: LD_VAR 0 2
42736: PUSH
42737: LD_VAR 0 4
42741: MINUS
42742: PUSH
42743: LD_INT 0
42745: LESS
42746: IFFALSE 42758
// min_x := 0 else
42748: LD_ADDR_VAR 0 7
42752: PUSH
42753: LD_INT 0
42755: ST_TO_ADDR
42756: GO 42774
// min_x := x - r ;
42758: LD_ADDR_VAR 0 7
42762: PUSH
42763: LD_VAR 0 2
42767: PUSH
42768: LD_VAR 0 4
42772: MINUS
42773: ST_TO_ADDR
// if y - r < 0 then
42774: LD_VAR 0 3
42778: PUSH
42779: LD_VAR 0 4
42783: MINUS
42784: PUSH
42785: LD_INT 0
42787: LESS
42788: IFFALSE 42800
// min_y := 0 else
42790: LD_ADDR_VAR 0 8
42794: PUSH
42795: LD_INT 0
42797: ST_TO_ADDR
42798: GO 42816
// min_y := y - r ;
42800: LD_ADDR_VAR 0 8
42804: PUSH
42805: LD_VAR 0 3
42809: PUSH
42810: LD_VAR 0 4
42814: MINUS
42815: ST_TO_ADDR
// max_x := x + r ;
42816: LD_ADDR_VAR 0 9
42820: PUSH
42821: LD_VAR 0 2
42825: PUSH
42826: LD_VAR 0 4
42830: PLUS
42831: ST_TO_ADDR
// max_y := y + r ;
42832: LD_ADDR_VAR 0 10
42836: PUSH
42837: LD_VAR 0 3
42841: PUSH
42842: LD_VAR 0 4
42846: PLUS
42847: ST_TO_ADDR
// for _x = min_x to max_x do
42848: LD_ADDR_VAR 0 11
42852: PUSH
42853: DOUBLE
42854: LD_VAR 0 7
42858: DEC
42859: ST_TO_ADDR
42860: LD_VAR 0 9
42864: PUSH
42865: FOR_TO
42866: IFFALSE 42983
// for _y = min_y to max_y do
42868: LD_ADDR_VAR 0 12
42872: PUSH
42873: DOUBLE
42874: LD_VAR 0 8
42878: DEC
42879: ST_TO_ADDR
42880: LD_VAR 0 10
42884: PUSH
42885: FOR_TO
42886: IFFALSE 42979
// begin if not ValidHex ( _x , _y ) then
42888: LD_VAR 0 11
42892: PPUSH
42893: LD_VAR 0 12
42897: PPUSH
42898: CALL_OW 488
42902: NOT
42903: IFFALSE 42907
// continue ;
42905: GO 42885
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
42907: LD_VAR 0 11
42911: PPUSH
42912: LD_VAR 0 12
42916: PPUSH
42917: CALL_OW 351
42921: PUSH
42922: LD_VAR 0 11
42926: PPUSH
42927: LD_VAR 0 12
42931: PPUSH
42932: CALL_OW 554
42936: AND
42937: IFFALSE 42977
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
42939: LD_ADDR_VAR 0 13
42943: PUSH
42944: LD_VAR 0 13
42948: PPUSH
42949: LD_VAR 0 13
42953: PUSH
42954: LD_INT 1
42956: PLUS
42957: PPUSH
42958: LD_VAR 0 11
42962: PUSH
42963: LD_VAR 0 12
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PPUSH
42972: CALL_OW 2
42976: ST_TO_ADDR
// end ;
42977: GO 42885
42979: POP
42980: POP
42981: GO 42865
42983: POP
42984: POP
// if not list then
42985: LD_VAR 0 13
42989: NOT
42990: IFFALSE 42994
// exit ;
42992: GO 43065
// for i in list do
42994: LD_ADDR_VAR 0 6
42998: PUSH
42999: LD_VAR 0 13
43003: PUSH
43004: FOR_IN
43005: IFFALSE 43063
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
43007: LD_VAR 0 1
43011: PPUSH
43012: LD_STRING M
43014: PUSH
43015: LD_VAR 0 6
43019: PUSH
43020: LD_INT 1
43022: ARRAY
43023: PUSH
43024: LD_VAR 0 6
43028: PUSH
43029: LD_INT 2
43031: ARRAY
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: PUSH
43054: EMPTY
43055: LIST
43056: PPUSH
43057: CALL_OW 447
43061: GO 43004
43063: POP
43064: POP
// end ;
43065: LD_VAR 0 5
43069: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
43070: LD_EXP 126
43074: NOT
43075: IFFALSE 43125
43077: GO 43079
43079: DISABLE
// begin initHack := true ;
43080: LD_ADDR_EXP 126
43084: PUSH
43085: LD_INT 1
43087: ST_TO_ADDR
// hackTanks := [ ] ;
43088: LD_ADDR_EXP 127
43092: PUSH
43093: EMPTY
43094: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
43095: LD_ADDR_EXP 128
43099: PUSH
43100: EMPTY
43101: ST_TO_ADDR
// hackLimit := 3 ;
43102: LD_ADDR_EXP 129
43106: PUSH
43107: LD_INT 3
43109: ST_TO_ADDR
// hackDist := 12 ;
43110: LD_ADDR_EXP 130
43114: PUSH
43115: LD_INT 12
43117: ST_TO_ADDR
// hackCounter := [ ] ;
43118: LD_ADDR_EXP 131
43122: PUSH
43123: EMPTY
43124: ST_TO_ADDR
// end ;
43125: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
43126: LD_EXP 126
43130: PUSH
43131: LD_INT 34
43133: PUSH
43134: LD_EXP 50
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PPUSH
43143: CALL_OW 69
43147: AND
43148: IFFALSE 43403
43150: GO 43152
43152: DISABLE
43153: LD_INT 0
43155: PPUSH
43156: PPUSH
// begin enable ;
43157: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
43158: LD_ADDR_VAR 0 1
43162: PUSH
43163: LD_INT 34
43165: PUSH
43166: LD_EXP 50
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PPUSH
43175: CALL_OW 69
43179: PUSH
43180: FOR_IN
43181: IFFALSE 43401
// begin if not i in hackTanks then
43183: LD_VAR 0 1
43187: PUSH
43188: LD_EXP 127
43192: IN
43193: NOT
43194: IFFALSE 43277
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
43196: LD_ADDR_EXP 127
43200: PUSH
43201: LD_EXP 127
43205: PPUSH
43206: LD_EXP 127
43210: PUSH
43211: LD_INT 1
43213: PLUS
43214: PPUSH
43215: LD_VAR 0 1
43219: PPUSH
43220: CALL_OW 1
43224: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
43225: LD_ADDR_EXP 128
43229: PUSH
43230: LD_EXP 128
43234: PPUSH
43235: LD_EXP 128
43239: PUSH
43240: LD_INT 1
43242: PLUS
43243: PPUSH
43244: EMPTY
43245: PPUSH
43246: CALL_OW 1
43250: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
43251: LD_ADDR_EXP 131
43255: PUSH
43256: LD_EXP 131
43260: PPUSH
43261: LD_EXP 131
43265: PUSH
43266: LD_INT 1
43268: PLUS
43269: PPUSH
43270: EMPTY
43271: PPUSH
43272: CALL_OW 1
43276: ST_TO_ADDR
// end ; if not IsOk ( i ) then
43277: LD_VAR 0 1
43281: PPUSH
43282: CALL_OW 302
43286: NOT
43287: IFFALSE 43300
// begin HackUnlinkAll ( i ) ;
43289: LD_VAR 0 1
43293: PPUSH
43294: CALL 43406 0 1
// continue ;
43298: GO 43180
// end ; HackCheckCapturedStatus ( i ) ;
43300: LD_VAR 0 1
43304: PPUSH
43305: CALL 43849 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
43309: LD_ADDR_VAR 0 2
43313: PUSH
43314: LD_INT 81
43316: PUSH
43317: LD_VAR 0 1
43321: PPUSH
43322: CALL_OW 255
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 33
43333: PUSH
43334: LD_INT 3
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 91
43343: PUSH
43344: LD_VAR 0 1
43348: PUSH
43349: LD_EXP 130
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 50
43361: PUSH
43362: EMPTY
43363: LIST
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: PPUSH
43371: CALL_OW 69
43375: ST_TO_ADDR
// if not tmp then
43376: LD_VAR 0 2
43380: NOT
43381: IFFALSE 43385
// continue ;
43383: GO 43180
// HackLink ( i , tmp ) ;
43385: LD_VAR 0 1
43389: PPUSH
43390: LD_VAR 0 2
43394: PPUSH
43395: CALL 43542 0 2
// end ;
43399: GO 43180
43401: POP
43402: POP
// end ;
43403: PPOPN 2
43405: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
43406: LD_INT 0
43408: PPUSH
43409: PPUSH
43410: PPUSH
// if not hack in hackTanks then
43411: LD_VAR 0 1
43415: PUSH
43416: LD_EXP 127
43420: IN
43421: NOT
43422: IFFALSE 43426
// exit ;
43424: GO 43537
// index := GetElementIndex ( hackTanks , hack ) ;
43426: LD_ADDR_VAR 0 4
43430: PUSH
43431: LD_EXP 127
43435: PPUSH
43436: LD_VAR 0 1
43440: PPUSH
43441: CALL 51011 0 2
43445: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
43446: LD_EXP 128
43450: PUSH
43451: LD_VAR 0 4
43455: ARRAY
43456: IFFALSE 43537
// begin for i in hackTanksCaptured [ index ] do
43458: LD_ADDR_VAR 0 3
43462: PUSH
43463: LD_EXP 128
43467: PUSH
43468: LD_VAR 0 4
43472: ARRAY
43473: PUSH
43474: FOR_IN
43475: IFFALSE 43501
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
43477: LD_VAR 0 3
43481: PUSH
43482: LD_INT 1
43484: ARRAY
43485: PPUSH
43486: LD_VAR 0 3
43490: PUSH
43491: LD_INT 2
43493: ARRAY
43494: PPUSH
43495: CALL_OW 235
43499: GO 43474
43501: POP
43502: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
43503: LD_ADDR_EXP 128
43507: PUSH
43508: LD_EXP 128
43512: PPUSH
43513: LD_VAR 0 4
43517: PPUSH
43518: EMPTY
43519: PPUSH
43520: CALL_OW 1
43524: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
43525: LD_VAR 0 1
43529: PPUSH
43530: LD_INT 0
43532: PPUSH
43533: CALL_OW 505
// end ; end ;
43537: LD_VAR 0 2
43541: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
43542: LD_INT 0
43544: PPUSH
43545: PPUSH
43546: PPUSH
// if not hack in hackTanks or not vehicles then
43547: LD_VAR 0 1
43551: PUSH
43552: LD_EXP 127
43556: IN
43557: NOT
43558: PUSH
43559: LD_VAR 0 2
43563: NOT
43564: OR
43565: IFFALSE 43569
// exit ;
43567: GO 43844
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
43569: LD_ADDR_VAR 0 2
43573: PUSH
43574: LD_VAR 0 1
43578: PPUSH
43579: LD_VAR 0 2
43583: PPUSH
43584: LD_INT 1
43586: PPUSH
43587: LD_INT 1
43589: PPUSH
43590: CALL 51661 0 4
43594: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
43595: LD_ADDR_VAR 0 5
43599: PUSH
43600: LD_EXP 127
43604: PPUSH
43605: LD_VAR 0 1
43609: PPUSH
43610: CALL 51011 0 2
43614: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
43615: LD_EXP 128
43619: PUSH
43620: LD_VAR 0 5
43624: ARRAY
43625: PUSH
43626: LD_EXP 129
43630: LESS
43631: IFFALSE 43820
// begin for i := 1 to vehicles do
43633: LD_ADDR_VAR 0 4
43637: PUSH
43638: DOUBLE
43639: LD_INT 1
43641: DEC
43642: ST_TO_ADDR
43643: LD_VAR 0 2
43647: PUSH
43648: FOR_TO
43649: IFFALSE 43818
// begin if hackTanksCaptured [ index ] = hackLimit then
43651: LD_EXP 128
43655: PUSH
43656: LD_VAR 0 5
43660: ARRAY
43661: PUSH
43662: LD_EXP 129
43666: EQUAL
43667: IFFALSE 43671
// break ;
43669: GO 43818
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
43671: LD_ADDR_EXP 131
43675: PUSH
43676: LD_EXP 131
43680: PPUSH
43681: LD_VAR 0 5
43685: PPUSH
43686: LD_EXP 131
43690: PUSH
43691: LD_VAR 0 5
43695: ARRAY
43696: PUSH
43697: LD_INT 1
43699: PLUS
43700: PPUSH
43701: CALL_OW 1
43705: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
43706: LD_ADDR_EXP 128
43710: PUSH
43711: LD_EXP 128
43715: PPUSH
43716: LD_VAR 0 5
43720: PUSH
43721: LD_EXP 128
43725: PUSH
43726: LD_VAR 0 5
43730: ARRAY
43731: PUSH
43732: LD_INT 1
43734: PLUS
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PPUSH
43740: LD_VAR 0 2
43744: PUSH
43745: LD_VAR 0 4
43749: ARRAY
43750: PUSH
43751: LD_VAR 0 2
43755: PUSH
43756: LD_VAR 0 4
43760: ARRAY
43761: PPUSH
43762: CALL_OW 255
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PPUSH
43771: CALL 51226 0 3
43775: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
43776: LD_VAR 0 2
43780: PUSH
43781: LD_VAR 0 4
43785: ARRAY
43786: PPUSH
43787: LD_VAR 0 1
43791: PPUSH
43792: CALL_OW 255
43796: PPUSH
43797: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
43801: LD_VAR 0 2
43805: PUSH
43806: LD_VAR 0 4
43810: ARRAY
43811: PPUSH
43812: CALL_OW 141
// end ;
43816: GO 43648
43818: POP
43819: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
43820: LD_VAR 0 1
43824: PPUSH
43825: LD_EXP 128
43829: PUSH
43830: LD_VAR 0 5
43834: ARRAY
43835: PUSH
43836: LD_INT 0
43838: PLUS
43839: PPUSH
43840: CALL_OW 505
// end ;
43844: LD_VAR 0 3
43848: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
43849: LD_INT 0
43851: PPUSH
43852: PPUSH
43853: PPUSH
43854: PPUSH
// if not hack in hackTanks then
43855: LD_VAR 0 1
43859: PUSH
43860: LD_EXP 127
43864: IN
43865: NOT
43866: IFFALSE 43870
// exit ;
43868: GO 44110
// index := GetElementIndex ( hackTanks , hack ) ;
43870: LD_ADDR_VAR 0 4
43874: PUSH
43875: LD_EXP 127
43879: PPUSH
43880: LD_VAR 0 1
43884: PPUSH
43885: CALL 51011 0 2
43889: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
43890: LD_ADDR_VAR 0 3
43894: PUSH
43895: DOUBLE
43896: LD_EXP 128
43900: PUSH
43901: LD_VAR 0 4
43905: ARRAY
43906: INC
43907: ST_TO_ADDR
43908: LD_INT 1
43910: PUSH
43911: FOR_DOWNTO
43912: IFFALSE 44084
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
43914: LD_ADDR_VAR 0 5
43918: PUSH
43919: LD_EXP 128
43923: PUSH
43924: LD_VAR 0 4
43928: ARRAY
43929: PUSH
43930: LD_VAR 0 3
43934: ARRAY
43935: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
43936: LD_VAR 0 5
43940: PUSH
43941: LD_INT 1
43943: ARRAY
43944: PPUSH
43945: CALL_OW 302
43949: NOT
43950: PUSH
43951: LD_VAR 0 5
43955: PUSH
43956: LD_INT 1
43958: ARRAY
43959: PPUSH
43960: CALL_OW 255
43964: PUSH
43965: LD_VAR 0 1
43969: PPUSH
43970: CALL_OW 255
43974: NONEQUAL
43975: OR
43976: IFFALSE 44082
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
43978: LD_VAR 0 5
43982: PUSH
43983: LD_INT 1
43985: ARRAY
43986: PPUSH
43987: CALL_OW 305
43991: PUSH
43992: LD_VAR 0 5
43996: PUSH
43997: LD_INT 1
43999: ARRAY
44000: PPUSH
44001: CALL_OW 255
44005: PUSH
44006: LD_VAR 0 1
44010: PPUSH
44011: CALL_OW 255
44015: EQUAL
44016: AND
44017: IFFALSE 44041
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
44019: LD_VAR 0 5
44023: PUSH
44024: LD_INT 1
44026: ARRAY
44027: PPUSH
44028: LD_VAR 0 5
44032: PUSH
44033: LD_INT 2
44035: ARRAY
44036: PPUSH
44037: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
44041: LD_ADDR_EXP 128
44045: PUSH
44046: LD_EXP 128
44050: PPUSH
44051: LD_VAR 0 4
44055: PPUSH
44056: LD_EXP 128
44060: PUSH
44061: LD_VAR 0 4
44065: ARRAY
44066: PPUSH
44067: LD_VAR 0 3
44071: PPUSH
44072: CALL_OW 3
44076: PPUSH
44077: CALL_OW 1
44081: ST_TO_ADDR
// end ; end ;
44082: GO 43911
44084: POP
44085: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
44086: LD_VAR 0 1
44090: PPUSH
44091: LD_EXP 128
44095: PUSH
44096: LD_VAR 0 4
44100: ARRAY
44101: PUSH
44102: LD_INT 0
44104: PLUS
44105: PPUSH
44106: CALL_OW 505
// end ;
44110: LD_VAR 0 2
44114: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
44115: LD_INT 0
44117: PPUSH
44118: PPUSH
44119: PPUSH
44120: PPUSH
// if not hack in hackTanks then
44121: LD_VAR 0 1
44125: PUSH
44126: LD_EXP 127
44130: IN
44131: NOT
44132: IFFALSE 44136
// exit ;
44134: GO 44221
// index := GetElementIndex ( hackTanks , hack ) ;
44136: LD_ADDR_VAR 0 5
44140: PUSH
44141: LD_EXP 127
44145: PPUSH
44146: LD_VAR 0 1
44150: PPUSH
44151: CALL 51011 0 2
44155: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
44156: LD_ADDR_VAR 0 4
44160: PUSH
44161: DOUBLE
44162: LD_INT 1
44164: DEC
44165: ST_TO_ADDR
44166: LD_EXP 128
44170: PUSH
44171: LD_VAR 0 5
44175: ARRAY
44176: PUSH
44177: FOR_TO
44178: IFFALSE 44219
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
44180: LD_EXP 128
44184: PUSH
44185: LD_VAR 0 5
44189: ARRAY
44190: PUSH
44191: LD_VAR 0 4
44195: ARRAY
44196: PUSH
44197: LD_INT 1
44199: ARRAY
44200: PUSH
44201: LD_VAR 0 2
44205: EQUAL
44206: IFFALSE 44217
// KillUnit ( vehicle ) ;
44208: LD_VAR 0 2
44212: PPUSH
44213: CALL_OW 66
44217: GO 44177
44219: POP
44220: POP
// end ;
44221: LD_VAR 0 3
44225: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
44226: LD_EXP 132
44230: NOT
44231: IFFALSE 44266
44233: GO 44235
44235: DISABLE
// begin initMiner := true ;
44236: LD_ADDR_EXP 132
44240: PUSH
44241: LD_INT 1
44243: ST_TO_ADDR
// minersList := [ ] ;
44244: LD_ADDR_EXP 133
44248: PUSH
44249: EMPTY
44250: ST_TO_ADDR
// minerMinesList := [ ] ;
44251: LD_ADDR_EXP 134
44255: PUSH
44256: EMPTY
44257: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
44258: LD_ADDR_EXP 135
44262: PUSH
44263: LD_INT 5
44265: ST_TO_ADDR
// end ;
44266: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
44267: LD_EXP 132
44271: PUSH
44272: LD_INT 34
44274: PUSH
44275: LD_EXP 55
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PPUSH
44284: CALL_OW 69
44288: AND
44289: IFFALSE 44752
44291: GO 44293
44293: DISABLE
44294: LD_INT 0
44296: PPUSH
44297: PPUSH
44298: PPUSH
44299: PPUSH
// begin enable ;
44300: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
44301: LD_ADDR_VAR 0 1
44305: PUSH
44306: LD_INT 34
44308: PUSH
44309: LD_EXP 55
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PPUSH
44318: CALL_OW 69
44322: PUSH
44323: FOR_IN
44324: IFFALSE 44396
// begin if not i in minersList then
44326: LD_VAR 0 1
44330: PUSH
44331: LD_EXP 133
44335: IN
44336: NOT
44337: IFFALSE 44394
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
44339: LD_ADDR_EXP 133
44343: PUSH
44344: LD_EXP 133
44348: PPUSH
44349: LD_EXP 133
44353: PUSH
44354: LD_INT 1
44356: PLUS
44357: PPUSH
44358: LD_VAR 0 1
44362: PPUSH
44363: CALL_OW 1
44367: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
44368: LD_ADDR_EXP 134
44372: PUSH
44373: LD_EXP 134
44377: PPUSH
44378: LD_EXP 134
44382: PUSH
44383: LD_INT 1
44385: PLUS
44386: PPUSH
44387: EMPTY
44388: PPUSH
44389: CALL_OW 1
44393: ST_TO_ADDR
// end end ;
44394: GO 44323
44396: POP
44397: POP
// for i := minerMinesList downto 1 do
44398: LD_ADDR_VAR 0 1
44402: PUSH
44403: DOUBLE
44404: LD_EXP 134
44408: INC
44409: ST_TO_ADDR
44410: LD_INT 1
44412: PUSH
44413: FOR_DOWNTO
44414: IFFALSE 44750
// begin if IsLive ( minersList [ i ] ) then
44416: LD_EXP 133
44420: PUSH
44421: LD_VAR 0 1
44425: ARRAY
44426: PPUSH
44427: CALL_OW 300
44431: IFFALSE 44459
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
44433: LD_EXP 133
44437: PUSH
44438: LD_VAR 0 1
44442: ARRAY
44443: PPUSH
44444: LD_EXP 134
44448: PUSH
44449: LD_VAR 0 1
44453: ARRAY
44454: PPUSH
44455: CALL_OW 505
// if not minerMinesList [ i ] then
44459: LD_EXP 134
44463: PUSH
44464: LD_VAR 0 1
44468: ARRAY
44469: NOT
44470: IFFALSE 44474
// continue ;
44472: GO 44413
// for j := minerMinesList [ i ] downto 1 do
44474: LD_ADDR_VAR 0 2
44478: PUSH
44479: DOUBLE
44480: LD_EXP 134
44484: PUSH
44485: LD_VAR 0 1
44489: ARRAY
44490: INC
44491: ST_TO_ADDR
44492: LD_INT 1
44494: PUSH
44495: FOR_DOWNTO
44496: IFFALSE 44746
// begin side := GetSide ( minersList [ i ] ) ;
44498: LD_ADDR_VAR 0 3
44502: PUSH
44503: LD_EXP 133
44507: PUSH
44508: LD_VAR 0 1
44512: ARRAY
44513: PPUSH
44514: CALL_OW 255
44518: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
44519: LD_ADDR_VAR 0 4
44523: PUSH
44524: LD_EXP 134
44528: PUSH
44529: LD_VAR 0 1
44533: ARRAY
44534: PUSH
44535: LD_VAR 0 2
44539: ARRAY
44540: PUSH
44541: LD_INT 1
44543: ARRAY
44544: PPUSH
44545: LD_EXP 134
44549: PUSH
44550: LD_VAR 0 1
44554: ARRAY
44555: PUSH
44556: LD_VAR 0 2
44560: ARRAY
44561: PUSH
44562: LD_INT 2
44564: ARRAY
44565: PPUSH
44566: CALL_OW 428
44570: ST_TO_ADDR
// if not tmp then
44571: LD_VAR 0 4
44575: NOT
44576: IFFALSE 44580
// continue ;
44578: GO 44495
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
44580: LD_VAR 0 4
44584: PUSH
44585: LD_INT 81
44587: PUSH
44588: LD_VAR 0 3
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PPUSH
44597: CALL_OW 69
44601: IN
44602: PUSH
44603: LD_EXP 134
44607: PUSH
44608: LD_VAR 0 1
44612: ARRAY
44613: PUSH
44614: LD_VAR 0 2
44618: ARRAY
44619: PUSH
44620: LD_INT 1
44622: ARRAY
44623: PPUSH
44624: LD_EXP 134
44628: PUSH
44629: LD_VAR 0 1
44633: ARRAY
44634: PUSH
44635: LD_VAR 0 2
44639: ARRAY
44640: PUSH
44641: LD_INT 2
44643: ARRAY
44644: PPUSH
44645: CALL_OW 458
44649: AND
44650: IFFALSE 44744
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
44652: LD_EXP 134
44656: PUSH
44657: LD_VAR 0 1
44661: ARRAY
44662: PUSH
44663: LD_VAR 0 2
44667: ARRAY
44668: PUSH
44669: LD_INT 1
44671: ARRAY
44672: PPUSH
44673: LD_EXP 134
44677: PUSH
44678: LD_VAR 0 1
44682: ARRAY
44683: PUSH
44684: LD_VAR 0 2
44688: ARRAY
44689: PUSH
44690: LD_INT 2
44692: ARRAY
44693: PPUSH
44694: LD_VAR 0 3
44698: PPUSH
44699: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
44703: LD_ADDR_EXP 134
44707: PUSH
44708: LD_EXP 134
44712: PPUSH
44713: LD_VAR 0 1
44717: PPUSH
44718: LD_EXP 134
44722: PUSH
44723: LD_VAR 0 1
44727: ARRAY
44728: PPUSH
44729: LD_VAR 0 2
44733: PPUSH
44734: CALL_OW 3
44738: PPUSH
44739: CALL_OW 1
44743: ST_TO_ADDR
// end ; end ;
44744: GO 44495
44746: POP
44747: POP
// end ;
44748: GO 44413
44750: POP
44751: POP
// end ;
44752: PPOPN 4
44754: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
44755: LD_INT 0
44757: PPUSH
44758: PPUSH
// result := false ;
44759: LD_ADDR_VAR 0 4
44763: PUSH
44764: LD_INT 0
44766: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
44767: LD_VAR 0 1
44771: PPUSH
44772: CALL_OW 264
44776: PUSH
44777: LD_EXP 55
44781: EQUAL
44782: NOT
44783: IFFALSE 44787
// exit ;
44785: GO 45027
// index := GetElementIndex ( minersList , unit ) ;
44787: LD_ADDR_VAR 0 5
44791: PUSH
44792: LD_EXP 133
44796: PPUSH
44797: LD_VAR 0 1
44801: PPUSH
44802: CALL 51011 0 2
44806: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
44807: LD_EXP 134
44811: PUSH
44812: LD_VAR 0 5
44816: ARRAY
44817: PUSH
44818: LD_EXP 135
44822: GREATEREQUAL
44823: IFFALSE 44827
// exit ;
44825: GO 45027
// ComMoveXY ( unit , x , y ) ;
44827: LD_VAR 0 1
44831: PPUSH
44832: LD_VAR 0 2
44836: PPUSH
44837: LD_VAR 0 3
44841: PPUSH
44842: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
44846: LD_INT 35
44848: PPUSH
44849: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
44853: LD_VAR 0 1
44857: PPUSH
44858: LD_VAR 0 2
44862: PPUSH
44863: LD_VAR 0 3
44867: PPUSH
44868: CALL 81730 0 3
44872: NOT
44873: PUSH
44874: LD_VAR 0 1
44878: PPUSH
44879: CALL_OW 314
44883: AND
44884: IFFALSE 44888
// exit ;
44886: GO 45027
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
44888: LD_VAR 0 2
44892: PPUSH
44893: LD_VAR 0 3
44897: PPUSH
44898: CALL_OW 428
44902: PUSH
44903: LD_VAR 0 1
44907: EQUAL
44908: PUSH
44909: LD_VAR 0 1
44913: PPUSH
44914: CALL_OW 314
44918: NOT
44919: AND
44920: IFFALSE 44846
// PlaySoundXY ( x , y , PlantMine ) ;
44922: LD_VAR 0 2
44926: PPUSH
44927: LD_VAR 0 3
44931: PPUSH
44932: LD_STRING PlantMine
44934: PPUSH
44935: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
44939: LD_VAR 0 2
44943: PPUSH
44944: LD_VAR 0 3
44948: PPUSH
44949: LD_VAR 0 1
44953: PPUSH
44954: CALL_OW 255
44958: PPUSH
44959: LD_INT 0
44961: PPUSH
44962: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
44966: LD_ADDR_EXP 134
44970: PUSH
44971: LD_EXP 134
44975: PPUSH
44976: LD_VAR 0 5
44980: PUSH
44981: LD_EXP 134
44985: PUSH
44986: LD_VAR 0 5
44990: ARRAY
44991: PUSH
44992: LD_INT 1
44994: PLUS
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PPUSH
45000: LD_VAR 0 2
45004: PUSH
45005: LD_VAR 0 3
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PPUSH
45014: CALL 51226 0 3
45018: ST_TO_ADDR
// result := true ;
45019: LD_ADDR_VAR 0 4
45023: PUSH
45024: LD_INT 1
45026: ST_TO_ADDR
// end ;
45027: LD_VAR 0 4
45031: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
45032: LD_INT 0
45034: PPUSH
45035: PPUSH
45036: PPUSH
// if not unit in minersList then
45037: LD_VAR 0 1
45041: PUSH
45042: LD_EXP 133
45046: IN
45047: NOT
45048: IFFALSE 45052
// exit ;
45050: GO 45444
// index := GetElementIndex ( minersList , unit ) ;
45052: LD_ADDR_VAR 0 6
45056: PUSH
45057: LD_EXP 133
45061: PPUSH
45062: LD_VAR 0 1
45066: PPUSH
45067: CALL 51011 0 2
45071: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
45072: LD_ADDR_VAR 0 5
45076: PUSH
45077: DOUBLE
45078: LD_EXP 134
45082: PUSH
45083: LD_VAR 0 6
45087: ARRAY
45088: INC
45089: ST_TO_ADDR
45090: LD_INT 1
45092: PUSH
45093: FOR_DOWNTO
45094: IFFALSE 45255
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
45096: LD_EXP 134
45100: PUSH
45101: LD_VAR 0 6
45105: ARRAY
45106: PUSH
45107: LD_VAR 0 5
45111: ARRAY
45112: PUSH
45113: LD_INT 1
45115: ARRAY
45116: PUSH
45117: LD_VAR 0 2
45121: EQUAL
45122: PUSH
45123: LD_EXP 134
45127: PUSH
45128: LD_VAR 0 6
45132: ARRAY
45133: PUSH
45134: LD_VAR 0 5
45138: ARRAY
45139: PUSH
45140: LD_INT 2
45142: ARRAY
45143: PUSH
45144: LD_VAR 0 3
45148: EQUAL
45149: AND
45150: IFFALSE 45253
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
45152: LD_EXP 134
45156: PUSH
45157: LD_VAR 0 6
45161: ARRAY
45162: PUSH
45163: LD_VAR 0 5
45167: ARRAY
45168: PUSH
45169: LD_INT 1
45171: ARRAY
45172: PPUSH
45173: LD_EXP 134
45177: PUSH
45178: LD_VAR 0 6
45182: ARRAY
45183: PUSH
45184: LD_VAR 0 5
45188: ARRAY
45189: PUSH
45190: LD_INT 2
45192: ARRAY
45193: PPUSH
45194: LD_VAR 0 1
45198: PPUSH
45199: CALL_OW 255
45203: PPUSH
45204: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
45208: LD_ADDR_EXP 134
45212: PUSH
45213: LD_EXP 134
45217: PPUSH
45218: LD_VAR 0 6
45222: PPUSH
45223: LD_EXP 134
45227: PUSH
45228: LD_VAR 0 6
45232: ARRAY
45233: PPUSH
45234: LD_VAR 0 5
45238: PPUSH
45239: CALL_OW 3
45243: PPUSH
45244: CALL_OW 1
45248: ST_TO_ADDR
// exit ;
45249: POP
45250: POP
45251: GO 45444
// end ; end ;
45253: GO 45093
45255: POP
45256: POP
// for i := minerMinesList [ index ] downto 1 do
45257: LD_ADDR_VAR 0 5
45261: PUSH
45262: DOUBLE
45263: LD_EXP 134
45267: PUSH
45268: LD_VAR 0 6
45272: ARRAY
45273: INC
45274: ST_TO_ADDR
45275: LD_INT 1
45277: PUSH
45278: FOR_DOWNTO
45279: IFFALSE 45442
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
45281: LD_EXP 134
45285: PUSH
45286: LD_VAR 0 6
45290: ARRAY
45291: PUSH
45292: LD_VAR 0 5
45296: ARRAY
45297: PUSH
45298: LD_INT 1
45300: ARRAY
45301: PPUSH
45302: LD_EXP 134
45306: PUSH
45307: LD_VAR 0 6
45311: ARRAY
45312: PUSH
45313: LD_VAR 0 5
45317: ARRAY
45318: PUSH
45319: LD_INT 2
45321: ARRAY
45322: PPUSH
45323: LD_VAR 0 2
45327: PPUSH
45328: LD_VAR 0 3
45332: PPUSH
45333: CALL_OW 298
45337: PUSH
45338: LD_INT 6
45340: LESS
45341: IFFALSE 45440
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
45343: LD_EXP 134
45347: PUSH
45348: LD_VAR 0 6
45352: ARRAY
45353: PUSH
45354: LD_VAR 0 5
45358: ARRAY
45359: PUSH
45360: LD_INT 1
45362: ARRAY
45363: PPUSH
45364: LD_EXP 134
45368: PUSH
45369: LD_VAR 0 6
45373: ARRAY
45374: PUSH
45375: LD_VAR 0 5
45379: ARRAY
45380: PUSH
45381: LD_INT 2
45383: ARRAY
45384: PPUSH
45385: LD_VAR 0 1
45389: PPUSH
45390: CALL_OW 255
45394: PPUSH
45395: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
45399: LD_ADDR_EXP 134
45403: PUSH
45404: LD_EXP 134
45408: PPUSH
45409: LD_VAR 0 6
45413: PPUSH
45414: LD_EXP 134
45418: PUSH
45419: LD_VAR 0 6
45423: ARRAY
45424: PPUSH
45425: LD_VAR 0 5
45429: PPUSH
45430: CALL_OW 3
45434: PPUSH
45435: CALL_OW 1
45439: ST_TO_ADDR
// end ; end ;
45440: GO 45278
45442: POP
45443: POP
// end ;
45444: LD_VAR 0 4
45448: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
45449: LD_INT 0
45451: PPUSH
45452: PPUSH
45453: PPUSH
45454: PPUSH
45455: PPUSH
45456: PPUSH
45457: PPUSH
45458: PPUSH
45459: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
45460: LD_VAR 0 1
45464: PPUSH
45465: CALL_OW 264
45469: PUSH
45470: LD_EXP 55
45474: EQUAL
45475: NOT
45476: PUSH
45477: LD_VAR 0 1
45481: PUSH
45482: LD_EXP 133
45486: IN
45487: NOT
45488: OR
45489: IFFALSE 45493
// exit ;
45491: GO 45815
// index := GetElementIndex ( minersList , unit ) ;
45493: LD_ADDR_VAR 0 6
45497: PUSH
45498: LD_EXP 133
45502: PPUSH
45503: LD_VAR 0 1
45507: PPUSH
45508: CALL 51011 0 2
45512: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
45513: LD_ADDR_VAR 0 8
45517: PUSH
45518: LD_EXP 135
45522: PUSH
45523: LD_EXP 134
45527: PUSH
45528: LD_VAR 0 6
45532: ARRAY
45533: MINUS
45534: ST_TO_ADDR
// if not minesFreeAmount then
45535: LD_VAR 0 8
45539: NOT
45540: IFFALSE 45544
// exit ;
45542: GO 45815
// tmp := [ ] ;
45544: LD_ADDR_VAR 0 7
45548: PUSH
45549: EMPTY
45550: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
45551: LD_ADDR_VAR 0 5
45555: PUSH
45556: DOUBLE
45557: LD_INT 1
45559: DEC
45560: ST_TO_ADDR
45561: LD_VAR 0 8
45565: PUSH
45566: FOR_TO
45567: IFFALSE 45762
// begin _d := rand ( 0 , 5 ) ;
45569: LD_ADDR_VAR 0 11
45573: PUSH
45574: LD_INT 0
45576: PPUSH
45577: LD_INT 5
45579: PPUSH
45580: CALL_OW 12
45584: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
45585: LD_ADDR_VAR 0 12
45589: PUSH
45590: LD_INT 2
45592: PPUSH
45593: LD_INT 6
45595: PPUSH
45596: CALL_OW 12
45600: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
45601: LD_ADDR_VAR 0 9
45605: PUSH
45606: LD_VAR 0 2
45610: PPUSH
45611: LD_VAR 0 11
45615: PPUSH
45616: LD_VAR 0 12
45620: PPUSH
45621: CALL_OW 272
45625: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
45626: LD_ADDR_VAR 0 10
45630: PUSH
45631: LD_VAR 0 3
45635: PPUSH
45636: LD_VAR 0 11
45640: PPUSH
45641: LD_VAR 0 12
45645: PPUSH
45646: CALL_OW 273
45650: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
45651: LD_VAR 0 9
45655: PPUSH
45656: LD_VAR 0 10
45660: PPUSH
45661: CALL_OW 488
45665: PUSH
45666: LD_VAR 0 9
45670: PUSH
45671: LD_VAR 0 10
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_VAR 0 7
45684: IN
45685: NOT
45686: AND
45687: PUSH
45688: LD_VAR 0 9
45692: PPUSH
45693: LD_VAR 0 10
45697: PPUSH
45698: CALL_OW 458
45702: NOT
45703: AND
45704: IFFALSE 45746
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
45706: LD_ADDR_VAR 0 7
45710: PUSH
45711: LD_VAR 0 7
45715: PPUSH
45716: LD_VAR 0 7
45720: PUSH
45721: LD_INT 1
45723: PLUS
45724: PPUSH
45725: LD_VAR 0 9
45729: PUSH
45730: LD_VAR 0 10
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PPUSH
45739: CALL_OW 1
45743: ST_TO_ADDR
45744: GO 45760
// i := i - 1 ;
45746: LD_ADDR_VAR 0 5
45750: PUSH
45751: LD_VAR 0 5
45755: PUSH
45756: LD_INT 1
45758: MINUS
45759: ST_TO_ADDR
// end ;
45760: GO 45566
45762: POP
45763: POP
// for i in tmp do
45764: LD_ADDR_VAR 0 5
45768: PUSH
45769: LD_VAR 0 7
45773: PUSH
45774: FOR_IN
45775: IFFALSE 45813
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
45777: LD_VAR 0 1
45781: PPUSH
45782: LD_VAR 0 5
45786: PUSH
45787: LD_INT 1
45789: ARRAY
45790: PPUSH
45791: LD_VAR 0 5
45795: PUSH
45796: LD_INT 2
45798: ARRAY
45799: PPUSH
45800: CALL 44755 0 3
45804: NOT
45805: IFFALSE 45811
// exit ;
45807: POP
45808: POP
45809: GO 45815
45811: GO 45774
45813: POP
45814: POP
// end ;
45815: LD_VAR 0 4
45819: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
45820: LD_INT 0
45822: PPUSH
45823: PPUSH
45824: PPUSH
45825: PPUSH
45826: PPUSH
45827: PPUSH
45828: PPUSH
// if not GetClass ( unit ) = class_sniper then
45829: LD_VAR 0 1
45833: PPUSH
45834: CALL_OW 257
45838: PUSH
45839: LD_INT 5
45841: EQUAL
45842: NOT
45843: IFFALSE 45847
// exit ;
45845: GO 46235
// dist := 8 ;
45847: LD_ADDR_VAR 0 5
45851: PUSH
45852: LD_INT 8
45854: ST_TO_ADDR
// viewRange := 12 ;
45855: LD_ADDR_VAR 0 7
45859: PUSH
45860: LD_INT 12
45862: ST_TO_ADDR
// side := GetSide ( unit ) ;
45863: LD_ADDR_VAR 0 6
45867: PUSH
45868: LD_VAR 0 1
45872: PPUSH
45873: CALL_OW 255
45877: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
45878: LD_INT 61
45880: PPUSH
45881: LD_VAR 0 6
45885: PPUSH
45886: CALL_OW 321
45890: PUSH
45891: LD_INT 2
45893: EQUAL
45894: IFFALSE 45904
// viewRange := 16 ;
45896: LD_ADDR_VAR 0 7
45900: PUSH
45901: LD_INT 16
45903: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
45904: LD_VAR 0 1
45908: PPUSH
45909: LD_VAR 0 2
45913: PPUSH
45914: LD_VAR 0 3
45918: PPUSH
45919: CALL_OW 297
45923: PUSH
45924: LD_VAR 0 5
45928: GREATER
45929: IFFALSE 46008
// begin ComMoveXY ( unit , x , y ) ;
45931: LD_VAR 0 1
45935: PPUSH
45936: LD_VAR 0 2
45940: PPUSH
45941: LD_VAR 0 3
45945: PPUSH
45946: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
45950: LD_INT 35
45952: PPUSH
45953: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
45957: LD_VAR 0 1
45961: PPUSH
45962: LD_VAR 0 2
45966: PPUSH
45967: LD_VAR 0 3
45971: PPUSH
45972: CALL 81730 0 3
45976: NOT
45977: IFFALSE 45981
// exit ;
45979: GO 46235
// until GetDistUnitXY ( unit , x , y ) < dist ;
45981: LD_VAR 0 1
45985: PPUSH
45986: LD_VAR 0 2
45990: PPUSH
45991: LD_VAR 0 3
45995: PPUSH
45996: CALL_OW 297
46000: PUSH
46001: LD_VAR 0 5
46005: LESS
46006: IFFALSE 45950
// end ; ComTurnXY ( unit , x , y ) ;
46008: LD_VAR 0 1
46012: PPUSH
46013: LD_VAR 0 2
46017: PPUSH
46018: LD_VAR 0 3
46022: PPUSH
46023: CALL_OW 118
// wait ( 5 ) ;
46027: LD_INT 5
46029: PPUSH
46030: CALL_OW 67
// _d := GetDir ( unit ) ;
46034: LD_ADDR_VAR 0 10
46038: PUSH
46039: LD_VAR 0 1
46043: PPUSH
46044: CALL_OW 254
46048: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
46049: LD_ADDR_VAR 0 8
46053: PUSH
46054: LD_VAR 0 1
46058: PPUSH
46059: CALL_OW 250
46063: PPUSH
46064: LD_VAR 0 10
46068: PPUSH
46069: LD_VAR 0 5
46073: PPUSH
46074: CALL_OW 272
46078: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
46079: LD_ADDR_VAR 0 9
46083: PUSH
46084: LD_VAR 0 1
46088: PPUSH
46089: CALL_OW 251
46093: PPUSH
46094: LD_VAR 0 10
46098: PPUSH
46099: LD_VAR 0 5
46103: PPUSH
46104: CALL_OW 273
46108: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46109: LD_VAR 0 8
46113: PPUSH
46114: LD_VAR 0 9
46118: PPUSH
46119: CALL_OW 488
46123: NOT
46124: IFFALSE 46128
// exit ;
46126: GO 46235
// ComAnimCustom ( unit , 1 ) ;
46128: LD_VAR 0 1
46132: PPUSH
46133: LD_INT 1
46135: PPUSH
46136: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
46140: LD_VAR 0 8
46144: PPUSH
46145: LD_VAR 0 9
46149: PPUSH
46150: LD_VAR 0 6
46154: PPUSH
46155: LD_VAR 0 7
46159: PPUSH
46160: CALL_OW 330
// repeat wait ( 1 ) ;
46164: LD_INT 1
46166: PPUSH
46167: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
46171: LD_VAR 0 1
46175: PPUSH
46176: CALL_OW 316
46180: PUSH
46181: LD_VAR 0 1
46185: PPUSH
46186: CALL_OW 314
46190: OR
46191: PUSH
46192: LD_VAR 0 1
46196: PPUSH
46197: CALL_OW 302
46201: NOT
46202: OR
46203: PUSH
46204: LD_VAR 0 1
46208: PPUSH
46209: CALL_OW 301
46213: OR
46214: IFFALSE 46164
// RemoveSeeing ( _x , _y , side ) ;
46216: LD_VAR 0 8
46220: PPUSH
46221: LD_VAR 0 9
46225: PPUSH
46226: LD_VAR 0 6
46230: PPUSH
46231: CALL_OW 331
// end ; end_of_file
46235: LD_VAR 0 4
46239: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
46240: LD_INT 0
46242: PPUSH
46243: PPUSH
// if exist_mode then
46244: LD_VAR 0 2
46248: IFFALSE 46273
// unit := CreateCharacter ( prefix & ident ) else
46250: LD_ADDR_VAR 0 5
46254: PUSH
46255: LD_VAR 0 3
46259: PUSH
46260: LD_VAR 0 1
46264: STR
46265: PPUSH
46266: CALL_OW 34
46270: ST_TO_ADDR
46271: GO 46288
// unit := NewCharacter ( ident ) ;
46273: LD_ADDR_VAR 0 5
46277: PUSH
46278: LD_VAR 0 1
46282: PPUSH
46283: CALL_OW 25
46287: ST_TO_ADDR
// result := unit ;
46288: LD_ADDR_VAR 0 4
46292: PUSH
46293: LD_VAR 0 5
46297: ST_TO_ADDR
// end ;
46298: LD_VAR 0 4
46302: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
46303: LD_INT 0
46305: PPUSH
46306: PPUSH
// if not side or not nation then
46307: LD_VAR 0 1
46311: NOT
46312: PUSH
46313: LD_VAR 0 2
46317: NOT
46318: OR
46319: IFFALSE 46323
// exit ;
46321: GO 47091
// case nation of nation_american :
46323: LD_VAR 0 2
46327: PUSH
46328: LD_INT 1
46330: DOUBLE
46331: EQUAL
46332: IFTRUE 46336
46334: GO 46550
46336: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
46337: LD_ADDR_VAR 0 4
46341: PUSH
46342: LD_INT 35
46344: PUSH
46345: LD_INT 45
46347: PUSH
46348: LD_INT 46
46350: PUSH
46351: LD_INT 47
46353: PUSH
46354: LD_INT 82
46356: PUSH
46357: LD_INT 83
46359: PUSH
46360: LD_INT 84
46362: PUSH
46363: LD_INT 85
46365: PUSH
46366: LD_INT 86
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: LD_INT 2
46374: PUSH
46375: LD_INT 6
46377: PUSH
46378: LD_INT 15
46380: PUSH
46381: LD_INT 16
46383: PUSH
46384: LD_INT 7
46386: PUSH
46387: LD_INT 12
46389: PUSH
46390: LD_INT 13
46392: PUSH
46393: LD_INT 10
46395: PUSH
46396: LD_INT 14
46398: PUSH
46399: LD_INT 20
46401: PUSH
46402: LD_INT 21
46404: PUSH
46405: LD_INT 22
46407: PUSH
46408: LD_INT 25
46410: PUSH
46411: LD_INT 32
46413: PUSH
46414: LD_INT 27
46416: PUSH
46417: LD_INT 36
46419: PUSH
46420: LD_INT 69
46422: PUSH
46423: LD_INT 39
46425: PUSH
46426: LD_INT 34
46428: PUSH
46429: LD_INT 40
46431: PUSH
46432: LD_INT 48
46434: PUSH
46435: LD_INT 49
46437: PUSH
46438: LD_INT 50
46440: PUSH
46441: LD_INT 51
46443: PUSH
46444: LD_INT 52
46446: PUSH
46447: LD_INT 53
46449: PUSH
46450: LD_INT 54
46452: PUSH
46453: LD_INT 55
46455: PUSH
46456: LD_INT 56
46458: PUSH
46459: LD_INT 57
46461: PUSH
46462: LD_INT 58
46464: PUSH
46465: LD_INT 59
46467: PUSH
46468: LD_INT 60
46470: PUSH
46471: LD_INT 61
46473: PUSH
46474: LD_INT 62
46476: PUSH
46477: LD_INT 80
46479: PUSH
46480: LD_INT 82
46482: PUSH
46483: LD_INT 83
46485: PUSH
46486: LD_INT 84
46488: PUSH
46489: LD_INT 85
46491: PUSH
46492: LD_INT 86
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: ST_TO_ADDR
46548: GO 47015
46550: LD_INT 2
46552: DOUBLE
46553: EQUAL
46554: IFTRUE 46558
46556: GO 46784
46558: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
46559: LD_ADDR_VAR 0 4
46563: PUSH
46564: LD_INT 35
46566: PUSH
46567: LD_INT 45
46569: PUSH
46570: LD_INT 46
46572: PUSH
46573: LD_INT 47
46575: PUSH
46576: LD_INT 82
46578: PUSH
46579: LD_INT 83
46581: PUSH
46582: LD_INT 84
46584: PUSH
46585: LD_INT 85
46587: PUSH
46588: LD_INT 87
46590: PUSH
46591: LD_INT 70
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: LD_INT 11
46599: PUSH
46600: LD_INT 3
46602: PUSH
46603: LD_INT 4
46605: PUSH
46606: LD_INT 5
46608: PUSH
46609: LD_INT 6
46611: PUSH
46612: LD_INT 15
46614: PUSH
46615: LD_INT 18
46617: PUSH
46618: LD_INT 7
46620: PUSH
46621: LD_INT 17
46623: PUSH
46624: LD_INT 8
46626: PUSH
46627: LD_INT 20
46629: PUSH
46630: LD_INT 21
46632: PUSH
46633: LD_INT 22
46635: PUSH
46636: LD_INT 72
46638: PUSH
46639: LD_INT 26
46641: PUSH
46642: LD_INT 69
46644: PUSH
46645: LD_INT 39
46647: PUSH
46648: LD_INT 40
46650: PUSH
46651: LD_INT 41
46653: PUSH
46654: LD_INT 42
46656: PUSH
46657: LD_INT 43
46659: PUSH
46660: LD_INT 48
46662: PUSH
46663: LD_INT 49
46665: PUSH
46666: LD_INT 50
46668: PUSH
46669: LD_INT 51
46671: PUSH
46672: LD_INT 52
46674: PUSH
46675: LD_INT 53
46677: PUSH
46678: LD_INT 54
46680: PUSH
46681: LD_INT 55
46683: PUSH
46684: LD_INT 56
46686: PUSH
46687: LD_INT 60
46689: PUSH
46690: LD_INT 61
46692: PUSH
46693: LD_INT 62
46695: PUSH
46696: LD_INT 66
46698: PUSH
46699: LD_INT 67
46701: PUSH
46702: LD_INT 68
46704: PUSH
46705: LD_INT 81
46707: PUSH
46708: LD_INT 82
46710: PUSH
46711: LD_INT 83
46713: PUSH
46714: LD_INT 84
46716: PUSH
46717: LD_INT 85
46719: PUSH
46720: LD_INT 87
46722: PUSH
46723: LD_INT 88
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: ST_TO_ADDR
46782: GO 47015
46784: LD_INT 3
46786: DOUBLE
46787: EQUAL
46788: IFTRUE 46792
46790: GO 47014
46792: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
46793: LD_ADDR_VAR 0 4
46797: PUSH
46798: LD_INT 46
46800: PUSH
46801: LD_INT 47
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: LD_INT 2
46809: PUSH
46810: LD_INT 82
46812: PUSH
46813: LD_INT 83
46815: PUSH
46816: LD_INT 84
46818: PUSH
46819: LD_INT 85
46821: PUSH
46822: LD_INT 86
46824: PUSH
46825: LD_INT 11
46827: PUSH
46828: LD_INT 9
46830: PUSH
46831: LD_INT 20
46833: PUSH
46834: LD_INT 19
46836: PUSH
46837: LD_INT 21
46839: PUSH
46840: LD_INT 24
46842: PUSH
46843: LD_INT 22
46845: PUSH
46846: LD_INT 25
46848: PUSH
46849: LD_INT 28
46851: PUSH
46852: LD_INT 29
46854: PUSH
46855: LD_INT 30
46857: PUSH
46858: LD_INT 31
46860: PUSH
46861: LD_INT 37
46863: PUSH
46864: LD_INT 38
46866: PUSH
46867: LD_INT 32
46869: PUSH
46870: LD_INT 27
46872: PUSH
46873: LD_INT 33
46875: PUSH
46876: LD_INT 69
46878: PUSH
46879: LD_INT 39
46881: PUSH
46882: LD_INT 34
46884: PUSH
46885: LD_INT 40
46887: PUSH
46888: LD_INT 71
46890: PUSH
46891: LD_INT 23
46893: PUSH
46894: LD_INT 44
46896: PUSH
46897: LD_INT 48
46899: PUSH
46900: LD_INT 49
46902: PUSH
46903: LD_INT 50
46905: PUSH
46906: LD_INT 51
46908: PUSH
46909: LD_INT 52
46911: PUSH
46912: LD_INT 53
46914: PUSH
46915: LD_INT 54
46917: PUSH
46918: LD_INT 55
46920: PUSH
46921: LD_INT 56
46923: PUSH
46924: LD_INT 57
46926: PUSH
46927: LD_INT 58
46929: PUSH
46930: LD_INT 59
46932: PUSH
46933: LD_INT 63
46935: PUSH
46936: LD_INT 64
46938: PUSH
46939: LD_INT 65
46941: PUSH
46942: LD_INT 82
46944: PUSH
46945: LD_INT 83
46947: PUSH
46948: LD_INT 84
46950: PUSH
46951: LD_INT 85
46953: PUSH
46954: LD_INT 86
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: ST_TO_ADDR
47012: GO 47015
47014: POP
// if state > - 1 and state < 3 then
47015: LD_VAR 0 3
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: GREATER
47024: PUSH
47025: LD_VAR 0 3
47029: PUSH
47030: LD_INT 3
47032: LESS
47033: AND
47034: IFFALSE 47091
// for i in result do
47036: LD_ADDR_VAR 0 5
47040: PUSH
47041: LD_VAR 0 4
47045: PUSH
47046: FOR_IN
47047: IFFALSE 47089
// if GetTech ( i , side ) <> state then
47049: LD_VAR 0 5
47053: PPUSH
47054: LD_VAR 0 1
47058: PPUSH
47059: CALL_OW 321
47063: PUSH
47064: LD_VAR 0 3
47068: NONEQUAL
47069: IFFALSE 47087
// result := result diff i ;
47071: LD_ADDR_VAR 0 4
47075: PUSH
47076: LD_VAR 0 4
47080: PUSH
47081: LD_VAR 0 5
47085: DIFF
47086: ST_TO_ADDR
47087: GO 47046
47089: POP
47090: POP
// end ;
47091: LD_VAR 0 4
47095: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
47096: LD_INT 0
47098: PPUSH
47099: PPUSH
47100: PPUSH
// result := true ;
47101: LD_ADDR_VAR 0 3
47105: PUSH
47106: LD_INT 1
47108: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
47109: LD_ADDR_VAR 0 5
47113: PUSH
47114: LD_VAR 0 2
47118: PPUSH
47119: CALL_OW 480
47123: ST_TO_ADDR
// if not tmp then
47124: LD_VAR 0 5
47128: NOT
47129: IFFALSE 47133
// exit ;
47131: GO 47182
// for i in tmp do
47133: LD_ADDR_VAR 0 4
47137: PUSH
47138: LD_VAR 0 5
47142: PUSH
47143: FOR_IN
47144: IFFALSE 47180
// if GetTech ( i , side ) <> state_researched then
47146: LD_VAR 0 4
47150: PPUSH
47151: LD_VAR 0 1
47155: PPUSH
47156: CALL_OW 321
47160: PUSH
47161: LD_INT 2
47163: NONEQUAL
47164: IFFALSE 47178
// begin result := false ;
47166: LD_ADDR_VAR 0 3
47170: PUSH
47171: LD_INT 0
47173: ST_TO_ADDR
// exit ;
47174: POP
47175: POP
47176: GO 47182
// end ;
47178: GO 47143
47180: POP
47181: POP
// end ;
47182: LD_VAR 0 3
47186: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
47187: LD_INT 0
47189: PPUSH
47190: PPUSH
47191: PPUSH
47192: PPUSH
47193: PPUSH
47194: PPUSH
47195: PPUSH
47196: PPUSH
47197: PPUSH
47198: PPUSH
47199: PPUSH
47200: PPUSH
47201: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
47202: LD_VAR 0 1
47206: NOT
47207: PUSH
47208: LD_VAR 0 1
47212: PPUSH
47213: CALL_OW 257
47217: PUSH
47218: LD_INT 9
47220: NONEQUAL
47221: OR
47222: IFFALSE 47226
// exit ;
47224: GO 47799
// side := GetSide ( unit ) ;
47226: LD_ADDR_VAR 0 9
47230: PUSH
47231: LD_VAR 0 1
47235: PPUSH
47236: CALL_OW 255
47240: ST_TO_ADDR
// tech_space := tech_spacanom ;
47241: LD_ADDR_VAR 0 12
47245: PUSH
47246: LD_INT 29
47248: ST_TO_ADDR
// tech_time := tech_taurad ;
47249: LD_ADDR_VAR 0 13
47253: PUSH
47254: LD_INT 28
47256: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
47257: LD_ADDR_VAR 0 11
47261: PUSH
47262: LD_VAR 0 1
47266: PPUSH
47267: CALL_OW 310
47271: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
47272: LD_VAR 0 11
47276: PPUSH
47277: CALL_OW 247
47281: PUSH
47282: LD_INT 2
47284: EQUAL
47285: IFFALSE 47289
// exit ;
47287: GO 47799
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47289: LD_ADDR_VAR 0 8
47293: PUSH
47294: LD_INT 81
47296: PUSH
47297: LD_VAR 0 9
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 3
47308: PUSH
47309: LD_INT 21
47311: PUSH
47312: LD_INT 3
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PPUSH
47327: CALL_OW 69
47331: ST_TO_ADDR
// if not tmp then
47332: LD_VAR 0 8
47336: NOT
47337: IFFALSE 47341
// exit ;
47339: GO 47799
// if in_unit then
47341: LD_VAR 0 11
47345: IFFALSE 47369
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
47347: LD_ADDR_VAR 0 10
47351: PUSH
47352: LD_VAR 0 8
47356: PPUSH
47357: LD_VAR 0 11
47361: PPUSH
47362: CALL_OW 74
47366: ST_TO_ADDR
47367: GO 47389
// enemy := NearestUnitToUnit ( tmp , unit ) ;
47369: LD_ADDR_VAR 0 10
47373: PUSH
47374: LD_VAR 0 8
47378: PPUSH
47379: LD_VAR 0 1
47383: PPUSH
47384: CALL_OW 74
47388: ST_TO_ADDR
// if not enemy then
47389: LD_VAR 0 10
47393: NOT
47394: IFFALSE 47398
// exit ;
47396: GO 47799
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
47398: LD_VAR 0 11
47402: PUSH
47403: LD_VAR 0 11
47407: PPUSH
47408: LD_VAR 0 10
47412: PPUSH
47413: CALL_OW 296
47417: PUSH
47418: LD_INT 13
47420: GREATER
47421: AND
47422: PUSH
47423: LD_VAR 0 1
47427: PPUSH
47428: LD_VAR 0 10
47432: PPUSH
47433: CALL_OW 296
47437: PUSH
47438: LD_INT 12
47440: GREATER
47441: OR
47442: IFFALSE 47446
// exit ;
47444: GO 47799
// missile := [ 1 ] ;
47446: LD_ADDR_VAR 0 14
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: ST_TO_ADDR
// if Researched ( side , tech_space ) then
47457: LD_VAR 0 9
47461: PPUSH
47462: LD_VAR 0 12
47466: PPUSH
47467: CALL_OW 325
47471: IFFALSE 47500
// missile := Replace ( missile , missile + 1 , 2 ) ;
47473: LD_ADDR_VAR 0 14
47477: PUSH
47478: LD_VAR 0 14
47482: PPUSH
47483: LD_VAR 0 14
47487: PUSH
47488: LD_INT 1
47490: PLUS
47491: PPUSH
47492: LD_INT 2
47494: PPUSH
47495: CALL_OW 1
47499: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
47500: LD_VAR 0 9
47504: PPUSH
47505: LD_VAR 0 13
47509: PPUSH
47510: CALL_OW 325
47514: PUSH
47515: LD_VAR 0 10
47519: PPUSH
47520: CALL_OW 255
47524: PPUSH
47525: LD_VAR 0 13
47529: PPUSH
47530: CALL_OW 325
47534: NOT
47535: AND
47536: IFFALSE 47565
// missile := Replace ( missile , missile + 1 , 3 ) ;
47538: LD_ADDR_VAR 0 14
47542: PUSH
47543: LD_VAR 0 14
47547: PPUSH
47548: LD_VAR 0 14
47552: PUSH
47553: LD_INT 1
47555: PLUS
47556: PPUSH
47557: LD_INT 3
47559: PPUSH
47560: CALL_OW 1
47564: ST_TO_ADDR
// if missile < 2 then
47565: LD_VAR 0 14
47569: PUSH
47570: LD_INT 2
47572: LESS
47573: IFFALSE 47577
// exit ;
47575: GO 47799
// x := GetX ( enemy ) ;
47577: LD_ADDR_VAR 0 4
47581: PUSH
47582: LD_VAR 0 10
47586: PPUSH
47587: CALL_OW 250
47591: ST_TO_ADDR
// y := GetY ( enemy ) ;
47592: LD_ADDR_VAR 0 5
47596: PUSH
47597: LD_VAR 0 10
47601: PPUSH
47602: CALL_OW 251
47606: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
47607: LD_ADDR_VAR 0 6
47611: PUSH
47612: LD_VAR 0 4
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PPUSH
47621: LD_INT 1
47623: PPUSH
47624: CALL_OW 12
47628: PLUS
47629: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
47630: LD_ADDR_VAR 0 7
47634: PUSH
47635: LD_VAR 0 5
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PPUSH
47644: LD_INT 1
47646: PPUSH
47647: CALL_OW 12
47651: PLUS
47652: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47653: LD_VAR 0 6
47657: PPUSH
47658: LD_VAR 0 7
47662: PPUSH
47663: CALL_OW 488
47667: NOT
47668: IFFALSE 47690
// begin _x := x ;
47670: LD_ADDR_VAR 0 6
47674: PUSH
47675: LD_VAR 0 4
47679: ST_TO_ADDR
// _y := y ;
47680: LD_ADDR_VAR 0 7
47684: PUSH
47685: LD_VAR 0 5
47689: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
47690: LD_ADDR_VAR 0 3
47694: PUSH
47695: LD_INT 1
47697: PPUSH
47698: LD_VAR 0 14
47702: PPUSH
47703: CALL_OW 12
47707: ST_TO_ADDR
// case i of 1 :
47708: LD_VAR 0 3
47712: PUSH
47713: LD_INT 1
47715: DOUBLE
47716: EQUAL
47717: IFTRUE 47721
47719: GO 47738
47721: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
47722: LD_VAR 0 1
47726: PPUSH
47727: LD_VAR 0 10
47731: PPUSH
47732: CALL_OW 115
47736: GO 47799
47738: LD_INT 2
47740: DOUBLE
47741: EQUAL
47742: IFTRUE 47746
47744: GO 47768
47746: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
47747: LD_VAR 0 1
47751: PPUSH
47752: LD_VAR 0 6
47756: PPUSH
47757: LD_VAR 0 7
47761: PPUSH
47762: CALL_OW 153
47766: GO 47799
47768: LD_INT 3
47770: DOUBLE
47771: EQUAL
47772: IFTRUE 47776
47774: GO 47798
47776: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
47777: LD_VAR 0 1
47781: PPUSH
47782: LD_VAR 0 6
47786: PPUSH
47787: LD_VAR 0 7
47791: PPUSH
47792: CALL_OW 154
47796: GO 47799
47798: POP
// end ;
47799: LD_VAR 0 2
47803: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
47804: LD_INT 0
47806: PPUSH
47807: PPUSH
47808: PPUSH
47809: PPUSH
47810: PPUSH
47811: PPUSH
// if not unit or not building then
47812: LD_VAR 0 1
47816: NOT
47817: PUSH
47818: LD_VAR 0 2
47822: NOT
47823: OR
47824: IFFALSE 47828
// exit ;
47826: GO 47986
// x := GetX ( building ) ;
47828: LD_ADDR_VAR 0 5
47832: PUSH
47833: LD_VAR 0 2
47837: PPUSH
47838: CALL_OW 250
47842: ST_TO_ADDR
// y := GetY ( building ) ;
47843: LD_ADDR_VAR 0 6
47847: PUSH
47848: LD_VAR 0 2
47852: PPUSH
47853: CALL_OW 251
47857: ST_TO_ADDR
// for i = 0 to 5 do
47858: LD_ADDR_VAR 0 4
47862: PUSH
47863: DOUBLE
47864: LD_INT 0
47866: DEC
47867: ST_TO_ADDR
47868: LD_INT 5
47870: PUSH
47871: FOR_TO
47872: IFFALSE 47984
// begin _x := ShiftX ( x , i , 3 ) ;
47874: LD_ADDR_VAR 0 7
47878: PUSH
47879: LD_VAR 0 5
47883: PPUSH
47884: LD_VAR 0 4
47888: PPUSH
47889: LD_INT 3
47891: PPUSH
47892: CALL_OW 272
47896: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
47897: LD_ADDR_VAR 0 8
47901: PUSH
47902: LD_VAR 0 6
47906: PPUSH
47907: LD_VAR 0 4
47911: PPUSH
47912: LD_INT 3
47914: PPUSH
47915: CALL_OW 273
47919: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47920: LD_VAR 0 7
47924: PPUSH
47925: LD_VAR 0 8
47929: PPUSH
47930: CALL_OW 488
47934: NOT
47935: IFFALSE 47939
// continue ;
47937: GO 47871
// if HexInfo ( _x , _y ) = 0 then
47939: LD_VAR 0 7
47943: PPUSH
47944: LD_VAR 0 8
47948: PPUSH
47949: CALL_OW 428
47953: PUSH
47954: LD_INT 0
47956: EQUAL
47957: IFFALSE 47982
// begin ComMoveXY ( unit , _x , _y ) ;
47959: LD_VAR 0 1
47963: PPUSH
47964: LD_VAR 0 7
47968: PPUSH
47969: LD_VAR 0 8
47973: PPUSH
47974: CALL_OW 111
// exit ;
47978: POP
47979: POP
47980: GO 47986
// end ; end ;
47982: GO 47871
47984: POP
47985: POP
// end ;
47986: LD_VAR 0 3
47990: RET
// export function ScanBase ( side , base_area ) ; begin
47991: LD_INT 0
47993: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
47994: LD_ADDR_VAR 0 3
47998: PUSH
47999: LD_VAR 0 2
48003: PPUSH
48004: LD_INT 81
48006: PUSH
48007: LD_VAR 0 1
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PPUSH
48016: CALL_OW 70
48020: ST_TO_ADDR
// end ;
48021: LD_VAR 0 3
48025: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
48026: LD_INT 0
48028: PPUSH
48029: PPUSH
48030: PPUSH
48031: PPUSH
// result := false ;
48032: LD_ADDR_VAR 0 2
48036: PUSH
48037: LD_INT 0
48039: ST_TO_ADDR
// side := GetSide ( unit ) ;
48040: LD_ADDR_VAR 0 3
48044: PUSH
48045: LD_VAR 0 1
48049: PPUSH
48050: CALL_OW 255
48054: ST_TO_ADDR
// nat := GetNation ( unit ) ;
48055: LD_ADDR_VAR 0 4
48059: PUSH
48060: LD_VAR 0 1
48064: PPUSH
48065: CALL_OW 248
48069: ST_TO_ADDR
// case nat of 1 :
48070: LD_VAR 0 4
48074: PUSH
48075: LD_INT 1
48077: DOUBLE
48078: EQUAL
48079: IFTRUE 48083
48081: GO 48094
48083: POP
// tech := tech_lassight ; 2 :
48084: LD_ADDR_VAR 0 5
48088: PUSH
48089: LD_INT 12
48091: ST_TO_ADDR
48092: GO 48133
48094: LD_INT 2
48096: DOUBLE
48097: EQUAL
48098: IFTRUE 48102
48100: GO 48113
48102: POP
// tech := tech_mortar ; 3 :
48103: LD_ADDR_VAR 0 5
48107: PUSH
48108: LD_INT 41
48110: ST_TO_ADDR
48111: GO 48133
48113: LD_INT 3
48115: DOUBLE
48116: EQUAL
48117: IFTRUE 48121
48119: GO 48132
48121: POP
// tech := tech_bazooka ; end ;
48122: LD_ADDR_VAR 0 5
48126: PUSH
48127: LD_INT 44
48129: ST_TO_ADDR
48130: GO 48133
48132: POP
// if Researched ( side , tech ) then
48133: LD_VAR 0 3
48137: PPUSH
48138: LD_VAR 0 5
48142: PPUSH
48143: CALL_OW 325
48147: IFFALSE 48174
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
48149: LD_ADDR_VAR 0 2
48153: PUSH
48154: LD_INT 5
48156: PUSH
48157: LD_INT 8
48159: PUSH
48160: LD_INT 9
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: LIST
48167: PUSH
48168: LD_VAR 0 4
48172: ARRAY
48173: ST_TO_ADDR
// end ;
48174: LD_VAR 0 2
48178: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
48179: LD_INT 0
48181: PPUSH
48182: PPUSH
48183: PPUSH
// if not mines then
48184: LD_VAR 0 2
48188: NOT
48189: IFFALSE 48193
// exit ;
48191: GO 48337
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48193: LD_ADDR_VAR 0 5
48197: PUSH
48198: LD_INT 81
48200: PUSH
48201: LD_VAR 0 1
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 3
48212: PUSH
48213: LD_INT 21
48215: PUSH
48216: LD_INT 3
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PPUSH
48231: CALL_OW 69
48235: ST_TO_ADDR
// for i in mines do
48236: LD_ADDR_VAR 0 4
48240: PUSH
48241: LD_VAR 0 2
48245: PUSH
48246: FOR_IN
48247: IFFALSE 48335
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
48249: LD_VAR 0 4
48253: PUSH
48254: LD_INT 1
48256: ARRAY
48257: PPUSH
48258: LD_VAR 0 4
48262: PUSH
48263: LD_INT 2
48265: ARRAY
48266: PPUSH
48267: CALL_OW 458
48271: NOT
48272: IFFALSE 48276
// continue ;
48274: GO 48246
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
48276: LD_VAR 0 4
48280: PUSH
48281: LD_INT 1
48283: ARRAY
48284: PPUSH
48285: LD_VAR 0 4
48289: PUSH
48290: LD_INT 2
48292: ARRAY
48293: PPUSH
48294: CALL_OW 428
48298: PUSH
48299: LD_VAR 0 5
48303: IN
48304: IFFALSE 48333
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
48306: LD_VAR 0 4
48310: PUSH
48311: LD_INT 1
48313: ARRAY
48314: PPUSH
48315: LD_VAR 0 4
48319: PUSH
48320: LD_INT 2
48322: ARRAY
48323: PPUSH
48324: LD_VAR 0 1
48328: PPUSH
48329: CALL_OW 456
// end ;
48333: GO 48246
48335: POP
48336: POP
// end ;
48337: LD_VAR 0 3
48341: RET
// export function Count ( array ) ; var i ; begin
48342: LD_INT 0
48344: PPUSH
48345: PPUSH
// result := 0 ;
48346: LD_ADDR_VAR 0 2
48350: PUSH
48351: LD_INT 0
48353: ST_TO_ADDR
// for i in array do
48354: LD_ADDR_VAR 0 3
48358: PUSH
48359: LD_VAR 0 1
48363: PUSH
48364: FOR_IN
48365: IFFALSE 48389
// if i then
48367: LD_VAR 0 3
48371: IFFALSE 48387
// result := result + 1 ;
48373: LD_ADDR_VAR 0 2
48377: PUSH
48378: LD_VAR 0 2
48382: PUSH
48383: LD_INT 1
48385: PLUS
48386: ST_TO_ADDR
48387: GO 48364
48389: POP
48390: POP
// end ;
48391: LD_VAR 0 2
48395: RET
// export function IsEmpty ( building ) ; begin
48396: LD_INT 0
48398: PPUSH
// if not building then
48399: LD_VAR 0 1
48403: NOT
48404: IFFALSE 48408
// exit ;
48406: GO 48451
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
48408: LD_ADDR_VAR 0 2
48412: PUSH
48413: LD_VAR 0 1
48417: PUSH
48418: LD_INT 22
48420: PUSH
48421: LD_VAR 0 1
48425: PPUSH
48426: CALL_OW 255
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 58
48437: PUSH
48438: EMPTY
48439: LIST
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PPUSH
48445: CALL_OW 69
48449: IN
48450: ST_TO_ADDR
// end ;
48451: LD_VAR 0 2
48455: RET
// export function IsNotFull ( building ) ; begin
48456: LD_INT 0
48458: PPUSH
// if not building then
48459: LD_VAR 0 1
48463: NOT
48464: IFFALSE 48468
// exit ;
48466: GO 48487
// result := UnitsInside ( building ) < 6 ;
48468: LD_ADDR_VAR 0 2
48472: PUSH
48473: LD_VAR 0 1
48477: PPUSH
48478: CALL_OW 313
48482: PUSH
48483: LD_INT 6
48485: LESS
48486: ST_TO_ADDR
// end ;
48487: LD_VAR 0 2
48491: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
48492: LD_INT 0
48494: PPUSH
48495: PPUSH
48496: PPUSH
48497: PPUSH
// tmp := [ ] ;
48498: LD_ADDR_VAR 0 3
48502: PUSH
48503: EMPTY
48504: ST_TO_ADDR
// list := [ ] ;
48505: LD_ADDR_VAR 0 5
48509: PUSH
48510: EMPTY
48511: ST_TO_ADDR
// for i = 16 to 25 do
48512: LD_ADDR_VAR 0 4
48516: PUSH
48517: DOUBLE
48518: LD_INT 16
48520: DEC
48521: ST_TO_ADDR
48522: LD_INT 25
48524: PUSH
48525: FOR_TO
48526: IFFALSE 48599
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
48528: LD_ADDR_VAR 0 3
48532: PUSH
48533: LD_VAR 0 3
48537: PUSH
48538: LD_INT 22
48540: PUSH
48541: LD_VAR 0 1
48545: PPUSH
48546: CALL_OW 255
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 91
48557: PUSH
48558: LD_VAR 0 1
48562: PUSH
48563: LD_INT 6
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 30
48573: PUSH
48574: LD_VAR 0 4
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: LIST
48587: PUSH
48588: EMPTY
48589: LIST
48590: PPUSH
48591: CALL_OW 69
48595: ADD
48596: ST_TO_ADDR
48597: GO 48525
48599: POP
48600: POP
// for i = 1 to tmp do
48601: LD_ADDR_VAR 0 4
48605: PUSH
48606: DOUBLE
48607: LD_INT 1
48609: DEC
48610: ST_TO_ADDR
48611: LD_VAR 0 3
48615: PUSH
48616: FOR_TO
48617: IFFALSE 48705
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
48619: LD_ADDR_VAR 0 5
48623: PUSH
48624: LD_VAR 0 5
48628: PUSH
48629: LD_VAR 0 3
48633: PUSH
48634: LD_VAR 0 4
48638: ARRAY
48639: PPUSH
48640: CALL_OW 266
48644: PUSH
48645: LD_VAR 0 3
48649: PUSH
48650: LD_VAR 0 4
48654: ARRAY
48655: PPUSH
48656: CALL_OW 250
48660: PUSH
48661: LD_VAR 0 3
48665: PUSH
48666: LD_VAR 0 4
48670: ARRAY
48671: PPUSH
48672: CALL_OW 251
48676: PUSH
48677: LD_VAR 0 3
48681: PUSH
48682: LD_VAR 0 4
48686: ARRAY
48687: PPUSH
48688: CALL_OW 254
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: PUSH
48699: EMPTY
48700: LIST
48701: ADD
48702: ST_TO_ADDR
48703: GO 48616
48705: POP
48706: POP
// result := list ;
48707: LD_ADDR_VAR 0 2
48711: PUSH
48712: LD_VAR 0 5
48716: ST_TO_ADDR
// end ;
48717: LD_VAR 0 2
48721: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
48722: LD_INT 0
48724: PPUSH
48725: PPUSH
48726: PPUSH
48727: PPUSH
48728: PPUSH
48729: PPUSH
48730: PPUSH
// if not factory then
48731: LD_VAR 0 1
48735: NOT
48736: IFFALSE 48740
// exit ;
48738: GO 49333
// if control = control_apeman then
48740: LD_VAR 0 4
48744: PUSH
48745: LD_INT 5
48747: EQUAL
48748: IFFALSE 48857
// begin tmp := UnitsInside ( factory ) ;
48750: LD_ADDR_VAR 0 8
48754: PUSH
48755: LD_VAR 0 1
48759: PPUSH
48760: CALL_OW 313
48764: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
48765: LD_VAR 0 8
48769: PPUSH
48770: LD_INT 25
48772: PUSH
48773: LD_INT 12
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PPUSH
48780: CALL_OW 72
48784: NOT
48785: IFFALSE 48795
// control := control_manual ;
48787: LD_ADDR_VAR 0 4
48791: PUSH
48792: LD_INT 1
48794: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
48795: LD_ADDR_VAR 0 8
48799: PUSH
48800: LD_VAR 0 1
48804: PPUSH
48805: CALL 48492 0 1
48809: ST_TO_ADDR
// if tmp then
48810: LD_VAR 0 8
48814: IFFALSE 48857
// begin for i in tmp do
48816: LD_ADDR_VAR 0 7
48820: PUSH
48821: LD_VAR 0 8
48825: PUSH
48826: FOR_IN
48827: IFFALSE 48855
// if i [ 1 ] = b_ext_radio then
48829: LD_VAR 0 7
48833: PUSH
48834: LD_INT 1
48836: ARRAY
48837: PUSH
48838: LD_INT 22
48840: EQUAL
48841: IFFALSE 48853
// begin control := control_remote ;
48843: LD_ADDR_VAR 0 4
48847: PUSH
48848: LD_INT 2
48850: ST_TO_ADDR
// break ;
48851: GO 48855
// end ;
48853: GO 48826
48855: POP
48856: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
48857: LD_VAR 0 1
48861: PPUSH
48862: LD_VAR 0 2
48866: PPUSH
48867: LD_VAR 0 3
48871: PPUSH
48872: LD_VAR 0 4
48876: PPUSH
48877: LD_VAR 0 5
48881: PPUSH
48882: CALL_OW 448
48886: IFFALSE 48921
// begin result := [ chassis , engine , control , weapon ] ;
48888: LD_ADDR_VAR 0 6
48892: PUSH
48893: LD_VAR 0 2
48897: PUSH
48898: LD_VAR 0 3
48902: PUSH
48903: LD_VAR 0 4
48907: PUSH
48908: LD_VAR 0 5
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: ST_TO_ADDR
// exit ;
48919: GO 49333
// end ; _chassis := AvailableChassisList ( factory ) ;
48921: LD_ADDR_VAR 0 9
48925: PUSH
48926: LD_VAR 0 1
48930: PPUSH
48931: CALL_OW 475
48935: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
48936: LD_ADDR_VAR 0 11
48940: PUSH
48941: LD_VAR 0 1
48945: PPUSH
48946: CALL_OW 476
48950: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
48951: LD_ADDR_VAR 0 12
48955: PUSH
48956: LD_VAR 0 1
48960: PPUSH
48961: CALL_OW 477
48965: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
48966: LD_ADDR_VAR 0 10
48970: PUSH
48971: LD_VAR 0 1
48975: PPUSH
48976: CALL_OW 478
48980: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
48981: LD_VAR 0 9
48985: NOT
48986: PUSH
48987: LD_VAR 0 11
48991: NOT
48992: OR
48993: PUSH
48994: LD_VAR 0 12
48998: NOT
48999: OR
49000: PUSH
49001: LD_VAR 0 10
49005: NOT
49006: OR
49007: IFFALSE 49042
// begin result := [ chassis , engine , control , weapon ] ;
49009: LD_ADDR_VAR 0 6
49013: PUSH
49014: LD_VAR 0 2
49018: PUSH
49019: LD_VAR 0 3
49023: PUSH
49024: LD_VAR 0 4
49028: PUSH
49029: LD_VAR 0 5
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: ST_TO_ADDR
// exit ;
49040: GO 49333
// end ; if not chassis in _chassis then
49042: LD_VAR 0 2
49046: PUSH
49047: LD_VAR 0 9
49051: IN
49052: NOT
49053: IFFALSE 49079
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
49055: LD_ADDR_VAR 0 2
49059: PUSH
49060: LD_VAR 0 9
49064: PUSH
49065: LD_INT 1
49067: PPUSH
49068: LD_VAR 0 9
49072: PPUSH
49073: CALL_OW 12
49077: ARRAY
49078: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
49079: LD_VAR 0 2
49083: PPUSH
49084: LD_VAR 0 3
49088: PPUSH
49089: CALL 49338 0 2
49093: NOT
49094: IFFALSE 49153
// repeat engine := _engine [ 1 ] ;
49096: LD_ADDR_VAR 0 3
49100: PUSH
49101: LD_VAR 0 11
49105: PUSH
49106: LD_INT 1
49108: ARRAY
49109: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
49110: LD_ADDR_VAR 0 11
49114: PUSH
49115: LD_VAR 0 11
49119: PPUSH
49120: LD_INT 1
49122: PPUSH
49123: CALL_OW 3
49127: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
49128: LD_VAR 0 2
49132: PPUSH
49133: LD_VAR 0 3
49137: PPUSH
49138: CALL 49338 0 2
49142: PUSH
49143: LD_VAR 0 11
49147: PUSH
49148: EMPTY
49149: EQUAL
49150: OR
49151: IFFALSE 49096
// if not control in _control then
49153: LD_VAR 0 4
49157: PUSH
49158: LD_VAR 0 12
49162: IN
49163: NOT
49164: IFFALSE 49190
// control := _control [ rand ( 1 , _control ) ] ;
49166: LD_ADDR_VAR 0 4
49170: PUSH
49171: LD_VAR 0 12
49175: PUSH
49176: LD_INT 1
49178: PPUSH
49179: LD_VAR 0 12
49183: PPUSH
49184: CALL_OW 12
49188: ARRAY
49189: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
49190: LD_VAR 0 2
49194: PPUSH
49195: LD_VAR 0 5
49199: PPUSH
49200: CALL 49558 0 2
49204: NOT
49205: IFFALSE 49264
// repeat weapon := _weapon [ 1 ] ;
49207: LD_ADDR_VAR 0 5
49211: PUSH
49212: LD_VAR 0 10
49216: PUSH
49217: LD_INT 1
49219: ARRAY
49220: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
49221: LD_ADDR_VAR 0 10
49225: PUSH
49226: LD_VAR 0 10
49230: PPUSH
49231: LD_INT 1
49233: PPUSH
49234: CALL_OW 3
49238: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
49239: LD_VAR 0 2
49243: PPUSH
49244: LD_VAR 0 5
49248: PPUSH
49249: CALL 49558 0 2
49253: PUSH
49254: LD_VAR 0 10
49258: PUSH
49259: EMPTY
49260: EQUAL
49261: OR
49262: IFFALSE 49207
// result := [ ] ;
49264: LD_ADDR_VAR 0 6
49268: PUSH
49269: EMPTY
49270: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
49271: LD_VAR 0 1
49275: PPUSH
49276: LD_VAR 0 2
49280: PPUSH
49281: LD_VAR 0 3
49285: PPUSH
49286: LD_VAR 0 4
49290: PPUSH
49291: LD_VAR 0 5
49295: PPUSH
49296: CALL_OW 448
49300: IFFALSE 49333
// result := [ chassis , engine , control , weapon ] ;
49302: LD_ADDR_VAR 0 6
49306: PUSH
49307: LD_VAR 0 2
49311: PUSH
49312: LD_VAR 0 3
49316: PUSH
49317: LD_VAR 0 4
49321: PUSH
49322: LD_VAR 0 5
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: ST_TO_ADDR
// end ;
49333: LD_VAR 0 6
49337: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
49338: LD_INT 0
49340: PPUSH
// if not chassis or not engine then
49341: LD_VAR 0 1
49345: NOT
49346: PUSH
49347: LD_VAR 0 2
49351: NOT
49352: OR
49353: IFFALSE 49357
// exit ;
49355: GO 49553
// case engine of engine_solar :
49357: LD_VAR 0 2
49361: PUSH
49362: LD_INT 2
49364: DOUBLE
49365: EQUAL
49366: IFTRUE 49370
49368: GO 49408
49370: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
49371: LD_ADDR_VAR 0 3
49375: PUSH
49376: LD_INT 11
49378: PUSH
49379: LD_INT 12
49381: PUSH
49382: LD_INT 13
49384: PUSH
49385: LD_INT 14
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: LD_INT 3
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: ST_TO_ADDR
49406: GO 49537
49408: LD_INT 1
49410: DOUBLE
49411: EQUAL
49412: IFTRUE 49416
49414: GO 49478
49416: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
49417: LD_ADDR_VAR 0 3
49421: PUSH
49422: LD_INT 11
49424: PUSH
49425: LD_INT 12
49427: PUSH
49428: LD_INT 13
49430: PUSH
49431: LD_INT 14
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: LD_INT 3
49442: PUSH
49443: LD_INT 4
49445: PUSH
49446: LD_INT 5
49448: PUSH
49449: LD_INT 21
49451: PUSH
49452: LD_INT 23
49454: PUSH
49455: LD_INT 22
49457: PUSH
49458: LD_INT 24
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: ST_TO_ADDR
49476: GO 49537
49478: LD_INT 3
49480: DOUBLE
49481: EQUAL
49482: IFTRUE 49486
49484: GO 49536
49486: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
49487: LD_ADDR_VAR 0 3
49491: PUSH
49492: LD_INT 13
49494: PUSH
49495: LD_INT 14
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: LD_INT 3
49503: PUSH
49504: LD_INT 4
49506: PUSH
49507: LD_INT 5
49509: PUSH
49510: LD_INT 21
49512: PUSH
49513: LD_INT 22
49515: PUSH
49516: LD_INT 23
49518: PUSH
49519: LD_INT 24
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: ST_TO_ADDR
49534: GO 49537
49536: POP
// result := ( chassis in result ) ;
49537: LD_ADDR_VAR 0 3
49541: PUSH
49542: LD_VAR 0 1
49546: PUSH
49547: LD_VAR 0 3
49551: IN
49552: ST_TO_ADDR
// end ;
49553: LD_VAR 0 3
49557: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
49558: LD_INT 0
49560: PPUSH
// if not chassis or not weapon then
49561: LD_VAR 0 1
49565: NOT
49566: PUSH
49567: LD_VAR 0 2
49571: NOT
49572: OR
49573: IFFALSE 49577
// exit ;
49575: GO 50639
// case weapon of us_machine_gun :
49577: LD_VAR 0 2
49581: PUSH
49582: LD_INT 2
49584: DOUBLE
49585: EQUAL
49586: IFTRUE 49590
49588: GO 49620
49590: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
49591: LD_ADDR_VAR 0 3
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: LD_INT 2
49601: PUSH
49602: LD_INT 3
49604: PUSH
49605: LD_INT 4
49607: PUSH
49608: LD_INT 5
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: ST_TO_ADDR
49618: GO 50623
49620: LD_INT 3
49622: DOUBLE
49623: EQUAL
49624: IFTRUE 49628
49626: GO 49658
49628: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
49629: LD_ADDR_VAR 0 3
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: LD_INT 2
49639: PUSH
49640: LD_INT 3
49642: PUSH
49643: LD_INT 4
49645: PUSH
49646: LD_INT 5
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: ST_TO_ADDR
49656: GO 50623
49658: LD_INT 11
49660: DOUBLE
49661: EQUAL
49662: IFTRUE 49666
49664: GO 49696
49666: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
49667: LD_ADDR_VAR 0 3
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: LD_INT 2
49677: PUSH
49678: LD_INT 3
49680: PUSH
49681: LD_INT 4
49683: PUSH
49684: LD_INT 5
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: ST_TO_ADDR
49694: GO 50623
49696: LD_INT 4
49698: DOUBLE
49699: EQUAL
49700: IFTRUE 49704
49702: GO 49730
49704: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
49705: LD_ADDR_VAR 0 3
49709: PUSH
49710: LD_INT 2
49712: PUSH
49713: LD_INT 3
49715: PUSH
49716: LD_INT 4
49718: PUSH
49719: LD_INT 5
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: ST_TO_ADDR
49728: GO 50623
49730: LD_INT 5
49732: DOUBLE
49733: EQUAL
49734: IFTRUE 49738
49736: GO 49764
49738: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
49739: LD_ADDR_VAR 0 3
49743: PUSH
49744: LD_INT 2
49746: PUSH
49747: LD_INT 3
49749: PUSH
49750: LD_INT 4
49752: PUSH
49753: LD_INT 5
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: ST_TO_ADDR
49762: GO 50623
49764: LD_INT 9
49766: DOUBLE
49767: EQUAL
49768: IFTRUE 49772
49770: GO 49798
49772: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
49773: LD_ADDR_VAR 0 3
49777: PUSH
49778: LD_INT 2
49780: PUSH
49781: LD_INT 3
49783: PUSH
49784: LD_INT 4
49786: PUSH
49787: LD_INT 5
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: ST_TO_ADDR
49796: GO 50623
49798: LD_INT 7
49800: DOUBLE
49801: EQUAL
49802: IFTRUE 49806
49804: GO 49832
49806: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
49807: LD_ADDR_VAR 0 3
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: LD_INT 3
49817: PUSH
49818: LD_INT 4
49820: PUSH
49821: LD_INT 5
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: ST_TO_ADDR
49830: GO 50623
49832: LD_INT 12
49834: DOUBLE
49835: EQUAL
49836: IFTRUE 49840
49838: GO 49866
49840: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
49841: LD_ADDR_VAR 0 3
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: LD_INT 3
49851: PUSH
49852: LD_INT 4
49854: PUSH
49855: LD_INT 5
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: ST_TO_ADDR
49864: GO 50623
49866: LD_INT 13
49868: DOUBLE
49869: EQUAL
49870: IFTRUE 49874
49872: GO 49900
49874: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
49875: LD_ADDR_VAR 0 3
49879: PUSH
49880: LD_INT 2
49882: PUSH
49883: LD_INT 3
49885: PUSH
49886: LD_INT 4
49888: PUSH
49889: LD_INT 5
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: ST_TO_ADDR
49898: GO 50623
49900: LD_INT 14
49902: DOUBLE
49903: EQUAL
49904: IFTRUE 49908
49906: GO 49926
49908: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
49909: LD_ADDR_VAR 0 3
49913: PUSH
49914: LD_INT 4
49916: PUSH
49917: LD_INT 5
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: ST_TO_ADDR
49924: GO 50623
49926: LD_INT 6
49928: DOUBLE
49929: EQUAL
49930: IFTRUE 49934
49932: GO 49952
49934: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
49935: LD_ADDR_VAR 0 3
49939: PUSH
49940: LD_INT 4
49942: PUSH
49943: LD_INT 5
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: ST_TO_ADDR
49950: GO 50623
49952: LD_INT 10
49954: DOUBLE
49955: EQUAL
49956: IFTRUE 49960
49958: GO 49978
49960: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
49961: LD_ADDR_VAR 0 3
49965: PUSH
49966: LD_INT 4
49968: PUSH
49969: LD_INT 5
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: ST_TO_ADDR
49976: GO 50623
49978: LD_INT 22
49980: DOUBLE
49981: EQUAL
49982: IFTRUE 49986
49984: GO 50012
49986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
49987: LD_ADDR_VAR 0 3
49991: PUSH
49992: LD_INT 11
49994: PUSH
49995: LD_INT 12
49997: PUSH
49998: LD_INT 13
50000: PUSH
50001: LD_INT 14
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: ST_TO_ADDR
50010: GO 50623
50012: LD_INT 23
50014: DOUBLE
50015: EQUAL
50016: IFTRUE 50020
50018: GO 50046
50020: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
50021: LD_ADDR_VAR 0 3
50025: PUSH
50026: LD_INT 11
50028: PUSH
50029: LD_INT 12
50031: PUSH
50032: LD_INT 13
50034: PUSH
50035: LD_INT 14
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: ST_TO_ADDR
50044: GO 50623
50046: LD_INT 24
50048: DOUBLE
50049: EQUAL
50050: IFTRUE 50054
50052: GO 50080
50054: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
50055: LD_ADDR_VAR 0 3
50059: PUSH
50060: LD_INT 11
50062: PUSH
50063: LD_INT 12
50065: PUSH
50066: LD_INT 13
50068: PUSH
50069: LD_INT 14
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: ST_TO_ADDR
50078: GO 50623
50080: LD_INT 30
50082: DOUBLE
50083: EQUAL
50084: IFTRUE 50088
50086: GO 50114
50088: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
50089: LD_ADDR_VAR 0 3
50093: PUSH
50094: LD_INT 11
50096: PUSH
50097: LD_INT 12
50099: PUSH
50100: LD_INT 13
50102: PUSH
50103: LD_INT 14
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: ST_TO_ADDR
50112: GO 50623
50114: LD_INT 25
50116: DOUBLE
50117: EQUAL
50118: IFTRUE 50122
50120: GO 50140
50122: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
50123: LD_ADDR_VAR 0 3
50127: PUSH
50128: LD_INT 13
50130: PUSH
50131: LD_INT 14
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: ST_TO_ADDR
50138: GO 50623
50140: LD_INT 27
50142: DOUBLE
50143: EQUAL
50144: IFTRUE 50148
50146: GO 50166
50148: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
50149: LD_ADDR_VAR 0 3
50153: PUSH
50154: LD_INT 13
50156: PUSH
50157: LD_INT 14
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: ST_TO_ADDR
50164: GO 50623
50166: LD_EXP 53
50170: DOUBLE
50171: EQUAL
50172: IFTRUE 50176
50174: GO 50202
50176: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
50177: LD_ADDR_VAR 0 3
50181: PUSH
50182: LD_INT 11
50184: PUSH
50185: LD_INT 12
50187: PUSH
50188: LD_INT 13
50190: PUSH
50191: LD_INT 14
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: ST_TO_ADDR
50200: GO 50623
50202: LD_INT 28
50204: DOUBLE
50205: EQUAL
50206: IFTRUE 50210
50208: GO 50228
50210: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
50211: LD_ADDR_VAR 0 3
50215: PUSH
50216: LD_INT 13
50218: PUSH
50219: LD_INT 14
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: ST_TO_ADDR
50226: GO 50623
50228: LD_INT 29
50230: DOUBLE
50231: EQUAL
50232: IFTRUE 50236
50234: GO 50254
50236: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
50237: LD_ADDR_VAR 0 3
50241: PUSH
50242: LD_INT 13
50244: PUSH
50245: LD_INT 14
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: ST_TO_ADDR
50252: GO 50623
50254: LD_INT 31
50256: DOUBLE
50257: EQUAL
50258: IFTRUE 50262
50260: GO 50280
50262: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
50263: LD_ADDR_VAR 0 3
50267: PUSH
50268: LD_INT 13
50270: PUSH
50271: LD_INT 14
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: ST_TO_ADDR
50278: GO 50623
50280: LD_INT 26
50282: DOUBLE
50283: EQUAL
50284: IFTRUE 50288
50286: GO 50306
50288: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
50289: LD_ADDR_VAR 0 3
50293: PUSH
50294: LD_INT 13
50296: PUSH
50297: LD_INT 14
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: ST_TO_ADDR
50304: GO 50623
50306: LD_INT 42
50308: DOUBLE
50309: EQUAL
50310: IFTRUE 50314
50312: GO 50340
50314: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
50315: LD_ADDR_VAR 0 3
50319: PUSH
50320: LD_INT 21
50322: PUSH
50323: LD_INT 22
50325: PUSH
50326: LD_INT 23
50328: PUSH
50329: LD_INT 24
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: ST_TO_ADDR
50338: GO 50623
50340: LD_INT 43
50342: DOUBLE
50343: EQUAL
50344: IFTRUE 50348
50346: GO 50374
50348: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
50349: LD_ADDR_VAR 0 3
50353: PUSH
50354: LD_INT 21
50356: PUSH
50357: LD_INT 22
50359: PUSH
50360: LD_INT 23
50362: PUSH
50363: LD_INT 24
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: ST_TO_ADDR
50372: GO 50623
50374: LD_INT 44
50376: DOUBLE
50377: EQUAL
50378: IFTRUE 50382
50380: GO 50408
50382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
50383: LD_ADDR_VAR 0 3
50387: PUSH
50388: LD_INT 21
50390: PUSH
50391: LD_INT 22
50393: PUSH
50394: LD_INT 23
50396: PUSH
50397: LD_INT 24
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: ST_TO_ADDR
50406: GO 50623
50408: LD_INT 45
50410: DOUBLE
50411: EQUAL
50412: IFTRUE 50416
50414: GO 50442
50416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
50417: LD_ADDR_VAR 0 3
50421: PUSH
50422: LD_INT 21
50424: PUSH
50425: LD_INT 22
50427: PUSH
50428: LD_INT 23
50430: PUSH
50431: LD_INT 24
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: ST_TO_ADDR
50440: GO 50623
50442: LD_INT 49
50444: DOUBLE
50445: EQUAL
50446: IFTRUE 50450
50448: GO 50476
50450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
50451: LD_ADDR_VAR 0 3
50455: PUSH
50456: LD_INT 21
50458: PUSH
50459: LD_INT 22
50461: PUSH
50462: LD_INT 23
50464: PUSH
50465: LD_INT 24
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: ST_TO_ADDR
50474: GO 50623
50476: LD_INT 51
50478: DOUBLE
50479: EQUAL
50480: IFTRUE 50484
50482: GO 50510
50484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
50485: LD_ADDR_VAR 0 3
50489: PUSH
50490: LD_INT 21
50492: PUSH
50493: LD_INT 22
50495: PUSH
50496: LD_INT 23
50498: PUSH
50499: LD_INT 24
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: ST_TO_ADDR
50508: GO 50623
50510: LD_INT 52
50512: DOUBLE
50513: EQUAL
50514: IFTRUE 50518
50516: GO 50544
50518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
50519: LD_ADDR_VAR 0 3
50523: PUSH
50524: LD_INT 21
50526: PUSH
50527: LD_INT 22
50529: PUSH
50530: LD_INT 23
50532: PUSH
50533: LD_INT 24
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: ST_TO_ADDR
50542: GO 50623
50544: LD_INT 53
50546: DOUBLE
50547: EQUAL
50548: IFTRUE 50552
50550: GO 50570
50552: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
50553: LD_ADDR_VAR 0 3
50557: PUSH
50558: LD_INT 23
50560: PUSH
50561: LD_INT 24
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: ST_TO_ADDR
50568: GO 50623
50570: LD_INT 46
50572: DOUBLE
50573: EQUAL
50574: IFTRUE 50578
50576: GO 50596
50578: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
50579: LD_ADDR_VAR 0 3
50583: PUSH
50584: LD_INT 23
50586: PUSH
50587: LD_INT 24
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: ST_TO_ADDR
50594: GO 50623
50596: LD_INT 47
50598: DOUBLE
50599: EQUAL
50600: IFTRUE 50604
50602: GO 50622
50604: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
50605: LD_ADDR_VAR 0 3
50609: PUSH
50610: LD_INT 23
50612: PUSH
50613: LD_INT 24
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: ST_TO_ADDR
50620: GO 50623
50622: POP
// result := ( chassis in result ) ;
50623: LD_ADDR_VAR 0 3
50627: PUSH
50628: LD_VAR 0 1
50632: PUSH
50633: LD_VAR 0 3
50637: IN
50638: ST_TO_ADDR
// end ;
50639: LD_VAR 0 3
50643: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
50644: LD_INT 0
50646: PPUSH
50647: PPUSH
50648: PPUSH
50649: PPUSH
50650: PPUSH
50651: PPUSH
50652: PPUSH
// result := array ;
50653: LD_ADDR_VAR 0 5
50657: PUSH
50658: LD_VAR 0 1
50662: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
50663: LD_VAR 0 1
50667: NOT
50668: PUSH
50669: LD_VAR 0 2
50673: NOT
50674: OR
50675: PUSH
50676: LD_VAR 0 3
50680: NOT
50681: OR
50682: PUSH
50683: LD_VAR 0 2
50687: PUSH
50688: LD_VAR 0 1
50692: GREATER
50693: OR
50694: PUSH
50695: LD_VAR 0 3
50699: PUSH
50700: LD_VAR 0 1
50704: GREATER
50705: OR
50706: IFFALSE 50710
// exit ;
50708: GO 51006
// if direction then
50710: LD_VAR 0 4
50714: IFFALSE 50778
// begin d := 1 ;
50716: LD_ADDR_VAR 0 9
50720: PUSH
50721: LD_INT 1
50723: ST_TO_ADDR
// if i_from > i_to then
50724: LD_VAR 0 2
50728: PUSH
50729: LD_VAR 0 3
50733: GREATER
50734: IFFALSE 50760
// length := ( array - i_from ) + i_to else
50736: LD_ADDR_VAR 0 11
50740: PUSH
50741: LD_VAR 0 1
50745: PUSH
50746: LD_VAR 0 2
50750: MINUS
50751: PUSH
50752: LD_VAR 0 3
50756: PLUS
50757: ST_TO_ADDR
50758: GO 50776
// length := i_to - i_from ;
50760: LD_ADDR_VAR 0 11
50764: PUSH
50765: LD_VAR 0 3
50769: PUSH
50770: LD_VAR 0 2
50774: MINUS
50775: ST_TO_ADDR
// end else
50776: GO 50839
// begin d := - 1 ;
50778: LD_ADDR_VAR 0 9
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: ST_TO_ADDR
// if i_from > i_to then
50787: LD_VAR 0 2
50791: PUSH
50792: LD_VAR 0 3
50796: GREATER
50797: IFFALSE 50817
// length := i_from - i_to else
50799: LD_ADDR_VAR 0 11
50803: PUSH
50804: LD_VAR 0 2
50808: PUSH
50809: LD_VAR 0 3
50813: MINUS
50814: ST_TO_ADDR
50815: GO 50839
// length := ( array - i_to ) + i_from ;
50817: LD_ADDR_VAR 0 11
50821: PUSH
50822: LD_VAR 0 1
50826: PUSH
50827: LD_VAR 0 3
50831: MINUS
50832: PUSH
50833: LD_VAR 0 2
50837: PLUS
50838: ST_TO_ADDR
// end ; if not length then
50839: LD_VAR 0 11
50843: NOT
50844: IFFALSE 50848
// exit ;
50846: GO 51006
// tmp := array ;
50848: LD_ADDR_VAR 0 10
50852: PUSH
50853: LD_VAR 0 1
50857: ST_TO_ADDR
// for i = 1 to length do
50858: LD_ADDR_VAR 0 6
50862: PUSH
50863: DOUBLE
50864: LD_INT 1
50866: DEC
50867: ST_TO_ADDR
50868: LD_VAR 0 11
50872: PUSH
50873: FOR_TO
50874: IFFALSE 50994
// begin for j = 1 to array do
50876: LD_ADDR_VAR 0 7
50880: PUSH
50881: DOUBLE
50882: LD_INT 1
50884: DEC
50885: ST_TO_ADDR
50886: LD_VAR 0 1
50890: PUSH
50891: FOR_TO
50892: IFFALSE 50980
// begin k := j + d ;
50894: LD_ADDR_VAR 0 8
50898: PUSH
50899: LD_VAR 0 7
50903: PUSH
50904: LD_VAR 0 9
50908: PLUS
50909: ST_TO_ADDR
// if k > array then
50910: LD_VAR 0 8
50914: PUSH
50915: LD_VAR 0 1
50919: GREATER
50920: IFFALSE 50930
// k := 1 ;
50922: LD_ADDR_VAR 0 8
50926: PUSH
50927: LD_INT 1
50929: ST_TO_ADDR
// if not k then
50930: LD_VAR 0 8
50934: NOT
50935: IFFALSE 50947
// k := array ;
50937: LD_ADDR_VAR 0 8
50941: PUSH
50942: LD_VAR 0 1
50946: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
50947: LD_ADDR_VAR 0 10
50951: PUSH
50952: LD_VAR 0 10
50956: PPUSH
50957: LD_VAR 0 8
50961: PPUSH
50962: LD_VAR 0 1
50966: PUSH
50967: LD_VAR 0 7
50971: ARRAY
50972: PPUSH
50973: CALL_OW 1
50977: ST_TO_ADDR
// end ;
50978: GO 50891
50980: POP
50981: POP
// array := tmp ;
50982: LD_ADDR_VAR 0 1
50986: PUSH
50987: LD_VAR 0 10
50991: ST_TO_ADDR
// end ;
50992: GO 50873
50994: POP
50995: POP
// result := array ;
50996: LD_ADDR_VAR 0 5
51000: PUSH
51001: LD_VAR 0 1
51005: ST_TO_ADDR
// end ;
51006: LD_VAR 0 5
51010: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
51011: LD_INT 0
51013: PPUSH
51014: PPUSH
// result := 0 ;
51015: LD_ADDR_VAR 0 3
51019: PUSH
51020: LD_INT 0
51022: ST_TO_ADDR
// if not array or not value in array then
51023: LD_VAR 0 1
51027: NOT
51028: PUSH
51029: LD_VAR 0 2
51033: PUSH
51034: LD_VAR 0 1
51038: IN
51039: NOT
51040: OR
51041: IFFALSE 51045
// exit ;
51043: GO 51099
// for i = 1 to array do
51045: LD_ADDR_VAR 0 4
51049: PUSH
51050: DOUBLE
51051: LD_INT 1
51053: DEC
51054: ST_TO_ADDR
51055: LD_VAR 0 1
51059: PUSH
51060: FOR_TO
51061: IFFALSE 51097
// if value = array [ i ] then
51063: LD_VAR 0 2
51067: PUSH
51068: LD_VAR 0 1
51072: PUSH
51073: LD_VAR 0 4
51077: ARRAY
51078: EQUAL
51079: IFFALSE 51095
// begin result := i ;
51081: LD_ADDR_VAR 0 3
51085: PUSH
51086: LD_VAR 0 4
51090: ST_TO_ADDR
// exit ;
51091: POP
51092: POP
51093: GO 51099
// end ;
51095: GO 51060
51097: POP
51098: POP
// end ;
51099: LD_VAR 0 3
51103: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
51104: LD_INT 0
51106: PPUSH
// vc_chassis := chassis ;
51107: LD_ADDR_OWVAR 37
51111: PUSH
51112: LD_VAR 0 1
51116: ST_TO_ADDR
// vc_engine := engine ;
51117: LD_ADDR_OWVAR 39
51121: PUSH
51122: LD_VAR 0 2
51126: ST_TO_ADDR
// vc_control := control ;
51127: LD_ADDR_OWVAR 38
51131: PUSH
51132: LD_VAR 0 3
51136: ST_TO_ADDR
// vc_weapon := weapon ;
51137: LD_ADDR_OWVAR 40
51141: PUSH
51142: LD_VAR 0 4
51146: ST_TO_ADDR
// vc_fuel_battery := fuel ;
51147: LD_ADDR_OWVAR 41
51151: PUSH
51152: LD_VAR 0 5
51156: ST_TO_ADDR
// end ;
51157: LD_VAR 0 6
51161: RET
// export function WantPlant ( unit ) ; var task ; begin
51162: LD_INT 0
51164: PPUSH
51165: PPUSH
// result := false ;
51166: LD_ADDR_VAR 0 2
51170: PUSH
51171: LD_INT 0
51173: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
51174: LD_ADDR_VAR 0 3
51178: PUSH
51179: LD_VAR 0 1
51183: PPUSH
51184: CALL_OW 437
51188: ST_TO_ADDR
// if task then
51189: LD_VAR 0 3
51193: IFFALSE 51221
// if task [ 1 ] [ 1 ] = p then
51195: LD_VAR 0 3
51199: PUSH
51200: LD_INT 1
51202: ARRAY
51203: PUSH
51204: LD_INT 1
51206: ARRAY
51207: PUSH
51208: LD_STRING p
51210: EQUAL
51211: IFFALSE 51221
// result := true ;
51213: LD_ADDR_VAR 0 2
51217: PUSH
51218: LD_INT 1
51220: ST_TO_ADDR
// end ;
51221: LD_VAR 0 2
51225: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
51226: LD_INT 0
51228: PPUSH
51229: PPUSH
51230: PPUSH
51231: PPUSH
// if pos < 1 then
51232: LD_VAR 0 2
51236: PUSH
51237: LD_INT 1
51239: LESS
51240: IFFALSE 51244
// exit ;
51242: GO 51547
// if pos = 1 then
51244: LD_VAR 0 2
51248: PUSH
51249: LD_INT 1
51251: EQUAL
51252: IFFALSE 51285
// result := Replace ( arr , pos [ 1 ] , value ) else
51254: LD_ADDR_VAR 0 4
51258: PUSH
51259: LD_VAR 0 1
51263: PPUSH
51264: LD_VAR 0 2
51268: PUSH
51269: LD_INT 1
51271: ARRAY
51272: PPUSH
51273: LD_VAR 0 3
51277: PPUSH
51278: CALL_OW 1
51282: ST_TO_ADDR
51283: GO 51547
// begin tmp := arr ;
51285: LD_ADDR_VAR 0 6
51289: PUSH
51290: LD_VAR 0 1
51294: ST_TO_ADDR
// s_arr := [ tmp ] ;
51295: LD_ADDR_VAR 0 7
51299: PUSH
51300: LD_VAR 0 6
51304: PUSH
51305: EMPTY
51306: LIST
51307: ST_TO_ADDR
// for i = 1 to pos - 1 do
51308: LD_ADDR_VAR 0 5
51312: PUSH
51313: DOUBLE
51314: LD_INT 1
51316: DEC
51317: ST_TO_ADDR
51318: LD_VAR 0 2
51322: PUSH
51323: LD_INT 1
51325: MINUS
51326: PUSH
51327: FOR_TO
51328: IFFALSE 51373
// begin tmp := tmp [ pos [ i ] ] ;
51330: LD_ADDR_VAR 0 6
51334: PUSH
51335: LD_VAR 0 6
51339: PUSH
51340: LD_VAR 0 2
51344: PUSH
51345: LD_VAR 0 5
51349: ARRAY
51350: ARRAY
51351: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
51352: LD_ADDR_VAR 0 7
51356: PUSH
51357: LD_VAR 0 7
51361: PUSH
51362: LD_VAR 0 6
51366: PUSH
51367: EMPTY
51368: LIST
51369: ADD
51370: ST_TO_ADDR
// end ;
51371: GO 51327
51373: POP
51374: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
51375: LD_ADDR_VAR 0 6
51379: PUSH
51380: LD_VAR 0 6
51384: PPUSH
51385: LD_VAR 0 2
51389: PUSH
51390: LD_VAR 0 2
51394: ARRAY
51395: PPUSH
51396: LD_VAR 0 3
51400: PPUSH
51401: CALL_OW 1
51405: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
51406: LD_ADDR_VAR 0 7
51410: PUSH
51411: LD_VAR 0 7
51415: PPUSH
51416: LD_VAR 0 7
51420: PPUSH
51421: LD_VAR 0 6
51425: PPUSH
51426: CALL_OW 1
51430: ST_TO_ADDR
// for i = s_arr downto 2 do
51431: LD_ADDR_VAR 0 5
51435: PUSH
51436: DOUBLE
51437: LD_VAR 0 7
51441: INC
51442: ST_TO_ADDR
51443: LD_INT 2
51445: PUSH
51446: FOR_DOWNTO
51447: IFFALSE 51531
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
51449: LD_ADDR_VAR 0 6
51453: PUSH
51454: LD_VAR 0 7
51458: PUSH
51459: LD_VAR 0 5
51463: PUSH
51464: LD_INT 1
51466: MINUS
51467: ARRAY
51468: PPUSH
51469: LD_VAR 0 2
51473: PUSH
51474: LD_VAR 0 5
51478: PUSH
51479: LD_INT 1
51481: MINUS
51482: ARRAY
51483: PPUSH
51484: LD_VAR 0 7
51488: PUSH
51489: LD_VAR 0 5
51493: ARRAY
51494: PPUSH
51495: CALL_OW 1
51499: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
51500: LD_ADDR_VAR 0 7
51504: PUSH
51505: LD_VAR 0 7
51509: PPUSH
51510: LD_VAR 0 5
51514: PUSH
51515: LD_INT 1
51517: MINUS
51518: PPUSH
51519: LD_VAR 0 6
51523: PPUSH
51524: CALL_OW 1
51528: ST_TO_ADDR
// end ;
51529: GO 51446
51531: POP
51532: POP
// result := s_arr [ 1 ] ;
51533: LD_ADDR_VAR 0 4
51537: PUSH
51538: LD_VAR 0 7
51542: PUSH
51543: LD_INT 1
51545: ARRAY
51546: ST_TO_ADDR
// end ; end ;
51547: LD_VAR 0 4
51551: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
51552: LD_INT 0
51554: PPUSH
51555: PPUSH
// if not list then
51556: LD_VAR 0 1
51560: NOT
51561: IFFALSE 51565
// exit ;
51563: GO 51656
// i := list [ pos1 ] ;
51565: LD_ADDR_VAR 0 5
51569: PUSH
51570: LD_VAR 0 1
51574: PUSH
51575: LD_VAR 0 2
51579: ARRAY
51580: ST_TO_ADDR
// if not i then
51581: LD_VAR 0 5
51585: NOT
51586: IFFALSE 51590
// exit ;
51588: GO 51656
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
51590: LD_ADDR_VAR 0 1
51594: PUSH
51595: LD_VAR 0 1
51599: PPUSH
51600: LD_VAR 0 2
51604: PPUSH
51605: LD_VAR 0 1
51609: PUSH
51610: LD_VAR 0 3
51614: ARRAY
51615: PPUSH
51616: CALL_OW 1
51620: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
51621: LD_ADDR_VAR 0 1
51625: PUSH
51626: LD_VAR 0 1
51630: PPUSH
51631: LD_VAR 0 3
51635: PPUSH
51636: LD_VAR 0 5
51640: PPUSH
51641: CALL_OW 1
51645: ST_TO_ADDR
// result := list ;
51646: LD_ADDR_VAR 0 4
51650: PUSH
51651: LD_VAR 0 1
51655: ST_TO_ADDR
// end ;
51656: LD_VAR 0 4
51660: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
51661: LD_INT 0
51663: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
51664: LD_ADDR_VAR 0 5
51668: PUSH
51669: LD_VAR 0 1
51673: PPUSH
51674: CALL_OW 250
51678: PPUSH
51679: LD_VAR 0 1
51683: PPUSH
51684: CALL_OW 251
51688: PPUSH
51689: LD_VAR 0 2
51693: PPUSH
51694: LD_VAR 0 3
51698: PPUSH
51699: LD_VAR 0 4
51703: PPUSH
51704: CALL 51714 0 5
51708: ST_TO_ADDR
// end ;
51709: LD_VAR 0 5
51713: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
51714: LD_INT 0
51716: PPUSH
51717: PPUSH
51718: PPUSH
51719: PPUSH
// if not list then
51720: LD_VAR 0 3
51724: NOT
51725: IFFALSE 51729
// exit ;
51727: GO 52117
// result := [ ] ;
51729: LD_ADDR_VAR 0 6
51733: PUSH
51734: EMPTY
51735: ST_TO_ADDR
// for i in list do
51736: LD_ADDR_VAR 0 7
51740: PUSH
51741: LD_VAR 0 3
51745: PUSH
51746: FOR_IN
51747: IFFALSE 51949
// begin tmp := GetDistUnitXY ( i , x , y ) ;
51749: LD_ADDR_VAR 0 9
51753: PUSH
51754: LD_VAR 0 7
51758: PPUSH
51759: LD_VAR 0 1
51763: PPUSH
51764: LD_VAR 0 2
51768: PPUSH
51769: CALL_OW 297
51773: ST_TO_ADDR
// if not result then
51774: LD_VAR 0 6
51778: NOT
51779: IFFALSE 51805
// result := [ [ i , tmp ] ] else
51781: LD_ADDR_VAR 0 6
51785: PUSH
51786: LD_VAR 0 7
51790: PUSH
51791: LD_VAR 0 9
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: EMPTY
51801: LIST
51802: ST_TO_ADDR
51803: GO 51947
// begin if result [ result ] [ 2 ] < tmp then
51805: LD_VAR 0 6
51809: PUSH
51810: LD_VAR 0 6
51814: ARRAY
51815: PUSH
51816: LD_INT 2
51818: ARRAY
51819: PUSH
51820: LD_VAR 0 9
51824: LESS
51825: IFFALSE 51867
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
51827: LD_ADDR_VAR 0 6
51831: PUSH
51832: LD_VAR 0 6
51836: PPUSH
51837: LD_VAR 0 6
51841: PUSH
51842: LD_INT 1
51844: PLUS
51845: PPUSH
51846: LD_VAR 0 7
51850: PUSH
51851: LD_VAR 0 9
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PPUSH
51860: CALL_OW 2
51864: ST_TO_ADDR
51865: GO 51947
// for j = 1 to result do
51867: LD_ADDR_VAR 0 8
51871: PUSH
51872: DOUBLE
51873: LD_INT 1
51875: DEC
51876: ST_TO_ADDR
51877: LD_VAR 0 6
51881: PUSH
51882: FOR_TO
51883: IFFALSE 51945
// begin if tmp < result [ j ] [ 2 ] then
51885: LD_VAR 0 9
51889: PUSH
51890: LD_VAR 0 6
51894: PUSH
51895: LD_VAR 0 8
51899: ARRAY
51900: PUSH
51901: LD_INT 2
51903: ARRAY
51904: LESS
51905: IFFALSE 51943
// begin result := Insert ( result , j , [ i , tmp ] ) ;
51907: LD_ADDR_VAR 0 6
51911: PUSH
51912: LD_VAR 0 6
51916: PPUSH
51917: LD_VAR 0 8
51921: PPUSH
51922: LD_VAR 0 7
51926: PUSH
51927: LD_VAR 0 9
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PPUSH
51936: CALL_OW 2
51940: ST_TO_ADDR
// break ;
51941: GO 51945
// end ; end ;
51943: GO 51882
51945: POP
51946: POP
// end ; end ;
51947: GO 51746
51949: POP
51950: POP
// if result and not asc then
51951: LD_VAR 0 6
51955: PUSH
51956: LD_VAR 0 4
51960: NOT
51961: AND
51962: IFFALSE 52037
// begin tmp := result ;
51964: LD_ADDR_VAR 0 9
51968: PUSH
51969: LD_VAR 0 6
51973: ST_TO_ADDR
// for i = tmp downto 1 do
51974: LD_ADDR_VAR 0 7
51978: PUSH
51979: DOUBLE
51980: LD_VAR 0 9
51984: INC
51985: ST_TO_ADDR
51986: LD_INT 1
51988: PUSH
51989: FOR_DOWNTO
51990: IFFALSE 52035
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
51992: LD_ADDR_VAR 0 6
51996: PUSH
51997: LD_VAR 0 6
52001: PPUSH
52002: LD_VAR 0 9
52006: PUSH
52007: LD_VAR 0 7
52011: MINUS
52012: PUSH
52013: LD_INT 1
52015: PLUS
52016: PPUSH
52017: LD_VAR 0 9
52021: PUSH
52022: LD_VAR 0 7
52026: ARRAY
52027: PPUSH
52028: CALL_OW 1
52032: ST_TO_ADDR
52033: GO 51989
52035: POP
52036: POP
// end ; tmp := [ ] ;
52037: LD_ADDR_VAR 0 9
52041: PUSH
52042: EMPTY
52043: ST_TO_ADDR
// if mode then
52044: LD_VAR 0 5
52048: IFFALSE 52117
// begin for i = 1 to result do
52050: LD_ADDR_VAR 0 7
52054: PUSH
52055: DOUBLE
52056: LD_INT 1
52058: DEC
52059: ST_TO_ADDR
52060: LD_VAR 0 6
52064: PUSH
52065: FOR_TO
52066: IFFALSE 52105
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
52068: LD_ADDR_VAR 0 9
52072: PUSH
52073: LD_VAR 0 9
52077: PPUSH
52078: LD_VAR 0 7
52082: PPUSH
52083: LD_VAR 0 6
52087: PUSH
52088: LD_VAR 0 7
52092: ARRAY
52093: PUSH
52094: LD_INT 1
52096: ARRAY
52097: PPUSH
52098: CALL_OW 1
52102: ST_TO_ADDR
52103: GO 52065
52105: POP
52106: POP
// result := tmp ;
52107: LD_ADDR_VAR 0 6
52111: PUSH
52112: LD_VAR 0 9
52116: ST_TO_ADDR
// end ; end ;
52117: LD_VAR 0 6
52121: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
52122: LD_INT 0
52124: PPUSH
52125: PPUSH
52126: PPUSH
52127: PPUSH
52128: PPUSH
52129: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
52130: LD_ADDR_VAR 0 5
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: EMPTY
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: ST_TO_ADDR
// if not x or not y then
52152: LD_VAR 0 2
52156: NOT
52157: PUSH
52158: LD_VAR 0 3
52162: NOT
52163: OR
52164: IFFALSE 52168
// exit ;
52166: GO 53820
// if not range then
52168: LD_VAR 0 4
52172: NOT
52173: IFFALSE 52183
// range := 10 ;
52175: LD_ADDR_VAR 0 4
52179: PUSH
52180: LD_INT 10
52182: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52183: LD_ADDR_VAR 0 8
52187: PUSH
52188: LD_INT 81
52190: PUSH
52191: LD_VAR 0 1
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 92
52202: PUSH
52203: LD_VAR 0 2
52207: PUSH
52208: LD_VAR 0 3
52212: PUSH
52213: LD_VAR 0 4
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 3
52226: PUSH
52227: LD_INT 21
52229: PUSH
52230: LD_INT 3
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: LIST
52245: PPUSH
52246: CALL_OW 69
52250: ST_TO_ADDR
// if not tmp then
52251: LD_VAR 0 8
52255: NOT
52256: IFFALSE 52260
// exit ;
52258: GO 53820
// for i in tmp do
52260: LD_ADDR_VAR 0 6
52264: PUSH
52265: LD_VAR 0 8
52269: PUSH
52270: FOR_IN
52271: IFFALSE 53795
// begin points := [ 0 , 0 , 0 ] ;
52273: LD_ADDR_VAR 0 9
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: LIST
52291: ST_TO_ADDR
// bpoints := 1 ;
52292: LD_ADDR_VAR 0 10
52296: PUSH
52297: LD_INT 1
52299: ST_TO_ADDR
// case GetType ( i ) of unit_human :
52300: LD_VAR 0 6
52304: PPUSH
52305: CALL_OW 247
52309: PUSH
52310: LD_INT 1
52312: DOUBLE
52313: EQUAL
52314: IFTRUE 52318
52316: GO 52896
52318: POP
// begin if GetClass ( i ) = 1 then
52319: LD_VAR 0 6
52323: PPUSH
52324: CALL_OW 257
52328: PUSH
52329: LD_INT 1
52331: EQUAL
52332: IFFALSE 52353
// points := [ 10 , 5 , 3 ] ;
52334: LD_ADDR_VAR 0 9
52338: PUSH
52339: LD_INT 10
52341: PUSH
52342: LD_INT 5
52344: PUSH
52345: LD_INT 3
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: LIST
52352: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
52353: LD_VAR 0 6
52357: PPUSH
52358: CALL_OW 257
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: LD_INT 3
52368: PUSH
52369: LD_INT 4
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: LIST
52376: IN
52377: IFFALSE 52398
// points := [ 3 , 2 , 1 ] ;
52379: LD_ADDR_VAR 0 9
52383: PUSH
52384: LD_INT 3
52386: PUSH
52387: LD_INT 2
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: LIST
52397: ST_TO_ADDR
// if GetClass ( i ) = 5 then
52398: LD_VAR 0 6
52402: PPUSH
52403: CALL_OW 257
52407: PUSH
52408: LD_INT 5
52410: EQUAL
52411: IFFALSE 52432
// points := [ 130 , 5 , 2 ] ;
52413: LD_ADDR_VAR 0 9
52417: PUSH
52418: LD_INT 130
52420: PUSH
52421: LD_INT 5
52423: PUSH
52424: LD_INT 2
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: LIST
52431: ST_TO_ADDR
// if GetClass ( i ) = 8 then
52432: LD_VAR 0 6
52436: PPUSH
52437: CALL_OW 257
52441: PUSH
52442: LD_INT 8
52444: EQUAL
52445: IFFALSE 52466
// points := [ 35 , 35 , 30 ] ;
52447: LD_ADDR_VAR 0 9
52451: PUSH
52452: LD_INT 35
52454: PUSH
52455: LD_INT 35
52457: PUSH
52458: LD_INT 30
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: LIST
52465: ST_TO_ADDR
// if GetClass ( i ) = 9 then
52466: LD_VAR 0 6
52470: PPUSH
52471: CALL_OW 257
52475: PUSH
52476: LD_INT 9
52478: EQUAL
52479: IFFALSE 52500
// points := [ 20 , 55 , 40 ] ;
52481: LD_ADDR_VAR 0 9
52485: PUSH
52486: LD_INT 20
52488: PUSH
52489: LD_INT 55
52491: PUSH
52492: LD_INT 40
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: LIST
52499: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
52500: LD_VAR 0 6
52504: PPUSH
52505: CALL_OW 257
52509: PUSH
52510: LD_INT 12
52512: PUSH
52513: LD_INT 16
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: IN
52520: IFFALSE 52541
// points := [ 5 , 3 , 2 ] ;
52522: LD_ADDR_VAR 0 9
52526: PUSH
52527: LD_INT 5
52529: PUSH
52530: LD_INT 3
52532: PUSH
52533: LD_INT 2
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: LIST
52540: ST_TO_ADDR
// if GetClass ( i ) = 17 then
52541: LD_VAR 0 6
52545: PPUSH
52546: CALL_OW 257
52550: PUSH
52551: LD_INT 17
52553: EQUAL
52554: IFFALSE 52575
// points := [ 100 , 50 , 75 ] ;
52556: LD_ADDR_VAR 0 9
52560: PUSH
52561: LD_INT 100
52563: PUSH
52564: LD_INT 50
52566: PUSH
52567: LD_INT 75
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: LIST
52574: ST_TO_ADDR
// if GetClass ( i ) = 15 then
52575: LD_VAR 0 6
52579: PPUSH
52580: CALL_OW 257
52584: PUSH
52585: LD_INT 15
52587: EQUAL
52588: IFFALSE 52609
// points := [ 10 , 5 , 3 ] ;
52590: LD_ADDR_VAR 0 9
52594: PUSH
52595: LD_INT 10
52597: PUSH
52598: LD_INT 5
52600: PUSH
52601: LD_INT 3
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: LIST
52608: ST_TO_ADDR
// if GetClass ( i ) = 14 then
52609: LD_VAR 0 6
52613: PPUSH
52614: CALL_OW 257
52618: PUSH
52619: LD_INT 14
52621: EQUAL
52622: IFFALSE 52643
// points := [ 10 , 0 , 0 ] ;
52624: LD_ADDR_VAR 0 9
52628: PUSH
52629: LD_INT 10
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: LIST
52642: ST_TO_ADDR
// if GetClass ( i ) = 11 then
52643: LD_VAR 0 6
52647: PPUSH
52648: CALL_OW 257
52652: PUSH
52653: LD_INT 11
52655: EQUAL
52656: IFFALSE 52677
// points := [ 30 , 10 , 5 ] ;
52658: LD_ADDR_VAR 0 9
52662: PUSH
52663: LD_INT 30
52665: PUSH
52666: LD_INT 10
52668: PUSH
52669: LD_INT 5
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: LIST
52676: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
52677: LD_VAR 0 1
52681: PPUSH
52682: LD_INT 5
52684: PPUSH
52685: CALL_OW 321
52689: PUSH
52690: LD_INT 2
52692: EQUAL
52693: IFFALSE 52710
// bpoints := bpoints * 1.8 ;
52695: LD_ADDR_VAR 0 10
52699: PUSH
52700: LD_VAR 0 10
52704: PUSH
52705: LD_REAL  1.80000000000000E+0000
52708: MUL
52709: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
52710: LD_VAR 0 6
52714: PPUSH
52715: CALL_OW 257
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: LD_INT 2
52725: PUSH
52726: LD_INT 3
52728: PUSH
52729: LD_INT 4
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: IN
52738: PUSH
52739: LD_VAR 0 1
52743: PPUSH
52744: LD_INT 51
52746: PPUSH
52747: CALL_OW 321
52751: PUSH
52752: LD_INT 2
52754: EQUAL
52755: AND
52756: IFFALSE 52773
// bpoints := bpoints * 1.2 ;
52758: LD_ADDR_VAR 0 10
52762: PUSH
52763: LD_VAR 0 10
52767: PUSH
52768: LD_REAL  1.20000000000000E+0000
52771: MUL
52772: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
52773: LD_VAR 0 6
52777: PPUSH
52778: CALL_OW 257
52782: PUSH
52783: LD_INT 5
52785: PUSH
52786: LD_INT 7
52788: PUSH
52789: LD_INT 9
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: LIST
52796: IN
52797: PUSH
52798: LD_VAR 0 1
52802: PPUSH
52803: LD_INT 52
52805: PPUSH
52806: CALL_OW 321
52810: PUSH
52811: LD_INT 2
52813: EQUAL
52814: AND
52815: IFFALSE 52832
// bpoints := bpoints * 1.5 ;
52817: LD_ADDR_VAR 0 10
52821: PUSH
52822: LD_VAR 0 10
52826: PUSH
52827: LD_REAL  1.50000000000000E+0000
52830: MUL
52831: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
52832: LD_VAR 0 1
52836: PPUSH
52837: LD_INT 66
52839: PPUSH
52840: CALL_OW 321
52844: PUSH
52845: LD_INT 2
52847: EQUAL
52848: IFFALSE 52865
// bpoints := bpoints * 1.1 ;
52850: LD_ADDR_VAR 0 10
52854: PUSH
52855: LD_VAR 0 10
52859: PUSH
52860: LD_REAL  1.10000000000000E+0000
52863: MUL
52864: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
52865: LD_ADDR_VAR 0 10
52869: PUSH
52870: LD_VAR 0 10
52874: PUSH
52875: LD_VAR 0 6
52879: PPUSH
52880: LD_INT 1
52882: PPUSH
52883: CALL_OW 259
52887: PUSH
52888: LD_REAL  1.15000000000000E+0000
52891: MUL
52892: MUL
52893: ST_TO_ADDR
// end ; unit_vehicle :
52894: GO 53724
52896: LD_INT 2
52898: DOUBLE
52899: EQUAL
52900: IFTRUE 52904
52902: GO 53712
52904: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
52905: LD_VAR 0 6
52909: PPUSH
52910: CALL_OW 264
52914: PUSH
52915: LD_INT 2
52917: PUSH
52918: LD_INT 42
52920: PUSH
52921: LD_INT 24
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: LIST
52928: IN
52929: IFFALSE 52950
// points := [ 25 , 5 , 3 ] ;
52931: LD_ADDR_VAR 0 9
52935: PUSH
52936: LD_INT 25
52938: PUSH
52939: LD_INT 5
52941: PUSH
52942: LD_INT 3
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: LIST
52949: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
52950: LD_VAR 0 6
52954: PPUSH
52955: CALL_OW 264
52959: PUSH
52960: LD_INT 4
52962: PUSH
52963: LD_INT 43
52965: PUSH
52966: LD_INT 25
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: LIST
52973: IN
52974: IFFALSE 52995
// points := [ 40 , 15 , 5 ] ;
52976: LD_ADDR_VAR 0 9
52980: PUSH
52981: LD_INT 40
52983: PUSH
52984: LD_INT 15
52986: PUSH
52987: LD_INT 5
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: LIST
52994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
52995: LD_VAR 0 6
52999: PPUSH
53000: CALL_OW 264
53004: PUSH
53005: LD_INT 3
53007: PUSH
53008: LD_INT 23
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: IN
53015: IFFALSE 53036
// points := [ 7 , 25 , 8 ] ;
53017: LD_ADDR_VAR 0 9
53021: PUSH
53022: LD_INT 7
53024: PUSH
53025: LD_INT 25
53027: PUSH
53028: LD_INT 8
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: LIST
53035: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
53036: LD_VAR 0 6
53040: PPUSH
53041: CALL_OW 264
53045: PUSH
53046: LD_INT 5
53048: PUSH
53049: LD_INT 27
53051: PUSH
53052: LD_INT 44
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: LIST
53059: IN
53060: IFFALSE 53081
// points := [ 14 , 50 , 16 ] ;
53062: LD_ADDR_VAR 0 9
53066: PUSH
53067: LD_INT 14
53069: PUSH
53070: LD_INT 50
53072: PUSH
53073: LD_INT 16
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: LIST
53080: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
53081: LD_VAR 0 6
53085: PPUSH
53086: CALL_OW 264
53090: PUSH
53091: LD_INT 6
53093: PUSH
53094: LD_INT 46
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: IN
53101: IFFALSE 53122
// points := [ 32 , 120 , 70 ] ;
53103: LD_ADDR_VAR 0 9
53107: PUSH
53108: LD_INT 32
53110: PUSH
53111: LD_INT 120
53113: PUSH
53114: LD_INT 70
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: LIST
53121: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
53122: LD_VAR 0 6
53126: PPUSH
53127: CALL_OW 264
53131: PUSH
53132: LD_INT 7
53134: PUSH
53135: LD_INT 28
53137: PUSH
53138: LD_INT 45
53140: PUSH
53141: LD_EXP 53
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: IN
53152: IFFALSE 53173
// points := [ 35 , 20 , 45 ] ;
53154: LD_ADDR_VAR 0 9
53158: PUSH
53159: LD_INT 35
53161: PUSH
53162: LD_INT 20
53164: PUSH
53165: LD_INT 45
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
53173: LD_VAR 0 6
53177: PPUSH
53178: CALL_OW 264
53182: PUSH
53183: LD_INT 47
53185: PUSH
53186: EMPTY
53187: LIST
53188: IN
53189: IFFALSE 53210
// points := [ 67 , 45 , 75 ] ;
53191: LD_ADDR_VAR 0 9
53195: PUSH
53196: LD_INT 67
53198: PUSH
53199: LD_INT 45
53201: PUSH
53202: LD_INT 75
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: LIST
53209: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
53210: LD_VAR 0 6
53214: PPUSH
53215: CALL_OW 264
53219: PUSH
53220: LD_INT 26
53222: PUSH
53223: EMPTY
53224: LIST
53225: IN
53226: IFFALSE 53247
// points := [ 120 , 30 , 80 ] ;
53228: LD_ADDR_VAR 0 9
53232: PUSH
53233: LD_INT 120
53235: PUSH
53236: LD_INT 30
53238: PUSH
53239: LD_INT 80
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: LIST
53246: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
53247: LD_VAR 0 6
53251: PPUSH
53252: CALL_OW 264
53256: PUSH
53257: LD_INT 22
53259: PUSH
53260: EMPTY
53261: LIST
53262: IN
53263: IFFALSE 53284
// points := [ 40 , 1 , 1 ] ;
53265: LD_ADDR_VAR 0 9
53269: PUSH
53270: LD_INT 40
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: LIST
53283: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
53284: LD_VAR 0 6
53288: PPUSH
53289: CALL_OW 264
53293: PUSH
53294: LD_INT 29
53296: PUSH
53297: EMPTY
53298: LIST
53299: IN
53300: IFFALSE 53321
// points := [ 70 , 200 , 400 ] ;
53302: LD_ADDR_VAR 0 9
53306: PUSH
53307: LD_INT 70
53309: PUSH
53310: LD_INT 200
53312: PUSH
53313: LD_INT 400
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: LIST
53320: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
53321: LD_VAR 0 6
53325: PPUSH
53326: CALL_OW 264
53330: PUSH
53331: LD_INT 14
53333: PUSH
53334: LD_INT 53
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: IN
53341: IFFALSE 53362
// points := [ 40 , 10 , 20 ] ;
53343: LD_ADDR_VAR 0 9
53347: PUSH
53348: LD_INT 40
53350: PUSH
53351: LD_INT 10
53353: PUSH
53354: LD_INT 20
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: LIST
53361: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
53362: LD_VAR 0 6
53366: PPUSH
53367: CALL_OW 264
53371: PUSH
53372: LD_INT 9
53374: PUSH
53375: EMPTY
53376: LIST
53377: IN
53378: IFFALSE 53399
// points := [ 5 , 70 , 20 ] ;
53380: LD_ADDR_VAR 0 9
53384: PUSH
53385: LD_INT 5
53387: PUSH
53388: LD_INT 70
53390: PUSH
53391: LD_INT 20
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: LIST
53398: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
53399: LD_VAR 0 6
53403: PPUSH
53404: CALL_OW 264
53408: PUSH
53409: LD_INT 10
53411: PUSH
53412: EMPTY
53413: LIST
53414: IN
53415: IFFALSE 53436
// points := [ 35 , 110 , 70 ] ;
53417: LD_ADDR_VAR 0 9
53421: PUSH
53422: LD_INT 35
53424: PUSH
53425: LD_INT 110
53427: PUSH
53428: LD_INT 70
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: LIST
53435: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
53436: LD_VAR 0 6
53440: PPUSH
53441: CALL_OW 265
53445: PUSH
53446: LD_INT 25
53448: EQUAL
53449: IFFALSE 53470
// points := [ 80 , 65 , 100 ] ;
53451: LD_ADDR_VAR 0 9
53455: PUSH
53456: LD_INT 80
53458: PUSH
53459: LD_INT 65
53461: PUSH
53462: LD_INT 100
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: LIST
53469: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
53470: LD_VAR 0 6
53474: PPUSH
53475: CALL_OW 263
53479: PUSH
53480: LD_INT 1
53482: EQUAL
53483: IFFALSE 53518
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
53485: LD_ADDR_VAR 0 10
53489: PUSH
53490: LD_VAR 0 10
53494: PUSH
53495: LD_VAR 0 6
53499: PPUSH
53500: CALL_OW 311
53504: PPUSH
53505: LD_INT 3
53507: PPUSH
53508: CALL_OW 259
53512: PUSH
53513: LD_INT 4
53515: MUL
53516: MUL
53517: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
53518: LD_VAR 0 6
53522: PPUSH
53523: CALL_OW 263
53527: PUSH
53528: LD_INT 2
53530: EQUAL
53531: IFFALSE 53582
// begin j := IsControledBy ( i ) ;
53533: LD_ADDR_VAR 0 7
53537: PUSH
53538: LD_VAR 0 6
53542: PPUSH
53543: CALL_OW 312
53547: ST_TO_ADDR
// if j then
53548: LD_VAR 0 7
53552: IFFALSE 53582
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
53554: LD_ADDR_VAR 0 10
53558: PUSH
53559: LD_VAR 0 10
53563: PUSH
53564: LD_VAR 0 7
53568: PPUSH
53569: LD_INT 3
53571: PPUSH
53572: CALL_OW 259
53576: PUSH
53577: LD_INT 3
53579: MUL
53580: MUL
53581: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
53582: LD_VAR 0 6
53586: PPUSH
53587: CALL_OW 264
53591: PUSH
53592: LD_INT 5
53594: PUSH
53595: LD_INT 6
53597: PUSH
53598: LD_INT 46
53600: PUSH
53601: LD_INT 44
53603: PUSH
53604: LD_INT 47
53606: PUSH
53607: LD_INT 45
53609: PUSH
53610: LD_INT 28
53612: PUSH
53613: LD_INT 7
53615: PUSH
53616: LD_INT 27
53618: PUSH
53619: LD_INT 29
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: IN
53634: PUSH
53635: LD_VAR 0 1
53639: PPUSH
53640: LD_INT 52
53642: PPUSH
53643: CALL_OW 321
53647: PUSH
53648: LD_INT 2
53650: EQUAL
53651: AND
53652: IFFALSE 53669
// bpoints := bpoints * 1.2 ;
53654: LD_ADDR_VAR 0 10
53658: PUSH
53659: LD_VAR 0 10
53663: PUSH
53664: LD_REAL  1.20000000000000E+0000
53667: MUL
53668: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
53669: LD_VAR 0 6
53673: PPUSH
53674: CALL_OW 264
53678: PUSH
53679: LD_INT 6
53681: PUSH
53682: LD_INT 46
53684: PUSH
53685: LD_INT 47
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: LIST
53692: IN
53693: IFFALSE 53710
// bpoints := bpoints * 1.2 ;
53695: LD_ADDR_VAR 0 10
53699: PUSH
53700: LD_VAR 0 10
53704: PUSH
53705: LD_REAL  1.20000000000000E+0000
53708: MUL
53709: ST_TO_ADDR
// end ; unit_building :
53710: GO 53724
53712: LD_INT 3
53714: DOUBLE
53715: EQUAL
53716: IFTRUE 53720
53718: GO 53723
53720: POP
// ; end ;
53721: GO 53724
53723: POP
// for j = 1 to 3 do
53724: LD_ADDR_VAR 0 7
53728: PUSH
53729: DOUBLE
53730: LD_INT 1
53732: DEC
53733: ST_TO_ADDR
53734: LD_INT 3
53736: PUSH
53737: FOR_TO
53738: IFFALSE 53791
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
53740: LD_ADDR_VAR 0 5
53744: PUSH
53745: LD_VAR 0 5
53749: PPUSH
53750: LD_VAR 0 7
53754: PPUSH
53755: LD_VAR 0 5
53759: PUSH
53760: LD_VAR 0 7
53764: ARRAY
53765: PUSH
53766: LD_VAR 0 9
53770: PUSH
53771: LD_VAR 0 7
53775: ARRAY
53776: PUSH
53777: LD_VAR 0 10
53781: MUL
53782: PLUS
53783: PPUSH
53784: CALL_OW 1
53788: ST_TO_ADDR
53789: GO 53737
53791: POP
53792: POP
// end ;
53793: GO 52270
53795: POP
53796: POP
// result := Replace ( result , 4 , tmp ) ;
53797: LD_ADDR_VAR 0 5
53801: PUSH
53802: LD_VAR 0 5
53806: PPUSH
53807: LD_INT 4
53809: PPUSH
53810: LD_VAR 0 8
53814: PPUSH
53815: CALL_OW 1
53819: ST_TO_ADDR
// end ;
53820: LD_VAR 0 5
53824: RET
// export function DangerAtRange ( unit , range ) ; begin
53825: LD_INT 0
53827: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
53828: LD_ADDR_VAR 0 3
53832: PUSH
53833: LD_VAR 0 1
53837: PPUSH
53838: CALL_OW 255
53842: PPUSH
53843: LD_VAR 0 1
53847: PPUSH
53848: CALL_OW 250
53852: PPUSH
53853: LD_VAR 0 1
53857: PPUSH
53858: CALL_OW 251
53862: PPUSH
53863: LD_VAR 0 2
53867: PPUSH
53868: CALL 52122 0 4
53872: ST_TO_ADDR
// end ;
53873: LD_VAR 0 3
53877: RET
// export function DangerInArea ( side , area ) ; begin
53878: LD_INT 0
53880: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
53881: LD_ADDR_VAR 0 3
53885: PUSH
53886: LD_VAR 0 2
53890: PPUSH
53891: LD_INT 81
53893: PUSH
53894: LD_VAR 0 1
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PPUSH
53903: CALL_OW 70
53907: ST_TO_ADDR
// end ;
53908: LD_VAR 0 3
53912: RET
// export function IsExtension ( b ) ; begin
53913: LD_INT 0
53915: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
53916: LD_ADDR_VAR 0 2
53920: PUSH
53921: LD_VAR 0 1
53925: PUSH
53926: LD_INT 23
53928: PUSH
53929: LD_INT 20
53931: PUSH
53932: LD_INT 22
53934: PUSH
53935: LD_INT 17
53937: PUSH
53938: LD_INT 24
53940: PUSH
53941: LD_INT 21
53943: PUSH
53944: LD_INT 19
53946: PUSH
53947: LD_INT 16
53949: PUSH
53950: LD_INT 25
53952: PUSH
53953: LD_INT 18
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: IN
53968: ST_TO_ADDR
// end ;
53969: LD_VAR 0 2
53973: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
53974: LD_INT 0
53976: PPUSH
53977: PPUSH
53978: PPUSH
// result := [ ] ;
53979: LD_ADDR_VAR 0 4
53983: PUSH
53984: EMPTY
53985: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
53986: LD_ADDR_VAR 0 5
53990: PUSH
53991: LD_VAR 0 2
53995: PPUSH
53996: LD_INT 21
53998: PUSH
53999: LD_INT 3
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PPUSH
54006: CALL_OW 70
54010: ST_TO_ADDR
// if not tmp then
54011: LD_VAR 0 5
54015: NOT
54016: IFFALSE 54020
// exit ;
54018: GO 54084
// if checkLink then
54020: LD_VAR 0 3
54024: IFFALSE 54074
// begin for i in tmp do
54026: LD_ADDR_VAR 0 6
54030: PUSH
54031: LD_VAR 0 5
54035: PUSH
54036: FOR_IN
54037: IFFALSE 54072
// if GetBase ( i ) <> base then
54039: LD_VAR 0 6
54043: PPUSH
54044: CALL_OW 274
54048: PUSH
54049: LD_VAR 0 1
54053: NONEQUAL
54054: IFFALSE 54070
// ComLinkToBase ( base , i ) ;
54056: LD_VAR 0 1
54060: PPUSH
54061: LD_VAR 0 6
54065: PPUSH
54066: CALL_OW 169
54070: GO 54036
54072: POP
54073: POP
// end ; result := tmp ;
54074: LD_ADDR_VAR 0 4
54078: PUSH
54079: LD_VAR 0 5
54083: ST_TO_ADDR
// end ;
54084: LD_VAR 0 4
54088: RET
// export function ComComplete ( units , b ) ; var i ; begin
54089: LD_INT 0
54091: PPUSH
54092: PPUSH
// if not units then
54093: LD_VAR 0 1
54097: NOT
54098: IFFALSE 54102
// exit ;
54100: GO 54192
// for i in units do
54102: LD_ADDR_VAR 0 4
54106: PUSH
54107: LD_VAR 0 1
54111: PUSH
54112: FOR_IN
54113: IFFALSE 54190
// if BuildingStatus ( b ) = bs_build then
54115: LD_VAR 0 2
54119: PPUSH
54120: CALL_OW 461
54124: PUSH
54125: LD_INT 1
54127: EQUAL
54128: IFFALSE 54188
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
54130: LD_VAR 0 4
54134: PPUSH
54135: LD_STRING h
54137: PUSH
54138: LD_VAR 0 2
54142: PPUSH
54143: CALL_OW 250
54147: PUSH
54148: LD_VAR 0 2
54152: PPUSH
54153: CALL_OW 251
54157: PUSH
54158: LD_VAR 0 2
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: PUSH
54181: EMPTY
54182: LIST
54183: PPUSH
54184: CALL_OW 446
54188: GO 54112
54190: POP
54191: POP
// end ;
54192: LD_VAR 0 3
54196: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
54197: LD_INT 0
54199: PPUSH
54200: PPUSH
54201: PPUSH
54202: PPUSH
54203: PPUSH
54204: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
54205: LD_VAR 0 1
54209: NOT
54210: PUSH
54211: LD_VAR 0 1
54215: PPUSH
54216: CALL_OW 263
54220: PUSH
54221: LD_INT 2
54223: NONEQUAL
54224: OR
54225: IFFALSE 54229
// exit ;
54227: GO 54545
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
54229: LD_ADDR_VAR 0 6
54233: PUSH
54234: LD_INT 22
54236: PUSH
54237: LD_VAR 0 1
54241: PPUSH
54242: CALL_OW 255
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: LD_INT 30
54256: PUSH
54257: LD_INT 36
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 34
54266: PUSH
54267: LD_INT 31
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: LIST
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PPUSH
54283: CALL_OW 69
54287: ST_TO_ADDR
// if not tmp then
54288: LD_VAR 0 6
54292: NOT
54293: IFFALSE 54297
// exit ;
54295: GO 54545
// result := [ ] ;
54297: LD_ADDR_VAR 0 2
54301: PUSH
54302: EMPTY
54303: ST_TO_ADDR
// for i in tmp do
54304: LD_ADDR_VAR 0 3
54308: PUSH
54309: LD_VAR 0 6
54313: PUSH
54314: FOR_IN
54315: IFFALSE 54386
// begin t := UnitsInside ( i ) ;
54317: LD_ADDR_VAR 0 4
54321: PUSH
54322: LD_VAR 0 3
54326: PPUSH
54327: CALL_OW 313
54331: ST_TO_ADDR
// if t then
54332: LD_VAR 0 4
54336: IFFALSE 54384
// for j in t do
54338: LD_ADDR_VAR 0 7
54342: PUSH
54343: LD_VAR 0 4
54347: PUSH
54348: FOR_IN
54349: IFFALSE 54382
// result := Replace ( result , result + 1 , j ) ;
54351: LD_ADDR_VAR 0 2
54355: PUSH
54356: LD_VAR 0 2
54360: PPUSH
54361: LD_VAR 0 2
54365: PUSH
54366: LD_INT 1
54368: PLUS
54369: PPUSH
54370: LD_VAR 0 7
54374: PPUSH
54375: CALL_OW 1
54379: ST_TO_ADDR
54380: GO 54348
54382: POP
54383: POP
// end ;
54384: GO 54314
54386: POP
54387: POP
// if not result then
54388: LD_VAR 0 2
54392: NOT
54393: IFFALSE 54397
// exit ;
54395: GO 54545
// mech := result [ 1 ] ;
54397: LD_ADDR_VAR 0 5
54401: PUSH
54402: LD_VAR 0 2
54406: PUSH
54407: LD_INT 1
54409: ARRAY
54410: ST_TO_ADDR
// if result > 1 then
54411: LD_VAR 0 2
54415: PUSH
54416: LD_INT 1
54418: GREATER
54419: IFFALSE 54531
// begin for i = 2 to result do
54421: LD_ADDR_VAR 0 3
54425: PUSH
54426: DOUBLE
54427: LD_INT 2
54429: DEC
54430: ST_TO_ADDR
54431: LD_VAR 0 2
54435: PUSH
54436: FOR_TO
54437: IFFALSE 54529
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
54439: LD_ADDR_VAR 0 4
54443: PUSH
54444: LD_VAR 0 2
54448: PUSH
54449: LD_VAR 0 3
54453: ARRAY
54454: PPUSH
54455: LD_INT 3
54457: PPUSH
54458: CALL_OW 259
54462: PUSH
54463: LD_VAR 0 2
54467: PUSH
54468: LD_VAR 0 3
54472: ARRAY
54473: PPUSH
54474: CALL_OW 432
54478: MINUS
54479: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
54480: LD_VAR 0 4
54484: PUSH
54485: LD_VAR 0 5
54489: PPUSH
54490: LD_INT 3
54492: PPUSH
54493: CALL_OW 259
54497: PUSH
54498: LD_VAR 0 5
54502: PPUSH
54503: CALL_OW 432
54507: MINUS
54508: GREATEREQUAL
54509: IFFALSE 54527
// mech := result [ i ] ;
54511: LD_ADDR_VAR 0 5
54515: PUSH
54516: LD_VAR 0 2
54520: PUSH
54521: LD_VAR 0 3
54525: ARRAY
54526: ST_TO_ADDR
// end ;
54527: GO 54436
54529: POP
54530: POP
// end ; ComLinkTo ( vehicle , mech ) ;
54531: LD_VAR 0 1
54535: PPUSH
54536: LD_VAR 0 5
54540: PPUSH
54541: CALL_OW 135
// end ;
54545: LD_VAR 0 2
54549: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
54550: LD_INT 0
54552: PPUSH
54553: PPUSH
54554: PPUSH
54555: PPUSH
54556: PPUSH
54557: PPUSH
54558: PPUSH
54559: PPUSH
54560: PPUSH
54561: PPUSH
54562: PPUSH
54563: PPUSH
54564: PPUSH
// result := [ ] ;
54565: LD_ADDR_VAR 0 7
54569: PUSH
54570: EMPTY
54571: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
54572: LD_VAR 0 1
54576: PPUSH
54577: CALL_OW 266
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: IN
54592: NOT
54593: IFFALSE 54597
// exit ;
54595: GO 56231
// if name then
54597: LD_VAR 0 3
54601: IFFALSE 54617
// SetBName ( base_dep , name ) ;
54603: LD_VAR 0 1
54607: PPUSH
54608: LD_VAR 0 3
54612: PPUSH
54613: CALL_OW 500
// base := GetBase ( base_dep ) ;
54617: LD_ADDR_VAR 0 15
54621: PUSH
54622: LD_VAR 0 1
54626: PPUSH
54627: CALL_OW 274
54631: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
54632: LD_ADDR_VAR 0 16
54636: PUSH
54637: LD_VAR 0 1
54641: PPUSH
54642: CALL_OW 255
54646: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
54647: LD_ADDR_VAR 0 17
54651: PUSH
54652: LD_VAR 0 1
54656: PPUSH
54657: CALL_OW 248
54661: ST_TO_ADDR
// if sources then
54662: LD_VAR 0 5
54666: IFFALSE 54713
// for i = 1 to 3 do
54668: LD_ADDR_VAR 0 8
54672: PUSH
54673: DOUBLE
54674: LD_INT 1
54676: DEC
54677: ST_TO_ADDR
54678: LD_INT 3
54680: PUSH
54681: FOR_TO
54682: IFFALSE 54711
// AddResourceType ( base , i , sources [ i ] ) ;
54684: LD_VAR 0 15
54688: PPUSH
54689: LD_VAR 0 8
54693: PPUSH
54694: LD_VAR 0 5
54698: PUSH
54699: LD_VAR 0 8
54703: ARRAY
54704: PPUSH
54705: CALL_OW 276
54709: GO 54681
54711: POP
54712: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
54713: LD_ADDR_VAR 0 18
54717: PUSH
54718: LD_VAR 0 15
54722: PPUSH
54723: LD_VAR 0 2
54727: PPUSH
54728: LD_INT 1
54730: PPUSH
54731: CALL 53974 0 3
54735: ST_TO_ADDR
// InitHc ;
54736: CALL_OW 19
// InitUc ;
54740: CALL_OW 18
// uc_side := side ;
54744: LD_ADDR_OWVAR 20
54748: PUSH
54749: LD_VAR 0 16
54753: ST_TO_ADDR
// uc_nation := nation ;
54754: LD_ADDR_OWVAR 21
54758: PUSH
54759: LD_VAR 0 17
54763: ST_TO_ADDR
// if buildings then
54764: LD_VAR 0 18
54768: IFFALSE 56090
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
54770: LD_ADDR_VAR 0 19
54774: PUSH
54775: LD_VAR 0 18
54779: PPUSH
54780: LD_INT 2
54782: PUSH
54783: LD_INT 30
54785: PUSH
54786: LD_INT 29
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 30
54795: PUSH
54796: LD_INT 30
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: LIST
54807: PPUSH
54808: CALL_OW 72
54812: ST_TO_ADDR
// if tmp then
54813: LD_VAR 0 19
54817: IFFALSE 54865
// for i in tmp do
54819: LD_ADDR_VAR 0 8
54823: PUSH
54824: LD_VAR 0 19
54828: PUSH
54829: FOR_IN
54830: IFFALSE 54863
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
54832: LD_VAR 0 8
54836: PPUSH
54837: CALL_OW 250
54841: PPUSH
54842: LD_VAR 0 8
54846: PPUSH
54847: CALL_OW 251
54851: PPUSH
54852: LD_VAR 0 16
54856: PPUSH
54857: CALL_OW 441
54861: GO 54829
54863: POP
54864: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
54865: LD_VAR 0 18
54869: PPUSH
54870: LD_INT 2
54872: PUSH
54873: LD_INT 30
54875: PUSH
54876: LD_INT 32
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 30
54885: PUSH
54886: LD_INT 33
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: LIST
54897: PPUSH
54898: CALL_OW 72
54902: IFFALSE 54990
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
54904: LD_ADDR_VAR 0 8
54908: PUSH
54909: LD_VAR 0 18
54913: PPUSH
54914: LD_INT 2
54916: PUSH
54917: LD_INT 30
54919: PUSH
54920: LD_INT 32
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 30
54929: PUSH
54930: LD_INT 33
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: LIST
54941: PPUSH
54942: CALL_OW 72
54946: PUSH
54947: FOR_IN
54948: IFFALSE 54988
// begin if not GetBWeapon ( i ) then
54950: LD_VAR 0 8
54954: PPUSH
54955: CALL_OW 269
54959: NOT
54960: IFFALSE 54986
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
54962: LD_VAR 0 8
54966: PPUSH
54967: LD_VAR 0 8
54971: PPUSH
54972: LD_VAR 0 2
54976: PPUSH
54977: CALL 56236 0 2
54981: PPUSH
54982: CALL_OW 431
// end ;
54986: GO 54947
54988: POP
54989: POP
// end ; for i = 1 to personel do
54990: LD_ADDR_VAR 0 8
54994: PUSH
54995: DOUBLE
54996: LD_INT 1
54998: DEC
54999: ST_TO_ADDR
55000: LD_VAR 0 6
55004: PUSH
55005: FOR_TO
55006: IFFALSE 56070
// begin if i > 4 then
55008: LD_VAR 0 8
55012: PUSH
55013: LD_INT 4
55015: GREATER
55016: IFFALSE 55020
// break ;
55018: GO 56070
// case i of 1 :
55020: LD_VAR 0 8
55024: PUSH
55025: LD_INT 1
55027: DOUBLE
55028: EQUAL
55029: IFTRUE 55033
55031: GO 55113
55033: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
55034: LD_ADDR_VAR 0 12
55038: PUSH
55039: LD_VAR 0 18
55043: PPUSH
55044: LD_INT 22
55046: PUSH
55047: LD_VAR 0 16
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 58
55058: PUSH
55059: EMPTY
55060: LIST
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: LD_INT 30
55067: PUSH
55068: LD_INT 32
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 30
55077: PUSH
55078: LD_INT 4
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 30
55087: PUSH
55088: LD_INT 5
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: LIST
55105: PPUSH
55106: CALL_OW 72
55110: ST_TO_ADDR
55111: GO 55335
55113: LD_INT 2
55115: DOUBLE
55116: EQUAL
55117: IFTRUE 55121
55119: GO 55183
55121: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
55122: LD_ADDR_VAR 0 12
55126: PUSH
55127: LD_VAR 0 18
55131: PPUSH
55132: LD_INT 22
55134: PUSH
55135: LD_VAR 0 16
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 2
55146: PUSH
55147: LD_INT 30
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 30
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: LIST
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PPUSH
55176: CALL_OW 72
55180: ST_TO_ADDR
55181: GO 55335
55183: LD_INT 3
55185: DOUBLE
55186: EQUAL
55187: IFTRUE 55191
55189: GO 55253
55191: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
55192: LD_ADDR_VAR 0 12
55196: PUSH
55197: LD_VAR 0 18
55201: PPUSH
55202: LD_INT 22
55204: PUSH
55205: LD_VAR 0 16
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 2
55216: PUSH
55217: LD_INT 30
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 30
55229: PUSH
55230: LD_INT 3
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: LIST
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PPUSH
55246: CALL_OW 72
55250: ST_TO_ADDR
55251: GO 55335
55253: LD_INT 4
55255: DOUBLE
55256: EQUAL
55257: IFTRUE 55261
55259: GO 55334
55261: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
55262: LD_ADDR_VAR 0 12
55266: PUSH
55267: LD_VAR 0 18
55271: PPUSH
55272: LD_INT 22
55274: PUSH
55275: LD_VAR 0 16
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 2
55286: PUSH
55287: LD_INT 30
55289: PUSH
55290: LD_INT 6
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 30
55299: PUSH
55300: LD_INT 7
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 30
55309: PUSH
55310: LD_INT 8
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PPUSH
55327: CALL_OW 72
55331: ST_TO_ADDR
55332: GO 55335
55334: POP
// if i = 1 then
55335: LD_VAR 0 8
55339: PUSH
55340: LD_INT 1
55342: EQUAL
55343: IFFALSE 55454
// begin tmp := [ ] ;
55345: LD_ADDR_VAR 0 19
55349: PUSH
55350: EMPTY
55351: ST_TO_ADDR
// for j in f do
55352: LD_ADDR_VAR 0 9
55356: PUSH
55357: LD_VAR 0 12
55361: PUSH
55362: FOR_IN
55363: IFFALSE 55436
// if GetBType ( j ) = b_bunker then
55365: LD_VAR 0 9
55369: PPUSH
55370: CALL_OW 266
55374: PUSH
55375: LD_INT 32
55377: EQUAL
55378: IFFALSE 55405
// tmp := Insert ( tmp , 1 , j ) else
55380: LD_ADDR_VAR 0 19
55384: PUSH
55385: LD_VAR 0 19
55389: PPUSH
55390: LD_INT 1
55392: PPUSH
55393: LD_VAR 0 9
55397: PPUSH
55398: CALL_OW 2
55402: ST_TO_ADDR
55403: GO 55434
// tmp := Insert ( tmp , tmp + 1 , j ) ;
55405: LD_ADDR_VAR 0 19
55409: PUSH
55410: LD_VAR 0 19
55414: PPUSH
55415: LD_VAR 0 19
55419: PUSH
55420: LD_INT 1
55422: PLUS
55423: PPUSH
55424: LD_VAR 0 9
55428: PPUSH
55429: CALL_OW 2
55433: ST_TO_ADDR
55434: GO 55362
55436: POP
55437: POP
// if tmp then
55438: LD_VAR 0 19
55442: IFFALSE 55454
// f := tmp ;
55444: LD_ADDR_VAR 0 12
55448: PUSH
55449: LD_VAR 0 19
55453: ST_TO_ADDR
// end ; x := personel [ i ] ;
55454: LD_ADDR_VAR 0 13
55458: PUSH
55459: LD_VAR 0 6
55463: PUSH
55464: LD_VAR 0 8
55468: ARRAY
55469: ST_TO_ADDR
// if x = - 1 then
55470: LD_VAR 0 13
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: EQUAL
55479: IFFALSE 55688
// begin for j in f do
55481: LD_ADDR_VAR 0 9
55485: PUSH
55486: LD_VAR 0 12
55490: PUSH
55491: FOR_IN
55492: IFFALSE 55684
// repeat InitHc ;
55494: CALL_OW 19
// if GetBType ( j ) = b_barracks then
55498: LD_VAR 0 9
55502: PPUSH
55503: CALL_OW 266
55507: PUSH
55508: LD_INT 5
55510: EQUAL
55511: IFFALSE 55581
// begin if UnitsInside ( j ) < 3 then
55513: LD_VAR 0 9
55517: PPUSH
55518: CALL_OW 313
55522: PUSH
55523: LD_INT 3
55525: LESS
55526: IFFALSE 55562
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
55528: LD_INT 0
55530: PPUSH
55531: LD_INT 5
55533: PUSH
55534: LD_INT 8
55536: PUSH
55537: LD_INT 9
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: LIST
55544: PUSH
55545: LD_VAR 0 17
55549: ARRAY
55550: PPUSH
55551: LD_VAR 0 4
55555: PPUSH
55556: CALL_OW 380
55560: GO 55579
// PrepareHuman ( false , i , skill ) ;
55562: LD_INT 0
55564: PPUSH
55565: LD_VAR 0 8
55569: PPUSH
55570: LD_VAR 0 4
55574: PPUSH
55575: CALL_OW 380
// end else
55579: GO 55598
// PrepareHuman ( false , i , skill ) ;
55581: LD_INT 0
55583: PPUSH
55584: LD_VAR 0 8
55588: PPUSH
55589: LD_VAR 0 4
55593: PPUSH
55594: CALL_OW 380
// un := CreateHuman ;
55598: LD_ADDR_VAR 0 14
55602: PUSH
55603: CALL_OW 44
55607: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55608: LD_ADDR_VAR 0 7
55612: PUSH
55613: LD_VAR 0 7
55617: PPUSH
55618: LD_INT 1
55620: PPUSH
55621: LD_VAR 0 14
55625: PPUSH
55626: CALL_OW 2
55630: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
55631: LD_VAR 0 14
55635: PPUSH
55636: LD_VAR 0 9
55640: PPUSH
55641: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
55645: LD_VAR 0 9
55649: PPUSH
55650: CALL_OW 313
55654: PUSH
55655: LD_INT 6
55657: EQUAL
55658: PUSH
55659: LD_VAR 0 9
55663: PPUSH
55664: CALL_OW 266
55668: PUSH
55669: LD_INT 32
55671: PUSH
55672: LD_INT 31
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: IN
55679: OR
55680: IFFALSE 55494
55682: GO 55491
55684: POP
55685: POP
// end else
55686: GO 56068
// for j = 1 to x do
55688: LD_ADDR_VAR 0 9
55692: PUSH
55693: DOUBLE
55694: LD_INT 1
55696: DEC
55697: ST_TO_ADDR
55698: LD_VAR 0 13
55702: PUSH
55703: FOR_TO
55704: IFFALSE 56066
// begin InitHc ;
55706: CALL_OW 19
// if not f then
55710: LD_VAR 0 12
55714: NOT
55715: IFFALSE 55804
// begin PrepareHuman ( false , i , skill ) ;
55717: LD_INT 0
55719: PPUSH
55720: LD_VAR 0 8
55724: PPUSH
55725: LD_VAR 0 4
55729: PPUSH
55730: CALL_OW 380
// un := CreateHuman ;
55734: LD_ADDR_VAR 0 14
55738: PUSH
55739: CALL_OW 44
55743: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55744: LD_ADDR_VAR 0 7
55748: PUSH
55749: LD_VAR 0 7
55753: PPUSH
55754: LD_INT 1
55756: PPUSH
55757: LD_VAR 0 14
55761: PPUSH
55762: CALL_OW 2
55766: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
55767: LD_VAR 0 14
55771: PPUSH
55772: LD_VAR 0 1
55776: PPUSH
55777: CALL_OW 250
55781: PPUSH
55782: LD_VAR 0 1
55786: PPUSH
55787: CALL_OW 251
55791: PPUSH
55792: LD_INT 10
55794: PPUSH
55795: LD_INT 0
55797: PPUSH
55798: CALL_OW 50
// continue ;
55802: GO 55703
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
55804: LD_VAR 0 12
55808: PUSH
55809: LD_INT 1
55811: ARRAY
55812: PPUSH
55813: CALL_OW 313
55817: PUSH
55818: LD_VAR 0 12
55822: PUSH
55823: LD_INT 1
55825: ARRAY
55826: PPUSH
55827: CALL_OW 266
55831: PUSH
55832: LD_INT 32
55834: PUSH
55835: LD_INT 31
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: IN
55842: AND
55843: PUSH
55844: LD_VAR 0 12
55848: PUSH
55849: LD_INT 1
55851: ARRAY
55852: PPUSH
55853: CALL_OW 313
55857: PUSH
55858: LD_INT 6
55860: EQUAL
55861: OR
55862: IFFALSE 55882
// f := Delete ( f , 1 ) ;
55864: LD_ADDR_VAR 0 12
55868: PUSH
55869: LD_VAR 0 12
55873: PPUSH
55874: LD_INT 1
55876: PPUSH
55877: CALL_OW 3
55881: ST_TO_ADDR
// if not f then
55882: LD_VAR 0 12
55886: NOT
55887: IFFALSE 55905
// begin x := x + 2 ;
55889: LD_ADDR_VAR 0 13
55893: PUSH
55894: LD_VAR 0 13
55898: PUSH
55899: LD_INT 2
55901: PLUS
55902: ST_TO_ADDR
// continue ;
55903: GO 55703
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
55905: LD_VAR 0 12
55909: PUSH
55910: LD_INT 1
55912: ARRAY
55913: PPUSH
55914: CALL_OW 266
55918: PUSH
55919: LD_INT 5
55921: EQUAL
55922: IFFALSE 55996
// begin if UnitsInside ( f [ 1 ] ) < 3 then
55924: LD_VAR 0 12
55928: PUSH
55929: LD_INT 1
55931: ARRAY
55932: PPUSH
55933: CALL_OW 313
55937: PUSH
55938: LD_INT 3
55940: LESS
55941: IFFALSE 55977
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
55943: LD_INT 0
55945: PPUSH
55946: LD_INT 5
55948: PUSH
55949: LD_INT 8
55951: PUSH
55952: LD_INT 9
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: LIST
55959: PUSH
55960: LD_VAR 0 17
55964: ARRAY
55965: PPUSH
55966: LD_VAR 0 4
55970: PPUSH
55971: CALL_OW 380
55975: GO 55994
// PrepareHuman ( false , i , skill ) ;
55977: LD_INT 0
55979: PPUSH
55980: LD_VAR 0 8
55984: PPUSH
55985: LD_VAR 0 4
55989: PPUSH
55990: CALL_OW 380
// end else
55994: GO 56013
// PrepareHuman ( false , i , skill ) ;
55996: LD_INT 0
55998: PPUSH
55999: LD_VAR 0 8
56003: PPUSH
56004: LD_VAR 0 4
56008: PPUSH
56009: CALL_OW 380
// un := CreateHuman ;
56013: LD_ADDR_VAR 0 14
56017: PUSH
56018: CALL_OW 44
56022: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56023: LD_ADDR_VAR 0 7
56027: PUSH
56028: LD_VAR 0 7
56032: PPUSH
56033: LD_INT 1
56035: PPUSH
56036: LD_VAR 0 14
56040: PPUSH
56041: CALL_OW 2
56045: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
56046: LD_VAR 0 14
56050: PPUSH
56051: LD_VAR 0 12
56055: PUSH
56056: LD_INT 1
56058: ARRAY
56059: PPUSH
56060: CALL_OW 52
// end ;
56064: GO 55703
56066: POP
56067: POP
// end ;
56068: GO 55005
56070: POP
56071: POP
// result := result ^ buildings ;
56072: LD_ADDR_VAR 0 7
56076: PUSH
56077: LD_VAR 0 7
56081: PUSH
56082: LD_VAR 0 18
56086: ADD
56087: ST_TO_ADDR
// end else
56088: GO 56231
// begin for i = 1 to personel do
56090: LD_ADDR_VAR 0 8
56094: PUSH
56095: DOUBLE
56096: LD_INT 1
56098: DEC
56099: ST_TO_ADDR
56100: LD_VAR 0 6
56104: PUSH
56105: FOR_TO
56106: IFFALSE 56229
// begin if i > 4 then
56108: LD_VAR 0 8
56112: PUSH
56113: LD_INT 4
56115: GREATER
56116: IFFALSE 56120
// break ;
56118: GO 56229
// x := personel [ i ] ;
56120: LD_ADDR_VAR 0 13
56124: PUSH
56125: LD_VAR 0 6
56129: PUSH
56130: LD_VAR 0 8
56134: ARRAY
56135: ST_TO_ADDR
// if x = - 1 then
56136: LD_VAR 0 13
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: EQUAL
56145: IFFALSE 56149
// continue ;
56147: GO 56105
// PrepareHuman ( false , i , skill ) ;
56149: LD_INT 0
56151: PPUSH
56152: LD_VAR 0 8
56156: PPUSH
56157: LD_VAR 0 4
56161: PPUSH
56162: CALL_OW 380
// un := CreateHuman ;
56166: LD_ADDR_VAR 0 14
56170: PUSH
56171: CALL_OW 44
56175: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
56176: LD_VAR 0 14
56180: PPUSH
56181: LD_VAR 0 1
56185: PPUSH
56186: CALL_OW 250
56190: PPUSH
56191: LD_VAR 0 1
56195: PPUSH
56196: CALL_OW 251
56200: PPUSH
56201: LD_INT 10
56203: PPUSH
56204: LD_INT 0
56206: PPUSH
56207: CALL_OW 50
// result := result ^ un ;
56211: LD_ADDR_VAR 0 7
56215: PUSH
56216: LD_VAR 0 7
56220: PUSH
56221: LD_VAR 0 14
56225: ADD
56226: ST_TO_ADDR
// end ;
56227: GO 56105
56229: POP
56230: POP
// end ; end ;
56231: LD_VAR 0 7
56235: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
56236: LD_INT 0
56238: PPUSH
56239: PPUSH
56240: PPUSH
56241: PPUSH
56242: PPUSH
56243: PPUSH
56244: PPUSH
56245: PPUSH
56246: PPUSH
56247: PPUSH
56248: PPUSH
56249: PPUSH
56250: PPUSH
56251: PPUSH
56252: PPUSH
56253: PPUSH
// result := false ;
56254: LD_ADDR_VAR 0 3
56258: PUSH
56259: LD_INT 0
56261: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
56262: LD_VAR 0 1
56266: NOT
56267: PUSH
56268: LD_VAR 0 1
56272: PPUSH
56273: CALL_OW 266
56277: PUSH
56278: LD_INT 32
56280: PUSH
56281: LD_INT 33
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: IN
56288: NOT
56289: OR
56290: IFFALSE 56294
// exit ;
56292: GO 57403
// nat := GetNation ( tower ) ;
56294: LD_ADDR_VAR 0 12
56298: PUSH
56299: LD_VAR 0 1
56303: PPUSH
56304: CALL_OW 248
56308: ST_TO_ADDR
// side := GetSide ( tower ) ;
56309: LD_ADDR_VAR 0 16
56313: PUSH
56314: LD_VAR 0 1
56318: PPUSH
56319: CALL_OW 255
56323: ST_TO_ADDR
// x := GetX ( tower ) ;
56324: LD_ADDR_VAR 0 10
56328: PUSH
56329: LD_VAR 0 1
56333: PPUSH
56334: CALL_OW 250
56338: ST_TO_ADDR
// y := GetY ( tower ) ;
56339: LD_ADDR_VAR 0 11
56343: PUSH
56344: LD_VAR 0 1
56348: PPUSH
56349: CALL_OW 251
56353: ST_TO_ADDR
// if not x or not y then
56354: LD_VAR 0 10
56358: NOT
56359: PUSH
56360: LD_VAR 0 11
56364: NOT
56365: OR
56366: IFFALSE 56370
// exit ;
56368: GO 57403
// weapon := 0 ;
56370: LD_ADDR_VAR 0 18
56374: PUSH
56375: LD_INT 0
56377: ST_TO_ADDR
// fac_list := [ ] ;
56378: LD_ADDR_VAR 0 17
56382: PUSH
56383: EMPTY
56384: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
56385: LD_ADDR_VAR 0 6
56389: PUSH
56390: LD_VAR 0 1
56394: PPUSH
56395: CALL_OW 274
56399: PPUSH
56400: LD_VAR 0 2
56404: PPUSH
56405: LD_INT 0
56407: PPUSH
56408: CALL 53974 0 3
56412: PPUSH
56413: LD_INT 30
56415: PUSH
56416: LD_INT 3
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PPUSH
56423: CALL_OW 72
56427: ST_TO_ADDR
// if not factories then
56428: LD_VAR 0 6
56432: NOT
56433: IFFALSE 56437
// exit ;
56435: GO 57403
// for i in factories do
56437: LD_ADDR_VAR 0 8
56441: PUSH
56442: LD_VAR 0 6
56446: PUSH
56447: FOR_IN
56448: IFFALSE 56473
// fac_list := fac_list union AvailableWeaponList ( i ) ;
56450: LD_ADDR_VAR 0 17
56454: PUSH
56455: LD_VAR 0 17
56459: PUSH
56460: LD_VAR 0 8
56464: PPUSH
56465: CALL_OW 478
56469: UNION
56470: ST_TO_ADDR
56471: GO 56447
56473: POP
56474: POP
// if not fac_list then
56475: LD_VAR 0 17
56479: NOT
56480: IFFALSE 56484
// exit ;
56482: GO 57403
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
56484: LD_ADDR_VAR 0 5
56488: PUSH
56489: LD_INT 4
56491: PUSH
56492: LD_INT 5
56494: PUSH
56495: LD_INT 9
56497: PUSH
56498: LD_INT 10
56500: PUSH
56501: LD_INT 6
56503: PUSH
56504: LD_INT 7
56506: PUSH
56507: LD_INT 11
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 27
56521: PUSH
56522: LD_INT 28
56524: PUSH
56525: LD_INT 26
56527: PUSH
56528: LD_INT 30
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 43
56539: PUSH
56540: LD_INT 44
56542: PUSH
56543: LD_INT 46
56545: PUSH
56546: LD_INT 45
56548: PUSH
56549: LD_INT 47
56551: PUSH
56552: LD_INT 49
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: LIST
56567: PUSH
56568: LD_VAR 0 12
56572: ARRAY
56573: ST_TO_ADDR
// list := list isect fac_list ;
56574: LD_ADDR_VAR 0 5
56578: PUSH
56579: LD_VAR 0 5
56583: PUSH
56584: LD_VAR 0 17
56588: ISECT
56589: ST_TO_ADDR
// if not list then
56590: LD_VAR 0 5
56594: NOT
56595: IFFALSE 56599
// exit ;
56597: GO 57403
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
56599: LD_VAR 0 12
56603: PUSH
56604: LD_INT 3
56606: EQUAL
56607: PUSH
56608: LD_INT 49
56610: PUSH
56611: LD_VAR 0 5
56615: IN
56616: AND
56617: PUSH
56618: LD_INT 31
56620: PPUSH
56621: LD_VAR 0 16
56625: PPUSH
56626: CALL_OW 321
56630: PUSH
56631: LD_INT 2
56633: EQUAL
56634: AND
56635: IFFALSE 56695
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
56637: LD_INT 22
56639: PUSH
56640: LD_VAR 0 16
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 35
56651: PUSH
56652: LD_INT 49
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 91
56661: PUSH
56662: LD_VAR 0 1
56666: PUSH
56667: LD_INT 10
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: LIST
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: LIST
56679: PPUSH
56680: CALL_OW 69
56684: NOT
56685: IFFALSE 56695
// weapon := ru_time_lapser ;
56687: LD_ADDR_VAR 0 18
56691: PUSH
56692: LD_INT 49
56694: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
56695: LD_VAR 0 12
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: LD_INT 2
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: IN
56710: PUSH
56711: LD_INT 11
56713: PUSH
56714: LD_VAR 0 5
56718: IN
56719: PUSH
56720: LD_INT 30
56722: PUSH
56723: LD_VAR 0 5
56727: IN
56728: OR
56729: AND
56730: PUSH
56731: LD_INT 6
56733: PPUSH
56734: LD_VAR 0 16
56738: PPUSH
56739: CALL_OW 321
56743: PUSH
56744: LD_INT 2
56746: EQUAL
56747: AND
56748: IFFALSE 56913
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
56750: LD_INT 22
56752: PUSH
56753: LD_VAR 0 16
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 2
56764: PUSH
56765: LD_INT 35
56767: PUSH
56768: LD_INT 11
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 35
56777: PUSH
56778: LD_INT 30
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 91
56792: PUSH
56793: LD_VAR 0 1
56797: PUSH
56798: LD_INT 18
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: LIST
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: LIST
56810: PPUSH
56811: CALL_OW 69
56815: NOT
56816: PUSH
56817: LD_INT 22
56819: PUSH
56820: LD_VAR 0 16
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: LD_INT 30
56834: PUSH
56835: LD_INT 32
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 30
56844: PUSH
56845: LD_INT 33
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 91
56859: PUSH
56860: LD_VAR 0 1
56864: PUSH
56865: LD_INT 12
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: LIST
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: LIST
56877: PUSH
56878: EMPTY
56879: LIST
56880: PPUSH
56881: CALL_OW 69
56885: PUSH
56886: LD_INT 2
56888: GREATER
56889: AND
56890: IFFALSE 56913
// weapon := [ us_radar , ar_radar ] [ nat ] ;
56892: LD_ADDR_VAR 0 18
56896: PUSH
56897: LD_INT 11
56899: PUSH
56900: LD_INT 30
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_VAR 0 12
56911: ARRAY
56912: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
56913: LD_VAR 0 18
56917: NOT
56918: PUSH
56919: LD_INT 40
56921: PPUSH
56922: LD_VAR 0 16
56926: PPUSH
56927: CALL_OW 321
56931: PUSH
56932: LD_INT 2
56934: EQUAL
56935: AND
56936: PUSH
56937: LD_INT 7
56939: PUSH
56940: LD_VAR 0 5
56944: IN
56945: PUSH
56946: LD_INT 28
56948: PUSH
56949: LD_VAR 0 5
56953: IN
56954: OR
56955: PUSH
56956: LD_INT 45
56958: PUSH
56959: LD_VAR 0 5
56963: IN
56964: OR
56965: AND
56966: IFFALSE 57220
// begin hex := GetHexInfo ( x , y ) ;
56968: LD_ADDR_VAR 0 4
56972: PUSH
56973: LD_VAR 0 10
56977: PPUSH
56978: LD_VAR 0 11
56982: PPUSH
56983: CALL_OW 546
56987: ST_TO_ADDR
// if hex [ 1 ] then
56988: LD_VAR 0 4
56992: PUSH
56993: LD_INT 1
56995: ARRAY
56996: IFFALSE 57000
// exit ;
56998: GO 57403
// height := hex [ 2 ] ;
57000: LD_ADDR_VAR 0 15
57004: PUSH
57005: LD_VAR 0 4
57009: PUSH
57010: LD_INT 2
57012: ARRAY
57013: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
57014: LD_ADDR_VAR 0 14
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: LD_INT 2
57024: PUSH
57025: LD_INT 3
57027: PUSH
57028: LD_INT 5
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: ST_TO_ADDR
// for i in tmp do
57037: LD_ADDR_VAR 0 8
57041: PUSH
57042: LD_VAR 0 14
57046: PUSH
57047: FOR_IN
57048: IFFALSE 57218
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
57050: LD_ADDR_VAR 0 9
57054: PUSH
57055: LD_VAR 0 10
57059: PPUSH
57060: LD_VAR 0 8
57064: PPUSH
57065: LD_INT 5
57067: PPUSH
57068: CALL_OW 272
57072: PUSH
57073: LD_VAR 0 11
57077: PPUSH
57078: LD_VAR 0 8
57082: PPUSH
57083: LD_INT 5
57085: PPUSH
57086: CALL_OW 273
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
57095: LD_VAR 0 9
57099: PUSH
57100: LD_INT 1
57102: ARRAY
57103: PPUSH
57104: LD_VAR 0 9
57108: PUSH
57109: LD_INT 2
57111: ARRAY
57112: PPUSH
57113: CALL_OW 488
57117: IFFALSE 57216
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
57119: LD_ADDR_VAR 0 4
57123: PUSH
57124: LD_VAR 0 9
57128: PUSH
57129: LD_INT 1
57131: ARRAY
57132: PPUSH
57133: LD_VAR 0 9
57137: PUSH
57138: LD_INT 2
57140: ARRAY
57141: PPUSH
57142: CALL_OW 546
57146: ST_TO_ADDR
// if hex [ 1 ] then
57147: LD_VAR 0 4
57151: PUSH
57152: LD_INT 1
57154: ARRAY
57155: IFFALSE 57159
// continue ;
57157: GO 57047
// h := hex [ 2 ] ;
57159: LD_ADDR_VAR 0 13
57163: PUSH
57164: LD_VAR 0 4
57168: PUSH
57169: LD_INT 2
57171: ARRAY
57172: ST_TO_ADDR
// if h + 7 < height then
57173: LD_VAR 0 13
57177: PUSH
57178: LD_INT 7
57180: PLUS
57181: PUSH
57182: LD_VAR 0 15
57186: LESS
57187: IFFALSE 57216
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
57189: LD_ADDR_VAR 0 18
57193: PUSH
57194: LD_INT 7
57196: PUSH
57197: LD_INT 28
57199: PUSH
57200: LD_INT 45
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: LIST
57207: PUSH
57208: LD_VAR 0 12
57212: ARRAY
57213: ST_TO_ADDR
// break ;
57214: GO 57218
// end ; end ; end ;
57216: GO 57047
57218: POP
57219: POP
// end ; if not weapon then
57220: LD_VAR 0 18
57224: NOT
57225: IFFALSE 57285
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
57227: LD_ADDR_VAR 0 5
57231: PUSH
57232: LD_VAR 0 5
57236: PUSH
57237: LD_INT 11
57239: PUSH
57240: LD_INT 30
57242: PUSH
57243: LD_INT 49
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: LIST
57250: DIFF
57251: ST_TO_ADDR
// if not list then
57252: LD_VAR 0 5
57256: NOT
57257: IFFALSE 57261
// exit ;
57259: GO 57403
// weapon := list [ rand ( 1 , list ) ] ;
57261: LD_ADDR_VAR 0 18
57265: PUSH
57266: LD_VAR 0 5
57270: PUSH
57271: LD_INT 1
57273: PPUSH
57274: LD_VAR 0 5
57278: PPUSH
57279: CALL_OW 12
57283: ARRAY
57284: ST_TO_ADDR
// end ; if weapon then
57285: LD_VAR 0 18
57289: IFFALSE 57403
// begin tmp := CostOfWeapon ( weapon ) ;
57291: LD_ADDR_VAR 0 14
57295: PUSH
57296: LD_VAR 0 18
57300: PPUSH
57301: CALL_OW 451
57305: ST_TO_ADDR
// j := GetBase ( tower ) ;
57306: LD_ADDR_VAR 0 9
57310: PUSH
57311: LD_VAR 0 1
57315: PPUSH
57316: CALL_OW 274
57320: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
57321: LD_VAR 0 9
57325: PPUSH
57326: LD_INT 1
57328: PPUSH
57329: CALL_OW 275
57333: PUSH
57334: LD_VAR 0 14
57338: PUSH
57339: LD_INT 1
57341: ARRAY
57342: GREATEREQUAL
57343: PUSH
57344: LD_VAR 0 9
57348: PPUSH
57349: LD_INT 2
57351: PPUSH
57352: CALL_OW 275
57356: PUSH
57357: LD_VAR 0 14
57361: PUSH
57362: LD_INT 2
57364: ARRAY
57365: GREATEREQUAL
57366: AND
57367: PUSH
57368: LD_VAR 0 9
57372: PPUSH
57373: LD_INT 3
57375: PPUSH
57376: CALL_OW 275
57380: PUSH
57381: LD_VAR 0 14
57385: PUSH
57386: LD_INT 3
57388: ARRAY
57389: GREATEREQUAL
57390: AND
57391: IFFALSE 57403
// result := weapon ;
57393: LD_ADDR_VAR 0 3
57397: PUSH
57398: LD_VAR 0 18
57402: ST_TO_ADDR
// end ; end ;
57403: LD_VAR 0 3
57407: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
57408: LD_INT 0
57410: PPUSH
57411: PPUSH
// result := true ;
57412: LD_ADDR_VAR 0 3
57416: PUSH
57417: LD_INT 1
57419: ST_TO_ADDR
// if array1 = array2 then
57420: LD_VAR 0 1
57424: PUSH
57425: LD_VAR 0 2
57429: EQUAL
57430: IFFALSE 57490
// begin for i = 1 to array1 do
57432: LD_ADDR_VAR 0 4
57436: PUSH
57437: DOUBLE
57438: LD_INT 1
57440: DEC
57441: ST_TO_ADDR
57442: LD_VAR 0 1
57446: PUSH
57447: FOR_TO
57448: IFFALSE 57486
// if array1 [ i ] <> array2 [ i ] then
57450: LD_VAR 0 1
57454: PUSH
57455: LD_VAR 0 4
57459: ARRAY
57460: PUSH
57461: LD_VAR 0 2
57465: PUSH
57466: LD_VAR 0 4
57470: ARRAY
57471: NONEQUAL
57472: IFFALSE 57484
// begin result := false ;
57474: LD_ADDR_VAR 0 3
57478: PUSH
57479: LD_INT 0
57481: ST_TO_ADDR
// break ;
57482: GO 57486
// end ;
57484: GO 57447
57486: POP
57487: POP
// end else
57488: GO 57498
// result := false ;
57490: LD_ADDR_VAR 0 3
57494: PUSH
57495: LD_INT 0
57497: ST_TO_ADDR
// end ;
57498: LD_VAR 0 3
57502: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
57503: LD_INT 0
57505: PPUSH
57506: PPUSH
// if not array1 or not array2 then
57507: LD_VAR 0 1
57511: NOT
57512: PUSH
57513: LD_VAR 0 2
57517: NOT
57518: OR
57519: IFFALSE 57523
// exit ;
57521: GO 57587
// result := true ;
57523: LD_ADDR_VAR 0 3
57527: PUSH
57528: LD_INT 1
57530: ST_TO_ADDR
// for i = 1 to array1 do
57531: LD_ADDR_VAR 0 4
57535: PUSH
57536: DOUBLE
57537: LD_INT 1
57539: DEC
57540: ST_TO_ADDR
57541: LD_VAR 0 1
57545: PUSH
57546: FOR_TO
57547: IFFALSE 57585
// if array1 [ i ] <> array2 [ i ] then
57549: LD_VAR 0 1
57553: PUSH
57554: LD_VAR 0 4
57558: ARRAY
57559: PUSH
57560: LD_VAR 0 2
57564: PUSH
57565: LD_VAR 0 4
57569: ARRAY
57570: NONEQUAL
57571: IFFALSE 57583
// begin result := false ;
57573: LD_ADDR_VAR 0 3
57577: PUSH
57578: LD_INT 0
57580: ST_TO_ADDR
// break ;
57581: GO 57585
// end ;
57583: GO 57546
57585: POP
57586: POP
// end ;
57587: LD_VAR 0 3
57591: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
57592: LD_INT 0
57594: PPUSH
57595: PPUSH
57596: PPUSH
// pom := GetBase ( fac ) ;
57597: LD_ADDR_VAR 0 5
57601: PUSH
57602: LD_VAR 0 1
57606: PPUSH
57607: CALL_OW 274
57611: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
57612: LD_ADDR_VAR 0 4
57616: PUSH
57617: LD_VAR 0 2
57621: PUSH
57622: LD_INT 1
57624: ARRAY
57625: PPUSH
57626: LD_VAR 0 2
57630: PUSH
57631: LD_INT 2
57633: ARRAY
57634: PPUSH
57635: LD_VAR 0 2
57639: PUSH
57640: LD_INT 3
57642: ARRAY
57643: PPUSH
57644: LD_VAR 0 2
57648: PUSH
57649: LD_INT 4
57651: ARRAY
57652: PPUSH
57653: CALL_OW 449
57657: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57658: LD_ADDR_VAR 0 3
57662: PUSH
57663: LD_VAR 0 5
57667: PPUSH
57668: LD_INT 1
57670: PPUSH
57671: CALL_OW 275
57675: PUSH
57676: LD_VAR 0 4
57680: PUSH
57681: LD_INT 1
57683: ARRAY
57684: GREATEREQUAL
57685: PUSH
57686: LD_VAR 0 5
57690: PPUSH
57691: LD_INT 2
57693: PPUSH
57694: CALL_OW 275
57698: PUSH
57699: LD_VAR 0 4
57703: PUSH
57704: LD_INT 2
57706: ARRAY
57707: GREATEREQUAL
57708: AND
57709: PUSH
57710: LD_VAR 0 5
57714: PPUSH
57715: LD_INT 3
57717: PPUSH
57718: CALL_OW 275
57722: PUSH
57723: LD_VAR 0 4
57727: PUSH
57728: LD_INT 3
57730: ARRAY
57731: GREATEREQUAL
57732: AND
57733: ST_TO_ADDR
// end ;
57734: LD_VAR 0 3
57738: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
57739: LD_INT 0
57741: PPUSH
57742: PPUSH
57743: PPUSH
57744: PPUSH
// pom := GetBase ( building ) ;
57745: LD_ADDR_VAR 0 3
57749: PUSH
57750: LD_VAR 0 1
57754: PPUSH
57755: CALL_OW 274
57759: ST_TO_ADDR
// if not pom then
57760: LD_VAR 0 3
57764: NOT
57765: IFFALSE 57769
// exit ;
57767: GO 57939
// btype := GetBType ( building ) ;
57769: LD_ADDR_VAR 0 5
57773: PUSH
57774: LD_VAR 0 1
57778: PPUSH
57779: CALL_OW 266
57783: ST_TO_ADDR
// if btype = b_armoury then
57784: LD_VAR 0 5
57788: PUSH
57789: LD_INT 4
57791: EQUAL
57792: IFFALSE 57802
// btype := b_barracks ;
57794: LD_ADDR_VAR 0 5
57798: PUSH
57799: LD_INT 5
57801: ST_TO_ADDR
// if btype = b_depot then
57802: LD_VAR 0 5
57806: PUSH
57807: LD_INT 0
57809: EQUAL
57810: IFFALSE 57820
// btype := b_warehouse ;
57812: LD_ADDR_VAR 0 5
57816: PUSH
57817: LD_INT 1
57819: ST_TO_ADDR
// if btype = b_workshop then
57820: LD_VAR 0 5
57824: PUSH
57825: LD_INT 2
57827: EQUAL
57828: IFFALSE 57838
// btype := b_factory ;
57830: LD_ADDR_VAR 0 5
57834: PUSH
57835: LD_INT 3
57837: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
57838: LD_ADDR_VAR 0 4
57842: PUSH
57843: LD_VAR 0 5
57847: PPUSH
57848: LD_VAR 0 1
57852: PPUSH
57853: CALL_OW 248
57857: PPUSH
57858: CALL_OW 450
57862: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57863: LD_ADDR_VAR 0 2
57867: PUSH
57868: LD_VAR 0 3
57872: PPUSH
57873: LD_INT 1
57875: PPUSH
57876: CALL_OW 275
57880: PUSH
57881: LD_VAR 0 4
57885: PUSH
57886: LD_INT 1
57888: ARRAY
57889: GREATEREQUAL
57890: PUSH
57891: LD_VAR 0 3
57895: PPUSH
57896: LD_INT 2
57898: PPUSH
57899: CALL_OW 275
57903: PUSH
57904: LD_VAR 0 4
57908: PUSH
57909: LD_INT 2
57911: ARRAY
57912: GREATEREQUAL
57913: AND
57914: PUSH
57915: LD_VAR 0 3
57919: PPUSH
57920: LD_INT 3
57922: PPUSH
57923: CALL_OW 275
57927: PUSH
57928: LD_VAR 0 4
57932: PUSH
57933: LD_INT 3
57935: ARRAY
57936: GREATEREQUAL
57937: AND
57938: ST_TO_ADDR
// end ;
57939: LD_VAR 0 2
57943: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
57944: LD_INT 0
57946: PPUSH
57947: PPUSH
57948: PPUSH
// pom := GetBase ( building ) ;
57949: LD_ADDR_VAR 0 4
57953: PUSH
57954: LD_VAR 0 1
57958: PPUSH
57959: CALL_OW 274
57963: ST_TO_ADDR
// if not pom then
57964: LD_VAR 0 4
57968: NOT
57969: IFFALSE 57973
// exit ;
57971: GO 58074
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
57973: LD_ADDR_VAR 0 5
57977: PUSH
57978: LD_VAR 0 2
57982: PPUSH
57983: LD_VAR 0 1
57987: PPUSH
57988: CALL_OW 248
57992: PPUSH
57993: CALL_OW 450
57997: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57998: LD_ADDR_VAR 0 3
58002: PUSH
58003: LD_VAR 0 4
58007: PPUSH
58008: LD_INT 1
58010: PPUSH
58011: CALL_OW 275
58015: PUSH
58016: LD_VAR 0 5
58020: PUSH
58021: LD_INT 1
58023: ARRAY
58024: GREATEREQUAL
58025: PUSH
58026: LD_VAR 0 4
58030: PPUSH
58031: LD_INT 2
58033: PPUSH
58034: CALL_OW 275
58038: PUSH
58039: LD_VAR 0 5
58043: PUSH
58044: LD_INT 2
58046: ARRAY
58047: GREATEREQUAL
58048: AND
58049: PUSH
58050: LD_VAR 0 4
58054: PPUSH
58055: LD_INT 3
58057: PPUSH
58058: CALL_OW 275
58062: PUSH
58063: LD_VAR 0 5
58067: PUSH
58068: LD_INT 3
58070: ARRAY
58071: GREATEREQUAL
58072: AND
58073: ST_TO_ADDR
// end ;
58074: LD_VAR 0 3
58078: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
58079: LD_INT 0
58081: PPUSH
58082: PPUSH
58083: PPUSH
58084: PPUSH
58085: PPUSH
58086: PPUSH
58087: PPUSH
58088: PPUSH
58089: PPUSH
58090: PPUSH
58091: PPUSH
// result := false ;
58092: LD_ADDR_VAR 0 8
58096: PUSH
58097: LD_INT 0
58099: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
58100: LD_VAR 0 5
58104: NOT
58105: PUSH
58106: LD_VAR 0 1
58110: NOT
58111: OR
58112: PUSH
58113: LD_VAR 0 2
58117: NOT
58118: OR
58119: PUSH
58120: LD_VAR 0 3
58124: NOT
58125: OR
58126: IFFALSE 58130
// exit ;
58128: GO 58944
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
58130: LD_ADDR_VAR 0 14
58134: PUSH
58135: LD_VAR 0 1
58139: PPUSH
58140: LD_VAR 0 2
58144: PPUSH
58145: LD_VAR 0 3
58149: PPUSH
58150: LD_VAR 0 4
58154: PPUSH
58155: LD_VAR 0 5
58159: PUSH
58160: LD_INT 1
58162: ARRAY
58163: PPUSH
58164: CALL_OW 248
58168: PPUSH
58169: LD_INT 0
58171: PPUSH
58172: CALL 60181 0 6
58176: ST_TO_ADDR
// if not hexes then
58177: LD_VAR 0 14
58181: NOT
58182: IFFALSE 58186
// exit ;
58184: GO 58944
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58186: LD_ADDR_VAR 0 17
58190: PUSH
58191: LD_VAR 0 5
58195: PPUSH
58196: LD_INT 22
58198: PUSH
58199: LD_VAR 0 13
58203: PPUSH
58204: CALL_OW 255
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: LD_INT 30
58218: PUSH
58219: LD_INT 0
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 30
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: LIST
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PPUSH
58245: CALL_OW 72
58249: ST_TO_ADDR
// for i = 1 to hexes do
58250: LD_ADDR_VAR 0 9
58254: PUSH
58255: DOUBLE
58256: LD_INT 1
58258: DEC
58259: ST_TO_ADDR
58260: LD_VAR 0 14
58264: PUSH
58265: FOR_TO
58266: IFFALSE 58942
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58268: LD_ADDR_VAR 0 13
58272: PUSH
58273: LD_VAR 0 14
58277: PUSH
58278: LD_VAR 0 9
58282: ARRAY
58283: PUSH
58284: LD_INT 1
58286: ARRAY
58287: PPUSH
58288: LD_VAR 0 14
58292: PUSH
58293: LD_VAR 0 9
58297: ARRAY
58298: PUSH
58299: LD_INT 2
58301: ARRAY
58302: PPUSH
58303: CALL_OW 428
58307: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
58308: LD_VAR 0 14
58312: PUSH
58313: LD_VAR 0 9
58317: ARRAY
58318: PUSH
58319: LD_INT 1
58321: ARRAY
58322: PPUSH
58323: LD_VAR 0 14
58327: PUSH
58328: LD_VAR 0 9
58332: ARRAY
58333: PUSH
58334: LD_INT 2
58336: ARRAY
58337: PPUSH
58338: CALL_OW 351
58342: PUSH
58343: LD_VAR 0 14
58347: PUSH
58348: LD_VAR 0 9
58352: ARRAY
58353: PUSH
58354: LD_INT 1
58356: ARRAY
58357: PPUSH
58358: LD_VAR 0 14
58362: PUSH
58363: LD_VAR 0 9
58367: ARRAY
58368: PUSH
58369: LD_INT 2
58371: ARRAY
58372: PPUSH
58373: CALL_OW 488
58377: NOT
58378: OR
58379: PUSH
58380: LD_VAR 0 13
58384: PPUSH
58385: CALL_OW 247
58389: PUSH
58390: LD_INT 3
58392: EQUAL
58393: OR
58394: IFFALSE 58400
// exit ;
58396: POP
58397: POP
58398: GO 58944
// if not tmp then
58400: LD_VAR 0 13
58404: NOT
58405: IFFALSE 58409
// continue ;
58407: GO 58265
// result := true ;
58409: LD_ADDR_VAR 0 8
58413: PUSH
58414: LD_INT 1
58416: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
58417: LD_VAR 0 6
58421: PUSH
58422: LD_VAR 0 13
58426: PPUSH
58427: CALL_OW 247
58431: PUSH
58432: LD_INT 2
58434: EQUAL
58435: AND
58436: PUSH
58437: LD_VAR 0 13
58441: PPUSH
58442: CALL_OW 263
58446: PUSH
58447: LD_INT 1
58449: EQUAL
58450: AND
58451: IFFALSE 58615
// begin if IsDrivenBy ( tmp ) then
58453: LD_VAR 0 13
58457: PPUSH
58458: CALL_OW 311
58462: IFFALSE 58466
// continue ;
58464: GO 58265
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
58466: LD_VAR 0 6
58470: PPUSH
58471: LD_INT 3
58473: PUSH
58474: LD_INT 60
58476: PUSH
58477: EMPTY
58478: LIST
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 3
58486: PUSH
58487: LD_INT 55
58489: PUSH
58490: EMPTY
58491: LIST
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PPUSH
58501: CALL_OW 72
58505: IFFALSE 58613
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
58507: LD_ADDR_VAR 0 18
58511: PUSH
58512: LD_VAR 0 6
58516: PPUSH
58517: LD_INT 3
58519: PUSH
58520: LD_INT 60
58522: PUSH
58523: EMPTY
58524: LIST
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 3
58532: PUSH
58533: LD_INT 55
58535: PUSH
58536: EMPTY
58537: LIST
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PPUSH
58547: CALL_OW 72
58551: PUSH
58552: LD_INT 1
58554: ARRAY
58555: ST_TO_ADDR
// if IsInUnit ( driver ) then
58556: LD_VAR 0 18
58560: PPUSH
58561: CALL_OW 310
58565: IFFALSE 58576
// ComExit ( driver ) ;
58567: LD_VAR 0 18
58571: PPUSH
58572: CALL 83309 0 1
// AddComEnterUnit ( driver , tmp ) ;
58576: LD_VAR 0 18
58580: PPUSH
58581: LD_VAR 0 13
58585: PPUSH
58586: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
58590: LD_VAR 0 18
58594: PPUSH
58595: LD_VAR 0 7
58599: PPUSH
58600: CALL_OW 173
// AddComExitVehicle ( driver ) ;
58604: LD_VAR 0 18
58608: PPUSH
58609: CALL_OW 181
// end ; continue ;
58613: GO 58265
// end ; if not cleaners or not tmp in cleaners then
58615: LD_VAR 0 6
58619: NOT
58620: PUSH
58621: LD_VAR 0 13
58625: PUSH
58626: LD_VAR 0 6
58630: IN
58631: NOT
58632: OR
58633: IFFALSE 58940
// begin if dep then
58635: LD_VAR 0 17
58639: IFFALSE 58775
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
58641: LD_ADDR_VAR 0 16
58645: PUSH
58646: LD_VAR 0 17
58650: PUSH
58651: LD_INT 1
58653: ARRAY
58654: PPUSH
58655: CALL_OW 250
58659: PPUSH
58660: LD_VAR 0 17
58664: PUSH
58665: LD_INT 1
58667: ARRAY
58668: PPUSH
58669: CALL_OW 254
58673: PPUSH
58674: LD_INT 5
58676: PPUSH
58677: CALL_OW 272
58681: PUSH
58682: LD_VAR 0 17
58686: PUSH
58687: LD_INT 1
58689: ARRAY
58690: PPUSH
58691: CALL_OW 251
58695: PPUSH
58696: LD_VAR 0 17
58700: PUSH
58701: LD_INT 1
58703: ARRAY
58704: PPUSH
58705: CALL_OW 254
58709: PPUSH
58710: LD_INT 5
58712: PPUSH
58713: CALL_OW 273
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
58722: LD_VAR 0 16
58726: PUSH
58727: LD_INT 1
58729: ARRAY
58730: PPUSH
58731: LD_VAR 0 16
58735: PUSH
58736: LD_INT 2
58738: ARRAY
58739: PPUSH
58740: CALL_OW 488
58744: IFFALSE 58775
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
58746: LD_VAR 0 13
58750: PPUSH
58751: LD_VAR 0 16
58755: PUSH
58756: LD_INT 1
58758: ARRAY
58759: PPUSH
58760: LD_VAR 0 16
58764: PUSH
58765: LD_INT 2
58767: ARRAY
58768: PPUSH
58769: CALL_OW 111
// continue ;
58773: GO 58265
// end ; end ; r := GetDir ( tmp ) ;
58775: LD_ADDR_VAR 0 15
58779: PUSH
58780: LD_VAR 0 13
58784: PPUSH
58785: CALL_OW 254
58789: ST_TO_ADDR
// if r = 5 then
58790: LD_VAR 0 15
58794: PUSH
58795: LD_INT 5
58797: EQUAL
58798: IFFALSE 58808
// r := 0 ;
58800: LD_ADDR_VAR 0 15
58804: PUSH
58805: LD_INT 0
58807: ST_TO_ADDR
// for j = r to 5 do
58808: LD_ADDR_VAR 0 10
58812: PUSH
58813: DOUBLE
58814: LD_VAR 0 15
58818: DEC
58819: ST_TO_ADDR
58820: LD_INT 5
58822: PUSH
58823: FOR_TO
58824: IFFALSE 58938
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
58826: LD_ADDR_VAR 0 11
58830: PUSH
58831: LD_VAR 0 13
58835: PPUSH
58836: CALL_OW 250
58840: PPUSH
58841: LD_VAR 0 10
58845: PPUSH
58846: LD_INT 2
58848: PPUSH
58849: CALL_OW 272
58853: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
58854: LD_ADDR_VAR 0 12
58858: PUSH
58859: LD_VAR 0 13
58863: PPUSH
58864: CALL_OW 251
58868: PPUSH
58869: LD_VAR 0 10
58873: PPUSH
58874: LD_INT 2
58876: PPUSH
58877: CALL_OW 273
58881: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
58882: LD_VAR 0 11
58886: PPUSH
58887: LD_VAR 0 12
58891: PPUSH
58892: CALL_OW 488
58896: PUSH
58897: LD_VAR 0 11
58901: PPUSH
58902: LD_VAR 0 12
58906: PPUSH
58907: CALL_OW 428
58911: NOT
58912: AND
58913: IFFALSE 58936
// begin ComMoveXY ( tmp , _x , _y ) ;
58915: LD_VAR 0 13
58919: PPUSH
58920: LD_VAR 0 11
58924: PPUSH
58925: LD_VAR 0 12
58929: PPUSH
58930: CALL_OW 111
// break ;
58934: GO 58938
// end ; end ;
58936: GO 58823
58938: POP
58939: POP
// end ; end ;
58940: GO 58265
58942: POP
58943: POP
// end ;
58944: LD_VAR 0 8
58948: RET
// export function BuildingTechInvented ( side , btype ) ; begin
58949: LD_INT 0
58951: PPUSH
// result := true ;
58952: LD_ADDR_VAR 0 3
58956: PUSH
58957: LD_INT 1
58959: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
58960: LD_VAR 0 2
58964: PUSH
58965: LD_INT 24
58967: DOUBLE
58968: EQUAL
58969: IFTRUE 58979
58971: LD_INT 33
58973: DOUBLE
58974: EQUAL
58975: IFTRUE 58979
58977: GO 59004
58979: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
58980: LD_ADDR_VAR 0 3
58984: PUSH
58985: LD_INT 32
58987: PPUSH
58988: LD_VAR 0 1
58992: PPUSH
58993: CALL_OW 321
58997: PUSH
58998: LD_INT 2
59000: EQUAL
59001: ST_TO_ADDR
59002: GO 59324
59004: LD_INT 20
59006: DOUBLE
59007: EQUAL
59008: IFTRUE 59012
59010: GO 59037
59012: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
59013: LD_ADDR_VAR 0 3
59017: PUSH
59018: LD_INT 6
59020: PPUSH
59021: LD_VAR 0 1
59025: PPUSH
59026: CALL_OW 321
59030: PUSH
59031: LD_INT 2
59033: EQUAL
59034: ST_TO_ADDR
59035: GO 59324
59037: LD_INT 22
59039: DOUBLE
59040: EQUAL
59041: IFTRUE 59051
59043: LD_INT 36
59045: DOUBLE
59046: EQUAL
59047: IFTRUE 59051
59049: GO 59076
59051: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
59052: LD_ADDR_VAR 0 3
59056: PUSH
59057: LD_INT 15
59059: PPUSH
59060: LD_VAR 0 1
59064: PPUSH
59065: CALL_OW 321
59069: PUSH
59070: LD_INT 2
59072: EQUAL
59073: ST_TO_ADDR
59074: GO 59324
59076: LD_INT 30
59078: DOUBLE
59079: EQUAL
59080: IFTRUE 59084
59082: GO 59109
59084: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
59085: LD_ADDR_VAR 0 3
59089: PUSH
59090: LD_INT 20
59092: PPUSH
59093: LD_VAR 0 1
59097: PPUSH
59098: CALL_OW 321
59102: PUSH
59103: LD_INT 2
59105: EQUAL
59106: ST_TO_ADDR
59107: GO 59324
59109: LD_INT 28
59111: DOUBLE
59112: EQUAL
59113: IFTRUE 59123
59115: LD_INT 21
59117: DOUBLE
59118: EQUAL
59119: IFTRUE 59123
59121: GO 59148
59123: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
59124: LD_ADDR_VAR 0 3
59128: PUSH
59129: LD_INT 21
59131: PPUSH
59132: LD_VAR 0 1
59136: PPUSH
59137: CALL_OW 321
59141: PUSH
59142: LD_INT 2
59144: EQUAL
59145: ST_TO_ADDR
59146: GO 59324
59148: LD_INT 16
59150: DOUBLE
59151: EQUAL
59152: IFTRUE 59156
59154: GO 59183
59156: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
59157: LD_ADDR_VAR 0 3
59161: PUSH
59162: LD_EXP 60
59166: PPUSH
59167: LD_VAR 0 1
59171: PPUSH
59172: CALL_OW 321
59176: PUSH
59177: LD_INT 2
59179: EQUAL
59180: ST_TO_ADDR
59181: GO 59324
59183: LD_INT 19
59185: DOUBLE
59186: EQUAL
59187: IFTRUE 59197
59189: LD_INT 23
59191: DOUBLE
59192: EQUAL
59193: IFTRUE 59197
59195: GO 59224
59197: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
59198: LD_ADDR_VAR 0 3
59202: PUSH
59203: LD_EXP 59
59207: PPUSH
59208: LD_VAR 0 1
59212: PPUSH
59213: CALL_OW 321
59217: PUSH
59218: LD_INT 2
59220: EQUAL
59221: ST_TO_ADDR
59222: GO 59324
59224: LD_INT 17
59226: DOUBLE
59227: EQUAL
59228: IFTRUE 59232
59230: GO 59257
59232: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
59233: LD_ADDR_VAR 0 3
59237: PUSH
59238: LD_INT 39
59240: PPUSH
59241: LD_VAR 0 1
59245: PPUSH
59246: CALL_OW 321
59250: PUSH
59251: LD_INT 2
59253: EQUAL
59254: ST_TO_ADDR
59255: GO 59324
59257: LD_INT 18
59259: DOUBLE
59260: EQUAL
59261: IFTRUE 59265
59263: GO 59290
59265: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
59266: LD_ADDR_VAR 0 3
59270: PUSH
59271: LD_INT 40
59273: PPUSH
59274: LD_VAR 0 1
59278: PPUSH
59279: CALL_OW 321
59283: PUSH
59284: LD_INT 2
59286: EQUAL
59287: ST_TO_ADDR
59288: GO 59324
59290: LD_INT 27
59292: DOUBLE
59293: EQUAL
59294: IFTRUE 59298
59296: GO 59323
59298: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
59299: LD_ADDR_VAR 0 3
59303: PUSH
59304: LD_INT 35
59306: PPUSH
59307: LD_VAR 0 1
59311: PPUSH
59312: CALL_OW 321
59316: PUSH
59317: LD_INT 2
59319: EQUAL
59320: ST_TO_ADDR
59321: GO 59324
59323: POP
// end ;
59324: LD_VAR 0 3
59328: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
59329: LD_INT 0
59331: PPUSH
59332: PPUSH
59333: PPUSH
59334: PPUSH
59335: PPUSH
59336: PPUSH
59337: PPUSH
59338: PPUSH
59339: PPUSH
59340: PPUSH
59341: PPUSH
// result := false ;
59342: LD_ADDR_VAR 0 6
59346: PUSH
59347: LD_INT 0
59349: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
59350: LD_VAR 0 1
59354: NOT
59355: PUSH
59356: LD_VAR 0 1
59360: PPUSH
59361: CALL_OW 266
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: IN
59376: NOT
59377: OR
59378: PUSH
59379: LD_VAR 0 2
59383: NOT
59384: OR
59385: PUSH
59386: LD_VAR 0 5
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: LD_INT 2
59399: PUSH
59400: LD_INT 3
59402: PUSH
59403: LD_INT 4
59405: PUSH
59406: LD_INT 5
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: IN
59417: NOT
59418: OR
59419: PUSH
59420: LD_VAR 0 3
59424: PPUSH
59425: LD_VAR 0 4
59429: PPUSH
59430: CALL_OW 488
59434: NOT
59435: OR
59436: IFFALSE 59440
// exit ;
59438: GO 60176
// side := GetSide ( depot ) ;
59440: LD_ADDR_VAR 0 9
59444: PUSH
59445: LD_VAR 0 1
59449: PPUSH
59450: CALL_OW 255
59454: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
59455: LD_VAR 0 9
59459: PPUSH
59460: LD_VAR 0 2
59464: PPUSH
59465: CALL 58949 0 2
59469: NOT
59470: IFFALSE 59474
// exit ;
59472: GO 60176
// pom := GetBase ( depot ) ;
59474: LD_ADDR_VAR 0 10
59478: PUSH
59479: LD_VAR 0 1
59483: PPUSH
59484: CALL_OW 274
59488: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59489: LD_ADDR_VAR 0 11
59493: PUSH
59494: LD_VAR 0 2
59498: PPUSH
59499: LD_VAR 0 1
59503: PPUSH
59504: CALL_OW 248
59508: PPUSH
59509: CALL_OW 450
59513: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
59514: LD_VAR 0 10
59518: PPUSH
59519: LD_INT 1
59521: PPUSH
59522: CALL_OW 275
59526: PUSH
59527: LD_VAR 0 11
59531: PUSH
59532: LD_INT 1
59534: ARRAY
59535: GREATEREQUAL
59536: PUSH
59537: LD_VAR 0 10
59541: PPUSH
59542: LD_INT 2
59544: PPUSH
59545: CALL_OW 275
59549: PUSH
59550: LD_VAR 0 11
59554: PUSH
59555: LD_INT 2
59557: ARRAY
59558: GREATEREQUAL
59559: AND
59560: PUSH
59561: LD_VAR 0 10
59565: PPUSH
59566: LD_INT 3
59568: PPUSH
59569: CALL_OW 275
59573: PUSH
59574: LD_VAR 0 11
59578: PUSH
59579: LD_INT 3
59581: ARRAY
59582: GREATEREQUAL
59583: AND
59584: NOT
59585: IFFALSE 59589
// exit ;
59587: GO 60176
// if GetBType ( depot ) = b_depot then
59589: LD_VAR 0 1
59593: PPUSH
59594: CALL_OW 266
59598: PUSH
59599: LD_INT 0
59601: EQUAL
59602: IFFALSE 59614
// dist := 28 else
59604: LD_ADDR_VAR 0 14
59608: PUSH
59609: LD_INT 28
59611: ST_TO_ADDR
59612: GO 59622
// dist := 36 ;
59614: LD_ADDR_VAR 0 14
59618: PUSH
59619: LD_INT 36
59621: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
59622: LD_VAR 0 1
59626: PPUSH
59627: LD_VAR 0 3
59631: PPUSH
59632: LD_VAR 0 4
59636: PPUSH
59637: CALL_OW 297
59641: PUSH
59642: LD_VAR 0 14
59646: GREATER
59647: IFFALSE 59651
// exit ;
59649: GO 60176
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
59651: LD_ADDR_VAR 0 12
59655: PUSH
59656: LD_VAR 0 2
59660: PPUSH
59661: LD_VAR 0 3
59665: PPUSH
59666: LD_VAR 0 4
59670: PPUSH
59671: LD_VAR 0 5
59675: PPUSH
59676: LD_VAR 0 1
59680: PPUSH
59681: CALL_OW 248
59685: PPUSH
59686: LD_INT 0
59688: PPUSH
59689: CALL 60181 0 6
59693: ST_TO_ADDR
// if not hexes then
59694: LD_VAR 0 12
59698: NOT
59699: IFFALSE 59703
// exit ;
59701: GO 60176
// hex := GetHexInfo ( x , y ) ;
59703: LD_ADDR_VAR 0 15
59707: PUSH
59708: LD_VAR 0 3
59712: PPUSH
59713: LD_VAR 0 4
59717: PPUSH
59718: CALL_OW 546
59722: ST_TO_ADDR
// if hex [ 1 ] then
59723: LD_VAR 0 15
59727: PUSH
59728: LD_INT 1
59730: ARRAY
59731: IFFALSE 59735
// exit ;
59733: GO 60176
// height := hex [ 2 ] ;
59735: LD_ADDR_VAR 0 13
59739: PUSH
59740: LD_VAR 0 15
59744: PUSH
59745: LD_INT 2
59747: ARRAY
59748: ST_TO_ADDR
// for i = 1 to hexes do
59749: LD_ADDR_VAR 0 7
59753: PUSH
59754: DOUBLE
59755: LD_INT 1
59757: DEC
59758: ST_TO_ADDR
59759: LD_VAR 0 12
59763: PUSH
59764: FOR_TO
59765: IFFALSE 60095
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
59767: LD_VAR 0 12
59771: PUSH
59772: LD_VAR 0 7
59776: ARRAY
59777: PUSH
59778: LD_INT 1
59780: ARRAY
59781: PPUSH
59782: LD_VAR 0 12
59786: PUSH
59787: LD_VAR 0 7
59791: ARRAY
59792: PUSH
59793: LD_INT 2
59795: ARRAY
59796: PPUSH
59797: CALL_OW 488
59801: NOT
59802: PUSH
59803: LD_VAR 0 12
59807: PUSH
59808: LD_VAR 0 7
59812: ARRAY
59813: PUSH
59814: LD_INT 1
59816: ARRAY
59817: PPUSH
59818: LD_VAR 0 12
59822: PUSH
59823: LD_VAR 0 7
59827: ARRAY
59828: PUSH
59829: LD_INT 2
59831: ARRAY
59832: PPUSH
59833: CALL_OW 428
59837: PUSH
59838: LD_INT 0
59840: GREATER
59841: OR
59842: PUSH
59843: LD_VAR 0 12
59847: PUSH
59848: LD_VAR 0 7
59852: ARRAY
59853: PUSH
59854: LD_INT 1
59856: ARRAY
59857: PPUSH
59858: LD_VAR 0 12
59862: PUSH
59863: LD_VAR 0 7
59867: ARRAY
59868: PUSH
59869: LD_INT 2
59871: ARRAY
59872: PPUSH
59873: CALL_OW 351
59877: OR
59878: IFFALSE 59884
// exit ;
59880: POP
59881: POP
59882: GO 60176
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59884: LD_ADDR_VAR 0 8
59888: PUSH
59889: LD_VAR 0 12
59893: PUSH
59894: LD_VAR 0 7
59898: ARRAY
59899: PUSH
59900: LD_INT 1
59902: ARRAY
59903: PPUSH
59904: LD_VAR 0 12
59908: PUSH
59909: LD_VAR 0 7
59913: ARRAY
59914: PUSH
59915: LD_INT 2
59917: ARRAY
59918: PPUSH
59919: CALL_OW 546
59923: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
59924: LD_VAR 0 8
59928: PUSH
59929: LD_INT 1
59931: ARRAY
59932: PUSH
59933: LD_VAR 0 8
59937: PUSH
59938: LD_INT 2
59940: ARRAY
59941: PUSH
59942: LD_VAR 0 13
59946: PUSH
59947: LD_INT 2
59949: PLUS
59950: GREATER
59951: OR
59952: PUSH
59953: LD_VAR 0 8
59957: PUSH
59958: LD_INT 2
59960: ARRAY
59961: PUSH
59962: LD_VAR 0 13
59966: PUSH
59967: LD_INT 2
59969: MINUS
59970: LESS
59971: OR
59972: PUSH
59973: LD_VAR 0 8
59977: PUSH
59978: LD_INT 3
59980: ARRAY
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: LD_INT 8
59987: PUSH
59988: LD_INT 9
59990: PUSH
59991: LD_INT 10
59993: PUSH
59994: LD_INT 11
59996: PUSH
59997: LD_INT 12
59999: PUSH
60000: LD_INT 13
60002: PUSH
60003: LD_INT 16
60005: PUSH
60006: LD_INT 17
60008: PUSH
60009: LD_INT 18
60011: PUSH
60012: LD_INT 19
60014: PUSH
60015: LD_INT 20
60017: PUSH
60018: LD_INT 21
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: IN
60036: NOT
60037: OR
60038: PUSH
60039: LD_VAR 0 8
60043: PUSH
60044: LD_INT 5
60046: ARRAY
60047: NOT
60048: OR
60049: PUSH
60050: LD_VAR 0 8
60054: PUSH
60055: LD_INT 6
60057: ARRAY
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: LD_INT 2
60064: PUSH
60065: LD_INT 7
60067: PUSH
60068: LD_INT 9
60070: PUSH
60071: LD_INT 10
60073: PUSH
60074: LD_INT 11
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: IN
60085: NOT
60086: OR
60087: IFFALSE 60093
// exit ;
60089: POP
60090: POP
60091: GO 60176
// end ;
60093: GO 59764
60095: POP
60096: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
60097: LD_VAR 0 9
60101: PPUSH
60102: LD_VAR 0 3
60106: PPUSH
60107: LD_VAR 0 4
60111: PPUSH
60112: LD_INT 20
60114: PPUSH
60115: CALL 52122 0 4
60119: PUSH
60120: LD_INT 4
60122: ARRAY
60123: IFFALSE 60127
// exit ;
60125: GO 60176
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
60127: LD_VAR 0 2
60131: PUSH
60132: LD_INT 29
60134: PUSH
60135: LD_INT 30
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: IN
60142: PUSH
60143: LD_VAR 0 3
60147: PPUSH
60148: LD_VAR 0 4
60152: PPUSH
60153: LD_VAR 0 9
60157: PPUSH
60158: CALL_OW 440
60162: NOT
60163: AND
60164: IFFALSE 60168
// exit ;
60166: GO 60176
// result := true ;
60168: LD_ADDR_VAR 0 6
60172: PUSH
60173: LD_INT 1
60175: ST_TO_ADDR
// end ;
60176: LD_VAR 0 6
60180: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
60181: LD_INT 0
60183: PPUSH
60184: PPUSH
60185: PPUSH
60186: PPUSH
60187: PPUSH
60188: PPUSH
60189: PPUSH
60190: PPUSH
60191: PPUSH
60192: PPUSH
60193: PPUSH
60194: PPUSH
60195: PPUSH
60196: PPUSH
60197: PPUSH
60198: PPUSH
60199: PPUSH
60200: PPUSH
60201: PPUSH
60202: PPUSH
60203: PPUSH
60204: PPUSH
60205: PPUSH
60206: PPUSH
60207: PPUSH
60208: PPUSH
60209: PPUSH
60210: PPUSH
60211: PPUSH
60212: PPUSH
60213: PPUSH
60214: PPUSH
60215: PPUSH
60216: PPUSH
60217: PPUSH
60218: PPUSH
60219: PPUSH
60220: PPUSH
60221: PPUSH
60222: PPUSH
60223: PPUSH
60224: PPUSH
60225: PPUSH
60226: PPUSH
60227: PPUSH
60228: PPUSH
60229: PPUSH
60230: PPUSH
60231: PPUSH
60232: PPUSH
60233: PPUSH
60234: PPUSH
60235: PPUSH
60236: PPUSH
60237: PPUSH
60238: PPUSH
60239: PPUSH
60240: PPUSH
// result = [ ] ;
60241: LD_ADDR_VAR 0 7
60245: PUSH
60246: EMPTY
60247: ST_TO_ADDR
// temp_list = [ ] ;
60248: LD_ADDR_VAR 0 9
60252: PUSH
60253: EMPTY
60254: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
60255: LD_VAR 0 4
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: LD_INT 2
60268: PUSH
60269: LD_INT 3
60271: PUSH
60272: LD_INT 4
60274: PUSH
60275: LD_INT 5
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: IN
60286: NOT
60287: PUSH
60288: LD_VAR 0 1
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: IN
60303: PUSH
60304: LD_VAR 0 5
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: LD_INT 2
60314: PUSH
60315: LD_INT 3
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: LIST
60322: IN
60323: NOT
60324: AND
60325: OR
60326: IFFALSE 60330
// exit ;
60328: GO 78721
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
60330: LD_VAR 0 1
60334: PUSH
60335: LD_INT 6
60337: PUSH
60338: LD_INT 7
60340: PUSH
60341: LD_INT 8
60343: PUSH
60344: LD_INT 13
60346: PUSH
60347: LD_INT 12
60349: PUSH
60350: LD_INT 15
60352: PUSH
60353: LD_INT 11
60355: PUSH
60356: LD_INT 14
60358: PUSH
60359: LD_INT 10
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: IN
60373: IFFALSE 60383
// btype = b_lab ;
60375: LD_ADDR_VAR 0 1
60379: PUSH
60380: LD_INT 6
60382: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
60383: LD_VAR 0 6
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: LD_INT 1
60393: PUSH
60394: LD_INT 2
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: LIST
60401: IN
60402: NOT
60403: PUSH
60404: LD_VAR 0 1
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: LD_INT 2
60417: PUSH
60418: LD_INT 3
60420: PUSH
60421: LD_INT 6
60423: PUSH
60424: LD_INT 36
60426: PUSH
60427: LD_INT 4
60429: PUSH
60430: LD_INT 5
60432: PUSH
60433: LD_INT 31
60435: PUSH
60436: LD_INT 32
60438: PUSH
60439: LD_INT 33
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: IN
60455: NOT
60456: PUSH
60457: LD_VAR 0 6
60461: PUSH
60462: LD_INT 1
60464: EQUAL
60465: AND
60466: OR
60467: PUSH
60468: LD_VAR 0 1
60472: PUSH
60473: LD_INT 2
60475: PUSH
60476: LD_INT 3
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: IN
60483: NOT
60484: PUSH
60485: LD_VAR 0 6
60489: PUSH
60490: LD_INT 2
60492: EQUAL
60493: AND
60494: OR
60495: IFFALSE 60505
// mode = 0 ;
60497: LD_ADDR_VAR 0 6
60501: PUSH
60502: LD_INT 0
60504: ST_TO_ADDR
// case mode of 0 :
60505: LD_VAR 0 6
60509: PUSH
60510: LD_INT 0
60512: DOUBLE
60513: EQUAL
60514: IFTRUE 60518
60516: GO 71971
60518: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60519: LD_ADDR_VAR 0 11
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 0
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 1
60600: NEG
60601: PUSH
60602: LD_INT 2
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: LD_INT 2
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: LD_INT 2
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 1
60665: PUSH
60666: LD_INT 3
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: LD_INT 3
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: LD_INT 2
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60712: LD_ADDR_VAR 0 12
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 1
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 0
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 1
60770: NEG
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 1
60781: NEG
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 1
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 2
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 2
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 1
60824: NEG
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 2
60835: NEG
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 2
60846: NEG
60847: PUSH
60848: LD_INT 1
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 2
60858: NEG
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 3
60869: NEG
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 3
60880: NEG
60881: PUSH
60882: LD_INT 1
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60908: LD_ADDR_VAR 0 13
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 0
60925: PUSH
60926: LD_INT 1
60928: NEG
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 1
60946: PUSH
60947: LD_INT 1
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: LD_INT 1
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 1
60966: NEG
60967: PUSH
60968: LD_INT 0
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 1
60977: NEG
60978: PUSH
60979: LD_INT 1
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 1
60989: NEG
60990: PUSH
60991: LD_INT 2
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 2
61001: PUSH
61002: LD_INT 1
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 2
61011: PUSH
61012: LD_INT 2
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 1
61021: PUSH
61022: LD_INT 2
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 2
61031: NEG
61032: PUSH
61033: LD_INT 1
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 2
61043: NEG
61044: PUSH
61045: LD_INT 2
61047: NEG
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 2
61055: NEG
61056: PUSH
61057: LD_INT 3
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 3
61067: NEG
61068: PUSH
61069: LD_INT 2
61071: NEG
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 3
61079: NEG
61080: PUSH
61081: LD_INT 3
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61107: LD_ADDR_VAR 0 14
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: LD_INT 1
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 1
61145: PUSH
61146: LD_INT 1
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 0
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 1
61165: NEG
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: LD_INT 1
61180: NEG
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: LD_INT 2
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: LD_INT 2
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 1
61222: PUSH
61223: LD_INT 2
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: LD_INT 2
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: LD_INT 1
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 1
61253: NEG
61254: PUSH
61255: LD_INT 3
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 0
61265: PUSH
61266: LD_INT 3
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 1
61276: PUSH
61277: LD_INT 2
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61303: LD_ADDR_VAR 0 15
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 0
61320: PUSH
61321: LD_INT 1
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 1
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 1
61341: PUSH
61342: LD_INT 1
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 0
61351: PUSH
61352: LD_INT 1
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 1
61361: NEG
61362: PUSH
61363: LD_INT 0
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 1
61372: NEG
61373: PUSH
61374: LD_INT 1
61376: NEG
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: LD_INT 1
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 2
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 2
61405: PUSH
61406: LD_INT 1
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 1
61415: NEG
61416: PUSH
61417: LD_INT 1
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 2
61426: NEG
61427: PUSH
61428: LD_INT 0
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 2
61437: NEG
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 2
61449: PUSH
61450: LD_INT 1
61452: NEG
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 3
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 3
61470: PUSH
61471: LD_INT 1
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61496: LD_ADDR_VAR 0 16
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 0
61513: PUSH
61514: LD_INT 1
61516: NEG
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 1
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: LD_INT 1
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 0
61544: PUSH
61545: LD_INT 1
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 1
61565: NEG
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 2
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 2
61599: PUSH
61600: LD_INT 2
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 1
61609: PUSH
61610: LD_INT 2
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 2
61619: NEG
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 2
61631: NEG
61632: PUSH
61633: LD_INT 2
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 3
61643: PUSH
61644: LD_INT 2
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 3
61653: PUSH
61654: LD_INT 3
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 2
61663: PUSH
61664: LD_INT 3
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61689: LD_ADDR_VAR 0 17
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 0
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 1
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 1
61727: PUSH
61728: LD_INT 1
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: LD_INT 1
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 1
61747: NEG
61748: PUSH
61749: LD_INT 0
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 1
61758: NEG
61759: PUSH
61760: LD_INT 1
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: NEG
61771: PUSH
61772: LD_INT 2
61774: NEG
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: LD_INT 2
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: LD_INT 1
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 2
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 2
61824: PUSH
61825: LD_INT 2
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: LD_INT 2
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 0
61844: PUSH
61845: LD_INT 2
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 2
61865: NEG
61866: PUSH
61867: LD_INT 0
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: NEG
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 2
61888: NEG
61889: PUSH
61890: LD_INT 2
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61919: LD_ADDR_VAR 0 18
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 1
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: LD_INT 1
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 1
61977: NEG
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 1
61988: NEG
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 1
62000: NEG
62001: PUSH
62002: LD_INT 2
62004: NEG
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 0
62012: PUSH
62013: LD_INT 2
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 1
62023: PUSH
62024: LD_INT 1
62026: NEG
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 2
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 2
62044: PUSH
62045: LD_INT 1
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 2
62054: PUSH
62055: LD_INT 2
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: LD_INT 2
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 0
62074: PUSH
62075: LD_INT 2
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: LD_INT 1
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 2
62095: NEG
62096: PUSH
62097: LD_INT 0
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 2
62106: NEG
62107: PUSH
62108: LD_INT 1
62110: NEG
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 2
62118: NEG
62119: PUSH
62120: LD_INT 2
62122: NEG
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62149: LD_ADDR_VAR 0 19
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 0
62166: PUSH
62167: LD_INT 1
62169: NEG
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: PUSH
62178: LD_INT 0
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 1
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: LD_INT 1
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: LD_INT 0
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 1
62218: NEG
62219: PUSH
62220: LD_INT 1
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 1
62230: NEG
62231: PUSH
62232: LD_INT 2
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: LD_INT 2
62245: NEG
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: LD_INT 1
62256: NEG
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 2
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 2
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 2
62284: PUSH
62285: LD_INT 2
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: PUSH
62295: LD_INT 2
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 0
62304: PUSH
62305: LD_INT 2
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 2
62325: NEG
62326: PUSH
62327: LD_INT 0
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 2
62336: NEG
62337: PUSH
62338: LD_INT 1
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 2
62348: NEG
62349: PUSH
62350: LD_INT 2
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62379: LD_ADDR_VAR 0 20
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 0
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 1
62407: PUSH
62408: LD_INT 0
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: LD_INT 1
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 1
62437: NEG
62438: PUSH
62439: LD_INT 0
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: LD_INT 1
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: LD_INT 2
62464: NEG
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: LD_INT 2
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 1
62483: PUSH
62484: LD_INT 1
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: LD_INT 0
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: LD_INT 1
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 2
62514: PUSH
62515: LD_INT 2
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: LD_INT 2
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 0
62534: PUSH
62535: LD_INT 2
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 2
62555: NEG
62556: PUSH
62557: LD_INT 0
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 2
62566: NEG
62567: PUSH
62568: LD_INT 1
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 2
62578: NEG
62579: PUSH
62580: LD_INT 2
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62609: LD_ADDR_VAR 0 21
62613: PUSH
62614: LD_INT 0
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: LD_INT 1
62629: NEG
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: LD_INT 0
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 1
62647: PUSH
62648: LD_INT 1
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: LD_INT 1
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: NEG
62679: PUSH
62680: LD_INT 1
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 1
62690: NEG
62691: PUSH
62692: LD_INT 2
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: LD_INT 2
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: LD_INT 1
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 2
62724: PUSH
62725: LD_INT 0
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 2
62734: PUSH
62735: LD_INT 1
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 2
62744: PUSH
62745: LD_INT 2
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 1
62754: PUSH
62755: LD_INT 2
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: LD_INT 2
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 1
62774: NEG
62775: PUSH
62776: LD_INT 1
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 2
62785: NEG
62786: PUSH
62787: LD_INT 0
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 2
62796: NEG
62797: PUSH
62798: LD_INT 1
62800: NEG
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 2
62808: NEG
62809: PUSH
62810: LD_INT 2
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62839: LD_ADDR_VAR 0 22
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 0
62856: PUSH
62857: LD_INT 1
62859: NEG
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 1
62867: PUSH
62868: LD_INT 0
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 1
62877: PUSH
62878: LD_INT 1
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: LD_INT 1
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 1
62897: NEG
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 1
62908: NEG
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 1
62920: NEG
62921: PUSH
62922: LD_INT 2
62924: NEG
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 0
62932: PUSH
62933: LD_INT 2
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: LD_INT 1
62946: NEG
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 2
62954: PUSH
62955: LD_INT 0
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 2
62964: PUSH
62965: LD_INT 1
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 2
62974: PUSH
62975: LD_INT 2
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: LD_INT 2
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 0
62994: PUSH
62995: LD_INT 2
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 1
63004: NEG
63005: PUSH
63006: LD_INT 1
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 2
63015: NEG
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 2
63026: NEG
63027: PUSH
63028: LD_INT 1
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 2
63038: NEG
63039: PUSH
63040: LD_INT 2
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63069: LD_ADDR_VAR 0 23
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: LD_INT 0
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: LD_INT 1
63089: NEG
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: LD_INT 0
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 1
63107: PUSH
63108: LD_INT 1
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: LD_INT 1
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 1
63127: NEG
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: NEG
63139: PUSH
63140: LD_INT 1
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 1
63150: NEG
63151: PUSH
63152: LD_INT 2
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 0
63162: PUSH
63163: LD_INT 2
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 1
63173: PUSH
63174: LD_INT 1
63176: NEG
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 2
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 2
63194: PUSH
63195: LD_INT 1
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 2
63204: PUSH
63205: LD_INT 2
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 1
63214: PUSH
63215: LD_INT 2
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 0
63224: PUSH
63225: LD_INT 2
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 1
63234: NEG
63235: PUSH
63236: LD_INT 1
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 2
63245: NEG
63246: PUSH
63247: LD_INT 0
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 2
63256: NEG
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 2
63268: NEG
63269: PUSH
63270: LD_INT 2
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 2
63280: NEG
63281: PUSH
63282: LD_INT 3
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 1
63292: NEG
63293: PUSH
63294: LD_INT 3
63296: NEG
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 1
63304: PUSH
63305: LD_INT 2
63307: NEG
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 2
63315: PUSH
63316: LD_INT 1
63318: NEG
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
63349: LD_ADDR_VAR 0 24
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: LD_INT 0
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: LD_INT 1
63369: NEG
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 1
63387: PUSH
63388: LD_INT 1
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 0
63397: PUSH
63398: LD_INT 1
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 1
63407: NEG
63408: PUSH
63409: LD_INT 0
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 1
63418: NEG
63419: PUSH
63420: LD_INT 1
63422: NEG
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 1
63430: NEG
63431: PUSH
63432: LD_INT 2
63434: NEG
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: LD_INT 2
63445: NEG
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 1
63453: PUSH
63454: LD_INT 1
63456: NEG
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 2
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 2
63474: PUSH
63475: LD_INT 1
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 2
63484: PUSH
63485: LD_INT 2
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 1
63494: PUSH
63495: LD_INT 2
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 0
63504: PUSH
63505: LD_INT 2
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 1
63514: NEG
63515: PUSH
63516: LD_INT 1
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 2
63525: NEG
63526: PUSH
63527: LD_INT 0
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 2
63536: NEG
63537: PUSH
63538: LD_INT 1
63540: NEG
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 2
63548: NEG
63549: PUSH
63550: LD_INT 2
63552: NEG
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 1
63560: PUSH
63561: LD_INT 2
63563: NEG
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 2
63571: PUSH
63572: LD_INT 1
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 3
63582: PUSH
63583: LD_INT 1
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 3
63592: PUSH
63593: LD_INT 2
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
63625: LD_ADDR_VAR 0 25
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: LD_INT 1
63645: NEG
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: LD_INT 1
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: LD_INT 1
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 1
63694: NEG
63695: PUSH
63696: LD_INT 1
63698: NEG
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: NEG
63707: PUSH
63708: LD_INT 2
63710: NEG
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 0
63718: PUSH
63719: LD_INT 2
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 1
63729: PUSH
63730: LD_INT 1
63732: NEG
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 2
63740: PUSH
63741: LD_INT 0
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 2
63750: PUSH
63751: LD_INT 1
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 2
63760: PUSH
63761: LD_INT 2
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 1
63770: PUSH
63771: LD_INT 2
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: LD_INT 2
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 2
63801: NEG
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 2
63812: NEG
63813: PUSH
63814: LD_INT 1
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 2
63824: NEG
63825: PUSH
63826: LD_INT 2
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 3
63836: PUSH
63837: LD_INT 1
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 3
63846: PUSH
63847: LD_INT 2
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 2
63856: PUSH
63857: LD_INT 3
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 1
63866: PUSH
63867: LD_INT 3
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63899: LD_ADDR_VAR 0 26
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: LD_INT 0
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: LD_INT 1
63919: NEG
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: LD_INT 0
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 1
63937: PUSH
63938: LD_INT 1
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: LD_INT 1
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 1
63968: NEG
63969: PUSH
63970: LD_INT 1
63972: NEG
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 1
63980: NEG
63981: PUSH
63982: LD_INT 2
63984: NEG
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 0
63992: PUSH
63993: LD_INT 2
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: LD_INT 1
64006: NEG
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 2
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 2
64024: PUSH
64025: LD_INT 1
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 2
64034: PUSH
64035: LD_INT 2
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 1
64044: PUSH
64045: LD_INT 2
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 0
64054: PUSH
64055: LD_INT 2
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 1
64064: NEG
64065: PUSH
64066: LD_INT 1
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 2
64075: NEG
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 2
64086: NEG
64087: PUSH
64088: LD_INT 1
64090: NEG
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 2
64098: NEG
64099: PUSH
64100: LD_INT 2
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 2
64110: PUSH
64111: LD_INT 3
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 1
64120: PUSH
64121: LD_INT 3
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 1
64130: NEG
64131: PUSH
64132: LD_INT 2
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 2
64141: NEG
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64175: LD_ADDR_VAR 0 27
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 0
64192: PUSH
64193: LD_INT 1
64195: NEG
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 1
64203: PUSH
64204: LD_INT 0
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 1
64213: PUSH
64214: LD_INT 1
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 0
64223: PUSH
64224: LD_INT 1
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 1
64233: NEG
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 1
64244: NEG
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 1
64256: NEG
64257: PUSH
64258: LD_INT 2
64260: NEG
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: LD_INT 2
64271: NEG
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: LD_INT 1
64282: NEG
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 2
64290: PUSH
64291: LD_INT 0
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 2
64300: PUSH
64301: LD_INT 1
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 2
64310: PUSH
64311: LD_INT 2
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 1
64320: PUSH
64321: LD_INT 2
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 0
64330: PUSH
64331: LD_INT 2
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 1
64340: NEG
64341: PUSH
64342: LD_INT 1
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 2
64351: NEG
64352: PUSH
64353: LD_INT 0
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 2
64362: NEG
64363: PUSH
64364: LD_INT 1
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 2
64374: NEG
64375: PUSH
64376: LD_INT 2
64378: NEG
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 1
64386: NEG
64387: PUSH
64388: LD_INT 2
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 2
64397: NEG
64398: PUSH
64399: LD_INT 1
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 3
64408: NEG
64409: PUSH
64410: LD_INT 1
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 3
64420: NEG
64421: PUSH
64422: LD_INT 2
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64455: LD_ADDR_VAR 0 28
64459: PUSH
64460: LD_INT 0
64462: PUSH
64463: LD_INT 0
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: LD_INT 1
64475: NEG
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 1
64483: PUSH
64484: LD_INT 0
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 1
64493: PUSH
64494: LD_INT 1
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 0
64503: PUSH
64504: LD_INT 1
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 1
64513: NEG
64514: PUSH
64515: LD_INT 0
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: LD_INT 1
64528: NEG
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 1
64536: NEG
64537: PUSH
64538: LD_INT 2
64540: NEG
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 0
64548: PUSH
64549: LD_INT 2
64551: NEG
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 1
64559: PUSH
64560: LD_INT 1
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 2
64570: PUSH
64571: LD_INT 0
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 2
64580: PUSH
64581: LD_INT 1
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 2
64590: PUSH
64591: LD_INT 2
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: LD_INT 2
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: LD_INT 2
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 1
64620: NEG
64621: PUSH
64622: LD_INT 1
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 2
64631: NEG
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 2
64642: NEG
64643: PUSH
64644: LD_INT 1
64646: NEG
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 2
64654: NEG
64655: PUSH
64656: LD_INT 2
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 2
64666: NEG
64667: PUSH
64668: LD_INT 3
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 1
64678: NEG
64679: PUSH
64680: LD_INT 3
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 3
64690: NEG
64691: PUSH
64692: LD_INT 1
64694: NEG
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 3
64702: NEG
64703: PUSH
64704: LD_INT 2
64706: NEG
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64737: LD_ADDR_VAR 0 29
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: LD_INT 0
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 0
64754: PUSH
64755: LD_INT 1
64757: NEG
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 1
64765: PUSH
64766: LD_INT 0
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 1
64775: PUSH
64776: LD_INT 1
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 0
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 1
64795: NEG
64796: PUSH
64797: LD_INT 0
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 1
64806: NEG
64807: PUSH
64808: LD_INT 1
64810: NEG
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 1
64818: NEG
64819: PUSH
64820: LD_INT 2
64822: NEG
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: LD_INT 2
64833: NEG
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 1
64841: PUSH
64842: LD_INT 1
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 2
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 2
64862: PUSH
64863: LD_INT 1
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 1
64872: PUSH
64873: LD_INT 2
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: LD_INT 2
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 1
64892: NEG
64893: PUSH
64894: LD_INT 1
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 2
64903: NEG
64904: PUSH
64905: LD_INT 1
64907: NEG
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 2
64915: NEG
64916: PUSH
64917: LD_INT 2
64919: NEG
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 2
64927: NEG
64928: PUSH
64929: LD_INT 3
64931: NEG
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 2
64939: PUSH
64940: LD_INT 1
64942: NEG
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 3
64950: PUSH
64951: LD_INT 1
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 1
64960: PUSH
64961: LD_INT 3
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 1
64970: NEG
64971: PUSH
64972: LD_INT 2
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 3
64981: NEG
64982: PUSH
64983: LD_INT 2
64985: NEG
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65016: LD_ADDR_VAR 0 30
65020: PUSH
65021: LD_INT 0
65023: PUSH
65024: LD_INT 0
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 0
65033: PUSH
65034: LD_INT 1
65036: NEG
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: LD_INT 0
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: LD_INT 1
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 0
65064: PUSH
65065: LD_INT 1
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 1
65074: NEG
65075: PUSH
65076: LD_INT 0
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 1
65085: NEG
65086: PUSH
65087: LD_INT 1
65089: NEG
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 1
65097: NEG
65098: PUSH
65099: LD_INT 2
65101: NEG
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 0
65109: PUSH
65110: LD_INT 2
65112: NEG
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 1
65120: PUSH
65121: LD_INT 1
65123: NEG
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 2
65131: PUSH
65132: LD_INT 0
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 2
65141: PUSH
65142: LD_INT 1
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 2
65151: PUSH
65152: LD_INT 2
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 1
65161: PUSH
65162: LD_INT 2
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 1
65171: NEG
65172: PUSH
65173: LD_INT 1
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 2
65182: NEG
65183: PUSH
65184: LD_INT 0
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 2
65193: NEG
65194: PUSH
65195: LD_INT 1
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 1
65205: NEG
65206: PUSH
65207: LD_INT 3
65209: NEG
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 1
65217: PUSH
65218: LD_INT 2
65220: NEG
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 3
65228: PUSH
65229: LD_INT 2
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 2
65238: PUSH
65239: LD_INT 3
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 2
65248: NEG
65249: PUSH
65250: LD_INT 1
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 3
65259: NEG
65260: PUSH
65261: LD_INT 1
65263: NEG
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65294: LD_ADDR_VAR 0 31
65298: PUSH
65299: LD_INT 0
65301: PUSH
65302: LD_INT 0
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 0
65311: PUSH
65312: LD_INT 1
65314: NEG
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 1
65322: PUSH
65323: LD_INT 0
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 1
65332: PUSH
65333: LD_INT 1
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 0
65342: PUSH
65343: LD_INT 1
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 1
65352: NEG
65353: PUSH
65354: LD_INT 0
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 1
65363: NEG
65364: PUSH
65365: LD_INT 1
65367: NEG
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 1
65375: NEG
65376: PUSH
65377: LD_INT 2
65379: NEG
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 1
65387: PUSH
65388: LD_INT 1
65390: NEG
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 2
65398: PUSH
65399: LD_INT 0
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 2
65408: PUSH
65409: LD_INT 1
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 2
65418: PUSH
65419: LD_INT 2
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 1
65428: PUSH
65429: LD_INT 2
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 0
65438: PUSH
65439: LD_INT 2
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 1
65448: NEG
65449: PUSH
65450: LD_INT 1
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 2
65459: NEG
65460: PUSH
65461: LD_INT 1
65463: NEG
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 2
65471: NEG
65472: PUSH
65473: LD_INT 2
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 2
65483: NEG
65484: PUSH
65485: LD_INT 3
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 2
65495: PUSH
65496: LD_INT 1
65498: NEG
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 3
65506: PUSH
65507: LD_INT 1
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 1
65516: PUSH
65517: LD_INT 3
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: PUSH
65528: LD_INT 2
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 3
65537: NEG
65538: PUSH
65539: LD_INT 2
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65572: LD_ADDR_VAR 0 32
65576: PUSH
65577: LD_INT 0
65579: PUSH
65580: LD_INT 0
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 0
65589: PUSH
65590: LD_INT 1
65592: NEG
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 1
65600: PUSH
65601: LD_INT 0
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 1
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 0
65620: PUSH
65621: LD_INT 1
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: PUSH
65632: LD_INT 0
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 1
65641: NEG
65642: PUSH
65643: LD_INT 1
65645: NEG
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 1
65653: NEG
65654: PUSH
65655: LD_INT 2
65657: NEG
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 0
65665: PUSH
65666: LD_INT 2
65668: NEG
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 1
65676: PUSH
65677: LD_INT 1
65679: NEG
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 2
65687: PUSH
65688: LD_INT 1
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 2
65697: PUSH
65698: LD_INT 2
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 1
65707: PUSH
65708: LD_INT 2
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 0
65717: PUSH
65718: LD_INT 2
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 1
65727: NEG
65728: PUSH
65729: LD_INT 1
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 2
65738: NEG
65739: PUSH
65740: LD_INT 0
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 2
65749: NEG
65750: PUSH
65751: LD_INT 1
65753: NEG
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 1
65761: NEG
65762: PUSH
65763: LD_INT 3
65765: NEG
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 1
65773: PUSH
65774: LD_INT 2
65776: NEG
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 3
65784: PUSH
65785: LD_INT 2
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 2
65794: PUSH
65795: LD_INT 3
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 2
65804: NEG
65805: PUSH
65806: LD_INT 1
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 3
65815: NEG
65816: PUSH
65817: LD_INT 1
65819: NEG
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65850: LD_ADDR_VAR 0 33
65854: PUSH
65855: LD_INT 0
65857: PUSH
65858: LD_INT 0
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 0
65867: PUSH
65868: LD_INT 1
65870: NEG
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 1
65878: PUSH
65879: LD_INT 0
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 1
65888: PUSH
65889: LD_INT 1
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 0
65898: PUSH
65899: LD_INT 1
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 1
65908: NEG
65909: PUSH
65910: LD_INT 0
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 1
65919: NEG
65920: PUSH
65921: LD_INT 1
65923: NEG
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 1
65931: NEG
65932: PUSH
65933: LD_INT 2
65935: NEG
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 1
65943: PUSH
65944: LD_INT 1
65946: NEG
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 2
65954: PUSH
65955: LD_INT 0
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 2
65964: PUSH
65965: LD_INT 1
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 1
65974: PUSH
65975: LD_INT 2
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 0
65984: PUSH
65985: LD_INT 2
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 1
65994: NEG
65995: PUSH
65996: LD_INT 1
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 2
66005: NEG
66006: PUSH
66007: LD_INT 0
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 2
66016: NEG
66017: PUSH
66018: LD_INT 1
66020: NEG
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 2
66028: NEG
66029: PUSH
66030: LD_INT 2
66032: NEG
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 2
66040: NEG
66041: PUSH
66042: LD_INT 3
66044: NEG
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 2
66052: PUSH
66053: LD_INT 1
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 3
66063: PUSH
66064: LD_INT 1
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 1
66073: PUSH
66074: LD_INT 3
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 1
66083: NEG
66084: PUSH
66085: LD_INT 2
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 3
66094: NEG
66095: PUSH
66096: LD_INT 2
66098: NEG
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66129: LD_ADDR_VAR 0 34
66133: PUSH
66134: LD_INT 0
66136: PUSH
66137: LD_INT 0
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 0
66146: PUSH
66147: LD_INT 1
66149: NEG
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 1
66157: PUSH
66158: LD_INT 0
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 1
66167: PUSH
66168: LD_INT 1
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 0
66177: PUSH
66178: LD_INT 1
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 1
66187: NEG
66188: PUSH
66189: LD_INT 0
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 1
66198: NEG
66199: PUSH
66200: LD_INT 1
66202: NEG
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 1
66210: NEG
66211: PUSH
66212: LD_INT 2
66214: NEG
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: LD_INT 2
66225: NEG
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 1
66233: PUSH
66234: LD_INT 1
66236: NEG
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 2
66244: PUSH
66245: LD_INT 1
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 2
66254: PUSH
66255: LD_INT 2
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 1
66264: PUSH
66265: LD_INT 2
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 1
66274: NEG
66275: PUSH
66276: LD_INT 1
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 2
66285: NEG
66286: PUSH
66287: LD_INT 0
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 2
66296: NEG
66297: PUSH
66298: LD_INT 1
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 2
66308: NEG
66309: PUSH
66310: LD_INT 2
66312: NEG
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 1
66320: NEG
66321: PUSH
66322: LD_INT 3
66324: NEG
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 1
66332: PUSH
66333: LD_INT 2
66335: NEG
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 3
66343: PUSH
66344: LD_INT 2
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 2
66353: PUSH
66354: LD_INT 3
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 2
66363: NEG
66364: PUSH
66365: LD_INT 1
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 3
66374: NEG
66375: PUSH
66376: LD_INT 1
66378: NEG
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
66409: LD_ADDR_VAR 0 35
66413: PUSH
66414: LD_INT 0
66416: PUSH
66417: LD_INT 0
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 0
66426: PUSH
66427: LD_INT 1
66429: NEG
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 1
66437: PUSH
66438: LD_INT 0
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 1
66447: PUSH
66448: LD_INT 1
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 0
66457: PUSH
66458: LD_INT 1
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 1
66467: NEG
66468: PUSH
66469: LD_INT 0
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 1
66478: NEG
66479: PUSH
66480: LD_INT 1
66482: NEG
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 2
66490: PUSH
66491: LD_INT 1
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 2
66500: NEG
66501: PUSH
66502: LD_INT 1
66504: NEG
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
66521: LD_ADDR_VAR 0 36
66525: PUSH
66526: LD_INT 0
66528: PUSH
66529: LD_INT 0
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 0
66538: PUSH
66539: LD_INT 1
66541: NEG
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 1
66549: PUSH
66550: LD_INT 0
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 1
66559: PUSH
66560: LD_INT 1
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 0
66569: PUSH
66570: LD_INT 1
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 1
66579: NEG
66580: PUSH
66581: LD_INT 0
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 1
66590: NEG
66591: PUSH
66592: LD_INT 1
66594: NEG
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 1
66602: NEG
66603: PUSH
66604: LD_INT 2
66606: NEG
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 1
66614: PUSH
66615: LD_INT 2
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
66633: LD_ADDR_VAR 0 37
66637: PUSH
66638: LD_INT 0
66640: PUSH
66641: LD_INT 0
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 0
66650: PUSH
66651: LD_INT 1
66653: NEG
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 1
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 1
66671: PUSH
66672: LD_INT 1
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 0
66681: PUSH
66682: LD_INT 1
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 1
66691: NEG
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 1
66702: NEG
66703: PUSH
66704: LD_INT 1
66706: NEG
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 1
66714: PUSH
66715: LD_INT 1
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 1
66725: NEG
66726: PUSH
66727: LD_INT 1
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
66745: LD_ADDR_VAR 0 38
66749: PUSH
66750: LD_INT 0
66752: PUSH
66753: LD_INT 0
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 0
66762: PUSH
66763: LD_INT 1
66765: NEG
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 1
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 1
66783: PUSH
66784: LD_INT 1
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 0
66793: PUSH
66794: LD_INT 1
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 1
66803: NEG
66804: PUSH
66805: LD_INT 0
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 1
66814: NEG
66815: PUSH
66816: LD_INT 1
66818: NEG
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 2
66826: PUSH
66827: LD_INT 1
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 2
66836: NEG
66837: PUSH
66838: LD_INT 1
66840: NEG
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
66857: LD_ADDR_VAR 0 39
66861: PUSH
66862: LD_INT 0
66864: PUSH
66865: LD_INT 0
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 0
66874: PUSH
66875: LD_INT 1
66877: NEG
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 1
66885: PUSH
66886: LD_INT 0
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 1
66895: PUSH
66896: LD_INT 1
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 0
66905: PUSH
66906: LD_INT 1
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 1
66915: NEG
66916: PUSH
66917: LD_INT 0
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 1
66926: NEG
66927: PUSH
66928: LD_INT 1
66930: NEG
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 1
66938: NEG
66939: PUSH
66940: LD_INT 2
66942: NEG
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 1
66950: PUSH
66951: LD_INT 2
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
66969: LD_ADDR_VAR 0 40
66973: PUSH
66974: LD_INT 0
66976: PUSH
66977: LD_INT 0
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 0
66986: PUSH
66987: LD_INT 1
66989: NEG
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 1
66997: PUSH
66998: LD_INT 0
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 1
67007: PUSH
67008: LD_INT 1
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 0
67017: PUSH
67018: LD_INT 1
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 1
67027: NEG
67028: PUSH
67029: LD_INT 0
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 1
67038: NEG
67039: PUSH
67040: LD_INT 1
67042: NEG
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 1
67050: PUSH
67051: LD_INT 1
67053: NEG
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 1
67061: NEG
67062: PUSH
67063: LD_INT 1
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67081: LD_ADDR_VAR 0 41
67085: PUSH
67086: LD_INT 0
67088: PUSH
67089: LD_INT 0
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 0
67098: PUSH
67099: LD_INT 1
67101: NEG
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 1
67109: PUSH
67110: LD_INT 0
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 1
67119: PUSH
67120: LD_INT 1
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 0
67129: PUSH
67130: LD_INT 1
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 1
67139: NEG
67140: PUSH
67141: LD_INT 0
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 1
67150: NEG
67151: PUSH
67152: LD_INT 1
67154: NEG
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 1
67162: NEG
67163: PUSH
67164: LD_INT 2
67166: NEG
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 1
67174: PUSH
67175: LD_INT 1
67177: NEG
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 2
67185: PUSH
67186: LD_INT 0
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 2
67195: PUSH
67196: LD_INT 1
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 2
67205: PUSH
67206: LD_INT 2
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 1
67215: PUSH
67216: LD_INT 2
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 1
67225: NEG
67226: PUSH
67227: LD_INT 1
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 2
67236: NEG
67237: PUSH
67238: LD_INT 0
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 2
67247: NEG
67248: PUSH
67249: LD_INT 1
67251: NEG
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 2
67259: NEG
67260: PUSH
67261: LD_INT 2
67263: NEG
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 2
67271: NEG
67272: PUSH
67273: LD_INT 3
67275: NEG
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 2
67283: PUSH
67284: LD_INT 1
67286: NEG
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 3
67294: PUSH
67295: LD_INT 0
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 3
67304: PUSH
67305: LD_INT 1
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 3
67314: PUSH
67315: LD_INT 2
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 3
67324: PUSH
67325: LD_INT 3
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 2
67334: PUSH
67335: LD_INT 3
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 2
67344: NEG
67345: PUSH
67346: LD_INT 1
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 3
67355: NEG
67356: PUSH
67357: LD_INT 0
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 3
67366: NEG
67367: PUSH
67368: LD_INT 1
67370: NEG
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 3
67378: NEG
67379: PUSH
67380: LD_INT 2
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 3
67390: NEG
67391: PUSH
67392: LD_INT 3
67394: NEG
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67431: LD_ADDR_VAR 0 42
67435: PUSH
67436: LD_INT 0
67438: PUSH
67439: LD_INT 0
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 0
67448: PUSH
67449: LD_INT 1
67451: NEG
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 1
67459: PUSH
67460: LD_INT 0
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 1
67469: PUSH
67470: LD_INT 1
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 0
67479: PUSH
67480: LD_INT 1
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 1
67489: NEG
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 1
67500: NEG
67501: PUSH
67502: LD_INT 1
67504: NEG
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 1
67512: NEG
67513: PUSH
67514: LD_INT 2
67516: NEG
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 0
67524: PUSH
67525: LD_INT 2
67527: NEG
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 1
67535: PUSH
67536: LD_INT 1
67538: NEG
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 2
67546: PUSH
67547: LD_INT 1
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 2
67556: PUSH
67557: LD_INT 2
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 1
67566: PUSH
67567: LD_INT 2
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 0
67576: PUSH
67577: LD_INT 2
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 1
67586: NEG
67587: PUSH
67588: LD_INT 1
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 2
67597: NEG
67598: PUSH
67599: LD_INT 1
67601: NEG
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 2
67609: NEG
67610: PUSH
67611: LD_INT 2
67613: NEG
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 2
67621: NEG
67622: PUSH
67623: LD_INT 3
67625: NEG
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 1
67633: NEG
67634: PUSH
67635: LD_INT 3
67637: NEG
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 0
67645: PUSH
67646: LD_INT 3
67648: NEG
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 1
67656: PUSH
67657: LD_INT 2
67659: NEG
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 3
67667: PUSH
67668: LD_INT 2
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 3
67677: PUSH
67678: LD_INT 3
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 2
67687: PUSH
67688: LD_INT 3
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 1
67697: PUSH
67698: LD_INT 3
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 0
67707: PUSH
67708: LD_INT 3
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 1
67717: NEG
67718: PUSH
67719: LD_INT 2
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 3
67728: NEG
67729: PUSH
67730: LD_INT 2
67732: NEG
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 3
67740: NEG
67741: PUSH
67742: LD_INT 3
67744: NEG
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67781: LD_ADDR_VAR 0 43
67785: PUSH
67786: LD_INT 0
67788: PUSH
67789: LD_INT 0
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 0
67798: PUSH
67799: LD_INT 1
67801: NEG
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 1
67809: PUSH
67810: LD_INT 0
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 1
67819: PUSH
67820: LD_INT 1
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 0
67829: PUSH
67830: LD_INT 1
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 1
67839: NEG
67840: PUSH
67841: LD_INT 0
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 1
67850: NEG
67851: PUSH
67852: LD_INT 1
67854: NEG
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 1
67862: NEG
67863: PUSH
67864: LD_INT 2
67866: NEG
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 0
67874: PUSH
67875: LD_INT 2
67877: NEG
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 1
67885: PUSH
67886: LD_INT 1
67888: NEG
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 2
67896: PUSH
67897: LD_INT 0
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 2
67906: PUSH
67907: LD_INT 1
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 1
67916: PUSH
67917: LD_INT 2
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 0
67926: PUSH
67927: LD_INT 2
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: LD_INT 1
67936: NEG
67937: PUSH
67938: LD_INT 1
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 2
67947: NEG
67948: PUSH
67949: LD_INT 0
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 2
67958: NEG
67959: PUSH
67960: LD_INT 1
67962: NEG
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 1
67970: NEG
67971: PUSH
67972: LD_INT 3
67974: NEG
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 0
67982: PUSH
67983: LD_INT 3
67985: NEG
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 1
67993: PUSH
67994: LD_INT 2
67996: NEG
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 2
68004: PUSH
68005: LD_INT 1
68007: NEG
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 3
68015: PUSH
68016: LD_INT 0
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 3
68025: PUSH
68026: LD_INT 1
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 1
68035: PUSH
68036: LD_INT 3
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 0
68045: PUSH
68046: LD_INT 3
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 1
68055: NEG
68056: PUSH
68057: LD_INT 2
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 2
68066: NEG
68067: PUSH
68068: LD_INT 1
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 3
68077: NEG
68078: PUSH
68079: LD_INT 0
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 3
68088: NEG
68089: PUSH
68090: LD_INT 1
68092: NEG
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68129: LD_ADDR_VAR 0 44
68133: PUSH
68134: LD_INT 0
68136: PUSH
68137: LD_INT 0
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 0
68146: PUSH
68147: LD_INT 1
68149: NEG
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 1
68157: PUSH
68158: LD_INT 0
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 1
68167: PUSH
68168: LD_INT 1
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 0
68177: PUSH
68178: LD_INT 1
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 1
68187: NEG
68188: PUSH
68189: LD_INT 0
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 1
68198: NEG
68199: PUSH
68200: LD_INT 1
68202: NEG
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 1
68210: NEG
68211: PUSH
68212: LD_INT 2
68214: NEG
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 1
68222: PUSH
68223: LD_INT 1
68225: NEG
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 2
68233: PUSH
68234: LD_INT 0
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 2
68243: PUSH
68244: LD_INT 1
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 2
68253: PUSH
68254: LD_INT 2
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 1
68263: PUSH
68264: LD_INT 2
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 1
68273: NEG
68274: PUSH
68275: LD_INT 1
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 2
68284: NEG
68285: PUSH
68286: LD_INT 0
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 2
68295: NEG
68296: PUSH
68297: LD_INT 1
68299: NEG
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 2
68307: NEG
68308: PUSH
68309: LD_INT 2
68311: NEG
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 2
68319: NEG
68320: PUSH
68321: LD_INT 3
68323: NEG
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 2
68331: PUSH
68332: LD_INT 1
68334: NEG
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 3
68342: PUSH
68343: LD_INT 0
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 3
68352: PUSH
68353: LD_INT 1
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 3
68362: PUSH
68363: LD_INT 2
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 3
68372: PUSH
68373: LD_INT 3
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 2
68382: PUSH
68383: LD_INT 3
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 2
68392: NEG
68393: PUSH
68394: LD_INT 1
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 3
68403: NEG
68404: PUSH
68405: LD_INT 0
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 3
68414: NEG
68415: PUSH
68416: LD_INT 1
68418: NEG
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 3
68426: NEG
68427: PUSH
68428: LD_INT 2
68430: NEG
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 3
68438: NEG
68439: PUSH
68440: LD_INT 3
68442: NEG
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68479: LD_ADDR_VAR 0 45
68483: PUSH
68484: LD_INT 0
68486: PUSH
68487: LD_INT 0
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 0
68496: PUSH
68497: LD_INT 1
68499: NEG
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 1
68507: PUSH
68508: LD_INT 0
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 1
68517: PUSH
68518: LD_INT 1
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 0
68527: PUSH
68528: LD_INT 1
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 1
68537: NEG
68538: PUSH
68539: LD_INT 0
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 1
68548: NEG
68549: PUSH
68550: LD_INT 1
68552: NEG
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 1
68560: NEG
68561: PUSH
68562: LD_INT 2
68564: NEG
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 0
68572: PUSH
68573: LD_INT 2
68575: NEG
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 1
68583: PUSH
68584: LD_INT 1
68586: NEG
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 2
68594: PUSH
68595: LD_INT 1
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 2
68604: PUSH
68605: LD_INT 2
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 1
68614: PUSH
68615: LD_INT 2
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: LD_INT 0
68624: PUSH
68625: LD_INT 2
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 1
68634: NEG
68635: PUSH
68636: LD_INT 1
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 2
68645: NEG
68646: PUSH
68647: LD_INT 1
68649: NEG
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 2
68657: NEG
68658: PUSH
68659: LD_INT 2
68661: NEG
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 2
68669: NEG
68670: PUSH
68671: LD_INT 3
68673: NEG
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 1
68681: NEG
68682: PUSH
68683: LD_INT 3
68685: NEG
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 0
68693: PUSH
68694: LD_INT 3
68696: NEG
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 1
68704: PUSH
68705: LD_INT 2
68707: NEG
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 3
68715: PUSH
68716: LD_INT 2
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 3
68725: PUSH
68726: LD_INT 3
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 2
68735: PUSH
68736: LD_INT 3
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 1
68745: PUSH
68746: LD_INT 3
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 0
68755: PUSH
68756: LD_INT 3
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 1
68765: NEG
68766: PUSH
68767: LD_INT 2
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 3
68776: NEG
68777: PUSH
68778: LD_INT 2
68780: NEG
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 3
68788: NEG
68789: PUSH
68790: LD_INT 3
68792: NEG
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68829: LD_ADDR_VAR 0 46
68833: PUSH
68834: LD_INT 0
68836: PUSH
68837: LD_INT 0
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 0
68846: PUSH
68847: LD_INT 1
68849: NEG
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 1
68857: PUSH
68858: LD_INT 0
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 1
68867: PUSH
68868: LD_INT 1
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 0
68877: PUSH
68878: LD_INT 1
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 1
68887: NEG
68888: PUSH
68889: LD_INT 0
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 1
68898: NEG
68899: PUSH
68900: LD_INT 1
68902: NEG
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 1
68910: NEG
68911: PUSH
68912: LD_INT 2
68914: NEG
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 0
68922: PUSH
68923: LD_INT 2
68925: NEG
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 1
68933: PUSH
68934: LD_INT 1
68936: NEG
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 2
68944: PUSH
68945: LD_INT 0
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 2
68954: PUSH
68955: LD_INT 1
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 1
68964: PUSH
68965: LD_INT 2
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 0
68974: PUSH
68975: LD_INT 2
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: LD_INT 1
68984: NEG
68985: PUSH
68986: LD_INT 1
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 2
68995: NEG
68996: PUSH
68997: LD_INT 0
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 2
69006: NEG
69007: PUSH
69008: LD_INT 1
69010: NEG
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 1
69018: NEG
69019: PUSH
69020: LD_INT 3
69022: NEG
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 0
69030: PUSH
69031: LD_INT 3
69033: NEG
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 1
69041: PUSH
69042: LD_INT 2
69044: NEG
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 2
69052: PUSH
69053: LD_INT 1
69055: NEG
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 3
69063: PUSH
69064: LD_INT 0
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 3
69073: PUSH
69074: LD_INT 1
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 1
69083: PUSH
69084: LD_INT 3
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 0
69093: PUSH
69094: LD_INT 3
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 1
69103: NEG
69104: PUSH
69105: LD_INT 2
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 2
69114: NEG
69115: PUSH
69116: LD_INT 1
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 3
69125: NEG
69126: PUSH
69127: LD_INT 0
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 3
69136: NEG
69137: PUSH
69138: LD_INT 1
69140: NEG
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69177: LD_ADDR_VAR 0 47
69181: PUSH
69182: LD_INT 0
69184: PUSH
69185: LD_INT 0
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 0
69194: PUSH
69195: LD_INT 1
69197: NEG
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 1
69205: PUSH
69206: LD_INT 0
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 1
69215: PUSH
69216: LD_INT 1
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 0
69225: PUSH
69226: LD_INT 1
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 1
69235: NEG
69236: PUSH
69237: LD_INT 0
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 1
69246: NEG
69247: PUSH
69248: LD_INT 1
69250: NEG
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PUSH
69256: LD_INT 1
69258: NEG
69259: PUSH
69260: LD_INT 2
69262: NEG
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: LD_INT 0
69270: PUSH
69271: LD_INT 2
69273: NEG
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 1
69281: PUSH
69282: LD_INT 1
69284: NEG
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 2
69292: NEG
69293: PUSH
69294: LD_INT 1
69296: NEG
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: LD_INT 2
69304: NEG
69305: PUSH
69306: LD_INT 2
69308: NEG
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69328: LD_ADDR_VAR 0 48
69332: PUSH
69333: LD_INT 0
69335: PUSH
69336: LD_INT 0
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PUSH
69343: LD_INT 0
69345: PUSH
69346: LD_INT 1
69348: NEG
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 1
69356: PUSH
69357: LD_INT 0
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 1
69366: PUSH
69367: LD_INT 1
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 0
69376: PUSH
69377: LD_INT 1
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 1
69386: NEG
69387: PUSH
69388: LD_INT 0
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 1
69397: NEG
69398: PUSH
69399: LD_INT 1
69401: NEG
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 1
69409: NEG
69410: PUSH
69411: LD_INT 2
69413: NEG
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 0
69421: PUSH
69422: LD_INT 2
69424: NEG
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 1
69432: PUSH
69433: LD_INT 1
69435: NEG
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: LD_INT 2
69443: PUSH
69444: LD_INT 0
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 2
69453: PUSH
69454: LD_INT 1
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69475: LD_ADDR_VAR 0 49
69479: PUSH
69480: LD_INT 0
69482: PUSH
69483: LD_INT 0
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 0
69492: PUSH
69493: LD_INT 1
69495: NEG
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 1
69503: PUSH
69504: LD_INT 0
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: LD_INT 1
69513: PUSH
69514: LD_INT 1
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: LD_INT 0
69523: PUSH
69524: LD_INT 1
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 1
69533: NEG
69534: PUSH
69535: LD_INT 0
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PUSH
69542: LD_INT 1
69544: NEG
69545: PUSH
69546: LD_INT 1
69548: NEG
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 1
69556: PUSH
69557: LD_INT 1
69559: NEG
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 2
69567: PUSH
69568: LD_INT 0
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 2
69577: PUSH
69578: LD_INT 1
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 2
69587: PUSH
69588: LD_INT 2
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 1
69597: PUSH
69598: LD_INT 2
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69619: LD_ADDR_VAR 0 50
69623: PUSH
69624: LD_INT 0
69626: PUSH
69627: LD_INT 0
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: PUSH
69634: LD_INT 0
69636: PUSH
69637: LD_INT 1
69639: NEG
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PUSH
69645: LD_INT 1
69647: PUSH
69648: LD_INT 0
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: PUSH
69655: LD_INT 1
69657: PUSH
69658: LD_INT 1
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 0
69667: PUSH
69668: LD_INT 1
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: LD_INT 1
69677: NEG
69678: PUSH
69679: LD_INT 0
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 1
69688: NEG
69689: PUSH
69690: LD_INT 1
69692: NEG
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 2
69700: PUSH
69701: LD_INT 1
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 2
69710: PUSH
69711: LD_INT 2
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 1
69720: PUSH
69721: LD_INT 2
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 0
69730: PUSH
69731: LD_INT 2
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 1
69740: NEG
69741: PUSH
69742: LD_INT 1
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69763: LD_ADDR_VAR 0 51
69767: PUSH
69768: LD_INT 0
69770: PUSH
69771: LD_INT 0
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 0
69780: PUSH
69781: LD_INT 1
69783: NEG
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 1
69791: PUSH
69792: LD_INT 0
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 1
69801: PUSH
69802: LD_INT 1
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_INT 0
69811: PUSH
69812: LD_INT 1
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 1
69821: NEG
69822: PUSH
69823: LD_INT 0
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 1
69832: NEG
69833: PUSH
69834: LD_INT 1
69836: NEG
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 1
69844: PUSH
69845: LD_INT 2
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PUSH
69852: LD_INT 0
69854: PUSH
69855: LD_INT 2
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 1
69864: NEG
69865: PUSH
69866: LD_INT 1
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 2
69875: NEG
69876: PUSH
69877: LD_INT 0
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 2
69886: NEG
69887: PUSH
69888: LD_INT 1
69890: NEG
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69910: LD_ADDR_VAR 0 52
69914: PUSH
69915: LD_INT 0
69917: PUSH
69918: LD_INT 0
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 0
69927: PUSH
69928: LD_INT 1
69930: NEG
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 1
69938: PUSH
69939: LD_INT 0
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 1
69948: PUSH
69949: LD_INT 1
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: PUSH
69956: LD_INT 0
69958: PUSH
69959: LD_INT 1
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 1
69968: NEG
69969: PUSH
69970: LD_INT 0
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: LD_INT 1
69979: NEG
69980: PUSH
69981: LD_INT 1
69983: NEG
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: LD_INT 1
69991: NEG
69992: PUSH
69993: LD_INT 2
69995: NEG
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: PUSH
70001: LD_INT 1
70003: NEG
70004: PUSH
70005: LD_INT 1
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 2
70014: NEG
70015: PUSH
70016: LD_INT 0
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 2
70025: NEG
70026: PUSH
70027: LD_INT 1
70029: NEG
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 2
70037: NEG
70038: PUSH
70039: LD_INT 2
70041: NEG
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70061: LD_ADDR_VAR 0 53
70065: PUSH
70066: LD_INT 0
70068: PUSH
70069: LD_INT 0
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: LD_INT 0
70078: PUSH
70079: LD_INT 1
70081: NEG
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 1
70089: PUSH
70090: LD_INT 0
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 1
70099: PUSH
70100: LD_INT 1
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 0
70109: PUSH
70110: LD_INT 1
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 1
70119: NEG
70120: PUSH
70121: LD_INT 0
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: PUSH
70128: LD_INT 1
70130: NEG
70131: PUSH
70132: LD_INT 1
70134: NEG
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 1
70142: NEG
70143: PUSH
70144: LD_INT 2
70146: NEG
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: LD_INT 0
70154: PUSH
70155: LD_INT 2
70157: NEG
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 1
70165: PUSH
70166: LD_INT 1
70168: NEG
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 2
70176: PUSH
70177: LD_INT 0
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PUSH
70184: LD_INT 2
70186: PUSH
70187: LD_INT 1
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: PUSH
70194: LD_INT 2
70196: PUSH
70197: LD_INT 2
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 1
70206: PUSH
70207: LD_INT 2
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 0
70216: PUSH
70217: LD_INT 2
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 1
70226: NEG
70227: PUSH
70228: LD_INT 1
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 2
70237: NEG
70238: PUSH
70239: LD_INT 0
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 2
70248: NEG
70249: PUSH
70250: LD_INT 1
70252: NEG
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 2
70260: NEG
70261: PUSH
70262: LD_INT 2
70264: NEG
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70291: LD_ADDR_VAR 0 54
70295: PUSH
70296: LD_INT 0
70298: PUSH
70299: LD_INT 0
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 0
70308: PUSH
70309: LD_INT 1
70311: NEG
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 1
70319: PUSH
70320: LD_INT 0
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 1
70329: PUSH
70330: LD_INT 1
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: LD_INT 0
70339: PUSH
70340: LD_INT 1
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 1
70349: NEG
70350: PUSH
70351: LD_INT 0
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 1
70360: NEG
70361: PUSH
70362: LD_INT 1
70364: NEG
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 1
70372: NEG
70373: PUSH
70374: LD_INT 2
70376: NEG
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 0
70384: PUSH
70385: LD_INT 2
70387: NEG
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 1
70395: PUSH
70396: LD_INT 1
70398: NEG
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: LD_INT 2
70406: PUSH
70407: LD_INT 0
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 2
70416: PUSH
70417: LD_INT 1
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 2
70426: PUSH
70427: LD_INT 2
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 1
70436: PUSH
70437: LD_INT 2
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 0
70446: PUSH
70447: LD_INT 2
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 1
70456: NEG
70457: PUSH
70458: LD_INT 1
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 2
70467: NEG
70468: PUSH
70469: LD_INT 0
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: LD_INT 2
70478: NEG
70479: PUSH
70480: LD_INT 1
70482: NEG
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 2
70490: NEG
70491: PUSH
70492: LD_INT 2
70494: NEG
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70521: LD_ADDR_VAR 0 55
70525: PUSH
70526: LD_INT 0
70528: PUSH
70529: LD_INT 0
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: PUSH
70536: LD_INT 0
70538: PUSH
70539: LD_INT 1
70541: NEG
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PUSH
70547: LD_INT 1
70549: PUSH
70550: LD_INT 0
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PUSH
70557: LD_INT 1
70559: PUSH
70560: LD_INT 1
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 0
70569: PUSH
70570: LD_INT 1
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 1
70579: NEG
70580: PUSH
70581: LD_INT 0
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: LD_INT 1
70590: NEG
70591: PUSH
70592: LD_INT 1
70594: NEG
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: PUSH
70600: LD_INT 1
70602: NEG
70603: PUSH
70604: LD_INT 2
70606: NEG
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 0
70614: PUSH
70615: LD_INT 2
70617: NEG
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: LD_INT 1
70625: PUSH
70626: LD_INT 1
70628: NEG
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: LD_INT 2
70636: PUSH
70637: LD_INT 0
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 2
70646: PUSH
70647: LD_INT 1
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PUSH
70654: LD_INT 2
70656: PUSH
70657: LD_INT 2
70659: PUSH
70660: EMPTY
70661: LIST
70662: LIST
70663: PUSH
70664: LD_INT 1
70666: PUSH
70667: LD_INT 2
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 0
70676: PUSH
70677: LD_INT 2
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PUSH
70684: LD_INT 1
70686: NEG
70687: PUSH
70688: LD_INT 1
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: PUSH
70695: LD_INT 2
70697: NEG
70698: PUSH
70699: LD_INT 0
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PUSH
70706: LD_INT 2
70708: NEG
70709: PUSH
70710: LD_INT 1
70712: NEG
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 2
70720: NEG
70721: PUSH
70722: LD_INT 2
70724: NEG
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: LIST
70750: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70751: LD_ADDR_VAR 0 56
70755: PUSH
70756: LD_INT 0
70758: PUSH
70759: LD_INT 0
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 0
70768: PUSH
70769: LD_INT 1
70771: NEG
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: LD_INT 1
70779: PUSH
70780: LD_INT 0
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 1
70789: PUSH
70790: LD_INT 1
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: LD_INT 0
70799: PUSH
70800: LD_INT 1
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: LD_INT 1
70809: NEG
70810: PUSH
70811: LD_INT 0
70813: PUSH
70814: EMPTY
70815: LIST
70816: LIST
70817: PUSH
70818: LD_INT 1
70820: NEG
70821: PUSH
70822: LD_INT 1
70824: NEG
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 1
70832: NEG
70833: PUSH
70834: LD_INT 2
70836: NEG
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 0
70844: PUSH
70845: LD_INT 2
70847: NEG
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PUSH
70853: LD_INT 1
70855: PUSH
70856: LD_INT 1
70858: NEG
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: LD_INT 2
70866: PUSH
70867: LD_INT 0
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 2
70876: PUSH
70877: LD_INT 1
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 2
70886: PUSH
70887: LD_INT 2
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: PUSH
70894: LD_INT 1
70896: PUSH
70897: LD_INT 2
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: PUSH
70904: LD_INT 0
70906: PUSH
70907: LD_INT 2
70909: PUSH
70910: EMPTY
70911: LIST
70912: LIST
70913: PUSH
70914: LD_INT 1
70916: NEG
70917: PUSH
70918: LD_INT 1
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: PUSH
70925: LD_INT 2
70927: NEG
70928: PUSH
70929: LD_INT 0
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 2
70938: NEG
70939: PUSH
70940: LD_INT 1
70942: NEG
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: PUSH
70948: LD_INT 2
70950: NEG
70951: PUSH
70952: LD_INT 2
70954: NEG
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70981: LD_ADDR_VAR 0 57
70985: PUSH
70986: LD_INT 0
70988: PUSH
70989: LD_INT 0
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PUSH
70996: LD_INT 0
70998: PUSH
70999: LD_INT 1
71001: NEG
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: PUSH
71007: LD_INT 1
71009: PUSH
71010: LD_INT 0
71012: PUSH
71013: EMPTY
71014: LIST
71015: LIST
71016: PUSH
71017: LD_INT 1
71019: PUSH
71020: LD_INT 1
71022: PUSH
71023: EMPTY
71024: LIST
71025: LIST
71026: PUSH
71027: LD_INT 0
71029: PUSH
71030: LD_INT 1
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: PUSH
71037: LD_INT 1
71039: NEG
71040: PUSH
71041: LD_INT 0
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PUSH
71048: LD_INT 1
71050: NEG
71051: PUSH
71052: LD_INT 1
71054: NEG
71055: PUSH
71056: EMPTY
71057: LIST
71058: LIST
71059: PUSH
71060: LD_INT 1
71062: NEG
71063: PUSH
71064: LD_INT 2
71066: NEG
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 0
71074: PUSH
71075: LD_INT 2
71077: NEG
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 1
71085: PUSH
71086: LD_INT 1
71088: NEG
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 2
71096: PUSH
71097: LD_INT 0
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 2
71106: PUSH
71107: LD_INT 1
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 2
71116: PUSH
71117: LD_INT 2
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 1
71126: PUSH
71127: LD_INT 2
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 0
71136: PUSH
71137: LD_INT 2
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 1
71146: NEG
71147: PUSH
71148: LD_INT 1
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: LD_INT 2
71157: NEG
71158: PUSH
71159: LD_INT 0
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 2
71168: NEG
71169: PUSH
71170: LD_INT 1
71172: NEG
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: PUSH
71178: LD_INT 2
71180: NEG
71181: PUSH
71182: LD_INT 2
71184: NEG
71185: PUSH
71186: EMPTY
71187: LIST
71188: LIST
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71211: LD_ADDR_VAR 0 58
71215: PUSH
71216: LD_INT 0
71218: PUSH
71219: LD_INT 0
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 0
71228: PUSH
71229: LD_INT 1
71231: NEG
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: LD_INT 1
71239: PUSH
71240: LD_INT 0
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 1
71249: PUSH
71250: LD_INT 1
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: PUSH
71257: LD_INT 0
71259: PUSH
71260: LD_INT 1
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 1
71269: NEG
71270: PUSH
71271: LD_INT 0
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PUSH
71278: LD_INT 1
71280: NEG
71281: PUSH
71282: LD_INT 1
71284: NEG
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: PUSH
71290: LD_INT 1
71292: NEG
71293: PUSH
71294: LD_INT 2
71296: NEG
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: LD_INT 0
71304: PUSH
71305: LD_INT 2
71307: NEG
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 1
71315: PUSH
71316: LD_INT 1
71318: NEG
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: PUSH
71324: LD_INT 2
71326: PUSH
71327: LD_INT 0
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: PUSH
71334: LD_INT 2
71336: PUSH
71337: LD_INT 1
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: LD_INT 2
71346: PUSH
71347: LD_INT 2
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: LD_INT 1
71356: PUSH
71357: LD_INT 2
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: PUSH
71364: LD_INT 0
71366: PUSH
71367: LD_INT 2
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: PUSH
71374: LD_INT 1
71376: NEG
71377: PUSH
71378: LD_INT 1
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: LD_INT 2
71387: NEG
71388: PUSH
71389: LD_INT 0
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 2
71398: NEG
71399: PUSH
71400: LD_INT 1
71402: NEG
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 2
71410: NEG
71411: PUSH
71412: LD_INT 2
71414: NEG
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71441: LD_ADDR_VAR 0 59
71445: PUSH
71446: LD_INT 0
71448: PUSH
71449: LD_INT 0
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 0
71458: PUSH
71459: LD_INT 1
71461: NEG
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: PUSH
71467: LD_INT 1
71469: PUSH
71470: LD_INT 0
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: PUSH
71477: LD_INT 1
71479: PUSH
71480: LD_INT 1
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 0
71489: PUSH
71490: LD_INT 1
71492: PUSH
71493: EMPTY
71494: LIST
71495: LIST
71496: PUSH
71497: LD_INT 1
71499: NEG
71500: PUSH
71501: LD_INT 0
71503: PUSH
71504: EMPTY
71505: LIST
71506: LIST
71507: PUSH
71508: LD_INT 1
71510: NEG
71511: PUSH
71512: LD_INT 1
71514: NEG
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: PUSH
71520: EMPTY
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71529: LD_ADDR_VAR 0 60
71533: PUSH
71534: LD_INT 0
71536: PUSH
71537: LD_INT 0
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: PUSH
71544: LD_INT 0
71546: PUSH
71547: LD_INT 1
71549: NEG
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: PUSH
71555: LD_INT 1
71557: PUSH
71558: LD_INT 0
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 1
71567: PUSH
71568: LD_INT 1
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 0
71577: PUSH
71578: LD_INT 1
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: PUSH
71585: LD_INT 1
71587: NEG
71588: PUSH
71589: LD_INT 0
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: PUSH
71596: LD_INT 1
71598: NEG
71599: PUSH
71600: LD_INT 1
71602: NEG
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71617: LD_ADDR_VAR 0 61
71621: PUSH
71622: LD_INT 0
71624: PUSH
71625: LD_INT 0
71627: PUSH
71628: EMPTY
71629: LIST
71630: LIST
71631: PUSH
71632: LD_INT 0
71634: PUSH
71635: LD_INT 1
71637: NEG
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: LD_INT 1
71645: PUSH
71646: LD_INT 0
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 1
71655: PUSH
71656: LD_INT 1
71658: PUSH
71659: EMPTY
71660: LIST
71661: LIST
71662: PUSH
71663: LD_INT 0
71665: PUSH
71666: LD_INT 1
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: PUSH
71673: LD_INT 1
71675: NEG
71676: PUSH
71677: LD_INT 0
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: LD_INT 1
71686: NEG
71687: PUSH
71688: LD_INT 1
71690: NEG
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: EMPTY
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71705: LD_ADDR_VAR 0 62
71709: PUSH
71710: LD_INT 0
71712: PUSH
71713: LD_INT 0
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: PUSH
71720: LD_INT 0
71722: PUSH
71723: LD_INT 1
71725: NEG
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: PUSH
71731: LD_INT 1
71733: PUSH
71734: LD_INT 0
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: PUSH
71741: LD_INT 1
71743: PUSH
71744: LD_INT 1
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PUSH
71751: LD_INT 0
71753: PUSH
71754: LD_INT 1
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: PUSH
71761: LD_INT 1
71763: NEG
71764: PUSH
71765: LD_INT 0
71767: PUSH
71768: EMPTY
71769: LIST
71770: LIST
71771: PUSH
71772: LD_INT 1
71774: NEG
71775: PUSH
71776: LD_INT 1
71778: NEG
71779: PUSH
71780: EMPTY
71781: LIST
71782: LIST
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: LIST
71788: LIST
71789: LIST
71790: LIST
71791: LIST
71792: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71793: LD_ADDR_VAR 0 63
71797: PUSH
71798: LD_INT 0
71800: PUSH
71801: LD_INT 0
71803: PUSH
71804: EMPTY
71805: LIST
71806: LIST
71807: PUSH
71808: LD_INT 0
71810: PUSH
71811: LD_INT 1
71813: NEG
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: PUSH
71819: LD_INT 1
71821: PUSH
71822: LD_INT 0
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 1
71831: PUSH
71832: LD_INT 1
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: PUSH
71839: LD_INT 0
71841: PUSH
71842: LD_INT 1
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 1
71851: NEG
71852: PUSH
71853: LD_INT 0
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: LD_INT 1
71862: NEG
71863: PUSH
71864: LD_INT 1
71866: NEG
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71881: LD_ADDR_VAR 0 64
71885: PUSH
71886: LD_INT 0
71888: PUSH
71889: LD_INT 0
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: PUSH
71896: LD_INT 0
71898: PUSH
71899: LD_INT 1
71901: NEG
71902: PUSH
71903: EMPTY
71904: LIST
71905: LIST
71906: PUSH
71907: LD_INT 1
71909: PUSH
71910: LD_INT 0
71912: PUSH
71913: EMPTY
71914: LIST
71915: LIST
71916: PUSH
71917: LD_INT 1
71919: PUSH
71920: LD_INT 1
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 0
71929: PUSH
71930: LD_INT 1
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 1
71939: NEG
71940: PUSH
71941: LD_INT 0
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 1
71950: NEG
71951: PUSH
71952: LD_INT 1
71954: NEG
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: ST_TO_ADDR
// end ; 1 :
71969: GO 77866
71971: LD_INT 1
71973: DOUBLE
71974: EQUAL
71975: IFTRUE 71979
71977: GO 74602
71979: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71980: LD_ADDR_VAR 0 11
71984: PUSH
71985: LD_INT 1
71987: NEG
71988: PUSH
71989: LD_INT 3
71991: NEG
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: PUSH
71997: LD_INT 0
71999: PUSH
72000: LD_INT 3
72002: NEG
72003: PUSH
72004: EMPTY
72005: LIST
72006: LIST
72007: PUSH
72008: LD_INT 1
72010: PUSH
72011: LD_INT 2
72013: NEG
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: LIST
72023: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72024: LD_ADDR_VAR 0 12
72028: PUSH
72029: LD_INT 2
72031: PUSH
72032: LD_INT 1
72034: NEG
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: LD_INT 3
72042: PUSH
72043: LD_INT 0
72045: PUSH
72046: EMPTY
72047: LIST
72048: LIST
72049: PUSH
72050: LD_INT 3
72052: PUSH
72053: LD_INT 1
72055: PUSH
72056: EMPTY
72057: LIST
72058: LIST
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: LIST
72064: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72065: LD_ADDR_VAR 0 13
72069: PUSH
72070: LD_INT 3
72072: PUSH
72073: LD_INT 2
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: PUSH
72080: LD_INT 3
72082: PUSH
72083: LD_INT 3
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: PUSH
72090: LD_INT 2
72092: PUSH
72093: LD_INT 3
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: LIST
72104: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72105: LD_ADDR_VAR 0 14
72109: PUSH
72110: LD_INT 1
72112: PUSH
72113: LD_INT 3
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_INT 0
72122: PUSH
72123: LD_INT 3
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: PUSH
72130: LD_INT 1
72132: NEG
72133: PUSH
72134: LD_INT 2
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: PUSH
72141: EMPTY
72142: LIST
72143: LIST
72144: LIST
72145: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72146: LD_ADDR_VAR 0 15
72150: PUSH
72151: LD_INT 2
72153: NEG
72154: PUSH
72155: LD_INT 1
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: LD_INT 3
72164: NEG
72165: PUSH
72166: LD_INT 0
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: PUSH
72173: LD_INT 3
72175: NEG
72176: PUSH
72177: LD_INT 1
72179: NEG
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: PUSH
72185: EMPTY
72186: LIST
72187: LIST
72188: LIST
72189: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72190: LD_ADDR_VAR 0 16
72194: PUSH
72195: LD_INT 2
72197: NEG
72198: PUSH
72199: LD_INT 3
72201: NEG
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: PUSH
72207: LD_INT 3
72209: NEG
72210: PUSH
72211: LD_INT 2
72213: NEG
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: PUSH
72219: LD_INT 3
72221: NEG
72222: PUSH
72223: LD_INT 3
72225: NEG
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: LIST
72235: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72236: LD_ADDR_VAR 0 17
72240: PUSH
72241: LD_INT 1
72243: NEG
72244: PUSH
72245: LD_INT 3
72247: NEG
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: PUSH
72253: LD_INT 0
72255: PUSH
72256: LD_INT 3
72258: NEG
72259: PUSH
72260: EMPTY
72261: LIST
72262: LIST
72263: PUSH
72264: LD_INT 1
72266: PUSH
72267: LD_INT 2
72269: NEG
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: LIST
72279: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72280: LD_ADDR_VAR 0 18
72284: PUSH
72285: LD_INT 2
72287: PUSH
72288: LD_INT 1
72290: NEG
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: PUSH
72296: LD_INT 3
72298: PUSH
72299: LD_INT 0
72301: PUSH
72302: EMPTY
72303: LIST
72304: LIST
72305: PUSH
72306: LD_INT 3
72308: PUSH
72309: LD_INT 1
72311: PUSH
72312: EMPTY
72313: LIST
72314: LIST
72315: PUSH
72316: EMPTY
72317: LIST
72318: LIST
72319: LIST
72320: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72321: LD_ADDR_VAR 0 19
72325: PUSH
72326: LD_INT 3
72328: PUSH
72329: LD_INT 2
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: PUSH
72336: LD_INT 3
72338: PUSH
72339: LD_INT 3
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: PUSH
72346: LD_INT 2
72348: PUSH
72349: LD_INT 3
72351: PUSH
72352: EMPTY
72353: LIST
72354: LIST
72355: PUSH
72356: EMPTY
72357: LIST
72358: LIST
72359: LIST
72360: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72361: LD_ADDR_VAR 0 20
72365: PUSH
72366: LD_INT 1
72368: PUSH
72369: LD_INT 3
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: PUSH
72376: LD_INT 0
72378: PUSH
72379: LD_INT 3
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: PUSH
72386: LD_INT 1
72388: NEG
72389: PUSH
72390: LD_INT 2
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: LIST
72401: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72402: LD_ADDR_VAR 0 21
72406: PUSH
72407: LD_INT 2
72409: NEG
72410: PUSH
72411: LD_INT 1
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: PUSH
72418: LD_INT 3
72420: NEG
72421: PUSH
72422: LD_INT 0
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: LD_INT 3
72431: NEG
72432: PUSH
72433: LD_INT 1
72435: NEG
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: LIST
72445: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72446: LD_ADDR_VAR 0 22
72450: PUSH
72451: LD_INT 2
72453: NEG
72454: PUSH
72455: LD_INT 3
72457: NEG
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: PUSH
72463: LD_INT 3
72465: NEG
72466: PUSH
72467: LD_INT 2
72469: NEG
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: PUSH
72475: LD_INT 3
72477: NEG
72478: PUSH
72479: LD_INT 3
72481: NEG
72482: PUSH
72483: EMPTY
72484: LIST
72485: LIST
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: LIST
72491: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
72492: LD_ADDR_VAR 0 23
72496: PUSH
72497: LD_INT 0
72499: PUSH
72500: LD_INT 3
72502: NEG
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: PUSH
72508: LD_INT 1
72510: NEG
72511: PUSH
72512: LD_INT 4
72514: NEG
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: PUSH
72520: LD_INT 1
72522: PUSH
72523: LD_INT 3
72525: NEG
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: LIST
72535: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
72536: LD_ADDR_VAR 0 24
72540: PUSH
72541: LD_INT 3
72543: PUSH
72544: LD_INT 0
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: PUSH
72551: LD_INT 3
72553: PUSH
72554: LD_INT 1
72556: NEG
72557: PUSH
72558: EMPTY
72559: LIST
72560: LIST
72561: PUSH
72562: LD_INT 4
72564: PUSH
72565: LD_INT 1
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: LIST
72576: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
72577: LD_ADDR_VAR 0 25
72581: PUSH
72582: LD_INT 3
72584: PUSH
72585: LD_INT 3
72587: PUSH
72588: EMPTY
72589: LIST
72590: LIST
72591: PUSH
72592: LD_INT 4
72594: PUSH
72595: LD_INT 3
72597: PUSH
72598: EMPTY
72599: LIST
72600: LIST
72601: PUSH
72602: LD_INT 3
72604: PUSH
72605: LD_INT 4
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: LIST
72616: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
72617: LD_ADDR_VAR 0 26
72621: PUSH
72622: LD_INT 0
72624: PUSH
72625: LD_INT 3
72627: PUSH
72628: EMPTY
72629: LIST
72630: LIST
72631: PUSH
72632: LD_INT 1
72634: PUSH
72635: LD_INT 4
72637: PUSH
72638: EMPTY
72639: LIST
72640: LIST
72641: PUSH
72642: LD_INT 1
72644: NEG
72645: PUSH
72646: LD_INT 3
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: LIST
72657: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
72658: LD_ADDR_VAR 0 27
72662: PUSH
72663: LD_INT 3
72665: NEG
72666: PUSH
72667: LD_INT 0
72669: PUSH
72670: EMPTY
72671: LIST
72672: LIST
72673: PUSH
72674: LD_INT 3
72676: NEG
72677: PUSH
72678: LD_INT 1
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PUSH
72685: LD_INT 4
72687: NEG
72688: PUSH
72689: LD_INT 1
72691: NEG
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: PUSH
72697: EMPTY
72698: LIST
72699: LIST
72700: LIST
72701: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
72702: LD_ADDR_VAR 0 28
72706: PUSH
72707: LD_INT 3
72709: NEG
72710: PUSH
72711: LD_INT 3
72713: NEG
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PUSH
72719: LD_INT 3
72721: NEG
72722: PUSH
72723: LD_INT 4
72725: NEG
72726: PUSH
72727: EMPTY
72728: LIST
72729: LIST
72730: PUSH
72731: LD_INT 4
72733: NEG
72734: PUSH
72735: LD_INT 3
72737: NEG
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: LIST
72747: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
72748: LD_ADDR_VAR 0 29
72752: PUSH
72753: LD_INT 1
72755: NEG
72756: PUSH
72757: LD_INT 3
72759: NEG
72760: PUSH
72761: EMPTY
72762: LIST
72763: LIST
72764: PUSH
72765: LD_INT 0
72767: PUSH
72768: LD_INT 3
72770: NEG
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: PUSH
72776: LD_INT 1
72778: PUSH
72779: LD_INT 2
72781: NEG
72782: PUSH
72783: EMPTY
72784: LIST
72785: LIST
72786: PUSH
72787: LD_INT 1
72789: NEG
72790: PUSH
72791: LD_INT 4
72793: NEG
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: PUSH
72799: LD_INT 0
72801: PUSH
72802: LD_INT 4
72804: NEG
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: PUSH
72810: LD_INT 1
72812: PUSH
72813: LD_INT 3
72815: NEG
72816: PUSH
72817: EMPTY
72818: LIST
72819: LIST
72820: PUSH
72821: LD_INT 1
72823: NEG
72824: PUSH
72825: LD_INT 5
72827: NEG
72828: PUSH
72829: EMPTY
72830: LIST
72831: LIST
72832: PUSH
72833: LD_INT 0
72835: PUSH
72836: LD_INT 5
72838: NEG
72839: PUSH
72840: EMPTY
72841: LIST
72842: LIST
72843: PUSH
72844: LD_INT 1
72846: PUSH
72847: LD_INT 4
72849: NEG
72850: PUSH
72851: EMPTY
72852: LIST
72853: LIST
72854: PUSH
72855: LD_INT 1
72857: NEG
72858: PUSH
72859: LD_INT 6
72861: NEG
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PUSH
72867: LD_INT 0
72869: PUSH
72870: LD_INT 6
72872: NEG
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: PUSH
72878: LD_INT 1
72880: PUSH
72881: LD_INT 5
72883: NEG
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: LIST
72902: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
72903: LD_ADDR_VAR 0 30
72907: PUSH
72908: LD_INT 2
72910: PUSH
72911: LD_INT 1
72913: NEG
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: PUSH
72919: LD_INT 3
72921: PUSH
72922: LD_INT 0
72924: PUSH
72925: EMPTY
72926: LIST
72927: LIST
72928: PUSH
72929: LD_INT 3
72931: PUSH
72932: LD_INT 1
72934: PUSH
72935: EMPTY
72936: LIST
72937: LIST
72938: PUSH
72939: LD_INT 3
72941: PUSH
72942: LD_INT 1
72944: NEG
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: PUSH
72950: LD_INT 4
72952: PUSH
72953: LD_INT 0
72955: PUSH
72956: EMPTY
72957: LIST
72958: LIST
72959: PUSH
72960: LD_INT 4
72962: PUSH
72963: LD_INT 1
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: PUSH
72970: LD_INT 4
72972: PUSH
72973: LD_INT 1
72975: NEG
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: PUSH
72981: LD_INT 5
72983: PUSH
72984: LD_INT 0
72986: PUSH
72987: EMPTY
72988: LIST
72989: LIST
72990: PUSH
72991: LD_INT 5
72993: PUSH
72994: LD_INT 1
72996: PUSH
72997: EMPTY
72998: LIST
72999: LIST
73000: PUSH
73001: LD_INT 5
73003: PUSH
73004: LD_INT 1
73006: NEG
73007: PUSH
73008: EMPTY
73009: LIST
73010: LIST
73011: PUSH
73012: LD_INT 6
73014: PUSH
73015: LD_INT 0
73017: PUSH
73018: EMPTY
73019: LIST
73020: LIST
73021: PUSH
73022: LD_INT 6
73024: PUSH
73025: LD_INT 1
73027: PUSH
73028: EMPTY
73029: LIST
73030: LIST
73031: PUSH
73032: EMPTY
73033: LIST
73034: LIST
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: LIST
73040: LIST
73041: LIST
73042: LIST
73043: LIST
73044: LIST
73045: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
73046: LD_ADDR_VAR 0 31
73050: PUSH
73051: LD_INT 3
73053: PUSH
73054: LD_INT 2
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: PUSH
73061: LD_INT 3
73063: PUSH
73064: LD_INT 3
73066: PUSH
73067: EMPTY
73068: LIST
73069: LIST
73070: PUSH
73071: LD_INT 2
73073: PUSH
73074: LD_INT 3
73076: PUSH
73077: EMPTY
73078: LIST
73079: LIST
73080: PUSH
73081: LD_INT 4
73083: PUSH
73084: LD_INT 3
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: PUSH
73091: LD_INT 4
73093: PUSH
73094: LD_INT 4
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: PUSH
73101: LD_INT 3
73103: PUSH
73104: LD_INT 4
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PUSH
73111: LD_INT 5
73113: PUSH
73114: LD_INT 4
73116: PUSH
73117: EMPTY
73118: LIST
73119: LIST
73120: PUSH
73121: LD_INT 5
73123: PUSH
73124: LD_INT 5
73126: PUSH
73127: EMPTY
73128: LIST
73129: LIST
73130: PUSH
73131: LD_INT 4
73133: PUSH
73134: LD_INT 5
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: PUSH
73141: LD_INT 6
73143: PUSH
73144: LD_INT 5
73146: PUSH
73147: EMPTY
73148: LIST
73149: LIST
73150: PUSH
73151: LD_INT 6
73153: PUSH
73154: LD_INT 6
73156: PUSH
73157: EMPTY
73158: LIST
73159: LIST
73160: PUSH
73161: LD_INT 5
73163: PUSH
73164: LD_INT 6
73166: PUSH
73167: EMPTY
73168: LIST
73169: LIST
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
73185: LD_ADDR_VAR 0 32
73189: PUSH
73190: LD_INT 1
73192: PUSH
73193: LD_INT 3
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: PUSH
73200: LD_INT 0
73202: PUSH
73203: LD_INT 3
73205: PUSH
73206: EMPTY
73207: LIST
73208: LIST
73209: PUSH
73210: LD_INT 1
73212: NEG
73213: PUSH
73214: LD_INT 2
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: PUSH
73221: LD_INT 1
73223: PUSH
73224: LD_INT 4
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: PUSH
73231: LD_INT 0
73233: PUSH
73234: LD_INT 4
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: LD_INT 1
73243: NEG
73244: PUSH
73245: LD_INT 3
73247: PUSH
73248: EMPTY
73249: LIST
73250: LIST
73251: PUSH
73252: LD_INT 1
73254: PUSH
73255: LD_INT 5
73257: PUSH
73258: EMPTY
73259: LIST
73260: LIST
73261: PUSH
73262: LD_INT 0
73264: PUSH
73265: LD_INT 5
73267: PUSH
73268: EMPTY
73269: LIST
73270: LIST
73271: PUSH
73272: LD_INT 1
73274: NEG
73275: PUSH
73276: LD_INT 4
73278: PUSH
73279: EMPTY
73280: LIST
73281: LIST
73282: PUSH
73283: LD_INT 1
73285: PUSH
73286: LD_INT 6
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: PUSH
73293: LD_INT 0
73295: PUSH
73296: LD_INT 6
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: PUSH
73303: LD_INT 1
73305: NEG
73306: PUSH
73307: LD_INT 5
73309: PUSH
73310: EMPTY
73311: LIST
73312: LIST
73313: PUSH
73314: EMPTY
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
73328: LD_ADDR_VAR 0 33
73332: PUSH
73333: LD_INT 2
73335: NEG
73336: PUSH
73337: LD_INT 1
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: PUSH
73344: LD_INT 3
73346: NEG
73347: PUSH
73348: LD_INT 0
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: PUSH
73355: LD_INT 3
73357: NEG
73358: PUSH
73359: LD_INT 1
73361: NEG
73362: PUSH
73363: EMPTY
73364: LIST
73365: LIST
73366: PUSH
73367: LD_INT 3
73369: NEG
73370: PUSH
73371: LD_INT 1
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: PUSH
73378: LD_INT 4
73380: NEG
73381: PUSH
73382: LD_INT 0
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: PUSH
73389: LD_INT 4
73391: NEG
73392: PUSH
73393: LD_INT 1
73395: NEG
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: PUSH
73401: LD_INT 4
73403: NEG
73404: PUSH
73405: LD_INT 1
73407: PUSH
73408: EMPTY
73409: LIST
73410: LIST
73411: PUSH
73412: LD_INT 5
73414: NEG
73415: PUSH
73416: LD_INT 0
73418: PUSH
73419: EMPTY
73420: LIST
73421: LIST
73422: PUSH
73423: LD_INT 5
73425: NEG
73426: PUSH
73427: LD_INT 1
73429: NEG
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: PUSH
73435: LD_INT 5
73437: NEG
73438: PUSH
73439: LD_INT 1
73441: PUSH
73442: EMPTY
73443: LIST
73444: LIST
73445: PUSH
73446: LD_INT 6
73448: NEG
73449: PUSH
73450: LD_INT 0
73452: PUSH
73453: EMPTY
73454: LIST
73455: LIST
73456: PUSH
73457: LD_INT 6
73459: NEG
73460: PUSH
73461: LD_INT 1
73463: NEG
73464: PUSH
73465: EMPTY
73466: LIST
73467: LIST
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: LIST
73473: LIST
73474: LIST
73475: LIST
73476: LIST
73477: LIST
73478: LIST
73479: LIST
73480: LIST
73481: LIST
73482: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
73483: LD_ADDR_VAR 0 34
73487: PUSH
73488: LD_INT 2
73490: NEG
73491: PUSH
73492: LD_INT 3
73494: NEG
73495: PUSH
73496: EMPTY
73497: LIST
73498: LIST
73499: PUSH
73500: LD_INT 3
73502: NEG
73503: PUSH
73504: LD_INT 2
73506: NEG
73507: PUSH
73508: EMPTY
73509: LIST
73510: LIST
73511: PUSH
73512: LD_INT 3
73514: NEG
73515: PUSH
73516: LD_INT 3
73518: NEG
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PUSH
73524: LD_INT 3
73526: NEG
73527: PUSH
73528: LD_INT 4
73530: NEG
73531: PUSH
73532: EMPTY
73533: LIST
73534: LIST
73535: PUSH
73536: LD_INT 4
73538: NEG
73539: PUSH
73540: LD_INT 3
73542: NEG
73543: PUSH
73544: EMPTY
73545: LIST
73546: LIST
73547: PUSH
73548: LD_INT 4
73550: NEG
73551: PUSH
73552: LD_INT 4
73554: NEG
73555: PUSH
73556: EMPTY
73557: LIST
73558: LIST
73559: PUSH
73560: LD_INT 4
73562: NEG
73563: PUSH
73564: LD_INT 5
73566: NEG
73567: PUSH
73568: EMPTY
73569: LIST
73570: LIST
73571: PUSH
73572: LD_INT 5
73574: NEG
73575: PUSH
73576: LD_INT 4
73578: NEG
73579: PUSH
73580: EMPTY
73581: LIST
73582: LIST
73583: PUSH
73584: LD_INT 5
73586: NEG
73587: PUSH
73588: LD_INT 5
73590: NEG
73591: PUSH
73592: EMPTY
73593: LIST
73594: LIST
73595: PUSH
73596: LD_INT 5
73598: NEG
73599: PUSH
73600: LD_INT 6
73602: NEG
73603: PUSH
73604: EMPTY
73605: LIST
73606: LIST
73607: PUSH
73608: LD_INT 6
73610: NEG
73611: PUSH
73612: LD_INT 5
73614: NEG
73615: PUSH
73616: EMPTY
73617: LIST
73618: LIST
73619: PUSH
73620: LD_INT 6
73622: NEG
73623: PUSH
73624: LD_INT 6
73626: NEG
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: PUSH
73632: EMPTY
73633: LIST
73634: LIST
73635: LIST
73636: LIST
73637: LIST
73638: LIST
73639: LIST
73640: LIST
73641: LIST
73642: LIST
73643: LIST
73644: LIST
73645: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
73646: LD_ADDR_VAR 0 41
73650: PUSH
73651: LD_INT 0
73653: PUSH
73654: LD_INT 2
73656: NEG
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: PUSH
73662: LD_INT 1
73664: NEG
73665: PUSH
73666: LD_INT 3
73668: NEG
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: PUSH
73674: LD_INT 1
73676: PUSH
73677: LD_INT 2
73679: NEG
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: PUSH
73685: EMPTY
73686: LIST
73687: LIST
73688: LIST
73689: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
73690: LD_ADDR_VAR 0 42
73694: PUSH
73695: LD_INT 2
73697: PUSH
73698: LD_INT 0
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: PUSH
73705: LD_INT 2
73707: PUSH
73708: LD_INT 1
73710: NEG
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PUSH
73716: LD_INT 3
73718: PUSH
73719: LD_INT 1
73721: PUSH
73722: EMPTY
73723: LIST
73724: LIST
73725: PUSH
73726: EMPTY
73727: LIST
73728: LIST
73729: LIST
73730: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
73731: LD_ADDR_VAR 0 43
73735: PUSH
73736: LD_INT 2
73738: PUSH
73739: LD_INT 2
73741: PUSH
73742: EMPTY
73743: LIST
73744: LIST
73745: PUSH
73746: LD_INT 3
73748: PUSH
73749: LD_INT 2
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: PUSH
73756: LD_INT 2
73758: PUSH
73759: LD_INT 3
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: PUSH
73766: EMPTY
73767: LIST
73768: LIST
73769: LIST
73770: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
73771: LD_ADDR_VAR 0 44
73775: PUSH
73776: LD_INT 0
73778: PUSH
73779: LD_INT 2
73781: PUSH
73782: EMPTY
73783: LIST
73784: LIST
73785: PUSH
73786: LD_INT 1
73788: PUSH
73789: LD_INT 3
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: LD_INT 1
73798: NEG
73799: PUSH
73800: LD_INT 2
73802: PUSH
73803: EMPTY
73804: LIST
73805: LIST
73806: PUSH
73807: EMPTY
73808: LIST
73809: LIST
73810: LIST
73811: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
73812: LD_ADDR_VAR 0 45
73816: PUSH
73817: LD_INT 2
73819: NEG
73820: PUSH
73821: LD_INT 0
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: PUSH
73828: LD_INT 2
73830: NEG
73831: PUSH
73832: LD_INT 1
73834: PUSH
73835: EMPTY
73836: LIST
73837: LIST
73838: PUSH
73839: LD_INT 3
73841: NEG
73842: PUSH
73843: LD_INT 1
73845: NEG
73846: PUSH
73847: EMPTY
73848: LIST
73849: LIST
73850: PUSH
73851: EMPTY
73852: LIST
73853: LIST
73854: LIST
73855: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
73856: LD_ADDR_VAR 0 46
73860: PUSH
73861: LD_INT 2
73863: NEG
73864: PUSH
73865: LD_INT 2
73867: NEG
73868: PUSH
73869: EMPTY
73870: LIST
73871: LIST
73872: PUSH
73873: LD_INT 2
73875: NEG
73876: PUSH
73877: LD_INT 3
73879: NEG
73880: PUSH
73881: EMPTY
73882: LIST
73883: LIST
73884: PUSH
73885: LD_INT 3
73887: NEG
73888: PUSH
73889: LD_INT 2
73891: NEG
73892: PUSH
73893: EMPTY
73894: LIST
73895: LIST
73896: PUSH
73897: EMPTY
73898: LIST
73899: LIST
73900: LIST
73901: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
73902: LD_ADDR_VAR 0 47
73906: PUSH
73907: LD_INT 2
73909: NEG
73910: PUSH
73911: LD_INT 3
73913: NEG
73914: PUSH
73915: EMPTY
73916: LIST
73917: LIST
73918: PUSH
73919: LD_INT 1
73921: NEG
73922: PUSH
73923: LD_INT 3
73925: NEG
73926: PUSH
73927: EMPTY
73928: LIST
73929: LIST
73930: PUSH
73931: EMPTY
73932: LIST
73933: LIST
73934: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
73935: LD_ADDR_VAR 0 48
73939: PUSH
73940: LD_INT 1
73942: PUSH
73943: LD_INT 2
73945: NEG
73946: PUSH
73947: EMPTY
73948: LIST
73949: LIST
73950: PUSH
73951: LD_INT 2
73953: PUSH
73954: LD_INT 1
73956: NEG
73957: PUSH
73958: EMPTY
73959: LIST
73960: LIST
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
73966: LD_ADDR_VAR 0 49
73970: PUSH
73971: LD_INT 3
73973: PUSH
73974: LD_INT 1
73976: PUSH
73977: EMPTY
73978: LIST
73979: LIST
73980: PUSH
73981: LD_INT 3
73983: PUSH
73984: LD_INT 2
73986: PUSH
73987: EMPTY
73988: LIST
73989: LIST
73990: PUSH
73991: EMPTY
73992: LIST
73993: LIST
73994: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
73995: LD_ADDR_VAR 0 50
73999: PUSH
74000: LD_INT 2
74002: PUSH
74003: LD_INT 3
74005: PUSH
74006: EMPTY
74007: LIST
74008: LIST
74009: PUSH
74010: LD_INT 1
74012: PUSH
74013: LD_INT 3
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PUSH
74020: EMPTY
74021: LIST
74022: LIST
74023: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
74024: LD_ADDR_VAR 0 51
74028: PUSH
74029: LD_INT 1
74031: NEG
74032: PUSH
74033: LD_INT 2
74035: PUSH
74036: EMPTY
74037: LIST
74038: LIST
74039: PUSH
74040: LD_INT 2
74042: NEG
74043: PUSH
74044: LD_INT 1
74046: PUSH
74047: EMPTY
74048: LIST
74049: LIST
74050: PUSH
74051: EMPTY
74052: LIST
74053: LIST
74054: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
74055: LD_ADDR_VAR 0 52
74059: PUSH
74060: LD_INT 3
74062: NEG
74063: PUSH
74064: LD_INT 1
74066: NEG
74067: PUSH
74068: EMPTY
74069: LIST
74070: LIST
74071: PUSH
74072: LD_INT 3
74074: NEG
74075: PUSH
74076: LD_INT 2
74078: NEG
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: PUSH
74084: EMPTY
74085: LIST
74086: LIST
74087: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
74088: LD_ADDR_VAR 0 53
74092: PUSH
74093: LD_INT 1
74095: NEG
74096: PUSH
74097: LD_INT 3
74099: NEG
74100: PUSH
74101: EMPTY
74102: LIST
74103: LIST
74104: PUSH
74105: LD_INT 0
74107: PUSH
74108: LD_INT 3
74110: NEG
74111: PUSH
74112: EMPTY
74113: LIST
74114: LIST
74115: PUSH
74116: LD_INT 1
74118: PUSH
74119: LD_INT 2
74121: NEG
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: PUSH
74127: EMPTY
74128: LIST
74129: LIST
74130: LIST
74131: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
74132: LD_ADDR_VAR 0 54
74136: PUSH
74137: LD_INT 2
74139: PUSH
74140: LD_INT 1
74142: NEG
74143: PUSH
74144: EMPTY
74145: LIST
74146: LIST
74147: PUSH
74148: LD_INT 3
74150: PUSH
74151: LD_INT 0
74153: PUSH
74154: EMPTY
74155: LIST
74156: LIST
74157: PUSH
74158: LD_INT 3
74160: PUSH
74161: LD_INT 1
74163: PUSH
74164: EMPTY
74165: LIST
74166: LIST
74167: PUSH
74168: EMPTY
74169: LIST
74170: LIST
74171: LIST
74172: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
74173: LD_ADDR_VAR 0 55
74177: PUSH
74178: LD_INT 3
74180: PUSH
74181: LD_INT 2
74183: PUSH
74184: EMPTY
74185: LIST
74186: LIST
74187: PUSH
74188: LD_INT 3
74190: PUSH
74191: LD_INT 3
74193: PUSH
74194: EMPTY
74195: LIST
74196: LIST
74197: PUSH
74198: LD_INT 2
74200: PUSH
74201: LD_INT 3
74203: PUSH
74204: EMPTY
74205: LIST
74206: LIST
74207: PUSH
74208: EMPTY
74209: LIST
74210: LIST
74211: LIST
74212: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74213: LD_ADDR_VAR 0 56
74217: PUSH
74218: LD_INT 1
74220: PUSH
74221: LD_INT 3
74223: PUSH
74224: EMPTY
74225: LIST
74226: LIST
74227: PUSH
74228: LD_INT 0
74230: PUSH
74231: LD_INT 3
74233: PUSH
74234: EMPTY
74235: LIST
74236: LIST
74237: PUSH
74238: LD_INT 1
74240: NEG
74241: PUSH
74242: LD_INT 2
74244: PUSH
74245: EMPTY
74246: LIST
74247: LIST
74248: PUSH
74249: EMPTY
74250: LIST
74251: LIST
74252: LIST
74253: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74254: LD_ADDR_VAR 0 57
74258: PUSH
74259: LD_INT 2
74261: NEG
74262: PUSH
74263: LD_INT 1
74265: PUSH
74266: EMPTY
74267: LIST
74268: LIST
74269: PUSH
74270: LD_INT 3
74272: NEG
74273: PUSH
74274: LD_INT 0
74276: PUSH
74277: EMPTY
74278: LIST
74279: LIST
74280: PUSH
74281: LD_INT 3
74283: NEG
74284: PUSH
74285: LD_INT 1
74287: NEG
74288: PUSH
74289: EMPTY
74290: LIST
74291: LIST
74292: PUSH
74293: EMPTY
74294: LIST
74295: LIST
74296: LIST
74297: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
74298: LD_ADDR_VAR 0 58
74302: PUSH
74303: LD_INT 2
74305: NEG
74306: PUSH
74307: LD_INT 3
74309: NEG
74310: PUSH
74311: EMPTY
74312: LIST
74313: LIST
74314: PUSH
74315: LD_INT 3
74317: NEG
74318: PUSH
74319: LD_INT 2
74321: NEG
74322: PUSH
74323: EMPTY
74324: LIST
74325: LIST
74326: PUSH
74327: LD_INT 3
74329: NEG
74330: PUSH
74331: LD_INT 3
74333: NEG
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: PUSH
74339: EMPTY
74340: LIST
74341: LIST
74342: LIST
74343: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
74344: LD_ADDR_VAR 0 59
74348: PUSH
74349: LD_INT 1
74351: NEG
74352: PUSH
74353: LD_INT 2
74355: NEG
74356: PUSH
74357: EMPTY
74358: LIST
74359: LIST
74360: PUSH
74361: LD_INT 0
74363: PUSH
74364: LD_INT 2
74366: NEG
74367: PUSH
74368: EMPTY
74369: LIST
74370: LIST
74371: PUSH
74372: LD_INT 1
74374: PUSH
74375: LD_INT 1
74377: NEG
74378: PUSH
74379: EMPTY
74380: LIST
74381: LIST
74382: PUSH
74383: EMPTY
74384: LIST
74385: LIST
74386: LIST
74387: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
74388: LD_ADDR_VAR 0 60
74392: PUSH
74393: LD_INT 1
74395: PUSH
74396: LD_INT 1
74398: NEG
74399: PUSH
74400: EMPTY
74401: LIST
74402: LIST
74403: PUSH
74404: LD_INT 2
74406: PUSH
74407: LD_INT 0
74409: PUSH
74410: EMPTY
74411: LIST
74412: LIST
74413: PUSH
74414: LD_INT 2
74416: PUSH
74417: LD_INT 1
74419: PUSH
74420: EMPTY
74421: LIST
74422: LIST
74423: PUSH
74424: EMPTY
74425: LIST
74426: LIST
74427: LIST
74428: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
74429: LD_ADDR_VAR 0 61
74433: PUSH
74434: LD_INT 2
74436: PUSH
74437: LD_INT 1
74439: PUSH
74440: EMPTY
74441: LIST
74442: LIST
74443: PUSH
74444: LD_INT 2
74446: PUSH
74447: LD_INT 2
74449: PUSH
74450: EMPTY
74451: LIST
74452: LIST
74453: PUSH
74454: LD_INT 1
74456: PUSH
74457: LD_INT 2
74459: PUSH
74460: EMPTY
74461: LIST
74462: LIST
74463: PUSH
74464: EMPTY
74465: LIST
74466: LIST
74467: LIST
74468: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
74469: LD_ADDR_VAR 0 62
74473: PUSH
74474: LD_INT 1
74476: PUSH
74477: LD_INT 2
74479: PUSH
74480: EMPTY
74481: LIST
74482: LIST
74483: PUSH
74484: LD_INT 0
74486: PUSH
74487: LD_INT 2
74489: PUSH
74490: EMPTY
74491: LIST
74492: LIST
74493: PUSH
74494: LD_INT 1
74496: NEG
74497: PUSH
74498: LD_INT 1
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: PUSH
74505: EMPTY
74506: LIST
74507: LIST
74508: LIST
74509: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
74510: LD_ADDR_VAR 0 63
74514: PUSH
74515: LD_INT 1
74517: NEG
74518: PUSH
74519: LD_INT 1
74521: PUSH
74522: EMPTY
74523: LIST
74524: LIST
74525: PUSH
74526: LD_INT 2
74528: NEG
74529: PUSH
74530: LD_INT 0
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: PUSH
74537: LD_INT 2
74539: NEG
74540: PUSH
74541: LD_INT 1
74543: NEG
74544: PUSH
74545: EMPTY
74546: LIST
74547: LIST
74548: PUSH
74549: EMPTY
74550: LIST
74551: LIST
74552: LIST
74553: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74554: LD_ADDR_VAR 0 64
74558: PUSH
74559: LD_INT 1
74561: NEG
74562: PUSH
74563: LD_INT 2
74565: NEG
74566: PUSH
74567: EMPTY
74568: LIST
74569: LIST
74570: PUSH
74571: LD_INT 2
74573: NEG
74574: PUSH
74575: LD_INT 1
74577: NEG
74578: PUSH
74579: EMPTY
74580: LIST
74581: LIST
74582: PUSH
74583: LD_INT 2
74585: NEG
74586: PUSH
74587: LD_INT 2
74589: NEG
74590: PUSH
74591: EMPTY
74592: LIST
74593: LIST
74594: PUSH
74595: EMPTY
74596: LIST
74597: LIST
74598: LIST
74599: ST_TO_ADDR
// end ; 2 :
74600: GO 77866
74602: LD_INT 2
74604: DOUBLE
74605: EQUAL
74606: IFTRUE 74610
74608: GO 77865
74610: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
74611: LD_ADDR_VAR 0 29
74615: PUSH
74616: LD_INT 4
74618: PUSH
74619: LD_INT 0
74621: PUSH
74622: EMPTY
74623: LIST
74624: LIST
74625: PUSH
74626: LD_INT 4
74628: PUSH
74629: LD_INT 1
74631: NEG
74632: PUSH
74633: EMPTY
74634: LIST
74635: LIST
74636: PUSH
74637: LD_INT 5
74639: PUSH
74640: LD_INT 0
74642: PUSH
74643: EMPTY
74644: LIST
74645: LIST
74646: PUSH
74647: LD_INT 5
74649: PUSH
74650: LD_INT 1
74652: PUSH
74653: EMPTY
74654: LIST
74655: LIST
74656: PUSH
74657: LD_INT 4
74659: PUSH
74660: LD_INT 1
74662: PUSH
74663: EMPTY
74664: LIST
74665: LIST
74666: PUSH
74667: LD_INT 3
74669: PUSH
74670: LD_INT 0
74672: PUSH
74673: EMPTY
74674: LIST
74675: LIST
74676: PUSH
74677: LD_INT 3
74679: PUSH
74680: LD_INT 1
74682: NEG
74683: PUSH
74684: EMPTY
74685: LIST
74686: LIST
74687: PUSH
74688: LD_INT 3
74690: PUSH
74691: LD_INT 2
74693: NEG
74694: PUSH
74695: EMPTY
74696: LIST
74697: LIST
74698: PUSH
74699: LD_INT 5
74701: PUSH
74702: LD_INT 2
74704: PUSH
74705: EMPTY
74706: LIST
74707: LIST
74708: PUSH
74709: LD_INT 3
74711: PUSH
74712: LD_INT 3
74714: PUSH
74715: EMPTY
74716: LIST
74717: LIST
74718: PUSH
74719: LD_INT 3
74721: PUSH
74722: LD_INT 2
74724: PUSH
74725: EMPTY
74726: LIST
74727: LIST
74728: PUSH
74729: LD_INT 4
74731: PUSH
74732: LD_INT 3
74734: PUSH
74735: EMPTY
74736: LIST
74737: LIST
74738: PUSH
74739: LD_INT 4
74741: PUSH
74742: LD_INT 4
74744: PUSH
74745: EMPTY
74746: LIST
74747: LIST
74748: PUSH
74749: LD_INT 3
74751: PUSH
74752: LD_INT 4
74754: PUSH
74755: EMPTY
74756: LIST
74757: LIST
74758: PUSH
74759: LD_INT 2
74761: PUSH
74762: LD_INT 3
74764: PUSH
74765: EMPTY
74766: LIST
74767: LIST
74768: PUSH
74769: LD_INT 2
74771: PUSH
74772: LD_INT 2
74774: PUSH
74775: EMPTY
74776: LIST
74777: LIST
74778: PUSH
74779: LD_INT 4
74781: PUSH
74782: LD_INT 2
74784: PUSH
74785: EMPTY
74786: LIST
74787: LIST
74788: PUSH
74789: LD_INT 2
74791: PUSH
74792: LD_INT 4
74794: PUSH
74795: EMPTY
74796: LIST
74797: LIST
74798: PUSH
74799: LD_INT 0
74801: PUSH
74802: LD_INT 4
74804: PUSH
74805: EMPTY
74806: LIST
74807: LIST
74808: PUSH
74809: LD_INT 0
74811: PUSH
74812: LD_INT 3
74814: PUSH
74815: EMPTY
74816: LIST
74817: LIST
74818: PUSH
74819: LD_INT 1
74821: PUSH
74822: LD_INT 4
74824: PUSH
74825: EMPTY
74826: LIST
74827: LIST
74828: PUSH
74829: LD_INT 1
74831: PUSH
74832: LD_INT 5
74834: PUSH
74835: EMPTY
74836: LIST
74837: LIST
74838: PUSH
74839: LD_INT 0
74841: PUSH
74842: LD_INT 5
74844: PUSH
74845: EMPTY
74846: LIST
74847: LIST
74848: PUSH
74849: LD_INT 1
74851: NEG
74852: PUSH
74853: LD_INT 4
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: PUSH
74860: LD_INT 1
74862: NEG
74863: PUSH
74864: LD_INT 3
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: PUSH
74871: LD_INT 2
74873: PUSH
74874: LD_INT 5
74876: PUSH
74877: EMPTY
74878: LIST
74879: LIST
74880: PUSH
74881: LD_INT 2
74883: NEG
74884: PUSH
74885: LD_INT 3
74887: PUSH
74888: EMPTY
74889: LIST
74890: LIST
74891: PUSH
74892: LD_INT 3
74894: NEG
74895: PUSH
74896: LD_INT 0
74898: PUSH
74899: EMPTY
74900: LIST
74901: LIST
74902: PUSH
74903: LD_INT 3
74905: NEG
74906: PUSH
74907: LD_INT 1
74909: NEG
74910: PUSH
74911: EMPTY
74912: LIST
74913: LIST
74914: PUSH
74915: LD_INT 2
74917: NEG
74918: PUSH
74919: LD_INT 0
74921: PUSH
74922: EMPTY
74923: LIST
74924: LIST
74925: PUSH
74926: LD_INT 2
74928: NEG
74929: PUSH
74930: LD_INT 1
74932: PUSH
74933: EMPTY
74934: LIST
74935: LIST
74936: PUSH
74937: LD_INT 3
74939: NEG
74940: PUSH
74941: LD_INT 1
74943: PUSH
74944: EMPTY
74945: LIST
74946: LIST
74947: PUSH
74948: LD_INT 4
74950: NEG
74951: PUSH
74952: LD_INT 0
74954: PUSH
74955: EMPTY
74956: LIST
74957: LIST
74958: PUSH
74959: LD_INT 4
74961: NEG
74962: PUSH
74963: LD_INT 1
74965: NEG
74966: PUSH
74967: EMPTY
74968: LIST
74969: LIST
74970: PUSH
74971: LD_INT 4
74973: NEG
74974: PUSH
74975: LD_INT 2
74977: NEG
74978: PUSH
74979: EMPTY
74980: LIST
74981: LIST
74982: PUSH
74983: LD_INT 2
74985: NEG
74986: PUSH
74987: LD_INT 2
74989: PUSH
74990: EMPTY
74991: LIST
74992: LIST
74993: PUSH
74994: LD_INT 4
74996: NEG
74997: PUSH
74998: LD_INT 4
75000: NEG
75001: PUSH
75002: EMPTY
75003: LIST
75004: LIST
75005: PUSH
75006: LD_INT 4
75008: NEG
75009: PUSH
75010: LD_INT 5
75012: NEG
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: PUSH
75018: LD_INT 3
75020: NEG
75021: PUSH
75022: LD_INT 4
75024: NEG
75025: PUSH
75026: EMPTY
75027: LIST
75028: LIST
75029: PUSH
75030: LD_INT 3
75032: NEG
75033: PUSH
75034: LD_INT 3
75036: NEG
75037: PUSH
75038: EMPTY
75039: LIST
75040: LIST
75041: PUSH
75042: LD_INT 4
75044: NEG
75045: PUSH
75046: LD_INT 3
75048: NEG
75049: PUSH
75050: EMPTY
75051: LIST
75052: LIST
75053: PUSH
75054: LD_INT 5
75056: NEG
75057: PUSH
75058: LD_INT 4
75060: NEG
75061: PUSH
75062: EMPTY
75063: LIST
75064: LIST
75065: PUSH
75066: LD_INT 5
75068: NEG
75069: PUSH
75070: LD_INT 5
75072: NEG
75073: PUSH
75074: EMPTY
75075: LIST
75076: LIST
75077: PUSH
75078: LD_INT 3
75080: NEG
75081: PUSH
75082: LD_INT 5
75084: NEG
75085: PUSH
75086: EMPTY
75087: LIST
75088: LIST
75089: PUSH
75090: LD_INT 5
75092: NEG
75093: PUSH
75094: LD_INT 3
75096: NEG
75097: PUSH
75098: EMPTY
75099: LIST
75100: LIST
75101: PUSH
75102: EMPTY
75103: LIST
75104: LIST
75105: LIST
75106: LIST
75107: LIST
75108: LIST
75109: LIST
75110: LIST
75111: LIST
75112: LIST
75113: LIST
75114: LIST
75115: LIST
75116: LIST
75117: LIST
75118: LIST
75119: LIST
75120: LIST
75121: LIST
75122: LIST
75123: LIST
75124: LIST
75125: LIST
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: LIST
75132: LIST
75133: LIST
75134: LIST
75135: LIST
75136: LIST
75137: LIST
75138: LIST
75139: LIST
75140: LIST
75141: LIST
75142: LIST
75143: LIST
75144: LIST
75145: LIST
75146: LIST
75147: LIST
75148: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
75149: LD_ADDR_VAR 0 30
75153: PUSH
75154: LD_INT 4
75156: PUSH
75157: LD_INT 4
75159: PUSH
75160: EMPTY
75161: LIST
75162: LIST
75163: PUSH
75164: LD_INT 4
75166: PUSH
75167: LD_INT 3
75169: PUSH
75170: EMPTY
75171: LIST
75172: LIST
75173: PUSH
75174: LD_INT 5
75176: PUSH
75177: LD_INT 4
75179: PUSH
75180: EMPTY
75181: LIST
75182: LIST
75183: PUSH
75184: LD_INT 5
75186: PUSH
75187: LD_INT 5
75189: PUSH
75190: EMPTY
75191: LIST
75192: LIST
75193: PUSH
75194: LD_INT 4
75196: PUSH
75197: LD_INT 5
75199: PUSH
75200: EMPTY
75201: LIST
75202: LIST
75203: PUSH
75204: LD_INT 3
75206: PUSH
75207: LD_INT 4
75209: PUSH
75210: EMPTY
75211: LIST
75212: LIST
75213: PUSH
75214: LD_INT 3
75216: PUSH
75217: LD_INT 3
75219: PUSH
75220: EMPTY
75221: LIST
75222: LIST
75223: PUSH
75224: LD_INT 5
75226: PUSH
75227: LD_INT 3
75229: PUSH
75230: EMPTY
75231: LIST
75232: LIST
75233: PUSH
75234: LD_INT 3
75236: PUSH
75237: LD_INT 5
75239: PUSH
75240: EMPTY
75241: LIST
75242: LIST
75243: PUSH
75244: LD_INT 0
75246: PUSH
75247: LD_INT 3
75249: PUSH
75250: EMPTY
75251: LIST
75252: LIST
75253: PUSH
75254: LD_INT 0
75256: PUSH
75257: LD_INT 2
75259: PUSH
75260: EMPTY
75261: LIST
75262: LIST
75263: PUSH
75264: LD_INT 1
75266: PUSH
75267: LD_INT 3
75269: PUSH
75270: EMPTY
75271: LIST
75272: LIST
75273: PUSH
75274: LD_INT 1
75276: PUSH
75277: LD_INT 4
75279: PUSH
75280: EMPTY
75281: LIST
75282: LIST
75283: PUSH
75284: LD_INT 0
75286: PUSH
75287: LD_INT 4
75289: PUSH
75290: EMPTY
75291: LIST
75292: LIST
75293: PUSH
75294: LD_INT 1
75296: NEG
75297: PUSH
75298: LD_INT 3
75300: PUSH
75301: EMPTY
75302: LIST
75303: LIST
75304: PUSH
75305: LD_INT 1
75307: NEG
75308: PUSH
75309: LD_INT 2
75311: PUSH
75312: EMPTY
75313: LIST
75314: LIST
75315: PUSH
75316: LD_INT 2
75318: PUSH
75319: LD_INT 4
75321: PUSH
75322: EMPTY
75323: LIST
75324: LIST
75325: PUSH
75326: LD_INT 2
75328: NEG
75329: PUSH
75330: LD_INT 2
75332: PUSH
75333: EMPTY
75334: LIST
75335: LIST
75336: PUSH
75337: LD_INT 4
75339: NEG
75340: PUSH
75341: LD_INT 0
75343: PUSH
75344: EMPTY
75345: LIST
75346: LIST
75347: PUSH
75348: LD_INT 4
75350: NEG
75351: PUSH
75352: LD_INT 1
75354: NEG
75355: PUSH
75356: EMPTY
75357: LIST
75358: LIST
75359: PUSH
75360: LD_INT 3
75362: NEG
75363: PUSH
75364: LD_INT 0
75366: PUSH
75367: EMPTY
75368: LIST
75369: LIST
75370: PUSH
75371: LD_INT 3
75373: NEG
75374: PUSH
75375: LD_INT 1
75377: PUSH
75378: EMPTY
75379: LIST
75380: LIST
75381: PUSH
75382: LD_INT 4
75384: NEG
75385: PUSH
75386: LD_INT 1
75388: PUSH
75389: EMPTY
75390: LIST
75391: LIST
75392: PUSH
75393: LD_INT 5
75395: NEG
75396: PUSH
75397: LD_INT 0
75399: PUSH
75400: EMPTY
75401: LIST
75402: LIST
75403: PUSH
75404: LD_INT 5
75406: NEG
75407: PUSH
75408: LD_INT 1
75410: NEG
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: PUSH
75416: LD_INT 5
75418: NEG
75419: PUSH
75420: LD_INT 2
75422: NEG
75423: PUSH
75424: EMPTY
75425: LIST
75426: LIST
75427: PUSH
75428: LD_INT 3
75430: NEG
75431: PUSH
75432: LD_INT 2
75434: PUSH
75435: EMPTY
75436: LIST
75437: LIST
75438: PUSH
75439: LD_INT 3
75441: NEG
75442: PUSH
75443: LD_INT 3
75445: NEG
75446: PUSH
75447: EMPTY
75448: LIST
75449: LIST
75450: PUSH
75451: LD_INT 3
75453: NEG
75454: PUSH
75455: LD_INT 4
75457: NEG
75458: PUSH
75459: EMPTY
75460: LIST
75461: LIST
75462: PUSH
75463: LD_INT 2
75465: NEG
75466: PUSH
75467: LD_INT 3
75469: NEG
75470: PUSH
75471: EMPTY
75472: LIST
75473: LIST
75474: PUSH
75475: LD_INT 2
75477: NEG
75478: PUSH
75479: LD_INT 2
75481: NEG
75482: PUSH
75483: EMPTY
75484: LIST
75485: LIST
75486: PUSH
75487: LD_INT 3
75489: NEG
75490: PUSH
75491: LD_INT 2
75493: NEG
75494: PUSH
75495: EMPTY
75496: LIST
75497: LIST
75498: PUSH
75499: LD_INT 4
75501: NEG
75502: PUSH
75503: LD_INT 3
75505: NEG
75506: PUSH
75507: EMPTY
75508: LIST
75509: LIST
75510: PUSH
75511: LD_INT 4
75513: NEG
75514: PUSH
75515: LD_INT 4
75517: NEG
75518: PUSH
75519: EMPTY
75520: LIST
75521: LIST
75522: PUSH
75523: LD_INT 2
75525: NEG
75526: PUSH
75527: LD_INT 4
75529: NEG
75530: PUSH
75531: EMPTY
75532: LIST
75533: LIST
75534: PUSH
75535: LD_INT 4
75537: NEG
75538: PUSH
75539: LD_INT 2
75541: NEG
75542: PUSH
75543: EMPTY
75544: LIST
75545: LIST
75546: PUSH
75547: LD_INT 0
75549: PUSH
75550: LD_INT 4
75552: NEG
75553: PUSH
75554: EMPTY
75555: LIST
75556: LIST
75557: PUSH
75558: LD_INT 0
75560: PUSH
75561: LD_INT 5
75563: NEG
75564: PUSH
75565: EMPTY
75566: LIST
75567: LIST
75568: PUSH
75569: LD_INT 1
75571: PUSH
75572: LD_INT 4
75574: NEG
75575: PUSH
75576: EMPTY
75577: LIST
75578: LIST
75579: PUSH
75580: LD_INT 1
75582: PUSH
75583: LD_INT 3
75585: NEG
75586: PUSH
75587: EMPTY
75588: LIST
75589: LIST
75590: PUSH
75591: LD_INT 0
75593: PUSH
75594: LD_INT 3
75596: NEG
75597: PUSH
75598: EMPTY
75599: LIST
75600: LIST
75601: PUSH
75602: LD_INT 1
75604: NEG
75605: PUSH
75606: LD_INT 4
75608: NEG
75609: PUSH
75610: EMPTY
75611: LIST
75612: LIST
75613: PUSH
75614: LD_INT 1
75616: NEG
75617: PUSH
75618: LD_INT 5
75620: NEG
75621: PUSH
75622: EMPTY
75623: LIST
75624: LIST
75625: PUSH
75626: LD_INT 2
75628: PUSH
75629: LD_INT 3
75631: NEG
75632: PUSH
75633: EMPTY
75634: LIST
75635: LIST
75636: PUSH
75637: LD_INT 2
75639: NEG
75640: PUSH
75641: LD_INT 5
75643: NEG
75644: PUSH
75645: EMPTY
75646: LIST
75647: LIST
75648: PUSH
75649: EMPTY
75650: LIST
75651: LIST
75652: LIST
75653: LIST
75654: LIST
75655: LIST
75656: LIST
75657: LIST
75658: LIST
75659: LIST
75660: LIST
75661: LIST
75662: LIST
75663: LIST
75664: LIST
75665: LIST
75666: LIST
75667: LIST
75668: LIST
75669: LIST
75670: LIST
75671: LIST
75672: LIST
75673: LIST
75674: LIST
75675: LIST
75676: LIST
75677: LIST
75678: LIST
75679: LIST
75680: LIST
75681: LIST
75682: LIST
75683: LIST
75684: LIST
75685: LIST
75686: LIST
75687: LIST
75688: LIST
75689: LIST
75690: LIST
75691: LIST
75692: LIST
75693: LIST
75694: LIST
75695: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
75696: LD_ADDR_VAR 0 31
75700: PUSH
75701: LD_INT 0
75703: PUSH
75704: LD_INT 4
75706: PUSH
75707: EMPTY
75708: LIST
75709: LIST
75710: PUSH
75711: LD_INT 0
75713: PUSH
75714: LD_INT 3
75716: PUSH
75717: EMPTY
75718: LIST
75719: LIST
75720: PUSH
75721: LD_INT 1
75723: PUSH
75724: LD_INT 4
75726: PUSH
75727: EMPTY
75728: LIST
75729: LIST
75730: PUSH
75731: LD_INT 1
75733: PUSH
75734: LD_INT 5
75736: PUSH
75737: EMPTY
75738: LIST
75739: LIST
75740: PUSH
75741: LD_INT 0
75743: PUSH
75744: LD_INT 5
75746: PUSH
75747: EMPTY
75748: LIST
75749: LIST
75750: PUSH
75751: LD_INT 1
75753: NEG
75754: PUSH
75755: LD_INT 4
75757: PUSH
75758: EMPTY
75759: LIST
75760: LIST
75761: PUSH
75762: LD_INT 1
75764: NEG
75765: PUSH
75766: LD_INT 3
75768: PUSH
75769: EMPTY
75770: LIST
75771: LIST
75772: PUSH
75773: LD_INT 2
75775: PUSH
75776: LD_INT 5
75778: PUSH
75779: EMPTY
75780: LIST
75781: LIST
75782: PUSH
75783: LD_INT 2
75785: NEG
75786: PUSH
75787: LD_INT 3
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: PUSH
75794: LD_INT 3
75796: NEG
75797: PUSH
75798: LD_INT 0
75800: PUSH
75801: EMPTY
75802: LIST
75803: LIST
75804: PUSH
75805: LD_INT 3
75807: NEG
75808: PUSH
75809: LD_INT 1
75811: NEG
75812: PUSH
75813: EMPTY
75814: LIST
75815: LIST
75816: PUSH
75817: LD_INT 2
75819: NEG
75820: PUSH
75821: LD_INT 0
75823: PUSH
75824: EMPTY
75825: LIST
75826: LIST
75827: PUSH
75828: LD_INT 2
75830: NEG
75831: PUSH
75832: LD_INT 1
75834: PUSH
75835: EMPTY
75836: LIST
75837: LIST
75838: PUSH
75839: LD_INT 3
75841: NEG
75842: PUSH
75843: LD_INT 1
75845: PUSH
75846: EMPTY
75847: LIST
75848: LIST
75849: PUSH
75850: LD_INT 4
75852: NEG
75853: PUSH
75854: LD_INT 0
75856: PUSH
75857: EMPTY
75858: LIST
75859: LIST
75860: PUSH
75861: LD_INT 4
75863: NEG
75864: PUSH
75865: LD_INT 1
75867: NEG
75868: PUSH
75869: EMPTY
75870: LIST
75871: LIST
75872: PUSH
75873: LD_INT 4
75875: NEG
75876: PUSH
75877: LD_INT 2
75879: NEG
75880: PUSH
75881: EMPTY
75882: LIST
75883: LIST
75884: PUSH
75885: LD_INT 2
75887: NEG
75888: PUSH
75889: LD_INT 2
75891: PUSH
75892: EMPTY
75893: LIST
75894: LIST
75895: PUSH
75896: LD_INT 4
75898: NEG
75899: PUSH
75900: LD_INT 4
75902: NEG
75903: PUSH
75904: EMPTY
75905: LIST
75906: LIST
75907: PUSH
75908: LD_INT 4
75910: NEG
75911: PUSH
75912: LD_INT 5
75914: NEG
75915: PUSH
75916: EMPTY
75917: LIST
75918: LIST
75919: PUSH
75920: LD_INT 3
75922: NEG
75923: PUSH
75924: LD_INT 4
75926: NEG
75927: PUSH
75928: EMPTY
75929: LIST
75930: LIST
75931: PUSH
75932: LD_INT 3
75934: NEG
75935: PUSH
75936: LD_INT 3
75938: NEG
75939: PUSH
75940: EMPTY
75941: LIST
75942: LIST
75943: PUSH
75944: LD_INT 4
75946: NEG
75947: PUSH
75948: LD_INT 3
75950: NEG
75951: PUSH
75952: EMPTY
75953: LIST
75954: LIST
75955: PUSH
75956: LD_INT 5
75958: NEG
75959: PUSH
75960: LD_INT 4
75962: NEG
75963: PUSH
75964: EMPTY
75965: LIST
75966: LIST
75967: PUSH
75968: LD_INT 5
75970: NEG
75971: PUSH
75972: LD_INT 5
75974: NEG
75975: PUSH
75976: EMPTY
75977: LIST
75978: LIST
75979: PUSH
75980: LD_INT 3
75982: NEG
75983: PUSH
75984: LD_INT 5
75986: NEG
75987: PUSH
75988: EMPTY
75989: LIST
75990: LIST
75991: PUSH
75992: LD_INT 5
75994: NEG
75995: PUSH
75996: LD_INT 3
75998: NEG
75999: PUSH
76000: EMPTY
76001: LIST
76002: LIST
76003: PUSH
76004: LD_INT 0
76006: PUSH
76007: LD_INT 3
76009: NEG
76010: PUSH
76011: EMPTY
76012: LIST
76013: LIST
76014: PUSH
76015: LD_INT 0
76017: PUSH
76018: LD_INT 4
76020: NEG
76021: PUSH
76022: EMPTY
76023: LIST
76024: LIST
76025: PUSH
76026: LD_INT 1
76028: PUSH
76029: LD_INT 3
76031: NEG
76032: PUSH
76033: EMPTY
76034: LIST
76035: LIST
76036: PUSH
76037: LD_INT 1
76039: PUSH
76040: LD_INT 2
76042: NEG
76043: PUSH
76044: EMPTY
76045: LIST
76046: LIST
76047: PUSH
76048: LD_INT 0
76050: PUSH
76051: LD_INT 2
76053: NEG
76054: PUSH
76055: EMPTY
76056: LIST
76057: LIST
76058: PUSH
76059: LD_INT 1
76061: NEG
76062: PUSH
76063: LD_INT 3
76065: NEG
76066: PUSH
76067: EMPTY
76068: LIST
76069: LIST
76070: PUSH
76071: LD_INT 1
76073: NEG
76074: PUSH
76075: LD_INT 4
76077: NEG
76078: PUSH
76079: EMPTY
76080: LIST
76081: LIST
76082: PUSH
76083: LD_INT 2
76085: PUSH
76086: LD_INT 2
76088: NEG
76089: PUSH
76090: EMPTY
76091: LIST
76092: LIST
76093: PUSH
76094: LD_INT 2
76096: NEG
76097: PUSH
76098: LD_INT 4
76100: NEG
76101: PUSH
76102: EMPTY
76103: LIST
76104: LIST
76105: PUSH
76106: LD_INT 4
76108: PUSH
76109: LD_INT 0
76111: PUSH
76112: EMPTY
76113: LIST
76114: LIST
76115: PUSH
76116: LD_INT 4
76118: PUSH
76119: LD_INT 1
76121: NEG
76122: PUSH
76123: EMPTY
76124: LIST
76125: LIST
76126: PUSH
76127: LD_INT 5
76129: PUSH
76130: LD_INT 0
76132: PUSH
76133: EMPTY
76134: LIST
76135: LIST
76136: PUSH
76137: LD_INT 5
76139: PUSH
76140: LD_INT 1
76142: PUSH
76143: EMPTY
76144: LIST
76145: LIST
76146: PUSH
76147: LD_INT 4
76149: PUSH
76150: LD_INT 1
76152: PUSH
76153: EMPTY
76154: LIST
76155: LIST
76156: PUSH
76157: LD_INT 3
76159: PUSH
76160: LD_INT 0
76162: PUSH
76163: EMPTY
76164: LIST
76165: LIST
76166: PUSH
76167: LD_INT 3
76169: PUSH
76170: LD_INT 1
76172: NEG
76173: PUSH
76174: EMPTY
76175: LIST
76176: LIST
76177: PUSH
76178: LD_INT 3
76180: PUSH
76181: LD_INT 2
76183: NEG
76184: PUSH
76185: EMPTY
76186: LIST
76187: LIST
76188: PUSH
76189: LD_INT 5
76191: PUSH
76192: LD_INT 2
76194: PUSH
76195: EMPTY
76196: LIST
76197: LIST
76198: PUSH
76199: EMPTY
76200: LIST
76201: LIST
76202: LIST
76203: LIST
76204: LIST
76205: LIST
76206: LIST
76207: LIST
76208: LIST
76209: LIST
76210: LIST
76211: LIST
76212: LIST
76213: LIST
76214: LIST
76215: LIST
76216: LIST
76217: LIST
76218: LIST
76219: LIST
76220: LIST
76221: LIST
76222: LIST
76223: LIST
76224: LIST
76225: LIST
76226: LIST
76227: LIST
76228: LIST
76229: LIST
76230: LIST
76231: LIST
76232: LIST
76233: LIST
76234: LIST
76235: LIST
76236: LIST
76237: LIST
76238: LIST
76239: LIST
76240: LIST
76241: LIST
76242: LIST
76243: LIST
76244: LIST
76245: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
76246: LD_ADDR_VAR 0 32
76250: PUSH
76251: LD_INT 4
76253: NEG
76254: PUSH
76255: LD_INT 0
76257: PUSH
76258: EMPTY
76259: LIST
76260: LIST
76261: PUSH
76262: LD_INT 4
76264: NEG
76265: PUSH
76266: LD_INT 1
76268: NEG
76269: PUSH
76270: EMPTY
76271: LIST
76272: LIST
76273: PUSH
76274: LD_INT 3
76276: NEG
76277: PUSH
76278: LD_INT 0
76280: PUSH
76281: EMPTY
76282: LIST
76283: LIST
76284: PUSH
76285: LD_INT 3
76287: NEG
76288: PUSH
76289: LD_INT 1
76291: PUSH
76292: EMPTY
76293: LIST
76294: LIST
76295: PUSH
76296: LD_INT 4
76298: NEG
76299: PUSH
76300: LD_INT 1
76302: PUSH
76303: EMPTY
76304: LIST
76305: LIST
76306: PUSH
76307: LD_INT 5
76309: NEG
76310: PUSH
76311: LD_INT 0
76313: PUSH
76314: EMPTY
76315: LIST
76316: LIST
76317: PUSH
76318: LD_INT 5
76320: NEG
76321: PUSH
76322: LD_INT 1
76324: NEG
76325: PUSH
76326: EMPTY
76327: LIST
76328: LIST
76329: PUSH
76330: LD_INT 5
76332: NEG
76333: PUSH
76334: LD_INT 2
76336: NEG
76337: PUSH
76338: EMPTY
76339: LIST
76340: LIST
76341: PUSH
76342: LD_INT 3
76344: NEG
76345: PUSH
76346: LD_INT 2
76348: PUSH
76349: EMPTY
76350: LIST
76351: LIST
76352: PUSH
76353: LD_INT 3
76355: NEG
76356: PUSH
76357: LD_INT 3
76359: NEG
76360: PUSH
76361: EMPTY
76362: LIST
76363: LIST
76364: PUSH
76365: LD_INT 3
76367: NEG
76368: PUSH
76369: LD_INT 4
76371: NEG
76372: PUSH
76373: EMPTY
76374: LIST
76375: LIST
76376: PUSH
76377: LD_INT 2
76379: NEG
76380: PUSH
76381: LD_INT 3
76383: NEG
76384: PUSH
76385: EMPTY
76386: LIST
76387: LIST
76388: PUSH
76389: LD_INT 2
76391: NEG
76392: PUSH
76393: LD_INT 2
76395: NEG
76396: PUSH
76397: EMPTY
76398: LIST
76399: LIST
76400: PUSH
76401: LD_INT 3
76403: NEG
76404: PUSH
76405: LD_INT 2
76407: NEG
76408: PUSH
76409: EMPTY
76410: LIST
76411: LIST
76412: PUSH
76413: LD_INT 4
76415: NEG
76416: PUSH
76417: LD_INT 3
76419: NEG
76420: PUSH
76421: EMPTY
76422: LIST
76423: LIST
76424: PUSH
76425: LD_INT 4
76427: NEG
76428: PUSH
76429: LD_INT 4
76431: NEG
76432: PUSH
76433: EMPTY
76434: LIST
76435: LIST
76436: PUSH
76437: LD_INT 2
76439: NEG
76440: PUSH
76441: LD_INT 4
76443: NEG
76444: PUSH
76445: EMPTY
76446: LIST
76447: LIST
76448: PUSH
76449: LD_INT 4
76451: NEG
76452: PUSH
76453: LD_INT 2
76455: NEG
76456: PUSH
76457: EMPTY
76458: LIST
76459: LIST
76460: PUSH
76461: LD_INT 0
76463: PUSH
76464: LD_INT 4
76466: NEG
76467: PUSH
76468: EMPTY
76469: LIST
76470: LIST
76471: PUSH
76472: LD_INT 0
76474: PUSH
76475: LD_INT 5
76477: NEG
76478: PUSH
76479: EMPTY
76480: LIST
76481: LIST
76482: PUSH
76483: LD_INT 1
76485: PUSH
76486: LD_INT 4
76488: NEG
76489: PUSH
76490: EMPTY
76491: LIST
76492: LIST
76493: PUSH
76494: LD_INT 1
76496: PUSH
76497: LD_INT 3
76499: NEG
76500: PUSH
76501: EMPTY
76502: LIST
76503: LIST
76504: PUSH
76505: LD_INT 0
76507: PUSH
76508: LD_INT 3
76510: NEG
76511: PUSH
76512: EMPTY
76513: LIST
76514: LIST
76515: PUSH
76516: LD_INT 1
76518: NEG
76519: PUSH
76520: LD_INT 4
76522: NEG
76523: PUSH
76524: EMPTY
76525: LIST
76526: LIST
76527: PUSH
76528: LD_INT 1
76530: NEG
76531: PUSH
76532: LD_INT 5
76534: NEG
76535: PUSH
76536: EMPTY
76537: LIST
76538: LIST
76539: PUSH
76540: LD_INT 2
76542: PUSH
76543: LD_INT 3
76545: NEG
76546: PUSH
76547: EMPTY
76548: LIST
76549: LIST
76550: PUSH
76551: LD_INT 2
76553: NEG
76554: PUSH
76555: LD_INT 5
76557: NEG
76558: PUSH
76559: EMPTY
76560: LIST
76561: LIST
76562: PUSH
76563: LD_INT 3
76565: PUSH
76566: LD_INT 0
76568: PUSH
76569: EMPTY
76570: LIST
76571: LIST
76572: PUSH
76573: LD_INT 3
76575: PUSH
76576: LD_INT 1
76578: NEG
76579: PUSH
76580: EMPTY
76581: LIST
76582: LIST
76583: PUSH
76584: LD_INT 4
76586: PUSH
76587: LD_INT 0
76589: PUSH
76590: EMPTY
76591: LIST
76592: LIST
76593: PUSH
76594: LD_INT 4
76596: PUSH
76597: LD_INT 1
76599: PUSH
76600: EMPTY
76601: LIST
76602: LIST
76603: PUSH
76604: LD_INT 3
76606: PUSH
76607: LD_INT 1
76609: PUSH
76610: EMPTY
76611: LIST
76612: LIST
76613: PUSH
76614: LD_INT 2
76616: PUSH
76617: LD_INT 0
76619: PUSH
76620: EMPTY
76621: LIST
76622: LIST
76623: PUSH
76624: LD_INT 2
76626: PUSH
76627: LD_INT 1
76629: NEG
76630: PUSH
76631: EMPTY
76632: LIST
76633: LIST
76634: PUSH
76635: LD_INT 2
76637: PUSH
76638: LD_INT 2
76640: NEG
76641: PUSH
76642: EMPTY
76643: LIST
76644: LIST
76645: PUSH
76646: LD_INT 4
76648: PUSH
76649: LD_INT 2
76651: PUSH
76652: EMPTY
76653: LIST
76654: LIST
76655: PUSH
76656: LD_INT 4
76658: PUSH
76659: LD_INT 4
76661: PUSH
76662: EMPTY
76663: LIST
76664: LIST
76665: PUSH
76666: LD_INT 4
76668: PUSH
76669: LD_INT 3
76671: PUSH
76672: EMPTY
76673: LIST
76674: LIST
76675: PUSH
76676: LD_INT 5
76678: PUSH
76679: LD_INT 4
76681: PUSH
76682: EMPTY
76683: LIST
76684: LIST
76685: PUSH
76686: LD_INT 5
76688: PUSH
76689: LD_INT 5
76691: PUSH
76692: EMPTY
76693: LIST
76694: LIST
76695: PUSH
76696: LD_INT 4
76698: PUSH
76699: LD_INT 5
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: PUSH
76706: LD_INT 3
76708: PUSH
76709: LD_INT 4
76711: PUSH
76712: EMPTY
76713: LIST
76714: LIST
76715: PUSH
76716: LD_INT 3
76718: PUSH
76719: LD_INT 3
76721: PUSH
76722: EMPTY
76723: LIST
76724: LIST
76725: PUSH
76726: LD_INT 5
76728: PUSH
76729: LD_INT 3
76731: PUSH
76732: EMPTY
76733: LIST
76734: LIST
76735: PUSH
76736: LD_INT 3
76738: PUSH
76739: LD_INT 5
76741: PUSH
76742: EMPTY
76743: LIST
76744: LIST
76745: PUSH
76746: EMPTY
76747: LIST
76748: LIST
76749: LIST
76750: LIST
76751: LIST
76752: LIST
76753: LIST
76754: LIST
76755: LIST
76756: LIST
76757: LIST
76758: LIST
76759: LIST
76760: LIST
76761: LIST
76762: LIST
76763: LIST
76764: LIST
76765: LIST
76766: LIST
76767: LIST
76768: LIST
76769: LIST
76770: LIST
76771: LIST
76772: LIST
76773: LIST
76774: LIST
76775: LIST
76776: LIST
76777: LIST
76778: LIST
76779: LIST
76780: LIST
76781: LIST
76782: LIST
76783: LIST
76784: LIST
76785: LIST
76786: LIST
76787: LIST
76788: LIST
76789: LIST
76790: LIST
76791: LIST
76792: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
76793: LD_ADDR_VAR 0 33
76797: PUSH
76798: LD_INT 4
76800: NEG
76801: PUSH
76802: LD_INT 4
76804: NEG
76805: PUSH
76806: EMPTY
76807: LIST
76808: LIST
76809: PUSH
76810: LD_INT 4
76812: NEG
76813: PUSH
76814: LD_INT 5
76816: NEG
76817: PUSH
76818: EMPTY
76819: LIST
76820: LIST
76821: PUSH
76822: LD_INT 3
76824: NEG
76825: PUSH
76826: LD_INT 4
76828: NEG
76829: PUSH
76830: EMPTY
76831: LIST
76832: LIST
76833: PUSH
76834: LD_INT 3
76836: NEG
76837: PUSH
76838: LD_INT 3
76840: NEG
76841: PUSH
76842: EMPTY
76843: LIST
76844: LIST
76845: PUSH
76846: LD_INT 4
76848: NEG
76849: PUSH
76850: LD_INT 3
76852: NEG
76853: PUSH
76854: EMPTY
76855: LIST
76856: LIST
76857: PUSH
76858: LD_INT 5
76860: NEG
76861: PUSH
76862: LD_INT 4
76864: NEG
76865: PUSH
76866: EMPTY
76867: LIST
76868: LIST
76869: PUSH
76870: LD_INT 5
76872: NEG
76873: PUSH
76874: LD_INT 5
76876: NEG
76877: PUSH
76878: EMPTY
76879: LIST
76880: LIST
76881: PUSH
76882: LD_INT 3
76884: NEG
76885: PUSH
76886: LD_INT 5
76888: NEG
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: PUSH
76894: LD_INT 5
76896: NEG
76897: PUSH
76898: LD_INT 3
76900: NEG
76901: PUSH
76902: EMPTY
76903: LIST
76904: LIST
76905: PUSH
76906: LD_INT 0
76908: PUSH
76909: LD_INT 3
76911: NEG
76912: PUSH
76913: EMPTY
76914: LIST
76915: LIST
76916: PUSH
76917: LD_INT 0
76919: PUSH
76920: LD_INT 4
76922: NEG
76923: PUSH
76924: EMPTY
76925: LIST
76926: LIST
76927: PUSH
76928: LD_INT 1
76930: PUSH
76931: LD_INT 3
76933: NEG
76934: PUSH
76935: EMPTY
76936: LIST
76937: LIST
76938: PUSH
76939: LD_INT 1
76941: PUSH
76942: LD_INT 2
76944: NEG
76945: PUSH
76946: EMPTY
76947: LIST
76948: LIST
76949: PUSH
76950: LD_INT 0
76952: PUSH
76953: LD_INT 2
76955: NEG
76956: PUSH
76957: EMPTY
76958: LIST
76959: LIST
76960: PUSH
76961: LD_INT 1
76963: NEG
76964: PUSH
76965: LD_INT 3
76967: NEG
76968: PUSH
76969: EMPTY
76970: LIST
76971: LIST
76972: PUSH
76973: LD_INT 1
76975: NEG
76976: PUSH
76977: LD_INT 4
76979: NEG
76980: PUSH
76981: EMPTY
76982: LIST
76983: LIST
76984: PUSH
76985: LD_INT 2
76987: PUSH
76988: LD_INT 2
76990: NEG
76991: PUSH
76992: EMPTY
76993: LIST
76994: LIST
76995: PUSH
76996: LD_INT 2
76998: NEG
76999: PUSH
77000: LD_INT 4
77002: NEG
77003: PUSH
77004: EMPTY
77005: LIST
77006: LIST
77007: PUSH
77008: LD_INT 4
77010: PUSH
77011: LD_INT 0
77013: PUSH
77014: EMPTY
77015: LIST
77016: LIST
77017: PUSH
77018: LD_INT 4
77020: PUSH
77021: LD_INT 1
77023: NEG
77024: PUSH
77025: EMPTY
77026: LIST
77027: LIST
77028: PUSH
77029: LD_INT 5
77031: PUSH
77032: LD_INT 0
77034: PUSH
77035: EMPTY
77036: LIST
77037: LIST
77038: PUSH
77039: LD_INT 5
77041: PUSH
77042: LD_INT 1
77044: PUSH
77045: EMPTY
77046: LIST
77047: LIST
77048: PUSH
77049: LD_INT 4
77051: PUSH
77052: LD_INT 1
77054: PUSH
77055: EMPTY
77056: LIST
77057: LIST
77058: PUSH
77059: LD_INT 3
77061: PUSH
77062: LD_INT 0
77064: PUSH
77065: EMPTY
77066: LIST
77067: LIST
77068: PUSH
77069: LD_INT 3
77071: PUSH
77072: LD_INT 1
77074: NEG
77075: PUSH
77076: EMPTY
77077: LIST
77078: LIST
77079: PUSH
77080: LD_INT 3
77082: PUSH
77083: LD_INT 2
77085: NEG
77086: PUSH
77087: EMPTY
77088: LIST
77089: LIST
77090: PUSH
77091: LD_INT 5
77093: PUSH
77094: LD_INT 2
77096: PUSH
77097: EMPTY
77098: LIST
77099: LIST
77100: PUSH
77101: LD_INT 3
77103: PUSH
77104: LD_INT 3
77106: PUSH
77107: EMPTY
77108: LIST
77109: LIST
77110: PUSH
77111: LD_INT 3
77113: PUSH
77114: LD_INT 2
77116: PUSH
77117: EMPTY
77118: LIST
77119: LIST
77120: PUSH
77121: LD_INT 4
77123: PUSH
77124: LD_INT 3
77126: PUSH
77127: EMPTY
77128: LIST
77129: LIST
77130: PUSH
77131: LD_INT 4
77133: PUSH
77134: LD_INT 4
77136: PUSH
77137: EMPTY
77138: LIST
77139: LIST
77140: PUSH
77141: LD_INT 3
77143: PUSH
77144: LD_INT 4
77146: PUSH
77147: EMPTY
77148: LIST
77149: LIST
77150: PUSH
77151: LD_INT 2
77153: PUSH
77154: LD_INT 3
77156: PUSH
77157: EMPTY
77158: LIST
77159: LIST
77160: PUSH
77161: LD_INT 2
77163: PUSH
77164: LD_INT 2
77166: PUSH
77167: EMPTY
77168: LIST
77169: LIST
77170: PUSH
77171: LD_INT 4
77173: PUSH
77174: LD_INT 2
77176: PUSH
77177: EMPTY
77178: LIST
77179: LIST
77180: PUSH
77181: LD_INT 2
77183: PUSH
77184: LD_INT 4
77186: PUSH
77187: EMPTY
77188: LIST
77189: LIST
77190: PUSH
77191: LD_INT 0
77193: PUSH
77194: LD_INT 4
77196: PUSH
77197: EMPTY
77198: LIST
77199: LIST
77200: PUSH
77201: LD_INT 0
77203: PUSH
77204: LD_INT 3
77206: PUSH
77207: EMPTY
77208: LIST
77209: LIST
77210: PUSH
77211: LD_INT 1
77213: PUSH
77214: LD_INT 4
77216: PUSH
77217: EMPTY
77218: LIST
77219: LIST
77220: PUSH
77221: LD_INT 1
77223: PUSH
77224: LD_INT 5
77226: PUSH
77227: EMPTY
77228: LIST
77229: LIST
77230: PUSH
77231: LD_INT 0
77233: PUSH
77234: LD_INT 5
77236: PUSH
77237: EMPTY
77238: LIST
77239: LIST
77240: PUSH
77241: LD_INT 1
77243: NEG
77244: PUSH
77245: LD_INT 4
77247: PUSH
77248: EMPTY
77249: LIST
77250: LIST
77251: PUSH
77252: LD_INT 1
77254: NEG
77255: PUSH
77256: LD_INT 3
77258: PUSH
77259: EMPTY
77260: LIST
77261: LIST
77262: PUSH
77263: LD_INT 2
77265: PUSH
77266: LD_INT 5
77268: PUSH
77269: EMPTY
77270: LIST
77271: LIST
77272: PUSH
77273: LD_INT 2
77275: NEG
77276: PUSH
77277: LD_INT 3
77279: PUSH
77280: EMPTY
77281: LIST
77282: LIST
77283: PUSH
77284: EMPTY
77285: LIST
77286: LIST
77287: LIST
77288: LIST
77289: LIST
77290: LIST
77291: LIST
77292: LIST
77293: LIST
77294: LIST
77295: LIST
77296: LIST
77297: LIST
77298: LIST
77299: LIST
77300: LIST
77301: LIST
77302: LIST
77303: LIST
77304: LIST
77305: LIST
77306: LIST
77307: LIST
77308: LIST
77309: LIST
77310: LIST
77311: LIST
77312: LIST
77313: LIST
77314: LIST
77315: LIST
77316: LIST
77317: LIST
77318: LIST
77319: LIST
77320: LIST
77321: LIST
77322: LIST
77323: LIST
77324: LIST
77325: LIST
77326: LIST
77327: LIST
77328: LIST
77329: LIST
77330: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
77331: LD_ADDR_VAR 0 34
77335: PUSH
77336: LD_INT 0
77338: PUSH
77339: LD_INT 4
77341: NEG
77342: PUSH
77343: EMPTY
77344: LIST
77345: LIST
77346: PUSH
77347: LD_INT 0
77349: PUSH
77350: LD_INT 5
77352: NEG
77353: PUSH
77354: EMPTY
77355: LIST
77356: LIST
77357: PUSH
77358: LD_INT 1
77360: PUSH
77361: LD_INT 4
77363: NEG
77364: PUSH
77365: EMPTY
77366: LIST
77367: LIST
77368: PUSH
77369: LD_INT 1
77371: PUSH
77372: LD_INT 3
77374: NEG
77375: PUSH
77376: EMPTY
77377: LIST
77378: LIST
77379: PUSH
77380: LD_INT 0
77382: PUSH
77383: LD_INT 3
77385: NEG
77386: PUSH
77387: EMPTY
77388: LIST
77389: LIST
77390: PUSH
77391: LD_INT 1
77393: NEG
77394: PUSH
77395: LD_INT 4
77397: NEG
77398: PUSH
77399: EMPTY
77400: LIST
77401: LIST
77402: PUSH
77403: LD_INT 1
77405: NEG
77406: PUSH
77407: LD_INT 5
77409: NEG
77410: PUSH
77411: EMPTY
77412: LIST
77413: LIST
77414: PUSH
77415: LD_INT 2
77417: PUSH
77418: LD_INT 3
77420: NEG
77421: PUSH
77422: EMPTY
77423: LIST
77424: LIST
77425: PUSH
77426: LD_INT 2
77428: NEG
77429: PUSH
77430: LD_INT 5
77432: NEG
77433: PUSH
77434: EMPTY
77435: LIST
77436: LIST
77437: PUSH
77438: LD_INT 3
77440: PUSH
77441: LD_INT 0
77443: PUSH
77444: EMPTY
77445: LIST
77446: LIST
77447: PUSH
77448: LD_INT 3
77450: PUSH
77451: LD_INT 1
77453: NEG
77454: PUSH
77455: EMPTY
77456: LIST
77457: LIST
77458: PUSH
77459: LD_INT 4
77461: PUSH
77462: LD_INT 0
77464: PUSH
77465: EMPTY
77466: LIST
77467: LIST
77468: PUSH
77469: LD_INT 4
77471: PUSH
77472: LD_INT 1
77474: PUSH
77475: EMPTY
77476: LIST
77477: LIST
77478: PUSH
77479: LD_INT 3
77481: PUSH
77482: LD_INT 1
77484: PUSH
77485: EMPTY
77486: LIST
77487: LIST
77488: PUSH
77489: LD_INT 2
77491: PUSH
77492: LD_INT 0
77494: PUSH
77495: EMPTY
77496: LIST
77497: LIST
77498: PUSH
77499: LD_INT 2
77501: PUSH
77502: LD_INT 1
77504: NEG
77505: PUSH
77506: EMPTY
77507: LIST
77508: LIST
77509: PUSH
77510: LD_INT 2
77512: PUSH
77513: LD_INT 2
77515: NEG
77516: PUSH
77517: EMPTY
77518: LIST
77519: LIST
77520: PUSH
77521: LD_INT 4
77523: PUSH
77524: LD_INT 2
77526: PUSH
77527: EMPTY
77528: LIST
77529: LIST
77530: PUSH
77531: LD_INT 4
77533: PUSH
77534: LD_INT 4
77536: PUSH
77537: EMPTY
77538: LIST
77539: LIST
77540: PUSH
77541: LD_INT 4
77543: PUSH
77544: LD_INT 3
77546: PUSH
77547: EMPTY
77548: LIST
77549: LIST
77550: PUSH
77551: LD_INT 5
77553: PUSH
77554: LD_INT 4
77556: PUSH
77557: EMPTY
77558: LIST
77559: LIST
77560: PUSH
77561: LD_INT 5
77563: PUSH
77564: LD_INT 5
77566: PUSH
77567: EMPTY
77568: LIST
77569: LIST
77570: PUSH
77571: LD_INT 4
77573: PUSH
77574: LD_INT 5
77576: PUSH
77577: EMPTY
77578: LIST
77579: LIST
77580: PUSH
77581: LD_INT 3
77583: PUSH
77584: LD_INT 4
77586: PUSH
77587: EMPTY
77588: LIST
77589: LIST
77590: PUSH
77591: LD_INT 3
77593: PUSH
77594: LD_INT 3
77596: PUSH
77597: EMPTY
77598: LIST
77599: LIST
77600: PUSH
77601: LD_INT 5
77603: PUSH
77604: LD_INT 3
77606: PUSH
77607: EMPTY
77608: LIST
77609: LIST
77610: PUSH
77611: LD_INT 3
77613: PUSH
77614: LD_INT 5
77616: PUSH
77617: EMPTY
77618: LIST
77619: LIST
77620: PUSH
77621: LD_INT 0
77623: PUSH
77624: LD_INT 3
77626: PUSH
77627: EMPTY
77628: LIST
77629: LIST
77630: PUSH
77631: LD_INT 0
77633: PUSH
77634: LD_INT 2
77636: PUSH
77637: EMPTY
77638: LIST
77639: LIST
77640: PUSH
77641: LD_INT 1
77643: PUSH
77644: LD_INT 3
77646: PUSH
77647: EMPTY
77648: LIST
77649: LIST
77650: PUSH
77651: LD_INT 1
77653: PUSH
77654: LD_INT 4
77656: PUSH
77657: EMPTY
77658: LIST
77659: LIST
77660: PUSH
77661: LD_INT 0
77663: PUSH
77664: LD_INT 4
77666: PUSH
77667: EMPTY
77668: LIST
77669: LIST
77670: PUSH
77671: LD_INT 1
77673: NEG
77674: PUSH
77675: LD_INT 3
77677: PUSH
77678: EMPTY
77679: LIST
77680: LIST
77681: PUSH
77682: LD_INT 1
77684: NEG
77685: PUSH
77686: LD_INT 2
77688: PUSH
77689: EMPTY
77690: LIST
77691: LIST
77692: PUSH
77693: LD_INT 2
77695: PUSH
77696: LD_INT 4
77698: PUSH
77699: EMPTY
77700: LIST
77701: LIST
77702: PUSH
77703: LD_INT 2
77705: NEG
77706: PUSH
77707: LD_INT 2
77709: PUSH
77710: EMPTY
77711: LIST
77712: LIST
77713: PUSH
77714: LD_INT 4
77716: NEG
77717: PUSH
77718: LD_INT 0
77720: PUSH
77721: EMPTY
77722: LIST
77723: LIST
77724: PUSH
77725: LD_INT 4
77727: NEG
77728: PUSH
77729: LD_INT 1
77731: NEG
77732: PUSH
77733: EMPTY
77734: LIST
77735: LIST
77736: PUSH
77737: LD_INT 3
77739: NEG
77740: PUSH
77741: LD_INT 0
77743: PUSH
77744: EMPTY
77745: LIST
77746: LIST
77747: PUSH
77748: LD_INT 3
77750: NEG
77751: PUSH
77752: LD_INT 1
77754: PUSH
77755: EMPTY
77756: LIST
77757: LIST
77758: PUSH
77759: LD_INT 4
77761: NEG
77762: PUSH
77763: LD_INT 1
77765: PUSH
77766: EMPTY
77767: LIST
77768: LIST
77769: PUSH
77770: LD_INT 5
77772: NEG
77773: PUSH
77774: LD_INT 0
77776: PUSH
77777: EMPTY
77778: LIST
77779: LIST
77780: PUSH
77781: LD_INT 5
77783: NEG
77784: PUSH
77785: LD_INT 1
77787: NEG
77788: PUSH
77789: EMPTY
77790: LIST
77791: LIST
77792: PUSH
77793: LD_INT 5
77795: NEG
77796: PUSH
77797: LD_INT 2
77799: NEG
77800: PUSH
77801: EMPTY
77802: LIST
77803: LIST
77804: PUSH
77805: LD_INT 3
77807: NEG
77808: PUSH
77809: LD_INT 2
77811: PUSH
77812: EMPTY
77813: LIST
77814: LIST
77815: PUSH
77816: EMPTY
77817: LIST
77818: LIST
77819: LIST
77820: LIST
77821: LIST
77822: LIST
77823: LIST
77824: LIST
77825: LIST
77826: LIST
77827: LIST
77828: LIST
77829: LIST
77830: LIST
77831: LIST
77832: LIST
77833: LIST
77834: LIST
77835: LIST
77836: LIST
77837: LIST
77838: LIST
77839: LIST
77840: LIST
77841: LIST
77842: LIST
77843: LIST
77844: LIST
77845: LIST
77846: LIST
77847: LIST
77848: LIST
77849: LIST
77850: LIST
77851: LIST
77852: LIST
77853: LIST
77854: LIST
77855: LIST
77856: LIST
77857: LIST
77858: LIST
77859: LIST
77860: LIST
77861: LIST
77862: ST_TO_ADDR
// end ; end ;
77863: GO 77866
77865: POP
// case btype of b_depot , b_warehouse :
77866: LD_VAR 0 1
77870: PUSH
77871: LD_INT 0
77873: DOUBLE
77874: EQUAL
77875: IFTRUE 77885
77877: LD_INT 1
77879: DOUBLE
77880: EQUAL
77881: IFTRUE 77885
77883: GO 78086
77885: POP
// case nation of nation_american :
77886: LD_VAR 0 5
77890: PUSH
77891: LD_INT 1
77893: DOUBLE
77894: EQUAL
77895: IFTRUE 77899
77897: GO 77955
77899: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
77900: LD_ADDR_VAR 0 9
77904: PUSH
77905: LD_VAR 0 11
77909: PUSH
77910: LD_VAR 0 12
77914: PUSH
77915: LD_VAR 0 13
77919: PUSH
77920: LD_VAR 0 14
77924: PUSH
77925: LD_VAR 0 15
77929: PUSH
77930: LD_VAR 0 16
77934: PUSH
77935: EMPTY
77936: LIST
77937: LIST
77938: LIST
77939: LIST
77940: LIST
77941: LIST
77942: PUSH
77943: LD_VAR 0 4
77947: PUSH
77948: LD_INT 1
77950: PLUS
77951: ARRAY
77952: ST_TO_ADDR
77953: GO 78084
77955: LD_INT 2
77957: DOUBLE
77958: EQUAL
77959: IFTRUE 77963
77961: GO 78019
77963: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
77964: LD_ADDR_VAR 0 9
77968: PUSH
77969: LD_VAR 0 17
77973: PUSH
77974: LD_VAR 0 18
77978: PUSH
77979: LD_VAR 0 19
77983: PUSH
77984: LD_VAR 0 20
77988: PUSH
77989: LD_VAR 0 21
77993: PUSH
77994: LD_VAR 0 22
77998: PUSH
77999: EMPTY
78000: LIST
78001: LIST
78002: LIST
78003: LIST
78004: LIST
78005: LIST
78006: PUSH
78007: LD_VAR 0 4
78011: PUSH
78012: LD_INT 1
78014: PLUS
78015: ARRAY
78016: ST_TO_ADDR
78017: GO 78084
78019: LD_INT 3
78021: DOUBLE
78022: EQUAL
78023: IFTRUE 78027
78025: GO 78083
78027: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
78028: LD_ADDR_VAR 0 9
78032: PUSH
78033: LD_VAR 0 23
78037: PUSH
78038: LD_VAR 0 24
78042: PUSH
78043: LD_VAR 0 25
78047: PUSH
78048: LD_VAR 0 26
78052: PUSH
78053: LD_VAR 0 27
78057: PUSH
78058: LD_VAR 0 28
78062: PUSH
78063: EMPTY
78064: LIST
78065: LIST
78066: LIST
78067: LIST
78068: LIST
78069: LIST
78070: PUSH
78071: LD_VAR 0 4
78075: PUSH
78076: LD_INT 1
78078: PLUS
78079: ARRAY
78080: ST_TO_ADDR
78081: GO 78084
78083: POP
78084: GO 78639
78086: LD_INT 2
78088: DOUBLE
78089: EQUAL
78090: IFTRUE 78100
78092: LD_INT 3
78094: DOUBLE
78095: EQUAL
78096: IFTRUE 78100
78098: GO 78156
78100: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
78101: LD_ADDR_VAR 0 9
78105: PUSH
78106: LD_VAR 0 29
78110: PUSH
78111: LD_VAR 0 30
78115: PUSH
78116: LD_VAR 0 31
78120: PUSH
78121: LD_VAR 0 32
78125: PUSH
78126: LD_VAR 0 33
78130: PUSH
78131: LD_VAR 0 34
78135: PUSH
78136: EMPTY
78137: LIST
78138: LIST
78139: LIST
78140: LIST
78141: LIST
78142: LIST
78143: PUSH
78144: LD_VAR 0 4
78148: PUSH
78149: LD_INT 1
78151: PLUS
78152: ARRAY
78153: ST_TO_ADDR
78154: GO 78639
78156: LD_INT 16
78158: DOUBLE
78159: EQUAL
78160: IFTRUE 78218
78162: LD_INT 17
78164: DOUBLE
78165: EQUAL
78166: IFTRUE 78218
78168: LD_INT 18
78170: DOUBLE
78171: EQUAL
78172: IFTRUE 78218
78174: LD_INT 19
78176: DOUBLE
78177: EQUAL
78178: IFTRUE 78218
78180: LD_INT 22
78182: DOUBLE
78183: EQUAL
78184: IFTRUE 78218
78186: LD_INT 20
78188: DOUBLE
78189: EQUAL
78190: IFTRUE 78218
78192: LD_INT 21
78194: DOUBLE
78195: EQUAL
78196: IFTRUE 78218
78198: LD_INT 23
78200: DOUBLE
78201: EQUAL
78202: IFTRUE 78218
78204: LD_INT 24
78206: DOUBLE
78207: EQUAL
78208: IFTRUE 78218
78210: LD_INT 25
78212: DOUBLE
78213: EQUAL
78214: IFTRUE 78218
78216: GO 78274
78218: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
78219: LD_ADDR_VAR 0 9
78223: PUSH
78224: LD_VAR 0 35
78228: PUSH
78229: LD_VAR 0 36
78233: PUSH
78234: LD_VAR 0 37
78238: PUSH
78239: LD_VAR 0 38
78243: PUSH
78244: LD_VAR 0 39
78248: PUSH
78249: LD_VAR 0 40
78253: PUSH
78254: EMPTY
78255: LIST
78256: LIST
78257: LIST
78258: LIST
78259: LIST
78260: LIST
78261: PUSH
78262: LD_VAR 0 4
78266: PUSH
78267: LD_INT 1
78269: PLUS
78270: ARRAY
78271: ST_TO_ADDR
78272: GO 78639
78274: LD_INT 6
78276: DOUBLE
78277: EQUAL
78278: IFTRUE 78330
78280: LD_INT 7
78282: DOUBLE
78283: EQUAL
78284: IFTRUE 78330
78286: LD_INT 8
78288: DOUBLE
78289: EQUAL
78290: IFTRUE 78330
78292: LD_INT 13
78294: DOUBLE
78295: EQUAL
78296: IFTRUE 78330
78298: LD_INT 12
78300: DOUBLE
78301: EQUAL
78302: IFTRUE 78330
78304: LD_INT 15
78306: DOUBLE
78307: EQUAL
78308: IFTRUE 78330
78310: LD_INT 11
78312: DOUBLE
78313: EQUAL
78314: IFTRUE 78330
78316: LD_INT 14
78318: DOUBLE
78319: EQUAL
78320: IFTRUE 78330
78322: LD_INT 10
78324: DOUBLE
78325: EQUAL
78326: IFTRUE 78330
78328: GO 78386
78330: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
78331: LD_ADDR_VAR 0 9
78335: PUSH
78336: LD_VAR 0 41
78340: PUSH
78341: LD_VAR 0 42
78345: PUSH
78346: LD_VAR 0 43
78350: PUSH
78351: LD_VAR 0 44
78355: PUSH
78356: LD_VAR 0 45
78360: PUSH
78361: LD_VAR 0 46
78365: PUSH
78366: EMPTY
78367: LIST
78368: LIST
78369: LIST
78370: LIST
78371: LIST
78372: LIST
78373: PUSH
78374: LD_VAR 0 4
78378: PUSH
78379: LD_INT 1
78381: PLUS
78382: ARRAY
78383: ST_TO_ADDR
78384: GO 78639
78386: LD_INT 36
78388: DOUBLE
78389: EQUAL
78390: IFTRUE 78394
78392: GO 78450
78394: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
78395: LD_ADDR_VAR 0 9
78399: PUSH
78400: LD_VAR 0 47
78404: PUSH
78405: LD_VAR 0 48
78409: PUSH
78410: LD_VAR 0 49
78414: PUSH
78415: LD_VAR 0 50
78419: PUSH
78420: LD_VAR 0 51
78424: PUSH
78425: LD_VAR 0 52
78429: PUSH
78430: EMPTY
78431: LIST
78432: LIST
78433: LIST
78434: LIST
78435: LIST
78436: LIST
78437: PUSH
78438: LD_VAR 0 4
78442: PUSH
78443: LD_INT 1
78445: PLUS
78446: ARRAY
78447: ST_TO_ADDR
78448: GO 78639
78450: LD_INT 4
78452: DOUBLE
78453: EQUAL
78454: IFTRUE 78476
78456: LD_INT 5
78458: DOUBLE
78459: EQUAL
78460: IFTRUE 78476
78462: LD_INT 34
78464: DOUBLE
78465: EQUAL
78466: IFTRUE 78476
78468: LD_INT 37
78470: DOUBLE
78471: EQUAL
78472: IFTRUE 78476
78474: GO 78532
78476: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
78477: LD_ADDR_VAR 0 9
78481: PUSH
78482: LD_VAR 0 53
78486: PUSH
78487: LD_VAR 0 54
78491: PUSH
78492: LD_VAR 0 55
78496: PUSH
78497: LD_VAR 0 56
78501: PUSH
78502: LD_VAR 0 57
78506: PUSH
78507: LD_VAR 0 58
78511: PUSH
78512: EMPTY
78513: LIST
78514: LIST
78515: LIST
78516: LIST
78517: LIST
78518: LIST
78519: PUSH
78520: LD_VAR 0 4
78524: PUSH
78525: LD_INT 1
78527: PLUS
78528: ARRAY
78529: ST_TO_ADDR
78530: GO 78639
78532: LD_INT 31
78534: DOUBLE
78535: EQUAL
78536: IFTRUE 78582
78538: LD_INT 32
78540: DOUBLE
78541: EQUAL
78542: IFTRUE 78582
78544: LD_INT 33
78546: DOUBLE
78547: EQUAL
78548: IFTRUE 78582
78550: LD_INT 27
78552: DOUBLE
78553: EQUAL
78554: IFTRUE 78582
78556: LD_INT 26
78558: DOUBLE
78559: EQUAL
78560: IFTRUE 78582
78562: LD_INT 28
78564: DOUBLE
78565: EQUAL
78566: IFTRUE 78582
78568: LD_INT 29
78570: DOUBLE
78571: EQUAL
78572: IFTRUE 78582
78574: LD_INT 30
78576: DOUBLE
78577: EQUAL
78578: IFTRUE 78582
78580: GO 78638
78582: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
78583: LD_ADDR_VAR 0 9
78587: PUSH
78588: LD_VAR 0 59
78592: PUSH
78593: LD_VAR 0 60
78597: PUSH
78598: LD_VAR 0 61
78602: PUSH
78603: LD_VAR 0 62
78607: PUSH
78608: LD_VAR 0 63
78612: PUSH
78613: LD_VAR 0 64
78617: PUSH
78618: EMPTY
78619: LIST
78620: LIST
78621: LIST
78622: LIST
78623: LIST
78624: LIST
78625: PUSH
78626: LD_VAR 0 4
78630: PUSH
78631: LD_INT 1
78633: PLUS
78634: ARRAY
78635: ST_TO_ADDR
78636: GO 78639
78638: POP
// temp_list2 = [ ] ;
78639: LD_ADDR_VAR 0 10
78643: PUSH
78644: EMPTY
78645: ST_TO_ADDR
// for i in temp_list do
78646: LD_ADDR_VAR 0 8
78650: PUSH
78651: LD_VAR 0 9
78655: PUSH
78656: FOR_IN
78657: IFFALSE 78709
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
78659: LD_ADDR_VAR 0 10
78663: PUSH
78664: LD_VAR 0 10
78668: PUSH
78669: LD_VAR 0 8
78673: PUSH
78674: LD_INT 1
78676: ARRAY
78677: PUSH
78678: LD_VAR 0 2
78682: PLUS
78683: PUSH
78684: LD_VAR 0 8
78688: PUSH
78689: LD_INT 2
78691: ARRAY
78692: PUSH
78693: LD_VAR 0 3
78697: PLUS
78698: PUSH
78699: EMPTY
78700: LIST
78701: LIST
78702: PUSH
78703: EMPTY
78704: LIST
78705: ADD
78706: ST_TO_ADDR
78707: GO 78656
78709: POP
78710: POP
// result = temp_list2 ;
78711: LD_ADDR_VAR 0 7
78715: PUSH
78716: LD_VAR 0 10
78720: ST_TO_ADDR
// end ;
78721: LD_VAR 0 7
78725: RET
// export function EnemyInRange ( unit , dist ) ; begin
78726: LD_INT 0
78728: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
78729: LD_ADDR_VAR 0 3
78733: PUSH
78734: LD_VAR 0 1
78738: PPUSH
78739: CALL_OW 255
78743: PPUSH
78744: LD_VAR 0 1
78748: PPUSH
78749: CALL_OW 250
78753: PPUSH
78754: LD_VAR 0 1
78758: PPUSH
78759: CALL_OW 251
78763: PPUSH
78764: LD_VAR 0 2
78768: PPUSH
78769: CALL 52122 0 4
78773: PUSH
78774: LD_INT 4
78776: ARRAY
78777: ST_TO_ADDR
// end ;
78778: LD_VAR 0 3
78782: RET
// export function PlayerSeeMe ( unit ) ; begin
78783: LD_INT 0
78785: PPUSH
// result := See ( your_side , unit ) ;
78786: LD_ADDR_VAR 0 2
78790: PUSH
78791: LD_OWVAR 2
78795: PPUSH
78796: LD_VAR 0 1
78800: PPUSH
78801: CALL_OW 292
78805: ST_TO_ADDR
// end ;
78806: LD_VAR 0 2
78810: RET
// export function ReverseDir ( unit ) ; begin
78811: LD_INT 0
78813: PPUSH
// if not unit then
78814: LD_VAR 0 1
78818: NOT
78819: IFFALSE 78823
// exit ;
78821: GO 78846
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
78823: LD_ADDR_VAR 0 2
78827: PUSH
78828: LD_VAR 0 1
78832: PPUSH
78833: CALL_OW 254
78837: PUSH
78838: LD_INT 3
78840: PLUS
78841: PUSH
78842: LD_INT 6
78844: MOD
78845: ST_TO_ADDR
// end ;
78846: LD_VAR 0 2
78850: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
78851: LD_INT 0
78853: PPUSH
78854: PPUSH
78855: PPUSH
78856: PPUSH
78857: PPUSH
// if not hexes then
78858: LD_VAR 0 2
78862: NOT
78863: IFFALSE 78867
// exit ;
78865: GO 79015
// dist := 9999 ;
78867: LD_ADDR_VAR 0 5
78871: PUSH
78872: LD_INT 9999
78874: ST_TO_ADDR
// for i = 1 to hexes do
78875: LD_ADDR_VAR 0 4
78879: PUSH
78880: DOUBLE
78881: LD_INT 1
78883: DEC
78884: ST_TO_ADDR
78885: LD_VAR 0 2
78889: PUSH
78890: FOR_TO
78891: IFFALSE 79003
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
78893: LD_VAR 0 1
78897: PPUSH
78898: LD_VAR 0 2
78902: PUSH
78903: LD_VAR 0 4
78907: ARRAY
78908: PUSH
78909: LD_INT 1
78911: ARRAY
78912: PPUSH
78913: LD_VAR 0 2
78917: PUSH
78918: LD_VAR 0 4
78922: ARRAY
78923: PUSH
78924: LD_INT 2
78926: ARRAY
78927: PPUSH
78928: CALL_OW 297
78932: PUSH
78933: LD_VAR 0 5
78937: LESS
78938: IFFALSE 79001
// begin hex := hexes [ i ] ;
78940: LD_ADDR_VAR 0 7
78944: PUSH
78945: LD_VAR 0 2
78949: PUSH
78950: LD_VAR 0 4
78954: ARRAY
78955: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
78956: LD_ADDR_VAR 0 5
78960: PUSH
78961: LD_VAR 0 1
78965: PPUSH
78966: LD_VAR 0 2
78970: PUSH
78971: LD_VAR 0 4
78975: ARRAY
78976: PUSH
78977: LD_INT 1
78979: ARRAY
78980: PPUSH
78981: LD_VAR 0 2
78985: PUSH
78986: LD_VAR 0 4
78990: ARRAY
78991: PUSH
78992: LD_INT 2
78994: ARRAY
78995: PPUSH
78996: CALL_OW 297
79000: ST_TO_ADDR
// end ; end ;
79001: GO 78890
79003: POP
79004: POP
// result := hex ;
79005: LD_ADDR_VAR 0 3
79009: PUSH
79010: LD_VAR 0 7
79014: ST_TO_ADDR
// end ;
79015: LD_VAR 0 3
79019: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
79020: LD_INT 0
79022: PPUSH
79023: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
79024: LD_VAR 0 1
79028: NOT
79029: PUSH
79030: LD_VAR 0 1
79034: PUSH
79035: LD_INT 21
79037: PUSH
79038: LD_INT 2
79040: PUSH
79041: EMPTY
79042: LIST
79043: LIST
79044: PUSH
79045: LD_INT 23
79047: PUSH
79048: LD_INT 2
79050: PUSH
79051: EMPTY
79052: LIST
79053: LIST
79054: PUSH
79055: EMPTY
79056: LIST
79057: LIST
79058: PPUSH
79059: CALL_OW 69
79063: IN
79064: NOT
79065: OR
79066: IFFALSE 79070
// exit ;
79068: GO 79117
// for i = 1 to 3 do
79070: LD_ADDR_VAR 0 3
79074: PUSH
79075: DOUBLE
79076: LD_INT 1
79078: DEC
79079: ST_TO_ADDR
79080: LD_INT 3
79082: PUSH
79083: FOR_TO
79084: IFFALSE 79115
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
79086: LD_VAR 0 1
79090: PPUSH
79091: CALL_OW 250
79095: PPUSH
79096: LD_VAR 0 1
79100: PPUSH
79101: CALL_OW 251
79105: PPUSH
79106: LD_INT 1
79108: PPUSH
79109: CALL_OW 453
79113: GO 79083
79115: POP
79116: POP
// end ;
79117: LD_VAR 0 2
79121: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
79122: LD_INT 0
79124: PPUSH
79125: PPUSH
79126: PPUSH
79127: PPUSH
79128: PPUSH
79129: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
79130: LD_VAR 0 1
79134: NOT
79135: PUSH
79136: LD_VAR 0 2
79140: NOT
79141: OR
79142: PUSH
79143: LD_VAR 0 1
79147: PPUSH
79148: CALL_OW 314
79152: OR
79153: IFFALSE 79157
// exit ;
79155: GO 79598
// x := GetX ( enemy_unit ) ;
79157: LD_ADDR_VAR 0 7
79161: PUSH
79162: LD_VAR 0 2
79166: PPUSH
79167: CALL_OW 250
79171: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
79172: LD_ADDR_VAR 0 8
79176: PUSH
79177: LD_VAR 0 2
79181: PPUSH
79182: CALL_OW 251
79186: ST_TO_ADDR
// if not x or not y then
79187: LD_VAR 0 7
79191: NOT
79192: PUSH
79193: LD_VAR 0 8
79197: NOT
79198: OR
79199: IFFALSE 79203
// exit ;
79201: GO 79598
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
79203: LD_ADDR_VAR 0 6
79207: PUSH
79208: LD_VAR 0 7
79212: PPUSH
79213: LD_INT 0
79215: PPUSH
79216: LD_INT 4
79218: PPUSH
79219: CALL_OW 272
79223: PUSH
79224: LD_VAR 0 8
79228: PPUSH
79229: LD_INT 0
79231: PPUSH
79232: LD_INT 4
79234: PPUSH
79235: CALL_OW 273
79239: PUSH
79240: EMPTY
79241: LIST
79242: LIST
79243: PUSH
79244: LD_VAR 0 7
79248: PPUSH
79249: LD_INT 1
79251: PPUSH
79252: LD_INT 4
79254: PPUSH
79255: CALL_OW 272
79259: PUSH
79260: LD_VAR 0 8
79264: PPUSH
79265: LD_INT 1
79267: PPUSH
79268: LD_INT 4
79270: PPUSH
79271: CALL_OW 273
79275: PUSH
79276: EMPTY
79277: LIST
79278: LIST
79279: PUSH
79280: LD_VAR 0 7
79284: PPUSH
79285: LD_INT 2
79287: PPUSH
79288: LD_INT 4
79290: PPUSH
79291: CALL_OW 272
79295: PUSH
79296: LD_VAR 0 8
79300: PPUSH
79301: LD_INT 2
79303: PPUSH
79304: LD_INT 4
79306: PPUSH
79307: CALL_OW 273
79311: PUSH
79312: EMPTY
79313: LIST
79314: LIST
79315: PUSH
79316: LD_VAR 0 7
79320: PPUSH
79321: LD_INT 3
79323: PPUSH
79324: LD_INT 4
79326: PPUSH
79327: CALL_OW 272
79331: PUSH
79332: LD_VAR 0 8
79336: PPUSH
79337: LD_INT 3
79339: PPUSH
79340: LD_INT 4
79342: PPUSH
79343: CALL_OW 273
79347: PUSH
79348: EMPTY
79349: LIST
79350: LIST
79351: PUSH
79352: LD_VAR 0 7
79356: PPUSH
79357: LD_INT 4
79359: PPUSH
79360: LD_INT 4
79362: PPUSH
79363: CALL_OW 272
79367: PUSH
79368: LD_VAR 0 8
79372: PPUSH
79373: LD_INT 4
79375: PPUSH
79376: LD_INT 4
79378: PPUSH
79379: CALL_OW 273
79383: PUSH
79384: EMPTY
79385: LIST
79386: LIST
79387: PUSH
79388: LD_VAR 0 7
79392: PPUSH
79393: LD_INT 5
79395: PPUSH
79396: LD_INT 4
79398: PPUSH
79399: CALL_OW 272
79403: PUSH
79404: LD_VAR 0 8
79408: PPUSH
79409: LD_INT 5
79411: PPUSH
79412: LD_INT 4
79414: PPUSH
79415: CALL_OW 273
79419: PUSH
79420: EMPTY
79421: LIST
79422: LIST
79423: PUSH
79424: EMPTY
79425: LIST
79426: LIST
79427: LIST
79428: LIST
79429: LIST
79430: LIST
79431: ST_TO_ADDR
// for i = tmp downto 1 do
79432: LD_ADDR_VAR 0 4
79436: PUSH
79437: DOUBLE
79438: LD_VAR 0 6
79442: INC
79443: ST_TO_ADDR
79444: LD_INT 1
79446: PUSH
79447: FOR_DOWNTO
79448: IFFALSE 79549
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
79450: LD_VAR 0 6
79454: PUSH
79455: LD_VAR 0 4
79459: ARRAY
79460: PUSH
79461: LD_INT 1
79463: ARRAY
79464: PPUSH
79465: LD_VAR 0 6
79469: PUSH
79470: LD_VAR 0 4
79474: ARRAY
79475: PUSH
79476: LD_INT 2
79478: ARRAY
79479: PPUSH
79480: CALL_OW 488
79484: NOT
79485: PUSH
79486: LD_VAR 0 6
79490: PUSH
79491: LD_VAR 0 4
79495: ARRAY
79496: PUSH
79497: LD_INT 1
79499: ARRAY
79500: PPUSH
79501: LD_VAR 0 6
79505: PUSH
79506: LD_VAR 0 4
79510: ARRAY
79511: PUSH
79512: LD_INT 2
79514: ARRAY
79515: PPUSH
79516: CALL_OW 428
79520: PUSH
79521: LD_INT 0
79523: NONEQUAL
79524: OR
79525: IFFALSE 79547
// tmp := Delete ( tmp , i ) ;
79527: LD_ADDR_VAR 0 6
79531: PUSH
79532: LD_VAR 0 6
79536: PPUSH
79537: LD_VAR 0 4
79541: PPUSH
79542: CALL_OW 3
79546: ST_TO_ADDR
79547: GO 79447
79549: POP
79550: POP
// j := GetClosestHex ( unit , tmp ) ;
79551: LD_ADDR_VAR 0 5
79555: PUSH
79556: LD_VAR 0 1
79560: PPUSH
79561: LD_VAR 0 6
79565: PPUSH
79566: CALL 78851 0 2
79570: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
79571: LD_VAR 0 1
79575: PPUSH
79576: LD_VAR 0 5
79580: PUSH
79581: LD_INT 1
79583: ARRAY
79584: PPUSH
79585: LD_VAR 0 5
79589: PUSH
79590: LD_INT 2
79592: ARRAY
79593: PPUSH
79594: CALL_OW 111
// end ;
79598: LD_VAR 0 3
79602: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
79603: LD_INT 0
79605: PPUSH
79606: PPUSH
79607: PPUSH
// uc_side = 0 ;
79608: LD_ADDR_OWVAR 20
79612: PUSH
79613: LD_INT 0
79615: ST_TO_ADDR
// uc_nation = 0 ;
79616: LD_ADDR_OWVAR 21
79620: PUSH
79621: LD_INT 0
79623: ST_TO_ADDR
// InitHc_All ( ) ;
79624: CALL_OW 584
// InitVc ;
79628: CALL_OW 20
// if mastodonts then
79632: LD_VAR 0 6
79636: IFFALSE 79703
// for i = 1 to mastodonts do
79638: LD_ADDR_VAR 0 11
79642: PUSH
79643: DOUBLE
79644: LD_INT 1
79646: DEC
79647: ST_TO_ADDR
79648: LD_VAR 0 6
79652: PUSH
79653: FOR_TO
79654: IFFALSE 79701
// begin vc_chassis := 31 ;
79656: LD_ADDR_OWVAR 37
79660: PUSH
79661: LD_INT 31
79663: ST_TO_ADDR
// vc_control := control_rider ;
79664: LD_ADDR_OWVAR 38
79668: PUSH
79669: LD_INT 4
79671: ST_TO_ADDR
// animal := CreateVehicle ;
79672: LD_ADDR_VAR 0 12
79676: PUSH
79677: CALL_OW 45
79681: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79682: LD_VAR 0 12
79686: PPUSH
79687: LD_VAR 0 8
79691: PPUSH
79692: LD_INT 0
79694: PPUSH
79695: CALL 81838 0 3
// end ;
79699: GO 79653
79701: POP
79702: POP
// if horses then
79703: LD_VAR 0 5
79707: IFFALSE 79774
// for i = 1 to horses do
79709: LD_ADDR_VAR 0 11
79713: PUSH
79714: DOUBLE
79715: LD_INT 1
79717: DEC
79718: ST_TO_ADDR
79719: LD_VAR 0 5
79723: PUSH
79724: FOR_TO
79725: IFFALSE 79772
// begin hc_class := 21 ;
79727: LD_ADDR_OWVAR 28
79731: PUSH
79732: LD_INT 21
79734: ST_TO_ADDR
// hc_gallery :=  ;
79735: LD_ADDR_OWVAR 33
79739: PUSH
79740: LD_STRING 
79742: ST_TO_ADDR
// animal := CreateHuman ;
79743: LD_ADDR_VAR 0 12
79747: PUSH
79748: CALL_OW 44
79752: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79753: LD_VAR 0 12
79757: PPUSH
79758: LD_VAR 0 8
79762: PPUSH
79763: LD_INT 0
79765: PPUSH
79766: CALL 81838 0 3
// end ;
79770: GO 79724
79772: POP
79773: POP
// if birds then
79774: LD_VAR 0 1
79778: IFFALSE 79845
// for i = 1 to birds do
79780: LD_ADDR_VAR 0 11
79784: PUSH
79785: DOUBLE
79786: LD_INT 1
79788: DEC
79789: ST_TO_ADDR
79790: LD_VAR 0 1
79794: PUSH
79795: FOR_TO
79796: IFFALSE 79843
// begin hc_class = 18 ;
79798: LD_ADDR_OWVAR 28
79802: PUSH
79803: LD_INT 18
79805: ST_TO_ADDR
// hc_gallery =  ;
79806: LD_ADDR_OWVAR 33
79810: PUSH
79811: LD_STRING 
79813: ST_TO_ADDR
// animal := CreateHuman ;
79814: LD_ADDR_VAR 0 12
79818: PUSH
79819: CALL_OW 44
79823: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79824: LD_VAR 0 12
79828: PPUSH
79829: LD_VAR 0 8
79833: PPUSH
79834: LD_INT 0
79836: PPUSH
79837: CALL 81838 0 3
// end ;
79841: GO 79795
79843: POP
79844: POP
// if tigers then
79845: LD_VAR 0 2
79849: IFFALSE 79933
// for i = 1 to tigers do
79851: LD_ADDR_VAR 0 11
79855: PUSH
79856: DOUBLE
79857: LD_INT 1
79859: DEC
79860: ST_TO_ADDR
79861: LD_VAR 0 2
79865: PUSH
79866: FOR_TO
79867: IFFALSE 79931
// begin hc_class = class_tiger ;
79869: LD_ADDR_OWVAR 28
79873: PUSH
79874: LD_INT 14
79876: ST_TO_ADDR
// hc_gallery =  ;
79877: LD_ADDR_OWVAR 33
79881: PUSH
79882: LD_STRING 
79884: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
79885: LD_ADDR_OWVAR 35
79889: PUSH
79890: LD_INT 7
79892: NEG
79893: PPUSH
79894: LD_INT 7
79896: PPUSH
79897: CALL_OW 12
79901: ST_TO_ADDR
// animal := CreateHuman ;
79902: LD_ADDR_VAR 0 12
79906: PUSH
79907: CALL_OW 44
79911: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79912: LD_VAR 0 12
79916: PPUSH
79917: LD_VAR 0 8
79921: PPUSH
79922: LD_INT 0
79924: PPUSH
79925: CALL 81838 0 3
// end ;
79929: GO 79866
79931: POP
79932: POP
// if apemans then
79933: LD_VAR 0 3
79937: IFFALSE 80060
// for i = 1 to apemans do
79939: LD_ADDR_VAR 0 11
79943: PUSH
79944: DOUBLE
79945: LD_INT 1
79947: DEC
79948: ST_TO_ADDR
79949: LD_VAR 0 3
79953: PUSH
79954: FOR_TO
79955: IFFALSE 80058
// begin hc_class = class_apeman ;
79957: LD_ADDR_OWVAR 28
79961: PUSH
79962: LD_INT 12
79964: ST_TO_ADDR
// hc_gallery =  ;
79965: LD_ADDR_OWVAR 33
79969: PUSH
79970: LD_STRING 
79972: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
79973: LD_ADDR_OWVAR 35
79977: PUSH
79978: LD_INT 2
79980: NEG
79981: PPUSH
79982: LD_INT 2
79984: PPUSH
79985: CALL_OW 12
79989: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
79990: LD_ADDR_OWVAR 31
79994: PUSH
79995: LD_INT 1
79997: PPUSH
79998: LD_INT 3
80000: PPUSH
80001: CALL_OW 12
80005: PUSH
80006: LD_INT 1
80008: PPUSH
80009: LD_INT 3
80011: PPUSH
80012: CALL_OW 12
80016: PUSH
80017: LD_INT 0
80019: PUSH
80020: LD_INT 0
80022: PUSH
80023: EMPTY
80024: LIST
80025: LIST
80026: LIST
80027: LIST
80028: ST_TO_ADDR
// animal := CreateHuman ;
80029: LD_ADDR_VAR 0 12
80033: PUSH
80034: CALL_OW 44
80038: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80039: LD_VAR 0 12
80043: PPUSH
80044: LD_VAR 0 8
80048: PPUSH
80049: LD_INT 0
80051: PPUSH
80052: CALL 81838 0 3
// end ;
80056: GO 79954
80058: POP
80059: POP
// if enchidnas then
80060: LD_VAR 0 4
80064: IFFALSE 80131
// for i = 1 to enchidnas do
80066: LD_ADDR_VAR 0 11
80070: PUSH
80071: DOUBLE
80072: LD_INT 1
80074: DEC
80075: ST_TO_ADDR
80076: LD_VAR 0 4
80080: PUSH
80081: FOR_TO
80082: IFFALSE 80129
// begin hc_class = 13 ;
80084: LD_ADDR_OWVAR 28
80088: PUSH
80089: LD_INT 13
80091: ST_TO_ADDR
// hc_gallery =  ;
80092: LD_ADDR_OWVAR 33
80096: PUSH
80097: LD_STRING 
80099: ST_TO_ADDR
// animal := CreateHuman ;
80100: LD_ADDR_VAR 0 12
80104: PUSH
80105: CALL_OW 44
80109: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80110: LD_VAR 0 12
80114: PPUSH
80115: LD_VAR 0 8
80119: PPUSH
80120: LD_INT 0
80122: PPUSH
80123: CALL 81838 0 3
// end ;
80127: GO 80081
80129: POP
80130: POP
// if fishes then
80131: LD_VAR 0 7
80135: IFFALSE 80202
// for i = 1 to fishes do
80137: LD_ADDR_VAR 0 11
80141: PUSH
80142: DOUBLE
80143: LD_INT 1
80145: DEC
80146: ST_TO_ADDR
80147: LD_VAR 0 7
80151: PUSH
80152: FOR_TO
80153: IFFALSE 80200
// begin hc_class = 20 ;
80155: LD_ADDR_OWVAR 28
80159: PUSH
80160: LD_INT 20
80162: ST_TO_ADDR
// hc_gallery =  ;
80163: LD_ADDR_OWVAR 33
80167: PUSH
80168: LD_STRING 
80170: ST_TO_ADDR
// animal := CreateHuman ;
80171: LD_ADDR_VAR 0 12
80175: PUSH
80176: CALL_OW 44
80180: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
80181: LD_VAR 0 12
80185: PPUSH
80186: LD_VAR 0 9
80190: PPUSH
80191: LD_INT 0
80193: PPUSH
80194: CALL 81838 0 3
// end ;
80198: GO 80152
80200: POP
80201: POP
// end ;
80202: LD_VAR 0 10
80206: RET
// export function WantHeal ( sci , unit ) ; begin
80207: LD_INT 0
80209: PPUSH
// if GetTaskList ( sci ) > 0 then
80210: LD_VAR 0 1
80214: PPUSH
80215: CALL_OW 437
80219: PUSH
80220: LD_INT 0
80222: GREATER
80223: IFFALSE 80293
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
80225: LD_VAR 0 1
80229: PPUSH
80230: CALL_OW 437
80234: PUSH
80235: LD_INT 1
80237: ARRAY
80238: PUSH
80239: LD_INT 1
80241: ARRAY
80242: PUSH
80243: LD_STRING l
80245: EQUAL
80246: PUSH
80247: LD_VAR 0 1
80251: PPUSH
80252: CALL_OW 437
80256: PUSH
80257: LD_INT 1
80259: ARRAY
80260: PUSH
80261: LD_INT 4
80263: ARRAY
80264: PUSH
80265: LD_VAR 0 2
80269: EQUAL
80270: AND
80271: IFFALSE 80283
// result := true else
80273: LD_ADDR_VAR 0 3
80277: PUSH
80278: LD_INT 1
80280: ST_TO_ADDR
80281: GO 80291
// result := false ;
80283: LD_ADDR_VAR 0 3
80287: PUSH
80288: LD_INT 0
80290: ST_TO_ADDR
// end else
80291: GO 80301
// result := false ;
80293: LD_ADDR_VAR 0 3
80297: PUSH
80298: LD_INT 0
80300: ST_TO_ADDR
// end ;
80301: LD_VAR 0 3
80305: RET
// export function HealTarget ( sci ) ; begin
80306: LD_INT 0
80308: PPUSH
// if not sci then
80309: LD_VAR 0 1
80313: NOT
80314: IFFALSE 80318
// exit ;
80316: GO 80383
// result := 0 ;
80318: LD_ADDR_VAR 0 2
80322: PUSH
80323: LD_INT 0
80325: ST_TO_ADDR
// if GetTaskList ( sci ) then
80326: LD_VAR 0 1
80330: PPUSH
80331: CALL_OW 437
80335: IFFALSE 80383
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
80337: LD_VAR 0 1
80341: PPUSH
80342: CALL_OW 437
80346: PUSH
80347: LD_INT 1
80349: ARRAY
80350: PUSH
80351: LD_INT 1
80353: ARRAY
80354: PUSH
80355: LD_STRING l
80357: EQUAL
80358: IFFALSE 80383
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
80360: LD_ADDR_VAR 0 2
80364: PUSH
80365: LD_VAR 0 1
80369: PPUSH
80370: CALL_OW 437
80374: PUSH
80375: LD_INT 1
80377: ARRAY
80378: PUSH
80379: LD_INT 4
80381: ARRAY
80382: ST_TO_ADDR
// end ;
80383: LD_VAR 0 2
80387: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
80388: LD_INT 0
80390: PPUSH
80391: PPUSH
80392: PPUSH
80393: PPUSH
// if not base_units then
80394: LD_VAR 0 1
80398: NOT
80399: IFFALSE 80403
// exit ;
80401: GO 80490
// result := false ;
80403: LD_ADDR_VAR 0 2
80407: PUSH
80408: LD_INT 0
80410: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
80411: LD_ADDR_VAR 0 5
80415: PUSH
80416: LD_VAR 0 1
80420: PPUSH
80421: LD_INT 21
80423: PUSH
80424: LD_INT 3
80426: PUSH
80427: EMPTY
80428: LIST
80429: LIST
80430: PPUSH
80431: CALL_OW 72
80435: ST_TO_ADDR
// if not tmp then
80436: LD_VAR 0 5
80440: NOT
80441: IFFALSE 80445
// exit ;
80443: GO 80490
// for i in tmp do
80445: LD_ADDR_VAR 0 3
80449: PUSH
80450: LD_VAR 0 5
80454: PUSH
80455: FOR_IN
80456: IFFALSE 80488
// begin result := EnemyInRange ( i , 22 ) ;
80458: LD_ADDR_VAR 0 2
80462: PUSH
80463: LD_VAR 0 3
80467: PPUSH
80468: LD_INT 22
80470: PPUSH
80471: CALL 78726 0 2
80475: ST_TO_ADDR
// if result then
80476: LD_VAR 0 2
80480: IFFALSE 80486
// exit ;
80482: POP
80483: POP
80484: GO 80490
// end ;
80486: GO 80455
80488: POP
80489: POP
// end ;
80490: LD_VAR 0 2
80494: RET
// export function FilterByTag ( units , tag ) ; begin
80495: LD_INT 0
80497: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
80498: LD_ADDR_VAR 0 3
80502: PUSH
80503: LD_VAR 0 1
80507: PPUSH
80508: LD_INT 120
80510: PUSH
80511: LD_VAR 0 2
80515: PUSH
80516: EMPTY
80517: LIST
80518: LIST
80519: PPUSH
80520: CALL_OW 72
80524: ST_TO_ADDR
// end ;
80525: LD_VAR 0 3
80529: RET
// export function IsDriver ( un ) ; begin
80530: LD_INT 0
80532: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
80533: LD_ADDR_VAR 0 2
80537: PUSH
80538: LD_VAR 0 1
80542: PUSH
80543: LD_INT 55
80545: PUSH
80546: EMPTY
80547: LIST
80548: PPUSH
80549: CALL_OW 69
80553: IN
80554: ST_TO_ADDR
// end ;
80555: LD_VAR 0 2
80559: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
80560: LD_INT 0
80562: PPUSH
80563: PPUSH
// list := [ ] ;
80564: LD_ADDR_VAR 0 5
80568: PUSH
80569: EMPTY
80570: ST_TO_ADDR
// case d of 0 :
80571: LD_VAR 0 3
80575: PUSH
80576: LD_INT 0
80578: DOUBLE
80579: EQUAL
80580: IFTRUE 80584
80582: GO 80717
80584: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
80585: LD_ADDR_VAR 0 5
80589: PUSH
80590: LD_VAR 0 1
80594: PUSH
80595: LD_INT 4
80597: MINUS
80598: PUSH
80599: LD_VAR 0 2
80603: PUSH
80604: LD_INT 4
80606: MINUS
80607: PUSH
80608: LD_INT 2
80610: PUSH
80611: EMPTY
80612: LIST
80613: LIST
80614: LIST
80615: PUSH
80616: LD_VAR 0 1
80620: PUSH
80621: LD_INT 3
80623: MINUS
80624: PUSH
80625: LD_VAR 0 2
80629: PUSH
80630: LD_INT 1
80632: PUSH
80633: EMPTY
80634: LIST
80635: LIST
80636: LIST
80637: PUSH
80638: LD_VAR 0 1
80642: PUSH
80643: LD_INT 4
80645: PLUS
80646: PUSH
80647: LD_VAR 0 2
80651: PUSH
80652: LD_INT 4
80654: PUSH
80655: EMPTY
80656: LIST
80657: LIST
80658: LIST
80659: PUSH
80660: LD_VAR 0 1
80664: PUSH
80665: LD_INT 3
80667: PLUS
80668: PUSH
80669: LD_VAR 0 2
80673: PUSH
80674: LD_INT 3
80676: PLUS
80677: PUSH
80678: LD_INT 5
80680: PUSH
80681: EMPTY
80682: LIST
80683: LIST
80684: LIST
80685: PUSH
80686: LD_VAR 0 1
80690: PUSH
80691: LD_VAR 0 2
80695: PUSH
80696: LD_INT 4
80698: PLUS
80699: PUSH
80700: LD_INT 0
80702: PUSH
80703: EMPTY
80704: LIST
80705: LIST
80706: LIST
80707: PUSH
80708: EMPTY
80709: LIST
80710: LIST
80711: LIST
80712: LIST
80713: LIST
80714: ST_TO_ADDR
// end ; 1 :
80715: GO 81415
80717: LD_INT 1
80719: DOUBLE
80720: EQUAL
80721: IFTRUE 80725
80723: GO 80858
80725: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
80726: LD_ADDR_VAR 0 5
80730: PUSH
80731: LD_VAR 0 1
80735: PUSH
80736: LD_VAR 0 2
80740: PUSH
80741: LD_INT 4
80743: MINUS
80744: PUSH
80745: LD_INT 3
80747: PUSH
80748: EMPTY
80749: LIST
80750: LIST
80751: LIST
80752: PUSH
80753: LD_VAR 0 1
80757: PUSH
80758: LD_INT 3
80760: MINUS
80761: PUSH
80762: LD_VAR 0 2
80766: PUSH
80767: LD_INT 3
80769: MINUS
80770: PUSH
80771: LD_INT 2
80773: PUSH
80774: EMPTY
80775: LIST
80776: LIST
80777: LIST
80778: PUSH
80779: LD_VAR 0 1
80783: PUSH
80784: LD_INT 4
80786: MINUS
80787: PUSH
80788: LD_VAR 0 2
80792: PUSH
80793: LD_INT 1
80795: PUSH
80796: EMPTY
80797: LIST
80798: LIST
80799: LIST
80800: PUSH
80801: LD_VAR 0 1
80805: PUSH
80806: LD_VAR 0 2
80810: PUSH
80811: LD_INT 3
80813: PLUS
80814: PUSH
80815: LD_INT 0
80817: PUSH
80818: EMPTY
80819: LIST
80820: LIST
80821: LIST
80822: PUSH
80823: LD_VAR 0 1
80827: PUSH
80828: LD_INT 4
80830: PLUS
80831: PUSH
80832: LD_VAR 0 2
80836: PUSH
80837: LD_INT 4
80839: PLUS
80840: PUSH
80841: LD_INT 5
80843: PUSH
80844: EMPTY
80845: LIST
80846: LIST
80847: LIST
80848: PUSH
80849: EMPTY
80850: LIST
80851: LIST
80852: LIST
80853: LIST
80854: LIST
80855: ST_TO_ADDR
// end ; 2 :
80856: GO 81415
80858: LD_INT 2
80860: DOUBLE
80861: EQUAL
80862: IFTRUE 80866
80864: GO 80995
80866: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
80867: LD_ADDR_VAR 0 5
80871: PUSH
80872: LD_VAR 0 1
80876: PUSH
80877: LD_VAR 0 2
80881: PUSH
80882: LD_INT 3
80884: MINUS
80885: PUSH
80886: LD_INT 3
80888: PUSH
80889: EMPTY
80890: LIST
80891: LIST
80892: LIST
80893: PUSH
80894: LD_VAR 0 1
80898: PUSH
80899: LD_INT 4
80901: PLUS
80902: PUSH
80903: LD_VAR 0 2
80907: PUSH
80908: LD_INT 4
80910: PUSH
80911: EMPTY
80912: LIST
80913: LIST
80914: LIST
80915: PUSH
80916: LD_VAR 0 1
80920: PUSH
80921: LD_VAR 0 2
80925: PUSH
80926: LD_INT 4
80928: PLUS
80929: PUSH
80930: LD_INT 0
80932: PUSH
80933: EMPTY
80934: LIST
80935: LIST
80936: LIST
80937: PUSH
80938: LD_VAR 0 1
80942: PUSH
80943: LD_INT 3
80945: MINUS
80946: PUSH
80947: LD_VAR 0 2
80951: PUSH
80952: LD_INT 1
80954: PUSH
80955: EMPTY
80956: LIST
80957: LIST
80958: LIST
80959: PUSH
80960: LD_VAR 0 1
80964: PUSH
80965: LD_INT 4
80967: MINUS
80968: PUSH
80969: LD_VAR 0 2
80973: PUSH
80974: LD_INT 4
80976: MINUS
80977: PUSH
80978: LD_INT 2
80980: PUSH
80981: EMPTY
80982: LIST
80983: LIST
80984: LIST
80985: PUSH
80986: EMPTY
80987: LIST
80988: LIST
80989: LIST
80990: LIST
80991: LIST
80992: ST_TO_ADDR
// end ; 3 :
80993: GO 81415
80995: LD_INT 3
80997: DOUBLE
80998: EQUAL
80999: IFTRUE 81003
81001: GO 81136
81003: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
81004: LD_ADDR_VAR 0 5
81008: PUSH
81009: LD_VAR 0 1
81013: PUSH
81014: LD_INT 3
81016: PLUS
81017: PUSH
81018: LD_VAR 0 2
81022: PUSH
81023: LD_INT 4
81025: PUSH
81026: EMPTY
81027: LIST
81028: LIST
81029: LIST
81030: PUSH
81031: LD_VAR 0 1
81035: PUSH
81036: LD_INT 4
81038: PLUS
81039: PUSH
81040: LD_VAR 0 2
81044: PUSH
81045: LD_INT 4
81047: PLUS
81048: PUSH
81049: LD_INT 5
81051: PUSH
81052: EMPTY
81053: LIST
81054: LIST
81055: LIST
81056: PUSH
81057: LD_VAR 0 1
81061: PUSH
81062: LD_INT 4
81064: MINUS
81065: PUSH
81066: LD_VAR 0 2
81070: PUSH
81071: LD_INT 1
81073: PUSH
81074: EMPTY
81075: LIST
81076: LIST
81077: LIST
81078: PUSH
81079: LD_VAR 0 1
81083: PUSH
81084: LD_VAR 0 2
81088: PUSH
81089: LD_INT 4
81091: MINUS
81092: PUSH
81093: LD_INT 3
81095: PUSH
81096: EMPTY
81097: LIST
81098: LIST
81099: LIST
81100: PUSH
81101: LD_VAR 0 1
81105: PUSH
81106: LD_INT 3
81108: MINUS
81109: PUSH
81110: LD_VAR 0 2
81114: PUSH
81115: LD_INT 3
81117: MINUS
81118: PUSH
81119: LD_INT 2
81121: PUSH
81122: EMPTY
81123: LIST
81124: LIST
81125: LIST
81126: PUSH
81127: EMPTY
81128: LIST
81129: LIST
81130: LIST
81131: LIST
81132: LIST
81133: ST_TO_ADDR
// end ; 4 :
81134: GO 81415
81136: LD_INT 4
81138: DOUBLE
81139: EQUAL
81140: IFTRUE 81144
81142: GO 81277
81144: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
81145: LD_ADDR_VAR 0 5
81149: PUSH
81150: LD_VAR 0 1
81154: PUSH
81155: LD_VAR 0 2
81159: PUSH
81160: LD_INT 4
81162: PLUS
81163: PUSH
81164: LD_INT 0
81166: PUSH
81167: EMPTY
81168: LIST
81169: LIST
81170: LIST
81171: PUSH
81172: LD_VAR 0 1
81176: PUSH
81177: LD_INT 3
81179: PLUS
81180: PUSH
81181: LD_VAR 0 2
81185: PUSH
81186: LD_INT 3
81188: PLUS
81189: PUSH
81190: LD_INT 5
81192: PUSH
81193: EMPTY
81194: LIST
81195: LIST
81196: LIST
81197: PUSH
81198: LD_VAR 0 1
81202: PUSH
81203: LD_INT 4
81205: PLUS
81206: PUSH
81207: LD_VAR 0 2
81211: PUSH
81212: LD_INT 4
81214: PUSH
81215: EMPTY
81216: LIST
81217: LIST
81218: LIST
81219: PUSH
81220: LD_VAR 0 1
81224: PUSH
81225: LD_VAR 0 2
81229: PUSH
81230: LD_INT 3
81232: MINUS
81233: PUSH
81234: LD_INT 3
81236: PUSH
81237: EMPTY
81238: LIST
81239: LIST
81240: LIST
81241: PUSH
81242: LD_VAR 0 1
81246: PUSH
81247: LD_INT 4
81249: MINUS
81250: PUSH
81251: LD_VAR 0 2
81255: PUSH
81256: LD_INT 4
81258: MINUS
81259: PUSH
81260: LD_INT 2
81262: PUSH
81263: EMPTY
81264: LIST
81265: LIST
81266: LIST
81267: PUSH
81268: EMPTY
81269: LIST
81270: LIST
81271: LIST
81272: LIST
81273: LIST
81274: ST_TO_ADDR
// end ; 5 :
81275: GO 81415
81277: LD_INT 5
81279: DOUBLE
81280: EQUAL
81281: IFTRUE 81285
81283: GO 81414
81285: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
81286: LD_ADDR_VAR 0 5
81290: PUSH
81291: LD_VAR 0 1
81295: PUSH
81296: LD_INT 4
81298: MINUS
81299: PUSH
81300: LD_VAR 0 2
81304: PUSH
81305: LD_INT 1
81307: PUSH
81308: EMPTY
81309: LIST
81310: LIST
81311: LIST
81312: PUSH
81313: LD_VAR 0 1
81317: PUSH
81318: LD_VAR 0 2
81322: PUSH
81323: LD_INT 4
81325: MINUS
81326: PUSH
81327: LD_INT 3
81329: PUSH
81330: EMPTY
81331: LIST
81332: LIST
81333: LIST
81334: PUSH
81335: LD_VAR 0 1
81339: PUSH
81340: LD_INT 4
81342: PLUS
81343: PUSH
81344: LD_VAR 0 2
81348: PUSH
81349: LD_INT 4
81351: PLUS
81352: PUSH
81353: LD_INT 5
81355: PUSH
81356: EMPTY
81357: LIST
81358: LIST
81359: LIST
81360: PUSH
81361: LD_VAR 0 1
81365: PUSH
81366: LD_INT 3
81368: PLUS
81369: PUSH
81370: LD_VAR 0 2
81374: PUSH
81375: LD_INT 4
81377: PUSH
81378: EMPTY
81379: LIST
81380: LIST
81381: LIST
81382: PUSH
81383: LD_VAR 0 1
81387: PUSH
81388: LD_VAR 0 2
81392: PUSH
81393: LD_INT 3
81395: PLUS
81396: PUSH
81397: LD_INT 0
81399: PUSH
81400: EMPTY
81401: LIST
81402: LIST
81403: LIST
81404: PUSH
81405: EMPTY
81406: LIST
81407: LIST
81408: LIST
81409: LIST
81410: LIST
81411: ST_TO_ADDR
// end ; end ;
81412: GO 81415
81414: POP
// result := list ;
81415: LD_ADDR_VAR 0 4
81419: PUSH
81420: LD_VAR 0 5
81424: ST_TO_ADDR
// end ;
81425: LD_VAR 0 4
81429: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
81430: LD_INT 0
81432: PPUSH
81433: PPUSH
81434: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
81435: LD_VAR 0 1
81439: NOT
81440: PUSH
81441: LD_VAR 0 2
81445: PUSH
81446: LD_INT 1
81448: PUSH
81449: LD_INT 2
81451: PUSH
81452: LD_INT 3
81454: PUSH
81455: LD_INT 4
81457: PUSH
81458: EMPTY
81459: LIST
81460: LIST
81461: LIST
81462: LIST
81463: IN
81464: NOT
81465: OR
81466: IFFALSE 81470
// exit ;
81468: GO 81562
// tmp := [ ] ;
81470: LD_ADDR_VAR 0 5
81474: PUSH
81475: EMPTY
81476: ST_TO_ADDR
// for i in units do
81477: LD_ADDR_VAR 0 4
81481: PUSH
81482: LD_VAR 0 1
81486: PUSH
81487: FOR_IN
81488: IFFALSE 81531
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
81490: LD_ADDR_VAR 0 5
81494: PUSH
81495: LD_VAR 0 5
81499: PPUSH
81500: LD_VAR 0 5
81504: PUSH
81505: LD_INT 1
81507: PLUS
81508: PPUSH
81509: LD_VAR 0 4
81513: PPUSH
81514: LD_VAR 0 2
81518: PPUSH
81519: CALL_OW 259
81523: PPUSH
81524: CALL_OW 2
81528: ST_TO_ADDR
81529: GO 81487
81531: POP
81532: POP
// if not tmp then
81533: LD_VAR 0 5
81537: NOT
81538: IFFALSE 81542
// exit ;
81540: GO 81562
// result := SortListByListDesc ( units , tmp ) ;
81542: LD_ADDR_VAR 0 3
81546: PUSH
81547: LD_VAR 0 1
81551: PPUSH
81552: LD_VAR 0 5
81556: PPUSH
81557: CALL_OW 77
81561: ST_TO_ADDR
// end ;
81562: LD_VAR 0 3
81566: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
81567: LD_INT 0
81569: PPUSH
81570: PPUSH
81571: PPUSH
// result := false ;
81572: LD_ADDR_VAR 0 3
81576: PUSH
81577: LD_INT 0
81579: ST_TO_ADDR
// x := GetX ( building ) ;
81580: LD_ADDR_VAR 0 4
81584: PUSH
81585: LD_VAR 0 2
81589: PPUSH
81590: CALL_OW 250
81594: ST_TO_ADDR
// y := GetY ( building ) ;
81595: LD_ADDR_VAR 0 5
81599: PUSH
81600: LD_VAR 0 2
81604: PPUSH
81605: CALL_OW 251
81609: ST_TO_ADDR
// if not building or not x or not y then
81610: LD_VAR 0 2
81614: NOT
81615: PUSH
81616: LD_VAR 0 4
81620: NOT
81621: OR
81622: PUSH
81623: LD_VAR 0 5
81627: NOT
81628: OR
81629: IFFALSE 81633
// exit ;
81631: GO 81725
// if GetTaskList ( unit ) then
81633: LD_VAR 0 1
81637: PPUSH
81638: CALL_OW 437
81642: IFFALSE 81725
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
81644: LD_STRING e
81646: PUSH
81647: LD_VAR 0 1
81651: PPUSH
81652: CALL_OW 437
81656: PUSH
81657: LD_INT 1
81659: ARRAY
81660: PUSH
81661: LD_INT 1
81663: ARRAY
81664: EQUAL
81665: PUSH
81666: LD_VAR 0 4
81670: PUSH
81671: LD_VAR 0 1
81675: PPUSH
81676: CALL_OW 437
81680: PUSH
81681: LD_INT 1
81683: ARRAY
81684: PUSH
81685: LD_INT 2
81687: ARRAY
81688: EQUAL
81689: AND
81690: PUSH
81691: LD_VAR 0 5
81695: PUSH
81696: LD_VAR 0 1
81700: PPUSH
81701: CALL_OW 437
81705: PUSH
81706: LD_INT 1
81708: ARRAY
81709: PUSH
81710: LD_INT 3
81712: ARRAY
81713: EQUAL
81714: AND
81715: IFFALSE 81725
// result := true end ;
81717: LD_ADDR_VAR 0 3
81721: PUSH
81722: LD_INT 1
81724: ST_TO_ADDR
// end ;
81725: LD_VAR 0 3
81729: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
81730: LD_INT 0
81732: PPUSH
// result := false ;
81733: LD_ADDR_VAR 0 4
81737: PUSH
81738: LD_INT 0
81740: ST_TO_ADDR
// if GetTaskList ( unit ) then
81741: LD_VAR 0 1
81745: PPUSH
81746: CALL_OW 437
81750: IFFALSE 81833
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
81752: LD_STRING M
81754: PUSH
81755: LD_VAR 0 1
81759: PPUSH
81760: CALL_OW 437
81764: PUSH
81765: LD_INT 1
81767: ARRAY
81768: PUSH
81769: LD_INT 1
81771: ARRAY
81772: EQUAL
81773: PUSH
81774: LD_VAR 0 2
81778: PUSH
81779: LD_VAR 0 1
81783: PPUSH
81784: CALL_OW 437
81788: PUSH
81789: LD_INT 1
81791: ARRAY
81792: PUSH
81793: LD_INT 2
81795: ARRAY
81796: EQUAL
81797: AND
81798: PUSH
81799: LD_VAR 0 3
81803: PUSH
81804: LD_VAR 0 1
81808: PPUSH
81809: CALL_OW 437
81813: PUSH
81814: LD_INT 1
81816: ARRAY
81817: PUSH
81818: LD_INT 3
81820: ARRAY
81821: EQUAL
81822: AND
81823: IFFALSE 81833
// result := true ;
81825: LD_ADDR_VAR 0 4
81829: PUSH
81830: LD_INT 1
81832: ST_TO_ADDR
// end ; end ;
81833: LD_VAR 0 4
81837: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
81838: LD_INT 0
81840: PPUSH
81841: PPUSH
81842: PPUSH
81843: PPUSH
// if not unit or not area then
81844: LD_VAR 0 1
81848: NOT
81849: PUSH
81850: LD_VAR 0 2
81854: NOT
81855: OR
81856: IFFALSE 81860
// exit ;
81858: GO 82024
// tmp := AreaToList ( area , i ) ;
81860: LD_ADDR_VAR 0 6
81864: PUSH
81865: LD_VAR 0 2
81869: PPUSH
81870: LD_VAR 0 5
81874: PPUSH
81875: CALL_OW 517
81879: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
81880: LD_ADDR_VAR 0 5
81884: PUSH
81885: DOUBLE
81886: LD_INT 1
81888: DEC
81889: ST_TO_ADDR
81890: LD_VAR 0 6
81894: PUSH
81895: LD_INT 1
81897: ARRAY
81898: PUSH
81899: FOR_TO
81900: IFFALSE 82022
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
81902: LD_ADDR_VAR 0 7
81906: PUSH
81907: LD_VAR 0 6
81911: PUSH
81912: LD_INT 1
81914: ARRAY
81915: PUSH
81916: LD_VAR 0 5
81920: ARRAY
81921: PUSH
81922: LD_VAR 0 6
81926: PUSH
81927: LD_INT 2
81929: ARRAY
81930: PUSH
81931: LD_VAR 0 5
81935: ARRAY
81936: PUSH
81937: EMPTY
81938: LIST
81939: LIST
81940: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
81941: LD_VAR 0 7
81945: PUSH
81946: LD_INT 1
81948: ARRAY
81949: PPUSH
81950: LD_VAR 0 7
81954: PUSH
81955: LD_INT 2
81957: ARRAY
81958: PPUSH
81959: CALL_OW 428
81963: PUSH
81964: LD_INT 0
81966: EQUAL
81967: IFFALSE 82020
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
81969: LD_VAR 0 1
81973: PPUSH
81974: LD_VAR 0 7
81978: PUSH
81979: LD_INT 1
81981: ARRAY
81982: PPUSH
81983: LD_VAR 0 7
81987: PUSH
81988: LD_INT 2
81990: ARRAY
81991: PPUSH
81992: LD_VAR 0 3
81996: PPUSH
81997: CALL_OW 48
// result := IsPlaced ( unit ) ;
82001: LD_ADDR_VAR 0 4
82005: PUSH
82006: LD_VAR 0 1
82010: PPUSH
82011: CALL_OW 305
82015: ST_TO_ADDR
// exit ;
82016: POP
82017: POP
82018: GO 82024
// end ; end ;
82020: GO 81899
82022: POP
82023: POP
// end ;
82024: LD_VAR 0 4
82028: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
82029: LD_INT 0
82031: PPUSH
82032: PPUSH
82033: PPUSH
// if not side or side > 8 then
82034: LD_VAR 0 1
82038: NOT
82039: PUSH
82040: LD_VAR 0 1
82044: PUSH
82045: LD_INT 8
82047: GREATER
82048: OR
82049: IFFALSE 82053
// exit ;
82051: GO 82240
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
82053: LD_ADDR_VAR 0 4
82057: PUSH
82058: LD_INT 22
82060: PUSH
82061: LD_VAR 0 1
82065: PUSH
82066: EMPTY
82067: LIST
82068: LIST
82069: PUSH
82070: LD_INT 21
82072: PUSH
82073: LD_INT 3
82075: PUSH
82076: EMPTY
82077: LIST
82078: LIST
82079: PUSH
82080: EMPTY
82081: LIST
82082: LIST
82083: PPUSH
82084: CALL_OW 69
82088: ST_TO_ADDR
// if not tmp then
82089: LD_VAR 0 4
82093: NOT
82094: IFFALSE 82098
// exit ;
82096: GO 82240
// enable_addtolog := true ;
82098: LD_ADDR_OWVAR 81
82102: PUSH
82103: LD_INT 1
82105: ST_TO_ADDR
// AddToLog ( [ ) ;
82106: LD_STRING [
82108: PPUSH
82109: CALL_OW 561
// for i in tmp do
82113: LD_ADDR_VAR 0 3
82117: PUSH
82118: LD_VAR 0 4
82122: PUSH
82123: FOR_IN
82124: IFFALSE 82231
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
82126: LD_STRING [
82128: PUSH
82129: LD_VAR 0 3
82133: PPUSH
82134: CALL_OW 266
82138: STR
82139: PUSH
82140: LD_STRING , 
82142: STR
82143: PUSH
82144: LD_VAR 0 3
82148: PPUSH
82149: CALL_OW 250
82153: STR
82154: PUSH
82155: LD_STRING , 
82157: STR
82158: PUSH
82159: LD_VAR 0 3
82163: PPUSH
82164: CALL_OW 251
82168: STR
82169: PUSH
82170: LD_STRING , 
82172: STR
82173: PUSH
82174: LD_VAR 0 3
82178: PPUSH
82179: CALL_OW 254
82183: STR
82184: PUSH
82185: LD_STRING , 
82187: STR
82188: PUSH
82189: LD_VAR 0 3
82193: PPUSH
82194: LD_INT 1
82196: PPUSH
82197: CALL_OW 268
82201: STR
82202: PUSH
82203: LD_STRING , 
82205: STR
82206: PUSH
82207: LD_VAR 0 3
82211: PPUSH
82212: LD_INT 2
82214: PPUSH
82215: CALL_OW 268
82219: STR
82220: PUSH
82221: LD_STRING ],
82223: STR
82224: PPUSH
82225: CALL_OW 561
// end ;
82229: GO 82123
82231: POP
82232: POP
// AddToLog ( ]; ) ;
82233: LD_STRING ];
82235: PPUSH
82236: CALL_OW 561
// end ;
82240: LD_VAR 0 2
82244: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
82245: LD_INT 0
82247: PPUSH
82248: PPUSH
82249: PPUSH
82250: PPUSH
82251: PPUSH
// if not area or not rate or not max then
82252: LD_VAR 0 1
82256: NOT
82257: PUSH
82258: LD_VAR 0 2
82262: NOT
82263: OR
82264: PUSH
82265: LD_VAR 0 4
82269: NOT
82270: OR
82271: IFFALSE 82275
// exit ;
82273: GO 82464
// while 1 do
82275: LD_INT 1
82277: IFFALSE 82464
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
82279: LD_ADDR_VAR 0 9
82283: PUSH
82284: LD_VAR 0 1
82288: PPUSH
82289: LD_INT 1
82291: PPUSH
82292: CALL_OW 287
82296: PUSH
82297: LD_INT 10
82299: MUL
82300: ST_TO_ADDR
// r := rate / 10 ;
82301: LD_ADDR_VAR 0 7
82305: PUSH
82306: LD_VAR 0 2
82310: PUSH
82311: LD_INT 10
82313: DIVREAL
82314: ST_TO_ADDR
// time := 1 1$00 ;
82315: LD_ADDR_VAR 0 8
82319: PUSH
82320: LD_INT 2100
82322: ST_TO_ADDR
// if amount < min then
82323: LD_VAR 0 9
82327: PUSH
82328: LD_VAR 0 3
82332: LESS
82333: IFFALSE 82351
// r := r * 2 else
82335: LD_ADDR_VAR 0 7
82339: PUSH
82340: LD_VAR 0 7
82344: PUSH
82345: LD_INT 2
82347: MUL
82348: ST_TO_ADDR
82349: GO 82377
// if amount > max then
82351: LD_VAR 0 9
82355: PUSH
82356: LD_VAR 0 4
82360: GREATER
82361: IFFALSE 82377
// r := r / 2 ;
82363: LD_ADDR_VAR 0 7
82367: PUSH
82368: LD_VAR 0 7
82372: PUSH
82373: LD_INT 2
82375: DIVREAL
82376: ST_TO_ADDR
// time := time / r ;
82377: LD_ADDR_VAR 0 8
82381: PUSH
82382: LD_VAR 0 8
82386: PUSH
82387: LD_VAR 0 7
82391: DIVREAL
82392: ST_TO_ADDR
// if time < 0 then
82393: LD_VAR 0 8
82397: PUSH
82398: LD_INT 0
82400: LESS
82401: IFFALSE 82418
// time := time * - 1 ;
82403: LD_ADDR_VAR 0 8
82407: PUSH
82408: LD_VAR 0 8
82412: PUSH
82413: LD_INT 1
82415: NEG
82416: MUL
82417: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
82418: LD_VAR 0 8
82422: PUSH
82423: LD_INT 35
82425: PPUSH
82426: LD_INT 875
82428: PPUSH
82429: CALL_OW 12
82433: PLUS
82434: PPUSH
82435: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
82439: LD_INT 1
82441: PPUSH
82442: LD_INT 5
82444: PPUSH
82445: CALL_OW 12
82449: PPUSH
82450: LD_VAR 0 1
82454: PPUSH
82455: LD_INT 1
82457: PPUSH
82458: CALL_OW 55
// end ;
82462: GO 82275
// end ;
82464: LD_VAR 0 5
82468: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
82469: LD_INT 0
82471: PPUSH
82472: PPUSH
82473: PPUSH
82474: PPUSH
82475: PPUSH
82476: PPUSH
82477: PPUSH
82478: PPUSH
// if not turrets or not factories then
82479: LD_VAR 0 1
82483: NOT
82484: PUSH
82485: LD_VAR 0 2
82489: NOT
82490: OR
82491: IFFALSE 82495
// exit ;
82493: GO 82802
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
82495: LD_ADDR_VAR 0 10
82499: PUSH
82500: LD_INT 5
82502: PUSH
82503: LD_INT 6
82505: PUSH
82506: EMPTY
82507: LIST
82508: LIST
82509: PUSH
82510: LD_INT 2
82512: PUSH
82513: LD_INT 4
82515: PUSH
82516: EMPTY
82517: LIST
82518: LIST
82519: PUSH
82520: LD_INT 3
82522: PUSH
82523: LD_INT 5
82525: PUSH
82526: EMPTY
82527: LIST
82528: LIST
82529: PUSH
82530: EMPTY
82531: LIST
82532: LIST
82533: LIST
82534: PUSH
82535: LD_INT 24
82537: PUSH
82538: LD_INT 25
82540: PUSH
82541: EMPTY
82542: LIST
82543: LIST
82544: PUSH
82545: LD_INT 23
82547: PUSH
82548: LD_INT 27
82550: PUSH
82551: EMPTY
82552: LIST
82553: LIST
82554: PUSH
82555: EMPTY
82556: LIST
82557: LIST
82558: PUSH
82559: LD_INT 42
82561: PUSH
82562: LD_INT 43
82564: PUSH
82565: EMPTY
82566: LIST
82567: LIST
82568: PUSH
82569: LD_INT 44
82571: PUSH
82572: LD_INT 46
82574: PUSH
82575: EMPTY
82576: LIST
82577: LIST
82578: PUSH
82579: LD_INT 45
82581: PUSH
82582: LD_INT 47
82584: PUSH
82585: EMPTY
82586: LIST
82587: LIST
82588: PUSH
82589: EMPTY
82590: LIST
82591: LIST
82592: LIST
82593: PUSH
82594: EMPTY
82595: LIST
82596: LIST
82597: LIST
82598: ST_TO_ADDR
// result := [ ] ;
82599: LD_ADDR_VAR 0 3
82603: PUSH
82604: EMPTY
82605: ST_TO_ADDR
// for i in turrets do
82606: LD_ADDR_VAR 0 4
82610: PUSH
82611: LD_VAR 0 1
82615: PUSH
82616: FOR_IN
82617: IFFALSE 82800
// begin nat := GetNation ( i ) ;
82619: LD_ADDR_VAR 0 7
82623: PUSH
82624: LD_VAR 0 4
82628: PPUSH
82629: CALL_OW 248
82633: ST_TO_ADDR
// weapon := 0 ;
82634: LD_ADDR_VAR 0 8
82638: PUSH
82639: LD_INT 0
82641: ST_TO_ADDR
// if not nat then
82642: LD_VAR 0 7
82646: NOT
82647: IFFALSE 82651
// continue ;
82649: GO 82616
// for j in list [ nat ] do
82651: LD_ADDR_VAR 0 5
82655: PUSH
82656: LD_VAR 0 10
82660: PUSH
82661: LD_VAR 0 7
82665: ARRAY
82666: PUSH
82667: FOR_IN
82668: IFFALSE 82709
// if GetBWeapon ( i ) = j [ 1 ] then
82670: LD_VAR 0 4
82674: PPUSH
82675: CALL_OW 269
82679: PUSH
82680: LD_VAR 0 5
82684: PUSH
82685: LD_INT 1
82687: ARRAY
82688: EQUAL
82689: IFFALSE 82707
// begin weapon := j [ 2 ] ;
82691: LD_ADDR_VAR 0 8
82695: PUSH
82696: LD_VAR 0 5
82700: PUSH
82701: LD_INT 2
82703: ARRAY
82704: ST_TO_ADDR
// break ;
82705: GO 82709
// end ;
82707: GO 82667
82709: POP
82710: POP
// if not weapon then
82711: LD_VAR 0 8
82715: NOT
82716: IFFALSE 82720
// continue ;
82718: GO 82616
// for k in factories do
82720: LD_ADDR_VAR 0 6
82724: PUSH
82725: LD_VAR 0 2
82729: PUSH
82730: FOR_IN
82731: IFFALSE 82796
// begin weapons := AvailableWeaponList ( k ) ;
82733: LD_ADDR_VAR 0 9
82737: PUSH
82738: LD_VAR 0 6
82742: PPUSH
82743: CALL_OW 478
82747: ST_TO_ADDR
// if not weapons then
82748: LD_VAR 0 9
82752: NOT
82753: IFFALSE 82757
// continue ;
82755: GO 82730
// if weapon in weapons then
82757: LD_VAR 0 8
82761: PUSH
82762: LD_VAR 0 9
82766: IN
82767: IFFALSE 82794
// begin result := [ i , weapon ] ;
82769: LD_ADDR_VAR 0 3
82773: PUSH
82774: LD_VAR 0 4
82778: PUSH
82779: LD_VAR 0 8
82783: PUSH
82784: EMPTY
82785: LIST
82786: LIST
82787: ST_TO_ADDR
// exit ;
82788: POP
82789: POP
82790: POP
82791: POP
82792: GO 82802
// end ; end ;
82794: GO 82730
82796: POP
82797: POP
// end ;
82798: GO 82616
82800: POP
82801: POP
// end ;
82802: LD_VAR 0 3
82806: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
82807: LD_INT 0
82809: PPUSH
// if not side or side > 8 then
82810: LD_VAR 0 3
82814: NOT
82815: PUSH
82816: LD_VAR 0 3
82820: PUSH
82821: LD_INT 8
82823: GREATER
82824: OR
82825: IFFALSE 82829
// exit ;
82827: GO 82888
// if not range then
82829: LD_VAR 0 4
82833: NOT
82834: IFFALSE 82845
// range := - 12 ;
82836: LD_ADDR_VAR 0 4
82840: PUSH
82841: LD_INT 12
82843: NEG
82844: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
82845: LD_VAR 0 1
82849: PPUSH
82850: LD_VAR 0 2
82854: PPUSH
82855: LD_VAR 0 3
82859: PPUSH
82860: LD_VAR 0 4
82864: PPUSH
82865: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
82869: LD_VAR 0 1
82873: PPUSH
82874: LD_VAR 0 2
82878: PPUSH
82879: LD_VAR 0 3
82883: PPUSH
82884: CALL_OW 331
// end ;
82888: LD_VAR 0 5
82892: RET
// export function Video ( mode ) ; begin
82893: LD_INT 0
82895: PPUSH
// ingame_video = mode ;
82896: LD_ADDR_OWVAR 52
82900: PUSH
82901: LD_VAR 0 1
82905: ST_TO_ADDR
// interface_hidden = mode ;
82906: LD_ADDR_OWVAR 54
82910: PUSH
82911: LD_VAR 0 1
82915: ST_TO_ADDR
// end ;
82916: LD_VAR 0 2
82920: RET
// export function Join ( array , element ) ; begin
82921: LD_INT 0
82923: PPUSH
// result := Replace ( array , array + 1 , element ) ;
82924: LD_ADDR_VAR 0 3
82928: PUSH
82929: LD_VAR 0 1
82933: PPUSH
82934: LD_VAR 0 1
82938: PUSH
82939: LD_INT 1
82941: PLUS
82942: PPUSH
82943: LD_VAR 0 2
82947: PPUSH
82948: CALL_OW 1
82952: ST_TO_ADDR
// end ;
82953: LD_VAR 0 3
82957: RET
// export function JoinUnion ( array , element ) ; begin
82958: LD_INT 0
82960: PPUSH
// result := array union element ;
82961: LD_ADDR_VAR 0 3
82965: PUSH
82966: LD_VAR 0 1
82970: PUSH
82971: LD_VAR 0 2
82975: UNION
82976: ST_TO_ADDR
// end ;
82977: LD_VAR 0 3
82981: RET
// export function GetBehemoths ( side ) ; begin
82982: LD_INT 0
82984: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
82985: LD_ADDR_VAR 0 2
82989: PUSH
82990: LD_INT 22
82992: PUSH
82993: LD_VAR 0 1
82997: PUSH
82998: EMPTY
82999: LIST
83000: LIST
83001: PUSH
83002: LD_INT 31
83004: PUSH
83005: LD_INT 25
83007: PUSH
83008: EMPTY
83009: LIST
83010: LIST
83011: PUSH
83012: EMPTY
83013: LIST
83014: LIST
83015: PPUSH
83016: CALL_OW 69
83020: ST_TO_ADDR
// end ;
83021: LD_VAR 0 2
83025: RET
// export function Shuffle ( array ) ; var i , index ; begin
83026: LD_INT 0
83028: PPUSH
83029: PPUSH
83030: PPUSH
// result := [ ] ;
83031: LD_ADDR_VAR 0 2
83035: PUSH
83036: EMPTY
83037: ST_TO_ADDR
// if not array then
83038: LD_VAR 0 1
83042: NOT
83043: IFFALSE 83047
// exit ;
83045: GO 83146
// Randomize ;
83047: CALL_OW 10
// for i = array downto 1 do
83051: LD_ADDR_VAR 0 3
83055: PUSH
83056: DOUBLE
83057: LD_VAR 0 1
83061: INC
83062: ST_TO_ADDR
83063: LD_INT 1
83065: PUSH
83066: FOR_DOWNTO
83067: IFFALSE 83144
// begin index := rand ( 1 , array ) ;
83069: LD_ADDR_VAR 0 4
83073: PUSH
83074: LD_INT 1
83076: PPUSH
83077: LD_VAR 0 1
83081: PPUSH
83082: CALL_OW 12
83086: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
83087: LD_ADDR_VAR 0 2
83091: PUSH
83092: LD_VAR 0 2
83096: PPUSH
83097: LD_VAR 0 2
83101: PUSH
83102: LD_INT 1
83104: PLUS
83105: PPUSH
83106: LD_VAR 0 1
83110: PUSH
83111: LD_VAR 0 4
83115: ARRAY
83116: PPUSH
83117: CALL_OW 2
83121: ST_TO_ADDR
// array := Delete ( array , index ) ;
83122: LD_ADDR_VAR 0 1
83126: PUSH
83127: LD_VAR 0 1
83131: PPUSH
83132: LD_VAR 0 4
83136: PPUSH
83137: CALL_OW 3
83141: ST_TO_ADDR
// end ;
83142: GO 83066
83144: POP
83145: POP
// end ;
83146: LD_VAR 0 2
83150: RET
// export function GetBaseMaterials ( base ) ; begin
83151: LD_INT 0
83153: PPUSH
// result := [ 0 , 0 , 0 ] ;
83154: LD_ADDR_VAR 0 2
83158: PUSH
83159: LD_INT 0
83161: PUSH
83162: LD_INT 0
83164: PUSH
83165: LD_INT 0
83167: PUSH
83168: EMPTY
83169: LIST
83170: LIST
83171: LIST
83172: ST_TO_ADDR
// if not base then
83173: LD_VAR 0 1
83177: NOT
83178: IFFALSE 83182
// exit ;
83180: GO 83231
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
83182: LD_ADDR_VAR 0 2
83186: PUSH
83187: LD_VAR 0 1
83191: PPUSH
83192: LD_INT 1
83194: PPUSH
83195: CALL_OW 275
83199: PUSH
83200: LD_VAR 0 1
83204: PPUSH
83205: LD_INT 2
83207: PPUSH
83208: CALL_OW 275
83212: PUSH
83213: LD_VAR 0 1
83217: PPUSH
83218: LD_INT 3
83220: PPUSH
83221: CALL_OW 275
83225: PUSH
83226: EMPTY
83227: LIST
83228: LIST
83229: LIST
83230: ST_TO_ADDR
// end ;
83231: LD_VAR 0 2
83235: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
83236: LD_INT 0
83238: PPUSH
83239: PPUSH
// result := array ;
83240: LD_ADDR_VAR 0 3
83244: PUSH
83245: LD_VAR 0 1
83249: ST_TO_ADDR
// if size > 0 then
83250: LD_VAR 0 2
83254: PUSH
83255: LD_INT 0
83257: GREATER
83258: IFFALSE 83304
// for i := array downto size do
83260: LD_ADDR_VAR 0 4
83264: PUSH
83265: DOUBLE
83266: LD_VAR 0 1
83270: INC
83271: ST_TO_ADDR
83272: LD_VAR 0 2
83276: PUSH
83277: FOR_DOWNTO
83278: IFFALSE 83302
// result := Delete ( result , result ) ;
83280: LD_ADDR_VAR 0 3
83284: PUSH
83285: LD_VAR 0 3
83289: PPUSH
83290: LD_VAR 0 3
83294: PPUSH
83295: CALL_OW 3
83299: ST_TO_ADDR
83300: GO 83277
83302: POP
83303: POP
// end ;
83304: LD_VAR 0 3
83308: RET
// export function ComExit ( unit ) ; var tmp ; begin
83309: LD_INT 0
83311: PPUSH
83312: PPUSH
// if not IsInUnit ( unit ) then
83313: LD_VAR 0 1
83317: PPUSH
83318: CALL_OW 310
83322: NOT
83323: IFFALSE 83327
// exit ;
83325: GO 83387
// tmp := IsInUnit ( unit ) ;
83327: LD_ADDR_VAR 0 3
83331: PUSH
83332: LD_VAR 0 1
83336: PPUSH
83337: CALL_OW 310
83341: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
83342: LD_VAR 0 3
83346: PPUSH
83347: CALL_OW 247
83351: PUSH
83352: LD_INT 2
83354: EQUAL
83355: IFFALSE 83368
// ComExitVehicle ( unit ) else
83357: LD_VAR 0 1
83361: PPUSH
83362: CALL_OW 121
83366: GO 83377
// ComExitBuilding ( unit ) ;
83368: LD_VAR 0 1
83372: PPUSH
83373: CALL_OW 122
// result := tmp ;
83377: LD_ADDR_VAR 0 2
83381: PUSH
83382: LD_VAR 0 3
83386: ST_TO_ADDR
// end ;
83387: LD_VAR 0 2
83391: RET
// export function ComExitAll ( units ) ; var i ; begin
83392: LD_INT 0
83394: PPUSH
83395: PPUSH
// if not units then
83396: LD_VAR 0 1
83400: NOT
83401: IFFALSE 83405
// exit ;
83403: GO 83431
// for i in units do
83405: LD_ADDR_VAR 0 3
83409: PUSH
83410: LD_VAR 0 1
83414: PUSH
83415: FOR_IN
83416: IFFALSE 83429
// ComExit ( i ) ;
83418: LD_VAR 0 3
83422: PPUSH
83423: CALL 83309 0 1
83427: GO 83415
83429: POP
83430: POP
// end ;
83431: LD_VAR 0 2
83435: RET
// export function ResetHc ; begin
83436: LD_INT 0
83438: PPUSH
// InitHc ;
83439: CALL_OW 19
// hc_importance := 0 ;
83443: LD_ADDR_OWVAR 32
83447: PUSH
83448: LD_INT 0
83450: ST_TO_ADDR
// end ;
83451: LD_VAR 0 1
83455: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
83456: LD_INT 0
83458: PPUSH
83459: PPUSH
83460: PPUSH
// _x := ( x1 + x2 ) div 2 ;
83461: LD_ADDR_VAR 0 6
83465: PUSH
83466: LD_VAR 0 1
83470: PUSH
83471: LD_VAR 0 3
83475: PLUS
83476: PUSH
83477: LD_INT 2
83479: DIV
83480: ST_TO_ADDR
// if _x < 0 then
83481: LD_VAR 0 6
83485: PUSH
83486: LD_INT 0
83488: LESS
83489: IFFALSE 83506
// _x := _x * - 1 ;
83491: LD_ADDR_VAR 0 6
83495: PUSH
83496: LD_VAR 0 6
83500: PUSH
83501: LD_INT 1
83503: NEG
83504: MUL
83505: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
83506: LD_ADDR_VAR 0 7
83510: PUSH
83511: LD_VAR 0 2
83515: PUSH
83516: LD_VAR 0 4
83520: PLUS
83521: PUSH
83522: LD_INT 2
83524: DIV
83525: ST_TO_ADDR
// if _y < 0 then
83526: LD_VAR 0 7
83530: PUSH
83531: LD_INT 0
83533: LESS
83534: IFFALSE 83551
// _y := _y * - 1 ;
83536: LD_ADDR_VAR 0 7
83540: PUSH
83541: LD_VAR 0 7
83545: PUSH
83546: LD_INT 1
83548: NEG
83549: MUL
83550: ST_TO_ADDR
// result := [ _x , _y ] ;
83551: LD_ADDR_VAR 0 5
83555: PUSH
83556: LD_VAR 0 6
83560: PUSH
83561: LD_VAR 0 7
83565: PUSH
83566: EMPTY
83567: LIST
83568: LIST
83569: ST_TO_ADDR
// end ;
83570: LD_VAR 0 5
83574: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
83575: LD_INT 0
83577: PPUSH
83578: PPUSH
83579: PPUSH
83580: PPUSH
// task := GetTaskList ( unit ) ;
83581: LD_ADDR_VAR 0 7
83585: PUSH
83586: LD_VAR 0 1
83590: PPUSH
83591: CALL_OW 437
83595: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
83596: LD_VAR 0 7
83600: NOT
83601: PUSH
83602: LD_VAR 0 1
83606: PPUSH
83607: LD_VAR 0 2
83611: PPUSH
83612: CALL_OW 308
83616: NOT
83617: AND
83618: IFFALSE 83622
// exit ;
83620: GO 83740
// if IsInArea ( unit , area ) then
83622: LD_VAR 0 1
83626: PPUSH
83627: LD_VAR 0 2
83631: PPUSH
83632: CALL_OW 308
83636: IFFALSE 83654
// begin ComMoveToArea ( unit , goAway ) ;
83638: LD_VAR 0 1
83642: PPUSH
83643: LD_VAR 0 3
83647: PPUSH
83648: CALL_OW 113
// exit ;
83652: GO 83740
// end ; if task [ 1 ] [ 1 ] <> M then
83654: LD_VAR 0 7
83658: PUSH
83659: LD_INT 1
83661: ARRAY
83662: PUSH
83663: LD_INT 1
83665: ARRAY
83666: PUSH
83667: LD_STRING M
83669: NONEQUAL
83670: IFFALSE 83674
// exit ;
83672: GO 83740
// x := task [ 1 ] [ 2 ] ;
83674: LD_ADDR_VAR 0 5
83678: PUSH
83679: LD_VAR 0 7
83683: PUSH
83684: LD_INT 1
83686: ARRAY
83687: PUSH
83688: LD_INT 2
83690: ARRAY
83691: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
83692: LD_ADDR_VAR 0 6
83696: PUSH
83697: LD_VAR 0 7
83701: PUSH
83702: LD_INT 1
83704: ARRAY
83705: PUSH
83706: LD_INT 3
83708: ARRAY
83709: ST_TO_ADDR
// if InArea ( x , y , area ) then
83710: LD_VAR 0 5
83714: PPUSH
83715: LD_VAR 0 6
83719: PPUSH
83720: LD_VAR 0 2
83724: PPUSH
83725: CALL_OW 309
83729: IFFALSE 83740
// ComStop ( unit ) ;
83731: LD_VAR 0 1
83735: PPUSH
83736: CALL_OW 141
// end ;
83740: LD_VAR 0 4
83744: RET
// export function Abs ( value ) ; begin
83745: LD_INT 0
83747: PPUSH
// result := value ;
83748: LD_ADDR_VAR 0 2
83752: PUSH
83753: LD_VAR 0 1
83757: ST_TO_ADDR
// if value < 0 then
83758: LD_VAR 0 1
83762: PUSH
83763: LD_INT 0
83765: LESS
83766: IFFALSE 83783
// result := value * - 1 ;
83768: LD_ADDR_VAR 0 2
83772: PUSH
83773: LD_VAR 0 1
83777: PUSH
83778: LD_INT 1
83780: NEG
83781: MUL
83782: ST_TO_ADDR
// end ;
83783: LD_VAR 0 2
83787: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
83788: LD_INT 0
83790: PPUSH
83791: PPUSH
83792: PPUSH
83793: PPUSH
83794: PPUSH
83795: PPUSH
83796: PPUSH
83797: PPUSH
// if not unit or not building then
83798: LD_VAR 0 1
83802: NOT
83803: PUSH
83804: LD_VAR 0 2
83808: NOT
83809: OR
83810: IFFALSE 83814
// exit ;
83812: GO 84040
// x := GetX ( building ) ;
83814: LD_ADDR_VAR 0 4
83818: PUSH
83819: LD_VAR 0 2
83823: PPUSH
83824: CALL_OW 250
83828: ST_TO_ADDR
// y := GetY ( building ) ;
83829: LD_ADDR_VAR 0 6
83833: PUSH
83834: LD_VAR 0 2
83838: PPUSH
83839: CALL_OW 251
83843: ST_TO_ADDR
// d := GetDir ( building ) ;
83844: LD_ADDR_VAR 0 8
83848: PUSH
83849: LD_VAR 0 2
83853: PPUSH
83854: CALL_OW 254
83858: ST_TO_ADDR
// r := 4 ;
83859: LD_ADDR_VAR 0 9
83863: PUSH
83864: LD_INT 4
83866: ST_TO_ADDR
// for i := 1 to 5 do
83867: LD_ADDR_VAR 0 10
83871: PUSH
83872: DOUBLE
83873: LD_INT 1
83875: DEC
83876: ST_TO_ADDR
83877: LD_INT 5
83879: PUSH
83880: FOR_TO
83881: IFFALSE 84038
// begin _x := ShiftX ( x , d , r + i ) ;
83883: LD_ADDR_VAR 0 5
83887: PUSH
83888: LD_VAR 0 4
83892: PPUSH
83893: LD_VAR 0 8
83897: PPUSH
83898: LD_VAR 0 9
83902: PUSH
83903: LD_VAR 0 10
83907: PLUS
83908: PPUSH
83909: CALL_OW 272
83913: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
83914: LD_ADDR_VAR 0 7
83918: PUSH
83919: LD_VAR 0 6
83923: PPUSH
83924: LD_VAR 0 8
83928: PPUSH
83929: LD_VAR 0 9
83933: PUSH
83934: LD_VAR 0 10
83938: PLUS
83939: PPUSH
83940: CALL_OW 273
83944: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
83945: LD_VAR 0 5
83949: PPUSH
83950: LD_VAR 0 7
83954: PPUSH
83955: CALL_OW 488
83959: PUSH
83960: LD_VAR 0 5
83964: PPUSH
83965: LD_VAR 0 7
83969: PPUSH
83970: CALL_OW 428
83974: PPUSH
83975: CALL_OW 247
83979: PUSH
83980: LD_INT 3
83982: PUSH
83983: LD_INT 2
83985: PUSH
83986: EMPTY
83987: LIST
83988: LIST
83989: IN
83990: NOT
83991: AND
83992: IFFALSE 84036
// begin ComMoveXY ( unit , _x , _y ) ;
83994: LD_VAR 0 1
83998: PPUSH
83999: LD_VAR 0 5
84003: PPUSH
84004: LD_VAR 0 7
84008: PPUSH
84009: CALL_OW 111
// result := [ _x , _y ] ;
84013: LD_ADDR_VAR 0 3
84017: PUSH
84018: LD_VAR 0 5
84022: PUSH
84023: LD_VAR 0 7
84027: PUSH
84028: EMPTY
84029: LIST
84030: LIST
84031: ST_TO_ADDR
// exit ;
84032: POP
84033: POP
84034: GO 84040
// end ; end ;
84036: GO 83880
84038: POP
84039: POP
// end ;
84040: LD_VAR 0 3
84044: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
84045: LD_INT 0
84047: PPUSH
84048: PPUSH
84049: PPUSH
// result := 0 ;
84050: LD_ADDR_VAR 0 3
84054: PUSH
84055: LD_INT 0
84057: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
84058: LD_VAR 0 1
84062: PUSH
84063: LD_INT 0
84065: LESS
84066: PUSH
84067: LD_VAR 0 1
84071: PUSH
84072: LD_INT 8
84074: GREATER
84075: OR
84076: PUSH
84077: LD_VAR 0 2
84081: PUSH
84082: LD_INT 0
84084: LESS
84085: OR
84086: PUSH
84087: LD_VAR 0 2
84091: PUSH
84092: LD_INT 8
84094: GREATER
84095: OR
84096: IFFALSE 84100
// exit ;
84098: GO 84175
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
84100: LD_ADDR_VAR 0 4
84104: PUSH
84105: LD_INT 22
84107: PUSH
84108: LD_VAR 0 2
84112: PUSH
84113: EMPTY
84114: LIST
84115: LIST
84116: PPUSH
84117: CALL_OW 69
84121: PUSH
84122: FOR_IN
84123: IFFALSE 84173
// begin un := UnitShoot ( i ) ;
84125: LD_ADDR_VAR 0 5
84129: PUSH
84130: LD_VAR 0 4
84134: PPUSH
84135: CALL_OW 504
84139: ST_TO_ADDR
// if GetSide ( un ) = side1 then
84140: LD_VAR 0 5
84144: PPUSH
84145: CALL_OW 255
84149: PUSH
84150: LD_VAR 0 1
84154: EQUAL
84155: IFFALSE 84171
// begin result := un ;
84157: LD_ADDR_VAR 0 3
84161: PUSH
84162: LD_VAR 0 5
84166: ST_TO_ADDR
// exit ;
84167: POP
84168: POP
84169: GO 84175
// end ; end ;
84171: GO 84122
84173: POP
84174: POP
// end ;
84175: LD_VAR 0 3
84179: RET
// export function GetCargoBay ( units ) ; begin
84180: LD_INT 0
84182: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
84183: LD_ADDR_VAR 0 2
84187: PUSH
84188: LD_VAR 0 1
84192: PPUSH
84193: LD_INT 2
84195: PUSH
84196: LD_INT 34
84198: PUSH
84199: LD_INT 12
84201: PUSH
84202: EMPTY
84203: LIST
84204: LIST
84205: PUSH
84206: LD_INT 34
84208: PUSH
84209: LD_INT 51
84211: PUSH
84212: EMPTY
84213: LIST
84214: LIST
84215: PUSH
84216: LD_INT 34
84218: PUSH
84219: LD_INT 32
84221: PUSH
84222: EMPTY
84223: LIST
84224: LIST
84225: PUSH
84226: LD_INT 34
84228: PUSH
84229: LD_EXP 49
84233: PUSH
84234: EMPTY
84235: LIST
84236: LIST
84237: PUSH
84238: EMPTY
84239: LIST
84240: LIST
84241: LIST
84242: LIST
84243: LIST
84244: PPUSH
84245: CALL_OW 72
84249: ST_TO_ADDR
// end ;
84250: LD_VAR 0 2
84254: RET
// export function Negate ( value ) ; begin
84255: LD_INT 0
84257: PPUSH
// result := not value ;
84258: LD_ADDR_VAR 0 2
84262: PUSH
84263: LD_VAR 0 1
84267: NOT
84268: ST_TO_ADDR
// end ;
84269: LD_VAR 0 2
84273: RET
// export function Inc ( value ) ; begin
84274: LD_INT 0
84276: PPUSH
// result := value + 1 ;
84277: LD_ADDR_VAR 0 2
84281: PUSH
84282: LD_VAR 0 1
84286: PUSH
84287: LD_INT 1
84289: PLUS
84290: ST_TO_ADDR
// end ;
84291: LD_VAR 0 2
84295: RET
// export function Dec ( value ) ; begin
84296: LD_INT 0
84298: PPUSH
// result := value - 1 ;
84299: LD_ADDR_VAR 0 2
84303: PUSH
84304: LD_VAR 0 1
84308: PUSH
84309: LD_INT 1
84311: MINUS
84312: ST_TO_ADDR
// end ;
84313: LD_VAR 0 2
84317: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
84318: LD_INT 0
84320: PPUSH
84321: PPUSH
84322: PPUSH
84323: PPUSH
84324: PPUSH
84325: PPUSH
84326: PPUSH
84327: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
84328: LD_VAR 0 1
84332: PPUSH
84333: LD_VAR 0 2
84337: PPUSH
84338: CALL_OW 488
84342: NOT
84343: PUSH
84344: LD_VAR 0 3
84348: PPUSH
84349: LD_VAR 0 4
84353: PPUSH
84354: CALL_OW 488
84358: NOT
84359: OR
84360: IFFALSE 84373
// begin result := - 1 ;
84362: LD_ADDR_VAR 0 5
84366: PUSH
84367: LD_INT 1
84369: NEG
84370: ST_TO_ADDR
// exit ;
84371: GO 84608
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
84373: LD_ADDR_VAR 0 12
84377: PUSH
84378: LD_VAR 0 1
84382: PPUSH
84383: LD_VAR 0 2
84387: PPUSH
84388: LD_VAR 0 3
84392: PPUSH
84393: LD_VAR 0 4
84397: PPUSH
84398: CALL 83456 0 4
84402: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
84403: LD_ADDR_VAR 0 11
84407: PUSH
84408: LD_VAR 0 1
84412: PPUSH
84413: LD_VAR 0 2
84417: PPUSH
84418: LD_VAR 0 12
84422: PUSH
84423: LD_INT 1
84425: ARRAY
84426: PPUSH
84427: LD_VAR 0 12
84431: PUSH
84432: LD_INT 2
84434: ARRAY
84435: PPUSH
84436: CALL_OW 298
84440: ST_TO_ADDR
// distance := 9999 ;
84441: LD_ADDR_VAR 0 10
84445: PUSH
84446: LD_INT 9999
84448: ST_TO_ADDR
// for i := 0 to 5 do
84449: LD_ADDR_VAR 0 6
84453: PUSH
84454: DOUBLE
84455: LD_INT 0
84457: DEC
84458: ST_TO_ADDR
84459: LD_INT 5
84461: PUSH
84462: FOR_TO
84463: IFFALSE 84606
// begin _x := ShiftX ( x1 , i , centerDist ) ;
84465: LD_ADDR_VAR 0 7
84469: PUSH
84470: LD_VAR 0 1
84474: PPUSH
84475: LD_VAR 0 6
84479: PPUSH
84480: LD_VAR 0 11
84484: PPUSH
84485: CALL_OW 272
84489: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
84490: LD_ADDR_VAR 0 8
84494: PUSH
84495: LD_VAR 0 2
84499: PPUSH
84500: LD_VAR 0 6
84504: PPUSH
84505: LD_VAR 0 11
84509: PPUSH
84510: CALL_OW 273
84514: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
84515: LD_VAR 0 7
84519: PPUSH
84520: LD_VAR 0 8
84524: PPUSH
84525: CALL_OW 488
84529: NOT
84530: IFFALSE 84534
// continue ;
84532: GO 84462
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
84534: LD_ADDR_VAR 0 9
84538: PUSH
84539: LD_VAR 0 12
84543: PUSH
84544: LD_INT 1
84546: ARRAY
84547: PPUSH
84548: LD_VAR 0 12
84552: PUSH
84553: LD_INT 2
84555: ARRAY
84556: PPUSH
84557: LD_VAR 0 7
84561: PPUSH
84562: LD_VAR 0 8
84566: PPUSH
84567: CALL_OW 298
84571: ST_TO_ADDR
// if tmp < distance then
84572: LD_VAR 0 9
84576: PUSH
84577: LD_VAR 0 10
84581: LESS
84582: IFFALSE 84604
// begin result := i ;
84584: LD_ADDR_VAR 0 5
84588: PUSH
84589: LD_VAR 0 6
84593: ST_TO_ADDR
// distance := tmp ;
84594: LD_ADDR_VAR 0 10
84598: PUSH
84599: LD_VAR 0 9
84603: ST_TO_ADDR
// end ; end ;
84604: GO 84462
84606: POP
84607: POP
// end ;
84608: LD_VAR 0 5
84612: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
84613: LD_INT 0
84615: PPUSH
84616: PPUSH
// if not driver or not IsInUnit ( driver ) then
84617: LD_VAR 0 1
84621: NOT
84622: PUSH
84623: LD_VAR 0 1
84627: PPUSH
84628: CALL_OW 310
84632: NOT
84633: OR
84634: IFFALSE 84638
// exit ;
84636: GO 84728
// vehicle := IsInUnit ( driver ) ;
84638: LD_ADDR_VAR 0 3
84642: PUSH
84643: LD_VAR 0 1
84647: PPUSH
84648: CALL_OW 310
84652: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
84653: LD_VAR 0 1
84657: PPUSH
84658: LD_STRING \
84660: PUSH
84661: LD_INT 0
84663: PUSH
84664: LD_INT 0
84666: PUSH
84667: LD_INT 0
84669: PUSH
84670: LD_INT 0
84672: PUSH
84673: LD_INT 0
84675: PUSH
84676: LD_INT 0
84678: PUSH
84679: EMPTY
84680: LIST
84681: LIST
84682: LIST
84683: LIST
84684: LIST
84685: LIST
84686: LIST
84687: PUSH
84688: LD_STRING E
84690: PUSH
84691: LD_INT 0
84693: PUSH
84694: LD_INT 0
84696: PUSH
84697: LD_VAR 0 3
84701: PUSH
84702: LD_INT 0
84704: PUSH
84705: LD_INT 0
84707: PUSH
84708: LD_INT 0
84710: PUSH
84711: EMPTY
84712: LIST
84713: LIST
84714: LIST
84715: LIST
84716: LIST
84717: LIST
84718: LIST
84719: PUSH
84720: EMPTY
84721: LIST
84722: LIST
84723: PPUSH
84724: CALL_OW 446
// end ;
84728: LD_VAR 0 2
84732: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
84733: LD_INT 0
84735: PPUSH
84736: PPUSH
// if not driver or not IsInUnit ( driver ) then
84737: LD_VAR 0 1
84741: NOT
84742: PUSH
84743: LD_VAR 0 1
84747: PPUSH
84748: CALL_OW 310
84752: NOT
84753: OR
84754: IFFALSE 84758
// exit ;
84756: GO 84848
// vehicle := IsInUnit ( driver ) ;
84758: LD_ADDR_VAR 0 3
84762: PUSH
84763: LD_VAR 0 1
84767: PPUSH
84768: CALL_OW 310
84772: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
84773: LD_VAR 0 1
84777: PPUSH
84778: LD_STRING \
84780: PUSH
84781: LD_INT 0
84783: PUSH
84784: LD_INT 0
84786: PUSH
84787: LD_INT 0
84789: PUSH
84790: LD_INT 0
84792: PUSH
84793: LD_INT 0
84795: PUSH
84796: LD_INT 0
84798: PUSH
84799: EMPTY
84800: LIST
84801: LIST
84802: LIST
84803: LIST
84804: LIST
84805: LIST
84806: LIST
84807: PUSH
84808: LD_STRING E
84810: PUSH
84811: LD_INT 0
84813: PUSH
84814: LD_INT 0
84816: PUSH
84817: LD_VAR 0 3
84821: PUSH
84822: LD_INT 0
84824: PUSH
84825: LD_INT 0
84827: PUSH
84828: LD_INT 0
84830: PUSH
84831: EMPTY
84832: LIST
84833: LIST
84834: LIST
84835: LIST
84836: LIST
84837: LIST
84838: LIST
84839: PUSH
84840: EMPTY
84841: LIST
84842: LIST
84843: PPUSH
84844: CALL_OW 447
// end ;
84848: LD_VAR 0 2
84852: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
84853: LD_INT 0
84855: PPUSH
84856: PPUSH
84857: PPUSH
// tmp := [ ] ;
84858: LD_ADDR_VAR 0 5
84862: PUSH
84863: EMPTY
84864: ST_TO_ADDR
// for i in units do
84865: LD_ADDR_VAR 0 4
84869: PUSH
84870: LD_VAR 0 1
84874: PUSH
84875: FOR_IN
84876: IFFALSE 84914
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
84878: LD_ADDR_VAR 0 5
84882: PUSH
84883: LD_VAR 0 5
84887: PPUSH
84888: LD_VAR 0 5
84892: PUSH
84893: LD_INT 1
84895: PLUS
84896: PPUSH
84897: LD_VAR 0 4
84901: PPUSH
84902: CALL_OW 256
84906: PPUSH
84907: CALL_OW 2
84911: ST_TO_ADDR
84912: GO 84875
84914: POP
84915: POP
// if not tmp then
84916: LD_VAR 0 5
84920: NOT
84921: IFFALSE 84925
// exit ;
84923: GO 84973
// if asc then
84925: LD_VAR 0 2
84929: IFFALSE 84953
// result := SortListByListAsc ( units , tmp ) else
84931: LD_ADDR_VAR 0 3
84935: PUSH
84936: LD_VAR 0 1
84940: PPUSH
84941: LD_VAR 0 5
84945: PPUSH
84946: CALL_OW 76
84950: ST_TO_ADDR
84951: GO 84973
// result := SortListByListDesc ( units , tmp ) ;
84953: LD_ADDR_VAR 0 3
84957: PUSH
84958: LD_VAR 0 1
84962: PPUSH
84963: LD_VAR 0 5
84967: PPUSH
84968: CALL_OW 77
84972: ST_TO_ADDR
// end ;
84973: LD_VAR 0 3
84977: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
84978: LD_INT 0
84980: PPUSH
84981: PPUSH
// task := GetTaskList ( mech ) ;
84982: LD_ADDR_VAR 0 4
84986: PUSH
84987: LD_VAR 0 1
84991: PPUSH
84992: CALL_OW 437
84996: ST_TO_ADDR
// if not task then
84997: LD_VAR 0 4
85001: NOT
85002: IFFALSE 85006
// exit ;
85004: GO 85048
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
85006: LD_ADDR_VAR 0 3
85010: PUSH
85011: LD_VAR 0 4
85015: PUSH
85016: LD_INT 1
85018: ARRAY
85019: PUSH
85020: LD_INT 1
85022: ARRAY
85023: PUSH
85024: LD_STRING r
85026: EQUAL
85027: PUSH
85028: LD_VAR 0 4
85032: PUSH
85033: LD_INT 1
85035: ARRAY
85036: PUSH
85037: LD_INT 4
85039: ARRAY
85040: PUSH
85041: LD_VAR 0 2
85045: EQUAL
85046: AND
85047: ST_TO_ADDR
// end ;
85048: LD_VAR 0 3
85052: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
85053: LD_INT 0
85055: PPUSH
// SetDir ( unit , d ) ;
85056: LD_VAR 0 1
85060: PPUSH
85061: LD_VAR 0 4
85065: PPUSH
85066: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
85070: LD_VAR 0 1
85074: PPUSH
85075: LD_VAR 0 2
85079: PPUSH
85080: LD_VAR 0 3
85084: PPUSH
85085: LD_VAR 0 5
85089: PPUSH
85090: CALL_OW 48
// end ;
85094: LD_VAR 0 6
85098: RET
// export function ToNaturalNumber ( number ) ; begin
85099: LD_INT 0
85101: PPUSH
// result := number div 1 ;
85102: LD_ADDR_VAR 0 2
85106: PUSH
85107: LD_VAR 0 1
85111: PUSH
85112: LD_INT 1
85114: DIV
85115: ST_TO_ADDR
// if number < 0 then
85116: LD_VAR 0 1
85120: PUSH
85121: LD_INT 0
85123: LESS
85124: IFFALSE 85134
// result := 0 ;
85126: LD_ADDR_VAR 0 2
85130: PUSH
85131: LD_INT 0
85133: ST_TO_ADDR
// end ;
85134: LD_VAR 0 2
85138: RET
// export function SortByClass ( units , class ) ; var un ; begin
85139: LD_INT 0
85141: PPUSH
85142: PPUSH
// if not units or not class then
85143: LD_VAR 0 1
85147: NOT
85148: PUSH
85149: LD_VAR 0 2
85153: NOT
85154: OR
85155: IFFALSE 85159
// exit ;
85157: GO 85254
// result := [ ] ;
85159: LD_ADDR_VAR 0 3
85163: PUSH
85164: EMPTY
85165: ST_TO_ADDR
// for un in units do
85166: LD_ADDR_VAR 0 4
85170: PUSH
85171: LD_VAR 0 1
85175: PUSH
85176: FOR_IN
85177: IFFALSE 85252
// if GetClass ( un ) = class then
85179: LD_VAR 0 4
85183: PPUSH
85184: CALL_OW 257
85188: PUSH
85189: LD_VAR 0 2
85193: EQUAL
85194: IFFALSE 85221
// result := Insert ( result , 1 , un ) else
85196: LD_ADDR_VAR 0 3
85200: PUSH
85201: LD_VAR 0 3
85205: PPUSH
85206: LD_INT 1
85208: PPUSH
85209: LD_VAR 0 4
85213: PPUSH
85214: CALL_OW 2
85218: ST_TO_ADDR
85219: GO 85250
// result := Replace ( result , result + 1 , un ) ;
85221: LD_ADDR_VAR 0 3
85225: PUSH
85226: LD_VAR 0 3
85230: PPUSH
85231: LD_VAR 0 3
85235: PUSH
85236: LD_INT 1
85238: PLUS
85239: PPUSH
85240: LD_VAR 0 4
85244: PPUSH
85245: CALL_OW 1
85249: ST_TO_ADDR
85250: GO 85176
85252: POP
85253: POP
// end ;
85254: LD_VAR 0 3
85258: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
85259: LD_INT 0
85261: PPUSH
85262: PPUSH
85263: PPUSH
85264: PPUSH
85265: PPUSH
85266: PPUSH
85267: PPUSH
// result := [ ] ;
85268: LD_ADDR_VAR 0 4
85272: PUSH
85273: EMPTY
85274: ST_TO_ADDR
// if x - r < 0 then
85275: LD_VAR 0 1
85279: PUSH
85280: LD_VAR 0 3
85284: MINUS
85285: PUSH
85286: LD_INT 0
85288: LESS
85289: IFFALSE 85301
// min_x := 0 else
85291: LD_ADDR_VAR 0 8
85295: PUSH
85296: LD_INT 0
85298: ST_TO_ADDR
85299: GO 85317
// min_x := x - r ;
85301: LD_ADDR_VAR 0 8
85305: PUSH
85306: LD_VAR 0 1
85310: PUSH
85311: LD_VAR 0 3
85315: MINUS
85316: ST_TO_ADDR
// if y - r < 0 then
85317: LD_VAR 0 2
85321: PUSH
85322: LD_VAR 0 3
85326: MINUS
85327: PUSH
85328: LD_INT 0
85330: LESS
85331: IFFALSE 85343
// min_y := 0 else
85333: LD_ADDR_VAR 0 7
85337: PUSH
85338: LD_INT 0
85340: ST_TO_ADDR
85341: GO 85359
// min_y := y - r ;
85343: LD_ADDR_VAR 0 7
85347: PUSH
85348: LD_VAR 0 2
85352: PUSH
85353: LD_VAR 0 3
85357: MINUS
85358: ST_TO_ADDR
// max_x := x + r ;
85359: LD_ADDR_VAR 0 9
85363: PUSH
85364: LD_VAR 0 1
85368: PUSH
85369: LD_VAR 0 3
85373: PLUS
85374: ST_TO_ADDR
// max_y := y + r ;
85375: LD_ADDR_VAR 0 10
85379: PUSH
85380: LD_VAR 0 2
85384: PUSH
85385: LD_VAR 0 3
85389: PLUS
85390: ST_TO_ADDR
// for _x = min_x to max_x do
85391: LD_ADDR_VAR 0 5
85395: PUSH
85396: DOUBLE
85397: LD_VAR 0 8
85401: DEC
85402: ST_TO_ADDR
85403: LD_VAR 0 9
85407: PUSH
85408: FOR_TO
85409: IFFALSE 85510
// for _y = min_y to max_y do
85411: LD_ADDR_VAR 0 6
85415: PUSH
85416: DOUBLE
85417: LD_VAR 0 7
85421: DEC
85422: ST_TO_ADDR
85423: LD_VAR 0 10
85427: PUSH
85428: FOR_TO
85429: IFFALSE 85506
// begin if not ValidHex ( _x , _y ) then
85431: LD_VAR 0 5
85435: PPUSH
85436: LD_VAR 0 6
85440: PPUSH
85441: CALL_OW 488
85445: NOT
85446: IFFALSE 85450
// continue ;
85448: GO 85428
// if GetResourceTypeXY ( _x , _y ) then
85450: LD_VAR 0 5
85454: PPUSH
85455: LD_VAR 0 6
85459: PPUSH
85460: CALL_OW 283
85464: IFFALSE 85504
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
85466: LD_ADDR_VAR 0 4
85470: PUSH
85471: LD_VAR 0 4
85475: PPUSH
85476: LD_VAR 0 4
85480: PUSH
85481: LD_INT 1
85483: PLUS
85484: PPUSH
85485: LD_VAR 0 5
85489: PUSH
85490: LD_VAR 0 6
85494: PUSH
85495: EMPTY
85496: LIST
85497: LIST
85498: PPUSH
85499: CALL_OW 1
85503: ST_TO_ADDR
// end ;
85504: GO 85428
85506: POP
85507: POP
85508: GO 85408
85510: POP
85511: POP
// end ;
85512: LD_VAR 0 4
85516: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
85517: LD_INT 0
85519: PPUSH
85520: PPUSH
85521: PPUSH
85522: PPUSH
85523: PPUSH
85524: PPUSH
85525: PPUSH
85526: PPUSH
// if not units then
85527: LD_VAR 0 1
85531: NOT
85532: IFFALSE 85536
// exit ;
85534: GO 85961
// result := UnitFilter ( units , [ f_ok ] ) ;
85536: LD_ADDR_VAR 0 3
85540: PUSH
85541: LD_VAR 0 1
85545: PPUSH
85546: LD_INT 50
85548: PUSH
85549: EMPTY
85550: LIST
85551: PPUSH
85552: CALL_OW 72
85556: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
85557: LD_ADDR_VAR 0 8
85561: PUSH
85562: LD_VAR 0 1
85566: PUSH
85567: LD_INT 1
85569: ARRAY
85570: PPUSH
85571: CALL_OW 255
85575: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
85576: LD_ADDR_VAR 0 10
85580: PUSH
85581: LD_INT 29
85583: PUSH
85584: LD_EXP 52
85588: PUSH
85589: EMPTY
85590: LIST
85591: LIST
85592: ST_TO_ADDR
// if not result then
85593: LD_VAR 0 3
85597: NOT
85598: IFFALSE 85602
// exit ;
85600: GO 85961
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
85602: LD_ADDR_VAR 0 5
85606: PUSH
85607: LD_INT 81
85609: PUSH
85610: LD_VAR 0 8
85614: PUSH
85615: EMPTY
85616: LIST
85617: LIST
85618: PPUSH
85619: CALL_OW 69
85623: ST_TO_ADDR
// for i in result do
85624: LD_ADDR_VAR 0 4
85628: PUSH
85629: LD_VAR 0 3
85633: PUSH
85634: FOR_IN
85635: IFFALSE 85959
// begin tag := GetTag ( i ) + 1 ;
85637: LD_ADDR_VAR 0 9
85641: PUSH
85642: LD_VAR 0 4
85646: PPUSH
85647: CALL_OW 110
85651: PUSH
85652: LD_INT 1
85654: PLUS
85655: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
85656: LD_ADDR_VAR 0 7
85660: PUSH
85661: LD_VAR 0 4
85665: PPUSH
85666: CALL_OW 250
85670: PPUSH
85671: LD_VAR 0 4
85675: PPUSH
85676: CALL_OW 251
85680: PPUSH
85681: LD_INT 6
85683: PPUSH
85684: CALL 85259 0 3
85688: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
85689: LD_VAR 0 7
85693: PUSH
85694: LD_VAR 0 4
85698: PPUSH
85699: CALL_OW 264
85703: PUSH
85704: LD_VAR 0 10
85708: IN
85709: NOT
85710: AND
85711: IFFALSE 85750
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
85713: LD_VAR 0 4
85717: PPUSH
85718: LD_VAR 0 7
85722: PUSH
85723: LD_INT 1
85725: ARRAY
85726: PUSH
85727: LD_INT 1
85729: ARRAY
85730: PPUSH
85731: LD_VAR 0 7
85735: PUSH
85736: LD_INT 1
85738: ARRAY
85739: PUSH
85740: LD_INT 2
85742: ARRAY
85743: PPUSH
85744: CALL_OW 116
85748: GO 85957
// if path > tag then
85750: LD_VAR 0 2
85754: PUSH
85755: LD_VAR 0 9
85759: GREATER
85760: IFFALSE 85927
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
85762: LD_ADDR_VAR 0 6
85766: PUSH
85767: LD_VAR 0 5
85771: PPUSH
85772: LD_INT 91
85774: PUSH
85775: LD_VAR 0 4
85779: PUSH
85780: LD_INT 12
85782: PUSH
85783: EMPTY
85784: LIST
85785: LIST
85786: LIST
85787: PPUSH
85788: CALL_OW 72
85792: ST_TO_ADDR
// if nearEnemy then
85793: LD_VAR 0 6
85797: IFFALSE 85825
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
85799: LD_VAR 0 4
85803: PPUSH
85804: LD_VAR 0 6
85808: PPUSH
85809: LD_VAR 0 4
85813: PPUSH
85814: CALL_OW 74
85818: PPUSH
85819: CALL_OW 115
85823: GO 85925
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
85825: LD_VAR 0 4
85829: PPUSH
85830: LD_VAR 0 2
85834: PUSH
85835: LD_VAR 0 9
85839: ARRAY
85840: PUSH
85841: LD_INT 1
85843: ARRAY
85844: PPUSH
85845: LD_VAR 0 2
85849: PUSH
85850: LD_VAR 0 9
85854: ARRAY
85855: PUSH
85856: LD_INT 2
85858: ARRAY
85859: PPUSH
85860: CALL_OW 297
85864: PUSH
85865: LD_INT 6
85867: GREATER
85868: IFFALSE 85911
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
85870: LD_VAR 0 4
85874: PPUSH
85875: LD_VAR 0 2
85879: PUSH
85880: LD_VAR 0 9
85884: ARRAY
85885: PUSH
85886: LD_INT 1
85888: ARRAY
85889: PPUSH
85890: LD_VAR 0 2
85894: PUSH
85895: LD_VAR 0 9
85899: ARRAY
85900: PUSH
85901: LD_INT 2
85903: ARRAY
85904: PPUSH
85905: CALL_OW 114
85909: GO 85925
// SetTag ( i , tag ) ;
85911: LD_VAR 0 4
85915: PPUSH
85916: LD_VAR 0 9
85920: PPUSH
85921: CALL_OW 109
// end else
85925: GO 85957
// if enemy then
85927: LD_VAR 0 5
85931: IFFALSE 85957
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
85933: LD_VAR 0 4
85937: PPUSH
85938: LD_VAR 0 5
85942: PPUSH
85943: LD_VAR 0 4
85947: PPUSH
85948: CALL_OW 74
85952: PPUSH
85953: CALL_OW 115
// end ;
85957: GO 85634
85959: POP
85960: POP
// end ;
85961: LD_VAR 0 3
85965: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
85966: LD_INT 0
85968: PPUSH
85969: PPUSH
85970: PPUSH
// if not unit or IsInUnit ( unit ) then
85971: LD_VAR 0 1
85975: NOT
85976: PUSH
85977: LD_VAR 0 1
85981: PPUSH
85982: CALL_OW 310
85986: OR
85987: IFFALSE 85991
// exit ;
85989: GO 86082
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
85991: LD_ADDR_VAR 0 4
85995: PUSH
85996: LD_VAR 0 1
86000: PPUSH
86001: CALL_OW 250
86005: PPUSH
86006: LD_VAR 0 2
86010: PPUSH
86011: LD_INT 1
86013: PPUSH
86014: CALL_OW 272
86018: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
86019: LD_ADDR_VAR 0 5
86023: PUSH
86024: LD_VAR 0 1
86028: PPUSH
86029: CALL_OW 251
86033: PPUSH
86034: LD_VAR 0 2
86038: PPUSH
86039: LD_INT 1
86041: PPUSH
86042: CALL_OW 273
86046: ST_TO_ADDR
// if ValidHex ( x , y ) then
86047: LD_VAR 0 4
86051: PPUSH
86052: LD_VAR 0 5
86056: PPUSH
86057: CALL_OW 488
86061: IFFALSE 86082
// ComTurnXY ( unit , x , y ) ;
86063: LD_VAR 0 1
86067: PPUSH
86068: LD_VAR 0 4
86072: PPUSH
86073: LD_VAR 0 5
86077: PPUSH
86078: CALL_OW 118
// end ;
86082: LD_VAR 0 3
86086: RET
// export function SeeUnits ( side , units ) ; var i ; begin
86087: LD_INT 0
86089: PPUSH
86090: PPUSH
// result := false ;
86091: LD_ADDR_VAR 0 3
86095: PUSH
86096: LD_INT 0
86098: ST_TO_ADDR
// if not units then
86099: LD_VAR 0 2
86103: NOT
86104: IFFALSE 86108
// exit ;
86106: GO 86153
// for i in units do
86108: LD_ADDR_VAR 0 4
86112: PUSH
86113: LD_VAR 0 2
86117: PUSH
86118: FOR_IN
86119: IFFALSE 86151
// if See ( side , i ) then
86121: LD_VAR 0 1
86125: PPUSH
86126: LD_VAR 0 4
86130: PPUSH
86131: CALL_OW 292
86135: IFFALSE 86149
// begin result := true ;
86137: LD_ADDR_VAR 0 3
86141: PUSH
86142: LD_INT 1
86144: ST_TO_ADDR
// exit ;
86145: POP
86146: POP
86147: GO 86153
// end ;
86149: GO 86118
86151: POP
86152: POP
// end ;
86153: LD_VAR 0 3
86157: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
86158: LD_INT 0
86160: PPUSH
86161: PPUSH
86162: PPUSH
86163: PPUSH
// if not unit or not points then
86164: LD_VAR 0 1
86168: NOT
86169: PUSH
86170: LD_VAR 0 2
86174: NOT
86175: OR
86176: IFFALSE 86180
// exit ;
86178: GO 86270
// dist := 99999 ;
86180: LD_ADDR_VAR 0 5
86184: PUSH
86185: LD_INT 99999
86187: ST_TO_ADDR
// for i in points do
86188: LD_ADDR_VAR 0 4
86192: PUSH
86193: LD_VAR 0 2
86197: PUSH
86198: FOR_IN
86199: IFFALSE 86268
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
86201: LD_ADDR_VAR 0 6
86205: PUSH
86206: LD_VAR 0 1
86210: PPUSH
86211: LD_VAR 0 4
86215: PUSH
86216: LD_INT 1
86218: ARRAY
86219: PPUSH
86220: LD_VAR 0 4
86224: PUSH
86225: LD_INT 2
86227: ARRAY
86228: PPUSH
86229: CALL_OW 297
86233: ST_TO_ADDR
// if tmpDist < dist then
86234: LD_VAR 0 6
86238: PUSH
86239: LD_VAR 0 5
86243: LESS
86244: IFFALSE 86266
// begin result := i ;
86246: LD_ADDR_VAR 0 3
86250: PUSH
86251: LD_VAR 0 4
86255: ST_TO_ADDR
// dist := tmpDist ;
86256: LD_ADDR_VAR 0 5
86260: PUSH
86261: LD_VAR 0 6
86265: ST_TO_ADDR
// end ; end ;
86266: GO 86198
86268: POP
86269: POP
// end ; end_of_file
86270: LD_VAR 0 3
86274: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86275: LD_VAR 0 1
86279: PUSH
86280: LD_INT 200
86282: DOUBLE
86283: GREATEREQUAL
86284: IFFALSE 86292
86286: LD_INT 299
86288: DOUBLE
86289: LESSEQUAL
86290: IFTRUE 86294
86292: GO 86326
86294: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86295: LD_VAR 0 1
86299: PPUSH
86300: LD_VAR 0 2
86304: PPUSH
86305: LD_VAR 0 3
86309: PPUSH
86310: LD_VAR 0 4
86314: PPUSH
86315: LD_VAR 0 5
86319: PPUSH
86320: CALL 41978 0 5
86324: GO 86403
86326: LD_INT 300
86328: DOUBLE
86329: GREATEREQUAL
86330: IFFALSE 86338
86332: LD_INT 399
86334: DOUBLE
86335: LESSEQUAL
86336: IFTRUE 86340
86338: GO 86402
86340: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86341: LD_VAR 0 1
86345: PPUSH
86346: LD_VAR 0 2
86350: PPUSH
86351: LD_VAR 0 3
86355: PPUSH
86356: LD_VAR 0 4
86360: PPUSH
86361: LD_VAR 0 5
86365: PPUSH
86366: LD_VAR 0 6
86370: PPUSH
86371: LD_VAR 0 7
86375: PPUSH
86376: LD_VAR 0 8
86380: PPUSH
86381: LD_VAR 0 9
86385: PPUSH
86386: LD_VAR 0 10
86390: PPUSH
86391: LD_VAR 0 11
86395: PPUSH
86396: CALL 39620 0 11
86400: GO 86403
86402: POP
// end ;
86403: PPOPN 11
86405: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86406: LD_VAR 0 1
86410: PPUSH
86411: LD_VAR 0 2
86415: PPUSH
86416: LD_VAR 0 3
86420: PPUSH
86421: LD_VAR 0 4
86425: PPUSH
86426: LD_VAR 0 5
86430: PPUSH
86431: CALL 41714 0 5
// end ; end_of_file
86435: PPOPN 5
86437: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
86438: LD_VAR 0 1
86442: PPUSH
86443: LD_VAR 0 2
86447: PPUSH
86448: LD_VAR 0 3
86452: PPUSH
86453: LD_VAR 0 4
86457: PPUSH
86458: LD_VAR 0 5
86462: PPUSH
86463: LD_VAR 0 6
86467: PPUSH
86468: CALL 27313 0 6
// end ;
86472: PPOPN 6
86474: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
86475: CALL 27288 0 0
// end ;
86479: PPOPN 1
86481: END
