// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 , macmilan_squad ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// mission_prefix := 08_ ;
  15: LD_ADDR_EXP 43
  19: PUSH
  20: LD_STRING 08_
  22: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  23: LD_ADDR_EXP 44
  27: PUSH
  28: LD_STRING 07c_
  30: ST_TO_ADDR
// JMMArrive = 0 ;
  31: LD_ADDR_EXP 39
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// SikorskyArrive = 0 ;
  39: LD_ADDR_EXP 18
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  47: LD_ADDR_EXP 19
  51: PUSH
  52: LD_INT 35
  54: ST_TO_ADDR
// SikorskyAI = 0 ;
  55: LD_ADDR_EXP 20
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// SikorskyStatus = 0 ;
  63: LD_ADDR_EXP 21
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// firstAttack = 0 ;
  71: LD_ADDR_EXP 33
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// secondAttack = 0 ;
  79: LD_ADDR_EXP 34
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// startCutscene = 1 ;
  87: LD_ADDR_EXP 38
  91: PUSH
  92: LD_INT 1
  94: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  95: LD_ADDR_EXP 12
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 0
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// russianAI = 0 ;
 111: LD_ADDR_EXP 27
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// escapeAvalaible = 0 ;
 126: LD_ADDR_EXP 36
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// defenders_list = [ ] ;
 134: LD_ADDR_EXP 32
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// varEvent1 = 0 ;
 141: LD_ADDR_EXP 41
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// timerStatus = 0 ;
 149: LD_ADDR_EXP 35
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 157: LD_ADDR_EXP 40
 161: PUSH
 162: LD_INT 18
 164: PUSH
 165: LD_INT 17
 167: PUSH
 168: LD_INT 15
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// debugMode = 0 ;
 182: LD_ADDR_EXP 45
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// PrepareDifficulty ;
 190: CALL 7730 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 194: LD_INT 43
 196: PPUSH
 197: LD_INT 22
 199: PPUSH
 200: LD_INT 1
 202: PPUSH
 203: LD_INT 333
 205: NEG
 206: PPUSH
 207: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 211: LD_INT 43
 213: PPUSH
 214: LD_INT 22
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 331
// PrepareGammaBase ;
 224: CALL 2635 0 0
// PrepareHeroes ;
 228: CALL 571 0 0
// PrepareRussianCommander ;
 232: CALL 6586 0 0
// PrepareRussians ;
 236: CALL 6904 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 240: LD_INT 22
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 25
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 69
 268: PPUSH
 269: LD_INT 0
 271: PPUSH
 272: LD_INT 90
 274: PPUSH
 275: LD_INT 86
 277: PPUSH
 278: LD_INT 3
 280: PPUSH
 281: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 285: LD_INT 3
 287: PPUSH
 288: LD_INT 24
 290: PPUSH
 291: LD_INT 3
 293: PPUSH
 294: LD_EXP 25
 298: PPUSH
 299: LD_EXP 26
 303: PPUSH
 304: CALL_OW 12
 308: PPUSH
 309: LD_INT 6
 311: PPUSH
 312: LD_INT 4
 314: PPUSH
 315: CALL 9140 0 6
// PrepareCutsceneAttack ;
 319: CALL 6638 0 0
// end ;
 323: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 324: LD_INT 22
 326: PUSH
 327: LD_INT 1
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: PUSH
 334: LD_INT 34
 336: PUSH
 337: LD_INT 6
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: PUSH
 353: LD_INT 6
 355: GREATEREQUAL
 356: IFFALSE 368
 358: GO 360
 360: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 361: LD_STRING ACH_ARMOR
 363: PPUSH
 364: CALL_OW 543
 368: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 369: LD_EXP 45
 373: PUSH
 374: LD_INT 1
 376: EQUAL
 377: IFFALSE 568
 379: GO 381
 381: DISABLE
 382: LD_INT 0
 384: PPUSH
// begin enable ;
 385: ENABLE
// fogoff ( true ) ;
 386: LD_INT 1
 388: PPUSH
 389: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 393: LD_ADDR_VAR 0 1
 397: PUSH
 398: LD_INT 22
 400: PUSH
 401: LD_INT 1
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: PUSH
 408: LD_INT 21
 410: PUSH
 411: LD_INT 1
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PPUSH
 422: CALL_OW 69
 426: PUSH
 427: FOR_IN
 428: IFFALSE 444
// SetLives ( i , 1000 ) ;
 430: LD_VAR 0 1
 434: PPUSH
 435: LD_INT 1000
 437: PPUSH
 438: CALL_OW 234
 442: GO 427
 444: POP
 445: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 446: LD_ADDR_VAR 0 1
 450: PUSH
 451: LD_INT 22
 453: PUSH
 454: LD_INT 1
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PUSH
 461: LD_INT 30
 463: PUSH
 464: LD_INT 1
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PPUSH
 475: CALL_OW 69
 479: PUSH
 480: FOR_IN
 481: IFFALSE 505
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 483: LD_VAR 0 1
 487: PPUSH
 488: CALL_OW 274
 492: PPUSH
 493: LD_INT 1
 495: PPUSH
 496: LD_INT 9999
 498: PPUSH
 499: CALL_OW 277
 503: GO 480
 505: POP
 506: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 507: LD_ADDR_VAR 0 1
 511: PUSH
 512: LD_INT 22
 514: PUSH
 515: LD_INT 1
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PUSH
 522: LD_INT 30
 524: PUSH
 525: LD_INT 1
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PPUSH
 536: CALL_OW 69
 540: PUSH
 541: FOR_IN
 542: IFFALSE 566
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 544: LD_VAR 0 1
 548: PPUSH
 549: CALL_OW 274
 553: PPUSH
 554: LD_INT 2
 556: PPUSH
 557: LD_INT 9999
 559: PPUSH
 560: CALL_OW 277
 564: GO 541
 566: POP
 567: POP
// end ; end_of_file
 568: PPOPN 1
 570: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
 577: PPUSH
 578: PPUSH
 579: PPUSH
 580: PPUSH
 581: PPUSH
 582: PPUSH
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
 587: PPUSH
// uc_side = 1 ;
 588: LD_ADDR_OWVAR 20
 592: PUSH
 593: LD_INT 1
 595: ST_TO_ADDR
// uc_nation = 1 ;
 596: LD_ADDR_OWVAR 21
 600: PUSH
 601: LD_INT 1
 603: ST_TO_ADDR
// if gammaCommander = 1 then
 604: LD_EXP 12
 608: PUSH
 609: LD_INT 1
 611: EQUAL
 612: IFFALSE 663
// begin Donaldson = PrepareUnit ( Donaldson , true , 04_ ) ;
 614: LD_ADDR_EXP 3
 618: PUSH
 619: LD_STRING Donaldson
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: LD_STRING 04_
 627: PPUSH
 628: CALL 44320 0 3
 632: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 633: LD_EXP 3
 637: PPUSH
 638: LD_INT 54
 640: PPUSH
 641: LD_INT 25
 643: PPUSH
 644: LD_INT 8
 646: PPUSH
 647: LD_INT 0
 649: PPUSH
 650: CALL_OW 50
// ComHold ( Donaldson ) ;
 654: LD_EXP 3
 658: PPUSH
 659: CALL_OW 140
// end ; if gammaCommander = 2 then
 663: LD_EXP 12
 667: PUSH
 668: LD_INT 2
 670: EQUAL
 671: IFFALSE 722
// begin Brown = PrepareUnit ( Brown , true , 04_ ) ;
 673: LD_ADDR_EXP 2
 677: PUSH
 678: LD_STRING Brown
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: LD_STRING 04_
 686: PPUSH
 687: CALL 44320 0 3
 691: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 692: LD_EXP 2
 696: PPUSH
 697: LD_INT 54
 699: PPUSH
 700: LD_INT 25
 702: PPUSH
 703: LD_INT 8
 705: PPUSH
 706: LD_INT 0
 708: PPUSH
 709: CALL_OW 50
// ComHold ( Brown ) ;
 713: LD_EXP 2
 717: PPUSH
 718: CALL_OW 140
// end ; if gammaCommander = 3 then
 722: LD_EXP 12
 726: PUSH
 727: LD_INT 3
 729: EQUAL
 730: IFFALSE 781
// begin Houten = PrepareUnit ( VanHouten , false ,  ) ;
 732: LD_ADDR_EXP 13
 736: PUSH
 737: LD_STRING VanHouten
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: LD_STRING 
 745: PPUSH
 746: CALL 44320 0 3
 750: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 751: LD_EXP 13
 755: PPUSH
 756: LD_INT 54
 758: PPUSH
 759: LD_INT 25
 761: PPUSH
 762: LD_INT 8
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 50
// ComHold ( Houten ) ;
 772: LD_EXP 13
 776: PPUSH
 777: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ,  ) ;
 781: LD_ADDR_EXP 22
 785: PUSH
 786: LD_STRING Harisson
 788: PPUSH
 789: LD_INT 0
 791: PPUSH
 792: LD_STRING 
 794: PPUSH
 795: CALL 44320 0 3
 799: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 800: LD_ADDR_EXP 23
 804: PUSH
 805: LD_STRING Powell
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: LD_STRING 
 813: PPUSH
 814: CALL 44320 0 3
 818: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 819: LD_STRING 04_Lisa
 821: PUSH
 822: EMPTY
 823: LIST
 824: PPUSH
 825: CALL_OW 28
 829: PUSH
 830: LD_STRING LisaInDelta
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 30
 840: NOT
 841: AND
 842: PUSH
 843: LD_STRING 07_Lisa
 845: PUSH
 846: EMPTY
 847: LIST
 848: PPUSH
 849: CALL_OW 28
 853: NOT
 854: AND
 855: IFFALSE 894
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 857: LD_ADDR_EXP 6
 861: PUSH
 862: LD_STRING Lisa
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_STRING 04_
 870: PPUSH
 871: CALL 44320 0 3
 875: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 876: LD_ADDR_VAR 0 15
 880: PUSH
 881: LD_VAR 0 15
 885: PUSH
 886: LD_EXP 6
 890: ADD
 891: ST_TO_ADDR
// end else
 892: GO 949
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 894: LD_EXP 6
 898: NOT
 899: PUSH
 900: LD_STRING LisaIn07
 902: PPUSH
 903: LD_INT 0
 905: PPUSH
 906: CALL_OW 30
 910: NOT
 911: AND
 912: IFFALSE 949
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 914: LD_ADDR_EXP 6
 918: PUSH
 919: LD_STRING Lisa
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: LD_STRING 07_
 927: PPUSH
 928: CALL 44320 0 3
 932: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 933: LD_ADDR_VAR 0 15
 937: PUSH
 938: LD_VAR 0 15
 942: PUSH
 943: LD_EXP 6
 947: ADD
 948: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 949: LD_STRING 04_Bobby
 951: PUSH
 952: EMPTY
 953: LIST
 954: PPUSH
 955: CALL_OW 28
 959: PUSH
 960: LD_STRING BobbyInDelta
 962: PPUSH
 963: LD_INT 0
 965: PPUSH
 966: CALL_OW 30
 970: NOT
 971: AND
 972: PUSH
 973: LD_STRING 07_Bobby
 975: PUSH
 976: EMPTY
 977: LIST
 978: PPUSH
 979: CALL_OW 28
 983: NOT
 984: AND
 985: IFFALSE 1024
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 987: LD_ADDR_EXP 4
 991: PUSH
 992: LD_STRING Bobby
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_STRING 04_
1000: PPUSH
1001: CALL 44320 0 3
1005: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1006: LD_ADDR_VAR 0 15
1010: PUSH
1011: LD_VAR 0 15
1015: PUSH
1016: LD_EXP 4
1020: ADD
1021: ST_TO_ADDR
// end else
1022: GO 1079
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
1024: LD_EXP 4
1028: NOT
1029: PUSH
1030: LD_STRING BobbyIn07
1032: PPUSH
1033: LD_INT 0
1035: PPUSH
1036: CALL_OW 30
1040: NOT
1041: AND
1042: IFFALSE 1079
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
1044: LD_ADDR_EXP 4
1048: PUSH
1049: LD_STRING Bobby
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: LD_STRING 07_
1057: PPUSH
1058: CALL 44320 0 3
1062: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1063: LD_ADDR_VAR 0 15
1067: PUSH
1068: LD_VAR 0 15
1072: PUSH
1073: LD_EXP 4
1077: ADD
1078: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1079: LD_STRING 04_Cyrus
1081: PUSH
1082: EMPTY
1083: LIST
1084: PPUSH
1085: CALL_OW 28
1089: PUSH
1090: LD_STRING CyrusInDelta
1092: PPUSH
1093: LD_INT 0
1095: PPUSH
1096: CALL_OW 30
1100: NOT
1101: AND
1102: PUSH
1103: LD_STRING 07_Cyrus
1105: PUSH
1106: EMPTY
1107: LIST
1108: PPUSH
1109: CALL_OW 28
1113: NOT
1114: AND
1115: IFFALSE 1154
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
1117: LD_ADDR_EXP 5
1121: PUSH
1122: LD_STRING Cyrus
1124: PPUSH
1125: LD_INT 1
1127: PPUSH
1128: LD_STRING 04_
1130: PPUSH
1131: CALL 44320 0 3
1135: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1136: LD_ADDR_VAR 0 15
1140: PUSH
1141: LD_VAR 0 15
1145: PUSH
1146: LD_EXP 5
1150: ADD
1151: ST_TO_ADDR
// end else
1152: GO 1209
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1154: LD_EXP 5
1158: NOT
1159: PUSH
1160: LD_STRING CyrusIn07
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 30
1170: NOT
1171: AND
1172: IFFALSE 1209
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
1174: LD_ADDR_EXP 5
1178: PUSH
1179: LD_STRING Cyrus
1181: PPUSH
1182: LD_INT 1
1184: PPUSH
1185: LD_STRING 07_
1187: PPUSH
1188: CALL 44320 0 3
1192: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1193: LD_ADDR_VAR 0 15
1197: PUSH
1198: LD_VAR 0 15
1202: PUSH
1203: LD_EXP 5
1207: ADD
1208: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1209: LD_STRING 04_Brown
1211: PUSH
1212: EMPTY
1213: LIST
1214: PPUSH
1215: CALL_OW 28
1219: PUSH
1220: LD_STRING BrownInDelta
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL_OW 30
1230: NOT
1231: AND
1232: PUSH
1233: LD_STRING 07_Brown
1235: PUSH
1236: EMPTY
1237: LIST
1238: PPUSH
1239: CALL_OW 28
1243: NOT
1244: AND
1245: PUSH
1246: LD_EXP 12
1250: PUSH
1251: LD_INT 2
1253: NONEQUAL
1254: AND
1255: IFFALSE 1294
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1257: LD_ADDR_EXP 2
1261: PUSH
1262: LD_STRING Brown
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_STRING 04_
1270: PPUSH
1271: CALL 44320 0 3
1275: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1276: LD_ADDR_VAR 0 15
1280: PUSH
1281: LD_VAR 0 15
1285: PUSH
1286: LD_EXP 2
1290: ADD
1291: ST_TO_ADDR
// end else
1292: GO 1359
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1294: LD_EXP 2
1298: NOT
1299: PUSH
1300: LD_STRING BrownIn07
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL_OW 30
1310: NOT
1311: AND
1312: PUSH
1313: LD_EXP 12
1317: PUSH
1318: LD_INT 2
1320: NONEQUAL
1321: AND
1322: IFFALSE 1359
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1324: LD_ADDR_EXP 2
1328: PUSH
1329: LD_STRING Brown
1331: PPUSH
1332: LD_INT 1
1334: PPUSH
1335: LD_STRING 07_
1337: PPUSH
1338: CALL 44320 0 3
1342: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1343: LD_ADDR_VAR 0 15
1347: PUSH
1348: LD_VAR 0 15
1352: PUSH
1353: LD_EXP 2
1357: ADD
1358: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1359: LD_STRING 04_Donaldson
1361: PUSH
1362: EMPTY
1363: LIST
1364: PPUSH
1365: CALL_OW 28
1369: PUSH
1370: LD_STRING DonaldsonInDelta
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 30
1380: NOT
1381: AND
1382: PUSH
1383: LD_STRING 07_Donaldson
1385: PUSH
1386: EMPTY
1387: LIST
1388: PPUSH
1389: CALL_OW 28
1393: NOT
1394: AND
1395: PUSH
1396: LD_EXP 12
1400: PUSH
1401: LD_INT 1
1403: NONEQUAL
1404: AND
1405: IFFALSE 1444
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1407: LD_ADDR_EXP 3
1411: PUSH
1412: LD_STRING Donaldson
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: LD_STRING 04_
1420: PPUSH
1421: CALL 44320 0 3
1425: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1426: LD_ADDR_VAR 0 15
1430: PUSH
1431: LD_VAR 0 15
1435: PUSH
1436: LD_EXP 3
1440: ADD
1441: ST_TO_ADDR
// end else
1442: GO 1509
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1444: LD_EXP 3
1448: NOT
1449: PUSH
1450: LD_STRING DonaldsonIn07
1452: PPUSH
1453: LD_INT 0
1455: PPUSH
1456: CALL_OW 30
1460: NOT
1461: AND
1462: PUSH
1463: LD_EXP 12
1467: PUSH
1468: LD_INT 1
1470: NONEQUAL
1471: AND
1472: IFFALSE 1509
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1474: LD_ADDR_EXP 3
1478: PUSH
1479: LD_STRING Donaldson
1481: PPUSH
1482: LD_INT 1
1484: PPUSH
1485: LD_STRING 07_
1487: PPUSH
1488: CALL 44320 0 3
1492: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1493: LD_ADDR_VAR 0 15
1497: PUSH
1498: LD_VAR 0 15
1502: PUSH
1503: LD_EXP 3
1507: ADD
1508: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1509: LD_STRING KhatamIn07
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 30
1519: NOT
1520: IFFALSE 1557
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1522: LD_ADDR_EXP 10
1526: PUSH
1527: LD_STRING Khatam
1529: PPUSH
1530: LD_INT 1
1532: PPUSH
1533: LD_STRING 07_
1535: PPUSH
1536: CALL 44320 0 3
1540: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1541: LD_ADDR_VAR 0 15
1545: PUSH
1546: LD_VAR 0 15
1550: PUSH
1551: LD_EXP 10
1555: ADD
1556: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1557: LD_ADDR_EXP 11
1561: PUSH
1562: LD_STRING 07_othersGamma
1564: PPUSH
1565: CALL_OW 31
1569: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1570: LD_ADDR_VAR 0 14
1574: PUSH
1575: LD_INT 8
1577: PUSH
1578: LD_EXP 11
1582: MINUS
1583: ST_TO_ADDR
// if tmp then
1584: LD_VAR 0 14
1588: IFFALSE 1641
// for i = 1 to tmp do
1590: LD_ADDR_VAR 0 2
1594: PUSH
1595: DOUBLE
1596: LD_INT 1
1598: DEC
1599: ST_TO_ADDR
1600: LD_VAR 0 14
1604: PUSH
1605: FOR_TO
1606: IFFALSE 1639
// begin PrepareHuman ( false , 1 , 5 ) ;
1608: LD_INT 0
1610: PPUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_INT 5
1616: PPUSH
1617: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1621: LD_ADDR_EXP 11
1625: PUSH
1626: LD_EXP 11
1630: PUSH
1631: CALL_OW 44
1635: ADD
1636: ST_TO_ADDR
// end ;
1637: GO 1605
1639: POP
1640: POP
// if HexInfo ( 61 , 29 ) = 0 then
1641: LD_INT 61
1643: PPUSH
1644: LD_INT 29
1646: PPUSH
1647: CALL_OW 428
1651: PUSH
1652: LD_INT 0
1654: EQUAL
1655: IFFALSE 1686
// begin bc_type := b_barracks ;
1657: LD_ADDR_OWVAR 42
1661: PUSH
1662: LD_INT 5
1664: ST_TO_ADDR
// bc_level := 6 ;
1665: LD_ADDR_OWVAR 43
1669: PUSH
1670: LD_INT 6
1672: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1673: LD_INT 61
1675: PPUSH
1676: LD_INT 29
1678: PPUSH
1679: LD_INT 5
1681: PPUSH
1682: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1686: LD_ADDR_VAR 0 13
1690: PUSH
1691: LD_INT 22
1693: PUSH
1694: LD_INT 1
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 30
1703: PUSH
1704: LD_INT 31
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PPUSH
1715: CALL_OW 69
1719: ST_TO_ADDR
// for i in bun do
1720: LD_ADDR_VAR 0 2
1724: PUSH
1725: LD_VAR 0 13
1729: PUSH
1730: FOR_IN
1731: IFFALSE 1863
// begin x := GetX ( i ) ;
1733: LD_ADDR_VAR 0 3
1737: PUSH
1738: LD_VAR 0 2
1742: PPUSH
1743: CALL_OW 250
1747: ST_TO_ADDR
// y := GetY ( i ) ;
1748: LD_ADDR_VAR 0 4
1752: PUSH
1753: LD_VAR 0 2
1757: PPUSH
1758: CALL_OW 251
1762: ST_TO_ADDR
// d := GetDir ( i ) ;
1763: LD_ADDR_VAR 0 5
1767: PUSH
1768: LD_VAR 0 2
1772: PPUSH
1773: CALL_OW 254
1777: ST_TO_ADDR
// RemoveUnit ( i ) ;
1778: LD_VAR 0 2
1782: PPUSH
1783: CALL_OW 64
// bc_type := b_bunker ;
1787: LD_ADDR_OWVAR 42
1791: PUSH
1792: LD_INT 32
1794: ST_TO_ADDR
// bc_level := 6 ;
1795: LD_ADDR_OWVAR 43
1799: PUSH
1800: LD_INT 6
1802: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1803: LD_ADDR_VAR 0 6
1807: PUSH
1808: LD_VAR 0 3
1812: PPUSH
1813: LD_VAR 0 4
1817: PPUSH
1818: LD_VAR 0 5
1822: PPUSH
1823: CALL_OW 47
1827: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1828: LD_VAR 0 6
1832: PPUSH
1833: LD_INT 5
1835: PUSH
1836: LD_INT 4
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_VAR 0 2
1847: PUSH
1848: LD_INT 2
1850: MOD
1851: PUSH
1852: LD_INT 1
1854: PLUS
1855: ARRAY
1856: PPUSH
1857: CALL_OW 431
// end ;
1861: GO 1730
1863: POP
1864: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1865: LD_ADDR_VAR 0 9
1869: PUSH
1870: LD_INT 22
1872: PUSH
1873: LD_INT 1
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 30
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PPUSH
1894: CALL_OW 69
1898: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1899: LD_ADDR_VAR 0 8
1903: PUSH
1904: LD_INT 22
1906: PUSH
1907: LD_INT 1
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 2
1916: PUSH
1917: LD_INT 30
1919: PUSH
1920: LD_INT 6
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: LD_INT 30
1929: PUSH
1930: LD_INT 7
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: PUSH
1937: LD_INT 30
1939: PUSH
1940: LD_INT 8
1942: PUSH
1943: EMPTY
1944: LIST
1945: LIST
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PPUSH
1957: CALL_OW 69
1961: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1962: LD_ADDR_VAR 0 7
1966: PUSH
1967: LD_INT 22
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: LD_INT 30
1979: PUSH
1980: LD_INT 3
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 69
1995: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1996: LD_ADDR_VAR 0 12
2000: PUSH
2001: LD_INT 22
2003: PUSH
2004: LD_INT 1
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 30
2013: PUSH
2014: LD_INT 36
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PPUSH
2025: CALL_OW 69
2029: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
2030: LD_ADDR_VAR 0 13
2034: PUSH
2035: LD_INT 22
2037: PUSH
2038: LD_INT 1
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PUSH
2045: LD_INT 2
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 31
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 30
2060: PUSH
2061: LD_INT 32
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: PPUSH
2077: CALL_OW 69
2081: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
2082: LD_ADDR_VAR 0 2
2086: PUSH
2087: LD_EXP 11
2091: PUSH
2092: LD_VAR 0 15
2096: ADD
2097: PUSH
2098: FOR_IN
2099: IFFALSE 2520
// begin placed := false ;
2101: LD_ADDR_VAR 0 11
2105: PUSH
2106: LD_INT 0
2108: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2109: LD_VAR 0 2
2113: PPUSH
2114: CALL_OW 257
2118: PUSH
2119: LD_INT 1
2121: EQUAL
2122: IFFALSE 2247
// begin if UnitFilter ( bun , [ f_empty ] ) then
2124: LD_VAR 0 13
2128: PPUSH
2129: LD_INT 58
2131: PUSH
2132: EMPTY
2133: LIST
2134: PPUSH
2135: CALL_OW 72
2139: IFFALSE 2178
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2141: LD_VAR 0 2
2145: PPUSH
2146: LD_VAR 0 13
2150: PPUSH
2151: LD_INT 58
2153: PUSH
2154: EMPTY
2155: LIST
2156: PPUSH
2157: CALL_OW 72
2161: PUSH
2162: LD_INT 1
2164: ARRAY
2165: PPUSH
2166: CALL_OW 52
// placed := true ;
2170: LD_ADDR_VAR 0 11
2174: PUSH
2175: LD_INT 1
2177: ST_TO_ADDR
// end ; if arm and not placed then
2178: LD_VAR 0 9
2182: PUSH
2183: LD_VAR 0 11
2187: NOT
2188: AND
2189: IFFALSE 2247
// begin for j in arm do
2191: LD_ADDR_VAR 0 10
2195: PUSH
2196: LD_VAR 0 9
2200: PUSH
2201: FOR_IN
2202: IFFALSE 2245
// if UnitsInside ( j ) < 6 then
2204: LD_VAR 0 10
2208: PPUSH
2209: CALL_OW 313
2213: PUSH
2214: LD_INT 6
2216: LESS
2217: IFFALSE 2243
// begin PlaceHumanInUnit ( i , j ) ;
2219: LD_VAR 0 2
2223: PPUSH
2224: LD_VAR 0 10
2228: PPUSH
2229: CALL_OW 52
// placed := true ;
2233: LD_ADDR_VAR 0 11
2237: PUSH
2238: LD_INT 1
2240: ST_TO_ADDR
// break ;
2241: GO 2245
// end ;
2243: GO 2201
2245: POP
2246: POP
// end ; end ; if GetClass ( i ) = 2 then
2247: LD_VAR 0 2
2251: PPUSH
2252: CALL_OW 257
2256: PUSH
2257: LD_INT 2
2259: EQUAL
2260: IFFALSE 2293
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 52
2269: PPUSH
2270: LD_INT 20
2272: PPUSH
2273: LD_INT 6
2275: PPUSH
2276: LD_INT 0
2278: PPUSH
2279: CALL_OW 50
// placed := true ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_INT 1
2290: ST_TO_ADDR
// continue ;
2291: GO 2098
// end ; if GetClass ( i ) = 3 then
2293: LD_VAR 0 2
2297: PPUSH
2298: CALL_OW 257
2302: PUSH
2303: LD_INT 3
2305: EQUAL
2306: IFFALSE 2410
// if fac then
2308: LD_VAR 0 7
2312: IFFALSE 2410
// begin if ct then
2314: LD_VAR 0 12
2318: IFFALSE 2346
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: LD_VAR 0 12
2329: PUSH
2330: LD_INT 1
2332: ARRAY
2333: PPUSH
2334: CALL_OW 52
// placed := true ;
2338: LD_ADDR_VAR 0 11
2342: PUSH
2343: LD_INT 1
2345: ST_TO_ADDR
// end ; if placed then
2346: LD_VAR 0 11
2350: IFFALSE 2354
// continue ;
2352: GO 2098
// for j in fac do
2354: LD_ADDR_VAR 0 10
2358: PUSH
2359: LD_VAR 0 7
2363: PUSH
2364: FOR_IN
2365: IFFALSE 2408
// if UnitsInside ( j ) < 6 then
2367: LD_VAR 0 10
2371: PPUSH
2372: CALL_OW 313
2376: PUSH
2377: LD_INT 6
2379: LESS
2380: IFFALSE 2406
// begin PlaceHumanInUnit ( i , j ) ;
2382: LD_VAR 0 2
2386: PPUSH
2387: LD_VAR 0 10
2391: PPUSH
2392: CALL_OW 52
// placed := true ;
2396: LD_ADDR_VAR 0 11
2400: PUSH
2401: LD_INT 1
2403: ST_TO_ADDR
// break ;
2404: GO 2408
// end ;
2406: GO 2364
2408: POP
2409: POP
// end ; if GetClass ( i ) = 4 then
2410: LD_VAR 0 2
2414: PPUSH
2415: CALL_OW 257
2419: PUSH
2420: LD_INT 4
2422: EQUAL
2423: IFFALSE 2487
// if lab then
2425: LD_VAR 0 8
2429: IFFALSE 2487
// begin for j in lab do
2431: LD_ADDR_VAR 0 10
2435: PUSH
2436: LD_VAR 0 8
2440: PUSH
2441: FOR_IN
2442: IFFALSE 2485
// if UnitsInside ( j ) < 6 then
2444: LD_VAR 0 10
2448: PPUSH
2449: CALL_OW 313
2453: PUSH
2454: LD_INT 6
2456: LESS
2457: IFFALSE 2483
// begin PlaceHumanInUnit ( i , j ) ;
2459: LD_VAR 0 2
2463: PPUSH
2464: LD_VAR 0 10
2468: PPUSH
2469: CALL_OW 52
// placed := true ;
2473: LD_ADDR_VAR 0 11
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// break ;
2481: GO 2485
// end ;
2483: GO 2441
2485: POP
2486: POP
// end ; if not placed then
2487: LD_VAR 0 11
2491: NOT
2492: IFFALSE 2518
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_INT 5
2501: PPUSH
2502: LD_INT 0
2504: PPUSH
2505: CALL_OW 49
// ComHold ( i ) ;
2509: LD_VAR 0 2
2513: PPUSH
2514: CALL_OW 140
// end ; end ;
2518: GO 2098
2520: POP
2521: POP
// if ct then
2522: LD_VAR 0 12
2526: IFFALSE 2630
// if UnitsInside ( ct [ 1 ] ) then
2528: LD_VAR 0 12
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PPUSH
2537: CALL_OW 313
2541: IFFALSE 2630
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2543: LD_ADDR_VAR 0 2
2547: PUSH
2548: LD_INT 22
2550: PUSH
2551: LD_INT 1
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: PUSH
2558: LD_INT 33
2560: PUSH
2561: LD_INT 2
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PPUSH
2572: CALL_OW 69
2576: PUSH
2577: FOR_IN
2578: IFFALSE 2628
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2580: LD_VAR 0 2
2584: PPUSH
2585: LD_VAR 0 12
2589: PUSH
2590: LD_INT 1
2592: ARRAY
2593: PPUSH
2594: CALL_OW 313
2598: PUSH
2599: LD_INT 1
2601: PPUSH
2602: LD_VAR 0 12
2606: PUSH
2607: LD_INT 1
2609: ARRAY
2610: PPUSH
2611: CALL_OW 313
2615: PPUSH
2616: CALL_OW 12
2620: ARRAY
2621: PPUSH
2622: CALL_OW 135
2626: GO 2577
2628: POP
2629: POP
// end ; end ;
2630: LD_VAR 0 1
2634: RET
// export function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2635: LD_INT 0
2637: PPUSH
2638: PPUSH
2639: PPUSH
2640: PPUSH
2641: PPUSH
2642: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2643: LD_INT 71
2645: PPUSH
2646: LD_INT 5
2648: PPUSH
2649: LD_INT 1
2651: PPUSH
2652: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2656: LD_ADDR_VAR 0 2
2660: PUSH
2661: LD_STRING GammaBase
2663: PPUSH
2664: EMPTY
2665: PPUSH
2666: CALL_OW 30
2670: ST_TO_ADDR
// if not blist then
2671: LD_VAR 0 2
2675: NOT
2676: IFFALSE 2716
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2678: LD_ADDR_VAR 0 2
2682: PUSH
2683: LD_INT 1
2685: PUSH
2686: LD_INT 52
2688: PUSH
2689: LD_INT 12
2691: PUSH
2692: LD_INT 3
2694: PUSH
2695: LD_INT 3
2697: PUSH
2698: LD_INT 0
2700: PUSH
2701: LD_INT 0
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: LIST
2710: LIST
2711: LIST
2712: PUSH
2713: EMPTY
2714: LIST
2715: ST_TO_ADDR
// uc_side := 1 ;
2716: LD_ADDR_OWVAR 20
2720: PUSH
2721: LD_INT 1
2723: ST_TO_ADDR
// uc_nation := 1 ;
2724: LD_ADDR_OWVAR 21
2728: PUSH
2729: LD_INT 1
2731: ST_TO_ADDR
// bc_kind1 := - 1 ;
2732: LD_ADDR_OWVAR 44
2736: PUSH
2737: LD_INT 1
2739: NEG
2740: ST_TO_ADDR
// bc_kind2 := - 1 ;
2741: LD_ADDR_OWVAR 45
2745: PUSH
2746: LD_INT 1
2748: NEG
2749: ST_TO_ADDR
// for i in blist do
2750: LD_ADDR_VAR 0 3
2754: PUSH
2755: LD_VAR 0 2
2759: PUSH
2760: FOR_IN
2761: IFFALSE 3037
// begin bc_type := i [ 1 ] ;
2763: LD_ADDR_OWVAR 42
2767: PUSH
2768: LD_VAR 0 3
2772: PUSH
2773: LD_INT 1
2775: ARRAY
2776: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2777: LD_ADDR_OWVAR 43
2781: PUSH
2782: LD_VAR 0 3
2786: PUSH
2787: LD_INT 5
2789: ARRAY
2790: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2791: LD_OWVAR 42
2795: PUSH
2796: LD_INT 6
2798: PUSH
2799: LD_INT 7
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: IN
2806: IFFALSE 2872
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2808: LD_STRING 06_remoteVehs_1
2810: PPUSH
2811: LD_INT 0
2813: PPUSH
2814: CALL_OW 30
2818: NOT
2819: IFFALSE 2847
// begin bc_type := b_lab_full ;
2821: LD_ADDR_OWVAR 42
2825: PUSH
2826: LD_INT 8
2828: ST_TO_ADDR
// bc_kind1 := 10 ;
2829: LD_ADDR_OWVAR 44
2833: PUSH
2834: LD_INT 10
2836: ST_TO_ADDR
// bc_kind2 := 15 ;
2837: LD_ADDR_OWVAR 45
2841: PUSH
2842: LD_INT 15
2844: ST_TO_ADDR
// end else
2845: GO 2872
// begin bc_type := b_lab_half ;
2847: LD_ADDR_OWVAR 42
2851: PUSH
2852: LD_INT 7
2854: ST_TO_ADDR
// bc_kind1 := 10 ;
2855: LD_ADDR_OWVAR 44
2859: PUSH
2860: LD_INT 10
2862: ST_TO_ADDR
// bc_kind2 := - 1 ;
2863: LD_ADDR_OWVAR 45
2867: PUSH
2868: LD_INT 1
2870: NEG
2871: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2872: LD_OWVAR 42
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: IFFALSE 2890
// bc_type := b_factory ;
2882: LD_ADDR_OWVAR 42
2886: PUSH
2887: LD_INT 3
2889: ST_TO_ADDR
// if bc_type = b_depot then
2890: LD_OWVAR 42
2894: PUSH
2895: LD_INT 0
2897: EQUAL
2898: IFFALSE 2947
// begin bc_type := b_warehouse ;
2900: LD_ADDR_OWVAR 42
2904: PUSH
2905: LD_INT 1
2907: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2908: LD_ADDR_EXP 37
2912: PUSH
2913: LD_VAR 0 3
2917: PUSH
2918: LD_INT 2
2920: ARRAY
2921: PPUSH
2922: LD_VAR 0 3
2926: PUSH
2927: LD_INT 3
2929: ARRAY
2930: PPUSH
2931: LD_VAR 0 3
2935: PUSH
2936: LD_INT 4
2938: ARRAY
2939: PPUSH
2940: CALL_OW 47
2944: ST_TO_ADDR
// continue ;
2945: GO 2760
// end ; if bc_type = b_armoury then
2947: LD_OWVAR 42
2951: PUSH
2952: LD_INT 4
2954: EQUAL
2955: IFFALSE 2965
// bc_type = b_barracks ;
2957: LD_ADDR_OWVAR 42
2961: PUSH
2962: LD_INT 5
2964: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2965: LD_ADDR_VAR 0 4
2969: PUSH
2970: LD_VAR 0 3
2974: PUSH
2975: LD_INT 2
2977: ARRAY
2978: PPUSH
2979: LD_VAR 0 3
2983: PUSH
2984: LD_INT 3
2986: ARRAY
2987: PPUSH
2988: LD_VAR 0 3
2992: PUSH
2993: LD_INT 4
2995: ARRAY
2996: PPUSH
2997: CALL_OW 47
3001: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
3002: LD_VAR 0 4
3006: PPUSH
3007: CALL_OW 266
3011: PUSH
3012: LD_INT 32
3014: EQUAL
3015: IFFALSE 3035
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3017: LD_VAR 0 4
3021: PPUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_INT 7
3029: ARRAY
3030: PPUSH
3031: CALL_OW 431
// end ;
3035: GO 2760
3037: POP
3038: POP
// if not amDepot then
3039: LD_EXP 37
3043: NOT
3044: IFFALSE 3081
// begin bc_type := b_warehouse ;
3046: LD_ADDR_OWVAR 42
3050: PUSH
3051: LD_INT 1
3053: ST_TO_ADDR
// bc_level := 6 ;
3054: LD_ADDR_OWVAR 43
3058: PUSH
3059: LD_INT 6
3061: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
3062: LD_ADDR_EXP 37
3066: PUSH
3067: LD_INT 52
3069: PPUSH
3070: LD_INT 12
3072: PPUSH
3073: LD_INT 3
3075: PPUSH
3076: CALL_OW 47
3080: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
3081: LD_EXP 37
3085: PPUSH
3086: LD_STRING gamma
3088: PPUSH
3089: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
3093: LD_EXP 37
3097: PPUSH
3098: CALL_OW 274
3102: PPUSH
3103: LD_INT 1
3105: PPUSH
3106: LD_INT 500
3108: PUSH
3109: LD_INT 420
3111: PUSH
3112: LD_INT 350
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: LIST
3119: PUSH
3120: LD_OWVAR 67
3124: ARRAY
3125: PPUSH
3126: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3130: LD_EXP 37
3134: PPUSH
3135: CALL_OW 274
3139: PPUSH
3140: LD_INT 2
3142: PPUSH
3143: LD_INT 200
3145: PPUSH
3146: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3150: LD_INT 22
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 30
3162: PUSH
3163: LD_INT 3
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: PPUSH
3174: CALL_OW 69
3178: IFFALSE 3426
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3180: LD_ADDR_VAR 0 4
3184: PUSH
3185: LD_INT 22
3187: PUSH
3188: LD_INT 1
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: LD_INT 30
3197: PUSH
3198: LD_INT 3
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PPUSH
3209: CALL_OW 69
3213: PUSH
3214: LD_INT 1
3216: ARRAY
3217: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3218: LD_ADDR_VAR 0 6
3222: PUSH
3223: LD_VAR 0 4
3227: PPUSH
3228: CALL_OW 250
3232: PPUSH
3233: LD_VAR 0 4
3237: PPUSH
3238: CALL_OW 251
3242: PPUSH
3243: LD_VAR 0 4
3247: PPUSH
3248: CALL_OW 254
3252: PPUSH
3253: CALL 78694 0 3
3257: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3258: LD_ADDR_VAR 0 2
3262: PUSH
3263: LD_INT 19
3265: PUSH
3266: LD_INT 17
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3273: LD_STRING 06_remoteVehs_1
3275: PPUSH
3276: LD_INT 0
3278: PPUSH
3279: CALL_OW 30
3283: IFFALSE 3306
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3285: LD_ADDR_VAR 0 2
3289: PUSH
3290: LD_VAR 0 2
3294: PPUSH
3295: LD_INT 1
3297: PPUSH
3298: LD_INT 22
3300: PPUSH
3301: CALL_OW 2
3305: ST_TO_ADDR
// for i in tmp do
3306: LD_ADDR_VAR 0 3
3310: PUSH
3311: LD_VAR 0 6
3315: PUSH
3316: FOR_IN
3317: IFFALSE 3424
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3319: LD_VAR 0 3
3323: PUSH
3324: LD_INT 1
3326: ARRAY
3327: PPUSH
3328: LD_VAR 0 3
3332: PUSH
3333: LD_INT 2
3335: ARRAY
3336: PPUSH
3337: CALL_OW 428
3341: PUSH
3342: LD_INT 0
3344: EQUAL
3345: IFFALSE 3422
// begin bc_type := blist [ 1 ] ;
3347: LD_ADDR_OWVAR 42
3351: PUSH
3352: LD_VAR 0 2
3356: PUSH
3357: LD_INT 1
3359: ARRAY
3360: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3361: LD_VAR 0 3
3365: PUSH
3366: LD_INT 1
3368: ARRAY
3369: PPUSH
3370: LD_VAR 0 3
3374: PUSH
3375: LD_INT 2
3377: ARRAY
3378: PPUSH
3379: LD_VAR 0 3
3383: PUSH
3384: LD_INT 3
3386: ARRAY
3387: PPUSH
3388: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3392: LD_ADDR_VAR 0 2
3396: PUSH
3397: LD_VAR 0 2
3401: PPUSH
3402: LD_INT 1
3404: PPUSH
3405: CALL_OW 3
3409: ST_TO_ADDR
// if blist = 0 then
3410: LD_VAR 0 2
3414: PUSH
3415: LD_INT 0
3417: EQUAL
3418: IFFALSE 3422
// break ;
3420: GO 3424
// end ;
3422: GO 3316
3424: POP
3425: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3426: LD_STRING 06_remoteVehs_1
3428: PPUSH
3429: LD_INT 0
3431: PPUSH
3432: CALL_OW 30
3436: IFFALSE 3895
// begin bc_type = 36 ;
3438: LD_ADDR_OWVAR 42
3442: PUSH
3443: LD_INT 36
3445: ST_TO_ADDR
// bc_level = 4 ;
3446: LD_ADDR_OWVAR 43
3450: PUSH
3451: LD_INT 4
3453: ST_TO_ADDR
// if CanBeBuiltCost ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3454: LD_EXP 37
3458: PPUSH
3459: LD_INT 36
3461: PPUSH
3462: LD_INT 62
3464: PPUSH
3465: LD_INT 12
3467: PPUSH
3468: LD_INT 3
3470: PPUSH
3471: LD_INT 0
3473: PPUSH
3474: CALL 17107 0 6
3478: PUSH
3479: LD_INT 92
3481: PUSH
3482: LD_INT 62
3484: PUSH
3485: LD_INT 12
3487: PUSH
3488: LD_INT 3
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: PPUSH
3497: CALL_OW 69
3501: NOT
3502: AND
3503: IFFALSE 3520
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3505: LD_INT 62
3507: PPUSH
3508: LD_INT 12
3510: PPUSH
3511: LD_INT 3
3513: PPUSH
3514: CALL_OW 47
3518: GO 3691
// if CanBeBuiltCost ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3520: LD_EXP 37
3524: PPUSH
3525: LD_INT 36
3527: PPUSH
3528: LD_INT 37
3530: PPUSH
3531: LD_INT 18
3533: PPUSH
3534: LD_INT 2
3536: PPUSH
3537: LD_INT 0
3539: PPUSH
3540: CALL 17107 0 6
3544: PUSH
3545: LD_INT 92
3547: PUSH
3548: LD_INT 37
3550: PUSH
3551: LD_INT 18
3553: PUSH
3554: LD_INT 3
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: PPUSH
3563: CALL_OW 69
3567: NOT
3568: AND
3569: IFFALSE 3586
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3571: LD_INT 37
3573: PPUSH
3574: LD_INT 18
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 47
3584: GO 3691
// if CanBeBuiltCost ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3586: LD_EXP 37
3590: PPUSH
3591: LD_INT 36
3593: PPUSH
3594: LD_INT 66
3596: PPUSH
3597: LD_INT 14
3599: PPUSH
3600: LD_INT 4
3602: PPUSH
3603: LD_INT 0
3605: PPUSH
3606: CALL 17107 0 6
3610: PUSH
3611: LD_INT 92
3613: PUSH
3614: LD_INT 66
3616: PUSH
3617: LD_INT 14
3619: PUSH
3620: LD_INT 3
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PPUSH
3629: CALL_OW 69
3633: NOT
3634: AND
3635: IFFALSE 3652
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3637: LD_INT 66
3639: PPUSH
3640: LD_INT 14
3642: PPUSH
3643: LD_INT 4
3645: PPUSH
3646: CALL_OW 47
3650: GO 3691
// if CanBeBuiltCost ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3652: LD_EXP 37
3656: PPUSH
3657: LD_INT 36
3659: PPUSH
3660: LD_INT 74
3662: PPUSH
3663: LD_INT 26
3665: PPUSH
3666: LD_INT 4
3668: PPUSH
3669: LD_INT 0
3671: PPUSH
3672: CALL 17107 0 6
3676: IFFALSE 3691
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3678: LD_INT 74
3680: PPUSH
3681: LD_INT 26
3683: PPUSH
3684: LD_INT 4
3686: PPUSH
3687: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3691: LD_INT 22
3693: PUSH
3694: LD_INT 1
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: LD_INT 30
3703: PUSH
3704: LD_INT 36
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PPUSH
3715: CALL_OW 69
3719: NOT
3720: IFFALSE 3724
// exit ;
3722: GO 3895
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3724: LD_ADDR_VAR 0 3
3728: PUSH
3729: DOUBLE
3730: LD_INT 1
3732: DEC
3733: ST_TO_ADDR
3734: LD_INT 3
3736: PUSH
3737: LD_INT 2
3739: PUSH
3740: LD_INT 2
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: LIST
3747: PUSH
3748: LD_OWVAR 67
3752: ARRAY
3753: PUSH
3754: FOR_TO
3755: IFFALSE 3893
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3757: LD_ADDR_OWVAR 37
3761: PUSH
3762: LD_INT 3
3764: PUSH
3765: LD_INT 2
3767: PUSH
3768: LD_INT 3
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: PUSH
3775: LD_INT 1
3777: PPUSH
3778: LD_INT 2
3780: PPUSH
3781: CALL_OW 12
3785: ARRAY
3786: PUSH
3787: LD_INT 2
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: LIST
3794: PUSH
3795: LD_OWVAR 67
3799: ARRAY
3800: ST_TO_ADDR
// vc_engine = 1 ;
3801: LD_ADDR_OWVAR 39
3805: PUSH
3806: LD_INT 1
3808: ST_TO_ADDR
// vc_control = 2 ;
3809: LD_ADDR_OWVAR 38
3813: PUSH
3814: LD_INT 2
3816: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3817: LD_ADDR_OWVAR 40
3821: PUSH
3822: LD_INT 3
3824: PUSH
3825: LD_INT 4
3827: PUSH
3828: LD_INT 5
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 1
3838: PPUSH
3839: LD_INT 3
3841: PPUSH
3842: CALL_OW 12
3846: ARRAY
3847: ST_TO_ADDR
// veh = CreateVehicle ;
3848: LD_ADDR_VAR 0 5
3852: PUSH
3853: CALL_OW 45
3857: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3858: LD_VAR 0 5
3862: PPUSH
3863: LD_INT 4
3865: PPUSH
3866: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3870: LD_VAR 0 5
3874: PPUSH
3875: LD_INT 56
3877: PPUSH
3878: LD_INT 17
3880: PPUSH
3881: LD_INT 9
3883: PPUSH
3884: LD_INT 0
3886: PPUSH
3887: CALL_OW 50
// end ;
3891: GO 3754
3893: POP
3894: POP
// end ; end ;
3895: LD_VAR 0 1
3899: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3900: LD_INT 0
3902: PPUSH
3903: PPUSH
3904: PPUSH
3905: PPUSH
// uc_side = 1 ;
3906: LD_ADDR_OWVAR 20
3910: PUSH
3911: LD_INT 1
3913: ST_TO_ADDR
// uc_nation = 1 ;
3914: LD_ADDR_OWVAR 21
3918: PUSH
3919: LD_INT 1
3921: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 06c_ ) ;
3922: LD_ADDR_EXP 14
3926: PUSH
3927: LD_STRING Denis
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_STRING 06c_
3935: PPUSH
3936: CALL 44320 0 3
3940: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3941: LD_EXP 14
3945: PPUSH
3946: LD_INT 4
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 49
// Joan = PrepareUnit ( Joan , true , 06c_ ) ;
3956: LD_ADDR_EXP 15
3960: PUSH
3961: LD_STRING Joan
3963: PPUSH
3964: LD_INT 1
3966: PPUSH
3967: LD_STRING 06c_
3969: PPUSH
3970: CALL 44320 0 3
3974: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3975: LD_EXP 15
3979: PPUSH
3980: LD_INT 4
3982: PPUSH
3983: LD_INT 0
3985: PPUSH
3986: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3990: LD_STRING GladstoneIn07
3992: PPUSH
3993: LD_INT 0
3995: PPUSH
3996: CALL_OW 30
4000: NOT
4001: IFFALSE 4075
// begin Gladstone = PrepareUnit ( Gladstone , true , 06c_ ) ;
4003: LD_ADDR_EXP 8
4007: PUSH
4008: LD_STRING Gladstone
4010: PPUSH
4011: LD_INT 1
4013: PPUSH
4014: LD_STRING 06c_
4016: PPUSH
4017: CALL 44320 0 3
4021: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4022: LD_EXP 8
4026: NOT
4027: PUSH
4028: LD_STRING GladstoneStayInDelta
4030: PPUSH
4031: LD_INT 0
4033: PPUSH
4034: CALL_OW 30
4038: AND
4039: IFFALSE 4060
// Gladstone = PrepareUnit ( Gladstone , true , 05_ ) ;
4041: LD_ADDR_EXP 8
4045: PUSH
4046: LD_STRING Gladstone
4048: PPUSH
4049: LD_INT 1
4051: PPUSH
4052: LD_STRING 05_
4054: PPUSH
4055: CALL 44320 0 3
4059: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4060: LD_EXP 8
4064: PPUSH
4065: LD_INT 4
4067: PPUSH
4068: LD_INT 0
4070: PPUSH
4071: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4075: LD_STRING LisaStayInDelta
4077: PPUSH
4078: LD_INT 0
4080: PPUSH
4081: CALL_OW 30
4085: IFFALSE 4121
// begin Lisa = PrepareUnit ( Lisa , true , 05_ ) ;
4087: LD_ADDR_EXP 6
4091: PUSH
4092: LD_STRING Lisa
4094: PPUSH
4095: LD_INT 1
4097: PPUSH
4098: LD_STRING 05_
4100: PPUSH
4101: CALL 44320 0 3
4105: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4106: LD_EXP 6
4110: PPUSH
4111: LD_INT 4
4113: PPUSH
4114: LD_INT 0
4116: PPUSH
4117: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4121: LD_STRING BobbyStayInDelta
4123: PPUSH
4124: LD_INT 0
4126: PPUSH
4127: CALL_OW 30
4131: IFFALSE 4167
// begin Bobby = PrepareUnit ( Bobby , true , 05_ ) ;
4133: LD_ADDR_EXP 4
4137: PUSH
4138: LD_STRING Bobby
4140: PPUSH
4141: LD_INT 1
4143: PPUSH
4144: LD_STRING 05_
4146: PPUSH
4147: CALL 44320 0 3
4151: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4152: LD_EXP 4
4156: PPUSH
4157: LD_INT 4
4159: PPUSH
4160: LD_INT 0
4162: PPUSH
4163: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4167: LD_STRING CyrusStayInDelta
4169: PPUSH
4170: LD_INT 0
4172: PPUSH
4173: CALL_OW 30
4177: IFFALSE 4213
// begin Cyrus = PrepareUnit ( Cyrus , true , 05_ ) ;
4179: LD_ADDR_EXP 5
4183: PUSH
4184: LD_STRING Cyrus
4186: PPUSH
4187: LD_INT 1
4189: PPUSH
4190: LD_STRING 05_
4192: PPUSH
4193: CALL 44320 0 3
4197: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4198: LD_EXP 5
4202: PPUSH
4203: LD_INT 4
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4213: LD_STRING BrownStayInDelta
4215: PPUSH
4216: LD_INT 0
4218: PPUSH
4219: CALL_OW 30
4223: IFFALSE 4259
// begin Brown = PrepareUnit ( Brown , true , 05_ ) ;
4225: LD_ADDR_EXP 2
4229: PUSH
4230: LD_STRING Brown
4232: PPUSH
4233: LD_INT 1
4235: PPUSH
4236: LD_STRING 05_
4238: PPUSH
4239: CALL 44320 0 3
4243: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4244: LD_EXP 2
4248: PPUSH
4249: LD_INT 4
4251: PPUSH
4252: LD_INT 0
4254: PPUSH
4255: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4259: LD_STRING DonaldsonStayInDelta
4261: PPUSH
4262: LD_INT 0
4264: PPUSH
4265: CALL_OW 30
4269: IFFALSE 4305
// begin Donaldson = PrepareUnit ( Donaldson , true , 05_ ) ;
4271: LD_ADDR_EXP 3
4275: PUSH
4276: LD_STRING Donaldson
4278: PPUSH
4279: LD_INT 1
4281: PPUSH
4282: LD_STRING 05_
4284: PPUSH
4285: CALL 44320 0 3
4289: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4290: LD_EXP 3
4294: PPUSH
4295: LD_INT 4
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4305: LD_ADDR_VAR 0 4
4309: PUSH
4310: LD_STRING OthersStayInDelta
4312: PPUSH
4313: CALL_OW 31
4317: ST_TO_ADDR
// if other > 2 then
4318: LD_VAR 0 4
4322: PUSH
4323: LD_INT 2
4325: GREATER
4326: IFFALSE 4371
// begin for j = 1 to 2 do
4328: LD_ADDR_VAR 0 3
4332: PUSH
4333: DOUBLE
4334: LD_INT 1
4336: DEC
4337: ST_TO_ADDR
4338: LD_INT 2
4340: PUSH
4341: FOR_TO
4342: IFFALSE 4367
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4344: LD_VAR 0 4
4348: PUSH
4349: LD_VAR 0 3
4353: ARRAY
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_INT 0
4360: PPUSH
4361: CALL_OW 49
4365: GO 4341
4367: POP
4368: POP
// end else
4369: GO 4414
// begin for j = 1 to other do
4371: LD_ADDR_VAR 0 3
4375: PUSH
4376: DOUBLE
4377: LD_INT 1
4379: DEC
4380: ST_TO_ADDR
4381: LD_VAR 0 4
4385: PUSH
4386: FOR_TO
4387: IFFALSE 4412
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4389: LD_VAR 0 4
4393: PUSH
4394: LD_VAR 0 3
4398: ARRAY
4399: PPUSH
4400: LD_INT 4
4402: PPUSH
4403: LD_INT 0
4405: PPUSH
4406: CALL_OW 49
4410: GO 4386
4412: POP
4413: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4414: LD_ADDR_VAR 0 4
4418: PUSH
4419: LD_STRING 06_other_apemans
4421: PPUSH
4422: CALL_OW 31
4426: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4427: LD_VAR 0 4
4431: PUSH
4432: LD_INT 5
4434: PUSH
4435: LD_INT 4
4437: PUSH
4438: LD_INT 3
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: LD_OWVAR 67
4450: ARRAY
4451: GREATEREQUAL
4452: IFFALSE 4481
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4454: LD_ADDR_VAR 0 3
4458: PUSH
4459: LD_INT 5
4461: PUSH
4462: LD_INT 4
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: LD_OWVAR 67
4477: ARRAY
4478: ST_TO_ADDR
4479: GO 4491
// j := other ;
4481: LD_ADDR_VAR 0 3
4485: PUSH
4486: LD_VAR 0 4
4490: ST_TO_ADDR
// for i = 1 to j do
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: DOUBLE
4497: LD_INT 1
4499: DEC
4500: ST_TO_ADDR
4501: LD_VAR 0 3
4505: PUSH
4506: FOR_TO
4507: IFFALSE 4532
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4509: LD_VAR 0 4
4513: PUSH
4514: LD_VAR 0 2
4518: ARRAY
4519: PPUSH
4520: LD_INT 4
4522: PPUSH
4523: LD_INT 0
4525: PPUSH
4526: CALL_OW 49
4530: GO 4506
4532: POP
4533: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 22
4539: PUSH
4540: LD_INT 1
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PUSH
4547: LD_INT 21
4549: PUSH
4550: LD_INT 1
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PPUSH
4561: CALL_OW 70
4565: PPUSH
4566: LD_INT 53
4568: PPUSH
4569: LD_INT 19
4571: PPUSH
4572: CALL_OW 111
// firstAttack = 1 ;
4576: LD_ADDR_EXP 33
4580: PUSH
4581: LD_INT 1
4583: ST_TO_ADDR
// end ;
4584: LD_VAR 0 1
4588: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4589: LD_INT 0
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
4596: PPUSH
4597: PPUSH
4598: PPUSH
4599: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4600: LD_ADDR_VAR 0 8
4604: PUSH
4605: LD_STRING 07_vehicles
4607: PPUSH
4608: EMPTY
4609: PPUSH
4610: CALL_OW 30
4614: ST_TO_ADDR
// macmilan_squad := [ ] ;
4615: LD_ADDR_EXP 42
4619: PUSH
4620: EMPTY
4621: ST_TO_ADDR
// tmp := [ ] ;
4622: LD_ADDR_VAR 0 6
4626: PUSH
4627: EMPTY
4628: ST_TO_ADDR
// tmp_vehs := [ ] ;
4629: LD_ADDR_VAR 0 7
4633: PUSH
4634: EMPTY
4635: ST_TO_ADDR
// uc_side := 1 ;
4636: LD_ADDR_OWVAR 20
4640: PUSH
4641: LD_INT 1
4643: ST_TO_ADDR
// uc_nation := 1 ;
4644: LD_ADDR_OWVAR 21
4648: PUSH
4649: LD_INT 1
4651: ST_TO_ADDR
// if vehicles then
4652: LD_VAR 0 8
4656: IFFALSE 4815
// begin k := 1 ;
4658: LD_ADDR_VAR 0 3
4662: PUSH
4663: LD_INT 1
4665: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4666: LD_ADDR_VAR 0 2
4670: PUSH
4671: DOUBLE
4672: LD_INT 1
4674: DEC
4675: ST_TO_ADDR
4676: LD_VAR 0 8
4680: PUSH
4681: LD_INT 4
4683: DIV
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4813
// begin vc_chassis = vehicles [ k ] ;
4688: LD_ADDR_OWVAR 37
4692: PUSH
4693: LD_VAR 0 8
4697: PUSH
4698: LD_VAR 0 3
4702: ARRAY
4703: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4704: LD_ADDR_OWVAR 39
4708: PUSH
4709: LD_VAR 0 8
4713: PUSH
4714: LD_VAR 0 3
4718: PUSH
4719: LD_INT 1
4721: PLUS
4722: ARRAY
4723: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4724: LD_ADDR_OWVAR 38
4728: PUSH
4729: LD_VAR 0 8
4733: PUSH
4734: LD_VAR 0 3
4738: PUSH
4739: LD_INT 2
4741: PLUS
4742: ARRAY
4743: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4744: LD_ADDR_OWVAR 40
4748: PUSH
4749: LD_VAR 0 8
4753: PUSH
4754: LD_VAR 0 3
4758: PUSH
4759: LD_INT 3
4761: PLUS
4762: ARRAY
4763: ST_TO_ADDR
// k := k + 4 ;
4764: LD_ADDR_VAR 0 3
4768: PUSH
4769: LD_VAR 0 3
4773: PUSH
4774: LD_INT 4
4776: PLUS
4777: ST_TO_ADDR
// veh := CreateVehicle ;
4778: LD_ADDR_VAR 0 9
4782: PUSH
4783: CALL_OW 45
4787: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4788: LD_ADDR_VAR 0 7
4792: PUSH
4793: LD_VAR 0 7
4797: PPUSH
4798: LD_INT 1
4800: PPUSH
4801: LD_VAR 0 9
4805: PPUSH
4806: CALL_OW 2
4810: ST_TO_ADDR
// end ;
4811: GO 4685
4813: POP
4814: POP
// end ; JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
4815: LD_ADDR_EXP 1
4819: PUSH
4820: LD_STRING JMM
4822: PPUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_EXP 44
4830: PPUSH
4831: CALL 44320 0 3
4835: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4836: LD_EXP 12
4840: PUSH
4841: LD_INT 1
4843: EQUAL
4844: PUSH
4845: LD_EXP 12
4849: PUSH
4850: LD_INT 3
4852: EQUAL
4853: OR
4854: PUSH
4855: LD_EXP 2
4859: NOT
4860: AND
4861: IFFALSE 4919
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
4863: LD_ADDR_EXP 2
4867: PUSH
4868: LD_STRING Brown
4870: PPUSH
4871: LD_INT 1
4873: PPUSH
4874: LD_EXP 44
4878: PPUSH
4879: CALL 44320 0 3
4883: ST_TO_ADDR
// if Brown then
4884: LD_EXP 2
4888: IFFALSE 4919
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
4890: LD_ADDR_VAR 0 6
4894: PUSH
4895: LD_VAR 0 6
4899: PPUSH
4900: LD_VAR 0 6
4904: PUSH
4905: LD_INT 1
4907: PLUS
4908: PPUSH
4909: LD_EXP 2
4913: PPUSH
4914: CALL_OW 1
4918: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4919: LD_EXP 12
4923: PUSH
4924: LD_INT 2
4926: EQUAL
4927: PUSH
4928: LD_EXP 12
4932: PUSH
4933: LD_INT 3
4935: EQUAL
4936: OR
4937: PUSH
4938: LD_EXP 3
4942: NOT
4943: AND
4944: IFFALSE 5002
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
4946: LD_ADDR_EXP 3
4950: PUSH
4951: LD_STRING Donaldson
4953: PPUSH
4954: LD_INT 1
4956: PPUSH
4957: LD_EXP 44
4961: PPUSH
4962: CALL 44320 0 3
4966: ST_TO_ADDR
// if Donaldson then
4967: LD_EXP 3
4971: IFFALSE 5002
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: LD_VAR 0 6
4982: PPUSH
4983: LD_VAR 0 6
4987: PUSH
4988: LD_INT 1
4990: PLUS
4991: PPUSH
4992: LD_EXP 3
4996: PPUSH
4997: CALL_OW 1
5001: ST_TO_ADDR
// end ; if not Bobby then
5002: LD_EXP 4
5006: NOT
5007: IFFALSE 5065
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
5009: LD_ADDR_EXP 4
5013: PUSH
5014: LD_STRING Bobby
5016: PPUSH
5017: LD_INT 1
5019: PPUSH
5020: LD_EXP 44
5024: PPUSH
5025: CALL 44320 0 3
5029: ST_TO_ADDR
// if Bobby then
5030: LD_EXP 4
5034: IFFALSE 5065
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5036: LD_ADDR_VAR 0 6
5040: PUSH
5041: LD_VAR 0 6
5045: PPUSH
5046: LD_VAR 0 6
5050: PUSH
5051: LD_INT 1
5053: PLUS
5054: PPUSH
5055: LD_EXP 4
5059: PPUSH
5060: CALL_OW 1
5064: ST_TO_ADDR
// end ; if not Cyrus then
5065: LD_EXP 5
5069: NOT
5070: IFFALSE 5128
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
5072: LD_ADDR_EXP 5
5076: PUSH
5077: LD_STRING Cyrus
5079: PPUSH
5080: LD_INT 1
5082: PPUSH
5083: LD_EXP 44
5087: PPUSH
5088: CALL 44320 0 3
5092: ST_TO_ADDR
// if Cyrus then
5093: LD_EXP 5
5097: IFFALSE 5128
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5099: LD_ADDR_VAR 0 6
5103: PUSH
5104: LD_VAR 0 6
5108: PPUSH
5109: LD_VAR 0 6
5113: PUSH
5114: LD_INT 1
5116: PLUS
5117: PPUSH
5118: LD_EXP 5
5122: PPUSH
5123: CALL_OW 1
5127: ST_TO_ADDR
// end ; if not Lisa then
5128: LD_EXP 6
5132: NOT
5133: IFFALSE 5191
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
5135: LD_ADDR_EXP 6
5139: PUSH
5140: LD_STRING Lisa
5142: PPUSH
5143: LD_INT 1
5145: PPUSH
5146: LD_EXP 44
5150: PPUSH
5151: CALL 44320 0 3
5155: ST_TO_ADDR
// if Lisa then
5156: LD_EXP 6
5160: IFFALSE 5191
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5162: LD_ADDR_VAR 0 6
5166: PUSH
5167: LD_VAR 0 6
5171: PPUSH
5172: LD_VAR 0 6
5176: PUSH
5177: LD_INT 1
5179: PLUS
5180: PPUSH
5181: LD_EXP 6
5185: PPUSH
5186: CALL_OW 1
5190: ST_TO_ADDR
// end ; if not Frank then
5191: LD_EXP 7
5195: NOT
5196: IFFALSE 5254
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
5198: LD_ADDR_EXP 7
5202: PUSH
5203: LD_STRING Frank
5205: PPUSH
5206: LD_INT 1
5208: PPUSH
5209: LD_EXP 44
5213: PPUSH
5214: CALL 44320 0 3
5218: ST_TO_ADDR
// if Frank then
5219: LD_EXP 7
5223: IFFALSE 5254
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5225: LD_ADDR_VAR 0 6
5229: PUSH
5230: LD_VAR 0 6
5234: PPUSH
5235: LD_VAR 0 6
5239: PUSH
5240: LD_INT 1
5242: PLUS
5243: PPUSH
5244: LD_EXP 7
5248: PPUSH
5249: CALL_OW 1
5253: ST_TO_ADDR
// end ; if not Kikuchi then
5254: LD_EXP 9
5258: NOT
5259: IFFALSE 5317
// begin Kikuchi = PrepareUnit ( Kikuchi , true , mission_prefix_prev ) ;
5261: LD_ADDR_EXP 9
5265: PUSH
5266: LD_STRING Kikuchi
5268: PPUSH
5269: LD_INT 1
5271: PPUSH
5272: LD_EXP 44
5276: PPUSH
5277: CALL 44320 0 3
5281: ST_TO_ADDR
// if Kikuchi then
5282: LD_EXP 9
5286: IFFALSE 5317
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5288: LD_ADDR_VAR 0 6
5292: PUSH
5293: LD_VAR 0 6
5297: PPUSH
5298: LD_VAR 0 6
5302: PUSH
5303: LD_INT 1
5305: PLUS
5306: PPUSH
5307: LD_EXP 9
5311: PPUSH
5312: CALL_OW 1
5316: ST_TO_ADDR
// end ; if not Gladstone then
5317: LD_EXP 8
5321: NOT
5322: IFFALSE 5380
// begin Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
5324: LD_ADDR_EXP 8
5328: PUSH
5329: LD_STRING Gladstone
5331: PPUSH
5332: LD_INT 1
5334: PPUSH
5335: LD_EXP 44
5339: PPUSH
5340: CALL 44320 0 3
5344: ST_TO_ADDR
// if Gladstone then
5345: LD_EXP 8
5349: IFFALSE 5380
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5351: LD_ADDR_VAR 0 6
5355: PUSH
5356: LD_VAR 0 6
5360: PPUSH
5361: LD_VAR 0 6
5365: PUSH
5366: LD_INT 1
5368: PLUS
5369: PPUSH
5370: LD_EXP 8
5374: PPUSH
5375: CALL_OW 1
5379: ST_TO_ADDR
// end ; if not Khatam then
5380: LD_EXP 10
5384: NOT
5385: IFFALSE 5443
// begin Khatam = PrepareUnit ( Khatam , true , mission_prefix_prev ) ;
5387: LD_ADDR_EXP 10
5391: PUSH
5392: LD_STRING Khatam
5394: PPUSH
5395: LD_INT 1
5397: PPUSH
5398: LD_EXP 44
5402: PPUSH
5403: CALL 44320 0 3
5407: ST_TO_ADDR
// if Khatam then
5408: LD_EXP 10
5412: IFFALSE 5443
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5414: LD_ADDR_VAR 0 6
5418: PUSH
5419: LD_VAR 0 6
5423: PPUSH
5424: LD_VAR 0 6
5428: PUSH
5429: LD_INT 1
5431: PLUS
5432: PPUSH
5433: LD_EXP 10
5437: PPUSH
5438: CALL_OW 1
5442: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5443: LD_ADDR_VAR 0 5
5447: PUSH
5448: LD_STRING 07c_others
5450: PPUSH
5451: CALL_OW 31
5455: ST_TO_ADDR
// macmilan_squad := others ;
5456: LD_ADDR_EXP 42
5460: PUSH
5461: LD_VAR 0 5
5465: ST_TO_ADDR
// if others then
5466: LD_VAR 0 5
5470: IFFALSE 5558
// for i in others do
5472: LD_ADDR_VAR 0 2
5476: PUSH
5477: LD_VAR 0 5
5481: PUSH
5482: FOR_IN
5483: IFFALSE 5556
// if GetClass ( i ) = 3 then
5485: LD_VAR 0 2
5489: PPUSH
5490: CALL_OW 257
5494: PUSH
5495: LD_INT 3
5497: EQUAL
5498: IFFALSE 5525
// tmp := Insert ( tmp , 1 , i ) else
5500: LD_ADDR_VAR 0 6
5504: PUSH
5505: LD_VAR 0 6
5509: PPUSH
5510: LD_INT 1
5512: PPUSH
5513: LD_VAR 0 2
5517: PPUSH
5518: CALL_OW 2
5522: ST_TO_ADDR
5523: GO 5554
// tmp := Replace ( tmp , tmp + 1 , i ) ;
5525: LD_ADDR_VAR 0 6
5529: PUSH
5530: LD_VAR 0 6
5534: PPUSH
5535: LD_VAR 0 6
5539: PUSH
5540: LD_INT 1
5542: PLUS
5543: PPUSH
5544: LD_VAR 0 2
5548: PPUSH
5549: CALL_OW 1
5553: ST_TO_ADDR
5554: GO 5482
5556: POP
5557: POP
// if FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) then
5558: LD_INT 4
5560: PPUSH
5561: LD_INT 21
5563: PUSH
5564: LD_INT 3
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: PPUSH
5571: CALL_OW 70
5575: IFFALSE 5616
// for i in FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) do
5577: LD_ADDR_VAR 0 2
5581: PUSH
5582: LD_INT 4
5584: PPUSH
5585: LD_INT 21
5587: PUSH
5588: LD_INT 3
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PPUSH
5595: CALL_OW 70
5599: PUSH
5600: FOR_IN
5601: IFFALSE 5614
// RemoveUnit ( i ) ;
5603: LD_VAR 0 2
5607: PPUSH
5608: CALL_OW 64
5612: GO 5600
5614: POP
5615: POP
// wait ( 0 0$1 ) ;
5616: LD_INT 35
5618: PPUSH
5619: CALL_OW 67
// if tmp then
5623: LD_VAR 0 6
5627: IFFALSE 5812
// begin for i in tmp do
5629: LD_ADDR_VAR 0 2
5633: PUSH
5634: LD_VAR 0 6
5638: PUSH
5639: FOR_IN
5640: IFFALSE 5810
// begin SetDir ( i , 3 ) ;
5642: LD_VAR 0 2
5646: PPUSH
5647: LD_INT 3
5649: PPUSH
5650: CALL_OW 233
// if tmp_vehs then
5654: LD_VAR 0 7
5658: IFFALSE 5736
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5660: LD_VAR 0 7
5664: PUSH
5665: LD_INT 1
5667: ARRAY
5668: PPUSH
5669: LD_INT 3
5671: PPUSH
5672: CALL_OW 233
// PlaceUnitXY ( tmp_vehs [ 1 ] , 78 , 5 , false ) ;
5676: LD_VAR 0 7
5680: PUSH
5681: LD_INT 1
5683: ARRAY
5684: PPUSH
5685: LD_INT 78
5687: PPUSH
5688: LD_INT 5
5690: PPUSH
5691: LD_INT 0
5693: PPUSH
5694: CALL_OW 48
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5698: LD_VAR 0 2
5702: PPUSH
5703: LD_VAR 0 7
5707: PUSH
5708: LD_INT 1
5710: ARRAY
5711: PPUSH
5712: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5716: LD_ADDR_VAR 0 7
5720: PUSH
5721: LD_VAR 0 7
5725: PPUSH
5726: LD_INT 1
5728: PPUSH
5729: CALL_OW 3
5733: ST_TO_ADDR
// end else
5734: GO 5751
// PlaceUnitArea ( i , GammaSupport , false ) ;
5736: LD_VAR 0 2
5740: PPUSH
5741: LD_INT 4
5743: PPUSH
5744: LD_INT 0
5746: PPUSH
5747: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5751: LD_VAR 0 2
5755: PPUSH
5756: LD_INT 77
5758: PPUSH
5759: LD_INT 16
5761: PPUSH
5762: CALL_OW 111
// AddComMoveXY ( i , 65 , 24 ) ;
5766: LD_VAR 0 2
5770: PPUSH
5771: LD_INT 65
5773: PPUSH
5774: LD_INT 24
5776: PPUSH
5777: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5781: LD_INT 35
5783: PPUSH
5784: CALL_OW 67
// until not FilterUnitsInArea ( GammaSupport , [ f_side , 1 ] ) ;
5788: LD_INT 4
5790: PPUSH
5791: LD_INT 22
5793: PUSH
5794: LD_INT 1
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PPUSH
5801: CALL_OW 70
5805: NOT
5806: IFFALSE 5781
// end ;
5808: GO 5639
5810: POP
5811: POP
// end ; PlaceUnitArea ( JMM , GammaSupport , false ) ;
5812: LD_EXP 1
5816: PPUSH
5817: LD_INT 4
5819: PPUSH
5820: LD_INT 0
5822: PPUSH
5823: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5827: LD_EXP 1
5831: PPUSH
5832: LD_INT 77
5834: PPUSH
5835: LD_INT 16
5837: PPUSH
5838: CALL_OW 111
// end ;
5842: LD_VAR 0 1
5846: RET
// export function PrepareSikorsky ; begin
5847: LD_INT 0
5849: PPUSH
// uc_side = 4 ;
5850: LD_ADDR_OWVAR 20
5854: PUSH
5855: LD_INT 4
5857: ST_TO_ADDR
// uc_nation = 1 ;
5858: LD_ADDR_OWVAR 21
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ,  ) ;
5866: LD_ADDR_EXP 16
5870: PUSH
5871: LD_STRING Sikorski
5873: PPUSH
5874: LD_INT 0
5876: PPUSH
5877: LD_STRING 
5879: PPUSH
5880: CALL 44320 0 3
5884: ST_TO_ADDR
// vc_engine = 1 ;
5885: LD_ADDR_OWVAR 39
5889: PUSH
5890: LD_INT 1
5892: ST_TO_ADDR
// vc_control = 1 ;
5893: LD_ADDR_OWVAR 38
5897: PUSH
5898: LD_INT 1
5900: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5901: LD_ADDR_OWVAR 40
5905: PUSH
5906: LD_INT 5
5908: PUSH
5909: LD_INT 3
5911: PUSH
5912: LD_INT 4
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: LIST
5919: PUSH
5920: LD_OWVAR 67
5924: ARRAY
5925: ST_TO_ADDR
// vc_chassis = 4 ;
5926: LD_ADDR_OWVAR 37
5930: PUSH
5931: LD_INT 4
5933: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5934: LD_ADDR_EXP 17
5938: PUSH
5939: CALL_OW 45
5943: ST_TO_ADDR
// SetDir ( SikorskyTank , 3 ) ;
5944: LD_EXP 17
5948: PPUSH
5949: LD_INT 3
5951: PPUSH
5952: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
5956: LD_INT 35
5958: PPUSH
5959: CALL_OW 67
// PlaceUnitXY ( SikorskyTank , 18 , 5 , false ) ;
5963: LD_EXP 17
5967: PPUSH
5968: LD_INT 18
5970: PPUSH
5971: LD_INT 5
5973: PPUSH
5974: LD_INT 0
5976: PPUSH
5977: CALL_OW 48
// until IsPlaced ( SikorskyTank ) ;
5981: LD_EXP 17
5985: PPUSH
5986: CALL_OW 305
5990: IFFALSE 5956
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5992: LD_EXP 16
5996: PPUSH
5997: LD_EXP 17
6001: PPUSH
6002: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
6006: LD_EXP 17
6010: PPUSH
6011: LD_INT 5
6013: PPUSH
6014: CALL_OW 113
// end ;
6018: LD_VAR 0 1
6022: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
6023: LD_INT 0
6025: PPUSH
6026: PPUSH
6027: PPUSH
6028: PPUSH
// InitHc ;
6029: CALL_OW 19
// for i = 1 to [ 5 , 4 , 4 ] [ Difficulty ] do
6033: LD_ADDR_VAR 0 2
6037: PUSH
6038: DOUBLE
6039: LD_INT 1
6041: DEC
6042: ST_TO_ADDR
6043: LD_INT 5
6045: PUSH
6046: LD_INT 4
6048: PUSH
6049: LD_INT 4
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: LIST
6056: PUSH
6057: LD_OWVAR 67
6061: ARRAY
6062: PUSH
6063: FOR_TO
6064: IFFALSE 6180
// begin uc_side = 4 ;
6066: LD_ADDR_OWVAR 20
6070: PUSH
6071: LD_INT 4
6073: ST_TO_ADDR
// uc_nation = 1 ;
6074: LD_ADDR_OWVAR 21
6078: PUSH
6079: LD_INT 1
6081: ST_TO_ADDR
// hc_name =  ;
6082: LD_ADDR_OWVAR 26
6086: PUSH
6087: LD_STRING 
6089: ST_TO_ADDR
// hc_gallery =  ;
6090: LD_ADDR_OWVAR 33
6094: PUSH
6095: LD_STRING 
6097: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
6098: LD_INT 0
6100: PPUSH
6101: LD_INT 1
6103: PPUSH
6104: LD_INT 5
6106: PPUSH
6107: LD_INT 8
6109: PPUSH
6110: CALL_OW 12
6114: PPUSH
6115: CALL_OW 380
// un = CreateHuman ;
6119: LD_ADDR_VAR 0 3
6123: PUSH
6124: CALL_OW 44
6128: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6129: LD_VAR 0 3
6133: PPUSH
6134: LD_INT 3
6136: PPUSH
6137: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6141: LD_VAR 0 3
6145: PPUSH
6146: LD_INT 9
6148: PPUSH
6149: LD_INT 0
6151: PPUSH
6152: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6156: LD_VAR 0 3
6160: PPUSH
6161: LD_INT 53
6163: PPUSH
6164: LD_INT 23
6166: PPUSH
6167: CALL_OW 111
// wait ( 0 0$1 ) ;
6171: LD_INT 35
6173: PPUSH
6174: CALL_OW 67
// end ;
6178: GO 6063
6180: POP
6181: POP
// for i = 1 to 2 do
6182: LD_ADDR_VAR 0 2
6186: PUSH
6187: DOUBLE
6188: LD_INT 1
6190: DEC
6191: ST_TO_ADDR
6192: LD_INT 2
6194: PUSH
6195: FOR_TO
6196: IFFALSE 6312
// begin uc_side = 4 ;
6198: LD_ADDR_OWVAR 20
6202: PUSH
6203: LD_INT 4
6205: ST_TO_ADDR
// uc_nation = 1 ;
6206: LD_ADDR_OWVAR 21
6210: PUSH
6211: LD_INT 1
6213: ST_TO_ADDR
// hc_name =  ;
6214: LD_ADDR_OWVAR 26
6218: PUSH
6219: LD_STRING 
6221: ST_TO_ADDR
// hc_gallery =  ;
6222: LD_ADDR_OWVAR 33
6226: PUSH
6227: LD_STRING 
6229: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
6230: LD_INT 0
6232: PPUSH
6233: LD_INT 4
6235: PPUSH
6236: LD_INT 5
6238: PPUSH
6239: LD_INT 8
6241: PPUSH
6242: CALL_OW 12
6246: PPUSH
6247: CALL_OW 380
// un = CreateHuman ;
6251: LD_ADDR_VAR 0 3
6255: PUSH
6256: CALL_OW 44
6260: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6261: LD_VAR 0 3
6265: PPUSH
6266: LD_INT 3
6268: PPUSH
6269: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6273: LD_VAR 0 3
6277: PPUSH
6278: LD_INT 9
6280: PPUSH
6281: LD_INT 0
6283: PPUSH
6284: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6288: LD_VAR 0 3
6292: PPUSH
6293: LD_INT 53
6295: PPUSH
6296: LD_INT 23
6298: PPUSH
6299: CALL_OW 111
// wait ( 0 0$1 ) ;
6303: LD_INT 35
6305: PPUSH
6306: CALL_OW 67
// end ;
6310: GO 6195
6312: POP
6313: POP
// for i = 1 to [ 5 , 5 , 4 ] [ Difficulty ] do
6314: LD_ADDR_VAR 0 2
6318: PUSH
6319: DOUBLE
6320: LD_INT 1
6322: DEC
6323: ST_TO_ADDR
6324: LD_INT 5
6326: PUSH
6327: LD_INT 5
6329: PUSH
6330: LD_INT 4
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: LIST
6337: PUSH
6338: LD_OWVAR 67
6342: ARRAY
6343: PUSH
6344: FOR_TO
6345: IFFALSE 6579
// begin uc_side = 4 ;
6347: LD_ADDR_OWVAR 20
6351: PUSH
6352: LD_INT 4
6354: ST_TO_ADDR
// uc_nation = 1 ;
6355: LD_ADDR_OWVAR 21
6359: PUSH
6360: LD_INT 1
6362: ST_TO_ADDR
// vc_engine = 1 ;
6363: LD_ADDR_OWVAR 39
6367: PUSH
6368: LD_INT 1
6370: ST_TO_ADDR
// vc_control = 1 ;
6371: LD_ADDR_OWVAR 38
6375: PUSH
6376: LD_INT 1
6378: ST_TO_ADDR
// vc_weapon = [ 7 , 4 , 5 , 6 ] [ i mod 4 + 1 ] ;
6379: LD_ADDR_OWVAR 40
6383: PUSH
6384: LD_INT 7
6386: PUSH
6387: LD_INT 4
6389: PUSH
6390: LD_INT 5
6392: PUSH
6393: LD_INT 6
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: PUSH
6402: LD_VAR 0 2
6406: PUSH
6407: LD_INT 4
6409: MOD
6410: PUSH
6411: LD_INT 1
6413: PLUS
6414: ARRAY
6415: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6416: LD_ADDR_OWVAR 37
6420: PUSH
6421: LD_INT 3
6423: PUSH
6424: LD_INT 3
6426: PUSH
6427: LD_INT 4
6429: PUSH
6430: LD_INT 4
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: PUSH
6439: LD_VAR 0 2
6443: PUSH
6444: LD_INT 4
6446: MOD
6447: PUSH
6448: LD_INT 1
6450: PLUS
6451: ARRAY
6452: ST_TO_ADDR
// veh = CreateVehicle ;
6453: LD_ADDR_VAR 0 4
6457: PUSH
6458: CALL_OW 45
6462: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6463: LD_VAR 0 4
6467: PPUSH
6468: LD_INT 3
6470: PPUSH
6471: CALL_OW 233
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6475: LD_VAR 0 4
6479: PPUSH
6480: LD_INT 9
6482: PPUSH
6483: LD_INT 0
6485: PPUSH
6486: CALL_OW 49
// InitHc ;
6490: CALL_OW 19
// hc_name =  ;
6494: LD_ADDR_OWVAR 26
6498: PUSH
6499: LD_STRING 
6501: ST_TO_ADDR
// hc_gallery =  ;
6502: LD_ADDR_OWVAR 33
6506: PUSH
6507: LD_STRING 
6509: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6510: LD_INT 0
6512: PPUSH
6513: LD_INT 3
6515: PPUSH
6516: LD_INT 5
6518: PPUSH
6519: LD_INT 8
6521: PPUSH
6522: CALL_OW 12
6526: PPUSH
6527: CALL_OW 380
// un = CreateHuman ;
6531: LD_ADDR_VAR 0 3
6535: PUSH
6536: CALL_OW 44
6540: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6541: LD_VAR 0 3
6545: PPUSH
6546: LD_VAR 0 4
6550: PPUSH
6551: CALL_OW 52
// ComMoveXY ( un , 53 , 23 ) ;
6555: LD_VAR 0 3
6559: PPUSH
6560: LD_INT 53
6562: PPUSH
6563: LD_INT 23
6565: PPUSH
6566: CALL_OW 111
// wait ( 0 0$5 ) ;
6570: LD_INT 175
6572: PPUSH
6573: CALL_OW 67
// end ;
6577: GO 6344
6579: POP
6580: POP
// end ; end_of_file
6581: LD_VAR 0 1
6585: RET
// export function PrepareRussianCommander ; begin
6586: LD_INT 0
6588: PPUSH
// uc_side = 3 ;
6589: LD_ADDR_OWVAR 20
6593: PUSH
6594: LD_INT 3
6596: ST_TO_ADDR
// uc_nation = 3 ;
6597: LD_ADDR_OWVAR 21
6601: PUSH
6602: LD_INT 3
6604: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6605: LD_ADDR_EXP 24
6609: PUSH
6610: LD_STRING Borodin
6612: PPUSH
6613: CALL_OW 25
6617: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6618: LD_EXP 24
6622: PPUSH
6623: LD_INT 25
6625: PPUSH
6626: LD_INT 0
6628: PPUSH
6629: CALL_OW 49
// end ;
6633: LD_VAR 0 1
6637: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6638: LD_INT 0
6640: PPUSH
6641: PPUSH
6642: PPUSH
6643: PPUSH
// for i = 1 to 10 do
6644: LD_ADDR_VAR 0 2
6648: PUSH
6649: DOUBLE
6650: LD_INT 1
6652: DEC
6653: ST_TO_ADDR
6654: LD_INT 10
6656: PUSH
6657: FOR_TO
6658: IFFALSE 6732
// begin uc_side = 6 ;
6660: LD_ADDR_OWVAR 20
6664: PUSH
6665: LD_INT 6
6667: ST_TO_ADDR
// uc_nation = 3 ;
6668: LD_ADDR_OWVAR 21
6672: PUSH
6673: LD_INT 3
6675: ST_TO_ADDR
// hc_gallery =  ;
6676: LD_ADDR_OWVAR 33
6680: PUSH
6681: LD_STRING 
6683: ST_TO_ADDR
// hc_name =  ;
6684: LD_ADDR_OWVAR 26
6688: PUSH
6689: LD_STRING 
6691: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6692: LD_INT 0
6694: PPUSH
6695: LD_INT 1
6697: PPUSH
6698: LD_INT 3
6700: PPUSH
6701: CALL_OW 380
// un = CreateHuman ;
6705: LD_ADDR_VAR 0 3
6709: PUSH
6710: CALL_OW 44
6714: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6715: LD_VAR 0 3
6719: PPUSH
6720: LD_INT 1
6722: PPUSH
6723: LD_INT 0
6725: PPUSH
6726: CALL_OW 49
// end ;
6730: GO 6657
6732: POP
6733: POP
// for i = 1 to 3 do
6734: LD_ADDR_VAR 0 2
6738: PUSH
6739: DOUBLE
6740: LD_INT 1
6742: DEC
6743: ST_TO_ADDR
6744: LD_INT 3
6746: PUSH
6747: FOR_TO
6748: IFFALSE 6897
// begin uc_side = 6 ;
6750: LD_ADDR_OWVAR 20
6754: PUSH
6755: LD_INT 6
6757: ST_TO_ADDR
// uc_nation = 3 ;
6758: LD_ADDR_OWVAR 21
6762: PUSH
6763: LD_INT 3
6765: ST_TO_ADDR
// vc_engine = 1 ;
6766: LD_ADDR_OWVAR 39
6770: PUSH
6771: LD_INT 1
6773: ST_TO_ADDR
// vc_control = 1 ;
6774: LD_ADDR_OWVAR 38
6778: PUSH
6779: LD_INT 1
6781: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6782: LD_ADDR_OWVAR 40
6786: PUSH
6787: LD_INT 43
6789: PUSH
6790: LD_INT 44
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 1
6799: PPUSH
6800: LD_INT 2
6802: PPUSH
6803: CALL_OW 12
6807: ARRAY
6808: ST_TO_ADDR
// vc_chassis = 22 ;
6809: LD_ADDR_OWVAR 37
6813: PUSH
6814: LD_INT 22
6816: ST_TO_ADDR
// veh = CreateVehicle ;
6817: LD_ADDR_VAR 0 4
6821: PUSH
6822: CALL_OW 45
6826: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6827: LD_VAR 0 4
6831: PPUSH
6832: LD_INT 2
6834: PPUSH
6835: LD_INT 0
6837: PPUSH
6838: CALL_OW 49
// hc_gallery =  ;
6842: LD_ADDR_OWVAR 33
6846: PUSH
6847: LD_STRING 
6849: ST_TO_ADDR
// hc_name =  ;
6850: LD_ADDR_OWVAR 26
6854: PUSH
6855: LD_STRING 
6857: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6858: LD_INT 0
6860: PPUSH
6861: LD_INT 3
6863: PPUSH
6864: LD_INT 4
6866: PPUSH
6867: CALL_OW 380
// un = CreateHuman ;
6871: LD_ADDR_VAR 0 3
6875: PUSH
6876: CALL_OW 44
6880: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6881: LD_VAR 0 3
6885: PPUSH
6886: LD_VAR 0 4
6890: PPUSH
6891: CALL_OW 52
// end ;
6895: GO 6747
6897: POP
6898: POP
// end ;
6899: LD_VAR 0 1
6903: RET
// export function PrepareRussians ; var i , un ; begin
6904: LD_INT 0
6906: PPUSH
6907: PPUSH
6908: PPUSH
// for i = 1 to 8 do
6909: LD_ADDR_VAR 0 2
6913: PUSH
6914: DOUBLE
6915: LD_INT 1
6917: DEC
6918: ST_TO_ADDR
6919: LD_INT 8
6921: PUSH
6922: FOR_TO
6923: IFFALSE 7009
// begin uc_side = 3 ;
6925: LD_ADDR_OWVAR 20
6929: PUSH
6930: LD_INT 3
6932: ST_TO_ADDR
// uc_nation = 3 ;
6933: LD_ADDR_OWVAR 21
6937: PUSH
6938: LD_INT 3
6940: ST_TO_ADDR
// hc_gallery =  ;
6941: LD_ADDR_OWVAR 33
6945: PUSH
6946: LD_STRING 
6948: ST_TO_ADDR
// hc_name =  ;
6949: LD_ADDR_OWVAR 26
6953: PUSH
6954: LD_STRING 
6956: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6957: LD_INT 0
6959: PPUSH
6960: LD_INT 1
6962: PPUSH
6963: LD_EXP 25
6967: PPUSH
6968: LD_EXP 26
6972: PPUSH
6973: CALL_OW 12
6977: PPUSH
6978: CALL_OW 380
// un = CreateHuman ;
6982: LD_ADDR_VAR 0 3
6986: PUSH
6987: CALL_OW 44
6991: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6992: LD_VAR 0 3
6996: PPUSH
6997: LD_INT 3
6999: PPUSH
7000: LD_INT 0
7002: PPUSH
7003: CALL_OW 49
// end ;
7007: GO 6922
7009: POP
7010: POP
// for i = 1 to 4 do
7011: LD_ADDR_VAR 0 2
7015: PUSH
7016: DOUBLE
7017: LD_INT 1
7019: DEC
7020: ST_TO_ADDR
7021: LD_INT 4
7023: PUSH
7024: FOR_TO
7025: IFFALSE 7111
// begin uc_side = 3 ;
7027: LD_ADDR_OWVAR 20
7031: PUSH
7032: LD_INT 3
7034: ST_TO_ADDR
// uc_nation = 3 ;
7035: LD_ADDR_OWVAR 21
7039: PUSH
7040: LD_INT 3
7042: ST_TO_ADDR
// hc_gallery =  ;
7043: LD_ADDR_OWVAR 33
7047: PUSH
7048: LD_STRING 
7050: ST_TO_ADDR
// hc_name =  ;
7051: LD_ADDR_OWVAR 26
7055: PUSH
7056: LD_STRING 
7058: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7059: LD_INT 0
7061: PPUSH
7062: LD_INT 2
7064: PPUSH
7065: LD_EXP 25
7069: PPUSH
7070: LD_EXP 26
7074: PPUSH
7075: CALL_OW 12
7079: PPUSH
7080: CALL_OW 380
// un = CreateHuman ;
7084: LD_ADDR_VAR 0 3
7088: PUSH
7089: CALL_OW 44
7093: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7094: LD_VAR 0 3
7098: PPUSH
7099: LD_INT 3
7101: PPUSH
7102: LD_INT 0
7104: PPUSH
7105: CALL_OW 49
// end ;
7109: GO 7024
7111: POP
7112: POP
// for i = 1 to 3 do
7113: LD_ADDR_VAR 0 2
7117: PUSH
7118: DOUBLE
7119: LD_INT 1
7121: DEC
7122: ST_TO_ADDR
7123: LD_INT 3
7125: PUSH
7126: FOR_TO
7127: IFFALSE 7213
// begin uc_side = 3 ;
7129: LD_ADDR_OWVAR 20
7133: PUSH
7134: LD_INT 3
7136: ST_TO_ADDR
// uc_nation = 3 ;
7137: LD_ADDR_OWVAR 21
7141: PUSH
7142: LD_INT 3
7144: ST_TO_ADDR
// hc_gallery =  ;
7145: LD_ADDR_OWVAR 33
7149: PUSH
7150: LD_STRING 
7152: ST_TO_ADDR
// hc_name =  ;
7153: LD_ADDR_OWVAR 26
7157: PUSH
7158: LD_STRING 
7160: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7161: LD_INT 0
7163: PPUSH
7164: LD_INT 3
7166: PPUSH
7167: LD_EXP 25
7171: PPUSH
7172: LD_EXP 26
7176: PPUSH
7177: CALL_OW 12
7181: PPUSH
7182: CALL_OW 380
// un = CreateHuman ;
7186: LD_ADDR_VAR 0 3
7190: PUSH
7191: CALL_OW 44
7195: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7196: LD_VAR 0 3
7200: PPUSH
7201: LD_INT 3
7203: PPUSH
7204: LD_INT 0
7206: PPUSH
7207: CALL_OW 49
// end ;
7211: GO 7126
7213: POP
7214: POP
// for i = 1 to 2 do
7215: LD_ADDR_VAR 0 2
7219: PUSH
7220: DOUBLE
7221: LD_INT 1
7223: DEC
7224: ST_TO_ADDR
7225: LD_INT 2
7227: PUSH
7228: FOR_TO
7229: IFFALSE 7315
// begin uc_side = 3 ;
7231: LD_ADDR_OWVAR 20
7235: PUSH
7236: LD_INT 3
7238: ST_TO_ADDR
// uc_nation = 3 ;
7239: LD_ADDR_OWVAR 21
7243: PUSH
7244: LD_INT 3
7246: ST_TO_ADDR
// hc_gallery =  ;
7247: LD_ADDR_OWVAR 33
7251: PUSH
7252: LD_STRING 
7254: ST_TO_ADDR
// hc_name =  ;
7255: LD_ADDR_OWVAR 26
7259: PUSH
7260: LD_STRING 
7262: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7263: LD_INT 0
7265: PPUSH
7266: LD_INT 4
7268: PPUSH
7269: LD_EXP 25
7273: PPUSH
7274: LD_EXP 26
7278: PPUSH
7279: CALL_OW 12
7283: PPUSH
7284: CALL_OW 380
// un = CreateHuman ;
7288: LD_ADDR_VAR 0 3
7292: PUSH
7293: CALL_OW 44
7297: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7298: LD_VAR 0 3
7302: PPUSH
7303: LD_INT 3
7305: PPUSH
7306: LD_INT 0
7308: PPUSH
7309: CALL_OW 49
// end ;
7313: GO 7228
7315: POP
7316: POP
// end ; end_of_file
7317: LD_VAR 0 1
7321: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7322: LD_INT 0
7324: PPUSH
7325: PPUSH
7326: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7327: LD_ADDR_VAR 0 1
7331: PUSH
7332: LD_VAR 0 1
7336: PUSH
7337: LD_EXP 1
7341: PUSH
7342: LD_EXP 2
7346: PUSH
7347: LD_EXP 3
7351: PUSH
7352: LD_EXP 4
7356: PUSH
7357: LD_EXP 5
7361: PUSH
7362: LD_EXP 6
7366: PUSH
7367: LD_EXP 7
7371: PUSH
7372: LD_EXP 8
7376: PUSH
7377: LD_EXP 9
7381: PUSH
7382: LD_EXP 10
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: DIFF
7399: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7400: LD_ADDR_VAR 0 6
7404: PUSH
7405: LD_VAR 0 1
7409: PUSH
7410: LD_INT 1
7412: PPUSH
7413: LD_VAR 0 1
7417: PPUSH
7418: CALL_OW 12
7422: ARRAY
7423: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7424: LD_VAR 0 6
7428: PPUSH
7429: CALL_OW 258
7433: PUSH
7434: LD_INT 1
7436: EQUAL
7437: IFFALSE 7455
// Say ( speaker , dialogMID ) else
7439: LD_VAR 0 6
7443: PPUSH
7444: LD_VAR 0 2
7448: PPUSH
7449: CALL_OW 88
7453: GO 7469
// Say ( speaker , dialogFID ) ;
7455: LD_VAR 0 6
7459: PPUSH
7460: LD_VAR 0 3
7464: PPUSH
7465: CALL_OW 88
// result := speaker ;
7469: LD_ADDR_VAR 0 4
7473: PUSH
7474: LD_VAR 0 6
7478: ST_TO_ADDR
// end ;
7479: LD_VAR 0 4
7483: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7484: LD_INT 0
7486: PPUSH
7487: PPUSH
7488: PPUSH
// uc_side := GetSide ( b ) ;
7489: LD_ADDR_OWVAR 20
7493: PUSH
7494: LD_VAR 0 2
7498: PPUSH
7499: CALL_OW 255
7503: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7504: LD_ADDR_OWVAR 21
7508: PUSH
7509: LD_VAR 0 2
7513: PPUSH
7514: CALL_OW 248
7518: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7519: LD_INT 0
7521: PPUSH
7522: LD_INT 1
7524: PPUSH
7525: LD_VAR 0 1
7529: PPUSH
7530: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7534: LD_ADDR_VAR 0 5
7538: PUSH
7539: LD_VAR 0 2
7543: PPUSH
7544: CALL_OW 254
7548: PUSH
7549: LD_INT 3
7551: MINUS
7552: ST_TO_ADDR
// if dir < 0 then
7553: LD_VAR 0 5
7557: PUSH
7558: LD_INT 0
7560: LESS
7561: IFFALSE 7577
// dir := 6 + dir ;
7563: LD_ADDR_VAR 0 5
7567: PUSH
7568: LD_INT 6
7570: PUSH
7571: LD_VAR 0 5
7575: PLUS
7576: ST_TO_ADDR
// un := CreateHuman ;
7577: LD_ADDR_VAR 0 4
7581: PUSH
7582: CALL_OW 44
7586: ST_TO_ADDR
// SetDir ( un , dir ) ;
7587: LD_VAR 0 4
7591: PPUSH
7592: LD_VAR 0 5
7596: PPUSH
7597: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7601: LD_VAR 0 4
7605: PPUSH
7606: LD_VAR 0 2
7610: PPUSH
7611: CALL_OW 52
// end ;
7615: LD_VAR 0 3
7619: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7620: LD_INT 0
7622: PPUSH
7623: PPUSH
7624: PPUSH
7625: PPUSH
// for i = 1 to count do
7626: LD_ADDR_VAR 0 8
7630: PUSH
7631: DOUBLE
7632: LD_INT 1
7634: DEC
7635: ST_TO_ADDR
7636: LD_VAR 0 6
7640: PUSH
7641: FOR_TO
7642: IFFALSE 7723
// begin uc_side = side ;
7644: LD_ADDR_OWVAR 20
7648: PUSH
7649: LD_VAR 0 1
7653: ST_TO_ADDR
// uc_nation = nation ;
7654: LD_ADDR_OWVAR 21
7658: PUSH
7659: LD_VAR 0 2
7663: ST_TO_ADDR
// hc_gallery =  ;
7664: LD_ADDR_OWVAR 33
7668: PUSH
7669: LD_STRING 
7671: ST_TO_ADDR
// hc_name =  ;
7672: LD_ADDR_OWVAR 26
7676: PUSH
7677: LD_STRING 
7679: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7680: LD_INT 0
7682: PPUSH
7683: LD_VAR 0 5
7687: PPUSH
7688: LD_VAR 0 4
7692: PPUSH
7693: CALL_OW 380
// un = CreateHuman ;
7697: LD_ADDR_VAR 0 10
7701: PUSH
7702: CALL_OW 44
7706: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7707: LD_VAR 0 10
7711: PPUSH
7712: LD_VAR 0 3
7716: PPUSH
7717: CALL_OW 52
// end ;
7721: GO 7641
7723: POP
7724: POP
// end ;
7725: LD_VAR 0 7
7729: RET
// export function PrepareDifficulty ; begin
7730: LD_INT 0
7732: PPUSH
// if Difficulty = 1 then
7733: LD_OWVAR 67
7737: PUSH
7738: LD_INT 1
7740: EQUAL
7741: IFFALSE 7759
// begin RuSolMinLevel = 3 ;
7743: LD_ADDR_EXP 25
7747: PUSH
7748: LD_INT 3
7750: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7751: LD_ADDR_EXP 26
7755: PUSH
7756: LD_INT 5
7758: ST_TO_ADDR
// end ; if Difficulty = 2 then
7759: LD_OWVAR 67
7763: PUSH
7764: LD_INT 2
7766: EQUAL
7767: IFFALSE 7837
// begin RuSolMinLevel = 5 ;
7769: LD_ADDR_EXP 25
7773: PUSH
7774: LD_INT 5
7776: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7777: LD_ADDR_EXP 26
7781: PUSH
7782: LD_INT 6
7784: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7785: LD_INT 51
7787: PPUSH
7788: LD_INT 3
7790: PPUSH
7791: LD_INT 1
7793: PPUSH
7794: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7798: LD_INT 57
7800: PPUSH
7801: LD_INT 3
7803: PPUSH
7804: LD_INT 1
7806: PPUSH
7807: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7811: LD_INT 57
7813: PPUSH
7814: LD_INT 6
7816: PPUSH
7817: LD_INT 2
7819: PPUSH
7820: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7824: LD_INT 51
7826: PPUSH
7827: LD_INT 6
7829: PPUSH
7830: LD_INT 2
7832: PPUSH
7833: CALL_OW 322
// end ; if Difficulty = 3 then
7837: LD_OWVAR 67
7841: PUSH
7842: LD_INT 3
7844: EQUAL
7845: IFFALSE 7928
// begin RuSolMinLevel = 5 ;
7847: LD_ADDR_EXP 25
7851: PUSH
7852: LD_INT 5
7854: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7855: LD_ADDR_EXP 26
7859: PUSH
7860: LD_INT 6
7862: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7863: LD_INT 57
7865: PPUSH
7866: LD_INT 3
7868: PPUSH
7869: LD_INT 1
7871: PPUSH
7872: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7876: LD_INT 51
7878: PPUSH
7879: LD_INT 3
7881: PPUSH
7882: LD_INT 1
7884: PPUSH
7885: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7889: LD_INT 52
7891: PPUSH
7892: LD_INT 3
7894: PPUSH
7895: LD_INT 1
7897: PPUSH
7898: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7902: LD_INT 57
7904: PPUSH
7905: LD_INT 6
7907: PPUSH
7908: LD_INT 2
7910: PPUSH
7911: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7915: LD_INT 52
7917: PPUSH
7918: LD_INT 6
7920: PPUSH
7921: LD_INT 2
7923: PPUSH
7924: CALL_OW 322
// end ; end ;
7928: LD_VAR 0 1
7932: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7933: LD_INT 0
7935: PPUSH
7936: PPUSH
7937: PPUSH
7938: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7939: LD_ADDR_VAR 0 3
7943: PUSH
7944: LD_INT 22
7946: PUSH
7947: LD_INT 3
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: PUSH
7954: LD_INT 25
7956: PUSH
7957: LD_INT 2
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PPUSH
7968: CALL_OW 69
7972: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7973: LD_ADDR_VAR 0 4
7977: PUSH
7978: LD_INT 4
7980: PUSH
7981: LD_INT 75
7983: PUSH
7984: LD_INT 79
7986: PUSH
7987: LD_INT 2
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: PUSH
7996: LD_INT 4
7998: PUSH
7999: LD_INT 113
8001: PUSH
8002: LD_INT 94
8004: PUSH
8005: LD_INT 4
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: PUSH
8014: LD_INT 29
8016: PUSH
8017: LD_INT 106
8019: PUSH
8020: LD_INT 97
8022: PUSH
8023: LD_INT 3
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: PUSH
8032: LD_INT 26
8034: PUSH
8035: LD_INT 93
8037: PUSH
8038: LD_INT 97
8040: PUSH
8041: LD_INT 5
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 2
8052: PUSH
8053: LD_INT 100
8055: PUSH
8056: LD_INT 89
8058: PUSH
8059: LD_INT 3
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: PUSH
8068: LD_INT 17
8070: PUSH
8071: LD_INT 96
8073: PUSH
8074: LD_INT 89
8076: PUSH
8077: LD_INT 1
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 32
8088: PUSH
8089: LD_INT 78
8091: PUSH
8092: LD_INT 94
8094: PUSH
8095: LD_INT 1
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: PUSH
8104: LD_INT 32
8106: PUSH
8107: LD_INT 95
8109: PUSH
8110: LD_INT 82
8112: PUSH
8113: LD_INT 3
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: PUSH
8122: LD_INT 32
8124: PUSH
8125: LD_INT 104
8127: PUSH
8128: LD_INT 85
8130: PUSH
8131: LD_INT 2
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: PUSH
8140: LD_INT 32
8142: PUSH
8143: LD_INT 81
8145: PUSH
8146: LD_INT 78
8148: PUSH
8149: LD_INT 2
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 33
8160: PUSH
8161: LD_INT 109
8163: PUSH
8164: LD_INT 90
8166: PUSH
8167: LD_INT 3
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 33
8178: PUSH
8179: LD_INT 88
8181: PUSH
8182: LD_INT 79
8184: PUSH
8185: LD_INT 3
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: PUSH
8194: LD_INT 33
8196: PUSH
8197: LD_INT 76
8199: PUSH
8200: LD_INT 87
8202: PUSH
8203: LD_INT 1
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 26
8214: PUSH
8215: LD_INT 96
8217: PUSH
8218: LD_INT 97
8220: PUSH
8221: LD_INT 5
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: LD_INT 26
8232: PUSH
8233: LD_INT 85
8235: PUSH
8236: LD_INT 84
8238: PUSH
8239: LD_INT 2
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 6
8250: PUSH
8251: LD_INT 88
8253: PUSH
8254: LD_INT 95
8256: PUSH
8257: LD_INT 0
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: PUSH
8266: LD_INT 19
8268: PUSH
8269: LD_INT 103
8271: PUSH
8272: LD_INT 89
8274: PUSH
8275: LD_INT 4
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: PUSH
8284: LD_INT 16
8286: PUSH
8287: LD_INT 97
8289: PUSH
8290: LD_INT 86
8292: PUSH
8293: LD_INT 2
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: PUSH
8302: LD_INT 24
8304: PUSH
8305: LD_INT 100
8307: PUSH
8308: LD_INT 85
8310: PUSH
8311: LD_INT 3
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: ST_TO_ADDR
// for i := 1 to buildingsTab do
8341: LD_ADDR_VAR 0 2
8345: PUSH
8346: DOUBLE
8347: LD_INT 1
8349: DEC
8350: ST_TO_ADDR
8351: LD_VAR 0 4
8355: PUSH
8356: FOR_TO
8357: IFFALSE 8430
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8359: LD_VAR 0 3
8363: PPUSH
8364: LD_VAR 0 4
8368: PUSH
8369: LD_VAR 0 2
8373: ARRAY
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: PPUSH
8379: LD_VAR 0 4
8383: PUSH
8384: LD_VAR 0 2
8388: ARRAY
8389: PUSH
8390: LD_INT 2
8392: ARRAY
8393: PPUSH
8394: LD_VAR 0 4
8398: PUSH
8399: LD_VAR 0 2
8403: ARRAY
8404: PUSH
8405: LD_INT 3
8407: ARRAY
8408: PPUSH
8409: LD_VAR 0 4
8413: PUSH
8414: LD_VAR 0 2
8418: ARRAY
8419: PUSH
8420: LD_INT 4
8422: ARRAY
8423: PPUSH
8424: CALL_OW 205
8428: GO 8356
8430: POP
8431: POP
// end ;
8432: LD_VAR 0 1
8436: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8437: LD_INT 0
8439: PPUSH
8440: PPUSH
// for i in charactersList do
8441: LD_ADDR_VAR 0 4
8445: PUSH
8446: LD_VAR 0 1
8450: PUSH
8451: FOR_IN
8452: IFFALSE 8470
// SaveCharacters ( i , ident ) ;
8454: LD_VAR 0 4
8458: PPUSH
8459: LD_VAR 0 2
8463: PPUSH
8464: CALL_OW 38
8468: GO 8451
8470: POP
8471: POP
// end ;
8472: LD_VAR 0 3
8476: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8477: LD_INT 0
8479: PPUSH
8480: PPUSH
8481: PPUSH
8482: PPUSH
8483: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8484: LD_ADDR_VAR 0 8
8488: PUSH
8489: LD_INT 48
8491: PUSH
8492: LD_INT 49
8494: PUSH
8495: LD_INT 50
8497: PUSH
8498: LD_INT 20
8500: PUSH
8501: LD_INT 1
8503: PUSH
8504: LD_INT 51
8506: PUSH
8507: LD_INT 52
8509: PUSH
8510: LD_INT 69
8512: PUSH
8513: LD_INT 39
8515: PUSH
8516: LD_INT 34
8518: PUSH
8519: LD_INT 40
8521: PUSH
8522: LD_INT 53
8524: PUSH
8525: LD_INT 71
8527: PUSH
8528: LD_INT 57
8530: PUSH
8531: LD_INT 58
8533: PUSH
8534: LD_INT 44
8536: PUSH
8537: LD_INT 32
8539: PUSH
8540: LD_INT 27
8542: PUSH
8543: LD_INT 23
8545: PUSH
8546: LD_INT 33
8548: PUSH
8549: LD_INT 59
8551: PUSH
8552: LD_INT 54
8554: PUSH
8555: LD_INT 55
8557: PUSH
8558: LD_INT 56
8560: PUSH
8561: LD_INT 63
8563: PUSH
8564: LD_INT 64
8566: PUSH
8567: LD_INT 65
8569: PUSH
8570: LD_INT 30
8572: PUSH
8573: LD_INT 31
8575: PUSH
8576: LD_INT 21
8578: PUSH
8579: LD_INT 22
8581: PUSH
8582: LD_INT 25
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8619: LD_ADDR_VAR 0 5
8623: PUSH
8624: DOUBLE
8625: LD_INT 1
8627: DEC
8628: ST_TO_ADDR
8629: LD_VAR 0 8
8633: PUSH
8634: FOR_TO
8635: IFFALSE 8711
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8637: LD_VAR 0 8
8641: PUSH
8642: LD_VAR 0 5
8646: ARRAY
8647: PPUSH
8648: LD_VAR 0 1
8652: PPUSH
8653: CALL_OW 321
8657: PUSH
8658: LD_INT 1
8660: EQUAL
8661: PUSH
8662: LD_VAR 0 8
8666: PUSH
8667: LD_VAR 0 5
8671: ARRAY
8672: PPUSH
8673: LD_VAR 0 3
8677: PPUSH
8678: CALL_OW 482
8682: PUSH
8683: LD_INT 1
8685: EQUAL
8686: AND
8687: IFFALSE 8709
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8689: LD_VAR 0 2
8693: PPUSH
8694: LD_VAR 0 8
8698: PUSH
8699: LD_VAR 0 5
8703: ARRAY
8704: PPUSH
8705: CALL_OW 184
8709: GO 8634
8711: POP
8712: POP
// end ;
8713: LD_VAR 0 4
8717: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8718: LD_INT 0
8720: PPUSH
8721: PPUSH
8722: PPUSH
8723: PPUSH
8724: PPUSH
8725: PPUSH
8726: PPUSH
8727: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8728: LD_ADDR_VAR 0 6
8732: PUSH
8733: LD_VAR 0 2
8737: PPUSH
8738: LD_INT 22
8740: PUSH
8741: LD_VAR 0 1
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PUSH
8750: LD_INT 56
8752: PUSH
8753: EMPTY
8754: LIST
8755: PUSH
8756: LD_INT 24
8758: PUSH
8759: LD_INT 700
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 3
8768: PUSH
8769: LD_INT 60
8771: PUSH
8772: EMPTY
8773: LIST
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: PUSH
8779: LD_INT 2
8781: PUSH
8782: LD_INT 25
8784: PUSH
8785: LD_INT 1
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: LD_INT 25
8794: PUSH
8795: LD_INT 5
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: LD_INT 25
8804: PUSH
8805: LD_INT 8
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 25
8814: PUSH
8815: LD_INT 9
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: PPUSH
8836: CALL_OW 70
8840: PUSH
8841: LD_EXP 24
8845: PUSH
8846: EMPTY
8847: LIST
8848: DIFF
8849: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8850: LD_ADDR_VAR 0 7
8854: PUSH
8855: LD_VAR 0 2
8859: PPUSH
8860: LD_INT 22
8862: PUSH
8863: LD_VAR 0 1
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 30
8874: PUSH
8875: LD_INT 32
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: LD_INT 58
8884: PUSH
8885: EMPTY
8886: LIST
8887: PUSH
8888: LD_INT 24
8890: PUSH
8891: LD_INT 251
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: PPUSH
8904: CALL_OW 70
8908: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8909: LD_ADDR_VAR 0 9
8913: PUSH
8914: LD_VAR 0 2
8918: PPUSH
8919: LD_INT 22
8921: PUSH
8922: LD_VAR 0 1
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: LD_INT 2
8933: PUSH
8934: LD_INT 30
8936: PUSH
8937: LD_INT 4
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: PUSH
8944: LD_INT 30
8946: PUSH
8947: LD_INT 5
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: LIST
8958: PUSH
8959: LD_INT 24
8961: PUSH
8962: LD_INT 251
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: LIST
8973: PPUSH
8974: CALL_OW 70
8978: ST_TO_ADDR
// if barrackList > 0 then
8979: LD_VAR 0 9
8983: PUSH
8984: LD_INT 0
8986: GREATER
8987: IFFALSE 9135
// begin if turretList = 0 then
8989: LD_VAR 0 7
8993: PUSH
8994: LD_INT 0
8996: EQUAL
8997: IFFALSE 9039
// begin if soldiers_list > 0 then
8999: LD_VAR 0 6
9003: PUSH
9004: LD_INT 0
9006: GREATER
9007: IFFALSE 9037
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9009: LD_VAR 0 6
9013: PPUSH
9014: LD_VAR 0 9
9018: PUSH
9019: LD_INT 1
9021: PPUSH
9022: LD_VAR 0 9
9026: PPUSH
9027: CALL_OW 12
9031: ARRAY
9032: PPUSH
9033: CALL_OW 120
// end else
9037: GO 9135
// begin for i in barrackList do
9039: LD_ADDR_VAR 0 4
9043: PUSH
9044: LD_VAR 0 9
9048: PUSH
9049: FOR_IN
9050: IFFALSE 9133
// begin insideUnits = UnitsInside ( i ) ;
9052: LD_ADDR_VAR 0 10
9056: PUSH
9057: LD_VAR 0 4
9061: PPUSH
9062: CALL_OW 313
9066: ST_TO_ADDR
// if insideUnits > 0 then
9067: LD_VAR 0 10
9071: PUSH
9072: LD_INT 0
9074: GREATER
9075: IFFALSE 9099
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9077: LD_VAR 0 10
9081: PUSH
9082: LD_INT 1
9084: ARRAY
9085: PPUSH
9086: LD_VAR 0 7
9090: PUSH
9091: LD_INT 1
9093: ARRAY
9094: PPUSH
9095: CALL_OW 120
// if soldiers_list > 0 then
9099: LD_VAR 0 6
9103: PUSH
9104: LD_INT 0
9106: GREATER
9107: IFFALSE 9131
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9109: LD_VAR 0 6
9113: PUSH
9114: LD_INT 1
9116: ARRAY
9117: PPUSH
9118: LD_VAR 0 7
9122: PUSH
9123: LD_INT 1
9125: ARRAY
9126: PPUSH
9127: CALL_OW 120
// end ;
9131: GO 9049
9133: POP
9134: POP
// end ; end ; end ;
9135: LD_VAR 0 3
9139: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
9140: LD_INT 0
9142: PPUSH
9143: PPUSH
9144: PPUSH
9145: PPUSH
9146: PPUSH
9147: PPUSH
// for i = 1 to vehCount do
9148: LD_ADDR_VAR 0 8
9152: PUSH
9153: DOUBLE
9154: LD_INT 1
9156: DEC
9157: ST_TO_ADDR
9158: LD_VAR 0 6
9162: PUSH
9163: FOR_TO
9164: IFFALSE 9371
// begin uc_side = side ;
9166: LD_ADDR_OWVAR 20
9170: PUSH
9171: LD_VAR 0 1
9175: ST_TO_ADDR
// uc_nation = nation ;
9176: LD_ADDR_OWVAR 21
9180: PUSH
9181: LD_VAR 0 3
9185: ST_TO_ADDR
// vc_Chassis = 22 ;
9186: LD_ADDR_OWVAR 37
9190: PUSH
9191: LD_INT 22
9193: ST_TO_ADDR
// vc_engine = 1 ;
9194: LD_ADDR_OWVAR 39
9198: PUSH
9199: LD_INT 1
9201: ST_TO_ADDR
// vc_control = 1 ;
9202: LD_ADDR_OWVAR 38
9206: PUSH
9207: LD_INT 1
9209: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
9210: LD_ADDR_OWVAR 40
9214: PUSH
9215: LD_INT 43
9217: PUSH
9218: LD_INT 44
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PUSH
9225: LD_INT 1
9227: PPUSH
9228: LD_INT 2
9230: PPUSH
9231: CALL_OW 12
9235: ARRAY
9236: ST_TO_ADDR
// veh = CreateVehicle ;
9237: LD_ADDR_VAR 0 12
9241: PUSH
9242: CALL_OW 45
9246: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9247: LD_VAR 0 12
9251: PPUSH
9252: LD_VAR 0 2
9256: PPUSH
9257: LD_INT 0
9259: PPUSH
9260: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9264: LD_ADDR_EXP 32
9268: PUSH
9269: LD_EXP 32
9273: PUSH
9274: LD_VAR 0 12
9278: ADD
9279: ST_TO_ADDR
// hc_class = 3 ;
9280: LD_ADDR_OWVAR 28
9284: PUSH
9285: LD_INT 3
9287: ST_TO_ADDR
// hc_name =  ;
9288: LD_ADDR_OWVAR 26
9292: PUSH
9293: LD_STRING 
9295: ST_TO_ADDR
// hc_gallery =  ;
9296: LD_ADDR_OWVAR 33
9300: PUSH
9301: LD_STRING 
9303: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9304: LD_INT 0
9306: PPUSH
9307: LD_INT 3
9309: PPUSH
9310: LD_EXP 25
9314: PPUSH
9315: LD_EXP 26
9319: PPUSH
9320: CALL_OW 12
9324: PPUSH
9325: CALL_OW 380
// un = CreateHuman ;
9329: LD_ADDR_VAR 0 10
9333: PUSH
9334: CALL_OW 44
9338: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9339: LD_VAR 0 10
9343: PPUSH
9344: LD_VAR 0 12
9348: PPUSH
9349: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9353: LD_ADDR_EXP 32
9357: PUSH
9358: LD_EXP 32
9362: PUSH
9363: LD_VAR 0 10
9367: ADD
9368: ST_TO_ADDR
// end ;
9369: GO 9163
9371: POP
9372: POP
// end ;
9373: LD_VAR 0 7
9377: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9378: LD_INT 0
9380: PPUSH
9381: PPUSH
9382: PPUSH
9383: PPUSH
9384: PPUSH
9385: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9386: LD_VAR 0 2
9390: PPUSH
9391: LD_INT 22
9393: PUSH
9394: LD_VAR 0 1
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PUSH
9403: EMPTY
9404: LIST
9405: PPUSH
9406: CALL_OW 70
9410: PUSH
9411: LD_INT 0
9413: EQUAL
9414: PUSH
9415: LD_EXP 32
9419: AND
9420: IFFALSE 9707
// begin for i in defenders_list do
9422: LD_ADDR_VAR 0 4
9426: PUSH
9427: LD_EXP 32
9431: PUSH
9432: FOR_IN
9433: IFFALSE 9705
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9435: LD_VAR 0 4
9439: PPUSH
9440: LD_INT 63
9442: PPUSH
9443: LD_INT 75
9445: PPUSH
9446: CALL_OW 297
9450: PUSH
9451: LD_INT 8
9453: GREATER
9454: PUSH
9455: LD_VAR 0 4
9459: PPUSH
9460: CALL_OW 314
9464: NOT
9465: AND
9466: IFFALSE 9485
// ComMoveXY ( i , 63 , 75 ) else
9468: LD_VAR 0 4
9472: PPUSH
9473: LD_INT 63
9475: PPUSH
9476: LD_INT 75
9478: PPUSH
9479: CALL_OW 111
9483: GO 9703
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9485: LD_VAR 0 4
9489: PPUSH
9490: CALL_OW 257
9494: PUSH
9495: LD_INT 3
9497: EQUAL
9498: PUSH
9499: LD_VAR 0 4
9503: PPUSH
9504: CALL_OW 310
9508: NOT
9509: AND
9510: PUSH
9511: LD_VAR 0 4
9515: PPUSH
9516: CALL_OW 314
9520: NOT
9521: AND
9522: IFFALSE 9575
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9524: LD_VAR 0 4
9528: PPUSH
9529: LD_EXP 32
9533: PPUSH
9534: LD_INT 58
9536: PUSH
9537: EMPTY
9538: LIST
9539: PUSH
9540: LD_INT 24
9542: PUSH
9543: LD_INT 1000
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: PPUSH
9554: CALL_OW 72
9558: PPUSH
9559: LD_VAR 0 4
9563: PPUSH
9564: CALL_OW 74
9568: PPUSH
9569: CALL_OW 120
9573: GO 9703
// if GetFuel ( i ) < 100 then
9575: LD_VAR 0 4
9579: PPUSH
9580: CALL_OW 261
9584: PUSH
9585: LD_INT 100
9587: LESS
9588: IFFALSE 9604
// SetFuel ( defenders_list , 100 ) else
9590: LD_EXP 32
9594: PPUSH
9595: LD_INT 100
9597: PPUSH
9598: CALL_OW 240
9602: GO 9703
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9604: LD_VAR 0 4
9608: PPUSH
9609: CALL_OW 263
9613: PUSH
9614: LD_INT 1
9616: EQUAL
9617: PUSH
9618: LD_VAR 0 4
9622: PPUSH
9623: CALL_OW 256
9627: PUSH
9628: LD_INT 990
9630: LESS
9631: AND
9632: IFFALSE 9703
// begin veh := i ;
9634: LD_ADDR_VAR 0 7
9638: PUSH
9639: LD_VAR 0 4
9643: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9644: LD_ADDR_VAR 0 8
9648: PUSH
9649: LD_VAR 0 4
9653: PPUSH
9654: CALL_OW 311
9658: ST_TO_ADDR
// if veh then
9659: LD_VAR 0 7
9663: IFFALSE 9703
// begin ComMoveXY ( i , 63 , 75 ) ;
9665: LD_VAR 0 4
9669: PPUSH
9670: LD_INT 63
9672: PPUSH
9673: LD_INT 75
9675: PPUSH
9676: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9680: LD_VAR 0 7
9684: PPUSH
9685: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9689: LD_VAR 0 8
9693: PPUSH
9694: LD_VAR 0 7
9698: PPUSH
9699: CALL_OW 189
// end ; end ; end ;
9703: GO 9432
9705: POP
9706: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9707: LD_ADDR_VAR 0 6
9711: PUSH
9712: LD_VAR 0 2
9716: PPUSH
9717: LD_INT 22
9719: PUSH
9720: LD_VAR 0 1
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: EMPTY
9730: LIST
9731: PPUSH
9732: CALL_OW 70
9736: ST_TO_ADDR
// if tmp and defenders_list then
9737: LD_VAR 0 6
9741: PUSH
9742: LD_EXP 32
9746: AND
9747: IFFALSE 9916
// for i in defenders_list do
9749: LD_ADDR_VAR 0 4
9753: PUSH
9754: LD_EXP 32
9758: PUSH
9759: FOR_IN
9760: IFFALSE 9914
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9762: LD_VAR 0 4
9766: PPUSH
9767: CALL_OW 257
9771: PUSH
9772: LD_INT 3
9774: EQUAL
9775: PUSH
9776: LD_VAR 0 4
9780: PPUSH
9781: CALL_OW 310
9785: NOT
9786: AND
9787: IFFALSE 9826
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9789: LD_VAR 0 4
9793: PPUSH
9794: LD_EXP 32
9798: PPUSH
9799: LD_INT 58
9801: PUSH
9802: EMPTY
9803: LIST
9804: PPUSH
9805: CALL_OW 72
9809: PPUSH
9810: LD_VAR 0 4
9814: PPUSH
9815: CALL_OW 74
9819: PPUSH
9820: CALL_OW 120
9824: GO 9912
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9826: LD_VAR 0 4
9830: PPUSH
9831: CALL_OW 314
9835: NOT
9836: PUSH
9837: LD_VAR 0 4
9841: PPUSH
9842: LD_VAR 0 2
9846: PPUSH
9847: CALL_OW 308
9851: AND
9852: IFFALSE 9880
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9854: LD_VAR 0 4
9858: PPUSH
9859: LD_VAR 0 6
9863: PPUSH
9864: LD_VAR 0 4
9868: PPUSH
9869: CALL_OW 74
9873: PPUSH
9874: CALL_OW 115
9878: GO 9912
// if not IsInArea ( i , defenseArea ) then
9880: LD_VAR 0 4
9884: PPUSH
9885: LD_VAR 0 2
9889: PPUSH
9890: CALL_OW 308
9894: NOT
9895: IFFALSE 9912
// ComMoveXY ( i , 63 , 75 ) ;
9897: LD_VAR 0 4
9901: PPUSH
9902: LD_INT 63
9904: PPUSH
9905: LD_INT 75
9907: PPUSH
9908: CALL_OW 111
// end ;
9912: GO 9759
9914: POP
9915: POP
// end ;
9916: LD_VAR 0 3
9920: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9921: LD_INT 0
9923: PPUSH
9924: PPUSH
9925: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9926: LD_INT 22
9928: PUSH
9929: LD_VAR 0 1
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: LD_INT 21
9940: PUSH
9941: LD_INT 2
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PPUSH
9952: CALL_OW 69
9956: PUSH
9957: LD_VAR 0 3
9961: LESSEQUAL
9962: IFFALSE 10070
// begin for i = 1 to vehCount do
9964: LD_ADDR_VAR 0 9
9968: PUSH
9969: DOUBLE
9970: LD_INT 1
9972: DEC
9973: ST_TO_ADDR
9974: LD_VAR 0 3
9978: PUSH
9979: FOR_TO
9980: IFFALSE 10068
// begin weapon = weaponTab [ i ] ;
9982: LD_ADDR_VAR 0 10
9986: PUSH
9987: LD_VAR 0 4
9991: PUSH
9992: LD_VAR 0 9
9996: ARRAY
9997: ST_TO_ADDR
// if weapon = 46 then
9998: LD_VAR 0 10
10002: PUSH
10003: LD_INT 46
10005: EQUAL
10006: IFFALSE 10037
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
10008: LD_VAR 0 2
10012: PPUSH
10013: LD_INT 24
10015: PPUSH
10016: LD_VAR 0 5
10020: PPUSH
10021: LD_VAR 0 6
10025: PPUSH
10026: LD_VAR 0 10
10030: PPUSH
10031: CALL_OW 185
// end else
10035: GO 10066
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
10037: LD_VAR 0 2
10041: PPUSH
10042: LD_VAR 0 7
10046: PPUSH
10047: LD_VAR 0 5
10051: PPUSH
10052: LD_VAR 0 6
10056: PPUSH
10057: LD_VAR 0 10
10061: PPUSH
10062: CALL_OW 185
// end ; end ;
10066: GO 9979
10068: POP
10069: POP
// end ; end ;
10070: LD_VAR 0 8
10074: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
10075: LD_INT 0
10077: PPUSH
10078: PPUSH
10079: PPUSH
10080: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
10081: LD_ADDR_VAR 0 8
10085: PUSH
10086: LD_INT 22
10088: PUSH
10089: LD_VAR 0 1
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: LD_INT 21
10100: PUSH
10101: LD_INT 2
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PUSH
10108: LD_INT 3
10110: PUSH
10111: LD_INT 24
10113: PUSH
10114: LD_INT 650
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: LIST
10129: PPUSH
10130: CALL_OW 69
10134: ST_TO_ADDR
// if damageVehicles > 0 then
10135: LD_VAR 0 8
10139: PUSH
10140: LD_INT 0
10142: GREATER
10143: IFFALSE 10164
// ComMoveXY ( damageVehicles , repX , repY ) ;
10145: LD_VAR 0 8
10149: PPUSH
10150: LD_VAR 0 3
10154: PPUSH
10155: LD_VAR 0 4
10159: PPUSH
10160: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10164: LD_VAR 0 8
10168: PPUSH
10169: LD_INT 95
10171: PUSH
10172: LD_VAR 0 2
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 3
10183: PUSH
10184: LD_INT 58
10186: PUSH
10187: EMPTY
10188: LIST
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: PPUSH
10198: CALL_OW 72
10202: PUSH
10203: LD_INT 0
10205: GREATER
10206: IFFALSE 10273
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
10208: LD_ADDR_VAR 0 6
10212: PUSH
10213: LD_VAR 0 8
10217: PPUSH
10218: LD_INT 95
10220: PUSH
10221: LD_VAR 0 2
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: LD_INT 3
10232: PUSH
10233: LD_INT 58
10235: PUSH
10236: EMPTY
10237: LIST
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PPUSH
10247: CALL_OW 72
10251: PUSH
10252: FOR_IN
10253: IFFALSE 10271
// ComExitVehicle ( UnitsInside ( i ) ) ;
10255: LD_VAR 0 6
10259: PPUSH
10260: CALL_OW 313
10264: PPUSH
10265: CALL_OW 121
10269: GO 10252
10271: POP
10272: POP
// end ;
10273: LD_VAR 0 5
10277: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10278: LD_INT 0
10280: PPUSH
10281: PPUSH
10282: PPUSH
10283: PPUSH
10284: PPUSH
10285: PPUSH
10286: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10287: LD_ADDR_VAR 0 8
10291: PUSH
10292: LD_INT 22
10294: PUSH
10295: LD_VAR 0 1
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PUSH
10304: LD_INT 21
10306: PUSH
10307: LD_INT 2
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PUSH
10314: LD_INT 24
10316: PUSH
10317: LD_INT 250
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 3
10326: PUSH
10327: LD_INT 58
10329: PUSH
10330: EMPTY
10331: LIST
10332: PUSH
10333: LD_INT 2
10335: PUSH
10336: LD_INT 34
10338: PUSH
10339: LD_INT 43
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 34
10348: PUSH
10349: LD_INT 44
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 34
10358: PUSH
10359: LD_INT 46
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: LIST
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: PPUSH
10383: CALL_OW 69
10387: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
10388: LD_INT 22
10390: PUSH
10391: LD_VAR 0 1
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: LD_INT 21
10402: PUSH
10403: LD_INT 2
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PUSH
10410: LD_INT 24
10412: PUSH
10413: LD_INT 1000
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: LD_INT 3
10422: PUSH
10423: LD_INT 58
10425: PUSH
10426: EMPTY
10427: LIST
10428: PUSH
10429: LD_INT 2
10431: PUSH
10432: LD_INT 34
10434: PUSH
10435: LD_INT 43
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 34
10444: PUSH
10445: LD_INT 44
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: PUSH
10452: LD_INT 34
10454: PUSH
10455: LD_INT 46
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: LIST
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: PPUSH
10479: CALL_OW 69
10483: PUSH
10484: LD_INT 5
10486: PUSH
10487: LD_INT 6
10489: PUSH
10490: LD_INT 7
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: PUSH
10498: LD_OWVAR 67
10502: ARRAY
10503: GREATEREQUAL
10504: IFFALSE 11069
// repeat wait ( 0 0$1 ) ;
10506: LD_INT 35
10508: PPUSH
10509: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10513: LD_ADDR_VAR 0 8
10517: PUSH
10518: LD_INT 22
10520: PUSH
10521: LD_VAR 0 1
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PUSH
10530: LD_INT 21
10532: PUSH
10533: LD_INT 2
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 24
10542: PUSH
10543: LD_INT 250
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PUSH
10550: LD_INT 2
10552: PUSH
10553: LD_INT 34
10555: PUSH
10556: LD_INT 43
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 34
10565: PUSH
10566: LD_INT 44
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 34
10575: PUSH
10576: LD_INT 46
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 3
10591: PUSH
10592: LD_INT 58
10594: PUSH
10595: EMPTY
10596: LIST
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: PPUSH
10609: CALL_OW 69
10613: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10614: LD_INT 22
10616: PUSH
10617: LD_VAR 0 1
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: LD_INT 95
10628: PUSH
10629: LD_VAR 0 2
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PPUSH
10642: CALL_OW 69
10646: NOT
10647: PUSH
10648: LD_VAR 0 11
10652: PUSH
10653: LD_INT 0
10655: EQUAL
10656: AND
10657: IFFALSE 10712
// for i := 1 to wayX do
10659: LD_ADDR_VAR 0 6
10663: PUSH
10664: DOUBLE
10665: LD_INT 1
10667: DEC
10668: ST_TO_ADDR
10669: LD_VAR 0 3
10673: PUSH
10674: FOR_TO
10675: IFFALSE 10710
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10677: LD_VAR 0 8
10681: PPUSH
10682: LD_VAR 0 3
10686: PUSH
10687: LD_VAR 0 6
10691: ARRAY
10692: PPUSH
10693: LD_VAR 0 4
10697: PUSH
10698: LD_VAR 0 6
10702: ARRAY
10703: PPUSH
10704: CALL_OW 114
10708: GO 10674
10710: POP
10711: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10712: LD_INT 22
10714: PUSH
10715: LD_VAR 0 1
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: LD_INT 95
10726: PUSH
10727: LD_VAR 0 2
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PPUSH
10740: CALL_OW 69
10744: IFFALSE 10968
// begin seeEnemy = 1 ;
10746: LD_ADDR_VAR 0 11
10750: PUSH
10751: LD_INT 1
10753: ST_TO_ADDR
// for j in vehiclesOK do
10754: LD_ADDR_VAR 0 7
10758: PUSH
10759: LD_VAR 0 8
10763: PUSH
10764: FOR_IN
10765: IFFALSE 10966
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10767: LD_ADDR_VAR 0 9
10771: PUSH
10772: LD_INT 81
10774: PUSH
10775: LD_VAR 0 1
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: PUSH
10784: LD_INT 101
10786: PUSH
10787: LD_INT 1
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PPUSH
10798: CALL_OW 69
10802: PPUSH
10803: LD_VAR 0 7
10807: PPUSH
10808: CALL_OW 74
10812: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10813: LD_ADDR_VAR 0 10
10817: PUSH
10818: LD_INT 81
10820: PUSH
10821: LD_VAR 0 1
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 101
10832: PUSH
10833: LD_INT 1
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: LD_INT 2
10842: PUSH
10843: LD_INT 59
10845: PUSH
10846: EMPTY
10847: LIST
10848: PUSH
10849: LD_INT 21
10851: PUSH
10852: LD_INT 1
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: LD_INT 21
10861: PUSH
10862: LD_INT 2
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: PUSH
10880: EMPTY
10881: LIST
10882: PPUSH
10883: CALL_OW 69
10887: PPUSH
10888: LD_VAR 0 7
10892: PPUSH
10893: CALL_OW 74
10897: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10898: LD_VAR 0 7
10902: PPUSH
10903: LD_VAR 0 9
10907: PPUSH
10908: CALL_OW 296
10912: PUSH
10913: LD_INT 8
10915: PLUS
10916: PUSH
10917: LD_VAR 0 7
10921: PPUSH
10922: LD_VAR 0 10
10926: PPUSH
10927: CALL_OW 296
10931: LESS
10932: IFFALSE 10950
// ComAttackUnit ( j , target1 ) else
10934: LD_VAR 0 7
10938: PPUSH
10939: LD_VAR 0 9
10943: PPUSH
10944: CALL_OW 115
10948: GO 10964
// ComAttackUnit ( j , target2 ) ;
10950: LD_VAR 0 7
10954: PPUSH
10955: LD_VAR 0 10
10959: PPUSH
10960: CALL_OW 115
// end ;
10964: GO 10764
10966: POP
10967: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10968: LD_INT 22
10970: PUSH
10971: LD_VAR 0 1
10975: PUSH
10976: EMPTY
10977: LIST
10978: LIST
10979: PUSH
10980: LD_INT 21
10982: PUSH
10983: LD_INT 2
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: PUSH
10990: LD_INT 24
10992: PUSH
10993: LD_INT 250
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: PUSH
11000: LD_INT 2
11002: PUSH
11003: LD_INT 34
11005: PUSH
11006: LD_INT 43
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: LD_INT 34
11015: PUSH
11016: LD_INT 44
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: LD_INT 34
11025: PUSH
11026: LD_INT 46
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: PUSH
11039: LD_INT 3
11041: PUSH
11042: LD_INT 58
11044: PUSH
11045: EMPTY
11046: LIST
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: PPUSH
11059: CALL_OW 69
11063: PUSH
11064: LD_INT 0
11066: EQUAL
11067: IFFALSE 10506
// seeEnemy = 0 ;
11069: LD_ADDR_VAR 0 11
11073: PUSH
11074: LD_INT 0
11076: ST_TO_ADDR
// end ;
11077: LD_VAR 0 5
11081: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
11082: LD_INT 0
11084: PPUSH
11085: PPUSH
11086: PPUSH
11087: PPUSH
11088: PPUSH
11089: PPUSH
// repeat wait ( 0 0$1 ) ;
11090: LD_INT 35
11092: PPUSH
11093: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
11097: LD_ADDR_VAR 0 7
11101: PUSH
11102: LD_INT 22
11104: PUSH
11105: LD_VAR 0 1
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: PUSH
11114: LD_INT 21
11116: PUSH
11117: LD_INT 2
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: PUSH
11124: LD_INT 24
11126: PUSH
11127: LD_INT 651
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: LIST
11138: PPUSH
11139: CALL_OW 69
11143: ST_TO_ADDR
// for j in vehiclesOK do
11144: LD_ADDR_VAR 0 4
11148: PUSH
11149: LD_VAR 0 7
11153: PUSH
11154: FOR_IN
11155: IFFALSE 11356
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
11157: LD_ADDR_VAR 0 5
11161: PUSH
11162: LD_INT 81
11164: PUSH
11165: LD_VAR 0 1
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: LD_INT 101
11176: PUSH
11177: LD_INT 1
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: PPUSH
11188: CALL_OW 69
11192: PPUSH
11193: LD_VAR 0 4
11197: PPUSH
11198: CALL_OW 74
11202: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
11203: LD_ADDR_VAR 0 6
11207: PUSH
11208: LD_INT 81
11210: PUSH
11211: LD_VAR 0 1
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 101
11222: PUSH
11223: LD_INT 1
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: LD_INT 2
11232: PUSH
11233: LD_INT 59
11235: PUSH
11236: EMPTY
11237: LIST
11238: PUSH
11239: LD_INT 21
11241: PUSH
11242: LD_INT 1
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 21
11251: PUSH
11252: LD_INT 2
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: LIST
11269: PUSH
11270: EMPTY
11271: LIST
11272: PPUSH
11273: CALL_OW 69
11277: PPUSH
11278: LD_VAR 0 4
11282: PPUSH
11283: CALL_OW 74
11287: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11288: LD_VAR 0 4
11292: PPUSH
11293: LD_VAR 0 5
11297: PPUSH
11298: CALL_OW 296
11302: PUSH
11303: LD_INT 8
11305: PLUS
11306: PUSH
11307: LD_VAR 0 4
11311: PPUSH
11312: LD_VAR 0 6
11316: PPUSH
11317: CALL_OW 296
11321: LESS
11322: IFFALSE 11340
// ComAttackUnit ( j , target1 ) else
11324: LD_VAR 0 4
11328: PPUSH
11329: LD_VAR 0 5
11333: PPUSH
11334: CALL_OW 115
11338: GO 11354
// ComAttackUnit ( j , target2 ) ;
11340: LD_VAR 0 4
11344: PPUSH
11345: LD_VAR 0 6
11349: PPUSH
11350: CALL_OW 115
// end ;
11354: GO 11154
11356: POP
11357: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11358: LD_INT 22
11360: PUSH
11361: LD_VAR 0 1
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: LD_INT 21
11372: PUSH
11373: LD_INT 2
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 24
11382: PUSH
11383: LD_INT 250
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: LIST
11394: PPUSH
11395: CALL_OW 69
11399: PUSH
11400: LD_INT 0
11402: EQUAL
11403: IFFALSE 11090
// end ;
11405: LD_VAR 0 2
11409: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11410: LD_INT 0
11412: PPUSH
11413: PPUSH
11414: PPUSH
11415: PPUSH
11416: PPUSH
11417: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11418: LD_ADDR_VAR 0 8
11422: PUSH
11423: LD_VAR 0 2
11427: PPUSH
11428: CALL_OW 313
11432: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11433: LD_ADDR_VAR 0 9
11437: PUSH
11438: LD_VAR 0 3
11442: PPUSH
11443: LD_INT 22
11445: PUSH
11446: LD_VAR 0 1
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 25
11457: PUSH
11458: LD_INT 2
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 24
11467: PUSH
11468: LD_INT 750
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 3
11477: PUSH
11478: LD_INT 54
11480: PUSH
11481: EMPTY
11482: LIST
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: PPUSH
11494: CALL_OW 70
11498: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11499: LD_ADDR_VAR 0 6
11503: PUSH
11504: LD_VAR 0 3
11508: PPUSH
11509: LD_INT 22
11511: PUSH
11512: LD_VAR 0 1
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: LD_INT 21
11523: PUSH
11524: LD_INT 3
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: LD_INT 3
11533: PUSH
11534: LD_INT 24
11536: PUSH
11537: LD_INT 1000
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: LIST
11552: PUSH
11553: EMPTY
11554: LIST
11555: PPUSH
11556: CALL_OW 70
11560: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11561: LD_VAR 0 6
11565: NOT
11566: PUSH
11567: LD_INT 22
11569: PUSH
11570: LD_VAR 0 1
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 25
11581: PUSH
11582: LD_INT 2
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: LD_INT 24
11591: PUSH
11592: LD_INT 250
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: PPUSH
11604: CALL_OW 69
11608: NOT
11609: AND
11610: IFFALSE 11614
// exit ;
11612: GO 11811
// if buildings_list > 0 and engineerOkInside then
11614: LD_VAR 0 6
11618: PUSH
11619: LD_INT 0
11621: GREATER
11622: PUSH
11623: LD_VAR 0 8
11627: AND
11628: IFFALSE 11654
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11630: LD_VAR 0 8
11634: PPUSH
11635: LD_INT 25
11637: PUSH
11638: LD_INT 2
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PPUSH
11645: CALL_OW 72
11649: PPUSH
11650: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11654: LD_VAR 0 6
11658: PUSH
11659: LD_INT 0
11661: GREATER
11662: PUSH
11663: LD_VAR 0 9
11667: PUSH
11668: LD_INT 0
11670: GREATER
11671: AND
11672: IFFALSE 11692
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11674: LD_VAR 0 9
11678: PPUSH
11679: LD_VAR 0 6
11683: PUSH
11684: LD_INT 1
11686: ARRAY
11687: PPUSH
11688: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11692: LD_VAR 0 6
11696: PUSH
11697: LD_INT 0
11699: EQUAL
11700: PUSH
11701: LD_VAR 0 4
11705: PUSH
11706: LD_INT 0
11708: EQUAL
11709: AND
11710: PUSH
11711: LD_VAR 0 9
11715: PUSH
11716: LD_INT 0
11718: GREATER
11719: AND
11720: IFFALSE 11736
// ComEnterUnit ( engineerOkOutside , building ) ;
11722: LD_VAR 0 9
11726: PPUSH
11727: LD_VAR 0 2
11731: PPUSH
11732: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11736: LD_VAR 0 9
11740: PUSH
11741: LD_INT 0
11743: GREATER
11744: PUSH
11745: LD_VAR 0 6
11749: PUSH
11750: LD_INT 0
11752: EQUAL
11753: AND
11754: PUSH
11755: LD_VAR 0 4
11759: PUSH
11760: LD_INT 0
11762: GREATER
11763: AND
11764: IFFALSE 11811
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11766: LD_VAR 0 9
11770: PPUSH
11771: LD_VAR 0 4
11775: PUSH
11776: LD_INT 1
11778: ARRAY
11779: PPUSH
11780: LD_VAR 0 4
11784: PUSH
11785: LD_INT 2
11787: ARRAY
11788: PPUSH
11789: LD_VAR 0 4
11793: PUSH
11794: LD_INT 3
11796: ARRAY
11797: PPUSH
11798: LD_VAR 0 4
11802: PUSH
11803: LD_INT 4
11805: ARRAY
11806: PPUSH
11807: CALL_OW 145
// end ;
11811: LD_VAR 0 5
11815: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11816: LD_INT 0
11818: PPUSH
11819: PPUSH
11820: PPUSH
11821: PPUSH
11822: PPUSH
11823: PPUSH
11824: PPUSH
11825: PPUSH
11826: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11827: LD_ADDR_VAR 0 6
11831: PUSH
11832: LD_INT 22
11834: PUSH
11835: LD_VAR 0 1
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 25
11846: PUSH
11847: LD_INT 4
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PUSH
11854: LD_INT 23
11856: PUSH
11857: LD_INT 2
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PUSH
11864: LD_INT 24
11866: PUSH
11867: LD_INT 251
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: PPUSH
11880: CALL_OW 69
11884: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11885: LD_ADDR_VAR 0 7
11889: PUSH
11890: LD_VAR 0 3
11894: PPUSH
11895: LD_INT 22
11897: PUSH
11898: LD_VAR 0 1
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 23
11909: PUSH
11910: LD_INT 2
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 25
11919: PUSH
11920: LD_INT 4
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 50
11929: PUSH
11930: EMPTY
11931: LIST
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: PPUSH
11939: CALL_OW 70
11943: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11944: LD_ADDR_VAR 0 10
11948: PUSH
11949: LD_VAR 0 3
11953: PPUSH
11954: LD_INT 22
11956: PUSH
11957: LD_VAR 0 1
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: LD_INT 21
11968: PUSH
11969: LD_INT 1
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 3
11978: PUSH
11979: LD_INT 25
11981: PUSH
11982: LD_INT 3
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PUSH
11993: LD_INT 3
11995: PUSH
11996: LD_INT 24
11998: PUSH
11999: LD_INT 750
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: PPUSH
12016: CALL_OW 70
12020: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12021: LD_ADDR_VAR 0 11
12025: PUSH
12026: LD_VAR 0 2
12030: PPUSH
12031: LD_INT 22
12033: PUSH
12034: LD_VAR 0 1
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: LD_INT 21
12045: PUSH
12046: LD_INT 1
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 3
12055: PUSH
12056: LD_INT 25
12058: PUSH
12059: LD_INT 3
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PUSH
12070: LD_INT 3
12072: PUSH
12073: LD_INT 24
12075: PUSH
12076: LD_INT 1000
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: PPUSH
12093: CALL_OW 70
12097: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
12098: LD_VAR 0 10
12102: NOT
12103: PUSH
12104: LD_VAR 0 11
12108: NOT
12109: AND
12110: PUSH
12111: LD_VAR 0 6
12115: NOT
12116: AND
12117: IFFALSE 12121
// exit ;
12119: GO 12355
// if damageUnits > 0 and sci_list > 0 then
12121: LD_VAR 0 10
12125: PUSH
12126: LD_INT 0
12128: GREATER
12129: PUSH
12130: LD_VAR 0 6
12134: PUSH
12135: LD_INT 0
12137: GREATER
12138: AND
12139: IFFALSE 12155
// ComMoveToArea ( damageUnits , healArea ) ;
12141: LD_VAR 0 10
12145: PPUSH
12146: LD_VAR 0 2
12150: PPUSH
12151: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
12155: LD_VAR 0 11
12159: PUSH
12160: LD_INT 0
12162: GREATER
12163: PUSH
12164: LD_VAR 0 6
12168: PUSH
12169: LD_INT 0
12171: GREATER
12172: AND
12173: IFFALSE 12184
// ComExitBuilding ( sci_list ) ;
12175: LD_VAR 0 6
12179: PPUSH
12180: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
12184: LD_VAR 0 11
12188: PUSH
12189: LD_INT 0
12191: GREATER
12192: PUSH
12193: LD_VAR 0 7
12197: PUSH
12198: LD_INT 0
12200: GREATER
12201: AND
12202: IFFALSE 12222
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
12204: LD_VAR 0 7
12208: PPUSH
12209: LD_VAR 0 11
12213: PUSH
12214: LD_INT 1
12216: ARRAY
12217: PPUSH
12218: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12222: LD_VAR 0 10
12226: PUSH
12227: LD_INT 0
12229: EQUAL
12230: PUSH
12231: LD_VAR 0 11
12235: PUSH
12236: LD_INT 0
12238: EQUAL
12239: AND
12240: PUSH
12241: LD_VAR 0 7
12245: PUSH
12246: LD_INT 0
12248: GREATER
12249: AND
12250: IFFALSE 12355
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12252: LD_ADDR_VAR 0 12
12256: PUSH
12257: LD_INT 22
12259: PUSH
12260: LD_VAR 0 1
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 21
12271: PUSH
12272: LD_INT 3
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PUSH
12279: LD_INT 30
12281: PUSH
12282: LD_INT 8
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: LIST
12293: PPUSH
12294: CALL_OW 69
12298: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12299: LD_ADDR_VAR 0 13
12303: PUSH
12304: LD_INT 1
12306: PPUSH
12307: LD_VAR 0 12
12311: PPUSH
12312: CALL_OW 12
12316: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12317: LD_VAR 0 7
12321: PPUSH
12322: LD_INT 3
12324: PUSH
12325: LD_INT 60
12327: PUSH
12328: EMPTY
12329: LIST
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PPUSH
12335: CALL_OW 72
12339: PPUSH
12340: LD_VAR 0 12
12344: PUSH
12345: LD_VAR 0 13
12349: ARRAY
12350: PPUSH
12351: CALL_OW 120
// end ; end ;
12355: LD_VAR 0 5
12359: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12360: LD_INT 0
12362: PPUSH
12363: PPUSH
12364: PPUSH
12365: PPUSH
12366: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12367: LD_ADDR_VAR 0 6
12371: PUSH
12372: LD_INT 22
12374: PUSH
12375: LD_VAR 0 1
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 2
12386: PUSH
12387: LD_INT 30
12389: PUSH
12390: LD_INT 31
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: LD_INT 30
12399: PUSH
12400: LD_INT 32
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: LD_INT 30
12409: PUSH
12410: LD_INT 33
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: LD_INT 30
12419: PUSH
12420: LD_INT 4
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PUSH
12427: LD_INT 30
12429: PUSH
12430: LD_INT 5
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PPUSH
12449: CALL_OW 69
12453: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12454: LD_ADDR_VAR 0 7
12458: PUSH
12459: LD_INT 22
12461: PUSH
12462: LD_VAR 0 2
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 21
12473: PUSH
12474: LD_INT 3
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: LD_INT 58
12483: PUSH
12484: EMPTY
12485: LIST
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: LIST
12491: PPUSH
12492: CALL_OW 69
12496: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12497: LD_VAR 0 6
12501: PUSH
12502: LD_INT 0
12504: GREATER
12505: PUSH
12506: LD_VAR 0 7
12510: PUSH
12511: LD_INT 0
12513: GREATER
12514: AND
12515: IFFALSE 12585
// begin for i in turretsList do
12517: LD_ADDR_VAR 0 4
12521: PUSH
12522: LD_VAR 0 6
12526: PUSH
12527: FOR_IN
12528: IFFALSE 12583
// begin for j in enemyBuildings do
12530: LD_ADDR_VAR 0 5
12534: PUSH
12535: LD_VAR 0 7
12539: PUSH
12540: FOR_IN
12541: IFFALSE 12579
// begin if GetDistUnits ( i , j ) < 20 then
12543: LD_VAR 0 4
12547: PPUSH
12548: LD_VAR 0 5
12552: PPUSH
12553: CALL_OW 296
12557: PUSH
12558: LD_INT 20
12560: LESS
12561: IFFALSE 12577
// begin ComAttackUnit ( i , j ) ;
12563: LD_VAR 0 4
12567: PPUSH
12568: LD_VAR 0 5
12572: PPUSH
12573: CALL_OW 115
// end ; end ;
12577: GO 12540
12579: POP
12580: POP
// end ;
12581: GO 12527
12583: POP
12584: POP
// end ; end ;
12585: LD_VAR 0 3
12589: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12590: LD_INT 0
12592: PPUSH
12593: PPUSH
12594: PPUSH
12595: PPUSH
12596: PPUSH
12597: PPUSH
12598: PPUSH
12599: PPUSH
12600: PPUSH
12601: PPUSH
12602: PPUSH
// for i = 1 to medicCount do
12603: LD_ADDR_VAR 0 14
12607: PUSH
12608: DOUBLE
12609: LD_INT 1
12611: DEC
12612: ST_TO_ADDR
12613: LD_VAR 0 7
12617: PUSH
12618: FOR_TO
12619: IFFALSE 12701
// begin uc_side = side ;
12621: LD_ADDR_OWVAR 20
12625: PUSH
12626: LD_VAR 0 1
12630: ST_TO_ADDR
// uc_nation = nation ;
12631: LD_ADDR_OWVAR 21
12635: PUSH
12636: LD_VAR 0 2
12640: ST_TO_ADDR
// hc_name =  ;
12641: LD_ADDR_OWVAR 26
12645: PUSH
12646: LD_STRING 
12648: ST_TO_ADDR
// hc_gallery =  ;
12649: LD_ADDR_OWVAR 33
12653: PUSH
12654: LD_STRING 
12656: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12657: LD_INT 0
12659: PPUSH
12660: LD_INT 4
12662: PPUSH
12663: LD_VAR 0 8
12667: PPUSH
12668: CALL_OW 380
// un = CreateHuman ;
12672: LD_ADDR_VAR 0 16
12676: PUSH
12677: CALL_OW 44
12681: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12682: LD_VAR 0 16
12686: PPUSH
12687: LD_VAR 0 9
12691: PPUSH
12692: LD_INT 0
12694: PPUSH
12695: CALL_OW 49
// end ;
12699: GO 12618
12701: POP
12702: POP
// for i = 1 to soldierCount do
12703: LD_ADDR_VAR 0 14
12707: PUSH
12708: DOUBLE
12709: LD_INT 1
12711: DEC
12712: ST_TO_ADDR
12713: LD_VAR 0 3
12717: PUSH
12718: FOR_TO
12719: IFFALSE 12801
// begin uc_side = side ;
12721: LD_ADDR_OWVAR 20
12725: PUSH
12726: LD_VAR 0 1
12730: ST_TO_ADDR
// uc_nation = nation ;
12731: LD_ADDR_OWVAR 21
12735: PUSH
12736: LD_VAR 0 2
12740: ST_TO_ADDR
// hc_name =  ;
12741: LD_ADDR_OWVAR 26
12745: PUSH
12746: LD_STRING 
12748: ST_TO_ADDR
// hc_gallery =  ;
12749: LD_ADDR_OWVAR 33
12753: PUSH
12754: LD_STRING 
12756: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12757: LD_INT 0
12759: PPUSH
12760: LD_INT 1
12762: PPUSH
12763: LD_VAR 0 8
12767: PPUSH
12768: CALL_OW 380
// un = CreateHuman ;
12772: LD_ADDR_VAR 0 16
12776: PUSH
12777: CALL_OW 44
12781: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12782: LD_VAR 0 16
12786: PPUSH
12787: LD_VAR 0 9
12791: PPUSH
12792: LD_INT 0
12794: PPUSH
12795: CALL_OW 49
// end ;
12799: GO 12718
12801: POP
12802: POP
// for i = 1 to sniperCount do
12803: LD_ADDR_VAR 0 14
12807: PUSH
12808: DOUBLE
12809: LD_INT 1
12811: DEC
12812: ST_TO_ADDR
12813: LD_VAR 0 4
12817: PUSH
12818: FOR_TO
12819: IFFALSE 12901
// begin uc_side = side ;
12821: LD_ADDR_OWVAR 20
12825: PUSH
12826: LD_VAR 0 1
12830: ST_TO_ADDR
// uc_nation = nation ;
12831: LD_ADDR_OWVAR 21
12835: PUSH
12836: LD_VAR 0 2
12840: ST_TO_ADDR
// hc_name =  ;
12841: LD_ADDR_OWVAR 26
12845: PUSH
12846: LD_STRING 
12848: ST_TO_ADDR
// hc_gallery =  ;
12849: LD_ADDR_OWVAR 33
12853: PUSH
12854: LD_STRING 
12856: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12857: LD_INT 0
12859: PPUSH
12860: LD_INT 5
12862: PPUSH
12863: LD_VAR 0 8
12867: PPUSH
12868: CALL_OW 380
// un = CreateHuman ;
12872: LD_ADDR_VAR 0 16
12876: PUSH
12877: CALL_OW 44
12881: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12882: LD_VAR 0 16
12886: PPUSH
12887: LD_VAR 0 9
12891: PPUSH
12892: LD_INT 0
12894: PPUSH
12895: CALL_OW 49
// end ;
12899: GO 12818
12901: POP
12902: POP
// for i = 1 to bazookCount do
12903: LD_ADDR_VAR 0 14
12907: PUSH
12908: DOUBLE
12909: LD_INT 1
12911: DEC
12912: ST_TO_ADDR
12913: LD_VAR 0 5
12917: PUSH
12918: FOR_TO
12919: IFFALSE 13001
// begin uc_side = side ;
12921: LD_ADDR_OWVAR 20
12925: PUSH
12926: LD_VAR 0 1
12930: ST_TO_ADDR
// uc_nation = nation ;
12931: LD_ADDR_OWVAR 21
12935: PUSH
12936: LD_VAR 0 2
12940: ST_TO_ADDR
// hc_name =  ;
12941: LD_ADDR_OWVAR 26
12945: PUSH
12946: LD_STRING 
12948: ST_TO_ADDR
// hc_gallery =  ;
12949: LD_ADDR_OWVAR 33
12953: PUSH
12954: LD_STRING 
12956: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12957: LD_INT 0
12959: PPUSH
12960: LD_INT 9
12962: PPUSH
12963: LD_VAR 0 8
12967: PPUSH
12968: CALL_OW 380
// un = CreateHuman ;
12972: LD_ADDR_VAR 0 16
12976: PUSH
12977: CALL_OW 44
12981: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12982: LD_VAR 0 16
12986: PPUSH
12987: LD_VAR 0 9
12991: PPUSH
12992: LD_INT 0
12994: PPUSH
12995: CALL_OW 49
// end ;
12999: GO 12918
13001: POP
13002: POP
// for i = 1 to mortalCount do
13003: LD_ADDR_VAR 0 14
13007: PUSH
13008: DOUBLE
13009: LD_INT 1
13011: DEC
13012: ST_TO_ADDR
13013: LD_VAR 0 6
13017: PUSH
13018: FOR_TO
13019: IFFALSE 13101
// begin uc_side = side ;
13021: LD_ADDR_OWVAR 20
13025: PUSH
13026: LD_VAR 0 1
13030: ST_TO_ADDR
// uc_nation = nation ;
13031: LD_ADDR_OWVAR 21
13035: PUSH
13036: LD_VAR 0 2
13040: ST_TO_ADDR
// hc_name =  ;
13041: LD_ADDR_OWVAR 26
13045: PUSH
13046: LD_STRING 
13048: ST_TO_ADDR
// hc_gallery =  ;
13049: LD_ADDR_OWVAR 33
13053: PUSH
13054: LD_STRING 
13056: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
13057: LD_INT 0
13059: PPUSH
13060: LD_INT 8
13062: PPUSH
13063: LD_VAR 0 8
13067: PPUSH
13068: CALL_OW 380
// un = CreateHuman ;
13072: LD_ADDR_VAR 0 16
13076: PUSH
13077: CALL_OW 44
13081: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13082: LD_VAR 0 16
13086: PPUSH
13087: LD_VAR 0 9
13091: PPUSH
13092: LD_INT 0
13094: PPUSH
13095: CALL_OW 49
// end ;
13099: GO 13018
13101: POP
13102: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
13103: LD_ADDR_VAR 0 19
13107: PUSH
13108: LD_INT 22
13110: PUSH
13111: LD_VAR 0 1
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: LD_INT 2
13122: PUSH
13123: LD_INT 25
13125: PUSH
13126: LD_INT 1
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: LD_INT 25
13135: PUSH
13136: LD_INT 5
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: LD_INT 25
13145: PUSH
13146: LD_INT 8
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: PUSH
13153: LD_INT 25
13155: PUSH
13156: LD_INT 9
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PPUSH
13174: CALL_OW 69
13178: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
13179: LD_ADDR_VAR 0 18
13183: PUSH
13184: LD_INT 22
13186: PUSH
13187: LD_VAR 0 1
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 25
13198: PUSH
13199: LD_INT 4
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PPUSH
13210: CALL_OW 69
13214: ST_TO_ADDR
// for i in medic_list do
13215: LD_ADDR_VAR 0 14
13219: PUSH
13220: LD_VAR 0 18
13224: PUSH
13225: FOR_IN
13226: IFFALSE 13244
// ComMoveToArea ( i , healArea ) ;
13228: LD_VAR 0 14
13232: PPUSH
13233: LD_VAR 0 10
13237: PPUSH
13238: CALL_OW 113
13242: GO 13225
13244: POP
13245: POP
// if strategy = 1 then
13246: LD_VAR 0 12
13250: PUSH
13251: LD_INT 1
13253: EQUAL
13254: IFFALSE 13800
// begin repeat wait ( 0 0$3 ) ;
13256: LD_INT 105
13258: PPUSH
13259: CALL_OW 67
// for i in soldiersOK_list do
13263: LD_ADDR_VAR 0 14
13267: PUSH
13268: LD_VAR 0 19
13272: PUSH
13273: FOR_IN
13274: IFFALSE 13338
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13276: LD_VAR 0 14
13280: PPUSH
13281: LD_INT 91
13283: PPUSH
13284: LD_INT 63
13286: PPUSH
13287: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13291: LD_VAR 0 14
13295: PPUSH
13296: LD_INT 101
13298: PPUSH
13299: LD_INT 53
13301: PPUSH
13302: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13306: LD_VAR 0 14
13310: PPUSH
13311: LD_INT 75
13313: PPUSH
13314: LD_INT 23
13316: PPUSH
13317: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13321: LD_VAR 0 14
13325: PPUSH
13326: LD_INT 78
13328: PPUSH
13329: LD_INT 8
13331: PPUSH
13332: CALL_OW 174
// end ;
13336: GO 13273
13338: POP
13339: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13340: LD_INT 12
13342: PPUSH
13343: LD_INT 22
13345: PUSH
13346: LD_VAR 0 1
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PPUSH
13355: CALL_OW 70
13359: PUSH
13360: LD_INT 2
13362: GREATER
13363: IFFALSE 13256
// repeat wait ( 0 0$1 ) ;
13365: LD_INT 35
13367: PPUSH
13368: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13372: LD_ADDR_VAR 0 17
13376: PUSH
13377: LD_INT 22
13379: PUSH
13380: LD_VAR 0 1
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 1
13391: PUSH
13392: LD_INT 3
13394: PUSH
13395: LD_INT 24
13397: PUSH
13398: LD_INT 550
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 24
13411: PUSH
13412: LD_INT 250
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: LIST
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PPUSH
13428: CALL_OW 69
13432: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13433: LD_ADDR_VAR 0 19
13437: PUSH
13438: LD_INT 22
13440: PUSH
13441: LD_VAR 0 1
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 2
13452: PUSH
13453: LD_INT 25
13455: PUSH
13456: LD_INT 1
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 25
13465: PUSH
13466: LD_INT 5
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PUSH
13473: LD_INT 25
13475: PUSH
13476: LD_INT 8
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 25
13485: PUSH
13486: LD_INT 9
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 24
13502: PUSH
13503: LD_INT 1000
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: LIST
13514: PPUSH
13515: CALL_OW 69
13519: ST_TO_ADDR
// if medicCount > 0 then
13520: LD_VAR 0 7
13524: PUSH
13525: LD_INT 0
13527: GREATER
13528: IFFALSE 13602
// begin if damageUnit_list > 0 then
13530: LD_VAR 0 17
13534: PUSH
13535: LD_INT 0
13537: GREATER
13538: IFFALSE 13602
// begin for i in damageUnit_list do
13540: LD_ADDR_VAR 0 14
13544: PUSH
13545: LD_VAR 0 17
13549: PUSH
13550: FOR_IN
13551: IFFALSE 13600
// begin ComMoveToArea ( i , healArea ) ;
13553: LD_VAR 0 14
13557: PPUSH
13558: LD_VAR 0 10
13562: PPUSH
13563: CALL_OW 113
// for j in medic_list do
13567: LD_ADDR_VAR 0 15
13571: PUSH
13572: LD_VAR 0 18
13576: PUSH
13577: FOR_IN
13578: IFFALSE 13596
// AddComHeal ( j , i ) ;
13580: LD_VAR 0 15
13584: PPUSH
13585: LD_VAR 0 14
13589: PPUSH
13590: CALL_OW 188
13594: GO 13577
13596: POP
13597: POP
// end ;
13598: GO 13550
13600: POP
13601: POP
// end ; end ; for i in soldiersOK_list do
13602: LD_ADDR_VAR 0 14
13606: PUSH
13607: LD_VAR 0 19
13611: PUSH
13612: FOR_IN
13613: IFFALSE 13789
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13615: LD_ADDR_VAR 0 22
13619: PUSH
13620: LD_INT 22
13622: PUSH
13623: LD_VAR 0 11
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: PPUSH
13632: CALL_OW 69
13636: PPUSH
13637: LD_VAR 0 14
13641: PPUSH
13642: CALL_OW 74
13646: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13647: LD_ADDR_VAR 0 23
13651: PUSH
13652: LD_INT 22
13654: PUSH
13655: LD_VAR 0 11
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 2
13666: PUSH
13667: LD_INT 59
13669: PUSH
13670: EMPTY
13671: LIST
13672: PUSH
13673: LD_INT 21
13675: PUSH
13676: LD_INT 1
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: LD_INT 21
13685: PUSH
13686: LD_INT 2
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PUSH
13703: EMPTY
13704: LIST
13705: PPUSH
13706: CALL_OW 69
13710: PPUSH
13711: LD_VAR 0 14
13715: PPUSH
13716: CALL_OW 74
13720: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13721: LD_VAR 0 14
13725: PPUSH
13726: LD_VAR 0 22
13730: PPUSH
13731: CALL_OW 296
13735: PUSH
13736: LD_INT 6
13738: PLUS
13739: PUSH
13740: LD_VAR 0 14
13744: PPUSH
13745: LD_VAR 0 23
13749: PPUSH
13750: CALL_OW 296
13754: LESS
13755: IFFALSE 13773
// begin ComAttackUnit ( i , target1 ) ;
13757: LD_VAR 0 14
13761: PPUSH
13762: LD_VAR 0 22
13766: PPUSH
13767: CALL_OW 115
// end else
13771: GO 13787
// begin ComAttackUnit ( i , target2 ) ;
13773: LD_VAR 0 14
13777: PPUSH
13778: LD_VAR 0 23
13782: PPUSH
13783: CALL_OW 115
// end ; end ;
13787: GO 13612
13789: POP
13790: POP
// until soldiersOK_list = [ ] ;
13791: LD_VAR 0 19
13795: PUSH
13796: EMPTY
13797: EQUAL
13798: IFFALSE 13365
// end ; if strategy = 2 then
13800: LD_VAR 0 12
13804: PUSH
13805: LD_INT 2
13807: EQUAL
13808: IFFALSE 14324
// begin repeat wait ( 0 0$1 ) ;
13810: LD_INT 35
13812: PPUSH
13813: CALL_OW 67
// for i in soldiersOK_list do
13817: LD_ADDR_VAR 0 14
13821: PUSH
13822: LD_VAR 0 19
13826: PUSH
13827: FOR_IN
13828: IFFALSE 13862
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13830: LD_VAR 0 14
13834: PPUSH
13835: LD_INT 91
13837: PPUSH
13838: LD_INT 63
13840: PPUSH
13841: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13845: LD_VAR 0 14
13849: PPUSH
13850: LD_INT 75
13852: PPUSH
13853: LD_INT 33
13855: PPUSH
13856: CALL_OW 174
// end ;
13860: GO 13827
13862: POP
13863: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13864: LD_INT 13
13866: PPUSH
13867: LD_INT 22
13869: PUSH
13870: LD_VAR 0 1
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PPUSH
13879: CALL_OW 70
13883: PUSH
13884: LD_INT 2
13886: GREATER
13887: IFFALSE 13810
// repeat wait ( 0 0$3 ) ;
13889: LD_INT 105
13891: PPUSH
13892: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13896: LD_ADDR_VAR 0 17
13900: PUSH
13901: LD_INT 22
13903: PUSH
13904: LD_VAR 0 1
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 1
13915: PUSH
13916: LD_INT 3
13918: PUSH
13919: LD_INT 24
13921: PUSH
13922: LD_INT 550
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: LD_INT 24
13935: PUSH
13936: LD_INT 250
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: LIST
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: PPUSH
13952: CALL_OW 69
13956: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13957: LD_ADDR_VAR 0 19
13961: PUSH
13962: LD_INT 22
13964: PUSH
13965: LD_VAR 0 1
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 2
13976: PUSH
13977: LD_INT 25
13979: PUSH
13980: LD_INT 1
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: LD_INT 25
13989: PUSH
13990: LD_INT 5
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 25
13999: PUSH
14000: LD_INT 8
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: LD_INT 25
14009: PUSH
14010: LD_INT 9
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: PUSH
14024: LD_INT 24
14026: PUSH
14027: LD_INT 1000
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: LIST
14038: PPUSH
14039: CALL_OW 69
14043: ST_TO_ADDR
// if medicCount > 0 then
14044: LD_VAR 0 7
14048: PUSH
14049: LD_INT 0
14051: GREATER
14052: IFFALSE 14126
// begin if damageUnit_list > 0 then
14054: LD_VAR 0 17
14058: PUSH
14059: LD_INT 0
14061: GREATER
14062: IFFALSE 14126
// begin for i in damageUnit_list do
14064: LD_ADDR_VAR 0 14
14068: PUSH
14069: LD_VAR 0 17
14073: PUSH
14074: FOR_IN
14075: IFFALSE 14124
// begin ComMoveToArea ( i , healArea ) ;
14077: LD_VAR 0 14
14081: PPUSH
14082: LD_VAR 0 10
14086: PPUSH
14087: CALL_OW 113
// for j in medic_list do
14091: LD_ADDR_VAR 0 15
14095: PUSH
14096: LD_VAR 0 18
14100: PUSH
14101: FOR_IN
14102: IFFALSE 14120
// AddComHeal ( j , i ) ;
14104: LD_VAR 0 15
14108: PPUSH
14109: LD_VAR 0 14
14113: PPUSH
14114: CALL_OW 188
14118: GO 14101
14120: POP
14121: POP
// end ;
14122: GO 14074
14124: POP
14125: POP
// end ; end ; for i in soldiersOK_list do
14126: LD_ADDR_VAR 0 14
14130: PUSH
14131: LD_VAR 0 19
14135: PUSH
14136: FOR_IN
14137: IFFALSE 14313
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14139: LD_ADDR_VAR 0 22
14143: PUSH
14144: LD_INT 22
14146: PUSH
14147: LD_VAR 0 11
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PPUSH
14156: CALL_OW 69
14160: PPUSH
14161: LD_VAR 0 14
14165: PPUSH
14166: CALL_OW 74
14170: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14171: LD_ADDR_VAR 0 23
14175: PUSH
14176: LD_INT 22
14178: PUSH
14179: LD_VAR 0 11
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 2
14190: PUSH
14191: LD_INT 59
14193: PUSH
14194: EMPTY
14195: LIST
14196: PUSH
14197: LD_INT 21
14199: PUSH
14200: LD_INT 1
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 21
14209: PUSH
14210: LD_INT 2
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: EMPTY
14228: LIST
14229: PPUSH
14230: CALL_OW 69
14234: PPUSH
14235: LD_VAR 0 14
14239: PPUSH
14240: CALL_OW 74
14244: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14245: LD_VAR 0 14
14249: PPUSH
14250: LD_VAR 0 22
14254: PPUSH
14255: CALL_OW 296
14259: PUSH
14260: LD_INT 6
14262: PLUS
14263: PUSH
14264: LD_VAR 0 14
14268: PPUSH
14269: LD_VAR 0 23
14273: PPUSH
14274: CALL_OW 296
14278: LESS
14279: IFFALSE 14297
// begin ComAttackUnit ( i , target1 ) ;
14281: LD_VAR 0 14
14285: PPUSH
14286: LD_VAR 0 22
14290: PPUSH
14291: CALL_OW 115
// end else
14295: GO 14311
// begin ComAttackUnit ( i , target2 ) ;
14297: LD_VAR 0 14
14301: PPUSH
14302: LD_VAR 0 23
14306: PPUSH
14307: CALL_OW 115
// end ; end ;
14311: GO 14136
14313: POP
14314: POP
// until soldiersOK_list = [ ] ;
14315: LD_VAR 0 19
14319: PUSH
14320: EMPTY
14321: EQUAL
14322: IFFALSE 13889
// end ; if strategy = 3 then
14324: LD_VAR 0 12
14328: PUSH
14329: LD_INT 3
14331: EQUAL
14332: IFFALSE 14878
// begin repeat wait ( 0 0$3 ) ;
14334: LD_INT 105
14336: PPUSH
14337: CALL_OW 67
// for i in soldiersOK_list do
14341: LD_ADDR_VAR 0 14
14345: PUSH
14346: LD_VAR 0 19
14350: PUSH
14351: FOR_IN
14352: IFFALSE 14416
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14354: LD_VAR 0 14
14358: PPUSH
14359: LD_INT 63
14361: PPUSH
14362: LD_INT 71
14364: PPUSH
14365: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14369: LD_VAR 0 14
14373: PPUSH
14374: LD_INT 35
14376: PPUSH
14377: LD_INT 44
14379: PPUSH
14380: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14384: LD_VAR 0 14
14388: PPUSH
14389: LD_INT 23
14391: PPUSH
14392: LD_INT 18
14394: PPUSH
14395: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14399: LD_VAR 0 14
14403: PPUSH
14404: LD_INT 26
14406: PPUSH
14407: LD_INT 12
14409: PPUSH
14410: CALL_OW 174
// end ;
14414: GO 14351
14416: POP
14417: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14418: LD_INT 14
14420: PPUSH
14421: LD_INT 22
14423: PUSH
14424: LD_VAR 0 1
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PPUSH
14433: CALL_OW 70
14437: PUSH
14438: LD_INT 2
14440: GREATER
14441: IFFALSE 14334
// repeat wait ( 0 0$1 ) ;
14443: LD_INT 35
14445: PPUSH
14446: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14450: LD_ADDR_VAR 0 17
14454: PUSH
14455: LD_INT 22
14457: PUSH
14458: LD_VAR 0 1
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PUSH
14467: LD_INT 1
14469: PUSH
14470: LD_INT 3
14472: PUSH
14473: LD_INT 24
14475: PUSH
14476: LD_INT 550
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: PUSH
14487: LD_INT 24
14489: PUSH
14490: LD_INT 250
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: LIST
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PPUSH
14506: CALL_OW 69
14510: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14511: LD_ADDR_VAR 0 19
14515: PUSH
14516: LD_INT 22
14518: PUSH
14519: LD_VAR 0 1
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 2
14530: PUSH
14531: LD_INT 25
14533: PUSH
14534: LD_INT 1
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: LD_INT 25
14543: PUSH
14544: LD_INT 5
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 25
14553: PUSH
14554: LD_INT 8
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: LD_INT 25
14563: PUSH
14564: LD_INT 9
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: PUSH
14578: LD_INT 24
14580: PUSH
14581: LD_INT 1000
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: LIST
14592: PPUSH
14593: CALL_OW 69
14597: ST_TO_ADDR
// if medicCount > 0 then
14598: LD_VAR 0 7
14602: PUSH
14603: LD_INT 0
14605: GREATER
14606: IFFALSE 14680
// begin if damageUnit_list > 0 then
14608: LD_VAR 0 17
14612: PUSH
14613: LD_INT 0
14615: GREATER
14616: IFFALSE 14680
// begin for i in damageUnit_list do
14618: LD_ADDR_VAR 0 14
14622: PUSH
14623: LD_VAR 0 17
14627: PUSH
14628: FOR_IN
14629: IFFALSE 14678
// begin ComMoveToArea ( i , healArea ) ;
14631: LD_VAR 0 14
14635: PPUSH
14636: LD_VAR 0 10
14640: PPUSH
14641: CALL_OW 113
// for j in medic_list do
14645: LD_ADDR_VAR 0 15
14649: PUSH
14650: LD_VAR 0 18
14654: PUSH
14655: FOR_IN
14656: IFFALSE 14674
// AddComHeal ( j , i ) ;
14658: LD_VAR 0 15
14662: PPUSH
14663: LD_VAR 0 14
14667: PPUSH
14668: CALL_OW 188
14672: GO 14655
14674: POP
14675: POP
// end ;
14676: GO 14628
14678: POP
14679: POP
// end ; end ; for i in soldiersOK_list do
14680: LD_ADDR_VAR 0 14
14684: PUSH
14685: LD_VAR 0 19
14689: PUSH
14690: FOR_IN
14691: IFFALSE 14867
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14693: LD_ADDR_VAR 0 22
14697: PUSH
14698: LD_INT 22
14700: PUSH
14701: LD_VAR 0 11
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PPUSH
14710: CALL_OW 69
14714: PPUSH
14715: LD_VAR 0 14
14719: PPUSH
14720: CALL_OW 74
14724: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14725: LD_ADDR_VAR 0 23
14729: PUSH
14730: LD_INT 22
14732: PUSH
14733: LD_VAR 0 11
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PUSH
14742: LD_INT 2
14744: PUSH
14745: LD_INT 59
14747: PUSH
14748: EMPTY
14749: LIST
14750: PUSH
14751: LD_INT 21
14753: PUSH
14754: LD_INT 1
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PUSH
14761: LD_INT 21
14763: PUSH
14764: LD_INT 2
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PUSH
14781: EMPTY
14782: LIST
14783: PPUSH
14784: CALL_OW 69
14788: PPUSH
14789: LD_VAR 0 14
14793: PPUSH
14794: CALL_OW 74
14798: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14799: LD_VAR 0 14
14803: PPUSH
14804: LD_VAR 0 22
14808: PPUSH
14809: CALL_OW 296
14813: PUSH
14814: LD_INT 6
14816: PLUS
14817: PUSH
14818: LD_VAR 0 14
14822: PPUSH
14823: LD_VAR 0 23
14827: PPUSH
14828: CALL_OW 296
14832: LESS
14833: IFFALSE 14851
// begin ComAttackUnit ( i , target1 ) ;
14835: LD_VAR 0 14
14839: PPUSH
14840: LD_VAR 0 22
14844: PPUSH
14845: CALL_OW 115
// end else
14849: GO 14865
// begin ComAttackUnit ( i , target2 ) ;
14851: LD_VAR 0 14
14855: PPUSH
14856: LD_VAR 0 23
14860: PPUSH
14861: CALL_OW 115
// end ; end ;
14865: GO 14690
14867: POP
14868: POP
// until soldiersOK_list = [ ] ;
14869: LD_VAR 0 19
14873: PUSH
14874: EMPTY
14875: EQUAL
14876: IFFALSE 14443
// end ; end ;
14878: LD_VAR 0 13
14882: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14883: LD_INT 0
14885: PPUSH
14886: PPUSH
14887: PPUSH
14888: PPUSH
14889: PPUSH
14890: PPUSH
14891: PPUSH
14892: PPUSH
14893: PPUSH
14894: PPUSH
14895: PPUSH
// amChassisTab = [ ] ;
14896: LD_ADDR_VAR 0 19
14900: PUSH
14901: EMPTY
14902: ST_TO_ADDR
// arChassisTab = [ ] ;
14903: LD_ADDR_VAR 0 18
14907: PUSH
14908: EMPTY
14909: ST_TO_ADDR
// ruChassisTab = [ ] ;
14910: LD_ADDR_VAR 0 17
14914: PUSH
14915: EMPTY
14916: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14917: LD_INT 35
14919: PPUSH
14920: CALL_OW 67
// if nation = 1 then
14924: LD_VAR 0 5
14928: PUSH
14929: LD_INT 1
14931: EQUAL
14932: IFFALSE 15423
// begin uc_side = side ;
14934: LD_ADDR_OWVAR 20
14938: PUSH
14939: LD_VAR 0 2
14943: ST_TO_ADDR
// uc_nation = nation ;
14944: LD_ADDR_OWVAR 21
14948: PUSH
14949: LD_VAR 0 5
14953: ST_TO_ADDR
// vc_engine = vehengine ;
14954: LD_ADDR_OWVAR 39
14958: PUSH
14959: LD_VAR 0 6
14963: ST_TO_ADDR
// vc_control = vehcontrol ;
14964: LD_ADDR_OWVAR 38
14968: PUSH
14969: LD_VAR 0 7
14973: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14974: LD_ADDR_OWVAR 40
14978: PUSH
14979: LD_VAR 0 10
14983: PUSH
14984: LD_INT 1
14986: PPUSH
14987: LD_VAR 0 10
14991: PPUSH
14992: CALL_OW 12
14996: ARRAY
14997: ST_TO_ADDR
// for j = 1 to AMWeapon do
14998: LD_ADDR_VAR 0 14
15002: PUSH
15003: DOUBLE
15004: LD_INT 1
15006: DEC
15007: ST_TO_ADDR
15008: LD_VAR 0 10
15012: PUSH
15013: FOR_TO
15014: IFFALSE 15315
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15016: LD_VAR 0 10
15020: PUSH
15021: LD_VAR 0 14
15025: ARRAY
15026: PUSH
15027: LD_INT 2
15029: EQUAL
15030: PUSH
15031: LD_VAR 0 10
15035: PUSH
15036: LD_VAR 0 14
15040: ARRAY
15041: PUSH
15042: LD_INT 3
15044: EQUAL
15045: OR
15046: IFFALSE 15099
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15048: LD_ADDR_VAR 0 19
15052: PUSH
15053: LD_INT 1
15055: PUSH
15056: LD_INT 2
15058: PUSH
15059: LD_INT 3
15061: PUSH
15062: LD_INT 4
15064: PUSH
15065: LD_INT 5
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15075: LD_ADDR_OWVAR 37
15079: PUSH
15080: LD_VAR 0 19
15084: PUSH
15085: LD_INT 1
15087: PPUSH
15088: LD_VAR 0 19
15092: PPUSH
15093: CALL_OW 12
15097: ARRAY
15098: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15099: LD_VAR 0 10
15103: PUSH
15104: LD_VAR 0 14
15108: ARRAY
15109: PUSH
15110: LD_INT 4
15112: EQUAL
15113: PUSH
15114: LD_VAR 0 10
15118: PUSH
15119: LD_VAR 0 14
15123: ARRAY
15124: PUSH
15125: LD_INT 5
15127: EQUAL
15128: OR
15129: PUSH
15130: LD_VAR 0 10
15134: PUSH
15135: LD_VAR 0 14
15139: ARRAY
15140: PUSH
15141: LD_INT 9
15143: EQUAL
15144: OR
15145: PUSH
15146: LD_VAR 0 10
15150: PUSH
15151: LD_VAR 0 14
15155: ARRAY
15156: PUSH
15157: LD_INT 11
15159: EQUAL
15160: OR
15161: PUSH
15162: LD_VAR 0 10
15166: PUSH
15167: LD_VAR 0 14
15171: ARRAY
15172: PUSH
15173: LD_INT 7
15175: EQUAL
15176: OR
15177: IFFALSE 15226
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15179: LD_ADDR_VAR 0 19
15183: PUSH
15184: LD_INT 2
15186: PUSH
15187: LD_INT 3
15189: PUSH
15190: LD_INT 4
15192: PUSH
15193: LD_INT 5
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15202: LD_ADDR_OWVAR 37
15206: PUSH
15207: LD_VAR 0 19
15211: PUSH
15212: LD_INT 1
15214: PPUSH
15215: LD_VAR 0 19
15219: PPUSH
15220: CALL_OW 12
15224: ARRAY
15225: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15226: LD_VAR 0 10
15230: PUSH
15231: LD_VAR 0 14
15235: ARRAY
15236: PUSH
15237: LD_INT 8
15239: EQUAL
15240: PUSH
15241: LD_VAR 0 10
15245: PUSH
15246: LD_VAR 0 14
15250: ARRAY
15251: PUSH
15252: LD_INT 6
15254: EQUAL
15255: OR
15256: PUSH
15257: LD_VAR 0 10
15261: PUSH
15262: LD_VAR 0 14
15266: ARRAY
15267: PUSH
15268: LD_INT 10
15270: EQUAL
15271: OR
15272: IFFALSE 15313
// begin amChassisTab = [ 4 , 5 ] ;
15274: LD_ADDR_VAR 0 19
15278: PUSH
15279: LD_INT 4
15281: PUSH
15282: LD_INT 5
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15289: LD_ADDR_OWVAR 37
15293: PUSH
15294: LD_VAR 0 19
15298: PUSH
15299: LD_INT 1
15301: PPUSH
15302: LD_VAR 0 19
15306: PPUSH
15307: CALL_OW 12
15311: ARRAY
15312: ST_TO_ADDR
// end ; end ;
15313: GO 15013
15315: POP
15316: POP
// veh = CreateVehicle ;
15317: LD_ADDR_VAR 0 16
15321: PUSH
15322: CALL_OW 45
15326: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15327: LD_VAR 0 16
15331: PPUSH
15332: LD_VAR 0 1
15336: PPUSH
15337: LD_INT 0
15339: PPUSH
15340: CALL_OW 49
// if vehControl = 1 then
15344: LD_VAR 0 7
15348: PUSH
15349: LD_INT 1
15351: EQUAL
15352: IFFALSE 15409
// begin hc_gallery =  ;
15354: LD_ADDR_OWVAR 33
15358: PUSH
15359: LD_STRING 
15361: ST_TO_ADDR
// hc_name =  ;
15362: LD_ADDR_OWVAR 26
15366: PUSH
15367: LD_STRING 
15369: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15370: LD_INT 0
15372: PPUSH
15373: LD_INT 3
15375: PPUSH
15376: LD_VAR 0 4
15380: PPUSH
15381: CALL_OW 380
// un = CreateHuman ;
15385: LD_ADDR_VAR 0 15
15389: PUSH
15390: CALL_OW 44
15394: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15395: LD_VAR 0 15
15399: PPUSH
15400: LD_VAR 0 16
15404: PPUSH
15405: CALL_OW 52
// end ; i = i + 1 ;
15409: LD_ADDR_VAR 0 13
15413: PUSH
15414: LD_VAR 0 13
15418: PUSH
15419: LD_INT 1
15421: PLUS
15422: ST_TO_ADDR
// end ; if nation = 2 then
15423: LD_VAR 0 5
15427: PUSH
15428: LD_INT 2
15430: EQUAL
15431: IFFALSE 15855
// begin uc_side = side ;
15433: LD_ADDR_OWVAR 20
15437: PUSH
15438: LD_VAR 0 2
15442: ST_TO_ADDR
// uc_nation = nation ;
15443: LD_ADDR_OWVAR 21
15447: PUSH
15448: LD_VAR 0 5
15452: ST_TO_ADDR
// vc_engine = vehengine ;
15453: LD_ADDR_OWVAR 39
15457: PUSH
15458: LD_VAR 0 6
15462: ST_TO_ADDR
// vc_control = vehcontrol ;
15463: LD_ADDR_OWVAR 38
15467: PUSH
15468: LD_VAR 0 7
15472: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15473: LD_ADDR_OWVAR 40
15477: PUSH
15478: LD_VAR 0 9
15482: PUSH
15483: LD_INT 1
15485: PPUSH
15486: LD_VAR 0 9
15490: PPUSH
15491: CALL_OW 12
15495: ARRAY
15496: ST_TO_ADDR
// for j = 1 to ARWeapons do
15497: LD_ADDR_VAR 0 14
15501: PUSH
15502: DOUBLE
15503: LD_INT 1
15505: DEC
15506: ST_TO_ADDR
15507: LD_VAR 0 9
15511: PUSH
15512: FOR_TO
15513: IFFALSE 15747
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15515: LD_VAR 0 9
15519: PUSH
15520: LD_VAR 0 14
15524: ARRAY
15525: PUSH
15526: LD_INT 24
15528: EQUAL
15529: PUSH
15530: LD_VAR 0 9
15534: PUSH
15535: LD_VAR 0 14
15539: ARRAY
15540: PUSH
15541: LD_INT 22
15543: EQUAL
15544: OR
15545: PUSH
15546: LD_VAR 0 9
15550: PUSH
15551: LD_VAR 0 14
15555: ARRAY
15556: PUSH
15557: LD_INT 23
15559: EQUAL
15560: OR
15561: PUSH
15562: LD_VAR 0 9
15566: PUSH
15567: LD_VAR 0 14
15571: ARRAY
15572: PUSH
15573: LD_INT 30
15575: EQUAL
15576: OR
15577: IFFALSE 15626
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15579: LD_ADDR_VAR 0 18
15583: PUSH
15584: LD_INT 11
15586: PUSH
15587: LD_INT 12
15589: PUSH
15590: LD_INT 13
15592: PUSH
15593: LD_INT 14
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15602: LD_ADDR_OWVAR 37
15606: PUSH
15607: LD_VAR 0 18
15611: PUSH
15612: LD_INT 1
15614: PPUSH
15615: LD_VAR 0 18
15619: PPUSH
15620: CALL_OW 12
15624: ARRAY
15625: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15626: LD_VAR 0 9
15630: PUSH
15631: LD_VAR 0 14
15635: ARRAY
15636: PUSH
15637: LD_INT 29
15639: EQUAL
15640: PUSH
15641: LD_VAR 0 9
15645: PUSH
15646: LD_VAR 0 14
15650: ARRAY
15651: PUSH
15652: LD_INT 28
15654: EQUAL
15655: OR
15656: PUSH
15657: LD_VAR 0 9
15661: PUSH
15662: LD_VAR 0 14
15666: ARRAY
15667: PUSH
15668: LD_INT 27
15670: EQUAL
15671: OR
15672: PUSH
15673: LD_VAR 0 9
15677: PUSH
15678: LD_VAR 0 14
15682: ARRAY
15683: PUSH
15684: LD_INT 26
15686: EQUAL
15687: OR
15688: PUSH
15689: LD_VAR 0 9
15693: PUSH
15694: LD_VAR 0 14
15698: ARRAY
15699: PUSH
15700: LD_INT 25
15702: EQUAL
15703: OR
15704: IFFALSE 15745
// begin arChassisTab = [ 13 , 14 ] ;
15706: LD_ADDR_VAR 0 18
15710: PUSH
15711: LD_INT 13
15713: PUSH
15714: LD_INT 14
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15721: LD_ADDR_OWVAR 37
15725: PUSH
15726: LD_VAR 0 18
15730: PUSH
15731: LD_INT 1
15733: PPUSH
15734: LD_VAR 0 18
15738: PPUSH
15739: CALL_OW 12
15743: ARRAY
15744: ST_TO_ADDR
// end ; end ;
15745: GO 15512
15747: POP
15748: POP
// veh = CreateVehicle ;
15749: LD_ADDR_VAR 0 16
15753: PUSH
15754: CALL_OW 45
15758: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15759: LD_VAR 0 16
15763: PPUSH
15764: LD_VAR 0 1
15768: PPUSH
15769: LD_INT 0
15771: PPUSH
15772: CALL_OW 49
// if vehcontrol = 1 then
15776: LD_VAR 0 7
15780: PUSH
15781: LD_INT 1
15783: EQUAL
15784: IFFALSE 15841
// begin hc_gallery =  ;
15786: LD_ADDR_OWVAR 33
15790: PUSH
15791: LD_STRING 
15793: ST_TO_ADDR
// hc_name =  ;
15794: LD_ADDR_OWVAR 26
15798: PUSH
15799: LD_STRING 
15801: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15802: LD_INT 0
15804: PPUSH
15805: LD_INT 3
15807: PPUSH
15808: LD_VAR 0 4
15812: PPUSH
15813: CALL_OW 380
// un = CreateHuman ;
15817: LD_ADDR_VAR 0 15
15821: PUSH
15822: CALL_OW 44
15826: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15827: LD_VAR 0 15
15831: PPUSH
15832: LD_VAR 0 16
15836: PPUSH
15837: CALL_OW 52
// end ; i = i + 1 ;
15841: LD_ADDR_VAR 0 13
15845: PUSH
15846: LD_VAR 0 13
15850: PUSH
15851: LD_INT 1
15853: PLUS
15854: ST_TO_ADDR
// end ; if nation = 3 then
15855: LD_VAR 0 5
15859: PUSH
15860: LD_INT 3
15862: EQUAL
15863: IFFALSE 16255
// begin uc_side = side ;
15865: LD_ADDR_OWVAR 20
15869: PUSH
15870: LD_VAR 0 2
15874: ST_TO_ADDR
// uc_nation = nation ;
15875: LD_ADDR_OWVAR 21
15879: PUSH
15880: LD_VAR 0 5
15884: ST_TO_ADDR
// vc_engine = vehengine ;
15885: LD_ADDR_OWVAR 39
15889: PUSH
15890: LD_VAR 0 6
15894: ST_TO_ADDR
// vc_control = vehcontrol ;
15895: LD_ADDR_OWVAR 38
15899: PUSH
15900: LD_VAR 0 7
15904: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15905: LD_ADDR_OWVAR 40
15909: PUSH
15910: LD_VAR 0 8
15914: PUSH
15915: LD_INT 1
15917: PPUSH
15918: LD_VAR 0 8
15922: PPUSH
15923: CALL_OW 12
15927: ARRAY
15928: ST_TO_ADDR
// for j = 1 to RuWeapons do
15929: LD_ADDR_VAR 0 14
15933: PUSH
15934: DOUBLE
15935: LD_INT 1
15937: DEC
15938: ST_TO_ADDR
15939: LD_VAR 0 8
15943: PUSH
15944: FOR_TO
15945: IFFALSE 16147
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15947: LD_VAR 0 8
15951: PUSH
15952: LD_VAR 0 14
15956: ARRAY
15957: PUSH
15958: LD_INT 42
15960: EQUAL
15961: PUSH
15962: LD_VAR 0 8
15966: PUSH
15967: LD_VAR 0 14
15971: ARRAY
15972: PUSH
15973: LD_INT 43
15975: EQUAL
15976: OR
15977: PUSH
15978: LD_VAR 0 8
15982: PUSH
15983: LD_VAR 0 14
15987: ARRAY
15988: PUSH
15989: LD_INT 44
15991: EQUAL
15992: OR
15993: PUSH
15994: LD_VAR 0 8
15998: PUSH
15999: LD_VAR 0 14
16003: ARRAY
16004: PUSH
16005: LD_INT 45
16007: EQUAL
16008: OR
16009: PUSH
16010: LD_VAR 0 8
16014: PUSH
16015: LD_VAR 0 14
16019: ARRAY
16020: PUSH
16021: LD_INT 49
16023: EQUAL
16024: OR
16025: IFFALSE 16074
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16027: LD_ADDR_VAR 0 17
16031: PUSH
16032: LD_INT 21
16034: PUSH
16035: LD_INT 22
16037: PUSH
16038: LD_INT 23
16040: PUSH
16041: LD_INT 24
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16050: LD_ADDR_OWVAR 37
16054: PUSH
16055: LD_VAR 0 17
16059: PUSH
16060: LD_INT 1
16062: PPUSH
16063: LD_VAR 0 17
16067: PPUSH
16068: CALL_OW 12
16072: ARRAY
16073: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16074: LD_VAR 0 8
16078: PUSH
16079: LD_VAR 0 14
16083: ARRAY
16084: PUSH
16085: LD_INT 46
16087: EQUAL
16088: PUSH
16089: LD_VAR 0 8
16093: PUSH
16094: LD_VAR 0 14
16098: ARRAY
16099: PUSH
16100: LD_INT 47
16102: EQUAL
16103: OR
16104: IFFALSE 16145
// begin ruChassisTab = [ 23 , 24 ] ;
16106: LD_ADDR_VAR 0 17
16110: PUSH
16111: LD_INT 23
16113: PUSH
16114: LD_INT 24
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16121: LD_ADDR_OWVAR 37
16125: PUSH
16126: LD_VAR 0 17
16130: PUSH
16131: LD_INT 1
16133: PPUSH
16134: LD_VAR 0 17
16138: PPUSH
16139: CALL_OW 12
16143: ARRAY
16144: ST_TO_ADDR
// end ; end ;
16145: GO 15944
16147: POP
16148: POP
// veh = CreateVehicle ;
16149: LD_ADDR_VAR 0 16
16153: PUSH
16154: CALL_OW 45
16158: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16159: LD_VAR 0 16
16163: PPUSH
16164: LD_VAR 0 1
16168: PPUSH
16169: LD_INT 0
16171: PPUSH
16172: CALL_OW 49
// if vehcontrol = 1 then
16176: LD_VAR 0 7
16180: PUSH
16181: LD_INT 1
16183: EQUAL
16184: IFFALSE 16241
// begin hc_gallery =  ;
16186: LD_ADDR_OWVAR 33
16190: PUSH
16191: LD_STRING 
16193: ST_TO_ADDR
// hc_name =  ;
16194: LD_ADDR_OWVAR 26
16198: PUSH
16199: LD_STRING 
16201: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16202: LD_INT 0
16204: PPUSH
16205: LD_INT 3
16207: PPUSH
16208: LD_VAR 0 4
16212: PPUSH
16213: CALL_OW 380
// un = CreateHuman ;
16217: LD_ADDR_VAR 0 15
16221: PUSH
16222: CALL_OW 44
16226: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16227: LD_VAR 0 15
16231: PPUSH
16232: LD_VAR 0 16
16236: PPUSH
16237: CALL_OW 52
// end ; i = i + 1 ;
16241: LD_ADDR_VAR 0 13
16245: PUSH
16246: LD_VAR 0 13
16250: PUSH
16251: LD_INT 1
16253: PLUS
16254: ST_TO_ADDR
// end ; until i = vehCount ;
16255: LD_VAR 0 13
16259: PUSH
16260: LD_VAR 0 3
16264: EQUAL
16265: IFFALSE 14917
// repeat wait ( 0 0$1 ) ;
16267: LD_INT 35
16269: PPUSH
16270: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16274: LD_ADDR_VAR 0 20
16278: PUSH
16279: LD_INT 22
16281: PUSH
16282: LD_VAR 0 2
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 21
16293: PUSH
16294: LD_INT 2
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: LD_INT 24
16303: PUSH
16304: LD_INT 250
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: LIST
16315: PPUSH
16316: CALL_OW 69
16320: ST_TO_ADDR
// if vehicleOK_list > 0 then
16321: LD_VAR 0 20
16325: PUSH
16326: LD_INT 0
16328: GREATER
16329: IFFALSE 16520
// begin for i in vehicleOK_list do
16331: LD_ADDR_VAR 0 13
16335: PUSH
16336: LD_VAR 0 20
16340: PUSH
16341: FOR_IN
16342: IFFALSE 16518
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16344: LD_ADDR_VAR 0 21
16348: PUSH
16349: LD_INT 22
16351: PUSH
16352: LD_VAR 0 11
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: PPUSH
16361: CALL_OW 69
16365: PPUSH
16366: LD_VAR 0 13
16370: PPUSH
16371: CALL_OW 74
16375: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16376: LD_ADDR_VAR 0 22
16380: PUSH
16381: LD_INT 22
16383: PUSH
16384: LD_VAR 0 11
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: PUSH
16393: LD_INT 2
16395: PUSH
16396: LD_INT 59
16398: PUSH
16399: EMPTY
16400: LIST
16401: PUSH
16402: LD_INT 21
16404: PUSH
16405: LD_INT 1
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: PUSH
16412: LD_INT 21
16414: PUSH
16415: LD_INT 2
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: EMPTY
16433: LIST
16434: PPUSH
16435: CALL_OW 69
16439: PPUSH
16440: LD_VAR 0 13
16444: PPUSH
16445: CALL_OW 74
16449: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16450: LD_VAR 0 13
16454: PPUSH
16455: LD_VAR 0 21
16459: PPUSH
16460: CALL_OW 296
16464: PUSH
16465: LD_INT 6
16467: PLUS
16468: PUSH
16469: LD_VAR 0 13
16473: PPUSH
16474: LD_VAR 0 22
16478: PPUSH
16479: CALL_OW 296
16483: LESS
16484: IFFALSE 16502
// begin ComAttackUnit ( i , target1 ) ;
16486: LD_VAR 0 13
16490: PPUSH
16491: LD_VAR 0 21
16495: PPUSH
16496: CALL_OW 115
// end else
16500: GO 16516
// begin ComAttackUnit ( i , target2 ) ;
16502: LD_VAR 0 13
16506: PPUSH
16507: LD_VAR 0 22
16511: PPUSH
16512: CALL_OW 115
// end ; end ;
16516: GO 16341
16518: POP
16519: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16520: LD_INT 22
16522: PUSH
16523: LD_VAR 0 2
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 21
16534: PUSH
16535: LD_INT 2
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 24
16544: PUSH
16545: LD_INT 250
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: LIST
16556: PPUSH
16557: CALL_OW 69
16561: PUSH
16562: LD_INT 0
16564: EQUAL
16565: IFFALSE 16267
// end ;
16567: LD_VAR 0 12
16571: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16572: LD_INT 0
16574: PPUSH
16575: PPUSH
16576: PPUSH
16577: PPUSH
16578: PPUSH
16579: PPUSH
16580: PPUSH
16581: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16582: LD_ADDR_VAR 0 7
16586: PUSH
16587: LD_INT 22
16589: PUSH
16590: LD_VAR 0 1
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PUSH
16599: LD_INT 1
16601: PUSH
16602: LD_INT 3
16604: PUSH
16605: LD_INT 24
16607: PUSH
16608: LD_INT 550
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 24
16621: PUSH
16622: LD_INT 250
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: LIST
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PPUSH
16638: CALL_OW 69
16642: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16643: LD_ADDR_VAR 0 8
16647: PUSH
16648: LD_INT 22
16650: PUSH
16651: LD_VAR 0 1
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 2
16662: PUSH
16663: LD_INT 25
16665: PUSH
16666: LD_INT 1
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 25
16675: PUSH
16676: LD_INT 5
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 25
16685: PUSH
16686: LD_INT 8
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 25
16695: PUSH
16696: LD_INT 9
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 24
16712: PUSH
16713: LD_INT 1000
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: LIST
16724: PPUSH
16725: CALL_OW 69
16729: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16730: LD_ADDR_VAR 0 9
16734: PUSH
16735: LD_INT 22
16737: PUSH
16738: LD_VAR 0 1
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 25
16749: PUSH
16750: LD_INT 4
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PPUSH
16761: CALL_OW 69
16765: ST_TO_ADDR
// if medicCount > 0 then
16766: LD_VAR 0 9
16770: PUSH
16771: LD_INT 0
16773: GREATER
16774: IFFALSE 16848
// begin if damageUnit_list > 0 then
16776: LD_VAR 0 7
16780: PUSH
16781: LD_INT 0
16783: GREATER
16784: IFFALSE 16848
// begin for i in damageUnit_list do
16786: LD_ADDR_VAR 0 5
16790: PUSH
16791: LD_VAR 0 7
16795: PUSH
16796: FOR_IN
16797: IFFALSE 16846
// begin ComMoveToArea ( i , healArea ) ;
16799: LD_VAR 0 5
16803: PPUSH
16804: LD_VAR 0 2
16808: PPUSH
16809: CALL_OW 113
// for j in medicCount do
16813: LD_ADDR_VAR 0 6
16817: PUSH
16818: LD_VAR 0 9
16822: PUSH
16823: FOR_IN
16824: IFFALSE 16842
// AddComHeal ( j , i ) ;
16826: LD_VAR 0 6
16830: PPUSH
16831: LD_VAR 0 5
16835: PPUSH
16836: CALL_OW 188
16840: GO 16823
16842: POP
16843: POP
// end ;
16844: GO 16796
16846: POP
16847: POP
// end ; end ; if soldiersOK_list > 0 then
16848: LD_VAR 0 8
16852: PUSH
16853: LD_INT 0
16855: GREATER
16856: IFFALSE 17047
// begin for i in soldiersOK_list do
16858: LD_ADDR_VAR 0 5
16862: PUSH
16863: LD_VAR 0 8
16867: PUSH
16868: FOR_IN
16869: IFFALSE 17045
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16871: LD_ADDR_VAR 0 10
16875: PUSH
16876: LD_INT 22
16878: PUSH
16879: LD_VAR 0 3
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PPUSH
16888: CALL_OW 69
16892: PPUSH
16893: LD_VAR 0 5
16897: PPUSH
16898: CALL_OW 74
16902: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16903: LD_ADDR_VAR 0 11
16907: PUSH
16908: LD_INT 22
16910: PUSH
16911: LD_VAR 0 3
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 2
16922: PUSH
16923: LD_INT 59
16925: PUSH
16926: EMPTY
16927: LIST
16928: PUSH
16929: LD_INT 21
16931: PUSH
16932: LD_INT 1
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: LD_INT 21
16941: PUSH
16942: LD_INT 2
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PUSH
16959: EMPTY
16960: LIST
16961: PPUSH
16962: CALL_OW 69
16966: PPUSH
16967: LD_VAR 0 5
16971: PPUSH
16972: CALL_OW 74
16976: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16977: LD_VAR 0 5
16981: PPUSH
16982: LD_VAR 0 10
16986: PPUSH
16987: CALL_OW 296
16991: PUSH
16992: LD_INT 8
16994: PLUS
16995: PUSH
16996: LD_VAR 0 5
17000: PPUSH
17001: LD_VAR 0 11
17005: PPUSH
17006: CALL_OW 296
17010: LESS
17011: IFFALSE 17029
// begin ComAttackUnit ( i , target1 ) ;
17013: LD_VAR 0 5
17017: PPUSH
17018: LD_VAR 0 10
17022: PPUSH
17023: CALL_OW 115
// end else
17027: GO 17043
// begin ComAttackUnit ( i , target2 ) ;
17029: LD_VAR 0 5
17033: PPUSH
17034: LD_VAR 0 11
17038: PPUSH
17039: CALL_OW 115
// end ; end ;
17043: GO 16868
17045: POP
17046: POP
// end ; end ;
17047: LD_VAR 0 4
17051: RET
// export function GetDriverVehicle ( unit ) ; begin
17052: LD_INT 0
17054: PPUSH
// if not unit then
17055: LD_VAR 0 1
17059: NOT
17060: IFFALSE 17064
// exit ;
17062: GO 17102
// result := IsInUnit ( unit ) ;
17064: LD_ADDR_VAR 0 2
17068: PUSH
17069: LD_VAR 0 1
17073: PPUSH
17074: CALL_OW 310
17078: ST_TO_ADDR
// if GetType ( result ) <> unit_vehicle then
17079: LD_VAR 0 2
17083: PPUSH
17084: CALL_OW 247
17088: PUSH
17089: LD_INT 2
17091: NONEQUAL
17092: IFFALSE 17102
// result := 0 ;
17094: LD_ADDR_VAR 0 2
17098: PUSH
17099: LD_INT 0
17101: ST_TO_ADDR
// end ;
17102: LD_VAR 0 2
17106: RET
// export function CanBeBuiltCost ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17107: LD_INT 0
17109: PPUSH
17110: PPUSH
17111: PPUSH
17112: PPUSH
17113: PPUSH
17114: PPUSH
17115: PPUSH
17116: PPUSH
17117: PPUSH
// result := false ;
17118: LD_ADDR_VAR 0 7
17122: PUSH
17123: LD_INT 0
17125: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17126: LD_VAR 0 1
17130: NOT
17131: PUSH
17132: LD_VAR 0 1
17136: PPUSH
17137: CALL_OW 266
17141: PUSH
17142: LD_INT 0
17144: PUSH
17145: LD_INT 1
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: IN
17152: NOT
17153: OR
17154: PUSH
17155: LD_VAR 0 2
17159: NOT
17160: OR
17161: PUSH
17162: LD_VAR 0 5
17166: PUSH
17167: LD_INT 0
17169: PUSH
17170: LD_INT 1
17172: PUSH
17173: LD_INT 2
17175: PUSH
17176: LD_INT 3
17178: PUSH
17179: LD_INT 4
17181: PUSH
17182: LD_INT 5
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: IN
17193: NOT
17194: OR
17195: PUSH
17196: LD_VAR 0 3
17200: PPUSH
17201: LD_VAR 0 4
17205: PPUSH
17206: CALL_OW 488
17210: NOT
17211: OR
17212: IFFALSE 17216
// exit ;
17214: GO 17897
// pom := GetBase ( bdepot ) ;
17216: LD_ADDR_VAR 0 10
17220: PUSH
17221: LD_VAR 0 1
17225: PPUSH
17226: CALL_OW 274
17230: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17231: LD_ADDR_VAR 0 11
17235: PUSH
17236: LD_VAR 0 2
17240: PPUSH
17241: LD_VAR 0 1
17245: PPUSH
17246: CALL_OW 248
17250: PPUSH
17251: CALL_OW 450
17255: ST_TO_ADDR
// if check_cost then
17256: LD_VAR 0 6
17260: IFFALSE 17337
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17262: LD_VAR 0 10
17266: PPUSH
17267: LD_INT 1
17269: PPUSH
17270: CALL_OW 275
17274: PUSH
17275: LD_VAR 0 11
17279: PUSH
17280: LD_INT 1
17282: ARRAY
17283: GREATEREQUAL
17284: PUSH
17285: LD_VAR 0 10
17289: PPUSH
17290: LD_INT 2
17292: PPUSH
17293: CALL_OW 275
17297: PUSH
17298: LD_VAR 0 11
17302: PUSH
17303: LD_INT 2
17305: ARRAY
17306: GREATEREQUAL
17307: AND
17308: PUSH
17309: LD_VAR 0 10
17313: PPUSH
17314: LD_INT 3
17316: PPUSH
17317: CALL_OW 275
17321: PUSH
17322: LD_VAR 0 11
17326: PUSH
17327: LD_INT 3
17329: ARRAY
17330: GREATEREQUAL
17331: AND
17332: NOT
17333: IFFALSE 17337
// exit ;
17335: GO 17897
// if GetBType ( bdepot ) = b_depot then
17337: LD_VAR 0 1
17341: PPUSH
17342: CALL_OW 266
17346: PUSH
17347: LD_INT 0
17349: EQUAL
17350: IFFALSE 17362
// dist := 28 else
17352: LD_ADDR_VAR 0 14
17356: PUSH
17357: LD_INT 28
17359: ST_TO_ADDR
17360: GO 17370
// dist := 36 ;
17362: LD_ADDR_VAR 0 14
17366: PUSH
17367: LD_INT 36
17369: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17370: LD_VAR 0 1
17374: PPUSH
17375: LD_VAR 0 3
17379: PPUSH
17380: LD_VAR 0 4
17384: PPUSH
17385: CALL_OW 297
17389: PUSH
17390: LD_VAR 0 14
17394: GREATER
17395: IFFALSE 17399
// exit ;
17397: GO 17897
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17399: LD_ADDR_VAR 0 12
17403: PUSH
17404: LD_VAR 0 2
17408: PPUSH
17409: LD_VAR 0 3
17413: PPUSH
17414: LD_VAR 0 4
17418: PPUSH
17419: LD_VAR 0 5
17423: PPUSH
17424: LD_VAR 0 1
17428: PPUSH
17429: CALL_OW 248
17433: PPUSH
17434: LD_INT 0
17436: PPUSH
17437: CALL 58262 0 6
17441: ST_TO_ADDR
// if not hexes then
17442: LD_VAR 0 12
17446: NOT
17447: IFFALSE 17451
// exit ;
17449: GO 17897
// hex := GetHexInfo ( x , y ) ;
17451: LD_ADDR_VAR 0 15
17455: PUSH
17456: LD_VAR 0 3
17460: PPUSH
17461: LD_VAR 0 4
17465: PPUSH
17466: CALL_OW 546
17470: ST_TO_ADDR
// if hex [ 1 ] then
17471: LD_VAR 0 15
17475: PUSH
17476: LD_INT 1
17478: ARRAY
17479: IFFALSE 17483
// exit ;
17481: GO 17897
// height := hex [ 2 ] ;
17483: LD_ADDR_VAR 0 13
17487: PUSH
17488: LD_VAR 0 15
17492: PUSH
17493: LD_INT 2
17495: ARRAY
17496: ST_TO_ADDR
// for i = 1 to hexes do
17497: LD_ADDR_VAR 0 8
17501: PUSH
17502: DOUBLE
17503: LD_INT 1
17505: DEC
17506: ST_TO_ADDR
17507: LD_VAR 0 12
17511: PUSH
17512: FOR_TO
17513: IFFALSE 17841
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17515: LD_VAR 0 12
17519: PUSH
17520: LD_VAR 0 8
17524: ARRAY
17525: PUSH
17526: LD_INT 1
17528: ARRAY
17529: PPUSH
17530: LD_VAR 0 12
17534: PUSH
17535: LD_VAR 0 8
17539: ARRAY
17540: PUSH
17541: LD_INT 2
17543: ARRAY
17544: PPUSH
17545: CALL_OW 488
17549: NOT
17550: IFFALSE 17554
// continue ;
17552: GO 17512
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17554: LD_ADDR_VAR 0 9
17558: PUSH
17559: LD_VAR 0 12
17563: PUSH
17564: LD_VAR 0 8
17568: ARRAY
17569: PUSH
17570: LD_INT 1
17572: ARRAY
17573: PPUSH
17574: LD_VAR 0 12
17578: PUSH
17579: LD_VAR 0 8
17583: ARRAY
17584: PUSH
17585: LD_INT 2
17587: ARRAY
17588: PPUSH
17589: CALL_OW 546
17593: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17594: LD_VAR 0 9
17598: PUSH
17599: LD_INT 1
17601: ARRAY
17602: PUSH
17603: LD_VAR 0 9
17607: PUSH
17608: LD_INT 2
17610: ARRAY
17611: PUSH
17612: LD_VAR 0 13
17616: PUSH
17617: LD_INT 2
17619: PLUS
17620: GREATER
17621: OR
17622: PUSH
17623: LD_VAR 0 9
17627: PUSH
17628: LD_INT 2
17630: ARRAY
17631: PUSH
17632: LD_VAR 0 13
17636: PUSH
17637: LD_INT 2
17639: MINUS
17640: LESS
17641: OR
17642: PUSH
17643: LD_VAR 0 9
17647: PUSH
17648: LD_INT 3
17650: ARRAY
17651: PUSH
17652: LD_INT 0
17654: PUSH
17655: LD_INT 8
17657: PUSH
17658: LD_INT 9
17660: PUSH
17661: LD_INT 10
17663: PUSH
17664: LD_INT 11
17666: PUSH
17667: LD_INT 12
17669: PUSH
17670: LD_INT 13
17672: PUSH
17673: LD_INT 16
17675: PUSH
17676: LD_INT 17
17678: PUSH
17679: LD_INT 18
17681: PUSH
17682: LD_INT 19
17684: PUSH
17685: LD_INT 20
17687: PUSH
17688: LD_INT 21
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: IN
17706: NOT
17707: OR
17708: PUSH
17709: LD_VAR 0 9
17713: PUSH
17714: LD_INT 5
17716: ARRAY
17717: NOT
17718: OR
17719: PUSH
17720: LD_VAR 0 9
17724: PUSH
17725: LD_INT 6
17727: ARRAY
17728: PUSH
17729: LD_INT 1
17731: PUSH
17732: LD_INT 2
17734: PUSH
17735: LD_INT 7
17737: PUSH
17738: LD_INT 9
17740: PUSH
17741: LD_INT 10
17743: PUSH
17744: LD_INT 11
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: IN
17755: NOT
17756: OR
17757: PUSH
17758: LD_VAR 0 12
17762: PUSH
17763: LD_VAR 0 8
17767: ARRAY
17768: PUSH
17769: LD_INT 1
17771: ARRAY
17772: PPUSH
17773: LD_VAR 0 12
17777: PUSH
17778: LD_VAR 0 8
17782: ARRAY
17783: PUSH
17784: LD_INT 2
17786: ARRAY
17787: PPUSH
17788: CALL_OW 428
17792: PUSH
17793: LD_INT 0
17795: GREATER
17796: OR
17797: PUSH
17798: LD_VAR 0 12
17802: PUSH
17803: LD_VAR 0 8
17807: ARRAY
17808: PUSH
17809: LD_INT 1
17811: ARRAY
17812: PPUSH
17813: LD_VAR 0 12
17817: PUSH
17818: LD_VAR 0 8
17822: ARRAY
17823: PUSH
17824: LD_INT 2
17826: ARRAY
17827: PPUSH
17828: CALL_OW 351
17832: OR
17833: IFFALSE 17839
// exit ;
17835: POP
17836: POP
17837: GO 17897
// end ;
17839: GO 17512
17841: POP
17842: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
17843: LD_VAR 0 2
17847: PUSH
17848: LD_INT 29
17850: PUSH
17851: LD_INT 30
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: IN
17858: PUSH
17859: LD_VAR 0 3
17863: PPUSH
17864: LD_VAR 0 4
17868: PPUSH
17869: LD_VAR 0 1
17873: PPUSH
17874: CALL_OW 255
17878: PPUSH
17879: CALL_OW 440
17883: NOT
17884: AND
17885: IFFALSE 17889
// exit ;
17887: GO 17897
// result := true ;
17889: LD_ADDR_VAR 0 7
17893: PUSH
17894: LD_INT 1
17896: ST_TO_ADDR
// end ; end_of_file
17897: LD_VAR 0 7
17901: RET
// every 1 do var i ;
17902: GO 17904
17904: DISABLE
17905: LD_INT 0
17907: PPUSH
// begin Video ( true ) ;
17908: LD_INT 1
17910: PPUSH
17911: CALL 81030 0 1
// CenterOnXY ( 53 , 40 ) ;
17915: LD_INT 53
17917: PPUSH
17918: LD_INT 40
17920: PPUSH
17921: CALL_OW 84
// wait ( 0 0$5 ) ;
17925: LD_INT 175
17927: PPUSH
17928: CALL_OW 67
// if gammaCommander = 1 then
17932: LD_EXP 12
17936: PUSH
17937: LD_INT 1
17939: EQUAL
17940: IFFALSE 17954
// Say ( Donaldson , D1-Don-1 ) ;
17942: LD_EXP 3
17946: PPUSH
17947: LD_STRING D1-Don-1
17949: PPUSH
17950: CALL_OW 88
// if gammaCommander = 2 then
17954: LD_EXP 12
17958: PUSH
17959: LD_INT 2
17961: EQUAL
17962: IFFALSE 17976
// Say ( Brown , D1-Brown-1 ) ;
17964: LD_EXP 2
17968: PPUSH
17969: LD_STRING D1-Brown-1
17971: PPUSH
17972: CALL_OW 88
// if gammaCommander = 3 then
17976: LD_EXP 12
17980: PUSH
17981: LD_INT 3
17983: EQUAL
17984: IFFALSE 17998
// Say ( Houten , D1-VanH-1 ) ;
17986: LD_EXP 13
17990: PPUSH
17991: LD_STRING D1-VanH-1
17993: PPUSH
17994: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
17998: LD_EXP 22
18002: PPUSH
18003: LD_STRING D1-Har-1
18005: PPUSH
18006: CALL_OW 94
// if gammaCommander = 1 then
18010: LD_EXP 12
18014: PUSH
18015: LD_INT 1
18017: EQUAL
18018: IFFALSE 18032
// Say ( Donaldson , D1-Don-2 ) ;
18020: LD_EXP 3
18024: PPUSH
18025: LD_STRING D1-Don-2
18027: PPUSH
18028: CALL_OW 88
// if gammaCommander = 2 then
18032: LD_EXP 12
18036: PUSH
18037: LD_INT 2
18039: EQUAL
18040: IFFALSE 18054
// Say ( Brown , D1-Brown-2 ) ;
18042: LD_EXP 2
18046: PPUSH
18047: LD_STRING D1-Brown-2
18049: PPUSH
18050: CALL_OW 88
// if gammaCommander = 3 then
18054: LD_EXP 12
18058: PUSH
18059: LD_INT 3
18061: EQUAL
18062: IFFALSE 18076
// Say ( Houten , D1-VanH-2 ) ;
18064: LD_EXP 13
18068: PPUSH
18069: LD_STRING D1-VanH-2
18071: PPUSH
18072: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
18076: LD_EXP 22
18080: PPUSH
18081: LD_STRING D1-Har-2
18083: PPUSH
18084: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
18088: LD_INT 22
18090: PUSH
18091: LD_INT 1
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 33
18100: PUSH
18101: LD_INT 2
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 61
18110: PUSH
18111: EMPTY
18112: LIST
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: LIST
18118: PPUSH
18119: CALL_OW 69
18123: IFFALSE 18188
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
18125: LD_ADDR_VAR 0 1
18129: PUSH
18130: LD_INT 22
18132: PUSH
18133: LD_INT 1
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 33
18142: PUSH
18143: LD_INT 2
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 61
18152: PUSH
18153: EMPTY
18154: LIST
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: LIST
18160: PPUSH
18161: CALL_OW 69
18165: PUSH
18166: FOR_IN
18167: IFFALSE 18186
// ComAgressiveMove ( i , 70 , 41 ) ;
18169: LD_VAR 0 1
18173: PPUSH
18174: LD_INT 70
18176: PPUSH
18177: LD_INT 41
18179: PPUSH
18180: CALL_OW 114
18184: GO 18166
18186: POP
18187: POP
// repeat wait ( 0 0$1 ) ;
18188: LD_INT 35
18190: PPUSH
18191: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
18195: LD_ADDR_VAR 0 1
18199: PUSH
18200: LD_INT 22
18202: PUSH
18203: LD_INT 6
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: EMPTY
18211: LIST
18212: PPUSH
18213: CALL_OW 69
18217: PUSH
18218: FOR_IN
18219: IFFALSE 18238
// ComAgressiveMove ( i , 54 , 20 ) ;
18221: LD_VAR 0 1
18225: PPUSH
18226: LD_INT 54
18228: PPUSH
18229: LD_INT 20
18231: PPUSH
18232: CALL_OW 114
18236: GO 18218
18238: POP
18239: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
18240: LD_ADDR_VAR 0 1
18244: PUSH
18245: LD_INT 22
18247: PUSH
18248: LD_INT 1
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 25
18257: PUSH
18258: LD_INT 1
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 3
18267: PUSH
18268: LD_INT 54
18270: PUSH
18271: EMPTY
18272: LIST
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: LIST
18282: PPUSH
18283: CALL_OW 69
18287: PUSH
18288: FOR_IN
18289: IFFALSE 18323
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
18291: LD_VAR 0 1
18295: PPUSH
18296: LD_INT 70
18298: PPUSH
18299: LD_INT 41
18301: PPUSH
18302: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
18306: LD_VAR 0 1
18310: PPUSH
18311: LD_INT 46
18313: PPUSH
18314: LD_INT 39
18316: PPUSH
18317: CALL_OW 174
// end ;
18321: GO 18288
18323: POP
18324: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
18325: LD_ADDR_VAR 0 1
18329: PUSH
18330: LD_INT 22
18332: PUSH
18333: LD_INT 1
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 21
18342: PUSH
18343: LD_INT 1
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 3
18352: PUSH
18353: LD_INT 24
18355: PUSH
18356: LD_INT 500
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: LIST
18371: PPUSH
18372: CALL_OW 69
18376: PUSH
18377: FOR_IN
18378: IFFALSE 18411
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
18380: LD_VAR 0 1
18384: PPUSH
18385: LD_EXP 37
18389: PPUSH
18390: CALL_OW 250
18394: PPUSH
18395: LD_EXP 37
18399: PPUSH
18400: CALL_OW 251
18404: PPUSH
18405: CALL_OW 111
18409: GO 18377
18411: POP
18412: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
18413: LD_INT 22
18415: PUSH
18416: LD_INT 6
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 21
18425: PUSH
18426: LD_INT 1
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 24
18435: PUSH
18436: LD_INT 250
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: LIST
18447: PPUSH
18448: CALL_OW 69
18452: PUSH
18453: LD_INT 5
18455: LESS
18456: IFFALSE 18188
// Video ( false ) ;
18458: LD_INT 0
18460: PPUSH
18461: CALL 81030 0 1
// ChangeMissionObjectives ( M1 ) ;
18465: LD_STRING M1
18467: PPUSH
18468: CALL_OW 337
// wait ( 0 0$2 ) ;
18472: LD_INT 70
18474: PPUSH
18475: CALL_OW 67
// SaveForQuickRestart ;
18479: CALL_OW 22
// startCutscene = 0 ;
18483: LD_ADDR_EXP 38
18487: PUSH
18488: LD_INT 0
18490: ST_TO_ADDR
// end ;
18491: PPOPN 1
18493: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
18494: LD_EXP 38
18498: IFFALSE 18589
18500: GO 18502
18502: DISABLE
18503: LD_INT 0
18505: PPUSH
18506: PPUSH
// begin enable ;
18507: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
18508: LD_ADDR_VAR 0 1
18512: PUSH
18513: LD_INT 22
18515: PUSH
18516: LD_INT 1
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 21
18525: PUSH
18526: LD_INT 1
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 3
18535: PUSH
18536: LD_INT 24
18538: PUSH
18539: LD_INT 700
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: LIST
18554: PPUSH
18555: CALL_OW 69
18559: ST_TO_ADDR
// for i in tmp do
18560: LD_ADDR_VAR 0 2
18564: PUSH
18565: LD_VAR 0 1
18569: PUSH
18570: FOR_IN
18571: IFFALSE 18587
// SetLives ( i , 700 ) ;
18573: LD_VAR 0 2
18577: PPUSH
18578: LD_INT 700
18580: PPUSH
18581: CALL_OW 234
18585: GO 18570
18587: POP
18588: POP
// end ;
18589: PPOPN 2
18591: END
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 6 ] ] ) = 0 or tick > 3 3$00 do
18592: LD_INT 22
18594: PUSH
18595: LD_INT 1
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 101
18604: PUSH
18605: LD_INT 6
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PPUSH
18616: CALL_OW 69
18620: PUSH
18621: LD_INT 0
18623: EQUAL
18624: PUSH
18625: LD_OWVAR 1
18629: PUSH
18630: LD_INT 6300
18632: GREATER
18633: OR
18634: IFFALSE 18883
18636: GO 18638
18638: DISABLE
// begin PrepareSupportFromDelta ;
18639: CALL 3900 0 0
// firstAttack = 1 ;
18643: LD_ADDR_EXP 33
18647: PUSH
18648: LD_INT 1
18650: ST_TO_ADDR
// if IsOk ( Gladstone ) then
18651: LD_EXP 8
18655: PPUSH
18656: CALL_OW 302
18660: IFFALSE 18676
// Say ( Gladstone , D2-Glad-1 ) else
18662: LD_EXP 8
18666: PPUSH
18667: LD_STRING D2-Glad-1
18669: PPUSH
18670: CALL_OW 88
18674: GO 18784
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
18676: LD_INT 4
18678: PPUSH
18679: LD_INT 22
18681: PUSH
18682: LD_INT 1
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 21
18691: PUSH
18692: LD_INT 1
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 2
18701: PUSH
18702: LD_INT 25
18704: PUSH
18705: LD_INT 1
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 25
18714: PUSH
18715: LD_INT 2
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: LD_INT 25
18724: PUSH
18725: LD_INT 3
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 25
18734: PUSH
18735: LD_INT 4
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: LIST
18753: PPUSH
18754: CALL_OW 70
18758: PUSH
18759: LD_EXP 15
18763: PUSH
18764: LD_EXP 14
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: DIFF
18773: PPUSH
18774: LD_STRING D2-Sol1-1
18776: PPUSH
18777: LD_STRING D2-FSol1-1
18779: PPUSH
18780: CALL 7322 0 3
// if IsOK ( Donaldson ) and gammaCommander = 1 then
18784: LD_EXP 3
18788: PPUSH
18789: CALL_OW 302
18793: PUSH
18794: LD_EXP 12
18798: PUSH
18799: LD_INT 1
18801: EQUAL
18802: AND
18803: IFFALSE 18817
// Say ( Donaldson , D2-Don-1 ) ;
18805: LD_EXP 3
18809: PPUSH
18810: LD_STRING D2-Don-1
18812: PPUSH
18813: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
18817: LD_EXP 2
18821: PPUSH
18822: CALL_OW 302
18826: PUSH
18827: LD_EXP 12
18831: PUSH
18832: LD_INT 2
18834: EQUAL
18835: AND
18836: IFFALSE 18850
// Say ( Brown , D2-Brown-1 ) ;
18838: LD_EXP 2
18842: PPUSH
18843: LD_STRING D2-Brown-1
18845: PPUSH
18846: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
18850: LD_EXP 13
18854: PPUSH
18855: CALL_OW 302
18859: PUSH
18860: LD_EXP 12
18864: PUSH
18865: LD_INT 3
18867: EQUAL
18868: AND
18869: IFFALSE 18883
// Say ( Houten , D2-VanH-1 ) ;
18871: LD_EXP 13
18875: PPUSH
18876: LD_STRING D2-VanH-1
18878: PPUSH
18879: CALL_OW 88
// end ;
18883: END
// every 0 0$1 trigger tick > 3 3$00 do var none ;
18884: LD_OWVAR 1
18888: PUSH
18889: LD_INT 6300
18891: GREATER
18892: IFFALSE 19946
18894: GO 18896
18896: DISABLE
18897: LD_INT 0
18899: PPUSH
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
18900: LD_STRING 07_time
18902: PPUSH
18903: LD_INT 12600
18905: PPUSH
18906: CALL_OW 30
18910: PUSH
18911: LD_INT 3
18913: DIV
18914: PPUSH
18915: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
18919: LD_INT 34
18921: PPUSH
18922: LD_INT 1
18924: PPUSH
18925: CALL_OW 321
18929: PUSH
18930: LD_INT 2
18932: EQUAL
18933: IFFALSE 18942
// SetAchievement ( ACH_HEAVYGUN ) ;
18935: LD_STRING ACH_HEAVYGUN
18937: PPUSH
18938: CALL_OW 543
// PrepareMacmillanSquad ;
18942: CALL 4589 0 0
// CenterNowOnUnits ( JMM ) ;
18946: LD_EXP 1
18950: PPUSH
18951: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
18955: LD_EXP 1
18959: PPUSH
18960: LD_STRING D3-JMM-1
18962: PPUSH
18963: CALL_OW 88
// JMMArrive = 1 ;
18967: LD_ADDR_EXP 39
18971: PUSH
18972: LD_INT 1
18974: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
18975: LD_EXP 3
18979: PPUSH
18980: CALL_OW 302
18984: PUSH
18985: LD_EXP 12
18989: PUSH
18990: LD_INT 1
18992: EQUAL
18993: AND
18994: IFFALSE 19010
// begin Say ( Donaldson , D3-Don-1 ) ;
18996: LD_EXP 3
19000: PPUSH
19001: LD_STRING D3-Don-1
19003: PPUSH
19004: CALL_OW 88
// end else
19008: GO 19062
// begin if gammaCommander = 1 then
19010: LD_EXP 12
19014: PUSH
19015: LD_INT 1
19017: EQUAL
19018: IFFALSE 19062
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
19020: LD_EXP 11
19024: PPUSH
19025: LD_INT 26
19027: PUSH
19028: LD_INT 1
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PPUSH
19035: CALL_OW 72
19039: PPUSH
19040: LD_STRING D3-Sol1-1
19042: PPUSH
19043: LD_STRING D3-Sol1-1
19045: PPUSH
19046: CALL 7322 0 3
// Say ( JMM , D3-JMM-2 ) ;
19050: LD_EXP 1
19054: PPUSH
19055: LD_STRING D3-JMM-2
19057: PPUSH
19058: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
19062: LD_EXP 2
19066: PPUSH
19067: CALL_OW 302
19071: PUSH
19072: LD_EXP 12
19076: PUSH
19077: LD_INT 2
19079: EQUAL
19080: AND
19081: IFFALSE 19097
// begin Say ( Brown , D3-Brown-1 ) ;
19083: LD_EXP 2
19087: PPUSH
19088: LD_STRING D3-Brown-1
19090: PPUSH
19091: CALL_OW 88
// end else
19095: GO 19149
// begin if gammaCommander = 2 then
19097: LD_EXP 12
19101: PUSH
19102: LD_INT 2
19104: EQUAL
19105: IFFALSE 19149
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
19107: LD_EXP 11
19111: PPUSH
19112: LD_INT 26
19114: PUSH
19115: LD_INT 1
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PPUSH
19122: CALL_OW 72
19126: PPUSH
19127: LD_STRING D3-Sol1-1a
19129: PPUSH
19130: LD_STRING D3-Sol1-1a
19132: PPUSH
19133: CALL 7322 0 3
// Say ( JMM , D3-JMM-2 ) ;
19137: LD_EXP 1
19141: PPUSH
19142: LD_STRING D3-JMM-2
19144: PPUSH
19145: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
19149: LD_EXP 13
19153: PPUSH
19154: CALL_OW 302
19158: PUSH
19159: LD_EXP 12
19163: PUSH
19164: LD_INT 3
19166: EQUAL
19167: AND
19168: IFFALSE 19184
// begin Say ( Houten , D3-VanH-1 ) ;
19170: LD_EXP 13
19174: PPUSH
19175: LD_STRING D3-VanH-1
19177: PPUSH
19178: CALL_OW 88
// end else
19182: GO 19236
// begin if gammaCommander = 3 then
19184: LD_EXP 12
19188: PUSH
19189: LD_INT 3
19191: EQUAL
19192: IFFALSE 19236
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
19194: LD_EXP 11
19198: PPUSH
19199: LD_INT 26
19201: PUSH
19202: LD_INT 1
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PPUSH
19209: CALL_OW 72
19213: PPUSH
19214: LD_STRING D3-Sol1-1b
19216: PPUSH
19217: LD_STRING D3-Sol1-1b
19219: PPUSH
19220: CALL 7322 0 3
// Say ( JMM , D3-JMM-2 ) ;
19224: LD_EXP 1
19228: PPUSH
19229: LD_STRING D3-JMM-2
19231: PPUSH
19232: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
19236: LD_EXP 15
19240: PPUSH
19241: CALL_OW 302
19245: IFFALSE 19273
// begin Say ( Joan , D3a-Joan-1 ) ;
19247: LD_EXP 15
19251: PPUSH
19252: LD_STRING D3a-Joan-1
19254: PPUSH
19255: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
19259: LD_EXP 1
19263: PPUSH
19264: LD_STRING D3a-JMM-1
19266: PPUSH
19267: CALL_OW 88
// end else
19271: GO 19615
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
19273: LD_STRING 06_JoanStatus_1
19275: PPUSH
19276: LD_INT 0
19278: PPUSH
19279: CALL_OW 30
19283: PUSH
19284: LD_INT 1
19286: EQUAL
19287: IFFALSE 19615
// begin Say ( JMM , D3b-JMM-1 ) ;
19289: LD_EXP 1
19293: PPUSH
19294: LD_STRING D3b-JMM-1
19296: PPUSH
19297: CALL_OW 88
// if gammaCommander = 1 then
19301: LD_EXP 12
19305: PUSH
19306: LD_INT 1
19308: EQUAL
19309: IFFALSE 19366
// if IsOK ( Donaldson ) then
19311: LD_EXP 3
19315: PPUSH
19316: CALL_OW 302
19320: IFFALSE 19336
// Say ( Donaldson , D3b-Don-1 ) else
19322: LD_EXP 3
19326: PPUSH
19327: LD_STRING D3b-Don-1
19329: PPUSH
19330: CALL_OW 88
19334: GO 19366
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19336: LD_EXP 11
19340: PPUSH
19341: LD_INT 26
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PPUSH
19351: CALL_OW 72
19355: PPUSH
19356: LD_STRING D3b-Sol1-1
19358: PPUSH
19359: LD_STRING D3b-Sol1-1
19361: PPUSH
19362: CALL 7322 0 3
// if gammaCommander = 2 then
19366: LD_EXP 12
19370: PUSH
19371: LD_INT 2
19373: EQUAL
19374: IFFALSE 19431
// if IsOk ( Brown ) then
19376: LD_EXP 2
19380: PPUSH
19381: CALL_OW 302
19385: IFFALSE 19401
// Say ( Brown , D3b-Brown-1 ) else
19387: LD_EXP 2
19391: PPUSH
19392: LD_STRING D3b-Brown-1
19394: PPUSH
19395: CALL_OW 88
19399: GO 19431
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19401: LD_EXP 11
19405: PPUSH
19406: LD_INT 26
19408: PUSH
19409: LD_INT 1
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PPUSH
19416: CALL_OW 72
19420: PPUSH
19421: LD_STRING D3b-Sol1-1
19423: PPUSH
19424: LD_STRING D3b-Sol1-1
19426: PPUSH
19427: CALL 7322 0 3
// if gammaCommander = 3 then
19431: LD_EXP 12
19435: PUSH
19436: LD_INT 3
19438: EQUAL
19439: IFFALSE 19496
// if IsOk ( Houten ) then
19441: LD_EXP 13
19445: PPUSH
19446: CALL_OW 302
19450: IFFALSE 19466
// Say ( Houten , D3b-VanH-1 ) else
19452: LD_EXP 13
19456: PPUSH
19457: LD_STRING D3b-VanH-1
19459: PPUSH
19460: CALL_OW 88
19464: GO 19496
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19466: LD_EXP 11
19470: PPUSH
19471: LD_INT 26
19473: PUSH
19474: LD_INT 1
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PPUSH
19481: CALL_OW 72
19485: PPUSH
19486: LD_STRING D3b-Sol1-1
19488: PPUSH
19489: LD_STRING D3b-Sol1-1
19491: PPUSH
19492: CALL 7322 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
19496: LD_EXP 11
19500: PPUSH
19501: LD_INT 26
19503: PUSH
19504: LD_INT 1
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PPUSH
19511: CALL_OW 72
19515: PUSH
19516: LD_EXP 12
19520: PUSH
19521: LD_INT 1
19523: EQUAL
19524: PUSH
19525: LD_EXP 3
19529: PPUSH
19530: CALL_OW 302
19534: AND
19535: OR
19536: PUSH
19537: LD_EXP 12
19541: PUSH
19542: LD_INT 2
19544: EQUAL
19545: PUSH
19546: LD_EXP 2
19550: PPUSH
19551: CALL_OW 302
19555: AND
19556: OR
19557: PUSH
19558: LD_EXP 12
19562: PUSH
19563: LD_INT 3
19565: EQUAL
19566: PUSH
19567: LD_EXP 13
19571: PPUSH
19572: CALL_OW 302
19576: AND
19577: OR
19578: IFFALSE 19592
// Say ( JMM , D3b-JMM-2 ) ;
19580: LD_EXP 1
19584: PPUSH
19585: LD_STRING D3b-JMM-2
19587: PPUSH
19588: CALL_OW 88
// if IsOK ( Lisa ) then
19592: LD_EXP 6
19596: PPUSH
19597: CALL_OW 302
19601: IFFALSE 19615
// Say ( Lisa , D3b-Lisa-2 ) ;
19603: LD_EXP 6
19607: PPUSH
19608: LD_STRING D3b-Lisa-2
19610: PPUSH
19611: CALL_OW 88
// end ; end ; none := [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] ^ macmilan_squad ;
19615: LD_ADDR_VAR 0 1
19619: PUSH
19620: LD_EXP 1
19624: PUSH
19625: LD_EXP 2
19629: PUSH
19630: LD_EXP 3
19634: PUSH
19635: LD_EXP 4
19639: PUSH
19640: LD_EXP 5
19644: PUSH
19645: LD_EXP 6
19649: PUSH
19650: LD_EXP 7
19654: PUSH
19655: LD_EXP 8
19659: PUSH
19660: LD_EXP 9
19664: PUSH
19665: LD_EXP 10
19669: PUSH
19670: LD_EXP 15
19674: PUSH
19675: LD_EXP 14
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: PUSH
19694: LD_EXP 42
19698: ADD
19699: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCa-Sol1-1 , DCa-Sol1-1 ) ;
19700: LD_INT 22
19702: PUSH
19703: LD_INT 1
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: LD_INT 21
19712: PUSH
19713: LD_INT 1
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 26
19722: PUSH
19723: LD_INT 1
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 2
19732: PUSH
19733: LD_INT 25
19735: PUSH
19736: LD_INT 1
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 25
19745: PUSH
19746: LD_INT 2
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 25
19755: PUSH
19756: LD_INT 3
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 25
19765: PUSH
19766: LD_INT 4
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: PPUSH
19786: CALL_OW 69
19790: PUSH
19791: LD_VAR 0 1
19795: DIFF
19796: PPUSH
19797: LD_STRING DCa-Sol1-1
19799: PPUSH
19800: LD_STRING DCa-Sol1-1
19802: PPUSH
19803: CALL 7322 0 3
// Say ( JMM , DCb-JMM-1 ) ;
19807: LD_EXP 1
19811: PPUSH
19812: LD_STRING DCb-JMM-1
19814: PPUSH
19815: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCb-Sol1-1 , DCb-Sol1-1 ) ;
19819: LD_INT 22
19821: PUSH
19822: LD_INT 1
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 21
19831: PUSH
19832: LD_INT 1
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 26
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 2
19851: PUSH
19852: LD_INT 25
19854: PUSH
19855: LD_INT 1
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 25
19864: PUSH
19865: LD_INT 2
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 25
19874: PUSH
19875: LD_INT 3
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 25
19884: PUSH
19885: LD_INT 4
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: PPUSH
19905: CALL_OW 69
19909: PUSH
19910: LD_VAR 0 1
19914: DIFF
19915: PPUSH
19916: LD_STRING DCb-Sol1-1
19918: PPUSH
19919: LD_STRING DCb-Sol1-1
19921: PPUSH
19922: CALL 7322 0 3
// Say ( JMM , DCb-JMM-2 ) ;
19926: LD_EXP 1
19930: PPUSH
19931: LD_STRING DCb-JMM-2
19933: PPUSH
19934: CALL_OW 88
// secondAttack = 1 ;
19938: LD_ADDR_EXP 34
19942: PUSH
19943: LD_INT 1
19945: ST_TO_ADDR
// end ;
19946: PPOPN 1
19948: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 18 18$00 do
19949: LD_EXP 39
19953: PUSH
19954: LD_INT 1
19956: EQUAL
19957: PUSH
19958: LD_OWVAR 1
19962: PUSH
19963: LD_INT 37800
19965: GREATEREQUAL
19966: AND
19967: IFFALSE 20040
19969: GO 19971
19971: DISABLE
// begin DialogueOn ;
19972: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
19976: LD_EXP 23
19980: PPUSH
19981: LD_STRING D4-Pow-1
19983: PPUSH
19984: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
19988: LD_EXP 1
19992: PPUSH
19993: LD_STRING D4-JMM-1
19995: PPUSH
19996: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
20000: LD_EXP 23
20004: PPUSH
20005: LD_STRING D4-Pow-2
20007: PPUSH
20008: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
20012: LD_EXP 1
20016: PPUSH
20017: LD_STRING D4-JMM-2
20019: PPUSH
20020: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
20024: LD_EXP 23
20028: PPUSH
20029: LD_STRING D4-Pow-3
20031: PPUSH
20032: CALL_OW 94
// DialogueOff ;
20036: CALL_OW 7
// end ;
20040: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 24 24$00 do
20041: LD_EXP 39
20045: PUSH
20046: LD_INT 1
20048: EQUAL
20049: PUSH
20050: LD_OWVAR 1
20054: PUSH
20055: LD_INT 50400
20057: GREATEREQUAL
20058: AND
20059: IFFALSE 20084
20061: GO 20063
20063: DISABLE
// begin DialogueOn ;
20064: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
20068: LD_EXP 23
20072: PPUSH
20073: LD_STRING D4a-Pow-1
20075: PPUSH
20076: CALL_OW 94
// DialogueOff ;
20080: CALL_OW 7
// end ;
20084: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 35 35$00 do
20085: LD_EXP 39
20089: PUSH
20090: LD_INT 1
20092: EQUAL
20093: PUSH
20094: LD_OWVAR 1
20098: PUSH
20099: LD_INT 73500
20101: GREATEREQUAL
20102: AND
20103: IFFALSE 20124
20105: GO 20107
20107: DISABLE
// begin PrepareSikorsky ;
20108: CALL 5847 0 0
// SikorskyArrive = 1 ;
20112: LD_ADDR_EXP 18
20116: PUSH
20117: LD_INT 1
20119: ST_TO_ADDR
// PrepareSikorskyArmy ;
20120: CALL 6023 0 0
// end ;
20124: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
20125: LD_EXP 17
20129: PPUSH
20130: LD_INT 5
20132: PPUSH
20133: CALL_OW 308
20137: IFFALSE 20329
20139: GO 20141
20141: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
20142: LD_EXP 17
20146: PPUSH
20147: CALL_OW 87
// DialogueOn ;
20151: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
20155: LD_EXP 16
20159: PPUSH
20160: LD_STRING D5-Sik-1
20162: PPUSH
20163: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
20167: LD_EXP 1
20171: PPUSH
20172: LD_STRING D5-JMM-1a
20174: PPUSH
20175: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
20179: LD_EXP 16
20183: PPUSH
20184: LD_STRING D5-Sik-2
20186: PPUSH
20187: CALL_OW 88
// case query ( QSikorski ) of 1 :
20191: LD_STRING QSikorski
20193: PPUSH
20194: CALL_OW 97
20198: PUSH
20199: LD_INT 1
20201: DOUBLE
20202: EQUAL
20203: IFTRUE 20207
20205: GO 20230
20207: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
20208: LD_EXP 16
20212: PPUSH
20213: LD_STRING D5a-Sik-1
20215: PPUSH
20216: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
20220: LD_ADDR_EXP 19
20224: PUSH
20225: LD_INT 2100
20227: ST_TO_ADDR
// end ; 2 :
20228: GO 20317
20230: LD_INT 2
20232: DOUBLE
20233: EQUAL
20234: IFTRUE 20238
20236: GO 20261
20238: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
20239: LD_EXP 16
20243: PPUSH
20244: LD_STRING D5b-Sik-1
20246: PPUSH
20247: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20251: LD_ADDR_EXP 19
20255: PUSH
20256: LD_INT 10500
20258: ST_TO_ADDR
// end ; 3 :
20259: GO 20317
20261: LD_INT 3
20263: DOUBLE
20264: EQUAL
20265: IFTRUE 20269
20267: GO 20316
20269: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
20270: LD_EXP 16
20274: PPUSH
20275: LD_STRING D5c-Sik-1
20277: PPUSH
20278: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
20282: LD_EXP 1
20286: PPUSH
20287: LD_STRING D5c-JMM-1
20289: PPUSH
20290: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
20294: LD_EXP 16
20298: PPUSH
20299: LD_STRING D5c-Sik-2
20301: PPUSH
20302: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20306: LD_ADDR_EXP 19
20310: PUSH
20311: LD_INT 10500
20313: ST_TO_ADDR
// end ; end ;
20314: GO 20317
20316: POP
// DialogueOff ;
20317: CALL_OW 7
// timerStatus = 1 ;
20321: LD_ADDR_EXP 35
20325: PUSH
20326: LD_INT 1
20328: ST_TO_ADDR
// end ;
20329: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
20330: LD_EXP 19
20334: PUSH
20335: LD_INT 35
20337: LESS
20338: IFFALSE 20386
20340: GO 20342
20342: DISABLE
// begin timerStatus = 0 ;
20343: LD_ADDR_EXP 35
20347: PUSH
20348: LD_INT 0
20350: ST_TO_ADDR
// DialogueOn ;
20351: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
20355: LD_EXP 16
20359: PPUSH
20360: LD_STRING D6-Sik-1
20362: PPUSH
20363: CALL_OW 88
// DialogueOff ;
20367: CALL_OW 7
// SikorskyAI = 1 ;
20371: LD_ADDR_EXP 20
20375: PUSH
20376: LD_INT 1
20378: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
20379: LD_STRING M2
20381: PPUSH
20382: CALL_OW 337
// end ;
20386: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
20387: LD_EXP 17
20391: PPUSH
20392: LD_INT 18
20394: PPUSH
20395: CALL_OW 308
20399: IFFALSE 20509
20401: GO 20403
20403: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
20404: LD_EXP 16
20408: PPUSH
20409: LD_STRING D7-Sik-1
20411: PPUSH
20412: CALL_OW 88
// wait ( 0 0$10 ) ;
20416: LD_INT 350
20418: PPUSH
20419: CALL_OW 67
// if IsInArea ( JMM , RussianBaseTerritory ) or ( GetDriverVehicle ( JMM ) and IsInArea ( GetDriverVehicle ( JMM ) , RussianBaseTerritory ) ) then
20423: LD_EXP 1
20427: PPUSH
20428: LD_INT 24
20430: PPUSH
20431: CALL_OW 308
20435: PUSH
20436: LD_EXP 1
20440: PPUSH
20441: CALL 17052 0 1
20445: PUSH
20446: LD_EXP 1
20450: PPUSH
20451: CALL 17052 0 1
20455: PPUSH
20456: LD_INT 24
20458: PPUSH
20459: CALL_OW 308
20463: AND
20464: OR
20465: IFFALSE 20489
// begin Say ( Sikorski , D7a-Sik-1 ) ;
20467: LD_EXP 16
20471: PPUSH
20472: LD_STRING D7a-Sik-1
20474: PPUSH
20475: CALL_OW 88
// SikorskyStatus = 1 ;
20479: LD_ADDR_EXP 21
20483: PUSH
20484: LD_INT 1
20486: ST_TO_ADDR
// end else
20487: GO 20509
// begin Say ( Sikorski , D7b-Sik-1 ) ;
20489: LD_EXP 16
20493: PPUSH
20494: LD_STRING D7b-Sik-1
20496: PPUSH
20497: CALL_OW 88
// SikorskyStatus = 2 ;
20501: LD_ADDR_EXP 21
20505: PUSH
20506: LD_INT 2
20508: ST_TO_ADDR
// end ; end ; end_of_file
20509: END
// on BuildingComplete ( building ) do var tmp , un ;
20510: LD_INT 0
20512: PPUSH
20513: PPUSH
// begin if GetSide ( building ) = 3 then
20514: LD_VAR 0 1
20518: PPUSH
20519: CALL_OW 255
20523: PUSH
20524: LD_INT 3
20526: EQUAL
20527: IFFALSE 21064
// begin if GetBType ( building ) = b_depot then
20529: LD_VAR 0 1
20533: PPUSH
20534: CALL_OW 266
20538: PUSH
20539: LD_INT 0
20541: EQUAL
20542: IFFALSE 20610
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
20544: LD_VAR 0 1
20548: PPUSH
20549: CALL_OW 274
20553: PPUSH
20554: LD_INT 1
20556: PPUSH
20557: LD_INT 5000
20559: PPUSH
20560: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
20564: LD_VAR 0 1
20568: PPUSH
20569: CALL_OW 274
20573: PPUSH
20574: LD_INT 2
20576: PPUSH
20577: LD_INT 5000
20579: PPUSH
20580: CALL_OW 277
// SetBName ( building , konev ) ;
20584: LD_VAR 0 1
20588: PPUSH
20589: LD_STRING konev
20591: PPUSH
20592: CALL_OW 500
// ruDepot = building ;
20596: LD_ADDR_EXP 28
20600: PUSH
20601: LD_VAR 0 1
20605: ST_TO_ADDR
// BuildRussianBase ;
20606: CALL 7933 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
20610: LD_VAR 0 1
20614: PPUSH
20615: CALL_OW 266
20619: PUSH
20620: LD_INT 0
20622: EQUAL
20623: PUSH
20624: LD_VAR 0 1
20628: PPUSH
20629: CALL_OW 266
20633: PUSH
20634: LD_INT 2
20636: EQUAL
20637: OR
20638: PUSH
20639: LD_VAR 0 1
20643: PPUSH
20644: CALL_OW 266
20648: PUSH
20649: LD_INT 4
20651: EQUAL
20652: OR
20653: IFFALSE 20664
// ComUpgrade ( building ) ;
20655: LD_VAR 0 1
20659: PPUSH
20660: CALL_OW 146
// if GetBType ( building ) = b_lab then
20664: LD_VAR 0 1
20668: PPUSH
20669: CALL_OW 266
20673: PUSH
20674: LD_INT 6
20676: EQUAL
20677: IFFALSE 20728
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20679: LD_VAR 0 1
20683: PPUSH
20684: LD_INT 10
20686: PPUSH
20687: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
20691: LD_VAR 0 1
20695: PPUSH
20696: LD_INT 12
20698: PPUSH
20699: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
20703: LD_INT 3
20705: PPUSH
20706: LD_VAR 0 1
20710: PPUSH
20711: LD_INT 3
20713: PPUSH
20714: CALL 8477 0 3
// ruLab = building ;
20718: LD_ADDR_EXP 29
20722: PUSH
20723: LD_VAR 0 1
20727: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
20728: LD_VAR 0 1
20732: PPUSH
20733: CALL_OW 266
20737: PUSH
20738: LD_INT 32
20740: EQUAL
20741: IFFALSE 20859
// begin uc_side = 3 ;
20743: LD_ADDR_OWVAR 20
20747: PUSH
20748: LD_INT 3
20750: ST_TO_ADDR
// uc_nation = 3 ;
20751: LD_ADDR_OWVAR 21
20755: PUSH
20756: LD_INT 3
20758: ST_TO_ADDR
// hc_gallery =  ;
20759: LD_ADDR_OWVAR 33
20763: PUSH
20764: LD_STRING 
20766: ST_TO_ADDR
// hc_name =  ;
20767: LD_ADDR_OWVAR 26
20771: PUSH
20772: LD_STRING 
20774: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
20775: LD_INT 0
20777: PPUSH
20778: LD_INT 1
20780: PPUSH
20781: LD_EXP 25
20785: PPUSH
20786: LD_EXP 26
20790: PPUSH
20791: CALL_OW 12
20795: PPUSH
20796: CALL_OW 380
// un = CreateHuman ;
20800: LD_ADDR_VAR 0 3
20804: PUSH
20805: CALL_OW 44
20809: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
20810: LD_VAR 0 3
20814: PPUSH
20815: LD_VAR 0 1
20819: PPUSH
20820: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20824: LD_VAR 0 1
20828: PPUSH
20829: LD_INT 43
20831: PUSH
20832: LD_INT 44
20834: PUSH
20835: LD_INT 46
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 1
20845: PPUSH
20846: LD_INT 3
20848: PPUSH
20849: CALL_OW 12
20853: ARRAY
20854: PPUSH
20855: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
20859: LD_VAR 0 1
20863: PPUSH
20864: CALL_OW 266
20868: PUSH
20869: LD_INT 33
20871: EQUAL
20872: IFFALSE 20909
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20874: LD_VAR 0 1
20878: PPUSH
20879: LD_INT 43
20881: PUSH
20882: LD_INT 44
20884: PUSH
20885: LD_INT 46
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 1
20895: PPUSH
20896: LD_INT 3
20898: PPUSH
20899: CALL_OW 12
20903: ARRAY
20904: PPUSH
20905: CALL_OW 208
// if GetBType ( building ) = b_bunker then
20909: LD_VAR 0 1
20913: PPUSH
20914: CALL_OW 266
20918: PUSH
20919: LD_INT 32
20921: EQUAL
20922: IFFALSE 20959
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20924: LD_VAR 0 1
20928: PPUSH
20929: LD_INT 43
20931: PUSH
20932: LD_INT 44
20934: PUSH
20935: LD_INT 46
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 1
20945: PPUSH
20946: LD_INT 3
20948: PPUSH
20949: CALL_OW 12
20953: ARRAY
20954: PPUSH
20955: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
20959: LD_VAR 0 1
20963: PPUSH
20964: CALL_OW 266
20968: PUSH
20969: LD_INT 24
20971: EQUAL
20972: IFFALSE 20982
// russianAI = 1 ;
20974: LD_ADDR_EXP 27
20978: PUSH
20979: LD_INT 1
20981: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
20982: LD_EXP 31
20986: PUSH
20987: LD_INT 0
20989: GREATER
20990: IFFALSE 21064
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20992: LD_ADDR_EXP 31
20996: PUSH
20997: LD_EXP 31
21001: PPUSH
21002: LD_INT 1
21004: PPUSH
21005: CALL_OW 3
21009: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21010: LD_ADDR_EXP 31
21014: PUSH
21015: LD_EXP 31
21019: PPUSH
21020: LD_INT 1
21022: PPUSH
21023: CALL_OW 3
21027: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21028: LD_ADDR_EXP 31
21032: PUSH
21033: LD_EXP 31
21037: PPUSH
21038: LD_INT 1
21040: PPUSH
21041: CALL_OW 3
21045: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21046: LD_ADDR_EXP 31
21050: PUSH
21051: LD_EXP 31
21055: PPUSH
21056: LD_INT 1
21058: PPUSH
21059: CALL_OW 3
21063: ST_TO_ADDR
// end ; end ; end ;
21064: PPOPN 3
21066: END
// on UpgradeComplete ( building ) do var i ;
21067: LD_INT 0
21069: PPUSH
// begin if GetSide ( building ) = 3 then
21070: LD_VAR 0 1
21074: PPUSH
21075: CALL_OW 255
21079: PUSH
21080: LD_INT 3
21082: EQUAL
21083: IFFALSE 21264
// begin if GetBType ( building ) = b_factory then
21085: LD_VAR 0 1
21089: PPUSH
21090: CALL_OW 266
21094: PUSH
21095: LD_INT 3
21097: EQUAL
21098: IFFALSE 21165
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
21100: LD_ADDR_VAR 0 2
21104: PUSH
21105: LD_INT 22
21107: PUSH
21108: LD_INT 3
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 25
21117: PUSH
21118: LD_INT 3
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PPUSH
21129: CALL_OW 69
21133: PUSH
21134: FOR_IN
21135: IFFALSE 21153
// ComEnterUnit ( i , building ) ;
21137: LD_VAR 0 2
21141: PPUSH
21142: LD_VAR 0 1
21146: PPUSH
21147: CALL_OW 120
21151: GO 21134
21153: POP
21154: POP
// ruFab = building ;
21155: LD_ADDR_EXP 30
21159: PUSH
21160: LD_VAR 0 1
21164: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
21165: LD_VAR 0 1
21169: PPUSH
21170: CALL_OW 266
21174: PUSH
21175: LD_INT 8
21177: EQUAL
21178: IFFALSE 21235
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21180: LD_ADDR_VAR 0 2
21184: PUSH
21185: LD_INT 22
21187: PUSH
21188: LD_INT 3
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 25
21197: PUSH
21198: LD_INT 4
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PPUSH
21209: CALL_OW 69
21213: PUSH
21214: FOR_IN
21215: IFFALSE 21233
// ComEnterUnit ( i , building ) ;
21217: LD_VAR 0 2
21221: PPUSH
21222: LD_VAR 0 1
21226: PPUSH
21227: CALL_OW 120
21231: GO 21214
21233: POP
21234: POP
// if GetBType ( building ) = b_warehouse then
21235: LD_VAR 0 1
21239: PPUSH
21240: CALL_OW 266
21244: PUSH
21245: LD_INT 1
21247: EQUAL
21248: IFFALSE 21264
// begin ComEnterUnit ( Borodin , building ) ;
21250: LD_EXP 24
21254: PPUSH
21255: LD_VAR 0 1
21259: PPUSH
21260: CALL_OW 120
// end ; end ; end ;
21264: PPOPN 2
21266: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
21267: LD_VAR 0 1
21271: PPUSH
21272: CALL_OW 247
21276: PUSH
21277: LD_INT 2
21279: EQUAL
21280: PUSH
21281: LD_VAR 0 1
21285: PPUSH
21286: CALL_OW 263
21290: PUSH
21291: LD_INT 3
21293: EQUAL
21294: AND
21295: PUSH
21296: LD_EXP 41
21300: PUSH
21301: LD_INT 0
21303: EQUAL
21304: AND
21305: IFFALSE 21423
// begin varEvent1 = 1 ;
21307: LD_ADDR_EXP 41
21311: PUSH
21312: LD_INT 1
21314: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
21315: LD_VAR 0 1
21319: PPUSH
21320: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
21324: LD_INT 22
21326: PUSH
21327: LD_INT 1
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 21
21336: PUSH
21337: LD_INT 1
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 2
21346: PUSH
21347: LD_INT 25
21349: PUSH
21350: LD_INT 1
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 25
21359: PUSH
21360: LD_INT 2
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 25
21369: PUSH
21370: LD_INT 3
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 25
21379: PUSH
21380: LD_INT 4
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: LIST
21398: PPUSH
21399: CALL_OW 69
21403: PUSH
21404: LD_EXP 1
21408: PUSH
21409: EMPTY
21410: LIST
21411: DIFF
21412: PPUSH
21413: LD_STRING DC-Sol1-1
21415: PPUSH
21416: LD_STRING DC-FSol1-1
21418: PPUSH
21419: CALL 7322 0 3
// end ; end ;
21423: PPOPN 1
21425: END
// on UnitDestroyed ( unit ) do var i ;
21426: LD_INT 0
21428: PPUSH
// begin if unit = Joan then
21429: LD_VAR 0 1
21433: PUSH
21434: LD_EXP 15
21438: EQUAL
21439: IFFALSE 21448
// DeleteCharacters ( Joan ) ;
21441: LD_STRING Joan
21443: PPUSH
21444: CALL_OW 40
// if GetSide ( unit ) = 3 then
21448: LD_VAR 0 1
21452: PPUSH
21453: CALL_OW 255
21457: PUSH
21458: LD_INT 3
21460: EQUAL
21461: IFFALSE 22231
// begin if GetType ( unit ) = unit_building then
21463: LD_VAR 0 1
21467: PPUSH
21468: CALL_OW 247
21472: PUSH
21473: LD_INT 3
21475: EQUAL
21476: IFFALSE 22168
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
21478: LD_VAR 0 1
21482: PPUSH
21483: CALL_OW 266
21487: PUSH
21488: LD_INT 31
21490: EQUAL
21491: PUSH
21492: LD_VAR 0 1
21496: PPUSH
21497: CALL_OW 266
21501: PUSH
21502: LD_INT 32
21504: EQUAL
21505: OR
21506: PUSH
21507: LD_VAR 0 1
21511: PPUSH
21512: CALL_OW 266
21516: PUSH
21517: LD_INT 36
21519: EQUAL
21520: OR
21521: PUSH
21522: LD_VAR 0 1
21526: PPUSH
21527: CALL_OW 266
21531: PUSH
21532: LD_INT 0
21534: EQUAL
21535: OR
21536: PUSH
21537: LD_VAR 0 1
21541: PPUSH
21542: CALL_OW 266
21546: PUSH
21547: LD_INT 24
21549: EQUAL
21550: OR
21551: PUSH
21552: LD_VAR 0 1
21556: PPUSH
21557: CALL_OW 266
21561: PUSH
21562: LD_INT 17
21564: EQUAL
21565: OR
21566: PUSH
21567: LD_VAR 0 1
21571: PPUSH
21572: CALL_OW 266
21576: PUSH
21577: LD_INT 25
21579: EQUAL
21580: OR
21581: PUSH
21582: LD_VAR 0 1
21586: PPUSH
21587: CALL_OW 266
21591: PUSH
21592: LD_INT 19
21594: EQUAL
21595: OR
21596: PUSH
21597: LD_VAR 0 1
21601: PPUSH
21602: CALL_OW 266
21606: PUSH
21607: LD_INT 20
21609: EQUAL
21610: OR
21611: PUSH
21612: LD_VAR 0 1
21616: PPUSH
21617: CALL_OW 266
21621: PUSH
21622: LD_INT 18
21624: EQUAL
21625: OR
21626: PUSH
21627: LD_VAR 0 1
21631: PPUSH
21632: CALL_OW 266
21636: PUSH
21637: LD_INT 21
21639: EQUAL
21640: OR
21641: PUSH
21642: LD_VAR 0 1
21646: PPUSH
21647: CALL_OW 266
21651: PUSH
21652: LD_INT 23
21654: EQUAL
21655: OR
21656: PUSH
21657: LD_VAR 0 1
21661: PPUSH
21662: CALL_OW 266
21666: PUSH
21667: LD_INT 16
21669: EQUAL
21670: OR
21671: PUSH
21672: LD_VAR 0 1
21676: PPUSH
21677: CALL_OW 266
21681: PUSH
21682: LD_INT 6
21684: EQUAL
21685: OR
21686: PUSH
21687: LD_VAR 0 1
21691: PPUSH
21692: CALL_OW 266
21696: PUSH
21697: LD_INT 29
21699: EQUAL
21700: OR
21701: PUSH
21702: LD_VAR 0 1
21706: PPUSH
21707: CALL_OW 266
21711: PUSH
21712: LD_INT 26
21714: EQUAL
21715: OR
21716: PUSH
21717: LD_VAR 0 1
21721: PPUSH
21722: CALL_OW 266
21726: PUSH
21727: LD_INT 30
21729: EQUAL
21730: OR
21731: PUSH
21732: LD_VAR 0 1
21736: PPUSH
21737: CALL_OW 266
21741: PUSH
21742: LD_INT 28
21744: EQUAL
21745: OR
21746: PUSH
21747: LD_VAR 0 1
21751: PPUSH
21752: CALL_OW 266
21756: PUSH
21757: LD_INT 27
21759: EQUAL
21760: OR
21761: PUSH
21762: LD_VAR 0 1
21766: PPUSH
21767: CALL_OW 266
21771: PUSH
21772: LD_INT 33
21774: EQUAL
21775: OR
21776: PUSH
21777: LD_VAR 0 1
21781: PPUSH
21782: CALL_OW 266
21786: PUSH
21787: LD_INT 2
21789: EQUAL
21790: OR
21791: PUSH
21792: LD_VAR 0 1
21796: PPUSH
21797: CALL_OW 266
21801: PUSH
21802: LD_INT 4
21804: EQUAL
21805: OR
21806: IFFALSE 21892
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
21808: LD_ADDR_EXP 31
21812: PUSH
21813: LD_EXP 31
21817: PUSH
21818: LD_VAR 0 1
21822: PPUSH
21823: CALL_OW 266
21827: ADD
21828: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21829: LD_ADDR_EXP 31
21833: PUSH
21834: LD_EXP 31
21838: PUSH
21839: LD_VAR 0 1
21843: PPUSH
21844: CALL_OW 250
21848: ADD
21849: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21850: LD_ADDR_EXP 31
21854: PUSH
21855: LD_EXP 31
21859: PUSH
21860: LD_VAR 0 1
21864: PPUSH
21865: CALL_OW 251
21869: ADD
21870: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21871: LD_ADDR_EXP 31
21875: PUSH
21876: LD_EXP 31
21880: PUSH
21881: LD_VAR 0 1
21885: PPUSH
21886: CALL_OW 254
21890: ADD
21891: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
21892: LD_VAR 0 1
21896: PPUSH
21897: CALL_OW 266
21901: PUSH
21902: LD_INT 1
21904: EQUAL
21905: IFFALSE 21984
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
21907: LD_ADDR_EXP 31
21911: PUSH
21912: LD_EXP 31
21916: PUSH
21917: LD_INT 0
21919: ADD
21920: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21921: LD_ADDR_EXP 31
21925: PUSH
21926: LD_EXP 31
21930: PUSH
21931: LD_VAR 0 1
21935: PPUSH
21936: CALL_OW 250
21940: ADD
21941: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21942: LD_ADDR_EXP 31
21946: PUSH
21947: LD_EXP 31
21951: PUSH
21952: LD_VAR 0 1
21956: PPUSH
21957: CALL_OW 251
21961: ADD
21962: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21963: LD_ADDR_EXP 31
21967: PUSH
21968: LD_EXP 31
21972: PUSH
21973: LD_VAR 0 1
21977: PPUSH
21978: CALL_OW 254
21982: ADD
21983: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
21984: LD_VAR 0 1
21988: PPUSH
21989: CALL_OW 266
21993: PUSH
21994: LD_INT 3
21996: EQUAL
21997: IFFALSE 22076
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
21999: LD_ADDR_EXP 31
22003: PUSH
22004: LD_EXP 31
22008: PUSH
22009: LD_INT 2
22011: ADD
22012: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22013: LD_ADDR_EXP 31
22017: PUSH
22018: LD_EXP 31
22022: PUSH
22023: LD_VAR 0 1
22027: PPUSH
22028: CALL_OW 250
22032: ADD
22033: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22034: LD_ADDR_EXP 31
22038: PUSH
22039: LD_EXP 31
22043: PUSH
22044: LD_VAR 0 1
22048: PPUSH
22049: CALL_OW 251
22053: ADD
22054: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22055: LD_ADDR_EXP 31
22059: PUSH
22060: LD_EXP 31
22064: PUSH
22065: LD_VAR 0 1
22069: PPUSH
22070: CALL_OW 254
22074: ADD
22075: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
22076: LD_VAR 0 1
22080: PPUSH
22081: CALL_OW 266
22085: PUSH
22086: LD_INT 5
22088: EQUAL
22089: IFFALSE 22168
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
22091: LD_ADDR_EXP 31
22095: PUSH
22096: LD_EXP 31
22100: PUSH
22101: LD_INT 4
22103: ADD
22104: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22105: LD_ADDR_EXP 31
22109: PUSH
22110: LD_EXP 31
22114: PUSH
22115: LD_VAR 0 1
22119: PPUSH
22120: CALL_OW 250
22124: ADD
22125: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22126: LD_ADDR_EXP 31
22130: PUSH
22131: LD_EXP 31
22135: PUSH
22136: LD_VAR 0 1
22140: PPUSH
22141: CALL_OW 251
22145: ADD
22146: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22147: LD_ADDR_EXP 31
22151: PUSH
22152: LD_EXP 31
22156: PUSH
22157: LD_VAR 0 1
22161: PPUSH
22162: CALL_OW 254
22166: ADD
22167: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
22168: LD_VAR 0 1
22172: PPUSH
22173: CALL_OW 247
22177: PUSH
22178: LD_INT 1
22180: EQUAL
22181: IFFALSE 22231
// begin for i in defenders_list do
22183: LD_ADDR_VAR 0 2
22187: PUSH
22188: LD_EXP 32
22192: PUSH
22193: FOR_IN
22194: IFFALSE 22229
// if i = unit then
22196: LD_VAR 0 2
22200: PUSH
22201: LD_VAR 0 1
22205: EQUAL
22206: IFFALSE 22227
// defenders_list = defenders_list diff [ unit ] ;
22208: LD_ADDR_EXP 32
22212: PUSH
22213: LD_EXP 32
22217: PUSH
22218: LD_VAR 0 1
22222: PUSH
22223: EMPTY
22224: LIST
22225: DIFF
22226: ST_TO_ADDR
22227: GO 22193
22229: POP
22230: POP
// end ; end ; end ;
22231: PPOPN 2
22233: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
22234: LD_VAR 0 1
22238: PPUSH
22239: CALL 40411 0 1
// end ; end_of_file
22243: PPOPN 1
22245: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
22246: GO 22248
22248: DISABLE
22249: LD_INT 0
22251: PPUSH
// begin enemyWayX = [ ] ;
22252: LD_ADDR_EXP 46
22256: PUSH
22257: EMPTY
22258: ST_TO_ADDR
// enemyWayY = [ ] ;
22259: LD_ADDR_EXP 47
22263: PUSH
22264: EMPTY
22265: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
22266: LD_ADDR_VAR 0 1
22270: PUSH
22271: LD_INT 1
22273: PPUSH
22274: LD_INT 3
22276: PPUSH
22277: CALL_OW 12
22281: ST_TO_ADDR
// if rnd = 1 then
22282: LD_VAR 0 1
22286: PUSH
22287: LD_INT 1
22289: EQUAL
22290: IFFALSE 22330
// begin enemyWayX = [ 73 , 46 , 29 ] ;
22292: LD_ADDR_EXP 46
22296: PUSH
22297: LD_INT 73
22299: PUSH
22300: LD_INT 46
22302: PUSH
22303: LD_INT 29
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: LIST
22310: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
22311: LD_ADDR_EXP 47
22315: PUSH
22316: LD_INT 71
22318: PUSH
22319: LD_INT 43
22321: PUSH
22322: LD_INT 29
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: LIST
22329: ST_TO_ADDR
// end ; if rnd = 2 then
22330: LD_VAR 0 1
22334: PUSH
22335: LD_INT 2
22337: EQUAL
22338: IFFALSE 22362
// begin enemyWayX = [ 64 ] ;
22340: LD_ADDR_EXP 46
22344: PUSH
22345: LD_INT 64
22347: PUSH
22348: EMPTY
22349: LIST
22350: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
22351: LD_ADDR_EXP 47
22355: PUSH
22356: LD_INT 43
22358: PUSH
22359: EMPTY
22360: LIST
22361: ST_TO_ADDR
// end ; if rnd = 3 then
22362: LD_VAR 0 1
22366: PUSH
22367: LD_INT 3
22369: EQUAL
22370: IFFALSE 22394
// begin enemyWayX = [ 80 ] ;
22372: LD_ADDR_EXP 46
22376: PUSH
22377: LD_INT 80
22379: PUSH
22380: EMPTY
22381: LIST
22382: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
22383: LD_ADDR_EXP 47
22387: PUSH
22388: LD_INT 28
22390: PUSH
22391: EMPTY
22392: LIST
22393: ST_TO_ADDR
// end ; enable ;
22394: ENABLE
// end ;
22395: PPOPN 1
22397: END
// every 0 0$1 do
22398: GO 22400
22400: DISABLE
// begin enable ;
22401: ENABLE
// if escapeAvalaible = 0 then
22402: LD_EXP 36
22406: PUSH
22407: LD_INT 0
22409: EQUAL
22410: IFFALSE 22422
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
22412: LD_INT 3
22414: PPUSH
22415: LD_INT 6
22417: PPUSH
22418: CALL 8718 0 2
// if escapeAvalaible = 0 then
22422: LD_EXP 36
22426: PUSH
22427: LD_INT 0
22429: EQUAL
22430: IFFALSE 22442
// DefenseBase ( 1 , RussianBaseTerritory ) ;
22432: LD_INT 1
22434: PPUSH
22435: LD_INT 24
22437: PPUSH
22438: CALL 9378 0 2
// if russianAI = 1 then
22442: LD_EXP 27
22446: PUSH
22447: LD_INT 1
22449: EQUAL
22450: IFFALSE 22520
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
22452: LD_INT 3
22454: PPUSH
22455: LD_INT 7
22457: PPUSH
22458: LD_INT 6
22460: PPUSH
22461: LD_EXP 29
22465: PPUSH
22466: CALL 11816 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
22470: LD_INT 3
22472: PPUSH
22473: LD_EXP 28
22477: PPUSH
22478: LD_INT 6
22480: PPUSH
22481: LD_EXP 31
22485: PPUSH
22486: CALL 11410 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
22490: LD_INT 3
22492: PPUSH
22493: LD_INT 26
22495: PPUSH
22496: LD_EXP 46
22500: PPUSH
22501: LD_EXP 47
22505: PPUSH
22506: CALL 10278 0 4
// AttackNearBuildings ( 3 , 1 ) ;
22510: LD_INT 3
22512: PPUSH
22513: LD_INT 1
22515: PPUSH
22516: CALL 12360 0 2
// end ; if SikorskyArrive = 1 then
22520: LD_EXP 18
22524: PUSH
22525: LD_INT 1
22527: EQUAL
22528: IFFALSE 22546
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
22530: LD_INT 3
22532: PPUSH
22533: LD_INT 10
22535: PPUSH
22536: LD_INT 53
22538: PPUSH
22539: LD_INT 59
22541: PPUSH
22542: CALL 10075 0 4
// end ;
22546: END
// every 0 0$1 trigger russianAI = 1 do var i ;
22547: LD_EXP 27
22551: PUSH
22552: LD_INT 1
22554: EQUAL
22555: IFFALSE 22831
22557: GO 22559
22559: DISABLE
22560: LD_INT 0
22562: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22563: LD_ADDR_VAR 0 1
22567: PUSH
22568: LD_INT 22
22570: PUSH
22571: LD_INT 3
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 21
22580: PUSH
22581: LD_INT 3
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 30
22590: PUSH
22591: LD_INT 32
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 3
22600: PUSH
22601: LD_INT 2
22603: PUSH
22604: LD_INT 35
22606: PUSH
22607: LD_INT 43
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 35
22616: PUSH
22617: LD_INT 44
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 35
22626: PUSH
22627: LD_INT 46
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: PPUSH
22650: CALL_OW 69
22654: PUSH
22655: FOR_IN
22656: IFFALSE 22695
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22658: LD_VAR 0 1
22662: PPUSH
22663: LD_INT 43
22665: PUSH
22666: LD_INT 44
22668: PUSH
22669: LD_INT 46
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 1
22679: PPUSH
22680: LD_INT 3
22682: PPUSH
22683: CALL_OW 12
22687: ARRAY
22688: PPUSH
22689: CALL_OW 431
22693: GO 22655
22695: POP
22696: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22697: LD_ADDR_VAR 0 1
22701: PUSH
22702: LD_INT 22
22704: PUSH
22705: LD_INT 3
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 21
22714: PUSH
22715: LD_INT 3
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 30
22724: PUSH
22725: LD_INT 33
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 3
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: LD_INT 35
22740: PUSH
22741: LD_INT 43
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 35
22750: PUSH
22751: LD_INT 44
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 35
22760: PUSH
22761: LD_INT 46
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: PPUSH
22784: CALL_OW 69
22788: PUSH
22789: FOR_IN
22790: IFFALSE 22829
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22792: LD_VAR 0 1
22796: PPUSH
22797: LD_INT 43
22799: PUSH
22800: LD_INT 44
22802: PUSH
22803: LD_INT 46
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 1
22813: PPUSH
22814: LD_INT 3
22816: PPUSH
22817: CALL_OW 12
22821: ARRAY
22822: PPUSH
22823: CALL_OW 431
22827: GO 22789
22829: POP
22830: POP
// end ;
22831: PPOPN 1
22833: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
22834: LD_EXP 24
22838: PPUSH
22839: CALL_OW 310
22843: NOT
22844: PUSH
22845: LD_EXP 28
22849: PPUSH
22850: CALL_OW 302
22854: AND
22855: PUSH
22856: LD_EXP 28
22860: PPUSH
22861: CALL_OW 255
22865: PUSH
22866: LD_INT 3
22868: EQUAL
22869: AND
22870: IFFALSE 22890
22872: GO 22874
22874: DISABLE
// begin enable ;
22875: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
22876: LD_EXP 24
22880: PPUSH
22881: LD_EXP 28
22885: PPUSH
22886: CALL_OW 120
// end ;
22890: END
// every 0 0$1 trigger SikorskyAI = 1 do
22891: LD_EXP 20
22895: PUSH
22896: LD_INT 1
22898: EQUAL
22899: IFFALSE 22934
22901: GO 22903
22903: DISABLE
// begin enable ;
22904: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
22905: LD_INT 4
22907: PPUSH
22908: LD_INT 10
22910: PPUSH
22911: LD_INT 93
22913: PPUSH
22914: LD_INT 93
22916: PPUSH
22917: CALL 10075 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
22921: LD_INT 4
22923: PPUSH
22924: LD_INT 11
22926: PPUSH
22927: LD_INT 3
22929: PPUSH
22930: CALL 16572 0 3
// end ;
22934: END
// every 0 0$1 trigger SikorskyAI = 1 do
22935: LD_EXP 20
22939: PUSH
22940: LD_INT 1
22942: EQUAL
22943: IFFALSE 22955
22945: GO 22947
22947: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
22948: LD_INT 4
22950: PPUSH
22951: CALL 11082 0 1
22955: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
22956: LD_EXP 27
22960: PUSH
22961: LD_INT 1
22963: EQUAL
22964: PUSH
22965: LD_EXP 30
22969: PPUSH
22970: CALL_OW 302
22974: AND
22975: PUSH
22976: LD_EXP 30
22980: PPUSH
22981: CALL_OW 255
22985: PUSH
22986: LD_INT 3
22988: EQUAL
22989: AND
22990: PUSH
22991: LD_INT 22
22993: PUSH
22994: LD_INT 3
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 21
23003: PUSH
23004: LD_INT 2
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 33
23013: PUSH
23014: LD_INT 3
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: LIST
23025: PPUSH
23026: CALL_OW 69
23030: PUSH
23031: LD_INT 0
23033: EQUAL
23034: AND
23035: IFFALSE 23269
23037: GO 23039
23039: DISABLE
// begin enable ;
23040: ENABLE
// if Difficulty = 1 then
23041: LD_OWVAR 67
23045: PUSH
23046: LD_INT 1
23048: EQUAL
23049: IFFALSE 23117
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
23051: LD_INT 3
23053: PPUSH
23054: LD_EXP 30
23058: PPUSH
23059: LD_INT 5
23061: PPUSH
23062: LD_INT 8
23064: PPUSH
23065: CALL_OW 12
23069: PPUSH
23070: LD_INT 43
23072: PUSH
23073: LD_INT 43
23075: PUSH
23076: LD_INT 43
23078: PUSH
23079: LD_INT 43
23081: PUSH
23082: LD_INT 44
23084: PUSH
23085: LD_INT 44
23087: PUSH
23088: LD_INT 44
23090: PUSH
23091: LD_INT 46
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: PPUSH
23104: LD_INT 1
23106: PPUSH
23107: LD_INT 3
23109: PPUSH
23110: LD_INT 24
23112: PPUSH
23113: CALL 9921 0 7
// if Difficulty = 2 then
23117: LD_OWVAR 67
23121: PUSH
23122: LD_INT 2
23124: EQUAL
23125: IFFALSE 23193
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
23127: LD_INT 3
23129: PPUSH
23130: LD_EXP 30
23134: PPUSH
23135: LD_INT 6
23137: PPUSH
23138: LD_INT 8
23140: PPUSH
23141: CALL_OW 12
23145: PPUSH
23146: LD_INT 43
23148: PUSH
23149: LD_INT 43
23151: PUSH
23152: LD_INT 44
23154: PUSH
23155: LD_INT 44
23157: PUSH
23158: LD_INT 44
23160: PUSH
23161: LD_INT 44
23163: PUSH
23164: LD_INT 46
23166: PUSH
23167: LD_INT 46
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: PPUSH
23180: LD_INT 1
23182: PPUSH
23183: LD_INT 3
23185: PPUSH
23186: LD_INT 24
23188: PPUSH
23189: CALL 9921 0 7
// if Difficulty = 3 then
23193: LD_OWVAR 67
23197: PUSH
23198: LD_INT 3
23200: EQUAL
23201: IFFALSE 23269
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
23203: LD_INT 3
23205: PPUSH
23206: LD_EXP 30
23210: PPUSH
23211: LD_INT 7
23213: PPUSH
23214: LD_INT 8
23216: PPUSH
23217: CALL_OW 12
23221: PPUSH
23222: LD_INT 43
23224: PUSH
23225: LD_INT 43
23227: PUSH
23228: LD_INT 44
23230: PUSH
23231: LD_INT 44
23233: PUSH
23234: LD_INT 44
23236: PUSH
23237: LD_INT 46
23239: PUSH
23240: LD_INT 46
23242: PUSH
23243: LD_INT 46
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: PPUSH
23256: LD_INT 1
23258: PPUSH
23259: LD_INT 3
23261: PPUSH
23262: LD_INT 24
23264: PPUSH
23265: CALL 9921 0 7
// end ;
23269: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
23270: LD_EXP 38
23274: PUSH
23275: LD_INT 1
23277: EQUAL
23278: IFFALSE 23360
23280: GO 23282
23282: DISABLE
23283: LD_INT 0
23285: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
23286: LD_ADDR_VAR 0 1
23290: PUSH
23291: LD_INT 22
23293: PUSH
23294: LD_INT 1
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 21
23303: PUSH
23304: LD_INT 1
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 3
23313: PUSH
23314: LD_INT 24
23316: PUSH
23317: LD_INT 650
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: LIST
23332: PPUSH
23333: CALL_OW 69
23337: PUSH
23338: FOR_IN
23339: IFFALSE 23358
// ComMoveXY ( i , 51 , 12 ) ;
23341: LD_VAR 0 1
23345: PPUSH
23346: LD_INT 51
23348: PPUSH
23349: LD_INT 12
23351: PPUSH
23352: CALL_OW 111
23356: GO 23338
23358: POP
23359: POP
// end ; end_of_file
23360: PPOPN 1
23362: END
// every 1 1$20 trigger firstAttack = 1 do
23363: LD_EXP 33
23367: PUSH
23368: LD_INT 1
23370: EQUAL
23371: IFFALSE 23477
23373: GO 23375
23375: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23376: LD_INT 6
23378: PPUSH
23379: LD_INT 3
23381: PPUSH
23382: LD_INT 3
23384: PPUSH
23385: LD_INT 4
23387: PPUSH
23388: CALL_OW 12
23392: PUSH
23393: LD_INT 4
23395: PPUSH
23396: LD_INT 6
23398: PPUSH
23399: CALL_OW 12
23403: PUSH
23404: LD_INT 5
23406: PPUSH
23407: LD_INT 6
23409: PPUSH
23410: CALL_OW 12
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: LIST
23419: PUSH
23420: LD_OWVAR 67
23424: ARRAY
23425: PPUSH
23426: LD_INT 0
23428: PPUSH
23429: LD_INT 0
23431: PPUSH
23432: LD_INT 0
23434: PPUSH
23435: LD_INT 0
23437: PPUSH
23438: LD_EXP 25
23442: PPUSH
23443: LD_EXP 26
23447: PPUSH
23448: CALL_OW 12
23452: PPUSH
23453: LD_INT 16
23455: PPUSH
23456: LD_INT 7
23458: PPUSH
23459: LD_INT 1
23461: PPUSH
23462: LD_INT 1
23464: PPUSH
23465: LD_INT 3
23467: PPUSH
23468: CALL_OW 12
23472: PPUSH
23473: CALL 12590 0 12
23477: END
// every 1 1$40 trigger firstAttack = 1 do
23478: LD_EXP 33
23482: PUSH
23483: LD_INT 1
23485: EQUAL
23486: IFFALSE 23578
23488: GO 23490
23490: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23491: LD_INT 16
23493: PPUSH
23494: LD_INT 6
23496: PPUSH
23497: LD_INT 3
23499: PPUSH
23500: LD_INT 4
23502: PPUSH
23503: CALL_OW 12
23507: PUSH
23508: LD_INT 4
23510: PPUSH
23511: LD_INT 5
23513: PPUSH
23514: CALL_OW 12
23518: PUSH
23519: LD_INT 5
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: LIST
23526: PUSH
23527: LD_OWVAR 67
23531: ARRAY
23532: PPUSH
23533: LD_EXP 25
23537: PPUSH
23538: LD_EXP 26
23542: PPUSH
23543: CALL_OW 12
23547: PPUSH
23548: LD_INT 3
23550: PPUSH
23551: LD_INT 1
23553: PPUSH
23554: LD_INT 3
23556: PPUSH
23557: LD_INT 44
23559: PUSH
23560: LD_INT 46
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PPUSH
23567: EMPTY
23568: PPUSH
23569: EMPTY
23570: PPUSH
23571: LD_INT 1
23573: PPUSH
23574: CALL 14883 0 11
23578: END
// every 6 6$40 trigger firstAttack = 1 and JMMArrive = 0 do
23579: LD_EXP 33
23583: PUSH
23584: LD_INT 1
23586: EQUAL
23587: PUSH
23588: LD_EXP 39
23592: PUSH
23593: LD_INT 0
23595: EQUAL
23596: AND
23597: IFFALSE 23703
23599: GO 23601
23601: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23602: LD_INT 6
23604: PPUSH
23605: LD_INT 3
23607: PPUSH
23608: LD_INT 4
23610: PPUSH
23611: LD_INT 5
23613: PPUSH
23614: CALL_OW 12
23618: PUSH
23619: LD_INT 5
23621: PPUSH
23622: LD_INT 6
23624: PPUSH
23625: CALL_OW 12
23629: PUSH
23630: LD_INT 5
23632: PPUSH
23633: LD_INT 6
23635: PPUSH
23636: CALL_OW 12
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: LIST
23645: PUSH
23646: LD_OWVAR 67
23650: ARRAY
23651: PPUSH
23652: LD_INT 0
23654: PPUSH
23655: LD_INT 0
23657: PPUSH
23658: LD_INT 0
23660: PPUSH
23661: LD_INT 0
23663: PPUSH
23664: LD_EXP 25
23668: PPUSH
23669: LD_EXP 26
23673: PPUSH
23674: CALL_OW 12
23678: PPUSH
23679: LD_INT 16
23681: PPUSH
23682: LD_INT 7
23684: PPUSH
23685: LD_INT 1
23687: PPUSH
23688: LD_INT 1
23690: PPUSH
23691: LD_INT 3
23693: PPUSH
23694: CALL_OW 12
23698: PPUSH
23699: CALL 12590 0 12
23703: END
// every 6 6$50 trigger firstAttack = 1 and JMMArrive = 0 do
23704: LD_EXP 33
23708: PUSH
23709: LD_INT 1
23711: EQUAL
23712: PUSH
23713: LD_EXP 39
23717: PUSH
23718: LD_INT 0
23720: EQUAL
23721: AND
23722: IFFALSE 23818
23724: GO 23726
23726: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23727: LD_INT 16
23729: PPUSH
23730: LD_INT 6
23732: PPUSH
23733: LD_INT 4
23735: PPUSH
23736: LD_INT 5
23738: PPUSH
23739: CALL_OW 12
23743: PUSH
23744: LD_INT 6
23746: PPUSH
23747: LD_INT 7
23749: PPUSH
23750: CALL_OW 12
23754: PUSH
23755: LD_INT 7
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: LIST
23762: PUSH
23763: LD_OWVAR 67
23767: ARRAY
23768: PPUSH
23769: LD_EXP 25
23773: PPUSH
23774: LD_EXP 26
23778: PPUSH
23779: CALL_OW 12
23783: PPUSH
23784: LD_INT 3
23786: PPUSH
23787: LD_INT 1
23789: PPUSH
23790: LD_INT 3
23792: PPUSH
23793: LD_INT 43
23795: PUSH
23796: LD_INT 44
23798: PUSH
23799: LD_INT 46
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: LIST
23806: PPUSH
23807: EMPTY
23808: PPUSH
23809: EMPTY
23810: PPUSH
23811: LD_INT 1
23813: PPUSH
23814: CALL 14883 0 11
23818: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
23819: LD_EXP 33
23823: PUSH
23824: LD_INT 1
23826: EQUAL
23827: PUSH
23828: LD_EXP 39
23832: PUSH
23833: LD_INT 0
23835: EQUAL
23836: AND
23837: IFFALSE 23933
23839: GO 23841
23841: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23842: LD_INT 16
23844: PPUSH
23845: LD_INT 6
23847: PPUSH
23848: LD_INT 4
23850: PPUSH
23851: LD_INT 5
23853: PPUSH
23854: CALL_OW 12
23858: PUSH
23859: LD_INT 6
23861: PPUSH
23862: LD_INT 7
23864: PPUSH
23865: CALL_OW 12
23869: PUSH
23870: LD_INT 7
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: LIST
23877: PUSH
23878: LD_OWVAR 67
23882: ARRAY
23883: PPUSH
23884: LD_EXP 25
23888: PPUSH
23889: LD_EXP 26
23893: PPUSH
23894: CALL_OW 12
23898: PPUSH
23899: LD_INT 3
23901: PPUSH
23902: LD_INT 1
23904: PPUSH
23905: LD_INT 3
23907: PPUSH
23908: LD_INT 43
23910: PUSH
23911: LD_INT 44
23913: PUSH
23914: LD_INT 46
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: LIST
23921: PPUSH
23922: EMPTY
23923: PPUSH
23924: EMPTY
23925: PPUSH
23926: LD_INT 1
23928: PPUSH
23929: CALL 14883 0 11
23933: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
23934: LD_EXP 33
23938: PUSH
23939: LD_INT 1
23941: EQUAL
23942: PUSH
23943: LD_EXP 39
23947: PUSH
23948: LD_INT 0
23950: EQUAL
23951: AND
23952: IFFALSE 24028
23954: GO 23956
23956: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 4 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23957: LD_INT 16
23959: PPUSH
23960: LD_INT 6
23962: PPUSH
23963: LD_INT 4
23965: PUSH
23966: LD_INT 6
23968: PUSH
23969: LD_INT 7
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: LIST
23976: PUSH
23977: LD_OWVAR 67
23981: ARRAY
23982: PPUSH
23983: LD_EXP 25
23987: PPUSH
23988: LD_EXP 26
23992: PPUSH
23993: CALL_OW 12
23997: PPUSH
23998: LD_INT 3
24000: PPUSH
24001: LD_INT 1
24003: PPUSH
24004: LD_INT 3
24006: PPUSH
24007: LD_INT 44
24009: PUSH
24010: LD_INT 46
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PPUSH
24017: EMPTY
24018: PPUSH
24019: EMPTY
24020: PPUSH
24021: LD_INT 1
24023: PPUSH
24024: CALL 14883 0 11
24028: END
// every 1 1$00 trigger secondAttack = 1 do
24029: LD_EXP 34
24033: PUSH
24034: LD_INT 1
24036: EQUAL
24037: IFFALSE 24119
24039: GO 24041
24041: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24042: LD_INT 6
24044: PPUSH
24045: LD_INT 3
24047: PPUSH
24048: LD_INT 3
24050: PUSH
24051: LD_INT 4
24053: PUSH
24054: LD_INT 5
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: LIST
24061: PUSH
24062: LD_OWVAR 67
24066: ARRAY
24067: PPUSH
24068: LD_INT 0
24070: PPUSH
24071: LD_INT 0
24073: PPUSH
24074: LD_INT 0
24076: PPUSH
24077: LD_INT 0
24079: PPUSH
24080: LD_EXP 25
24084: PPUSH
24085: LD_EXP 26
24089: PPUSH
24090: CALL_OW 12
24094: PPUSH
24095: LD_INT 16
24097: PPUSH
24098: LD_INT 7
24100: PPUSH
24101: LD_INT 1
24103: PPUSH
24104: LD_INT 1
24106: PPUSH
24107: LD_INT 3
24109: PPUSH
24110: CALL_OW 12
24114: PPUSH
24115: CALL 12590 0 12
24119: END
// every 1 1$00 trigger secondAttack = 1 do
24120: LD_EXP 34
24124: PUSH
24125: LD_INT 1
24127: EQUAL
24128: IFFALSE 24232
24130: GO 24132
24132: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
24133: LD_INT 16
24135: PPUSH
24136: LD_INT 6
24138: PPUSH
24139: LD_INT 5
24141: PPUSH
24142: LD_INT 6
24144: PPUSH
24145: CALL_OW 12
24149: PUSH
24150: LD_INT 6
24152: PPUSH
24153: LD_INT 9
24155: PPUSH
24156: CALL_OW 12
24160: PUSH
24161: LD_INT 7
24163: PPUSH
24164: LD_INT 9
24166: PPUSH
24167: CALL_OW 12
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: LIST
24176: PUSH
24177: LD_OWVAR 67
24181: ARRAY
24182: PPUSH
24183: LD_EXP 25
24187: PPUSH
24188: LD_EXP 26
24192: PPUSH
24193: CALL_OW 12
24197: PPUSH
24198: LD_INT 3
24200: PPUSH
24201: LD_INT 1
24203: PPUSH
24204: LD_INT 3
24206: PPUSH
24207: LD_INT 43
24209: PUSH
24210: LD_INT 44
24212: PUSH
24213: LD_INT 46
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: LIST
24220: PPUSH
24221: EMPTY
24222: PPUSH
24223: EMPTY
24224: PPUSH
24225: LD_INT 1
24227: PPUSH
24228: CALL 14883 0 11
24232: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24233: LD_EXP 18
24237: PUSH
24238: LD_INT 0
24240: EQUAL
24241: IFFALSE 24323
24243: GO 24245
24245: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24246: LD_INT 6
24248: PPUSH
24249: LD_INT 3
24251: PPUSH
24252: LD_INT 3
24254: PUSH
24255: LD_INT 4
24257: PUSH
24258: LD_INT 5
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: PUSH
24266: LD_OWVAR 67
24270: ARRAY
24271: PPUSH
24272: LD_INT 0
24274: PPUSH
24275: LD_INT 0
24277: PPUSH
24278: LD_INT 0
24280: PPUSH
24281: LD_INT 0
24283: PPUSH
24284: LD_EXP 25
24288: PPUSH
24289: LD_EXP 26
24293: PPUSH
24294: CALL_OW 12
24298: PPUSH
24299: LD_INT 16
24301: PPUSH
24302: LD_INT 7
24304: PPUSH
24305: LD_INT 1
24307: PPUSH
24308: LD_INT 1
24310: PPUSH
24311: LD_INT 3
24313: PPUSH
24314: CALL_OW 12
24318: PPUSH
24319: CALL 12590 0 12
24323: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24324: LD_EXP 18
24328: PUSH
24329: LD_INT 0
24331: EQUAL
24332: IFFALSE 24432
24334: GO 24336
24336: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24337: LD_INT 16
24339: PPUSH
24340: LD_INT 6
24342: PPUSH
24343: LD_INT 5
24345: PPUSH
24346: LD_INT 6
24348: PPUSH
24349: CALL_OW 12
24353: PUSH
24354: LD_INT 6
24356: PPUSH
24357: LD_INT 9
24359: PPUSH
24360: CALL_OW 12
24364: PUSH
24365: LD_INT 7
24367: PPUSH
24368: LD_INT 9
24370: PPUSH
24371: CALL_OW 12
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: LIST
24380: PUSH
24381: LD_OWVAR 67
24385: ARRAY
24386: PPUSH
24387: LD_EXP 25
24391: PPUSH
24392: LD_EXP 26
24396: PPUSH
24397: CALL_OW 12
24401: PPUSH
24402: LD_INT 3
24404: PPUSH
24405: LD_INT 1
24407: PPUSH
24408: LD_INT 3
24410: PPUSH
24411: LD_INT 44
24413: PUSH
24414: LD_INT 46
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PPUSH
24421: EMPTY
24422: PPUSH
24423: EMPTY
24424: PPUSH
24425: LD_INT 1
24427: PPUSH
24428: CALL 14883 0 11
24432: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24433: LD_EXP 18
24437: PUSH
24438: LD_INT 0
24440: EQUAL
24441: IFFALSE 24523
24443: GO 24445
24445: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24446: LD_INT 6
24448: PPUSH
24449: LD_INT 3
24451: PPUSH
24452: LD_INT 3
24454: PUSH
24455: LD_INT 4
24457: PUSH
24458: LD_INT 5
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: LIST
24465: PUSH
24466: LD_OWVAR 67
24470: ARRAY
24471: PPUSH
24472: LD_INT 0
24474: PPUSH
24475: LD_INT 0
24477: PPUSH
24478: LD_INT 0
24480: PPUSH
24481: LD_INT 0
24483: PPUSH
24484: LD_EXP 25
24488: PPUSH
24489: LD_EXP 26
24493: PPUSH
24494: CALL_OW 12
24498: PPUSH
24499: LD_INT 16
24501: PPUSH
24502: LD_INT 7
24504: PPUSH
24505: LD_INT 1
24507: PPUSH
24508: LD_INT 1
24510: PPUSH
24511: LD_INT 3
24513: PPUSH
24514: CALL_OW 12
24518: PPUSH
24519: CALL 12590 0 12
24523: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24524: LD_EXP 18
24528: PUSH
24529: LD_INT 0
24531: EQUAL
24532: IFFALSE 24632
24534: GO 24536
24536: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24537: LD_INT 16
24539: PPUSH
24540: LD_INT 6
24542: PPUSH
24543: LD_INT 5
24545: PPUSH
24546: LD_INT 6
24548: PPUSH
24549: CALL_OW 12
24553: PUSH
24554: LD_INT 6
24556: PPUSH
24557: LD_INT 9
24559: PPUSH
24560: CALL_OW 12
24564: PUSH
24565: LD_INT 7
24567: PPUSH
24568: LD_INT 9
24570: PPUSH
24571: CALL_OW 12
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: LIST
24580: PUSH
24581: LD_OWVAR 67
24585: ARRAY
24586: PPUSH
24587: LD_EXP 25
24591: PPUSH
24592: LD_EXP 26
24596: PPUSH
24597: CALL_OW 12
24601: PPUSH
24602: LD_INT 3
24604: PPUSH
24605: LD_INT 1
24607: PPUSH
24608: LD_INT 3
24610: PPUSH
24611: LD_INT 44
24613: PUSH
24614: LD_INT 46
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PPUSH
24621: EMPTY
24622: PPUSH
24623: EMPTY
24624: PPUSH
24625: LD_INT 1
24627: PPUSH
24628: CALL 14883 0 11
24632: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24633: LD_EXP 18
24637: PUSH
24638: LD_INT 0
24640: EQUAL
24641: IFFALSE 24723
24643: GO 24645
24645: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24646: LD_INT 6
24648: PPUSH
24649: LD_INT 3
24651: PPUSH
24652: LD_INT 3
24654: PUSH
24655: LD_INT 4
24657: PUSH
24658: LD_INT 5
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: LIST
24665: PUSH
24666: LD_OWVAR 67
24670: ARRAY
24671: PPUSH
24672: LD_INT 0
24674: PPUSH
24675: LD_INT 0
24677: PPUSH
24678: LD_INT 0
24680: PPUSH
24681: LD_INT 0
24683: PPUSH
24684: LD_EXP 25
24688: PPUSH
24689: LD_EXP 26
24693: PPUSH
24694: CALL_OW 12
24698: PPUSH
24699: LD_INT 16
24701: PPUSH
24702: LD_INT 7
24704: PPUSH
24705: LD_INT 1
24707: PPUSH
24708: LD_INT 1
24710: PPUSH
24711: LD_INT 3
24713: PPUSH
24714: CALL_OW 12
24718: PPUSH
24719: CALL 12590 0 12
24723: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24724: LD_EXP 18
24728: PUSH
24729: LD_INT 0
24731: EQUAL
24732: IFFALSE 24808
24734: GO 24736
24736: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 7 , 8 , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
24737: LD_INT 16
24739: PPUSH
24740: LD_INT 6
24742: PPUSH
24743: LD_INT 7
24745: PUSH
24746: LD_INT 8
24748: PUSH
24749: LD_INT 9
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: LIST
24756: PUSH
24757: LD_OWVAR 67
24761: ARRAY
24762: PPUSH
24763: LD_EXP 25
24767: PPUSH
24768: LD_EXP 26
24772: PPUSH
24773: CALL_OW 12
24777: PPUSH
24778: LD_INT 3
24780: PPUSH
24781: LD_INT 1
24783: PPUSH
24784: LD_INT 3
24786: PPUSH
24787: LD_INT 44
24789: PUSH
24790: LD_INT 46
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PPUSH
24797: EMPTY
24798: PPUSH
24799: EMPTY
24800: PPUSH
24801: LD_INT 1
24803: PPUSH
24804: CALL 14883 0 11
24808: END
// every 0 0$1 trigger timerStatus = 1 do
24809: LD_EXP 35
24813: PUSH
24814: LD_INT 1
24816: EQUAL
24817: IFFALSE 24877
24819: GO 24821
24821: DISABLE
// begin repeat wait ( 0 0$1 ) ;
24822: LD_INT 35
24824: PPUSH
24825: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
24829: LD_ADDR_OWVAR 47
24833: PUSH
24834: LD_STRING #Am08-1
24836: PUSH
24837: LD_EXP 19
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
24846: LD_ADDR_EXP 19
24850: PUSH
24851: LD_EXP 19
24855: PUSH
24856: LD_INT 35
24858: MINUS
24859: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
24860: LD_EXP 19
24864: PUSH
24865: LD_INT 0
24867: EQUAL
24868: IFFALSE 24822
// display_strings := [ ] ;
24870: LD_ADDR_OWVAR 47
24874: PUSH
24875: EMPTY
24876: ST_TO_ADDR
// end ; end_of_file
24877: END
// every 1 1$0 do
24878: GO 24880
24880: DISABLE
// begin if supply <= 13 and supply > 7 then
24881: LD_EXP 40
24885: PUSH
24886: LD_INT 13
24888: LESSEQUAL
24889: PUSH
24890: LD_EXP 40
24894: PUSH
24895: LD_INT 7
24897: GREATER
24898: AND
24899: IFFALSE 24922
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
24901: LD_INT 3
24903: PPUSH
24904: LD_INT 5
24906: PPUSH
24907: CALL_OW 12
24911: PPUSH
24912: LD_INT 5
24914: PPUSH
24915: LD_INT 1
24917: PPUSH
24918: CALL_OW 55
// if supply <= 7 and supply > 4 then
24922: LD_EXP 40
24926: PUSH
24927: LD_INT 7
24929: LESSEQUAL
24930: PUSH
24931: LD_EXP 40
24935: PUSH
24936: LD_INT 4
24938: GREATER
24939: AND
24940: IFFALSE 24963
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
24942: LD_INT 3
24944: PPUSH
24945: LD_INT 5
24947: PPUSH
24948: CALL_OW 12
24952: PPUSH
24953: LD_INT 20
24955: PPUSH
24956: LD_INT 1
24958: PPUSH
24959: CALL_OW 55
// if supply <= 4 and supply > 0 then
24963: LD_EXP 40
24967: PUSH
24968: LD_INT 4
24970: LESSEQUAL
24971: PUSH
24972: LD_EXP 40
24976: PUSH
24977: LD_INT 0
24979: GREATER
24980: AND
24981: IFFALSE 25004
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
24983: LD_INT 3
24985: PPUSH
24986: LD_INT 5
24988: PPUSH
24989: CALL_OW 12
24993: PPUSH
24994: LD_INT 21
24996: PPUSH
24997: LD_INT 1
24999: PPUSH
25000: CALL_OW 55
// if supply > 0 then
25004: LD_EXP 40
25008: PUSH
25009: LD_INT 0
25011: GREATER
25012: IFFALSE 25029
// begin supply = supply - 1 ;
25014: LD_ADDR_EXP 40
25018: PUSH
25019: LD_EXP 40
25023: PUSH
25024: LD_INT 1
25026: MINUS
25027: ST_TO_ADDR
// enable ;
25028: ENABLE
// end ; end ; end_of_file
25029: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
25030: LD_EXP 39
25034: PUSH
25035: LD_INT 1
25037: EQUAL
25038: PUSH
25039: LD_EXP 1
25043: PPUSH
25044: CALL_OW 301
25048: AND
25049: IFFALSE 25061
25051: GO 25053
25053: DISABLE
// YouLost ( JMM ) ;
25054: LD_STRING JMM
25056: PPUSH
25057: CALL_OW 104
25061: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
25062: LD_EXP 18
25066: PUSH
25067: LD_INT 1
25069: EQUAL
25070: PUSH
25071: LD_EXP 16
25075: PPUSH
25076: CALL_OW 301
25080: AND
25081: IFFALSE 25113
25083: GO 25085
25085: DISABLE
// begin DialogueOn ;
25086: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
25090: LD_EXP 23
25094: PPUSH
25095: LD_STRING D8a-Pow-1
25097: PPUSH
25098: CALL_OW 94
// DialogueOff ;
25102: CALL_OW 7
// YouLost ( Dismissed ) ;
25106: LD_STRING Dismissed
25108: PPUSH
25109: CALL_OW 104
// end ;
25113: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
25114: LD_INT 22
25116: PUSH
25117: LD_INT 1
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 2
25126: PUSH
25127: LD_INT 30
25129: PUSH
25130: LD_INT 0
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 30
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: LIST
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PPUSH
25156: CALL_OW 69
25160: PUSH
25161: LD_INT 0
25163: EQUAL
25164: IFFALSE 25176
25166: GO 25168
25168: DISABLE
// YouLost ( Destroyed ) ; end_of_file
25169: LD_STRING Destroyed
25171: PPUSH
25172: CALL_OW 104
25176: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , tmp , p ;
25177: LD_EXP 24
25181: PPUSH
25182: CALL_OW 301
25186: PUSH
25187: LD_INT 22
25189: PUSH
25190: LD_INT 3
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 21
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PPUSH
25211: CALL_OW 69
25215: PUSH
25216: LD_INT 7
25218: PUSH
25219: LD_INT 6
25221: PUSH
25222: LD_INT 5
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: LIST
25229: PUSH
25230: LD_OWVAR 67
25234: ARRAY
25235: LESS
25236: AND
25237: PUSH
25238: LD_EXP 1
25242: PPUSH
25243: CALL_OW 305
25247: AND
25248: IFFALSE 25804
25250: GO 25252
25252: DISABLE
25253: LD_INT 0
25255: PPUSH
25256: PPUSH
25257: PPUSH
// begin russianAI = 0 ;
25258: LD_ADDR_EXP 27
25262: PUSH
25263: LD_INT 0
25265: ST_TO_ADDR
// escapeAvalaible = 1 ;
25266: LD_ADDR_EXP 36
25270: PUSH
25271: LD_INT 1
25273: ST_TO_ADDR
// Video ( true ) ;
25274: LD_INT 1
25276: PPUSH
25277: CALL 81030 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
25281: LD_INT 3
25283: PPUSH
25284: LD_INT 1
25286: PPUSH
25287: LD_INT 1
25289: PPUSH
25290: LD_INT 0
25292: PPUSH
25293: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
25297: LD_INT 6
25299: PPUSH
25300: LD_INT 1
25302: PPUSH
25303: LD_INT 1
25305: PPUSH
25306: LD_INT 0
25308: PPUSH
25309: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
25313: LD_INT 3
25315: PPUSH
25316: LD_INT 1
25318: PPUSH
25319: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
25323: LD_INT 97
25325: PPUSH
25326: LD_INT 91
25328: PPUSH
25329: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
25333: LD_INT 22
25335: PUSH
25336: LD_INT 3
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 21
25345: PUSH
25346: LD_INT 1
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PPUSH
25357: CALL_OW 69
25361: PPUSH
25362: CALL_OW 121
// wait ( 0 0$01 ) ;
25366: LD_INT 35
25368: PPUSH
25369: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25373: LD_INT 22
25375: PUSH
25376: LD_INT 3
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 21
25385: PUSH
25386: LD_INT 1
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PPUSH
25397: CALL_OW 69
25401: PPUSH
25402: LD_INT 124
25404: PPUSH
25405: LD_INT 98
25407: PPUSH
25408: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
25412: LD_INT 22
25414: PUSH
25415: LD_INT 6
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 21
25424: PUSH
25425: LD_INT 1
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PPUSH
25436: CALL_OW 69
25440: PPUSH
25441: CALL_OW 121
// wait ( 0 0$01 ) ;
25445: LD_INT 35
25447: PPUSH
25448: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25452: LD_INT 22
25454: PUSH
25455: LD_INT 6
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 21
25464: PUSH
25465: LD_INT 1
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PPUSH
25476: CALL_OW 69
25480: PPUSH
25481: LD_INT 124
25483: PPUSH
25484: LD_INT 98
25486: PPUSH
25487: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
25491: LD_INT 22
25493: PUSH
25494: LD_INT 1
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 21
25503: PUSH
25504: LD_INT 1
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 3
25513: PUSH
25514: LD_INT 54
25516: PUSH
25517: EMPTY
25518: LIST
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: LIST
25528: PPUSH
25529: CALL_OW 69
25533: PPUSH
25534: LD_INT 124
25536: PPUSH
25537: LD_INT 98
25539: PPUSH
25540: CALL_OW 114
// wait ( 0 0$4 ) ;
25544: LD_INT 140
25546: PPUSH
25547: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
25551: LD_INT 124
25553: PPUSH
25554: LD_INT 98
25556: PPUSH
25557: CALL_OW 84
// if SikorskyStatus = 1 then
25561: LD_EXP 21
25565: PUSH
25566: LD_INT 1
25568: EQUAL
25569: IFFALSE 25583
// Say ( Sikorski , D9-Sik-1 ) ;
25571: LD_EXP 16
25575: PPUSH
25576: LD_STRING D9-Sik-1
25578: PPUSH
25579: CALL_OW 88
// if SikorskyStatus = 2 then
25583: LD_EXP 21
25587: PUSH
25588: LD_INT 2
25590: EQUAL
25591: IFFALSE 25612
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
25593: LD_EXP 23
25597: PPUSH
25598: LD_STRING D8b-Pow-1
25600: PPUSH
25601: CALL_OW 94
// YouLost ( Dismissed ) ;
25605: LD_STRING Dismissed
25607: PPUSH
25608: CALL_OW 104
// end ; p := 0 0$0 ;
25612: LD_ADDR_VAR 0 3
25616: PUSH
25617: LD_INT 0
25619: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
25620: LD_ADDR_VAR 0 2
25624: PUSH
25625: LD_INT 2
25627: PUSH
25628: LD_INT 22
25630: PUSH
25631: LD_INT 3
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 22
25640: PUSH
25641: LD_INT 6
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 21
25655: PUSH
25656: LD_INT 1
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PPUSH
25667: CALL_OW 69
25671: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25672: LD_INT 35
25674: PPUSH
25675: CALL_OW 67
// p := p + 0 0$1 ;
25679: LD_ADDR_VAR 0 3
25683: PUSH
25684: LD_VAR 0 3
25688: PUSH
25689: LD_INT 35
25691: PLUS
25692: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
25693: LD_VAR 0 2
25697: PPUSH
25698: LD_INT 22
25700: PPUSH
25701: CALL_OW 113
// for i in tmp do
25705: LD_ADDR_VAR 0 1
25709: PUSH
25710: LD_VAR 0 2
25714: PUSH
25715: FOR_IN
25716: IFFALSE 25743
// if IsInArea ( i , RussianEscape ) then
25718: LD_VAR 0 1
25722: PPUSH
25723: LD_INT 22
25725: PPUSH
25726: CALL_OW 308
25730: IFFALSE 25741
// RemoveUnit ( i ) ;
25732: LD_VAR 0 1
25736: PPUSH
25737: CALL_OW 64
25741: GO 25715
25743: POP
25744: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
25745: LD_INT 23
25747: PUSH
25748: LD_INT 3
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 21
25757: PUSH
25758: LD_INT 1
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 24
25767: PUSH
25768: LD_INT 250
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: LIST
25779: PPUSH
25780: CALL_OW 69
25784: PUSH
25785: LD_INT 0
25787: EQUAL
25788: PUSH
25789: LD_VAR 0 3
25793: PUSH
25794: LD_INT 245
25796: GREATEREQUAL
25797: OR
25798: IFFALSE 25672
// FinishMission ;
25800: CALL 25807 0 0
// end ;
25804: PPOPN 3
25806: END
// export function FinishMission ; var tmp ; begin
25807: LD_INT 0
25809: PPUSH
25810: PPUSH
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 then
25811: LD_INT 22
25813: PUSH
25814: LD_INT 4
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PPUSH
25821: CALL_OW 69
25825: PUSH
25826: LD_INT 0
25828: EQUAL
25829: IFFALSE 25838
// SetAchievement ( ACH_BLITZKRIEG ) ;
25831: LD_STRING ACH_BLITZKRIEG
25833: PPUSH
25834: CALL_OW 543
// if tick <= 25 25$00 then
25838: LD_OWVAR 1
25842: PUSH
25843: LD_INT 52500
25845: LESSEQUAL
25846: IFFALSE 25862
// begin wait ( 3 ) ;
25848: LD_INT 3
25850: PPUSH
25851: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
25855: LD_STRING ACH_ASPEED_8
25857: PPUSH
25858: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
25862: LD_STRING med1
25864: PPUSH
25865: LD_INT 1
25867: PPUSH
25868: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
25872: LD_STRING med2
25874: PPUSH
25875: LD_INT 1
25877: PPUSH
25878: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
25882: LD_STRING perfect
25884: PPUSH
25885: LD_INT 1
25887: PPUSH
25888: CALL_OW 101
// if Difficulty = 3 then
25892: LD_OWVAR 67
25896: PUSH
25897: LD_INT 3
25899: EQUAL
25900: IFFALSE 25912
// SetAchievementEX ( ACH_AMER , 8 ) ;
25902: LD_STRING ACH_AMER
25904: PPUSH
25905: LD_INT 8
25907: PPUSH
25908: CALL_OW 564
// GiveMedals ( Main ) ;
25912: LD_STRING Main
25914: PPUSH
25915: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
25919: LD_INT 22
25921: PUSH
25922: LD_INT 1
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 23
25931: PUSH
25932: LD_INT 1
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 21
25941: PUSH
25942: LD_INT 1
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 2
25951: PUSH
25952: LD_INT 25
25954: PUSH
25955: LD_INT 1
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 25
25964: PUSH
25965: LD_INT 2
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 25
25974: PUSH
25975: LD_INT 3
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 25
25984: PUSH
25985: LD_INT 4
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: PPUSH
26005: CALL_OW 69
26009: PPUSH
26010: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26014: LD_EXP 1
26018: PPUSH
26019: LD_EXP 43
26023: PUSH
26024: LD_STRING JMM
26026: STR
26027: PPUSH
26028: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26032: LD_EXP 2
26036: PPUSH
26037: LD_EXP 43
26041: PUSH
26042: LD_STRING Brown
26044: STR
26045: PPUSH
26046: CALL 8437 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26050: LD_EXP 3
26054: PPUSH
26055: LD_EXP 43
26059: PUSH
26060: LD_STRING Donaldson
26062: STR
26063: PPUSH
26064: CALL 8437 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26068: LD_EXP 4
26072: PPUSH
26073: LD_EXP 43
26077: PUSH
26078: LD_STRING Bobby
26080: STR
26081: PPUSH
26082: CALL 8437 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26086: LD_EXP 5
26090: PPUSH
26091: LD_EXP 43
26095: PUSH
26096: LD_STRING Cyrus
26098: STR
26099: PPUSH
26100: CALL 8437 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26104: LD_EXP 6
26108: PPUSH
26109: LD_EXP 43
26113: PUSH
26114: LD_STRING Lisa
26116: STR
26117: PPUSH
26118: CALL 8437 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26122: LD_EXP 7
26126: PPUSH
26127: LD_EXP 43
26131: PUSH
26132: LD_STRING Frank
26134: STR
26135: PPUSH
26136: CALL 8437 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26140: LD_EXP 8
26144: PPUSH
26145: LD_EXP 43
26149: PUSH
26150: LD_STRING Gladstone
26152: STR
26153: PPUSH
26154: CALL 8437 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26158: LD_EXP 9
26162: PPUSH
26163: LD_EXP 43
26167: PUSH
26168: LD_STRING Kikuchi
26170: STR
26171: PPUSH
26172: CALL 8437 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26176: LD_EXP 14
26180: PPUSH
26181: LD_EXP 43
26185: PUSH
26186: LD_STRING Denis
26188: STR
26189: PPUSH
26190: CALL 8437 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26194: LD_EXP 15
26198: PPUSH
26199: LD_EXP 43
26203: PUSH
26204: LD_STRING Joan
26206: STR
26207: PPUSH
26208: CALL 8437 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
26212: LD_EXP 10
26216: PPUSH
26217: LD_EXP 43
26221: PUSH
26222: LD_STRING Khatam
26224: STR
26225: PPUSH
26226: CALL 8437 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26230: LD_EXP 13
26234: PPUSH
26235: LD_EXP 43
26239: PUSH
26240: LD_STRING Houten
26242: STR
26243: PPUSH
26244: CALL 8437 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
26248: LD_INT 50
26250: PUSH
26251: EMPTY
26252: LIST
26253: PUSH
26254: LD_INT 22
26256: PUSH
26257: LD_INT 1
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 21
26266: PUSH
26267: LD_INT 1
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 2
26276: PUSH
26277: LD_INT 25
26279: PUSH
26280: LD_INT 1
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 25
26289: PUSH
26290: LD_INT 2
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 25
26299: PUSH
26300: LD_INT 3
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 25
26309: PUSH
26310: LD_INT 4
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: PPUSH
26330: CALL_OW 69
26334: PUSH
26335: LD_EXP 1
26339: PUSH
26340: LD_EXP 2
26344: PUSH
26345: LD_EXP 3
26349: PUSH
26350: LD_EXP 4
26354: PUSH
26355: LD_EXP 5
26359: PUSH
26360: LD_EXP 6
26364: PUSH
26365: LD_EXP 7
26369: PUSH
26370: LD_EXP 8
26374: PUSH
26375: LD_EXP 9
26379: PUSH
26380: LD_EXP 14
26384: PUSH
26385: LD_EXP 15
26389: PUSH
26390: LD_EXP 13
26394: PUSH
26395: LD_EXP 10
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: DIFF
26415: PPUSH
26416: LD_STRING 08_other_survivors
26418: PPUSH
26419: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
26423: LD_INT 23
26425: PPUSH
26426: CALL 26439 0 1
// YouWin ;
26430: CALL_OW 103
// end ;
26434: LD_VAR 0 1
26438: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
26439: LD_INT 0
26441: PPUSH
26442: PPUSH
26443: PPUSH
26444: PPUSH
// gammaBase = [ ] ;
26445: LD_ADDR_VAR 0 4
26449: PUSH
26450: EMPTY
26451: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26452: LD_ADDR_VAR 0 5
26456: PUSH
26457: LD_VAR 0 1
26461: PPUSH
26462: LD_INT 22
26464: PUSH
26465: LD_INT 1
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 21
26474: PUSH
26475: LD_INT 3
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 50
26484: PUSH
26485: EMPTY
26486: LIST
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: LIST
26492: PPUSH
26493: CALL_OW 70
26497: ST_TO_ADDR
// for i in buildings do
26498: LD_ADDR_VAR 0 3
26502: PUSH
26503: LD_VAR 0 5
26507: PUSH
26508: FOR_IN
26509: IFFALSE 26946
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26511: LD_VAR 0 3
26515: PPUSH
26516: CALL_OW 266
26520: PUSH
26521: LD_INT 6
26523: PUSH
26524: LD_INT 7
26526: PUSH
26527: LD_INT 8
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: LIST
26534: IN
26535: IFFALSE 26649
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26537: LD_ADDR_VAR 0 4
26541: PUSH
26542: LD_VAR 0 4
26546: PUSH
26547: LD_VAR 0 3
26551: PPUSH
26552: CALL_OW 266
26556: PUSH
26557: LD_VAR 0 3
26561: PPUSH
26562: CALL_OW 250
26566: PUSH
26567: LD_VAR 0 3
26571: PPUSH
26572: CALL_OW 251
26576: PUSH
26577: LD_VAR 0 3
26581: PPUSH
26582: CALL_OW 254
26586: PUSH
26587: LD_VAR 0 3
26591: PPUSH
26592: CALL_OW 267
26596: PUSH
26597: LD_VAR 0 3
26601: PPUSH
26602: CALL_OW 248
26606: PUSH
26607: LD_VAR 0 3
26611: PPUSH
26612: LD_INT 1
26614: PPUSH
26615: CALL_OW 268
26619: PUSH
26620: LD_VAR 0 3
26624: PPUSH
26625: LD_INT 2
26627: PPUSH
26628: CALL_OW 268
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: PUSH
26643: EMPTY
26644: LIST
26645: ADD
26646: ST_TO_ADDR
26647: GO 26944
// if GetBType ( i ) = b_bunker then
26649: LD_VAR 0 3
26653: PPUSH
26654: CALL_OW 266
26658: PUSH
26659: LD_INT 32
26661: EQUAL
26662: IFFALSE 26759
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26664: LD_ADDR_VAR 0 4
26668: PUSH
26669: LD_VAR 0 4
26673: PUSH
26674: LD_VAR 0 3
26678: PPUSH
26679: CALL_OW 266
26683: PUSH
26684: LD_VAR 0 3
26688: PPUSH
26689: CALL_OW 250
26693: PUSH
26694: LD_VAR 0 3
26698: PPUSH
26699: CALL_OW 251
26703: PUSH
26704: LD_VAR 0 3
26708: PPUSH
26709: CALL_OW 254
26713: PUSH
26714: LD_VAR 0 3
26718: PPUSH
26719: CALL_OW 267
26723: PUSH
26724: LD_VAR 0 3
26728: PPUSH
26729: CALL_OW 248
26733: PUSH
26734: LD_VAR 0 3
26738: PPUSH
26739: CALL_OW 269
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: PUSH
26753: EMPTY
26754: LIST
26755: ADD
26756: ST_TO_ADDR
26757: GO 26944
// if GetBType ( i ) = b_factory then
26759: LD_VAR 0 3
26763: PPUSH
26764: CALL_OW 266
26768: PUSH
26769: LD_INT 3
26771: EQUAL
26772: IFFALSE 26862
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
26774: LD_ADDR_VAR 0 4
26778: PUSH
26779: LD_VAR 0 4
26783: PPUSH
26784: LD_INT 1
26786: PPUSH
26787: LD_VAR 0 3
26791: PPUSH
26792: CALL_OW 266
26796: PUSH
26797: LD_VAR 0 3
26801: PPUSH
26802: CALL_OW 250
26806: PUSH
26807: LD_VAR 0 3
26811: PPUSH
26812: CALL_OW 251
26816: PUSH
26817: LD_VAR 0 3
26821: PPUSH
26822: CALL_OW 254
26826: PUSH
26827: LD_VAR 0 3
26831: PPUSH
26832: CALL_OW 267
26836: PUSH
26837: LD_VAR 0 3
26841: PPUSH
26842: CALL_OW 248
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: PPUSH
26855: CALL_OW 2
26859: ST_TO_ADDR
26860: GO 26944
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
26862: LD_ADDR_VAR 0 4
26866: PUSH
26867: LD_VAR 0 4
26871: PUSH
26872: LD_VAR 0 3
26876: PPUSH
26877: CALL_OW 266
26881: PUSH
26882: LD_VAR 0 3
26886: PPUSH
26887: CALL_OW 250
26891: PUSH
26892: LD_VAR 0 3
26896: PPUSH
26897: CALL_OW 251
26901: PUSH
26902: LD_VAR 0 3
26906: PPUSH
26907: CALL_OW 254
26911: PUSH
26912: LD_VAR 0 3
26916: PPUSH
26917: CALL_OW 267
26921: PUSH
26922: LD_VAR 0 3
26926: PPUSH
26927: CALL_OW 248
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: PUSH
26940: EMPTY
26941: LIST
26942: ADD
26943: ST_TO_ADDR
// end ;
26944: GO 26508
26946: POP
26947: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
26948: LD_VAR 0 4
26952: PPUSH
26953: LD_STRING 08_GammaBase
26955: PPUSH
26956: CALL_OW 39
// end ; end_of_file
26960: LD_VAR 0 2
26964: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
26965: LD_INT 0
26967: PPUSH
// ar_miner := 81 ;
26968: LD_ADDR_EXP 55
26972: PUSH
26973: LD_INT 81
26975: ST_TO_ADDR
// ar_crane := 88 ;
26976: LD_ADDR_EXP 54
26980: PUSH
26981: LD_INT 88
26983: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
26984: LD_ADDR_EXP 49
26988: PUSH
26989: LD_INT 89
26991: ST_TO_ADDR
// us_hack := 99 ;
26992: LD_ADDR_EXP 50
26996: PUSH
26997: LD_INT 99
26999: ST_TO_ADDR
// us_artillery := 97 ;
27000: LD_ADDR_EXP 51
27004: PUSH
27005: LD_INT 97
27007: ST_TO_ADDR
// ar_bio_bomb := 91 ;
27008: LD_ADDR_EXP 52
27012: PUSH
27013: LD_INT 91
27015: ST_TO_ADDR
// ar_mortar := 92 ;
27016: LD_ADDR_EXP 53
27020: PUSH
27021: LD_INT 92
27023: ST_TO_ADDR
// ru_radar := 98 ;
27024: LD_ADDR_EXP 48
27028: PUSH
27029: LD_INT 98
27031: ST_TO_ADDR
// tech_Artillery := 80 ;
27032: LD_ADDR_EXP 56
27036: PUSH
27037: LD_INT 80
27039: ST_TO_ADDR
// tech_RadMat := 81 ;
27040: LD_ADDR_EXP 57
27044: PUSH
27045: LD_INT 81
27047: ST_TO_ADDR
// tech_BasicTools := 82 ;
27048: LD_ADDR_EXP 58
27052: PUSH
27053: LD_INT 82
27055: ST_TO_ADDR
// tech_Cargo := 83 ;
27056: LD_ADDR_EXP 59
27060: PUSH
27061: LD_INT 83
27063: ST_TO_ADDR
// tech_Track := 84 ;
27064: LD_ADDR_EXP 60
27068: PUSH
27069: LD_INT 84
27071: ST_TO_ADDR
// tech_Crane := 85 ;
27072: LD_ADDR_EXP 61
27076: PUSH
27077: LD_INT 85
27079: ST_TO_ADDR
// tech_Bulldozer := 86 ;
27080: LD_ADDR_EXP 62
27084: PUSH
27085: LD_INT 86
27087: ST_TO_ADDR
// tech_Hovercraft := 87 ;
27088: LD_ADDR_EXP 63
27092: PUSH
27093: LD_INT 87
27095: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
27096: LD_ADDR_EXP 64
27100: PUSH
27101: LD_INT 88
27103: ST_TO_ADDR
// class_mastodont := 31 ;
27104: LD_ADDR_EXP 65
27108: PUSH
27109: LD_INT 31
27111: ST_TO_ADDR
// class_horse := 21 ;
27112: LD_ADDR_EXP 66
27116: PUSH
27117: LD_INT 21
27119: ST_TO_ADDR
// end ;
27120: LD_VAR 0 1
27124: RET
// every 1 do
27125: GO 27127
27127: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
27128: CALL 26965 0 0
27132: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27133: LD_INT 0
27135: PPUSH
// if p2 = 100 then
27136: LD_VAR 0 2
27140: PUSH
27141: LD_INT 100
27143: EQUAL
27144: IFFALSE 28093
// begin if not StreamModeActive then
27146: LD_EXP 67
27150: NOT
27151: IFFALSE 27161
// StreamModeActive := true ;
27153: LD_ADDR_EXP 67
27157: PUSH
27158: LD_INT 1
27160: ST_TO_ADDR
// if p3 = 0 then
27161: LD_VAR 0 3
27165: PUSH
27166: LD_INT 0
27168: EQUAL
27169: IFFALSE 27175
// InitStreamMode ;
27171: CALL 28253 0 0
// if p3 = 1 then
27175: LD_VAR 0 3
27179: PUSH
27180: LD_INT 1
27182: EQUAL
27183: IFFALSE 27193
// sRocket := true ;
27185: LD_ADDR_EXP 72
27189: PUSH
27190: LD_INT 1
27192: ST_TO_ADDR
// if p3 = 2 then
27193: LD_VAR 0 3
27197: PUSH
27198: LD_INT 2
27200: EQUAL
27201: IFFALSE 27211
// sSpeed := true ;
27203: LD_ADDR_EXP 71
27207: PUSH
27208: LD_INT 1
27210: ST_TO_ADDR
// if p3 = 3 then
27211: LD_VAR 0 3
27215: PUSH
27216: LD_INT 3
27218: EQUAL
27219: IFFALSE 27229
// sEngine := true ;
27221: LD_ADDR_EXP 73
27225: PUSH
27226: LD_INT 1
27228: ST_TO_ADDR
// if p3 = 4 then
27229: LD_VAR 0 3
27233: PUSH
27234: LD_INT 4
27236: EQUAL
27237: IFFALSE 27247
// sSpec := true ;
27239: LD_ADDR_EXP 70
27243: PUSH
27244: LD_INT 1
27246: ST_TO_ADDR
// if p3 = 5 then
27247: LD_VAR 0 3
27251: PUSH
27252: LD_INT 5
27254: EQUAL
27255: IFFALSE 27265
// sLevel := true ;
27257: LD_ADDR_EXP 74
27261: PUSH
27262: LD_INT 1
27264: ST_TO_ADDR
// if p3 = 6 then
27265: LD_VAR 0 3
27269: PUSH
27270: LD_INT 6
27272: EQUAL
27273: IFFALSE 27283
// sArmoury := true ;
27275: LD_ADDR_EXP 75
27279: PUSH
27280: LD_INT 1
27282: ST_TO_ADDR
// if p3 = 7 then
27283: LD_VAR 0 3
27287: PUSH
27288: LD_INT 7
27290: EQUAL
27291: IFFALSE 27301
// sRadar := true ;
27293: LD_ADDR_EXP 76
27297: PUSH
27298: LD_INT 1
27300: ST_TO_ADDR
// if p3 = 8 then
27301: LD_VAR 0 3
27305: PUSH
27306: LD_INT 8
27308: EQUAL
27309: IFFALSE 27319
// sBunker := true ;
27311: LD_ADDR_EXP 77
27315: PUSH
27316: LD_INT 1
27318: ST_TO_ADDR
// if p3 = 9 then
27319: LD_VAR 0 3
27323: PUSH
27324: LD_INT 9
27326: EQUAL
27327: IFFALSE 27337
// sHack := true ;
27329: LD_ADDR_EXP 78
27333: PUSH
27334: LD_INT 1
27336: ST_TO_ADDR
// if p3 = 10 then
27337: LD_VAR 0 3
27341: PUSH
27342: LD_INT 10
27344: EQUAL
27345: IFFALSE 27355
// sFire := true ;
27347: LD_ADDR_EXP 79
27351: PUSH
27352: LD_INT 1
27354: ST_TO_ADDR
// if p3 = 11 then
27355: LD_VAR 0 3
27359: PUSH
27360: LD_INT 11
27362: EQUAL
27363: IFFALSE 27373
// sRefresh := true ;
27365: LD_ADDR_EXP 80
27369: PUSH
27370: LD_INT 1
27372: ST_TO_ADDR
// if p3 = 12 then
27373: LD_VAR 0 3
27377: PUSH
27378: LD_INT 12
27380: EQUAL
27381: IFFALSE 27391
// sExp := true ;
27383: LD_ADDR_EXP 81
27387: PUSH
27388: LD_INT 1
27390: ST_TO_ADDR
// if p3 = 13 then
27391: LD_VAR 0 3
27395: PUSH
27396: LD_INT 13
27398: EQUAL
27399: IFFALSE 27409
// sDepot := true ;
27401: LD_ADDR_EXP 82
27405: PUSH
27406: LD_INT 1
27408: ST_TO_ADDR
// if p3 = 14 then
27409: LD_VAR 0 3
27413: PUSH
27414: LD_INT 14
27416: EQUAL
27417: IFFALSE 27427
// sFlag := true ;
27419: LD_ADDR_EXP 83
27423: PUSH
27424: LD_INT 1
27426: ST_TO_ADDR
// if p3 = 15 then
27427: LD_VAR 0 3
27431: PUSH
27432: LD_INT 15
27434: EQUAL
27435: IFFALSE 27445
// sKamikadze := true ;
27437: LD_ADDR_EXP 91
27441: PUSH
27442: LD_INT 1
27444: ST_TO_ADDR
// if p3 = 16 then
27445: LD_VAR 0 3
27449: PUSH
27450: LD_INT 16
27452: EQUAL
27453: IFFALSE 27463
// sTroll := true ;
27455: LD_ADDR_EXP 92
27459: PUSH
27460: LD_INT 1
27462: ST_TO_ADDR
// if p3 = 17 then
27463: LD_VAR 0 3
27467: PUSH
27468: LD_INT 17
27470: EQUAL
27471: IFFALSE 27481
// sSlow := true ;
27473: LD_ADDR_EXP 93
27477: PUSH
27478: LD_INT 1
27480: ST_TO_ADDR
// if p3 = 18 then
27481: LD_VAR 0 3
27485: PUSH
27486: LD_INT 18
27488: EQUAL
27489: IFFALSE 27499
// sLack := true ;
27491: LD_ADDR_EXP 94
27495: PUSH
27496: LD_INT 1
27498: ST_TO_ADDR
// if p3 = 19 then
27499: LD_VAR 0 3
27503: PUSH
27504: LD_INT 19
27506: EQUAL
27507: IFFALSE 27517
// sTank := true ;
27509: LD_ADDR_EXP 96
27513: PUSH
27514: LD_INT 1
27516: ST_TO_ADDR
// if p3 = 20 then
27517: LD_VAR 0 3
27521: PUSH
27522: LD_INT 20
27524: EQUAL
27525: IFFALSE 27535
// sRemote := true ;
27527: LD_ADDR_EXP 97
27531: PUSH
27532: LD_INT 1
27534: ST_TO_ADDR
// if p3 = 21 then
27535: LD_VAR 0 3
27539: PUSH
27540: LD_INT 21
27542: EQUAL
27543: IFFALSE 27553
// sPowell := true ;
27545: LD_ADDR_EXP 98
27549: PUSH
27550: LD_INT 1
27552: ST_TO_ADDR
// if p3 = 22 then
27553: LD_VAR 0 3
27557: PUSH
27558: LD_INT 22
27560: EQUAL
27561: IFFALSE 27571
// sTeleport := true ;
27563: LD_ADDR_EXP 101
27567: PUSH
27568: LD_INT 1
27570: ST_TO_ADDR
// if p3 = 23 then
27571: LD_VAR 0 3
27575: PUSH
27576: LD_INT 23
27578: EQUAL
27579: IFFALSE 27589
// sOilTower := true ;
27581: LD_ADDR_EXP 103
27585: PUSH
27586: LD_INT 1
27588: ST_TO_ADDR
// if p3 = 24 then
27589: LD_VAR 0 3
27593: PUSH
27594: LD_INT 24
27596: EQUAL
27597: IFFALSE 27607
// sShovel := true ;
27599: LD_ADDR_EXP 104
27603: PUSH
27604: LD_INT 1
27606: ST_TO_ADDR
// if p3 = 25 then
27607: LD_VAR 0 3
27611: PUSH
27612: LD_INT 25
27614: EQUAL
27615: IFFALSE 27625
// sSheik := true ;
27617: LD_ADDR_EXP 105
27621: PUSH
27622: LD_INT 1
27624: ST_TO_ADDR
// if p3 = 26 then
27625: LD_VAR 0 3
27629: PUSH
27630: LD_INT 26
27632: EQUAL
27633: IFFALSE 27643
// sEarthquake := true ;
27635: LD_ADDR_EXP 107
27639: PUSH
27640: LD_INT 1
27642: ST_TO_ADDR
// if p3 = 27 then
27643: LD_VAR 0 3
27647: PUSH
27648: LD_INT 27
27650: EQUAL
27651: IFFALSE 27661
// sAI := true ;
27653: LD_ADDR_EXP 108
27657: PUSH
27658: LD_INT 1
27660: ST_TO_ADDR
// if p3 = 28 then
27661: LD_VAR 0 3
27665: PUSH
27666: LD_INT 28
27668: EQUAL
27669: IFFALSE 27679
// sCargo := true ;
27671: LD_ADDR_EXP 111
27675: PUSH
27676: LD_INT 1
27678: ST_TO_ADDR
// if p3 = 29 then
27679: LD_VAR 0 3
27683: PUSH
27684: LD_INT 29
27686: EQUAL
27687: IFFALSE 27697
// sDLaser := true ;
27689: LD_ADDR_EXP 112
27693: PUSH
27694: LD_INT 1
27696: ST_TO_ADDR
// if p3 = 30 then
27697: LD_VAR 0 3
27701: PUSH
27702: LD_INT 30
27704: EQUAL
27705: IFFALSE 27715
// sExchange := true ;
27707: LD_ADDR_EXP 113
27711: PUSH
27712: LD_INT 1
27714: ST_TO_ADDR
// if p3 = 31 then
27715: LD_VAR 0 3
27719: PUSH
27720: LD_INT 31
27722: EQUAL
27723: IFFALSE 27733
// sFac := true ;
27725: LD_ADDR_EXP 114
27729: PUSH
27730: LD_INT 1
27732: ST_TO_ADDR
// if p3 = 32 then
27733: LD_VAR 0 3
27737: PUSH
27738: LD_INT 32
27740: EQUAL
27741: IFFALSE 27751
// sPower := true ;
27743: LD_ADDR_EXP 115
27747: PUSH
27748: LD_INT 1
27750: ST_TO_ADDR
// if p3 = 33 then
27751: LD_VAR 0 3
27755: PUSH
27756: LD_INT 33
27758: EQUAL
27759: IFFALSE 27769
// sRandom := true ;
27761: LD_ADDR_EXP 116
27765: PUSH
27766: LD_INT 1
27768: ST_TO_ADDR
// if p3 = 34 then
27769: LD_VAR 0 3
27773: PUSH
27774: LD_INT 34
27776: EQUAL
27777: IFFALSE 27787
// sShield := true ;
27779: LD_ADDR_EXP 117
27783: PUSH
27784: LD_INT 1
27786: ST_TO_ADDR
// if p3 = 35 then
27787: LD_VAR 0 3
27791: PUSH
27792: LD_INT 35
27794: EQUAL
27795: IFFALSE 27805
// sTime := true ;
27797: LD_ADDR_EXP 118
27801: PUSH
27802: LD_INT 1
27804: ST_TO_ADDR
// if p3 = 36 then
27805: LD_VAR 0 3
27809: PUSH
27810: LD_INT 36
27812: EQUAL
27813: IFFALSE 27823
// sTools := true ;
27815: LD_ADDR_EXP 119
27819: PUSH
27820: LD_INT 1
27822: ST_TO_ADDR
// if p3 = 101 then
27823: LD_VAR 0 3
27827: PUSH
27828: LD_INT 101
27830: EQUAL
27831: IFFALSE 27841
// sSold := true ;
27833: LD_ADDR_EXP 84
27837: PUSH
27838: LD_INT 1
27840: ST_TO_ADDR
// if p3 = 102 then
27841: LD_VAR 0 3
27845: PUSH
27846: LD_INT 102
27848: EQUAL
27849: IFFALSE 27859
// sDiff := true ;
27851: LD_ADDR_EXP 85
27855: PUSH
27856: LD_INT 1
27858: ST_TO_ADDR
// if p3 = 103 then
27859: LD_VAR 0 3
27863: PUSH
27864: LD_INT 103
27866: EQUAL
27867: IFFALSE 27877
// sFog := true ;
27869: LD_ADDR_EXP 88
27873: PUSH
27874: LD_INT 1
27876: ST_TO_ADDR
// if p3 = 104 then
27877: LD_VAR 0 3
27881: PUSH
27882: LD_INT 104
27884: EQUAL
27885: IFFALSE 27895
// sReset := true ;
27887: LD_ADDR_EXP 89
27891: PUSH
27892: LD_INT 1
27894: ST_TO_ADDR
// if p3 = 105 then
27895: LD_VAR 0 3
27899: PUSH
27900: LD_INT 105
27902: EQUAL
27903: IFFALSE 27913
// sSun := true ;
27905: LD_ADDR_EXP 90
27909: PUSH
27910: LD_INT 1
27912: ST_TO_ADDR
// if p3 = 106 then
27913: LD_VAR 0 3
27917: PUSH
27918: LD_INT 106
27920: EQUAL
27921: IFFALSE 27931
// sTiger := true ;
27923: LD_ADDR_EXP 86
27927: PUSH
27928: LD_INT 1
27930: ST_TO_ADDR
// if p3 = 107 then
27931: LD_VAR 0 3
27935: PUSH
27936: LD_INT 107
27938: EQUAL
27939: IFFALSE 27949
// sBomb := true ;
27941: LD_ADDR_EXP 87
27945: PUSH
27946: LD_INT 1
27948: ST_TO_ADDR
// if p3 = 108 then
27949: LD_VAR 0 3
27953: PUSH
27954: LD_INT 108
27956: EQUAL
27957: IFFALSE 27967
// sWound := true ;
27959: LD_ADDR_EXP 95
27963: PUSH
27964: LD_INT 1
27966: ST_TO_ADDR
// if p3 = 109 then
27967: LD_VAR 0 3
27971: PUSH
27972: LD_INT 109
27974: EQUAL
27975: IFFALSE 27985
// sBetray := true ;
27977: LD_ADDR_EXP 99
27981: PUSH
27982: LD_INT 1
27984: ST_TO_ADDR
// if p3 = 110 then
27985: LD_VAR 0 3
27989: PUSH
27990: LD_INT 110
27992: EQUAL
27993: IFFALSE 28003
// sContamin := true ;
27995: LD_ADDR_EXP 100
27999: PUSH
28000: LD_INT 1
28002: ST_TO_ADDR
// if p3 = 111 then
28003: LD_VAR 0 3
28007: PUSH
28008: LD_INT 111
28010: EQUAL
28011: IFFALSE 28021
// sOil := true ;
28013: LD_ADDR_EXP 102
28017: PUSH
28018: LD_INT 1
28020: ST_TO_ADDR
// if p3 = 112 then
28021: LD_VAR 0 3
28025: PUSH
28026: LD_INT 112
28028: EQUAL
28029: IFFALSE 28039
// sStu := true ;
28031: LD_ADDR_EXP 106
28035: PUSH
28036: LD_INT 1
28038: ST_TO_ADDR
// if p3 = 113 then
28039: LD_VAR 0 3
28043: PUSH
28044: LD_INT 113
28046: EQUAL
28047: IFFALSE 28057
// sBazooka := true ;
28049: LD_ADDR_EXP 109
28053: PUSH
28054: LD_INT 1
28056: ST_TO_ADDR
// if p3 = 114 then
28057: LD_VAR 0 3
28061: PUSH
28062: LD_INT 114
28064: EQUAL
28065: IFFALSE 28075
// sMortar := true ;
28067: LD_ADDR_EXP 110
28071: PUSH
28072: LD_INT 1
28074: ST_TO_ADDR
// if p3 = 115 then
28075: LD_VAR 0 3
28079: PUSH
28080: LD_INT 115
28082: EQUAL
28083: IFFALSE 28093
// sRanger := true ;
28085: LD_ADDR_EXP 120
28089: PUSH
28090: LD_INT 1
28092: ST_TO_ADDR
// end ; if p2 = 101 then
28093: LD_VAR 0 2
28097: PUSH
28098: LD_INT 101
28100: EQUAL
28101: IFFALSE 28229
// begin case p3 of 1 :
28103: LD_VAR 0 3
28107: PUSH
28108: LD_INT 1
28110: DOUBLE
28111: EQUAL
28112: IFTRUE 28116
28114: GO 28123
28116: POP
// hHackUnlimitedResources ; 2 :
28117: CALL 39266 0 0
28121: GO 28229
28123: LD_INT 2
28125: DOUBLE
28126: EQUAL
28127: IFTRUE 28131
28129: GO 28138
28131: POP
// hHackSetLevel10 ; 3 :
28132: CALL 39399 0 0
28136: GO 28229
28138: LD_INT 3
28140: DOUBLE
28141: EQUAL
28142: IFTRUE 28146
28144: GO 28153
28146: POP
// hHackSetLevel10YourUnits ; 4 :
28147: CALL 39484 0 0
28151: GO 28229
28153: LD_INT 4
28155: DOUBLE
28156: EQUAL
28157: IFTRUE 28161
28159: GO 28168
28161: POP
// hHackInvincible ; 5 :
28162: CALL 39932 0 0
28166: GO 28229
28168: LD_INT 5
28170: DOUBLE
28171: EQUAL
28172: IFTRUE 28176
28174: GO 28183
28176: POP
// hHackInvisible ; 6 :
28177: CALL 40043 0 0
28181: GO 28229
28183: LD_INT 6
28185: DOUBLE
28186: EQUAL
28187: IFTRUE 28191
28189: GO 28198
28191: POP
// hHackChangeYourSide ; 7 :
28192: CALL 40100 0 0
28196: GO 28229
28198: LD_INT 7
28200: DOUBLE
28201: EQUAL
28202: IFTRUE 28206
28204: GO 28213
28206: POP
// hHackChangeUnitSide ; 8 :
28207: CALL 40142 0 0
28211: GO 28229
28213: LD_INT 8
28215: DOUBLE
28216: EQUAL
28217: IFTRUE 28221
28219: GO 28228
28221: POP
// hHackFog ; end ;
28222: CALL 40243 0 0
28226: GO 28229
28228: POP
// end ; end ;
28229: LD_VAR 0 7
28233: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
28234: GO 28236
28236: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
28237: LD_STRING initStreamRollete();
28239: PPUSH
28240: CALL_OW 559
// InitStreamMode ;
28244: CALL 28253 0 0
// DefineStreamItems ( ) ;
28248: CALL 28693 0 0
// end ;
28252: END
// function InitStreamMode ; begin
28253: LD_INT 0
28255: PPUSH
// streamModeActive := false ;
28256: LD_ADDR_EXP 67
28260: PUSH
28261: LD_INT 0
28263: ST_TO_ADDR
// normalCounter := 36 ;
28264: LD_ADDR_EXP 68
28268: PUSH
28269: LD_INT 36
28271: ST_TO_ADDR
// hardcoreCounter := 16 ;
28272: LD_ADDR_EXP 69
28276: PUSH
28277: LD_INT 16
28279: ST_TO_ADDR
// sRocket := false ;
28280: LD_ADDR_EXP 72
28284: PUSH
28285: LD_INT 0
28287: ST_TO_ADDR
// sSpeed := false ;
28288: LD_ADDR_EXP 71
28292: PUSH
28293: LD_INT 0
28295: ST_TO_ADDR
// sEngine := false ;
28296: LD_ADDR_EXP 73
28300: PUSH
28301: LD_INT 0
28303: ST_TO_ADDR
// sSpec := false ;
28304: LD_ADDR_EXP 70
28308: PUSH
28309: LD_INT 0
28311: ST_TO_ADDR
// sLevel := false ;
28312: LD_ADDR_EXP 74
28316: PUSH
28317: LD_INT 0
28319: ST_TO_ADDR
// sArmoury := false ;
28320: LD_ADDR_EXP 75
28324: PUSH
28325: LD_INT 0
28327: ST_TO_ADDR
// sRadar := false ;
28328: LD_ADDR_EXP 76
28332: PUSH
28333: LD_INT 0
28335: ST_TO_ADDR
// sBunker := false ;
28336: LD_ADDR_EXP 77
28340: PUSH
28341: LD_INT 0
28343: ST_TO_ADDR
// sHack := false ;
28344: LD_ADDR_EXP 78
28348: PUSH
28349: LD_INT 0
28351: ST_TO_ADDR
// sFire := false ;
28352: LD_ADDR_EXP 79
28356: PUSH
28357: LD_INT 0
28359: ST_TO_ADDR
// sRefresh := false ;
28360: LD_ADDR_EXP 80
28364: PUSH
28365: LD_INT 0
28367: ST_TO_ADDR
// sExp := false ;
28368: LD_ADDR_EXP 81
28372: PUSH
28373: LD_INT 0
28375: ST_TO_ADDR
// sDepot := false ;
28376: LD_ADDR_EXP 82
28380: PUSH
28381: LD_INT 0
28383: ST_TO_ADDR
// sFlag := false ;
28384: LD_ADDR_EXP 83
28388: PUSH
28389: LD_INT 0
28391: ST_TO_ADDR
// sKamikadze := false ;
28392: LD_ADDR_EXP 91
28396: PUSH
28397: LD_INT 0
28399: ST_TO_ADDR
// sTroll := false ;
28400: LD_ADDR_EXP 92
28404: PUSH
28405: LD_INT 0
28407: ST_TO_ADDR
// sSlow := false ;
28408: LD_ADDR_EXP 93
28412: PUSH
28413: LD_INT 0
28415: ST_TO_ADDR
// sLack := false ;
28416: LD_ADDR_EXP 94
28420: PUSH
28421: LD_INT 0
28423: ST_TO_ADDR
// sTank := false ;
28424: LD_ADDR_EXP 96
28428: PUSH
28429: LD_INT 0
28431: ST_TO_ADDR
// sRemote := false ;
28432: LD_ADDR_EXP 97
28436: PUSH
28437: LD_INT 0
28439: ST_TO_ADDR
// sPowell := false ;
28440: LD_ADDR_EXP 98
28444: PUSH
28445: LD_INT 0
28447: ST_TO_ADDR
// sTeleport := false ;
28448: LD_ADDR_EXP 101
28452: PUSH
28453: LD_INT 0
28455: ST_TO_ADDR
// sOilTower := false ;
28456: LD_ADDR_EXP 103
28460: PUSH
28461: LD_INT 0
28463: ST_TO_ADDR
// sShovel := false ;
28464: LD_ADDR_EXP 104
28468: PUSH
28469: LD_INT 0
28471: ST_TO_ADDR
// sSheik := false ;
28472: LD_ADDR_EXP 105
28476: PUSH
28477: LD_INT 0
28479: ST_TO_ADDR
// sEarthquake := false ;
28480: LD_ADDR_EXP 107
28484: PUSH
28485: LD_INT 0
28487: ST_TO_ADDR
// sAI := false ;
28488: LD_ADDR_EXP 108
28492: PUSH
28493: LD_INT 0
28495: ST_TO_ADDR
// sCargo := false ;
28496: LD_ADDR_EXP 111
28500: PUSH
28501: LD_INT 0
28503: ST_TO_ADDR
// sDLaser := false ;
28504: LD_ADDR_EXP 112
28508: PUSH
28509: LD_INT 0
28511: ST_TO_ADDR
// sExchange := false ;
28512: LD_ADDR_EXP 113
28516: PUSH
28517: LD_INT 0
28519: ST_TO_ADDR
// sFac := false ;
28520: LD_ADDR_EXP 114
28524: PUSH
28525: LD_INT 0
28527: ST_TO_ADDR
// sPower := false ;
28528: LD_ADDR_EXP 115
28532: PUSH
28533: LD_INT 0
28535: ST_TO_ADDR
// sRandom := false ;
28536: LD_ADDR_EXP 116
28540: PUSH
28541: LD_INT 0
28543: ST_TO_ADDR
// sShield := false ;
28544: LD_ADDR_EXP 117
28548: PUSH
28549: LD_INT 0
28551: ST_TO_ADDR
// sTime := false ;
28552: LD_ADDR_EXP 118
28556: PUSH
28557: LD_INT 0
28559: ST_TO_ADDR
// sTools := false ;
28560: LD_ADDR_EXP 119
28564: PUSH
28565: LD_INT 0
28567: ST_TO_ADDR
// sSold := false ;
28568: LD_ADDR_EXP 84
28572: PUSH
28573: LD_INT 0
28575: ST_TO_ADDR
// sDiff := false ;
28576: LD_ADDR_EXP 85
28580: PUSH
28581: LD_INT 0
28583: ST_TO_ADDR
// sFog := false ;
28584: LD_ADDR_EXP 88
28588: PUSH
28589: LD_INT 0
28591: ST_TO_ADDR
// sReset := false ;
28592: LD_ADDR_EXP 89
28596: PUSH
28597: LD_INT 0
28599: ST_TO_ADDR
// sSun := false ;
28600: LD_ADDR_EXP 90
28604: PUSH
28605: LD_INT 0
28607: ST_TO_ADDR
// sTiger := false ;
28608: LD_ADDR_EXP 86
28612: PUSH
28613: LD_INT 0
28615: ST_TO_ADDR
// sBomb := false ;
28616: LD_ADDR_EXP 87
28620: PUSH
28621: LD_INT 0
28623: ST_TO_ADDR
// sWound := false ;
28624: LD_ADDR_EXP 95
28628: PUSH
28629: LD_INT 0
28631: ST_TO_ADDR
// sBetray := false ;
28632: LD_ADDR_EXP 99
28636: PUSH
28637: LD_INT 0
28639: ST_TO_ADDR
// sContamin := false ;
28640: LD_ADDR_EXP 100
28644: PUSH
28645: LD_INT 0
28647: ST_TO_ADDR
// sOil := false ;
28648: LD_ADDR_EXP 102
28652: PUSH
28653: LD_INT 0
28655: ST_TO_ADDR
// sStu := false ;
28656: LD_ADDR_EXP 106
28660: PUSH
28661: LD_INT 0
28663: ST_TO_ADDR
// sBazooka := false ;
28664: LD_ADDR_EXP 109
28668: PUSH
28669: LD_INT 0
28671: ST_TO_ADDR
// sMortar := false ;
28672: LD_ADDR_EXP 110
28676: PUSH
28677: LD_INT 0
28679: ST_TO_ADDR
// sRanger := false ;
28680: LD_ADDR_EXP 120
28684: PUSH
28685: LD_INT 0
28687: ST_TO_ADDR
// end ;
28688: LD_VAR 0 1
28692: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
28693: LD_INT 0
28695: PPUSH
28696: PPUSH
28697: PPUSH
28698: PPUSH
28699: PPUSH
// result := [ ] ;
28700: LD_ADDR_VAR 0 1
28704: PUSH
28705: EMPTY
28706: ST_TO_ADDR
// if campaign_id = 1 then
28707: LD_OWVAR 69
28711: PUSH
28712: LD_INT 1
28714: EQUAL
28715: IFFALSE 31653
// begin case mission_number of 1 :
28717: LD_OWVAR 70
28721: PUSH
28722: LD_INT 1
28724: DOUBLE
28725: EQUAL
28726: IFTRUE 28730
28728: GO 28794
28730: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
28731: LD_ADDR_VAR 0 1
28735: PUSH
28736: LD_INT 2
28738: PUSH
28739: LD_INT 4
28741: PUSH
28742: LD_INT 11
28744: PUSH
28745: LD_INT 12
28747: PUSH
28748: LD_INT 15
28750: PUSH
28751: LD_INT 16
28753: PUSH
28754: LD_INT 22
28756: PUSH
28757: LD_INT 23
28759: PUSH
28760: LD_INT 26
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 101
28776: PUSH
28777: LD_INT 102
28779: PUSH
28780: LD_INT 106
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: LIST
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: ST_TO_ADDR
28792: GO 31651
28794: LD_INT 2
28796: DOUBLE
28797: EQUAL
28798: IFTRUE 28802
28800: GO 28874
28802: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
28803: LD_ADDR_VAR 0 1
28807: PUSH
28808: LD_INT 2
28810: PUSH
28811: LD_INT 4
28813: PUSH
28814: LD_INT 11
28816: PUSH
28817: LD_INT 12
28819: PUSH
28820: LD_INT 15
28822: PUSH
28823: LD_INT 16
28825: PUSH
28826: LD_INT 22
28828: PUSH
28829: LD_INT 23
28831: PUSH
28832: LD_INT 26
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 101
28848: PUSH
28849: LD_INT 102
28851: PUSH
28852: LD_INT 105
28854: PUSH
28855: LD_INT 106
28857: PUSH
28858: LD_INT 108
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: ST_TO_ADDR
28872: GO 31651
28874: LD_INT 3
28876: DOUBLE
28877: EQUAL
28878: IFTRUE 28882
28880: GO 28958
28882: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
28883: LD_ADDR_VAR 0 1
28887: PUSH
28888: LD_INT 2
28890: PUSH
28891: LD_INT 4
28893: PUSH
28894: LD_INT 5
28896: PUSH
28897: LD_INT 11
28899: PUSH
28900: LD_INT 12
28902: PUSH
28903: LD_INT 15
28905: PUSH
28906: LD_INT 16
28908: PUSH
28909: LD_INT 22
28911: PUSH
28912: LD_INT 26
28914: PUSH
28915: LD_INT 36
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 101
28932: PUSH
28933: LD_INT 102
28935: PUSH
28936: LD_INT 105
28938: PUSH
28939: LD_INT 106
28941: PUSH
28942: LD_INT 108
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: ST_TO_ADDR
28956: GO 31651
28958: LD_INT 4
28960: DOUBLE
28961: EQUAL
28962: IFTRUE 28966
28964: GO 29050
28966: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
28967: LD_ADDR_VAR 0 1
28971: PUSH
28972: LD_INT 2
28974: PUSH
28975: LD_INT 4
28977: PUSH
28978: LD_INT 5
28980: PUSH
28981: LD_INT 8
28983: PUSH
28984: LD_INT 11
28986: PUSH
28987: LD_INT 12
28989: PUSH
28990: LD_INT 15
28992: PUSH
28993: LD_INT 16
28995: PUSH
28996: LD_INT 22
28998: PUSH
28999: LD_INT 23
29001: PUSH
29002: LD_INT 26
29004: PUSH
29005: LD_INT 36
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 101
29024: PUSH
29025: LD_INT 102
29027: PUSH
29028: LD_INT 105
29030: PUSH
29031: LD_INT 106
29033: PUSH
29034: LD_INT 108
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: ST_TO_ADDR
29048: GO 31651
29050: LD_INT 5
29052: DOUBLE
29053: EQUAL
29054: IFTRUE 29058
29056: GO 29158
29058: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
29059: LD_ADDR_VAR 0 1
29063: PUSH
29064: LD_INT 2
29066: PUSH
29067: LD_INT 4
29069: PUSH
29070: LD_INT 5
29072: PUSH
29073: LD_INT 6
29075: PUSH
29076: LD_INT 8
29078: PUSH
29079: LD_INT 11
29081: PUSH
29082: LD_INT 12
29084: PUSH
29085: LD_INT 15
29087: PUSH
29088: LD_INT 16
29090: PUSH
29091: LD_INT 22
29093: PUSH
29094: LD_INT 23
29096: PUSH
29097: LD_INT 25
29099: PUSH
29100: LD_INT 26
29102: PUSH
29103: LD_INT 36
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 101
29124: PUSH
29125: LD_INT 102
29127: PUSH
29128: LD_INT 105
29130: PUSH
29131: LD_INT 106
29133: PUSH
29134: LD_INT 108
29136: PUSH
29137: LD_INT 109
29139: PUSH
29140: LD_INT 112
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: ST_TO_ADDR
29156: GO 31651
29158: LD_INT 6
29160: DOUBLE
29161: EQUAL
29162: IFTRUE 29166
29164: GO 29286
29166: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
29167: LD_ADDR_VAR 0 1
29171: PUSH
29172: LD_INT 2
29174: PUSH
29175: LD_INT 4
29177: PUSH
29178: LD_INT 5
29180: PUSH
29181: LD_INT 6
29183: PUSH
29184: LD_INT 8
29186: PUSH
29187: LD_INT 11
29189: PUSH
29190: LD_INT 12
29192: PUSH
29193: LD_INT 15
29195: PUSH
29196: LD_INT 16
29198: PUSH
29199: LD_INT 20
29201: PUSH
29202: LD_INT 21
29204: PUSH
29205: LD_INT 22
29207: PUSH
29208: LD_INT 23
29210: PUSH
29211: LD_INT 25
29213: PUSH
29214: LD_INT 26
29216: PUSH
29217: LD_INT 30
29219: PUSH
29220: LD_INT 31
29222: PUSH
29223: LD_INT 32
29225: PUSH
29226: LD_INT 36
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 101
29252: PUSH
29253: LD_INT 102
29255: PUSH
29256: LD_INT 105
29258: PUSH
29259: LD_INT 106
29261: PUSH
29262: LD_INT 108
29264: PUSH
29265: LD_INT 109
29267: PUSH
29268: LD_INT 112
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: ST_TO_ADDR
29284: GO 31651
29286: LD_INT 7
29288: DOUBLE
29289: EQUAL
29290: IFTRUE 29294
29292: GO 29394
29294: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
29295: LD_ADDR_VAR 0 1
29299: PUSH
29300: LD_INT 2
29302: PUSH
29303: LD_INT 4
29305: PUSH
29306: LD_INT 5
29308: PUSH
29309: LD_INT 7
29311: PUSH
29312: LD_INT 11
29314: PUSH
29315: LD_INT 12
29317: PUSH
29318: LD_INT 15
29320: PUSH
29321: LD_INT 16
29323: PUSH
29324: LD_INT 20
29326: PUSH
29327: LD_INT 21
29329: PUSH
29330: LD_INT 22
29332: PUSH
29333: LD_INT 23
29335: PUSH
29336: LD_INT 25
29338: PUSH
29339: LD_INT 26
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 101
29360: PUSH
29361: LD_INT 102
29363: PUSH
29364: LD_INT 103
29366: PUSH
29367: LD_INT 105
29369: PUSH
29370: LD_INT 106
29372: PUSH
29373: LD_INT 108
29375: PUSH
29376: LD_INT 112
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: ST_TO_ADDR
29392: GO 31651
29394: LD_INT 8
29396: DOUBLE
29397: EQUAL
29398: IFTRUE 29402
29400: GO 29530
29402: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
29403: LD_ADDR_VAR 0 1
29407: PUSH
29408: LD_INT 2
29410: PUSH
29411: LD_INT 4
29413: PUSH
29414: LD_INT 5
29416: PUSH
29417: LD_INT 6
29419: PUSH
29420: LD_INT 7
29422: PUSH
29423: LD_INT 8
29425: PUSH
29426: LD_INT 11
29428: PUSH
29429: LD_INT 12
29431: PUSH
29432: LD_INT 15
29434: PUSH
29435: LD_INT 16
29437: PUSH
29438: LD_INT 20
29440: PUSH
29441: LD_INT 21
29443: PUSH
29444: LD_INT 22
29446: PUSH
29447: LD_INT 23
29449: PUSH
29450: LD_INT 25
29452: PUSH
29453: LD_INT 26
29455: PUSH
29456: LD_INT 30
29458: PUSH
29459: LD_INT 31
29461: PUSH
29462: LD_INT 32
29464: PUSH
29465: LD_INT 36
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 101
29492: PUSH
29493: LD_INT 102
29495: PUSH
29496: LD_INT 103
29498: PUSH
29499: LD_INT 105
29501: PUSH
29502: LD_INT 106
29504: PUSH
29505: LD_INT 108
29507: PUSH
29508: LD_INT 109
29510: PUSH
29511: LD_INT 112
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: ST_TO_ADDR
29528: GO 31651
29530: LD_INT 9
29532: DOUBLE
29533: EQUAL
29534: IFTRUE 29538
29536: GO 29674
29538: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
29539: LD_ADDR_VAR 0 1
29543: PUSH
29544: LD_INT 2
29546: PUSH
29547: LD_INT 4
29549: PUSH
29550: LD_INT 5
29552: PUSH
29553: LD_INT 6
29555: PUSH
29556: LD_INT 7
29558: PUSH
29559: LD_INT 8
29561: PUSH
29562: LD_INT 11
29564: PUSH
29565: LD_INT 12
29567: PUSH
29568: LD_INT 15
29570: PUSH
29571: LD_INT 16
29573: PUSH
29574: LD_INT 20
29576: PUSH
29577: LD_INT 21
29579: PUSH
29580: LD_INT 22
29582: PUSH
29583: LD_INT 23
29585: PUSH
29586: LD_INT 25
29588: PUSH
29589: LD_INT 26
29591: PUSH
29592: LD_INT 28
29594: PUSH
29595: LD_INT 30
29597: PUSH
29598: LD_INT 31
29600: PUSH
29601: LD_INT 32
29603: PUSH
29604: LD_INT 36
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 101
29632: PUSH
29633: LD_INT 102
29635: PUSH
29636: LD_INT 103
29638: PUSH
29639: LD_INT 105
29641: PUSH
29642: LD_INT 106
29644: PUSH
29645: LD_INT 108
29647: PUSH
29648: LD_INT 109
29650: PUSH
29651: LD_INT 112
29653: PUSH
29654: LD_INT 114
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: ST_TO_ADDR
29672: GO 31651
29674: LD_INT 10
29676: DOUBLE
29677: EQUAL
29678: IFTRUE 29682
29680: GO 29866
29682: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
29683: LD_ADDR_VAR 0 1
29687: PUSH
29688: LD_INT 2
29690: PUSH
29691: LD_INT 4
29693: PUSH
29694: LD_INT 5
29696: PUSH
29697: LD_INT 6
29699: PUSH
29700: LD_INT 7
29702: PUSH
29703: LD_INT 8
29705: PUSH
29706: LD_INT 9
29708: PUSH
29709: LD_INT 10
29711: PUSH
29712: LD_INT 11
29714: PUSH
29715: LD_INT 12
29717: PUSH
29718: LD_INT 13
29720: PUSH
29721: LD_INT 14
29723: PUSH
29724: LD_INT 15
29726: PUSH
29727: LD_INT 16
29729: PUSH
29730: LD_INT 17
29732: PUSH
29733: LD_INT 18
29735: PUSH
29736: LD_INT 19
29738: PUSH
29739: LD_INT 20
29741: PUSH
29742: LD_INT 21
29744: PUSH
29745: LD_INT 22
29747: PUSH
29748: LD_INT 23
29750: PUSH
29751: LD_INT 24
29753: PUSH
29754: LD_INT 25
29756: PUSH
29757: LD_INT 26
29759: PUSH
29760: LD_INT 28
29762: PUSH
29763: LD_INT 30
29765: PUSH
29766: LD_INT 31
29768: PUSH
29769: LD_INT 32
29771: PUSH
29772: LD_INT 36
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 101
29808: PUSH
29809: LD_INT 102
29811: PUSH
29812: LD_INT 103
29814: PUSH
29815: LD_INT 104
29817: PUSH
29818: LD_INT 105
29820: PUSH
29821: LD_INT 106
29823: PUSH
29824: LD_INT 107
29826: PUSH
29827: LD_INT 108
29829: PUSH
29830: LD_INT 109
29832: PUSH
29833: LD_INT 110
29835: PUSH
29836: LD_INT 111
29838: PUSH
29839: LD_INT 112
29841: PUSH
29842: LD_INT 114
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: ST_TO_ADDR
29864: GO 31651
29866: LD_INT 11
29868: DOUBLE
29869: EQUAL
29870: IFTRUE 29874
29872: GO 30066
29874: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
29875: LD_ADDR_VAR 0 1
29879: PUSH
29880: LD_INT 2
29882: PUSH
29883: LD_INT 3
29885: PUSH
29886: LD_INT 4
29888: PUSH
29889: LD_INT 5
29891: PUSH
29892: LD_INT 6
29894: PUSH
29895: LD_INT 7
29897: PUSH
29898: LD_INT 8
29900: PUSH
29901: LD_INT 9
29903: PUSH
29904: LD_INT 10
29906: PUSH
29907: LD_INT 11
29909: PUSH
29910: LD_INT 12
29912: PUSH
29913: LD_INT 13
29915: PUSH
29916: LD_INT 14
29918: PUSH
29919: LD_INT 15
29921: PUSH
29922: LD_INT 16
29924: PUSH
29925: LD_INT 17
29927: PUSH
29928: LD_INT 18
29930: PUSH
29931: LD_INT 19
29933: PUSH
29934: LD_INT 20
29936: PUSH
29937: LD_INT 21
29939: PUSH
29940: LD_INT 22
29942: PUSH
29943: LD_INT 23
29945: PUSH
29946: LD_INT 24
29948: PUSH
29949: LD_INT 25
29951: PUSH
29952: LD_INT 26
29954: PUSH
29955: LD_INT 28
29957: PUSH
29958: LD_INT 30
29960: PUSH
29961: LD_INT 31
29963: PUSH
29964: LD_INT 32
29966: PUSH
29967: LD_INT 34
29969: PUSH
29970: LD_INT 36
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 101
30008: PUSH
30009: LD_INT 102
30011: PUSH
30012: LD_INT 103
30014: PUSH
30015: LD_INT 104
30017: PUSH
30018: LD_INT 105
30020: PUSH
30021: LD_INT 106
30023: PUSH
30024: LD_INT 107
30026: PUSH
30027: LD_INT 108
30029: PUSH
30030: LD_INT 109
30032: PUSH
30033: LD_INT 110
30035: PUSH
30036: LD_INT 111
30038: PUSH
30039: LD_INT 112
30041: PUSH
30042: LD_INT 114
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: ST_TO_ADDR
30064: GO 31651
30066: LD_INT 12
30068: DOUBLE
30069: EQUAL
30070: IFTRUE 30074
30072: GO 30282
30074: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
30075: LD_ADDR_VAR 0 1
30079: PUSH
30080: LD_INT 1
30082: PUSH
30083: LD_INT 2
30085: PUSH
30086: LD_INT 3
30088: PUSH
30089: LD_INT 4
30091: PUSH
30092: LD_INT 5
30094: PUSH
30095: LD_INT 6
30097: PUSH
30098: LD_INT 7
30100: PUSH
30101: LD_INT 8
30103: PUSH
30104: LD_INT 9
30106: PUSH
30107: LD_INT 10
30109: PUSH
30110: LD_INT 11
30112: PUSH
30113: LD_INT 12
30115: PUSH
30116: LD_INT 13
30118: PUSH
30119: LD_INT 14
30121: PUSH
30122: LD_INT 15
30124: PUSH
30125: LD_INT 16
30127: PUSH
30128: LD_INT 17
30130: PUSH
30131: LD_INT 18
30133: PUSH
30134: LD_INT 19
30136: PUSH
30137: LD_INT 20
30139: PUSH
30140: LD_INT 21
30142: PUSH
30143: LD_INT 22
30145: PUSH
30146: LD_INT 23
30148: PUSH
30149: LD_INT 24
30151: PUSH
30152: LD_INT 25
30154: PUSH
30155: LD_INT 26
30157: PUSH
30158: LD_INT 27
30160: PUSH
30161: LD_INT 28
30163: PUSH
30164: LD_INT 30
30166: PUSH
30167: LD_INT 31
30169: PUSH
30170: LD_INT 32
30172: PUSH
30173: LD_INT 33
30175: PUSH
30176: LD_INT 34
30178: PUSH
30179: LD_INT 36
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 101
30220: PUSH
30221: LD_INT 102
30223: PUSH
30224: LD_INT 103
30226: PUSH
30227: LD_INT 104
30229: PUSH
30230: LD_INT 105
30232: PUSH
30233: LD_INT 106
30235: PUSH
30236: LD_INT 107
30238: PUSH
30239: LD_INT 108
30241: PUSH
30242: LD_INT 109
30244: PUSH
30245: LD_INT 110
30247: PUSH
30248: LD_INT 111
30250: PUSH
30251: LD_INT 112
30253: PUSH
30254: LD_INT 113
30256: PUSH
30257: LD_INT 114
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: ST_TO_ADDR
30280: GO 31651
30282: LD_INT 13
30284: DOUBLE
30285: EQUAL
30286: IFTRUE 30290
30288: GO 30486
30290: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
30291: LD_ADDR_VAR 0 1
30295: PUSH
30296: LD_INT 1
30298: PUSH
30299: LD_INT 2
30301: PUSH
30302: LD_INT 3
30304: PUSH
30305: LD_INT 4
30307: PUSH
30308: LD_INT 5
30310: PUSH
30311: LD_INT 8
30313: PUSH
30314: LD_INT 9
30316: PUSH
30317: LD_INT 10
30319: PUSH
30320: LD_INT 11
30322: PUSH
30323: LD_INT 12
30325: PUSH
30326: LD_INT 14
30328: PUSH
30329: LD_INT 15
30331: PUSH
30332: LD_INT 16
30334: PUSH
30335: LD_INT 17
30337: PUSH
30338: LD_INT 18
30340: PUSH
30341: LD_INT 19
30343: PUSH
30344: LD_INT 20
30346: PUSH
30347: LD_INT 21
30349: PUSH
30350: LD_INT 22
30352: PUSH
30353: LD_INT 23
30355: PUSH
30356: LD_INT 24
30358: PUSH
30359: LD_INT 25
30361: PUSH
30362: LD_INT 26
30364: PUSH
30365: LD_INT 27
30367: PUSH
30368: LD_INT 28
30370: PUSH
30371: LD_INT 30
30373: PUSH
30374: LD_INT 31
30376: PUSH
30377: LD_INT 32
30379: PUSH
30380: LD_INT 33
30382: PUSH
30383: LD_INT 34
30385: PUSH
30386: LD_INT 36
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 101
30424: PUSH
30425: LD_INT 102
30427: PUSH
30428: LD_INT 103
30430: PUSH
30431: LD_INT 104
30433: PUSH
30434: LD_INT 105
30436: PUSH
30437: LD_INT 106
30439: PUSH
30440: LD_INT 107
30442: PUSH
30443: LD_INT 108
30445: PUSH
30446: LD_INT 109
30448: PUSH
30449: LD_INT 110
30451: PUSH
30452: LD_INT 111
30454: PUSH
30455: LD_INT 112
30457: PUSH
30458: LD_INT 113
30460: PUSH
30461: LD_INT 114
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: ST_TO_ADDR
30484: GO 31651
30486: LD_INT 14
30488: DOUBLE
30489: EQUAL
30490: IFTRUE 30494
30492: GO 30706
30494: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
30495: LD_ADDR_VAR 0 1
30499: PUSH
30500: LD_INT 1
30502: PUSH
30503: LD_INT 2
30505: PUSH
30506: LD_INT 3
30508: PUSH
30509: LD_INT 4
30511: PUSH
30512: LD_INT 5
30514: PUSH
30515: LD_INT 6
30517: PUSH
30518: LD_INT 7
30520: PUSH
30521: LD_INT 8
30523: PUSH
30524: LD_INT 9
30526: PUSH
30527: LD_INT 10
30529: PUSH
30530: LD_INT 11
30532: PUSH
30533: LD_INT 12
30535: PUSH
30536: LD_INT 13
30538: PUSH
30539: LD_INT 14
30541: PUSH
30542: LD_INT 15
30544: PUSH
30545: LD_INT 16
30547: PUSH
30548: LD_INT 17
30550: PUSH
30551: LD_INT 18
30553: PUSH
30554: LD_INT 19
30556: PUSH
30557: LD_INT 20
30559: PUSH
30560: LD_INT 21
30562: PUSH
30563: LD_INT 22
30565: PUSH
30566: LD_INT 23
30568: PUSH
30569: LD_INT 24
30571: PUSH
30572: LD_INT 25
30574: PUSH
30575: LD_INT 26
30577: PUSH
30578: LD_INT 27
30580: PUSH
30581: LD_INT 28
30583: PUSH
30584: LD_INT 29
30586: PUSH
30587: LD_INT 30
30589: PUSH
30590: LD_INT 31
30592: PUSH
30593: LD_INT 32
30595: PUSH
30596: LD_INT 33
30598: PUSH
30599: LD_INT 34
30601: PUSH
30602: LD_INT 36
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 101
30644: PUSH
30645: LD_INT 102
30647: PUSH
30648: LD_INT 103
30650: PUSH
30651: LD_INT 104
30653: PUSH
30654: LD_INT 105
30656: PUSH
30657: LD_INT 106
30659: PUSH
30660: LD_INT 107
30662: PUSH
30663: LD_INT 108
30665: PUSH
30666: LD_INT 109
30668: PUSH
30669: LD_INT 110
30671: PUSH
30672: LD_INT 111
30674: PUSH
30675: LD_INT 112
30677: PUSH
30678: LD_INT 113
30680: PUSH
30681: LD_INT 114
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: ST_TO_ADDR
30704: GO 31651
30706: LD_INT 15
30708: DOUBLE
30709: EQUAL
30710: IFTRUE 30714
30712: GO 30926
30714: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
30715: LD_ADDR_VAR 0 1
30719: PUSH
30720: LD_INT 1
30722: PUSH
30723: LD_INT 2
30725: PUSH
30726: LD_INT 3
30728: PUSH
30729: LD_INT 4
30731: PUSH
30732: LD_INT 5
30734: PUSH
30735: LD_INT 6
30737: PUSH
30738: LD_INT 7
30740: PUSH
30741: LD_INT 8
30743: PUSH
30744: LD_INT 9
30746: PUSH
30747: LD_INT 10
30749: PUSH
30750: LD_INT 11
30752: PUSH
30753: LD_INT 12
30755: PUSH
30756: LD_INT 13
30758: PUSH
30759: LD_INT 14
30761: PUSH
30762: LD_INT 15
30764: PUSH
30765: LD_INT 16
30767: PUSH
30768: LD_INT 17
30770: PUSH
30771: LD_INT 18
30773: PUSH
30774: LD_INT 19
30776: PUSH
30777: LD_INT 20
30779: PUSH
30780: LD_INT 21
30782: PUSH
30783: LD_INT 22
30785: PUSH
30786: LD_INT 23
30788: PUSH
30789: LD_INT 24
30791: PUSH
30792: LD_INT 25
30794: PUSH
30795: LD_INT 26
30797: PUSH
30798: LD_INT 27
30800: PUSH
30801: LD_INT 28
30803: PUSH
30804: LD_INT 29
30806: PUSH
30807: LD_INT 30
30809: PUSH
30810: LD_INT 31
30812: PUSH
30813: LD_INT 32
30815: PUSH
30816: LD_INT 33
30818: PUSH
30819: LD_INT 34
30821: PUSH
30822: LD_INT 36
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 101
30864: PUSH
30865: LD_INT 102
30867: PUSH
30868: LD_INT 103
30870: PUSH
30871: LD_INT 104
30873: PUSH
30874: LD_INT 105
30876: PUSH
30877: LD_INT 106
30879: PUSH
30880: LD_INT 107
30882: PUSH
30883: LD_INT 108
30885: PUSH
30886: LD_INT 109
30888: PUSH
30889: LD_INT 110
30891: PUSH
30892: LD_INT 111
30894: PUSH
30895: LD_INT 112
30897: PUSH
30898: LD_INT 113
30900: PUSH
30901: LD_INT 114
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: ST_TO_ADDR
30924: GO 31651
30926: LD_INT 16
30928: DOUBLE
30929: EQUAL
30930: IFTRUE 30934
30932: GO 31058
30934: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
30935: LD_ADDR_VAR 0 1
30939: PUSH
30940: LD_INT 2
30942: PUSH
30943: LD_INT 4
30945: PUSH
30946: LD_INT 5
30948: PUSH
30949: LD_INT 7
30951: PUSH
30952: LD_INT 11
30954: PUSH
30955: LD_INT 12
30957: PUSH
30958: LD_INT 15
30960: PUSH
30961: LD_INT 16
30963: PUSH
30964: LD_INT 20
30966: PUSH
30967: LD_INT 21
30969: PUSH
30970: LD_INT 22
30972: PUSH
30973: LD_INT 23
30975: PUSH
30976: LD_INT 25
30978: PUSH
30979: LD_INT 26
30981: PUSH
30982: LD_INT 30
30984: PUSH
30985: LD_INT 31
30987: PUSH
30988: LD_INT 32
30990: PUSH
30991: LD_INT 33
30993: PUSH
30994: LD_INT 34
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 101
31020: PUSH
31021: LD_INT 102
31023: PUSH
31024: LD_INT 103
31026: PUSH
31027: LD_INT 106
31029: PUSH
31030: LD_INT 108
31032: PUSH
31033: LD_INT 112
31035: PUSH
31036: LD_INT 113
31038: PUSH
31039: LD_INT 114
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: ST_TO_ADDR
31056: GO 31651
31058: LD_INT 17
31060: DOUBLE
31061: EQUAL
31062: IFTRUE 31066
31064: GO 31278
31066: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
31067: LD_ADDR_VAR 0 1
31071: PUSH
31072: LD_INT 1
31074: PUSH
31075: LD_INT 2
31077: PUSH
31078: LD_INT 3
31080: PUSH
31081: LD_INT 4
31083: PUSH
31084: LD_INT 5
31086: PUSH
31087: LD_INT 6
31089: PUSH
31090: LD_INT 7
31092: PUSH
31093: LD_INT 8
31095: PUSH
31096: LD_INT 9
31098: PUSH
31099: LD_INT 10
31101: PUSH
31102: LD_INT 11
31104: PUSH
31105: LD_INT 12
31107: PUSH
31108: LD_INT 13
31110: PUSH
31111: LD_INT 14
31113: PUSH
31114: LD_INT 15
31116: PUSH
31117: LD_INT 16
31119: PUSH
31120: LD_INT 17
31122: PUSH
31123: LD_INT 18
31125: PUSH
31126: LD_INT 19
31128: PUSH
31129: LD_INT 20
31131: PUSH
31132: LD_INT 21
31134: PUSH
31135: LD_INT 22
31137: PUSH
31138: LD_INT 23
31140: PUSH
31141: LD_INT 24
31143: PUSH
31144: LD_INT 25
31146: PUSH
31147: LD_INT 26
31149: PUSH
31150: LD_INT 27
31152: PUSH
31153: LD_INT 28
31155: PUSH
31156: LD_INT 29
31158: PUSH
31159: LD_INT 30
31161: PUSH
31162: LD_INT 31
31164: PUSH
31165: LD_INT 32
31167: PUSH
31168: LD_INT 33
31170: PUSH
31171: LD_INT 34
31173: PUSH
31174: LD_INT 36
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 101
31216: PUSH
31217: LD_INT 102
31219: PUSH
31220: LD_INT 103
31222: PUSH
31223: LD_INT 104
31225: PUSH
31226: LD_INT 105
31228: PUSH
31229: LD_INT 106
31231: PUSH
31232: LD_INT 107
31234: PUSH
31235: LD_INT 108
31237: PUSH
31238: LD_INT 109
31240: PUSH
31241: LD_INT 110
31243: PUSH
31244: LD_INT 111
31246: PUSH
31247: LD_INT 112
31249: PUSH
31250: LD_INT 113
31252: PUSH
31253: LD_INT 114
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: ST_TO_ADDR
31276: GO 31651
31278: LD_INT 18
31280: DOUBLE
31281: EQUAL
31282: IFTRUE 31286
31284: GO 31422
31286: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
31287: LD_ADDR_VAR 0 1
31291: PUSH
31292: LD_INT 2
31294: PUSH
31295: LD_INT 4
31297: PUSH
31298: LD_INT 5
31300: PUSH
31301: LD_INT 7
31303: PUSH
31304: LD_INT 11
31306: PUSH
31307: LD_INT 12
31309: PUSH
31310: LD_INT 15
31312: PUSH
31313: LD_INT 16
31315: PUSH
31316: LD_INT 20
31318: PUSH
31319: LD_INT 21
31321: PUSH
31322: LD_INT 22
31324: PUSH
31325: LD_INT 23
31327: PUSH
31328: LD_INT 25
31330: PUSH
31331: LD_INT 26
31333: PUSH
31334: LD_INT 30
31336: PUSH
31337: LD_INT 31
31339: PUSH
31340: LD_INT 32
31342: PUSH
31343: LD_INT 33
31345: PUSH
31346: LD_INT 34
31348: PUSH
31349: LD_INT 35
31351: PUSH
31352: LD_INT 36
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 101
31380: PUSH
31381: LD_INT 102
31383: PUSH
31384: LD_INT 103
31386: PUSH
31387: LD_INT 106
31389: PUSH
31390: LD_INT 108
31392: PUSH
31393: LD_INT 112
31395: PUSH
31396: LD_INT 113
31398: PUSH
31399: LD_INT 114
31401: PUSH
31402: LD_INT 115
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: ST_TO_ADDR
31420: GO 31651
31422: LD_INT 19
31424: DOUBLE
31425: EQUAL
31426: IFTRUE 31430
31428: GO 31650
31430: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
31431: LD_ADDR_VAR 0 1
31435: PUSH
31436: LD_INT 1
31438: PUSH
31439: LD_INT 2
31441: PUSH
31442: LD_INT 3
31444: PUSH
31445: LD_INT 4
31447: PUSH
31448: LD_INT 5
31450: PUSH
31451: LD_INT 6
31453: PUSH
31454: LD_INT 7
31456: PUSH
31457: LD_INT 8
31459: PUSH
31460: LD_INT 9
31462: PUSH
31463: LD_INT 10
31465: PUSH
31466: LD_INT 11
31468: PUSH
31469: LD_INT 12
31471: PUSH
31472: LD_INT 13
31474: PUSH
31475: LD_INT 14
31477: PUSH
31478: LD_INT 15
31480: PUSH
31481: LD_INT 16
31483: PUSH
31484: LD_INT 17
31486: PUSH
31487: LD_INT 18
31489: PUSH
31490: LD_INT 19
31492: PUSH
31493: LD_INT 20
31495: PUSH
31496: LD_INT 21
31498: PUSH
31499: LD_INT 22
31501: PUSH
31502: LD_INT 23
31504: PUSH
31505: LD_INT 24
31507: PUSH
31508: LD_INT 25
31510: PUSH
31511: LD_INT 26
31513: PUSH
31514: LD_INT 27
31516: PUSH
31517: LD_INT 28
31519: PUSH
31520: LD_INT 29
31522: PUSH
31523: LD_INT 30
31525: PUSH
31526: LD_INT 31
31528: PUSH
31529: LD_INT 32
31531: PUSH
31532: LD_INT 33
31534: PUSH
31535: LD_INT 34
31537: PUSH
31538: LD_INT 35
31540: PUSH
31541: LD_INT 36
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 101
31584: PUSH
31585: LD_INT 102
31587: PUSH
31588: LD_INT 103
31590: PUSH
31591: LD_INT 104
31593: PUSH
31594: LD_INT 105
31596: PUSH
31597: LD_INT 106
31599: PUSH
31600: LD_INT 107
31602: PUSH
31603: LD_INT 108
31605: PUSH
31606: LD_INT 109
31608: PUSH
31609: LD_INT 110
31611: PUSH
31612: LD_INT 111
31614: PUSH
31615: LD_INT 112
31617: PUSH
31618: LD_INT 113
31620: PUSH
31621: LD_INT 114
31623: PUSH
31624: LD_INT 115
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: ST_TO_ADDR
31648: GO 31651
31650: POP
// end else
31651: GO 31870
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
31653: LD_ADDR_VAR 0 1
31657: PUSH
31658: LD_INT 1
31660: PUSH
31661: LD_INT 2
31663: PUSH
31664: LD_INT 3
31666: PUSH
31667: LD_INT 4
31669: PUSH
31670: LD_INT 5
31672: PUSH
31673: LD_INT 6
31675: PUSH
31676: LD_INT 7
31678: PUSH
31679: LD_INT 8
31681: PUSH
31682: LD_INT 9
31684: PUSH
31685: LD_INT 10
31687: PUSH
31688: LD_INT 11
31690: PUSH
31691: LD_INT 12
31693: PUSH
31694: LD_INT 13
31696: PUSH
31697: LD_INT 14
31699: PUSH
31700: LD_INT 15
31702: PUSH
31703: LD_INT 16
31705: PUSH
31706: LD_INT 17
31708: PUSH
31709: LD_INT 18
31711: PUSH
31712: LD_INT 19
31714: PUSH
31715: LD_INT 20
31717: PUSH
31718: LD_INT 21
31720: PUSH
31721: LD_INT 22
31723: PUSH
31724: LD_INT 23
31726: PUSH
31727: LD_INT 24
31729: PUSH
31730: LD_INT 25
31732: PUSH
31733: LD_INT 26
31735: PUSH
31736: LD_INT 27
31738: PUSH
31739: LD_INT 28
31741: PUSH
31742: LD_INT 29
31744: PUSH
31745: LD_INT 30
31747: PUSH
31748: LD_INT 31
31750: PUSH
31751: LD_INT 32
31753: PUSH
31754: LD_INT 33
31756: PUSH
31757: LD_INT 34
31759: PUSH
31760: LD_INT 35
31762: PUSH
31763: LD_INT 36
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 101
31806: PUSH
31807: LD_INT 102
31809: PUSH
31810: LD_INT 103
31812: PUSH
31813: LD_INT 104
31815: PUSH
31816: LD_INT 105
31818: PUSH
31819: LD_INT 106
31821: PUSH
31822: LD_INT 107
31824: PUSH
31825: LD_INT 108
31827: PUSH
31828: LD_INT 109
31830: PUSH
31831: LD_INT 110
31833: PUSH
31834: LD_INT 111
31836: PUSH
31837: LD_INT 112
31839: PUSH
31840: LD_INT 113
31842: PUSH
31843: LD_INT 114
31845: PUSH
31846: LD_INT 115
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: ST_TO_ADDR
// if result then
31870: LD_VAR 0 1
31874: IFFALSE 32163
// begin normal :=  ;
31876: LD_ADDR_VAR 0 3
31880: PUSH
31881: LD_STRING 
31883: ST_TO_ADDR
// hardcore :=  ;
31884: LD_ADDR_VAR 0 4
31888: PUSH
31889: LD_STRING 
31891: ST_TO_ADDR
// for i = 1 to normalCounter do
31892: LD_ADDR_VAR 0 5
31896: PUSH
31897: DOUBLE
31898: LD_INT 1
31900: DEC
31901: ST_TO_ADDR
31902: LD_EXP 68
31906: PUSH
31907: FOR_TO
31908: IFFALSE 32009
// begin tmp := 0 ;
31910: LD_ADDR_VAR 0 2
31914: PUSH
31915: LD_STRING 0
31917: ST_TO_ADDR
// if result [ 1 ] then
31918: LD_VAR 0 1
31922: PUSH
31923: LD_INT 1
31925: ARRAY
31926: IFFALSE 31991
// if result [ 1 ] [ 1 ] = i then
31928: LD_VAR 0 1
31932: PUSH
31933: LD_INT 1
31935: ARRAY
31936: PUSH
31937: LD_INT 1
31939: ARRAY
31940: PUSH
31941: LD_VAR 0 5
31945: EQUAL
31946: IFFALSE 31991
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
31948: LD_ADDR_VAR 0 1
31952: PUSH
31953: LD_VAR 0 1
31957: PPUSH
31958: LD_INT 1
31960: PPUSH
31961: LD_VAR 0 1
31965: PUSH
31966: LD_INT 1
31968: ARRAY
31969: PPUSH
31970: LD_INT 1
31972: PPUSH
31973: CALL_OW 3
31977: PPUSH
31978: CALL_OW 1
31982: ST_TO_ADDR
// tmp := 1 ;
31983: LD_ADDR_VAR 0 2
31987: PUSH
31988: LD_STRING 1
31990: ST_TO_ADDR
// end ; normal := normal & tmp ;
31991: LD_ADDR_VAR 0 3
31995: PUSH
31996: LD_VAR 0 3
32000: PUSH
32001: LD_VAR 0 2
32005: STR
32006: ST_TO_ADDR
// end ;
32007: GO 31907
32009: POP
32010: POP
// for i = 1 to hardcoreCounter do
32011: LD_ADDR_VAR 0 5
32015: PUSH
32016: DOUBLE
32017: LD_INT 1
32019: DEC
32020: ST_TO_ADDR
32021: LD_EXP 69
32025: PUSH
32026: FOR_TO
32027: IFFALSE 32132
// begin tmp := 0 ;
32029: LD_ADDR_VAR 0 2
32033: PUSH
32034: LD_STRING 0
32036: ST_TO_ADDR
// if result [ 2 ] then
32037: LD_VAR 0 1
32041: PUSH
32042: LD_INT 2
32044: ARRAY
32045: IFFALSE 32114
// if result [ 2 ] [ 1 ] = 100 + i then
32047: LD_VAR 0 1
32051: PUSH
32052: LD_INT 2
32054: ARRAY
32055: PUSH
32056: LD_INT 1
32058: ARRAY
32059: PUSH
32060: LD_INT 100
32062: PUSH
32063: LD_VAR 0 5
32067: PLUS
32068: EQUAL
32069: IFFALSE 32114
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
32071: LD_ADDR_VAR 0 1
32075: PUSH
32076: LD_VAR 0 1
32080: PPUSH
32081: LD_INT 2
32083: PPUSH
32084: LD_VAR 0 1
32088: PUSH
32089: LD_INT 2
32091: ARRAY
32092: PPUSH
32093: LD_INT 1
32095: PPUSH
32096: CALL_OW 3
32100: PPUSH
32101: CALL_OW 1
32105: ST_TO_ADDR
// tmp := 1 ;
32106: LD_ADDR_VAR 0 2
32110: PUSH
32111: LD_STRING 1
32113: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
32114: LD_ADDR_VAR 0 4
32118: PUSH
32119: LD_VAR 0 4
32123: PUSH
32124: LD_VAR 0 2
32128: STR
32129: ST_TO_ADDR
// end ;
32130: GO 32026
32132: POP
32133: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
32134: LD_STRING getStreamItemsFromMission("
32136: PUSH
32137: LD_VAR 0 3
32141: STR
32142: PUSH
32143: LD_STRING ","
32145: STR
32146: PUSH
32147: LD_VAR 0 4
32151: STR
32152: PUSH
32153: LD_STRING ")
32155: STR
32156: PPUSH
32157: CALL_OW 559
// end else
32161: GO 32170
// ToLua ( getStreamItemsFromMission("","") ) ;
32163: LD_STRING getStreamItemsFromMission("","")
32165: PPUSH
32166: CALL_OW 559
// end ;
32170: LD_VAR 0 1
32174: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
32175: LD_EXP 67
32179: PUSH
32180: LD_EXP 72
32184: AND
32185: IFFALSE 32309
32187: GO 32189
32189: DISABLE
32190: LD_INT 0
32192: PPUSH
32193: PPUSH
// begin enable ;
32194: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
32195: LD_ADDR_VAR 0 2
32199: PUSH
32200: LD_INT 22
32202: PUSH
32203: LD_OWVAR 2
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 2
32214: PUSH
32215: LD_INT 34
32217: PUSH
32218: LD_INT 7
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 34
32227: PUSH
32228: LD_INT 45
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 34
32237: PUSH
32238: LD_INT 28
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 34
32247: PUSH
32248: LD_INT 47
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PPUSH
32266: CALL_OW 69
32270: ST_TO_ADDR
// if not tmp then
32271: LD_VAR 0 2
32275: NOT
32276: IFFALSE 32280
// exit ;
32278: GO 32309
// for i in tmp do
32280: LD_ADDR_VAR 0 1
32284: PUSH
32285: LD_VAR 0 2
32289: PUSH
32290: FOR_IN
32291: IFFALSE 32307
// begin SetLives ( i , 0 ) ;
32293: LD_VAR 0 1
32297: PPUSH
32298: LD_INT 0
32300: PPUSH
32301: CALL_OW 234
// end ;
32305: GO 32290
32307: POP
32308: POP
// end ;
32309: PPOPN 2
32311: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
32312: LD_EXP 67
32316: PUSH
32317: LD_EXP 73
32321: AND
32322: IFFALSE 32406
32324: GO 32326
32326: DISABLE
32327: LD_INT 0
32329: PPUSH
32330: PPUSH
// begin enable ;
32331: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
32332: LD_ADDR_VAR 0 2
32336: PUSH
32337: LD_INT 22
32339: PUSH
32340: LD_OWVAR 2
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 32
32351: PUSH
32352: LD_INT 3
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PPUSH
32363: CALL_OW 69
32367: ST_TO_ADDR
// if not tmp then
32368: LD_VAR 0 2
32372: NOT
32373: IFFALSE 32377
// exit ;
32375: GO 32406
// for i in tmp do
32377: LD_ADDR_VAR 0 1
32381: PUSH
32382: LD_VAR 0 2
32386: PUSH
32387: FOR_IN
32388: IFFALSE 32404
// begin SetLives ( i , 0 ) ;
32390: LD_VAR 0 1
32394: PPUSH
32395: LD_INT 0
32397: PPUSH
32398: CALL_OW 234
// end ;
32402: GO 32387
32404: POP
32405: POP
// end ;
32406: PPOPN 2
32408: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
32409: LD_EXP 67
32413: PUSH
32414: LD_EXP 70
32418: AND
32419: IFFALSE 32512
32421: GO 32423
32423: DISABLE
32424: LD_INT 0
32426: PPUSH
// begin enable ;
32427: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
32428: LD_ADDR_VAR 0 1
32432: PUSH
32433: LD_INT 22
32435: PUSH
32436: LD_OWVAR 2
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 2
32447: PUSH
32448: LD_INT 25
32450: PUSH
32451: LD_INT 5
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 25
32460: PUSH
32461: LD_INT 9
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 25
32470: PUSH
32471: LD_INT 8
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PPUSH
32488: CALL_OW 69
32492: PUSH
32493: FOR_IN
32494: IFFALSE 32510
// begin SetClass ( i , 1 ) ;
32496: LD_VAR 0 1
32500: PPUSH
32501: LD_INT 1
32503: PPUSH
32504: CALL_OW 336
// end ;
32508: GO 32493
32510: POP
32511: POP
// end ;
32512: PPOPN 1
32514: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
32515: LD_EXP 67
32519: PUSH
32520: LD_EXP 71
32524: AND
32525: PUSH
32526: LD_OWVAR 65
32530: PUSH
32531: LD_INT 7
32533: LESS
32534: AND
32535: IFFALSE 32549
32537: GO 32539
32539: DISABLE
// begin enable ;
32540: ENABLE
// game_speed := 7 ;
32541: LD_ADDR_OWVAR 65
32545: PUSH
32546: LD_INT 7
32548: ST_TO_ADDR
// end ;
32549: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
32550: LD_EXP 67
32554: PUSH
32555: LD_EXP 74
32559: AND
32560: IFFALSE 32762
32562: GO 32564
32564: DISABLE
32565: LD_INT 0
32567: PPUSH
32568: PPUSH
32569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32570: LD_ADDR_VAR 0 3
32574: PUSH
32575: LD_INT 81
32577: PUSH
32578: LD_OWVAR 2
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 21
32589: PUSH
32590: LD_INT 1
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PPUSH
32601: CALL_OW 69
32605: ST_TO_ADDR
// if not tmp then
32606: LD_VAR 0 3
32610: NOT
32611: IFFALSE 32615
// exit ;
32613: GO 32762
// if tmp > 5 then
32615: LD_VAR 0 3
32619: PUSH
32620: LD_INT 5
32622: GREATER
32623: IFFALSE 32635
// k := 5 else
32625: LD_ADDR_VAR 0 2
32629: PUSH
32630: LD_INT 5
32632: ST_TO_ADDR
32633: GO 32645
// k := tmp ;
32635: LD_ADDR_VAR 0 2
32639: PUSH
32640: LD_VAR 0 3
32644: ST_TO_ADDR
// for i := 1 to k do
32645: LD_ADDR_VAR 0 1
32649: PUSH
32650: DOUBLE
32651: LD_INT 1
32653: DEC
32654: ST_TO_ADDR
32655: LD_VAR 0 2
32659: PUSH
32660: FOR_TO
32661: IFFALSE 32760
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
32663: LD_VAR 0 3
32667: PUSH
32668: LD_VAR 0 1
32672: ARRAY
32673: PPUSH
32674: LD_VAR 0 1
32678: PUSH
32679: LD_INT 4
32681: MOD
32682: PUSH
32683: LD_INT 1
32685: PLUS
32686: PPUSH
32687: CALL_OW 259
32691: PUSH
32692: LD_INT 10
32694: LESS
32695: IFFALSE 32758
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
32697: LD_VAR 0 3
32701: PUSH
32702: LD_VAR 0 1
32706: ARRAY
32707: PPUSH
32708: LD_VAR 0 1
32712: PUSH
32713: LD_INT 4
32715: MOD
32716: PUSH
32717: LD_INT 1
32719: PLUS
32720: PPUSH
32721: LD_VAR 0 3
32725: PUSH
32726: LD_VAR 0 1
32730: ARRAY
32731: PPUSH
32732: LD_VAR 0 1
32736: PUSH
32737: LD_INT 4
32739: MOD
32740: PUSH
32741: LD_INT 1
32743: PLUS
32744: PPUSH
32745: CALL_OW 259
32749: PUSH
32750: LD_INT 1
32752: PLUS
32753: PPUSH
32754: CALL_OW 237
32758: GO 32660
32760: POP
32761: POP
// end ;
32762: PPOPN 3
32764: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
32765: LD_EXP 67
32769: PUSH
32770: LD_EXP 75
32774: AND
32775: IFFALSE 32795
32777: GO 32779
32779: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
32780: LD_INT 4
32782: PPUSH
32783: LD_OWVAR 2
32787: PPUSH
32788: LD_INT 0
32790: PPUSH
32791: CALL_OW 324
32795: END
// every 0 0$1 trigger StreamModeActive and sShovel do
32796: LD_EXP 67
32800: PUSH
32801: LD_EXP 104
32805: AND
32806: IFFALSE 32826
32808: GO 32810
32810: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
32811: LD_INT 19
32813: PPUSH
32814: LD_OWVAR 2
32818: PPUSH
32819: LD_INT 0
32821: PPUSH
32822: CALL_OW 324
32826: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
32827: LD_EXP 67
32831: PUSH
32832: LD_EXP 76
32836: AND
32837: IFFALSE 32939
32839: GO 32841
32841: DISABLE
32842: LD_INT 0
32844: PPUSH
32845: PPUSH
// begin enable ;
32846: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
32847: LD_ADDR_VAR 0 2
32851: PUSH
32852: LD_INT 22
32854: PUSH
32855: LD_OWVAR 2
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 2
32866: PUSH
32867: LD_INT 34
32869: PUSH
32870: LD_INT 11
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 34
32879: PUSH
32880: LD_INT 30
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: LIST
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PPUSH
32896: CALL_OW 69
32900: ST_TO_ADDR
// if not tmp then
32901: LD_VAR 0 2
32905: NOT
32906: IFFALSE 32910
// exit ;
32908: GO 32939
// for i in tmp do
32910: LD_ADDR_VAR 0 1
32914: PUSH
32915: LD_VAR 0 2
32919: PUSH
32920: FOR_IN
32921: IFFALSE 32937
// begin SetLives ( i , 0 ) ;
32923: LD_VAR 0 1
32927: PPUSH
32928: LD_INT 0
32930: PPUSH
32931: CALL_OW 234
// end ;
32935: GO 32920
32937: POP
32938: POP
// end ;
32939: PPOPN 2
32941: END
// every 0 0$1 trigger StreamModeActive and sBunker do
32942: LD_EXP 67
32946: PUSH
32947: LD_EXP 77
32951: AND
32952: IFFALSE 32972
32954: GO 32956
32956: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
32957: LD_INT 32
32959: PPUSH
32960: LD_OWVAR 2
32964: PPUSH
32965: LD_INT 0
32967: PPUSH
32968: CALL_OW 324
32972: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
32973: LD_EXP 67
32977: PUSH
32978: LD_EXP 78
32982: AND
32983: IFFALSE 33164
32985: GO 32987
32987: DISABLE
32988: LD_INT 0
32990: PPUSH
32991: PPUSH
32992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
32993: LD_ADDR_VAR 0 2
32997: PUSH
32998: LD_INT 22
33000: PUSH
33001: LD_OWVAR 2
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 33
33012: PUSH
33013: LD_INT 3
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PPUSH
33024: CALL_OW 69
33028: ST_TO_ADDR
// if not tmp then
33029: LD_VAR 0 2
33033: NOT
33034: IFFALSE 33038
// exit ;
33036: GO 33164
// side := 0 ;
33038: LD_ADDR_VAR 0 3
33042: PUSH
33043: LD_INT 0
33045: ST_TO_ADDR
// for i := 1 to 8 do
33046: LD_ADDR_VAR 0 1
33050: PUSH
33051: DOUBLE
33052: LD_INT 1
33054: DEC
33055: ST_TO_ADDR
33056: LD_INT 8
33058: PUSH
33059: FOR_TO
33060: IFFALSE 33108
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
33062: LD_OWVAR 2
33066: PUSH
33067: LD_VAR 0 1
33071: NONEQUAL
33072: PUSH
33073: LD_OWVAR 2
33077: PPUSH
33078: LD_VAR 0 1
33082: PPUSH
33083: CALL_OW 81
33087: PUSH
33088: LD_INT 2
33090: EQUAL
33091: AND
33092: IFFALSE 33106
// begin side := i ;
33094: LD_ADDR_VAR 0 3
33098: PUSH
33099: LD_VAR 0 1
33103: ST_TO_ADDR
// break ;
33104: GO 33108
// end ;
33106: GO 33059
33108: POP
33109: POP
// if not side then
33110: LD_VAR 0 3
33114: NOT
33115: IFFALSE 33119
// exit ;
33117: GO 33164
// for i := 1 to tmp do
33119: LD_ADDR_VAR 0 1
33123: PUSH
33124: DOUBLE
33125: LD_INT 1
33127: DEC
33128: ST_TO_ADDR
33129: LD_VAR 0 2
33133: PUSH
33134: FOR_TO
33135: IFFALSE 33162
// if Prob ( 60 ) then
33137: LD_INT 60
33139: PPUSH
33140: CALL_OW 13
33144: IFFALSE 33160
// SetSide ( i , side ) ;
33146: LD_VAR 0 1
33150: PPUSH
33151: LD_VAR 0 3
33155: PPUSH
33156: CALL_OW 235
33160: GO 33134
33162: POP
33163: POP
// end ;
33164: PPOPN 3
33166: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
33167: LD_EXP 67
33171: PUSH
33172: LD_EXP 80
33176: AND
33177: IFFALSE 33296
33179: GO 33181
33181: DISABLE
33182: LD_INT 0
33184: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
33185: LD_ADDR_VAR 0 1
33189: PUSH
33190: LD_INT 22
33192: PUSH
33193: LD_OWVAR 2
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 21
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 3
33214: PUSH
33215: LD_INT 23
33217: PUSH
33218: LD_INT 0
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: LIST
33233: PPUSH
33234: CALL_OW 69
33238: PUSH
33239: FOR_IN
33240: IFFALSE 33294
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
33242: LD_VAR 0 1
33246: PPUSH
33247: CALL_OW 257
33251: PUSH
33252: LD_INT 1
33254: PUSH
33255: LD_INT 2
33257: PUSH
33258: LD_INT 3
33260: PUSH
33261: LD_INT 4
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: IN
33270: IFFALSE 33292
// SetClass ( un , rand ( 1 , 4 ) ) ;
33272: LD_VAR 0 1
33276: PPUSH
33277: LD_INT 1
33279: PPUSH
33280: LD_INT 4
33282: PPUSH
33283: CALL_OW 12
33287: PPUSH
33288: CALL_OW 336
33292: GO 33239
33294: POP
33295: POP
// end ;
33296: PPOPN 1
33298: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
33299: LD_EXP 67
33303: PUSH
33304: LD_EXP 79
33308: AND
33309: IFFALSE 33388
33311: GO 33313
33313: DISABLE
33314: LD_INT 0
33316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
33317: LD_ADDR_VAR 0 1
33321: PUSH
33322: LD_INT 22
33324: PUSH
33325: LD_OWVAR 2
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 21
33336: PUSH
33337: LD_INT 3
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PPUSH
33348: CALL_OW 69
33352: ST_TO_ADDR
// if not tmp then
33353: LD_VAR 0 1
33357: NOT
33358: IFFALSE 33362
// exit ;
33360: GO 33388
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
33362: LD_VAR 0 1
33366: PUSH
33367: LD_INT 1
33369: PPUSH
33370: LD_VAR 0 1
33374: PPUSH
33375: CALL_OW 12
33379: ARRAY
33380: PPUSH
33381: LD_INT 100
33383: PPUSH
33384: CALL_OW 234
// end ;
33388: PPOPN 1
33390: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
33391: LD_EXP 67
33395: PUSH
33396: LD_EXP 81
33400: AND
33401: IFFALSE 33499
33403: GO 33405
33405: DISABLE
33406: LD_INT 0
33408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33409: LD_ADDR_VAR 0 1
33413: PUSH
33414: LD_INT 22
33416: PUSH
33417: LD_OWVAR 2
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 21
33428: PUSH
33429: LD_INT 1
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PPUSH
33440: CALL_OW 69
33444: ST_TO_ADDR
// if not tmp then
33445: LD_VAR 0 1
33449: NOT
33450: IFFALSE 33454
// exit ;
33452: GO 33499
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
33454: LD_VAR 0 1
33458: PUSH
33459: LD_INT 1
33461: PPUSH
33462: LD_VAR 0 1
33466: PPUSH
33467: CALL_OW 12
33471: ARRAY
33472: PPUSH
33473: LD_INT 1
33475: PPUSH
33476: LD_INT 4
33478: PPUSH
33479: CALL_OW 12
33483: PPUSH
33484: LD_INT 3000
33486: PPUSH
33487: LD_INT 9000
33489: PPUSH
33490: CALL_OW 12
33494: PPUSH
33495: CALL_OW 492
// end ;
33499: PPOPN 1
33501: END
// every 0 0$1 trigger StreamModeActive and sDepot do
33502: LD_EXP 67
33506: PUSH
33507: LD_EXP 82
33511: AND
33512: IFFALSE 33532
33514: GO 33516
33516: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
33517: LD_INT 1
33519: PPUSH
33520: LD_OWVAR 2
33524: PPUSH
33525: LD_INT 0
33527: PPUSH
33528: CALL_OW 324
33532: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
33533: LD_EXP 67
33537: PUSH
33538: LD_EXP 83
33542: AND
33543: IFFALSE 33626
33545: GO 33547
33547: DISABLE
33548: LD_INT 0
33550: PPUSH
33551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
33552: LD_ADDR_VAR 0 2
33556: PUSH
33557: LD_INT 22
33559: PUSH
33560: LD_OWVAR 2
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 21
33571: PUSH
33572: LD_INT 3
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PPUSH
33583: CALL_OW 69
33587: ST_TO_ADDR
// if not tmp then
33588: LD_VAR 0 2
33592: NOT
33593: IFFALSE 33597
// exit ;
33595: GO 33626
// for i in tmp do
33597: LD_ADDR_VAR 0 1
33601: PUSH
33602: LD_VAR 0 2
33606: PUSH
33607: FOR_IN
33608: IFFALSE 33624
// SetBLevel ( i , 10 ) ;
33610: LD_VAR 0 1
33614: PPUSH
33615: LD_INT 10
33617: PPUSH
33618: CALL_OW 241
33622: GO 33607
33624: POP
33625: POP
// end ;
33626: PPOPN 2
33628: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
33629: LD_EXP 67
33633: PUSH
33634: LD_EXP 84
33638: AND
33639: IFFALSE 33750
33641: GO 33643
33643: DISABLE
33644: LD_INT 0
33646: PPUSH
33647: PPUSH
33648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33649: LD_ADDR_VAR 0 3
33653: PUSH
33654: LD_INT 22
33656: PUSH
33657: LD_OWVAR 2
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 25
33668: PUSH
33669: LD_INT 1
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PPUSH
33680: CALL_OW 69
33684: ST_TO_ADDR
// if not tmp then
33685: LD_VAR 0 3
33689: NOT
33690: IFFALSE 33694
// exit ;
33692: GO 33750
// un := tmp [ rand ( 1 , tmp ) ] ;
33694: LD_ADDR_VAR 0 2
33698: PUSH
33699: LD_VAR 0 3
33703: PUSH
33704: LD_INT 1
33706: PPUSH
33707: LD_VAR 0 3
33711: PPUSH
33712: CALL_OW 12
33716: ARRAY
33717: ST_TO_ADDR
// if Crawls ( un ) then
33718: LD_VAR 0 2
33722: PPUSH
33723: CALL_OW 318
33727: IFFALSE 33738
// ComWalk ( un ) ;
33729: LD_VAR 0 2
33733: PPUSH
33734: CALL_OW 138
// SetClass ( un , class_sniper ) ;
33738: LD_VAR 0 2
33742: PPUSH
33743: LD_INT 5
33745: PPUSH
33746: CALL_OW 336
// end ;
33750: PPOPN 3
33752: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
33753: LD_EXP 67
33757: PUSH
33758: LD_EXP 85
33762: AND
33763: PUSH
33764: LD_OWVAR 67
33768: PUSH
33769: LD_INT 3
33771: LESS
33772: AND
33773: IFFALSE 33792
33775: GO 33777
33777: DISABLE
// Difficulty := Difficulty + 1 ;
33778: LD_ADDR_OWVAR 67
33782: PUSH
33783: LD_OWVAR 67
33787: PUSH
33788: LD_INT 1
33790: PLUS
33791: ST_TO_ADDR
33792: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
33793: LD_EXP 67
33797: PUSH
33798: LD_EXP 86
33802: AND
33803: IFFALSE 33906
33805: GO 33807
33807: DISABLE
33808: LD_INT 0
33810: PPUSH
// begin for i := 1 to 5 do
33811: LD_ADDR_VAR 0 1
33815: PUSH
33816: DOUBLE
33817: LD_INT 1
33819: DEC
33820: ST_TO_ADDR
33821: LD_INT 5
33823: PUSH
33824: FOR_TO
33825: IFFALSE 33904
// begin uc_nation := nation_nature ;
33827: LD_ADDR_OWVAR 21
33831: PUSH
33832: LD_INT 0
33834: ST_TO_ADDR
// uc_side := 0 ;
33835: LD_ADDR_OWVAR 20
33839: PUSH
33840: LD_INT 0
33842: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
33843: LD_ADDR_OWVAR 29
33847: PUSH
33848: LD_INT 12
33850: PUSH
33851: LD_INT 12
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: ST_TO_ADDR
// hc_agressivity := 20 ;
33858: LD_ADDR_OWVAR 35
33862: PUSH
33863: LD_INT 20
33865: ST_TO_ADDR
// hc_class := class_tiger ;
33866: LD_ADDR_OWVAR 28
33870: PUSH
33871: LD_INT 14
33873: ST_TO_ADDR
// hc_gallery :=  ;
33874: LD_ADDR_OWVAR 33
33878: PUSH
33879: LD_STRING 
33881: ST_TO_ADDR
// hc_name :=  ;
33882: LD_ADDR_OWVAR 26
33886: PUSH
33887: LD_STRING 
33889: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
33890: CALL_OW 44
33894: PPUSH
33895: LD_INT 0
33897: PPUSH
33898: CALL_OW 51
// end ;
33902: GO 33824
33904: POP
33905: POP
// end ;
33906: PPOPN 1
33908: END
// every 0 0$1 trigger StreamModeActive and sBomb do
33909: LD_EXP 67
33913: PUSH
33914: LD_EXP 87
33918: AND
33919: IFFALSE 33928
33921: GO 33923
33923: DISABLE
// StreamSibBomb ;
33924: CALL 33929 0 0
33928: END
// export function StreamSibBomb ; var i , x , y ; begin
33929: LD_INT 0
33931: PPUSH
33932: PPUSH
33933: PPUSH
33934: PPUSH
// result := false ;
33935: LD_ADDR_VAR 0 1
33939: PUSH
33940: LD_INT 0
33942: ST_TO_ADDR
// for i := 1 to 16 do
33943: LD_ADDR_VAR 0 2
33947: PUSH
33948: DOUBLE
33949: LD_INT 1
33951: DEC
33952: ST_TO_ADDR
33953: LD_INT 16
33955: PUSH
33956: FOR_TO
33957: IFFALSE 34156
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
33959: LD_ADDR_VAR 0 3
33963: PUSH
33964: LD_INT 10
33966: PUSH
33967: LD_INT 20
33969: PUSH
33970: LD_INT 30
33972: PUSH
33973: LD_INT 40
33975: PUSH
33976: LD_INT 50
33978: PUSH
33979: LD_INT 60
33981: PUSH
33982: LD_INT 70
33984: PUSH
33985: LD_INT 80
33987: PUSH
33988: LD_INT 90
33990: PUSH
33991: LD_INT 100
33993: PUSH
33994: LD_INT 110
33996: PUSH
33997: LD_INT 120
33999: PUSH
34000: LD_INT 130
34002: PUSH
34003: LD_INT 140
34005: PUSH
34006: LD_INT 150
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 1
34028: PPUSH
34029: LD_INT 15
34031: PPUSH
34032: CALL_OW 12
34036: ARRAY
34037: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
34038: LD_ADDR_VAR 0 4
34042: PUSH
34043: LD_INT 10
34045: PUSH
34046: LD_INT 20
34048: PUSH
34049: LD_INT 30
34051: PUSH
34052: LD_INT 40
34054: PUSH
34055: LD_INT 50
34057: PUSH
34058: LD_INT 60
34060: PUSH
34061: LD_INT 70
34063: PUSH
34064: LD_INT 80
34066: PUSH
34067: LD_INT 90
34069: PUSH
34070: LD_INT 100
34072: PUSH
34073: LD_INT 110
34075: PUSH
34076: LD_INT 120
34078: PUSH
34079: LD_INT 130
34081: PUSH
34082: LD_INT 140
34084: PUSH
34085: LD_INT 150
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: PPUSH
34108: LD_INT 15
34110: PPUSH
34111: CALL_OW 12
34115: ARRAY
34116: ST_TO_ADDR
// if ValidHex ( x , y ) then
34117: LD_VAR 0 3
34121: PPUSH
34122: LD_VAR 0 4
34126: PPUSH
34127: CALL_OW 488
34131: IFFALSE 34154
// begin result := [ x , y ] ;
34133: LD_ADDR_VAR 0 1
34137: PUSH
34138: LD_VAR 0 3
34142: PUSH
34143: LD_VAR 0 4
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: ST_TO_ADDR
// break ;
34152: GO 34156
// end ; end ;
34154: GO 33956
34156: POP
34157: POP
// if result then
34158: LD_VAR 0 1
34162: IFFALSE 34222
// begin ToLua ( playSibBomb() ) ;
34164: LD_STRING playSibBomb()
34166: PPUSH
34167: CALL_OW 559
// wait ( 0 0$14 ) ;
34171: LD_INT 490
34173: PPUSH
34174: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
34178: LD_VAR 0 1
34182: PUSH
34183: LD_INT 1
34185: ARRAY
34186: PPUSH
34187: LD_VAR 0 1
34191: PUSH
34192: LD_INT 2
34194: ARRAY
34195: PPUSH
34196: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
34200: LD_VAR 0 1
34204: PUSH
34205: LD_INT 1
34207: ARRAY
34208: PPUSH
34209: LD_VAR 0 1
34213: PUSH
34214: LD_INT 2
34216: ARRAY
34217: PPUSH
34218: CALL_OW 429
// end ; end ;
34222: LD_VAR 0 1
34226: RET
// every 0 0$1 trigger StreamModeActive and sReset do
34227: LD_EXP 67
34231: PUSH
34232: LD_EXP 89
34236: AND
34237: IFFALSE 34249
34239: GO 34241
34241: DISABLE
// YouLost (  ) ;
34242: LD_STRING 
34244: PPUSH
34245: CALL_OW 104
34249: END
// every 0 0$1 trigger StreamModeActive and sFog do
34250: LD_EXP 67
34254: PUSH
34255: LD_EXP 88
34259: AND
34260: IFFALSE 34274
34262: GO 34264
34264: DISABLE
// FogOff ( your_side ) ;
34265: LD_OWVAR 2
34269: PPUSH
34270: CALL_OW 344
34274: END
// every 0 0$1 trigger StreamModeActive and sSun do
34275: LD_EXP 67
34279: PUSH
34280: LD_EXP 90
34284: AND
34285: IFFALSE 34313
34287: GO 34289
34289: DISABLE
// begin solar_recharge_percent := 0 ;
34290: LD_ADDR_OWVAR 79
34294: PUSH
34295: LD_INT 0
34297: ST_TO_ADDR
// wait ( 5 5$00 ) ;
34298: LD_INT 10500
34300: PPUSH
34301: CALL_OW 67
// solar_recharge_percent := 100 ;
34305: LD_ADDR_OWVAR 79
34309: PUSH
34310: LD_INT 100
34312: ST_TO_ADDR
// end ;
34313: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
34314: LD_EXP 67
34318: PUSH
34319: LD_EXP 91
34323: AND
34324: IFFALSE 34563
34326: GO 34328
34328: DISABLE
34329: LD_INT 0
34331: PPUSH
34332: PPUSH
34333: PPUSH
// begin tmp := [ ] ;
34334: LD_ADDR_VAR 0 3
34338: PUSH
34339: EMPTY
34340: ST_TO_ADDR
// for i := 1 to 6 do
34341: LD_ADDR_VAR 0 1
34345: PUSH
34346: DOUBLE
34347: LD_INT 1
34349: DEC
34350: ST_TO_ADDR
34351: LD_INT 6
34353: PUSH
34354: FOR_TO
34355: IFFALSE 34460
// begin uc_nation := nation_nature ;
34357: LD_ADDR_OWVAR 21
34361: PUSH
34362: LD_INT 0
34364: ST_TO_ADDR
// uc_side := 0 ;
34365: LD_ADDR_OWVAR 20
34369: PUSH
34370: LD_INT 0
34372: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34373: LD_ADDR_OWVAR 29
34377: PUSH
34378: LD_INT 12
34380: PUSH
34381: LD_INT 12
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: ST_TO_ADDR
// hc_agressivity := 20 ;
34388: LD_ADDR_OWVAR 35
34392: PUSH
34393: LD_INT 20
34395: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
34396: LD_ADDR_OWVAR 28
34400: PUSH
34401: LD_INT 17
34403: ST_TO_ADDR
// hc_gallery :=  ;
34404: LD_ADDR_OWVAR 33
34408: PUSH
34409: LD_STRING 
34411: ST_TO_ADDR
// hc_name :=  ;
34412: LD_ADDR_OWVAR 26
34416: PUSH
34417: LD_STRING 
34419: ST_TO_ADDR
// un := CreateHuman ;
34420: LD_ADDR_VAR 0 2
34424: PUSH
34425: CALL_OW 44
34429: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
34430: LD_VAR 0 2
34434: PPUSH
34435: LD_INT 1
34437: PPUSH
34438: CALL_OW 51
// tmp := tmp ^ un ;
34442: LD_ADDR_VAR 0 3
34446: PUSH
34447: LD_VAR 0 3
34451: PUSH
34452: LD_VAR 0 2
34456: ADD
34457: ST_TO_ADDR
// end ;
34458: GO 34354
34460: POP
34461: POP
// repeat wait ( 0 0$1 ) ;
34462: LD_INT 35
34464: PPUSH
34465: CALL_OW 67
// for un in tmp do
34469: LD_ADDR_VAR 0 2
34473: PUSH
34474: LD_VAR 0 3
34478: PUSH
34479: FOR_IN
34480: IFFALSE 34554
// begin if IsDead ( un ) then
34482: LD_VAR 0 2
34486: PPUSH
34487: CALL_OW 301
34491: IFFALSE 34511
// begin tmp := tmp diff un ;
34493: LD_ADDR_VAR 0 3
34497: PUSH
34498: LD_VAR 0 3
34502: PUSH
34503: LD_VAR 0 2
34507: DIFF
34508: ST_TO_ADDR
// continue ;
34509: GO 34479
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
34511: LD_VAR 0 2
34515: PPUSH
34516: LD_INT 3
34518: PUSH
34519: LD_INT 22
34521: PUSH
34522: LD_INT 0
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PPUSH
34533: CALL_OW 69
34537: PPUSH
34538: LD_VAR 0 2
34542: PPUSH
34543: CALL_OW 74
34547: PPUSH
34548: CALL_OW 115
// end ;
34552: GO 34479
34554: POP
34555: POP
// until not tmp ;
34556: LD_VAR 0 3
34560: NOT
34561: IFFALSE 34462
// end ;
34563: PPOPN 3
34565: END
// every 0 0$1 trigger StreamModeActive and sTroll do
34566: LD_EXP 67
34570: PUSH
34571: LD_EXP 92
34575: AND
34576: IFFALSE 34630
34578: GO 34580
34580: DISABLE
// begin ToLua ( displayTroll(); ) ;
34581: LD_STRING displayTroll();
34583: PPUSH
34584: CALL_OW 559
// wait ( 3 3$00 ) ;
34588: LD_INT 6300
34590: PPUSH
34591: CALL_OW 67
// ToLua ( hideTroll(); ) ;
34595: LD_STRING hideTroll();
34597: PPUSH
34598: CALL_OW 559
// wait ( 1 1$00 ) ;
34602: LD_INT 2100
34604: PPUSH
34605: CALL_OW 67
// ToLua ( displayTroll(); ) ;
34609: LD_STRING displayTroll();
34611: PPUSH
34612: CALL_OW 559
// wait ( 1 1$00 ) ;
34616: LD_INT 2100
34618: PPUSH
34619: CALL_OW 67
// ToLua ( hideTroll(); ) ;
34623: LD_STRING hideTroll();
34625: PPUSH
34626: CALL_OW 559
// end ;
34630: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
34631: LD_EXP 67
34635: PUSH
34636: LD_EXP 93
34640: AND
34641: IFFALSE 34704
34643: GO 34645
34645: DISABLE
34646: LD_INT 0
34648: PPUSH
// begin p := 0 ;
34649: LD_ADDR_VAR 0 1
34653: PUSH
34654: LD_INT 0
34656: ST_TO_ADDR
// repeat game_speed := 1 ;
34657: LD_ADDR_OWVAR 65
34661: PUSH
34662: LD_INT 1
34664: ST_TO_ADDR
// wait ( 0 0$1 ) ;
34665: LD_INT 35
34667: PPUSH
34668: CALL_OW 67
// p := p + 1 ;
34672: LD_ADDR_VAR 0 1
34676: PUSH
34677: LD_VAR 0 1
34681: PUSH
34682: LD_INT 1
34684: PLUS
34685: ST_TO_ADDR
// until p >= 60 ;
34686: LD_VAR 0 1
34690: PUSH
34691: LD_INT 60
34693: GREATEREQUAL
34694: IFFALSE 34657
// game_speed := 4 ;
34696: LD_ADDR_OWVAR 65
34700: PUSH
34701: LD_INT 4
34703: ST_TO_ADDR
// end ;
34704: PPOPN 1
34706: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
34707: LD_EXP 67
34711: PUSH
34712: LD_EXP 94
34716: AND
34717: IFFALSE 34863
34719: GO 34721
34721: DISABLE
34722: LD_INT 0
34724: PPUSH
34725: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34726: LD_ADDR_VAR 0 1
34730: PUSH
34731: LD_INT 22
34733: PUSH
34734: LD_OWVAR 2
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 2
34745: PUSH
34746: LD_INT 30
34748: PUSH
34749: LD_INT 0
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 30
34758: PUSH
34759: LD_INT 1
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: LIST
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PPUSH
34775: CALL_OW 69
34779: ST_TO_ADDR
// if not depot then
34780: LD_VAR 0 1
34784: NOT
34785: IFFALSE 34789
// exit ;
34787: GO 34863
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
34789: LD_ADDR_VAR 0 2
34793: PUSH
34794: LD_VAR 0 1
34798: PUSH
34799: LD_INT 1
34801: PPUSH
34802: LD_VAR 0 1
34806: PPUSH
34807: CALL_OW 12
34811: ARRAY
34812: PPUSH
34813: CALL_OW 274
34817: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
34818: LD_VAR 0 2
34822: PPUSH
34823: LD_INT 1
34825: PPUSH
34826: LD_INT 0
34828: PPUSH
34829: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
34833: LD_VAR 0 2
34837: PPUSH
34838: LD_INT 2
34840: PPUSH
34841: LD_INT 0
34843: PPUSH
34844: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
34848: LD_VAR 0 2
34852: PPUSH
34853: LD_INT 3
34855: PPUSH
34856: LD_INT 0
34858: PPUSH
34859: CALL_OW 277
// end ;
34863: PPOPN 2
34865: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
34866: LD_EXP 67
34870: PUSH
34871: LD_EXP 95
34875: AND
34876: IFFALSE 34973
34878: GO 34880
34880: DISABLE
34881: LD_INT 0
34883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34884: LD_ADDR_VAR 0 1
34888: PUSH
34889: LD_INT 22
34891: PUSH
34892: LD_OWVAR 2
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 21
34903: PUSH
34904: LD_INT 1
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 3
34913: PUSH
34914: LD_INT 23
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: LIST
34932: PPUSH
34933: CALL_OW 69
34937: ST_TO_ADDR
// if not tmp then
34938: LD_VAR 0 1
34942: NOT
34943: IFFALSE 34947
// exit ;
34945: GO 34973
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
34947: LD_VAR 0 1
34951: PUSH
34952: LD_INT 1
34954: PPUSH
34955: LD_VAR 0 1
34959: PPUSH
34960: CALL_OW 12
34964: ARRAY
34965: PPUSH
34966: LD_INT 200
34968: PPUSH
34969: CALL_OW 234
// end ;
34973: PPOPN 1
34975: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
34976: LD_EXP 67
34980: PUSH
34981: LD_EXP 96
34985: AND
34986: IFFALSE 35065
34988: GO 34990
34990: DISABLE
34991: LD_INT 0
34993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
34994: LD_ADDR_VAR 0 1
34998: PUSH
34999: LD_INT 22
35001: PUSH
35002: LD_OWVAR 2
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 21
35013: PUSH
35014: LD_INT 2
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PPUSH
35025: CALL_OW 69
35029: ST_TO_ADDR
// if not tmp then
35030: LD_VAR 0 1
35034: NOT
35035: IFFALSE 35039
// exit ;
35037: GO 35065
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
35039: LD_VAR 0 1
35043: PUSH
35044: LD_INT 1
35046: PPUSH
35047: LD_VAR 0 1
35051: PPUSH
35052: CALL_OW 12
35056: ARRAY
35057: PPUSH
35058: LD_INT 60
35060: PPUSH
35061: CALL_OW 234
// end ;
35065: PPOPN 1
35067: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
35068: LD_EXP 67
35072: PUSH
35073: LD_EXP 97
35077: AND
35078: IFFALSE 35177
35080: GO 35082
35082: DISABLE
35083: LD_INT 0
35085: PPUSH
35086: PPUSH
// begin enable ;
35087: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
35088: LD_ADDR_VAR 0 1
35092: PUSH
35093: LD_INT 22
35095: PUSH
35096: LD_OWVAR 2
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 61
35107: PUSH
35108: EMPTY
35109: LIST
35110: PUSH
35111: LD_INT 33
35113: PUSH
35114: LD_INT 2
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: LIST
35125: PPUSH
35126: CALL_OW 69
35130: ST_TO_ADDR
// if not tmp then
35131: LD_VAR 0 1
35135: NOT
35136: IFFALSE 35140
// exit ;
35138: GO 35177
// for i in tmp do
35140: LD_ADDR_VAR 0 2
35144: PUSH
35145: LD_VAR 0 1
35149: PUSH
35150: FOR_IN
35151: IFFALSE 35175
// if IsControledBy ( i ) then
35153: LD_VAR 0 2
35157: PPUSH
35158: CALL_OW 312
35162: IFFALSE 35173
// ComUnlink ( i ) ;
35164: LD_VAR 0 2
35168: PPUSH
35169: CALL_OW 136
35173: GO 35150
35175: POP
35176: POP
// end ;
35177: PPOPN 2
35179: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
35180: LD_EXP 67
35184: PUSH
35185: LD_EXP 98
35189: AND
35190: IFFALSE 35330
35192: GO 35194
35194: DISABLE
35195: LD_INT 0
35197: PPUSH
35198: PPUSH
// begin ToLua ( displayPowell(); ) ;
35199: LD_STRING displayPowell();
35201: PPUSH
35202: CALL_OW 559
// uc_side := 0 ;
35206: LD_ADDR_OWVAR 20
35210: PUSH
35211: LD_INT 0
35213: ST_TO_ADDR
// uc_nation := 2 ;
35214: LD_ADDR_OWVAR 21
35218: PUSH
35219: LD_INT 2
35221: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
35222: LD_ADDR_OWVAR 37
35226: PUSH
35227: LD_INT 14
35229: ST_TO_ADDR
// vc_engine := engine_siberite ;
35230: LD_ADDR_OWVAR 39
35234: PUSH
35235: LD_INT 3
35237: ST_TO_ADDR
// vc_control := control_apeman ;
35238: LD_ADDR_OWVAR 38
35242: PUSH
35243: LD_INT 5
35245: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
35246: LD_ADDR_OWVAR 40
35250: PUSH
35251: LD_INT 29
35253: ST_TO_ADDR
// un := CreateVehicle ;
35254: LD_ADDR_VAR 0 2
35258: PUSH
35259: CALL_OW 45
35263: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35264: LD_VAR 0 2
35268: PPUSH
35269: LD_INT 1
35271: PPUSH
35272: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
35276: LD_INT 35
35278: PPUSH
35279: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
35283: LD_VAR 0 2
35287: PPUSH
35288: LD_INT 22
35290: PUSH
35291: LD_OWVAR 2
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PPUSH
35300: CALL_OW 69
35304: PPUSH
35305: LD_VAR 0 2
35309: PPUSH
35310: CALL_OW 74
35314: PPUSH
35315: CALL_OW 115
// until IsDead ( un ) ;
35319: LD_VAR 0 2
35323: PPUSH
35324: CALL_OW 301
35328: IFFALSE 35276
// end ;
35330: PPOPN 2
35332: END
// every 0 0$1 trigger StreamModeActive and sStu do
35333: LD_EXP 67
35337: PUSH
35338: LD_EXP 106
35342: AND
35343: IFFALSE 35359
35345: GO 35347
35347: DISABLE
// begin ToLua ( displayStucuk(); ) ;
35348: LD_STRING displayStucuk();
35350: PPUSH
35351: CALL_OW 559
// ResetFog ;
35355: CALL_OW 335
// end ;
35359: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
35360: LD_EXP 67
35364: PUSH
35365: LD_EXP 99
35369: AND
35370: IFFALSE 35511
35372: GO 35374
35374: DISABLE
35375: LD_INT 0
35377: PPUSH
35378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35379: LD_ADDR_VAR 0 2
35383: PUSH
35384: LD_INT 22
35386: PUSH
35387: LD_OWVAR 2
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 21
35398: PUSH
35399: LD_INT 1
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PPUSH
35410: CALL_OW 69
35414: ST_TO_ADDR
// if not tmp then
35415: LD_VAR 0 2
35419: NOT
35420: IFFALSE 35424
// exit ;
35422: GO 35511
// un := tmp [ rand ( 1 , tmp ) ] ;
35424: LD_ADDR_VAR 0 1
35428: PUSH
35429: LD_VAR 0 2
35433: PUSH
35434: LD_INT 1
35436: PPUSH
35437: LD_VAR 0 2
35441: PPUSH
35442: CALL_OW 12
35446: ARRAY
35447: ST_TO_ADDR
// SetSide ( un , 0 ) ;
35448: LD_VAR 0 1
35452: PPUSH
35453: LD_INT 0
35455: PPUSH
35456: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
35460: LD_VAR 0 1
35464: PPUSH
35465: LD_OWVAR 3
35469: PUSH
35470: LD_VAR 0 1
35474: DIFF
35475: PPUSH
35476: LD_VAR 0 1
35480: PPUSH
35481: CALL_OW 74
35485: PPUSH
35486: CALL_OW 115
// wait ( 0 0$20 ) ;
35490: LD_INT 700
35492: PPUSH
35493: CALL_OW 67
// SetSide ( un , your_side ) ;
35497: LD_VAR 0 1
35501: PPUSH
35502: LD_OWVAR 2
35506: PPUSH
35507: CALL_OW 235
// end ;
35511: PPOPN 2
35513: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
35514: LD_EXP 67
35518: PUSH
35519: LD_EXP 100
35523: AND
35524: IFFALSE 35630
35526: GO 35528
35528: DISABLE
35529: LD_INT 0
35531: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35532: LD_ADDR_VAR 0 1
35536: PUSH
35537: LD_INT 22
35539: PUSH
35540: LD_OWVAR 2
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 2
35551: PUSH
35552: LD_INT 30
35554: PUSH
35555: LD_INT 0
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 30
35564: PUSH
35565: LD_INT 1
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: LIST
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PPUSH
35581: CALL_OW 69
35585: ST_TO_ADDR
// if not depot then
35586: LD_VAR 0 1
35590: NOT
35591: IFFALSE 35595
// exit ;
35593: GO 35630
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
35595: LD_VAR 0 1
35599: PUSH
35600: LD_INT 1
35602: ARRAY
35603: PPUSH
35604: CALL_OW 250
35608: PPUSH
35609: LD_VAR 0 1
35613: PUSH
35614: LD_INT 1
35616: ARRAY
35617: PPUSH
35618: CALL_OW 251
35622: PPUSH
35623: LD_INT 70
35625: PPUSH
35626: CALL_OW 495
// end ;
35630: PPOPN 1
35632: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
35633: LD_EXP 67
35637: PUSH
35638: LD_EXP 101
35642: AND
35643: IFFALSE 35854
35645: GO 35647
35647: DISABLE
35648: LD_INT 0
35650: PPUSH
35651: PPUSH
35652: PPUSH
35653: PPUSH
35654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35655: LD_ADDR_VAR 0 5
35659: PUSH
35660: LD_INT 22
35662: PUSH
35663: LD_OWVAR 2
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 21
35674: PUSH
35675: LD_INT 1
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PPUSH
35686: CALL_OW 69
35690: ST_TO_ADDR
// if not tmp then
35691: LD_VAR 0 5
35695: NOT
35696: IFFALSE 35700
// exit ;
35698: GO 35854
// for i in tmp do
35700: LD_ADDR_VAR 0 1
35704: PUSH
35705: LD_VAR 0 5
35709: PUSH
35710: FOR_IN
35711: IFFALSE 35852
// begin d := rand ( 0 , 5 ) ;
35713: LD_ADDR_VAR 0 4
35717: PUSH
35718: LD_INT 0
35720: PPUSH
35721: LD_INT 5
35723: PPUSH
35724: CALL_OW 12
35728: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
35729: LD_ADDR_VAR 0 2
35733: PUSH
35734: LD_VAR 0 1
35738: PPUSH
35739: CALL_OW 250
35743: PPUSH
35744: LD_VAR 0 4
35748: PPUSH
35749: LD_INT 3
35751: PPUSH
35752: LD_INT 12
35754: PPUSH
35755: CALL_OW 12
35759: PPUSH
35760: CALL_OW 272
35764: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
35765: LD_ADDR_VAR 0 3
35769: PUSH
35770: LD_VAR 0 1
35774: PPUSH
35775: CALL_OW 251
35779: PPUSH
35780: LD_VAR 0 4
35784: PPUSH
35785: LD_INT 3
35787: PPUSH
35788: LD_INT 12
35790: PPUSH
35791: CALL_OW 12
35795: PPUSH
35796: CALL_OW 273
35800: ST_TO_ADDR
// if ValidHex ( x , y ) then
35801: LD_VAR 0 2
35805: PPUSH
35806: LD_VAR 0 3
35810: PPUSH
35811: CALL_OW 488
35815: IFFALSE 35850
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
35817: LD_VAR 0 1
35821: PPUSH
35822: LD_VAR 0 2
35826: PPUSH
35827: LD_VAR 0 3
35831: PPUSH
35832: LD_INT 3
35834: PPUSH
35835: LD_INT 6
35837: PPUSH
35838: CALL_OW 12
35842: PPUSH
35843: LD_INT 1
35845: PPUSH
35846: CALL_OW 483
// end ;
35850: GO 35710
35852: POP
35853: POP
// end ;
35854: PPOPN 5
35856: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
35857: LD_EXP 67
35861: PUSH
35862: LD_EXP 102
35866: AND
35867: IFFALSE 35961
35869: GO 35871
35871: DISABLE
35872: LD_INT 0
35874: PPUSH
35875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
35876: LD_ADDR_VAR 0 2
35880: PUSH
35881: LD_INT 22
35883: PUSH
35884: LD_OWVAR 2
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 32
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 21
35905: PUSH
35906: LD_INT 2
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: LIST
35917: PPUSH
35918: CALL_OW 69
35922: ST_TO_ADDR
// if not tmp then
35923: LD_VAR 0 2
35927: NOT
35928: IFFALSE 35932
// exit ;
35930: GO 35961
// for i in tmp do
35932: LD_ADDR_VAR 0 1
35936: PUSH
35937: LD_VAR 0 2
35941: PUSH
35942: FOR_IN
35943: IFFALSE 35959
// SetFuel ( i , 0 ) ;
35945: LD_VAR 0 1
35949: PPUSH
35950: LD_INT 0
35952: PPUSH
35953: CALL_OW 240
35957: GO 35942
35959: POP
35960: POP
// end ;
35961: PPOPN 2
35963: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
35964: LD_EXP 67
35968: PUSH
35969: LD_EXP 103
35973: AND
35974: IFFALSE 36040
35976: GO 35978
35978: DISABLE
35979: LD_INT 0
35981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
35982: LD_ADDR_VAR 0 1
35986: PUSH
35987: LD_INT 22
35989: PUSH
35990: LD_OWVAR 2
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 30
36001: PUSH
36002: LD_INT 29
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PPUSH
36013: CALL_OW 69
36017: ST_TO_ADDR
// if not tmp then
36018: LD_VAR 0 1
36022: NOT
36023: IFFALSE 36027
// exit ;
36025: GO 36040
// DestroyUnit ( tmp [ 1 ] ) ;
36027: LD_VAR 0 1
36031: PUSH
36032: LD_INT 1
36034: ARRAY
36035: PPUSH
36036: CALL_OW 65
// end ;
36040: PPOPN 1
36042: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
36043: LD_EXP 67
36047: PUSH
36048: LD_EXP 105
36052: AND
36053: IFFALSE 36182
36055: GO 36057
36057: DISABLE
36058: LD_INT 0
36060: PPUSH
// begin uc_side := 0 ;
36061: LD_ADDR_OWVAR 20
36065: PUSH
36066: LD_INT 0
36068: ST_TO_ADDR
// uc_nation := nation_arabian ;
36069: LD_ADDR_OWVAR 21
36073: PUSH
36074: LD_INT 2
36076: ST_TO_ADDR
// hc_gallery :=  ;
36077: LD_ADDR_OWVAR 33
36081: PUSH
36082: LD_STRING 
36084: ST_TO_ADDR
// hc_name :=  ;
36085: LD_ADDR_OWVAR 26
36089: PUSH
36090: LD_STRING 
36092: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
36093: LD_INT 1
36095: PPUSH
36096: LD_INT 11
36098: PPUSH
36099: LD_INT 10
36101: PPUSH
36102: CALL_OW 380
// un := CreateHuman ;
36106: LD_ADDR_VAR 0 1
36110: PUSH
36111: CALL_OW 44
36115: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36116: LD_VAR 0 1
36120: PPUSH
36121: LD_INT 1
36123: PPUSH
36124: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
36128: LD_INT 35
36130: PPUSH
36131: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36135: LD_VAR 0 1
36139: PPUSH
36140: LD_INT 22
36142: PUSH
36143: LD_OWVAR 2
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PPUSH
36152: CALL_OW 69
36156: PPUSH
36157: LD_VAR 0 1
36161: PPUSH
36162: CALL_OW 74
36166: PPUSH
36167: CALL_OW 115
// until IsDead ( un ) ;
36171: LD_VAR 0 1
36175: PPUSH
36176: CALL_OW 301
36180: IFFALSE 36128
// end ;
36182: PPOPN 1
36184: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
36185: LD_EXP 67
36189: PUSH
36190: LD_EXP 107
36194: AND
36195: IFFALSE 36207
36197: GO 36199
36199: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
36200: LD_STRING earthquake(getX(game), 0, 32)
36202: PPUSH
36203: CALL_OW 559
36207: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
36208: LD_EXP 67
36212: PUSH
36213: LD_EXP 108
36217: AND
36218: IFFALSE 36309
36220: GO 36222
36222: DISABLE
36223: LD_INT 0
36225: PPUSH
// begin enable ;
36226: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
36227: LD_ADDR_VAR 0 1
36231: PUSH
36232: LD_INT 22
36234: PUSH
36235: LD_OWVAR 2
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 21
36246: PUSH
36247: LD_INT 2
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 33
36256: PUSH
36257: LD_INT 3
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: LIST
36268: PPUSH
36269: CALL_OW 69
36273: ST_TO_ADDR
// if not tmp then
36274: LD_VAR 0 1
36278: NOT
36279: IFFALSE 36283
// exit ;
36281: GO 36309
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
36283: LD_VAR 0 1
36287: PUSH
36288: LD_INT 1
36290: PPUSH
36291: LD_VAR 0 1
36295: PPUSH
36296: CALL_OW 12
36300: ARRAY
36301: PPUSH
36302: LD_INT 1
36304: PPUSH
36305: CALL_OW 234
// end ;
36309: PPOPN 1
36311: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
36312: LD_EXP 67
36316: PUSH
36317: LD_EXP 109
36321: AND
36322: IFFALSE 36463
36324: GO 36326
36326: DISABLE
36327: LD_INT 0
36329: PPUSH
36330: PPUSH
36331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36332: LD_ADDR_VAR 0 3
36336: PUSH
36337: LD_INT 22
36339: PUSH
36340: LD_OWVAR 2
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 25
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PPUSH
36363: CALL_OW 69
36367: ST_TO_ADDR
// if not tmp then
36368: LD_VAR 0 3
36372: NOT
36373: IFFALSE 36377
// exit ;
36375: GO 36463
// un := tmp [ rand ( 1 , tmp ) ] ;
36377: LD_ADDR_VAR 0 2
36381: PUSH
36382: LD_VAR 0 3
36386: PUSH
36387: LD_INT 1
36389: PPUSH
36390: LD_VAR 0 3
36394: PPUSH
36395: CALL_OW 12
36399: ARRAY
36400: ST_TO_ADDR
// if Crawls ( un ) then
36401: LD_VAR 0 2
36405: PPUSH
36406: CALL_OW 318
36410: IFFALSE 36421
// ComWalk ( un ) ;
36412: LD_VAR 0 2
36416: PPUSH
36417: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
36421: LD_VAR 0 2
36425: PPUSH
36426: LD_INT 9
36428: PPUSH
36429: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
36433: LD_INT 28
36435: PPUSH
36436: LD_OWVAR 2
36440: PPUSH
36441: LD_INT 2
36443: PPUSH
36444: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
36448: LD_INT 29
36450: PPUSH
36451: LD_OWVAR 2
36455: PPUSH
36456: LD_INT 2
36458: PPUSH
36459: CALL_OW 322
// end ;
36463: PPOPN 3
36465: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
36466: LD_EXP 67
36470: PUSH
36471: LD_EXP 110
36475: AND
36476: IFFALSE 36587
36478: GO 36480
36480: DISABLE
36481: LD_INT 0
36483: PPUSH
36484: PPUSH
36485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36486: LD_ADDR_VAR 0 3
36490: PUSH
36491: LD_INT 22
36493: PUSH
36494: LD_OWVAR 2
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 25
36505: PUSH
36506: LD_INT 1
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PPUSH
36517: CALL_OW 69
36521: ST_TO_ADDR
// if not tmp then
36522: LD_VAR 0 3
36526: NOT
36527: IFFALSE 36531
// exit ;
36529: GO 36587
// un := tmp [ rand ( 1 , tmp ) ] ;
36531: LD_ADDR_VAR 0 2
36535: PUSH
36536: LD_VAR 0 3
36540: PUSH
36541: LD_INT 1
36543: PPUSH
36544: LD_VAR 0 3
36548: PPUSH
36549: CALL_OW 12
36553: ARRAY
36554: ST_TO_ADDR
// if Crawls ( un ) then
36555: LD_VAR 0 2
36559: PPUSH
36560: CALL_OW 318
36564: IFFALSE 36575
// ComWalk ( un ) ;
36566: LD_VAR 0 2
36570: PPUSH
36571: CALL_OW 138
// SetClass ( un , class_mortar ) ;
36575: LD_VAR 0 2
36579: PPUSH
36580: LD_INT 8
36582: PPUSH
36583: CALL_OW 336
// end ;
36587: PPOPN 3
36589: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
36590: LD_EXP 67
36594: PUSH
36595: LD_EXP 111
36599: AND
36600: IFFALSE 36744
36602: GO 36604
36604: DISABLE
36605: LD_INT 0
36607: PPUSH
36608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
36609: LD_ADDR_VAR 0 2
36613: PUSH
36614: LD_INT 22
36616: PUSH
36617: LD_OWVAR 2
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 21
36628: PUSH
36629: LD_INT 2
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 2
36638: PUSH
36639: LD_INT 34
36641: PUSH
36642: LD_INT 12
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 34
36651: PUSH
36652: LD_INT 51
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 34
36661: PUSH
36662: LD_INT 32
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: LIST
36679: PPUSH
36680: CALL_OW 69
36684: ST_TO_ADDR
// if not tmp then
36685: LD_VAR 0 2
36689: NOT
36690: IFFALSE 36694
// exit ;
36692: GO 36744
// for i in tmp do
36694: LD_ADDR_VAR 0 1
36698: PUSH
36699: LD_VAR 0 2
36703: PUSH
36704: FOR_IN
36705: IFFALSE 36742
// if GetCargo ( i , mat_artifact ) = 0 then
36707: LD_VAR 0 1
36711: PPUSH
36712: LD_INT 4
36714: PPUSH
36715: CALL_OW 289
36719: PUSH
36720: LD_INT 0
36722: EQUAL
36723: IFFALSE 36740
// SetCargo ( i , mat_siberit , 100 ) ;
36725: LD_VAR 0 1
36729: PPUSH
36730: LD_INT 3
36732: PPUSH
36733: LD_INT 100
36735: PPUSH
36736: CALL_OW 290
36740: GO 36704
36742: POP
36743: POP
// end ;
36744: PPOPN 2
36746: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
36747: LD_EXP 67
36751: PUSH
36752: LD_EXP 112
36756: AND
36757: IFFALSE 36940
36759: GO 36761
36761: DISABLE
36762: LD_INT 0
36764: PPUSH
36765: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
36766: LD_ADDR_VAR 0 2
36770: PUSH
36771: LD_INT 22
36773: PUSH
36774: LD_OWVAR 2
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PPUSH
36783: CALL_OW 69
36787: ST_TO_ADDR
// if not tmp then
36788: LD_VAR 0 2
36792: NOT
36793: IFFALSE 36797
// exit ;
36795: GO 36940
// for i := 1 to 2 do
36797: LD_ADDR_VAR 0 1
36801: PUSH
36802: DOUBLE
36803: LD_INT 1
36805: DEC
36806: ST_TO_ADDR
36807: LD_INT 2
36809: PUSH
36810: FOR_TO
36811: IFFALSE 36938
// begin uc_side := your_side ;
36813: LD_ADDR_OWVAR 20
36817: PUSH
36818: LD_OWVAR 2
36822: ST_TO_ADDR
// uc_nation := nation_american ;
36823: LD_ADDR_OWVAR 21
36827: PUSH
36828: LD_INT 1
36830: ST_TO_ADDR
// vc_chassis := us_morphling ;
36831: LD_ADDR_OWVAR 37
36835: PUSH
36836: LD_INT 5
36838: ST_TO_ADDR
// vc_engine := engine_siberite ;
36839: LD_ADDR_OWVAR 39
36843: PUSH
36844: LD_INT 3
36846: ST_TO_ADDR
// vc_control := control_computer ;
36847: LD_ADDR_OWVAR 38
36851: PUSH
36852: LD_INT 3
36854: ST_TO_ADDR
// vc_weapon := us_double_laser ;
36855: LD_ADDR_OWVAR 40
36859: PUSH
36860: LD_INT 10
36862: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
36863: LD_VAR 0 2
36867: PUSH
36868: LD_INT 1
36870: ARRAY
36871: PPUSH
36872: CALL_OW 310
36876: NOT
36877: IFFALSE 36924
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
36879: CALL_OW 45
36883: PPUSH
36884: LD_VAR 0 2
36888: PUSH
36889: LD_INT 1
36891: ARRAY
36892: PPUSH
36893: CALL_OW 250
36897: PPUSH
36898: LD_VAR 0 2
36902: PUSH
36903: LD_INT 1
36905: ARRAY
36906: PPUSH
36907: CALL_OW 251
36911: PPUSH
36912: LD_INT 12
36914: PPUSH
36915: LD_INT 1
36917: PPUSH
36918: CALL_OW 50
36922: GO 36936
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
36924: CALL_OW 45
36928: PPUSH
36929: LD_INT 1
36931: PPUSH
36932: CALL_OW 51
// end ;
36936: GO 36810
36938: POP
36939: POP
// end ;
36940: PPOPN 2
36942: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
36943: LD_EXP 67
36947: PUSH
36948: LD_EXP 113
36952: AND
36953: IFFALSE 37175
36955: GO 36957
36957: DISABLE
36958: LD_INT 0
36960: PPUSH
36961: PPUSH
36962: PPUSH
36963: PPUSH
36964: PPUSH
36965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
36966: LD_ADDR_VAR 0 6
36970: PUSH
36971: LD_INT 22
36973: PUSH
36974: LD_OWVAR 2
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 21
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 3
36995: PUSH
36996: LD_INT 23
36998: PUSH
36999: LD_INT 0
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: LIST
37014: PPUSH
37015: CALL_OW 69
37019: ST_TO_ADDR
// if not tmp then
37020: LD_VAR 0 6
37024: NOT
37025: IFFALSE 37029
// exit ;
37027: GO 37175
// s1 := rand ( 1 , 4 ) ;
37029: LD_ADDR_VAR 0 2
37033: PUSH
37034: LD_INT 1
37036: PPUSH
37037: LD_INT 4
37039: PPUSH
37040: CALL_OW 12
37044: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
37045: LD_ADDR_VAR 0 4
37049: PUSH
37050: LD_VAR 0 6
37054: PUSH
37055: LD_INT 1
37057: ARRAY
37058: PPUSH
37059: LD_VAR 0 2
37063: PPUSH
37064: CALL_OW 259
37068: ST_TO_ADDR
// if s1 = 1 then
37069: LD_VAR 0 2
37073: PUSH
37074: LD_INT 1
37076: EQUAL
37077: IFFALSE 37097
// s2 := rand ( 2 , 4 ) else
37079: LD_ADDR_VAR 0 3
37083: PUSH
37084: LD_INT 2
37086: PPUSH
37087: LD_INT 4
37089: PPUSH
37090: CALL_OW 12
37094: ST_TO_ADDR
37095: GO 37105
// s2 := 1 ;
37097: LD_ADDR_VAR 0 3
37101: PUSH
37102: LD_INT 1
37104: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
37105: LD_ADDR_VAR 0 5
37109: PUSH
37110: LD_VAR 0 6
37114: PUSH
37115: LD_INT 1
37117: ARRAY
37118: PPUSH
37119: LD_VAR 0 3
37123: PPUSH
37124: CALL_OW 259
37128: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
37129: LD_VAR 0 6
37133: PUSH
37134: LD_INT 1
37136: ARRAY
37137: PPUSH
37138: LD_VAR 0 2
37142: PPUSH
37143: LD_VAR 0 5
37147: PPUSH
37148: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
37152: LD_VAR 0 6
37156: PUSH
37157: LD_INT 1
37159: ARRAY
37160: PPUSH
37161: LD_VAR 0 3
37165: PPUSH
37166: LD_VAR 0 4
37170: PPUSH
37171: CALL_OW 237
// end ;
37175: PPOPN 6
37177: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
37178: LD_EXP 67
37182: PUSH
37183: LD_EXP 114
37187: AND
37188: IFFALSE 37267
37190: GO 37192
37192: DISABLE
37193: LD_INT 0
37195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
37196: LD_ADDR_VAR 0 1
37200: PUSH
37201: LD_INT 22
37203: PUSH
37204: LD_OWVAR 2
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 30
37215: PUSH
37216: LD_INT 3
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PPUSH
37227: CALL_OW 69
37231: ST_TO_ADDR
// if not tmp then
37232: LD_VAR 0 1
37236: NOT
37237: IFFALSE 37241
// exit ;
37239: GO 37267
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37241: LD_VAR 0 1
37245: PUSH
37246: LD_INT 1
37248: PPUSH
37249: LD_VAR 0 1
37253: PPUSH
37254: CALL_OW 12
37258: ARRAY
37259: PPUSH
37260: LD_INT 1
37262: PPUSH
37263: CALL_OW 234
// end ;
37267: PPOPN 1
37269: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
37270: LD_EXP 67
37274: PUSH
37275: LD_EXP 115
37279: AND
37280: IFFALSE 37392
37282: GO 37284
37284: DISABLE
37285: LD_INT 0
37287: PPUSH
37288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
37289: LD_ADDR_VAR 0 2
37293: PUSH
37294: LD_INT 22
37296: PUSH
37297: LD_OWVAR 2
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 2
37308: PUSH
37309: LD_INT 30
37311: PUSH
37312: LD_INT 27
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 30
37321: PUSH
37322: LD_INT 26
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 30
37331: PUSH
37332: LD_INT 28
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PPUSH
37349: CALL_OW 69
37353: ST_TO_ADDR
// if not tmp then
37354: LD_VAR 0 2
37358: NOT
37359: IFFALSE 37363
// exit ;
37361: GO 37392
// for i in tmp do
37363: LD_ADDR_VAR 0 1
37367: PUSH
37368: LD_VAR 0 2
37372: PUSH
37373: FOR_IN
37374: IFFALSE 37390
// SetLives ( i , 1 ) ;
37376: LD_VAR 0 1
37380: PPUSH
37381: LD_INT 1
37383: PPUSH
37384: CALL_OW 234
37388: GO 37373
37390: POP
37391: POP
// end ;
37392: PPOPN 2
37394: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
37395: LD_EXP 67
37399: PUSH
37400: LD_EXP 116
37404: AND
37405: IFFALSE 37679
37407: GO 37409
37409: DISABLE
37410: LD_INT 0
37412: PPUSH
37413: PPUSH
37414: PPUSH
// begin i := rand ( 1 , 7 ) ;
37415: LD_ADDR_VAR 0 1
37419: PUSH
37420: LD_INT 1
37422: PPUSH
37423: LD_INT 7
37425: PPUSH
37426: CALL_OW 12
37430: ST_TO_ADDR
// case i of 1 :
37431: LD_VAR 0 1
37435: PUSH
37436: LD_INT 1
37438: DOUBLE
37439: EQUAL
37440: IFTRUE 37444
37442: GO 37454
37444: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
37445: LD_STRING earthquake(getX(game), 0, 32)
37447: PPUSH
37448: CALL_OW 559
37452: GO 37679
37454: LD_INT 2
37456: DOUBLE
37457: EQUAL
37458: IFTRUE 37462
37460: GO 37476
37462: POP
// begin ToLua ( displayStucuk(); ) ;
37463: LD_STRING displayStucuk();
37465: PPUSH
37466: CALL_OW 559
// ResetFog ;
37470: CALL_OW 335
// end ; 3 :
37474: GO 37679
37476: LD_INT 3
37478: DOUBLE
37479: EQUAL
37480: IFTRUE 37484
37482: GO 37588
37484: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37485: LD_ADDR_VAR 0 2
37489: PUSH
37490: LD_INT 22
37492: PUSH
37493: LD_OWVAR 2
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 25
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PPUSH
37516: CALL_OW 69
37520: ST_TO_ADDR
// if not tmp then
37521: LD_VAR 0 2
37525: NOT
37526: IFFALSE 37530
// exit ;
37528: GO 37679
// un := tmp [ rand ( 1 , tmp ) ] ;
37530: LD_ADDR_VAR 0 3
37534: PUSH
37535: LD_VAR 0 2
37539: PUSH
37540: LD_INT 1
37542: PPUSH
37543: LD_VAR 0 2
37547: PPUSH
37548: CALL_OW 12
37552: ARRAY
37553: ST_TO_ADDR
// if Crawls ( un ) then
37554: LD_VAR 0 3
37558: PPUSH
37559: CALL_OW 318
37563: IFFALSE 37574
// ComWalk ( un ) ;
37565: LD_VAR 0 3
37569: PPUSH
37570: CALL_OW 138
// SetClass ( un , class_mortar ) ;
37574: LD_VAR 0 3
37578: PPUSH
37579: LD_INT 8
37581: PPUSH
37582: CALL_OW 336
// end ; 4 :
37586: GO 37679
37588: LD_INT 4
37590: DOUBLE
37591: EQUAL
37592: IFTRUE 37596
37594: GO 37657
37596: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
37597: LD_ADDR_VAR 0 2
37601: PUSH
37602: LD_INT 22
37604: PUSH
37605: LD_OWVAR 2
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 30
37616: PUSH
37617: LD_INT 29
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PPUSH
37628: CALL_OW 69
37632: ST_TO_ADDR
// if not tmp then
37633: LD_VAR 0 2
37637: NOT
37638: IFFALSE 37642
// exit ;
37640: GO 37679
// DestroyUnit ( tmp [ 1 ] ) ;
37642: LD_VAR 0 2
37646: PUSH
37647: LD_INT 1
37649: ARRAY
37650: PPUSH
37651: CALL_OW 65
// end ; 5 .. 7 :
37655: GO 37679
37657: LD_INT 5
37659: DOUBLE
37660: GREATEREQUAL
37661: IFFALSE 37669
37663: LD_INT 7
37665: DOUBLE
37666: LESSEQUAL
37667: IFTRUE 37671
37669: GO 37678
37671: POP
// StreamSibBomb ; end ;
37672: CALL 33929 0 0
37676: GO 37679
37678: POP
// end ;
37679: PPOPN 3
37681: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
37682: LD_EXP 67
37686: PUSH
37687: LD_EXP 117
37691: AND
37692: IFFALSE 37848
37694: GO 37696
37696: DISABLE
37697: LD_INT 0
37699: PPUSH
37700: PPUSH
37701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
37702: LD_ADDR_VAR 0 2
37706: PUSH
37707: LD_INT 81
37709: PUSH
37710: LD_OWVAR 2
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 2
37721: PUSH
37722: LD_INT 21
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 21
37734: PUSH
37735: LD_INT 2
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: LIST
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PPUSH
37751: CALL_OW 69
37755: ST_TO_ADDR
// if not tmp then
37756: LD_VAR 0 2
37760: NOT
37761: IFFALSE 37765
// exit ;
37763: GO 37848
// p := 0 ;
37765: LD_ADDR_VAR 0 3
37769: PUSH
37770: LD_INT 0
37772: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
37773: LD_INT 35
37775: PPUSH
37776: CALL_OW 67
// p := p + 1 ;
37780: LD_ADDR_VAR 0 3
37784: PUSH
37785: LD_VAR 0 3
37789: PUSH
37790: LD_INT 1
37792: PLUS
37793: ST_TO_ADDR
// for i in tmp do
37794: LD_ADDR_VAR 0 1
37798: PUSH
37799: LD_VAR 0 2
37803: PUSH
37804: FOR_IN
37805: IFFALSE 37836
// if GetLives ( i ) < 1000 then
37807: LD_VAR 0 1
37811: PPUSH
37812: CALL_OW 256
37816: PUSH
37817: LD_INT 1000
37819: LESS
37820: IFFALSE 37834
// SetLives ( i , 1000 ) ;
37822: LD_VAR 0 1
37826: PPUSH
37827: LD_INT 1000
37829: PPUSH
37830: CALL_OW 234
37834: GO 37804
37836: POP
37837: POP
// until p > 20 ;
37838: LD_VAR 0 3
37842: PUSH
37843: LD_INT 20
37845: GREATER
37846: IFFALSE 37773
// end ;
37848: PPOPN 3
37850: END
// every 0 0$1 trigger StreamModeActive and sTime do
37851: LD_EXP 67
37855: PUSH
37856: LD_EXP 118
37860: AND
37861: IFFALSE 37896
37863: GO 37865
37865: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
37866: LD_INT 28
37868: PPUSH
37869: LD_OWVAR 2
37873: PPUSH
37874: LD_INT 2
37876: PPUSH
37877: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
37881: LD_INT 30
37883: PPUSH
37884: LD_OWVAR 2
37888: PPUSH
37889: LD_INT 2
37891: PPUSH
37892: CALL_OW 322
// end ;
37896: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
37897: LD_EXP 67
37901: PUSH
37902: LD_EXP 119
37906: AND
37907: IFFALSE 38028
37909: GO 37911
37911: DISABLE
37912: LD_INT 0
37914: PPUSH
37915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37916: LD_ADDR_VAR 0 2
37920: PUSH
37921: LD_INT 22
37923: PUSH
37924: LD_OWVAR 2
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 21
37935: PUSH
37936: LD_INT 1
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 3
37945: PUSH
37946: LD_INT 23
37948: PUSH
37949: LD_INT 0
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: LIST
37964: PPUSH
37965: CALL_OW 69
37969: ST_TO_ADDR
// if not tmp then
37970: LD_VAR 0 2
37974: NOT
37975: IFFALSE 37979
// exit ;
37977: GO 38028
// for i in tmp do
37979: LD_ADDR_VAR 0 1
37983: PUSH
37984: LD_VAR 0 2
37988: PUSH
37989: FOR_IN
37990: IFFALSE 38026
// begin if Crawls ( i ) then
37992: LD_VAR 0 1
37996: PPUSH
37997: CALL_OW 318
38001: IFFALSE 38012
// ComWalk ( i ) ;
38003: LD_VAR 0 1
38007: PPUSH
38008: CALL_OW 138
// SetClass ( i , 2 ) ;
38012: LD_VAR 0 1
38016: PPUSH
38017: LD_INT 2
38019: PPUSH
38020: CALL_OW 336
// end ;
38024: GO 37989
38026: POP
38027: POP
// end ;
38028: PPOPN 2
38030: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
38031: LD_EXP 67
38035: PUSH
38036: LD_EXP 120
38040: AND
38041: IFFALSE 38322
38043: GO 38045
38045: DISABLE
38046: LD_INT 0
38048: PPUSH
38049: PPUSH
38050: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
38051: LD_OWVAR 2
38055: PPUSH
38056: LD_INT 9
38058: PPUSH
38059: LD_INT 1
38061: PPUSH
38062: LD_INT 1
38064: PPUSH
38065: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
38069: LD_INT 9
38071: PPUSH
38072: LD_OWVAR 2
38076: PPUSH
38077: CALL_OW 343
// uc_side := 9 ;
38081: LD_ADDR_OWVAR 20
38085: PUSH
38086: LD_INT 9
38088: ST_TO_ADDR
// uc_nation := 2 ;
38089: LD_ADDR_OWVAR 21
38093: PUSH
38094: LD_INT 2
38096: ST_TO_ADDR
// hc_name := Dark Warrior ;
38097: LD_ADDR_OWVAR 26
38101: PUSH
38102: LD_STRING Dark Warrior
38104: ST_TO_ADDR
// hc_gallery :=  ;
38105: LD_ADDR_OWVAR 33
38109: PUSH
38110: LD_STRING 
38112: ST_TO_ADDR
// hc_noskilllimit := true ;
38113: LD_ADDR_OWVAR 76
38117: PUSH
38118: LD_INT 1
38120: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
38121: LD_ADDR_OWVAR 31
38125: PUSH
38126: LD_INT 30
38128: PUSH
38129: LD_INT 30
38131: PUSH
38132: LD_INT 30
38134: PUSH
38135: LD_INT 30
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: ST_TO_ADDR
// un := CreateHuman ;
38144: LD_ADDR_VAR 0 3
38148: PUSH
38149: CALL_OW 44
38153: ST_TO_ADDR
// hc_noskilllimit := false ;
38154: LD_ADDR_OWVAR 76
38158: PUSH
38159: LD_INT 0
38161: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38162: LD_VAR 0 3
38166: PPUSH
38167: LD_INT 1
38169: PPUSH
38170: CALL_OW 51
// p := 0 ;
38174: LD_ADDR_VAR 0 2
38178: PUSH
38179: LD_INT 0
38181: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38182: LD_INT 35
38184: PPUSH
38185: CALL_OW 67
// p := p + 1 ;
38189: LD_ADDR_VAR 0 2
38193: PUSH
38194: LD_VAR 0 2
38198: PUSH
38199: LD_INT 1
38201: PLUS
38202: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
38203: LD_VAR 0 3
38207: PPUSH
38208: CALL_OW 256
38212: PUSH
38213: LD_INT 1000
38215: LESS
38216: IFFALSE 38230
// SetLives ( un , 1000 ) ;
38218: LD_VAR 0 3
38222: PPUSH
38223: LD_INT 1000
38225: PPUSH
38226: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
38230: LD_VAR 0 3
38234: PPUSH
38235: LD_INT 81
38237: PUSH
38238: LD_OWVAR 2
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 91
38249: PUSH
38250: LD_VAR 0 3
38254: PUSH
38255: LD_INT 30
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: LIST
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PPUSH
38267: CALL_OW 69
38271: PPUSH
38272: LD_VAR 0 3
38276: PPUSH
38277: CALL_OW 74
38281: PPUSH
38282: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
38286: LD_VAR 0 2
38290: PUSH
38291: LD_INT 60
38293: GREATER
38294: PUSH
38295: LD_VAR 0 3
38299: PPUSH
38300: CALL_OW 301
38304: OR
38305: IFFALSE 38182
// if un then
38307: LD_VAR 0 3
38311: IFFALSE 38322
// RemoveUnit ( un ) ;
38313: LD_VAR 0 3
38317: PPUSH
38318: CALL_OW 64
// end ;
38322: PPOPN 3
38324: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
38325: LD_INT 0
38327: PPUSH
// case cmd of 301 :
38328: LD_VAR 0 1
38332: PUSH
38333: LD_INT 301
38335: DOUBLE
38336: EQUAL
38337: IFTRUE 38341
38339: GO 38373
38341: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
38342: LD_VAR 0 6
38346: PPUSH
38347: LD_VAR 0 7
38351: PPUSH
38352: LD_VAR 0 8
38356: PPUSH
38357: LD_VAR 0 4
38361: PPUSH
38362: LD_VAR 0 5
38366: PPUSH
38367: CALL 39574 0 5
38371: GO 38494
38373: LD_INT 302
38375: DOUBLE
38376: EQUAL
38377: IFTRUE 38381
38379: GO 38418
38381: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
38382: LD_VAR 0 6
38386: PPUSH
38387: LD_VAR 0 7
38391: PPUSH
38392: LD_VAR 0 8
38396: PPUSH
38397: LD_VAR 0 9
38401: PPUSH
38402: LD_VAR 0 4
38406: PPUSH
38407: LD_VAR 0 5
38411: PPUSH
38412: CALL 39665 0 6
38416: GO 38494
38418: LD_INT 303
38420: DOUBLE
38421: EQUAL
38422: IFTRUE 38426
38424: GO 38463
38426: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
38427: LD_VAR 0 6
38431: PPUSH
38432: LD_VAR 0 7
38436: PPUSH
38437: LD_VAR 0 8
38441: PPUSH
38442: LD_VAR 0 9
38446: PPUSH
38447: LD_VAR 0 4
38451: PPUSH
38452: LD_VAR 0 5
38456: PPUSH
38457: CALL 38499 0 6
38461: GO 38494
38463: LD_INT 304
38465: DOUBLE
38466: EQUAL
38467: IFTRUE 38471
38469: GO 38493
38471: POP
// hHackTeleport ( unit , x , y ) ; end ;
38472: LD_VAR 0 2
38476: PPUSH
38477: LD_VAR 0 4
38481: PPUSH
38482: LD_VAR 0 5
38486: PPUSH
38487: CALL 40258 0 3
38491: GO 38494
38493: POP
// end ;
38494: LD_VAR 0 12
38498: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
38499: LD_INT 0
38501: PPUSH
38502: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
38503: LD_VAR 0 1
38507: PUSH
38508: LD_INT 1
38510: LESS
38511: PUSH
38512: LD_VAR 0 1
38516: PUSH
38517: LD_INT 3
38519: GREATER
38520: OR
38521: PUSH
38522: LD_VAR 0 5
38526: PPUSH
38527: LD_VAR 0 6
38531: PPUSH
38532: CALL_OW 428
38536: OR
38537: IFFALSE 38541
// exit ;
38539: GO 39261
// uc_side := your_side ;
38541: LD_ADDR_OWVAR 20
38545: PUSH
38546: LD_OWVAR 2
38550: ST_TO_ADDR
// uc_nation := nation ;
38551: LD_ADDR_OWVAR 21
38555: PUSH
38556: LD_VAR 0 1
38560: ST_TO_ADDR
// bc_level = 1 ;
38561: LD_ADDR_OWVAR 43
38565: PUSH
38566: LD_INT 1
38568: ST_TO_ADDR
// case btype of 1 :
38569: LD_VAR 0 2
38573: PUSH
38574: LD_INT 1
38576: DOUBLE
38577: EQUAL
38578: IFTRUE 38582
38580: GO 38593
38582: POP
// bc_type := b_depot ; 2 :
38583: LD_ADDR_OWVAR 42
38587: PUSH
38588: LD_INT 0
38590: ST_TO_ADDR
38591: GO 39205
38593: LD_INT 2
38595: DOUBLE
38596: EQUAL
38597: IFTRUE 38601
38599: GO 38612
38601: POP
// bc_type := b_warehouse ; 3 :
38602: LD_ADDR_OWVAR 42
38606: PUSH
38607: LD_INT 1
38609: ST_TO_ADDR
38610: GO 39205
38612: LD_INT 3
38614: DOUBLE
38615: EQUAL
38616: IFTRUE 38620
38618: GO 38631
38620: POP
// bc_type := b_lab ; 4 .. 9 :
38621: LD_ADDR_OWVAR 42
38625: PUSH
38626: LD_INT 6
38628: ST_TO_ADDR
38629: GO 39205
38631: LD_INT 4
38633: DOUBLE
38634: GREATEREQUAL
38635: IFFALSE 38643
38637: LD_INT 9
38639: DOUBLE
38640: LESSEQUAL
38641: IFTRUE 38645
38643: GO 38697
38645: POP
// begin bc_type := b_lab_half ;
38646: LD_ADDR_OWVAR 42
38650: PUSH
38651: LD_INT 7
38653: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
38654: LD_ADDR_OWVAR 44
38658: PUSH
38659: LD_INT 10
38661: PUSH
38662: LD_INT 11
38664: PUSH
38665: LD_INT 12
38667: PUSH
38668: LD_INT 15
38670: PUSH
38671: LD_INT 14
38673: PUSH
38674: LD_INT 13
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: PUSH
38685: LD_VAR 0 2
38689: PUSH
38690: LD_INT 3
38692: MINUS
38693: ARRAY
38694: ST_TO_ADDR
// end ; 10 .. 13 :
38695: GO 39205
38697: LD_INT 10
38699: DOUBLE
38700: GREATEREQUAL
38701: IFFALSE 38709
38703: LD_INT 13
38705: DOUBLE
38706: LESSEQUAL
38707: IFTRUE 38711
38709: GO 38788
38711: POP
// begin bc_type := b_lab_full ;
38712: LD_ADDR_OWVAR 42
38716: PUSH
38717: LD_INT 8
38719: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
38720: LD_ADDR_OWVAR 44
38724: PUSH
38725: LD_INT 10
38727: PUSH
38728: LD_INT 12
38730: PUSH
38731: LD_INT 14
38733: PUSH
38734: LD_INT 13
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: PUSH
38743: LD_VAR 0 2
38747: PUSH
38748: LD_INT 9
38750: MINUS
38751: ARRAY
38752: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
38753: LD_ADDR_OWVAR 45
38757: PUSH
38758: LD_INT 11
38760: PUSH
38761: LD_INT 15
38763: PUSH
38764: LD_INT 12
38766: PUSH
38767: LD_INT 15
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: PUSH
38776: LD_VAR 0 2
38780: PUSH
38781: LD_INT 9
38783: MINUS
38784: ARRAY
38785: ST_TO_ADDR
// end ; 14 :
38786: GO 39205
38788: LD_INT 14
38790: DOUBLE
38791: EQUAL
38792: IFTRUE 38796
38794: GO 38807
38796: POP
// bc_type := b_workshop ; 15 :
38797: LD_ADDR_OWVAR 42
38801: PUSH
38802: LD_INT 2
38804: ST_TO_ADDR
38805: GO 39205
38807: LD_INT 15
38809: DOUBLE
38810: EQUAL
38811: IFTRUE 38815
38813: GO 38826
38815: POP
// bc_type := b_factory ; 16 :
38816: LD_ADDR_OWVAR 42
38820: PUSH
38821: LD_INT 3
38823: ST_TO_ADDR
38824: GO 39205
38826: LD_INT 16
38828: DOUBLE
38829: EQUAL
38830: IFTRUE 38834
38832: GO 38845
38834: POP
// bc_type := b_ext_gun ; 17 :
38835: LD_ADDR_OWVAR 42
38839: PUSH
38840: LD_INT 17
38842: ST_TO_ADDR
38843: GO 39205
38845: LD_INT 17
38847: DOUBLE
38848: EQUAL
38849: IFTRUE 38853
38851: GO 38881
38853: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
38854: LD_ADDR_OWVAR 42
38858: PUSH
38859: LD_INT 19
38861: PUSH
38862: LD_INT 23
38864: PUSH
38865: LD_INT 19
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: LIST
38872: PUSH
38873: LD_VAR 0 1
38877: ARRAY
38878: ST_TO_ADDR
38879: GO 39205
38881: LD_INT 18
38883: DOUBLE
38884: EQUAL
38885: IFTRUE 38889
38887: GO 38900
38889: POP
// bc_type := b_ext_radar ; 19 :
38890: LD_ADDR_OWVAR 42
38894: PUSH
38895: LD_INT 20
38897: ST_TO_ADDR
38898: GO 39205
38900: LD_INT 19
38902: DOUBLE
38903: EQUAL
38904: IFTRUE 38908
38906: GO 38919
38908: POP
// bc_type := b_ext_radio ; 20 :
38909: LD_ADDR_OWVAR 42
38913: PUSH
38914: LD_INT 22
38916: ST_TO_ADDR
38917: GO 39205
38919: LD_INT 20
38921: DOUBLE
38922: EQUAL
38923: IFTRUE 38927
38925: GO 38938
38927: POP
// bc_type := b_ext_siberium ; 21 :
38928: LD_ADDR_OWVAR 42
38932: PUSH
38933: LD_INT 21
38935: ST_TO_ADDR
38936: GO 39205
38938: LD_INT 21
38940: DOUBLE
38941: EQUAL
38942: IFTRUE 38946
38944: GO 38957
38946: POP
// bc_type := b_ext_computer ; 22 :
38947: LD_ADDR_OWVAR 42
38951: PUSH
38952: LD_INT 24
38954: ST_TO_ADDR
38955: GO 39205
38957: LD_INT 22
38959: DOUBLE
38960: EQUAL
38961: IFTRUE 38965
38963: GO 38976
38965: POP
// bc_type := b_ext_track ; 23 :
38966: LD_ADDR_OWVAR 42
38970: PUSH
38971: LD_INT 16
38973: ST_TO_ADDR
38974: GO 39205
38976: LD_INT 23
38978: DOUBLE
38979: EQUAL
38980: IFTRUE 38984
38982: GO 38995
38984: POP
// bc_type := b_ext_laser ; 24 :
38985: LD_ADDR_OWVAR 42
38989: PUSH
38990: LD_INT 25
38992: ST_TO_ADDR
38993: GO 39205
38995: LD_INT 24
38997: DOUBLE
38998: EQUAL
38999: IFTRUE 39003
39001: GO 39014
39003: POP
// bc_type := b_control_tower ; 25 :
39004: LD_ADDR_OWVAR 42
39008: PUSH
39009: LD_INT 36
39011: ST_TO_ADDR
39012: GO 39205
39014: LD_INT 25
39016: DOUBLE
39017: EQUAL
39018: IFTRUE 39022
39020: GO 39033
39022: POP
// bc_type := b_breastwork ; 26 :
39023: LD_ADDR_OWVAR 42
39027: PUSH
39028: LD_INT 31
39030: ST_TO_ADDR
39031: GO 39205
39033: LD_INT 26
39035: DOUBLE
39036: EQUAL
39037: IFTRUE 39041
39039: GO 39052
39041: POP
// bc_type := b_bunker ; 27 :
39042: LD_ADDR_OWVAR 42
39046: PUSH
39047: LD_INT 32
39049: ST_TO_ADDR
39050: GO 39205
39052: LD_INT 27
39054: DOUBLE
39055: EQUAL
39056: IFTRUE 39060
39058: GO 39071
39060: POP
// bc_type := b_turret ; 28 :
39061: LD_ADDR_OWVAR 42
39065: PUSH
39066: LD_INT 33
39068: ST_TO_ADDR
39069: GO 39205
39071: LD_INT 28
39073: DOUBLE
39074: EQUAL
39075: IFTRUE 39079
39077: GO 39090
39079: POP
// bc_type := b_armoury ; 29 :
39080: LD_ADDR_OWVAR 42
39084: PUSH
39085: LD_INT 4
39087: ST_TO_ADDR
39088: GO 39205
39090: LD_INT 29
39092: DOUBLE
39093: EQUAL
39094: IFTRUE 39098
39096: GO 39109
39098: POP
// bc_type := b_barracks ; 30 :
39099: LD_ADDR_OWVAR 42
39103: PUSH
39104: LD_INT 5
39106: ST_TO_ADDR
39107: GO 39205
39109: LD_INT 30
39111: DOUBLE
39112: EQUAL
39113: IFTRUE 39117
39115: GO 39128
39117: POP
// bc_type := b_solar_power ; 31 :
39118: LD_ADDR_OWVAR 42
39122: PUSH
39123: LD_INT 27
39125: ST_TO_ADDR
39126: GO 39205
39128: LD_INT 31
39130: DOUBLE
39131: EQUAL
39132: IFTRUE 39136
39134: GO 39147
39136: POP
// bc_type := b_oil_power ; 32 :
39137: LD_ADDR_OWVAR 42
39141: PUSH
39142: LD_INT 26
39144: ST_TO_ADDR
39145: GO 39205
39147: LD_INT 32
39149: DOUBLE
39150: EQUAL
39151: IFTRUE 39155
39153: GO 39166
39155: POP
// bc_type := b_siberite_power ; 33 :
39156: LD_ADDR_OWVAR 42
39160: PUSH
39161: LD_INT 28
39163: ST_TO_ADDR
39164: GO 39205
39166: LD_INT 33
39168: DOUBLE
39169: EQUAL
39170: IFTRUE 39174
39172: GO 39185
39174: POP
// bc_type := b_oil_mine ; 34 :
39175: LD_ADDR_OWVAR 42
39179: PUSH
39180: LD_INT 29
39182: ST_TO_ADDR
39183: GO 39205
39185: LD_INT 34
39187: DOUBLE
39188: EQUAL
39189: IFTRUE 39193
39191: GO 39204
39193: POP
// bc_type := b_siberite_mine ; end ;
39194: LD_ADDR_OWVAR 42
39198: PUSH
39199: LD_INT 30
39201: ST_TO_ADDR
39202: GO 39205
39204: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
39205: LD_ADDR_VAR 0 8
39209: PUSH
39210: LD_VAR 0 5
39214: PPUSH
39215: LD_VAR 0 6
39219: PPUSH
39220: LD_VAR 0 3
39224: PPUSH
39225: CALL_OW 47
39229: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
39230: LD_OWVAR 42
39234: PUSH
39235: LD_INT 32
39237: PUSH
39238: LD_INT 33
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: IN
39245: IFFALSE 39261
// PlaceWeaponTurret ( b , weapon ) ;
39247: LD_VAR 0 8
39251: PPUSH
39252: LD_VAR 0 4
39256: PPUSH
39257: CALL_OW 431
// end ;
39261: LD_VAR 0 7
39265: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
39266: LD_INT 0
39268: PPUSH
39269: PPUSH
39270: PPUSH
39271: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39272: LD_ADDR_VAR 0 4
39276: PUSH
39277: LD_INT 22
39279: PUSH
39280: LD_OWVAR 2
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 2
39291: PUSH
39292: LD_INT 30
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 30
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: LIST
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PPUSH
39321: CALL_OW 69
39325: ST_TO_ADDR
// if not tmp then
39326: LD_VAR 0 4
39330: NOT
39331: IFFALSE 39335
// exit ;
39333: GO 39394
// for i in tmp do
39335: LD_ADDR_VAR 0 2
39339: PUSH
39340: LD_VAR 0 4
39344: PUSH
39345: FOR_IN
39346: IFFALSE 39392
// for j = 1 to 3 do
39348: LD_ADDR_VAR 0 3
39352: PUSH
39353: DOUBLE
39354: LD_INT 1
39356: DEC
39357: ST_TO_ADDR
39358: LD_INT 3
39360: PUSH
39361: FOR_TO
39362: IFFALSE 39388
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
39364: LD_VAR 0 2
39368: PPUSH
39369: CALL_OW 274
39373: PPUSH
39374: LD_VAR 0 3
39378: PPUSH
39379: LD_INT 99999
39381: PPUSH
39382: CALL_OW 277
39386: GO 39361
39388: POP
39389: POP
39390: GO 39345
39392: POP
39393: POP
// end ;
39394: LD_VAR 0 1
39398: RET
// export function hHackSetLevel10 ; var i , j ; begin
39399: LD_INT 0
39401: PPUSH
39402: PPUSH
39403: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
39404: LD_ADDR_VAR 0 2
39408: PUSH
39409: LD_INT 21
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PPUSH
39419: CALL_OW 69
39423: PUSH
39424: FOR_IN
39425: IFFALSE 39477
// if IsSelected ( i ) then
39427: LD_VAR 0 2
39431: PPUSH
39432: CALL_OW 306
39436: IFFALSE 39475
// begin for j := 1 to 4 do
39438: LD_ADDR_VAR 0 3
39442: PUSH
39443: DOUBLE
39444: LD_INT 1
39446: DEC
39447: ST_TO_ADDR
39448: LD_INT 4
39450: PUSH
39451: FOR_TO
39452: IFFALSE 39473
// SetSkill ( i , j , 10 ) ;
39454: LD_VAR 0 2
39458: PPUSH
39459: LD_VAR 0 3
39463: PPUSH
39464: LD_INT 10
39466: PPUSH
39467: CALL_OW 237
39471: GO 39451
39473: POP
39474: POP
// end ;
39475: GO 39424
39477: POP
39478: POP
// end ;
39479: LD_VAR 0 1
39483: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
39484: LD_INT 0
39486: PPUSH
39487: PPUSH
39488: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
39489: LD_ADDR_VAR 0 2
39493: PUSH
39494: LD_INT 22
39496: PUSH
39497: LD_OWVAR 2
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 21
39508: PUSH
39509: LD_INT 1
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PPUSH
39520: CALL_OW 69
39524: PUSH
39525: FOR_IN
39526: IFFALSE 39567
// begin for j := 1 to 4 do
39528: LD_ADDR_VAR 0 3
39532: PUSH
39533: DOUBLE
39534: LD_INT 1
39536: DEC
39537: ST_TO_ADDR
39538: LD_INT 4
39540: PUSH
39541: FOR_TO
39542: IFFALSE 39563
// SetSkill ( i , j , 10 ) ;
39544: LD_VAR 0 2
39548: PPUSH
39549: LD_VAR 0 3
39553: PPUSH
39554: LD_INT 10
39556: PPUSH
39557: CALL_OW 237
39561: GO 39541
39563: POP
39564: POP
// end ;
39565: GO 39525
39567: POP
39568: POP
// end ;
39569: LD_VAR 0 1
39573: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
39574: LD_INT 0
39576: PPUSH
// uc_side := your_side ;
39577: LD_ADDR_OWVAR 20
39581: PUSH
39582: LD_OWVAR 2
39586: ST_TO_ADDR
// uc_nation := nation ;
39587: LD_ADDR_OWVAR 21
39591: PUSH
39592: LD_VAR 0 1
39596: ST_TO_ADDR
// InitHc ;
39597: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
39601: LD_INT 0
39603: PPUSH
39604: LD_VAR 0 2
39608: PPUSH
39609: LD_VAR 0 3
39613: PPUSH
39614: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
39618: LD_VAR 0 4
39622: PPUSH
39623: LD_VAR 0 5
39627: PPUSH
39628: CALL_OW 428
39632: PUSH
39633: LD_INT 0
39635: EQUAL
39636: IFFALSE 39660
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
39638: CALL_OW 44
39642: PPUSH
39643: LD_VAR 0 4
39647: PPUSH
39648: LD_VAR 0 5
39652: PPUSH
39653: LD_INT 1
39655: PPUSH
39656: CALL_OW 48
// end ;
39660: LD_VAR 0 6
39664: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
39665: LD_INT 0
39667: PPUSH
39668: PPUSH
// uc_side := your_side ;
39669: LD_ADDR_OWVAR 20
39673: PUSH
39674: LD_OWVAR 2
39678: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
39679: LD_VAR 0 1
39683: PUSH
39684: LD_INT 1
39686: PUSH
39687: LD_INT 2
39689: PUSH
39690: LD_INT 3
39692: PUSH
39693: LD_INT 4
39695: PUSH
39696: LD_INT 5
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: IN
39706: IFFALSE 39718
// uc_nation := nation_american else
39708: LD_ADDR_OWVAR 21
39712: PUSH
39713: LD_INT 1
39715: ST_TO_ADDR
39716: GO 39761
// if chassis in [ 11 , 12 , 13 , 14 ] then
39718: LD_VAR 0 1
39722: PUSH
39723: LD_INT 11
39725: PUSH
39726: LD_INT 12
39728: PUSH
39729: LD_INT 13
39731: PUSH
39732: LD_INT 14
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: IN
39741: IFFALSE 39753
// uc_nation := nation_arabian else
39743: LD_ADDR_OWVAR 21
39747: PUSH
39748: LD_INT 2
39750: ST_TO_ADDR
39751: GO 39761
// uc_nation := nation_russian ;
39753: LD_ADDR_OWVAR 21
39757: PUSH
39758: LD_INT 3
39760: ST_TO_ADDR
// vc_chassis := chassis ;
39761: LD_ADDR_OWVAR 37
39765: PUSH
39766: LD_VAR 0 1
39770: ST_TO_ADDR
// vc_engine := engine ;
39771: LD_ADDR_OWVAR 39
39775: PUSH
39776: LD_VAR 0 2
39780: ST_TO_ADDR
// vc_control := control ;
39781: LD_ADDR_OWVAR 38
39785: PUSH
39786: LD_VAR 0 3
39790: ST_TO_ADDR
// vc_weapon := weapon ;
39791: LD_ADDR_OWVAR 40
39795: PUSH
39796: LD_VAR 0 4
39800: ST_TO_ADDR
// un := CreateVehicle ;
39801: LD_ADDR_VAR 0 8
39805: PUSH
39806: CALL_OW 45
39810: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
39811: LD_VAR 0 8
39815: PPUSH
39816: LD_INT 0
39818: PPUSH
39819: LD_INT 5
39821: PPUSH
39822: CALL_OW 12
39826: PPUSH
39827: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
39831: LD_VAR 0 8
39835: PPUSH
39836: LD_VAR 0 5
39840: PPUSH
39841: LD_VAR 0 6
39845: PPUSH
39846: LD_INT 1
39848: PPUSH
39849: CALL_OW 48
// end ;
39853: LD_VAR 0 7
39857: RET
// export hInvincible ; every 1 do
39858: GO 39860
39860: DISABLE
// hInvincible := [ ] ;
39861: LD_ADDR_EXP 121
39865: PUSH
39866: EMPTY
39867: ST_TO_ADDR
39868: END
// every 10 do var i ;
39869: GO 39871
39871: DISABLE
39872: LD_INT 0
39874: PPUSH
// begin enable ;
39875: ENABLE
// if not hInvincible then
39876: LD_EXP 121
39880: NOT
39881: IFFALSE 39885
// exit ;
39883: GO 39929
// for i in hInvincible do
39885: LD_ADDR_VAR 0 1
39889: PUSH
39890: LD_EXP 121
39894: PUSH
39895: FOR_IN
39896: IFFALSE 39927
// if GetLives ( i ) < 1000 then
39898: LD_VAR 0 1
39902: PPUSH
39903: CALL_OW 256
39907: PUSH
39908: LD_INT 1000
39910: LESS
39911: IFFALSE 39925
// SetLives ( i , 1000 ) ;
39913: LD_VAR 0 1
39917: PPUSH
39918: LD_INT 1000
39920: PPUSH
39921: CALL_OW 234
39925: GO 39895
39927: POP
39928: POP
// end ;
39929: PPOPN 1
39931: END
// export function hHackInvincible ; var i ; begin
39932: LD_INT 0
39934: PPUSH
39935: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
39936: LD_ADDR_VAR 0 2
39940: PUSH
39941: LD_INT 2
39943: PUSH
39944: LD_INT 21
39946: PUSH
39947: LD_INT 1
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 21
39956: PUSH
39957: LD_INT 2
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: LIST
39968: PPUSH
39969: CALL_OW 69
39973: PUSH
39974: FOR_IN
39975: IFFALSE 40036
// if IsSelected ( i ) then
39977: LD_VAR 0 2
39981: PPUSH
39982: CALL_OW 306
39986: IFFALSE 40034
// begin if i in hInvincible then
39988: LD_VAR 0 2
39992: PUSH
39993: LD_EXP 121
39997: IN
39998: IFFALSE 40018
// hInvincible := hInvincible diff i else
40000: LD_ADDR_EXP 121
40004: PUSH
40005: LD_EXP 121
40009: PUSH
40010: LD_VAR 0 2
40014: DIFF
40015: ST_TO_ADDR
40016: GO 40034
// hInvincible := hInvincible union i ;
40018: LD_ADDR_EXP 121
40022: PUSH
40023: LD_EXP 121
40027: PUSH
40028: LD_VAR 0 2
40032: UNION
40033: ST_TO_ADDR
// end ;
40034: GO 39974
40036: POP
40037: POP
// end ;
40038: LD_VAR 0 1
40042: RET
// export function hHackInvisible ; var i , j ; begin
40043: LD_INT 0
40045: PPUSH
40046: PPUSH
40047: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40048: LD_ADDR_VAR 0 2
40052: PUSH
40053: LD_INT 21
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PPUSH
40063: CALL_OW 69
40067: PUSH
40068: FOR_IN
40069: IFFALSE 40093
// if IsSelected ( i ) then
40071: LD_VAR 0 2
40075: PPUSH
40076: CALL_OW 306
40080: IFFALSE 40091
// ComForceInvisible ( i ) ;
40082: LD_VAR 0 2
40086: PPUSH
40087: CALL_OW 496
40091: GO 40068
40093: POP
40094: POP
// end ;
40095: LD_VAR 0 1
40099: RET
// export function hHackChangeYourSide ; begin
40100: LD_INT 0
40102: PPUSH
// if your_side = 8 then
40103: LD_OWVAR 2
40107: PUSH
40108: LD_INT 8
40110: EQUAL
40111: IFFALSE 40123
// your_side := 0 else
40113: LD_ADDR_OWVAR 2
40117: PUSH
40118: LD_INT 0
40120: ST_TO_ADDR
40121: GO 40137
// your_side := your_side + 1 ;
40123: LD_ADDR_OWVAR 2
40127: PUSH
40128: LD_OWVAR 2
40132: PUSH
40133: LD_INT 1
40135: PLUS
40136: ST_TO_ADDR
// end ;
40137: LD_VAR 0 1
40141: RET
// export function hHackChangeUnitSide ; var i , j ; begin
40142: LD_INT 0
40144: PPUSH
40145: PPUSH
40146: PPUSH
// for i in all_units do
40147: LD_ADDR_VAR 0 2
40151: PUSH
40152: LD_OWVAR 3
40156: PUSH
40157: FOR_IN
40158: IFFALSE 40236
// if IsSelected ( i ) then
40160: LD_VAR 0 2
40164: PPUSH
40165: CALL_OW 306
40169: IFFALSE 40234
// begin j := GetSide ( i ) ;
40171: LD_ADDR_VAR 0 3
40175: PUSH
40176: LD_VAR 0 2
40180: PPUSH
40181: CALL_OW 255
40185: ST_TO_ADDR
// if j = 8 then
40186: LD_VAR 0 3
40190: PUSH
40191: LD_INT 8
40193: EQUAL
40194: IFFALSE 40206
// j := 0 else
40196: LD_ADDR_VAR 0 3
40200: PUSH
40201: LD_INT 0
40203: ST_TO_ADDR
40204: GO 40220
// j := j + 1 ;
40206: LD_ADDR_VAR 0 3
40210: PUSH
40211: LD_VAR 0 3
40215: PUSH
40216: LD_INT 1
40218: PLUS
40219: ST_TO_ADDR
// SetSide ( i , j ) ;
40220: LD_VAR 0 2
40224: PPUSH
40225: LD_VAR 0 3
40229: PPUSH
40230: CALL_OW 235
// end ;
40234: GO 40157
40236: POP
40237: POP
// end ;
40238: LD_VAR 0 1
40242: RET
// export function hHackFog ; begin
40243: LD_INT 0
40245: PPUSH
// FogOff ( true ) ;
40246: LD_INT 1
40248: PPUSH
40249: CALL_OW 344
// end ;
40253: LD_VAR 0 1
40257: RET
// export function hHackTeleport ( unit , x , y ) ; begin
40258: LD_INT 0
40260: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
40261: LD_VAR 0 1
40265: PPUSH
40266: LD_VAR 0 2
40270: PPUSH
40271: LD_VAR 0 3
40275: PPUSH
40276: LD_INT 1
40278: PPUSH
40279: LD_INT 1
40281: PPUSH
40282: CALL_OW 483
// CenterOnXY ( x , y ) ;
40286: LD_VAR 0 2
40290: PPUSH
40291: LD_VAR 0 3
40295: PPUSH
40296: CALL_OW 84
// end ; end_of_file
40300: LD_VAR 0 4
40304: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
40305: LD_INT 0
40307: PPUSH
40308: PPUSH
40309: PPUSH
40310: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
40311: LD_VAR 0 1
40315: PPUSH
40316: CALL_OW 264
40320: PUSH
40321: LD_EXP 52
40325: EQUAL
40326: IFFALSE 40398
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
40328: LD_INT 68
40330: PPUSH
40331: LD_VAR 0 1
40335: PPUSH
40336: CALL_OW 255
40340: PPUSH
40341: CALL_OW 321
40345: PUSH
40346: LD_INT 2
40348: EQUAL
40349: IFFALSE 40361
// eff := 70 else
40351: LD_ADDR_VAR 0 4
40355: PUSH
40356: LD_INT 70
40358: ST_TO_ADDR
40359: GO 40369
// eff := 30 ;
40361: LD_ADDR_VAR 0 4
40365: PUSH
40366: LD_INT 30
40368: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
40369: LD_VAR 0 1
40373: PPUSH
40374: CALL_OW 250
40378: PPUSH
40379: LD_VAR 0 1
40383: PPUSH
40384: CALL_OW 251
40388: PPUSH
40389: LD_VAR 0 4
40393: PPUSH
40394: CALL_OW 495
// end ; end ;
40398: LD_VAR 0 2
40402: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
40403: LD_INT 0
40405: PPUSH
// end ;
40406: LD_VAR 0 4
40410: RET
// export function SOS_Command ( cmd ) ; begin
40411: LD_INT 0
40413: PPUSH
// end ;
40414: LD_VAR 0 2
40418: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
40419: LD_INT 0
40421: PPUSH
// if cmd = 121 then
40422: LD_VAR 0 1
40426: PUSH
40427: LD_INT 121
40429: EQUAL
40430: IFFALSE 40432
// end ;
40432: LD_VAR 0 6
40436: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
40437: LD_INT 0
40439: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
40440: LD_VAR 0 1
40444: PUSH
40445: LD_INT 250
40447: EQUAL
40448: PUSH
40449: LD_VAR 0 2
40453: PPUSH
40454: CALL_OW 264
40458: PUSH
40459: LD_EXP 55
40463: EQUAL
40464: AND
40465: IFFALSE 40486
// MinerPlaceMine ( unit , x , y ) ;
40467: LD_VAR 0 2
40471: PPUSH
40472: LD_VAR 0 4
40476: PPUSH
40477: LD_VAR 0 5
40481: PPUSH
40482: CALL 42835 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
40486: LD_VAR 0 1
40490: PUSH
40491: LD_INT 251
40493: EQUAL
40494: PUSH
40495: LD_VAR 0 2
40499: PPUSH
40500: CALL_OW 264
40504: PUSH
40505: LD_EXP 55
40509: EQUAL
40510: AND
40511: IFFALSE 40532
// MinerDetonateMine ( unit , x , y ) ;
40513: LD_VAR 0 2
40517: PPUSH
40518: LD_VAR 0 4
40522: PPUSH
40523: LD_VAR 0 5
40527: PPUSH
40528: CALL 43112 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
40532: LD_VAR 0 1
40536: PUSH
40537: LD_INT 252
40539: EQUAL
40540: PUSH
40541: LD_VAR 0 2
40545: PPUSH
40546: CALL_OW 264
40550: PUSH
40551: LD_EXP 55
40555: EQUAL
40556: AND
40557: IFFALSE 40578
// MinerCreateMinefield ( unit , x , y ) ;
40559: LD_VAR 0 2
40563: PPUSH
40564: LD_VAR 0 4
40568: PPUSH
40569: LD_VAR 0 5
40573: PPUSH
40574: CALL 43529 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
40578: LD_VAR 0 1
40582: PUSH
40583: LD_INT 253
40585: EQUAL
40586: PUSH
40587: LD_VAR 0 2
40591: PPUSH
40592: CALL_OW 257
40596: PUSH
40597: LD_INT 5
40599: EQUAL
40600: AND
40601: IFFALSE 40622
// ComBinocular ( unit , x , y ) ;
40603: LD_VAR 0 2
40607: PPUSH
40608: LD_VAR 0 4
40612: PPUSH
40613: LD_VAR 0 5
40617: PPUSH
40618: CALL 43900 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
40622: LD_VAR 0 1
40626: PUSH
40627: LD_INT 254
40629: EQUAL
40630: PUSH
40631: LD_VAR 0 2
40635: PPUSH
40636: CALL_OW 264
40640: PUSH
40641: LD_EXP 50
40645: EQUAL
40646: AND
40647: PUSH
40648: LD_VAR 0 3
40652: PPUSH
40653: CALL_OW 263
40657: PUSH
40658: LD_INT 3
40660: EQUAL
40661: AND
40662: IFFALSE 40678
// HackDestroyVehicle ( unit , selectedUnit ) ;
40664: LD_VAR 0 2
40668: PPUSH
40669: LD_VAR 0 3
40673: PPUSH
40674: CALL 42195 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
40678: LD_VAR 0 1
40682: PUSH
40683: LD_INT 255
40685: EQUAL
40686: PUSH
40687: LD_VAR 0 2
40691: PPUSH
40692: CALL_OW 264
40696: PUSH
40697: LD_INT 14
40699: PUSH
40700: LD_INT 53
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: IN
40707: AND
40708: PUSH
40709: LD_VAR 0 4
40713: PPUSH
40714: LD_VAR 0 5
40718: PPUSH
40719: CALL_OW 488
40723: AND
40724: IFFALSE 40748
// CutTreeXYR ( unit , x , y , 12 ) ;
40726: LD_VAR 0 2
40730: PPUSH
40731: LD_VAR 0 4
40735: PPUSH
40736: LD_VAR 0 5
40740: PPUSH
40741: LD_INT 12
40743: PPUSH
40744: CALL 40761 0 4
// end ;
40748: LD_VAR 0 6
40752: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
40753: LD_INT 0
40755: PPUSH
// end ;
40756: LD_VAR 0 4
40760: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
40761: LD_INT 0
40763: PPUSH
40764: PPUSH
40765: PPUSH
40766: PPUSH
40767: PPUSH
40768: PPUSH
40769: PPUSH
40770: PPUSH
40771: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
40772: LD_VAR 0 1
40776: NOT
40777: PUSH
40778: LD_VAR 0 2
40782: PPUSH
40783: LD_VAR 0 3
40787: PPUSH
40788: CALL_OW 488
40792: NOT
40793: OR
40794: PUSH
40795: LD_VAR 0 4
40799: NOT
40800: OR
40801: IFFALSE 40805
// exit ;
40803: GO 41145
// list := [ ] ;
40805: LD_ADDR_VAR 0 13
40809: PUSH
40810: EMPTY
40811: ST_TO_ADDR
// if x - r < 0 then
40812: LD_VAR 0 2
40816: PUSH
40817: LD_VAR 0 4
40821: MINUS
40822: PUSH
40823: LD_INT 0
40825: LESS
40826: IFFALSE 40838
// min_x := 0 else
40828: LD_ADDR_VAR 0 7
40832: PUSH
40833: LD_INT 0
40835: ST_TO_ADDR
40836: GO 40854
// min_x := x - r ;
40838: LD_ADDR_VAR 0 7
40842: PUSH
40843: LD_VAR 0 2
40847: PUSH
40848: LD_VAR 0 4
40852: MINUS
40853: ST_TO_ADDR
// if y - r < 0 then
40854: LD_VAR 0 3
40858: PUSH
40859: LD_VAR 0 4
40863: MINUS
40864: PUSH
40865: LD_INT 0
40867: LESS
40868: IFFALSE 40880
// min_y := 0 else
40870: LD_ADDR_VAR 0 8
40874: PUSH
40875: LD_INT 0
40877: ST_TO_ADDR
40878: GO 40896
// min_y := y - r ;
40880: LD_ADDR_VAR 0 8
40884: PUSH
40885: LD_VAR 0 3
40889: PUSH
40890: LD_VAR 0 4
40894: MINUS
40895: ST_TO_ADDR
// max_x := x + r ;
40896: LD_ADDR_VAR 0 9
40900: PUSH
40901: LD_VAR 0 2
40905: PUSH
40906: LD_VAR 0 4
40910: PLUS
40911: ST_TO_ADDR
// max_y := y + r ;
40912: LD_ADDR_VAR 0 10
40916: PUSH
40917: LD_VAR 0 3
40921: PUSH
40922: LD_VAR 0 4
40926: PLUS
40927: ST_TO_ADDR
// for _x = min_x to max_x do
40928: LD_ADDR_VAR 0 11
40932: PUSH
40933: DOUBLE
40934: LD_VAR 0 7
40938: DEC
40939: ST_TO_ADDR
40940: LD_VAR 0 9
40944: PUSH
40945: FOR_TO
40946: IFFALSE 41063
// for _y = min_y to max_y do
40948: LD_ADDR_VAR 0 12
40952: PUSH
40953: DOUBLE
40954: LD_VAR 0 8
40958: DEC
40959: ST_TO_ADDR
40960: LD_VAR 0 10
40964: PUSH
40965: FOR_TO
40966: IFFALSE 41059
// begin if not ValidHex ( _x , _y ) then
40968: LD_VAR 0 11
40972: PPUSH
40973: LD_VAR 0 12
40977: PPUSH
40978: CALL_OW 488
40982: NOT
40983: IFFALSE 40987
// continue ;
40985: GO 40965
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
40987: LD_VAR 0 11
40991: PPUSH
40992: LD_VAR 0 12
40996: PPUSH
40997: CALL_OW 351
41001: PUSH
41002: LD_VAR 0 11
41006: PPUSH
41007: LD_VAR 0 12
41011: PPUSH
41012: CALL_OW 554
41016: AND
41017: IFFALSE 41057
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
41019: LD_ADDR_VAR 0 13
41023: PUSH
41024: LD_VAR 0 13
41028: PPUSH
41029: LD_VAR 0 13
41033: PUSH
41034: LD_INT 1
41036: PLUS
41037: PPUSH
41038: LD_VAR 0 11
41042: PUSH
41043: LD_VAR 0 12
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PPUSH
41052: CALL_OW 2
41056: ST_TO_ADDR
// end ;
41057: GO 40965
41059: POP
41060: POP
41061: GO 40945
41063: POP
41064: POP
// if not list then
41065: LD_VAR 0 13
41069: NOT
41070: IFFALSE 41074
// exit ;
41072: GO 41145
// for i in list do
41074: LD_ADDR_VAR 0 6
41078: PUSH
41079: LD_VAR 0 13
41083: PUSH
41084: FOR_IN
41085: IFFALSE 41143
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
41087: LD_VAR 0 1
41091: PPUSH
41092: LD_STRING M
41094: PUSH
41095: LD_VAR 0 6
41099: PUSH
41100: LD_INT 1
41102: ARRAY
41103: PUSH
41104: LD_VAR 0 6
41108: PUSH
41109: LD_INT 2
41111: ARRAY
41112: PUSH
41113: LD_INT 0
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: PUSH
41134: EMPTY
41135: LIST
41136: PPUSH
41137: CALL_OW 447
41141: GO 41084
41143: POP
41144: POP
// end ;
41145: LD_VAR 0 5
41149: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
41150: LD_EXP 124
41154: NOT
41155: IFFALSE 41205
41157: GO 41159
41159: DISABLE
// begin initHack := true ;
41160: LD_ADDR_EXP 124
41164: PUSH
41165: LD_INT 1
41167: ST_TO_ADDR
// hackTanks := [ ] ;
41168: LD_ADDR_EXP 125
41172: PUSH
41173: EMPTY
41174: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
41175: LD_ADDR_EXP 126
41179: PUSH
41180: EMPTY
41181: ST_TO_ADDR
// hackLimit := 3 ;
41182: LD_ADDR_EXP 127
41186: PUSH
41187: LD_INT 3
41189: ST_TO_ADDR
// hackDist := 12 ;
41190: LD_ADDR_EXP 128
41194: PUSH
41195: LD_INT 12
41197: ST_TO_ADDR
// hackCounter := [ ] ;
41198: LD_ADDR_EXP 129
41202: PUSH
41203: EMPTY
41204: ST_TO_ADDR
// end ;
41205: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
41206: LD_EXP 124
41210: PUSH
41211: LD_INT 34
41213: PUSH
41214: LD_EXP 50
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PPUSH
41223: CALL_OW 69
41227: AND
41228: IFFALSE 41483
41230: GO 41232
41232: DISABLE
41233: LD_INT 0
41235: PPUSH
41236: PPUSH
// begin enable ;
41237: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
41238: LD_ADDR_VAR 0 1
41242: PUSH
41243: LD_INT 34
41245: PUSH
41246: LD_EXP 50
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PPUSH
41255: CALL_OW 69
41259: PUSH
41260: FOR_IN
41261: IFFALSE 41481
// begin if not i in hackTanks then
41263: LD_VAR 0 1
41267: PUSH
41268: LD_EXP 125
41272: IN
41273: NOT
41274: IFFALSE 41357
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
41276: LD_ADDR_EXP 125
41280: PUSH
41281: LD_EXP 125
41285: PPUSH
41286: LD_EXP 125
41290: PUSH
41291: LD_INT 1
41293: PLUS
41294: PPUSH
41295: LD_VAR 0 1
41299: PPUSH
41300: CALL_OW 1
41304: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
41305: LD_ADDR_EXP 126
41309: PUSH
41310: LD_EXP 126
41314: PPUSH
41315: LD_EXP 126
41319: PUSH
41320: LD_INT 1
41322: PLUS
41323: PPUSH
41324: EMPTY
41325: PPUSH
41326: CALL_OW 1
41330: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
41331: LD_ADDR_EXP 129
41335: PUSH
41336: LD_EXP 129
41340: PPUSH
41341: LD_EXP 129
41345: PUSH
41346: LD_INT 1
41348: PLUS
41349: PPUSH
41350: EMPTY
41351: PPUSH
41352: CALL_OW 1
41356: ST_TO_ADDR
// end ; if not IsOk ( i ) then
41357: LD_VAR 0 1
41361: PPUSH
41362: CALL_OW 302
41366: NOT
41367: IFFALSE 41380
// begin HackUnlinkAll ( i ) ;
41369: LD_VAR 0 1
41373: PPUSH
41374: CALL 41486 0 1
// continue ;
41378: GO 41260
// end ; HackCheckCapturedStatus ( i ) ;
41380: LD_VAR 0 1
41384: PPUSH
41385: CALL 41929 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
41389: LD_ADDR_VAR 0 2
41393: PUSH
41394: LD_INT 81
41396: PUSH
41397: LD_VAR 0 1
41401: PPUSH
41402: CALL_OW 255
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 33
41413: PUSH
41414: LD_INT 3
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 91
41423: PUSH
41424: LD_VAR 0 1
41428: PUSH
41429: LD_EXP 128
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 50
41441: PUSH
41442: EMPTY
41443: LIST
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: PPUSH
41451: CALL_OW 69
41455: ST_TO_ADDR
// if not tmp then
41456: LD_VAR 0 2
41460: NOT
41461: IFFALSE 41465
// continue ;
41463: GO 41260
// HackLink ( i , tmp ) ;
41465: LD_VAR 0 1
41469: PPUSH
41470: LD_VAR 0 2
41474: PPUSH
41475: CALL 41622 0 2
// end ;
41479: GO 41260
41481: POP
41482: POP
// end ;
41483: PPOPN 2
41485: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
41486: LD_INT 0
41488: PPUSH
41489: PPUSH
41490: PPUSH
// if not hack in hackTanks then
41491: LD_VAR 0 1
41495: PUSH
41496: LD_EXP 125
41500: IN
41501: NOT
41502: IFFALSE 41506
// exit ;
41504: GO 41617
// index := GetElementIndex ( hackTanks , hack ) ;
41506: LD_ADDR_VAR 0 4
41510: PUSH
41511: LD_EXP 125
41515: PPUSH
41516: LD_VAR 0 1
41520: PPUSH
41521: CALL 49091 0 2
41525: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
41526: LD_EXP 126
41530: PUSH
41531: LD_VAR 0 4
41535: ARRAY
41536: IFFALSE 41617
// begin for i in hackTanksCaptured [ index ] do
41538: LD_ADDR_VAR 0 3
41542: PUSH
41543: LD_EXP 126
41547: PUSH
41548: LD_VAR 0 4
41552: ARRAY
41553: PUSH
41554: FOR_IN
41555: IFFALSE 41581
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
41557: LD_VAR 0 3
41561: PUSH
41562: LD_INT 1
41564: ARRAY
41565: PPUSH
41566: LD_VAR 0 3
41570: PUSH
41571: LD_INT 2
41573: ARRAY
41574: PPUSH
41575: CALL_OW 235
41579: GO 41554
41581: POP
41582: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
41583: LD_ADDR_EXP 126
41587: PUSH
41588: LD_EXP 126
41592: PPUSH
41593: LD_VAR 0 4
41597: PPUSH
41598: EMPTY
41599: PPUSH
41600: CALL_OW 1
41604: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
41605: LD_VAR 0 1
41609: PPUSH
41610: LD_INT 0
41612: PPUSH
41613: CALL_OW 505
// end ; end ;
41617: LD_VAR 0 2
41621: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
41622: LD_INT 0
41624: PPUSH
41625: PPUSH
41626: PPUSH
// if not hack in hackTanks or not vehicles then
41627: LD_VAR 0 1
41631: PUSH
41632: LD_EXP 125
41636: IN
41637: NOT
41638: PUSH
41639: LD_VAR 0 2
41643: NOT
41644: OR
41645: IFFALSE 41649
// exit ;
41647: GO 41924
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
41649: LD_ADDR_VAR 0 2
41653: PUSH
41654: LD_VAR 0 1
41658: PPUSH
41659: LD_VAR 0 2
41663: PPUSH
41664: LD_INT 1
41666: PPUSH
41667: LD_INT 1
41669: PPUSH
41670: CALL 49741 0 4
41674: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
41675: LD_ADDR_VAR 0 5
41679: PUSH
41680: LD_EXP 125
41684: PPUSH
41685: LD_VAR 0 1
41689: PPUSH
41690: CALL 49091 0 2
41694: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
41695: LD_EXP 126
41699: PUSH
41700: LD_VAR 0 5
41704: ARRAY
41705: PUSH
41706: LD_EXP 127
41710: LESS
41711: IFFALSE 41900
// begin for i := 1 to vehicles do
41713: LD_ADDR_VAR 0 4
41717: PUSH
41718: DOUBLE
41719: LD_INT 1
41721: DEC
41722: ST_TO_ADDR
41723: LD_VAR 0 2
41727: PUSH
41728: FOR_TO
41729: IFFALSE 41898
// begin if hackTanksCaptured [ index ] = hackLimit then
41731: LD_EXP 126
41735: PUSH
41736: LD_VAR 0 5
41740: ARRAY
41741: PUSH
41742: LD_EXP 127
41746: EQUAL
41747: IFFALSE 41751
// break ;
41749: GO 41898
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
41751: LD_ADDR_EXP 129
41755: PUSH
41756: LD_EXP 129
41760: PPUSH
41761: LD_VAR 0 5
41765: PPUSH
41766: LD_EXP 129
41770: PUSH
41771: LD_VAR 0 5
41775: ARRAY
41776: PUSH
41777: LD_INT 1
41779: PLUS
41780: PPUSH
41781: CALL_OW 1
41785: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
41786: LD_ADDR_EXP 126
41790: PUSH
41791: LD_EXP 126
41795: PPUSH
41796: LD_VAR 0 5
41800: PUSH
41801: LD_EXP 126
41805: PUSH
41806: LD_VAR 0 5
41810: ARRAY
41811: PUSH
41812: LD_INT 1
41814: PLUS
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PPUSH
41820: LD_VAR 0 2
41824: PUSH
41825: LD_VAR 0 4
41829: ARRAY
41830: PUSH
41831: LD_VAR 0 2
41835: PUSH
41836: LD_VAR 0 4
41840: ARRAY
41841: PPUSH
41842: CALL_OW 255
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PPUSH
41851: CALL 49306 0 3
41855: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
41856: LD_VAR 0 2
41860: PUSH
41861: LD_VAR 0 4
41865: ARRAY
41866: PPUSH
41867: LD_VAR 0 1
41871: PPUSH
41872: CALL_OW 255
41876: PPUSH
41877: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
41881: LD_VAR 0 2
41885: PUSH
41886: LD_VAR 0 4
41890: ARRAY
41891: PPUSH
41892: CALL_OW 141
// end ;
41896: GO 41728
41898: POP
41899: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41900: LD_VAR 0 1
41904: PPUSH
41905: LD_EXP 126
41909: PUSH
41910: LD_VAR 0 5
41914: ARRAY
41915: PUSH
41916: LD_INT 0
41918: PLUS
41919: PPUSH
41920: CALL_OW 505
// end ;
41924: LD_VAR 0 3
41928: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
41929: LD_INT 0
41931: PPUSH
41932: PPUSH
41933: PPUSH
41934: PPUSH
// if not hack in hackTanks then
41935: LD_VAR 0 1
41939: PUSH
41940: LD_EXP 125
41944: IN
41945: NOT
41946: IFFALSE 41950
// exit ;
41948: GO 42190
// index := GetElementIndex ( hackTanks , hack ) ;
41950: LD_ADDR_VAR 0 4
41954: PUSH
41955: LD_EXP 125
41959: PPUSH
41960: LD_VAR 0 1
41964: PPUSH
41965: CALL 49091 0 2
41969: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
41970: LD_ADDR_VAR 0 3
41974: PUSH
41975: DOUBLE
41976: LD_EXP 126
41980: PUSH
41981: LD_VAR 0 4
41985: ARRAY
41986: INC
41987: ST_TO_ADDR
41988: LD_INT 1
41990: PUSH
41991: FOR_DOWNTO
41992: IFFALSE 42164
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
41994: LD_ADDR_VAR 0 5
41998: PUSH
41999: LD_EXP 126
42003: PUSH
42004: LD_VAR 0 4
42008: ARRAY
42009: PUSH
42010: LD_VAR 0 3
42014: ARRAY
42015: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
42016: LD_VAR 0 5
42020: PUSH
42021: LD_INT 1
42023: ARRAY
42024: PPUSH
42025: CALL_OW 302
42029: NOT
42030: PUSH
42031: LD_VAR 0 5
42035: PUSH
42036: LD_INT 1
42038: ARRAY
42039: PPUSH
42040: CALL_OW 255
42044: PUSH
42045: LD_VAR 0 1
42049: PPUSH
42050: CALL_OW 255
42054: NONEQUAL
42055: OR
42056: IFFALSE 42162
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
42058: LD_VAR 0 5
42062: PUSH
42063: LD_INT 1
42065: ARRAY
42066: PPUSH
42067: CALL_OW 305
42071: PUSH
42072: LD_VAR 0 5
42076: PUSH
42077: LD_INT 1
42079: ARRAY
42080: PPUSH
42081: CALL_OW 255
42085: PUSH
42086: LD_VAR 0 1
42090: PPUSH
42091: CALL_OW 255
42095: EQUAL
42096: AND
42097: IFFALSE 42121
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
42099: LD_VAR 0 5
42103: PUSH
42104: LD_INT 1
42106: ARRAY
42107: PPUSH
42108: LD_VAR 0 5
42112: PUSH
42113: LD_INT 2
42115: ARRAY
42116: PPUSH
42117: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
42121: LD_ADDR_EXP 126
42125: PUSH
42126: LD_EXP 126
42130: PPUSH
42131: LD_VAR 0 4
42135: PPUSH
42136: LD_EXP 126
42140: PUSH
42141: LD_VAR 0 4
42145: ARRAY
42146: PPUSH
42147: LD_VAR 0 3
42151: PPUSH
42152: CALL_OW 3
42156: PPUSH
42157: CALL_OW 1
42161: ST_TO_ADDR
// end ; end ;
42162: GO 41991
42164: POP
42165: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
42166: LD_VAR 0 1
42170: PPUSH
42171: LD_EXP 126
42175: PUSH
42176: LD_VAR 0 4
42180: ARRAY
42181: PUSH
42182: LD_INT 0
42184: PLUS
42185: PPUSH
42186: CALL_OW 505
// end ;
42190: LD_VAR 0 2
42194: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
42195: LD_INT 0
42197: PPUSH
42198: PPUSH
42199: PPUSH
42200: PPUSH
// if not hack in hackTanks then
42201: LD_VAR 0 1
42205: PUSH
42206: LD_EXP 125
42210: IN
42211: NOT
42212: IFFALSE 42216
// exit ;
42214: GO 42301
// index := GetElementIndex ( hackTanks , hack ) ;
42216: LD_ADDR_VAR 0 5
42220: PUSH
42221: LD_EXP 125
42225: PPUSH
42226: LD_VAR 0 1
42230: PPUSH
42231: CALL 49091 0 2
42235: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
42236: LD_ADDR_VAR 0 4
42240: PUSH
42241: DOUBLE
42242: LD_INT 1
42244: DEC
42245: ST_TO_ADDR
42246: LD_EXP 126
42250: PUSH
42251: LD_VAR 0 5
42255: ARRAY
42256: PUSH
42257: FOR_TO
42258: IFFALSE 42299
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
42260: LD_EXP 126
42264: PUSH
42265: LD_VAR 0 5
42269: ARRAY
42270: PUSH
42271: LD_VAR 0 4
42275: ARRAY
42276: PUSH
42277: LD_INT 1
42279: ARRAY
42280: PUSH
42281: LD_VAR 0 2
42285: EQUAL
42286: IFFALSE 42297
// KillUnit ( vehicle ) ;
42288: LD_VAR 0 2
42292: PPUSH
42293: CALL_OW 66
42297: GO 42257
42299: POP
42300: POP
// end ;
42301: LD_VAR 0 3
42305: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
42306: LD_EXP 130
42310: NOT
42311: IFFALSE 42346
42313: GO 42315
42315: DISABLE
// begin initMiner := true ;
42316: LD_ADDR_EXP 130
42320: PUSH
42321: LD_INT 1
42323: ST_TO_ADDR
// minersList := [ ] ;
42324: LD_ADDR_EXP 131
42328: PUSH
42329: EMPTY
42330: ST_TO_ADDR
// minerMinesList := [ ] ;
42331: LD_ADDR_EXP 132
42335: PUSH
42336: EMPTY
42337: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
42338: LD_ADDR_EXP 133
42342: PUSH
42343: LD_INT 5
42345: ST_TO_ADDR
// end ;
42346: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
42347: LD_EXP 130
42351: PUSH
42352: LD_INT 34
42354: PUSH
42355: LD_EXP 55
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PPUSH
42364: CALL_OW 69
42368: AND
42369: IFFALSE 42832
42371: GO 42373
42373: DISABLE
42374: LD_INT 0
42376: PPUSH
42377: PPUSH
42378: PPUSH
42379: PPUSH
// begin enable ;
42380: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
42381: LD_ADDR_VAR 0 1
42385: PUSH
42386: LD_INT 34
42388: PUSH
42389: LD_EXP 55
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PPUSH
42398: CALL_OW 69
42402: PUSH
42403: FOR_IN
42404: IFFALSE 42476
// begin if not i in minersList then
42406: LD_VAR 0 1
42410: PUSH
42411: LD_EXP 131
42415: IN
42416: NOT
42417: IFFALSE 42474
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
42419: LD_ADDR_EXP 131
42423: PUSH
42424: LD_EXP 131
42428: PPUSH
42429: LD_EXP 131
42433: PUSH
42434: LD_INT 1
42436: PLUS
42437: PPUSH
42438: LD_VAR 0 1
42442: PPUSH
42443: CALL_OW 1
42447: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
42448: LD_ADDR_EXP 132
42452: PUSH
42453: LD_EXP 132
42457: PPUSH
42458: LD_EXP 132
42462: PUSH
42463: LD_INT 1
42465: PLUS
42466: PPUSH
42467: EMPTY
42468: PPUSH
42469: CALL_OW 1
42473: ST_TO_ADDR
// end end ;
42474: GO 42403
42476: POP
42477: POP
// for i := minerMinesList downto 1 do
42478: LD_ADDR_VAR 0 1
42482: PUSH
42483: DOUBLE
42484: LD_EXP 132
42488: INC
42489: ST_TO_ADDR
42490: LD_INT 1
42492: PUSH
42493: FOR_DOWNTO
42494: IFFALSE 42830
// begin if IsLive ( minersList [ i ] ) then
42496: LD_EXP 131
42500: PUSH
42501: LD_VAR 0 1
42505: ARRAY
42506: PPUSH
42507: CALL_OW 300
42511: IFFALSE 42539
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
42513: LD_EXP 131
42517: PUSH
42518: LD_VAR 0 1
42522: ARRAY
42523: PPUSH
42524: LD_EXP 132
42528: PUSH
42529: LD_VAR 0 1
42533: ARRAY
42534: PPUSH
42535: CALL_OW 505
// if not minerMinesList [ i ] then
42539: LD_EXP 132
42543: PUSH
42544: LD_VAR 0 1
42548: ARRAY
42549: NOT
42550: IFFALSE 42554
// continue ;
42552: GO 42493
// for j := minerMinesList [ i ] downto 1 do
42554: LD_ADDR_VAR 0 2
42558: PUSH
42559: DOUBLE
42560: LD_EXP 132
42564: PUSH
42565: LD_VAR 0 1
42569: ARRAY
42570: INC
42571: ST_TO_ADDR
42572: LD_INT 1
42574: PUSH
42575: FOR_DOWNTO
42576: IFFALSE 42826
// begin side := GetSide ( minersList [ i ] ) ;
42578: LD_ADDR_VAR 0 3
42582: PUSH
42583: LD_EXP 131
42587: PUSH
42588: LD_VAR 0 1
42592: ARRAY
42593: PPUSH
42594: CALL_OW 255
42598: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
42599: LD_ADDR_VAR 0 4
42603: PUSH
42604: LD_EXP 132
42608: PUSH
42609: LD_VAR 0 1
42613: ARRAY
42614: PUSH
42615: LD_VAR 0 2
42619: ARRAY
42620: PUSH
42621: LD_INT 1
42623: ARRAY
42624: PPUSH
42625: LD_EXP 132
42629: PUSH
42630: LD_VAR 0 1
42634: ARRAY
42635: PUSH
42636: LD_VAR 0 2
42640: ARRAY
42641: PUSH
42642: LD_INT 2
42644: ARRAY
42645: PPUSH
42646: CALL_OW 428
42650: ST_TO_ADDR
// if not tmp then
42651: LD_VAR 0 4
42655: NOT
42656: IFFALSE 42660
// continue ;
42658: GO 42575
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
42660: LD_VAR 0 4
42664: PUSH
42665: LD_INT 81
42667: PUSH
42668: LD_VAR 0 3
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PPUSH
42677: CALL_OW 69
42681: IN
42682: PUSH
42683: LD_EXP 132
42687: PUSH
42688: LD_VAR 0 1
42692: ARRAY
42693: PUSH
42694: LD_VAR 0 2
42698: ARRAY
42699: PUSH
42700: LD_INT 1
42702: ARRAY
42703: PPUSH
42704: LD_EXP 132
42708: PUSH
42709: LD_VAR 0 1
42713: ARRAY
42714: PUSH
42715: LD_VAR 0 2
42719: ARRAY
42720: PUSH
42721: LD_INT 2
42723: ARRAY
42724: PPUSH
42725: CALL_OW 458
42729: AND
42730: IFFALSE 42824
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
42732: LD_EXP 132
42736: PUSH
42737: LD_VAR 0 1
42741: ARRAY
42742: PUSH
42743: LD_VAR 0 2
42747: ARRAY
42748: PUSH
42749: LD_INT 1
42751: ARRAY
42752: PPUSH
42753: LD_EXP 132
42757: PUSH
42758: LD_VAR 0 1
42762: ARRAY
42763: PUSH
42764: LD_VAR 0 2
42768: ARRAY
42769: PUSH
42770: LD_INT 2
42772: ARRAY
42773: PPUSH
42774: LD_VAR 0 3
42778: PPUSH
42779: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
42783: LD_ADDR_EXP 132
42787: PUSH
42788: LD_EXP 132
42792: PPUSH
42793: LD_VAR 0 1
42797: PPUSH
42798: LD_EXP 132
42802: PUSH
42803: LD_VAR 0 1
42807: ARRAY
42808: PPUSH
42809: LD_VAR 0 2
42813: PPUSH
42814: CALL_OW 3
42818: PPUSH
42819: CALL_OW 1
42823: ST_TO_ADDR
// end ; end ;
42824: GO 42575
42826: POP
42827: POP
// end ;
42828: GO 42493
42830: POP
42831: POP
// end ;
42832: PPOPN 4
42834: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
42835: LD_INT 0
42837: PPUSH
42838: PPUSH
// result := false ;
42839: LD_ADDR_VAR 0 4
42843: PUSH
42844: LD_INT 0
42846: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
42847: LD_VAR 0 1
42851: PPUSH
42852: CALL_OW 264
42856: PUSH
42857: LD_EXP 55
42861: EQUAL
42862: NOT
42863: IFFALSE 42867
// exit ;
42865: GO 43107
// index := GetElementIndex ( minersList , unit ) ;
42867: LD_ADDR_VAR 0 5
42871: PUSH
42872: LD_EXP 131
42876: PPUSH
42877: LD_VAR 0 1
42881: PPUSH
42882: CALL 49091 0 2
42886: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
42887: LD_EXP 132
42891: PUSH
42892: LD_VAR 0 5
42896: ARRAY
42897: PUSH
42898: LD_EXP 133
42902: GREATEREQUAL
42903: IFFALSE 42907
// exit ;
42905: GO 43107
// ComMoveXY ( unit , x , y ) ;
42907: LD_VAR 0 1
42911: PPUSH
42912: LD_VAR 0 2
42916: PPUSH
42917: LD_VAR 0 3
42921: PPUSH
42922: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42926: LD_INT 35
42928: PPUSH
42929: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
42933: LD_VAR 0 1
42937: PPUSH
42938: LD_VAR 0 2
42942: PPUSH
42943: LD_VAR 0 3
42947: PPUSH
42948: CALL 79864 0 3
42952: NOT
42953: PUSH
42954: LD_VAR 0 1
42958: PPUSH
42959: CALL_OW 314
42963: AND
42964: IFFALSE 42968
// exit ;
42966: GO 43107
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
42968: LD_VAR 0 2
42972: PPUSH
42973: LD_VAR 0 3
42977: PPUSH
42978: CALL_OW 428
42982: PUSH
42983: LD_VAR 0 1
42987: EQUAL
42988: PUSH
42989: LD_VAR 0 1
42993: PPUSH
42994: CALL_OW 314
42998: NOT
42999: AND
43000: IFFALSE 42926
// PlaySoundXY ( x , y , PlantMine ) ;
43002: LD_VAR 0 2
43006: PPUSH
43007: LD_VAR 0 3
43011: PPUSH
43012: LD_STRING PlantMine
43014: PPUSH
43015: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
43019: LD_VAR 0 2
43023: PPUSH
43024: LD_VAR 0 3
43028: PPUSH
43029: LD_VAR 0 1
43033: PPUSH
43034: CALL_OW 255
43038: PPUSH
43039: LD_INT 0
43041: PPUSH
43042: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
43046: LD_ADDR_EXP 132
43050: PUSH
43051: LD_EXP 132
43055: PPUSH
43056: LD_VAR 0 5
43060: PUSH
43061: LD_EXP 132
43065: PUSH
43066: LD_VAR 0 5
43070: ARRAY
43071: PUSH
43072: LD_INT 1
43074: PLUS
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PPUSH
43080: LD_VAR 0 2
43084: PUSH
43085: LD_VAR 0 3
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PPUSH
43094: CALL 49306 0 3
43098: ST_TO_ADDR
// result := true ;
43099: LD_ADDR_VAR 0 4
43103: PUSH
43104: LD_INT 1
43106: ST_TO_ADDR
// end ;
43107: LD_VAR 0 4
43111: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
43112: LD_INT 0
43114: PPUSH
43115: PPUSH
43116: PPUSH
// if not unit in minersList then
43117: LD_VAR 0 1
43121: PUSH
43122: LD_EXP 131
43126: IN
43127: NOT
43128: IFFALSE 43132
// exit ;
43130: GO 43524
// index := GetElementIndex ( minersList , unit ) ;
43132: LD_ADDR_VAR 0 6
43136: PUSH
43137: LD_EXP 131
43141: PPUSH
43142: LD_VAR 0 1
43146: PPUSH
43147: CALL 49091 0 2
43151: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
43152: LD_ADDR_VAR 0 5
43156: PUSH
43157: DOUBLE
43158: LD_EXP 132
43162: PUSH
43163: LD_VAR 0 6
43167: ARRAY
43168: INC
43169: ST_TO_ADDR
43170: LD_INT 1
43172: PUSH
43173: FOR_DOWNTO
43174: IFFALSE 43335
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
43176: LD_EXP 132
43180: PUSH
43181: LD_VAR 0 6
43185: ARRAY
43186: PUSH
43187: LD_VAR 0 5
43191: ARRAY
43192: PUSH
43193: LD_INT 1
43195: ARRAY
43196: PUSH
43197: LD_VAR 0 2
43201: EQUAL
43202: PUSH
43203: LD_EXP 132
43207: PUSH
43208: LD_VAR 0 6
43212: ARRAY
43213: PUSH
43214: LD_VAR 0 5
43218: ARRAY
43219: PUSH
43220: LD_INT 2
43222: ARRAY
43223: PUSH
43224: LD_VAR 0 3
43228: EQUAL
43229: AND
43230: IFFALSE 43333
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43232: LD_EXP 132
43236: PUSH
43237: LD_VAR 0 6
43241: ARRAY
43242: PUSH
43243: LD_VAR 0 5
43247: ARRAY
43248: PUSH
43249: LD_INT 1
43251: ARRAY
43252: PPUSH
43253: LD_EXP 132
43257: PUSH
43258: LD_VAR 0 6
43262: ARRAY
43263: PUSH
43264: LD_VAR 0 5
43268: ARRAY
43269: PUSH
43270: LD_INT 2
43272: ARRAY
43273: PPUSH
43274: LD_VAR 0 1
43278: PPUSH
43279: CALL_OW 255
43283: PPUSH
43284: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43288: LD_ADDR_EXP 132
43292: PUSH
43293: LD_EXP 132
43297: PPUSH
43298: LD_VAR 0 6
43302: PPUSH
43303: LD_EXP 132
43307: PUSH
43308: LD_VAR 0 6
43312: ARRAY
43313: PPUSH
43314: LD_VAR 0 5
43318: PPUSH
43319: CALL_OW 3
43323: PPUSH
43324: CALL_OW 1
43328: ST_TO_ADDR
// exit ;
43329: POP
43330: POP
43331: GO 43524
// end ; end ;
43333: GO 43173
43335: POP
43336: POP
// for i := minerMinesList [ index ] downto 1 do
43337: LD_ADDR_VAR 0 5
43341: PUSH
43342: DOUBLE
43343: LD_EXP 132
43347: PUSH
43348: LD_VAR 0 6
43352: ARRAY
43353: INC
43354: ST_TO_ADDR
43355: LD_INT 1
43357: PUSH
43358: FOR_DOWNTO
43359: IFFALSE 43522
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
43361: LD_EXP 132
43365: PUSH
43366: LD_VAR 0 6
43370: ARRAY
43371: PUSH
43372: LD_VAR 0 5
43376: ARRAY
43377: PUSH
43378: LD_INT 1
43380: ARRAY
43381: PPUSH
43382: LD_EXP 132
43386: PUSH
43387: LD_VAR 0 6
43391: ARRAY
43392: PUSH
43393: LD_VAR 0 5
43397: ARRAY
43398: PUSH
43399: LD_INT 2
43401: ARRAY
43402: PPUSH
43403: LD_VAR 0 2
43407: PPUSH
43408: LD_VAR 0 3
43412: PPUSH
43413: CALL_OW 298
43417: PUSH
43418: LD_INT 6
43420: LESS
43421: IFFALSE 43520
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43423: LD_EXP 132
43427: PUSH
43428: LD_VAR 0 6
43432: ARRAY
43433: PUSH
43434: LD_VAR 0 5
43438: ARRAY
43439: PUSH
43440: LD_INT 1
43442: ARRAY
43443: PPUSH
43444: LD_EXP 132
43448: PUSH
43449: LD_VAR 0 6
43453: ARRAY
43454: PUSH
43455: LD_VAR 0 5
43459: ARRAY
43460: PUSH
43461: LD_INT 2
43463: ARRAY
43464: PPUSH
43465: LD_VAR 0 1
43469: PPUSH
43470: CALL_OW 255
43474: PPUSH
43475: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43479: LD_ADDR_EXP 132
43483: PUSH
43484: LD_EXP 132
43488: PPUSH
43489: LD_VAR 0 6
43493: PPUSH
43494: LD_EXP 132
43498: PUSH
43499: LD_VAR 0 6
43503: ARRAY
43504: PPUSH
43505: LD_VAR 0 5
43509: PPUSH
43510: CALL_OW 3
43514: PPUSH
43515: CALL_OW 1
43519: ST_TO_ADDR
// end ; end ;
43520: GO 43358
43522: POP
43523: POP
// end ;
43524: LD_VAR 0 4
43528: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
43529: LD_INT 0
43531: PPUSH
43532: PPUSH
43533: PPUSH
43534: PPUSH
43535: PPUSH
43536: PPUSH
43537: PPUSH
43538: PPUSH
43539: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
43540: LD_VAR 0 1
43544: PPUSH
43545: CALL_OW 264
43549: PUSH
43550: LD_EXP 55
43554: EQUAL
43555: NOT
43556: PUSH
43557: LD_VAR 0 1
43561: PUSH
43562: LD_EXP 131
43566: IN
43567: NOT
43568: OR
43569: IFFALSE 43573
// exit ;
43571: GO 43895
// index := GetElementIndex ( minersList , unit ) ;
43573: LD_ADDR_VAR 0 6
43577: PUSH
43578: LD_EXP 131
43582: PPUSH
43583: LD_VAR 0 1
43587: PPUSH
43588: CALL 49091 0 2
43592: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
43593: LD_ADDR_VAR 0 8
43597: PUSH
43598: LD_EXP 133
43602: PUSH
43603: LD_EXP 132
43607: PUSH
43608: LD_VAR 0 6
43612: ARRAY
43613: MINUS
43614: ST_TO_ADDR
// if not minesFreeAmount then
43615: LD_VAR 0 8
43619: NOT
43620: IFFALSE 43624
// exit ;
43622: GO 43895
// tmp := [ ] ;
43624: LD_ADDR_VAR 0 7
43628: PUSH
43629: EMPTY
43630: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
43631: LD_ADDR_VAR 0 5
43635: PUSH
43636: DOUBLE
43637: LD_INT 1
43639: DEC
43640: ST_TO_ADDR
43641: LD_VAR 0 8
43645: PUSH
43646: FOR_TO
43647: IFFALSE 43842
// begin _d := rand ( 0 , 5 ) ;
43649: LD_ADDR_VAR 0 11
43653: PUSH
43654: LD_INT 0
43656: PPUSH
43657: LD_INT 5
43659: PPUSH
43660: CALL_OW 12
43664: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
43665: LD_ADDR_VAR 0 12
43669: PUSH
43670: LD_INT 2
43672: PPUSH
43673: LD_INT 6
43675: PPUSH
43676: CALL_OW 12
43680: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
43681: LD_ADDR_VAR 0 9
43685: PUSH
43686: LD_VAR 0 2
43690: PPUSH
43691: LD_VAR 0 11
43695: PPUSH
43696: LD_VAR 0 12
43700: PPUSH
43701: CALL_OW 272
43705: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
43706: LD_ADDR_VAR 0 10
43710: PUSH
43711: LD_VAR 0 3
43715: PPUSH
43716: LD_VAR 0 11
43720: PPUSH
43721: LD_VAR 0 12
43725: PPUSH
43726: CALL_OW 273
43730: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
43731: LD_VAR 0 9
43735: PPUSH
43736: LD_VAR 0 10
43740: PPUSH
43741: CALL_OW 488
43745: PUSH
43746: LD_VAR 0 9
43750: PUSH
43751: LD_VAR 0 10
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_VAR 0 7
43764: IN
43765: NOT
43766: AND
43767: PUSH
43768: LD_VAR 0 9
43772: PPUSH
43773: LD_VAR 0 10
43777: PPUSH
43778: CALL_OW 458
43782: NOT
43783: AND
43784: IFFALSE 43826
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
43786: LD_ADDR_VAR 0 7
43790: PUSH
43791: LD_VAR 0 7
43795: PPUSH
43796: LD_VAR 0 7
43800: PUSH
43801: LD_INT 1
43803: PLUS
43804: PPUSH
43805: LD_VAR 0 9
43809: PUSH
43810: LD_VAR 0 10
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PPUSH
43819: CALL_OW 1
43823: ST_TO_ADDR
43824: GO 43840
// i := i - 1 ;
43826: LD_ADDR_VAR 0 5
43830: PUSH
43831: LD_VAR 0 5
43835: PUSH
43836: LD_INT 1
43838: MINUS
43839: ST_TO_ADDR
// end ;
43840: GO 43646
43842: POP
43843: POP
// for i in tmp do
43844: LD_ADDR_VAR 0 5
43848: PUSH
43849: LD_VAR 0 7
43853: PUSH
43854: FOR_IN
43855: IFFALSE 43893
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
43857: LD_VAR 0 1
43861: PPUSH
43862: LD_VAR 0 5
43866: PUSH
43867: LD_INT 1
43869: ARRAY
43870: PPUSH
43871: LD_VAR 0 5
43875: PUSH
43876: LD_INT 2
43878: ARRAY
43879: PPUSH
43880: CALL 42835 0 3
43884: NOT
43885: IFFALSE 43891
// exit ;
43887: POP
43888: POP
43889: GO 43895
43891: GO 43854
43893: POP
43894: POP
// end ;
43895: LD_VAR 0 4
43899: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
43900: LD_INT 0
43902: PPUSH
43903: PPUSH
43904: PPUSH
43905: PPUSH
43906: PPUSH
43907: PPUSH
43908: PPUSH
// if not GetClass ( unit ) = class_sniper then
43909: LD_VAR 0 1
43913: PPUSH
43914: CALL_OW 257
43918: PUSH
43919: LD_INT 5
43921: EQUAL
43922: NOT
43923: IFFALSE 43927
// exit ;
43925: GO 44315
// dist := 8 ;
43927: LD_ADDR_VAR 0 5
43931: PUSH
43932: LD_INT 8
43934: ST_TO_ADDR
// viewRange := 12 ;
43935: LD_ADDR_VAR 0 7
43939: PUSH
43940: LD_INT 12
43942: ST_TO_ADDR
// side := GetSide ( unit ) ;
43943: LD_ADDR_VAR 0 6
43947: PUSH
43948: LD_VAR 0 1
43952: PPUSH
43953: CALL_OW 255
43957: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
43958: LD_INT 61
43960: PPUSH
43961: LD_VAR 0 6
43965: PPUSH
43966: CALL_OW 321
43970: PUSH
43971: LD_INT 2
43973: EQUAL
43974: IFFALSE 43984
// viewRange := 16 ;
43976: LD_ADDR_VAR 0 7
43980: PUSH
43981: LD_INT 16
43983: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
43984: LD_VAR 0 1
43988: PPUSH
43989: LD_VAR 0 2
43993: PPUSH
43994: LD_VAR 0 3
43998: PPUSH
43999: CALL_OW 297
44003: PUSH
44004: LD_VAR 0 5
44008: GREATER
44009: IFFALSE 44088
// begin ComMoveXY ( unit , x , y ) ;
44011: LD_VAR 0 1
44015: PPUSH
44016: LD_VAR 0 2
44020: PPUSH
44021: LD_VAR 0 3
44025: PPUSH
44026: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
44030: LD_INT 35
44032: PPUSH
44033: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
44037: LD_VAR 0 1
44041: PPUSH
44042: LD_VAR 0 2
44046: PPUSH
44047: LD_VAR 0 3
44051: PPUSH
44052: CALL 79864 0 3
44056: NOT
44057: IFFALSE 44061
// exit ;
44059: GO 44315
// until GetDistUnitXY ( unit , x , y ) < dist ;
44061: LD_VAR 0 1
44065: PPUSH
44066: LD_VAR 0 2
44070: PPUSH
44071: LD_VAR 0 3
44075: PPUSH
44076: CALL_OW 297
44080: PUSH
44081: LD_VAR 0 5
44085: LESS
44086: IFFALSE 44030
// end ; ComTurnXY ( unit , x , y ) ;
44088: LD_VAR 0 1
44092: PPUSH
44093: LD_VAR 0 2
44097: PPUSH
44098: LD_VAR 0 3
44102: PPUSH
44103: CALL_OW 118
// wait ( 5 ) ;
44107: LD_INT 5
44109: PPUSH
44110: CALL_OW 67
// _d := GetDir ( unit ) ;
44114: LD_ADDR_VAR 0 10
44118: PUSH
44119: LD_VAR 0 1
44123: PPUSH
44124: CALL_OW 254
44128: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
44129: LD_ADDR_VAR 0 8
44133: PUSH
44134: LD_VAR 0 1
44138: PPUSH
44139: CALL_OW 250
44143: PPUSH
44144: LD_VAR 0 10
44148: PPUSH
44149: LD_VAR 0 5
44153: PPUSH
44154: CALL_OW 272
44158: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
44159: LD_ADDR_VAR 0 9
44163: PUSH
44164: LD_VAR 0 1
44168: PPUSH
44169: CALL_OW 251
44173: PPUSH
44174: LD_VAR 0 10
44178: PPUSH
44179: LD_VAR 0 5
44183: PPUSH
44184: CALL_OW 273
44188: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44189: LD_VAR 0 8
44193: PPUSH
44194: LD_VAR 0 9
44198: PPUSH
44199: CALL_OW 488
44203: NOT
44204: IFFALSE 44208
// exit ;
44206: GO 44315
// ComAnimCustom ( unit , 1 ) ;
44208: LD_VAR 0 1
44212: PPUSH
44213: LD_INT 1
44215: PPUSH
44216: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
44220: LD_VAR 0 8
44224: PPUSH
44225: LD_VAR 0 9
44229: PPUSH
44230: LD_VAR 0 6
44234: PPUSH
44235: LD_VAR 0 7
44239: PPUSH
44240: CALL_OW 330
// repeat wait ( 1 ) ;
44244: LD_INT 1
44246: PPUSH
44247: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
44251: LD_VAR 0 1
44255: PPUSH
44256: CALL_OW 316
44260: PUSH
44261: LD_VAR 0 1
44265: PPUSH
44266: CALL_OW 314
44270: OR
44271: PUSH
44272: LD_VAR 0 1
44276: PPUSH
44277: CALL_OW 302
44281: NOT
44282: OR
44283: PUSH
44284: LD_VAR 0 1
44288: PPUSH
44289: CALL_OW 301
44293: OR
44294: IFFALSE 44244
// RemoveSeeing ( _x , _y , side ) ;
44296: LD_VAR 0 8
44300: PPUSH
44301: LD_VAR 0 9
44305: PPUSH
44306: LD_VAR 0 6
44310: PPUSH
44311: CALL_OW 331
// end ; end_of_file
44315: LD_VAR 0 4
44319: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
44320: LD_INT 0
44322: PPUSH
44323: PPUSH
// if exist_mode then
44324: LD_VAR 0 2
44328: IFFALSE 44353
// unit := CreateCharacter ( prefix & ident ) else
44330: LD_ADDR_VAR 0 5
44334: PUSH
44335: LD_VAR 0 3
44339: PUSH
44340: LD_VAR 0 1
44344: STR
44345: PPUSH
44346: CALL_OW 34
44350: ST_TO_ADDR
44351: GO 44368
// unit := NewCharacter ( ident ) ;
44353: LD_ADDR_VAR 0 5
44357: PUSH
44358: LD_VAR 0 1
44362: PPUSH
44363: CALL_OW 25
44367: ST_TO_ADDR
// result := unit ;
44368: LD_ADDR_VAR 0 4
44372: PUSH
44373: LD_VAR 0 5
44377: ST_TO_ADDR
// end ;
44378: LD_VAR 0 4
44382: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
44383: LD_INT 0
44385: PPUSH
44386: PPUSH
// if not side or not nation then
44387: LD_VAR 0 1
44391: NOT
44392: PUSH
44393: LD_VAR 0 2
44397: NOT
44398: OR
44399: IFFALSE 44403
// exit ;
44401: GO 45171
// case nation of nation_american :
44403: LD_VAR 0 2
44407: PUSH
44408: LD_INT 1
44410: DOUBLE
44411: EQUAL
44412: IFTRUE 44416
44414: GO 44630
44416: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
44417: LD_ADDR_VAR 0 4
44421: PUSH
44422: LD_INT 35
44424: PUSH
44425: LD_INT 45
44427: PUSH
44428: LD_INT 46
44430: PUSH
44431: LD_INT 47
44433: PUSH
44434: LD_INT 82
44436: PUSH
44437: LD_INT 83
44439: PUSH
44440: LD_INT 84
44442: PUSH
44443: LD_INT 85
44445: PUSH
44446: LD_INT 86
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: LD_INT 2
44454: PUSH
44455: LD_INT 6
44457: PUSH
44458: LD_INT 15
44460: PUSH
44461: LD_INT 16
44463: PUSH
44464: LD_INT 7
44466: PUSH
44467: LD_INT 12
44469: PUSH
44470: LD_INT 13
44472: PUSH
44473: LD_INT 10
44475: PUSH
44476: LD_INT 14
44478: PUSH
44479: LD_INT 20
44481: PUSH
44482: LD_INT 21
44484: PUSH
44485: LD_INT 22
44487: PUSH
44488: LD_INT 25
44490: PUSH
44491: LD_INT 32
44493: PUSH
44494: LD_INT 27
44496: PUSH
44497: LD_INT 36
44499: PUSH
44500: LD_INT 69
44502: PUSH
44503: LD_INT 39
44505: PUSH
44506: LD_INT 34
44508: PUSH
44509: LD_INT 40
44511: PUSH
44512: LD_INT 48
44514: PUSH
44515: LD_INT 49
44517: PUSH
44518: LD_INT 50
44520: PUSH
44521: LD_INT 51
44523: PUSH
44524: LD_INT 52
44526: PUSH
44527: LD_INT 53
44529: PUSH
44530: LD_INT 54
44532: PUSH
44533: LD_INT 55
44535: PUSH
44536: LD_INT 56
44538: PUSH
44539: LD_INT 57
44541: PUSH
44542: LD_INT 58
44544: PUSH
44545: LD_INT 59
44547: PUSH
44548: LD_INT 60
44550: PUSH
44551: LD_INT 61
44553: PUSH
44554: LD_INT 62
44556: PUSH
44557: LD_INT 80
44559: PUSH
44560: LD_INT 82
44562: PUSH
44563: LD_INT 83
44565: PUSH
44566: LD_INT 84
44568: PUSH
44569: LD_INT 85
44571: PUSH
44572: LD_INT 86
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: ST_TO_ADDR
44628: GO 45095
44630: LD_INT 2
44632: DOUBLE
44633: EQUAL
44634: IFTRUE 44638
44636: GO 44864
44638: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
44639: LD_ADDR_VAR 0 4
44643: PUSH
44644: LD_INT 35
44646: PUSH
44647: LD_INT 45
44649: PUSH
44650: LD_INT 46
44652: PUSH
44653: LD_INT 47
44655: PUSH
44656: LD_INT 82
44658: PUSH
44659: LD_INT 83
44661: PUSH
44662: LD_INT 84
44664: PUSH
44665: LD_INT 85
44667: PUSH
44668: LD_INT 87
44670: PUSH
44671: LD_INT 70
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: LD_INT 11
44679: PUSH
44680: LD_INT 3
44682: PUSH
44683: LD_INT 4
44685: PUSH
44686: LD_INT 5
44688: PUSH
44689: LD_INT 6
44691: PUSH
44692: LD_INT 15
44694: PUSH
44695: LD_INT 18
44697: PUSH
44698: LD_INT 7
44700: PUSH
44701: LD_INT 17
44703: PUSH
44704: LD_INT 8
44706: PUSH
44707: LD_INT 20
44709: PUSH
44710: LD_INT 21
44712: PUSH
44713: LD_INT 22
44715: PUSH
44716: LD_INT 72
44718: PUSH
44719: LD_INT 26
44721: PUSH
44722: LD_INT 69
44724: PUSH
44725: LD_INT 39
44727: PUSH
44728: LD_INT 40
44730: PUSH
44731: LD_INT 41
44733: PUSH
44734: LD_INT 42
44736: PUSH
44737: LD_INT 43
44739: PUSH
44740: LD_INT 48
44742: PUSH
44743: LD_INT 49
44745: PUSH
44746: LD_INT 50
44748: PUSH
44749: LD_INT 51
44751: PUSH
44752: LD_INT 52
44754: PUSH
44755: LD_INT 53
44757: PUSH
44758: LD_INT 54
44760: PUSH
44761: LD_INT 55
44763: PUSH
44764: LD_INT 56
44766: PUSH
44767: LD_INT 60
44769: PUSH
44770: LD_INT 61
44772: PUSH
44773: LD_INT 62
44775: PUSH
44776: LD_INT 66
44778: PUSH
44779: LD_INT 67
44781: PUSH
44782: LD_INT 68
44784: PUSH
44785: LD_INT 81
44787: PUSH
44788: LD_INT 82
44790: PUSH
44791: LD_INT 83
44793: PUSH
44794: LD_INT 84
44796: PUSH
44797: LD_INT 85
44799: PUSH
44800: LD_INT 87
44802: PUSH
44803: LD_INT 88
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: ST_TO_ADDR
44862: GO 45095
44864: LD_INT 3
44866: DOUBLE
44867: EQUAL
44868: IFTRUE 44872
44870: GO 45094
44872: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
44873: LD_ADDR_VAR 0 4
44877: PUSH
44878: LD_INT 46
44880: PUSH
44881: LD_INT 47
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: LD_INT 2
44889: PUSH
44890: LD_INT 82
44892: PUSH
44893: LD_INT 83
44895: PUSH
44896: LD_INT 84
44898: PUSH
44899: LD_INT 85
44901: PUSH
44902: LD_INT 86
44904: PUSH
44905: LD_INT 11
44907: PUSH
44908: LD_INT 9
44910: PUSH
44911: LD_INT 20
44913: PUSH
44914: LD_INT 19
44916: PUSH
44917: LD_INT 21
44919: PUSH
44920: LD_INT 24
44922: PUSH
44923: LD_INT 22
44925: PUSH
44926: LD_INT 25
44928: PUSH
44929: LD_INT 28
44931: PUSH
44932: LD_INT 29
44934: PUSH
44935: LD_INT 30
44937: PUSH
44938: LD_INT 31
44940: PUSH
44941: LD_INT 37
44943: PUSH
44944: LD_INT 38
44946: PUSH
44947: LD_INT 32
44949: PUSH
44950: LD_INT 27
44952: PUSH
44953: LD_INT 33
44955: PUSH
44956: LD_INT 69
44958: PUSH
44959: LD_INT 39
44961: PUSH
44962: LD_INT 34
44964: PUSH
44965: LD_INT 40
44967: PUSH
44968: LD_INT 71
44970: PUSH
44971: LD_INT 23
44973: PUSH
44974: LD_INT 44
44976: PUSH
44977: LD_INT 48
44979: PUSH
44980: LD_INT 49
44982: PUSH
44983: LD_INT 50
44985: PUSH
44986: LD_INT 51
44988: PUSH
44989: LD_INT 52
44991: PUSH
44992: LD_INT 53
44994: PUSH
44995: LD_INT 54
44997: PUSH
44998: LD_INT 55
45000: PUSH
45001: LD_INT 56
45003: PUSH
45004: LD_INT 57
45006: PUSH
45007: LD_INT 58
45009: PUSH
45010: LD_INT 59
45012: PUSH
45013: LD_INT 63
45015: PUSH
45016: LD_INT 64
45018: PUSH
45019: LD_INT 65
45021: PUSH
45022: LD_INT 82
45024: PUSH
45025: LD_INT 83
45027: PUSH
45028: LD_INT 84
45030: PUSH
45031: LD_INT 85
45033: PUSH
45034: LD_INT 86
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: ST_TO_ADDR
45092: GO 45095
45094: POP
// if state > - 1 and state < 3 then
45095: LD_VAR 0 3
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: GREATER
45104: PUSH
45105: LD_VAR 0 3
45109: PUSH
45110: LD_INT 3
45112: LESS
45113: AND
45114: IFFALSE 45171
// for i in result do
45116: LD_ADDR_VAR 0 5
45120: PUSH
45121: LD_VAR 0 4
45125: PUSH
45126: FOR_IN
45127: IFFALSE 45169
// if GetTech ( i , side ) <> state then
45129: LD_VAR 0 5
45133: PPUSH
45134: LD_VAR 0 1
45138: PPUSH
45139: CALL_OW 321
45143: PUSH
45144: LD_VAR 0 3
45148: NONEQUAL
45149: IFFALSE 45167
// result := result diff i ;
45151: LD_ADDR_VAR 0 4
45155: PUSH
45156: LD_VAR 0 4
45160: PUSH
45161: LD_VAR 0 5
45165: DIFF
45166: ST_TO_ADDR
45167: GO 45126
45169: POP
45170: POP
// end ;
45171: LD_VAR 0 4
45175: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
45176: LD_INT 0
45178: PPUSH
45179: PPUSH
45180: PPUSH
// result := true ;
45181: LD_ADDR_VAR 0 3
45185: PUSH
45186: LD_INT 1
45188: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
45189: LD_ADDR_VAR 0 5
45193: PUSH
45194: LD_VAR 0 2
45198: PPUSH
45199: CALL_OW 480
45203: ST_TO_ADDR
// if not tmp then
45204: LD_VAR 0 5
45208: NOT
45209: IFFALSE 45213
// exit ;
45211: GO 45262
// for i in tmp do
45213: LD_ADDR_VAR 0 4
45217: PUSH
45218: LD_VAR 0 5
45222: PUSH
45223: FOR_IN
45224: IFFALSE 45260
// if GetTech ( i , side ) <> state_researched then
45226: LD_VAR 0 4
45230: PPUSH
45231: LD_VAR 0 1
45235: PPUSH
45236: CALL_OW 321
45240: PUSH
45241: LD_INT 2
45243: NONEQUAL
45244: IFFALSE 45258
// begin result := false ;
45246: LD_ADDR_VAR 0 3
45250: PUSH
45251: LD_INT 0
45253: ST_TO_ADDR
// exit ;
45254: POP
45255: POP
45256: GO 45262
// end ;
45258: GO 45223
45260: POP
45261: POP
// end ;
45262: LD_VAR 0 3
45266: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
45267: LD_INT 0
45269: PPUSH
45270: PPUSH
45271: PPUSH
45272: PPUSH
45273: PPUSH
45274: PPUSH
45275: PPUSH
45276: PPUSH
45277: PPUSH
45278: PPUSH
45279: PPUSH
45280: PPUSH
45281: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
45282: LD_VAR 0 1
45286: NOT
45287: PUSH
45288: LD_VAR 0 1
45292: PPUSH
45293: CALL_OW 257
45297: PUSH
45298: LD_INT 9
45300: NONEQUAL
45301: OR
45302: IFFALSE 45306
// exit ;
45304: GO 45879
// side := GetSide ( unit ) ;
45306: LD_ADDR_VAR 0 9
45310: PUSH
45311: LD_VAR 0 1
45315: PPUSH
45316: CALL_OW 255
45320: ST_TO_ADDR
// tech_space := tech_spacanom ;
45321: LD_ADDR_VAR 0 12
45325: PUSH
45326: LD_INT 29
45328: ST_TO_ADDR
// tech_time := tech_taurad ;
45329: LD_ADDR_VAR 0 13
45333: PUSH
45334: LD_INT 28
45336: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
45337: LD_ADDR_VAR 0 11
45341: PUSH
45342: LD_VAR 0 1
45346: PPUSH
45347: CALL_OW 310
45351: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
45352: LD_VAR 0 11
45356: PPUSH
45357: CALL_OW 247
45361: PUSH
45362: LD_INT 2
45364: EQUAL
45365: IFFALSE 45369
// exit ;
45367: GO 45879
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45369: LD_ADDR_VAR 0 8
45373: PUSH
45374: LD_INT 81
45376: PUSH
45377: LD_VAR 0 9
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 3
45388: PUSH
45389: LD_INT 21
45391: PUSH
45392: LD_INT 3
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PPUSH
45407: CALL_OW 69
45411: ST_TO_ADDR
// if not tmp then
45412: LD_VAR 0 8
45416: NOT
45417: IFFALSE 45421
// exit ;
45419: GO 45879
// if in_unit then
45421: LD_VAR 0 11
45425: IFFALSE 45449
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
45427: LD_ADDR_VAR 0 10
45431: PUSH
45432: LD_VAR 0 8
45436: PPUSH
45437: LD_VAR 0 11
45441: PPUSH
45442: CALL_OW 74
45446: ST_TO_ADDR
45447: GO 45469
// enemy := NearestUnitToUnit ( tmp , unit ) ;
45449: LD_ADDR_VAR 0 10
45453: PUSH
45454: LD_VAR 0 8
45458: PPUSH
45459: LD_VAR 0 1
45463: PPUSH
45464: CALL_OW 74
45468: ST_TO_ADDR
// if not enemy then
45469: LD_VAR 0 10
45473: NOT
45474: IFFALSE 45478
// exit ;
45476: GO 45879
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
45478: LD_VAR 0 11
45482: PUSH
45483: LD_VAR 0 11
45487: PPUSH
45488: LD_VAR 0 10
45492: PPUSH
45493: CALL_OW 296
45497: PUSH
45498: LD_INT 13
45500: GREATER
45501: AND
45502: PUSH
45503: LD_VAR 0 1
45507: PPUSH
45508: LD_VAR 0 10
45512: PPUSH
45513: CALL_OW 296
45517: PUSH
45518: LD_INT 12
45520: GREATER
45521: OR
45522: IFFALSE 45526
// exit ;
45524: GO 45879
// missile := [ 1 ] ;
45526: LD_ADDR_VAR 0 14
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: EMPTY
45535: LIST
45536: ST_TO_ADDR
// if Researched ( side , tech_space ) then
45537: LD_VAR 0 9
45541: PPUSH
45542: LD_VAR 0 12
45546: PPUSH
45547: CALL_OW 325
45551: IFFALSE 45580
// missile := Insert ( missile , missile + 1 , 2 ) ;
45553: LD_ADDR_VAR 0 14
45557: PUSH
45558: LD_VAR 0 14
45562: PPUSH
45563: LD_VAR 0 14
45567: PUSH
45568: LD_INT 1
45570: PLUS
45571: PPUSH
45572: LD_INT 2
45574: PPUSH
45575: CALL_OW 2
45579: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
45580: LD_VAR 0 9
45584: PPUSH
45585: LD_VAR 0 13
45589: PPUSH
45590: CALL_OW 325
45594: PUSH
45595: LD_VAR 0 10
45599: PPUSH
45600: CALL_OW 255
45604: PPUSH
45605: LD_VAR 0 13
45609: PPUSH
45610: CALL_OW 325
45614: NOT
45615: AND
45616: IFFALSE 45645
// missile := Insert ( missile , missile + 1 , 3 ) ;
45618: LD_ADDR_VAR 0 14
45622: PUSH
45623: LD_VAR 0 14
45627: PPUSH
45628: LD_VAR 0 14
45632: PUSH
45633: LD_INT 1
45635: PLUS
45636: PPUSH
45637: LD_INT 3
45639: PPUSH
45640: CALL_OW 2
45644: ST_TO_ADDR
// if missile < 2 then
45645: LD_VAR 0 14
45649: PUSH
45650: LD_INT 2
45652: LESS
45653: IFFALSE 45657
// exit ;
45655: GO 45879
// x := GetX ( enemy ) ;
45657: LD_ADDR_VAR 0 4
45661: PUSH
45662: LD_VAR 0 10
45666: PPUSH
45667: CALL_OW 250
45671: ST_TO_ADDR
// y := GetY ( enemy ) ;
45672: LD_ADDR_VAR 0 5
45676: PUSH
45677: LD_VAR 0 10
45681: PPUSH
45682: CALL_OW 251
45686: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
45687: LD_ADDR_VAR 0 6
45691: PUSH
45692: LD_VAR 0 4
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PPUSH
45701: LD_INT 1
45703: PPUSH
45704: CALL_OW 12
45708: PLUS
45709: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
45710: LD_ADDR_VAR 0 7
45714: PUSH
45715: LD_VAR 0 5
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PPUSH
45724: LD_INT 1
45726: PPUSH
45727: CALL_OW 12
45731: PLUS
45732: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45733: LD_VAR 0 6
45737: PPUSH
45738: LD_VAR 0 7
45742: PPUSH
45743: CALL_OW 488
45747: NOT
45748: IFFALSE 45770
// begin _x := x ;
45750: LD_ADDR_VAR 0 6
45754: PUSH
45755: LD_VAR 0 4
45759: ST_TO_ADDR
// _y := y ;
45760: LD_ADDR_VAR 0 7
45764: PUSH
45765: LD_VAR 0 5
45769: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
45770: LD_ADDR_VAR 0 3
45774: PUSH
45775: LD_INT 1
45777: PPUSH
45778: LD_VAR 0 14
45782: PPUSH
45783: CALL_OW 12
45787: ST_TO_ADDR
// case i of 1 :
45788: LD_VAR 0 3
45792: PUSH
45793: LD_INT 1
45795: DOUBLE
45796: EQUAL
45797: IFTRUE 45801
45799: GO 45818
45801: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
45802: LD_VAR 0 1
45806: PPUSH
45807: LD_VAR 0 10
45811: PPUSH
45812: CALL_OW 115
45816: GO 45879
45818: LD_INT 2
45820: DOUBLE
45821: EQUAL
45822: IFTRUE 45826
45824: GO 45848
45826: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
45827: LD_VAR 0 1
45831: PPUSH
45832: LD_VAR 0 6
45836: PPUSH
45837: LD_VAR 0 7
45841: PPUSH
45842: CALL_OW 153
45846: GO 45879
45848: LD_INT 3
45850: DOUBLE
45851: EQUAL
45852: IFTRUE 45856
45854: GO 45878
45856: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
45857: LD_VAR 0 1
45861: PPUSH
45862: LD_VAR 0 6
45866: PPUSH
45867: LD_VAR 0 7
45871: PPUSH
45872: CALL_OW 154
45876: GO 45879
45878: POP
// end ;
45879: LD_VAR 0 2
45883: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
45884: LD_INT 0
45886: PPUSH
45887: PPUSH
45888: PPUSH
45889: PPUSH
45890: PPUSH
45891: PPUSH
// if not unit or not building then
45892: LD_VAR 0 1
45896: NOT
45897: PUSH
45898: LD_VAR 0 2
45902: NOT
45903: OR
45904: IFFALSE 45908
// exit ;
45906: GO 46066
// x := GetX ( building ) ;
45908: LD_ADDR_VAR 0 5
45912: PUSH
45913: LD_VAR 0 2
45917: PPUSH
45918: CALL_OW 250
45922: ST_TO_ADDR
// y := GetY ( building ) ;
45923: LD_ADDR_VAR 0 6
45927: PUSH
45928: LD_VAR 0 2
45932: PPUSH
45933: CALL_OW 251
45937: ST_TO_ADDR
// for i = 0 to 5 do
45938: LD_ADDR_VAR 0 4
45942: PUSH
45943: DOUBLE
45944: LD_INT 0
45946: DEC
45947: ST_TO_ADDR
45948: LD_INT 5
45950: PUSH
45951: FOR_TO
45952: IFFALSE 46064
// begin _x := ShiftX ( x , i , 3 ) ;
45954: LD_ADDR_VAR 0 7
45958: PUSH
45959: LD_VAR 0 5
45963: PPUSH
45964: LD_VAR 0 4
45968: PPUSH
45969: LD_INT 3
45971: PPUSH
45972: CALL_OW 272
45976: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
45977: LD_ADDR_VAR 0 8
45981: PUSH
45982: LD_VAR 0 6
45986: PPUSH
45987: LD_VAR 0 4
45991: PPUSH
45992: LD_INT 3
45994: PPUSH
45995: CALL_OW 273
45999: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46000: LD_VAR 0 7
46004: PPUSH
46005: LD_VAR 0 8
46009: PPUSH
46010: CALL_OW 488
46014: NOT
46015: IFFALSE 46019
// continue ;
46017: GO 45951
// if HexInfo ( _x , _y ) = 0 then
46019: LD_VAR 0 7
46023: PPUSH
46024: LD_VAR 0 8
46028: PPUSH
46029: CALL_OW 428
46033: PUSH
46034: LD_INT 0
46036: EQUAL
46037: IFFALSE 46062
// begin ComMoveXY ( unit , _x , _y ) ;
46039: LD_VAR 0 1
46043: PPUSH
46044: LD_VAR 0 7
46048: PPUSH
46049: LD_VAR 0 8
46053: PPUSH
46054: CALL_OW 111
// exit ;
46058: POP
46059: POP
46060: GO 46066
// end ; end ;
46062: GO 45951
46064: POP
46065: POP
// end ;
46066: LD_VAR 0 3
46070: RET
// export function ScanBase ( side , base_area ) ; begin
46071: LD_INT 0
46073: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
46074: LD_ADDR_VAR 0 3
46078: PUSH
46079: LD_VAR 0 2
46083: PPUSH
46084: LD_INT 81
46086: PUSH
46087: LD_VAR 0 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PPUSH
46096: CALL_OW 70
46100: ST_TO_ADDR
// end ;
46101: LD_VAR 0 3
46105: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
46106: LD_INT 0
46108: PPUSH
46109: PPUSH
46110: PPUSH
46111: PPUSH
// result := false ;
46112: LD_ADDR_VAR 0 2
46116: PUSH
46117: LD_INT 0
46119: ST_TO_ADDR
// side := GetSide ( unit ) ;
46120: LD_ADDR_VAR 0 3
46124: PUSH
46125: LD_VAR 0 1
46129: PPUSH
46130: CALL_OW 255
46134: ST_TO_ADDR
// nat := GetNation ( unit ) ;
46135: LD_ADDR_VAR 0 4
46139: PUSH
46140: LD_VAR 0 1
46144: PPUSH
46145: CALL_OW 248
46149: ST_TO_ADDR
// case nat of 1 :
46150: LD_VAR 0 4
46154: PUSH
46155: LD_INT 1
46157: DOUBLE
46158: EQUAL
46159: IFTRUE 46163
46161: GO 46174
46163: POP
// tech := tech_lassight ; 2 :
46164: LD_ADDR_VAR 0 5
46168: PUSH
46169: LD_INT 12
46171: ST_TO_ADDR
46172: GO 46213
46174: LD_INT 2
46176: DOUBLE
46177: EQUAL
46178: IFTRUE 46182
46180: GO 46193
46182: POP
// tech := tech_mortar ; 3 :
46183: LD_ADDR_VAR 0 5
46187: PUSH
46188: LD_INT 41
46190: ST_TO_ADDR
46191: GO 46213
46193: LD_INT 3
46195: DOUBLE
46196: EQUAL
46197: IFTRUE 46201
46199: GO 46212
46201: POP
// tech := tech_bazooka ; end ;
46202: LD_ADDR_VAR 0 5
46206: PUSH
46207: LD_INT 44
46209: ST_TO_ADDR
46210: GO 46213
46212: POP
// if Researched ( side , tech ) then
46213: LD_VAR 0 3
46217: PPUSH
46218: LD_VAR 0 5
46222: PPUSH
46223: CALL_OW 325
46227: IFFALSE 46254
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
46229: LD_ADDR_VAR 0 2
46233: PUSH
46234: LD_INT 5
46236: PUSH
46237: LD_INT 8
46239: PUSH
46240: LD_INT 9
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: LIST
46247: PUSH
46248: LD_VAR 0 4
46252: ARRAY
46253: ST_TO_ADDR
// end ;
46254: LD_VAR 0 2
46258: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
46259: LD_INT 0
46261: PPUSH
46262: PPUSH
46263: PPUSH
// if not mines then
46264: LD_VAR 0 2
46268: NOT
46269: IFFALSE 46273
// exit ;
46271: GO 46417
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46273: LD_ADDR_VAR 0 5
46277: PUSH
46278: LD_INT 81
46280: PUSH
46281: LD_VAR 0 1
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 3
46292: PUSH
46293: LD_INT 21
46295: PUSH
46296: LD_INT 3
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PPUSH
46311: CALL_OW 69
46315: ST_TO_ADDR
// for i in mines do
46316: LD_ADDR_VAR 0 4
46320: PUSH
46321: LD_VAR 0 2
46325: PUSH
46326: FOR_IN
46327: IFFALSE 46415
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
46329: LD_VAR 0 4
46333: PUSH
46334: LD_INT 1
46336: ARRAY
46337: PPUSH
46338: LD_VAR 0 4
46342: PUSH
46343: LD_INT 2
46345: ARRAY
46346: PPUSH
46347: CALL_OW 458
46351: NOT
46352: IFFALSE 46356
// continue ;
46354: GO 46326
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
46356: LD_VAR 0 4
46360: PUSH
46361: LD_INT 1
46363: ARRAY
46364: PPUSH
46365: LD_VAR 0 4
46369: PUSH
46370: LD_INT 2
46372: ARRAY
46373: PPUSH
46374: CALL_OW 428
46378: PUSH
46379: LD_VAR 0 5
46383: IN
46384: IFFALSE 46413
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
46386: LD_VAR 0 4
46390: PUSH
46391: LD_INT 1
46393: ARRAY
46394: PPUSH
46395: LD_VAR 0 4
46399: PUSH
46400: LD_INT 2
46402: ARRAY
46403: PPUSH
46404: LD_VAR 0 1
46408: PPUSH
46409: CALL_OW 456
// end ;
46413: GO 46326
46415: POP
46416: POP
// end ;
46417: LD_VAR 0 3
46421: RET
// export function Count ( array ) ; var i ; begin
46422: LD_INT 0
46424: PPUSH
46425: PPUSH
// result := 0 ;
46426: LD_ADDR_VAR 0 2
46430: PUSH
46431: LD_INT 0
46433: ST_TO_ADDR
// for i in array do
46434: LD_ADDR_VAR 0 3
46438: PUSH
46439: LD_VAR 0 1
46443: PUSH
46444: FOR_IN
46445: IFFALSE 46469
// if i then
46447: LD_VAR 0 3
46451: IFFALSE 46467
// result := result + 1 ;
46453: LD_ADDR_VAR 0 2
46457: PUSH
46458: LD_VAR 0 2
46462: PUSH
46463: LD_INT 1
46465: PLUS
46466: ST_TO_ADDR
46467: GO 46444
46469: POP
46470: POP
// end ;
46471: LD_VAR 0 2
46475: RET
// export function IsEmpty ( building ) ; begin
46476: LD_INT 0
46478: PPUSH
// if not building then
46479: LD_VAR 0 1
46483: NOT
46484: IFFALSE 46488
// exit ;
46486: GO 46531
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
46488: LD_ADDR_VAR 0 2
46492: PUSH
46493: LD_VAR 0 1
46497: PUSH
46498: LD_INT 22
46500: PUSH
46501: LD_VAR 0 1
46505: PPUSH
46506: CALL_OW 255
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 58
46517: PUSH
46518: EMPTY
46519: LIST
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PPUSH
46525: CALL_OW 69
46529: IN
46530: ST_TO_ADDR
// end ;
46531: LD_VAR 0 2
46535: RET
// export function IsNotFull ( building ) ; begin
46536: LD_INT 0
46538: PPUSH
// if not building then
46539: LD_VAR 0 1
46543: NOT
46544: IFFALSE 46548
// exit ;
46546: GO 46567
// result := UnitsInside ( building ) < 6 ;
46548: LD_ADDR_VAR 0 2
46552: PUSH
46553: LD_VAR 0 1
46557: PPUSH
46558: CALL_OW 313
46562: PUSH
46563: LD_INT 6
46565: LESS
46566: ST_TO_ADDR
// end ;
46567: LD_VAR 0 2
46571: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
46572: LD_INT 0
46574: PPUSH
46575: PPUSH
46576: PPUSH
46577: PPUSH
// tmp := [ ] ;
46578: LD_ADDR_VAR 0 3
46582: PUSH
46583: EMPTY
46584: ST_TO_ADDR
// list := [ ] ;
46585: LD_ADDR_VAR 0 5
46589: PUSH
46590: EMPTY
46591: ST_TO_ADDR
// for i = 16 to 25 do
46592: LD_ADDR_VAR 0 4
46596: PUSH
46597: DOUBLE
46598: LD_INT 16
46600: DEC
46601: ST_TO_ADDR
46602: LD_INT 25
46604: PUSH
46605: FOR_TO
46606: IFFALSE 46679
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
46608: LD_ADDR_VAR 0 3
46612: PUSH
46613: LD_VAR 0 3
46617: PUSH
46618: LD_INT 22
46620: PUSH
46621: LD_VAR 0 1
46625: PPUSH
46626: CALL_OW 255
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 91
46637: PUSH
46638: LD_VAR 0 1
46642: PUSH
46643: LD_INT 6
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 30
46653: PUSH
46654: LD_VAR 0 4
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: LIST
46667: PUSH
46668: EMPTY
46669: LIST
46670: PPUSH
46671: CALL_OW 69
46675: ADD
46676: ST_TO_ADDR
46677: GO 46605
46679: POP
46680: POP
// for i = 1 to tmp do
46681: LD_ADDR_VAR 0 4
46685: PUSH
46686: DOUBLE
46687: LD_INT 1
46689: DEC
46690: ST_TO_ADDR
46691: LD_VAR 0 3
46695: PUSH
46696: FOR_TO
46697: IFFALSE 46785
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
46699: LD_ADDR_VAR 0 5
46703: PUSH
46704: LD_VAR 0 5
46708: PUSH
46709: LD_VAR 0 3
46713: PUSH
46714: LD_VAR 0 4
46718: ARRAY
46719: PPUSH
46720: CALL_OW 266
46724: PUSH
46725: LD_VAR 0 3
46729: PUSH
46730: LD_VAR 0 4
46734: ARRAY
46735: PPUSH
46736: CALL_OW 250
46740: PUSH
46741: LD_VAR 0 3
46745: PUSH
46746: LD_VAR 0 4
46750: ARRAY
46751: PPUSH
46752: CALL_OW 251
46756: PUSH
46757: LD_VAR 0 3
46761: PUSH
46762: LD_VAR 0 4
46766: ARRAY
46767: PPUSH
46768: CALL_OW 254
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: PUSH
46779: EMPTY
46780: LIST
46781: ADD
46782: ST_TO_ADDR
46783: GO 46696
46785: POP
46786: POP
// result := list ;
46787: LD_ADDR_VAR 0 2
46791: PUSH
46792: LD_VAR 0 5
46796: ST_TO_ADDR
// end ;
46797: LD_VAR 0 2
46801: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
46802: LD_INT 0
46804: PPUSH
46805: PPUSH
46806: PPUSH
46807: PPUSH
46808: PPUSH
46809: PPUSH
46810: PPUSH
// if not factory then
46811: LD_VAR 0 1
46815: NOT
46816: IFFALSE 46820
// exit ;
46818: GO 47413
// if control = control_apeman then
46820: LD_VAR 0 4
46824: PUSH
46825: LD_INT 5
46827: EQUAL
46828: IFFALSE 46937
// begin tmp := UnitsInside ( factory ) ;
46830: LD_ADDR_VAR 0 8
46834: PUSH
46835: LD_VAR 0 1
46839: PPUSH
46840: CALL_OW 313
46844: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
46845: LD_VAR 0 8
46849: PPUSH
46850: LD_INT 25
46852: PUSH
46853: LD_INT 12
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PPUSH
46860: CALL_OW 72
46864: NOT
46865: IFFALSE 46875
// control := control_manual ;
46867: LD_ADDR_VAR 0 4
46871: PUSH
46872: LD_INT 1
46874: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
46875: LD_ADDR_VAR 0 8
46879: PUSH
46880: LD_VAR 0 1
46884: PPUSH
46885: CALL 46572 0 1
46889: ST_TO_ADDR
// if tmp then
46890: LD_VAR 0 8
46894: IFFALSE 46937
// begin for i in tmp do
46896: LD_ADDR_VAR 0 7
46900: PUSH
46901: LD_VAR 0 8
46905: PUSH
46906: FOR_IN
46907: IFFALSE 46935
// if i [ 1 ] = b_ext_radio then
46909: LD_VAR 0 7
46913: PUSH
46914: LD_INT 1
46916: ARRAY
46917: PUSH
46918: LD_INT 22
46920: EQUAL
46921: IFFALSE 46933
// begin control := control_remote ;
46923: LD_ADDR_VAR 0 4
46927: PUSH
46928: LD_INT 2
46930: ST_TO_ADDR
// break ;
46931: GO 46935
// end ;
46933: GO 46906
46935: POP
46936: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46937: LD_VAR 0 1
46941: PPUSH
46942: LD_VAR 0 2
46946: PPUSH
46947: LD_VAR 0 3
46951: PPUSH
46952: LD_VAR 0 4
46956: PPUSH
46957: LD_VAR 0 5
46961: PPUSH
46962: CALL_OW 448
46966: IFFALSE 47001
// begin result := [ chassis , engine , control , weapon ] ;
46968: LD_ADDR_VAR 0 6
46972: PUSH
46973: LD_VAR 0 2
46977: PUSH
46978: LD_VAR 0 3
46982: PUSH
46983: LD_VAR 0 4
46987: PUSH
46988: LD_VAR 0 5
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: ST_TO_ADDR
// exit ;
46999: GO 47413
// end ; _chassis := AvailableChassisList ( factory ) ;
47001: LD_ADDR_VAR 0 9
47005: PUSH
47006: LD_VAR 0 1
47010: PPUSH
47011: CALL_OW 475
47015: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
47016: LD_ADDR_VAR 0 11
47020: PUSH
47021: LD_VAR 0 1
47025: PPUSH
47026: CALL_OW 476
47030: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
47031: LD_ADDR_VAR 0 12
47035: PUSH
47036: LD_VAR 0 1
47040: PPUSH
47041: CALL_OW 477
47045: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
47046: LD_ADDR_VAR 0 10
47050: PUSH
47051: LD_VAR 0 1
47055: PPUSH
47056: CALL_OW 478
47060: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
47061: LD_VAR 0 9
47065: NOT
47066: PUSH
47067: LD_VAR 0 11
47071: NOT
47072: OR
47073: PUSH
47074: LD_VAR 0 12
47078: NOT
47079: OR
47080: PUSH
47081: LD_VAR 0 10
47085: NOT
47086: OR
47087: IFFALSE 47122
// begin result := [ chassis , engine , control , weapon ] ;
47089: LD_ADDR_VAR 0 6
47093: PUSH
47094: LD_VAR 0 2
47098: PUSH
47099: LD_VAR 0 3
47103: PUSH
47104: LD_VAR 0 4
47108: PUSH
47109: LD_VAR 0 5
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: ST_TO_ADDR
// exit ;
47120: GO 47413
// end ; if not chassis in _chassis then
47122: LD_VAR 0 2
47126: PUSH
47127: LD_VAR 0 9
47131: IN
47132: NOT
47133: IFFALSE 47159
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
47135: LD_ADDR_VAR 0 2
47139: PUSH
47140: LD_VAR 0 9
47144: PUSH
47145: LD_INT 1
47147: PPUSH
47148: LD_VAR 0 9
47152: PPUSH
47153: CALL_OW 12
47157: ARRAY
47158: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
47159: LD_VAR 0 2
47163: PPUSH
47164: LD_VAR 0 3
47168: PPUSH
47169: CALL 47418 0 2
47173: NOT
47174: IFFALSE 47233
// repeat engine := _engine [ 1 ] ;
47176: LD_ADDR_VAR 0 3
47180: PUSH
47181: LD_VAR 0 11
47185: PUSH
47186: LD_INT 1
47188: ARRAY
47189: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
47190: LD_ADDR_VAR 0 11
47194: PUSH
47195: LD_VAR 0 11
47199: PPUSH
47200: LD_INT 1
47202: PPUSH
47203: CALL_OW 3
47207: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
47208: LD_VAR 0 2
47212: PPUSH
47213: LD_VAR 0 3
47217: PPUSH
47218: CALL 47418 0 2
47222: PUSH
47223: LD_VAR 0 11
47227: PUSH
47228: EMPTY
47229: EQUAL
47230: OR
47231: IFFALSE 47176
// if not control in _control then
47233: LD_VAR 0 4
47237: PUSH
47238: LD_VAR 0 12
47242: IN
47243: NOT
47244: IFFALSE 47270
// control := _control [ rand ( 1 , _control ) ] ;
47246: LD_ADDR_VAR 0 4
47250: PUSH
47251: LD_VAR 0 12
47255: PUSH
47256: LD_INT 1
47258: PPUSH
47259: LD_VAR 0 12
47263: PPUSH
47264: CALL_OW 12
47268: ARRAY
47269: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
47270: LD_VAR 0 2
47274: PPUSH
47275: LD_VAR 0 5
47279: PPUSH
47280: CALL 47638 0 2
47284: NOT
47285: IFFALSE 47344
// repeat weapon := _weapon [ 1 ] ;
47287: LD_ADDR_VAR 0 5
47291: PUSH
47292: LD_VAR 0 10
47296: PUSH
47297: LD_INT 1
47299: ARRAY
47300: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
47301: LD_ADDR_VAR 0 10
47305: PUSH
47306: LD_VAR 0 10
47310: PPUSH
47311: LD_INT 1
47313: PPUSH
47314: CALL_OW 3
47318: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
47319: LD_VAR 0 2
47323: PPUSH
47324: LD_VAR 0 5
47328: PPUSH
47329: CALL 47638 0 2
47333: PUSH
47334: LD_VAR 0 10
47338: PUSH
47339: EMPTY
47340: EQUAL
47341: OR
47342: IFFALSE 47287
// result := [ ] ;
47344: LD_ADDR_VAR 0 6
47348: PUSH
47349: EMPTY
47350: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
47351: LD_VAR 0 1
47355: PPUSH
47356: LD_VAR 0 2
47360: PPUSH
47361: LD_VAR 0 3
47365: PPUSH
47366: LD_VAR 0 4
47370: PPUSH
47371: LD_VAR 0 5
47375: PPUSH
47376: CALL_OW 448
47380: IFFALSE 47413
// result := [ chassis , engine , control , weapon ] ;
47382: LD_ADDR_VAR 0 6
47386: PUSH
47387: LD_VAR 0 2
47391: PUSH
47392: LD_VAR 0 3
47396: PUSH
47397: LD_VAR 0 4
47401: PUSH
47402: LD_VAR 0 5
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: ST_TO_ADDR
// end ;
47413: LD_VAR 0 6
47417: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
47418: LD_INT 0
47420: PPUSH
// if not chassis or not engine then
47421: LD_VAR 0 1
47425: NOT
47426: PUSH
47427: LD_VAR 0 2
47431: NOT
47432: OR
47433: IFFALSE 47437
// exit ;
47435: GO 47633
// case engine of engine_solar :
47437: LD_VAR 0 2
47441: PUSH
47442: LD_INT 2
47444: DOUBLE
47445: EQUAL
47446: IFTRUE 47450
47448: GO 47488
47450: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
47451: LD_ADDR_VAR 0 3
47455: PUSH
47456: LD_INT 11
47458: PUSH
47459: LD_INT 12
47461: PUSH
47462: LD_INT 13
47464: PUSH
47465: LD_INT 14
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: LD_INT 2
47473: PUSH
47474: LD_INT 3
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: ST_TO_ADDR
47486: GO 47617
47488: LD_INT 1
47490: DOUBLE
47491: EQUAL
47492: IFTRUE 47496
47494: GO 47558
47496: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
47497: LD_ADDR_VAR 0 3
47501: PUSH
47502: LD_INT 11
47504: PUSH
47505: LD_INT 12
47507: PUSH
47508: LD_INT 13
47510: PUSH
47511: LD_INT 14
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: LD_INT 3
47522: PUSH
47523: LD_INT 4
47525: PUSH
47526: LD_INT 5
47528: PUSH
47529: LD_INT 21
47531: PUSH
47532: LD_INT 23
47534: PUSH
47535: LD_INT 22
47537: PUSH
47538: LD_INT 24
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: ST_TO_ADDR
47556: GO 47617
47558: LD_INT 3
47560: DOUBLE
47561: EQUAL
47562: IFTRUE 47566
47564: GO 47616
47566: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47567: LD_ADDR_VAR 0 3
47571: PUSH
47572: LD_INT 13
47574: PUSH
47575: LD_INT 14
47577: PUSH
47578: LD_INT 2
47580: PUSH
47581: LD_INT 3
47583: PUSH
47584: LD_INT 4
47586: PUSH
47587: LD_INT 5
47589: PUSH
47590: LD_INT 21
47592: PUSH
47593: LD_INT 22
47595: PUSH
47596: LD_INT 23
47598: PUSH
47599: LD_INT 24
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: ST_TO_ADDR
47614: GO 47617
47616: POP
// result := ( chassis in result ) ;
47617: LD_ADDR_VAR 0 3
47621: PUSH
47622: LD_VAR 0 1
47626: PUSH
47627: LD_VAR 0 3
47631: IN
47632: ST_TO_ADDR
// end ;
47633: LD_VAR 0 3
47637: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
47638: LD_INT 0
47640: PPUSH
// if not chassis or not weapon then
47641: LD_VAR 0 1
47645: NOT
47646: PUSH
47647: LD_VAR 0 2
47651: NOT
47652: OR
47653: IFFALSE 47657
// exit ;
47655: GO 48719
// case weapon of us_machine_gun :
47657: LD_VAR 0 2
47661: PUSH
47662: LD_INT 2
47664: DOUBLE
47665: EQUAL
47666: IFTRUE 47670
47668: GO 47700
47670: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
47671: LD_ADDR_VAR 0 3
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 2
47681: PUSH
47682: LD_INT 3
47684: PUSH
47685: LD_INT 4
47687: PUSH
47688: LD_INT 5
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: ST_TO_ADDR
47698: GO 48703
47700: LD_INT 3
47702: DOUBLE
47703: EQUAL
47704: IFTRUE 47708
47706: GO 47738
47708: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
47709: LD_ADDR_VAR 0 3
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: LD_INT 3
47722: PUSH
47723: LD_INT 4
47725: PUSH
47726: LD_INT 5
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: ST_TO_ADDR
47736: GO 48703
47738: LD_INT 11
47740: DOUBLE
47741: EQUAL
47742: IFTRUE 47746
47744: GO 47776
47746: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
47747: LD_ADDR_VAR 0 3
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: LD_INT 3
47760: PUSH
47761: LD_INT 4
47763: PUSH
47764: LD_INT 5
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: ST_TO_ADDR
47774: GO 48703
47776: LD_INT 4
47778: DOUBLE
47779: EQUAL
47780: IFTRUE 47784
47782: GO 47810
47784: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
47785: LD_ADDR_VAR 0 3
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: LD_INT 3
47795: PUSH
47796: LD_INT 4
47798: PUSH
47799: LD_INT 5
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: ST_TO_ADDR
47808: GO 48703
47810: LD_INT 5
47812: DOUBLE
47813: EQUAL
47814: IFTRUE 47818
47816: GO 47844
47818: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
47819: LD_ADDR_VAR 0 3
47823: PUSH
47824: LD_INT 2
47826: PUSH
47827: LD_INT 3
47829: PUSH
47830: LD_INT 4
47832: PUSH
47833: LD_INT 5
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: ST_TO_ADDR
47842: GO 48703
47844: LD_INT 9
47846: DOUBLE
47847: EQUAL
47848: IFTRUE 47852
47850: GO 47878
47852: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
47853: LD_ADDR_VAR 0 3
47857: PUSH
47858: LD_INT 2
47860: PUSH
47861: LD_INT 3
47863: PUSH
47864: LD_INT 4
47866: PUSH
47867: LD_INT 5
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: ST_TO_ADDR
47876: GO 48703
47878: LD_INT 7
47880: DOUBLE
47881: EQUAL
47882: IFTRUE 47886
47884: GO 47912
47886: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
47887: LD_ADDR_VAR 0 3
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: LD_INT 3
47897: PUSH
47898: LD_INT 4
47900: PUSH
47901: LD_INT 5
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: ST_TO_ADDR
47910: GO 48703
47912: LD_INT 12
47914: DOUBLE
47915: EQUAL
47916: IFTRUE 47920
47918: GO 47946
47920: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
47921: LD_ADDR_VAR 0 3
47925: PUSH
47926: LD_INT 2
47928: PUSH
47929: LD_INT 3
47931: PUSH
47932: LD_INT 4
47934: PUSH
47935: LD_INT 5
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: ST_TO_ADDR
47944: GO 48703
47946: LD_INT 13
47948: DOUBLE
47949: EQUAL
47950: IFTRUE 47954
47952: GO 47980
47954: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
47955: LD_ADDR_VAR 0 3
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: LD_INT 3
47965: PUSH
47966: LD_INT 4
47968: PUSH
47969: LD_INT 5
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: ST_TO_ADDR
47978: GO 48703
47980: LD_INT 14
47982: DOUBLE
47983: EQUAL
47984: IFTRUE 47988
47986: GO 48006
47988: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
47989: LD_ADDR_VAR 0 3
47993: PUSH
47994: LD_INT 4
47996: PUSH
47997: LD_INT 5
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: ST_TO_ADDR
48004: GO 48703
48006: LD_INT 6
48008: DOUBLE
48009: EQUAL
48010: IFTRUE 48014
48012: GO 48032
48014: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
48015: LD_ADDR_VAR 0 3
48019: PUSH
48020: LD_INT 4
48022: PUSH
48023: LD_INT 5
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: ST_TO_ADDR
48030: GO 48703
48032: LD_INT 10
48034: DOUBLE
48035: EQUAL
48036: IFTRUE 48040
48038: GO 48058
48040: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
48041: LD_ADDR_VAR 0 3
48045: PUSH
48046: LD_INT 4
48048: PUSH
48049: LD_INT 5
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: ST_TO_ADDR
48056: GO 48703
48058: LD_INT 22
48060: DOUBLE
48061: EQUAL
48062: IFTRUE 48066
48064: GO 48092
48066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
48067: LD_ADDR_VAR 0 3
48071: PUSH
48072: LD_INT 11
48074: PUSH
48075: LD_INT 12
48077: PUSH
48078: LD_INT 13
48080: PUSH
48081: LD_INT 14
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: ST_TO_ADDR
48090: GO 48703
48092: LD_INT 23
48094: DOUBLE
48095: EQUAL
48096: IFTRUE 48100
48098: GO 48126
48100: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
48101: LD_ADDR_VAR 0 3
48105: PUSH
48106: LD_INT 11
48108: PUSH
48109: LD_INT 12
48111: PUSH
48112: LD_INT 13
48114: PUSH
48115: LD_INT 14
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: ST_TO_ADDR
48124: GO 48703
48126: LD_INT 24
48128: DOUBLE
48129: EQUAL
48130: IFTRUE 48134
48132: GO 48160
48134: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
48135: LD_ADDR_VAR 0 3
48139: PUSH
48140: LD_INT 11
48142: PUSH
48143: LD_INT 12
48145: PUSH
48146: LD_INT 13
48148: PUSH
48149: LD_INT 14
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: ST_TO_ADDR
48158: GO 48703
48160: LD_INT 30
48162: DOUBLE
48163: EQUAL
48164: IFTRUE 48168
48166: GO 48194
48168: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
48169: LD_ADDR_VAR 0 3
48173: PUSH
48174: LD_INT 11
48176: PUSH
48177: LD_INT 12
48179: PUSH
48180: LD_INT 13
48182: PUSH
48183: LD_INT 14
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: ST_TO_ADDR
48192: GO 48703
48194: LD_INT 25
48196: DOUBLE
48197: EQUAL
48198: IFTRUE 48202
48200: GO 48220
48202: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
48203: LD_ADDR_VAR 0 3
48207: PUSH
48208: LD_INT 13
48210: PUSH
48211: LD_INT 14
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: ST_TO_ADDR
48218: GO 48703
48220: LD_INT 27
48222: DOUBLE
48223: EQUAL
48224: IFTRUE 48228
48226: GO 48246
48228: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
48229: LD_ADDR_VAR 0 3
48233: PUSH
48234: LD_INT 13
48236: PUSH
48237: LD_INT 14
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: ST_TO_ADDR
48244: GO 48703
48246: LD_EXP 53
48250: DOUBLE
48251: EQUAL
48252: IFTRUE 48256
48254: GO 48282
48256: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
48257: LD_ADDR_VAR 0 3
48261: PUSH
48262: LD_INT 11
48264: PUSH
48265: LD_INT 12
48267: PUSH
48268: LD_INT 13
48270: PUSH
48271: LD_INT 14
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: ST_TO_ADDR
48280: GO 48703
48282: LD_INT 28
48284: DOUBLE
48285: EQUAL
48286: IFTRUE 48290
48288: GO 48308
48290: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
48291: LD_ADDR_VAR 0 3
48295: PUSH
48296: LD_INT 13
48298: PUSH
48299: LD_INT 14
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: ST_TO_ADDR
48306: GO 48703
48308: LD_INT 29
48310: DOUBLE
48311: EQUAL
48312: IFTRUE 48316
48314: GO 48334
48316: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
48317: LD_ADDR_VAR 0 3
48321: PUSH
48322: LD_INT 13
48324: PUSH
48325: LD_INT 14
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: ST_TO_ADDR
48332: GO 48703
48334: LD_INT 31
48336: DOUBLE
48337: EQUAL
48338: IFTRUE 48342
48340: GO 48360
48342: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
48343: LD_ADDR_VAR 0 3
48347: PUSH
48348: LD_INT 13
48350: PUSH
48351: LD_INT 14
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: ST_TO_ADDR
48358: GO 48703
48360: LD_INT 26
48362: DOUBLE
48363: EQUAL
48364: IFTRUE 48368
48366: GO 48386
48368: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
48369: LD_ADDR_VAR 0 3
48373: PUSH
48374: LD_INT 13
48376: PUSH
48377: LD_INT 14
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: ST_TO_ADDR
48384: GO 48703
48386: LD_INT 42
48388: DOUBLE
48389: EQUAL
48390: IFTRUE 48394
48392: GO 48420
48394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
48395: LD_ADDR_VAR 0 3
48399: PUSH
48400: LD_INT 21
48402: PUSH
48403: LD_INT 22
48405: PUSH
48406: LD_INT 23
48408: PUSH
48409: LD_INT 24
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: ST_TO_ADDR
48418: GO 48703
48420: LD_INT 43
48422: DOUBLE
48423: EQUAL
48424: IFTRUE 48428
48426: GO 48454
48428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
48429: LD_ADDR_VAR 0 3
48433: PUSH
48434: LD_INT 21
48436: PUSH
48437: LD_INT 22
48439: PUSH
48440: LD_INT 23
48442: PUSH
48443: LD_INT 24
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: ST_TO_ADDR
48452: GO 48703
48454: LD_INT 44
48456: DOUBLE
48457: EQUAL
48458: IFTRUE 48462
48460: GO 48488
48462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
48463: LD_ADDR_VAR 0 3
48467: PUSH
48468: LD_INT 21
48470: PUSH
48471: LD_INT 22
48473: PUSH
48474: LD_INT 23
48476: PUSH
48477: LD_INT 24
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: ST_TO_ADDR
48486: GO 48703
48488: LD_INT 45
48490: DOUBLE
48491: EQUAL
48492: IFTRUE 48496
48494: GO 48522
48496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
48497: LD_ADDR_VAR 0 3
48501: PUSH
48502: LD_INT 21
48504: PUSH
48505: LD_INT 22
48507: PUSH
48508: LD_INT 23
48510: PUSH
48511: LD_INT 24
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: ST_TO_ADDR
48520: GO 48703
48522: LD_INT 49
48524: DOUBLE
48525: EQUAL
48526: IFTRUE 48530
48528: GO 48556
48530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
48531: LD_ADDR_VAR 0 3
48535: PUSH
48536: LD_INT 21
48538: PUSH
48539: LD_INT 22
48541: PUSH
48542: LD_INT 23
48544: PUSH
48545: LD_INT 24
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: ST_TO_ADDR
48554: GO 48703
48556: LD_INT 51
48558: DOUBLE
48559: EQUAL
48560: IFTRUE 48564
48562: GO 48590
48564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
48565: LD_ADDR_VAR 0 3
48569: PUSH
48570: LD_INT 21
48572: PUSH
48573: LD_INT 22
48575: PUSH
48576: LD_INT 23
48578: PUSH
48579: LD_INT 24
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: ST_TO_ADDR
48588: GO 48703
48590: LD_INT 52
48592: DOUBLE
48593: EQUAL
48594: IFTRUE 48598
48596: GO 48624
48598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
48599: LD_ADDR_VAR 0 3
48603: PUSH
48604: LD_INT 21
48606: PUSH
48607: LD_INT 22
48609: PUSH
48610: LD_INT 23
48612: PUSH
48613: LD_INT 24
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: ST_TO_ADDR
48622: GO 48703
48624: LD_INT 53
48626: DOUBLE
48627: EQUAL
48628: IFTRUE 48632
48630: GO 48650
48632: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
48633: LD_ADDR_VAR 0 3
48637: PUSH
48638: LD_INT 23
48640: PUSH
48641: LD_INT 24
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: ST_TO_ADDR
48648: GO 48703
48650: LD_INT 46
48652: DOUBLE
48653: EQUAL
48654: IFTRUE 48658
48656: GO 48676
48658: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
48659: LD_ADDR_VAR 0 3
48663: PUSH
48664: LD_INT 23
48666: PUSH
48667: LD_INT 24
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: ST_TO_ADDR
48674: GO 48703
48676: LD_INT 47
48678: DOUBLE
48679: EQUAL
48680: IFTRUE 48684
48682: GO 48702
48684: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
48685: LD_ADDR_VAR 0 3
48689: PUSH
48690: LD_INT 23
48692: PUSH
48693: LD_INT 24
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: ST_TO_ADDR
48700: GO 48703
48702: POP
// result := ( chassis in result ) ;
48703: LD_ADDR_VAR 0 3
48707: PUSH
48708: LD_VAR 0 1
48712: PUSH
48713: LD_VAR 0 3
48717: IN
48718: ST_TO_ADDR
// end ;
48719: LD_VAR 0 3
48723: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
48724: LD_INT 0
48726: PPUSH
48727: PPUSH
48728: PPUSH
48729: PPUSH
48730: PPUSH
48731: PPUSH
48732: PPUSH
// result := array ;
48733: LD_ADDR_VAR 0 5
48737: PUSH
48738: LD_VAR 0 1
48742: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
48743: LD_VAR 0 1
48747: NOT
48748: PUSH
48749: LD_VAR 0 2
48753: NOT
48754: OR
48755: PUSH
48756: LD_VAR 0 3
48760: NOT
48761: OR
48762: PUSH
48763: LD_VAR 0 2
48767: PUSH
48768: LD_VAR 0 1
48772: GREATER
48773: OR
48774: PUSH
48775: LD_VAR 0 3
48779: PUSH
48780: LD_VAR 0 1
48784: GREATER
48785: OR
48786: IFFALSE 48790
// exit ;
48788: GO 49086
// if direction then
48790: LD_VAR 0 4
48794: IFFALSE 48858
// begin d := 1 ;
48796: LD_ADDR_VAR 0 9
48800: PUSH
48801: LD_INT 1
48803: ST_TO_ADDR
// if i_from > i_to then
48804: LD_VAR 0 2
48808: PUSH
48809: LD_VAR 0 3
48813: GREATER
48814: IFFALSE 48840
// length := ( array - i_from ) + i_to else
48816: LD_ADDR_VAR 0 11
48820: PUSH
48821: LD_VAR 0 1
48825: PUSH
48826: LD_VAR 0 2
48830: MINUS
48831: PUSH
48832: LD_VAR 0 3
48836: PLUS
48837: ST_TO_ADDR
48838: GO 48856
// length := i_to - i_from ;
48840: LD_ADDR_VAR 0 11
48844: PUSH
48845: LD_VAR 0 3
48849: PUSH
48850: LD_VAR 0 2
48854: MINUS
48855: ST_TO_ADDR
// end else
48856: GO 48919
// begin d := - 1 ;
48858: LD_ADDR_VAR 0 9
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: ST_TO_ADDR
// if i_from > i_to then
48867: LD_VAR 0 2
48871: PUSH
48872: LD_VAR 0 3
48876: GREATER
48877: IFFALSE 48897
// length := i_from - i_to else
48879: LD_ADDR_VAR 0 11
48883: PUSH
48884: LD_VAR 0 2
48888: PUSH
48889: LD_VAR 0 3
48893: MINUS
48894: ST_TO_ADDR
48895: GO 48919
// length := ( array - i_to ) + i_from ;
48897: LD_ADDR_VAR 0 11
48901: PUSH
48902: LD_VAR 0 1
48906: PUSH
48907: LD_VAR 0 3
48911: MINUS
48912: PUSH
48913: LD_VAR 0 2
48917: PLUS
48918: ST_TO_ADDR
// end ; if not length then
48919: LD_VAR 0 11
48923: NOT
48924: IFFALSE 48928
// exit ;
48926: GO 49086
// tmp := array ;
48928: LD_ADDR_VAR 0 10
48932: PUSH
48933: LD_VAR 0 1
48937: ST_TO_ADDR
// for i = 1 to length do
48938: LD_ADDR_VAR 0 6
48942: PUSH
48943: DOUBLE
48944: LD_INT 1
48946: DEC
48947: ST_TO_ADDR
48948: LD_VAR 0 11
48952: PUSH
48953: FOR_TO
48954: IFFALSE 49074
// begin for j = 1 to array do
48956: LD_ADDR_VAR 0 7
48960: PUSH
48961: DOUBLE
48962: LD_INT 1
48964: DEC
48965: ST_TO_ADDR
48966: LD_VAR 0 1
48970: PUSH
48971: FOR_TO
48972: IFFALSE 49060
// begin k := j + d ;
48974: LD_ADDR_VAR 0 8
48978: PUSH
48979: LD_VAR 0 7
48983: PUSH
48984: LD_VAR 0 9
48988: PLUS
48989: ST_TO_ADDR
// if k > array then
48990: LD_VAR 0 8
48994: PUSH
48995: LD_VAR 0 1
48999: GREATER
49000: IFFALSE 49010
// k := 1 ;
49002: LD_ADDR_VAR 0 8
49006: PUSH
49007: LD_INT 1
49009: ST_TO_ADDR
// if not k then
49010: LD_VAR 0 8
49014: NOT
49015: IFFALSE 49027
// k := array ;
49017: LD_ADDR_VAR 0 8
49021: PUSH
49022: LD_VAR 0 1
49026: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
49027: LD_ADDR_VAR 0 10
49031: PUSH
49032: LD_VAR 0 10
49036: PPUSH
49037: LD_VAR 0 8
49041: PPUSH
49042: LD_VAR 0 1
49046: PUSH
49047: LD_VAR 0 7
49051: ARRAY
49052: PPUSH
49053: CALL_OW 1
49057: ST_TO_ADDR
// end ;
49058: GO 48971
49060: POP
49061: POP
// array := tmp ;
49062: LD_ADDR_VAR 0 1
49066: PUSH
49067: LD_VAR 0 10
49071: ST_TO_ADDR
// end ;
49072: GO 48953
49074: POP
49075: POP
// result := array ;
49076: LD_ADDR_VAR 0 5
49080: PUSH
49081: LD_VAR 0 1
49085: ST_TO_ADDR
// end ;
49086: LD_VAR 0 5
49090: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
49091: LD_INT 0
49093: PPUSH
49094: PPUSH
// result := 0 ;
49095: LD_ADDR_VAR 0 3
49099: PUSH
49100: LD_INT 0
49102: ST_TO_ADDR
// if not array or not value in array then
49103: LD_VAR 0 1
49107: NOT
49108: PUSH
49109: LD_VAR 0 2
49113: PUSH
49114: LD_VAR 0 1
49118: IN
49119: NOT
49120: OR
49121: IFFALSE 49125
// exit ;
49123: GO 49179
// for i = 1 to array do
49125: LD_ADDR_VAR 0 4
49129: PUSH
49130: DOUBLE
49131: LD_INT 1
49133: DEC
49134: ST_TO_ADDR
49135: LD_VAR 0 1
49139: PUSH
49140: FOR_TO
49141: IFFALSE 49177
// if value = array [ i ] then
49143: LD_VAR 0 2
49147: PUSH
49148: LD_VAR 0 1
49152: PUSH
49153: LD_VAR 0 4
49157: ARRAY
49158: EQUAL
49159: IFFALSE 49175
// begin result := i ;
49161: LD_ADDR_VAR 0 3
49165: PUSH
49166: LD_VAR 0 4
49170: ST_TO_ADDR
// exit ;
49171: POP
49172: POP
49173: GO 49179
// end ;
49175: GO 49140
49177: POP
49178: POP
// end ;
49179: LD_VAR 0 3
49183: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
49184: LD_INT 0
49186: PPUSH
// vc_chassis := chassis ;
49187: LD_ADDR_OWVAR 37
49191: PUSH
49192: LD_VAR 0 1
49196: ST_TO_ADDR
// vc_engine := engine ;
49197: LD_ADDR_OWVAR 39
49201: PUSH
49202: LD_VAR 0 2
49206: ST_TO_ADDR
// vc_control := control ;
49207: LD_ADDR_OWVAR 38
49211: PUSH
49212: LD_VAR 0 3
49216: ST_TO_ADDR
// vc_weapon := weapon ;
49217: LD_ADDR_OWVAR 40
49221: PUSH
49222: LD_VAR 0 4
49226: ST_TO_ADDR
// vc_fuel_battery := fuel ;
49227: LD_ADDR_OWVAR 41
49231: PUSH
49232: LD_VAR 0 5
49236: ST_TO_ADDR
// end ;
49237: LD_VAR 0 6
49241: RET
// export function WantPlant ( unit ) ; var task ; begin
49242: LD_INT 0
49244: PPUSH
49245: PPUSH
// result := false ;
49246: LD_ADDR_VAR 0 2
49250: PUSH
49251: LD_INT 0
49253: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
49254: LD_ADDR_VAR 0 3
49258: PUSH
49259: LD_VAR 0 1
49263: PPUSH
49264: CALL_OW 437
49268: ST_TO_ADDR
// if task then
49269: LD_VAR 0 3
49273: IFFALSE 49301
// if task [ 1 ] [ 1 ] = p then
49275: LD_VAR 0 3
49279: PUSH
49280: LD_INT 1
49282: ARRAY
49283: PUSH
49284: LD_INT 1
49286: ARRAY
49287: PUSH
49288: LD_STRING p
49290: EQUAL
49291: IFFALSE 49301
// result := true ;
49293: LD_ADDR_VAR 0 2
49297: PUSH
49298: LD_INT 1
49300: ST_TO_ADDR
// end ;
49301: LD_VAR 0 2
49305: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
49306: LD_INT 0
49308: PPUSH
49309: PPUSH
49310: PPUSH
49311: PPUSH
// if pos < 1 then
49312: LD_VAR 0 2
49316: PUSH
49317: LD_INT 1
49319: LESS
49320: IFFALSE 49324
// exit ;
49322: GO 49627
// if pos = 1 then
49324: LD_VAR 0 2
49328: PUSH
49329: LD_INT 1
49331: EQUAL
49332: IFFALSE 49365
// result := Replace ( arr , pos [ 1 ] , value ) else
49334: LD_ADDR_VAR 0 4
49338: PUSH
49339: LD_VAR 0 1
49343: PPUSH
49344: LD_VAR 0 2
49348: PUSH
49349: LD_INT 1
49351: ARRAY
49352: PPUSH
49353: LD_VAR 0 3
49357: PPUSH
49358: CALL_OW 1
49362: ST_TO_ADDR
49363: GO 49627
// begin tmp := arr ;
49365: LD_ADDR_VAR 0 6
49369: PUSH
49370: LD_VAR 0 1
49374: ST_TO_ADDR
// s_arr := [ tmp ] ;
49375: LD_ADDR_VAR 0 7
49379: PUSH
49380: LD_VAR 0 6
49384: PUSH
49385: EMPTY
49386: LIST
49387: ST_TO_ADDR
// for i = 1 to pos - 1 do
49388: LD_ADDR_VAR 0 5
49392: PUSH
49393: DOUBLE
49394: LD_INT 1
49396: DEC
49397: ST_TO_ADDR
49398: LD_VAR 0 2
49402: PUSH
49403: LD_INT 1
49405: MINUS
49406: PUSH
49407: FOR_TO
49408: IFFALSE 49453
// begin tmp := tmp [ pos [ i ] ] ;
49410: LD_ADDR_VAR 0 6
49414: PUSH
49415: LD_VAR 0 6
49419: PUSH
49420: LD_VAR 0 2
49424: PUSH
49425: LD_VAR 0 5
49429: ARRAY
49430: ARRAY
49431: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
49432: LD_ADDR_VAR 0 7
49436: PUSH
49437: LD_VAR 0 7
49441: PUSH
49442: LD_VAR 0 6
49446: PUSH
49447: EMPTY
49448: LIST
49449: ADD
49450: ST_TO_ADDR
// end ;
49451: GO 49407
49453: POP
49454: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
49455: LD_ADDR_VAR 0 6
49459: PUSH
49460: LD_VAR 0 6
49464: PPUSH
49465: LD_VAR 0 2
49469: PUSH
49470: LD_VAR 0 2
49474: ARRAY
49475: PPUSH
49476: LD_VAR 0 3
49480: PPUSH
49481: CALL_OW 1
49485: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
49486: LD_ADDR_VAR 0 7
49490: PUSH
49491: LD_VAR 0 7
49495: PPUSH
49496: LD_VAR 0 7
49500: PPUSH
49501: LD_VAR 0 6
49505: PPUSH
49506: CALL_OW 1
49510: ST_TO_ADDR
// for i = s_arr downto 2 do
49511: LD_ADDR_VAR 0 5
49515: PUSH
49516: DOUBLE
49517: LD_VAR 0 7
49521: INC
49522: ST_TO_ADDR
49523: LD_INT 2
49525: PUSH
49526: FOR_DOWNTO
49527: IFFALSE 49611
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
49529: LD_ADDR_VAR 0 6
49533: PUSH
49534: LD_VAR 0 7
49538: PUSH
49539: LD_VAR 0 5
49543: PUSH
49544: LD_INT 1
49546: MINUS
49547: ARRAY
49548: PPUSH
49549: LD_VAR 0 2
49553: PUSH
49554: LD_VAR 0 5
49558: PUSH
49559: LD_INT 1
49561: MINUS
49562: ARRAY
49563: PPUSH
49564: LD_VAR 0 7
49568: PUSH
49569: LD_VAR 0 5
49573: ARRAY
49574: PPUSH
49575: CALL_OW 1
49579: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
49580: LD_ADDR_VAR 0 7
49584: PUSH
49585: LD_VAR 0 7
49589: PPUSH
49590: LD_VAR 0 5
49594: PUSH
49595: LD_INT 1
49597: MINUS
49598: PPUSH
49599: LD_VAR 0 6
49603: PPUSH
49604: CALL_OW 1
49608: ST_TO_ADDR
// end ;
49609: GO 49526
49611: POP
49612: POP
// result := s_arr [ 1 ] ;
49613: LD_ADDR_VAR 0 4
49617: PUSH
49618: LD_VAR 0 7
49622: PUSH
49623: LD_INT 1
49625: ARRAY
49626: ST_TO_ADDR
// end ; end ;
49627: LD_VAR 0 4
49631: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
49632: LD_INT 0
49634: PPUSH
49635: PPUSH
// if not list then
49636: LD_VAR 0 1
49640: NOT
49641: IFFALSE 49645
// exit ;
49643: GO 49736
// i := list [ pos1 ] ;
49645: LD_ADDR_VAR 0 5
49649: PUSH
49650: LD_VAR 0 1
49654: PUSH
49655: LD_VAR 0 2
49659: ARRAY
49660: ST_TO_ADDR
// if not i then
49661: LD_VAR 0 5
49665: NOT
49666: IFFALSE 49670
// exit ;
49668: GO 49736
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
49670: LD_ADDR_VAR 0 1
49674: PUSH
49675: LD_VAR 0 1
49679: PPUSH
49680: LD_VAR 0 2
49684: PPUSH
49685: LD_VAR 0 1
49689: PUSH
49690: LD_VAR 0 3
49694: ARRAY
49695: PPUSH
49696: CALL_OW 1
49700: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
49701: LD_ADDR_VAR 0 1
49705: PUSH
49706: LD_VAR 0 1
49710: PPUSH
49711: LD_VAR 0 3
49715: PPUSH
49716: LD_VAR 0 5
49720: PPUSH
49721: CALL_OW 1
49725: ST_TO_ADDR
// result := list ;
49726: LD_ADDR_VAR 0 4
49730: PUSH
49731: LD_VAR 0 1
49735: ST_TO_ADDR
// end ;
49736: LD_VAR 0 4
49740: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
49741: LD_INT 0
49743: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
49744: LD_ADDR_VAR 0 5
49748: PUSH
49749: LD_VAR 0 1
49753: PPUSH
49754: CALL_OW 250
49758: PPUSH
49759: LD_VAR 0 1
49763: PPUSH
49764: CALL_OW 251
49768: PPUSH
49769: LD_VAR 0 2
49773: PPUSH
49774: LD_VAR 0 3
49778: PPUSH
49779: LD_VAR 0 4
49783: PPUSH
49784: CALL 49794 0 5
49788: ST_TO_ADDR
// end ;
49789: LD_VAR 0 5
49793: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49794: LD_INT 0
49796: PPUSH
49797: PPUSH
49798: PPUSH
49799: PPUSH
// if not list then
49800: LD_VAR 0 3
49804: NOT
49805: IFFALSE 49809
// exit ;
49807: GO 50197
// result := [ ] ;
49809: LD_ADDR_VAR 0 6
49813: PUSH
49814: EMPTY
49815: ST_TO_ADDR
// for i in list do
49816: LD_ADDR_VAR 0 7
49820: PUSH
49821: LD_VAR 0 3
49825: PUSH
49826: FOR_IN
49827: IFFALSE 50029
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49829: LD_ADDR_VAR 0 9
49833: PUSH
49834: LD_VAR 0 7
49838: PPUSH
49839: LD_VAR 0 1
49843: PPUSH
49844: LD_VAR 0 2
49848: PPUSH
49849: CALL_OW 297
49853: ST_TO_ADDR
// if not result then
49854: LD_VAR 0 6
49858: NOT
49859: IFFALSE 49885
// result := [ [ i , tmp ] ] else
49861: LD_ADDR_VAR 0 6
49865: PUSH
49866: LD_VAR 0 7
49870: PUSH
49871: LD_VAR 0 9
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: EMPTY
49881: LIST
49882: ST_TO_ADDR
49883: GO 50027
// begin if result [ result ] [ 2 ] < tmp then
49885: LD_VAR 0 6
49889: PUSH
49890: LD_VAR 0 6
49894: ARRAY
49895: PUSH
49896: LD_INT 2
49898: ARRAY
49899: PUSH
49900: LD_VAR 0 9
49904: LESS
49905: IFFALSE 49947
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
49907: LD_ADDR_VAR 0 6
49911: PUSH
49912: LD_VAR 0 6
49916: PPUSH
49917: LD_VAR 0 6
49921: PUSH
49922: LD_INT 1
49924: PLUS
49925: PPUSH
49926: LD_VAR 0 7
49930: PUSH
49931: LD_VAR 0 9
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PPUSH
49940: CALL_OW 2
49944: ST_TO_ADDR
49945: GO 50027
// for j = 1 to result do
49947: LD_ADDR_VAR 0 8
49951: PUSH
49952: DOUBLE
49953: LD_INT 1
49955: DEC
49956: ST_TO_ADDR
49957: LD_VAR 0 6
49961: PUSH
49962: FOR_TO
49963: IFFALSE 50025
// begin if tmp < result [ j ] [ 2 ] then
49965: LD_VAR 0 9
49969: PUSH
49970: LD_VAR 0 6
49974: PUSH
49975: LD_VAR 0 8
49979: ARRAY
49980: PUSH
49981: LD_INT 2
49983: ARRAY
49984: LESS
49985: IFFALSE 50023
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49987: LD_ADDR_VAR 0 6
49991: PUSH
49992: LD_VAR 0 6
49996: PPUSH
49997: LD_VAR 0 8
50001: PPUSH
50002: LD_VAR 0 7
50006: PUSH
50007: LD_VAR 0 9
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PPUSH
50016: CALL_OW 2
50020: ST_TO_ADDR
// break ;
50021: GO 50025
// end ; end ;
50023: GO 49962
50025: POP
50026: POP
// end ; end ;
50027: GO 49826
50029: POP
50030: POP
// if result and not asc then
50031: LD_VAR 0 6
50035: PUSH
50036: LD_VAR 0 4
50040: NOT
50041: AND
50042: IFFALSE 50117
// begin tmp := result ;
50044: LD_ADDR_VAR 0 9
50048: PUSH
50049: LD_VAR 0 6
50053: ST_TO_ADDR
// for i = tmp downto 1 do
50054: LD_ADDR_VAR 0 7
50058: PUSH
50059: DOUBLE
50060: LD_VAR 0 9
50064: INC
50065: ST_TO_ADDR
50066: LD_INT 1
50068: PUSH
50069: FOR_DOWNTO
50070: IFFALSE 50115
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
50072: LD_ADDR_VAR 0 6
50076: PUSH
50077: LD_VAR 0 6
50081: PPUSH
50082: LD_VAR 0 9
50086: PUSH
50087: LD_VAR 0 7
50091: MINUS
50092: PUSH
50093: LD_INT 1
50095: PLUS
50096: PPUSH
50097: LD_VAR 0 9
50101: PUSH
50102: LD_VAR 0 7
50106: ARRAY
50107: PPUSH
50108: CALL_OW 1
50112: ST_TO_ADDR
50113: GO 50069
50115: POP
50116: POP
// end ; tmp := [ ] ;
50117: LD_ADDR_VAR 0 9
50121: PUSH
50122: EMPTY
50123: ST_TO_ADDR
// if mode then
50124: LD_VAR 0 5
50128: IFFALSE 50197
// begin for i = 1 to result do
50130: LD_ADDR_VAR 0 7
50134: PUSH
50135: DOUBLE
50136: LD_INT 1
50138: DEC
50139: ST_TO_ADDR
50140: LD_VAR 0 6
50144: PUSH
50145: FOR_TO
50146: IFFALSE 50185
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
50148: LD_ADDR_VAR 0 9
50152: PUSH
50153: LD_VAR 0 9
50157: PPUSH
50158: LD_VAR 0 7
50162: PPUSH
50163: LD_VAR 0 6
50167: PUSH
50168: LD_VAR 0 7
50172: ARRAY
50173: PUSH
50174: LD_INT 1
50176: ARRAY
50177: PPUSH
50178: CALL_OW 1
50182: ST_TO_ADDR
50183: GO 50145
50185: POP
50186: POP
// result := tmp ;
50187: LD_ADDR_VAR 0 6
50191: PUSH
50192: LD_VAR 0 9
50196: ST_TO_ADDR
// end ; end ;
50197: LD_VAR 0 6
50201: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
50202: LD_INT 0
50204: PPUSH
50205: PPUSH
50206: PPUSH
50207: PPUSH
50208: PPUSH
50209: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
50210: LD_ADDR_VAR 0 5
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: EMPTY
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: ST_TO_ADDR
// if not x or not y then
50232: LD_VAR 0 2
50236: NOT
50237: PUSH
50238: LD_VAR 0 3
50242: NOT
50243: OR
50244: IFFALSE 50248
// exit ;
50246: GO 51900
// if not range then
50248: LD_VAR 0 4
50252: NOT
50253: IFFALSE 50263
// range := 10 ;
50255: LD_ADDR_VAR 0 4
50259: PUSH
50260: LD_INT 10
50262: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
50263: LD_ADDR_VAR 0 8
50267: PUSH
50268: LD_INT 81
50270: PUSH
50271: LD_VAR 0 1
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 92
50282: PUSH
50283: LD_VAR 0 2
50287: PUSH
50288: LD_VAR 0 3
50292: PUSH
50293: LD_VAR 0 4
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 3
50306: PUSH
50307: LD_INT 21
50309: PUSH
50310: LD_INT 3
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: LIST
50325: PPUSH
50326: CALL_OW 69
50330: ST_TO_ADDR
// if not tmp then
50331: LD_VAR 0 8
50335: NOT
50336: IFFALSE 50340
// exit ;
50338: GO 51900
// for i in tmp do
50340: LD_ADDR_VAR 0 6
50344: PUSH
50345: LD_VAR 0 8
50349: PUSH
50350: FOR_IN
50351: IFFALSE 51875
// begin points := [ 0 , 0 , 0 ] ;
50353: LD_ADDR_VAR 0 9
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: LIST
50371: ST_TO_ADDR
// bpoints := 1 ;
50372: LD_ADDR_VAR 0 10
50376: PUSH
50377: LD_INT 1
50379: ST_TO_ADDR
// case GetType ( i ) of unit_human :
50380: LD_VAR 0 6
50384: PPUSH
50385: CALL_OW 247
50389: PUSH
50390: LD_INT 1
50392: DOUBLE
50393: EQUAL
50394: IFTRUE 50398
50396: GO 50976
50398: POP
// begin if GetClass ( i ) = 1 then
50399: LD_VAR 0 6
50403: PPUSH
50404: CALL_OW 257
50408: PUSH
50409: LD_INT 1
50411: EQUAL
50412: IFFALSE 50433
// points := [ 10 , 5 , 3 ] ;
50414: LD_ADDR_VAR 0 9
50418: PUSH
50419: LD_INT 10
50421: PUSH
50422: LD_INT 5
50424: PUSH
50425: LD_INT 3
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: LIST
50432: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
50433: LD_VAR 0 6
50437: PPUSH
50438: CALL_OW 257
50442: PUSH
50443: LD_INT 2
50445: PUSH
50446: LD_INT 3
50448: PUSH
50449: LD_INT 4
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: LIST
50456: IN
50457: IFFALSE 50478
// points := [ 3 , 2 , 1 ] ;
50459: LD_ADDR_VAR 0 9
50463: PUSH
50464: LD_INT 3
50466: PUSH
50467: LD_INT 2
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: LIST
50477: ST_TO_ADDR
// if GetClass ( i ) = 5 then
50478: LD_VAR 0 6
50482: PPUSH
50483: CALL_OW 257
50487: PUSH
50488: LD_INT 5
50490: EQUAL
50491: IFFALSE 50512
// points := [ 130 , 5 , 2 ] ;
50493: LD_ADDR_VAR 0 9
50497: PUSH
50498: LD_INT 130
50500: PUSH
50501: LD_INT 5
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: LIST
50511: ST_TO_ADDR
// if GetClass ( i ) = 8 then
50512: LD_VAR 0 6
50516: PPUSH
50517: CALL_OW 257
50521: PUSH
50522: LD_INT 8
50524: EQUAL
50525: IFFALSE 50546
// points := [ 35 , 35 , 30 ] ;
50527: LD_ADDR_VAR 0 9
50531: PUSH
50532: LD_INT 35
50534: PUSH
50535: LD_INT 35
50537: PUSH
50538: LD_INT 30
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: LIST
50545: ST_TO_ADDR
// if GetClass ( i ) = 9 then
50546: LD_VAR 0 6
50550: PPUSH
50551: CALL_OW 257
50555: PUSH
50556: LD_INT 9
50558: EQUAL
50559: IFFALSE 50580
// points := [ 20 , 55 , 40 ] ;
50561: LD_ADDR_VAR 0 9
50565: PUSH
50566: LD_INT 20
50568: PUSH
50569: LD_INT 55
50571: PUSH
50572: LD_INT 40
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: LIST
50579: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
50580: LD_VAR 0 6
50584: PPUSH
50585: CALL_OW 257
50589: PUSH
50590: LD_INT 12
50592: PUSH
50593: LD_INT 16
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: IN
50600: IFFALSE 50621
// points := [ 5 , 3 , 2 ] ;
50602: LD_ADDR_VAR 0 9
50606: PUSH
50607: LD_INT 5
50609: PUSH
50610: LD_INT 3
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: LIST
50620: ST_TO_ADDR
// if GetClass ( i ) = 17 then
50621: LD_VAR 0 6
50625: PPUSH
50626: CALL_OW 257
50630: PUSH
50631: LD_INT 17
50633: EQUAL
50634: IFFALSE 50655
// points := [ 100 , 50 , 75 ] ;
50636: LD_ADDR_VAR 0 9
50640: PUSH
50641: LD_INT 100
50643: PUSH
50644: LD_INT 50
50646: PUSH
50647: LD_INT 75
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: LIST
50654: ST_TO_ADDR
// if GetClass ( i ) = 15 then
50655: LD_VAR 0 6
50659: PPUSH
50660: CALL_OW 257
50664: PUSH
50665: LD_INT 15
50667: EQUAL
50668: IFFALSE 50689
// points := [ 10 , 5 , 3 ] ;
50670: LD_ADDR_VAR 0 9
50674: PUSH
50675: LD_INT 10
50677: PUSH
50678: LD_INT 5
50680: PUSH
50681: LD_INT 3
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: LIST
50688: ST_TO_ADDR
// if GetClass ( i ) = 14 then
50689: LD_VAR 0 6
50693: PPUSH
50694: CALL_OW 257
50698: PUSH
50699: LD_INT 14
50701: EQUAL
50702: IFFALSE 50723
// points := [ 10 , 0 , 0 ] ;
50704: LD_ADDR_VAR 0 9
50708: PUSH
50709: LD_INT 10
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: LIST
50722: ST_TO_ADDR
// if GetClass ( i ) = 11 then
50723: LD_VAR 0 6
50727: PPUSH
50728: CALL_OW 257
50732: PUSH
50733: LD_INT 11
50735: EQUAL
50736: IFFALSE 50757
// points := [ 30 , 10 , 5 ] ;
50738: LD_ADDR_VAR 0 9
50742: PUSH
50743: LD_INT 30
50745: PUSH
50746: LD_INT 10
50748: PUSH
50749: LD_INT 5
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: LIST
50756: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50757: LD_VAR 0 1
50761: PPUSH
50762: LD_INT 5
50764: PPUSH
50765: CALL_OW 321
50769: PUSH
50770: LD_INT 2
50772: EQUAL
50773: IFFALSE 50790
// bpoints := bpoints * 1.8 ;
50775: LD_ADDR_VAR 0 10
50779: PUSH
50780: LD_VAR 0 10
50784: PUSH
50785: LD_REAL  1.80000000000000E+0000
50788: MUL
50789: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50790: LD_VAR 0 6
50794: PPUSH
50795: CALL_OW 257
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: LD_INT 2
50805: PUSH
50806: LD_INT 3
50808: PUSH
50809: LD_INT 4
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: IN
50818: PUSH
50819: LD_VAR 0 1
50823: PPUSH
50824: LD_INT 51
50826: PPUSH
50827: CALL_OW 321
50831: PUSH
50832: LD_INT 2
50834: EQUAL
50835: AND
50836: IFFALSE 50853
// bpoints := bpoints * 1.2 ;
50838: LD_ADDR_VAR 0 10
50842: PUSH
50843: LD_VAR 0 10
50847: PUSH
50848: LD_REAL  1.20000000000000E+0000
50851: MUL
50852: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50853: LD_VAR 0 6
50857: PPUSH
50858: CALL_OW 257
50862: PUSH
50863: LD_INT 5
50865: PUSH
50866: LD_INT 7
50868: PUSH
50869: LD_INT 9
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: LIST
50876: IN
50877: PUSH
50878: LD_VAR 0 1
50882: PPUSH
50883: LD_INT 52
50885: PPUSH
50886: CALL_OW 321
50890: PUSH
50891: LD_INT 2
50893: EQUAL
50894: AND
50895: IFFALSE 50912
// bpoints := bpoints * 1.5 ;
50897: LD_ADDR_VAR 0 10
50901: PUSH
50902: LD_VAR 0 10
50906: PUSH
50907: LD_REAL  1.50000000000000E+0000
50910: MUL
50911: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
50912: LD_VAR 0 1
50916: PPUSH
50917: LD_INT 66
50919: PPUSH
50920: CALL_OW 321
50924: PUSH
50925: LD_INT 2
50927: EQUAL
50928: IFFALSE 50945
// bpoints := bpoints * 1.1 ;
50930: LD_ADDR_VAR 0 10
50934: PUSH
50935: LD_VAR 0 10
50939: PUSH
50940: LD_REAL  1.10000000000000E+0000
50943: MUL
50944: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
50945: LD_ADDR_VAR 0 10
50949: PUSH
50950: LD_VAR 0 10
50954: PUSH
50955: LD_VAR 0 6
50959: PPUSH
50960: LD_INT 1
50962: PPUSH
50963: CALL_OW 259
50967: PUSH
50968: LD_REAL  1.15000000000000E+0000
50971: MUL
50972: MUL
50973: ST_TO_ADDR
// end ; unit_vehicle :
50974: GO 51804
50976: LD_INT 2
50978: DOUBLE
50979: EQUAL
50980: IFTRUE 50984
50982: GO 51792
50984: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
50985: LD_VAR 0 6
50989: PPUSH
50990: CALL_OW 264
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: LD_INT 42
51000: PUSH
51001: LD_INT 24
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: LIST
51008: IN
51009: IFFALSE 51030
// points := [ 25 , 5 , 3 ] ;
51011: LD_ADDR_VAR 0 9
51015: PUSH
51016: LD_INT 25
51018: PUSH
51019: LD_INT 5
51021: PUSH
51022: LD_INT 3
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: LIST
51029: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
51030: LD_VAR 0 6
51034: PPUSH
51035: CALL_OW 264
51039: PUSH
51040: LD_INT 4
51042: PUSH
51043: LD_INT 43
51045: PUSH
51046: LD_INT 25
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: LIST
51053: IN
51054: IFFALSE 51075
// points := [ 40 , 15 , 5 ] ;
51056: LD_ADDR_VAR 0 9
51060: PUSH
51061: LD_INT 40
51063: PUSH
51064: LD_INT 15
51066: PUSH
51067: LD_INT 5
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: LIST
51074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
51075: LD_VAR 0 6
51079: PPUSH
51080: CALL_OW 264
51084: PUSH
51085: LD_INT 3
51087: PUSH
51088: LD_INT 23
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: IN
51095: IFFALSE 51116
// points := [ 7 , 25 , 8 ] ;
51097: LD_ADDR_VAR 0 9
51101: PUSH
51102: LD_INT 7
51104: PUSH
51105: LD_INT 25
51107: PUSH
51108: LD_INT 8
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: LIST
51115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
51116: LD_VAR 0 6
51120: PPUSH
51121: CALL_OW 264
51125: PUSH
51126: LD_INT 5
51128: PUSH
51129: LD_INT 27
51131: PUSH
51132: LD_INT 44
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: LIST
51139: IN
51140: IFFALSE 51161
// points := [ 14 , 50 , 16 ] ;
51142: LD_ADDR_VAR 0 9
51146: PUSH
51147: LD_INT 14
51149: PUSH
51150: LD_INT 50
51152: PUSH
51153: LD_INT 16
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: LIST
51160: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
51161: LD_VAR 0 6
51165: PPUSH
51166: CALL_OW 264
51170: PUSH
51171: LD_INT 6
51173: PUSH
51174: LD_INT 46
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: IN
51181: IFFALSE 51202
// points := [ 32 , 120 , 70 ] ;
51183: LD_ADDR_VAR 0 9
51187: PUSH
51188: LD_INT 32
51190: PUSH
51191: LD_INT 120
51193: PUSH
51194: LD_INT 70
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: LIST
51201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
51202: LD_VAR 0 6
51206: PPUSH
51207: CALL_OW 264
51211: PUSH
51212: LD_INT 7
51214: PUSH
51215: LD_INT 28
51217: PUSH
51218: LD_INT 45
51220: PUSH
51221: LD_EXP 53
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: IN
51232: IFFALSE 51253
// points := [ 35 , 20 , 45 ] ;
51234: LD_ADDR_VAR 0 9
51238: PUSH
51239: LD_INT 35
51241: PUSH
51242: LD_INT 20
51244: PUSH
51245: LD_INT 45
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: LIST
51252: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
51253: LD_VAR 0 6
51257: PPUSH
51258: CALL_OW 264
51262: PUSH
51263: LD_INT 47
51265: PUSH
51266: EMPTY
51267: LIST
51268: IN
51269: IFFALSE 51290
// points := [ 67 , 45 , 75 ] ;
51271: LD_ADDR_VAR 0 9
51275: PUSH
51276: LD_INT 67
51278: PUSH
51279: LD_INT 45
51281: PUSH
51282: LD_INT 75
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: LIST
51289: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
51290: LD_VAR 0 6
51294: PPUSH
51295: CALL_OW 264
51299: PUSH
51300: LD_INT 26
51302: PUSH
51303: EMPTY
51304: LIST
51305: IN
51306: IFFALSE 51327
// points := [ 120 , 30 , 80 ] ;
51308: LD_ADDR_VAR 0 9
51312: PUSH
51313: LD_INT 120
51315: PUSH
51316: LD_INT 30
51318: PUSH
51319: LD_INT 80
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: LIST
51326: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
51327: LD_VAR 0 6
51331: PPUSH
51332: CALL_OW 264
51336: PUSH
51337: LD_INT 22
51339: PUSH
51340: EMPTY
51341: LIST
51342: IN
51343: IFFALSE 51364
// points := [ 40 , 1 , 1 ] ;
51345: LD_ADDR_VAR 0 9
51349: PUSH
51350: LD_INT 40
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: LIST
51363: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
51364: LD_VAR 0 6
51368: PPUSH
51369: CALL_OW 264
51373: PUSH
51374: LD_INT 29
51376: PUSH
51377: EMPTY
51378: LIST
51379: IN
51380: IFFALSE 51401
// points := [ 70 , 200 , 400 ] ;
51382: LD_ADDR_VAR 0 9
51386: PUSH
51387: LD_INT 70
51389: PUSH
51390: LD_INT 200
51392: PUSH
51393: LD_INT 400
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: LIST
51400: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
51401: LD_VAR 0 6
51405: PPUSH
51406: CALL_OW 264
51410: PUSH
51411: LD_INT 14
51413: PUSH
51414: LD_INT 53
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: IN
51421: IFFALSE 51442
// points := [ 40 , 10 , 20 ] ;
51423: LD_ADDR_VAR 0 9
51427: PUSH
51428: LD_INT 40
51430: PUSH
51431: LD_INT 10
51433: PUSH
51434: LD_INT 20
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: LIST
51441: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
51442: LD_VAR 0 6
51446: PPUSH
51447: CALL_OW 264
51451: PUSH
51452: LD_INT 9
51454: PUSH
51455: EMPTY
51456: LIST
51457: IN
51458: IFFALSE 51479
// points := [ 5 , 70 , 20 ] ;
51460: LD_ADDR_VAR 0 9
51464: PUSH
51465: LD_INT 5
51467: PUSH
51468: LD_INT 70
51470: PUSH
51471: LD_INT 20
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: LIST
51478: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
51479: LD_VAR 0 6
51483: PPUSH
51484: CALL_OW 264
51488: PUSH
51489: LD_INT 10
51491: PUSH
51492: EMPTY
51493: LIST
51494: IN
51495: IFFALSE 51516
// points := [ 35 , 110 , 70 ] ;
51497: LD_ADDR_VAR 0 9
51501: PUSH
51502: LD_INT 35
51504: PUSH
51505: LD_INT 110
51507: PUSH
51508: LD_INT 70
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: LIST
51515: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
51516: LD_VAR 0 6
51520: PPUSH
51521: CALL_OW 265
51525: PUSH
51526: LD_INT 25
51528: EQUAL
51529: IFFALSE 51550
// points := [ 80 , 65 , 100 ] ;
51531: LD_ADDR_VAR 0 9
51535: PUSH
51536: LD_INT 80
51538: PUSH
51539: LD_INT 65
51541: PUSH
51542: LD_INT 100
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: LIST
51549: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
51550: LD_VAR 0 6
51554: PPUSH
51555: CALL_OW 263
51559: PUSH
51560: LD_INT 1
51562: EQUAL
51563: IFFALSE 51598
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
51565: LD_ADDR_VAR 0 10
51569: PUSH
51570: LD_VAR 0 10
51574: PUSH
51575: LD_VAR 0 6
51579: PPUSH
51580: CALL_OW 311
51584: PPUSH
51585: LD_INT 3
51587: PPUSH
51588: CALL_OW 259
51592: PUSH
51593: LD_INT 4
51595: MUL
51596: MUL
51597: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
51598: LD_VAR 0 6
51602: PPUSH
51603: CALL_OW 263
51607: PUSH
51608: LD_INT 2
51610: EQUAL
51611: IFFALSE 51662
// begin j := IsControledBy ( i ) ;
51613: LD_ADDR_VAR 0 7
51617: PUSH
51618: LD_VAR 0 6
51622: PPUSH
51623: CALL_OW 312
51627: ST_TO_ADDR
// if j then
51628: LD_VAR 0 7
51632: IFFALSE 51662
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
51634: LD_ADDR_VAR 0 10
51638: PUSH
51639: LD_VAR 0 10
51643: PUSH
51644: LD_VAR 0 7
51648: PPUSH
51649: LD_INT 3
51651: PPUSH
51652: CALL_OW 259
51656: PUSH
51657: LD_INT 3
51659: MUL
51660: MUL
51661: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
51662: LD_VAR 0 6
51666: PPUSH
51667: CALL_OW 264
51671: PUSH
51672: LD_INT 5
51674: PUSH
51675: LD_INT 6
51677: PUSH
51678: LD_INT 46
51680: PUSH
51681: LD_INT 44
51683: PUSH
51684: LD_INT 47
51686: PUSH
51687: LD_INT 45
51689: PUSH
51690: LD_INT 28
51692: PUSH
51693: LD_INT 7
51695: PUSH
51696: LD_INT 27
51698: PUSH
51699: LD_INT 29
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: IN
51714: PUSH
51715: LD_VAR 0 1
51719: PPUSH
51720: LD_INT 52
51722: PPUSH
51723: CALL_OW 321
51727: PUSH
51728: LD_INT 2
51730: EQUAL
51731: AND
51732: IFFALSE 51749
// bpoints := bpoints * 1.2 ;
51734: LD_ADDR_VAR 0 10
51738: PUSH
51739: LD_VAR 0 10
51743: PUSH
51744: LD_REAL  1.20000000000000E+0000
51747: MUL
51748: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51749: LD_VAR 0 6
51753: PPUSH
51754: CALL_OW 264
51758: PUSH
51759: LD_INT 6
51761: PUSH
51762: LD_INT 46
51764: PUSH
51765: LD_INT 47
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: LIST
51772: IN
51773: IFFALSE 51790
// bpoints := bpoints * 1.2 ;
51775: LD_ADDR_VAR 0 10
51779: PUSH
51780: LD_VAR 0 10
51784: PUSH
51785: LD_REAL  1.20000000000000E+0000
51788: MUL
51789: ST_TO_ADDR
// end ; unit_building :
51790: GO 51804
51792: LD_INT 3
51794: DOUBLE
51795: EQUAL
51796: IFTRUE 51800
51798: GO 51803
51800: POP
// ; end ;
51801: GO 51804
51803: POP
// for j = 1 to 3 do
51804: LD_ADDR_VAR 0 7
51808: PUSH
51809: DOUBLE
51810: LD_INT 1
51812: DEC
51813: ST_TO_ADDR
51814: LD_INT 3
51816: PUSH
51817: FOR_TO
51818: IFFALSE 51871
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51820: LD_ADDR_VAR 0 5
51824: PUSH
51825: LD_VAR 0 5
51829: PPUSH
51830: LD_VAR 0 7
51834: PPUSH
51835: LD_VAR 0 5
51839: PUSH
51840: LD_VAR 0 7
51844: ARRAY
51845: PUSH
51846: LD_VAR 0 9
51850: PUSH
51851: LD_VAR 0 7
51855: ARRAY
51856: PUSH
51857: LD_VAR 0 10
51861: MUL
51862: PLUS
51863: PPUSH
51864: CALL_OW 1
51868: ST_TO_ADDR
51869: GO 51817
51871: POP
51872: POP
// end ;
51873: GO 50350
51875: POP
51876: POP
// result := Replace ( result , 4 , tmp ) ;
51877: LD_ADDR_VAR 0 5
51881: PUSH
51882: LD_VAR 0 5
51886: PPUSH
51887: LD_INT 4
51889: PPUSH
51890: LD_VAR 0 8
51894: PPUSH
51895: CALL_OW 1
51899: ST_TO_ADDR
// end ;
51900: LD_VAR 0 5
51904: RET
// export function DangerAtRange ( unit , range ) ; begin
51905: LD_INT 0
51907: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
51908: LD_ADDR_VAR 0 3
51912: PUSH
51913: LD_VAR 0 1
51917: PPUSH
51918: CALL_OW 255
51922: PPUSH
51923: LD_VAR 0 1
51927: PPUSH
51928: CALL_OW 250
51932: PPUSH
51933: LD_VAR 0 1
51937: PPUSH
51938: CALL_OW 251
51942: PPUSH
51943: LD_VAR 0 2
51947: PPUSH
51948: CALL 50202 0 4
51952: ST_TO_ADDR
// end ;
51953: LD_VAR 0 3
51957: RET
// export function DangerInArea ( side , area ) ; begin
51958: LD_INT 0
51960: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
51961: LD_ADDR_VAR 0 3
51965: PUSH
51966: LD_VAR 0 2
51970: PPUSH
51971: LD_INT 81
51973: PUSH
51974: LD_VAR 0 1
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PPUSH
51983: CALL_OW 70
51987: ST_TO_ADDR
// end ;
51988: LD_VAR 0 3
51992: RET
// export function IsExtension ( b ) ; begin
51993: LD_INT 0
51995: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
51996: LD_ADDR_VAR 0 2
52000: PUSH
52001: LD_VAR 0 1
52005: PUSH
52006: LD_INT 23
52008: PUSH
52009: LD_INT 20
52011: PUSH
52012: LD_INT 22
52014: PUSH
52015: LD_INT 17
52017: PUSH
52018: LD_INT 24
52020: PUSH
52021: LD_INT 21
52023: PUSH
52024: LD_INT 19
52026: PUSH
52027: LD_INT 16
52029: PUSH
52030: LD_INT 25
52032: PUSH
52033: LD_INT 18
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: IN
52048: ST_TO_ADDR
// end ;
52049: LD_VAR 0 2
52053: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
52054: LD_INT 0
52056: PPUSH
52057: PPUSH
52058: PPUSH
// result := [ ] ;
52059: LD_ADDR_VAR 0 4
52063: PUSH
52064: EMPTY
52065: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
52066: LD_ADDR_VAR 0 5
52070: PUSH
52071: LD_VAR 0 2
52075: PPUSH
52076: LD_INT 21
52078: PUSH
52079: LD_INT 3
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PPUSH
52086: CALL_OW 70
52090: ST_TO_ADDR
// if not tmp then
52091: LD_VAR 0 5
52095: NOT
52096: IFFALSE 52100
// exit ;
52098: GO 52164
// if checkLink then
52100: LD_VAR 0 3
52104: IFFALSE 52154
// begin for i in tmp do
52106: LD_ADDR_VAR 0 6
52110: PUSH
52111: LD_VAR 0 5
52115: PUSH
52116: FOR_IN
52117: IFFALSE 52152
// if GetBase ( i ) <> base then
52119: LD_VAR 0 6
52123: PPUSH
52124: CALL_OW 274
52128: PUSH
52129: LD_VAR 0 1
52133: NONEQUAL
52134: IFFALSE 52150
// ComLinkToBase ( base , i ) ;
52136: LD_VAR 0 1
52140: PPUSH
52141: LD_VAR 0 6
52145: PPUSH
52146: CALL_OW 169
52150: GO 52116
52152: POP
52153: POP
// end ; result := tmp ;
52154: LD_ADDR_VAR 0 4
52158: PUSH
52159: LD_VAR 0 5
52163: ST_TO_ADDR
// end ;
52164: LD_VAR 0 4
52168: RET
// export function ComComplete ( units , b ) ; var i ; begin
52169: LD_INT 0
52171: PPUSH
52172: PPUSH
// if not units then
52173: LD_VAR 0 1
52177: NOT
52178: IFFALSE 52182
// exit ;
52180: GO 52272
// for i in units do
52182: LD_ADDR_VAR 0 4
52186: PUSH
52187: LD_VAR 0 1
52191: PUSH
52192: FOR_IN
52193: IFFALSE 52270
// if BuildingStatus ( b ) = bs_build then
52195: LD_VAR 0 2
52199: PPUSH
52200: CALL_OW 461
52204: PUSH
52205: LD_INT 1
52207: EQUAL
52208: IFFALSE 52268
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
52210: LD_VAR 0 4
52214: PPUSH
52215: LD_STRING h
52217: PUSH
52218: LD_VAR 0 2
52222: PPUSH
52223: CALL_OW 250
52227: PUSH
52228: LD_VAR 0 2
52232: PPUSH
52233: CALL_OW 251
52237: PUSH
52238: LD_VAR 0 2
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: PUSH
52261: EMPTY
52262: LIST
52263: PPUSH
52264: CALL_OW 446
52268: GO 52192
52270: POP
52271: POP
// end ;
52272: LD_VAR 0 3
52276: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
52277: LD_INT 0
52279: PPUSH
52280: PPUSH
52281: PPUSH
52282: PPUSH
52283: PPUSH
52284: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
52285: LD_VAR 0 1
52289: NOT
52290: PUSH
52291: LD_VAR 0 1
52295: PPUSH
52296: CALL_OW 263
52300: PUSH
52301: LD_INT 2
52303: EQUAL
52304: NOT
52305: OR
52306: IFFALSE 52310
// exit ;
52308: GO 52626
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
52310: LD_ADDR_VAR 0 6
52314: PUSH
52315: LD_INT 22
52317: PUSH
52318: LD_VAR 0 1
52322: PPUSH
52323: CALL_OW 255
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: LD_INT 30
52337: PUSH
52338: LD_INT 36
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 34
52347: PUSH
52348: LD_INT 31
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: LIST
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PPUSH
52364: CALL_OW 69
52368: ST_TO_ADDR
// if not tmp then
52369: LD_VAR 0 6
52373: NOT
52374: IFFALSE 52378
// exit ;
52376: GO 52626
// result := [ ] ;
52378: LD_ADDR_VAR 0 2
52382: PUSH
52383: EMPTY
52384: ST_TO_ADDR
// for i in tmp do
52385: LD_ADDR_VAR 0 3
52389: PUSH
52390: LD_VAR 0 6
52394: PUSH
52395: FOR_IN
52396: IFFALSE 52467
// begin t := UnitsInside ( i ) ;
52398: LD_ADDR_VAR 0 4
52402: PUSH
52403: LD_VAR 0 3
52407: PPUSH
52408: CALL_OW 313
52412: ST_TO_ADDR
// if t then
52413: LD_VAR 0 4
52417: IFFALSE 52465
// for j in t do
52419: LD_ADDR_VAR 0 7
52423: PUSH
52424: LD_VAR 0 4
52428: PUSH
52429: FOR_IN
52430: IFFALSE 52463
// result := Insert ( result , result + 1 , j ) ;
52432: LD_ADDR_VAR 0 2
52436: PUSH
52437: LD_VAR 0 2
52441: PPUSH
52442: LD_VAR 0 2
52446: PUSH
52447: LD_INT 1
52449: PLUS
52450: PPUSH
52451: LD_VAR 0 7
52455: PPUSH
52456: CALL_OW 2
52460: ST_TO_ADDR
52461: GO 52429
52463: POP
52464: POP
// end ;
52465: GO 52395
52467: POP
52468: POP
// if not result then
52469: LD_VAR 0 2
52473: NOT
52474: IFFALSE 52478
// exit ;
52476: GO 52626
// mech := result [ 1 ] ;
52478: LD_ADDR_VAR 0 5
52482: PUSH
52483: LD_VAR 0 2
52487: PUSH
52488: LD_INT 1
52490: ARRAY
52491: ST_TO_ADDR
// if result > 1 then
52492: LD_VAR 0 2
52496: PUSH
52497: LD_INT 1
52499: GREATER
52500: IFFALSE 52612
// for i = 2 to result do
52502: LD_ADDR_VAR 0 3
52506: PUSH
52507: DOUBLE
52508: LD_INT 2
52510: DEC
52511: ST_TO_ADDR
52512: LD_VAR 0 2
52516: PUSH
52517: FOR_TO
52518: IFFALSE 52610
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
52520: LD_ADDR_VAR 0 4
52524: PUSH
52525: LD_VAR 0 2
52529: PUSH
52530: LD_VAR 0 3
52534: ARRAY
52535: PPUSH
52536: LD_INT 3
52538: PPUSH
52539: CALL_OW 259
52543: PUSH
52544: LD_VAR 0 2
52548: PUSH
52549: LD_VAR 0 3
52553: ARRAY
52554: PPUSH
52555: CALL_OW 432
52559: MINUS
52560: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
52561: LD_VAR 0 4
52565: PUSH
52566: LD_VAR 0 5
52570: PPUSH
52571: LD_INT 3
52573: PPUSH
52574: CALL_OW 259
52578: PUSH
52579: LD_VAR 0 5
52583: PPUSH
52584: CALL_OW 432
52588: MINUS
52589: GREATEREQUAL
52590: IFFALSE 52608
// mech := result [ i ] ;
52592: LD_ADDR_VAR 0 5
52596: PUSH
52597: LD_VAR 0 2
52601: PUSH
52602: LD_VAR 0 3
52606: ARRAY
52607: ST_TO_ADDR
// end ;
52608: GO 52517
52610: POP
52611: POP
// ComLinkTo ( vehicle , mech ) ;
52612: LD_VAR 0 1
52616: PPUSH
52617: LD_VAR 0 5
52621: PPUSH
52622: CALL_OW 135
// end ;
52626: LD_VAR 0 2
52630: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
52631: LD_INT 0
52633: PPUSH
52634: PPUSH
52635: PPUSH
52636: PPUSH
52637: PPUSH
52638: PPUSH
52639: PPUSH
52640: PPUSH
52641: PPUSH
52642: PPUSH
52643: PPUSH
52644: PPUSH
52645: PPUSH
// result := [ ] ;
52646: LD_ADDR_VAR 0 7
52650: PUSH
52651: EMPTY
52652: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
52653: LD_VAR 0 1
52657: PPUSH
52658: CALL_OW 266
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: IN
52673: NOT
52674: IFFALSE 52678
// exit ;
52676: GO 54312
// if name then
52678: LD_VAR 0 3
52682: IFFALSE 52698
// SetBName ( base_dep , name ) ;
52684: LD_VAR 0 1
52688: PPUSH
52689: LD_VAR 0 3
52693: PPUSH
52694: CALL_OW 500
// base := GetBase ( base_dep ) ;
52698: LD_ADDR_VAR 0 15
52702: PUSH
52703: LD_VAR 0 1
52707: PPUSH
52708: CALL_OW 274
52712: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
52713: LD_ADDR_VAR 0 16
52717: PUSH
52718: LD_VAR 0 1
52722: PPUSH
52723: CALL_OW 255
52727: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
52728: LD_ADDR_VAR 0 17
52732: PUSH
52733: LD_VAR 0 1
52737: PPUSH
52738: CALL_OW 248
52742: ST_TO_ADDR
// if sources then
52743: LD_VAR 0 5
52747: IFFALSE 52794
// for i = 1 to 3 do
52749: LD_ADDR_VAR 0 8
52753: PUSH
52754: DOUBLE
52755: LD_INT 1
52757: DEC
52758: ST_TO_ADDR
52759: LD_INT 3
52761: PUSH
52762: FOR_TO
52763: IFFALSE 52792
// AddResourceType ( base , i , sources [ i ] ) ;
52765: LD_VAR 0 15
52769: PPUSH
52770: LD_VAR 0 8
52774: PPUSH
52775: LD_VAR 0 5
52779: PUSH
52780: LD_VAR 0 8
52784: ARRAY
52785: PPUSH
52786: CALL_OW 276
52790: GO 52762
52792: POP
52793: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
52794: LD_ADDR_VAR 0 18
52798: PUSH
52799: LD_VAR 0 15
52803: PPUSH
52804: LD_VAR 0 2
52808: PPUSH
52809: LD_INT 1
52811: PPUSH
52812: CALL 52054 0 3
52816: ST_TO_ADDR
// InitHc ;
52817: CALL_OW 19
// InitUc ;
52821: CALL_OW 18
// uc_side := side ;
52825: LD_ADDR_OWVAR 20
52829: PUSH
52830: LD_VAR 0 16
52834: ST_TO_ADDR
// uc_nation := nation ;
52835: LD_ADDR_OWVAR 21
52839: PUSH
52840: LD_VAR 0 17
52844: ST_TO_ADDR
// if buildings then
52845: LD_VAR 0 18
52849: IFFALSE 54171
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
52851: LD_ADDR_VAR 0 19
52855: PUSH
52856: LD_VAR 0 18
52860: PPUSH
52861: LD_INT 2
52863: PUSH
52864: LD_INT 30
52866: PUSH
52867: LD_INT 29
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 30
52876: PUSH
52877: LD_INT 30
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: LIST
52888: PPUSH
52889: CALL_OW 72
52893: ST_TO_ADDR
// if tmp then
52894: LD_VAR 0 19
52898: IFFALSE 52946
// for i in tmp do
52900: LD_ADDR_VAR 0 8
52904: PUSH
52905: LD_VAR 0 19
52909: PUSH
52910: FOR_IN
52911: IFFALSE 52944
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
52913: LD_VAR 0 8
52917: PPUSH
52918: CALL_OW 250
52922: PPUSH
52923: LD_VAR 0 8
52927: PPUSH
52928: CALL_OW 251
52932: PPUSH
52933: LD_VAR 0 16
52937: PPUSH
52938: CALL_OW 441
52942: GO 52910
52944: POP
52945: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
52946: LD_VAR 0 18
52950: PPUSH
52951: LD_INT 2
52953: PUSH
52954: LD_INT 30
52956: PUSH
52957: LD_INT 32
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 30
52966: PUSH
52967: LD_INT 33
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: LIST
52978: PPUSH
52979: CALL_OW 72
52983: IFFALSE 53071
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
52985: LD_ADDR_VAR 0 8
52989: PUSH
52990: LD_VAR 0 18
52994: PPUSH
52995: LD_INT 2
52997: PUSH
52998: LD_INT 30
53000: PUSH
53001: LD_INT 32
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 30
53010: PUSH
53011: LD_INT 33
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: LIST
53022: PPUSH
53023: CALL_OW 72
53027: PUSH
53028: FOR_IN
53029: IFFALSE 53069
// begin if not GetBWeapon ( i ) then
53031: LD_VAR 0 8
53035: PPUSH
53036: CALL_OW 269
53040: NOT
53041: IFFALSE 53067
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
53043: LD_VAR 0 8
53047: PPUSH
53048: LD_VAR 0 8
53052: PPUSH
53053: LD_VAR 0 2
53057: PPUSH
53058: CALL 54317 0 2
53062: PPUSH
53063: CALL_OW 431
// end ;
53067: GO 53028
53069: POP
53070: POP
// end ; for i = 1 to personel do
53071: LD_ADDR_VAR 0 8
53075: PUSH
53076: DOUBLE
53077: LD_INT 1
53079: DEC
53080: ST_TO_ADDR
53081: LD_VAR 0 6
53085: PUSH
53086: FOR_TO
53087: IFFALSE 54151
// begin if i > 4 then
53089: LD_VAR 0 8
53093: PUSH
53094: LD_INT 4
53096: GREATER
53097: IFFALSE 53101
// break ;
53099: GO 54151
// case i of 1 :
53101: LD_VAR 0 8
53105: PUSH
53106: LD_INT 1
53108: DOUBLE
53109: EQUAL
53110: IFTRUE 53114
53112: GO 53194
53114: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
53115: LD_ADDR_VAR 0 12
53119: PUSH
53120: LD_VAR 0 18
53124: PPUSH
53125: LD_INT 22
53127: PUSH
53128: LD_VAR 0 16
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 58
53139: PUSH
53140: EMPTY
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: LD_INT 30
53148: PUSH
53149: LD_INT 32
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 30
53158: PUSH
53159: LD_INT 4
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 30
53168: PUSH
53169: LD_INT 5
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: LIST
53186: PPUSH
53187: CALL_OW 72
53191: ST_TO_ADDR
53192: GO 53416
53194: LD_INT 2
53196: DOUBLE
53197: EQUAL
53198: IFTRUE 53202
53200: GO 53264
53202: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
53203: LD_ADDR_VAR 0 12
53207: PUSH
53208: LD_VAR 0 18
53212: PPUSH
53213: LD_INT 22
53215: PUSH
53216: LD_VAR 0 16
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 2
53227: PUSH
53228: LD_INT 30
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 30
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: LIST
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PPUSH
53257: CALL_OW 72
53261: ST_TO_ADDR
53262: GO 53416
53264: LD_INT 3
53266: DOUBLE
53267: EQUAL
53268: IFTRUE 53272
53270: GO 53334
53272: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
53273: LD_ADDR_VAR 0 12
53277: PUSH
53278: LD_VAR 0 18
53282: PPUSH
53283: LD_INT 22
53285: PUSH
53286: LD_VAR 0 16
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: LD_INT 30
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 30
53310: PUSH
53311: LD_INT 3
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: LIST
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PPUSH
53327: CALL_OW 72
53331: ST_TO_ADDR
53332: GO 53416
53334: LD_INT 4
53336: DOUBLE
53337: EQUAL
53338: IFTRUE 53342
53340: GO 53415
53342: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
53343: LD_ADDR_VAR 0 12
53347: PUSH
53348: LD_VAR 0 18
53352: PPUSH
53353: LD_INT 22
53355: PUSH
53356: LD_VAR 0 16
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 2
53367: PUSH
53368: LD_INT 30
53370: PUSH
53371: LD_INT 6
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 30
53380: PUSH
53381: LD_INT 7
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 30
53390: PUSH
53391: LD_INT 8
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PPUSH
53408: CALL_OW 72
53412: ST_TO_ADDR
53413: GO 53416
53415: POP
// if i = 1 then
53416: LD_VAR 0 8
53420: PUSH
53421: LD_INT 1
53423: EQUAL
53424: IFFALSE 53535
// begin tmp := [ ] ;
53426: LD_ADDR_VAR 0 19
53430: PUSH
53431: EMPTY
53432: ST_TO_ADDR
// for j in f do
53433: LD_ADDR_VAR 0 9
53437: PUSH
53438: LD_VAR 0 12
53442: PUSH
53443: FOR_IN
53444: IFFALSE 53517
// if GetBType ( j ) = b_bunker then
53446: LD_VAR 0 9
53450: PPUSH
53451: CALL_OW 266
53455: PUSH
53456: LD_INT 32
53458: EQUAL
53459: IFFALSE 53486
// tmp := Insert ( tmp , 1 , j ) else
53461: LD_ADDR_VAR 0 19
53465: PUSH
53466: LD_VAR 0 19
53470: PPUSH
53471: LD_INT 1
53473: PPUSH
53474: LD_VAR 0 9
53478: PPUSH
53479: CALL_OW 2
53483: ST_TO_ADDR
53484: GO 53515
// tmp := Insert ( tmp , tmp + 1 , j ) ;
53486: LD_ADDR_VAR 0 19
53490: PUSH
53491: LD_VAR 0 19
53495: PPUSH
53496: LD_VAR 0 19
53500: PUSH
53501: LD_INT 1
53503: PLUS
53504: PPUSH
53505: LD_VAR 0 9
53509: PPUSH
53510: CALL_OW 2
53514: ST_TO_ADDR
53515: GO 53443
53517: POP
53518: POP
// if tmp then
53519: LD_VAR 0 19
53523: IFFALSE 53535
// f := tmp ;
53525: LD_ADDR_VAR 0 12
53529: PUSH
53530: LD_VAR 0 19
53534: ST_TO_ADDR
// end ; x := personel [ i ] ;
53535: LD_ADDR_VAR 0 13
53539: PUSH
53540: LD_VAR 0 6
53544: PUSH
53545: LD_VAR 0 8
53549: ARRAY
53550: ST_TO_ADDR
// if x = - 1 then
53551: LD_VAR 0 13
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: EQUAL
53560: IFFALSE 53769
// begin for j in f do
53562: LD_ADDR_VAR 0 9
53566: PUSH
53567: LD_VAR 0 12
53571: PUSH
53572: FOR_IN
53573: IFFALSE 53765
// repeat InitHc ;
53575: CALL_OW 19
// if GetBType ( j ) = b_barracks then
53579: LD_VAR 0 9
53583: PPUSH
53584: CALL_OW 266
53588: PUSH
53589: LD_INT 5
53591: EQUAL
53592: IFFALSE 53662
// begin if UnitsInside ( j ) < 3 then
53594: LD_VAR 0 9
53598: PPUSH
53599: CALL_OW 313
53603: PUSH
53604: LD_INT 3
53606: LESS
53607: IFFALSE 53643
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53609: LD_INT 0
53611: PPUSH
53612: LD_INT 5
53614: PUSH
53615: LD_INT 8
53617: PUSH
53618: LD_INT 9
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: LIST
53625: PUSH
53626: LD_VAR 0 17
53630: ARRAY
53631: PPUSH
53632: LD_VAR 0 4
53636: PPUSH
53637: CALL_OW 380
53641: GO 53660
// PrepareHuman ( false , i , skill ) ;
53643: LD_INT 0
53645: PPUSH
53646: LD_VAR 0 8
53650: PPUSH
53651: LD_VAR 0 4
53655: PPUSH
53656: CALL_OW 380
// end else
53660: GO 53679
// PrepareHuman ( false , i , skill ) ;
53662: LD_INT 0
53664: PPUSH
53665: LD_VAR 0 8
53669: PPUSH
53670: LD_VAR 0 4
53674: PPUSH
53675: CALL_OW 380
// un := CreateHuman ;
53679: LD_ADDR_VAR 0 14
53683: PUSH
53684: CALL_OW 44
53688: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53689: LD_ADDR_VAR 0 7
53693: PUSH
53694: LD_VAR 0 7
53698: PPUSH
53699: LD_INT 1
53701: PPUSH
53702: LD_VAR 0 14
53706: PPUSH
53707: CALL_OW 2
53711: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
53712: LD_VAR 0 14
53716: PPUSH
53717: LD_VAR 0 9
53721: PPUSH
53722: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
53726: LD_VAR 0 9
53730: PPUSH
53731: CALL_OW 313
53735: PUSH
53736: LD_INT 6
53738: EQUAL
53739: PUSH
53740: LD_VAR 0 9
53744: PPUSH
53745: CALL_OW 266
53749: PUSH
53750: LD_INT 32
53752: PUSH
53753: LD_INT 31
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: IN
53760: OR
53761: IFFALSE 53575
53763: GO 53572
53765: POP
53766: POP
// end else
53767: GO 54149
// for j = 1 to x do
53769: LD_ADDR_VAR 0 9
53773: PUSH
53774: DOUBLE
53775: LD_INT 1
53777: DEC
53778: ST_TO_ADDR
53779: LD_VAR 0 13
53783: PUSH
53784: FOR_TO
53785: IFFALSE 54147
// begin InitHc ;
53787: CALL_OW 19
// if not f then
53791: LD_VAR 0 12
53795: NOT
53796: IFFALSE 53885
// begin PrepareHuman ( false , i , skill ) ;
53798: LD_INT 0
53800: PPUSH
53801: LD_VAR 0 8
53805: PPUSH
53806: LD_VAR 0 4
53810: PPUSH
53811: CALL_OW 380
// un := CreateHuman ;
53815: LD_ADDR_VAR 0 14
53819: PUSH
53820: CALL_OW 44
53824: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53825: LD_ADDR_VAR 0 7
53829: PUSH
53830: LD_VAR 0 7
53834: PPUSH
53835: LD_INT 1
53837: PPUSH
53838: LD_VAR 0 14
53842: PPUSH
53843: CALL_OW 2
53847: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53848: LD_VAR 0 14
53852: PPUSH
53853: LD_VAR 0 1
53857: PPUSH
53858: CALL_OW 250
53862: PPUSH
53863: LD_VAR 0 1
53867: PPUSH
53868: CALL_OW 251
53872: PPUSH
53873: LD_INT 10
53875: PPUSH
53876: LD_INT 0
53878: PPUSH
53879: CALL_OW 50
// continue ;
53883: GO 53784
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
53885: LD_VAR 0 12
53889: PUSH
53890: LD_INT 1
53892: ARRAY
53893: PPUSH
53894: CALL_OW 313
53898: PUSH
53899: LD_VAR 0 12
53903: PUSH
53904: LD_INT 1
53906: ARRAY
53907: PPUSH
53908: CALL_OW 266
53912: PUSH
53913: LD_INT 32
53915: PUSH
53916: LD_INT 31
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: IN
53923: AND
53924: PUSH
53925: LD_VAR 0 12
53929: PUSH
53930: LD_INT 1
53932: ARRAY
53933: PPUSH
53934: CALL_OW 313
53938: PUSH
53939: LD_INT 6
53941: EQUAL
53942: OR
53943: IFFALSE 53963
// f := Delete ( f , 1 ) ;
53945: LD_ADDR_VAR 0 12
53949: PUSH
53950: LD_VAR 0 12
53954: PPUSH
53955: LD_INT 1
53957: PPUSH
53958: CALL_OW 3
53962: ST_TO_ADDR
// if not f then
53963: LD_VAR 0 12
53967: NOT
53968: IFFALSE 53986
// begin x := x + 2 ;
53970: LD_ADDR_VAR 0 13
53974: PUSH
53975: LD_VAR 0 13
53979: PUSH
53980: LD_INT 2
53982: PLUS
53983: ST_TO_ADDR
// continue ;
53984: GO 53784
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
53986: LD_VAR 0 12
53990: PUSH
53991: LD_INT 1
53993: ARRAY
53994: PPUSH
53995: CALL_OW 266
53999: PUSH
54000: LD_INT 5
54002: EQUAL
54003: IFFALSE 54077
// begin if UnitsInside ( f [ 1 ] ) < 3 then
54005: LD_VAR 0 12
54009: PUSH
54010: LD_INT 1
54012: ARRAY
54013: PPUSH
54014: CALL_OW 313
54018: PUSH
54019: LD_INT 3
54021: LESS
54022: IFFALSE 54058
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
54024: LD_INT 0
54026: PPUSH
54027: LD_INT 5
54029: PUSH
54030: LD_INT 8
54032: PUSH
54033: LD_INT 9
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: LIST
54040: PUSH
54041: LD_VAR 0 17
54045: ARRAY
54046: PPUSH
54047: LD_VAR 0 4
54051: PPUSH
54052: CALL_OW 380
54056: GO 54075
// PrepareHuman ( false , i , skill ) ;
54058: LD_INT 0
54060: PPUSH
54061: LD_VAR 0 8
54065: PPUSH
54066: LD_VAR 0 4
54070: PPUSH
54071: CALL_OW 380
// end else
54075: GO 54094
// PrepareHuman ( false , i , skill ) ;
54077: LD_INT 0
54079: PPUSH
54080: LD_VAR 0 8
54084: PPUSH
54085: LD_VAR 0 4
54089: PPUSH
54090: CALL_OW 380
// un := CreateHuman ;
54094: LD_ADDR_VAR 0 14
54098: PUSH
54099: CALL_OW 44
54103: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54104: LD_ADDR_VAR 0 7
54108: PUSH
54109: LD_VAR 0 7
54113: PPUSH
54114: LD_INT 1
54116: PPUSH
54117: LD_VAR 0 14
54121: PPUSH
54122: CALL_OW 2
54126: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
54127: LD_VAR 0 14
54131: PPUSH
54132: LD_VAR 0 12
54136: PUSH
54137: LD_INT 1
54139: ARRAY
54140: PPUSH
54141: CALL_OW 52
// end ;
54145: GO 53784
54147: POP
54148: POP
// end ;
54149: GO 53086
54151: POP
54152: POP
// result := result ^ buildings ;
54153: LD_ADDR_VAR 0 7
54157: PUSH
54158: LD_VAR 0 7
54162: PUSH
54163: LD_VAR 0 18
54167: ADD
54168: ST_TO_ADDR
// end else
54169: GO 54312
// begin for i = 1 to personel do
54171: LD_ADDR_VAR 0 8
54175: PUSH
54176: DOUBLE
54177: LD_INT 1
54179: DEC
54180: ST_TO_ADDR
54181: LD_VAR 0 6
54185: PUSH
54186: FOR_TO
54187: IFFALSE 54310
// begin if i > 4 then
54189: LD_VAR 0 8
54193: PUSH
54194: LD_INT 4
54196: GREATER
54197: IFFALSE 54201
// break ;
54199: GO 54310
// x := personel [ i ] ;
54201: LD_ADDR_VAR 0 13
54205: PUSH
54206: LD_VAR 0 6
54210: PUSH
54211: LD_VAR 0 8
54215: ARRAY
54216: ST_TO_ADDR
// if x = - 1 then
54217: LD_VAR 0 13
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: EQUAL
54226: IFFALSE 54230
// continue ;
54228: GO 54186
// PrepareHuman ( false , i , skill ) ;
54230: LD_INT 0
54232: PPUSH
54233: LD_VAR 0 8
54237: PPUSH
54238: LD_VAR 0 4
54242: PPUSH
54243: CALL_OW 380
// un := CreateHuman ;
54247: LD_ADDR_VAR 0 14
54251: PUSH
54252: CALL_OW 44
54256: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
54257: LD_VAR 0 14
54261: PPUSH
54262: LD_VAR 0 1
54266: PPUSH
54267: CALL_OW 250
54271: PPUSH
54272: LD_VAR 0 1
54276: PPUSH
54277: CALL_OW 251
54281: PPUSH
54282: LD_INT 10
54284: PPUSH
54285: LD_INT 0
54287: PPUSH
54288: CALL_OW 50
// result := result ^ un ;
54292: LD_ADDR_VAR 0 7
54296: PUSH
54297: LD_VAR 0 7
54301: PUSH
54302: LD_VAR 0 14
54306: ADD
54307: ST_TO_ADDR
// end ;
54308: GO 54186
54310: POP
54311: POP
// end ; end ;
54312: LD_VAR 0 7
54316: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
54317: LD_INT 0
54319: PPUSH
54320: PPUSH
54321: PPUSH
54322: PPUSH
54323: PPUSH
54324: PPUSH
54325: PPUSH
54326: PPUSH
54327: PPUSH
54328: PPUSH
54329: PPUSH
54330: PPUSH
54331: PPUSH
54332: PPUSH
54333: PPUSH
54334: PPUSH
// result := false ;
54335: LD_ADDR_VAR 0 3
54339: PUSH
54340: LD_INT 0
54342: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
54343: LD_VAR 0 1
54347: NOT
54348: PUSH
54349: LD_VAR 0 1
54353: PPUSH
54354: CALL_OW 266
54358: PUSH
54359: LD_INT 32
54361: PUSH
54362: LD_INT 33
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: IN
54369: NOT
54370: OR
54371: IFFALSE 54375
// exit ;
54373: GO 55484
// nat := GetNation ( tower ) ;
54375: LD_ADDR_VAR 0 12
54379: PUSH
54380: LD_VAR 0 1
54384: PPUSH
54385: CALL_OW 248
54389: ST_TO_ADDR
// side := GetSide ( tower ) ;
54390: LD_ADDR_VAR 0 16
54394: PUSH
54395: LD_VAR 0 1
54399: PPUSH
54400: CALL_OW 255
54404: ST_TO_ADDR
// x := GetX ( tower ) ;
54405: LD_ADDR_VAR 0 10
54409: PUSH
54410: LD_VAR 0 1
54414: PPUSH
54415: CALL_OW 250
54419: ST_TO_ADDR
// y := GetY ( tower ) ;
54420: LD_ADDR_VAR 0 11
54424: PUSH
54425: LD_VAR 0 1
54429: PPUSH
54430: CALL_OW 251
54434: ST_TO_ADDR
// if not x or not y then
54435: LD_VAR 0 10
54439: NOT
54440: PUSH
54441: LD_VAR 0 11
54445: NOT
54446: OR
54447: IFFALSE 54451
// exit ;
54449: GO 55484
// weapon := 0 ;
54451: LD_ADDR_VAR 0 18
54455: PUSH
54456: LD_INT 0
54458: ST_TO_ADDR
// fac_list := [ ] ;
54459: LD_ADDR_VAR 0 17
54463: PUSH
54464: EMPTY
54465: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
54466: LD_ADDR_VAR 0 6
54470: PUSH
54471: LD_VAR 0 1
54475: PPUSH
54476: CALL_OW 274
54480: PPUSH
54481: LD_VAR 0 2
54485: PPUSH
54486: LD_INT 0
54488: PPUSH
54489: CALL 52054 0 3
54493: PPUSH
54494: LD_INT 30
54496: PUSH
54497: LD_INT 3
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PPUSH
54504: CALL_OW 72
54508: ST_TO_ADDR
// if not factories then
54509: LD_VAR 0 6
54513: NOT
54514: IFFALSE 54518
// exit ;
54516: GO 55484
// for i in factories do
54518: LD_ADDR_VAR 0 8
54522: PUSH
54523: LD_VAR 0 6
54527: PUSH
54528: FOR_IN
54529: IFFALSE 54554
// fac_list := fac_list union AvailableWeaponList ( i ) ;
54531: LD_ADDR_VAR 0 17
54535: PUSH
54536: LD_VAR 0 17
54540: PUSH
54541: LD_VAR 0 8
54545: PPUSH
54546: CALL_OW 478
54550: UNION
54551: ST_TO_ADDR
54552: GO 54528
54554: POP
54555: POP
// if not fac_list then
54556: LD_VAR 0 17
54560: NOT
54561: IFFALSE 54565
// exit ;
54563: GO 55484
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
54565: LD_ADDR_VAR 0 5
54569: PUSH
54570: LD_INT 4
54572: PUSH
54573: LD_INT 5
54575: PUSH
54576: LD_INT 9
54578: PUSH
54579: LD_INT 10
54581: PUSH
54582: LD_INT 6
54584: PUSH
54585: LD_INT 7
54587: PUSH
54588: LD_INT 11
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 27
54602: PUSH
54603: LD_INT 28
54605: PUSH
54606: LD_INT 26
54608: PUSH
54609: LD_INT 30
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 43
54620: PUSH
54621: LD_INT 44
54623: PUSH
54624: LD_INT 46
54626: PUSH
54627: LD_INT 45
54629: PUSH
54630: LD_INT 47
54632: PUSH
54633: LD_INT 49
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: LIST
54648: PUSH
54649: LD_VAR 0 12
54653: ARRAY
54654: ST_TO_ADDR
// list := list isect fac_list ;
54655: LD_ADDR_VAR 0 5
54659: PUSH
54660: LD_VAR 0 5
54664: PUSH
54665: LD_VAR 0 17
54669: ISECT
54670: ST_TO_ADDR
// if not list then
54671: LD_VAR 0 5
54675: NOT
54676: IFFALSE 54680
// exit ;
54678: GO 55484
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
54680: LD_VAR 0 12
54684: PUSH
54685: LD_INT 3
54687: EQUAL
54688: PUSH
54689: LD_INT 49
54691: PUSH
54692: LD_VAR 0 5
54696: IN
54697: AND
54698: PUSH
54699: LD_INT 31
54701: PPUSH
54702: LD_VAR 0 16
54706: PPUSH
54707: CALL_OW 321
54711: PUSH
54712: LD_INT 2
54714: EQUAL
54715: AND
54716: IFFALSE 54776
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
54718: LD_INT 22
54720: PUSH
54721: LD_VAR 0 16
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 35
54732: PUSH
54733: LD_INT 49
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 91
54742: PUSH
54743: LD_VAR 0 1
54747: PUSH
54748: LD_INT 10
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: LIST
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: LIST
54760: PPUSH
54761: CALL_OW 69
54765: NOT
54766: IFFALSE 54776
// weapon := ru_time_lapser ;
54768: LD_ADDR_VAR 0 18
54772: PUSH
54773: LD_INT 49
54775: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
54776: LD_VAR 0 12
54780: PUSH
54781: LD_INT 1
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: IN
54791: PUSH
54792: LD_INT 11
54794: PUSH
54795: LD_VAR 0 5
54799: IN
54800: PUSH
54801: LD_INT 30
54803: PUSH
54804: LD_VAR 0 5
54808: IN
54809: OR
54810: AND
54811: PUSH
54812: LD_INT 6
54814: PPUSH
54815: LD_VAR 0 16
54819: PPUSH
54820: CALL_OW 321
54824: PUSH
54825: LD_INT 2
54827: EQUAL
54828: AND
54829: IFFALSE 54994
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
54831: LD_INT 22
54833: PUSH
54834: LD_VAR 0 16
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: LD_INT 35
54848: PUSH
54849: LD_INT 11
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 35
54858: PUSH
54859: LD_INT 30
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 91
54873: PUSH
54874: LD_VAR 0 1
54878: PUSH
54879: LD_INT 18
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: LIST
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: LIST
54891: PPUSH
54892: CALL_OW 69
54896: NOT
54897: PUSH
54898: LD_INT 22
54900: PUSH
54901: LD_VAR 0 16
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 2
54912: PUSH
54913: LD_INT 30
54915: PUSH
54916: LD_INT 32
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 30
54925: PUSH
54926: LD_INT 33
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 91
54940: PUSH
54941: LD_VAR 0 1
54945: PUSH
54946: LD_INT 12
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: LIST
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: LIST
54958: PUSH
54959: EMPTY
54960: LIST
54961: PPUSH
54962: CALL_OW 69
54966: PUSH
54967: LD_INT 2
54969: GREATER
54970: AND
54971: IFFALSE 54994
// weapon := [ us_radar , ar_radar ] [ nat ] ;
54973: LD_ADDR_VAR 0 18
54977: PUSH
54978: LD_INT 11
54980: PUSH
54981: LD_INT 30
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_VAR 0 12
54992: ARRAY
54993: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
54994: LD_VAR 0 18
54998: NOT
54999: PUSH
55000: LD_INT 40
55002: PPUSH
55003: LD_VAR 0 16
55007: PPUSH
55008: CALL_OW 321
55012: PUSH
55013: LD_INT 2
55015: EQUAL
55016: AND
55017: PUSH
55018: LD_INT 7
55020: PUSH
55021: LD_VAR 0 5
55025: IN
55026: PUSH
55027: LD_INT 28
55029: PUSH
55030: LD_VAR 0 5
55034: IN
55035: OR
55036: PUSH
55037: LD_INT 45
55039: PUSH
55040: LD_VAR 0 5
55044: IN
55045: OR
55046: AND
55047: IFFALSE 55301
// begin hex := GetHexInfo ( x , y ) ;
55049: LD_ADDR_VAR 0 4
55053: PUSH
55054: LD_VAR 0 10
55058: PPUSH
55059: LD_VAR 0 11
55063: PPUSH
55064: CALL_OW 546
55068: ST_TO_ADDR
// if hex [ 1 ] then
55069: LD_VAR 0 4
55073: PUSH
55074: LD_INT 1
55076: ARRAY
55077: IFFALSE 55081
// exit ;
55079: GO 55484
// height := hex [ 2 ] ;
55081: LD_ADDR_VAR 0 15
55085: PUSH
55086: LD_VAR 0 4
55090: PUSH
55091: LD_INT 2
55093: ARRAY
55094: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
55095: LD_ADDR_VAR 0 14
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: LD_INT 2
55105: PUSH
55106: LD_INT 3
55108: PUSH
55109: LD_INT 5
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: ST_TO_ADDR
// for i in tmp do
55118: LD_ADDR_VAR 0 8
55122: PUSH
55123: LD_VAR 0 14
55127: PUSH
55128: FOR_IN
55129: IFFALSE 55299
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
55131: LD_ADDR_VAR 0 9
55135: PUSH
55136: LD_VAR 0 10
55140: PPUSH
55141: LD_VAR 0 8
55145: PPUSH
55146: LD_INT 5
55148: PPUSH
55149: CALL_OW 272
55153: PUSH
55154: LD_VAR 0 11
55158: PPUSH
55159: LD_VAR 0 8
55163: PPUSH
55164: LD_INT 5
55166: PPUSH
55167: CALL_OW 273
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
55176: LD_VAR 0 9
55180: PUSH
55181: LD_INT 1
55183: ARRAY
55184: PPUSH
55185: LD_VAR 0 9
55189: PUSH
55190: LD_INT 2
55192: ARRAY
55193: PPUSH
55194: CALL_OW 488
55198: IFFALSE 55297
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
55200: LD_ADDR_VAR 0 4
55204: PUSH
55205: LD_VAR 0 9
55209: PUSH
55210: LD_INT 1
55212: ARRAY
55213: PPUSH
55214: LD_VAR 0 9
55218: PUSH
55219: LD_INT 2
55221: ARRAY
55222: PPUSH
55223: CALL_OW 546
55227: ST_TO_ADDR
// if hex [ 1 ] then
55228: LD_VAR 0 4
55232: PUSH
55233: LD_INT 1
55235: ARRAY
55236: IFFALSE 55240
// continue ;
55238: GO 55128
// h := hex [ 2 ] ;
55240: LD_ADDR_VAR 0 13
55244: PUSH
55245: LD_VAR 0 4
55249: PUSH
55250: LD_INT 2
55252: ARRAY
55253: ST_TO_ADDR
// if h + 7 < height then
55254: LD_VAR 0 13
55258: PUSH
55259: LD_INT 7
55261: PLUS
55262: PUSH
55263: LD_VAR 0 15
55267: LESS
55268: IFFALSE 55297
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
55270: LD_ADDR_VAR 0 18
55274: PUSH
55275: LD_INT 7
55277: PUSH
55278: LD_INT 28
55280: PUSH
55281: LD_INT 45
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: LIST
55288: PUSH
55289: LD_VAR 0 12
55293: ARRAY
55294: ST_TO_ADDR
// break ;
55295: GO 55299
// end ; end ; end ;
55297: GO 55128
55299: POP
55300: POP
// end ; if not weapon then
55301: LD_VAR 0 18
55305: NOT
55306: IFFALSE 55366
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
55308: LD_ADDR_VAR 0 5
55312: PUSH
55313: LD_VAR 0 5
55317: PUSH
55318: LD_INT 11
55320: PUSH
55321: LD_INT 30
55323: PUSH
55324: LD_INT 49
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: LIST
55331: DIFF
55332: ST_TO_ADDR
// if not list then
55333: LD_VAR 0 5
55337: NOT
55338: IFFALSE 55342
// exit ;
55340: GO 55484
// weapon := list [ rand ( 1 , list ) ] ;
55342: LD_ADDR_VAR 0 18
55346: PUSH
55347: LD_VAR 0 5
55351: PUSH
55352: LD_INT 1
55354: PPUSH
55355: LD_VAR 0 5
55359: PPUSH
55360: CALL_OW 12
55364: ARRAY
55365: ST_TO_ADDR
// end ; if weapon then
55366: LD_VAR 0 18
55370: IFFALSE 55484
// begin tmp := CostOfWeapon ( weapon ) ;
55372: LD_ADDR_VAR 0 14
55376: PUSH
55377: LD_VAR 0 18
55381: PPUSH
55382: CALL_OW 451
55386: ST_TO_ADDR
// j := GetBase ( tower ) ;
55387: LD_ADDR_VAR 0 9
55391: PUSH
55392: LD_VAR 0 1
55396: PPUSH
55397: CALL_OW 274
55401: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
55402: LD_VAR 0 9
55406: PPUSH
55407: LD_INT 1
55409: PPUSH
55410: CALL_OW 275
55414: PUSH
55415: LD_VAR 0 14
55419: PUSH
55420: LD_INT 1
55422: ARRAY
55423: GREATEREQUAL
55424: PUSH
55425: LD_VAR 0 9
55429: PPUSH
55430: LD_INT 2
55432: PPUSH
55433: CALL_OW 275
55437: PUSH
55438: LD_VAR 0 14
55442: PUSH
55443: LD_INT 2
55445: ARRAY
55446: GREATEREQUAL
55447: AND
55448: PUSH
55449: LD_VAR 0 9
55453: PPUSH
55454: LD_INT 3
55456: PPUSH
55457: CALL_OW 275
55461: PUSH
55462: LD_VAR 0 14
55466: PUSH
55467: LD_INT 3
55469: ARRAY
55470: GREATEREQUAL
55471: AND
55472: IFFALSE 55484
// result := weapon ;
55474: LD_ADDR_VAR 0 3
55478: PUSH
55479: LD_VAR 0 18
55483: ST_TO_ADDR
// end ; end ;
55484: LD_VAR 0 3
55488: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
55489: LD_INT 0
55491: PPUSH
55492: PPUSH
// result := true ;
55493: LD_ADDR_VAR 0 3
55497: PUSH
55498: LD_INT 1
55500: ST_TO_ADDR
// if array1 = array2 then
55501: LD_VAR 0 1
55505: PUSH
55506: LD_VAR 0 2
55510: EQUAL
55511: IFFALSE 55571
// begin for i = 1 to array1 do
55513: LD_ADDR_VAR 0 4
55517: PUSH
55518: DOUBLE
55519: LD_INT 1
55521: DEC
55522: ST_TO_ADDR
55523: LD_VAR 0 1
55527: PUSH
55528: FOR_TO
55529: IFFALSE 55567
// if array1 [ i ] <> array2 [ i ] then
55531: LD_VAR 0 1
55535: PUSH
55536: LD_VAR 0 4
55540: ARRAY
55541: PUSH
55542: LD_VAR 0 2
55546: PUSH
55547: LD_VAR 0 4
55551: ARRAY
55552: NONEQUAL
55553: IFFALSE 55565
// begin result := false ;
55555: LD_ADDR_VAR 0 3
55559: PUSH
55560: LD_INT 0
55562: ST_TO_ADDR
// break ;
55563: GO 55567
// end ;
55565: GO 55528
55567: POP
55568: POP
// end else
55569: GO 55579
// result := false ;
55571: LD_ADDR_VAR 0 3
55575: PUSH
55576: LD_INT 0
55578: ST_TO_ADDR
// end ;
55579: LD_VAR 0 3
55583: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
55584: LD_INT 0
55586: PPUSH
55587: PPUSH
// if not array1 or not array2 then
55588: LD_VAR 0 1
55592: NOT
55593: PUSH
55594: LD_VAR 0 2
55598: NOT
55599: OR
55600: IFFALSE 55604
// exit ;
55602: GO 55668
// result := true ;
55604: LD_ADDR_VAR 0 3
55608: PUSH
55609: LD_INT 1
55611: ST_TO_ADDR
// for i = 1 to array1 do
55612: LD_ADDR_VAR 0 4
55616: PUSH
55617: DOUBLE
55618: LD_INT 1
55620: DEC
55621: ST_TO_ADDR
55622: LD_VAR 0 1
55626: PUSH
55627: FOR_TO
55628: IFFALSE 55666
// if array1 [ i ] <> array2 [ i ] then
55630: LD_VAR 0 1
55634: PUSH
55635: LD_VAR 0 4
55639: ARRAY
55640: PUSH
55641: LD_VAR 0 2
55645: PUSH
55646: LD_VAR 0 4
55650: ARRAY
55651: NONEQUAL
55652: IFFALSE 55664
// begin result := false ;
55654: LD_ADDR_VAR 0 3
55658: PUSH
55659: LD_INT 0
55661: ST_TO_ADDR
// break ;
55662: GO 55666
// end ;
55664: GO 55627
55666: POP
55667: POP
// end ;
55668: LD_VAR 0 3
55672: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
55673: LD_INT 0
55675: PPUSH
55676: PPUSH
55677: PPUSH
// pom := GetBase ( fac ) ;
55678: LD_ADDR_VAR 0 5
55682: PUSH
55683: LD_VAR 0 1
55687: PPUSH
55688: CALL_OW 274
55692: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
55693: LD_ADDR_VAR 0 4
55697: PUSH
55698: LD_VAR 0 2
55702: PUSH
55703: LD_INT 1
55705: ARRAY
55706: PPUSH
55707: LD_VAR 0 2
55711: PUSH
55712: LD_INT 2
55714: ARRAY
55715: PPUSH
55716: LD_VAR 0 2
55720: PUSH
55721: LD_INT 3
55723: ARRAY
55724: PPUSH
55725: LD_VAR 0 2
55729: PUSH
55730: LD_INT 4
55732: ARRAY
55733: PPUSH
55734: CALL_OW 449
55738: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55739: LD_ADDR_VAR 0 3
55743: PUSH
55744: LD_VAR 0 5
55748: PPUSH
55749: LD_INT 1
55751: PPUSH
55752: CALL_OW 275
55756: PUSH
55757: LD_VAR 0 4
55761: PUSH
55762: LD_INT 1
55764: ARRAY
55765: GREATEREQUAL
55766: PUSH
55767: LD_VAR 0 5
55771: PPUSH
55772: LD_INT 2
55774: PPUSH
55775: CALL_OW 275
55779: PUSH
55780: LD_VAR 0 4
55784: PUSH
55785: LD_INT 2
55787: ARRAY
55788: GREATEREQUAL
55789: AND
55790: PUSH
55791: LD_VAR 0 5
55795: PPUSH
55796: LD_INT 3
55798: PPUSH
55799: CALL_OW 275
55803: PUSH
55804: LD_VAR 0 4
55808: PUSH
55809: LD_INT 3
55811: ARRAY
55812: GREATEREQUAL
55813: AND
55814: ST_TO_ADDR
// end ;
55815: LD_VAR 0 3
55819: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
55820: LD_INT 0
55822: PPUSH
55823: PPUSH
55824: PPUSH
55825: PPUSH
// pom := GetBase ( building ) ;
55826: LD_ADDR_VAR 0 3
55830: PUSH
55831: LD_VAR 0 1
55835: PPUSH
55836: CALL_OW 274
55840: ST_TO_ADDR
// if not pom then
55841: LD_VAR 0 3
55845: NOT
55846: IFFALSE 55850
// exit ;
55848: GO 56020
// btype := GetBType ( building ) ;
55850: LD_ADDR_VAR 0 5
55854: PUSH
55855: LD_VAR 0 1
55859: PPUSH
55860: CALL_OW 266
55864: ST_TO_ADDR
// if btype = b_armoury then
55865: LD_VAR 0 5
55869: PUSH
55870: LD_INT 4
55872: EQUAL
55873: IFFALSE 55883
// btype := b_barracks ;
55875: LD_ADDR_VAR 0 5
55879: PUSH
55880: LD_INT 5
55882: ST_TO_ADDR
// if btype = b_depot then
55883: LD_VAR 0 5
55887: PUSH
55888: LD_INT 0
55890: EQUAL
55891: IFFALSE 55901
// btype := b_warehouse ;
55893: LD_ADDR_VAR 0 5
55897: PUSH
55898: LD_INT 1
55900: ST_TO_ADDR
// if btype = b_workshop then
55901: LD_VAR 0 5
55905: PUSH
55906: LD_INT 2
55908: EQUAL
55909: IFFALSE 55919
// btype := b_factory ;
55911: LD_ADDR_VAR 0 5
55915: PUSH
55916: LD_INT 3
55918: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55919: LD_ADDR_VAR 0 4
55923: PUSH
55924: LD_VAR 0 5
55928: PPUSH
55929: LD_VAR 0 1
55933: PPUSH
55934: CALL_OW 248
55938: PPUSH
55939: CALL_OW 450
55943: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55944: LD_ADDR_VAR 0 2
55948: PUSH
55949: LD_VAR 0 3
55953: PPUSH
55954: LD_INT 1
55956: PPUSH
55957: CALL_OW 275
55961: PUSH
55962: LD_VAR 0 4
55966: PUSH
55967: LD_INT 1
55969: ARRAY
55970: GREATEREQUAL
55971: PUSH
55972: LD_VAR 0 3
55976: PPUSH
55977: LD_INT 2
55979: PPUSH
55980: CALL_OW 275
55984: PUSH
55985: LD_VAR 0 4
55989: PUSH
55990: LD_INT 2
55992: ARRAY
55993: GREATEREQUAL
55994: AND
55995: PUSH
55996: LD_VAR 0 3
56000: PPUSH
56001: LD_INT 3
56003: PPUSH
56004: CALL_OW 275
56008: PUSH
56009: LD_VAR 0 4
56013: PUSH
56014: LD_INT 3
56016: ARRAY
56017: GREATEREQUAL
56018: AND
56019: ST_TO_ADDR
// end ;
56020: LD_VAR 0 2
56024: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
56025: LD_INT 0
56027: PPUSH
56028: PPUSH
56029: PPUSH
// pom := GetBase ( building ) ;
56030: LD_ADDR_VAR 0 4
56034: PUSH
56035: LD_VAR 0 1
56039: PPUSH
56040: CALL_OW 274
56044: ST_TO_ADDR
// if not pom then
56045: LD_VAR 0 4
56049: NOT
56050: IFFALSE 56054
// exit ;
56052: GO 56155
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
56054: LD_ADDR_VAR 0 5
56058: PUSH
56059: LD_VAR 0 2
56063: PPUSH
56064: LD_VAR 0 1
56068: PPUSH
56069: CALL_OW 248
56073: PPUSH
56074: CALL_OW 450
56078: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56079: LD_ADDR_VAR 0 3
56083: PUSH
56084: LD_VAR 0 4
56088: PPUSH
56089: LD_INT 1
56091: PPUSH
56092: CALL_OW 275
56096: PUSH
56097: LD_VAR 0 5
56101: PUSH
56102: LD_INT 1
56104: ARRAY
56105: GREATEREQUAL
56106: PUSH
56107: LD_VAR 0 4
56111: PPUSH
56112: LD_INT 2
56114: PPUSH
56115: CALL_OW 275
56119: PUSH
56120: LD_VAR 0 5
56124: PUSH
56125: LD_INT 2
56127: ARRAY
56128: GREATEREQUAL
56129: AND
56130: PUSH
56131: LD_VAR 0 4
56135: PPUSH
56136: LD_INT 3
56138: PPUSH
56139: CALL_OW 275
56143: PUSH
56144: LD_VAR 0 5
56148: PUSH
56149: LD_INT 3
56151: ARRAY
56152: GREATEREQUAL
56153: AND
56154: ST_TO_ADDR
// end ;
56155: LD_VAR 0 3
56159: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
56160: LD_INT 0
56162: PPUSH
56163: PPUSH
56164: PPUSH
56165: PPUSH
56166: PPUSH
56167: PPUSH
56168: PPUSH
56169: PPUSH
56170: PPUSH
56171: PPUSH
56172: PPUSH
// result := false ;
56173: LD_ADDR_VAR 0 8
56177: PUSH
56178: LD_INT 0
56180: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
56181: LD_VAR 0 5
56185: NOT
56186: PUSH
56187: LD_VAR 0 1
56191: NOT
56192: OR
56193: PUSH
56194: LD_VAR 0 2
56198: NOT
56199: OR
56200: PUSH
56201: LD_VAR 0 3
56205: NOT
56206: OR
56207: IFFALSE 56211
// exit ;
56209: GO 57025
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
56211: LD_ADDR_VAR 0 14
56215: PUSH
56216: LD_VAR 0 1
56220: PPUSH
56221: LD_VAR 0 2
56225: PPUSH
56226: LD_VAR 0 3
56230: PPUSH
56231: LD_VAR 0 4
56235: PPUSH
56236: LD_VAR 0 5
56240: PUSH
56241: LD_INT 1
56243: ARRAY
56244: PPUSH
56245: CALL_OW 248
56249: PPUSH
56250: LD_INT 0
56252: PPUSH
56253: CALL 58262 0 6
56257: ST_TO_ADDR
// if not hexes then
56258: LD_VAR 0 14
56262: NOT
56263: IFFALSE 56267
// exit ;
56265: GO 57025
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56267: LD_ADDR_VAR 0 17
56271: PUSH
56272: LD_VAR 0 5
56276: PPUSH
56277: LD_INT 22
56279: PUSH
56280: LD_VAR 0 13
56284: PPUSH
56285: CALL_OW 255
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 2
56296: PUSH
56297: LD_INT 30
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 30
56309: PUSH
56310: LD_INT 1
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: LIST
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PPUSH
56326: CALL_OW 72
56330: ST_TO_ADDR
// for i = 1 to hexes do
56331: LD_ADDR_VAR 0 9
56335: PUSH
56336: DOUBLE
56337: LD_INT 1
56339: DEC
56340: ST_TO_ADDR
56341: LD_VAR 0 14
56345: PUSH
56346: FOR_TO
56347: IFFALSE 57023
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56349: LD_ADDR_VAR 0 13
56353: PUSH
56354: LD_VAR 0 14
56358: PUSH
56359: LD_VAR 0 9
56363: ARRAY
56364: PUSH
56365: LD_INT 1
56367: ARRAY
56368: PPUSH
56369: LD_VAR 0 14
56373: PUSH
56374: LD_VAR 0 9
56378: ARRAY
56379: PUSH
56380: LD_INT 2
56382: ARRAY
56383: PPUSH
56384: CALL_OW 428
56388: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
56389: LD_VAR 0 14
56393: PUSH
56394: LD_VAR 0 9
56398: ARRAY
56399: PUSH
56400: LD_INT 1
56402: ARRAY
56403: PPUSH
56404: LD_VAR 0 14
56408: PUSH
56409: LD_VAR 0 9
56413: ARRAY
56414: PUSH
56415: LD_INT 2
56417: ARRAY
56418: PPUSH
56419: CALL_OW 351
56423: PUSH
56424: LD_VAR 0 14
56428: PUSH
56429: LD_VAR 0 9
56433: ARRAY
56434: PUSH
56435: LD_INT 1
56437: ARRAY
56438: PPUSH
56439: LD_VAR 0 14
56443: PUSH
56444: LD_VAR 0 9
56448: ARRAY
56449: PUSH
56450: LD_INT 2
56452: ARRAY
56453: PPUSH
56454: CALL_OW 488
56458: NOT
56459: OR
56460: PUSH
56461: LD_VAR 0 13
56465: PPUSH
56466: CALL_OW 247
56470: PUSH
56471: LD_INT 3
56473: EQUAL
56474: OR
56475: IFFALSE 56481
// exit ;
56477: POP
56478: POP
56479: GO 57025
// if not tmp then
56481: LD_VAR 0 13
56485: NOT
56486: IFFALSE 56490
// continue ;
56488: GO 56346
// result := true ;
56490: LD_ADDR_VAR 0 8
56494: PUSH
56495: LD_INT 1
56497: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
56498: LD_VAR 0 6
56502: PUSH
56503: LD_VAR 0 13
56507: PPUSH
56508: CALL_OW 247
56512: PUSH
56513: LD_INT 2
56515: EQUAL
56516: AND
56517: PUSH
56518: LD_VAR 0 13
56522: PPUSH
56523: CALL_OW 263
56527: PUSH
56528: LD_INT 1
56530: EQUAL
56531: AND
56532: IFFALSE 56696
// begin if IsDrivenBy ( tmp ) then
56534: LD_VAR 0 13
56538: PPUSH
56539: CALL_OW 311
56543: IFFALSE 56547
// continue ;
56545: GO 56346
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
56547: LD_VAR 0 6
56551: PPUSH
56552: LD_INT 3
56554: PUSH
56555: LD_INT 60
56557: PUSH
56558: EMPTY
56559: LIST
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 3
56567: PUSH
56568: LD_INT 55
56570: PUSH
56571: EMPTY
56572: LIST
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PPUSH
56582: CALL_OW 72
56586: IFFALSE 56694
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
56588: LD_ADDR_VAR 0 18
56592: PUSH
56593: LD_VAR 0 6
56597: PPUSH
56598: LD_INT 3
56600: PUSH
56601: LD_INT 60
56603: PUSH
56604: EMPTY
56605: LIST
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 3
56613: PUSH
56614: LD_INT 55
56616: PUSH
56617: EMPTY
56618: LIST
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PPUSH
56628: CALL_OW 72
56632: PUSH
56633: LD_INT 1
56635: ARRAY
56636: ST_TO_ADDR
// if IsInUnit ( driver ) then
56637: LD_VAR 0 18
56641: PPUSH
56642: CALL_OW 310
56646: IFFALSE 56657
// ComExit ( driver ) ;
56648: LD_VAR 0 18
56652: PPUSH
56653: CALL 81446 0 1
// AddComEnterUnit ( driver , tmp ) ;
56657: LD_VAR 0 18
56661: PPUSH
56662: LD_VAR 0 13
56666: PPUSH
56667: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
56671: LD_VAR 0 18
56675: PPUSH
56676: LD_VAR 0 7
56680: PPUSH
56681: CALL_OW 173
// AddComExitVehicle ( driver ) ;
56685: LD_VAR 0 18
56689: PPUSH
56690: CALL_OW 181
// end ; continue ;
56694: GO 56346
// end ; if not cleaners or not tmp in cleaners then
56696: LD_VAR 0 6
56700: NOT
56701: PUSH
56702: LD_VAR 0 13
56706: PUSH
56707: LD_VAR 0 6
56711: IN
56712: NOT
56713: OR
56714: IFFALSE 57021
// begin if dep then
56716: LD_VAR 0 17
56720: IFFALSE 56856
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
56722: LD_ADDR_VAR 0 16
56726: PUSH
56727: LD_VAR 0 17
56731: PUSH
56732: LD_INT 1
56734: ARRAY
56735: PPUSH
56736: CALL_OW 250
56740: PPUSH
56741: LD_VAR 0 17
56745: PUSH
56746: LD_INT 1
56748: ARRAY
56749: PPUSH
56750: CALL_OW 254
56754: PPUSH
56755: LD_INT 5
56757: PPUSH
56758: CALL_OW 272
56762: PUSH
56763: LD_VAR 0 17
56767: PUSH
56768: LD_INT 1
56770: ARRAY
56771: PPUSH
56772: CALL_OW 251
56776: PPUSH
56777: LD_VAR 0 17
56781: PUSH
56782: LD_INT 1
56784: ARRAY
56785: PPUSH
56786: CALL_OW 254
56790: PPUSH
56791: LD_INT 5
56793: PPUSH
56794: CALL_OW 273
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
56803: LD_VAR 0 16
56807: PUSH
56808: LD_INT 1
56810: ARRAY
56811: PPUSH
56812: LD_VAR 0 16
56816: PUSH
56817: LD_INT 2
56819: ARRAY
56820: PPUSH
56821: CALL_OW 488
56825: IFFALSE 56856
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
56827: LD_VAR 0 13
56831: PPUSH
56832: LD_VAR 0 16
56836: PUSH
56837: LD_INT 1
56839: ARRAY
56840: PPUSH
56841: LD_VAR 0 16
56845: PUSH
56846: LD_INT 2
56848: ARRAY
56849: PPUSH
56850: CALL_OW 111
// continue ;
56854: GO 56346
// end ; end ; r := GetDir ( tmp ) ;
56856: LD_ADDR_VAR 0 15
56860: PUSH
56861: LD_VAR 0 13
56865: PPUSH
56866: CALL_OW 254
56870: ST_TO_ADDR
// if r = 5 then
56871: LD_VAR 0 15
56875: PUSH
56876: LD_INT 5
56878: EQUAL
56879: IFFALSE 56889
// r := 0 ;
56881: LD_ADDR_VAR 0 15
56885: PUSH
56886: LD_INT 0
56888: ST_TO_ADDR
// for j = r to 5 do
56889: LD_ADDR_VAR 0 10
56893: PUSH
56894: DOUBLE
56895: LD_VAR 0 15
56899: DEC
56900: ST_TO_ADDR
56901: LD_INT 5
56903: PUSH
56904: FOR_TO
56905: IFFALSE 57019
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
56907: LD_ADDR_VAR 0 11
56911: PUSH
56912: LD_VAR 0 13
56916: PPUSH
56917: CALL_OW 250
56921: PPUSH
56922: LD_VAR 0 10
56926: PPUSH
56927: LD_INT 2
56929: PPUSH
56930: CALL_OW 272
56934: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
56935: LD_ADDR_VAR 0 12
56939: PUSH
56940: LD_VAR 0 13
56944: PPUSH
56945: CALL_OW 251
56949: PPUSH
56950: LD_VAR 0 10
56954: PPUSH
56955: LD_INT 2
56957: PPUSH
56958: CALL_OW 273
56962: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
56963: LD_VAR 0 11
56967: PPUSH
56968: LD_VAR 0 12
56972: PPUSH
56973: CALL_OW 488
56977: PUSH
56978: LD_VAR 0 11
56982: PPUSH
56983: LD_VAR 0 12
56987: PPUSH
56988: CALL_OW 428
56992: NOT
56993: AND
56994: IFFALSE 57017
// begin ComMoveXY ( tmp , _x , _y ) ;
56996: LD_VAR 0 13
57000: PPUSH
57001: LD_VAR 0 11
57005: PPUSH
57006: LD_VAR 0 12
57010: PPUSH
57011: CALL_OW 111
// break ;
57015: GO 57019
// end ; end ;
57017: GO 56904
57019: POP
57020: POP
// end ; end ;
57021: GO 56346
57023: POP
57024: POP
// end ;
57025: LD_VAR 0 8
57029: RET
// export function BuildingTechInvented ( side , btype ) ; begin
57030: LD_INT 0
57032: PPUSH
// result := true ;
57033: LD_ADDR_VAR 0 3
57037: PUSH
57038: LD_INT 1
57040: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
57041: LD_VAR 0 2
57045: PUSH
57046: LD_INT 24
57048: DOUBLE
57049: EQUAL
57050: IFTRUE 57060
57052: LD_INT 33
57054: DOUBLE
57055: EQUAL
57056: IFTRUE 57060
57058: GO 57085
57060: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
57061: LD_ADDR_VAR 0 3
57065: PUSH
57066: LD_INT 32
57068: PPUSH
57069: LD_VAR 0 1
57073: PPUSH
57074: CALL_OW 321
57078: PUSH
57079: LD_INT 2
57081: EQUAL
57082: ST_TO_ADDR
57083: GO 57405
57085: LD_INT 20
57087: DOUBLE
57088: EQUAL
57089: IFTRUE 57093
57091: GO 57118
57093: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
57094: LD_ADDR_VAR 0 3
57098: PUSH
57099: LD_INT 6
57101: PPUSH
57102: LD_VAR 0 1
57106: PPUSH
57107: CALL_OW 321
57111: PUSH
57112: LD_INT 2
57114: EQUAL
57115: ST_TO_ADDR
57116: GO 57405
57118: LD_INT 22
57120: DOUBLE
57121: EQUAL
57122: IFTRUE 57132
57124: LD_INT 36
57126: DOUBLE
57127: EQUAL
57128: IFTRUE 57132
57130: GO 57157
57132: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
57133: LD_ADDR_VAR 0 3
57137: PUSH
57138: LD_INT 15
57140: PPUSH
57141: LD_VAR 0 1
57145: PPUSH
57146: CALL_OW 321
57150: PUSH
57151: LD_INT 2
57153: EQUAL
57154: ST_TO_ADDR
57155: GO 57405
57157: LD_INT 30
57159: DOUBLE
57160: EQUAL
57161: IFTRUE 57165
57163: GO 57190
57165: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
57166: LD_ADDR_VAR 0 3
57170: PUSH
57171: LD_INT 20
57173: PPUSH
57174: LD_VAR 0 1
57178: PPUSH
57179: CALL_OW 321
57183: PUSH
57184: LD_INT 2
57186: EQUAL
57187: ST_TO_ADDR
57188: GO 57405
57190: LD_INT 28
57192: DOUBLE
57193: EQUAL
57194: IFTRUE 57204
57196: LD_INT 21
57198: DOUBLE
57199: EQUAL
57200: IFTRUE 57204
57202: GO 57229
57204: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
57205: LD_ADDR_VAR 0 3
57209: PUSH
57210: LD_INT 21
57212: PPUSH
57213: LD_VAR 0 1
57217: PPUSH
57218: CALL_OW 321
57222: PUSH
57223: LD_INT 2
57225: EQUAL
57226: ST_TO_ADDR
57227: GO 57405
57229: LD_INT 16
57231: DOUBLE
57232: EQUAL
57233: IFTRUE 57237
57235: GO 57264
57237: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
57238: LD_ADDR_VAR 0 3
57242: PUSH
57243: LD_EXP 60
57247: PPUSH
57248: LD_VAR 0 1
57252: PPUSH
57253: CALL_OW 321
57257: PUSH
57258: LD_INT 2
57260: EQUAL
57261: ST_TO_ADDR
57262: GO 57405
57264: LD_INT 19
57266: DOUBLE
57267: EQUAL
57268: IFTRUE 57278
57270: LD_INT 23
57272: DOUBLE
57273: EQUAL
57274: IFTRUE 57278
57276: GO 57305
57278: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
57279: LD_ADDR_VAR 0 3
57283: PUSH
57284: LD_EXP 59
57288: PPUSH
57289: LD_VAR 0 1
57293: PPUSH
57294: CALL_OW 321
57298: PUSH
57299: LD_INT 2
57301: EQUAL
57302: ST_TO_ADDR
57303: GO 57405
57305: LD_INT 17
57307: DOUBLE
57308: EQUAL
57309: IFTRUE 57313
57311: GO 57338
57313: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
57314: LD_ADDR_VAR 0 3
57318: PUSH
57319: LD_INT 39
57321: PPUSH
57322: LD_VAR 0 1
57326: PPUSH
57327: CALL_OW 321
57331: PUSH
57332: LD_INT 2
57334: EQUAL
57335: ST_TO_ADDR
57336: GO 57405
57338: LD_INT 18
57340: DOUBLE
57341: EQUAL
57342: IFTRUE 57346
57344: GO 57371
57346: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
57347: LD_ADDR_VAR 0 3
57351: PUSH
57352: LD_INT 40
57354: PPUSH
57355: LD_VAR 0 1
57359: PPUSH
57360: CALL_OW 321
57364: PUSH
57365: LD_INT 2
57367: EQUAL
57368: ST_TO_ADDR
57369: GO 57405
57371: LD_INT 27
57373: DOUBLE
57374: EQUAL
57375: IFTRUE 57379
57377: GO 57404
57379: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
57380: LD_ADDR_VAR 0 3
57384: PUSH
57385: LD_INT 35
57387: PPUSH
57388: LD_VAR 0 1
57392: PPUSH
57393: CALL_OW 321
57397: PUSH
57398: LD_INT 2
57400: EQUAL
57401: ST_TO_ADDR
57402: GO 57405
57404: POP
// end ;
57405: LD_VAR 0 3
57409: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
57410: LD_INT 0
57412: PPUSH
57413: PPUSH
57414: PPUSH
57415: PPUSH
57416: PPUSH
57417: PPUSH
57418: PPUSH
57419: PPUSH
57420: PPUSH
57421: PPUSH
57422: PPUSH
// result := false ;
57423: LD_ADDR_VAR 0 6
57427: PUSH
57428: LD_INT 0
57430: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
57431: LD_VAR 0 1
57435: NOT
57436: PUSH
57437: LD_VAR 0 1
57441: PPUSH
57442: CALL_OW 266
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: IN
57457: NOT
57458: OR
57459: PUSH
57460: LD_VAR 0 2
57464: NOT
57465: OR
57466: PUSH
57467: LD_VAR 0 5
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: LD_INT 2
57480: PUSH
57481: LD_INT 3
57483: PUSH
57484: LD_INT 4
57486: PUSH
57487: LD_INT 5
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: IN
57498: NOT
57499: OR
57500: PUSH
57501: LD_VAR 0 3
57505: PPUSH
57506: LD_VAR 0 4
57510: PPUSH
57511: CALL_OW 488
57515: NOT
57516: OR
57517: IFFALSE 57521
// exit ;
57519: GO 58257
// side := GetSide ( depot ) ;
57521: LD_ADDR_VAR 0 9
57525: PUSH
57526: LD_VAR 0 1
57530: PPUSH
57531: CALL_OW 255
57535: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
57536: LD_VAR 0 9
57540: PPUSH
57541: LD_VAR 0 2
57545: PPUSH
57546: CALL 57030 0 2
57550: NOT
57551: IFFALSE 57555
// exit ;
57553: GO 58257
// pom := GetBase ( depot ) ;
57555: LD_ADDR_VAR 0 10
57559: PUSH
57560: LD_VAR 0 1
57564: PPUSH
57565: CALL_OW 274
57569: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57570: LD_ADDR_VAR 0 11
57574: PUSH
57575: LD_VAR 0 2
57579: PPUSH
57580: LD_VAR 0 1
57584: PPUSH
57585: CALL_OW 248
57589: PPUSH
57590: CALL_OW 450
57594: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
57595: LD_VAR 0 10
57599: PPUSH
57600: LD_INT 1
57602: PPUSH
57603: CALL_OW 275
57607: PUSH
57608: LD_VAR 0 11
57612: PUSH
57613: LD_INT 1
57615: ARRAY
57616: GREATEREQUAL
57617: PUSH
57618: LD_VAR 0 10
57622: PPUSH
57623: LD_INT 2
57625: PPUSH
57626: CALL_OW 275
57630: PUSH
57631: LD_VAR 0 11
57635: PUSH
57636: LD_INT 2
57638: ARRAY
57639: GREATEREQUAL
57640: AND
57641: PUSH
57642: LD_VAR 0 10
57646: PPUSH
57647: LD_INT 3
57649: PPUSH
57650: CALL_OW 275
57654: PUSH
57655: LD_VAR 0 11
57659: PUSH
57660: LD_INT 3
57662: ARRAY
57663: GREATEREQUAL
57664: AND
57665: NOT
57666: IFFALSE 57670
// exit ;
57668: GO 58257
// if GetBType ( depot ) = b_depot then
57670: LD_VAR 0 1
57674: PPUSH
57675: CALL_OW 266
57679: PUSH
57680: LD_INT 0
57682: EQUAL
57683: IFFALSE 57695
// dist := 28 else
57685: LD_ADDR_VAR 0 14
57689: PUSH
57690: LD_INT 28
57692: ST_TO_ADDR
57693: GO 57703
// dist := 36 ;
57695: LD_ADDR_VAR 0 14
57699: PUSH
57700: LD_INT 36
57702: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
57703: LD_VAR 0 1
57707: PPUSH
57708: LD_VAR 0 3
57712: PPUSH
57713: LD_VAR 0 4
57717: PPUSH
57718: CALL_OW 297
57722: PUSH
57723: LD_VAR 0 14
57727: GREATER
57728: IFFALSE 57732
// exit ;
57730: GO 58257
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
57732: LD_ADDR_VAR 0 12
57736: PUSH
57737: LD_VAR 0 2
57741: PPUSH
57742: LD_VAR 0 3
57746: PPUSH
57747: LD_VAR 0 4
57751: PPUSH
57752: LD_VAR 0 5
57756: PPUSH
57757: LD_VAR 0 1
57761: PPUSH
57762: CALL_OW 248
57766: PPUSH
57767: LD_INT 0
57769: PPUSH
57770: CALL 58262 0 6
57774: ST_TO_ADDR
// if not hexes then
57775: LD_VAR 0 12
57779: NOT
57780: IFFALSE 57784
// exit ;
57782: GO 58257
// hex := GetHexInfo ( x , y ) ;
57784: LD_ADDR_VAR 0 15
57788: PUSH
57789: LD_VAR 0 3
57793: PPUSH
57794: LD_VAR 0 4
57798: PPUSH
57799: CALL_OW 546
57803: ST_TO_ADDR
// if hex [ 1 ] then
57804: LD_VAR 0 15
57808: PUSH
57809: LD_INT 1
57811: ARRAY
57812: IFFALSE 57816
// exit ;
57814: GO 58257
// height := hex [ 2 ] ;
57816: LD_ADDR_VAR 0 13
57820: PUSH
57821: LD_VAR 0 15
57825: PUSH
57826: LD_INT 2
57828: ARRAY
57829: ST_TO_ADDR
// for i = 1 to hexes do
57830: LD_ADDR_VAR 0 7
57834: PUSH
57835: DOUBLE
57836: LD_INT 1
57838: DEC
57839: ST_TO_ADDR
57840: LD_VAR 0 12
57844: PUSH
57845: FOR_TO
57846: IFFALSE 58176
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
57848: LD_VAR 0 12
57852: PUSH
57853: LD_VAR 0 7
57857: ARRAY
57858: PUSH
57859: LD_INT 1
57861: ARRAY
57862: PPUSH
57863: LD_VAR 0 12
57867: PUSH
57868: LD_VAR 0 7
57872: ARRAY
57873: PUSH
57874: LD_INT 2
57876: ARRAY
57877: PPUSH
57878: CALL_OW 488
57882: NOT
57883: PUSH
57884: LD_VAR 0 12
57888: PUSH
57889: LD_VAR 0 7
57893: ARRAY
57894: PUSH
57895: LD_INT 1
57897: ARRAY
57898: PPUSH
57899: LD_VAR 0 12
57903: PUSH
57904: LD_VAR 0 7
57908: ARRAY
57909: PUSH
57910: LD_INT 2
57912: ARRAY
57913: PPUSH
57914: CALL_OW 428
57918: PUSH
57919: LD_INT 0
57921: GREATER
57922: OR
57923: PUSH
57924: LD_VAR 0 12
57928: PUSH
57929: LD_VAR 0 7
57933: ARRAY
57934: PUSH
57935: LD_INT 1
57937: ARRAY
57938: PPUSH
57939: LD_VAR 0 12
57943: PUSH
57944: LD_VAR 0 7
57948: ARRAY
57949: PUSH
57950: LD_INT 2
57952: ARRAY
57953: PPUSH
57954: CALL_OW 351
57958: OR
57959: IFFALSE 57965
// exit ;
57961: POP
57962: POP
57963: GO 58257
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57965: LD_ADDR_VAR 0 8
57969: PUSH
57970: LD_VAR 0 12
57974: PUSH
57975: LD_VAR 0 7
57979: ARRAY
57980: PUSH
57981: LD_INT 1
57983: ARRAY
57984: PPUSH
57985: LD_VAR 0 12
57989: PUSH
57990: LD_VAR 0 7
57994: ARRAY
57995: PUSH
57996: LD_INT 2
57998: ARRAY
57999: PPUSH
58000: CALL_OW 546
58004: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
58005: LD_VAR 0 8
58009: PUSH
58010: LD_INT 1
58012: ARRAY
58013: PUSH
58014: LD_VAR 0 8
58018: PUSH
58019: LD_INT 2
58021: ARRAY
58022: PUSH
58023: LD_VAR 0 13
58027: PUSH
58028: LD_INT 2
58030: PLUS
58031: GREATER
58032: OR
58033: PUSH
58034: LD_VAR 0 8
58038: PUSH
58039: LD_INT 2
58041: ARRAY
58042: PUSH
58043: LD_VAR 0 13
58047: PUSH
58048: LD_INT 2
58050: MINUS
58051: LESS
58052: OR
58053: PUSH
58054: LD_VAR 0 8
58058: PUSH
58059: LD_INT 3
58061: ARRAY
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: LD_INT 8
58068: PUSH
58069: LD_INT 9
58071: PUSH
58072: LD_INT 10
58074: PUSH
58075: LD_INT 11
58077: PUSH
58078: LD_INT 12
58080: PUSH
58081: LD_INT 13
58083: PUSH
58084: LD_INT 16
58086: PUSH
58087: LD_INT 17
58089: PUSH
58090: LD_INT 18
58092: PUSH
58093: LD_INT 19
58095: PUSH
58096: LD_INT 20
58098: PUSH
58099: LD_INT 21
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: IN
58117: NOT
58118: OR
58119: PUSH
58120: LD_VAR 0 8
58124: PUSH
58125: LD_INT 5
58127: ARRAY
58128: NOT
58129: OR
58130: PUSH
58131: LD_VAR 0 8
58135: PUSH
58136: LD_INT 6
58138: ARRAY
58139: PUSH
58140: LD_INT 1
58142: PUSH
58143: LD_INT 2
58145: PUSH
58146: LD_INT 7
58148: PUSH
58149: LD_INT 9
58151: PUSH
58152: LD_INT 10
58154: PUSH
58155: LD_INT 11
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: IN
58166: NOT
58167: OR
58168: IFFALSE 58174
// exit ;
58170: POP
58171: POP
58172: GO 58257
// end ;
58174: GO 57845
58176: POP
58177: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
58178: LD_VAR 0 9
58182: PPUSH
58183: LD_VAR 0 3
58187: PPUSH
58188: LD_VAR 0 4
58192: PPUSH
58193: LD_INT 20
58195: PPUSH
58196: CALL 50202 0 4
58200: PUSH
58201: LD_INT 4
58203: ARRAY
58204: IFFALSE 58208
// exit ;
58206: GO 58257
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
58208: LD_VAR 0 2
58212: PUSH
58213: LD_INT 29
58215: PUSH
58216: LD_INT 30
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: IN
58223: PUSH
58224: LD_VAR 0 3
58228: PPUSH
58229: LD_VAR 0 4
58233: PPUSH
58234: LD_VAR 0 9
58238: PPUSH
58239: CALL_OW 440
58243: NOT
58244: AND
58245: IFFALSE 58249
// exit ;
58247: GO 58257
// result := true ;
58249: LD_ADDR_VAR 0 6
58253: PUSH
58254: LD_INT 1
58256: ST_TO_ADDR
// end ;
58257: LD_VAR 0 6
58261: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
58262: LD_INT 0
58264: PPUSH
58265: PPUSH
58266: PPUSH
58267: PPUSH
58268: PPUSH
58269: PPUSH
58270: PPUSH
58271: PPUSH
58272: PPUSH
58273: PPUSH
58274: PPUSH
58275: PPUSH
58276: PPUSH
58277: PPUSH
58278: PPUSH
58279: PPUSH
58280: PPUSH
58281: PPUSH
58282: PPUSH
58283: PPUSH
58284: PPUSH
58285: PPUSH
58286: PPUSH
58287: PPUSH
58288: PPUSH
58289: PPUSH
58290: PPUSH
58291: PPUSH
58292: PPUSH
58293: PPUSH
58294: PPUSH
58295: PPUSH
58296: PPUSH
58297: PPUSH
58298: PPUSH
58299: PPUSH
58300: PPUSH
58301: PPUSH
58302: PPUSH
58303: PPUSH
58304: PPUSH
58305: PPUSH
58306: PPUSH
58307: PPUSH
58308: PPUSH
58309: PPUSH
58310: PPUSH
58311: PPUSH
58312: PPUSH
58313: PPUSH
58314: PPUSH
58315: PPUSH
58316: PPUSH
58317: PPUSH
58318: PPUSH
58319: PPUSH
58320: PPUSH
58321: PPUSH
// result = [ ] ;
58322: LD_ADDR_VAR 0 7
58326: PUSH
58327: EMPTY
58328: ST_TO_ADDR
// temp_list = [ ] ;
58329: LD_ADDR_VAR 0 9
58333: PUSH
58334: EMPTY
58335: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
58336: LD_VAR 0 4
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: LD_INT 2
58349: PUSH
58350: LD_INT 3
58352: PUSH
58353: LD_INT 4
58355: PUSH
58356: LD_INT 5
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: IN
58367: NOT
58368: PUSH
58369: LD_VAR 0 1
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: LD_INT 1
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: IN
58384: PUSH
58385: LD_VAR 0 5
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: LD_INT 2
58395: PUSH
58396: LD_INT 3
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: LIST
58403: IN
58404: NOT
58405: AND
58406: OR
58407: IFFALSE 58411
// exit ;
58409: GO 76802
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
58411: LD_VAR 0 1
58415: PUSH
58416: LD_INT 6
58418: PUSH
58419: LD_INT 7
58421: PUSH
58422: LD_INT 8
58424: PUSH
58425: LD_INT 13
58427: PUSH
58428: LD_INT 12
58430: PUSH
58431: LD_INT 15
58433: PUSH
58434: LD_INT 11
58436: PUSH
58437: LD_INT 14
58439: PUSH
58440: LD_INT 10
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: IN
58454: IFFALSE 58464
// btype = b_lab ;
58456: LD_ADDR_VAR 0 1
58460: PUSH
58461: LD_INT 6
58463: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
58464: LD_VAR 0 6
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: LD_INT 2
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: LIST
58482: IN
58483: NOT
58484: PUSH
58485: LD_VAR 0 1
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: LD_INT 2
58498: PUSH
58499: LD_INT 3
58501: PUSH
58502: LD_INT 6
58504: PUSH
58505: LD_INT 36
58507: PUSH
58508: LD_INT 4
58510: PUSH
58511: LD_INT 5
58513: PUSH
58514: LD_INT 31
58516: PUSH
58517: LD_INT 32
58519: PUSH
58520: LD_INT 33
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: IN
58536: NOT
58537: PUSH
58538: LD_VAR 0 6
58542: PUSH
58543: LD_INT 1
58545: EQUAL
58546: AND
58547: OR
58548: PUSH
58549: LD_VAR 0 1
58553: PUSH
58554: LD_INT 2
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: IN
58564: NOT
58565: PUSH
58566: LD_VAR 0 6
58570: PUSH
58571: LD_INT 2
58573: EQUAL
58574: AND
58575: OR
58576: IFFALSE 58586
// mode = 0 ;
58578: LD_ADDR_VAR 0 6
58582: PUSH
58583: LD_INT 0
58585: ST_TO_ADDR
// case mode of 0 :
58586: LD_VAR 0 6
58590: PUSH
58591: LD_INT 0
58593: DOUBLE
58594: EQUAL
58595: IFTRUE 58599
58597: GO 70052
58599: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58600: LD_ADDR_VAR 0 11
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 0
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 1
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: LD_INT 1
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: NEG
58682: PUSH
58683: LD_INT 2
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: LD_INT 2
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: LD_INT 2
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: PUSH
58747: LD_INT 3
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 0
58756: PUSH
58757: LD_INT 3
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: LD_INT 2
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58793: LD_ADDR_VAR 0 12
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: LD_INT 1
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 2
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 2
58895: PUSH
58896: LD_INT 1
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: NEG
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 2
58927: NEG
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 2
58939: NEG
58940: PUSH
58941: LD_INT 1
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 3
58950: NEG
58951: PUSH
58952: LD_INT 0
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 3
58961: NEG
58962: PUSH
58963: LD_INT 1
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58989: LD_ADDR_VAR 0 13
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: LD_INT 0
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: LD_INT 1
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 0
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 1
59047: NEG
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: LD_INT 1
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: LD_INT 1
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 2
59092: PUSH
59093: LD_INT 2
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 1
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 2
59112: NEG
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 2
59124: NEG
59125: PUSH
59126: LD_INT 2
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 2
59136: NEG
59137: PUSH
59138: LD_INT 3
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 3
59148: NEG
59149: PUSH
59150: LD_INT 2
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 3
59160: NEG
59161: PUSH
59162: LD_INT 3
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59188: LD_ADDR_VAR 0 14
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: LD_INT 1
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: LD_INT 0
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: LD_INT 1
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 1
59269: NEG
59270: PUSH
59271: LD_INT 2
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: LD_INT 2
59284: NEG
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: LD_INT 1
59295: NEG
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: LD_INT 2
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: LD_INT 2
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: NEG
59335: PUSH
59336: LD_INT 3
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: LD_INT 3
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: LD_INT 2
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59384: LD_ADDR_VAR 0 15
59388: PUSH
59389: LD_INT 0
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 2
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 2
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 1
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 2
59507: NEG
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 2
59518: NEG
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 2
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 3
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 3
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59577: LD_ADDR_VAR 0 16
59581: PUSH
59582: LD_INT 0
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: LD_INT 1
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: PUSH
59616: LD_INT 1
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: LD_INT 1
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: LD_INT 1
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: LD_INT 2
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 2
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 2
59680: PUSH
59681: LD_INT 2
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 1
59690: PUSH
59691: LD_INT 2
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 2
59700: NEG
59701: PUSH
59702: LD_INT 1
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 2
59712: NEG
59713: PUSH
59714: LD_INT 2
59716: NEG
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 3
59724: PUSH
59725: LD_INT 2
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 3
59734: PUSH
59735: LD_INT 3
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 2
59744: PUSH
59745: LD_INT 3
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59770: LD_ADDR_VAR 0 17
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: LD_INT 1
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: LD_INT 1
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: LD_INT 1
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 1
59828: NEG
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: LD_INT 2
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 2
59885: PUSH
59886: LD_INT 0
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 2
59895: PUSH
59896: LD_INT 1
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 2
59905: PUSH
59906: LD_INT 2
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: LD_INT 2
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 0
59925: PUSH
59926: LD_INT 2
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 1
59935: NEG
59936: PUSH
59937: LD_INT 1
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 2
59946: NEG
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 2
59957: NEG
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 2
59969: NEG
59970: PUSH
59971: LD_INT 2
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60000: LD_ADDR_VAR 0 18
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: LD_INT 1
60020: NEG
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: PUSH
60071: LD_INT 1
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: LD_INT 2
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: LD_INT 1
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 2
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 2
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 2
60135: PUSH
60136: LD_INT 2
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: LD_INT 2
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: LD_INT 2
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 2
60176: NEG
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 2
60187: NEG
60188: PUSH
60189: LD_INT 1
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 2
60199: NEG
60200: PUSH
60201: LD_INT 2
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60230: LD_ADDR_VAR 0 19
60234: PUSH
60235: LD_INT 0
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: LD_INT 1
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 1
60268: PUSH
60269: LD_INT 1
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: LD_INT 1
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: LD_INT 0
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 1
60299: NEG
60300: PUSH
60301: LD_INT 1
60303: NEG
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 1
60311: NEG
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: LD_INT 2
60326: NEG
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 1
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 2
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 2
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 2
60365: PUSH
60366: LD_INT 2
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 1
60375: PUSH
60376: LD_INT 2
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: LD_INT 2
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 1
60395: NEG
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 2
60406: NEG
60407: PUSH
60408: LD_INT 0
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 2
60417: NEG
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 2
60429: NEG
60430: PUSH
60431: LD_INT 2
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60460: LD_ADDR_VAR 0 20
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: LD_INT 1
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 1
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 1
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 0
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 1
60518: NEG
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 1
60529: NEG
60530: PUSH
60531: LD_INT 1
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 1
60541: NEG
60542: PUSH
60543: LD_INT 2
60545: NEG
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 0
60553: PUSH
60554: LD_INT 2
60556: NEG
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: LD_INT 1
60567: NEG
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 2
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 2
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 2
60595: PUSH
60596: LD_INT 2
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: LD_INT 2
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: LD_INT 2
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: NEG
60626: PUSH
60627: LD_INT 1
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 2
60636: NEG
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 2
60647: NEG
60648: PUSH
60649: LD_INT 1
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 2
60659: NEG
60660: PUSH
60661: LD_INT 2
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60690: LD_ADDR_VAR 0 21
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: LD_INT 1
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 1
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 1
60748: NEG
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: NEG
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 1
60771: NEG
60772: PUSH
60773: LD_INT 2
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: LD_INT 2
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 1
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 2
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 2
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 2
60825: PUSH
60826: LD_INT 2
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 1
60835: PUSH
60836: LD_INT 2
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: LD_INT 2
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 1
60855: NEG
60856: PUSH
60857: LD_INT 1
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 2
60866: NEG
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 2
60877: NEG
60878: PUSH
60879: LD_INT 1
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 2
60889: NEG
60890: PUSH
60891: LD_INT 2
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60920: LD_ADDR_VAR 0 22
60924: PUSH
60925: LD_INT 0
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: LD_INT 1
60940: NEG
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 1
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 1
60958: PUSH
60959: LD_INT 1
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 1
60978: NEG
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 1
60989: NEG
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 1
61001: NEG
61002: PUSH
61003: LD_INT 2
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: LD_INT 2
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 1
61024: PUSH
61025: LD_INT 1
61027: NEG
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 2
61035: PUSH
61036: LD_INT 0
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 2
61045: PUSH
61046: LD_INT 1
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 2
61055: PUSH
61056: LD_INT 2
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 1
61065: PUSH
61066: LD_INT 2
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: LD_INT 2
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 1
61085: NEG
61086: PUSH
61087: LD_INT 1
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 2
61096: NEG
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 2
61107: NEG
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: NEG
61120: PUSH
61121: LD_INT 2
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61150: LD_ADDR_VAR 0 23
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: LD_INT 1
61170: NEG
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 1
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 1
61188: PUSH
61189: LD_INT 1
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: LD_INT 1
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 1
61208: NEG
61209: PUSH
61210: LD_INT 0
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: LD_INT 1
61223: NEG
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 1
61231: NEG
61232: PUSH
61233: LD_INT 2
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: LD_INT 2
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 1
61254: PUSH
61255: LD_INT 1
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 2
61265: PUSH
61266: LD_INT 0
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 2
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 2
61285: PUSH
61286: LD_INT 2
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 1
61295: PUSH
61296: LD_INT 2
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: LD_INT 2
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 2
61326: NEG
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 2
61337: NEG
61338: PUSH
61339: LD_INT 1
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 2
61349: NEG
61350: PUSH
61351: LD_INT 2
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 2
61361: NEG
61362: PUSH
61363: LD_INT 3
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 1
61373: NEG
61374: PUSH
61375: LD_INT 3
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 1
61385: PUSH
61386: LD_INT 2
61388: NEG
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 2
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
61430: LD_ADDR_VAR 0 24
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 1
61468: PUSH
61469: LD_INT 1
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 1
61488: NEG
61489: PUSH
61490: LD_INT 0
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: LD_INT 2
61515: NEG
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 0
61523: PUSH
61524: LD_INT 2
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: LD_INT 1
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 2
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 2
61555: PUSH
61556: LD_INT 1
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 2
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 1
61575: PUSH
61576: LD_INT 2
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: LD_INT 2
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 1
61595: NEG
61596: PUSH
61597: LD_INT 1
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 2
61606: NEG
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 2
61617: NEG
61618: PUSH
61619: LD_INT 1
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 2
61629: NEG
61630: PUSH
61631: LD_INT 2
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: LD_INT 2
61644: NEG
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 2
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 3
61663: PUSH
61664: LD_INT 1
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 3
61673: PUSH
61674: LD_INT 2
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
61706: LD_ADDR_VAR 0 25
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: LD_INT 1
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 1
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: LD_INT 1
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: LD_INT 1
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 1
61764: NEG
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 1
61775: NEG
61776: PUSH
61777: LD_INT 1
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: LD_INT 2
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: LD_INT 2
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: PUSH
61811: LD_INT 1
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 2
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 2
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 2
61841: PUSH
61842: LD_INT 2
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: LD_INT 2
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 0
61861: PUSH
61862: LD_INT 2
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: NEG
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 2
61882: NEG
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 2
61893: NEG
61894: PUSH
61895: LD_INT 1
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 2
61905: NEG
61906: PUSH
61907: LD_INT 2
61909: NEG
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 3
61917: PUSH
61918: LD_INT 1
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 3
61927: PUSH
61928: LD_INT 2
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 2
61937: PUSH
61938: LD_INT 3
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 1
61947: PUSH
61948: LD_INT 3
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61980: LD_ADDR_VAR 0 26
61984: PUSH
61985: LD_INT 0
61987: PUSH
61988: LD_INT 0
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 0
61997: PUSH
61998: LD_INT 1
62000: NEG
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 1
62008: PUSH
62009: LD_INT 0
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 1
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 0
62028: PUSH
62029: LD_INT 1
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 1
62038: NEG
62039: PUSH
62040: LD_INT 0
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 1
62049: NEG
62050: PUSH
62051: LD_INT 1
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 1
62061: NEG
62062: PUSH
62063: LD_INT 2
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: LD_INT 2
62076: NEG
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 1
62084: PUSH
62085: LD_INT 1
62087: NEG
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 2
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 2
62105: PUSH
62106: LD_INT 1
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 2
62115: PUSH
62116: LD_INT 2
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 1
62125: PUSH
62126: LD_INT 2
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: LD_INT 2
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 2
62156: NEG
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 2
62167: NEG
62168: PUSH
62169: LD_INT 1
62171: NEG
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 2
62179: NEG
62180: PUSH
62181: LD_INT 2
62183: NEG
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 2
62191: PUSH
62192: LD_INT 3
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 1
62201: PUSH
62202: LD_INT 3
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 1
62211: NEG
62212: PUSH
62213: LD_INT 2
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 2
62222: NEG
62223: PUSH
62224: LD_INT 1
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62256: LD_ADDR_VAR 0 27
62260: PUSH
62261: LD_INT 0
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: PUSH
62295: LD_INT 1
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 0
62304: PUSH
62305: LD_INT 1
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 1
62325: NEG
62326: PUSH
62327: LD_INT 1
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 1
62337: NEG
62338: PUSH
62339: LD_INT 2
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 0
62349: PUSH
62350: LD_INT 2
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: LD_INT 1
62363: NEG
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 2
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 2
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 2
62391: PUSH
62392: LD_INT 2
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 1
62401: PUSH
62402: LD_INT 2
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: LD_INT 2
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 1
62421: NEG
62422: PUSH
62423: LD_INT 1
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 2
62432: NEG
62433: PUSH
62434: LD_INT 0
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 2
62443: NEG
62444: PUSH
62445: LD_INT 1
62447: NEG
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 2
62455: NEG
62456: PUSH
62457: LD_INT 2
62459: NEG
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 1
62467: NEG
62468: PUSH
62469: LD_INT 2
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 2
62478: NEG
62479: PUSH
62480: LD_INT 1
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 3
62489: NEG
62490: PUSH
62491: LD_INT 1
62493: NEG
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 3
62501: NEG
62502: PUSH
62503: LD_INT 2
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62536: LD_ADDR_VAR 0 28
62540: PUSH
62541: LD_INT 0
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 0
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 1
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 1
62574: PUSH
62575: LD_INT 1
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 0
62584: PUSH
62585: LD_INT 1
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 1
62594: NEG
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 1
62605: NEG
62606: PUSH
62607: LD_INT 1
62609: NEG
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 1
62617: NEG
62618: PUSH
62619: LD_INT 2
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: LD_INT 2
62632: NEG
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: LD_INT 1
62643: NEG
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 2
62651: PUSH
62652: LD_INT 0
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 2
62661: PUSH
62662: LD_INT 1
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 2
62671: PUSH
62672: LD_INT 2
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 1
62681: PUSH
62682: LD_INT 2
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 0
62691: PUSH
62692: LD_INT 2
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: NEG
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 2
62712: NEG
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 2
62723: NEG
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 2
62735: NEG
62736: PUSH
62737: LD_INT 2
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 2
62747: NEG
62748: PUSH
62749: LD_INT 3
62751: NEG
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 1
62759: NEG
62760: PUSH
62761: LD_INT 3
62763: NEG
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 3
62771: NEG
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 3
62783: NEG
62784: PUSH
62785: LD_INT 2
62787: NEG
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62818: LD_ADDR_VAR 0 29
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: LD_INT 1
62838: NEG
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: PUSH
62857: LD_INT 1
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 0
62866: PUSH
62867: LD_INT 1
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 1
62876: NEG
62877: PUSH
62878: LD_INT 0
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 1
62887: NEG
62888: PUSH
62889: LD_INT 1
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 1
62899: NEG
62900: PUSH
62901: LD_INT 2
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 0
62911: PUSH
62912: LD_INT 2
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 1
62922: PUSH
62923: LD_INT 1
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 2
62933: PUSH
62934: LD_INT 0
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 2
62943: PUSH
62944: LD_INT 1
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: LD_INT 2
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: LD_INT 2
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 1
62973: NEG
62974: PUSH
62975: LD_INT 1
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 2
62984: NEG
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 2
62996: NEG
62997: PUSH
62998: LD_INT 2
63000: NEG
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 2
63008: NEG
63009: PUSH
63010: LD_INT 3
63012: NEG
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 2
63020: PUSH
63021: LD_INT 1
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 3
63031: PUSH
63032: LD_INT 1
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 1
63041: PUSH
63042: LD_INT 3
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 1
63051: NEG
63052: PUSH
63053: LD_INT 2
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 3
63062: NEG
63063: PUSH
63064: LD_INT 2
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63097: LD_ADDR_VAR 0 30
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: LD_INT 1
63117: NEG
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 1
63125: PUSH
63126: LD_INT 0
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 1
63135: PUSH
63136: LD_INT 1
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 0
63145: PUSH
63146: LD_INT 1
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 1
63155: NEG
63156: PUSH
63157: LD_INT 0
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 1
63166: NEG
63167: PUSH
63168: LD_INT 1
63170: NEG
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: LD_INT 2
63182: NEG
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: LD_INT 2
63193: NEG
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 1
63201: PUSH
63202: LD_INT 1
63204: NEG
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 2
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 2
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 2
63232: PUSH
63233: LD_INT 2
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: PUSH
63243: LD_INT 2
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 1
63252: NEG
63253: PUSH
63254: LD_INT 1
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 2
63263: NEG
63264: PUSH
63265: LD_INT 0
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 2
63274: NEG
63275: PUSH
63276: LD_INT 1
63278: NEG
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 1
63286: NEG
63287: PUSH
63288: LD_INT 3
63290: NEG
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 1
63298: PUSH
63299: LD_INT 2
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 3
63309: PUSH
63310: LD_INT 2
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 2
63319: PUSH
63320: LD_INT 3
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 2
63329: NEG
63330: PUSH
63331: LD_INT 1
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 3
63340: NEG
63341: PUSH
63342: LD_INT 1
63344: NEG
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63375: LD_ADDR_VAR 0 31
63379: PUSH
63380: LD_INT 0
63382: PUSH
63383: LD_INT 0
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 0
63392: PUSH
63393: LD_INT 1
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 1
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: PUSH
63414: LD_INT 1
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: LD_INT 1
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 1
63433: NEG
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 1
63444: NEG
63445: PUSH
63446: LD_INT 1
63448: NEG
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 1
63456: NEG
63457: PUSH
63458: LD_INT 2
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 1
63468: PUSH
63469: LD_INT 1
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 2
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 2
63489: PUSH
63490: LD_INT 1
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 2
63499: PUSH
63500: LD_INT 2
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: PUSH
63510: LD_INT 2
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 0
63519: PUSH
63520: LD_INT 2
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 1
63529: NEG
63530: PUSH
63531: LD_INT 1
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 2
63540: NEG
63541: PUSH
63542: LD_INT 1
63544: NEG
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 2
63552: NEG
63553: PUSH
63554: LD_INT 2
63556: NEG
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 2
63564: NEG
63565: PUSH
63566: LD_INT 3
63568: NEG
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 2
63576: PUSH
63577: LD_INT 1
63579: NEG
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 3
63587: PUSH
63588: LD_INT 1
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 1
63597: PUSH
63598: LD_INT 3
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: NEG
63608: PUSH
63609: LD_INT 2
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 3
63618: NEG
63619: PUSH
63620: LD_INT 2
63622: NEG
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63653: LD_ADDR_VAR 0 32
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: LD_INT 1
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 1
63681: PUSH
63682: LD_INT 0
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 1
63691: PUSH
63692: LD_INT 1
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 0
63701: PUSH
63702: LD_INT 1
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 1
63711: NEG
63712: PUSH
63713: LD_INT 0
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 1
63722: NEG
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 1
63734: NEG
63735: PUSH
63736: LD_INT 2
63738: NEG
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 0
63746: PUSH
63747: LD_INT 2
63749: NEG
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: LD_INT 1
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 2
63768: PUSH
63769: LD_INT 1
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 2
63778: PUSH
63779: LD_INT 2
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 1
63788: PUSH
63789: LD_INT 2
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 0
63798: PUSH
63799: LD_INT 2
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 1
63808: NEG
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 2
63819: NEG
63820: PUSH
63821: LD_INT 0
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 2
63830: NEG
63831: PUSH
63832: LD_INT 1
63834: NEG
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 1
63842: NEG
63843: PUSH
63844: LD_INT 3
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 1
63854: PUSH
63855: LD_INT 2
63857: NEG
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 3
63865: PUSH
63866: LD_INT 2
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 2
63875: PUSH
63876: LD_INT 3
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 2
63885: NEG
63886: PUSH
63887: LD_INT 1
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 3
63896: NEG
63897: PUSH
63898: LD_INT 1
63900: NEG
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63931: LD_ADDR_VAR 0 33
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: LD_INT 1
63951: NEG
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 1
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 1
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: LD_INT 1
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 1
63989: NEG
63990: PUSH
63991: LD_INT 0
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 1
64000: NEG
64001: PUSH
64002: LD_INT 1
64004: NEG
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 1
64012: NEG
64013: PUSH
64014: LD_INT 2
64016: NEG
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: LD_INT 1
64027: NEG
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 2
64035: PUSH
64036: LD_INT 0
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 2
64045: PUSH
64046: LD_INT 1
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 1
64055: PUSH
64056: LD_INT 2
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: LD_INT 2
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 1
64075: NEG
64076: PUSH
64077: LD_INT 1
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 2
64086: NEG
64087: PUSH
64088: LD_INT 0
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 2
64097: NEG
64098: PUSH
64099: LD_INT 1
64101: NEG
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 2
64109: NEG
64110: PUSH
64111: LD_INT 2
64113: NEG
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 2
64121: NEG
64122: PUSH
64123: LD_INT 3
64125: NEG
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 2
64133: PUSH
64134: LD_INT 1
64136: NEG
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 3
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: LD_INT 3
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: PUSH
64166: LD_INT 2
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 3
64175: NEG
64176: PUSH
64177: LD_INT 2
64179: NEG
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64210: LD_ADDR_VAR 0 34
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: LD_INT 0
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: LD_INT 1
64230: NEG
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 1
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 1
64248: PUSH
64249: LD_INT 1
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 0
64258: PUSH
64259: LD_INT 1
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 1
64268: NEG
64269: PUSH
64270: LD_INT 0
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 1
64279: NEG
64280: PUSH
64281: LD_INT 1
64283: NEG
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 1
64291: NEG
64292: PUSH
64293: LD_INT 2
64295: NEG
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: LD_INT 2
64306: NEG
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 1
64314: PUSH
64315: LD_INT 1
64317: NEG
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 2
64325: PUSH
64326: LD_INT 1
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 2
64335: PUSH
64336: LD_INT 2
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 1
64345: PUSH
64346: LD_INT 2
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 1
64355: NEG
64356: PUSH
64357: LD_INT 1
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 2
64366: NEG
64367: PUSH
64368: LD_INT 0
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 2
64377: NEG
64378: PUSH
64379: LD_INT 1
64381: NEG
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 2
64389: NEG
64390: PUSH
64391: LD_INT 2
64393: NEG
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 1
64401: NEG
64402: PUSH
64403: LD_INT 3
64405: NEG
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 1
64413: PUSH
64414: LD_INT 2
64416: NEG
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 3
64424: PUSH
64425: LD_INT 2
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 2
64434: PUSH
64435: LD_INT 3
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 2
64444: NEG
64445: PUSH
64446: LD_INT 1
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 3
64455: NEG
64456: PUSH
64457: LD_INT 1
64459: NEG
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64490: LD_ADDR_VAR 0 35
64494: PUSH
64495: LD_INT 0
64497: PUSH
64498: LD_INT 0
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: LD_INT 1
64510: NEG
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 1
64518: PUSH
64519: LD_INT 0
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 1
64528: PUSH
64529: LD_INT 1
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 1
64548: NEG
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 1
64559: NEG
64560: PUSH
64561: LD_INT 1
64563: NEG
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 2
64571: PUSH
64572: LD_INT 1
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 2
64581: NEG
64582: PUSH
64583: LD_INT 1
64585: NEG
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64602: LD_ADDR_VAR 0 36
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: LD_INT 0
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 0
64619: PUSH
64620: LD_INT 1
64622: NEG
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 1
64630: PUSH
64631: LD_INT 0
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 1
64640: PUSH
64641: LD_INT 1
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 0
64650: PUSH
64651: LD_INT 1
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 1
64660: NEG
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 1
64671: NEG
64672: PUSH
64673: LD_INT 1
64675: NEG
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 1
64683: NEG
64684: PUSH
64685: LD_INT 2
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 1
64695: PUSH
64696: LD_INT 2
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64714: LD_ADDR_VAR 0 37
64718: PUSH
64719: LD_INT 0
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 0
64731: PUSH
64732: LD_INT 1
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 1
64742: PUSH
64743: LD_INT 0
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 1
64752: PUSH
64753: LD_INT 1
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 0
64762: PUSH
64763: LD_INT 1
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 1
64772: NEG
64773: PUSH
64774: LD_INT 0
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 1
64783: NEG
64784: PUSH
64785: LD_INT 1
64787: NEG
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 1
64795: PUSH
64796: LD_INT 1
64798: NEG
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 1
64806: NEG
64807: PUSH
64808: LD_INT 1
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64826: LD_ADDR_VAR 0 38
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 0
64843: PUSH
64844: LD_INT 1
64846: NEG
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 1
64854: PUSH
64855: LD_INT 0
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 1
64864: PUSH
64865: LD_INT 1
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 0
64874: PUSH
64875: LD_INT 1
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 1
64884: NEG
64885: PUSH
64886: LD_INT 0
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 1
64895: NEG
64896: PUSH
64897: LD_INT 1
64899: NEG
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 2
64907: PUSH
64908: LD_INT 1
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 2
64917: NEG
64918: PUSH
64919: LD_INT 1
64921: NEG
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64938: LD_ADDR_VAR 0 39
64942: PUSH
64943: LD_INT 0
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 0
64955: PUSH
64956: LD_INT 1
64958: NEG
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 1
64966: PUSH
64967: LD_INT 0
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 1
64976: PUSH
64977: LD_INT 1
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 0
64986: PUSH
64987: LD_INT 1
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 1
64996: NEG
64997: PUSH
64998: LD_INT 0
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 1
65007: NEG
65008: PUSH
65009: LD_INT 1
65011: NEG
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 1
65019: NEG
65020: PUSH
65021: LD_INT 2
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 1
65031: PUSH
65032: LD_INT 2
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
65050: LD_ADDR_VAR 0 40
65054: PUSH
65055: LD_INT 0
65057: PUSH
65058: LD_INT 0
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 0
65067: PUSH
65068: LD_INT 1
65070: NEG
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 1
65078: PUSH
65079: LD_INT 0
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 1
65088: PUSH
65089: LD_INT 1
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 0
65098: PUSH
65099: LD_INT 1
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 1
65108: NEG
65109: PUSH
65110: LD_INT 0
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 1
65119: NEG
65120: PUSH
65121: LD_INT 1
65123: NEG
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 1
65131: PUSH
65132: LD_INT 1
65134: NEG
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 1
65142: NEG
65143: PUSH
65144: LD_INT 1
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65162: LD_ADDR_VAR 0 41
65166: PUSH
65167: LD_INT 0
65169: PUSH
65170: LD_INT 0
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 0
65179: PUSH
65180: LD_INT 1
65182: NEG
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 1
65190: PUSH
65191: LD_INT 0
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 1
65200: PUSH
65201: LD_INT 1
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 0
65210: PUSH
65211: LD_INT 1
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 1
65220: NEG
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 1
65231: NEG
65232: PUSH
65233: LD_INT 1
65235: NEG
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 1
65243: NEG
65244: PUSH
65245: LD_INT 2
65247: NEG
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 1
65255: PUSH
65256: LD_INT 1
65258: NEG
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 2
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 2
65276: PUSH
65277: LD_INT 1
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 2
65286: PUSH
65287: LD_INT 2
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 1
65296: PUSH
65297: LD_INT 2
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 1
65306: NEG
65307: PUSH
65308: LD_INT 1
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 2
65317: NEG
65318: PUSH
65319: LD_INT 0
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 2
65328: NEG
65329: PUSH
65330: LD_INT 1
65332: NEG
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 2
65340: NEG
65341: PUSH
65342: LD_INT 2
65344: NEG
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 2
65352: NEG
65353: PUSH
65354: LD_INT 3
65356: NEG
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 2
65364: PUSH
65365: LD_INT 1
65367: NEG
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 3
65375: PUSH
65376: LD_INT 0
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 3
65385: PUSH
65386: LD_INT 1
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 3
65395: PUSH
65396: LD_INT 2
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 3
65405: PUSH
65406: LD_INT 3
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 2
65415: PUSH
65416: LD_INT 3
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 2
65425: NEG
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 3
65436: NEG
65437: PUSH
65438: LD_INT 0
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 3
65447: NEG
65448: PUSH
65449: LD_INT 1
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 3
65459: NEG
65460: PUSH
65461: LD_INT 2
65463: NEG
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 3
65471: NEG
65472: PUSH
65473: LD_INT 3
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65512: LD_ADDR_VAR 0 42
65516: PUSH
65517: LD_INT 0
65519: PUSH
65520: LD_INT 0
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 0
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 1
65540: PUSH
65541: LD_INT 0
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 1
65550: PUSH
65551: LD_INT 1
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 0
65560: PUSH
65561: LD_INT 1
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 1
65570: NEG
65571: PUSH
65572: LD_INT 0
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 1
65581: NEG
65582: PUSH
65583: LD_INT 1
65585: NEG
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 1
65593: NEG
65594: PUSH
65595: LD_INT 2
65597: NEG
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 0
65605: PUSH
65606: LD_INT 2
65608: NEG
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 1
65616: PUSH
65617: LD_INT 1
65619: NEG
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 2
65627: PUSH
65628: LD_INT 1
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 2
65637: PUSH
65638: LD_INT 2
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 1
65647: PUSH
65648: LD_INT 2
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: LD_INT 2
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 1
65667: NEG
65668: PUSH
65669: LD_INT 1
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 2
65678: NEG
65679: PUSH
65680: LD_INT 1
65682: NEG
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 2
65690: NEG
65691: PUSH
65692: LD_INT 2
65694: NEG
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 2
65702: NEG
65703: PUSH
65704: LD_INT 3
65706: NEG
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 1
65714: NEG
65715: PUSH
65716: LD_INT 3
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 0
65726: PUSH
65727: LD_INT 3
65729: NEG
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 1
65737: PUSH
65738: LD_INT 2
65740: NEG
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 3
65748: PUSH
65749: LD_INT 2
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 3
65758: PUSH
65759: LD_INT 3
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 2
65768: PUSH
65769: LD_INT 3
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 1
65778: PUSH
65779: LD_INT 3
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 0
65788: PUSH
65789: LD_INT 3
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 1
65798: NEG
65799: PUSH
65800: LD_INT 2
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 3
65809: NEG
65810: PUSH
65811: LD_INT 2
65813: NEG
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 3
65821: NEG
65822: PUSH
65823: LD_INT 3
65825: NEG
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65862: LD_ADDR_VAR 0 43
65866: PUSH
65867: LD_INT 0
65869: PUSH
65870: LD_INT 0
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 0
65879: PUSH
65880: LD_INT 1
65882: NEG
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 1
65890: PUSH
65891: LD_INT 0
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 1
65900: PUSH
65901: LD_INT 1
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 0
65910: PUSH
65911: LD_INT 1
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 1
65920: NEG
65921: PUSH
65922: LD_INT 0
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 1
65931: NEG
65932: PUSH
65933: LD_INT 1
65935: NEG
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 1
65943: NEG
65944: PUSH
65945: LD_INT 2
65947: NEG
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: LD_INT 2
65958: NEG
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 1
65966: PUSH
65967: LD_INT 1
65969: NEG
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 2
65977: PUSH
65978: LD_INT 0
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 2
65987: PUSH
65988: LD_INT 1
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 1
65997: PUSH
65998: LD_INT 2
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 0
66007: PUSH
66008: LD_INT 2
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 1
66017: NEG
66018: PUSH
66019: LD_INT 1
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 2
66028: NEG
66029: PUSH
66030: LD_INT 0
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 2
66039: NEG
66040: PUSH
66041: LD_INT 1
66043: NEG
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 1
66051: NEG
66052: PUSH
66053: LD_INT 3
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 0
66063: PUSH
66064: LD_INT 3
66066: NEG
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 1
66074: PUSH
66075: LD_INT 2
66077: NEG
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 2
66085: PUSH
66086: LD_INT 1
66088: NEG
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 3
66096: PUSH
66097: LD_INT 0
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 3
66106: PUSH
66107: LD_INT 1
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 1
66116: PUSH
66117: LD_INT 3
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 0
66126: PUSH
66127: LD_INT 3
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 1
66136: NEG
66137: PUSH
66138: LD_INT 2
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 2
66147: NEG
66148: PUSH
66149: LD_INT 1
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 3
66158: NEG
66159: PUSH
66160: LD_INT 0
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 3
66169: NEG
66170: PUSH
66171: LD_INT 1
66173: NEG
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66210: LD_ADDR_VAR 0 44
66214: PUSH
66215: LD_INT 0
66217: PUSH
66218: LD_INT 0
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: LD_INT 1
66230: NEG
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 1
66238: PUSH
66239: LD_INT 0
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 1
66248: PUSH
66249: LD_INT 1
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 0
66258: PUSH
66259: LD_INT 1
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 1
66268: NEG
66269: PUSH
66270: LD_INT 0
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 1
66279: NEG
66280: PUSH
66281: LD_INT 1
66283: NEG
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 1
66291: NEG
66292: PUSH
66293: LD_INT 2
66295: NEG
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 1
66303: PUSH
66304: LD_INT 1
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 2
66314: PUSH
66315: LD_INT 0
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 2
66324: PUSH
66325: LD_INT 1
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 2
66334: PUSH
66335: LD_INT 2
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 1
66344: PUSH
66345: LD_INT 2
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 1
66354: NEG
66355: PUSH
66356: LD_INT 1
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 2
66365: NEG
66366: PUSH
66367: LD_INT 0
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 2
66376: NEG
66377: PUSH
66378: LD_INT 1
66380: NEG
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 2
66388: NEG
66389: PUSH
66390: LD_INT 2
66392: NEG
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 2
66400: NEG
66401: PUSH
66402: LD_INT 3
66404: NEG
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 2
66412: PUSH
66413: LD_INT 1
66415: NEG
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 3
66423: PUSH
66424: LD_INT 0
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 3
66433: PUSH
66434: LD_INT 1
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 3
66443: PUSH
66444: LD_INT 2
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 3
66453: PUSH
66454: LD_INT 3
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 2
66463: PUSH
66464: LD_INT 3
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 2
66473: NEG
66474: PUSH
66475: LD_INT 1
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 3
66484: NEG
66485: PUSH
66486: LD_INT 0
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 3
66495: NEG
66496: PUSH
66497: LD_INT 1
66499: NEG
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 3
66507: NEG
66508: PUSH
66509: LD_INT 2
66511: NEG
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 3
66519: NEG
66520: PUSH
66521: LD_INT 3
66523: NEG
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66560: LD_ADDR_VAR 0 45
66564: PUSH
66565: LD_INT 0
66567: PUSH
66568: LD_INT 0
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 0
66577: PUSH
66578: LD_INT 1
66580: NEG
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 1
66588: PUSH
66589: LD_INT 0
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 1
66598: PUSH
66599: LD_INT 1
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 0
66608: PUSH
66609: LD_INT 1
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 1
66618: NEG
66619: PUSH
66620: LD_INT 0
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 1
66629: NEG
66630: PUSH
66631: LD_INT 1
66633: NEG
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 1
66641: NEG
66642: PUSH
66643: LD_INT 2
66645: NEG
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 0
66653: PUSH
66654: LD_INT 2
66656: NEG
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 1
66664: PUSH
66665: LD_INT 1
66667: NEG
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 2
66675: PUSH
66676: LD_INT 1
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 2
66685: PUSH
66686: LD_INT 2
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: LD_INT 1
66695: PUSH
66696: LD_INT 2
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 0
66705: PUSH
66706: LD_INT 2
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 1
66715: NEG
66716: PUSH
66717: LD_INT 1
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 2
66726: NEG
66727: PUSH
66728: LD_INT 1
66730: NEG
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 2
66738: NEG
66739: PUSH
66740: LD_INT 2
66742: NEG
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 2
66750: NEG
66751: PUSH
66752: LD_INT 3
66754: NEG
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 1
66762: NEG
66763: PUSH
66764: LD_INT 3
66766: NEG
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 0
66774: PUSH
66775: LD_INT 3
66777: NEG
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 1
66785: PUSH
66786: LD_INT 2
66788: NEG
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 3
66796: PUSH
66797: LD_INT 2
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 3
66806: PUSH
66807: LD_INT 3
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 2
66816: PUSH
66817: LD_INT 3
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 1
66826: PUSH
66827: LD_INT 3
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 0
66836: PUSH
66837: LD_INT 3
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 1
66846: NEG
66847: PUSH
66848: LD_INT 2
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: LD_INT 3
66857: NEG
66858: PUSH
66859: LD_INT 2
66861: NEG
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 3
66869: NEG
66870: PUSH
66871: LD_INT 3
66873: NEG
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66910: LD_ADDR_VAR 0 46
66914: PUSH
66915: LD_INT 0
66917: PUSH
66918: LD_INT 0
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 0
66927: PUSH
66928: LD_INT 1
66930: NEG
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 1
66938: PUSH
66939: LD_INT 0
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 1
66948: PUSH
66949: LD_INT 1
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 0
66958: PUSH
66959: LD_INT 1
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 1
66968: NEG
66969: PUSH
66970: LD_INT 0
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 1
66979: NEG
66980: PUSH
66981: LD_INT 1
66983: NEG
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 1
66991: NEG
66992: PUSH
66993: LD_INT 2
66995: NEG
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 0
67003: PUSH
67004: LD_INT 2
67006: NEG
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 1
67014: PUSH
67015: LD_INT 1
67017: NEG
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 2
67025: PUSH
67026: LD_INT 0
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 2
67035: PUSH
67036: LD_INT 1
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 1
67045: PUSH
67046: LD_INT 2
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 0
67055: PUSH
67056: LD_INT 2
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 1
67065: NEG
67066: PUSH
67067: LD_INT 1
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 2
67076: NEG
67077: PUSH
67078: LD_INT 0
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 2
67087: NEG
67088: PUSH
67089: LD_INT 1
67091: NEG
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 1
67099: NEG
67100: PUSH
67101: LD_INT 3
67103: NEG
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 0
67111: PUSH
67112: LD_INT 3
67114: NEG
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 1
67122: PUSH
67123: LD_INT 2
67125: NEG
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 2
67133: PUSH
67134: LD_INT 1
67136: NEG
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 3
67144: PUSH
67145: LD_INT 0
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 3
67154: PUSH
67155: LD_INT 1
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 1
67164: PUSH
67165: LD_INT 3
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 0
67174: PUSH
67175: LD_INT 3
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 1
67184: NEG
67185: PUSH
67186: LD_INT 2
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 2
67195: NEG
67196: PUSH
67197: LD_INT 1
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 3
67206: NEG
67207: PUSH
67208: LD_INT 0
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 3
67217: NEG
67218: PUSH
67219: LD_INT 1
67221: NEG
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67258: LD_ADDR_VAR 0 47
67262: PUSH
67263: LD_INT 0
67265: PUSH
67266: LD_INT 0
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 0
67275: PUSH
67276: LD_INT 1
67278: NEG
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 1
67286: PUSH
67287: LD_INT 0
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 1
67296: PUSH
67297: LD_INT 1
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 0
67306: PUSH
67307: LD_INT 1
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 1
67316: NEG
67317: PUSH
67318: LD_INT 0
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 1
67327: NEG
67328: PUSH
67329: LD_INT 1
67331: NEG
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 1
67339: NEG
67340: PUSH
67341: LD_INT 2
67343: NEG
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 0
67351: PUSH
67352: LD_INT 2
67354: NEG
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 1
67362: PUSH
67363: LD_INT 1
67365: NEG
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 2
67373: NEG
67374: PUSH
67375: LD_INT 1
67377: NEG
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 2
67385: NEG
67386: PUSH
67387: LD_INT 2
67389: NEG
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67409: LD_ADDR_VAR 0 48
67413: PUSH
67414: LD_INT 0
67416: PUSH
67417: LD_INT 0
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 0
67426: PUSH
67427: LD_INT 1
67429: NEG
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 1
67437: PUSH
67438: LD_INT 0
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 1
67447: PUSH
67448: LD_INT 1
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: LD_INT 1
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 1
67467: NEG
67468: PUSH
67469: LD_INT 0
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 1
67478: NEG
67479: PUSH
67480: LD_INT 1
67482: NEG
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 1
67490: NEG
67491: PUSH
67492: LD_INT 2
67494: NEG
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 0
67502: PUSH
67503: LD_INT 2
67505: NEG
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 1
67513: PUSH
67514: LD_INT 1
67516: NEG
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 2
67524: PUSH
67525: LD_INT 0
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 2
67534: PUSH
67535: LD_INT 1
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67556: LD_ADDR_VAR 0 49
67560: PUSH
67561: LD_INT 0
67563: PUSH
67564: LD_INT 0
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 0
67573: PUSH
67574: LD_INT 1
67576: NEG
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 1
67584: PUSH
67585: LD_INT 0
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 1
67594: PUSH
67595: LD_INT 1
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 0
67604: PUSH
67605: LD_INT 1
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 1
67614: NEG
67615: PUSH
67616: LD_INT 0
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 1
67625: NEG
67626: PUSH
67627: LD_INT 1
67629: NEG
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 1
67637: PUSH
67638: LD_INT 1
67640: NEG
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 2
67648: PUSH
67649: LD_INT 0
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 2
67658: PUSH
67659: LD_INT 1
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 2
67668: PUSH
67669: LD_INT 2
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 1
67678: PUSH
67679: LD_INT 2
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67700: LD_ADDR_VAR 0 50
67704: PUSH
67705: LD_INT 0
67707: PUSH
67708: LD_INT 0
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 0
67717: PUSH
67718: LD_INT 1
67720: NEG
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 1
67728: PUSH
67729: LD_INT 0
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 1
67738: PUSH
67739: LD_INT 1
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 0
67748: PUSH
67749: LD_INT 1
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 1
67758: NEG
67759: PUSH
67760: LD_INT 0
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 1
67769: NEG
67770: PUSH
67771: LD_INT 1
67773: NEG
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 2
67781: PUSH
67782: LD_INT 1
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 2
67791: PUSH
67792: LD_INT 2
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 1
67801: PUSH
67802: LD_INT 2
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 0
67811: PUSH
67812: LD_INT 2
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 1
67821: NEG
67822: PUSH
67823: LD_INT 1
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67844: LD_ADDR_VAR 0 51
67848: PUSH
67849: LD_INT 0
67851: PUSH
67852: LD_INT 0
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 0
67861: PUSH
67862: LD_INT 1
67864: NEG
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 1
67872: PUSH
67873: LD_INT 0
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 1
67882: PUSH
67883: LD_INT 1
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 0
67892: PUSH
67893: LD_INT 1
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 1
67902: NEG
67903: PUSH
67904: LD_INT 0
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 1
67913: NEG
67914: PUSH
67915: LD_INT 1
67917: NEG
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: LD_INT 1
67925: PUSH
67926: LD_INT 2
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 0
67935: PUSH
67936: LD_INT 2
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 1
67945: NEG
67946: PUSH
67947: LD_INT 1
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 2
67956: NEG
67957: PUSH
67958: LD_INT 0
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 2
67967: NEG
67968: PUSH
67969: LD_INT 1
67971: NEG
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67991: LD_ADDR_VAR 0 52
67995: PUSH
67996: LD_INT 0
67998: PUSH
67999: LD_INT 0
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 0
68008: PUSH
68009: LD_INT 1
68011: NEG
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 1
68019: PUSH
68020: LD_INT 0
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 1
68029: PUSH
68030: LD_INT 1
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 0
68039: PUSH
68040: LD_INT 1
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 1
68049: NEG
68050: PUSH
68051: LD_INT 0
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 1
68060: NEG
68061: PUSH
68062: LD_INT 1
68064: NEG
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 1
68072: NEG
68073: PUSH
68074: LD_INT 2
68076: NEG
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 1
68084: NEG
68085: PUSH
68086: LD_INT 1
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 2
68095: NEG
68096: PUSH
68097: LD_INT 0
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 2
68106: NEG
68107: PUSH
68108: LD_INT 1
68110: NEG
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 2
68118: NEG
68119: PUSH
68120: LD_INT 2
68122: NEG
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68142: LD_ADDR_VAR 0 53
68146: PUSH
68147: LD_INT 0
68149: PUSH
68150: LD_INT 0
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 0
68159: PUSH
68160: LD_INT 1
68162: NEG
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 1
68170: PUSH
68171: LD_INT 0
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 1
68180: PUSH
68181: LD_INT 1
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 0
68190: PUSH
68191: LD_INT 1
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 1
68200: NEG
68201: PUSH
68202: LD_INT 0
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 1
68211: NEG
68212: PUSH
68213: LD_INT 1
68215: NEG
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 1
68223: NEG
68224: PUSH
68225: LD_INT 2
68227: NEG
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 0
68235: PUSH
68236: LD_INT 2
68238: NEG
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 1
68246: PUSH
68247: LD_INT 1
68249: NEG
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 2
68257: PUSH
68258: LD_INT 0
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 2
68267: PUSH
68268: LD_INT 1
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 2
68277: PUSH
68278: LD_INT 2
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 1
68287: PUSH
68288: LD_INT 2
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 0
68297: PUSH
68298: LD_INT 2
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 1
68307: NEG
68308: PUSH
68309: LD_INT 1
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 2
68318: NEG
68319: PUSH
68320: LD_INT 0
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 2
68329: NEG
68330: PUSH
68331: LD_INT 1
68333: NEG
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 2
68341: NEG
68342: PUSH
68343: LD_INT 2
68345: NEG
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68372: LD_ADDR_VAR 0 54
68376: PUSH
68377: LD_INT 0
68379: PUSH
68380: LD_INT 0
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 0
68389: PUSH
68390: LD_INT 1
68392: NEG
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 1
68400: PUSH
68401: LD_INT 0
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 1
68410: PUSH
68411: LD_INT 1
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: LD_INT 0
68420: PUSH
68421: LD_INT 1
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_INT 1
68430: NEG
68431: PUSH
68432: LD_INT 0
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 1
68441: NEG
68442: PUSH
68443: LD_INT 1
68445: NEG
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 1
68453: NEG
68454: PUSH
68455: LD_INT 2
68457: NEG
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 0
68465: PUSH
68466: LD_INT 2
68468: NEG
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 1
68476: PUSH
68477: LD_INT 1
68479: NEG
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 2
68487: PUSH
68488: LD_INT 0
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 2
68497: PUSH
68498: LD_INT 1
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 2
68507: PUSH
68508: LD_INT 2
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 1
68517: PUSH
68518: LD_INT 2
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 0
68527: PUSH
68528: LD_INT 2
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 1
68537: NEG
68538: PUSH
68539: LD_INT 1
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 2
68548: NEG
68549: PUSH
68550: LD_INT 0
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 2
68559: NEG
68560: PUSH
68561: LD_INT 1
68563: NEG
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 2
68571: NEG
68572: PUSH
68573: LD_INT 2
68575: NEG
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68602: LD_ADDR_VAR 0 55
68606: PUSH
68607: LD_INT 0
68609: PUSH
68610: LD_INT 0
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 0
68619: PUSH
68620: LD_INT 1
68622: NEG
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 1
68630: PUSH
68631: LD_INT 0
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 1
68640: PUSH
68641: LD_INT 1
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 0
68650: PUSH
68651: LD_INT 1
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 1
68660: NEG
68661: PUSH
68662: LD_INT 0
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 1
68671: NEG
68672: PUSH
68673: LD_INT 1
68675: NEG
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 1
68683: NEG
68684: PUSH
68685: LD_INT 2
68687: NEG
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 0
68695: PUSH
68696: LD_INT 2
68698: NEG
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 1
68706: PUSH
68707: LD_INT 1
68709: NEG
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 2
68717: PUSH
68718: LD_INT 0
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 2
68727: PUSH
68728: LD_INT 1
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 2
68737: PUSH
68738: LD_INT 2
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 1
68747: PUSH
68748: LD_INT 2
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 0
68757: PUSH
68758: LD_INT 2
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 1
68767: NEG
68768: PUSH
68769: LD_INT 1
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 2
68778: NEG
68779: PUSH
68780: LD_INT 0
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 2
68789: NEG
68790: PUSH
68791: LD_INT 1
68793: NEG
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 2
68801: NEG
68802: PUSH
68803: LD_INT 2
68805: NEG
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68832: LD_ADDR_VAR 0 56
68836: PUSH
68837: LD_INT 0
68839: PUSH
68840: LD_INT 0
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 0
68849: PUSH
68850: LD_INT 1
68852: NEG
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 1
68860: PUSH
68861: LD_INT 0
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 1
68870: PUSH
68871: LD_INT 1
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 0
68880: PUSH
68881: LD_INT 1
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 1
68890: NEG
68891: PUSH
68892: LD_INT 0
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 1
68901: NEG
68902: PUSH
68903: LD_INT 1
68905: NEG
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 1
68913: NEG
68914: PUSH
68915: LD_INT 2
68917: NEG
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 0
68925: PUSH
68926: LD_INT 2
68928: NEG
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 1
68936: PUSH
68937: LD_INT 1
68939: NEG
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 2
68947: PUSH
68948: LD_INT 0
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: LD_INT 2
68957: PUSH
68958: LD_INT 1
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 2
68967: PUSH
68968: LD_INT 2
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 1
68977: PUSH
68978: LD_INT 2
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 0
68987: PUSH
68988: LD_INT 2
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 1
68997: NEG
68998: PUSH
68999: LD_INT 1
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 2
69008: NEG
69009: PUSH
69010: LD_INT 0
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 2
69019: NEG
69020: PUSH
69021: LD_INT 1
69023: NEG
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 2
69031: NEG
69032: PUSH
69033: LD_INT 2
69035: NEG
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69062: LD_ADDR_VAR 0 57
69066: PUSH
69067: LD_INT 0
69069: PUSH
69070: LD_INT 0
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 0
69079: PUSH
69080: LD_INT 1
69082: NEG
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 1
69090: PUSH
69091: LD_INT 0
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 1
69100: PUSH
69101: LD_INT 1
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 0
69110: PUSH
69111: LD_INT 1
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: LD_INT 1
69120: NEG
69121: PUSH
69122: LD_INT 0
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 1
69131: NEG
69132: PUSH
69133: LD_INT 1
69135: NEG
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 1
69143: NEG
69144: PUSH
69145: LD_INT 2
69147: NEG
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 0
69155: PUSH
69156: LD_INT 2
69158: NEG
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 1
69166: PUSH
69167: LD_INT 1
69169: NEG
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 2
69177: PUSH
69178: LD_INT 0
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 2
69187: PUSH
69188: LD_INT 1
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 2
69197: PUSH
69198: LD_INT 2
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 1
69207: PUSH
69208: LD_INT 2
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 0
69217: PUSH
69218: LD_INT 2
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 1
69227: NEG
69228: PUSH
69229: LD_INT 1
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 2
69238: NEG
69239: PUSH
69240: LD_INT 0
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 2
69249: NEG
69250: PUSH
69251: LD_INT 1
69253: NEG
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: LD_INT 2
69261: NEG
69262: PUSH
69263: LD_INT 2
69265: NEG
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69292: LD_ADDR_VAR 0 58
69296: PUSH
69297: LD_INT 0
69299: PUSH
69300: LD_INT 0
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 0
69309: PUSH
69310: LD_INT 1
69312: NEG
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PUSH
69318: LD_INT 1
69320: PUSH
69321: LD_INT 0
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: PUSH
69328: LD_INT 1
69330: PUSH
69331: LD_INT 1
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: LD_INT 0
69340: PUSH
69341: LD_INT 1
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 1
69350: NEG
69351: PUSH
69352: LD_INT 0
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 1
69361: NEG
69362: PUSH
69363: LD_INT 1
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 1
69373: NEG
69374: PUSH
69375: LD_INT 2
69377: NEG
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 0
69385: PUSH
69386: LD_INT 2
69388: NEG
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 1
69396: PUSH
69397: LD_INT 1
69399: NEG
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PUSH
69405: LD_INT 2
69407: PUSH
69408: LD_INT 0
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 2
69417: PUSH
69418: LD_INT 1
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: LD_INT 2
69427: PUSH
69428: LD_INT 2
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 1
69437: PUSH
69438: LD_INT 2
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: LD_INT 0
69447: PUSH
69448: LD_INT 2
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 1
69457: NEG
69458: PUSH
69459: LD_INT 1
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 2
69468: NEG
69469: PUSH
69470: LD_INT 0
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 2
69479: NEG
69480: PUSH
69481: LD_INT 1
69483: NEG
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 2
69491: NEG
69492: PUSH
69493: LD_INT 2
69495: NEG
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69522: LD_ADDR_VAR 0 59
69526: PUSH
69527: LD_INT 0
69529: PUSH
69530: LD_INT 0
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: LD_INT 0
69539: PUSH
69540: LD_INT 1
69542: NEG
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 1
69550: PUSH
69551: LD_INT 0
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: LD_INT 1
69560: PUSH
69561: LD_INT 1
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 0
69570: PUSH
69571: LD_INT 1
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 1
69580: NEG
69581: PUSH
69582: LD_INT 0
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 1
69591: NEG
69592: PUSH
69593: LD_INT 1
69595: NEG
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69610: LD_ADDR_VAR 0 60
69614: PUSH
69615: LD_INT 0
69617: PUSH
69618: LD_INT 0
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 0
69627: PUSH
69628: LD_INT 1
69630: NEG
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 1
69638: PUSH
69639: LD_INT 0
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: LD_INT 1
69648: PUSH
69649: LD_INT 1
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 0
69658: PUSH
69659: LD_INT 1
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 1
69668: NEG
69669: PUSH
69670: LD_INT 0
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 1
69679: NEG
69680: PUSH
69681: LD_INT 1
69683: NEG
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69698: LD_ADDR_VAR 0 61
69702: PUSH
69703: LD_INT 0
69705: PUSH
69706: LD_INT 0
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: PUSH
69713: LD_INT 0
69715: PUSH
69716: LD_INT 1
69718: NEG
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 1
69726: PUSH
69727: LD_INT 0
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: LD_INT 1
69736: PUSH
69737: LD_INT 1
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PUSH
69744: LD_INT 0
69746: PUSH
69747: LD_INT 1
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 1
69756: NEG
69757: PUSH
69758: LD_INT 0
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 1
69767: NEG
69768: PUSH
69769: LD_INT 1
69771: NEG
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69786: LD_ADDR_VAR 0 62
69790: PUSH
69791: LD_INT 0
69793: PUSH
69794: LD_INT 0
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 0
69803: PUSH
69804: LD_INT 1
69806: NEG
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 1
69814: PUSH
69815: LD_INT 0
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: LD_INT 1
69824: PUSH
69825: LD_INT 1
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 0
69834: PUSH
69835: LD_INT 1
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 1
69844: NEG
69845: PUSH
69846: LD_INT 0
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 1
69855: NEG
69856: PUSH
69857: LD_INT 1
69859: NEG
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69874: LD_ADDR_VAR 0 63
69878: PUSH
69879: LD_INT 0
69881: PUSH
69882: LD_INT 0
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 0
69891: PUSH
69892: LD_INT 1
69894: NEG
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 1
69902: PUSH
69903: LD_INT 0
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 1
69912: PUSH
69913: LD_INT 1
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 0
69922: PUSH
69923: LD_INT 1
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 1
69932: NEG
69933: PUSH
69934: LD_INT 0
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 1
69943: NEG
69944: PUSH
69945: LD_INT 1
69947: NEG
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69962: LD_ADDR_VAR 0 64
69966: PUSH
69967: LD_INT 0
69969: PUSH
69970: LD_INT 0
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: LD_INT 0
69979: PUSH
69980: LD_INT 1
69982: NEG
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 1
69990: PUSH
69991: LD_INT 0
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 1
70000: PUSH
70001: LD_INT 1
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 0
70010: PUSH
70011: LD_INT 1
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 1
70020: NEG
70021: PUSH
70022: LD_INT 0
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 1
70031: NEG
70032: PUSH
70033: LD_INT 1
70035: NEG
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: ST_TO_ADDR
// end ; 1 :
70050: GO 75947
70052: LD_INT 1
70054: DOUBLE
70055: EQUAL
70056: IFTRUE 70060
70058: GO 72683
70060: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70061: LD_ADDR_VAR 0 11
70065: PUSH
70066: LD_INT 1
70068: NEG
70069: PUSH
70070: LD_INT 3
70072: NEG
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 0
70080: PUSH
70081: LD_INT 3
70083: NEG
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 1
70091: PUSH
70092: LD_INT 2
70094: NEG
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: LIST
70104: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70105: LD_ADDR_VAR 0 12
70109: PUSH
70110: LD_INT 2
70112: PUSH
70113: LD_INT 1
70115: NEG
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 3
70123: PUSH
70124: LD_INT 0
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: LD_INT 3
70133: PUSH
70134: LD_INT 1
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: LIST
70145: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70146: LD_ADDR_VAR 0 13
70150: PUSH
70151: LD_INT 3
70153: PUSH
70154: LD_INT 2
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 3
70163: PUSH
70164: LD_INT 3
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 2
70173: PUSH
70174: LD_INT 3
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: LIST
70185: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70186: LD_ADDR_VAR 0 14
70190: PUSH
70191: LD_INT 1
70193: PUSH
70194: LD_INT 3
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 0
70203: PUSH
70204: LD_INT 3
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 1
70213: NEG
70214: PUSH
70215: LD_INT 2
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: LIST
70226: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70227: LD_ADDR_VAR 0 15
70231: PUSH
70232: LD_INT 2
70234: NEG
70235: PUSH
70236: LD_INT 1
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 3
70245: NEG
70246: PUSH
70247: LD_INT 0
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: PUSH
70254: LD_INT 3
70256: NEG
70257: PUSH
70258: LD_INT 1
70260: NEG
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: LIST
70270: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70271: LD_ADDR_VAR 0 16
70275: PUSH
70276: LD_INT 2
70278: NEG
70279: PUSH
70280: LD_INT 3
70282: NEG
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 3
70290: NEG
70291: PUSH
70292: LD_INT 2
70294: NEG
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: LD_INT 3
70302: NEG
70303: PUSH
70304: LD_INT 3
70306: NEG
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: LIST
70316: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70317: LD_ADDR_VAR 0 17
70321: PUSH
70322: LD_INT 1
70324: NEG
70325: PUSH
70326: LD_INT 3
70328: NEG
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 0
70336: PUSH
70337: LD_INT 3
70339: NEG
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PUSH
70345: LD_INT 1
70347: PUSH
70348: LD_INT 2
70350: NEG
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: LIST
70360: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70361: LD_ADDR_VAR 0 18
70365: PUSH
70366: LD_INT 2
70368: PUSH
70369: LD_INT 1
70371: NEG
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: LD_INT 3
70379: PUSH
70380: LD_INT 0
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: LD_INT 3
70389: PUSH
70390: LD_INT 1
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: LIST
70401: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70402: LD_ADDR_VAR 0 19
70406: PUSH
70407: LD_INT 3
70409: PUSH
70410: LD_INT 2
70412: PUSH
70413: EMPTY
70414: LIST
70415: LIST
70416: PUSH
70417: LD_INT 3
70419: PUSH
70420: LD_INT 3
70422: PUSH
70423: EMPTY
70424: LIST
70425: LIST
70426: PUSH
70427: LD_INT 2
70429: PUSH
70430: LD_INT 3
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: LIST
70441: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70442: LD_ADDR_VAR 0 20
70446: PUSH
70447: LD_INT 1
70449: PUSH
70450: LD_INT 3
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: LD_INT 0
70459: PUSH
70460: LD_INT 3
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 1
70469: NEG
70470: PUSH
70471: LD_INT 2
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: LIST
70482: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70483: LD_ADDR_VAR 0 21
70487: PUSH
70488: LD_INT 2
70490: NEG
70491: PUSH
70492: LD_INT 1
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: PUSH
70499: LD_INT 3
70501: NEG
70502: PUSH
70503: LD_INT 0
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 3
70512: NEG
70513: PUSH
70514: LD_INT 1
70516: NEG
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: LIST
70526: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70527: LD_ADDR_VAR 0 22
70531: PUSH
70532: LD_INT 2
70534: NEG
70535: PUSH
70536: LD_INT 3
70538: NEG
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 3
70546: NEG
70547: PUSH
70548: LD_INT 2
70550: NEG
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: PUSH
70556: LD_INT 3
70558: NEG
70559: PUSH
70560: LD_INT 3
70562: NEG
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: LIST
70572: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
70573: LD_ADDR_VAR 0 23
70577: PUSH
70578: LD_INT 0
70580: PUSH
70581: LD_INT 3
70583: NEG
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 1
70591: NEG
70592: PUSH
70593: LD_INT 4
70595: NEG
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 1
70603: PUSH
70604: LD_INT 3
70606: NEG
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: EMPTY
70613: LIST
70614: LIST
70615: LIST
70616: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
70617: LD_ADDR_VAR 0 24
70621: PUSH
70622: LD_INT 3
70624: PUSH
70625: LD_INT 0
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 3
70634: PUSH
70635: LD_INT 1
70637: NEG
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 4
70645: PUSH
70646: LD_INT 1
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: LIST
70657: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
70658: LD_ADDR_VAR 0 25
70662: PUSH
70663: LD_INT 3
70665: PUSH
70666: LD_INT 3
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: PUSH
70673: LD_INT 4
70675: PUSH
70676: LD_INT 3
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: LD_INT 3
70685: PUSH
70686: LD_INT 4
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: LIST
70697: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
70698: LD_ADDR_VAR 0 26
70702: PUSH
70703: LD_INT 0
70705: PUSH
70706: LD_INT 3
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 1
70715: PUSH
70716: LD_INT 4
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: PUSH
70723: LD_INT 1
70725: NEG
70726: PUSH
70727: LD_INT 3
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: LIST
70738: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
70739: LD_ADDR_VAR 0 27
70743: PUSH
70744: LD_INT 3
70746: NEG
70747: PUSH
70748: LD_INT 0
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: LD_INT 3
70757: NEG
70758: PUSH
70759: LD_INT 1
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 4
70768: NEG
70769: PUSH
70770: LD_INT 1
70772: NEG
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: LIST
70782: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
70783: LD_ADDR_VAR 0 28
70787: PUSH
70788: LD_INT 3
70790: NEG
70791: PUSH
70792: LD_INT 3
70794: NEG
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PUSH
70800: LD_INT 3
70802: NEG
70803: PUSH
70804: LD_INT 4
70806: NEG
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: PUSH
70812: LD_INT 4
70814: NEG
70815: PUSH
70816: LD_INT 3
70818: NEG
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: EMPTY
70825: LIST
70826: LIST
70827: LIST
70828: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
70829: LD_ADDR_VAR 0 29
70833: PUSH
70834: LD_INT 1
70836: NEG
70837: PUSH
70838: LD_INT 3
70840: NEG
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: PUSH
70846: LD_INT 0
70848: PUSH
70849: LD_INT 3
70851: NEG
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PUSH
70857: LD_INT 1
70859: PUSH
70860: LD_INT 2
70862: NEG
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: LD_INT 1
70870: NEG
70871: PUSH
70872: LD_INT 4
70874: NEG
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: LD_INT 0
70882: PUSH
70883: LD_INT 4
70885: NEG
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_INT 1
70893: PUSH
70894: LD_INT 3
70896: NEG
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: LD_INT 1
70904: NEG
70905: PUSH
70906: LD_INT 5
70908: NEG
70909: PUSH
70910: EMPTY
70911: LIST
70912: LIST
70913: PUSH
70914: LD_INT 0
70916: PUSH
70917: LD_INT 5
70919: NEG
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: PUSH
70925: LD_INT 1
70927: PUSH
70928: LD_INT 4
70930: NEG
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 1
70938: NEG
70939: PUSH
70940: LD_INT 6
70942: NEG
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: PUSH
70948: LD_INT 0
70950: PUSH
70951: LD_INT 6
70953: NEG
70954: PUSH
70955: EMPTY
70956: LIST
70957: LIST
70958: PUSH
70959: LD_INT 1
70961: PUSH
70962: LD_INT 5
70964: NEG
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
70984: LD_ADDR_VAR 0 30
70988: PUSH
70989: LD_INT 2
70991: PUSH
70992: LD_INT 1
70994: NEG
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 3
71002: PUSH
71003: LD_INT 0
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 3
71012: PUSH
71013: LD_INT 1
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: LD_INT 3
71022: PUSH
71023: LD_INT 1
71025: NEG
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 4
71033: PUSH
71034: LD_INT 0
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 4
71043: PUSH
71044: LD_INT 1
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: PUSH
71051: LD_INT 4
71053: PUSH
71054: LD_INT 1
71056: NEG
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: PUSH
71062: LD_INT 5
71064: PUSH
71065: LD_INT 0
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 5
71074: PUSH
71075: LD_INT 1
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: PUSH
71082: LD_INT 5
71084: PUSH
71085: LD_INT 1
71087: NEG
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: PUSH
71093: LD_INT 6
71095: PUSH
71096: LD_INT 0
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: PUSH
71103: LD_INT 6
71105: PUSH
71106: LD_INT 1
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: LIST
71126: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
71127: LD_ADDR_VAR 0 31
71131: PUSH
71132: LD_INT 3
71134: PUSH
71135: LD_INT 2
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PUSH
71142: LD_INT 3
71144: PUSH
71145: LD_INT 3
71147: PUSH
71148: EMPTY
71149: LIST
71150: LIST
71151: PUSH
71152: LD_INT 2
71154: PUSH
71155: LD_INT 3
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: PUSH
71162: LD_INT 4
71164: PUSH
71165: LD_INT 3
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: LD_INT 4
71174: PUSH
71175: LD_INT 4
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PUSH
71182: LD_INT 3
71184: PUSH
71185: LD_INT 4
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PUSH
71192: LD_INT 5
71194: PUSH
71195: LD_INT 4
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: PUSH
71202: LD_INT 5
71204: PUSH
71205: LD_INT 5
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: PUSH
71212: LD_INT 4
71214: PUSH
71215: LD_INT 5
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: LD_INT 6
71224: PUSH
71225: LD_INT 5
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: LD_INT 6
71234: PUSH
71235: LD_INT 6
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: PUSH
71242: LD_INT 5
71244: PUSH
71245: LD_INT 6
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: LIST
71265: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
71266: LD_ADDR_VAR 0 32
71270: PUSH
71271: LD_INT 1
71273: PUSH
71274: LD_INT 3
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: PUSH
71281: LD_INT 0
71283: PUSH
71284: LD_INT 3
71286: PUSH
71287: EMPTY
71288: LIST
71289: LIST
71290: PUSH
71291: LD_INT 1
71293: NEG
71294: PUSH
71295: LD_INT 2
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: LD_INT 1
71304: PUSH
71305: LD_INT 4
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: LD_INT 0
71314: PUSH
71315: LD_INT 4
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 1
71324: NEG
71325: PUSH
71326: LD_INT 3
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: PUSH
71333: LD_INT 1
71335: PUSH
71336: LD_INT 5
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: LD_INT 0
71345: PUSH
71346: LD_INT 5
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: LD_INT 1
71355: NEG
71356: PUSH
71357: LD_INT 4
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: PUSH
71364: LD_INT 1
71366: PUSH
71367: LD_INT 6
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: PUSH
71374: LD_INT 0
71376: PUSH
71377: LD_INT 6
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PUSH
71384: LD_INT 1
71386: NEG
71387: PUSH
71388: LD_INT 5
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
71409: LD_ADDR_VAR 0 33
71413: PUSH
71414: LD_INT 2
71416: NEG
71417: PUSH
71418: LD_INT 1
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: PUSH
71425: LD_INT 3
71427: NEG
71428: PUSH
71429: LD_INT 0
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: PUSH
71436: LD_INT 3
71438: NEG
71439: PUSH
71440: LD_INT 1
71442: NEG
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 3
71450: NEG
71451: PUSH
71452: LD_INT 1
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: LD_INT 4
71461: NEG
71462: PUSH
71463: LD_INT 0
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 4
71472: NEG
71473: PUSH
71474: LD_INT 1
71476: NEG
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: LD_INT 4
71484: NEG
71485: PUSH
71486: LD_INT 1
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 5
71495: NEG
71496: PUSH
71497: LD_INT 0
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: LD_INT 5
71506: NEG
71507: PUSH
71508: LD_INT 1
71510: NEG
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 5
71518: NEG
71519: PUSH
71520: LD_INT 1
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_INT 6
71529: NEG
71530: PUSH
71531: LD_INT 0
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: PUSH
71538: LD_INT 6
71540: NEG
71541: PUSH
71542: LD_INT 1
71544: NEG
71545: PUSH
71546: EMPTY
71547: LIST
71548: LIST
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
71564: LD_ADDR_VAR 0 34
71568: PUSH
71569: LD_INT 2
71571: NEG
71572: PUSH
71573: LD_INT 3
71575: NEG
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PUSH
71581: LD_INT 3
71583: NEG
71584: PUSH
71585: LD_INT 2
71587: NEG
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: LD_INT 3
71595: NEG
71596: PUSH
71597: LD_INT 3
71599: NEG
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 3
71607: NEG
71608: PUSH
71609: LD_INT 4
71611: NEG
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 4
71619: NEG
71620: PUSH
71621: LD_INT 3
71623: NEG
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PUSH
71629: LD_INT 4
71631: NEG
71632: PUSH
71633: LD_INT 4
71635: NEG
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: PUSH
71641: LD_INT 4
71643: NEG
71644: PUSH
71645: LD_INT 5
71647: NEG
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 5
71655: NEG
71656: PUSH
71657: LD_INT 4
71659: NEG
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: LD_INT 5
71667: NEG
71668: PUSH
71669: LD_INT 5
71671: NEG
71672: PUSH
71673: EMPTY
71674: LIST
71675: LIST
71676: PUSH
71677: LD_INT 5
71679: NEG
71680: PUSH
71681: LD_INT 6
71683: NEG
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PUSH
71689: LD_INT 6
71691: NEG
71692: PUSH
71693: LD_INT 5
71695: NEG
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 6
71703: NEG
71704: PUSH
71705: LD_INT 6
71707: NEG
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
71727: LD_ADDR_VAR 0 41
71731: PUSH
71732: LD_INT 0
71734: PUSH
71735: LD_INT 2
71737: NEG
71738: PUSH
71739: EMPTY
71740: LIST
71741: LIST
71742: PUSH
71743: LD_INT 1
71745: NEG
71746: PUSH
71747: LD_INT 3
71749: NEG
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_INT 1
71757: PUSH
71758: LD_INT 2
71760: NEG
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: LIST
71770: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
71771: LD_ADDR_VAR 0 42
71775: PUSH
71776: LD_INT 2
71778: PUSH
71779: LD_INT 0
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: PUSH
71786: LD_INT 2
71788: PUSH
71789: LD_INT 1
71791: NEG
71792: PUSH
71793: EMPTY
71794: LIST
71795: LIST
71796: PUSH
71797: LD_INT 3
71799: PUSH
71800: LD_INT 1
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: LIST
71811: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
71812: LD_ADDR_VAR 0 43
71816: PUSH
71817: LD_INT 2
71819: PUSH
71820: LD_INT 2
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: PUSH
71827: LD_INT 3
71829: PUSH
71830: LD_INT 2
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: PUSH
71837: LD_INT 2
71839: PUSH
71840: LD_INT 3
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: LIST
71851: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
71852: LD_ADDR_VAR 0 44
71856: PUSH
71857: LD_INT 0
71859: PUSH
71860: LD_INT 2
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: PUSH
71867: LD_INT 1
71869: PUSH
71870: LD_INT 3
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PUSH
71877: LD_INT 1
71879: NEG
71880: PUSH
71881: LD_INT 2
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: LIST
71892: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71893: LD_ADDR_VAR 0 45
71897: PUSH
71898: LD_INT 2
71900: NEG
71901: PUSH
71902: LD_INT 0
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: LD_INT 2
71911: NEG
71912: PUSH
71913: LD_INT 1
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: PUSH
71920: LD_INT 3
71922: NEG
71923: PUSH
71924: LD_INT 1
71926: NEG
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: LIST
71936: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
71937: LD_ADDR_VAR 0 46
71941: PUSH
71942: LD_INT 2
71944: NEG
71945: PUSH
71946: LD_INT 2
71948: NEG
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: PUSH
71954: LD_INT 2
71956: NEG
71957: PUSH
71958: LD_INT 3
71960: NEG
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: PUSH
71966: LD_INT 3
71968: NEG
71969: PUSH
71970: LD_INT 2
71972: NEG
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: LIST
71982: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
71983: LD_ADDR_VAR 0 47
71987: PUSH
71988: LD_INT 2
71990: NEG
71991: PUSH
71992: LD_INT 3
71994: NEG
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: PUSH
72000: LD_INT 1
72002: NEG
72003: PUSH
72004: LD_INT 3
72006: NEG
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
72016: LD_ADDR_VAR 0 48
72020: PUSH
72021: LD_INT 1
72023: PUSH
72024: LD_INT 2
72026: NEG
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: PUSH
72032: LD_INT 2
72034: PUSH
72035: LD_INT 1
72037: NEG
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
72047: LD_ADDR_VAR 0 49
72051: PUSH
72052: LD_INT 3
72054: PUSH
72055: LD_INT 1
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: LD_INT 3
72064: PUSH
72065: LD_INT 2
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
72076: LD_ADDR_VAR 0 50
72080: PUSH
72081: LD_INT 2
72083: PUSH
72084: LD_INT 3
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: PUSH
72091: LD_INT 1
72093: PUSH
72094: LD_INT 3
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
72105: LD_ADDR_VAR 0 51
72109: PUSH
72110: LD_INT 1
72112: NEG
72113: PUSH
72114: LD_INT 2
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: PUSH
72121: LD_INT 2
72123: NEG
72124: PUSH
72125: LD_INT 1
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
72136: LD_ADDR_VAR 0 52
72140: PUSH
72141: LD_INT 3
72143: NEG
72144: PUSH
72145: LD_INT 1
72147: NEG
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: PUSH
72153: LD_INT 3
72155: NEG
72156: PUSH
72157: LD_INT 2
72159: NEG
72160: PUSH
72161: EMPTY
72162: LIST
72163: LIST
72164: PUSH
72165: EMPTY
72166: LIST
72167: LIST
72168: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72169: LD_ADDR_VAR 0 53
72173: PUSH
72174: LD_INT 1
72176: NEG
72177: PUSH
72178: LD_INT 3
72180: NEG
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: LD_INT 0
72188: PUSH
72189: LD_INT 3
72191: NEG
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: PUSH
72197: LD_INT 1
72199: PUSH
72200: LD_INT 2
72202: NEG
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: EMPTY
72209: LIST
72210: LIST
72211: LIST
72212: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72213: LD_ADDR_VAR 0 54
72217: PUSH
72218: LD_INT 2
72220: PUSH
72221: LD_INT 1
72223: NEG
72224: PUSH
72225: EMPTY
72226: LIST
72227: LIST
72228: PUSH
72229: LD_INT 3
72231: PUSH
72232: LD_INT 0
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: PUSH
72239: LD_INT 3
72241: PUSH
72242: LD_INT 1
72244: PUSH
72245: EMPTY
72246: LIST
72247: LIST
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: LIST
72253: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72254: LD_ADDR_VAR 0 55
72258: PUSH
72259: LD_INT 3
72261: PUSH
72262: LD_INT 2
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: PUSH
72269: LD_INT 3
72271: PUSH
72272: LD_INT 3
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 2
72281: PUSH
72282: LD_INT 3
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: LIST
72293: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72294: LD_ADDR_VAR 0 56
72298: PUSH
72299: LD_INT 1
72301: PUSH
72302: LD_INT 3
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: LD_INT 0
72311: PUSH
72312: LD_INT 3
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: PUSH
72319: LD_INT 1
72321: NEG
72322: PUSH
72323: LD_INT 2
72325: PUSH
72326: EMPTY
72327: LIST
72328: LIST
72329: PUSH
72330: EMPTY
72331: LIST
72332: LIST
72333: LIST
72334: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72335: LD_ADDR_VAR 0 57
72339: PUSH
72340: LD_INT 2
72342: NEG
72343: PUSH
72344: LD_INT 1
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PUSH
72351: LD_INT 3
72353: NEG
72354: PUSH
72355: LD_INT 0
72357: PUSH
72358: EMPTY
72359: LIST
72360: LIST
72361: PUSH
72362: LD_INT 3
72364: NEG
72365: PUSH
72366: LD_INT 1
72368: NEG
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: LIST
72378: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72379: LD_ADDR_VAR 0 58
72383: PUSH
72384: LD_INT 2
72386: NEG
72387: PUSH
72388: LD_INT 3
72390: NEG
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 3
72398: NEG
72399: PUSH
72400: LD_INT 2
72402: NEG
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 3
72410: NEG
72411: PUSH
72412: LD_INT 3
72414: NEG
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: EMPTY
72421: LIST
72422: LIST
72423: LIST
72424: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
72425: LD_ADDR_VAR 0 59
72429: PUSH
72430: LD_INT 1
72432: NEG
72433: PUSH
72434: LD_INT 2
72436: NEG
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 0
72444: PUSH
72445: LD_INT 2
72447: NEG
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: PUSH
72453: LD_INT 1
72455: PUSH
72456: LD_INT 1
72458: NEG
72459: PUSH
72460: EMPTY
72461: LIST
72462: LIST
72463: PUSH
72464: EMPTY
72465: LIST
72466: LIST
72467: LIST
72468: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
72469: LD_ADDR_VAR 0 60
72473: PUSH
72474: LD_INT 1
72476: PUSH
72477: LD_INT 1
72479: NEG
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: PUSH
72485: LD_INT 2
72487: PUSH
72488: LD_INT 0
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: PUSH
72495: LD_INT 2
72497: PUSH
72498: LD_INT 1
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: PUSH
72505: EMPTY
72506: LIST
72507: LIST
72508: LIST
72509: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
72510: LD_ADDR_VAR 0 61
72514: PUSH
72515: LD_INT 2
72517: PUSH
72518: LD_INT 1
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: PUSH
72525: LD_INT 2
72527: PUSH
72528: LD_INT 2
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: PUSH
72535: LD_INT 1
72537: PUSH
72538: LD_INT 2
72540: PUSH
72541: EMPTY
72542: LIST
72543: LIST
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: LIST
72549: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
72550: LD_ADDR_VAR 0 62
72554: PUSH
72555: LD_INT 1
72557: PUSH
72558: LD_INT 2
72560: PUSH
72561: EMPTY
72562: LIST
72563: LIST
72564: PUSH
72565: LD_INT 0
72567: PUSH
72568: LD_INT 2
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: PUSH
72575: LD_INT 1
72577: NEG
72578: PUSH
72579: LD_INT 1
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: LIST
72590: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72591: LD_ADDR_VAR 0 63
72595: PUSH
72596: LD_INT 1
72598: NEG
72599: PUSH
72600: LD_INT 1
72602: PUSH
72603: EMPTY
72604: LIST
72605: LIST
72606: PUSH
72607: LD_INT 2
72609: NEG
72610: PUSH
72611: LD_INT 0
72613: PUSH
72614: EMPTY
72615: LIST
72616: LIST
72617: PUSH
72618: LD_INT 2
72620: NEG
72621: PUSH
72622: LD_INT 1
72624: NEG
72625: PUSH
72626: EMPTY
72627: LIST
72628: LIST
72629: PUSH
72630: EMPTY
72631: LIST
72632: LIST
72633: LIST
72634: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72635: LD_ADDR_VAR 0 64
72639: PUSH
72640: LD_INT 1
72642: NEG
72643: PUSH
72644: LD_INT 2
72646: NEG
72647: PUSH
72648: EMPTY
72649: LIST
72650: LIST
72651: PUSH
72652: LD_INT 2
72654: NEG
72655: PUSH
72656: LD_INT 1
72658: NEG
72659: PUSH
72660: EMPTY
72661: LIST
72662: LIST
72663: PUSH
72664: LD_INT 2
72666: NEG
72667: PUSH
72668: LD_INT 2
72670: NEG
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: PUSH
72676: EMPTY
72677: LIST
72678: LIST
72679: LIST
72680: ST_TO_ADDR
// end ; 2 :
72681: GO 75947
72683: LD_INT 2
72685: DOUBLE
72686: EQUAL
72687: IFTRUE 72691
72689: GO 75946
72691: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
72692: LD_ADDR_VAR 0 29
72696: PUSH
72697: LD_INT 4
72699: PUSH
72700: LD_INT 0
72702: PUSH
72703: EMPTY
72704: LIST
72705: LIST
72706: PUSH
72707: LD_INT 4
72709: PUSH
72710: LD_INT 1
72712: NEG
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: PUSH
72718: LD_INT 5
72720: PUSH
72721: LD_INT 0
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: PUSH
72728: LD_INT 5
72730: PUSH
72731: LD_INT 1
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PUSH
72738: LD_INT 4
72740: PUSH
72741: LD_INT 1
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 3
72750: PUSH
72751: LD_INT 0
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PUSH
72758: LD_INT 3
72760: PUSH
72761: LD_INT 1
72763: NEG
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 3
72771: PUSH
72772: LD_INT 2
72774: NEG
72775: PUSH
72776: EMPTY
72777: LIST
72778: LIST
72779: PUSH
72780: LD_INT 5
72782: PUSH
72783: LD_INT 2
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: PUSH
72790: LD_INT 3
72792: PUSH
72793: LD_INT 3
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: PUSH
72800: LD_INT 3
72802: PUSH
72803: LD_INT 2
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: PUSH
72810: LD_INT 4
72812: PUSH
72813: LD_INT 3
72815: PUSH
72816: EMPTY
72817: LIST
72818: LIST
72819: PUSH
72820: LD_INT 4
72822: PUSH
72823: LD_INT 4
72825: PUSH
72826: EMPTY
72827: LIST
72828: LIST
72829: PUSH
72830: LD_INT 3
72832: PUSH
72833: LD_INT 4
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: PUSH
72840: LD_INT 2
72842: PUSH
72843: LD_INT 3
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: PUSH
72850: LD_INT 2
72852: PUSH
72853: LD_INT 2
72855: PUSH
72856: EMPTY
72857: LIST
72858: LIST
72859: PUSH
72860: LD_INT 4
72862: PUSH
72863: LD_INT 2
72865: PUSH
72866: EMPTY
72867: LIST
72868: LIST
72869: PUSH
72870: LD_INT 2
72872: PUSH
72873: LD_INT 4
72875: PUSH
72876: EMPTY
72877: LIST
72878: LIST
72879: PUSH
72880: LD_INT 0
72882: PUSH
72883: LD_INT 4
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: PUSH
72890: LD_INT 0
72892: PUSH
72893: LD_INT 3
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: PUSH
72900: LD_INT 1
72902: PUSH
72903: LD_INT 4
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: PUSH
72910: LD_INT 1
72912: PUSH
72913: LD_INT 5
72915: PUSH
72916: EMPTY
72917: LIST
72918: LIST
72919: PUSH
72920: LD_INT 0
72922: PUSH
72923: LD_INT 5
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: PUSH
72930: LD_INT 1
72932: NEG
72933: PUSH
72934: LD_INT 4
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PUSH
72941: LD_INT 1
72943: NEG
72944: PUSH
72945: LD_INT 3
72947: PUSH
72948: EMPTY
72949: LIST
72950: LIST
72951: PUSH
72952: LD_INT 2
72954: PUSH
72955: LD_INT 5
72957: PUSH
72958: EMPTY
72959: LIST
72960: LIST
72961: PUSH
72962: LD_INT 2
72964: NEG
72965: PUSH
72966: LD_INT 3
72968: PUSH
72969: EMPTY
72970: LIST
72971: LIST
72972: PUSH
72973: LD_INT 3
72975: NEG
72976: PUSH
72977: LD_INT 0
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: PUSH
72984: LD_INT 3
72986: NEG
72987: PUSH
72988: LD_INT 1
72990: NEG
72991: PUSH
72992: EMPTY
72993: LIST
72994: LIST
72995: PUSH
72996: LD_INT 2
72998: NEG
72999: PUSH
73000: LD_INT 0
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PUSH
73007: LD_INT 2
73009: NEG
73010: PUSH
73011: LD_INT 1
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: LD_INT 3
73020: NEG
73021: PUSH
73022: LD_INT 1
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: PUSH
73029: LD_INT 4
73031: NEG
73032: PUSH
73033: LD_INT 0
73035: PUSH
73036: EMPTY
73037: LIST
73038: LIST
73039: PUSH
73040: LD_INT 4
73042: NEG
73043: PUSH
73044: LD_INT 1
73046: NEG
73047: PUSH
73048: EMPTY
73049: LIST
73050: LIST
73051: PUSH
73052: LD_INT 4
73054: NEG
73055: PUSH
73056: LD_INT 2
73058: NEG
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: PUSH
73064: LD_INT 2
73066: NEG
73067: PUSH
73068: LD_INT 2
73070: PUSH
73071: EMPTY
73072: LIST
73073: LIST
73074: PUSH
73075: LD_INT 4
73077: NEG
73078: PUSH
73079: LD_INT 4
73081: NEG
73082: PUSH
73083: EMPTY
73084: LIST
73085: LIST
73086: PUSH
73087: LD_INT 4
73089: NEG
73090: PUSH
73091: LD_INT 5
73093: NEG
73094: PUSH
73095: EMPTY
73096: LIST
73097: LIST
73098: PUSH
73099: LD_INT 3
73101: NEG
73102: PUSH
73103: LD_INT 4
73105: NEG
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PUSH
73111: LD_INT 3
73113: NEG
73114: PUSH
73115: LD_INT 3
73117: NEG
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: PUSH
73123: LD_INT 4
73125: NEG
73126: PUSH
73127: LD_INT 3
73129: NEG
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: PUSH
73135: LD_INT 5
73137: NEG
73138: PUSH
73139: LD_INT 4
73141: NEG
73142: PUSH
73143: EMPTY
73144: LIST
73145: LIST
73146: PUSH
73147: LD_INT 5
73149: NEG
73150: PUSH
73151: LD_INT 5
73153: NEG
73154: PUSH
73155: EMPTY
73156: LIST
73157: LIST
73158: PUSH
73159: LD_INT 3
73161: NEG
73162: PUSH
73163: LD_INT 5
73165: NEG
73166: PUSH
73167: EMPTY
73168: LIST
73169: LIST
73170: PUSH
73171: LD_INT 5
73173: NEG
73174: PUSH
73175: LD_INT 3
73177: NEG
73178: PUSH
73179: EMPTY
73180: LIST
73181: LIST
73182: PUSH
73183: EMPTY
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: LIST
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: LIST
73229: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
73230: LD_ADDR_VAR 0 30
73234: PUSH
73235: LD_INT 4
73237: PUSH
73238: LD_INT 4
73240: PUSH
73241: EMPTY
73242: LIST
73243: LIST
73244: PUSH
73245: LD_INT 4
73247: PUSH
73248: LD_INT 3
73250: PUSH
73251: EMPTY
73252: LIST
73253: LIST
73254: PUSH
73255: LD_INT 5
73257: PUSH
73258: LD_INT 4
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: PUSH
73265: LD_INT 5
73267: PUSH
73268: LD_INT 5
73270: PUSH
73271: EMPTY
73272: LIST
73273: LIST
73274: PUSH
73275: LD_INT 4
73277: PUSH
73278: LD_INT 5
73280: PUSH
73281: EMPTY
73282: LIST
73283: LIST
73284: PUSH
73285: LD_INT 3
73287: PUSH
73288: LD_INT 4
73290: PUSH
73291: EMPTY
73292: LIST
73293: LIST
73294: PUSH
73295: LD_INT 3
73297: PUSH
73298: LD_INT 3
73300: PUSH
73301: EMPTY
73302: LIST
73303: LIST
73304: PUSH
73305: LD_INT 5
73307: PUSH
73308: LD_INT 3
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: PUSH
73315: LD_INT 3
73317: PUSH
73318: LD_INT 5
73320: PUSH
73321: EMPTY
73322: LIST
73323: LIST
73324: PUSH
73325: LD_INT 0
73327: PUSH
73328: LD_INT 3
73330: PUSH
73331: EMPTY
73332: LIST
73333: LIST
73334: PUSH
73335: LD_INT 0
73337: PUSH
73338: LD_INT 2
73340: PUSH
73341: EMPTY
73342: LIST
73343: LIST
73344: PUSH
73345: LD_INT 1
73347: PUSH
73348: LD_INT 3
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: PUSH
73355: LD_INT 1
73357: PUSH
73358: LD_INT 4
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: PUSH
73365: LD_INT 0
73367: PUSH
73368: LD_INT 4
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: PUSH
73375: LD_INT 1
73377: NEG
73378: PUSH
73379: LD_INT 3
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: PUSH
73386: LD_INT 1
73388: NEG
73389: PUSH
73390: LD_INT 2
73392: PUSH
73393: EMPTY
73394: LIST
73395: LIST
73396: PUSH
73397: LD_INT 2
73399: PUSH
73400: LD_INT 4
73402: PUSH
73403: EMPTY
73404: LIST
73405: LIST
73406: PUSH
73407: LD_INT 2
73409: NEG
73410: PUSH
73411: LD_INT 2
73413: PUSH
73414: EMPTY
73415: LIST
73416: LIST
73417: PUSH
73418: LD_INT 4
73420: NEG
73421: PUSH
73422: LD_INT 0
73424: PUSH
73425: EMPTY
73426: LIST
73427: LIST
73428: PUSH
73429: LD_INT 4
73431: NEG
73432: PUSH
73433: LD_INT 1
73435: NEG
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: PUSH
73441: LD_INT 3
73443: NEG
73444: PUSH
73445: LD_INT 0
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: PUSH
73452: LD_INT 3
73454: NEG
73455: PUSH
73456: LD_INT 1
73458: PUSH
73459: EMPTY
73460: LIST
73461: LIST
73462: PUSH
73463: LD_INT 4
73465: NEG
73466: PUSH
73467: LD_INT 1
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: PUSH
73474: LD_INT 5
73476: NEG
73477: PUSH
73478: LD_INT 0
73480: PUSH
73481: EMPTY
73482: LIST
73483: LIST
73484: PUSH
73485: LD_INT 5
73487: NEG
73488: PUSH
73489: LD_INT 1
73491: NEG
73492: PUSH
73493: EMPTY
73494: LIST
73495: LIST
73496: PUSH
73497: LD_INT 5
73499: NEG
73500: PUSH
73501: LD_INT 2
73503: NEG
73504: PUSH
73505: EMPTY
73506: LIST
73507: LIST
73508: PUSH
73509: LD_INT 3
73511: NEG
73512: PUSH
73513: LD_INT 2
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: PUSH
73520: LD_INT 3
73522: NEG
73523: PUSH
73524: LD_INT 3
73526: NEG
73527: PUSH
73528: EMPTY
73529: LIST
73530: LIST
73531: PUSH
73532: LD_INT 3
73534: NEG
73535: PUSH
73536: LD_INT 4
73538: NEG
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: PUSH
73544: LD_INT 2
73546: NEG
73547: PUSH
73548: LD_INT 3
73550: NEG
73551: PUSH
73552: EMPTY
73553: LIST
73554: LIST
73555: PUSH
73556: LD_INT 2
73558: NEG
73559: PUSH
73560: LD_INT 2
73562: NEG
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: PUSH
73568: LD_INT 3
73570: NEG
73571: PUSH
73572: LD_INT 2
73574: NEG
73575: PUSH
73576: EMPTY
73577: LIST
73578: LIST
73579: PUSH
73580: LD_INT 4
73582: NEG
73583: PUSH
73584: LD_INT 3
73586: NEG
73587: PUSH
73588: EMPTY
73589: LIST
73590: LIST
73591: PUSH
73592: LD_INT 4
73594: NEG
73595: PUSH
73596: LD_INT 4
73598: NEG
73599: PUSH
73600: EMPTY
73601: LIST
73602: LIST
73603: PUSH
73604: LD_INT 2
73606: NEG
73607: PUSH
73608: LD_INT 4
73610: NEG
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: PUSH
73616: LD_INT 4
73618: NEG
73619: PUSH
73620: LD_INT 2
73622: NEG
73623: PUSH
73624: EMPTY
73625: LIST
73626: LIST
73627: PUSH
73628: LD_INT 0
73630: PUSH
73631: LD_INT 4
73633: NEG
73634: PUSH
73635: EMPTY
73636: LIST
73637: LIST
73638: PUSH
73639: LD_INT 0
73641: PUSH
73642: LD_INT 5
73644: NEG
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: PUSH
73650: LD_INT 1
73652: PUSH
73653: LD_INT 4
73655: NEG
73656: PUSH
73657: EMPTY
73658: LIST
73659: LIST
73660: PUSH
73661: LD_INT 1
73663: PUSH
73664: LD_INT 3
73666: NEG
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: PUSH
73672: LD_INT 0
73674: PUSH
73675: LD_INT 3
73677: NEG
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: PUSH
73683: LD_INT 1
73685: NEG
73686: PUSH
73687: LD_INT 4
73689: NEG
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: PUSH
73695: LD_INT 1
73697: NEG
73698: PUSH
73699: LD_INT 5
73701: NEG
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: PUSH
73707: LD_INT 2
73709: PUSH
73710: LD_INT 3
73712: NEG
73713: PUSH
73714: EMPTY
73715: LIST
73716: LIST
73717: PUSH
73718: LD_INT 2
73720: NEG
73721: PUSH
73722: LD_INT 5
73724: NEG
73725: PUSH
73726: EMPTY
73727: LIST
73728: LIST
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: LIST
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: LIST
73746: LIST
73747: LIST
73748: LIST
73749: LIST
73750: LIST
73751: LIST
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: LIST
73760: LIST
73761: LIST
73762: LIST
73763: LIST
73764: LIST
73765: LIST
73766: LIST
73767: LIST
73768: LIST
73769: LIST
73770: LIST
73771: LIST
73772: LIST
73773: LIST
73774: LIST
73775: LIST
73776: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
73777: LD_ADDR_VAR 0 31
73781: PUSH
73782: LD_INT 0
73784: PUSH
73785: LD_INT 4
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: PUSH
73792: LD_INT 0
73794: PUSH
73795: LD_INT 3
73797: PUSH
73798: EMPTY
73799: LIST
73800: LIST
73801: PUSH
73802: LD_INT 1
73804: PUSH
73805: LD_INT 4
73807: PUSH
73808: EMPTY
73809: LIST
73810: LIST
73811: PUSH
73812: LD_INT 1
73814: PUSH
73815: LD_INT 5
73817: PUSH
73818: EMPTY
73819: LIST
73820: LIST
73821: PUSH
73822: LD_INT 0
73824: PUSH
73825: LD_INT 5
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: PUSH
73832: LD_INT 1
73834: NEG
73835: PUSH
73836: LD_INT 4
73838: PUSH
73839: EMPTY
73840: LIST
73841: LIST
73842: PUSH
73843: LD_INT 1
73845: NEG
73846: PUSH
73847: LD_INT 3
73849: PUSH
73850: EMPTY
73851: LIST
73852: LIST
73853: PUSH
73854: LD_INT 2
73856: PUSH
73857: LD_INT 5
73859: PUSH
73860: EMPTY
73861: LIST
73862: LIST
73863: PUSH
73864: LD_INT 2
73866: NEG
73867: PUSH
73868: LD_INT 3
73870: PUSH
73871: EMPTY
73872: LIST
73873: LIST
73874: PUSH
73875: LD_INT 3
73877: NEG
73878: PUSH
73879: LD_INT 0
73881: PUSH
73882: EMPTY
73883: LIST
73884: LIST
73885: PUSH
73886: LD_INT 3
73888: NEG
73889: PUSH
73890: LD_INT 1
73892: NEG
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: PUSH
73898: LD_INT 2
73900: NEG
73901: PUSH
73902: LD_INT 0
73904: PUSH
73905: EMPTY
73906: LIST
73907: LIST
73908: PUSH
73909: LD_INT 2
73911: NEG
73912: PUSH
73913: LD_INT 1
73915: PUSH
73916: EMPTY
73917: LIST
73918: LIST
73919: PUSH
73920: LD_INT 3
73922: NEG
73923: PUSH
73924: LD_INT 1
73926: PUSH
73927: EMPTY
73928: LIST
73929: LIST
73930: PUSH
73931: LD_INT 4
73933: NEG
73934: PUSH
73935: LD_INT 0
73937: PUSH
73938: EMPTY
73939: LIST
73940: LIST
73941: PUSH
73942: LD_INT 4
73944: NEG
73945: PUSH
73946: LD_INT 1
73948: NEG
73949: PUSH
73950: EMPTY
73951: LIST
73952: LIST
73953: PUSH
73954: LD_INT 4
73956: NEG
73957: PUSH
73958: LD_INT 2
73960: NEG
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: PUSH
73966: LD_INT 2
73968: NEG
73969: PUSH
73970: LD_INT 2
73972: PUSH
73973: EMPTY
73974: LIST
73975: LIST
73976: PUSH
73977: LD_INT 4
73979: NEG
73980: PUSH
73981: LD_INT 4
73983: NEG
73984: PUSH
73985: EMPTY
73986: LIST
73987: LIST
73988: PUSH
73989: LD_INT 4
73991: NEG
73992: PUSH
73993: LD_INT 5
73995: NEG
73996: PUSH
73997: EMPTY
73998: LIST
73999: LIST
74000: PUSH
74001: LD_INT 3
74003: NEG
74004: PUSH
74005: LD_INT 4
74007: NEG
74008: PUSH
74009: EMPTY
74010: LIST
74011: LIST
74012: PUSH
74013: LD_INT 3
74015: NEG
74016: PUSH
74017: LD_INT 3
74019: NEG
74020: PUSH
74021: EMPTY
74022: LIST
74023: LIST
74024: PUSH
74025: LD_INT 4
74027: NEG
74028: PUSH
74029: LD_INT 3
74031: NEG
74032: PUSH
74033: EMPTY
74034: LIST
74035: LIST
74036: PUSH
74037: LD_INT 5
74039: NEG
74040: PUSH
74041: LD_INT 4
74043: NEG
74044: PUSH
74045: EMPTY
74046: LIST
74047: LIST
74048: PUSH
74049: LD_INT 5
74051: NEG
74052: PUSH
74053: LD_INT 5
74055: NEG
74056: PUSH
74057: EMPTY
74058: LIST
74059: LIST
74060: PUSH
74061: LD_INT 3
74063: NEG
74064: PUSH
74065: LD_INT 5
74067: NEG
74068: PUSH
74069: EMPTY
74070: LIST
74071: LIST
74072: PUSH
74073: LD_INT 5
74075: NEG
74076: PUSH
74077: LD_INT 3
74079: NEG
74080: PUSH
74081: EMPTY
74082: LIST
74083: LIST
74084: PUSH
74085: LD_INT 0
74087: PUSH
74088: LD_INT 3
74090: NEG
74091: PUSH
74092: EMPTY
74093: LIST
74094: LIST
74095: PUSH
74096: LD_INT 0
74098: PUSH
74099: LD_INT 4
74101: NEG
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: PUSH
74107: LD_INT 1
74109: PUSH
74110: LD_INT 3
74112: NEG
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: PUSH
74118: LD_INT 1
74120: PUSH
74121: LD_INT 2
74123: NEG
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: PUSH
74129: LD_INT 0
74131: PUSH
74132: LD_INT 2
74134: NEG
74135: PUSH
74136: EMPTY
74137: LIST
74138: LIST
74139: PUSH
74140: LD_INT 1
74142: NEG
74143: PUSH
74144: LD_INT 3
74146: NEG
74147: PUSH
74148: EMPTY
74149: LIST
74150: LIST
74151: PUSH
74152: LD_INT 1
74154: NEG
74155: PUSH
74156: LD_INT 4
74158: NEG
74159: PUSH
74160: EMPTY
74161: LIST
74162: LIST
74163: PUSH
74164: LD_INT 2
74166: PUSH
74167: LD_INT 2
74169: NEG
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: PUSH
74175: LD_INT 2
74177: NEG
74178: PUSH
74179: LD_INT 4
74181: NEG
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: PUSH
74187: LD_INT 4
74189: PUSH
74190: LD_INT 0
74192: PUSH
74193: EMPTY
74194: LIST
74195: LIST
74196: PUSH
74197: LD_INT 4
74199: PUSH
74200: LD_INT 1
74202: NEG
74203: PUSH
74204: EMPTY
74205: LIST
74206: LIST
74207: PUSH
74208: LD_INT 5
74210: PUSH
74211: LD_INT 0
74213: PUSH
74214: EMPTY
74215: LIST
74216: LIST
74217: PUSH
74218: LD_INT 5
74220: PUSH
74221: LD_INT 1
74223: PUSH
74224: EMPTY
74225: LIST
74226: LIST
74227: PUSH
74228: LD_INT 4
74230: PUSH
74231: LD_INT 1
74233: PUSH
74234: EMPTY
74235: LIST
74236: LIST
74237: PUSH
74238: LD_INT 3
74240: PUSH
74241: LD_INT 0
74243: PUSH
74244: EMPTY
74245: LIST
74246: LIST
74247: PUSH
74248: LD_INT 3
74250: PUSH
74251: LD_INT 1
74253: NEG
74254: PUSH
74255: EMPTY
74256: LIST
74257: LIST
74258: PUSH
74259: LD_INT 3
74261: PUSH
74262: LD_INT 2
74264: NEG
74265: PUSH
74266: EMPTY
74267: LIST
74268: LIST
74269: PUSH
74270: LD_INT 5
74272: PUSH
74273: LD_INT 2
74275: PUSH
74276: EMPTY
74277: LIST
74278: LIST
74279: PUSH
74280: EMPTY
74281: LIST
74282: LIST
74283: LIST
74284: LIST
74285: LIST
74286: LIST
74287: LIST
74288: LIST
74289: LIST
74290: LIST
74291: LIST
74292: LIST
74293: LIST
74294: LIST
74295: LIST
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: LIST
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: LIST
74313: LIST
74314: LIST
74315: LIST
74316: LIST
74317: LIST
74318: LIST
74319: LIST
74320: LIST
74321: LIST
74322: LIST
74323: LIST
74324: LIST
74325: LIST
74326: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
74327: LD_ADDR_VAR 0 32
74331: PUSH
74332: LD_INT 4
74334: NEG
74335: PUSH
74336: LD_INT 0
74338: PUSH
74339: EMPTY
74340: LIST
74341: LIST
74342: PUSH
74343: LD_INT 4
74345: NEG
74346: PUSH
74347: LD_INT 1
74349: NEG
74350: PUSH
74351: EMPTY
74352: LIST
74353: LIST
74354: PUSH
74355: LD_INT 3
74357: NEG
74358: PUSH
74359: LD_INT 0
74361: PUSH
74362: EMPTY
74363: LIST
74364: LIST
74365: PUSH
74366: LD_INT 3
74368: NEG
74369: PUSH
74370: LD_INT 1
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: PUSH
74377: LD_INT 4
74379: NEG
74380: PUSH
74381: LD_INT 1
74383: PUSH
74384: EMPTY
74385: LIST
74386: LIST
74387: PUSH
74388: LD_INT 5
74390: NEG
74391: PUSH
74392: LD_INT 0
74394: PUSH
74395: EMPTY
74396: LIST
74397: LIST
74398: PUSH
74399: LD_INT 5
74401: NEG
74402: PUSH
74403: LD_INT 1
74405: NEG
74406: PUSH
74407: EMPTY
74408: LIST
74409: LIST
74410: PUSH
74411: LD_INT 5
74413: NEG
74414: PUSH
74415: LD_INT 2
74417: NEG
74418: PUSH
74419: EMPTY
74420: LIST
74421: LIST
74422: PUSH
74423: LD_INT 3
74425: NEG
74426: PUSH
74427: LD_INT 2
74429: PUSH
74430: EMPTY
74431: LIST
74432: LIST
74433: PUSH
74434: LD_INT 3
74436: NEG
74437: PUSH
74438: LD_INT 3
74440: NEG
74441: PUSH
74442: EMPTY
74443: LIST
74444: LIST
74445: PUSH
74446: LD_INT 3
74448: NEG
74449: PUSH
74450: LD_INT 4
74452: NEG
74453: PUSH
74454: EMPTY
74455: LIST
74456: LIST
74457: PUSH
74458: LD_INT 2
74460: NEG
74461: PUSH
74462: LD_INT 3
74464: NEG
74465: PUSH
74466: EMPTY
74467: LIST
74468: LIST
74469: PUSH
74470: LD_INT 2
74472: NEG
74473: PUSH
74474: LD_INT 2
74476: NEG
74477: PUSH
74478: EMPTY
74479: LIST
74480: LIST
74481: PUSH
74482: LD_INT 3
74484: NEG
74485: PUSH
74486: LD_INT 2
74488: NEG
74489: PUSH
74490: EMPTY
74491: LIST
74492: LIST
74493: PUSH
74494: LD_INT 4
74496: NEG
74497: PUSH
74498: LD_INT 3
74500: NEG
74501: PUSH
74502: EMPTY
74503: LIST
74504: LIST
74505: PUSH
74506: LD_INT 4
74508: NEG
74509: PUSH
74510: LD_INT 4
74512: NEG
74513: PUSH
74514: EMPTY
74515: LIST
74516: LIST
74517: PUSH
74518: LD_INT 2
74520: NEG
74521: PUSH
74522: LD_INT 4
74524: NEG
74525: PUSH
74526: EMPTY
74527: LIST
74528: LIST
74529: PUSH
74530: LD_INT 4
74532: NEG
74533: PUSH
74534: LD_INT 2
74536: NEG
74537: PUSH
74538: EMPTY
74539: LIST
74540: LIST
74541: PUSH
74542: LD_INT 0
74544: PUSH
74545: LD_INT 4
74547: NEG
74548: PUSH
74549: EMPTY
74550: LIST
74551: LIST
74552: PUSH
74553: LD_INT 0
74555: PUSH
74556: LD_INT 5
74558: NEG
74559: PUSH
74560: EMPTY
74561: LIST
74562: LIST
74563: PUSH
74564: LD_INT 1
74566: PUSH
74567: LD_INT 4
74569: NEG
74570: PUSH
74571: EMPTY
74572: LIST
74573: LIST
74574: PUSH
74575: LD_INT 1
74577: PUSH
74578: LD_INT 3
74580: NEG
74581: PUSH
74582: EMPTY
74583: LIST
74584: LIST
74585: PUSH
74586: LD_INT 0
74588: PUSH
74589: LD_INT 3
74591: NEG
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: PUSH
74597: LD_INT 1
74599: NEG
74600: PUSH
74601: LD_INT 4
74603: NEG
74604: PUSH
74605: EMPTY
74606: LIST
74607: LIST
74608: PUSH
74609: LD_INT 1
74611: NEG
74612: PUSH
74613: LD_INT 5
74615: NEG
74616: PUSH
74617: EMPTY
74618: LIST
74619: LIST
74620: PUSH
74621: LD_INT 2
74623: PUSH
74624: LD_INT 3
74626: NEG
74627: PUSH
74628: EMPTY
74629: LIST
74630: LIST
74631: PUSH
74632: LD_INT 2
74634: NEG
74635: PUSH
74636: LD_INT 5
74638: NEG
74639: PUSH
74640: EMPTY
74641: LIST
74642: LIST
74643: PUSH
74644: LD_INT 3
74646: PUSH
74647: LD_INT 0
74649: PUSH
74650: EMPTY
74651: LIST
74652: LIST
74653: PUSH
74654: LD_INT 3
74656: PUSH
74657: LD_INT 1
74659: NEG
74660: PUSH
74661: EMPTY
74662: LIST
74663: LIST
74664: PUSH
74665: LD_INT 4
74667: PUSH
74668: LD_INT 0
74670: PUSH
74671: EMPTY
74672: LIST
74673: LIST
74674: PUSH
74675: LD_INT 4
74677: PUSH
74678: LD_INT 1
74680: PUSH
74681: EMPTY
74682: LIST
74683: LIST
74684: PUSH
74685: LD_INT 3
74687: PUSH
74688: LD_INT 1
74690: PUSH
74691: EMPTY
74692: LIST
74693: LIST
74694: PUSH
74695: LD_INT 2
74697: PUSH
74698: LD_INT 0
74700: PUSH
74701: EMPTY
74702: LIST
74703: LIST
74704: PUSH
74705: LD_INT 2
74707: PUSH
74708: LD_INT 1
74710: NEG
74711: PUSH
74712: EMPTY
74713: LIST
74714: LIST
74715: PUSH
74716: LD_INT 2
74718: PUSH
74719: LD_INT 2
74721: NEG
74722: PUSH
74723: EMPTY
74724: LIST
74725: LIST
74726: PUSH
74727: LD_INT 4
74729: PUSH
74730: LD_INT 2
74732: PUSH
74733: EMPTY
74734: LIST
74735: LIST
74736: PUSH
74737: LD_INT 4
74739: PUSH
74740: LD_INT 4
74742: PUSH
74743: EMPTY
74744: LIST
74745: LIST
74746: PUSH
74747: LD_INT 4
74749: PUSH
74750: LD_INT 3
74752: PUSH
74753: EMPTY
74754: LIST
74755: LIST
74756: PUSH
74757: LD_INT 5
74759: PUSH
74760: LD_INT 4
74762: PUSH
74763: EMPTY
74764: LIST
74765: LIST
74766: PUSH
74767: LD_INT 5
74769: PUSH
74770: LD_INT 5
74772: PUSH
74773: EMPTY
74774: LIST
74775: LIST
74776: PUSH
74777: LD_INT 4
74779: PUSH
74780: LD_INT 5
74782: PUSH
74783: EMPTY
74784: LIST
74785: LIST
74786: PUSH
74787: LD_INT 3
74789: PUSH
74790: LD_INT 4
74792: PUSH
74793: EMPTY
74794: LIST
74795: LIST
74796: PUSH
74797: LD_INT 3
74799: PUSH
74800: LD_INT 3
74802: PUSH
74803: EMPTY
74804: LIST
74805: LIST
74806: PUSH
74807: LD_INT 5
74809: PUSH
74810: LD_INT 3
74812: PUSH
74813: EMPTY
74814: LIST
74815: LIST
74816: PUSH
74817: LD_INT 3
74819: PUSH
74820: LD_INT 5
74822: PUSH
74823: EMPTY
74824: LIST
74825: LIST
74826: PUSH
74827: EMPTY
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: LIST
74833: LIST
74834: LIST
74835: LIST
74836: LIST
74837: LIST
74838: LIST
74839: LIST
74840: LIST
74841: LIST
74842: LIST
74843: LIST
74844: LIST
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: LIST
74851: LIST
74852: LIST
74853: LIST
74854: LIST
74855: LIST
74856: LIST
74857: LIST
74858: LIST
74859: LIST
74860: LIST
74861: LIST
74862: LIST
74863: LIST
74864: LIST
74865: LIST
74866: LIST
74867: LIST
74868: LIST
74869: LIST
74870: LIST
74871: LIST
74872: LIST
74873: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
74874: LD_ADDR_VAR 0 33
74878: PUSH
74879: LD_INT 4
74881: NEG
74882: PUSH
74883: LD_INT 4
74885: NEG
74886: PUSH
74887: EMPTY
74888: LIST
74889: LIST
74890: PUSH
74891: LD_INT 4
74893: NEG
74894: PUSH
74895: LD_INT 5
74897: NEG
74898: PUSH
74899: EMPTY
74900: LIST
74901: LIST
74902: PUSH
74903: LD_INT 3
74905: NEG
74906: PUSH
74907: LD_INT 4
74909: NEG
74910: PUSH
74911: EMPTY
74912: LIST
74913: LIST
74914: PUSH
74915: LD_INT 3
74917: NEG
74918: PUSH
74919: LD_INT 3
74921: NEG
74922: PUSH
74923: EMPTY
74924: LIST
74925: LIST
74926: PUSH
74927: LD_INT 4
74929: NEG
74930: PUSH
74931: LD_INT 3
74933: NEG
74934: PUSH
74935: EMPTY
74936: LIST
74937: LIST
74938: PUSH
74939: LD_INT 5
74941: NEG
74942: PUSH
74943: LD_INT 4
74945: NEG
74946: PUSH
74947: EMPTY
74948: LIST
74949: LIST
74950: PUSH
74951: LD_INT 5
74953: NEG
74954: PUSH
74955: LD_INT 5
74957: NEG
74958: PUSH
74959: EMPTY
74960: LIST
74961: LIST
74962: PUSH
74963: LD_INT 3
74965: NEG
74966: PUSH
74967: LD_INT 5
74969: NEG
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: PUSH
74975: LD_INT 5
74977: NEG
74978: PUSH
74979: LD_INT 3
74981: NEG
74982: PUSH
74983: EMPTY
74984: LIST
74985: LIST
74986: PUSH
74987: LD_INT 0
74989: PUSH
74990: LD_INT 3
74992: NEG
74993: PUSH
74994: EMPTY
74995: LIST
74996: LIST
74997: PUSH
74998: LD_INT 0
75000: PUSH
75001: LD_INT 4
75003: NEG
75004: PUSH
75005: EMPTY
75006: LIST
75007: LIST
75008: PUSH
75009: LD_INT 1
75011: PUSH
75012: LD_INT 3
75014: NEG
75015: PUSH
75016: EMPTY
75017: LIST
75018: LIST
75019: PUSH
75020: LD_INT 1
75022: PUSH
75023: LD_INT 2
75025: NEG
75026: PUSH
75027: EMPTY
75028: LIST
75029: LIST
75030: PUSH
75031: LD_INT 0
75033: PUSH
75034: LD_INT 2
75036: NEG
75037: PUSH
75038: EMPTY
75039: LIST
75040: LIST
75041: PUSH
75042: LD_INT 1
75044: NEG
75045: PUSH
75046: LD_INT 3
75048: NEG
75049: PUSH
75050: EMPTY
75051: LIST
75052: LIST
75053: PUSH
75054: LD_INT 1
75056: NEG
75057: PUSH
75058: LD_INT 4
75060: NEG
75061: PUSH
75062: EMPTY
75063: LIST
75064: LIST
75065: PUSH
75066: LD_INT 2
75068: PUSH
75069: LD_INT 2
75071: NEG
75072: PUSH
75073: EMPTY
75074: LIST
75075: LIST
75076: PUSH
75077: LD_INT 2
75079: NEG
75080: PUSH
75081: LD_INT 4
75083: NEG
75084: PUSH
75085: EMPTY
75086: LIST
75087: LIST
75088: PUSH
75089: LD_INT 4
75091: PUSH
75092: LD_INT 0
75094: PUSH
75095: EMPTY
75096: LIST
75097: LIST
75098: PUSH
75099: LD_INT 4
75101: PUSH
75102: LD_INT 1
75104: NEG
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: PUSH
75110: LD_INT 5
75112: PUSH
75113: LD_INT 0
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: PUSH
75120: LD_INT 5
75122: PUSH
75123: LD_INT 1
75125: PUSH
75126: EMPTY
75127: LIST
75128: LIST
75129: PUSH
75130: LD_INT 4
75132: PUSH
75133: LD_INT 1
75135: PUSH
75136: EMPTY
75137: LIST
75138: LIST
75139: PUSH
75140: LD_INT 3
75142: PUSH
75143: LD_INT 0
75145: PUSH
75146: EMPTY
75147: LIST
75148: LIST
75149: PUSH
75150: LD_INT 3
75152: PUSH
75153: LD_INT 1
75155: NEG
75156: PUSH
75157: EMPTY
75158: LIST
75159: LIST
75160: PUSH
75161: LD_INT 3
75163: PUSH
75164: LD_INT 2
75166: NEG
75167: PUSH
75168: EMPTY
75169: LIST
75170: LIST
75171: PUSH
75172: LD_INT 5
75174: PUSH
75175: LD_INT 2
75177: PUSH
75178: EMPTY
75179: LIST
75180: LIST
75181: PUSH
75182: LD_INT 3
75184: PUSH
75185: LD_INT 3
75187: PUSH
75188: EMPTY
75189: LIST
75190: LIST
75191: PUSH
75192: LD_INT 3
75194: PUSH
75195: LD_INT 2
75197: PUSH
75198: EMPTY
75199: LIST
75200: LIST
75201: PUSH
75202: LD_INT 4
75204: PUSH
75205: LD_INT 3
75207: PUSH
75208: EMPTY
75209: LIST
75210: LIST
75211: PUSH
75212: LD_INT 4
75214: PUSH
75215: LD_INT 4
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: PUSH
75222: LD_INT 3
75224: PUSH
75225: LD_INT 4
75227: PUSH
75228: EMPTY
75229: LIST
75230: LIST
75231: PUSH
75232: LD_INT 2
75234: PUSH
75235: LD_INT 3
75237: PUSH
75238: EMPTY
75239: LIST
75240: LIST
75241: PUSH
75242: LD_INT 2
75244: PUSH
75245: LD_INT 2
75247: PUSH
75248: EMPTY
75249: LIST
75250: LIST
75251: PUSH
75252: LD_INT 4
75254: PUSH
75255: LD_INT 2
75257: PUSH
75258: EMPTY
75259: LIST
75260: LIST
75261: PUSH
75262: LD_INT 2
75264: PUSH
75265: LD_INT 4
75267: PUSH
75268: EMPTY
75269: LIST
75270: LIST
75271: PUSH
75272: LD_INT 0
75274: PUSH
75275: LD_INT 4
75277: PUSH
75278: EMPTY
75279: LIST
75280: LIST
75281: PUSH
75282: LD_INT 0
75284: PUSH
75285: LD_INT 3
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: PUSH
75292: LD_INT 1
75294: PUSH
75295: LD_INT 4
75297: PUSH
75298: EMPTY
75299: LIST
75300: LIST
75301: PUSH
75302: LD_INT 1
75304: PUSH
75305: LD_INT 5
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: PUSH
75312: LD_INT 0
75314: PUSH
75315: LD_INT 5
75317: PUSH
75318: EMPTY
75319: LIST
75320: LIST
75321: PUSH
75322: LD_INT 1
75324: NEG
75325: PUSH
75326: LD_INT 4
75328: PUSH
75329: EMPTY
75330: LIST
75331: LIST
75332: PUSH
75333: LD_INT 1
75335: NEG
75336: PUSH
75337: LD_INT 3
75339: PUSH
75340: EMPTY
75341: LIST
75342: LIST
75343: PUSH
75344: LD_INT 2
75346: PUSH
75347: LD_INT 5
75349: PUSH
75350: EMPTY
75351: LIST
75352: LIST
75353: PUSH
75354: LD_INT 2
75356: NEG
75357: PUSH
75358: LD_INT 3
75360: PUSH
75361: EMPTY
75362: LIST
75363: LIST
75364: PUSH
75365: EMPTY
75366: LIST
75367: LIST
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: LIST
75375: LIST
75376: LIST
75377: LIST
75378: LIST
75379: LIST
75380: LIST
75381: LIST
75382: LIST
75383: LIST
75384: LIST
75385: LIST
75386: LIST
75387: LIST
75388: LIST
75389: LIST
75390: LIST
75391: LIST
75392: LIST
75393: LIST
75394: LIST
75395: LIST
75396: LIST
75397: LIST
75398: LIST
75399: LIST
75400: LIST
75401: LIST
75402: LIST
75403: LIST
75404: LIST
75405: LIST
75406: LIST
75407: LIST
75408: LIST
75409: LIST
75410: LIST
75411: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
75412: LD_ADDR_VAR 0 34
75416: PUSH
75417: LD_INT 0
75419: PUSH
75420: LD_INT 4
75422: NEG
75423: PUSH
75424: EMPTY
75425: LIST
75426: LIST
75427: PUSH
75428: LD_INT 0
75430: PUSH
75431: LD_INT 5
75433: NEG
75434: PUSH
75435: EMPTY
75436: LIST
75437: LIST
75438: PUSH
75439: LD_INT 1
75441: PUSH
75442: LD_INT 4
75444: NEG
75445: PUSH
75446: EMPTY
75447: LIST
75448: LIST
75449: PUSH
75450: LD_INT 1
75452: PUSH
75453: LD_INT 3
75455: NEG
75456: PUSH
75457: EMPTY
75458: LIST
75459: LIST
75460: PUSH
75461: LD_INT 0
75463: PUSH
75464: LD_INT 3
75466: NEG
75467: PUSH
75468: EMPTY
75469: LIST
75470: LIST
75471: PUSH
75472: LD_INT 1
75474: NEG
75475: PUSH
75476: LD_INT 4
75478: NEG
75479: PUSH
75480: EMPTY
75481: LIST
75482: LIST
75483: PUSH
75484: LD_INT 1
75486: NEG
75487: PUSH
75488: LD_INT 5
75490: NEG
75491: PUSH
75492: EMPTY
75493: LIST
75494: LIST
75495: PUSH
75496: LD_INT 2
75498: PUSH
75499: LD_INT 3
75501: NEG
75502: PUSH
75503: EMPTY
75504: LIST
75505: LIST
75506: PUSH
75507: LD_INT 2
75509: NEG
75510: PUSH
75511: LD_INT 5
75513: NEG
75514: PUSH
75515: EMPTY
75516: LIST
75517: LIST
75518: PUSH
75519: LD_INT 3
75521: PUSH
75522: LD_INT 0
75524: PUSH
75525: EMPTY
75526: LIST
75527: LIST
75528: PUSH
75529: LD_INT 3
75531: PUSH
75532: LD_INT 1
75534: NEG
75535: PUSH
75536: EMPTY
75537: LIST
75538: LIST
75539: PUSH
75540: LD_INT 4
75542: PUSH
75543: LD_INT 0
75545: PUSH
75546: EMPTY
75547: LIST
75548: LIST
75549: PUSH
75550: LD_INT 4
75552: PUSH
75553: LD_INT 1
75555: PUSH
75556: EMPTY
75557: LIST
75558: LIST
75559: PUSH
75560: LD_INT 3
75562: PUSH
75563: LD_INT 1
75565: PUSH
75566: EMPTY
75567: LIST
75568: LIST
75569: PUSH
75570: LD_INT 2
75572: PUSH
75573: LD_INT 0
75575: PUSH
75576: EMPTY
75577: LIST
75578: LIST
75579: PUSH
75580: LD_INT 2
75582: PUSH
75583: LD_INT 1
75585: NEG
75586: PUSH
75587: EMPTY
75588: LIST
75589: LIST
75590: PUSH
75591: LD_INT 2
75593: PUSH
75594: LD_INT 2
75596: NEG
75597: PUSH
75598: EMPTY
75599: LIST
75600: LIST
75601: PUSH
75602: LD_INT 4
75604: PUSH
75605: LD_INT 2
75607: PUSH
75608: EMPTY
75609: LIST
75610: LIST
75611: PUSH
75612: LD_INT 4
75614: PUSH
75615: LD_INT 4
75617: PUSH
75618: EMPTY
75619: LIST
75620: LIST
75621: PUSH
75622: LD_INT 4
75624: PUSH
75625: LD_INT 3
75627: PUSH
75628: EMPTY
75629: LIST
75630: LIST
75631: PUSH
75632: LD_INT 5
75634: PUSH
75635: LD_INT 4
75637: PUSH
75638: EMPTY
75639: LIST
75640: LIST
75641: PUSH
75642: LD_INT 5
75644: PUSH
75645: LD_INT 5
75647: PUSH
75648: EMPTY
75649: LIST
75650: LIST
75651: PUSH
75652: LD_INT 4
75654: PUSH
75655: LD_INT 5
75657: PUSH
75658: EMPTY
75659: LIST
75660: LIST
75661: PUSH
75662: LD_INT 3
75664: PUSH
75665: LD_INT 4
75667: PUSH
75668: EMPTY
75669: LIST
75670: LIST
75671: PUSH
75672: LD_INT 3
75674: PUSH
75675: LD_INT 3
75677: PUSH
75678: EMPTY
75679: LIST
75680: LIST
75681: PUSH
75682: LD_INT 5
75684: PUSH
75685: LD_INT 3
75687: PUSH
75688: EMPTY
75689: LIST
75690: LIST
75691: PUSH
75692: LD_INT 3
75694: PUSH
75695: LD_INT 5
75697: PUSH
75698: EMPTY
75699: LIST
75700: LIST
75701: PUSH
75702: LD_INT 0
75704: PUSH
75705: LD_INT 3
75707: PUSH
75708: EMPTY
75709: LIST
75710: LIST
75711: PUSH
75712: LD_INT 0
75714: PUSH
75715: LD_INT 2
75717: PUSH
75718: EMPTY
75719: LIST
75720: LIST
75721: PUSH
75722: LD_INT 1
75724: PUSH
75725: LD_INT 3
75727: PUSH
75728: EMPTY
75729: LIST
75730: LIST
75731: PUSH
75732: LD_INT 1
75734: PUSH
75735: LD_INT 4
75737: PUSH
75738: EMPTY
75739: LIST
75740: LIST
75741: PUSH
75742: LD_INT 0
75744: PUSH
75745: LD_INT 4
75747: PUSH
75748: EMPTY
75749: LIST
75750: LIST
75751: PUSH
75752: LD_INT 1
75754: NEG
75755: PUSH
75756: LD_INT 3
75758: PUSH
75759: EMPTY
75760: LIST
75761: LIST
75762: PUSH
75763: LD_INT 1
75765: NEG
75766: PUSH
75767: LD_INT 2
75769: PUSH
75770: EMPTY
75771: LIST
75772: LIST
75773: PUSH
75774: LD_INT 2
75776: PUSH
75777: LD_INT 4
75779: PUSH
75780: EMPTY
75781: LIST
75782: LIST
75783: PUSH
75784: LD_INT 2
75786: NEG
75787: PUSH
75788: LD_INT 2
75790: PUSH
75791: EMPTY
75792: LIST
75793: LIST
75794: PUSH
75795: LD_INT 4
75797: NEG
75798: PUSH
75799: LD_INT 0
75801: PUSH
75802: EMPTY
75803: LIST
75804: LIST
75805: PUSH
75806: LD_INT 4
75808: NEG
75809: PUSH
75810: LD_INT 1
75812: NEG
75813: PUSH
75814: EMPTY
75815: LIST
75816: LIST
75817: PUSH
75818: LD_INT 3
75820: NEG
75821: PUSH
75822: LD_INT 0
75824: PUSH
75825: EMPTY
75826: LIST
75827: LIST
75828: PUSH
75829: LD_INT 3
75831: NEG
75832: PUSH
75833: LD_INT 1
75835: PUSH
75836: EMPTY
75837: LIST
75838: LIST
75839: PUSH
75840: LD_INT 4
75842: NEG
75843: PUSH
75844: LD_INT 1
75846: PUSH
75847: EMPTY
75848: LIST
75849: LIST
75850: PUSH
75851: LD_INT 5
75853: NEG
75854: PUSH
75855: LD_INT 0
75857: PUSH
75858: EMPTY
75859: LIST
75860: LIST
75861: PUSH
75862: LD_INT 5
75864: NEG
75865: PUSH
75866: LD_INT 1
75868: NEG
75869: PUSH
75870: EMPTY
75871: LIST
75872: LIST
75873: PUSH
75874: LD_INT 5
75876: NEG
75877: PUSH
75878: LD_INT 2
75880: NEG
75881: PUSH
75882: EMPTY
75883: LIST
75884: LIST
75885: PUSH
75886: LD_INT 3
75888: NEG
75889: PUSH
75890: LD_INT 2
75892: PUSH
75893: EMPTY
75894: LIST
75895: LIST
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: LIST
75901: LIST
75902: LIST
75903: LIST
75904: LIST
75905: LIST
75906: LIST
75907: LIST
75908: LIST
75909: LIST
75910: LIST
75911: LIST
75912: LIST
75913: LIST
75914: LIST
75915: LIST
75916: LIST
75917: LIST
75918: LIST
75919: LIST
75920: LIST
75921: LIST
75922: LIST
75923: LIST
75924: LIST
75925: LIST
75926: LIST
75927: LIST
75928: LIST
75929: LIST
75930: LIST
75931: LIST
75932: LIST
75933: LIST
75934: LIST
75935: LIST
75936: LIST
75937: LIST
75938: LIST
75939: LIST
75940: LIST
75941: LIST
75942: LIST
75943: ST_TO_ADDR
// end ; end ;
75944: GO 75947
75946: POP
// case btype of b_depot , b_warehouse :
75947: LD_VAR 0 1
75951: PUSH
75952: LD_INT 0
75954: DOUBLE
75955: EQUAL
75956: IFTRUE 75966
75958: LD_INT 1
75960: DOUBLE
75961: EQUAL
75962: IFTRUE 75966
75964: GO 76167
75966: POP
// case nation of nation_american :
75967: LD_VAR 0 5
75971: PUSH
75972: LD_INT 1
75974: DOUBLE
75975: EQUAL
75976: IFTRUE 75980
75978: GO 76036
75980: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
75981: LD_ADDR_VAR 0 9
75985: PUSH
75986: LD_VAR 0 11
75990: PUSH
75991: LD_VAR 0 12
75995: PUSH
75996: LD_VAR 0 13
76000: PUSH
76001: LD_VAR 0 14
76005: PUSH
76006: LD_VAR 0 15
76010: PUSH
76011: LD_VAR 0 16
76015: PUSH
76016: EMPTY
76017: LIST
76018: LIST
76019: LIST
76020: LIST
76021: LIST
76022: LIST
76023: PUSH
76024: LD_VAR 0 4
76028: PUSH
76029: LD_INT 1
76031: PLUS
76032: ARRAY
76033: ST_TO_ADDR
76034: GO 76165
76036: LD_INT 2
76038: DOUBLE
76039: EQUAL
76040: IFTRUE 76044
76042: GO 76100
76044: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
76045: LD_ADDR_VAR 0 9
76049: PUSH
76050: LD_VAR 0 17
76054: PUSH
76055: LD_VAR 0 18
76059: PUSH
76060: LD_VAR 0 19
76064: PUSH
76065: LD_VAR 0 20
76069: PUSH
76070: LD_VAR 0 21
76074: PUSH
76075: LD_VAR 0 22
76079: PUSH
76080: EMPTY
76081: LIST
76082: LIST
76083: LIST
76084: LIST
76085: LIST
76086: LIST
76087: PUSH
76088: LD_VAR 0 4
76092: PUSH
76093: LD_INT 1
76095: PLUS
76096: ARRAY
76097: ST_TO_ADDR
76098: GO 76165
76100: LD_INT 3
76102: DOUBLE
76103: EQUAL
76104: IFTRUE 76108
76106: GO 76164
76108: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
76109: LD_ADDR_VAR 0 9
76113: PUSH
76114: LD_VAR 0 23
76118: PUSH
76119: LD_VAR 0 24
76123: PUSH
76124: LD_VAR 0 25
76128: PUSH
76129: LD_VAR 0 26
76133: PUSH
76134: LD_VAR 0 27
76138: PUSH
76139: LD_VAR 0 28
76143: PUSH
76144: EMPTY
76145: LIST
76146: LIST
76147: LIST
76148: LIST
76149: LIST
76150: LIST
76151: PUSH
76152: LD_VAR 0 4
76156: PUSH
76157: LD_INT 1
76159: PLUS
76160: ARRAY
76161: ST_TO_ADDR
76162: GO 76165
76164: POP
76165: GO 76720
76167: LD_INT 2
76169: DOUBLE
76170: EQUAL
76171: IFTRUE 76181
76173: LD_INT 3
76175: DOUBLE
76176: EQUAL
76177: IFTRUE 76181
76179: GO 76237
76181: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
76182: LD_ADDR_VAR 0 9
76186: PUSH
76187: LD_VAR 0 29
76191: PUSH
76192: LD_VAR 0 30
76196: PUSH
76197: LD_VAR 0 31
76201: PUSH
76202: LD_VAR 0 32
76206: PUSH
76207: LD_VAR 0 33
76211: PUSH
76212: LD_VAR 0 34
76216: PUSH
76217: EMPTY
76218: LIST
76219: LIST
76220: LIST
76221: LIST
76222: LIST
76223: LIST
76224: PUSH
76225: LD_VAR 0 4
76229: PUSH
76230: LD_INT 1
76232: PLUS
76233: ARRAY
76234: ST_TO_ADDR
76235: GO 76720
76237: LD_INT 16
76239: DOUBLE
76240: EQUAL
76241: IFTRUE 76299
76243: LD_INT 17
76245: DOUBLE
76246: EQUAL
76247: IFTRUE 76299
76249: LD_INT 18
76251: DOUBLE
76252: EQUAL
76253: IFTRUE 76299
76255: LD_INT 19
76257: DOUBLE
76258: EQUAL
76259: IFTRUE 76299
76261: LD_INT 22
76263: DOUBLE
76264: EQUAL
76265: IFTRUE 76299
76267: LD_INT 20
76269: DOUBLE
76270: EQUAL
76271: IFTRUE 76299
76273: LD_INT 21
76275: DOUBLE
76276: EQUAL
76277: IFTRUE 76299
76279: LD_INT 23
76281: DOUBLE
76282: EQUAL
76283: IFTRUE 76299
76285: LD_INT 24
76287: DOUBLE
76288: EQUAL
76289: IFTRUE 76299
76291: LD_INT 25
76293: DOUBLE
76294: EQUAL
76295: IFTRUE 76299
76297: GO 76355
76299: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
76300: LD_ADDR_VAR 0 9
76304: PUSH
76305: LD_VAR 0 35
76309: PUSH
76310: LD_VAR 0 36
76314: PUSH
76315: LD_VAR 0 37
76319: PUSH
76320: LD_VAR 0 38
76324: PUSH
76325: LD_VAR 0 39
76329: PUSH
76330: LD_VAR 0 40
76334: PUSH
76335: EMPTY
76336: LIST
76337: LIST
76338: LIST
76339: LIST
76340: LIST
76341: LIST
76342: PUSH
76343: LD_VAR 0 4
76347: PUSH
76348: LD_INT 1
76350: PLUS
76351: ARRAY
76352: ST_TO_ADDR
76353: GO 76720
76355: LD_INT 6
76357: DOUBLE
76358: EQUAL
76359: IFTRUE 76411
76361: LD_INT 7
76363: DOUBLE
76364: EQUAL
76365: IFTRUE 76411
76367: LD_INT 8
76369: DOUBLE
76370: EQUAL
76371: IFTRUE 76411
76373: LD_INT 13
76375: DOUBLE
76376: EQUAL
76377: IFTRUE 76411
76379: LD_INT 12
76381: DOUBLE
76382: EQUAL
76383: IFTRUE 76411
76385: LD_INT 15
76387: DOUBLE
76388: EQUAL
76389: IFTRUE 76411
76391: LD_INT 11
76393: DOUBLE
76394: EQUAL
76395: IFTRUE 76411
76397: LD_INT 14
76399: DOUBLE
76400: EQUAL
76401: IFTRUE 76411
76403: LD_INT 10
76405: DOUBLE
76406: EQUAL
76407: IFTRUE 76411
76409: GO 76467
76411: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
76412: LD_ADDR_VAR 0 9
76416: PUSH
76417: LD_VAR 0 41
76421: PUSH
76422: LD_VAR 0 42
76426: PUSH
76427: LD_VAR 0 43
76431: PUSH
76432: LD_VAR 0 44
76436: PUSH
76437: LD_VAR 0 45
76441: PUSH
76442: LD_VAR 0 46
76446: PUSH
76447: EMPTY
76448: LIST
76449: LIST
76450: LIST
76451: LIST
76452: LIST
76453: LIST
76454: PUSH
76455: LD_VAR 0 4
76459: PUSH
76460: LD_INT 1
76462: PLUS
76463: ARRAY
76464: ST_TO_ADDR
76465: GO 76720
76467: LD_INT 36
76469: DOUBLE
76470: EQUAL
76471: IFTRUE 76475
76473: GO 76531
76475: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
76476: LD_ADDR_VAR 0 9
76480: PUSH
76481: LD_VAR 0 47
76485: PUSH
76486: LD_VAR 0 48
76490: PUSH
76491: LD_VAR 0 49
76495: PUSH
76496: LD_VAR 0 50
76500: PUSH
76501: LD_VAR 0 51
76505: PUSH
76506: LD_VAR 0 52
76510: PUSH
76511: EMPTY
76512: LIST
76513: LIST
76514: LIST
76515: LIST
76516: LIST
76517: LIST
76518: PUSH
76519: LD_VAR 0 4
76523: PUSH
76524: LD_INT 1
76526: PLUS
76527: ARRAY
76528: ST_TO_ADDR
76529: GO 76720
76531: LD_INT 4
76533: DOUBLE
76534: EQUAL
76535: IFTRUE 76557
76537: LD_INT 5
76539: DOUBLE
76540: EQUAL
76541: IFTRUE 76557
76543: LD_INT 34
76545: DOUBLE
76546: EQUAL
76547: IFTRUE 76557
76549: LD_INT 37
76551: DOUBLE
76552: EQUAL
76553: IFTRUE 76557
76555: GO 76613
76557: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
76558: LD_ADDR_VAR 0 9
76562: PUSH
76563: LD_VAR 0 53
76567: PUSH
76568: LD_VAR 0 54
76572: PUSH
76573: LD_VAR 0 55
76577: PUSH
76578: LD_VAR 0 56
76582: PUSH
76583: LD_VAR 0 57
76587: PUSH
76588: LD_VAR 0 58
76592: PUSH
76593: EMPTY
76594: LIST
76595: LIST
76596: LIST
76597: LIST
76598: LIST
76599: LIST
76600: PUSH
76601: LD_VAR 0 4
76605: PUSH
76606: LD_INT 1
76608: PLUS
76609: ARRAY
76610: ST_TO_ADDR
76611: GO 76720
76613: LD_INT 31
76615: DOUBLE
76616: EQUAL
76617: IFTRUE 76663
76619: LD_INT 32
76621: DOUBLE
76622: EQUAL
76623: IFTRUE 76663
76625: LD_INT 33
76627: DOUBLE
76628: EQUAL
76629: IFTRUE 76663
76631: LD_INT 27
76633: DOUBLE
76634: EQUAL
76635: IFTRUE 76663
76637: LD_INT 26
76639: DOUBLE
76640: EQUAL
76641: IFTRUE 76663
76643: LD_INT 28
76645: DOUBLE
76646: EQUAL
76647: IFTRUE 76663
76649: LD_INT 29
76651: DOUBLE
76652: EQUAL
76653: IFTRUE 76663
76655: LD_INT 30
76657: DOUBLE
76658: EQUAL
76659: IFTRUE 76663
76661: GO 76719
76663: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
76664: LD_ADDR_VAR 0 9
76668: PUSH
76669: LD_VAR 0 59
76673: PUSH
76674: LD_VAR 0 60
76678: PUSH
76679: LD_VAR 0 61
76683: PUSH
76684: LD_VAR 0 62
76688: PUSH
76689: LD_VAR 0 63
76693: PUSH
76694: LD_VAR 0 64
76698: PUSH
76699: EMPTY
76700: LIST
76701: LIST
76702: LIST
76703: LIST
76704: LIST
76705: LIST
76706: PUSH
76707: LD_VAR 0 4
76711: PUSH
76712: LD_INT 1
76714: PLUS
76715: ARRAY
76716: ST_TO_ADDR
76717: GO 76720
76719: POP
// temp_list2 = [ ] ;
76720: LD_ADDR_VAR 0 10
76724: PUSH
76725: EMPTY
76726: ST_TO_ADDR
// for i in temp_list do
76727: LD_ADDR_VAR 0 8
76731: PUSH
76732: LD_VAR 0 9
76736: PUSH
76737: FOR_IN
76738: IFFALSE 76790
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
76740: LD_ADDR_VAR 0 10
76744: PUSH
76745: LD_VAR 0 10
76749: PUSH
76750: LD_VAR 0 8
76754: PUSH
76755: LD_INT 1
76757: ARRAY
76758: PUSH
76759: LD_VAR 0 2
76763: PLUS
76764: PUSH
76765: LD_VAR 0 8
76769: PUSH
76770: LD_INT 2
76772: ARRAY
76773: PUSH
76774: LD_VAR 0 3
76778: PLUS
76779: PUSH
76780: EMPTY
76781: LIST
76782: LIST
76783: PUSH
76784: EMPTY
76785: LIST
76786: ADD
76787: ST_TO_ADDR
76788: GO 76737
76790: POP
76791: POP
// result = temp_list2 ;
76792: LD_ADDR_VAR 0 7
76796: PUSH
76797: LD_VAR 0 10
76801: ST_TO_ADDR
// end ;
76802: LD_VAR 0 7
76806: RET
// export function EnemyInRange ( unit , dist ) ; begin
76807: LD_INT 0
76809: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
76810: LD_ADDR_VAR 0 3
76814: PUSH
76815: LD_VAR 0 1
76819: PPUSH
76820: CALL_OW 255
76824: PPUSH
76825: LD_VAR 0 1
76829: PPUSH
76830: CALL_OW 250
76834: PPUSH
76835: LD_VAR 0 1
76839: PPUSH
76840: CALL_OW 251
76844: PPUSH
76845: LD_VAR 0 2
76849: PPUSH
76850: CALL 50202 0 4
76854: PUSH
76855: LD_INT 4
76857: ARRAY
76858: ST_TO_ADDR
// end ;
76859: LD_VAR 0 3
76863: RET
// export function PlayerSeeMe ( unit ) ; begin
76864: LD_INT 0
76866: PPUSH
// result := See ( your_side , unit ) ;
76867: LD_ADDR_VAR 0 2
76871: PUSH
76872: LD_OWVAR 2
76876: PPUSH
76877: LD_VAR 0 1
76881: PPUSH
76882: CALL_OW 292
76886: ST_TO_ADDR
// end ;
76887: LD_VAR 0 2
76891: RET
// export function ReverseDir ( unit ) ; begin
76892: LD_INT 0
76894: PPUSH
// if not unit then
76895: LD_VAR 0 1
76899: NOT
76900: IFFALSE 76904
// exit ;
76902: GO 76927
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
76904: LD_ADDR_VAR 0 2
76908: PUSH
76909: LD_VAR 0 1
76913: PPUSH
76914: CALL_OW 254
76918: PUSH
76919: LD_INT 3
76921: PLUS
76922: PUSH
76923: LD_INT 6
76925: MOD
76926: ST_TO_ADDR
// end ;
76927: LD_VAR 0 2
76931: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
76932: LD_INT 0
76934: PPUSH
76935: PPUSH
76936: PPUSH
76937: PPUSH
76938: PPUSH
// if not hexes then
76939: LD_VAR 0 2
76943: NOT
76944: IFFALSE 76948
// exit ;
76946: GO 77096
// dist := 9999 ;
76948: LD_ADDR_VAR 0 5
76952: PUSH
76953: LD_INT 9999
76955: ST_TO_ADDR
// for i = 1 to hexes do
76956: LD_ADDR_VAR 0 4
76960: PUSH
76961: DOUBLE
76962: LD_INT 1
76964: DEC
76965: ST_TO_ADDR
76966: LD_VAR 0 2
76970: PUSH
76971: FOR_TO
76972: IFFALSE 77084
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
76974: LD_VAR 0 1
76978: PPUSH
76979: LD_VAR 0 2
76983: PUSH
76984: LD_VAR 0 4
76988: ARRAY
76989: PUSH
76990: LD_INT 1
76992: ARRAY
76993: PPUSH
76994: LD_VAR 0 2
76998: PUSH
76999: LD_VAR 0 4
77003: ARRAY
77004: PUSH
77005: LD_INT 2
77007: ARRAY
77008: PPUSH
77009: CALL_OW 297
77013: PUSH
77014: LD_VAR 0 5
77018: LESS
77019: IFFALSE 77082
// begin hex := hexes [ i ] ;
77021: LD_ADDR_VAR 0 7
77025: PUSH
77026: LD_VAR 0 2
77030: PUSH
77031: LD_VAR 0 4
77035: ARRAY
77036: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
77037: LD_ADDR_VAR 0 5
77041: PUSH
77042: LD_VAR 0 1
77046: PPUSH
77047: LD_VAR 0 2
77051: PUSH
77052: LD_VAR 0 4
77056: ARRAY
77057: PUSH
77058: LD_INT 1
77060: ARRAY
77061: PPUSH
77062: LD_VAR 0 2
77066: PUSH
77067: LD_VAR 0 4
77071: ARRAY
77072: PUSH
77073: LD_INT 2
77075: ARRAY
77076: PPUSH
77077: CALL_OW 297
77081: ST_TO_ADDR
// end ; end ;
77082: GO 76971
77084: POP
77085: POP
// result := hex ;
77086: LD_ADDR_VAR 0 3
77090: PUSH
77091: LD_VAR 0 7
77095: ST_TO_ADDR
// end ;
77096: LD_VAR 0 3
77100: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
77101: LD_INT 0
77103: PPUSH
77104: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
77105: LD_VAR 0 1
77109: NOT
77110: PUSH
77111: LD_VAR 0 1
77115: PUSH
77116: LD_INT 21
77118: PUSH
77119: LD_INT 2
77121: PUSH
77122: EMPTY
77123: LIST
77124: LIST
77125: PUSH
77126: LD_INT 23
77128: PUSH
77129: LD_INT 2
77131: PUSH
77132: EMPTY
77133: LIST
77134: LIST
77135: PUSH
77136: EMPTY
77137: LIST
77138: LIST
77139: PPUSH
77140: CALL_OW 69
77144: IN
77145: NOT
77146: OR
77147: IFFALSE 77151
// exit ;
77149: GO 77198
// for i = 1 to 3 do
77151: LD_ADDR_VAR 0 3
77155: PUSH
77156: DOUBLE
77157: LD_INT 1
77159: DEC
77160: ST_TO_ADDR
77161: LD_INT 3
77163: PUSH
77164: FOR_TO
77165: IFFALSE 77196
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
77167: LD_VAR 0 1
77171: PPUSH
77172: CALL_OW 250
77176: PPUSH
77177: LD_VAR 0 1
77181: PPUSH
77182: CALL_OW 251
77186: PPUSH
77187: LD_INT 1
77189: PPUSH
77190: CALL_OW 453
77194: GO 77164
77196: POP
77197: POP
// end ;
77198: LD_VAR 0 2
77202: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
77203: LD_INT 0
77205: PPUSH
77206: PPUSH
77207: PPUSH
77208: PPUSH
77209: PPUSH
77210: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
77211: LD_VAR 0 1
77215: NOT
77216: PUSH
77217: LD_VAR 0 2
77221: NOT
77222: OR
77223: PUSH
77224: LD_VAR 0 1
77228: PPUSH
77229: CALL_OW 314
77233: OR
77234: IFFALSE 77238
// exit ;
77236: GO 77679
// x := GetX ( enemy_unit ) ;
77238: LD_ADDR_VAR 0 7
77242: PUSH
77243: LD_VAR 0 2
77247: PPUSH
77248: CALL_OW 250
77252: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
77253: LD_ADDR_VAR 0 8
77257: PUSH
77258: LD_VAR 0 2
77262: PPUSH
77263: CALL_OW 251
77267: ST_TO_ADDR
// if not x or not y then
77268: LD_VAR 0 7
77272: NOT
77273: PUSH
77274: LD_VAR 0 8
77278: NOT
77279: OR
77280: IFFALSE 77284
// exit ;
77282: GO 77679
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
77284: LD_ADDR_VAR 0 6
77288: PUSH
77289: LD_VAR 0 7
77293: PPUSH
77294: LD_INT 0
77296: PPUSH
77297: LD_INT 4
77299: PPUSH
77300: CALL_OW 272
77304: PUSH
77305: LD_VAR 0 8
77309: PPUSH
77310: LD_INT 0
77312: PPUSH
77313: LD_INT 4
77315: PPUSH
77316: CALL_OW 273
77320: PUSH
77321: EMPTY
77322: LIST
77323: LIST
77324: PUSH
77325: LD_VAR 0 7
77329: PPUSH
77330: LD_INT 1
77332: PPUSH
77333: LD_INT 4
77335: PPUSH
77336: CALL_OW 272
77340: PUSH
77341: LD_VAR 0 8
77345: PPUSH
77346: LD_INT 1
77348: PPUSH
77349: LD_INT 4
77351: PPUSH
77352: CALL_OW 273
77356: PUSH
77357: EMPTY
77358: LIST
77359: LIST
77360: PUSH
77361: LD_VAR 0 7
77365: PPUSH
77366: LD_INT 2
77368: PPUSH
77369: LD_INT 4
77371: PPUSH
77372: CALL_OW 272
77376: PUSH
77377: LD_VAR 0 8
77381: PPUSH
77382: LD_INT 2
77384: PPUSH
77385: LD_INT 4
77387: PPUSH
77388: CALL_OW 273
77392: PUSH
77393: EMPTY
77394: LIST
77395: LIST
77396: PUSH
77397: LD_VAR 0 7
77401: PPUSH
77402: LD_INT 3
77404: PPUSH
77405: LD_INT 4
77407: PPUSH
77408: CALL_OW 272
77412: PUSH
77413: LD_VAR 0 8
77417: PPUSH
77418: LD_INT 3
77420: PPUSH
77421: LD_INT 4
77423: PPUSH
77424: CALL_OW 273
77428: PUSH
77429: EMPTY
77430: LIST
77431: LIST
77432: PUSH
77433: LD_VAR 0 7
77437: PPUSH
77438: LD_INT 4
77440: PPUSH
77441: LD_INT 4
77443: PPUSH
77444: CALL_OW 272
77448: PUSH
77449: LD_VAR 0 8
77453: PPUSH
77454: LD_INT 4
77456: PPUSH
77457: LD_INT 4
77459: PPUSH
77460: CALL_OW 273
77464: PUSH
77465: EMPTY
77466: LIST
77467: LIST
77468: PUSH
77469: LD_VAR 0 7
77473: PPUSH
77474: LD_INT 5
77476: PPUSH
77477: LD_INT 4
77479: PPUSH
77480: CALL_OW 272
77484: PUSH
77485: LD_VAR 0 8
77489: PPUSH
77490: LD_INT 5
77492: PPUSH
77493: LD_INT 4
77495: PPUSH
77496: CALL_OW 273
77500: PUSH
77501: EMPTY
77502: LIST
77503: LIST
77504: PUSH
77505: EMPTY
77506: LIST
77507: LIST
77508: LIST
77509: LIST
77510: LIST
77511: LIST
77512: ST_TO_ADDR
// for i = tmp downto 1 do
77513: LD_ADDR_VAR 0 4
77517: PUSH
77518: DOUBLE
77519: LD_VAR 0 6
77523: INC
77524: ST_TO_ADDR
77525: LD_INT 1
77527: PUSH
77528: FOR_DOWNTO
77529: IFFALSE 77630
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
77531: LD_VAR 0 6
77535: PUSH
77536: LD_VAR 0 4
77540: ARRAY
77541: PUSH
77542: LD_INT 1
77544: ARRAY
77545: PPUSH
77546: LD_VAR 0 6
77550: PUSH
77551: LD_VAR 0 4
77555: ARRAY
77556: PUSH
77557: LD_INT 2
77559: ARRAY
77560: PPUSH
77561: CALL_OW 488
77565: NOT
77566: PUSH
77567: LD_VAR 0 6
77571: PUSH
77572: LD_VAR 0 4
77576: ARRAY
77577: PUSH
77578: LD_INT 1
77580: ARRAY
77581: PPUSH
77582: LD_VAR 0 6
77586: PUSH
77587: LD_VAR 0 4
77591: ARRAY
77592: PUSH
77593: LD_INT 2
77595: ARRAY
77596: PPUSH
77597: CALL_OW 428
77601: PUSH
77602: LD_INT 0
77604: NONEQUAL
77605: OR
77606: IFFALSE 77628
// tmp := Delete ( tmp , i ) ;
77608: LD_ADDR_VAR 0 6
77612: PUSH
77613: LD_VAR 0 6
77617: PPUSH
77618: LD_VAR 0 4
77622: PPUSH
77623: CALL_OW 3
77627: ST_TO_ADDR
77628: GO 77528
77630: POP
77631: POP
// j := GetClosestHex ( unit , tmp ) ;
77632: LD_ADDR_VAR 0 5
77636: PUSH
77637: LD_VAR 0 1
77641: PPUSH
77642: LD_VAR 0 6
77646: PPUSH
77647: CALL 76932 0 2
77651: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
77652: LD_VAR 0 1
77656: PPUSH
77657: LD_VAR 0 5
77661: PUSH
77662: LD_INT 1
77664: ARRAY
77665: PPUSH
77666: LD_VAR 0 5
77670: PUSH
77671: LD_INT 2
77673: ARRAY
77674: PPUSH
77675: CALL_OW 111
// end ;
77679: LD_VAR 0 3
77683: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77684: LD_INT 0
77686: PPUSH
77687: PPUSH
77688: PPUSH
// uc_side = 0 ;
77689: LD_ADDR_OWVAR 20
77693: PUSH
77694: LD_INT 0
77696: ST_TO_ADDR
// uc_nation = 0 ;
77697: LD_ADDR_OWVAR 21
77701: PUSH
77702: LD_INT 0
77704: ST_TO_ADDR
// InitHc_All ( ) ;
77705: CALL_OW 584
// InitVc ;
77709: CALL_OW 20
// if mastodonts then
77713: LD_VAR 0 6
77717: IFFALSE 77784
// for i = 1 to mastodonts do
77719: LD_ADDR_VAR 0 11
77723: PUSH
77724: DOUBLE
77725: LD_INT 1
77727: DEC
77728: ST_TO_ADDR
77729: LD_VAR 0 6
77733: PUSH
77734: FOR_TO
77735: IFFALSE 77782
// begin vc_chassis := 31 ;
77737: LD_ADDR_OWVAR 37
77741: PUSH
77742: LD_INT 31
77744: ST_TO_ADDR
// vc_control := control_rider ;
77745: LD_ADDR_OWVAR 38
77749: PUSH
77750: LD_INT 4
77752: ST_TO_ADDR
// animal := CreateVehicle ;
77753: LD_ADDR_VAR 0 12
77757: PUSH
77758: CALL_OW 45
77762: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77763: LD_VAR 0 12
77767: PPUSH
77768: LD_VAR 0 8
77772: PPUSH
77773: LD_INT 0
77775: PPUSH
77776: CALL 79972 0 3
// end ;
77780: GO 77734
77782: POP
77783: POP
// if horses then
77784: LD_VAR 0 5
77788: IFFALSE 77855
// for i = 1 to horses do
77790: LD_ADDR_VAR 0 11
77794: PUSH
77795: DOUBLE
77796: LD_INT 1
77798: DEC
77799: ST_TO_ADDR
77800: LD_VAR 0 5
77804: PUSH
77805: FOR_TO
77806: IFFALSE 77853
// begin hc_class := 21 ;
77808: LD_ADDR_OWVAR 28
77812: PUSH
77813: LD_INT 21
77815: ST_TO_ADDR
// hc_gallery :=  ;
77816: LD_ADDR_OWVAR 33
77820: PUSH
77821: LD_STRING 
77823: ST_TO_ADDR
// animal := CreateHuman ;
77824: LD_ADDR_VAR 0 12
77828: PUSH
77829: CALL_OW 44
77833: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77834: LD_VAR 0 12
77838: PPUSH
77839: LD_VAR 0 8
77843: PPUSH
77844: LD_INT 0
77846: PPUSH
77847: CALL 79972 0 3
// end ;
77851: GO 77805
77853: POP
77854: POP
// if birds then
77855: LD_VAR 0 1
77859: IFFALSE 77926
// for i = 1 to birds do
77861: LD_ADDR_VAR 0 11
77865: PUSH
77866: DOUBLE
77867: LD_INT 1
77869: DEC
77870: ST_TO_ADDR
77871: LD_VAR 0 1
77875: PUSH
77876: FOR_TO
77877: IFFALSE 77924
// begin hc_class = 18 ;
77879: LD_ADDR_OWVAR 28
77883: PUSH
77884: LD_INT 18
77886: ST_TO_ADDR
// hc_gallery =  ;
77887: LD_ADDR_OWVAR 33
77891: PUSH
77892: LD_STRING 
77894: ST_TO_ADDR
// animal := CreateHuman ;
77895: LD_ADDR_VAR 0 12
77899: PUSH
77900: CALL_OW 44
77904: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77905: LD_VAR 0 12
77909: PPUSH
77910: LD_VAR 0 8
77914: PPUSH
77915: LD_INT 0
77917: PPUSH
77918: CALL 79972 0 3
// end ;
77922: GO 77876
77924: POP
77925: POP
// if tigers then
77926: LD_VAR 0 2
77930: IFFALSE 78014
// for i = 1 to tigers do
77932: LD_ADDR_VAR 0 11
77936: PUSH
77937: DOUBLE
77938: LD_INT 1
77940: DEC
77941: ST_TO_ADDR
77942: LD_VAR 0 2
77946: PUSH
77947: FOR_TO
77948: IFFALSE 78012
// begin hc_class = class_tiger ;
77950: LD_ADDR_OWVAR 28
77954: PUSH
77955: LD_INT 14
77957: ST_TO_ADDR
// hc_gallery =  ;
77958: LD_ADDR_OWVAR 33
77962: PUSH
77963: LD_STRING 
77965: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77966: LD_ADDR_OWVAR 35
77970: PUSH
77971: LD_INT 7
77973: NEG
77974: PPUSH
77975: LD_INT 7
77977: PPUSH
77978: CALL_OW 12
77982: ST_TO_ADDR
// animal := CreateHuman ;
77983: LD_ADDR_VAR 0 12
77987: PUSH
77988: CALL_OW 44
77992: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77993: LD_VAR 0 12
77997: PPUSH
77998: LD_VAR 0 8
78002: PPUSH
78003: LD_INT 0
78005: PPUSH
78006: CALL 79972 0 3
// end ;
78010: GO 77947
78012: POP
78013: POP
// if apemans then
78014: LD_VAR 0 3
78018: IFFALSE 78141
// for i = 1 to apemans do
78020: LD_ADDR_VAR 0 11
78024: PUSH
78025: DOUBLE
78026: LD_INT 1
78028: DEC
78029: ST_TO_ADDR
78030: LD_VAR 0 3
78034: PUSH
78035: FOR_TO
78036: IFFALSE 78139
// begin hc_class = class_apeman ;
78038: LD_ADDR_OWVAR 28
78042: PUSH
78043: LD_INT 12
78045: ST_TO_ADDR
// hc_gallery =  ;
78046: LD_ADDR_OWVAR 33
78050: PUSH
78051: LD_STRING 
78053: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
78054: LD_ADDR_OWVAR 35
78058: PUSH
78059: LD_INT 2
78061: NEG
78062: PPUSH
78063: LD_INT 2
78065: PPUSH
78066: CALL_OW 12
78070: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78071: LD_ADDR_OWVAR 31
78075: PUSH
78076: LD_INT 1
78078: PPUSH
78079: LD_INT 3
78081: PPUSH
78082: CALL_OW 12
78086: PUSH
78087: LD_INT 1
78089: PPUSH
78090: LD_INT 3
78092: PPUSH
78093: CALL_OW 12
78097: PUSH
78098: LD_INT 0
78100: PUSH
78101: LD_INT 0
78103: PUSH
78104: EMPTY
78105: LIST
78106: LIST
78107: LIST
78108: LIST
78109: ST_TO_ADDR
// animal := CreateHuman ;
78110: LD_ADDR_VAR 0 12
78114: PUSH
78115: CALL_OW 44
78119: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78120: LD_VAR 0 12
78124: PPUSH
78125: LD_VAR 0 8
78129: PPUSH
78130: LD_INT 0
78132: PPUSH
78133: CALL 79972 0 3
// end ;
78137: GO 78035
78139: POP
78140: POP
// if enchidnas then
78141: LD_VAR 0 4
78145: IFFALSE 78212
// for i = 1 to enchidnas do
78147: LD_ADDR_VAR 0 11
78151: PUSH
78152: DOUBLE
78153: LD_INT 1
78155: DEC
78156: ST_TO_ADDR
78157: LD_VAR 0 4
78161: PUSH
78162: FOR_TO
78163: IFFALSE 78210
// begin hc_class = 13 ;
78165: LD_ADDR_OWVAR 28
78169: PUSH
78170: LD_INT 13
78172: ST_TO_ADDR
// hc_gallery =  ;
78173: LD_ADDR_OWVAR 33
78177: PUSH
78178: LD_STRING 
78180: ST_TO_ADDR
// animal := CreateHuman ;
78181: LD_ADDR_VAR 0 12
78185: PUSH
78186: CALL_OW 44
78190: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78191: LD_VAR 0 12
78195: PPUSH
78196: LD_VAR 0 8
78200: PPUSH
78201: LD_INT 0
78203: PPUSH
78204: CALL 79972 0 3
// end ;
78208: GO 78162
78210: POP
78211: POP
// if fishes then
78212: LD_VAR 0 7
78216: IFFALSE 78283
// for i = 1 to fishes do
78218: LD_ADDR_VAR 0 11
78222: PUSH
78223: DOUBLE
78224: LD_INT 1
78226: DEC
78227: ST_TO_ADDR
78228: LD_VAR 0 7
78232: PUSH
78233: FOR_TO
78234: IFFALSE 78281
// begin hc_class = 20 ;
78236: LD_ADDR_OWVAR 28
78240: PUSH
78241: LD_INT 20
78243: ST_TO_ADDR
// hc_gallery =  ;
78244: LD_ADDR_OWVAR 33
78248: PUSH
78249: LD_STRING 
78251: ST_TO_ADDR
// animal := CreateHuman ;
78252: LD_ADDR_VAR 0 12
78256: PUSH
78257: CALL_OW 44
78261: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78262: LD_VAR 0 12
78266: PPUSH
78267: LD_VAR 0 9
78271: PPUSH
78272: LD_INT 0
78274: PPUSH
78275: CALL 79972 0 3
// end ;
78279: GO 78233
78281: POP
78282: POP
// end ;
78283: LD_VAR 0 10
78287: RET
// export function WantHeal ( sci , unit ) ; begin
78288: LD_INT 0
78290: PPUSH
// if GetTaskList ( sci ) > 0 then
78291: LD_VAR 0 1
78295: PPUSH
78296: CALL_OW 437
78300: PUSH
78301: LD_INT 0
78303: GREATER
78304: IFFALSE 78374
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78306: LD_VAR 0 1
78310: PPUSH
78311: CALL_OW 437
78315: PUSH
78316: LD_INT 1
78318: ARRAY
78319: PUSH
78320: LD_INT 1
78322: ARRAY
78323: PUSH
78324: LD_STRING l
78326: EQUAL
78327: PUSH
78328: LD_VAR 0 1
78332: PPUSH
78333: CALL_OW 437
78337: PUSH
78338: LD_INT 1
78340: ARRAY
78341: PUSH
78342: LD_INT 4
78344: ARRAY
78345: PUSH
78346: LD_VAR 0 2
78350: EQUAL
78351: AND
78352: IFFALSE 78364
// result := true else
78354: LD_ADDR_VAR 0 3
78358: PUSH
78359: LD_INT 1
78361: ST_TO_ADDR
78362: GO 78372
// result := false ;
78364: LD_ADDR_VAR 0 3
78368: PUSH
78369: LD_INT 0
78371: ST_TO_ADDR
// end else
78372: GO 78382
// result := false ;
78374: LD_ADDR_VAR 0 3
78378: PUSH
78379: LD_INT 0
78381: ST_TO_ADDR
// end ;
78382: LD_VAR 0 3
78386: RET
// export function HealTarget ( sci ) ; begin
78387: LD_INT 0
78389: PPUSH
// if not sci then
78390: LD_VAR 0 1
78394: NOT
78395: IFFALSE 78399
// exit ;
78397: GO 78464
// result := 0 ;
78399: LD_ADDR_VAR 0 2
78403: PUSH
78404: LD_INT 0
78406: ST_TO_ADDR
// if GetTaskList ( sci ) then
78407: LD_VAR 0 1
78411: PPUSH
78412: CALL_OW 437
78416: IFFALSE 78464
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
78418: LD_VAR 0 1
78422: PPUSH
78423: CALL_OW 437
78427: PUSH
78428: LD_INT 1
78430: ARRAY
78431: PUSH
78432: LD_INT 1
78434: ARRAY
78435: PUSH
78436: LD_STRING l
78438: EQUAL
78439: IFFALSE 78464
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
78441: LD_ADDR_VAR 0 2
78445: PUSH
78446: LD_VAR 0 1
78450: PPUSH
78451: CALL_OW 437
78455: PUSH
78456: LD_INT 1
78458: ARRAY
78459: PUSH
78460: LD_INT 4
78462: ARRAY
78463: ST_TO_ADDR
// end ;
78464: LD_VAR 0 2
78468: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
78469: LD_INT 0
78471: PPUSH
78472: PPUSH
78473: PPUSH
78474: PPUSH
// if not base_units then
78475: LD_VAR 0 1
78479: NOT
78480: IFFALSE 78484
// exit ;
78482: GO 78571
// result := false ;
78484: LD_ADDR_VAR 0 2
78488: PUSH
78489: LD_INT 0
78491: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
78492: LD_ADDR_VAR 0 5
78496: PUSH
78497: LD_VAR 0 1
78501: PPUSH
78502: LD_INT 21
78504: PUSH
78505: LD_INT 3
78507: PUSH
78508: EMPTY
78509: LIST
78510: LIST
78511: PPUSH
78512: CALL_OW 72
78516: ST_TO_ADDR
// if not tmp then
78517: LD_VAR 0 5
78521: NOT
78522: IFFALSE 78526
// exit ;
78524: GO 78571
// for i in tmp do
78526: LD_ADDR_VAR 0 3
78530: PUSH
78531: LD_VAR 0 5
78535: PUSH
78536: FOR_IN
78537: IFFALSE 78569
// begin result := EnemyInRange ( i , 22 ) ;
78539: LD_ADDR_VAR 0 2
78543: PUSH
78544: LD_VAR 0 3
78548: PPUSH
78549: LD_INT 22
78551: PPUSH
78552: CALL 76807 0 2
78556: ST_TO_ADDR
// if result then
78557: LD_VAR 0 2
78561: IFFALSE 78567
// exit ;
78563: POP
78564: POP
78565: GO 78571
// end ;
78567: GO 78536
78569: POP
78570: POP
// end ;
78571: LD_VAR 0 2
78575: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
78576: LD_INT 0
78578: PPUSH
78579: PPUSH
// if not units then
78580: LD_VAR 0 1
78584: NOT
78585: IFFALSE 78589
// exit ;
78587: GO 78659
// result := [ ] ;
78589: LD_ADDR_VAR 0 3
78593: PUSH
78594: EMPTY
78595: ST_TO_ADDR
// for i in units do
78596: LD_ADDR_VAR 0 4
78600: PUSH
78601: LD_VAR 0 1
78605: PUSH
78606: FOR_IN
78607: IFFALSE 78657
// if GetTag ( i ) = tag then
78609: LD_VAR 0 4
78613: PPUSH
78614: CALL_OW 110
78618: PUSH
78619: LD_VAR 0 2
78623: EQUAL
78624: IFFALSE 78655
// result := Insert ( result , result + 1 , i ) ;
78626: LD_ADDR_VAR 0 3
78630: PUSH
78631: LD_VAR 0 3
78635: PPUSH
78636: LD_VAR 0 3
78640: PUSH
78641: LD_INT 1
78643: PLUS
78644: PPUSH
78645: LD_VAR 0 4
78649: PPUSH
78650: CALL_OW 2
78654: ST_TO_ADDR
78655: GO 78606
78657: POP
78658: POP
// end ;
78659: LD_VAR 0 3
78663: RET
// export function IsDriver ( un ) ; begin
78664: LD_INT 0
78666: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
78667: LD_ADDR_VAR 0 2
78671: PUSH
78672: LD_VAR 0 1
78676: PUSH
78677: LD_INT 55
78679: PUSH
78680: EMPTY
78681: LIST
78682: PPUSH
78683: CALL_OW 69
78687: IN
78688: ST_TO_ADDR
// end ;
78689: LD_VAR 0 2
78693: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78694: LD_INT 0
78696: PPUSH
78697: PPUSH
// list := [ ] ;
78698: LD_ADDR_VAR 0 5
78702: PUSH
78703: EMPTY
78704: ST_TO_ADDR
// case d of 0 :
78705: LD_VAR 0 3
78709: PUSH
78710: LD_INT 0
78712: DOUBLE
78713: EQUAL
78714: IFTRUE 78718
78716: GO 78851
78718: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78719: LD_ADDR_VAR 0 5
78723: PUSH
78724: LD_VAR 0 1
78728: PUSH
78729: LD_INT 4
78731: MINUS
78732: PUSH
78733: LD_VAR 0 2
78737: PUSH
78738: LD_INT 4
78740: MINUS
78741: PUSH
78742: LD_INT 2
78744: PUSH
78745: EMPTY
78746: LIST
78747: LIST
78748: LIST
78749: PUSH
78750: LD_VAR 0 1
78754: PUSH
78755: LD_INT 3
78757: MINUS
78758: PUSH
78759: LD_VAR 0 2
78763: PUSH
78764: LD_INT 1
78766: PUSH
78767: EMPTY
78768: LIST
78769: LIST
78770: LIST
78771: PUSH
78772: LD_VAR 0 1
78776: PUSH
78777: LD_INT 4
78779: PLUS
78780: PUSH
78781: LD_VAR 0 2
78785: PUSH
78786: LD_INT 4
78788: PUSH
78789: EMPTY
78790: LIST
78791: LIST
78792: LIST
78793: PUSH
78794: LD_VAR 0 1
78798: PUSH
78799: LD_INT 3
78801: PLUS
78802: PUSH
78803: LD_VAR 0 2
78807: PUSH
78808: LD_INT 3
78810: PLUS
78811: PUSH
78812: LD_INT 5
78814: PUSH
78815: EMPTY
78816: LIST
78817: LIST
78818: LIST
78819: PUSH
78820: LD_VAR 0 1
78824: PUSH
78825: LD_VAR 0 2
78829: PUSH
78830: LD_INT 4
78832: PLUS
78833: PUSH
78834: LD_INT 0
78836: PUSH
78837: EMPTY
78838: LIST
78839: LIST
78840: LIST
78841: PUSH
78842: EMPTY
78843: LIST
78844: LIST
78845: LIST
78846: LIST
78847: LIST
78848: ST_TO_ADDR
// end ; 1 :
78849: GO 79549
78851: LD_INT 1
78853: DOUBLE
78854: EQUAL
78855: IFTRUE 78859
78857: GO 78992
78859: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78860: LD_ADDR_VAR 0 5
78864: PUSH
78865: LD_VAR 0 1
78869: PUSH
78870: LD_VAR 0 2
78874: PUSH
78875: LD_INT 4
78877: MINUS
78878: PUSH
78879: LD_INT 3
78881: PUSH
78882: EMPTY
78883: LIST
78884: LIST
78885: LIST
78886: PUSH
78887: LD_VAR 0 1
78891: PUSH
78892: LD_INT 3
78894: MINUS
78895: PUSH
78896: LD_VAR 0 2
78900: PUSH
78901: LD_INT 3
78903: MINUS
78904: PUSH
78905: LD_INT 2
78907: PUSH
78908: EMPTY
78909: LIST
78910: LIST
78911: LIST
78912: PUSH
78913: LD_VAR 0 1
78917: PUSH
78918: LD_INT 4
78920: MINUS
78921: PUSH
78922: LD_VAR 0 2
78926: PUSH
78927: LD_INT 1
78929: PUSH
78930: EMPTY
78931: LIST
78932: LIST
78933: LIST
78934: PUSH
78935: LD_VAR 0 1
78939: PUSH
78940: LD_VAR 0 2
78944: PUSH
78945: LD_INT 3
78947: PLUS
78948: PUSH
78949: LD_INT 0
78951: PUSH
78952: EMPTY
78953: LIST
78954: LIST
78955: LIST
78956: PUSH
78957: LD_VAR 0 1
78961: PUSH
78962: LD_INT 4
78964: PLUS
78965: PUSH
78966: LD_VAR 0 2
78970: PUSH
78971: LD_INT 4
78973: PLUS
78974: PUSH
78975: LD_INT 5
78977: PUSH
78978: EMPTY
78979: LIST
78980: LIST
78981: LIST
78982: PUSH
78983: EMPTY
78984: LIST
78985: LIST
78986: LIST
78987: LIST
78988: LIST
78989: ST_TO_ADDR
// end ; 2 :
78990: GO 79549
78992: LD_INT 2
78994: DOUBLE
78995: EQUAL
78996: IFTRUE 79000
78998: GO 79129
79000: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
79001: LD_ADDR_VAR 0 5
79005: PUSH
79006: LD_VAR 0 1
79010: PUSH
79011: LD_VAR 0 2
79015: PUSH
79016: LD_INT 3
79018: MINUS
79019: PUSH
79020: LD_INT 3
79022: PUSH
79023: EMPTY
79024: LIST
79025: LIST
79026: LIST
79027: PUSH
79028: LD_VAR 0 1
79032: PUSH
79033: LD_INT 4
79035: PLUS
79036: PUSH
79037: LD_VAR 0 2
79041: PUSH
79042: LD_INT 4
79044: PUSH
79045: EMPTY
79046: LIST
79047: LIST
79048: LIST
79049: PUSH
79050: LD_VAR 0 1
79054: PUSH
79055: LD_VAR 0 2
79059: PUSH
79060: LD_INT 4
79062: PLUS
79063: PUSH
79064: LD_INT 0
79066: PUSH
79067: EMPTY
79068: LIST
79069: LIST
79070: LIST
79071: PUSH
79072: LD_VAR 0 1
79076: PUSH
79077: LD_INT 3
79079: MINUS
79080: PUSH
79081: LD_VAR 0 2
79085: PUSH
79086: LD_INT 1
79088: PUSH
79089: EMPTY
79090: LIST
79091: LIST
79092: LIST
79093: PUSH
79094: LD_VAR 0 1
79098: PUSH
79099: LD_INT 4
79101: MINUS
79102: PUSH
79103: LD_VAR 0 2
79107: PUSH
79108: LD_INT 4
79110: MINUS
79111: PUSH
79112: LD_INT 2
79114: PUSH
79115: EMPTY
79116: LIST
79117: LIST
79118: LIST
79119: PUSH
79120: EMPTY
79121: LIST
79122: LIST
79123: LIST
79124: LIST
79125: LIST
79126: ST_TO_ADDR
// end ; 3 :
79127: GO 79549
79129: LD_INT 3
79131: DOUBLE
79132: EQUAL
79133: IFTRUE 79137
79135: GO 79270
79137: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
79138: LD_ADDR_VAR 0 5
79142: PUSH
79143: LD_VAR 0 1
79147: PUSH
79148: LD_INT 3
79150: PLUS
79151: PUSH
79152: LD_VAR 0 2
79156: PUSH
79157: LD_INT 4
79159: PUSH
79160: EMPTY
79161: LIST
79162: LIST
79163: LIST
79164: PUSH
79165: LD_VAR 0 1
79169: PUSH
79170: LD_INT 4
79172: PLUS
79173: PUSH
79174: LD_VAR 0 2
79178: PUSH
79179: LD_INT 4
79181: PLUS
79182: PUSH
79183: LD_INT 5
79185: PUSH
79186: EMPTY
79187: LIST
79188: LIST
79189: LIST
79190: PUSH
79191: LD_VAR 0 1
79195: PUSH
79196: LD_INT 4
79198: MINUS
79199: PUSH
79200: LD_VAR 0 2
79204: PUSH
79205: LD_INT 1
79207: PUSH
79208: EMPTY
79209: LIST
79210: LIST
79211: LIST
79212: PUSH
79213: LD_VAR 0 1
79217: PUSH
79218: LD_VAR 0 2
79222: PUSH
79223: LD_INT 4
79225: MINUS
79226: PUSH
79227: LD_INT 3
79229: PUSH
79230: EMPTY
79231: LIST
79232: LIST
79233: LIST
79234: PUSH
79235: LD_VAR 0 1
79239: PUSH
79240: LD_INT 3
79242: MINUS
79243: PUSH
79244: LD_VAR 0 2
79248: PUSH
79249: LD_INT 3
79251: MINUS
79252: PUSH
79253: LD_INT 2
79255: PUSH
79256: EMPTY
79257: LIST
79258: LIST
79259: LIST
79260: PUSH
79261: EMPTY
79262: LIST
79263: LIST
79264: LIST
79265: LIST
79266: LIST
79267: ST_TO_ADDR
// end ; 4 :
79268: GO 79549
79270: LD_INT 4
79272: DOUBLE
79273: EQUAL
79274: IFTRUE 79278
79276: GO 79411
79278: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
79279: LD_ADDR_VAR 0 5
79283: PUSH
79284: LD_VAR 0 1
79288: PUSH
79289: LD_VAR 0 2
79293: PUSH
79294: LD_INT 4
79296: PLUS
79297: PUSH
79298: LD_INT 0
79300: PUSH
79301: EMPTY
79302: LIST
79303: LIST
79304: LIST
79305: PUSH
79306: LD_VAR 0 1
79310: PUSH
79311: LD_INT 3
79313: PLUS
79314: PUSH
79315: LD_VAR 0 2
79319: PUSH
79320: LD_INT 3
79322: PLUS
79323: PUSH
79324: LD_INT 5
79326: PUSH
79327: EMPTY
79328: LIST
79329: LIST
79330: LIST
79331: PUSH
79332: LD_VAR 0 1
79336: PUSH
79337: LD_INT 4
79339: PLUS
79340: PUSH
79341: LD_VAR 0 2
79345: PUSH
79346: LD_INT 4
79348: PUSH
79349: EMPTY
79350: LIST
79351: LIST
79352: LIST
79353: PUSH
79354: LD_VAR 0 1
79358: PUSH
79359: LD_VAR 0 2
79363: PUSH
79364: LD_INT 3
79366: MINUS
79367: PUSH
79368: LD_INT 3
79370: PUSH
79371: EMPTY
79372: LIST
79373: LIST
79374: LIST
79375: PUSH
79376: LD_VAR 0 1
79380: PUSH
79381: LD_INT 4
79383: MINUS
79384: PUSH
79385: LD_VAR 0 2
79389: PUSH
79390: LD_INT 4
79392: MINUS
79393: PUSH
79394: LD_INT 2
79396: PUSH
79397: EMPTY
79398: LIST
79399: LIST
79400: LIST
79401: PUSH
79402: EMPTY
79403: LIST
79404: LIST
79405: LIST
79406: LIST
79407: LIST
79408: ST_TO_ADDR
// end ; 5 :
79409: GO 79549
79411: LD_INT 5
79413: DOUBLE
79414: EQUAL
79415: IFTRUE 79419
79417: GO 79548
79419: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
79420: LD_ADDR_VAR 0 5
79424: PUSH
79425: LD_VAR 0 1
79429: PUSH
79430: LD_INT 4
79432: MINUS
79433: PUSH
79434: LD_VAR 0 2
79438: PUSH
79439: LD_INT 1
79441: PUSH
79442: EMPTY
79443: LIST
79444: LIST
79445: LIST
79446: PUSH
79447: LD_VAR 0 1
79451: PUSH
79452: LD_VAR 0 2
79456: PUSH
79457: LD_INT 4
79459: MINUS
79460: PUSH
79461: LD_INT 3
79463: PUSH
79464: EMPTY
79465: LIST
79466: LIST
79467: LIST
79468: PUSH
79469: LD_VAR 0 1
79473: PUSH
79474: LD_INT 4
79476: PLUS
79477: PUSH
79478: LD_VAR 0 2
79482: PUSH
79483: LD_INT 4
79485: PLUS
79486: PUSH
79487: LD_INT 5
79489: PUSH
79490: EMPTY
79491: LIST
79492: LIST
79493: LIST
79494: PUSH
79495: LD_VAR 0 1
79499: PUSH
79500: LD_INT 3
79502: PLUS
79503: PUSH
79504: LD_VAR 0 2
79508: PUSH
79509: LD_INT 4
79511: PUSH
79512: EMPTY
79513: LIST
79514: LIST
79515: LIST
79516: PUSH
79517: LD_VAR 0 1
79521: PUSH
79522: LD_VAR 0 2
79526: PUSH
79527: LD_INT 3
79529: PLUS
79530: PUSH
79531: LD_INT 0
79533: PUSH
79534: EMPTY
79535: LIST
79536: LIST
79537: LIST
79538: PUSH
79539: EMPTY
79540: LIST
79541: LIST
79542: LIST
79543: LIST
79544: LIST
79545: ST_TO_ADDR
// end ; end ;
79546: GO 79549
79548: POP
// result := list ;
79549: LD_ADDR_VAR 0 4
79553: PUSH
79554: LD_VAR 0 5
79558: ST_TO_ADDR
// end ;
79559: LD_VAR 0 4
79563: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
79564: LD_INT 0
79566: PPUSH
79567: PPUSH
79568: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
79569: LD_VAR 0 1
79573: NOT
79574: PUSH
79575: LD_VAR 0 2
79579: PUSH
79580: LD_INT 1
79582: PUSH
79583: LD_INT 2
79585: PUSH
79586: LD_INT 3
79588: PUSH
79589: LD_INT 4
79591: PUSH
79592: EMPTY
79593: LIST
79594: LIST
79595: LIST
79596: LIST
79597: IN
79598: NOT
79599: OR
79600: IFFALSE 79604
// exit ;
79602: GO 79696
// tmp := [ ] ;
79604: LD_ADDR_VAR 0 5
79608: PUSH
79609: EMPTY
79610: ST_TO_ADDR
// for i in units do
79611: LD_ADDR_VAR 0 4
79615: PUSH
79616: LD_VAR 0 1
79620: PUSH
79621: FOR_IN
79622: IFFALSE 79665
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
79624: LD_ADDR_VAR 0 5
79628: PUSH
79629: LD_VAR 0 5
79633: PPUSH
79634: LD_VAR 0 5
79638: PUSH
79639: LD_INT 1
79641: PLUS
79642: PPUSH
79643: LD_VAR 0 4
79647: PPUSH
79648: LD_VAR 0 2
79652: PPUSH
79653: CALL_OW 259
79657: PPUSH
79658: CALL_OW 2
79662: ST_TO_ADDR
79663: GO 79621
79665: POP
79666: POP
// if not tmp then
79667: LD_VAR 0 5
79671: NOT
79672: IFFALSE 79676
// exit ;
79674: GO 79696
// result := SortListByListDesc ( units , tmp ) ;
79676: LD_ADDR_VAR 0 3
79680: PUSH
79681: LD_VAR 0 1
79685: PPUSH
79686: LD_VAR 0 5
79690: PPUSH
79691: CALL_OW 77
79695: ST_TO_ADDR
// end ;
79696: LD_VAR 0 3
79700: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79701: LD_INT 0
79703: PPUSH
79704: PPUSH
79705: PPUSH
// result := false ;
79706: LD_ADDR_VAR 0 3
79710: PUSH
79711: LD_INT 0
79713: ST_TO_ADDR
// x := GetX ( building ) ;
79714: LD_ADDR_VAR 0 4
79718: PUSH
79719: LD_VAR 0 2
79723: PPUSH
79724: CALL_OW 250
79728: ST_TO_ADDR
// y := GetY ( building ) ;
79729: LD_ADDR_VAR 0 5
79733: PUSH
79734: LD_VAR 0 2
79738: PPUSH
79739: CALL_OW 251
79743: ST_TO_ADDR
// if not building or not x or not y then
79744: LD_VAR 0 2
79748: NOT
79749: PUSH
79750: LD_VAR 0 4
79754: NOT
79755: OR
79756: PUSH
79757: LD_VAR 0 5
79761: NOT
79762: OR
79763: IFFALSE 79767
// exit ;
79765: GO 79859
// if GetTaskList ( unit ) then
79767: LD_VAR 0 1
79771: PPUSH
79772: CALL_OW 437
79776: IFFALSE 79859
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79778: LD_STRING e
79780: PUSH
79781: LD_VAR 0 1
79785: PPUSH
79786: CALL_OW 437
79790: PUSH
79791: LD_INT 1
79793: ARRAY
79794: PUSH
79795: LD_INT 1
79797: ARRAY
79798: EQUAL
79799: PUSH
79800: LD_VAR 0 4
79804: PUSH
79805: LD_VAR 0 1
79809: PPUSH
79810: CALL_OW 437
79814: PUSH
79815: LD_INT 1
79817: ARRAY
79818: PUSH
79819: LD_INT 2
79821: ARRAY
79822: EQUAL
79823: AND
79824: PUSH
79825: LD_VAR 0 5
79829: PUSH
79830: LD_VAR 0 1
79834: PPUSH
79835: CALL_OW 437
79839: PUSH
79840: LD_INT 1
79842: ARRAY
79843: PUSH
79844: LD_INT 3
79846: ARRAY
79847: EQUAL
79848: AND
79849: IFFALSE 79859
// result := true end ;
79851: LD_ADDR_VAR 0 3
79855: PUSH
79856: LD_INT 1
79858: ST_TO_ADDR
// end ;
79859: LD_VAR 0 3
79863: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
79864: LD_INT 0
79866: PPUSH
// result := false ;
79867: LD_ADDR_VAR 0 4
79871: PUSH
79872: LD_INT 0
79874: ST_TO_ADDR
// if GetTaskList ( unit ) then
79875: LD_VAR 0 1
79879: PPUSH
79880: CALL_OW 437
79884: IFFALSE 79967
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79886: LD_STRING M
79888: PUSH
79889: LD_VAR 0 1
79893: PPUSH
79894: CALL_OW 437
79898: PUSH
79899: LD_INT 1
79901: ARRAY
79902: PUSH
79903: LD_INT 1
79905: ARRAY
79906: EQUAL
79907: PUSH
79908: LD_VAR 0 2
79912: PUSH
79913: LD_VAR 0 1
79917: PPUSH
79918: CALL_OW 437
79922: PUSH
79923: LD_INT 1
79925: ARRAY
79926: PUSH
79927: LD_INT 2
79929: ARRAY
79930: EQUAL
79931: AND
79932: PUSH
79933: LD_VAR 0 3
79937: PUSH
79938: LD_VAR 0 1
79942: PPUSH
79943: CALL_OW 437
79947: PUSH
79948: LD_INT 1
79950: ARRAY
79951: PUSH
79952: LD_INT 3
79954: ARRAY
79955: EQUAL
79956: AND
79957: IFFALSE 79967
// result := true ;
79959: LD_ADDR_VAR 0 4
79963: PUSH
79964: LD_INT 1
79966: ST_TO_ADDR
// end ; end ;
79967: LD_VAR 0 4
79971: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79972: LD_INT 0
79974: PPUSH
79975: PPUSH
79976: PPUSH
79977: PPUSH
// if not unit or not area then
79978: LD_VAR 0 1
79982: NOT
79983: PUSH
79984: LD_VAR 0 2
79988: NOT
79989: OR
79990: IFFALSE 79994
// exit ;
79992: GO 80158
// tmp := AreaToList ( area , i ) ;
79994: LD_ADDR_VAR 0 6
79998: PUSH
79999: LD_VAR 0 2
80003: PPUSH
80004: LD_VAR 0 5
80008: PPUSH
80009: CALL_OW 517
80013: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
80014: LD_ADDR_VAR 0 5
80018: PUSH
80019: DOUBLE
80020: LD_INT 1
80022: DEC
80023: ST_TO_ADDR
80024: LD_VAR 0 6
80028: PUSH
80029: LD_INT 1
80031: ARRAY
80032: PUSH
80033: FOR_TO
80034: IFFALSE 80156
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
80036: LD_ADDR_VAR 0 7
80040: PUSH
80041: LD_VAR 0 6
80045: PUSH
80046: LD_INT 1
80048: ARRAY
80049: PUSH
80050: LD_VAR 0 5
80054: ARRAY
80055: PUSH
80056: LD_VAR 0 6
80060: PUSH
80061: LD_INT 2
80063: ARRAY
80064: PUSH
80065: LD_VAR 0 5
80069: ARRAY
80070: PUSH
80071: EMPTY
80072: LIST
80073: LIST
80074: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
80075: LD_VAR 0 7
80079: PUSH
80080: LD_INT 1
80082: ARRAY
80083: PPUSH
80084: LD_VAR 0 7
80088: PUSH
80089: LD_INT 2
80091: ARRAY
80092: PPUSH
80093: CALL_OW 428
80097: PUSH
80098: LD_INT 0
80100: EQUAL
80101: IFFALSE 80154
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
80103: LD_VAR 0 1
80107: PPUSH
80108: LD_VAR 0 7
80112: PUSH
80113: LD_INT 1
80115: ARRAY
80116: PPUSH
80117: LD_VAR 0 7
80121: PUSH
80122: LD_INT 2
80124: ARRAY
80125: PPUSH
80126: LD_VAR 0 3
80130: PPUSH
80131: CALL_OW 48
// result := IsPlaced ( unit ) ;
80135: LD_ADDR_VAR 0 4
80139: PUSH
80140: LD_VAR 0 1
80144: PPUSH
80145: CALL_OW 305
80149: ST_TO_ADDR
// exit ;
80150: POP
80151: POP
80152: GO 80158
// end ; end ;
80154: GO 80033
80156: POP
80157: POP
// end ;
80158: LD_VAR 0 4
80162: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
80163: LD_INT 0
80165: PPUSH
80166: PPUSH
80167: PPUSH
// if not side or side > 8 then
80168: LD_VAR 0 1
80172: NOT
80173: PUSH
80174: LD_VAR 0 1
80178: PUSH
80179: LD_INT 8
80181: GREATER
80182: OR
80183: IFFALSE 80187
// exit ;
80185: GO 80374
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
80187: LD_ADDR_VAR 0 4
80191: PUSH
80192: LD_INT 22
80194: PUSH
80195: LD_VAR 0 1
80199: PUSH
80200: EMPTY
80201: LIST
80202: LIST
80203: PUSH
80204: LD_INT 21
80206: PUSH
80207: LD_INT 3
80209: PUSH
80210: EMPTY
80211: LIST
80212: LIST
80213: PUSH
80214: EMPTY
80215: LIST
80216: LIST
80217: PPUSH
80218: CALL_OW 69
80222: ST_TO_ADDR
// if not tmp then
80223: LD_VAR 0 4
80227: NOT
80228: IFFALSE 80232
// exit ;
80230: GO 80374
// enable_addtolog := true ;
80232: LD_ADDR_OWVAR 81
80236: PUSH
80237: LD_INT 1
80239: ST_TO_ADDR
// AddToLog ( [ ) ;
80240: LD_STRING [
80242: PPUSH
80243: CALL_OW 561
// for i in tmp do
80247: LD_ADDR_VAR 0 3
80251: PUSH
80252: LD_VAR 0 4
80256: PUSH
80257: FOR_IN
80258: IFFALSE 80365
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80260: LD_STRING [
80262: PUSH
80263: LD_VAR 0 3
80267: PPUSH
80268: CALL_OW 266
80272: STR
80273: PUSH
80274: LD_STRING , 
80276: STR
80277: PUSH
80278: LD_VAR 0 3
80282: PPUSH
80283: CALL_OW 250
80287: STR
80288: PUSH
80289: LD_STRING , 
80291: STR
80292: PUSH
80293: LD_VAR 0 3
80297: PPUSH
80298: CALL_OW 251
80302: STR
80303: PUSH
80304: LD_STRING , 
80306: STR
80307: PUSH
80308: LD_VAR 0 3
80312: PPUSH
80313: CALL_OW 254
80317: STR
80318: PUSH
80319: LD_STRING , 
80321: STR
80322: PUSH
80323: LD_VAR 0 3
80327: PPUSH
80328: LD_INT 1
80330: PPUSH
80331: CALL_OW 268
80335: STR
80336: PUSH
80337: LD_STRING , 
80339: STR
80340: PUSH
80341: LD_VAR 0 3
80345: PPUSH
80346: LD_INT 2
80348: PPUSH
80349: CALL_OW 268
80353: STR
80354: PUSH
80355: LD_STRING ],
80357: STR
80358: PPUSH
80359: CALL_OW 561
// end ;
80363: GO 80257
80365: POP
80366: POP
// AddToLog ( ]; ) ;
80367: LD_STRING ];
80369: PPUSH
80370: CALL_OW 561
// end ;
80374: LD_VAR 0 2
80378: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
80379: LD_INT 0
80381: PPUSH
80382: PPUSH
80383: PPUSH
80384: PPUSH
80385: PPUSH
// if not area or not rate or not max then
80386: LD_VAR 0 1
80390: NOT
80391: PUSH
80392: LD_VAR 0 2
80396: NOT
80397: OR
80398: PUSH
80399: LD_VAR 0 4
80403: NOT
80404: OR
80405: IFFALSE 80409
// exit ;
80407: GO 80601
// while 1 do
80409: LD_INT 1
80411: IFFALSE 80601
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
80413: LD_ADDR_VAR 0 9
80417: PUSH
80418: LD_VAR 0 1
80422: PPUSH
80423: LD_INT 1
80425: PPUSH
80426: CALL_OW 287
80430: PUSH
80431: LD_INT 10
80433: MUL
80434: ST_TO_ADDR
// r := rate / 10 ;
80435: LD_ADDR_VAR 0 7
80439: PUSH
80440: LD_VAR 0 2
80444: PUSH
80445: LD_INT 10
80447: DIVREAL
80448: ST_TO_ADDR
// time := 1 1$00 ;
80449: LD_ADDR_VAR 0 8
80453: PUSH
80454: LD_INT 2100
80456: ST_TO_ADDR
// if amount < min then
80457: LD_VAR 0 9
80461: PUSH
80462: LD_VAR 0 3
80466: LESS
80467: IFFALSE 80485
// r := r * 2 else
80469: LD_ADDR_VAR 0 7
80473: PUSH
80474: LD_VAR 0 7
80478: PUSH
80479: LD_INT 2
80481: MUL
80482: ST_TO_ADDR
80483: GO 80511
// if amount > max then
80485: LD_VAR 0 9
80489: PUSH
80490: LD_VAR 0 4
80494: GREATER
80495: IFFALSE 80511
// r := r / 2 ;
80497: LD_ADDR_VAR 0 7
80501: PUSH
80502: LD_VAR 0 7
80506: PUSH
80507: LD_INT 2
80509: DIVREAL
80510: ST_TO_ADDR
// time := time / r ;
80511: LD_ADDR_VAR 0 8
80515: PUSH
80516: LD_VAR 0 8
80520: PUSH
80521: LD_VAR 0 7
80525: DIVREAL
80526: ST_TO_ADDR
// if time < 0 then
80527: LD_VAR 0 8
80531: PUSH
80532: LD_INT 0
80534: LESS
80535: IFFALSE 80552
// time := time * - 1 ;
80537: LD_ADDR_VAR 0 8
80541: PUSH
80542: LD_VAR 0 8
80546: PUSH
80547: LD_INT 1
80549: NEG
80550: MUL
80551: ST_TO_ADDR
// wait ( time ) ;
80552: LD_VAR 0 8
80556: PPUSH
80557: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
80561: LD_INT 35
80563: PPUSH
80564: LD_INT 875
80566: PPUSH
80567: CALL_OW 12
80571: PPUSH
80572: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
80576: LD_INT 1
80578: PPUSH
80579: LD_INT 5
80581: PPUSH
80582: CALL_OW 12
80586: PPUSH
80587: LD_VAR 0 1
80591: PPUSH
80592: LD_INT 1
80594: PPUSH
80595: CALL_OW 55
// end ;
80599: GO 80409
// end ;
80601: LD_VAR 0 5
80605: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
80606: LD_INT 0
80608: PPUSH
80609: PPUSH
80610: PPUSH
80611: PPUSH
80612: PPUSH
80613: PPUSH
80614: PPUSH
80615: PPUSH
// if not turrets or not factories then
80616: LD_VAR 0 1
80620: NOT
80621: PUSH
80622: LD_VAR 0 2
80626: NOT
80627: OR
80628: IFFALSE 80632
// exit ;
80630: GO 80939
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
80632: LD_ADDR_VAR 0 10
80636: PUSH
80637: LD_INT 5
80639: PUSH
80640: LD_INT 6
80642: PUSH
80643: EMPTY
80644: LIST
80645: LIST
80646: PUSH
80647: LD_INT 2
80649: PUSH
80650: LD_INT 4
80652: PUSH
80653: EMPTY
80654: LIST
80655: LIST
80656: PUSH
80657: LD_INT 3
80659: PUSH
80660: LD_INT 5
80662: PUSH
80663: EMPTY
80664: LIST
80665: LIST
80666: PUSH
80667: EMPTY
80668: LIST
80669: LIST
80670: LIST
80671: PUSH
80672: LD_INT 24
80674: PUSH
80675: LD_INT 25
80677: PUSH
80678: EMPTY
80679: LIST
80680: LIST
80681: PUSH
80682: LD_INT 23
80684: PUSH
80685: LD_INT 27
80687: PUSH
80688: EMPTY
80689: LIST
80690: LIST
80691: PUSH
80692: EMPTY
80693: LIST
80694: LIST
80695: PUSH
80696: LD_INT 42
80698: PUSH
80699: LD_INT 43
80701: PUSH
80702: EMPTY
80703: LIST
80704: LIST
80705: PUSH
80706: LD_INT 44
80708: PUSH
80709: LD_INT 46
80711: PUSH
80712: EMPTY
80713: LIST
80714: LIST
80715: PUSH
80716: LD_INT 45
80718: PUSH
80719: LD_INT 47
80721: PUSH
80722: EMPTY
80723: LIST
80724: LIST
80725: PUSH
80726: EMPTY
80727: LIST
80728: LIST
80729: LIST
80730: PUSH
80731: EMPTY
80732: LIST
80733: LIST
80734: LIST
80735: ST_TO_ADDR
// result := [ ] ;
80736: LD_ADDR_VAR 0 3
80740: PUSH
80741: EMPTY
80742: ST_TO_ADDR
// for i in turrets do
80743: LD_ADDR_VAR 0 4
80747: PUSH
80748: LD_VAR 0 1
80752: PUSH
80753: FOR_IN
80754: IFFALSE 80937
// begin nat := GetNation ( i ) ;
80756: LD_ADDR_VAR 0 7
80760: PUSH
80761: LD_VAR 0 4
80765: PPUSH
80766: CALL_OW 248
80770: ST_TO_ADDR
// weapon := 0 ;
80771: LD_ADDR_VAR 0 8
80775: PUSH
80776: LD_INT 0
80778: ST_TO_ADDR
// if not nat then
80779: LD_VAR 0 7
80783: NOT
80784: IFFALSE 80788
// continue ;
80786: GO 80753
// for j in list [ nat ] do
80788: LD_ADDR_VAR 0 5
80792: PUSH
80793: LD_VAR 0 10
80797: PUSH
80798: LD_VAR 0 7
80802: ARRAY
80803: PUSH
80804: FOR_IN
80805: IFFALSE 80846
// if GetBWeapon ( i ) = j [ 1 ] then
80807: LD_VAR 0 4
80811: PPUSH
80812: CALL_OW 269
80816: PUSH
80817: LD_VAR 0 5
80821: PUSH
80822: LD_INT 1
80824: ARRAY
80825: EQUAL
80826: IFFALSE 80844
// begin weapon := j [ 2 ] ;
80828: LD_ADDR_VAR 0 8
80832: PUSH
80833: LD_VAR 0 5
80837: PUSH
80838: LD_INT 2
80840: ARRAY
80841: ST_TO_ADDR
// break ;
80842: GO 80846
// end ;
80844: GO 80804
80846: POP
80847: POP
// if not weapon then
80848: LD_VAR 0 8
80852: NOT
80853: IFFALSE 80857
// continue ;
80855: GO 80753
// for k in factories do
80857: LD_ADDR_VAR 0 6
80861: PUSH
80862: LD_VAR 0 2
80866: PUSH
80867: FOR_IN
80868: IFFALSE 80933
// begin weapons := AvailableWeaponList ( k ) ;
80870: LD_ADDR_VAR 0 9
80874: PUSH
80875: LD_VAR 0 6
80879: PPUSH
80880: CALL_OW 478
80884: ST_TO_ADDR
// if not weapons then
80885: LD_VAR 0 9
80889: NOT
80890: IFFALSE 80894
// continue ;
80892: GO 80867
// if weapon in weapons then
80894: LD_VAR 0 8
80898: PUSH
80899: LD_VAR 0 9
80903: IN
80904: IFFALSE 80931
// begin result := [ i , weapon ] ;
80906: LD_ADDR_VAR 0 3
80910: PUSH
80911: LD_VAR 0 4
80915: PUSH
80916: LD_VAR 0 8
80920: PUSH
80921: EMPTY
80922: LIST
80923: LIST
80924: ST_TO_ADDR
// exit ;
80925: POP
80926: POP
80927: POP
80928: POP
80929: GO 80939
// end ; end ;
80931: GO 80867
80933: POP
80934: POP
// end ;
80935: GO 80753
80937: POP
80938: POP
// end ;
80939: LD_VAR 0 3
80943: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80944: LD_INT 0
80946: PPUSH
// if not side or side > 8 then
80947: LD_VAR 0 3
80951: NOT
80952: PUSH
80953: LD_VAR 0 3
80957: PUSH
80958: LD_INT 8
80960: GREATER
80961: OR
80962: IFFALSE 80966
// exit ;
80964: GO 81025
// if not range then
80966: LD_VAR 0 4
80970: NOT
80971: IFFALSE 80982
// range := - 12 ;
80973: LD_ADDR_VAR 0 4
80977: PUSH
80978: LD_INT 12
80980: NEG
80981: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80982: LD_VAR 0 1
80986: PPUSH
80987: LD_VAR 0 2
80991: PPUSH
80992: LD_VAR 0 3
80996: PPUSH
80997: LD_VAR 0 4
81001: PPUSH
81002: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
81006: LD_VAR 0 1
81010: PPUSH
81011: LD_VAR 0 2
81015: PPUSH
81016: LD_VAR 0 3
81020: PPUSH
81021: CALL_OW 331
// end ;
81025: LD_VAR 0 5
81029: RET
// export function Video ( mode ) ; begin
81030: LD_INT 0
81032: PPUSH
// ingame_video = mode ;
81033: LD_ADDR_OWVAR 52
81037: PUSH
81038: LD_VAR 0 1
81042: ST_TO_ADDR
// interface_hidden = mode ;
81043: LD_ADDR_OWVAR 54
81047: PUSH
81048: LD_VAR 0 1
81052: ST_TO_ADDR
// end ;
81053: LD_VAR 0 2
81057: RET
// export function Join ( array , element ) ; begin
81058: LD_INT 0
81060: PPUSH
// result := Replace ( array , array + 1 , element ) ;
81061: LD_ADDR_VAR 0 3
81065: PUSH
81066: LD_VAR 0 1
81070: PPUSH
81071: LD_VAR 0 1
81075: PUSH
81076: LD_INT 1
81078: PLUS
81079: PPUSH
81080: LD_VAR 0 2
81084: PPUSH
81085: CALL_OW 1
81089: ST_TO_ADDR
// end ;
81090: LD_VAR 0 3
81094: RET
// export function JoinUnion ( array , element ) ; begin
81095: LD_INT 0
81097: PPUSH
// result := array union element ;
81098: LD_ADDR_VAR 0 3
81102: PUSH
81103: LD_VAR 0 1
81107: PUSH
81108: LD_VAR 0 2
81112: UNION
81113: ST_TO_ADDR
// end ;
81114: LD_VAR 0 3
81118: RET
// export function GetBehemoths ( side ) ; begin
81119: LD_INT 0
81121: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
81122: LD_ADDR_VAR 0 2
81126: PUSH
81127: LD_INT 22
81129: PUSH
81130: LD_VAR 0 1
81134: PUSH
81135: EMPTY
81136: LIST
81137: LIST
81138: PUSH
81139: LD_INT 31
81141: PUSH
81142: LD_INT 25
81144: PUSH
81145: EMPTY
81146: LIST
81147: LIST
81148: PUSH
81149: EMPTY
81150: LIST
81151: LIST
81152: PPUSH
81153: CALL_OW 69
81157: ST_TO_ADDR
// end ;
81158: LD_VAR 0 2
81162: RET
// export function Shuffle ( array ) ; var i , index ; begin
81163: LD_INT 0
81165: PPUSH
81166: PPUSH
81167: PPUSH
// result := [ ] ;
81168: LD_ADDR_VAR 0 2
81172: PUSH
81173: EMPTY
81174: ST_TO_ADDR
// if not array then
81175: LD_VAR 0 1
81179: NOT
81180: IFFALSE 81184
// exit ;
81182: GO 81283
// Randomize ;
81184: CALL_OW 10
// for i = array downto 1 do
81188: LD_ADDR_VAR 0 3
81192: PUSH
81193: DOUBLE
81194: LD_VAR 0 1
81198: INC
81199: ST_TO_ADDR
81200: LD_INT 1
81202: PUSH
81203: FOR_DOWNTO
81204: IFFALSE 81281
// begin index := rand ( 1 , array ) ;
81206: LD_ADDR_VAR 0 4
81210: PUSH
81211: LD_INT 1
81213: PPUSH
81214: LD_VAR 0 1
81218: PPUSH
81219: CALL_OW 12
81223: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
81224: LD_ADDR_VAR 0 2
81228: PUSH
81229: LD_VAR 0 2
81233: PPUSH
81234: LD_VAR 0 2
81238: PUSH
81239: LD_INT 1
81241: PLUS
81242: PPUSH
81243: LD_VAR 0 1
81247: PUSH
81248: LD_VAR 0 4
81252: ARRAY
81253: PPUSH
81254: CALL_OW 2
81258: ST_TO_ADDR
// array := Delete ( array , index ) ;
81259: LD_ADDR_VAR 0 1
81263: PUSH
81264: LD_VAR 0 1
81268: PPUSH
81269: LD_VAR 0 4
81273: PPUSH
81274: CALL_OW 3
81278: ST_TO_ADDR
// end ;
81279: GO 81203
81281: POP
81282: POP
// end ;
81283: LD_VAR 0 2
81287: RET
// export function GetBaseMaterials ( base ) ; begin
81288: LD_INT 0
81290: PPUSH
// result := [ 0 , 0 , 0 ] ;
81291: LD_ADDR_VAR 0 2
81295: PUSH
81296: LD_INT 0
81298: PUSH
81299: LD_INT 0
81301: PUSH
81302: LD_INT 0
81304: PUSH
81305: EMPTY
81306: LIST
81307: LIST
81308: LIST
81309: ST_TO_ADDR
// if not base then
81310: LD_VAR 0 1
81314: NOT
81315: IFFALSE 81319
// exit ;
81317: GO 81368
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
81319: LD_ADDR_VAR 0 2
81323: PUSH
81324: LD_VAR 0 1
81328: PPUSH
81329: LD_INT 1
81331: PPUSH
81332: CALL_OW 275
81336: PUSH
81337: LD_VAR 0 1
81341: PPUSH
81342: LD_INT 2
81344: PPUSH
81345: CALL_OW 275
81349: PUSH
81350: LD_VAR 0 1
81354: PPUSH
81355: LD_INT 3
81357: PPUSH
81358: CALL_OW 275
81362: PUSH
81363: EMPTY
81364: LIST
81365: LIST
81366: LIST
81367: ST_TO_ADDR
// end ;
81368: LD_VAR 0 2
81372: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
81373: LD_INT 0
81375: PPUSH
81376: PPUSH
// result := array ;
81377: LD_ADDR_VAR 0 3
81381: PUSH
81382: LD_VAR 0 1
81386: ST_TO_ADDR
// if size > 0 then
81387: LD_VAR 0 2
81391: PUSH
81392: LD_INT 0
81394: GREATER
81395: IFFALSE 81441
// for i := array downto size do
81397: LD_ADDR_VAR 0 4
81401: PUSH
81402: DOUBLE
81403: LD_VAR 0 1
81407: INC
81408: ST_TO_ADDR
81409: LD_VAR 0 2
81413: PUSH
81414: FOR_DOWNTO
81415: IFFALSE 81439
// result := Delete ( result , result ) ;
81417: LD_ADDR_VAR 0 3
81421: PUSH
81422: LD_VAR 0 3
81426: PPUSH
81427: LD_VAR 0 3
81431: PPUSH
81432: CALL_OW 3
81436: ST_TO_ADDR
81437: GO 81414
81439: POP
81440: POP
// end ;
81441: LD_VAR 0 3
81445: RET
// export function ComExit ( unit ) ; var tmp ; begin
81446: LD_INT 0
81448: PPUSH
81449: PPUSH
// if not IsInUnit ( unit ) then
81450: LD_VAR 0 1
81454: PPUSH
81455: CALL_OW 310
81459: NOT
81460: IFFALSE 81464
// exit ;
81462: GO 81524
// tmp := IsInUnit ( unit ) ;
81464: LD_ADDR_VAR 0 3
81468: PUSH
81469: LD_VAR 0 1
81473: PPUSH
81474: CALL_OW 310
81478: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
81479: LD_VAR 0 3
81483: PPUSH
81484: CALL_OW 247
81488: PUSH
81489: LD_INT 2
81491: EQUAL
81492: IFFALSE 81505
// ComExitVehicle ( unit ) else
81494: LD_VAR 0 1
81498: PPUSH
81499: CALL_OW 121
81503: GO 81514
// ComExitBuilding ( unit ) ;
81505: LD_VAR 0 1
81509: PPUSH
81510: CALL_OW 122
// result := tmp ;
81514: LD_ADDR_VAR 0 2
81518: PUSH
81519: LD_VAR 0 3
81523: ST_TO_ADDR
// end ;
81524: LD_VAR 0 2
81528: RET
// export function ComExitAll ( units ) ; var i ; begin
81529: LD_INT 0
81531: PPUSH
81532: PPUSH
// if not units then
81533: LD_VAR 0 1
81537: NOT
81538: IFFALSE 81542
// exit ;
81540: GO 81568
// for i in units do
81542: LD_ADDR_VAR 0 3
81546: PUSH
81547: LD_VAR 0 1
81551: PUSH
81552: FOR_IN
81553: IFFALSE 81566
// ComExit ( i ) ;
81555: LD_VAR 0 3
81559: PPUSH
81560: CALL 81446 0 1
81564: GO 81552
81566: POP
81567: POP
// end ;
81568: LD_VAR 0 2
81572: RET
// export function ResetHc ; begin
81573: LD_INT 0
81575: PPUSH
// InitHc ;
81576: CALL_OW 19
// hc_importance := 0 ;
81580: LD_ADDR_OWVAR 32
81584: PUSH
81585: LD_INT 0
81587: ST_TO_ADDR
// end ;
81588: LD_VAR 0 1
81592: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
81593: LD_INT 0
81595: PPUSH
81596: PPUSH
81597: PPUSH
// _x := ( x1 + x2 ) div 2 ;
81598: LD_ADDR_VAR 0 6
81602: PUSH
81603: LD_VAR 0 1
81607: PUSH
81608: LD_VAR 0 3
81612: PLUS
81613: PUSH
81614: LD_INT 2
81616: DIV
81617: ST_TO_ADDR
// if _x < 0 then
81618: LD_VAR 0 6
81622: PUSH
81623: LD_INT 0
81625: LESS
81626: IFFALSE 81643
// _x := _x * - 1 ;
81628: LD_ADDR_VAR 0 6
81632: PUSH
81633: LD_VAR 0 6
81637: PUSH
81638: LD_INT 1
81640: NEG
81641: MUL
81642: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
81643: LD_ADDR_VAR 0 7
81647: PUSH
81648: LD_VAR 0 2
81652: PUSH
81653: LD_VAR 0 4
81657: PLUS
81658: PUSH
81659: LD_INT 2
81661: DIV
81662: ST_TO_ADDR
// if _y < 0 then
81663: LD_VAR 0 7
81667: PUSH
81668: LD_INT 0
81670: LESS
81671: IFFALSE 81688
// _y := _y * - 1 ;
81673: LD_ADDR_VAR 0 7
81677: PUSH
81678: LD_VAR 0 7
81682: PUSH
81683: LD_INT 1
81685: NEG
81686: MUL
81687: ST_TO_ADDR
// result := [ _x , _y ] ;
81688: LD_ADDR_VAR 0 5
81692: PUSH
81693: LD_VAR 0 6
81697: PUSH
81698: LD_VAR 0 7
81702: PUSH
81703: EMPTY
81704: LIST
81705: LIST
81706: ST_TO_ADDR
// end ;
81707: LD_VAR 0 5
81711: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81712: LD_INT 0
81714: PPUSH
81715: PPUSH
81716: PPUSH
81717: PPUSH
// task := GetTaskList ( unit ) ;
81718: LD_ADDR_VAR 0 7
81722: PUSH
81723: LD_VAR 0 1
81727: PPUSH
81728: CALL_OW 437
81732: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81733: LD_VAR 0 7
81737: NOT
81738: PUSH
81739: LD_VAR 0 1
81743: PPUSH
81744: LD_VAR 0 2
81748: PPUSH
81749: CALL_OW 308
81753: NOT
81754: AND
81755: IFFALSE 81759
// exit ;
81757: GO 81877
// if IsInArea ( unit , area ) then
81759: LD_VAR 0 1
81763: PPUSH
81764: LD_VAR 0 2
81768: PPUSH
81769: CALL_OW 308
81773: IFFALSE 81791
// begin ComMoveToArea ( unit , goAway ) ;
81775: LD_VAR 0 1
81779: PPUSH
81780: LD_VAR 0 3
81784: PPUSH
81785: CALL_OW 113
// exit ;
81789: GO 81877
// end ; if task [ 1 ] [ 1 ] <> M then
81791: LD_VAR 0 7
81795: PUSH
81796: LD_INT 1
81798: ARRAY
81799: PUSH
81800: LD_INT 1
81802: ARRAY
81803: PUSH
81804: LD_STRING M
81806: NONEQUAL
81807: IFFALSE 81811
// exit ;
81809: GO 81877
// x := task [ 1 ] [ 2 ] ;
81811: LD_ADDR_VAR 0 5
81815: PUSH
81816: LD_VAR 0 7
81820: PUSH
81821: LD_INT 1
81823: ARRAY
81824: PUSH
81825: LD_INT 2
81827: ARRAY
81828: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81829: LD_ADDR_VAR 0 6
81833: PUSH
81834: LD_VAR 0 7
81838: PUSH
81839: LD_INT 1
81841: ARRAY
81842: PUSH
81843: LD_INT 3
81845: ARRAY
81846: ST_TO_ADDR
// if InArea ( x , y , area ) then
81847: LD_VAR 0 5
81851: PPUSH
81852: LD_VAR 0 6
81856: PPUSH
81857: LD_VAR 0 2
81861: PPUSH
81862: CALL_OW 309
81866: IFFALSE 81877
// ComStop ( unit ) ;
81868: LD_VAR 0 1
81872: PPUSH
81873: CALL_OW 141
// end ;
81877: LD_VAR 0 4
81881: RET
// export function Abs ( value ) ; begin
81882: LD_INT 0
81884: PPUSH
// result := value ;
81885: LD_ADDR_VAR 0 2
81889: PUSH
81890: LD_VAR 0 1
81894: ST_TO_ADDR
// if value < 0 then
81895: LD_VAR 0 1
81899: PUSH
81900: LD_INT 0
81902: LESS
81903: IFFALSE 81920
// result := value * - 1 ;
81905: LD_ADDR_VAR 0 2
81909: PUSH
81910: LD_VAR 0 1
81914: PUSH
81915: LD_INT 1
81917: NEG
81918: MUL
81919: ST_TO_ADDR
// end ;
81920: LD_VAR 0 2
81924: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
81925: LD_INT 0
81927: PPUSH
81928: PPUSH
81929: PPUSH
81930: PPUSH
81931: PPUSH
81932: PPUSH
81933: PPUSH
81934: PPUSH
// if not unit or not building then
81935: LD_VAR 0 1
81939: NOT
81940: PUSH
81941: LD_VAR 0 2
81945: NOT
81946: OR
81947: IFFALSE 81951
// exit ;
81949: GO 82177
// x := GetX ( building ) ;
81951: LD_ADDR_VAR 0 4
81955: PUSH
81956: LD_VAR 0 2
81960: PPUSH
81961: CALL_OW 250
81965: ST_TO_ADDR
// y := GetY ( building ) ;
81966: LD_ADDR_VAR 0 6
81970: PUSH
81971: LD_VAR 0 2
81975: PPUSH
81976: CALL_OW 251
81980: ST_TO_ADDR
// d := GetDir ( building ) ;
81981: LD_ADDR_VAR 0 8
81985: PUSH
81986: LD_VAR 0 2
81990: PPUSH
81991: CALL_OW 254
81995: ST_TO_ADDR
// r := 4 ;
81996: LD_ADDR_VAR 0 9
82000: PUSH
82001: LD_INT 4
82003: ST_TO_ADDR
// for i := 1 to 5 do
82004: LD_ADDR_VAR 0 10
82008: PUSH
82009: DOUBLE
82010: LD_INT 1
82012: DEC
82013: ST_TO_ADDR
82014: LD_INT 5
82016: PUSH
82017: FOR_TO
82018: IFFALSE 82175
// begin _x := ShiftX ( x , d , r + i ) ;
82020: LD_ADDR_VAR 0 5
82024: PUSH
82025: LD_VAR 0 4
82029: PPUSH
82030: LD_VAR 0 8
82034: PPUSH
82035: LD_VAR 0 9
82039: PUSH
82040: LD_VAR 0 10
82044: PLUS
82045: PPUSH
82046: CALL_OW 272
82050: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
82051: LD_ADDR_VAR 0 7
82055: PUSH
82056: LD_VAR 0 6
82060: PPUSH
82061: LD_VAR 0 8
82065: PPUSH
82066: LD_VAR 0 9
82070: PUSH
82071: LD_VAR 0 10
82075: PLUS
82076: PPUSH
82077: CALL_OW 273
82081: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
82082: LD_VAR 0 5
82086: PPUSH
82087: LD_VAR 0 7
82091: PPUSH
82092: CALL_OW 488
82096: PUSH
82097: LD_VAR 0 5
82101: PPUSH
82102: LD_VAR 0 7
82106: PPUSH
82107: CALL_OW 428
82111: PPUSH
82112: CALL_OW 247
82116: PUSH
82117: LD_INT 3
82119: PUSH
82120: LD_INT 2
82122: PUSH
82123: EMPTY
82124: LIST
82125: LIST
82126: IN
82127: NOT
82128: AND
82129: IFFALSE 82173
// begin ComMoveXY ( unit , _x , _y ) ;
82131: LD_VAR 0 1
82135: PPUSH
82136: LD_VAR 0 5
82140: PPUSH
82141: LD_VAR 0 7
82145: PPUSH
82146: CALL_OW 111
// result := [ _x , _y ] ;
82150: LD_ADDR_VAR 0 3
82154: PUSH
82155: LD_VAR 0 5
82159: PUSH
82160: LD_VAR 0 7
82164: PUSH
82165: EMPTY
82166: LIST
82167: LIST
82168: ST_TO_ADDR
// exit ;
82169: POP
82170: POP
82171: GO 82177
// end ; end ;
82173: GO 82017
82175: POP
82176: POP
// end ;
82177: LD_VAR 0 3
82181: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
82182: LD_INT 0
82184: PPUSH
82185: PPUSH
82186: PPUSH
// result := 0 ;
82187: LD_ADDR_VAR 0 3
82191: PUSH
82192: LD_INT 0
82194: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
82195: LD_VAR 0 1
82199: PUSH
82200: LD_INT 0
82202: LESS
82203: PUSH
82204: LD_VAR 0 1
82208: PUSH
82209: LD_INT 8
82211: GREATER
82212: OR
82213: PUSH
82214: LD_VAR 0 2
82218: PUSH
82219: LD_INT 0
82221: LESS
82222: OR
82223: PUSH
82224: LD_VAR 0 2
82228: PUSH
82229: LD_INT 8
82231: GREATER
82232: OR
82233: IFFALSE 82237
// exit ;
82235: GO 82312
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
82237: LD_ADDR_VAR 0 4
82241: PUSH
82242: LD_INT 22
82244: PUSH
82245: LD_VAR 0 2
82249: PUSH
82250: EMPTY
82251: LIST
82252: LIST
82253: PPUSH
82254: CALL_OW 69
82258: PUSH
82259: FOR_IN
82260: IFFALSE 82310
// begin un := UnitShoot ( i ) ;
82262: LD_ADDR_VAR 0 5
82266: PUSH
82267: LD_VAR 0 4
82271: PPUSH
82272: CALL_OW 504
82276: ST_TO_ADDR
// if GetSide ( un ) = side1 then
82277: LD_VAR 0 5
82281: PPUSH
82282: CALL_OW 255
82286: PUSH
82287: LD_VAR 0 1
82291: EQUAL
82292: IFFALSE 82308
// begin result := un ;
82294: LD_ADDR_VAR 0 3
82298: PUSH
82299: LD_VAR 0 5
82303: ST_TO_ADDR
// exit ;
82304: POP
82305: POP
82306: GO 82312
// end ; end ;
82308: GO 82259
82310: POP
82311: POP
// end ;
82312: LD_VAR 0 3
82316: RET
// export function GetCargoBay ( units ) ; begin
82317: LD_INT 0
82319: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
82320: LD_ADDR_VAR 0 2
82324: PUSH
82325: LD_VAR 0 1
82329: PPUSH
82330: LD_INT 2
82332: PUSH
82333: LD_INT 34
82335: PUSH
82336: LD_INT 12
82338: PUSH
82339: EMPTY
82340: LIST
82341: LIST
82342: PUSH
82343: LD_INT 34
82345: PUSH
82346: LD_INT 51
82348: PUSH
82349: EMPTY
82350: LIST
82351: LIST
82352: PUSH
82353: LD_INT 34
82355: PUSH
82356: LD_INT 32
82358: PUSH
82359: EMPTY
82360: LIST
82361: LIST
82362: PUSH
82363: LD_INT 34
82365: PUSH
82366: LD_EXP 49
82370: PUSH
82371: EMPTY
82372: LIST
82373: LIST
82374: PUSH
82375: EMPTY
82376: LIST
82377: LIST
82378: LIST
82379: LIST
82380: LIST
82381: PPUSH
82382: CALL_OW 72
82386: ST_TO_ADDR
// end ;
82387: LD_VAR 0 2
82391: RET
// export function Negate ( value ) ; begin
82392: LD_INT 0
82394: PPUSH
// result := not value ;
82395: LD_ADDR_VAR 0 2
82399: PUSH
82400: LD_VAR 0 1
82404: NOT
82405: ST_TO_ADDR
// end ;
82406: LD_VAR 0 2
82410: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
82411: LD_INT 0
82413: PPUSH
// if x1 = x2 then
82414: LD_VAR 0 1
82418: PUSH
82419: LD_VAR 0 3
82423: EQUAL
82424: IFFALSE 82458
// begin if y1 > y2 then
82426: LD_VAR 0 2
82430: PUSH
82431: LD_VAR 0 4
82435: GREATER
82436: IFFALSE 82448
// result := 0 else
82438: LD_ADDR_VAR 0 5
82442: PUSH
82443: LD_INT 0
82445: ST_TO_ADDR
82446: GO 82456
// result := 3 ;
82448: LD_ADDR_VAR 0 5
82452: PUSH
82453: LD_INT 3
82455: ST_TO_ADDR
// exit ;
82456: GO 82544
// end ; if y1 = y2 then
82458: LD_VAR 0 2
82462: PUSH
82463: LD_VAR 0 4
82467: EQUAL
82468: IFFALSE 82502
// begin if x1 > x2 then
82470: LD_VAR 0 1
82474: PUSH
82475: LD_VAR 0 3
82479: GREATER
82480: IFFALSE 82492
// result := 1 else
82482: LD_ADDR_VAR 0 5
82486: PUSH
82487: LD_INT 1
82489: ST_TO_ADDR
82490: GO 82500
// result := 4 ;
82492: LD_ADDR_VAR 0 5
82496: PUSH
82497: LD_INT 4
82499: ST_TO_ADDR
// exit ;
82500: GO 82544
// end ; if x1 > x2 and y1 > y2 then
82502: LD_VAR 0 1
82506: PUSH
82507: LD_VAR 0 3
82511: GREATER
82512: PUSH
82513: LD_VAR 0 2
82517: PUSH
82518: LD_VAR 0 4
82522: GREATER
82523: AND
82524: IFFALSE 82536
// result := 2 else
82526: LD_ADDR_VAR 0 5
82530: PUSH
82531: LD_INT 2
82533: ST_TO_ADDR
82534: GO 82544
// result := 5 ;
82536: LD_ADDR_VAR 0 5
82540: PUSH
82541: LD_INT 5
82543: ST_TO_ADDR
// end ;
82544: LD_VAR 0 5
82548: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82549: LD_INT 0
82551: PPUSH
82552: PPUSH
// if not driver or not IsInUnit ( driver ) then
82553: LD_VAR 0 1
82557: NOT
82558: PUSH
82559: LD_VAR 0 1
82563: PPUSH
82564: CALL_OW 310
82568: NOT
82569: OR
82570: IFFALSE 82574
// exit ;
82572: GO 82664
// vehicle := IsInUnit ( driver ) ;
82574: LD_ADDR_VAR 0 3
82578: PUSH
82579: LD_VAR 0 1
82583: PPUSH
82584: CALL_OW 310
82588: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82589: LD_VAR 0 1
82593: PPUSH
82594: LD_STRING \
82596: PUSH
82597: LD_INT 0
82599: PUSH
82600: LD_INT 0
82602: PUSH
82603: LD_INT 0
82605: PUSH
82606: LD_INT 0
82608: PUSH
82609: LD_INT 0
82611: PUSH
82612: LD_INT 0
82614: PUSH
82615: EMPTY
82616: LIST
82617: LIST
82618: LIST
82619: LIST
82620: LIST
82621: LIST
82622: LIST
82623: PUSH
82624: LD_STRING E
82626: PUSH
82627: LD_INT 0
82629: PUSH
82630: LD_INT 0
82632: PUSH
82633: LD_VAR 0 3
82637: PUSH
82638: LD_INT 0
82640: PUSH
82641: LD_INT 0
82643: PUSH
82644: LD_INT 0
82646: PUSH
82647: EMPTY
82648: LIST
82649: LIST
82650: LIST
82651: LIST
82652: LIST
82653: LIST
82654: LIST
82655: PUSH
82656: EMPTY
82657: LIST
82658: LIST
82659: PPUSH
82660: CALL_OW 446
// end ;
82664: LD_VAR 0 2
82668: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82669: LD_INT 0
82671: PPUSH
82672: PPUSH
// if not driver or not IsInUnit ( driver ) then
82673: LD_VAR 0 1
82677: NOT
82678: PUSH
82679: LD_VAR 0 1
82683: PPUSH
82684: CALL_OW 310
82688: NOT
82689: OR
82690: IFFALSE 82694
// exit ;
82692: GO 82784
// vehicle := IsInUnit ( driver ) ;
82694: LD_ADDR_VAR 0 3
82698: PUSH
82699: LD_VAR 0 1
82703: PPUSH
82704: CALL_OW 310
82708: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82709: LD_VAR 0 1
82713: PPUSH
82714: LD_STRING \
82716: PUSH
82717: LD_INT 0
82719: PUSH
82720: LD_INT 0
82722: PUSH
82723: LD_INT 0
82725: PUSH
82726: LD_INT 0
82728: PUSH
82729: LD_INT 0
82731: PUSH
82732: LD_INT 0
82734: PUSH
82735: EMPTY
82736: LIST
82737: LIST
82738: LIST
82739: LIST
82740: LIST
82741: LIST
82742: LIST
82743: PUSH
82744: LD_STRING E
82746: PUSH
82747: LD_INT 0
82749: PUSH
82750: LD_INT 0
82752: PUSH
82753: LD_VAR 0 3
82757: PUSH
82758: LD_INT 0
82760: PUSH
82761: LD_INT 0
82763: PUSH
82764: LD_INT 0
82766: PUSH
82767: EMPTY
82768: LIST
82769: LIST
82770: LIST
82771: LIST
82772: LIST
82773: LIST
82774: LIST
82775: PUSH
82776: EMPTY
82777: LIST
82778: LIST
82779: PPUSH
82780: CALL_OW 447
// end ;
82784: LD_VAR 0 2
82788: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
82789: LD_INT 0
82791: PPUSH
82792: PPUSH
82793: PPUSH
// tmp := [ ] ;
82794: LD_ADDR_VAR 0 5
82798: PUSH
82799: EMPTY
82800: ST_TO_ADDR
// for i in units do
82801: LD_ADDR_VAR 0 4
82805: PUSH
82806: LD_VAR 0 1
82810: PUSH
82811: FOR_IN
82812: IFFALSE 82850
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
82814: LD_ADDR_VAR 0 5
82818: PUSH
82819: LD_VAR 0 5
82823: PPUSH
82824: LD_VAR 0 5
82828: PUSH
82829: LD_INT 1
82831: PLUS
82832: PPUSH
82833: LD_VAR 0 4
82837: PPUSH
82838: CALL_OW 256
82842: PPUSH
82843: CALL_OW 2
82847: ST_TO_ADDR
82848: GO 82811
82850: POP
82851: POP
// if not tmp then
82852: LD_VAR 0 5
82856: NOT
82857: IFFALSE 82861
// exit ;
82859: GO 82909
// if asc then
82861: LD_VAR 0 2
82865: IFFALSE 82889
// result := SortListByListAsc ( units , tmp ) else
82867: LD_ADDR_VAR 0 3
82871: PUSH
82872: LD_VAR 0 1
82876: PPUSH
82877: LD_VAR 0 5
82881: PPUSH
82882: CALL_OW 76
82886: ST_TO_ADDR
82887: GO 82909
// result := SortListByListDesc ( units , tmp ) ;
82889: LD_ADDR_VAR 0 3
82893: PUSH
82894: LD_VAR 0 1
82898: PPUSH
82899: LD_VAR 0 5
82903: PPUSH
82904: CALL_OW 77
82908: ST_TO_ADDR
// end ;
82909: LD_VAR 0 3
82913: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
82914: LD_INT 0
82916: PPUSH
82917: PPUSH
// task := GetTaskList ( mech ) ;
82918: LD_ADDR_VAR 0 4
82922: PUSH
82923: LD_VAR 0 1
82927: PPUSH
82928: CALL_OW 437
82932: ST_TO_ADDR
// if not task then
82933: LD_VAR 0 4
82937: NOT
82938: IFFALSE 82942
// exit ;
82940: GO 82984
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
82942: LD_ADDR_VAR 0 3
82946: PUSH
82947: LD_VAR 0 4
82951: PUSH
82952: LD_INT 1
82954: ARRAY
82955: PUSH
82956: LD_INT 1
82958: ARRAY
82959: PUSH
82960: LD_STRING r
82962: EQUAL
82963: PUSH
82964: LD_VAR 0 4
82968: PUSH
82969: LD_INT 1
82971: ARRAY
82972: PUSH
82973: LD_INT 4
82975: ARRAY
82976: PUSH
82977: LD_VAR 0 2
82981: EQUAL
82982: AND
82983: ST_TO_ADDR
// end ;
82984: LD_VAR 0 3
82988: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
82989: LD_INT 0
82991: PPUSH
// SetDir ( unit , d ) ;
82992: LD_VAR 0 1
82996: PPUSH
82997: LD_VAR 0 4
83001: PPUSH
83002: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
83006: LD_VAR 0 1
83010: PPUSH
83011: LD_VAR 0 2
83015: PPUSH
83016: LD_VAR 0 3
83020: PPUSH
83021: LD_VAR 0 5
83025: PPUSH
83026: CALL_OW 48
// end ;
83030: LD_VAR 0 6
83034: RET
// export function ToNaturalNumber ( number ) ; begin
83035: LD_INT 0
83037: PPUSH
// result := number div 1 ;
83038: LD_ADDR_VAR 0 2
83042: PUSH
83043: LD_VAR 0 1
83047: PUSH
83048: LD_INT 1
83050: DIV
83051: ST_TO_ADDR
// if number < 0 then
83052: LD_VAR 0 1
83056: PUSH
83057: LD_INT 0
83059: LESS
83060: IFFALSE 83070
// result := 0 ;
83062: LD_ADDR_VAR 0 2
83066: PUSH
83067: LD_INT 0
83069: ST_TO_ADDR
// end ; end_of_file
83070: LD_VAR 0 2
83074: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83075: LD_VAR 0 1
83079: PUSH
83080: LD_INT 200
83082: DOUBLE
83083: GREATEREQUAL
83084: IFFALSE 83092
83086: LD_INT 299
83088: DOUBLE
83089: LESSEQUAL
83090: IFTRUE 83094
83092: GO 83126
83094: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83095: LD_VAR 0 1
83099: PPUSH
83100: LD_VAR 0 2
83104: PPUSH
83105: LD_VAR 0 3
83109: PPUSH
83110: LD_VAR 0 4
83114: PPUSH
83115: LD_VAR 0 5
83119: PPUSH
83120: CALL 40437 0 5
83124: GO 83203
83126: LD_INT 300
83128: DOUBLE
83129: GREATEREQUAL
83130: IFFALSE 83138
83132: LD_INT 399
83134: DOUBLE
83135: LESSEQUAL
83136: IFTRUE 83140
83138: GO 83202
83140: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83141: LD_VAR 0 1
83145: PPUSH
83146: LD_VAR 0 2
83150: PPUSH
83151: LD_VAR 0 3
83155: PPUSH
83156: LD_VAR 0 4
83160: PPUSH
83161: LD_VAR 0 5
83165: PPUSH
83166: LD_VAR 0 6
83170: PPUSH
83171: LD_VAR 0 7
83175: PPUSH
83176: LD_VAR 0 8
83180: PPUSH
83181: LD_VAR 0 9
83185: PPUSH
83186: LD_VAR 0 10
83190: PPUSH
83191: LD_VAR 0 11
83195: PPUSH
83196: CALL 38325 0 11
83200: GO 83203
83202: POP
// end ;
83203: PPOPN 11
83205: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83206: LD_VAR 0 1
83210: PPUSH
83211: LD_VAR 0 2
83215: PPUSH
83216: LD_VAR 0 3
83220: PPUSH
83221: LD_VAR 0 4
83225: PPUSH
83226: LD_VAR 0 5
83230: PPUSH
83231: CALL 40419 0 5
// end ; end_of_file
83235: PPOPN 5
83237: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83238: LD_VAR 0 1
83242: PPUSH
83243: LD_VAR 0 2
83247: PPUSH
83248: LD_VAR 0 3
83252: PPUSH
83253: LD_VAR 0 4
83257: PPUSH
83258: LD_VAR 0 5
83262: PPUSH
83263: LD_VAR 0 6
83267: PPUSH
83268: CALL 27133 0 6
// end ;
83272: PPOPN 6
83274: END
