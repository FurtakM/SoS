// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 , macmilan_squad ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// mission_prefix := 08_ ;
  15: LD_ADDR_EXP 43
  19: PUSH
  20: LD_STRING 08_
  22: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  23: LD_ADDR_EXP 44
  27: PUSH
  28: LD_STRING 07c_
  30: ST_TO_ADDR
// JMMArrive = 0 ;
  31: LD_ADDR_EXP 39
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// SikorskyArrive = 0 ;
  39: LD_ADDR_EXP 18
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  47: LD_ADDR_EXP 19
  51: PUSH
  52: LD_INT 35
  54: ST_TO_ADDR
// SikorskyAI = 0 ;
  55: LD_ADDR_EXP 20
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// SikorskyStatus = 0 ;
  63: LD_ADDR_EXP 21
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// firstAttack = 0 ;
  71: LD_ADDR_EXP 33
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// secondAttack = 0 ;
  79: LD_ADDR_EXP 34
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// startCutscene = 1 ;
  87: LD_ADDR_EXP 38
  91: PUSH
  92: LD_INT 1
  94: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  95: LD_ADDR_EXP 12
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 0
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// russianAI = 0 ;
 111: LD_ADDR_EXP 27
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// escapeAvalaible = 0 ;
 126: LD_ADDR_EXP 36
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// defenders_list = [ ] ;
 134: LD_ADDR_EXP 32
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// varEvent1 = 0 ;
 141: LD_ADDR_EXP 41
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// timerStatus = 0 ;
 149: LD_ADDR_EXP 35
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 157: LD_ADDR_EXP 40
 161: PUSH
 162: LD_INT 18
 164: PUSH
 165: LD_INT 17
 167: PUSH
 168: LD_INT 15
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// debugMode = 0 ;
 182: LD_ADDR_EXP 45
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// PrepareDifficulty ;
 190: CALL 7663 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 194: LD_INT 43
 196: PPUSH
 197: LD_INT 22
 199: PPUSH
 200: LD_INT 1
 202: PPUSH
 203: LD_INT 333
 205: NEG
 206: PPUSH
 207: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 211: LD_INT 43
 213: PPUSH
 214: LD_INT 22
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 331
// PrepareGammaBase ;
 224: CALL 2635 0 0
// PrepareHeroes ;
 228: CALL 571 0 0
// PrepareRussianCommander ;
 232: CALL 6519 0 0
// PrepareRussians ;
 236: CALL 6837 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 240: LD_INT 22
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 25
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 69
 268: PPUSH
 269: LD_INT 0
 271: PPUSH
 272: LD_INT 90
 274: PPUSH
 275: LD_INT 86
 277: PPUSH
 278: LD_INT 3
 280: PPUSH
 281: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 285: LD_INT 3
 287: PPUSH
 288: LD_INT 24
 290: PPUSH
 291: LD_INT 3
 293: PPUSH
 294: LD_EXP 25
 298: PPUSH
 299: LD_EXP 26
 303: PPUSH
 304: CALL_OW 12
 308: PPUSH
 309: LD_INT 6
 311: PPUSH
 312: LD_INT 4
 314: PPUSH
 315: CALL 9073 0 6
// PrepareCutsceneAttack ;
 319: CALL 6571 0 0
// end ;
 323: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 324: LD_INT 22
 326: PUSH
 327: LD_INT 1
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: PUSH
 334: LD_INT 34
 336: PUSH
 337: LD_INT 6
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: PUSH
 353: LD_INT 6
 355: GREATEREQUAL
 356: IFFALSE 368
 358: GO 360
 360: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 361: LD_STRING ACH_ARMOR
 363: PPUSH
 364: CALL_OW 543
 368: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 369: LD_EXP 45
 373: PUSH
 374: LD_INT 1
 376: EQUAL
 377: IFFALSE 568
 379: GO 381
 381: DISABLE
 382: LD_INT 0
 384: PPUSH
// begin enable ;
 385: ENABLE
// fogoff ( true ) ;
 386: LD_INT 1
 388: PPUSH
 389: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 393: LD_ADDR_VAR 0 1
 397: PUSH
 398: LD_INT 22
 400: PUSH
 401: LD_INT 1
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: PUSH
 408: LD_INT 21
 410: PUSH
 411: LD_INT 1
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PPUSH
 422: CALL_OW 69
 426: PUSH
 427: FOR_IN
 428: IFFALSE 444
// SetLives ( i , 1000 ) ;
 430: LD_VAR 0 1
 434: PPUSH
 435: LD_INT 1000
 437: PPUSH
 438: CALL_OW 234
 442: GO 427
 444: POP
 445: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 446: LD_ADDR_VAR 0 1
 450: PUSH
 451: LD_INT 22
 453: PUSH
 454: LD_INT 1
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PUSH
 461: LD_INT 30
 463: PUSH
 464: LD_INT 1
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PPUSH
 475: CALL_OW 69
 479: PUSH
 480: FOR_IN
 481: IFFALSE 505
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 483: LD_VAR 0 1
 487: PPUSH
 488: CALL_OW 274
 492: PPUSH
 493: LD_INT 1
 495: PPUSH
 496: LD_INT 9999
 498: PPUSH
 499: CALL_OW 277
 503: GO 480
 505: POP
 506: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 507: LD_ADDR_VAR 0 1
 511: PUSH
 512: LD_INT 22
 514: PUSH
 515: LD_INT 1
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PUSH
 522: LD_INT 30
 524: PUSH
 525: LD_INT 1
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PPUSH
 536: CALL_OW 69
 540: PUSH
 541: FOR_IN
 542: IFFALSE 566
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 544: LD_VAR 0 1
 548: PPUSH
 549: CALL_OW 274
 553: PPUSH
 554: LD_INT 2
 556: PPUSH
 557: LD_INT 9999
 559: PPUSH
 560: CALL_OW 277
 564: GO 541
 566: POP
 567: POP
// end ; end_of_file
 568: PPOPN 1
 570: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
 577: PPUSH
 578: PPUSH
 579: PPUSH
 580: PPUSH
 581: PPUSH
 582: PPUSH
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
 587: PPUSH
// uc_side = 1 ;
 588: LD_ADDR_OWVAR 20
 592: PUSH
 593: LD_INT 1
 595: ST_TO_ADDR
// uc_nation = 1 ;
 596: LD_ADDR_OWVAR 21
 600: PUSH
 601: LD_INT 1
 603: ST_TO_ADDR
// if gammaCommander = 1 then
 604: LD_EXP 12
 608: PUSH
 609: LD_INT 1
 611: EQUAL
 612: IFFALSE 663
// begin Donaldson = PrepareUnit ( Donaldson , true , 04_ ) ;
 614: LD_ADDR_EXP 3
 618: PUSH
 619: LD_STRING Donaldson
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: LD_STRING 04_
 627: PPUSH
 628: CALL 44245 0 3
 632: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 633: LD_EXP 3
 637: PPUSH
 638: LD_INT 54
 640: PPUSH
 641: LD_INT 25
 643: PPUSH
 644: LD_INT 8
 646: PPUSH
 647: LD_INT 0
 649: PPUSH
 650: CALL_OW 50
// ComHold ( Donaldson ) ;
 654: LD_EXP 3
 658: PPUSH
 659: CALL_OW 140
// end ; if gammaCommander = 2 then
 663: LD_EXP 12
 667: PUSH
 668: LD_INT 2
 670: EQUAL
 671: IFFALSE 722
// begin Brown = PrepareUnit ( Brown , true , 04_ ) ;
 673: LD_ADDR_EXP 2
 677: PUSH
 678: LD_STRING Brown
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: LD_STRING 04_
 686: PPUSH
 687: CALL 44245 0 3
 691: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 692: LD_EXP 2
 696: PPUSH
 697: LD_INT 54
 699: PPUSH
 700: LD_INT 25
 702: PPUSH
 703: LD_INT 8
 705: PPUSH
 706: LD_INT 0
 708: PPUSH
 709: CALL_OW 50
// ComHold ( Brown ) ;
 713: LD_EXP 2
 717: PPUSH
 718: CALL_OW 140
// end ; if gammaCommander = 3 then
 722: LD_EXP 12
 726: PUSH
 727: LD_INT 3
 729: EQUAL
 730: IFFALSE 781
// begin Houten = PrepareUnit ( VanHouten , false ,  ) ;
 732: LD_ADDR_EXP 13
 736: PUSH
 737: LD_STRING VanHouten
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: LD_STRING 
 745: PPUSH
 746: CALL 44245 0 3
 750: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 751: LD_EXP 13
 755: PPUSH
 756: LD_INT 54
 758: PPUSH
 759: LD_INT 25
 761: PPUSH
 762: LD_INT 8
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 50
// ComHold ( Houten ) ;
 772: LD_EXP 13
 776: PPUSH
 777: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ,  ) ;
 781: LD_ADDR_EXP 22
 785: PUSH
 786: LD_STRING Harisson
 788: PPUSH
 789: LD_INT 0
 791: PPUSH
 792: LD_STRING 
 794: PPUSH
 795: CALL 44245 0 3
 799: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 800: LD_ADDR_EXP 23
 804: PUSH
 805: LD_STRING Powell
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: LD_STRING 
 813: PPUSH
 814: CALL 44245 0 3
 818: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 819: LD_STRING 04_Lisa
 821: PUSH
 822: EMPTY
 823: LIST
 824: PPUSH
 825: CALL_OW 28
 829: PUSH
 830: LD_STRING LisaInDelta
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 30
 840: NOT
 841: AND
 842: PUSH
 843: LD_STRING 07_Lisa
 845: PUSH
 846: EMPTY
 847: LIST
 848: PPUSH
 849: CALL_OW 28
 853: NOT
 854: AND
 855: IFFALSE 894
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 857: LD_ADDR_EXP 6
 861: PUSH
 862: LD_STRING Lisa
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_STRING 04_
 870: PPUSH
 871: CALL 44245 0 3
 875: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 876: LD_ADDR_VAR 0 15
 880: PUSH
 881: LD_VAR 0 15
 885: PUSH
 886: LD_EXP 6
 890: ADD
 891: ST_TO_ADDR
// end else
 892: GO 949
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 894: LD_EXP 6
 898: NOT
 899: PUSH
 900: LD_STRING LisaIn07
 902: PPUSH
 903: LD_INT 0
 905: PPUSH
 906: CALL_OW 30
 910: NOT
 911: AND
 912: IFFALSE 949
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 914: LD_ADDR_EXP 6
 918: PUSH
 919: LD_STRING Lisa
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: LD_STRING 07_
 927: PPUSH
 928: CALL 44245 0 3
 932: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 933: LD_ADDR_VAR 0 15
 937: PUSH
 938: LD_VAR 0 15
 942: PUSH
 943: LD_EXP 6
 947: ADD
 948: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 949: LD_STRING 04_Bobby
 951: PUSH
 952: EMPTY
 953: LIST
 954: PPUSH
 955: CALL_OW 28
 959: PUSH
 960: LD_STRING BobbyInDelta
 962: PPUSH
 963: LD_INT 0
 965: PPUSH
 966: CALL_OW 30
 970: NOT
 971: AND
 972: PUSH
 973: LD_STRING 07_Bobby
 975: PUSH
 976: EMPTY
 977: LIST
 978: PPUSH
 979: CALL_OW 28
 983: NOT
 984: AND
 985: IFFALSE 1024
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 987: LD_ADDR_EXP 4
 991: PUSH
 992: LD_STRING Bobby
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_STRING 04_
1000: PPUSH
1001: CALL 44245 0 3
1005: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1006: LD_ADDR_VAR 0 15
1010: PUSH
1011: LD_VAR 0 15
1015: PUSH
1016: LD_EXP 4
1020: ADD
1021: ST_TO_ADDR
// end else
1022: GO 1079
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
1024: LD_EXP 4
1028: NOT
1029: PUSH
1030: LD_STRING BobbyIn07
1032: PPUSH
1033: LD_INT 0
1035: PPUSH
1036: CALL_OW 30
1040: NOT
1041: AND
1042: IFFALSE 1079
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
1044: LD_ADDR_EXP 4
1048: PUSH
1049: LD_STRING Bobby
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: LD_STRING 07_
1057: PPUSH
1058: CALL 44245 0 3
1062: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1063: LD_ADDR_VAR 0 15
1067: PUSH
1068: LD_VAR 0 15
1072: PUSH
1073: LD_EXP 4
1077: ADD
1078: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1079: LD_STRING 04_Cyrus
1081: PUSH
1082: EMPTY
1083: LIST
1084: PPUSH
1085: CALL_OW 28
1089: PUSH
1090: LD_STRING CyrusInDelta
1092: PPUSH
1093: LD_INT 0
1095: PPUSH
1096: CALL_OW 30
1100: NOT
1101: AND
1102: PUSH
1103: LD_STRING 07_Cyrus
1105: PUSH
1106: EMPTY
1107: LIST
1108: PPUSH
1109: CALL_OW 28
1113: NOT
1114: AND
1115: IFFALSE 1154
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
1117: LD_ADDR_EXP 5
1121: PUSH
1122: LD_STRING Cyrus
1124: PPUSH
1125: LD_INT 1
1127: PPUSH
1128: LD_STRING 04_
1130: PPUSH
1131: CALL 44245 0 3
1135: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1136: LD_ADDR_VAR 0 15
1140: PUSH
1141: LD_VAR 0 15
1145: PUSH
1146: LD_EXP 5
1150: ADD
1151: ST_TO_ADDR
// end else
1152: GO 1209
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1154: LD_EXP 5
1158: NOT
1159: PUSH
1160: LD_STRING CyrusIn07
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 30
1170: NOT
1171: AND
1172: IFFALSE 1209
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
1174: LD_ADDR_EXP 5
1178: PUSH
1179: LD_STRING Cyrus
1181: PPUSH
1182: LD_INT 1
1184: PPUSH
1185: LD_STRING 07_
1187: PPUSH
1188: CALL 44245 0 3
1192: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1193: LD_ADDR_VAR 0 15
1197: PUSH
1198: LD_VAR 0 15
1202: PUSH
1203: LD_EXP 5
1207: ADD
1208: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1209: LD_STRING 04_Brown
1211: PUSH
1212: EMPTY
1213: LIST
1214: PPUSH
1215: CALL_OW 28
1219: PUSH
1220: LD_STRING BrownInDelta
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL_OW 30
1230: NOT
1231: AND
1232: PUSH
1233: LD_STRING 07_Brown
1235: PUSH
1236: EMPTY
1237: LIST
1238: PPUSH
1239: CALL_OW 28
1243: NOT
1244: AND
1245: PUSH
1246: LD_EXP 12
1250: PUSH
1251: LD_INT 2
1253: NONEQUAL
1254: AND
1255: IFFALSE 1294
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1257: LD_ADDR_EXP 2
1261: PUSH
1262: LD_STRING Brown
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_STRING 04_
1270: PPUSH
1271: CALL 44245 0 3
1275: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1276: LD_ADDR_VAR 0 15
1280: PUSH
1281: LD_VAR 0 15
1285: PUSH
1286: LD_EXP 2
1290: ADD
1291: ST_TO_ADDR
// end else
1292: GO 1359
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1294: LD_EXP 2
1298: NOT
1299: PUSH
1300: LD_STRING BrownIn07
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL_OW 30
1310: NOT
1311: AND
1312: PUSH
1313: LD_EXP 12
1317: PUSH
1318: LD_INT 2
1320: NONEQUAL
1321: AND
1322: IFFALSE 1359
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1324: LD_ADDR_EXP 2
1328: PUSH
1329: LD_STRING Brown
1331: PPUSH
1332: LD_INT 1
1334: PPUSH
1335: LD_STRING 07_
1337: PPUSH
1338: CALL 44245 0 3
1342: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1343: LD_ADDR_VAR 0 15
1347: PUSH
1348: LD_VAR 0 15
1352: PUSH
1353: LD_EXP 2
1357: ADD
1358: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1359: LD_STRING 04_Donaldson
1361: PUSH
1362: EMPTY
1363: LIST
1364: PPUSH
1365: CALL_OW 28
1369: PUSH
1370: LD_STRING DonaldsonInDelta
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 30
1380: NOT
1381: AND
1382: PUSH
1383: LD_STRING 07_Donaldson
1385: PUSH
1386: EMPTY
1387: LIST
1388: PPUSH
1389: CALL_OW 28
1393: NOT
1394: AND
1395: PUSH
1396: LD_EXP 12
1400: PUSH
1401: LD_INT 1
1403: NONEQUAL
1404: AND
1405: IFFALSE 1444
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1407: LD_ADDR_EXP 3
1411: PUSH
1412: LD_STRING Donaldson
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: LD_STRING 04_
1420: PPUSH
1421: CALL 44245 0 3
1425: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1426: LD_ADDR_VAR 0 15
1430: PUSH
1431: LD_VAR 0 15
1435: PUSH
1436: LD_EXP 3
1440: ADD
1441: ST_TO_ADDR
// end else
1442: GO 1509
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1444: LD_EXP 3
1448: NOT
1449: PUSH
1450: LD_STRING DonaldsonIn07
1452: PPUSH
1453: LD_INT 0
1455: PPUSH
1456: CALL_OW 30
1460: NOT
1461: AND
1462: PUSH
1463: LD_EXP 12
1467: PUSH
1468: LD_INT 1
1470: NONEQUAL
1471: AND
1472: IFFALSE 1509
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1474: LD_ADDR_EXP 3
1478: PUSH
1479: LD_STRING Donaldson
1481: PPUSH
1482: LD_INT 1
1484: PPUSH
1485: LD_STRING 07_
1487: PPUSH
1488: CALL 44245 0 3
1492: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1493: LD_ADDR_VAR 0 15
1497: PUSH
1498: LD_VAR 0 15
1502: PUSH
1503: LD_EXP 3
1507: ADD
1508: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1509: LD_STRING KhatamIn07
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 30
1519: NOT
1520: IFFALSE 1557
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1522: LD_ADDR_EXP 10
1526: PUSH
1527: LD_STRING Khatam
1529: PPUSH
1530: LD_INT 1
1532: PPUSH
1533: LD_STRING 07_
1535: PPUSH
1536: CALL 44245 0 3
1540: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1541: LD_ADDR_VAR 0 15
1545: PUSH
1546: LD_VAR 0 15
1550: PUSH
1551: LD_EXP 10
1555: ADD
1556: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1557: LD_ADDR_EXP 11
1561: PUSH
1562: LD_STRING 07_othersGamma
1564: PPUSH
1565: CALL_OW 31
1569: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1570: LD_ADDR_VAR 0 14
1574: PUSH
1575: LD_INT 8
1577: PUSH
1578: LD_EXP 11
1582: MINUS
1583: ST_TO_ADDR
// if tmp then
1584: LD_VAR 0 14
1588: IFFALSE 1641
// for i = 1 to tmp do
1590: LD_ADDR_VAR 0 2
1594: PUSH
1595: DOUBLE
1596: LD_INT 1
1598: DEC
1599: ST_TO_ADDR
1600: LD_VAR 0 14
1604: PUSH
1605: FOR_TO
1606: IFFALSE 1639
// begin PrepareHuman ( false , 1 , 5 ) ;
1608: LD_INT 0
1610: PPUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_INT 5
1616: PPUSH
1617: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1621: LD_ADDR_EXP 11
1625: PUSH
1626: LD_EXP 11
1630: PUSH
1631: CALL_OW 44
1635: ADD
1636: ST_TO_ADDR
// end ;
1637: GO 1605
1639: POP
1640: POP
// if HexInfo ( 61 , 29 ) = 0 then
1641: LD_INT 61
1643: PPUSH
1644: LD_INT 29
1646: PPUSH
1647: CALL_OW 428
1651: PUSH
1652: LD_INT 0
1654: EQUAL
1655: IFFALSE 1686
// begin bc_type := b_barracks ;
1657: LD_ADDR_OWVAR 42
1661: PUSH
1662: LD_INT 5
1664: ST_TO_ADDR
// bc_level := 6 ;
1665: LD_ADDR_OWVAR 43
1669: PUSH
1670: LD_INT 6
1672: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1673: LD_INT 61
1675: PPUSH
1676: LD_INT 29
1678: PPUSH
1679: LD_INT 5
1681: PPUSH
1682: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1686: LD_ADDR_VAR 0 13
1690: PUSH
1691: LD_INT 22
1693: PUSH
1694: LD_INT 1
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 30
1703: PUSH
1704: LD_INT 31
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PPUSH
1715: CALL_OW 69
1719: ST_TO_ADDR
// for i in bun do
1720: LD_ADDR_VAR 0 2
1724: PUSH
1725: LD_VAR 0 13
1729: PUSH
1730: FOR_IN
1731: IFFALSE 1863
// begin x := GetX ( i ) ;
1733: LD_ADDR_VAR 0 3
1737: PUSH
1738: LD_VAR 0 2
1742: PPUSH
1743: CALL_OW 250
1747: ST_TO_ADDR
// y := GetY ( i ) ;
1748: LD_ADDR_VAR 0 4
1752: PUSH
1753: LD_VAR 0 2
1757: PPUSH
1758: CALL_OW 251
1762: ST_TO_ADDR
// d := GetDir ( i ) ;
1763: LD_ADDR_VAR 0 5
1767: PUSH
1768: LD_VAR 0 2
1772: PPUSH
1773: CALL_OW 254
1777: ST_TO_ADDR
// RemoveUnit ( i ) ;
1778: LD_VAR 0 2
1782: PPUSH
1783: CALL_OW 64
// bc_type := b_bunker ;
1787: LD_ADDR_OWVAR 42
1791: PUSH
1792: LD_INT 32
1794: ST_TO_ADDR
// bc_level := 6 ;
1795: LD_ADDR_OWVAR 43
1799: PUSH
1800: LD_INT 6
1802: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1803: LD_ADDR_VAR 0 6
1807: PUSH
1808: LD_VAR 0 3
1812: PPUSH
1813: LD_VAR 0 4
1817: PPUSH
1818: LD_VAR 0 5
1822: PPUSH
1823: CALL_OW 47
1827: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1828: LD_VAR 0 6
1832: PPUSH
1833: LD_INT 5
1835: PUSH
1836: LD_INT 4
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_VAR 0 2
1847: PUSH
1848: LD_INT 2
1850: MOD
1851: PUSH
1852: LD_INT 1
1854: PLUS
1855: ARRAY
1856: PPUSH
1857: CALL_OW 431
// end ;
1861: GO 1730
1863: POP
1864: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1865: LD_ADDR_VAR 0 9
1869: PUSH
1870: LD_INT 22
1872: PUSH
1873: LD_INT 1
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 30
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PPUSH
1894: CALL_OW 69
1898: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1899: LD_ADDR_VAR 0 8
1903: PUSH
1904: LD_INT 22
1906: PUSH
1907: LD_INT 1
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 2
1916: PUSH
1917: LD_INT 30
1919: PUSH
1920: LD_INT 6
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: LD_INT 30
1929: PUSH
1930: LD_INT 7
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: PUSH
1937: LD_INT 30
1939: PUSH
1940: LD_INT 8
1942: PUSH
1943: EMPTY
1944: LIST
1945: LIST
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PPUSH
1957: CALL_OW 69
1961: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1962: LD_ADDR_VAR 0 7
1966: PUSH
1967: LD_INT 22
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: LD_INT 30
1979: PUSH
1980: LD_INT 3
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 69
1995: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1996: LD_ADDR_VAR 0 12
2000: PUSH
2001: LD_INT 22
2003: PUSH
2004: LD_INT 1
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 30
2013: PUSH
2014: LD_INT 36
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PPUSH
2025: CALL_OW 69
2029: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
2030: LD_ADDR_VAR 0 13
2034: PUSH
2035: LD_INT 22
2037: PUSH
2038: LD_INT 1
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PUSH
2045: LD_INT 2
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 31
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 30
2060: PUSH
2061: LD_INT 32
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: PPUSH
2077: CALL_OW 69
2081: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
2082: LD_ADDR_VAR 0 2
2086: PUSH
2087: LD_EXP 11
2091: PUSH
2092: LD_VAR 0 15
2096: ADD
2097: PUSH
2098: FOR_IN
2099: IFFALSE 2520
// begin placed := false ;
2101: LD_ADDR_VAR 0 11
2105: PUSH
2106: LD_INT 0
2108: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2109: LD_VAR 0 2
2113: PPUSH
2114: CALL_OW 257
2118: PUSH
2119: LD_INT 1
2121: EQUAL
2122: IFFALSE 2247
// begin if UnitFilter ( bun , [ f_empty ] ) then
2124: LD_VAR 0 13
2128: PPUSH
2129: LD_INT 58
2131: PUSH
2132: EMPTY
2133: LIST
2134: PPUSH
2135: CALL_OW 72
2139: IFFALSE 2178
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2141: LD_VAR 0 2
2145: PPUSH
2146: LD_VAR 0 13
2150: PPUSH
2151: LD_INT 58
2153: PUSH
2154: EMPTY
2155: LIST
2156: PPUSH
2157: CALL_OW 72
2161: PUSH
2162: LD_INT 1
2164: ARRAY
2165: PPUSH
2166: CALL_OW 52
// placed := true ;
2170: LD_ADDR_VAR 0 11
2174: PUSH
2175: LD_INT 1
2177: ST_TO_ADDR
// end ; if arm and not placed then
2178: LD_VAR 0 9
2182: PUSH
2183: LD_VAR 0 11
2187: NOT
2188: AND
2189: IFFALSE 2247
// begin for j in arm do
2191: LD_ADDR_VAR 0 10
2195: PUSH
2196: LD_VAR 0 9
2200: PUSH
2201: FOR_IN
2202: IFFALSE 2245
// if UnitsInside ( j ) < 6 then
2204: LD_VAR 0 10
2208: PPUSH
2209: CALL_OW 313
2213: PUSH
2214: LD_INT 6
2216: LESS
2217: IFFALSE 2243
// begin PlaceHumanInUnit ( i , j ) ;
2219: LD_VAR 0 2
2223: PPUSH
2224: LD_VAR 0 10
2228: PPUSH
2229: CALL_OW 52
// placed := true ;
2233: LD_ADDR_VAR 0 11
2237: PUSH
2238: LD_INT 1
2240: ST_TO_ADDR
// break ;
2241: GO 2245
// end ;
2243: GO 2201
2245: POP
2246: POP
// end ; end ; if GetClass ( i ) = 2 then
2247: LD_VAR 0 2
2251: PPUSH
2252: CALL_OW 257
2256: PUSH
2257: LD_INT 2
2259: EQUAL
2260: IFFALSE 2293
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 52
2269: PPUSH
2270: LD_INT 20
2272: PPUSH
2273: LD_INT 6
2275: PPUSH
2276: LD_INT 0
2278: PPUSH
2279: CALL_OW 50
// placed := true ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_INT 1
2290: ST_TO_ADDR
// continue ;
2291: GO 2098
// end ; if GetClass ( i ) = 3 then
2293: LD_VAR 0 2
2297: PPUSH
2298: CALL_OW 257
2302: PUSH
2303: LD_INT 3
2305: EQUAL
2306: IFFALSE 2410
// if fac then
2308: LD_VAR 0 7
2312: IFFALSE 2410
// begin if ct then
2314: LD_VAR 0 12
2318: IFFALSE 2346
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2320: LD_VAR 0 2
2324: PPUSH
2325: LD_VAR 0 12
2329: PUSH
2330: LD_INT 1
2332: ARRAY
2333: PPUSH
2334: CALL_OW 52
// placed := true ;
2338: LD_ADDR_VAR 0 11
2342: PUSH
2343: LD_INT 1
2345: ST_TO_ADDR
// end ; if placed then
2346: LD_VAR 0 11
2350: IFFALSE 2354
// continue ;
2352: GO 2098
// for j in fac do
2354: LD_ADDR_VAR 0 10
2358: PUSH
2359: LD_VAR 0 7
2363: PUSH
2364: FOR_IN
2365: IFFALSE 2408
// if UnitsInside ( j ) < 6 then
2367: LD_VAR 0 10
2371: PPUSH
2372: CALL_OW 313
2376: PUSH
2377: LD_INT 6
2379: LESS
2380: IFFALSE 2406
// begin PlaceHumanInUnit ( i , j ) ;
2382: LD_VAR 0 2
2386: PPUSH
2387: LD_VAR 0 10
2391: PPUSH
2392: CALL_OW 52
// placed := true ;
2396: LD_ADDR_VAR 0 11
2400: PUSH
2401: LD_INT 1
2403: ST_TO_ADDR
// break ;
2404: GO 2408
// end ;
2406: GO 2364
2408: POP
2409: POP
// end ; if GetClass ( i ) = 4 then
2410: LD_VAR 0 2
2414: PPUSH
2415: CALL_OW 257
2419: PUSH
2420: LD_INT 4
2422: EQUAL
2423: IFFALSE 2487
// if lab then
2425: LD_VAR 0 8
2429: IFFALSE 2487
// begin for j in lab do
2431: LD_ADDR_VAR 0 10
2435: PUSH
2436: LD_VAR 0 8
2440: PUSH
2441: FOR_IN
2442: IFFALSE 2485
// if UnitsInside ( j ) < 6 then
2444: LD_VAR 0 10
2448: PPUSH
2449: CALL_OW 313
2453: PUSH
2454: LD_INT 6
2456: LESS
2457: IFFALSE 2483
// begin PlaceHumanInUnit ( i , j ) ;
2459: LD_VAR 0 2
2463: PPUSH
2464: LD_VAR 0 10
2468: PPUSH
2469: CALL_OW 52
// placed := true ;
2473: LD_ADDR_VAR 0 11
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// break ;
2481: GO 2485
// end ;
2483: GO 2441
2485: POP
2486: POP
// end ; if not placed then
2487: LD_VAR 0 11
2491: NOT
2492: IFFALSE 2518
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_INT 5
2501: PPUSH
2502: LD_INT 0
2504: PPUSH
2505: CALL_OW 49
// ComHold ( i ) ;
2509: LD_VAR 0 2
2513: PPUSH
2514: CALL_OW 140
// end ; end ;
2518: GO 2098
2520: POP
2521: POP
// if ct then
2522: LD_VAR 0 12
2526: IFFALSE 2630
// if UnitsInside ( ct [ 1 ] ) then
2528: LD_VAR 0 12
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PPUSH
2537: CALL_OW 313
2541: IFFALSE 2630
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2543: LD_ADDR_VAR 0 2
2547: PUSH
2548: LD_INT 22
2550: PUSH
2551: LD_INT 1
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: PUSH
2558: LD_INT 33
2560: PUSH
2561: LD_INT 2
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PPUSH
2572: CALL_OW 69
2576: PUSH
2577: FOR_IN
2578: IFFALSE 2628
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2580: LD_VAR 0 2
2584: PPUSH
2585: LD_VAR 0 12
2589: PUSH
2590: LD_INT 1
2592: ARRAY
2593: PPUSH
2594: CALL_OW 313
2598: PUSH
2599: LD_INT 1
2601: PPUSH
2602: LD_VAR 0 12
2606: PUSH
2607: LD_INT 1
2609: ARRAY
2610: PPUSH
2611: CALL_OW 313
2615: PPUSH
2616: CALL_OW 12
2620: ARRAY
2621: PPUSH
2622: CALL_OW 135
2626: GO 2577
2628: POP
2629: POP
// end ; end ;
2630: LD_VAR 0 1
2634: RET
// export function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2635: LD_INT 0
2637: PPUSH
2638: PPUSH
2639: PPUSH
2640: PPUSH
2641: PPUSH
2642: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2643: LD_INT 71
2645: PPUSH
2646: LD_INT 5
2648: PPUSH
2649: LD_INT 1
2651: PPUSH
2652: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2656: LD_ADDR_VAR 0 2
2660: PUSH
2661: LD_STRING GammaBase
2663: PPUSH
2664: EMPTY
2665: PPUSH
2666: CALL_OW 30
2670: ST_TO_ADDR
// if not blist then
2671: LD_VAR 0 2
2675: NOT
2676: IFFALSE 2716
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2678: LD_ADDR_VAR 0 2
2682: PUSH
2683: LD_INT 1
2685: PUSH
2686: LD_INT 52
2688: PUSH
2689: LD_INT 12
2691: PUSH
2692: LD_INT 3
2694: PUSH
2695: LD_INT 3
2697: PUSH
2698: LD_INT 0
2700: PUSH
2701: LD_INT 0
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: LIST
2710: LIST
2711: LIST
2712: PUSH
2713: EMPTY
2714: LIST
2715: ST_TO_ADDR
// uc_side := 1 ;
2716: LD_ADDR_OWVAR 20
2720: PUSH
2721: LD_INT 1
2723: ST_TO_ADDR
// uc_nation := 1 ;
2724: LD_ADDR_OWVAR 21
2728: PUSH
2729: LD_INT 1
2731: ST_TO_ADDR
// bc_kind1 := - 1 ;
2732: LD_ADDR_OWVAR 44
2736: PUSH
2737: LD_INT 1
2739: NEG
2740: ST_TO_ADDR
// bc_kind2 := - 1 ;
2741: LD_ADDR_OWVAR 45
2745: PUSH
2746: LD_INT 1
2748: NEG
2749: ST_TO_ADDR
// for i in blist do
2750: LD_ADDR_VAR 0 3
2754: PUSH
2755: LD_VAR 0 2
2759: PUSH
2760: FOR_IN
2761: IFFALSE 3037
// begin bc_type := i [ 1 ] ;
2763: LD_ADDR_OWVAR 42
2767: PUSH
2768: LD_VAR 0 3
2772: PUSH
2773: LD_INT 1
2775: ARRAY
2776: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2777: LD_ADDR_OWVAR 43
2781: PUSH
2782: LD_VAR 0 3
2786: PUSH
2787: LD_INT 5
2789: ARRAY
2790: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2791: LD_OWVAR 42
2795: PUSH
2796: LD_INT 6
2798: PUSH
2799: LD_INT 7
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: IN
2806: IFFALSE 2872
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2808: LD_STRING 06_remoteVehs_1
2810: PPUSH
2811: LD_INT 0
2813: PPUSH
2814: CALL_OW 30
2818: NOT
2819: IFFALSE 2847
// begin bc_type := b_lab_full ;
2821: LD_ADDR_OWVAR 42
2825: PUSH
2826: LD_INT 8
2828: ST_TO_ADDR
// bc_kind1 := 10 ;
2829: LD_ADDR_OWVAR 44
2833: PUSH
2834: LD_INT 10
2836: ST_TO_ADDR
// bc_kind2 := 15 ;
2837: LD_ADDR_OWVAR 45
2841: PUSH
2842: LD_INT 15
2844: ST_TO_ADDR
// end else
2845: GO 2872
// begin bc_type := b_lab_half ;
2847: LD_ADDR_OWVAR 42
2851: PUSH
2852: LD_INT 7
2854: ST_TO_ADDR
// bc_kind1 := 10 ;
2855: LD_ADDR_OWVAR 44
2859: PUSH
2860: LD_INT 10
2862: ST_TO_ADDR
// bc_kind2 := - 1 ;
2863: LD_ADDR_OWVAR 45
2867: PUSH
2868: LD_INT 1
2870: NEG
2871: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2872: LD_OWVAR 42
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: IFFALSE 2890
// bc_type := b_factory ;
2882: LD_ADDR_OWVAR 42
2886: PUSH
2887: LD_INT 3
2889: ST_TO_ADDR
// if bc_type = b_depot then
2890: LD_OWVAR 42
2894: PUSH
2895: LD_INT 0
2897: EQUAL
2898: IFFALSE 2947
// begin bc_type := b_warehouse ;
2900: LD_ADDR_OWVAR 42
2904: PUSH
2905: LD_INT 1
2907: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2908: LD_ADDR_EXP 37
2912: PUSH
2913: LD_VAR 0 3
2917: PUSH
2918: LD_INT 2
2920: ARRAY
2921: PPUSH
2922: LD_VAR 0 3
2926: PUSH
2927: LD_INT 3
2929: ARRAY
2930: PPUSH
2931: LD_VAR 0 3
2935: PUSH
2936: LD_INT 4
2938: ARRAY
2939: PPUSH
2940: CALL_OW 47
2944: ST_TO_ADDR
// continue ;
2945: GO 2760
// end ; if bc_type = b_armoury then
2947: LD_OWVAR 42
2951: PUSH
2952: LD_INT 4
2954: EQUAL
2955: IFFALSE 2965
// bc_type = b_barracks ;
2957: LD_ADDR_OWVAR 42
2961: PUSH
2962: LD_INT 5
2964: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2965: LD_ADDR_VAR 0 4
2969: PUSH
2970: LD_VAR 0 3
2974: PUSH
2975: LD_INT 2
2977: ARRAY
2978: PPUSH
2979: LD_VAR 0 3
2983: PUSH
2984: LD_INT 3
2986: ARRAY
2987: PPUSH
2988: LD_VAR 0 3
2992: PUSH
2993: LD_INT 4
2995: ARRAY
2996: PPUSH
2997: CALL_OW 47
3001: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
3002: LD_VAR 0 4
3006: PPUSH
3007: CALL_OW 266
3011: PUSH
3012: LD_INT 32
3014: EQUAL
3015: IFFALSE 3035
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3017: LD_VAR 0 4
3021: PPUSH
3022: LD_VAR 0 3
3026: PUSH
3027: LD_INT 7
3029: ARRAY
3030: PPUSH
3031: CALL_OW 431
// end ;
3035: GO 2760
3037: POP
3038: POP
// if not amDepot then
3039: LD_EXP 37
3043: NOT
3044: IFFALSE 3081
// begin bc_type := b_warehouse ;
3046: LD_ADDR_OWVAR 42
3050: PUSH
3051: LD_INT 1
3053: ST_TO_ADDR
// bc_level := 6 ;
3054: LD_ADDR_OWVAR 43
3058: PUSH
3059: LD_INT 6
3061: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
3062: LD_ADDR_EXP 37
3066: PUSH
3067: LD_INT 52
3069: PPUSH
3070: LD_INT 12
3072: PPUSH
3073: LD_INT 3
3075: PPUSH
3076: CALL_OW 47
3080: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
3081: LD_EXP 37
3085: PPUSH
3086: LD_STRING gamma
3088: PPUSH
3089: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
3093: LD_EXP 37
3097: PPUSH
3098: CALL_OW 274
3102: PPUSH
3103: LD_INT 1
3105: PPUSH
3106: LD_INT 500
3108: PUSH
3109: LD_INT 420
3111: PUSH
3112: LD_INT 350
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: LIST
3119: PUSH
3120: LD_OWVAR 67
3124: ARRAY
3125: PPUSH
3126: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3130: LD_EXP 37
3134: PPUSH
3135: CALL_OW 274
3139: PPUSH
3140: LD_INT 2
3142: PPUSH
3143: LD_INT 200
3145: PPUSH
3146: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3150: LD_INT 22
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 30
3162: PUSH
3163: LD_INT 3
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: PPUSH
3174: CALL_OW 69
3178: IFFALSE 3426
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3180: LD_ADDR_VAR 0 4
3184: PUSH
3185: LD_INT 22
3187: PUSH
3188: LD_INT 1
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: LD_INT 30
3197: PUSH
3198: LD_INT 3
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PPUSH
3209: CALL_OW 69
3213: PUSH
3214: LD_INT 1
3216: ARRAY
3217: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3218: LD_ADDR_VAR 0 6
3222: PUSH
3223: LD_VAR 0 4
3227: PPUSH
3228: CALL_OW 250
3232: PPUSH
3233: LD_VAR 0 4
3237: PPUSH
3238: CALL_OW 251
3242: PPUSH
3243: LD_VAR 0 4
3247: PPUSH
3248: CALL_OW 254
3252: PPUSH
3253: CALL 78203 0 3
3257: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3258: LD_ADDR_VAR 0 2
3262: PUSH
3263: LD_INT 19
3265: PUSH
3266: LD_INT 17
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3273: LD_STRING 06_remoteVehs_1
3275: PPUSH
3276: LD_INT 0
3278: PPUSH
3279: CALL_OW 30
3283: IFFALSE 3306
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3285: LD_ADDR_VAR 0 2
3289: PUSH
3290: LD_VAR 0 2
3294: PPUSH
3295: LD_INT 1
3297: PPUSH
3298: LD_INT 22
3300: PPUSH
3301: CALL_OW 2
3305: ST_TO_ADDR
// for i in tmp do
3306: LD_ADDR_VAR 0 3
3310: PUSH
3311: LD_VAR 0 6
3315: PUSH
3316: FOR_IN
3317: IFFALSE 3424
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3319: LD_VAR 0 3
3323: PUSH
3324: LD_INT 1
3326: ARRAY
3327: PPUSH
3328: LD_VAR 0 3
3332: PUSH
3333: LD_INT 2
3335: ARRAY
3336: PPUSH
3337: CALL_OW 428
3341: PUSH
3342: LD_INT 0
3344: EQUAL
3345: IFFALSE 3422
// begin bc_type := blist [ 1 ] ;
3347: LD_ADDR_OWVAR 42
3351: PUSH
3352: LD_VAR 0 2
3356: PUSH
3357: LD_INT 1
3359: ARRAY
3360: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3361: LD_VAR 0 3
3365: PUSH
3366: LD_INT 1
3368: ARRAY
3369: PPUSH
3370: LD_VAR 0 3
3374: PUSH
3375: LD_INT 2
3377: ARRAY
3378: PPUSH
3379: LD_VAR 0 3
3383: PUSH
3384: LD_INT 3
3386: ARRAY
3387: PPUSH
3388: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3392: LD_ADDR_VAR 0 2
3396: PUSH
3397: LD_VAR 0 2
3401: PPUSH
3402: LD_INT 1
3404: PPUSH
3405: CALL_OW 3
3409: ST_TO_ADDR
// if blist = 0 then
3410: LD_VAR 0 2
3414: PUSH
3415: LD_INT 0
3417: EQUAL
3418: IFFALSE 3422
// break ;
3420: GO 3424
// end ;
3422: GO 3316
3424: POP
3425: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3426: LD_STRING 06_remoteVehs_1
3428: PPUSH
3429: LD_INT 0
3431: PPUSH
3432: CALL_OW 30
3436: IFFALSE 3895
// begin bc_type = 36 ;
3438: LD_ADDR_OWVAR 42
3442: PUSH
3443: LD_INT 36
3445: ST_TO_ADDR
// bc_level = 4 ;
3446: LD_ADDR_OWVAR 43
3450: PUSH
3451: LD_INT 4
3453: ST_TO_ADDR
// if CanBeBuiltCost ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3454: LD_EXP 37
3458: PPUSH
3459: LD_INT 36
3461: PPUSH
3462: LD_INT 62
3464: PPUSH
3465: LD_INT 12
3467: PPUSH
3468: LD_INT 3
3470: PPUSH
3471: LD_INT 0
3473: PPUSH
3474: CALL 17040 0 6
3478: PUSH
3479: LD_INT 92
3481: PUSH
3482: LD_INT 62
3484: PUSH
3485: LD_INT 12
3487: PUSH
3488: LD_INT 3
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: PPUSH
3497: CALL_OW 69
3501: NOT
3502: AND
3503: IFFALSE 3520
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3505: LD_INT 62
3507: PPUSH
3508: LD_INT 12
3510: PPUSH
3511: LD_INT 3
3513: PPUSH
3514: CALL_OW 47
3518: GO 3691
// if CanBeBuiltCost ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3520: LD_EXP 37
3524: PPUSH
3525: LD_INT 36
3527: PPUSH
3528: LD_INT 37
3530: PPUSH
3531: LD_INT 18
3533: PPUSH
3534: LD_INT 2
3536: PPUSH
3537: LD_INT 0
3539: PPUSH
3540: CALL 17040 0 6
3544: PUSH
3545: LD_INT 92
3547: PUSH
3548: LD_INT 37
3550: PUSH
3551: LD_INT 18
3553: PUSH
3554: LD_INT 3
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: PPUSH
3563: CALL_OW 69
3567: NOT
3568: AND
3569: IFFALSE 3586
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3571: LD_INT 37
3573: PPUSH
3574: LD_INT 18
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 47
3584: GO 3691
// if CanBeBuiltCost ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3586: LD_EXP 37
3590: PPUSH
3591: LD_INT 36
3593: PPUSH
3594: LD_INT 66
3596: PPUSH
3597: LD_INT 14
3599: PPUSH
3600: LD_INT 4
3602: PPUSH
3603: LD_INT 0
3605: PPUSH
3606: CALL 17040 0 6
3610: PUSH
3611: LD_INT 92
3613: PUSH
3614: LD_INT 66
3616: PUSH
3617: LD_INT 14
3619: PUSH
3620: LD_INT 3
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PPUSH
3629: CALL_OW 69
3633: NOT
3634: AND
3635: IFFALSE 3652
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3637: LD_INT 66
3639: PPUSH
3640: LD_INT 14
3642: PPUSH
3643: LD_INT 4
3645: PPUSH
3646: CALL_OW 47
3650: GO 3691
// if CanBeBuiltCost ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3652: LD_EXP 37
3656: PPUSH
3657: LD_INT 36
3659: PPUSH
3660: LD_INT 74
3662: PPUSH
3663: LD_INT 26
3665: PPUSH
3666: LD_INT 4
3668: PPUSH
3669: LD_INT 0
3671: PPUSH
3672: CALL 17040 0 6
3676: IFFALSE 3691
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3678: LD_INT 74
3680: PPUSH
3681: LD_INT 26
3683: PPUSH
3684: LD_INT 4
3686: PPUSH
3687: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3691: LD_INT 22
3693: PUSH
3694: LD_INT 1
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: LD_INT 30
3703: PUSH
3704: LD_INT 36
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PPUSH
3715: CALL_OW 69
3719: NOT
3720: IFFALSE 3724
// exit ;
3722: GO 3895
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3724: LD_ADDR_VAR 0 3
3728: PUSH
3729: DOUBLE
3730: LD_INT 1
3732: DEC
3733: ST_TO_ADDR
3734: LD_INT 3
3736: PUSH
3737: LD_INT 2
3739: PUSH
3740: LD_INT 2
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: LIST
3747: PUSH
3748: LD_OWVAR 67
3752: ARRAY
3753: PUSH
3754: FOR_TO
3755: IFFALSE 3893
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3757: LD_ADDR_OWVAR 37
3761: PUSH
3762: LD_INT 3
3764: PUSH
3765: LD_INT 2
3767: PUSH
3768: LD_INT 3
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: PUSH
3775: LD_INT 1
3777: PPUSH
3778: LD_INT 2
3780: PPUSH
3781: CALL_OW 12
3785: ARRAY
3786: PUSH
3787: LD_INT 2
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: LIST
3794: PUSH
3795: LD_OWVAR 67
3799: ARRAY
3800: ST_TO_ADDR
// vc_engine = 1 ;
3801: LD_ADDR_OWVAR 39
3805: PUSH
3806: LD_INT 1
3808: ST_TO_ADDR
// vc_control = 2 ;
3809: LD_ADDR_OWVAR 38
3813: PUSH
3814: LD_INT 2
3816: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3817: LD_ADDR_OWVAR 40
3821: PUSH
3822: LD_INT 3
3824: PUSH
3825: LD_INT 4
3827: PUSH
3828: LD_INT 5
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 1
3838: PPUSH
3839: LD_INT 3
3841: PPUSH
3842: CALL_OW 12
3846: ARRAY
3847: ST_TO_ADDR
// veh = CreateVehicle ;
3848: LD_ADDR_VAR 0 5
3852: PUSH
3853: CALL_OW 45
3857: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3858: LD_VAR 0 5
3862: PPUSH
3863: LD_INT 4
3865: PPUSH
3866: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3870: LD_VAR 0 5
3874: PPUSH
3875: LD_INT 56
3877: PPUSH
3878: LD_INT 17
3880: PPUSH
3881: LD_INT 9
3883: PPUSH
3884: LD_INT 0
3886: PPUSH
3887: CALL_OW 50
// end ;
3891: GO 3754
3893: POP
3894: POP
// end ; end ;
3895: LD_VAR 0 1
3899: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3900: LD_INT 0
3902: PPUSH
3903: PPUSH
3904: PPUSH
3905: PPUSH
// uc_side = 1 ;
3906: LD_ADDR_OWVAR 20
3910: PUSH
3911: LD_INT 1
3913: ST_TO_ADDR
// uc_nation = 1 ;
3914: LD_ADDR_OWVAR 21
3918: PUSH
3919: LD_INT 1
3921: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 06c_ ) ;
3922: LD_ADDR_EXP 14
3926: PUSH
3927: LD_STRING Denis
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_STRING 06c_
3935: PPUSH
3936: CALL 44245 0 3
3940: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3941: LD_EXP 14
3945: PPUSH
3946: LD_INT 4
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 49
// Joan = PrepareUnit ( Joan , true , 06c_ ) ;
3956: LD_ADDR_EXP 15
3960: PUSH
3961: LD_STRING Joan
3963: PPUSH
3964: LD_INT 1
3966: PPUSH
3967: LD_STRING 06c_
3969: PPUSH
3970: CALL 44245 0 3
3974: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3975: LD_EXP 15
3979: PPUSH
3980: LD_INT 4
3982: PPUSH
3983: LD_INT 0
3985: PPUSH
3986: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3990: LD_STRING GladstoneIn07
3992: PPUSH
3993: LD_INT 0
3995: PPUSH
3996: CALL_OW 30
4000: NOT
4001: IFFALSE 4075
// begin Gladstone = PrepareUnit ( Gladstone , true , 06c_ ) ;
4003: LD_ADDR_EXP 8
4007: PUSH
4008: LD_STRING Gladstone
4010: PPUSH
4011: LD_INT 1
4013: PPUSH
4014: LD_STRING 06c_
4016: PPUSH
4017: CALL 44245 0 3
4021: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4022: LD_EXP 8
4026: NOT
4027: PUSH
4028: LD_STRING GladstoneStayInDelta
4030: PPUSH
4031: LD_INT 0
4033: PPUSH
4034: CALL_OW 30
4038: AND
4039: IFFALSE 4060
// Gladstone = PrepareUnit ( Gladstone , true , 05_ ) ;
4041: LD_ADDR_EXP 8
4045: PUSH
4046: LD_STRING Gladstone
4048: PPUSH
4049: LD_INT 1
4051: PPUSH
4052: LD_STRING 05_
4054: PPUSH
4055: CALL 44245 0 3
4059: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4060: LD_EXP 8
4064: PPUSH
4065: LD_INT 4
4067: PPUSH
4068: LD_INT 0
4070: PPUSH
4071: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4075: LD_STRING LisaStayInDelta
4077: PPUSH
4078: LD_INT 0
4080: PPUSH
4081: CALL_OW 30
4085: IFFALSE 4121
// begin Lisa = PrepareUnit ( Lisa , true , 05_ ) ;
4087: LD_ADDR_EXP 6
4091: PUSH
4092: LD_STRING Lisa
4094: PPUSH
4095: LD_INT 1
4097: PPUSH
4098: LD_STRING 05_
4100: PPUSH
4101: CALL 44245 0 3
4105: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4106: LD_EXP 6
4110: PPUSH
4111: LD_INT 4
4113: PPUSH
4114: LD_INT 0
4116: PPUSH
4117: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4121: LD_STRING BobbyStayInDelta
4123: PPUSH
4124: LD_INT 0
4126: PPUSH
4127: CALL_OW 30
4131: IFFALSE 4167
// begin Bobby = PrepareUnit ( Bobby , true , 05_ ) ;
4133: LD_ADDR_EXP 4
4137: PUSH
4138: LD_STRING Bobby
4140: PPUSH
4141: LD_INT 1
4143: PPUSH
4144: LD_STRING 05_
4146: PPUSH
4147: CALL 44245 0 3
4151: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4152: LD_EXP 4
4156: PPUSH
4157: LD_INT 4
4159: PPUSH
4160: LD_INT 0
4162: PPUSH
4163: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4167: LD_STRING CyrusStayInDelta
4169: PPUSH
4170: LD_INT 0
4172: PPUSH
4173: CALL_OW 30
4177: IFFALSE 4213
// begin Cyrus = PrepareUnit ( Cyrus , true , 05_ ) ;
4179: LD_ADDR_EXP 5
4183: PUSH
4184: LD_STRING Cyrus
4186: PPUSH
4187: LD_INT 1
4189: PPUSH
4190: LD_STRING 05_
4192: PPUSH
4193: CALL 44245 0 3
4197: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4198: LD_EXP 5
4202: PPUSH
4203: LD_INT 4
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4213: LD_STRING BrownStayInDelta
4215: PPUSH
4216: LD_INT 0
4218: PPUSH
4219: CALL_OW 30
4223: IFFALSE 4259
// begin Brown = PrepareUnit ( Brown , true , 05_ ) ;
4225: LD_ADDR_EXP 2
4229: PUSH
4230: LD_STRING Brown
4232: PPUSH
4233: LD_INT 1
4235: PPUSH
4236: LD_STRING 05_
4238: PPUSH
4239: CALL 44245 0 3
4243: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4244: LD_EXP 2
4248: PPUSH
4249: LD_INT 4
4251: PPUSH
4252: LD_INT 0
4254: PPUSH
4255: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4259: LD_STRING DonaldsonStayInDelta
4261: PPUSH
4262: LD_INT 0
4264: PPUSH
4265: CALL_OW 30
4269: IFFALSE 4305
// begin Donaldson = PrepareUnit ( Donaldson , true , 05_ ) ;
4271: LD_ADDR_EXP 3
4275: PUSH
4276: LD_STRING Donaldson
4278: PPUSH
4279: LD_INT 1
4281: PPUSH
4282: LD_STRING 05_
4284: PPUSH
4285: CALL 44245 0 3
4289: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4290: LD_EXP 3
4294: PPUSH
4295: LD_INT 4
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4305: LD_ADDR_VAR 0 4
4309: PUSH
4310: LD_STRING OthersStayInDelta
4312: PPUSH
4313: CALL_OW 31
4317: ST_TO_ADDR
// if other > 2 then
4318: LD_VAR 0 4
4322: PUSH
4323: LD_INT 2
4325: GREATER
4326: IFFALSE 4371
// begin for j = 1 to 2 do
4328: LD_ADDR_VAR 0 3
4332: PUSH
4333: DOUBLE
4334: LD_INT 1
4336: DEC
4337: ST_TO_ADDR
4338: LD_INT 2
4340: PUSH
4341: FOR_TO
4342: IFFALSE 4367
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4344: LD_VAR 0 4
4348: PUSH
4349: LD_VAR 0 3
4353: ARRAY
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_INT 0
4360: PPUSH
4361: CALL_OW 49
4365: GO 4341
4367: POP
4368: POP
// end else
4369: GO 4414
// begin for j = 1 to other do
4371: LD_ADDR_VAR 0 3
4375: PUSH
4376: DOUBLE
4377: LD_INT 1
4379: DEC
4380: ST_TO_ADDR
4381: LD_VAR 0 4
4385: PUSH
4386: FOR_TO
4387: IFFALSE 4412
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4389: LD_VAR 0 4
4393: PUSH
4394: LD_VAR 0 3
4398: ARRAY
4399: PPUSH
4400: LD_INT 4
4402: PPUSH
4403: LD_INT 0
4405: PPUSH
4406: CALL_OW 49
4410: GO 4386
4412: POP
4413: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4414: LD_ADDR_VAR 0 4
4418: PUSH
4419: LD_STRING 06_other_apemans
4421: PPUSH
4422: CALL_OW 31
4426: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4427: LD_VAR 0 4
4431: PUSH
4432: LD_INT 5
4434: PUSH
4435: LD_INT 4
4437: PUSH
4438: LD_INT 3
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: LD_OWVAR 67
4450: ARRAY
4451: GREATEREQUAL
4452: IFFALSE 4481
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4454: LD_ADDR_VAR 0 3
4458: PUSH
4459: LD_INT 5
4461: PUSH
4462: LD_INT 4
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: LD_OWVAR 67
4477: ARRAY
4478: ST_TO_ADDR
4479: GO 4491
// j := other ;
4481: LD_ADDR_VAR 0 3
4485: PUSH
4486: LD_VAR 0 4
4490: ST_TO_ADDR
// for i = 1 to j do
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: DOUBLE
4497: LD_INT 1
4499: DEC
4500: ST_TO_ADDR
4501: LD_VAR 0 3
4505: PUSH
4506: FOR_TO
4507: IFFALSE 4532
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4509: LD_VAR 0 4
4513: PUSH
4514: LD_VAR 0 2
4518: ARRAY
4519: PPUSH
4520: LD_INT 4
4522: PPUSH
4523: LD_INT 0
4525: PPUSH
4526: CALL_OW 49
4530: GO 4506
4532: POP
4533: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 22
4539: PUSH
4540: LD_INT 1
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PUSH
4547: LD_INT 21
4549: PUSH
4550: LD_INT 1
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PPUSH
4561: CALL_OW 70
4565: PPUSH
4566: LD_INT 53
4568: PPUSH
4569: LD_INT 19
4571: PPUSH
4572: CALL_OW 111
// firstAttack = 1 ;
4576: LD_ADDR_EXP 33
4580: PUSH
4581: LD_INT 1
4583: ST_TO_ADDR
// end ;
4584: LD_VAR 0 1
4588: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4589: LD_INT 0
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
4596: PPUSH
4597: PPUSH
4598: PPUSH
4599: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4600: LD_ADDR_VAR 0 8
4604: PUSH
4605: LD_STRING 07_vehicles
4607: PPUSH
4608: EMPTY
4609: PPUSH
4610: CALL_OW 30
4614: ST_TO_ADDR
// macmilan_squad := [ ] ;
4615: LD_ADDR_EXP 42
4619: PUSH
4620: EMPTY
4621: ST_TO_ADDR
// tmp_vehs := [ ] ;
4622: LD_ADDR_VAR 0 7
4626: PUSH
4627: EMPTY
4628: ST_TO_ADDR
// uc_side := 1 ;
4629: LD_ADDR_OWVAR 20
4633: PUSH
4634: LD_INT 1
4636: ST_TO_ADDR
// uc_nation := 1 ;
4637: LD_ADDR_OWVAR 21
4641: PUSH
4642: LD_INT 1
4644: ST_TO_ADDR
// if vehicles then
4645: LD_VAR 0 8
4649: IFFALSE 4808
// begin k := 1 ;
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: LD_INT 1
4658: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4659: LD_ADDR_VAR 0 2
4663: PUSH
4664: DOUBLE
4665: LD_INT 1
4667: DEC
4668: ST_TO_ADDR
4669: LD_VAR 0 8
4673: PUSH
4674: LD_INT 4
4676: DIV
4677: PUSH
4678: FOR_TO
4679: IFFALSE 4806
// begin vc_chassis = vehicles [ k ] ;
4681: LD_ADDR_OWVAR 37
4685: PUSH
4686: LD_VAR 0 8
4690: PUSH
4691: LD_VAR 0 3
4695: ARRAY
4696: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4697: LD_ADDR_OWVAR 39
4701: PUSH
4702: LD_VAR 0 8
4706: PUSH
4707: LD_VAR 0 3
4711: PUSH
4712: LD_INT 1
4714: PLUS
4715: ARRAY
4716: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4717: LD_ADDR_OWVAR 38
4721: PUSH
4722: LD_VAR 0 8
4726: PUSH
4727: LD_VAR 0 3
4731: PUSH
4732: LD_INT 2
4734: PLUS
4735: ARRAY
4736: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4737: LD_ADDR_OWVAR 40
4741: PUSH
4742: LD_VAR 0 8
4746: PUSH
4747: LD_VAR 0 3
4751: PUSH
4752: LD_INT 3
4754: PLUS
4755: ARRAY
4756: ST_TO_ADDR
// k := k + 4 ;
4757: LD_ADDR_VAR 0 3
4761: PUSH
4762: LD_VAR 0 3
4766: PUSH
4767: LD_INT 4
4769: PLUS
4770: ST_TO_ADDR
// veh := CreateVehicle ;
4771: LD_ADDR_VAR 0 9
4775: PUSH
4776: CALL_OW 45
4780: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4781: LD_ADDR_VAR 0 7
4785: PUSH
4786: LD_VAR 0 7
4790: PPUSH
4791: LD_INT 1
4793: PPUSH
4794: LD_VAR 0 9
4798: PPUSH
4799: CALL_OW 2
4803: ST_TO_ADDR
// end ;
4804: GO 4678
4806: POP
4807: POP
// end ; JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
4808: LD_ADDR_EXP 1
4812: PUSH
4813: LD_STRING JMM
4815: PPUSH
4816: LD_INT 1
4818: PPUSH
4819: LD_EXP 44
4823: PPUSH
4824: CALL 44245 0 3
4828: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4829: LD_EXP 12
4833: PUSH
4834: LD_INT 1
4836: EQUAL
4837: PUSH
4838: LD_EXP 12
4842: PUSH
4843: LD_INT 3
4845: EQUAL
4846: OR
4847: PUSH
4848: LD_EXP 2
4852: NOT
4853: AND
4854: IFFALSE 4906
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
4856: LD_ADDR_EXP 2
4860: PUSH
4861: LD_STRING Brown
4863: PPUSH
4864: LD_INT 1
4866: PPUSH
4867: LD_EXP 44
4871: PPUSH
4872: CALL 44245 0 3
4876: ST_TO_ADDR
// if Brown then
4877: LD_EXP 2
4881: IFFALSE 4906
// tmp := Insert ( tmp , 1 , Brown ) ;
4883: LD_ADDR_VAR 0 6
4887: PUSH
4888: LD_VAR 0 6
4892: PPUSH
4893: LD_INT 1
4895: PPUSH
4896: LD_EXP 2
4900: PPUSH
4901: CALL_OW 2
4905: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4906: LD_EXP 12
4910: PUSH
4911: LD_INT 2
4913: EQUAL
4914: PUSH
4915: LD_EXP 12
4919: PUSH
4920: LD_INT 3
4922: EQUAL
4923: OR
4924: PUSH
4925: LD_EXP 3
4929: NOT
4930: AND
4931: IFFALSE 4983
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
4933: LD_ADDR_EXP 3
4937: PUSH
4938: LD_STRING Donaldson
4940: PPUSH
4941: LD_INT 1
4943: PPUSH
4944: LD_EXP 44
4948: PPUSH
4949: CALL 44245 0 3
4953: ST_TO_ADDR
// if Donaldson then
4954: LD_EXP 3
4958: IFFALSE 4983
// tmp := Insert ( tmp , 1 , Donaldson ) ;
4960: LD_ADDR_VAR 0 6
4964: PUSH
4965: LD_VAR 0 6
4969: PPUSH
4970: LD_INT 1
4972: PPUSH
4973: LD_EXP 3
4977: PPUSH
4978: CALL_OW 2
4982: ST_TO_ADDR
// end ; if not Bobby then
4983: LD_EXP 4
4987: NOT
4988: IFFALSE 5040
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
4990: LD_ADDR_EXP 4
4994: PUSH
4995: LD_STRING Bobby
4997: PPUSH
4998: LD_INT 1
5000: PPUSH
5001: LD_EXP 44
5005: PPUSH
5006: CALL 44245 0 3
5010: ST_TO_ADDR
// if Bobby then
5011: LD_EXP 4
5015: IFFALSE 5040
// tmp := Insert ( tmp , 1 , Bobby ) ;
5017: LD_ADDR_VAR 0 6
5021: PUSH
5022: LD_VAR 0 6
5026: PPUSH
5027: LD_INT 1
5029: PPUSH
5030: LD_EXP 4
5034: PPUSH
5035: CALL_OW 2
5039: ST_TO_ADDR
// end ; if not Cyrus then
5040: LD_EXP 5
5044: NOT
5045: IFFALSE 5097
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
5047: LD_ADDR_EXP 5
5051: PUSH
5052: LD_STRING Cyrus
5054: PPUSH
5055: LD_INT 1
5057: PPUSH
5058: LD_EXP 44
5062: PPUSH
5063: CALL 44245 0 3
5067: ST_TO_ADDR
// if Cyrus then
5068: LD_EXP 5
5072: IFFALSE 5097
// tmp := Insert ( tmp , 1 , Cyrus ) ;
5074: LD_ADDR_VAR 0 6
5078: PUSH
5079: LD_VAR 0 6
5083: PPUSH
5084: LD_INT 1
5086: PPUSH
5087: LD_EXP 5
5091: PPUSH
5092: CALL_OW 2
5096: ST_TO_ADDR
// end ; if not Lisa then
5097: LD_EXP 6
5101: NOT
5102: IFFALSE 5154
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
5104: LD_ADDR_EXP 6
5108: PUSH
5109: LD_STRING Lisa
5111: PPUSH
5112: LD_INT 1
5114: PPUSH
5115: LD_EXP 44
5119: PPUSH
5120: CALL 44245 0 3
5124: ST_TO_ADDR
// if Lisa then
5125: LD_EXP 6
5129: IFFALSE 5154
// tmp := Insert ( tmp , 1 , Lisa ) ;
5131: LD_ADDR_VAR 0 6
5135: PUSH
5136: LD_VAR 0 6
5140: PPUSH
5141: LD_INT 1
5143: PPUSH
5144: LD_EXP 6
5148: PPUSH
5149: CALL_OW 2
5153: ST_TO_ADDR
// end ; if not Frank then
5154: LD_EXP 7
5158: NOT
5159: IFFALSE 5211
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
5161: LD_ADDR_EXP 7
5165: PUSH
5166: LD_STRING Frank
5168: PPUSH
5169: LD_INT 1
5171: PPUSH
5172: LD_EXP 44
5176: PPUSH
5177: CALL 44245 0 3
5181: ST_TO_ADDR
// if Frank then
5182: LD_EXP 7
5186: IFFALSE 5211
// tmp := Insert ( tmp , 1 , Frank ) ;
5188: LD_ADDR_VAR 0 6
5192: PUSH
5193: LD_VAR 0 6
5197: PPUSH
5198: LD_INT 1
5200: PPUSH
5201: LD_EXP 7
5205: PPUSH
5206: CALL_OW 2
5210: ST_TO_ADDR
// end ; if not Kikuchi then
5211: LD_EXP 9
5215: NOT
5216: IFFALSE 5268
// begin Kikuchi = PrepareUnit ( Kikuchi , true , mission_prefix_prev ) ;
5218: LD_ADDR_EXP 9
5222: PUSH
5223: LD_STRING Kikuchi
5225: PPUSH
5226: LD_INT 1
5228: PPUSH
5229: LD_EXP 44
5233: PPUSH
5234: CALL 44245 0 3
5238: ST_TO_ADDR
// if Kikuchi then
5239: LD_EXP 9
5243: IFFALSE 5268
// tmp := Insert ( tmp , 1 , Kikuchi ) ;
5245: LD_ADDR_VAR 0 6
5249: PUSH
5250: LD_VAR 0 6
5254: PPUSH
5255: LD_INT 1
5257: PPUSH
5258: LD_EXP 9
5262: PPUSH
5263: CALL_OW 2
5267: ST_TO_ADDR
// end ; if not Gladstone then
5268: LD_EXP 8
5272: NOT
5273: IFFALSE 5325
// begin Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
5275: LD_ADDR_EXP 8
5279: PUSH
5280: LD_STRING Gladstone
5282: PPUSH
5283: LD_INT 1
5285: PPUSH
5286: LD_EXP 44
5290: PPUSH
5291: CALL 44245 0 3
5295: ST_TO_ADDR
// if Gladstone then
5296: LD_EXP 8
5300: IFFALSE 5325
// tmp := Insert ( tmp , 1 , Gladstone ) ;
5302: LD_ADDR_VAR 0 6
5306: PUSH
5307: LD_VAR 0 6
5311: PPUSH
5312: LD_INT 1
5314: PPUSH
5315: LD_EXP 8
5319: PPUSH
5320: CALL_OW 2
5324: ST_TO_ADDR
// end ; if not Khatam then
5325: LD_EXP 10
5329: NOT
5330: IFFALSE 5382
// begin Khatam = PrepareUnit ( Khatam , true , mission_prefix_prev ) ;
5332: LD_ADDR_EXP 10
5336: PUSH
5337: LD_STRING Khatam
5339: PPUSH
5340: LD_INT 1
5342: PPUSH
5343: LD_EXP 44
5347: PPUSH
5348: CALL 44245 0 3
5352: ST_TO_ADDR
// if Khatam then
5353: LD_EXP 10
5357: IFFALSE 5382
// tmp := Insert ( tmp , 1 , Khatam ) ;
5359: LD_ADDR_VAR 0 6
5363: PUSH
5364: LD_VAR 0 6
5368: PPUSH
5369: LD_INT 1
5371: PPUSH
5372: LD_EXP 10
5376: PPUSH
5377: CALL_OW 2
5381: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5382: LD_ADDR_VAR 0 5
5386: PUSH
5387: LD_STRING 07c_others
5389: PPUSH
5390: CALL_OW 31
5394: ST_TO_ADDR
// macmilan_squad := others ;
5395: LD_ADDR_EXP 42
5399: PUSH
5400: LD_VAR 0 5
5404: ST_TO_ADDR
// if others then
5405: LD_VAR 0 5
5409: IFFALSE 5497
// for i in others do
5411: LD_ADDR_VAR 0 2
5415: PUSH
5416: LD_VAR 0 5
5420: PUSH
5421: FOR_IN
5422: IFFALSE 5495
// if GetClass ( i ) = 3 then
5424: LD_VAR 0 2
5428: PPUSH
5429: CALL_OW 257
5433: PUSH
5434: LD_INT 3
5436: EQUAL
5437: IFFALSE 5464
// tmp := Insert ( tmp , 1 , i ) else
5439: LD_ADDR_VAR 0 6
5443: PUSH
5444: LD_VAR 0 6
5448: PPUSH
5449: LD_INT 1
5451: PPUSH
5452: LD_VAR 0 2
5456: PPUSH
5457: CALL_OW 2
5461: ST_TO_ADDR
5462: GO 5493
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5464: LD_ADDR_VAR 0 6
5468: PUSH
5469: LD_VAR 0 6
5473: PPUSH
5474: LD_VAR 0 6
5478: PUSH
5479: LD_INT 1
5481: PLUS
5482: PPUSH
5483: LD_VAR 0 2
5487: PPUSH
5488: CALL_OW 2
5492: ST_TO_ADDR
5493: GO 5421
5495: POP
5496: POP
// if FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) then
5497: LD_INT 4
5499: PPUSH
5500: LD_INT 21
5502: PUSH
5503: LD_INT 3
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: PPUSH
5510: CALL_OW 70
5514: IFFALSE 5555
// for i in FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) do
5516: LD_ADDR_VAR 0 2
5520: PUSH
5521: LD_INT 4
5523: PPUSH
5524: LD_INT 21
5526: PUSH
5527: LD_INT 3
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PPUSH
5534: CALL_OW 70
5538: PUSH
5539: FOR_IN
5540: IFFALSE 5553
// RemoveUnit ( i ) ;
5542: LD_VAR 0 2
5546: PPUSH
5547: CALL_OW 64
5551: GO 5539
5553: POP
5554: POP
// wait ( 0 0$1 ) ;
5555: LD_INT 35
5557: PPUSH
5558: CALL_OW 67
// for i in tmp do
5562: LD_ADDR_VAR 0 2
5566: PUSH
5567: LD_VAR 0 6
5571: PUSH
5572: FOR_IN
5573: IFFALSE 5743
// begin SetDir ( i , 3 ) ;
5575: LD_VAR 0 2
5579: PPUSH
5580: LD_INT 3
5582: PPUSH
5583: CALL_OW 233
// if tmp_vehs then
5587: LD_VAR 0 7
5591: IFFALSE 5669
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5593: LD_VAR 0 7
5597: PUSH
5598: LD_INT 1
5600: ARRAY
5601: PPUSH
5602: LD_INT 3
5604: PPUSH
5605: CALL_OW 233
// PlaceUnitXY ( tmp_vehs [ 1 ] , 78 , 5 , false ) ;
5609: LD_VAR 0 7
5613: PUSH
5614: LD_INT 1
5616: ARRAY
5617: PPUSH
5618: LD_INT 78
5620: PPUSH
5621: LD_INT 5
5623: PPUSH
5624: LD_INT 0
5626: PPUSH
5627: CALL_OW 48
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5631: LD_VAR 0 2
5635: PPUSH
5636: LD_VAR 0 7
5640: PUSH
5641: LD_INT 1
5643: ARRAY
5644: PPUSH
5645: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5649: LD_ADDR_VAR 0 7
5653: PUSH
5654: LD_VAR 0 7
5658: PPUSH
5659: LD_INT 1
5661: PPUSH
5662: CALL_OW 3
5666: ST_TO_ADDR
// end else
5667: GO 5684
// PlaceUnitArea ( i , GammaSupport , false ) ;
5669: LD_VAR 0 2
5673: PPUSH
5674: LD_INT 4
5676: PPUSH
5677: LD_INT 0
5679: PPUSH
5680: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5684: LD_VAR 0 2
5688: PPUSH
5689: LD_INT 77
5691: PPUSH
5692: LD_INT 16
5694: PPUSH
5695: CALL_OW 111
// AddComMoveXY ( i , 65 , 24 ) ;
5699: LD_VAR 0 2
5703: PPUSH
5704: LD_INT 65
5706: PPUSH
5707: LD_INT 24
5709: PPUSH
5710: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5714: LD_INT 35
5716: PPUSH
5717: CALL_OW 67
// until not FilterUnitsInArea ( GammaSupport , [ f_side , 1 ] ) ;
5721: LD_INT 4
5723: PPUSH
5724: LD_INT 22
5726: PUSH
5727: LD_INT 1
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: PPUSH
5734: CALL_OW 70
5738: NOT
5739: IFFALSE 5714
// end ;
5741: GO 5572
5743: POP
5744: POP
// PlaceUnitArea ( JMM , GammaSupport , false ) ;
5745: LD_EXP 1
5749: PPUSH
5750: LD_INT 4
5752: PPUSH
5753: LD_INT 0
5755: PPUSH
5756: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5760: LD_EXP 1
5764: PPUSH
5765: LD_INT 77
5767: PPUSH
5768: LD_INT 16
5770: PPUSH
5771: CALL_OW 111
// end ;
5775: LD_VAR 0 1
5779: RET
// export function PrepareSikorsky ; begin
5780: LD_INT 0
5782: PPUSH
// uc_side = 4 ;
5783: LD_ADDR_OWVAR 20
5787: PUSH
5788: LD_INT 4
5790: ST_TO_ADDR
// uc_nation = 1 ;
5791: LD_ADDR_OWVAR 21
5795: PUSH
5796: LD_INT 1
5798: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ,  ) ;
5799: LD_ADDR_EXP 16
5803: PUSH
5804: LD_STRING Sikorski
5806: PPUSH
5807: LD_INT 0
5809: PPUSH
5810: LD_STRING 
5812: PPUSH
5813: CALL 44245 0 3
5817: ST_TO_ADDR
// vc_engine = 1 ;
5818: LD_ADDR_OWVAR 39
5822: PUSH
5823: LD_INT 1
5825: ST_TO_ADDR
// vc_control = 1 ;
5826: LD_ADDR_OWVAR 38
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5834: LD_ADDR_OWVAR 40
5838: PUSH
5839: LD_INT 5
5841: PUSH
5842: LD_INT 3
5844: PUSH
5845: LD_INT 4
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: LIST
5852: PUSH
5853: LD_OWVAR 67
5857: ARRAY
5858: ST_TO_ADDR
// vc_chassis = 4 ;
5859: LD_ADDR_OWVAR 37
5863: PUSH
5864: LD_INT 4
5866: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5867: LD_ADDR_EXP 17
5871: PUSH
5872: CALL_OW 45
5876: ST_TO_ADDR
// SetDir ( SikorskyTank , 3 ) ;
5877: LD_EXP 17
5881: PPUSH
5882: LD_INT 3
5884: PPUSH
5885: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
5889: LD_INT 35
5891: PPUSH
5892: CALL_OW 67
// PlaceUnitXY ( SikorskyTank , 18 , 5 , false ) ;
5896: LD_EXP 17
5900: PPUSH
5901: LD_INT 18
5903: PPUSH
5904: LD_INT 5
5906: PPUSH
5907: LD_INT 0
5909: PPUSH
5910: CALL_OW 48
// until IsPlaced ( SikorskyTank ) ;
5914: LD_EXP 17
5918: PPUSH
5919: CALL_OW 305
5923: IFFALSE 5889
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5925: LD_EXP 16
5929: PPUSH
5930: LD_EXP 17
5934: PPUSH
5935: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5939: LD_EXP 17
5943: PPUSH
5944: LD_INT 5
5946: PPUSH
5947: CALL_OW 113
// end ;
5951: LD_VAR 0 1
5955: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5956: LD_INT 0
5958: PPUSH
5959: PPUSH
5960: PPUSH
5961: PPUSH
// InitHc ;
5962: CALL_OW 19
// for i = 1 to [ 5 , 4 , 4 ] [ Difficulty ] do
5966: LD_ADDR_VAR 0 2
5970: PUSH
5971: DOUBLE
5972: LD_INT 1
5974: DEC
5975: ST_TO_ADDR
5976: LD_INT 5
5978: PUSH
5979: LD_INT 4
5981: PUSH
5982: LD_INT 4
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: LIST
5989: PUSH
5990: LD_OWVAR 67
5994: ARRAY
5995: PUSH
5996: FOR_TO
5997: IFFALSE 6113
// begin uc_side = 4 ;
5999: LD_ADDR_OWVAR 20
6003: PUSH
6004: LD_INT 4
6006: ST_TO_ADDR
// uc_nation = 1 ;
6007: LD_ADDR_OWVAR 21
6011: PUSH
6012: LD_INT 1
6014: ST_TO_ADDR
// hc_name =  ;
6015: LD_ADDR_OWVAR 26
6019: PUSH
6020: LD_STRING 
6022: ST_TO_ADDR
// hc_gallery =  ;
6023: LD_ADDR_OWVAR 33
6027: PUSH
6028: LD_STRING 
6030: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
6031: LD_INT 0
6033: PPUSH
6034: LD_INT 1
6036: PPUSH
6037: LD_INT 5
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: CALL_OW 12
6047: PPUSH
6048: CALL_OW 380
// un = CreateHuman ;
6052: LD_ADDR_VAR 0 3
6056: PUSH
6057: CALL_OW 44
6061: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6062: LD_VAR 0 3
6066: PPUSH
6067: LD_INT 3
6069: PPUSH
6070: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6074: LD_VAR 0 3
6078: PPUSH
6079: LD_INT 9
6081: PPUSH
6082: LD_INT 0
6084: PPUSH
6085: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6089: LD_VAR 0 3
6093: PPUSH
6094: LD_INT 53
6096: PPUSH
6097: LD_INT 23
6099: PPUSH
6100: CALL_OW 111
// wait ( 0 0$1 ) ;
6104: LD_INT 35
6106: PPUSH
6107: CALL_OW 67
// end ;
6111: GO 5996
6113: POP
6114: POP
// for i = 1 to 2 do
6115: LD_ADDR_VAR 0 2
6119: PUSH
6120: DOUBLE
6121: LD_INT 1
6123: DEC
6124: ST_TO_ADDR
6125: LD_INT 2
6127: PUSH
6128: FOR_TO
6129: IFFALSE 6245
// begin uc_side = 4 ;
6131: LD_ADDR_OWVAR 20
6135: PUSH
6136: LD_INT 4
6138: ST_TO_ADDR
// uc_nation = 1 ;
6139: LD_ADDR_OWVAR 21
6143: PUSH
6144: LD_INT 1
6146: ST_TO_ADDR
// hc_name =  ;
6147: LD_ADDR_OWVAR 26
6151: PUSH
6152: LD_STRING 
6154: ST_TO_ADDR
// hc_gallery =  ;
6155: LD_ADDR_OWVAR 33
6159: PUSH
6160: LD_STRING 
6162: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
6163: LD_INT 0
6165: PPUSH
6166: LD_INT 4
6168: PPUSH
6169: LD_INT 5
6171: PPUSH
6172: LD_INT 8
6174: PPUSH
6175: CALL_OW 12
6179: PPUSH
6180: CALL_OW 380
// un = CreateHuman ;
6184: LD_ADDR_VAR 0 3
6188: PUSH
6189: CALL_OW 44
6193: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6194: LD_VAR 0 3
6198: PPUSH
6199: LD_INT 3
6201: PPUSH
6202: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6206: LD_VAR 0 3
6210: PPUSH
6211: LD_INT 9
6213: PPUSH
6214: LD_INT 0
6216: PPUSH
6217: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6221: LD_VAR 0 3
6225: PPUSH
6226: LD_INT 53
6228: PPUSH
6229: LD_INT 23
6231: PPUSH
6232: CALL_OW 111
// wait ( 0 0$1 ) ;
6236: LD_INT 35
6238: PPUSH
6239: CALL_OW 67
// end ;
6243: GO 6128
6245: POP
6246: POP
// for i = 1 to [ 5 , 5 , 4 ] [ Difficulty ] do
6247: LD_ADDR_VAR 0 2
6251: PUSH
6252: DOUBLE
6253: LD_INT 1
6255: DEC
6256: ST_TO_ADDR
6257: LD_INT 5
6259: PUSH
6260: LD_INT 5
6262: PUSH
6263: LD_INT 4
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: LIST
6270: PUSH
6271: LD_OWVAR 67
6275: ARRAY
6276: PUSH
6277: FOR_TO
6278: IFFALSE 6512
// begin uc_side = 4 ;
6280: LD_ADDR_OWVAR 20
6284: PUSH
6285: LD_INT 4
6287: ST_TO_ADDR
// uc_nation = 1 ;
6288: LD_ADDR_OWVAR 21
6292: PUSH
6293: LD_INT 1
6295: ST_TO_ADDR
// vc_engine = 1 ;
6296: LD_ADDR_OWVAR 39
6300: PUSH
6301: LD_INT 1
6303: ST_TO_ADDR
// vc_control = 1 ;
6304: LD_ADDR_OWVAR 38
6308: PUSH
6309: LD_INT 1
6311: ST_TO_ADDR
// vc_weapon = [ 7 , 4 , 5 , 6 ] [ i mod 4 + 1 ] ;
6312: LD_ADDR_OWVAR 40
6316: PUSH
6317: LD_INT 7
6319: PUSH
6320: LD_INT 4
6322: PUSH
6323: LD_INT 5
6325: PUSH
6326: LD_INT 6
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: PUSH
6335: LD_VAR 0 2
6339: PUSH
6340: LD_INT 4
6342: MOD
6343: PUSH
6344: LD_INT 1
6346: PLUS
6347: ARRAY
6348: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6349: LD_ADDR_OWVAR 37
6353: PUSH
6354: LD_INT 3
6356: PUSH
6357: LD_INT 3
6359: PUSH
6360: LD_INT 4
6362: PUSH
6363: LD_INT 4
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: PUSH
6372: LD_VAR 0 2
6376: PUSH
6377: LD_INT 4
6379: MOD
6380: PUSH
6381: LD_INT 1
6383: PLUS
6384: ARRAY
6385: ST_TO_ADDR
// veh = CreateVehicle ;
6386: LD_ADDR_VAR 0 4
6390: PUSH
6391: CALL_OW 45
6395: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6396: LD_VAR 0 4
6400: PPUSH
6401: LD_INT 3
6403: PPUSH
6404: CALL_OW 233
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6408: LD_VAR 0 4
6412: PPUSH
6413: LD_INT 9
6415: PPUSH
6416: LD_INT 0
6418: PPUSH
6419: CALL_OW 49
// InitHc ;
6423: CALL_OW 19
// hc_name =  ;
6427: LD_ADDR_OWVAR 26
6431: PUSH
6432: LD_STRING 
6434: ST_TO_ADDR
// hc_gallery =  ;
6435: LD_ADDR_OWVAR 33
6439: PUSH
6440: LD_STRING 
6442: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6443: LD_INT 0
6445: PPUSH
6446: LD_INT 3
6448: PPUSH
6449: LD_INT 5
6451: PPUSH
6452: LD_INT 8
6454: PPUSH
6455: CALL_OW 12
6459: PPUSH
6460: CALL_OW 380
// un = CreateHuman ;
6464: LD_ADDR_VAR 0 3
6468: PUSH
6469: CALL_OW 44
6473: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6474: LD_VAR 0 3
6478: PPUSH
6479: LD_VAR 0 4
6483: PPUSH
6484: CALL_OW 52
// ComMoveXY ( un , 53 , 23 ) ;
6488: LD_VAR 0 3
6492: PPUSH
6493: LD_INT 53
6495: PPUSH
6496: LD_INT 23
6498: PPUSH
6499: CALL_OW 111
// wait ( 0 0$5 ) ;
6503: LD_INT 175
6505: PPUSH
6506: CALL_OW 67
// end ;
6510: GO 6277
6512: POP
6513: POP
// end ; end_of_file
6514: LD_VAR 0 1
6518: RET
// export function PrepareRussianCommander ; begin
6519: LD_INT 0
6521: PPUSH
// uc_side = 3 ;
6522: LD_ADDR_OWVAR 20
6526: PUSH
6527: LD_INT 3
6529: ST_TO_ADDR
// uc_nation = 3 ;
6530: LD_ADDR_OWVAR 21
6534: PUSH
6535: LD_INT 3
6537: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6538: LD_ADDR_EXP 24
6542: PUSH
6543: LD_STRING Borodin
6545: PPUSH
6546: CALL_OW 25
6550: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6551: LD_EXP 24
6555: PPUSH
6556: LD_INT 25
6558: PPUSH
6559: LD_INT 0
6561: PPUSH
6562: CALL_OW 49
// end ;
6566: LD_VAR 0 1
6570: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6571: LD_INT 0
6573: PPUSH
6574: PPUSH
6575: PPUSH
6576: PPUSH
// for i = 1 to 10 do
6577: LD_ADDR_VAR 0 2
6581: PUSH
6582: DOUBLE
6583: LD_INT 1
6585: DEC
6586: ST_TO_ADDR
6587: LD_INT 10
6589: PUSH
6590: FOR_TO
6591: IFFALSE 6665
// begin uc_side = 6 ;
6593: LD_ADDR_OWVAR 20
6597: PUSH
6598: LD_INT 6
6600: ST_TO_ADDR
// uc_nation = 3 ;
6601: LD_ADDR_OWVAR 21
6605: PUSH
6606: LD_INT 3
6608: ST_TO_ADDR
// hc_gallery =  ;
6609: LD_ADDR_OWVAR 33
6613: PUSH
6614: LD_STRING 
6616: ST_TO_ADDR
// hc_name =  ;
6617: LD_ADDR_OWVAR 26
6621: PUSH
6622: LD_STRING 
6624: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6625: LD_INT 0
6627: PPUSH
6628: LD_INT 1
6630: PPUSH
6631: LD_INT 3
6633: PPUSH
6634: CALL_OW 380
// un = CreateHuman ;
6638: LD_ADDR_VAR 0 3
6642: PUSH
6643: CALL_OW 44
6647: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6648: LD_VAR 0 3
6652: PPUSH
6653: LD_INT 1
6655: PPUSH
6656: LD_INT 0
6658: PPUSH
6659: CALL_OW 49
// end ;
6663: GO 6590
6665: POP
6666: POP
// for i = 1 to 3 do
6667: LD_ADDR_VAR 0 2
6671: PUSH
6672: DOUBLE
6673: LD_INT 1
6675: DEC
6676: ST_TO_ADDR
6677: LD_INT 3
6679: PUSH
6680: FOR_TO
6681: IFFALSE 6830
// begin uc_side = 6 ;
6683: LD_ADDR_OWVAR 20
6687: PUSH
6688: LD_INT 6
6690: ST_TO_ADDR
// uc_nation = 3 ;
6691: LD_ADDR_OWVAR 21
6695: PUSH
6696: LD_INT 3
6698: ST_TO_ADDR
// vc_engine = 1 ;
6699: LD_ADDR_OWVAR 39
6703: PUSH
6704: LD_INT 1
6706: ST_TO_ADDR
// vc_control = 1 ;
6707: LD_ADDR_OWVAR 38
6711: PUSH
6712: LD_INT 1
6714: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6715: LD_ADDR_OWVAR 40
6719: PUSH
6720: LD_INT 43
6722: PUSH
6723: LD_INT 44
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: LD_INT 1
6732: PPUSH
6733: LD_INT 2
6735: PPUSH
6736: CALL_OW 12
6740: ARRAY
6741: ST_TO_ADDR
// vc_chassis = 22 ;
6742: LD_ADDR_OWVAR 37
6746: PUSH
6747: LD_INT 22
6749: ST_TO_ADDR
// veh = CreateVehicle ;
6750: LD_ADDR_VAR 0 4
6754: PUSH
6755: CALL_OW 45
6759: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6760: LD_VAR 0 4
6764: PPUSH
6765: LD_INT 2
6767: PPUSH
6768: LD_INT 0
6770: PPUSH
6771: CALL_OW 49
// hc_gallery =  ;
6775: LD_ADDR_OWVAR 33
6779: PUSH
6780: LD_STRING 
6782: ST_TO_ADDR
// hc_name =  ;
6783: LD_ADDR_OWVAR 26
6787: PUSH
6788: LD_STRING 
6790: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6791: LD_INT 0
6793: PPUSH
6794: LD_INT 3
6796: PPUSH
6797: LD_INT 4
6799: PPUSH
6800: CALL_OW 380
// un = CreateHuman ;
6804: LD_ADDR_VAR 0 3
6808: PUSH
6809: CALL_OW 44
6813: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6814: LD_VAR 0 3
6818: PPUSH
6819: LD_VAR 0 4
6823: PPUSH
6824: CALL_OW 52
// end ;
6828: GO 6680
6830: POP
6831: POP
// end ;
6832: LD_VAR 0 1
6836: RET
// export function PrepareRussians ; var i , un ; begin
6837: LD_INT 0
6839: PPUSH
6840: PPUSH
6841: PPUSH
// for i = 1 to 8 do
6842: LD_ADDR_VAR 0 2
6846: PUSH
6847: DOUBLE
6848: LD_INT 1
6850: DEC
6851: ST_TO_ADDR
6852: LD_INT 8
6854: PUSH
6855: FOR_TO
6856: IFFALSE 6942
// begin uc_side = 3 ;
6858: LD_ADDR_OWVAR 20
6862: PUSH
6863: LD_INT 3
6865: ST_TO_ADDR
// uc_nation = 3 ;
6866: LD_ADDR_OWVAR 21
6870: PUSH
6871: LD_INT 3
6873: ST_TO_ADDR
// hc_gallery =  ;
6874: LD_ADDR_OWVAR 33
6878: PUSH
6879: LD_STRING 
6881: ST_TO_ADDR
// hc_name =  ;
6882: LD_ADDR_OWVAR 26
6886: PUSH
6887: LD_STRING 
6889: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6890: LD_INT 0
6892: PPUSH
6893: LD_INT 1
6895: PPUSH
6896: LD_EXP 25
6900: PPUSH
6901: LD_EXP 26
6905: PPUSH
6906: CALL_OW 12
6910: PPUSH
6911: CALL_OW 380
// un = CreateHuman ;
6915: LD_ADDR_VAR 0 3
6919: PUSH
6920: CALL_OW 44
6924: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6925: LD_VAR 0 3
6929: PPUSH
6930: LD_INT 3
6932: PPUSH
6933: LD_INT 0
6935: PPUSH
6936: CALL_OW 49
// end ;
6940: GO 6855
6942: POP
6943: POP
// for i = 1 to 4 do
6944: LD_ADDR_VAR 0 2
6948: PUSH
6949: DOUBLE
6950: LD_INT 1
6952: DEC
6953: ST_TO_ADDR
6954: LD_INT 4
6956: PUSH
6957: FOR_TO
6958: IFFALSE 7044
// begin uc_side = 3 ;
6960: LD_ADDR_OWVAR 20
6964: PUSH
6965: LD_INT 3
6967: ST_TO_ADDR
// uc_nation = 3 ;
6968: LD_ADDR_OWVAR 21
6972: PUSH
6973: LD_INT 3
6975: ST_TO_ADDR
// hc_gallery =  ;
6976: LD_ADDR_OWVAR 33
6980: PUSH
6981: LD_STRING 
6983: ST_TO_ADDR
// hc_name =  ;
6984: LD_ADDR_OWVAR 26
6988: PUSH
6989: LD_STRING 
6991: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6992: LD_INT 0
6994: PPUSH
6995: LD_INT 2
6997: PPUSH
6998: LD_EXP 25
7002: PPUSH
7003: LD_EXP 26
7007: PPUSH
7008: CALL_OW 12
7012: PPUSH
7013: CALL_OW 380
// un = CreateHuman ;
7017: LD_ADDR_VAR 0 3
7021: PUSH
7022: CALL_OW 44
7026: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7027: LD_VAR 0 3
7031: PPUSH
7032: LD_INT 3
7034: PPUSH
7035: LD_INT 0
7037: PPUSH
7038: CALL_OW 49
// end ;
7042: GO 6957
7044: POP
7045: POP
// for i = 1 to 3 do
7046: LD_ADDR_VAR 0 2
7050: PUSH
7051: DOUBLE
7052: LD_INT 1
7054: DEC
7055: ST_TO_ADDR
7056: LD_INT 3
7058: PUSH
7059: FOR_TO
7060: IFFALSE 7146
// begin uc_side = 3 ;
7062: LD_ADDR_OWVAR 20
7066: PUSH
7067: LD_INT 3
7069: ST_TO_ADDR
// uc_nation = 3 ;
7070: LD_ADDR_OWVAR 21
7074: PUSH
7075: LD_INT 3
7077: ST_TO_ADDR
// hc_gallery =  ;
7078: LD_ADDR_OWVAR 33
7082: PUSH
7083: LD_STRING 
7085: ST_TO_ADDR
// hc_name =  ;
7086: LD_ADDR_OWVAR 26
7090: PUSH
7091: LD_STRING 
7093: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7094: LD_INT 0
7096: PPUSH
7097: LD_INT 3
7099: PPUSH
7100: LD_EXP 25
7104: PPUSH
7105: LD_EXP 26
7109: PPUSH
7110: CALL_OW 12
7114: PPUSH
7115: CALL_OW 380
// un = CreateHuman ;
7119: LD_ADDR_VAR 0 3
7123: PUSH
7124: CALL_OW 44
7128: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7129: LD_VAR 0 3
7133: PPUSH
7134: LD_INT 3
7136: PPUSH
7137: LD_INT 0
7139: PPUSH
7140: CALL_OW 49
// end ;
7144: GO 7059
7146: POP
7147: POP
// for i = 1 to 2 do
7148: LD_ADDR_VAR 0 2
7152: PUSH
7153: DOUBLE
7154: LD_INT 1
7156: DEC
7157: ST_TO_ADDR
7158: LD_INT 2
7160: PUSH
7161: FOR_TO
7162: IFFALSE 7248
// begin uc_side = 3 ;
7164: LD_ADDR_OWVAR 20
7168: PUSH
7169: LD_INT 3
7171: ST_TO_ADDR
// uc_nation = 3 ;
7172: LD_ADDR_OWVAR 21
7176: PUSH
7177: LD_INT 3
7179: ST_TO_ADDR
// hc_gallery =  ;
7180: LD_ADDR_OWVAR 33
7184: PUSH
7185: LD_STRING 
7187: ST_TO_ADDR
// hc_name =  ;
7188: LD_ADDR_OWVAR 26
7192: PUSH
7193: LD_STRING 
7195: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7196: LD_INT 0
7198: PPUSH
7199: LD_INT 4
7201: PPUSH
7202: LD_EXP 25
7206: PPUSH
7207: LD_EXP 26
7211: PPUSH
7212: CALL_OW 12
7216: PPUSH
7217: CALL_OW 380
// un = CreateHuman ;
7221: LD_ADDR_VAR 0 3
7225: PUSH
7226: CALL_OW 44
7230: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7231: LD_VAR 0 3
7235: PPUSH
7236: LD_INT 3
7238: PPUSH
7239: LD_INT 0
7241: PPUSH
7242: CALL_OW 49
// end ;
7246: GO 7161
7248: POP
7249: POP
// end ; end_of_file
7250: LD_VAR 0 1
7254: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7255: LD_INT 0
7257: PPUSH
7258: PPUSH
7259: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7260: LD_ADDR_VAR 0 1
7264: PUSH
7265: LD_VAR 0 1
7269: PUSH
7270: LD_EXP 1
7274: PUSH
7275: LD_EXP 2
7279: PUSH
7280: LD_EXP 3
7284: PUSH
7285: LD_EXP 4
7289: PUSH
7290: LD_EXP 5
7294: PUSH
7295: LD_EXP 6
7299: PUSH
7300: LD_EXP 7
7304: PUSH
7305: LD_EXP 8
7309: PUSH
7310: LD_EXP 9
7314: PUSH
7315: LD_EXP 10
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: DIFF
7332: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7333: LD_ADDR_VAR 0 6
7337: PUSH
7338: LD_VAR 0 1
7342: PUSH
7343: LD_INT 1
7345: PPUSH
7346: LD_VAR 0 1
7350: PPUSH
7351: CALL_OW 12
7355: ARRAY
7356: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7357: LD_VAR 0 6
7361: PPUSH
7362: CALL_OW 258
7366: PUSH
7367: LD_INT 1
7369: EQUAL
7370: IFFALSE 7388
// Say ( speaker , dialogMID ) else
7372: LD_VAR 0 6
7376: PPUSH
7377: LD_VAR 0 2
7381: PPUSH
7382: CALL_OW 88
7386: GO 7402
// Say ( speaker , dialogFID ) ;
7388: LD_VAR 0 6
7392: PPUSH
7393: LD_VAR 0 3
7397: PPUSH
7398: CALL_OW 88
// result := speaker ;
7402: LD_ADDR_VAR 0 4
7406: PUSH
7407: LD_VAR 0 6
7411: ST_TO_ADDR
// end ;
7412: LD_VAR 0 4
7416: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7417: LD_INT 0
7419: PPUSH
7420: PPUSH
7421: PPUSH
// uc_side := GetSide ( b ) ;
7422: LD_ADDR_OWVAR 20
7426: PUSH
7427: LD_VAR 0 2
7431: PPUSH
7432: CALL_OW 255
7436: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7437: LD_ADDR_OWVAR 21
7441: PUSH
7442: LD_VAR 0 2
7446: PPUSH
7447: CALL_OW 248
7451: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7452: LD_INT 0
7454: PPUSH
7455: LD_INT 1
7457: PPUSH
7458: LD_VAR 0 1
7462: PPUSH
7463: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7467: LD_ADDR_VAR 0 5
7471: PUSH
7472: LD_VAR 0 2
7476: PPUSH
7477: CALL_OW 254
7481: PUSH
7482: LD_INT 3
7484: MINUS
7485: ST_TO_ADDR
// if dir < 0 then
7486: LD_VAR 0 5
7490: PUSH
7491: LD_INT 0
7493: LESS
7494: IFFALSE 7510
// dir := 6 + dir ;
7496: LD_ADDR_VAR 0 5
7500: PUSH
7501: LD_INT 6
7503: PUSH
7504: LD_VAR 0 5
7508: PLUS
7509: ST_TO_ADDR
// un := CreateHuman ;
7510: LD_ADDR_VAR 0 4
7514: PUSH
7515: CALL_OW 44
7519: ST_TO_ADDR
// SetDir ( un , dir ) ;
7520: LD_VAR 0 4
7524: PPUSH
7525: LD_VAR 0 5
7529: PPUSH
7530: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7534: LD_VAR 0 4
7538: PPUSH
7539: LD_VAR 0 2
7543: PPUSH
7544: CALL_OW 52
// end ;
7548: LD_VAR 0 3
7552: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7553: LD_INT 0
7555: PPUSH
7556: PPUSH
7557: PPUSH
7558: PPUSH
// for i = 1 to count do
7559: LD_ADDR_VAR 0 8
7563: PUSH
7564: DOUBLE
7565: LD_INT 1
7567: DEC
7568: ST_TO_ADDR
7569: LD_VAR 0 6
7573: PUSH
7574: FOR_TO
7575: IFFALSE 7656
// begin uc_side = side ;
7577: LD_ADDR_OWVAR 20
7581: PUSH
7582: LD_VAR 0 1
7586: ST_TO_ADDR
// uc_nation = nation ;
7587: LD_ADDR_OWVAR 21
7591: PUSH
7592: LD_VAR 0 2
7596: ST_TO_ADDR
// hc_gallery =  ;
7597: LD_ADDR_OWVAR 33
7601: PUSH
7602: LD_STRING 
7604: ST_TO_ADDR
// hc_name =  ;
7605: LD_ADDR_OWVAR 26
7609: PUSH
7610: LD_STRING 
7612: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7613: LD_INT 0
7615: PPUSH
7616: LD_VAR 0 5
7620: PPUSH
7621: LD_VAR 0 4
7625: PPUSH
7626: CALL_OW 380
// un = CreateHuman ;
7630: LD_ADDR_VAR 0 10
7634: PUSH
7635: CALL_OW 44
7639: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7640: LD_VAR 0 10
7644: PPUSH
7645: LD_VAR 0 3
7649: PPUSH
7650: CALL_OW 52
// end ;
7654: GO 7574
7656: POP
7657: POP
// end ;
7658: LD_VAR 0 7
7662: RET
// export function PrepareDifficulty ; begin
7663: LD_INT 0
7665: PPUSH
// if Difficulty = 1 then
7666: LD_OWVAR 67
7670: PUSH
7671: LD_INT 1
7673: EQUAL
7674: IFFALSE 7692
// begin RuSolMinLevel = 3 ;
7676: LD_ADDR_EXP 25
7680: PUSH
7681: LD_INT 3
7683: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7684: LD_ADDR_EXP 26
7688: PUSH
7689: LD_INT 5
7691: ST_TO_ADDR
// end ; if Difficulty = 2 then
7692: LD_OWVAR 67
7696: PUSH
7697: LD_INT 2
7699: EQUAL
7700: IFFALSE 7770
// begin RuSolMinLevel = 5 ;
7702: LD_ADDR_EXP 25
7706: PUSH
7707: LD_INT 5
7709: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7710: LD_ADDR_EXP 26
7714: PUSH
7715: LD_INT 6
7717: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7718: LD_INT 51
7720: PPUSH
7721: LD_INT 3
7723: PPUSH
7724: LD_INT 1
7726: PPUSH
7727: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7731: LD_INT 57
7733: PPUSH
7734: LD_INT 3
7736: PPUSH
7737: LD_INT 1
7739: PPUSH
7740: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7744: LD_INT 57
7746: PPUSH
7747: LD_INT 6
7749: PPUSH
7750: LD_INT 2
7752: PPUSH
7753: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7757: LD_INT 51
7759: PPUSH
7760: LD_INT 6
7762: PPUSH
7763: LD_INT 2
7765: PPUSH
7766: CALL_OW 322
// end ; if Difficulty = 3 then
7770: LD_OWVAR 67
7774: PUSH
7775: LD_INT 3
7777: EQUAL
7778: IFFALSE 7861
// begin RuSolMinLevel = 5 ;
7780: LD_ADDR_EXP 25
7784: PUSH
7785: LD_INT 5
7787: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7788: LD_ADDR_EXP 26
7792: PUSH
7793: LD_INT 6
7795: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7796: LD_INT 57
7798: PPUSH
7799: LD_INT 3
7801: PPUSH
7802: LD_INT 1
7804: PPUSH
7805: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7809: LD_INT 51
7811: PPUSH
7812: LD_INT 3
7814: PPUSH
7815: LD_INT 1
7817: PPUSH
7818: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7822: LD_INT 52
7824: PPUSH
7825: LD_INT 3
7827: PPUSH
7828: LD_INT 1
7830: PPUSH
7831: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7835: LD_INT 57
7837: PPUSH
7838: LD_INT 6
7840: PPUSH
7841: LD_INT 2
7843: PPUSH
7844: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7848: LD_INT 52
7850: PPUSH
7851: LD_INT 6
7853: PPUSH
7854: LD_INT 2
7856: PPUSH
7857: CALL_OW 322
// end ; end ;
7861: LD_VAR 0 1
7865: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7866: LD_INT 0
7868: PPUSH
7869: PPUSH
7870: PPUSH
7871: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7872: LD_ADDR_VAR 0 3
7876: PUSH
7877: LD_INT 22
7879: PUSH
7880: LD_INT 3
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: LD_INT 25
7889: PUSH
7890: LD_INT 2
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PPUSH
7901: CALL_OW 69
7905: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7906: LD_ADDR_VAR 0 4
7910: PUSH
7911: LD_INT 4
7913: PUSH
7914: LD_INT 75
7916: PUSH
7917: LD_INT 79
7919: PUSH
7920: LD_INT 2
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: PUSH
7929: LD_INT 4
7931: PUSH
7932: LD_INT 113
7934: PUSH
7935: LD_INT 94
7937: PUSH
7938: LD_INT 4
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: PUSH
7947: LD_INT 29
7949: PUSH
7950: LD_INT 106
7952: PUSH
7953: LD_INT 97
7955: PUSH
7956: LD_INT 3
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: PUSH
7965: LD_INT 26
7967: PUSH
7968: LD_INT 93
7970: PUSH
7971: LD_INT 97
7973: PUSH
7974: LD_INT 5
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: PUSH
7983: LD_INT 2
7985: PUSH
7986: LD_INT 100
7988: PUSH
7989: LD_INT 89
7991: PUSH
7992: LD_INT 3
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: PUSH
8001: LD_INT 17
8003: PUSH
8004: LD_INT 96
8006: PUSH
8007: LD_INT 89
8009: PUSH
8010: LD_INT 1
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: PUSH
8019: LD_INT 32
8021: PUSH
8022: LD_INT 78
8024: PUSH
8025: LD_INT 94
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: PUSH
8037: LD_INT 32
8039: PUSH
8040: LD_INT 95
8042: PUSH
8043: LD_INT 82
8045: PUSH
8046: LD_INT 3
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 32
8057: PUSH
8058: LD_INT 104
8060: PUSH
8061: LD_INT 85
8063: PUSH
8064: LD_INT 2
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 32
8075: PUSH
8076: LD_INT 81
8078: PUSH
8079: LD_INT 78
8081: PUSH
8082: LD_INT 2
8084: PUSH
8085: EMPTY
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: PUSH
8091: LD_INT 33
8093: PUSH
8094: LD_INT 109
8096: PUSH
8097: LD_INT 90
8099: PUSH
8100: LD_INT 3
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: PUSH
8109: LD_INT 33
8111: PUSH
8112: LD_INT 88
8114: PUSH
8115: LD_INT 79
8117: PUSH
8118: LD_INT 3
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: PUSH
8127: LD_INT 33
8129: PUSH
8130: LD_INT 76
8132: PUSH
8133: LD_INT 87
8135: PUSH
8136: LD_INT 1
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 26
8147: PUSH
8148: LD_INT 96
8150: PUSH
8151: LD_INT 97
8153: PUSH
8154: LD_INT 5
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 26
8165: PUSH
8166: LD_INT 85
8168: PUSH
8169: LD_INT 84
8171: PUSH
8172: LD_INT 2
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: PUSH
8181: LD_INT 6
8183: PUSH
8184: LD_INT 88
8186: PUSH
8187: LD_INT 95
8189: PUSH
8190: LD_INT 0
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: PUSH
8199: LD_INT 19
8201: PUSH
8202: LD_INT 103
8204: PUSH
8205: LD_INT 89
8207: PUSH
8208: LD_INT 4
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: PUSH
8217: LD_INT 16
8219: PUSH
8220: LD_INT 97
8222: PUSH
8223: LD_INT 86
8225: PUSH
8226: LD_INT 2
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: PUSH
8235: LD_INT 24
8237: PUSH
8238: LD_INT 100
8240: PUSH
8241: LD_INT 85
8243: PUSH
8244: LD_INT 3
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: ST_TO_ADDR
// for i := 1 to buildingsTab do
8274: LD_ADDR_VAR 0 2
8278: PUSH
8279: DOUBLE
8280: LD_INT 1
8282: DEC
8283: ST_TO_ADDR
8284: LD_VAR 0 4
8288: PUSH
8289: FOR_TO
8290: IFFALSE 8363
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8292: LD_VAR 0 3
8296: PPUSH
8297: LD_VAR 0 4
8301: PUSH
8302: LD_VAR 0 2
8306: ARRAY
8307: PUSH
8308: LD_INT 1
8310: ARRAY
8311: PPUSH
8312: LD_VAR 0 4
8316: PUSH
8317: LD_VAR 0 2
8321: ARRAY
8322: PUSH
8323: LD_INT 2
8325: ARRAY
8326: PPUSH
8327: LD_VAR 0 4
8331: PUSH
8332: LD_VAR 0 2
8336: ARRAY
8337: PUSH
8338: LD_INT 3
8340: ARRAY
8341: PPUSH
8342: LD_VAR 0 4
8346: PUSH
8347: LD_VAR 0 2
8351: ARRAY
8352: PUSH
8353: LD_INT 4
8355: ARRAY
8356: PPUSH
8357: CALL_OW 205
8361: GO 8289
8363: POP
8364: POP
// end ;
8365: LD_VAR 0 1
8369: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8370: LD_INT 0
8372: PPUSH
8373: PPUSH
// for i in charactersList do
8374: LD_ADDR_VAR 0 4
8378: PUSH
8379: LD_VAR 0 1
8383: PUSH
8384: FOR_IN
8385: IFFALSE 8403
// SaveCharacters ( i , ident ) ;
8387: LD_VAR 0 4
8391: PPUSH
8392: LD_VAR 0 2
8396: PPUSH
8397: CALL_OW 38
8401: GO 8384
8403: POP
8404: POP
// end ;
8405: LD_VAR 0 3
8409: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8410: LD_INT 0
8412: PPUSH
8413: PPUSH
8414: PPUSH
8415: PPUSH
8416: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8417: LD_ADDR_VAR 0 8
8421: PUSH
8422: LD_INT 48
8424: PUSH
8425: LD_INT 49
8427: PUSH
8428: LD_INT 50
8430: PUSH
8431: LD_INT 20
8433: PUSH
8434: LD_INT 1
8436: PUSH
8437: LD_INT 51
8439: PUSH
8440: LD_INT 52
8442: PUSH
8443: LD_INT 69
8445: PUSH
8446: LD_INT 39
8448: PUSH
8449: LD_INT 34
8451: PUSH
8452: LD_INT 40
8454: PUSH
8455: LD_INT 53
8457: PUSH
8458: LD_INT 71
8460: PUSH
8461: LD_INT 57
8463: PUSH
8464: LD_INT 58
8466: PUSH
8467: LD_INT 44
8469: PUSH
8470: LD_INT 32
8472: PUSH
8473: LD_INT 27
8475: PUSH
8476: LD_INT 23
8478: PUSH
8479: LD_INT 33
8481: PUSH
8482: LD_INT 59
8484: PUSH
8485: LD_INT 54
8487: PUSH
8488: LD_INT 55
8490: PUSH
8491: LD_INT 56
8493: PUSH
8494: LD_INT 63
8496: PUSH
8497: LD_INT 64
8499: PUSH
8500: LD_INT 65
8502: PUSH
8503: LD_INT 30
8505: PUSH
8506: LD_INT 31
8508: PUSH
8509: LD_INT 21
8511: PUSH
8512: LD_INT 22
8514: PUSH
8515: LD_INT 25
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8552: LD_ADDR_VAR 0 5
8556: PUSH
8557: DOUBLE
8558: LD_INT 1
8560: DEC
8561: ST_TO_ADDR
8562: LD_VAR 0 8
8566: PUSH
8567: FOR_TO
8568: IFFALSE 8644
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8570: LD_VAR 0 8
8574: PUSH
8575: LD_VAR 0 5
8579: ARRAY
8580: PPUSH
8581: LD_VAR 0 1
8585: PPUSH
8586: CALL_OW 321
8590: PUSH
8591: LD_INT 1
8593: EQUAL
8594: PUSH
8595: LD_VAR 0 8
8599: PUSH
8600: LD_VAR 0 5
8604: ARRAY
8605: PPUSH
8606: LD_VAR 0 3
8610: PPUSH
8611: CALL_OW 482
8615: PUSH
8616: LD_INT 1
8618: EQUAL
8619: AND
8620: IFFALSE 8642
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8622: LD_VAR 0 2
8626: PPUSH
8627: LD_VAR 0 8
8631: PUSH
8632: LD_VAR 0 5
8636: ARRAY
8637: PPUSH
8638: CALL_OW 184
8642: GO 8567
8644: POP
8645: POP
// end ;
8646: LD_VAR 0 4
8650: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8651: LD_INT 0
8653: PPUSH
8654: PPUSH
8655: PPUSH
8656: PPUSH
8657: PPUSH
8658: PPUSH
8659: PPUSH
8660: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8661: LD_ADDR_VAR 0 6
8665: PUSH
8666: LD_VAR 0 2
8670: PPUSH
8671: LD_INT 22
8673: PUSH
8674: LD_VAR 0 1
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 56
8685: PUSH
8686: EMPTY
8687: LIST
8688: PUSH
8689: LD_INT 24
8691: PUSH
8692: LD_INT 700
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: PUSH
8699: LD_INT 3
8701: PUSH
8702: LD_INT 60
8704: PUSH
8705: EMPTY
8706: LIST
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: PUSH
8712: LD_INT 2
8714: PUSH
8715: LD_INT 25
8717: PUSH
8718: LD_INT 1
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: PUSH
8725: LD_INT 25
8727: PUSH
8728: LD_INT 5
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: PUSH
8735: LD_INT 25
8737: PUSH
8738: LD_INT 8
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: LD_INT 25
8747: PUSH
8748: LD_INT 9
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: PPUSH
8769: CALL_OW 70
8773: PUSH
8774: LD_EXP 24
8778: PUSH
8779: EMPTY
8780: LIST
8781: DIFF
8782: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8783: LD_ADDR_VAR 0 7
8787: PUSH
8788: LD_VAR 0 2
8792: PPUSH
8793: LD_INT 22
8795: PUSH
8796: LD_VAR 0 1
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PUSH
8805: LD_INT 30
8807: PUSH
8808: LD_INT 32
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: PUSH
8815: LD_INT 58
8817: PUSH
8818: EMPTY
8819: LIST
8820: PUSH
8821: LD_INT 24
8823: PUSH
8824: LD_INT 251
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: PPUSH
8837: CALL_OW 70
8841: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8842: LD_ADDR_VAR 0 9
8846: PUSH
8847: LD_VAR 0 2
8851: PPUSH
8852: LD_INT 22
8854: PUSH
8855: LD_VAR 0 1
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: LD_INT 2
8866: PUSH
8867: LD_INT 30
8869: PUSH
8870: LD_INT 4
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 30
8879: PUSH
8880: LD_INT 5
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: LIST
8891: PUSH
8892: LD_INT 24
8894: PUSH
8895: LD_INT 251
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: LIST
8906: PPUSH
8907: CALL_OW 70
8911: ST_TO_ADDR
// if barrackList > 0 then
8912: LD_VAR 0 9
8916: PUSH
8917: LD_INT 0
8919: GREATER
8920: IFFALSE 9068
// begin if turretList = 0 then
8922: LD_VAR 0 7
8926: PUSH
8927: LD_INT 0
8929: EQUAL
8930: IFFALSE 8972
// begin if soldiers_list > 0 then
8932: LD_VAR 0 6
8936: PUSH
8937: LD_INT 0
8939: GREATER
8940: IFFALSE 8970
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8942: LD_VAR 0 6
8946: PPUSH
8947: LD_VAR 0 9
8951: PUSH
8952: LD_INT 1
8954: PPUSH
8955: LD_VAR 0 9
8959: PPUSH
8960: CALL_OW 12
8964: ARRAY
8965: PPUSH
8966: CALL_OW 120
// end else
8970: GO 9068
// begin for i in barrackList do
8972: LD_ADDR_VAR 0 4
8976: PUSH
8977: LD_VAR 0 9
8981: PUSH
8982: FOR_IN
8983: IFFALSE 9066
// begin insideUnits = UnitsInside ( i ) ;
8985: LD_ADDR_VAR 0 10
8989: PUSH
8990: LD_VAR 0 4
8994: PPUSH
8995: CALL_OW 313
8999: ST_TO_ADDR
// if insideUnits > 0 then
9000: LD_VAR 0 10
9004: PUSH
9005: LD_INT 0
9007: GREATER
9008: IFFALSE 9032
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9010: LD_VAR 0 10
9014: PUSH
9015: LD_INT 1
9017: ARRAY
9018: PPUSH
9019: LD_VAR 0 7
9023: PUSH
9024: LD_INT 1
9026: ARRAY
9027: PPUSH
9028: CALL_OW 120
// if soldiers_list > 0 then
9032: LD_VAR 0 6
9036: PUSH
9037: LD_INT 0
9039: GREATER
9040: IFFALSE 9064
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9042: LD_VAR 0 6
9046: PUSH
9047: LD_INT 1
9049: ARRAY
9050: PPUSH
9051: LD_VAR 0 7
9055: PUSH
9056: LD_INT 1
9058: ARRAY
9059: PPUSH
9060: CALL_OW 120
// end ;
9064: GO 8982
9066: POP
9067: POP
// end ; end ; end ;
9068: LD_VAR 0 3
9072: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
9073: LD_INT 0
9075: PPUSH
9076: PPUSH
9077: PPUSH
9078: PPUSH
9079: PPUSH
9080: PPUSH
// for i = 1 to vehCount do
9081: LD_ADDR_VAR 0 8
9085: PUSH
9086: DOUBLE
9087: LD_INT 1
9089: DEC
9090: ST_TO_ADDR
9091: LD_VAR 0 6
9095: PUSH
9096: FOR_TO
9097: IFFALSE 9304
// begin uc_side = side ;
9099: LD_ADDR_OWVAR 20
9103: PUSH
9104: LD_VAR 0 1
9108: ST_TO_ADDR
// uc_nation = nation ;
9109: LD_ADDR_OWVAR 21
9113: PUSH
9114: LD_VAR 0 3
9118: ST_TO_ADDR
// vc_Chassis = 22 ;
9119: LD_ADDR_OWVAR 37
9123: PUSH
9124: LD_INT 22
9126: ST_TO_ADDR
// vc_engine = 1 ;
9127: LD_ADDR_OWVAR 39
9131: PUSH
9132: LD_INT 1
9134: ST_TO_ADDR
// vc_control = 1 ;
9135: LD_ADDR_OWVAR 38
9139: PUSH
9140: LD_INT 1
9142: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
9143: LD_ADDR_OWVAR 40
9147: PUSH
9148: LD_INT 43
9150: PUSH
9151: LD_INT 44
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: LD_INT 1
9160: PPUSH
9161: LD_INT 2
9163: PPUSH
9164: CALL_OW 12
9168: ARRAY
9169: ST_TO_ADDR
// veh = CreateVehicle ;
9170: LD_ADDR_VAR 0 12
9174: PUSH
9175: CALL_OW 45
9179: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9180: LD_VAR 0 12
9184: PPUSH
9185: LD_VAR 0 2
9189: PPUSH
9190: LD_INT 0
9192: PPUSH
9193: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9197: LD_ADDR_EXP 32
9201: PUSH
9202: LD_EXP 32
9206: PUSH
9207: LD_VAR 0 12
9211: ADD
9212: ST_TO_ADDR
// hc_class = 3 ;
9213: LD_ADDR_OWVAR 28
9217: PUSH
9218: LD_INT 3
9220: ST_TO_ADDR
// hc_name =  ;
9221: LD_ADDR_OWVAR 26
9225: PUSH
9226: LD_STRING 
9228: ST_TO_ADDR
// hc_gallery =  ;
9229: LD_ADDR_OWVAR 33
9233: PUSH
9234: LD_STRING 
9236: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9237: LD_INT 0
9239: PPUSH
9240: LD_INT 3
9242: PPUSH
9243: LD_EXP 25
9247: PPUSH
9248: LD_EXP 26
9252: PPUSH
9253: CALL_OW 12
9257: PPUSH
9258: CALL_OW 380
// un = CreateHuman ;
9262: LD_ADDR_VAR 0 10
9266: PUSH
9267: CALL_OW 44
9271: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9272: LD_VAR 0 10
9276: PPUSH
9277: LD_VAR 0 12
9281: PPUSH
9282: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9286: LD_ADDR_EXP 32
9290: PUSH
9291: LD_EXP 32
9295: PUSH
9296: LD_VAR 0 10
9300: ADD
9301: ST_TO_ADDR
// end ;
9302: GO 9096
9304: POP
9305: POP
// end ;
9306: LD_VAR 0 7
9310: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9311: LD_INT 0
9313: PPUSH
9314: PPUSH
9315: PPUSH
9316: PPUSH
9317: PPUSH
9318: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9319: LD_VAR 0 2
9323: PPUSH
9324: LD_INT 22
9326: PUSH
9327: LD_VAR 0 1
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: EMPTY
9337: LIST
9338: PPUSH
9339: CALL_OW 70
9343: PUSH
9344: LD_INT 0
9346: EQUAL
9347: PUSH
9348: LD_EXP 32
9352: AND
9353: IFFALSE 9640
// begin for i in defenders_list do
9355: LD_ADDR_VAR 0 4
9359: PUSH
9360: LD_EXP 32
9364: PUSH
9365: FOR_IN
9366: IFFALSE 9638
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9368: LD_VAR 0 4
9372: PPUSH
9373: LD_INT 63
9375: PPUSH
9376: LD_INT 75
9378: PPUSH
9379: CALL_OW 297
9383: PUSH
9384: LD_INT 8
9386: GREATER
9387: PUSH
9388: LD_VAR 0 4
9392: PPUSH
9393: CALL_OW 314
9397: NOT
9398: AND
9399: IFFALSE 9418
// ComMoveXY ( i , 63 , 75 ) else
9401: LD_VAR 0 4
9405: PPUSH
9406: LD_INT 63
9408: PPUSH
9409: LD_INT 75
9411: PPUSH
9412: CALL_OW 111
9416: GO 9636
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9418: LD_VAR 0 4
9422: PPUSH
9423: CALL_OW 257
9427: PUSH
9428: LD_INT 3
9430: EQUAL
9431: PUSH
9432: LD_VAR 0 4
9436: PPUSH
9437: CALL_OW 310
9441: NOT
9442: AND
9443: PUSH
9444: LD_VAR 0 4
9448: PPUSH
9449: CALL_OW 314
9453: NOT
9454: AND
9455: IFFALSE 9508
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9457: LD_VAR 0 4
9461: PPUSH
9462: LD_EXP 32
9466: PPUSH
9467: LD_INT 58
9469: PUSH
9470: EMPTY
9471: LIST
9472: PUSH
9473: LD_INT 24
9475: PUSH
9476: LD_INT 1000
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PPUSH
9487: CALL_OW 72
9491: PPUSH
9492: LD_VAR 0 4
9496: PPUSH
9497: CALL_OW 74
9501: PPUSH
9502: CALL_OW 120
9506: GO 9636
// if GetFuel ( i ) < 100 then
9508: LD_VAR 0 4
9512: PPUSH
9513: CALL_OW 261
9517: PUSH
9518: LD_INT 100
9520: LESS
9521: IFFALSE 9537
// SetFuel ( defenders_list , 100 ) else
9523: LD_EXP 32
9527: PPUSH
9528: LD_INT 100
9530: PPUSH
9531: CALL_OW 240
9535: GO 9636
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9537: LD_VAR 0 4
9541: PPUSH
9542: CALL_OW 263
9546: PUSH
9547: LD_INT 1
9549: EQUAL
9550: PUSH
9551: LD_VAR 0 4
9555: PPUSH
9556: CALL_OW 256
9560: PUSH
9561: LD_INT 990
9563: LESS
9564: AND
9565: IFFALSE 9636
// begin veh := i ;
9567: LD_ADDR_VAR 0 7
9571: PUSH
9572: LD_VAR 0 4
9576: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9577: LD_ADDR_VAR 0 8
9581: PUSH
9582: LD_VAR 0 4
9586: PPUSH
9587: CALL_OW 311
9591: ST_TO_ADDR
// if veh then
9592: LD_VAR 0 7
9596: IFFALSE 9636
// begin ComMoveXY ( i , 63 , 75 ) ;
9598: LD_VAR 0 4
9602: PPUSH
9603: LD_INT 63
9605: PPUSH
9606: LD_INT 75
9608: PPUSH
9609: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9613: LD_VAR 0 7
9617: PPUSH
9618: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9622: LD_VAR 0 8
9626: PPUSH
9627: LD_VAR 0 7
9631: PPUSH
9632: CALL_OW 189
// end ; end ; end ;
9636: GO 9365
9638: POP
9639: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9640: LD_ADDR_VAR 0 6
9644: PUSH
9645: LD_VAR 0 2
9649: PPUSH
9650: LD_INT 22
9652: PUSH
9653: LD_VAR 0 1
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PUSH
9662: EMPTY
9663: LIST
9664: PPUSH
9665: CALL_OW 70
9669: ST_TO_ADDR
// if tmp and defenders_list then
9670: LD_VAR 0 6
9674: PUSH
9675: LD_EXP 32
9679: AND
9680: IFFALSE 9849
// for i in defenders_list do
9682: LD_ADDR_VAR 0 4
9686: PUSH
9687: LD_EXP 32
9691: PUSH
9692: FOR_IN
9693: IFFALSE 9847
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9695: LD_VAR 0 4
9699: PPUSH
9700: CALL_OW 257
9704: PUSH
9705: LD_INT 3
9707: EQUAL
9708: PUSH
9709: LD_VAR 0 4
9713: PPUSH
9714: CALL_OW 310
9718: NOT
9719: AND
9720: IFFALSE 9759
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9722: LD_VAR 0 4
9726: PPUSH
9727: LD_EXP 32
9731: PPUSH
9732: LD_INT 58
9734: PUSH
9735: EMPTY
9736: LIST
9737: PPUSH
9738: CALL_OW 72
9742: PPUSH
9743: LD_VAR 0 4
9747: PPUSH
9748: CALL_OW 74
9752: PPUSH
9753: CALL_OW 120
9757: GO 9845
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9759: LD_VAR 0 4
9763: PPUSH
9764: CALL_OW 314
9768: NOT
9769: PUSH
9770: LD_VAR 0 4
9774: PPUSH
9775: LD_VAR 0 2
9779: PPUSH
9780: CALL_OW 308
9784: AND
9785: IFFALSE 9813
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9787: LD_VAR 0 4
9791: PPUSH
9792: LD_VAR 0 6
9796: PPUSH
9797: LD_VAR 0 4
9801: PPUSH
9802: CALL_OW 74
9806: PPUSH
9807: CALL_OW 115
9811: GO 9845
// if not IsInArea ( i , defenseArea ) then
9813: LD_VAR 0 4
9817: PPUSH
9818: LD_VAR 0 2
9822: PPUSH
9823: CALL_OW 308
9827: NOT
9828: IFFALSE 9845
// ComMoveXY ( i , 63 , 75 ) ;
9830: LD_VAR 0 4
9834: PPUSH
9835: LD_INT 63
9837: PPUSH
9838: LD_INT 75
9840: PPUSH
9841: CALL_OW 111
// end ;
9845: GO 9692
9847: POP
9848: POP
// end ;
9849: LD_VAR 0 3
9853: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9854: LD_INT 0
9856: PPUSH
9857: PPUSH
9858: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9859: LD_INT 22
9861: PUSH
9862: LD_VAR 0 1
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: LD_INT 21
9873: PUSH
9874: LD_INT 2
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PPUSH
9885: CALL_OW 69
9889: PUSH
9890: LD_VAR 0 3
9894: LESSEQUAL
9895: IFFALSE 10003
// begin for i = 1 to vehCount do
9897: LD_ADDR_VAR 0 9
9901: PUSH
9902: DOUBLE
9903: LD_INT 1
9905: DEC
9906: ST_TO_ADDR
9907: LD_VAR 0 3
9911: PUSH
9912: FOR_TO
9913: IFFALSE 10001
// begin weapon = weaponTab [ i ] ;
9915: LD_ADDR_VAR 0 10
9919: PUSH
9920: LD_VAR 0 4
9924: PUSH
9925: LD_VAR 0 9
9929: ARRAY
9930: ST_TO_ADDR
// if weapon = 46 then
9931: LD_VAR 0 10
9935: PUSH
9936: LD_INT 46
9938: EQUAL
9939: IFFALSE 9970
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9941: LD_VAR 0 2
9945: PPUSH
9946: LD_INT 24
9948: PPUSH
9949: LD_VAR 0 5
9953: PPUSH
9954: LD_VAR 0 6
9958: PPUSH
9959: LD_VAR 0 10
9963: PPUSH
9964: CALL_OW 185
// end else
9968: GO 9999
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9970: LD_VAR 0 2
9974: PPUSH
9975: LD_VAR 0 7
9979: PPUSH
9980: LD_VAR 0 5
9984: PPUSH
9985: LD_VAR 0 6
9989: PPUSH
9990: LD_VAR 0 10
9994: PPUSH
9995: CALL_OW 185
// end ; end ;
9999: GO 9912
10001: POP
10002: POP
// end ; end ;
10003: LD_VAR 0 8
10007: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
10008: LD_INT 0
10010: PPUSH
10011: PPUSH
10012: PPUSH
10013: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
10014: LD_ADDR_VAR 0 8
10018: PUSH
10019: LD_INT 22
10021: PUSH
10022: LD_VAR 0 1
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: LD_INT 21
10033: PUSH
10034: LD_INT 2
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PUSH
10041: LD_INT 3
10043: PUSH
10044: LD_INT 24
10046: PUSH
10047: LD_INT 650
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: PPUSH
10063: CALL_OW 69
10067: ST_TO_ADDR
// if damageVehicles > 0 then
10068: LD_VAR 0 8
10072: PUSH
10073: LD_INT 0
10075: GREATER
10076: IFFALSE 10097
// ComMoveXY ( damageVehicles , repX , repY ) ;
10078: LD_VAR 0 8
10082: PPUSH
10083: LD_VAR 0 3
10087: PPUSH
10088: LD_VAR 0 4
10092: PPUSH
10093: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10097: LD_VAR 0 8
10101: PPUSH
10102: LD_INT 95
10104: PUSH
10105: LD_VAR 0 2
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 3
10116: PUSH
10117: LD_INT 58
10119: PUSH
10120: EMPTY
10121: LIST
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PPUSH
10131: CALL_OW 72
10135: PUSH
10136: LD_INT 0
10138: GREATER
10139: IFFALSE 10206
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
10141: LD_ADDR_VAR 0 6
10145: PUSH
10146: LD_VAR 0 8
10150: PPUSH
10151: LD_INT 95
10153: PUSH
10154: LD_VAR 0 2
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: LD_INT 3
10165: PUSH
10166: LD_INT 58
10168: PUSH
10169: EMPTY
10170: LIST
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PPUSH
10180: CALL_OW 72
10184: PUSH
10185: FOR_IN
10186: IFFALSE 10204
// ComExitVehicle ( UnitsInside ( i ) ) ;
10188: LD_VAR 0 6
10192: PPUSH
10193: CALL_OW 313
10197: PPUSH
10198: CALL_OW 121
10202: GO 10185
10204: POP
10205: POP
// end ;
10206: LD_VAR 0 5
10210: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10211: LD_INT 0
10213: PPUSH
10214: PPUSH
10215: PPUSH
10216: PPUSH
10217: PPUSH
10218: PPUSH
10219: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10220: LD_ADDR_VAR 0 8
10224: PUSH
10225: LD_INT 22
10227: PUSH
10228: LD_VAR 0 1
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: PUSH
10237: LD_INT 21
10239: PUSH
10240: LD_INT 2
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 24
10249: PUSH
10250: LD_INT 250
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 3
10259: PUSH
10260: LD_INT 58
10262: PUSH
10263: EMPTY
10264: LIST
10265: PUSH
10266: LD_INT 2
10268: PUSH
10269: LD_INT 34
10271: PUSH
10272: LD_INT 43
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PUSH
10279: LD_INT 34
10281: PUSH
10282: LD_INT 44
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 34
10291: PUSH
10292: LD_INT 46
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: PPUSH
10316: CALL_OW 69
10320: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
10321: LD_INT 22
10323: PUSH
10324: LD_VAR 0 1
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: PUSH
10333: LD_INT 21
10335: PUSH
10336: LD_INT 2
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: LD_INT 24
10345: PUSH
10346: LD_INT 1000
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: LD_INT 3
10355: PUSH
10356: LD_INT 58
10358: PUSH
10359: EMPTY
10360: LIST
10361: PUSH
10362: LD_INT 2
10364: PUSH
10365: LD_INT 34
10367: PUSH
10368: LD_INT 43
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 34
10377: PUSH
10378: LD_INT 44
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: LD_INT 34
10387: PUSH
10388: LD_INT 46
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: LIST
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: PPUSH
10412: CALL_OW 69
10416: PUSH
10417: LD_INT 5
10419: PUSH
10420: LD_INT 6
10422: PUSH
10423: LD_INT 7
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: LIST
10430: PUSH
10431: LD_OWVAR 67
10435: ARRAY
10436: GREATEREQUAL
10437: IFFALSE 11002
// repeat wait ( 0 0$1 ) ;
10439: LD_INT 35
10441: PPUSH
10442: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10446: LD_ADDR_VAR 0 8
10450: PUSH
10451: LD_INT 22
10453: PUSH
10454: LD_VAR 0 1
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PUSH
10463: LD_INT 21
10465: PUSH
10466: LD_INT 2
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: PUSH
10473: LD_INT 24
10475: PUSH
10476: LD_INT 250
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PUSH
10483: LD_INT 2
10485: PUSH
10486: LD_INT 34
10488: PUSH
10489: LD_INT 43
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PUSH
10496: LD_INT 34
10498: PUSH
10499: LD_INT 44
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: LD_INT 34
10508: PUSH
10509: LD_INT 46
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 3
10524: PUSH
10525: LD_INT 58
10527: PUSH
10528: EMPTY
10529: LIST
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: PPUSH
10542: CALL_OW 69
10546: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10547: LD_INT 22
10549: PUSH
10550: LD_VAR 0 1
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: LD_INT 95
10561: PUSH
10562: LD_VAR 0 2
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PPUSH
10575: CALL_OW 69
10579: NOT
10580: PUSH
10581: LD_VAR 0 11
10585: PUSH
10586: LD_INT 0
10588: EQUAL
10589: AND
10590: IFFALSE 10645
// for i := 1 to wayX do
10592: LD_ADDR_VAR 0 6
10596: PUSH
10597: DOUBLE
10598: LD_INT 1
10600: DEC
10601: ST_TO_ADDR
10602: LD_VAR 0 3
10606: PUSH
10607: FOR_TO
10608: IFFALSE 10643
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10610: LD_VAR 0 8
10614: PPUSH
10615: LD_VAR 0 3
10619: PUSH
10620: LD_VAR 0 6
10624: ARRAY
10625: PPUSH
10626: LD_VAR 0 4
10630: PUSH
10631: LD_VAR 0 6
10635: ARRAY
10636: PPUSH
10637: CALL_OW 114
10641: GO 10607
10643: POP
10644: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10645: LD_INT 22
10647: PUSH
10648: LD_VAR 0 1
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PUSH
10657: LD_INT 95
10659: PUSH
10660: LD_VAR 0 2
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PPUSH
10673: CALL_OW 69
10677: IFFALSE 10901
// begin seeEnemy = 1 ;
10679: LD_ADDR_VAR 0 11
10683: PUSH
10684: LD_INT 1
10686: ST_TO_ADDR
// for j in vehiclesOK do
10687: LD_ADDR_VAR 0 7
10691: PUSH
10692: LD_VAR 0 8
10696: PUSH
10697: FOR_IN
10698: IFFALSE 10899
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10700: LD_ADDR_VAR 0 9
10704: PUSH
10705: LD_INT 81
10707: PUSH
10708: LD_VAR 0 1
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: LD_INT 101
10719: PUSH
10720: LD_INT 1
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PPUSH
10731: CALL_OW 69
10735: PPUSH
10736: LD_VAR 0 7
10740: PPUSH
10741: CALL_OW 74
10745: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10746: LD_ADDR_VAR 0 10
10750: PUSH
10751: LD_INT 81
10753: PUSH
10754: LD_VAR 0 1
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 101
10765: PUSH
10766: LD_INT 1
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 2
10775: PUSH
10776: LD_INT 59
10778: PUSH
10779: EMPTY
10780: LIST
10781: PUSH
10782: LD_INT 21
10784: PUSH
10785: LD_INT 1
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 21
10794: PUSH
10795: LD_INT 2
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: PUSH
10813: EMPTY
10814: LIST
10815: PPUSH
10816: CALL_OW 69
10820: PPUSH
10821: LD_VAR 0 7
10825: PPUSH
10826: CALL_OW 74
10830: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10831: LD_VAR 0 7
10835: PPUSH
10836: LD_VAR 0 9
10840: PPUSH
10841: CALL_OW 296
10845: PUSH
10846: LD_INT 8
10848: PLUS
10849: PUSH
10850: LD_VAR 0 7
10854: PPUSH
10855: LD_VAR 0 10
10859: PPUSH
10860: CALL_OW 296
10864: LESS
10865: IFFALSE 10883
// ComAttackUnit ( j , target1 ) else
10867: LD_VAR 0 7
10871: PPUSH
10872: LD_VAR 0 9
10876: PPUSH
10877: CALL_OW 115
10881: GO 10897
// ComAttackUnit ( j , target2 ) ;
10883: LD_VAR 0 7
10887: PPUSH
10888: LD_VAR 0 10
10892: PPUSH
10893: CALL_OW 115
// end ;
10897: GO 10697
10899: POP
10900: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10901: LD_INT 22
10903: PUSH
10904: LD_VAR 0 1
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 21
10915: PUSH
10916: LD_INT 2
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 24
10925: PUSH
10926: LD_INT 250
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 2
10935: PUSH
10936: LD_INT 34
10938: PUSH
10939: LD_INT 43
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PUSH
10946: LD_INT 34
10948: PUSH
10949: LD_INT 44
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: LD_INT 34
10958: PUSH
10959: LD_INT 46
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: PUSH
10972: LD_INT 3
10974: PUSH
10975: LD_INT 58
10977: PUSH
10978: EMPTY
10979: LIST
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: PPUSH
10992: CALL_OW 69
10996: PUSH
10997: LD_INT 0
10999: EQUAL
11000: IFFALSE 10439
// seeEnemy = 0 ;
11002: LD_ADDR_VAR 0 11
11006: PUSH
11007: LD_INT 0
11009: ST_TO_ADDR
// end ;
11010: LD_VAR 0 5
11014: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
11015: LD_INT 0
11017: PPUSH
11018: PPUSH
11019: PPUSH
11020: PPUSH
11021: PPUSH
11022: PPUSH
// repeat wait ( 0 0$1 ) ;
11023: LD_INT 35
11025: PPUSH
11026: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
11030: LD_ADDR_VAR 0 7
11034: PUSH
11035: LD_INT 22
11037: PUSH
11038: LD_VAR 0 1
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: LD_INT 21
11049: PUSH
11050: LD_INT 2
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 24
11059: PUSH
11060: LD_INT 651
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: LIST
11071: PPUSH
11072: CALL_OW 69
11076: ST_TO_ADDR
// for j in vehiclesOK do
11077: LD_ADDR_VAR 0 4
11081: PUSH
11082: LD_VAR 0 7
11086: PUSH
11087: FOR_IN
11088: IFFALSE 11289
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
11090: LD_ADDR_VAR 0 5
11094: PUSH
11095: LD_INT 81
11097: PUSH
11098: LD_VAR 0 1
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 101
11109: PUSH
11110: LD_INT 1
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PPUSH
11121: CALL_OW 69
11125: PPUSH
11126: LD_VAR 0 4
11130: PPUSH
11131: CALL_OW 74
11135: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
11136: LD_ADDR_VAR 0 6
11140: PUSH
11141: LD_INT 81
11143: PUSH
11144: LD_VAR 0 1
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PUSH
11153: LD_INT 101
11155: PUSH
11156: LD_INT 1
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: LD_INT 2
11165: PUSH
11166: LD_INT 59
11168: PUSH
11169: EMPTY
11170: LIST
11171: PUSH
11172: LD_INT 21
11174: PUSH
11175: LD_INT 1
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: LD_INT 21
11184: PUSH
11185: LD_INT 2
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: LIST
11202: PUSH
11203: EMPTY
11204: LIST
11205: PPUSH
11206: CALL_OW 69
11210: PPUSH
11211: LD_VAR 0 4
11215: PPUSH
11216: CALL_OW 74
11220: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11221: LD_VAR 0 4
11225: PPUSH
11226: LD_VAR 0 5
11230: PPUSH
11231: CALL_OW 296
11235: PUSH
11236: LD_INT 8
11238: PLUS
11239: PUSH
11240: LD_VAR 0 4
11244: PPUSH
11245: LD_VAR 0 6
11249: PPUSH
11250: CALL_OW 296
11254: LESS
11255: IFFALSE 11273
// ComAttackUnit ( j , target1 ) else
11257: LD_VAR 0 4
11261: PPUSH
11262: LD_VAR 0 5
11266: PPUSH
11267: CALL_OW 115
11271: GO 11287
// ComAttackUnit ( j , target2 ) ;
11273: LD_VAR 0 4
11277: PPUSH
11278: LD_VAR 0 6
11282: PPUSH
11283: CALL_OW 115
// end ;
11287: GO 11087
11289: POP
11290: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11291: LD_INT 22
11293: PUSH
11294: LD_VAR 0 1
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 21
11305: PUSH
11306: LD_INT 2
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: LD_INT 24
11315: PUSH
11316: LD_INT 250
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: LIST
11327: PPUSH
11328: CALL_OW 69
11332: PUSH
11333: LD_INT 0
11335: EQUAL
11336: IFFALSE 11023
// end ;
11338: LD_VAR 0 2
11342: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11343: LD_INT 0
11345: PPUSH
11346: PPUSH
11347: PPUSH
11348: PPUSH
11349: PPUSH
11350: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11351: LD_ADDR_VAR 0 8
11355: PUSH
11356: LD_VAR 0 2
11360: PPUSH
11361: CALL_OW 313
11365: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11366: LD_ADDR_VAR 0 9
11370: PUSH
11371: LD_VAR 0 3
11375: PPUSH
11376: LD_INT 22
11378: PUSH
11379: LD_VAR 0 1
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: LD_INT 25
11390: PUSH
11391: LD_INT 2
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: PUSH
11398: LD_INT 24
11400: PUSH
11401: LD_INT 750
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: PUSH
11408: LD_INT 3
11410: PUSH
11411: LD_INT 54
11413: PUSH
11414: EMPTY
11415: LIST
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: PPUSH
11427: CALL_OW 70
11431: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11432: LD_ADDR_VAR 0 6
11436: PUSH
11437: LD_VAR 0 3
11441: PPUSH
11442: LD_INT 22
11444: PUSH
11445: LD_VAR 0 1
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 21
11456: PUSH
11457: LD_INT 3
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: LD_INT 3
11466: PUSH
11467: LD_INT 24
11469: PUSH
11470: LD_INT 1000
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: LIST
11485: PUSH
11486: EMPTY
11487: LIST
11488: PPUSH
11489: CALL_OW 70
11493: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11494: LD_VAR 0 6
11498: NOT
11499: PUSH
11500: LD_INT 22
11502: PUSH
11503: LD_VAR 0 1
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PUSH
11512: LD_INT 25
11514: PUSH
11515: LD_INT 2
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: LD_INT 24
11524: PUSH
11525: LD_INT 250
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: PPUSH
11537: CALL_OW 69
11541: NOT
11542: AND
11543: IFFALSE 11547
// exit ;
11545: GO 11744
// if buildings_list > 0 and engineerOkInside then
11547: LD_VAR 0 6
11551: PUSH
11552: LD_INT 0
11554: GREATER
11555: PUSH
11556: LD_VAR 0 8
11560: AND
11561: IFFALSE 11587
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11563: LD_VAR 0 8
11567: PPUSH
11568: LD_INT 25
11570: PUSH
11571: LD_INT 2
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PPUSH
11578: CALL_OW 72
11582: PPUSH
11583: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11587: LD_VAR 0 6
11591: PUSH
11592: LD_INT 0
11594: GREATER
11595: PUSH
11596: LD_VAR 0 9
11600: PUSH
11601: LD_INT 0
11603: GREATER
11604: AND
11605: IFFALSE 11625
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11607: LD_VAR 0 9
11611: PPUSH
11612: LD_VAR 0 6
11616: PUSH
11617: LD_INT 1
11619: ARRAY
11620: PPUSH
11621: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11625: LD_VAR 0 6
11629: PUSH
11630: LD_INT 0
11632: EQUAL
11633: PUSH
11634: LD_VAR 0 4
11638: PUSH
11639: LD_INT 0
11641: EQUAL
11642: AND
11643: PUSH
11644: LD_VAR 0 9
11648: PUSH
11649: LD_INT 0
11651: GREATER
11652: AND
11653: IFFALSE 11669
// ComEnterUnit ( engineerOkOutside , building ) ;
11655: LD_VAR 0 9
11659: PPUSH
11660: LD_VAR 0 2
11664: PPUSH
11665: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11669: LD_VAR 0 9
11673: PUSH
11674: LD_INT 0
11676: GREATER
11677: PUSH
11678: LD_VAR 0 6
11682: PUSH
11683: LD_INT 0
11685: EQUAL
11686: AND
11687: PUSH
11688: LD_VAR 0 4
11692: PUSH
11693: LD_INT 0
11695: GREATER
11696: AND
11697: IFFALSE 11744
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11699: LD_VAR 0 9
11703: PPUSH
11704: LD_VAR 0 4
11708: PUSH
11709: LD_INT 1
11711: ARRAY
11712: PPUSH
11713: LD_VAR 0 4
11717: PUSH
11718: LD_INT 2
11720: ARRAY
11721: PPUSH
11722: LD_VAR 0 4
11726: PUSH
11727: LD_INT 3
11729: ARRAY
11730: PPUSH
11731: LD_VAR 0 4
11735: PUSH
11736: LD_INT 4
11738: ARRAY
11739: PPUSH
11740: CALL_OW 145
// end ;
11744: LD_VAR 0 5
11748: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11749: LD_INT 0
11751: PPUSH
11752: PPUSH
11753: PPUSH
11754: PPUSH
11755: PPUSH
11756: PPUSH
11757: PPUSH
11758: PPUSH
11759: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11760: LD_ADDR_VAR 0 6
11764: PUSH
11765: LD_INT 22
11767: PUSH
11768: LD_VAR 0 1
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 25
11779: PUSH
11780: LD_INT 4
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PUSH
11787: LD_INT 23
11789: PUSH
11790: LD_INT 2
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: LD_INT 24
11799: PUSH
11800: LD_INT 251
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: PPUSH
11813: CALL_OW 69
11817: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11818: LD_ADDR_VAR 0 7
11822: PUSH
11823: LD_VAR 0 3
11827: PPUSH
11828: LD_INT 22
11830: PUSH
11831: LD_VAR 0 1
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PUSH
11840: LD_INT 23
11842: PUSH
11843: LD_INT 2
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 25
11852: PUSH
11853: LD_INT 4
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: LD_INT 50
11862: PUSH
11863: EMPTY
11864: LIST
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: PPUSH
11872: CALL_OW 70
11876: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11877: LD_ADDR_VAR 0 10
11881: PUSH
11882: LD_VAR 0 3
11886: PPUSH
11887: LD_INT 22
11889: PUSH
11890: LD_VAR 0 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 21
11901: PUSH
11902: LD_INT 1
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 3
11911: PUSH
11912: LD_INT 25
11914: PUSH
11915: LD_INT 3
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 3
11928: PUSH
11929: LD_INT 24
11931: PUSH
11932: LD_INT 750
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: PPUSH
11949: CALL_OW 70
11953: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11954: LD_ADDR_VAR 0 11
11958: PUSH
11959: LD_VAR 0 2
11963: PPUSH
11964: LD_INT 22
11966: PUSH
11967: LD_VAR 0 1
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 21
11978: PUSH
11979: LD_INT 1
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PUSH
11986: LD_INT 3
11988: PUSH
11989: LD_INT 25
11991: PUSH
11992: LD_INT 3
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 3
12005: PUSH
12006: LD_INT 24
12008: PUSH
12009: LD_INT 1000
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: PPUSH
12026: CALL_OW 70
12030: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
12031: LD_VAR 0 10
12035: NOT
12036: PUSH
12037: LD_VAR 0 11
12041: NOT
12042: AND
12043: PUSH
12044: LD_VAR 0 6
12048: NOT
12049: AND
12050: IFFALSE 12054
// exit ;
12052: GO 12288
// if damageUnits > 0 and sci_list > 0 then
12054: LD_VAR 0 10
12058: PUSH
12059: LD_INT 0
12061: GREATER
12062: PUSH
12063: LD_VAR 0 6
12067: PUSH
12068: LD_INT 0
12070: GREATER
12071: AND
12072: IFFALSE 12088
// ComMoveToArea ( damageUnits , healArea ) ;
12074: LD_VAR 0 10
12078: PPUSH
12079: LD_VAR 0 2
12083: PPUSH
12084: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
12088: LD_VAR 0 11
12092: PUSH
12093: LD_INT 0
12095: GREATER
12096: PUSH
12097: LD_VAR 0 6
12101: PUSH
12102: LD_INT 0
12104: GREATER
12105: AND
12106: IFFALSE 12117
// ComExitBuilding ( sci_list ) ;
12108: LD_VAR 0 6
12112: PPUSH
12113: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
12117: LD_VAR 0 11
12121: PUSH
12122: LD_INT 0
12124: GREATER
12125: PUSH
12126: LD_VAR 0 7
12130: PUSH
12131: LD_INT 0
12133: GREATER
12134: AND
12135: IFFALSE 12155
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
12137: LD_VAR 0 7
12141: PPUSH
12142: LD_VAR 0 11
12146: PUSH
12147: LD_INT 1
12149: ARRAY
12150: PPUSH
12151: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12155: LD_VAR 0 10
12159: PUSH
12160: LD_INT 0
12162: EQUAL
12163: PUSH
12164: LD_VAR 0 11
12168: PUSH
12169: LD_INT 0
12171: EQUAL
12172: AND
12173: PUSH
12174: LD_VAR 0 7
12178: PUSH
12179: LD_INT 0
12181: GREATER
12182: AND
12183: IFFALSE 12288
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12185: LD_ADDR_VAR 0 12
12189: PUSH
12190: LD_INT 22
12192: PUSH
12193: LD_VAR 0 1
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 21
12204: PUSH
12205: LD_INT 3
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PUSH
12212: LD_INT 30
12214: PUSH
12215: LD_INT 8
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: PPUSH
12227: CALL_OW 69
12231: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12232: LD_ADDR_VAR 0 13
12236: PUSH
12237: LD_INT 1
12239: PPUSH
12240: LD_VAR 0 12
12244: PPUSH
12245: CALL_OW 12
12249: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12250: LD_VAR 0 7
12254: PPUSH
12255: LD_INT 3
12257: PUSH
12258: LD_INT 60
12260: PUSH
12261: EMPTY
12262: LIST
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PPUSH
12268: CALL_OW 72
12272: PPUSH
12273: LD_VAR 0 12
12277: PUSH
12278: LD_VAR 0 13
12282: ARRAY
12283: PPUSH
12284: CALL_OW 120
// end ; end ;
12288: LD_VAR 0 5
12292: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12293: LD_INT 0
12295: PPUSH
12296: PPUSH
12297: PPUSH
12298: PPUSH
12299: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12300: LD_ADDR_VAR 0 6
12304: PUSH
12305: LD_INT 22
12307: PUSH
12308: LD_VAR 0 1
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: LD_INT 2
12319: PUSH
12320: LD_INT 30
12322: PUSH
12323: LD_INT 31
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PUSH
12330: LD_INT 30
12332: PUSH
12333: LD_INT 32
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PUSH
12340: LD_INT 30
12342: PUSH
12343: LD_INT 33
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PUSH
12350: LD_INT 30
12352: PUSH
12353: LD_INT 4
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 30
12362: PUSH
12363: LD_INT 5
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PPUSH
12382: CALL_OW 69
12386: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12387: LD_ADDR_VAR 0 7
12391: PUSH
12392: LD_INT 22
12394: PUSH
12395: LD_VAR 0 2
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PUSH
12404: LD_INT 21
12406: PUSH
12407: LD_INT 3
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 58
12416: PUSH
12417: EMPTY
12418: LIST
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: PPUSH
12425: CALL_OW 69
12429: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12430: LD_VAR 0 6
12434: PUSH
12435: LD_INT 0
12437: GREATER
12438: PUSH
12439: LD_VAR 0 7
12443: PUSH
12444: LD_INT 0
12446: GREATER
12447: AND
12448: IFFALSE 12518
// begin for i in turretsList do
12450: LD_ADDR_VAR 0 4
12454: PUSH
12455: LD_VAR 0 6
12459: PUSH
12460: FOR_IN
12461: IFFALSE 12516
// begin for j in enemyBuildings do
12463: LD_ADDR_VAR 0 5
12467: PUSH
12468: LD_VAR 0 7
12472: PUSH
12473: FOR_IN
12474: IFFALSE 12512
// begin if GetDistUnits ( i , j ) < 20 then
12476: LD_VAR 0 4
12480: PPUSH
12481: LD_VAR 0 5
12485: PPUSH
12486: CALL_OW 296
12490: PUSH
12491: LD_INT 20
12493: LESS
12494: IFFALSE 12510
// begin ComAttackUnit ( i , j ) ;
12496: LD_VAR 0 4
12500: PPUSH
12501: LD_VAR 0 5
12505: PPUSH
12506: CALL_OW 115
// end ; end ;
12510: GO 12473
12512: POP
12513: POP
// end ;
12514: GO 12460
12516: POP
12517: POP
// end ; end ;
12518: LD_VAR 0 3
12522: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12523: LD_INT 0
12525: PPUSH
12526: PPUSH
12527: PPUSH
12528: PPUSH
12529: PPUSH
12530: PPUSH
12531: PPUSH
12532: PPUSH
12533: PPUSH
12534: PPUSH
12535: PPUSH
// for i = 1 to medicCount do
12536: LD_ADDR_VAR 0 14
12540: PUSH
12541: DOUBLE
12542: LD_INT 1
12544: DEC
12545: ST_TO_ADDR
12546: LD_VAR 0 7
12550: PUSH
12551: FOR_TO
12552: IFFALSE 12634
// begin uc_side = side ;
12554: LD_ADDR_OWVAR 20
12558: PUSH
12559: LD_VAR 0 1
12563: ST_TO_ADDR
// uc_nation = nation ;
12564: LD_ADDR_OWVAR 21
12568: PUSH
12569: LD_VAR 0 2
12573: ST_TO_ADDR
// hc_name =  ;
12574: LD_ADDR_OWVAR 26
12578: PUSH
12579: LD_STRING 
12581: ST_TO_ADDR
// hc_gallery =  ;
12582: LD_ADDR_OWVAR 33
12586: PUSH
12587: LD_STRING 
12589: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12590: LD_INT 0
12592: PPUSH
12593: LD_INT 4
12595: PPUSH
12596: LD_VAR 0 8
12600: PPUSH
12601: CALL_OW 380
// un = CreateHuman ;
12605: LD_ADDR_VAR 0 16
12609: PUSH
12610: CALL_OW 44
12614: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12615: LD_VAR 0 16
12619: PPUSH
12620: LD_VAR 0 9
12624: PPUSH
12625: LD_INT 0
12627: PPUSH
12628: CALL_OW 49
// end ;
12632: GO 12551
12634: POP
12635: POP
// for i = 1 to soldierCount do
12636: LD_ADDR_VAR 0 14
12640: PUSH
12641: DOUBLE
12642: LD_INT 1
12644: DEC
12645: ST_TO_ADDR
12646: LD_VAR 0 3
12650: PUSH
12651: FOR_TO
12652: IFFALSE 12734
// begin uc_side = side ;
12654: LD_ADDR_OWVAR 20
12658: PUSH
12659: LD_VAR 0 1
12663: ST_TO_ADDR
// uc_nation = nation ;
12664: LD_ADDR_OWVAR 21
12668: PUSH
12669: LD_VAR 0 2
12673: ST_TO_ADDR
// hc_name =  ;
12674: LD_ADDR_OWVAR 26
12678: PUSH
12679: LD_STRING 
12681: ST_TO_ADDR
// hc_gallery =  ;
12682: LD_ADDR_OWVAR 33
12686: PUSH
12687: LD_STRING 
12689: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12690: LD_INT 0
12692: PPUSH
12693: LD_INT 1
12695: PPUSH
12696: LD_VAR 0 8
12700: PPUSH
12701: CALL_OW 380
// un = CreateHuman ;
12705: LD_ADDR_VAR 0 16
12709: PUSH
12710: CALL_OW 44
12714: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12715: LD_VAR 0 16
12719: PPUSH
12720: LD_VAR 0 9
12724: PPUSH
12725: LD_INT 0
12727: PPUSH
12728: CALL_OW 49
// end ;
12732: GO 12651
12734: POP
12735: POP
// for i = 1 to sniperCount do
12736: LD_ADDR_VAR 0 14
12740: PUSH
12741: DOUBLE
12742: LD_INT 1
12744: DEC
12745: ST_TO_ADDR
12746: LD_VAR 0 4
12750: PUSH
12751: FOR_TO
12752: IFFALSE 12834
// begin uc_side = side ;
12754: LD_ADDR_OWVAR 20
12758: PUSH
12759: LD_VAR 0 1
12763: ST_TO_ADDR
// uc_nation = nation ;
12764: LD_ADDR_OWVAR 21
12768: PUSH
12769: LD_VAR 0 2
12773: ST_TO_ADDR
// hc_name =  ;
12774: LD_ADDR_OWVAR 26
12778: PUSH
12779: LD_STRING 
12781: ST_TO_ADDR
// hc_gallery =  ;
12782: LD_ADDR_OWVAR 33
12786: PUSH
12787: LD_STRING 
12789: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12790: LD_INT 0
12792: PPUSH
12793: LD_INT 5
12795: PPUSH
12796: LD_VAR 0 8
12800: PPUSH
12801: CALL_OW 380
// un = CreateHuman ;
12805: LD_ADDR_VAR 0 16
12809: PUSH
12810: CALL_OW 44
12814: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12815: LD_VAR 0 16
12819: PPUSH
12820: LD_VAR 0 9
12824: PPUSH
12825: LD_INT 0
12827: PPUSH
12828: CALL_OW 49
// end ;
12832: GO 12751
12834: POP
12835: POP
// for i = 1 to bazookCount do
12836: LD_ADDR_VAR 0 14
12840: PUSH
12841: DOUBLE
12842: LD_INT 1
12844: DEC
12845: ST_TO_ADDR
12846: LD_VAR 0 5
12850: PUSH
12851: FOR_TO
12852: IFFALSE 12934
// begin uc_side = side ;
12854: LD_ADDR_OWVAR 20
12858: PUSH
12859: LD_VAR 0 1
12863: ST_TO_ADDR
// uc_nation = nation ;
12864: LD_ADDR_OWVAR 21
12868: PUSH
12869: LD_VAR 0 2
12873: ST_TO_ADDR
// hc_name =  ;
12874: LD_ADDR_OWVAR 26
12878: PUSH
12879: LD_STRING 
12881: ST_TO_ADDR
// hc_gallery =  ;
12882: LD_ADDR_OWVAR 33
12886: PUSH
12887: LD_STRING 
12889: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12890: LD_INT 0
12892: PPUSH
12893: LD_INT 9
12895: PPUSH
12896: LD_VAR 0 8
12900: PPUSH
12901: CALL_OW 380
// un = CreateHuman ;
12905: LD_ADDR_VAR 0 16
12909: PUSH
12910: CALL_OW 44
12914: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12915: LD_VAR 0 16
12919: PPUSH
12920: LD_VAR 0 9
12924: PPUSH
12925: LD_INT 0
12927: PPUSH
12928: CALL_OW 49
// end ;
12932: GO 12851
12934: POP
12935: POP
// for i = 1 to mortalCount do
12936: LD_ADDR_VAR 0 14
12940: PUSH
12941: DOUBLE
12942: LD_INT 1
12944: DEC
12945: ST_TO_ADDR
12946: LD_VAR 0 6
12950: PUSH
12951: FOR_TO
12952: IFFALSE 13034
// begin uc_side = side ;
12954: LD_ADDR_OWVAR 20
12958: PUSH
12959: LD_VAR 0 1
12963: ST_TO_ADDR
// uc_nation = nation ;
12964: LD_ADDR_OWVAR 21
12968: PUSH
12969: LD_VAR 0 2
12973: ST_TO_ADDR
// hc_name =  ;
12974: LD_ADDR_OWVAR 26
12978: PUSH
12979: LD_STRING 
12981: ST_TO_ADDR
// hc_gallery =  ;
12982: LD_ADDR_OWVAR 33
12986: PUSH
12987: LD_STRING 
12989: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12990: LD_INT 0
12992: PPUSH
12993: LD_INT 8
12995: PPUSH
12996: LD_VAR 0 8
13000: PPUSH
13001: CALL_OW 380
// un = CreateHuman ;
13005: LD_ADDR_VAR 0 16
13009: PUSH
13010: CALL_OW 44
13014: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13015: LD_VAR 0 16
13019: PPUSH
13020: LD_VAR 0 9
13024: PPUSH
13025: LD_INT 0
13027: PPUSH
13028: CALL_OW 49
// end ;
13032: GO 12951
13034: POP
13035: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
13036: LD_ADDR_VAR 0 19
13040: PUSH
13041: LD_INT 22
13043: PUSH
13044: LD_VAR 0 1
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PUSH
13053: LD_INT 2
13055: PUSH
13056: LD_INT 25
13058: PUSH
13059: LD_INT 1
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: LD_INT 25
13068: PUSH
13069: LD_INT 5
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PUSH
13076: LD_INT 25
13078: PUSH
13079: LD_INT 8
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: PUSH
13086: LD_INT 25
13088: PUSH
13089: LD_INT 9
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: PPUSH
13107: CALL_OW 69
13111: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
13112: LD_ADDR_VAR 0 18
13116: PUSH
13117: LD_INT 22
13119: PUSH
13120: LD_VAR 0 1
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 25
13131: PUSH
13132: LD_INT 4
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PPUSH
13143: CALL_OW 69
13147: ST_TO_ADDR
// for i in medic_list do
13148: LD_ADDR_VAR 0 14
13152: PUSH
13153: LD_VAR 0 18
13157: PUSH
13158: FOR_IN
13159: IFFALSE 13177
// ComMoveToArea ( i , healArea ) ;
13161: LD_VAR 0 14
13165: PPUSH
13166: LD_VAR 0 10
13170: PPUSH
13171: CALL_OW 113
13175: GO 13158
13177: POP
13178: POP
// if strategy = 1 then
13179: LD_VAR 0 12
13183: PUSH
13184: LD_INT 1
13186: EQUAL
13187: IFFALSE 13733
// begin repeat wait ( 0 0$3 ) ;
13189: LD_INT 105
13191: PPUSH
13192: CALL_OW 67
// for i in soldiersOK_list do
13196: LD_ADDR_VAR 0 14
13200: PUSH
13201: LD_VAR 0 19
13205: PUSH
13206: FOR_IN
13207: IFFALSE 13271
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13209: LD_VAR 0 14
13213: PPUSH
13214: LD_INT 91
13216: PPUSH
13217: LD_INT 63
13219: PPUSH
13220: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13224: LD_VAR 0 14
13228: PPUSH
13229: LD_INT 101
13231: PPUSH
13232: LD_INT 53
13234: PPUSH
13235: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13239: LD_VAR 0 14
13243: PPUSH
13244: LD_INT 75
13246: PPUSH
13247: LD_INT 23
13249: PPUSH
13250: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13254: LD_VAR 0 14
13258: PPUSH
13259: LD_INT 78
13261: PPUSH
13262: LD_INT 8
13264: PPUSH
13265: CALL_OW 174
// end ;
13269: GO 13206
13271: POP
13272: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13273: LD_INT 12
13275: PPUSH
13276: LD_INT 22
13278: PUSH
13279: LD_VAR 0 1
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PPUSH
13288: CALL_OW 70
13292: PUSH
13293: LD_INT 2
13295: GREATER
13296: IFFALSE 13189
// repeat wait ( 0 0$1 ) ;
13298: LD_INT 35
13300: PPUSH
13301: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13305: LD_ADDR_VAR 0 17
13309: PUSH
13310: LD_INT 22
13312: PUSH
13313: LD_VAR 0 1
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 1
13324: PUSH
13325: LD_INT 3
13327: PUSH
13328: LD_INT 24
13330: PUSH
13331: LD_INT 550
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 24
13344: PUSH
13345: LD_INT 250
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PPUSH
13361: CALL_OW 69
13365: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13366: LD_ADDR_VAR 0 19
13370: PUSH
13371: LD_INT 22
13373: PUSH
13374: LD_VAR 0 1
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: LD_INT 25
13388: PUSH
13389: LD_INT 1
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 25
13398: PUSH
13399: LD_INT 5
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: LD_INT 25
13408: PUSH
13409: LD_INT 8
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: LD_INT 25
13418: PUSH
13419: LD_INT 9
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 24
13435: PUSH
13436: LD_INT 1000
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: LIST
13447: PPUSH
13448: CALL_OW 69
13452: ST_TO_ADDR
// if medicCount > 0 then
13453: LD_VAR 0 7
13457: PUSH
13458: LD_INT 0
13460: GREATER
13461: IFFALSE 13535
// begin if damageUnit_list > 0 then
13463: LD_VAR 0 17
13467: PUSH
13468: LD_INT 0
13470: GREATER
13471: IFFALSE 13535
// begin for i in damageUnit_list do
13473: LD_ADDR_VAR 0 14
13477: PUSH
13478: LD_VAR 0 17
13482: PUSH
13483: FOR_IN
13484: IFFALSE 13533
// begin ComMoveToArea ( i , healArea ) ;
13486: LD_VAR 0 14
13490: PPUSH
13491: LD_VAR 0 10
13495: PPUSH
13496: CALL_OW 113
// for j in medic_list do
13500: LD_ADDR_VAR 0 15
13504: PUSH
13505: LD_VAR 0 18
13509: PUSH
13510: FOR_IN
13511: IFFALSE 13529
// AddComHeal ( j , i ) ;
13513: LD_VAR 0 15
13517: PPUSH
13518: LD_VAR 0 14
13522: PPUSH
13523: CALL_OW 188
13527: GO 13510
13529: POP
13530: POP
// end ;
13531: GO 13483
13533: POP
13534: POP
// end ; end ; for i in soldiersOK_list do
13535: LD_ADDR_VAR 0 14
13539: PUSH
13540: LD_VAR 0 19
13544: PUSH
13545: FOR_IN
13546: IFFALSE 13722
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13548: LD_ADDR_VAR 0 22
13552: PUSH
13553: LD_INT 22
13555: PUSH
13556: LD_VAR 0 11
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PPUSH
13565: CALL_OW 69
13569: PPUSH
13570: LD_VAR 0 14
13574: PPUSH
13575: CALL_OW 74
13579: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13580: LD_ADDR_VAR 0 23
13584: PUSH
13585: LD_INT 22
13587: PUSH
13588: LD_VAR 0 11
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PUSH
13597: LD_INT 2
13599: PUSH
13600: LD_INT 59
13602: PUSH
13603: EMPTY
13604: LIST
13605: PUSH
13606: LD_INT 21
13608: PUSH
13609: LD_INT 1
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: LD_INT 21
13618: PUSH
13619: LD_INT 2
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: EMPTY
13637: LIST
13638: PPUSH
13639: CALL_OW 69
13643: PPUSH
13644: LD_VAR 0 14
13648: PPUSH
13649: CALL_OW 74
13653: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13654: LD_VAR 0 14
13658: PPUSH
13659: LD_VAR 0 22
13663: PPUSH
13664: CALL_OW 296
13668: PUSH
13669: LD_INT 6
13671: PLUS
13672: PUSH
13673: LD_VAR 0 14
13677: PPUSH
13678: LD_VAR 0 23
13682: PPUSH
13683: CALL_OW 296
13687: LESS
13688: IFFALSE 13706
// begin ComAttackUnit ( i , target1 ) ;
13690: LD_VAR 0 14
13694: PPUSH
13695: LD_VAR 0 22
13699: PPUSH
13700: CALL_OW 115
// end else
13704: GO 13720
// begin ComAttackUnit ( i , target2 ) ;
13706: LD_VAR 0 14
13710: PPUSH
13711: LD_VAR 0 23
13715: PPUSH
13716: CALL_OW 115
// end ; end ;
13720: GO 13545
13722: POP
13723: POP
// until soldiersOK_list = [ ] ;
13724: LD_VAR 0 19
13728: PUSH
13729: EMPTY
13730: EQUAL
13731: IFFALSE 13298
// end ; if strategy = 2 then
13733: LD_VAR 0 12
13737: PUSH
13738: LD_INT 2
13740: EQUAL
13741: IFFALSE 14257
// begin repeat wait ( 0 0$1 ) ;
13743: LD_INT 35
13745: PPUSH
13746: CALL_OW 67
// for i in soldiersOK_list do
13750: LD_ADDR_VAR 0 14
13754: PUSH
13755: LD_VAR 0 19
13759: PUSH
13760: FOR_IN
13761: IFFALSE 13795
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13763: LD_VAR 0 14
13767: PPUSH
13768: LD_INT 91
13770: PPUSH
13771: LD_INT 63
13773: PPUSH
13774: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13778: LD_VAR 0 14
13782: PPUSH
13783: LD_INT 75
13785: PPUSH
13786: LD_INT 33
13788: PPUSH
13789: CALL_OW 174
// end ;
13793: GO 13760
13795: POP
13796: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13797: LD_INT 13
13799: PPUSH
13800: LD_INT 22
13802: PUSH
13803: LD_VAR 0 1
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PPUSH
13812: CALL_OW 70
13816: PUSH
13817: LD_INT 2
13819: GREATER
13820: IFFALSE 13743
// repeat wait ( 0 0$3 ) ;
13822: LD_INT 105
13824: PPUSH
13825: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13829: LD_ADDR_VAR 0 17
13833: PUSH
13834: LD_INT 22
13836: PUSH
13837: LD_VAR 0 1
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PUSH
13846: LD_INT 1
13848: PUSH
13849: LD_INT 3
13851: PUSH
13852: LD_INT 24
13854: PUSH
13855: LD_INT 550
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PUSH
13866: LD_INT 24
13868: PUSH
13869: LD_INT 250
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: LIST
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: PPUSH
13885: CALL_OW 69
13889: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13890: LD_ADDR_VAR 0 19
13894: PUSH
13895: LD_INT 22
13897: PUSH
13898: LD_VAR 0 1
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 2
13909: PUSH
13910: LD_INT 25
13912: PUSH
13913: LD_INT 1
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 25
13922: PUSH
13923: LD_INT 5
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: LD_INT 25
13932: PUSH
13933: LD_INT 8
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: LD_INT 25
13942: PUSH
13943: LD_INT 9
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: PUSH
13957: LD_INT 24
13959: PUSH
13960: LD_INT 1000
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: LIST
13971: PPUSH
13972: CALL_OW 69
13976: ST_TO_ADDR
// if medicCount > 0 then
13977: LD_VAR 0 7
13981: PUSH
13982: LD_INT 0
13984: GREATER
13985: IFFALSE 14059
// begin if damageUnit_list > 0 then
13987: LD_VAR 0 17
13991: PUSH
13992: LD_INT 0
13994: GREATER
13995: IFFALSE 14059
// begin for i in damageUnit_list do
13997: LD_ADDR_VAR 0 14
14001: PUSH
14002: LD_VAR 0 17
14006: PUSH
14007: FOR_IN
14008: IFFALSE 14057
// begin ComMoveToArea ( i , healArea ) ;
14010: LD_VAR 0 14
14014: PPUSH
14015: LD_VAR 0 10
14019: PPUSH
14020: CALL_OW 113
// for j in medic_list do
14024: LD_ADDR_VAR 0 15
14028: PUSH
14029: LD_VAR 0 18
14033: PUSH
14034: FOR_IN
14035: IFFALSE 14053
// AddComHeal ( j , i ) ;
14037: LD_VAR 0 15
14041: PPUSH
14042: LD_VAR 0 14
14046: PPUSH
14047: CALL_OW 188
14051: GO 14034
14053: POP
14054: POP
// end ;
14055: GO 14007
14057: POP
14058: POP
// end ; end ; for i in soldiersOK_list do
14059: LD_ADDR_VAR 0 14
14063: PUSH
14064: LD_VAR 0 19
14068: PUSH
14069: FOR_IN
14070: IFFALSE 14246
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14072: LD_ADDR_VAR 0 22
14076: PUSH
14077: LD_INT 22
14079: PUSH
14080: LD_VAR 0 11
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PPUSH
14089: CALL_OW 69
14093: PPUSH
14094: LD_VAR 0 14
14098: PPUSH
14099: CALL_OW 74
14103: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14104: LD_ADDR_VAR 0 23
14108: PUSH
14109: LD_INT 22
14111: PUSH
14112: LD_VAR 0 11
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 2
14123: PUSH
14124: LD_INT 59
14126: PUSH
14127: EMPTY
14128: LIST
14129: PUSH
14130: LD_INT 21
14132: PUSH
14133: LD_INT 1
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PUSH
14140: LD_INT 21
14142: PUSH
14143: LD_INT 2
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PUSH
14160: EMPTY
14161: LIST
14162: PPUSH
14163: CALL_OW 69
14167: PPUSH
14168: LD_VAR 0 14
14172: PPUSH
14173: CALL_OW 74
14177: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14178: LD_VAR 0 14
14182: PPUSH
14183: LD_VAR 0 22
14187: PPUSH
14188: CALL_OW 296
14192: PUSH
14193: LD_INT 6
14195: PLUS
14196: PUSH
14197: LD_VAR 0 14
14201: PPUSH
14202: LD_VAR 0 23
14206: PPUSH
14207: CALL_OW 296
14211: LESS
14212: IFFALSE 14230
// begin ComAttackUnit ( i , target1 ) ;
14214: LD_VAR 0 14
14218: PPUSH
14219: LD_VAR 0 22
14223: PPUSH
14224: CALL_OW 115
// end else
14228: GO 14244
// begin ComAttackUnit ( i , target2 ) ;
14230: LD_VAR 0 14
14234: PPUSH
14235: LD_VAR 0 23
14239: PPUSH
14240: CALL_OW 115
// end ; end ;
14244: GO 14069
14246: POP
14247: POP
// until soldiersOK_list = [ ] ;
14248: LD_VAR 0 19
14252: PUSH
14253: EMPTY
14254: EQUAL
14255: IFFALSE 13822
// end ; if strategy = 3 then
14257: LD_VAR 0 12
14261: PUSH
14262: LD_INT 3
14264: EQUAL
14265: IFFALSE 14811
// begin repeat wait ( 0 0$3 ) ;
14267: LD_INT 105
14269: PPUSH
14270: CALL_OW 67
// for i in soldiersOK_list do
14274: LD_ADDR_VAR 0 14
14278: PUSH
14279: LD_VAR 0 19
14283: PUSH
14284: FOR_IN
14285: IFFALSE 14349
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14287: LD_VAR 0 14
14291: PPUSH
14292: LD_INT 63
14294: PPUSH
14295: LD_INT 71
14297: PPUSH
14298: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14302: LD_VAR 0 14
14306: PPUSH
14307: LD_INT 35
14309: PPUSH
14310: LD_INT 44
14312: PPUSH
14313: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14317: LD_VAR 0 14
14321: PPUSH
14322: LD_INT 23
14324: PPUSH
14325: LD_INT 18
14327: PPUSH
14328: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14332: LD_VAR 0 14
14336: PPUSH
14337: LD_INT 26
14339: PPUSH
14340: LD_INT 12
14342: PPUSH
14343: CALL_OW 174
// end ;
14347: GO 14284
14349: POP
14350: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14351: LD_INT 14
14353: PPUSH
14354: LD_INT 22
14356: PUSH
14357: LD_VAR 0 1
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: PPUSH
14366: CALL_OW 70
14370: PUSH
14371: LD_INT 2
14373: GREATER
14374: IFFALSE 14267
// repeat wait ( 0 0$1 ) ;
14376: LD_INT 35
14378: PPUSH
14379: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14383: LD_ADDR_VAR 0 17
14387: PUSH
14388: LD_INT 22
14390: PUSH
14391: LD_VAR 0 1
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 1
14402: PUSH
14403: LD_INT 3
14405: PUSH
14406: LD_INT 24
14408: PUSH
14409: LD_INT 550
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PUSH
14420: LD_INT 24
14422: PUSH
14423: LD_INT 250
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PPUSH
14439: CALL_OW 69
14443: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14444: LD_ADDR_VAR 0 19
14448: PUSH
14449: LD_INT 22
14451: PUSH
14452: LD_VAR 0 1
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 2
14463: PUSH
14464: LD_INT 25
14466: PUSH
14467: LD_INT 1
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 25
14476: PUSH
14477: LD_INT 5
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: LD_INT 25
14486: PUSH
14487: LD_INT 8
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: LD_INT 25
14496: PUSH
14497: LD_INT 9
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: PUSH
14511: LD_INT 24
14513: PUSH
14514: LD_INT 1000
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: LIST
14525: PPUSH
14526: CALL_OW 69
14530: ST_TO_ADDR
// if medicCount > 0 then
14531: LD_VAR 0 7
14535: PUSH
14536: LD_INT 0
14538: GREATER
14539: IFFALSE 14613
// begin if damageUnit_list > 0 then
14541: LD_VAR 0 17
14545: PUSH
14546: LD_INT 0
14548: GREATER
14549: IFFALSE 14613
// begin for i in damageUnit_list do
14551: LD_ADDR_VAR 0 14
14555: PUSH
14556: LD_VAR 0 17
14560: PUSH
14561: FOR_IN
14562: IFFALSE 14611
// begin ComMoveToArea ( i , healArea ) ;
14564: LD_VAR 0 14
14568: PPUSH
14569: LD_VAR 0 10
14573: PPUSH
14574: CALL_OW 113
// for j in medic_list do
14578: LD_ADDR_VAR 0 15
14582: PUSH
14583: LD_VAR 0 18
14587: PUSH
14588: FOR_IN
14589: IFFALSE 14607
// AddComHeal ( j , i ) ;
14591: LD_VAR 0 15
14595: PPUSH
14596: LD_VAR 0 14
14600: PPUSH
14601: CALL_OW 188
14605: GO 14588
14607: POP
14608: POP
// end ;
14609: GO 14561
14611: POP
14612: POP
// end ; end ; for i in soldiersOK_list do
14613: LD_ADDR_VAR 0 14
14617: PUSH
14618: LD_VAR 0 19
14622: PUSH
14623: FOR_IN
14624: IFFALSE 14800
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14626: LD_ADDR_VAR 0 22
14630: PUSH
14631: LD_INT 22
14633: PUSH
14634: LD_VAR 0 11
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PPUSH
14643: CALL_OW 69
14647: PPUSH
14648: LD_VAR 0 14
14652: PPUSH
14653: CALL_OW 74
14657: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14658: LD_ADDR_VAR 0 23
14662: PUSH
14663: LD_INT 22
14665: PUSH
14666: LD_VAR 0 11
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: PUSH
14675: LD_INT 2
14677: PUSH
14678: LD_INT 59
14680: PUSH
14681: EMPTY
14682: LIST
14683: PUSH
14684: LD_INT 21
14686: PUSH
14687: LD_INT 1
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: LD_INT 21
14696: PUSH
14697: LD_INT 2
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: EMPTY
14715: LIST
14716: PPUSH
14717: CALL_OW 69
14721: PPUSH
14722: LD_VAR 0 14
14726: PPUSH
14727: CALL_OW 74
14731: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14732: LD_VAR 0 14
14736: PPUSH
14737: LD_VAR 0 22
14741: PPUSH
14742: CALL_OW 296
14746: PUSH
14747: LD_INT 6
14749: PLUS
14750: PUSH
14751: LD_VAR 0 14
14755: PPUSH
14756: LD_VAR 0 23
14760: PPUSH
14761: CALL_OW 296
14765: LESS
14766: IFFALSE 14784
// begin ComAttackUnit ( i , target1 ) ;
14768: LD_VAR 0 14
14772: PPUSH
14773: LD_VAR 0 22
14777: PPUSH
14778: CALL_OW 115
// end else
14782: GO 14798
// begin ComAttackUnit ( i , target2 ) ;
14784: LD_VAR 0 14
14788: PPUSH
14789: LD_VAR 0 23
14793: PPUSH
14794: CALL_OW 115
// end ; end ;
14798: GO 14623
14800: POP
14801: POP
// until soldiersOK_list = [ ] ;
14802: LD_VAR 0 19
14806: PUSH
14807: EMPTY
14808: EQUAL
14809: IFFALSE 14376
// end ; end ;
14811: LD_VAR 0 13
14815: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14816: LD_INT 0
14818: PPUSH
14819: PPUSH
14820: PPUSH
14821: PPUSH
14822: PPUSH
14823: PPUSH
14824: PPUSH
14825: PPUSH
14826: PPUSH
14827: PPUSH
14828: PPUSH
// amChassisTab = [ ] ;
14829: LD_ADDR_VAR 0 19
14833: PUSH
14834: EMPTY
14835: ST_TO_ADDR
// arChassisTab = [ ] ;
14836: LD_ADDR_VAR 0 18
14840: PUSH
14841: EMPTY
14842: ST_TO_ADDR
// ruChassisTab = [ ] ;
14843: LD_ADDR_VAR 0 17
14847: PUSH
14848: EMPTY
14849: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14850: LD_INT 35
14852: PPUSH
14853: CALL_OW 67
// if nation = 1 then
14857: LD_VAR 0 5
14861: PUSH
14862: LD_INT 1
14864: EQUAL
14865: IFFALSE 15356
// begin uc_side = side ;
14867: LD_ADDR_OWVAR 20
14871: PUSH
14872: LD_VAR 0 2
14876: ST_TO_ADDR
// uc_nation = nation ;
14877: LD_ADDR_OWVAR 21
14881: PUSH
14882: LD_VAR 0 5
14886: ST_TO_ADDR
// vc_engine = vehengine ;
14887: LD_ADDR_OWVAR 39
14891: PUSH
14892: LD_VAR 0 6
14896: ST_TO_ADDR
// vc_control = vehcontrol ;
14897: LD_ADDR_OWVAR 38
14901: PUSH
14902: LD_VAR 0 7
14906: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14907: LD_ADDR_OWVAR 40
14911: PUSH
14912: LD_VAR 0 10
14916: PUSH
14917: LD_INT 1
14919: PPUSH
14920: LD_VAR 0 10
14924: PPUSH
14925: CALL_OW 12
14929: ARRAY
14930: ST_TO_ADDR
// for j = 1 to AMWeapon do
14931: LD_ADDR_VAR 0 14
14935: PUSH
14936: DOUBLE
14937: LD_INT 1
14939: DEC
14940: ST_TO_ADDR
14941: LD_VAR 0 10
14945: PUSH
14946: FOR_TO
14947: IFFALSE 15248
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14949: LD_VAR 0 10
14953: PUSH
14954: LD_VAR 0 14
14958: ARRAY
14959: PUSH
14960: LD_INT 2
14962: EQUAL
14963: PUSH
14964: LD_VAR 0 10
14968: PUSH
14969: LD_VAR 0 14
14973: ARRAY
14974: PUSH
14975: LD_INT 3
14977: EQUAL
14978: OR
14979: IFFALSE 15032
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14981: LD_ADDR_VAR 0 19
14985: PUSH
14986: LD_INT 1
14988: PUSH
14989: LD_INT 2
14991: PUSH
14992: LD_INT 3
14994: PUSH
14995: LD_INT 4
14997: PUSH
14998: LD_INT 5
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15008: LD_ADDR_OWVAR 37
15012: PUSH
15013: LD_VAR 0 19
15017: PUSH
15018: LD_INT 1
15020: PPUSH
15021: LD_VAR 0 19
15025: PPUSH
15026: CALL_OW 12
15030: ARRAY
15031: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15032: LD_VAR 0 10
15036: PUSH
15037: LD_VAR 0 14
15041: ARRAY
15042: PUSH
15043: LD_INT 4
15045: EQUAL
15046: PUSH
15047: LD_VAR 0 10
15051: PUSH
15052: LD_VAR 0 14
15056: ARRAY
15057: PUSH
15058: LD_INT 5
15060: EQUAL
15061: OR
15062: PUSH
15063: LD_VAR 0 10
15067: PUSH
15068: LD_VAR 0 14
15072: ARRAY
15073: PUSH
15074: LD_INT 9
15076: EQUAL
15077: OR
15078: PUSH
15079: LD_VAR 0 10
15083: PUSH
15084: LD_VAR 0 14
15088: ARRAY
15089: PUSH
15090: LD_INT 11
15092: EQUAL
15093: OR
15094: PUSH
15095: LD_VAR 0 10
15099: PUSH
15100: LD_VAR 0 14
15104: ARRAY
15105: PUSH
15106: LD_INT 7
15108: EQUAL
15109: OR
15110: IFFALSE 15159
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15112: LD_ADDR_VAR 0 19
15116: PUSH
15117: LD_INT 2
15119: PUSH
15120: LD_INT 3
15122: PUSH
15123: LD_INT 4
15125: PUSH
15126: LD_INT 5
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15135: LD_ADDR_OWVAR 37
15139: PUSH
15140: LD_VAR 0 19
15144: PUSH
15145: LD_INT 1
15147: PPUSH
15148: LD_VAR 0 19
15152: PPUSH
15153: CALL_OW 12
15157: ARRAY
15158: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15159: LD_VAR 0 10
15163: PUSH
15164: LD_VAR 0 14
15168: ARRAY
15169: PUSH
15170: LD_INT 8
15172: EQUAL
15173: PUSH
15174: LD_VAR 0 10
15178: PUSH
15179: LD_VAR 0 14
15183: ARRAY
15184: PUSH
15185: LD_INT 6
15187: EQUAL
15188: OR
15189: PUSH
15190: LD_VAR 0 10
15194: PUSH
15195: LD_VAR 0 14
15199: ARRAY
15200: PUSH
15201: LD_INT 10
15203: EQUAL
15204: OR
15205: IFFALSE 15246
// begin amChassisTab = [ 4 , 5 ] ;
15207: LD_ADDR_VAR 0 19
15211: PUSH
15212: LD_INT 4
15214: PUSH
15215: LD_INT 5
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15222: LD_ADDR_OWVAR 37
15226: PUSH
15227: LD_VAR 0 19
15231: PUSH
15232: LD_INT 1
15234: PPUSH
15235: LD_VAR 0 19
15239: PPUSH
15240: CALL_OW 12
15244: ARRAY
15245: ST_TO_ADDR
// end ; end ;
15246: GO 14946
15248: POP
15249: POP
// veh = CreateVehicle ;
15250: LD_ADDR_VAR 0 16
15254: PUSH
15255: CALL_OW 45
15259: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15260: LD_VAR 0 16
15264: PPUSH
15265: LD_VAR 0 1
15269: PPUSH
15270: LD_INT 0
15272: PPUSH
15273: CALL_OW 49
// if vehControl = 1 then
15277: LD_VAR 0 7
15281: PUSH
15282: LD_INT 1
15284: EQUAL
15285: IFFALSE 15342
// begin hc_gallery =  ;
15287: LD_ADDR_OWVAR 33
15291: PUSH
15292: LD_STRING 
15294: ST_TO_ADDR
// hc_name =  ;
15295: LD_ADDR_OWVAR 26
15299: PUSH
15300: LD_STRING 
15302: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15303: LD_INT 0
15305: PPUSH
15306: LD_INT 3
15308: PPUSH
15309: LD_VAR 0 4
15313: PPUSH
15314: CALL_OW 380
// un = CreateHuman ;
15318: LD_ADDR_VAR 0 15
15322: PUSH
15323: CALL_OW 44
15327: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15328: LD_VAR 0 15
15332: PPUSH
15333: LD_VAR 0 16
15337: PPUSH
15338: CALL_OW 52
// end ; i = i + 1 ;
15342: LD_ADDR_VAR 0 13
15346: PUSH
15347: LD_VAR 0 13
15351: PUSH
15352: LD_INT 1
15354: PLUS
15355: ST_TO_ADDR
// end ; if nation = 2 then
15356: LD_VAR 0 5
15360: PUSH
15361: LD_INT 2
15363: EQUAL
15364: IFFALSE 15788
// begin uc_side = side ;
15366: LD_ADDR_OWVAR 20
15370: PUSH
15371: LD_VAR 0 2
15375: ST_TO_ADDR
// uc_nation = nation ;
15376: LD_ADDR_OWVAR 21
15380: PUSH
15381: LD_VAR 0 5
15385: ST_TO_ADDR
// vc_engine = vehengine ;
15386: LD_ADDR_OWVAR 39
15390: PUSH
15391: LD_VAR 0 6
15395: ST_TO_ADDR
// vc_control = vehcontrol ;
15396: LD_ADDR_OWVAR 38
15400: PUSH
15401: LD_VAR 0 7
15405: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15406: LD_ADDR_OWVAR 40
15410: PUSH
15411: LD_VAR 0 9
15415: PUSH
15416: LD_INT 1
15418: PPUSH
15419: LD_VAR 0 9
15423: PPUSH
15424: CALL_OW 12
15428: ARRAY
15429: ST_TO_ADDR
// for j = 1 to ARWeapons do
15430: LD_ADDR_VAR 0 14
15434: PUSH
15435: DOUBLE
15436: LD_INT 1
15438: DEC
15439: ST_TO_ADDR
15440: LD_VAR 0 9
15444: PUSH
15445: FOR_TO
15446: IFFALSE 15680
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15448: LD_VAR 0 9
15452: PUSH
15453: LD_VAR 0 14
15457: ARRAY
15458: PUSH
15459: LD_INT 24
15461: EQUAL
15462: PUSH
15463: LD_VAR 0 9
15467: PUSH
15468: LD_VAR 0 14
15472: ARRAY
15473: PUSH
15474: LD_INT 22
15476: EQUAL
15477: OR
15478: PUSH
15479: LD_VAR 0 9
15483: PUSH
15484: LD_VAR 0 14
15488: ARRAY
15489: PUSH
15490: LD_INT 23
15492: EQUAL
15493: OR
15494: PUSH
15495: LD_VAR 0 9
15499: PUSH
15500: LD_VAR 0 14
15504: ARRAY
15505: PUSH
15506: LD_INT 30
15508: EQUAL
15509: OR
15510: IFFALSE 15559
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15512: LD_ADDR_VAR 0 18
15516: PUSH
15517: LD_INT 11
15519: PUSH
15520: LD_INT 12
15522: PUSH
15523: LD_INT 13
15525: PUSH
15526: LD_INT 14
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15535: LD_ADDR_OWVAR 37
15539: PUSH
15540: LD_VAR 0 18
15544: PUSH
15545: LD_INT 1
15547: PPUSH
15548: LD_VAR 0 18
15552: PPUSH
15553: CALL_OW 12
15557: ARRAY
15558: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15559: LD_VAR 0 9
15563: PUSH
15564: LD_VAR 0 14
15568: ARRAY
15569: PUSH
15570: LD_INT 29
15572: EQUAL
15573: PUSH
15574: LD_VAR 0 9
15578: PUSH
15579: LD_VAR 0 14
15583: ARRAY
15584: PUSH
15585: LD_INT 28
15587: EQUAL
15588: OR
15589: PUSH
15590: LD_VAR 0 9
15594: PUSH
15595: LD_VAR 0 14
15599: ARRAY
15600: PUSH
15601: LD_INT 27
15603: EQUAL
15604: OR
15605: PUSH
15606: LD_VAR 0 9
15610: PUSH
15611: LD_VAR 0 14
15615: ARRAY
15616: PUSH
15617: LD_INT 26
15619: EQUAL
15620: OR
15621: PUSH
15622: LD_VAR 0 9
15626: PUSH
15627: LD_VAR 0 14
15631: ARRAY
15632: PUSH
15633: LD_INT 25
15635: EQUAL
15636: OR
15637: IFFALSE 15678
// begin arChassisTab = [ 13 , 14 ] ;
15639: LD_ADDR_VAR 0 18
15643: PUSH
15644: LD_INT 13
15646: PUSH
15647: LD_INT 14
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15654: LD_ADDR_OWVAR 37
15658: PUSH
15659: LD_VAR 0 18
15663: PUSH
15664: LD_INT 1
15666: PPUSH
15667: LD_VAR 0 18
15671: PPUSH
15672: CALL_OW 12
15676: ARRAY
15677: ST_TO_ADDR
// end ; end ;
15678: GO 15445
15680: POP
15681: POP
// veh = CreateVehicle ;
15682: LD_ADDR_VAR 0 16
15686: PUSH
15687: CALL_OW 45
15691: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15692: LD_VAR 0 16
15696: PPUSH
15697: LD_VAR 0 1
15701: PPUSH
15702: LD_INT 0
15704: PPUSH
15705: CALL_OW 49
// if vehcontrol = 1 then
15709: LD_VAR 0 7
15713: PUSH
15714: LD_INT 1
15716: EQUAL
15717: IFFALSE 15774
// begin hc_gallery =  ;
15719: LD_ADDR_OWVAR 33
15723: PUSH
15724: LD_STRING 
15726: ST_TO_ADDR
// hc_name =  ;
15727: LD_ADDR_OWVAR 26
15731: PUSH
15732: LD_STRING 
15734: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15735: LD_INT 0
15737: PPUSH
15738: LD_INT 3
15740: PPUSH
15741: LD_VAR 0 4
15745: PPUSH
15746: CALL_OW 380
// un = CreateHuman ;
15750: LD_ADDR_VAR 0 15
15754: PUSH
15755: CALL_OW 44
15759: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15760: LD_VAR 0 15
15764: PPUSH
15765: LD_VAR 0 16
15769: PPUSH
15770: CALL_OW 52
// end ; i = i + 1 ;
15774: LD_ADDR_VAR 0 13
15778: PUSH
15779: LD_VAR 0 13
15783: PUSH
15784: LD_INT 1
15786: PLUS
15787: ST_TO_ADDR
// end ; if nation = 3 then
15788: LD_VAR 0 5
15792: PUSH
15793: LD_INT 3
15795: EQUAL
15796: IFFALSE 16188
// begin uc_side = side ;
15798: LD_ADDR_OWVAR 20
15802: PUSH
15803: LD_VAR 0 2
15807: ST_TO_ADDR
// uc_nation = nation ;
15808: LD_ADDR_OWVAR 21
15812: PUSH
15813: LD_VAR 0 5
15817: ST_TO_ADDR
// vc_engine = vehengine ;
15818: LD_ADDR_OWVAR 39
15822: PUSH
15823: LD_VAR 0 6
15827: ST_TO_ADDR
// vc_control = vehcontrol ;
15828: LD_ADDR_OWVAR 38
15832: PUSH
15833: LD_VAR 0 7
15837: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15838: LD_ADDR_OWVAR 40
15842: PUSH
15843: LD_VAR 0 8
15847: PUSH
15848: LD_INT 1
15850: PPUSH
15851: LD_VAR 0 8
15855: PPUSH
15856: CALL_OW 12
15860: ARRAY
15861: ST_TO_ADDR
// for j = 1 to RuWeapons do
15862: LD_ADDR_VAR 0 14
15866: PUSH
15867: DOUBLE
15868: LD_INT 1
15870: DEC
15871: ST_TO_ADDR
15872: LD_VAR 0 8
15876: PUSH
15877: FOR_TO
15878: IFFALSE 16080
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15880: LD_VAR 0 8
15884: PUSH
15885: LD_VAR 0 14
15889: ARRAY
15890: PUSH
15891: LD_INT 42
15893: EQUAL
15894: PUSH
15895: LD_VAR 0 8
15899: PUSH
15900: LD_VAR 0 14
15904: ARRAY
15905: PUSH
15906: LD_INT 43
15908: EQUAL
15909: OR
15910: PUSH
15911: LD_VAR 0 8
15915: PUSH
15916: LD_VAR 0 14
15920: ARRAY
15921: PUSH
15922: LD_INT 44
15924: EQUAL
15925: OR
15926: PUSH
15927: LD_VAR 0 8
15931: PUSH
15932: LD_VAR 0 14
15936: ARRAY
15937: PUSH
15938: LD_INT 45
15940: EQUAL
15941: OR
15942: PUSH
15943: LD_VAR 0 8
15947: PUSH
15948: LD_VAR 0 14
15952: ARRAY
15953: PUSH
15954: LD_INT 49
15956: EQUAL
15957: OR
15958: IFFALSE 16007
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15960: LD_ADDR_VAR 0 17
15964: PUSH
15965: LD_INT 21
15967: PUSH
15968: LD_INT 22
15970: PUSH
15971: LD_INT 23
15973: PUSH
15974: LD_INT 24
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15983: LD_ADDR_OWVAR 37
15987: PUSH
15988: LD_VAR 0 17
15992: PUSH
15993: LD_INT 1
15995: PPUSH
15996: LD_VAR 0 17
16000: PPUSH
16001: CALL_OW 12
16005: ARRAY
16006: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16007: LD_VAR 0 8
16011: PUSH
16012: LD_VAR 0 14
16016: ARRAY
16017: PUSH
16018: LD_INT 46
16020: EQUAL
16021: PUSH
16022: LD_VAR 0 8
16026: PUSH
16027: LD_VAR 0 14
16031: ARRAY
16032: PUSH
16033: LD_INT 47
16035: EQUAL
16036: OR
16037: IFFALSE 16078
// begin ruChassisTab = [ 23 , 24 ] ;
16039: LD_ADDR_VAR 0 17
16043: PUSH
16044: LD_INT 23
16046: PUSH
16047: LD_INT 24
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16054: LD_ADDR_OWVAR 37
16058: PUSH
16059: LD_VAR 0 17
16063: PUSH
16064: LD_INT 1
16066: PPUSH
16067: LD_VAR 0 17
16071: PPUSH
16072: CALL_OW 12
16076: ARRAY
16077: ST_TO_ADDR
// end ; end ;
16078: GO 15877
16080: POP
16081: POP
// veh = CreateVehicle ;
16082: LD_ADDR_VAR 0 16
16086: PUSH
16087: CALL_OW 45
16091: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16092: LD_VAR 0 16
16096: PPUSH
16097: LD_VAR 0 1
16101: PPUSH
16102: LD_INT 0
16104: PPUSH
16105: CALL_OW 49
// if vehcontrol = 1 then
16109: LD_VAR 0 7
16113: PUSH
16114: LD_INT 1
16116: EQUAL
16117: IFFALSE 16174
// begin hc_gallery =  ;
16119: LD_ADDR_OWVAR 33
16123: PUSH
16124: LD_STRING 
16126: ST_TO_ADDR
// hc_name =  ;
16127: LD_ADDR_OWVAR 26
16131: PUSH
16132: LD_STRING 
16134: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16135: LD_INT 0
16137: PPUSH
16138: LD_INT 3
16140: PPUSH
16141: LD_VAR 0 4
16145: PPUSH
16146: CALL_OW 380
// un = CreateHuman ;
16150: LD_ADDR_VAR 0 15
16154: PUSH
16155: CALL_OW 44
16159: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16160: LD_VAR 0 15
16164: PPUSH
16165: LD_VAR 0 16
16169: PPUSH
16170: CALL_OW 52
// end ; i = i + 1 ;
16174: LD_ADDR_VAR 0 13
16178: PUSH
16179: LD_VAR 0 13
16183: PUSH
16184: LD_INT 1
16186: PLUS
16187: ST_TO_ADDR
// end ; until i = vehCount ;
16188: LD_VAR 0 13
16192: PUSH
16193: LD_VAR 0 3
16197: EQUAL
16198: IFFALSE 14850
// repeat wait ( 0 0$1 ) ;
16200: LD_INT 35
16202: PPUSH
16203: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16207: LD_ADDR_VAR 0 20
16211: PUSH
16212: LD_INT 22
16214: PUSH
16215: LD_VAR 0 2
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: LD_INT 21
16226: PUSH
16227: LD_INT 2
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PUSH
16234: LD_INT 24
16236: PUSH
16237: LD_INT 250
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: LIST
16248: PPUSH
16249: CALL_OW 69
16253: ST_TO_ADDR
// if vehicleOK_list > 0 then
16254: LD_VAR 0 20
16258: PUSH
16259: LD_INT 0
16261: GREATER
16262: IFFALSE 16453
// begin for i in vehicleOK_list do
16264: LD_ADDR_VAR 0 13
16268: PUSH
16269: LD_VAR 0 20
16273: PUSH
16274: FOR_IN
16275: IFFALSE 16451
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16277: LD_ADDR_VAR 0 21
16281: PUSH
16282: LD_INT 22
16284: PUSH
16285: LD_VAR 0 11
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PPUSH
16294: CALL_OW 69
16298: PPUSH
16299: LD_VAR 0 13
16303: PPUSH
16304: CALL_OW 74
16308: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16309: LD_ADDR_VAR 0 22
16313: PUSH
16314: LD_INT 22
16316: PUSH
16317: LD_VAR 0 11
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: LD_INT 2
16328: PUSH
16329: LD_INT 59
16331: PUSH
16332: EMPTY
16333: LIST
16334: PUSH
16335: LD_INT 21
16337: PUSH
16338: LD_INT 1
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: LD_INT 21
16347: PUSH
16348: LD_INT 2
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: EMPTY
16366: LIST
16367: PPUSH
16368: CALL_OW 69
16372: PPUSH
16373: LD_VAR 0 13
16377: PPUSH
16378: CALL_OW 74
16382: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16383: LD_VAR 0 13
16387: PPUSH
16388: LD_VAR 0 21
16392: PPUSH
16393: CALL_OW 296
16397: PUSH
16398: LD_INT 6
16400: PLUS
16401: PUSH
16402: LD_VAR 0 13
16406: PPUSH
16407: LD_VAR 0 22
16411: PPUSH
16412: CALL_OW 296
16416: LESS
16417: IFFALSE 16435
// begin ComAttackUnit ( i , target1 ) ;
16419: LD_VAR 0 13
16423: PPUSH
16424: LD_VAR 0 21
16428: PPUSH
16429: CALL_OW 115
// end else
16433: GO 16449
// begin ComAttackUnit ( i , target2 ) ;
16435: LD_VAR 0 13
16439: PPUSH
16440: LD_VAR 0 22
16444: PPUSH
16445: CALL_OW 115
// end ; end ;
16449: GO 16274
16451: POP
16452: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16453: LD_INT 22
16455: PUSH
16456: LD_VAR 0 2
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 21
16467: PUSH
16468: LD_INT 2
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 24
16477: PUSH
16478: LD_INT 250
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: LIST
16489: PPUSH
16490: CALL_OW 69
16494: PUSH
16495: LD_INT 0
16497: EQUAL
16498: IFFALSE 16200
// end ;
16500: LD_VAR 0 12
16504: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16505: LD_INT 0
16507: PPUSH
16508: PPUSH
16509: PPUSH
16510: PPUSH
16511: PPUSH
16512: PPUSH
16513: PPUSH
16514: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16515: LD_ADDR_VAR 0 7
16519: PUSH
16520: LD_INT 22
16522: PUSH
16523: LD_VAR 0 1
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 1
16534: PUSH
16535: LD_INT 3
16537: PUSH
16538: LD_INT 24
16540: PUSH
16541: LD_INT 550
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 24
16554: PUSH
16555: LD_INT 250
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: LIST
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PPUSH
16571: CALL_OW 69
16575: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16576: LD_ADDR_VAR 0 8
16580: PUSH
16581: LD_INT 22
16583: PUSH
16584: LD_VAR 0 1
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 2
16595: PUSH
16596: LD_INT 25
16598: PUSH
16599: LD_INT 1
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: LD_INT 25
16608: PUSH
16609: LD_INT 5
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: LD_INT 25
16618: PUSH
16619: LD_INT 8
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 25
16628: PUSH
16629: LD_INT 9
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 24
16645: PUSH
16646: LD_INT 1000
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: LIST
16657: PPUSH
16658: CALL_OW 69
16662: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16663: LD_ADDR_VAR 0 9
16667: PUSH
16668: LD_INT 22
16670: PUSH
16671: LD_VAR 0 1
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 25
16682: PUSH
16683: LD_INT 4
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PPUSH
16694: CALL_OW 69
16698: ST_TO_ADDR
// if medicCount > 0 then
16699: LD_VAR 0 9
16703: PUSH
16704: LD_INT 0
16706: GREATER
16707: IFFALSE 16781
// begin if damageUnit_list > 0 then
16709: LD_VAR 0 7
16713: PUSH
16714: LD_INT 0
16716: GREATER
16717: IFFALSE 16781
// begin for i in damageUnit_list do
16719: LD_ADDR_VAR 0 5
16723: PUSH
16724: LD_VAR 0 7
16728: PUSH
16729: FOR_IN
16730: IFFALSE 16779
// begin ComMoveToArea ( i , healArea ) ;
16732: LD_VAR 0 5
16736: PPUSH
16737: LD_VAR 0 2
16741: PPUSH
16742: CALL_OW 113
// for j in medicCount do
16746: LD_ADDR_VAR 0 6
16750: PUSH
16751: LD_VAR 0 9
16755: PUSH
16756: FOR_IN
16757: IFFALSE 16775
// AddComHeal ( j , i ) ;
16759: LD_VAR 0 6
16763: PPUSH
16764: LD_VAR 0 5
16768: PPUSH
16769: CALL_OW 188
16773: GO 16756
16775: POP
16776: POP
// end ;
16777: GO 16729
16779: POP
16780: POP
// end ; end ; if soldiersOK_list > 0 then
16781: LD_VAR 0 8
16785: PUSH
16786: LD_INT 0
16788: GREATER
16789: IFFALSE 16980
// begin for i in soldiersOK_list do
16791: LD_ADDR_VAR 0 5
16795: PUSH
16796: LD_VAR 0 8
16800: PUSH
16801: FOR_IN
16802: IFFALSE 16978
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16804: LD_ADDR_VAR 0 10
16808: PUSH
16809: LD_INT 22
16811: PUSH
16812: LD_VAR 0 3
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PPUSH
16821: CALL_OW 69
16825: PPUSH
16826: LD_VAR 0 5
16830: PPUSH
16831: CALL_OW 74
16835: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16836: LD_ADDR_VAR 0 11
16840: PUSH
16841: LD_INT 22
16843: PUSH
16844: LD_VAR 0 3
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 2
16855: PUSH
16856: LD_INT 59
16858: PUSH
16859: EMPTY
16860: LIST
16861: PUSH
16862: LD_INT 21
16864: PUSH
16865: LD_INT 1
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: LD_INT 21
16874: PUSH
16875: LD_INT 2
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: EMPTY
16893: LIST
16894: PPUSH
16895: CALL_OW 69
16899: PPUSH
16900: LD_VAR 0 5
16904: PPUSH
16905: CALL_OW 74
16909: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16910: LD_VAR 0 5
16914: PPUSH
16915: LD_VAR 0 10
16919: PPUSH
16920: CALL_OW 296
16924: PUSH
16925: LD_INT 8
16927: PLUS
16928: PUSH
16929: LD_VAR 0 5
16933: PPUSH
16934: LD_VAR 0 11
16938: PPUSH
16939: CALL_OW 296
16943: LESS
16944: IFFALSE 16962
// begin ComAttackUnit ( i , target1 ) ;
16946: LD_VAR 0 5
16950: PPUSH
16951: LD_VAR 0 10
16955: PPUSH
16956: CALL_OW 115
// end else
16960: GO 16976
// begin ComAttackUnit ( i , target2 ) ;
16962: LD_VAR 0 5
16966: PPUSH
16967: LD_VAR 0 11
16971: PPUSH
16972: CALL_OW 115
// end ; end ;
16976: GO 16801
16978: POP
16979: POP
// end ; end ;
16980: LD_VAR 0 4
16984: RET
// export function GetDriverVehicle ( unit ) ; begin
16985: LD_INT 0
16987: PPUSH
// if not unit then
16988: LD_VAR 0 1
16992: NOT
16993: IFFALSE 16997
// exit ;
16995: GO 17035
// result := IsInUnit ( unit ) ;
16997: LD_ADDR_VAR 0 2
17001: PUSH
17002: LD_VAR 0 1
17006: PPUSH
17007: CALL_OW 310
17011: ST_TO_ADDR
// if GetType ( result ) <> unit_vehicle then
17012: LD_VAR 0 2
17016: PPUSH
17017: CALL_OW 247
17021: PUSH
17022: LD_INT 2
17024: NONEQUAL
17025: IFFALSE 17035
// result := 0 ;
17027: LD_ADDR_VAR 0 2
17031: PUSH
17032: LD_INT 0
17034: ST_TO_ADDR
// end ;
17035: LD_VAR 0 2
17039: RET
// export function CanBeBuiltCost ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17040: LD_INT 0
17042: PPUSH
17043: PPUSH
17044: PPUSH
17045: PPUSH
17046: PPUSH
17047: PPUSH
17048: PPUSH
17049: PPUSH
17050: PPUSH
// result := false ;
17051: LD_ADDR_VAR 0 7
17055: PUSH
17056: LD_INT 0
17058: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17059: LD_VAR 0 1
17063: NOT
17064: PUSH
17065: LD_VAR 0 1
17069: PPUSH
17070: CALL_OW 266
17074: PUSH
17075: LD_INT 0
17077: PUSH
17078: LD_INT 1
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: IN
17085: NOT
17086: OR
17087: PUSH
17088: LD_VAR 0 2
17092: NOT
17093: OR
17094: PUSH
17095: LD_VAR 0 5
17099: PUSH
17100: LD_INT 0
17102: PUSH
17103: LD_INT 1
17105: PUSH
17106: LD_INT 2
17108: PUSH
17109: LD_INT 3
17111: PUSH
17112: LD_INT 4
17114: PUSH
17115: LD_INT 5
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: IN
17126: NOT
17127: OR
17128: PUSH
17129: LD_VAR 0 3
17133: PPUSH
17134: LD_VAR 0 4
17138: PPUSH
17139: CALL_OW 488
17143: NOT
17144: OR
17145: IFFALSE 17149
// exit ;
17147: GO 17830
// pom := GetBase ( bdepot ) ;
17149: LD_ADDR_VAR 0 10
17153: PUSH
17154: LD_VAR 0 1
17158: PPUSH
17159: CALL_OW 274
17163: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17164: LD_ADDR_VAR 0 11
17168: PUSH
17169: LD_VAR 0 2
17173: PPUSH
17174: LD_VAR 0 1
17178: PPUSH
17179: CALL_OW 248
17183: PPUSH
17184: CALL_OW 450
17188: ST_TO_ADDR
// if check_cost then
17189: LD_VAR 0 6
17193: IFFALSE 17270
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17195: LD_VAR 0 10
17199: PPUSH
17200: LD_INT 1
17202: PPUSH
17203: CALL_OW 275
17207: PUSH
17208: LD_VAR 0 11
17212: PUSH
17213: LD_INT 1
17215: ARRAY
17216: GREATEREQUAL
17217: PUSH
17218: LD_VAR 0 10
17222: PPUSH
17223: LD_INT 2
17225: PPUSH
17226: CALL_OW 275
17230: PUSH
17231: LD_VAR 0 11
17235: PUSH
17236: LD_INT 2
17238: ARRAY
17239: GREATEREQUAL
17240: AND
17241: PUSH
17242: LD_VAR 0 10
17246: PPUSH
17247: LD_INT 3
17249: PPUSH
17250: CALL_OW 275
17254: PUSH
17255: LD_VAR 0 11
17259: PUSH
17260: LD_INT 3
17262: ARRAY
17263: GREATEREQUAL
17264: AND
17265: NOT
17266: IFFALSE 17270
// exit ;
17268: GO 17830
// if GetBType ( bdepot ) = b_depot then
17270: LD_VAR 0 1
17274: PPUSH
17275: CALL_OW 266
17279: PUSH
17280: LD_INT 0
17282: EQUAL
17283: IFFALSE 17295
// dist := 28 else
17285: LD_ADDR_VAR 0 14
17289: PUSH
17290: LD_INT 28
17292: ST_TO_ADDR
17293: GO 17303
// dist := 36 ;
17295: LD_ADDR_VAR 0 14
17299: PUSH
17300: LD_INT 36
17302: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17303: LD_VAR 0 1
17307: PPUSH
17308: LD_VAR 0 3
17312: PPUSH
17313: LD_VAR 0 4
17317: PPUSH
17318: CALL_OW 297
17322: PUSH
17323: LD_VAR 0 14
17327: GREATER
17328: IFFALSE 17332
// exit ;
17330: GO 17830
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17332: LD_ADDR_VAR 0 12
17336: PUSH
17337: LD_VAR 0 2
17341: PPUSH
17342: LD_VAR 0 3
17346: PPUSH
17347: LD_VAR 0 4
17351: PPUSH
17352: LD_VAR 0 5
17356: PPUSH
17357: LD_VAR 0 1
17361: PPUSH
17362: CALL_OW 248
17366: PPUSH
17367: LD_INT 0
17369: PPUSH
17370: CALL 57771 0 6
17374: ST_TO_ADDR
// if not hexes then
17375: LD_VAR 0 12
17379: NOT
17380: IFFALSE 17384
// exit ;
17382: GO 17830
// hex := GetHexInfo ( x , y ) ;
17384: LD_ADDR_VAR 0 15
17388: PUSH
17389: LD_VAR 0 3
17393: PPUSH
17394: LD_VAR 0 4
17398: PPUSH
17399: CALL_OW 546
17403: ST_TO_ADDR
// if hex [ 1 ] then
17404: LD_VAR 0 15
17408: PUSH
17409: LD_INT 1
17411: ARRAY
17412: IFFALSE 17416
// exit ;
17414: GO 17830
// height := hex [ 2 ] ;
17416: LD_ADDR_VAR 0 13
17420: PUSH
17421: LD_VAR 0 15
17425: PUSH
17426: LD_INT 2
17428: ARRAY
17429: ST_TO_ADDR
// for i = 1 to hexes do
17430: LD_ADDR_VAR 0 8
17434: PUSH
17435: DOUBLE
17436: LD_INT 1
17438: DEC
17439: ST_TO_ADDR
17440: LD_VAR 0 12
17444: PUSH
17445: FOR_TO
17446: IFFALSE 17774
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17448: LD_VAR 0 12
17452: PUSH
17453: LD_VAR 0 8
17457: ARRAY
17458: PUSH
17459: LD_INT 1
17461: ARRAY
17462: PPUSH
17463: LD_VAR 0 12
17467: PUSH
17468: LD_VAR 0 8
17472: ARRAY
17473: PUSH
17474: LD_INT 2
17476: ARRAY
17477: PPUSH
17478: CALL_OW 488
17482: NOT
17483: IFFALSE 17487
// continue ;
17485: GO 17445
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17487: LD_ADDR_VAR 0 9
17491: PUSH
17492: LD_VAR 0 12
17496: PUSH
17497: LD_VAR 0 8
17501: ARRAY
17502: PUSH
17503: LD_INT 1
17505: ARRAY
17506: PPUSH
17507: LD_VAR 0 12
17511: PUSH
17512: LD_VAR 0 8
17516: ARRAY
17517: PUSH
17518: LD_INT 2
17520: ARRAY
17521: PPUSH
17522: CALL_OW 546
17526: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17527: LD_VAR 0 9
17531: PUSH
17532: LD_INT 1
17534: ARRAY
17535: PUSH
17536: LD_VAR 0 9
17540: PUSH
17541: LD_INT 2
17543: ARRAY
17544: PUSH
17545: LD_VAR 0 13
17549: PUSH
17550: LD_INT 2
17552: PLUS
17553: GREATER
17554: OR
17555: PUSH
17556: LD_VAR 0 9
17560: PUSH
17561: LD_INT 2
17563: ARRAY
17564: PUSH
17565: LD_VAR 0 13
17569: PUSH
17570: LD_INT 2
17572: MINUS
17573: LESS
17574: OR
17575: PUSH
17576: LD_VAR 0 9
17580: PUSH
17581: LD_INT 3
17583: ARRAY
17584: PUSH
17585: LD_INT 0
17587: PUSH
17588: LD_INT 8
17590: PUSH
17591: LD_INT 9
17593: PUSH
17594: LD_INT 10
17596: PUSH
17597: LD_INT 11
17599: PUSH
17600: LD_INT 12
17602: PUSH
17603: LD_INT 13
17605: PUSH
17606: LD_INT 16
17608: PUSH
17609: LD_INT 17
17611: PUSH
17612: LD_INT 18
17614: PUSH
17615: LD_INT 19
17617: PUSH
17618: LD_INT 20
17620: PUSH
17621: LD_INT 21
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: IN
17639: NOT
17640: OR
17641: PUSH
17642: LD_VAR 0 9
17646: PUSH
17647: LD_INT 5
17649: ARRAY
17650: NOT
17651: OR
17652: PUSH
17653: LD_VAR 0 9
17657: PUSH
17658: LD_INT 6
17660: ARRAY
17661: PUSH
17662: LD_INT 1
17664: PUSH
17665: LD_INT 2
17667: PUSH
17668: LD_INT 7
17670: PUSH
17671: LD_INT 9
17673: PUSH
17674: LD_INT 10
17676: PUSH
17677: LD_INT 11
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: IN
17688: NOT
17689: OR
17690: PUSH
17691: LD_VAR 0 12
17695: PUSH
17696: LD_VAR 0 8
17700: ARRAY
17701: PUSH
17702: LD_INT 1
17704: ARRAY
17705: PPUSH
17706: LD_VAR 0 12
17710: PUSH
17711: LD_VAR 0 8
17715: ARRAY
17716: PUSH
17717: LD_INT 2
17719: ARRAY
17720: PPUSH
17721: CALL_OW 428
17725: PUSH
17726: LD_INT 0
17728: GREATER
17729: OR
17730: PUSH
17731: LD_VAR 0 12
17735: PUSH
17736: LD_VAR 0 8
17740: ARRAY
17741: PUSH
17742: LD_INT 1
17744: ARRAY
17745: PPUSH
17746: LD_VAR 0 12
17750: PUSH
17751: LD_VAR 0 8
17755: ARRAY
17756: PUSH
17757: LD_INT 2
17759: ARRAY
17760: PPUSH
17761: CALL_OW 351
17765: OR
17766: IFFALSE 17772
// exit ;
17768: POP
17769: POP
17770: GO 17830
// end ;
17772: GO 17445
17774: POP
17775: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
17776: LD_VAR 0 2
17780: PUSH
17781: LD_INT 29
17783: PUSH
17784: LD_INT 30
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: IN
17791: PUSH
17792: LD_VAR 0 3
17796: PPUSH
17797: LD_VAR 0 4
17801: PPUSH
17802: LD_VAR 0 1
17806: PPUSH
17807: CALL_OW 255
17811: PPUSH
17812: CALL_OW 440
17816: NOT
17817: AND
17818: IFFALSE 17822
// exit ;
17820: GO 17830
// result := true ;
17822: LD_ADDR_VAR 0 7
17826: PUSH
17827: LD_INT 1
17829: ST_TO_ADDR
// end ; end_of_file
17830: LD_VAR 0 7
17834: RET
// every 1 do var i ;
17835: GO 17837
17837: DISABLE
17838: LD_INT 0
17840: PPUSH
// begin Video ( true ) ;
17841: LD_INT 1
17843: PPUSH
17844: CALL 80539 0 1
// CenterOnXY ( 53 , 40 ) ;
17848: LD_INT 53
17850: PPUSH
17851: LD_INT 40
17853: PPUSH
17854: CALL_OW 84
// wait ( 0 0$5 ) ;
17858: LD_INT 175
17860: PPUSH
17861: CALL_OW 67
// if gammaCommander = 1 then
17865: LD_EXP 12
17869: PUSH
17870: LD_INT 1
17872: EQUAL
17873: IFFALSE 17887
// Say ( Donaldson , D1-Don-1 ) ;
17875: LD_EXP 3
17879: PPUSH
17880: LD_STRING D1-Don-1
17882: PPUSH
17883: CALL_OW 88
// if gammaCommander = 2 then
17887: LD_EXP 12
17891: PUSH
17892: LD_INT 2
17894: EQUAL
17895: IFFALSE 17909
// Say ( Brown , D1-Brown-1 ) ;
17897: LD_EXP 2
17901: PPUSH
17902: LD_STRING D1-Brown-1
17904: PPUSH
17905: CALL_OW 88
// if gammaCommander = 3 then
17909: LD_EXP 12
17913: PUSH
17914: LD_INT 3
17916: EQUAL
17917: IFFALSE 17931
// Say ( Houten , D1-VanH-1 ) ;
17919: LD_EXP 13
17923: PPUSH
17924: LD_STRING D1-VanH-1
17926: PPUSH
17927: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
17931: LD_EXP 22
17935: PPUSH
17936: LD_STRING D1-Har-1
17938: PPUSH
17939: CALL_OW 94
// if gammaCommander = 1 then
17943: LD_EXP 12
17947: PUSH
17948: LD_INT 1
17950: EQUAL
17951: IFFALSE 17965
// Say ( Donaldson , D1-Don-2 ) ;
17953: LD_EXP 3
17957: PPUSH
17958: LD_STRING D1-Don-2
17960: PPUSH
17961: CALL_OW 88
// if gammaCommander = 2 then
17965: LD_EXP 12
17969: PUSH
17970: LD_INT 2
17972: EQUAL
17973: IFFALSE 17987
// Say ( Brown , D1-Brown-2 ) ;
17975: LD_EXP 2
17979: PPUSH
17980: LD_STRING D1-Brown-2
17982: PPUSH
17983: CALL_OW 88
// if gammaCommander = 3 then
17987: LD_EXP 12
17991: PUSH
17992: LD_INT 3
17994: EQUAL
17995: IFFALSE 18009
// Say ( Houten , D1-VanH-2 ) ;
17997: LD_EXP 13
18001: PPUSH
18002: LD_STRING D1-VanH-2
18004: PPUSH
18005: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
18009: LD_EXP 22
18013: PPUSH
18014: LD_STRING D1-Har-2
18016: PPUSH
18017: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
18021: LD_INT 22
18023: PUSH
18024: LD_INT 1
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 33
18033: PUSH
18034: LD_INT 2
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 61
18043: PUSH
18044: EMPTY
18045: LIST
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: LIST
18051: PPUSH
18052: CALL_OW 69
18056: IFFALSE 18121
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
18058: LD_ADDR_VAR 0 1
18062: PUSH
18063: LD_INT 22
18065: PUSH
18066: LD_INT 1
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 33
18075: PUSH
18076: LD_INT 2
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 61
18085: PUSH
18086: EMPTY
18087: LIST
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: LIST
18093: PPUSH
18094: CALL_OW 69
18098: PUSH
18099: FOR_IN
18100: IFFALSE 18119
// ComAgressiveMove ( i , 70 , 41 ) ;
18102: LD_VAR 0 1
18106: PPUSH
18107: LD_INT 70
18109: PPUSH
18110: LD_INT 41
18112: PPUSH
18113: CALL_OW 114
18117: GO 18099
18119: POP
18120: POP
// repeat wait ( 0 0$1 ) ;
18121: LD_INT 35
18123: PPUSH
18124: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
18128: LD_ADDR_VAR 0 1
18132: PUSH
18133: LD_INT 22
18135: PUSH
18136: LD_INT 6
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: EMPTY
18144: LIST
18145: PPUSH
18146: CALL_OW 69
18150: PUSH
18151: FOR_IN
18152: IFFALSE 18171
// ComAgressiveMove ( i , 54 , 20 ) ;
18154: LD_VAR 0 1
18158: PPUSH
18159: LD_INT 54
18161: PPUSH
18162: LD_INT 20
18164: PPUSH
18165: CALL_OW 114
18169: GO 18151
18171: POP
18172: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
18173: LD_ADDR_VAR 0 1
18177: PUSH
18178: LD_INT 22
18180: PUSH
18181: LD_INT 1
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 25
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 3
18200: PUSH
18201: LD_INT 54
18203: PUSH
18204: EMPTY
18205: LIST
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL_OW 69
18220: PUSH
18221: FOR_IN
18222: IFFALSE 18256
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
18224: LD_VAR 0 1
18228: PPUSH
18229: LD_INT 70
18231: PPUSH
18232: LD_INT 41
18234: PPUSH
18235: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
18239: LD_VAR 0 1
18243: PPUSH
18244: LD_INT 46
18246: PPUSH
18247: LD_INT 39
18249: PPUSH
18250: CALL_OW 174
// end ;
18254: GO 18221
18256: POP
18257: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
18258: LD_ADDR_VAR 0 1
18262: PUSH
18263: LD_INT 22
18265: PUSH
18266: LD_INT 1
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 21
18275: PUSH
18276: LD_INT 1
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 3
18285: PUSH
18286: LD_INT 24
18288: PUSH
18289: LD_INT 500
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: LIST
18304: PPUSH
18305: CALL_OW 69
18309: PUSH
18310: FOR_IN
18311: IFFALSE 18344
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
18313: LD_VAR 0 1
18317: PPUSH
18318: LD_EXP 37
18322: PPUSH
18323: CALL_OW 250
18327: PPUSH
18328: LD_EXP 37
18332: PPUSH
18333: CALL_OW 251
18337: PPUSH
18338: CALL_OW 111
18342: GO 18310
18344: POP
18345: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
18346: LD_INT 22
18348: PUSH
18349: LD_INT 6
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 21
18358: PUSH
18359: LD_INT 1
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 24
18368: PUSH
18369: LD_INT 250
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: LIST
18380: PPUSH
18381: CALL_OW 69
18385: PUSH
18386: LD_INT 5
18388: LESS
18389: IFFALSE 18121
// Video ( false ) ;
18391: LD_INT 0
18393: PPUSH
18394: CALL 80539 0 1
// ChangeMissionObjectives ( M1 ) ;
18398: LD_STRING M1
18400: PPUSH
18401: CALL_OW 337
// wait ( 0 0$2 ) ;
18405: LD_INT 70
18407: PPUSH
18408: CALL_OW 67
// SaveForQuickRestart ;
18412: CALL_OW 22
// startCutscene = 0 ;
18416: LD_ADDR_EXP 38
18420: PUSH
18421: LD_INT 0
18423: ST_TO_ADDR
// end ;
18424: PPOPN 1
18426: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
18427: LD_EXP 38
18431: IFFALSE 18522
18433: GO 18435
18435: DISABLE
18436: LD_INT 0
18438: PPUSH
18439: PPUSH
// begin enable ;
18440: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
18441: LD_ADDR_VAR 0 1
18445: PUSH
18446: LD_INT 22
18448: PUSH
18449: LD_INT 1
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 21
18458: PUSH
18459: LD_INT 1
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 3
18468: PUSH
18469: LD_INT 24
18471: PUSH
18472: LD_INT 700
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: LIST
18487: PPUSH
18488: CALL_OW 69
18492: ST_TO_ADDR
// for i in tmp do
18493: LD_ADDR_VAR 0 2
18497: PUSH
18498: LD_VAR 0 1
18502: PUSH
18503: FOR_IN
18504: IFFALSE 18520
// SetLives ( i , 700 ) ;
18506: LD_VAR 0 2
18510: PPUSH
18511: LD_INT 700
18513: PPUSH
18514: CALL_OW 234
18518: GO 18503
18520: POP
18521: POP
// end ;
18522: PPOPN 2
18524: END
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 6 ] ] ) = 0 or tick > 3 3$00 do
18525: LD_INT 22
18527: PUSH
18528: LD_INT 1
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 101
18537: PUSH
18538: LD_INT 6
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PPUSH
18549: CALL_OW 69
18553: PUSH
18554: LD_INT 0
18556: EQUAL
18557: PUSH
18558: LD_OWVAR 1
18562: PUSH
18563: LD_INT 6300
18565: GREATER
18566: OR
18567: IFFALSE 18816
18569: GO 18571
18571: DISABLE
// begin PrepareSupportFromDelta ;
18572: CALL 3900 0 0
// firstAttack = 1 ;
18576: LD_ADDR_EXP 33
18580: PUSH
18581: LD_INT 1
18583: ST_TO_ADDR
// if IsOk ( Gladstone ) then
18584: LD_EXP 8
18588: PPUSH
18589: CALL_OW 302
18593: IFFALSE 18609
// Say ( Gladstone , D2-Glad-1 ) else
18595: LD_EXP 8
18599: PPUSH
18600: LD_STRING D2-Glad-1
18602: PPUSH
18603: CALL_OW 88
18607: GO 18717
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
18609: LD_INT 4
18611: PPUSH
18612: LD_INT 22
18614: PUSH
18615: LD_INT 1
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 21
18624: PUSH
18625: LD_INT 1
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 2
18634: PUSH
18635: LD_INT 25
18637: PUSH
18638: LD_INT 1
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 25
18647: PUSH
18648: LD_INT 2
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 25
18657: PUSH
18658: LD_INT 3
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 25
18667: PUSH
18668: LD_INT 4
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: LIST
18686: PPUSH
18687: CALL_OW 70
18691: PUSH
18692: LD_EXP 15
18696: PUSH
18697: LD_EXP 14
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: DIFF
18706: PPUSH
18707: LD_STRING D2-Sol1-1
18709: PPUSH
18710: LD_STRING D2-FSol1-1
18712: PPUSH
18713: CALL 7255 0 3
// if IsOK ( Donaldson ) and gammaCommander = 1 then
18717: LD_EXP 3
18721: PPUSH
18722: CALL_OW 302
18726: PUSH
18727: LD_EXP 12
18731: PUSH
18732: LD_INT 1
18734: EQUAL
18735: AND
18736: IFFALSE 18750
// Say ( Donaldson , D2-Don-1 ) ;
18738: LD_EXP 3
18742: PPUSH
18743: LD_STRING D2-Don-1
18745: PPUSH
18746: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
18750: LD_EXP 2
18754: PPUSH
18755: CALL_OW 302
18759: PUSH
18760: LD_EXP 12
18764: PUSH
18765: LD_INT 2
18767: EQUAL
18768: AND
18769: IFFALSE 18783
// Say ( Brown , D2-Brown-1 ) ;
18771: LD_EXP 2
18775: PPUSH
18776: LD_STRING D2-Brown-1
18778: PPUSH
18779: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
18783: LD_EXP 13
18787: PPUSH
18788: CALL_OW 302
18792: PUSH
18793: LD_EXP 12
18797: PUSH
18798: LD_INT 3
18800: EQUAL
18801: AND
18802: IFFALSE 18816
// Say ( Houten , D2-VanH-1 ) ;
18804: LD_EXP 13
18808: PPUSH
18809: LD_STRING D2-VanH-1
18811: PPUSH
18812: CALL_OW 88
// end ;
18816: END
// every 0 0$1 trigger tick > 3 3$00 do var none ;
18817: LD_OWVAR 1
18821: PUSH
18822: LD_INT 6300
18824: GREATER
18825: IFFALSE 19879
18827: GO 18829
18829: DISABLE
18830: LD_INT 0
18832: PPUSH
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
18833: LD_STRING 07_time
18835: PPUSH
18836: LD_INT 12600
18838: PPUSH
18839: CALL_OW 30
18843: PUSH
18844: LD_INT 3
18846: DIV
18847: PPUSH
18848: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
18852: LD_INT 34
18854: PPUSH
18855: LD_INT 1
18857: PPUSH
18858: CALL_OW 321
18862: PUSH
18863: LD_INT 2
18865: EQUAL
18866: IFFALSE 18875
// SetAchievement ( ACH_HEAVYGUN ) ;
18868: LD_STRING ACH_HEAVYGUN
18870: PPUSH
18871: CALL_OW 543
// PrepareMacmillanSquad ;
18875: CALL 4589 0 0
// CenterNowOnUnits ( JMM ) ;
18879: LD_EXP 1
18883: PPUSH
18884: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
18888: LD_EXP 1
18892: PPUSH
18893: LD_STRING D3-JMM-1
18895: PPUSH
18896: CALL_OW 88
// JMMArrive = 1 ;
18900: LD_ADDR_EXP 39
18904: PUSH
18905: LD_INT 1
18907: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
18908: LD_EXP 3
18912: PPUSH
18913: CALL_OW 302
18917: PUSH
18918: LD_EXP 12
18922: PUSH
18923: LD_INT 1
18925: EQUAL
18926: AND
18927: IFFALSE 18943
// begin Say ( Donaldson , D3-Don-1 ) ;
18929: LD_EXP 3
18933: PPUSH
18934: LD_STRING D3-Don-1
18936: PPUSH
18937: CALL_OW 88
// end else
18941: GO 18995
// begin if gammaCommander = 1 then
18943: LD_EXP 12
18947: PUSH
18948: LD_INT 1
18950: EQUAL
18951: IFFALSE 18995
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
18953: LD_EXP 11
18957: PPUSH
18958: LD_INT 26
18960: PUSH
18961: LD_INT 1
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PPUSH
18968: CALL_OW 72
18972: PPUSH
18973: LD_STRING D3-Sol1-1
18975: PPUSH
18976: LD_STRING D3-Sol1-1
18978: PPUSH
18979: CALL 7255 0 3
// Say ( JMM , D3-JMM-2 ) ;
18983: LD_EXP 1
18987: PPUSH
18988: LD_STRING D3-JMM-2
18990: PPUSH
18991: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
18995: LD_EXP 2
18999: PPUSH
19000: CALL_OW 302
19004: PUSH
19005: LD_EXP 12
19009: PUSH
19010: LD_INT 2
19012: EQUAL
19013: AND
19014: IFFALSE 19030
// begin Say ( Brown , D3-Brown-1 ) ;
19016: LD_EXP 2
19020: PPUSH
19021: LD_STRING D3-Brown-1
19023: PPUSH
19024: CALL_OW 88
// end else
19028: GO 19082
// begin if gammaCommander = 2 then
19030: LD_EXP 12
19034: PUSH
19035: LD_INT 2
19037: EQUAL
19038: IFFALSE 19082
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
19040: LD_EXP 11
19044: PPUSH
19045: LD_INT 26
19047: PUSH
19048: LD_INT 1
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PPUSH
19055: CALL_OW 72
19059: PPUSH
19060: LD_STRING D3-Sol1-1a
19062: PPUSH
19063: LD_STRING D3-Sol1-1a
19065: PPUSH
19066: CALL 7255 0 3
// Say ( JMM , D3-JMM-2 ) ;
19070: LD_EXP 1
19074: PPUSH
19075: LD_STRING D3-JMM-2
19077: PPUSH
19078: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
19082: LD_EXP 13
19086: PPUSH
19087: CALL_OW 302
19091: PUSH
19092: LD_EXP 12
19096: PUSH
19097: LD_INT 3
19099: EQUAL
19100: AND
19101: IFFALSE 19117
// begin Say ( Houten , D3-VanH-1 ) ;
19103: LD_EXP 13
19107: PPUSH
19108: LD_STRING D3-VanH-1
19110: PPUSH
19111: CALL_OW 88
// end else
19115: GO 19169
// begin if gammaCommander = 3 then
19117: LD_EXP 12
19121: PUSH
19122: LD_INT 3
19124: EQUAL
19125: IFFALSE 19169
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
19127: LD_EXP 11
19131: PPUSH
19132: LD_INT 26
19134: PUSH
19135: LD_INT 1
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PPUSH
19142: CALL_OW 72
19146: PPUSH
19147: LD_STRING D3-Sol1-1b
19149: PPUSH
19150: LD_STRING D3-Sol1-1b
19152: PPUSH
19153: CALL 7255 0 3
// Say ( JMM , D3-JMM-2 ) ;
19157: LD_EXP 1
19161: PPUSH
19162: LD_STRING D3-JMM-2
19164: PPUSH
19165: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
19169: LD_EXP 15
19173: PPUSH
19174: CALL_OW 302
19178: IFFALSE 19206
// begin Say ( Joan , D3a-Joan-1 ) ;
19180: LD_EXP 15
19184: PPUSH
19185: LD_STRING D3a-Joan-1
19187: PPUSH
19188: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
19192: LD_EXP 1
19196: PPUSH
19197: LD_STRING D3a-JMM-1
19199: PPUSH
19200: CALL_OW 88
// end else
19204: GO 19548
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
19206: LD_STRING 06_JoanStatus_1
19208: PPUSH
19209: LD_INT 0
19211: PPUSH
19212: CALL_OW 30
19216: PUSH
19217: LD_INT 1
19219: EQUAL
19220: IFFALSE 19548
// begin Say ( JMM , D3b-JMM-1 ) ;
19222: LD_EXP 1
19226: PPUSH
19227: LD_STRING D3b-JMM-1
19229: PPUSH
19230: CALL_OW 88
// if gammaCommander = 1 then
19234: LD_EXP 12
19238: PUSH
19239: LD_INT 1
19241: EQUAL
19242: IFFALSE 19299
// if IsOK ( Donaldson ) then
19244: LD_EXP 3
19248: PPUSH
19249: CALL_OW 302
19253: IFFALSE 19269
// Say ( Donaldson , D3b-Don-1 ) else
19255: LD_EXP 3
19259: PPUSH
19260: LD_STRING D3b-Don-1
19262: PPUSH
19263: CALL_OW 88
19267: GO 19299
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19269: LD_EXP 11
19273: PPUSH
19274: LD_INT 26
19276: PUSH
19277: LD_INT 1
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PPUSH
19284: CALL_OW 72
19288: PPUSH
19289: LD_STRING D3b-Sol1-1
19291: PPUSH
19292: LD_STRING D3b-Sol1-1
19294: PPUSH
19295: CALL 7255 0 3
// if gammaCommander = 2 then
19299: LD_EXP 12
19303: PUSH
19304: LD_INT 2
19306: EQUAL
19307: IFFALSE 19364
// if IsOk ( Brown ) then
19309: LD_EXP 2
19313: PPUSH
19314: CALL_OW 302
19318: IFFALSE 19334
// Say ( Brown , D3b-Brown-1 ) else
19320: LD_EXP 2
19324: PPUSH
19325: LD_STRING D3b-Brown-1
19327: PPUSH
19328: CALL_OW 88
19332: GO 19364
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19334: LD_EXP 11
19338: PPUSH
19339: LD_INT 26
19341: PUSH
19342: LD_INT 1
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PPUSH
19349: CALL_OW 72
19353: PPUSH
19354: LD_STRING D3b-Sol1-1
19356: PPUSH
19357: LD_STRING D3b-Sol1-1
19359: PPUSH
19360: CALL 7255 0 3
// if gammaCommander = 3 then
19364: LD_EXP 12
19368: PUSH
19369: LD_INT 3
19371: EQUAL
19372: IFFALSE 19429
// if IsOk ( Houten ) then
19374: LD_EXP 13
19378: PPUSH
19379: CALL_OW 302
19383: IFFALSE 19399
// Say ( Houten , D3b-VanH-1 ) else
19385: LD_EXP 13
19389: PPUSH
19390: LD_STRING D3b-VanH-1
19392: PPUSH
19393: CALL_OW 88
19397: GO 19429
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19399: LD_EXP 11
19403: PPUSH
19404: LD_INT 26
19406: PUSH
19407: LD_INT 1
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PPUSH
19414: CALL_OW 72
19418: PPUSH
19419: LD_STRING D3b-Sol1-1
19421: PPUSH
19422: LD_STRING D3b-Sol1-1
19424: PPUSH
19425: CALL 7255 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
19429: LD_EXP 11
19433: PPUSH
19434: LD_INT 26
19436: PUSH
19437: LD_INT 1
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PPUSH
19444: CALL_OW 72
19448: PUSH
19449: LD_EXP 12
19453: PUSH
19454: LD_INT 1
19456: EQUAL
19457: PUSH
19458: LD_EXP 3
19462: PPUSH
19463: CALL_OW 302
19467: AND
19468: OR
19469: PUSH
19470: LD_EXP 12
19474: PUSH
19475: LD_INT 2
19477: EQUAL
19478: PUSH
19479: LD_EXP 2
19483: PPUSH
19484: CALL_OW 302
19488: AND
19489: OR
19490: PUSH
19491: LD_EXP 12
19495: PUSH
19496: LD_INT 3
19498: EQUAL
19499: PUSH
19500: LD_EXP 13
19504: PPUSH
19505: CALL_OW 302
19509: AND
19510: OR
19511: IFFALSE 19525
// Say ( JMM , D3b-JMM-2 ) ;
19513: LD_EXP 1
19517: PPUSH
19518: LD_STRING D3b-JMM-2
19520: PPUSH
19521: CALL_OW 88
// if IsOK ( Lisa ) then
19525: LD_EXP 6
19529: PPUSH
19530: CALL_OW 302
19534: IFFALSE 19548
// Say ( Lisa , D3b-Lisa-2 ) ;
19536: LD_EXP 6
19540: PPUSH
19541: LD_STRING D3b-Lisa-2
19543: PPUSH
19544: CALL_OW 88
// end ; end ; none := [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] ^ macmilan_squad ;
19548: LD_ADDR_VAR 0 1
19552: PUSH
19553: LD_EXP 1
19557: PUSH
19558: LD_EXP 2
19562: PUSH
19563: LD_EXP 3
19567: PUSH
19568: LD_EXP 4
19572: PUSH
19573: LD_EXP 5
19577: PUSH
19578: LD_EXP 6
19582: PUSH
19583: LD_EXP 7
19587: PUSH
19588: LD_EXP 8
19592: PUSH
19593: LD_EXP 9
19597: PUSH
19598: LD_EXP 10
19602: PUSH
19603: LD_EXP 15
19607: PUSH
19608: LD_EXP 14
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: PUSH
19627: LD_EXP 42
19631: ADD
19632: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCa-Sol1-1 , DCa-Sol1-1 ) ;
19633: LD_INT 22
19635: PUSH
19636: LD_INT 1
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 21
19645: PUSH
19646: LD_INT 1
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 26
19655: PUSH
19656: LD_INT 1
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 2
19665: PUSH
19666: LD_INT 25
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 25
19678: PUSH
19679: LD_INT 2
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 25
19688: PUSH
19689: LD_INT 3
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 25
19698: PUSH
19699: LD_INT 4
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: PPUSH
19719: CALL_OW 69
19723: PUSH
19724: LD_VAR 0 1
19728: DIFF
19729: PPUSH
19730: LD_STRING DCa-Sol1-1
19732: PPUSH
19733: LD_STRING DCa-Sol1-1
19735: PPUSH
19736: CALL 7255 0 3
// Say ( JMM , DCb-JMM-1 ) ;
19740: LD_EXP 1
19744: PPUSH
19745: LD_STRING DCb-JMM-1
19747: PPUSH
19748: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCb-Sol1-1 , DCb-Sol1-1 ) ;
19752: LD_INT 22
19754: PUSH
19755: LD_INT 1
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 21
19764: PUSH
19765: LD_INT 1
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 26
19774: PUSH
19775: LD_INT 1
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 2
19784: PUSH
19785: LD_INT 25
19787: PUSH
19788: LD_INT 1
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 25
19797: PUSH
19798: LD_INT 2
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 25
19807: PUSH
19808: LD_INT 3
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 25
19817: PUSH
19818: LD_INT 4
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: PPUSH
19838: CALL_OW 69
19842: PUSH
19843: LD_VAR 0 1
19847: DIFF
19848: PPUSH
19849: LD_STRING DCb-Sol1-1
19851: PPUSH
19852: LD_STRING DCb-Sol1-1
19854: PPUSH
19855: CALL 7255 0 3
// Say ( JMM , DCb-JMM-2 ) ;
19859: LD_EXP 1
19863: PPUSH
19864: LD_STRING DCb-JMM-2
19866: PPUSH
19867: CALL_OW 88
// secondAttack = 1 ;
19871: LD_ADDR_EXP 34
19875: PUSH
19876: LD_INT 1
19878: ST_TO_ADDR
// end ;
19879: PPOPN 1
19881: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 18 18$00 do
19882: LD_EXP 39
19886: PUSH
19887: LD_INT 1
19889: EQUAL
19890: PUSH
19891: LD_OWVAR 1
19895: PUSH
19896: LD_INT 37800
19898: GREATEREQUAL
19899: AND
19900: IFFALSE 19973
19902: GO 19904
19904: DISABLE
// begin DialogueOn ;
19905: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
19909: LD_EXP 23
19913: PPUSH
19914: LD_STRING D4-Pow-1
19916: PPUSH
19917: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
19921: LD_EXP 1
19925: PPUSH
19926: LD_STRING D4-JMM-1
19928: PPUSH
19929: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
19933: LD_EXP 23
19937: PPUSH
19938: LD_STRING D4-Pow-2
19940: PPUSH
19941: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
19945: LD_EXP 1
19949: PPUSH
19950: LD_STRING D4-JMM-2
19952: PPUSH
19953: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
19957: LD_EXP 23
19961: PPUSH
19962: LD_STRING D4-Pow-3
19964: PPUSH
19965: CALL_OW 94
// DialogueOff ;
19969: CALL_OW 7
// end ;
19973: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 24 24$00 do
19974: LD_EXP 39
19978: PUSH
19979: LD_INT 1
19981: EQUAL
19982: PUSH
19983: LD_OWVAR 1
19987: PUSH
19988: LD_INT 50400
19990: GREATEREQUAL
19991: AND
19992: IFFALSE 20017
19994: GO 19996
19996: DISABLE
// begin DialogueOn ;
19997: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
20001: LD_EXP 23
20005: PPUSH
20006: LD_STRING D4a-Pow-1
20008: PPUSH
20009: CALL_OW 94
// DialogueOff ;
20013: CALL_OW 7
// end ;
20017: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 35 35$00 do
20018: LD_EXP 39
20022: PUSH
20023: LD_INT 1
20025: EQUAL
20026: PUSH
20027: LD_OWVAR 1
20031: PUSH
20032: LD_INT 73500
20034: GREATEREQUAL
20035: AND
20036: IFFALSE 20057
20038: GO 20040
20040: DISABLE
// begin PrepareSikorsky ;
20041: CALL 5780 0 0
// SikorskyArrive = 1 ;
20045: LD_ADDR_EXP 18
20049: PUSH
20050: LD_INT 1
20052: ST_TO_ADDR
// PrepareSikorskyArmy ;
20053: CALL 5956 0 0
// end ;
20057: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
20058: LD_EXP 17
20062: PPUSH
20063: LD_INT 5
20065: PPUSH
20066: CALL_OW 308
20070: IFFALSE 20262
20072: GO 20074
20074: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
20075: LD_EXP 17
20079: PPUSH
20080: CALL_OW 87
// DialogueOn ;
20084: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
20088: LD_EXP 16
20092: PPUSH
20093: LD_STRING D5-Sik-1
20095: PPUSH
20096: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
20100: LD_EXP 1
20104: PPUSH
20105: LD_STRING D5-JMM-1a
20107: PPUSH
20108: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
20112: LD_EXP 16
20116: PPUSH
20117: LD_STRING D5-Sik-2
20119: PPUSH
20120: CALL_OW 88
// case query ( QSikorski ) of 1 :
20124: LD_STRING QSikorski
20126: PPUSH
20127: CALL_OW 97
20131: PUSH
20132: LD_INT 1
20134: DOUBLE
20135: EQUAL
20136: IFTRUE 20140
20138: GO 20163
20140: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
20141: LD_EXP 16
20145: PPUSH
20146: LD_STRING D5a-Sik-1
20148: PPUSH
20149: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
20153: LD_ADDR_EXP 19
20157: PUSH
20158: LD_INT 2100
20160: ST_TO_ADDR
// end ; 2 :
20161: GO 20250
20163: LD_INT 2
20165: DOUBLE
20166: EQUAL
20167: IFTRUE 20171
20169: GO 20194
20171: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
20172: LD_EXP 16
20176: PPUSH
20177: LD_STRING D5b-Sik-1
20179: PPUSH
20180: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20184: LD_ADDR_EXP 19
20188: PUSH
20189: LD_INT 10500
20191: ST_TO_ADDR
// end ; 3 :
20192: GO 20250
20194: LD_INT 3
20196: DOUBLE
20197: EQUAL
20198: IFTRUE 20202
20200: GO 20249
20202: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
20203: LD_EXP 16
20207: PPUSH
20208: LD_STRING D5c-Sik-1
20210: PPUSH
20211: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
20215: LD_EXP 1
20219: PPUSH
20220: LD_STRING D5c-JMM-1
20222: PPUSH
20223: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
20227: LD_EXP 16
20231: PPUSH
20232: LD_STRING D5c-Sik-2
20234: PPUSH
20235: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20239: LD_ADDR_EXP 19
20243: PUSH
20244: LD_INT 10500
20246: ST_TO_ADDR
// end ; end ;
20247: GO 20250
20249: POP
// DialogueOff ;
20250: CALL_OW 7
// timerStatus = 1 ;
20254: LD_ADDR_EXP 35
20258: PUSH
20259: LD_INT 1
20261: ST_TO_ADDR
// end ;
20262: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
20263: LD_EXP 19
20267: PUSH
20268: LD_INT 35
20270: LESS
20271: IFFALSE 20319
20273: GO 20275
20275: DISABLE
// begin timerStatus = 0 ;
20276: LD_ADDR_EXP 35
20280: PUSH
20281: LD_INT 0
20283: ST_TO_ADDR
// DialogueOn ;
20284: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
20288: LD_EXP 16
20292: PPUSH
20293: LD_STRING D6-Sik-1
20295: PPUSH
20296: CALL_OW 88
// DialogueOff ;
20300: CALL_OW 7
// SikorskyAI = 1 ;
20304: LD_ADDR_EXP 20
20308: PUSH
20309: LD_INT 1
20311: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
20312: LD_STRING M2
20314: PPUSH
20315: CALL_OW 337
// end ;
20319: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
20320: LD_EXP 17
20324: PPUSH
20325: LD_INT 18
20327: PPUSH
20328: CALL_OW 308
20332: IFFALSE 20442
20334: GO 20336
20336: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
20337: LD_EXP 16
20341: PPUSH
20342: LD_STRING D7-Sik-1
20344: PPUSH
20345: CALL_OW 88
// wait ( 0 0$10 ) ;
20349: LD_INT 350
20351: PPUSH
20352: CALL_OW 67
// if IsInArea ( JMM , RussianBaseTerritory ) or ( GetDriverVehicle ( JMM ) and IsInArea ( GetDriverVehicle ( JMM ) , RussianBaseTerritory ) ) then
20356: LD_EXP 1
20360: PPUSH
20361: LD_INT 24
20363: PPUSH
20364: CALL_OW 308
20368: PUSH
20369: LD_EXP 1
20373: PPUSH
20374: CALL 16985 0 1
20378: PUSH
20379: LD_EXP 1
20383: PPUSH
20384: CALL 16985 0 1
20388: PPUSH
20389: LD_INT 24
20391: PPUSH
20392: CALL_OW 308
20396: AND
20397: OR
20398: IFFALSE 20422
// begin Say ( Sikorski , D7a-Sik-1 ) ;
20400: LD_EXP 16
20404: PPUSH
20405: LD_STRING D7a-Sik-1
20407: PPUSH
20408: CALL_OW 88
// SikorskyStatus = 1 ;
20412: LD_ADDR_EXP 21
20416: PUSH
20417: LD_INT 1
20419: ST_TO_ADDR
// end else
20420: GO 20442
// begin Say ( Sikorski , D7b-Sik-1 ) ;
20422: LD_EXP 16
20426: PPUSH
20427: LD_STRING D7b-Sik-1
20429: PPUSH
20430: CALL_OW 88
// SikorskyStatus = 2 ;
20434: LD_ADDR_EXP 21
20438: PUSH
20439: LD_INT 2
20441: ST_TO_ADDR
// end ; end ; end_of_file
20442: END
// on BuildingComplete ( building ) do var tmp , un ;
20443: LD_INT 0
20445: PPUSH
20446: PPUSH
// begin if GetSide ( building ) = 3 then
20447: LD_VAR 0 1
20451: PPUSH
20452: CALL_OW 255
20456: PUSH
20457: LD_INT 3
20459: EQUAL
20460: IFFALSE 20997
// begin if GetBType ( building ) = b_depot then
20462: LD_VAR 0 1
20466: PPUSH
20467: CALL_OW 266
20471: PUSH
20472: LD_INT 0
20474: EQUAL
20475: IFFALSE 20543
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
20477: LD_VAR 0 1
20481: PPUSH
20482: CALL_OW 274
20486: PPUSH
20487: LD_INT 1
20489: PPUSH
20490: LD_INT 5000
20492: PPUSH
20493: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
20497: LD_VAR 0 1
20501: PPUSH
20502: CALL_OW 274
20506: PPUSH
20507: LD_INT 2
20509: PPUSH
20510: LD_INT 5000
20512: PPUSH
20513: CALL_OW 277
// SetBName ( building , konev ) ;
20517: LD_VAR 0 1
20521: PPUSH
20522: LD_STRING konev
20524: PPUSH
20525: CALL_OW 500
// ruDepot = building ;
20529: LD_ADDR_EXP 28
20533: PUSH
20534: LD_VAR 0 1
20538: ST_TO_ADDR
// BuildRussianBase ;
20539: CALL 7866 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
20543: LD_VAR 0 1
20547: PPUSH
20548: CALL_OW 266
20552: PUSH
20553: LD_INT 0
20555: EQUAL
20556: PUSH
20557: LD_VAR 0 1
20561: PPUSH
20562: CALL_OW 266
20566: PUSH
20567: LD_INT 2
20569: EQUAL
20570: OR
20571: PUSH
20572: LD_VAR 0 1
20576: PPUSH
20577: CALL_OW 266
20581: PUSH
20582: LD_INT 4
20584: EQUAL
20585: OR
20586: IFFALSE 20597
// ComUpgrade ( building ) ;
20588: LD_VAR 0 1
20592: PPUSH
20593: CALL_OW 146
// if GetBType ( building ) = b_lab then
20597: LD_VAR 0 1
20601: PPUSH
20602: CALL_OW 266
20606: PUSH
20607: LD_INT 6
20609: EQUAL
20610: IFFALSE 20661
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20612: LD_VAR 0 1
20616: PPUSH
20617: LD_INT 10
20619: PPUSH
20620: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
20624: LD_VAR 0 1
20628: PPUSH
20629: LD_INT 12
20631: PPUSH
20632: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
20636: LD_INT 3
20638: PPUSH
20639: LD_VAR 0 1
20643: PPUSH
20644: LD_INT 3
20646: PPUSH
20647: CALL 8410 0 3
// ruLab = building ;
20651: LD_ADDR_EXP 29
20655: PUSH
20656: LD_VAR 0 1
20660: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
20661: LD_VAR 0 1
20665: PPUSH
20666: CALL_OW 266
20670: PUSH
20671: LD_INT 32
20673: EQUAL
20674: IFFALSE 20792
// begin uc_side = 3 ;
20676: LD_ADDR_OWVAR 20
20680: PUSH
20681: LD_INT 3
20683: ST_TO_ADDR
// uc_nation = 3 ;
20684: LD_ADDR_OWVAR 21
20688: PUSH
20689: LD_INT 3
20691: ST_TO_ADDR
// hc_gallery =  ;
20692: LD_ADDR_OWVAR 33
20696: PUSH
20697: LD_STRING 
20699: ST_TO_ADDR
// hc_name =  ;
20700: LD_ADDR_OWVAR 26
20704: PUSH
20705: LD_STRING 
20707: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
20708: LD_INT 0
20710: PPUSH
20711: LD_INT 1
20713: PPUSH
20714: LD_EXP 25
20718: PPUSH
20719: LD_EXP 26
20723: PPUSH
20724: CALL_OW 12
20728: PPUSH
20729: CALL_OW 380
// un = CreateHuman ;
20733: LD_ADDR_VAR 0 3
20737: PUSH
20738: CALL_OW 44
20742: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
20743: LD_VAR 0 3
20747: PPUSH
20748: LD_VAR 0 1
20752: PPUSH
20753: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20757: LD_VAR 0 1
20761: PPUSH
20762: LD_INT 43
20764: PUSH
20765: LD_INT 44
20767: PUSH
20768: LD_INT 46
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 1
20778: PPUSH
20779: LD_INT 3
20781: PPUSH
20782: CALL_OW 12
20786: ARRAY
20787: PPUSH
20788: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
20792: LD_VAR 0 1
20796: PPUSH
20797: CALL_OW 266
20801: PUSH
20802: LD_INT 33
20804: EQUAL
20805: IFFALSE 20842
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20807: LD_VAR 0 1
20811: PPUSH
20812: LD_INT 43
20814: PUSH
20815: LD_INT 44
20817: PUSH
20818: LD_INT 46
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 1
20828: PPUSH
20829: LD_INT 3
20831: PPUSH
20832: CALL_OW 12
20836: ARRAY
20837: PPUSH
20838: CALL_OW 208
// if GetBType ( building ) = b_bunker then
20842: LD_VAR 0 1
20846: PPUSH
20847: CALL_OW 266
20851: PUSH
20852: LD_INT 32
20854: EQUAL
20855: IFFALSE 20892
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20857: LD_VAR 0 1
20861: PPUSH
20862: LD_INT 43
20864: PUSH
20865: LD_INT 44
20867: PUSH
20868: LD_INT 46
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 1
20878: PPUSH
20879: LD_INT 3
20881: PPUSH
20882: CALL_OW 12
20886: ARRAY
20887: PPUSH
20888: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
20892: LD_VAR 0 1
20896: PPUSH
20897: CALL_OW 266
20901: PUSH
20902: LD_INT 24
20904: EQUAL
20905: IFFALSE 20915
// russianAI = 1 ;
20907: LD_ADDR_EXP 27
20911: PUSH
20912: LD_INT 1
20914: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
20915: LD_EXP 31
20919: PUSH
20920: LD_INT 0
20922: GREATER
20923: IFFALSE 20997
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20925: LD_ADDR_EXP 31
20929: PUSH
20930: LD_EXP 31
20934: PPUSH
20935: LD_INT 1
20937: PPUSH
20938: CALL_OW 3
20942: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20943: LD_ADDR_EXP 31
20947: PUSH
20948: LD_EXP 31
20952: PPUSH
20953: LD_INT 1
20955: PPUSH
20956: CALL_OW 3
20960: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20961: LD_ADDR_EXP 31
20965: PUSH
20966: LD_EXP 31
20970: PPUSH
20971: LD_INT 1
20973: PPUSH
20974: CALL_OW 3
20978: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20979: LD_ADDR_EXP 31
20983: PUSH
20984: LD_EXP 31
20988: PPUSH
20989: LD_INT 1
20991: PPUSH
20992: CALL_OW 3
20996: ST_TO_ADDR
// end ; end ; end ;
20997: PPOPN 3
20999: END
// on UpgradeComplete ( building ) do var i ;
21000: LD_INT 0
21002: PPUSH
// begin if GetSide ( building ) = 3 then
21003: LD_VAR 0 1
21007: PPUSH
21008: CALL_OW 255
21012: PUSH
21013: LD_INT 3
21015: EQUAL
21016: IFFALSE 21197
// begin if GetBType ( building ) = b_factory then
21018: LD_VAR 0 1
21022: PPUSH
21023: CALL_OW 266
21027: PUSH
21028: LD_INT 3
21030: EQUAL
21031: IFFALSE 21098
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
21033: LD_ADDR_VAR 0 2
21037: PUSH
21038: LD_INT 22
21040: PUSH
21041: LD_INT 3
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 25
21050: PUSH
21051: LD_INT 3
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PPUSH
21062: CALL_OW 69
21066: PUSH
21067: FOR_IN
21068: IFFALSE 21086
// ComEnterUnit ( i , building ) ;
21070: LD_VAR 0 2
21074: PPUSH
21075: LD_VAR 0 1
21079: PPUSH
21080: CALL_OW 120
21084: GO 21067
21086: POP
21087: POP
// ruFab = building ;
21088: LD_ADDR_EXP 30
21092: PUSH
21093: LD_VAR 0 1
21097: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
21098: LD_VAR 0 1
21102: PPUSH
21103: CALL_OW 266
21107: PUSH
21108: LD_INT 8
21110: EQUAL
21111: IFFALSE 21168
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21113: LD_ADDR_VAR 0 2
21117: PUSH
21118: LD_INT 22
21120: PUSH
21121: LD_INT 3
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 25
21130: PUSH
21131: LD_INT 4
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PPUSH
21142: CALL_OW 69
21146: PUSH
21147: FOR_IN
21148: IFFALSE 21166
// ComEnterUnit ( i , building ) ;
21150: LD_VAR 0 2
21154: PPUSH
21155: LD_VAR 0 1
21159: PPUSH
21160: CALL_OW 120
21164: GO 21147
21166: POP
21167: POP
// if GetBType ( building ) = b_warehouse then
21168: LD_VAR 0 1
21172: PPUSH
21173: CALL_OW 266
21177: PUSH
21178: LD_INT 1
21180: EQUAL
21181: IFFALSE 21197
// begin ComEnterUnit ( Borodin , building ) ;
21183: LD_EXP 24
21187: PPUSH
21188: LD_VAR 0 1
21192: PPUSH
21193: CALL_OW 120
// end ; end ; end ;
21197: PPOPN 2
21199: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
21200: LD_VAR 0 1
21204: PPUSH
21205: CALL_OW 247
21209: PUSH
21210: LD_INT 2
21212: EQUAL
21213: PUSH
21214: LD_VAR 0 1
21218: PPUSH
21219: CALL_OW 263
21223: PUSH
21224: LD_INT 3
21226: EQUAL
21227: AND
21228: PUSH
21229: LD_EXP 41
21233: PUSH
21234: LD_INT 0
21236: EQUAL
21237: AND
21238: IFFALSE 21356
// begin varEvent1 = 1 ;
21240: LD_ADDR_EXP 41
21244: PUSH
21245: LD_INT 1
21247: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
21248: LD_VAR 0 1
21252: PPUSH
21253: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
21257: LD_INT 22
21259: PUSH
21260: LD_INT 1
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 21
21269: PUSH
21270: LD_INT 1
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PUSH
21277: LD_INT 2
21279: PUSH
21280: LD_INT 25
21282: PUSH
21283: LD_INT 1
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 25
21292: PUSH
21293: LD_INT 2
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 25
21302: PUSH
21303: LD_INT 3
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 25
21312: PUSH
21313: LD_INT 4
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: LIST
21331: PPUSH
21332: CALL_OW 69
21336: PUSH
21337: LD_EXP 1
21341: PUSH
21342: EMPTY
21343: LIST
21344: DIFF
21345: PPUSH
21346: LD_STRING DC-Sol1-1
21348: PPUSH
21349: LD_STRING DC-FSol1-1
21351: PPUSH
21352: CALL 7255 0 3
// end ; end ;
21356: PPOPN 1
21358: END
// on UnitDestroyed ( unit ) do var i ;
21359: LD_INT 0
21361: PPUSH
// begin if unit = Joan then
21362: LD_VAR 0 1
21366: PUSH
21367: LD_EXP 15
21371: EQUAL
21372: IFFALSE 21381
// DeleteCharacters ( Joan ) ;
21374: LD_STRING Joan
21376: PPUSH
21377: CALL_OW 40
// if GetSide ( unit ) = 3 then
21381: LD_VAR 0 1
21385: PPUSH
21386: CALL_OW 255
21390: PUSH
21391: LD_INT 3
21393: EQUAL
21394: IFFALSE 22164
// begin if GetType ( unit ) = unit_building then
21396: LD_VAR 0 1
21400: PPUSH
21401: CALL_OW 247
21405: PUSH
21406: LD_INT 3
21408: EQUAL
21409: IFFALSE 22101
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
21411: LD_VAR 0 1
21415: PPUSH
21416: CALL_OW 266
21420: PUSH
21421: LD_INT 31
21423: EQUAL
21424: PUSH
21425: LD_VAR 0 1
21429: PPUSH
21430: CALL_OW 266
21434: PUSH
21435: LD_INT 32
21437: EQUAL
21438: OR
21439: PUSH
21440: LD_VAR 0 1
21444: PPUSH
21445: CALL_OW 266
21449: PUSH
21450: LD_INT 36
21452: EQUAL
21453: OR
21454: PUSH
21455: LD_VAR 0 1
21459: PPUSH
21460: CALL_OW 266
21464: PUSH
21465: LD_INT 0
21467: EQUAL
21468: OR
21469: PUSH
21470: LD_VAR 0 1
21474: PPUSH
21475: CALL_OW 266
21479: PUSH
21480: LD_INT 24
21482: EQUAL
21483: OR
21484: PUSH
21485: LD_VAR 0 1
21489: PPUSH
21490: CALL_OW 266
21494: PUSH
21495: LD_INT 17
21497: EQUAL
21498: OR
21499: PUSH
21500: LD_VAR 0 1
21504: PPUSH
21505: CALL_OW 266
21509: PUSH
21510: LD_INT 25
21512: EQUAL
21513: OR
21514: PUSH
21515: LD_VAR 0 1
21519: PPUSH
21520: CALL_OW 266
21524: PUSH
21525: LD_INT 19
21527: EQUAL
21528: OR
21529: PUSH
21530: LD_VAR 0 1
21534: PPUSH
21535: CALL_OW 266
21539: PUSH
21540: LD_INT 20
21542: EQUAL
21543: OR
21544: PUSH
21545: LD_VAR 0 1
21549: PPUSH
21550: CALL_OW 266
21554: PUSH
21555: LD_INT 18
21557: EQUAL
21558: OR
21559: PUSH
21560: LD_VAR 0 1
21564: PPUSH
21565: CALL_OW 266
21569: PUSH
21570: LD_INT 21
21572: EQUAL
21573: OR
21574: PUSH
21575: LD_VAR 0 1
21579: PPUSH
21580: CALL_OW 266
21584: PUSH
21585: LD_INT 23
21587: EQUAL
21588: OR
21589: PUSH
21590: LD_VAR 0 1
21594: PPUSH
21595: CALL_OW 266
21599: PUSH
21600: LD_INT 16
21602: EQUAL
21603: OR
21604: PUSH
21605: LD_VAR 0 1
21609: PPUSH
21610: CALL_OW 266
21614: PUSH
21615: LD_INT 6
21617: EQUAL
21618: OR
21619: PUSH
21620: LD_VAR 0 1
21624: PPUSH
21625: CALL_OW 266
21629: PUSH
21630: LD_INT 29
21632: EQUAL
21633: OR
21634: PUSH
21635: LD_VAR 0 1
21639: PPUSH
21640: CALL_OW 266
21644: PUSH
21645: LD_INT 26
21647: EQUAL
21648: OR
21649: PUSH
21650: LD_VAR 0 1
21654: PPUSH
21655: CALL_OW 266
21659: PUSH
21660: LD_INT 30
21662: EQUAL
21663: OR
21664: PUSH
21665: LD_VAR 0 1
21669: PPUSH
21670: CALL_OW 266
21674: PUSH
21675: LD_INT 28
21677: EQUAL
21678: OR
21679: PUSH
21680: LD_VAR 0 1
21684: PPUSH
21685: CALL_OW 266
21689: PUSH
21690: LD_INT 27
21692: EQUAL
21693: OR
21694: PUSH
21695: LD_VAR 0 1
21699: PPUSH
21700: CALL_OW 266
21704: PUSH
21705: LD_INT 33
21707: EQUAL
21708: OR
21709: PUSH
21710: LD_VAR 0 1
21714: PPUSH
21715: CALL_OW 266
21719: PUSH
21720: LD_INT 2
21722: EQUAL
21723: OR
21724: PUSH
21725: LD_VAR 0 1
21729: PPUSH
21730: CALL_OW 266
21734: PUSH
21735: LD_INT 4
21737: EQUAL
21738: OR
21739: IFFALSE 21825
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
21741: LD_ADDR_EXP 31
21745: PUSH
21746: LD_EXP 31
21750: PUSH
21751: LD_VAR 0 1
21755: PPUSH
21756: CALL_OW 266
21760: ADD
21761: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21762: LD_ADDR_EXP 31
21766: PUSH
21767: LD_EXP 31
21771: PUSH
21772: LD_VAR 0 1
21776: PPUSH
21777: CALL_OW 250
21781: ADD
21782: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21783: LD_ADDR_EXP 31
21787: PUSH
21788: LD_EXP 31
21792: PUSH
21793: LD_VAR 0 1
21797: PPUSH
21798: CALL_OW 251
21802: ADD
21803: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21804: LD_ADDR_EXP 31
21808: PUSH
21809: LD_EXP 31
21813: PUSH
21814: LD_VAR 0 1
21818: PPUSH
21819: CALL_OW 254
21823: ADD
21824: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
21825: LD_VAR 0 1
21829: PPUSH
21830: CALL_OW 266
21834: PUSH
21835: LD_INT 1
21837: EQUAL
21838: IFFALSE 21917
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
21840: LD_ADDR_EXP 31
21844: PUSH
21845: LD_EXP 31
21849: PUSH
21850: LD_INT 0
21852: ADD
21853: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21854: LD_ADDR_EXP 31
21858: PUSH
21859: LD_EXP 31
21863: PUSH
21864: LD_VAR 0 1
21868: PPUSH
21869: CALL_OW 250
21873: ADD
21874: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21875: LD_ADDR_EXP 31
21879: PUSH
21880: LD_EXP 31
21884: PUSH
21885: LD_VAR 0 1
21889: PPUSH
21890: CALL_OW 251
21894: ADD
21895: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21896: LD_ADDR_EXP 31
21900: PUSH
21901: LD_EXP 31
21905: PUSH
21906: LD_VAR 0 1
21910: PPUSH
21911: CALL_OW 254
21915: ADD
21916: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
21917: LD_VAR 0 1
21921: PPUSH
21922: CALL_OW 266
21926: PUSH
21927: LD_INT 3
21929: EQUAL
21930: IFFALSE 22009
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
21932: LD_ADDR_EXP 31
21936: PUSH
21937: LD_EXP 31
21941: PUSH
21942: LD_INT 2
21944: ADD
21945: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21946: LD_ADDR_EXP 31
21950: PUSH
21951: LD_EXP 31
21955: PUSH
21956: LD_VAR 0 1
21960: PPUSH
21961: CALL_OW 250
21965: ADD
21966: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21967: LD_ADDR_EXP 31
21971: PUSH
21972: LD_EXP 31
21976: PUSH
21977: LD_VAR 0 1
21981: PPUSH
21982: CALL_OW 251
21986: ADD
21987: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21988: LD_ADDR_EXP 31
21992: PUSH
21993: LD_EXP 31
21997: PUSH
21998: LD_VAR 0 1
22002: PPUSH
22003: CALL_OW 254
22007: ADD
22008: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
22009: LD_VAR 0 1
22013: PPUSH
22014: CALL_OW 266
22018: PUSH
22019: LD_INT 5
22021: EQUAL
22022: IFFALSE 22101
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
22024: LD_ADDR_EXP 31
22028: PUSH
22029: LD_EXP 31
22033: PUSH
22034: LD_INT 4
22036: ADD
22037: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22038: LD_ADDR_EXP 31
22042: PUSH
22043: LD_EXP 31
22047: PUSH
22048: LD_VAR 0 1
22052: PPUSH
22053: CALL_OW 250
22057: ADD
22058: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22059: LD_ADDR_EXP 31
22063: PUSH
22064: LD_EXP 31
22068: PUSH
22069: LD_VAR 0 1
22073: PPUSH
22074: CALL_OW 251
22078: ADD
22079: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22080: LD_ADDR_EXP 31
22084: PUSH
22085: LD_EXP 31
22089: PUSH
22090: LD_VAR 0 1
22094: PPUSH
22095: CALL_OW 254
22099: ADD
22100: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
22101: LD_VAR 0 1
22105: PPUSH
22106: CALL_OW 247
22110: PUSH
22111: LD_INT 1
22113: EQUAL
22114: IFFALSE 22164
// begin for i in defenders_list do
22116: LD_ADDR_VAR 0 2
22120: PUSH
22121: LD_EXP 32
22125: PUSH
22126: FOR_IN
22127: IFFALSE 22162
// if i = unit then
22129: LD_VAR 0 2
22133: PUSH
22134: LD_VAR 0 1
22138: EQUAL
22139: IFFALSE 22160
// defenders_list = defenders_list diff [ unit ] ;
22141: LD_ADDR_EXP 32
22145: PUSH
22146: LD_EXP 32
22150: PUSH
22151: LD_VAR 0 1
22155: PUSH
22156: EMPTY
22157: LIST
22158: DIFF
22159: ST_TO_ADDR
22160: GO 22126
22162: POP
22163: POP
// end ; end ; end ;
22164: PPOPN 2
22166: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
22167: LD_VAR 0 1
22171: PPUSH
22172: CALL 40336 0 1
// end ; end_of_file
22176: PPOPN 1
22178: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
22179: GO 22181
22181: DISABLE
22182: LD_INT 0
22184: PPUSH
// begin enemyWayX = [ ] ;
22185: LD_ADDR_EXP 46
22189: PUSH
22190: EMPTY
22191: ST_TO_ADDR
// enemyWayY = [ ] ;
22192: LD_ADDR_EXP 47
22196: PUSH
22197: EMPTY
22198: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
22199: LD_ADDR_VAR 0 1
22203: PUSH
22204: LD_INT 1
22206: PPUSH
22207: LD_INT 3
22209: PPUSH
22210: CALL_OW 12
22214: ST_TO_ADDR
// if rnd = 1 then
22215: LD_VAR 0 1
22219: PUSH
22220: LD_INT 1
22222: EQUAL
22223: IFFALSE 22263
// begin enemyWayX = [ 73 , 46 , 29 ] ;
22225: LD_ADDR_EXP 46
22229: PUSH
22230: LD_INT 73
22232: PUSH
22233: LD_INT 46
22235: PUSH
22236: LD_INT 29
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: LIST
22243: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
22244: LD_ADDR_EXP 47
22248: PUSH
22249: LD_INT 71
22251: PUSH
22252: LD_INT 43
22254: PUSH
22255: LD_INT 29
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: LIST
22262: ST_TO_ADDR
// end ; if rnd = 2 then
22263: LD_VAR 0 1
22267: PUSH
22268: LD_INT 2
22270: EQUAL
22271: IFFALSE 22295
// begin enemyWayX = [ 64 ] ;
22273: LD_ADDR_EXP 46
22277: PUSH
22278: LD_INT 64
22280: PUSH
22281: EMPTY
22282: LIST
22283: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
22284: LD_ADDR_EXP 47
22288: PUSH
22289: LD_INT 43
22291: PUSH
22292: EMPTY
22293: LIST
22294: ST_TO_ADDR
// end ; if rnd = 3 then
22295: LD_VAR 0 1
22299: PUSH
22300: LD_INT 3
22302: EQUAL
22303: IFFALSE 22327
// begin enemyWayX = [ 80 ] ;
22305: LD_ADDR_EXP 46
22309: PUSH
22310: LD_INT 80
22312: PUSH
22313: EMPTY
22314: LIST
22315: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
22316: LD_ADDR_EXP 47
22320: PUSH
22321: LD_INT 28
22323: PUSH
22324: EMPTY
22325: LIST
22326: ST_TO_ADDR
// end ; enable ;
22327: ENABLE
// end ;
22328: PPOPN 1
22330: END
// every 0 0$1 do
22331: GO 22333
22333: DISABLE
// begin enable ;
22334: ENABLE
// if escapeAvalaible = 0 then
22335: LD_EXP 36
22339: PUSH
22340: LD_INT 0
22342: EQUAL
22343: IFFALSE 22355
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
22345: LD_INT 3
22347: PPUSH
22348: LD_INT 6
22350: PPUSH
22351: CALL 8651 0 2
// if escapeAvalaible = 0 then
22355: LD_EXP 36
22359: PUSH
22360: LD_INT 0
22362: EQUAL
22363: IFFALSE 22375
// DefenseBase ( 1 , RussianBaseTerritory ) ;
22365: LD_INT 1
22367: PPUSH
22368: LD_INT 24
22370: PPUSH
22371: CALL 9311 0 2
// if russianAI = 1 then
22375: LD_EXP 27
22379: PUSH
22380: LD_INT 1
22382: EQUAL
22383: IFFALSE 22453
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
22385: LD_INT 3
22387: PPUSH
22388: LD_INT 7
22390: PPUSH
22391: LD_INT 6
22393: PPUSH
22394: LD_EXP 29
22398: PPUSH
22399: CALL 11749 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
22403: LD_INT 3
22405: PPUSH
22406: LD_EXP 28
22410: PPUSH
22411: LD_INT 6
22413: PPUSH
22414: LD_EXP 31
22418: PPUSH
22419: CALL 11343 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
22423: LD_INT 3
22425: PPUSH
22426: LD_INT 26
22428: PPUSH
22429: LD_EXP 46
22433: PPUSH
22434: LD_EXP 47
22438: PPUSH
22439: CALL 10211 0 4
// AttackNearBuildings ( 3 , 1 ) ;
22443: LD_INT 3
22445: PPUSH
22446: LD_INT 1
22448: PPUSH
22449: CALL 12293 0 2
// end ; if SikorskyArrive = 1 then
22453: LD_EXP 18
22457: PUSH
22458: LD_INT 1
22460: EQUAL
22461: IFFALSE 22479
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
22463: LD_INT 3
22465: PPUSH
22466: LD_INT 10
22468: PPUSH
22469: LD_INT 53
22471: PPUSH
22472: LD_INT 59
22474: PPUSH
22475: CALL 10008 0 4
// end ;
22479: END
// every 0 0$1 trigger russianAI = 1 do var i ;
22480: LD_EXP 27
22484: PUSH
22485: LD_INT 1
22487: EQUAL
22488: IFFALSE 22764
22490: GO 22492
22492: DISABLE
22493: LD_INT 0
22495: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22496: LD_ADDR_VAR 0 1
22500: PUSH
22501: LD_INT 22
22503: PUSH
22504: LD_INT 3
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 21
22513: PUSH
22514: LD_INT 3
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 30
22523: PUSH
22524: LD_INT 32
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: LD_INT 3
22533: PUSH
22534: LD_INT 2
22536: PUSH
22537: LD_INT 35
22539: PUSH
22540: LD_INT 43
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 35
22549: PUSH
22550: LD_INT 44
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 35
22559: PUSH
22560: LD_INT 46
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: PPUSH
22583: CALL_OW 69
22587: PUSH
22588: FOR_IN
22589: IFFALSE 22628
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22591: LD_VAR 0 1
22595: PPUSH
22596: LD_INT 43
22598: PUSH
22599: LD_INT 44
22601: PUSH
22602: LD_INT 46
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 1
22612: PPUSH
22613: LD_INT 3
22615: PPUSH
22616: CALL_OW 12
22620: ARRAY
22621: PPUSH
22622: CALL_OW 431
22626: GO 22588
22628: POP
22629: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22630: LD_ADDR_VAR 0 1
22634: PUSH
22635: LD_INT 22
22637: PUSH
22638: LD_INT 3
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 21
22647: PUSH
22648: LD_INT 3
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 30
22657: PUSH
22658: LD_INT 33
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 3
22667: PUSH
22668: LD_INT 2
22670: PUSH
22671: LD_INT 35
22673: PUSH
22674: LD_INT 43
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 35
22683: PUSH
22684: LD_INT 44
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 35
22693: PUSH
22694: LD_INT 46
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: PPUSH
22717: CALL_OW 69
22721: PUSH
22722: FOR_IN
22723: IFFALSE 22762
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22725: LD_VAR 0 1
22729: PPUSH
22730: LD_INT 43
22732: PUSH
22733: LD_INT 44
22735: PUSH
22736: LD_INT 46
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 1
22746: PPUSH
22747: LD_INT 3
22749: PPUSH
22750: CALL_OW 12
22754: ARRAY
22755: PPUSH
22756: CALL_OW 431
22760: GO 22722
22762: POP
22763: POP
// end ;
22764: PPOPN 1
22766: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
22767: LD_EXP 24
22771: PPUSH
22772: CALL_OW 310
22776: NOT
22777: PUSH
22778: LD_EXP 28
22782: PPUSH
22783: CALL_OW 302
22787: AND
22788: PUSH
22789: LD_EXP 28
22793: PPUSH
22794: CALL_OW 255
22798: PUSH
22799: LD_INT 3
22801: EQUAL
22802: AND
22803: IFFALSE 22823
22805: GO 22807
22807: DISABLE
// begin enable ;
22808: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
22809: LD_EXP 24
22813: PPUSH
22814: LD_EXP 28
22818: PPUSH
22819: CALL_OW 120
// end ;
22823: END
// every 0 0$1 trigger SikorskyAI = 1 do
22824: LD_EXP 20
22828: PUSH
22829: LD_INT 1
22831: EQUAL
22832: IFFALSE 22867
22834: GO 22836
22836: DISABLE
// begin enable ;
22837: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
22838: LD_INT 4
22840: PPUSH
22841: LD_INT 10
22843: PPUSH
22844: LD_INT 93
22846: PPUSH
22847: LD_INT 93
22849: PPUSH
22850: CALL 10008 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
22854: LD_INT 4
22856: PPUSH
22857: LD_INT 11
22859: PPUSH
22860: LD_INT 3
22862: PPUSH
22863: CALL 16505 0 3
// end ;
22867: END
// every 0 0$1 trigger SikorskyAI = 1 do
22868: LD_EXP 20
22872: PUSH
22873: LD_INT 1
22875: EQUAL
22876: IFFALSE 22888
22878: GO 22880
22880: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
22881: LD_INT 4
22883: PPUSH
22884: CALL 11015 0 1
22888: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
22889: LD_EXP 27
22893: PUSH
22894: LD_INT 1
22896: EQUAL
22897: PUSH
22898: LD_EXP 30
22902: PPUSH
22903: CALL_OW 302
22907: AND
22908: PUSH
22909: LD_EXP 30
22913: PPUSH
22914: CALL_OW 255
22918: PUSH
22919: LD_INT 3
22921: EQUAL
22922: AND
22923: PUSH
22924: LD_INT 22
22926: PUSH
22927: LD_INT 3
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 21
22936: PUSH
22937: LD_INT 2
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 33
22946: PUSH
22947: LD_INT 3
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: LIST
22958: PPUSH
22959: CALL_OW 69
22963: PUSH
22964: LD_INT 0
22966: EQUAL
22967: AND
22968: IFFALSE 23202
22970: GO 22972
22972: DISABLE
// begin enable ;
22973: ENABLE
// if Difficulty = 1 then
22974: LD_OWVAR 67
22978: PUSH
22979: LD_INT 1
22981: EQUAL
22982: IFFALSE 23050
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
22984: LD_INT 3
22986: PPUSH
22987: LD_EXP 30
22991: PPUSH
22992: LD_INT 5
22994: PPUSH
22995: LD_INT 8
22997: PPUSH
22998: CALL_OW 12
23002: PPUSH
23003: LD_INT 43
23005: PUSH
23006: LD_INT 43
23008: PUSH
23009: LD_INT 43
23011: PUSH
23012: LD_INT 43
23014: PUSH
23015: LD_INT 44
23017: PUSH
23018: LD_INT 44
23020: PUSH
23021: LD_INT 44
23023: PUSH
23024: LD_INT 46
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: PPUSH
23037: LD_INT 1
23039: PPUSH
23040: LD_INT 3
23042: PPUSH
23043: LD_INT 24
23045: PPUSH
23046: CALL 9854 0 7
// if Difficulty = 2 then
23050: LD_OWVAR 67
23054: PUSH
23055: LD_INT 2
23057: EQUAL
23058: IFFALSE 23126
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
23060: LD_INT 3
23062: PPUSH
23063: LD_EXP 30
23067: PPUSH
23068: LD_INT 6
23070: PPUSH
23071: LD_INT 8
23073: PPUSH
23074: CALL_OW 12
23078: PPUSH
23079: LD_INT 43
23081: PUSH
23082: LD_INT 43
23084: PUSH
23085: LD_INT 44
23087: PUSH
23088: LD_INT 44
23090: PUSH
23091: LD_INT 44
23093: PUSH
23094: LD_INT 44
23096: PUSH
23097: LD_INT 46
23099: PUSH
23100: LD_INT 46
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: PPUSH
23113: LD_INT 1
23115: PPUSH
23116: LD_INT 3
23118: PPUSH
23119: LD_INT 24
23121: PPUSH
23122: CALL 9854 0 7
// if Difficulty = 3 then
23126: LD_OWVAR 67
23130: PUSH
23131: LD_INT 3
23133: EQUAL
23134: IFFALSE 23202
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
23136: LD_INT 3
23138: PPUSH
23139: LD_EXP 30
23143: PPUSH
23144: LD_INT 7
23146: PPUSH
23147: LD_INT 8
23149: PPUSH
23150: CALL_OW 12
23154: PPUSH
23155: LD_INT 43
23157: PUSH
23158: LD_INT 43
23160: PUSH
23161: LD_INT 44
23163: PUSH
23164: LD_INT 44
23166: PUSH
23167: LD_INT 44
23169: PUSH
23170: LD_INT 46
23172: PUSH
23173: LD_INT 46
23175: PUSH
23176: LD_INT 46
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: PPUSH
23189: LD_INT 1
23191: PPUSH
23192: LD_INT 3
23194: PPUSH
23195: LD_INT 24
23197: PPUSH
23198: CALL 9854 0 7
// end ;
23202: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
23203: LD_EXP 38
23207: PUSH
23208: LD_INT 1
23210: EQUAL
23211: IFFALSE 23293
23213: GO 23215
23215: DISABLE
23216: LD_INT 0
23218: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
23219: LD_ADDR_VAR 0 1
23223: PUSH
23224: LD_INT 22
23226: PUSH
23227: LD_INT 1
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 21
23236: PUSH
23237: LD_INT 1
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 3
23246: PUSH
23247: LD_INT 24
23249: PUSH
23250: LD_INT 650
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: LIST
23265: PPUSH
23266: CALL_OW 69
23270: PUSH
23271: FOR_IN
23272: IFFALSE 23291
// ComMoveXY ( i , 51 , 12 ) ;
23274: LD_VAR 0 1
23278: PPUSH
23279: LD_INT 51
23281: PPUSH
23282: LD_INT 12
23284: PPUSH
23285: CALL_OW 111
23289: GO 23271
23291: POP
23292: POP
// end ; end_of_file
23293: PPOPN 1
23295: END
// every 1 1$20 trigger firstAttack = 1 do
23296: LD_EXP 33
23300: PUSH
23301: LD_INT 1
23303: EQUAL
23304: IFFALSE 23410
23306: GO 23308
23308: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23309: LD_INT 6
23311: PPUSH
23312: LD_INT 3
23314: PPUSH
23315: LD_INT 3
23317: PPUSH
23318: LD_INT 4
23320: PPUSH
23321: CALL_OW 12
23325: PUSH
23326: LD_INT 4
23328: PPUSH
23329: LD_INT 6
23331: PPUSH
23332: CALL_OW 12
23336: PUSH
23337: LD_INT 5
23339: PPUSH
23340: LD_INT 6
23342: PPUSH
23343: CALL_OW 12
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: LIST
23352: PUSH
23353: LD_OWVAR 67
23357: ARRAY
23358: PPUSH
23359: LD_INT 0
23361: PPUSH
23362: LD_INT 0
23364: PPUSH
23365: LD_INT 0
23367: PPUSH
23368: LD_INT 0
23370: PPUSH
23371: LD_EXP 25
23375: PPUSH
23376: LD_EXP 26
23380: PPUSH
23381: CALL_OW 12
23385: PPUSH
23386: LD_INT 16
23388: PPUSH
23389: LD_INT 7
23391: PPUSH
23392: LD_INT 1
23394: PPUSH
23395: LD_INT 1
23397: PPUSH
23398: LD_INT 3
23400: PPUSH
23401: CALL_OW 12
23405: PPUSH
23406: CALL 12523 0 12
23410: END
// every 1 1$40 trigger firstAttack = 1 do
23411: LD_EXP 33
23415: PUSH
23416: LD_INT 1
23418: EQUAL
23419: IFFALSE 23511
23421: GO 23423
23423: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23424: LD_INT 16
23426: PPUSH
23427: LD_INT 6
23429: PPUSH
23430: LD_INT 3
23432: PPUSH
23433: LD_INT 4
23435: PPUSH
23436: CALL_OW 12
23440: PUSH
23441: LD_INT 4
23443: PPUSH
23444: LD_INT 5
23446: PPUSH
23447: CALL_OW 12
23451: PUSH
23452: LD_INT 5
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: LIST
23459: PUSH
23460: LD_OWVAR 67
23464: ARRAY
23465: PPUSH
23466: LD_EXP 25
23470: PPUSH
23471: LD_EXP 26
23475: PPUSH
23476: CALL_OW 12
23480: PPUSH
23481: LD_INT 3
23483: PPUSH
23484: LD_INT 1
23486: PPUSH
23487: LD_INT 3
23489: PPUSH
23490: LD_INT 44
23492: PUSH
23493: LD_INT 46
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PPUSH
23500: EMPTY
23501: PPUSH
23502: EMPTY
23503: PPUSH
23504: LD_INT 1
23506: PPUSH
23507: CALL 14816 0 11
23511: END
// every 6 6$40 trigger firstAttack = 1 and JMMArrive = 0 do
23512: LD_EXP 33
23516: PUSH
23517: LD_INT 1
23519: EQUAL
23520: PUSH
23521: LD_EXP 39
23525: PUSH
23526: LD_INT 0
23528: EQUAL
23529: AND
23530: IFFALSE 23636
23532: GO 23534
23534: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23535: LD_INT 6
23537: PPUSH
23538: LD_INT 3
23540: PPUSH
23541: LD_INT 4
23543: PPUSH
23544: LD_INT 5
23546: PPUSH
23547: CALL_OW 12
23551: PUSH
23552: LD_INT 5
23554: PPUSH
23555: LD_INT 6
23557: PPUSH
23558: CALL_OW 12
23562: PUSH
23563: LD_INT 5
23565: PPUSH
23566: LD_INT 6
23568: PPUSH
23569: CALL_OW 12
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: LIST
23578: PUSH
23579: LD_OWVAR 67
23583: ARRAY
23584: PPUSH
23585: LD_INT 0
23587: PPUSH
23588: LD_INT 0
23590: PPUSH
23591: LD_INT 0
23593: PPUSH
23594: LD_INT 0
23596: PPUSH
23597: LD_EXP 25
23601: PPUSH
23602: LD_EXP 26
23606: PPUSH
23607: CALL_OW 12
23611: PPUSH
23612: LD_INT 16
23614: PPUSH
23615: LD_INT 7
23617: PPUSH
23618: LD_INT 1
23620: PPUSH
23621: LD_INT 1
23623: PPUSH
23624: LD_INT 3
23626: PPUSH
23627: CALL_OW 12
23631: PPUSH
23632: CALL 12523 0 12
23636: END
// every 6 6$50 trigger firstAttack = 1 and JMMArrive = 0 do
23637: LD_EXP 33
23641: PUSH
23642: LD_INT 1
23644: EQUAL
23645: PUSH
23646: LD_EXP 39
23650: PUSH
23651: LD_INT 0
23653: EQUAL
23654: AND
23655: IFFALSE 23751
23657: GO 23659
23659: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23660: LD_INT 16
23662: PPUSH
23663: LD_INT 6
23665: PPUSH
23666: LD_INT 4
23668: PPUSH
23669: LD_INT 5
23671: PPUSH
23672: CALL_OW 12
23676: PUSH
23677: LD_INT 6
23679: PPUSH
23680: LD_INT 7
23682: PPUSH
23683: CALL_OW 12
23687: PUSH
23688: LD_INT 7
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: LIST
23695: PUSH
23696: LD_OWVAR 67
23700: ARRAY
23701: PPUSH
23702: LD_EXP 25
23706: PPUSH
23707: LD_EXP 26
23711: PPUSH
23712: CALL_OW 12
23716: PPUSH
23717: LD_INT 3
23719: PPUSH
23720: LD_INT 1
23722: PPUSH
23723: LD_INT 3
23725: PPUSH
23726: LD_INT 43
23728: PUSH
23729: LD_INT 44
23731: PUSH
23732: LD_INT 46
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: LIST
23739: PPUSH
23740: EMPTY
23741: PPUSH
23742: EMPTY
23743: PPUSH
23744: LD_INT 1
23746: PPUSH
23747: CALL 14816 0 11
23751: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
23752: LD_EXP 33
23756: PUSH
23757: LD_INT 1
23759: EQUAL
23760: PUSH
23761: LD_EXP 39
23765: PUSH
23766: LD_INT 0
23768: EQUAL
23769: AND
23770: IFFALSE 23866
23772: GO 23774
23774: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
23775: LD_INT 16
23777: PPUSH
23778: LD_INT 6
23780: PPUSH
23781: LD_INT 4
23783: PPUSH
23784: LD_INT 5
23786: PPUSH
23787: CALL_OW 12
23791: PUSH
23792: LD_INT 6
23794: PPUSH
23795: LD_INT 7
23797: PPUSH
23798: CALL_OW 12
23802: PUSH
23803: LD_INT 7
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: LIST
23810: PUSH
23811: LD_OWVAR 67
23815: ARRAY
23816: PPUSH
23817: LD_EXP 25
23821: PPUSH
23822: LD_EXP 26
23826: PPUSH
23827: CALL_OW 12
23831: PPUSH
23832: LD_INT 3
23834: PPUSH
23835: LD_INT 1
23837: PPUSH
23838: LD_INT 3
23840: PPUSH
23841: LD_INT 43
23843: PUSH
23844: LD_INT 44
23846: PUSH
23847: LD_INT 46
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: PPUSH
23855: EMPTY
23856: PPUSH
23857: EMPTY
23858: PPUSH
23859: LD_INT 1
23861: PPUSH
23862: CALL 14816 0 11
23866: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
23867: LD_EXP 33
23871: PUSH
23872: LD_INT 1
23874: EQUAL
23875: PUSH
23876: LD_EXP 39
23880: PUSH
23881: LD_INT 0
23883: EQUAL
23884: AND
23885: IFFALSE 23961
23887: GO 23889
23889: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 4 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23890: LD_INT 16
23892: PPUSH
23893: LD_INT 6
23895: PPUSH
23896: LD_INT 4
23898: PUSH
23899: LD_INT 6
23901: PUSH
23902: LD_INT 7
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: LIST
23909: PUSH
23910: LD_OWVAR 67
23914: ARRAY
23915: PPUSH
23916: LD_EXP 25
23920: PPUSH
23921: LD_EXP 26
23925: PPUSH
23926: CALL_OW 12
23930: PPUSH
23931: LD_INT 3
23933: PPUSH
23934: LD_INT 1
23936: PPUSH
23937: LD_INT 3
23939: PPUSH
23940: LD_INT 44
23942: PUSH
23943: LD_INT 46
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PPUSH
23950: EMPTY
23951: PPUSH
23952: EMPTY
23953: PPUSH
23954: LD_INT 1
23956: PPUSH
23957: CALL 14816 0 11
23961: END
// every 1 1$00 trigger secondAttack = 1 do
23962: LD_EXP 34
23966: PUSH
23967: LD_INT 1
23969: EQUAL
23970: IFFALSE 24052
23972: GO 23974
23974: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23975: LD_INT 6
23977: PPUSH
23978: LD_INT 3
23980: PPUSH
23981: LD_INT 3
23983: PUSH
23984: LD_INT 4
23986: PUSH
23987: LD_INT 5
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: LIST
23994: PUSH
23995: LD_OWVAR 67
23999: ARRAY
24000: PPUSH
24001: LD_INT 0
24003: PPUSH
24004: LD_INT 0
24006: PPUSH
24007: LD_INT 0
24009: PPUSH
24010: LD_INT 0
24012: PPUSH
24013: LD_EXP 25
24017: PPUSH
24018: LD_EXP 26
24022: PPUSH
24023: CALL_OW 12
24027: PPUSH
24028: LD_INT 16
24030: PPUSH
24031: LD_INT 7
24033: PPUSH
24034: LD_INT 1
24036: PPUSH
24037: LD_INT 1
24039: PPUSH
24040: LD_INT 3
24042: PPUSH
24043: CALL_OW 12
24047: PPUSH
24048: CALL 12523 0 12
24052: END
// every 1 1$00 trigger secondAttack = 1 do
24053: LD_EXP 34
24057: PUSH
24058: LD_INT 1
24060: EQUAL
24061: IFFALSE 24165
24063: GO 24065
24065: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
24066: LD_INT 16
24068: PPUSH
24069: LD_INT 6
24071: PPUSH
24072: LD_INT 5
24074: PPUSH
24075: LD_INT 6
24077: PPUSH
24078: CALL_OW 12
24082: PUSH
24083: LD_INT 6
24085: PPUSH
24086: LD_INT 9
24088: PPUSH
24089: CALL_OW 12
24093: PUSH
24094: LD_INT 7
24096: PPUSH
24097: LD_INT 9
24099: PPUSH
24100: CALL_OW 12
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: LIST
24109: PUSH
24110: LD_OWVAR 67
24114: ARRAY
24115: PPUSH
24116: LD_EXP 25
24120: PPUSH
24121: LD_EXP 26
24125: PPUSH
24126: CALL_OW 12
24130: PPUSH
24131: LD_INT 3
24133: PPUSH
24134: LD_INT 1
24136: PPUSH
24137: LD_INT 3
24139: PPUSH
24140: LD_INT 43
24142: PUSH
24143: LD_INT 44
24145: PUSH
24146: LD_INT 46
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: LIST
24153: PPUSH
24154: EMPTY
24155: PPUSH
24156: EMPTY
24157: PPUSH
24158: LD_INT 1
24160: PPUSH
24161: CALL 14816 0 11
24165: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24166: LD_EXP 18
24170: PUSH
24171: LD_INT 0
24173: EQUAL
24174: IFFALSE 24256
24176: GO 24178
24178: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24179: LD_INT 6
24181: PPUSH
24182: LD_INT 3
24184: PPUSH
24185: LD_INT 3
24187: PUSH
24188: LD_INT 4
24190: PUSH
24191: LD_INT 5
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: LIST
24198: PUSH
24199: LD_OWVAR 67
24203: ARRAY
24204: PPUSH
24205: LD_INT 0
24207: PPUSH
24208: LD_INT 0
24210: PPUSH
24211: LD_INT 0
24213: PPUSH
24214: LD_INT 0
24216: PPUSH
24217: LD_EXP 25
24221: PPUSH
24222: LD_EXP 26
24226: PPUSH
24227: CALL_OW 12
24231: PPUSH
24232: LD_INT 16
24234: PPUSH
24235: LD_INT 7
24237: PPUSH
24238: LD_INT 1
24240: PPUSH
24241: LD_INT 1
24243: PPUSH
24244: LD_INT 3
24246: PPUSH
24247: CALL_OW 12
24251: PPUSH
24252: CALL 12523 0 12
24256: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24257: LD_EXP 18
24261: PUSH
24262: LD_INT 0
24264: EQUAL
24265: IFFALSE 24365
24267: GO 24269
24269: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24270: LD_INT 16
24272: PPUSH
24273: LD_INT 6
24275: PPUSH
24276: LD_INT 5
24278: PPUSH
24279: LD_INT 6
24281: PPUSH
24282: CALL_OW 12
24286: PUSH
24287: LD_INT 6
24289: PPUSH
24290: LD_INT 9
24292: PPUSH
24293: CALL_OW 12
24297: PUSH
24298: LD_INT 7
24300: PPUSH
24301: LD_INT 9
24303: PPUSH
24304: CALL_OW 12
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: LIST
24313: PUSH
24314: LD_OWVAR 67
24318: ARRAY
24319: PPUSH
24320: LD_EXP 25
24324: PPUSH
24325: LD_EXP 26
24329: PPUSH
24330: CALL_OW 12
24334: PPUSH
24335: LD_INT 3
24337: PPUSH
24338: LD_INT 1
24340: PPUSH
24341: LD_INT 3
24343: PPUSH
24344: LD_INT 44
24346: PUSH
24347: LD_INT 46
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PPUSH
24354: EMPTY
24355: PPUSH
24356: EMPTY
24357: PPUSH
24358: LD_INT 1
24360: PPUSH
24361: CALL 14816 0 11
24365: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24366: LD_EXP 18
24370: PUSH
24371: LD_INT 0
24373: EQUAL
24374: IFFALSE 24456
24376: GO 24378
24378: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24379: LD_INT 6
24381: PPUSH
24382: LD_INT 3
24384: PPUSH
24385: LD_INT 3
24387: PUSH
24388: LD_INT 4
24390: PUSH
24391: LD_INT 5
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: LIST
24398: PUSH
24399: LD_OWVAR 67
24403: ARRAY
24404: PPUSH
24405: LD_INT 0
24407: PPUSH
24408: LD_INT 0
24410: PPUSH
24411: LD_INT 0
24413: PPUSH
24414: LD_INT 0
24416: PPUSH
24417: LD_EXP 25
24421: PPUSH
24422: LD_EXP 26
24426: PPUSH
24427: CALL_OW 12
24431: PPUSH
24432: LD_INT 16
24434: PPUSH
24435: LD_INT 7
24437: PPUSH
24438: LD_INT 1
24440: PPUSH
24441: LD_INT 1
24443: PPUSH
24444: LD_INT 3
24446: PPUSH
24447: CALL_OW 12
24451: PPUSH
24452: CALL 12523 0 12
24456: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24457: LD_EXP 18
24461: PUSH
24462: LD_INT 0
24464: EQUAL
24465: IFFALSE 24565
24467: GO 24469
24469: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24470: LD_INT 16
24472: PPUSH
24473: LD_INT 6
24475: PPUSH
24476: LD_INT 5
24478: PPUSH
24479: LD_INT 6
24481: PPUSH
24482: CALL_OW 12
24486: PUSH
24487: LD_INT 6
24489: PPUSH
24490: LD_INT 9
24492: PPUSH
24493: CALL_OW 12
24497: PUSH
24498: LD_INT 7
24500: PPUSH
24501: LD_INT 9
24503: PPUSH
24504: CALL_OW 12
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: LIST
24513: PUSH
24514: LD_OWVAR 67
24518: ARRAY
24519: PPUSH
24520: LD_EXP 25
24524: PPUSH
24525: LD_EXP 26
24529: PPUSH
24530: CALL_OW 12
24534: PPUSH
24535: LD_INT 3
24537: PPUSH
24538: LD_INT 1
24540: PPUSH
24541: LD_INT 3
24543: PPUSH
24544: LD_INT 44
24546: PUSH
24547: LD_INT 46
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PPUSH
24554: EMPTY
24555: PPUSH
24556: EMPTY
24557: PPUSH
24558: LD_INT 1
24560: PPUSH
24561: CALL 14816 0 11
24565: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24566: LD_EXP 18
24570: PUSH
24571: LD_INT 0
24573: EQUAL
24574: IFFALSE 24656
24576: GO 24578
24578: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24579: LD_INT 6
24581: PPUSH
24582: LD_INT 3
24584: PPUSH
24585: LD_INT 3
24587: PUSH
24588: LD_INT 4
24590: PUSH
24591: LD_INT 5
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: LIST
24598: PUSH
24599: LD_OWVAR 67
24603: ARRAY
24604: PPUSH
24605: LD_INT 0
24607: PPUSH
24608: LD_INT 0
24610: PPUSH
24611: LD_INT 0
24613: PPUSH
24614: LD_INT 0
24616: PPUSH
24617: LD_EXP 25
24621: PPUSH
24622: LD_EXP 26
24626: PPUSH
24627: CALL_OW 12
24631: PPUSH
24632: LD_INT 16
24634: PPUSH
24635: LD_INT 7
24637: PPUSH
24638: LD_INT 1
24640: PPUSH
24641: LD_INT 1
24643: PPUSH
24644: LD_INT 3
24646: PPUSH
24647: CALL_OW 12
24651: PPUSH
24652: CALL 12523 0 12
24656: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24657: LD_EXP 18
24661: PUSH
24662: LD_INT 0
24664: EQUAL
24665: IFFALSE 24741
24667: GO 24669
24669: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 7 , 8 , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
24670: LD_INT 16
24672: PPUSH
24673: LD_INT 6
24675: PPUSH
24676: LD_INT 7
24678: PUSH
24679: LD_INT 8
24681: PUSH
24682: LD_INT 9
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: LIST
24689: PUSH
24690: LD_OWVAR 67
24694: ARRAY
24695: PPUSH
24696: LD_EXP 25
24700: PPUSH
24701: LD_EXP 26
24705: PPUSH
24706: CALL_OW 12
24710: PPUSH
24711: LD_INT 3
24713: PPUSH
24714: LD_INT 1
24716: PPUSH
24717: LD_INT 3
24719: PPUSH
24720: LD_INT 44
24722: PUSH
24723: LD_INT 46
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PPUSH
24730: EMPTY
24731: PPUSH
24732: EMPTY
24733: PPUSH
24734: LD_INT 1
24736: PPUSH
24737: CALL 14816 0 11
24741: END
// every 0 0$1 trigger timerStatus = 1 do
24742: LD_EXP 35
24746: PUSH
24747: LD_INT 1
24749: EQUAL
24750: IFFALSE 24810
24752: GO 24754
24754: DISABLE
// begin repeat wait ( 0 0$1 ) ;
24755: LD_INT 35
24757: PPUSH
24758: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
24762: LD_ADDR_OWVAR 47
24766: PUSH
24767: LD_STRING #Am08-1
24769: PUSH
24770: LD_EXP 19
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
24779: LD_ADDR_EXP 19
24783: PUSH
24784: LD_EXP 19
24788: PUSH
24789: LD_INT 35
24791: MINUS
24792: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
24793: LD_EXP 19
24797: PUSH
24798: LD_INT 0
24800: EQUAL
24801: IFFALSE 24755
// display_strings := [ ] ;
24803: LD_ADDR_OWVAR 47
24807: PUSH
24808: EMPTY
24809: ST_TO_ADDR
// end ; end_of_file
24810: END
// every 1 1$0 do
24811: GO 24813
24813: DISABLE
// begin if supply <= 13 and supply > 7 then
24814: LD_EXP 40
24818: PUSH
24819: LD_INT 13
24821: LESSEQUAL
24822: PUSH
24823: LD_EXP 40
24827: PUSH
24828: LD_INT 7
24830: GREATER
24831: AND
24832: IFFALSE 24855
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
24834: LD_INT 3
24836: PPUSH
24837: LD_INT 5
24839: PPUSH
24840: CALL_OW 12
24844: PPUSH
24845: LD_INT 5
24847: PPUSH
24848: LD_INT 1
24850: PPUSH
24851: CALL_OW 55
// if supply <= 7 and supply > 4 then
24855: LD_EXP 40
24859: PUSH
24860: LD_INT 7
24862: LESSEQUAL
24863: PUSH
24864: LD_EXP 40
24868: PUSH
24869: LD_INT 4
24871: GREATER
24872: AND
24873: IFFALSE 24896
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
24875: LD_INT 3
24877: PPUSH
24878: LD_INT 5
24880: PPUSH
24881: CALL_OW 12
24885: PPUSH
24886: LD_INT 20
24888: PPUSH
24889: LD_INT 1
24891: PPUSH
24892: CALL_OW 55
// if supply <= 4 and supply > 0 then
24896: LD_EXP 40
24900: PUSH
24901: LD_INT 4
24903: LESSEQUAL
24904: PUSH
24905: LD_EXP 40
24909: PUSH
24910: LD_INT 0
24912: GREATER
24913: AND
24914: IFFALSE 24937
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
24916: LD_INT 3
24918: PPUSH
24919: LD_INT 5
24921: PPUSH
24922: CALL_OW 12
24926: PPUSH
24927: LD_INT 21
24929: PPUSH
24930: LD_INT 1
24932: PPUSH
24933: CALL_OW 55
// if supply > 0 then
24937: LD_EXP 40
24941: PUSH
24942: LD_INT 0
24944: GREATER
24945: IFFALSE 24962
// begin supply = supply - 1 ;
24947: LD_ADDR_EXP 40
24951: PUSH
24952: LD_EXP 40
24956: PUSH
24957: LD_INT 1
24959: MINUS
24960: ST_TO_ADDR
// enable ;
24961: ENABLE
// end ; end ; end_of_file
24962: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
24963: LD_EXP 39
24967: PUSH
24968: LD_INT 1
24970: EQUAL
24971: PUSH
24972: LD_EXP 1
24976: PPUSH
24977: CALL_OW 301
24981: AND
24982: IFFALSE 24994
24984: GO 24986
24986: DISABLE
// YouLost ( JMM ) ;
24987: LD_STRING JMM
24989: PPUSH
24990: CALL_OW 104
24994: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
24995: LD_EXP 18
24999: PUSH
25000: LD_INT 1
25002: EQUAL
25003: PUSH
25004: LD_EXP 16
25008: PPUSH
25009: CALL_OW 301
25013: AND
25014: IFFALSE 25046
25016: GO 25018
25018: DISABLE
// begin DialogueOn ;
25019: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
25023: LD_EXP 23
25027: PPUSH
25028: LD_STRING D8a-Pow-1
25030: PPUSH
25031: CALL_OW 94
// DialogueOff ;
25035: CALL_OW 7
// YouLost ( Dismissed ) ;
25039: LD_STRING Dismissed
25041: PPUSH
25042: CALL_OW 104
// end ;
25046: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
25047: LD_INT 22
25049: PUSH
25050: LD_INT 1
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 2
25059: PUSH
25060: LD_INT 30
25062: PUSH
25063: LD_INT 0
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 30
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: LIST
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PPUSH
25089: CALL_OW 69
25093: PUSH
25094: LD_INT 0
25096: EQUAL
25097: IFFALSE 25109
25099: GO 25101
25101: DISABLE
// YouLost ( Destroyed ) ; end_of_file
25102: LD_STRING Destroyed
25104: PPUSH
25105: CALL_OW 104
25109: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , tmp , p ;
25110: LD_EXP 24
25114: PPUSH
25115: CALL_OW 301
25119: PUSH
25120: LD_INT 22
25122: PUSH
25123: LD_INT 3
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 21
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PPUSH
25144: CALL_OW 69
25148: PUSH
25149: LD_INT 7
25151: PUSH
25152: LD_INT 6
25154: PUSH
25155: LD_INT 5
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: LIST
25162: PUSH
25163: LD_OWVAR 67
25167: ARRAY
25168: LESS
25169: AND
25170: PUSH
25171: LD_EXP 1
25175: PPUSH
25176: CALL_OW 305
25180: AND
25181: IFFALSE 25737
25183: GO 25185
25185: DISABLE
25186: LD_INT 0
25188: PPUSH
25189: PPUSH
25190: PPUSH
// begin russianAI = 0 ;
25191: LD_ADDR_EXP 27
25195: PUSH
25196: LD_INT 0
25198: ST_TO_ADDR
// escapeAvalaible = 1 ;
25199: LD_ADDR_EXP 36
25203: PUSH
25204: LD_INT 1
25206: ST_TO_ADDR
// Video ( true ) ;
25207: LD_INT 1
25209: PPUSH
25210: CALL 80539 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
25214: LD_INT 3
25216: PPUSH
25217: LD_INT 1
25219: PPUSH
25220: LD_INT 1
25222: PPUSH
25223: LD_INT 0
25225: PPUSH
25226: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
25230: LD_INT 6
25232: PPUSH
25233: LD_INT 1
25235: PPUSH
25236: LD_INT 1
25238: PPUSH
25239: LD_INT 0
25241: PPUSH
25242: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
25246: LD_INT 3
25248: PPUSH
25249: LD_INT 1
25251: PPUSH
25252: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
25256: LD_INT 97
25258: PPUSH
25259: LD_INT 91
25261: PPUSH
25262: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
25266: LD_INT 22
25268: PUSH
25269: LD_INT 3
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 21
25278: PUSH
25279: LD_INT 1
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PPUSH
25290: CALL_OW 69
25294: PPUSH
25295: CALL_OW 121
// wait ( 0 0$01 ) ;
25299: LD_INT 35
25301: PPUSH
25302: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25306: LD_INT 22
25308: PUSH
25309: LD_INT 3
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: LD_INT 21
25318: PUSH
25319: LD_INT 1
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PPUSH
25330: CALL_OW 69
25334: PPUSH
25335: LD_INT 124
25337: PPUSH
25338: LD_INT 98
25340: PPUSH
25341: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
25345: LD_INT 22
25347: PUSH
25348: LD_INT 6
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 21
25357: PUSH
25358: LD_INT 1
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PPUSH
25369: CALL_OW 69
25373: PPUSH
25374: CALL_OW 121
// wait ( 0 0$01 ) ;
25378: LD_INT 35
25380: PPUSH
25381: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25385: LD_INT 22
25387: PUSH
25388: LD_INT 6
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 21
25397: PUSH
25398: LD_INT 1
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PPUSH
25409: CALL_OW 69
25413: PPUSH
25414: LD_INT 124
25416: PPUSH
25417: LD_INT 98
25419: PPUSH
25420: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
25424: LD_INT 22
25426: PUSH
25427: LD_INT 1
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 21
25436: PUSH
25437: LD_INT 1
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 3
25446: PUSH
25447: LD_INT 54
25449: PUSH
25450: EMPTY
25451: LIST
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: LIST
25461: PPUSH
25462: CALL_OW 69
25466: PPUSH
25467: LD_INT 124
25469: PPUSH
25470: LD_INT 98
25472: PPUSH
25473: CALL_OW 114
// wait ( 0 0$4 ) ;
25477: LD_INT 140
25479: PPUSH
25480: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
25484: LD_INT 124
25486: PPUSH
25487: LD_INT 98
25489: PPUSH
25490: CALL_OW 84
// if SikorskyStatus = 1 then
25494: LD_EXP 21
25498: PUSH
25499: LD_INT 1
25501: EQUAL
25502: IFFALSE 25516
// Say ( Sikorski , D9-Sik-1 ) ;
25504: LD_EXP 16
25508: PPUSH
25509: LD_STRING D9-Sik-1
25511: PPUSH
25512: CALL_OW 88
// if SikorskyStatus = 2 then
25516: LD_EXP 21
25520: PUSH
25521: LD_INT 2
25523: EQUAL
25524: IFFALSE 25545
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
25526: LD_EXP 23
25530: PPUSH
25531: LD_STRING D8b-Pow-1
25533: PPUSH
25534: CALL_OW 94
// YouLost ( Dismissed ) ;
25538: LD_STRING Dismissed
25540: PPUSH
25541: CALL_OW 104
// end ; p := 0 0$0 ;
25545: LD_ADDR_VAR 0 3
25549: PUSH
25550: LD_INT 0
25552: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
25553: LD_ADDR_VAR 0 2
25557: PUSH
25558: LD_INT 2
25560: PUSH
25561: LD_INT 22
25563: PUSH
25564: LD_INT 3
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 22
25573: PUSH
25574: LD_INT 6
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 21
25588: PUSH
25589: LD_INT 1
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PPUSH
25600: CALL_OW 69
25604: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25605: LD_INT 35
25607: PPUSH
25608: CALL_OW 67
// p := p + 0 0$1 ;
25612: LD_ADDR_VAR 0 3
25616: PUSH
25617: LD_VAR 0 3
25621: PUSH
25622: LD_INT 35
25624: PLUS
25625: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
25626: LD_VAR 0 2
25630: PPUSH
25631: LD_INT 22
25633: PPUSH
25634: CALL_OW 113
// for i in tmp do
25638: LD_ADDR_VAR 0 1
25642: PUSH
25643: LD_VAR 0 2
25647: PUSH
25648: FOR_IN
25649: IFFALSE 25676
// if IsInArea ( i , RussianEscape ) then
25651: LD_VAR 0 1
25655: PPUSH
25656: LD_INT 22
25658: PPUSH
25659: CALL_OW 308
25663: IFFALSE 25674
// RemoveUnit ( i ) ;
25665: LD_VAR 0 1
25669: PPUSH
25670: CALL_OW 64
25674: GO 25648
25676: POP
25677: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
25678: LD_INT 23
25680: PUSH
25681: LD_INT 3
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 21
25690: PUSH
25691: LD_INT 1
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 24
25700: PUSH
25701: LD_INT 250
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: LIST
25712: PPUSH
25713: CALL_OW 69
25717: PUSH
25718: LD_INT 0
25720: EQUAL
25721: PUSH
25722: LD_VAR 0 3
25726: PUSH
25727: LD_INT 245
25729: GREATEREQUAL
25730: OR
25731: IFFALSE 25605
// FinishMission ;
25733: CALL 25740 0 0
// end ;
25737: PPOPN 3
25739: END
// export function FinishMission ; var tmp ; begin
25740: LD_INT 0
25742: PPUSH
25743: PPUSH
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 then
25744: LD_INT 22
25746: PUSH
25747: LD_INT 4
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PPUSH
25754: CALL_OW 69
25758: PUSH
25759: LD_INT 0
25761: EQUAL
25762: IFFALSE 25771
// SetAchievement ( ACH_BLITZKRIEG ) ;
25764: LD_STRING ACH_BLITZKRIEG
25766: PPUSH
25767: CALL_OW 543
// if tick <= 25 25$00 then
25771: LD_OWVAR 1
25775: PUSH
25776: LD_INT 52500
25778: LESSEQUAL
25779: IFFALSE 25795
// begin wait ( 3 ) ;
25781: LD_INT 3
25783: PPUSH
25784: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
25788: LD_STRING ACH_ASPEED_8
25790: PPUSH
25791: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
25795: LD_STRING med1
25797: PPUSH
25798: LD_INT 1
25800: PPUSH
25801: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
25805: LD_STRING med2
25807: PPUSH
25808: LD_INT 1
25810: PPUSH
25811: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
25815: LD_STRING perfect
25817: PPUSH
25818: LD_INT 1
25820: PPUSH
25821: CALL_OW 101
// if Difficulty = 3 then
25825: LD_OWVAR 67
25829: PUSH
25830: LD_INT 3
25832: EQUAL
25833: IFFALSE 25845
// SetAchievementEX ( ACH_AMER , 8 ) ;
25835: LD_STRING ACH_AMER
25837: PPUSH
25838: LD_INT 8
25840: PPUSH
25841: CALL_OW 564
// GiveMedals ( Main ) ;
25845: LD_STRING Main
25847: PPUSH
25848: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
25852: LD_INT 22
25854: PUSH
25855: LD_INT 1
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 23
25864: PUSH
25865: LD_INT 1
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 21
25874: PUSH
25875: LD_INT 1
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 2
25884: PUSH
25885: LD_INT 25
25887: PUSH
25888: LD_INT 1
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 25
25897: PUSH
25898: LD_INT 2
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 25
25907: PUSH
25908: LD_INT 3
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 25
25917: PUSH
25918: LD_INT 4
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: PPUSH
25938: CALL_OW 69
25942: PPUSH
25943: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
25947: LD_EXP 1
25951: PPUSH
25952: LD_EXP 43
25956: PUSH
25957: LD_STRING JMM
25959: STR
25960: PPUSH
25961: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
25965: LD_EXP 2
25969: PPUSH
25970: LD_EXP 43
25974: PUSH
25975: LD_STRING Brown
25977: STR
25978: PPUSH
25979: CALL 8370 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
25983: LD_EXP 3
25987: PPUSH
25988: LD_EXP 43
25992: PUSH
25993: LD_STRING Donaldson
25995: STR
25996: PPUSH
25997: CALL 8370 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26001: LD_EXP 4
26005: PPUSH
26006: LD_EXP 43
26010: PUSH
26011: LD_STRING Bobby
26013: STR
26014: PPUSH
26015: CALL 8370 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26019: LD_EXP 5
26023: PPUSH
26024: LD_EXP 43
26028: PUSH
26029: LD_STRING Cyrus
26031: STR
26032: PPUSH
26033: CALL 8370 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26037: LD_EXP 6
26041: PPUSH
26042: LD_EXP 43
26046: PUSH
26047: LD_STRING Lisa
26049: STR
26050: PPUSH
26051: CALL 8370 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26055: LD_EXP 7
26059: PPUSH
26060: LD_EXP 43
26064: PUSH
26065: LD_STRING Frank
26067: STR
26068: PPUSH
26069: CALL 8370 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26073: LD_EXP 8
26077: PPUSH
26078: LD_EXP 43
26082: PUSH
26083: LD_STRING Gladstone
26085: STR
26086: PPUSH
26087: CALL 8370 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26091: LD_EXP 9
26095: PPUSH
26096: LD_EXP 43
26100: PUSH
26101: LD_STRING Kikuchi
26103: STR
26104: PPUSH
26105: CALL 8370 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26109: LD_EXP 14
26113: PPUSH
26114: LD_EXP 43
26118: PUSH
26119: LD_STRING Denis
26121: STR
26122: PPUSH
26123: CALL 8370 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26127: LD_EXP 15
26131: PPUSH
26132: LD_EXP 43
26136: PUSH
26137: LD_STRING Joan
26139: STR
26140: PPUSH
26141: CALL 8370 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
26145: LD_EXP 10
26149: PPUSH
26150: LD_EXP 43
26154: PUSH
26155: LD_STRING Khatam
26157: STR
26158: PPUSH
26159: CALL 8370 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26163: LD_EXP 13
26167: PPUSH
26168: LD_EXP 43
26172: PUSH
26173: LD_STRING Houten
26175: STR
26176: PPUSH
26177: CALL 8370 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
26181: LD_INT 50
26183: PUSH
26184: EMPTY
26185: LIST
26186: PUSH
26187: LD_INT 22
26189: PUSH
26190: LD_INT 1
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 21
26199: PUSH
26200: LD_INT 1
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 2
26209: PUSH
26210: LD_INT 25
26212: PUSH
26213: LD_INT 1
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 25
26222: PUSH
26223: LD_INT 2
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 25
26232: PUSH
26233: LD_INT 3
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 25
26242: PUSH
26243: LD_INT 4
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: PPUSH
26263: CALL_OW 69
26267: PUSH
26268: LD_EXP 1
26272: PUSH
26273: LD_EXP 2
26277: PUSH
26278: LD_EXP 3
26282: PUSH
26283: LD_EXP 4
26287: PUSH
26288: LD_EXP 5
26292: PUSH
26293: LD_EXP 6
26297: PUSH
26298: LD_EXP 7
26302: PUSH
26303: LD_EXP 8
26307: PUSH
26308: LD_EXP 9
26312: PUSH
26313: LD_EXP 14
26317: PUSH
26318: LD_EXP 15
26322: PUSH
26323: LD_EXP 13
26327: PUSH
26328: LD_EXP 10
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: DIFF
26348: PPUSH
26349: LD_STRING 08_other_survivors
26351: PPUSH
26352: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
26356: LD_INT 23
26358: PPUSH
26359: CALL 26372 0 1
// YouWin ;
26363: CALL_OW 103
// end ;
26367: LD_VAR 0 1
26371: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
26372: LD_INT 0
26374: PPUSH
26375: PPUSH
26376: PPUSH
26377: PPUSH
// gammaBase = [ ] ;
26378: LD_ADDR_VAR 0 4
26382: PUSH
26383: EMPTY
26384: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26385: LD_ADDR_VAR 0 5
26389: PUSH
26390: LD_VAR 0 1
26394: PPUSH
26395: LD_INT 22
26397: PUSH
26398: LD_INT 1
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 21
26407: PUSH
26408: LD_INT 3
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 50
26417: PUSH
26418: EMPTY
26419: LIST
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: LIST
26425: PPUSH
26426: CALL_OW 70
26430: ST_TO_ADDR
// for i in buildings do
26431: LD_ADDR_VAR 0 3
26435: PUSH
26436: LD_VAR 0 5
26440: PUSH
26441: FOR_IN
26442: IFFALSE 26879
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26444: LD_VAR 0 3
26448: PPUSH
26449: CALL_OW 266
26453: PUSH
26454: LD_INT 6
26456: PUSH
26457: LD_INT 7
26459: PUSH
26460: LD_INT 8
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: LIST
26467: IN
26468: IFFALSE 26582
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26470: LD_ADDR_VAR 0 4
26474: PUSH
26475: LD_VAR 0 4
26479: PUSH
26480: LD_VAR 0 3
26484: PPUSH
26485: CALL_OW 266
26489: PUSH
26490: LD_VAR 0 3
26494: PPUSH
26495: CALL_OW 250
26499: PUSH
26500: LD_VAR 0 3
26504: PPUSH
26505: CALL_OW 251
26509: PUSH
26510: LD_VAR 0 3
26514: PPUSH
26515: CALL_OW 254
26519: PUSH
26520: LD_VAR 0 3
26524: PPUSH
26525: CALL_OW 267
26529: PUSH
26530: LD_VAR 0 3
26534: PPUSH
26535: CALL_OW 248
26539: PUSH
26540: LD_VAR 0 3
26544: PPUSH
26545: LD_INT 1
26547: PPUSH
26548: CALL_OW 268
26552: PUSH
26553: LD_VAR 0 3
26557: PPUSH
26558: LD_INT 2
26560: PPUSH
26561: CALL_OW 268
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: PUSH
26576: EMPTY
26577: LIST
26578: ADD
26579: ST_TO_ADDR
26580: GO 26877
// if GetBType ( i ) = b_bunker then
26582: LD_VAR 0 3
26586: PPUSH
26587: CALL_OW 266
26591: PUSH
26592: LD_INT 32
26594: EQUAL
26595: IFFALSE 26692
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26597: LD_ADDR_VAR 0 4
26601: PUSH
26602: LD_VAR 0 4
26606: PUSH
26607: LD_VAR 0 3
26611: PPUSH
26612: CALL_OW 266
26616: PUSH
26617: LD_VAR 0 3
26621: PPUSH
26622: CALL_OW 250
26626: PUSH
26627: LD_VAR 0 3
26631: PPUSH
26632: CALL_OW 251
26636: PUSH
26637: LD_VAR 0 3
26641: PPUSH
26642: CALL_OW 254
26646: PUSH
26647: LD_VAR 0 3
26651: PPUSH
26652: CALL_OW 267
26656: PUSH
26657: LD_VAR 0 3
26661: PPUSH
26662: CALL_OW 248
26666: PUSH
26667: LD_VAR 0 3
26671: PPUSH
26672: CALL_OW 269
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: PUSH
26686: EMPTY
26687: LIST
26688: ADD
26689: ST_TO_ADDR
26690: GO 26877
// if GetBType ( i ) = b_factory then
26692: LD_VAR 0 3
26696: PPUSH
26697: CALL_OW 266
26701: PUSH
26702: LD_INT 3
26704: EQUAL
26705: IFFALSE 26795
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
26707: LD_ADDR_VAR 0 4
26711: PUSH
26712: LD_VAR 0 4
26716: PPUSH
26717: LD_INT 1
26719: PPUSH
26720: LD_VAR 0 3
26724: PPUSH
26725: CALL_OW 266
26729: PUSH
26730: LD_VAR 0 3
26734: PPUSH
26735: CALL_OW 250
26739: PUSH
26740: LD_VAR 0 3
26744: PPUSH
26745: CALL_OW 251
26749: PUSH
26750: LD_VAR 0 3
26754: PPUSH
26755: CALL_OW 254
26759: PUSH
26760: LD_VAR 0 3
26764: PPUSH
26765: CALL_OW 267
26769: PUSH
26770: LD_VAR 0 3
26774: PPUSH
26775: CALL_OW 248
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: PPUSH
26788: CALL_OW 2
26792: ST_TO_ADDR
26793: GO 26877
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
26795: LD_ADDR_VAR 0 4
26799: PUSH
26800: LD_VAR 0 4
26804: PUSH
26805: LD_VAR 0 3
26809: PPUSH
26810: CALL_OW 266
26814: PUSH
26815: LD_VAR 0 3
26819: PPUSH
26820: CALL_OW 250
26824: PUSH
26825: LD_VAR 0 3
26829: PPUSH
26830: CALL_OW 251
26834: PUSH
26835: LD_VAR 0 3
26839: PPUSH
26840: CALL_OW 254
26844: PUSH
26845: LD_VAR 0 3
26849: PPUSH
26850: CALL_OW 267
26854: PUSH
26855: LD_VAR 0 3
26859: PPUSH
26860: CALL_OW 248
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: PUSH
26873: EMPTY
26874: LIST
26875: ADD
26876: ST_TO_ADDR
// end ;
26877: GO 26441
26879: POP
26880: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
26881: LD_VAR 0 4
26885: PPUSH
26886: LD_STRING 08_GammaBase
26888: PPUSH
26889: CALL_OW 39
// end ; end_of_file
26893: LD_VAR 0 2
26897: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
26898: LD_INT 0
26900: PPUSH
// ar_miner := 81 ;
26901: LD_ADDR_EXP 55
26905: PUSH
26906: LD_INT 81
26908: ST_TO_ADDR
// ar_crane := 88 ;
26909: LD_ADDR_EXP 54
26913: PUSH
26914: LD_INT 88
26916: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
26917: LD_ADDR_EXP 49
26921: PUSH
26922: LD_INT 89
26924: ST_TO_ADDR
// us_hack := 99 ;
26925: LD_ADDR_EXP 50
26929: PUSH
26930: LD_INT 99
26932: ST_TO_ADDR
// us_artillery := 97 ;
26933: LD_ADDR_EXP 51
26937: PUSH
26938: LD_INT 97
26940: ST_TO_ADDR
// ar_bio_bomb := 91 ;
26941: LD_ADDR_EXP 52
26945: PUSH
26946: LD_INT 91
26948: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
26949: LD_ADDR_EXP 53
26953: PUSH
26954: LD_INT 92
26956: ST_TO_ADDR
// ru_radar := 98 ;
26957: LD_ADDR_EXP 48
26961: PUSH
26962: LD_INT 98
26964: ST_TO_ADDR
// tech_Artillery := 80 ;
26965: LD_ADDR_EXP 56
26969: PUSH
26970: LD_INT 80
26972: ST_TO_ADDR
// tech_RadMat := 81 ;
26973: LD_ADDR_EXP 57
26977: PUSH
26978: LD_INT 81
26980: ST_TO_ADDR
// tech_BasicTools := 82 ;
26981: LD_ADDR_EXP 58
26985: PUSH
26986: LD_INT 82
26988: ST_TO_ADDR
// tech_Cargo := 83 ;
26989: LD_ADDR_EXP 59
26993: PUSH
26994: LD_INT 83
26996: ST_TO_ADDR
// tech_Track := 84 ;
26997: LD_ADDR_EXP 60
27001: PUSH
27002: LD_INT 84
27004: ST_TO_ADDR
// tech_Crane := 85 ;
27005: LD_ADDR_EXP 61
27009: PUSH
27010: LD_INT 85
27012: ST_TO_ADDR
// tech_Bulldozer := 86 ;
27013: LD_ADDR_EXP 62
27017: PUSH
27018: LD_INT 86
27020: ST_TO_ADDR
// tech_Hovercraft := 87 ;
27021: LD_ADDR_EXP 63
27025: PUSH
27026: LD_INT 87
27028: ST_TO_ADDR
// class_mastodont := 31 ;
27029: LD_ADDR_EXP 64
27033: PUSH
27034: LD_INT 31
27036: ST_TO_ADDR
// class_horse := 21 ;
27037: LD_ADDR_EXP 65
27041: PUSH
27042: LD_INT 21
27044: ST_TO_ADDR
// end ;
27045: LD_VAR 0 1
27049: RET
// every 1 do
27050: GO 27052
27052: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
27053: CALL 26898 0 0
27057: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27058: LD_INT 0
27060: PPUSH
// if p2 = 100 then
27061: LD_VAR 0 2
27065: PUSH
27066: LD_INT 100
27068: EQUAL
27069: IFFALSE 28018
// begin if not StreamModeActive then
27071: LD_EXP 66
27075: NOT
27076: IFFALSE 27086
// StreamModeActive := true ;
27078: LD_ADDR_EXP 66
27082: PUSH
27083: LD_INT 1
27085: ST_TO_ADDR
// if p3 = 0 then
27086: LD_VAR 0 3
27090: PUSH
27091: LD_INT 0
27093: EQUAL
27094: IFFALSE 27100
// InitStreamMode ;
27096: CALL 28178 0 0
// if p3 = 1 then
27100: LD_VAR 0 3
27104: PUSH
27105: LD_INT 1
27107: EQUAL
27108: IFFALSE 27118
// sRocket := true ;
27110: LD_ADDR_EXP 71
27114: PUSH
27115: LD_INT 1
27117: ST_TO_ADDR
// if p3 = 2 then
27118: LD_VAR 0 3
27122: PUSH
27123: LD_INT 2
27125: EQUAL
27126: IFFALSE 27136
// sSpeed := true ;
27128: LD_ADDR_EXP 70
27132: PUSH
27133: LD_INT 1
27135: ST_TO_ADDR
// if p3 = 3 then
27136: LD_VAR 0 3
27140: PUSH
27141: LD_INT 3
27143: EQUAL
27144: IFFALSE 27154
// sEngine := true ;
27146: LD_ADDR_EXP 72
27150: PUSH
27151: LD_INT 1
27153: ST_TO_ADDR
// if p3 = 4 then
27154: LD_VAR 0 3
27158: PUSH
27159: LD_INT 4
27161: EQUAL
27162: IFFALSE 27172
// sSpec := true ;
27164: LD_ADDR_EXP 69
27168: PUSH
27169: LD_INT 1
27171: ST_TO_ADDR
// if p3 = 5 then
27172: LD_VAR 0 3
27176: PUSH
27177: LD_INT 5
27179: EQUAL
27180: IFFALSE 27190
// sLevel := true ;
27182: LD_ADDR_EXP 73
27186: PUSH
27187: LD_INT 1
27189: ST_TO_ADDR
// if p3 = 6 then
27190: LD_VAR 0 3
27194: PUSH
27195: LD_INT 6
27197: EQUAL
27198: IFFALSE 27208
// sArmoury := true ;
27200: LD_ADDR_EXP 74
27204: PUSH
27205: LD_INT 1
27207: ST_TO_ADDR
// if p3 = 7 then
27208: LD_VAR 0 3
27212: PUSH
27213: LD_INT 7
27215: EQUAL
27216: IFFALSE 27226
// sRadar := true ;
27218: LD_ADDR_EXP 75
27222: PUSH
27223: LD_INT 1
27225: ST_TO_ADDR
// if p3 = 8 then
27226: LD_VAR 0 3
27230: PUSH
27231: LD_INT 8
27233: EQUAL
27234: IFFALSE 27244
// sBunker := true ;
27236: LD_ADDR_EXP 76
27240: PUSH
27241: LD_INT 1
27243: ST_TO_ADDR
// if p3 = 9 then
27244: LD_VAR 0 3
27248: PUSH
27249: LD_INT 9
27251: EQUAL
27252: IFFALSE 27262
// sHack := true ;
27254: LD_ADDR_EXP 77
27258: PUSH
27259: LD_INT 1
27261: ST_TO_ADDR
// if p3 = 10 then
27262: LD_VAR 0 3
27266: PUSH
27267: LD_INT 10
27269: EQUAL
27270: IFFALSE 27280
// sFire := true ;
27272: LD_ADDR_EXP 78
27276: PUSH
27277: LD_INT 1
27279: ST_TO_ADDR
// if p3 = 11 then
27280: LD_VAR 0 3
27284: PUSH
27285: LD_INT 11
27287: EQUAL
27288: IFFALSE 27298
// sRefresh := true ;
27290: LD_ADDR_EXP 79
27294: PUSH
27295: LD_INT 1
27297: ST_TO_ADDR
// if p3 = 12 then
27298: LD_VAR 0 3
27302: PUSH
27303: LD_INT 12
27305: EQUAL
27306: IFFALSE 27316
// sExp := true ;
27308: LD_ADDR_EXP 80
27312: PUSH
27313: LD_INT 1
27315: ST_TO_ADDR
// if p3 = 13 then
27316: LD_VAR 0 3
27320: PUSH
27321: LD_INT 13
27323: EQUAL
27324: IFFALSE 27334
// sDepot := true ;
27326: LD_ADDR_EXP 81
27330: PUSH
27331: LD_INT 1
27333: ST_TO_ADDR
// if p3 = 14 then
27334: LD_VAR 0 3
27338: PUSH
27339: LD_INT 14
27341: EQUAL
27342: IFFALSE 27352
// sFlag := true ;
27344: LD_ADDR_EXP 82
27348: PUSH
27349: LD_INT 1
27351: ST_TO_ADDR
// if p3 = 15 then
27352: LD_VAR 0 3
27356: PUSH
27357: LD_INT 15
27359: EQUAL
27360: IFFALSE 27370
// sKamikadze := true ;
27362: LD_ADDR_EXP 90
27366: PUSH
27367: LD_INT 1
27369: ST_TO_ADDR
// if p3 = 16 then
27370: LD_VAR 0 3
27374: PUSH
27375: LD_INT 16
27377: EQUAL
27378: IFFALSE 27388
// sTroll := true ;
27380: LD_ADDR_EXP 91
27384: PUSH
27385: LD_INT 1
27387: ST_TO_ADDR
// if p3 = 17 then
27388: LD_VAR 0 3
27392: PUSH
27393: LD_INT 17
27395: EQUAL
27396: IFFALSE 27406
// sSlow := true ;
27398: LD_ADDR_EXP 92
27402: PUSH
27403: LD_INT 1
27405: ST_TO_ADDR
// if p3 = 18 then
27406: LD_VAR 0 3
27410: PUSH
27411: LD_INT 18
27413: EQUAL
27414: IFFALSE 27424
// sLack := true ;
27416: LD_ADDR_EXP 93
27420: PUSH
27421: LD_INT 1
27423: ST_TO_ADDR
// if p3 = 19 then
27424: LD_VAR 0 3
27428: PUSH
27429: LD_INT 19
27431: EQUAL
27432: IFFALSE 27442
// sTank := true ;
27434: LD_ADDR_EXP 95
27438: PUSH
27439: LD_INT 1
27441: ST_TO_ADDR
// if p3 = 20 then
27442: LD_VAR 0 3
27446: PUSH
27447: LD_INT 20
27449: EQUAL
27450: IFFALSE 27460
// sRemote := true ;
27452: LD_ADDR_EXP 96
27456: PUSH
27457: LD_INT 1
27459: ST_TO_ADDR
// if p3 = 21 then
27460: LD_VAR 0 3
27464: PUSH
27465: LD_INT 21
27467: EQUAL
27468: IFFALSE 27478
// sPowell := true ;
27470: LD_ADDR_EXP 97
27474: PUSH
27475: LD_INT 1
27477: ST_TO_ADDR
// if p3 = 22 then
27478: LD_VAR 0 3
27482: PUSH
27483: LD_INT 22
27485: EQUAL
27486: IFFALSE 27496
// sTeleport := true ;
27488: LD_ADDR_EXP 100
27492: PUSH
27493: LD_INT 1
27495: ST_TO_ADDR
// if p3 = 23 then
27496: LD_VAR 0 3
27500: PUSH
27501: LD_INT 23
27503: EQUAL
27504: IFFALSE 27514
// sOilTower := true ;
27506: LD_ADDR_EXP 102
27510: PUSH
27511: LD_INT 1
27513: ST_TO_ADDR
// if p3 = 24 then
27514: LD_VAR 0 3
27518: PUSH
27519: LD_INT 24
27521: EQUAL
27522: IFFALSE 27532
// sShovel := true ;
27524: LD_ADDR_EXP 103
27528: PUSH
27529: LD_INT 1
27531: ST_TO_ADDR
// if p3 = 25 then
27532: LD_VAR 0 3
27536: PUSH
27537: LD_INT 25
27539: EQUAL
27540: IFFALSE 27550
// sSheik := true ;
27542: LD_ADDR_EXP 104
27546: PUSH
27547: LD_INT 1
27549: ST_TO_ADDR
// if p3 = 26 then
27550: LD_VAR 0 3
27554: PUSH
27555: LD_INT 26
27557: EQUAL
27558: IFFALSE 27568
// sEarthquake := true ;
27560: LD_ADDR_EXP 106
27564: PUSH
27565: LD_INT 1
27567: ST_TO_ADDR
// if p3 = 27 then
27568: LD_VAR 0 3
27572: PUSH
27573: LD_INT 27
27575: EQUAL
27576: IFFALSE 27586
// sAI := true ;
27578: LD_ADDR_EXP 107
27582: PUSH
27583: LD_INT 1
27585: ST_TO_ADDR
// if p3 = 28 then
27586: LD_VAR 0 3
27590: PUSH
27591: LD_INT 28
27593: EQUAL
27594: IFFALSE 27604
// sCargo := true ;
27596: LD_ADDR_EXP 110
27600: PUSH
27601: LD_INT 1
27603: ST_TO_ADDR
// if p3 = 29 then
27604: LD_VAR 0 3
27608: PUSH
27609: LD_INT 29
27611: EQUAL
27612: IFFALSE 27622
// sDLaser := true ;
27614: LD_ADDR_EXP 111
27618: PUSH
27619: LD_INT 1
27621: ST_TO_ADDR
// if p3 = 30 then
27622: LD_VAR 0 3
27626: PUSH
27627: LD_INT 30
27629: EQUAL
27630: IFFALSE 27640
// sExchange := true ;
27632: LD_ADDR_EXP 112
27636: PUSH
27637: LD_INT 1
27639: ST_TO_ADDR
// if p3 = 31 then
27640: LD_VAR 0 3
27644: PUSH
27645: LD_INT 31
27647: EQUAL
27648: IFFALSE 27658
// sFac := true ;
27650: LD_ADDR_EXP 113
27654: PUSH
27655: LD_INT 1
27657: ST_TO_ADDR
// if p3 = 32 then
27658: LD_VAR 0 3
27662: PUSH
27663: LD_INT 32
27665: EQUAL
27666: IFFALSE 27676
// sPower := true ;
27668: LD_ADDR_EXP 114
27672: PUSH
27673: LD_INT 1
27675: ST_TO_ADDR
// if p3 = 33 then
27676: LD_VAR 0 3
27680: PUSH
27681: LD_INT 33
27683: EQUAL
27684: IFFALSE 27694
// sRandom := true ;
27686: LD_ADDR_EXP 115
27690: PUSH
27691: LD_INT 1
27693: ST_TO_ADDR
// if p3 = 34 then
27694: LD_VAR 0 3
27698: PUSH
27699: LD_INT 34
27701: EQUAL
27702: IFFALSE 27712
// sShield := true ;
27704: LD_ADDR_EXP 116
27708: PUSH
27709: LD_INT 1
27711: ST_TO_ADDR
// if p3 = 35 then
27712: LD_VAR 0 3
27716: PUSH
27717: LD_INT 35
27719: EQUAL
27720: IFFALSE 27730
// sTime := true ;
27722: LD_ADDR_EXP 117
27726: PUSH
27727: LD_INT 1
27729: ST_TO_ADDR
// if p3 = 36 then
27730: LD_VAR 0 3
27734: PUSH
27735: LD_INT 36
27737: EQUAL
27738: IFFALSE 27748
// sTools := true ;
27740: LD_ADDR_EXP 118
27744: PUSH
27745: LD_INT 1
27747: ST_TO_ADDR
// if p3 = 101 then
27748: LD_VAR 0 3
27752: PUSH
27753: LD_INT 101
27755: EQUAL
27756: IFFALSE 27766
// sSold := true ;
27758: LD_ADDR_EXP 83
27762: PUSH
27763: LD_INT 1
27765: ST_TO_ADDR
// if p3 = 102 then
27766: LD_VAR 0 3
27770: PUSH
27771: LD_INT 102
27773: EQUAL
27774: IFFALSE 27784
// sDiff := true ;
27776: LD_ADDR_EXP 84
27780: PUSH
27781: LD_INT 1
27783: ST_TO_ADDR
// if p3 = 103 then
27784: LD_VAR 0 3
27788: PUSH
27789: LD_INT 103
27791: EQUAL
27792: IFFALSE 27802
// sFog := true ;
27794: LD_ADDR_EXP 87
27798: PUSH
27799: LD_INT 1
27801: ST_TO_ADDR
// if p3 = 104 then
27802: LD_VAR 0 3
27806: PUSH
27807: LD_INT 104
27809: EQUAL
27810: IFFALSE 27820
// sReset := true ;
27812: LD_ADDR_EXP 88
27816: PUSH
27817: LD_INT 1
27819: ST_TO_ADDR
// if p3 = 105 then
27820: LD_VAR 0 3
27824: PUSH
27825: LD_INT 105
27827: EQUAL
27828: IFFALSE 27838
// sSun := true ;
27830: LD_ADDR_EXP 89
27834: PUSH
27835: LD_INT 1
27837: ST_TO_ADDR
// if p3 = 106 then
27838: LD_VAR 0 3
27842: PUSH
27843: LD_INT 106
27845: EQUAL
27846: IFFALSE 27856
// sTiger := true ;
27848: LD_ADDR_EXP 85
27852: PUSH
27853: LD_INT 1
27855: ST_TO_ADDR
// if p3 = 107 then
27856: LD_VAR 0 3
27860: PUSH
27861: LD_INT 107
27863: EQUAL
27864: IFFALSE 27874
// sBomb := true ;
27866: LD_ADDR_EXP 86
27870: PUSH
27871: LD_INT 1
27873: ST_TO_ADDR
// if p3 = 108 then
27874: LD_VAR 0 3
27878: PUSH
27879: LD_INT 108
27881: EQUAL
27882: IFFALSE 27892
// sWound := true ;
27884: LD_ADDR_EXP 94
27888: PUSH
27889: LD_INT 1
27891: ST_TO_ADDR
// if p3 = 109 then
27892: LD_VAR 0 3
27896: PUSH
27897: LD_INT 109
27899: EQUAL
27900: IFFALSE 27910
// sBetray := true ;
27902: LD_ADDR_EXP 98
27906: PUSH
27907: LD_INT 1
27909: ST_TO_ADDR
// if p3 = 110 then
27910: LD_VAR 0 3
27914: PUSH
27915: LD_INT 110
27917: EQUAL
27918: IFFALSE 27928
// sContamin := true ;
27920: LD_ADDR_EXP 99
27924: PUSH
27925: LD_INT 1
27927: ST_TO_ADDR
// if p3 = 111 then
27928: LD_VAR 0 3
27932: PUSH
27933: LD_INT 111
27935: EQUAL
27936: IFFALSE 27946
// sOil := true ;
27938: LD_ADDR_EXP 101
27942: PUSH
27943: LD_INT 1
27945: ST_TO_ADDR
// if p3 = 112 then
27946: LD_VAR 0 3
27950: PUSH
27951: LD_INT 112
27953: EQUAL
27954: IFFALSE 27964
// sStu := true ;
27956: LD_ADDR_EXP 105
27960: PUSH
27961: LD_INT 1
27963: ST_TO_ADDR
// if p3 = 113 then
27964: LD_VAR 0 3
27968: PUSH
27969: LD_INT 113
27971: EQUAL
27972: IFFALSE 27982
// sBazooka := true ;
27974: LD_ADDR_EXP 108
27978: PUSH
27979: LD_INT 1
27981: ST_TO_ADDR
// if p3 = 114 then
27982: LD_VAR 0 3
27986: PUSH
27987: LD_INT 114
27989: EQUAL
27990: IFFALSE 28000
// sMortar := true ;
27992: LD_ADDR_EXP 109
27996: PUSH
27997: LD_INT 1
27999: ST_TO_ADDR
// if p3 = 115 then
28000: LD_VAR 0 3
28004: PUSH
28005: LD_INT 115
28007: EQUAL
28008: IFFALSE 28018
// sRanger := true ;
28010: LD_ADDR_EXP 119
28014: PUSH
28015: LD_INT 1
28017: ST_TO_ADDR
// end ; if p2 = 101 then
28018: LD_VAR 0 2
28022: PUSH
28023: LD_INT 101
28025: EQUAL
28026: IFFALSE 28154
// begin case p3 of 1 :
28028: LD_VAR 0 3
28032: PUSH
28033: LD_INT 1
28035: DOUBLE
28036: EQUAL
28037: IFTRUE 28041
28039: GO 28048
28041: POP
// hHackUnlimitedResources ; 2 :
28042: CALL 39191 0 0
28046: GO 28154
28048: LD_INT 2
28050: DOUBLE
28051: EQUAL
28052: IFTRUE 28056
28054: GO 28063
28056: POP
// hHackSetLevel10 ; 3 :
28057: CALL 39324 0 0
28061: GO 28154
28063: LD_INT 3
28065: DOUBLE
28066: EQUAL
28067: IFTRUE 28071
28069: GO 28078
28071: POP
// hHackSetLevel10YourUnits ; 4 :
28072: CALL 39409 0 0
28076: GO 28154
28078: LD_INT 4
28080: DOUBLE
28081: EQUAL
28082: IFTRUE 28086
28084: GO 28093
28086: POP
// hHackInvincible ; 5 :
28087: CALL 39857 0 0
28091: GO 28154
28093: LD_INT 5
28095: DOUBLE
28096: EQUAL
28097: IFTRUE 28101
28099: GO 28108
28101: POP
// hHackInvisible ; 6 :
28102: CALL 39968 0 0
28106: GO 28154
28108: LD_INT 6
28110: DOUBLE
28111: EQUAL
28112: IFTRUE 28116
28114: GO 28123
28116: POP
// hHackChangeYourSide ; 7 :
28117: CALL 40025 0 0
28121: GO 28154
28123: LD_INT 7
28125: DOUBLE
28126: EQUAL
28127: IFTRUE 28131
28129: GO 28138
28131: POP
// hHackChangeUnitSide ; 8 :
28132: CALL 40067 0 0
28136: GO 28154
28138: LD_INT 8
28140: DOUBLE
28141: EQUAL
28142: IFTRUE 28146
28144: GO 28153
28146: POP
// hHackFog ; end ;
28147: CALL 40168 0 0
28151: GO 28154
28153: POP
// end ; end ;
28154: LD_VAR 0 7
28158: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
28159: GO 28161
28161: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
28162: LD_STRING initStreamRollete();
28164: PPUSH
28165: CALL_OW 559
// InitStreamMode ;
28169: CALL 28178 0 0
// DefineStreamItems ( ) ;
28173: CALL 28618 0 0
// end ;
28177: END
// function InitStreamMode ; begin
28178: LD_INT 0
28180: PPUSH
// streamModeActive := false ;
28181: LD_ADDR_EXP 66
28185: PUSH
28186: LD_INT 0
28188: ST_TO_ADDR
// normalCounter := 36 ;
28189: LD_ADDR_EXP 67
28193: PUSH
28194: LD_INT 36
28196: ST_TO_ADDR
// hardcoreCounter := 16 ;
28197: LD_ADDR_EXP 68
28201: PUSH
28202: LD_INT 16
28204: ST_TO_ADDR
// sRocket := false ;
28205: LD_ADDR_EXP 71
28209: PUSH
28210: LD_INT 0
28212: ST_TO_ADDR
// sSpeed := false ;
28213: LD_ADDR_EXP 70
28217: PUSH
28218: LD_INT 0
28220: ST_TO_ADDR
// sEngine := false ;
28221: LD_ADDR_EXP 72
28225: PUSH
28226: LD_INT 0
28228: ST_TO_ADDR
// sSpec := false ;
28229: LD_ADDR_EXP 69
28233: PUSH
28234: LD_INT 0
28236: ST_TO_ADDR
// sLevel := false ;
28237: LD_ADDR_EXP 73
28241: PUSH
28242: LD_INT 0
28244: ST_TO_ADDR
// sArmoury := false ;
28245: LD_ADDR_EXP 74
28249: PUSH
28250: LD_INT 0
28252: ST_TO_ADDR
// sRadar := false ;
28253: LD_ADDR_EXP 75
28257: PUSH
28258: LD_INT 0
28260: ST_TO_ADDR
// sBunker := false ;
28261: LD_ADDR_EXP 76
28265: PUSH
28266: LD_INT 0
28268: ST_TO_ADDR
// sHack := false ;
28269: LD_ADDR_EXP 77
28273: PUSH
28274: LD_INT 0
28276: ST_TO_ADDR
// sFire := false ;
28277: LD_ADDR_EXP 78
28281: PUSH
28282: LD_INT 0
28284: ST_TO_ADDR
// sRefresh := false ;
28285: LD_ADDR_EXP 79
28289: PUSH
28290: LD_INT 0
28292: ST_TO_ADDR
// sExp := false ;
28293: LD_ADDR_EXP 80
28297: PUSH
28298: LD_INT 0
28300: ST_TO_ADDR
// sDepot := false ;
28301: LD_ADDR_EXP 81
28305: PUSH
28306: LD_INT 0
28308: ST_TO_ADDR
// sFlag := false ;
28309: LD_ADDR_EXP 82
28313: PUSH
28314: LD_INT 0
28316: ST_TO_ADDR
// sKamikadze := false ;
28317: LD_ADDR_EXP 90
28321: PUSH
28322: LD_INT 0
28324: ST_TO_ADDR
// sTroll := false ;
28325: LD_ADDR_EXP 91
28329: PUSH
28330: LD_INT 0
28332: ST_TO_ADDR
// sSlow := false ;
28333: LD_ADDR_EXP 92
28337: PUSH
28338: LD_INT 0
28340: ST_TO_ADDR
// sLack := false ;
28341: LD_ADDR_EXP 93
28345: PUSH
28346: LD_INT 0
28348: ST_TO_ADDR
// sTank := false ;
28349: LD_ADDR_EXP 95
28353: PUSH
28354: LD_INT 0
28356: ST_TO_ADDR
// sRemote := false ;
28357: LD_ADDR_EXP 96
28361: PUSH
28362: LD_INT 0
28364: ST_TO_ADDR
// sPowell := false ;
28365: LD_ADDR_EXP 97
28369: PUSH
28370: LD_INT 0
28372: ST_TO_ADDR
// sTeleport := false ;
28373: LD_ADDR_EXP 100
28377: PUSH
28378: LD_INT 0
28380: ST_TO_ADDR
// sOilTower := false ;
28381: LD_ADDR_EXP 102
28385: PUSH
28386: LD_INT 0
28388: ST_TO_ADDR
// sShovel := false ;
28389: LD_ADDR_EXP 103
28393: PUSH
28394: LD_INT 0
28396: ST_TO_ADDR
// sSheik := false ;
28397: LD_ADDR_EXP 104
28401: PUSH
28402: LD_INT 0
28404: ST_TO_ADDR
// sEarthquake := false ;
28405: LD_ADDR_EXP 106
28409: PUSH
28410: LD_INT 0
28412: ST_TO_ADDR
// sAI := false ;
28413: LD_ADDR_EXP 107
28417: PUSH
28418: LD_INT 0
28420: ST_TO_ADDR
// sCargo := false ;
28421: LD_ADDR_EXP 110
28425: PUSH
28426: LD_INT 0
28428: ST_TO_ADDR
// sDLaser := false ;
28429: LD_ADDR_EXP 111
28433: PUSH
28434: LD_INT 0
28436: ST_TO_ADDR
// sExchange := false ;
28437: LD_ADDR_EXP 112
28441: PUSH
28442: LD_INT 0
28444: ST_TO_ADDR
// sFac := false ;
28445: LD_ADDR_EXP 113
28449: PUSH
28450: LD_INT 0
28452: ST_TO_ADDR
// sPower := false ;
28453: LD_ADDR_EXP 114
28457: PUSH
28458: LD_INT 0
28460: ST_TO_ADDR
// sRandom := false ;
28461: LD_ADDR_EXP 115
28465: PUSH
28466: LD_INT 0
28468: ST_TO_ADDR
// sShield := false ;
28469: LD_ADDR_EXP 116
28473: PUSH
28474: LD_INT 0
28476: ST_TO_ADDR
// sTime := false ;
28477: LD_ADDR_EXP 117
28481: PUSH
28482: LD_INT 0
28484: ST_TO_ADDR
// sTools := false ;
28485: LD_ADDR_EXP 118
28489: PUSH
28490: LD_INT 0
28492: ST_TO_ADDR
// sSold := false ;
28493: LD_ADDR_EXP 83
28497: PUSH
28498: LD_INT 0
28500: ST_TO_ADDR
// sDiff := false ;
28501: LD_ADDR_EXP 84
28505: PUSH
28506: LD_INT 0
28508: ST_TO_ADDR
// sFog := false ;
28509: LD_ADDR_EXP 87
28513: PUSH
28514: LD_INT 0
28516: ST_TO_ADDR
// sReset := false ;
28517: LD_ADDR_EXP 88
28521: PUSH
28522: LD_INT 0
28524: ST_TO_ADDR
// sSun := false ;
28525: LD_ADDR_EXP 89
28529: PUSH
28530: LD_INT 0
28532: ST_TO_ADDR
// sTiger := false ;
28533: LD_ADDR_EXP 85
28537: PUSH
28538: LD_INT 0
28540: ST_TO_ADDR
// sBomb := false ;
28541: LD_ADDR_EXP 86
28545: PUSH
28546: LD_INT 0
28548: ST_TO_ADDR
// sWound := false ;
28549: LD_ADDR_EXP 94
28553: PUSH
28554: LD_INT 0
28556: ST_TO_ADDR
// sBetray := false ;
28557: LD_ADDR_EXP 98
28561: PUSH
28562: LD_INT 0
28564: ST_TO_ADDR
// sContamin := false ;
28565: LD_ADDR_EXP 99
28569: PUSH
28570: LD_INT 0
28572: ST_TO_ADDR
// sOil := false ;
28573: LD_ADDR_EXP 101
28577: PUSH
28578: LD_INT 0
28580: ST_TO_ADDR
// sStu := false ;
28581: LD_ADDR_EXP 105
28585: PUSH
28586: LD_INT 0
28588: ST_TO_ADDR
// sBazooka := false ;
28589: LD_ADDR_EXP 108
28593: PUSH
28594: LD_INT 0
28596: ST_TO_ADDR
// sMortar := false ;
28597: LD_ADDR_EXP 109
28601: PUSH
28602: LD_INT 0
28604: ST_TO_ADDR
// sRanger := false ;
28605: LD_ADDR_EXP 119
28609: PUSH
28610: LD_INT 0
28612: ST_TO_ADDR
// end ;
28613: LD_VAR 0 1
28617: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
28618: LD_INT 0
28620: PPUSH
28621: PPUSH
28622: PPUSH
28623: PPUSH
28624: PPUSH
// result := [ ] ;
28625: LD_ADDR_VAR 0 1
28629: PUSH
28630: EMPTY
28631: ST_TO_ADDR
// if campaign_id = 1 then
28632: LD_OWVAR 69
28636: PUSH
28637: LD_INT 1
28639: EQUAL
28640: IFFALSE 31578
// begin case mission_number of 1 :
28642: LD_OWVAR 70
28646: PUSH
28647: LD_INT 1
28649: DOUBLE
28650: EQUAL
28651: IFTRUE 28655
28653: GO 28719
28655: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
28656: LD_ADDR_VAR 0 1
28660: PUSH
28661: LD_INT 2
28663: PUSH
28664: LD_INT 4
28666: PUSH
28667: LD_INT 11
28669: PUSH
28670: LD_INT 12
28672: PUSH
28673: LD_INT 15
28675: PUSH
28676: LD_INT 16
28678: PUSH
28679: LD_INT 22
28681: PUSH
28682: LD_INT 23
28684: PUSH
28685: LD_INT 26
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 101
28701: PUSH
28702: LD_INT 102
28704: PUSH
28705: LD_INT 106
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: LIST
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: ST_TO_ADDR
28717: GO 31576
28719: LD_INT 2
28721: DOUBLE
28722: EQUAL
28723: IFTRUE 28727
28725: GO 28799
28727: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
28728: LD_ADDR_VAR 0 1
28732: PUSH
28733: LD_INT 2
28735: PUSH
28736: LD_INT 4
28738: PUSH
28739: LD_INT 11
28741: PUSH
28742: LD_INT 12
28744: PUSH
28745: LD_INT 15
28747: PUSH
28748: LD_INT 16
28750: PUSH
28751: LD_INT 22
28753: PUSH
28754: LD_INT 23
28756: PUSH
28757: LD_INT 26
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 101
28773: PUSH
28774: LD_INT 102
28776: PUSH
28777: LD_INT 105
28779: PUSH
28780: LD_INT 106
28782: PUSH
28783: LD_INT 108
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: ST_TO_ADDR
28797: GO 31576
28799: LD_INT 3
28801: DOUBLE
28802: EQUAL
28803: IFTRUE 28807
28805: GO 28883
28807: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
28808: LD_ADDR_VAR 0 1
28812: PUSH
28813: LD_INT 2
28815: PUSH
28816: LD_INT 4
28818: PUSH
28819: LD_INT 5
28821: PUSH
28822: LD_INT 11
28824: PUSH
28825: LD_INT 12
28827: PUSH
28828: LD_INT 15
28830: PUSH
28831: LD_INT 16
28833: PUSH
28834: LD_INT 22
28836: PUSH
28837: LD_INT 26
28839: PUSH
28840: LD_INT 36
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 101
28857: PUSH
28858: LD_INT 102
28860: PUSH
28861: LD_INT 105
28863: PUSH
28864: LD_INT 106
28866: PUSH
28867: LD_INT 108
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: ST_TO_ADDR
28881: GO 31576
28883: LD_INT 4
28885: DOUBLE
28886: EQUAL
28887: IFTRUE 28891
28889: GO 28975
28891: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
28892: LD_ADDR_VAR 0 1
28896: PUSH
28897: LD_INT 2
28899: PUSH
28900: LD_INT 4
28902: PUSH
28903: LD_INT 5
28905: PUSH
28906: LD_INT 8
28908: PUSH
28909: LD_INT 11
28911: PUSH
28912: LD_INT 12
28914: PUSH
28915: LD_INT 15
28917: PUSH
28918: LD_INT 16
28920: PUSH
28921: LD_INT 22
28923: PUSH
28924: LD_INT 23
28926: PUSH
28927: LD_INT 26
28929: PUSH
28930: LD_INT 36
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 101
28949: PUSH
28950: LD_INT 102
28952: PUSH
28953: LD_INT 105
28955: PUSH
28956: LD_INT 106
28958: PUSH
28959: LD_INT 108
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: ST_TO_ADDR
28973: GO 31576
28975: LD_INT 5
28977: DOUBLE
28978: EQUAL
28979: IFTRUE 28983
28981: GO 29083
28983: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
28984: LD_ADDR_VAR 0 1
28988: PUSH
28989: LD_INT 2
28991: PUSH
28992: LD_INT 4
28994: PUSH
28995: LD_INT 5
28997: PUSH
28998: LD_INT 6
29000: PUSH
29001: LD_INT 8
29003: PUSH
29004: LD_INT 11
29006: PUSH
29007: LD_INT 12
29009: PUSH
29010: LD_INT 15
29012: PUSH
29013: LD_INT 16
29015: PUSH
29016: LD_INT 22
29018: PUSH
29019: LD_INT 23
29021: PUSH
29022: LD_INT 25
29024: PUSH
29025: LD_INT 26
29027: PUSH
29028: LD_INT 36
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 101
29049: PUSH
29050: LD_INT 102
29052: PUSH
29053: LD_INT 105
29055: PUSH
29056: LD_INT 106
29058: PUSH
29059: LD_INT 108
29061: PUSH
29062: LD_INT 109
29064: PUSH
29065: LD_INT 112
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: ST_TO_ADDR
29081: GO 31576
29083: LD_INT 6
29085: DOUBLE
29086: EQUAL
29087: IFTRUE 29091
29089: GO 29211
29091: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
29092: LD_ADDR_VAR 0 1
29096: PUSH
29097: LD_INT 2
29099: PUSH
29100: LD_INT 4
29102: PUSH
29103: LD_INT 5
29105: PUSH
29106: LD_INT 6
29108: PUSH
29109: LD_INT 8
29111: PUSH
29112: LD_INT 11
29114: PUSH
29115: LD_INT 12
29117: PUSH
29118: LD_INT 15
29120: PUSH
29121: LD_INT 16
29123: PUSH
29124: LD_INT 20
29126: PUSH
29127: LD_INT 21
29129: PUSH
29130: LD_INT 22
29132: PUSH
29133: LD_INT 23
29135: PUSH
29136: LD_INT 25
29138: PUSH
29139: LD_INT 26
29141: PUSH
29142: LD_INT 30
29144: PUSH
29145: LD_INT 31
29147: PUSH
29148: LD_INT 32
29150: PUSH
29151: LD_INT 36
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 101
29177: PUSH
29178: LD_INT 102
29180: PUSH
29181: LD_INT 105
29183: PUSH
29184: LD_INT 106
29186: PUSH
29187: LD_INT 108
29189: PUSH
29190: LD_INT 109
29192: PUSH
29193: LD_INT 112
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: ST_TO_ADDR
29209: GO 31576
29211: LD_INT 7
29213: DOUBLE
29214: EQUAL
29215: IFTRUE 29219
29217: GO 29319
29219: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
29220: LD_ADDR_VAR 0 1
29224: PUSH
29225: LD_INT 2
29227: PUSH
29228: LD_INT 4
29230: PUSH
29231: LD_INT 5
29233: PUSH
29234: LD_INT 7
29236: PUSH
29237: LD_INT 11
29239: PUSH
29240: LD_INT 12
29242: PUSH
29243: LD_INT 15
29245: PUSH
29246: LD_INT 16
29248: PUSH
29249: LD_INT 20
29251: PUSH
29252: LD_INT 21
29254: PUSH
29255: LD_INT 22
29257: PUSH
29258: LD_INT 23
29260: PUSH
29261: LD_INT 25
29263: PUSH
29264: LD_INT 26
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 101
29285: PUSH
29286: LD_INT 102
29288: PUSH
29289: LD_INT 103
29291: PUSH
29292: LD_INT 105
29294: PUSH
29295: LD_INT 106
29297: PUSH
29298: LD_INT 108
29300: PUSH
29301: LD_INT 112
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: ST_TO_ADDR
29317: GO 31576
29319: LD_INT 8
29321: DOUBLE
29322: EQUAL
29323: IFTRUE 29327
29325: GO 29455
29327: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
29328: LD_ADDR_VAR 0 1
29332: PUSH
29333: LD_INT 2
29335: PUSH
29336: LD_INT 4
29338: PUSH
29339: LD_INT 5
29341: PUSH
29342: LD_INT 6
29344: PUSH
29345: LD_INT 7
29347: PUSH
29348: LD_INT 8
29350: PUSH
29351: LD_INT 11
29353: PUSH
29354: LD_INT 12
29356: PUSH
29357: LD_INT 15
29359: PUSH
29360: LD_INT 16
29362: PUSH
29363: LD_INT 20
29365: PUSH
29366: LD_INT 21
29368: PUSH
29369: LD_INT 22
29371: PUSH
29372: LD_INT 23
29374: PUSH
29375: LD_INT 25
29377: PUSH
29378: LD_INT 26
29380: PUSH
29381: LD_INT 30
29383: PUSH
29384: LD_INT 31
29386: PUSH
29387: LD_INT 32
29389: PUSH
29390: LD_INT 36
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 101
29417: PUSH
29418: LD_INT 102
29420: PUSH
29421: LD_INT 103
29423: PUSH
29424: LD_INT 105
29426: PUSH
29427: LD_INT 106
29429: PUSH
29430: LD_INT 108
29432: PUSH
29433: LD_INT 109
29435: PUSH
29436: LD_INT 112
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: ST_TO_ADDR
29453: GO 31576
29455: LD_INT 9
29457: DOUBLE
29458: EQUAL
29459: IFTRUE 29463
29461: GO 29599
29463: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
29464: LD_ADDR_VAR 0 1
29468: PUSH
29469: LD_INT 2
29471: PUSH
29472: LD_INT 4
29474: PUSH
29475: LD_INT 5
29477: PUSH
29478: LD_INT 6
29480: PUSH
29481: LD_INT 7
29483: PUSH
29484: LD_INT 8
29486: PUSH
29487: LD_INT 11
29489: PUSH
29490: LD_INT 12
29492: PUSH
29493: LD_INT 15
29495: PUSH
29496: LD_INT 16
29498: PUSH
29499: LD_INT 20
29501: PUSH
29502: LD_INT 21
29504: PUSH
29505: LD_INT 22
29507: PUSH
29508: LD_INT 23
29510: PUSH
29511: LD_INT 25
29513: PUSH
29514: LD_INT 26
29516: PUSH
29517: LD_INT 28
29519: PUSH
29520: LD_INT 30
29522: PUSH
29523: LD_INT 31
29525: PUSH
29526: LD_INT 32
29528: PUSH
29529: LD_INT 36
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 101
29557: PUSH
29558: LD_INT 102
29560: PUSH
29561: LD_INT 103
29563: PUSH
29564: LD_INT 105
29566: PUSH
29567: LD_INT 106
29569: PUSH
29570: LD_INT 108
29572: PUSH
29573: LD_INT 109
29575: PUSH
29576: LD_INT 112
29578: PUSH
29579: LD_INT 114
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: ST_TO_ADDR
29597: GO 31576
29599: LD_INT 10
29601: DOUBLE
29602: EQUAL
29603: IFTRUE 29607
29605: GO 29791
29607: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
29608: LD_ADDR_VAR 0 1
29612: PUSH
29613: LD_INT 2
29615: PUSH
29616: LD_INT 4
29618: PUSH
29619: LD_INT 5
29621: PUSH
29622: LD_INT 6
29624: PUSH
29625: LD_INT 7
29627: PUSH
29628: LD_INT 8
29630: PUSH
29631: LD_INT 9
29633: PUSH
29634: LD_INT 10
29636: PUSH
29637: LD_INT 11
29639: PUSH
29640: LD_INT 12
29642: PUSH
29643: LD_INT 13
29645: PUSH
29646: LD_INT 14
29648: PUSH
29649: LD_INT 15
29651: PUSH
29652: LD_INT 16
29654: PUSH
29655: LD_INT 17
29657: PUSH
29658: LD_INT 18
29660: PUSH
29661: LD_INT 19
29663: PUSH
29664: LD_INT 20
29666: PUSH
29667: LD_INT 21
29669: PUSH
29670: LD_INT 22
29672: PUSH
29673: LD_INT 23
29675: PUSH
29676: LD_INT 24
29678: PUSH
29679: LD_INT 25
29681: PUSH
29682: LD_INT 26
29684: PUSH
29685: LD_INT 28
29687: PUSH
29688: LD_INT 30
29690: PUSH
29691: LD_INT 31
29693: PUSH
29694: LD_INT 32
29696: PUSH
29697: LD_INT 36
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 101
29733: PUSH
29734: LD_INT 102
29736: PUSH
29737: LD_INT 103
29739: PUSH
29740: LD_INT 104
29742: PUSH
29743: LD_INT 105
29745: PUSH
29746: LD_INT 106
29748: PUSH
29749: LD_INT 107
29751: PUSH
29752: LD_INT 108
29754: PUSH
29755: LD_INT 109
29757: PUSH
29758: LD_INT 110
29760: PUSH
29761: LD_INT 111
29763: PUSH
29764: LD_INT 112
29766: PUSH
29767: LD_INT 114
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: ST_TO_ADDR
29789: GO 31576
29791: LD_INT 11
29793: DOUBLE
29794: EQUAL
29795: IFTRUE 29799
29797: GO 29991
29799: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
29800: LD_ADDR_VAR 0 1
29804: PUSH
29805: LD_INT 2
29807: PUSH
29808: LD_INT 3
29810: PUSH
29811: LD_INT 4
29813: PUSH
29814: LD_INT 5
29816: PUSH
29817: LD_INT 6
29819: PUSH
29820: LD_INT 7
29822: PUSH
29823: LD_INT 8
29825: PUSH
29826: LD_INT 9
29828: PUSH
29829: LD_INT 10
29831: PUSH
29832: LD_INT 11
29834: PUSH
29835: LD_INT 12
29837: PUSH
29838: LD_INT 13
29840: PUSH
29841: LD_INT 14
29843: PUSH
29844: LD_INT 15
29846: PUSH
29847: LD_INT 16
29849: PUSH
29850: LD_INT 17
29852: PUSH
29853: LD_INT 18
29855: PUSH
29856: LD_INT 19
29858: PUSH
29859: LD_INT 20
29861: PUSH
29862: LD_INT 21
29864: PUSH
29865: LD_INT 22
29867: PUSH
29868: LD_INT 23
29870: PUSH
29871: LD_INT 24
29873: PUSH
29874: LD_INT 25
29876: PUSH
29877: LD_INT 26
29879: PUSH
29880: LD_INT 28
29882: PUSH
29883: LD_INT 30
29885: PUSH
29886: LD_INT 31
29888: PUSH
29889: LD_INT 32
29891: PUSH
29892: LD_INT 34
29894: PUSH
29895: LD_INT 36
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 101
29933: PUSH
29934: LD_INT 102
29936: PUSH
29937: LD_INT 103
29939: PUSH
29940: LD_INT 104
29942: PUSH
29943: LD_INT 105
29945: PUSH
29946: LD_INT 106
29948: PUSH
29949: LD_INT 107
29951: PUSH
29952: LD_INT 108
29954: PUSH
29955: LD_INT 109
29957: PUSH
29958: LD_INT 110
29960: PUSH
29961: LD_INT 111
29963: PUSH
29964: LD_INT 112
29966: PUSH
29967: LD_INT 114
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: ST_TO_ADDR
29989: GO 31576
29991: LD_INT 12
29993: DOUBLE
29994: EQUAL
29995: IFTRUE 29999
29997: GO 30207
29999: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
30000: LD_ADDR_VAR 0 1
30004: PUSH
30005: LD_INT 1
30007: PUSH
30008: LD_INT 2
30010: PUSH
30011: LD_INT 3
30013: PUSH
30014: LD_INT 4
30016: PUSH
30017: LD_INT 5
30019: PUSH
30020: LD_INT 6
30022: PUSH
30023: LD_INT 7
30025: PUSH
30026: LD_INT 8
30028: PUSH
30029: LD_INT 9
30031: PUSH
30032: LD_INT 10
30034: PUSH
30035: LD_INT 11
30037: PUSH
30038: LD_INT 12
30040: PUSH
30041: LD_INT 13
30043: PUSH
30044: LD_INT 14
30046: PUSH
30047: LD_INT 15
30049: PUSH
30050: LD_INT 16
30052: PUSH
30053: LD_INT 17
30055: PUSH
30056: LD_INT 18
30058: PUSH
30059: LD_INT 19
30061: PUSH
30062: LD_INT 20
30064: PUSH
30065: LD_INT 21
30067: PUSH
30068: LD_INT 22
30070: PUSH
30071: LD_INT 23
30073: PUSH
30074: LD_INT 24
30076: PUSH
30077: LD_INT 25
30079: PUSH
30080: LD_INT 26
30082: PUSH
30083: LD_INT 27
30085: PUSH
30086: LD_INT 28
30088: PUSH
30089: LD_INT 30
30091: PUSH
30092: LD_INT 31
30094: PUSH
30095: LD_INT 32
30097: PUSH
30098: LD_INT 33
30100: PUSH
30101: LD_INT 34
30103: PUSH
30104: LD_INT 36
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 101
30145: PUSH
30146: LD_INT 102
30148: PUSH
30149: LD_INT 103
30151: PUSH
30152: LD_INT 104
30154: PUSH
30155: LD_INT 105
30157: PUSH
30158: LD_INT 106
30160: PUSH
30161: LD_INT 107
30163: PUSH
30164: LD_INT 108
30166: PUSH
30167: LD_INT 109
30169: PUSH
30170: LD_INT 110
30172: PUSH
30173: LD_INT 111
30175: PUSH
30176: LD_INT 112
30178: PUSH
30179: LD_INT 113
30181: PUSH
30182: LD_INT 114
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: ST_TO_ADDR
30205: GO 31576
30207: LD_INT 13
30209: DOUBLE
30210: EQUAL
30211: IFTRUE 30215
30213: GO 30411
30215: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
30216: LD_ADDR_VAR 0 1
30220: PUSH
30221: LD_INT 1
30223: PUSH
30224: LD_INT 2
30226: PUSH
30227: LD_INT 3
30229: PUSH
30230: LD_INT 4
30232: PUSH
30233: LD_INT 5
30235: PUSH
30236: LD_INT 8
30238: PUSH
30239: LD_INT 9
30241: PUSH
30242: LD_INT 10
30244: PUSH
30245: LD_INT 11
30247: PUSH
30248: LD_INT 12
30250: PUSH
30251: LD_INT 14
30253: PUSH
30254: LD_INT 15
30256: PUSH
30257: LD_INT 16
30259: PUSH
30260: LD_INT 17
30262: PUSH
30263: LD_INT 18
30265: PUSH
30266: LD_INT 19
30268: PUSH
30269: LD_INT 20
30271: PUSH
30272: LD_INT 21
30274: PUSH
30275: LD_INT 22
30277: PUSH
30278: LD_INT 23
30280: PUSH
30281: LD_INT 24
30283: PUSH
30284: LD_INT 25
30286: PUSH
30287: LD_INT 26
30289: PUSH
30290: LD_INT 27
30292: PUSH
30293: LD_INT 28
30295: PUSH
30296: LD_INT 30
30298: PUSH
30299: LD_INT 31
30301: PUSH
30302: LD_INT 32
30304: PUSH
30305: LD_INT 33
30307: PUSH
30308: LD_INT 34
30310: PUSH
30311: LD_INT 36
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 101
30349: PUSH
30350: LD_INT 102
30352: PUSH
30353: LD_INT 103
30355: PUSH
30356: LD_INT 104
30358: PUSH
30359: LD_INT 105
30361: PUSH
30362: LD_INT 106
30364: PUSH
30365: LD_INT 107
30367: PUSH
30368: LD_INT 108
30370: PUSH
30371: LD_INT 109
30373: PUSH
30374: LD_INT 110
30376: PUSH
30377: LD_INT 111
30379: PUSH
30380: LD_INT 112
30382: PUSH
30383: LD_INT 113
30385: PUSH
30386: LD_INT 114
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: ST_TO_ADDR
30409: GO 31576
30411: LD_INT 14
30413: DOUBLE
30414: EQUAL
30415: IFTRUE 30419
30417: GO 30631
30419: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
30420: LD_ADDR_VAR 0 1
30424: PUSH
30425: LD_INT 1
30427: PUSH
30428: LD_INT 2
30430: PUSH
30431: LD_INT 3
30433: PUSH
30434: LD_INT 4
30436: PUSH
30437: LD_INT 5
30439: PUSH
30440: LD_INT 6
30442: PUSH
30443: LD_INT 7
30445: PUSH
30446: LD_INT 8
30448: PUSH
30449: LD_INT 9
30451: PUSH
30452: LD_INT 10
30454: PUSH
30455: LD_INT 11
30457: PUSH
30458: LD_INT 12
30460: PUSH
30461: LD_INT 13
30463: PUSH
30464: LD_INT 14
30466: PUSH
30467: LD_INT 15
30469: PUSH
30470: LD_INT 16
30472: PUSH
30473: LD_INT 17
30475: PUSH
30476: LD_INT 18
30478: PUSH
30479: LD_INT 19
30481: PUSH
30482: LD_INT 20
30484: PUSH
30485: LD_INT 21
30487: PUSH
30488: LD_INT 22
30490: PUSH
30491: LD_INT 23
30493: PUSH
30494: LD_INT 24
30496: PUSH
30497: LD_INT 25
30499: PUSH
30500: LD_INT 26
30502: PUSH
30503: LD_INT 27
30505: PUSH
30506: LD_INT 28
30508: PUSH
30509: LD_INT 29
30511: PUSH
30512: LD_INT 30
30514: PUSH
30515: LD_INT 31
30517: PUSH
30518: LD_INT 32
30520: PUSH
30521: LD_INT 33
30523: PUSH
30524: LD_INT 34
30526: PUSH
30527: LD_INT 36
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 101
30569: PUSH
30570: LD_INT 102
30572: PUSH
30573: LD_INT 103
30575: PUSH
30576: LD_INT 104
30578: PUSH
30579: LD_INT 105
30581: PUSH
30582: LD_INT 106
30584: PUSH
30585: LD_INT 107
30587: PUSH
30588: LD_INT 108
30590: PUSH
30591: LD_INT 109
30593: PUSH
30594: LD_INT 110
30596: PUSH
30597: LD_INT 111
30599: PUSH
30600: LD_INT 112
30602: PUSH
30603: LD_INT 113
30605: PUSH
30606: LD_INT 114
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: ST_TO_ADDR
30629: GO 31576
30631: LD_INT 15
30633: DOUBLE
30634: EQUAL
30635: IFTRUE 30639
30637: GO 30851
30639: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
30640: LD_ADDR_VAR 0 1
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: LD_INT 2
30650: PUSH
30651: LD_INT 3
30653: PUSH
30654: LD_INT 4
30656: PUSH
30657: LD_INT 5
30659: PUSH
30660: LD_INT 6
30662: PUSH
30663: LD_INT 7
30665: PUSH
30666: LD_INT 8
30668: PUSH
30669: LD_INT 9
30671: PUSH
30672: LD_INT 10
30674: PUSH
30675: LD_INT 11
30677: PUSH
30678: LD_INT 12
30680: PUSH
30681: LD_INT 13
30683: PUSH
30684: LD_INT 14
30686: PUSH
30687: LD_INT 15
30689: PUSH
30690: LD_INT 16
30692: PUSH
30693: LD_INT 17
30695: PUSH
30696: LD_INT 18
30698: PUSH
30699: LD_INT 19
30701: PUSH
30702: LD_INT 20
30704: PUSH
30705: LD_INT 21
30707: PUSH
30708: LD_INT 22
30710: PUSH
30711: LD_INT 23
30713: PUSH
30714: LD_INT 24
30716: PUSH
30717: LD_INT 25
30719: PUSH
30720: LD_INT 26
30722: PUSH
30723: LD_INT 27
30725: PUSH
30726: LD_INT 28
30728: PUSH
30729: LD_INT 29
30731: PUSH
30732: LD_INT 30
30734: PUSH
30735: LD_INT 31
30737: PUSH
30738: LD_INT 32
30740: PUSH
30741: LD_INT 33
30743: PUSH
30744: LD_INT 34
30746: PUSH
30747: LD_INT 36
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 101
30789: PUSH
30790: LD_INT 102
30792: PUSH
30793: LD_INT 103
30795: PUSH
30796: LD_INT 104
30798: PUSH
30799: LD_INT 105
30801: PUSH
30802: LD_INT 106
30804: PUSH
30805: LD_INT 107
30807: PUSH
30808: LD_INT 108
30810: PUSH
30811: LD_INT 109
30813: PUSH
30814: LD_INT 110
30816: PUSH
30817: LD_INT 111
30819: PUSH
30820: LD_INT 112
30822: PUSH
30823: LD_INT 113
30825: PUSH
30826: LD_INT 114
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: ST_TO_ADDR
30849: GO 31576
30851: LD_INT 16
30853: DOUBLE
30854: EQUAL
30855: IFTRUE 30859
30857: GO 30983
30859: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
30860: LD_ADDR_VAR 0 1
30864: PUSH
30865: LD_INT 2
30867: PUSH
30868: LD_INT 4
30870: PUSH
30871: LD_INT 5
30873: PUSH
30874: LD_INT 7
30876: PUSH
30877: LD_INT 11
30879: PUSH
30880: LD_INT 12
30882: PUSH
30883: LD_INT 15
30885: PUSH
30886: LD_INT 16
30888: PUSH
30889: LD_INT 20
30891: PUSH
30892: LD_INT 21
30894: PUSH
30895: LD_INT 22
30897: PUSH
30898: LD_INT 23
30900: PUSH
30901: LD_INT 25
30903: PUSH
30904: LD_INT 26
30906: PUSH
30907: LD_INT 30
30909: PUSH
30910: LD_INT 31
30912: PUSH
30913: LD_INT 32
30915: PUSH
30916: LD_INT 33
30918: PUSH
30919: LD_INT 34
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 101
30945: PUSH
30946: LD_INT 102
30948: PUSH
30949: LD_INT 103
30951: PUSH
30952: LD_INT 106
30954: PUSH
30955: LD_INT 108
30957: PUSH
30958: LD_INT 112
30960: PUSH
30961: LD_INT 113
30963: PUSH
30964: LD_INT 114
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: ST_TO_ADDR
30981: GO 31576
30983: LD_INT 17
30985: DOUBLE
30986: EQUAL
30987: IFTRUE 30991
30989: GO 31203
30991: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
30992: LD_ADDR_VAR 0 1
30996: PUSH
30997: LD_INT 1
30999: PUSH
31000: LD_INT 2
31002: PUSH
31003: LD_INT 3
31005: PUSH
31006: LD_INT 4
31008: PUSH
31009: LD_INT 5
31011: PUSH
31012: LD_INT 6
31014: PUSH
31015: LD_INT 7
31017: PUSH
31018: LD_INT 8
31020: PUSH
31021: LD_INT 9
31023: PUSH
31024: LD_INT 10
31026: PUSH
31027: LD_INT 11
31029: PUSH
31030: LD_INT 12
31032: PUSH
31033: LD_INT 13
31035: PUSH
31036: LD_INT 14
31038: PUSH
31039: LD_INT 15
31041: PUSH
31042: LD_INT 16
31044: PUSH
31045: LD_INT 17
31047: PUSH
31048: LD_INT 18
31050: PUSH
31051: LD_INT 19
31053: PUSH
31054: LD_INT 20
31056: PUSH
31057: LD_INT 21
31059: PUSH
31060: LD_INT 22
31062: PUSH
31063: LD_INT 23
31065: PUSH
31066: LD_INT 24
31068: PUSH
31069: LD_INT 25
31071: PUSH
31072: LD_INT 26
31074: PUSH
31075: LD_INT 27
31077: PUSH
31078: LD_INT 28
31080: PUSH
31081: LD_INT 29
31083: PUSH
31084: LD_INT 30
31086: PUSH
31087: LD_INT 31
31089: PUSH
31090: LD_INT 32
31092: PUSH
31093: LD_INT 33
31095: PUSH
31096: LD_INT 34
31098: PUSH
31099: LD_INT 36
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 101
31141: PUSH
31142: LD_INT 102
31144: PUSH
31145: LD_INT 103
31147: PUSH
31148: LD_INT 104
31150: PUSH
31151: LD_INT 105
31153: PUSH
31154: LD_INT 106
31156: PUSH
31157: LD_INT 107
31159: PUSH
31160: LD_INT 108
31162: PUSH
31163: LD_INT 109
31165: PUSH
31166: LD_INT 110
31168: PUSH
31169: LD_INT 111
31171: PUSH
31172: LD_INT 112
31174: PUSH
31175: LD_INT 113
31177: PUSH
31178: LD_INT 114
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: ST_TO_ADDR
31201: GO 31576
31203: LD_INT 18
31205: DOUBLE
31206: EQUAL
31207: IFTRUE 31211
31209: GO 31347
31211: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
31212: LD_ADDR_VAR 0 1
31216: PUSH
31217: LD_INT 2
31219: PUSH
31220: LD_INT 4
31222: PUSH
31223: LD_INT 5
31225: PUSH
31226: LD_INT 7
31228: PUSH
31229: LD_INT 11
31231: PUSH
31232: LD_INT 12
31234: PUSH
31235: LD_INT 15
31237: PUSH
31238: LD_INT 16
31240: PUSH
31241: LD_INT 20
31243: PUSH
31244: LD_INT 21
31246: PUSH
31247: LD_INT 22
31249: PUSH
31250: LD_INT 23
31252: PUSH
31253: LD_INT 25
31255: PUSH
31256: LD_INT 26
31258: PUSH
31259: LD_INT 30
31261: PUSH
31262: LD_INT 31
31264: PUSH
31265: LD_INT 32
31267: PUSH
31268: LD_INT 33
31270: PUSH
31271: LD_INT 34
31273: PUSH
31274: LD_INT 35
31276: PUSH
31277: LD_INT 36
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 101
31305: PUSH
31306: LD_INT 102
31308: PUSH
31309: LD_INT 103
31311: PUSH
31312: LD_INT 106
31314: PUSH
31315: LD_INT 108
31317: PUSH
31318: LD_INT 112
31320: PUSH
31321: LD_INT 113
31323: PUSH
31324: LD_INT 114
31326: PUSH
31327: LD_INT 115
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: ST_TO_ADDR
31345: GO 31576
31347: LD_INT 19
31349: DOUBLE
31350: EQUAL
31351: IFTRUE 31355
31353: GO 31575
31355: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
31356: LD_ADDR_VAR 0 1
31360: PUSH
31361: LD_INT 1
31363: PUSH
31364: LD_INT 2
31366: PUSH
31367: LD_INT 3
31369: PUSH
31370: LD_INT 4
31372: PUSH
31373: LD_INT 5
31375: PUSH
31376: LD_INT 6
31378: PUSH
31379: LD_INT 7
31381: PUSH
31382: LD_INT 8
31384: PUSH
31385: LD_INT 9
31387: PUSH
31388: LD_INT 10
31390: PUSH
31391: LD_INT 11
31393: PUSH
31394: LD_INT 12
31396: PUSH
31397: LD_INT 13
31399: PUSH
31400: LD_INT 14
31402: PUSH
31403: LD_INT 15
31405: PUSH
31406: LD_INT 16
31408: PUSH
31409: LD_INT 17
31411: PUSH
31412: LD_INT 18
31414: PUSH
31415: LD_INT 19
31417: PUSH
31418: LD_INT 20
31420: PUSH
31421: LD_INT 21
31423: PUSH
31424: LD_INT 22
31426: PUSH
31427: LD_INT 23
31429: PUSH
31430: LD_INT 24
31432: PUSH
31433: LD_INT 25
31435: PUSH
31436: LD_INT 26
31438: PUSH
31439: LD_INT 27
31441: PUSH
31442: LD_INT 28
31444: PUSH
31445: LD_INT 29
31447: PUSH
31448: LD_INT 30
31450: PUSH
31451: LD_INT 31
31453: PUSH
31454: LD_INT 32
31456: PUSH
31457: LD_INT 33
31459: PUSH
31460: LD_INT 34
31462: PUSH
31463: LD_INT 35
31465: PUSH
31466: LD_INT 36
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 101
31509: PUSH
31510: LD_INT 102
31512: PUSH
31513: LD_INT 103
31515: PUSH
31516: LD_INT 104
31518: PUSH
31519: LD_INT 105
31521: PUSH
31522: LD_INT 106
31524: PUSH
31525: LD_INT 107
31527: PUSH
31528: LD_INT 108
31530: PUSH
31531: LD_INT 109
31533: PUSH
31534: LD_INT 110
31536: PUSH
31537: LD_INT 111
31539: PUSH
31540: LD_INT 112
31542: PUSH
31543: LD_INT 113
31545: PUSH
31546: LD_INT 114
31548: PUSH
31549: LD_INT 115
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: ST_TO_ADDR
31573: GO 31576
31575: POP
// end else
31576: GO 31795
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
31578: LD_ADDR_VAR 0 1
31582: PUSH
31583: LD_INT 1
31585: PUSH
31586: LD_INT 2
31588: PUSH
31589: LD_INT 3
31591: PUSH
31592: LD_INT 4
31594: PUSH
31595: LD_INT 5
31597: PUSH
31598: LD_INT 6
31600: PUSH
31601: LD_INT 7
31603: PUSH
31604: LD_INT 8
31606: PUSH
31607: LD_INT 9
31609: PUSH
31610: LD_INT 10
31612: PUSH
31613: LD_INT 11
31615: PUSH
31616: LD_INT 12
31618: PUSH
31619: LD_INT 13
31621: PUSH
31622: LD_INT 14
31624: PUSH
31625: LD_INT 15
31627: PUSH
31628: LD_INT 16
31630: PUSH
31631: LD_INT 17
31633: PUSH
31634: LD_INT 18
31636: PUSH
31637: LD_INT 19
31639: PUSH
31640: LD_INT 20
31642: PUSH
31643: LD_INT 21
31645: PUSH
31646: LD_INT 22
31648: PUSH
31649: LD_INT 23
31651: PUSH
31652: LD_INT 24
31654: PUSH
31655: LD_INT 25
31657: PUSH
31658: LD_INT 26
31660: PUSH
31661: LD_INT 27
31663: PUSH
31664: LD_INT 28
31666: PUSH
31667: LD_INT 29
31669: PUSH
31670: LD_INT 30
31672: PUSH
31673: LD_INT 31
31675: PUSH
31676: LD_INT 32
31678: PUSH
31679: LD_INT 33
31681: PUSH
31682: LD_INT 34
31684: PUSH
31685: LD_INT 35
31687: PUSH
31688: LD_INT 36
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 101
31731: PUSH
31732: LD_INT 102
31734: PUSH
31735: LD_INT 103
31737: PUSH
31738: LD_INT 104
31740: PUSH
31741: LD_INT 105
31743: PUSH
31744: LD_INT 106
31746: PUSH
31747: LD_INT 107
31749: PUSH
31750: LD_INT 108
31752: PUSH
31753: LD_INT 109
31755: PUSH
31756: LD_INT 110
31758: PUSH
31759: LD_INT 111
31761: PUSH
31762: LD_INT 112
31764: PUSH
31765: LD_INT 113
31767: PUSH
31768: LD_INT 114
31770: PUSH
31771: LD_INT 115
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: ST_TO_ADDR
// if result then
31795: LD_VAR 0 1
31799: IFFALSE 32088
// begin normal :=  ;
31801: LD_ADDR_VAR 0 3
31805: PUSH
31806: LD_STRING 
31808: ST_TO_ADDR
// hardcore :=  ;
31809: LD_ADDR_VAR 0 4
31813: PUSH
31814: LD_STRING 
31816: ST_TO_ADDR
// for i = 1 to normalCounter do
31817: LD_ADDR_VAR 0 5
31821: PUSH
31822: DOUBLE
31823: LD_INT 1
31825: DEC
31826: ST_TO_ADDR
31827: LD_EXP 67
31831: PUSH
31832: FOR_TO
31833: IFFALSE 31934
// begin tmp := 0 ;
31835: LD_ADDR_VAR 0 2
31839: PUSH
31840: LD_STRING 0
31842: ST_TO_ADDR
// if result [ 1 ] then
31843: LD_VAR 0 1
31847: PUSH
31848: LD_INT 1
31850: ARRAY
31851: IFFALSE 31916
// if result [ 1 ] [ 1 ] = i then
31853: LD_VAR 0 1
31857: PUSH
31858: LD_INT 1
31860: ARRAY
31861: PUSH
31862: LD_INT 1
31864: ARRAY
31865: PUSH
31866: LD_VAR 0 5
31870: EQUAL
31871: IFFALSE 31916
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
31873: LD_ADDR_VAR 0 1
31877: PUSH
31878: LD_VAR 0 1
31882: PPUSH
31883: LD_INT 1
31885: PPUSH
31886: LD_VAR 0 1
31890: PUSH
31891: LD_INT 1
31893: ARRAY
31894: PPUSH
31895: LD_INT 1
31897: PPUSH
31898: CALL_OW 3
31902: PPUSH
31903: CALL_OW 1
31907: ST_TO_ADDR
// tmp := 1 ;
31908: LD_ADDR_VAR 0 2
31912: PUSH
31913: LD_STRING 1
31915: ST_TO_ADDR
// end ; normal := normal & tmp ;
31916: LD_ADDR_VAR 0 3
31920: PUSH
31921: LD_VAR 0 3
31925: PUSH
31926: LD_VAR 0 2
31930: STR
31931: ST_TO_ADDR
// end ;
31932: GO 31832
31934: POP
31935: POP
// for i = 1 to hardcoreCounter do
31936: LD_ADDR_VAR 0 5
31940: PUSH
31941: DOUBLE
31942: LD_INT 1
31944: DEC
31945: ST_TO_ADDR
31946: LD_EXP 68
31950: PUSH
31951: FOR_TO
31952: IFFALSE 32057
// begin tmp := 0 ;
31954: LD_ADDR_VAR 0 2
31958: PUSH
31959: LD_STRING 0
31961: ST_TO_ADDR
// if result [ 2 ] then
31962: LD_VAR 0 1
31966: PUSH
31967: LD_INT 2
31969: ARRAY
31970: IFFALSE 32039
// if result [ 2 ] [ 1 ] = 100 + i then
31972: LD_VAR 0 1
31976: PUSH
31977: LD_INT 2
31979: ARRAY
31980: PUSH
31981: LD_INT 1
31983: ARRAY
31984: PUSH
31985: LD_INT 100
31987: PUSH
31988: LD_VAR 0 5
31992: PLUS
31993: EQUAL
31994: IFFALSE 32039
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
31996: LD_ADDR_VAR 0 1
32000: PUSH
32001: LD_VAR 0 1
32005: PPUSH
32006: LD_INT 2
32008: PPUSH
32009: LD_VAR 0 1
32013: PUSH
32014: LD_INT 2
32016: ARRAY
32017: PPUSH
32018: LD_INT 1
32020: PPUSH
32021: CALL_OW 3
32025: PPUSH
32026: CALL_OW 1
32030: ST_TO_ADDR
// tmp := 1 ;
32031: LD_ADDR_VAR 0 2
32035: PUSH
32036: LD_STRING 1
32038: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
32039: LD_ADDR_VAR 0 4
32043: PUSH
32044: LD_VAR 0 4
32048: PUSH
32049: LD_VAR 0 2
32053: STR
32054: ST_TO_ADDR
// end ;
32055: GO 31951
32057: POP
32058: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
32059: LD_STRING getStreamItemsFromMission("
32061: PUSH
32062: LD_VAR 0 3
32066: STR
32067: PUSH
32068: LD_STRING ","
32070: STR
32071: PUSH
32072: LD_VAR 0 4
32076: STR
32077: PUSH
32078: LD_STRING ")
32080: STR
32081: PPUSH
32082: CALL_OW 559
// end else
32086: GO 32095
// ToLua ( getStreamItemsFromMission("","") ) ;
32088: LD_STRING getStreamItemsFromMission("","")
32090: PPUSH
32091: CALL_OW 559
// end ;
32095: LD_VAR 0 1
32099: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
32100: LD_EXP 66
32104: PUSH
32105: LD_EXP 71
32109: AND
32110: IFFALSE 32234
32112: GO 32114
32114: DISABLE
32115: LD_INT 0
32117: PPUSH
32118: PPUSH
// begin enable ;
32119: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
32120: LD_ADDR_VAR 0 2
32124: PUSH
32125: LD_INT 22
32127: PUSH
32128: LD_OWVAR 2
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 2
32139: PUSH
32140: LD_INT 34
32142: PUSH
32143: LD_INT 7
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 34
32152: PUSH
32153: LD_INT 45
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 34
32162: PUSH
32163: LD_INT 28
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 34
32172: PUSH
32173: LD_INT 47
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PPUSH
32191: CALL_OW 69
32195: ST_TO_ADDR
// if not tmp then
32196: LD_VAR 0 2
32200: NOT
32201: IFFALSE 32205
// exit ;
32203: GO 32234
// for i in tmp do
32205: LD_ADDR_VAR 0 1
32209: PUSH
32210: LD_VAR 0 2
32214: PUSH
32215: FOR_IN
32216: IFFALSE 32232
// begin SetLives ( i , 0 ) ;
32218: LD_VAR 0 1
32222: PPUSH
32223: LD_INT 0
32225: PPUSH
32226: CALL_OW 234
// end ;
32230: GO 32215
32232: POP
32233: POP
// end ;
32234: PPOPN 2
32236: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
32237: LD_EXP 66
32241: PUSH
32242: LD_EXP 72
32246: AND
32247: IFFALSE 32331
32249: GO 32251
32251: DISABLE
32252: LD_INT 0
32254: PPUSH
32255: PPUSH
// begin enable ;
32256: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
32257: LD_ADDR_VAR 0 2
32261: PUSH
32262: LD_INT 22
32264: PUSH
32265: LD_OWVAR 2
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 32
32276: PUSH
32277: LD_INT 3
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PPUSH
32288: CALL_OW 69
32292: ST_TO_ADDR
// if not tmp then
32293: LD_VAR 0 2
32297: NOT
32298: IFFALSE 32302
// exit ;
32300: GO 32331
// for i in tmp do
32302: LD_ADDR_VAR 0 1
32306: PUSH
32307: LD_VAR 0 2
32311: PUSH
32312: FOR_IN
32313: IFFALSE 32329
// begin SetLives ( i , 0 ) ;
32315: LD_VAR 0 1
32319: PPUSH
32320: LD_INT 0
32322: PPUSH
32323: CALL_OW 234
// end ;
32327: GO 32312
32329: POP
32330: POP
// end ;
32331: PPOPN 2
32333: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
32334: LD_EXP 66
32338: PUSH
32339: LD_EXP 69
32343: AND
32344: IFFALSE 32437
32346: GO 32348
32348: DISABLE
32349: LD_INT 0
32351: PPUSH
// begin enable ;
32352: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
32353: LD_ADDR_VAR 0 1
32357: PUSH
32358: LD_INT 22
32360: PUSH
32361: LD_OWVAR 2
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 2
32372: PUSH
32373: LD_INT 25
32375: PUSH
32376: LD_INT 5
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 25
32385: PUSH
32386: LD_INT 9
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 25
32395: PUSH
32396: LD_INT 8
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PPUSH
32413: CALL_OW 69
32417: PUSH
32418: FOR_IN
32419: IFFALSE 32435
// begin SetClass ( i , 1 ) ;
32421: LD_VAR 0 1
32425: PPUSH
32426: LD_INT 1
32428: PPUSH
32429: CALL_OW 336
// end ;
32433: GO 32418
32435: POP
32436: POP
// end ;
32437: PPOPN 1
32439: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
32440: LD_EXP 66
32444: PUSH
32445: LD_EXP 70
32449: AND
32450: PUSH
32451: LD_OWVAR 65
32455: PUSH
32456: LD_INT 7
32458: LESS
32459: AND
32460: IFFALSE 32474
32462: GO 32464
32464: DISABLE
// begin enable ;
32465: ENABLE
// game_speed := 7 ;
32466: LD_ADDR_OWVAR 65
32470: PUSH
32471: LD_INT 7
32473: ST_TO_ADDR
// end ;
32474: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
32475: LD_EXP 66
32479: PUSH
32480: LD_EXP 73
32484: AND
32485: IFFALSE 32687
32487: GO 32489
32489: DISABLE
32490: LD_INT 0
32492: PPUSH
32493: PPUSH
32494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32495: LD_ADDR_VAR 0 3
32499: PUSH
32500: LD_INT 81
32502: PUSH
32503: LD_OWVAR 2
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 21
32514: PUSH
32515: LD_INT 1
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PPUSH
32526: CALL_OW 69
32530: ST_TO_ADDR
// if not tmp then
32531: LD_VAR 0 3
32535: NOT
32536: IFFALSE 32540
// exit ;
32538: GO 32687
// if tmp > 5 then
32540: LD_VAR 0 3
32544: PUSH
32545: LD_INT 5
32547: GREATER
32548: IFFALSE 32560
// k := 5 else
32550: LD_ADDR_VAR 0 2
32554: PUSH
32555: LD_INT 5
32557: ST_TO_ADDR
32558: GO 32570
// k := tmp ;
32560: LD_ADDR_VAR 0 2
32564: PUSH
32565: LD_VAR 0 3
32569: ST_TO_ADDR
// for i := 1 to k do
32570: LD_ADDR_VAR 0 1
32574: PUSH
32575: DOUBLE
32576: LD_INT 1
32578: DEC
32579: ST_TO_ADDR
32580: LD_VAR 0 2
32584: PUSH
32585: FOR_TO
32586: IFFALSE 32685
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
32588: LD_VAR 0 3
32592: PUSH
32593: LD_VAR 0 1
32597: ARRAY
32598: PPUSH
32599: LD_VAR 0 1
32603: PUSH
32604: LD_INT 4
32606: MOD
32607: PUSH
32608: LD_INT 1
32610: PLUS
32611: PPUSH
32612: CALL_OW 259
32616: PUSH
32617: LD_INT 10
32619: LESS
32620: IFFALSE 32683
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
32622: LD_VAR 0 3
32626: PUSH
32627: LD_VAR 0 1
32631: ARRAY
32632: PPUSH
32633: LD_VAR 0 1
32637: PUSH
32638: LD_INT 4
32640: MOD
32641: PUSH
32642: LD_INT 1
32644: PLUS
32645: PPUSH
32646: LD_VAR 0 3
32650: PUSH
32651: LD_VAR 0 1
32655: ARRAY
32656: PPUSH
32657: LD_VAR 0 1
32661: PUSH
32662: LD_INT 4
32664: MOD
32665: PUSH
32666: LD_INT 1
32668: PLUS
32669: PPUSH
32670: CALL_OW 259
32674: PUSH
32675: LD_INT 1
32677: PLUS
32678: PPUSH
32679: CALL_OW 237
32683: GO 32585
32685: POP
32686: POP
// end ;
32687: PPOPN 3
32689: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
32690: LD_EXP 66
32694: PUSH
32695: LD_EXP 74
32699: AND
32700: IFFALSE 32720
32702: GO 32704
32704: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
32705: LD_INT 4
32707: PPUSH
32708: LD_OWVAR 2
32712: PPUSH
32713: LD_INT 0
32715: PPUSH
32716: CALL_OW 324
32720: END
// every 0 0$1 trigger StreamModeActive and sShovel do
32721: LD_EXP 66
32725: PUSH
32726: LD_EXP 103
32730: AND
32731: IFFALSE 32751
32733: GO 32735
32735: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
32736: LD_INT 19
32738: PPUSH
32739: LD_OWVAR 2
32743: PPUSH
32744: LD_INT 0
32746: PPUSH
32747: CALL_OW 324
32751: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
32752: LD_EXP 66
32756: PUSH
32757: LD_EXP 75
32761: AND
32762: IFFALSE 32864
32764: GO 32766
32766: DISABLE
32767: LD_INT 0
32769: PPUSH
32770: PPUSH
// begin enable ;
32771: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
32772: LD_ADDR_VAR 0 2
32776: PUSH
32777: LD_INT 22
32779: PUSH
32780: LD_OWVAR 2
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 2
32791: PUSH
32792: LD_INT 34
32794: PUSH
32795: LD_INT 11
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 34
32804: PUSH
32805: LD_INT 30
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: LIST
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PPUSH
32821: CALL_OW 69
32825: ST_TO_ADDR
// if not tmp then
32826: LD_VAR 0 2
32830: NOT
32831: IFFALSE 32835
// exit ;
32833: GO 32864
// for i in tmp do
32835: LD_ADDR_VAR 0 1
32839: PUSH
32840: LD_VAR 0 2
32844: PUSH
32845: FOR_IN
32846: IFFALSE 32862
// begin SetLives ( i , 0 ) ;
32848: LD_VAR 0 1
32852: PPUSH
32853: LD_INT 0
32855: PPUSH
32856: CALL_OW 234
// end ;
32860: GO 32845
32862: POP
32863: POP
// end ;
32864: PPOPN 2
32866: END
// every 0 0$1 trigger StreamModeActive and sBunker do
32867: LD_EXP 66
32871: PUSH
32872: LD_EXP 76
32876: AND
32877: IFFALSE 32897
32879: GO 32881
32881: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
32882: LD_INT 32
32884: PPUSH
32885: LD_OWVAR 2
32889: PPUSH
32890: LD_INT 0
32892: PPUSH
32893: CALL_OW 324
32897: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
32898: LD_EXP 66
32902: PUSH
32903: LD_EXP 77
32907: AND
32908: IFFALSE 33089
32910: GO 32912
32912: DISABLE
32913: LD_INT 0
32915: PPUSH
32916: PPUSH
32917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
32918: LD_ADDR_VAR 0 2
32922: PUSH
32923: LD_INT 22
32925: PUSH
32926: LD_OWVAR 2
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 33
32937: PUSH
32938: LD_INT 3
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PPUSH
32949: CALL_OW 69
32953: ST_TO_ADDR
// if not tmp then
32954: LD_VAR 0 2
32958: NOT
32959: IFFALSE 32963
// exit ;
32961: GO 33089
// side := 0 ;
32963: LD_ADDR_VAR 0 3
32967: PUSH
32968: LD_INT 0
32970: ST_TO_ADDR
// for i := 1 to 8 do
32971: LD_ADDR_VAR 0 1
32975: PUSH
32976: DOUBLE
32977: LD_INT 1
32979: DEC
32980: ST_TO_ADDR
32981: LD_INT 8
32983: PUSH
32984: FOR_TO
32985: IFFALSE 33033
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
32987: LD_OWVAR 2
32991: PUSH
32992: LD_VAR 0 1
32996: NONEQUAL
32997: PUSH
32998: LD_OWVAR 2
33002: PPUSH
33003: LD_VAR 0 1
33007: PPUSH
33008: CALL_OW 81
33012: PUSH
33013: LD_INT 2
33015: EQUAL
33016: AND
33017: IFFALSE 33031
// begin side := i ;
33019: LD_ADDR_VAR 0 3
33023: PUSH
33024: LD_VAR 0 1
33028: ST_TO_ADDR
// break ;
33029: GO 33033
// end ;
33031: GO 32984
33033: POP
33034: POP
// if not side then
33035: LD_VAR 0 3
33039: NOT
33040: IFFALSE 33044
// exit ;
33042: GO 33089
// for i := 1 to tmp do
33044: LD_ADDR_VAR 0 1
33048: PUSH
33049: DOUBLE
33050: LD_INT 1
33052: DEC
33053: ST_TO_ADDR
33054: LD_VAR 0 2
33058: PUSH
33059: FOR_TO
33060: IFFALSE 33087
// if Prob ( 60 ) then
33062: LD_INT 60
33064: PPUSH
33065: CALL_OW 13
33069: IFFALSE 33085
// SetSide ( i , side ) ;
33071: LD_VAR 0 1
33075: PPUSH
33076: LD_VAR 0 3
33080: PPUSH
33081: CALL_OW 235
33085: GO 33059
33087: POP
33088: POP
// end ;
33089: PPOPN 3
33091: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
33092: LD_EXP 66
33096: PUSH
33097: LD_EXP 79
33101: AND
33102: IFFALSE 33221
33104: GO 33106
33106: DISABLE
33107: LD_INT 0
33109: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
33110: LD_ADDR_VAR 0 1
33114: PUSH
33115: LD_INT 22
33117: PUSH
33118: LD_OWVAR 2
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 21
33129: PUSH
33130: LD_INT 1
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 3
33139: PUSH
33140: LD_INT 23
33142: PUSH
33143: LD_INT 0
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: LIST
33158: PPUSH
33159: CALL_OW 69
33163: PUSH
33164: FOR_IN
33165: IFFALSE 33219
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
33167: LD_VAR 0 1
33171: PPUSH
33172: CALL_OW 257
33176: PUSH
33177: LD_INT 1
33179: PUSH
33180: LD_INT 2
33182: PUSH
33183: LD_INT 3
33185: PUSH
33186: LD_INT 4
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: IN
33195: IFFALSE 33217
// SetClass ( un , rand ( 1 , 4 ) ) ;
33197: LD_VAR 0 1
33201: PPUSH
33202: LD_INT 1
33204: PPUSH
33205: LD_INT 4
33207: PPUSH
33208: CALL_OW 12
33212: PPUSH
33213: CALL_OW 336
33217: GO 33164
33219: POP
33220: POP
// end ;
33221: PPOPN 1
33223: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
33224: LD_EXP 66
33228: PUSH
33229: LD_EXP 78
33233: AND
33234: IFFALSE 33313
33236: GO 33238
33238: DISABLE
33239: LD_INT 0
33241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
33242: LD_ADDR_VAR 0 1
33246: PUSH
33247: LD_INT 22
33249: PUSH
33250: LD_OWVAR 2
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 21
33261: PUSH
33262: LD_INT 3
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PPUSH
33273: CALL_OW 69
33277: ST_TO_ADDR
// if not tmp then
33278: LD_VAR 0 1
33282: NOT
33283: IFFALSE 33287
// exit ;
33285: GO 33313
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
33287: LD_VAR 0 1
33291: PUSH
33292: LD_INT 1
33294: PPUSH
33295: LD_VAR 0 1
33299: PPUSH
33300: CALL_OW 12
33304: ARRAY
33305: PPUSH
33306: LD_INT 100
33308: PPUSH
33309: CALL_OW 234
// end ;
33313: PPOPN 1
33315: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
33316: LD_EXP 66
33320: PUSH
33321: LD_EXP 80
33325: AND
33326: IFFALSE 33424
33328: GO 33330
33330: DISABLE
33331: LD_INT 0
33333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33334: LD_ADDR_VAR 0 1
33338: PUSH
33339: LD_INT 22
33341: PUSH
33342: LD_OWVAR 2
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 21
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PPUSH
33365: CALL_OW 69
33369: ST_TO_ADDR
// if not tmp then
33370: LD_VAR 0 1
33374: NOT
33375: IFFALSE 33379
// exit ;
33377: GO 33424
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
33379: LD_VAR 0 1
33383: PUSH
33384: LD_INT 1
33386: PPUSH
33387: LD_VAR 0 1
33391: PPUSH
33392: CALL_OW 12
33396: ARRAY
33397: PPUSH
33398: LD_INT 1
33400: PPUSH
33401: LD_INT 4
33403: PPUSH
33404: CALL_OW 12
33408: PPUSH
33409: LD_INT 3000
33411: PPUSH
33412: LD_INT 9000
33414: PPUSH
33415: CALL_OW 12
33419: PPUSH
33420: CALL_OW 492
// end ;
33424: PPOPN 1
33426: END
// every 0 0$1 trigger StreamModeActive and sDepot do
33427: LD_EXP 66
33431: PUSH
33432: LD_EXP 81
33436: AND
33437: IFFALSE 33457
33439: GO 33441
33441: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
33442: LD_INT 1
33444: PPUSH
33445: LD_OWVAR 2
33449: PPUSH
33450: LD_INT 0
33452: PPUSH
33453: CALL_OW 324
33457: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
33458: LD_EXP 66
33462: PUSH
33463: LD_EXP 82
33467: AND
33468: IFFALSE 33551
33470: GO 33472
33472: DISABLE
33473: LD_INT 0
33475: PPUSH
33476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
33477: LD_ADDR_VAR 0 2
33481: PUSH
33482: LD_INT 22
33484: PUSH
33485: LD_OWVAR 2
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 21
33496: PUSH
33497: LD_INT 3
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PPUSH
33508: CALL_OW 69
33512: ST_TO_ADDR
// if not tmp then
33513: LD_VAR 0 2
33517: NOT
33518: IFFALSE 33522
// exit ;
33520: GO 33551
// for i in tmp do
33522: LD_ADDR_VAR 0 1
33526: PUSH
33527: LD_VAR 0 2
33531: PUSH
33532: FOR_IN
33533: IFFALSE 33549
// SetBLevel ( i , 10 ) ;
33535: LD_VAR 0 1
33539: PPUSH
33540: LD_INT 10
33542: PPUSH
33543: CALL_OW 241
33547: GO 33532
33549: POP
33550: POP
// end ;
33551: PPOPN 2
33553: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
33554: LD_EXP 66
33558: PUSH
33559: LD_EXP 83
33563: AND
33564: IFFALSE 33675
33566: GO 33568
33568: DISABLE
33569: LD_INT 0
33571: PPUSH
33572: PPUSH
33573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33574: LD_ADDR_VAR 0 3
33578: PUSH
33579: LD_INT 22
33581: PUSH
33582: LD_OWVAR 2
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 25
33593: PUSH
33594: LD_INT 1
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PPUSH
33605: CALL_OW 69
33609: ST_TO_ADDR
// if not tmp then
33610: LD_VAR 0 3
33614: NOT
33615: IFFALSE 33619
// exit ;
33617: GO 33675
// un := tmp [ rand ( 1 , tmp ) ] ;
33619: LD_ADDR_VAR 0 2
33623: PUSH
33624: LD_VAR 0 3
33628: PUSH
33629: LD_INT 1
33631: PPUSH
33632: LD_VAR 0 3
33636: PPUSH
33637: CALL_OW 12
33641: ARRAY
33642: ST_TO_ADDR
// if Crawls ( un ) then
33643: LD_VAR 0 2
33647: PPUSH
33648: CALL_OW 318
33652: IFFALSE 33663
// ComWalk ( un ) ;
33654: LD_VAR 0 2
33658: PPUSH
33659: CALL_OW 138
// SetClass ( un , class_sniper ) ;
33663: LD_VAR 0 2
33667: PPUSH
33668: LD_INT 5
33670: PPUSH
33671: CALL_OW 336
// end ;
33675: PPOPN 3
33677: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
33678: LD_EXP 66
33682: PUSH
33683: LD_EXP 84
33687: AND
33688: PUSH
33689: LD_OWVAR 67
33693: PUSH
33694: LD_INT 3
33696: LESS
33697: AND
33698: IFFALSE 33717
33700: GO 33702
33702: DISABLE
// Difficulty := Difficulty + 1 ;
33703: LD_ADDR_OWVAR 67
33707: PUSH
33708: LD_OWVAR 67
33712: PUSH
33713: LD_INT 1
33715: PLUS
33716: ST_TO_ADDR
33717: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
33718: LD_EXP 66
33722: PUSH
33723: LD_EXP 85
33727: AND
33728: IFFALSE 33831
33730: GO 33732
33732: DISABLE
33733: LD_INT 0
33735: PPUSH
// begin for i := 1 to 5 do
33736: LD_ADDR_VAR 0 1
33740: PUSH
33741: DOUBLE
33742: LD_INT 1
33744: DEC
33745: ST_TO_ADDR
33746: LD_INT 5
33748: PUSH
33749: FOR_TO
33750: IFFALSE 33829
// begin uc_nation := nation_nature ;
33752: LD_ADDR_OWVAR 21
33756: PUSH
33757: LD_INT 0
33759: ST_TO_ADDR
// uc_side := 0 ;
33760: LD_ADDR_OWVAR 20
33764: PUSH
33765: LD_INT 0
33767: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
33768: LD_ADDR_OWVAR 29
33772: PUSH
33773: LD_INT 12
33775: PUSH
33776: LD_INT 12
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: ST_TO_ADDR
// hc_agressivity := 20 ;
33783: LD_ADDR_OWVAR 35
33787: PUSH
33788: LD_INT 20
33790: ST_TO_ADDR
// hc_class := class_tiger ;
33791: LD_ADDR_OWVAR 28
33795: PUSH
33796: LD_INT 14
33798: ST_TO_ADDR
// hc_gallery :=  ;
33799: LD_ADDR_OWVAR 33
33803: PUSH
33804: LD_STRING 
33806: ST_TO_ADDR
// hc_name :=  ;
33807: LD_ADDR_OWVAR 26
33811: PUSH
33812: LD_STRING 
33814: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
33815: CALL_OW 44
33819: PPUSH
33820: LD_INT 0
33822: PPUSH
33823: CALL_OW 51
// end ;
33827: GO 33749
33829: POP
33830: POP
// end ;
33831: PPOPN 1
33833: END
// every 0 0$1 trigger StreamModeActive and sBomb do
33834: LD_EXP 66
33838: PUSH
33839: LD_EXP 86
33843: AND
33844: IFFALSE 33853
33846: GO 33848
33848: DISABLE
// StreamSibBomb ;
33849: CALL 33854 0 0
33853: END
// export function StreamSibBomb ; var i , x , y ; begin
33854: LD_INT 0
33856: PPUSH
33857: PPUSH
33858: PPUSH
33859: PPUSH
// result := false ;
33860: LD_ADDR_VAR 0 1
33864: PUSH
33865: LD_INT 0
33867: ST_TO_ADDR
// for i := 1 to 16 do
33868: LD_ADDR_VAR 0 2
33872: PUSH
33873: DOUBLE
33874: LD_INT 1
33876: DEC
33877: ST_TO_ADDR
33878: LD_INT 16
33880: PUSH
33881: FOR_TO
33882: IFFALSE 34081
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
33884: LD_ADDR_VAR 0 3
33888: PUSH
33889: LD_INT 10
33891: PUSH
33892: LD_INT 20
33894: PUSH
33895: LD_INT 30
33897: PUSH
33898: LD_INT 40
33900: PUSH
33901: LD_INT 50
33903: PUSH
33904: LD_INT 60
33906: PUSH
33907: LD_INT 70
33909: PUSH
33910: LD_INT 80
33912: PUSH
33913: LD_INT 90
33915: PUSH
33916: LD_INT 100
33918: PUSH
33919: LD_INT 110
33921: PUSH
33922: LD_INT 120
33924: PUSH
33925: LD_INT 130
33927: PUSH
33928: LD_INT 140
33930: PUSH
33931: LD_INT 150
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 1
33953: PPUSH
33954: LD_INT 15
33956: PPUSH
33957: CALL_OW 12
33961: ARRAY
33962: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
33963: LD_ADDR_VAR 0 4
33967: PUSH
33968: LD_INT 10
33970: PUSH
33971: LD_INT 20
33973: PUSH
33974: LD_INT 30
33976: PUSH
33977: LD_INT 40
33979: PUSH
33980: LD_INT 50
33982: PUSH
33983: LD_INT 60
33985: PUSH
33986: LD_INT 70
33988: PUSH
33989: LD_INT 80
33991: PUSH
33992: LD_INT 90
33994: PUSH
33995: LD_INT 100
33997: PUSH
33998: LD_INT 110
34000: PUSH
34001: LD_INT 120
34003: PUSH
34004: LD_INT 130
34006: PUSH
34007: LD_INT 140
34009: PUSH
34010: LD_INT 150
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 1
34032: PPUSH
34033: LD_INT 15
34035: PPUSH
34036: CALL_OW 12
34040: ARRAY
34041: ST_TO_ADDR
// if ValidHex ( x , y ) then
34042: LD_VAR 0 3
34046: PPUSH
34047: LD_VAR 0 4
34051: PPUSH
34052: CALL_OW 488
34056: IFFALSE 34079
// begin result := [ x , y ] ;
34058: LD_ADDR_VAR 0 1
34062: PUSH
34063: LD_VAR 0 3
34067: PUSH
34068: LD_VAR 0 4
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: ST_TO_ADDR
// break ;
34077: GO 34081
// end ; end ;
34079: GO 33881
34081: POP
34082: POP
// if result then
34083: LD_VAR 0 1
34087: IFFALSE 34147
// begin ToLua ( playSibBomb() ) ;
34089: LD_STRING playSibBomb()
34091: PPUSH
34092: CALL_OW 559
// wait ( 0 0$14 ) ;
34096: LD_INT 490
34098: PPUSH
34099: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
34103: LD_VAR 0 1
34107: PUSH
34108: LD_INT 1
34110: ARRAY
34111: PPUSH
34112: LD_VAR 0 1
34116: PUSH
34117: LD_INT 2
34119: ARRAY
34120: PPUSH
34121: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
34125: LD_VAR 0 1
34129: PUSH
34130: LD_INT 1
34132: ARRAY
34133: PPUSH
34134: LD_VAR 0 1
34138: PUSH
34139: LD_INT 2
34141: ARRAY
34142: PPUSH
34143: CALL_OW 429
// end ; end ;
34147: LD_VAR 0 1
34151: RET
// every 0 0$1 trigger StreamModeActive and sReset do
34152: LD_EXP 66
34156: PUSH
34157: LD_EXP 88
34161: AND
34162: IFFALSE 34174
34164: GO 34166
34166: DISABLE
// YouLost (  ) ;
34167: LD_STRING 
34169: PPUSH
34170: CALL_OW 104
34174: END
// every 0 0$1 trigger StreamModeActive and sFog do
34175: LD_EXP 66
34179: PUSH
34180: LD_EXP 87
34184: AND
34185: IFFALSE 34199
34187: GO 34189
34189: DISABLE
// FogOff ( your_side ) ;
34190: LD_OWVAR 2
34194: PPUSH
34195: CALL_OW 344
34199: END
// every 0 0$1 trigger StreamModeActive and sSun do
34200: LD_EXP 66
34204: PUSH
34205: LD_EXP 89
34209: AND
34210: IFFALSE 34238
34212: GO 34214
34214: DISABLE
// begin solar_recharge_percent := 0 ;
34215: LD_ADDR_OWVAR 79
34219: PUSH
34220: LD_INT 0
34222: ST_TO_ADDR
// wait ( 5 5$00 ) ;
34223: LD_INT 10500
34225: PPUSH
34226: CALL_OW 67
// solar_recharge_percent := 100 ;
34230: LD_ADDR_OWVAR 79
34234: PUSH
34235: LD_INT 100
34237: ST_TO_ADDR
// end ;
34238: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
34239: LD_EXP 66
34243: PUSH
34244: LD_EXP 90
34248: AND
34249: IFFALSE 34488
34251: GO 34253
34253: DISABLE
34254: LD_INT 0
34256: PPUSH
34257: PPUSH
34258: PPUSH
// begin tmp := [ ] ;
34259: LD_ADDR_VAR 0 3
34263: PUSH
34264: EMPTY
34265: ST_TO_ADDR
// for i := 1 to 6 do
34266: LD_ADDR_VAR 0 1
34270: PUSH
34271: DOUBLE
34272: LD_INT 1
34274: DEC
34275: ST_TO_ADDR
34276: LD_INT 6
34278: PUSH
34279: FOR_TO
34280: IFFALSE 34385
// begin uc_nation := nation_nature ;
34282: LD_ADDR_OWVAR 21
34286: PUSH
34287: LD_INT 0
34289: ST_TO_ADDR
// uc_side := 0 ;
34290: LD_ADDR_OWVAR 20
34294: PUSH
34295: LD_INT 0
34297: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34298: LD_ADDR_OWVAR 29
34302: PUSH
34303: LD_INT 12
34305: PUSH
34306: LD_INT 12
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: ST_TO_ADDR
// hc_agressivity := 20 ;
34313: LD_ADDR_OWVAR 35
34317: PUSH
34318: LD_INT 20
34320: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
34321: LD_ADDR_OWVAR 28
34325: PUSH
34326: LD_INT 17
34328: ST_TO_ADDR
// hc_gallery :=  ;
34329: LD_ADDR_OWVAR 33
34333: PUSH
34334: LD_STRING 
34336: ST_TO_ADDR
// hc_name :=  ;
34337: LD_ADDR_OWVAR 26
34341: PUSH
34342: LD_STRING 
34344: ST_TO_ADDR
// un := CreateHuman ;
34345: LD_ADDR_VAR 0 2
34349: PUSH
34350: CALL_OW 44
34354: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
34355: LD_VAR 0 2
34359: PPUSH
34360: LD_INT 1
34362: PPUSH
34363: CALL_OW 51
// tmp := tmp ^ un ;
34367: LD_ADDR_VAR 0 3
34371: PUSH
34372: LD_VAR 0 3
34376: PUSH
34377: LD_VAR 0 2
34381: ADD
34382: ST_TO_ADDR
// end ;
34383: GO 34279
34385: POP
34386: POP
// repeat wait ( 0 0$1 ) ;
34387: LD_INT 35
34389: PPUSH
34390: CALL_OW 67
// for un in tmp do
34394: LD_ADDR_VAR 0 2
34398: PUSH
34399: LD_VAR 0 3
34403: PUSH
34404: FOR_IN
34405: IFFALSE 34479
// begin if IsDead ( un ) then
34407: LD_VAR 0 2
34411: PPUSH
34412: CALL_OW 301
34416: IFFALSE 34436
// begin tmp := tmp diff un ;
34418: LD_ADDR_VAR 0 3
34422: PUSH
34423: LD_VAR 0 3
34427: PUSH
34428: LD_VAR 0 2
34432: DIFF
34433: ST_TO_ADDR
// continue ;
34434: GO 34404
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
34436: LD_VAR 0 2
34440: PPUSH
34441: LD_INT 3
34443: PUSH
34444: LD_INT 22
34446: PUSH
34447: LD_INT 0
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PPUSH
34458: CALL_OW 69
34462: PPUSH
34463: LD_VAR 0 2
34467: PPUSH
34468: CALL_OW 74
34472: PPUSH
34473: CALL_OW 115
// end ;
34477: GO 34404
34479: POP
34480: POP
// until not tmp ;
34481: LD_VAR 0 3
34485: NOT
34486: IFFALSE 34387
// end ;
34488: PPOPN 3
34490: END
// every 0 0$1 trigger StreamModeActive and sTroll do
34491: LD_EXP 66
34495: PUSH
34496: LD_EXP 91
34500: AND
34501: IFFALSE 34555
34503: GO 34505
34505: DISABLE
// begin ToLua ( displayTroll(); ) ;
34506: LD_STRING displayTroll();
34508: PPUSH
34509: CALL_OW 559
// wait ( 3 3$00 ) ;
34513: LD_INT 6300
34515: PPUSH
34516: CALL_OW 67
// ToLua ( hideTroll(); ) ;
34520: LD_STRING hideTroll();
34522: PPUSH
34523: CALL_OW 559
// wait ( 1 1$00 ) ;
34527: LD_INT 2100
34529: PPUSH
34530: CALL_OW 67
// ToLua ( displayTroll(); ) ;
34534: LD_STRING displayTroll();
34536: PPUSH
34537: CALL_OW 559
// wait ( 1 1$00 ) ;
34541: LD_INT 2100
34543: PPUSH
34544: CALL_OW 67
// ToLua ( hideTroll(); ) ;
34548: LD_STRING hideTroll();
34550: PPUSH
34551: CALL_OW 559
// end ;
34555: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
34556: LD_EXP 66
34560: PUSH
34561: LD_EXP 92
34565: AND
34566: IFFALSE 34629
34568: GO 34570
34570: DISABLE
34571: LD_INT 0
34573: PPUSH
// begin p := 0 ;
34574: LD_ADDR_VAR 0 1
34578: PUSH
34579: LD_INT 0
34581: ST_TO_ADDR
// repeat game_speed := 1 ;
34582: LD_ADDR_OWVAR 65
34586: PUSH
34587: LD_INT 1
34589: ST_TO_ADDR
// wait ( 0 0$1 ) ;
34590: LD_INT 35
34592: PPUSH
34593: CALL_OW 67
// p := p + 1 ;
34597: LD_ADDR_VAR 0 1
34601: PUSH
34602: LD_VAR 0 1
34606: PUSH
34607: LD_INT 1
34609: PLUS
34610: ST_TO_ADDR
// until p >= 60 ;
34611: LD_VAR 0 1
34615: PUSH
34616: LD_INT 60
34618: GREATEREQUAL
34619: IFFALSE 34582
// game_speed := 4 ;
34621: LD_ADDR_OWVAR 65
34625: PUSH
34626: LD_INT 4
34628: ST_TO_ADDR
// end ;
34629: PPOPN 1
34631: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
34632: LD_EXP 66
34636: PUSH
34637: LD_EXP 93
34641: AND
34642: IFFALSE 34788
34644: GO 34646
34646: DISABLE
34647: LD_INT 0
34649: PPUSH
34650: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34651: LD_ADDR_VAR 0 1
34655: PUSH
34656: LD_INT 22
34658: PUSH
34659: LD_OWVAR 2
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 2
34670: PUSH
34671: LD_INT 30
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 30
34683: PUSH
34684: LD_INT 1
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: LIST
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PPUSH
34700: CALL_OW 69
34704: ST_TO_ADDR
// if not depot then
34705: LD_VAR 0 1
34709: NOT
34710: IFFALSE 34714
// exit ;
34712: GO 34788
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
34714: LD_ADDR_VAR 0 2
34718: PUSH
34719: LD_VAR 0 1
34723: PUSH
34724: LD_INT 1
34726: PPUSH
34727: LD_VAR 0 1
34731: PPUSH
34732: CALL_OW 12
34736: ARRAY
34737: PPUSH
34738: CALL_OW 274
34742: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
34743: LD_VAR 0 2
34747: PPUSH
34748: LD_INT 1
34750: PPUSH
34751: LD_INT 0
34753: PPUSH
34754: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
34758: LD_VAR 0 2
34762: PPUSH
34763: LD_INT 2
34765: PPUSH
34766: LD_INT 0
34768: PPUSH
34769: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
34773: LD_VAR 0 2
34777: PPUSH
34778: LD_INT 3
34780: PPUSH
34781: LD_INT 0
34783: PPUSH
34784: CALL_OW 277
// end ;
34788: PPOPN 2
34790: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
34791: LD_EXP 66
34795: PUSH
34796: LD_EXP 94
34800: AND
34801: IFFALSE 34898
34803: GO 34805
34805: DISABLE
34806: LD_INT 0
34808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34809: LD_ADDR_VAR 0 1
34813: PUSH
34814: LD_INT 22
34816: PUSH
34817: LD_OWVAR 2
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 21
34828: PUSH
34829: LD_INT 1
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 3
34838: PUSH
34839: LD_INT 23
34841: PUSH
34842: LD_INT 0
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: LIST
34857: PPUSH
34858: CALL_OW 69
34862: ST_TO_ADDR
// if not tmp then
34863: LD_VAR 0 1
34867: NOT
34868: IFFALSE 34872
// exit ;
34870: GO 34898
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
34872: LD_VAR 0 1
34876: PUSH
34877: LD_INT 1
34879: PPUSH
34880: LD_VAR 0 1
34884: PPUSH
34885: CALL_OW 12
34889: ARRAY
34890: PPUSH
34891: LD_INT 200
34893: PPUSH
34894: CALL_OW 234
// end ;
34898: PPOPN 1
34900: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
34901: LD_EXP 66
34905: PUSH
34906: LD_EXP 95
34910: AND
34911: IFFALSE 34990
34913: GO 34915
34915: DISABLE
34916: LD_INT 0
34918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
34919: LD_ADDR_VAR 0 1
34923: PUSH
34924: LD_INT 22
34926: PUSH
34927: LD_OWVAR 2
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 21
34938: PUSH
34939: LD_INT 2
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PPUSH
34950: CALL_OW 69
34954: ST_TO_ADDR
// if not tmp then
34955: LD_VAR 0 1
34959: NOT
34960: IFFALSE 34964
// exit ;
34962: GO 34990
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
34964: LD_VAR 0 1
34968: PUSH
34969: LD_INT 1
34971: PPUSH
34972: LD_VAR 0 1
34976: PPUSH
34977: CALL_OW 12
34981: ARRAY
34982: PPUSH
34983: LD_INT 60
34985: PPUSH
34986: CALL_OW 234
// end ;
34990: PPOPN 1
34992: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
34993: LD_EXP 66
34997: PUSH
34998: LD_EXP 96
35002: AND
35003: IFFALSE 35102
35005: GO 35007
35007: DISABLE
35008: LD_INT 0
35010: PPUSH
35011: PPUSH
// begin enable ;
35012: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
35013: LD_ADDR_VAR 0 1
35017: PUSH
35018: LD_INT 22
35020: PUSH
35021: LD_OWVAR 2
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 61
35032: PUSH
35033: EMPTY
35034: LIST
35035: PUSH
35036: LD_INT 33
35038: PUSH
35039: LD_INT 2
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: LIST
35050: PPUSH
35051: CALL_OW 69
35055: ST_TO_ADDR
// if not tmp then
35056: LD_VAR 0 1
35060: NOT
35061: IFFALSE 35065
// exit ;
35063: GO 35102
// for i in tmp do
35065: LD_ADDR_VAR 0 2
35069: PUSH
35070: LD_VAR 0 1
35074: PUSH
35075: FOR_IN
35076: IFFALSE 35100
// if IsControledBy ( i ) then
35078: LD_VAR 0 2
35082: PPUSH
35083: CALL_OW 312
35087: IFFALSE 35098
// ComUnlink ( i ) ;
35089: LD_VAR 0 2
35093: PPUSH
35094: CALL_OW 136
35098: GO 35075
35100: POP
35101: POP
// end ;
35102: PPOPN 2
35104: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
35105: LD_EXP 66
35109: PUSH
35110: LD_EXP 97
35114: AND
35115: IFFALSE 35255
35117: GO 35119
35119: DISABLE
35120: LD_INT 0
35122: PPUSH
35123: PPUSH
// begin ToLua ( displayPowell(); ) ;
35124: LD_STRING displayPowell();
35126: PPUSH
35127: CALL_OW 559
// uc_side := 0 ;
35131: LD_ADDR_OWVAR 20
35135: PUSH
35136: LD_INT 0
35138: ST_TO_ADDR
// uc_nation := 2 ;
35139: LD_ADDR_OWVAR 21
35143: PUSH
35144: LD_INT 2
35146: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
35147: LD_ADDR_OWVAR 37
35151: PUSH
35152: LD_INT 14
35154: ST_TO_ADDR
// vc_engine := engine_siberite ;
35155: LD_ADDR_OWVAR 39
35159: PUSH
35160: LD_INT 3
35162: ST_TO_ADDR
// vc_control := control_apeman ;
35163: LD_ADDR_OWVAR 38
35167: PUSH
35168: LD_INT 5
35170: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
35171: LD_ADDR_OWVAR 40
35175: PUSH
35176: LD_INT 29
35178: ST_TO_ADDR
// un := CreateVehicle ;
35179: LD_ADDR_VAR 0 2
35183: PUSH
35184: CALL_OW 45
35188: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
35189: LD_VAR 0 2
35193: PPUSH
35194: LD_INT 1
35196: PPUSH
35197: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
35201: LD_INT 35
35203: PPUSH
35204: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
35208: LD_VAR 0 2
35212: PPUSH
35213: LD_INT 22
35215: PUSH
35216: LD_OWVAR 2
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PPUSH
35225: CALL_OW 69
35229: PPUSH
35230: LD_VAR 0 2
35234: PPUSH
35235: CALL_OW 74
35239: PPUSH
35240: CALL_OW 115
// until IsDead ( un ) ;
35244: LD_VAR 0 2
35248: PPUSH
35249: CALL_OW 301
35253: IFFALSE 35201
// end ;
35255: PPOPN 2
35257: END
// every 0 0$1 trigger StreamModeActive and sStu do
35258: LD_EXP 66
35262: PUSH
35263: LD_EXP 105
35267: AND
35268: IFFALSE 35284
35270: GO 35272
35272: DISABLE
// begin ToLua ( displayStucuk(); ) ;
35273: LD_STRING displayStucuk();
35275: PPUSH
35276: CALL_OW 559
// ResetFog ;
35280: CALL_OW 335
// end ;
35284: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
35285: LD_EXP 66
35289: PUSH
35290: LD_EXP 98
35294: AND
35295: IFFALSE 35436
35297: GO 35299
35299: DISABLE
35300: LD_INT 0
35302: PPUSH
35303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35304: LD_ADDR_VAR 0 2
35308: PUSH
35309: LD_INT 22
35311: PUSH
35312: LD_OWVAR 2
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 21
35323: PUSH
35324: LD_INT 1
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PPUSH
35335: CALL_OW 69
35339: ST_TO_ADDR
// if not tmp then
35340: LD_VAR 0 2
35344: NOT
35345: IFFALSE 35349
// exit ;
35347: GO 35436
// un := tmp [ rand ( 1 , tmp ) ] ;
35349: LD_ADDR_VAR 0 1
35353: PUSH
35354: LD_VAR 0 2
35358: PUSH
35359: LD_INT 1
35361: PPUSH
35362: LD_VAR 0 2
35366: PPUSH
35367: CALL_OW 12
35371: ARRAY
35372: ST_TO_ADDR
// SetSide ( un , 0 ) ;
35373: LD_VAR 0 1
35377: PPUSH
35378: LD_INT 0
35380: PPUSH
35381: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
35385: LD_VAR 0 1
35389: PPUSH
35390: LD_OWVAR 3
35394: PUSH
35395: LD_VAR 0 1
35399: DIFF
35400: PPUSH
35401: LD_VAR 0 1
35405: PPUSH
35406: CALL_OW 74
35410: PPUSH
35411: CALL_OW 115
// wait ( 0 0$20 ) ;
35415: LD_INT 700
35417: PPUSH
35418: CALL_OW 67
// SetSide ( un , your_side ) ;
35422: LD_VAR 0 1
35426: PPUSH
35427: LD_OWVAR 2
35431: PPUSH
35432: CALL_OW 235
// end ;
35436: PPOPN 2
35438: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
35439: LD_EXP 66
35443: PUSH
35444: LD_EXP 99
35448: AND
35449: IFFALSE 35555
35451: GO 35453
35453: DISABLE
35454: LD_INT 0
35456: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35457: LD_ADDR_VAR 0 1
35461: PUSH
35462: LD_INT 22
35464: PUSH
35465: LD_OWVAR 2
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 2
35476: PUSH
35477: LD_INT 30
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 30
35489: PUSH
35490: LD_INT 1
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: LIST
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PPUSH
35506: CALL_OW 69
35510: ST_TO_ADDR
// if not depot then
35511: LD_VAR 0 1
35515: NOT
35516: IFFALSE 35520
// exit ;
35518: GO 35555
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
35520: LD_VAR 0 1
35524: PUSH
35525: LD_INT 1
35527: ARRAY
35528: PPUSH
35529: CALL_OW 250
35533: PPUSH
35534: LD_VAR 0 1
35538: PUSH
35539: LD_INT 1
35541: ARRAY
35542: PPUSH
35543: CALL_OW 251
35547: PPUSH
35548: LD_INT 70
35550: PPUSH
35551: CALL_OW 495
// end ;
35555: PPOPN 1
35557: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
35558: LD_EXP 66
35562: PUSH
35563: LD_EXP 100
35567: AND
35568: IFFALSE 35779
35570: GO 35572
35572: DISABLE
35573: LD_INT 0
35575: PPUSH
35576: PPUSH
35577: PPUSH
35578: PPUSH
35579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35580: LD_ADDR_VAR 0 5
35584: PUSH
35585: LD_INT 22
35587: PUSH
35588: LD_OWVAR 2
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 21
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PPUSH
35611: CALL_OW 69
35615: ST_TO_ADDR
// if not tmp then
35616: LD_VAR 0 5
35620: NOT
35621: IFFALSE 35625
// exit ;
35623: GO 35779
// for i in tmp do
35625: LD_ADDR_VAR 0 1
35629: PUSH
35630: LD_VAR 0 5
35634: PUSH
35635: FOR_IN
35636: IFFALSE 35777
// begin d := rand ( 0 , 5 ) ;
35638: LD_ADDR_VAR 0 4
35642: PUSH
35643: LD_INT 0
35645: PPUSH
35646: LD_INT 5
35648: PPUSH
35649: CALL_OW 12
35653: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
35654: LD_ADDR_VAR 0 2
35658: PUSH
35659: LD_VAR 0 1
35663: PPUSH
35664: CALL_OW 250
35668: PPUSH
35669: LD_VAR 0 4
35673: PPUSH
35674: LD_INT 3
35676: PPUSH
35677: LD_INT 12
35679: PPUSH
35680: CALL_OW 12
35684: PPUSH
35685: CALL_OW 272
35689: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
35690: LD_ADDR_VAR 0 3
35694: PUSH
35695: LD_VAR 0 1
35699: PPUSH
35700: CALL_OW 251
35704: PPUSH
35705: LD_VAR 0 4
35709: PPUSH
35710: LD_INT 3
35712: PPUSH
35713: LD_INT 12
35715: PPUSH
35716: CALL_OW 12
35720: PPUSH
35721: CALL_OW 273
35725: ST_TO_ADDR
// if ValidHex ( x , y ) then
35726: LD_VAR 0 2
35730: PPUSH
35731: LD_VAR 0 3
35735: PPUSH
35736: CALL_OW 488
35740: IFFALSE 35775
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
35742: LD_VAR 0 1
35746: PPUSH
35747: LD_VAR 0 2
35751: PPUSH
35752: LD_VAR 0 3
35756: PPUSH
35757: LD_INT 3
35759: PPUSH
35760: LD_INT 6
35762: PPUSH
35763: CALL_OW 12
35767: PPUSH
35768: LD_INT 1
35770: PPUSH
35771: CALL_OW 483
// end ;
35775: GO 35635
35777: POP
35778: POP
// end ;
35779: PPOPN 5
35781: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
35782: LD_EXP 66
35786: PUSH
35787: LD_EXP 101
35791: AND
35792: IFFALSE 35886
35794: GO 35796
35796: DISABLE
35797: LD_INT 0
35799: PPUSH
35800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
35801: LD_ADDR_VAR 0 2
35805: PUSH
35806: LD_INT 22
35808: PUSH
35809: LD_OWVAR 2
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 32
35820: PUSH
35821: LD_INT 1
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 21
35830: PUSH
35831: LD_INT 2
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: LIST
35842: PPUSH
35843: CALL_OW 69
35847: ST_TO_ADDR
// if not tmp then
35848: LD_VAR 0 2
35852: NOT
35853: IFFALSE 35857
// exit ;
35855: GO 35886
// for i in tmp do
35857: LD_ADDR_VAR 0 1
35861: PUSH
35862: LD_VAR 0 2
35866: PUSH
35867: FOR_IN
35868: IFFALSE 35884
// SetFuel ( i , 0 ) ;
35870: LD_VAR 0 1
35874: PPUSH
35875: LD_INT 0
35877: PPUSH
35878: CALL_OW 240
35882: GO 35867
35884: POP
35885: POP
// end ;
35886: PPOPN 2
35888: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
35889: LD_EXP 66
35893: PUSH
35894: LD_EXP 102
35898: AND
35899: IFFALSE 35965
35901: GO 35903
35903: DISABLE
35904: LD_INT 0
35906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
35907: LD_ADDR_VAR 0 1
35911: PUSH
35912: LD_INT 22
35914: PUSH
35915: LD_OWVAR 2
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 30
35926: PUSH
35927: LD_INT 29
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PPUSH
35938: CALL_OW 69
35942: ST_TO_ADDR
// if not tmp then
35943: LD_VAR 0 1
35947: NOT
35948: IFFALSE 35952
// exit ;
35950: GO 35965
// DestroyUnit ( tmp [ 1 ] ) ;
35952: LD_VAR 0 1
35956: PUSH
35957: LD_INT 1
35959: ARRAY
35960: PPUSH
35961: CALL_OW 65
// end ;
35965: PPOPN 1
35967: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
35968: LD_EXP 66
35972: PUSH
35973: LD_EXP 104
35977: AND
35978: IFFALSE 36107
35980: GO 35982
35982: DISABLE
35983: LD_INT 0
35985: PPUSH
// begin uc_side := 0 ;
35986: LD_ADDR_OWVAR 20
35990: PUSH
35991: LD_INT 0
35993: ST_TO_ADDR
// uc_nation := nation_arabian ;
35994: LD_ADDR_OWVAR 21
35998: PUSH
35999: LD_INT 2
36001: ST_TO_ADDR
// hc_gallery :=  ;
36002: LD_ADDR_OWVAR 33
36006: PUSH
36007: LD_STRING 
36009: ST_TO_ADDR
// hc_name :=  ;
36010: LD_ADDR_OWVAR 26
36014: PUSH
36015: LD_STRING 
36017: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
36018: LD_INT 1
36020: PPUSH
36021: LD_INT 11
36023: PPUSH
36024: LD_INT 10
36026: PPUSH
36027: CALL_OW 380
// un := CreateHuman ;
36031: LD_ADDR_VAR 0 1
36035: PUSH
36036: CALL_OW 44
36040: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36041: LD_VAR 0 1
36045: PPUSH
36046: LD_INT 1
36048: PPUSH
36049: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
36053: LD_INT 35
36055: PPUSH
36056: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36060: LD_VAR 0 1
36064: PPUSH
36065: LD_INT 22
36067: PUSH
36068: LD_OWVAR 2
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PPUSH
36077: CALL_OW 69
36081: PPUSH
36082: LD_VAR 0 1
36086: PPUSH
36087: CALL_OW 74
36091: PPUSH
36092: CALL_OW 115
// until IsDead ( un ) ;
36096: LD_VAR 0 1
36100: PPUSH
36101: CALL_OW 301
36105: IFFALSE 36053
// end ;
36107: PPOPN 1
36109: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
36110: LD_EXP 66
36114: PUSH
36115: LD_EXP 106
36119: AND
36120: IFFALSE 36132
36122: GO 36124
36124: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
36125: LD_STRING earthquake(getX(game), 0, 32)
36127: PPUSH
36128: CALL_OW 559
36132: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
36133: LD_EXP 66
36137: PUSH
36138: LD_EXP 107
36142: AND
36143: IFFALSE 36234
36145: GO 36147
36147: DISABLE
36148: LD_INT 0
36150: PPUSH
// begin enable ;
36151: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
36152: LD_ADDR_VAR 0 1
36156: PUSH
36157: LD_INT 22
36159: PUSH
36160: LD_OWVAR 2
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 21
36171: PUSH
36172: LD_INT 2
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 33
36181: PUSH
36182: LD_INT 3
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: LIST
36193: PPUSH
36194: CALL_OW 69
36198: ST_TO_ADDR
// if not tmp then
36199: LD_VAR 0 1
36203: NOT
36204: IFFALSE 36208
// exit ;
36206: GO 36234
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
36208: LD_VAR 0 1
36212: PUSH
36213: LD_INT 1
36215: PPUSH
36216: LD_VAR 0 1
36220: PPUSH
36221: CALL_OW 12
36225: ARRAY
36226: PPUSH
36227: LD_INT 1
36229: PPUSH
36230: CALL_OW 234
// end ;
36234: PPOPN 1
36236: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
36237: LD_EXP 66
36241: PUSH
36242: LD_EXP 108
36246: AND
36247: IFFALSE 36388
36249: GO 36251
36251: DISABLE
36252: LD_INT 0
36254: PPUSH
36255: PPUSH
36256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36257: LD_ADDR_VAR 0 3
36261: PUSH
36262: LD_INT 22
36264: PUSH
36265: LD_OWVAR 2
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 25
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PPUSH
36288: CALL_OW 69
36292: ST_TO_ADDR
// if not tmp then
36293: LD_VAR 0 3
36297: NOT
36298: IFFALSE 36302
// exit ;
36300: GO 36388
// un := tmp [ rand ( 1 , tmp ) ] ;
36302: LD_ADDR_VAR 0 2
36306: PUSH
36307: LD_VAR 0 3
36311: PUSH
36312: LD_INT 1
36314: PPUSH
36315: LD_VAR 0 3
36319: PPUSH
36320: CALL_OW 12
36324: ARRAY
36325: ST_TO_ADDR
// if Crawls ( un ) then
36326: LD_VAR 0 2
36330: PPUSH
36331: CALL_OW 318
36335: IFFALSE 36346
// ComWalk ( un ) ;
36337: LD_VAR 0 2
36341: PPUSH
36342: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
36346: LD_VAR 0 2
36350: PPUSH
36351: LD_INT 9
36353: PPUSH
36354: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
36358: LD_INT 28
36360: PPUSH
36361: LD_OWVAR 2
36365: PPUSH
36366: LD_INT 2
36368: PPUSH
36369: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
36373: LD_INT 29
36375: PPUSH
36376: LD_OWVAR 2
36380: PPUSH
36381: LD_INT 2
36383: PPUSH
36384: CALL_OW 322
// end ;
36388: PPOPN 3
36390: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
36391: LD_EXP 66
36395: PUSH
36396: LD_EXP 109
36400: AND
36401: IFFALSE 36512
36403: GO 36405
36405: DISABLE
36406: LD_INT 0
36408: PPUSH
36409: PPUSH
36410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36411: LD_ADDR_VAR 0 3
36415: PUSH
36416: LD_INT 22
36418: PUSH
36419: LD_OWVAR 2
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 25
36430: PUSH
36431: LD_INT 1
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PPUSH
36442: CALL_OW 69
36446: ST_TO_ADDR
// if not tmp then
36447: LD_VAR 0 3
36451: NOT
36452: IFFALSE 36456
// exit ;
36454: GO 36512
// un := tmp [ rand ( 1 , tmp ) ] ;
36456: LD_ADDR_VAR 0 2
36460: PUSH
36461: LD_VAR 0 3
36465: PUSH
36466: LD_INT 1
36468: PPUSH
36469: LD_VAR 0 3
36473: PPUSH
36474: CALL_OW 12
36478: ARRAY
36479: ST_TO_ADDR
// if Crawls ( un ) then
36480: LD_VAR 0 2
36484: PPUSH
36485: CALL_OW 318
36489: IFFALSE 36500
// ComWalk ( un ) ;
36491: LD_VAR 0 2
36495: PPUSH
36496: CALL_OW 138
// SetClass ( un , class_mortar ) ;
36500: LD_VAR 0 2
36504: PPUSH
36505: LD_INT 8
36507: PPUSH
36508: CALL_OW 336
// end ;
36512: PPOPN 3
36514: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
36515: LD_EXP 66
36519: PUSH
36520: LD_EXP 110
36524: AND
36525: IFFALSE 36669
36527: GO 36529
36529: DISABLE
36530: LD_INT 0
36532: PPUSH
36533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
36534: LD_ADDR_VAR 0 2
36538: PUSH
36539: LD_INT 22
36541: PUSH
36542: LD_OWVAR 2
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 21
36553: PUSH
36554: LD_INT 2
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 2
36563: PUSH
36564: LD_INT 34
36566: PUSH
36567: LD_INT 12
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 34
36576: PUSH
36577: LD_INT 51
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 34
36586: PUSH
36587: LD_INT 32
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: LIST
36604: PPUSH
36605: CALL_OW 69
36609: ST_TO_ADDR
// if not tmp then
36610: LD_VAR 0 2
36614: NOT
36615: IFFALSE 36619
// exit ;
36617: GO 36669
// for i in tmp do
36619: LD_ADDR_VAR 0 1
36623: PUSH
36624: LD_VAR 0 2
36628: PUSH
36629: FOR_IN
36630: IFFALSE 36667
// if GetCargo ( i , mat_artifact ) = 0 then
36632: LD_VAR 0 1
36636: PPUSH
36637: LD_INT 4
36639: PPUSH
36640: CALL_OW 289
36644: PUSH
36645: LD_INT 0
36647: EQUAL
36648: IFFALSE 36665
// SetCargo ( i , mat_siberit , 100 ) ;
36650: LD_VAR 0 1
36654: PPUSH
36655: LD_INT 3
36657: PPUSH
36658: LD_INT 100
36660: PPUSH
36661: CALL_OW 290
36665: GO 36629
36667: POP
36668: POP
// end ;
36669: PPOPN 2
36671: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
36672: LD_EXP 66
36676: PUSH
36677: LD_EXP 111
36681: AND
36682: IFFALSE 36865
36684: GO 36686
36686: DISABLE
36687: LD_INT 0
36689: PPUSH
36690: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
36691: LD_ADDR_VAR 0 2
36695: PUSH
36696: LD_INT 22
36698: PUSH
36699: LD_OWVAR 2
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PPUSH
36708: CALL_OW 69
36712: ST_TO_ADDR
// if not tmp then
36713: LD_VAR 0 2
36717: NOT
36718: IFFALSE 36722
// exit ;
36720: GO 36865
// for i := 1 to 2 do
36722: LD_ADDR_VAR 0 1
36726: PUSH
36727: DOUBLE
36728: LD_INT 1
36730: DEC
36731: ST_TO_ADDR
36732: LD_INT 2
36734: PUSH
36735: FOR_TO
36736: IFFALSE 36863
// begin uc_side := your_side ;
36738: LD_ADDR_OWVAR 20
36742: PUSH
36743: LD_OWVAR 2
36747: ST_TO_ADDR
// uc_nation := nation_american ;
36748: LD_ADDR_OWVAR 21
36752: PUSH
36753: LD_INT 1
36755: ST_TO_ADDR
// vc_chassis := us_morphling ;
36756: LD_ADDR_OWVAR 37
36760: PUSH
36761: LD_INT 5
36763: ST_TO_ADDR
// vc_engine := engine_siberite ;
36764: LD_ADDR_OWVAR 39
36768: PUSH
36769: LD_INT 3
36771: ST_TO_ADDR
// vc_control := control_computer ;
36772: LD_ADDR_OWVAR 38
36776: PUSH
36777: LD_INT 3
36779: ST_TO_ADDR
// vc_weapon := us_double_laser ;
36780: LD_ADDR_OWVAR 40
36784: PUSH
36785: LD_INT 10
36787: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
36788: LD_VAR 0 2
36792: PUSH
36793: LD_INT 1
36795: ARRAY
36796: PPUSH
36797: CALL_OW 310
36801: NOT
36802: IFFALSE 36849
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
36804: CALL_OW 45
36808: PPUSH
36809: LD_VAR 0 2
36813: PUSH
36814: LD_INT 1
36816: ARRAY
36817: PPUSH
36818: CALL_OW 250
36822: PPUSH
36823: LD_VAR 0 2
36827: PUSH
36828: LD_INT 1
36830: ARRAY
36831: PPUSH
36832: CALL_OW 251
36836: PPUSH
36837: LD_INT 12
36839: PPUSH
36840: LD_INT 1
36842: PPUSH
36843: CALL_OW 50
36847: GO 36861
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
36849: CALL_OW 45
36853: PPUSH
36854: LD_INT 1
36856: PPUSH
36857: CALL_OW 51
// end ;
36861: GO 36735
36863: POP
36864: POP
// end ;
36865: PPOPN 2
36867: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
36868: LD_EXP 66
36872: PUSH
36873: LD_EXP 112
36877: AND
36878: IFFALSE 37100
36880: GO 36882
36882: DISABLE
36883: LD_INT 0
36885: PPUSH
36886: PPUSH
36887: PPUSH
36888: PPUSH
36889: PPUSH
36890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
36891: LD_ADDR_VAR 0 6
36895: PUSH
36896: LD_INT 22
36898: PUSH
36899: LD_OWVAR 2
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 21
36910: PUSH
36911: LD_INT 1
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 3
36920: PUSH
36921: LD_INT 23
36923: PUSH
36924: LD_INT 0
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: LIST
36939: PPUSH
36940: CALL_OW 69
36944: ST_TO_ADDR
// if not tmp then
36945: LD_VAR 0 6
36949: NOT
36950: IFFALSE 36954
// exit ;
36952: GO 37100
// s1 := rand ( 1 , 4 ) ;
36954: LD_ADDR_VAR 0 2
36958: PUSH
36959: LD_INT 1
36961: PPUSH
36962: LD_INT 4
36964: PPUSH
36965: CALL_OW 12
36969: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
36970: LD_ADDR_VAR 0 4
36974: PUSH
36975: LD_VAR 0 6
36979: PUSH
36980: LD_INT 1
36982: ARRAY
36983: PPUSH
36984: LD_VAR 0 2
36988: PPUSH
36989: CALL_OW 259
36993: ST_TO_ADDR
// if s1 = 1 then
36994: LD_VAR 0 2
36998: PUSH
36999: LD_INT 1
37001: EQUAL
37002: IFFALSE 37022
// s2 := rand ( 2 , 4 ) else
37004: LD_ADDR_VAR 0 3
37008: PUSH
37009: LD_INT 2
37011: PPUSH
37012: LD_INT 4
37014: PPUSH
37015: CALL_OW 12
37019: ST_TO_ADDR
37020: GO 37030
// s2 := 1 ;
37022: LD_ADDR_VAR 0 3
37026: PUSH
37027: LD_INT 1
37029: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
37030: LD_ADDR_VAR 0 5
37034: PUSH
37035: LD_VAR 0 6
37039: PUSH
37040: LD_INT 1
37042: ARRAY
37043: PPUSH
37044: LD_VAR 0 3
37048: PPUSH
37049: CALL_OW 259
37053: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
37054: LD_VAR 0 6
37058: PUSH
37059: LD_INT 1
37061: ARRAY
37062: PPUSH
37063: LD_VAR 0 2
37067: PPUSH
37068: LD_VAR 0 5
37072: PPUSH
37073: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
37077: LD_VAR 0 6
37081: PUSH
37082: LD_INT 1
37084: ARRAY
37085: PPUSH
37086: LD_VAR 0 3
37090: PPUSH
37091: LD_VAR 0 4
37095: PPUSH
37096: CALL_OW 237
// end ;
37100: PPOPN 6
37102: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
37103: LD_EXP 66
37107: PUSH
37108: LD_EXP 113
37112: AND
37113: IFFALSE 37192
37115: GO 37117
37117: DISABLE
37118: LD_INT 0
37120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
37121: LD_ADDR_VAR 0 1
37125: PUSH
37126: LD_INT 22
37128: PUSH
37129: LD_OWVAR 2
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 30
37140: PUSH
37141: LD_INT 3
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PPUSH
37152: CALL_OW 69
37156: ST_TO_ADDR
// if not tmp then
37157: LD_VAR 0 1
37161: NOT
37162: IFFALSE 37166
// exit ;
37164: GO 37192
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37166: LD_VAR 0 1
37170: PUSH
37171: LD_INT 1
37173: PPUSH
37174: LD_VAR 0 1
37178: PPUSH
37179: CALL_OW 12
37183: ARRAY
37184: PPUSH
37185: LD_INT 1
37187: PPUSH
37188: CALL_OW 234
// end ;
37192: PPOPN 1
37194: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
37195: LD_EXP 66
37199: PUSH
37200: LD_EXP 114
37204: AND
37205: IFFALSE 37317
37207: GO 37209
37209: DISABLE
37210: LD_INT 0
37212: PPUSH
37213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
37214: LD_ADDR_VAR 0 2
37218: PUSH
37219: LD_INT 22
37221: PUSH
37222: LD_OWVAR 2
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 2
37233: PUSH
37234: LD_INT 30
37236: PUSH
37237: LD_INT 27
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 30
37246: PUSH
37247: LD_INT 26
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 30
37256: PUSH
37257: LD_INT 28
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PPUSH
37274: CALL_OW 69
37278: ST_TO_ADDR
// if not tmp then
37279: LD_VAR 0 2
37283: NOT
37284: IFFALSE 37288
// exit ;
37286: GO 37317
// for i in tmp do
37288: LD_ADDR_VAR 0 1
37292: PUSH
37293: LD_VAR 0 2
37297: PUSH
37298: FOR_IN
37299: IFFALSE 37315
// SetLives ( i , 1 ) ;
37301: LD_VAR 0 1
37305: PPUSH
37306: LD_INT 1
37308: PPUSH
37309: CALL_OW 234
37313: GO 37298
37315: POP
37316: POP
// end ;
37317: PPOPN 2
37319: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
37320: LD_EXP 66
37324: PUSH
37325: LD_EXP 115
37329: AND
37330: IFFALSE 37604
37332: GO 37334
37334: DISABLE
37335: LD_INT 0
37337: PPUSH
37338: PPUSH
37339: PPUSH
// begin i := rand ( 1 , 7 ) ;
37340: LD_ADDR_VAR 0 1
37344: PUSH
37345: LD_INT 1
37347: PPUSH
37348: LD_INT 7
37350: PPUSH
37351: CALL_OW 12
37355: ST_TO_ADDR
// case i of 1 :
37356: LD_VAR 0 1
37360: PUSH
37361: LD_INT 1
37363: DOUBLE
37364: EQUAL
37365: IFTRUE 37369
37367: GO 37379
37369: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
37370: LD_STRING earthquake(getX(game), 0, 32)
37372: PPUSH
37373: CALL_OW 559
37377: GO 37604
37379: LD_INT 2
37381: DOUBLE
37382: EQUAL
37383: IFTRUE 37387
37385: GO 37401
37387: POP
// begin ToLua ( displayStucuk(); ) ;
37388: LD_STRING displayStucuk();
37390: PPUSH
37391: CALL_OW 559
// ResetFog ;
37395: CALL_OW 335
// end ; 3 :
37399: GO 37604
37401: LD_INT 3
37403: DOUBLE
37404: EQUAL
37405: IFTRUE 37409
37407: GO 37513
37409: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37410: LD_ADDR_VAR 0 2
37414: PUSH
37415: LD_INT 22
37417: PUSH
37418: LD_OWVAR 2
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 25
37429: PUSH
37430: LD_INT 1
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PPUSH
37441: CALL_OW 69
37445: ST_TO_ADDR
// if not tmp then
37446: LD_VAR 0 2
37450: NOT
37451: IFFALSE 37455
// exit ;
37453: GO 37604
// un := tmp [ rand ( 1 , tmp ) ] ;
37455: LD_ADDR_VAR 0 3
37459: PUSH
37460: LD_VAR 0 2
37464: PUSH
37465: LD_INT 1
37467: PPUSH
37468: LD_VAR 0 2
37472: PPUSH
37473: CALL_OW 12
37477: ARRAY
37478: ST_TO_ADDR
// if Crawls ( un ) then
37479: LD_VAR 0 3
37483: PPUSH
37484: CALL_OW 318
37488: IFFALSE 37499
// ComWalk ( un ) ;
37490: LD_VAR 0 3
37494: PPUSH
37495: CALL_OW 138
// SetClass ( un , class_mortar ) ;
37499: LD_VAR 0 3
37503: PPUSH
37504: LD_INT 8
37506: PPUSH
37507: CALL_OW 336
// end ; 4 :
37511: GO 37604
37513: LD_INT 4
37515: DOUBLE
37516: EQUAL
37517: IFTRUE 37521
37519: GO 37582
37521: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
37522: LD_ADDR_VAR 0 2
37526: PUSH
37527: LD_INT 22
37529: PUSH
37530: LD_OWVAR 2
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 30
37541: PUSH
37542: LD_INT 29
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PPUSH
37553: CALL_OW 69
37557: ST_TO_ADDR
// if not tmp then
37558: LD_VAR 0 2
37562: NOT
37563: IFFALSE 37567
// exit ;
37565: GO 37604
// DestroyUnit ( tmp [ 1 ] ) ;
37567: LD_VAR 0 2
37571: PUSH
37572: LD_INT 1
37574: ARRAY
37575: PPUSH
37576: CALL_OW 65
// end ; 5 .. 7 :
37580: GO 37604
37582: LD_INT 5
37584: DOUBLE
37585: GREATEREQUAL
37586: IFFALSE 37594
37588: LD_INT 7
37590: DOUBLE
37591: LESSEQUAL
37592: IFTRUE 37596
37594: GO 37603
37596: POP
// StreamSibBomb ; end ;
37597: CALL 33854 0 0
37601: GO 37604
37603: POP
// end ;
37604: PPOPN 3
37606: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
37607: LD_EXP 66
37611: PUSH
37612: LD_EXP 116
37616: AND
37617: IFFALSE 37773
37619: GO 37621
37621: DISABLE
37622: LD_INT 0
37624: PPUSH
37625: PPUSH
37626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
37627: LD_ADDR_VAR 0 2
37631: PUSH
37632: LD_INT 81
37634: PUSH
37635: LD_OWVAR 2
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 2
37646: PUSH
37647: LD_INT 21
37649: PUSH
37650: LD_INT 1
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 21
37659: PUSH
37660: LD_INT 2
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: LIST
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PPUSH
37676: CALL_OW 69
37680: ST_TO_ADDR
// if not tmp then
37681: LD_VAR 0 2
37685: NOT
37686: IFFALSE 37690
// exit ;
37688: GO 37773
// p := 0 ;
37690: LD_ADDR_VAR 0 3
37694: PUSH
37695: LD_INT 0
37697: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
37698: LD_INT 35
37700: PPUSH
37701: CALL_OW 67
// p := p + 1 ;
37705: LD_ADDR_VAR 0 3
37709: PUSH
37710: LD_VAR 0 3
37714: PUSH
37715: LD_INT 1
37717: PLUS
37718: ST_TO_ADDR
// for i in tmp do
37719: LD_ADDR_VAR 0 1
37723: PUSH
37724: LD_VAR 0 2
37728: PUSH
37729: FOR_IN
37730: IFFALSE 37761
// if GetLives ( i ) < 1000 then
37732: LD_VAR 0 1
37736: PPUSH
37737: CALL_OW 256
37741: PUSH
37742: LD_INT 1000
37744: LESS
37745: IFFALSE 37759
// SetLives ( i , 1000 ) ;
37747: LD_VAR 0 1
37751: PPUSH
37752: LD_INT 1000
37754: PPUSH
37755: CALL_OW 234
37759: GO 37729
37761: POP
37762: POP
// until p > 20 ;
37763: LD_VAR 0 3
37767: PUSH
37768: LD_INT 20
37770: GREATER
37771: IFFALSE 37698
// end ;
37773: PPOPN 3
37775: END
// every 0 0$1 trigger StreamModeActive and sTime do
37776: LD_EXP 66
37780: PUSH
37781: LD_EXP 117
37785: AND
37786: IFFALSE 37821
37788: GO 37790
37790: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
37791: LD_INT 28
37793: PPUSH
37794: LD_OWVAR 2
37798: PPUSH
37799: LD_INT 2
37801: PPUSH
37802: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
37806: LD_INT 30
37808: PPUSH
37809: LD_OWVAR 2
37813: PPUSH
37814: LD_INT 2
37816: PPUSH
37817: CALL_OW 322
// end ;
37821: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
37822: LD_EXP 66
37826: PUSH
37827: LD_EXP 118
37831: AND
37832: IFFALSE 37953
37834: GO 37836
37836: DISABLE
37837: LD_INT 0
37839: PPUSH
37840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37841: LD_ADDR_VAR 0 2
37845: PUSH
37846: LD_INT 22
37848: PUSH
37849: LD_OWVAR 2
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 21
37860: PUSH
37861: LD_INT 1
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 3
37870: PUSH
37871: LD_INT 23
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: LIST
37889: PPUSH
37890: CALL_OW 69
37894: ST_TO_ADDR
// if not tmp then
37895: LD_VAR 0 2
37899: NOT
37900: IFFALSE 37904
// exit ;
37902: GO 37953
// for i in tmp do
37904: LD_ADDR_VAR 0 1
37908: PUSH
37909: LD_VAR 0 2
37913: PUSH
37914: FOR_IN
37915: IFFALSE 37951
// begin if Crawls ( i ) then
37917: LD_VAR 0 1
37921: PPUSH
37922: CALL_OW 318
37926: IFFALSE 37937
// ComWalk ( i ) ;
37928: LD_VAR 0 1
37932: PPUSH
37933: CALL_OW 138
// SetClass ( i , 2 ) ;
37937: LD_VAR 0 1
37941: PPUSH
37942: LD_INT 2
37944: PPUSH
37945: CALL_OW 336
// end ;
37949: GO 37914
37951: POP
37952: POP
// end ;
37953: PPOPN 2
37955: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
37956: LD_EXP 66
37960: PUSH
37961: LD_EXP 119
37965: AND
37966: IFFALSE 38247
37968: GO 37970
37970: DISABLE
37971: LD_INT 0
37973: PPUSH
37974: PPUSH
37975: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
37976: LD_OWVAR 2
37980: PPUSH
37981: LD_INT 9
37983: PPUSH
37984: LD_INT 1
37986: PPUSH
37987: LD_INT 1
37989: PPUSH
37990: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
37994: LD_INT 9
37996: PPUSH
37997: LD_OWVAR 2
38001: PPUSH
38002: CALL_OW 343
// uc_side := 9 ;
38006: LD_ADDR_OWVAR 20
38010: PUSH
38011: LD_INT 9
38013: ST_TO_ADDR
// uc_nation := 2 ;
38014: LD_ADDR_OWVAR 21
38018: PUSH
38019: LD_INT 2
38021: ST_TO_ADDR
// hc_name := Dark Warrior ;
38022: LD_ADDR_OWVAR 26
38026: PUSH
38027: LD_STRING Dark Warrior
38029: ST_TO_ADDR
// hc_gallery :=  ;
38030: LD_ADDR_OWVAR 33
38034: PUSH
38035: LD_STRING 
38037: ST_TO_ADDR
// hc_noskilllimit := true ;
38038: LD_ADDR_OWVAR 76
38042: PUSH
38043: LD_INT 1
38045: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
38046: LD_ADDR_OWVAR 31
38050: PUSH
38051: LD_INT 30
38053: PUSH
38054: LD_INT 30
38056: PUSH
38057: LD_INT 30
38059: PUSH
38060: LD_INT 30
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: ST_TO_ADDR
// un := CreateHuman ;
38069: LD_ADDR_VAR 0 3
38073: PUSH
38074: CALL_OW 44
38078: ST_TO_ADDR
// hc_noskilllimit := false ;
38079: LD_ADDR_OWVAR 76
38083: PUSH
38084: LD_INT 0
38086: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38087: LD_VAR 0 3
38091: PPUSH
38092: LD_INT 1
38094: PPUSH
38095: CALL_OW 51
// p := 0 ;
38099: LD_ADDR_VAR 0 2
38103: PUSH
38104: LD_INT 0
38106: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38107: LD_INT 35
38109: PPUSH
38110: CALL_OW 67
// p := p + 1 ;
38114: LD_ADDR_VAR 0 2
38118: PUSH
38119: LD_VAR 0 2
38123: PUSH
38124: LD_INT 1
38126: PLUS
38127: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
38128: LD_VAR 0 3
38132: PPUSH
38133: CALL_OW 256
38137: PUSH
38138: LD_INT 1000
38140: LESS
38141: IFFALSE 38155
// SetLives ( un , 1000 ) ;
38143: LD_VAR 0 3
38147: PPUSH
38148: LD_INT 1000
38150: PPUSH
38151: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
38155: LD_VAR 0 3
38159: PPUSH
38160: LD_INT 81
38162: PUSH
38163: LD_OWVAR 2
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 91
38174: PUSH
38175: LD_VAR 0 3
38179: PUSH
38180: LD_INT 30
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: LIST
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PPUSH
38192: CALL_OW 69
38196: PPUSH
38197: LD_VAR 0 3
38201: PPUSH
38202: CALL_OW 74
38206: PPUSH
38207: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
38211: LD_VAR 0 2
38215: PUSH
38216: LD_INT 60
38218: GREATER
38219: PUSH
38220: LD_VAR 0 3
38224: PPUSH
38225: CALL_OW 301
38229: OR
38230: IFFALSE 38107
// if un then
38232: LD_VAR 0 3
38236: IFFALSE 38247
// RemoveUnit ( un ) ;
38238: LD_VAR 0 3
38242: PPUSH
38243: CALL_OW 64
// end ;
38247: PPOPN 3
38249: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
38250: LD_INT 0
38252: PPUSH
// case cmd of 301 :
38253: LD_VAR 0 1
38257: PUSH
38258: LD_INT 301
38260: DOUBLE
38261: EQUAL
38262: IFTRUE 38266
38264: GO 38298
38266: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
38267: LD_VAR 0 6
38271: PPUSH
38272: LD_VAR 0 7
38276: PPUSH
38277: LD_VAR 0 8
38281: PPUSH
38282: LD_VAR 0 4
38286: PPUSH
38287: LD_VAR 0 5
38291: PPUSH
38292: CALL 39499 0 5
38296: GO 38419
38298: LD_INT 302
38300: DOUBLE
38301: EQUAL
38302: IFTRUE 38306
38304: GO 38343
38306: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
38307: LD_VAR 0 6
38311: PPUSH
38312: LD_VAR 0 7
38316: PPUSH
38317: LD_VAR 0 8
38321: PPUSH
38322: LD_VAR 0 9
38326: PPUSH
38327: LD_VAR 0 4
38331: PPUSH
38332: LD_VAR 0 5
38336: PPUSH
38337: CALL 39590 0 6
38341: GO 38419
38343: LD_INT 303
38345: DOUBLE
38346: EQUAL
38347: IFTRUE 38351
38349: GO 38388
38351: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
38352: LD_VAR 0 6
38356: PPUSH
38357: LD_VAR 0 7
38361: PPUSH
38362: LD_VAR 0 8
38366: PPUSH
38367: LD_VAR 0 9
38371: PPUSH
38372: LD_VAR 0 4
38376: PPUSH
38377: LD_VAR 0 5
38381: PPUSH
38382: CALL 38424 0 6
38386: GO 38419
38388: LD_INT 304
38390: DOUBLE
38391: EQUAL
38392: IFTRUE 38396
38394: GO 38418
38396: POP
// hHackTeleport ( unit , x , y ) ; end ;
38397: LD_VAR 0 2
38401: PPUSH
38402: LD_VAR 0 4
38406: PPUSH
38407: LD_VAR 0 5
38411: PPUSH
38412: CALL 40183 0 3
38416: GO 38419
38418: POP
// end ;
38419: LD_VAR 0 12
38423: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
38424: LD_INT 0
38426: PPUSH
38427: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
38428: LD_VAR 0 1
38432: PUSH
38433: LD_INT 1
38435: LESS
38436: PUSH
38437: LD_VAR 0 1
38441: PUSH
38442: LD_INT 3
38444: GREATER
38445: OR
38446: PUSH
38447: LD_VAR 0 5
38451: PPUSH
38452: LD_VAR 0 6
38456: PPUSH
38457: CALL_OW 428
38461: OR
38462: IFFALSE 38466
// exit ;
38464: GO 39186
// uc_side := your_side ;
38466: LD_ADDR_OWVAR 20
38470: PUSH
38471: LD_OWVAR 2
38475: ST_TO_ADDR
// uc_nation := nation ;
38476: LD_ADDR_OWVAR 21
38480: PUSH
38481: LD_VAR 0 1
38485: ST_TO_ADDR
// bc_level = 1 ;
38486: LD_ADDR_OWVAR 43
38490: PUSH
38491: LD_INT 1
38493: ST_TO_ADDR
// case btype of 1 :
38494: LD_VAR 0 2
38498: PUSH
38499: LD_INT 1
38501: DOUBLE
38502: EQUAL
38503: IFTRUE 38507
38505: GO 38518
38507: POP
// bc_type := b_depot ; 2 :
38508: LD_ADDR_OWVAR 42
38512: PUSH
38513: LD_INT 0
38515: ST_TO_ADDR
38516: GO 39130
38518: LD_INT 2
38520: DOUBLE
38521: EQUAL
38522: IFTRUE 38526
38524: GO 38537
38526: POP
// bc_type := b_warehouse ; 3 :
38527: LD_ADDR_OWVAR 42
38531: PUSH
38532: LD_INT 1
38534: ST_TO_ADDR
38535: GO 39130
38537: LD_INT 3
38539: DOUBLE
38540: EQUAL
38541: IFTRUE 38545
38543: GO 38556
38545: POP
// bc_type := b_lab ; 4 .. 9 :
38546: LD_ADDR_OWVAR 42
38550: PUSH
38551: LD_INT 6
38553: ST_TO_ADDR
38554: GO 39130
38556: LD_INT 4
38558: DOUBLE
38559: GREATEREQUAL
38560: IFFALSE 38568
38562: LD_INT 9
38564: DOUBLE
38565: LESSEQUAL
38566: IFTRUE 38570
38568: GO 38622
38570: POP
// begin bc_type := b_lab_half ;
38571: LD_ADDR_OWVAR 42
38575: PUSH
38576: LD_INT 7
38578: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
38579: LD_ADDR_OWVAR 44
38583: PUSH
38584: LD_INT 10
38586: PUSH
38587: LD_INT 11
38589: PUSH
38590: LD_INT 12
38592: PUSH
38593: LD_INT 15
38595: PUSH
38596: LD_INT 14
38598: PUSH
38599: LD_INT 13
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: PUSH
38610: LD_VAR 0 2
38614: PUSH
38615: LD_INT 3
38617: MINUS
38618: ARRAY
38619: ST_TO_ADDR
// end ; 10 .. 13 :
38620: GO 39130
38622: LD_INT 10
38624: DOUBLE
38625: GREATEREQUAL
38626: IFFALSE 38634
38628: LD_INT 13
38630: DOUBLE
38631: LESSEQUAL
38632: IFTRUE 38636
38634: GO 38713
38636: POP
// begin bc_type := b_lab_full ;
38637: LD_ADDR_OWVAR 42
38641: PUSH
38642: LD_INT 8
38644: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
38645: LD_ADDR_OWVAR 44
38649: PUSH
38650: LD_INT 10
38652: PUSH
38653: LD_INT 12
38655: PUSH
38656: LD_INT 14
38658: PUSH
38659: LD_INT 13
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: PUSH
38668: LD_VAR 0 2
38672: PUSH
38673: LD_INT 9
38675: MINUS
38676: ARRAY
38677: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
38678: LD_ADDR_OWVAR 45
38682: PUSH
38683: LD_INT 11
38685: PUSH
38686: LD_INT 15
38688: PUSH
38689: LD_INT 12
38691: PUSH
38692: LD_INT 15
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: PUSH
38701: LD_VAR 0 2
38705: PUSH
38706: LD_INT 9
38708: MINUS
38709: ARRAY
38710: ST_TO_ADDR
// end ; 14 :
38711: GO 39130
38713: LD_INT 14
38715: DOUBLE
38716: EQUAL
38717: IFTRUE 38721
38719: GO 38732
38721: POP
// bc_type := b_workshop ; 15 :
38722: LD_ADDR_OWVAR 42
38726: PUSH
38727: LD_INT 2
38729: ST_TO_ADDR
38730: GO 39130
38732: LD_INT 15
38734: DOUBLE
38735: EQUAL
38736: IFTRUE 38740
38738: GO 38751
38740: POP
// bc_type := b_factory ; 16 :
38741: LD_ADDR_OWVAR 42
38745: PUSH
38746: LD_INT 3
38748: ST_TO_ADDR
38749: GO 39130
38751: LD_INT 16
38753: DOUBLE
38754: EQUAL
38755: IFTRUE 38759
38757: GO 38770
38759: POP
// bc_type := b_ext_gun ; 17 :
38760: LD_ADDR_OWVAR 42
38764: PUSH
38765: LD_INT 17
38767: ST_TO_ADDR
38768: GO 39130
38770: LD_INT 17
38772: DOUBLE
38773: EQUAL
38774: IFTRUE 38778
38776: GO 38806
38778: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
38779: LD_ADDR_OWVAR 42
38783: PUSH
38784: LD_INT 19
38786: PUSH
38787: LD_INT 23
38789: PUSH
38790: LD_INT 19
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: LIST
38797: PUSH
38798: LD_VAR 0 1
38802: ARRAY
38803: ST_TO_ADDR
38804: GO 39130
38806: LD_INT 18
38808: DOUBLE
38809: EQUAL
38810: IFTRUE 38814
38812: GO 38825
38814: POP
// bc_type := b_ext_radar ; 19 :
38815: LD_ADDR_OWVAR 42
38819: PUSH
38820: LD_INT 20
38822: ST_TO_ADDR
38823: GO 39130
38825: LD_INT 19
38827: DOUBLE
38828: EQUAL
38829: IFTRUE 38833
38831: GO 38844
38833: POP
// bc_type := b_ext_radio ; 20 :
38834: LD_ADDR_OWVAR 42
38838: PUSH
38839: LD_INT 22
38841: ST_TO_ADDR
38842: GO 39130
38844: LD_INT 20
38846: DOUBLE
38847: EQUAL
38848: IFTRUE 38852
38850: GO 38863
38852: POP
// bc_type := b_ext_siberium ; 21 :
38853: LD_ADDR_OWVAR 42
38857: PUSH
38858: LD_INT 21
38860: ST_TO_ADDR
38861: GO 39130
38863: LD_INT 21
38865: DOUBLE
38866: EQUAL
38867: IFTRUE 38871
38869: GO 38882
38871: POP
// bc_type := b_ext_computer ; 22 :
38872: LD_ADDR_OWVAR 42
38876: PUSH
38877: LD_INT 24
38879: ST_TO_ADDR
38880: GO 39130
38882: LD_INT 22
38884: DOUBLE
38885: EQUAL
38886: IFTRUE 38890
38888: GO 38901
38890: POP
// bc_type := b_ext_track ; 23 :
38891: LD_ADDR_OWVAR 42
38895: PUSH
38896: LD_INT 16
38898: ST_TO_ADDR
38899: GO 39130
38901: LD_INT 23
38903: DOUBLE
38904: EQUAL
38905: IFTRUE 38909
38907: GO 38920
38909: POP
// bc_type := b_ext_laser ; 24 :
38910: LD_ADDR_OWVAR 42
38914: PUSH
38915: LD_INT 25
38917: ST_TO_ADDR
38918: GO 39130
38920: LD_INT 24
38922: DOUBLE
38923: EQUAL
38924: IFTRUE 38928
38926: GO 38939
38928: POP
// bc_type := b_control_tower ; 25 :
38929: LD_ADDR_OWVAR 42
38933: PUSH
38934: LD_INT 36
38936: ST_TO_ADDR
38937: GO 39130
38939: LD_INT 25
38941: DOUBLE
38942: EQUAL
38943: IFTRUE 38947
38945: GO 38958
38947: POP
// bc_type := b_breastwork ; 26 :
38948: LD_ADDR_OWVAR 42
38952: PUSH
38953: LD_INT 31
38955: ST_TO_ADDR
38956: GO 39130
38958: LD_INT 26
38960: DOUBLE
38961: EQUAL
38962: IFTRUE 38966
38964: GO 38977
38966: POP
// bc_type := b_bunker ; 27 :
38967: LD_ADDR_OWVAR 42
38971: PUSH
38972: LD_INT 32
38974: ST_TO_ADDR
38975: GO 39130
38977: LD_INT 27
38979: DOUBLE
38980: EQUAL
38981: IFTRUE 38985
38983: GO 38996
38985: POP
// bc_type := b_turret ; 28 :
38986: LD_ADDR_OWVAR 42
38990: PUSH
38991: LD_INT 33
38993: ST_TO_ADDR
38994: GO 39130
38996: LD_INT 28
38998: DOUBLE
38999: EQUAL
39000: IFTRUE 39004
39002: GO 39015
39004: POP
// bc_type := b_armoury ; 29 :
39005: LD_ADDR_OWVAR 42
39009: PUSH
39010: LD_INT 4
39012: ST_TO_ADDR
39013: GO 39130
39015: LD_INT 29
39017: DOUBLE
39018: EQUAL
39019: IFTRUE 39023
39021: GO 39034
39023: POP
// bc_type := b_barracks ; 30 :
39024: LD_ADDR_OWVAR 42
39028: PUSH
39029: LD_INT 5
39031: ST_TO_ADDR
39032: GO 39130
39034: LD_INT 30
39036: DOUBLE
39037: EQUAL
39038: IFTRUE 39042
39040: GO 39053
39042: POP
// bc_type := b_solar_power ; 31 :
39043: LD_ADDR_OWVAR 42
39047: PUSH
39048: LD_INT 27
39050: ST_TO_ADDR
39051: GO 39130
39053: LD_INT 31
39055: DOUBLE
39056: EQUAL
39057: IFTRUE 39061
39059: GO 39072
39061: POP
// bc_type := b_oil_power ; 32 :
39062: LD_ADDR_OWVAR 42
39066: PUSH
39067: LD_INT 26
39069: ST_TO_ADDR
39070: GO 39130
39072: LD_INT 32
39074: DOUBLE
39075: EQUAL
39076: IFTRUE 39080
39078: GO 39091
39080: POP
// bc_type := b_siberite_power ; 33 :
39081: LD_ADDR_OWVAR 42
39085: PUSH
39086: LD_INT 28
39088: ST_TO_ADDR
39089: GO 39130
39091: LD_INT 33
39093: DOUBLE
39094: EQUAL
39095: IFTRUE 39099
39097: GO 39110
39099: POP
// bc_type := b_oil_mine ; 34 :
39100: LD_ADDR_OWVAR 42
39104: PUSH
39105: LD_INT 29
39107: ST_TO_ADDR
39108: GO 39130
39110: LD_INT 34
39112: DOUBLE
39113: EQUAL
39114: IFTRUE 39118
39116: GO 39129
39118: POP
// bc_type := b_siberite_mine ; end ;
39119: LD_ADDR_OWVAR 42
39123: PUSH
39124: LD_INT 30
39126: ST_TO_ADDR
39127: GO 39130
39129: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
39130: LD_ADDR_VAR 0 8
39134: PUSH
39135: LD_VAR 0 5
39139: PPUSH
39140: LD_VAR 0 6
39144: PPUSH
39145: LD_VAR 0 3
39149: PPUSH
39150: CALL_OW 47
39154: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
39155: LD_OWVAR 42
39159: PUSH
39160: LD_INT 32
39162: PUSH
39163: LD_INT 33
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: IN
39170: IFFALSE 39186
// PlaceWeaponTurret ( b , weapon ) ;
39172: LD_VAR 0 8
39176: PPUSH
39177: LD_VAR 0 4
39181: PPUSH
39182: CALL_OW 431
// end ;
39186: LD_VAR 0 7
39190: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
39191: LD_INT 0
39193: PPUSH
39194: PPUSH
39195: PPUSH
39196: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39197: LD_ADDR_VAR 0 4
39201: PUSH
39202: LD_INT 22
39204: PUSH
39205: LD_OWVAR 2
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 2
39216: PUSH
39217: LD_INT 30
39219: PUSH
39220: LD_INT 0
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 30
39229: PUSH
39230: LD_INT 1
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: LIST
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PPUSH
39246: CALL_OW 69
39250: ST_TO_ADDR
// if not tmp then
39251: LD_VAR 0 4
39255: NOT
39256: IFFALSE 39260
// exit ;
39258: GO 39319
// for i in tmp do
39260: LD_ADDR_VAR 0 2
39264: PUSH
39265: LD_VAR 0 4
39269: PUSH
39270: FOR_IN
39271: IFFALSE 39317
// for j = 1 to 3 do
39273: LD_ADDR_VAR 0 3
39277: PUSH
39278: DOUBLE
39279: LD_INT 1
39281: DEC
39282: ST_TO_ADDR
39283: LD_INT 3
39285: PUSH
39286: FOR_TO
39287: IFFALSE 39313
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
39289: LD_VAR 0 2
39293: PPUSH
39294: CALL_OW 274
39298: PPUSH
39299: LD_VAR 0 3
39303: PPUSH
39304: LD_INT 99999
39306: PPUSH
39307: CALL_OW 277
39311: GO 39286
39313: POP
39314: POP
39315: GO 39270
39317: POP
39318: POP
// end ;
39319: LD_VAR 0 1
39323: RET
// export function hHackSetLevel10 ; var i , j ; begin
39324: LD_INT 0
39326: PPUSH
39327: PPUSH
39328: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
39329: LD_ADDR_VAR 0 2
39333: PUSH
39334: LD_INT 21
39336: PUSH
39337: LD_INT 1
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PPUSH
39344: CALL_OW 69
39348: PUSH
39349: FOR_IN
39350: IFFALSE 39402
// if IsSelected ( i ) then
39352: LD_VAR 0 2
39356: PPUSH
39357: CALL_OW 306
39361: IFFALSE 39400
// begin for j := 1 to 4 do
39363: LD_ADDR_VAR 0 3
39367: PUSH
39368: DOUBLE
39369: LD_INT 1
39371: DEC
39372: ST_TO_ADDR
39373: LD_INT 4
39375: PUSH
39376: FOR_TO
39377: IFFALSE 39398
// SetSkill ( i , j , 10 ) ;
39379: LD_VAR 0 2
39383: PPUSH
39384: LD_VAR 0 3
39388: PPUSH
39389: LD_INT 10
39391: PPUSH
39392: CALL_OW 237
39396: GO 39376
39398: POP
39399: POP
// end ;
39400: GO 39349
39402: POP
39403: POP
// end ;
39404: LD_VAR 0 1
39408: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
39409: LD_INT 0
39411: PPUSH
39412: PPUSH
39413: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
39414: LD_ADDR_VAR 0 2
39418: PUSH
39419: LD_INT 22
39421: PUSH
39422: LD_OWVAR 2
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 21
39433: PUSH
39434: LD_INT 1
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PPUSH
39445: CALL_OW 69
39449: PUSH
39450: FOR_IN
39451: IFFALSE 39492
// begin for j := 1 to 4 do
39453: LD_ADDR_VAR 0 3
39457: PUSH
39458: DOUBLE
39459: LD_INT 1
39461: DEC
39462: ST_TO_ADDR
39463: LD_INT 4
39465: PUSH
39466: FOR_TO
39467: IFFALSE 39488
// SetSkill ( i , j , 10 ) ;
39469: LD_VAR 0 2
39473: PPUSH
39474: LD_VAR 0 3
39478: PPUSH
39479: LD_INT 10
39481: PPUSH
39482: CALL_OW 237
39486: GO 39466
39488: POP
39489: POP
// end ;
39490: GO 39450
39492: POP
39493: POP
// end ;
39494: LD_VAR 0 1
39498: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
39499: LD_INT 0
39501: PPUSH
// uc_side := your_side ;
39502: LD_ADDR_OWVAR 20
39506: PUSH
39507: LD_OWVAR 2
39511: ST_TO_ADDR
// uc_nation := nation ;
39512: LD_ADDR_OWVAR 21
39516: PUSH
39517: LD_VAR 0 1
39521: ST_TO_ADDR
// InitHc ;
39522: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
39526: LD_INT 0
39528: PPUSH
39529: LD_VAR 0 2
39533: PPUSH
39534: LD_VAR 0 3
39538: PPUSH
39539: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
39543: LD_VAR 0 4
39547: PPUSH
39548: LD_VAR 0 5
39552: PPUSH
39553: CALL_OW 428
39557: PUSH
39558: LD_INT 0
39560: EQUAL
39561: IFFALSE 39585
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
39563: CALL_OW 44
39567: PPUSH
39568: LD_VAR 0 4
39572: PPUSH
39573: LD_VAR 0 5
39577: PPUSH
39578: LD_INT 1
39580: PPUSH
39581: CALL_OW 48
// end ;
39585: LD_VAR 0 6
39589: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
39590: LD_INT 0
39592: PPUSH
39593: PPUSH
// uc_side := your_side ;
39594: LD_ADDR_OWVAR 20
39598: PUSH
39599: LD_OWVAR 2
39603: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
39604: LD_VAR 0 1
39608: PUSH
39609: LD_INT 1
39611: PUSH
39612: LD_INT 2
39614: PUSH
39615: LD_INT 3
39617: PUSH
39618: LD_INT 4
39620: PUSH
39621: LD_INT 5
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: IN
39631: IFFALSE 39643
// uc_nation := nation_american else
39633: LD_ADDR_OWVAR 21
39637: PUSH
39638: LD_INT 1
39640: ST_TO_ADDR
39641: GO 39686
// if chassis in [ 11 , 12 , 13 , 14 ] then
39643: LD_VAR 0 1
39647: PUSH
39648: LD_INT 11
39650: PUSH
39651: LD_INT 12
39653: PUSH
39654: LD_INT 13
39656: PUSH
39657: LD_INT 14
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: IN
39666: IFFALSE 39678
// uc_nation := nation_arabian else
39668: LD_ADDR_OWVAR 21
39672: PUSH
39673: LD_INT 2
39675: ST_TO_ADDR
39676: GO 39686
// uc_nation := nation_russian ;
39678: LD_ADDR_OWVAR 21
39682: PUSH
39683: LD_INT 3
39685: ST_TO_ADDR
// vc_chassis := chassis ;
39686: LD_ADDR_OWVAR 37
39690: PUSH
39691: LD_VAR 0 1
39695: ST_TO_ADDR
// vc_engine := engine ;
39696: LD_ADDR_OWVAR 39
39700: PUSH
39701: LD_VAR 0 2
39705: ST_TO_ADDR
// vc_control := control ;
39706: LD_ADDR_OWVAR 38
39710: PUSH
39711: LD_VAR 0 3
39715: ST_TO_ADDR
// vc_weapon := weapon ;
39716: LD_ADDR_OWVAR 40
39720: PUSH
39721: LD_VAR 0 4
39725: ST_TO_ADDR
// un := CreateVehicle ;
39726: LD_ADDR_VAR 0 8
39730: PUSH
39731: CALL_OW 45
39735: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
39736: LD_VAR 0 8
39740: PPUSH
39741: LD_INT 0
39743: PPUSH
39744: LD_INT 5
39746: PPUSH
39747: CALL_OW 12
39751: PPUSH
39752: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
39756: LD_VAR 0 8
39760: PPUSH
39761: LD_VAR 0 5
39765: PPUSH
39766: LD_VAR 0 6
39770: PPUSH
39771: LD_INT 1
39773: PPUSH
39774: CALL_OW 48
// end ;
39778: LD_VAR 0 7
39782: RET
// export hInvincible ; every 1 do
39783: GO 39785
39785: DISABLE
// hInvincible := [ ] ;
39786: LD_ADDR_EXP 120
39790: PUSH
39791: EMPTY
39792: ST_TO_ADDR
39793: END
// every 10 do var i ;
39794: GO 39796
39796: DISABLE
39797: LD_INT 0
39799: PPUSH
// begin enable ;
39800: ENABLE
// if not hInvincible then
39801: LD_EXP 120
39805: NOT
39806: IFFALSE 39810
// exit ;
39808: GO 39854
// for i in hInvincible do
39810: LD_ADDR_VAR 0 1
39814: PUSH
39815: LD_EXP 120
39819: PUSH
39820: FOR_IN
39821: IFFALSE 39852
// if GetLives ( i ) < 1000 then
39823: LD_VAR 0 1
39827: PPUSH
39828: CALL_OW 256
39832: PUSH
39833: LD_INT 1000
39835: LESS
39836: IFFALSE 39850
// SetLives ( i , 1000 ) ;
39838: LD_VAR 0 1
39842: PPUSH
39843: LD_INT 1000
39845: PPUSH
39846: CALL_OW 234
39850: GO 39820
39852: POP
39853: POP
// end ;
39854: PPOPN 1
39856: END
// export function hHackInvincible ; var i ; begin
39857: LD_INT 0
39859: PPUSH
39860: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
39861: LD_ADDR_VAR 0 2
39865: PUSH
39866: LD_INT 2
39868: PUSH
39869: LD_INT 21
39871: PUSH
39872: LD_INT 1
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 21
39881: PUSH
39882: LD_INT 2
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: LIST
39893: PPUSH
39894: CALL_OW 69
39898: PUSH
39899: FOR_IN
39900: IFFALSE 39961
// if IsSelected ( i ) then
39902: LD_VAR 0 2
39906: PPUSH
39907: CALL_OW 306
39911: IFFALSE 39959
// begin if i in hInvincible then
39913: LD_VAR 0 2
39917: PUSH
39918: LD_EXP 120
39922: IN
39923: IFFALSE 39943
// hInvincible := hInvincible diff i else
39925: LD_ADDR_EXP 120
39929: PUSH
39930: LD_EXP 120
39934: PUSH
39935: LD_VAR 0 2
39939: DIFF
39940: ST_TO_ADDR
39941: GO 39959
// hInvincible := hInvincible union i ;
39943: LD_ADDR_EXP 120
39947: PUSH
39948: LD_EXP 120
39952: PUSH
39953: LD_VAR 0 2
39957: UNION
39958: ST_TO_ADDR
// end ;
39959: GO 39899
39961: POP
39962: POP
// end ;
39963: LD_VAR 0 1
39967: RET
// export function hHackInvisible ; var i , j ; begin
39968: LD_INT 0
39970: PPUSH
39971: PPUSH
39972: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
39973: LD_ADDR_VAR 0 2
39977: PUSH
39978: LD_INT 21
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PPUSH
39988: CALL_OW 69
39992: PUSH
39993: FOR_IN
39994: IFFALSE 40018
// if IsSelected ( i ) then
39996: LD_VAR 0 2
40000: PPUSH
40001: CALL_OW 306
40005: IFFALSE 40016
// ComForceInvisible ( i ) ;
40007: LD_VAR 0 2
40011: PPUSH
40012: CALL_OW 496
40016: GO 39993
40018: POP
40019: POP
// end ;
40020: LD_VAR 0 1
40024: RET
// export function hHackChangeYourSide ; begin
40025: LD_INT 0
40027: PPUSH
// if your_side = 8 then
40028: LD_OWVAR 2
40032: PUSH
40033: LD_INT 8
40035: EQUAL
40036: IFFALSE 40048
// your_side := 0 else
40038: LD_ADDR_OWVAR 2
40042: PUSH
40043: LD_INT 0
40045: ST_TO_ADDR
40046: GO 40062
// your_side := your_side + 1 ;
40048: LD_ADDR_OWVAR 2
40052: PUSH
40053: LD_OWVAR 2
40057: PUSH
40058: LD_INT 1
40060: PLUS
40061: ST_TO_ADDR
// end ;
40062: LD_VAR 0 1
40066: RET
// export function hHackChangeUnitSide ; var i , j ; begin
40067: LD_INT 0
40069: PPUSH
40070: PPUSH
40071: PPUSH
// for i in all_units do
40072: LD_ADDR_VAR 0 2
40076: PUSH
40077: LD_OWVAR 3
40081: PUSH
40082: FOR_IN
40083: IFFALSE 40161
// if IsSelected ( i ) then
40085: LD_VAR 0 2
40089: PPUSH
40090: CALL_OW 306
40094: IFFALSE 40159
// begin j := GetSide ( i ) ;
40096: LD_ADDR_VAR 0 3
40100: PUSH
40101: LD_VAR 0 2
40105: PPUSH
40106: CALL_OW 255
40110: ST_TO_ADDR
// if j = 8 then
40111: LD_VAR 0 3
40115: PUSH
40116: LD_INT 8
40118: EQUAL
40119: IFFALSE 40131
// j := 0 else
40121: LD_ADDR_VAR 0 3
40125: PUSH
40126: LD_INT 0
40128: ST_TO_ADDR
40129: GO 40145
// j := j + 1 ;
40131: LD_ADDR_VAR 0 3
40135: PUSH
40136: LD_VAR 0 3
40140: PUSH
40141: LD_INT 1
40143: PLUS
40144: ST_TO_ADDR
// SetSide ( i , j ) ;
40145: LD_VAR 0 2
40149: PPUSH
40150: LD_VAR 0 3
40154: PPUSH
40155: CALL_OW 235
// end ;
40159: GO 40082
40161: POP
40162: POP
// end ;
40163: LD_VAR 0 1
40167: RET
// export function hHackFog ; begin
40168: LD_INT 0
40170: PPUSH
// FogOff ( true ) ;
40171: LD_INT 1
40173: PPUSH
40174: CALL_OW 344
// end ;
40178: LD_VAR 0 1
40182: RET
// export function hHackTeleport ( unit , x , y ) ; begin
40183: LD_INT 0
40185: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
40186: LD_VAR 0 1
40190: PPUSH
40191: LD_VAR 0 2
40195: PPUSH
40196: LD_VAR 0 3
40200: PPUSH
40201: LD_INT 1
40203: PPUSH
40204: LD_INT 1
40206: PPUSH
40207: CALL_OW 483
// CenterOnXY ( x , y ) ;
40211: LD_VAR 0 2
40215: PPUSH
40216: LD_VAR 0 3
40220: PPUSH
40221: CALL_OW 84
// end ; end_of_file
40225: LD_VAR 0 4
40229: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
40230: LD_INT 0
40232: PPUSH
40233: PPUSH
40234: PPUSH
40235: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
40236: LD_VAR 0 1
40240: PPUSH
40241: CALL_OW 264
40245: PUSH
40246: LD_EXP 52
40250: EQUAL
40251: IFFALSE 40323
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
40253: LD_INT 68
40255: PPUSH
40256: LD_VAR 0 1
40260: PPUSH
40261: CALL_OW 255
40265: PPUSH
40266: CALL_OW 321
40270: PUSH
40271: LD_INT 2
40273: EQUAL
40274: IFFALSE 40286
// eff := 70 else
40276: LD_ADDR_VAR 0 4
40280: PUSH
40281: LD_INT 70
40283: ST_TO_ADDR
40284: GO 40294
// eff := 30 ;
40286: LD_ADDR_VAR 0 4
40290: PUSH
40291: LD_INT 30
40293: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
40294: LD_VAR 0 1
40298: PPUSH
40299: CALL_OW 250
40303: PPUSH
40304: LD_VAR 0 1
40308: PPUSH
40309: CALL_OW 251
40313: PPUSH
40314: LD_VAR 0 4
40318: PPUSH
40319: CALL_OW 495
// end ; end ;
40323: LD_VAR 0 2
40327: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
40328: LD_INT 0
40330: PPUSH
// end ;
40331: LD_VAR 0 4
40335: RET
// export function SOS_Command ( cmd ) ; begin
40336: LD_INT 0
40338: PPUSH
// end ;
40339: LD_VAR 0 2
40343: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
40344: LD_INT 0
40346: PPUSH
// if cmd = 121 then
40347: LD_VAR 0 1
40351: PUSH
40352: LD_INT 121
40354: EQUAL
40355: IFFALSE 40357
// end ;
40357: LD_VAR 0 6
40361: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
40362: LD_INT 0
40364: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
40365: LD_VAR 0 1
40369: PUSH
40370: LD_INT 250
40372: EQUAL
40373: PUSH
40374: LD_VAR 0 2
40378: PPUSH
40379: CALL_OW 264
40383: PUSH
40384: LD_EXP 55
40388: EQUAL
40389: AND
40390: IFFALSE 40411
// MinerPlaceMine ( unit , x , y ) ;
40392: LD_VAR 0 2
40396: PPUSH
40397: LD_VAR 0 4
40401: PPUSH
40402: LD_VAR 0 5
40406: PPUSH
40407: CALL 42760 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
40411: LD_VAR 0 1
40415: PUSH
40416: LD_INT 251
40418: EQUAL
40419: PUSH
40420: LD_VAR 0 2
40424: PPUSH
40425: CALL_OW 264
40429: PUSH
40430: LD_EXP 55
40434: EQUAL
40435: AND
40436: IFFALSE 40457
// MinerDetonateMine ( unit , x , y ) ;
40438: LD_VAR 0 2
40442: PPUSH
40443: LD_VAR 0 4
40447: PPUSH
40448: LD_VAR 0 5
40452: PPUSH
40453: CALL 43037 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
40457: LD_VAR 0 1
40461: PUSH
40462: LD_INT 252
40464: EQUAL
40465: PUSH
40466: LD_VAR 0 2
40470: PPUSH
40471: CALL_OW 264
40475: PUSH
40476: LD_EXP 55
40480: EQUAL
40481: AND
40482: IFFALSE 40503
// MinerCreateMinefield ( unit , x , y ) ;
40484: LD_VAR 0 2
40488: PPUSH
40489: LD_VAR 0 4
40493: PPUSH
40494: LD_VAR 0 5
40498: PPUSH
40499: CALL 43454 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
40503: LD_VAR 0 1
40507: PUSH
40508: LD_INT 253
40510: EQUAL
40511: PUSH
40512: LD_VAR 0 2
40516: PPUSH
40517: CALL_OW 257
40521: PUSH
40522: LD_INT 5
40524: EQUAL
40525: AND
40526: IFFALSE 40547
// ComBinocular ( unit , x , y ) ;
40528: LD_VAR 0 2
40532: PPUSH
40533: LD_VAR 0 4
40537: PPUSH
40538: LD_VAR 0 5
40542: PPUSH
40543: CALL 43825 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
40547: LD_VAR 0 1
40551: PUSH
40552: LD_INT 254
40554: EQUAL
40555: PUSH
40556: LD_VAR 0 2
40560: PPUSH
40561: CALL_OW 264
40565: PUSH
40566: LD_EXP 50
40570: EQUAL
40571: AND
40572: PUSH
40573: LD_VAR 0 3
40577: PPUSH
40578: CALL_OW 263
40582: PUSH
40583: LD_INT 3
40585: EQUAL
40586: AND
40587: IFFALSE 40603
// HackDestroyVehicle ( unit , selectedUnit ) ;
40589: LD_VAR 0 2
40593: PPUSH
40594: LD_VAR 0 3
40598: PPUSH
40599: CALL 42120 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
40603: LD_VAR 0 1
40607: PUSH
40608: LD_INT 255
40610: EQUAL
40611: PUSH
40612: LD_VAR 0 2
40616: PPUSH
40617: CALL_OW 264
40621: PUSH
40622: LD_INT 14
40624: PUSH
40625: LD_INT 53
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: IN
40632: AND
40633: PUSH
40634: LD_VAR 0 4
40638: PPUSH
40639: LD_VAR 0 5
40643: PPUSH
40644: CALL_OW 488
40648: AND
40649: IFFALSE 40673
// CutTreeXYR ( unit , x , y , 12 ) ;
40651: LD_VAR 0 2
40655: PPUSH
40656: LD_VAR 0 4
40660: PPUSH
40661: LD_VAR 0 5
40665: PPUSH
40666: LD_INT 12
40668: PPUSH
40669: CALL 40686 0 4
// end ;
40673: LD_VAR 0 6
40677: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
40678: LD_INT 0
40680: PPUSH
// end ;
40681: LD_VAR 0 4
40685: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
40686: LD_INT 0
40688: PPUSH
40689: PPUSH
40690: PPUSH
40691: PPUSH
40692: PPUSH
40693: PPUSH
40694: PPUSH
40695: PPUSH
40696: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
40697: LD_VAR 0 1
40701: NOT
40702: PUSH
40703: LD_VAR 0 2
40707: PPUSH
40708: LD_VAR 0 3
40712: PPUSH
40713: CALL_OW 488
40717: NOT
40718: OR
40719: PUSH
40720: LD_VAR 0 4
40724: NOT
40725: OR
40726: IFFALSE 40730
// exit ;
40728: GO 41070
// list := [ ] ;
40730: LD_ADDR_VAR 0 13
40734: PUSH
40735: EMPTY
40736: ST_TO_ADDR
// if x - r < 0 then
40737: LD_VAR 0 2
40741: PUSH
40742: LD_VAR 0 4
40746: MINUS
40747: PUSH
40748: LD_INT 0
40750: LESS
40751: IFFALSE 40763
// min_x := 0 else
40753: LD_ADDR_VAR 0 7
40757: PUSH
40758: LD_INT 0
40760: ST_TO_ADDR
40761: GO 40779
// min_x := x - r ;
40763: LD_ADDR_VAR 0 7
40767: PUSH
40768: LD_VAR 0 2
40772: PUSH
40773: LD_VAR 0 4
40777: MINUS
40778: ST_TO_ADDR
// if y - r < 0 then
40779: LD_VAR 0 3
40783: PUSH
40784: LD_VAR 0 4
40788: MINUS
40789: PUSH
40790: LD_INT 0
40792: LESS
40793: IFFALSE 40805
// min_y := 0 else
40795: LD_ADDR_VAR 0 8
40799: PUSH
40800: LD_INT 0
40802: ST_TO_ADDR
40803: GO 40821
// min_y := y - r ;
40805: LD_ADDR_VAR 0 8
40809: PUSH
40810: LD_VAR 0 3
40814: PUSH
40815: LD_VAR 0 4
40819: MINUS
40820: ST_TO_ADDR
// max_x := x + r ;
40821: LD_ADDR_VAR 0 9
40825: PUSH
40826: LD_VAR 0 2
40830: PUSH
40831: LD_VAR 0 4
40835: PLUS
40836: ST_TO_ADDR
// max_y := y + r ;
40837: LD_ADDR_VAR 0 10
40841: PUSH
40842: LD_VAR 0 3
40846: PUSH
40847: LD_VAR 0 4
40851: PLUS
40852: ST_TO_ADDR
// for _x = min_x to max_x do
40853: LD_ADDR_VAR 0 11
40857: PUSH
40858: DOUBLE
40859: LD_VAR 0 7
40863: DEC
40864: ST_TO_ADDR
40865: LD_VAR 0 9
40869: PUSH
40870: FOR_TO
40871: IFFALSE 40988
// for _y = min_y to max_y do
40873: LD_ADDR_VAR 0 12
40877: PUSH
40878: DOUBLE
40879: LD_VAR 0 8
40883: DEC
40884: ST_TO_ADDR
40885: LD_VAR 0 10
40889: PUSH
40890: FOR_TO
40891: IFFALSE 40984
// begin if not ValidHex ( _x , _y ) then
40893: LD_VAR 0 11
40897: PPUSH
40898: LD_VAR 0 12
40902: PPUSH
40903: CALL_OW 488
40907: NOT
40908: IFFALSE 40912
// continue ;
40910: GO 40890
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
40912: LD_VAR 0 11
40916: PPUSH
40917: LD_VAR 0 12
40921: PPUSH
40922: CALL_OW 351
40926: PUSH
40927: LD_VAR 0 11
40931: PPUSH
40932: LD_VAR 0 12
40936: PPUSH
40937: CALL_OW 554
40941: AND
40942: IFFALSE 40982
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
40944: LD_ADDR_VAR 0 13
40948: PUSH
40949: LD_VAR 0 13
40953: PPUSH
40954: LD_VAR 0 13
40958: PUSH
40959: LD_INT 1
40961: PLUS
40962: PPUSH
40963: LD_VAR 0 11
40967: PUSH
40968: LD_VAR 0 12
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PPUSH
40977: CALL_OW 2
40981: ST_TO_ADDR
// end ;
40982: GO 40890
40984: POP
40985: POP
40986: GO 40870
40988: POP
40989: POP
// if not list then
40990: LD_VAR 0 13
40994: NOT
40995: IFFALSE 40999
// exit ;
40997: GO 41070
// for i in list do
40999: LD_ADDR_VAR 0 6
41003: PUSH
41004: LD_VAR 0 13
41008: PUSH
41009: FOR_IN
41010: IFFALSE 41068
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
41012: LD_VAR 0 1
41016: PPUSH
41017: LD_STRING M
41019: PUSH
41020: LD_VAR 0 6
41024: PUSH
41025: LD_INT 1
41027: ARRAY
41028: PUSH
41029: LD_VAR 0 6
41033: PUSH
41034: LD_INT 2
41036: ARRAY
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: PUSH
41059: EMPTY
41060: LIST
41061: PPUSH
41062: CALL_OW 447
41066: GO 41009
41068: POP
41069: POP
// end ;
41070: LD_VAR 0 5
41074: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
41075: LD_EXP 123
41079: NOT
41080: IFFALSE 41130
41082: GO 41084
41084: DISABLE
// begin initHack := true ;
41085: LD_ADDR_EXP 123
41089: PUSH
41090: LD_INT 1
41092: ST_TO_ADDR
// hackTanks := [ ] ;
41093: LD_ADDR_EXP 124
41097: PUSH
41098: EMPTY
41099: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
41100: LD_ADDR_EXP 125
41104: PUSH
41105: EMPTY
41106: ST_TO_ADDR
// hackLimit := 3 ;
41107: LD_ADDR_EXP 126
41111: PUSH
41112: LD_INT 3
41114: ST_TO_ADDR
// hackDist := 12 ;
41115: LD_ADDR_EXP 127
41119: PUSH
41120: LD_INT 12
41122: ST_TO_ADDR
// hackCounter := [ ] ;
41123: LD_ADDR_EXP 128
41127: PUSH
41128: EMPTY
41129: ST_TO_ADDR
// end ;
41130: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
41131: LD_EXP 123
41135: PUSH
41136: LD_INT 34
41138: PUSH
41139: LD_EXP 50
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PPUSH
41148: CALL_OW 69
41152: AND
41153: IFFALSE 41408
41155: GO 41157
41157: DISABLE
41158: LD_INT 0
41160: PPUSH
41161: PPUSH
// begin enable ;
41162: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
41163: LD_ADDR_VAR 0 1
41167: PUSH
41168: LD_INT 34
41170: PUSH
41171: LD_EXP 50
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PPUSH
41180: CALL_OW 69
41184: PUSH
41185: FOR_IN
41186: IFFALSE 41406
// begin if not i in hackTanks then
41188: LD_VAR 0 1
41192: PUSH
41193: LD_EXP 124
41197: IN
41198: NOT
41199: IFFALSE 41282
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
41201: LD_ADDR_EXP 124
41205: PUSH
41206: LD_EXP 124
41210: PPUSH
41211: LD_EXP 124
41215: PUSH
41216: LD_INT 1
41218: PLUS
41219: PPUSH
41220: LD_VAR 0 1
41224: PPUSH
41225: CALL_OW 1
41229: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
41230: LD_ADDR_EXP 125
41234: PUSH
41235: LD_EXP 125
41239: PPUSH
41240: LD_EXP 125
41244: PUSH
41245: LD_INT 1
41247: PLUS
41248: PPUSH
41249: EMPTY
41250: PPUSH
41251: CALL_OW 1
41255: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
41256: LD_ADDR_EXP 128
41260: PUSH
41261: LD_EXP 128
41265: PPUSH
41266: LD_EXP 128
41270: PUSH
41271: LD_INT 1
41273: PLUS
41274: PPUSH
41275: EMPTY
41276: PPUSH
41277: CALL_OW 1
41281: ST_TO_ADDR
// end ; if not IsOk ( i ) then
41282: LD_VAR 0 1
41286: PPUSH
41287: CALL_OW 302
41291: NOT
41292: IFFALSE 41305
// begin HackUnlinkAll ( i ) ;
41294: LD_VAR 0 1
41298: PPUSH
41299: CALL 41411 0 1
// continue ;
41303: GO 41185
// end ; HackCheckCapturedStatus ( i ) ;
41305: LD_VAR 0 1
41309: PPUSH
41310: CALL 41854 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
41314: LD_ADDR_VAR 0 2
41318: PUSH
41319: LD_INT 81
41321: PUSH
41322: LD_VAR 0 1
41326: PPUSH
41327: CALL_OW 255
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 33
41338: PUSH
41339: LD_INT 3
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 91
41348: PUSH
41349: LD_VAR 0 1
41353: PUSH
41354: LD_EXP 127
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 50
41366: PUSH
41367: EMPTY
41368: LIST
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: PPUSH
41376: CALL_OW 69
41380: ST_TO_ADDR
// if not tmp then
41381: LD_VAR 0 2
41385: NOT
41386: IFFALSE 41390
// continue ;
41388: GO 41185
// HackLink ( i , tmp ) ;
41390: LD_VAR 0 1
41394: PPUSH
41395: LD_VAR 0 2
41399: PPUSH
41400: CALL 41547 0 2
// end ;
41404: GO 41185
41406: POP
41407: POP
// end ;
41408: PPOPN 2
41410: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
41411: LD_INT 0
41413: PPUSH
41414: PPUSH
41415: PPUSH
// if not hack in hackTanks then
41416: LD_VAR 0 1
41420: PUSH
41421: LD_EXP 124
41425: IN
41426: NOT
41427: IFFALSE 41431
// exit ;
41429: GO 41542
// index := GetElementIndex ( hackTanks , hack ) ;
41431: LD_ADDR_VAR 0 4
41435: PUSH
41436: LD_EXP 124
41440: PPUSH
41441: LD_VAR 0 1
41445: PPUSH
41446: CALL 48976 0 2
41450: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
41451: LD_EXP 125
41455: PUSH
41456: LD_VAR 0 4
41460: ARRAY
41461: IFFALSE 41542
// begin for i in hackTanksCaptured [ index ] do
41463: LD_ADDR_VAR 0 3
41467: PUSH
41468: LD_EXP 125
41472: PUSH
41473: LD_VAR 0 4
41477: ARRAY
41478: PUSH
41479: FOR_IN
41480: IFFALSE 41506
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
41482: LD_VAR 0 3
41486: PUSH
41487: LD_INT 1
41489: ARRAY
41490: PPUSH
41491: LD_VAR 0 3
41495: PUSH
41496: LD_INT 2
41498: ARRAY
41499: PPUSH
41500: CALL_OW 235
41504: GO 41479
41506: POP
41507: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
41508: LD_ADDR_EXP 125
41512: PUSH
41513: LD_EXP 125
41517: PPUSH
41518: LD_VAR 0 4
41522: PPUSH
41523: EMPTY
41524: PPUSH
41525: CALL_OW 1
41529: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
41530: LD_VAR 0 1
41534: PPUSH
41535: LD_INT 0
41537: PPUSH
41538: CALL_OW 505
// end ; end ;
41542: LD_VAR 0 2
41546: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
41547: LD_INT 0
41549: PPUSH
41550: PPUSH
41551: PPUSH
// if not hack in hackTanks or not vehicles then
41552: LD_VAR 0 1
41556: PUSH
41557: LD_EXP 124
41561: IN
41562: NOT
41563: PUSH
41564: LD_VAR 0 2
41568: NOT
41569: OR
41570: IFFALSE 41574
// exit ;
41572: GO 41849
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
41574: LD_ADDR_VAR 0 2
41578: PUSH
41579: LD_VAR 0 1
41583: PPUSH
41584: LD_VAR 0 2
41588: PPUSH
41589: LD_INT 1
41591: PPUSH
41592: LD_INT 1
41594: PPUSH
41595: CALL 49626 0 4
41599: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
41600: LD_ADDR_VAR 0 5
41604: PUSH
41605: LD_EXP 124
41609: PPUSH
41610: LD_VAR 0 1
41614: PPUSH
41615: CALL 48976 0 2
41619: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
41620: LD_EXP 125
41624: PUSH
41625: LD_VAR 0 5
41629: ARRAY
41630: PUSH
41631: LD_EXP 126
41635: LESS
41636: IFFALSE 41825
// begin for i := 1 to vehicles do
41638: LD_ADDR_VAR 0 4
41642: PUSH
41643: DOUBLE
41644: LD_INT 1
41646: DEC
41647: ST_TO_ADDR
41648: LD_VAR 0 2
41652: PUSH
41653: FOR_TO
41654: IFFALSE 41823
// begin if hackTanksCaptured [ index ] = hackLimit then
41656: LD_EXP 125
41660: PUSH
41661: LD_VAR 0 5
41665: ARRAY
41666: PUSH
41667: LD_EXP 126
41671: EQUAL
41672: IFFALSE 41676
// break ;
41674: GO 41823
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
41676: LD_ADDR_EXP 128
41680: PUSH
41681: LD_EXP 128
41685: PPUSH
41686: LD_VAR 0 5
41690: PPUSH
41691: LD_EXP 128
41695: PUSH
41696: LD_VAR 0 5
41700: ARRAY
41701: PUSH
41702: LD_INT 1
41704: PLUS
41705: PPUSH
41706: CALL_OW 1
41710: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
41711: LD_ADDR_EXP 125
41715: PUSH
41716: LD_EXP 125
41720: PPUSH
41721: LD_VAR 0 5
41725: PUSH
41726: LD_EXP 125
41730: PUSH
41731: LD_VAR 0 5
41735: ARRAY
41736: PUSH
41737: LD_INT 1
41739: PLUS
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PPUSH
41745: LD_VAR 0 2
41749: PUSH
41750: LD_VAR 0 4
41754: ARRAY
41755: PUSH
41756: LD_VAR 0 2
41760: PUSH
41761: LD_VAR 0 4
41765: ARRAY
41766: PPUSH
41767: CALL_OW 255
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PPUSH
41776: CALL 49191 0 3
41780: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
41781: LD_VAR 0 2
41785: PUSH
41786: LD_VAR 0 4
41790: ARRAY
41791: PPUSH
41792: LD_VAR 0 1
41796: PPUSH
41797: CALL_OW 255
41801: PPUSH
41802: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
41806: LD_VAR 0 2
41810: PUSH
41811: LD_VAR 0 4
41815: ARRAY
41816: PPUSH
41817: CALL_OW 141
// end ;
41821: GO 41653
41823: POP
41824: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41825: LD_VAR 0 1
41829: PPUSH
41830: LD_EXP 125
41834: PUSH
41835: LD_VAR 0 5
41839: ARRAY
41840: PUSH
41841: LD_INT 0
41843: PLUS
41844: PPUSH
41845: CALL_OW 505
// end ;
41849: LD_VAR 0 3
41853: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
41854: LD_INT 0
41856: PPUSH
41857: PPUSH
41858: PPUSH
41859: PPUSH
// if not hack in hackTanks then
41860: LD_VAR 0 1
41864: PUSH
41865: LD_EXP 124
41869: IN
41870: NOT
41871: IFFALSE 41875
// exit ;
41873: GO 42115
// index := GetElementIndex ( hackTanks , hack ) ;
41875: LD_ADDR_VAR 0 4
41879: PUSH
41880: LD_EXP 124
41884: PPUSH
41885: LD_VAR 0 1
41889: PPUSH
41890: CALL 48976 0 2
41894: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
41895: LD_ADDR_VAR 0 3
41899: PUSH
41900: DOUBLE
41901: LD_EXP 125
41905: PUSH
41906: LD_VAR 0 4
41910: ARRAY
41911: INC
41912: ST_TO_ADDR
41913: LD_INT 1
41915: PUSH
41916: FOR_DOWNTO
41917: IFFALSE 42089
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
41919: LD_ADDR_VAR 0 5
41923: PUSH
41924: LD_EXP 125
41928: PUSH
41929: LD_VAR 0 4
41933: ARRAY
41934: PUSH
41935: LD_VAR 0 3
41939: ARRAY
41940: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
41941: LD_VAR 0 5
41945: PUSH
41946: LD_INT 1
41948: ARRAY
41949: PPUSH
41950: CALL_OW 302
41954: NOT
41955: PUSH
41956: LD_VAR 0 5
41960: PUSH
41961: LD_INT 1
41963: ARRAY
41964: PPUSH
41965: CALL_OW 255
41969: PUSH
41970: LD_VAR 0 1
41974: PPUSH
41975: CALL_OW 255
41979: NONEQUAL
41980: OR
41981: IFFALSE 42087
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
41983: LD_VAR 0 5
41987: PUSH
41988: LD_INT 1
41990: ARRAY
41991: PPUSH
41992: CALL_OW 305
41996: PUSH
41997: LD_VAR 0 5
42001: PUSH
42002: LD_INT 1
42004: ARRAY
42005: PPUSH
42006: CALL_OW 255
42010: PUSH
42011: LD_VAR 0 1
42015: PPUSH
42016: CALL_OW 255
42020: EQUAL
42021: AND
42022: IFFALSE 42046
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
42024: LD_VAR 0 5
42028: PUSH
42029: LD_INT 1
42031: ARRAY
42032: PPUSH
42033: LD_VAR 0 5
42037: PUSH
42038: LD_INT 2
42040: ARRAY
42041: PPUSH
42042: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
42046: LD_ADDR_EXP 125
42050: PUSH
42051: LD_EXP 125
42055: PPUSH
42056: LD_VAR 0 4
42060: PPUSH
42061: LD_EXP 125
42065: PUSH
42066: LD_VAR 0 4
42070: ARRAY
42071: PPUSH
42072: LD_VAR 0 3
42076: PPUSH
42077: CALL_OW 3
42081: PPUSH
42082: CALL_OW 1
42086: ST_TO_ADDR
// end ; end ;
42087: GO 41916
42089: POP
42090: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
42091: LD_VAR 0 1
42095: PPUSH
42096: LD_EXP 125
42100: PUSH
42101: LD_VAR 0 4
42105: ARRAY
42106: PUSH
42107: LD_INT 0
42109: PLUS
42110: PPUSH
42111: CALL_OW 505
// end ;
42115: LD_VAR 0 2
42119: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
42120: LD_INT 0
42122: PPUSH
42123: PPUSH
42124: PPUSH
42125: PPUSH
// if not hack in hackTanks then
42126: LD_VAR 0 1
42130: PUSH
42131: LD_EXP 124
42135: IN
42136: NOT
42137: IFFALSE 42141
// exit ;
42139: GO 42226
// index := GetElementIndex ( hackTanks , hack ) ;
42141: LD_ADDR_VAR 0 5
42145: PUSH
42146: LD_EXP 124
42150: PPUSH
42151: LD_VAR 0 1
42155: PPUSH
42156: CALL 48976 0 2
42160: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
42161: LD_ADDR_VAR 0 4
42165: PUSH
42166: DOUBLE
42167: LD_INT 1
42169: DEC
42170: ST_TO_ADDR
42171: LD_EXP 125
42175: PUSH
42176: LD_VAR 0 5
42180: ARRAY
42181: PUSH
42182: FOR_TO
42183: IFFALSE 42224
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
42185: LD_EXP 125
42189: PUSH
42190: LD_VAR 0 5
42194: ARRAY
42195: PUSH
42196: LD_VAR 0 4
42200: ARRAY
42201: PUSH
42202: LD_INT 1
42204: ARRAY
42205: PUSH
42206: LD_VAR 0 2
42210: EQUAL
42211: IFFALSE 42222
// KillUnit ( vehicle ) ;
42213: LD_VAR 0 2
42217: PPUSH
42218: CALL_OW 66
42222: GO 42182
42224: POP
42225: POP
// end ;
42226: LD_VAR 0 3
42230: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
42231: LD_EXP 129
42235: NOT
42236: IFFALSE 42271
42238: GO 42240
42240: DISABLE
// begin initMiner := true ;
42241: LD_ADDR_EXP 129
42245: PUSH
42246: LD_INT 1
42248: ST_TO_ADDR
// minersList := [ ] ;
42249: LD_ADDR_EXP 130
42253: PUSH
42254: EMPTY
42255: ST_TO_ADDR
// minerMinesList := [ ] ;
42256: LD_ADDR_EXP 131
42260: PUSH
42261: EMPTY
42262: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
42263: LD_ADDR_EXP 132
42267: PUSH
42268: LD_INT 5
42270: ST_TO_ADDR
// end ;
42271: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
42272: LD_EXP 129
42276: PUSH
42277: LD_INT 34
42279: PUSH
42280: LD_EXP 55
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PPUSH
42289: CALL_OW 69
42293: AND
42294: IFFALSE 42757
42296: GO 42298
42298: DISABLE
42299: LD_INT 0
42301: PPUSH
42302: PPUSH
42303: PPUSH
42304: PPUSH
// begin enable ;
42305: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
42306: LD_ADDR_VAR 0 1
42310: PUSH
42311: LD_INT 34
42313: PUSH
42314: LD_EXP 55
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PPUSH
42323: CALL_OW 69
42327: PUSH
42328: FOR_IN
42329: IFFALSE 42401
// begin if not i in minersList then
42331: LD_VAR 0 1
42335: PUSH
42336: LD_EXP 130
42340: IN
42341: NOT
42342: IFFALSE 42399
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
42344: LD_ADDR_EXP 130
42348: PUSH
42349: LD_EXP 130
42353: PPUSH
42354: LD_EXP 130
42358: PUSH
42359: LD_INT 1
42361: PLUS
42362: PPUSH
42363: LD_VAR 0 1
42367: PPUSH
42368: CALL_OW 1
42372: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
42373: LD_ADDR_EXP 131
42377: PUSH
42378: LD_EXP 131
42382: PPUSH
42383: LD_EXP 131
42387: PUSH
42388: LD_INT 1
42390: PLUS
42391: PPUSH
42392: EMPTY
42393: PPUSH
42394: CALL_OW 1
42398: ST_TO_ADDR
// end end ;
42399: GO 42328
42401: POP
42402: POP
// for i := minerMinesList downto 1 do
42403: LD_ADDR_VAR 0 1
42407: PUSH
42408: DOUBLE
42409: LD_EXP 131
42413: INC
42414: ST_TO_ADDR
42415: LD_INT 1
42417: PUSH
42418: FOR_DOWNTO
42419: IFFALSE 42755
// begin if IsLive ( minersList [ i ] ) then
42421: LD_EXP 130
42425: PUSH
42426: LD_VAR 0 1
42430: ARRAY
42431: PPUSH
42432: CALL_OW 300
42436: IFFALSE 42464
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
42438: LD_EXP 130
42442: PUSH
42443: LD_VAR 0 1
42447: ARRAY
42448: PPUSH
42449: LD_EXP 131
42453: PUSH
42454: LD_VAR 0 1
42458: ARRAY
42459: PPUSH
42460: CALL_OW 505
// if not minerMinesList [ i ] then
42464: LD_EXP 131
42468: PUSH
42469: LD_VAR 0 1
42473: ARRAY
42474: NOT
42475: IFFALSE 42479
// continue ;
42477: GO 42418
// for j := minerMinesList [ i ] downto 1 do
42479: LD_ADDR_VAR 0 2
42483: PUSH
42484: DOUBLE
42485: LD_EXP 131
42489: PUSH
42490: LD_VAR 0 1
42494: ARRAY
42495: INC
42496: ST_TO_ADDR
42497: LD_INT 1
42499: PUSH
42500: FOR_DOWNTO
42501: IFFALSE 42751
// begin side := GetSide ( minersList [ i ] ) ;
42503: LD_ADDR_VAR 0 3
42507: PUSH
42508: LD_EXP 130
42512: PUSH
42513: LD_VAR 0 1
42517: ARRAY
42518: PPUSH
42519: CALL_OW 255
42523: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
42524: LD_ADDR_VAR 0 4
42528: PUSH
42529: LD_EXP 131
42533: PUSH
42534: LD_VAR 0 1
42538: ARRAY
42539: PUSH
42540: LD_VAR 0 2
42544: ARRAY
42545: PUSH
42546: LD_INT 1
42548: ARRAY
42549: PPUSH
42550: LD_EXP 131
42554: PUSH
42555: LD_VAR 0 1
42559: ARRAY
42560: PUSH
42561: LD_VAR 0 2
42565: ARRAY
42566: PUSH
42567: LD_INT 2
42569: ARRAY
42570: PPUSH
42571: CALL_OW 428
42575: ST_TO_ADDR
// if not tmp then
42576: LD_VAR 0 4
42580: NOT
42581: IFFALSE 42585
// continue ;
42583: GO 42500
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
42585: LD_VAR 0 4
42589: PUSH
42590: LD_INT 81
42592: PUSH
42593: LD_VAR 0 3
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PPUSH
42602: CALL_OW 69
42606: IN
42607: PUSH
42608: LD_EXP 131
42612: PUSH
42613: LD_VAR 0 1
42617: ARRAY
42618: PUSH
42619: LD_VAR 0 2
42623: ARRAY
42624: PUSH
42625: LD_INT 1
42627: ARRAY
42628: PPUSH
42629: LD_EXP 131
42633: PUSH
42634: LD_VAR 0 1
42638: ARRAY
42639: PUSH
42640: LD_VAR 0 2
42644: ARRAY
42645: PUSH
42646: LD_INT 2
42648: ARRAY
42649: PPUSH
42650: CALL_OW 458
42654: AND
42655: IFFALSE 42749
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
42657: LD_EXP 131
42661: PUSH
42662: LD_VAR 0 1
42666: ARRAY
42667: PUSH
42668: LD_VAR 0 2
42672: ARRAY
42673: PUSH
42674: LD_INT 1
42676: ARRAY
42677: PPUSH
42678: LD_EXP 131
42682: PUSH
42683: LD_VAR 0 1
42687: ARRAY
42688: PUSH
42689: LD_VAR 0 2
42693: ARRAY
42694: PUSH
42695: LD_INT 2
42697: ARRAY
42698: PPUSH
42699: LD_VAR 0 3
42703: PPUSH
42704: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
42708: LD_ADDR_EXP 131
42712: PUSH
42713: LD_EXP 131
42717: PPUSH
42718: LD_VAR 0 1
42722: PPUSH
42723: LD_EXP 131
42727: PUSH
42728: LD_VAR 0 1
42732: ARRAY
42733: PPUSH
42734: LD_VAR 0 2
42738: PPUSH
42739: CALL_OW 3
42743: PPUSH
42744: CALL_OW 1
42748: ST_TO_ADDR
// end ; end ;
42749: GO 42500
42751: POP
42752: POP
// end ;
42753: GO 42418
42755: POP
42756: POP
// end ;
42757: PPOPN 4
42759: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
42760: LD_INT 0
42762: PPUSH
42763: PPUSH
// result := false ;
42764: LD_ADDR_VAR 0 4
42768: PUSH
42769: LD_INT 0
42771: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
42772: LD_VAR 0 1
42776: PPUSH
42777: CALL_OW 264
42781: PUSH
42782: LD_EXP 55
42786: EQUAL
42787: NOT
42788: IFFALSE 42792
// exit ;
42790: GO 43032
// index := GetElementIndex ( minersList , unit ) ;
42792: LD_ADDR_VAR 0 5
42796: PUSH
42797: LD_EXP 130
42801: PPUSH
42802: LD_VAR 0 1
42806: PPUSH
42807: CALL 48976 0 2
42811: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
42812: LD_EXP 131
42816: PUSH
42817: LD_VAR 0 5
42821: ARRAY
42822: PUSH
42823: LD_EXP 132
42827: GREATEREQUAL
42828: IFFALSE 42832
// exit ;
42830: GO 43032
// ComMoveXY ( unit , x , y ) ;
42832: LD_VAR 0 1
42836: PPUSH
42837: LD_VAR 0 2
42841: PPUSH
42842: LD_VAR 0 3
42846: PPUSH
42847: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42851: LD_INT 35
42853: PPUSH
42854: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
42858: LD_VAR 0 1
42862: PPUSH
42863: LD_VAR 0 2
42867: PPUSH
42868: LD_VAR 0 3
42872: PPUSH
42873: CALL 79373 0 3
42877: NOT
42878: PUSH
42879: LD_VAR 0 1
42883: PPUSH
42884: CALL_OW 314
42888: AND
42889: IFFALSE 42893
// exit ;
42891: GO 43032
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
42893: LD_VAR 0 2
42897: PPUSH
42898: LD_VAR 0 3
42902: PPUSH
42903: CALL_OW 428
42907: PUSH
42908: LD_VAR 0 1
42912: EQUAL
42913: PUSH
42914: LD_VAR 0 1
42918: PPUSH
42919: CALL_OW 314
42923: NOT
42924: AND
42925: IFFALSE 42851
// PlaySoundXY ( x , y , PlantMine ) ;
42927: LD_VAR 0 2
42931: PPUSH
42932: LD_VAR 0 3
42936: PPUSH
42937: LD_STRING PlantMine
42939: PPUSH
42940: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
42944: LD_VAR 0 2
42948: PPUSH
42949: LD_VAR 0 3
42953: PPUSH
42954: LD_VAR 0 1
42958: PPUSH
42959: CALL_OW 255
42963: PPUSH
42964: LD_INT 0
42966: PPUSH
42967: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
42971: LD_ADDR_EXP 131
42975: PUSH
42976: LD_EXP 131
42980: PPUSH
42981: LD_VAR 0 5
42985: PUSH
42986: LD_EXP 131
42990: PUSH
42991: LD_VAR 0 5
42995: ARRAY
42996: PUSH
42997: LD_INT 1
42999: PLUS
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PPUSH
43005: LD_VAR 0 2
43009: PUSH
43010: LD_VAR 0 3
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PPUSH
43019: CALL 49191 0 3
43023: ST_TO_ADDR
// result := true ;
43024: LD_ADDR_VAR 0 4
43028: PUSH
43029: LD_INT 1
43031: ST_TO_ADDR
// end ;
43032: LD_VAR 0 4
43036: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
43037: LD_INT 0
43039: PPUSH
43040: PPUSH
43041: PPUSH
// if not unit in minersList then
43042: LD_VAR 0 1
43046: PUSH
43047: LD_EXP 130
43051: IN
43052: NOT
43053: IFFALSE 43057
// exit ;
43055: GO 43449
// index := GetElementIndex ( minersList , unit ) ;
43057: LD_ADDR_VAR 0 6
43061: PUSH
43062: LD_EXP 130
43066: PPUSH
43067: LD_VAR 0 1
43071: PPUSH
43072: CALL 48976 0 2
43076: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
43077: LD_ADDR_VAR 0 5
43081: PUSH
43082: DOUBLE
43083: LD_EXP 131
43087: PUSH
43088: LD_VAR 0 6
43092: ARRAY
43093: INC
43094: ST_TO_ADDR
43095: LD_INT 1
43097: PUSH
43098: FOR_DOWNTO
43099: IFFALSE 43260
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
43101: LD_EXP 131
43105: PUSH
43106: LD_VAR 0 6
43110: ARRAY
43111: PUSH
43112: LD_VAR 0 5
43116: ARRAY
43117: PUSH
43118: LD_INT 1
43120: ARRAY
43121: PUSH
43122: LD_VAR 0 2
43126: EQUAL
43127: PUSH
43128: LD_EXP 131
43132: PUSH
43133: LD_VAR 0 6
43137: ARRAY
43138: PUSH
43139: LD_VAR 0 5
43143: ARRAY
43144: PUSH
43145: LD_INT 2
43147: ARRAY
43148: PUSH
43149: LD_VAR 0 3
43153: EQUAL
43154: AND
43155: IFFALSE 43258
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43157: LD_EXP 131
43161: PUSH
43162: LD_VAR 0 6
43166: ARRAY
43167: PUSH
43168: LD_VAR 0 5
43172: ARRAY
43173: PUSH
43174: LD_INT 1
43176: ARRAY
43177: PPUSH
43178: LD_EXP 131
43182: PUSH
43183: LD_VAR 0 6
43187: ARRAY
43188: PUSH
43189: LD_VAR 0 5
43193: ARRAY
43194: PUSH
43195: LD_INT 2
43197: ARRAY
43198: PPUSH
43199: LD_VAR 0 1
43203: PPUSH
43204: CALL_OW 255
43208: PPUSH
43209: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43213: LD_ADDR_EXP 131
43217: PUSH
43218: LD_EXP 131
43222: PPUSH
43223: LD_VAR 0 6
43227: PPUSH
43228: LD_EXP 131
43232: PUSH
43233: LD_VAR 0 6
43237: ARRAY
43238: PPUSH
43239: LD_VAR 0 5
43243: PPUSH
43244: CALL_OW 3
43248: PPUSH
43249: CALL_OW 1
43253: ST_TO_ADDR
// exit ;
43254: POP
43255: POP
43256: GO 43449
// end ; end ;
43258: GO 43098
43260: POP
43261: POP
// for i := minerMinesList [ index ] downto 1 do
43262: LD_ADDR_VAR 0 5
43266: PUSH
43267: DOUBLE
43268: LD_EXP 131
43272: PUSH
43273: LD_VAR 0 6
43277: ARRAY
43278: INC
43279: ST_TO_ADDR
43280: LD_INT 1
43282: PUSH
43283: FOR_DOWNTO
43284: IFFALSE 43447
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
43286: LD_EXP 131
43290: PUSH
43291: LD_VAR 0 6
43295: ARRAY
43296: PUSH
43297: LD_VAR 0 5
43301: ARRAY
43302: PUSH
43303: LD_INT 1
43305: ARRAY
43306: PPUSH
43307: LD_EXP 131
43311: PUSH
43312: LD_VAR 0 6
43316: ARRAY
43317: PUSH
43318: LD_VAR 0 5
43322: ARRAY
43323: PUSH
43324: LD_INT 2
43326: ARRAY
43327: PPUSH
43328: LD_VAR 0 2
43332: PPUSH
43333: LD_VAR 0 3
43337: PPUSH
43338: CALL_OW 298
43342: PUSH
43343: LD_INT 6
43345: LESS
43346: IFFALSE 43445
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
43348: LD_EXP 131
43352: PUSH
43353: LD_VAR 0 6
43357: ARRAY
43358: PUSH
43359: LD_VAR 0 5
43363: ARRAY
43364: PUSH
43365: LD_INT 1
43367: ARRAY
43368: PPUSH
43369: LD_EXP 131
43373: PUSH
43374: LD_VAR 0 6
43378: ARRAY
43379: PUSH
43380: LD_VAR 0 5
43384: ARRAY
43385: PUSH
43386: LD_INT 2
43388: ARRAY
43389: PPUSH
43390: LD_VAR 0 1
43394: PPUSH
43395: CALL_OW 255
43399: PPUSH
43400: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
43404: LD_ADDR_EXP 131
43408: PUSH
43409: LD_EXP 131
43413: PPUSH
43414: LD_VAR 0 6
43418: PPUSH
43419: LD_EXP 131
43423: PUSH
43424: LD_VAR 0 6
43428: ARRAY
43429: PPUSH
43430: LD_VAR 0 5
43434: PPUSH
43435: CALL_OW 3
43439: PPUSH
43440: CALL_OW 1
43444: ST_TO_ADDR
// end ; end ;
43445: GO 43283
43447: POP
43448: POP
// end ;
43449: LD_VAR 0 4
43453: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
43454: LD_INT 0
43456: PPUSH
43457: PPUSH
43458: PPUSH
43459: PPUSH
43460: PPUSH
43461: PPUSH
43462: PPUSH
43463: PPUSH
43464: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
43465: LD_VAR 0 1
43469: PPUSH
43470: CALL_OW 264
43474: PUSH
43475: LD_EXP 55
43479: EQUAL
43480: NOT
43481: PUSH
43482: LD_VAR 0 1
43486: PUSH
43487: LD_EXP 130
43491: IN
43492: NOT
43493: OR
43494: IFFALSE 43498
// exit ;
43496: GO 43820
// index := GetElementIndex ( minersList , unit ) ;
43498: LD_ADDR_VAR 0 6
43502: PUSH
43503: LD_EXP 130
43507: PPUSH
43508: LD_VAR 0 1
43512: PPUSH
43513: CALL 48976 0 2
43517: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
43518: LD_ADDR_VAR 0 8
43522: PUSH
43523: LD_EXP 132
43527: PUSH
43528: LD_EXP 131
43532: PUSH
43533: LD_VAR 0 6
43537: ARRAY
43538: MINUS
43539: ST_TO_ADDR
// if not minesFreeAmount then
43540: LD_VAR 0 8
43544: NOT
43545: IFFALSE 43549
// exit ;
43547: GO 43820
// tmp := [ ] ;
43549: LD_ADDR_VAR 0 7
43553: PUSH
43554: EMPTY
43555: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
43556: LD_ADDR_VAR 0 5
43560: PUSH
43561: DOUBLE
43562: LD_INT 1
43564: DEC
43565: ST_TO_ADDR
43566: LD_VAR 0 8
43570: PUSH
43571: FOR_TO
43572: IFFALSE 43767
// begin _d := rand ( 0 , 5 ) ;
43574: LD_ADDR_VAR 0 11
43578: PUSH
43579: LD_INT 0
43581: PPUSH
43582: LD_INT 5
43584: PPUSH
43585: CALL_OW 12
43589: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
43590: LD_ADDR_VAR 0 12
43594: PUSH
43595: LD_INT 2
43597: PPUSH
43598: LD_INT 6
43600: PPUSH
43601: CALL_OW 12
43605: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
43606: LD_ADDR_VAR 0 9
43610: PUSH
43611: LD_VAR 0 2
43615: PPUSH
43616: LD_VAR 0 11
43620: PPUSH
43621: LD_VAR 0 12
43625: PPUSH
43626: CALL_OW 272
43630: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
43631: LD_ADDR_VAR 0 10
43635: PUSH
43636: LD_VAR 0 3
43640: PPUSH
43641: LD_VAR 0 11
43645: PPUSH
43646: LD_VAR 0 12
43650: PPUSH
43651: CALL_OW 273
43655: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
43656: LD_VAR 0 9
43660: PPUSH
43661: LD_VAR 0 10
43665: PPUSH
43666: CALL_OW 488
43670: PUSH
43671: LD_VAR 0 9
43675: PUSH
43676: LD_VAR 0 10
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_VAR 0 7
43689: IN
43690: NOT
43691: AND
43692: PUSH
43693: LD_VAR 0 9
43697: PPUSH
43698: LD_VAR 0 10
43702: PPUSH
43703: CALL_OW 458
43707: NOT
43708: AND
43709: IFFALSE 43751
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
43711: LD_ADDR_VAR 0 7
43715: PUSH
43716: LD_VAR 0 7
43720: PPUSH
43721: LD_VAR 0 7
43725: PUSH
43726: LD_INT 1
43728: PLUS
43729: PPUSH
43730: LD_VAR 0 9
43734: PUSH
43735: LD_VAR 0 10
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PPUSH
43744: CALL_OW 1
43748: ST_TO_ADDR
43749: GO 43765
// i := i - 1 ;
43751: LD_ADDR_VAR 0 5
43755: PUSH
43756: LD_VAR 0 5
43760: PUSH
43761: LD_INT 1
43763: MINUS
43764: ST_TO_ADDR
// end ;
43765: GO 43571
43767: POP
43768: POP
// for i in tmp do
43769: LD_ADDR_VAR 0 5
43773: PUSH
43774: LD_VAR 0 7
43778: PUSH
43779: FOR_IN
43780: IFFALSE 43818
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
43782: LD_VAR 0 1
43786: PPUSH
43787: LD_VAR 0 5
43791: PUSH
43792: LD_INT 1
43794: ARRAY
43795: PPUSH
43796: LD_VAR 0 5
43800: PUSH
43801: LD_INT 2
43803: ARRAY
43804: PPUSH
43805: CALL 42760 0 3
43809: NOT
43810: IFFALSE 43816
// exit ;
43812: POP
43813: POP
43814: GO 43820
43816: GO 43779
43818: POP
43819: POP
// end ;
43820: LD_VAR 0 4
43824: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
43825: LD_INT 0
43827: PPUSH
43828: PPUSH
43829: PPUSH
43830: PPUSH
43831: PPUSH
43832: PPUSH
43833: PPUSH
// if not GetClass ( unit ) = class_sniper then
43834: LD_VAR 0 1
43838: PPUSH
43839: CALL_OW 257
43843: PUSH
43844: LD_INT 5
43846: EQUAL
43847: NOT
43848: IFFALSE 43852
// exit ;
43850: GO 44240
// dist := 8 ;
43852: LD_ADDR_VAR 0 5
43856: PUSH
43857: LD_INT 8
43859: ST_TO_ADDR
// viewRange := 12 ;
43860: LD_ADDR_VAR 0 7
43864: PUSH
43865: LD_INT 12
43867: ST_TO_ADDR
// side := GetSide ( unit ) ;
43868: LD_ADDR_VAR 0 6
43872: PUSH
43873: LD_VAR 0 1
43877: PPUSH
43878: CALL_OW 255
43882: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
43883: LD_INT 61
43885: PPUSH
43886: LD_VAR 0 6
43890: PPUSH
43891: CALL_OW 321
43895: PUSH
43896: LD_INT 2
43898: EQUAL
43899: IFFALSE 43909
// viewRange := 16 ;
43901: LD_ADDR_VAR 0 7
43905: PUSH
43906: LD_INT 16
43908: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
43909: LD_VAR 0 1
43913: PPUSH
43914: LD_VAR 0 2
43918: PPUSH
43919: LD_VAR 0 3
43923: PPUSH
43924: CALL_OW 297
43928: PUSH
43929: LD_VAR 0 5
43933: GREATER
43934: IFFALSE 44013
// begin ComMoveXY ( unit , x , y ) ;
43936: LD_VAR 0 1
43940: PPUSH
43941: LD_VAR 0 2
43945: PPUSH
43946: LD_VAR 0 3
43950: PPUSH
43951: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
43955: LD_INT 35
43957: PPUSH
43958: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
43962: LD_VAR 0 1
43966: PPUSH
43967: LD_VAR 0 2
43971: PPUSH
43972: LD_VAR 0 3
43976: PPUSH
43977: CALL 79373 0 3
43981: NOT
43982: IFFALSE 43986
// exit ;
43984: GO 44240
// until GetDistUnitXY ( unit , x , y ) < dist ;
43986: LD_VAR 0 1
43990: PPUSH
43991: LD_VAR 0 2
43995: PPUSH
43996: LD_VAR 0 3
44000: PPUSH
44001: CALL_OW 297
44005: PUSH
44006: LD_VAR 0 5
44010: LESS
44011: IFFALSE 43955
// end ; ComTurnXY ( unit , x , y ) ;
44013: LD_VAR 0 1
44017: PPUSH
44018: LD_VAR 0 2
44022: PPUSH
44023: LD_VAR 0 3
44027: PPUSH
44028: CALL_OW 118
// wait ( 5 ) ;
44032: LD_INT 5
44034: PPUSH
44035: CALL_OW 67
// _d := GetDir ( unit ) ;
44039: LD_ADDR_VAR 0 10
44043: PUSH
44044: LD_VAR 0 1
44048: PPUSH
44049: CALL_OW 254
44053: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
44054: LD_ADDR_VAR 0 8
44058: PUSH
44059: LD_VAR 0 1
44063: PPUSH
44064: CALL_OW 250
44068: PPUSH
44069: LD_VAR 0 10
44073: PPUSH
44074: LD_VAR 0 5
44078: PPUSH
44079: CALL_OW 272
44083: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
44084: LD_ADDR_VAR 0 9
44088: PUSH
44089: LD_VAR 0 1
44093: PPUSH
44094: CALL_OW 251
44098: PPUSH
44099: LD_VAR 0 10
44103: PPUSH
44104: LD_VAR 0 5
44108: PPUSH
44109: CALL_OW 273
44113: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44114: LD_VAR 0 8
44118: PPUSH
44119: LD_VAR 0 9
44123: PPUSH
44124: CALL_OW 488
44128: NOT
44129: IFFALSE 44133
// exit ;
44131: GO 44240
// ComAnimCustom ( unit , 1 ) ;
44133: LD_VAR 0 1
44137: PPUSH
44138: LD_INT 1
44140: PPUSH
44141: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
44145: LD_VAR 0 8
44149: PPUSH
44150: LD_VAR 0 9
44154: PPUSH
44155: LD_VAR 0 6
44159: PPUSH
44160: LD_VAR 0 7
44164: PPUSH
44165: CALL_OW 330
// repeat wait ( 1 ) ;
44169: LD_INT 1
44171: PPUSH
44172: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
44176: LD_VAR 0 1
44180: PPUSH
44181: CALL_OW 316
44185: PUSH
44186: LD_VAR 0 1
44190: PPUSH
44191: CALL_OW 314
44195: OR
44196: PUSH
44197: LD_VAR 0 1
44201: PPUSH
44202: CALL_OW 302
44206: NOT
44207: OR
44208: PUSH
44209: LD_VAR 0 1
44213: PPUSH
44214: CALL_OW 301
44218: OR
44219: IFFALSE 44169
// RemoveSeeing ( _x , _y , side ) ;
44221: LD_VAR 0 8
44225: PPUSH
44226: LD_VAR 0 9
44230: PPUSH
44231: LD_VAR 0 6
44235: PPUSH
44236: CALL_OW 331
// end ; end_of_file
44240: LD_VAR 0 4
44244: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
44245: LD_INT 0
44247: PPUSH
44248: PPUSH
// if exist_mode then
44249: LD_VAR 0 2
44253: IFFALSE 44278
// unit := CreateCharacter ( prefix & ident ) else
44255: LD_ADDR_VAR 0 5
44259: PUSH
44260: LD_VAR 0 3
44264: PUSH
44265: LD_VAR 0 1
44269: STR
44270: PPUSH
44271: CALL_OW 34
44275: ST_TO_ADDR
44276: GO 44293
// unit := NewCharacter ( ident ) ;
44278: LD_ADDR_VAR 0 5
44282: PUSH
44283: LD_VAR 0 1
44287: PPUSH
44288: CALL_OW 25
44292: ST_TO_ADDR
// result := unit ;
44293: LD_ADDR_VAR 0 4
44297: PUSH
44298: LD_VAR 0 5
44302: ST_TO_ADDR
// end ;
44303: LD_VAR 0 4
44307: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
44308: LD_INT 0
44310: PPUSH
44311: PPUSH
// if not side or not nation then
44312: LD_VAR 0 1
44316: NOT
44317: PUSH
44318: LD_VAR 0 2
44322: NOT
44323: OR
44324: IFFALSE 44328
// exit ;
44326: GO 45092
// case nation of nation_american :
44328: LD_VAR 0 2
44332: PUSH
44333: LD_INT 1
44335: DOUBLE
44336: EQUAL
44337: IFTRUE 44341
44339: GO 44555
44341: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
44342: LD_ADDR_VAR 0 4
44346: PUSH
44347: LD_INT 35
44349: PUSH
44350: LD_INT 45
44352: PUSH
44353: LD_INT 46
44355: PUSH
44356: LD_INT 47
44358: PUSH
44359: LD_INT 82
44361: PUSH
44362: LD_INT 83
44364: PUSH
44365: LD_INT 84
44367: PUSH
44368: LD_INT 85
44370: PUSH
44371: LD_INT 86
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: LD_INT 2
44379: PUSH
44380: LD_INT 6
44382: PUSH
44383: LD_INT 15
44385: PUSH
44386: LD_INT 16
44388: PUSH
44389: LD_INT 7
44391: PUSH
44392: LD_INT 12
44394: PUSH
44395: LD_INT 13
44397: PUSH
44398: LD_INT 10
44400: PUSH
44401: LD_INT 14
44403: PUSH
44404: LD_INT 20
44406: PUSH
44407: LD_INT 21
44409: PUSH
44410: LD_INT 22
44412: PUSH
44413: LD_INT 25
44415: PUSH
44416: LD_INT 32
44418: PUSH
44419: LD_INT 27
44421: PUSH
44422: LD_INT 36
44424: PUSH
44425: LD_INT 69
44427: PUSH
44428: LD_INT 39
44430: PUSH
44431: LD_INT 34
44433: PUSH
44434: LD_INT 40
44436: PUSH
44437: LD_INT 48
44439: PUSH
44440: LD_INT 49
44442: PUSH
44443: LD_INT 50
44445: PUSH
44446: LD_INT 51
44448: PUSH
44449: LD_INT 52
44451: PUSH
44452: LD_INT 53
44454: PUSH
44455: LD_INT 54
44457: PUSH
44458: LD_INT 55
44460: PUSH
44461: LD_INT 56
44463: PUSH
44464: LD_INT 57
44466: PUSH
44467: LD_INT 58
44469: PUSH
44470: LD_INT 59
44472: PUSH
44473: LD_INT 60
44475: PUSH
44476: LD_INT 61
44478: PUSH
44479: LD_INT 62
44481: PUSH
44482: LD_INT 80
44484: PUSH
44485: LD_INT 82
44487: PUSH
44488: LD_INT 83
44490: PUSH
44491: LD_INT 84
44493: PUSH
44494: LD_INT 85
44496: PUSH
44497: LD_INT 86
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: ST_TO_ADDR
44553: GO 45016
44555: LD_INT 2
44557: DOUBLE
44558: EQUAL
44559: IFTRUE 44563
44561: GO 44785
44563: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
44564: LD_ADDR_VAR 0 4
44568: PUSH
44569: LD_INT 35
44571: PUSH
44572: LD_INT 45
44574: PUSH
44575: LD_INT 46
44577: PUSH
44578: LD_INT 47
44580: PUSH
44581: LD_INT 82
44583: PUSH
44584: LD_INT 83
44586: PUSH
44587: LD_INT 84
44589: PUSH
44590: LD_INT 85
44592: PUSH
44593: LD_INT 87
44595: PUSH
44596: LD_INT 70
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: LD_INT 11
44604: PUSH
44605: LD_INT 3
44607: PUSH
44608: LD_INT 4
44610: PUSH
44611: LD_INT 5
44613: PUSH
44614: LD_INT 6
44616: PUSH
44617: LD_INT 15
44619: PUSH
44620: LD_INT 18
44622: PUSH
44623: LD_INT 7
44625: PUSH
44626: LD_INT 17
44628: PUSH
44629: LD_INT 8
44631: PUSH
44632: LD_INT 20
44634: PUSH
44635: LD_INT 21
44637: PUSH
44638: LD_INT 22
44640: PUSH
44641: LD_INT 72
44643: PUSH
44644: LD_INT 26
44646: PUSH
44647: LD_INT 69
44649: PUSH
44650: LD_INT 39
44652: PUSH
44653: LD_INT 40
44655: PUSH
44656: LD_INT 41
44658: PUSH
44659: LD_INT 42
44661: PUSH
44662: LD_INT 43
44664: PUSH
44665: LD_INT 48
44667: PUSH
44668: LD_INT 49
44670: PUSH
44671: LD_INT 50
44673: PUSH
44674: LD_INT 51
44676: PUSH
44677: LD_INT 52
44679: PUSH
44680: LD_INT 53
44682: PUSH
44683: LD_INT 54
44685: PUSH
44686: LD_INT 55
44688: PUSH
44689: LD_INT 56
44691: PUSH
44692: LD_INT 60
44694: PUSH
44695: LD_INT 61
44697: PUSH
44698: LD_INT 62
44700: PUSH
44701: LD_INT 66
44703: PUSH
44704: LD_INT 67
44706: PUSH
44707: LD_INT 68
44709: PUSH
44710: LD_INT 81
44712: PUSH
44713: LD_INT 82
44715: PUSH
44716: LD_INT 83
44718: PUSH
44719: LD_INT 84
44721: PUSH
44722: LD_INT 85
44724: PUSH
44725: LD_INT 87
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: ST_TO_ADDR
44783: GO 45016
44785: LD_INT 3
44787: DOUBLE
44788: EQUAL
44789: IFTRUE 44793
44791: GO 45015
44793: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
44794: LD_ADDR_VAR 0 4
44798: PUSH
44799: LD_INT 46
44801: PUSH
44802: LD_INT 47
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: LD_INT 82
44813: PUSH
44814: LD_INT 83
44816: PUSH
44817: LD_INT 84
44819: PUSH
44820: LD_INT 85
44822: PUSH
44823: LD_INT 86
44825: PUSH
44826: LD_INT 11
44828: PUSH
44829: LD_INT 9
44831: PUSH
44832: LD_INT 20
44834: PUSH
44835: LD_INT 19
44837: PUSH
44838: LD_INT 21
44840: PUSH
44841: LD_INT 24
44843: PUSH
44844: LD_INT 22
44846: PUSH
44847: LD_INT 25
44849: PUSH
44850: LD_INT 28
44852: PUSH
44853: LD_INT 29
44855: PUSH
44856: LD_INT 30
44858: PUSH
44859: LD_INT 31
44861: PUSH
44862: LD_INT 37
44864: PUSH
44865: LD_INT 38
44867: PUSH
44868: LD_INT 32
44870: PUSH
44871: LD_INT 27
44873: PUSH
44874: LD_INT 33
44876: PUSH
44877: LD_INT 69
44879: PUSH
44880: LD_INT 39
44882: PUSH
44883: LD_INT 34
44885: PUSH
44886: LD_INT 40
44888: PUSH
44889: LD_INT 71
44891: PUSH
44892: LD_INT 23
44894: PUSH
44895: LD_INT 44
44897: PUSH
44898: LD_INT 48
44900: PUSH
44901: LD_INT 49
44903: PUSH
44904: LD_INT 50
44906: PUSH
44907: LD_INT 51
44909: PUSH
44910: LD_INT 52
44912: PUSH
44913: LD_INT 53
44915: PUSH
44916: LD_INT 54
44918: PUSH
44919: LD_INT 55
44921: PUSH
44922: LD_INT 56
44924: PUSH
44925: LD_INT 57
44927: PUSH
44928: LD_INT 58
44930: PUSH
44931: LD_INT 59
44933: PUSH
44934: LD_INT 63
44936: PUSH
44937: LD_INT 64
44939: PUSH
44940: LD_INT 65
44942: PUSH
44943: LD_INT 82
44945: PUSH
44946: LD_INT 83
44948: PUSH
44949: LD_INT 84
44951: PUSH
44952: LD_INT 85
44954: PUSH
44955: LD_INT 86
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: ST_TO_ADDR
45013: GO 45016
45015: POP
// if state > - 1 and state < 3 then
45016: LD_VAR 0 3
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: GREATER
45025: PUSH
45026: LD_VAR 0 3
45030: PUSH
45031: LD_INT 3
45033: LESS
45034: AND
45035: IFFALSE 45092
// for i in result do
45037: LD_ADDR_VAR 0 5
45041: PUSH
45042: LD_VAR 0 4
45046: PUSH
45047: FOR_IN
45048: IFFALSE 45090
// if GetTech ( i , side ) <> state then
45050: LD_VAR 0 5
45054: PPUSH
45055: LD_VAR 0 1
45059: PPUSH
45060: CALL_OW 321
45064: PUSH
45065: LD_VAR 0 3
45069: NONEQUAL
45070: IFFALSE 45088
// result := result diff i ;
45072: LD_ADDR_VAR 0 4
45076: PUSH
45077: LD_VAR 0 4
45081: PUSH
45082: LD_VAR 0 5
45086: DIFF
45087: ST_TO_ADDR
45088: GO 45047
45090: POP
45091: POP
// end ;
45092: LD_VAR 0 4
45096: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
45097: LD_INT 0
45099: PPUSH
45100: PPUSH
45101: PPUSH
// result := true ;
45102: LD_ADDR_VAR 0 3
45106: PUSH
45107: LD_INT 1
45109: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
45110: LD_ADDR_VAR 0 5
45114: PUSH
45115: LD_VAR 0 2
45119: PPUSH
45120: CALL_OW 480
45124: ST_TO_ADDR
// if not tmp then
45125: LD_VAR 0 5
45129: NOT
45130: IFFALSE 45134
// exit ;
45132: GO 45183
// for i in tmp do
45134: LD_ADDR_VAR 0 4
45138: PUSH
45139: LD_VAR 0 5
45143: PUSH
45144: FOR_IN
45145: IFFALSE 45181
// if GetTech ( i , side ) <> state_researched then
45147: LD_VAR 0 4
45151: PPUSH
45152: LD_VAR 0 1
45156: PPUSH
45157: CALL_OW 321
45161: PUSH
45162: LD_INT 2
45164: NONEQUAL
45165: IFFALSE 45179
// begin result := false ;
45167: LD_ADDR_VAR 0 3
45171: PUSH
45172: LD_INT 0
45174: ST_TO_ADDR
// exit ;
45175: POP
45176: POP
45177: GO 45183
// end ;
45179: GO 45144
45181: POP
45182: POP
// end ;
45183: LD_VAR 0 3
45187: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
45188: LD_INT 0
45190: PPUSH
45191: PPUSH
45192: PPUSH
45193: PPUSH
45194: PPUSH
45195: PPUSH
45196: PPUSH
45197: PPUSH
45198: PPUSH
45199: PPUSH
45200: PPUSH
45201: PPUSH
45202: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
45203: LD_VAR 0 1
45207: NOT
45208: PUSH
45209: LD_VAR 0 1
45213: PPUSH
45214: CALL_OW 257
45218: PUSH
45219: LD_INT 9
45221: NONEQUAL
45222: OR
45223: IFFALSE 45227
// exit ;
45225: GO 45800
// side := GetSide ( unit ) ;
45227: LD_ADDR_VAR 0 9
45231: PUSH
45232: LD_VAR 0 1
45236: PPUSH
45237: CALL_OW 255
45241: ST_TO_ADDR
// tech_space := tech_spacanom ;
45242: LD_ADDR_VAR 0 12
45246: PUSH
45247: LD_INT 29
45249: ST_TO_ADDR
// tech_time := tech_taurad ;
45250: LD_ADDR_VAR 0 13
45254: PUSH
45255: LD_INT 28
45257: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
45258: LD_ADDR_VAR 0 11
45262: PUSH
45263: LD_VAR 0 1
45267: PPUSH
45268: CALL_OW 310
45272: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
45273: LD_VAR 0 11
45277: PPUSH
45278: CALL_OW 247
45282: PUSH
45283: LD_INT 2
45285: EQUAL
45286: IFFALSE 45290
// exit ;
45288: GO 45800
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45290: LD_ADDR_VAR 0 8
45294: PUSH
45295: LD_INT 81
45297: PUSH
45298: LD_VAR 0 9
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 3
45309: PUSH
45310: LD_INT 21
45312: PUSH
45313: LD_INT 3
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PPUSH
45328: CALL_OW 69
45332: ST_TO_ADDR
// if not tmp then
45333: LD_VAR 0 8
45337: NOT
45338: IFFALSE 45342
// exit ;
45340: GO 45800
// if in_unit then
45342: LD_VAR 0 11
45346: IFFALSE 45370
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
45348: LD_ADDR_VAR 0 10
45352: PUSH
45353: LD_VAR 0 8
45357: PPUSH
45358: LD_VAR 0 11
45362: PPUSH
45363: CALL_OW 74
45367: ST_TO_ADDR
45368: GO 45390
// enemy := NearestUnitToUnit ( tmp , unit ) ;
45370: LD_ADDR_VAR 0 10
45374: PUSH
45375: LD_VAR 0 8
45379: PPUSH
45380: LD_VAR 0 1
45384: PPUSH
45385: CALL_OW 74
45389: ST_TO_ADDR
// if not enemy then
45390: LD_VAR 0 10
45394: NOT
45395: IFFALSE 45399
// exit ;
45397: GO 45800
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
45399: LD_VAR 0 11
45403: PUSH
45404: LD_VAR 0 11
45408: PPUSH
45409: LD_VAR 0 10
45413: PPUSH
45414: CALL_OW 296
45418: PUSH
45419: LD_INT 13
45421: GREATER
45422: AND
45423: PUSH
45424: LD_VAR 0 1
45428: PPUSH
45429: LD_VAR 0 10
45433: PPUSH
45434: CALL_OW 296
45438: PUSH
45439: LD_INT 12
45441: GREATER
45442: OR
45443: IFFALSE 45447
// exit ;
45445: GO 45800
// missile := [ 1 ] ;
45447: LD_ADDR_VAR 0 14
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: EMPTY
45456: LIST
45457: ST_TO_ADDR
// if Researched ( side , tech_space ) then
45458: LD_VAR 0 9
45462: PPUSH
45463: LD_VAR 0 12
45467: PPUSH
45468: CALL_OW 325
45472: IFFALSE 45501
// missile := Insert ( missile , missile + 1 , 2 ) ;
45474: LD_ADDR_VAR 0 14
45478: PUSH
45479: LD_VAR 0 14
45483: PPUSH
45484: LD_VAR 0 14
45488: PUSH
45489: LD_INT 1
45491: PLUS
45492: PPUSH
45493: LD_INT 2
45495: PPUSH
45496: CALL_OW 2
45500: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
45501: LD_VAR 0 9
45505: PPUSH
45506: LD_VAR 0 13
45510: PPUSH
45511: CALL_OW 325
45515: PUSH
45516: LD_VAR 0 10
45520: PPUSH
45521: CALL_OW 255
45525: PPUSH
45526: LD_VAR 0 13
45530: PPUSH
45531: CALL_OW 325
45535: NOT
45536: AND
45537: IFFALSE 45566
// missile := Insert ( missile , missile + 1 , 3 ) ;
45539: LD_ADDR_VAR 0 14
45543: PUSH
45544: LD_VAR 0 14
45548: PPUSH
45549: LD_VAR 0 14
45553: PUSH
45554: LD_INT 1
45556: PLUS
45557: PPUSH
45558: LD_INT 3
45560: PPUSH
45561: CALL_OW 2
45565: ST_TO_ADDR
// if missile < 2 then
45566: LD_VAR 0 14
45570: PUSH
45571: LD_INT 2
45573: LESS
45574: IFFALSE 45578
// exit ;
45576: GO 45800
// x := GetX ( enemy ) ;
45578: LD_ADDR_VAR 0 4
45582: PUSH
45583: LD_VAR 0 10
45587: PPUSH
45588: CALL_OW 250
45592: ST_TO_ADDR
// y := GetY ( enemy ) ;
45593: LD_ADDR_VAR 0 5
45597: PUSH
45598: LD_VAR 0 10
45602: PPUSH
45603: CALL_OW 251
45607: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
45608: LD_ADDR_VAR 0 6
45612: PUSH
45613: LD_VAR 0 4
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PPUSH
45622: LD_INT 1
45624: PPUSH
45625: CALL_OW 12
45629: PLUS
45630: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
45631: LD_ADDR_VAR 0 7
45635: PUSH
45636: LD_VAR 0 5
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PPUSH
45645: LD_INT 1
45647: PPUSH
45648: CALL_OW 12
45652: PLUS
45653: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45654: LD_VAR 0 6
45658: PPUSH
45659: LD_VAR 0 7
45663: PPUSH
45664: CALL_OW 488
45668: NOT
45669: IFFALSE 45691
// begin _x := x ;
45671: LD_ADDR_VAR 0 6
45675: PUSH
45676: LD_VAR 0 4
45680: ST_TO_ADDR
// _y := y ;
45681: LD_ADDR_VAR 0 7
45685: PUSH
45686: LD_VAR 0 5
45690: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
45691: LD_ADDR_VAR 0 3
45695: PUSH
45696: LD_INT 1
45698: PPUSH
45699: LD_VAR 0 14
45703: PPUSH
45704: CALL_OW 12
45708: ST_TO_ADDR
// case i of 1 :
45709: LD_VAR 0 3
45713: PUSH
45714: LD_INT 1
45716: DOUBLE
45717: EQUAL
45718: IFTRUE 45722
45720: GO 45739
45722: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
45723: LD_VAR 0 1
45727: PPUSH
45728: LD_VAR 0 10
45732: PPUSH
45733: CALL_OW 115
45737: GO 45800
45739: LD_INT 2
45741: DOUBLE
45742: EQUAL
45743: IFTRUE 45747
45745: GO 45769
45747: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
45748: LD_VAR 0 1
45752: PPUSH
45753: LD_VAR 0 6
45757: PPUSH
45758: LD_VAR 0 7
45762: PPUSH
45763: CALL_OW 153
45767: GO 45800
45769: LD_INT 3
45771: DOUBLE
45772: EQUAL
45773: IFTRUE 45777
45775: GO 45799
45777: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
45778: LD_VAR 0 1
45782: PPUSH
45783: LD_VAR 0 6
45787: PPUSH
45788: LD_VAR 0 7
45792: PPUSH
45793: CALL_OW 154
45797: GO 45800
45799: POP
// end ;
45800: LD_VAR 0 2
45804: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
45805: LD_INT 0
45807: PPUSH
45808: PPUSH
45809: PPUSH
45810: PPUSH
45811: PPUSH
45812: PPUSH
// if not unit or not building then
45813: LD_VAR 0 1
45817: NOT
45818: PUSH
45819: LD_VAR 0 2
45823: NOT
45824: OR
45825: IFFALSE 45829
// exit ;
45827: GO 45987
// x := GetX ( building ) ;
45829: LD_ADDR_VAR 0 5
45833: PUSH
45834: LD_VAR 0 2
45838: PPUSH
45839: CALL_OW 250
45843: ST_TO_ADDR
// y := GetY ( building ) ;
45844: LD_ADDR_VAR 0 6
45848: PUSH
45849: LD_VAR 0 2
45853: PPUSH
45854: CALL_OW 251
45858: ST_TO_ADDR
// for i = 0 to 5 do
45859: LD_ADDR_VAR 0 4
45863: PUSH
45864: DOUBLE
45865: LD_INT 0
45867: DEC
45868: ST_TO_ADDR
45869: LD_INT 5
45871: PUSH
45872: FOR_TO
45873: IFFALSE 45985
// begin _x := ShiftX ( x , i , 3 ) ;
45875: LD_ADDR_VAR 0 7
45879: PUSH
45880: LD_VAR 0 5
45884: PPUSH
45885: LD_VAR 0 4
45889: PPUSH
45890: LD_INT 3
45892: PPUSH
45893: CALL_OW 272
45897: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
45898: LD_ADDR_VAR 0 8
45902: PUSH
45903: LD_VAR 0 6
45907: PPUSH
45908: LD_VAR 0 4
45912: PPUSH
45913: LD_INT 3
45915: PPUSH
45916: CALL_OW 273
45920: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45921: LD_VAR 0 7
45925: PPUSH
45926: LD_VAR 0 8
45930: PPUSH
45931: CALL_OW 488
45935: NOT
45936: IFFALSE 45940
// continue ;
45938: GO 45872
// if HexInfo ( _x , _y ) = 0 then
45940: LD_VAR 0 7
45944: PPUSH
45945: LD_VAR 0 8
45949: PPUSH
45950: CALL_OW 428
45954: PUSH
45955: LD_INT 0
45957: EQUAL
45958: IFFALSE 45983
// begin ComMoveXY ( unit , _x , _y ) ;
45960: LD_VAR 0 1
45964: PPUSH
45965: LD_VAR 0 7
45969: PPUSH
45970: LD_VAR 0 8
45974: PPUSH
45975: CALL_OW 111
// exit ;
45979: POP
45980: POP
45981: GO 45987
// end ; end ;
45983: GO 45872
45985: POP
45986: POP
// end ;
45987: LD_VAR 0 3
45991: RET
// export function ScanBase ( side , base_area ) ; begin
45992: LD_INT 0
45994: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
45995: LD_ADDR_VAR 0 3
45999: PUSH
46000: LD_VAR 0 2
46004: PPUSH
46005: LD_INT 81
46007: PUSH
46008: LD_VAR 0 1
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PPUSH
46017: CALL_OW 70
46021: ST_TO_ADDR
// end ;
46022: LD_VAR 0 3
46026: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
46027: LD_INT 0
46029: PPUSH
46030: PPUSH
46031: PPUSH
46032: PPUSH
// result := false ;
46033: LD_ADDR_VAR 0 2
46037: PUSH
46038: LD_INT 0
46040: ST_TO_ADDR
// side := GetSide ( unit ) ;
46041: LD_ADDR_VAR 0 3
46045: PUSH
46046: LD_VAR 0 1
46050: PPUSH
46051: CALL_OW 255
46055: ST_TO_ADDR
// nat := GetNation ( unit ) ;
46056: LD_ADDR_VAR 0 4
46060: PUSH
46061: LD_VAR 0 1
46065: PPUSH
46066: CALL_OW 248
46070: ST_TO_ADDR
// case nat of 1 :
46071: LD_VAR 0 4
46075: PUSH
46076: LD_INT 1
46078: DOUBLE
46079: EQUAL
46080: IFTRUE 46084
46082: GO 46095
46084: POP
// tech := tech_lassight ; 2 :
46085: LD_ADDR_VAR 0 5
46089: PUSH
46090: LD_INT 12
46092: ST_TO_ADDR
46093: GO 46134
46095: LD_INT 2
46097: DOUBLE
46098: EQUAL
46099: IFTRUE 46103
46101: GO 46114
46103: POP
// tech := tech_mortar ; 3 :
46104: LD_ADDR_VAR 0 5
46108: PUSH
46109: LD_INT 41
46111: ST_TO_ADDR
46112: GO 46134
46114: LD_INT 3
46116: DOUBLE
46117: EQUAL
46118: IFTRUE 46122
46120: GO 46133
46122: POP
// tech := tech_bazooka ; end ;
46123: LD_ADDR_VAR 0 5
46127: PUSH
46128: LD_INT 44
46130: ST_TO_ADDR
46131: GO 46134
46133: POP
// if Researched ( side , tech ) then
46134: LD_VAR 0 3
46138: PPUSH
46139: LD_VAR 0 5
46143: PPUSH
46144: CALL_OW 325
46148: IFFALSE 46175
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
46150: LD_ADDR_VAR 0 2
46154: PUSH
46155: LD_INT 5
46157: PUSH
46158: LD_INT 8
46160: PUSH
46161: LD_INT 9
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: LIST
46168: PUSH
46169: LD_VAR 0 4
46173: ARRAY
46174: ST_TO_ADDR
// end ;
46175: LD_VAR 0 2
46179: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
46180: LD_INT 0
46182: PPUSH
46183: PPUSH
46184: PPUSH
// if not mines then
46185: LD_VAR 0 2
46189: NOT
46190: IFFALSE 46194
// exit ;
46192: GO 46338
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46194: LD_ADDR_VAR 0 5
46198: PUSH
46199: LD_INT 81
46201: PUSH
46202: LD_VAR 0 1
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 3
46213: PUSH
46214: LD_INT 21
46216: PUSH
46217: LD_INT 3
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PPUSH
46232: CALL_OW 69
46236: ST_TO_ADDR
// for i in mines do
46237: LD_ADDR_VAR 0 4
46241: PUSH
46242: LD_VAR 0 2
46246: PUSH
46247: FOR_IN
46248: IFFALSE 46336
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
46250: LD_VAR 0 4
46254: PUSH
46255: LD_INT 1
46257: ARRAY
46258: PPUSH
46259: LD_VAR 0 4
46263: PUSH
46264: LD_INT 2
46266: ARRAY
46267: PPUSH
46268: CALL_OW 458
46272: NOT
46273: IFFALSE 46277
// continue ;
46275: GO 46247
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
46277: LD_VAR 0 4
46281: PUSH
46282: LD_INT 1
46284: ARRAY
46285: PPUSH
46286: LD_VAR 0 4
46290: PUSH
46291: LD_INT 2
46293: ARRAY
46294: PPUSH
46295: CALL_OW 428
46299: PUSH
46300: LD_VAR 0 5
46304: IN
46305: IFFALSE 46334
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
46307: LD_VAR 0 4
46311: PUSH
46312: LD_INT 1
46314: ARRAY
46315: PPUSH
46316: LD_VAR 0 4
46320: PUSH
46321: LD_INT 2
46323: ARRAY
46324: PPUSH
46325: LD_VAR 0 1
46329: PPUSH
46330: CALL_OW 456
// end ;
46334: GO 46247
46336: POP
46337: POP
// end ;
46338: LD_VAR 0 3
46342: RET
// export function Count ( array ) ; var i ; begin
46343: LD_INT 0
46345: PPUSH
46346: PPUSH
// result := 0 ;
46347: LD_ADDR_VAR 0 2
46351: PUSH
46352: LD_INT 0
46354: ST_TO_ADDR
// for i in array do
46355: LD_ADDR_VAR 0 3
46359: PUSH
46360: LD_VAR 0 1
46364: PUSH
46365: FOR_IN
46366: IFFALSE 46390
// if i then
46368: LD_VAR 0 3
46372: IFFALSE 46388
// result := result + 1 ;
46374: LD_ADDR_VAR 0 2
46378: PUSH
46379: LD_VAR 0 2
46383: PUSH
46384: LD_INT 1
46386: PLUS
46387: ST_TO_ADDR
46388: GO 46365
46390: POP
46391: POP
// end ;
46392: LD_VAR 0 2
46396: RET
// export function IsEmpty ( building ) ; begin
46397: LD_INT 0
46399: PPUSH
// if not building then
46400: LD_VAR 0 1
46404: NOT
46405: IFFALSE 46409
// exit ;
46407: GO 46452
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
46409: LD_ADDR_VAR 0 2
46413: PUSH
46414: LD_VAR 0 1
46418: PUSH
46419: LD_INT 22
46421: PUSH
46422: LD_VAR 0 1
46426: PPUSH
46427: CALL_OW 255
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 58
46438: PUSH
46439: EMPTY
46440: LIST
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PPUSH
46446: CALL_OW 69
46450: IN
46451: ST_TO_ADDR
// end ;
46452: LD_VAR 0 2
46456: RET
// export function IsNotFull ( building ) ; begin
46457: LD_INT 0
46459: PPUSH
// if not building then
46460: LD_VAR 0 1
46464: NOT
46465: IFFALSE 46469
// exit ;
46467: GO 46488
// result := UnitsInside ( building ) < 6 ;
46469: LD_ADDR_VAR 0 2
46473: PUSH
46474: LD_VAR 0 1
46478: PPUSH
46479: CALL_OW 313
46483: PUSH
46484: LD_INT 6
46486: LESS
46487: ST_TO_ADDR
// end ;
46488: LD_VAR 0 2
46492: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
46493: LD_INT 0
46495: PPUSH
46496: PPUSH
46497: PPUSH
46498: PPUSH
// tmp := [ ] ;
46499: LD_ADDR_VAR 0 3
46503: PUSH
46504: EMPTY
46505: ST_TO_ADDR
// list := [ ] ;
46506: LD_ADDR_VAR 0 5
46510: PUSH
46511: EMPTY
46512: ST_TO_ADDR
// for i = 16 to 25 do
46513: LD_ADDR_VAR 0 4
46517: PUSH
46518: DOUBLE
46519: LD_INT 16
46521: DEC
46522: ST_TO_ADDR
46523: LD_INT 25
46525: PUSH
46526: FOR_TO
46527: IFFALSE 46600
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
46529: LD_ADDR_VAR 0 3
46533: PUSH
46534: LD_VAR 0 3
46538: PUSH
46539: LD_INT 22
46541: PUSH
46542: LD_VAR 0 1
46546: PPUSH
46547: CALL_OW 255
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 91
46558: PUSH
46559: LD_VAR 0 1
46563: PUSH
46564: LD_INT 6
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 30
46574: PUSH
46575: LD_VAR 0 4
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: LIST
46588: PUSH
46589: EMPTY
46590: LIST
46591: PPUSH
46592: CALL_OW 69
46596: ADD
46597: ST_TO_ADDR
46598: GO 46526
46600: POP
46601: POP
// for i = 1 to tmp do
46602: LD_ADDR_VAR 0 4
46606: PUSH
46607: DOUBLE
46608: LD_INT 1
46610: DEC
46611: ST_TO_ADDR
46612: LD_VAR 0 3
46616: PUSH
46617: FOR_TO
46618: IFFALSE 46706
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
46620: LD_ADDR_VAR 0 5
46624: PUSH
46625: LD_VAR 0 5
46629: PUSH
46630: LD_VAR 0 3
46634: PUSH
46635: LD_VAR 0 4
46639: ARRAY
46640: PPUSH
46641: CALL_OW 266
46645: PUSH
46646: LD_VAR 0 3
46650: PUSH
46651: LD_VAR 0 4
46655: ARRAY
46656: PPUSH
46657: CALL_OW 250
46661: PUSH
46662: LD_VAR 0 3
46666: PUSH
46667: LD_VAR 0 4
46671: ARRAY
46672: PPUSH
46673: CALL_OW 251
46677: PUSH
46678: LD_VAR 0 3
46682: PUSH
46683: LD_VAR 0 4
46687: ARRAY
46688: PPUSH
46689: CALL_OW 254
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: PUSH
46700: EMPTY
46701: LIST
46702: ADD
46703: ST_TO_ADDR
46704: GO 46617
46706: POP
46707: POP
// result := list ;
46708: LD_ADDR_VAR 0 2
46712: PUSH
46713: LD_VAR 0 5
46717: ST_TO_ADDR
// end ;
46718: LD_VAR 0 2
46722: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
46723: LD_INT 0
46725: PPUSH
46726: PPUSH
46727: PPUSH
46728: PPUSH
46729: PPUSH
46730: PPUSH
46731: PPUSH
// if not factory then
46732: LD_VAR 0 1
46736: NOT
46737: IFFALSE 46741
// exit ;
46739: GO 47334
// if control = control_apeman then
46741: LD_VAR 0 4
46745: PUSH
46746: LD_INT 5
46748: EQUAL
46749: IFFALSE 46858
// begin tmp := UnitsInside ( factory ) ;
46751: LD_ADDR_VAR 0 8
46755: PUSH
46756: LD_VAR 0 1
46760: PPUSH
46761: CALL_OW 313
46765: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
46766: LD_VAR 0 8
46770: PPUSH
46771: LD_INT 25
46773: PUSH
46774: LD_INT 12
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PPUSH
46781: CALL_OW 72
46785: NOT
46786: IFFALSE 46796
// control := control_manual ;
46788: LD_ADDR_VAR 0 4
46792: PUSH
46793: LD_INT 1
46795: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
46796: LD_ADDR_VAR 0 8
46800: PUSH
46801: LD_VAR 0 1
46805: PPUSH
46806: CALL 46493 0 1
46810: ST_TO_ADDR
// if tmp then
46811: LD_VAR 0 8
46815: IFFALSE 46858
// begin for i in tmp do
46817: LD_ADDR_VAR 0 7
46821: PUSH
46822: LD_VAR 0 8
46826: PUSH
46827: FOR_IN
46828: IFFALSE 46856
// if i [ 1 ] = b_ext_radio then
46830: LD_VAR 0 7
46834: PUSH
46835: LD_INT 1
46837: ARRAY
46838: PUSH
46839: LD_INT 22
46841: EQUAL
46842: IFFALSE 46854
// begin control := control_remote ;
46844: LD_ADDR_VAR 0 4
46848: PUSH
46849: LD_INT 2
46851: ST_TO_ADDR
// break ;
46852: GO 46856
// end ;
46854: GO 46827
46856: POP
46857: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46858: LD_VAR 0 1
46862: PPUSH
46863: LD_VAR 0 2
46867: PPUSH
46868: LD_VAR 0 3
46872: PPUSH
46873: LD_VAR 0 4
46877: PPUSH
46878: LD_VAR 0 5
46882: PPUSH
46883: CALL_OW 448
46887: IFFALSE 46922
// begin result := [ chassis , engine , control , weapon ] ;
46889: LD_ADDR_VAR 0 6
46893: PUSH
46894: LD_VAR 0 2
46898: PUSH
46899: LD_VAR 0 3
46903: PUSH
46904: LD_VAR 0 4
46908: PUSH
46909: LD_VAR 0 5
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: ST_TO_ADDR
// exit ;
46920: GO 47334
// end ; _chassis := AvailableChassisList ( factory ) ;
46922: LD_ADDR_VAR 0 9
46926: PUSH
46927: LD_VAR 0 1
46931: PPUSH
46932: CALL_OW 475
46936: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
46937: LD_ADDR_VAR 0 11
46941: PUSH
46942: LD_VAR 0 1
46946: PPUSH
46947: CALL_OW 476
46951: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
46952: LD_ADDR_VAR 0 12
46956: PUSH
46957: LD_VAR 0 1
46961: PPUSH
46962: CALL_OW 477
46966: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
46967: LD_ADDR_VAR 0 10
46971: PUSH
46972: LD_VAR 0 1
46976: PPUSH
46977: CALL_OW 478
46981: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
46982: LD_VAR 0 9
46986: NOT
46987: PUSH
46988: LD_VAR 0 11
46992: NOT
46993: OR
46994: PUSH
46995: LD_VAR 0 12
46999: NOT
47000: OR
47001: PUSH
47002: LD_VAR 0 10
47006: NOT
47007: OR
47008: IFFALSE 47043
// begin result := [ chassis , engine , control , weapon ] ;
47010: LD_ADDR_VAR 0 6
47014: PUSH
47015: LD_VAR 0 2
47019: PUSH
47020: LD_VAR 0 3
47024: PUSH
47025: LD_VAR 0 4
47029: PUSH
47030: LD_VAR 0 5
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: ST_TO_ADDR
// exit ;
47041: GO 47334
// end ; if not chassis in _chassis then
47043: LD_VAR 0 2
47047: PUSH
47048: LD_VAR 0 9
47052: IN
47053: NOT
47054: IFFALSE 47080
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
47056: LD_ADDR_VAR 0 2
47060: PUSH
47061: LD_VAR 0 9
47065: PUSH
47066: LD_INT 1
47068: PPUSH
47069: LD_VAR 0 9
47073: PPUSH
47074: CALL_OW 12
47078: ARRAY
47079: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
47080: LD_VAR 0 2
47084: PPUSH
47085: LD_VAR 0 3
47089: PPUSH
47090: CALL 47339 0 2
47094: NOT
47095: IFFALSE 47154
// repeat engine := _engine [ 1 ] ;
47097: LD_ADDR_VAR 0 3
47101: PUSH
47102: LD_VAR 0 11
47106: PUSH
47107: LD_INT 1
47109: ARRAY
47110: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
47111: LD_ADDR_VAR 0 11
47115: PUSH
47116: LD_VAR 0 11
47120: PPUSH
47121: LD_INT 1
47123: PPUSH
47124: CALL_OW 3
47128: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
47129: LD_VAR 0 2
47133: PPUSH
47134: LD_VAR 0 3
47138: PPUSH
47139: CALL 47339 0 2
47143: PUSH
47144: LD_VAR 0 11
47148: PUSH
47149: EMPTY
47150: EQUAL
47151: OR
47152: IFFALSE 47097
// if not control in _control then
47154: LD_VAR 0 4
47158: PUSH
47159: LD_VAR 0 12
47163: IN
47164: NOT
47165: IFFALSE 47191
// control := _control [ rand ( 1 , _control ) ] ;
47167: LD_ADDR_VAR 0 4
47171: PUSH
47172: LD_VAR 0 12
47176: PUSH
47177: LD_INT 1
47179: PPUSH
47180: LD_VAR 0 12
47184: PPUSH
47185: CALL_OW 12
47189: ARRAY
47190: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
47191: LD_VAR 0 2
47195: PPUSH
47196: LD_VAR 0 5
47200: PPUSH
47201: CALL 47559 0 2
47205: NOT
47206: IFFALSE 47265
// repeat weapon := _weapon [ 1 ] ;
47208: LD_ADDR_VAR 0 5
47212: PUSH
47213: LD_VAR 0 10
47217: PUSH
47218: LD_INT 1
47220: ARRAY
47221: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
47222: LD_ADDR_VAR 0 10
47226: PUSH
47227: LD_VAR 0 10
47231: PPUSH
47232: LD_INT 1
47234: PPUSH
47235: CALL_OW 3
47239: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
47240: LD_VAR 0 2
47244: PPUSH
47245: LD_VAR 0 5
47249: PPUSH
47250: CALL 47559 0 2
47254: PUSH
47255: LD_VAR 0 10
47259: PUSH
47260: EMPTY
47261: EQUAL
47262: OR
47263: IFFALSE 47208
// result := [ ] ;
47265: LD_ADDR_VAR 0 6
47269: PUSH
47270: EMPTY
47271: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
47272: LD_VAR 0 1
47276: PPUSH
47277: LD_VAR 0 2
47281: PPUSH
47282: LD_VAR 0 3
47286: PPUSH
47287: LD_VAR 0 4
47291: PPUSH
47292: LD_VAR 0 5
47296: PPUSH
47297: CALL_OW 448
47301: IFFALSE 47334
// result := [ chassis , engine , control , weapon ] ;
47303: LD_ADDR_VAR 0 6
47307: PUSH
47308: LD_VAR 0 2
47312: PUSH
47313: LD_VAR 0 3
47317: PUSH
47318: LD_VAR 0 4
47322: PUSH
47323: LD_VAR 0 5
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: ST_TO_ADDR
// end ;
47334: LD_VAR 0 6
47338: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
47339: LD_INT 0
47341: PPUSH
// if not chassis or not engine then
47342: LD_VAR 0 1
47346: NOT
47347: PUSH
47348: LD_VAR 0 2
47352: NOT
47353: OR
47354: IFFALSE 47358
// exit ;
47356: GO 47554
// case engine of engine_solar :
47358: LD_VAR 0 2
47362: PUSH
47363: LD_INT 2
47365: DOUBLE
47366: EQUAL
47367: IFTRUE 47371
47369: GO 47409
47371: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
47372: LD_ADDR_VAR 0 3
47376: PUSH
47377: LD_INT 11
47379: PUSH
47380: LD_INT 12
47382: PUSH
47383: LD_INT 13
47385: PUSH
47386: LD_INT 14
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: LD_INT 2
47394: PUSH
47395: LD_INT 3
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: ST_TO_ADDR
47407: GO 47538
47409: LD_INT 1
47411: DOUBLE
47412: EQUAL
47413: IFTRUE 47417
47415: GO 47479
47417: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
47418: LD_ADDR_VAR 0 3
47422: PUSH
47423: LD_INT 11
47425: PUSH
47426: LD_INT 12
47428: PUSH
47429: LD_INT 13
47431: PUSH
47432: LD_INT 14
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: LD_INT 2
47440: PUSH
47441: LD_INT 3
47443: PUSH
47444: LD_INT 4
47446: PUSH
47447: LD_INT 5
47449: PUSH
47450: LD_INT 21
47452: PUSH
47453: LD_INT 23
47455: PUSH
47456: LD_INT 22
47458: PUSH
47459: LD_INT 24
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: ST_TO_ADDR
47477: GO 47538
47479: LD_INT 3
47481: DOUBLE
47482: EQUAL
47483: IFTRUE 47487
47485: GO 47537
47487: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47488: LD_ADDR_VAR 0 3
47492: PUSH
47493: LD_INT 13
47495: PUSH
47496: LD_INT 14
47498: PUSH
47499: LD_INT 2
47501: PUSH
47502: LD_INT 3
47504: PUSH
47505: LD_INT 4
47507: PUSH
47508: LD_INT 5
47510: PUSH
47511: LD_INT 21
47513: PUSH
47514: LD_INT 22
47516: PUSH
47517: LD_INT 23
47519: PUSH
47520: LD_INT 24
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: ST_TO_ADDR
47535: GO 47538
47537: POP
// result := ( chassis in result ) ;
47538: LD_ADDR_VAR 0 3
47542: PUSH
47543: LD_VAR 0 1
47547: PUSH
47548: LD_VAR 0 3
47552: IN
47553: ST_TO_ADDR
// end ;
47554: LD_VAR 0 3
47558: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
47559: LD_INT 0
47561: PPUSH
// if not chassis or not weapon then
47562: LD_VAR 0 1
47566: NOT
47567: PUSH
47568: LD_VAR 0 2
47572: NOT
47573: OR
47574: IFFALSE 47578
// exit ;
47576: GO 48604
// case weapon of us_machine_gun :
47578: LD_VAR 0 2
47582: PUSH
47583: LD_INT 2
47585: DOUBLE
47586: EQUAL
47587: IFTRUE 47591
47589: GO 47621
47591: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
47592: LD_ADDR_VAR 0 3
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: LD_INT 2
47602: PUSH
47603: LD_INT 3
47605: PUSH
47606: LD_INT 4
47608: PUSH
47609: LD_INT 5
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: ST_TO_ADDR
47619: GO 48588
47621: LD_INT 3
47623: DOUBLE
47624: EQUAL
47625: IFTRUE 47629
47627: GO 47659
47629: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
47630: LD_ADDR_VAR 0 3
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: LD_INT 3
47643: PUSH
47644: LD_INT 4
47646: PUSH
47647: LD_INT 5
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: ST_TO_ADDR
47657: GO 48588
47659: LD_INT 11
47661: DOUBLE
47662: EQUAL
47663: IFTRUE 47667
47665: GO 47697
47667: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
47668: LD_ADDR_VAR 0 3
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: LD_INT 3
47681: PUSH
47682: LD_INT 4
47684: PUSH
47685: LD_INT 5
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: ST_TO_ADDR
47695: GO 48588
47697: LD_INT 4
47699: DOUBLE
47700: EQUAL
47701: IFTRUE 47705
47703: GO 47731
47705: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
47706: LD_ADDR_VAR 0 3
47710: PUSH
47711: LD_INT 2
47713: PUSH
47714: LD_INT 3
47716: PUSH
47717: LD_INT 4
47719: PUSH
47720: LD_INT 5
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: ST_TO_ADDR
47729: GO 48588
47731: LD_INT 5
47733: DOUBLE
47734: EQUAL
47735: IFTRUE 47739
47737: GO 47765
47739: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
47740: LD_ADDR_VAR 0 3
47744: PUSH
47745: LD_INT 2
47747: PUSH
47748: LD_INT 3
47750: PUSH
47751: LD_INT 4
47753: PUSH
47754: LD_INT 5
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: ST_TO_ADDR
47763: GO 48588
47765: LD_INT 9
47767: DOUBLE
47768: EQUAL
47769: IFTRUE 47773
47771: GO 47799
47773: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
47774: LD_ADDR_VAR 0 3
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: LD_INT 3
47784: PUSH
47785: LD_INT 4
47787: PUSH
47788: LD_INT 5
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: ST_TO_ADDR
47797: GO 48588
47799: LD_INT 7
47801: DOUBLE
47802: EQUAL
47803: IFTRUE 47807
47805: GO 47833
47807: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
47808: LD_ADDR_VAR 0 3
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: LD_INT 3
47818: PUSH
47819: LD_INT 4
47821: PUSH
47822: LD_INT 5
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: ST_TO_ADDR
47831: GO 48588
47833: LD_INT 12
47835: DOUBLE
47836: EQUAL
47837: IFTRUE 47841
47839: GO 47867
47841: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
47842: LD_ADDR_VAR 0 3
47846: PUSH
47847: LD_INT 2
47849: PUSH
47850: LD_INT 3
47852: PUSH
47853: LD_INT 4
47855: PUSH
47856: LD_INT 5
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: ST_TO_ADDR
47865: GO 48588
47867: LD_INT 13
47869: DOUBLE
47870: EQUAL
47871: IFTRUE 47875
47873: GO 47901
47875: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
47876: LD_ADDR_VAR 0 3
47880: PUSH
47881: LD_INT 2
47883: PUSH
47884: LD_INT 3
47886: PUSH
47887: LD_INT 4
47889: PUSH
47890: LD_INT 5
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: ST_TO_ADDR
47899: GO 48588
47901: LD_INT 14
47903: DOUBLE
47904: EQUAL
47905: IFTRUE 47909
47907: GO 47927
47909: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
47910: LD_ADDR_VAR 0 3
47914: PUSH
47915: LD_INT 4
47917: PUSH
47918: LD_INT 5
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: ST_TO_ADDR
47925: GO 48588
47927: LD_INT 6
47929: DOUBLE
47930: EQUAL
47931: IFTRUE 47935
47933: GO 47953
47935: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
47936: LD_ADDR_VAR 0 3
47940: PUSH
47941: LD_INT 4
47943: PUSH
47944: LD_INT 5
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: ST_TO_ADDR
47951: GO 48588
47953: LD_INT 10
47955: DOUBLE
47956: EQUAL
47957: IFTRUE 47961
47959: GO 47979
47961: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
47962: LD_ADDR_VAR 0 3
47966: PUSH
47967: LD_INT 4
47969: PUSH
47970: LD_INT 5
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: ST_TO_ADDR
47977: GO 48588
47979: LD_INT 22
47981: DOUBLE
47982: EQUAL
47983: IFTRUE 47987
47985: GO 48013
47987: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
47988: LD_ADDR_VAR 0 3
47992: PUSH
47993: LD_INT 11
47995: PUSH
47996: LD_INT 12
47998: PUSH
47999: LD_INT 13
48001: PUSH
48002: LD_INT 14
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: ST_TO_ADDR
48011: GO 48588
48013: LD_INT 23
48015: DOUBLE
48016: EQUAL
48017: IFTRUE 48021
48019: GO 48047
48021: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
48022: LD_ADDR_VAR 0 3
48026: PUSH
48027: LD_INT 11
48029: PUSH
48030: LD_INT 12
48032: PUSH
48033: LD_INT 13
48035: PUSH
48036: LD_INT 14
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: ST_TO_ADDR
48045: GO 48588
48047: LD_INT 24
48049: DOUBLE
48050: EQUAL
48051: IFTRUE 48055
48053: GO 48081
48055: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
48056: LD_ADDR_VAR 0 3
48060: PUSH
48061: LD_INT 11
48063: PUSH
48064: LD_INT 12
48066: PUSH
48067: LD_INT 13
48069: PUSH
48070: LD_INT 14
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: ST_TO_ADDR
48079: GO 48588
48081: LD_INT 30
48083: DOUBLE
48084: EQUAL
48085: IFTRUE 48089
48087: GO 48115
48089: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
48090: LD_ADDR_VAR 0 3
48094: PUSH
48095: LD_INT 11
48097: PUSH
48098: LD_INT 12
48100: PUSH
48101: LD_INT 13
48103: PUSH
48104: LD_INT 14
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: ST_TO_ADDR
48113: GO 48588
48115: LD_INT 25
48117: DOUBLE
48118: EQUAL
48119: IFTRUE 48123
48121: GO 48141
48123: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
48124: LD_ADDR_VAR 0 3
48128: PUSH
48129: LD_INT 13
48131: PUSH
48132: LD_INT 14
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: ST_TO_ADDR
48139: GO 48588
48141: LD_INT 27
48143: DOUBLE
48144: EQUAL
48145: IFTRUE 48149
48147: GO 48167
48149: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
48150: LD_ADDR_VAR 0 3
48154: PUSH
48155: LD_INT 13
48157: PUSH
48158: LD_INT 14
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: ST_TO_ADDR
48165: GO 48588
48167: LD_INT 28
48169: DOUBLE
48170: EQUAL
48171: IFTRUE 48175
48173: GO 48193
48175: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
48176: LD_ADDR_VAR 0 3
48180: PUSH
48181: LD_INT 13
48183: PUSH
48184: LD_INT 14
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: ST_TO_ADDR
48191: GO 48588
48193: LD_INT 29
48195: DOUBLE
48196: EQUAL
48197: IFTRUE 48201
48199: GO 48219
48201: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
48202: LD_ADDR_VAR 0 3
48206: PUSH
48207: LD_INT 13
48209: PUSH
48210: LD_INT 14
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: ST_TO_ADDR
48217: GO 48588
48219: LD_INT 31
48221: DOUBLE
48222: EQUAL
48223: IFTRUE 48227
48225: GO 48245
48227: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
48228: LD_ADDR_VAR 0 3
48232: PUSH
48233: LD_INT 13
48235: PUSH
48236: LD_INT 14
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: ST_TO_ADDR
48243: GO 48588
48245: LD_INT 26
48247: DOUBLE
48248: EQUAL
48249: IFTRUE 48253
48251: GO 48271
48253: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
48254: LD_ADDR_VAR 0 3
48258: PUSH
48259: LD_INT 13
48261: PUSH
48262: LD_INT 14
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: ST_TO_ADDR
48269: GO 48588
48271: LD_INT 42
48273: DOUBLE
48274: EQUAL
48275: IFTRUE 48279
48277: GO 48305
48279: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
48280: LD_ADDR_VAR 0 3
48284: PUSH
48285: LD_INT 21
48287: PUSH
48288: LD_INT 22
48290: PUSH
48291: LD_INT 23
48293: PUSH
48294: LD_INT 24
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: ST_TO_ADDR
48303: GO 48588
48305: LD_INT 43
48307: DOUBLE
48308: EQUAL
48309: IFTRUE 48313
48311: GO 48339
48313: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
48314: LD_ADDR_VAR 0 3
48318: PUSH
48319: LD_INT 21
48321: PUSH
48322: LD_INT 22
48324: PUSH
48325: LD_INT 23
48327: PUSH
48328: LD_INT 24
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: ST_TO_ADDR
48337: GO 48588
48339: LD_INT 44
48341: DOUBLE
48342: EQUAL
48343: IFTRUE 48347
48345: GO 48373
48347: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
48348: LD_ADDR_VAR 0 3
48352: PUSH
48353: LD_INT 21
48355: PUSH
48356: LD_INT 22
48358: PUSH
48359: LD_INT 23
48361: PUSH
48362: LD_INT 24
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: ST_TO_ADDR
48371: GO 48588
48373: LD_INT 45
48375: DOUBLE
48376: EQUAL
48377: IFTRUE 48381
48379: GO 48407
48381: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
48382: LD_ADDR_VAR 0 3
48386: PUSH
48387: LD_INT 21
48389: PUSH
48390: LD_INT 22
48392: PUSH
48393: LD_INT 23
48395: PUSH
48396: LD_INT 24
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: ST_TO_ADDR
48405: GO 48588
48407: LD_INT 49
48409: DOUBLE
48410: EQUAL
48411: IFTRUE 48415
48413: GO 48441
48415: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
48416: LD_ADDR_VAR 0 3
48420: PUSH
48421: LD_INT 21
48423: PUSH
48424: LD_INT 22
48426: PUSH
48427: LD_INT 23
48429: PUSH
48430: LD_INT 24
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: ST_TO_ADDR
48439: GO 48588
48441: LD_INT 51
48443: DOUBLE
48444: EQUAL
48445: IFTRUE 48449
48447: GO 48475
48449: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
48450: LD_ADDR_VAR 0 3
48454: PUSH
48455: LD_INT 21
48457: PUSH
48458: LD_INT 22
48460: PUSH
48461: LD_INT 23
48463: PUSH
48464: LD_INT 24
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: ST_TO_ADDR
48473: GO 48588
48475: LD_INT 52
48477: DOUBLE
48478: EQUAL
48479: IFTRUE 48483
48481: GO 48509
48483: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
48484: LD_ADDR_VAR 0 3
48488: PUSH
48489: LD_INT 21
48491: PUSH
48492: LD_INT 22
48494: PUSH
48495: LD_INT 23
48497: PUSH
48498: LD_INT 24
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: ST_TO_ADDR
48507: GO 48588
48509: LD_INT 53
48511: DOUBLE
48512: EQUAL
48513: IFTRUE 48517
48515: GO 48535
48517: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
48518: LD_ADDR_VAR 0 3
48522: PUSH
48523: LD_INT 23
48525: PUSH
48526: LD_INT 24
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: ST_TO_ADDR
48533: GO 48588
48535: LD_INT 46
48537: DOUBLE
48538: EQUAL
48539: IFTRUE 48543
48541: GO 48561
48543: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
48544: LD_ADDR_VAR 0 3
48548: PUSH
48549: LD_INT 23
48551: PUSH
48552: LD_INT 24
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: ST_TO_ADDR
48559: GO 48588
48561: LD_INT 47
48563: DOUBLE
48564: EQUAL
48565: IFTRUE 48569
48567: GO 48587
48569: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
48570: LD_ADDR_VAR 0 3
48574: PUSH
48575: LD_INT 23
48577: PUSH
48578: LD_INT 24
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: ST_TO_ADDR
48585: GO 48588
48587: POP
// result := ( chassis in result ) ;
48588: LD_ADDR_VAR 0 3
48592: PUSH
48593: LD_VAR 0 1
48597: PUSH
48598: LD_VAR 0 3
48602: IN
48603: ST_TO_ADDR
// end ;
48604: LD_VAR 0 3
48608: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
48609: LD_INT 0
48611: PPUSH
48612: PPUSH
48613: PPUSH
48614: PPUSH
48615: PPUSH
48616: PPUSH
48617: PPUSH
// result := array ;
48618: LD_ADDR_VAR 0 5
48622: PUSH
48623: LD_VAR 0 1
48627: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
48628: LD_VAR 0 1
48632: NOT
48633: PUSH
48634: LD_VAR 0 2
48638: NOT
48639: OR
48640: PUSH
48641: LD_VAR 0 3
48645: NOT
48646: OR
48647: PUSH
48648: LD_VAR 0 2
48652: PUSH
48653: LD_VAR 0 1
48657: GREATER
48658: OR
48659: PUSH
48660: LD_VAR 0 3
48664: PUSH
48665: LD_VAR 0 1
48669: GREATER
48670: OR
48671: IFFALSE 48675
// exit ;
48673: GO 48971
// if direction then
48675: LD_VAR 0 4
48679: IFFALSE 48743
// begin d := 1 ;
48681: LD_ADDR_VAR 0 9
48685: PUSH
48686: LD_INT 1
48688: ST_TO_ADDR
// if i_from > i_to then
48689: LD_VAR 0 2
48693: PUSH
48694: LD_VAR 0 3
48698: GREATER
48699: IFFALSE 48725
// length := ( array - i_from ) + i_to else
48701: LD_ADDR_VAR 0 11
48705: PUSH
48706: LD_VAR 0 1
48710: PUSH
48711: LD_VAR 0 2
48715: MINUS
48716: PUSH
48717: LD_VAR 0 3
48721: PLUS
48722: ST_TO_ADDR
48723: GO 48741
// length := i_to - i_from ;
48725: LD_ADDR_VAR 0 11
48729: PUSH
48730: LD_VAR 0 3
48734: PUSH
48735: LD_VAR 0 2
48739: MINUS
48740: ST_TO_ADDR
// end else
48741: GO 48804
// begin d := - 1 ;
48743: LD_ADDR_VAR 0 9
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: ST_TO_ADDR
// if i_from > i_to then
48752: LD_VAR 0 2
48756: PUSH
48757: LD_VAR 0 3
48761: GREATER
48762: IFFALSE 48782
// length := i_from - i_to else
48764: LD_ADDR_VAR 0 11
48768: PUSH
48769: LD_VAR 0 2
48773: PUSH
48774: LD_VAR 0 3
48778: MINUS
48779: ST_TO_ADDR
48780: GO 48804
// length := ( array - i_to ) + i_from ;
48782: LD_ADDR_VAR 0 11
48786: PUSH
48787: LD_VAR 0 1
48791: PUSH
48792: LD_VAR 0 3
48796: MINUS
48797: PUSH
48798: LD_VAR 0 2
48802: PLUS
48803: ST_TO_ADDR
// end ; if not length then
48804: LD_VAR 0 11
48808: NOT
48809: IFFALSE 48813
// exit ;
48811: GO 48971
// tmp := array ;
48813: LD_ADDR_VAR 0 10
48817: PUSH
48818: LD_VAR 0 1
48822: ST_TO_ADDR
// for i = 1 to length do
48823: LD_ADDR_VAR 0 6
48827: PUSH
48828: DOUBLE
48829: LD_INT 1
48831: DEC
48832: ST_TO_ADDR
48833: LD_VAR 0 11
48837: PUSH
48838: FOR_TO
48839: IFFALSE 48959
// begin for j = 1 to array do
48841: LD_ADDR_VAR 0 7
48845: PUSH
48846: DOUBLE
48847: LD_INT 1
48849: DEC
48850: ST_TO_ADDR
48851: LD_VAR 0 1
48855: PUSH
48856: FOR_TO
48857: IFFALSE 48945
// begin k := j + d ;
48859: LD_ADDR_VAR 0 8
48863: PUSH
48864: LD_VAR 0 7
48868: PUSH
48869: LD_VAR 0 9
48873: PLUS
48874: ST_TO_ADDR
// if k > array then
48875: LD_VAR 0 8
48879: PUSH
48880: LD_VAR 0 1
48884: GREATER
48885: IFFALSE 48895
// k := 1 ;
48887: LD_ADDR_VAR 0 8
48891: PUSH
48892: LD_INT 1
48894: ST_TO_ADDR
// if not k then
48895: LD_VAR 0 8
48899: NOT
48900: IFFALSE 48912
// k := array ;
48902: LD_ADDR_VAR 0 8
48906: PUSH
48907: LD_VAR 0 1
48911: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
48912: LD_ADDR_VAR 0 10
48916: PUSH
48917: LD_VAR 0 10
48921: PPUSH
48922: LD_VAR 0 8
48926: PPUSH
48927: LD_VAR 0 1
48931: PUSH
48932: LD_VAR 0 7
48936: ARRAY
48937: PPUSH
48938: CALL_OW 1
48942: ST_TO_ADDR
// end ;
48943: GO 48856
48945: POP
48946: POP
// array := tmp ;
48947: LD_ADDR_VAR 0 1
48951: PUSH
48952: LD_VAR 0 10
48956: ST_TO_ADDR
// end ;
48957: GO 48838
48959: POP
48960: POP
// result := array ;
48961: LD_ADDR_VAR 0 5
48965: PUSH
48966: LD_VAR 0 1
48970: ST_TO_ADDR
// end ;
48971: LD_VAR 0 5
48975: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
48976: LD_INT 0
48978: PPUSH
48979: PPUSH
// result := 0 ;
48980: LD_ADDR_VAR 0 3
48984: PUSH
48985: LD_INT 0
48987: ST_TO_ADDR
// if not array or not value in array then
48988: LD_VAR 0 1
48992: NOT
48993: PUSH
48994: LD_VAR 0 2
48998: PUSH
48999: LD_VAR 0 1
49003: IN
49004: NOT
49005: OR
49006: IFFALSE 49010
// exit ;
49008: GO 49064
// for i = 1 to array do
49010: LD_ADDR_VAR 0 4
49014: PUSH
49015: DOUBLE
49016: LD_INT 1
49018: DEC
49019: ST_TO_ADDR
49020: LD_VAR 0 1
49024: PUSH
49025: FOR_TO
49026: IFFALSE 49062
// if value = array [ i ] then
49028: LD_VAR 0 2
49032: PUSH
49033: LD_VAR 0 1
49037: PUSH
49038: LD_VAR 0 4
49042: ARRAY
49043: EQUAL
49044: IFFALSE 49060
// begin result := i ;
49046: LD_ADDR_VAR 0 3
49050: PUSH
49051: LD_VAR 0 4
49055: ST_TO_ADDR
// exit ;
49056: POP
49057: POP
49058: GO 49064
// end ;
49060: GO 49025
49062: POP
49063: POP
// end ;
49064: LD_VAR 0 3
49068: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
49069: LD_INT 0
49071: PPUSH
// vc_chassis := chassis ;
49072: LD_ADDR_OWVAR 37
49076: PUSH
49077: LD_VAR 0 1
49081: ST_TO_ADDR
// vc_engine := engine ;
49082: LD_ADDR_OWVAR 39
49086: PUSH
49087: LD_VAR 0 2
49091: ST_TO_ADDR
// vc_control := control ;
49092: LD_ADDR_OWVAR 38
49096: PUSH
49097: LD_VAR 0 3
49101: ST_TO_ADDR
// vc_weapon := weapon ;
49102: LD_ADDR_OWVAR 40
49106: PUSH
49107: LD_VAR 0 4
49111: ST_TO_ADDR
// vc_fuel_battery := fuel ;
49112: LD_ADDR_OWVAR 41
49116: PUSH
49117: LD_VAR 0 5
49121: ST_TO_ADDR
// end ;
49122: LD_VAR 0 6
49126: RET
// export function WantPlant ( unit ) ; var task ; begin
49127: LD_INT 0
49129: PPUSH
49130: PPUSH
// result := false ;
49131: LD_ADDR_VAR 0 2
49135: PUSH
49136: LD_INT 0
49138: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
49139: LD_ADDR_VAR 0 3
49143: PUSH
49144: LD_VAR 0 1
49148: PPUSH
49149: CALL_OW 437
49153: ST_TO_ADDR
// if task then
49154: LD_VAR 0 3
49158: IFFALSE 49186
// if task [ 1 ] [ 1 ] = p then
49160: LD_VAR 0 3
49164: PUSH
49165: LD_INT 1
49167: ARRAY
49168: PUSH
49169: LD_INT 1
49171: ARRAY
49172: PUSH
49173: LD_STRING p
49175: EQUAL
49176: IFFALSE 49186
// result := true ;
49178: LD_ADDR_VAR 0 2
49182: PUSH
49183: LD_INT 1
49185: ST_TO_ADDR
// end ;
49186: LD_VAR 0 2
49190: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
49191: LD_INT 0
49193: PPUSH
49194: PPUSH
49195: PPUSH
49196: PPUSH
// if pos < 1 then
49197: LD_VAR 0 2
49201: PUSH
49202: LD_INT 1
49204: LESS
49205: IFFALSE 49209
// exit ;
49207: GO 49512
// if pos = 1 then
49209: LD_VAR 0 2
49213: PUSH
49214: LD_INT 1
49216: EQUAL
49217: IFFALSE 49250
// result := Replace ( arr , pos [ 1 ] , value ) else
49219: LD_ADDR_VAR 0 4
49223: PUSH
49224: LD_VAR 0 1
49228: PPUSH
49229: LD_VAR 0 2
49233: PUSH
49234: LD_INT 1
49236: ARRAY
49237: PPUSH
49238: LD_VAR 0 3
49242: PPUSH
49243: CALL_OW 1
49247: ST_TO_ADDR
49248: GO 49512
// begin tmp := arr ;
49250: LD_ADDR_VAR 0 6
49254: PUSH
49255: LD_VAR 0 1
49259: ST_TO_ADDR
// s_arr := [ tmp ] ;
49260: LD_ADDR_VAR 0 7
49264: PUSH
49265: LD_VAR 0 6
49269: PUSH
49270: EMPTY
49271: LIST
49272: ST_TO_ADDR
// for i = 1 to pos - 1 do
49273: LD_ADDR_VAR 0 5
49277: PUSH
49278: DOUBLE
49279: LD_INT 1
49281: DEC
49282: ST_TO_ADDR
49283: LD_VAR 0 2
49287: PUSH
49288: LD_INT 1
49290: MINUS
49291: PUSH
49292: FOR_TO
49293: IFFALSE 49338
// begin tmp := tmp [ pos [ i ] ] ;
49295: LD_ADDR_VAR 0 6
49299: PUSH
49300: LD_VAR 0 6
49304: PUSH
49305: LD_VAR 0 2
49309: PUSH
49310: LD_VAR 0 5
49314: ARRAY
49315: ARRAY
49316: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
49317: LD_ADDR_VAR 0 7
49321: PUSH
49322: LD_VAR 0 7
49326: PUSH
49327: LD_VAR 0 6
49331: PUSH
49332: EMPTY
49333: LIST
49334: ADD
49335: ST_TO_ADDR
// end ;
49336: GO 49292
49338: POP
49339: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
49340: LD_ADDR_VAR 0 6
49344: PUSH
49345: LD_VAR 0 6
49349: PPUSH
49350: LD_VAR 0 2
49354: PUSH
49355: LD_VAR 0 2
49359: ARRAY
49360: PPUSH
49361: LD_VAR 0 3
49365: PPUSH
49366: CALL_OW 1
49370: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
49371: LD_ADDR_VAR 0 7
49375: PUSH
49376: LD_VAR 0 7
49380: PPUSH
49381: LD_VAR 0 7
49385: PPUSH
49386: LD_VAR 0 6
49390: PPUSH
49391: CALL_OW 1
49395: ST_TO_ADDR
// for i = s_arr downto 2 do
49396: LD_ADDR_VAR 0 5
49400: PUSH
49401: DOUBLE
49402: LD_VAR 0 7
49406: INC
49407: ST_TO_ADDR
49408: LD_INT 2
49410: PUSH
49411: FOR_DOWNTO
49412: IFFALSE 49496
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
49414: LD_ADDR_VAR 0 6
49418: PUSH
49419: LD_VAR 0 7
49423: PUSH
49424: LD_VAR 0 5
49428: PUSH
49429: LD_INT 1
49431: MINUS
49432: ARRAY
49433: PPUSH
49434: LD_VAR 0 2
49438: PUSH
49439: LD_VAR 0 5
49443: PUSH
49444: LD_INT 1
49446: MINUS
49447: ARRAY
49448: PPUSH
49449: LD_VAR 0 7
49453: PUSH
49454: LD_VAR 0 5
49458: ARRAY
49459: PPUSH
49460: CALL_OW 1
49464: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
49465: LD_ADDR_VAR 0 7
49469: PUSH
49470: LD_VAR 0 7
49474: PPUSH
49475: LD_VAR 0 5
49479: PUSH
49480: LD_INT 1
49482: MINUS
49483: PPUSH
49484: LD_VAR 0 6
49488: PPUSH
49489: CALL_OW 1
49493: ST_TO_ADDR
// end ;
49494: GO 49411
49496: POP
49497: POP
// result := s_arr [ 1 ] ;
49498: LD_ADDR_VAR 0 4
49502: PUSH
49503: LD_VAR 0 7
49507: PUSH
49508: LD_INT 1
49510: ARRAY
49511: ST_TO_ADDR
// end ; end ;
49512: LD_VAR 0 4
49516: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
49517: LD_INT 0
49519: PPUSH
49520: PPUSH
// if not list then
49521: LD_VAR 0 1
49525: NOT
49526: IFFALSE 49530
// exit ;
49528: GO 49621
// i := list [ pos1 ] ;
49530: LD_ADDR_VAR 0 5
49534: PUSH
49535: LD_VAR 0 1
49539: PUSH
49540: LD_VAR 0 2
49544: ARRAY
49545: ST_TO_ADDR
// if not i then
49546: LD_VAR 0 5
49550: NOT
49551: IFFALSE 49555
// exit ;
49553: GO 49621
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
49555: LD_ADDR_VAR 0 1
49559: PUSH
49560: LD_VAR 0 1
49564: PPUSH
49565: LD_VAR 0 2
49569: PPUSH
49570: LD_VAR 0 1
49574: PUSH
49575: LD_VAR 0 3
49579: ARRAY
49580: PPUSH
49581: CALL_OW 1
49585: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
49586: LD_ADDR_VAR 0 1
49590: PUSH
49591: LD_VAR 0 1
49595: PPUSH
49596: LD_VAR 0 3
49600: PPUSH
49601: LD_VAR 0 5
49605: PPUSH
49606: CALL_OW 1
49610: ST_TO_ADDR
// result := list ;
49611: LD_ADDR_VAR 0 4
49615: PUSH
49616: LD_VAR 0 1
49620: ST_TO_ADDR
// end ;
49621: LD_VAR 0 4
49625: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
49626: LD_INT 0
49628: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
49629: LD_ADDR_VAR 0 5
49633: PUSH
49634: LD_VAR 0 1
49638: PPUSH
49639: CALL_OW 250
49643: PPUSH
49644: LD_VAR 0 1
49648: PPUSH
49649: CALL_OW 251
49653: PPUSH
49654: LD_VAR 0 2
49658: PPUSH
49659: LD_VAR 0 3
49663: PPUSH
49664: LD_VAR 0 4
49668: PPUSH
49669: CALL 49679 0 5
49673: ST_TO_ADDR
// end ;
49674: LD_VAR 0 5
49678: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49679: LD_INT 0
49681: PPUSH
49682: PPUSH
49683: PPUSH
49684: PPUSH
// if not list then
49685: LD_VAR 0 3
49689: NOT
49690: IFFALSE 49694
// exit ;
49692: GO 50082
// result := [ ] ;
49694: LD_ADDR_VAR 0 6
49698: PUSH
49699: EMPTY
49700: ST_TO_ADDR
// for i in list do
49701: LD_ADDR_VAR 0 7
49705: PUSH
49706: LD_VAR 0 3
49710: PUSH
49711: FOR_IN
49712: IFFALSE 49914
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49714: LD_ADDR_VAR 0 9
49718: PUSH
49719: LD_VAR 0 7
49723: PPUSH
49724: LD_VAR 0 1
49728: PPUSH
49729: LD_VAR 0 2
49733: PPUSH
49734: CALL_OW 297
49738: ST_TO_ADDR
// if not result then
49739: LD_VAR 0 6
49743: NOT
49744: IFFALSE 49770
// result := [ [ i , tmp ] ] else
49746: LD_ADDR_VAR 0 6
49750: PUSH
49751: LD_VAR 0 7
49755: PUSH
49756: LD_VAR 0 9
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: EMPTY
49766: LIST
49767: ST_TO_ADDR
49768: GO 49912
// begin if result [ result ] [ 2 ] < tmp then
49770: LD_VAR 0 6
49774: PUSH
49775: LD_VAR 0 6
49779: ARRAY
49780: PUSH
49781: LD_INT 2
49783: ARRAY
49784: PUSH
49785: LD_VAR 0 9
49789: LESS
49790: IFFALSE 49832
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
49792: LD_ADDR_VAR 0 6
49796: PUSH
49797: LD_VAR 0 6
49801: PPUSH
49802: LD_VAR 0 6
49806: PUSH
49807: LD_INT 1
49809: PLUS
49810: PPUSH
49811: LD_VAR 0 7
49815: PUSH
49816: LD_VAR 0 9
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PPUSH
49825: CALL_OW 2
49829: ST_TO_ADDR
49830: GO 49912
// for j = 1 to result do
49832: LD_ADDR_VAR 0 8
49836: PUSH
49837: DOUBLE
49838: LD_INT 1
49840: DEC
49841: ST_TO_ADDR
49842: LD_VAR 0 6
49846: PUSH
49847: FOR_TO
49848: IFFALSE 49910
// begin if tmp < result [ j ] [ 2 ] then
49850: LD_VAR 0 9
49854: PUSH
49855: LD_VAR 0 6
49859: PUSH
49860: LD_VAR 0 8
49864: ARRAY
49865: PUSH
49866: LD_INT 2
49868: ARRAY
49869: LESS
49870: IFFALSE 49908
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49872: LD_ADDR_VAR 0 6
49876: PUSH
49877: LD_VAR 0 6
49881: PPUSH
49882: LD_VAR 0 8
49886: PPUSH
49887: LD_VAR 0 7
49891: PUSH
49892: LD_VAR 0 9
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PPUSH
49901: CALL_OW 2
49905: ST_TO_ADDR
// break ;
49906: GO 49910
// end ; end ;
49908: GO 49847
49910: POP
49911: POP
// end ; end ;
49912: GO 49711
49914: POP
49915: POP
// if result and not asc then
49916: LD_VAR 0 6
49920: PUSH
49921: LD_VAR 0 4
49925: NOT
49926: AND
49927: IFFALSE 50002
// begin tmp := result ;
49929: LD_ADDR_VAR 0 9
49933: PUSH
49934: LD_VAR 0 6
49938: ST_TO_ADDR
// for i = tmp downto 1 do
49939: LD_ADDR_VAR 0 7
49943: PUSH
49944: DOUBLE
49945: LD_VAR 0 9
49949: INC
49950: ST_TO_ADDR
49951: LD_INT 1
49953: PUSH
49954: FOR_DOWNTO
49955: IFFALSE 50000
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
49957: LD_ADDR_VAR 0 6
49961: PUSH
49962: LD_VAR 0 6
49966: PPUSH
49967: LD_VAR 0 9
49971: PUSH
49972: LD_VAR 0 7
49976: MINUS
49977: PUSH
49978: LD_INT 1
49980: PLUS
49981: PPUSH
49982: LD_VAR 0 9
49986: PUSH
49987: LD_VAR 0 7
49991: ARRAY
49992: PPUSH
49993: CALL_OW 1
49997: ST_TO_ADDR
49998: GO 49954
50000: POP
50001: POP
// end ; tmp := [ ] ;
50002: LD_ADDR_VAR 0 9
50006: PUSH
50007: EMPTY
50008: ST_TO_ADDR
// if mode then
50009: LD_VAR 0 5
50013: IFFALSE 50082
// begin for i = 1 to result do
50015: LD_ADDR_VAR 0 7
50019: PUSH
50020: DOUBLE
50021: LD_INT 1
50023: DEC
50024: ST_TO_ADDR
50025: LD_VAR 0 6
50029: PUSH
50030: FOR_TO
50031: IFFALSE 50070
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
50033: LD_ADDR_VAR 0 9
50037: PUSH
50038: LD_VAR 0 9
50042: PPUSH
50043: LD_VAR 0 7
50047: PPUSH
50048: LD_VAR 0 6
50052: PUSH
50053: LD_VAR 0 7
50057: ARRAY
50058: PUSH
50059: LD_INT 1
50061: ARRAY
50062: PPUSH
50063: CALL_OW 1
50067: ST_TO_ADDR
50068: GO 50030
50070: POP
50071: POP
// result := tmp ;
50072: LD_ADDR_VAR 0 6
50076: PUSH
50077: LD_VAR 0 9
50081: ST_TO_ADDR
// end ; end ;
50082: LD_VAR 0 6
50086: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
50087: LD_INT 0
50089: PPUSH
50090: PPUSH
50091: PPUSH
50092: PPUSH
50093: PPUSH
50094: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
50095: LD_ADDR_VAR 0 5
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: EMPTY
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: ST_TO_ADDR
// if not x or not y then
50117: LD_VAR 0 2
50121: NOT
50122: PUSH
50123: LD_VAR 0 3
50127: NOT
50128: OR
50129: IFFALSE 50133
// exit ;
50131: GO 51779
// if not range then
50133: LD_VAR 0 4
50137: NOT
50138: IFFALSE 50148
// range := 10 ;
50140: LD_ADDR_VAR 0 4
50144: PUSH
50145: LD_INT 10
50147: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
50148: LD_ADDR_VAR 0 8
50152: PUSH
50153: LD_INT 81
50155: PUSH
50156: LD_VAR 0 1
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 92
50167: PUSH
50168: LD_VAR 0 2
50172: PUSH
50173: LD_VAR 0 3
50177: PUSH
50178: LD_VAR 0 4
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 3
50191: PUSH
50192: LD_INT 21
50194: PUSH
50195: LD_INT 3
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: LIST
50210: PPUSH
50211: CALL_OW 69
50215: ST_TO_ADDR
// if not tmp then
50216: LD_VAR 0 8
50220: NOT
50221: IFFALSE 50225
// exit ;
50223: GO 51779
// for i in tmp do
50225: LD_ADDR_VAR 0 6
50229: PUSH
50230: LD_VAR 0 8
50234: PUSH
50235: FOR_IN
50236: IFFALSE 51754
// begin points := [ 0 , 0 , 0 ] ;
50238: LD_ADDR_VAR 0 9
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: LIST
50256: ST_TO_ADDR
// bpoints := 1 ;
50257: LD_ADDR_VAR 0 10
50261: PUSH
50262: LD_INT 1
50264: ST_TO_ADDR
// case GetType ( i ) of unit_human :
50265: LD_VAR 0 6
50269: PPUSH
50270: CALL_OW 247
50274: PUSH
50275: LD_INT 1
50277: DOUBLE
50278: EQUAL
50279: IFTRUE 50283
50281: GO 50861
50283: POP
// begin if GetClass ( i ) = 1 then
50284: LD_VAR 0 6
50288: PPUSH
50289: CALL_OW 257
50293: PUSH
50294: LD_INT 1
50296: EQUAL
50297: IFFALSE 50318
// points := [ 10 , 5 , 3 ] ;
50299: LD_ADDR_VAR 0 9
50303: PUSH
50304: LD_INT 10
50306: PUSH
50307: LD_INT 5
50309: PUSH
50310: LD_INT 3
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: LIST
50317: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
50318: LD_VAR 0 6
50322: PPUSH
50323: CALL_OW 257
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: LD_INT 3
50333: PUSH
50334: LD_INT 4
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: LIST
50341: IN
50342: IFFALSE 50363
// points := [ 3 , 2 , 1 ] ;
50344: LD_ADDR_VAR 0 9
50348: PUSH
50349: LD_INT 3
50351: PUSH
50352: LD_INT 2
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: LIST
50362: ST_TO_ADDR
// if GetClass ( i ) = 5 then
50363: LD_VAR 0 6
50367: PPUSH
50368: CALL_OW 257
50372: PUSH
50373: LD_INT 5
50375: EQUAL
50376: IFFALSE 50397
// points := [ 130 , 5 , 2 ] ;
50378: LD_ADDR_VAR 0 9
50382: PUSH
50383: LD_INT 130
50385: PUSH
50386: LD_INT 5
50388: PUSH
50389: LD_INT 2
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: LIST
50396: ST_TO_ADDR
// if GetClass ( i ) = 8 then
50397: LD_VAR 0 6
50401: PPUSH
50402: CALL_OW 257
50406: PUSH
50407: LD_INT 8
50409: EQUAL
50410: IFFALSE 50431
// points := [ 35 , 35 , 30 ] ;
50412: LD_ADDR_VAR 0 9
50416: PUSH
50417: LD_INT 35
50419: PUSH
50420: LD_INT 35
50422: PUSH
50423: LD_INT 30
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: LIST
50430: ST_TO_ADDR
// if GetClass ( i ) = 9 then
50431: LD_VAR 0 6
50435: PPUSH
50436: CALL_OW 257
50440: PUSH
50441: LD_INT 9
50443: EQUAL
50444: IFFALSE 50465
// points := [ 20 , 55 , 40 ] ;
50446: LD_ADDR_VAR 0 9
50450: PUSH
50451: LD_INT 20
50453: PUSH
50454: LD_INT 55
50456: PUSH
50457: LD_INT 40
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: LIST
50464: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
50465: LD_VAR 0 6
50469: PPUSH
50470: CALL_OW 257
50474: PUSH
50475: LD_INT 12
50477: PUSH
50478: LD_INT 16
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: IN
50485: IFFALSE 50506
// points := [ 5 , 3 , 2 ] ;
50487: LD_ADDR_VAR 0 9
50491: PUSH
50492: LD_INT 5
50494: PUSH
50495: LD_INT 3
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: LIST
50505: ST_TO_ADDR
// if GetClass ( i ) = 17 then
50506: LD_VAR 0 6
50510: PPUSH
50511: CALL_OW 257
50515: PUSH
50516: LD_INT 17
50518: EQUAL
50519: IFFALSE 50540
// points := [ 100 , 50 , 75 ] ;
50521: LD_ADDR_VAR 0 9
50525: PUSH
50526: LD_INT 100
50528: PUSH
50529: LD_INT 50
50531: PUSH
50532: LD_INT 75
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: LIST
50539: ST_TO_ADDR
// if GetClass ( i ) = 15 then
50540: LD_VAR 0 6
50544: PPUSH
50545: CALL_OW 257
50549: PUSH
50550: LD_INT 15
50552: EQUAL
50553: IFFALSE 50574
// points := [ 10 , 5 , 3 ] ;
50555: LD_ADDR_VAR 0 9
50559: PUSH
50560: LD_INT 10
50562: PUSH
50563: LD_INT 5
50565: PUSH
50566: LD_INT 3
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: LIST
50573: ST_TO_ADDR
// if GetClass ( i ) = 14 then
50574: LD_VAR 0 6
50578: PPUSH
50579: CALL_OW 257
50583: PUSH
50584: LD_INT 14
50586: EQUAL
50587: IFFALSE 50608
// points := [ 10 , 0 , 0 ] ;
50589: LD_ADDR_VAR 0 9
50593: PUSH
50594: LD_INT 10
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: LIST
50607: ST_TO_ADDR
// if GetClass ( i ) = 11 then
50608: LD_VAR 0 6
50612: PPUSH
50613: CALL_OW 257
50617: PUSH
50618: LD_INT 11
50620: EQUAL
50621: IFFALSE 50642
// points := [ 30 , 10 , 5 ] ;
50623: LD_ADDR_VAR 0 9
50627: PUSH
50628: LD_INT 30
50630: PUSH
50631: LD_INT 10
50633: PUSH
50634: LD_INT 5
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: LIST
50641: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50642: LD_VAR 0 1
50646: PPUSH
50647: LD_INT 5
50649: PPUSH
50650: CALL_OW 321
50654: PUSH
50655: LD_INT 2
50657: EQUAL
50658: IFFALSE 50675
// bpoints := bpoints * 1.8 ;
50660: LD_ADDR_VAR 0 10
50664: PUSH
50665: LD_VAR 0 10
50669: PUSH
50670: LD_REAL  1.80000000000000E+0000
50673: MUL
50674: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50675: LD_VAR 0 6
50679: PPUSH
50680: CALL_OW 257
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: LD_INT 2
50690: PUSH
50691: LD_INT 3
50693: PUSH
50694: LD_INT 4
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: IN
50703: PUSH
50704: LD_VAR 0 1
50708: PPUSH
50709: LD_INT 51
50711: PPUSH
50712: CALL_OW 321
50716: PUSH
50717: LD_INT 2
50719: EQUAL
50720: AND
50721: IFFALSE 50738
// bpoints := bpoints * 1.2 ;
50723: LD_ADDR_VAR 0 10
50727: PUSH
50728: LD_VAR 0 10
50732: PUSH
50733: LD_REAL  1.20000000000000E+0000
50736: MUL
50737: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50738: LD_VAR 0 6
50742: PPUSH
50743: CALL_OW 257
50747: PUSH
50748: LD_INT 5
50750: PUSH
50751: LD_INT 7
50753: PUSH
50754: LD_INT 9
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: LIST
50761: IN
50762: PUSH
50763: LD_VAR 0 1
50767: PPUSH
50768: LD_INT 52
50770: PPUSH
50771: CALL_OW 321
50775: PUSH
50776: LD_INT 2
50778: EQUAL
50779: AND
50780: IFFALSE 50797
// bpoints := bpoints * 1.5 ;
50782: LD_ADDR_VAR 0 10
50786: PUSH
50787: LD_VAR 0 10
50791: PUSH
50792: LD_REAL  1.50000000000000E+0000
50795: MUL
50796: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
50797: LD_VAR 0 1
50801: PPUSH
50802: LD_INT 66
50804: PPUSH
50805: CALL_OW 321
50809: PUSH
50810: LD_INT 2
50812: EQUAL
50813: IFFALSE 50830
// bpoints := bpoints * 1.1 ;
50815: LD_ADDR_VAR 0 10
50819: PUSH
50820: LD_VAR 0 10
50824: PUSH
50825: LD_REAL  1.10000000000000E+0000
50828: MUL
50829: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
50830: LD_ADDR_VAR 0 10
50834: PUSH
50835: LD_VAR 0 10
50839: PUSH
50840: LD_VAR 0 6
50844: PPUSH
50845: LD_INT 1
50847: PPUSH
50848: CALL_OW 259
50852: PUSH
50853: LD_REAL  1.15000000000000E+0000
50856: MUL
50857: MUL
50858: ST_TO_ADDR
// end ; unit_vehicle :
50859: GO 51683
50861: LD_INT 2
50863: DOUBLE
50864: EQUAL
50865: IFTRUE 50869
50867: GO 51671
50869: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
50870: LD_VAR 0 6
50874: PPUSH
50875: CALL_OW 264
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: LD_INT 42
50885: PUSH
50886: LD_INT 24
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: LIST
50893: IN
50894: IFFALSE 50915
// points := [ 25 , 5 , 3 ] ;
50896: LD_ADDR_VAR 0 9
50900: PUSH
50901: LD_INT 25
50903: PUSH
50904: LD_INT 5
50906: PUSH
50907: LD_INT 3
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: LIST
50914: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
50915: LD_VAR 0 6
50919: PPUSH
50920: CALL_OW 264
50924: PUSH
50925: LD_INT 4
50927: PUSH
50928: LD_INT 43
50930: PUSH
50931: LD_INT 25
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: LIST
50938: IN
50939: IFFALSE 50960
// points := [ 40 , 15 , 5 ] ;
50941: LD_ADDR_VAR 0 9
50945: PUSH
50946: LD_INT 40
50948: PUSH
50949: LD_INT 15
50951: PUSH
50952: LD_INT 5
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: LIST
50959: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
50960: LD_VAR 0 6
50964: PPUSH
50965: CALL_OW 264
50969: PUSH
50970: LD_INT 3
50972: PUSH
50973: LD_INT 23
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: IN
50980: IFFALSE 51001
// points := [ 7 , 25 , 8 ] ;
50982: LD_ADDR_VAR 0 9
50986: PUSH
50987: LD_INT 7
50989: PUSH
50990: LD_INT 25
50992: PUSH
50993: LD_INT 8
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: LIST
51000: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
51001: LD_VAR 0 6
51005: PPUSH
51006: CALL_OW 264
51010: PUSH
51011: LD_INT 5
51013: PUSH
51014: LD_INT 27
51016: PUSH
51017: LD_INT 44
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: LIST
51024: IN
51025: IFFALSE 51046
// points := [ 14 , 50 , 16 ] ;
51027: LD_ADDR_VAR 0 9
51031: PUSH
51032: LD_INT 14
51034: PUSH
51035: LD_INT 50
51037: PUSH
51038: LD_INT 16
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: LIST
51045: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
51046: LD_VAR 0 6
51050: PPUSH
51051: CALL_OW 264
51055: PUSH
51056: LD_INT 6
51058: PUSH
51059: LD_INT 46
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: IN
51066: IFFALSE 51087
// points := [ 32 , 120 , 70 ] ;
51068: LD_ADDR_VAR 0 9
51072: PUSH
51073: LD_INT 32
51075: PUSH
51076: LD_INT 120
51078: PUSH
51079: LD_INT 70
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: LIST
51086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
51087: LD_VAR 0 6
51091: PPUSH
51092: CALL_OW 264
51096: PUSH
51097: LD_INT 7
51099: PUSH
51100: LD_INT 28
51102: PUSH
51103: LD_INT 45
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: LIST
51110: IN
51111: IFFALSE 51132
// points := [ 35 , 20 , 45 ] ;
51113: LD_ADDR_VAR 0 9
51117: PUSH
51118: LD_INT 35
51120: PUSH
51121: LD_INT 20
51123: PUSH
51124: LD_INT 45
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: LIST
51131: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
51132: LD_VAR 0 6
51136: PPUSH
51137: CALL_OW 264
51141: PUSH
51142: LD_INT 47
51144: PUSH
51145: EMPTY
51146: LIST
51147: IN
51148: IFFALSE 51169
// points := [ 67 , 45 , 75 ] ;
51150: LD_ADDR_VAR 0 9
51154: PUSH
51155: LD_INT 67
51157: PUSH
51158: LD_INT 45
51160: PUSH
51161: LD_INT 75
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: LIST
51168: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
51169: LD_VAR 0 6
51173: PPUSH
51174: CALL_OW 264
51178: PUSH
51179: LD_INT 26
51181: PUSH
51182: EMPTY
51183: LIST
51184: IN
51185: IFFALSE 51206
// points := [ 120 , 30 , 80 ] ;
51187: LD_ADDR_VAR 0 9
51191: PUSH
51192: LD_INT 120
51194: PUSH
51195: LD_INT 30
51197: PUSH
51198: LD_INT 80
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: LIST
51205: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
51206: LD_VAR 0 6
51210: PPUSH
51211: CALL_OW 264
51215: PUSH
51216: LD_INT 22
51218: PUSH
51219: EMPTY
51220: LIST
51221: IN
51222: IFFALSE 51243
// points := [ 40 , 1 , 1 ] ;
51224: LD_ADDR_VAR 0 9
51228: PUSH
51229: LD_INT 40
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: LIST
51242: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
51243: LD_VAR 0 6
51247: PPUSH
51248: CALL_OW 264
51252: PUSH
51253: LD_INT 29
51255: PUSH
51256: EMPTY
51257: LIST
51258: IN
51259: IFFALSE 51280
// points := [ 70 , 200 , 400 ] ;
51261: LD_ADDR_VAR 0 9
51265: PUSH
51266: LD_INT 70
51268: PUSH
51269: LD_INT 200
51271: PUSH
51272: LD_INT 400
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: LIST
51279: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
51280: LD_VAR 0 6
51284: PPUSH
51285: CALL_OW 264
51289: PUSH
51290: LD_INT 14
51292: PUSH
51293: LD_INT 53
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: IN
51300: IFFALSE 51321
// points := [ 40 , 10 , 20 ] ;
51302: LD_ADDR_VAR 0 9
51306: PUSH
51307: LD_INT 40
51309: PUSH
51310: LD_INT 10
51312: PUSH
51313: LD_INT 20
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: LIST
51320: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
51321: LD_VAR 0 6
51325: PPUSH
51326: CALL_OW 264
51330: PUSH
51331: LD_INT 9
51333: PUSH
51334: EMPTY
51335: LIST
51336: IN
51337: IFFALSE 51358
// points := [ 5 , 70 , 20 ] ;
51339: LD_ADDR_VAR 0 9
51343: PUSH
51344: LD_INT 5
51346: PUSH
51347: LD_INT 70
51349: PUSH
51350: LD_INT 20
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: LIST
51357: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
51358: LD_VAR 0 6
51362: PPUSH
51363: CALL_OW 264
51367: PUSH
51368: LD_INT 10
51370: PUSH
51371: EMPTY
51372: LIST
51373: IN
51374: IFFALSE 51395
// points := [ 35 , 110 , 70 ] ;
51376: LD_ADDR_VAR 0 9
51380: PUSH
51381: LD_INT 35
51383: PUSH
51384: LD_INT 110
51386: PUSH
51387: LD_INT 70
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: LIST
51394: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
51395: LD_VAR 0 6
51399: PPUSH
51400: CALL_OW 265
51404: PUSH
51405: LD_INT 25
51407: EQUAL
51408: IFFALSE 51429
// points := [ 80 , 65 , 100 ] ;
51410: LD_ADDR_VAR 0 9
51414: PUSH
51415: LD_INT 80
51417: PUSH
51418: LD_INT 65
51420: PUSH
51421: LD_INT 100
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: LIST
51428: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
51429: LD_VAR 0 6
51433: PPUSH
51434: CALL_OW 263
51438: PUSH
51439: LD_INT 1
51441: EQUAL
51442: IFFALSE 51477
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
51444: LD_ADDR_VAR 0 10
51448: PUSH
51449: LD_VAR 0 10
51453: PUSH
51454: LD_VAR 0 6
51458: PPUSH
51459: CALL_OW 311
51463: PPUSH
51464: LD_INT 3
51466: PPUSH
51467: CALL_OW 259
51471: PUSH
51472: LD_INT 4
51474: MUL
51475: MUL
51476: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
51477: LD_VAR 0 6
51481: PPUSH
51482: CALL_OW 263
51486: PUSH
51487: LD_INT 2
51489: EQUAL
51490: IFFALSE 51541
// begin j := IsControledBy ( i ) ;
51492: LD_ADDR_VAR 0 7
51496: PUSH
51497: LD_VAR 0 6
51501: PPUSH
51502: CALL_OW 312
51506: ST_TO_ADDR
// if j then
51507: LD_VAR 0 7
51511: IFFALSE 51541
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
51513: LD_ADDR_VAR 0 10
51517: PUSH
51518: LD_VAR 0 10
51522: PUSH
51523: LD_VAR 0 7
51527: PPUSH
51528: LD_INT 3
51530: PPUSH
51531: CALL_OW 259
51535: PUSH
51536: LD_INT 3
51538: MUL
51539: MUL
51540: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
51541: LD_VAR 0 6
51545: PPUSH
51546: CALL_OW 264
51550: PUSH
51551: LD_INT 5
51553: PUSH
51554: LD_INT 6
51556: PUSH
51557: LD_INT 46
51559: PUSH
51560: LD_INT 44
51562: PUSH
51563: LD_INT 47
51565: PUSH
51566: LD_INT 45
51568: PUSH
51569: LD_INT 28
51571: PUSH
51572: LD_INT 7
51574: PUSH
51575: LD_INT 27
51577: PUSH
51578: LD_INT 29
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: IN
51593: PUSH
51594: LD_VAR 0 1
51598: PPUSH
51599: LD_INT 52
51601: PPUSH
51602: CALL_OW 321
51606: PUSH
51607: LD_INT 2
51609: EQUAL
51610: AND
51611: IFFALSE 51628
// bpoints := bpoints * 1.2 ;
51613: LD_ADDR_VAR 0 10
51617: PUSH
51618: LD_VAR 0 10
51622: PUSH
51623: LD_REAL  1.20000000000000E+0000
51626: MUL
51627: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51628: LD_VAR 0 6
51632: PPUSH
51633: CALL_OW 264
51637: PUSH
51638: LD_INT 6
51640: PUSH
51641: LD_INT 46
51643: PUSH
51644: LD_INT 47
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: LIST
51651: IN
51652: IFFALSE 51669
// bpoints := bpoints * 1.2 ;
51654: LD_ADDR_VAR 0 10
51658: PUSH
51659: LD_VAR 0 10
51663: PUSH
51664: LD_REAL  1.20000000000000E+0000
51667: MUL
51668: ST_TO_ADDR
// end ; unit_building :
51669: GO 51683
51671: LD_INT 3
51673: DOUBLE
51674: EQUAL
51675: IFTRUE 51679
51677: GO 51682
51679: POP
// ; end ;
51680: GO 51683
51682: POP
// for j = 1 to 3 do
51683: LD_ADDR_VAR 0 7
51687: PUSH
51688: DOUBLE
51689: LD_INT 1
51691: DEC
51692: ST_TO_ADDR
51693: LD_INT 3
51695: PUSH
51696: FOR_TO
51697: IFFALSE 51750
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51699: LD_ADDR_VAR 0 5
51703: PUSH
51704: LD_VAR 0 5
51708: PPUSH
51709: LD_VAR 0 7
51713: PPUSH
51714: LD_VAR 0 5
51718: PUSH
51719: LD_VAR 0 7
51723: ARRAY
51724: PUSH
51725: LD_VAR 0 9
51729: PUSH
51730: LD_VAR 0 7
51734: ARRAY
51735: PUSH
51736: LD_VAR 0 10
51740: MUL
51741: PLUS
51742: PPUSH
51743: CALL_OW 1
51747: ST_TO_ADDR
51748: GO 51696
51750: POP
51751: POP
// end ;
51752: GO 50235
51754: POP
51755: POP
// result := Replace ( result , 4 , tmp ) ;
51756: LD_ADDR_VAR 0 5
51760: PUSH
51761: LD_VAR 0 5
51765: PPUSH
51766: LD_INT 4
51768: PPUSH
51769: LD_VAR 0 8
51773: PPUSH
51774: CALL_OW 1
51778: ST_TO_ADDR
// end ;
51779: LD_VAR 0 5
51783: RET
// export function DangerAtRange ( unit , range ) ; begin
51784: LD_INT 0
51786: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
51787: LD_ADDR_VAR 0 3
51791: PUSH
51792: LD_VAR 0 1
51796: PPUSH
51797: CALL_OW 255
51801: PPUSH
51802: LD_VAR 0 1
51806: PPUSH
51807: CALL_OW 250
51811: PPUSH
51812: LD_VAR 0 1
51816: PPUSH
51817: CALL_OW 251
51821: PPUSH
51822: LD_VAR 0 2
51826: PPUSH
51827: CALL 50087 0 4
51831: ST_TO_ADDR
// end ;
51832: LD_VAR 0 3
51836: RET
// export function DangerInArea ( side , area ) ; begin
51837: LD_INT 0
51839: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
51840: LD_ADDR_VAR 0 3
51844: PUSH
51845: LD_VAR 0 2
51849: PPUSH
51850: LD_INT 81
51852: PUSH
51853: LD_VAR 0 1
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PPUSH
51862: CALL_OW 70
51866: ST_TO_ADDR
// end ;
51867: LD_VAR 0 3
51871: RET
// export function IsExtension ( b ) ; begin
51872: LD_INT 0
51874: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
51875: LD_ADDR_VAR 0 2
51879: PUSH
51880: LD_VAR 0 1
51884: PUSH
51885: LD_INT 23
51887: PUSH
51888: LD_INT 20
51890: PUSH
51891: LD_INT 22
51893: PUSH
51894: LD_INT 17
51896: PUSH
51897: LD_INT 24
51899: PUSH
51900: LD_INT 21
51902: PUSH
51903: LD_INT 19
51905: PUSH
51906: LD_INT 16
51908: PUSH
51909: LD_INT 25
51911: PUSH
51912: LD_INT 18
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: IN
51927: ST_TO_ADDR
// end ;
51928: LD_VAR 0 2
51932: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
51933: LD_INT 0
51935: PPUSH
51936: PPUSH
51937: PPUSH
// result := [ ] ;
51938: LD_ADDR_VAR 0 4
51942: PUSH
51943: EMPTY
51944: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
51945: LD_ADDR_VAR 0 5
51949: PUSH
51950: LD_VAR 0 2
51954: PPUSH
51955: LD_INT 21
51957: PUSH
51958: LD_INT 3
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PPUSH
51965: CALL_OW 70
51969: ST_TO_ADDR
// if not tmp then
51970: LD_VAR 0 5
51974: NOT
51975: IFFALSE 51979
// exit ;
51977: GO 52043
// if checkLink then
51979: LD_VAR 0 3
51983: IFFALSE 52033
// begin for i in tmp do
51985: LD_ADDR_VAR 0 6
51989: PUSH
51990: LD_VAR 0 5
51994: PUSH
51995: FOR_IN
51996: IFFALSE 52031
// if GetBase ( i ) <> base then
51998: LD_VAR 0 6
52002: PPUSH
52003: CALL_OW 274
52007: PUSH
52008: LD_VAR 0 1
52012: NONEQUAL
52013: IFFALSE 52029
// ComLinkToBase ( base , i ) ;
52015: LD_VAR 0 1
52019: PPUSH
52020: LD_VAR 0 6
52024: PPUSH
52025: CALL_OW 169
52029: GO 51995
52031: POP
52032: POP
// end ; result := tmp ;
52033: LD_ADDR_VAR 0 4
52037: PUSH
52038: LD_VAR 0 5
52042: ST_TO_ADDR
// end ;
52043: LD_VAR 0 4
52047: RET
// export function ComComplete ( units , b ) ; var i ; begin
52048: LD_INT 0
52050: PPUSH
52051: PPUSH
// if not units then
52052: LD_VAR 0 1
52056: NOT
52057: IFFALSE 52061
// exit ;
52059: GO 52151
// for i in units do
52061: LD_ADDR_VAR 0 4
52065: PUSH
52066: LD_VAR 0 1
52070: PUSH
52071: FOR_IN
52072: IFFALSE 52149
// if BuildingStatus ( b ) = bs_build then
52074: LD_VAR 0 2
52078: PPUSH
52079: CALL_OW 461
52083: PUSH
52084: LD_INT 1
52086: EQUAL
52087: IFFALSE 52147
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
52089: LD_VAR 0 4
52093: PPUSH
52094: LD_STRING h
52096: PUSH
52097: LD_VAR 0 2
52101: PPUSH
52102: CALL_OW 250
52106: PUSH
52107: LD_VAR 0 2
52111: PPUSH
52112: CALL_OW 251
52116: PUSH
52117: LD_VAR 0 2
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: PUSH
52140: EMPTY
52141: LIST
52142: PPUSH
52143: CALL_OW 446
52147: GO 52071
52149: POP
52150: POP
// end ;
52151: LD_VAR 0 3
52155: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
52156: LD_INT 0
52158: PPUSH
52159: PPUSH
52160: PPUSH
52161: PPUSH
52162: PPUSH
52163: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
52164: LD_VAR 0 1
52168: NOT
52169: PUSH
52170: LD_VAR 0 1
52174: PPUSH
52175: CALL_OW 263
52179: PUSH
52180: LD_INT 2
52182: EQUAL
52183: NOT
52184: OR
52185: IFFALSE 52189
// exit ;
52187: GO 52505
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
52189: LD_ADDR_VAR 0 6
52193: PUSH
52194: LD_INT 22
52196: PUSH
52197: LD_VAR 0 1
52201: PPUSH
52202: CALL_OW 255
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 2
52213: PUSH
52214: LD_INT 30
52216: PUSH
52217: LD_INT 36
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 34
52226: PUSH
52227: LD_INT 31
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: LIST
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PPUSH
52243: CALL_OW 69
52247: ST_TO_ADDR
// if not tmp then
52248: LD_VAR 0 6
52252: NOT
52253: IFFALSE 52257
// exit ;
52255: GO 52505
// result := [ ] ;
52257: LD_ADDR_VAR 0 2
52261: PUSH
52262: EMPTY
52263: ST_TO_ADDR
// for i in tmp do
52264: LD_ADDR_VAR 0 3
52268: PUSH
52269: LD_VAR 0 6
52273: PUSH
52274: FOR_IN
52275: IFFALSE 52346
// begin t := UnitsInside ( i ) ;
52277: LD_ADDR_VAR 0 4
52281: PUSH
52282: LD_VAR 0 3
52286: PPUSH
52287: CALL_OW 313
52291: ST_TO_ADDR
// if t then
52292: LD_VAR 0 4
52296: IFFALSE 52344
// for j in t do
52298: LD_ADDR_VAR 0 7
52302: PUSH
52303: LD_VAR 0 4
52307: PUSH
52308: FOR_IN
52309: IFFALSE 52342
// result := Insert ( result , result + 1 , j ) ;
52311: LD_ADDR_VAR 0 2
52315: PUSH
52316: LD_VAR 0 2
52320: PPUSH
52321: LD_VAR 0 2
52325: PUSH
52326: LD_INT 1
52328: PLUS
52329: PPUSH
52330: LD_VAR 0 7
52334: PPUSH
52335: CALL_OW 2
52339: ST_TO_ADDR
52340: GO 52308
52342: POP
52343: POP
// end ;
52344: GO 52274
52346: POP
52347: POP
// if not result then
52348: LD_VAR 0 2
52352: NOT
52353: IFFALSE 52357
// exit ;
52355: GO 52505
// mech := result [ 1 ] ;
52357: LD_ADDR_VAR 0 5
52361: PUSH
52362: LD_VAR 0 2
52366: PUSH
52367: LD_INT 1
52369: ARRAY
52370: ST_TO_ADDR
// if result > 1 then
52371: LD_VAR 0 2
52375: PUSH
52376: LD_INT 1
52378: GREATER
52379: IFFALSE 52491
// for i = 2 to result do
52381: LD_ADDR_VAR 0 3
52385: PUSH
52386: DOUBLE
52387: LD_INT 2
52389: DEC
52390: ST_TO_ADDR
52391: LD_VAR 0 2
52395: PUSH
52396: FOR_TO
52397: IFFALSE 52489
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
52399: LD_ADDR_VAR 0 4
52403: PUSH
52404: LD_VAR 0 2
52408: PUSH
52409: LD_VAR 0 3
52413: ARRAY
52414: PPUSH
52415: LD_INT 3
52417: PPUSH
52418: CALL_OW 259
52422: PUSH
52423: LD_VAR 0 2
52427: PUSH
52428: LD_VAR 0 3
52432: ARRAY
52433: PPUSH
52434: CALL_OW 432
52438: MINUS
52439: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
52440: LD_VAR 0 4
52444: PUSH
52445: LD_VAR 0 5
52449: PPUSH
52450: LD_INT 3
52452: PPUSH
52453: CALL_OW 259
52457: PUSH
52458: LD_VAR 0 5
52462: PPUSH
52463: CALL_OW 432
52467: MINUS
52468: GREATEREQUAL
52469: IFFALSE 52487
// mech := result [ i ] ;
52471: LD_ADDR_VAR 0 5
52475: PUSH
52476: LD_VAR 0 2
52480: PUSH
52481: LD_VAR 0 3
52485: ARRAY
52486: ST_TO_ADDR
// end ;
52487: GO 52396
52489: POP
52490: POP
// ComLinkTo ( vehicle , mech ) ;
52491: LD_VAR 0 1
52495: PPUSH
52496: LD_VAR 0 5
52500: PPUSH
52501: CALL_OW 135
// end ;
52505: LD_VAR 0 2
52509: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
52510: LD_INT 0
52512: PPUSH
52513: PPUSH
52514: PPUSH
52515: PPUSH
52516: PPUSH
52517: PPUSH
52518: PPUSH
52519: PPUSH
52520: PPUSH
52521: PPUSH
52522: PPUSH
52523: PPUSH
52524: PPUSH
// result := [ ] ;
52525: LD_ADDR_VAR 0 7
52529: PUSH
52530: EMPTY
52531: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
52532: LD_VAR 0 1
52536: PPUSH
52537: CALL_OW 266
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: LD_INT 1
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: IN
52552: NOT
52553: IFFALSE 52557
// exit ;
52555: GO 54191
// if name then
52557: LD_VAR 0 3
52561: IFFALSE 52577
// SetBName ( base_dep , name ) ;
52563: LD_VAR 0 1
52567: PPUSH
52568: LD_VAR 0 3
52572: PPUSH
52573: CALL_OW 500
// base := GetBase ( base_dep ) ;
52577: LD_ADDR_VAR 0 15
52581: PUSH
52582: LD_VAR 0 1
52586: PPUSH
52587: CALL_OW 274
52591: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
52592: LD_ADDR_VAR 0 16
52596: PUSH
52597: LD_VAR 0 1
52601: PPUSH
52602: CALL_OW 255
52606: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
52607: LD_ADDR_VAR 0 17
52611: PUSH
52612: LD_VAR 0 1
52616: PPUSH
52617: CALL_OW 248
52621: ST_TO_ADDR
// if sources then
52622: LD_VAR 0 5
52626: IFFALSE 52673
// for i = 1 to 3 do
52628: LD_ADDR_VAR 0 8
52632: PUSH
52633: DOUBLE
52634: LD_INT 1
52636: DEC
52637: ST_TO_ADDR
52638: LD_INT 3
52640: PUSH
52641: FOR_TO
52642: IFFALSE 52671
// AddResourceType ( base , i , sources [ i ] ) ;
52644: LD_VAR 0 15
52648: PPUSH
52649: LD_VAR 0 8
52653: PPUSH
52654: LD_VAR 0 5
52658: PUSH
52659: LD_VAR 0 8
52663: ARRAY
52664: PPUSH
52665: CALL_OW 276
52669: GO 52641
52671: POP
52672: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
52673: LD_ADDR_VAR 0 18
52677: PUSH
52678: LD_VAR 0 15
52682: PPUSH
52683: LD_VAR 0 2
52687: PPUSH
52688: LD_INT 1
52690: PPUSH
52691: CALL 51933 0 3
52695: ST_TO_ADDR
// InitHc ;
52696: CALL_OW 19
// InitUc ;
52700: CALL_OW 18
// uc_side := side ;
52704: LD_ADDR_OWVAR 20
52708: PUSH
52709: LD_VAR 0 16
52713: ST_TO_ADDR
// uc_nation := nation ;
52714: LD_ADDR_OWVAR 21
52718: PUSH
52719: LD_VAR 0 17
52723: ST_TO_ADDR
// if buildings then
52724: LD_VAR 0 18
52728: IFFALSE 54050
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
52730: LD_ADDR_VAR 0 19
52734: PUSH
52735: LD_VAR 0 18
52739: PPUSH
52740: LD_INT 2
52742: PUSH
52743: LD_INT 30
52745: PUSH
52746: LD_INT 29
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 30
52755: PUSH
52756: LD_INT 30
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: LIST
52767: PPUSH
52768: CALL_OW 72
52772: ST_TO_ADDR
// if tmp then
52773: LD_VAR 0 19
52777: IFFALSE 52825
// for i in tmp do
52779: LD_ADDR_VAR 0 8
52783: PUSH
52784: LD_VAR 0 19
52788: PUSH
52789: FOR_IN
52790: IFFALSE 52823
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
52792: LD_VAR 0 8
52796: PPUSH
52797: CALL_OW 250
52801: PPUSH
52802: LD_VAR 0 8
52806: PPUSH
52807: CALL_OW 251
52811: PPUSH
52812: LD_VAR 0 16
52816: PPUSH
52817: CALL_OW 441
52821: GO 52789
52823: POP
52824: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
52825: LD_VAR 0 18
52829: PPUSH
52830: LD_INT 2
52832: PUSH
52833: LD_INT 30
52835: PUSH
52836: LD_INT 32
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 30
52845: PUSH
52846: LD_INT 33
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: LIST
52857: PPUSH
52858: CALL_OW 72
52862: IFFALSE 52950
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
52864: LD_ADDR_VAR 0 8
52868: PUSH
52869: LD_VAR 0 18
52873: PPUSH
52874: LD_INT 2
52876: PUSH
52877: LD_INT 30
52879: PUSH
52880: LD_INT 32
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 30
52889: PUSH
52890: LD_INT 33
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: LIST
52901: PPUSH
52902: CALL_OW 72
52906: PUSH
52907: FOR_IN
52908: IFFALSE 52948
// begin if not GetBWeapon ( i ) then
52910: LD_VAR 0 8
52914: PPUSH
52915: CALL_OW 269
52919: NOT
52920: IFFALSE 52946
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
52922: LD_VAR 0 8
52926: PPUSH
52927: LD_VAR 0 8
52931: PPUSH
52932: LD_VAR 0 2
52936: PPUSH
52937: CALL 54196 0 2
52941: PPUSH
52942: CALL_OW 431
// end ;
52946: GO 52907
52948: POP
52949: POP
// end ; for i = 1 to personel do
52950: LD_ADDR_VAR 0 8
52954: PUSH
52955: DOUBLE
52956: LD_INT 1
52958: DEC
52959: ST_TO_ADDR
52960: LD_VAR 0 6
52964: PUSH
52965: FOR_TO
52966: IFFALSE 54030
// begin if i > 4 then
52968: LD_VAR 0 8
52972: PUSH
52973: LD_INT 4
52975: GREATER
52976: IFFALSE 52980
// break ;
52978: GO 54030
// case i of 1 :
52980: LD_VAR 0 8
52984: PUSH
52985: LD_INT 1
52987: DOUBLE
52988: EQUAL
52989: IFTRUE 52993
52991: GO 53073
52993: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
52994: LD_ADDR_VAR 0 12
52998: PUSH
52999: LD_VAR 0 18
53003: PPUSH
53004: LD_INT 22
53006: PUSH
53007: LD_VAR 0 16
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 58
53018: PUSH
53019: EMPTY
53020: LIST
53021: PUSH
53022: LD_INT 2
53024: PUSH
53025: LD_INT 30
53027: PUSH
53028: LD_INT 32
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 30
53037: PUSH
53038: LD_INT 4
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 30
53047: PUSH
53048: LD_INT 5
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: PPUSH
53066: CALL_OW 72
53070: ST_TO_ADDR
53071: GO 53295
53073: LD_INT 2
53075: DOUBLE
53076: EQUAL
53077: IFTRUE 53081
53079: GO 53143
53081: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
53082: LD_ADDR_VAR 0 12
53086: PUSH
53087: LD_VAR 0 18
53091: PPUSH
53092: LD_INT 22
53094: PUSH
53095: LD_VAR 0 16
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 2
53106: PUSH
53107: LD_INT 30
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 30
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: LIST
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PPUSH
53136: CALL_OW 72
53140: ST_TO_ADDR
53141: GO 53295
53143: LD_INT 3
53145: DOUBLE
53146: EQUAL
53147: IFTRUE 53151
53149: GO 53213
53151: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
53152: LD_ADDR_VAR 0 12
53156: PUSH
53157: LD_VAR 0 18
53161: PPUSH
53162: LD_INT 22
53164: PUSH
53165: LD_VAR 0 16
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 2
53176: PUSH
53177: LD_INT 30
53179: PUSH
53180: LD_INT 2
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 30
53189: PUSH
53190: LD_INT 3
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: LIST
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PPUSH
53206: CALL_OW 72
53210: ST_TO_ADDR
53211: GO 53295
53213: LD_INT 4
53215: DOUBLE
53216: EQUAL
53217: IFTRUE 53221
53219: GO 53294
53221: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
53222: LD_ADDR_VAR 0 12
53226: PUSH
53227: LD_VAR 0 18
53231: PPUSH
53232: LD_INT 22
53234: PUSH
53235: LD_VAR 0 16
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 2
53246: PUSH
53247: LD_INT 30
53249: PUSH
53250: LD_INT 6
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 30
53259: PUSH
53260: LD_INT 7
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 30
53269: PUSH
53270: LD_INT 8
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PPUSH
53287: CALL_OW 72
53291: ST_TO_ADDR
53292: GO 53295
53294: POP
// if i = 1 then
53295: LD_VAR 0 8
53299: PUSH
53300: LD_INT 1
53302: EQUAL
53303: IFFALSE 53414
// begin tmp := [ ] ;
53305: LD_ADDR_VAR 0 19
53309: PUSH
53310: EMPTY
53311: ST_TO_ADDR
// for j in f do
53312: LD_ADDR_VAR 0 9
53316: PUSH
53317: LD_VAR 0 12
53321: PUSH
53322: FOR_IN
53323: IFFALSE 53396
// if GetBType ( j ) = b_bunker then
53325: LD_VAR 0 9
53329: PPUSH
53330: CALL_OW 266
53334: PUSH
53335: LD_INT 32
53337: EQUAL
53338: IFFALSE 53365
// tmp := Insert ( tmp , 1 , j ) else
53340: LD_ADDR_VAR 0 19
53344: PUSH
53345: LD_VAR 0 19
53349: PPUSH
53350: LD_INT 1
53352: PPUSH
53353: LD_VAR 0 9
53357: PPUSH
53358: CALL_OW 2
53362: ST_TO_ADDR
53363: GO 53394
// tmp := Insert ( tmp , tmp + 1 , j ) ;
53365: LD_ADDR_VAR 0 19
53369: PUSH
53370: LD_VAR 0 19
53374: PPUSH
53375: LD_VAR 0 19
53379: PUSH
53380: LD_INT 1
53382: PLUS
53383: PPUSH
53384: LD_VAR 0 9
53388: PPUSH
53389: CALL_OW 2
53393: ST_TO_ADDR
53394: GO 53322
53396: POP
53397: POP
// if tmp then
53398: LD_VAR 0 19
53402: IFFALSE 53414
// f := tmp ;
53404: LD_ADDR_VAR 0 12
53408: PUSH
53409: LD_VAR 0 19
53413: ST_TO_ADDR
// end ; x := personel [ i ] ;
53414: LD_ADDR_VAR 0 13
53418: PUSH
53419: LD_VAR 0 6
53423: PUSH
53424: LD_VAR 0 8
53428: ARRAY
53429: ST_TO_ADDR
// if x = - 1 then
53430: LD_VAR 0 13
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: EQUAL
53439: IFFALSE 53648
// begin for j in f do
53441: LD_ADDR_VAR 0 9
53445: PUSH
53446: LD_VAR 0 12
53450: PUSH
53451: FOR_IN
53452: IFFALSE 53644
// repeat InitHc ;
53454: CALL_OW 19
// if GetBType ( j ) = b_barracks then
53458: LD_VAR 0 9
53462: PPUSH
53463: CALL_OW 266
53467: PUSH
53468: LD_INT 5
53470: EQUAL
53471: IFFALSE 53541
// begin if UnitsInside ( j ) < 3 then
53473: LD_VAR 0 9
53477: PPUSH
53478: CALL_OW 313
53482: PUSH
53483: LD_INT 3
53485: LESS
53486: IFFALSE 53522
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53488: LD_INT 0
53490: PPUSH
53491: LD_INT 5
53493: PUSH
53494: LD_INT 8
53496: PUSH
53497: LD_INT 9
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: LIST
53504: PUSH
53505: LD_VAR 0 17
53509: ARRAY
53510: PPUSH
53511: LD_VAR 0 4
53515: PPUSH
53516: CALL_OW 380
53520: GO 53539
// PrepareHuman ( false , i , skill ) ;
53522: LD_INT 0
53524: PPUSH
53525: LD_VAR 0 8
53529: PPUSH
53530: LD_VAR 0 4
53534: PPUSH
53535: CALL_OW 380
// end else
53539: GO 53558
// PrepareHuman ( false , i , skill ) ;
53541: LD_INT 0
53543: PPUSH
53544: LD_VAR 0 8
53548: PPUSH
53549: LD_VAR 0 4
53553: PPUSH
53554: CALL_OW 380
// un := CreateHuman ;
53558: LD_ADDR_VAR 0 14
53562: PUSH
53563: CALL_OW 44
53567: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53568: LD_ADDR_VAR 0 7
53572: PUSH
53573: LD_VAR 0 7
53577: PPUSH
53578: LD_INT 1
53580: PPUSH
53581: LD_VAR 0 14
53585: PPUSH
53586: CALL_OW 2
53590: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
53591: LD_VAR 0 14
53595: PPUSH
53596: LD_VAR 0 9
53600: PPUSH
53601: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
53605: LD_VAR 0 9
53609: PPUSH
53610: CALL_OW 313
53614: PUSH
53615: LD_INT 6
53617: EQUAL
53618: PUSH
53619: LD_VAR 0 9
53623: PPUSH
53624: CALL_OW 266
53628: PUSH
53629: LD_INT 32
53631: PUSH
53632: LD_INT 31
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: IN
53639: OR
53640: IFFALSE 53454
53642: GO 53451
53644: POP
53645: POP
// end else
53646: GO 54028
// for j = 1 to x do
53648: LD_ADDR_VAR 0 9
53652: PUSH
53653: DOUBLE
53654: LD_INT 1
53656: DEC
53657: ST_TO_ADDR
53658: LD_VAR 0 13
53662: PUSH
53663: FOR_TO
53664: IFFALSE 54026
// begin InitHc ;
53666: CALL_OW 19
// if not f then
53670: LD_VAR 0 12
53674: NOT
53675: IFFALSE 53764
// begin PrepareHuman ( false , i , skill ) ;
53677: LD_INT 0
53679: PPUSH
53680: LD_VAR 0 8
53684: PPUSH
53685: LD_VAR 0 4
53689: PPUSH
53690: CALL_OW 380
// un := CreateHuman ;
53694: LD_ADDR_VAR 0 14
53698: PUSH
53699: CALL_OW 44
53703: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53704: LD_ADDR_VAR 0 7
53708: PUSH
53709: LD_VAR 0 7
53713: PPUSH
53714: LD_INT 1
53716: PPUSH
53717: LD_VAR 0 14
53721: PPUSH
53722: CALL_OW 2
53726: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53727: LD_VAR 0 14
53731: PPUSH
53732: LD_VAR 0 1
53736: PPUSH
53737: CALL_OW 250
53741: PPUSH
53742: LD_VAR 0 1
53746: PPUSH
53747: CALL_OW 251
53751: PPUSH
53752: LD_INT 10
53754: PPUSH
53755: LD_INT 0
53757: PPUSH
53758: CALL_OW 50
// continue ;
53762: GO 53663
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
53764: LD_VAR 0 12
53768: PUSH
53769: LD_INT 1
53771: ARRAY
53772: PPUSH
53773: CALL_OW 313
53777: PUSH
53778: LD_VAR 0 12
53782: PUSH
53783: LD_INT 1
53785: ARRAY
53786: PPUSH
53787: CALL_OW 266
53791: PUSH
53792: LD_INT 32
53794: PUSH
53795: LD_INT 31
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: IN
53802: AND
53803: PUSH
53804: LD_VAR 0 12
53808: PUSH
53809: LD_INT 1
53811: ARRAY
53812: PPUSH
53813: CALL_OW 313
53817: PUSH
53818: LD_INT 6
53820: EQUAL
53821: OR
53822: IFFALSE 53842
// f := Delete ( f , 1 ) ;
53824: LD_ADDR_VAR 0 12
53828: PUSH
53829: LD_VAR 0 12
53833: PPUSH
53834: LD_INT 1
53836: PPUSH
53837: CALL_OW 3
53841: ST_TO_ADDR
// if not f then
53842: LD_VAR 0 12
53846: NOT
53847: IFFALSE 53865
// begin x := x + 2 ;
53849: LD_ADDR_VAR 0 13
53853: PUSH
53854: LD_VAR 0 13
53858: PUSH
53859: LD_INT 2
53861: PLUS
53862: ST_TO_ADDR
// continue ;
53863: GO 53663
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
53865: LD_VAR 0 12
53869: PUSH
53870: LD_INT 1
53872: ARRAY
53873: PPUSH
53874: CALL_OW 266
53878: PUSH
53879: LD_INT 5
53881: EQUAL
53882: IFFALSE 53956
// begin if UnitsInside ( f [ 1 ] ) < 3 then
53884: LD_VAR 0 12
53888: PUSH
53889: LD_INT 1
53891: ARRAY
53892: PPUSH
53893: CALL_OW 313
53897: PUSH
53898: LD_INT 3
53900: LESS
53901: IFFALSE 53937
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53903: LD_INT 0
53905: PPUSH
53906: LD_INT 5
53908: PUSH
53909: LD_INT 8
53911: PUSH
53912: LD_INT 9
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: LIST
53919: PUSH
53920: LD_VAR 0 17
53924: ARRAY
53925: PPUSH
53926: LD_VAR 0 4
53930: PPUSH
53931: CALL_OW 380
53935: GO 53954
// PrepareHuman ( false , i , skill ) ;
53937: LD_INT 0
53939: PPUSH
53940: LD_VAR 0 8
53944: PPUSH
53945: LD_VAR 0 4
53949: PPUSH
53950: CALL_OW 380
// end else
53954: GO 53973
// PrepareHuman ( false , i , skill ) ;
53956: LD_INT 0
53958: PPUSH
53959: LD_VAR 0 8
53963: PPUSH
53964: LD_VAR 0 4
53968: PPUSH
53969: CALL_OW 380
// un := CreateHuman ;
53973: LD_ADDR_VAR 0 14
53977: PUSH
53978: CALL_OW 44
53982: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53983: LD_ADDR_VAR 0 7
53987: PUSH
53988: LD_VAR 0 7
53992: PPUSH
53993: LD_INT 1
53995: PPUSH
53996: LD_VAR 0 14
54000: PPUSH
54001: CALL_OW 2
54005: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
54006: LD_VAR 0 14
54010: PPUSH
54011: LD_VAR 0 12
54015: PUSH
54016: LD_INT 1
54018: ARRAY
54019: PPUSH
54020: CALL_OW 52
// end ;
54024: GO 53663
54026: POP
54027: POP
// end ;
54028: GO 52965
54030: POP
54031: POP
// result := result ^ buildings ;
54032: LD_ADDR_VAR 0 7
54036: PUSH
54037: LD_VAR 0 7
54041: PUSH
54042: LD_VAR 0 18
54046: ADD
54047: ST_TO_ADDR
// end else
54048: GO 54191
// begin for i = 1 to personel do
54050: LD_ADDR_VAR 0 8
54054: PUSH
54055: DOUBLE
54056: LD_INT 1
54058: DEC
54059: ST_TO_ADDR
54060: LD_VAR 0 6
54064: PUSH
54065: FOR_TO
54066: IFFALSE 54189
// begin if i > 4 then
54068: LD_VAR 0 8
54072: PUSH
54073: LD_INT 4
54075: GREATER
54076: IFFALSE 54080
// break ;
54078: GO 54189
// x := personel [ i ] ;
54080: LD_ADDR_VAR 0 13
54084: PUSH
54085: LD_VAR 0 6
54089: PUSH
54090: LD_VAR 0 8
54094: ARRAY
54095: ST_TO_ADDR
// if x = - 1 then
54096: LD_VAR 0 13
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: EQUAL
54105: IFFALSE 54109
// continue ;
54107: GO 54065
// PrepareHuman ( false , i , skill ) ;
54109: LD_INT 0
54111: PPUSH
54112: LD_VAR 0 8
54116: PPUSH
54117: LD_VAR 0 4
54121: PPUSH
54122: CALL_OW 380
// un := CreateHuman ;
54126: LD_ADDR_VAR 0 14
54130: PUSH
54131: CALL_OW 44
54135: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
54136: LD_VAR 0 14
54140: PPUSH
54141: LD_VAR 0 1
54145: PPUSH
54146: CALL_OW 250
54150: PPUSH
54151: LD_VAR 0 1
54155: PPUSH
54156: CALL_OW 251
54160: PPUSH
54161: LD_INT 10
54163: PPUSH
54164: LD_INT 0
54166: PPUSH
54167: CALL_OW 50
// result := result ^ un ;
54171: LD_ADDR_VAR 0 7
54175: PUSH
54176: LD_VAR 0 7
54180: PUSH
54181: LD_VAR 0 14
54185: ADD
54186: ST_TO_ADDR
// end ;
54187: GO 54065
54189: POP
54190: POP
// end ; end ;
54191: LD_VAR 0 7
54195: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
54196: LD_INT 0
54198: PPUSH
54199: PPUSH
54200: PPUSH
54201: PPUSH
54202: PPUSH
54203: PPUSH
54204: PPUSH
54205: PPUSH
54206: PPUSH
54207: PPUSH
54208: PPUSH
54209: PPUSH
54210: PPUSH
54211: PPUSH
54212: PPUSH
54213: PPUSH
// result := false ;
54214: LD_ADDR_VAR 0 3
54218: PUSH
54219: LD_INT 0
54221: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
54222: LD_VAR 0 1
54226: NOT
54227: PUSH
54228: LD_VAR 0 1
54232: PPUSH
54233: CALL_OW 266
54237: PUSH
54238: LD_INT 32
54240: PUSH
54241: LD_INT 33
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: IN
54248: NOT
54249: OR
54250: IFFALSE 54254
// exit ;
54252: GO 55393
// nat := GetNation ( tower ) ;
54254: LD_ADDR_VAR 0 12
54258: PUSH
54259: LD_VAR 0 1
54263: PPUSH
54264: CALL_OW 248
54268: ST_TO_ADDR
// side := GetSide ( tower ) ;
54269: LD_ADDR_VAR 0 16
54273: PUSH
54274: LD_VAR 0 1
54278: PPUSH
54279: CALL_OW 255
54283: ST_TO_ADDR
// x := GetX ( tower ) ;
54284: LD_ADDR_VAR 0 10
54288: PUSH
54289: LD_VAR 0 1
54293: PPUSH
54294: CALL_OW 250
54298: ST_TO_ADDR
// y := GetY ( tower ) ;
54299: LD_ADDR_VAR 0 11
54303: PUSH
54304: LD_VAR 0 1
54308: PPUSH
54309: CALL_OW 251
54313: ST_TO_ADDR
// if not x or not y then
54314: LD_VAR 0 10
54318: NOT
54319: PUSH
54320: LD_VAR 0 11
54324: NOT
54325: OR
54326: IFFALSE 54330
// exit ;
54328: GO 55393
// weapon := 0 ;
54330: LD_ADDR_VAR 0 18
54334: PUSH
54335: LD_INT 0
54337: ST_TO_ADDR
// fac_list := [ ] ;
54338: LD_ADDR_VAR 0 17
54342: PUSH
54343: EMPTY
54344: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
54345: LD_ADDR_VAR 0 6
54349: PUSH
54350: LD_VAR 0 1
54354: PPUSH
54355: CALL_OW 274
54359: PPUSH
54360: LD_VAR 0 2
54364: PPUSH
54365: LD_INT 0
54367: PPUSH
54368: CALL 51933 0 3
54372: PPUSH
54373: LD_INT 30
54375: PUSH
54376: LD_INT 3
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PPUSH
54383: CALL_OW 72
54387: ST_TO_ADDR
// if not factories then
54388: LD_VAR 0 6
54392: NOT
54393: IFFALSE 54397
// exit ;
54395: GO 55393
// for i in factories do
54397: LD_ADDR_VAR 0 8
54401: PUSH
54402: LD_VAR 0 6
54406: PUSH
54407: FOR_IN
54408: IFFALSE 54433
// fac_list := fac_list union AvailableWeaponList ( i ) ;
54410: LD_ADDR_VAR 0 17
54414: PUSH
54415: LD_VAR 0 17
54419: PUSH
54420: LD_VAR 0 8
54424: PPUSH
54425: CALL_OW 478
54429: UNION
54430: ST_TO_ADDR
54431: GO 54407
54433: POP
54434: POP
// if not fac_list then
54435: LD_VAR 0 17
54439: NOT
54440: IFFALSE 54444
// exit ;
54442: GO 55393
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
54444: LD_ADDR_VAR 0 5
54448: PUSH
54449: LD_INT 4
54451: PUSH
54452: LD_INT 5
54454: PUSH
54455: LD_INT 9
54457: PUSH
54458: LD_INT 10
54460: PUSH
54461: LD_INT 6
54463: PUSH
54464: LD_INT 7
54466: PUSH
54467: LD_INT 11
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 27
54481: PUSH
54482: LD_INT 28
54484: PUSH
54485: LD_INT 26
54487: PUSH
54488: LD_INT 30
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 43
54499: PUSH
54500: LD_INT 44
54502: PUSH
54503: LD_INT 46
54505: PUSH
54506: LD_INT 45
54508: PUSH
54509: LD_INT 47
54511: PUSH
54512: LD_INT 49
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: LIST
54527: PUSH
54528: LD_VAR 0 12
54532: ARRAY
54533: ST_TO_ADDR
// for i in list do
54534: LD_ADDR_VAR 0 8
54538: PUSH
54539: LD_VAR 0 5
54543: PUSH
54544: FOR_IN
54545: IFFALSE 54578
// if not i in fac_list then
54547: LD_VAR 0 8
54551: PUSH
54552: LD_VAR 0 17
54556: IN
54557: NOT
54558: IFFALSE 54576
// list := list diff i ;
54560: LD_ADDR_VAR 0 5
54564: PUSH
54565: LD_VAR 0 5
54569: PUSH
54570: LD_VAR 0 8
54574: DIFF
54575: ST_TO_ADDR
54576: GO 54544
54578: POP
54579: POP
// if not list then
54580: LD_VAR 0 5
54584: NOT
54585: IFFALSE 54589
// exit ;
54587: GO 55393
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
54589: LD_VAR 0 12
54593: PUSH
54594: LD_INT 3
54596: EQUAL
54597: PUSH
54598: LD_INT 49
54600: PUSH
54601: LD_VAR 0 5
54605: IN
54606: AND
54607: PUSH
54608: LD_INT 31
54610: PPUSH
54611: LD_VAR 0 16
54615: PPUSH
54616: CALL_OW 321
54620: PUSH
54621: LD_INT 2
54623: EQUAL
54624: AND
54625: IFFALSE 54685
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
54627: LD_INT 22
54629: PUSH
54630: LD_VAR 0 16
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 35
54641: PUSH
54642: LD_INT 49
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 91
54651: PUSH
54652: LD_VAR 0 1
54656: PUSH
54657: LD_INT 10
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: LIST
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: LIST
54669: PPUSH
54670: CALL_OW 69
54674: NOT
54675: IFFALSE 54685
// weapon := ru_time_lapser ;
54677: LD_ADDR_VAR 0 18
54681: PUSH
54682: LD_INT 49
54684: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
54685: LD_VAR 0 12
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: LD_INT 2
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: IN
54700: PUSH
54701: LD_INT 11
54703: PUSH
54704: LD_VAR 0 5
54708: IN
54709: PUSH
54710: LD_INT 30
54712: PUSH
54713: LD_VAR 0 5
54717: IN
54718: OR
54719: AND
54720: PUSH
54721: LD_INT 6
54723: PPUSH
54724: LD_VAR 0 16
54728: PPUSH
54729: CALL_OW 321
54733: PUSH
54734: LD_INT 2
54736: EQUAL
54737: AND
54738: IFFALSE 54903
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
54740: LD_INT 22
54742: PUSH
54743: LD_VAR 0 16
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 2
54754: PUSH
54755: LD_INT 35
54757: PUSH
54758: LD_INT 11
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 35
54767: PUSH
54768: LD_INT 30
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 91
54782: PUSH
54783: LD_VAR 0 1
54787: PUSH
54788: LD_INT 18
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: LIST
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: LIST
54800: PPUSH
54801: CALL_OW 69
54805: NOT
54806: PUSH
54807: LD_INT 22
54809: PUSH
54810: LD_VAR 0 16
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 2
54821: PUSH
54822: LD_INT 30
54824: PUSH
54825: LD_INT 32
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 30
54834: PUSH
54835: LD_INT 33
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 91
54849: PUSH
54850: LD_VAR 0 1
54854: PUSH
54855: LD_INT 12
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: LIST
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: LIST
54867: PUSH
54868: EMPTY
54869: LIST
54870: PPUSH
54871: CALL_OW 69
54875: PUSH
54876: LD_INT 2
54878: GREATER
54879: AND
54880: IFFALSE 54903
// weapon := [ us_radar , ar_radar ] [ nat ] ;
54882: LD_ADDR_VAR 0 18
54886: PUSH
54887: LD_INT 11
54889: PUSH
54890: LD_INT 30
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_VAR 0 12
54901: ARRAY
54902: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
54903: LD_VAR 0 18
54907: NOT
54908: PUSH
54909: LD_INT 40
54911: PPUSH
54912: LD_VAR 0 16
54916: PPUSH
54917: CALL_OW 321
54921: PUSH
54922: LD_INT 2
54924: EQUAL
54925: AND
54926: PUSH
54927: LD_INT 7
54929: PUSH
54930: LD_VAR 0 5
54934: IN
54935: PUSH
54936: LD_INT 28
54938: PUSH
54939: LD_VAR 0 5
54943: IN
54944: OR
54945: PUSH
54946: LD_INT 45
54948: PUSH
54949: LD_VAR 0 5
54953: IN
54954: OR
54955: AND
54956: IFFALSE 55210
// begin hex := GetHexInfo ( x , y ) ;
54958: LD_ADDR_VAR 0 4
54962: PUSH
54963: LD_VAR 0 10
54967: PPUSH
54968: LD_VAR 0 11
54972: PPUSH
54973: CALL_OW 546
54977: ST_TO_ADDR
// if hex [ 1 ] then
54978: LD_VAR 0 4
54982: PUSH
54983: LD_INT 1
54985: ARRAY
54986: IFFALSE 54990
// exit ;
54988: GO 55393
// height := hex [ 2 ] ;
54990: LD_ADDR_VAR 0 15
54994: PUSH
54995: LD_VAR 0 4
54999: PUSH
55000: LD_INT 2
55002: ARRAY
55003: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
55004: LD_ADDR_VAR 0 14
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 2
55014: PUSH
55015: LD_INT 3
55017: PUSH
55018: LD_INT 5
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: ST_TO_ADDR
// for i in tmp do
55027: LD_ADDR_VAR 0 8
55031: PUSH
55032: LD_VAR 0 14
55036: PUSH
55037: FOR_IN
55038: IFFALSE 55208
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
55040: LD_ADDR_VAR 0 9
55044: PUSH
55045: LD_VAR 0 10
55049: PPUSH
55050: LD_VAR 0 8
55054: PPUSH
55055: LD_INT 5
55057: PPUSH
55058: CALL_OW 272
55062: PUSH
55063: LD_VAR 0 11
55067: PPUSH
55068: LD_VAR 0 8
55072: PPUSH
55073: LD_INT 5
55075: PPUSH
55076: CALL_OW 273
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
55085: LD_VAR 0 9
55089: PUSH
55090: LD_INT 1
55092: ARRAY
55093: PPUSH
55094: LD_VAR 0 9
55098: PUSH
55099: LD_INT 2
55101: ARRAY
55102: PPUSH
55103: CALL_OW 488
55107: IFFALSE 55206
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
55109: LD_ADDR_VAR 0 4
55113: PUSH
55114: LD_VAR 0 9
55118: PUSH
55119: LD_INT 1
55121: ARRAY
55122: PPUSH
55123: LD_VAR 0 9
55127: PUSH
55128: LD_INT 2
55130: ARRAY
55131: PPUSH
55132: CALL_OW 546
55136: ST_TO_ADDR
// if hex [ 1 ] then
55137: LD_VAR 0 4
55141: PUSH
55142: LD_INT 1
55144: ARRAY
55145: IFFALSE 55149
// continue ;
55147: GO 55037
// h := hex [ 2 ] ;
55149: LD_ADDR_VAR 0 13
55153: PUSH
55154: LD_VAR 0 4
55158: PUSH
55159: LD_INT 2
55161: ARRAY
55162: ST_TO_ADDR
// if h + 7 < height then
55163: LD_VAR 0 13
55167: PUSH
55168: LD_INT 7
55170: PLUS
55171: PUSH
55172: LD_VAR 0 15
55176: LESS
55177: IFFALSE 55206
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
55179: LD_ADDR_VAR 0 18
55183: PUSH
55184: LD_INT 7
55186: PUSH
55187: LD_INT 28
55189: PUSH
55190: LD_INT 45
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: LIST
55197: PUSH
55198: LD_VAR 0 12
55202: ARRAY
55203: ST_TO_ADDR
// break ;
55204: GO 55208
// end ; end ; end ;
55206: GO 55037
55208: POP
55209: POP
// end ; if not weapon then
55210: LD_VAR 0 18
55214: NOT
55215: IFFALSE 55275
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
55217: LD_ADDR_VAR 0 5
55221: PUSH
55222: LD_VAR 0 5
55226: PUSH
55227: LD_INT 11
55229: PUSH
55230: LD_INT 30
55232: PUSH
55233: LD_INT 49
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: LIST
55240: DIFF
55241: ST_TO_ADDR
// if not list then
55242: LD_VAR 0 5
55246: NOT
55247: IFFALSE 55251
// exit ;
55249: GO 55393
// weapon := list [ rand ( 1 , list ) ] ;
55251: LD_ADDR_VAR 0 18
55255: PUSH
55256: LD_VAR 0 5
55260: PUSH
55261: LD_INT 1
55263: PPUSH
55264: LD_VAR 0 5
55268: PPUSH
55269: CALL_OW 12
55273: ARRAY
55274: ST_TO_ADDR
// end ; if weapon then
55275: LD_VAR 0 18
55279: IFFALSE 55393
// begin tmp := CostOfWeapon ( weapon ) ;
55281: LD_ADDR_VAR 0 14
55285: PUSH
55286: LD_VAR 0 18
55290: PPUSH
55291: CALL_OW 451
55295: ST_TO_ADDR
// j := GetBase ( tower ) ;
55296: LD_ADDR_VAR 0 9
55300: PUSH
55301: LD_VAR 0 1
55305: PPUSH
55306: CALL_OW 274
55310: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
55311: LD_VAR 0 9
55315: PPUSH
55316: LD_INT 1
55318: PPUSH
55319: CALL_OW 275
55323: PUSH
55324: LD_VAR 0 14
55328: PUSH
55329: LD_INT 1
55331: ARRAY
55332: GREATEREQUAL
55333: PUSH
55334: LD_VAR 0 9
55338: PPUSH
55339: LD_INT 2
55341: PPUSH
55342: CALL_OW 275
55346: PUSH
55347: LD_VAR 0 14
55351: PUSH
55352: LD_INT 2
55354: ARRAY
55355: GREATEREQUAL
55356: AND
55357: PUSH
55358: LD_VAR 0 9
55362: PPUSH
55363: LD_INT 3
55365: PPUSH
55366: CALL_OW 275
55370: PUSH
55371: LD_VAR 0 14
55375: PUSH
55376: LD_INT 3
55378: ARRAY
55379: GREATEREQUAL
55380: AND
55381: IFFALSE 55393
// result := weapon ;
55383: LD_ADDR_VAR 0 3
55387: PUSH
55388: LD_VAR 0 18
55392: ST_TO_ADDR
// end ; end ;
55393: LD_VAR 0 3
55397: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
55398: LD_INT 0
55400: PPUSH
55401: PPUSH
// result := true ;
55402: LD_ADDR_VAR 0 3
55406: PUSH
55407: LD_INT 1
55409: ST_TO_ADDR
// if array1 = array2 then
55410: LD_VAR 0 1
55414: PUSH
55415: LD_VAR 0 2
55419: EQUAL
55420: IFFALSE 55480
// begin for i = 1 to array1 do
55422: LD_ADDR_VAR 0 4
55426: PUSH
55427: DOUBLE
55428: LD_INT 1
55430: DEC
55431: ST_TO_ADDR
55432: LD_VAR 0 1
55436: PUSH
55437: FOR_TO
55438: IFFALSE 55476
// if array1 [ i ] <> array2 [ i ] then
55440: LD_VAR 0 1
55444: PUSH
55445: LD_VAR 0 4
55449: ARRAY
55450: PUSH
55451: LD_VAR 0 2
55455: PUSH
55456: LD_VAR 0 4
55460: ARRAY
55461: NONEQUAL
55462: IFFALSE 55474
// begin result := false ;
55464: LD_ADDR_VAR 0 3
55468: PUSH
55469: LD_INT 0
55471: ST_TO_ADDR
// break ;
55472: GO 55476
// end ;
55474: GO 55437
55476: POP
55477: POP
// end else
55478: GO 55488
// result := false ;
55480: LD_ADDR_VAR 0 3
55484: PUSH
55485: LD_INT 0
55487: ST_TO_ADDR
// end ;
55488: LD_VAR 0 3
55492: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
55493: LD_INT 0
55495: PPUSH
55496: PPUSH
// if not array1 or not array2 then
55497: LD_VAR 0 1
55501: NOT
55502: PUSH
55503: LD_VAR 0 2
55507: NOT
55508: OR
55509: IFFALSE 55513
// exit ;
55511: GO 55577
// result := true ;
55513: LD_ADDR_VAR 0 3
55517: PUSH
55518: LD_INT 1
55520: ST_TO_ADDR
// for i = 1 to array1 do
55521: LD_ADDR_VAR 0 4
55525: PUSH
55526: DOUBLE
55527: LD_INT 1
55529: DEC
55530: ST_TO_ADDR
55531: LD_VAR 0 1
55535: PUSH
55536: FOR_TO
55537: IFFALSE 55575
// if array1 [ i ] <> array2 [ i ] then
55539: LD_VAR 0 1
55543: PUSH
55544: LD_VAR 0 4
55548: ARRAY
55549: PUSH
55550: LD_VAR 0 2
55554: PUSH
55555: LD_VAR 0 4
55559: ARRAY
55560: NONEQUAL
55561: IFFALSE 55573
// begin result := false ;
55563: LD_ADDR_VAR 0 3
55567: PUSH
55568: LD_INT 0
55570: ST_TO_ADDR
// break ;
55571: GO 55575
// end ;
55573: GO 55536
55575: POP
55576: POP
// end ;
55577: LD_VAR 0 3
55581: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
55582: LD_INT 0
55584: PPUSH
55585: PPUSH
55586: PPUSH
// pom := GetBase ( fac ) ;
55587: LD_ADDR_VAR 0 5
55591: PUSH
55592: LD_VAR 0 1
55596: PPUSH
55597: CALL_OW 274
55601: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
55602: LD_ADDR_VAR 0 4
55606: PUSH
55607: LD_VAR 0 2
55611: PUSH
55612: LD_INT 1
55614: ARRAY
55615: PPUSH
55616: LD_VAR 0 2
55620: PUSH
55621: LD_INT 2
55623: ARRAY
55624: PPUSH
55625: LD_VAR 0 2
55629: PUSH
55630: LD_INT 3
55632: ARRAY
55633: PPUSH
55634: LD_VAR 0 2
55638: PUSH
55639: LD_INT 4
55641: ARRAY
55642: PPUSH
55643: CALL_OW 449
55647: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55648: LD_ADDR_VAR 0 3
55652: PUSH
55653: LD_VAR 0 5
55657: PPUSH
55658: LD_INT 1
55660: PPUSH
55661: CALL_OW 275
55665: PUSH
55666: LD_VAR 0 4
55670: PUSH
55671: LD_INT 1
55673: ARRAY
55674: GREATEREQUAL
55675: PUSH
55676: LD_VAR 0 5
55680: PPUSH
55681: LD_INT 2
55683: PPUSH
55684: CALL_OW 275
55688: PUSH
55689: LD_VAR 0 4
55693: PUSH
55694: LD_INT 2
55696: ARRAY
55697: GREATEREQUAL
55698: AND
55699: PUSH
55700: LD_VAR 0 5
55704: PPUSH
55705: LD_INT 3
55707: PPUSH
55708: CALL_OW 275
55712: PUSH
55713: LD_VAR 0 4
55717: PUSH
55718: LD_INT 3
55720: ARRAY
55721: GREATEREQUAL
55722: AND
55723: ST_TO_ADDR
// end ;
55724: LD_VAR 0 3
55728: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
55729: LD_INT 0
55731: PPUSH
55732: PPUSH
55733: PPUSH
55734: PPUSH
// pom := GetBase ( building ) ;
55735: LD_ADDR_VAR 0 3
55739: PUSH
55740: LD_VAR 0 1
55744: PPUSH
55745: CALL_OW 274
55749: ST_TO_ADDR
// if not pom then
55750: LD_VAR 0 3
55754: NOT
55755: IFFALSE 55759
// exit ;
55757: GO 55929
// btype := GetBType ( building ) ;
55759: LD_ADDR_VAR 0 5
55763: PUSH
55764: LD_VAR 0 1
55768: PPUSH
55769: CALL_OW 266
55773: ST_TO_ADDR
// if btype = b_armoury then
55774: LD_VAR 0 5
55778: PUSH
55779: LD_INT 4
55781: EQUAL
55782: IFFALSE 55792
// btype := b_barracks ;
55784: LD_ADDR_VAR 0 5
55788: PUSH
55789: LD_INT 5
55791: ST_TO_ADDR
// if btype = b_depot then
55792: LD_VAR 0 5
55796: PUSH
55797: LD_INT 0
55799: EQUAL
55800: IFFALSE 55810
// btype := b_warehouse ;
55802: LD_ADDR_VAR 0 5
55806: PUSH
55807: LD_INT 1
55809: ST_TO_ADDR
// if btype = b_workshop then
55810: LD_VAR 0 5
55814: PUSH
55815: LD_INT 2
55817: EQUAL
55818: IFFALSE 55828
// btype := b_factory ;
55820: LD_ADDR_VAR 0 5
55824: PUSH
55825: LD_INT 3
55827: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55828: LD_ADDR_VAR 0 4
55832: PUSH
55833: LD_VAR 0 5
55837: PPUSH
55838: LD_VAR 0 1
55842: PPUSH
55843: CALL_OW 248
55847: PPUSH
55848: CALL_OW 450
55852: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55853: LD_ADDR_VAR 0 2
55857: PUSH
55858: LD_VAR 0 3
55862: PPUSH
55863: LD_INT 1
55865: PPUSH
55866: CALL_OW 275
55870: PUSH
55871: LD_VAR 0 4
55875: PUSH
55876: LD_INT 1
55878: ARRAY
55879: GREATEREQUAL
55880: PUSH
55881: LD_VAR 0 3
55885: PPUSH
55886: LD_INT 2
55888: PPUSH
55889: CALL_OW 275
55893: PUSH
55894: LD_VAR 0 4
55898: PUSH
55899: LD_INT 2
55901: ARRAY
55902: GREATEREQUAL
55903: AND
55904: PUSH
55905: LD_VAR 0 3
55909: PPUSH
55910: LD_INT 3
55912: PPUSH
55913: CALL_OW 275
55917: PUSH
55918: LD_VAR 0 4
55922: PUSH
55923: LD_INT 3
55925: ARRAY
55926: GREATEREQUAL
55927: AND
55928: ST_TO_ADDR
// end ;
55929: LD_VAR 0 2
55933: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
55934: LD_INT 0
55936: PPUSH
55937: PPUSH
55938: PPUSH
// pom := GetBase ( building ) ;
55939: LD_ADDR_VAR 0 4
55943: PUSH
55944: LD_VAR 0 1
55948: PPUSH
55949: CALL_OW 274
55953: ST_TO_ADDR
// if not pom then
55954: LD_VAR 0 4
55958: NOT
55959: IFFALSE 55963
// exit ;
55961: GO 56064
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55963: LD_ADDR_VAR 0 5
55967: PUSH
55968: LD_VAR 0 2
55972: PPUSH
55973: LD_VAR 0 1
55977: PPUSH
55978: CALL_OW 248
55982: PPUSH
55983: CALL_OW 450
55987: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55988: LD_ADDR_VAR 0 3
55992: PUSH
55993: LD_VAR 0 4
55997: PPUSH
55998: LD_INT 1
56000: PPUSH
56001: CALL_OW 275
56005: PUSH
56006: LD_VAR 0 5
56010: PUSH
56011: LD_INT 1
56013: ARRAY
56014: GREATEREQUAL
56015: PUSH
56016: LD_VAR 0 4
56020: PPUSH
56021: LD_INT 2
56023: PPUSH
56024: CALL_OW 275
56028: PUSH
56029: LD_VAR 0 5
56033: PUSH
56034: LD_INT 2
56036: ARRAY
56037: GREATEREQUAL
56038: AND
56039: PUSH
56040: LD_VAR 0 4
56044: PPUSH
56045: LD_INT 3
56047: PPUSH
56048: CALL_OW 275
56052: PUSH
56053: LD_VAR 0 5
56057: PUSH
56058: LD_INT 3
56060: ARRAY
56061: GREATEREQUAL
56062: AND
56063: ST_TO_ADDR
// end ;
56064: LD_VAR 0 3
56068: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
56069: LD_INT 0
56071: PPUSH
56072: PPUSH
56073: PPUSH
56074: PPUSH
56075: PPUSH
56076: PPUSH
56077: PPUSH
56078: PPUSH
56079: PPUSH
56080: PPUSH
56081: PPUSH
// result := false ;
56082: LD_ADDR_VAR 0 8
56086: PUSH
56087: LD_INT 0
56089: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
56090: LD_VAR 0 5
56094: NOT
56095: PUSH
56096: LD_VAR 0 1
56100: NOT
56101: OR
56102: PUSH
56103: LD_VAR 0 2
56107: NOT
56108: OR
56109: PUSH
56110: LD_VAR 0 3
56114: NOT
56115: OR
56116: IFFALSE 56120
// exit ;
56118: GO 56934
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
56120: LD_ADDR_VAR 0 14
56124: PUSH
56125: LD_VAR 0 1
56129: PPUSH
56130: LD_VAR 0 2
56134: PPUSH
56135: LD_VAR 0 3
56139: PPUSH
56140: LD_VAR 0 4
56144: PPUSH
56145: LD_VAR 0 5
56149: PUSH
56150: LD_INT 1
56152: ARRAY
56153: PPUSH
56154: CALL_OW 248
56158: PPUSH
56159: LD_INT 0
56161: PPUSH
56162: CALL 57771 0 6
56166: ST_TO_ADDR
// if not hexes then
56167: LD_VAR 0 14
56171: NOT
56172: IFFALSE 56176
// exit ;
56174: GO 56934
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56176: LD_ADDR_VAR 0 17
56180: PUSH
56181: LD_VAR 0 5
56185: PPUSH
56186: LD_INT 22
56188: PUSH
56189: LD_VAR 0 13
56193: PPUSH
56194: CALL_OW 255
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 2
56205: PUSH
56206: LD_INT 30
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 30
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: LIST
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PPUSH
56235: CALL_OW 72
56239: ST_TO_ADDR
// for i = 1 to hexes do
56240: LD_ADDR_VAR 0 9
56244: PUSH
56245: DOUBLE
56246: LD_INT 1
56248: DEC
56249: ST_TO_ADDR
56250: LD_VAR 0 14
56254: PUSH
56255: FOR_TO
56256: IFFALSE 56932
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56258: LD_ADDR_VAR 0 13
56262: PUSH
56263: LD_VAR 0 14
56267: PUSH
56268: LD_VAR 0 9
56272: ARRAY
56273: PUSH
56274: LD_INT 1
56276: ARRAY
56277: PPUSH
56278: LD_VAR 0 14
56282: PUSH
56283: LD_VAR 0 9
56287: ARRAY
56288: PUSH
56289: LD_INT 2
56291: ARRAY
56292: PPUSH
56293: CALL_OW 428
56297: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
56298: LD_VAR 0 14
56302: PUSH
56303: LD_VAR 0 9
56307: ARRAY
56308: PUSH
56309: LD_INT 1
56311: ARRAY
56312: PPUSH
56313: LD_VAR 0 14
56317: PUSH
56318: LD_VAR 0 9
56322: ARRAY
56323: PUSH
56324: LD_INT 2
56326: ARRAY
56327: PPUSH
56328: CALL_OW 351
56332: PUSH
56333: LD_VAR 0 14
56337: PUSH
56338: LD_VAR 0 9
56342: ARRAY
56343: PUSH
56344: LD_INT 1
56346: ARRAY
56347: PPUSH
56348: LD_VAR 0 14
56352: PUSH
56353: LD_VAR 0 9
56357: ARRAY
56358: PUSH
56359: LD_INT 2
56361: ARRAY
56362: PPUSH
56363: CALL_OW 488
56367: NOT
56368: OR
56369: PUSH
56370: LD_VAR 0 13
56374: PPUSH
56375: CALL_OW 247
56379: PUSH
56380: LD_INT 3
56382: EQUAL
56383: OR
56384: IFFALSE 56390
// exit ;
56386: POP
56387: POP
56388: GO 56934
// if not tmp then
56390: LD_VAR 0 13
56394: NOT
56395: IFFALSE 56399
// continue ;
56397: GO 56255
// result := true ;
56399: LD_ADDR_VAR 0 8
56403: PUSH
56404: LD_INT 1
56406: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
56407: LD_VAR 0 6
56411: PUSH
56412: LD_VAR 0 13
56416: PPUSH
56417: CALL_OW 247
56421: PUSH
56422: LD_INT 2
56424: EQUAL
56425: AND
56426: PUSH
56427: LD_VAR 0 13
56431: PPUSH
56432: CALL_OW 263
56436: PUSH
56437: LD_INT 1
56439: EQUAL
56440: AND
56441: IFFALSE 56605
// begin if IsDrivenBy ( tmp ) then
56443: LD_VAR 0 13
56447: PPUSH
56448: CALL_OW 311
56452: IFFALSE 56456
// continue ;
56454: GO 56255
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
56456: LD_VAR 0 6
56460: PPUSH
56461: LD_INT 3
56463: PUSH
56464: LD_INT 60
56466: PUSH
56467: EMPTY
56468: LIST
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 3
56476: PUSH
56477: LD_INT 55
56479: PUSH
56480: EMPTY
56481: LIST
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PPUSH
56491: CALL_OW 72
56495: IFFALSE 56603
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
56497: LD_ADDR_VAR 0 18
56501: PUSH
56502: LD_VAR 0 6
56506: PPUSH
56507: LD_INT 3
56509: PUSH
56510: LD_INT 60
56512: PUSH
56513: EMPTY
56514: LIST
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 3
56522: PUSH
56523: LD_INT 55
56525: PUSH
56526: EMPTY
56527: LIST
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PPUSH
56537: CALL_OW 72
56541: PUSH
56542: LD_INT 1
56544: ARRAY
56545: ST_TO_ADDR
// if IsInUnit ( driver ) then
56546: LD_VAR 0 18
56550: PPUSH
56551: CALL_OW 310
56555: IFFALSE 56566
// ComExit ( driver ) ;
56557: LD_VAR 0 18
56561: PPUSH
56562: CALL 80955 0 1
// AddComEnterUnit ( driver , tmp ) ;
56566: LD_VAR 0 18
56570: PPUSH
56571: LD_VAR 0 13
56575: PPUSH
56576: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
56580: LD_VAR 0 18
56584: PPUSH
56585: LD_VAR 0 7
56589: PPUSH
56590: CALL_OW 173
// AddComExitVehicle ( driver ) ;
56594: LD_VAR 0 18
56598: PPUSH
56599: CALL_OW 181
// end ; continue ;
56603: GO 56255
// end ; if not cleaners or not tmp in cleaners then
56605: LD_VAR 0 6
56609: NOT
56610: PUSH
56611: LD_VAR 0 13
56615: PUSH
56616: LD_VAR 0 6
56620: IN
56621: NOT
56622: OR
56623: IFFALSE 56930
// begin if dep then
56625: LD_VAR 0 17
56629: IFFALSE 56765
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
56631: LD_ADDR_VAR 0 16
56635: PUSH
56636: LD_VAR 0 17
56640: PUSH
56641: LD_INT 1
56643: ARRAY
56644: PPUSH
56645: CALL_OW 250
56649: PPUSH
56650: LD_VAR 0 17
56654: PUSH
56655: LD_INT 1
56657: ARRAY
56658: PPUSH
56659: CALL_OW 254
56663: PPUSH
56664: LD_INT 5
56666: PPUSH
56667: CALL_OW 272
56671: PUSH
56672: LD_VAR 0 17
56676: PUSH
56677: LD_INT 1
56679: ARRAY
56680: PPUSH
56681: CALL_OW 251
56685: PPUSH
56686: LD_VAR 0 17
56690: PUSH
56691: LD_INT 1
56693: ARRAY
56694: PPUSH
56695: CALL_OW 254
56699: PPUSH
56700: LD_INT 5
56702: PPUSH
56703: CALL_OW 273
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
56712: LD_VAR 0 16
56716: PUSH
56717: LD_INT 1
56719: ARRAY
56720: PPUSH
56721: LD_VAR 0 16
56725: PUSH
56726: LD_INT 2
56728: ARRAY
56729: PPUSH
56730: CALL_OW 488
56734: IFFALSE 56765
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
56736: LD_VAR 0 13
56740: PPUSH
56741: LD_VAR 0 16
56745: PUSH
56746: LD_INT 1
56748: ARRAY
56749: PPUSH
56750: LD_VAR 0 16
56754: PUSH
56755: LD_INT 2
56757: ARRAY
56758: PPUSH
56759: CALL_OW 111
// continue ;
56763: GO 56255
// end ; end ; r := GetDir ( tmp ) ;
56765: LD_ADDR_VAR 0 15
56769: PUSH
56770: LD_VAR 0 13
56774: PPUSH
56775: CALL_OW 254
56779: ST_TO_ADDR
// if r = 5 then
56780: LD_VAR 0 15
56784: PUSH
56785: LD_INT 5
56787: EQUAL
56788: IFFALSE 56798
// r := 0 ;
56790: LD_ADDR_VAR 0 15
56794: PUSH
56795: LD_INT 0
56797: ST_TO_ADDR
// for j = r to 5 do
56798: LD_ADDR_VAR 0 10
56802: PUSH
56803: DOUBLE
56804: LD_VAR 0 15
56808: DEC
56809: ST_TO_ADDR
56810: LD_INT 5
56812: PUSH
56813: FOR_TO
56814: IFFALSE 56928
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
56816: LD_ADDR_VAR 0 11
56820: PUSH
56821: LD_VAR 0 13
56825: PPUSH
56826: CALL_OW 250
56830: PPUSH
56831: LD_VAR 0 10
56835: PPUSH
56836: LD_INT 2
56838: PPUSH
56839: CALL_OW 272
56843: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
56844: LD_ADDR_VAR 0 12
56848: PUSH
56849: LD_VAR 0 13
56853: PPUSH
56854: CALL_OW 251
56858: PPUSH
56859: LD_VAR 0 10
56863: PPUSH
56864: LD_INT 2
56866: PPUSH
56867: CALL_OW 273
56871: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
56872: LD_VAR 0 11
56876: PPUSH
56877: LD_VAR 0 12
56881: PPUSH
56882: CALL_OW 488
56886: PUSH
56887: LD_VAR 0 11
56891: PPUSH
56892: LD_VAR 0 12
56896: PPUSH
56897: CALL_OW 428
56901: NOT
56902: AND
56903: IFFALSE 56926
// begin ComMoveXY ( tmp , _x , _y ) ;
56905: LD_VAR 0 13
56909: PPUSH
56910: LD_VAR 0 11
56914: PPUSH
56915: LD_VAR 0 12
56919: PPUSH
56920: CALL_OW 111
// break ;
56924: GO 56928
// end ; end ;
56926: GO 56813
56928: POP
56929: POP
// end ; end ;
56930: GO 56255
56932: POP
56933: POP
// end ;
56934: LD_VAR 0 8
56938: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
56939: LD_INT 0
56941: PPUSH
56942: PPUSH
56943: PPUSH
56944: PPUSH
56945: PPUSH
56946: PPUSH
56947: PPUSH
56948: PPUSH
56949: PPUSH
56950: PPUSH
// result := false ;
56951: LD_ADDR_VAR 0 6
56955: PUSH
56956: LD_INT 0
56958: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56959: LD_VAR 0 1
56963: NOT
56964: PUSH
56965: LD_VAR 0 1
56969: PPUSH
56970: CALL_OW 266
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: IN
56985: NOT
56986: OR
56987: PUSH
56988: LD_VAR 0 2
56992: NOT
56993: OR
56994: PUSH
56995: LD_VAR 0 5
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: LD_INT 2
57008: PUSH
57009: LD_INT 3
57011: PUSH
57012: LD_INT 4
57014: PUSH
57015: LD_INT 5
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: IN
57026: NOT
57027: OR
57028: PUSH
57029: LD_VAR 0 3
57033: PPUSH
57034: LD_VAR 0 4
57038: PPUSH
57039: CALL_OW 488
57043: NOT
57044: OR
57045: IFFALSE 57049
// exit ;
57047: GO 57766
// pom := GetBase ( depot ) ;
57049: LD_ADDR_VAR 0 10
57053: PUSH
57054: LD_VAR 0 1
57058: PPUSH
57059: CALL_OW 274
57063: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57064: LD_ADDR_VAR 0 11
57068: PUSH
57069: LD_VAR 0 2
57073: PPUSH
57074: LD_VAR 0 1
57078: PPUSH
57079: CALL_OW 248
57083: PPUSH
57084: CALL_OW 450
57088: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
57089: LD_VAR 0 10
57093: PPUSH
57094: LD_INT 1
57096: PPUSH
57097: CALL_OW 275
57101: PUSH
57102: LD_VAR 0 11
57106: PUSH
57107: LD_INT 1
57109: ARRAY
57110: GREATEREQUAL
57111: PUSH
57112: LD_VAR 0 10
57116: PPUSH
57117: LD_INT 2
57119: PPUSH
57120: CALL_OW 275
57124: PUSH
57125: LD_VAR 0 11
57129: PUSH
57130: LD_INT 2
57132: ARRAY
57133: GREATEREQUAL
57134: AND
57135: PUSH
57136: LD_VAR 0 10
57140: PPUSH
57141: LD_INT 3
57143: PPUSH
57144: CALL_OW 275
57148: PUSH
57149: LD_VAR 0 11
57153: PUSH
57154: LD_INT 3
57156: ARRAY
57157: GREATEREQUAL
57158: AND
57159: NOT
57160: IFFALSE 57164
// exit ;
57162: GO 57766
// if GetBType ( depot ) = b_depot then
57164: LD_VAR 0 1
57168: PPUSH
57169: CALL_OW 266
57173: PUSH
57174: LD_INT 0
57176: EQUAL
57177: IFFALSE 57189
// dist := 28 else
57179: LD_ADDR_VAR 0 14
57183: PUSH
57184: LD_INT 28
57186: ST_TO_ADDR
57187: GO 57197
// dist := 36 ;
57189: LD_ADDR_VAR 0 14
57193: PUSH
57194: LD_INT 36
57196: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
57197: LD_VAR 0 1
57201: PPUSH
57202: LD_VAR 0 3
57206: PPUSH
57207: LD_VAR 0 4
57211: PPUSH
57212: CALL_OW 297
57216: PUSH
57217: LD_VAR 0 14
57221: GREATER
57222: IFFALSE 57226
// exit ;
57224: GO 57766
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
57226: LD_ADDR_VAR 0 12
57230: PUSH
57231: LD_VAR 0 2
57235: PPUSH
57236: LD_VAR 0 3
57240: PPUSH
57241: LD_VAR 0 4
57245: PPUSH
57246: LD_VAR 0 5
57250: PPUSH
57251: LD_VAR 0 1
57255: PPUSH
57256: CALL_OW 248
57260: PPUSH
57261: LD_INT 0
57263: PPUSH
57264: CALL 57771 0 6
57268: ST_TO_ADDR
// if not hexes then
57269: LD_VAR 0 12
57273: NOT
57274: IFFALSE 57278
// exit ;
57276: GO 57766
// hex := GetHexInfo ( x , y ) ;
57278: LD_ADDR_VAR 0 15
57282: PUSH
57283: LD_VAR 0 3
57287: PPUSH
57288: LD_VAR 0 4
57292: PPUSH
57293: CALL_OW 546
57297: ST_TO_ADDR
// if hex [ 1 ] then
57298: LD_VAR 0 15
57302: PUSH
57303: LD_INT 1
57305: ARRAY
57306: IFFALSE 57310
// exit ;
57308: GO 57766
// height := hex [ 2 ] ;
57310: LD_ADDR_VAR 0 13
57314: PUSH
57315: LD_VAR 0 15
57319: PUSH
57320: LD_INT 2
57322: ARRAY
57323: ST_TO_ADDR
// for i = 1 to hexes do
57324: LD_ADDR_VAR 0 7
57328: PUSH
57329: DOUBLE
57330: LD_INT 1
57332: DEC
57333: ST_TO_ADDR
57334: LD_VAR 0 12
57338: PUSH
57339: FOR_TO
57340: IFFALSE 57670
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
57342: LD_VAR 0 12
57346: PUSH
57347: LD_VAR 0 7
57351: ARRAY
57352: PUSH
57353: LD_INT 1
57355: ARRAY
57356: PPUSH
57357: LD_VAR 0 12
57361: PUSH
57362: LD_VAR 0 7
57366: ARRAY
57367: PUSH
57368: LD_INT 2
57370: ARRAY
57371: PPUSH
57372: CALL_OW 488
57376: NOT
57377: PUSH
57378: LD_VAR 0 12
57382: PUSH
57383: LD_VAR 0 7
57387: ARRAY
57388: PUSH
57389: LD_INT 1
57391: ARRAY
57392: PPUSH
57393: LD_VAR 0 12
57397: PUSH
57398: LD_VAR 0 7
57402: ARRAY
57403: PUSH
57404: LD_INT 2
57406: ARRAY
57407: PPUSH
57408: CALL_OW 428
57412: PUSH
57413: LD_INT 0
57415: GREATER
57416: OR
57417: PUSH
57418: LD_VAR 0 12
57422: PUSH
57423: LD_VAR 0 7
57427: ARRAY
57428: PUSH
57429: LD_INT 1
57431: ARRAY
57432: PPUSH
57433: LD_VAR 0 12
57437: PUSH
57438: LD_VAR 0 7
57442: ARRAY
57443: PUSH
57444: LD_INT 2
57446: ARRAY
57447: PPUSH
57448: CALL_OW 351
57452: OR
57453: IFFALSE 57459
// exit ;
57455: POP
57456: POP
57457: GO 57766
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57459: LD_ADDR_VAR 0 8
57463: PUSH
57464: LD_VAR 0 12
57468: PUSH
57469: LD_VAR 0 7
57473: ARRAY
57474: PUSH
57475: LD_INT 1
57477: ARRAY
57478: PPUSH
57479: LD_VAR 0 12
57483: PUSH
57484: LD_VAR 0 7
57488: ARRAY
57489: PUSH
57490: LD_INT 2
57492: ARRAY
57493: PPUSH
57494: CALL_OW 546
57498: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
57499: LD_VAR 0 8
57503: PUSH
57504: LD_INT 1
57506: ARRAY
57507: PUSH
57508: LD_VAR 0 8
57512: PUSH
57513: LD_INT 2
57515: ARRAY
57516: PUSH
57517: LD_VAR 0 13
57521: PUSH
57522: LD_INT 2
57524: PLUS
57525: GREATER
57526: OR
57527: PUSH
57528: LD_VAR 0 8
57532: PUSH
57533: LD_INT 2
57535: ARRAY
57536: PUSH
57537: LD_VAR 0 13
57541: PUSH
57542: LD_INT 2
57544: MINUS
57545: LESS
57546: OR
57547: PUSH
57548: LD_VAR 0 8
57552: PUSH
57553: LD_INT 3
57555: ARRAY
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: LD_INT 8
57562: PUSH
57563: LD_INT 9
57565: PUSH
57566: LD_INT 10
57568: PUSH
57569: LD_INT 11
57571: PUSH
57572: LD_INT 12
57574: PUSH
57575: LD_INT 13
57577: PUSH
57578: LD_INT 16
57580: PUSH
57581: LD_INT 17
57583: PUSH
57584: LD_INT 18
57586: PUSH
57587: LD_INT 19
57589: PUSH
57590: LD_INT 20
57592: PUSH
57593: LD_INT 21
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: IN
57611: NOT
57612: OR
57613: PUSH
57614: LD_VAR 0 8
57618: PUSH
57619: LD_INT 5
57621: ARRAY
57622: NOT
57623: OR
57624: PUSH
57625: LD_VAR 0 8
57629: PUSH
57630: LD_INT 6
57632: ARRAY
57633: PUSH
57634: LD_INT 1
57636: PUSH
57637: LD_INT 2
57639: PUSH
57640: LD_INT 7
57642: PUSH
57643: LD_INT 9
57645: PUSH
57646: LD_INT 10
57648: PUSH
57649: LD_INT 11
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: IN
57660: NOT
57661: OR
57662: IFFALSE 57668
// exit ;
57664: POP
57665: POP
57666: GO 57766
// end ;
57668: GO 57339
57670: POP
57671: POP
// side := GetSide ( depot ) ;
57672: LD_ADDR_VAR 0 9
57676: PUSH
57677: LD_VAR 0 1
57681: PPUSH
57682: CALL_OW 255
57686: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
57687: LD_VAR 0 9
57691: PPUSH
57692: LD_VAR 0 3
57696: PPUSH
57697: LD_VAR 0 4
57701: PPUSH
57702: LD_INT 20
57704: PPUSH
57705: CALL 50087 0 4
57709: PUSH
57710: LD_INT 4
57712: ARRAY
57713: IFFALSE 57717
// exit ;
57715: GO 57766
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
57717: LD_VAR 0 2
57721: PUSH
57722: LD_INT 29
57724: PUSH
57725: LD_INT 30
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: IN
57732: PUSH
57733: LD_VAR 0 3
57737: PPUSH
57738: LD_VAR 0 4
57742: PPUSH
57743: LD_VAR 0 9
57747: PPUSH
57748: CALL_OW 440
57752: NOT
57753: AND
57754: IFFALSE 57758
// exit ;
57756: GO 57766
// result := true ;
57758: LD_ADDR_VAR 0 6
57762: PUSH
57763: LD_INT 1
57765: ST_TO_ADDR
// end ;
57766: LD_VAR 0 6
57770: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
57771: LD_INT 0
57773: PPUSH
57774: PPUSH
57775: PPUSH
57776: PPUSH
57777: PPUSH
57778: PPUSH
57779: PPUSH
57780: PPUSH
57781: PPUSH
57782: PPUSH
57783: PPUSH
57784: PPUSH
57785: PPUSH
57786: PPUSH
57787: PPUSH
57788: PPUSH
57789: PPUSH
57790: PPUSH
57791: PPUSH
57792: PPUSH
57793: PPUSH
57794: PPUSH
57795: PPUSH
57796: PPUSH
57797: PPUSH
57798: PPUSH
57799: PPUSH
57800: PPUSH
57801: PPUSH
57802: PPUSH
57803: PPUSH
57804: PPUSH
57805: PPUSH
57806: PPUSH
57807: PPUSH
57808: PPUSH
57809: PPUSH
57810: PPUSH
57811: PPUSH
57812: PPUSH
57813: PPUSH
57814: PPUSH
57815: PPUSH
57816: PPUSH
57817: PPUSH
57818: PPUSH
57819: PPUSH
57820: PPUSH
57821: PPUSH
57822: PPUSH
57823: PPUSH
57824: PPUSH
57825: PPUSH
57826: PPUSH
57827: PPUSH
57828: PPUSH
57829: PPUSH
57830: PPUSH
// result = [ ] ;
57831: LD_ADDR_VAR 0 7
57835: PUSH
57836: EMPTY
57837: ST_TO_ADDR
// temp_list = [ ] ;
57838: LD_ADDR_VAR 0 9
57842: PUSH
57843: EMPTY
57844: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57845: LD_VAR 0 4
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: LD_INT 2
57858: PUSH
57859: LD_INT 3
57861: PUSH
57862: LD_INT 4
57864: PUSH
57865: LD_INT 5
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: IN
57876: NOT
57877: PUSH
57878: LD_VAR 0 1
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: IN
57893: PUSH
57894: LD_VAR 0 5
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: LD_INT 2
57904: PUSH
57905: LD_INT 3
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: LIST
57912: IN
57913: NOT
57914: AND
57915: OR
57916: IFFALSE 57920
// exit ;
57918: GO 76311
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57920: LD_VAR 0 1
57924: PUSH
57925: LD_INT 6
57927: PUSH
57928: LD_INT 7
57930: PUSH
57931: LD_INT 8
57933: PUSH
57934: LD_INT 13
57936: PUSH
57937: LD_INT 12
57939: PUSH
57940: LD_INT 15
57942: PUSH
57943: LD_INT 11
57945: PUSH
57946: LD_INT 14
57948: PUSH
57949: LD_INT 10
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: IN
57963: IFFALSE 57973
// btype = b_lab ;
57965: LD_ADDR_VAR 0 1
57969: PUSH
57970: LD_INT 6
57972: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57973: LD_VAR 0 6
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: LD_INT 2
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: LIST
57991: IN
57992: NOT
57993: PUSH
57994: LD_VAR 0 1
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: LD_INT 2
58007: PUSH
58008: LD_INT 3
58010: PUSH
58011: LD_INT 6
58013: PUSH
58014: LD_INT 36
58016: PUSH
58017: LD_INT 4
58019: PUSH
58020: LD_INT 5
58022: PUSH
58023: LD_INT 31
58025: PUSH
58026: LD_INT 32
58028: PUSH
58029: LD_INT 33
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: IN
58045: NOT
58046: PUSH
58047: LD_VAR 0 6
58051: PUSH
58052: LD_INT 1
58054: EQUAL
58055: AND
58056: OR
58057: PUSH
58058: LD_VAR 0 1
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: LD_INT 3
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: IN
58073: NOT
58074: PUSH
58075: LD_VAR 0 6
58079: PUSH
58080: LD_INT 2
58082: EQUAL
58083: AND
58084: OR
58085: IFFALSE 58095
// mode = 0 ;
58087: LD_ADDR_VAR 0 6
58091: PUSH
58092: LD_INT 0
58094: ST_TO_ADDR
// case mode of 0 :
58095: LD_VAR 0 6
58099: PUSH
58100: LD_INT 0
58102: DOUBLE
58103: EQUAL
58104: IFTRUE 58108
58106: GO 69561
58108: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58109: LD_ADDR_VAR 0 11
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: LD_INT 1
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: NEG
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 2
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: LD_INT 1
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: LD_INT 2
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: LD_INT 2
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 1
58244: NEG
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: LD_INT 3
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 0
58265: PUSH
58266: LD_INT 3
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: LD_INT 2
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58302: LD_ADDR_VAR 0 12
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: LD_INT 1
58322: NEG
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 1
58371: NEG
58372: PUSH
58373: LD_INT 1
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 2
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 2
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 1
58414: NEG
58415: PUSH
58416: LD_INT 1
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 2
58425: NEG
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 2
58436: NEG
58437: PUSH
58438: LD_INT 1
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 3
58459: NEG
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 3
58470: NEG
58471: PUSH
58472: LD_INT 1
58474: NEG
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58498: LD_ADDR_VAR 0 13
58502: PUSH
58503: LD_INT 0
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 1
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 0
58546: PUSH
58547: LD_INT 1
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 1
58556: NEG
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 1
58567: NEG
58568: PUSH
58569: LD_INT 1
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 1
58579: NEG
58580: PUSH
58581: LD_INT 2
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 2
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: LD_INT 2
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: LD_INT 2
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 2
58621: NEG
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 2
58633: NEG
58634: PUSH
58635: LD_INT 2
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 2
58645: NEG
58646: PUSH
58647: LD_INT 3
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 3
58657: NEG
58658: PUSH
58659: LD_INT 2
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 3
58669: NEG
58670: PUSH
58671: LD_INT 3
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58697: LD_ADDR_VAR 0 14
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 1
58755: NEG
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 1
58778: NEG
58779: PUSH
58780: LD_INT 2
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: LD_INT 2
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: LD_INT 2
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: LD_INT 2
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: LD_INT 1
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: LD_INT 3
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: LD_INT 3
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: LD_INT 2
58869: NEG
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58893: LD_ADDR_VAR 0 15
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: LD_INT 1
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: NEG
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 2
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 2
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 2
59016: NEG
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 2
59027: NEG
59028: PUSH
59029: LD_INT 1
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 2
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 3
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 3
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59086: LD_ADDR_VAR 0 16
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: LD_INT 1
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 1
59124: PUSH
59125: LD_INT 1
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: LD_INT 1
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: LD_INT 2
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 2
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 2
59189: PUSH
59190: LD_INT 2
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: LD_INT 2
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 2
59209: NEG
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 2
59221: NEG
59222: PUSH
59223: LD_INT 2
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 3
59233: PUSH
59234: LD_INT 2
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 3
59243: PUSH
59244: LD_INT 3
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 2
59253: PUSH
59254: LD_INT 3
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59279: LD_ADDR_VAR 0 17
59283: PUSH
59284: LD_INT 0
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: LD_INT 1
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 1
59360: NEG
59361: PUSH
59362: LD_INT 2
59364: NEG
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: LD_INT 2
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 2
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 2
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: LD_INT 2
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 2
59455: NEG
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 2
59466: NEG
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 2
59478: NEG
59479: PUSH
59480: LD_INT 2
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59509: LD_ADDR_VAR 0 18
59513: PUSH
59514: LD_INT 0
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 1
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 1
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: LD_INT 1
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: LD_INT 1
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 1
59590: NEG
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: LD_INT 2
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 2
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 2
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 2
59644: PUSH
59645: LD_INT 2
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: PUSH
59655: LD_INT 2
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: LD_INT 2
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 1
59674: NEG
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 2
59685: NEG
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 2
59696: NEG
59697: PUSH
59698: LD_INT 1
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: NEG
59709: PUSH
59710: LD_INT 2
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59739: LD_ADDR_VAR 0 19
59743: PUSH
59744: LD_INT 0
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: LD_INT 1
59759: NEG
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 1
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 1
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 1
59797: NEG
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: NEG
59809: PUSH
59810: LD_INT 1
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: LD_INT 2
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: LD_INT 2
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: PUSH
59844: LD_INT 1
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: LD_INT 0
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 2
59864: PUSH
59865: LD_INT 1
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 2
59874: PUSH
59875: LD_INT 2
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: LD_INT 2
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 2
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 1
59904: NEG
59905: PUSH
59906: LD_INT 1
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 2
59915: NEG
59916: PUSH
59917: LD_INT 0
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 2
59926: NEG
59927: PUSH
59928: LD_INT 1
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 2
59938: NEG
59939: PUSH
59940: LD_INT 2
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59969: LD_ADDR_VAR 0 20
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: NEG
60039: PUSH
60040: LD_INT 1
60042: NEG
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: LD_INT 2
60054: NEG
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: LD_INT 2
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: LD_INT 1
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 2
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 2
60094: PUSH
60095: LD_INT 1
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: LD_INT 2
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: LD_INT 2
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: LD_INT 0
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 2
60168: NEG
60169: PUSH
60170: LD_INT 2
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60199: LD_ADDR_VAR 0 21
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: LD_INT 1
60219: NEG
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 1
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 1
60237: PUSH
60238: LD_INT 1
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: LD_INT 1
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: NEG
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 1
60268: NEG
60269: PUSH
60270: LD_INT 1
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 1
60280: NEG
60281: PUSH
60282: LD_INT 2
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 0
60292: PUSH
60293: LD_INT 2
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 1
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 2
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 2
60324: PUSH
60325: LD_INT 1
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 2
60334: PUSH
60335: LD_INT 2
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 1
60344: PUSH
60345: LD_INT 2
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 0
60354: PUSH
60355: LD_INT 2
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 1
60364: NEG
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 2
60375: NEG
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 2
60386: NEG
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 2
60398: NEG
60399: PUSH
60400: LD_INT 2
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60429: LD_ADDR_VAR 0 22
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 1
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 1
60467: PUSH
60468: LD_INT 1
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: LD_INT 1
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 1
60487: NEG
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 1
60498: NEG
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 1
60510: NEG
60511: PUSH
60512: LD_INT 2
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: LD_INT 2
60525: NEG
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: PUSH
60534: LD_INT 1
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 2
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 2
60554: PUSH
60555: LD_INT 1
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 2
60564: PUSH
60565: LD_INT 2
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 1
60574: PUSH
60575: LD_INT 2
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 0
60584: PUSH
60585: LD_INT 2
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: NEG
60595: PUSH
60596: LD_INT 1
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 2
60605: NEG
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 2
60616: NEG
60617: PUSH
60618: LD_INT 1
60620: NEG
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 2
60628: NEG
60629: PUSH
60630: LD_INT 2
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60659: LD_ADDR_VAR 0 23
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: LD_INT 1
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 1
60728: NEG
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 1
60740: NEG
60741: PUSH
60742: LD_INT 2
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: LD_INT 2
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: LD_INT 1
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 2
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 2
60794: PUSH
60795: LD_INT 2
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 1
60804: PUSH
60805: LD_INT 2
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 0
60814: PUSH
60815: LD_INT 2
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 1
60824: NEG
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 2
60835: NEG
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 2
60846: NEG
60847: PUSH
60848: LD_INT 1
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 2
60858: NEG
60859: PUSH
60860: LD_INT 2
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 2
60870: NEG
60871: PUSH
60872: LD_INT 3
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 1
60882: NEG
60883: PUSH
60884: LD_INT 3
60886: NEG
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 1
60894: PUSH
60895: LD_INT 2
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 2
60905: PUSH
60906: LD_INT 1
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60939: LD_ADDR_VAR 0 24
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: LD_INT 1
60959: NEG
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: LD_INT 0
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 1
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 0
60987: PUSH
60988: LD_INT 1
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 1
60997: NEG
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 1
61020: NEG
61021: PUSH
61022: LD_INT 2
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: LD_INT 2
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 1
61043: PUSH
61044: LD_INT 1
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 2
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 2
61074: PUSH
61075: LD_INT 2
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: LD_INT 2
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: LD_INT 2
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 1
61104: NEG
61105: PUSH
61106: LD_INT 1
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 2
61115: NEG
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: LD_INT 1
61130: NEG
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 2
61138: NEG
61139: PUSH
61140: LD_INT 2
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 1
61150: PUSH
61151: LD_INT 2
61153: NEG
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 2
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 3
61172: PUSH
61173: LD_INT 1
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 3
61182: PUSH
61183: LD_INT 2
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
61215: LD_ADDR_VAR 0 25
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: LD_INT 0
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: LD_INT 1
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 1
61243: PUSH
61244: LD_INT 0
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 1
61253: PUSH
61254: LD_INT 1
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: NEG
61285: PUSH
61286: LD_INT 1
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: LD_INT 2
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 0
61308: PUSH
61309: LD_INT 2
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 2
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 2
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 2
61350: PUSH
61351: LD_INT 2
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: LD_INT 2
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: LD_INT 2
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 2
61391: NEG
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 2
61402: NEG
61403: PUSH
61404: LD_INT 1
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 2
61414: NEG
61415: PUSH
61416: LD_INT 2
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 3
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 3
61436: PUSH
61437: LD_INT 2
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 2
61446: PUSH
61447: LD_INT 3
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 1
61456: PUSH
61457: LD_INT 3
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61489: LD_ADDR_VAR 0 26
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 1
61517: PUSH
61518: LD_INT 0
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 1
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 0
61537: PUSH
61538: LD_INT 1
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 1
61547: NEG
61548: PUSH
61549: LD_INT 0
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: LD_INT 1
61562: NEG
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 1
61570: NEG
61571: PUSH
61572: LD_INT 2
61574: NEG
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: LD_INT 2
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 2
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 2
61614: PUSH
61615: LD_INT 1
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 2
61624: PUSH
61625: LD_INT 2
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: LD_INT 2
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: LD_INT 2
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 1
61654: NEG
61655: PUSH
61656: LD_INT 1
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 2
61665: NEG
61666: PUSH
61667: LD_INT 0
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 2
61676: NEG
61677: PUSH
61678: LD_INT 1
61680: NEG
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 2
61688: NEG
61689: PUSH
61690: LD_INT 2
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 2
61700: PUSH
61701: LD_INT 3
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 1
61710: PUSH
61711: LD_INT 3
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: PUSH
61722: LD_INT 2
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 2
61731: NEG
61732: PUSH
61733: LD_INT 1
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61765: LD_ADDR_VAR 0 27
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: LD_INT 1
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: LD_INT 1
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 1
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: LD_INT 1
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 1
61846: NEG
61847: PUSH
61848: LD_INT 2
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: LD_INT 2
61861: NEG
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: LD_INT 1
61872: NEG
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 2
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 2
61890: PUSH
61891: LD_INT 1
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 2
61900: PUSH
61901: LD_INT 2
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 1
61910: PUSH
61911: LD_INT 2
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 0
61920: PUSH
61921: LD_INT 2
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 1
61930: NEG
61931: PUSH
61932: LD_INT 1
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 2
61941: NEG
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 2
61952: NEG
61953: PUSH
61954: LD_INT 1
61956: NEG
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 2
61964: NEG
61965: PUSH
61966: LD_INT 2
61968: NEG
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 1
61976: NEG
61977: PUSH
61978: LD_INT 2
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 2
61987: NEG
61988: PUSH
61989: LD_INT 1
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 3
61998: NEG
61999: PUSH
62000: LD_INT 1
62002: NEG
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 3
62010: NEG
62011: PUSH
62012: LD_INT 2
62014: NEG
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62045: LD_ADDR_VAR 0 28
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: LD_INT 0
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: LD_INT 1
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 1
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 1
62083: PUSH
62084: LD_INT 1
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 1
62103: NEG
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 1
62114: NEG
62115: PUSH
62116: LD_INT 1
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: LD_INT 2
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: LD_INT 2
62141: NEG
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: LD_INT 1
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 2
62160: PUSH
62161: LD_INT 0
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 2
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 2
62180: PUSH
62181: LD_INT 2
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: LD_INT 2
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: LD_INT 2
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 1
62210: NEG
62211: PUSH
62212: LD_INT 1
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 2
62221: NEG
62222: PUSH
62223: LD_INT 0
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 2
62232: NEG
62233: PUSH
62234: LD_INT 1
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 2
62244: NEG
62245: PUSH
62246: LD_INT 2
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 2
62256: NEG
62257: PUSH
62258: LD_INT 3
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 1
62268: NEG
62269: PUSH
62270: LD_INT 3
62272: NEG
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 3
62280: NEG
62281: PUSH
62282: LD_INT 1
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 3
62292: NEG
62293: PUSH
62294: LD_INT 2
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62327: LD_ADDR_VAR 0 29
62331: PUSH
62332: LD_INT 0
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 0
62344: PUSH
62345: LD_INT 1
62347: NEG
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 1
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 1
62365: PUSH
62366: LD_INT 1
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 0
62375: PUSH
62376: LD_INT 1
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 1
62385: NEG
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 1
62396: NEG
62397: PUSH
62398: LD_INT 1
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 1
62408: NEG
62409: PUSH
62410: LD_INT 2
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 0
62420: PUSH
62421: LD_INT 2
62423: NEG
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 1
62431: PUSH
62432: LD_INT 1
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 2
62442: PUSH
62443: LD_INT 0
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 2
62452: PUSH
62453: LD_INT 1
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: LD_INT 2
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: LD_INT 2
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 1
62482: NEG
62483: PUSH
62484: LD_INT 1
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 2
62493: NEG
62494: PUSH
62495: LD_INT 1
62497: NEG
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 2
62505: NEG
62506: PUSH
62507: LD_INT 2
62509: NEG
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 2
62517: NEG
62518: PUSH
62519: LD_INT 3
62521: NEG
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 2
62529: PUSH
62530: LD_INT 1
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 3
62540: PUSH
62541: LD_INT 1
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 1
62550: PUSH
62551: LD_INT 3
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 1
62560: NEG
62561: PUSH
62562: LD_INT 2
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 3
62571: NEG
62572: PUSH
62573: LD_INT 2
62575: NEG
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62606: LD_ADDR_VAR 0 30
62610: PUSH
62611: LD_INT 0
62613: PUSH
62614: LD_INT 0
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 0
62623: PUSH
62624: LD_INT 1
62626: NEG
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 1
62634: PUSH
62635: LD_INT 0
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 1
62644: PUSH
62645: LD_INT 1
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 0
62654: PUSH
62655: LD_INT 1
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 1
62664: NEG
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 1
62675: NEG
62676: PUSH
62677: LD_INT 1
62679: NEG
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 1
62687: NEG
62688: PUSH
62689: LD_INT 2
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: LD_INT 2
62702: NEG
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: PUSH
62711: LD_INT 1
62713: NEG
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 2
62721: PUSH
62722: LD_INT 0
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 2
62731: PUSH
62732: LD_INT 1
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 2
62741: PUSH
62742: LD_INT 2
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 1
62751: PUSH
62752: LD_INT 2
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 2
62772: NEG
62773: PUSH
62774: LD_INT 0
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 2
62783: NEG
62784: PUSH
62785: LD_INT 1
62787: NEG
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 1
62795: NEG
62796: PUSH
62797: LD_INT 3
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 1
62807: PUSH
62808: LD_INT 2
62810: NEG
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 3
62818: PUSH
62819: LD_INT 2
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 2
62828: PUSH
62829: LD_INT 3
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 2
62838: NEG
62839: PUSH
62840: LD_INT 1
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 3
62849: NEG
62850: PUSH
62851: LD_INT 1
62853: NEG
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62884: LD_ADDR_VAR 0 31
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: LD_INT 0
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: LD_INT 1
62904: NEG
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 1
62922: PUSH
62923: LD_INT 1
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 0
62932: PUSH
62933: LD_INT 1
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 1
62942: NEG
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: NEG
62954: PUSH
62955: LD_INT 1
62957: NEG
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: LD_INT 2
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 1
62977: PUSH
62978: LD_INT 1
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 2
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 2
62998: PUSH
62999: LD_INT 1
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 2
63008: PUSH
63009: LD_INT 2
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 1
63018: PUSH
63019: LD_INT 2
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: LD_INT 2
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 1
63038: NEG
63039: PUSH
63040: LD_INT 1
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 2
63049: NEG
63050: PUSH
63051: LD_INT 1
63053: NEG
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 2
63061: NEG
63062: PUSH
63063: LD_INT 2
63065: NEG
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 2
63073: NEG
63074: PUSH
63075: LD_INT 3
63077: NEG
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: LD_INT 1
63088: NEG
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 3
63096: PUSH
63097: LD_INT 1
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: LD_INT 3
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 1
63116: NEG
63117: PUSH
63118: LD_INT 2
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 3
63127: NEG
63128: PUSH
63129: LD_INT 2
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63162: LD_ADDR_VAR 0 32
63166: PUSH
63167: LD_INT 0
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 0
63179: PUSH
63180: LD_INT 1
63182: NEG
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 1
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: LD_INT 1
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 1
63220: NEG
63221: PUSH
63222: LD_INT 0
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 1
63231: NEG
63232: PUSH
63233: LD_INT 1
63235: NEG
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 1
63243: NEG
63244: PUSH
63245: LD_INT 2
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: LD_INT 2
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 1
63266: PUSH
63267: LD_INT 1
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 2
63277: PUSH
63278: LD_INT 1
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 2
63287: PUSH
63288: LD_INT 2
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 1
63297: PUSH
63298: LD_INT 2
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: LD_INT 2
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 1
63317: NEG
63318: PUSH
63319: LD_INT 1
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 2
63328: NEG
63329: PUSH
63330: LD_INT 0
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 2
63339: NEG
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 1
63351: NEG
63352: PUSH
63353: LD_INT 3
63355: NEG
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: LD_INT 2
63366: NEG
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 3
63374: PUSH
63375: LD_INT 2
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 2
63384: PUSH
63385: LD_INT 3
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 2
63394: NEG
63395: PUSH
63396: LD_INT 1
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 3
63405: NEG
63406: PUSH
63407: LD_INT 1
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63440: LD_ADDR_VAR 0 33
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: LD_INT 1
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 1
63468: PUSH
63469: LD_INT 0
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: PUSH
63479: LD_INT 1
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 1
63498: NEG
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: LD_INT 1
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: LD_INT 2
63525: NEG
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 1
63533: PUSH
63534: LD_INT 1
63536: NEG
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 2
63544: PUSH
63545: LD_INT 0
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 2
63554: PUSH
63555: LD_INT 1
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 1
63564: PUSH
63565: LD_INT 2
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 0
63574: PUSH
63575: LD_INT 2
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 1
63584: NEG
63585: PUSH
63586: LD_INT 1
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 2
63595: NEG
63596: PUSH
63597: LD_INT 0
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 2
63606: NEG
63607: PUSH
63608: LD_INT 1
63610: NEG
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 2
63618: NEG
63619: PUSH
63620: LD_INT 2
63622: NEG
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 2
63630: NEG
63631: PUSH
63632: LD_INT 3
63634: NEG
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 2
63642: PUSH
63643: LD_INT 1
63645: NEG
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 3
63653: PUSH
63654: LD_INT 1
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: LD_INT 3
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 1
63673: NEG
63674: PUSH
63675: LD_INT 2
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 3
63684: NEG
63685: PUSH
63686: LD_INT 2
63688: NEG
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63719: LD_ADDR_VAR 0 34
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: LD_INT 0
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 0
63736: PUSH
63737: LD_INT 1
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 1
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: LD_INT 1
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: LD_INT 1
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: NEG
63778: PUSH
63779: LD_INT 0
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 1
63788: NEG
63789: PUSH
63790: LD_INT 1
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: LD_INT 2
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 0
63812: PUSH
63813: LD_INT 2
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: LD_INT 1
63826: NEG
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 2
63834: PUSH
63835: LD_INT 1
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 2
63844: PUSH
63845: LD_INT 2
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 1
63854: PUSH
63855: LD_INT 2
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 1
63864: NEG
63865: PUSH
63866: LD_INT 1
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 2
63875: NEG
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 2
63886: NEG
63887: PUSH
63888: LD_INT 1
63890: NEG
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 2
63898: NEG
63899: PUSH
63900: LD_INT 2
63902: NEG
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 1
63910: NEG
63911: PUSH
63912: LD_INT 3
63914: NEG
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 1
63922: PUSH
63923: LD_INT 2
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 3
63933: PUSH
63934: LD_INT 2
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 2
63943: PUSH
63944: LD_INT 3
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 2
63953: NEG
63954: PUSH
63955: LD_INT 1
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 3
63964: NEG
63965: PUSH
63966: LD_INT 1
63968: NEG
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63999: LD_ADDR_VAR 0 35
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 0
64016: PUSH
64017: LD_INT 1
64019: NEG
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 1
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 1
64037: PUSH
64038: LD_INT 1
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 0
64047: PUSH
64048: LD_INT 1
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 1
64057: NEG
64058: PUSH
64059: LD_INT 0
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 1
64068: NEG
64069: PUSH
64070: LD_INT 1
64072: NEG
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 2
64080: PUSH
64081: LD_INT 1
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 2
64090: NEG
64091: PUSH
64092: LD_INT 1
64094: NEG
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64111: LD_ADDR_VAR 0 36
64115: PUSH
64116: LD_INT 0
64118: PUSH
64119: LD_INT 0
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 0
64128: PUSH
64129: LD_INT 1
64131: NEG
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 1
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 1
64149: PUSH
64150: LD_INT 1
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 0
64159: PUSH
64160: LD_INT 1
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 1
64169: NEG
64170: PUSH
64171: LD_INT 0
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 1
64180: NEG
64181: PUSH
64182: LD_INT 1
64184: NEG
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 1
64192: NEG
64193: PUSH
64194: LD_INT 2
64196: NEG
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 1
64204: PUSH
64205: LD_INT 2
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64223: LD_ADDR_VAR 0 37
64227: PUSH
64228: LD_INT 0
64230: PUSH
64231: LD_INT 0
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 0
64240: PUSH
64241: LD_INT 1
64243: NEG
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 1
64251: PUSH
64252: LD_INT 0
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 1
64261: PUSH
64262: LD_INT 1
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 0
64271: PUSH
64272: LD_INT 1
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 1
64281: NEG
64282: PUSH
64283: LD_INT 0
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 1
64292: NEG
64293: PUSH
64294: LD_INT 1
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 1
64304: PUSH
64305: LD_INT 1
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 1
64315: NEG
64316: PUSH
64317: LD_INT 1
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64335: LD_ADDR_VAR 0 38
64339: PUSH
64340: LD_INT 0
64342: PUSH
64343: LD_INT 0
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: LD_INT 1
64355: NEG
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 1
64363: PUSH
64364: LD_INT 0
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 1
64373: PUSH
64374: LD_INT 1
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 0
64383: PUSH
64384: LD_INT 1
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 1
64393: NEG
64394: PUSH
64395: LD_INT 0
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 1
64404: NEG
64405: PUSH
64406: LD_INT 1
64408: NEG
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 2
64416: PUSH
64417: LD_INT 1
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 2
64426: NEG
64427: PUSH
64428: LD_INT 1
64430: NEG
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64447: LD_ADDR_VAR 0 39
64451: PUSH
64452: LD_INT 0
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 0
64464: PUSH
64465: LD_INT 1
64467: NEG
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 1
64475: PUSH
64476: LD_INT 0
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 1
64485: PUSH
64486: LD_INT 1
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 0
64495: PUSH
64496: LD_INT 1
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 1
64505: NEG
64506: PUSH
64507: LD_INT 0
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 1
64516: NEG
64517: PUSH
64518: LD_INT 1
64520: NEG
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 1
64528: NEG
64529: PUSH
64530: LD_INT 2
64532: NEG
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 1
64540: PUSH
64541: LD_INT 2
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64559: LD_ADDR_VAR 0 40
64563: PUSH
64564: LD_INT 0
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 0
64576: PUSH
64577: LD_INT 1
64579: NEG
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 1
64587: PUSH
64588: LD_INT 0
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 1
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 0
64607: PUSH
64608: LD_INT 1
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 1
64617: NEG
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 1
64628: NEG
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 1
64640: PUSH
64641: LD_INT 1
64643: NEG
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 1
64651: NEG
64652: PUSH
64653: LD_INT 1
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64671: LD_ADDR_VAR 0 41
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: LD_INT 0
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: LD_INT 1
64691: NEG
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 1
64699: PUSH
64700: LD_INT 0
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 1
64709: PUSH
64710: LD_INT 1
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 0
64719: PUSH
64720: LD_INT 1
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 1
64729: NEG
64730: PUSH
64731: LD_INT 0
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 1
64740: NEG
64741: PUSH
64742: LD_INT 1
64744: NEG
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 1
64752: NEG
64753: PUSH
64754: LD_INT 2
64756: NEG
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 1
64764: PUSH
64765: LD_INT 1
64767: NEG
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 2
64775: PUSH
64776: LD_INT 0
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 2
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 2
64795: PUSH
64796: LD_INT 2
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 1
64805: PUSH
64806: LD_INT 2
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 1
64815: NEG
64816: PUSH
64817: LD_INT 1
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 2
64826: NEG
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 2
64837: NEG
64838: PUSH
64839: LD_INT 1
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 2
64849: NEG
64850: PUSH
64851: LD_INT 2
64853: NEG
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 2
64861: NEG
64862: PUSH
64863: LD_INT 3
64865: NEG
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 2
64873: PUSH
64874: LD_INT 1
64876: NEG
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 3
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 3
64894: PUSH
64895: LD_INT 1
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 3
64904: PUSH
64905: LD_INT 2
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 3
64914: PUSH
64915: LD_INT 3
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 2
64924: PUSH
64925: LD_INT 3
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 2
64934: NEG
64935: PUSH
64936: LD_INT 1
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 3
64945: NEG
64946: PUSH
64947: LD_INT 0
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 3
64956: NEG
64957: PUSH
64958: LD_INT 1
64960: NEG
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 3
64968: NEG
64969: PUSH
64970: LD_INT 2
64972: NEG
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 3
64980: NEG
64981: PUSH
64982: LD_INT 3
64984: NEG
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65021: LD_ADDR_VAR 0 42
65025: PUSH
65026: LD_INT 0
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 0
65038: PUSH
65039: LD_INT 1
65041: NEG
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 1
65049: PUSH
65050: LD_INT 0
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 1
65059: PUSH
65060: LD_INT 1
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 0
65069: PUSH
65070: LD_INT 1
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 1
65079: NEG
65080: PUSH
65081: LD_INT 0
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 1
65090: NEG
65091: PUSH
65092: LD_INT 1
65094: NEG
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 1
65102: NEG
65103: PUSH
65104: LD_INT 2
65106: NEG
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 0
65114: PUSH
65115: LD_INT 2
65117: NEG
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 1
65125: PUSH
65126: LD_INT 1
65128: NEG
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 2
65136: PUSH
65137: LD_INT 1
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 2
65146: PUSH
65147: LD_INT 2
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 1
65156: PUSH
65157: LD_INT 2
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 0
65166: PUSH
65167: LD_INT 2
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 1
65176: NEG
65177: PUSH
65178: LD_INT 1
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 2
65187: NEG
65188: PUSH
65189: LD_INT 1
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 2
65199: NEG
65200: PUSH
65201: LD_INT 2
65203: NEG
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 2
65211: NEG
65212: PUSH
65213: LD_INT 3
65215: NEG
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 1
65223: NEG
65224: PUSH
65225: LD_INT 3
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 0
65235: PUSH
65236: LD_INT 3
65238: NEG
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 1
65246: PUSH
65247: LD_INT 2
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 3
65257: PUSH
65258: LD_INT 2
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 3
65267: PUSH
65268: LD_INT 3
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 2
65277: PUSH
65278: LD_INT 3
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 1
65287: PUSH
65288: LD_INT 3
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 0
65297: PUSH
65298: LD_INT 3
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 1
65307: NEG
65308: PUSH
65309: LD_INT 2
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 3
65318: NEG
65319: PUSH
65320: LD_INT 2
65322: NEG
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 3
65330: NEG
65331: PUSH
65332: LD_INT 3
65334: NEG
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65371: LD_ADDR_VAR 0 43
65375: PUSH
65376: LD_INT 0
65378: PUSH
65379: LD_INT 0
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 0
65388: PUSH
65389: LD_INT 1
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 1
65399: PUSH
65400: LD_INT 0
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 1
65409: PUSH
65410: LD_INT 1
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 0
65419: PUSH
65420: LD_INT 1
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 1
65429: NEG
65430: PUSH
65431: LD_INT 0
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 1
65440: NEG
65441: PUSH
65442: LD_INT 1
65444: NEG
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 1
65452: NEG
65453: PUSH
65454: LD_INT 2
65456: NEG
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 0
65464: PUSH
65465: LD_INT 2
65467: NEG
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 1
65475: PUSH
65476: LD_INT 1
65478: NEG
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 2
65486: PUSH
65487: LD_INT 0
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 2
65496: PUSH
65497: LD_INT 1
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 1
65506: PUSH
65507: LD_INT 2
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 0
65516: PUSH
65517: LD_INT 2
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: PUSH
65528: LD_INT 1
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 2
65537: NEG
65538: PUSH
65539: LD_INT 0
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 2
65548: NEG
65549: PUSH
65550: LD_INT 1
65552: NEG
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 1
65560: NEG
65561: PUSH
65562: LD_INT 3
65564: NEG
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 0
65572: PUSH
65573: LD_INT 3
65575: NEG
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 1
65583: PUSH
65584: LD_INT 2
65586: NEG
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 2
65594: PUSH
65595: LD_INT 1
65597: NEG
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 3
65605: PUSH
65606: LD_INT 0
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 3
65615: PUSH
65616: LD_INT 1
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 1
65625: PUSH
65626: LD_INT 3
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 0
65635: PUSH
65636: LD_INT 3
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 1
65645: NEG
65646: PUSH
65647: LD_INT 2
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 2
65656: NEG
65657: PUSH
65658: LD_INT 1
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 3
65667: NEG
65668: PUSH
65669: LD_INT 0
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 3
65678: NEG
65679: PUSH
65680: LD_INT 1
65682: NEG
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65719: LD_ADDR_VAR 0 44
65723: PUSH
65724: LD_INT 0
65726: PUSH
65727: LD_INT 0
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 0
65736: PUSH
65737: LD_INT 1
65739: NEG
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 1
65747: PUSH
65748: LD_INT 0
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 1
65757: PUSH
65758: LD_INT 1
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 0
65767: PUSH
65768: LD_INT 1
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 1
65777: NEG
65778: PUSH
65779: LD_INT 0
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 1
65788: NEG
65789: PUSH
65790: LD_INT 1
65792: NEG
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 1
65800: NEG
65801: PUSH
65802: LD_INT 2
65804: NEG
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 1
65812: PUSH
65813: LD_INT 1
65815: NEG
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 2
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 2
65833: PUSH
65834: LD_INT 1
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 2
65843: PUSH
65844: LD_INT 2
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 1
65853: PUSH
65854: LD_INT 2
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 1
65863: NEG
65864: PUSH
65865: LD_INT 1
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 2
65874: NEG
65875: PUSH
65876: LD_INT 0
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 2
65885: NEG
65886: PUSH
65887: LD_INT 1
65889: NEG
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 2
65897: NEG
65898: PUSH
65899: LD_INT 2
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 2
65909: NEG
65910: PUSH
65911: LD_INT 3
65913: NEG
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 2
65921: PUSH
65922: LD_INT 1
65924: NEG
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 3
65932: PUSH
65933: LD_INT 0
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 3
65942: PUSH
65943: LD_INT 1
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 3
65952: PUSH
65953: LD_INT 2
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 3
65962: PUSH
65963: LD_INT 3
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 2
65972: PUSH
65973: LD_INT 3
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 2
65982: NEG
65983: PUSH
65984: LD_INT 1
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 3
65993: NEG
65994: PUSH
65995: LD_INT 0
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 3
66004: NEG
66005: PUSH
66006: LD_INT 1
66008: NEG
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 3
66016: NEG
66017: PUSH
66018: LD_INT 2
66020: NEG
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 3
66028: NEG
66029: PUSH
66030: LD_INT 3
66032: NEG
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66069: LD_ADDR_VAR 0 45
66073: PUSH
66074: LD_INT 0
66076: PUSH
66077: LD_INT 0
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 0
66086: PUSH
66087: LD_INT 1
66089: NEG
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 1
66097: PUSH
66098: LD_INT 0
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 1
66107: PUSH
66108: LD_INT 1
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 0
66117: PUSH
66118: LD_INT 1
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 1
66127: NEG
66128: PUSH
66129: LD_INT 0
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 1
66138: NEG
66139: PUSH
66140: LD_INT 1
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 1
66150: NEG
66151: PUSH
66152: LD_INT 2
66154: NEG
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 0
66162: PUSH
66163: LD_INT 2
66165: NEG
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 1
66173: PUSH
66174: LD_INT 1
66176: NEG
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 2
66184: PUSH
66185: LD_INT 1
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 2
66194: PUSH
66195: LD_INT 2
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 1
66204: PUSH
66205: LD_INT 2
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 0
66214: PUSH
66215: LD_INT 2
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 1
66224: NEG
66225: PUSH
66226: LD_INT 1
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 2
66235: NEG
66236: PUSH
66237: LD_INT 1
66239: NEG
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 2
66247: NEG
66248: PUSH
66249: LD_INT 2
66251: NEG
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 2
66259: NEG
66260: PUSH
66261: LD_INT 3
66263: NEG
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 1
66271: NEG
66272: PUSH
66273: LD_INT 3
66275: NEG
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 0
66283: PUSH
66284: LD_INT 3
66286: NEG
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 1
66294: PUSH
66295: LD_INT 2
66297: NEG
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 3
66305: PUSH
66306: LD_INT 2
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 3
66315: PUSH
66316: LD_INT 3
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 2
66325: PUSH
66326: LD_INT 3
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 1
66335: PUSH
66336: LD_INT 3
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: LD_INT 3
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 1
66355: NEG
66356: PUSH
66357: LD_INT 2
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 3
66366: NEG
66367: PUSH
66368: LD_INT 2
66370: NEG
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 3
66378: NEG
66379: PUSH
66380: LD_INT 3
66382: NEG
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66419: LD_ADDR_VAR 0 46
66423: PUSH
66424: LD_INT 0
66426: PUSH
66427: LD_INT 0
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 0
66436: PUSH
66437: LD_INT 1
66439: NEG
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 1
66447: PUSH
66448: LD_INT 0
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 1
66457: PUSH
66458: LD_INT 1
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 0
66467: PUSH
66468: LD_INT 1
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 1
66477: NEG
66478: PUSH
66479: LD_INT 0
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 1
66488: NEG
66489: PUSH
66490: LD_INT 1
66492: NEG
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 1
66500: NEG
66501: PUSH
66502: LD_INT 2
66504: NEG
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 0
66512: PUSH
66513: LD_INT 2
66515: NEG
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 1
66523: PUSH
66524: LD_INT 1
66526: NEG
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 2
66534: PUSH
66535: LD_INT 0
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 2
66544: PUSH
66545: LD_INT 1
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 1
66554: PUSH
66555: LD_INT 2
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 0
66564: PUSH
66565: LD_INT 2
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 1
66574: NEG
66575: PUSH
66576: LD_INT 1
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 2
66585: NEG
66586: PUSH
66587: LD_INT 0
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 2
66596: NEG
66597: PUSH
66598: LD_INT 1
66600: NEG
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 1
66608: NEG
66609: PUSH
66610: LD_INT 3
66612: NEG
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 0
66620: PUSH
66621: LD_INT 3
66623: NEG
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 1
66631: PUSH
66632: LD_INT 2
66634: NEG
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 2
66642: PUSH
66643: LD_INT 1
66645: NEG
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 3
66653: PUSH
66654: LD_INT 0
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 3
66663: PUSH
66664: LD_INT 1
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: LD_INT 1
66673: PUSH
66674: LD_INT 3
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 0
66683: PUSH
66684: LD_INT 3
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 1
66693: NEG
66694: PUSH
66695: LD_INT 2
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 2
66704: NEG
66705: PUSH
66706: LD_INT 1
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 3
66715: NEG
66716: PUSH
66717: LD_INT 0
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 3
66726: NEG
66727: PUSH
66728: LD_INT 1
66730: NEG
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66767: LD_ADDR_VAR 0 47
66771: PUSH
66772: LD_INT 0
66774: PUSH
66775: LD_INT 0
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 0
66784: PUSH
66785: LD_INT 1
66787: NEG
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 1
66795: PUSH
66796: LD_INT 0
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 1
66805: PUSH
66806: LD_INT 1
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 0
66815: PUSH
66816: LD_INT 1
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 1
66825: NEG
66826: PUSH
66827: LD_INT 0
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 1
66836: NEG
66837: PUSH
66838: LD_INT 1
66840: NEG
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 1
66848: NEG
66849: PUSH
66850: LD_INT 2
66852: NEG
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 0
66860: PUSH
66861: LD_INT 2
66863: NEG
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 1
66871: PUSH
66872: LD_INT 1
66874: NEG
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 2
66882: NEG
66883: PUSH
66884: LD_INT 1
66886: NEG
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 2
66894: NEG
66895: PUSH
66896: LD_INT 2
66898: NEG
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66918: LD_ADDR_VAR 0 48
66922: PUSH
66923: LD_INT 0
66925: PUSH
66926: LD_INT 0
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 0
66935: PUSH
66936: LD_INT 1
66938: NEG
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 1
66946: PUSH
66947: LD_INT 0
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 1
66956: PUSH
66957: LD_INT 1
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: LD_INT 1
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 1
66976: NEG
66977: PUSH
66978: LD_INT 0
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 1
66987: NEG
66988: PUSH
66989: LD_INT 1
66991: NEG
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 1
66999: NEG
67000: PUSH
67001: LD_INT 2
67003: NEG
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 0
67011: PUSH
67012: LD_INT 2
67014: NEG
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 1
67022: PUSH
67023: LD_INT 1
67025: NEG
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 2
67033: PUSH
67034: LD_INT 0
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 2
67043: PUSH
67044: LD_INT 1
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67065: LD_ADDR_VAR 0 49
67069: PUSH
67070: LD_INT 0
67072: PUSH
67073: LD_INT 0
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 0
67082: PUSH
67083: LD_INT 1
67085: NEG
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 1
67093: PUSH
67094: LD_INT 0
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 1
67103: PUSH
67104: LD_INT 1
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 0
67113: PUSH
67114: LD_INT 1
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 1
67123: NEG
67124: PUSH
67125: LD_INT 0
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 1
67134: NEG
67135: PUSH
67136: LD_INT 1
67138: NEG
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 1
67146: PUSH
67147: LD_INT 1
67149: NEG
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 2
67157: PUSH
67158: LD_INT 0
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 2
67167: PUSH
67168: LD_INT 1
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 2
67177: PUSH
67178: LD_INT 2
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 1
67187: PUSH
67188: LD_INT 2
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67209: LD_ADDR_VAR 0 50
67213: PUSH
67214: LD_INT 0
67216: PUSH
67217: LD_INT 0
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 0
67226: PUSH
67227: LD_INT 1
67229: NEG
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 1
67237: PUSH
67238: LD_INT 0
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 1
67247: PUSH
67248: LD_INT 1
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 0
67257: PUSH
67258: LD_INT 1
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 1
67267: NEG
67268: PUSH
67269: LD_INT 0
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 1
67278: NEG
67279: PUSH
67280: LD_INT 1
67282: NEG
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 2
67290: PUSH
67291: LD_INT 1
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 2
67300: PUSH
67301: LD_INT 2
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 1
67310: PUSH
67311: LD_INT 2
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 0
67320: PUSH
67321: LD_INT 2
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 1
67330: NEG
67331: PUSH
67332: LD_INT 1
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67353: LD_ADDR_VAR 0 51
67357: PUSH
67358: LD_INT 0
67360: PUSH
67361: LD_INT 0
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 0
67370: PUSH
67371: LD_INT 1
67373: NEG
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 1
67381: PUSH
67382: LD_INT 0
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 1
67391: PUSH
67392: LD_INT 1
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 0
67401: PUSH
67402: LD_INT 1
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 1
67411: NEG
67412: PUSH
67413: LD_INT 0
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 1
67422: NEG
67423: PUSH
67424: LD_INT 1
67426: NEG
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 1
67434: PUSH
67435: LD_INT 2
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 0
67444: PUSH
67445: LD_INT 2
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 1
67454: NEG
67455: PUSH
67456: LD_INT 1
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 2
67465: NEG
67466: PUSH
67467: LD_INT 0
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 2
67476: NEG
67477: PUSH
67478: LD_INT 1
67480: NEG
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67500: LD_ADDR_VAR 0 52
67504: PUSH
67505: LD_INT 0
67507: PUSH
67508: LD_INT 0
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 0
67517: PUSH
67518: LD_INT 1
67520: NEG
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 1
67528: PUSH
67529: LD_INT 0
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 1
67538: PUSH
67539: LD_INT 1
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 0
67548: PUSH
67549: LD_INT 1
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 1
67558: NEG
67559: PUSH
67560: LD_INT 0
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 1
67569: NEG
67570: PUSH
67571: LD_INT 1
67573: NEG
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 1
67581: NEG
67582: PUSH
67583: LD_INT 2
67585: NEG
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 1
67593: NEG
67594: PUSH
67595: LD_INT 1
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 2
67604: NEG
67605: PUSH
67606: LD_INT 0
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 2
67615: NEG
67616: PUSH
67617: LD_INT 1
67619: NEG
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 2
67627: NEG
67628: PUSH
67629: LD_INT 2
67631: NEG
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67651: LD_ADDR_VAR 0 53
67655: PUSH
67656: LD_INT 0
67658: PUSH
67659: LD_INT 0
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 0
67668: PUSH
67669: LD_INT 1
67671: NEG
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 1
67679: PUSH
67680: LD_INT 0
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 1
67689: PUSH
67690: LD_INT 1
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 0
67699: PUSH
67700: LD_INT 1
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 1
67709: NEG
67710: PUSH
67711: LD_INT 0
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 1
67720: NEG
67721: PUSH
67722: LD_INT 1
67724: NEG
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 1
67732: NEG
67733: PUSH
67734: LD_INT 2
67736: NEG
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 0
67744: PUSH
67745: LD_INT 2
67747: NEG
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 1
67755: PUSH
67756: LD_INT 1
67758: NEG
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 2
67766: PUSH
67767: LD_INT 0
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 2
67776: PUSH
67777: LD_INT 1
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 2
67786: PUSH
67787: LD_INT 2
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 1
67796: PUSH
67797: LD_INT 2
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 0
67806: PUSH
67807: LD_INT 2
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 1
67816: NEG
67817: PUSH
67818: LD_INT 1
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 2
67827: NEG
67828: PUSH
67829: LD_INT 0
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 2
67838: NEG
67839: PUSH
67840: LD_INT 1
67842: NEG
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 2
67850: NEG
67851: PUSH
67852: LD_INT 2
67854: NEG
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67881: LD_ADDR_VAR 0 54
67885: PUSH
67886: LD_INT 0
67888: PUSH
67889: LD_INT 0
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 0
67898: PUSH
67899: LD_INT 1
67901: NEG
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 1
67909: PUSH
67910: LD_INT 0
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 1
67919: PUSH
67920: LD_INT 1
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 0
67929: PUSH
67930: LD_INT 1
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 1
67939: NEG
67940: PUSH
67941: LD_INT 0
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 1
67950: NEG
67951: PUSH
67952: LD_INT 1
67954: NEG
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 1
67962: NEG
67963: PUSH
67964: LD_INT 2
67966: NEG
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: LD_INT 0
67974: PUSH
67975: LD_INT 2
67977: NEG
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 1
67985: PUSH
67986: LD_INT 1
67988: NEG
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: LD_INT 2
67996: PUSH
67997: LD_INT 0
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 2
68006: PUSH
68007: LD_INT 1
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 2
68016: PUSH
68017: LD_INT 2
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 1
68026: PUSH
68027: LD_INT 2
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 0
68036: PUSH
68037: LD_INT 2
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: LD_INT 1
68046: NEG
68047: PUSH
68048: LD_INT 1
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 2
68057: NEG
68058: PUSH
68059: LD_INT 0
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 2
68068: NEG
68069: PUSH
68070: LD_INT 1
68072: NEG
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 2
68080: NEG
68081: PUSH
68082: LD_INT 2
68084: NEG
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68111: LD_ADDR_VAR 0 55
68115: PUSH
68116: LD_INT 0
68118: PUSH
68119: LD_INT 0
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 0
68128: PUSH
68129: LD_INT 1
68131: NEG
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 1
68139: PUSH
68140: LD_INT 0
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 1
68149: PUSH
68150: LD_INT 1
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 0
68159: PUSH
68160: LD_INT 1
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 1
68169: NEG
68170: PUSH
68171: LD_INT 0
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 1
68180: NEG
68181: PUSH
68182: LD_INT 1
68184: NEG
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 1
68192: NEG
68193: PUSH
68194: LD_INT 2
68196: NEG
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 0
68204: PUSH
68205: LD_INT 2
68207: NEG
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 1
68215: PUSH
68216: LD_INT 1
68218: NEG
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 2
68226: PUSH
68227: LD_INT 0
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 2
68236: PUSH
68237: LD_INT 1
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 2
68246: PUSH
68247: LD_INT 2
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 1
68256: PUSH
68257: LD_INT 2
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 0
68266: PUSH
68267: LD_INT 2
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 1
68276: NEG
68277: PUSH
68278: LD_INT 1
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 2
68287: NEG
68288: PUSH
68289: LD_INT 0
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 2
68298: NEG
68299: PUSH
68300: LD_INT 1
68302: NEG
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 2
68310: NEG
68311: PUSH
68312: LD_INT 2
68314: NEG
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68341: LD_ADDR_VAR 0 56
68345: PUSH
68346: LD_INT 0
68348: PUSH
68349: LD_INT 0
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 0
68358: PUSH
68359: LD_INT 1
68361: NEG
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 1
68369: PUSH
68370: LD_INT 0
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 1
68379: PUSH
68380: LD_INT 1
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 0
68389: PUSH
68390: LD_INT 1
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 1
68399: NEG
68400: PUSH
68401: LD_INT 0
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 1
68410: NEG
68411: PUSH
68412: LD_INT 1
68414: NEG
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 1
68422: NEG
68423: PUSH
68424: LD_INT 2
68426: NEG
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 0
68434: PUSH
68435: LD_INT 2
68437: NEG
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 1
68445: PUSH
68446: LD_INT 1
68448: NEG
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 2
68456: PUSH
68457: LD_INT 0
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 2
68466: PUSH
68467: LD_INT 1
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 2
68476: PUSH
68477: LD_INT 2
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 1
68486: PUSH
68487: LD_INT 2
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 0
68496: PUSH
68497: LD_INT 2
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 1
68506: NEG
68507: PUSH
68508: LD_INT 1
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 2
68517: NEG
68518: PUSH
68519: LD_INT 0
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 2
68528: NEG
68529: PUSH
68530: LD_INT 1
68532: NEG
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 2
68540: NEG
68541: PUSH
68542: LD_INT 2
68544: NEG
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68571: LD_ADDR_VAR 0 57
68575: PUSH
68576: LD_INT 0
68578: PUSH
68579: LD_INT 0
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 0
68588: PUSH
68589: LD_INT 1
68591: NEG
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 1
68599: PUSH
68600: LD_INT 0
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 1
68609: PUSH
68610: LD_INT 1
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 0
68619: PUSH
68620: LD_INT 1
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 1
68629: NEG
68630: PUSH
68631: LD_INT 0
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 1
68640: NEG
68641: PUSH
68642: LD_INT 1
68644: NEG
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 1
68652: NEG
68653: PUSH
68654: LD_INT 2
68656: NEG
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: LD_INT 0
68664: PUSH
68665: LD_INT 2
68667: NEG
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 1
68675: PUSH
68676: LD_INT 1
68678: NEG
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 2
68686: PUSH
68687: LD_INT 0
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 2
68696: PUSH
68697: LD_INT 1
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 2
68706: PUSH
68707: LD_INT 2
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 1
68716: PUSH
68717: LD_INT 2
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 0
68726: PUSH
68727: LD_INT 2
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 1
68736: NEG
68737: PUSH
68738: LD_INT 1
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 2
68747: NEG
68748: PUSH
68749: LD_INT 0
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 2
68758: NEG
68759: PUSH
68760: LD_INT 1
68762: NEG
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 2
68770: NEG
68771: PUSH
68772: LD_INT 2
68774: NEG
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68801: LD_ADDR_VAR 0 58
68805: PUSH
68806: LD_INT 0
68808: PUSH
68809: LD_INT 0
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 0
68818: PUSH
68819: LD_INT 1
68821: NEG
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 1
68829: PUSH
68830: LD_INT 0
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 1
68839: PUSH
68840: LD_INT 1
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 0
68849: PUSH
68850: LD_INT 1
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 1
68859: NEG
68860: PUSH
68861: LD_INT 0
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 1
68870: NEG
68871: PUSH
68872: LD_INT 1
68874: NEG
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 1
68882: NEG
68883: PUSH
68884: LD_INT 2
68886: NEG
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 0
68894: PUSH
68895: LD_INT 2
68897: NEG
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 1
68905: PUSH
68906: LD_INT 1
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 2
68916: PUSH
68917: LD_INT 0
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 2
68926: PUSH
68927: LD_INT 1
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 2
68936: PUSH
68937: LD_INT 2
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 1
68946: PUSH
68947: LD_INT 2
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 0
68956: PUSH
68957: LD_INT 2
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 1
68966: NEG
68967: PUSH
68968: LD_INT 1
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 2
68977: NEG
68978: PUSH
68979: LD_INT 0
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 2
68988: NEG
68989: PUSH
68990: LD_INT 1
68992: NEG
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 2
69000: NEG
69001: PUSH
69002: LD_INT 2
69004: NEG
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69031: LD_ADDR_VAR 0 59
69035: PUSH
69036: LD_INT 0
69038: PUSH
69039: LD_INT 0
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 0
69048: PUSH
69049: LD_INT 1
69051: NEG
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: PUSH
69057: LD_INT 1
69059: PUSH
69060: LD_INT 0
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: PUSH
69067: LD_INT 1
69069: PUSH
69070: LD_INT 1
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 0
69079: PUSH
69080: LD_INT 1
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 1
69089: NEG
69090: PUSH
69091: LD_INT 0
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 1
69100: NEG
69101: PUSH
69102: LD_INT 1
69104: NEG
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69119: LD_ADDR_VAR 0 60
69123: PUSH
69124: LD_INT 0
69126: PUSH
69127: LD_INT 0
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 0
69136: PUSH
69137: LD_INT 1
69139: NEG
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 1
69147: PUSH
69148: LD_INT 0
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 1
69157: PUSH
69158: LD_INT 1
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 0
69167: PUSH
69168: LD_INT 1
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 1
69177: NEG
69178: PUSH
69179: LD_INT 0
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 1
69188: NEG
69189: PUSH
69190: LD_INT 1
69192: NEG
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69207: LD_ADDR_VAR 0 61
69211: PUSH
69212: LD_INT 0
69214: PUSH
69215: LD_INT 0
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: LD_INT 0
69224: PUSH
69225: LD_INT 1
69227: NEG
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 1
69235: PUSH
69236: LD_INT 0
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 1
69245: PUSH
69246: LD_INT 1
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 0
69255: PUSH
69256: LD_INT 1
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 1
69265: NEG
69266: PUSH
69267: LD_INT 0
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 1
69276: NEG
69277: PUSH
69278: LD_INT 1
69280: NEG
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69295: LD_ADDR_VAR 0 62
69299: PUSH
69300: LD_INT 0
69302: PUSH
69303: LD_INT 0
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 0
69312: PUSH
69313: LD_INT 1
69315: NEG
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 1
69323: PUSH
69324: LD_INT 0
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 1
69333: PUSH
69334: LD_INT 1
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 0
69343: PUSH
69344: LD_INT 1
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 1
69353: NEG
69354: PUSH
69355: LD_INT 0
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 1
69364: NEG
69365: PUSH
69366: LD_INT 1
69368: NEG
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69383: LD_ADDR_VAR 0 63
69387: PUSH
69388: LD_INT 0
69390: PUSH
69391: LD_INT 0
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 0
69400: PUSH
69401: LD_INT 1
69403: NEG
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: LD_INT 1
69411: PUSH
69412: LD_INT 0
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 1
69421: PUSH
69422: LD_INT 1
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 0
69431: PUSH
69432: LD_INT 1
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 1
69441: NEG
69442: PUSH
69443: LD_INT 0
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 1
69452: NEG
69453: PUSH
69454: LD_INT 1
69456: NEG
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69471: LD_ADDR_VAR 0 64
69475: PUSH
69476: LD_INT 0
69478: PUSH
69479: LD_INT 0
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 0
69488: PUSH
69489: LD_INT 1
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 1
69499: PUSH
69500: LD_INT 0
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 1
69509: PUSH
69510: LD_INT 1
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 0
69519: PUSH
69520: LD_INT 1
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 1
69529: NEG
69530: PUSH
69531: LD_INT 0
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 1
69540: NEG
69541: PUSH
69542: LD_INT 1
69544: NEG
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: ST_TO_ADDR
// end ; 1 :
69559: GO 75456
69561: LD_INT 1
69563: DOUBLE
69564: EQUAL
69565: IFTRUE 69569
69567: GO 72192
69569: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69570: LD_ADDR_VAR 0 11
69574: PUSH
69575: LD_INT 1
69577: NEG
69578: PUSH
69579: LD_INT 3
69581: NEG
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 0
69589: PUSH
69590: LD_INT 3
69592: NEG
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 1
69600: PUSH
69601: LD_INT 2
69603: NEG
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: LIST
69613: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69614: LD_ADDR_VAR 0 12
69618: PUSH
69619: LD_INT 2
69621: PUSH
69622: LD_INT 1
69624: NEG
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 3
69632: PUSH
69633: LD_INT 0
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 3
69642: PUSH
69643: LD_INT 1
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: LIST
69654: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69655: LD_ADDR_VAR 0 13
69659: PUSH
69660: LD_INT 3
69662: PUSH
69663: LD_INT 2
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 3
69672: PUSH
69673: LD_INT 3
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 2
69682: PUSH
69683: LD_INT 3
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: LIST
69694: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69695: LD_ADDR_VAR 0 14
69699: PUSH
69700: LD_INT 1
69702: PUSH
69703: LD_INT 3
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 0
69712: PUSH
69713: LD_INT 3
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 1
69722: NEG
69723: PUSH
69724: LD_INT 2
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: LIST
69735: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69736: LD_ADDR_VAR 0 15
69740: PUSH
69741: LD_INT 2
69743: NEG
69744: PUSH
69745: LD_INT 1
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 3
69754: NEG
69755: PUSH
69756: LD_INT 0
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: PUSH
69763: LD_INT 3
69765: NEG
69766: PUSH
69767: LD_INT 1
69769: NEG
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: LIST
69779: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69780: LD_ADDR_VAR 0 16
69784: PUSH
69785: LD_INT 2
69787: NEG
69788: PUSH
69789: LD_INT 3
69791: NEG
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: LD_INT 3
69799: NEG
69800: PUSH
69801: LD_INT 2
69803: NEG
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_INT 3
69811: NEG
69812: PUSH
69813: LD_INT 3
69815: NEG
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: LIST
69825: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69826: LD_ADDR_VAR 0 17
69830: PUSH
69831: LD_INT 1
69833: NEG
69834: PUSH
69835: LD_INT 3
69837: NEG
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 0
69845: PUSH
69846: LD_INT 3
69848: NEG
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 1
69856: PUSH
69857: LD_INT 2
69859: NEG
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: LIST
69869: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69870: LD_ADDR_VAR 0 18
69874: PUSH
69875: LD_INT 2
69877: PUSH
69878: LD_INT 1
69880: NEG
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: LD_INT 3
69888: PUSH
69889: LD_INT 0
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 3
69898: PUSH
69899: LD_INT 1
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: LIST
69910: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69911: LD_ADDR_VAR 0 19
69915: PUSH
69916: LD_INT 3
69918: PUSH
69919: LD_INT 2
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 3
69928: PUSH
69929: LD_INT 3
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 2
69938: PUSH
69939: LD_INT 3
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: LIST
69950: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69951: LD_ADDR_VAR 0 20
69955: PUSH
69956: LD_INT 1
69958: PUSH
69959: LD_INT 3
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 0
69968: PUSH
69969: LD_INT 3
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 1
69978: NEG
69979: PUSH
69980: LD_INT 2
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: LIST
69991: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69992: LD_ADDR_VAR 0 21
69996: PUSH
69997: LD_INT 2
69999: NEG
70000: PUSH
70001: LD_INT 1
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 3
70010: NEG
70011: PUSH
70012: LD_INT 0
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 3
70021: NEG
70022: PUSH
70023: LD_INT 1
70025: NEG
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: LIST
70035: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70036: LD_ADDR_VAR 0 22
70040: PUSH
70041: LD_INT 2
70043: NEG
70044: PUSH
70045: LD_INT 3
70047: NEG
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 3
70055: NEG
70056: PUSH
70057: LD_INT 2
70059: NEG
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 3
70067: NEG
70068: PUSH
70069: LD_INT 3
70071: NEG
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: LIST
70081: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
70082: LD_ADDR_VAR 0 23
70086: PUSH
70087: LD_INT 0
70089: PUSH
70090: LD_INT 3
70092: NEG
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 1
70100: NEG
70101: PUSH
70102: LD_INT 4
70104: NEG
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 1
70112: PUSH
70113: LD_INT 3
70115: NEG
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: LIST
70125: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
70126: LD_ADDR_VAR 0 24
70130: PUSH
70131: LD_INT 3
70133: PUSH
70134: LD_INT 0
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 3
70143: PUSH
70144: LD_INT 1
70146: NEG
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: LD_INT 4
70154: PUSH
70155: LD_INT 1
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: LIST
70166: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
70167: LD_ADDR_VAR 0 25
70171: PUSH
70172: LD_INT 3
70174: PUSH
70175: LD_INT 3
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 4
70184: PUSH
70185: LD_INT 3
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 3
70194: PUSH
70195: LD_INT 4
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: LIST
70206: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
70207: LD_ADDR_VAR 0 26
70211: PUSH
70212: LD_INT 0
70214: PUSH
70215: LD_INT 3
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 1
70224: PUSH
70225: LD_INT 4
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 1
70234: NEG
70235: PUSH
70236: LD_INT 3
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: LIST
70247: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
70248: LD_ADDR_VAR 0 27
70252: PUSH
70253: LD_INT 3
70255: NEG
70256: PUSH
70257: LD_INT 0
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PUSH
70264: LD_INT 3
70266: NEG
70267: PUSH
70268: LD_INT 1
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: PUSH
70275: LD_INT 4
70277: NEG
70278: PUSH
70279: LD_INT 1
70281: NEG
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: LIST
70291: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
70292: LD_ADDR_VAR 0 28
70296: PUSH
70297: LD_INT 3
70299: NEG
70300: PUSH
70301: LD_INT 3
70303: NEG
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 3
70311: NEG
70312: PUSH
70313: LD_INT 4
70315: NEG
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 4
70323: NEG
70324: PUSH
70325: LD_INT 3
70327: NEG
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: LIST
70337: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
70338: LD_ADDR_VAR 0 29
70342: PUSH
70343: LD_INT 1
70345: NEG
70346: PUSH
70347: LD_INT 3
70349: NEG
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: LD_INT 0
70357: PUSH
70358: LD_INT 3
70360: NEG
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: LD_INT 1
70368: PUSH
70369: LD_INT 2
70371: NEG
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: LD_INT 1
70379: NEG
70380: PUSH
70381: LD_INT 4
70383: NEG
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: PUSH
70389: LD_INT 0
70391: PUSH
70392: LD_INT 4
70394: NEG
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 1
70402: PUSH
70403: LD_INT 3
70405: NEG
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 1
70413: NEG
70414: PUSH
70415: LD_INT 5
70417: NEG
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 0
70425: PUSH
70426: LD_INT 5
70428: NEG
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 1
70436: PUSH
70437: LD_INT 4
70439: NEG
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 1
70447: NEG
70448: PUSH
70449: LD_INT 6
70451: NEG
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: LD_INT 0
70459: PUSH
70460: LD_INT 6
70462: NEG
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 1
70470: PUSH
70471: LD_INT 5
70473: NEG
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
70493: LD_ADDR_VAR 0 30
70497: PUSH
70498: LD_INT 2
70500: PUSH
70501: LD_INT 1
70503: NEG
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: PUSH
70509: LD_INT 3
70511: PUSH
70512: LD_INT 0
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PUSH
70519: LD_INT 3
70521: PUSH
70522: LD_INT 1
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: PUSH
70529: LD_INT 3
70531: PUSH
70532: LD_INT 1
70534: NEG
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: PUSH
70540: LD_INT 4
70542: PUSH
70543: LD_INT 0
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 4
70552: PUSH
70553: LD_INT 1
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: LD_INT 4
70562: PUSH
70563: LD_INT 1
70565: NEG
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: LD_INT 5
70573: PUSH
70574: LD_INT 0
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 5
70583: PUSH
70584: LD_INT 1
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 5
70593: PUSH
70594: LD_INT 1
70596: NEG
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 6
70604: PUSH
70605: LD_INT 0
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 6
70614: PUSH
70615: LD_INT 1
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
70636: LD_ADDR_VAR 0 31
70640: PUSH
70641: LD_INT 3
70643: PUSH
70644: LD_INT 2
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 3
70653: PUSH
70654: LD_INT 3
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 2
70663: PUSH
70664: LD_INT 3
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: LD_INT 4
70673: PUSH
70674: LD_INT 3
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 4
70683: PUSH
70684: LD_INT 4
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 3
70693: PUSH
70694: LD_INT 4
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 5
70703: PUSH
70704: LD_INT 4
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: LD_INT 5
70713: PUSH
70714: LD_INT 5
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: LD_INT 4
70723: PUSH
70724: LD_INT 5
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 6
70733: PUSH
70734: LD_INT 5
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: PUSH
70741: LD_INT 6
70743: PUSH
70744: LD_INT 6
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 5
70753: PUSH
70754: LD_INT 6
70756: PUSH
70757: EMPTY
70758: LIST
70759: LIST
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
70775: LD_ADDR_VAR 0 32
70779: PUSH
70780: LD_INT 1
70782: PUSH
70783: LD_INT 3
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: LD_INT 0
70792: PUSH
70793: LD_INT 3
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PUSH
70800: LD_INT 1
70802: NEG
70803: PUSH
70804: LD_INT 2
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 1
70813: PUSH
70814: LD_INT 4
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 0
70823: PUSH
70824: LD_INT 4
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 1
70833: NEG
70834: PUSH
70835: LD_INT 3
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 1
70844: PUSH
70845: LD_INT 5
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: PUSH
70852: LD_INT 0
70854: PUSH
70855: LD_INT 5
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 1
70864: NEG
70865: PUSH
70866: LD_INT 4
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: LD_INT 1
70875: PUSH
70876: LD_INT 6
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: LD_INT 0
70885: PUSH
70886: LD_INT 6
70888: PUSH
70889: EMPTY
70890: LIST
70891: LIST
70892: PUSH
70893: LD_INT 1
70895: NEG
70896: PUSH
70897: LD_INT 5
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: LIST
70915: LIST
70916: LIST
70917: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70918: LD_ADDR_VAR 0 33
70922: PUSH
70923: LD_INT 2
70925: NEG
70926: PUSH
70927: LD_INT 1
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PUSH
70934: LD_INT 3
70936: NEG
70937: PUSH
70938: LD_INT 0
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: PUSH
70945: LD_INT 3
70947: NEG
70948: PUSH
70949: LD_INT 1
70951: NEG
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 3
70959: NEG
70960: PUSH
70961: LD_INT 1
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PUSH
70968: LD_INT 4
70970: NEG
70971: PUSH
70972: LD_INT 0
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 4
70981: NEG
70982: PUSH
70983: LD_INT 1
70985: NEG
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: LD_INT 4
70993: NEG
70994: PUSH
70995: LD_INT 1
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: PUSH
71002: LD_INT 5
71004: NEG
71005: PUSH
71006: LD_INT 0
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 5
71015: NEG
71016: PUSH
71017: LD_INT 1
71019: NEG
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PUSH
71025: LD_INT 5
71027: NEG
71028: PUSH
71029: LD_INT 1
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 6
71038: NEG
71039: PUSH
71040: LD_INT 0
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: PUSH
71047: LD_INT 6
71049: NEG
71050: PUSH
71051: LD_INT 1
71053: NEG
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
71073: LD_ADDR_VAR 0 34
71077: PUSH
71078: LD_INT 2
71080: NEG
71081: PUSH
71082: LD_INT 3
71084: NEG
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PUSH
71090: LD_INT 3
71092: NEG
71093: PUSH
71094: LD_INT 2
71096: NEG
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 3
71104: NEG
71105: PUSH
71106: LD_INT 3
71108: NEG
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 3
71116: NEG
71117: PUSH
71118: LD_INT 4
71120: NEG
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 4
71128: NEG
71129: PUSH
71130: LD_INT 3
71132: NEG
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 4
71140: NEG
71141: PUSH
71142: LD_INT 4
71144: NEG
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: PUSH
71150: LD_INT 4
71152: NEG
71153: PUSH
71154: LD_INT 5
71156: NEG
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: PUSH
71162: LD_INT 5
71164: NEG
71165: PUSH
71166: LD_INT 4
71168: NEG
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 5
71176: NEG
71177: PUSH
71178: LD_INT 5
71180: NEG
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 5
71188: NEG
71189: PUSH
71190: LD_INT 6
71192: NEG
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 6
71200: NEG
71201: PUSH
71202: LD_INT 5
71204: NEG
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 6
71212: NEG
71213: PUSH
71214: LD_INT 6
71216: NEG
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: LIST
71226: LIST
71227: LIST
71228: LIST
71229: LIST
71230: LIST
71231: LIST
71232: LIST
71233: LIST
71234: LIST
71235: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
71236: LD_ADDR_VAR 0 41
71240: PUSH
71241: LD_INT 0
71243: PUSH
71244: LD_INT 2
71246: NEG
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: LD_INT 1
71254: NEG
71255: PUSH
71256: LD_INT 3
71258: NEG
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_INT 1
71266: PUSH
71267: LD_INT 2
71269: NEG
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: LIST
71279: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
71280: LD_ADDR_VAR 0 42
71284: PUSH
71285: LD_INT 2
71287: PUSH
71288: LD_INT 0
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 2
71297: PUSH
71298: LD_INT 1
71300: NEG
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 3
71308: PUSH
71309: LD_INT 1
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: LIST
71320: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
71321: LD_ADDR_VAR 0 43
71325: PUSH
71326: LD_INT 2
71328: PUSH
71329: LD_INT 2
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 3
71338: PUSH
71339: LD_INT 2
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 2
71348: PUSH
71349: LD_INT 3
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: LIST
71360: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
71361: LD_ADDR_VAR 0 44
71365: PUSH
71366: LD_INT 0
71368: PUSH
71369: LD_INT 2
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: PUSH
71376: LD_INT 1
71378: PUSH
71379: LD_INT 3
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: PUSH
71386: LD_INT 1
71388: NEG
71389: PUSH
71390: LD_INT 2
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: LIST
71401: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71402: LD_ADDR_VAR 0 45
71406: PUSH
71407: LD_INT 2
71409: NEG
71410: PUSH
71411: LD_INT 0
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 2
71420: NEG
71421: PUSH
71422: LD_INT 1
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 3
71431: NEG
71432: PUSH
71433: LD_INT 1
71435: NEG
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: LIST
71445: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
71446: LD_ADDR_VAR 0 46
71450: PUSH
71451: LD_INT 2
71453: NEG
71454: PUSH
71455: LD_INT 2
71457: NEG
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: PUSH
71463: LD_INT 2
71465: NEG
71466: PUSH
71467: LD_INT 3
71469: NEG
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 3
71477: NEG
71478: PUSH
71479: LD_INT 2
71481: NEG
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: LIST
71491: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
71492: LD_ADDR_VAR 0 47
71496: PUSH
71497: LD_INT 2
71499: NEG
71500: PUSH
71501: LD_INT 3
71503: NEG
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PUSH
71509: LD_INT 1
71511: NEG
71512: PUSH
71513: LD_INT 3
71515: NEG
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71525: LD_ADDR_VAR 0 48
71529: PUSH
71530: LD_INT 1
71532: PUSH
71533: LD_INT 2
71535: NEG
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PUSH
71541: LD_INT 2
71543: PUSH
71544: LD_INT 1
71546: NEG
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
71556: LD_ADDR_VAR 0 49
71560: PUSH
71561: LD_INT 3
71563: PUSH
71564: LD_INT 1
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PUSH
71571: LD_INT 3
71573: PUSH
71574: LD_INT 2
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
71585: LD_ADDR_VAR 0 50
71589: PUSH
71590: LD_INT 2
71592: PUSH
71593: LD_INT 3
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: PUSH
71600: LD_INT 1
71602: PUSH
71603: LD_INT 3
71605: PUSH
71606: EMPTY
71607: LIST
71608: LIST
71609: PUSH
71610: EMPTY
71611: LIST
71612: LIST
71613: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
71614: LD_ADDR_VAR 0 51
71618: PUSH
71619: LD_INT 1
71621: NEG
71622: PUSH
71623: LD_INT 2
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 2
71632: NEG
71633: PUSH
71634: LD_INT 1
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: PUSH
71641: EMPTY
71642: LIST
71643: LIST
71644: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
71645: LD_ADDR_VAR 0 52
71649: PUSH
71650: LD_INT 3
71652: NEG
71653: PUSH
71654: LD_INT 1
71656: NEG
71657: PUSH
71658: EMPTY
71659: LIST
71660: LIST
71661: PUSH
71662: LD_INT 3
71664: NEG
71665: PUSH
71666: LD_INT 2
71668: NEG
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71678: LD_ADDR_VAR 0 53
71682: PUSH
71683: LD_INT 1
71685: NEG
71686: PUSH
71687: LD_INT 3
71689: NEG
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: PUSH
71695: LD_INT 0
71697: PUSH
71698: LD_INT 3
71700: NEG
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: LD_INT 1
71708: PUSH
71709: LD_INT 2
71711: NEG
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: LIST
71721: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71722: LD_ADDR_VAR 0 54
71726: PUSH
71727: LD_INT 2
71729: PUSH
71730: LD_INT 1
71732: NEG
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: PUSH
71738: LD_INT 3
71740: PUSH
71741: LD_INT 0
71743: PUSH
71744: EMPTY
71745: LIST
71746: LIST
71747: PUSH
71748: LD_INT 3
71750: PUSH
71751: LD_INT 1
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PUSH
71758: EMPTY
71759: LIST
71760: LIST
71761: LIST
71762: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71763: LD_ADDR_VAR 0 55
71767: PUSH
71768: LD_INT 3
71770: PUSH
71771: LD_INT 2
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: PUSH
71778: LD_INT 3
71780: PUSH
71781: LD_INT 3
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: LD_INT 2
71790: PUSH
71791: LD_INT 3
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: LIST
71802: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71803: LD_ADDR_VAR 0 56
71807: PUSH
71808: LD_INT 1
71810: PUSH
71811: LD_INT 3
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 0
71820: PUSH
71821: LD_INT 3
71823: PUSH
71824: EMPTY
71825: LIST
71826: LIST
71827: PUSH
71828: LD_INT 1
71830: NEG
71831: PUSH
71832: LD_INT 2
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: PUSH
71839: EMPTY
71840: LIST
71841: LIST
71842: LIST
71843: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71844: LD_ADDR_VAR 0 57
71848: PUSH
71849: LD_INT 2
71851: NEG
71852: PUSH
71853: LD_INT 1
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: LD_INT 3
71862: NEG
71863: PUSH
71864: LD_INT 0
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: PUSH
71871: LD_INT 3
71873: NEG
71874: PUSH
71875: LD_INT 1
71877: NEG
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: LIST
71887: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71888: LD_ADDR_VAR 0 58
71892: PUSH
71893: LD_INT 2
71895: NEG
71896: PUSH
71897: LD_INT 3
71899: NEG
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: LD_INT 3
71907: NEG
71908: PUSH
71909: LD_INT 2
71911: NEG
71912: PUSH
71913: EMPTY
71914: LIST
71915: LIST
71916: PUSH
71917: LD_INT 3
71919: NEG
71920: PUSH
71921: LD_INT 3
71923: NEG
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: LIST
71933: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71934: LD_ADDR_VAR 0 59
71938: PUSH
71939: LD_INT 1
71941: NEG
71942: PUSH
71943: LD_INT 2
71945: NEG
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: PUSH
71951: LD_INT 0
71953: PUSH
71954: LD_INT 2
71956: NEG
71957: PUSH
71958: EMPTY
71959: LIST
71960: LIST
71961: PUSH
71962: LD_INT 1
71964: PUSH
71965: LD_INT 1
71967: NEG
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: LIST
71977: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71978: LD_ADDR_VAR 0 60
71982: PUSH
71983: LD_INT 1
71985: PUSH
71986: LD_INT 1
71988: NEG
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: PUSH
71994: LD_INT 2
71996: PUSH
71997: LD_INT 0
71999: PUSH
72000: EMPTY
72001: LIST
72002: LIST
72003: PUSH
72004: LD_INT 2
72006: PUSH
72007: LD_INT 1
72009: PUSH
72010: EMPTY
72011: LIST
72012: LIST
72013: PUSH
72014: EMPTY
72015: LIST
72016: LIST
72017: LIST
72018: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
72019: LD_ADDR_VAR 0 61
72023: PUSH
72024: LD_INT 2
72026: PUSH
72027: LD_INT 1
72029: PUSH
72030: EMPTY
72031: LIST
72032: LIST
72033: PUSH
72034: LD_INT 2
72036: PUSH
72037: LD_INT 2
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: PUSH
72044: LD_INT 1
72046: PUSH
72047: LD_INT 2
72049: PUSH
72050: EMPTY
72051: LIST
72052: LIST
72053: PUSH
72054: EMPTY
72055: LIST
72056: LIST
72057: LIST
72058: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
72059: LD_ADDR_VAR 0 62
72063: PUSH
72064: LD_INT 1
72066: PUSH
72067: LD_INT 2
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 0
72076: PUSH
72077: LD_INT 2
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_INT 1
72086: NEG
72087: PUSH
72088: LD_INT 1
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: LIST
72099: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72100: LD_ADDR_VAR 0 63
72104: PUSH
72105: LD_INT 1
72107: NEG
72108: PUSH
72109: LD_INT 1
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: LD_INT 2
72118: NEG
72119: PUSH
72120: LD_INT 0
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: PUSH
72127: LD_INT 2
72129: NEG
72130: PUSH
72131: LD_INT 1
72133: NEG
72134: PUSH
72135: EMPTY
72136: LIST
72137: LIST
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: LIST
72143: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72144: LD_ADDR_VAR 0 64
72148: PUSH
72149: LD_INT 1
72151: NEG
72152: PUSH
72153: LD_INT 2
72155: NEG
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: PUSH
72161: LD_INT 2
72163: NEG
72164: PUSH
72165: LD_INT 1
72167: NEG
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: PUSH
72173: LD_INT 2
72175: NEG
72176: PUSH
72177: LD_INT 2
72179: NEG
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: PUSH
72185: EMPTY
72186: LIST
72187: LIST
72188: LIST
72189: ST_TO_ADDR
// end ; 2 :
72190: GO 75456
72192: LD_INT 2
72194: DOUBLE
72195: EQUAL
72196: IFTRUE 72200
72198: GO 75455
72200: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
72201: LD_ADDR_VAR 0 29
72205: PUSH
72206: LD_INT 4
72208: PUSH
72209: LD_INT 0
72211: PUSH
72212: EMPTY
72213: LIST
72214: LIST
72215: PUSH
72216: LD_INT 4
72218: PUSH
72219: LD_INT 1
72221: NEG
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: PUSH
72227: LD_INT 5
72229: PUSH
72230: LD_INT 0
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: PUSH
72237: LD_INT 5
72239: PUSH
72240: LD_INT 1
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PUSH
72247: LD_INT 4
72249: PUSH
72250: LD_INT 1
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: PUSH
72257: LD_INT 3
72259: PUSH
72260: LD_INT 0
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 3
72269: PUSH
72270: LD_INT 1
72272: NEG
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: LD_INT 3
72280: PUSH
72281: LD_INT 2
72283: NEG
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 5
72291: PUSH
72292: LD_INT 2
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 3
72301: PUSH
72302: LD_INT 3
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: LD_INT 3
72311: PUSH
72312: LD_INT 2
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: PUSH
72319: LD_INT 4
72321: PUSH
72322: LD_INT 3
72324: PUSH
72325: EMPTY
72326: LIST
72327: LIST
72328: PUSH
72329: LD_INT 4
72331: PUSH
72332: LD_INT 4
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: PUSH
72339: LD_INT 3
72341: PUSH
72342: LD_INT 4
72344: PUSH
72345: EMPTY
72346: LIST
72347: LIST
72348: PUSH
72349: LD_INT 2
72351: PUSH
72352: LD_INT 3
72354: PUSH
72355: EMPTY
72356: LIST
72357: LIST
72358: PUSH
72359: LD_INT 2
72361: PUSH
72362: LD_INT 2
72364: PUSH
72365: EMPTY
72366: LIST
72367: LIST
72368: PUSH
72369: LD_INT 4
72371: PUSH
72372: LD_INT 2
72374: PUSH
72375: EMPTY
72376: LIST
72377: LIST
72378: PUSH
72379: LD_INT 2
72381: PUSH
72382: LD_INT 4
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: PUSH
72389: LD_INT 0
72391: PUSH
72392: LD_INT 4
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: PUSH
72399: LD_INT 0
72401: PUSH
72402: LD_INT 3
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: PUSH
72409: LD_INT 1
72411: PUSH
72412: LD_INT 4
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: LD_INT 1
72421: PUSH
72422: LD_INT 5
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: LD_INT 0
72431: PUSH
72432: LD_INT 5
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: PUSH
72439: LD_INT 1
72441: NEG
72442: PUSH
72443: LD_INT 4
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: PUSH
72450: LD_INT 1
72452: NEG
72453: PUSH
72454: LD_INT 3
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 2
72463: PUSH
72464: LD_INT 5
72466: PUSH
72467: EMPTY
72468: LIST
72469: LIST
72470: PUSH
72471: LD_INT 2
72473: NEG
72474: PUSH
72475: LD_INT 3
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: PUSH
72482: LD_INT 3
72484: NEG
72485: PUSH
72486: LD_INT 0
72488: PUSH
72489: EMPTY
72490: LIST
72491: LIST
72492: PUSH
72493: LD_INT 3
72495: NEG
72496: PUSH
72497: LD_INT 1
72499: NEG
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: PUSH
72505: LD_INT 2
72507: NEG
72508: PUSH
72509: LD_INT 0
72511: PUSH
72512: EMPTY
72513: LIST
72514: LIST
72515: PUSH
72516: LD_INT 2
72518: NEG
72519: PUSH
72520: LD_INT 1
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: PUSH
72527: LD_INT 3
72529: NEG
72530: PUSH
72531: LD_INT 1
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 4
72540: NEG
72541: PUSH
72542: LD_INT 0
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: LD_INT 4
72551: NEG
72552: PUSH
72553: LD_INT 1
72555: NEG
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: PUSH
72561: LD_INT 4
72563: NEG
72564: PUSH
72565: LD_INT 2
72567: NEG
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: PUSH
72573: LD_INT 2
72575: NEG
72576: PUSH
72577: LD_INT 2
72579: PUSH
72580: EMPTY
72581: LIST
72582: LIST
72583: PUSH
72584: LD_INT 4
72586: NEG
72587: PUSH
72588: LD_INT 4
72590: NEG
72591: PUSH
72592: EMPTY
72593: LIST
72594: LIST
72595: PUSH
72596: LD_INT 4
72598: NEG
72599: PUSH
72600: LD_INT 5
72602: NEG
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: LD_INT 3
72610: NEG
72611: PUSH
72612: LD_INT 4
72614: NEG
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: PUSH
72620: LD_INT 3
72622: NEG
72623: PUSH
72624: LD_INT 3
72626: NEG
72627: PUSH
72628: EMPTY
72629: LIST
72630: LIST
72631: PUSH
72632: LD_INT 4
72634: NEG
72635: PUSH
72636: LD_INT 3
72638: NEG
72639: PUSH
72640: EMPTY
72641: LIST
72642: LIST
72643: PUSH
72644: LD_INT 5
72646: NEG
72647: PUSH
72648: LD_INT 4
72650: NEG
72651: PUSH
72652: EMPTY
72653: LIST
72654: LIST
72655: PUSH
72656: LD_INT 5
72658: NEG
72659: PUSH
72660: LD_INT 5
72662: NEG
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: PUSH
72668: LD_INT 3
72670: NEG
72671: PUSH
72672: LD_INT 5
72674: NEG
72675: PUSH
72676: EMPTY
72677: LIST
72678: LIST
72679: PUSH
72680: LD_INT 5
72682: NEG
72683: PUSH
72684: LD_INT 3
72686: NEG
72687: PUSH
72688: EMPTY
72689: LIST
72690: LIST
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: LIST
72703: LIST
72704: LIST
72705: LIST
72706: LIST
72707: LIST
72708: LIST
72709: LIST
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: LIST
72726: LIST
72727: LIST
72728: LIST
72729: LIST
72730: LIST
72731: LIST
72732: LIST
72733: LIST
72734: LIST
72735: LIST
72736: LIST
72737: LIST
72738: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
72739: LD_ADDR_VAR 0 30
72743: PUSH
72744: LD_INT 4
72746: PUSH
72747: LD_INT 4
72749: PUSH
72750: EMPTY
72751: LIST
72752: LIST
72753: PUSH
72754: LD_INT 4
72756: PUSH
72757: LD_INT 3
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: PUSH
72764: LD_INT 5
72766: PUSH
72767: LD_INT 4
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: PUSH
72774: LD_INT 5
72776: PUSH
72777: LD_INT 5
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: PUSH
72784: LD_INT 4
72786: PUSH
72787: LD_INT 5
72789: PUSH
72790: EMPTY
72791: LIST
72792: LIST
72793: PUSH
72794: LD_INT 3
72796: PUSH
72797: LD_INT 4
72799: PUSH
72800: EMPTY
72801: LIST
72802: LIST
72803: PUSH
72804: LD_INT 3
72806: PUSH
72807: LD_INT 3
72809: PUSH
72810: EMPTY
72811: LIST
72812: LIST
72813: PUSH
72814: LD_INT 5
72816: PUSH
72817: LD_INT 3
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: PUSH
72824: LD_INT 3
72826: PUSH
72827: LD_INT 5
72829: PUSH
72830: EMPTY
72831: LIST
72832: LIST
72833: PUSH
72834: LD_INT 0
72836: PUSH
72837: LD_INT 3
72839: PUSH
72840: EMPTY
72841: LIST
72842: LIST
72843: PUSH
72844: LD_INT 0
72846: PUSH
72847: LD_INT 2
72849: PUSH
72850: EMPTY
72851: LIST
72852: LIST
72853: PUSH
72854: LD_INT 1
72856: PUSH
72857: LD_INT 3
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: PUSH
72864: LD_INT 1
72866: PUSH
72867: LD_INT 4
72869: PUSH
72870: EMPTY
72871: LIST
72872: LIST
72873: PUSH
72874: LD_INT 0
72876: PUSH
72877: LD_INT 4
72879: PUSH
72880: EMPTY
72881: LIST
72882: LIST
72883: PUSH
72884: LD_INT 1
72886: NEG
72887: PUSH
72888: LD_INT 3
72890: PUSH
72891: EMPTY
72892: LIST
72893: LIST
72894: PUSH
72895: LD_INT 1
72897: NEG
72898: PUSH
72899: LD_INT 2
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: PUSH
72906: LD_INT 2
72908: PUSH
72909: LD_INT 4
72911: PUSH
72912: EMPTY
72913: LIST
72914: LIST
72915: PUSH
72916: LD_INT 2
72918: NEG
72919: PUSH
72920: LD_INT 2
72922: PUSH
72923: EMPTY
72924: LIST
72925: LIST
72926: PUSH
72927: LD_INT 4
72929: NEG
72930: PUSH
72931: LD_INT 0
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: PUSH
72938: LD_INT 4
72940: NEG
72941: PUSH
72942: LD_INT 1
72944: NEG
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: PUSH
72950: LD_INT 3
72952: NEG
72953: PUSH
72954: LD_INT 0
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 3
72963: NEG
72964: PUSH
72965: LD_INT 1
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PUSH
72972: LD_INT 4
72974: NEG
72975: PUSH
72976: LD_INT 1
72978: PUSH
72979: EMPTY
72980: LIST
72981: LIST
72982: PUSH
72983: LD_INT 5
72985: NEG
72986: PUSH
72987: LD_INT 0
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: PUSH
72994: LD_INT 5
72996: NEG
72997: PUSH
72998: LD_INT 1
73000: NEG
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PUSH
73006: LD_INT 5
73008: NEG
73009: PUSH
73010: LD_INT 2
73012: NEG
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: LD_INT 3
73020: NEG
73021: PUSH
73022: LD_INT 2
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: PUSH
73029: LD_INT 3
73031: NEG
73032: PUSH
73033: LD_INT 3
73035: NEG
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: PUSH
73041: LD_INT 3
73043: NEG
73044: PUSH
73045: LD_INT 4
73047: NEG
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: PUSH
73053: LD_INT 2
73055: NEG
73056: PUSH
73057: LD_INT 3
73059: NEG
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: PUSH
73065: LD_INT 2
73067: NEG
73068: PUSH
73069: LD_INT 2
73071: NEG
73072: PUSH
73073: EMPTY
73074: LIST
73075: LIST
73076: PUSH
73077: LD_INT 3
73079: NEG
73080: PUSH
73081: LD_INT 2
73083: NEG
73084: PUSH
73085: EMPTY
73086: LIST
73087: LIST
73088: PUSH
73089: LD_INT 4
73091: NEG
73092: PUSH
73093: LD_INT 3
73095: NEG
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: PUSH
73101: LD_INT 4
73103: NEG
73104: PUSH
73105: LD_INT 4
73107: NEG
73108: PUSH
73109: EMPTY
73110: LIST
73111: LIST
73112: PUSH
73113: LD_INT 2
73115: NEG
73116: PUSH
73117: LD_INT 4
73119: NEG
73120: PUSH
73121: EMPTY
73122: LIST
73123: LIST
73124: PUSH
73125: LD_INT 4
73127: NEG
73128: PUSH
73129: LD_INT 2
73131: NEG
73132: PUSH
73133: EMPTY
73134: LIST
73135: LIST
73136: PUSH
73137: LD_INT 0
73139: PUSH
73140: LD_INT 4
73142: NEG
73143: PUSH
73144: EMPTY
73145: LIST
73146: LIST
73147: PUSH
73148: LD_INT 0
73150: PUSH
73151: LD_INT 5
73153: NEG
73154: PUSH
73155: EMPTY
73156: LIST
73157: LIST
73158: PUSH
73159: LD_INT 1
73161: PUSH
73162: LD_INT 4
73164: NEG
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: PUSH
73170: LD_INT 1
73172: PUSH
73173: LD_INT 3
73175: NEG
73176: PUSH
73177: EMPTY
73178: LIST
73179: LIST
73180: PUSH
73181: LD_INT 0
73183: PUSH
73184: LD_INT 3
73186: NEG
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PUSH
73192: LD_INT 1
73194: NEG
73195: PUSH
73196: LD_INT 4
73198: NEG
73199: PUSH
73200: EMPTY
73201: LIST
73202: LIST
73203: PUSH
73204: LD_INT 1
73206: NEG
73207: PUSH
73208: LD_INT 5
73210: NEG
73211: PUSH
73212: EMPTY
73213: LIST
73214: LIST
73215: PUSH
73216: LD_INT 2
73218: PUSH
73219: LD_INT 3
73221: NEG
73222: PUSH
73223: EMPTY
73224: LIST
73225: LIST
73226: PUSH
73227: LD_INT 2
73229: NEG
73230: PUSH
73231: LD_INT 5
73233: NEG
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: LIST
73247: LIST
73248: LIST
73249: LIST
73250: LIST
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: LIST
73256: LIST
73257: LIST
73258: LIST
73259: LIST
73260: LIST
73261: LIST
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: LIST
73268: LIST
73269: LIST
73270: LIST
73271: LIST
73272: LIST
73273: LIST
73274: LIST
73275: LIST
73276: LIST
73277: LIST
73278: LIST
73279: LIST
73280: LIST
73281: LIST
73282: LIST
73283: LIST
73284: LIST
73285: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
73286: LD_ADDR_VAR 0 31
73290: PUSH
73291: LD_INT 0
73293: PUSH
73294: LD_INT 4
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: PUSH
73301: LD_INT 0
73303: PUSH
73304: LD_INT 3
73306: PUSH
73307: EMPTY
73308: LIST
73309: LIST
73310: PUSH
73311: LD_INT 1
73313: PUSH
73314: LD_INT 4
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: PUSH
73321: LD_INT 1
73323: PUSH
73324: LD_INT 5
73326: PUSH
73327: EMPTY
73328: LIST
73329: LIST
73330: PUSH
73331: LD_INT 0
73333: PUSH
73334: LD_INT 5
73336: PUSH
73337: EMPTY
73338: LIST
73339: LIST
73340: PUSH
73341: LD_INT 1
73343: NEG
73344: PUSH
73345: LD_INT 4
73347: PUSH
73348: EMPTY
73349: LIST
73350: LIST
73351: PUSH
73352: LD_INT 1
73354: NEG
73355: PUSH
73356: LD_INT 3
73358: PUSH
73359: EMPTY
73360: LIST
73361: LIST
73362: PUSH
73363: LD_INT 2
73365: PUSH
73366: LD_INT 5
73368: PUSH
73369: EMPTY
73370: LIST
73371: LIST
73372: PUSH
73373: LD_INT 2
73375: NEG
73376: PUSH
73377: LD_INT 3
73379: PUSH
73380: EMPTY
73381: LIST
73382: LIST
73383: PUSH
73384: LD_INT 3
73386: NEG
73387: PUSH
73388: LD_INT 0
73390: PUSH
73391: EMPTY
73392: LIST
73393: LIST
73394: PUSH
73395: LD_INT 3
73397: NEG
73398: PUSH
73399: LD_INT 1
73401: NEG
73402: PUSH
73403: EMPTY
73404: LIST
73405: LIST
73406: PUSH
73407: LD_INT 2
73409: NEG
73410: PUSH
73411: LD_INT 0
73413: PUSH
73414: EMPTY
73415: LIST
73416: LIST
73417: PUSH
73418: LD_INT 2
73420: NEG
73421: PUSH
73422: LD_INT 1
73424: PUSH
73425: EMPTY
73426: LIST
73427: LIST
73428: PUSH
73429: LD_INT 3
73431: NEG
73432: PUSH
73433: LD_INT 1
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: PUSH
73440: LD_INT 4
73442: NEG
73443: PUSH
73444: LD_INT 0
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: LD_INT 4
73453: NEG
73454: PUSH
73455: LD_INT 1
73457: NEG
73458: PUSH
73459: EMPTY
73460: LIST
73461: LIST
73462: PUSH
73463: LD_INT 4
73465: NEG
73466: PUSH
73467: LD_INT 2
73469: NEG
73470: PUSH
73471: EMPTY
73472: LIST
73473: LIST
73474: PUSH
73475: LD_INT 2
73477: NEG
73478: PUSH
73479: LD_INT 2
73481: PUSH
73482: EMPTY
73483: LIST
73484: LIST
73485: PUSH
73486: LD_INT 4
73488: NEG
73489: PUSH
73490: LD_INT 4
73492: NEG
73493: PUSH
73494: EMPTY
73495: LIST
73496: LIST
73497: PUSH
73498: LD_INT 4
73500: NEG
73501: PUSH
73502: LD_INT 5
73504: NEG
73505: PUSH
73506: EMPTY
73507: LIST
73508: LIST
73509: PUSH
73510: LD_INT 3
73512: NEG
73513: PUSH
73514: LD_INT 4
73516: NEG
73517: PUSH
73518: EMPTY
73519: LIST
73520: LIST
73521: PUSH
73522: LD_INT 3
73524: NEG
73525: PUSH
73526: LD_INT 3
73528: NEG
73529: PUSH
73530: EMPTY
73531: LIST
73532: LIST
73533: PUSH
73534: LD_INT 4
73536: NEG
73537: PUSH
73538: LD_INT 3
73540: NEG
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: PUSH
73546: LD_INT 5
73548: NEG
73549: PUSH
73550: LD_INT 4
73552: NEG
73553: PUSH
73554: EMPTY
73555: LIST
73556: LIST
73557: PUSH
73558: LD_INT 5
73560: NEG
73561: PUSH
73562: LD_INT 5
73564: NEG
73565: PUSH
73566: EMPTY
73567: LIST
73568: LIST
73569: PUSH
73570: LD_INT 3
73572: NEG
73573: PUSH
73574: LD_INT 5
73576: NEG
73577: PUSH
73578: EMPTY
73579: LIST
73580: LIST
73581: PUSH
73582: LD_INT 5
73584: NEG
73585: PUSH
73586: LD_INT 3
73588: NEG
73589: PUSH
73590: EMPTY
73591: LIST
73592: LIST
73593: PUSH
73594: LD_INT 0
73596: PUSH
73597: LD_INT 3
73599: NEG
73600: PUSH
73601: EMPTY
73602: LIST
73603: LIST
73604: PUSH
73605: LD_INT 0
73607: PUSH
73608: LD_INT 4
73610: NEG
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: PUSH
73616: LD_INT 1
73618: PUSH
73619: LD_INT 3
73621: NEG
73622: PUSH
73623: EMPTY
73624: LIST
73625: LIST
73626: PUSH
73627: LD_INT 1
73629: PUSH
73630: LD_INT 2
73632: NEG
73633: PUSH
73634: EMPTY
73635: LIST
73636: LIST
73637: PUSH
73638: LD_INT 0
73640: PUSH
73641: LD_INT 2
73643: NEG
73644: PUSH
73645: EMPTY
73646: LIST
73647: LIST
73648: PUSH
73649: LD_INT 1
73651: NEG
73652: PUSH
73653: LD_INT 3
73655: NEG
73656: PUSH
73657: EMPTY
73658: LIST
73659: LIST
73660: PUSH
73661: LD_INT 1
73663: NEG
73664: PUSH
73665: LD_INT 4
73667: NEG
73668: PUSH
73669: EMPTY
73670: LIST
73671: LIST
73672: PUSH
73673: LD_INT 2
73675: PUSH
73676: LD_INT 2
73678: NEG
73679: PUSH
73680: EMPTY
73681: LIST
73682: LIST
73683: PUSH
73684: LD_INT 2
73686: NEG
73687: PUSH
73688: LD_INT 4
73690: NEG
73691: PUSH
73692: EMPTY
73693: LIST
73694: LIST
73695: PUSH
73696: LD_INT 4
73698: PUSH
73699: LD_INT 0
73701: PUSH
73702: EMPTY
73703: LIST
73704: LIST
73705: PUSH
73706: LD_INT 4
73708: PUSH
73709: LD_INT 1
73711: NEG
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: PUSH
73717: LD_INT 5
73719: PUSH
73720: LD_INT 0
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PUSH
73727: LD_INT 5
73729: PUSH
73730: LD_INT 1
73732: PUSH
73733: EMPTY
73734: LIST
73735: LIST
73736: PUSH
73737: LD_INT 4
73739: PUSH
73740: LD_INT 1
73742: PUSH
73743: EMPTY
73744: LIST
73745: LIST
73746: PUSH
73747: LD_INT 3
73749: PUSH
73750: LD_INT 0
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: PUSH
73757: LD_INT 3
73759: PUSH
73760: LD_INT 1
73762: NEG
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: PUSH
73768: LD_INT 3
73770: PUSH
73771: LD_INT 2
73773: NEG
73774: PUSH
73775: EMPTY
73776: LIST
73777: LIST
73778: PUSH
73779: LD_INT 5
73781: PUSH
73782: LD_INT 2
73784: PUSH
73785: EMPTY
73786: LIST
73787: LIST
73788: PUSH
73789: EMPTY
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: LIST
73795: LIST
73796: LIST
73797: LIST
73798: LIST
73799: LIST
73800: LIST
73801: LIST
73802: LIST
73803: LIST
73804: LIST
73805: LIST
73806: LIST
73807: LIST
73808: LIST
73809: LIST
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: LIST
73817: LIST
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: LIST
73826: LIST
73827: LIST
73828: LIST
73829: LIST
73830: LIST
73831: LIST
73832: LIST
73833: LIST
73834: LIST
73835: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73836: LD_ADDR_VAR 0 32
73840: PUSH
73841: LD_INT 4
73843: NEG
73844: PUSH
73845: LD_INT 0
73847: PUSH
73848: EMPTY
73849: LIST
73850: LIST
73851: PUSH
73852: LD_INT 4
73854: NEG
73855: PUSH
73856: LD_INT 1
73858: NEG
73859: PUSH
73860: EMPTY
73861: LIST
73862: LIST
73863: PUSH
73864: LD_INT 3
73866: NEG
73867: PUSH
73868: LD_INT 0
73870: PUSH
73871: EMPTY
73872: LIST
73873: LIST
73874: PUSH
73875: LD_INT 3
73877: NEG
73878: PUSH
73879: LD_INT 1
73881: PUSH
73882: EMPTY
73883: LIST
73884: LIST
73885: PUSH
73886: LD_INT 4
73888: NEG
73889: PUSH
73890: LD_INT 1
73892: PUSH
73893: EMPTY
73894: LIST
73895: LIST
73896: PUSH
73897: LD_INT 5
73899: NEG
73900: PUSH
73901: LD_INT 0
73903: PUSH
73904: EMPTY
73905: LIST
73906: LIST
73907: PUSH
73908: LD_INT 5
73910: NEG
73911: PUSH
73912: LD_INT 1
73914: NEG
73915: PUSH
73916: EMPTY
73917: LIST
73918: LIST
73919: PUSH
73920: LD_INT 5
73922: NEG
73923: PUSH
73924: LD_INT 2
73926: NEG
73927: PUSH
73928: EMPTY
73929: LIST
73930: LIST
73931: PUSH
73932: LD_INT 3
73934: NEG
73935: PUSH
73936: LD_INT 2
73938: PUSH
73939: EMPTY
73940: LIST
73941: LIST
73942: PUSH
73943: LD_INT 3
73945: NEG
73946: PUSH
73947: LD_INT 3
73949: NEG
73950: PUSH
73951: EMPTY
73952: LIST
73953: LIST
73954: PUSH
73955: LD_INT 3
73957: NEG
73958: PUSH
73959: LD_INT 4
73961: NEG
73962: PUSH
73963: EMPTY
73964: LIST
73965: LIST
73966: PUSH
73967: LD_INT 2
73969: NEG
73970: PUSH
73971: LD_INT 3
73973: NEG
73974: PUSH
73975: EMPTY
73976: LIST
73977: LIST
73978: PUSH
73979: LD_INT 2
73981: NEG
73982: PUSH
73983: LD_INT 2
73985: NEG
73986: PUSH
73987: EMPTY
73988: LIST
73989: LIST
73990: PUSH
73991: LD_INT 3
73993: NEG
73994: PUSH
73995: LD_INT 2
73997: NEG
73998: PUSH
73999: EMPTY
74000: LIST
74001: LIST
74002: PUSH
74003: LD_INT 4
74005: NEG
74006: PUSH
74007: LD_INT 3
74009: NEG
74010: PUSH
74011: EMPTY
74012: LIST
74013: LIST
74014: PUSH
74015: LD_INT 4
74017: NEG
74018: PUSH
74019: LD_INT 4
74021: NEG
74022: PUSH
74023: EMPTY
74024: LIST
74025: LIST
74026: PUSH
74027: LD_INT 2
74029: NEG
74030: PUSH
74031: LD_INT 4
74033: NEG
74034: PUSH
74035: EMPTY
74036: LIST
74037: LIST
74038: PUSH
74039: LD_INT 4
74041: NEG
74042: PUSH
74043: LD_INT 2
74045: NEG
74046: PUSH
74047: EMPTY
74048: LIST
74049: LIST
74050: PUSH
74051: LD_INT 0
74053: PUSH
74054: LD_INT 4
74056: NEG
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: PUSH
74062: LD_INT 0
74064: PUSH
74065: LD_INT 5
74067: NEG
74068: PUSH
74069: EMPTY
74070: LIST
74071: LIST
74072: PUSH
74073: LD_INT 1
74075: PUSH
74076: LD_INT 4
74078: NEG
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: PUSH
74084: LD_INT 1
74086: PUSH
74087: LD_INT 3
74089: NEG
74090: PUSH
74091: EMPTY
74092: LIST
74093: LIST
74094: PUSH
74095: LD_INT 0
74097: PUSH
74098: LD_INT 3
74100: NEG
74101: PUSH
74102: EMPTY
74103: LIST
74104: LIST
74105: PUSH
74106: LD_INT 1
74108: NEG
74109: PUSH
74110: LD_INT 4
74112: NEG
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: PUSH
74118: LD_INT 1
74120: NEG
74121: PUSH
74122: LD_INT 5
74124: NEG
74125: PUSH
74126: EMPTY
74127: LIST
74128: LIST
74129: PUSH
74130: LD_INT 2
74132: PUSH
74133: LD_INT 3
74135: NEG
74136: PUSH
74137: EMPTY
74138: LIST
74139: LIST
74140: PUSH
74141: LD_INT 2
74143: NEG
74144: PUSH
74145: LD_INT 5
74147: NEG
74148: PUSH
74149: EMPTY
74150: LIST
74151: LIST
74152: PUSH
74153: LD_INT 3
74155: PUSH
74156: LD_INT 0
74158: PUSH
74159: EMPTY
74160: LIST
74161: LIST
74162: PUSH
74163: LD_INT 3
74165: PUSH
74166: LD_INT 1
74168: NEG
74169: PUSH
74170: EMPTY
74171: LIST
74172: LIST
74173: PUSH
74174: LD_INT 4
74176: PUSH
74177: LD_INT 0
74179: PUSH
74180: EMPTY
74181: LIST
74182: LIST
74183: PUSH
74184: LD_INT 4
74186: PUSH
74187: LD_INT 1
74189: PUSH
74190: EMPTY
74191: LIST
74192: LIST
74193: PUSH
74194: LD_INT 3
74196: PUSH
74197: LD_INT 1
74199: PUSH
74200: EMPTY
74201: LIST
74202: LIST
74203: PUSH
74204: LD_INT 2
74206: PUSH
74207: LD_INT 0
74209: PUSH
74210: EMPTY
74211: LIST
74212: LIST
74213: PUSH
74214: LD_INT 2
74216: PUSH
74217: LD_INT 1
74219: NEG
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: PUSH
74225: LD_INT 2
74227: PUSH
74228: LD_INT 2
74230: NEG
74231: PUSH
74232: EMPTY
74233: LIST
74234: LIST
74235: PUSH
74236: LD_INT 4
74238: PUSH
74239: LD_INT 2
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: PUSH
74246: LD_INT 4
74248: PUSH
74249: LD_INT 4
74251: PUSH
74252: EMPTY
74253: LIST
74254: LIST
74255: PUSH
74256: LD_INT 4
74258: PUSH
74259: LD_INT 3
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: PUSH
74266: LD_INT 5
74268: PUSH
74269: LD_INT 4
74271: PUSH
74272: EMPTY
74273: LIST
74274: LIST
74275: PUSH
74276: LD_INT 5
74278: PUSH
74279: LD_INT 5
74281: PUSH
74282: EMPTY
74283: LIST
74284: LIST
74285: PUSH
74286: LD_INT 4
74288: PUSH
74289: LD_INT 5
74291: PUSH
74292: EMPTY
74293: LIST
74294: LIST
74295: PUSH
74296: LD_INT 3
74298: PUSH
74299: LD_INT 4
74301: PUSH
74302: EMPTY
74303: LIST
74304: LIST
74305: PUSH
74306: LD_INT 3
74308: PUSH
74309: LD_INT 3
74311: PUSH
74312: EMPTY
74313: LIST
74314: LIST
74315: PUSH
74316: LD_INT 5
74318: PUSH
74319: LD_INT 3
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: PUSH
74326: LD_INT 3
74328: PUSH
74329: LD_INT 5
74331: PUSH
74332: EMPTY
74333: LIST
74334: LIST
74335: PUSH
74336: EMPTY
74337: LIST
74338: LIST
74339: LIST
74340: LIST
74341: LIST
74342: LIST
74343: LIST
74344: LIST
74345: LIST
74346: LIST
74347: LIST
74348: LIST
74349: LIST
74350: LIST
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: LIST
74366: LIST
74367: LIST
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: LIST
74373: LIST
74374: LIST
74375: LIST
74376: LIST
74377: LIST
74378: LIST
74379: LIST
74380: LIST
74381: LIST
74382: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
74383: LD_ADDR_VAR 0 33
74387: PUSH
74388: LD_INT 4
74390: NEG
74391: PUSH
74392: LD_INT 4
74394: NEG
74395: PUSH
74396: EMPTY
74397: LIST
74398: LIST
74399: PUSH
74400: LD_INT 4
74402: NEG
74403: PUSH
74404: LD_INT 5
74406: NEG
74407: PUSH
74408: EMPTY
74409: LIST
74410: LIST
74411: PUSH
74412: LD_INT 3
74414: NEG
74415: PUSH
74416: LD_INT 4
74418: NEG
74419: PUSH
74420: EMPTY
74421: LIST
74422: LIST
74423: PUSH
74424: LD_INT 3
74426: NEG
74427: PUSH
74428: LD_INT 3
74430: NEG
74431: PUSH
74432: EMPTY
74433: LIST
74434: LIST
74435: PUSH
74436: LD_INT 4
74438: NEG
74439: PUSH
74440: LD_INT 3
74442: NEG
74443: PUSH
74444: EMPTY
74445: LIST
74446: LIST
74447: PUSH
74448: LD_INT 5
74450: NEG
74451: PUSH
74452: LD_INT 4
74454: NEG
74455: PUSH
74456: EMPTY
74457: LIST
74458: LIST
74459: PUSH
74460: LD_INT 5
74462: NEG
74463: PUSH
74464: LD_INT 5
74466: NEG
74467: PUSH
74468: EMPTY
74469: LIST
74470: LIST
74471: PUSH
74472: LD_INT 3
74474: NEG
74475: PUSH
74476: LD_INT 5
74478: NEG
74479: PUSH
74480: EMPTY
74481: LIST
74482: LIST
74483: PUSH
74484: LD_INT 5
74486: NEG
74487: PUSH
74488: LD_INT 3
74490: NEG
74491: PUSH
74492: EMPTY
74493: LIST
74494: LIST
74495: PUSH
74496: LD_INT 0
74498: PUSH
74499: LD_INT 3
74501: NEG
74502: PUSH
74503: EMPTY
74504: LIST
74505: LIST
74506: PUSH
74507: LD_INT 0
74509: PUSH
74510: LD_INT 4
74512: NEG
74513: PUSH
74514: EMPTY
74515: LIST
74516: LIST
74517: PUSH
74518: LD_INT 1
74520: PUSH
74521: LD_INT 3
74523: NEG
74524: PUSH
74525: EMPTY
74526: LIST
74527: LIST
74528: PUSH
74529: LD_INT 1
74531: PUSH
74532: LD_INT 2
74534: NEG
74535: PUSH
74536: EMPTY
74537: LIST
74538: LIST
74539: PUSH
74540: LD_INT 0
74542: PUSH
74543: LD_INT 2
74545: NEG
74546: PUSH
74547: EMPTY
74548: LIST
74549: LIST
74550: PUSH
74551: LD_INT 1
74553: NEG
74554: PUSH
74555: LD_INT 3
74557: NEG
74558: PUSH
74559: EMPTY
74560: LIST
74561: LIST
74562: PUSH
74563: LD_INT 1
74565: NEG
74566: PUSH
74567: LD_INT 4
74569: NEG
74570: PUSH
74571: EMPTY
74572: LIST
74573: LIST
74574: PUSH
74575: LD_INT 2
74577: PUSH
74578: LD_INT 2
74580: NEG
74581: PUSH
74582: EMPTY
74583: LIST
74584: LIST
74585: PUSH
74586: LD_INT 2
74588: NEG
74589: PUSH
74590: LD_INT 4
74592: NEG
74593: PUSH
74594: EMPTY
74595: LIST
74596: LIST
74597: PUSH
74598: LD_INT 4
74600: PUSH
74601: LD_INT 0
74603: PUSH
74604: EMPTY
74605: LIST
74606: LIST
74607: PUSH
74608: LD_INT 4
74610: PUSH
74611: LD_INT 1
74613: NEG
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: PUSH
74619: LD_INT 5
74621: PUSH
74622: LD_INT 0
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: PUSH
74629: LD_INT 5
74631: PUSH
74632: LD_INT 1
74634: PUSH
74635: EMPTY
74636: LIST
74637: LIST
74638: PUSH
74639: LD_INT 4
74641: PUSH
74642: LD_INT 1
74644: PUSH
74645: EMPTY
74646: LIST
74647: LIST
74648: PUSH
74649: LD_INT 3
74651: PUSH
74652: LD_INT 0
74654: PUSH
74655: EMPTY
74656: LIST
74657: LIST
74658: PUSH
74659: LD_INT 3
74661: PUSH
74662: LD_INT 1
74664: NEG
74665: PUSH
74666: EMPTY
74667: LIST
74668: LIST
74669: PUSH
74670: LD_INT 3
74672: PUSH
74673: LD_INT 2
74675: NEG
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: PUSH
74681: LD_INT 5
74683: PUSH
74684: LD_INT 2
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: PUSH
74691: LD_INT 3
74693: PUSH
74694: LD_INT 3
74696: PUSH
74697: EMPTY
74698: LIST
74699: LIST
74700: PUSH
74701: LD_INT 3
74703: PUSH
74704: LD_INT 2
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: PUSH
74711: LD_INT 4
74713: PUSH
74714: LD_INT 3
74716: PUSH
74717: EMPTY
74718: LIST
74719: LIST
74720: PUSH
74721: LD_INT 4
74723: PUSH
74724: LD_INT 4
74726: PUSH
74727: EMPTY
74728: LIST
74729: LIST
74730: PUSH
74731: LD_INT 3
74733: PUSH
74734: LD_INT 4
74736: PUSH
74737: EMPTY
74738: LIST
74739: LIST
74740: PUSH
74741: LD_INT 2
74743: PUSH
74744: LD_INT 3
74746: PUSH
74747: EMPTY
74748: LIST
74749: LIST
74750: PUSH
74751: LD_INT 2
74753: PUSH
74754: LD_INT 2
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: PUSH
74761: LD_INT 4
74763: PUSH
74764: LD_INT 2
74766: PUSH
74767: EMPTY
74768: LIST
74769: LIST
74770: PUSH
74771: LD_INT 2
74773: PUSH
74774: LD_INT 4
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: PUSH
74781: LD_INT 0
74783: PUSH
74784: LD_INT 4
74786: PUSH
74787: EMPTY
74788: LIST
74789: LIST
74790: PUSH
74791: LD_INT 0
74793: PUSH
74794: LD_INT 3
74796: PUSH
74797: EMPTY
74798: LIST
74799: LIST
74800: PUSH
74801: LD_INT 1
74803: PUSH
74804: LD_INT 4
74806: PUSH
74807: EMPTY
74808: LIST
74809: LIST
74810: PUSH
74811: LD_INT 1
74813: PUSH
74814: LD_INT 5
74816: PUSH
74817: EMPTY
74818: LIST
74819: LIST
74820: PUSH
74821: LD_INT 0
74823: PUSH
74824: LD_INT 5
74826: PUSH
74827: EMPTY
74828: LIST
74829: LIST
74830: PUSH
74831: LD_INT 1
74833: NEG
74834: PUSH
74835: LD_INT 4
74837: PUSH
74838: EMPTY
74839: LIST
74840: LIST
74841: PUSH
74842: LD_INT 1
74844: NEG
74845: PUSH
74846: LD_INT 3
74848: PUSH
74849: EMPTY
74850: LIST
74851: LIST
74852: PUSH
74853: LD_INT 2
74855: PUSH
74856: LD_INT 5
74858: PUSH
74859: EMPTY
74860: LIST
74861: LIST
74862: PUSH
74863: LD_INT 2
74865: NEG
74866: PUSH
74867: LD_INT 3
74869: PUSH
74870: EMPTY
74871: LIST
74872: LIST
74873: PUSH
74874: EMPTY
74875: LIST
74876: LIST
74877: LIST
74878: LIST
74879: LIST
74880: LIST
74881: LIST
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: LIST
74887: LIST
74888: LIST
74889: LIST
74890: LIST
74891: LIST
74892: LIST
74893: LIST
74894: LIST
74895: LIST
74896: LIST
74897: LIST
74898: LIST
74899: LIST
74900: LIST
74901: LIST
74902: LIST
74903: LIST
74904: LIST
74905: LIST
74906: LIST
74907: LIST
74908: LIST
74909: LIST
74910: LIST
74911: LIST
74912: LIST
74913: LIST
74914: LIST
74915: LIST
74916: LIST
74917: LIST
74918: LIST
74919: LIST
74920: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74921: LD_ADDR_VAR 0 34
74925: PUSH
74926: LD_INT 0
74928: PUSH
74929: LD_INT 4
74931: NEG
74932: PUSH
74933: EMPTY
74934: LIST
74935: LIST
74936: PUSH
74937: LD_INT 0
74939: PUSH
74940: LD_INT 5
74942: NEG
74943: PUSH
74944: EMPTY
74945: LIST
74946: LIST
74947: PUSH
74948: LD_INT 1
74950: PUSH
74951: LD_INT 4
74953: NEG
74954: PUSH
74955: EMPTY
74956: LIST
74957: LIST
74958: PUSH
74959: LD_INT 1
74961: PUSH
74962: LD_INT 3
74964: NEG
74965: PUSH
74966: EMPTY
74967: LIST
74968: LIST
74969: PUSH
74970: LD_INT 0
74972: PUSH
74973: LD_INT 3
74975: NEG
74976: PUSH
74977: EMPTY
74978: LIST
74979: LIST
74980: PUSH
74981: LD_INT 1
74983: NEG
74984: PUSH
74985: LD_INT 4
74987: NEG
74988: PUSH
74989: EMPTY
74990: LIST
74991: LIST
74992: PUSH
74993: LD_INT 1
74995: NEG
74996: PUSH
74997: LD_INT 5
74999: NEG
75000: PUSH
75001: EMPTY
75002: LIST
75003: LIST
75004: PUSH
75005: LD_INT 2
75007: PUSH
75008: LD_INT 3
75010: NEG
75011: PUSH
75012: EMPTY
75013: LIST
75014: LIST
75015: PUSH
75016: LD_INT 2
75018: NEG
75019: PUSH
75020: LD_INT 5
75022: NEG
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: PUSH
75028: LD_INT 3
75030: PUSH
75031: LD_INT 0
75033: PUSH
75034: EMPTY
75035: LIST
75036: LIST
75037: PUSH
75038: LD_INT 3
75040: PUSH
75041: LD_INT 1
75043: NEG
75044: PUSH
75045: EMPTY
75046: LIST
75047: LIST
75048: PUSH
75049: LD_INT 4
75051: PUSH
75052: LD_INT 0
75054: PUSH
75055: EMPTY
75056: LIST
75057: LIST
75058: PUSH
75059: LD_INT 4
75061: PUSH
75062: LD_INT 1
75064: PUSH
75065: EMPTY
75066: LIST
75067: LIST
75068: PUSH
75069: LD_INT 3
75071: PUSH
75072: LD_INT 1
75074: PUSH
75075: EMPTY
75076: LIST
75077: LIST
75078: PUSH
75079: LD_INT 2
75081: PUSH
75082: LD_INT 0
75084: PUSH
75085: EMPTY
75086: LIST
75087: LIST
75088: PUSH
75089: LD_INT 2
75091: PUSH
75092: LD_INT 1
75094: NEG
75095: PUSH
75096: EMPTY
75097: LIST
75098: LIST
75099: PUSH
75100: LD_INT 2
75102: PUSH
75103: LD_INT 2
75105: NEG
75106: PUSH
75107: EMPTY
75108: LIST
75109: LIST
75110: PUSH
75111: LD_INT 4
75113: PUSH
75114: LD_INT 2
75116: PUSH
75117: EMPTY
75118: LIST
75119: LIST
75120: PUSH
75121: LD_INT 4
75123: PUSH
75124: LD_INT 4
75126: PUSH
75127: EMPTY
75128: LIST
75129: LIST
75130: PUSH
75131: LD_INT 4
75133: PUSH
75134: LD_INT 3
75136: PUSH
75137: EMPTY
75138: LIST
75139: LIST
75140: PUSH
75141: LD_INT 5
75143: PUSH
75144: LD_INT 4
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: PUSH
75151: LD_INT 5
75153: PUSH
75154: LD_INT 5
75156: PUSH
75157: EMPTY
75158: LIST
75159: LIST
75160: PUSH
75161: LD_INT 4
75163: PUSH
75164: LD_INT 5
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: PUSH
75171: LD_INT 3
75173: PUSH
75174: LD_INT 4
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: PUSH
75181: LD_INT 3
75183: PUSH
75184: LD_INT 3
75186: PUSH
75187: EMPTY
75188: LIST
75189: LIST
75190: PUSH
75191: LD_INT 5
75193: PUSH
75194: LD_INT 3
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PUSH
75201: LD_INT 3
75203: PUSH
75204: LD_INT 5
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: PUSH
75211: LD_INT 0
75213: PUSH
75214: LD_INT 3
75216: PUSH
75217: EMPTY
75218: LIST
75219: LIST
75220: PUSH
75221: LD_INT 0
75223: PUSH
75224: LD_INT 2
75226: PUSH
75227: EMPTY
75228: LIST
75229: LIST
75230: PUSH
75231: LD_INT 1
75233: PUSH
75234: LD_INT 3
75236: PUSH
75237: EMPTY
75238: LIST
75239: LIST
75240: PUSH
75241: LD_INT 1
75243: PUSH
75244: LD_INT 4
75246: PUSH
75247: EMPTY
75248: LIST
75249: LIST
75250: PUSH
75251: LD_INT 0
75253: PUSH
75254: LD_INT 4
75256: PUSH
75257: EMPTY
75258: LIST
75259: LIST
75260: PUSH
75261: LD_INT 1
75263: NEG
75264: PUSH
75265: LD_INT 3
75267: PUSH
75268: EMPTY
75269: LIST
75270: LIST
75271: PUSH
75272: LD_INT 1
75274: NEG
75275: PUSH
75276: LD_INT 2
75278: PUSH
75279: EMPTY
75280: LIST
75281: LIST
75282: PUSH
75283: LD_INT 2
75285: PUSH
75286: LD_INT 4
75288: PUSH
75289: EMPTY
75290: LIST
75291: LIST
75292: PUSH
75293: LD_INT 2
75295: NEG
75296: PUSH
75297: LD_INT 2
75299: PUSH
75300: EMPTY
75301: LIST
75302: LIST
75303: PUSH
75304: LD_INT 4
75306: NEG
75307: PUSH
75308: LD_INT 0
75310: PUSH
75311: EMPTY
75312: LIST
75313: LIST
75314: PUSH
75315: LD_INT 4
75317: NEG
75318: PUSH
75319: LD_INT 1
75321: NEG
75322: PUSH
75323: EMPTY
75324: LIST
75325: LIST
75326: PUSH
75327: LD_INT 3
75329: NEG
75330: PUSH
75331: LD_INT 0
75333: PUSH
75334: EMPTY
75335: LIST
75336: LIST
75337: PUSH
75338: LD_INT 3
75340: NEG
75341: PUSH
75342: LD_INT 1
75344: PUSH
75345: EMPTY
75346: LIST
75347: LIST
75348: PUSH
75349: LD_INT 4
75351: NEG
75352: PUSH
75353: LD_INT 1
75355: PUSH
75356: EMPTY
75357: LIST
75358: LIST
75359: PUSH
75360: LD_INT 5
75362: NEG
75363: PUSH
75364: LD_INT 0
75366: PUSH
75367: EMPTY
75368: LIST
75369: LIST
75370: PUSH
75371: LD_INT 5
75373: NEG
75374: PUSH
75375: LD_INT 1
75377: NEG
75378: PUSH
75379: EMPTY
75380: LIST
75381: LIST
75382: PUSH
75383: LD_INT 5
75385: NEG
75386: PUSH
75387: LD_INT 2
75389: NEG
75390: PUSH
75391: EMPTY
75392: LIST
75393: LIST
75394: PUSH
75395: LD_INT 3
75397: NEG
75398: PUSH
75399: LD_INT 2
75401: PUSH
75402: EMPTY
75403: LIST
75404: LIST
75405: PUSH
75406: EMPTY
75407: LIST
75408: LIST
75409: LIST
75410: LIST
75411: LIST
75412: LIST
75413: LIST
75414: LIST
75415: LIST
75416: LIST
75417: LIST
75418: LIST
75419: LIST
75420: LIST
75421: LIST
75422: LIST
75423: LIST
75424: LIST
75425: LIST
75426: LIST
75427: LIST
75428: LIST
75429: LIST
75430: LIST
75431: LIST
75432: LIST
75433: LIST
75434: LIST
75435: LIST
75436: LIST
75437: LIST
75438: LIST
75439: LIST
75440: LIST
75441: LIST
75442: LIST
75443: LIST
75444: LIST
75445: LIST
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: LIST
75451: LIST
75452: ST_TO_ADDR
// end ; end ;
75453: GO 75456
75455: POP
// case btype of b_depot , b_warehouse :
75456: LD_VAR 0 1
75460: PUSH
75461: LD_INT 0
75463: DOUBLE
75464: EQUAL
75465: IFTRUE 75475
75467: LD_INT 1
75469: DOUBLE
75470: EQUAL
75471: IFTRUE 75475
75473: GO 75676
75475: POP
// case nation of nation_american :
75476: LD_VAR 0 5
75480: PUSH
75481: LD_INT 1
75483: DOUBLE
75484: EQUAL
75485: IFTRUE 75489
75487: GO 75545
75489: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
75490: LD_ADDR_VAR 0 9
75494: PUSH
75495: LD_VAR 0 11
75499: PUSH
75500: LD_VAR 0 12
75504: PUSH
75505: LD_VAR 0 13
75509: PUSH
75510: LD_VAR 0 14
75514: PUSH
75515: LD_VAR 0 15
75519: PUSH
75520: LD_VAR 0 16
75524: PUSH
75525: EMPTY
75526: LIST
75527: LIST
75528: LIST
75529: LIST
75530: LIST
75531: LIST
75532: PUSH
75533: LD_VAR 0 4
75537: PUSH
75538: LD_INT 1
75540: PLUS
75541: ARRAY
75542: ST_TO_ADDR
75543: GO 75674
75545: LD_INT 2
75547: DOUBLE
75548: EQUAL
75549: IFTRUE 75553
75551: GO 75609
75553: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
75554: LD_ADDR_VAR 0 9
75558: PUSH
75559: LD_VAR 0 17
75563: PUSH
75564: LD_VAR 0 18
75568: PUSH
75569: LD_VAR 0 19
75573: PUSH
75574: LD_VAR 0 20
75578: PUSH
75579: LD_VAR 0 21
75583: PUSH
75584: LD_VAR 0 22
75588: PUSH
75589: EMPTY
75590: LIST
75591: LIST
75592: LIST
75593: LIST
75594: LIST
75595: LIST
75596: PUSH
75597: LD_VAR 0 4
75601: PUSH
75602: LD_INT 1
75604: PLUS
75605: ARRAY
75606: ST_TO_ADDR
75607: GO 75674
75609: LD_INT 3
75611: DOUBLE
75612: EQUAL
75613: IFTRUE 75617
75615: GO 75673
75617: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
75618: LD_ADDR_VAR 0 9
75622: PUSH
75623: LD_VAR 0 23
75627: PUSH
75628: LD_VAR 0 24
75632: PUSH
75633: LD_VAR 0 25
75637: PUSH
75638: LD_VAR 0 26
75642: PUSH
75643: LD_VAR 0 27
75647: PUSH
75648: LD_VAR 0 28
75652: PUSH
75653: EMPTY
75654: LIST
75655: LIST
75656: LIST
75657: LIST
75658: LIST
75659: LIST
75660: PUSH
75661: LD_VAR 0 4
75665: PUSH
75666: LD_INT 1
75668: PLUS
75669: ARRAY
75670: ST_TO_ADDR
75671: GO 75674
75673: POP
75674: GO 76229
75676: LD_INT 2
75678: DOUBLE
75679: EQUAL
75680: IFTRUE 75690
75682: LD_INT 3
75684: DOUBLE
75685: EQUAL
75686: IFTRUE 75690
75688: GO 75746
75690: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
75691: LD_ADDR_VAR 0 9
75695: PUSH
75696: LD_VAR 0 29
75700: PUSH
75701: LD_VAR 0 30
75705: PUSH
75706: LD_VAR 0 31
75710: PUSH
75711: LD_VAR 0 32
75715: PUSH
75716: LD_VAR 0 33
75720: PUSH
75721: LD_VAR 0 34
75725: PUSH
75726: EMPTY
75727: LIST
75728: LIST
75729: LIST
75730: LIST
75731: LIST
75732: LIST
75733: PUSH
75734: LD_VAR 0 4
75738: PUSH
75739: LD_INT 1
75741: PLUS
75742: ARRAY
75743: ST_TO_ADDR
75744: GO 76229
75746: LD_INT 16
75748: DOUBLE
75749: EQUAL
75750: IFTRUE 75808
75752: LD_INT 17
75754: DOUBLE
75755: EQUAL
75756: IFTRUE 75808
75758: LD_INT 18
75760: DOUBLE
75761: EQUAL
75762: IFTRUE 75808
75764: LD_INT 19
75766: DOUBLE
75767: EQUAL
75768: IFTRUE 75808
75770: LD_INT 22
75772: DOUBLE
75773: EQUAL
75774: IFTRUE 75808
75776: LD_INT 20
75778: DOUBLE
75779: EQUAL
75780: IFTRUE 75808
75782: LD_INT 21
75784: DOUBLE
75785: EQUAL
75786: IFTRUE 75808
75788: LD_INT 23
75790: DOUBLE
75791: EQUAL
75792: IFTRUE 75808
75794: LD_INT 24
75796: DOUBLE
75797: EQUAL
75798: IFTRUE 75808
75800: LD_INT 25
75802: DOUBLE
75803: EQUAL
75804: IFTRUE 75808
75806: GO 75864
75808: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75809: LD_ADDR_VAR 0 9
75813: PUSH
75814: LD_VAR 0 35
75818: PUSH
75819: LD_VAR 0 36
75823: PUSH
75824: LD_VAR 0 37
75828: PUSH
75829: LD_VAR 0 38
75833: PUSH
75834: LD_VAR 0 39
75838: PUSH
75839: LD_VAR 0 40
75843: PUSH
75844: EMPTY
75845: LIST
75846: LIST
75847: LIST
75848: LIST
75849: LIST
75850: LIST
75851: PUSH
75852: LD_VAR 0 4
75856: PUSH
75857: LD_INT 1
75859: PLUS
75860: ARRAY
75861: ST_TO_ADDR
75862: GO 76229
75864: LD_INT 6
75866: DOUBLE
75867: EQUAL
75868: IFTRUE 75920
75870: LD_INT 7
75872: DOUBLE
75873: EQUAL
75874: IFTRUE 75920
75876: LD_INT 8
75878: DOUBLE
75879: EQUAL
75880: IFTRUE 75920
75882: LD_INT 13
75884: DOUBLE
75885: EQUAL
75886: IFTRUE 75920
75888: LD_INT 12
75890: DOUBLE
75891: EQUAL
75892: IFTRUE 75920
75894: LD_INT 15
75896: DOUBLE
75897: EQUAL
75898: IFTRUE 75920
75900: LD_INT 11
75902: DOUBLE
75903: EQUAL
75904: IFTRUE 75920
75906: LD_INT 14
75908: DOUBLE
75909: EQUAL
75910: IFTRUE 75920
75912: LD_INT 10
75914: DOUBLE
75915: EQUAL
75916: IFTRUE 75920
75918: GO 75976
75920: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75921: LD_ADDR_VAR 0 9
75925: PUSH
75926: LD_VAR 0 41
75930: PUSH
75931: LD_VAR 0 42
75935: PUSH
75936: LD_VAR 0 43
75940: PUSH
75941: LD_VAR 0 44
75945: PUSH
75946: LD_VAR 0 45
75950: PUSH
75951: LD_VAR 0 46
75955: PUSH
75956: EMPTY
75957: LIST
75958: LIST
75959: LIST
75960: LIST
75961: LIST
75962: LIST
75963: PUSH
75964: LD_VAR 0 4
75968: PUSH
75969: LD_INT 1
75971: PLUS
75972: ARRAY
75973: ST_TO_ADDR
75974: GO 76229
75976: LD_INT 36
75978: DOUBLE
75979: EQUAL
75980: IFTRUE 75984
75982: GO 76040
75984: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75985: LD_ADDR_VAR 0 9
75989: PUSH
75990: LD_VAR 0 47
75994: PUSH
75995: LD_VAR 0 48
75999: PUSH
76000: LD_VAR 0 49
76004: PUSH
76005: LD_VAR 0 50
76009: PUSH
76010: LD_VAR 0 51
76014: PUSH
76015: LD_VAR 0 52
76019: PUSH
76020: EMPTY
76021: LIST
76022: LIST
76023: LIST
76024: LIST
76025: LIST
76026: LIST
76027: PUSH
76028: LD_VAR 0 4
76032: PUSH
76033: LD_INT 1
76035: PLUS
76036: ARRAY
76037: ST_TO_ADDR
76038: GO 76229
76040: LD_INT 4
76042: DOUBLE
76043: EQUAL
76044: IFTRUE 76066
76046: LD_INT 5
76048: DOUBLE
76049: EQUAL
76050: IFTRUE 76066
76052: LD_INT 34
76054: DOUBLE
76055: EQUAL
76056: IFTRUE 76066
76058: LD_INT 37
76060: DOUBLE
76061: EQUAL
76062: IFTRUE 76066
76064: GO 76122
76066: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
76067: LD_ADDR_VAR 0 9
76071: PUSH
76072: LD_VAR 0 53
76076: PUSH
76077: LD_VAR 0 54
76081: PUSH
76082: LD_VAR 0 55
76086: PUSH
76087: LD_VAR 0 56
76091: PUSH
76092: LD_VAR 0 57
76096: PUSH
76097: LD_VAR 0 58
76101: PUSH
76102: EMPTY
76103: LIST
76104: LIST
76105: LIST
76106: LIST
76107: LIST
76108: LIST
76109: PUSH
76110: LD_VAR 0 4
76114: PUSH
76115: LD_INT 1
76117: PLUS
76118: ARRAY
76119: ST_TO_ADDR
76120: GO 76229
76122: LD_INT 31
76124: DOUBLE
76125: EQUAL
76126: IFTRUE 76172
76128: LD_INT 32
76130: DOUBLE
76131: EQUAL
76132: IFTRUE 76172
76134: LD_INT 33
76136: DOUBLE
76137: EQUAL
76138: IFTRUE 76172
76140: LD_INT 27
76142: DOUBLE
76143: EQUAL
76144: IFTRUE 76172
76146: LD_INT 26
76148: DOUBLE
76149: EQUAL
76150: IFTRUE 76172
76152: LD_INT 28
76154: DOUBLE
76155: EQUAL
76156: IFTRUE 76172
76158: LD_INT 29
76160: DOUBLE
76161: EQUAL
76162: IFTRUE 76172
76164: LD_INT 30
76166: DOUBLE
76167: EQUAL
76168: IFTRUE 76172
76170: GO 76228
76172: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
76173: LD_ADDR_VAR 0 9
76177: PUSH
76178: LD_VAR 0 59
76182: PUSH
76183: LD_VAR 0 60
76187: PUSH
76188: LD_VAR 0 61
76192: PUSH
76193: LD_VAR 0 62
76197: PUSH
76198: LD_VAR 0 63
76202: PUSH
76203: LD_VAR 0 64
76207: PUSH
76208: EMPTY
76209: LIST
76210: LIST
76211: LIST
76212: LIST
76213: LIST
76214: LIST
76215: PUSH
76216: LD_VAR 0 4
76220: PUSH
76221: LD_INT 1
76223: PLUS
76224: ARRAY
76225: ST_TO_ADDR
76226: GO 76229
76228: POP
// temp_list2 = [ ] ;
76229: LD_ADDR_VAR 0 10
76233: PUSH
76234: EMPTY
76235: ST_TO_ADDR
// for i in temp_list do
76236: LD_ADDR_VAR 0 8
76240: PUSH
76241: LD_VAR 0 9
76245: PUSH
76246: FOR_IN
76247: IFFALSE 76299
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
76249: LD_ADDR_VAR 0 10
76253: PUSH
76254: LD_VAR 0 10
76258: PUSH
76259: LD_VAR 0 8
76263: PUSH
76264: LD_INT 1
76266: ARRAY
76267: PUSH
76268: LD_VAR 0 2
76272: PLUS
76273: PUSH
76274: LD_VAR 0 8
76278: PUSH
76279: LD_INT 2
76281: ARRAY
76282: PUSH
76283: LD_VAR 0 3
76287: PLUS
76288: PUSH
76289: EMPTY
76290: LIST
76291: LIST
76292: PUSH
76293: EMPTY
76294: LIST
76295: ADD
76296: ST_TO_ADDR
76297: GO 76246
76299: POP
76300: POP
// result = temp_list2 ;
76301: LD_ADDR_VAR 0 7
76305: PUSH
76306: LD_VAR 0 10
76310: ST_TO_ADDR
// end ;
76311: LD_VAR 0 7
76315: RET
// export function EnemyInRange ( unit , dist ) ; begin
76316: LD_INT 0
76318: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
76319: LD_ADDR_VAR 0 3
76323: PUSH
76324: LD_VAR 0 1
76328: PPUSH
76329: CALL_OW 255
76333: PPUSH
76334: LD_VAR 0 1
76338: PPUSH
76339: CALL_OW 250
76343: PPUSH
76344: LD_VAR 0 1
76348: PPUSH
76349: CALL_OW 251
76353: PPUSH
76354: LD_VAR 0 2
76358: PPUSH
76359: CALL 50087 0 4
76363: PUSH
76364: LD_INT 4
76366: ARRAY
76367: ST_TO_ADDR
// end ;
76368: LD_VAR 0 3
76372: RET
// export function PlayerSeeMe ( unit ) ; begin
76373: LD_INT 0
76375: PPUSH
// result := See ( your_side , unit ) ;
76376: LD_ADDR_VAR 0 2
76380: PUSH
76381: LD_OWVAR 2
76385: PPUSH
76386: LD_VAR 0 1
76390: PPUSH
76391: CALL_OW 292
76395: ST_TO_ADDR
// end ;
76396: LD_VAR 0 2
76400: RET
// export function ReverseDir ( unit ) ; begin
76401: LD_INT 0
76403: PPUSH
// if not unit then
76404: LD_VAR 0 1
76408: NOT
76409: IFFALSE 76413
// exit ;
76411: GO 76436
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
76413: LD_ADDR_VAR 0 2
76417: PUSH
76418: LD_VAR 0 1
76422: PPUSH
76423: CALL_OW 254
76427: PUSH
76428: LD_INT 3
76430: PLUS
76431: PUSH
76432: LD_INT 6
76434: MOD
76435: ST_TO_ADDR
// end ;
76436: LD_VAR 0 2
76440: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
76441: LD_INT 0
76443: PPUSH
76444: PPUSH
76445: PPUSH
76446: PPUSH
76447: PPUSH
// if not hexes then
76448: LD_VAR 0 2
76452: NOT
76453: IFFALSE 76457
// exit ;
76455: GO 76605
// dist := 9999 ;
76457: LD_ADDR_VAR 0 5
76461: PUSH
76462: LD_INT 9999
76464: ST_TO_ADDR
// for i = 1 to hexes do
76465: LD_ADDR_VAR 0 4
76469: PUSH
76470: DOUBLE
76471: LD_INT 1
76473: DEC
76474: ST_TO_ADDR
76475: LD_VAR 0 2
76479: PUSH
76480: FOR_TO
76481: IFFALSE 76593
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
76483: LD_VAR 0 1
76487: PPUSH
76488: LD_VAR 0 2
76492: PUSH
76493: LD_VAR 0 4
76497: ARRAY
76498: PUSH
76499: LD_INT 1
76501: ARRAY
76502: PPUSH
76503: LD_VAR 0 2
76507: PUSH
76508: LD_VAR 0 4
76512: ARRAY
76513: PUSH
76514: LD_INT 2
76516: ARRAY
76517: PPUSH
76518: CALL_OW 297
76522: PUSH
76523: LD_VAR 0 5
76527: LESS
76528: IFFALSE 76591
// begin hex := hexes [ i ] ;
76530: LD_ADDR_VAR 0 7
76534: PUSH
76535: LD_VAR 0 2
76539: PUSH
76540: LD_VAR 0 4
76544: ARRAY
76545: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
76546: LD_ADDR_VAR 0 5
76550: PUSH
76551: LD_VAR 0 1
76555: PPUSH
76556: LD_VAR 0 2
76560: PUSH
76561: LD_VAR 0 4
76565: ARRAY
76566: PUSH
76567: LD_INT 1
76569: ARRAY
76570: PPUSH
76571: LD_VAR 0 2
76575: PUSH
76576: LD_VAR 0 4
76580: ARRAY
76581: PUSH
76582: LD_INT 2
76584: ARRAY
76585: PPUSH
76586: CALL_OW 297
76590: ST_TO_ADDR
// end ; end ;
76591: GO 76480
76593: POP
76594: POP
// result := hex ;
76595: LD_ADDR_VAR 0 3
76599: PUSH
76600: LD_VAR 0 7
76604: ST_TO_ADDR
// end ;
76605: LD_VAR 0 3
76609: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
76610: LD_INT 0
76612: PPUSH
76613: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
76614: LD_VAR 0 1
76618: NOT
76619: PUSH
76620: LD_VAR 0 1
76624: PUSH
76625: LD_INT 21
76627: PUSH
76628: LD_INT 2
76630: PUSH
76631: EMPTY
76632: LIST
76633: LIST
76634: PUSH
76635: LD_INT 23
76637: PUSH
76638: LD_INT 2
76640: PUSH
76641: EMPTY
76642: LIST
76643: LIST
76644: PUSH
76645: EMPTY
76646: LIST
76647: LIST
76648: PPUSH
76649: CALL_OW 69
76653: IN
76654: NOT
76655: OR
76656: IFFALSE 76660
// exit ;
76658: GO 76707
// for i = 1 to 3 do
76660: LD_ADDR_VAR 0 3
76664: PUSH
76665: DOUBLE
76666: LD_INT 1
76668: DEC
76669: ST_TO_ADDR
76670: LD_INT 3
76672: PUSH
76673: FOR_TO
76674: IFFALSE 76705
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
76676: LD_VAR 0 1
76680: PPUSH
76681: CALL_OW 250
76685: PPUSH
76686: LD_VAR 0 1
76690: PPUSH
76691: CALL_OW 251
76695: PPUSH
76696: LD_INT 1
76698: PPUSH
76699: CALL_OW 453
76703: GO 76673
76705: POP
76706: POP
// end ;
76707: LD_VAR 0 2
76711: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
76712: LD_INT 0
76714: PPUSH
76715: PPUSH
76716: PPUSH
76717: PPUSH
76718: PPUSH
76719: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
76720: LD_VAR 0 1
76724: NOT
76725: PUSH
76726: LD_VAR 0 2
76730: NOT
76731: OR
76732: PUSH
76733: LD_VAR 0 1
76737: PPUSH
76738: CALL_OW 314
76742: OR
76743: IFFALSE 76747
// exit ;
76745: GO 77188
// x := GetX ( enemy_unit ) ;
76747: LD_ADDR_VAR 0 7
76751: PUSH
76752: LD_VAR 0 2
76756: PPUSH
76757: CALL_OW 250
76761: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76762: LD_ADDR_VAR 0 8
76766: PUSH
76767: LD_VAR 0 2
76771: PPUSH
76772: CALL_OW 251
76776: ST_TO_ADDR
// if not x or not y then
76777: LD_VAR 0 7
76781: NOT
76782: PUSH
76783: LD_VAR 0 8
76787: NOT
76788: OR
76789: IFFALSE 76793
// exit ;
76791: GO 77188
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76793: LD_ADDR_VAR 0 6
76797: PUSH
76798: LD_VAR 0 7
76802: PPUSH
76803: LD_INT 0
76805: PPUSH
76806: LD_INT 4
76808: PPUSH
76809: CALL_OW 272
76813: PUSH
76814: LD_VAR 0 8
76818: PPUSH
76819: LD_INT 0
76821: PPUSH
76822: LD_INT 4
76824: PPUSH
76825: CALL_OW 273
76829: PUSH
76830: EMPTY
76831: LIST
76832: LIST
76833: PUSH
76834: LD_VAR 0 7
76838: PPUSH
76839: LD_INT 1
76841: PPUSH
76842: LD_INT 4
76844: PPUSH
76845: CALL_OW 272
76849: PUSH
76850: LD_VAR 0 8
76854: PPUSH
76855: LD_INT 1
76857: PPUSH
76858: LD_INT 4
76860: PPUSH
76861: CALL_OW 273
76865: PUSH
76866: EMPTY
76867: LIST
76868: LIST
76869: PUSH
76870: LD_VAR 0 7
76874: PPUSH
76875: LD_INT 2
76877: PPUSH
76878: LD_INT 4
76880: PPUSH
76881: CALL_OW 272
76885: PUSH
76886: LD_VAR 0 8
76890: PPUSH
76891: LD_INT 2
76893: PPUSH
76894: LD_INT 4
76896: PPUSH
76897: CALL_OW 273
76901: PUSH
76902: EMPTY
76903: LIST
76904: LIST
76905: PUSH
76906: LD_VAR 0 7
76910: PPUSH
76911: LD_INT 3
76913: PPUSH
76914: LD_INT 4
76916: PPUSH
76917: CALL_OW 272
76921: PUSH
76922: LD_VAR 0 8
76926: PPUSH
76927: LD_INT 3
76929: PPUSH
76930: LD_INT 4
76932: PPUSH
76933: CALL_OW 273
76937: PUSH
76938: EMPTY
76939: LIST
76940: LIST
76941: PUSH
76942: LD_VAR 0 7
76946: PPUSH
76947: LD_INT 4
76949: PPUSH
76950: LD_INT 4
76952: PPUSH
76953: CALL_OW 272
76957: PUSH
76958: LD_VAR 0 8
76962: PPUSH
76963: LD_INT 4
76965: PPUSH
76966: LD_INT 4
76968: PPUSH
76969: CALL_OW 273
76973: PUSH
76974: EMPTY
76975: LIST
76976: LIST
76977: PUSH
76978: LD_VAR 0 7
76982: PPUSH
76983: LD_INT 5
76985: PPUSH
76986: LD_INT 4
76988: PPUSH
76989: CALL_OW 272
76993: PUSH
76994: LD_VAR 0 8
76998: PPUSH
76999: LD_INT 5
77001: PPUSH
77002: LD_INT 4
77004: PPUSH
77005: CALL_OW 273
77009: PUSH
77010: EMPTY
77011: LIST
77012: LIST
77013: PUSH
77014: EMPTY
77015: LIST
77016: LIST
77017: LIST
77018: LIST
77019: LIST
77020: LIST
77021: ST_TO_ADDR
// for i = tmp downto 1 do
77022: LD_ADDR_VAR 0 4
77026: PUSH
77027: DOUBLE
77028: LD_VAR 0 6
77032: INC
77033: ST_TO_ADDR
77034: LD_INT 1
77036: PUSH
77037: FOR_DOWNTO
77038: IFFALSE 77139
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
77040: LD_VAR 0 6
77044: PUSH
77045: LD_VAR 0 4
77049: ARRAY
77050: PUSH
77051: LD_INT 1
77053: ARRAY
77054: PPUSH
77055: LD_VAR 0 6
77059: PUSH
77060: LD_VAR 0 4
77064: ARRAY
77065: PUSH
77066: LD_INT 2
77068: ARRAY
77069: PPUSH
77070: CALL_OW 488
77074: NOT
77075: PUSH
77076: LD_VAR 0 6
77080: PUSH
77081: LD_VAR 0 4
77085: ARRAY
77086: PUSH
77087: LD_INT 1
77089: ARRAY
77090: PPUSH
77091: LD_VAR 0 6
77095: PUSH
77096: LD_VAR 0 4
77100: ARRAY
77101: PUSH
77102: LD_INT 2
77104: ARRAY
77105: PPUSH
77106: CALL_OW 428
77110: PUSH
77111: LD_INT 0
77113: NONEQUAL
77114: OR
77115: IFFALSE 77137
// tmp := Delete ( tmp , i ) ;
77117: LD_ADDR_VAR 0 6
77121: PUSH
77122: LD_VAR 0 6
77126: PPUSH
77127: LD_VAR 0 4
77131: PPUSH
77132: CALL_OW 3
77136: ST_TO_ADDR
77137: GO 77037
77139: POP
77140: POP
// j := GetClosestHex ( unit , tmp ) ;
77141: LD_ADDR_VAR 0 5
77145: PUSH
77146: LD_VAR 0 1
77150: PPUSH
77151: LD_VAR 0 6
77155: PPUSH
77156: CALL 76441 0 2
77160: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
77161: LD_VAR 0 1
77165: PPUSH
77166: LD_VAR 0 5
77170: PUSH
77171: LD_INT 1
77173: ARRAY
77174: PPUSH
77175: LD_VAR 0 5
77179: PUSH
77180: LD_INT 2
77182: ARRAY
77183: PPUSH
77184: CALL_OW 111
// end ;
77188: LD_VAR 0 3
77192: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77193: LD_INT 0
77195: PPUSH
77196: PPUSH
77197: PPUSH
// uc_side = 0 ;
77198: LD_ADDR_OWVAR 20
77202: PUSH
77203: LD_INT 0
77205: ST_TO_ADDR
// uc_nation = 0 ;
77206: LD_ADDR_OWVAR 21
77210: PUSH
77211: LD_INT 0
77213: ST_TO_ADDR
// InitHc_All ( ) ;
77214: CALL_OW 584
// InitVc ;
77218: CALL_OW 20
// if mastodonts then
77222: LD_VAR 0 6
77226: IFFALSE 77293
// for i = 1 to mastodonts do
77228: LD_ADDR_VAR 0 11
77232: PUSH
77233: DOUBLE
77234: LD_INT 1
77236: DEC
77237: ST_TO_ADDR
77238: LD_VAR 0 6
77242: PUSH
77243: FOR_TO
77244: IFFALSE 77291
// begin vc_chassis := 31 ;
77246: LD_ADDR_OWVAR 37
77250: PUSH
77251: LD_INT 31
77253: ST_TO_ADDR
// vc_control := control_rider ;
77254: LD_ADDR_OWVAR 38
77258: PUSH
77259: LD_INT 4
77261: ST_TO_ADDR
// animal := CreateVehicle ;
77262: LD_ADDR_VAR 0 12
77266: PUSH
77267: CALL_OW 45
77271: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77272: LD_VAR 0 12
77276: PPUSH
77277: LD_VAR 0 8
77281: PPUSH
77282: LD_INT 0
77284: PPUSH
77285: CALL 79481 0 3
// end ;
77289: GO 77243
77291: POP
77292: POP
// if horses then
77293: LD_VAR 0 5
77297: IFFALSE 77364
// for i = 1 to horses do
77299: LD_ADDR_VAR 0 11
77303: PUSH
77304: DOUBLE
77305: LD_INT 1
77307: DEC
77308: ST_TO_ADDR
77309: LD_VAR 0 5
77313: PUSH
77314: FOR_TO
77315: IFFALSE 77362
// begin hc_class := 21 ;
77317: LD_ADDR_OWVAR 28
77321: PUSH
77322: LD_INT 21
77324: ST_TO_ADDR
// hc_gallery :=  ;
77325: LD_ADDR_OWVAR 33
77329: PUSH
77330: LD_STRING 
77332: ST_TO_ADDR
// animal := CreateHuman ;
77333: LD_ADDR_VAR 0 12
77337: PUSH
77338: CALL_OW 44
77342: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77343: LD_VAR 0 12
77347: PPUSH
77348: LD_VAR 0 8
77352: PPUSH
77353: LD_INT 0
77355: PPUSH
77356: CALL 79481 0 3
// end ;
77360: GO 77314
77362: POP
77363: POP
// if birds then
77364: LD_VAR 0 1
77368: IFFALSE 77435
// for i = 1 to birds do
77370: LD_ADDR_VAR 0 11
77374: PUSH
77375: DOUBLE
77376: LD_INT 1
77378: DEC
77379: ST_TO_ADDR
77380: LD_VAR 0 1
77384: PUSH
77385: FOR_TO
77386: IFFALSE 77433
// begin hc_class = 18 ;
77388: LD_ADDR_OWVAR 28
77392: PUSH
77393: LD_INT 18
77395: ST_TO_ADDR
// hc_gallery =  ;
77396: LD_ADDR_OWVAR 33
77400: PUSH
77401: LD_STRING 
77403: ST_TO_ADDR
// animal := CreateHuman ;
77404: LD_ADDR_VAR 0 12
77408: PUSH
77409: CALL_OW 44
77413: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77414: LD_VAR 0 12
77418: PPUSH
77419: LD_VAR 0 8
77423: PPUSH
77424: LD_INT 0
77426: PPUSH
77427: CALL 79481 0 3
// end ;
77431: GO 77385
77433: POP
77434: POP
// if tigers then
77435: LD_VAR 0 2
77439: IFFALSE 77523
// for i = 1 to tigers do
77441: LD_ADDR_VAR 0 11
77445: PUSH
77446: DOUBLE
77447: LD_INT 1
77449: DEC
77450: ST_TO_ADDR
77451: LD_VAR 0 2
77455: PUSH
77456: FOR_TO
77457: IFFALSE 77521
// begin hc_class = class_tiger ;
77459: LD_ADDR_OWVAR 28
77463: PUSH
77464: LD_INT 14
77466: ST_TO_ADDR
// hc_gallery =  ;
77467: LD_ADDR_OWVAR 33
77471: PUSH
77472: LD_STRING 
77474: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77475: LD_ADDR_OWVAR 35
77479: PUSH
77480: LD_INT 7
77482: NEG
77483: PPUSH
77484: LD_INT 7
77486: PPUSH
77487: CALL_OW 12
77491: ST_TO_ADDR
// animal := CreateHuman ;
77492: LD_ADDR_VAR 0 12
77496: PUSH
77497: CALL_OW 44
77501: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77502: LD_VAR 0 12
77506: PPUSH
77507: LD_VAR 0 8
77511: PPUSH
77512: LD_INT 0
77514: PPUSH
77515: CALL 79481 0 3
// end ;
77519: GO 77456
77521: POP
77522: POP
// if apemans then
77523: LD_VAR 0 3
77527: IFFALSE 77650
// for i = 1 to apemans do
77529: LD_ADDR_VAR 0 11
77533: PUSH
77534: DOUBLE
77535: LD_INT 1
77537: DEC
77538: ST_TO_ADDR
77539: LD_VAR 0 3
77543: PUSH
77544: FOR_TO
77545: IFFALSE 77648
// begin hc_class = class_apeman ;
77547: LD_ADDR_OWVAR 28
77551: PUSH
77552: LD_INT 12
77554: ST_TO_ADDR
// hc_gallery =  ;
77555: LD_ADDR_OWVAR 33
77559: PUSH
77560: LD_STRING 
77562: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
77563: LD_ADDR_OWVAR 35
77567: PUSH
77568: LD_INT 5
77570: NEG
77571: PPUSH
77572: LD_INT 5
77574: PPUSH
77575: CALL_OW 12
77579: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
77580: LD_ADDR_OWVAR 31
77584: PUSH
77585: LD_INT 1
77587: PPUSH
77588: LD_INT 3
77590: PPUSH
77591: CALL_OW 12
77595: PUSH
77596: LD_INT 1
77598: PPUSH
77599: LD_INT 3
77601: PPUSH
77602: CALL_OW 12
77606: PUSH
77607: LD_INT 0
77609: PUSH
77610: LD_INT 0
77612: PUSH
77613: EMPTY
77614: LIST
77615: LIST
77616: LIST
77617: LIST
77618: ST_TO_ADDR
// animal := CreateHuman ;
77619: LD_ADDR_VAR 0 12
77623: PUSH
77624: CALL_OW 44
77628: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77629: LD_VAR 0 12
77633: PPUSH
77634: LD_VAR 0 8
77638: PPUSH
77639: LD_INT 0
77641: PPUSH
77642: CALL 79481 0 3
// end ;
77646: GO 77544
77648: POP
77649: POP
// if enchidnas then
77650: LD_VAR 0 4
77654: IFFALSE 77721
// for i = 1 to enchidnas do
77656: LD_ADDR_VAR 0 11
77660: PUSH
77661: DOUBLE
77662: LD_INT 1
77664: DEC
77665: ST_TO_ADDR
77666: LD_VAR 0 4
77670: PUSH
77671: FOR_TO
77672: IFFALSE 77719
// begin hc_class = 13 ;
77674: LD_ADDR_OWVAR 28
77678: PUSH
77679: LD_INT 13
77681: ST_TO_ADDR
// hc_gallery =  ;
77682: LD_ADDR_OWVAR 33
77686: PUSH
77687: LD_STRING 
77689: ST_TO_ADDR
// animal := CreateHuman ;
77690: LD_ADDR_VAR 0 12
77694: PUSH
77695: CALL_OW 44
77699: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77700: LD_VAR 0 12
77704: PPUSH
77705: LD_VAR 0 8
77709: PPUSH
77710: LD_INT 0
77712: PPUSH
77713: CALL 79481 0 3
// end ;
77717: GO 77671
77719: POP
77720: POP
// if fishes then
77721: LD_VAR 0 7
77725: IFFALSE 77792
// for i = 1 to fishes do
77727: LD_ADDR_VAR 0 11
77731: PUSH
77732: DOUBLE
77733: LD_INT 1
77735: DEC
77736: ST_TO_ADDR
77737: LD_VAR 0 7
77741: PUSH
77742: FOR_TO
77743: IFFALSE 77790
// begin hc_class = 20 ;
77745: LD_ADDR_OWVAR 28
77749: PUSH
77750: LD_INT 20
77752: ST_TO_ADDR
// hc_gallery =  ;
77753: LD_ADDR_OWVAR 33
77757: PUSH
77758: LD_STRING 
77760: ST_TO_ADDR
// animal := CreateHuman ;
77761: LD_ADDR_VAR 0 12
77765: PUSH
77766: CALL_OW 44
77770: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77771: LD_VAR 0 12
77775: PPUSH
77776: LD_VAR 0 9
77780: PPUSH
77781: LD_INT 0
77783: PPUSH
77784: CALL 79481 0 3
// end ;
77788: GO 77742
77790: POP
77791: POP
// end ;
77792: LD_VAR 0 10
77796: RET
// export function WantHeal ( sci , unit ) ; begin
77797: LD_INT 0
77799: PPUSH
// if GetTaskList ( sci ) > 0 then
77800: LD_VAR 0 1
77804: PPUSH
77805: CALL_OW 437
77809: PUSH
77810: LD_INT 0
77812: GREATER
77813: IFFALSE 77883
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77815: LD_VAR 0 1
77819: PPUSH
77820: CALL_OW 437
77824: PUSH
77825: LD_INT 1
77827: ARRAY
77828: PUSH
77829: LD_INT 1
77831: ARRAY
77832: PUSH
77833: LD_STRING l
77835: EQUAL
77836: PUSH
77837: LD_VAR 0 1
77841: PPUSH
77842: CALL_OW 437
77846: PUSH
77847: LD_INT 1
77849: ARRAY
77850: PUSH
77851: LD_INT 4
77853: ARRAY
77854: PUSH
77855: LD_VAR 0 2
77859: EQUAL
77860: AND
77861: IFFALSE 77873
// result := true else
77863: LD_ADDR_VAR 0 3
77867: PUSH
77868: LD_INT 1
77870: ST_TO_ADDR
77871: GO 77881
// result := false ;
77873: LD_ADDR_VAR 0 3
77877: PUSH
77878: LD_INT 0
77880: ST_TO_ADDR
// end else
77881: GO 77891
// result := false ;
77883: LD_ADDR_VAR 0 3
77887: PUSH
77888: LD_INT 0
77890: ST_TO_ADDR
// end ;
77891: LD_VAR 0 3
77895: RET
// export function HealTarget ( sci ) ; begin
77896: LD_INT 0
77898: PPUSH
// if not sci then
77899: LD_VAR 0 1
77903: NOT
77904: IFFALSE 77908
// exit ;
77906: GO 77973
// result := 0 ;
77908: LD_ADDR_VAR 0 2
77912: PUSH
77913: LD_INT 0
77915: ST_TO_ADDR
// if GetTaskList ( sci ) then
77916: LD_VAR 0 1
77920: PPUSH
77921: CALL_OW 437
77925: IFFALSE 77973
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77927: LD_VAR 0 1
77931: PPUSH
77932: CALL_OW 437
77936: PUSH
77937: LD_INT 1
77939: ARRAY
77940: PUSH
77941: LD_INT 1
77943: ARRAY
77944: PUSH
77945: LD_STRING l
77947: EQUAL
77948: IFFALSE 77973
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77950: LD_ADDR_VAR 0 2
77954: PUSH
77955: LD_VAR 0 1
77959: PPUSH
77960: CALL_OW 437
77964: PUSH
77965: LD_INT 1
77967: ARRAY
77968: PUSH
77969: LD_INT 4
77971: ARRAY
77972: ST_TO_ADDR
// end ;
77973: LD_VAR 0 2
77977: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77978: LD_INT 0
77980: PPUSH
77981: PPUSH
77982: PPUSH
77983: PPUSH
// if not base_units then
77984: LD_VAR 0 1
77988: NOT
77989: IFFALSE 77993
// exit ;
77991: GO 78080
// result := false ;
77993: LD_ADDR_VAR 0 2
77997: PUSH
77998: LD_INT 0
78000: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
78001: LD_ADDR_VAR 0 5
78005: PUSH
78006: LD_VAR 0 1
78010: PPUSH
78011: LD_INT 21
78013: PUSH
78014: LD_INT 3
78016: PUSH
78017: EMPTY
78018: LIST
78019: LIST
78020: PPUSH
78021: CALL_OW 72
78025: ST_TO_ADDR
// if not tmp then
78026: LD_VAR 0 5
78030: NOT
78031: IFFALSE 78035
// exit ;
78033: GO 78080
// for i in tmp do
78035: LD_ADDR_VAR 0 3
78039: PUSH
78040: LD_VAR 0 5
78044: PUSH
78045: FOR_IN
78046: IFFALSE 78078
// begin result := EnemyInRange ( i , 22 ) ;
78048: LD_ADDR_VAR 0 2
78052: PUSH
78053: LD_VAR 0 3
78057: PPUSH
78058: LD_INT 22
78060: PPUSH
78061: CALL 76316 0 2
78065: ST_TO_ADDR
// if result then
78066: LD_VAR 0 2
78070: IFFALSE 78076
// exit ;
78072: POP
78073: POP
78074: GO 78080
// end ;
78076: GO 78045
78078: POP
78079: POP
// end ;
78080: LD_VAR 0 2
78084: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
78085: LD_INT 0
78087: PPUSH
78088: PPUSH
// if not units then
78089: LD_VAR 0 1
78093: NOT
78094: IFFALSE 78098
// exit ;
78096: GO 78168
// result := [ ] ;
78098: LD_ADDR_VAR 0 3
78102: PUSH
78103: EMPTY
78104: ST_TO_ADDR
// for i in units do
78105: LD_ADDR_VAR 0 4
78109: PUSH
78110: LD_VAR 0 1
78114: PUSH
78115: FOR_IN
78116: IFFALSE 78166
// if GetTag ( i ) = tag then
78118: LD_VAR 0 4
78122: PPUSH
78123: CALL_OW 110
78127: PUSH
78128: LD_VAR 0 2
78132: EQUAL
78133: IFFALSE 78164
// result := Insert ( result , result + 1 , i ) ;
78135: LD_ADDR_VAR 0 3
78139: PUSH
78140: LD_VAR 0 3
78144: PPUSH
78145: LD_VAR 0 3
78149: PUSH
78150: LD_INT 1
78152: PLUS
78153: PPUSH
78154: LD_VAR 0 4
78158: PPUSH
78159: CALL_OW 2
78163: ST_TO_ADDR
78164: GO 78115
78166: POP
78167: POP
// end ;
78168: LD_VAR 0 3
78172: RET
// export function IsDriver ( un ) ; begin
78173: LD_INT 0
78175: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
78176: LD_ADDR_VAR 0 2
78180: PUSH
78181: LD_VAR 0 1
78185: PUSH
78186: LD_INT 55
78188: PUSH
78189: EMPTY
78190: LIST
78191: PPUSH
78192: CALL_OW 69
78196: IN
78197: ST_TO_ADDR
// end ;
78198: LD_VAR 0 2
78202: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78203: LD_INT 0
78205: PPUSH
78206: PPUSH
// list := [ ] ;
78207: LD_ADDR_VAR 0 5
78211: PUSH
78212: EMPTY
78213: ST_TO_ADDR
// case d of 0 :
78214: LD_VAR 0 3
78218: PUSH
78219: LD_INT 0
78221: DOUBLE
78222: EQUAL
78223: IFTRUE 78227
78225: GO 78360
78227: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78228: LD_ADDR_VAR 0 5
78232: PUSH
78233: LD_VAR 0 1
78237: PUSH
78238: LD_INT 4
78240: MINUS
78241: PUSH
78242: LD_VAR 0 2
78246: PUSH
78247: LD_INT 4
78249: MINUS
78250: PUSH
78251: LD_INT 2
78253: PUSH
78254: EMPTY
78255: LIST
78256: LIST
78257: LIST
78258: PUSH
78259: LD_VAR 0 1
78263: PUSH
78264: LD_INT 3
78266: MINUS
78267: PUSH
78268: LD_VAR 0 2
78272: PUSH
78273: LD_INT 1
78275: PUSH
78276: EMPTY
78277: LIST
78278: LIST
78279: LIST
78280: PUSH
78281: LD_VAR 0 1
78285: PUSH
78286: LD_INT 4
78288: PLUS
78289: PUSH
78290: LD_VAR 0 2
78294: PUSH
78295: LD_INT 4
78297: PUSH
78298: EMPTY
78299: LIST
78300: LIST
78301: LIST
78302: PUSH
78303: LD_VAR 0 1
78307: PUSH
78308: LD_INT 3
78310: PLUS
78311: PUSH
78312: LD_VAR 0 2
78316: PUSH
78317: LD_INT 3
78319: PLUS
78320: PUSH
78321: LD_INT 5
78323: PUSH
78324: EMPTY
78325: LIST
78326: LIST
78327: LIST
78328: PUSH
78329: LD_VAR 0 1
78333: PUSH
78334: LD_VAR 0 2
78338: PUSH
78339: LD_INT 4
78341: PLUS
78342: PUSH
78343: LD_INT 0
78345: PUSH
78346: EMPTY
78347: LIST
78348: LIST
78349: LIST
78350: PUSH
78351: EMPTY
78352: LIST
78353: LIST
78354: LIST
78355: LIST
78356: LIST
78357: ST_TO_ADDR
// end ; 1 :
78358: GO 79058
78360: LD_INT 1
78362: DOUBLE
78363: EQUAL
78364: IFTRUE 78368
78366: GO 78501
78368: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78369: LD_ADDR_VAR 0 5
78373: PUSH
78374: LD_VAR 0 1
78378: PUSH
78379: LD_VAR 0 2
78383: PUSH
78384: LD_INT 4
78386: MINUS
78387: PUSH
78388: LD_INT 3
78390: PUSH
78391: EMPTY
78392: LIST
78393: LIST
78394: LIST
78395: PUSH
78396: LD_VAR 0 1
78400: PUSH
78401: LD_INT 3
78403: MINUS
78404: PUSH
78405: LD_VAR 0 2
78409: PUSH
78410: LD_INT 3
78412: MINUS
78413: PUSH
78414: LD_INT 2
78416: PUSH
78417: EMPTY
78418: LIST
78419: LIST
78420: LIST
78421: PUSH
78422: LD_VAR 0 1
78426: PUSH
78427: LD_INT 4
78429: MINUS
78430: PUSH
78431: LD_VAR 0 2
78435: PUSH
78436: LD_INT 1
78438: PUSH
78439: EMPTY
78440: LIST
78441: LIST
78442: LIST
78443: PUSH
78444: LD_VAR 0 1
78448: PUSH
78449: LD_VAR 0 2
78453: PUSH
78454: LD_INT 3
78456: PLUS
78457: PUSH
78458: LD_INT 0
78460: PUSH
78461: EMPTY
78462: LIST
78463: LIST
78464: LIST
78465: PUSH
78466: LD_VAR 0 1
78470: PUSH
78471: LD_INT 4
78473: PLUS
78474: PUSH
78475: LD_VAR 0 2
78479: PUSH
78480: LD_INT 4
78482: PLUS
78483: PUSH
78484: LD_INT 5
78486: PUSH
78487: EMPTY
78488: LIST
78489: LIST
78490: LIST
78491: PUSH
78492: EMPTY
78493: LIST
78494: LIST
78495: LIST
78496: LIST
78497: LIST
78498: ST_TO_ADDR
// end ; 2 :
78499: GO 79058
78501: LD_INT 2
78503: DOUBLE
78504: EQUAL
78505: IFTRUE 78509
78507: GO 78638
78509: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78510: LD_ADDR_VAR 0 5
78514: PUSH
78515: LD_VAR 0 1
78519: PUSH
78520: LD_VAR 0 2
78524: PUSH
78525: LD_INT 3
78527: MINUS
78528: PUSH
78529: LD_INT 3
78531: PUSH
78532: EMPTY
78533: LIST
78534: LIST
78535: LIST
78536: PUSH
78537: LD_VAR 0 1
78541: PUSH
78542: LD_INT 4
78544: PLUS
78545: PUSH
78546: LD_VAR 0 2
78550: PUSH
78551: LD_INT 4
78553: PUSH
78554: EMPTY
78555: LIST
78556: LIST
78557: LIST
78558: PUSH
78559: LD_VAR 0 1
78563: PUSH
78564: LD_VAR 0 2
78568: PUSH
78569: LD_INT 4
78571: PLUS
78572: PUSH
78573: LD_INT 0
78575: PUSH
78576: EMPTY
78577: LIST
78578: LIST
78579: LIST
78580: PUSH
78581: LD_VAR 0 1
78585: PUSH
78586: LD_INT 3
78588: MINUS
78589: PUSH
78590: LD_VAR 0 2
78594: PUSH
78595: LD_INT 1
78597: PUSH
78598: EMPTY
78599: LIST
78600: LIST
78601: LIST
78602: PUSH
78603: LD_VAR 0 1
78607: PUSH
78608: LD_INT 4
78610: MINUS
78611: PUSH
78612: LD_VAR 0 2
78616: PUSH
78617: LD_INT 4
78619: MINUS
78620: PUSH
78621: LD_INT 2
78623: PUSH
78624: EMPTY
78625: LIST
78626: LIST
78627: LIST
78628: PUSH
78629: EMPTY
78630: LIST
78631: LIST
78632: LIST
78633: LIST
78634: LIST
78635: ST_TO_ADDR
// end ; 3 :
78636: GO 79058
78638: LD_INT 3
78640: DOUBLE
78641: EQUAL
78642: IFTRUE 78646
78644: GO 78779
78646: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78647: LD_ADDR_VAR 0 5
78651: PUSH
78652: LD_VAR 0 1
78656: PUSH
78657: LD_INT 3
78659: PLUS
78660: PUSH
78661: LD_VAR 0 2
78665: PUSH
78666: LD_INT 4
78668: PUSH
78669: EMPTY
78670: LIST
78671: LIST
78672: LIST
78673: PUSH
78674: LD_VAR 0 1
78678: PUSH
78679: LD_INT 4
78681: PLUS
78682: PUSH
78683: LD_VAR 0 2
78687: PUSH
78688: LD_INT 4
78690: PLUS
78691: PUSH
78692: LD_INT 5
78694: PUSH
78695: EMPTY
78696: LIST
78697: LIST
78698: LIST
78699: PUSH
78700: LD_VAR 0 1
78704: PUSH
78705: LD_INT 4
78707: MINUS
78708: PUSH
78709: LD_VAR 0 2
78713: PUSH
78714: LD_INT 1
78716: PUSH
78717: EMPTY
78718: LIST
78719: LIST
78720: LIST
78721: PUSH
78722: LD_VAR 0 1
78726: PUSH
78727: LD_VAR 0 2
78731: PUSH
78732: LD_INT 4
78734: MINUS
78735: PUSH
78736: LD_INT 3
78738: PUSH
78739: EMPTY
78740: LIST
78741: LIST
78742: LIST
78743: PUSH
78744: LD_VAR 0 1
78748: PUSH
78749: LD_INT 3
78751: MINUS
78752: PUSH
78753: LD_VAR 0 2
78757: PUSH
78758: LD_INT 3
78760: MINUS
78761: PUSH
78762: LD_INT 2
78764: PUSH
78765: EMPTY
78766: LIST
78767: LIST
78768: LIST
78769: PUSH
78770: EMPTY
78771: LIST
78772: LIST
78773: LIST
78774: LIST
78775: LIST
78776: ST_TO_ADDR
// end ; 4 :
78777: GO 79058
78779: LD_INT 4
78781: DOUBLE
78782: EQUAL
78783: IFTRUE 78787
78785: GO 78920
78787: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78788: LD_ADDR_VAR 0 5
78792: PUSH
78793: LD_VAR 0 1
78797: PUSH
78798: LD_VAR 0 2
78802: PUSH
78803: LD_INT 4
78805: PLUS
78806: PUSH
78807: LD_INT 0
78809: PUSH
78810: EMPTY
78811: LIST
78812: LIST
78813: LIST
78814: PUSH
78815: LD_VAR 0 1
78819: PUSH
78820: LD_INT 3
78822: PLUS
78823: PUSH
78824: LD_VAR 0 2
78828: PUSH
78829: LD_INT 3
78831: PLUS
78832: PUSH
78833: LD_INT 5
78835: PUSH
78836: EMPTY
78837: LIST
78838: LIST
78839: LIST
78840: PUSH
78841: LD_VAR 0 1
78845: PUSH
78846: LD_INT 4
78848: PLUS
78849: PUSH
78850: LD_VAR 0 2
78854: PUSH
78855: LD_INT 4
78857: PUSH
78858: EMPTY
78859: LIST
78860: LIST
78861: LIST
78862: PUSH
78863: LD_VAR 0 1
78867: PUSH
78868: LD_VAR 0 2
78872: PUSH
78873: LD_INT 3
78875: MINUS
78876: PUSH
78877: LD_INT 3
78879: PUSH
78880: EMPTY
78881: LIST
78882: LIST
78883: LIST
78884: PUSH
78885: LD_VAR 0 1
78889: PUSH
78890: LD_INT 4
78892: MINUS
78893: PUSH
78894: LD_VAR 0 2
78898: PUSH
78899: LD_INT 4
78901: MINUS
78902: PUSH
78903: LD_INT 2
78905: PUSH
78906: EMPTY
78907: LIST
78908: LIST
78909: LIST
78910: PUSH
78911: EMPTY
78912: LIST
78913: LIST
78914: LIST
78915: LIST
78916: LIST
78917: ST_TO_ADDR
// end ; 5 :
78918: GO 79058
78920: LD_INT 5
78922: DOUBLE
78923: EQUAL
78924: IFTRUE 78928
78926: GO 79057
78928: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78929: LD_ADDR_VAR 0 5
78933: PUSH
78934: LD_VAR 0 1
78938: PUSH
78939: LD_INT 4
78941: MINUS
78942: PUSH
78943: LD_VAR 0 2
78947: PUSH
78948: LD_INT 1
78950: PUSH
78951: EMPTY
78952: LIST
78953: LIST
78954: LIST
78955: PUSH
78956: LD_VAR 0 1
78960: PUSH
78961: LD_VAR 0 2
78965: PUSH
78966: LD_INT 4
78968: MINUS
78969: PUSH
78970: LD_INT 3
78972: PUSH
78973: EMPTY
78974: LIST
78975: LIST
78976: LIST
78977: PUSH
78978: LD_VAR 0 1
78982: PUSH
78983: LD_INT 4
78985: PLUS
78986: PUSH
78987: LD_VAR 0 2
78991: PUSH
78992: LD_INT 4
78994: PLUS
78995: PUSH
78996: LD_INT 5
78998: PUSH
78999: EMPTY
79000: LIST
79001: LIST
79002: LIST
79003: PUSH
79004: LD_VAR 0 1
79008: PUSH
79009: LD_INT 3
79011: PLUS
79012: PUSH
79013: LD_VAR 0 2
79017: PUSH
79018: LD_INT 4
79020: PUSH
79021: EMPTY
79022: LIST
79023: LIST
79024: LIST
79025: PUSH
79026: LD_VAR 0 1
79030: PUSH
79031: LD_VAR 0 2
79035: PUSH
79036: LD_INT 3
79038: PLUS
79039: PUSH
79040: LD_INT 0
79042: PUSH
79043: EMPTY
79044: LIST
79045: LIST
79046: LIST
79047: PUSH
79048: EMPTY
79049: LIST
79050: LIST
79051: LIST
79052: LIST
79053: LIST
79054: ST_TO_ADDR
// end ; end ;
79055: GO 79058
79057: POP
// result := list ;
79058: LD_ADDR_VAR 0 4
79062: PUSH
79063: LD_VAR 0 5
79067: ST_TO_ADDR
// end ;
79068: LD_VAR 0 4
79072: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
79073: LD_INT 0
79075: PPUSH
79076: PPUSH
79077: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
79078: LD_VAR 0 1
79082: NOT
79083: PUSH
79084: LD_VAR 0 2
79088: PUSH
79089: LD_INT 1
79091: PUSH
79092: LD_INT 2
79094: PUSH
79095: LD_INT 3
79097: PUSH
79098: LD_INT 4
79100: PUSH
79101: EMPTY
79102: LIST
79103: LIST
79104: LIST
79105: LIST
79106: IN
79107: NOT
79108: OR
79109: IFFALSE 79113
// exit ;
79111: GO 79205
// tmp := [ ] ;
79113: LD_ADDR_VAR 0 5
79117: PUSH
79118: EMPTY
79119: ST_TO_ADDR
// for i in units do
79120: LD_ADDR_VAR 0 4
79124: PUSH
79125: LD_VAR 0 1
79129: PUSH
79130: FOR_IN
79131: IFFALSE 79174
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
79133: LD_ADDR_VAR 0 5
79137: PUSH
79138: LD_VAR 0 5
79142: PPUSH
79143: LD_VAR 0 5
79147: PUSH
79148: LD_INT 1
79150: PLUS
79151: PPUSH
79152: LD_VAR 0 4
79156: PPUSH
79157: LD_VAR 0 2
79161: PPUSH
79162: CALL_OW 259
79166: PPUSH
79167: CALL_OW 2
79171: ST_TO_ADDR
79172: GO 79130
79174: POP
79175: POP
// if not tmp then
79176: LD_VAR 0 5
79180: NOT
79181: IFFALSE 79185
// exit ;
79183: GO 79205
// result := SortListByListDesc ( units , tmp ) ;
79185: LD_ADDR_VAR 0 3
79189: PUSH
79190: LD_VAR 0 1
79194: PPUSH
79195: LD_VAR 0 5
79199: PPUSH
79200: CALL_OW 77
79204: ST_TO_ADDR
// end ;
79205: LD_VAR 0 3
79209: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79210: LD_INT 0
79212: PPUSH
79213: PPUSH
79214: PPUSH
// result := false ;
79215: LD_ADDR_VAR 0 3
79219: PUSH
79220: LD_INT 0
79222: ST_TO_ADDR
// x := GetX ( building ) ;
79223: LD_ADDR_VAR 0 4
79227: PUSH
79228: LD_VAR 0 2
79232: PPUSH
79233: CALL_OW 250
79237: ST_TO_ADDR
// y := GetY ( building ) ;
79238: LD_ADDR_VAR 0 5
79242: PUSH
79243: LD_VAR 0 2
79247: PPUSH
79248: CALL_OW 251
79252: ST_TO_ADDR
// if not building or not x or not y then
79253: LD_VAR 0 2
79257: NOT
79258: PUSH
79259: LD_VAR 0 4
79263: NOT
79264: OR
79265: PUSH
79266: LD_VAR 0 5
79270: NOT
79271: OR
79272: IFFALSE 79276
// exit ;
79274: GO 79368
// if GetTaskList ( unit ) then
79276: LD_VAR 0 1
79280: PPUSH
79281: CALL_OW 437
79285: IFFALSE 79368
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79287: LD_STRING e
79289: PUSH
79290: LD_VAR 0 1
79294: PPUSH
79295: CALL_OW 437
79299: PUSH
79300: LD_INT 1
79302: ARRAY
79303: PUSH
79304: LD_INT 1
79306: ARRAY
79307: EQUAL
79308: PUSH
79309: LD_VAR 0 4
79313: PUSH
79314: LD_VAR 0 1
79318: PPUSH
79319: CALL_OW 437
79323: PUSH
79324: LD_INT 1
79326: ARRAY
79327: PUSH
79328: LD_INT 2
79330: ARRAY
79331: EQUAL
79332: AND
79333: PUSH
79334: LD_VAR 0 5
79338: PUSH
79339: LD_VAR 0 1
79343: PPUSH
79344: CALL_OW 437
79348: PUSH
79349: LD_INT 1
79351: ARRAY
79352: PUSH
79353: LD_INT 3
79355: ARRAY
79356: EQUAL
79357: AND
79358: IFFALSE 79368
// result := true end ;
79360: LD_ADDR_VAR 0 3
79364: PUSH
79365: LD_INT 1
79367: ST_TO_ADDR
// end ;
79368: LD_VAR 0 3
79372: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
79373: LD_INT 0
79375: PPUSH
// result := false ;
79376: LD_ADDR_VAR 0 4
79380: PUSH
79381: LD_INT 0
79383: ST_TO_ADDR
// if GetTaskList ( unit ) then
79384: LD_VAR 0 1
79388: PPUSH
79389: CALL_OW 437
79393: IFFALSE 79476
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79395: LD_STRING M
79397: PUSH
79398: LD_VAR 0 1
79402: PPUSH
79403: CALL_OW 437
79407: PUSH
79408: LD_INT 1
79410: ARRAY
79411: PUSH
79412: LD_INT 1
79414: ARRAY
79415: EQUAL
79416: PUSH
79417: LD_VAR 0 2
79421: PUSH
79422: LD_VAR 0 1
79426: PPUSH
79427: CALL_OW 437
79431: PUSH
79432: LD_INT 1
79434: ARRAY
79435: PUSH
79436: LD_INT 2
79438: ARRAY
79439: EQUAL
79440: AND
79441: PUSH
79442: LD_VAR 0 3
79446: PUSH
79447: LD_VAR 0 1
79451: PPUSH
79452: CALL_OW 437
79456: PUSH
79457: LD_INT 1
79459: ARRAY
79460: PUSH
79461: LD_INT 3
79463: ARRAY
79464: EQUAL
79465: AND
79466: IFFALSE 79476
// result := true ;
79468: LD_ADDR_VAR 0 4
79472: PUSH
79473: LD_INT 1
79475: ST_TO_ADDR
// end ; end ;
79476: LD_VAR 0 4
79480: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79481: LD_INT 0
79483: PPUSH
79484: PPUSH
79485: PPUSH
79486: PPUSH
// if not unit or not area then
79487: LD_VAR 0 1
79491: NOT
79492: PUSH
79493: LD_VAR 0 2
79497: NOT
79498: OR
79499: IFFALSE 79503
// exit ;
79501: GO 79667
// tmp := AreaToList ( area , i ) ;
79503: LD_ADDR_VAR 0 6
79507: PUSH
79508: LD_VAR 0 2
79512: PPUSH
79513: LD_VAR 0 5
79517: PPUSH
79518: CALL_OW 517
79522: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
79523: LD_ADDR_VAR 0 5
79527: PUSH
79528: DOUBLE
79529: LD_INT 1
79531: DEC
79532: ST_TO_ADDR
79533: LD_VAR 0 6
79537: PUSH
79538: LD_INT 1
79540: ARRAY
79541: PUSH
79542: FOR_TO
79543: IFFALSE 79665
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
79545: LD_ADDR_VAR 0 7
79549: PUSH
79550: LD_VAR 0 6
79554: PUSH
79555: LD_INT 1
79557: ARRAY
79558: PUSH
79559: LD_VAR 0 5
79563: ARRAY
79564: PUSH
79565: LD_VAR 0 6
79569: PUSH
79570: LD_INT 2
79572: ARRAY
79573: PUSH
79574: LD_VAR 0 5
79578: ARRAY
79579: PUSH
79580: EMPTY
79581: LIST
79582: LIST
79583: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
79584: LD_VAR 0 7
79588: PUSH
79589: LD_INT 1
79591: ARRAY
79592: PPUSH
79593: LD_VAR 0 7
79597: PUSH
79598: LD_INT 2
79600: ARRAY
79601: PPUSH
79602: CALL_OW 428
79606: PUSH
79607: LD_INT 0
79609: EQUAL
79610: IFFALSE 79663
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79612: LD_VAR 0 1
79616: PPUSH
79617: LD_VAR 0 7
79621: PUSH
79622: LD_INT 1
79624: ARRAY
79625: PPUSH
79626: LD_VAR 0 7
79630: PUSH
79631: LD_INT 2
79633: ARRAY
79634: PPUSH
79635: LD_VAR 0 3
79639: PPUSH
79640: CALL_OW 48
// result := IsPlaced ( unit ) ;
79644: LD_ADDR_VAR 0 4
79648: PUSH
79649: LD_VAR 0 1
79653: PPUSH
79654: CALL_OW 305
79658: ST_TO_ADDR
// exit ;
79659: POP
79660: POP
79661: GO 79667
// end ; end ;
79663: GO 79542
79665: POP
79666: POP
// end ;
79667: LD_VAR 0 4
79671: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79672: LD_INT 0
79674: PPUSH
79675: PPUSH
79676: PPUSH
// if not side or side > 8 then
79677: LD_VAR 0 1
79681: NOT
79682: PUSH
79683: LD_VAR 0 1
79687: PUSH
79688: LD_INT 8
79690: GREATER
79691: OR
79692: IFFALSE 79696
// exit ;
79694: GO 79883
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79696: LD_ADDR_VAR 0 4
79700: PUSH
79701: LD_INT 22
79703: PUSH
79704: LD_VAR 0 1
79708: PUSH
79709: EMPTY
79710: LIST
79711: LIST
79712: PUSH
79713: LD_INT 21
79715: PUSH
79716: LD_INT 3
79718: PUSH
79719: EMPTY
79720: LIST
79721: LIST
79722: PUSH
79723: EMPTY
79724: LIST
79725: LIST
79726: PPUSH
79727: CALL_OW 69
79731: ST_TO_ADDR
// if not tmp then
79732: LD_VAR 0 4
79736: NOT
79737: IFFALSE 79741
// exit ;
79739: GO 79883
// enable_addtolog := true ;
79741: LD_ADDR_OWVAR 81
79745: PUSH
79746: LD_INT 1
79748: ST_TO_ADDR
// AddToLog ( [ ) ;
79749: LD_STRING [
79751: PPUSH
79752: CALL_OW 561
// for i in tmp do
79756: LD_ADDR_VAR 0 3
79760: PUSH
79761: LD_VAR 0 4
79765: PUSH
79766: FOR_IN
79767: IFFALSE 79874
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79769: LD_STRING [
79771: PUSH
79772: LD_VAR 0 3
79776: PPUSH
79777: CALL_OW 266
79781: STR
79782: PUSH
79783: LD_STRING , 
79785: STR
79786: PUSH
79787: LD_VAR 0 3
79791: PPUSH
79792: CALL_OW 250
79796: STR
79797: PUSH
79798: LD_STRING , 
79800: STR
79801: PUSH
79802: LD_VAR 0 3
79806: PPUSH
79807: CALL_OW 251
79811: STR
79812: PUSH
79813: LD_STRING , 
79815: STR
79816: PUSH
79817: LD_VAR 0 3
79821: PPUSH
79822: CALL_OW 254
79826: STR
79827: PUSH
79828: LD_STRING , 
79830: STR
79831: PUSH
79832: LD_VAR 0 3
79836: PPUSH
79837: LD_INT 1
79839: PPUSH
79840: CALL_OW 268
79844: STR
79845: PUSH
79846: LD_STRING , 
79848: STR
79849: PUSH
79850: LD_VAR 0 3
79854: PPUSH
79855: LD_INT 2
79857: PPUSH
79858: CALL_OW 268
79862: STR
79863: PUSH
79864: LD_STRING ],
79866: STR
79867: PPUSH
79868: CALL_OW 561
// end ;
79872: GO 79766
79874: POP
79875: POP
// AddToLog ( ]; ) ;
79876: LD_STRING ];
79878: PPUSH
79879: CALL_OW 561
// end ;
79883: LD_VAR 0 2
79887: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79888: LD_INT 0
79890: PPUSH
79891: PPUSH
79892: PPUSH
79893: PPUSH
79894: PPUSH
// if not area or not rate or not max then
79895: LD_VAR 0 1
79899: NOT
79900: PUSH
79901: LD_VAR 0 2
79905: NOT
79906: OR
79907: PUSH
79908: LD_VAR 0 4
79912: NOT
79913: OR
79914: IFFALSE 79918
// exit ;
79916: GO 80110
// while 1 do
79918: LD_INT 1
79920: IFFALSE 80110
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79922: LD_ADDR_VAR 0 9
79926: PUSH
79927: LD_VAR 0 1
79931: PPUSH
79932: LD_INT 1
79934: PPUSH
79935: CALL_OW 287
79939: PUSH
79940: LD_INT 10
79942: MUL
79943: ST_TO_ADDR
// r := rate / 10 ;
79944: LD_ADDR_VAR 0 7
79948: PUSH
79949: LD_VAR 0 2
79953: PUSH
79954: LD_INT 10
79956: DIVREAL
79957: ST_TO_ADDR
// time := 1 1$00 ;
79958: LD_ADDR_VAR 0 8
79962: PUSH
79963: LD_INT 2100
79965: ST_TO_ADDR
// if amount < min then
79966: LD_VAR 0 9
79970: PUSH
79971: LD_VAR 0 3
79975: LESS
79976: IFFALSE 79994
// r := r * 2 else
79978: LD_ADDR_VAR 0 7
79982: PUSH
79983: LD_VAR 0 7
79987: PUSH
79988: LD_INT 2
79990: MUL
79991: ST_TO_ADDR
79992: GO 80020
// if amount > max then
79994: LD_VAR 0 9
79998: PUSH
79999: LD_VAR 0 4
80003: GREATER
80004: IFFALSE 80020
// r := r / 2 ;
80006: LD_ADDR_VAR 0 7
80010: PUSH
80011: LD_VAR 0 7
80015: PUSH
80016: LD_INT 2
80018: DIVREAL
80019: ST_TO_ADDR
// time := time / r ;
80020: LD_ADDR_VAR 0 8
80024: PUSH
80025: LD_VAR 0 8
80029: PUSH
80030: LD_VAR 0 7
80034: DIVREAL
80035: ST_TO_ADDR
// if time < 0 then
80036: LD_VAR 0 8
80040: PUSH
80041: LD_INT 0
80043: LESS
80044: IFFALSE 80061
// time := time * - 1 ;
80046: LD_ADDR_VAR 0 8
80050: PUSH
80051: LD_VAR 0 8
80055: PUSH
80056: LD_INT 1
80058: NEG
80059: MUL
80060: ST_TO_ADDR
// wait ( time ) ;
80061: LD_VAR 0 8
80065: PPUSH
80066: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
80070: LD_INT 35
80072: PPUSH
80073: LD_INT 875
80075: PPUSH
80076: CALL_OW 12
80080: PPUSH
80081: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
80085: LD_INT 1
80087: PPUSH
80088: LD_INT 5
80090: PPUSH
80091: CALL_OW 12
80095: PPUSH
80096: LD_VAR 0 1
80100: PPUSH
80101: LD_INT 1
80103: PPUSH
80104: CALL_OW 55
// end ;
80108: GO 79918
// end ;
80110: LD_VAR 0 5
80114: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
80115: LD_INT 0
80117: PPUSH
80118: PPUSH
80119: PPUSH
80120: PPUSH
80121: PPUSH
80122: PPUSH
80123: PPUSH
80124: PPUSH
// if not turrets or not factories then
80125: LD_VAR 0 1
80129: NOT
80130: PUSH
80131: LD_VAR 0 2
80135: NOT
80136: OR
80137: IFFALSE 80141
// exit ;
80139: GO 80448
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
80141: LD_ADDR_VAR 0 10
80145: PUSH
80146: LD_INT 5
80148: PUSH
80149: LD_INT 6
80151: PUSH
80152: EMPTY
80153: LIST
80154: LIST
80155: PUSH
80156: LD_INT 2
80158: PUSH
80159: LD_INT 4
80161: PUSH
80162: EMPTY
80163: LIST
80164: LIST
80165: PUSH
80166: LD_INT 3
80168: PUSH
80169: LD_INT 5
80171: PUSH
80172: EMPTY
80173: LIST
80174: LIST
80175: PUSH
80176: EMPTY
80177: LIST
80178: LIST
80179: LIST
80180: PUSH
80181: LD_INT 24
80183: PUSH
80184: LD_INT 25
80186: PUSH
80187: EMPTY
80188: LIST
80189: LIST
80190: PUSH
80191: LD_INT 23
80193: PUSH
80194: LD_INT 27
80196: PUSH
80197: EMPTY
80198: LIST
80199: LIST
80200: PUSH
80201: EMPTY
80202: LIST
80203: LIST
80204: PUSH
80205: LD_INT 42
80207: PUSH
80208: LD_INT 43
80210: PUSH
80211: EMPTY
80212: LIST
80213: LIST
80214: PUSH
80215: LD_INT 44
80217: PUSH
80218: LD_INT 46
80220: PUSH
80221: EMPTY
80222: LIST
80223: LIST
80224: PUSH
80225: LD_INT 45
80227: PUSH
80228: LD_INT 47
80230: PUSH
80231: EMPTY
80232: LIST
80233: LIST
80234: PUSH
80235: EMPTY
80236: LIST
80237: LIST
80238: LIST
80239: PUSH
80240: EMPTY
80241: LIST
80242: LIST
80243: LIST
80244: ST_TO_ADDR
// result := [ ] ;
80245: LD_ADDR_VAR 0 3
80249: PUSH
80250: EMPTY
80251: ST_TO_ADDR
// for i in turrets do
80252: LD_ADDR_VAR 0 4
80256: PUSH
80257: LD_VAR 0 1
80261: PUSH
80262: FOR_IN
80263: IFFALSE 80446
// begin nat := GetNation ( i ) ;
80265: LD_ADDR_VAR 0 7
80269: PUSH
80270: LD_VAR 0 4
80274: PPUSH
80275: CALL_OW 248
80279: ST_TO_ADDR
// weapon := 0 ;
80280: LD_ADDR_VAR 0 8
80284: PUSH
80285: LD_INT 0
80287: ST_TO_ADDR
// if not nat then
80288: LD_VAR 0 7
80292: NOT
80293: IFFALSE 80297
// continue ;
80295: GO 80262
// for j in list [ nat ] do
80297: LD_ADDR_VAR 0 5
80301: PUSH
80302: LD_VAR 0 10
80306: PUSH
80307: LD_VAR 0 7
80311: ARRAY
80312: PUSH
80313: FOR_IN
80314: IFFALSE 80355
// if GetBWeapon ( i ) = j [ 1 ] then
80316: LD_VAR 0 4
80320: PPUSH
80321: CALL_OW 269
80325: PUSH
80326: LD_VAR 0 5
80330: PUSH
80331: LD_INT 1
80333: ARRAY
80334: EQUAL
80335: IFFALSE 80353
// begin weapon := j [ 2 ] ;
80337: LD_ADDR_VAR 0 8
80341: PUSH
80342: LD_VAR 0 5
80346: PUSH
80347: LD_INT 2
80349: ARRAY
80350: ST_TO_ADDR
// break ;
80351: GO 80355
// end ;
80353: GO 80313
80355: POP
80356: POP
// if not weapon then
80357: LD_VAR 0 8
80361: NOT
80362: IFFALSE 80366
// continue ;
80364: GO 80262
// for k in factories do
80366: LD_ADDR_VAR 0 6
80370: PUSH
80371: LD_VAR 0 2
80375: PUSH
80376: FOR_IN
80377: IFFALSE 80442
// begin weapons := AvailableWeaponList ( k ) ;
80379: LD_ADDR_VAR 0 9
80383: PUSH
80384: LD_VAR 0 6
80388: PPUSH
80389: CALL_OW 478
80393: ST_TO_ADDR
// if not weapons then
80394: LD_VAR 0 9
80398: NOT
80399: IFFALSE 80403
// continue ;
80401: GO 80376
// if weapon in weapons then
80403: LD_VAR 0 8
80407: PUSH
80408: LD_VAR 0 9
80412: IN
80413: IFFALSE 80440
// begin result := [ i , weapon ] ;
80415: LD_ADDR_VAR 0 3
80419: PUSH
80420: LD_VAR 0 4
80424: PUSH
80425: LD_VAR 0 8
80429: PUSH
80430: EMPTY
80431: LIST
80432: LIST
80433: ST_TO_ADDR
// exit ;
80434: POP
80435: POP
80436: POP
80437: POP
80438: GO 80448
// end ; end ;
80440: GO 80376
80442: POP
80443: POP
// end ;
80444: GO 80262
80446: POP
80447: POP
// end ;
80448: LD_VAR 0 3
80452: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80453: LD_INT 0
80455: PPUSH
// if not side or side > 8 then
80456: LD_VAR 0 3
80460: NOT
80461: PUSH
80462: LD_VAR 0 3
80466: PUSH
80467: LD_INT 8
80469: GREATER
80470: OR
80471: IFFALSE 80475
// exit ;
80473: GO 80534
// if not range then
80475: LD_VAR 0 4
80479: NOT
80480: IFFALSE 80491
// range := - 12 ;
80482: LD_ADDR_VAR 0 4
80486: PUSH
80487: LD_INT 12
80489: NEG
80490: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80491: LD_VAR 0 1
80495: PPUSH
80496: LD_VAR 0 2
80500: PPUSH
80501: LD_VAR 0 3
80505: PPUSH
80506: LD_VAR 0 4
80510: PPUSH
80511: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
80515: LD_VAR 0 1
80519: PPUSH
80520: LD_VAR 0 2
80524: PPUSH
80525: LD_VAR 0 3
80529: PPUSH
80530: CALL_OW 331
// end ;
80534: LD_VAR 0 5
80538: RET
// export function Video ( mode ) ; begin
80539: LD_INT 0
80541: PPUSH
// ingame_video = mode ;
80542: LD_ADDR_OWVAR 52
80546: PUSH
80547: LD_VAR 0 1
80551: ST_TO_ADDR
// interface_hidden = mode ;
80552: LD_ADDR_OWVAR 54
80556: PUSH
80557: LD_VAR 0 1
80561: ST_TO_ADDR
// end ;
80562: LD_VAR 0 2
80566: RET
// export function Join ( array , element ) ; begin
80567: LD_INT 0
80569: PPUSH
// result := Replace ( array , array + 1 , element ) ;
80570: LD_ADDR_VAR 0 3
80574: PUSH
80575: LD_VAR 0 1
80579: PPUSH
80580: LD_VAR 0 1
80584: PUSH
80585: LD_INT 1
80587: PLUS
80588: PPUSH
80589: LD_VAR 0 2
80593: PPUSH
80594: CALL_OW 1
80598: ST_TO_ADDR
// end ;
80599: LD_VAR 0 3
80603: RET
// export function JoinUnion ( array , element ) ; begin
80604: LD_INT 0
80606: PPUSH
// result := array union element ;
80607: LD_ADDR_VAR 0 3
80611: PUSH
80612: LD_VAR 0 1
80616: PUSH
80617: LD_VAR 0 2
80621: UNION
80622: ST_TO_ADDR
// end ;
80623: LD_VAR 0 3
80627: RET
// export function GetBehemoths ( side ) ; begin
80628: LD_INT 0
80630: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
80631: LD_ADDR_VAR 0 2
80635: PUSH
80636: LD_INT 22
80638: PUSH
80639: LD_VAR 0 1
80643: PUSH
80644: EMPTY
80645: LIST
80646: LIST
80647: PUSH
80648: LD_INT 31
80650: PUSH
80651: LD_INT 25
80653: PUSH
80654: EMPTY
80655: LIST
80656: LIST
80657: PUSH
80658: EMPTY
80659: LIST
80660: LIST
80661: PPUSH
80662: CALL_OW 69
80666: ST_TO_ADDR
// end ;
80667: LD_VAR 0 2
80671: RET
// export function Shuffle ( array ) ; var i , index ; begin
80672: LD_INT 0
80674: PPUSH
80675: PPUSH
80676: PPUSH
// result := [ ] ;
80677: LD_ADDR_VAR 0 2
80681: PUSH
80682: EMPTY
80683: ST_TO_ADDR
// if not array then
80684: LD_VAR 0 1
80688: NOT
80689: IFFALSE 80693
// exit ;
80691: GO 80792
// Randomize ;
80693: CALL_OW 10
// for i = array downto 1 do
80697: LD_ADDR_VAR 0 3
80701: PUSH
80702: DOUBLE
80703: LD_VAR 0 1
80707: INC
80708: ST_TO_ADDR
80709: LD_INT 1
80711: PUSH
80712: FOR_DOWNTO
80713: IFFALSE 80790
// begin index := rand ( 1 , array ) ;
80715: LD_ADDR_VAR 0 4
80719: PUSH
80720: LD_INT 1
80722: PPUSH
80723: LD_VAR 0 1
80727: PPUSH
80728: CALL_OW 12
80732: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80733: LD_ADDR_VAR 0 2
80737: PUSH
80738: LD_VAR 0 2
80742: PPUSH
80743: LD_VAR 0 2
80747: PUSH
80748: LD_INT 1
80750: PLUS
80751: PPUSH
80752: LD_VAR 0 1
80756: PUSH
80757: LD_VAR 0 4
80761: ARRAY
80762: PPUSH
80763: CALL_OW 2
80767: ST_TO_ADDR
// array := Delete ( array , index ) ;
80768: LD_ADDR_VAR 0 1
80772: PUSH
80773: LD_VAR 0 1
80777: PPUSH
80778: LD_VAR 0 4
80782: PPUSH
80783: CALL_OW 3
80787: ST_TO_ADDR
// end ;
80788: GO 80712
80790: POP
80791: POP
// end ;
80792: LD_VAR 0 2
80796: RET
// export function GetBaseMaterials ( base ) ; begin
80797: LD_INT 0
80799: PPUSH
// result := [ 0 , 0 , 0 ] ;
80800: LD_ADDR_VAR 0 2
80804: PUSH
80805: LD_INT 0
80807: PUSH
80808: LD_INT 0
80810: PUSH
80811: LD_INT 0
80813: PUSH
80814: EMPTY
80815: LIST
80816: LIST
80817: LIST
80818: ST_TO_ADDR
// if not base then
80819: LD_VAR 0 1
80823: NOT
80824: IFFALSE 80828
// exit ;
80826: GO 80877
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80828: LD_ADDR_VAR 0 2
80832: PUSH
80833: LD_VAR 0 1
80837: PPUSH
80838: LD_INT 1
80840: PPUSH
80841: CALL_OW 275
80845: PUSH
80846: LD_VAR 0 1
80850: PPUSH
80851: LD_INT 2
80853: PPUSH
80854: CALL_OW 275
80858: PUSH
80859: LD_VAR 0 1
80863: PPUSH
80864: LD_INT 3
80866: PPUSH
80867: CALL_OW 275
80871: PUSH
80872: EMPTY
80873: LIST
80874: LIST
80875: LIST
80876: ST_TO_ADDR
// end ;
80877: LD_VAR 0 2
80881: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80882: LD_INT 0
80884: PPUSH
80885: PPUSH
// result := array ;
80886: LD_ADDR_VAR 0 3
80890: PUSH
80891: LD_VAR 0 1
80895: ST_TO_ADDR
// if size > 0 then
80896: LD_VAR 0 2
80900: PUSH
80901: LD_INT 0
80903: GREATER
80904: IFFALSE 80950
// for i := array downto size do
80906: LD_ADDR_VAR 0 4
80910: PUSH
80911: DOUBLE
80912: LD_VAR 0 1
80916: INC
80917: ST_TO_ADDR
80918: LD_VAR 0 2
80922: PUSH
80923: FOR_DOWNTO
80924: IFFALSE 80948
// result := Delete ( result , result ) ;
80926: LD_ADDR_VAR 0 3
80930: PUSH
80931: LD_VAR 0 3
80935: PPUSH
80936: LD_VAR 0 3
80940: PPUSH
80941: CALL_OW 3
80945: ST_TO_ADDR
80946: GO 80923
80948: POP
80949: POP
// end ;
80950: LD_VAR 0 3
80954: RET
// export function ComExit ( unit ) ; var tmp ; begin
80955: LD_INT 0
80957: PPUSH
80958: PPUSH
// if not IsInUnit ( unit ) then
80959: LD_VAR 0 1
80963: PPUSH
80964: CALL_OW 310
80968: NOT
80969: IFFALSE 80973
// exit ;
80971: GO 81033
// tmp := IsInUnit ( unit ) ;
80973: LD_ADDR_VAR 0 3
80977: PUSH
80978: LD_VAR 0 1
80982: PPUSH
80983: CALL_OW 310
80987: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80988: LD_VAR 0 3
80992: PPUSH
80993: CALL_OW 247
80997: PUSH
80998: LD_INT 2
81000: EQUAL
81001: IFFALSE 81014
// ComExitVehicle ( unit ) else
81003: LD_VAR 0 1
81007: PPUSH
81008: CALL_OW 121
81012: GO 81023
// ComExitBuilding ( unit ) ;
81014: LD_VAR 0 1
81018: PPUSH
81019: CALL_OW 122
// result := tmp ;
81023: LD_ADDR_VAR 0 2
81027: PUSH
81028: LD_VAR 0 3
81032: ST_TO_ADDR
// end ;
81033: LD_VAR 0 2
81037: RET
// export function ComExitAll ( units ) ; var i ; begin
81038: LD_INT 0
81040: PPUSH
81041: PPUSH
// if not units then
81042: LD_VAR 0 1
81046: NOT
81047: IFFALSE 81051
// exit ;
81049: GO 81077
// for i in units do
81051: LD_ADDR_VAR 0 3
81055: PUSH
81056: LD_VAR 0 1
81060: PUSH
81061: FOR_IN
81062: IFFALSE 81075
// ComExit ( i ) ;
81064: LD_VAR 0 3
81068: PPUSH
81069: CALL 80955 0 1
81073: GO 81061
81075: POP
81076: POP
// end ;
81077: LD_VAR 0 2
81081: RET
// export function ResetHc ; begin
81082: LD_INT 0
81084: PPUSH
// InitHc ;
81085: CALL_OW 19
// hc_importance := 0 ;
81089: LD_ADDR_OWVAR 32
81093: PUSH
81094: LD_INT 0
81096: ST_TO_ADDR
// end ;
81097: LD_VAR 0 1
81101: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
81102: LD_INT 0
81104: PPUSH
81105: PPUSH
81106: PPUSH
// _x := ( x1 + x2 ) div 2 ;
81107: LD_ADDR_VAR 0 6
81111: PUSH
81112: LD_VAR 0 1
81116: PUSH
81117: LD_VAR 0 3
81121: PLUS
81122: PUSH
81123: LD_INT 2
81125: DIV
81126: ST_TO_ADDR
// if _x < 0 then
81127: LD_VAR 0 6
81131: PUSH
81132: LD_INT 0
81134: LESS
81135: IFFALSE 81152
// _x := _x * - 1 ;
81137: LD_ADDR_VAR 0 6
81141: PUSH
81142: LD_VAR 0 6
81146: PUSH
81147: LD_INT 1
81149: NEG
81150: MUL
81151: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
81152: LD_ADDR_VAR 0 7
81156: PUSH
81157: LD_VAR 0 2
81161: PUSH
81162: LD_VAR 0 4
81166: PLUS
81167: PUSH
81168: LD_INT 2
81170: DIV
81171: ST_TO_ADDR
// if _y < 0 then
81172: LD_VAR 0 7
81176: PUSH
81177: LD_INT 0
81179: LESS
81180: IFFALSE 81197
// _y := _y * - 1 ;
81182: LD_ADDR_VAR 0 7
81186: PUSH
81187: LD_VAR 0 7
81191: PUSH
81192: LD_INT 1
81194: NEG
81195: MUL
81196: ST_TO_ADDR
// result := [ _x , _y ] ;
81197: LD_ADDR_VAR 0 5
81201: PUSH
81202: LD_VAR 0 6
81206: PUSH
81207: LD_VAR 0 7
81211: PUSH
81212: EMPTY
81213: LIST
81214: LIST
81215: ST_TO_ADDR
// end ;
81216: LD_VAR 0 5
81220: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81221: LD_INT 0
81223: PPUSH
81224: PPUSH
81225: PPUSH
81226: PPUSH
// task := GetTaskList ( unit ) ;
81227: LD_ADDR_VAR 0 7
81231: PUSH
81232: LD_VAR 0 1
81236: PPUSH
81237: CALL_OW 437
81241: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81242: LD_VAR 0 7
81246: NOT
81247: PUSH
81248: LD_VAR 0 1
81252: PPUSH
81253: LD_VAR 0 2
81257: PPUSH
81258: CALL_OW 308
81262: NOT
81263: AND
81264: IFFALSE 81268
// exit ;
81266: GO 81386
// if IsInArea ( unit , area ) then
81268: LD_VAR 0 1
81272: PPUSH
81273: LD_VAR 0 2
81277: PPUSH
81278: CALL_OW 308
81282: IFFALSE 81300
// begin ComMoveToArea ( unit , goAway ) ;
81284: LD_VAR 0 1
81288: PPUSH
81289: LD_VAR 0 3
81293: PPUSH
81294: CALL_OW 113
// exit ;
81298: GO 81386
// end ; if task [ 1 ] [ 1 ] <> M then
81300: LD_VAR 0 7
81304: PUSH
81305: LD_INT 1
81307: ARRAY
81308: PUSH
81309: LD_INT 1
81311: ARRAY
81312: PUSH
81313: LD_STRING M
81315: NONEQUAL
81316: IFFALSE 81320
// exit ;
81318: GO 81386
// x := task [ 1 ] [ 2 ] ;
81320: LD_ADDR_VAR 0 5
81324: PUSH
81325: LD_VAR 0 7
81329: PUSH
81330: LD_INT 1
81332: ARRAY
81333: PUSH
81334: LD_INT 2
81336: ARRAY
81337: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81338: LD_ADDR_VAR 0 6
81342: PUSH
81343: LD_VAR 0 7
81347: PUSH
81348: LD_INT 1
81350: ARRAY
81351: PUSH
81352: LD_INT 3
81354: ARRAY
81355: ST_TO_ADDR
// if InArea ( x , y , area ) then
81356: LD_VAR 0 5
81360: PPUSH
81361: LD_VAR 0 6
81365: PPUSH
81366: LD_VAR 0 2
81370: PPUSH
81371: CALL_OW 309
81375: IFFALSE 81386
// ComStop ( unit ) ;
81377: LD_VAR 0 1
81381: PPUSH
81382: CALL_OW 141
// end ;
81386: LD_VAR 0 4
81390: RET
// export function Abs ( value ) ; begin
81391: LD_INT 0
81393: PPUSH
// result := value ;
81394: LD_ADDR_VAR 0 2
81398: PUSH
81399: LD_VAR 0 1
81403: ST_TO_ADDR
// if value < 0 then
81404: LD_VAR 0 1
81408: PUSH
81409: LD_INT 0
81411: LESS
81412: IFFALSE 81429
// result := value * - 1 ;
81414: LD_ADDR_VAR 0 2
81418: PUSH
81419: LD_VAR 0 1
81423: PUSH
81424: LD_INT 1
81426: NEG
81427: MUL
81428: ST_TO_ADDR
// end ;
81429: LD_VAR 0 2
81433: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
81434: LD_INT 0
81436: PPUSH
81437: PPUSH
81438: PPUSH
81439: PPUSH
81440: PPUSH
81441: PPUSH
81442: PPUSH
81443: PPUSH
// if not unit or not building then
81444: LD_VAR 0 1
81448: NOT
81449: PUSH
81450: LD_VAR 0 2
81454: NOT
81455: OR
81456: IFFALSE 81460
// exit ;
81458: GO 81686
// x := GetX ( building ) ;
81460: LD_ADDR_VAR 0 4
81464: PUSH
81465: LD_VAR 0 2
81469: PPUSH
81470: CALL_OW 250
81474: ST_TO_ADDR
// y := GetY ( building ) ;
81475: LD_ADDR_VAR 0 6
81479: PUSH
81480: LD_VAR 0 2
81484: PPUSH
81485: CALL_OW 251
81489: ST_TO_ADDR
// d := GetDir ( building ) ;
81490: LD_ADDR_VAR 0 8
81494: PUSH
81495: LD_VAR 0 2
81499: PPUSH
81500: CALL_OW 254
81504: ST_TO_ADDR
// r := 4 ;
81505: LD_ADDR_VAR 0 9
81509: PUSH
81510: LD_INT 4
81512: ST_TO_ADDR
// for i := 1 to 5 do
81513: LD_ADDR_VAR 0 10
81517: PUSH
81518: DOUBLE
81519: LD_INT 1
81521: DEC
81522: ST_TO_ADDR
81523: LD_INT 5
81525: PUSH
81526: FOR_TO
81527: IFFALSE 81684
// begin _x := ShiftX ( x , d , r + i ) ;
81529: LD_ADDR_VAR 0 5
81533: PUSH
81534: LD_VAR 0 4
81538: PPUSH
81539: LD_VAR 0 8
81543: PPUSH
81544: LD_VAR 0 9
81548: PUSH
81549: LD_VAR 0 10
81553: PLUS
81554: PPUSH
81555: CALL_OW 272
81559: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
81560: LD_ADDR_VAR 0 7
81564: PUSH
81565: LD_VAR 0 6
81569: PPUSH
81570: LD_VAR 0 8
81574: PPUSH
81575: LD_VAR 0 9
81579: PUSH
81580: LD_VAR 0 10
81584: PLUS
81585: PPUSH
81586: CALL_OW 273
81590: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
81591: LD_VAR 0 5
81595: PPUSH
81596: LD_VAR 0 7
81600: PPUSH
81601: CALL_OW 488
81605: PUSH
81606: LD_VAR 0 5
81610: PPUSH
81611: LD_VAR 0 7
81615: PPUSH
81616: CALL_OW 428
81620: PPUSH
81621: CALL_OW 247
81625: PUSH
81626: LD_INT 3
81628: PUSH
81629: LD_INT 2
81631: PUSH
81632: EMPTY
81633: LIST
81634: LIST
81635: IN
81636: NOT
81637: AND
81638: IFFALSE 81682
// begin ComMoveXY ( unit , _x , _y ) ;
81640: LD_VAR 0 1
81644: PPUSH
81645: LD_VAR 0 5
81649: PPUSH
81650: LD_VAR 0 7
81654: PPUSH
81655: CALL_OW 111
// result := [ _x , _y ] ;
81659: LD_ADDR_VAR 0 3
81663: PUSH
81664: LD_VAR 0 5
81668: PUSH
81669: LD_VAR 0 7
81673: PUSH
81674: EMPTY
81675: LIST
81676: LIST
81677: ST_TO_ADDR
// exit ;
81678: POP
81679: POP
81680: GO 81686
// end ; end ;
81682: GO 81526
81684: POP
81685: POP
// end ;
81686: LD_VAR 0 3
81690: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
81691: LD_INT 0
81693: PPUSH
81694: PPUSH
81695: PPUSH
// result := 0 ;
81696: LD_ADDR_VAR 0 3
81700: PUSH
81701: LD_INT 0
81703: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
81704: LD_VAR 0 1
81708: PUSH
81709: LD_INT 0
81711: LESS
81712: PUSH
81713: LD_VAR 0 1
81717: PUSH
81718: LD_INT 8
81720: GREATER
81721: OR
81722: PUSH
81723: LD_VAR 0 2
81727: PUSH
81728: LD_INT 0
81730: LESS
81731: OR
81732: PUSH
81733: LD_VAR 0 2
81737: PUSH
81738: LD_INT 8
81740: GREATER
81741: OR
81742: IFFALSE 81746
// exit ;
81744: GO 81821
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
81746: LD_ADDR_VAR 0 4
81750: PUSH
81751: LD_INT 22
81753: PUSH
81754: LD_VAR 0 2
81758: PUSH
81759: EMPTY
81760: LIST
81761: LIST
81762: PPUSH
81763: CALL_OW 69
81767: PUSH
81768: FOR_IN
81769: IFFALSE 81819
// begin un := UnitShoot ( i ) ;
81771: LD_ADDR_VAR 0 5
81775: PUSH
81776: LD_VAR 0 4
81780: PPUSH
81781: CALL_OW 504
81785: ST_TO_ADDR
// if GetSide ( un ) = side1 then
81786: LD_VAR 0 5
81790: PPUSH
81791: CALL_OW 255
81795: PUSH
81796: LD_VAR 0 1
81800: EQUAL
81801: IFFALSE 81817
// begin result := un ;
81803: LD_ADDR_VAR 0 3
81807: PUSH
81808: LD_VAR 0 5
81812: ST_TO_ADDR
// exit ;
81813: POP
81814: POP
81815: GO 81821
// end ; end ;
81817: GO 81768
81819: POP
81820: POP
// end ;
81821: LD_VAR 0 3
81825: RET
// export function GetCargoBay ( units ) ; begin
81826: LD_INT 0
81828: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
81829: LD_ADDR_VAR 0 2
81833: PUSH
81834: LD_VAR 0 1
81838: PPUSH
81839: LD_INT 2
81841: PUSH
81842: LD_INT 34
81844: PUSH
81845: LD_INT 12
81847: PUSH
81848: EMPTY
81849: LIST
81850: LIST
81851: PUSH
81852: LD_INT 34
81854: PUSH
81855: LD_INT 51
81857: PUSH
81858: EMPTY
81859: LIST
81860: LIST
81861: PUSH
81862: LD_INT 34
81864: PUSH
81865: LD_INT 32
81867: PUSH
81868: EMPTY
81869: LIST
81870: LIST
81871: PUSH
81872: LD_INT 34
81874: PUSH
81875: LD_EXP 49
81879: PUSH
81880: EMPTY
81881: LIST
81882: LIST
81883: PUSH
81884: EMPTY
81885: LIST
81886: LIST
81887: LIST
81888: LIST
81889: LIST
81890: PPUSH
81891: CALL_OW 72
81895: ST_TO_ADDR
// end ; end_of_file
81896: LD_VAR 0 2
81900: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81901: LD_VAR 0 1
81905: PUSH
81906: LD_INT 200
81908: DOUBLE
81909: GREATEREQUAL
81910: IFFALSE 81918
81912: LD_INT 299
81914: DOUBLE
81915: LESSEQUAL
81916: IFTRUE 81920
81918: GO 81952
81920: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81921: LD_VAR 0 1
81925: PPUSH
81926: LD_VAR 0 2
81930: PPUSH
81931: LD_VAR 0 3
81935: PPUSH
81936: LD_VAR 0 4
81940: PPUSH
81941: LD_VAR 0 5
81945: PPUSH
81946: CALL 40362 0 5
81950: GO 82029
81952: LD_INT 300
81954: DOUBLE
81955: GREATEREQUAL
81956: IFFALSE 81964
81958: LD_INT 399
81960: DOUBLE
81961: LESSEQUAL
81962: IFTRUE 81966
81964: GO 82028
81966: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81967: LD_VAR 0 1
81971: PPUSH
81972: LD_VAR 0 2
81976: PPUSH
81977: LD_VAR 0 3
81981: PPUSH
81982: LD_VAR 0 4
81986: PPUSH
81987: LD_VAR 0 5
81991: PPUSH
81992: LD_VAR 0 6
81996: PPUSH
81997: LD_VAR 0 7
82001: PPUSH
82002: LD_VAR 0 8
82006: PPUSH
82007: LD_VAR 0 9
82011: PPUSH
82012: LD_VAR 0 10
82016: PPUSH
82017: LD_VAR 0 11
82021: PPUSH
82022: CALL 38250 0 11
82026: GO 82029
82028: POP
// end ;
82029: PPOPN 11
82031: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82032: LD_VAR 0 1
82036: PPUSH
82037: LD_VAR 0 2
82041: PPUSH
82042: LD_VAR 0 3
82046: PPUSH
82047: LD_VAR 0 4
82051: PPUSH
82052: LD_VAR 0 5
82056: PPUSH
82057: CALL 40344 0 5
// end ; end_of_file
82061: PPOPN 5
82063: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82064: LD_VAR 0 1
82068: PPUSH
82069: LD_VAR 0 2
82073: PPUSH
82074: LD_VAR 0 3
82078: PPUSH
82079: LD_VAR 0 4
82083: PPUSH
82084: LD_VAR 0 5
82088: PPUSH
82089: LD_VAR 0 6
82093: PPUSH
82094: CALL 27058 0 6
// end ;
82098: PPOPN 6
82100: END
