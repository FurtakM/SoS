// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 , macmilan_squad ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// mission_prefix := 08_ ;
  15: LD_ADDR_EXP 43
  19: PUSH
  20: LD_STRING 08_
  22: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  23: LD_ADDR_EXP 44
  27: PUSH
  28: LD_STRING 07c_
  30: ST_TO_ADDR
// JMMArrive = 0 ;
  31: LD_ADDR_EXP 39
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// SikorskyArrive = 0 ;
  39: LD_ADDR_EXP 18
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  47: LD_ADDR_EXP 19
  51: PUSH
  52: LD_INT 35
  54: ST_TO_ADDR
// SikorskyAI = 0 ;
  55: LD_ADDR_EXP 20
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// SikorskyStatus = 0 ;
  63: LD_ADDR_EXP 21
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// firstAttack = 0 ;
  71: LD_ADDR_EXP 33
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// secondAttack = 0 ;
  79: LD_ADDR_EXP 34
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// startCutscene = 1 ;
  87: LD_ADDR_EXP 38
  91: PUSH
  92: LD_INT 1
  94: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  95: LD_ADDR_EXP 12
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 0
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// russianAI = 0 ;
 111: LD_ADDR_EXP 27
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 119: LD_ADDR_EXP 31
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// escapeAvalaible = 0 ;
 126: LD_ADDR_EXP 36
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// defenders_list = [ ] ;
 134: LD_ADDR_EXP 32
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// varEvent1 = 0 ;
 141: LD_ADDR_EXP 41
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// timerStatus = 0 ;
 149: LD_ADDR_EXP 35
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// supply = [ 18 , 17 , 15 , 14 ] [ Difficulty ] ;
 157: LD_ADDR_EXP 40
 161: PUSH
 162: LD_INT 18
 164: PUSH
 165: LD_INT 17
 167: PUSH
 168: LD_INT 15
 170: PUSH
 171: LD_INT 14
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_OWVAR 67
 184: ARRAY
 185: ST_TO_ADDR
// debugMode = 0 ;
 186: LD_ADDR_EXP 45
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// PrepareDifficulty ;
 194: CALL 7766 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 198: LD_INT 43
 200: PPUSH
 201: LD_INT 22
 203: PPUSH
 204: LD_INT 1
 206: PPUSH
 207: LD_INT 333
 209: NEG
 210: PPUSH
 211: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 215: LD_INT 43
 217: PPUSH
 218: LD_INT 22
 220: PPUSH
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 331
// PrepareGammaBase ;
 228: CALL 2639 0 0
// PrepareHeroes ;
 232: CALL 575 0 0
// PrepareRussianCommander ;
 236: CALL 6622 0 0
// PrepareRussians ;
 240: CALL 6940 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 244: LD_INT 22
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: PUSH
 254: LD_INT 25
 256: PUSH
 257: LD_INT 2
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PPUSH
 268: CALL_OW 69
 272: PPUSH
 273: LD_INT 0
 275: PPUSH
 276: LD_INT 90
 278: PPUSH
 279: LD_INT 86
 281: PPUSH
 282: LD_INT 3
 284: PPUSH
 285: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 289: LD_INT 3
 291: PPUSH
 292: LD_INT 24
 294: PPUSH
 295: LD_INT 3
 297: PPUSH
 298: LD_EXP 25
 302: PPUSH
 303: LD_EXP 26
 307: PPUSH
 308: CALL_OW 12
 312: PPUSH
 313: LD_INT 6
 315: PPUSH
 316: LD_INT 4
 318: PPUSH
 319: CALL 9191 0 6
// PrepareCutsceneAttack ;
 323: CALL 6674 0 0
// end ;
 327: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 328: LD_INT 22
 330: PUSH
 331: LD_INT 1
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 34
 340: PUSH
 341: LD_INT 6
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: PPUSH
 352: CALL_OW 69
 356: PUSH
 357: LD_INT 6
 359: GREATEREQUAL
 360: IFFALSE 372
 362: GO 364
 364: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 365: LD_STRING ACH_ARMOR
 367: PPUSH
 368: CALL_OW 543
 372: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 373: LD_EXP 45
 377: PUSH
 378: LD_INT 1
 380: EQUAL
 381: IFFALSE 572
 383: GO 385
 385: DISABLE
 386: LD_INT 0
 388: PPUSH
// begin enable ;
 389: ENABLE
// fogoff ( true ) ;
 390: LD_INT 1
 392: PPUSH
 393: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 397: LD_ADDR_VAR 0 1
 401: PUSH
 402: LD_INT 22
 404: PUSH
 405: LD_INT 1
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: PUSH
 412: LD_INT 21
 414: PUSH
 415: LD_INT 1
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PPUSH
 426: CALL_OW 69
 430: PUSH
 431: FOR_IN
 432: IFFALSE 448
// SetLives ( i , 1000 ) ;
 434: LD_VAR 0 1
 438: PPUSH
 439: LD_INT 1000
 441: PPUSH
 442: CALL_OW 234
 446: GO 431
 448: POP
 449: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 450: LD_ADDR_VAR 0 1
 454: PUSH
 455: LD_INT 22
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 1
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PPUSH
 479: CALL_OW 69
 483: PUSH
 484: FOR_IN
 485: IFFALSE 509
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 487: LD_VAR 0 1
 491: PPUSH
 492: CALL_OW 274
 496: PPUSH
 497: LD_INT 1
 499: PPUSH
 500: LD_INT 9999
 502: PPUSH
 503: CALL_OW 277
 507: GO 484
 509: POP
 510: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 511: LD_ADDR_VAR 0 1
 515: PUSH
 516: LD_INT 22
 518: PUSH
 519: LD_INT 1
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: PUSH
 526: LD_INT 30
 528: PUSH
 529: LD_INT 1
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PPUSH
 540: CALL_OW 69
 544: PUSH
 545: FOR_IN
 546: IFFALSE 570
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 548: LD_VAR 0 1
 552: PPUSH
 553: CALL_OW 274
 557: PPUSH
 558: LD_INT 2
 560: PPUSH
 561: LD_INT 9999
 563: PPUSH
 564: CALL_OW 277
 568: GO 545
 570: POP
 571: POP
// end ; end_of_file
 572: PPOPN 1
 574: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 575: LD_INT 0
 577: PPUSH
 578: PPUSH
 579: PPUSH
 580: PPUSH
 581: PPUSH
 582: PPUSH
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
 587: PPUSH
 588: PPUSH
 589: PPUSH
 590: PPUSH
 591: PPUSH
// uc_side = 1 ;
 592: LD_ADDR_OWVAR 20
 596: PUSH
 597: LD_INT 1
 599: ST_TO_ADDR
// uc_nation = 1 ;
 600: LD_ADDR_OWVAR 21
 604: PUSH
 605: LD_INT 1
 607: ST_TO_ADDR
// if gammaCommander = 1 then
 608: LD_EXP 12
 612: PUSH
 613: LD_INT 1
 615: EQUAL
 616: IFFALSE 667
// begin Donaldson = PrepareUnit ( Donaldson , true , 04_ ) ;
 618: LD_ADDR_EXP 3
 622: PUSH
 623: LD_STRING Donaldson
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: LD_STRING 04_
 631: PPUSH
 632: CALL 46272 0 3
 636: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 637: LD_EXP 3
 641: PPUSH
 642: LD_INT 54
 644: PPUSH
 645: LD_INT 25
 647: PPUSH
 648: LD_INT 8
 650: PPUSH
 651: LD_INT 0
 653: PPUSH
 654: CALL_OW 50
// ComHold ( Donaldson ) ;
 658: LD_EXP 3
 662: PPUSH
 663: CALL_OW 140
// end ; if gammaCommander = 2 then
 667: LD_EXP 12
 671: PUSH
 672: LD_INT 2
 674: EQUAL
 675: IFFALSE 726
// begin Brown = PrepareUnit ( Brown , true , 04_ ) ;
 677: LD_ADDR_EXP 2
 681: PUSH
 682: LD_STRING Brown
 684: PPUSH
 685: LD_INT 1
 687: PPUSH
 688: LD_STRING 04_
 690: PPUSH
 691: CALL 46272 0 3
 695: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 696: LD_EXP 2
 700: PPUSH
 701: LD_INT 54
 703: PPUSH
 704: LD_INT 25
 706: PPUSH
 707: LD_INT 8
 709: PPUSH
 710: LD_INT 0
 712: PPUSH
 713: CALL_OW 50
// ComHold ( Brown ) ;
 717: LD_EXP 2
 721: PPUSH
 722: CALL_OW 140
// end ; if gammaCommander = 3 then
 726: LD_EXP 12
 730: PUSH
 731: LD_INT 3
 733: EQUAL
 734: IFFALSE 785
// begin Houten = PrepareUnit ( VanHouten , false ,  ) ;
 736: LD_ADDR_EXP 13
 740: PUSH
 741: LD_STRING VanHouten
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: LD_STRING 
 749: PPUSH
 750: CALL 46272 0 3
 754: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 755: LD_EXP 13
 759: PPUSH
 760: LD_INT 54
 762: PPUSH
 763: LD_INT 25
 765: PPUSH
 766: LD_INT 8
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL_OW 50
// ComHold ( Houten ) ;
 776: LD_EXP 13
 780: PPUSH
 781: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ,  ) ;
 785: LD_ADDR_EXP 22
 789: PUSH
 790: LD_STRING Harisson
 792: PPUSH
 793: LD_INT 0
 795: PPUSH
 796: LD_STRING 
 798: PPUSH
 799: CALL 46272 0 3
 803: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 804: LD_ADDR_EXP 23
 808: PUSH
 809: LD_STRING Powell
 811: PPUSH
 812: LD_INT 0
 814: PPUSH
 815: LD_STRING 
 817: PPUSH
 818: CALL 46272 0 3
 822: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 823: LD_STRING 04_Lisa
 825: PUSH
 826: EMPTY
 827: LIST
 828: PPUSH
 829: CALL_OW 28
 833: PUSH
 834: LD_STRING LisaInDelta
 836: PPUSH
 837: LD_INT 0
 839: PPUSH
 840: CALL_OW 30
 844: NOT
 845: AND
 846: PUSH
 847: LD_STRING 07_Lisa
 849: PUSH
 850: EMPTY
 851: LIST
 852: PPUSH
 853: CALL_OW 28
 857: NOT
 858: AND
 859: IFFALSE 898
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 861: LD_ADDR_EXP 6
 865: PUSH
 866: LD_STRING Lisa
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: LD_STRING 04_
 874: PPUSH
 875: CALL 46272 0 3
 879: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 880: LD_ADDR_VAR 0 15
 884: PUSH
 885: LD_VAR 0 15
 889: PUSH
 890: LD_EXP 6
 894: ADD
 895: ST_TO_ADDR
// end else
 896: GO 953
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 898: LD_EXP 6
 902: NOT
 903: PUSH
 904: LD_STRING LisaIn07
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 30
 914: NOT
 915: AND
 916: IFFALSE 953
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 918: LD_ADDR_EXP 6
 922: PUSH
 923: LD_STRING Lisa
 925: PPUSH
 926: LD_INT 1
 928: PPUSH
 929: LD_STRING 07_
 931: PPUSH
 932: CALL 46272 0 3
 936: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 937: LD_ADDR_VAR 0 15
 941: PUSH
 942: LD_VAR 0 15
 946: PUSH
 947: LD_EXP 6
 951: ADD
 952: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 953: LD_STRING 04_Bobby
 955: PUSH
 956: EMPTY
 957: LIST
 958: PPUSH
 959: CALL_OW 28
 963: PUSH
 964: LD_STRING BobbyInDelta
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 30
 974: NOT
 975: AND
 976: PUSH
 977: LD_STRING 07_Bobby
 979: PUSH
 980: EMPTY
 981: LIST
 982: PPUSH
 983: CALL_OW 28
 987: NOT
 988: AND
 989: IFFALSE 1028
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 991: LD_ADDR_EXP 4
 995: PUSH
 996: LD_STRING Bobby
 998: PPUSH
 999: LD_INT 1
1001: PPUSH
1002: LD_STRING 04_
1004: PPUSH
1005: CALL 46272 0 3
1009: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1010: LD_ADDR_VAR 0 15
1014: PUSH
1015: LD_VAR 0 15
1019: PUSH
1020: LD_EXP 4
1024: ADD
1025: ST_TO_ADDR
// end else
1026: GO 1083
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
1028: LD_EXP 4
1032: NOT
1033: PUSH
1034: LD_STRING BobbyIn07
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL_OW 30
1044: NOT
1045: AND
1046: IFFALSE 1083
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
1048: LD_ADDR_EXP 4
1052: PUSH
1053: LD_STRING Bobby
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: LD_STRING 07_
1061: PPUSH
1062: CALL 46272 0 3
1066: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
1067: LD_ADDR_VAR 0 15
1071: PUSH
1072: LD_VAR 0 15
1076: PUSH
1077: LD_EXP 4
1081: ADD
1082: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1083: LD_STRING 04_Cyrus
1085: PUSH
1086: EMPTY
1087: LIST
1088: PPUSH
1089: CALL_OW 28
1093: PUSH
1094: LD_STRING CyrusInDelta
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: CALL_OW 30
1104: NOT
1105: AND
1106: PUSH
1107: LD_STRING 07_Cyrus
1109: PUSH
1110: EMPTY
1111: LIST
1112: PPUSH
1113: CALL_OW 28
1117: NOT
1118: AND
1119: IFFALSE 1158
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
1121: LD_ADDR_EXP 5
1125: PUSH
1126: LD_STRING Cyrus
1128: PPUSH
1129: LD_INT 1
1131: PPUSH
1132: LD_STRING 04_
1134: PPUSH
1135: CALL 46272 0 3
1139: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1140: LD_ADDR_VAR 0 15
1144: PUSH
1145: LD_VAR 0 15
1149: PUSH
1150: LD_EXP 5
1154: ADD
1155: ST_TO_ADDR
// end else
1156: GO 1213
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1158: LD_EXP 5
1162: NOT
1163: PUSH
1164: LD_STRING CyrusIn07
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 30
1174: NOT
1175: AND
1176: IFFALSE 1213
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
1178: LD_ADDR_EXP 5
1182: PUSH
1183: LD_STRING Cyrus
1185: PPUSH
1186: LD_INT 1
1188: PPUSH
1189: LD_STRING 07_
1191: PPUSH
1192: CALL 46272 0 3
1196: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1197: LD_ADDR_VAR 0 15
1201: PUSH
1202: LD_VAR 0 15
1206: PUSH
1207: LD_EXP 5
1211: ADD
1212: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1213: LD_STRING 04_Brown
1215: PUSH
1216: EMPTY
1217: LIST
1218: PPUSH
1219: CALL_OW 28
1223: PUSH
1224: LD_STRING BrownInDelta
1226: PPUSH
1227: LD_INT 0
1229: PPUSH
1230: CALL_OW 30
1234: NOT
1235: AND
1236: PUSH
1237: LD_STRING 07_Brown
1239: PUSH
1240: EMPTY
1241: LIST
1242: PPUSH
1243: CALL_OW 28
1247: NOT
1248: AND
1249: PUSH
1250: LD_EXP 12
1254: PUSH
1255: LD_INT 2
1257: NONEQUAL
1258: AND
1259: IFFALSE 1298
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1261: LD_ADDR_EXP 2
1265: PUSH
1266: LD_STRING Brown
1268: PPUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_STRING 04_
1274: PPUSH
1275: CALL 46272 0 3
1279: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1280: LD_ADDR_VAR 0 15
1284: PUSH
1285: LD_VAR 0 15
1289: PUSH
1290: LD_EXP 2
1294: ADD
1295: ST_TO_ADDR
// end else
1296: GO 1363
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1298: LD_EXP 2
1302: NOT
1303: PUSH
1304: LD_STRING BrownIn07
1306: PPUSH
1307: LD_INT 0
1309: PPUSH
1310: CALL_OW 30
1314: NOT
1315: AND
1316: PUSH
1317: LD_EXP 12
1321: PUSH
1322: LD_INT 2
1324: NONEQUAL
1325: AND
1326: IFFALSE 1363
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1328: LD_ADDR_EXP 2
1332: PUSH
1333: LD_STRING Brown
1335: PPUSH
1336: LD_INT 1
1338: PPUSH
1339: LD_STRING 07_
1341: PPUSH
1342: CALL 46272 0 3
1346: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1347: LD_ADDR_VAR 0 15
1351: PUSH
1352: LD_VAR 0 15
1356: PUSH
1357: LD_EXP 2
1361: ADD
1362: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1363: LD_STRING 04_Donaldson
1365: PUSH
1366: EMPTY
1367: LIST
1368: PPUSH
1369: CALL_OW 28
1373: PUSH
1374: LD_STRING DonaldsonInDelta
1376: PPUSH
1377: LD_INT 0
1379: PPUSH
1380: CALL_OW 30
1384: NOT
1385: AND
1386: PUSH
1387: LD_STRING 07_Donaldson
1389: PUSH
1390: EMPTY
1391: LIST
1392: PPUSH
1393: CALL_OW 28
1397: NOT
1398: AND
1399: PUSH
1400: LD_EXP 12
1404: PUSH
1405: LD_INT 1
1407: NONEQUAL
1408: AND
1409: IFFALSE 1448
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1411: LD_ADDR_EXP 3
1415: PUSH
1416: LD_STRING Donaldson
1418: PPUSH
1419: LD_INT 1
1421: PPUSH
1422: LD_STRING 04_
1424: PPUSH
1425: CALL 46272 0 3
1429: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1430: LD_ADDR_VAR 0 15
1434: PUSH
1435: LD_VAR 0 15
1439: PUSH
1440: LD_EXP 3
1444: ADD
1445: ST_TO_ADDR
// end else
1446: GO 1513
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1448: LD_EXP 3
1452: NOT
1453: PUSH
1454: LD_STRING DonaldsonIn07
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 30
1464: NOT
1465: AND
1466: PUSH
1467: LD_EXP 12
1471: PUSH
1472: LD_INT 1
1474: NONEQUAL
1475: AND
1476: IFFALSE 1513
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1478: LD_ADDR_EXP 3
1482: PUSH
1483: LD_STRING Donaldson
1485: PPUSH
1486: LD_INT 1
1488: PPUSH
1489: LD_STRING 07_
1491: PPUSH
1492: CALL 46272 0 3
1496: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1497: LD_ADDR_VAR 0 15
1501: PUSH
1502: LD_VAR 0 15
1506: PUSH
1507: LD_EXP 3
1511: ADD
1512: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1513: LD_STRING KhatamIn07
1515: PPUSH
1516: LD_INT 0
1518: PPUSH
1519: CALL_OW 30
1523: NOT
1524: IFFALSE 1561
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1526: LD_ADDR_EXP 10
1530: PUSH
1531: LD_STRING Khatam
1533: PPUSH
1534: LD_INT 1
1536: PPUSH
1537: LD_STRING 07_
1539: PPUSH
1540: CALL 46272 0 3
1544: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1545: LD_ADDR_VAR 0 15
1549: PUSH
1550: LD_VAR 0 15
1554: PUSH
1555: LD_EXP 10
1559: ADD
1560: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1561: LD_ADDR_EXP 11
1565: PUSH
1566: LD_STRING 07_othersGamma
1568: PPUSH
1569: CALL_OW 31
1573: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1574: LD_ADDR_VAR 0 14
1578: PUSH
1579: LD_INT 8
1581: PUSH
1582: LD_EXP 11
1586: MINUS
1587: ST_TO_ADDR
// if tmp then
1588: LD_VAR 0 14
1592: IFFALSE 1645
// for i = 1 to tmp do
1594: LD_ADDR_VAR 0 2
1598: PUSH
1599: DOUBLE
1600: LD_INT 1
1602: DEC
1603: ST_TO_ADDR
1604: LD_VAR 0 14
1608: PUSH
1609: FOR_TO
1610: IFFALSE 1643
// begin PrepareHuman ( false , 1 , 5 ) ;
1612: LD_INT 0
1614: PPUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 5
1620: PPUSH
1621: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1625: LD_ADDR_EXP 11
1629: PUSH
1630: LD_EXP 11
1634: PUSH
1635: CALL_OW 44
1639: ADD
1640: ST_TO_ADDR
// end ;
1641: GO 1609
1643: POP
1644: POP
// if HexInfo ( 61 , 29 ) = 0 then
1645: LD_INT 61
1647: PPUSH
1648: LD_INT 29
1650: PPUSH
1651: CALL_OW 428
1655: PUSH
1656: LD_INT 0
1658: EQUAL
1659: IFFALSE 1690
// begin bc_type := b_barracks ;
1661: LD_ADDR_OWVAR 42
1665: PUSH
1666: LD_INT 5
1668: ST_TO_ADDR
// bc_level := 6 ;
1669: LD_ADDR_OWVAR 43
1673: PUSH
1674: LD_INT 6
1676: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1677: LD_INT 61
1679: PPUSH
1680: LD_INT 29
1682: PPUSH
1683: LD_INT 5
1685: PPUSH
1686: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1690: LD_ADDR_VAR 0 13
1694: PUSH
1695: LD_INT 22
1697: PUSH
1698: LD_INT 1
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 31
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PPUSH
1719: CALL_OW 69
1723: ST_TO_ADDR
// for i in bun do
1724: LD_ADDR_VAR 0 2
1728: PUSH
1729: LD_VAR 0 13
1733: PUSH
1734: FOR_IN
1735: IFFALSE 1867
// begin x := GetX ( i ) ;
1737: LD_ADDR_VAR 0 3
1741: PUSH
1742: LD_VAR 0 2
1746: PPUSH
1747: CALL_OW 250
1751: ST_TO_ADDR
// y := GetY ( i ) ;
1752: LD_ADDR_VAR 0 4
1756: PUSH
1757: LD_VAR 0 2
1761: PPUSH
1762: CALL_OW 251
1766: ST_TO_ADDR
// d := GetDir ( i ) ;
1767: LD_ADDR_VAR 0 5
1771: PUSH
1772: LD_VAR 0 2
1776: PPUSH
1777: CALL_OW 254
1781: ST_TO_ADDR
// RemoveUnit ( i ) ;
1782: LD_VAR 0 2
1786: PPUSH
1787: CALL_OW 64
// bc_type := b_bunker ;
1791: LD_ADDR_OWVAR 42
1795: PUSH
1796: LD_INT 32
1798: ST_TO_ADDR
// bc_level := 6 ;
1799: LD_ADDR_OWVAR 43
1803: PUSH
1804: LD_INT 6
1806: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1807: LD_ADDR_VAR 0 6
1811: PUSH
1812: LD_VAR 0 3
1816: PPUSH
1817: LD_VAR 0 4
1821: PPUSH
1822: LD_VAR 0 5
1826: PPUSH
1827: CALL_OW 47
1831: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1832: LD_VAR 0 6
1836: PPUSH
1837: LD_INT 5
1839: PUSH
1840: LD_INT 4
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: LD_VAR 0 2
1851: PUSH
1852: LD_INT 2
1854: MOD
1855: PUSH
1856: LD_INT 1
1858: PLUS
1859: ARRAY
1860: PPUSH
1861: CALL_OW 431
// end ;
1865: GO 1734
1867: POP
1868: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1869: LD_ADDR_VAR 0 9
1873: PUSH
1874: LD_INT 22
1876: PUSH
1877: LD_INT 1
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 30
1886: PUSH
1887: LD_INT 5
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PPUSH
1898: CALL_OW 69
1902: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1903: LD_ADDR_VAR 0 8
1907: PUSH
1908: LD_INT 22
1910: PUSH
1911: LD_INT 1
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 2
1920: PUSH
1921: LD_INT 30
1923: PUSH
1924: LD_INT 6
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 30
1933: PUSH
1934: LD_INT 7
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 30
1943: PUSH
1944: LD_INT 8
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: PPUSH
1961: CALL_OW 69
1965: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1966: LD_ADDR_VAR 0 7
1970: PUSH
1971: LD_INT 22
1973: PUSH
1974: LD_INT 1
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PUSH
1981: LD_INT 30
1983: PUSH
1984: LD_INT 3
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PPUSH
1995: CALL_OW 69
1999: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
2000: LD_ADDR_VAR 0 12
2004: PUSH
2005: LD_INT 22
2007: PUSH
2008: LD_INT 1
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 30
2017: PUSH
2018: LD_INT 36
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
2034: LD_ADDR_VAR 0 13
2038: PUSH
2039: LD_INT 22
2041: PUSH
2042: LD_INT 1
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 2
2051: PUSH
2052: LD_INT 30
2054: PUSH
2055: LD_INT 31
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PUSH
2062: LD_INT 30
2064: PUSH
2065: LD_INT 32
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PPUSH
2081: CALL_OW 69
2085: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
2086: LD_ADDR_VAR 0 2
2090: PUSH
2091: LD_EXP 11
2095: PUSH
2096: LD_VAR 0 15
2100: ADD
2101: PUSH
2102: FOR_IN
2103: IFFALSE 2524
// begin placed := false ;
2105: LD_ADDR_VAR 0 11
2109: PUSH
2110: LD_INT 0
2112: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2113: LD_VAR 0 2
2117: PPUSH
2118: CALL_OW 257
2122: PUSH
2123: LD_INT 1
2125: EQUAL
2126: IFFALSE 2251
// begin if UnitFilter ( bun , [ f_empty ] ) then
2128: LD_VAR 0 13
2132: PPUSH
2133: LD_INT 58
2135: PUSH
2136: EMPTY
2137: LIST
2138: PPUSH
2139: CALL_OW 72
2143: IFFALSE 2182
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2145: LD_VAR 0 2
2149: PPUSH
2150: LD_VAR 0 13
2154: PPUSH
2155: LD_INT 58
2157: PUSH
2158: EMPTY
2159: LIST
2160: PPUSH
2161: CALL_OW 72
2165: PUSH
2166: LD_INT 1
2168: ARRAY
2169: PPUSH
2170: CALL_OW 52
// placed := true ;
2174: LD_ADDR_VAR 0 11
2178: PUSH
2179: LD_INT 1
2181: ST_TO_ADDR
// end ; if arm and not placed then
2182: LD_VAR 0 9
2186: PUSH
2187: LD_VAR 0 11
2191: NOT
2192: AND
2193: IFFALSE 2251
// begin for j in arm do
2195: LD_ADDR_VAR 0 10
2199: PUSH
2200: LD_VAR 0 9
2204: PUSH
2205: FOR_IN
2206: IFFALSE 2249
// if UnitsInside ( j ) < 6 then
2208: LD_VAR 0 10
2212: PPUSH
2213: CALL_OW 313
2217: PUSH
2218: LD_INT 6
2220: LESS
2221: IFFALSE 2247
// begin PlaceHumanInUnit ( i , j ) ;
2223: LD_VAR 0 2
2227: PPUSH
2228: LD_VAR 0 10
2232: PPUSH
2233: CALL_OW 52
// placed := true ;
2237: LD_ADDR_VAR 0 11
2241: PUSH
2242: LD_INT 1
2244: ST_TO_ADDR
// break ;
2245: GO 2249
// end ;
2247: GO 2205
2249: POP
2250: POP
// end ; end ; if GetClass ( i ) = 2 then
2251: LD_VAR 0 2
2255: PPUSH
2256: CALL_OW 257
2260: PUSH
2261: LD_INT 2
2263: EQUAL
2264: IFFALSE 2297
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2266: LD_VAR 0 2
2270: PPUSH
2271: LD_INT 52
2273: PPUSH
2274: LD_INT 20
2276: PPUSH
2277: LD_INT 6
2279: PPUSH
2280: LD_INT 0
2282: PPUSH
2283: CALL_OW 50
// placed := true ;
2287: LD_ADDR_VAR 0 11
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// continue ;
2295: GO 2102
// end ; if GetClass ( i ) = 3 then
2297: LD_VAR 0 2
2301: PPUSH
2302: CALL_OW 257
2306: PUSH
2307: LD_INT 3
2309: EQUAL
2310: IFFALSE 2414
// if fac then
2312: LD_VAR 0 7
2316: IFFALSE 2414
// begin if ct then
2318: LD_VAR 0 12
2322: IFFALSE 2350
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_VAR 0 12
2333: PUSH
2334: LD_INT 1
2336: ARRAY
2337: PPUSH
2338: CALL_OW 52
// placed := true ;
2342: LD_ADDR_VAR 0 11
2346: PUSH
2347: LD_INT 1
2349: ST_TO_ADDR
// end ; if placed then
2350: LD_VAR 0 11
2354: IFFALSE 2358
// continue ;
2356: GO 2102
// for j in fac do
2358: LD_ADDR_VAR 0 10
2362: PUSH
2363: LD_VAR 0 7
2367: PUSH
2368: FOR_IN
2369: IFFALSE 2412
// if UnitsInside ( j ) < 6 then
2371: LD_VAR 0 10
2375: PPUSH
2376: CALL_OW 313
2380: PUSH
2381: LD_INT 6
2383: LESS
2384: IFFALSE 2410
// begin PlaceHumanInUnit ( i , j ) ;
2386: LD_VAR 0 2
2390: PPUSH
2391: LD_VAR 0 10
2395: PPUSH
2396: CALL_OW 52
// placed := true ;
2400: LD_ADDR_VAR 0 11
2404: PUSH
2405: LD_INT 1
2407: ST_TO_ADDR
// break ;
2408: GO 2412
// end ;
2410: GO 2368
2412: POP
2413: POP
// end ; if GetClass ( i ) = 4 then
2414: LD_VAR 0 2
2418: PPUSH
2419: CALL_OW 257
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2491
// if lab then
2429: LD_VAR 0 8
2433: IFFALSE 2491
// begin for j in lab do
2435: LD_ADDR_VAR 0 10
2439: PUSH
2440: LD_VAR 0 8
2444: PUSH
2445: FOR_IN
2446: IFFALSE 2489
// if UnitsInside ( j ) < 6 then
2448: LD_VAR 0 10
2452: PPUSH
2453: CALL_OW 313
2457: PUSH
2458: LD_INT 6
2460: LESS
2461: IFFALSE 2487
// begin PlaceHumanInUnit ( i , j ) ;
2463: LD_VAR 0 2
2467: PPUSH
2468: LD_VAR 0 10
2472: PPUSH
2473: CALL_OW 52
// placed := true ;
2477: LD_ADDR_VAR 0 11
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// break ;
2485: GO 2489
// end ;
2487: GO 2445
2489: POP
2490: POP
// end ; if not placed then
2491: LD_VAR 0 11
2495: NOT
2496: IFFALSE 2522
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2498: LD_VAR 0 2
2502: PPUSH
2503: LD_INT 5
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: CALL_OW 49
// ComHold ( i ) ;
2513: LD_VAR 0 2
2517: PPUSH
2518: CALL_OW 140
// end ; end ;
2522: GO 2102
2524: POP
2525: POP
// if ct then
2526: LD_VAR 0 12
2530: IFFALSE 2634
// if UnitsInside ( ct [ 1 ] ) then
2532: LD_VAR 0 12
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: CALL_OW 313
2545: IFFALSE 2634
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2547: LD_ADDR_VAR 0 2
2551: PUSH
2552: LD_INT 22
2554: PUSH
2555: LD_INT 1
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 33
2564: PUSH
2565: LD_INT 2
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PPUSH
2576: CALL_OW 69
2580: PUSH
2581: FOR_IN
2582: IFFALSE 2632
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_VAR 0 12
2593: PUSH
2594: LD_INT 1
2596: ARRAY
2597: PPUSH
2598: CALL_OW 313
2602: PUSH
2603: LD_INT 1
2605: PPUSH
2606: LD_VAR 0 12
2610: PUSH
2611: LD_INT 1
2613: ARRAY
2614: PPUSH
2615: CALL_OW 313
2619: PPUSH
2620: CALL_OW 12
2624: ARRAY
2625: PPUSH
2626: CALL_OW 135
2630: GO 2581
2632: POP
2633: POP
// end ; end ;
2634: LD_VAR 0 1
2638: RET
// export function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2639: LD_INT 0
2641: PPUSH
2642: PPUSH
2643: PPUSH
2644: PPUSH
2645: PPUSH
2646: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2647: LD_INT 71
2649: PPUSH
2650: LD_INT 5
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2660: LD_ADDR_VAR 0 2
2664: PUSH
2665: LD_STRING GammaBase
2667: PPUSH
2668: EMPTY
2669: PPUSH
2670: CALL_OW 30
2674: ST_TO_ADDR
// if not blist then
2675: LD_VAR 0 2
2679: NOT
2680: IFFALSE 2720
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2682: LD_ADDR_VAR 0 2
2686: PUSH
2687: LD_INT 1
2689: PUSH
2690: LD_INT 52
2692: PUSH
2693: LD_INT 12
2695: PUSH
2696: LD_INT 3
2698: PUSH
2699: LD_INT 3
2701: PUSH
2702: LD_INT 0
2704: PUSH
2705: LD_INT 0
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: LIST
2712: LIST
2713: LIST
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: ST_TO_ADDR
// uc_side := 1 ;
2720: LD_ADDR_OWVAR 20
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// uc_nation := 1 ;
2728: LD_ADDR_OWVAR 21
2732: PUSH
2733: LD_INT 1
2735: ST_TO_ADDR
// bc_kind1 := - 1 ;
2736: LD_ADDR_OWVAR 44
2740: PUSH
2741: LD_INT 1
2743: NEG
2744: ST_TO_ADDR
// bc_kind2 := - 1 ;
2745: LD_ADDR_OWVAR 45
2749: PUSH
2750: LD_INT 1
2752: NEG
2753: ST_TO_ADDR
// for i in blist do
2754: LD_ADDR_VAR 0 3
2758: PUSH
2759: LD_VAR 0 2
2763: PUSH
2764: FOR_IN
2765: IFFALSE 3041
// begin bc_type := i [ 1 ] ;
2767: LD_ADDR_OWVAR 42
2771: PUSH
2772: LD_VAR 0 3
2776: PUSH
2777: LD_INT 1
2779: ARRAY
2780: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2781: LD_ADDR_OWVAR 43
2785: PUSH
2786: LD_VAR 0 3
2790: PUSH
2791: LD_INT 5
2793: ARRAY
2794: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2795: LD_OWVAR 42
2799: PUSH
2800: LD_INT 6
2802: PUSH
2803: LD_INT 7
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: IN
2810: IFFALSE 2876
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2812: LD_STRING 06_remoteVehs_1
2814: PPUSH
2815: LD_INT 0
2817: PPUSH
2818: CALL_OW 30
2822: NOT
2823: IFFALSE 2851
// begin bc_type := b_lab_full ;
2825: LD_ADDR_OWVAR 42
2829: PUSH
2830: LD_INT 8
2832: ST_TO_ADDR
// bc_kind1 := 10 ;
2833: LD_ADDR_OWVAR 44
2837: PUSH
2838: LD_INT 10
2840: ST_TO_ADDR
// bc_kind2 := 15 ;
2841: LD_ADDR_OWVAR 45
2845: PUSH
2846: LD_INT 15
2848: ST_TO_ADDR
// end else
2849: GO 2876
// begin bc_type := b_lab_half ;
2851: LD_ADDR_OWVAR 42
2855: PUSH
2856: LD_INT 7
2858: ST_TO_ADDR
// bc_kind1 := 10 ;
2859: LD_ADDR_OWVAR 44
2863: PUSH
2864: LD_INT 10
2866: ST_TO_ADDR
// bc_kind2 := - 1 ;
2867: LD_ADDR_OWVAR 45
2871: PUSH
2872: LD_INT 1
2874: NEG
2875: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2876: LD_OWVAR 42
2880: PUSH
2881: LD_INT 2
2883: EQUAL
2884: IFFALSE 2894
// bc_type := b_factory ;
2886: LD_ADDR_OWVAR 42
2890: PUSH
2891: LD_INT 3
2893: ST_TO_ADDR
// if bc_type = b_depot then
2894: LD_OWVAR 42
2898: PUSH
2899: LD_INT 0
2901: EQUAL
2902: IFFALSE 2951
// begin bc_type := b_warehouse ;
2904: LD_ADDR_OWVAR 42
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2912: LD_ADDR_EXP 37
2916: PUSH
2917: LD_VAR 0 3
2921: PUSH
2922: LD_INT 2
2924: ARRAY
2925: PPUSH
2926: LD_VAR 0 3
2930: PUSH
2931: LD_INT 3
2933: ARRAY
2934: PPUSH
2935: LD_VAR 0 3
2939: PUSH
2940: LD_INT 4
2942: ARRAY
2943: PPUSH
2944: CALL_OW 47
2948: ST_TO_ADDR
// continue ;
2949: GO 2764
// end ; if bc_type = b_armoury then
2951: LD_OWVAR 42
2955: PUSH
2956: LD_INT 4
2958: EQUAL
2959: IFFALSE 2969
// bc_type = b_barracks ;
2961: LD_ADDR_OWVAR 42
2965: PUSH
2966: LD_INT 5
2968: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2969: LD_ADDR_VAR 0 4
2973: PUSH
2974: LD_VAR 0 3
2978: PUSH
2979: LD_INT 2
2981: ARRAY
2982: PPUSH
2983: LD_VAR 0 3
2987: PUSH
2988: LD_INT 3
2990: ARRAY
2991: PPUSH
2992: LD_VAR 0 3
2996: PUSH
2997: LD_INT 4
2999: ARRAY
3000: PPUSH
3001: CALL_OW 47
3005: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
3006: LD_VAR 0 4
3010: PPUSH
3011: CALL_OW 266
3015: PUSH
3016: LD_INT 32
3018: EQUAL
3019: IFFALSE 3039
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
3021: LD_VAR 0 4
3025: PPUSH
3026: LD_VAR 0 3
3030: PUSH
3031: LD_INT 7
3033: ARRAY
3034: PPUSH
3035: CALL_OW 431
// end ;
3039: GO 2764
3041: POP
3042: POP
// if not amDepot then
3043: LD_EXP 37
3047: NOT
3048: IFFALSE 3085
// begin bc_type := b_warehouse ;
3050: LD_ADDR_OWVAR 42
3054: PUSH
3055: LD_INT 1
3057: ST_TO_ADDR
// bc_level := 6 ;
3058: LD_ADDR_OWVAR 43
3062: PUSH
3063: LD_INT 6
3065: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
3066: LD_ADDR_EXP 37
3070: PUSH
3071: LD_INT 52
3073: PPUSH
3074: LD_INT 12
3076: PPUSH
3077: LD_INT 3
3079: PPUSH
3080: CALL_OW 47
3084: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
3085: LD_EXP 37
3089: PPUSH
3090: LD_STRING gamma
3092: PPUSH
3093: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 , 280 ] [ Difficulty ] ) ;
3097: LD_EXP 37
3101: PPUSH
3102: CALL_OW 274
3106: PPUSH
3107: LD_INT 1
3109: PPUSH
3110: LD_INT 500
3112: PUSH
3113: LD_INT 420
3115: PUSH
3116: LD_INT 350
3118: PUSH
3119: LD_INT 280
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: PUSH
3128: LD_OWVAR 67
3132: ARRAY
3133: PPUSH
3134: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3138: LD_EXP 37
3142: PPUSH
3143: CALL_OW 274
3147: PPUSH
3148: LD_INT 2
3150: PPUSH
3151: LD_INT 200
3153: PPUSH
3154: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3158: LD_INT 22
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: LD_INT 30
3170: PUSH
3171: LD_INT 3
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PPUSH
3182: CALL_OW 69
3186: IFFALSE 3434
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3188: LD_ADDR_VAR 0 4
3192: PUSH
3193: LD_INT 22
3195: PUSH
3196: LD_INT 1
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 30
3205: PUSH
3206: LD_INT 3
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: PPUSH
3217: CALL_OW 69
3221: PUSH
3222: LD_INT 1
3224: ARRAY
3225: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3226: LD_ADDR_VAR 0 6
3230: PUSH
3231: LD_VAR 0 4
3235: PPUSH
3236: CALL_OW 250
3240: PPUSH
3241: LD_VAR 0 4
3245: PPUSH
3246: CALL_OW 251
3250: PPUSH
3251: LD_VAR 0 4
3255: PPUSH
3256: CALL_OW 254
3260: PPUSH
3261: CALL 80592 0 3
3265: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3266: LD_ADDR_VAR 0 2
3270: PUSH
3271: LD_INT 19
3273: PUSH
3274: LD_INT 17
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3281: LD_STRING 06_remoteVehs_1
3283: PPUSH
3284: LD_INT 0
3286: PPUSH
3287: CALL_OW 30
3291: IFFALSE 3314
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3293: LD_ADDR_VAR 0 2
3297: PUSH
3298: LD_VAR 0 2
3302: PPUSH
3303: LD_INT 1
3305: PPUSH
3306: LD_INT 22
3308: PPUSH
3309: CALL_OW 2
3313: ST_TO_ADDR
// for i in tmp do
3314: LD_ADDR_VAR 0 3
3318: PUSH
3319: LD_VAR 0 6
3323: PUSH
3324: FOR_IN
3325: IFFALSE 3432
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3327: LD_VAR 0 3
3331: PUSH
3332: LD_INT 1
3334: ARRAY
3335: PPUSH
3336: LD_VAR 0 3
3340: PUSH
3341: LD_INT 2
3343: ARRAY
3344: PPUSH
3345: CALL_OW 428
3349: PUSH
3350: LD_INT 0
3352: EQUAL
3353: IFFALSE 3430
// begin bc_type := blist [ 1 ] ;
3355: LD_ADDR_OWVAR 42
3359: PUSH
3360: LD_VAR 0 2
3364: PUSH
3365: LD_INT 1
3367: ARRAY
3368: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3369: LD_VAR 0 3
3373: PUSH
3374: LD_INT 1
3376: ARRAY
3377: PPUSH
3378: LD_VAR 0 3
3382: PUSH
3383: LD_INT 2
3385: ARRAY
3386: PPUSH
3387: LD_VAR 0 3
3391: PUSH
3392: LD_INT 3
3394: ARRAY
3395: PPUSH
3396: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3400: LD_ADDR_VAR 0 2
3404: PUSH
3405: LD_VAR 0 2
3409: PPUSH
3410: LD_INT 1
3412: PPUSH
3413: CALL_OW 3
3417: ST_TO_ADDR
// if blist = 0 then
3418: LD_VAR 0 2
3422: PUSH
3423: LD_INT 0
3425: EQUAL
3426: IFFALSE 3430
// break ;
3428: GO 3432
// end ;
3430: GO 3324
3432: POP
3433: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3434: LD_STRING 06_remoteVehs_1
3436: PPUSH
3437: LD_INT 0
3439: PPUSH
3440: CALL_OW 30
3444: IFFALSE 3911
// begin bc_type = 36 ;
3446: LD_ADDR_OWVAR 42
3450: PUSH
3451: LD_INT 36
3453: ST_TO_ADDR
// bc_level = 4 ;
3454: LD_ADDR_OWVAR 43
3458: PUSH
3459: LD_INT 4
3461: ST_TO_ADDR
// if CanBeBuiltCost ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3462: LD_EXP 37
3466: PPUSH
3467: LD_INT 36
3469: PPUSH
3470: LD_INT 62
3472: PPUSH
3473: LD_INT 12
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL 17162 0 6
3486: PUSH
3487: LD_INT 92
3489: PUSH
3490: LD_INT 62
3492: PUSH
3493: LD_INT 12
3495: PUSH
3496: LD_INT 3
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: PPUSH
3505: CALL_OW 69
3509: NOT
3510: AND
3511: IFFALSE 3528
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3513: LD_INT 62
3515: PPUSH
3516: LD_INT 12
3518: PPUSH
3519: LD_INT 3
3521: PPUSH
3522: CALL_OW 47
3526: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3528: LD_EXP 37
3532: PPUSH
3533: LD_INT 36
3535: PPUSH
3536: LD_INT 37
3538: PPUSH
3539: LD_INT 18
3541: PPUSH
3542: LD_INT 2
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL 17162 0 6
3552: PUSH
3553: LD_INT 92
3555: PUSH
3556: LD_INT 37
3558: PUSH
3559: LD_INT 18
3561: PUSH
3562: LD_INT 3
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: PPUSH
3571: CALL_OW 69
3575: NOT
3576: AND
3577: IFFALSE 3594
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3579: LD_INT 37
3581: PPUSH
3582: LD_INT 18
3584: PPUSH
3585: LD_INT 2
3587: PPUSH
3588: CALL_OW 47
3592: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3594: LD_EXP 37
3598: PPUSH
3599: LD_INT 36
3601: PPUSH
3602: LD_INT 66
3604: PPUSH
3605: LD_INT 14
3607: PPUSH
3608: LD_INT 4
3610: PPUSH
3611: LD_INT 0
3613: PPUSH
3614: CALL 17162 0 6
3618: PUSH
3619: LD_INT 92
3621: PUSH
3622: LD_INT 66
3624: PUSH
3625: LD_INT 14
3627: PUSH
3628: LD_INT 3
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 69
3641: NOT
3642: AND
3643: IFFALSE 3660
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3645: LD_INT 66
3647: PPUSH
3648: LD_INT 14
3650: PPUSH
3651: LD_INT 4
3653: PPUSH
3654: CALL_OW 47
3658: GO 3699
// if CanBeBuiltCost ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3660: LD_EXP 37
3664: PPUSH
3665: LD_INT 36
3667: PPUSH
3668: LD_INT 74
3670: PPUSH
3671: LD_INT 26
3673: PPUSH
3674: LD_INT 4
3676: PPUSH
3677: LD_INT 0
3679: PPUSH
3680: CALL 17162 0 6
3684: IFFALSE 3699
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3686: LD_INT 74
3688: PPUSH
3689: LD_INT 26
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3699: LD_INT 22
3701: PUSH
3702: LD_INT 1
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PUSH
3709: LD_INT 30
3711: PUSH
3712: LD_INT 36
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PPUSH
3723: CALL_OW 69
3727: NOT
3728: IFFALSE 3732
// exit ;
3730: GO 3911
// for i := 1 to [ 3 , 2 , 2 , 1 ] [ Difficulty ] do
3732: LD_ADDR_VAR 0 3
3736: PUSH
3737: DOUBLE
3738: LD_INT 1
3740: DEC
3741: ST_TO_ADDR
3742: LD_INT 3
3744: PUSH
3745: LD_INT 2
3747: PUSH
3748: LD_INT 2
3750: PUSH
3751: LD_INT 1
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: PUSH
3760: LD_OWVAR 67
3764: ARRAY
3765: PUSH
3766: FOR_TO
3767: IFFALSE 3909
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 , 2 ] [ Difficulty ] ;
3769: LD_ADDR_OWVAR 37
3773: PUSH
3774: LD_INT 3
3776: PUSH
3777: LD_INT 2
3779: PUSH
3780: LD_INT 3
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: PUSH
3787: LD_INT 1
3789: PPUSH
3790: LD_INT 2
3792: PPUSH
3793: CALL_OW 12
3797: ARRAY
3798: PUSH
3799: LD_INT 2
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: PUSH
3811: LD_OWVAR 67
3815: ARRAY
3816: ST_TO_ADDR
// vc_engine = 1 ;
3817: LD_ADDR_OWVAR 39
3821: PUSH
3822: LD_INT 1
3824: ST_TO_ADDR
// vc_control = 2 ;
3825: LD_ADDR_OWVAR 38
3829: PUSH
3830: LD_INT 2
3832: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3833: LD_ADDR_OWVAR 40
3837: PUSH
3838: LD_INT 3
3840: PUSH
3841: LD_INT 4
3843: PUSH
3844: LD_INT 5
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: LD_INT 1
3854: PPUSH
3855: LD_INT 3
3857: PPUSH
3858: CALL_OW 12
3862: ARRAY
3863: ST_TO_ADDR
// veh = CreateVehicle ;
3864: LD_ADDR_VAR 0 5
3868: PUSH
3869: CALL_OW 45
3873: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3874: LD_VAR 0 5
3878: PPUSH
3879: LD_INT 4
3881: PPUSH
3882: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3886: LD_VAR 0 5
3890: PPUSH
3891: LD_INT 56
3893: PPUSH
3894: LD_INT 17
3896: PPUSH
3897: LD_INT 9
3899: PPUSH
3900: LD_INT 0
3902: PPUSH
3903: CALL_OW 50
// end ;
3907: GO 3766
3909: POP
3910: POP
// end ; end ;
3911: LD_VAR 0 1
3915: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3916: LD_INT 0
3918: PPUSH
3919: PPUSH
3920: PPUSH
3921: PPUSH
// uc_side = 1 ;
3922: LD_ADDR_OWVAR 20
3926: PUSH
3927: LD_INT 1
3929: ST_TO_ADDR
// uc_nation = 1 ;
3930: LD_ADDR_OWVAR 21
3934: PUSH
3935: LD_INT 1
3937: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 06c_ ) ;
3938: LD_ADDR_EXP 14
3942: PUSH
3943: LD_STRING Denis
3945: PPUSH
3946: LD_INT 1
3948: PPUSH
3949: LD_STRING 06c_
3951: PPUSH
3952: CALL 46272 0 3
3956: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3957: LD_EXP 14
3961: PPUSH
3962: LD_INT 4
3964: PPUSH
3965: LD_INT 0
3967: PPUSH
3968: CALL_OW 49
// Joan = PrepareUnit ( Joan , true , 06c_ ) ;
3972: LD_ADDR_EXP 15
3976: PUSH
3977: LD_STRING Joan
3979: PPUSH
3980: LD_INT 1
3982: PPUSH
3983: LD_STRING 06c_
3985: PPUSH
3986: CALL 46272 0 3
3990: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3991: LD_EXP 15
3995: PPUSH
3996: LD_INT 4
3998: PPUSH
3999: LD_INT 0
4001: PPUSH
4002: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4006: LD_STRING GladstoneIn07
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 30
4016: NOT
4017: IFFALSE 4091
// begin Gladstone = PrepareUnit ( Gladstone , true , 06c_ ) ;
4019: LD_ADDR_EXP 8
4023: PUSH
4024: LD_STRING Gladstone
4026: PPUSH
4027: LD_INT 1
4029: PPUSH
4030: LD_STRING 06c_
4032: PPUSH
4033: CALL 46272 0 3
4037: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4038: LD_EXP 8
4042: NOT
4043: PUSH
4044: LD_STRING GladstoneStayInDelta
4046: PPUSH
4047: LD_INT 0
4049: PPUSH
4050: CALL_OW 30
4054: AND
4055: IFFALSE 4076
// Gladstone = PrepareUnit ( Gladstone , true , 05_ ) ;
4057: LD_ADDR_EXP 8
4061: PUSH
4062: LD_STRING Gladstone
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: LD_STRING 05_
4070: PPUSH
4071: CALL 46272 0 3
4075: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
4076: LD_EXP 8
4080: PPUSH
4081: LD_INT 4
4083: PPUSH
4084: LD_INT 0
4086: PPUSH
4087: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4091: LD_STRING LisaStayInDelta
4093: PPUSH
4094: LD_INT 0
4096: PPUSH
4097: CALL_OW 30
4101: IFFALSE 4137
// begin Lisa = PrepareUnit ( Lisa , true , 05_ ) ;
4103: LD_ADDR_EXP 6
4107: PUSH
4108: LD_STRING Lisa
4110: PPUSH
4111: LD_INT 1
4113: PPUSH
4114: LD_STRING 05_
4116: PPUSH
4117: CALL 46272 0 3
4121: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
4122: LD_EXP 6
4126: PPUSH
4127: LD_INT 4
4129: PPUSH
4130: LD_INT 0
4132: PPUSH
4133: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4137: LD_STRING BobbyStayInDelta
4139: PPUSH
4140: LD_INT 0
4142: PPUSH
4143: CALL_OW 30
4147: IFFALSE 4183
// begin Bobby = PrepareUnit ( Bobby , true , 05_ ) ;
4149: LD_ADDR_EXP 4
4153: PUSH
4154: LD_STRING Bobby
4156: PPUSH
4157: LD_INT 1
4159: PPUSH
4160: LD_STRING 05_
4162: PPUSH
4163: CALL 46272 0 3
4167: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4168: LD_EXP 4
4172: PPUSH
4173: LD_INT 4
4175: PPUSH
4176: LD_INT 0
4178: PPUSH
4179: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4183: LD_STRING CyrusStayInDelta
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL_OW 30
4193: IFFALSE 4229
// begin Cyrus = PrepareUnit ( Cyrus , true , 05_ ) ;
4195: LD_ADDR_EXP 5
4199: PUSH
4200: LD_STRING Cyrus
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: LD_STRING 05_
4208: PPUSH
4209: CALL 46272 0 3
4213: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4214: LD_EXP 5
4218: PPUSH
4219: LD_INT 4
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4229: LD_STRING BrownStayInDelta
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL_OW 30
4239: IFFALSE 4275
// begin Brown = PrepareUnit ( Brown , true , 05_ ) ;
4241: LD_ADDR_EXP 2
4245: PUSH
4246: LD_STRING Brown
4248: PPUSH
4249: LD_INT 1
4251: PPUSH
4252: LD_STRING 05_
4254: PPUSH
4255: CALL 46272 0 3
4259: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4260: LD_EXP 2
4264: PPUSH
4265: LD_INT 4
4267: PPUSH
4268: LD_INT 0
4270: PPUSH
4271: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4275: LD_STRING DonaldsonStayInDelta
4277: PPUSH
4278: LD_INT 0
4280: PPUSH
4281: CALL_OW 30
4285: IFFALSE 4321
// begin Donaldson = PrepareUnit ( Donaldson , true , 05_ ) ;
4287: LD_ADDR_EXP 3
4291: PUSH
4292: LD_STRING Donaldson
4294: PPUSH
4295: LD_INT 1
4297: PPUSH
4298: LD_STRING 05_
4300: PPUSH
4301: CALL 46272 0 3
4305: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4306: LD_EXP 3
4310: PPUSH
4311: LD_INT 4
4313: PPUSH
4314: LD_INT 0
4316: PPUSH
4317: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4321: LD_ADDR_VAR 0 4
4325: PUSH
4326: LD_STRING OthersStayInDelta
4328: PPUSH
4329: CALL_OW 31
4333: ST_TO_ADDR
// if other > 2 then
4334: LD_VAR 0 4
4338: PUSH
4339: LD_INT 2
4341: GREATER
4342: IFFALSE 4387
// begin for j = 1 to 2 do
4344: LD_ADDR_VAR 0 3
4348: PUSH
4349: DOUBLE
4350: LD_INT 1
4352: DEC
4353: ST_TO_ADDR
4354: LD_INT 2
4356: PUSH
4357: FOR_TO
4358: IFFALSE 4383
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4360: LD_VAR 0 4
4364: PUSH
4365: LD_VAR 0 3
4369: ARRAY
4370: PPUSH
4371: LD_INT 4
4373: PPUSH
4374: LD_INT 0
4376: PPUSH
4377: CALL_OW 49
4381: GO 4357
4383: POP
4384: POP
// end else
4385: GO 4430
// begin for j = 1 to other do
4387: LD_ADDR_VAR 0 3
4391: PUSH
4392: DOUBLE
4393: LD_INT 1
4395: DEC
4396: ST_TO_ADDR
4397: LD_VAR 0 4
4401: PUSH
4402: FOR_TO
4403: IFFALSE 4428
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4405: LD_VAR 0 4
4409: PUSH
4410: LD_VAR 0 3
4414: ARRAY
4415: PPUSH
4416: LD_INT 4
4418: PPUSH
4419: LD_INT 0
4421: PPUSH
4422: CALL_OW 49
4426: GO 4402
4428: POP
4429: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4430: LD_ADDR_VAR 0 4
4434: PUSH
4435: LD_STRING 06_other_apemans
4437: PPUSH
4438: CALL_OW 31
4442: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
4443: LD_VAR 0 4
4447: PUSH
4448: LD_INT 5
4450: PUSH
4451: LD_INT 4
4453: PUSH
4454: LD_INT 3
4456: PUSH
4457: LD_INT 3
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: PUSH
4466: LD_OWVAR 67
4470: ARRAY
4471: GREATEREQUAL
4472: IFFALSE 4505
// j := [ 5 , 4 , 3 , 3 ] [ Difficulty ] else
4474: LD_ADDR_VAR 0 3
4478: PUSH
4479: LD_INT 5
4481: PUSH
4482: LD_INT 4
4484: PUSH
4485: LD_INT 3
4487: PUSH
4488: LD_INT 3
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: PUSH
4497: LD_OWVAR 67
4501: ARRAY
4502: ST_TO_ADDR
4503: GO 4515
// j := other ;
4505: LD_ADDR_VAR 0 3
4509: PUSH
4510: LD_VAR 0 4
4514: ST_TO_ADDR
// for i = 1 to j do
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: DOUBLE
4521: LD_INT 1
4523: DEC
4524: ST_TO_ADDR
4525: LD_VAR 0 3
4529: PUSH
4530: FOR_TO
4531: IFFALSE 4556
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4533: LD_VAR 0 4
4537: PUSH
4538: LD_VAR 0 2
4542: ARRAY
4543: PPUSH
4544: LD_INT 4
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 49
4554: GO 4530
4556: POP
4557: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4558: LD_INT 4
4560: PPUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 21
4573: PUSH
4574: LD_INT 1
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PPUSH
4585: CALL_OW 70
4589: PPUSH
4590: LD_INT 53
4592: PPUSH
4593: LD_INT 19
4595: PPUSH
4596: CALL_OW 111
// firstAttack = 1 ;
4600: LD_ADDR_EXP 33
4604: PUSH
4605: LD_INT 1
4607: ST_TO_ADDR
// end ;
4608: LD_VAR 0 1
4612: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4613: LD_INT 0
4615: PPUSH
4616: PPUSH
4617: PPUSH
4618: PPUSH
4619: PPUSH
4620: PPUSH
4621: PPUSH
4622: PPUSH
4623: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4624: LD_ADDR_VAR 0 8
4628: PUSH
4629: LD_STRING 07_vehicles
4631: PPUSH
4632: EMPTY
4633: PPUSH
4634: CALL_OW 30
4638: ST_TO_ADDR
// macmilan_squad := [ ] ;
4639: LD_ADDR_EXP 42
4643: PUSH
4644: EMPTY
4645: ST_TO_ADDR
// tmp := [ ] ;
4646: LD_ADDR_VAR 0 6
4650: PUSH
4651: EMPTY
4652: ST_TO_ADDR
// tmp_vehs := [ ] ;
4653: LD_ADDR_VAR 0 7
4657: PUSH
4658: EMPTY
4659: ST_TO_ADDR
// uc_side := 1 ;
4660: LD_ADDR_OWVAR 20
4664: PUSH
4665: LD_INT 1
4667: ST_TO_ADDR
// uc_nation := 1 ;
4668: LD_ADDR_OWVAR 21
4672: PUSH
4673: LD_INT 1
4675: ST_TO_ADDR
// if vehicles then
4676: LD_VAR 0 8
4680: IFFALSE 4839
// begin k := 1 ;
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: LD_INT 1
4689: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4690: LD_ADDR_VAR 0 2
4694: PUSH
4695: DOUBLE
4696: LD_INT 1
4698: DEC
4699: ST_TO_ADDR
4700: LD_VAR 0 8
4704: PUSH
4705: LD_INT 4
4707: DIV
4708: PUSH
4709: FOR_TO
4710: IFFALSE 4837
// begin vc_chassis = vehicles [ k ] ;
4712: LD_ADDR_OWVAR 37
4716: PUSH
4717: LD_VAR 0 8
4721: PUSH
4722: LD_VAR 0 3
4726: ARRAY
4727: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4728: LD_ADDR_OWVAR 39
4732: PUSH
4733: LD_VAR 0 8
4737: PUSH
4738: LD_VAR 0 3
4742: PUSH
4743: LD_INT 1
4745: PLUS
4746: ARRAY
4747: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4748: LD_ADDR_OWVAR 38
4752: PUSH
4753: LD_VAR 0 8
4757: PUSH
4758: LD_VAR 0 3
4762: PUSH
4763: LD_INT 2
4765: PLUS
4766: ARRAY
4767: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4768: LD_ADDR_OWVAR 40
4772: PUSH
4773: LD_VAR 0 8
4777: PUSH
4778: LD_VAR 0 3
4782: PUSH
4783: LD_INT 3
4785: PLUS
4786: ARRAY
4787: ST_TO_ADDR
// k := k + 4 ;
4788: LD_ADDR_VAR 0 3
4792: PUSH
4793: LD_VAR 0 3
4797: PUSH
4798: LD_INT 4
4800: PLUS
4801: ST_TO_ADDR
// veh := CreateVehicle ;
4802: LD_ADDR_VAR 0 9
4806: PUSH
4807: CALL_OW 45
4811: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4812: LD_ADDR_VAR 0 7
4816: PUSH
4817: LD_VAR 0 7
4821: PPUSH
4822: LD_INT 1
4824: PPUSH
4825: LD_VAR 0 9
4829: PPUSH
4830: CALL_OW 2
4834: ST_TO_ADDR
// end ;
4835: GO 4709
4837: POP
4838: POP
// end ; JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
4839: LD_ADDR_EXP 1
4843: PUSH
4844: LD_STRING JMM
4846: PPUSH
4847: LD_INT 1
4849: PPUSH
4850: LD_EXP 44
4854: PPUSH
4855: CALL 46272 0 3
4859: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4860: LD_EXP 12
4864: PUSH
4865: LD_INT 1
4867: EQUAL
4868: PUSH
4869: LD_EXP 12
4873: PUSH
4874: LD_INT 3
4876: EQUAL
4877: OR
4878: PUSH
4879: LD_EXP 2
4883: NOT
4884: AND
4885: IFFALSE 4943
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
4887: LD_ADDR_EXP 2
4891: PUSH
4892: LD_STRING Brown
4894: PPUSH
4895: LD_INT 1
4897: PPUSH
4898: LD_EXP 44
4902: PPUSH
4903: CALL 46272 0 3
4907: ST_TO_ADDR
// if Brown then
4908: LD_EXP 2
4912: IFFALSE 4943
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
4914: LD_ADDR_VAR 0 6
4918: PUSH
4919: LD_VAR 0 6
4923: PPUSH
4924: LD_VAR 0 6
4928: PUSH
4929: LD_INT 1
4931: PLUS
4932: PPUSH
4933: LD_EXP 2
4937: PPUSH
4938: CALL_OW 1
4942: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4943: LD_EXP 12
4947: PUSH
4948: LD_INT 2
4950: EQUAL
4951: PUSH
4952: LD_EXP 12
4956: PUSH
4957: LD_INT 3
4959: EQUAL
4960: OR
4961: PUSH
4962: LD_EXP 3
4966: NOT
4967: AND
4968: IFFALSE 5026
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
4970: LD_ADDR_EXP 3
4974: PUSH
4975: LD_STRING Donaldson
4977: PPUSH
4978: LD_INT 1
4980: PPUSH
4981: LD_EXP 44
4985: PPUSH
4986: CALL 46272 0 3
4990: ST_TO_ADDR
// if Donaldson then
4991: LD_EXP 3
4995: IFFALSE 5026
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
4997: LD_ADDR_VAR 0 6
5001: PUSH
5002: LD_VAR 0 6
5006: PPUSH
5007: LD_VAR 0 6
5011: PUSH
5012: LD_INT 1
5014: PLUS
5015: PPUSH
5016: LD_EXP 3
5020: PPUSH
5021: CALL_OW 1
5025: ST_TO_ADDR
// end ; if not Bobby then
5026: LD_EXP 4
5030: NOT
5031: IFFALSE 5089
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
5033: LD_ADDR_EXP 4
5037: PUSH
5038: LD_STRING Bobby
5040: PPUSH
5041: LD_INT 1
5043: PPUSH
5044: LD_EXP 44
5048: PPUSH
5049: CALL 46272 0 3
5053: ST_TO_ADDR
// if Bobby then
5054: LD_EXP 4
5058: IFFALSE 5089
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5060: LD_ADDR_VAR 0 6
5064: PUSH
5065: LD_VAR 0 6
5069: PPUSH
5070: LD_VAR 0 6
5074: PUSH
5075: LD_INT 1
5077: PLUS
5078: PPUSH
5079: LD_EXP 4
5083: PPUSH
5084: CALL_OW 1
5088: ST_TO_ADDR
// end ; if not Cyrus then
5089: LD_EXP 5
5093: NOT
5094: IFFALSE 5152
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
5096: LD_ADDR_EXP 5
5100: PUSH
5101: LD_STRING Cyrus
5103: PPUSH
5104: LD_INT 1
5106: PPUSH
5107: LD_EXP 44
5111: PPUSH
5112: CALL 46272 0 3
5116: ST_TO_ADDR
// if Cyrus then
5117: LD_EXP 5
5121: IFFALSE 5152
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5123: LD_ADDR_VAR 0 6
5127: PUSH
5128: LD_VAR 0 6
5132: PPUSH
5133: LD_VAR 0 6
5137: PUSH
5138: LD_INT 1
5140: PLUS
5141: PPUSH
5142: LD_EXP 5
5146: PPUSH
5147: CALL_OW 1
5151: ST_TO_ADDR
// end ; if not Lisa then
5152: LD_EXP 6
5156: NOT
5157: IFFALSE 5215
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
5159: LD_ADDR_EXP 6
5163: PUSH
5164: LD_STRING Lisa
5166: PPUSH
5167: LD_INT 1
5169: PPUSH
5170: LD_EXP 44
5174: PPUSH
5175: CALL 46272 0 3
5179: ST_TO_ADDR
// if Lisa then
5180: LD_EXP 6
5184: IFFALSE 5215
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5186: LD_ADDR_VAR 0 6
5190: PUSH
5191: LD_VAR 0 6
5195: PPUSH
5196: LD_VAR 0 6
5200: PUSH
5201: LD_INT 1
5203: PLUS
5204: PPUSH
5205: LD_EXP 6
5209: PPUSH
5210: CALL_OW 1
5214: ST_TO_ADDR
// end ; if not Frank then
5215: LD_EXP 7
5219: NOT
5220: IFFALSE 5278
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
5222: LD_ADDR_EXP 7
5226: PUSH
5227: LD_STRING Frank
5229: PPUSH
5230: LD_INT 1
5232: PPUSH
5233: LD_EXP 44
5237: PPUSH
5238: CALL 46272 0 3
5242: ST_TO_ADDR
// if Frank then
5243: LD_EXP 7
5247: IFFALSE 5278
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5249: LD_ADDR_VAR 0 6
5253: PUSH
5254: LD_VAR 0 6
5258: PPUSH
5259: LD_VAR 0 6
5263: PUSH
5264: LD_INT 1
5266: PLUS
5267: PPUSH
5268: LD_EXP 7
5272: PPUSH
5273: CALL_OW 1
5277: ST_TO_ADDR
// end ; if not Kikuchi then
5278: LD_EXP 9
5282: NOT
5283: IFFALSE 5341
// begin Kikuchi = PrepareUnit ( Kikuchi , true , mission_prefix_prev ) ;
5285: LD_ADDR_EXP 9
5289: PUSH
5290: LD_STRING Kikuchi
5292: PPUSH
5293: LD_INT 1
5295: PPUSH
5296: LD_EXP 44
5300: PPUSH
5301: CALL 46272 0 3
5305: ST_TO_ADDR
// if Kikuchi then
5306: LD_EXP 9
5310: IFFALSE 5341
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5312: LD_ADDR_VAR 0 6
5316: PUSH
5317: LD_VAR 0 6
5321: PPUSH
5322: LD_VAR 0 6
5326: PUSH
5327: LD_INT 1
5329: PLUS
5330: PPUSH
5331: LD_EXP 9
5335: PPUSH
5336: CALL_OW 1
5340: ST_TO_ADDR
// end ; if not Gladstone then
5341: LD_EXP 8
5345: NOT
5346: IFFALSE 5404
// begin Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
5348: LD_ADDR_EXP 8
5352: PUSH
5353: LD_STRING Gladstone
5355: PPUSH
5356: LD_INT 1
5358: PPUSH
5359: LD_EXP 44
5363: PPUSH
5364: CALL 46272 0 3
5368: ST_TO_ADDR
// if Gladstone then
5369: LD_EXP 8
5373: IFFALSE 5404
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5375: LD_ADDR_VAR 0 6
5379: PUSH
5380: LD_VAR 0 6
5384: PPUSH
5385: LD_VAR 0 6
5389: PUSH
5390: LD_INT 1
5392: PLUS
5393: PPUSH
5394: LD_EXP 8
5398: PPUSH
5399: CALL_OW 1
5403: ST_TO_ADDR
// end ; if not Khatam then
5404: LD_EXP 10
5408: NOT
5409: IFFALSE 5467
// begin Khatam = PrepareUnit ( Khatam , true , mission_prefix_prev ) ;
5411: LD_ADDR_EXP 10
5415: PUSH
5416: LD_STRING Khatam
5418: PPUSH
5419: LD_INT 1
5421: PPUSH
5422: LD_EXP 44
5426: PPUSH
5427: CALL 46272 0 3
5431: ST_TO_ADDR
// if Khatam then
5432: LD_EXP 10
5436: IFFALSE 5467
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5438: LD_ADDR_VAR 0 6
5442: PUSH
5443: LD_VAR 0 6
5447: PPUSH
5448: LD_VAR 0 6
5452: PUSH
5453: LD_INT 1
5455: PLUS
5456: PPUSH
5457: LD_EXP 10
5461: PPUSH
5462: CALL_OW 1
5466: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5467: LD_ADDR_VAR 0 5
5471: PUSH
5472: LD_STRING 07c_others
5474: PPUSH
5475: CALL_OW 31
5479: ST_TO_ADDR
// macmilan_squad := others ;
5480: LD_ADDR_EXP 42
5484: PUSH
5485: LD_VAR 0 5
5489: ST_TO_ADDR
// if others then
5490: LD_VAR 0 5
5494: IFFALSE 5582
// for i in others do
5496: LD_ADDR_VAR 0 2
5500: PUSH
5501: LD_VAR 0 5
5505: PUSH
5506: FOR_IN
5507: IFFALSE 5580
// if GetClass ( i ) = 3 then
5509: LD_VAR 0 2
5513: PPUSH
5514: CALL_OW 257
5518: PUSH
5519: LD_INT 3
5521: EQUAL
5522: IFFALSE 5549
// tmp := Insert ( tmp , 1 , i ) else
5524: LD_ADDR_VAR 0 6
5528: PUSH
5529: LD_VAR 0 6
5533: PPUSH
5534: LD_INT 1
5536: PPUSH
5537: LD_VAR 0 2
5541: PPUSH
5542: CALL_OW 2
5546: ST_TO_ADDR
5547: GO 5578
// tmp := Replace ( tmp , tmp + 1 , i ) ;
5549: LD_ADDR_VAR 0 6
5553: PUSH
5554: LD_VAR 0 6
5558: PPUSH
5559: LD_VAR 0 6
5563: PUSH
5564: LD_INT 1
5566: PLUS
5567: PPUSH
5568: LD_VAR 0 2
5572: PPUSH
5573: CALL_OW 1
5577: ST_TO_ADDR
5578: GO 5506
5580: POP
5581: POP
// if FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) then
5582: LD_INT 4
5584: PPUSH
5585: LD_INT 21
5587: PUSH
5588: LD_INT 3
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PPUSH
5595: CALL_OW 70
5599: IFFALSE 5640
// for i in FilterUnitsInArea ( GammaSupport , [ f_type , unit_building ] ) do
5601: LD_ADDR_VAR 0 2
5605: PUSH
5606: LD_INT 4
5608: PPUSH
5609: LD_INT 21
5611: PUSH
5612: LD_INT 3
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PPUSH
5619: CALL_OW 70
5623: PUSH
5624: FOR_IN
5625: IFFALSE 5638
// RemoveUnit ( i ) ;
5627: LD_VAR 0 2
5631: PPUSH
5632: CALL_OW 64
5636: GO 5624
5638: POP
5639: POP
// wait ( 0 0$1 ) ;
5640: LD_INT 35
5642: PPUSH
5643: CALL_OW 67
// if tmp then
5647: LD_VAR 0 6
5651: IFFALSE 5836
// begin for i in tmp do
5653: LD_ADDR_VAR 0 2
5657: PUSH
5658: LD_VAR 0 6
5662: PUSH
5663: FOR_IN
5664: IFFALSE 5834
// begin SetDir ( i , 3 ) ;
5666: LD_VAR 0 2
5670: PPUSH
5671: LD_INT 3
5673: PPUSH
5674: CALL_OW 233
// if tmp_vehs then
5678: LD_VAR 0 7
5682: IFFALSE 5760
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5684: LD_VAR 0 7
5688: PUSH
5689: LD_INT 1
5691: ARRAY
5692: PPUSH
5693: LD_INT 3
5695: PPUSH
5696: CALL_OW 233
// PlaceUnitXY ( tmp_vehs [ 1 ] , 78 , 5 , false ) ;
5700: LD_VAR 0 7
5704: PUSH
5705: LD_INT 1
5707: ARRAY
5708: PPUSH
5709: LD_INT 78
5711: PPUSH
5712: LD_INT 5
5714: PPUSH
5715: LD_INT 0
5717: PPUSH
5718: CALL_OW 48
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5722: LD_VAR 0 2
5726: PPUSH
5727: LD_VAR 0 7
5731: PUSH
5732: LD_INT 1
5734: ARRAY
5735: PPUSH
5736: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5740: LD_ADDR_VAR 0 7
5744: PUSH
5745: LD_VAR 0 7
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: CALL_OW 3
5757: ST_TO_ADDR
// end else
5758: GO 5775
// PlaceUnitArea ( i , GammaSupport , false ) ;
5760: LD_VAR 0 2
5764: PPUSH
5765: LD_INT 4
5767: PPUSH
5768: LD_INT 0
5770: PPUSH
5771: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5775: LD_VAR 0 2
5779: PPUSH
5780: LD_INT 77
5782: PPUSH
5783: LD_INT 16
5785: PPUSH
5786: CALL_OW 111
// AddComMoveXY ( i , 65 , 24 ) ;
5790: LD_VAR 0 2
5794: PPUSH
5795: LD_INT 65
5797: PPUSH
5798: LD_INT 24
5800: PPUSH
5801: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5805: LD_INT 35
5807: PPUSH
5808: CALL_OW 67
// until not FilterUnitsInArea ( GammaSupport , [ f_side , 1 ] ) ;
5812: LD_INT 4
5814: PPUSH
5815: LD_INT 22
5817: PUSH
5818: LD_INT 1
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: PPUSH
5825: CALL_OW 70
5829: NOT
5830: IFFALSE 5805
// end ;
5832: GO 5663
5834: POP
5835: POP
// end ; PlaceUnitArea ( JMM , GammaSupport , false ) ;
5836: LD_EXP 1
5840: PPUSH
5841: LD_INT 4
5843: PPUSH
5844: LD_INT 0
5846: PPUSH
5847: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5851: LD_EXP 1
5855: PPUSH
5856: LD_INT 77
5858: PPUSH
5859: LD_INT 16
5861: PPUSH
5862: CALL_OW 111
// end ;
5866: LD_VAR 0 1
5870: RET
// export function PrepareSikorsky ; begin
5871: LD_INT 0
5873: PPUSH
// uc_side = 4 ;
5874: LD_ADDR_OWVAR 20
5878: PUSH
5879: LD_INT 4
5881: ST_TO_ADDR
// uc_nation = 1 ;
5882: LD_ADDR_OWVAR 21
5886: PUSH
5887: LD_INT 1
5889: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ,  ) ;
5890: LD_ADDR_EXP 16
5894: PUSH
5895: LD_STRING Sikorski
5897: PPUSH
5898: LD_INT 0
5900: PPUSH
5901: LD_STRING 
5903: PPUSH
5904: CALL 46272 0 3
5908: ST_TO_ADDR
// vc_engine = 1 ;
5909: LD_ADDR_OWVAR 39
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// vc_control = 1 ;
5917: LD_ADDR_OWVAR 38
5921: PUSH
5922: LD_INT 1
5924: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 , 4 ] [ Difficulty ] ;
5925: LD_ADDR_OWVAR 40
5929: PUSH
5930: LD_INT 5
5932: PUSH
5933: LD_INT 3
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 4
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: PUSH
5948: LD_OWVAR 67
5952: ARRAY
5953: ST_TO_ADDR
// vc_chassis = 4 ;
5954: LD_ADDR_OWVAR 37
5958: PUSH
5959: LD_INT 4
5961: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5962: LD_ADDR_EXP 17
5966: PUSH
5967: CALL_OW 45
5971: ST_TO_ADDR
// SetDir ( SikorskyTank , 3 ) ;
5972: LD_EXP 17
5976: PPUSH
5977: LD_INT 3
5979: PPUSH
5980: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
5984: LD_INT 35
5986: PPUSH
5987: CALL_OW 67
// PlaceUnitXY ( SikorskyTank , 18 , 5 , false ) ;
5991: LD_EXP 17
5995: PPUSH
5996: LD_INT 18
5998: PPUSH
5999: LD_INT 5
6001: PPUSH
6002: LD_INT 0
6004: PPUSH
6005: CALL_OW 48
// until IsPlaced ( SikorskyTank ) ;
6009: LD_EXP 17
6013: PPUSH
6014: CALL_OW 305
6018: IFFALSE 5984
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
6020: LD_EXP 16
6024: PPUSH
6025: LD_EXP 17
6029: PPUSH
6030: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
6034: LD_EXP 17
6038: PPUSH
6039: LD_INT 5
6041: PPUSH
6042: CALL_OW 113
// end ;
6046: LD_VAR 0 1
6050: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
6051: LD_INT 0
6053: PPUSH
6054: PPUSH
6055: PPUSH
6056: PPUSH
// InitHc ;
6057: CALL_OW 19
// for i = 1 to [ 5 , 4 , 4 , 3 ] [ Difficulty ] do
6061: LD_ADDR_VAR 0 2
6065: PUSH
6066: DOUBLE
6067: LD_INT 1
6069: DEC
6070: ST_TO_ADDR
6071: LD_INT 5
6073: PUSH
6074: LD_INT 4
6076: PUSH
6077: LD_INT 4
6079: PUSH
6080: LD_INT 3
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: PUSH
6089: LD_OWVAR 67
6093: ARRAY
6094: PUSH
6095: FOR_TO
6096: IFFALSE 6212
// begin uc_side = 4 ;
6098: LD_ADDR_OWVAR 20
6102: PUSH
6103: LD_INT 4
6105: ST_TO_ADDR
// uc_nation = 1 ;
6106: LD_ADDR_OWVAR 21
6110: PUSH
6111: LD_INT 1
6113: ST_TO_ADDR
// hc_name =  ;
6114: LD_ADDR_OWVAR 26
6118: PUSH
6119: LD_STRING 
6121: ST_TO_ADDR
// hc_gallery =  ;
6122: LD_ADDR_OWVAR 33
6126: PUSH
6127: LD_STRING 
6129: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
6130: LD_INT 0
6132: PPUSH
6133: LD_INT 1
6135: PPUSH
6136: LD_INT 5
6138: PPUSH
6139: LD_INT 8
6141: PPUSH
6142: CALL_OW 12
6146: PPUSH
6147: CALL_OW 380
// un = CreateHuman ;
6151: LD_ADDR_VAR 0 3
6155: PUSH
6156: CALL_OW 44
6160: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6161: LD_VAR 0 3
6165: PPUSH
6166: LD_INT 3
6168: PPUSH
6169: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6173: LD_VAR 0 3
6177: PPUSH
6178: LD_INT 9
6180: PPUSH
6181: LD_INT 0
6183: PPUSH
6184: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6188: LD_VAR 0 3
6192: PPUSH
6193: LD_INT 53
6195: PPUSH
6196: LD_INT 23
6198: PPUSH
6199: CALL_OW 111
// wait ( 0 0$1 ) ;
6203: LD_INT 35
6205: PPUSH
6206: CALL_OW 67
// end ;
6210: GO 6095
6212: POP
6213: POP
// for i = 1 to 2 do
6214: LD_ADDR_VAR 0 2
6218: PUSH
6219: DOUBLE
6220: LD_INT 1
6222: DEC
6223: ST_TO_ADDR
6224: LD_INT 2
6226: PUSH
6227: FOR_TO
6228: IFFALSE 6344
// begin uc_side = 4 ;
6230: LD_ADDR_OWVAR 20
6234: PUSH
6235: LD_INT 4
6237: ST_TO_ADDR
// uc_nation = 1 ;
6238: LD_ADDR_OWVAR 21
6242: PUSH
6243: LD_INT 1
6245: ST_TO_ADDR
// hc_name =  ;
6246: LD_ADDR_OWVAR 26
6250: PUSH
6251: LD_STRING 
6253: ST_TO_ADDR
// hc_gallery =  ;
6254: LD_ADDR_OWVAR 33
6258: PUSH
6259: LD_STRING 
6261: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
6262: LD_INT 0
6264: PPUSH
6265: LD_INT 4
6267: PPUSH
6268: LD_INT 5
6270: PPUSH
6271: LD_INT 8
6273: PPUSH
6274: CALL_OW 12
6278: PPUSH
6279: CALL_OW 380
// un = CreateHuman ;
6283: LD_ADDR_VAR 0 3
6287: PUSH
6288: CALL_OW 44
6292: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6293: LD_VAR 0 3
6297: PPUSH
6298: LD_INT 3
6300: PPUSH
6301: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6305: LD_VAR 0 3
6309: PPUSH
6310: LD_INT 9
6312: PPUSH
6313: LD_INT 0
6315: PPUSH
6316: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6320: LD_VAR 0 3
6324: PPUSH
6325: LD_INT 53
6327: PPUSH
6328: LD_INT 23
6330: PPUSH
6331: CALL_OW 111
// wait ( 0 0$1 ) ;
6335: LD_INT 35
6337: PPUSH
6338: CALL_OW 67
// end ;
6342: GO 6227
6344: POP
6345: POP
// for i = 1 to [ 5 , 5 , 4 , 3 ] [ Difficulty ] do
6346: LD_ADDR_VAR 0 2
6350: PUSH
6351: DOUBLE
6352: LD_INT 1
6354: DEC
6355: ST_TO_ADDR
6356: LD_INT 5
6358: PUSH
6359: LD_INT 5
6361: PUSH
6362: LD_INT 4
6364: PUSH
6365: LD_INT 3
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: PUSH
6374: LD_OWVAR 67
6378: ARRAY
6379: PUSH
6380: FOR_TO
6381: IFFALSE 6615
// begin uc_side = 4 ;
6383: LD_ADDR_OWVAR 20
6387: PUSH
6388: LD_INT 4
6390: ST_TO_ADDR
// uc_nation = 1 ;
6391: LD_ADDR_OWVAR 21
6395: PUSH
6396: LD_INT 1
6398: ST_TO_ADDR
// vc_engine = 1 ;
6399: LD_ADDR_OWVAR 39
6403: PUSH
6404: LD_INT 1
6406: ST_TO_ADDR
// vc_control = 1 ;
6407: LD_ADDR_OWVAR 38
6411: PUSH
6412: LD_INT 1
6414: ST_TO_ADDR
// vc_weapon = [ 7 , 4 , 5 , 6 ] [ i mod 4 + 1 ] ;
6415: LD_ADDR_OWVAR 40
6419: PUSH
6420: LD_INT 7
6422: PUSH
6423: LD_INT 4
6425: PUSH
6426: LD_INT 5
6428: PUSH
6429: LD_INT 6
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: PUSH
6438: LD_VAR 0 2
6442: PUSH
6443: LD_INT 4
6445: MOD
6446: PUSH
6447: LD_INT 1
6449: PLUS
6450: ARRAY
6451: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6452: LD_ADDR_OWVAR 37
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: LD_INT 3
6462: PUSH
6463: LD_INT 4
6465: PUSH
6466: LD_INT 4
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_VAR 0 2
6479: PUSH
6480: LD_INT 4
6482: MOD
6483: PUSH
6484: LD_INT 1
6486: PLUS
6487: ARRAY
6488: ST_TO_ADDR
// veh = CreateVehicle ;
6489: LD_ADDR_VAR 0 4
6493: PUSH
6494: CALL_OW 45
6498: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6499: LD_VAR 0 4
6503: PPUSH
6504: LD_INT 3
6506: PPUSH
6507: CALL_OW 233
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: LD_INT 9
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// InitHc ;
6526: CALL_OW 19
// hc_name =  ;
6530: LD_ADDR_OWVAR 26
6534: PUSH
6535: LD_STRING 
6537: ST_TO_ADDR
// hc_gallery =  ;
6538: LD_ADDR_OWVAR 33
6542: PUSH
6543: LD_STRING 
6545: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6546: LD_INT 0
6548: PPUSH
6549: LD_INT 3
6551: PPUSH
6552: LD_INT 5
6554: PPUSH
6555: LD_INT 8
6557: PPUSH
6558: CALL_OW 12
6562: PPUSH
6563: CALL_OW 380
// un = CreateHuman ;
6567: LD_ADDR_VAR 0 3
6571: PUSH
6572: CALL_OW 44
6576: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6577: LD_VAR 0 3
6581: PPUSH
6582: LD_VAR 0 4
6586: PPUSH
6587: CALL_OW 52
// ComMoveXY ( un , 53 , 23 ) ;
6591: LD_VAR 0 3
6595: PPUSH
6596: LD_INT 53
6598: PPUSH
6599: LD_INT 23
6601: PPUSH
6602: CALL_OW 111
// wait ( 0 0$5 ) ;
6606: LD_INT 175
6608: PPUSH
6609: CALL_OW 67
// end ;
6613: GO 6380
6615: POP
6616: POP
// end ; end_of_file
6617: LD_VAR 0 1
6621: RET
// export function PrepareRussianCommander ; begin
6622: LD_INT 0
6624: PPUSH
// uc_side = 3 ;
6625: LD_ADDR_OWVAR 20
6629: PUSH
6630: LD_INT 3
6632: ST_TO_ADDR
// uc_nation = 3 ;
6633: LD_ADDR_OWVAR 21
6637: PUSH
6638: LD_INT 3
6640: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6641: LD_ADDR_EXP 24
6645: PUSH
6646: LD_STRING Borodin
6648: PPUSH
6649: CALL_OW 25
6653: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6654: LD_EXP 24
6658: PPUSH
6659: LD_INT 25
6661: PPUSH
6662: LD_INT 0
6664: PPUSH
6665: CALL_OW 49
// end ;
6669: LD_VAR 0 1
6673: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6674: LD_INT 0
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
// for i = 1 to 10 do
6680: LD_ADDR_VAR 0 2
6684: PUSH
6685: DOUBLE
6686: LD_INT 1
6688: DEC
6689: ST_TO_ADDR
6690: LD_INT 10
6692: PUSH
6693: FOR_TO
6694: IFFALSE 6768
// begin uc_side = 6 ;
6696: LD_ADDR_OWVAR 20
6700: PUSH
6701: LD_INT 6
6703: ST_TO_ADDR
// uc_nation = 3 ;
6704: LD_ADDR_OWVAR 21
6708: PUSH
6709: LD_INT 3
6711: ST_TO_ADDR
// hc_gallery =  ;
6712: LD_ADDR_OWVAR 33
6716: PUSH
6717: LD_STRING 
6719: ST_TO_ADDR
// hc_name =  ;
6720: LD_ADDR_OWVAR 26
6724: PUSH
6725: LD_STRING 
6727: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6728: LD_INT 0
6730: PPUSH
6731: LD_INT 1
6733: PPUSH
6734: LD_INT 3
6736: PPUSH
6737: CALL_OW 380
// un = CreateHuman ;
6741: LD_ADDR_VAR 0 3
6745: PUSH
6746: CALL_OW 44
6750: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6751: LD_VAR 0 3
6755: PPUSH
6756: LD_INT 1
6758: PPUSH
6759: LD_INT 0
6761: PPUSH
6762: CALL_OW 49
// end ;
6766: GO 6693
6768: POP
6769: POP
// for i = 1 to 3 do
6770: LD_ADDR_VAR 0 2
6774: PUSH
6775: DOUBLE
6776: LD_INT 1
6778: DEC
6779: ST_TO_ADDR
6780: LD_INT 3
6782: PUSH
6783: FOR_TO
6784: IFFALSE 6933
// begin uc_side = 6 ;
6786: LD_ADDR_OWVAR 20
6790: PUSH
6791: LD_INT 6
6793: ST_TO_ADDR
// uc_nation = 3 ;
6794: LD_ADDR_OWVAR 21
6798: PUSH
6799: LD_INT 3
6801: ST_TO_ADDR
// vc_engine = 1 ;
6802: LD_ADDR_OWVAR 39
6806: PUSH
6807: LD_INT 1
6809: ST_TO_ADDR
// vc_control = 1 ;
6810: LD_ADDR_OWVAR 38
6814: PUSH
6815: LD_INT 1
6817: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6818: LD_ADDR_OWVAR 40
6822: PUSH
6823: LD_INT 43
6825: PUSH
6826: LD_INT 44
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 1
6835: PPUSH
6836: LD_INT 2
6838: PPUSH
6839: CALL_OW 12
6843: ARRAY
6844: ST_TO_ADDR
// vc_chassis = 22 ;
6845: LD_ADDR_OWVAR 37
6849: PUSH
6850: LD_INT 22
6852: ST_TO_ADDR
// veh = CreateVehicle ;
6853: LD_ADDR_VAR 0 4
6857: PUSH
6858: CALL_OW 45
6862: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6863: LD_VAR 0 4
6867: PPUSH
6868: LD_INT 2
6870: PPUSH
6871: LD_INT 0
6873: PPUSH
6874: CALL_OW 49
// hc_gallery =  ;
6878: LD_ADDR_OWVAR 33
6882: PUSH
6883: LD_STRING 
6885: ST_TO_ADDR
// hc_name =  ;
6886: LD_ADDR_OWVAR 26
6890: PUSH
6891: LD_STRING 
6893: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6894: LD_INT 0
6896: PPUSH
6897: LD_INT 3
6899: PPUSH
6900: LD_INT 4
6902: PPUSH
6903: CALL_OW 380
// un = CreateHuman ;
6907: LD_ADDR_VAR 0 3
6911: PUSH
6912: CALL_OW 44
6916: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6917: LD_VAR 0 3
6921: PPUSH
6922: LD_VAR 0 4
6926: PPUSH
6927: CALL_OW 52
// end ;
6931: GO 6783
6933: POP
6934: POP
// end ;
6935: LD_VAR 0 1
6939: RET
// export function PrepareRussians ; var i , un ; begin
6940: LD_INT 0
6942: PPUSH
6943: PPUSH
6944: PPUSH
// for i = 1 to 8 do
6945: LD_ADDR_VAR 0 2
6949: PUSH
6950: DOUBLE
6951: LD_INT 1
6953: DEC
6954: ST_TO_ADDR
6955: LD_INT 8
6957: PUSH
6958: FOR_TO
6959: IFFALSE 7045
// begin uc_side = 3 ;
6961: LD_ADDR_OWVAR 20
6965: PUSH
6966: LD_INT 3
6968: ST_TO_ADDR
// uc_nation = 3 ;
6969: LD_ADDR_OWVAR 21
6973: PUSH
6974: LD_INT 3
6976: ST_TO_ADDR
// hc_gallery =  ;
6977: LD_ADDR_OWVAR 33
6981: PUSH
6982: LD_STRING 
6984: ST_TO_ADDR
// hc_name =  ;
6985: LD_ADDR_OWVAR 26
6989: PUSH
6990: LD_STRING 
6992: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6993: LD_INT 0
6995: PPUSH
6996: LD_INT 1
6998: PPUSH
6999: LD_EXP 25
7003: PPUSH
7004: LD_EXP 26
7008: PPUSH
7009: CALL_OW 12
7013: PPUSH
7014: CALL_OW 380
// un = CreateHuman ;
7018: LD_ADDR_VAR 0 3
7022: PUSH
7023: CALL_OW 44
7027: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7028: LD_VAR 0 3
7032: PPUSH
7033: LD_INT 3
7035: PPUSH
7036: LD_INT 0
7038: PPUSH
7039: CALL_OW 49
// end ;
7043: GO 6958
7045: POP
7046: POP
// for i = 1 to 4 do
7047: LD_ADDR_VAR 0 2
7051: PUSH
7052: DOUBLE
7053: LD_INT 1
7055: DEC
7056: ST_TO_ADDR
7057: LD_INT 4
7059: PUSH
7060: FOR_TO
7061: IFFALSE 7147
// begin uc_side = 3 ;
7063: LD_ADDR_OWVAR 20
7067: PUSH
7068: LD_INT 3
7070: ST_TO_ADDR
// uc_nation = 3 ;
7071: LD_ADDR_OWVAR 21
7075: PUSH
7076: LD_INT 3
7078: ST_TO_ADDR
// hc_gallery =  ;
7079: LD_ADDR_OWVAR 33
7083: PUSH
7084: LD_STRING 
7086: ST_TO_ADDR
// hc_name =  ;
7087: LD_ADDR_OWVAR 26
7091: PUSH
7092: LD_STRING 
7094: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7095: LD_INT 0
7097: PPUSH
7098: LD_INT 2
7100: PPUSH
7101: LD_EXP 25
7105: PPUSH
7106: LD_EXP 26
7110: PPUSH
7111: CALL_OW 12
7115: PPUSH
7116: CALL_OW 380
// un = CreateHuman ;
7120: LD_ADDR_VAR 0 3
7124: PUSH
7125: CALL_OW 44
7129: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7130: LD_VAR 0 3
7134: PPUSH
7135: LD_INT 3
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7060
7147: POP
7148: POP
// for i = 1 to 3 do
7149: LD_ADDR_VAR 0 2
7153: PUSH
7154: DOUBLE
7155: LD_INT 1
7157: DEC
7158: ST_TO_ADDR
7159: LD_INT 3
7161: PUSH
7162: FOR_TO
7163: IFFALSE 7249
// begin uc_side = 3 ;
7165: LD_ADDR_OWVAR 20
7169: PUSH
7170: LD_INT 3
7172: ST_TO_ADDR
// uc_nation = 3 ;
7173: LD_ADDR_OWVAR 21
7177: PUSH
7178: LD_INT 3
7180: ST_TO_ADDR
// hc_gallery =  ;
7181: LD_ADDR_OWVAR 33
7185: PUSH
7186: LD_STRING 
7188: ST_TO_ADDR
// hc_name =  ;
7189: LD_ADDR_OWVAR 26
7193: PUSH
7194: LD_STRING 
7196: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7197: LD_INT 0
7199: PPUSH
7200: LD_INT 3
7202: PPUSH
7203: LD_EXP 25
7207: PPUSH
7208: LD_EXP 26
7212: PPUSH
7213: CALL_OW 12
7217: PPUSH
7218: CALL_OW 380
// un = CreateHuman ;
7222: LD_ADDR_VAR 0 3
7226: PUSH
7227: CALL_OW 44
7231: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7232: LD_VAR 0 3
7236: PPUSH
7237: LD_INT 3
7239: PPUSH
7240: LD_INT 0
7242: PPUSH
7243: CALL_OW 49
// end ;
7247: GO 7162
7249: POP
7250: POP
// for i = 1 to 2 do
7251: LD_ADDR_VAR 0 2
7255: PUSH
7256: DOUBLE
7257: LD_INT 1
7259: DEC
7260: ST_TO_ADDR
7261: LD_INT 2
7263: PUSH
7264: FOR_TO
7265: IFFALSE 7351
// begin uc_side = 3 ;
7267: LD_ADDR_OWVAR 20
7271: PUSH
7272: LD_INT 3
7274: ST_TO_ADDR
// uc_nation = 3 ;
7275: LD_ADDR_OWVAR 21
7279: PUSH
7280: LD_INT 3
7282: ST_TO_ADDR
// hc_gallery =  ;
7283: LD_ADDR_OWVAR 33
7287: PUSH
7288: LD_STRING 
7290: ST_TO_ADDR
// hc_name =  ;
7291: LD_ADDR_OWVAR 26
7295: PUSH
7296: LD_STRING 
7298: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
7299: LD_INT 0
7301: PPUSH
7302: LD_INT 4
7304: PPUSH
7305: LD_EXP 25
7309: PPUSH
7310: LD_EXP 26
7314: PPUSH
7315: CALL_OW 12
7319: PPUSH
7320: CALL_OW 380
// un = CreateHuman ;
7324: LD_ADDR_VAR 0 3
7328: PUSH
7329: CALL_OW 44
7333: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7334: LD_VAR 0 3
7338: PPUSH
7339: LD_INT 3
7341: PPUSH
7342: LD_INT 0
7344: PPUSH
7345: CALL_OW 49
// end ;
7349: GO 7264
7351: POP
7352: POP
// end ; end_of_file
7353: LD_VAR 0 1
7357: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7358: LD_INT 0
7360: PPUSH
7361: PPUSH
7362: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7363: LD_ADDR_VAR 0 1
7367: PUSH
7368: LD_VAR 0 1
7372: PUSH
7373: LD_EXP 1
7377: PUSH
7378: LD_EXP 2
7382: PUSH
7383: LD_EXP 3
7387: PUSH
7388: LD_EXP 4
7392: PUSH
7393: LD_EXP 5
7397: PUSH
7398: LD_EXP 6
7402: PUSH
7403: LD_EXP 7
7407: PUSH
7408: LD_EXP 8
7412: PUSH
7413: LD_EXP 9
7417: PUSH
7418: LD_EXP 10
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: DIFF
7435: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7436: LD_ADDR_VAR 0 6
7440: PUSH
7441: LD_VAR 0 1
7445: PUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_VAR 0 1
7453: PPUSH
7454: CALL_OW 12
7458: ARRAY
7459: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7460: LD_VAR 0 6
7464: PPUSH
7465: CALL_OW 258
7469: PUSH
7470: LD_INT 1
7472: EQUAL
7473: IFFALSE 7491
// Say ( speaker , dialogMID ) else
7475: LD_VAR 0 6
7479: PPUSH
7480: LD_VAR 0 2
7484: PPUSH
7485: CALL_OW 88
7489: GO 7505
// Say ( speaker , dialogFID ) ;
7491: LD_VAR 0 6
7495: PPUSH
7496: LD_VAR 0 3
7500: PPUSH
7501: CALL_OW 88
// result := speaker ;
7505: LD_ADDR_VAR 0 4
7509: PUSH
7510: LD_VAR 0 6
7514: ST_TO_ADDR
// end ;
7515: LD_VAR 0 4
7519: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7520: LD_INT 0
7522: PPUSH
7523: PPUSH
7524: PPUSH
// uc_side := GetSide ( b ) ;
7525: LD_ADDR_OWVAR 20
7529: PUSH
7530: LD_VAR 0 2
7534: PPUSH
7535: CALL_OW 255
7539: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7540: LD_ADDR_OWVAR 21
7544: PUSH
7545: LD_VAR 0 2
7549: PPUSH
7550: CALL_OW 248
7554: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7555: LD_INT 0
7557: PPUSH
7558: LD_INT 1
7560: PPUSH
7561: LD_VAR 0 1
7565: PPUSH
7566: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7570: LD_ADDR_VAR 0 5
7574: PUSH
7575: LD_VAR 0 2
7579: PPUSH
7580: CALL_OW 254
7584: PUSH
7585: LD_INT 3
7587: MINUS
7588: ST_TO_ADDR
// if dir < 0 then
7589: LD_VAR 0 5
7593: PUSH
7594: LD_INT 0
7596: LESS
7597: IFFALSE 7613
// dir := 6 + dir ;
7599: LD_ADDR_VAR 0 5
7603: PUSH
7604: LD_INT 6
7606: PUSH
7607: LD_VAR 0 5
7611: PLUS
7612: ST_TO_ADDR
// un := CreateHuman ;
7613: LD_ADDR_VAR 0 4
7617: PUSH
7618: CALL_OW 44
7622: ST_TO_ADDR
// SetDir ( un , dir ) ;
7623: LD_VAR 0 4
7627: PPUSH
7628: LD_VAR 0 5
7632: PPUSH
7633: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7637: LD_VAR 0 4
7641: PPUSH
7642: LD_VAR 0 2
7646: PPUSH
7647: CALL_OW 52
// end ;
7651: LD_VAR 0 3
7655: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7656: LD_INT 0
7658: PPUSH
7659: PPUSH
7660: PPUSH
7661: PPUSH
// for i = 1 to count do
7662: LD_ADDR_VAR 0 8
7666: PUSH
7667: DOUBLE
7668: LD_INT 1
7670: DEC
7671: ST_TO_ADDR
7672: LD_VAR 0 6
7676: PUSH
7677: FOR_TO
7678: IFFALSE 7759
// begin uc_side = side ;
7680: LD_ADDR_OWVAR 20
7684: PUSH
7685: LD_VAR 0 1
7689: ST_TO_ADDR
// uc_nation = nation ;
7690: LD_ADDR_OWVAR 21
7694: PUSH
7695: LD_VAR 0 2
7699: ST_TO_ADDR
// hc_gallery =  ;
7700: LD_ADDR_OWVAR 33
7704: PUSH
7705: LD_STRING 
7707: ST_TO_ADDR
// hc_name =  ;
7708: LD_ADDR_OWVAR 26
7712: PUSH
7713: LD_STRING 
7715: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7716: LD_INT 0
7718: PPUSH
7719: LD_VAR 0 5
7723: PPUSH
7724: LD_VAR 0 4
7728: PPUSH
7729: CALL_OW 380
// un = CreateHuman ;
7733: LD_ADDR_VAR 0 10
7737: PUSH
7738: CALL_OW 44
7742: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7743: LD_VAR 0 10
7747: PPUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: CALL_OW 52
// end ;
7757: GO 7677
7759: POP
7760: POP
// end ;
7761: LD_VAR 0 7
7765: RET
// export function PrepareDifficulty ; begin
7766: LD_INT 0
7768: PPUSH
// case Difficulty of 1 :
7769: LD_OWVAR 67
7773: PUSH
7774: LD_INT 1
7776: DOUBLE
7777: EQUAL
7778: IFTRUE 7782
7780: GO 7801
7782: POP
// begin RuSolMinLevel = 3 ;
7783: LD_ADDR_EXP 25
7787: PUSH
7788: LD_INT 3
7790: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7791: LD_ADDR_EXP 26
7795: PUSH
7796: LD_INT 5
7798: ST_TO_ADDR
// end ; 2 :
7799: GO 7979
7801: LD_INT 2
7803: DOUBLE
7804: EQUAL
7805: IFTRUE 7809
7807: GO 7880
7809: POP
// begin RuSolMinLevel = 5 ;
7810: LD_ADDR_EXP 25
7814: PUSH
7815: LD_INT 5
7817: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7818: LD_ADDR_EXP 26
7822: PUSH
7823: LD_INT 6
7825: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7826: LD_INT 51
7828: PPUSH
7829: LD_INT 3
7831: PPUSH
7832: LD_INT 1
7834: PPUSH
7835: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7839: LD_INT 57
7841: PPUSH
7842: LD_INT 3
7844: PPUSH
7845: LD_INT 1
7847: PPUSH
7848: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7852: LD_INT 57
7854: PPUSH
7855: LD_INT 6
7857: PPUSH
7858: LD_INT 2
7860: PPUSH
7861: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7865: LD_INT 51
7867: PPUSH
7868: LD_INT 6
7870: PPUSH
7871: LD_INT 2
7873: PPUSH
7874: CALL_OW 322
// end ; 3 .. 4 :
7878: GO 7979
7880: LD_INT 3
7882: DOUBLE
7883: GREATEREQUAL
7884: IFFALSE 7892
7886: LD_INT 4
7888: DOUBLE
7889: LESSEQUAL
7890: IFTRUE 7894
7892: GO 7978
7894: POP
// begin RuSolMinLevel = 5 ;
7895: LD_ADDR_EXP 25
7899: PUSH
7900: LD_INT 5
7902: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7903: LD_ADDR_EXP 26
7907: PUSH
7908: LD_INT 6
7910: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7911: LD_INT 57
7913: PPUSH
7914: LD_INT 3
7916: PPUSH
7917: LD_INT 1
7919: PPUSH
7920: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7924: LD_INT 51
7926: PPUSH
7927: LD_INT 3
7929: PPUSH
7930: LD_INT 1
7932: PPUSH
7933: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7937: LD_INT 52
7939: PPUSH
7940: LD_INT 3
7942: PPUSH
7943: LD_INT 1
7945: PPUSH
7946: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7950: LD_INT 57
7952: PPUSH
7953: LD_INT 6
7955: PPUSH
7956: LD_INT 2
7958: PPUSH
7959: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7963: LD_INT 52
7965: PPUSH
7966: LD_INT 6
7968: PPUSH
7969: LD_INT 2
7971: PPUSH
7972: CALL_OW 322
// end ; end ;
7976: GO 7979
7978: POP
// end ;
7979: LD_VAR 0 1
7983: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7984: LD_INT 0
7986: PPUSH
7987: PPUSH
7988: PPUSH
7989: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7990: LD_ADDR_VAR 0 3
7994: PUSH
7995: LD_INT 22
7997: PUSH
7998: LD_INT 3
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: LD_INT 25
8007: PUSH
8008: LD_INT 2
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PPUSH
8019: CALL_OW 69
8023: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
8024: LD_ADDR_VAR 0 4
8028: PUSH
8029: LD_INT 4
8031: PUSH
8032: LD_INT 75
8034: PUSH
8035: LD_INT 79
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: LD_INT 4
8049: PUSH
8050: LD_INT 113
8052: PUSH
8053: LD_INT 94
8055: PUSH
8056: LD_INT 4
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 29
8067: PUSH
8068: LD_INT 106
8070: PUSH
8071: LD_INT 97
8073: PUSH
8074: LD_INT 3
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: PUSH
8083: LD_INT 26
8085: PUSH
8086: LD_INT 93
8088: PUSH
8089: LD_INT 97
8091: PUSH
8092: LD_INT 5
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: LD_INT 100
8106: PUSH
8107: LD_INT 89
8109: PUSH
8110: LD_INT 3
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 17
8121: PUSH
8122: LD_INT 96
8124: PUSH
8125: LD_INT 89
8127: PUSH
8128: LD_INT 1
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 32
8139: PUSH
8140: LD_INT 78
8142: PUSH
8143: LD_INT 94
8145: PUSH
8146: LD_INT 1
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: PUSH
8155: LD_INT 32
8157: PUSH
8158: LD_INT 95
8160: PUSH
8161: LD_INT 82
8163: PUSH
8164: LD_INT 3
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 32
8175: PUSH
8176: LD_INT 104
8178: PUSH
8179: LD_INT 85
8181: PUSH
8182: LD_INT 2
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 32
8193: PUSH
8194: LD_INT 81
8196: PUSH
8197: LD_INT 78
8199: PUSH
8200: LD_INT 2
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 33
8211: PUSH
8212: LD_INT 109
8214: PUSH
8215: LD_INT 90
8217: PUSH
8218: LD_INT 3
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: PUSH
8227: LD_INT 33
8229: PUSH
8230: LD_INT 88
8232: PUSH
8233: LD_INT 79
8235: PUSH
8236: LD_INT 3
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: PUSH
8245: LD_INT 33
8247: PUSH
8248: LD_INT 76
8250: PUSH
8251: LD_INT 87
8253: PUSH
8254: LD_INT 1
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: PUSH
8263: LD_INT 26
8265: PUSH
8266: LD_INT 96
8268: PUSH
8269: LD_INT 97
8271: PUSH
8272: LD_INT 5
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 26
8283: PUSH
8284: LD_INT 85
8286: PUSH
8287: LD_INT 84
8289: PUSH
8290: LD_INT 2
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: PUSH
8299: LD_INT 6
8301: PUSH
8302: LD_INT 88
8304: PUSH
8305: LD_INT 95
8307: PUSH
8308: LD_INT 0
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 19
8319: PUSH
8320: LD_INT 103
8322: PUSH
8323: LD_INT 89
8325: PUSH
8326: LD_INT 4
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 16
8337: PUSH
8338: LD_INT 97
8340: PUSH
8341: LD_INT 86
8343: PUSH
8344: LD_INT 2
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 24
8355: PUSH
8356: LD_INT 100
8358: PUSH
8359: LD_INT 85
8361: PUSH
8362: LD_INT 3
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: ST_TO_ADDR
// for i := 1 to buildingsTab do
8392: LD_ADDR_VAR 0 2
8396: PUSH
8397: DOUBLE
8398: LD_INT 1
8400: DEC
8401: ST_TO_ADDR
8402: LD_VAR 0 4
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8481
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8410: LD_VAR 0 3
8414: PPUSH
8415: LD_VAR 0 4
8419: PUSH
8420: LD_VAR 0 2
8424: ARRAY
8425: PUSH
8426: LD_INT 1
8428: ARRAY
8429: PPUSH
8430: LD_VAR 0 4
8434: PUSH
8435: LD_VAR 0 2
8439: ARRAY
8440: PUSH
8441: LD_INT 2
8443: ARRAY
8444: PPUSH
8445: LD_VAR 0 4
8449: PUSH
8450: LD_VAR 0 2
8454: ARRAY
8455: PUSH
8456: LD_INT 3
8458: ARRAY
8459: PPUSH
8460: LD_VAR 0 4
8464: PUSH
8465: LD_VAR 0 2
8469: ARRAY
8470: PUSH
8471: LD_INT 4
8473: ARRAY
8474: PPUSH
8475: CALL_OW 205
8479: GO 8407
8481: POP
8482: POP
// end ;
8483: LD_VAR 0 1
8487: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8488: LD_INT 0
8490: PPUSH
8491: PPUSH
// for i in charactersList do
8492: LD_ADDR_VAR 0 4
8496: PUSH
8497: LD_VAR 0 1
8501: PUSH
8502: FOR_IN
8503: IFFALSE 8521
// SaveCharacters ( i , ident ) ;
8505: LD_VAR 0 4
8509: PPUSH
8510: LD_VAR 0 2
8514: PPUSH
8515: CALL_OW 38
8519: GO 8502
8521: POP
8522: POP
// end ;
8523: LD_VAR 0 3
8527: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8528: LD_INT 0
8530: PPUSH
8531: PPUSH
8532: PPUSH
8533: PPUSH
8534: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8535: LD_ADDR_VAR 0 8
8539: PUSH
8540: LD_INT 48
8542: PUSH
8543: LD_INT 49
8545: PUSH
8546: LD_INT 50
8548: PUSH
8549: LD_INT 20
8551: PUSH
8552: LD_INT 1
8554: PUSH
8555: LD_INT 51
8557: PUSH
8558: LD_INT 52
8560: PUSH
8561: LD_INT 69
8563: PUSH
8564: LD_INT 39
8566: PUSH
8567: LD_INT 34
8569: PUSH
8570: LD_INT 40
8572: PUSH
8573: LD_INT 53
8575: PUSH
8576: LD_INT 71
8578: PUSH
8579: LD_INT 57
8581: PUSH
8582: LD_INT 58
8584: PUSH
8585: LD_INT 44
8587: PUSH
8588: LD_INT 32
8590: PUSH
8591: LD_INT 27
8593: PUSH
8594: LD_INT 23
8596: PUSH
8597: LD_INT 33
8599: PUSH
8600: LD_INT 59
8602: PUSH
8603: LD_INT 54
8605: PUSH
8606: LD_INT 55
8608: PUSH
8609: LD_INT 56
8611: PUSH
8612: LD_INT 63
8614: PUSH
8615: LD_INT 64
8617: PUSH
8618: LD_INT 65
8620: PUSH
8621: LD_INT 30
8623: PUSH
8624: LD_INT 31
8626: PUSH
8627: LD_INT 21
8629: PUSH
8630: LD_INT 22
8632: PUSH
8633: LD_INT 25
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8670: LD_ADDR_VAR 0 5
8674: PUSH
8675: DOUBLE
8676: LD_INT 1
8678: DEC
8679: ST_TO_ADDR
8680: LD_VAR 0 8
8684: PUSH
8685: FOR_TO
8686: IFFALSE 8762
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8688: LD_VAR 0 8
8692: PUSH
8693: LD_VAR 0 5
8697: ARRAY
8698: PPUSH
8699: LD_VAR 0 1
8703: PPUSH
8704: CALL_OW 321
8708: PUSH
8709: LD_INT 1
8711: EQUAL
8712: PUSH
8713: LD_VAR 0 8
8717: PUSH
8718: LD_VAR 0 5
8722: ARRAY
8723: PPUSH
8724: LD_VAR 0 3
8728: PPUSH
8729: CALL_OW 482
8733: PUSH
8734: LD_INT 1
8736: EQUAL
8737: AND
8738: IFFALSE 8760
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8740: LD_VAR 0 2
8744: PPUSH
8745: LD_VAR 0 8
8749: PUSH
8750: LD_VAR 0 5
8754: ARRAY
8755: PPUSH
8756: CALL_OW 184
8760: GO 8685
8762: POP
8763: POP
// end ;
8764: LD_VAR 0 4
8768: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8769: LD_INT 0
8771: PPUSH
8772: PPUSH
8773: PPUSH
8774: PPUSH
8775: PPUSH
8776: PPUSH
8777: PPUSH
8778: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8779: LD_ADDR_VAR 0 6
8783: PUSH
8784: LD_VAR 0 2
8788: PPUSH
8789: LD_INT 22
8791: PUSH
8792: LD_VAR 0 1
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: LD_INT 56
8803: PUSH
8804: EMPTY
8805: LIST
8806: PUSH
8807: LD_INT 24
8809: PUSH
8810: LD_INT 700
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: LD_INT 3
8819: PUSH
8820: LD_INT 60
8822: PUSH
8823: EMPTY
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 2
8832: PUSH
8833: LD_INT 25
8835: PUSH
8836: LD_INT 1
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 25
8845: PUSH
8846: LD_INT 5
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 25
8855: PUSH
8856: LD_INT 8
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: LD_INT 25
8865: PUSH
8866: LD_INT 9
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: PPUSH
8887: CALL_OW 70
8891: PUSH
8892: LD_EXP 24
8896: PUSH
8897: EMPTY
8898: LIST
8899: DIFF
8900: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8901: LD_ADDR_VAR 0 7
8905: PUSH
8906: LD_VAR 0 2
8910: PPUSH
8911: LD_INT 22
8913: PUSH
8914: LD_VAR 0 1
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: LD_INT 30
8925: PUSH
8926: LD_INT 32
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 58
8935: PUSH
8936: EMPTY
8937: LIST
8938: PUSH
8939: LD_INT 24
8941: PUSH
8942: LD_INT 251
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: PPUSH
8955: CALL_OW 70
8959: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8960: LD_ADDR_VAR 0 9
8964: PUSH
8965: LD_VAR 0 2
8969: PPUSH
8970: LD_INT 22
8972: PUSH
8973: LD_VAR 0 1
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: PUSH
8982: LD_INT 2
8984: PUSH
8985: LD_INT 30
8987: PUSH
8988: LD_INT 4
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: PUSH
8995: LD_INT 30
8997: PUSH
8998: LD_INT 5
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: LIST
9009: PUSH
9010: LD_INT 24
9012: PUSH
9013: LD_INT 251
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: LIST
9024: PPUSH
9025: CALL_OW 70
9029: ST_TO_ADDR
// if barrackList > 0 then
9030: LD_VAR 0 9
9034: PUSH
9035: LD_INT 0
9037: GREATER
9038: IFFALSE 9186
// begin if turretList = 0 then
9040: LD_VAR 0 7
9044: PUSH
9045: LD_INT 0
9047: EQUAL
9048: IFFALSE 9090
// begin if soldiers_list > 0 then
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 0
9057: GREATER
9058: IFFALSE 9088
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9060: LD_VAR 0 6
9064: PPUSH
9065: LD_VAR 0 9
9069: PUSH
9070: LD_INT 1
9072: PPUSH
9073: LD_VAR 0 9
9077: PPUSH
9078: CALL_OW 12
9082: ARRAY
9083: PPUSH
9084: CALL_OW 120
// end else
9088: GO 9186
// begin for i in barrackList do
9090: LD_ADDR_VAR 0 4
9094: PUSH
9095: LD_VAR 0 9
9099: PUSH
9100: FOR_IN
9101: IFFALSE 9184
// begin insideUnits = UnitsInside ( i ) ;
9103: LD_ADDR_VAR 0 10
9107: PUSH
9108: LD_VAR 0 4
9112: PPUSH
9113: CALL_OW 313
9117: ST_TO_ADDR
// if insideUnits > 0 then
9118: LD_VAR 0 10
9122: PUSH
9123: LD_INT 0
9125: GREATER
9126: IFFALSE 9150
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9128: LD_VAR 0 10
9132: PUSH
9133: LD_INT 1
9135: ARRAY
9136: PPUSH
9137: LD_VAR 0 7
9141: PUSH
9142: LD_INT 1
9144: ARRAY
9145: PPUSH
9146: CALL_OW 120
// if soldiers_list > 0 then
9150: LD_VAR 0 6
9154: PUSH
9155: LD_INT 0
9157: GREATER
9158: IFFALSE 9182
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9160: LD_VAR 0 6
9164: PUSH
9165: LD_INT 1
9167: ARRAY
9168: PPUSH
9169: LD_VAR 0 7
9173: PUSH
9174: LD_INT 1
9176: ARRAY
9177: PPUSH
9178: CALL_OW 120
// end ;
9182: GO 9100
9184: POP
9185: POP
// end ; end ; end ;
9186: LD_VAR 0 3
9190: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
9191: LD_INT 0
9193: PPUSH
9194: PPUSH
9195: PPUSH
9196: PPUSH
9197: PPUSH
9198: PPUSH
// for i = 1 to vehCount do
9199: LD_ADDR_VAR 0 8
9203: PUSH
9204: DOUBLE
9205: LD_INT 1
9207: DEC
9208: ST_TO_ADDR
9209: LD_VAR 0 6
9213: PUSH
9214: FOR_TO
9215: IFFALSE 9422
// begin uc_side = side ;
9217: LD_ADDR_OWVAR 20
9221: PUSH
9222: LD_VAR 0 1
9226: ST_TO_ADDR
// uc_nation = nation ;
9227: LD_ADDR_OWVAR 21
9231: PUSH
9232: LD_VAR 0 3
9236: ST_TO_ADDR
// vc_Chassis = 22 ;
9237: LD_ADDR_OWVAR 37
9241: PUSH
9242: LD_INT 22
9244: ST_TO_ADDR
// vc_engine = 1 ;
9245: LD_ADDR_OWVAR 39
9249: PUSH
9250: LD_INT 1
9252: ST_TO_ADDR
// vc_control = 1 ;
9253: LD_ADDR_OWVAR 38
9257: PUSH
9258: LD_INT 1
9260: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
9261: LD_ADDR_OWVAR 40
9265: PUSH
9266: LD_INT 43
9268: PUSH
9269: LD_INT 44
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 1
9278: PPUSH
9279: LD_INT 2
9281: PPUSH
9282: CALL_OW 12
9286: ARRAY
9287: ST_TO_ADDR
// veh = CreateVehicle ;
9288: LD_ADDR_VAR 0 12
9292: PUSH
9293: CALL_OW 45
9297: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9298: LD_VAR 0 12
9302: PPUSH
9303: LD_VAR 0 2
9307: PPUSH
9308: LD_INT 0
9310: PPUSH
9311: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9315: LD_ADDR_EXP 32
9319: PUSH
9320: LD_EXP 32
9324: PUSH
9325: LD_VAR 0 12
9329: ADD
9330: ST_TO_ADDR
// hc_class = 3 ;
9331: LD_ADDR_OWVAR 28
9335: PUSH
9336: LD_INT 3
9338: ST_TO_ADDR
// hc_name =  ;
9339: LD_ADDR_OWVAR 26
9343: PUSH
9344: LD_STRING 
9346: ST_TO_ADDR
// hc_gallery =  ;
9347: LD_ADDR_OWVAR 33
9351: PUSH
9352: LD_STRING 
9354: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9355: LD_INT 0
9357: PPUSH
9358: LD_INT 3
9360: PPUSH
9361: LD_EXP 25
9365: PPUSH
9366: LD_EXP 26
9370: PPUSH
9371: CALL_OW 12
9375: PPUSH
9376: CALL_OW 380
// un = CreateHuman ;
9380: LD_ADDR_VAR 0 10
9384: PUSH
9385: CALL_OW 44
9389: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9390: LD_VAR 0 10
9394: PPUSH
9395: LD_VAR 0 12
9399: PPUSH
9400: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9404: LD_ADDR_EXP 32
9408: PUSH
9409: LD_EXP 32
9413: PUSH
9414: LD_VAR 0 10
9418: ADD
9419: ST_TO_ADDR
// end ;
9420: GO 9214
9422: POP
9423: POP
// end ;
9424: LD_VAR 0 7
9428: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9429: LD_INT 0
9431: PPUSH
9432: PPUSH
9433: PPUSH
9434: PPUSH
9435: PPUSH
9436: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9437: LD_VAR 0 2
9441: PPUSH
9442: LD_INT 22
9444: PUSH
9445: LD_VAR 0 1
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PUSH
9454: EMPTY
9455: LIST
9456: PPUSH
9457: CALL_OW 70
9461: PUSH
9462: LD_INT 0
9464: EQUAL
9465: PUSH
9466: LD_EXP 32
9470: AND
9471: IFFALSE 9758
// begin for i in defenders_list do
9473: LD_ADDR_VAR 0 4
9477: PUSH
9478: LD_EXP 32
9482: PUSH
9483: FOR_IN
9484: IFFALSE 9756
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9486: LD_VAR 0 4
9490: PPUSH
9491: LD_INT 63
9493: PPUSH
9494: LD_INT 75
9496: PPUSH
9497: CALL_OW 297
9501: PUSH
9502: LD_INT 8
9504: GREATER
9505: PUSH
9506: LD_VAR 0 4
9510: PPUSH
9511: CALL_OW 314
9515: NOT
9516: AND
9517: IFFALSE 9536
// ComMoveXY ( i , 63 , 75 ) else
9519: LD_VAR 0 4
9523: PPUSH
9524: LD_INT 63
9526: PPUSH
9527: LD_INT 75
9529: PPUSH
9530: CALL_OW 111
9534: GO 9754
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9536: LD_VAR 0 4
9540: PPUSH
9541: CALL_OW 257
9545: PUSH
9546: LD_INT 3
9548: EQUAL
9549: PUSH
9550: LD_VAR 0 4
9554: PPUSH
9555: CALL_OW 310
9559: NOT
9560: AND
9561: PUSH
9562: LD_VAR 0 4
9566: PPUSH
9567: CALL_OW 314
9571: NOT
9572: AND
9573: IFFALSE 9626
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9575: LD_VAR 0 4
9579: PPUSH
9580: LD_EXP 32
9584: PPUSH
9585: LD_INT 58
9587: PUSH
9588: EMPTY
9589: LIST
9590: PUSH
9591: LD_INT 24
9593: PUSH
9594: LD_INT 1000
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PPUSH
9605: CALL_OW 72
9609: PPUSH
9610: LD_VAR 0 4
9614: PPUSH
9615: CALL_OW 74
9619: PPUSH
9620: CALL_OW 120
9624: GO 9754
// if GetFuel ( i ) < 100 then
9626: LD_VAR 0 4
9630: PPUSH
9631: CALL_OW 261
9635: PUSH
9636: LD_INT 100
9638: LESS
9639: IFFALSE 9655
// SetFuel ( defenders_list , 100 ) else
9641: LD_EXP 32
9645: PPUSH
9646: LD_INT 100
9648: PPUSH
9649: CALL_OW 240
9653: GO 9754
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9655: LD_VAR 0 4
9659: PPUSH
9660: CALL_OW 263
9664: PUSH
9665: LD_INT 1
9667: EQUAL
9668: PUSH
9669: LD_VAR 0 4
9673: PPUSH
9674: CALL_OW 256
9678: PUSH
9679: LD_INT 990
9681: LESS
9682: AND
9683: IFFALSE 9754
// begin veh := i ;
9685: LD_ADDR_VAR 0 7
9689: PUSH
9690: LD_VAR 0 4
9694: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9695: LD_ADDR_VAR 0 8
9699: PUSH
9700: LD_VAR 0 4
9704: PPUSH
9705: CALL_OW 311
9709: ST_TO_ADDR
// if veh then
9710: LD_VAR 0 7
9714: IFFALSE 9754
// begin ComMoveXY ( i , 63 , 75 ) ;
9716: LD_VAR 0 4
9720: PPUSH
9721: LD_INT 63
9723: PPUSH
9724: LD_INT 75
9726: PPUSH
9727: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9731: LD_VAR 0 7
9735: PPUSH
9736: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9740: LD_VAR 0 8
9744: PPUSH
9745: LD_VAR 0 7
9749: PPUSH
9750: CALL_OW 189
// end ; end ; end ;
9754: GO 9483
9756: POP
9757: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9758: LD_ADDR_VAR 0 6
9762: PUSH
9763: LD_VAR 0 2
9767: PPUSH
9768: LD_INT 22
9770: PUSH
9771: LD_VAR 0 1
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PUSH
9780: EMPTY
9781: LIST
9782: PPUSH
9783: CALL_OW 70
9787: ST_TO_ADDR
// if tmp and defenders_list then
9788: LD_VAR 0 6
9792: PUSH
9793: LD_EXP 32
9797: AND
9798: IFFALSE 9967
// for i in defenders_list do
9800: LD_ADDR_VAR 0 4
9804: PUSH
9805: LD_EXP 32
9809: PUSH
9810: FOR_IN
9811: IFFALSE 9965
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9813: LD_VAR 0 4
9817: PPUSH
9818: CALL_OW 257
9822: PUSH
9823: LD_INT 3
9825: EQUAL
9826: PUSH
9827: LD_VAR 0 4
9831: PPUSH
9832: CALL_OW 310
9836: NOT
9837: AND
9838: IFFALSE 9877
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9840: LD_VAR 0 4
9844: PPUSH
9845: LD_EXP 32
9849: PPUSH
9850: LD_INT 58
9852: PUSH
9853: EMPTY
9854: LIST
9855: PPUSH
9856: CALL_OW 72
9860: PPUSH
9861: LD_VAR 0 4
9865: PPUSH
9866: CALL_OW 74
9870: PPUSH
9871: CALL_OW 120
9875: GO 9963
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9877: LD_VAR 0 4
9881: PPUSH
9882: CALL_OW 314
9886: NOT
9887: PUSH
9888: LD_VAR 0 4
9892: PPUSH
9893: LD_VAR 0 2
9897: PPUSH
9898: CALL_OW 308
9902: AND
9903: IFFALSE 9931
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9905: LD_VAR 0 4
9909: PPUSH
9910: LD_VAR 0 6
9914: PPUSH
9915: LD_VAR 0 4
9919: PPUSH
9920: CALL_OW 74
9924: PPUSH
9925: CALL_OW 115
9929: GO 9963
// if not IsInArea ( i , defenseArea ) then
9931: LD_VAR 0 4
9935: PPUSH
9936: LD_VAR 0 2
9940: PPUSH
9941: CALL_OW 308
9945: NOT
9946: IFFALSE 9963
// ComMoveXY ( i , 63 , 75 ) ;
9948: LD_VAR 0 4
9952: PPUSH
9953: LD_INT 63
9955: PPUSH
9956: LD_INT 75
9958: PPUSH
9959: CALL_OW 111
// end ;
9963: GO 9810
9965: POP
9966: POP
// end ;
9967: LD_VAR 0 3
9971: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9972: LD_INT 0
9974: PPUSH
9975: PPUSH
9976: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9977: LD_INT 22
9979: PUSH
9980: LD_VAR 0 1
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 21
9991: PUSH
9992: LD_INT 2
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PPUSH
10003: CALL_OW 69
10007: PUSH
10008: LD_VAR 0 3
10012: LESSEQUAL
10013: IFFALSE 10121
// begin for i = 1 to vehCount do
10015: LD_ADDR_VAR 0 9
10019: PUSH
10020: DOUBLE
10021: LD_INT 1
10023: DEC
10024: ST_TO_ADDR
10025: LD_VAR 0 3
10029: PUSH
10030: FOR_TO
10031: IFFALSE 10119
// begin weapon = weaponTab [ i ] ;
10033: LD_ADDR_VAR 0 10
10037: PUSH
10038: LD_VAR 0 4
10042: PUSH
10043: LD_VAR 0 9
10047: ARRAY
10048: ST_TO_ADDR
// if weapon = 46 then
10049: LD_VAR 0 10
10053: PUSH
10054: LD_INT 46
10056: EQUAL
10057: IFFALSE 10088
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
10059: LD_VAR 0 2
10063: PPUSH
10064: LD_INT 24
10066: PPUSH
10067: LD_VAR 0 5
10071: PPUSH
10072: LD_VAR 0 6
10076: PPUSH
10077: LD_VAR 0 10
10081: PPUSH
10082: CALL_OW 185
// end else
10086: GO 10117
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
10088: LD_VAR 0 2
10092: PPUSH
10093: LD_VAR 0 7
10097: PPUSH
10098: LD_VAR 0 5
10102: PPUSH
10103: LD_VAR 0 6
10107: PPUSH
10108: LD_VAR 0 10
10112: PPUSH
10113: CALL_OW 185
// end ; end ;
10117: GO 10030
10119: POP
10120: POP
// end ; end ;
10121: LD_VAR 0 8
10125: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
10126: LD_INT 0
10128: PPUSH
10129: PPUSH
10130: PPUSH
10131: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
10132: LD_ADDR_VAR 0 8
10136: PUSH
10137: LD_INT 22
10139: PUSH
10140: LD_VAR 0 1
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 21
10151: PUSH
10152: LD_INT 2
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 3
10161: PUSH
10162: LD_INT 24
10164: PUSH
10165: LD_INT 650
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: LIST
10180: PPUSH
10181: CALL_OW 69
10185: ST_TO_ADDR
// if damageVehicles > 0 then
10186: LD_VAR 0 8
10190: PUSH
10191: LD_INT 0
10193: GREATER
10194: IFFALSE 10215
// ComMoveXY ( damageVehicles , repX , repY ) ;
10196: LD_VAR 0 8
10200: PPUSH
10201: LD_VAR 0 3
10205: PPUSH
10206: LD_VAR 0 4
10210: PPUSH
10211: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10215: LD_VAR 0 8
10219: PPUSH
10220: LD_INT 95
10222: PUSH
10223: LD_VAR 0 2
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: LD_INT 3
10234: PUSH
10235: LD_INT 58
10237: PUSH
10238: EMPTY
10239: LIST
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PPUSH
10249: CALL_OW 72
10253: PUSH
10254: LD_INT 0
10256: GREATER
10257: IFFALSE 10324
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
10259: LD_ADDR_VAR 0 6
10263: PUSH
10264: LD_VAR 0 8
10268: PPUSH
10269: LD_INT 95
10271: PUSH
10272: LD_VAR 0 2
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 3
10283: PUSH
10284: LD_INT 58
10286: PUSH
10287: EMPTY
10288: LIST
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 72
10302: PUSH
10303: FOR_IN
10304: IFFALSE 10322
// ComExitVehicle ( UnitsInside ( i ) ) ;
10306: LD_VAR 0 6
10310: PPUSH
10311: CALL_OW 313
10315: PPUSH
10316: CALL_OW 121
10320: GO 10303
10322: POP
10323: POP
// end ;
10324: LD_VAR 0 5
10328: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10329: LD_INT 0
10331: PPUSH
10332: PPUSH
10333: PPUSH
10334: PPUSH
10335: PPUSH
10336: PPUSH
10337: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10338: LD_ADDR_VAR 0 8
10342: PUSH
10343: LD_INT 22
10345: PUSH
10346: LD_VAR 0 1
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 21
10357: PUSH
10358: LD_INT 2
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 24
10367: PUSH
10368: LD_INT 250
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 58
10380: PUSH
10381: EMPTY
10382: LIST
10383: PUSH
10384: LD_INT 2
10386: PUSH
10387: LD_INT 34
10389: PUSH
10390: LD_INT 43
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 34
10399: PUSH
10400: LD_INT 44
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 34
10409: PUSH
10410: LD_INT 46
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: LIST
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 69
10438: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 , 7 ] [ Difficulty ] then
10439: LD_INT 22
10441: PUSH
10442: LD_VAR 0 1
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 21
10453: PUSH
10454: LD_INT 2
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 24
10463: PUSH
10464: LD_INT 1000
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PUSH
10471: LD_INT 3
10473: PUSH
10474: LD_INT 58
10476: PUSH
10477: EMPTY
10478: LIST
10479: PUSH
10480: LD_INT 2
10482: PUSH
10483: LD_INT 34
10485: PUSH
10486: LD_INT 43
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 34
10495: PUSH
10496: LD_INT 44
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 34
10505: PUSH
10506: LD_INT 46
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: PPUSH
10530: CALL_OW 69
10534: PUSH
10535: LD_INT 5
10537: PUSH
10538: LD_INT 6
10540: PUSH
10541: LD_INT 7
10543: PUSH
10544: LD_INT 7
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_OWVAR 67
10557: ARRAY
10558: GREATEREQUAL
10559: IFFALSE 11124
// repeat wait ( 0 0$1 ) ;
10561: LD_INT 35
10563: PPUSH
10564: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10568: LD_ADDR_VAR 0 8
10572: PUSH
10573: LD_INT 22
10575: PUSH
10576: LD_VAR 0 1
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 21
10587: PUSH
10588: LD_INT 2
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 24
10597: PUSH
10598: LD_INT 250
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 2
10607: PUSH
10608: LD_INT 34
10610: PUSH
10611: LD_INT 43
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PUSH
10618: LD_INT 34
10620: PUSH
10621: LD_INT 44
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 34
10630: PUSH
10631: LD_INT 46
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 3
10646: PUSH
10647: LD_INT 58
10649: PUSH
10650: EMPTY
10651: LIST
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: PPUSH
10664: CALL_OW 69
10668: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10669: LD_INT 22
10671: PUSH
10672: LD_VAR 0 1
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 95
10683: PUSH
10684: LD_VAR 0 2
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PPUSH
10697: CALL_OW 69
10701: NOT
10702: PUSH
10703: LD_VAR 0 11
10707: PUSH
10708: LD_INT 0
10710: EQUAL
10711: AND
10712: IFFALSE 10767
// for i := 1 to wayX do
10714: LD_ADDR_VAR 0 6
10718: PUSH
10719: DOUBLE
10720: LD_INT 1
10722: DEC
10723: ST_TO_ADDR
10724: LD_VAR 0 3
10728: PUSH
10729: FOR_TO
10730: IFFALSE 10765
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10732: LD_VAR 0 8
10736: PPUSH
10737: LD_VAR 0 3
10741: PUSH
10742: LD_VAR 0 6
10746: ARRAY
10747: PPUSH
10748: LD_VAR 0 4
10752: PUSH
10753: LD_VAR 0 6
10757: ARRAY
10758: PPUSH
10759: CALL_OW 114
10763: GO 10729
10765: POP
10766: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10767: LD_INT 22
10769: PUSH
10770: LD_VAR 0 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 95
10781: PUSH
10782: LD_VAR 0 2
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PPUSH
10795: CALL_OW 69
10799: IFFALSE 11023
// begin seeEnemy = 1 ;
10801: LD_ADDR_VAR 0 11
10805: PUSH
10806: LD_INT 1
10808: ST_TO_ADDR
// for j in vehiclesOK do
10809: LD_ADDR_VAR 0 7
10813: PUSH
10814: LD_VAR 0 8
10818: PUSH
10819: FOR_IN
10820: IFFALSE 11021
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10822: LD_ADDR_VAR 0 9
10826: PUSH
10827: LD_INT 81
10829: PUSH
10830: LD_VAR 0 1
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: LD_INT 101
10841: PUSH
10842: LD_INT 1
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PPUSH
10853: CALL_OW 69
10857: PPUSH
10858: LD_VAR 0 7
10862: PPUSH
10863: CALL_OW 74
10867: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10868: LD_ADDR_VAR 0 10
10872: PUSH
10873: LD_INT 81
10875: PUSH
10876: LD_VAR 0 1
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: PUSH
10885: LD_INT 101
10887: PUSH
10888: LD_INT 1
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PUSH
10895: LD_INT 2
10897: PUSH
10898: LD_INT 59
10900: PUSH
10901: EMPTY
10902: LIST
10903: PUSH
10904: LD_INT 21
10906: PUSH
10907: LD_INT 1
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: PUSH
10914: LD_INT 21
10916: PUSH
10917: LD_INT 2
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: EMPTY
10936: LIST
10937: PPUSH
10938: CALL_OW 69
10942: PPUSH
10943: LD_VAR 0 7
10947: PPUSH
10948: CALL_OW 74
10952: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10953: LD_VAR 0 7
10957: PPUSH
10958: LD_VAR 0 9
10962: PPUSH
10963: CALL_OW 296
10967: PUSH
10968: LD_INT 8
10970: PLUS
10971: PUSH
10972: LD_VAR 0 7
10976: PPUSH
10977: LD_VAR 0 10
10981: PPUSH
10982: CALL_OW 296
10986: LESS
10987: IFFALSE 11005
// ComAttackUnit ( j , target1 ) else
10989: LD_VAR 0 7
10993: PPUSH
10994: LD_VAR 0 9
10998: PPUSH
10999: CALL_OW 115
11003: GO 11019
// ComAttackUnit ( j , target2 ) ;
11005: LD_VAR 0 7
11009: PPUSH
11010: LD_VAR 0 10
11014: PPUSH
11015: CALL_OW 115
// end ;
11019: GO 10819
11021: POP
11022: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11023: LD_INT 22
11025: PUSH
11026: LD_VAR 0 1
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PUSH
11035: LD_INT 21
11037: PUSH
11038: LD_INT 2
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: LD_INT 24
11047: PUSH
11048: LD_INT 250
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: LD_INT 2
11057: PUSH
11058: LD_INT 34
11060: PUSH
11061: LD_INT 43
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 34
11070: PUSH
11071: LD_INT 44
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 34
11080: PUSH
11081: LD_INT 46
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 3
11096: PUSH
11097: LD_INT 58
11099: PUSH
11100: EMPTY
11101: LIST
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: PPUSH
11114: CALL_OW 69
11118: PUSH
11119: LD_INT 0
11121: EQUAL
11122: IFFALSE 10561
// seeEnemy = 0 ;
11124: LD_ADDR_VAR 0 11
11128: PUSH
11129: LD_INT 0
11131: ST_TO_ADDR
// end ;
11132: LD_VAR 0 5
11136: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
11137: LD_INT 0
11139: PPUSH
11140: PPUSH
11141: PPUSH
11142: PPUSH
11143: PPUSH
11144: PPUSH
// repeat wait ( 0 0$1 ) ;
11145: LD_INT 35
11147: PPUSH
11148: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
11152: LD_ADDR_VAR 0 7
11156: PUSH
11157: LD_INT 22
11159: PUSH
11160: LD_VAR 0 1
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 21
11171: PUSH
11172: LD_INT 2
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 24
11181: PUSH
11182: LD_INT 651
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: PPUSH
11194: CALL_OW 69
11198: ST_TO_ADDR
// for j in vehiclesOK do
11199: LD_ADDR_VAR 0 4
11203: PUSH
11204: LD_VAR 0 7
11208: PUSH
11209: FOR_IN
11210: IFFALSE 11411
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
11212: LD_ADDR_VAR 0 5
11216: PUSH
11217: LD_INT 81
11219: PUSH
11220: LD_VAR 0 1
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: LD_INT 101
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PPUSH
11243: CALL_OW 69
11247: PPUSH
11248: LD_VAR 0 4
11252: PPUSH
11253: CALL_OW 74
11257: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
11258: LD_ADDR_VAR 0 6
11262: PUSH
11263: LD_INT 81
11265: PUSH
11266: LD_VAR 0 1
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 101
11277: PUSH
11278: LD_INT 1
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 2
11287: PUSH
11288: LD_INT 59
11290: PUSH
11291: EMPTY
11292: LIST
11293: PUSH
11294: LD_INT 21
11296: PUSH
11297: LD_INT 1
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 21
11306: PUSH
11307: LD_INT 2
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: LIST
11324: PUSH
11325: EMPTY
11326: LIST
11327: PPUSH
11328: CALL_OW 69
11332: PPUSH
11333: LD_VAR 0 4
11337: PPUSH
11338: CALL_OW 74
11342: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11343: LD_VAR 0 4
11347: PPUSH
11348: LD_VAR 0 5
11352: PPUSH
11353: CALL_OW 296
11357: PUSH
11358: LD_INT 8
11360: PLUS
11361: PUSH
11362: LD_VAR 0 4
11366: PPUSH
11367: LD_VAR 0 6
11371: PPUSH
11372: CALL_OW 296
11376: LESS
11377: IFFALSE 11395
// ComAttackUnit ( j , target1 ) else
11379: LD_VAR 0 4
11383: PPUSH
11384: LD_VAR 0 5
11388: PPUSH
11389: CALL_OW 115
11393: GO 11409
// ComAttackUnit ( j , target2 ) ;
11395: LD_VAR 0 4
11399: PPUSH
11400: LD_VAR 0 6
11404: PPUSH
11405: CALL_OW 115
// end ;
11409: GO 11209
11411: POP
11412: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11413: LD_INT 22
11415: PUSH
11416: LD_VAR 0 1
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 21
11427: PUSH
11428: LD_INT 2
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 24
11437: PUSH
11438: LD_INT 250
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: LIST
11449: PPUSH
11450: CALL_OW 69
11454: PUSH
11455: LD_INT 0
11457: EQUAL
11458: IFFALSE 11145
// end ;
11460: LD_VAR 0 2
11464: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11465: LD_INT 0
11467: PPUSH
11468: PPUSH
11469: PPUSH
11470: PPUSH
11471: PPUSH
11472: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11473: LD_ADDR_VAR 0 8
11477: PUSH
11478: LD_VAR 0 2
11482: PPUSH
11483: CALL_OW 313
11487: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11488: LD_ADDR_VAR 0 9
11492: PUSH
11493: LD_VAR 0 3
11497: PPUSH
11498: LD_INT 22
11500: PUSH
11501: LD_VAR 0 1
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 25
11512: PUSH
11513: LD_INT 2
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 24
11522: PUSH
11523: LD_INT 750
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PUSH
11530: LD_INT 3
11532: PUSH
11533: LD_INT 54
11535: PUSH
11536: EMPTY
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: PPUSH
11549: CALL_OW 70
11553: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11554: LD_ADDR_VAR 0 6
11558: PUSH
11559: LD_VAR 0 3
11563: PPUSH
11564: LD_INT 22
11566: PUSH
11567: LD_VAR 0 1
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: LD_INT 21
11578: PUSH
11579: LD_INT 3
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 3
11588: PUSH
11589: LD_INT 24
11591: PUSH
11592: LD_INT 1000
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: LIST
11607: PUSH
11608: EMPTY
11609: LIST
11610: PPUSH
11611: CALL_OW 70
11615: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11616: LD_VAR 0 6
11620: NOT
11621: PUSH
11622: LD_INT 22
11624: PUSH
11625: LD_VAR 0 1
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: PUSH
11634: LD_INT 25
11636: PUSH
11637: LD_INT 2
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 24
11646: PUSH
11647: LD_INT 250
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: LIST
11658: PPUSH
11659: CALL_OW 69
11663: NOT
11664: AND
11665: IFFALSE 11669
// exit ;
11667: GO 11866
// if buildings_list > 0 and engineerOkInside then
11669: LD_VAR 0 6
11673: PUSH
11674: LD_INT 0
11676: GREATER
11677: PUSH
11678: LD_VAR 0 8
11682: AND
11683: IFFALSE 11709
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11685: LD_VAR 0 8
11689: PPUSH
11690: LD_INT 25
11692: PUSH
11693: LD_INT 2
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PPUSH
11700: CALL_OW 72
11704: PPUSH
11705: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11709: LD_VAR 0 6
11713: PUSH
11714: LD_INT 0
11716: GREATER
11717: PUSH
11718: LD_VAR 0 9
11722: PUSH
11723: LD_INT 0
11725: GREATER
11726: AND
11727: IFFALSE 11747
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11729: LD_VAR 0 9
11733: PPUSH
11734: LD_VAR 0 6
11738: PUSH
11739: LD_INT 1
11741: ARRAY
11742: PPUSH
11743: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11747: LD_VAR 0 6
11751: PUSH
11752: LD_INT 0
11754: EQUAL
11755: PUSH
11756: LD_VAR 0 4
11760: PUSH
11761: LD_INT 0
11763: EQUAL
11764: AND
11765: PUSH
11766: LD_VAR 0 9
11770: PUSH
11771: LD_INT 0
11773: GREATER
11774: AND
11775: IFFALSE 11791
// ComEnterUnit ( engineerOkOutside , building ) ;
11777: LD_VAR 0 9
11781: PPUSH
11782: LD_VAR 0 2
11786: PPUSH
11787: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11791: LD_VAR 0 9
11795: PUSH
11796: LD_INT 0
11798: GREATER
11799: PUSH
11800: LD_VAR 0 6
11804: PUSH
11805: LD_INT 0
11807: EQUAL
11808: AND
11809: PUSH
11810: LD_VAR 0 4
11814: PUSH
11815: LD_INT 0
11817: GREATER
11818: AND
11819: IFFALSE 11866
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11821: LD_VAR 0 9
11825: PPUSH
11826: LD_VAR 0 4
11830: PUSH
11831: LD_INT 1
11833: ARRAY
11834: PPUSH
11835: LD_VAR 0 4
11839: PUSH
11840: LD_INT 2
11842: ARRAY
11843: PPUSH
11844: LD_VAR 0 4
11848: PUSH
11849: LD_INT 3
11851: ARRAY
11852: PPUSH
11853: LD_VAR 0 4
11857: PUSH
11858: LD_INT 4
11860: ARRAY
11861: PPUSH
11862: CALL_OW 145
// end ;
11866: LD_VAR 0 5
11870: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11871: LD_INT 0
11873: PPUSH
11874: PPUSH
11875: PPUSH
11876: PPUSH
11877: PPUSH
11878: PPUSH
11879: PPUSH
11880: PPUSH
11881: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11882: LD_ADDR_VAR 0 6
11886: PUSH
11887: LD_INT 22
11889: PUSH
11890: LD_VAR 0 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 25
11901: PUSH
11902: LD_INT 4
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 23
11911: PUSH
11912: LD_INT 2
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 24
11921: PUSH
11922: LD_INT 251
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11940: LD_ADDR_VAR 0 7
11944: PUSH
11945: LD_VAR 0 3
11949: PPUSH
11950: LD_INT 22
11952: PUSH
11953: LD_VAR 0 1
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 23
11964: PUSH
11965: LD_INT 2
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: LD_INT 25
11974: PUSH
11975: LD_INT 4
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 50
11984: PUSH
11985: EMPTY
11986: LIST
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: PPUSH
11994: CALL_OW 70
11998: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11999: LD_ADDR_VAR 0 10
12003: PUSH
12004: LD_VAR 0 3
12008: PPUSH
12009: LD_INT 22
12011: PUSH
12012: LD_VAR 0 1
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 21
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 3
12033: PUSH
12034: LD_INT 25
12036: PUSH
12037: LD_INT 3
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 3
12050: PUSH
12051: LD_INT 24
12053: PUSH
12054: LD_INT 750
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 70
12075: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12076: LD_ADDR_VAR 0 11
12080: PUSH
12081: LD_VAR 0 2
12085: PPUSH
12086: LD_INT 22
12088: PUSH
12089: LD_VAR 0 1
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: LD_INT 21
12100: PUSH
12101: LD_INT 1
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: PUSH
12108: LD_INT 3
12110: PUSH
12111: LD_INT 25
12113: PUSH
12114: LD_INT 3
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 3
12127: PUSH
12128: LD_INT 24
12130: PUSH
12131: LD_INT 1000
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: PPUSH
12148: CALL_OW 70
12152: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
12153: LD_VAR 0 10
12157: NOT
12158: PUSH
12159: LD_VAR 0 11
12163: NOT
12164: AND
12165: PUSH
12166: LD_VAR 0 6
12170: NOT
12171: AND
12172: IFFALSE 12176
// exit ;
12174: GO 12410
// if damageUnits > 0 and sci_list > 0 then
12176: LD_VAR 0 10
12180: PUSH
12181: LD_INT 0
12183: GREATER
12184: PUSH
12185: LD_VAR 0 6
12189: PUSH
12190: LD_INT 0
12192: GREATER
12193: AND
12194: IFFALSE 12210
// ComMoveToArea ( damageUnits , healArea ) ;
12196: LD_VAR 0 10
12200: PPUSH
12201: LD_VAR 0 2
12205: PPUSH
12206: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
12210: LD_VAR 0 11
12214: PUSH
12215: LD_INT 0
12217: GREATER
12218: PUSH
12219: LD_VAR 0 6
12223: PUSH
12224: LD_INT 0
12226: GREATER
12227: AND
12228: IFFALSE 12239
// ComExitBuilding ( sci_list ) ;
12230: LD_VAR 0 6
12234: PPUSH
12235: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
12239: LD_VAR 0 11
12243: PUSH
12244: LD_INT 0
12246: GREATER
12247: PUSH
12248: LD_VAR 0 7
12252: PUSH
12253: LD_INT 0
12255: GREATER
12256: AND
12257: IFFALSE 12277
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
12259: LD_VAR 0 7
12263: PPUSH
12264: LD_VAR 0 11
12268: PUSH
12269: LD_INT 1
12271: ARRAY
12272: PPUSH
12273: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12277: LD_VAR 0 10
12281: PUSH
12282: LD_INT 0
12284: EQUAL
12285: PUSH
12286: LD_VAR 0 11
12290: PUSH
12291: LD_INT 0
12293: EQUAL
12294: AND
12295: PUSH
12296: LD_VAR 0 7
12300: PUSH
12301: LD_INT 0
12303: GREATER
12304: AND
12305: IFFALSE 12410
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12307: LD_ADDR_VAR 0 12
12311: PUSH
12312: LD_INT 22
12314: PUSH
12315: LD_VAR 0 1
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 21
12326: PUSH
12327: LD_INT 3
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 30
12336: PUSH
12337: LD_INT 8
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: PPUSH
12349: CALL_OW 69
12353: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12354: LD_ADDR_VAR 0 13
12358: PUSH
12359: LD_INT 1
12361: PPUSH
12362: LD_VAR 0 12
12366: PPUSH
12367: CALL_OW 12
12371: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12372: LD_VAR 0 7
12376: PPUSH
12377: LD_INT 3
12379: PUSH
12380: LD_INT 60
12382: PUSH
12383: EMPTY
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PPUSH
12390: CALL_OW 72
12394: PPUSH
12395: LD_VAR 0 12
12399: PUSH
12400: LD_VAR 0 13
12404: ARRAY
12405: PPUSH
12406: CALL_OW 120
// end ; end ;
12410: LD_VAR 0 5
12414: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12415: LD_INT 0
12417: PPUSH
12418: PPUSH
12419: PPUSH
12420: PPUSH
12421: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12422: LD_ADDR_VAR 0 6
12426: PUSH
12427: LD_INT 22
12429: PUSH
12430: LD_VAR 0 1
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 2
12441: PUSH
12442: LD_INT 30
12444: PUSH
12445: LD_INT 31
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: LD_INT 30
12454: PUSH
12455: LD_INT 32
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 30
12464: PUSH
12465: LD_INT 33
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 30
12474: PUSH
12475: LD_INT 4
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 30
12484: PUSH
12485: LD_INT 5
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PPUSH
12504: CALL_OW 69
12508: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12509: LD_ADDR_VAR 0 7
12513: PUSH
12514: LD_INT 22
12516: PUSH
12517: LD_VAR 0 2
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 21
12528: PUSH
12529: LD_INT 3
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 58
12538: PUSH
12539: EMPTY
12540: LIST
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: PPUSH
12547: CALL_OW 69
12551: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12552: LD_VAR 0 6
12556: PUSH
12557: LD_INT 0
12559: GREATER
12560: PUSH
12561: LD_VAR 0 7
12565: PUSH
12566: LD_INT 0
12568: GREATER
12569: AND
12570: IFFALSE 12640
// begin for i in turretsList do
12572: LD_ADDR_VAR 0 4
12576: PUSH
12577: LD_VAR 0 6
12581: PUSH
12582: FOR_IN
12583: IFFALSE 12638
// begin for j in enemyBuildings do
12585: LD_ADDR_VAR 0 5
12589: PUSH
12590: LD_VAR 0 7
12594: PUSH
12595: FOR_IN
12596: IFFALSE 12634
// begin if GetDistUnits ( i , j ) < 20 then
12598: LD_VAR 0 4
12602: PPUSH
12603: LD_VAR 0 5
12607: PPUSH
12608: CALL_OW 296
12612: PUSH
12613: LD_INT 20
12615: LESS
12616: IFFALSE 12632
// begin ComAttackUnit ( i , j ) ;
12618: LD_VAR 0 4
12622: PPUSH
12623: LD_VAR 0 5
12627: PPUSH
12628: CALL_OW 115
// end ; end ;
12632: GO 12595
12634: POP
12635: POP
// end ;
12636: GO 12582
12638: POP
12639: POP
// end ; end ;
12640: LD_VAR 0 3
12644: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12645: LD_INT 0
12647: PPUSH
12648: PPUSH
12649: PPUSH
12650: PPUSH
12651: PPUSH
12652: PPUSH
12653: PPUSH
12654: PPUSH
12655: PPUSH
12656: PPUSH
12657: PPUSH
// for i = 1 to medicCount do
12658: LD_ADDR_VAR 0 14
12662: PUSH
12663: DOUBLE
12664: LD_INT 1
12666: DEC
12667: ST_TO_ADDR
12668: LD_VAR 0 7
12672: PUSH
12673: FOR_TO
12674: IFFALSE 12756
// begin uc_side = side ;
12676: LD_ADDR_OWVAR 20
12680: PUSH
12681: LD_VAR 0 1
12685: ST_TO_ADDR
// uc_nation = nation ;
12686: LD_ADDR_OWVAR 21
12690: PUSH
12691: LD_VAR 0 2
12695: ST_TO_ADDR
// hc_name =  ;
12696: LD_ADDR_OWVAR 26
12700: PUSH
12701: LD_STRING 
12703: ST_TO_ADDR
// hc_gallery =  ;
12704: LD_ADDR_OWVAR 33
12708: PUSH
12709: LD_STRING 
12711: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12712: LD_INT 0
12714: PPUSH
12715: LD_INT 4
12717: PPUSH
12718: LD_VAR 0 8
12722: PPUSH
12723: CALL_OW 380
// un = CreateHuman ;
12727: LD_ADDR_VAR 0 16
12731: PUSH
12732: CALL_OW 44
12736: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12737: LD_VAR 0 16
12741: PPUSH
12742: LD_VAR 0 9
12746: PPUSH
12747: LD_INT 0
12749: PPUSH
12750: CALL_OW 49
// end ;
12754: GO 12673
12756: POP
12757: POP
// for i = 1 to soldierCount do
12758: LD_ADDR_VAR 0 14
12762: PUSH
12763: DOUBLE
12764: LD_INT 1
12766: DEC
12767: ST_TO_ADDR
12768: LD_VAR 0 3
12772: PUSH
12773: FOR_TO
12774: IFFALSE 12856
// begin uc_side = side ;
12776: LD_ADDR_OWVAR 20
12780: PUSH
12781: LD_VAR 0 1
12785: ST_TO_ADDR
// uc_nation = nation ;
12786: LD_ADDR_OWVAR 21
12790: PUSH
12791: LD_VAR 0 2
12795: ST_TO_ADDR
// hc_name =  ;
12796: LD_ADDR_OWVAR 26
12800: PUSH
12801: LD_STRING 
12803: ST_TO_ADDR
// hc_gallery =  ;
12804: LD_ADDR_OWVAR 33
12808: PUSH
12809: LD_STRING 
12811: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12812: LD_INT 0
12814: PPUSH
12815: LD_INT 1
12817: PPUSH
12818: LD_VAR 0 8
12822: PPUSH
12823: CALL_OW 380
// un = CreateHuman ;
12827: LD_ADDR_VAR 0 16
12831: PUSH
12832: CALL_OW 44
12836: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12837: LD_VAR 0 16
12841: PPUSH
12842: LD_VAR 0 9
12846: PPUSH
12847: LD_INT 0
12849: PPUSH
12850: CALL_OW 49
// end ;
12854: GO 12773
12856: POP
12857: POP
// for i = 1 to sniperCount do
12858: LD_ADDR_VAR 0 14
12862: PUSH
12863: DOUBLE
12864: LD_INT 1
12866: DEC
12867: ST_TO_ADDR
12868: LD_VAR 0 4
12872: PUSH
12873: FOR_TO
12874: IFFALSE 12956
// begin uc_side = side ;
12876: LD_ADDR_OWVAR 20
12880: PUSH
12881: LD_VAR 0 1
12885: ST_TO_ADDR
// uc_nation = nation ;
12886: LD_ADDR_OWVAR 21
12890: PUSH
12891: LD_VAR 0 2
12895: ST_TO_ADDR
// hc_name =  ;
12896: LD_ADDR_OWVAR 26
12900: PUSH
12901: LD_STRING 
12903: ST_TO_ADDR
// hc_gallery =  ;
12904: LD_ADDR_OWVAR 33
12908: PUSH
12909: LD_STRING 
12911: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12912: LD_INT 0
12914: PPUSH
12915: LD_INT 5
12917: PPUSH
12918: LD_VAR 0 8
12922: PPUSH
12923: CALL_OW 380
// un = CreateHuman ;
12927: LD_ADDR_VAR 0 16
12931: PUSH
12932: CALL_OW 44
12936: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12937: LD_VAR 0 16
12941: PPUSH
12942: LD_VAR 0 9
12946: PPUSH
12947: LD_INT 0
12949: PPUSH
12950: CALL_OW 49
// end ;
12954: GO 12873
12956: POP
12957: POP
// for i = 1 to bazookCount do
12958: LD_ADDR_VAR 0 14
12962: PUSH
12963: DOUBLE
12964: LD_INT 1
12966: DEC
12967: ST_TO_ADDR
12968: LD_VAR 0 5
12972: PUSH
12973: FOR_TO
12974: IFFALSE 13056
// begin uc_side = side ;
12976: LD_ADDR_OWVAR 20
12980: PUSH
12981: LD_VAR 0 1
12985: ST_TO_ADDR
// uc_nation = nation ;
12986: LD_ADDR_OWVAR 21
12990: PUSH
12991: LD_VAR 0 2
12995: ST_TO_ADDR
// hc_name =  ;
12996: LD_ADDR_OWVAR 26
13000: PUSH
13001: LD_STRING 
13003: ST_TO_ADDR
// hc_gallery =  ;
13004: LD_ADDR_OWVAR 33
13008: PUSH
13009: LD_STRING 
13011: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
13012: LD_INT 0
13014: PPUSH
13015: LD_INT 9
13017: PPUSH
13018: LD_VAR 0 8
13022: PPUSH
13023: CALL_OW 380
// un = CreateHuman ;
13027: LD_ADDR_VAR 0 16
13031: PUSH
13032: CALL_OW 44
13036: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13037: LD_VAR 0 16
13041: PPUSH
13042: LD_VAR 0 9
13046: PPUSH
13047: LD_INT 0
13049: PPUSH
13050: CALL_OW 49
// end ;
13054: GO 12973
13056: POP
13057: POP
// for i = 1 to mortalCount do
13058: LD_ADDR_VAR 0 14
13062: PUSH
13063: DOUBLE
13064: LD_INT 1
13066: DEC
13067: ST_TO_ADDR
13068: LD_VAR 0 6
13072: PUSH
13073: FOR_TO
13074: IFFALSE 13156
// begin uc_side = side ;
13076: LD_ADDR_OWVAR 20
13080: PUSH
13081: LD_VAR 0 1
13085: ST_TO_ADDR
// uc_nation = nation ;
13086: LD_ADDR_OWVAR 21
13090: PUSH
13091: LD_VAR 0 2
13095: ST_TO_ADDR
// hc_name =  ;
13096: LD_ADDR_OWVAR 26
13100: PUSH
13101: LD_STRING 
13103: ST_TO_ADDR
// hc_gallery =  ;
13104: LD_ADDR_OWVAR 33
13108: PUSH
13109: LD_STRING 
13111: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
13112: LD_INT 0
13114: PPUSH
13115: LD_INT 8
13117: PPUSH
13118: LD_VAR 0 8
13122: PPUSH
13123: CALL_OW 380
// un = CreateHuman ;
13127: LD_ADDR_VAR 0 16
13131: PUSH
13132: CALL_OW 44
13136: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13137: LD_VAR 0 16
13141: PPUSH
13142: LD_VAR 0 9
13146: PPUSH
13147: LD_INT 0
13149: PPUSH
13150: CALL_OW 49
// end ;
13154: GO 13073
13156: POP
13157: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
13158: LD_ADDR_VAR 0 19
13162: PUSH
13163: LD_INT 22
13165: PUSH
13166: LD_VAR 0 1
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 2
13177: PUSH
13178: LD_INT 25
13180: PUSH
13181: LD_INT 1
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 25
13190: PUSH
13191: LD_INT 5
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 25
13200: PUSH
13201: LD_INT 8
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 25
13210: PUSH
13211: LD_INT 9
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PPUSH
13229: CALL_OW 69
13233: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
13234: LD_ADDR_VAR 0 18
13238: PUSH
13239: LD_INT 22
13241: PUSH
13242: LD_VAR 0 1
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 25
13253: PUSH
13254: LD_INT 4
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PPUSH
13265: CALL_OW 69
13269: ST_TO_ADDR
// for i in medic_list do
13270: LD_ADDR_VAR 0 14
13274: PUSH
13275: LD_VAR 0 18
13279: PUSH
13280: FOR_IN
13281: IFFALSE 13299
// ComMoveToArea ( i , healArea ) ;
13283: LD_VAR 0 14
13287: PPUSH
13288: LD_VAR 0 10
13292: PPUSH
13293: CALL_OW 113
13297: GO 13280
13299: POP
13300: POP
// if strategy = 1 then
13301: LD_VAR 0 12
13305: PUSH
13306: LD_INT 1
13308: EQUAL
13309: IFFALSE 13855
// begin repeat wait ( 0 0$3 ) ;
13311: LD_INT 105
13313: PPUSH
13314: CALL_OW 67
// for i in soldiersOK_list do
13318: LD_ADDR_VAR 0 14
13322: PUSH
13323: LD_VAR 0 19
13327: PUSH
13328: FOR_IN
13329: IFFALSE 13393
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13331: LD_VAR 0 14
13335: PPUSH
13336: LD_INT 91
13338: PPUSH
13339: LD_INT 63
13341: PPUSH
13342: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13346: LD_VAR 0 14
13350: PPUSH
13351: LD_INT 101
13353: PPUSH
13354: LD_INT 53
13356: PPUSH
13357: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13361: LD_VAR 0 14
13365: PPUSH
13366: LD_INT 75
13368: PPUSH
13369: LD_INT 23
13371: PPUSH
13372: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13376: LD_VAR 0 14
13380: PPUSH
13381: LD_INT 78
13383: PPUSH
13384: LD_INT 8
13386: PPUSH
13387: CALL_OW 174
// end ;
13391: GO 13328
13393: POP
13394: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13395: LD_INT 12
13397: PPUSH
13398: LD_INT 22
13400: PUSH
13401: LD_VAR 0 1
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 70
13414: PUSH
13415: LD_INT 2
13417: GREATER
13418: IFFALSE 13311
// repeat wait ( 0 0$1 ) ;
13420: LD_INT 35
13422: PPUSH
13423: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13427: LD_ADDR_VAR 0 17
13431: PUSH
13432: LD_INT 22
13434: PUSH
13435: LD_VAR 0 1
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 1
13446: PUSH
13447: LD_INT 3
13449: PUSH
13450: LD_INT 24
13452: PUSH
13453: LD_INT 550
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 24
13466: PUSH
13467: LD_INT 250
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PPUSH
13483: CALL_OW 69
13487: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13488: LD_ADDR_VAR 0 19
13492: PUSH
13493: LD_INT 22
13495: PUSH
13496: LD_VAR 0 1
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 2
13507: PUSH
13508: LD_INT 25
13510: PUSH
13511: LD_INT 1
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 25
13520: PUSH
13521: LD_INT 5
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 25
13530: PUSH
13531: LD_INT 8
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 25
13540: PUSH
13541: LD_INT 9
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: PUSH
13555: LD_INT 24
13557: PUSH
13558: LD_INT 1000
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: LIST
13569: PPUSH
13570: CALL_OW 69
13574: ST_TO_ADDR
// if medicCount > 0 then
13575: LD_VAR 0 7
13579: PUSH
13580: LD_INT 0
13582: GREATER
13583: IFFALSE 13657
// begin if damageUnit_list > 0 then
13585: LD_VAR 0 17
13589: PUSH
13590: LD_INT 0
13592: GREATER
13593: IFFALSE 13657
// begin for i in damageUnit_list do
13595: LD_ADDR_VAR 0 14
13599: PUSH
13600: LD_VAR 0 17
13604: PUSH
13605: FOR_IN
13606: IFFALSE 13655
// begin ComMoveToArea ( i , healArea ) ;
13608: LD_VAR 0 14
13612: PPUSH
13613: LD_VAR 0 10
13617: PPUSH
13618: CALL_OW 113
// for j in medic_list do
13622: LD_ADDR_VAR 0 15
13626: PUSH
13627: LD_VAR 0 18
13631: PUSH
13632: FOR_IN
13633: IFFALSE 13651
// AddComHeal ( j , i ) ;
13635: LD_VAR 0 15
13639: PPUSH
13640: LD_VAR 0 14
13644: PPUSH
13645: CALL_OW 188
13649: GO 13632
13651: POP
13652: POP
// end ;
13653: GO 13605
13655: POP
13656: POP
// end ; end ; for i in soldiersOK_list do
13657: LD_ADDR_VAR 0 14
13661: PUSH
13662: LD_VAR 0 19
13666: PUSH
13667: FOR_IN
13668: IFFALSE 13844
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13670: LD_ADDR_VAR 0 22
13674: PUSH
13675: LD_INT 22
13677: PUSH
13678: LD_VAR 0 11
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 69
13691: PPUSH
13692: LD_VAR 0 14
13696: PPUSH
13697: CALL_OW 74
13701: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13702: LD_ADDR_VAR 0 23
13706: PUSH
13707: LD_INT 22
13709: PUSH
13710: LD_VAR 0 11
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: LD_INT 2
13721: PUSH
13722: LD_INT 59
13724: PUSH
13725: EMPTY
13726: LIST
13727: PUSH
13728: LD_INT 21
13730: PUSH
13731: LD_INT 1
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 21
13740: PUSH
13741: LD_INT 2
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PUSH
13758: EMPTY
13759: LIST
13760: PPUSH
13761: CALL_OW 69
13765: PPUSH
13766: LD_VAR 0 14
13770: PPUSH
13771: CALL_OW 74
13775: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13776: LD_VAR 0 14
13780: PPUSH
13781: LD_VAR 0 22
13785: PPUSH
13786: CALL_OW 296
13790: PUSH
13791: LD_INT 6
13793: PLUS
13794: PUSH
13795: LD_VAR 0 14
13799: PPUSH
13800: LD_VAR 0 23
13804: PPUSH
13805: CALL_OW 296
13809: LESS
13810: IFFALSE 13828
// begin ComAttackUnit ( i , target1 ) ;
13812: LD_VAR 0 14
13816: PPUSH
13817: LD_VAR 0 22
13821: PPUSH
13822: CALL_OW 115
// end else
13826: GO 13842
// begin ComAttackUnit ( i , target2 ) ;
13828: LD_VAR 0 14
13832: PPUSH
13833: LD_VAR 0 23
13837: PPUSH
13838: CALL_OW 115
// end ; end ;
13842: GO 13667
13844: POP
13845: POP
// until soldiersOK_list = [ ] ;
13846: LD_VAR 0 19
13850: PUSH
13851: EMPTY
13852: EQUAL
13853: IFFALSE 13420
// end ; if strategy = 2 then
13855: LD_VAR 0 12
13859: PUSH
13860: LD_INT 2
13862: EQUAL
13863: IFFALSE 14379
// begin repeat wait ( 0 0$1 ) ;
13865: LD_INT 35
13867: PPUSH
13868: CALL_OW 67
// for i in soldiersOK_list do
13872: LD_ADDR_VAR 0 14
13876: PUSH
13877: LD_VAR 0 19
13881: PUSH
13882: FOR_IN
13883: IFFALSE 13917
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13885: LD_VAR 0 14
13889: PPUSH
13890: LD_INT 91
13892: PPUSH
13893: LD_INT 63
13895: PPUSH
13896: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13900: LD_VAR 0 14
13904: PPUSH
13905: LD_INT 75
13907: PPUSH
13908: LD_INT 33
13910: PPUSH
13911: CALL_OW 174
// end ;
13915: GO 13882
13917: POP
13918: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13919: LD_INT 13
13921: PPUSH
13922: LD_INT 22
13924: PUSH
13925: LD_VAR 0 1
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PPUSH
13934: CALL_OW 70
13938: PUSH
13939: LD_INT 2
13941: GREATER
13942: IFFALSE 13865
// repeat wait ( 0 0$3 ) ;
13944: LD_INT 105
13946: PPUSH
13947: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13951: LD_ADDR_VAR 0 17
13955: PUSH
13956: LD_INT 22
13958: PUSH
13959: LD_VAR 0 1
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 1
13970: PUSH
13971: LD_INT 3
13973: PUSH
13974: LD_INT 24
13976: PUSH
13977: LD_INT 550
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 24
13990: PUSH
13991: LD_INT 250
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: LIST
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PPUSH
14007: CALL_OW 69
14011: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14012: LD_ADDR_VAR 0 19
14016: PUSH
14017: LD_INT 22
14019: PUSH
14020: LD_VAR 0 1
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 2
14031: PUSH
14032: LD_INT 25
14034: PUSH
14035: LD_INT 1
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 25
14044: PUSH
14045: LD_INT 5
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 25
14054: PUSH
14055: LD_INT 8
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: LD_INT 25
14064: PUSH
14065: LD_INT 9
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: PUSH
14079: LD_INT 24
14081: PUSH
14082: LD_INT 1000
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: PPUSH
14094: CALL_OW 69
14098: ST_TO_ADDR
// if medicCount > 0 then
14099: LD_VAR 0 7
14103: PUSH
14104: LD_INT 0
14106: GREATER
14107: IFFALSE 14181
// begin if damageUnit_list > 0 then
14109: LD_VAR 0 17
14113: PUSH
14114: LD_INT 0
14116: GREATER
14117: IFFALSE 14181
// begin for i in damageUnit_list do
14119: LD_ADDR_VAR 0 14
14123: PUSH
14124: LD_VAR 0 17
14128: PUSH
14129: FOR_IN
14130: IFFALSE 14179
// begin ComMoveToArea ( i , healArea ) ;
14132: LD_VAR 0 14
14136: PPUSH
14137: LD_VAR 0 10
14141: PPUSH
14142: CALL_OW 113
// for j in medic_list do
14146: LD_ADDR_VAR 0 15
14150: PUSH
14151: LD_VAR 0 18
14155: PUSH
14156: FOR_IN
14157: IFFALSE 14175
// AddComHeal ( j , i ) ;
14159: LD_VAR 0 15
14163: PPUSH
14164: LD_VAR 0 14
14168: PPUSH
14169: CALL_OW 188
14173: GO 14156
14175: POP
14176: POP
// end ;
14177: GO 14129
14179: POP
14180: POP
// end ; end ; for i in soldiersOK_list do
14181: LD_ADDR_VAR 0 14
14185: PUSH
14186: LD_VAR 0 19
14190: PUSH
14191: FOR_IN
14192: IFFALSE 14368
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14194: LD_ADDR_VAR 0 22
14198: PUSH
14199: LD_INT 22
14201: PUSH
14202: LD_VAR 0 11
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: PPUSH
14211: CALL_OW 69
14215: PPUSH
14216: LD_VAR 0 14
14220: PPUSH
14221: CALL_OW 74
14225: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14226: LD_ADDR_VAR 0 23
14230: PUSH
14231: LD_INT 22
14233: PUSH
14234: LD_VAR 0 11
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 2
14245: PUSH
14246: LD_INT 59
14248: PUSH
14249: EMPTY
14250: LIST
14251: PUSH
14252: LD_INT 21
14254: PUSH
14255: LD_INT 1
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: LD_INT 21
14264: PUSH
14265: LD_INT 2
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: PPUSH
14285: CALL_OW 69
14289: PPUSH
14290: LD_VAR 0 14
14294: PPUSH
14295: CALL_OW 74
14299: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14300: LD_VAR 0 14
14304: PPUSH
14305: LD_VAR 0 22
14309: PPUSH
14310: CALL_OW 296
14314: PUSH
14315: LD_INT 6
14317: PLUS
14318: PUSH
14319: LD_VAR 0 14
14323: PPUSH
14324: LD_VAR 0 23
14328: PPUSH
14329: CALL_OW 296
14333: LESS
14334: IFFALSE 14352
// begin ComAttackUnit ( i , target1 ) ;
14336: LD_VAR 0 14
14340: PPUSH
14341: LD_VAR 0 22
14345: PPUSH
14346: CALL_OW 115
// end else
14350: GO 14366
// begin ComAttackUnit ( i , target2 ) ;
14352: LD_VAR 0 14
14356: PPUSH
14357: LD_VAR 0 23
14361: PPUSH
14362: CALL_OW 115
// end ; end ;
14366: GO 14191
14368: POP
14369: POP
// until soldiersOK_list = [ ] ;
14370: LD_VAR 0 19
14374: PUSH
14375: EMPTY
14376: EQUAL
14377: IFFALSE 13944
// end ; if strategy = 3 then
14379: LD_VAR 0 12
14383: PUSH
14384: LD_INT 3
14386: EQUAL
14387: IFFALSE 14933
// begin repeat wait ( 0 0$3 ) ;
14389: LD_INT 105
14391: PPUSH
14392: CALL_OW 67
// for i in soldiersOK_list do
14396: LD_ADDR_VAR 0 14
14400: PUSH
14401: LD_VAR 0 19
14405: PUSH
14406: FOR_IN
14407: IFFALSE 14471
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14409: LD_VAR 0 14
14413: PPUSH
14414: LD_INT 63
14416: PPUSH
14417: LD_INT 71
14419: PPUSH
14420: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14424: LD_VAR 0 14
14428: PPUSH
14429: LD_INT 35
14431: PPUSH
14432: LD_INT 44
14434: PPUSH
14435: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14439: LD_VAR 0 14
14443: PPUSH
14444: LD_INT 23
14446: PPUSH
14447: LD_INT 18
14449: PPUSH
14450: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14454: LD_VAR 0 14
14458: PPUSH
14459: LD_INT 26
14461: PPUSH
14462: LD_INT 12
14464: PPUSH
14465: CALL_OW 174
// end ;
14469: GO 14406
14471: POP
14472: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14473: LD_INT 14
14475: PPUSH
14476: LD_INT 22
14478: PUSH
14479: LD_VAR 0 1
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PPUSH
14488: CALL_OW 70
14492: PUSH
14493: LD_INT 2
14495: GREATER
14496: IFFALSE 14389
// repeat wait ( 0 0$1 ) ;
14498: LD_INT 35
14500: PPUSH
14501: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14505: LD_ADDR_VAR 0 17
14509: PUSH
14510: LD_INT 22
14512: PUSH
14513: LD_VAR 0 1
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PUSH
14522: LD_INT 1
14524: PUSH
14525: LD_INT 3
14527: PUSH
14528: LD_INT 24
14530: PUSH
14531: LD_INT 550
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 24
14544: PUSH
14545: LD_INT 250
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: LIST
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PPUSH
14561: CALL_OW 69
14565: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14566: LD_ADDR_VAR 0 19
14570: PUSH
14571: LD_INT 22
14573: PUSH
14574: LD_VAR 0 1
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 2
14585: PUSH
14586: LD_INT 25
14588: PUSH
14589: LD_INT 1
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PUSH
14596: LD_INT 25
14598: PUSH
14599: LD_INT 5
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 25
14608: PUSH
14609: LD_INT 8
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 25
14618: PUSH
14619: LD_INT 9
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: PUSH
14633: LD_INT 24
14635: PUSH
14636: LD_INT 1000
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: LIST
14647: PPUSH
14648: CALL_OW 69
14652: ST_TO_ADDR
// if medicCount > 0 then
14653: LD_VAR 0 7
14657: PUSH
14658: LD_INT 0
14660: GREATER
14661: IFFALSE 14735
// begin if damageUnit_list > 0 then
14663: LD_VAR 0 17
14667: PUSH
14668: LD_INT 0
14670: GREATER
14671: IFFALSE 14735
// begin for i in damageUnit_list do
14673: LD_ADDR_VAR 0 14
14677: PUSH
14678: LD_VAR 0 17
14682: PUSH
14683: FOR_IN
14684: IFFALSE 14733
// begin ComMoveToArea ( i , healArea ) ;
14686: LD_VAR 0 14
14690: PPUSH
14691: LD_VAR 0 10
14695: PPUSH
14696: CALL_OW 113
// for j in medic_list do
14700: LD_ADDR_VAR 0 15
14704: PUSH
14705: LD_VAR 0 18
14709: PUSH
14710: FOR_IN
14711: IFFALSE 14729
// AddComHeal ( j , i ) ;
14713: LD_VAR 0 15
14717: PPUSH
14718: LD_VAR 0 14
14722: PPUSH
14723: CALL_OW 188
14727: GO 14710
14729: POP
14730: POP
// end ;
14731: GO 14683
14733: POP
14734: POP
// end ; end ; for i in soldiersOK_list do
14735: LD_ADDR_VAR 0 14
14739: PUSH
14740: LD_VAR 0 19
14744: PUSH
14745: FOR_IN
14746: IFFALSE 14922
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14748: LD_ADDR_VAR 0 22
14752: PUSH
14753: LD_INT 22
14755: PUSH
14756: LD_VAR 0 11
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PPUSH
14765: CALL_OW 69
14769: PPUSH
14770: LD_VAR 0 14
14774: PPUSH
14775: CALL_OW 74
14779: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14780: LD_ADDR_VAR 0 23
14784: PUSH
14785: LD_INT 22
14787: PUSH
14788: LD_VAR 0 11
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 2
14799: PUSH
14800: LD_INT 59
14802: PUSH
14803: EMPTY
14804: LIST
14805: PUSH
14806: LD_INT 21
14808: PUSH
14809: LD_INT 1
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 21
14818: PUSH
14819: LD_INT 2
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: EMPTY
14837: LIST
14838: PPUSH
14839: CALL_OW 69
14843: PPUSH
14844: LD_VAR 0 14
14848: PPUSH
14849: CALL_OW 74
14853: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14854: LD_VAR 0 14
14858: PPUSH
14859: LD_VAR 0 22
14863: PPUSH
14864: CALL_OW 296
14868: PUSH
14869: LD_INT 6
14871: PLUS
14872: PUSH
14873: LD_VAR 0 14
14877: PPUSH
14878: LD_VAR 0 23
14882: PPUSH
14883: CALL_OW 296
14887: LESS
14888: IFFALSE 14906
// begin ComAttackUnit ( i , target1 ) ;
14890: LD_VAR 0 14
14894: PPUSH
14895: LD_VAR 0 22
14899: PPUSH
14900: CALL_OW 115
// end else
14904: GO 14920
// begin ComAttackUnit ( i , target2 ) ;
14906: LD_VAR 0 14
14910: PPUSH
14911: LD_VAR 0 23
14915: PPUSH
14916: CALL_OW 115
// end ; end ;
14920: GO 14745
14922: POP
14923: POP
// until soldiersOK_list = [ ] ;
14924: LD_VAR 0 19
14928: PUSH
14929: EMPTY
14930: EQUAL
14931: IFFALSE 14498
// end ; end ;
14933: LD_VAR 0 13
14937: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14938: LD_INT 0
14940: PPUSH
14941: PPUSH
14942: PPUSH
14943: PPUSH
14944: PPUSH
14945: PPUSH
14946: PPUSH
14947: PPUSH
14948: PPUSH
14949: PPUSH
14950: PPUSH
// amChassisTab = [ ] ;
14951: LD_ADDR_VAR 0 19
14955: PUSH
14956: EMPTY
14957: ST_TO_ADDR
// arChassisTab = [ ] ;
14958: LD_ADDR_VAR 0 18
14962: PUSH
14963: EMPTY
14964: ST_TO_ADDR
// ruChassisTab = [ ] ;
14965: LD_ADDR_VAR 0 17
14969: PUSH
14970: EMPTY
14971: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14972: LD_INT 35
14974: PPUSH
14975: CALL_OW 67
// if nation = 1 then
14979: LD_VAR 0 5
14983: PUSH
14984: LD_INT 1
14986: EQUAL
14987: IFFALSE 15478
// begin uc_side = side ;
14989: LD_ADDR_OWVAR 20
14993: PUSH
14994: LD_VAR 0 2
14998: ST_TO_ADDR
// uc_nation = nation ;
14999: LD_ADDR_OWVAR 21
15003: PUSH
15004: LD_VAR 0 5
15008: ST_TO_ADDR
// vc_engine = vehengine ;
15009: LD_ADDR_OWVAR 39
15013: PUSH
15014: LD_VAR 0 6
15018: ST_TO_ADDR
// vc_control = vehcontrol ;
15019: LD_ADDR_OWVAR 38
15023: PUSH
15024: LD_VAR 0 7
15028: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15029: LD_ADDR_OWVAR 40
15033: PUSH
15034: LD_VAR 0 10
15038: PUSH
15039: LD_INT 1
15041: PPUSH
15042: LD_VAR 0 10
15046: PPUSH
15047: CALL_OW 12
15051: ARRAY
15052: ST_TO_ADDR
// for j = 1 to AMWeapon do
15053: LD_ADDR_VAR 0 14
15057: PUSH
15058: DOUBLE
15059: LD_INT 1
15061: DEC
15062: ST_TO_ADDR
15063: LD_VAR 0 10
15067: PUSH
15068: FOR_TO
15069: IFFALSE 15370
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15071: LD_VAR 0 10
15075: PUSH
15076: LD_VAR 0 14
15080: ARRAY
15081: PUSH
15082: LD_INT 2
15084: EQUAL
15085: PUSH
15086: LD_VAR 0 10
15090: PUSH
15091: LD_VAR 0 14
15095: ARRAY
15096: PUSH
15097: LD_INT 3
15099: EQUAL
15100: OR
15101: IFFALSE 15154
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15103: LD_ADDR_VAR 0 19
15107: PUSH
15108: LD_INT 1
15110: PUSH
15111: LD_INT 2
15113: PUSH
15114: LD_INT 3
15116: PUSH
15117: LD_INT 4
15119: PUSH
15120: LD_INT 5
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15130: LD_ADDR_OWVAR 37
15134: PUSH
15135: LD_VAR 0 19
15139: PUSH
15140: LD_INT 1
15142: PPUSH
15143: LD_VAR 0 19
15147: PPUSH
15148: CALL_OW 12
15152: ARRAY
15153: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15154: LD_VAR 0 10
15158: PUSH
15159: LD_VAR 0 14
15163: ARRAY
15164: PUSH
15165: LD_INT 4
15167: EQUAL
15168: PUSH
15169: LD_VAR 0 10
15173: PUSH
15174: LD_VAR 0 14
15178: ARRAY
15179: PUSH
15180: LD_INT 5
15182: EQUAL
15183: OR
15184: PUSH
15185: LD_VAR 0 10
15189: PUSH
15190: LD_VAR 0 14
15194: ARRAY
15195: PUSH
15196: LD_INT 9
15198: EQUAL
15199: OR
15200: PUSH
15201: LD_VAR 0 10
15205: PUSH
15206: LD_VAR 0 14
15210: ARRAY
15211: PUSH
15212: LD_INT 11
15214: EQUAL
15215: OR
15216: PUSH
15217: LD_VAR 0 10
15221: PUSH
15222: LD_VAR 0 14
15226: ARRAY
15227: PUSH
15228: LD_INT 7
15230: EQUAL
15231: OR
15232: IFFALSE 15281
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15234: LD_ADDR_VAR 0 19
15238: PUSH
15239: LD_INT 2
15241: PUSH
15242: LD_INT 3
15244: PUSH
15245: LD_INT 4
15247: PUSH
15248: LD_INT 5
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15257: LD_ADDR_OWVAR 37
15261: PUSH
15262: LD_VAR 0 19
15266: PUSH
15267: LD_INT 1
15269: PPUSH
15270: LD_VAR 0 19
15274: PPUSH
15275: CALL_OW 12
15279: ARRAY
15280: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15281: LD_VAR 0 10
15285: PUSH
15286: LD_VAR 0 14
15290: ARRAY
15291: PUSH
15292: LD_INT 8
15294: EQUAL
15295: PUSH
15296: LD_VAR 0 10
15300: PUSH
15301: LD_VAR 0 14
15305: ARRAY
15306: PUSH
15307: LD_INT 6
15309: EQUAL
15310: OR
15311: PUSH
15312: LD_VAR 0 10
15316: PUSH
15317: LD_VAR 0 14
15321: ARRAY
15322: PUSH
15323: LD_INT 10
15325: EQUAL
15326: OR
15327: IFFALSE 15368
// begin amChassisTab = [ 4 , 5 ] ;
15329: LD_ADDR_VAR 0 19
15333: PUSH
15334: LD_INT 4
15336: PUSH
15337: LD_INT 5
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15344: LD_ADDR_OWVAR 37
15348: PUSH
15349: LD_VAR 0 19
15353: PUSH
15354: LD_INT 1
15356: PPUSH
15357: LD_VAR 0 19
15361: PPUSH
15362: CALL_OW 12
15366: ARRAY
15367: ST_TO_ADDR
// end ; end ;
15368: GO 15068
15370: POP
15371: POP
// veh = CreateVehicle ;
15372: LD_ADDR_VAR 0 16
15376: PUSH
15377: CALL_OW 45
15381: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15382: LD_VAR 0 16
15386: PPUSH
15387: LD_VAR 0 1
15391: PPUSH
15392: LD_INT 0
15394: PPUSH
15395: CALL_OW 49
// if vehControl = 1 then
15399: LD_VAR 0 7
15403: PUSH
15404: LD_INT 1
15406: EQUAL
15407: IFFALSE 15464
// begin hc_gallery =  ;
15409: LD_ADDR_OWVAR 33
15413: PUSH
15414: LD_STRING 
15416: ST_TO_ADDR
// hc_name =  ;
15417: LD_ADDR_OWVAR 26
15421: PUSH
15422: LD_STRING 
15424: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15425: LD_INT 0
15427: PPUSH
15428: LD_INT 3
15430: PPUSH
15431: LD_VAR 0 4
15435: PPUSH
15436: CALL_OW 380
// un = CreateHuman ;
15440: LD_ADDR_VAR 0 15
15444: PUSH
15445: CALL_OW 44
15449: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15450: LD_VAR 0 15
15454: PPUSH
15455: LD_VAR 0 16
15459: PPUSH
15460: CALL_OW 52
// end ; i = i + 1 ;
15464: LD_ADDR_VAR 0 13
15468: PUSH
15469: LD_VAR 0 13
15473: PUSH
15474: LD_INT 1
15476: PLUS
15477: ST_TO_ADDR
// end ; if nation = 2 then
15478: LD_VAR 0 5
15482: PUSH
15483: LD_INT 2
15485: EQUAL
15486: IFFALSE 15910
// begin uc_side = side ;
15488: LD_ADDR_OWVAR 20
15492: PUSH
15493: LD_VAR 0 2
15497: ST_TO_ADDR
// uc_nation = nation ;
15498: LD_ADDR_OWVAR 21
15502: PUSH
15503: LD_VAR 0 5
15507: ST_TO_ADDR
// vc_engine = vehengine ;
15508: LD_ADDR_OWVAR 39
15512: PUSH
15513: LD_VAR 0 6
15517: ST_TO_ADDR
// vc_control = vehcontrol ;
15518: LD_ADDR_OWVAR 38
15522: PUSH
15523: LD_VAR 0 7
15527: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15528: LD_ADDR_OWVAR 40
15532: PUSH
15533: LD_VAR 0 9
15537: PUSH
15538: LD_INT 1
15540: PPUSH
15541: LD_VAR 0 9
15545: PPUSH
15546: CALL_OW 12
15550: ARRAY
15551: ST_TO_ADDR
// for j = 1 to ARWeapons do
15552: LD_ADDR_VAR 0 14
15556: PUSH
15557: DOUBLE
15558: LD_INT 1
15560: DEC
15561: ST_TO_ADDR
15562: LD_VAR 0 9
15566: PUSH
15567: FOR_TO
15568: IFFALSE 15802
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15570: LD_VAR 0 9
15574: PUSH
15575: LD_VAR 0 14
15579: ARRAY
15580: PUSH
15581: LD_INT 24
15583: EQUAL
15584: PUSH
15585: LD_VAR 0 9
15589: PUSH
15590: LD_VAR 0 14
15594: ARRAY
15595: PUSH
15596: LD_INT 22
15598: EQUAL
15599: OR
15600: PUSH
15601: LD_VAR 0 9
15605: PUSH
15606: LD_VAR 0 14
15610: ARRAY
15611: PUSH
15612: LD_INT 23
15614: EQUAL
15615: OR
15616: PUSH
15617: LD_VAR 0 9
15621: PUSH
15622: LD_VAR 0 14
15626: ARRAY
15627: PUSH
15628: LD_INT 30
15630: EQUAL
15631: OR
15632: IFFALSE 15681
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15634: LD_ADDR_VAR 0 18
15638: PUSH
15639: LD_INT 11
15641: PUSH
15642: LD_INT 12
15644: PUSH
15645: LD_INT 13
15647: PUSH
15648: LD_INT 14
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15657: LD_ADDR_OWVAR 37
15661: PUSH
15662: LD_VAR 0 18
15666: PUSH
15667: LD_INT 1
15669: PPUSH
15670: LD_VAR 0 18
15674: PPUSH
15675: CALL_OW 12
15679: ARRAY
15680: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15681: LD_VAR 0 9
15685: PUSH
15686: LD_VAR 0 14
15690: ARRAY
15691: PUSH
15692: LD_INT 29
15694: EQUAL
15695: PUSH
15696: LD_VAR 0 9
15700: PUSH
15701: LD_VAR 0 14
15705: ARRAY
15706: PUSH
15707: LD_INT 28
15709: EQUAL
15710: OR
15711: PUSH
15712: LD_VAR 0 9
15716: PUSH
15717: LD_VAR 0 14
15721: ARRAY
15722: PUSH
15723: LD_INT 27
15725: EQUAL
15726: OR
15727: PUSH
15728: LD_VAR 0 9
15732: PUSH
15733: LD_VAR 0 14
15737: ARRAY
15738: PUSH
15739: LD_INT 26
15741: EQUAL
15742: OR
15743: PUSH
15744: LD_VAR 0 9
15748: PUSH
15749: LD_VAR 0 14
15753: ARRAY
15754: PUSH
15755: LD_INT 25
15757: EQUAL
15758: OR
15759: IFFALSE 15800
// begin arChassisTab = [ 13 , 14 ] ;
15761: LD_ADDR_VAR 0 18
15765: PUSH
15766: LD_INT 13
15768: PUSH
15769: LD_INT 14
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15776: LD_ADDR_OWVAR 37
15780: PUSH
15781: LD_VAR 0 18
15785: PUSH
15786: LD_INT 1
15788: PPUSH
15789: LD_VAR 0 18
15793: PPUSH
15794: CALL_OW 12
15798: ARRAY
15799: ST_TO_ADDR
// end ; end ;
15800: GO 15567
15802: POP
15803: POP
// veh = CreateVehicle ;
15804: LD_ADDR_VAR 0 16
15808: PUSH
15809: CALL_OW 45
15813: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15814: LD_VAR 0 16
15818: PPUSH
15819: LD_VAR 0 1
15823: PPUSH
15824: LD_INT 0
15826: PPUSH
15827: CALL_OW 49
// if vehcontrol = 1 then
15831: LD_VAR 0 7
15835: PUSH
15836: LD_INT 1
15838: EQUAL
15839: IFFALSE 15896
// begin hc_gallery =  ;
15841: LD_ADDR_OWVAR 33
15845: PUSH
15846: LD_STRING 
15848: ST_TO_ADDR
// hc_name =  ;
15849: LD_ADDR_OWVAR 26
15853: PUSH
15854: LD_STRING 
15856: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15857: LD_INT 0
15859: PPUSH
15860: LD_INT 3
15862: PPUSH
15863: LD_VAR 0 4
15867: PPUSH
15868: CALL_OW 380
// un = CreateHuman ;
15872: LD_ADDR_VAR 0 15
15876: PUSH
15877: CALL_OW 44
15881: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15882: LD_VAR 0 15
15886: PPUSH
15887: LD_VAR 0 16
15891: PPUSH
15892: CALL_OW 52
// end ; i = i + 1 ;
15896: LD_ADDR_VAR 0 13
15900: PUSH
15901: LD_VAR 0 13
15905: PUSH
15906: LD_INT 1
15908: PLUS
15909: ST_TO_ADDR
// end ; if nation = 3 then
15910: LD_VAR 0 5
15914: PUSH
15915: LD_INT 3
15917: EQUAL
15918: IFFALSE 16310
// begin uc_side = side ;
15920: LD_ADDR_OWVAR 20
15924: PUSH
15925: LD_VAR 0 2
15929: ST_TO_ADDR
// uc_nation = nation ;
15930: LD_ADDR_OWVAR 21
15934: PUSH
15935: LD_VAR 0 5
15939: ST_TO_ADDR
// vc_engine = vehengine ;
15940: LD_ADDR_OWVAR 39
15944: PUSH
15945: LD_VAR 0 6
15949: ST_TO_ADDR
// vc_control = vehcontrol ;
15950: LD_ADDR_OWVAR 38
15954: PUSH
15955: LD_VAR 0 7
15959: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15960: LD_ADDR_OWVAR 40
15964: PUSH
15965: LD_VAR 0 8
15969: PUSH
15970: LD_INT 1
15972: PPUSH
15973: LD_VAR 0 8
15977: PPUSH
15978: CALL_OW 12
15982: ARRAY
15983: ST_TO_ADDR
// for j = 1 to RuWeapons do
15984: LD_ADDR_VAR 0 14
15988: PUSH
15989: DOUBLE
15990: LD_INT 1
15992: DEC
15993: ST_TO_ADDR
15994: LD_VAR 0 8
15998: PUSH
15999: FOR_TO
16000: IFFALSE 16202
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16002: LD_VAR 0 8
16006: PUSH
16007: LD_VAR 0 14
16011: ARRAY
16012: PUSH
16013: LD_INT 42
16015: EQUAL
16016: PUSH
16017: LD_VAR 0 8
16021: PUSH
16022: LD_VAR 0 14
16026: ARRAY
16027: PUSH
16028: LD_INT 43
16030: EQUAL
16031: OR
16032: PUSH
16033: LD_VAR 0 8
16037: PUSH
16038: LD_VAR 0 14
16042: ARRAY
16043: PUSH
16044: LD_INT 44
16046: EQUAL
16047: OR
16048: PUSH
16049: LD_VAR 0 8
16053: PUSH
16054: LD_VAR 0 14
16058: ARRAY
16059: PUSH
16060: LD_INT 45
16062: EQUAL
16063: OR
16064: PUSH
16065: LD_VAR 0 8
16069: PUSH
16070: LD_VAR 0 14
16074: ARRAY
16075: PUSH
16076: LD_INT 49
16078: EQUAL
16079: OR
16080: IFFALSE 16129
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16082: LD_ADDR_VAR 0 17
16086: PUSH
16087: LD_INT 21
16089: PUSH
16090: LD_INT 22
16092: PUSH
16093: LD_INT 23
16095: PUSH
16096: LD_INT 24
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16105: LD_ADDR_OWVAR 37
16109: PUSH
16110: LD_VAR 0 17
16114: PUSH
16115: LD_INT 1
16117: PPUSH
16118: LD_VAR 0 17
16122: PPUSH
16123: CALL_OW 12
16127: ARRAY
16128: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16129: LD_VAR 0 8
16133: PUSH
16134: LD_VAR 0 14
16138: ARRAY
16139: PUSH
16140: LD_INT 46
16142: EQUAL
16143: PUSH
16144: LD_VAR 0 8
16148: PUSH
16149: LD_VAR 0 14
16153: ARRAY
16154: PUSH
16155: LD_INT 47
16157: EQUAL
16158: OR
16159: IFFALSE 16200
// begin ruChassisTab = [ 23 , 24 ] ;
16161: LD_ADDR_VAR 0 17
16165: PUSH
16166: LD_INT 23
16168: PUSH
16169: LD_INT 24
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16176: LD_ADDR_OWVAR 37
16180: PUSH
16181: LD_VAR 0 17
16185: PUSH
16186: LD_INT 1
16188: PPUSH
16189: LD_VAR 0 17
16193: PPUSH
16194: CALL_OW 12
16198: ARRAY
16199: ST_TO_ADDR
// end ; end ;
16200: GO 15999
16202: POP
16203: POP
// veh = CreateVehicle ;
16204: LD_ADDR_VAR 0 16
16208: PUSH
16209: CALL_OW 45
16213: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16214: LD_VAR 0 16
16218: PPUSH
16219: LD_VAR 0 1
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 49
// if vehcontrol = 1 then
16231: LD_VAR 0 7
16235: PUSH
16236: LD_INT 1
16238: EQUAL
16239: IFFALSE 16296
// begin hc_gallery =  ;
16241: LD_ADDR_OWVAR 33
16245: PUSH
16246: LD_STRING 
16248: ST_TO_ADDR
// hc_name =  ;
16249: LD_ADDR_OWVAR 26
16253: PUSH
16254: LD_STRING 
16256: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16257: LD_INT 0
16259: PPUSH
16260: LD_INT 3
16262: PPUSH
16263: LD_VAR 0 4
16267: PPUSH
16268: CALL_OW 380
// un = CreateHuman ;
16272: LD_ADDR_VAR 0 15
16276: PUSH
16277: CALL_OW 44
16281: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16282: LD_VAR 0 15
16286: PPUSH
16287: LD_VAR 0 16
16291: PPUSH
16292: CALL_OW 52
// end ; i = i + 1 ;
16296: LD_ADDR_VAR 0 13
16300: PUSH
16301: LD_VAR 0 13
16305: PUSH
16306: LD_INT 1
16308: PLUS
16309: ST_TO_ADDR
// end ; until i = vehCount ;
16310: LD_VAR 0 13
16314: PUSH
16315: LD_VAR 0 3
16319: EQUAL
16320: IFFALSE 14972
// repeat wait ( 0 0$1 ) ;
16322: LD_INT 35
16324: PPUSH
16325: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16329: LD_ADDR_VAR 0 20
16333: PUSH
16334: LD_INT 22
16336: PUSH
16337: LD_VAR 0 2
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 21
16348: PUSH
16349: LD_INT 2
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: LD_INT 24
16358: PUSH
16359: LD_INT 250
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: LIST
16370: PPUSH
16371: CALL_OW 69
16375: ST_TO_ADDR
// if vehicleOK_list > 0 then
16376: LD_VAR 0 20
16380: PUSH
16381: LD_INT 0
16383: GREATER
16384: IFFALSE 16575
// begin for i in vehicleOK_list do
16386: LD_ADDR_VAR 0 13
16390: PUSH
16391: LD_VAR 0 20
16395: PUSH
16396: FOR_IN
16397: IFFALSE 16573
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16399: LD_ADDR_VAR 0 21
16403: PUSH
16404: LD_INT 22
16406: PUSH
16407: LD_VAR 0 11
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PPUSH
16416: CALL_OW 69
16420: PPUSH
16421: LD_VAR 0 13
16425: PPUSH
16426: CALL_OW 74
16430: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16431: LD_ADDR_VAR 0 22
16435: PUSH
16436: LD_INT 22
16438: PUSH
16439: LD_VAR 0 11
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 59
16453: PUSH
16454: EMPTY
16455: LIST
16456: PUSH
16457: LD_INT 21
16459: PUSH
16460: LD_INT 1
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 21
16469: PUSH
16470: LD_INT 2
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: PPUSH
16490: CALL_OW 69
16494: PPUSH
16495: LD_VAR 0 13
16499: PPUSH
16500: CALL_OW 74
16504: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16505: LD_VAR 0 13
16509: PPUSH
16510: LD_VAR 0 21
16514: PPUSH
16515: CALL_OW 296
16519: PUSH
16520: LD_INT 6
16522: PLUS
16523: PUSH
16524: LD_VAR 0 13
16528: PPUSH
16529: LD_VAR 0 22
16533: PPUSH
16534: CALL_OW 296
16538: LESS
16539: IFFALSE 16557
// begin ComAttackUnit ( i , target1 ) ;
16541: LD_VAR 0 13
16545: PPUSH
16546: LD_VAR 0 21
16550: PPUSH
16551: CALL_OW 115
// end else
16555: GO 16571
// begin ComAttackUnit ( i , target2 ) ;
16557: LD_VAR 0 13
16561: PPUSH
16562: LD_VAR 0 22
16566: PPUSH
16567: CALL_OW 115
// end ; end ;
16571: GO 16396
16573: POP
16574: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16575: LD_INT 22
16577: PUSH
16578: LD_VAR 0 2
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 21
16589: PUSH
16590: LD_INT 2
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 24
16599: PUSH
16600: LD_INT 250
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: PUSH
16617: LD_INT 0
16619: EQUAL
16620: IFFALSE 16322
// end ;
16622: LD_VAR 0 12
16626: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16627: LD_INT 0
16629: PPUSH
16630: PPUSH
16631: PPUSH
16632: PPUSH
16633: PPUSH
16634: PPUSH
16635: PPUSH
16636: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16637: LD_ADDR_VAR 0 7
16641: PUSH
16642: LD_INT 22
16644: PUSH
16645: LD_VAR 0 1
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 1
16656: PUSH
16657: LD_INT 3
16659: PUSH
16660: LD_INT 24
16662: PUSH
16663: LD_INT 550
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 24
16676: PUSH
16677: LD_INT 250
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PPUSH
16693: CALL_OW 69
16697: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16698: LD_ADDR_VAR 0 8
16702: PUSH
16703: LD_INT 22
16705: PUSH
16706: LD_VAR 0 1
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 2
16717: PUSH
16718: LD_INT 25
16720: PUSH
16721: LD_INT 1
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 25
16730: PUSH
16731: LD_INT 5
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 25
16740: PUSH
16741: LD_INT 8
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 25
16750: PUSH
16751: LD_INT 9
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 24
16767: PUSH
16768: LD_INT 1000
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: LIST
16779: PPUSH
16780: CALL_OW 69
16784: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16785: LD_ADDR_VAR 0 9
16789: PUSH
16790: LD_INT 22
16792: PUSH
16793: LD_VAR 0 1
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 25
16804: PUSH
16805: LD_INT 4
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PPUSH
16816: CALL_OW 69
16820: ST_TO_ADDR
// if medicCount > 0 then
16821: LD_VAR 0 9
16825: PUSH
16826: LD_INT 0
16828: GREATER
16829: IFFALSE 16903
// begin if damageUnit_list > 0 then
16831: LD_VAR 0 7
16835: PUSH
16836: LD_INT 0
16838: GREATER
16839: IFFALSE 16903
// begin for i in damageUnit_list do
16841: LD_ADDR_VAR 0 5
16845: PUSH
16846: LD_VAR 0 7
16850: PUSH
16851: FOR_IN
16852: IFFALSE 16901
// begin ComMoveToArea ( i , healArea ) ;
16854: LD_VAR 0 5
16858: PPUSH
16859: LD_VAR 0 2
16863: PPUSH
16864: CALL_OW 113
// for j in medicCount do
16868: LD_ADDR_VAR 0 6
16872: PUSH
16873: LD_VAR 0 9
16877: PUSH
16878: FOR_IN
16879: IFFALSE 16897
// AddComHeal ( j , i ) ;
16881: LD_VAR 0 6
16885: PPUSH
16886: LD_VAR 0 5
16890: PPUSH
16891: CALL_OW 188
16895: GO 16878
16897: POP
16898: POP
// end ;
16899: GO 16851
16901: POP
16902: POP
// end ; end ; if soldiersOK_list > 0 then
16903: LD_VAR 0 8
16907: PUSH
16908: LD_INT 0
16910: GREATER
16911: IFFALSE 17102
// begin for i in soldiersOK_list do
16913: LD_ADDR_VAR 0 5
16917: PUSH
16918: LD_VAR 0 8
16922: PUSH
16923: FOR_IN
16924: IFFALSE 17100
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16926: LD_ADDR_VAR 0 10
16930: PUSH
16931: LD_INT 22
16933: PUSH
16934: LD_VAR 0 3
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PPUSH
16943: CALL_OW 69
16947: PPUSH
16948: LD_VAR 0 5
16952: PPUSH
16953: CALL_OW 74
16957: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16958: LD_ADDR_VAR 0 11
16962: PUSH
16963: LD_INT 22
16965: PUSH
16966: LD_VAR 0 3
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 2
16977: PUSH
16978: LD_INT 59
16980: PUSH
16981: EMPTY
16982: LIST
16983: PUSH
16984: LD_INT 21
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 21
16996: PUSH
16997: LD_INT 2
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: EMPTY
17015: LIST
17016: PPUSH
17017: CALL_OW 69
17021: PPUSH
17022: LD_VAR 0 5
17026: PPUSH
17027: CALL_OW 74
17031: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17032: LD_VAR 0 5
17036: PPUSH
17037: LD_VAR 0 10
17041: PPUSH
17042: CALL_OW 296
17046: PUSH
17047: LD_INT 8
17049: PLUS
17050: PUSH
17051: LD_VAR 0 5
17055: PPUSH
17056: LD_VAR 0 11
17060: PPUSH
17061: CALL_OW 296
17065: LESS
17066: IFFALSE 17084
// begin ComAttackUnit ( i , target1 ) ;
17068: LD_VAR 0 5
17072: PPUSH
17073: LD_VAR 0 10
17077: PPUSH
17078: CALL_OW 115
// end else
17082: GO 17098
// begin ComAttackUnit ( i , target2 ) ;
17084: LD_VAR 0 5
17088: PPUSH
17089: LD_VAR 0 11
17093: PPUSH
17094: CALL_OW 115
// end ; end ;
17098: GO 16923
17100: POP
17101: POP
// end ; end ;
17102: LD_VAR 0 4
17106: RET
// export function GetDriverVehicle ( unit ) ; begin
17107: LD_INT 0
17109: PPUSH
// if not unit then
17110: LD_VAR 0 1
17114: NOT
17115: IFFALSE 17119
// exit ;
17117: GO 17157
// result := IsInUnit ( unit ) ;
17119: LD_ADDR_VAR 0 2
17123: PUSH
17124: LD_VAR 0 1
17128: PPUSH
17129: CALL_OW 310
17133: ST_TO_ADDR
// if GetType ( result ) <> unit_vehicle then
17134: LD_VAR 0 2
17138: PPUSH
17139: CALL_OW 247
17143: PUSH
17144: LD_INT 2
17146: NONEQUAL
17147: IFFALSE 17157
// result := 0 ;
17149: LD_ADDR_VAR 0 2
17153: PUSH
17154: LD_INT 0
17156: ST_TO_ADDR
// end ;
17157: LD_VAR 0 2
17161: RET
// export function CanBeBuiltCost ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17162: LD_INT 0
17164: PPUSH
17165: PPUSH
17166: PPUSH
17167: PPUSH
17168: PPUSH
17169: PPUSH
17170: PPUSH
17171: PPUSH
17172: PPUSH
// result := false ;
17173: LD_ADDR_VAR 0 7
17177: PUSH
17178: LD_INT 0
17180: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17181: LD_VAR 0 1
17185: NOT
17186: PUSH
17187: LD_VAR 0 1
17191: PPUSH
17192: CALL_OW 266
17196: PUSH
17197: LD_INT 0
17199: PUSH
17200: LD_INT 1
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: IN
17207: NOT
17208: OR
17209: PUSH
17210: LD_VAR 0 2
17214: NOT
17215: OR
17216: PUSH
17217: LD_VAR 0 5
17221: PUSH
17222: LD_INT 0
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: LD_INT 3
17233: PUSH
17234: LD_INT 4
17236: PUSH
17237: LD_INT 5
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: IN
17248: NOT
17249: OR
17250: PUSH
17251: LD_VAR 0 3
17255: PPUSH
17256: LD_VAR 0 4
17260: PPUSH
17261: CALL_OW 488
17265: NOT
17266: OR
17267: IFFALSE 17271
// exit ;
17269: GO 17952
// pom := GetBase ( bdepot ) ;
17271: LD_ADDR_VAR 0 10
17275: PUSH
17276: LD_VAR 0 1
17280: PPUSH
17281: CALL_OW 274
17285: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17286: LD_ADDR_VAR 0 11
17290: PUSH
17291: LD_VAR 0 2
17295: PPUSH
17296: LD_VAR 0 1
17300: PPUSH
17301: CALL_OW 248
17305: PPUSH
17306: CALL_OW 450
17310: ST_TO_ADDR
// if check_cost then
17311: LD_VAR 0 6
17315: IFFALSE 17392
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17317: LD_VAR 0 10
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: CALL_OW 275
17329: PUSH
17330: LD_VAR 0 11
17334: PUSH
17335: LD_INT 1
17337: ARRAY
17338: GREATEREQUAL
17339: PUSH
17340: LD_VAR 0 10
17344: PPUSH
17345: LD_INT 2
17347: PPUSH
17348: CALL_OW 275
17352: PUSH
17353: LD_VAR 0 11
17357: PUSH
17358: LD_INT 2
17360: ARRAY
17361: GREATEREQUAL
17362: AND
17363: PUSH
17364: LD_VAR 0 10
17368: PPUSH
17369: LD_INT 3
17371: PPUSH
17372: CALL_OW 275
17376: PUSH
17377: LD_VAR 0 11
17381: PUSH
17382: LD_INT 3
17384: ARRAY
17385: GREATEREQUAL
17386: AND
17387: NOT
17388: IFFALSE 17392
// exit ;
17390: GO 17952
// if GetBType ( bdepot ) = b_depot then
17392: LD_VAR 0 1
17396: PPUSH
17397: CALL_OW 266
17401: PUSH
17402: LD_INT 0
17404: EQUAL
17405: IFFALSE 17417
// dist := 28 else
17407: LD_ADDR_VAR 0 14
17411: PUSH
17412: LD_INT 28
17414: ST_TO_ADDR
17415: GO 17425
// dist := 36 ;
17417: LD_ADDR_VAR 0 14
17421: PUSH
17422: LD_INT 36
17424: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17425: LD_VAR 0 1
17429: PPUSH
17430: LD_VAR 0 3
17434: PPUSH
17435: LD_VAR 0 4
17439: PPUSH
17440: CALL_OW 297
17444: PUSH
17445: LD_VAR 0 14
17449: GREATER
17450: IFFALSE 17454
// exit ;
17452: GO 17952
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
17454: LD_ADDR_VAR 0 12
17458: PUSH
17459: LD_VAR 0 2
17463: PPUSH
17464: LD_VAR 0 3
17468: PPUSH
17469: LD_VAR 0 4
17473: PPUSH
17474: LD_VAR 0 5
17478: PPUSH
17479: LD_VAR 0 1
17483: PPUSH
17484: CALL_OW 248
17488: PPUSH
17489: LD_INT 0
17491: PPUSH
17492: CALL 60213 0 6
17496: ST_TO_ADDR
// if not hexes then
17497: LD_VAR 0 12
17501: NOT
17502: IFFALSE 17506
// exit ;
17504: GO 17952
// hex := GetHexInfo ( x , y ) ;
17506: LD_ADDR_VAR 0 15
17510: PUSH
17511: LD_VAR 0 3
17515: PPUSH
17516: LD_VAR 0 4
17520: PPUSH
17521: CALL_OW 546
17525: ST_TO_ADDR
// if hex [ 1 ] then
17526: LD_VAR 0 15
17530: PUSH
17531: LD_INT 1
17533: ARRAY
17534: IFFALSE 17538
// exit ;
17536: GO 17952
// height := hex [ 2 ] ;
17538: LD_ADDR_VAR 0 13
17542: PUSH
17543: LD_VAR 0 15
17547: PUSH
17548: LD_INT 2
17550: ARRAY
17551: ST_TO_ADDR
// for i = 1 to hexes do
17552: LD_ADDR_VAR 0 8
17556: PUSH
17557: DOUBLE
17558: LD_INT 1
17560: DEC
17561: ST_TO_ADDR
17562: LD_VAR 0 12
17566: PUSH
17567: FOR_TO
17568: IFFALSE 17896
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17570: LD_VAR 0 12
17574: PUSH
17575: LD_VAR 0 8
17579: ARRAY
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: LD_VAR 0 12
17589: PUSH
17590: LD_VAR 0 8
17594: ARRAY
17595: PUSH
17596: LD_INT 2
17598: ARRAY
17599: PPUSH
17600: CALL_OW 488
17604: NOT
17605: IFFALSE 17609
// continue ;
17607: GO 17567
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17609: LD_ADDR_VAR 0 9
17613: PUSH
17614: LD_VAR 0 12
17618: PUSH
17619: LD_VAR 0 8
17623: ARRAY
17624: PUSH
17625: LD_INT 1
17627: ARRAY
17628: PPUSH
17629: LD_VAR 0 12
17633: PUSH
17634: LD_VAR 0 8
17638: ARRAY
17639: PUSH
17640: LD_INT 2
17642: ARRAY
17643: PPUSH
17644: CALL_OW 546
17648: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17649: LD_VAR 0 9
17653: PUSH
17654: LD_INT 1
17656: ARRAY
17657: PUSH
17658: LD_VAR 0 9
17662: PUSH
17663: LD_INT 2
17665: ARRAY
17666: PUSH
17667: LD_VAR 0 13
17671: PUSH
17672: LD_INT 2
17674: PLUS
17675: GREATER
17676: OR
17677: PUSH
17678: LD_VAR 0 9
17682: PUSH
17683: LD_INT 2
17685: ARRAY
17686: PUSH
17687: LD_VAR 0 13
17691: PUSH
17692: LD_INT 2
17694: MINUS
17695: LESS
17696: OR
17697: PUSH
17698: LD_VAR 0 9
17702: PUSH
17703: LD_INT 3
17705: ARRAY
17706: PUSH
17707: LD_INT 0
17709: PUSH
17710: LD_INT 8
17712: PUSH
17713: LD_INT 9
17715: PUSH
17716: LD_INT 10
17718: PUSH
17719: LD_INT 11
17721: PUSH
17722: LD_INT 12
17724: PUSH
17725: LD_INT 13
17727: PUSH
17728: LD_INT 16
17730: PUSH
17731: LD_INT 17
17733: PUSH
17734: LD_INT 18
17736: PUSH
17737: LD_INT 19
17739: PUSH
17740: LD_INT 20
17742: PUSH
17743: LD_INT 21
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: IN
17761: NOT
17762: OR
17763: PUSH
17764: LD_VAR 0 9
17768: PUSH
17769: LD_INT 5
17771: ARRAY
17772: NOT
17773: OR
17774: PUSH
17775: LD_VAR 0 9
17779: PUSH
17780: LD_INT 6
17782: ARRAY
17783: PUSH
17784: LD_INT 1
17786: PUSH
17787: LD_INT 2
17789: PUSH
17790: LD_INT 7
17792: PUSH
17793: LD_INT 9
17795: PUSH
17796: LD_INT 10
17798: PUSH
17799: LD_INT 11
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: IN
17810: NOT
17811: OR
17812: PUSH
17813: LD_VAR 0 12
17817: PUSH
17818: LD_VAR 0 8
17822: ARRAY
17823: PUSH
17824: LD_INT 1
17826: ARRAY
17827: PPUSH
17828: LD_VAR 0 12
17832: PUSH
17833: LD_VAR 0 8
17837: ARRAY
17838: PUSH
17839: LD_INT 2
17841: ARRAY
17842: PPUSH
17843: CALL_OW 428
17847: PUSH
17848: LD_INT 0
17850: GREATER
17851: OR
17852: PUSH
17853: LD_VAR 0 12
17857: PUSH
17858: LD_VAR 0 8
17862: ARRAY
17863: PUSH
17864: LD_INT 1
17866: ARRAY
17867: PPUSH
17868: LD_VAR 0 12
17872: PUSH
17873: LD_VAR 0 8
17877: ARRAY
17878: PUSH
17879: LD_INT 2
17881: ARRAY
17882: PPUSH
17883: CALL_OW 351
17887: OR
17888: IFFALSE 17894
// exit ;
17890: POP
17891: POP
17892: GO 17952
// end ;
17894: GO 17567
17896: POP
17897: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
17898: LD_VAR 0 2
17902: PUSH
17903: LD_INT 29
17905: PUSH
17906: LD_INT 30
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: IN
17913: PUSH
17914: LD_VAR 0 3
17918: PPUSH
17919: LD_VAR 0 4
17923: PPUSH
17924: LD_VAR 0 1
17928: PPUSH
17929: CALL_OW 255
17933: PPUSH
17934: CALL_OW 440
17938: NOT
17939: AND
17940: IFFALSE 17944
// exit ;
17942: GO 17952
// result := true ;
17944: LD_ADDR_VAR 0 7
17948: PUSH
17949: LD_INT 1
17951: ST_TO_ADDR
// end ; end_of_file
17952: LD_VAR 0 7
17956: RET
// every 1 do var i ;
17957: GO 17959
17959: DISABLE
17960: LD_INT 0
17962: PPUSH
// begin Video ( true ) ;
17963: LD_INT 1
17965: PPUSH
17966: CALL 82925 0 1
// CenterOnXY ( 53 , 40 ) ;
17970: LD_INT 53
17972: PPUSH
17973: LD_INT 40
17975: PPUSH
17976: CALL_OW 84
// wait ( 0 0$5 ) ;
17980: LD_INT 175
17982: PPUSH
17983: CALL_OW 67
// if gammaCommander = 1 then
17987: LD_EXP 12
17991: PUSH
17992: LD_INT 1
17994: EQUAL
17995: IFFALSE 18009
// Say ( Donaldson , D1-Don-1 ) ;
17997: LD_EXP 3
18001: PPUSH
18002: LD_STRING D1-Don-1
18004: PPUSH
18005: CALL_OW 88
// if gammaCommander = 2 then
18009: LD_EXP 12
18013: PUSH
18014: LD_INT 2
18016: EQUAL
18017: IFFALSE 18031
// Say ( Brown , D1-Brown-1 ) ;
18019: LD_EXP 2
18023: PPUSH
18024: LD_STRING D1-Brown-1
18026: PPUSH
18027: CALL_OW 88
// if gammaCommander = 3 then
18031: LD_EXP 12
18035: PUSH
18036: LD_INT 3
18038: EQUAL
18039: IFFALSE 18053
// Say ( Houten , D1-VanH-1 ) ;
18041: LD_EXP 13
18045: PPUSH
18046: LD_STRING D1-VanH-1
18048: PPUSH
18049: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
18053: LD_EXP 22
18057: PPUSH
18058: LD_STRING D1-Har-1
18060: PPUSH
18061: CALL_OW 94
// if gammaCommander = 1 then
18065: LD_EXP 12
18069: PUSH
18070: LD_INT 1
18072: EQUAL
18073: IFFALSE 18087
// Say ( Donaldson , D1-Don-2 ) ;
18075: LD_EXP 3
18079: PPUSH
18080: LD_STRING D1-Don-2
18082: PPUSH
18083: CALL_OW 88
// if gammaCommander = 2 then
18087: LD_EXP 12
18091: PUSH
18092: LD_INT 2
18094: EQUAL
18095: IFFALSE 18109
// Say ( Brown , D1-Brown-2 ) ;
18097: LD_EXP 2
18101: PPUSH
18102: LD_STRING D1-Brown-2
18104: PPUSH
18105: CALL_OW 88
// if gammaCommander = 3 then
18109: LD_EXP 12
18113: PUSH
18114: LD_INT 3
18116: EQUAL
18117: IFFALSE 18131
// Say ( Houten , D1-VanH-2 ) ;
18119: LD_EXP 13
18123: PPUSH
18124: LD_STRING D1-VanH-2
18126: PPUSH
18127: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
18131: LD_EXP 22
18135: PPUSH
18136: LD_STRING D1-Har-2
18138: PPUSH
18139: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
18143: LD_INT 22
18145: PUSH
18146: LD_INT 1
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 33
18155: PUSH
18156: LD_INT 2
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 61
18165: PUSH
18166: EMPTY
18167: LIST
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: LIST
18173: PPUSH
18174: CALL_OW 69
18178: IFFALSE 18243
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
18180: LD_ADDR_VAR 0 1
18184: PUSH
18185: LD_INT 22
18187: PUSH
18188: LD_INT 1
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 33
18197: PUSH
18198: LD_INT 2
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 61
18207: PUSH
18208: EMPTY
18209: LIST
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL_OW 69
18220: PUSH
18221: FOR_IN
18222: IFFALSE 18241
// ComAgressiveMove ( i , 70 , 41 ) ;
18224: LD_VAR 0 1
18228: PPUSH
18229: LD_INT 70
18231: PPUSH
18232: LD_INT 41
18234: PPUSH
18235: CALL_OW 114
18239: GO 18221
18241: POP
18242: POP
// repeat wait ( 0 0$1 ) ;
18243: LD_INT 35
18245: PPUSH
18246: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
18250: LD_ADDR_VAR 0 1
18254: PUSH
18255: LD_INT 22
18257: PUSH
18258: LD_INT 6
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: EMPTY
18266: LIST
18267: PPUSH
18268: CALL_OW 69
18272: PUSH
18273: FOR_IN
18274: IFFALSE 18293
// ComAgressiveMove ( i , 54 , 20 ) ;
18276: LD_VAR 0 1
18280: PPUSH
18281: LD_INT 54
18283: PPUSH
18284: LD_INT 20
18286: PPUSH
18287: CALL_OW 114
18291: GO 18273
18293: POP
18294: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
18295: LD_ADDR_VAR 0 1
18299: PUSH
18300: LD_INT 22
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 25
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 3
18322: PUSH
18323: LD_INT 54
18325: PUSH
18326: EMPTY
18327: LIST
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: LIST
18337: PPUSH
18338: CALL_OW 69
18342: PUSH
18343: FOR_IN
18344: IFFALSE 18378
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
18346: LD_VAR 0 1
18350: PPUSH
18351: LD_INT 70
18353: PPUSH
18354: LD_INT 41
18356: PPUSH
18357: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
18361: LD_VAR 0 1
18365: PPUSH
18366: LD_INT 46
18368: PPUSH
18369: LD_INT 39
18371: PPUSH
18372: CALL_OW 174
// end ;
18376: GO 18343
18378: POP
18379: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
18380: LD_ADDR_VAR 0 1
18384: PUSH
18385: LD_INT 22
18387: PUSH
18388: LD_INT 1
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 21
18397: PUSH
18398: LD_INT 1
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 3
18407: PUSH
18408: LD_INT 24
18410: PUSH
18411: LD_INT 500
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: LIST
18426: PPUSH
18427: CALL_OW 69
18431: PUSH
18432: FOR_IN
18433: IFFALSE 18466
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
18435: LD_VAR 0 1
18439: PPUSH
18440: LD_EXP 37
18444: PPUSH
18445: CALL_OW 250
18449: PPUSH
18450: LD_EXP 37
18454: PPUSH
18455: CALL_OW 251
18459: PPUSH
18460: CALL_OW 111
18464: GO 18432
18466: POP
18467: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
18468: LD_INT 22
18470: PUSH
18471: LD_INT 6
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 21
18480: PUSH
18481: LD_INT 1
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 24
18490: PUSH
18491: LD_INT 250
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: LIST
18502: PPUSH
18503: CALL_OW 69
18507: PUSH
18508: LD_INT 5
18510: LESS
18511: IFFALSE 18243
// Video ( false ) ;
18513: LD_INT 0
18515: PPUSH
18516: CALL 82925 0 1
// ChangeMissionObjectives ( M1 ) ;
18520: LD_STRING M1
18522: PPUSH
18523: CALL_OW 337
// wait ( 0 0$2 ) ;
18527: LD_INT 70
18529: PPUSH
18530: CALL_OW 67
// SaveForQuickRestart ;
18534: CALL_OW 22
// startCutscene = 0 ;
18538: LD_ADDR_EXP 38
18542: PUSH
18543: LD_INT 0
18545: ST_TO_ADDR
// end ;
18546: PPOPN 1
18548: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
18549: LD_EXP 38
18553: IFFALSE 18644
18555: GO 18557
18557: DISABLE
18558: LD_INT 0
18560: PPUSH
18561: PPUSH
// begin enable ;
18562: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
18563: LD_ADDR_VAR 0 1
18567: PUSH
18568: LD_INT 22
18570: PUSH
18571: LD_INT 1
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 21
18580: PUSH
18581: LD_INT 1
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 3
18590: PUSH
18591: LD_INT 24
18593: PUSH
18594: LD_INT 700
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: LIST
18609: PPUSH
18610: CALL_OW 69
18614: ST_TO_ADDR
// for i in tmp do
18615: LD_ADDR_VAR 0 2
18619: PUSH
18620: LD_VAR 0 1
18624: PUSH
18625: FOR_IN
18626: IFFALSE 18642
// SetLives ( i , 700 ) ;
18628: LD_VAR 0 2
18632: PPUSH
18633: LD_INT 700
18635: PPUSH
18636: CALL_OW 234
18640: GO 18625
18642: POP
18643: POP
// end ;
18644: PPOPN 2
18646: END
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 6 ] ] ) = 0 or tick > 3 3$00 do
18647: LD_INT 22
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 101
18659: PUSH
18660: LD_INT 6
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: PUSH
18676: LD_INT 0
18678: EQUAL
18679: PUSH
18680: LD_OWVAR 1
18684: PUSH
18685: LD_INT 6300
18687: GREATER
18688: OR
18689: IFFALSE 18938
18691: GO 18693
18693: DISABLE
// begin PrepareSupportFromDelta ;
18694: CALL 3916 0 0
// firstAttack = 1 ;
18698: LD_ADDR_EXP 33
18702: PUSH
18703: LD_INT 1
18705: ST_TO_ADDR
// if IsOk ( Gladstone ) then
18706: LD_EXP 8
18710: PPUSH
18711: CALL_OW 302
18715: IFFALSE 18731
// Say ( Gladstone , D2-Glad-1 ) else
18717: LD_EXP 8
18721: PPUSH
18722: LD_STRING D2-Glad-1
18724: PPUSH
18725: CALL_OW 88
18729: GO 18839
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
18731: LD_INT 4
18733: PPUSH
18734: LD_INT 22
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 21
18746: PUSH
18747: LD_INT 1
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 25
18759: PUSH
18760: LD_INT 1
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 25
18769: PUSH
18770: LD_INT 2
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 25
18779: PUSH
18780: LD_INT 3
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 25
18789: PUSH
18790: LD_INT 4
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: LIST
18808: PPUSH
18809: CALL_OW 70
18813: PUSH
18814: LD_EXP 15
18818: PUSH
18819: LD_EXP 14
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: DIFF
18828: PPUSH
18829: LD_STRING D2-Sol1-1
18831: PPUSH
18832: LD_STRING D2-FSol1-1
18834: PPUSH
18835: CALL 7358 0 3
// if IsOK ( Donaldson ) and gammaCommander = 1 then
18839: LD_EXP 3
18843: PPUSH
18844: CALL_OW 302
18848: PUSH
18849: LD_EXP 12
18853: PUSH
18854: LD_INT 1
18856: EQUAL
18857: AND
18858: IFFALSE 18872
// Say ( Donaldson , D2-Don-1 ) ;
18860: LD_EXP 3
18864: PPUSH
18865: LD_STRING D2-Don-1
18867: PPUSH
18868: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
18872: LD_EXP 2
18876: PPUSH
18877: CALL_OW 302
18881: PUSH
18882: LD_EXP 12
18886: PUSH
18887: LD_INT 2
18889: EQUAL
18890: AND
18891: IFFALSE 18905
// Say ( Brown , D2-Brown-1 ) ;
18893: LD_EXP 2
18897: PPUSH
18898: LD_STRING D2-Brown-1
18900: PPUSH
18901: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
18905: LD_EXP 13
18909: PPUSH
18910: CALL_OW 302
18914: PUSH
18915: LD_EXP 12
18919: PUSH
18920: LD_INT 3
18922: EQUAL
18923: AND
18924: IFFALSE 18938
// Say ( Houten , D2-VanH-1 ) ;
18926: LD_EXP 13
18930: PPUSH
18931: LD_STRING D2-VanH-1
18933: PPUSH
18934: CALL_OW 88
// end ;
18938: END
// every 0 0$1 trigger tick > 3 3$00 do var none ;
18939: LD_OWVAR 1
18943: PUSH
18944: LD_INT 6300
18946: GREATER
18947: IFFALSE 20001
18949: GO 18951
18951: DISABLE
18952: LD_INT 0
18954: PPUSH
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
18955: LD_STRING 07_time
18957: PPUSH
18958: LD_INT 12600
18960: PPUSH
18961: CALL_OW 30
18965: PUSH
18966: LD_INT 3
18968: DIV
18969: PPUSH
18970: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
18974: LD_INT 34
18976: PPUSH
18977: LD_INT 1
18979: PPUSH
18980: CALL_OW 321
18984: PUSH
18985: LD_INT 2
18987: EQUAL
18988: IFFALSE 18997
// SetAchievement ( ACH_HEAVYGUN ) ;
18990: LD_STRING ACH_HEAVYGUN
18992: PPUSH
18993: CALL_OW 543
// PrepareMacmillanSquad ;
18997: CALL 4613 0 0
// CenterNowOnUnits ( JMM ) ;
19001: LD_EXP 1
19005: PPUSH
19006: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
19010: LD_EXP 1
19014: PPUSH
19015: LD_STRING D3-JMM-1
19017: PPUSH
19018: CALL_OW 88
// JMMArrive = 1 ;
19022: LD_ADDR_EXP 39
19026: PUSH
19027: LD_INT 1
19029: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
19030: LD_EXP 3
19034: PPUSH
19035: CALL_OW 302
19039: PUSH
19040: LD_EXP 12
19044: PUSH
19045: LD_INT 1
19047: EQUAL
19048: AND
19049: IFFALSE 19065
// begin Say ( Donaldson , D3-Don-1 ) ;
19051: LD_EXP 3
19055: PPUSH
19056: LD_STRING D3-Don-1
19058: PPUSH
19059: CALL_OW 88
// end else
19063: GO 19117
// begin if gammaCommander = 1 then
19065: LD_EXP 12
19069: PUSH
19070: LD_INT 1
19072: EQUAL
19073: IFFALSE 19117
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
19075: LD_EXP 11
19079: PPUSH
19080: LD_INT 26
19082: PUSH
19083: LD_INT 1
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PPUSH
19090: CALL_OW 72
19094: PPUSH
19095: LD_STRING D3-Sol1-1
19097: PPUSH
19098: LD_STRING D3-Sol1-1
19100: PPUSH
19101: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19105: LD_EXP 1
19109: PPUSH
19110: LD_STRING D3-JMM-2
19112: PPUSH
19113: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
19117: LD_EXP 2
19121: PPUSH
19122: CALL_OW 302
19126: PUSH
19127: LD_EXP 12
19131: PUSH
19132: LD_INT 2
19134: EQUAL
19135: AND
19136: IFFALSE 19152
// begin Say ( Brown , D3-Brown-1 ) ;
19138: LD_EXP 2
19142: PPUSH
19143: LD_STRING D3-Brown-1
19145: PPUSH
19146: CALL_OW 88
// end else
19150: GO 19204
// begin if gammaCommander = 2 then
19152: LD_EXP 12
19156: PUSH
19157: LD_INT 2
19159: EQUAL
19160: IFFALSE 19204
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
19162: LD_EXP 11
19166: PPUSH
19167: LD_INT 26
19169: PUSH
19170: LD_INT 1
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PPUSH
19177: CALL_OW 72
19181: PPUSH
19182: LD_STRING D3-Sol1-1a
19184: PPUSH
19185: LD_STRING D3-Sol1-1a
19187: PPUSH
19188: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19192: LD_EXP 1
19196: PPUSH
19197: LD_STRING D3-JMM-2
19199: PPUSH
19200: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
19204: LD_EXP 13
19208: PPUSH
19209: CALL_OW 302
19213: PUSH
19214: LD_EXP 12
19218: PUSH
19219: LD_INT 3
19221: EQUAL
19222: AND
19223: IFFALSE 19239
// begin Say ( Houten , D3-VanH-1 ) ;
19225: LD_EXP 13
19229: PPUSH
19230: LD_STRING D3-VanH-1
19232: PPUSH
19233: CALL_OW 88
// end else
19237: GO 19291
// begin if gammaCommander = 3 then
19239: LD_EXP 12
19243: PUSH
19244: LD_INT 3
19246: EQUAL
19247: IFFALSE 19291
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
19249: LD_EXP 11
19253: PPUSH
19254: LD_INT 26
19256: PUSH
19257: LD_INT 1
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PPUSH
19264: CALL_OW 72
19268: PPUSH
19269: LD_STRING D3-Sol1-1b
19271: PPUSH
19272: LD_STRING D3-Sol1-1b
19274: PPUSH
19275: CALL 7358 0 3
// Say ( JMM , D3-JMM-2 ) ;
19279: LD_EXP 1
19283: PPUSH
19284: LD_STRING D3-JMM-2
19286: PPUSH
19287: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
19291: LD_EXP 15
19295: PPUSH
19296: CALL_OW 302
19300: IFFALSE 19328
// begin Say ( Joan , D3a-Joan-1 ) ;
19302: LD_EXP 15
19306: PPUSH
19307: LD_STRING D3a-Joan-1
19309: PPUSH
19310: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
19314: LD_EXP 1
19318: PPUSH
19319: LD_STRING D3a-JMM-1
19321: PPUSH
19322: CALL_OW 88
// end else
19326: GO 19670
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
19328: LD_STRING 06_JoanStatus_1
19330: PPUSH
19331: LD_INT 0
19333: PPUSH
19334: CALL_OW 30
19338: PUSH
19339: LD_INT 1
19341: EQUAL
19342: IFFALSE 19670
// begin Say ( JMM , D3b-JMM-1 ) ;
19344: LD_EXP 1
19348: PPUSH
19349: LD_STRING D3b-JMM-1
19351: PPUSH
19352: CALL_OW 88
// if gammaCommander = 1 then
19356: LD_EXP 12
19360: PUSH
19361: LD_INT 1
19363: EQUAL
19364: IFFALSE 19421
// if IsOK ( Donaldson ) then
19366: LD_EXP 3
19370: PPUSH
19371: CALL_OW 302
19375: IFFALSE 19391
// Say ( Donaldson , D3b-Don-1 ) else
19377: LD_EXP 3
19381: PPUSH
19382: LD_STRING D3b-Don-1
19384: PPUSH
19385: CALL_OW 88
19389: GO 19421
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19391: LD_EXP 11
19395: PPUSH
19396: LD_INT 26
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PPUSH
19406: CALL_OW 72
19410: PPUSH
19411: LD_STRING D3b-Sol1-1
19413: PPUSH
19414: LD_STRING D3b-Sol1-1
19416: PPUSH
19417: CALL 7358 0 3
// if gammaCommander = 2 then
19421: LD_EXP 12
19425: PUSH
19426: LD_INT 2
19428: EQUAL
19429: IFFALSE 19486
// if IsOk ( Brown ) then
19431: LD_EXP 2
19435: PPUSH
19436: CALL_OW 302
19440: IFFALSE 19456
// Say ( Brown , D3b-Brown-1 ) else
19442: LD_EXP 2
19446: PPUSH
19447: LD_STRING D3b-Brown-1
19449: PPUSH
19450: CALL_OW 88
19454: GO 19486
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19456: LD_EXP 11
19460: PPUSH
19461: LD_INT 26
19463: PUSH
19464: LD_INT 1
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PPUSH
19471: CALL_OW 72
19475: PPUSH
19476: LD_STRING D3b-Sol1-1
19478: PPUSH
19479: LD_STRING D3b-Sol1-1
19481: PPUSH
19482: CALL 7358 0 3
// if gammaCommander = 3 then
19486: LD_EXP 12
19490: PUSH
19491: LD_INT 3
19493: EQUAL
19494: IFFALSE 19551
// if IsOk ( Houten ) then
19496: LD_EXP 13
19500: PPUSH
19501: CALL_OW 302
19505: IFFALSE 19521
// Say ( Houten , D3b-VanH-1 ) else
19507: LD_EXP 13
19511: PPUSH
19512: LD_STRING D3b-VanH-1
19514: PPUSH
19515: CALL_OW 88
19519: GO 19551
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
19521: LD_EXP 11
19525: PPUSH
19526: LD_INT 26
19528: PUSH
19529: LD_INT 1
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PPUSH
19536: CALL_OW 72
19540: PPUSH
19541: LD_STRING D3b-Sol1-1
19543: PPUSH
19544: LD_STRING D3b-Sol1-1
19546: PPUSH
19547: CALL 7358 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
19551: LD_EXP 11
19555: PPUSH
19556: LD_INT 26
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PPUSH
19566: CALL_OW 72
19570: PUSH
19571: LD_EXP 12
19575: PUSH
19576: LD_INT 1
19578: EQUAL
19579: PUSH
19580: LD_EXP 3
19584: PPUSH
19585: CALL_OW 302
19589: AND
19590: OR
19591: PUSH
19592: LD_EXP 12
19596: PUSH
19597: LD_INT 2
19599: EQUAL
19600: PUSH
19601: LD_EXP 2
19605: PPUSH
19606: CALL_OW 302
19610: AND
19611: OR
19612: PUSH
19613: LD_EXP 12
19617: PUSH
19618: LD_INT 3
19620: EQUAL
19621: PUSH
19622: LD_EXP 13
19626: PPUSH
19627: CALL_OW 302
19631: AND
19632: OR
19633: IFFALSE 19647
// Say ( JMM , D3b-JMM-2 ) ;
19635: LD_EXP 1
19639: PPUSH
19640: LD_STRING D3b-JMM-2
19642: PPUSH
19643: CALL_OW 88
// if IsOK ( Lisa ) then
19647: LD_EXP 6
19651: PPUSH
19652: CALL_OW 302
19656: IFFALSE 19670
// Say ( Lisa , D3b-Lisa-2 ) ;
19658: LD_EXP 6
19662: PPUSH
19663: LD_STRING D3b-Lisa-2
19665: PPUSH
19666: CALL_OW 88
// end ; end ; none := [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] ^ macmilan_squad ;
19670: LD_ADDR_VAR 0 1
19674: PUSH
19675: LD_EXP 1
19679: PUSH
19680: LD_EXP 2
19684: PUSH
19685: LD_EXP 3
19689: PUSH
19690: LD_EXP 4
19694: PUSH
19695: LD_EXP 5
19699: PUSH
19700: LD_EXP 6
19704: PUSH
19705: LD_EXP 7
19709: PUSH
19710: LD_EXP 8
19714: PUSH
19715: LD_EXP 9
19719: PUSH
19720: LD_EXP 10
19724: PUSH
19725: LD_EXP 15
19729: PUSH
19730: LD_EXP 14
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: PUSH
19749: LD_EXP 42
19753: ADD
19754: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCa-Sol1-1 , DCa-Sol1-1 ) ;
19755: LD_INT 22
19757: PUSH
19758: LD_INT 1
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 21
19767: PUSH
19768: LD_INT 1
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 26
19777: PUSH
19778: LD_INT 1
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: LD_INT 25
19790: PUSH
19791: LD_INT 1
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 25
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 25
19810: PUSH
19811: LD_INT 3
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 25
19820: PUSH
19821: LD_INT 4
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: PPUSH
19841: CALL_OW 69
19845: PUSH
19846: LD_VAR 0 1
19850: DIFF
19851: PPUSH
19852: LD_STRING DCa-Sol1-1
19854: PPUSH
19855: LD_STRING DCa-Sol1-1
19857: PPUSH
19858: CALL 7358 0 3
// Say ( JMM , DCb-JMM-1 ) ;
19862: LD_EXP 1
19866: PPUSH
19867: LD_STRING DCb-JMM-1
19869: PPUSH
19870: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCb-Sol1-1 , DCb-Sol1-1 ) ;
19874: LD_INT 22
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 21
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 26
19896: PUSH
19897: LD_INT 1
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 2
19906: PUSH
19907: LD_INT 25
19909: PUSH
19910: LD_INT 1
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 25
19919: PUSH
19920: LD_INT 2
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 25
19929: PUSH
19930: LD_INT 3
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 25
19939: PUSH
19940: LD_INT 4
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: PPUSH
19960: CALL_OW 69
19964: PUSH
19965: LD_VAR 0 1
19969: DIFF
19970: PPUSH
19971: LD_STRING DCb-Sol1-1
19973: PPUSH
19974: LD_STRING DCb-Sol1-1
19976: PPUSH
19977: CALL 7358 0 3
// Say ( JMM , DCb-JMM-2 ) ;
19981: LD_EXP 1
19985: PPUSH
19986: LD_STRING DCb-JMM-2
19988: PPUSH
19989: CALL_OW 88
// secondAttack = 1 ;
19993: LD_ADDR_EXP 34
19997: PUSH
19998: LD_INT 1
20000: ST_TO_ADDR
// end ;
20001: PPOPN 1
20003: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 18 18$00 do
20004: LD_EXP 39
20008: PUSH
20009: LD_INT 1
20011: EQUAL
20012: PUSH
20013: LD_OWVAR 1
20017: PUSH
20018: LD_INT 37800
20020: GREATEREQUAL
20021: AND
20022: IFFALSE 20095
20024: GO 20026
20026: DISABLE
// begin DialogueOn ;
20027: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
20031: LD_EXP 23
20035: PPUSH
20036: LD_STRING D4-Pow-1
20038: PPUSH
20039: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
20043: LD_EXP 1
20047: PPUSH
20048: LD_STRING D4-JMM-1
20050: PPUSH
20051: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
20055: LD_EXP 23
20059: PPUSH
20060: LD_STRING D4-Pow-2
20062: PPUSH
20063: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
20067: LD_EXP 1
20071: PPUSH
20072: LD_STRING D4-JMM-2
20074: PPUSH
20075: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
20079: LD_EXP 23
20083: PPUSH
20084: LD_STRING D4-Pow-3
20086: PPUSH
20087: CALL_OW 94
// DialogueOff ;
20091: CALL_OW 7
// end ;
20095: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 24 24$00 do
20096: LD_EXP 39
20100: PUSH
20101: LD_INT 1
20103: EQUAL
20104: PUSH
20105: LD_OWVAR 1
20109: PUSH
20110: LD_INT 50400
20112: GREATEREQUAL
20113: AND
20114: IFFALSE 20139
20116: GO 20118
20118: DISABLE
// begin DialogueOn ;
20119: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
20123: LD_EXP 23
20127: PPUSH
20128: LD_STRING D4a-Pow-1
20130: PPUSH
20131: CALL_OW 94
// DialogueOff ;
20135: CALL_OW 7
// end ;
20139: END
// every 0 0$01 trigger JMMArrive = 1 and tick >= 35 35$00 do
20140: LD_EXP 39
20144: PUSH
20145: LD_INT 1
20147: EQUAL
20148: PUSH
20149: LD_OWVAR 1
20153: PUSH
20154: LD_INT 73500
20156: GREATEREQUAL
20157: AND
20158: IFFALSE 20179
20160: GO 20162
20162: DISABLE
// begin PrepareSikorsky ;
20163: CALL 5871 0 0
// SikorskyArrive = 1 ;
20167: LD_ADDR_EXP 18
20171: PUSH
20172: LD_INT 1
20174: ST_TO_ADDR
// PrepareSikorskyArmy ;
20175: CALL 6051 0 0
// end ;
20179: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
20180: LD_EXP 17
20184: PPUSH
20185: LD_INT 5
20187: PPUSH
20188: CALL_OW 308
20192: IFFALSE 20384
20194: GO 20196
20196: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
20197: LD_EXP 17
20201: PPUSH
20202: CALL_OW 87
// DialogueOn ;
20206: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
20210: LD_EXP 16
20214: PPUSH
20215: LD_STRING D5-Sik-1
20217: PPUSH
20218: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
20222: LD_EXP 1
20226: PPUSH
20227: LD_STRING D5-JMM-1a
20229: PPUSH
20230: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
20234: LD_EXP 16
20238: PPUSH
20239: LD_STRING D5-Sik-2
20241: PPUSH
20242: CALL_OW 88
// case query ( QSikorski ) of 1 :
20246: LD_STRING QSikorski
20248: PPUSH
20249: CALL_OW 97
20253: PUSH
20254: LD_INT 1
20256: DOUBLE
20257: EQUAL
20258: IFTRUE 20262
20260: GO 20285
20262: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
20263: LD_EXP 16
20267: PPUSH
20268: LD_STRING D5a-Sik-1
20270: PPUSH
20271: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
20275: LD_ADDR_EXP 19
20279: PUSH
20280: LD_INT 2100
20282: ST_TO_ADDR
// end ; 2 :
20283: GO 20372
20285: LD_INT 2
20287: DOUBLE
20288: EQUAL
20289: IFTRUE 20293
20291: GO 20316
20293: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
20294: LD_EXP 16
20298: PPUSH
20299: LD_STRING D5b-Sik-1
20301: PPUSH
20302: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20306: LD_ADDR_EXP 19
20310: PUSH
20311: LD_INT 10500
20313: ST_TO_ADDR
// end ; 3 :
20314: GO 20372
20316: LD_INT 3
20318: DOUBLE
20319: EQUAL
20320: IFTRUE 20324
20322: GO 20371
20324: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
20325: LD_EXP 16
20329: PPUSH
20330: LD_STRING D5c-Sik-1
20332: PPUSH
20333: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
20337: LD_EXP 1
20341: PPUSH
20342: LD_STRING D5c-JMM-1
20344: PPUSH
20345: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
20349: LD_EXP 16
20353: PPUSH
20354: LD_STRING D5c-Sik-2
20356: PPUSH
20357: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
20361: LD_ADDR_EXP 19
20365: PUSH
20366: LD_INT 10500
20368: ST_TO_ADDR
// end ; end ;
20369: GO 20372
20371: POP
// DialogueOff ;
20372: CALL_OW 7
// timerStatus = 1 ;
20376: LD_ADDR_EXP 35
20380: PUSH
20381: LD_INT 1
20383: ST_TO_ADDR
// end ;
20384: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
20385: LD_EXP 19
20389: PUSH
20390: LD_INT 35
20392: LESS
20393: IFFALSE 20441
20395: GO 20397
20397: DISABLE
// begin timerStatus = 0 ;
20398: LD_ADDR_EXP 35
20402: PUSH
20403: LD_INT 0
20405: ST_TO_ADDR
// DialogueOn ;
20406: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
20410: LD_EXP 16
20414: PPUSH
20415: LD_STRING D6-Sik-1
20417: PPUSH
20418: CALL_OW 88
// DialogueOff ;
20422: CALL_OW 7
// SikorskyAI = 1 ;
20426: LD_ADDR_EXP 20
20430: PUSH
20431: LD_INT 1
20433: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
20434: LD_STRING M2
20436: PPUSH
20437: CALL_OW 337
// end ;
20441: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
20442: LD_EXP 17
20446: PPUSH
20447: LD_INT 18
20449: PPUSH
20450: CALL_OW 308
20454: IFFALSE 20564
20456: GO 20458
20458: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
20459: LD_EXP 16
20463: PPUSH
20464: LD_STRING D7-Sik-1
20466: PPUSH
20467: CALL_OW 88
// wait ( 0 0$10 ) ;
20471: LD_INT 350
20473: PPUSH
20474: CALL_OW 67
// if IsInArea ( JMM , RussianBaseTerritory ) or ( GetDriverVehicle ( JMM ) and IsInArea ( GetDriverVehicle ( JMM ) , RussianBaseTerritory ) ) then
20478: LD_EXP 1
20482: PPUSH
20483: LD_INT 24
20485: PPUSH
20486: CALL_OW 308
20490: PUSH
20491: LD_EXP 1
20495: PPUSH
20496: CALL 17107 0 1
20500: PUSH
20501: LD_EXP 1
20505: PPUSH
20506: CALL 17107 0 1
20510: PPUSH
20511: LD_INT 24
20513: PPUSH
20514: CALL_OW 308
20518: AND
20519: OR
20520: IFFALSE 20544
// begin Say ( Sikorski , D7a-Sik-1 ) ;
20522: LD_EXP 16
20526: PPUSH
20527: LD_STRING D7a-Sik-1
20529: PPUSH
20530: CALL_OW 88
// SikorskyStatus = 1 ;
20534: LD_ADDR_EXP 21
20538: PUSH
20539: LD_INT 1
20541: ST_TO_ADDR
// end else
20542: GO 20564
// begin Say ( Sikorski , D7b-Sik-1 ) ;
20544: LD_EXP 16
20548: PPUSH
20549: LD_STRING D7b-Sik-1
20551: PPUSH
20552: CALL_OW 88
// SikorskyStatus = 2 ;
20556: LD_ADDR_EXP 21
20560: PUSH
20561: LD_INT 2
20563: ST_TO_ADDR
// end ; end ; end_of_file
20564: END
// on BuildingComplete ( building ) do var tmp , un ;
20565: LD_INT 0
20567: PPUSH
20568: PPUSH
// begin if GetSide ( building ) = 3 then
20569: LD_VAR 0 1
20573: PPUSH
20574: CALL_OW 255
20578: PUSH
20579: LD_INT 3
20581: EQUAL
20582: IFFALSE 21119
// begin if GetBType ( building ) = b_depot then
20584: LD_VAR 0 1
20588: PPUSH
20589: CALL_OW 266
20593: PUSH
20594: LD_INT 0
20596: EQUAL
20597: IFFALSE 20665
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
20599: LD_VAR 0 1
20603: PPUSH
20604: CALL_OW 274
20608: PPUSH
20609: LD_INT 1
20611: PPUSH
20612: LD_INT 5000
20614: PPUSH
20615: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
20619: LD_VAR 0 1
20623: PPUSH
20624: CALL_OW 274
20628: PPUSH
20629: LD_INT 2
20631: PPUSH
20632: LD_INT 5000
20634: PPUSH
20635: CALL_OW 277
// SetBName ( building , konev ) ;
20639: LD_VAR 0 1
20643: PPUSH
20644: LD_STRING konev
20646: PPUSH
20647: CALL_OW 500
// ruDepot = building ;
20651: LD_ADDR_EXP 28
20655: PUSH
20656: LD_VAR 0 1
20660: ST_TO_ADDR
// BuildRussianBase ;
20661: CALL 7984 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
20665: LD_VAR 0 1
20669: PPUSH
20670: CALL_OW 266
20674: PUSH
20675: LD_INT 0
20677: EQUAL
20678: PUSH
20679: LD_VAR 0 1
20683: PPUSH
20684: CALL_OW 266
20688: PUSH
20689: LD_INT 2
20691: EQUAL
20692: OR
20693: PUSH
20694: LD_VAR 0 1
20698: PPUSH
20699: CALL_OW 266
20703: PUSH
20704: LD_INT 4
20706: EQUAL
20707: OR
20708: IFFALSE 20719
// ComUpgrade ( building ) ;
20710: LD_VAR 0 1
20714: PPUSH
20715: CALL_OW 146
// if GetBType ( building ) = b_lab then
20719: LD_VAR 0 1
20723: PPUSH
20724: CALL_OW 266
20728: PUSH
20729: LD_INT 6
20731: EQUAL
20732: IFFALSE 20783
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20734: LD_VAR 0 1
20738: PPUSH
20739: LD_INT 10
20741: PPUSH
20742: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
20746: LD_VAR 0 1
20750: PPUSH
20751: LD_INT 12
20753: PPUSH
20754: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
20758: LD_INT 3
20760: PPUSH
20761: LD_VAR 0 1
20765: PPUSH
20766: LD_INT 3
20768: PPUSH
20769: CALL 8528 0 3
// ruLab = building ;
20773: LD_ADDR_EXP 29
20777: PUSH
20778: LD_VAR 0 1
20782: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
20783: LD_VAR 0 1
20787: PPUSH
20788: CALL_OW 266
20792: PUSH
20793: LD_INT 32
20795: EQUAL
20796: IFFALSE 20914
// begin uc_side = 3 ;
20798: LD_ADDR_OWVAR 20
20802: PUSH
20803: LD_INT 3
20805: ST_TO_ADDR
// uc_nation = 3 ;
20806: LD_ADDR_OWVAR 21
20810: PUSH
20811: LD_INT 3
20813: ST_TO_ADDR
// hc_gallery =  ;
20814: LD_ADDR_OWVAR 33
20818: PUSH
20819: LD_STRING 
20821: ST_TO_ADDR
// hc_name =  ;
20822: LD_ADDR_OWVAR 26
20826: PUSH
20827: LD_STRING 
20829: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
20830: LD_INT 0
20832: PPUSH
20833: LD_INT 1
20835: PPUSH
20836: LD_EXP 25
20840: PPUSH
20841: LD_EXP 26
20845: PPUSH
20846: CALL_OW 12
20850: PPUSH
20851: CALL_OW 380
// un = CreateHuman ;
20855: LD_ADDR_VAR 0 3
20859: PUSH
20860: CALL_OW 44
20864: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
20865: LD_VAR 0 3
20869: PPUSH
20870: LD_VAR 0 1
20874: PPUSH
20875: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20879: LD_VAR 0 1
20883: PPUSH
20884: LD_INT 43
20886: PUSH
20887: LD_INT 44
20889: PUSH
20890: LD_INT 46
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: PPUSH
20901: LD_INT 3
20903: PPUSH
20904: CALL_OW 12
20908: ARRAY
20909: PPUSH
20910: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
20914: LD_VAR 0 1
20918: PPUSH
20919: CALL_OW 266
20923: PUSH
20924: LD_INT 33
20926: EQUAL
20927: IFFALSE 20964
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20929: LD_VAR 0 1
20933: PPUSH
20934: LD_INT 43
20936: PUSH
20937: LD_INT 44
20939: PUSH
20940: LD_INT 46
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 1
20950: PPUSH
20951: LD_INT 3
20953: PPUSH
20954: CALL_OW 12
20958: ARRAY
20959: PPUSH
20960: CALL_OW 208
// if GetBType ( building ) = b_bunker then
20964: LD_VAR 0 1
20968: PPUSH
20969: CALL_OW 266
20973: PUSH
20974: LD_INT 32
20976: EQUAL
20977: IFFALSE 21014
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20979: LD_VAR 0 1
20983: PPUSH
20984: LD_INT 43
20986: PUSH
20987: LD_INT 44
20989: PUSH
20990: LD_INT 46
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 1
21000: PPUSH
21001: LD_INT 3
21003: PPUSH
21004: CALL_OW 12
21008: ARRAY
21009: PPUSH
21010: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21014: LD_VAR 0 1
21018: PPUSH
21019: CALL_OW 266
21023: PUSH
21024: LD_INT 24
21026: EQUAL
21027: IFFALSE 21037
// russianAI = 1 ;
21029: LD_ADDR_EXP 27
21033: PUSH
21034: LD_INT 1
21036: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
21037: LD_EXP 31
21041: PUSH
21042: LD_INT 0
21044: GREATER
21045: IFFALSE 21119
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21047: LD_ADDR_EXP 31
21051: PUSH
21052: LD_EXP 31
21056: PPUSH
21057: LD_INT 1
21059: PPUSH
21060: CALL_OW 3
21064: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21065: LD_ADDR_EXP 31
21069: PUSH
21070: LD_EXP 31
21074: PPUSH
21075: LD_INT 1
21077: PPUSH
21078: CALL_OW 3
21082: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21083: LD_ADDR_EXP 31
21087: PUSH
21088: LD_EXP 31
21092: PPUSH
21093: LD_INT 1
21095: PPUSH
21096: CALL_OW 3
21100: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21101: LD_ADDR_EXP 31
21105: PUSH
21106: LD_EXP 31
21110: PPUSH
21111: LD_INT 1
21113: PPUSH
21114: CALL_OW 3
21118: ST_TO_ADDR
// end ; end ; end ;
21119: PPOPN 3
21121: END
// on UpgradeComplete ( building ) do var i ;
21122: LD_INT 0
21124: PPUSH
// begin if GetSide ( building ) = 3 then
21125: LD_VAR 0 1
21129: PPUSH
21130: CALL_OW 255
21134: PUSH
21135: LD_INT 3
21137: EQUAL
21138: IFFALSE 21319
// begin if GetBType ( building ) = b_factory then
21140: LD_VAR 0 1
21144: PPUSH
21145: CALL_OW 266
21149: PUSH
21150: LD_INT 3
21152: EQUAL
21153: IFFALSE 21220
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
21155: LD_ADDR_VAR 0 2
21159: PUSH
21160: LD_INT 22
21162: PUSH
21163: LD_INT 3
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 25
21172: PUSH
21173: LD_INT 3
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PPUSH
21184: CALL_OW 69
21188: PUSH
21189: FOR_IN
21190: IFFALSE 21208
// ComEnterUnit ( i , building ) ;
21192: LD_VAR 0 2
21196: PPUSH
21197: LD_VAR 0 1
21201: PPUSH
21202: CALL_OW 120
21206: GO 21189
21208: POP
21209: POP
// ruFab = building ;
21210: LD_ADDR_EXP 30
21214: PUSH
21215: LD_VAR 0 1
21219: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
21220: LD_VAR 0 1
21224: PPUSH
21225: CALL_OW 266
21229: PUSH
21230: LD_INT 8
21232: EQUAL
21233: IFFALSE 21290
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21235: LD_ADDR_VAR 0 2
21239: PUSH
21240: LD_INT 22
21242: PUSH
21243: LD_INT 3
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 25
21252: PUSH
21253: LD_INT 4
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PPUSH
21264: CALL_OW 69
21268: PUSH
21269: FOR_IN
21270: IFFALSE 21288
// ComEnterUnit ( i , building ) ;
21272: LD_VAR 0 2
21276: PPUSH
21277: LD_VAR 0 1
21281: PPUSH
21282: CALL_OW 120
21286: GO 21269
21288: POP
21289: POP
// if GetBType ( building ) = b_warehouse then
21290: LD_VAR 0 1
21294: PPUSH
21295: CALL_OW 266
21299: PUSH
21300: LD_INT 1
21302: EQUAL
21303: IFFALSE 21319
// begin ComEnterUnit ( Borodin , building ) ;
21305: LD_EXP 24
21309: PPUSH
21310: LD_VAR 0 1
21314: PPUSH
21315: CALL_OW 120
// end ; end ; end ;
21319: PPOPN 2
21321: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 247
21331: PUSH
21332: LD_INT 2
21334: EQUAL
21335: PUSH
21336: LD_VAR 0 1
21340: PPUSH
21341: CALL_OW 263
21345: PUSH
21346: LD_INT 3
21348: EQUAL
21349: AND
21350: PUSH
21351: LD_EXP 41
21355: PUSH
21356: LD_INT 0
21358: EQUAL
21359: AND
21360: IFFALSE 21478
// begin varEvent1 = 1 ;
21362: LD_ADDR_EXP 41
21366: PUSH
21367: LD_INT 1
21369: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
21370: LD_VAR 0 1
21374: PPUSH
21375: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
21379: LD_INT 22
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 21
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 2
21401: PUSH
21402: LD_INT 25
21404: PUSH
21405: LD_INT 1
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 25
21414: PUSH
21415: LD_INT 2
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 25
21424: PUSH
21425: LD_INT 3
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 25
21434: PUSH
21435: LD_INT 4
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: LIST
21453: PPUSH
21454: CALL_OW 69
21458: PUSH
21459: LD_EXP 1
21463: PUSH
21464: EMPTY
21465: LIST
21466: DIFF
21467: PPUSH
21468: LD_STRING DC-Sol1-1
21470: PPUSH
21471: LD_STRING DC-FSol1-1
21473: PPUSH
21474: CALL 7358 0 3
// end ; end ;
21478: PPOPN 1
21480: END
// on UnitDestroyed ( unit ) do var i ;
21481: LD_INT 0
21483: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
21484: LD_VAR 0 1
21488: PPUSH
21489: CALL 41632 0 1
// if unit = Joan then
21493: LD_VAR 0 1
21497: PUSH
21498: LD_EXP 15
21502: EQUAL
21503: IFFALSE 21512
// DeleteCharacters ( Joan ) ;
21505: LD_STRING Joan
21507: PPUSH
21508: CALL_OW 40
// if GetSide ( unit ) = 3 then
21512: LD_VAR 0 1
21516: PPUSH
21517: CALL_OW 255
21521: PUSH
21522: LD_INT 3
21524: EQUAL
21525: IFFALSE 22295
// begin if GetType ( unit ) = unit_building then
21527: LD_VAR 0 1
21531: PPUSH
21532: CALL_OW 247
21536: PUSH
21537: LD_INT 3
21539: EQUAL
21540: IFFALSE 22232
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
21542: LD_VAR 0 1
21546: PPUSH
21547: CALL_OW 266
21551: PUSH
21552: LD_INT 31
21554: EQUAL
21555: PUSH
21556: LD_VAR 0 1
21560: PPUSH
21561: CALL_OW 266
21565: PUSH
21566: LD_INT 32
21568: EQUAL
21569: OR
21570: PUSH
21571: LD_VAR 0 1
21575: PPUSH
21576: CALL_OW 266
21580: PUSH
21581: LD_INT 36
21583: EQUAL
21584: OR
21585: PUSH
21586: LD_VAR 0 1
21590: PPUSH
21591: CALL_OW 266
21595: PUSH
21596: LD_INT 0
21598: EQUAL
21599: OR
21600: PUSH
21601: LD_VAR 0 1
21605: PPUSH
21606: CALL_OW 266
21610: PUSH
21611: LD_INT 24
21613: EQUAL
21614: OR
21615: PUSH
21616: LD_VAR 0 1
21620: PPUSH
21621: CALL_OW 266
21625: PUSH
21626: LD_INT 17
21628: EQUAL
21629: OR
21630: PUSH
21631: LD_VAR 0 1
21635: PPUSH
21636: CALL_OW 266
21640: PUSH
21641: LD_INT 25
21643: EQUAL
21644: OR
21645: PUSH
21646: LD_VAR 0 1
21650: PPUSH
21651: CALL_OW 266
21655: PUSH
21656: LD_INT 19
21658: EQUAL
21659: OR
21660: PUSH
21661: LD_VAR 0 1
21665: PPUSH
21666: CALL_OW 266
21670: PUSH
21671: LD_INT 20
21673: EQUAL
21674: OR
21675: PUSH
21676: LD_VAR 0 1
21680: PPUSH
21681: CALL_OW 266
21685: PUSH
21686: LD_INT 18
21688: EQUAL
21689: OR
21690: PUSH
21691: LD_VAR 0 1
21695: PPUSH
21696: CALL_OW 266
21700: PUSH
21701: LD_INT 21
21703: EQUAL
21704: OR
21705: PUSH
21706: LD_VAR 0 1
21710: PPUSH
21711: CALL_OW 266
21715: PUSH
21716: LD_INT 23
21718: EQUAL
21719: OR
21720: PUSH
21721: LD_VAR 0 1
21725: PPUSH
21726: CALL_OW 266
21730: PUSH
21731: LD_INT 16
21733: EQUAL
21734: OR
21735: PUSH
21736: LD_VAR 0 1
21740: PPUSH
21741: CALL_OW 266
21745: PUSH
21746: LD_INT 6
21748: EQUAL
21749: OR
21750: PUSH
21751: LD_VAR 0 1
21755: PPUSH
21756: CALL_OW 266
21760: PUSH
21761: LD_INT 29
21763: EQUAL
21764: OR
21765: PUSH
21766: LD_VAR 0 1
21770: PPUSH
21771: CALL_OW 266
21775: PUSH
21776: LD_INT 26
21778: EQUAL
21779: OR
21780: PUSH
21781: LD_VAR 0 1
21785: PPUSH
21786: CALL_OW 266
21790: PUSH
21791: LD_INT 30
21793: EQUAL
21794: OR
21795: PUSH
21796: LD_VAR 0 1
21800: PPUSH
21801: CALL_OW 266
21805: PUSH
21806: LD_INT 28
21808: EQUAL
21809: OR
21810: PUSH
21811: LD_VAR 0 1
21815: PPUSH
21816: CALL_OW 266
21820: PUSH
21821: LD_INT 27
21823: EQUAL
21824: OR
21825: PUSH
21826: LD_VAR 0 1
21830: PPUSH
21831: CALL_OW 266
21835: PUSH
21836: LD_INT 33
21838: EQUAL
21839: OR
21840: PUSH
21841: LD_VAR 0 1
21845: PPUSH
21846: CALL_OW 266
21850: PUSH
21851: LD_INT 2
21853: EQUAL
21854: OR
21855: PUSH
21856: LD_VAR 0 1
21860: PPUSH
21861: CALL_OW 266
21865: PUSH
21866: LD_INT 4
21868: EQUAL
21869: OR
21870: IFFALSE 21956
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
21872: LD_ADDR_EXP 31
21876: PUSH
21877: LD_EXP 31
21881: PUSH
21882: LD_VAR 0 1
21886: PPUSH
21887: CALL_OW 266
21891: ADD
21892: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21893: LD_ADDR_EXP 31
21897: PUSH
21898: LD_EXP 31
21902: PUSH
21903: LD_VAR 0 1
21907: PPUSH
21908: CALL_OW 250
21912: ADD
21913: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21914: LD_ADDR_EXP 31
21918: PUSH
21919: LD_EXP 31
21923: PUSH
21924: LD_VAR 0 1
21928: PPUSH
21929: CALL_OW 251
21933: ADD
21934: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21935: LD_ADDR_EXP 31
21939: PUSH
21940: LD_EXP 31
21944: PUSH
21945: LD_VAR 0 1
21949: PPUSH
21950: CALL_OW 254
21954: ADD
21955: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
21956: LD_VAR 0 1
21960: PPUSH
21961: CALL_OW 266
21965: PUSH
21966: LD_INT 1
21968: EQUAL
21969: IFFALSE 22048
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
21971: LD_ADDR_EXP 31
21975: PUSH
21976: LD_EXP 31
21980: PUSH
21981: LD_INT 0
21983: ADD
21984: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21985: LD_ADDR_EXP 31
21989: PUSH
21990: LD_EXP 31
21994: PUSH
21995: LD_VAR 0 1
21999: PPUSH
22000: CALL_OW 250
22004: ADD
22005: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22006: LD_ADDR_EXP 31
22010: PUSH
22011: LD_EXP 31
22015: PUSH
22016: LD_VAR 0 1
22020: PPUSH
22021: CALL_OW 251
22025: ADD
22026: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22027: LD_ADDR_EXP 31
22031: PUSH
22032: LD_EXP 31
22036: PUSH
22037: LD_VAR 0 1
22041: PPUSH
22042: CALL_OW 254
22046: ADD
22047: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
22048: LD_VAR 0 1
22052: PPUSH
22053: CALL_OW 266
22057: PUSH
22058: LD_INT 3
22060: EQUAL
22061: IFFALSE 22140
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
22063: LD_ADDR_EXP 31
22067: PUSH
22068: LD_EXP 31
22072: PUSH
22073: LD_INT 2
22075: ADD
22076: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22077: LD_ADDR_EXP 31
22081: PUSH
22082: LD_EXP 31
22086: PUSH
22087: LD_VAR 0 1
22091: PPUSH
22092: CALL_OW 250
22096: ADD
22097: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22098: LD_ADDR_EXP 31
22102: PUSH
22103: LD_EXP 31
22107: PUSH
22108: LD_VAR 0 1
22112: PPUSH
22113: CALL_OW 251
22117: ADD
22118: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22119: LD_ADDR_EXP 31
22123: PUSH
22124: LD_EXP 31
22128: PUSH
22129: LD_VAR 0 1
22133: PPUSH
22134: CALL_OW 254
22138: ADD
22139: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
22140: LD_VAR 0 1
22144: PPUSH
22145: CALL_OW 266
22149: PUSH
22150: LD_INT 5
22152: EQUAL
22153: IFFALSE 22232
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
22155: LD_ADDR_EXP 31
22159: PUSH
22160: LD_EXP 31
22164: PUSH
22165: LD_INT 4
22167: ADD
22168: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22169: LD_ADDR_EXP 31
22173: PUSH
22174: LD_EXP 31
22178: PUSH
22179: LD_VAR 0 1
22183: PPUSH
22184: CALL_OW 250
22188: ADD
22189: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22190: LD_ADDR_EXP 31
22194: PUSH
22195: LD_EXP 31
22199: PUSH
22200: LD_VAR 0 1
22204: PPUSH
22205: CALL_OW 251
22209: ADD
22210: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22211: LD_ADDR_EXP 31
22215: PUSH
22216: LD_EXP 31
22220: PUSH
22221: LD_VAR 0 1
22225: PPUSH
22226: CALL_OW 254
22230: ADD
22231: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
22232: LD_VAR 0 1
22236: PPUSH
22237: CALL_OW 247
22241: PUSH
22242: LD_INT 1
22244: EQUAL
22245: IFFALSE 22295
// begin for i in defenders_list do
22247: LD_ADDR_VAR 0 2
22251: PUSH
22252: LD_EXP 32
22256: PUSH
22257: FOR_IN
22258: IFFALSE 22293
// if i = unit then
22260: LD_VAR 0 2
22264: PUSH
22265: LD_VAR 0 1
22269: EQUAL
22270: IFFALSE 22291
// defenders_list = defenders_list diff [ unit ] ;
22272: LD_ADDR_EXP 32
22276: PUSH
22277: LD_EXP 32
22281: PUSH
22282: LD_VAR 0 1
22286: PUSH
22287: EMPTY
22288: LIST
22289: DIFF
22290: ST_TO_ADDR
22291: GO 22257
22293: POP
22294: POP
// end ; end ; end ;
22295: PPOPN 2
22297: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
22298: LD_VAR 0 1
22302: PPUSH
22303: LD_VAR 0 2
22307: PPUSH
22308: CALL 41754 0 2
// end ;
22312: PPOPN 2
22314: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
22315: LD_VAR 0 1
22319: PPUSH
22320: CALL 41738 0 1
// end ; end_of_file
22324: PPOPN 1
22326: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
22327: GO 22329
22329: DISABLE
22330: LD_INT 0
22332: PPUSH
// begin enemyWayX = [ ] ;
22333: LD_ADDR_EXP 46
22337: PUSH
22338: EMPTY
22339: ST_TO_ADDR
// enemyWayY = [ ] ;
22340: LD_ADDR_EXP 47
22344: PUSH
22345: EMPTY
22346: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
22347: LD_ADDR_VAR 0 1
22351: PUSH
22352: LD_INT 1
22354: PPUSH
22355: LD_INT 3
22357: PPUSH
22358: CALL_OW 12
22362: ST_TO_ADDR
// if rnd = 1 then
22363: LD_VAR 0 1
22367: PUSH
22368: LD_INT 1
22370: EQUAL
22371: IFFALSE 22411
// begin enemyWayX = [ 73 , 46 , 29 ] ;
22373: LD_ADDR_EXP 46
22377: PUSH
22378: LD_INT 73
22380: PUSH
22381: LD_INT 46
22383: PUSH
22384: LD_INT 29
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: LIST
22391: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
22392: LD_ADDR_EXP 47
22396: PUSH
22397: LD_INT 71
22399: PUSH
22400: LD_INT 43
22402: PUSH
22403: LD_INT 29
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: LIST
22410: ST_TO_ADDR
// end ; if rnd = 2 then
22411: LD_VAR 0 1
22415: PUSH
22416: LD_INT 2
22418: EQUAL
22419: IFFALSE 22443
// begin enemyWayX = [ 64 ] ;
22421: LD_ADDR_EXP 46
22425: PUSH
22426: LD_INT 64
22428: PUSH
22429: EMPTY
22430: LIST
22431: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
22432: LD_ADDR_EXP 47
22436: PUSH
22437: LD_INT 43
22439: PUSH
22440: EMPTY
22441: LIST
22442: ST_TO_ADDR
// end ; if rnd = 3 then
22443: LD_VAR 0 1
22447: PUSH
22448: LD_INT 3
22450: EQUAL
22451: IFFALSE 22475
// begin enemyWayX = [ 80 ] ;
22453: LD_ADDR_EXP 46
22457: PUSH
22458: LD_INT 80
22460: PUSH
22461: EMPTY
22462: LIST
22463: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
22464: LD_ADDR_EXP 47
22468: PUSH
22469: LD_INT 28
22471: PUSH
22472: EMPTY
22473: LIST
22474: ST_TO_ADDR
// end ; enable ;
22475: ENABLE
// end ;
22476: PPOPN 1
22478: END
// every 0 0$1 do
22479: GO 22481
22481: DISABLE
// begin enable ;
22482: ENABLE
// if escapeAvalaible = 0 then
22483: LD_EXP 36
22487: PUSH
22488: LD_INT 0
22490: EQUAL
22491: IFFALSE 22503
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
22493: LD_INT 3
22495: PPUSH
22496: LD_INT 6
22498: PPUSH
22499: CALL 8769 0 2
// if escapeAvalaible = 0 then
22503: LD_EXP 36
22507: PUSH
22508: LD_INT 0
22510: EQUAL
22511: IFFALSE 22523
// DefenseBase ( 1 , RussianBaseTerritory ) ;
22513: LD_INT 1
22515: PPUSH
22516: LD_INT 24
22518: PPUSH
22519: CALL 9429 0 2
// if russianAI = 1 then
22523: LD_EXP 27
22527: PUSH
22528: LD_INT 1
22530: EQUAL
22531: IFFALSE 22601
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
22533: LD_INT 3
22535: PPUSH
22536: LD_INT 7
22538: PPUSH
22539: LD_INT 6
22541: PPUSH
22542: LD_EXP 29
22546: PPUSH
22547: CALL 11871 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
22551: LD_INT 3
22553: PPUSH
22554: LD_EXP 28
22558: PPUSH
22559: LD_INT 6
22561: PPUSH
22562: LD_EXP 31
22566: PPUSH
22567: CALL 11465 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
22571: LD_INT 3
22573: PPUSH
22574: LD_INT 26
22576: PPUSH
22577: LD_EXP 46
22581: PPUSH
22582: LD_EXP 47
22586: PPUSH
22587: CALL 10329 0 4
// AttackNearBuildings ( 3 , 1 ) ;
22591: LD_INT 3
22593: PPUSH
22594: LD_INT 1
22596: PPUSH
22597: CALL 12415 0 2
// end ; if SikorskyArrive = 1 then
22601: LD_EXP 18
22605: PUSH
22606: LD_INT 1
22608: EQUAL
22609: IFFALSE 22627
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
22611: LD_INT 3
22613: PPUSH
22614: LD_INT 10
22616: PPUSH
22617: LD_INT 53
22619: PPUSH
22620: LD_INT 59
22622: PPUSH
22623: CALL 10126 0 4
// end ;
22627: END
// every 0 0$1 trigger russianAI = 1 do var i ;
22628: LD_EXP 27
22632: PUSH
22633: LD_INT 1
22635: EQUAL
22636: IFFALSE 22912
22638: GO 22640
22640: DISABLE
22641: LD_INT 0
22643: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22644: LD_ADDR_VAR 0 1
22648: PUSH
22649: LD_INT 22
22651: PUSH
22652: LD_INT 3
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 21
22661: PUSH
22662: LD_INT 3
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 30
22671: PUSH
22672: LD_INT 32
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 3
22681: PUSH
22682: LD_INT 2
22684: PUSH
22685: LD_INT 35
22687: PUSH
22688: LD_INT 43
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 35
22697: PUSH
22698: LD_INT 44
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 35
22707: PUSH
22708: LD_INT 46
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: PPUSH
22731: CALL_OW 69
22735: PUSH
22736: FOR_IN
22737: IFFALSE 22776
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22739: LD_VAR 0 1
22743: PPUSH
22744: LD_INT 43
22746: PUSH
22747: LD_INT 44
22749: PUSH
22750: LD_INT 46
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 1
22760: PPUSH
22761: LD_INT 3
22763: PPUSH
22764: CALL_OW 12
22768: ARRAY
22769: PPUSH
22770: CALL_OW 431
22774: GO 22736
22776: POP
22777: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
22778: LD_ADDR_VAR 0 1
22782: PUSH
22783: LD_INT 22
22785: PUSH
22786: LD_INT 3
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 21
22795: PUSH
22796: LD_INT 3
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 30
22805: PUSH
22806: LD_INT 33
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 3
22815: PUSH
22816: LD_INT 2
22818: PUSH
22819: LD_INT 35
22821: PUSH
22822: LD_INT 43
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 35
22831: PUSH
22832: LD_INT 44
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 35
22841: PUSH
22842: LD_INT 46
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: PPUSH
22865: CALL_OW 69
22869: PUSH
22870: FOR_IN
22871: IFFALSE 22910
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
22873: LD_VAR 0 1
22877: PPUSH
22878: LD_INT 43
22880: PUSH
22881: LD_INT 44
22883: PUSH
22884: LD_INT 46
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 1
22894: PPUSH
22895: LD_INT 3
22897: PPUSH
22898: CALL_OW 12
22902: ARRAY
22903: PPUSH
22904: CALL_OW 431
22908: GO 22870
22910: POP
22911: POP
// end ;
22912: PPOPN 1
22914: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
22915: LD_EXP 24
22919: PPUSH
22920: CALL_OW 310
22924: NOT
22925: PUSH
22926: LD_EXP 28
22930: PPUSH
22931: CALL_OW 302
22935: AND
22936: PUSH
22937: LD_EXP 28
22941: PPUSH
22942: CALL_OW 255
22946: PUSH
22947: LD_INT 3
22949: EQUAL
22950: AND
22951: IFFALSE 22971
22953: GO 22955
22955: DISABLE
// begin enable ;
22956: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
22957: LD_EXP 24
22961: PPUSH
22962: LD_EXP 28
22966: PPUSH
22967: CALL_OW 120
// end ;
22971: END
// every 0 0$1 trigger SikorskyAI = 1 do
22972: LD_EXP 20
22976: PUSH
22977: LD_INT 1
22979: EQUAL
22980: IFFALSE 23015
22982: GO 22984
22984: DISABLE
// begin enable ;
22985: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
22986: LD_INT 4
22988: PPUSH
22989: LD_INT 10
22991: PPUSH
22992: LD_INT 93
22994: PPUSH
22995: LD_INT 93
22997: PPUSH
22998: CALL 10126 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
23002: LD_INT 4
23004: PPUSH
23005: LD_INT 11
23007: PPUSH
23008: LD_INT 3
23010: PPUSH
23011: CALL 16627 0 3
// end ;
23015: END
// every 0 0$1 trigger SikorskyAI = 1 do
23016: LD_EXP 20
23020: PUSH
23021: LD_INT 1
23023: EQUAL
23024: IFFALSE 23036
23026: GO 23028
23028: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
23029: LD_INT 4
23031: PPUSH
23032: CALL 11137 0 1
23036: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
23037: LD_EXP 27
23041: PUSH
23042: LD_INT 1
23044: EQUAL
23045: PUSH
23046: LD_EXP 30
23050: PPUSH
23051: CALL_OW 302
23055: AND
23056: PUSH
23057: LD_EXP 30
23061: PPUSH
23062: CALL_OW 255
23066: PUSH
23067: LD_INT 3
23069: EQUAL
23070: AND
23071: PUSH
23072: LD_INT 22
23074: PUSH
23075: LD_INT 3
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 21
23084: PUSH
23085: LD_INT 2
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: LD_INT 33
23094: PUSH
23095: LD_INT 3
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: LIST
23106: PPUSH
23107: CALL_OW 69
23111: PUSH
23112: LD_INT 0
23114: EQUAL
23115: AND
23116: IFFALSE 23350
23118: GO 23120
23120: DISABLE
// begin enable ;
23121: ENABLE
// if Difficulty = 1 then
23122: LD_OWVAR 67
23126: PUSH
23127: LD_INT 1
23129: EQUAL
23130: IFFALSE 23198
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
23132: LD_INT 3
23134: PPUSH
23135: LD_EXP 30
23139: PPUSH
23140: LD_INT 5
23142: PPUSH
23143: LD_INT 8
23145: PPUSH
23146: CALL_OW 12
23150: PPUSH
23151: LD_INT 43
23153: PUSH
23154: LD_INT 43
23156: PUSH
23157: LD_INT 43
23159: PUSH
23160: LD_INT 43
23162: PUSH
23163: LD_INT 44
23165: PUSH
23166: LD_INT 44
23168: PUSH
23169: LD_INT 44
23171: PUSH
23172: LD_INT 46
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: PPUSH
23185: LD_INT 1
23187: PPUSH
23188: LD_INT 3
23190: PPUSH
23191: LD_INT 24
23193: PPUSH
23194: CALL 9972 0 7
// if Difficulty = 2 then
23198: LD_OWVAR 67
23202: PUSH
23203: LD_INT 2
23205: EQUAL
23206: IFFALSE 23274
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
23208: LD_INT 3
23210: PPUSH
23211: LD_EXP 30
23215: PPUSH
23216: LD_INT 6
23218: PPUSH
23219: LD_INT 8
23221: PPUSH
23222: CALL_OW 12
23226: PPUSH
23227: LD_INT 43
23229: PUSH
23230: LD_INT 43
23232: PUSH
23233: LD_INT 44
23235: PUSH
23236: LD_INT 44
23238: PUSH
23239: LD_INT 44
23241: PUSH
23242: LD_INT 44
23244: PUSH
23245: LD_INT 46
23247: PUSH
23248: LD_INT 46
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: PPUSH
23261: LD_INT 1
23263: PPUSH
23264: LD_INT 3
23266: PPUSH
23267: LD_INT 24
23269: PPUSH
23270: CALL 9972 0 7
// if Difficulty >= 3 then
23274: LD_OWVAR 67
23278: PUSH
23279: LD_INT 3
23281: GREATEREQUAL
23282: IFFALSE 23350
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
23284: LD_INT 3
23286: PPUSH
23287: LD_EXP 30
23291: PPUSH
23292: LD_INT 7
23294: PPUSH
23295: LD_INT 8
23297: PPUSH
23298: CALL_OW 12
23302: PPUSH
23303: LD_INT 43
23305: PUSH
23306: LD_INT 43
23308: PUSH
23309: LD_INT 44
23311: PUSH
23312: LD_INT 44
23314: PUSH
23315: LD_INT 44
23317: PUSH
23318: LD_INT 46
23320: PUSH
23321: LD_INT 46
23323: PUSH
23324: LD_INT 46
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: PPUSH
23337: LD_INT 1
23339: PPUSH
23340: LD_INT 3
23342: PPUSH
23343: LD_INT 24
23345: PPUSH
23346: CALL 9972 0 7
// end ;
23350: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
23351: LD_EXP 38
23355: PUSH
23356: LD_INT 1
23358: EQUAL
23359: IFFALSE 23441
23361: GO 23363
23363: DISABLE
23364: LD_INT 0
23366: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
23367: LD_ADDR_VAR 0 1
23371: PUSH
23372: LD_INT 22
23374: PUSH
23375: LD_INT 1
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 21
23384: PUSH
23385: LD_INT 1
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 3
23394: PUSH
23395: LD_INT 24
23397: PUSH
23398: LD_INT 650
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: LIST
23413: PPUSH
23414: CALL_OW 69
23418: PUSH
23419: FOR_IN
23420: IFFALSE 23439
// ComMoveXY ( i , 51 , 12 ) ;
23422: LD_VAR 0 1
23426: PPUSH
23427: LD_INT 51
23429: PPUSH
23430: LD_INT 12
23432: PPUSH
23433: CALL_OW 111
23437: GO 23419
23439: POP
23440: POP
// end ; end_of_file
23441: PPOPN 1
23443: END
// every 1 1$00 trigger firstAttack = 1 do
23444: LD_EXP 33
23448: PUSH
23449: LD_INT 1
23451: EQUAL
23452: IFFALSE 23562
23454: GO 23456
23456: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 6 ) , rand ( 5 , 6 ) , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23457: LD_INT 6
23459: PPUSH
23460: LD_INT 3
23462: PPUSH
23463: LD_INT 3
23465: PPUSH
23466: LD_INT 4
23468: PPUSH
23469: CALL_OW 12
23473: PUSH
23474: LD_INT 4
23476: PPUSH
23477: LD_INT 6
23479: PPUSH
23480: CALL_OW 12
23484: PUSH
23485: LD_INT 5
23487: PPUSH
23488: LD_INT 6
23490: PPUSH
23491: CALL_OW 12
23495: PUSH
23496: LD_INT 6
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: PUSH
23505: LD_OWVAR 67
23509: ARRAY
23510: PPUSH
23511: LD_INT 0
23513: PPUSH
23514: LD_INT 0
23516: PPUSH
23517: LD_INT 0
23519: PPUSH
23520: LD_INT 0
23522: PPUSH
23523: LD_EXP 25
23527: PPUSH
23528: LD_EXP 26
23532: PPUSH
23533: CALL_OW 12
23537: PPUSH
23538: LD_INT 16
23540: PPUSH
23541: LD_INT 7
23543: PPUSH
23544: LD_INT 1
23546: PPUSH
23547: LD_INT 1
23549: PPUSH
23550: LD_INT 3
23552: PPUSH
23553: CALL_OW 12
23557: PPUSH
23558: CALL 12645 0 12
23562: END
// every 1 1$10 trigger firstAttack = 1 do
23563: LD_EXP 33
23567: PUSH
23568: LD_INT 1
23570: EQUAL
23571: IFFALSE 23667
23573: GO 23575
23575: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
23576: LD_INT 16
23578: PPUSH
23579: LD_INT 6
23581: PPUSH
23582: LD_INT 3
23584: PPUSH
23585: LD_INT 4
23587: PPUSH
23588: CALL_OW 12
23592: PUSH
23593: LD_INT 4
23595: PPUSH
23596: LD_INT 5
23598: PPUSH
23599: CALL_OW 12
23603: PUSH
23604: LD_INT 5
23606: PUSH
23607: LD_INT 6
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: PUSH
23616: LD_OWVAR 67
23620: ARRAY
23621: PPUSH
23622: LD_EXP 25
23626: PPUSH
23627: LD_EXP 26
23631: PPUSH
23632: CALL_OW 12
23636: PPUSH
23637: LD_INT 3
23639: PPUSH
23640: LD_INT 1
23642: PPUSH
23643: LD_INT 3
23645: PPUSH
23646: LD_INT 44
23648: PUSH
23649: LD_INT 46
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PPUSH
23656: EMPTY
23657: PPUSH
23658: EMPTY
23659: PPUSH
23660: LD_INT 1
23662: PPUSH
23663: CALL 14938 0 11
23667: END
// every 6 6$40 trigger firstAttack = 1 and JMMArrive = 0 do
23668: LD_EXP 33
23672: PUSH
23673: LD_INT 1
23675: EQUAL
23676: PUSH
23677: LD_EXP 39
23681: PUSH
23682: LD_INT 0
23684: EQUAL
23685: AND
23686: IFFALSE 23796
23688: GO 23690
23690: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
23691: LD_INT 6
23693: PPUSH
23694: LD_INT 3
23696: PPUSH
23697: LD_INT 4
23699: PPUSH
23700: LD_INT 5
23702: PPUSH
23703: CALL_OW 12
23707: PUSH
23708: LD_INT 5
23710: PPUSH
23711: LD_INT 6
23713: PPUSH
23714: CALL_OW 12
23718: PUSH
23719: LD_INT 5
23721: PPUSH
23722: LD_INT 6
23724: PPUSH
23725: CALL_OW 12
23729: PUSH
23730: LD_INT 6
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: PUSH
23739: LD_OWVAR 67
23743: ARRAY
23744: PPUSH
23745: LD_INT 0
23747: PPUSH
23748: LD_INT 0
23750: PPUSH
23751: LD_INT 0
23753: PPUSH
23754: LD_INT 0
23756: PPUSH
23757: LD_EXP 25
23761: PPUSH
23762: LD_EXP 26
23766: PPUSH
23767: CALL_OW 12
23771: PPUSH
23772: LD_INT 16
23774: PPUSH
23775: LD_INT 7
23777: PPUSH
23778: LD_INT 1
23780: PPUSH
23781: LD_INT 1
23783: PPUSH
23784: LD_INT 3
23786: PPUSH
23787: CALL_OW 12
23791: PPUSH
23792: CALL 12645 0 12
23796: END
// every 6 6$50 trigger firstAttack = 1 and JMMArrive = 0 do
23797: LD_EXP 33
23801: PUSH
23802: LD_INT 1
23804: EQUAL
23805: PUSH
23806: LD_EXP 39
23810: PUSH
23811: LD_INT 0
23813: EQUAL
23814: AND
23815: IFFALSE 23919
23817: GO 23819
23819: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
23820: LD_INT 16
23822: PPUSH
23823: LD_INT 6
23825: PPUSH
23826: LD_INT 4
23828: PPUSH
23829: LD_INT 5
23831: PPUSH
23832: CALL_OW 12
23836: PUSH
23837: LD_INT 6
23839: PPUSH
23840: LD_INT 7
23842: PPUSH
23843: CALL_OW 12
23847: PUSH
23848: LD_INT 7
23850: PUSH
23851: LD_INT 7
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: PUSH
23860: LD_OWVAR 67
23864: ARRAY
23865: PPUSH
23866: LD_EXP 25
23870: PPUSH
23871: LD_EXP 26
23875: PPUSH
23876: CALL_OW 12
23880: PPUSH
23881: LD_INT 3
23883: PPUSH
23884: LD_INT 1
23886: PPUSH
23887: LD_INT 3
23889: PPUSH
23890: LD_INT 43
23892: PUSH
23893: LD_INT 44
23895: PUSH
23896: LD_INT 45
23898: PUSH
23899: LD_INT 46
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: PPUSH
23908: EMPTY
23909: PPUSH
23910: EMPTY
23911: PPUSH
23912: LD_INT 1
23914: PPUSH
23915: CALL 14938 0 11
23919: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
23920: LD_EXP 33
23924: PUSH
23925: LD_INT 1
23927: EQUAL
23928: PUSH
23929: LD_EXP 39
23933: PUSH
23934: LD_INT 0
23936: EQUAL
23937: AND
23938: IFFALSE 24042
23940: GO 23942
23942: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 4 , 5 ) , rand ( 6 , 7 ) , 7 , 8 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
23943: LD_INT 16
23945: PPUSH
23946: LD_INT 6
23948: PPUSH
23949: LD_INT 4
23951: PPUSH
23952: LD_INT 5
23954: PPUSH
23955: CALL_OW 12
23959: PUSH
23960: LD_INT 6
23962: PPUSH
23963: LD_INT 7
23965: PPUSH
23966: CALL_OW 12
23970: PUSH
23971: LD_INT 7
23973: PUSH
23974: LD_INT 8
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: PUSH
23983: LD_OWVAR 67
23987: ARRAY
23988: PPUSH
23989: LD_EXP 25
23993: PPUSH
23994: LD_EXP 26
23998: PPUSH
23999: CALL_OW 12
24003: PPUSH
24004: LD_INT 3
24006: PPUSH
24007: LD_INT 1
24009: PPUSH
24010: LD_INT 3
24012: PPUSH
24013: LD_INT 43
24015: PUSH
24016: LD_INT 44
24018: PUSH
24019: LD_INT 45
24021: PUSH
24022: LD_INT 46
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: PPUSH
24031: EMPTY
24032: PPUSH
24033: EMPTY
24034: PPUSH
24035: LD_INT 1
24037: PPUSH
24038: CALL 14938 0 11
24042: END
// every 11 11$00 trigger firstAttack = 1 and JMMArrive = 0 do
24043: LD_EXP 33
24047: PUSH
24048: LD_INT 1
24050: EQUAL
24051: PUSH
24052: LD_EXP 39
24056: PUSH
24057: LD_INT 0
24059: EQUAL
24060: AND
24061: IFFALSE 24141
24063: GO 24065
24065: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 4 , 6 , 7 , 8 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
24066: LD_INT 16
24068: PPUSH
24069: LD_INT 6
24071: PPUSH
24072: LD_INT 4
24074: PUSH
24075: LD_INT 6
24077: PUSH
24078: LD_INT 7
24080: PUSH
24081: LD_INT 8
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: PUSH
24090: LD_OWVAR 67
24094: ARRAY
24095: PPUSH
24096: LD_EXP 25
24100: PPUSH
24101: LD_EXP 26
24105: PPUSH
24106: CALL_OW 12
24110: PPUSH
24111: LD_INT 3
24113: PPUSH
24114: LD_INT 1
24116: PPUSH
24117: LD_INT 3
24119: PPUSH
24120: LD_INT 44
24122: PUSH
24123: LD_INT 46
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PPUSH
24130: EMPTY
24131: PPUSH
24132: EMPTY
24133: PPUSH
24134: LD_INT 1
24136: PPUSH
24137: CALL 14938 0 11
24141: END
// every 1 1$00 trigger secondAttack = 1 do
24142: LD_EXP 34
24146: PUSH
24147: LD_INT 1
24149: EQUAL
24150: IFFALSE 24236
24152: GO 24154
24154: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24155: LD_INT 6
24157: PPUSH
24158: LD_INT 3
24160: PPUSH
24161: LD_INT 3
24163: PUSH
24164: LD_INT 4
24166: PUSH
24167: LD_INT 5
24169: PUSH
24170: LD_INT 6
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: PUSH
24179: LD_OWVAR 67
24183: ARRAY
24184: PPUSH
24185: LD_INT 0
24187: PPUSH
24188: LD_INT 0
24190: PPUSH
24191: LD_INT 0
24193: PPUSH
24194: LD_INT 0
24196: PPUSH
24197: LD_EXP 25
24201: PPUSH
24202: LD_EXP 26
24206: PPUSH
24207: CALL_OW 12
24211: PPUSH
24212: LD_INT 16
24214: PPUSH
24215: LD_INT 7
24217: PPUSH
24218: LD_INT 1
24220: PPUSH
24221: LD_INT 1
24223: PPUSH
24224: LD_INT 3
24226: PPUSH
24227: CALL_OW 12
24231: PPUSH
24232: CALL 12645 0 12
24236: END
// every 1 1$00 trigger secondAttack = 1 do
24237: LD_EXP 34
24241: PUSH
24242: LD_INT 1
24244: EQUAL
24245: IFFALSE 24357
24247: GO 24249
24249: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
24250: LD_INT 16
24252: PPUSH
24253: LD_INT 6
24255: PPUSH
24256: LD_INT 5
24258: PPUSH
24259: LD_INT 6
24261: PPUSH
24262: CALL_OW 12
24266: PUSH
24267: LD_INT 6
24269: PPUSH
24270: LD_INT 9
24272: PPUSH
24273: CALL_OW 12
24277: PUSH
24278: LD_INT 7
24280: PPUSH
24281: LD_INT 9
24283: PPUSH
24284: CALL_OW 12
24288: PUSH
24289: LD_INT 9
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: PUSH
24298: LD_OWVAR 67
24302: ARRAY
24303: PPUSH
24304: LD_EXP 25
24308: PPUSH
24309: LD_EXP 26
24313: PPUSH
24314: CALL_OW 12
24318: PPUSH
24319: LD_INT 3
24321: PPUSH
24322: LD_INT 1
24324: PPUSH
24325: LD_INT 3
24327: PPUSH
24328: LD_INT 43
24330: PUSH
24331: LD_INT 44
24333: PUSH
24334: LD_INT 45
24336: PUSH
24337: LD_INT 46
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: PPUSH
24346: EMPTY
24347: PPUSH
24348: EMPTY
24349: PPUSH
24350: LD_INT 1
24352: PPUSH
24353: CALL 14938 0 11
24357: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24358: LD_EXP 18
24362: PUSH
24363: LD_INT 0
24365: EQUAL
24366: IFFALSE 24448
24368: GO 24370
24370: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24371: LD_INT 6
24373: PPUSH
24374: LD_INT 3
24376: PPUSH
24377: LD_INT 3
24379: PUSH
24380: LD_INT 4
24382: PUSH
24383: LD_INT 5
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: LIST
24390: PUSH
24391: LD_OWVAR 67
24395: ARRAY
24396: PPUSH
24397: LD_INT 0
24399: PPUSH
24400: LD_INT 0
24402: PPUSH
24403: LD_INT 0
24405: PPUSH
24406: LD_INT 0
24408: PPUSH
24409: LD_EXP 25
24413: PPUSH
24414: LD_EXP 26
24418: PPUSH
24419: CALL_OW 12
24423: PPUSH
24424: LD_INT 16
24426: PPUSH
24427: LD_INT 7
24429: PPUSH
24430: LD_INT 1
24432: PPUSH
24433: LD_INT 1
24435: PPUSH
24436: LD_INT 3
24438: PPUSH
24439: CALL_OW 12
24443: PPUSH
24444: CALL 12645 0 12
24448: END
// every 21 21$0 trigger SikorskyArrive = 0 do
24449: LD_EXP 18
24453: PUSH
24454: LD_INT 0
24456: EQUAL
24457: IFFALSE 24565
24459: GO 24461
24461: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
24462: LD_INT 16
24464: PPUSH
24465: LD_INT 6
24467: PPUSH
24468: LD_INT 5
24470: PPUSH
24471: LD_INT 6
24473: PPUSH
24474: CALL_OW 12
24478: PUSH
24479: LD_INT 6
24481: PPUSH
24482: LD_INT 9
24484: PPUSH
24485: CALL_OW 12
24489: PUSH
24490: LD_INT 7
24492: PPUSH
24493: LD_INT 9
24495: PPUSH
24496: CALL_OW 12
24500: PUSH
24501: LD_INT 9
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: PUSH
24510: LD_OWVAR 67
24514: ARRAY
24515: PPUSH
24516: LD_EXP 25
24520: PPUSH
24521: LD_EXP 26
24525: PPUSH
24526: CALL_OW 12
24530: PPUSH
24531: LD_INT 3
24533: PPUSH
24534: LD_INT 1
24536: PPUSH
24537: LD_INT 3
24539: PPUSH
24540: LD_INT 44
24542: PUSH
24543: LD_INT 45
24545: PUSH
24546: LD_INT 46
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: LIST
24553: PPUSH
24554: EMPTY
24555: PPUSH
24556: EMPTY
24557: PPUSH
24558: LD_INT 1
24560: PPUSH
24561: CALL 14938 0 11
24565: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24566: LD_EXP 18
24570: PUSH
24571: LD_INT 0
24573: EQUAL
24574: IFFALSE 24656
24576: GO 24578
24578: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24579: LD_INT 6
24581: PPUSH
24582: LD_INT 3
24584: PPUSH
24585: LD_INT 3
24587: PUSH
24588: LD_INT 4
24590: PUSH
24591: LD_INT 5
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: LIST
24598: PUSH
24599: LD_OWVAR 67
24603: ARRAY
24604: PPUSH
24605: LD_INT 0
24607: PPUSH
24608: LD_INT 0
24610: PPUSH
24611: LD_INT 0
24613: PPUSH
24614: LD_INT 0
24616: PPUSH
24617: LD_EXP 25
24621: PPUSH
24622: LD_EXP 26
24626: PPUSH
24627: CALL_OW 12
24631: PPUSH
24632: LD_INT 16
24634: PPUSH
24635: LD_INT 7
24637: PPUSH
24638: LD_INT 1
24640: PPUSH
24641: LD_INT 1
24643: PPUSH
24644: LD_INT 3
24646: PPUSH
24647: CALL_OW 12
24651: PPUSH
24652: CALL 12645 0 12
24656: END
// every 26 26$0 trigger SikorskyArrive = 0 do
24657: LD_EXP 18
24661: PUSH
24662: LD_INT 0
24664: EQUAL
24665: IFFALSE 24773
24667: GO 24669
24669: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
24670: LD_INT 16
24672: PPUSH
24673: LD_INT 6
24675: PPUSH
24676: LD_INT 5
24678: PPUSH
24679: LD_INT 6
24681: PPUSH
24682: CALL_OW 12
24686: PUSH
24687: LD_INT 6
24689: PPUSH
24690: LD_INT 9
24692: PPUSH
24693: CALL_OW 12
24697: PUSH
24698: LD_INT 7
24700: PPUSH
24701: LD_INT 9
24703: PPUSH
24704: CALL_OW 12
24708: PUSH
24709: LD_INT 9
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: PUSH
24718: LD_OWVAR 67
24722: ARRAY
24723: PPUSH
24724: LD_EXP 25
24728: PPUSH
24729: LD_EXP 26
24733: PPUSH
24734: CALL_OW 12
24738: PPUSH
24739: LD_INT 3
24741: PPUSH
24742: LD_INT 1
24744: PPUSH
24745: LD_INT 3
24747: PPUSH
24748: LD_INT 44
24750: PUSH
24751: LD_INT 45
24753: PUSH
24754: LD_INT 46
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: LIST
24761: PPUSH
24762: EMPTY
24763: PPUSH
24764: EMPTY
24765: PPUSH
24766: LD_INT 1
24768: PPUSH
24769: CALL 14938 0 11
24773: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24774: LD_EXP 18
24778: PUSH
24779: LD_INT 0
24781: EQUAL
24782: IFFALSE 24868
24784: GO 24786
24786: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
24787: LD_INT 6
24789: PPUSH
24790: LD_INT 3
24792: PPUSH
24793: LD_INT 3
24795: PUSH
24796: LD_INT 4
24798: PUSH
24799: LD_INT 5
24801: PUSH
24802: LD_INT 6
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: PUSH
24811: LD_OWVAR 67
24815: ARRAY
24816: PPUSH
24817: LD_INT 0
24819: PPUSH
24820: LD_INT 0
24822: PPUSH
24823: LD_INT 0
24825: PPUSH
24826: LD_INT 0
24828: PPUSH
24829: LD_EXP 25
24833: PPUSH
24834: LD_EXP 26
24838: PPUSH
24839: CALL_OW 12
24843: PPUSH
24844: LD_INT 16
24846: PPUSH
24847: LD_INT 7
24849: PPUSH
24850: LD_INT 1
24852: PPUSH
24853: LD_INT 1
24855: PPUSH
24856: LD_INT 3
24858: PPUSH
24859: CALL_OW 12
24863: PPUSH
24864: CALL 12645 0 12
24868: END
// every 32 32$0 trigger SikorskyArrive = 0 do
24869: LD_EXP 18
24873: PUSH
24874: LD_INT 0
24876: EQUAL
24877: IFFALSE 24961
24879: GO 24881
24881: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
24882: LD_INT 16
24884: PPUSH
24885: LD_INT 6
24887: PPUSH
24888: LD_INT 7
24890: PUSH
24891: LD_INT 8
24893: PUSH
24894: LD_INT 9
24896: PUSH
24897: LD_INT 10
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: PUSH
24906: LD_OWVAR 67
24910: ARRAY
24911: PPUSH
24912: LD_EXP 25
24916: PPUSH
24917: LD_EXP 26
24921: PPUSH
24922: CALL_OW 12
24926: PPUSH
24927: LD_INT 3
24929: PPUSH
24930: LD_INT 1
24932: PPUSH
24933: LD_INT 3
24935: PPUSH
24936: LD_INT 44
24938: PUSH
24939: LD_INT 45
24941: PUSH
24942: LD_INT 46
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: LIST
24949: PPUSH
24950: EMPTY
24951: PPUSH
24952: EMPTY
24953: PPUSH
24954: LD_INT 1
24956: PPUSH
24957: CALL 14938 0 11
24961: END
// every 0 0$1 trigger timerStatus = 1 do
24962: LD_EXP 35
24966: PUSH
24967: LD_INT 1
24969: EQUAL
24970: IFFALSE 25030
24972: GO 24974
24974: DISABLE
// begin repeat wait ( 0 0$1 ) ;
24975: LD_INT 35
24977: PPUSH
24978: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
24982: LD_ADDR_OWVAR 47
24986: PUSH
24987: LD_STRING #Am08-1
24989: PUSH
24990: LD_EXP 19
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
24999: LD_ADDR_EXP 19
25003: PUSH
25004: LD_EXP 19
25008: PUSH
25009: LD_INT 35
25011: MINUS
25012: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
25013: LD_EXP 19
25017: PUSH
25018: LD_INT 0
25020: EQUAL
25021: IFFALSE 24975
// display_strings := [ ] ;
25023: LD_ADDR_OWVAR 47
25027: PUSH
25028: EMPTY
25029: ST_TO_ADDR
// end ; end_of_file
25030: END
// every 1 1$0 do
25031: GO 25033
25033: DISABLE
// begin if supply <= 13 and supply > 7 then
25034: LD_EXP 40
25038: PUSH
25039: LD_INT 13
25041: LESSEQUAL
25042: PUSH
25043: LD_EXP 40
25047: PUSH
25048: LD_INT 7
25050: GREATER
25051: AND
25052: IFFALSE 25075
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
25054: LD_INT 3
25056: PPUSH
25057: LD_INT 5
25059: PPUSH
25060: CALL_OW 12
25064: PPUSH
25065: LD_INT 5
25067: PPUSH
25068: LD_INT 1
25070: PPUSH
25071: CALL_OW 55
// if supply <= 7 and supply > 4 then
25075: LD_EXP 40
25079: PUSH
25080: LD_INT 7
25082: LESSEQUAL
25083: PUSH
25084: LD_EXP 40
25088: PUSH
25089: LD_INT 4
25091: GREATER
25092: AND
25093: IFFALSE 25116
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
25095: LD_INT 3
25097: PPUSH
25098: LD_INT 5
25100: PPUSH
25101: CALL_OW 12
25105: PPUSH
25106: LD_INT 20
25108: PPUSH
25109: LD_INT 1
25111: PPUSH
25112: CALL_OW 55
// if supply <= 4 and supply > 0 then
25116: LD_EXP 40
25120: PUSH
25121: LD_INT 4
25123: LESSEQUAL
25124: PUSH
25125: LD_EXP 40
25129: PUSH
25130: LD_INT 0
25132: GREATER
25133: AND
25134: IFFALSE 25157
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
25136: LD_INT 3
25138: PPUSH
25139: LD_INT 5
25141: PPUSH
25142: CALL_OW 12
25146: PPUSH
25147: LD_INT 21
25149: PPUSH
25150: LD_INT 1
25152: PPUSH
25153: CALL_OW 55
// if supply > 0 then
25157: LD_EXP 40
25161: PUSH
25162: LD_INT 0
25164: GREATER
25165: IFFALSE 25182
// begin supply = supply - 1 ;
25167: LD_ADDR_EXP 40
25171: PUSH
25172: LD_EXP 40
25176: PUSH
25177: LD_INT 1
25179: MINUS
25180: ST_TO_ADDR
// enable ;
25181: ENABLE
// end ; end ; end_of_file
25182: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
25183: LD_EXP 39
25187: PUSH
25188: LD_INT 1
25190: EQUAL
25191: PUSH
25192: LD_EXP 1
25196: PPUSH
25197: CALL_OW 301
25201: AND
25202: IFFALSE 25214
25204: GO 25206
25206: DISABLE
// YouLost ( JMM ) ;
25207: LD_STRING JMM
25209: PPUSH
25210: CALL_OW 104
25214: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
25215: LD_EXP 18
25219: PUSH
25220: LD_INT 1
25222: EQUAL
25223: PUSH
25224: LD_EXP 16
25228: PPUSH
25229: CALL_OW 301
25233: AND
25234: IFFALSE 25266
25236: GO 25238
25238: DISABLE
// begin DialogueOn ;
25239: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
25243: LD_EXP 23
25247: PPUSH
25248: LD_STRING D8a-Pow-1
25250: PPUSH
25251: CALL_OW 94
// DialogueOff ;
25255: CALL_OW 7
// YouLost ( Dismissed ) ;
25259: LD_STRING Dismissed
25261: PPUSH
25262: CALL_OW 104
// end ;
25266: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
25267: LD_INT 22
25269: PUSH
25270: LD_INT 1
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 2
25279: PUSH
25280: LD_INT 30
25282: PUSH
25283: LD_INT 0
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 30
25292: PUSH
25293: LD_INT 1
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: LIST
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PPUSH
25309: CALL_OW 69
25313: PUSH
25314: LD_INT 0
25316: EQUAL
25317: IFFALSE 25329
25319: GO 25321
25321: DISABLE
// YouLost ( Destroyed ) ; end_of_file
25322: LD_STRING Destroyed
25324: PPUSH
25325: CALL_OW 104
25329: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , tmp , p ;
25330: LD_EXP 24
25334: PPUSH
25335: CALL_OW 301
25339: PUSH
25340: LD_INT 22
25342: PUSH
25343: LD_INT 3
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 21
25352: PUSH
25353: LD_INT 1
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PPUSH
25364: CALL_OW 69
25368: PUSH
25369: LD_INT 7
25371: PUSH
25372: LD_INT 6
25374: PUSH
25375: LD_INT 5
25377: PUSH
25378: LD_INT 5
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: PUSH
25387: LD_OWVAR 67
25391: ARRAY
25392: LESS
25393: AND
25394: PUSH
25395: LD_EXP 1
25399: PPUSH
25400: CALL_OW 305
25404: AND
25405: IFFALSE 25961
25407: GO 25409
25409: DISABLE
25410: LD_INT 0
25412: PPUSH
25413: PPUSH
25414: PPUSH
// begin russianAI = 0 ;
25415: LD_ADDR_EXP 27
25419: PUSH
25420: LD_INT 0
25422: ST_TO_ADDR
// escapeAvalaible = 1 ;
25423: LD_ADDR_EXP 36
25427: PUSH
25428: LD_INT 1
25430: ST_TO_ADDR
// Video ( true ) ;
25431: LD_INT 1
25433: PPUSH
25434: CALL 82925 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
25438: LD_INT 3
25440: PPUSH
25441: LD_INT 1
25443: PPUSH
25444: LD_INT 1
25446: PPUSH
25447: LD_INT 0
25449: PPUSH
25450: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
25454: LD_INT 6
25456: PPUSH
25457: LD_INT 1
25459: PPUSH
25460: LD_INT 1
25462: PPUSH
25463: LD_INT 0
25465: PPUSH
25466: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
25470: LD_INT 3
25472: PPUSH
25473: LD_INT 1
25475: PPUSH
25476: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
25480: LD_INT 97
25482: PPUSH
25483: LD_INT 91
25485: PPUSH
25486: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
25490: LD_INT 22
25492: PUSH
25493: LD_INT 3
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 21
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PPUSH
25514: CALL_OW 69
25518: PPUSH
25519: CALL_OW 121
// wait ( 0 0$01 ) ;
25523: LD_INT 35
25525: PPUSH
25526: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25530: LD_INT 22
25532: PUSH
25533: LD_INT 3
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 21
25542: PUSH
25543: LD_INT 1
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PPUSH
25554: CALL_OW 69
25558: PPUSH
25559: LD_INT 124
25561: PPUSH
25562: LD_INT 98
25564: PPUSH
25565: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
25569: LD_INT 22
25571: PUSH
25572: LD_INT 6
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 21
25581: PUSH
25582: LD_INT 1
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PPUSH
25593: CALL_OW 69
25597: PPUSH
25598: CALL_OW 121
// wait ( 0 0$01 ) ;
25602: LD_INT 35
25604: PPUSH
25605: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
25609: LD_INT 22
25611: PUSH
25612: LD_INT 6
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 21
25621: PUSH
25622: LD_INT 1
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PPUSH
25633: CALL_OW 69
25637: PPUSH
25638: LD_INT 124
25640: PPUSH
25641: LD_INT 98
25643: PPUSH
25644: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
25648: LD_INT 22
25650: PUSH
25651: LD_INT 1
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 21
25660: PUSH
25661: LD_INT 1
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 3
25670: PUSH
25671: LD_INT 54
25673: PUSH
25674: EMPTY
25675: LIST
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: LIST
25685: PPUSH
25686: CALL_OW 69
25690: PPUSH
25691: LD_INT 124
25693: PPUSH
25694: LD_INT 98
25696: PPUSH
25697: CALL_OW 114
// wait ( 0 0$4 ) ;
25701: LD_INT 140
25703: PPUSH
25704: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
25708: LD_INT 124
25710: PPUSH
25711: LD_INT 98
25713: PPUSH
25714: CALL_OW 84
// if SikorskyStatus = 1 then
25718: LD_EXP 21
25722: PUSH
25723: LD_INT 1
25725: EQUAL
25726: IFFALSE 25740
// Say ( Sikorski , D9-Sik-1 ) ;
25728: LD_EXP 16
25732: PPUSH
25733: LD_STRING D9-Sik-1
25735: PPUSH
25736: CALL_OW 88
// if SikorskyStatus = 2 then
25740: LD_EXP 21
25744: PUSH
25745: LD_INT 2
25747: EQUAL
25748: IFFALSE 25769
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
25750: LD_EXP 23
25754: PPUSH
25755: LD_STRING D8b-Pow-1
25757: PPUSH
25758: CALL_OW 94
// YouLost ( Dismissed ) ;
25762: LD_STRING Dismissed
25764: PPUSH
25765: CALL_OW 104
// end ; p := 0 0$0 ;
25769: LD_ADDR_VAR 0 3
25773: PUSH
25774: LD_INT 0
25776: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
25777: LD_ADDR_VAR 0 2
25781: PUSH
25782: LD_INT 2
25784: PUSH
25785: LD_INT 22
25787: PUSH
25788: LD_INT 3
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 22
25797: PUSH
25798: LD_INT 6
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 21
25812: PUSH
25813: LD_INT 1
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PPUSH
25824: CALL_OW 69
25828: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25829: LD_INT 35
25831: PPUSH
25832: CALL_OW 67
// p := p + 0 0$1 ;
25836: LD_ADDR_VAR 0 3
25840: PUSH
25841: LD_VAR 0 3
25845: PUSH
25846: LD_INT 35
25848: PLUS
25849: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
25850: LD_VAR 0 2
25854: PPUSH
25855: LD_INT 22
25857: PPUSH
25858: CALL_OW 113
// for i in tmp do
25862: LD_ADDR_VAR 0 1
25866: PUSH
25867: LD_VAR 0 2
25871: PUSH
25872: FOR_IN
25873: IFFALSE 25900
// if IsInArea ( i , RussianEscape ) then
25875: LD_VAR 0 1
25879: PPUSH
25880: LD_INT 22
25882: PPUSH
25883: CALL_OW 308
25887: IFFALSE 25898
// RemoveUnit ( i ) ;
25889: LD_VAR 0 1
25893: PPUSH
25894: CALL_OW 64
25898: GO 25872
25900: POP
25901: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
25902: LD_INT 23
25904: PUSH
25905: LD_INT 3
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 21
25914: PUSH
25915: LD_INT 1
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 24
25924: PUSH
25925: LD_INT 250
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: LIST
25936: PPUSH
25937: CALL_OW 69
25941: PUSH
25942: LD_INT 0
25944: EQUAL
25945: PUSH
25946: LD_VAR 0 3
25950: PUSH
25951: LD_INT 245
25953: GREATEREQUAL
25954: OR
25955: IFFALSE 25829
// FinishMission ;
25957: CALL 25964 0 0
// end ;
25961: PPOPN 3
25963: END
// export function FinishMission ; var tmp ; begin
25964: LD_INT 0
25966: PPUSH
25967: PPUSH
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 then
25968: LD_INT 22
25970: PUSH
25971: LD_INT 4
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PPUSH
25978: CALL_OW 69
25982: PUSH
25983: LD_INT 0
25985: EQUAL
25986: IFFALSE 25995
// SetAchievement ( ACH_BLITZKRIEG ) ;
25988: LD_STRING ACH_BLITZKRIEG
25990: PPUSH
25991: CALL_OW 543
// if tick <= 25 25$00 then
25995: LD_OWVAR 1
25999: PUSH
26000: LD_INT 52500
26002: LESSEQUAL
26003: IFFALSE 26019
// begin wait ( 3 ) ;
26005: LD_INT 3
26007: PPUSH
26008: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
26012: LD_STRING ACH_ASPEED_8
26014: PPUSH
26015: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
26019: LD_STRING med1
26021: PPUSH
26022: LD_INT 1
26024: PPUSH
26025: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
26029: LD_STRING med2
26031: PPUSH
26032: LD_INT 1
26034: PPUSH
26035: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
26039: LD_STRING perfect
26041: PPUSH
26042: LD_INT 1
26044: PPUSH
26045: CALL_OW 101
// if Difficulty >= 3 then
26049: LD_OWVAR 67
26053: PUSH
26054: LD_INT 3
26056: GREATEREQUAL
26057: IFFALSE 26069
// SetAchievementEX ( ACH_AMER , 8 ) ;
26059: LD_STRING ACH_AMER
26061: PPUSH
26062: LD_INT 8
26064: PPUSH
26065: CALL_OW 564
// GiveMedals ( Main ) ;
26069: LD_STRING Main
26071: PPUSH
26072: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
26076: LD_INT 22
26078: PUSH
26079: LD_INT 1
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 23
26088: PUSH
26089: LD_INT 1
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 21
26098: PUSH
26099: LD_INT 1
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 2
26108: PUSH
26109: LD_INT 25
26111: PUSH
26112: LD_INT 1
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 25
26121: PUSH
26122: LD_INT 2
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 25
26131: PUSH
26132: LD_INT 3
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 25
26141: PUSH
26142: LD_INT 4
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: PPUSH
26162: CALL_OW 69
26166: PPUSH
26167: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26171: LD_EXP 1
26175: PPUSH
26176: LD_EXP 43
26180: PUSH
26181: LD_STRING JMM
26183: STR
26184: PPUSH
26185: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26189: LD_EXP 2
26193: PPUSH
26194: LD_EXP 43
26198: PUSH
26199: LD_STRING Brown
26201: STR
26202: PPUSH
26203: CALL 8488 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26207: LD_EXP 3
26211: PPUSH
26212: LD_EXP 43
26216: PUSH
26217: LD_STRING Donaldson
26219: STR
26220: PPUSH
26221: CALL 8488 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26225: LD_EXP 4
26229: PPUSH
26230: LD_EXP 43
26234: PUSH
26235: LD_STRING Bobby
26237: STR
26238: PPUSH
26239: CALL 8488 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26243: LD_EXP 5
26247: PPUSH
26248: LD_EXP 43
26252: PUSH
26253: LD_STRING Cyrus
26255: STR
26256: PPUSH
26257: CALL 8488 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26261: LD_EXP 6
26265: PPUSH
26266: LD_EXP 43
26270: PUSH
26271: LD_STRING Lisa
26273: STR
26274: PPUSH
26275: CALL 8488 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26279: LD_EXP 7
26283: PPUSH
26284: LD_EXP 43
26288: PUSH
26289: LD_STRING Frank
26291: STR
26292: PPUSH
26293: CALL 8488 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26297: LD_EXP 8
26301: PPUSH
26302: LD_EXP 43
26306: PUSH
26307: LD_STRING Gladstone
26309: STR
26310: PPUSH
26311: CALL 8488 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26315: LD_EXP 9
26319: PPUSH
26320: LD_EXP 43
26324: PUSH
26325: LD_STRING Kikuchi
26327: STR
26328: PPUSH
26329: CALL 8488 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26333: LD_EXP 14
26337: PPUSH
26338: LD_EXP 43
26342: PUSH
26343: LD_STRING Denis
26345: STR
26346: PPUSH
26347: CALL 8488 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26351: LD_EXP 15
26355: PPUSH
26356: LD_EXP 43
26360: PUSH
26361: LD_STRING Joan
26363: STR
26364: PPUSH
26365: CALL 8488 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
26369: LD_EXP 10
26373: PPUSH
26374: LD_EXP 43
26378: PUSH
26379: LD_STRING Khatam
26381: STR
26382: PPUSH
26383: CALL 8488 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26387: LD_EXP 13
26391: PPUSH
26392: LD_EXP 43
26396: PUSH
26397: LD_STRING Houten
26399: STR
26400: PPUSH
26401: CALL 8488 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
26405: LD_INT 50
26407: PUSH
26408: EMPTY
26409: LIST
26410: PUSH
26411: LD_INT 22
26413: PUSH
26414: LD_INT 1
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 21
26423: PUSH
26424: LD_INT 1
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 2
26433: PUSH
26434: LD_INT 25
26436: PUSH
26437: LD_INT 1
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 25
26446: PUSH
26447: LD_INT 2
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 25
26456: PUSH
26457: LD_INT 3
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 25
26466: PUSH
26467: LD_INT 4
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: PPUSH
26487: CALL_OW 69
26491: PUSH
26492: LD_EXP 1
26496: PUSH
26497: LD_EXP 2
26501: PUSH
26502: LD_EXP 3
26506: PUSH
26507: LD_EXP 4
26511: PUSH
26512: LD_EXP 5
26516: PUSH
26517: LD_EXP 6
26521: PUSH
26522: LD_EXP 7
26526: PUSH
26527: LD_EXP 8
26531: PUSH
26532: LD_EXP 9
26536: PUSH
26537: LD_EXP 14
26541: PUSH
26542: LD_EXP 15
26546: PUSH
26547: LD_EXP 13
26551: PUSH
26552: LD_EXP 10
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: DIFF
26572: PPUSH
26573: LD_STRING 08_other_survivors
26575: PPUSH
26576: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
26580: LD_INT 23
26582: PPUSH
26583: CALL 26596 0 1
// YouWin ;
26587: CALL_OW 103
// end ;
26591: LD_VAR 0 1
26595: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
26596: LD_INT 0
26598: PPUSH
26599: PPUSH
26600: PPUSH
26601: PPUSH
// gammaBase = [ ] ;
26602: LD_ADDR_VAR 0 4
26606: PUSH
26607: EMPTY
26608: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26609: LD_ADDR_VAR 0 5
26613: PUSH
26614: LD_VAR 0 1
26618: PPUSH
26619: LD_INT 22
26621: PUSH
26622: LD_INT 1
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 21
26631: PUSH
26632: LD_INT 3
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 50
26641: PUSH
26642: EMPTY
26643: LIST
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: LIST
26649: PPUSH
26650: CALL_OW 70
26654: ST_TO_ADDR
// for i in buildings do
26655: LD_ADDR_VAR 0 3
26659: PUSH
26660: LD_VAR 0 5
26664: PUSH
26665: FOR_IN
26666: IFFALSE 27103
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26668: LD_VAR 0 3
26672: PPUSH
26673: CALL_OW 266
26677: PUSH
26678: LD_INT 6
26680: PUSH
26681: LD_INT 7
26683: PUSH
26684: LD_INT 8
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: LIST
26691: IN
26692: IFFALSE 26806
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26694: LD_ADDR_VAR 0 4
26698: PUSH
26699: LD_VAR 0 4
26703: PUSH
26704: LD_VAR 0 3
26708: PPUSH
26709: CALL_OW 266
26713: PUSH
26714: LD_VAR 0 3
26718: PPUSH
26719: CALL_OW 250
26723: PUSH
26724: LD_VAR 0 3
26728: PPUSH
26729: CALL_OW 251
26733: PUSH
26734: LD_VAR 0 3
26738: PPUSH
26739: CALL_OW 254
26743: PUSH
26744: LD_VAR 0 3
26748: PPUSH
26749: CALL_OW 267
26753: PUSH
26754: LD_VAR 0 3
26758: PPUSH
26759: CALL_OW 248
26763: PUSH
26764: LD_VAR 0 3
26768: PPUSH
26769: LD_INT 1
26771: PPUSH
26772: CALL_OW 268
26776: PUSH
26777: LD_VAR 0 3
26781: PPUSH
26782: LD_INT 2
26784: PPUSH
26785: CALL_OW 268
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: PUSH
26800: EMPTY
26801: LIST
26802: ADD
26803: ST_TO_ADDR
26804: GO 27101
// if GetBType ( i ) = b_bunker then
26806: LD_VAR 0 3
26810: PPUSH
26811: CALL_OW 266
26815: PUSH
26816: LD_INT 32
26818: EQUAL
26819: IFFALSE 26916
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26821: LD_ADDR_VAR 0 4
26825: PUSH
26826: LD_VAR 0 4
26830: PUSH
26831: LD_VAR 0 3
26835: PPUSH
26836: CALL_OW 266
26840: PUSH
26841: LD_VAR 0 3
26845: PPUSH
26846: CALL_OW 250
26850: PUSH
26851: LD_VAR 0 3
26855: PPUSH
26856: CALL_OW 251
26860: PUSH
26861: LD_VAR 0 3
26865: PPUSH
26866: CALL_OW 254
26870: PUSH
26871: LD_VAR 0 3
26875: PPUSH
26876: CALL_OW 267
26880: PUSH
26881: LD_VAR 0 3
26885: PPUSH
26886: CALL_OW 248
26890: PUSH
26891: LD_VAR 0 3
26895: PPUSH
26896: CALL_OW 269
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: PUSH
26910: EMPTY
26911: LIST
26912: ADD
26913: ST_TO_ADDR
26914: GO 27101
// if GetBType ( i ) = b_factory then
26916: LD_VAR 0 3
26920: PPUSH
26921: CALL_OW 266
26925: PUSH
26926: LD_INT 3
26928: EQUAL
26929: IFFALSE 27019
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
26931: LD_ADDR_VAR 0 4
26935: PUSH
26936: LD_VAR 0 4
26940: PPUSH
26941: LD_INT 1
26943: PPUSH
26944: LD_VAR 0 3
26948: PPUSH
26949: CALL_OW 266
26953: PUSH
26954: LD_VAR 0 3
26958: PPUSH
26959: CALL_OW 250
26963: PUSH
26964: LD_VAR 0 3
26968: PPUSH
26969: CALL_OW 251
26973: PUSH
26974: LD_VAR 0 3
26978: PPUSH
26979: CALL_OW 254
26983: PUSH
26984: LD_VAR 0 3
26988: PPUSH
26989: CALL_OW 267
26993: PUSH
26994: LD_VAR 0 3
26998: PPUSH
26999: CALL_OW 248
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: PPUSH
27012: CALL_OW 2
27016: ST_TO_ADDR
27017: GO 27101
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
27019: LD_ADDR_VAR 0 4
27023: PUSH
27024: LD_VAR 0 4
27028: PUSH
27029: LD_VAR 0 3
27033: PPUSH
27034: CALL_OW 266
27038: PUSH
27039: LD_VAR 0 3
27043: PPUSH
27044: CALL_OW 250
27048: PUSH
27049: LD_VAR 0 3
27053: PPUSH
27054: CALL_OW 251
27058: PUSH
27059: LD_VAR 0 3
27063: PPUSH
27064: CALL_OW 254
27068: PUSH
27069: LD_VAR 0 3
27073: PPUSH
27074: CALL_OW 267
27078: PUSH
27079: LD_VAR 0 3
27083: PPUSH
27084: CALL_OW 248
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: PUSH
27097: EMPTY
27098: LIST
27099: ADD
27100: ST_TO_ADDR
// end ;
27101: GO 26665
27103: POP
27104: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
27105: LD_VAR 0 4
27109: PPUSH
27110: LD_STRING 08_GammaBase
27112: PPUSH
27113: CALL_OW 39
// end ; end_of_file
27117: LD_VAR 0 2
27121: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
27122: LD_INT 0
27124: PPUSH
// ar_miner := 81 ;
27125: LD_ADDR_EXP 55
27129: PUSH
27130: LD_INT 81
27132: ST_TO_ADDR
// ar_crane := 88 ;
27133: LD_ADDR_EXP 54
27137: PUSH
27138: LD_INT 88
27140: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
27141: LD_ADDR_EXP 49
27145: PUSH
27146: LD_INT 89
27148: ST_TO_ADDR
// us_hack := 99 ;
27149: LD_ADDR_EXP 50
27153: PUSH
27154: LD_INT 99
27156: ST_TO_ADDR
// us_artillery := 97 ;
27157: LD_ADDR_EXP 51
27161: PUSH
27162: LD_INT 97
27164: ST_TO_ADDR
// ar_bio_bomb := 91 ;
27165: LD_ADDR_EXP 52
27169: PUSH
27170: LD_INT 91
27172: ST_TO_ADDR
// ar_mortar := 92 ;
27173: LD_ADDR_EXP 53
27177: PUSH
27178: LD_INT 92
27180: ST_TO_ADDR
// ru_flamethrower := 93 ;
27181: LD_ADDR_EXP 56
27185: PUSH
27186: LD_INT 93
27188: ST_TO_ADDR
// ru_radar := 98 ;
27189: LD_ADDR_EXP 48
27193: PUSH
27194: LD_INT 98
27196: ST_TO_ADDR
// tech_Artillery := 80 ;
27197: LD_ADDR_EXP 57
27201: PUSH
27202: LD_INT 80
27204: ST_TO_ADDR
// tech_RadMat := 81 ;
27205: LD_ADDR_EXP 58
27209: PUSH
27210: LD_INT 81
27212: ST_TO_ADDR
// tech_BasicTools := 82 ;
27213: LD_ADDR_EXP 59
27217: PUSH
27218: LD_INT 82
27220: ST_TO_ADDR
// tech_Cargo := 83 ;
27221: LD_ADDR_EXP 60
27225: PUSH
27226: LD_INT 83
27228: ST_TO_ADDR
// tech_Track := 84 ;
27229: LD_ADDR_EXP 61
27233: PUSH
27234: LD_INT 84
27236: ST_TO_ADDR
// tech_Crane := 85 ;
27237: LD_ADDR_EXP 62
27241: PUSH
27242: LD_INT 85
27244: ST_TO_ADDR
// tech_Bulldozer := 86 ;
27245: LD_ADDR_EXP 63
27249: PUSH
27250: LD_INT 86
27252: ST_TO_ADDR
// tech_Hovercraft := 87 ;
27253: LD_ADDR_EXP 64
27257: PUSH
27258: LD_INT 87
27260: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
27261: LD_ADDR_EXP 65
27265: PUSH
27266: LD_INT 88
27268: ST_TO_ADDR
// class_mastodont := 31 ;
27269: LD_ADDR_EXP 66
27273: PUSH
27274: LD_INT 31
27276: ST_TO_ADDR
// class_horse := 21 ;
27277: LD_ADDR_EXP 67
27281: PUSH
27282: LD_INT 21
27284: ST_TO_ADDR
// end ;
27285: LD_VAR 0 1
27289: RET
// every 1 do
27290: GO 27292
27292: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
27293: CALL 27122 0 0
27297: END
// every 0 0$1 do
27298: GO 27300
27300: DISABLE
// begin enable ;
27301: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
27302: LD_STRING updateTimer(
27304: PUSH
27305: LD_OWVAR 1
27309: STR
27310: PUSH
27311: LD_STRING );
27313: STR
27314: PPUSH
27315: CALL_OW 559
// end ;
27319: END
// export function SOS_MapStart ( ) ; begin
27320: LD_INT 0
27322: PPUSH
// if streamModeActive then
27323: LD_EXP 68
27327: IFFALSE 27336
// DefineStreamItems ( true ) ;
27329: LD_INT 1
27331: PPUSH
27332: CALL 28986 0 1
// UpdateFactoryWaypoints ( ) ;
27336: CALL 42570 0 0
// end ;
27340: LD_VAR 0 1
27344: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27345: LD_INT 0
27347: PPUSH
// if p2 = 100 then
27348: LD_VAR 0 2
27352: PUSH
27353: LD_INT 100
27355: EQUAL
27356: IFFALSE 28359
// begin if not StreamModeActive then
27358: LD_EXP 68
27362: NOT
27363: IFFALSE 27373
// StreamModeActive := true ;
27365: LD_ADDR_EXP 68
27369: PUSH
27370: LD_INT 1
27372: ST_TO_ADDR
// if p3 = 0 then
27373: LD_VAR 0 3
27377: PUSH
27378: LD_INT 0
27380: EQUAL
27381: IFFALSE 27387
// InitStreamMode ;
27383: CALL 28522 0 0
// if p3 = 1 then
27387: LD_VAR 0 3
27391: PUSH
27392: LD_INT 1
27394: EQUAL
27395: IFFALSE 27405
// sRocket := true ;
27397: LD_ADDR_EXP 73
27401: PUSH
27402: LD_INT 1
27404: ST_TO_ADDR
// if p3 = 2 then
27405: LD_VAR 0 3
27409: PUSH
27410: LD_INT 2
27412: EQUAL
27413: IFFALSE 27423
// sSpeed := true ;
27415: LD_ADDR_EXP 72
27419: PUSH
27420: LD_INT 1
27422: ST_TO_ADDR
// if p3 = 3 then
27423: LD_VAR 0 3
27427: PUSH
27428: LD_INT 3
27430: EQUAL
27431: IFFALSE 27441
// sEngine := true ;
27433: LD_ADDR_EXP 74
27437: PUSH
27438: LD_INT 1
27440: ST_TO_ADDR
// if p3 = 4 then
27441: LD_VAR 0 3
27445: PUSH
27446: LD_INT 4
27448: EQUAL
27449: IFFALSE 27459
// sSpec := true ;
27451: LD_ADDR_EXP 71
27455: PUSH
27456: LD_INT 1
27458: ST_TO_ADDR
// if p3 = 5 then
27459: LD_VAR 0 3
27463: PUSH
27464: LD_INT 5
27466: EQUAL
27467: IFFALSE 27477
// sLevel := true ;
27469: LD_ADDR_EXP 75
27473: PUSH
27474: LD_INT 1
27476: ST_TO_ADDR
// if p3 = 6 then
27477: LD_VAR 0 3
27481: PUSH
27482: LD_INT 6
27484: EQUAL
27485: IFFALSE 27495
// sArmoury := true ;
27487: LD_ADDR_EXP 76
27491: PUSH
27492: LD_INT 1
27494: ST_TO_ADDR
// if p3 = 7 then
27495: LD_VAR 0 3
27499: PUSH
27500: LD_INT 7
27502: EQUAL
27503: IFFALSE 27513
// sRadar := true ;
27505: LD_ADDR_EXP 77
27509: PUSH
27510: LD_INT 1
27512: ST_TO_ADDR
// if p3 = 8 then
27513: LD_VAR 0 3
27517: PUSH
27518: LD_INT 8
27520: EQUAL
27521: IFFALSE 27531
// sBunker := true ;
27523: LD_ADDR_EXP 78
27527: PUSH
27528: LD_INT 1
27530: ST_TO_ADDR
// if p3 = 9 then
27531: LD_VAR 0 3
27535: PUSH
27536: LD_INT 9
27538: EQUAL
27539: IFFALSE 27549
// sHack := true ;
27541: LD_ADDR_EXP 79
27545: PUSH
27546: LD_INT 1
27548: ST_TO_ADDR
// if p3 = 10 then
27549: LD_VAR 0 3
27553: PUSH
27554: LD_INT 10
27556: EQUAL
27557: IFFALSE 27567
// sFire := true ;
27559: LD_ADDR_EXP 80
27563: PUSH
27564: LD_INT 1
27566: ST_TO_ADDR
// if p3 = 11 then
27567: LD_VAR 0 3
27571: PUSH
27572: LD_INT 11
27574: EQUAL
27575: IFFALSE 27585
// sRefresh := true ;
27577: LD_ADDR_EXP 81
27581: PUSH
27582: LD_INT 1
27584: ST_TO_ADDR
// if p3 = 12 then
27585: LD_VAR 0 3
27589: PUSH
27590: LD_INT 12
27592: EQUAL
27593: IFFALSE 27603
// sExp := true ;
27595: LD_ADDR_EXP 82
27599: PUSH
27600: LD_INT 1
27602: ST_TO_ADDR
// if p3 = 13 then
27603: LD_VAR 0 3
27607: PUSH
27608: LD_INT 13
27610: EQUAL
27611: IFFALSE 27621
// sDepot := true ;
27613: LD_ADDR_EXP 83
27617: PUSH
27618: LD_INT 1
27620: ST_TO_ADDR
// if p3 = 14 then
27621: LD_VAR 0 3
27625: PUSH
27626: LD_INT 14
27628: EQUAL
27629: IFFALSE 27639
// sFlag := true ;
27631: LD_ADDR_EXP 84
27635: PUSH
27636: LD_INT 1
27638: ST_TO_ADDR
// if p3 = 15 then
27639: LD_VAR 0 3
27643: PUSH
27644: LD_INT 15
27646: EQUAL
27647: IFFALSE 27657
// sKamikadze := true ;
27649: LD_ADDR_EXP 92
27653: PUSH
27654: LD_INT 1
27656: ST_TO_ADDR
// if p3 = 16 then
27657: LD_VAR 0 3
27661: PUSH
27662: LD_INT 16
27664: EQUAL
27665: IFFALSE 27675
// sTroll := true ;
27667: LD_ADDR_EXP 93
27671: PUSH
27672: LD_INT 1
27674: ST_TO_ADDR
// if p3 = 17 then
27675: LD_VAR 0 3
27679: PUSH
27680: LD_INT 17
27682: EQUAL
27683: IFFALSE 27693
// sSlow := true ;
27685: LD_ADDR_EXP 94
27689: PUSH
27690: LD_INT 1
27692: ST_TO_ADDR
// if p3 = 18 then
27693: LD_VAR 0 3
27697: PUSH
27698: LD_INT 18
27700: EQUAL
27701: IFFALSE 27711
// sLack := true ;
27703: LD_ADDR_EXP 95
27707: PUSH
27708: LD_INT 1
27710: ST_TO_ADDR
// if p3 = 19 then
27711: LD_VAR 0 3
27715: PUSH
27716: LD_INT 19
27718: EQUAL
27719: IFFALSE 27729
// sTank := true ;
27721: LD_ADDR_EXP 97
27725: PUSH
27726: LD_INT 1
27728: ST_TO_ADDR
// if p3 = 20 then
27729: LD_VAR 0 3
27733: PUSH
27734: LD_INT 20
27736: EQUAL
27737: IFFALSE 27747
// sRemote := true ;
27739: LD_ADDR_EXP 98
27743: PUSH
27744: LD_INT 1
27746: ST_TO_ADDR
// if p3 = 21 then
27747: LD_VAR 0 3
27751: PUSH
27752: LD_INT 21
27754: EQUAL
27755: IFFALSE 27765
// sPowell := true ;
27757: LD_ADDR_EXP 99
27761: PUSH
27762: LD_INT 1
27764: ST_TO_ADDR
// if p3 = 22 then
27765: LD_VAR 0 3
27769: PUSH
27770: LD_INT 22
27772: EQUAL
27773: IFFALSE 27783
// sTeleport := true ;
27775: LD_ADDR_EXP 102
27779: PUSH
27780: LD_INT 1
27782: ST_TO_ADDR
// if p3 = 23 then
27783: LD_VAR 0 3
27787: PUSH
27788: LD_INT 23
27790: EQUAL
27791: IFFALSE 27801
// sOilTower := true ;
27793: LD_ADDR_EXP 104
27797: PUSH
27798: LD_INT 1
27800: ST_TO_ADDR
// if p3 = 24 then
27801: LD_VAR 0 3
27805: PUSH
27806: LD_INT 24
27808: EQUAL
27809: IFFALSE 27819
// sShovel := true ;
27811: LD_ADDR_EXP 105
27815: PUSH
27816: LD_INT 1
27818: ST_TO_ADDR
// if p3 = 25 then
27819: LD_VAR 0 3
27823: PUSH
27824: LD_INT 25
27826: EQUAL
27827: IFFALSE 27837
// sSheik := true ;
27829: LD_ADDR_EXP 106
27833: PUSH
27834: LD_INT 1
27836: ST_TO_ADDR
// if p3 = 26 then
27837: LD_VAR 0 3
27841: PUSH
27842: LD_INT 26
27844: EQUAL
27845: IFFALSE 27855
// sEarthquake := true ;
27847: LD_ADDR_EXP 108
27851: PUSH
27852: LD_INT 1
27854: ST_TO_ADDR
// if p3 = 27 then
27855: LD_VAR 0 3
27859: PUSH
27860: LD_INT 27
27862: EQUAL
27863: IFFALSE 27873
// sAI := true ;
27865: LD_ADDR_EXP 109
27869: PUSH
27870: LD_INT 1
27872: ST_TO_ADDR
// if p3 = 28 then
27873: LD_VAR 0 3
27877: PUSH
27878: LD_INT 28
27880: EQUAL
27881: IFFALSE 27891
// sCargo := true ;
27883: LD_ADDR_EXP 112
27887: PUSH
27888: LD_INT 1
27890: ST_TO_ADDR
// if p3 = 29 then
27891: LD_VAR 0 3
27895: PUSH
27896: LD_INT 29
27898: EQUAL
27899: IFFALSE 27909
// sDLaser := true ;
27901: LD_ADDR_EXP 113
27905: PUSH
27906: LD_INT 1
27908: ST_TO_ADDR
// if p3 = 30 then
27909: LD_VAR 0 3
27913: PUSH
27914: LD_INT 30
27916: EQUAL
27917: IFFALSE 27927
// sExchange := true ;
27919: LD_ADDR_EXP 114
27923: PUSH
27924: LD_INT 1
27926: ST_TO_ADDR
// if p3 = 31 then
27927: LD_VAR 0 3
27931: PUSH
27932: LD_INT 31
27934: EQUAL
27935: IFFALSE 27945
// sFac := true ;
27937: LD_ADDR_EXP 115
27941: PUSH
27942: LD_INT 1
27944: ST_TO_ADDR
// if p3 = 32 then
27945: LD_VAR 0 3
27949: PUSH
27950: LD_INT 32
27952: EQUAL
27953: IFFALSE 27963
// sPower := true ;
27955: LD_ADDR_EXP 116
27959: PUSH
27960: LD_INT 1
27962: ST_TO_ADDR
// if p3 = 33 then
27963: LD_VAR 0 3
27967: PUSH
27968: LD_INT 33
27970: EQUAL
27971: IFFALSE 27981
// sRandom := true ;
27973: LD_ADDR_EXP 117
27977: PUSH
27978: LD_INT 1
27980: ST_TO_ADDR
// if p3 = 34 then
27981: LD_VAR 0 3
27985: PUSH
27986: LD_INT 34
27988: EQUAL
27989: IFFALSE 27999
// sShield := true ;
27991: LD_ADDR_EXP 118
27995: PUSH
27996: LD_INT 1
27998: ST_TO_ADDR
// if p3 = 35 then
27999: LD_VAR 0 3
28003: PUSH
28004: LD_INT 35
28006: EQUAL
28007: IFFALSE 28017
// sTime := true ;
28009: LD_ADDR_EXP 119
28013: PUSH
28014: LD_INT 1
28016: ST_TO_ADDR
// if p3 = 36 then
28017: LD_VAR 0 3
28021: PUSH
28022: LD_INT 36
28024: EQUAL
28025: IFFALSE 28035
// sTools := true ;
28027: LD_ADDR_EXP 120
28031: PUSH
28032: LD_INT 1
28034: ST_TO_ADDR
// if p3 = 101 then
28035: LD_VAR 0 3
28039: PUSH
28040: LD_INT 101
28042: EQUAL
28043: IFFALSE 28053
// sSold := true ;
28045: LD_ADDR_EXP 85
28049: PUSH
28050: LD_INT 1
28052: ST_TO_ADDR
// if p3 = 102 then
28053: LD_VAR 0 3
28057: PUSH
28058: LD_INT 102
28060: EQUAL
28061: IFFALSE 28071
// sDiff := true ;
28063: LD_ADDR_EXP 86
28067: PUSH
28068: LD_INT 1
28070: ST_TO_ADDR
// if p3 = 103 then
28071: LD_VAR 0 3
28075: PUSH
28076: LD_INT 103
28078: EQUAL
28079: IFFALSE 28089
// sFog := true ;
28081: LD_ADDR_EXP 89
28085: PUSH
28086: LD_INT 1
28088: ST_TO_ADDR
// if p3 = 104 then
28089: LD_VAR 0 3
28093: PUSH
28094: LD_INT 104
28096: EQUAL
28097: IFFALSE 28107
// sReset := true ;
28099: LD_ADDR_EXP 90
28103: PUSH
28104: LD_INT 1
28106: ST_TO_ADDR
// if p3 = 105 then
28107: LD_VAR 0 3
28111: PUSH
28112: LD_INT 105
28114: EQUAL
28115: IFFALSE 28125
// sSun := true ;
28117: LD_ADDR_EXP 91
28121: PUSH
28122: LD_INT 1
28124: ST_TO_ADDR
// if p3 = 106 then
28125: LD_VAR 0 3
28129: PUSH
28130: LD_INT 106
28132: EQUAL
28133: IFFALSE 28143
// sTiger := true ;
28135: LD_ADDR_EXP 87
28139: PUSH
28140: LD_INT 1
28142: ST_TO_ADDR
// if p3 = 107 then
28143: LD_VAR 0 3
28147: PUSH
28148: LD_INT 107
28150: EQUAL
28151: IFFALSE 28161
// sBomb := true ;
28153: LD_ADDR_EXP 88
28157: PUSH
28158: LD_INT 1
28160: ST_TO_ADDR
// if p3 = 108 then
28161: LD_VAR 0 3
28165: PUSH
28166: LD_INT 108
28168: EQUAL
28169: IFFALSE 28179
// sWound := true ;
28171: LD_ADDR_EXP 96
28175: PUSH
28176: LD_INT 1
28178: ST_TO_ADDR
// if p3 = 109 then
28179: LD_VAR 0 3
28183: PUSH
28184: LD_INT 109
28186: EQUAL
28187: IFFALSE 28197
// sBetray := true ;
28189: LD_ADDR_EXP 100
28193: PUSH
28194: LD_INT 1
28196: ST_TO_ADDR
// if p3 = 110 then
28197: LD_VAR 0 3
28201: PUSH
28202: LD_INT 110
28204: EQUAL
28205: IFFALSE 28215
// sContamin := true ;
28207: LD_ADDR_EXP 101
28211: PUSH
28212: LD_INT 1
28214: ST_TO_ADDR
// if p3 = 111 then
28215: LD_VAR 0 3
28219: PUSH
28220: LD_INT 111
28222: EQUAL
28223: IFFALSE 28233
// sOil := true ;
28225: LD_ADDR_EXP 103
28229: PUSH
28230: LD_INT 1
28232: ST_TO_ADDR
// if p3 = 112 then
28233: LD_VAR 0 3
28237: PUSH
28238: LD_INT 112
28240: EQUAL
28241: IFFALSE 28251
// sStu := true ;
28243: LD_ADDR_EXP 107
28247: PUSH
28248: LD_INT 1
28250: ST_TO_ADDR
// if p3 = 113 then
28251: LD_VAR 0 3
28255: PUSH
28256: LD_INT 113
28258: EQUAL
28259: IFFALSE 28269
// sBazooka := true ;
28261: LD_ADDR_EXP 110
28265: PUSH
28266: LD_INT 1
28268: ST_TO_ADDR
// if p3 = 114 then
28269: LD_VAR 0 3
28273: PUSH
28274: LD_INT 114
28276: EQUAL
28277: IFFALSE 28287
// sMortar := true ;
28279: LD_ADDR_EXP 111
28283: PUSH
28284: LD_INT 1
28286: ST_TO_ADDR
// if p3 = 115 then
28287: LD_VAR 0 3
28291: PUSH
28292: LD_INT 115
28294: EQUAL
28295: IFFALSE 28305
// sRanger := true ;
28297: LD_ADDR_EXP 121
28301: PUSH
28302: LD_INT 1
28304: ST_TO_ADDR
// if p3 = 116 then
28305: LD_VAR 0 3
28309: PUSH
28310: LD_INT 116
28312: EQUAL
28313: IFFALSE 28323
// sComputer := true ;
28315: LD_ADDR_EXP 122
28319: PUSH
28320: LD_INT 1
28322: ST_TO_ADDR
// if p3 = 117 then
28323: LD_VAR 0 3
28327: PUSH
28328: LD_INT 117
28330: EQUAL
28331: IFFALSE 28341
// s30 := true ;
28333: LD_ADDR_EXP 123
28337: PUSH
28338: LD_INT 1
28340: ST_TO_ADDR
// if p3 = 118 then
28341: LD_VAR 0 3
28345: PUSH
28346: LD_INT 118
28348: EQUAL
28349: IFFALSE 28359
// s60 := true ;
28351: LD_ADDR_EXP 124
28355: PUSH
28356: LD_INT 1
28358: ST_TO_ADDR
// end ; if p2 = 101 then
28359: LD_VAR 0 2
28363: PUSH
28364: LD_INT 101
28366: EQUAL
28367: IFFALSE 28495
// begin case p3 of 1 :
28369: LD_VAR 0 3
28373: PUSH
28374: LD_INT 1
28376: DOUBLE
28377: EQUAL
28378: IFTRUE 28382
28380: GO 28389
28382: POP
// hHackUnlimitedResources ; 2 :
28383: CALL 40593 0 0
28387: GO 28495
28389: LD_INT 2
28391: DOUBLE
28392: EQUAL
28393: IFTRUE 28397
28395: GO 28404
28397: POP
// hHackSetLevel10 ; 3 :
28398: CALL 40726 0 0
28402: GO 28495
28404: LD_INT 3
28406: DOUBLE
28407: EQUAL
28408: IFTRUE 28412
28410: GO 28419
28412: POP
// hHackSetLevel10YourUnits ; 4 :
28413: CALL 40811 0 0
28417: GO 28495
28419: LD_INT 4
28421: DOUBLE
28422: EQUAL
28423: IFTRUE 28427
28425: GO 28434
28427: POP
// hHackInvincible ; 5 :
28428: CALL 41259 0 0
28432: GO 28495
28434: LD_INT 5
28436: DOUBLE
28437: EQUAL
28438: IFTRUE 28442
28440: GO 28449
28442: POP
// hHackInvisible ; 6 :
28443: CALL 41370 0 0
28447: GO 28495
28449: LD_INT 6
28451: DOUBLE
28452: EQUAL
28453: IFTRUE 28457
28455: GO 28464
28457: POP
// hHackChangeYourSide ; 7 :
28458: CALL 41427 0 0
28462: GO 28495
28464: LD_INT 7
28466: DOUBLE
28467: EQUAL
28468: IFTRUE 28472
28470: GO 28479
28472: POP
// hHackChangeUnitSide ; 8 :
28473: CALL 41469 0 0
28477: GO 28495
28479: LD_INT 8
28481: DOUBLE
28482: EQUAL
28483: IFTRUE 28487
28485: GO 28494
28487: POP
// hHackFog ; end ;
28488: CALL 41570 0 0
28492: GO 28495
28494: POP
// end ; end ;
28495: LD_VAR 0 7
28499: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
28500: GO 28502
28502: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
28503: LD_STRING initStreamRollete();
28505: PPUSH
28506: CALL_OW 559
// InitStreamMode ;
28510: CALL 28522 0 0
// DefineStreamItems ( false ) ;
28514: LD_INT 0
28516: PPUSH
28517: CALL 28986 0 1
// end ;
28521: END
// function InitStreamMode ; begin
28522: LD_INT 0
28524: PPUSH
// streamModeActive := false ;
28525: LD_ADDR_EXP 68
28529: PUSH
28530: LD_INT 0
28532: ST_TO_ADDR
// normalCounter := 36 ;
28533: LD_ADDR_EXP 69
28537: PUSH
28538: LD_INT 36
28540: ST_TO_ADDR
// hardcoreCounter := 18 ;
28541: LD_ADDR_EXP 70
28545: PUSH
28546: LD_INT 18
28548: ST_TO_ADDR
// sRocket := false ;
28549: LD_ADDR_EXP 73
28553: PUSH
28554: LD_INT 0
28556: ST_TO_ADDR
// sSpeed := false ;
28557: LD_ADDR_EXP 72
28561: PUSH
28562: LD_INT 0
28564: ST_TO_ADDR
// sEngine := false ;
28565: LD_ADDR_EXP 74
28569: PUSH
28570: LD_INT 0
28572: ST_TO_ADDR
// sSpec := false ;
28573: LD_ADDR_EXP 71
28577: PUSH
28578: LD_INT 0
28580: ST_TO_ADDR
// sLevel := false ;
28581: LD_ADDR_EXP 75
28585: PUSH
28586: LD_INT 0
28588: ST_TO_ADDR
// sArmoury := false ;
28589: LD_ADDR_EXP 76
28593: PUSH
28594: LD_INT 0
28596: ST_TO_ADDR
// sRadar := false ;
28597: LD_ADDR_EXP 77
28601: PUSH
28602: LD_INT 0
28604: ST_TO_ADDR
// sBunker := false ;
28605: LD_ADDR_EXP 78
28609: PUSH
28610: LD_INT 0
28612: ST_TO_ADDR
// sHack := false ;
28613: LD_ADDR_EXP 79
28617: PUSH
28618: LD_INT 0
28620: ST_TO_ADDR
// sFire := false ;
28621: LD_ADDR_EXP 80
28625: PUSH
28626: LD_INT 0
28628: ST_TO_ADDR
// sRefresh := false ;
28629: LD_ADDR_EXP 81
28633: PUSH
28634: LD_INT 0
28636: ST_TO_ADDR
// sExp := false ;
28637: LD_ADDR_EXP 82
28641: PUSH
28642: LD_INT 0
28644: ST_TO_ADDR
// sDepot := false ;
28645: LD_ADDR_EXP 83
28649: PUSH
28650: LD_INT 0
28652: ST_TO_ADDR
// sFlag := false ;
28653: LD_ADDR_EXP 84
28657: PUSH
28658: LD_INT 0
28660: ST_TO_ADDR
// sKamikadze := false ;
28661: LD_ADDR_EXP 92
28665: PUSH
28666: LD_INT 0
28668: ST_TO_ADDR
// sTroll := false ;
28669: LD_ADDR_EXP 93
28673: PUSH
28674: LD_INT 0
28676: ST_TO_ADDR
// sSlow := false ;
28677: LD_ADDR_EXP 94
28681: PUSH
28682: LD_INT 0
28684: ST_TO_ADDR
// sLack := false ;
28685: LD_ADDR_EXP 95
28689: PUSH
28690: LD_INT 0
28692: ST_TO_ADDR
// sTank := false ;
28693: LD_ADDR_EXP 97
28697: PUSH
28698: LD_INT 0
28700: ST_TO_ADDR
// sRemote := false ;
28701: LD_ADDR_EXP 98
28705: PUSH
28706: LD_INT 0
28708: ST_TO_ADDR
// sPowell := false ;
28709: LD_ADDR_EXP 99
28713: PUSH
28714: LD_INT 0
28716: ST_TO_ADDR
// sTeleport := false ;
28717: LD_ADDR_EXP 102
28721: PUSH
28722: LD_INT 0
28724: ST_TO_ADDR
// sOilTower := false ;
28725: LD_ADDR_EXP 104
28729: PUSH
28730: LD_INT 0
28732: ST_TO_ADDR
// sShovel := false ;
28733: LD_ADDR_EXP 105
28737: PUSH
28738: LD_INT 0
28740: ST_TO_ADDR
// sSheik := false ;
28741: LD_ADDR_EXP 106
28745: PUSH
28746: LD_INT 0
28748: ST_TO_ADDR
// sEarthquake := false ;
28749: LD_ADDR_EXP 108
28753: PUSH
28754: LD_INT 0
28756: ST_TO_ADDR
// sAI := false ;
28757: LD_ADDR_EXP 109
28761: PUSH
28762: LD_INT 0
28764: ST_TO_ADDR
// sCargo := false ;
28765: LD_ADDR_EXP 112
28769: PUSH
28770: LD_INT 0
28772: ST_TO_ADDR
// sDLaser := false ;
28773: LD_ADDR_EXP 113
28777: PUSH
28778: LD_INT 0
28780: ST_TO_ADDR
// sExchange := false ;
28781: LD_ADDR_EXP 114
28785: PUSH
28786: LD_INT 0
28788: ST_TO_ADDR
// sFac := false ;
28789: LD_ADDR_EXP 115
28793: PUSH
28794: LD_INT 0
28796: ST_TO_ADDR
// sPower := false ;
28797: LD_ADDR_EXP 116
28801: PUSH
28802: LD_INT 0
28804: ST_TO_ADDR
// sRandom := false ;
28805: LD_ADDR_EXP 117
28809: PUSH
28810: LD_INT 0
28812: ST_TO_ADDR
// sShield := false ;
28813: LD_ADDR_EXP 118
28817: PUSH
28818: LD_INT 0
28820: ST_TO_ADDR
// sTime := false ;
28821: LD_ADDR_EXP 119
28825: PUSH
28826: LD_INT 0
28828: ST_TO_ADDR
// sTools := false ;
28829: LD_ADDR_EXP 120
28833: PUSH
28834: LD_INT 0
28836: ST_TO_ADDR
// sSold := false ;
28837: LD_ADDR_EXP 85
28841: PUSH
28842: LD_INT 0
28844: ST_TO_ADDR
// sDiff := false ;
28845: LD_ADDR_EXP 86
28849: PUSH
28850: LD_INT 0
28852: ST_TO_ADDR
// sFog := false ;
28853: LD_ADDR_EXP 89
28857: PUSH
28858: LD_INT 0
28860: ST_TO_ADDR
// sReset := false ;
28861: LD_ADDR_EXP 90
28865: PUSH
28866: LD_INT 0
28868: ST_TO_ADDR
// sSun := false ;
28869: LD_ADDR_EXP 91
28873: PUSH
28874: LD_INT 0
28876: ST_TO_ADDR
// sTiger := false ;
28877: LD_ADDR_EXP 87
28881: PUSH
28882: LD_INT 0
28884: ST_TO_ADDR
// sBomb := false ;
28885: LD_ADDR_EXP 88
28889: PUSH
28890: LD_INT 0
28892: ST_TO_ADDR
// sWound := false ;
28893: LD_ADDR_EXP 96
28897: PUSH
28898: LD_INT 0
28900: ST_TO_ADDR
// sBetray := false ;
28901: LD_ADDR_EXP 100
28905: PUSH
28906: LD_INT 0
28908: ST_TO_ADDR
// sContamin := false ;
28909: LD_ADDR_EXP 101
28913: PUSH
28914: LD_INT 0
28916: ST_TO_ADDR
// sOil := false ;
28917: LD_ADDR_EXP 103
28921: PUSH
28922: LD_INT 0
28924: ST_TO_ADDR
// sStu := false ;
28925: LD_ADDR_EXP 107
28929: PUSH
28930: LD_INT 0
28932: ST_TO_ADDR
// sBazooka := false ;
28933: LD_ADDR_EXP 110
28937: PUSH
28938: LD_INT 0
28940: ST_TO_ADDR
// sMortar := false ;
28941: LD_ADDR_EXP 111
28945: PUSH
28946: LD_INT 0
28948: ST_TO_ADDR
// sRanger := false ;
28949: LD_ADDR_EXP 121
28953: PUSH
28954: LD_INT 0
28956: ST_TO_ADDR
// sComputer := false ;
28957: LD_ADDR_EXP 122
28961: PUSH
28962: LD_INT 0
28964: ST_TO_ADDR
// s30 := false ;
28965: LD_ADDR_EXP 123
28969: PUSH
28970: LD_INT 0
28972: ST_TO_ADDR
// s60 := false ;
28973: LD_ADDR_EXP 124
28977: PUSH
28978: LD_INT 0
28980: ST_TO_ADDR
// end ;
28981: LD_VAR 0 1
28985: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
28986: LD_INT 0
28988: PPUSH
28989: PPUSH
28990: PPUSH
28991: PPUSH
28992: PPUSH
28993: PPUSH
28994: PPUSH
// result := [ ] ;
28995: LD_ADDR_VAR 0 2
28999: PUSH
29000: EMPTY
29001: ST_TO_ADDR
// if campaign_id = 1 then
29002: LD_OWVAR 69
29006: PUSH
29007: LD_INT 1
29009: EQUAL
29010: IFFALSE 32176
// begin case mission_number of 1 :
29012: LD_OWVAR 70
29016: PUSH
29017: LD_INT 1
29019: DOUBLE
29020: EQUAL
29021: IFTRUE 29025
29023: GO 29101
29025: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
29026: LD_ADDR_VAR 0 2
29030: PUSH
29031: LD_INT 2
29033: PUSH
29034: LD_INT 4
29036: PUSH
29037: LD_INT 11
29039: PUSH
29040: LD_INT 12
29042: PUSH
29043: LD_INT 15
29045: PUSH
29046: LD_INT 16
29048: PUSH
29049: LD_INT 22
29051: PUSH
29052: LD_INT 23
29054: PUSH
29055: LD_INT 26
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 101
29071: PUSH
29072: LD_INT 102
29074: PUSH
29075: LD_INT 106
29077: PUSH
29078: LD_INT 116
29080: PUSH
29081: LD_INT 117
29083: PUSH
29084: LD_INT 118
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: ST_TO_ADDR
29099: GO 32174
29101: LD_INT 2
29103: DOUBLE
29104: EQUAL
29105: IFTRUE 29109
29107: GO 29193
29109: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
29110: LD_ADDR_VAR 0 2
29114: PUSH
29115: LD_INT 2
29117: PUSH
29118: LD_INT 4
29120: PUSH
29121: LD_INT 11
29123: PUSH
29124: LD_INT 12
29126: PUSH
29127: LD_INT 15
29129: PUSH
29130: LD_INT 16
29132: PUSH
29133: LD_INT 22
29135: PUSH
29136: LD_INT 23
29138: PUSH
29139: LD_INT 26
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 101
29155: PUSH
29156: LD_INT 102
29158: PUSH
29159: LD_INT 105
29161: PUSH
29162: LD_INT 106
29164: PUSH
29165: LD_INT 108
29167: PUSH
29168: LD_INT 116
29170: PUSH
29171: LD_INT 117
29173: PUSH
29174: LD_INT 118
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: ST_TO_ADDR
29191: GO 32174
29193: LD_INT 3
29195: DOUBLE
29196: EQUAL
29197: IFTRUE 29201
29199: GO 29289
29201: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
29202: LD_ADDR_VAR 0 2
29206: PUSH
29207: LD_INT 2
29209: PUSH
29210: LD_INT 4
29212: PUSH
29213: LD_INT 5
29215: PUSH
29216: LD_INT 11
29218: PUSH
29219: LD_INT 12
29221: PUSH
29222: LD_INT 15
29224: PUSH
29225: LD_INT 16
29227: PUSH
29228: LD_INT 22
29230: PUSH
29231: LD_INT 26
29233: PUSH
29234: LD_INT 36
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 101
29251: PUSH
29252: LD_INT 102
29254: PUSH
29255: LD_INT 105
29257: PUSH
29258: LD_INT 106
29260: PUSH
29261: LD_INT 108
29263: PUSH
29264: LD_INT 116
29266: PUSH
29267: LD_INT 117
29269: PUSH
29270: LD_INT 118
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: ST_TO_ADDR
29287: GO 32174
29289: LD_INT 4
29291: DOUBLE
29292: EQUAL
29293: IFTRUE 29297
29295: GO 29393
29297: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
29298: LD_ADDR_VAR 0 2
29302: PUSH
29303: LD_INT 2
29305: PUSH
29306: LD_INT 4
29308: PUSH
29309: LD_INT 5
29311: PUSH
29312: LD_INT 8
29314: PUSH
29315: LD_INT 11
29317: PUSH
29318: LD_INT 12
29320: PUSH
29321: LD_INT 15
29323: PUSH
29324: LD_INT 16
29326: PUSH
29327: LD_INT 22
29329: PUSH
29330: LD_INT 23
29332: PUSH
29333: LD_INT 26
29335: PUSH
29336: LD_INT 36
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 101
29355: PUSH
29356: LD_INT 102
29358: PUSH
29359: LD_INT 105
29361: PUSH
29362: LD_INT 106
29364: PUSH
29365: LD_INT 108
29367: PUSH
29368: LD_INT 116
29370: PUSH
29371: LD_INT 117
29373: PUSH
29374: LD_INT 118
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: ST_TO_ADDR
29391: GO 32174
29393: LD_INT 5
29395: DOUBLE
29396: EQUAL
29397: IFTRUE 29401
29399: GO 29513
29401: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
29402: LD_ADDR_VAR 0 2
29406: PUSH
29407: LD_INT 2
29409: PUSH
29410: LD_INT 4
29412: PUSH
29413: LD_INT 5
29415: PUSH
29416: LD_INT 6
29418: PUSH
29419: LD_INT 8
29421: PUSH
29422: LD_INT 11
29424: PUSH
29425: LD_INT 12
29427: PUSH
29428: LD_INT 15
29430: PUSH
29431: LD_INT 16
29433: PUSH
29434: LD_INT 22
29436: PUSH
29437: LD_INT 23
29439: PUSH
29440: LD_INT 25
29442: PUSH
29443: LD_INT 26
29445: PUSH
29446: LD_INT 36
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 101
29467: PUSH
29468: LD_INT 102
29470: PUSH
29471: LD_INT 105
29473: PUSH
29474: LD_INT 106
29476: PUSH
29477: LD_INT 108
29479: PUSH
29480: LD_INT 109
29482: PUSH
29483: LD_INT 112
29485: PUSH
29486: LD_INT 116
29488: PUSH
29489: LD_INT 117
29491: PUSH
29492: LD_INT 118
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: ST_TO_ADDR
29511: GO 32174
29513: LD_INT 6
29515: DOUBLE
29516: EQUAL
29517: IFTRUE 29521
29519: GO 29653
29521: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
29522: LD_ADDR_VAR 0 2
29526: PUSH
29527: LD_INT 2
29529: PUSH
29530: LD_INT 4
29532: PUSH
29533: LD_INT 5
29535: PUSH
29536: LD_INT 6
29538: PUSH
29539: LD_INT 8
29541: PUSH
29542: LD_INT 11
29544: PUSH
29545: LD_INT 12
29547: PUSH
29548: LD_INT 15
29550: PUSH
29551: LD_INT 16
29553: PUSH
29554: LD_INT 20
29556: PUSH
29557: LD_INT 21
29559: PUSH
29560: LD_INT 22
29562: PUSH
29563: LD_INT 23
29565: PUSH
29566: LD_INT 25
29568: PUSH
29569: LD_INT 26
29571: PUSH
29572: LD_INT 30
29574: PUSH
29575: LD_INT 31
29577: PUSH
29578: LD_INT 32
29580: PUSH
29581: LD_INT 36
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 101
29607: PUSH
29608: LD_INT 102
29610: PUSH
29611: LD_INT 105
29613: PUSH
29614: LD_INT 106
29616: PUSH
29617: LD_INT 108
29619: PUSH
29620: LD_INT 109
29622: PUSH
29623: LD_INT 112
29625: PUSH
29626: LD_INT 116
29628: PUSH
29629: LD_INT 117
29631: PUSH
29632: LD_INT 118
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: ST_TO_ADDR
29651: GO 32174
29653: LD_INT 7
29655: DOUBLE
29656: EQUAL
29657: IFTRUE 29661
29659: GO 29773
29661: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
29662: LD_ADDR_VAR 0 2
29666: PUSH
29667: LD_INT 2
29669: PUSH
29670: LD_INT 4
29672: PUSH
29673: LD_INT 5
29675: PUSH
29676: LD_INT 7
29678: PUSH
29679: LD_INT 11
29681: PUSH
29682: LD_INT 12
29684: PUSH
29685: LD_INT 15
29687: PUSH
29688: LD_INT 16
29690: PUSH
29691: LD_INT 20
29693: PUSH
29694: LD_INT 21
29696: PUSH
29697: LD_INT 22
29699: PUSH
29700: LD_INT 23
29702: PUSH
29703: LD_INT 25
29705: PUSH
29706: LD_INT 26
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 101
29727: PUSH
29728: LD_INT 102
29730: PUSH
29731: LD_INT 103
29733: PUSH
29734: LD_INT 105
29736: PUSH
29737: LD_INT 106
29739: PUSH
29740: LD_INT 108
29742: PUSH
29743: LD_INT 112
29745: PUSH
29746: LD_INT 116
29748: PUSH
29749: LD_INT 117
29751: PUSH
29752: LD_INT 118
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: ST_TO_ADDR
29771: GO 32174
29773: LD_INT 8
29775: DOUBLE
29776: EQUAL
29777: IFTRUE 29781
29779: GO 29921
29781: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
29782: LD_ADDR_VAR 0 2
29786: PUSH
29787: LD_INT 2
29789: PUSH
29790: LD_INT 4
29792: PUSH
29793: LD_INT 5
29795: PUSH
29796: LD_INT 6
29798: PUSH
29799: LD_INT 7
29801: PUSH
29802: LD_INT 8
29804: PUSH
29805: LD_INT 11
29807: PUSH
29808: LD_INT 12
29810: PUSH
29811: LD_INT 15
29813: PUSH
29814: LD_INT 16
29816: PUSH
29817: LD_INT 20
29819: PUSH
29820: LD_INT 21
29822: PUSH
29823: LD_INT 22
29825: PUSH
29826: LD_INT 23
29828: PUSH
29829: LD_INT 25
29831: PUSH
29832: LD_INT 26
29834: PUSH
29835: LD_INT 30
29837: PUSH
29838: LD_INT 31
29840: PUSH
29841: LD_INT 32
29843: PUSH
29844: LD_INT 36
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 101
29871: PUSH
29872: LD_INT 102
29874: PUSH
29875: LD_INT 103
29877: PUSH
29878: LD_INT 105
29880: PUSH
29881: LD_INT 106
29883: PUSH
29884: LD_INT 108
29886: PUSH
29887: LD_INT 109
29889: PUSH
29890: LD_INT 112
29892: PUSH
29893: LD_INT 116
29895: PUSH
29896: LD_INT 117
29898: PUSH
29899: LD_INT 118
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: ST_TO_ADDR
29919: GO 32174
29921: LD_INT 9
29923: DOUBLE
29924: EQUAL
29925: IFTRUE 29929
29927: GO 30077
29929: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
29930: LD_ADDR_VAR 0 2
29934: PUSH
29935: LD_INT 2
29937: PUSH
29938: LD_INT 4
29940: PUSH
29941: LD_INT 5
29943: PUSH
29944: LD_INT 6
29946: PUSH
29947: LD_INT 7
29949: PUSH
29950: LD_INT 8
29952: PUSH
29953: LD_INT 11
29955: PUSH
29956: LD_INT 12
29958: PUSH
29959: LD_INT 15
29961: PUSH
29962: LD_INT 16
29964: PUSH
29965: LD_INT 20
29967: PUSH
29968: LD_INT 21
29970: PUSH
29971: LD_INT 22
29973: PUSH
29974: LD_INT 23
29976: PUSH
29977: LD_INT 25
29979: PUSH
29980: LD_INT 26
29982: PUSH
29983: LD_INT 28
29985: PUSH
29986: LD_INT 30
29988: PUSH
29989: LD_INT 31
29991: PUSH
29992: LD_INT 32
29994: PUSH
29995: LD_INT 36
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 101
30023: PUSH
30024: LD_INT 102
30026: PUSH
30027: LD_INT 103
30029: PUSH
30030: LD_INT 105
30032: PUSH
30033: LD_INT 106
30035: PUSH
30036: LD_INT 108
30038: PUSH
30039: LD_INT 109
30041: PUSH
30042: LD_INT 112
30044: PUSH
30045: LD_INT 114
30047: PUSH
30048: LD_INT 116
30050: PUSH
30051: LD_INT 117
30053: PUSH
30054: LD_INT 118
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: ST_TO_ADDR
30075: GO 32174
30077: LD_INT 10
30079: DOUBLE
30080: EQUAL
30081: IFTRUE 30085
30083: GO 30281
30085: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
30086: LD_ADDR_VAR 0 2
30090: PUSH
30091: LD_INT 2
30093: PUSH
30094: LD_INT 4
30096: PUSH
30097: LD_INT 5
30099: PUSH
30100: LD_INT 6
30102: PUSH
30103: LD_INT 7
30105: PUSH
30106: LD_INT 8
30108: PUSH
30109: LD_INT 9
30111: PUSH
30112: LD_INT 10
30114: PUSH
30115: LD_INT 11
30117: PUSH
30118: LD_INT 12
30120: PUSH
30121: LD_INT 13
30123: PUSH
30124: LD_INT 14
30126: PUSH
30127: LD_INT 15
30129: PUSH
30130: LD_INT 16
30132: PUSH
30133: LD_INT 17
30135: PUSH
30136: LD_INT 18
30138: PUSH
30139: LD_INT 19
30141: PUSH
30142: LD_INT 20
30144: PUSH
30145: LD_INT 21
30147: PUSH
30148: LD_INT 22
30150: PUSH
30151: LD_INT 23
30153: PUSH
30154: LD_INT 24
30156: PUSH
30157: LD_INT 25
30159: PUSH
30160: LD_INT 26
30162: PUSH
30163: LD_INT 28
30165: PUSH
30166: LD_INT 30
30168: PUSH
30169: LD_INT 31
30171: PUSH
30172: LD_INT 32
30174: PUSH
30175: LD_INT 36
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 101
30211: PUSH
30212: LD_INT 102
30214: PUSH
30215: LD_INT 103
30217: PUSH
30218: LD_INT 104
30220: PUSH
30221: LD_INT 105
30223: PUSH
30224: LD_INT 106
30226: PUSH
30227: LD_INT 107
30229: PUSH
30230: LD_INT 108
30232: PUSH
30233: LD_INT 109
30235: PUSH
30236: LD_INT 110
30238: PUSH
30239: LD_INT 111
30241: PUSH
30242: LD_INT 112
30244: PUSH
30245: LD_INT 114
30247: PUSH
30248: LD_INT 116
30250: PUSH
30251: LD_INT 117
30253: PUSH
30254: LD_INT 118
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: ST_TO_ADDR
30279: GO 32174
30281: LD_INT 11
30283: DOUBLE
30284: EQUAL
30285: IFTRUE 30289
30287: GO 30493
30289: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
30290: LD_ADDR_VAR 0 2
30294: PUSH
30295: LD_INT 2
30297: PUSH
30298: LD_INT 3
30300: PUSH
30301: LD_INT 4
30303: PUSH
30304: LD_INT 5
30306: PUSH
30307: LD_INT 6
30309: PUSH
30310: LD_INT 7
30312: PUSH
30313: LD_INT 8
30315: PUSH
30316: LD_INT 9
30318: PUSH
30319: LD_INT 10
30321: PUSH
30322: LD_INT 11
30324: PUSH
30325: LD_INT 12
30327: PUSH
30328: LD_INT 13
30330: PUSH
30331: LD_INT 14
30333: PUSH
30334: LD_INT 15
30336: PUSH
30337: LD_INT 16
30339: PUSH
30340: LD_INT 17
30342: PUSH
30343: LD_INT 18
30345: PUSH
30346: LD_INT 19
30348: PUSH
30349: LD_INT 20
30351: PUSH
30352: LD_INT 21
30354: PUSH
30355: LD_INT 22
30357: PUSH
30358: LD_INT 23
30360: PUSH
30361: LD_INT 24
30363: PUSH
30364: LD_INT 25
30366: PUSH
30367: LD_INT 26
30369: PUSH
30370: LD_INT 28
30372: PUSH
30373: LD_INT 30
30375: PUSH
30376: LD_INT 31
30378: PUSH
30379: LD_INT 32
30381: PUSH
30382: LD_INT 34
30384: PUSH
30385: LD_INT 36
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 101
30423: PUSH
30424: LD_INT 102
30426: PUSH
30427: LD_INT 103
30429: PUSH
30430: LD_INT 104
30432: PUSH
30433: LD_INT 105
30435: PUSH
30436: LD_INT 106
30438: PUSH
30439: LD_INT 107
30441: PUSH
30442: LD_INT 108
30444: PUSH
30445: LD_INT 109
30447: PUSH
30448: LD_INT 110
30450: PUSH
30451: LD_INT 111
30453: PUSH
30454: LD_INT 112
30456: PUSH
30457: LD_INT 114
30459: PUSH
30460: LD_INT 116
30462: PUSH
30463: LD_INT 117
30465: PUSH
30466: LD_INT 118
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: ST_TO_ADDR
30491: GO 32174
30493: LD_INT 12
30495: DOUBLE
30496: EQUAL
30497: IFTRUE 30501
30499: GO 30721
30501: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
30502: LD_ADDR_VAR 0 2
30506: PUSH
30507: LD_INT 1
30509: PUSH
30510: LD_INT 2
30512: PUSH
30513: LD_INT 3
30515: PUSH
30516: LD_INT 4
30518: PUSH
30519: LD_INT 5
30521: PUSH
30522: LD_INT 6
30524: PUSH
30525: LD_INT 7
30527: PUSH
30528: LD_INT 8
30530: PUSH
30531: LD_INT 9
30533: PUSH
30534: LD_INT 10
30536: PUSH
30537: LD_INT 11
30539: PUSH
30540: LD_INT 12
30542: PUSH
30543: LD_INT 13
30545: PUSH
30546: LD_INT 14
30548: PUSH
30549: LD_INT 15
30551: PUSH
30552: LD_INT 16
30554: PUSH
30555: LD_INT 17
30557: PUSH
30558: LD_INT 18
30560: PUSH
30561: LD_INT 19
30563: PUSH
30564: LD_INT 20
30566: PUSH
30567: LD_INT 21
30569: PUSH
30570: LD_INT 22
30572: PUSH
30573: LD_INT 23
30575: PUSH
30576: LD_INT 24
30578: PUSH
30579: LD_INT 25
30581: PUSH
30582: LD_INT 26
30584: PUSH
30585: LD_INT 27
30587: PUSH
30588: LD_INT 28
30590: PUSH
30591: LD_INT 30
30593: PUSH
30594: LD_INT 31
30596: PUSH
30597: LD_INT 32
30599: PUSH
30600: LD_INT 33
30602: PUSH
30603: LD_INT 34
30605: PUSH
30606: LD_INT 36
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 101
30647: PUSH
30648: LD_INT 102
30650: PUSH
30651: LD_INT 103
30653: PUSH
30654: LD_INT 104
30656: PUSH
30657: LD_INT 105
30659: PUSH
30660: LD_INT 106
30662: PUSH
30663: LD_INT 107
30665: PUSH
30666: LD_INT 108
30668: PUSH
30669: LD_INT 109
30671: PUSH
30672: LD_INT 110
30674: PUSH
30675: LD_INT 111
30677: PUSH
30678: LD_INT 112
30680: PUSH
30681: LD_INT 113
30683: PUSH
30684: LD_INT 114
30686: PUSH
30687: LD_INT 116
30689: PUSH
30690: LD_INT 117
30692: PUSH
30693: LD_INT 118
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: ST_TO_ADDR
30719: GO 32174
30721: LD_INT 13
30723: DOUBLE
30724: EQUAL
30725: IFTRUE 30729
30727: GO 30937
30729: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
30730: LD_ADDR_VAR 0 2
30734: PUSH
30735: LD_INT 1
30737: PUSH
30738: LD_INT 2
30740: PUSH
30741: LD_INT 3
30743: PUSH
30744: LD_INT 4
30746: PUSH
30747: LD_INT 5
30749: PUSH
30750: LD_INT 8
30752: PUSH
30753: LD_INT 9
30755: PUSH
30756: LD_INT 10
30758: PUSH
30759: LD_INT 11
30761: PUSH
30762: LD_INT 12
30764: PUSH
30765: LD_INT 14
30767: PUSH
30768: LD_INT 15
30770: PUSH
30771: LD_INT 16
30773: PUSH
30774: LD_INT 17
30776: PUSH
30777: LD_INT 18
30779: PUSH
30780: LD_INT 19
30782: PUSH
30783: LD_INT 20
30785: PUSH
30786: LD_INT 21
30788: PUSH
30789: LD_INT 22
30791: PUSH
30792: LD_INT 23
30794: PUSH
30795: LD_INT 24
30797: PUSH
30798: LD_INT 25
30800: PUSH
30801: LD_INT 26
30803: PUSH
30804: LD_INT 27
30806: PUSH
30807: LD_INT 28
30809: PUSH
30810: LD_INT 30
30812: PUSH
30813: LD_INT 31
30815: PUSH
30816: LD_INT 32
30818: PUSH
30819: LD_INT 33
30821: PUSH
30822: LD_INT 34
30824: PUSH
30825: LD_INT 36
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 101
30863: PUSH
30864: LD_INT 102
30866: PUSH
30867: LD_INT 103
30869: PUSH
30870: LD_INT 104
30872: PUSH
30873: LD_INT 105
30875: PUSH
30876: LD_INT 106
30878: PUSH
30879: LD_INT 107
30881: PUSH
30882: LD_INT 108
30884: PUSH
30885: LD_INT 109
30887: PUSH
30888: LD_INT 110
30890: PUSH
30891: LD_INT 111
30893: PUSH
30894: LD_INT 112
30896: PUSH
30897: LD_INT 113
30899: PUSH
30900: LD_INT 114
30902: PUSH
30903: LD_INT 116
30905: PUSH
30906: LD_INT 117
30908: PUSH
30909: LD_INT 118
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: ST_TO_ADDR
30935: GO 32174
30937: LD_INT 14
30939: DOUBLE
30940: EQUAL
30941: IFTRUE 30945
30943: GO 31169
30945: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
30946: LD_ADDR_VAR 0 2
30950: PUSH
30951: LD_INT 1
30953: PUSH
30954: LD_INT 2
30956: PUSH
30957: LD_INT 3
30959: PUSH
30960: LD_INT 4
30962: PUSH
30963: LD_INT 5
30965: PUSH
30966: LD_INT 6
30968: PUSH
30969: LD_INT 7
30971: PUSH
30972: LD_INT 8
30974: PUSH
30975: LD_INT 9
30977: PUSH
30978: LD_INT 10
30980: PUSH
30981: LD_INT 11
30983: PUSH
30984: LD_INT 12
30986: PUSH
30987: LD_INT 13
30989: PUSH
30990: LD_INT 14
30992: PUSH
30993: LD_INT 15
30995: PUSH
30996: LD_INT 16
30998: PUSH
30999: LD_INT 17
31001: PUSH
31002: LD_INT 18
31004: PUSH
31005: LD_INT 19
31007: PUSH
31008: LD_INT 20
31010: PUSH
31011: LD_INT 21
31013: PUSH
31014: LD_INT 22
31016: PUSH
31017: LD_INT 23
31019: PUSH
31020: LD_INT 24
31022: PUSH
31023: LD_INT 25
31025: PUSH
31026: LD_INT 26
31028: PUSH
31029: LD_INT 27
31031: PUSH
31032: LD_INT 28
31034: PUSH
31035: LD_INT 29
31037: PUSH
31038: LD_INT 30
31040: PUSH
31041: LD_INT 31
31043: PUSH
31044: LD_INT 32
31046: PUSH
31047: LD_INT 33
31049: PUSH
31050: LD_INT 34
31052: PUSH
31053: LD_INT 36
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 101
31095: PUSH
31096: LD_INT 102
31098: PUSH
31099: LD_INT 103
31101: PUSH
31102: LD_INT 104
31104: PUSH
31105: LD_INT 105
31107: PUSH
31108: LD_INT 106
31110: PUSH
31111: LD_INT 107
31113: PUSH
31114: LD_INT 108
31116: PUSH
31117: LD_INT 109
31119: PUSH
31120: LD_INT 110
31122: PUSH
31123: LD_INT 111
31125: PUSH
31126: LD_INT 112
31128: PUSH
31129: LD_INT 113
31131: PUSH
31132: LD_INT 114
31134: PUSH
31135: LD_INT 116
31137: PUSH
31138: LD_INT 117
31140: PUSH
31141: LD_INT 118
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: ST_TO_ADDR
31167: GO 32174
31169: LD_INT 15
31171: DOUBLE
31172: EQUAL
31173: IFTRUE 31177
31175: GO 31401
31177: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
31178: LD_ADDR_VAR 0 2
31182: PUSH
31183: LD_INT 1
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: LD_INT 3
31191: PUSH
31192: LD_INT 4
31194: PUSH
31195: LD_INT 5
31197: PUSH
31198: LD_INT 6
31200: PUSH
31201: LD_INT 7
31203: PUSH
31204: LD_INT 8
31206: PUSH
31207: LD_INT 9
31209: PUSH
31210: LD_INT 10
31212: PUSH
31213: LD_INT 11
31215: PUSH
31216: LD_INT 12
31218: PUSH
31219: LD_INT 13
31221: PUSH
31222: LD_INT 14
31224: PUSH
31225: LD_INT 15
31227: PUSH
31228: LD_INT 16
31230: PUSH
31231: LD_INT 17
31233: PUSH
31234: LD_INT 18
31236: PUSH
31237: LD_INT 19
31239: PUSH
31240: LD_INT 20
31242: PUSH
31243: LD_INT 21
31245: PUSH
31246: LD_INT 22
31248: PUSH
31249: LD_INT 23
31251: PUSH
31252: LD_INT 24
31254: PUSH
31255: LD_INT 25
31257: PUSH
31258: LD_INT 26
31260: PUSH
31261: LD_INT 27
31263: PUSH
31264: LD_INT 28
31266: PUSH
31267: LD_INT 29
31269: PUSH
31270: LD_INT 30
31272: PUSH
31273: LD_INT 31
31275: PUSH
31276: LD_INT 32
31278: PUSH
31279: LD_INT 33
31281: PUSH
31282: LD_INT 34
31284: PUSH
31285: LD_INT 36
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 101
31327: PUSH
31328: LD_INT 102
31330: PUSH
31331: LD_INT 103
31333: PUSH
31334: LD_INT 104
31336: PUSH
31337: LD_INT 105
31339: PUSH
31340: LD_INT 106
31342: PUSH
31343: LD_INT 107
31345: PUSH
31346: LD_INT 108
31348: PUSH
31349: LD_INT 109
31351: PUSH
31352: LD_INT 110
31354: PUSH
31355: LD_INT 111
31357: PUSH
31358: LD_INT 112
31360: PUSH
31361: LD_INT 113
31363: PUSH
31364: LD_INT 114
31366: PUSH
31367: LD_INT 116
31369: PUSH
31370: LD_INT 117
31372: PUSH
31373: LD_INT 118
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: ST_TO_ADDR
31399: GO 32174
31401: LD_INT 16
31403: DOUBLE
31404: EQUAL
31405: IFTRUE 31409
31407: GO 31545
31409: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
31410: LD_ADDR_VAR 0 2
31414: PUSH
31415: LD_INT 2
31417: PUSH
31418: LD_INT 4
31420: PUSH
31421: LD_INT 5
31423: PUSH
31424: LD_INT 7
31426: PUSH
31427: LD_INT 11
31429: PUSH
31430: LD_INT 12
31432: PUSH
31433: LD_INT 15
31435: PUSH
31436: LD_INT 16
31438: PUSH
31439: LD_INT 20
31441: PUSH
31442: LD_INT 21
31444: PUSH
31445: LD_INT 22
31447: PUSH
31448: LD_INT 23
31450: PUSH
31451: LD_INT 25
31453: PUSH
31454: LD_INT 26
31456: PUSH
31457: LD_INT 30
31459: PUSH
31460: LD_INT 31
31462: PUSH
31463: LD_INT 32
31465: PUSH
31466: LD_INT 33
31468: PUSH
31469: LD_INT 34
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 101
31495: PUSH
31496: LD_INT 102
31498: PUSH
31499: LD_INT 103
31501: PUSH
31502: LD_INT 106
31504: PUSH
31505: LD_INT 108
31507: PUSH
31508: LD_INT 112
31510: PUSH
31511: LD_INT 113
31513: PUSH
31514: LD_INT 114
31516: PUSH
31517: LD_INT 116
31519: PUSH
31520: LD_INT 117
31522: PUSH
31523: LD_INT 118
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: ST_TO_ADDR
31543: GO 32174
31545: LD_INT 17
31547: DOUBLE
31548: EQUAL
31549: IFTRUE 31553
31551: GO 31777
31553: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
31554: LD_ADDR_VAR 0 2
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: LD_INT 2
31564: PUSH
31565: LD_INT 3
31567: PUSH
31568: LD_INT 4
31570: PUSH
31571: LD_INT 5
31573: PUSH
31574: LD_INT 6
31576: PUSH
31577: LD_INT 7
31579: PUSH
31580: LD_INT 8
31582: PUSH
31583: LD_INT 9
31585: PUSH
31586: LD_INT 10
31588: PUSH
31589: LD_INT 11
31591: PUSH
31592: LD_INT 12
31594: PUSH
31595: LD_INT 13
31597: PUSH
31598: LD_INT 14
31600: PUSH
31601: LD_INT 15
31603: PUSH
31604: LD_INT 16
31606: PUSH
31607: LD_INT 17
31609: PUSH
31610: LD_INT 18
31612: PUSH
31613: LD_INT 19
31615: PUSH
31616: LD_INT 20
31618: PUSH
31619: LD_INT 21
31621: PUSH
31622: LD_INT 22
31624: PUSH
31625: LD_INT 23
31627: PUSH
31628: LD_INT 24
31630: PUSH
31631: LD_INT 25
31633: PUSH
31634: LD_INT 26
31636: PUSH
31637: LD_INT 27
31639: PUSH
31640: LD_INT 28
31642: PUSH
31643: LD_INT 29
31645: PUSH
31646: LD_INT 30
31648: PUSH
31649: LD_INT 31
31651: PUSH
31652: LD_INT 32
31654: PUSH
31655: LD_INT 33
31657: PUSH
31658: LD_INT 34
31660: PUSH
31661: LD_INT 36
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 101
31703: PUSH
31704: LD_INT 102
31706: PUSH
31707: LD_INT 103
31709: PUSH
31710: LD_INT 104
31712: PUSH
31713: LD_INT 105
31715: PUSH
31716: LD_INT 106
31718: PUSH
31719: LD_INT 107
31721: PUSH
31722: LD_INT 108
31724: PUSH
31725: LD_INT 109
31727: PUSH
31728: LD_INT 110
31730: PUSH
31731: LD_INT 111
31733: PUSH
31734: LD_INT 112
31736: PUSH
31737: LD_INT 113
31739: PUSH
31740: LD_INT 114
31742: PUSH
31743: LD_INT 116
31745: PUSH
31746: LD_INT 117
31748: PUSH
31749: LD_INT 118
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: ST_TO_ADDR
31775: GO 32174
31777: LD_INT 18
31779: DOUBLE
31780: EQUAL
31781: IFTRUE 31785
31783: GO 31933
31785: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
31786: LD_ADDR_VAR 0 2
31790: PUSH
31791: LD_INT 2
31793: PUSH
31794: LD_INT 4
31796: PUSH
31797: LD_INT 5
31799: PUSH
31800: LD_INT 7
31802: PUSH
31803: LD_INT 11
31805: PUSH
31806: LD_INT 12
31808: PUSH
31809: LD_INT 15
31811: PUSH
31812: LD_INT 16
31814: PUSH
31815: LD_INT 20
31817: PUSH
31818: LD_INT 21
31820: PUSH
31821: LD_INT 22
31823: PUSH
31824: LD_INT 23
31826: PUSH
31827: LD_INT 25
31829: PUSH
31830: LD_INT 26
31832: PUSH
31833: LD_INT 30
31835: PUSH
31836: LD_INT 31
31838: PUSH
31839: LD_INT 32
31841: PUSH
31842: LD_INT 33
31844: PUSH
31845: LD_INT 34
31847: PUSH
31848: LD_INT 35
31850: PUSH
31851: LD_INT 36
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 101
31879: PUSH
31880: LD_INT 102
31882: PUSH
31883: LD_INT 103
31885: PUSH
31886: LD_INT 106
31888: PUSH
31889: LD_INT 108
31891: PUSH
31892: LD_INT 112
31894: PUSH
31895: LD_INT 113
31897: PUSH
31898: LD_INT 114
31900: PUSH
31901: LD_INT 115
31903: PUSH
31904: LD_INT 116
31906: PUSH
31907: LD_INT 117
31909: PUSH
31910: LD_INT 118
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: ST_TO_ADDR
31931: GO 32174
31933: LD_INT 19
31935: DOUBLE
31936: EQUAL
31937: IFTRUE 31941
31939: GO 32173
31941: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
31942: LD_ADDR_VAR 0 2
31946: PUSH
31947: LD_INT 1
31949: PUSH
31950: LD_INT 2
31952: PUSH
31953: LD_INT 3
31955: PUSH
31956: LD_INT 4
31958: PUSH
31959: LD_INT 5
31961: PUSH
31962: LD_INT 6
31964: PUSH
31965: LD_INT 7
31967: PUSH
31968: LD_INT 8
31970: PUSH
31971: LD_INT 9
31973: PUSH
31974: LD_INT 10
31976: PUSH
31977: LD_INT 11
31979: PUSH
31980: LD_INT 12
31982: PUSH
31983: LD_INT 13
31985: PUSH
31986: LD_INT 14
31988: PUSH
31989: LD_INT 15
31991: PUSH
31992: LD_INT 16
31994: PUSH
31995: LD_INT 17
31997: PUSH
31998: LD_INT 18
32000: PUSH
32001: LD_INT 19
32003: PUSH
32004: LD_INT 20
32006: PUSH
32007: LD_INT 21
32009: PUSH
32010: LD_INT 22
32012: PUSH
32013: LD_INT 23
32015: PUSH
32016: LD_INT 24
32018: PUSH
32019: LD_INT 25
32021: PUSH
32022: LD_INT 26
32024: PUSH
32025: LD_INT 27
32027: PUSH
32028: LD_INT 28
32030: PUSH
32031: LD_INT 29
32033: PUSH
32034: LD_INT 30
32036: PUSH
32037: LD_INT 31
32039: PUSH
32040: LD_INT 32
32042: PUSH
32043: LD_INT 33
32045: PUSH
32046: LD_INT 34
32048: PUSH
32049: LD_INT 35
32051: PUSH
32052: LD_INT 36
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 101
32095: PUSH
32096: LD_INT 102
32098: PUSH
32099: LD_INT 103
32101: PUSH
32102: LD_INT 104
32104: PUSH
32105: LD_INT 105
32107: PUSH
32108: LD_INT 106
32110: PUSH
32111: LD_INT 107
32113: PUSH
32114: LD_INT 108
32116: PUSH
32117: LD_INT 109
32119: PUSH
32120: LD_INT 110
32122: PUSH
32123: LD_INT 111
32125: PUSH
32126: LD_INT 112
32128: PUSH
32129: LD_INT 113
32131: PUSH
32132: LD_INT 114
32134: PUSH
32135: LD_INT 115
32137: PUSH
32138: LD_INT 116
32140: PUSH
32141: LD_INT 117
32143: PUSH
32144: LD_INT 118
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: ST_TO_ADDR
32171: GO 32174
32173: POP
// end else
32174: GO 32405
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
32176: LD_ADDR_VAR 0 2
32180: PUSH
32181: LD_INT 1
32183: PUSH
32184: LD_INT 2
32186: PUSH
32187: LD_INT 3
32189: PUSH
32190: LD_INT 4
32192: PUSH
32193: LD_INT 5
32195: PUSH
32196: LD_INT 6
32198: PUSH
32199: LD_INT 7
32201: PUSH
32202: LD_INT 8
32204: PUSH
32205: LD_INT 9
32207: PUSH
32208: LD_INT 10
32210: PUSH
32211: LD_INT 11
32213: PUSH
32214: LD_INT 12
32216: PUSH
32217: LD_INT 13
32219: PUSH
32220: LD_INT 14
32222: PUSH
32223: LD_INT 15
32225: PUSH
32226: LD_INT 16
32228: PUSH
32229: LD_INT 17
32231: PUSH
32232: LD_INT 18
32234: PUSH
32235: LD_INT 19
32237: PUSH
32238: LD_INT 20
32240: PUSH
32241: LD_INT 21
32243: PUSH
32244: LD_INT 22
32246: PUSH
32247: LD_INT 23
32249: PUSH
32250: LD_INT 24
32252: PUSH
32253: LD_INT 25
32255: PUSH
32256: LD_INT 26
32258: PUSH
32259: LD_INT 27
32261: PUSH
32262: LD_INT 28
32264: PUSH
32265: LD_INT 29
32267: PUSH
32268: LD_INT 30
32270: PUSH
32271: LD_INT 31
32273: PUSH
32274: LD_INT 32
32276: PUSH
32277: LD_INT 33
32279: PUSH
32280: LD_INT 34
32282: PUSH
32283: LD_INT 35
32285: PUSH
32286: LD_INT 36
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 101
32329: PUSH
32330: LD_INT 102
32332: PUSH
32333: LD_INT 103
32335: PUSH
32336: LD_INT 104
32338: PUSH
32339: LD_INT 105
32341: PUSH
32342: LD_INT 106
32344: PUSH
32345: LD_INT 107
32347: PUSH
32348: LD_INT 108
32350: PUSH
32351: LD_INT 109
32353: PUSH
32354: LD_INT 110
32356: PUSH
32357: LD_INT 111
32359: PUSH
32360: LD_INT 112
32362: PUSH
32363: LD_INT 113
32365: PUSH
32366: LD_INT 114
32368: PUSH
32369: LD_INT 115
32371: PUSH
32372: LD_INT 116
32374: PUSH
32375: LD_INT 117
32377: PUSH
32378: LD_INT 118
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: ST_TO_ADDR
// if result then
32405: LD_VAR 0 2
32409: IFFALSE 33195
// begin normal :=  ;
32411: LD_ADDR_VAR 0 5
32415: PUSH
32416: LD_STRING 
32418: ST_TO_ADDR
// hardcore :=  ;
32419: LD_ADDR_VAR 0 6
32423: PUSH
32424: LD_STRING 
32426: ST_TO_ADDR
// active :=  ;
32427: LD_ADDR_VAR 0 7
32431: PUSH
32432: LD_STRING 
32434: ST_TO_ADDR
// for i = 1 to normalCounter do
32435: LD_ADDR_VAR 0 8
32439: PUSH
32440: DOUBLE
32441: LD_INT 1
32443: DEC
32444: ST_TO_ADDR
32445: LD_EXP 69
32449: PUSH
32450: FOR_TO
32451: IFFALSE 32552
// begin tmp := 0 ;
32453: LD_ADDR_VAR 0 3
32457: PUSH
32458: LD_STRING 0
32460: ST_TO_ADDR
// if result [ 1 ] then
32461: LD_VAR 0 2
32465: PUSH
32466: LD_INT 1
32468: ARRAY
32469: IFFALSE 32534
// if result [ 1 ] [ 1 ] = i then
32471: LD_VAR 0 2
32475: PUSH
32476: LD_INT 1
32478: ARRAY
32479: PUSH
32480: LD_INT 1
32482: ARRAY
32483: PUSH
32484: LD_VAR 0 8
32488: EQUAL
32489: IFFALSE 32534
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
32491: LD_ADDR_VAR 0 2
32495: PUSH
32496: LD_VAR 0 2
32500: PPUSH
32501: LD_INT 1
32503: PPUSH
32504: LD_VAR 0 2
32508: PUSH
32509: LD_INT 1
32511: ARRAY
32512: PPUSH
32513: LD_INT 1
32515: PPUSH
32516: CALL_OW 3
32520: PPUSH
32521: CALL_OW 1
32525: ST_TO_ADDR
// tmp := 1 ;
32526: LD_ADDR_VAR 0 3
32530: PUSH
32531: LD_STRING 1
32533: ST_TO_ADDR
// end ; normal := normal & tmp ;
32534: LD_ADDR_VAR 0 5
32538: PUSH
32539: LD_VAR 0 5
32543: PUSH
32544: LD_VAR 0 3
32548: STR
32549: ST_TO_ADDR
// end ;
32550: GO 32450
32552: POP
32553: POP
// for i = 1 to hardcoreCounter do
32554: LD_ADDR_VAR 0 8
32558: PUSH
32559: DOUBLE
32560: LD_INT 1
32562: DEC
32563: ST_TO_ADDR
32564: LD_EXP 70
32568: PUSH
32569: FOR_TO
32570: IFFALSE 32675
// begin tmp := 0 ;
32572: LD_ADDR_VAR 0 3
32576: PUSH
32577: LD_STRING 0
32579: ST_TO_ADDR
// if result [ 2 ] then
32580: LD_VAR 0 2
32584: PUSH
32585: LD_INT 2
32587: ARRAY
32588: IFFALSE 32657
// if result [ 2 ] [ 1 ] = 100 + i then
32590: LD_VAR 0 2
32594: PUSH
32595: LD_INT 2
32597: ARRAY
32598: PUSH
32599: LD_INT 1
32601: ARRAY
32602: PUSH
32603: LD_INT 100
32605: PUSH
32606: LD_VAR 0 8
32610: PLUS
32611: EQUAL
32612: IFFALSE 32657
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
32614: LD_ADDR_VAR 0 2
32618: PUSH
32619: LD_VAR 0 2
32623: PPUSH
32624: LD_INT 2
32626: PPUSH
32627: LD_VAR 0 2
32631: PUSH
32632: LD_INT 2
32634: ARRAY
32635: PPUSH
32636: LD_INT 1
32638: PPUSH
32639: CALL_OW 3
32643: PPUSH
32644: CALL_OW 1
32648: ST_TO_ADDR
// tmp := 1 ;
32649: LD_ADDR_VAR 0 3
32653: PUSH
32654: LD_STRING 1
32656: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
32657: LD_ADDR_VAR 0 6
32661: PUSH
32662: LD_VAR 0 6
32666: PUSH
32667: LD_VAR 0 3
32671: STR
32672: ST_TO_ADDR
// end ;
32673: GO 32569
32675: POP
32676: POP
// if isGameLoad then
32677: LD_VAR 0 1
32681: IFFALSE 33156
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
32683: LD_ADDR_VAR 0 4
32687: PUSH
32688: LD_EXP 73
32692: PUSH
32693: LD_EXP 72
32697: PUSH
32698: LD_EXP 74
32702: PUSH
32703: LD_EXP 71
32707: PUSH
32708: LD_EXP 75
32712: PUSH
32713: LD_EXP 76
32717: PUSH
32718: LD_EXP 77
32722: PUSH
32723: LD_EXP 78
32727: PUSH
32728: LD_EXP 79
32732: PUSH
32733: LD_EXP 80
32737: PUSH
32738: LD_EXP 81
32742: PUSH
32743: LD_EXP 82
32747: PUSH
32748: LD_EXP 83
32752: PUSH
32753: LD_EXP 84
32757: PUSH
32758: LD_EXP 92
32762: PUSH
32763: LD_EXP 93
32767: PUSH
32768: LD_EXP 94
32772: PUSH
32773: LD_EXP 95
32777: PUSH
32778: LD_EXP 97
32782: PUSH
32783: LD_EXP 98
32787: PUSH
32788: LD_EXP 99
32792: PUSH
32793: LD_EXP 102
32797: PUSH
32798: LD_EXP 104
32802: PUSH
32803: LD_EXP 105
32807: PUSH
32808: LD_EXP 106
32812: PUSH
32813: LD_EXP 108
32817: PUSH
32818: LD_EXP 109
32822: PUSH
32823: LD_EXP 112
32827: PUSH
32828: LD_EXP 113
32832: PUSH
32833: LD_EXP 114
32837: PUSH
32838: LD_EXP 115
32842: PUSH
32843: LD_EXP 116
32847: PUSH
32848: LD_EXP 117
32852: PUSH
32853: LD_EXP 118
32857: PUSH
32858: LD_EXP 119
32862: PUSH
32863: LD_EXP 120
32867: PUSH
32868: LD_EXP 85
32872: PUSH
32873: LD_EXP 86
32877: PUSH
32878: LD_EXP 89
32882: PUSH
32883: LD_EXP 90
32887: PUSH
32888: LD_EXP 91
32892: PUSH
32893: LD_EXP 87
32897: PUSH
32898: LD_EXP 88
32902: PUSH
32903: LD_EXP 96
32907: PUSH
32908: LD_EXP 100
32912: PUSH
32913: LD_EXP 101
32917: PUSH
32918: LD_EXP 103
32922: PUSH
32923: LD_EXP 107
32927: PUSH
32928: LD_EXP 110
32932: PUSH
32933: LD_EXP 111
32937: PUSH
32938: LD_EXP 121
32942: PUSH
32943: LD_EXP 122
32947: PUSH
32948: LD_EXP 123
32952: PUSH
32953: LD_EXP 124
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: ST_TO_ADDR
// tmp :=  ;
33014: LD_ADDR_VAR 0 3
33018: PUSH
33019: LD_STRING 
33021: ST_TO_ADDR
// for i = 1 to normalCounter do
33022: LD_ADDR_VAR 0 8
33026: PUSH
33027: DOUBLE
33028: LD_INT 1
33030: DEC
33031: ST_TO_ADDR
33032: LD_EXP 69
33036: PUSH
33037: FOR_TO
33038: IFFALSE 33074
// begin if flags [ i ] then
33040: LD_VAR 0 4
33044: PUSH
33045: LD_VAR 0 8
33049: ARRAY
33050: IFFALSE 33072
// tmp := tmp & i & ; ;
33052: LD_ADDR_VAR 0 3
33056: PUSH
33057: LD_VAR 0 3
33061: PUSH
33062: LD_VAR 0 8
33066: STR
33067: PUSH
33068: LD_STRING ;
33070: STR
33071: ST_TO_ADDR
// end ;
33072: GO 33037
33074: POP
33075: POP
// for i = 1 to hardcoreCounter do
33076: LD_ADDR_VAR 0 8
33080: PUSH
33081: DOUBLE
33082: LD_INT 1
33084: DEC
33085: ST_TO_ADDR
33086: LD_EXP 70
33090: PUSH
33091: FOR_TO
33092: IFFALSE 33138
// begin if flags [ normalCounter + i ] then
33094: LD_VAR 0 4
33098: PUSH
33099: LD_EXP 69
33103: PUSH
33104: LD_VAR 0 8
33108: PLUS
33109: ARRAY
33110: IFFALSE 33136
// tmp := tmp & ( 100 + i ) & ; ;
33112: LD_ADDR_VAR 0 3
33116: PUSH
33117: LD_VAR 0 3
33121: PUSH
33122: LD_INT 100
33124: PUSH
33125: LD_VAR 0 8
33129: PLUS
33130: STR
33131: PUSH
33132: LD_STRING ;
33134: STR
33135: ST_TO_ADDR
// end ;
33136: GO 33091
33138: POP
33139: POP
// if tmp then
33140: LD_VAR 0 3
33144: IFFALSE 33156
// active := tmp ;
33146: LD_ADDR_VAR 0 7
33150: PUSH
33151: LD_VAR 0 3
33155: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
33156: LD_STRING getStreamItemsFromMission("
33158: PUSH
33159: LD_VAR 0 5
33163: STR
33164: PUSH
33165: LD_STRING ","
33167: STR
33168: PUSH
33169: LD_VAR 0 6
33173: STR
33174: PUSH
33175: LD_STRING ","
33177: STR
33178: PUSH
33179: LD_VAR 0 7
33183: STR
33184: PUSH
33185: LD_STRING ")
33187: STR
33188: PPUSH
33189: CALL_OW 559
// end else
33193: GO 33202
// ToLua ( getStreamItemsFromMission("","","") ) ;
33195: LD_STRING getStreamItemsFromMission("","","")
33197: PPUSH
33198: CALL_OW 559
// end ;
33202: LD_VAR 0 2
33206: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
33207: LD_EXP 68
33211: PUSH
33212: LD_EXP 73
33216: AND
33217: IFFALSE 33341
33219: GO 33221
33221: DISABLE
33222: LD_INT 0
33224: PPUSH
33225: PPUSH
// begin enable ;
33226: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
33227: LD_ADDR_VAR 0 2
33231: PUSH
33232: LD_INT 22
33234: PUSH
33235: LD_OWVAR 2
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 2
33246: PUSH
33247: LD_INT 34
33249: PUSH
33250: LD_INT 7
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 34
33259: PUSH
33260: LD_INT 45
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 34
33269: PUSH
33270: LD_INT 28
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 34
33279: PUSH
33280: LD_INT 47
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PPUSH
33298: CALL_OW 69
33302: ST_TO_ADDR
// if not tmp then
33303: LD_VAR 0 2
33307: NOT
33308: IFFALSE 33312
// exit ;
33310: GO 33341
// for i in tmp do
33312: LD_ADDR_VAR 0 1
33316: PUSH
33317: LD_VAR 0 2
33321: PUSH
33322: FOR_IN
33323: IFFALSE 33339
// begin SetLives ( i , 0 ) ;
33325: LD_VAR 0 1
33329: PPUSH
33330: LD_INT 0
33332: PPUSH
33333: CALL_OW 234
// end ;
33337: GO 33322
33339: POP
33340: POP
// end ;
33341: PPOPN 2
33343: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
33344: LD_EXP 68
33348: PUSH
33349: LD_EXP 74
33353: AND
33354: IFFALSE 33438
33356: GO 33358
33358: DISABLE
33359: LD_INT 0
33361: PPUSH
33362: PPUSH
// begin enable ;
33363: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
33364: LD_ADDR_VAR 0 2
33368: PUSH
33369: LD_INT 22
33371: PUSH
33372: LD_OWVAR 2
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 32
33383: PUSH
33384: LD_INT 3
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PPUSH
33395: CALL_OW 69
33399: ST_TO_ADDR
// if not tmp then
33400: LD_VAR 0 2
33404: NOT
33405: IFFALSE 33409
// exit ;
33407: GO 33438
// for i in tmp do
33409: LD_ADDR_VAR 0 1
33413: PUSH
33414: LD_VAR 0 2
33418: PUSH
33419: FOR_IN
33420: IFFALSE 33436
// begin SetLives ( i , 0 ) ;
33422: LD_VAR 0 1
33426: PPUSH
33427: LD_INT 0
33429: PPUSH
33430: CALL_OW 234
// end ;
33434: GO 33419
33436: POP
33437: POP
// end ;
33438: PPOPN 2
33440: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
33441: LD_EXP 68
33445: PUSH
33446: LD_EXP 71
33450: AND
33451: IFFALSE 33544
33453: GO 33455
33455: DISABLE
33456: LD_INT 0
33458: PPUSH
// begin enable ;
33459: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
33460: LD_ADDR_VAR 0 1
33464: PUSH
33465: LD_INT 22
33467: PUSH
33468: LD_OWVAR 2
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 2
33479: PUSH
33480: LD_INT 25
33482: PUSH
33483: LD_INT 5
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 25
33492: PUSH
33493: LD_INT 9
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 25
33502: PUSH
33503: LD_INT 8
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PPUSH
33520: CALL_OW 69
33524: PUSH
33525: FOR_IN
33526: IFFALSE 33542
// begin SetClass ( i , 1 ) ;
33528: LD_VAR 0 1
33532: PPUSH
33533: LD_INT 1
33535: PPUSH
33536: CALL_OW 336
// end ;
33540: GO 33525
33542: POP
33543: POP
// end ;
33544: PPOPN 1
33546: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
33547: LD_EXP 68
33551: PUSH
33552: LD_EXP 72
33556: AND
33557: PUSH
33558: LD_OWVAR 65
33562: PUSH
33563: LD_INT 7
33565: LESS
33566: AND
33567: IFFALSE 33581
33569: GO 33571
33571: DISABLE
// begin enable ;
33572: ENABLE
// game_speed := 7 ;
33573: LD_ADDR_OWVAR 65
33577: PUSH
33578: LD_INT 7
33580: ST_TO_ADDR
// end ;
33581: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
33582: LD_EXP 68
33586: PUSH
33587: LD_EXP 75
33591: AND
33592: IFFALSE 33794
33594: GO 33596
33596: DISABLE
33597: LD_INT 0
33599: PPUSH
33600: PPUSH
33601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33602: LD_ADDR_VAR 0 3
33606: PUSH
33607: LD_INT 81
33609: PUSH
33610: LD_OWVAR 2
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 21
33621: PUSH
33622: LD_INT 1
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PPUSH
33633: CALL_OW 69
33637: ST_TO_ADDR
// if not tmp then
33638: LD_VAR 0 3
33642: NOT
33643: IFFALSE 33647
// exit ;
33645: GO 33794
// if tmp > 5 then
33647: LD_VAR 0 3
33651: PUSH
33652: LD_INT 5
33654: GREATER
33655: IFFALSE 33667
// k := 5 else
33657: LD_ADDR_VAR 0 2
33661: PUSH
33662: LD_INT 5
33664: ST_TO_ADDR
33665: GO 33677
// k := tmp ;
33667: LD_ADDR_VAR 0 2
33671: PUSH
33672: LD_VAR 0 3
33676: ST_TO_ADDR
// for i := 1 to k do
33677: LD_ADDR_VAR 0 1
33681: PUSH
33682: DOUBLE
33683: LD_INT 1
33685: DEC
33686: ST_TO_ADDR
33687: LD_VAR 0 2
33691: PUSH
33692: FOR_TO
33693: IFFALSE 33792
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
33695: LD_VAR 0 3
33699: PUSH
33700: LD_VAR 0 1
33704: ARRAY
33705: PPUSH
33706: LD_VAR 0 1
33710: PUSH
33711: LD_INT 4
33713: MOD
33714: PUSH
33715: LD_INT 1
33717: PLUS
33718: PPUSH
33719: CALL_OW 259
33723: PUSH
33724: LD_INT 10
33726: LESS
33727: IFFALSE 33790
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
33729: LD_VAR 0 3
33733: PUSH
33734: LD_VAR 0 1
33738: ARRAY
33739: PPUSH
33740: LD_VAR 0 1
33744: PUSH
33745: LD_INT 4
33747: MOD
33748: PUSH
33749: LD_INT 1
33751: PLUS
33752: PPUSH
33753: LD_VAR 0 3
33757: PUSH
33758: LD_VAR 0 1
33762: ARRAY
33763: PPUSH
33764: LD_VAR 0 1
33768: PUSH
33769: LD_INT 4
33771: MOD
33772: PUSH
33773: LD_INT 1
33775: PLUS
33776: PPUSH
33777: CALL_OW 259
33781: PUSH
33782: LD_INT 1
33784: PLUS
33785: PPUSH
33786: CALL_OW 237
33790: GO 33692
33792: POP
33793: POP
// end ;
33794: PPOPN 3
33796: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
33797: LD_EXP 68
33801: PUSH
33802: LD_EXP 76
33806: AND
33807: IFFALSE 33827
33809: GO 33811
33811: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
33812: LD_INT 4
33814: PPUSH
33815: LD_OWVAR 2
33819: PPUSH
33820: LD_INT 0
33822: PPUSH
33823: CALL_OW 324
33827: END
// every 0 0$1 trigger StreamModeActive and sShovel do
33828: LD_EXP 68
33832: PUSH
33833: LD_EXP 105
33837: AND
33838: IFFALSE 33858
33840: GO 33842
33842: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
33843: LD_INT 19
33845: PPUSH
33846: LD_OWVAR 2
33850: PPUSH
33851: LD_INT 0
33853: PPUSH
33854: CALL_OW 324
33858: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
33859: LD_EXP 68
33863: PUSH
33864: LD_EXP 77
33868: AND
33869: IFFALSE 33971
33871: GO 33873
33873: DISABLE
33874: LD_INT 0
33876: PPUSH
33877: PPUSH
// begin enable ;
33878: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
33879: LD_ADDR_VAR 0 2
33883: PUSH
33884: LD_INT 22
33886: PUSH
33887: LD_OWVAR 2
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 2
33898: PUSH
33899: LD_INT 34
33901: PUSH
33902: LD_INT 11
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 34
33911: PUSH
33912: LD_INT 30
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: LIST
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PPUSH
33928: CALL_OW 69
33932: ST_TO_ADDR
// if not tmp then
33933: LD_VAR 0 2
33937: NOT
33938: IFFALSE 33942
// exit ;
33940: GO 33971
// for i in tmp do
33942: LD_ADDR_VAR 0 1
33946: PUSH
33947: LD_VAR 0 2
33951: PUSH
33952: FOR_IN
33953: IFFALSE 33969
// begin SetLives ( i , 0 ) ;
33955: LD_VAR 0 1
33959: PPUSH
33960: LD_INT 0
33962: PPUSH
33963: CALL_OW 234
// end ;
33967: GO 33952
33969: POP
33970: POP
// end ;
33971: PPOPN 2
33973: END
// every 0 0$1 trigger StreamModeActive and sBunker do
33974: LD_EXP 68
33978: PUSH
33979: LD_EXP 78
33983: AND
33984: IFFALSE 34004
33986: GO 33988
33988: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
33989: LD_INT 32
33991: PPUSH
33992: LD_OWVAR 2
33996: PPUSH
33997: LD_INT 0
33999: PPUSH
34000: CALL_OW 324
34004: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
34005: LD_EXP 68
34009: PUSH
34010: LD_EXP 79
34014: AND
34015: IFFALSE 34196
34017: GO 34019
34019: DISABLE
34020: LD_INT 0
34022: PPUSH
34023: PPUSH
34024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
34025: LD_ADDR_VAR 0 2
34029: PUSH
34030: LD_INT 22
34032: PUSH
34033: LD_OWVAR 2
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 33
34044: PUSH
34045: LD_INT 3
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PPUSH
34056: CALL_OW 69
34060: ST_TO_ADDR
// if not tmp then
34061: LD_VAR 0 2
34065: NOT
34066: IFFALSE 34070
// exit ;
34068: GO 34196
// side := 0 ;
34070: LD_ADDR_VAR 0 3
34074: PUSH
34075: LD_INT 0
34077: ST_TO_ADDR
// for i := 1 to 8 do
34078: LD_ADDR_VAR 0 1
34082: PUSH
34083: DOUBLE
34084: LD_INT 1
34086: DEC
34087: ST_TO_ADDR
34088: LD_INT 8
34090: PUSH
34091: FOR_TO
34092: IFFALSE 34140
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
34094: LD_OWVAR 2
34098: PUSH
34099: LD_VAR 0 1
34103: NONEQUAL
34104: PUSH
34105: LD_OWVAR 2
34109: PPUSH
34110: LD_VAR 0 1
34114: PPUSH
34115: CALL_OW 81
34119: PUSH
34120: LD_INT 2
34122: EQUAL
34123: AND
34124: IFFALSE 34138
// begin side := i ;
34126: LD_ADDR_VAR 0 3
34130: PUSH
34131: LD_VAR 0 1
34135: ST_TO_ADDR
// break ;
34136: GO 34140
// end ;
34138: GO 34091
34140: POP
34141: POP
// if not side then
34142: LD_VAR 0 3
34146: NOT
34147: IFFALSE 34151
// exit ;
34149: GO 34196
// for i := 1 to tmp do
34151: LD_ADDR_VAR 0 1
34155: PUSH
34156: DOUBLE
34157: LD_INT 1
34159: DEC
34160: ST_TO_ADDR
34161: LD_VAR 0 2
34165: PUSH
34166: FOR_TO
34167: IFFALSE 34194
// if Prob ( 60 ) then
34169: LD_INT 60
34171: PPUSH
34172: CALL_OW 13
34176: IFFALSE 34192
// SetSide ( i , side ) ;
34178: LD_VAR 0 1
34182: PPUSH
34183: LD_VAR 0 3
34187: PPUSH
34188: CALL_OW 235
34192: GO 34166
34194: POP
34195: POP
// end ;
34196: PPOPN 3
34198: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
34199: LD_EXP 68
34203: PUSH
34204: LD_EXP 81
34208: AND
34209: IFFALSE 34328
34211: GO 34213
34213: DISABLE
34214: LD_INT 0
34216: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
34217: LD_ADDR_VAR 0 1
34221: PUSH
34222: LD_INT 22
34224: PUSH
34225: LD_OWVAR 2
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 21
34236: PUSH
34237: LD_INT 1
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 3
34246: PUSH
34247: LD_INT 23
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: LIST
34265: PPUSH
34266: CALL_OW 69
34270: PUSH
34271: FOR_IN
34272: IFFALSE 34326
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
34274: LD_VAR 0 1
34278: PPUSH
34279: CALL_OW 257
34283: PUSH
34284: LD_INT 1
34286: PUSH
34287: LD_INT 2
34289: PUSH
34290: LD_INT 3
34292: PUSH
34293: LD_INT 4
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: IN
34302: IFFALSE 34324
// SetClass ( un , rand ( 1 , 4 ) ) ;
34304: LD_VAR 0 1
34308: PPUSH
34309: LD_INT 1
34311: PPUSH
34312: LD_INT 4
34314: PPUSH
34315: CALL_OW 12
34319: PPUSH
34320: CALL_OW 336
34324: GO 34271
34326: POP
34327: POP
// end ;
34328: PPOPN 1
34330: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
34331: LD_EXP 68
34335: PUSH
34336: LD_EXP 80
34340: AND
34341: IFFALSE 34420
34343: GO 34345
34345: DISABLE
34346: LD_INT 0
34348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
34349: LD_ADDR_VAR 0 1
34353: PUSH
34354: LD_INT 22
34356: PUSH
34357: LD_OWVAR 2
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 21
34368: PUSH
34369: LD_INT 3
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PPUSH
34380: CALL_OW 69
34384: ST_TO_ADDR
// if not tmp then
34385: LD_VAR 0 1
34389: NOT
34390: IFFALSE 34394
// exit ;
34392: GO 34420
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
34394: LD_VAR 0 1
34398: PUSH
34399: LD_INT 1
34401: PPUSH
34402: LD_VAR 0 1
34406: PPUSH
34407: CALL_OW 12
34411: ARRAY
34412: PPUSH
34413: LD_INT 100
34415: PPUSH
34416: CALL_OW 234
// end ;
34420: PPOPN 1
34422: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
34423: LD_EXP 68
34427: PUSH
34428: LD_EXP 82
34432: AND
34433: IFFALSE 34531
34435: GO 34437
34437: DISABLE
34438: LD_INT 0
34440: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
34441: LD_ADDR_VAR 0 1
34445: PUSH
34446: LD_INT 22
34448: PUSH
34449: LD_OWVAR 2
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 21
34460: PUSH
34461: LD_INT 1
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PPUSH
34472: CALL_OW 69
34476: ST_TO_ADDR
// if not tmp then
34477: LD_VAR 0 1
34481: NOT
34482: IFFALSE 34486
// exit ;
34484: GO 34531
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
34486: LD_VAR 0 1
34490: PUSH
34491: LD_INT 1
34493: PPUSH
34494: LD_VAR 0 1
34498: PPUSH
34499: CALL_OW 12
34503: ARRAY
34504: PPUSH
34505: LD_INT 1
34507: PPUSH
34508: LD_INT 4
34510: PPUSH
34511: CALL_OW 12
34515: PPUSH
34516: LD_INT 3000
34518: PPUSH
34519: LD_INT 9000
34521: PPUSH
34522: CALL_OW 12
34526: PPUSH
34527: CALL_OW 492
// end ;
34531: PPOPN 1
34533: END
// every 0 0$1 trigger StreamModeActive and sDepot do
34534: LD_EXP 68
34538: PUSH
34539: LD_EXP 83
34543: AND
34544: IFFALSE 34564
34546: GO 34548
34548: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
34549: LD_INT 1
34551: PPUSH
34552: LD_OWVAR 2
34556: PPUSH
34557: LD_INT 0
34559: PPUSH
34560: CALL_OW 324
34564: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
34565: LD_EXP 68
34569: PUSH
34570: LD_EXP 84
34574: AND
34575: IFFALSE 34658
34577: GO 34579
34579: DISABLE
34580: LD_INT 0
34582: PPUSH
34583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
34584: LD_ADDR_VAR 0 2
34588: PUSH
34589: LD_INT 22
34591: PUSH
34592: LD_OWVAR 2
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 21
34603: PUSH
34604: LD_INT 3
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PPUSH
34615: CALL_OW 69
34619: ST_TO_ADDR
// if not tmp then
34620: LD_VAR 0 2
34624: NOT
34625: IFFALSE 34629
// exit ;
34627: GO 34658
// for i in tmp do
34629: LD_ADDR_VAR 0 1
34633: PUSH
34634: LD_VAR 0 2
34638: PUSH
34639: FOR_IN
34640: IFFALSE 34656
// SetBLevel ( i , 10 ) ;
34642: LD_VAR 0 1
34646: PPUSH
34647: LD_INT 10
34649: PPUSH
34650: CALL_OW 241
34654: GO 34639
34656: POP
34657: POP
// end ;
34658: PPOPN 2
34660: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
34661: LD_EXP 68
34665: PUSH
34666: LD_EXP 85
34670: AND
34671: IFFALSE 34782
34673: GO 34675
34675: DISABLE
34676: LD_INT 0
34678: PPUSH
34679: PPUSH
34680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34681: LD_ADDR_VAR 0 3
34685: PUSH
34686: LD_INT 22
34688: PUSH
34689: LD_OWVAR 2
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 25
34700: PUSH
34701: LD_INT 1
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PPUSH
34712: CALL_OW 69
34716: ST_TO_ADDR
// if not tmp then
34717: LD_VAR 0 3
34721: NOT
34722: IFFALSE 34726
// exit ;
34724: GO 34782
// un := tmp [ rand ( 1 , tmp ) ] ;
34726: LD_ADDR_VAR 0 2
34730: PUSH
34731: LD_VAR 0 3
34735: PUSH
34736: LD_INT 1
34738: PPUSH
34739: LD_VAR 0 3
34743: PPUSH
34744: CALL_OW 12
34748: ARRAY
34749: ST_TO_ADDR
// if Crawls ( un ) then
34750: LD_VAR 0 2
34754: PPUSH
34755: CALL_OW 318
34759: IFFALSE 34770
// ComWalk ( un ) ;
34761: LD_VAR 0 2
34765: PPUSH
34766: CALL_OW 138
// SetClass ( un , class_sniper ) ;
34770: LD_VAR 0 2
34774: PPUSH
34775: LD_INT 5
34777: PPUSH
34778: CALL_OW 336
// end ;
34782: PPOPN 3
34784: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
34785: LD_EXP 68
34789: PUSH
34790: LD_EXP 86
34794: AND
34795: PUSH
34796: LD_OWVAR 67
34800: PUSH
34801: LD_INT 4
34803: LESS
34804: AND
34805: IFFALSE 34824
34807: GO 34809
34809: DISABLE
// begin Difficulty := Difficulty + 1 ;
34810: LD_ADDR_OWVAR 67
34814: PUSH
34815: LD_OWVAR 67
34819: PUSH
34820: LD_INT 1
34822: PLUS
34823: ST_TO_ADDR
// end ;
34824: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
34825: LD_EXP 68
34829: PUSH
34830: LD_EXP 87
34834: AND
34835: IFFALSE 34938
34837: GO 34839
34839: DISABLE
34840: LD_INT 0
34842: PPUSH
// begin for i := 1 to 5 do
34843: LD_ADDR_VAR 0 1
34847: PUSH
34848: DOUBLE
34849: LD_INT 1
34851: DEC
34852: ST_TO_ADDR
34853: LD_INT 5
34855: PUSH
34856: FOR_TO
34857: IFFALSE 34936
// begin uc_nation := nation_nature ;
34859: LD_ADDR_OWVAR 21
34863: PUSH
34864: LD_INT 0
34866: ST_TO_ADDR
// uc_side := 0 ;
34867: LD_ADDR_OWVAR 20
34871: PUSH
34872: LD_INT 0
34874: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34875: LD_ADDR_OWVAR 29
34879: PUSH
34880: LD_INT 12
34882: PUSH
34883: LD_INT 12
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: ST_TO_ADDR
// hc_agressivity := 20 ;
34890: LD_ADDR_OWVAR 35
34894: PUSH
34895: LD_INT 20
34897: ST_TO_ADDR
// hc_class := class_tiger ;
34898: LD_ADDR_OWVAR 28
34902: PUSH
34903: LD_INT 14
34905: ST_TO_ADDR
// hc_gallery :=  ;
34906: LD_ADDR_OWVAR 33
34910: PUSH
34911: LD_STRING 
34913: ST_TO_ADDR
// hc_name :=  ;
34914: LD_ADDR_OWVAR 26
34918: PUSH
34919: LD_STRING 
34921: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
34922: CALL_OW 44
34926: PPUSH
34927: LD_INT 0
34929: PPUSH
34930: CALL_OW 51
// end ;
34934: GO 34856
34936: POP
34937: POP
// end ;
34938: PPOPN 1
34940: END
// every 0 0$1 trigger StreamModeActive and sBomb do
34941: LD_EXP 68
34945: PUSH
34946: LD_EXP 88
34950: AND
34951: IFFALSE 34960
34953: GO 34955
34955: DISABLE
// StreamSibBomb ;
34956: CALL 34961 0 0
34960: END
// export function StreamSibBomb ; var i , x , y ; begin
34961: LD_INT 0
34963: PPUSH
34964: PPUSH
34965: PPUSH
34966: PPUSH
// result := false ;
34967: LD_ADDR_VAR 0 1
34971: PUSH
34972: LD_INT 0
34974: ST_TO_ADDR
// for i := 1 to 16 do
34975: LD_ADDR_VAR 0 2
34979: PUSH
34980: DOUBLE
34981: LD_INT 1
34983: DEC
34984: ST_TO_ADDR
34985: LD_INT 16
34987: PUSH
34988: FOR_TO
34989: IFFALSE 35188
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
34991: LD_ADDR_VAR 0 3
34995: PUSH
34996: LD_INT 10
34998: PUSH
34999: LD_INT 20
35001: PUSH
35002: LD_INT 30
35004: PUSH
35005: LD_INT 40
35007: PUSH
35008: LD_INT 50
35010: PUSH
35011: LD_INT 60
35013: PUSH
35014: LD_INT 70
35016: PUSH
35017: LD_INT 80
35019: PUSH
35020: LD_INT 90
35022: PUSH
35023: LD_INT 100
35025: PUSH
35026: LD_INT 110
35028: PUSH
35029: LD_INT 120
35031: PUSH
35032: LD_INT 130
35034: PUSH
35035: LD_INT 140
35037: PUSH
35038: LD_INT 150
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 1
35060: PPUSH
35061: LD_INT 15
35063: PPUSH
35064: CALL_OW 12
35068: ARRAY
35069: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
35070: LD_ADDR_VAR 0 4
35074: PUSH
35075: LD_INT 10
35077: PUSH
35078: LD_INT 20
35080: PUSH
35081: LD_INT 30
35083: PUSH
35084: LD_INT 40
35086: PUSH
35087: LD_INT 50
35089: PUSH
35090: LD_INT 60
35092: PUSH
35093: LD_INT 70
35095: PUSH
35096: LD_INT 80
35098: PUSH
35099: LD_INT 90
35101: PUSH
35102: LD_INT 100
35104: PUSH
35105: LD_INT 110
35107: PUSH
35108: LD_INT 120
35110: PUSH
35111: LD_INT 130
35113: PUSH
35114: LD_INT 140
35116: PUSH
35117: LD_INT 150
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 1
35139: PPUSH
35140: LD_INT 15
35142: PPUSH
35143: CALL_OW 12
35147: ARRAY
35148: ST_TO_ADDR
// if ValidHex ( x , y ) then
35149: LD_VAR 0 3
35153: PPUSH
35154: LD_VAR 0 4
35158: PPUSH
35159: CALL_OW 488
35163: IFFALSE 35186
// begin result := [ x , y ] ;
35165: LD_ADDR_VAR 0 1
35169: PUSH
35170: LD_VAR 0 3
35174: PUSH
35175: LD_VAR 0 4
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: ST_TO_ADDR
// break ;
35184: GO 35188
// end ; end ;
35186: GO 34988
35188: POP
35189: POP
// if result then
35190: LD_VAR 0 1
35194: IFFALSE 35254
// begin ToLua ( playSibBomb() ) ;
35196: LD_STRING playSibBomb()
35198: PPUSH
35199: CALL_OW 559
// wait ( 0 0$14 ) ;
35203: LD_INT 490
35205: PPUSH
35206: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
35210: LD_VAR 0 1
35214: PUSH
35215: LD_INT 1
35217: ARRAY
35218: PPUSH
35219: LD_VAR 0 1
35223: PUSH
35224: LD_INT 2
35226: ARRAY
35227: PPUSH
35228: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
35232: LD_VAR 0 1
35236: PUSH
35237: LD_INT 1
35239: ARRAY
35240: PPUSH
35241: LD_VAR 0 1
35245: PUSH
35246: LD_INT 2
35248: ARRAY
35249: PPUSH
35250: CALL_OW 429
// end ; end ;
35254: LD_VAR 0 1
35258: RET
// every 0 0$1 trigger StreamModeActive and sReset do
35259: LD_EXP 68
35263: PUSH
35264: LD_EXP 90
35268: AND
35269: IFFALSE 35281
35271: GO 35273
35273: DISABLE
// YouLost (  ) ;
35274: LD_STRING 
35276: PPUSH
35277: CALL_OW 104
35281: END
// every 0 0$1 trigger StreamModeActive and sFog do
35282: LD_EXP 68
35286: PUSH
35287: LD_EXP 89
35291: AND
35292: IFFALSE 35306
35294: GO 35296
35296: DISABLE
// FogOff ( your_side ) ;
35297: LD_OWVAR 2
35301: PPUSH
35302: CALL_OW 344
35306: END
// every 0 0$1 trigger StreamModeActive and sSun do
35307: LD_EXP 68
35311: PUSH
35312: LD_EXP 91
35316: AND
35317: IFFALSE 35345
35319: GO 35321
35321: DISABLE
// begin solar_recharge_percent := 0 ;
35322: LD_ADDR_OWVAR 79
35326: PUSH
35327: LD_INT 0
35329: ST_TO_ADDR
// wait ( 5 5$00 ) ;
35330: LD_INT 10500
35332: PPUSH
35333: CALL_OW 67
// solar_recharge_percent := 100 ;
35337: LD_ADDR_OWVAR 79
35341: PUSH
35342: LD_INT 100
35344: ST_TO_ADDR
// end ;
35345: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
35346: LD_EXP 68
35350: PUSH
35351: LD_EXP 92
35355: AND
35356: IFFALSE 35595
35358: GO 35360
35360: DISABLE
35361: LD_INT 0
35363: PPUSH
35364: PPUSH
35365: PPUSH
// begin tmp := [ ] ;
35366: LD_ADDR_VAR 0 3
35370: PUSH
35371: EMPTY
35372: ST_TO_ADDR
// for i := 1 to 6 do
35373: LD_ADDR_VAR 0 1
35377: PUSH
35378: DOUBLE
35379: LD_INT 1
35381: DEC
35382: ST_TO_ADDR
35383: LD_INT 6
35385: PUSH
35386: FOR_TO
35387: IFFALSE 35492
// begin uc_nation := nation_nature ;
35389: LD_ADDR_OWVAR 21
35393: PUSH
35394: LD_INT 0
35396: ST_TO_ADDR
// uc_side := 0 ;
35397: LD_ADDR_OWVAR 20
35401: PUSH
35402: LD_INT 0
35404: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35405: LD_ADDR_OWVAR 29
35409: PUSH
35410: LD_INT 12
35412: PUSH
35413: LD_INT 12
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: ST_TO_ADDR
// hc_agressivity := 20 ;
35420: LD_ADDR_OWVAR 35
35424: PUSH
35425: LD_INT 20
35427: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
35428: LD_ADDR_OWVAR 28
35432: PUSH
35433: LD_INT 17
35435: ST_TO_ADDR
// hc_gallery :=  ;
35436: LD_ADDR_OWVAR 33
35440: PUSH
35441: LD_STRING 
35443: ST_TO_ADDR
// hc_name :=  ;
35444: LD_ADDR_OWVAR 26
35448: PUSH
35449: LD_STRING 
35451: ST_TO_ADDR
// un := CreateHuman ;
35452: LD_ADDR_VAR 0 2
35456: PUSH
35457: CALL_OW 44
35461: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
35462: LD_VAR 0 2
35466: PPUSH
35467: LD_INT 1
35469: PPUSH
35470: CALL_OW 51
// tmp := tmp ^ un ;
35474: LD_ADDR_VAR 0 3
35478: PUSH
35479: LD_VAR 0 3
35483: PUSH
35484: LD_VAR 0 2
35488: ADD
35489: ST_TO_ADDR
// end ;
35490: GO 35386
35492: POP
35493: POP
// repeat wait ( 0 0$1 ) ;
35494: LD_INT 35
35496: PPUSH
35497: CALL_OW 67
// for un in tmp do
35501: LD_ADDR_VAR 0 2
35505: PUSH
35506: LD_VAR 0 3
35510: PUSH
35511: FOR_IN
35512: IFFALSE 35586
// begin if IsDead ( un ) then
35514: LD_VAR 0 2
35518: PPUSH
35519: CALL_OW 301
35523: IFFALSE 35543
// begin tmp := tmp diff un ;
35525: LD_ADDR_VAR 0 3
35529: PUSH
35530: LD_VAR 0 3
35534: PUSH
35535: LD_VAR 0 2
35539: DIFF
35540: ST_TO_ADDR
// continue ;
35541: GO 35511
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
35543: LD_VAR 0 2
35547: PPUSH
35548: LD_INT 3
35550: PUSH
35551: LD_INT 22
35553: PUSH
35554: LD_INT 0
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PPUSH
35565: CALL_OW 69
35569: PPUSH
35570: LD_VAR 0 2
35574: PPUSH
35575: CALL_OW 74
35579: PPUSH
35580: CALL_OW 115
// end ;
35584: GO 35511
35586: POP
35587: POP
// until not tmp ;
35588: LD_VAR 0 3
35592: NOT
35593: IFFALSE 35494
// end ;
35595: PPOPN 3
35597: END
// every 0 0$1 trigger StreamModeActive and sTroll do
35598: LD_EXP 68
35602: PUSH
35603: LD_EXP 93
35607: AND
35608: IFFALSE 35662
35610: GO 35612
35612: DISABLE
// begin ToLua ( displayTroll(); ) ;
35613: LD_STRING displayTroll();
35615: PPUSH
35616: CALL_OW 559
// wait ( 3 3$00 ) ;
35620: LD_INT 6300
35622: PPUSH
35623: CALL_OW 67
// ToLua ( hideTroll(); ) ;
35627: LD_STRING hideTroll();
35629: PPUSH
35630: CALL_OW 559
// wait ( 1 1$00 ) ;
35634: LD_INT 2100
35636: PPUSH
35637: CALL_OW 67
// ToLua ( displayTroll(); ) ;
35641: LD_STRING displayTroll();
35643: PPUSH
35644: CALL_OW 559
// wait ( 1 1$00 ) ;
35648: LD_INT 2100
35650: PPUSH
35651: CALL_OW 67
// ToLua ( hideTroll(); ) ;
35655: LD_STRING hideTroll();
35657: PPUSH
35658: CALL_OW 559
// end ;
35662: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
35663: LD_EXP 68
35667: PUSH
35668: LD_EXP 94
35672: AND
35673: IFFALSE 35736
35675: GO 35677
35677: DISABLE
35678: LD_INT 0
35680: PPUSH
// begin p := 0 ;
35681: LD_ADDR_VAR 0 1
35685: PUSH
35686: LD_INT 0
35688: ST_TO_ADDR
// repeat game_speed := 1 ;
35689: LD_ADDR_OWVAR 65
35693: PUSH
35694: LD_INT 1
35696: ST_TO_ADDR
// wait ( 0 0$1 ) ;
35697: LD_INT 35
35699: PPUSH
35700: CALL_OW 67
// p := p + 1 ;
35704: LD_ADDR_VAR 0 1
35708: PUSH
35709: LD_VAR 0 1
35713: PUSH
35714: LD_INT 1
35716: PLUS
35717: ST_TO_ADDR
// until p >= 60 ;
35718: LD_VAR 0 1
35722: PUSH
35723: LD_INT 60
35725: GREATEREQUAL
35726: IFFALSE 35689
// game_speed := 4 ;
35728: LD_ADDR_OWVAR 65
35732: PUSH
35733: LD_INT 4
35735: ST_TO_ADDR
// end ;
35736: PPOPN 1
35738: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
35739: LD_EXP 68
35743: PUSH
35744: LD_EXP 95
35748: AND
35749: IFFALSE 35895
35751: GO 35753
35753: DISABLE
35754: LD_INT 0
35756: PPUSH
35757: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35758: LD_ADDR_VAR 0 1
35762: PUSH
35763: LD_INT 22
35765: PUSH
35766: LD_OWVAR 2
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 2
35777: PUSH
35778: LD_INT 30
35780: PUSH
35781: LD_INT 0
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 30
35790: PUSH
35791: LD_INT 1
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: LIST
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PPUSH
35807: CALL_OW 69
35811: ST_TO_ADDR
// if not depot then
35812: LD_VAR 0 1
35816: NOT
35817: IFFALSE 35821
// exit ;
35819: GO 35895
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
35821: LD_ADDR_VAR 0 2
35825: PUSH
35826: LD_VAR 0 1
35830: PUSH
35831: LD_INT 1
35833: PPUSH
35834: LD_VAR 0 1
35838: PPUSH
35839: CALL_OW 12
35843: ARRAY
35844: PPUSH
35845: CALL_OW 274
35849: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
35850: LD_VAR 0 2
35854: PPUSH
35855: LD_INT 1
35857: PPUSH
35858: LD_INT 0
35860: PPUSH
35861: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
35865: LD_VAR 0 2
35869: PPUSH
35870: LD_INT 2
35872: PPUSH
35873: LD_INT 0
35875: PPUSH
35876: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
35880: LD_VAR 0 2
35884: PPUSH
35885: LD_INT 3
35887: PPUSH
35888: LD_INT 0
35890: PPUSH
35891: CALL_OW 277
// end ;
35895: PPOPN 2
35897: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
35898: LD_EXP 68
35902: PUSH
35903: LD_EXP 96
35907: AND
35908: IFFALSE 36005
35910: GO 35912
35912: DISABLE
35913: LD_INT 0
35915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35916: LD_ADDR_VAR 0 1
35920: PUSH
35921: LD_INT 22
35923: PUSH
35924: LD_OWVAR 2
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 21
35935: PUSH
35936: LD_INT 1
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 3
35945: PUSH
35946: LD_INT 23
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: LIST
35964: PPUSH
35965: CALL_OW 69
35969: ST_TO_ADDR
// if not tmp then
35970: LD_VAR 0 1
35974: NOT
35975: IFFALSE 35979
// exit ;
35977: GO 36005
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
35979: LD_VAR 0 1
35983: PUSH
35984: LD_INT 1
35986: PPUSH
35987: LD_VAR 0 1
35991: PPUSH
35992: CALL_OW 12
35996: ARRAY
35997: PPUSH
35998: LD_INT 200
36000: PPUSH
36001: CALL_OW 234
// end ;
36005: PPOPN 1
36007: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
36008: LD_EXP 68
36012: PUSH
36013: LD_EXP 97
36017: AND
36018: IFFALSE 36097
36020: GO 36022
36022: DISABLE
36023: LD_INT 0
36025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
36026: LD_ADDR_VAR 0 1
36030: PUSH
36031: LD_INT 22
36033: PUSH
36034: LD_OWVAR 2
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 21
36045: PUSH
36046: LD_INT 2
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PPUSH
36057: CALL_OW 69
36061: ST_TO_ADDR
// if not tmp then
36062: LD_VAR 0 1
36066: NOT
36067: IFFALSE 36071
// exit ;
36069: GO 36097
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
36071: LD_VAR 0 1
36075: PUSH
36076: LD_INT 1
36078: PPUSH
36079: LD_VAR 0 1
36083: PPUSH
36084: CALL_OW 12
36088: ARRAY
36089: PPUSH
36090: LD_INT 60
36092: PPUSH
36093: CALL_OW 234
// end ;
36097: PPOPN 1
36099: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
36100: LD_EXP 68
36104: PUSH
36105: LD_EXP 98
36109: AND
36110: IFFALSE 36209
36112: GO 36114
36114: DISABLE
36115: LD_INT 0
36117: PPUSH
36118: PPUSH
// begin enable ;
36119: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
36120: LD_ADDR_VAR 0 1
36124: PUSH
36125: LD_INT 22
36127: PUSH
36128: LD_OWVAR 2
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 61
36139: PUSH
36140: EMPTY
36141: LIST
36142: PUSH
36143: LD_INT 33
36145: PUSH
36146: LD_INT 2
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: LIST
36157: PPUSH
36158: CALL_OW 69
36162: ST_TO_ADDR
// if not tmp then
36163: LD_VAR 0 1
36167: NOT
36168: IFFALSE 36172
// exit ;
36170: GO 36209
// for i in tmp do
36172: LD_ADDR_VAR 0 2
36176: PUSH
36177: LD_VAR 0 1
36181: PUSH
36182: FOR_IN
36183: IFFALSE 36207
// if IsControledBy ( i ) then
36185: LD_VAR 0 2
36189: PPUSH
36190: CALL_OW 312
36194: IFFALSE 36205
// ComUnlink ( i ) ;
36196: LD_VAR 0 2
36200: PPUSH
36201: CALL_OW 136
36205: GO 36182
36207: POP
36208: POP
// end ;
36209: PPOPN 2
36211: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
36212: LD_EXP 68
36216: PUSH
36217: LD_EXP 99
36221: AND
36222: IFFALSE 36362
36224: GO 36226
36226: DISABLE
36227: LD_INT 0
36229: PPUSH
36230: PPUSH
// begin ToLua ( displayPowell(); ) ;
36231: LD_STRING displayPowell();
36233: PPUSH
36234: CALL_OW 559
// uc_side := 0 ;
36238: LD_ADDR_OWVAR 20
36242: PUSH
36243: LD_INT 0
36245: ST_TO_ADDR
// uc_nation := 2 ;
36246: LD_ADDR_OWVAR 21
36250: PUSH
36251: LD_INT 2
36253: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
36254: LD_ADDR_OWVAR 37
36258: PUSH
36259: LD_INT 14
36261: ST_TO_ADDR
// vc_engine := engine_siberite ;
36262: LD_ADDR_OWVAR 39
36266: PUSH
36267: LD_INT 3
36269: ST_TO_ADDR
// vc_control := control_apeman ;
36270: LD_ADDR_OWVAR 38
36274: PUSH
36275: LD_INT 5
36277: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
36278: LD_ADDR_OWVAR 40
36282: PUSH
36283: LD_INT 29
36285: ST_TO_ADDR
// un := CreateVehicle ;
36286: LD_ADDR_VAR 0 2
36290: PUSH
36291: CALL_OW 45
36295: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36296: LD_VAR 0 2
36300: PPUSH
36301: LD_INT 1
36303: PPUSH
36304: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
36308: LD_INT 35
36310: PPUSH
36311: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36315: LD_VAR 0 2
36319: PPUSH
36320: LD_INT 22
36322: PUSH
36323: LD_OWVAR 2
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PPUSH
36332: CALL_OW 69
36336: PPUSH
36337: LD_VAR 0 2
36341: PPUSH
36342: CALL_OW 74
36346: PPUSH
36347: CALL_OW 115
// until IsDead ( un ) ;
36351: LD_VAR 0 2
36355: PPUSH
36356: CALL_OW 301
36360: IFFALSE 36308
// end ;
36362: PPOPN 2
36364: END
// every 0 0$1 trigger StreamModeActive and sStu do
36365: LD_EXP 68
36369: PUSH
36370: LD_EXP 107
36374: AND
36375: IFFALSE 36391
36377: GO 36379
36379: DISABLE
// begin ToLua ( displayStucuk(); ) ;
36380: LD_STRING displayStucuk();
36382: PPUSH
36383: CALL_OW 559
// ResetFog ;
36387: CALL_OW 335
// end ;
36391: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
36392: LD_EXP 68
36396: PUSH
36397: LD_EXP 100
36401: AND
36402: IFFALSE 36543
36404: GO 36406
36406: DISABLE
36407: LD_INT 0
36409: PPUSH
36410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36411: LD_ADDR_VAR 0 2
36415: PUSH
36416: LD_INT 22
36418: PUSH
36419: LD_OWVAR 2
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 21
36430: PUSH
36431: LD_INT 1
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PPUSH
36442: CALL_OW 69
36446: ST_TO_ADDR
// if not tmp then
36447: LD_VAR 0 2
36451: NOT
36452: IFFALSE 36456
// exit ;
36454: GO 36543
// un := tmp [ rand ( 1 , tmp ) ] ;
36456: LD_ADDR_VAR 0 1
36460: PUSH
36461: LD_VAR 0 2
36465: PUSH
36466: LD_INT 1
36468: PPUSH
36469: LD_VAR 0 2
36473: PPUSH
36474: CALL_OW 12
36478: ARRAY
36479: ST_TO_ADDR
// SetSide ( un , 0 ) ;
36480: LD_VAR 0 1
36484: PPUSH
36485: LD_INT 0
36487: PPUSH
36488: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
36492: LD_VAR 0 1
36496: PPUSH
36497: LD_OWVAR 3
36501: PUSH
36502: LD_VAR 0 1
36506: DIFF
36507: PPUSH
36508: LD_VAR 0 1
36512: PPUSH
36513: CALL_OW 74
36517: PPUSH
36518: CALL_OW 115
// wait ( 0 0$20 ) ;
36522: LD_INT 700
36524: PPUSH
36525: CALL_OW 67
// SetSide ( un , your_side ) ;
36529: LD_VAR 0 1
36533: PPUSH
36534: LD_OWVAR 2
36538: PPUSH
36539: CALL_OW 235
// end ;
36543: PPOPN 2
36545: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
36546: LD_EXP 68
36550: PUSH
36551: LD_EXP 101
36555: AND
36556: IFFALSE 36662
36558: GO 36560
36560: DISABLE
36561: LD_INT 0
36563: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36564: LD_ADDR_VAR 0 1
36568: PUSH
36569: LD_INT 22
36571: PUSH
36572: LD_OWVAR 2
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 2
36583: PUSH
36584: LD_INT 30
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 30
36596: PUSH
36597: LD_INT 1
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: LIST
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PPUSH
36613: CALL_OW 69
36617: ST_TO_ADDR
// if not depot then
36618: LD_VAR 0 1
36622: NOT
36623: IFFALSE 36627
// exit ;
36625: GO 36662
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
36627: LD_VAR 0 1
36631: PUSH
36632: LD_INT 1
36634: ARRAY
36635: PPUSH
36636: CALL_OW 250
36640: PPUSH
36641: LD_VAR 0 1
36645: PUSH
36646: LD_INT 1
36648: ARRAY
36649: PPUSH
36650: CALL_OW 251
36654: PPUSH
36655: LD_INT 70
36657: PPUSH
36658: CALL_OW 495
// end ;
36662: PPOPN 1
36664: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
36665: LD_EXP 68
36669: PUSH
36670: LD_EXP 102
36674: AND
36675: IFFALSE 36886
36677: GO 36679
36679: DISABLE
36680: LD_INT 0
36682: PPUSH
36683: PPUSH
36684: PPUSH
36685: PPUSH
36686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36687: LD_ADDR_VAR 0 5
36691: PUSH
36692: LD_INT 22
36694: PUSH
36695: LD_OWVAR 2
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 21
36706: PUSH
36707: LD_INT 1
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PPUSH
36718: CALL_OW 69
36722: ST_TO_ADDR
// if not tmp then
36723: LD_VAR 0 5
36727: NOT
36728: IFFALSE 36732
// exit ;
36730: GO 36886
// for i in tmp do
36732: LD_ADDR_VAR 0 1
36736: PUSH
36737: LD_VAR 0 5
36741: PUSH
36742: FOR_IN
36743: IFFALSE 36884
// begin d := rand ( 0 , 5 ) ;
36745: LD_ADDR_VAR 0 4
36749: PUSH
36750: LD_INT 0
36752: PPUSH
36753: LD_INT 5
36755: PPUSH
36756: CALL_OW 12
36760: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
36761: LD_ADDR_VAR 0 2
36765: PUSH
36766: LD_VAR 0 1
36770: PPUSH
36771: CALL_OW 250
36775: PPUSH
36776: LD_VAR 0 4
36780: PPUSH
36781: LD_INT 3
36783: PPUSH
36784: LD_INT 12
36786: PPUSH
36787: CALL_OW 12
36791: PPUSH
36792: CALL_OW 272
36796: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
36797: LD_ADDR_VAR 0 3
36801: PUSH
36802: LD_VAR 0 1
36806: PPUSH
36807: CALL_OW 251
36811: PPUSH
36812: LD_VAR 0 4
36816: PPUSH
36817: LD_INT 3
36819: PPUSH
36820: LD_INT 12
36822: PPUSH
36823: CALL_OW 12
36827: PPUSH
36828: CALL_OW 273
36832: ST_TO_ADDR
// if ValidHex ( x , y ) then
36833: LD_VAR 0 2
36837: PPUSH
36838: LD_VAR 0 3
36842: PPUSH
36843: CALL_OW 488
36847: IFFALSE 36882
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
36849: LD_VAR 0 1
36853: PPUSH
36854: LD_VAR 0 2
36858: PPUSH
36859: LD_VAR 0 3
36863: PPUSH
36864: LD_INT 3
36866: PPUSH
36867: LD_INT 6
36869: PPUSH
36870: CALL_OW 12
36874: PPUSH
36875: LD_INT 1
36877: PPUSH
36878: CALL_OW 483
// end ;
36882: GO 36742
36884: POP
36885: POP
// end ;
36886: PPOPN 5
36888: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
36889: LD_EXP 68
36893: PUSH
36894: LD_EXP 103
36898: AND
36899: IFFALSE 36993
36901: GO 36903
36903: DISABLE
36904: LD_INT 0
36906: PPUSH
36907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
36908: LD_ADDR_VAR 0 2
36912: PUSH
36913: LD_INT 22
36915: PUSH
36916: LD_OWVAR 2
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 32
36927: PUSH
36928: LD_INT 1
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 21
36937: PUSH
36938: LD_INT 2
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: LIST
36949: PPUSH
36950: CALL_OW 69
36954: ST_TO_ADDR
// if not tmp then
36955: LD_VAR 0 2
36959: NOT
36960: IFFALSE 36964
// exit ;
36962: GO 36993
// for i in tmp do
36964: LD_ADDR_VAR 0 1
36968: PUSH
36969: LD_VAR 0 2
36973: PUSH
36974: FOR_IN
36975: IFFALSE 36991
// SetFuel ( i , 0 ) ;
36977: LD_VAR 0 1
36981: PPUSH
36982: LD_INT 0
36984: PPUSH
36985: CALL_OW 240
36989: GO 36974
36991: POP
36992: POP
// end ;
36993: PPOPN 2
36995: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
36996: LD_EXP 68
37000: PUSH
37001: LD_EXP 104
37005: AND
37006: IFFALSE 37072
37008: GO 37010
37010: DISABLE
37011: LD_INT 0
37013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
37014: LD_ADDR_VAR 0 1
37018: PUSH
37019: LD_INT 22
37021: PUSH
37022: LD_OWVAR 2
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 30
37033: PUSH
37034: LD_INT 29
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PPUSH
37045: CALL_OW 69
37049: ST_TO_ADDR
// if not tmp then
37050: LD_VAR 0 1
37054: NOT
37055: IFFALSE 37059
// exit ;
37057: GO 37072
// DestroyUnit ( tmp [ 1 ] ) ;
37059: LD_VAR 0 1
37063: PUSH
37064: LD_INT 1
37066: ARRAY
37067: PPUSH
37068: CALL_OW 65
// end ;
37072: PPOPN 1
37074: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
37075: LD_EXP 68
37079: PUSH
37080: LD_EXP 106
37084: AND
37085: IFFALSE 37214
37087: GO 37089
37089: DISABLE
37090: LD_INT 0
37092: PPUSH
// begin uc_side := 0 ;
37093: LD_ADDR_OWVAR 20
37097: PUSH
37098: LD_INT 0
37100: ST_TO_ADDR
// uc_nation := nation_arabian ;
37101: LD_ADDR_OWVAR 21
37105: PUSH
37106: LD_INT 2
37108: ST_TO_ADDR
// hc_gallery :=  ;
37109: LD_ADDR_OWVAR 33
37113: PUSH
37114: LD_STRING 
37116: ST_TO_ADDR
// hc_name :=  ;
37117: LD_ADDR_OWVAR 26
37121: PUSH
37122: LD_STRING 
37124: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
37125: LD_INT 1
37127: PPUSH
37128: LD_INT 11
37130: PPUSH
37131: LD_INT 10
37133: PPUSH
37134: CALL_OW 380
// un := CreateHuman ;
37138: LD_ADDR_VAR 0 1
37142: PUSH
37143: CALL_OW 44
37147: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37148: LD_VAR 0 1
37152: PPUSH
37153: LD_INT 1
37155: PPUSH
37156: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
37160: LD_INT 35
37162: PPUSH
37163: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
37167: LD_VAR 0 1
37171: PPUSH
37172: LD_INT 22
37174: PUSH
37175: LD_OWVAR 2
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PPUSH
37184: CALL_OW 69
37188: PPUSH
37189: LD_VAR 0 1
37193: PPUSH
37194: CALL_OW 74
37198: PPUSH
37199: CALL_OW 115
// until IsDead ( un ) ;
37203: LD_VAR 0 1
37207: PPUSH
37208: CALL_OW 301
37212: IFFALSE 37160
// end ;
37214: PPOPN 1
37216: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
37217: LD_EXP 68
37221: PUSH
37222: LD_EXP 108
37226: AND
37227: IFFALSE 37239
37229: GO 37231
37231: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
37232: LD_STRING earthquake(getX(game), 0, 32)
37234: PPUSH
37235: CALL_OW 559
37239: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
37240: LD_EXP 68
37244: PUSH
37245: LD_EXP 109
37249: AND
37250: IFFALSE 37341
37252: GO 37254
37254: DISABLE
37255: LD_INT 0
37257: PPUSH
// begin enable ;
37258: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
37259: LD_ADDR_VAR 0 1
37263: PUSH
37264: LD_INT 22
37266: PUSH
37267: LD_OWVAR 2
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 21
37278: PUSH
37279: LD_INT 2
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 33
37288: PUSH
37289: LD_INT 3
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: PPUSH
37301: CALL_OW 69
37305: ST_TO_ADDR
// if not tmp then
37306: LD_VAR 0 1
37310: NOT
37311: IFFALSE 37315
// exit ;
37313: GO 37341
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37315: LD_VAR 0 1
37319: PUSH
37320: LD_INT 1
37322: PPUSH
37323: LD_VAR 0 1
37327: PPUSH
37328: CALL_OW 12
37332: ARRAY
37333: PPUSH
37334: LD_INT 1
37336: PPUSH
37337: CALL_OW 234
// end ;
37341: PPOPN 1
37343: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
37344: LD_EXP 68
37348: PUSH
37349: LD_EXP 110
37353: AND
37354: IFFALSE 37495
37356: GO 37358
37358: DISABLE
37359: LD_INT 0
37361: PPUSH
37362: PPUSH
37363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37364: LD_ADDR_VAR 0 3
37368: PUSH
37369: LD_INT 22
37371: PUSH
37372: LD_OWVAR 2
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 25
37383: PUSH
37384: LD_INT 1
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PPUSH
37395: CALL_OW 69
37399: ST_TO_ADDR
// if not tmp then
37400: LD_VAR 0 3
37404: NOT
37405: IFFALSE 37409
// exit ;
37407: GO 37495
// un := tmp [ rand ( 1 , tmp ) ] ;
37409: LD_ADDR_VAR 0 2
37413: PUSH
37414: LD_VAR 0 3
37418: PUSH
37419: LD_INT 1
37421: PPUSH
37422: LD_VAR 0 3
37426: PPUSH
37427: CALL_OW 12
37431: ARRAY
37432: ST_TO_ADDR
// if Crawls ( un ) then
37433: LD_VAR 0 2
37437: PPUSH
37438: CALL_OW 318
37442: IFFALSE 37453
// ComWalk ( un ) ;
37444: LD_VAR 0 2
37448: PPUSH
37449: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
37453: LD_VAR 0 2
37457: PPUSH
37458: LD_INT 9
37460: PPUSH
37461: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
37465: LD_INT 28
37467: PPUSH
37468: LD_OWVAR 2
37472: PPUSH
37473: LD_INT 2
37475: PPUSH
37476: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
37480: LD_INT 29
37482: PPUSH
37483: LD_OWVAR 2
37487: PPUSH
37488: LD_INT 2
37490: PPUSH
37491: CALL_OW 322
// end ;
37495: PPOPN 3
37497: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
37498: LD_EXP 68
37502: PUSH
37503: LD_EXP 111
37507: AND
37508: IFFALSE 37619
37510: GO 37512
37512: DISABLE
37513: LD_INT 0
37515: PPUSH
37516: PPUSH
37517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37518: LD_ADDR_VAR 0 3
37522: PUSH
37523: LD_INT 22
37525: PUSH
37526: LD_OWVAR 2
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 25
37537: PUSH
37538: LD_INT 1
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PPUSH
37549: CALL_OW 69
37553: ST_TO_ADDR
// if not tmp then
37554: LD_VAR 0 3
37558: NOT
37559: IFFALSE 37563
// exit ;
37561: GO 37619
// un := tmp [ rand ( 1 , tmp ) ] ;
37563: LD_ADDR_VAR 0 2
37567: PUSH
37568: LD_VAR 0 3
37572: PUSH
37573: LD_INT 1
37575: PPUSH
37576: LD_VAR 0 3
37580: PPUSH
37581: CALL_OW 12
37585: ARRAY
37586: ST_TO_ADDR
// if Crawls ( un ) then
37587: LD_VAR 0 2
37591: PPUSH
37592: CALL_OW 318
37596: IFFALSE 37607
// ComWalk ( un ) ;
37598: LD_VAR 0 2
37602: PPUSH
37603: CALL_OW 138
// SetClass ( un , class_mortar ) ;
37607: LD_VAR 0 2
37611: PPUSH
37612: LD_INT 8
37614: PPUSH
37615: CALL_OW 336
// end ;
37619: PPOPN 3
37621: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
37622: LD_EXP 68
37626: PUSH
37627: LD_EXP 112
37631: AND
37632: IFFALSE 37776
37634: GO 37636
37636: DISABLE
37637: LD_INT 0
37639: PPUSH
37640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
37641: LD_ADDR_VAR 0 2
37645: PUSH
37646: LD_INT 22
37648: PUSH
37649: LD_OWVAR 2
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 21
37660: PUSH
37661: LD_INT 2
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 2
37670: PUSH
37671: LD_INT 34
37673: PUSH
37674: LD_INT 12
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 34
37683: PUSH
37684: LD_INT 51
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 34
37693: PUSH
37694: LD_INT 32
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: LIST
37711: PPUSH
37712: CALL_OW 69
37716: ST_TO_ADDR
// if not tmp then
37717: LD_VAR 0 2
37721: NOT
37722: IFFALSE 37726
// exit ;
37724: GO 37776
// for i in tmp do
37726: LD_ADDR_VAR 0 1
37730: PUSH
37731: LD_VAR 0 2
37735: PUSH
37736: FOR_IN
37737: IFFALSE 37774
// if GetCargo ( i , mat_artifact ) = 0 then
37739: LD_VAR 0 1
37743: PPUSH
37744: LD_INT 4
37746: PPUSH
37747: CALL_OW 289
37751: PUSH
37752: LD_INT 0
37754: EQUAL
37755: IFFALSE 37772
// SetCargo ( i , mat_siberit , 100 ) ;
37757: LD_VAR 0 1
37761: PPUSH
37762: LD_INT 3
37764: PPUSH
37765: LD_INT 100
37767: PPUSH
37768: CALL_OW 290
37772: GO 37736
37774: POP
37775: POP
// end ;
37776: PPOPN 2
37778: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
37779: LD_EXP 68
37783: PUSH
37784: LD_EXP 113
37788: AND
37789: IFFALSE 37972
37791: GO 37793
37793: DISABLE
37794: LD_INT 0
37796: PPUSH
37797: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
37798: LD_ADDR_VAR 0 2
37802: PUSH
37803: LD_INT 22
37805: PUSH
37806: LD_OWVAR 2
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PPUSH
37815: CALL_OW 69
37819: ST_TO_ADDR
// if not tmp then
37820: LD_VAR 0 2
37824: NOT
37825: IFFALSE 37829
// exit ;
37827: GO 37972
// for i := 1 to 2 do
37829: LD_ADDR_VAR 0 1
37833: PUSH
37834: DOUBLE
37835: LD_INT 1
37837: DEC
37838: ST_TO_ADDR
37839: LD_INT 2
37841: PUSH
37842: FOR_TO
37843: IFFALSE 37970
// begin uc_side := your_side ;
37845: LD_ADDR_OWVAR 20
37849: PUSH
37850: LD_OWVAR 2
37854: ST_TO_ADDR
// uc_nation := nation_american ;
37855: LD_ADDR_OWVAR 21
37859: PUSH
37860: LD_INT 1
37862: ST_TO_ADDR
// vc_chassis := us_morphling ;
37863: LD_ADDR_OWVAR 37
37867: PUSH
37868: LD_INT 5
37870: ST_TO_ADDR
// vc_engine := engine_siberite ;
37871: LD_ADDR_OWVAR 39
37875: PUSH
37876: LD_INT 3
37878: ST_TO_ADDR
// vc_control := control_computer ;
37879: LD_ADDR_OWVAR 38
37883: PUSH
37884: LD_INT 3
37886: ST_TO_ADDR
// vc_weapon := us_double_laser ;
37887: LD_ADDR_OWVAR 40
37891: PUSH
37892: LD_INT 10
37894: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
37895: LD_VAR 0 2
37899: PUSH
37900: LD_INT 1
37902: ARRAY
37903: PPUSH
37904: CALL_OW 310
37908: NOT
37909: IFFALSE 37956
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
37911: CALL_OW 45
37915: PPUSH
37916: LD_VAR 0 2
37920: PUSH
37921: LD_INT 1
37923: ARRAY
37924: PPUSH
37925: CALL_OW 250
37929: PPUSH
37930: LD_VAR 0 2
37934: PUSH
37935: LD_INT 1
37937: ARRAY
37938: PPUSH
37939: CALL_OW 251
37943: PPUSH
37944: LD_INT 12
37946: PPUSH
37947: LD_INT 1
37949: PPUSH
37950: CALL_OW 50
37954: GO 37968
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
37956: CALL_OW 45
37960: PPUSH
37961: LD_INT 1
37963: PPUSH
37964: CALL_OW 51
// end ;
37968: GO 37842
37970: POP
37971: POP
// end ;
37972: PPOPN 2
37974: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
37975: LD_EXP 68
37979: PUSH
37980: LD_EXP 114
37984: AND
37985: IFFALSE 38207
37987: GO 37989
37989: DISABLE
37990: LD_INT 0
37992: PPUSH
37993: PPUSH
37994: PPUSH
37995: PPUSH
37996: PPUSH
37997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37998: LD_ADDR_VAR 0 6
38002: PUSH
38003: LD_INT 22
38005: PUSH
38006: LD_OWVAR 2
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 21
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 3
38027: PUSH
38028: LD_INT 23
38030: PUSH
38031: LD_INT 0
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: LIST
38046: PPUSH
38047: CALL_OW 69
38051: ST_TO_ADDR
// if not tmp then
38052: LD_VAR 0 6
38056: NOT
38057: IFFALSE 38061
// exit ;
38059: GO 38207
// s1 := rand ( 1 , 4 ) ;
38061: LD_ADDR_VAR 0 2
38065: PUSH
38066: LD_INT 1
38068: PPUSH
38069: LD_INT 4
38071: PPUSH
38072: CALL_OW 12
38076: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
38077: LD_ADDR_VAR 0 4
38081: PUSH
38082: LD_VAR 0 6
38086: PUSH
38087: LD_INT 1
38089: ARRAY
38090: PPUSH
38091: LD_VAR 0 2
38095: PPUSH
38096: CALL_OW 259
38100: ST_TO_ADDR
// if s1 = 1 then
38101: LD_VAR 0 2
38105: PUSH
38106: LD_INT 1
38108: EQUAL
38109: IFFALSE 38129
// s2 := rand ( 2 , 4 ) else
38111: LD_ADDR_VAR 0 3
38115: PUSH
38116: LD_INT 2
38118: PPUSH
38119: LD_INT 4
38121: PPUSH
38122: CALL_OW 12
38126: ST_TO_ADDR
38127: GO 38137
// s2 := 1 ;
38129: LD_ADDR_VAR 0 3
38133: PUSH
38134: LD_INT 1
38136: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
38137: LD_ADDR_VAR 0 5
38141: PUSH
38142: LD_VAR 0 6
38146: PUSH
38147: LD_INT 1
38149: ARRAY
38150: PPUSH
38151: LD_VAR 0 3
38155: PPUSH
38156: CALL_OW 259
38160: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
38161: LD_VAR 0 6
38165: PUSH
38166: LD_INT 1
38168: ARRAY
38169: PPUSH
38170: LD_VAR 0 2
38174: PPUSH
38175: LD_VAR 0 5
38179: PPUSH
38180: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
38184: LD_VAR 0 6
38188: PUSH
38189: LD_INT 1
38191: ARRAY
38192: PPUSH
38193: LD_VAR 0 3
38197: PPUSH
38198: LD_VAR 0 4
38202: PPUSH
38203: CALL_OW 237
// end ;
38207: PPOPN 6
38209: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
38210: LD_EXP 68
38214: PUSH
38215: LD_EXP 115
38219: AND
38220: IFFALSE 38299
38222: GO 38224
38224: DISABLE
38225: LD_INT 0
38227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
38228: LD_ADDR_VAR 0 1
38232: PUSH
38233: LD_INT 22
38235: PUSH
38236: LD_OWVAR 2
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 30
38247: PUSH
38248: LD_INT 3
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PPUSH
38259: CALL_OW 69
38263: ST_TO_ADDR
// if not tmp then
38264: LD_VAR 0 1
38268: NOT
38269: IFFALSE 38273
// exit ;
38271: GO 38299
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
38273: LD_VAR 0 1
38277: PUSH
38278: LD_INT 1
38280: PPUSH
38281: LD_VAR 0 1
38285: PPUSH
38286: CALL_OW 12
38290: ARRAY
38291: PPUSH
38292: LD_INT 1
38294: PPUSH
38295: CALL_OW 234
// end ;
38299: PPOPN 1
38301: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
38302: LD_EXP 68
38306: PUSH
38307: LD_EXP 116
38311: AND
38312: IFFALSE 38424
38314: GO 38316
38316: DISABLE
38317: LD_INT 0
38319: PPUSH
38320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
38321: LD_ADDR_VAR 0 2
38325: PUSH
38326: LD_INT 22
38328: PUSH
38329: LD_OWVAR 2
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 2
38340: PUSH
38341: LD_INT 30
38343: PUSH
38344: LD_INT 27
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 30
38353: PUSH
38354: LD_INT 26
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 30
38363: PUSH
38364: LD_INT 28
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PPUSH
38381: CALL_OW 69
38385: ST_TO_ADDR
// if not tmp then
38386: LD_VAR 0 2
38390: NOT
38391: IFFALSE 38395
// exit ;
38393: GO 38424
// for i in tmp do
38395: LD_ADDR_VAR 0 1
38399: PUSH
38400: LD_VAR 0 2
38404: PUSH
38405: FOR_IN
38406: IFFALSE 38422
// SetLives ( i , 1 ) ;
38408: LD_VAR 0 1
38412: PPUSH
38413: LD_INT 1
38415: PPUSH
38416: CALL_OW 234
38420: GO 38405
38422: POP
38423: POP
// end ;
38424: PPOPN 2
38426: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
38427: LD_EXP 68
38431: PUSH
38432: LD_EXP 117
38436: AND
38437: IFFALSE 38724
38439: GO 38441
38441: DISABLE
38442: LD_INT 0
38444: PPUSH
38445: PPUSH
38446: PPUSH
// begin i := rand ( 1 , 7 ) ;
38447: LD_ADDR_VAR 0 1
38451: PUSH
38452: LD_INT 1
38454: PPUSH
38455: LD_INT 7
38457: PPUSH
38458: CALL_OW 12
38462: ST_TO_ADDR
// case i of 1 :
38463: LD_VAR 0 1
38467: PUSH
38468: LD_INT 1
38470: DOUBLE
38471: EQUAL
38472: IFTRUE 38476
38474: GO 38486
38476: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
38477: LD_STRING earthquake(getX(game), 0, 32)
38479: PPUSH
38480: CALL_OW 559
38484: GO 38724
38486: LD_INT 2
38488: DOUBLE
38489: EQUAL
38490: IFTRUE 38494
38492: GO 38508
38494: POP
// begin ToLua ( displayStucuk(); ) ;
38495: LD_STRING displayStucuk();
38497: PPUSH
38498: CALL_OW 559
// ResetFog ;
38502: CALL_OW 335
// end ; 3 :
38506: GO 38724
38508: LD_INT 3
38510: DOUBLE
38511: EQUAL
38512: IFTRUE 38516
38514: GO 38620
38516: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38517: LD_ADDR_VAR 0 2
38521: PUSH
38522: LD_INT 22
38524: PUSH
38525: LD_OWVAR 2
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 25
38536: PUSH
38537: LD_INT 1
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PPUSH
38548: CALL_OW 69
38552: ST_TO_ADDR
// if not tmp then
38553: LD_VAR 0 2
38557: NOT
38558: IFFALSE 38562
// exit ;
38560: GO 38724
// un := tmp [ rand ( 1 , tmp ) ] ;
38562: LD_ADDR_VAR 0 3
38566: PUSH
38567: LD_VAR 0 2
38571: PUSH
38572: LD_INT 1
38574: PPUSH
38575: LD_VAR 0 2
38579: PPUSH
38580: CALL_OW 12
38584: ARRAY
38585: ST_TO_ADDR
// if Crawls ( un ) then
38586: LD_VAR 0 3
38590: PPUSH
38591: CALL_OW 318
38595: IFFALSE 38606
// ComWalk ( un ) ;
38597: LD_VAR 0 3
38601: PPUSH
38602: CALL_OW 138
// SetClass ( un , class_mortar ) ;
38606: LD_VAR 0 3
38610: PPUSH
38611: LD_INT 8
38613: PPUSH
38614: CALL_OW 336
// end ; 4 :
38618: GO 38724
38620: LD_INT 4
38622: DOUBLE
38623: EQUAL
38624: IFTRUE 38628
38626: GO 38702
38628: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
38629: LD_ADDR_VAR 0 2
38633: PUSH
38634: LD_INT 22
38636: PUSH
38637: LD_OWVAR 2
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 30
38648: PUSH
38649: LD_INT 29
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PPUSH
38660: CALL_OW 69
38664: ST_TO_ADDR
// if not tmp then
38665: LD_VAR 0 2
38669: NOT
38670: IFFALSE 38674
// exit ;
38672: GO 38724
// CenterNowOnUnits ( tmp [ 1 ] ) ;
38674: LD_VAR 0 2
38678: PUSH
38679: LD_INT 1
38681: ARRAY
38682: PPUSH
38683: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
38687: LD_VAR 0 2
38691: PUSH
38692: LD_INT 1
38694: ARRAY
38695: PPUSH
38696: CALL_OW 65
// end ; 5 .. 7 :
38700: GO 38724
38702: LD_INT 5
38704: DOUBLE
38705: GREATEREQUAL
38706: IFFALSE 38714
38708: LD_INT 7
38710: DOUBLE
38711: LESSEQUAL
38712: IFTRUE 38716
38714: GO 38723
38716: POP
// StreamSibBomb ; end ;
38717: CALL 34961 0 0
38721: GO 38724
38723: POP
// end ;
38724: PPOPN 3
38726: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
38727: LD_EXP 68
38731: PUSH
38732: LD_EXP 118
38736: AND
38737: IFFALSE 38893
38739: GO 38741
38741: DISABLE
38742: LD_INT 0
38744: PPUSH
38745: PPUSH
38746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
38747: LD_ADDR_VAR 0 2
38751: PUSH
38752: LD_INT 81
38754: PUSH
38755: LD_OWVAR 2
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 2
38766: PUSH
38767: LD_INT 21
38769: PUSH
38770: LD_INT 1
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 21
38779: PUSH
38780: LD_INT 2
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: LIST
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PPUSH
38796: CALL_OW 69
38800: ST_TO_ADDR
// if not tmp then
38801: LD_VAR 0 2
38805: NOT
38806: IFFALSE 38810
// exit ;
38808: GO 38893
// p := 0 ;
38810: LD_ADDR_VAR 0 3
38814: PUSH
38815: LD_INT 0
38817: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38818: LD_INT 35
38820: PPUSH
38821: CALL_OW 67
// p := p + 1 ;
38825: LD_ADDR_VAR 0 3
38829: PUSH
38830: LD_VAR 0 3
38834: PUSH
38835: LD_INT 1
38837: PLUS
38838: ST_TO_ADDR
// for i in tmp do
38839: LD_ADDR_VAR 0 1
38843: PUSH
38844: LD_VAR 0 2
38848: PUSH
38849: FOR_IN
38850: IFFALSE 38881
// if GetLives ( i ) < 1000 then
38852: LD_VAR 0 1
38856: PPUSH
38857: CALL_OW 256
38861: PUSH
38862: LD_INT 1000
38864: LESS
38865: IFFALSE 38879
// SetLives ( i , 1000 ) ;
38867: LD_VAR 0 1
38871: PPUSH
38872: LD_INT 1000
38874: PPUSH
38875: CALL_OW 234
38879: GO 38849
38881: POP
38882: POP
// until p > 20 ;
38883: LD_VAR 0 3
38887: PUSH
38888: LD_INT 20
38890: GREATER
38891: IFFALSE 38818
// end ;
38893: PPOPN 3
38895: END
// every 0 0$1 trigger StreamModeActive and sTime do
38896: LD_EXP 68
38900: PUSH
38901: LD_EXP 119
38905: AND
38906: IFFALSE 38941
38908: GO 38910
38910: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
38911: LD_INT 28
38913: PPUSH
38914: LD_OWVAR 2
38918: PPUSH
38919: LD_INT 2
38921: PPUSH
38922: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
38926: LD_INT 30
38928: PPUSH
38929: LD_OWVAR 2
38933: PPUSH
38934: LD_INT 2
38936: PPUSH
38937: CALL_OW 322
// end ;
38941: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
38942: LD_EXP 68
38946: PUSH
38947: LD_EXP 120
38951: AND
38952: IFFALSE 39073
38954: GO 38956
38956: DISABLE
38957: LD_INT 0
38959: PPUSH
38960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38961: LD_ADDR_VAR 0 2
38965: PUSH
38966: LD_INT 22
38968: PUSH
38969: LD_OWVAR 2
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 21
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 3
38990: PUSH
38991: LD_INT 23
38993: PUSH
38994: LD_INT 0
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: LIST
39009: PPUSH
39010: CALL_OW 69
39014: ST_TO_ADDR
// if not tmp then
39015: LD_VAR 0 2
39019: NOT
39020: IFFALSE 39024
// exit ;
39022: GO 39073
// for i in tmp do
39024: LD_ADDR_VAR 0 1
39028: PUSH
39029: LD_VAR 0 2
39033: PUSH
39034: FOR_IN
39035: IFFALSE 39071
// begin if Crawls ( i ) then
39037: LD_VAR 0 1
39041: PPUSH
39042: CALL_OW 318
39046: IFFALSE 39057
// ComWalk ( i ) ;
39048: LD_VAR 0 1
39052: PPUSH
39053: CALL_OW 138
// SetClass ( i , 2 ) ;
39057: LD_VAR 0 1
39061: PPUSH
39062: LD_INT 2
39064: PPUSH
39065: CALL_OW 336
// end ;
39069: GO 39034
39071: POP
39072: POP
// end ;
39073: PPOPN 2
39075: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
39076: LD_EXP 68
39080: PUSH
39081: LD_EXP 121
39085: AND
39086: IFFALSE 39374
39088: GO 39090
39090: DISABLE
39091: LD_INT 0
39093: PPUSH
39094: PPUSH
39095: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
39096: LD_OWVAR 2
39100: PPUSH
39101: LD_INT 9
39103: PPUSH
39104: LD_INT 1
39106: PPUSH
39107: LD_INT 1
39109: PPUSH
39110: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
39114: LD_INT 9
39116: PPUSH
39117: LD_OWVAR 2
39121: PPUSH
39122: CALL_OW 343
// uc_side := 9 ;
39126: LD_ADDR_OWVAR 20
39130: PUSH
39131: LD_INT 9
39133: ST_TO_ADDR
// uc_nation := 2 ;
39134: LD_ADDR_OWVAR 21
39138: PUSH
39139: LD_INT 2
39141: ST_TO_ADDR
// hc_name := Dark Warrior ;
39142: LD_ADDR_OWVAR 26
39146: PUSH
39147: LD_STRING Dark Warrior
39149: ST_TO_ADDR
// hc_gallery :=  ;
39150: LD_ADDR_OWVAR 33
39154: PUSH
39155: LD_STRING 
39157: ST_TO_ADDR
// hc_noskilllimit := true ;
39158: LD_ADDR_OWVAR 76
39162: PUSH
39163: LD_INT 1
39165: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
39166: LD_ADDR_OWVAR 31
39170: PUSH
39171: LD_INT 30
39173: PUSH
39174: LD_INT 30
39176: PUSH
39177: LD_INT 30
39179: PUSH
39180: LD_INT 30
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: ST_TO_ADDR
// un := CreateHuman ;
39189: LD_ADDR_VAR 0 3
39193: PUSH
39194: CALL_OW 44
39198: ST_TO_ADDR
// hc_noskilllimit := false ;
39199: LD_ADDR_OWVAR 76
39203: PUSH
39204: LD_INT 0
39206: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39207: LD_VAR 0 3
39211: PPUSH
39212: LD_INT 1
39214: PPUSH
39215: CALL_OW 51
// ToLua ( playRanger() ) ;
39219: LD_STRING playRanger()
39221: PPUSH
39222: CALL_OW 559
// p := 0 ;
39226: LD_ADDR_VAR 0 2
39230: PUSH
39231: LD_INT 0
39233: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
39234: LD_INT 35
39236: PPUSH
39237: CALL_OW 67
// p := p + 1 ;
39241: LD_ADDR_VAR 0 2
39245: PUSH
39246: LD_VAR 0 2
39250: PUSH
39251: LD_INT 1
39253: PLUS
39254: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
39255: LD_VAR 0 3
39259: PPUSH
39260: CALL_OW 256
39264: PUSH
39265: LD_INT 1000
39267: LESS
39268: IFFALSE 39282
// SetLives ( un , 1000 ) ;
39270: LD_VAR 0 3
39274: PPUSH
39275: LD_INT 1000
39277: PPUSH
39278: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
39282: LD_VAR 0 3
39286: PPUSH
39287: LD_INT 81
39289: PUSH
39290: LD_OWVAR 2
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 91
39301: PUSH
39302: LD_VAR 0 3
39306: PUSH
39307: LD_INT 30
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: LIST
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PPUSH
39319: CALL_OW 69
39323: PPUSH
39324: LD_VAR 0 3
39328: PPUSH
39329: CALL_OW 74
39333: PPUSH
39334: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
39338: LD_VAR 0 2
39342: PUSH
39343: LD_INT 80
39345: GREATER
39346: PUSH
39347: LD_VAR 0 3
39351: PPUSH
39352: CALL_OW 301
39356: OR
39357: IFFALSE 39234
// if un then
39359: LD_VAR 0 3
39363: IFFALSE 39374
// RemoveUnit ( un ) ;
39365: LD_VAR 0 3
39369: PPUSH
39370: CALL_OW 64
// end ;
39374: PPOPN 3
39376: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
39377: LD_EXP 122
39381: IFFALSE 39497
39383: GO 39385
39385: DISABLE
39386: LD_INT 0
39388: PPUSH
39389: PPUSH
39390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
39391: LD_ADDR_VAR 0 2
39395: PUSH
39396: LD_INT 81
39398: PUSH
39399: LD_OWVAR 2
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 21
39410: PUSH
39411: LD_INT 1
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PPUSH
39422: CALL_OW 69
39426: ST_TO_ADDR
// ToLua ( playComputer() ) ;
39427: LD_STRING playComputer()
39429: PPUSH
39430: CALL_OW 559
// if not tmp then
39434: LD_VAR 0 2
39438: NOT
39439: IFFALSE 39443
// exit ;
39441: GO 39497
// for i in tmp do
39443: LD_ADDR_VAR 0 1
39447: PUSH
39448: LD_VAR 0 2
39452: PUSH
39453: FOR_IN
39454: IFFALSE 39495
// for j := 1 to 4 do
39456: LD_ADDR_VAR 0 3
39460: PUSH
39461: DOUBLE
39462: LD_INT 1
39464: DEC
39465: ST_TO_ADDR
39466: LD_INT 4
39468: PUSH
39469: FOR_TO
39470: IFFALSE 39491
// SetSkill ( i , j , 10 ) ;
39472: LD_VAR 0 1
39476: PPUSH
39477: LD_VAR 0 3
39481: PPUSH
39482: LD_INT 10
39484: PPUSH
39485: CALL_OW 237
39489: GO 39469
39491: POP
39492: POP
39493: GO 39453
39495: POP
39496: POP
// end ;
39497: PPOPN 3
39499: END
// every 0 0$1 trigger s30 do var i , tmp ;
39500: LD_EXP 123
39504: IFFALSE 39573
39506: GO 39508
39508: DISABLE
39509: LD_INT 0
39511: PPUSH
39512: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39513: LD_ADDR_VAR 0 2
39517: PUSH
39518: LD_INT 22
39520: PUSH
39521: LD_OWVAR 2
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PPUSH
39530: CALL_OW 69
39534: ST_TO_ADDR
// if not tmp then
39535: LD_VAR 0 2
39539: NOT
39540: IFFALSE 39544
// exit ;
39542: GO 39573
// for i in tmp do
39544: LD_ADDR_VAR 0 1
39548: PUSH
39549: LD_VAR 0 2
39553: PUSH
39554: FOR_IN
39555: IFFALSE 39571
// SetLives ( i , 300 ) ;
39557: LD_VAR 0 1
39561: PPUSH
39562: LD_INT 300
39564: PPUSH
39565: CALL_OW 234
39569: GO 39554
39571: POP
39572: POP
// end ;
39573: PPOPN 2
39575: END
// every 0 0$1 trigger s60 do var i , tmp ;
39576: LD_EXP 124
39580: IFFALSE 39649
39582: GO 39584
39584: DISABLE
39585: LD_INT 0
39587: PPUSH
39588: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39589: LD_ADDR_VAR 0 2
39593: PUSH
39594: LD_INT 22
39596: PUSH
39597: LD_OWVAR 2
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PPUSH
39606: CALL_OW 69
39610: ST_TO_ADDR
// if not tmp then
39611: LD_VAR 0 2
39615: NOT
39616: IFFALSE 39620
// exit ;
39618: GO 39649
// for i in tmp do
39620: LD_ADDR_VAR 0 1
39624: PUSH
39625: LD_VAR 0 2
39629: PUSH
39630: FOR_IN
39631: IFFALSE 39647
// SetLives ( i , 600 ) ;
39633: LD_VAR 0 1
39637: PPUSH
39638: LD_INT 600
39640: PPUSH
39641: CALL_OW 234
39645: GO 39630
39647: POP
39648: POP
// end ;
39649: PPOPN 2
39651: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
39652: LD_INT 0
39654: PPUSH
// case cmd of 301 :
39655: LD_VAR 0 1
39659: PUSH
39660: LD_INT 301
39662: DOUBLE
39663: EQUAL
39664: IFTRUE 39668
39666: GO 39700
39668: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
39669: LD_VAR 0 6
39673: PPUSH
39674: LD_VAR 0 7
39678: PPUSH
39679: LD_VAR 0 8
39683: PPUSH
39684: LD_VAR 0 4
39688: PPUSH
39689: LD_VAR 0 5
39693: PPUSH
39694: CALL 40901 0 5
39698: GO 39821
39700: LD_INT 302
39702: DOUBLE
39703: EQUAL
39704: IFTRUE 39708
39706: GO 39745
39708: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
39709: LD_VAR 0 6
39713: PPUSH
39714: LD_VAR 0 7
39718: PPUSH
39719: LD_VAR 0 8
39723: PPUSH
39724: LD_VAR 0 9
39728: PPUSH
39729: LD_VAR 0 4
39733: PPUSH
39734: LD_VAR 0 5
39738: PPUSH
39739: CALL 40992 0 6
39743: GO 39821
39745: LD_INT 303
39747: DOUBLE
39748: EQUAL
39749: IFTRUE 39753
39751: GO 39790
39753: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
39754: LD_VAR 0 6
39758: PPUSH
39759: LD_VAR 0 7
39763: PPUSH
39764: LD_VAR 0 8
39768: PPUSH
39769: LD_VAR 0 9
39773: PPUSH
39774: LD_VAR 0 4
39778: PPUSH
39779: LD_VAR 0 5
39783: PPUSH
39784: CALL 39826 0 6
39788: GO 39821
39790: LD_INT 304
39792: DOUBLE
39793: EQUAL
39794: IFTRUE 39798
39796: GO 39820
39798: POP
// hHackTeleport ( unit , x , y ) ; end ;
39799: LD_VAR 0 2
39803: PPUSH
39804: LD_VAR 0 4
39808: PPUSH
39809: LD_VAR 0 5
39813: PPUSH
39814: CALL 41585 0 3
39818: GO 39821
39820: POP
// end ;
39821: LD_VAR 0 12
39825: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
39826: LD_INT 0
39828: PPUSH
39829: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
39830: LD_VAR 0 1
39834: PUSH
39835: LD_INT 1
39837: LESS
39838: PUSH
39839: LD_VAR 0 1
39843: PUSH
39844: LD_INT 3
39846: GREATER
39847: OR
39848: PUSH
39849: LD_VAR 0 5
39853: PPUSH
39854: LD_VAR 0 6
39858: PPUSH
39859: CALL_OW 428
39863: OR
39864: IFFALSE 39868
// exit ;
39866: GO 40588
// uc_side := your_side ;
39868: LD_ADDR_OWVAR 20
39872: PUSH
39873: LD_OWVAR 2
39877: ST_TO_ADDR
// uc_nation := nation ;
39878: LD_ADDR_OWVAR 21
39882: PUSH
39883: LD_VAR 0 1
39887: ST_TO_ADDR
// bc_level = 1 ;
39888: LD_ADDR_OWVAR 43
39892: PUSH
39893: LD_INT 1
39895: ST_TO_ADDR
// case btype of 1 :
39896: LD_VAR 0 2
39900: PUSH
39901: LD_INT 1
39903: DOUBLE
39904: EQUAL
39905: IFTRUE 39909
39907: GO 39920
39909: POP
// bc_type := b_depot ; 2 :
39910: LD_ADDR_OWVAR 42
39914: PUSH
39915: LD_INT 0
39917: ST_TO_ADDR
39918: GO 40532
39920: LD_INT 2
39922: DOUBLE
39923: EQUAL
39924: IFTRUE 39928
39926: GO 39939
39928: POP
// bc_type := b_warehouse ; 3 :
39929: LD_ADDR_OWVAR 42
39933: PUSH
39934: LD_INT 1
39936: ST_TO_ADDR
39937: GO 40532
39939: LD_INT 3
39941: DOUBLE
39942: EQUAL
39943: IFTRUE 39947
39945: GO 39958
39947: POP
// bc_type := b_lab ; 4 .. 9 :
39948: LD_ADDR_OWVAR 42
39952: PUSH
39953: LD_INT 6
39955: ST_TO_ADDR
39956: GO 40532
39958: LD_INT 4
39960: DOUBLE
39961: GREATEREQUAL
39962: IFFALSE 39970
39964: LD_INT 9
39966: DOUBLE
39967: LESSEQUAL
39968: IFTRUE 39972
39970: GO 40024
39972: POP
// begin bc_type := b_lab_half ;
39973: LD_ADDR_OWVAR 42
39977: PUSH
39978: LD_INT 7
39980: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
39981: LD_ADDR_OWVAR 44
39985: PUSH
39986: LD_INT 10
39988: PUSH
39989: LD_INT 11
39991: PUSH
39992: LD_INT 12
39994: PUSH
39995: LD_INT 15
39997: PUSH
39998: LD_INT 14
40000: PUSH
40001: LD_INT 13
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: PUSH
40012: LD_VAR 0 2
40016: PUSH
40017: LD_INT 3
40019: MINUS
40020: ARRAY
40021: ST_TO_ADDR
// end ; 10 .. 13 :
40022: GO 40532
40024: LD_INT 10
40026: DOUBLE
40027: GREATEREQUAL
40028: IFFALSE 40036
40030: LD_INT 13
40032: DOUBLE
40033: LESSEQUAL
40034: IFTRUE 40038
40036: GO 40115
40038: POP
// begin bc_type := b_lab_full ;
40039: LD_ADDR_OWVAR 42
40043: PUSH
40044: LD_INT 8
40046: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
40047: LD_ADDR_OWVAR 44
40051: PUSH
40052: LD_INT 10
40054: PUSH
40055: LD_INT 12
40057: PUSH
40058: LD_INT 14
40060: PUSH
40061: LD_INT 13
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: PUSH
40070: LD_VAR 0 2
40074: PUSH
40075: LD_INT 9
40077: MINUS
40078: ARRAY
40079: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
40080: LD_ADDR_OWVAR 45
40084: PUSH
40085: LD_INT 11
40087: PUSH
40088: LD_INT 15
40090: PUSH
40091: LD_INT 12
40093: PUSH
40094: LD_INT 15
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: PUSH
40103: LD_VAR 0 2
40107: PUSH
40108: LD_INT 9
40110: MINUS
40111: ARRAY
40112: ST_TO_ADDR
// end ; 14 :
40113: GO 40532
40115: LD_INT 14
40117: DOUBLE
40118: EQUAL
40119: IFTRUE 40123
40121: GO 40134
40123: POP
// bc_type := b_workshop ; 15 :
40124: LD_ADDR_OWVAR 42
40128: PUSH
40129: LD_INT 2
40131: ST_TO_ADDR
40132: GO 40532
40134: LD_INT 15
40136: DOUBLE
40137: EQUAL
40138: IFTRUE 40142
40140: GO 40153
40142: POP
// bc_type := b_factory ; 16 :
40143: LD_ADDR_OWVAR 42
40147: PUSH
40148: LD_INT 3
40150: ST_TO_ADDR
40151: GO 40532
40153: LD_INT 16
40155: DOUBLE
40156: EQUAL
40157: IFTRUE 40161
40159: GO 40172
40161: POP
// bc_type := b_ext_gun ; 17 :
40162: LD_ADDR_OWVAR 42
40166: PUSH
40167: LD_INT 17
40169: ST_TO_ADDR
40170: GO 40532
40172: LD_INT 17
40174: DOUBLE
40175: EQUAL
40176: IFTRUE 40180
40178: GO 40208
40180: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
40181: LD_ADDR_OWVAR 42
40185: PUSH
40186: LD_INT 19
40188: PUSH
40189: LD_INT 23
40191: PUSH
40192: LD_INT 19
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: LIST
40199: PUSH
40200: LD_VAR 0 1
40204: ARRAY
40205: ST_TO_ADDR
40206: GO 40532
40208: LD_INT 18
40210: DOUBLE
40211: EQUAL
40212: IFTRUE 40216
40214: GO 40227
40216: POP
// bc_type := b_ext_radar ; 19 :
40217: LD_ADDR_OWVAR 42
40221: PUSH
40222: LD_INT 20
40224: ST_TO_ADDR
40225: GO 40532
40227: LD_INT 19
40229: DOUBLE
40230: EQUAL
40231: IFTRUE 40235
40233: GO 40246
40235: POP
// bc_type := b_ext_radio ; 20 :
40236: LD_ADDR_OWVAR 42
40240: PUSH
40241: LD_INT 22
40243: ST_TO_ADDR
40244: GO 40532
40246: LD_INT 20
40248: DOUBLE
40249: EQUAL
40250: IFTRUE 40254
40252: GO 40265
40254: POP
// bc_type := b_ext_siberium ; 21 :
40255: LD_ADDR_OWVAR 42
40259: PUSH
40260: LD_INT 21
40262: ST_TO_ADDR
40263: GO 40532
40265: LD_INT 21
40267: DOUBLE
40268: EQUAL
40269: IFTRUE 40273
40271: GO 40284
40273: POP
// bc_type := b_ext_computer ; 22 :
40274: LD_ADDR_OWVAR 42
40278: PUSH
40279: LD_INT 24
40281: ST_TO_ADDR
40282: GO 40532
40284: LD_INT 22
40286: DOUBLE
40287: EQUAL
40288: IFTRUE 40292
40290: GO 40303
40292: POP
// bc_type := b_ext_track ; 23 :
40293: LD_ADDR_OWVAR 42
40297: PUSH
40298: LD_INT 16
40300: ST_TO_ADDR
40301: GO 40532
40303: LD_INT 23
40305: DOUBLE
40306: EQUAL
40307: IFTRUE 40311
40309: GO 40322
40311: POP
// bc_type := b_ext_laser ; 24 :
40312: LD_ADDR_OWVAR 42
40316: PUSH
40317: LD_INT 25
40319: ST_TO_ADDR
40320: GO 40532
40322: LD_INT 24
40324: DOUBLE
40325: EQUAL
40326: IFTRUE 40330
40328: GO 40341
40330: POP
// bc_type := b_control_tower ; 25 :
40331: LD_ADDR_OWVAR 42
40335: PUSH
40336: LD_INT 36
40338: ST_TO_ADDR
40339: GO 40532
40341: LD_INT 25
40343: DOUBLE
40344: EQUAL
40345: IFTRUE 40349
40347: GO 40360
40349: POP
// bc_type := b_breastwork ; 26 :
40350: LD_ADDR_OWVAR 42
40354: PUSH
40355: LD_INT 31
40357: ST_TO_ADDR
40358: GO 40532
40360: LD_INT 26
40362: DOUBLE
40363: EQUAL
40364: IFTRUE 40368
40366: GO 40379
40368: POP
// bc_type := b_bunker ; 27 :
40369: LD_ADDR_OWVAR 42
40373: PUSH
40374: LD_INT 32
40376: ST_TO_ADDR
40377: GO 40532
40379: LD_INT 27
40381: DOUBLE
40382: EQUAL
40383: IFTRUE 40387
40385: GO 40398
40387: POP
// bc_type := b_turret ; 28 :
40388: LD_ADDR_OWVAR 42
40392: PUSH
40393: LD_INT 33
40395: ST_TO_ADDR
40396: GO 40532
40398: LD_INT 28
40400: DOUBLE
40401: EQUAL
40402: IFTRUE 40406
40404: GO 40417
40406: POP
// bc_type := b_armoury ; 29 :
40407: LD_ADDR_OWVAR 42
40411: PUSH
40412: LD_INT 4
40414: ST_TO_ADDR
40415: GO 40532
40417: LD_INT 29
40419: DOUBLE
40420: EQUAL
40421: IFTRUE 40425
40423: GO 40436
40425: POP
// bc_type := b_barracks ; 30 :
40426: LD_ADDR_OWVAR 42
40430: PUSH
40431: LD_INT 5
40433: ST_TO_ADDR
40434: GO 40532
40436: LD_INT 30
40438: DOUBLE
40439: EQUAL
40440: IFTRUE 40444
40442: GO 40455
40444: POP
// bc_type := b_solar_power ; 31 :
40445: LD_ADDR_OWVAR 42
40449: PUSH
40450: LD_INT 27
40452: ST_TO_ADDR
40453: GO 40532
40455: LD_INT 31
40457: DOUBLE
40458: EQUAL
40459: IFTRUE 40463
40461: GO 40474
40463: POP
// bc_type := b_oil_power ; 32 :
40464: LD_ADDR_OWVAR 42
40468: PUSH
40469: LD_INT 26
40471: ST_TO_ADDR
40472: GO 40532
40474: LD_INT 32
40476: DOUBLE
40477: EQUAL
40478: IFTRUE 40482
40480: GO 40493
40482: POP
// bc_type := b_siberite_power ; 33 :
40483: LD_ADDR_OWVAR 42
40487: PUSH
40488: LD_INT 28
40490: ST_TO_ADDR
40491: GO 40532
40493: LD_INT 33
40495: DOUBLE
40496: EQUAL
40497: IFTRUE 40501
40499: GO 40512
40501: POP
// bc_type := b_oil_mine ; 34 :
40502: LD_ADDR_OWVAR 42
40506: PUSH
40507: LD_INT 29
40509: ST_TO_ADDR
40510: GO 40532
40512: LD_INT 34
40514: DOUBLE
40515: EQUAL
40516: IFTRUE 40520
40518: GO 40531
40520: POP
// bc_type := b_siberite_mine ; end ;
40521: LD_ADDR_OWVAR 42
40525: PUSH
40526: LD_INT 30
40528: ST_TO_ADDR
40529: GO 40532
40531: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
40532: LD_ADDR_VAR 0 8
40536: PUSH
40537: LD_VAR 0 5
40541: PPUSH
40542: LD_VAR 0 6
40546: PPUSH
40547: LD_VAR 0 3
40551: PPUSH
40552: CALL_OW 47
40556: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
40557: LD_OWVAR 42
40561: PUSH
40562: LD_INT 32
40564: PUSH
40565: LD_INT 33
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: IN
40572: IFFALSE 40588
// PlaceWeaponTurret ( b , weapon ) ;
40574: LD_VAR 0 8
40578: PPUSH
40579: LD_VAR 0 4
40583: PPUSH
40584: CALL_OW 431
// end ;
40588: LD_VAR 0 7
40592: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
40593: LD_INT 0
40595: PPUSH
40596: PPUSH
40597: PPUSH
40598: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40599: LD_ADDR_VAR 0 4
40603: PUSH
40604: LD_INT 22
40606: PUSH
40607: LD_OWVAR 2
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 2
40618: PUSH
40619: LD_INT 30
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 30
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: LIST
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PPUSH
40648: CALL_OW 69
40652: ST_TO_ADDR
// if not tmp then
40653: LD_VAR 0 4
40657: NOT
40658: IFFALSE 40662
// exit ;
40660: GO 40721
// for i in tmp do
40662: LD_ADDR_VAR 0 2
40666: PUSH
40667: LD_VAR 0 4
40671: PUSH
40672: FOR_IN
40673: IFFALSE 40719
// for j = 1 to 3 do
40675: LD_ADDR_VAR 0 3
40679: PUSH
40680: DOUBLE
40681: LD_INT 1
40683: DEC
40684: ST_TO_ADDR
40685: LD_INT 3
40687: PUSH
40688: FOR_TO
40689: IFFALSE 40715
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
40691: LD_VAR 0 2
40695: PPUSH
40696: CALL_OW 274
40700: PPUSH
40701: LD_VAR 0 3
40705: PPUSH
40706: LD_INT 99999
40708: PPUSH
40709: CALL_OW 277
40713: GO 40688
40715: POP
40716: POP
40717: GO 40672
40719: POP
40720: POP
// end ;
40721: LD_VAR 0 1
40725: RET
// export function hHackSetLevel10 ; var i , j ; begin
40726: LD_INT 0
40728: PPUSH
40729: PPUSH
40730: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40731: LD_ADDR_VAR 0 2
40735: PUSH
40736: LD_INT 21
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PPUSH
40746: CALL_OW 69
40750: PUSH
40751: FOR_IN
40752: IFFALSE 40804
// if IsSelected ( i ) then
40754: LD_VAR 0 2
40758: PPUSH
40759: CALL_OW 306
40763: IFFALSE 40802
// begin for j := 1 to 4 do
40765: LD_ADDR_VAR 0 3
40769: PUSH
40770: DOUBLE
40771: LD_INT 1
40773: DEC
40774: ST_TO_ADDR
40775: LD_INT 4
40777: PUSH
40778: FOR_TO
40779: IFFALSE 40800
// SetSkill ( i , j , 10 ) ;
40781: LD_VAR 0 2
40785: PPUSH
40786: LD_VAR 0 3
40790: PPUSH
40791: LD_INT 10
40793: PPUSH
40794: CALL_OW 237
40798: GO 40778
40800: POP
40801: POP
// end ;
40802: GO 40751
40804: POP
40805: POP
// end ;
40806: LD_VAR 0 1
40810: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
40811: LD_INT 0
40813: PPUSH
40814: PPUSH
40815: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
40816: LD_ADDR_VAR 0 2
40820: PUSH
40821: LD_INT 22
40823: PUSH
40824: LD_OWVAR 2
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 21
40835: PUSH
40836: LD_INT 1
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PPUSH
40847: CALL_OW 69
40851: PUSH
40852: FOR_IN
40853: IFFALSE 40894
// begin for j := 1 to 4 do
40855: LD_ADDR_VAR 0 3
40859: PUSH
40860: DOUBLE
40861: LD_INT 1
40863: DEC
40864: ST_TO_ADDR
40865: LD_INT 4
40867: PUSH
40868: FOR_TO
40869: IFFALSE 40890
// SetSkill ( i , j , 10 ) ;
40871: LD_VAR 0 2
40875: PPUSH
40876: LD_VAR 0 3
40880: PPUSH
40881: LD_INT 10
40883: PPUSH
40884: CALL_OW 237
40888: GO 40868
40890: POP
40891: POP
// end ;
40892: GO 40852
40894: POP
40895: POP
// end ;
40896: LD_VAR 0 1
40900: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
40901: LD_INT 0
40903: PPUSH
// uc_side := your_side ;
40904: LD_ADDR_OWVAR 20
40908: PUSH
40909: LD_OWVAR 2
40913: ST_TO_ADDR
// uc_nation := nation ;
40914: LD_ADDR_OWVAR 21
40918: PUSH
40919: LD_VAR 0 1
40923: ST_TO_ADDR
// InitHc ;
40924: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
40928: LD_INT 0
40930: PPUSH
40931: LD_VAR 0 2
40935: PPUSH
40936: LD_VAR 0 3
40940: PPUSH
40941: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
40945: LD_VAR 0 4
40949: PPUSH
40950: LD_VAR 0 5
40954: PPUSH
40955: CALL_OW 428
40959: PUSH
40960: LD_INT 0
40962: EQUAL
40963: IFFALSE 40987
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
40965: CALL_OW 44
40969: PPUSH
40970: LD_VAR 0 4
40974: PPUSH
40975: LD_VAR 0 5
40979: PPUSH
40980: LD_INT 1
40982: PPUSH
40983: CALL_OW 48
// end ;
40987: LD_VAR 0 6
40991: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
40992: LD_INT 0
40994: PPUSH
40995: PPUSH
// uc_side := your_side ;
40996: LD_ADDR_OWVAR 20
41000: PUSH
41001: LD_OWVAR 2
41005: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
41006: LD_VAR 0 1
41010: PUSH
41011: LD_INT 1
41013: PUSH
41014: LD_INT 2
41016: PUSH
41017: LD_INT 3
41019: PUSH
41020: LD_INT 4
41022: PUSH
41023: LD_INT 5
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: IN
41033: IFFALSE 41045
// uc_nation := nation_american else
41035: LD_ADDR_OWVAR 21
41039: PUSH
41040: LD_INT 1
41042: ST_TO_ADDR
41043: GO 41088
// if chassis in [ 11 , 12 , 13 , 14 ] then
41045: LD_VAR 0 1
41049: PUSH
41050: LD_INT 11
41052: PUSH
41053: LD_INT 12
41055: PUSH
41056: LD_INT 13
41058: PUSH
41059: LD_INT 14
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: IN
41068: IFFALSE 41080
// uc_nation := nation_arabian else
41070: LD_ADDR_OWVAR 21
41074: PUSH
41075: LD_INT 2
41077: ST_TO_ADDR
41078: GO 41088
// uc_nation := nation_russian ;
41080: LD_ADDR_OWVAR 21
41084: PUSH
41085: LD_INT 3
41087: ST_TO_ADDR
// vc_chassis := chassis ;
41088: LD_ADDR_OWVAR 37
41092: PUSH
41093: LD_VAR 0 1
41097: ST_TO_ADDR
// vc_engine := engine ;
41098: LD_ADDR_OWVAR 39
41102: PUSH
41103: LD_VAR 0 2
41107: ST_TO_ADDR
// vc_control := control ;
41108: LD_ADDR_OWVAR 38
41112: PUSH
41113: LD_VAR 0 3
41117: ST_TO_ADDR
// vc_weapon := weapon ;
41118: LD_ADDR_OWVAR 40
41122: PUSH
41123: LD_VAR 0 4
41127: ST_TO_ADDR
// un := CreateVehicle ;
41128: LD_ADDR_VAR 0 8
41132: PUSH
41133: CALL_OW 45
41137: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
41138: LD_VAR 0 8
41142: PPUSH
41143: LD_INT 0
41145: PPUSH
41146: LD_INT 5
41148: PPUSH
41149: CALL_OW 12
41153: PPUSH
41154: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
41158: LD_VAR 0 8
41162: PPUSH
41163: LD_VAR 0 5
41167: PPUSH
41168: LD_VAR 0 6
41172: PPUSH
41173: LD_INT 1
41175: PPUSH
41176: CALL_OW 48
// end ;
41180: LD_VAR 0 7
41184: RET
// export hInvincible ; every 1 do
41185: GO 41187
41187: DISABLE
// hInvincible := [ ] ;
41188: LD_ADDR_EXP 125
41192: PUSH
41193: EMPTY
41194: ST_TO_ADDR
41195: END
// every 10 do var i ;
41196: GO 41198
41198: DISABLE
41199: LD_INT 0
41201: PPUSH
// begin enable ;
41202: ENABLE
// if not hInvincible then
41203: LD_EXP 125
41207: NOT
41208: IFFALSE 41212
// exit ;
41210: GO 41256
// for i in hInvincible do
41212: LD_ADDR_VAR 0 1
41216: PUSH
41217: LD_EXP 125
41221: PUSH
41222: FOR_IN
41223: IFFALSE 41254
// if GetLives ( i ) < 1000 then
41225: LD_VAR 0 1
41229: PPUSH
41230: CALL_OW 256
41234: PUSH
41235: LD_INT 1000
41237: LESS
41238: IFFALSE 41252
// SetLives ( i , 1000 ) ;
41240: LD_VAR 0 1
41244: PPUSH
41245: LD_INT 1000
41247: PPUSH
41248: CALL_OW 234
41252: GO 41222
41254: POP
41255: POP
// end ;
41256: PPOPN 1
41258: END
// export function hHackInvincible ; var i ; begin
41259: LD_INT 0
41261: PPUSH
41262: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
41263: LD_ADDR_VAR 0 2
41267: PUSH
41268: LD_INT 2
41270: PUSH
41271: LD_INT 21
41273: PUSH
41274: LD_INT 1
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 21
41283: PUSH
41284: LD_INT 2
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: LIST
41295: PPUSH
41296: CALL_OW 69
41300: PUSH
41301: FOR_IN
41302: IFFALSE 41363
// if IsSelected ( i ) then
41304: LD_VAR 0 2
41308: PPUSH
41309: CALL_OW 306
41313: IFFALSE 41361
// begin if i in hInvincible then
41315: LD_VAR 0 2
41319: PUSH
41320: LD_EXP 125
41324: IN
41325: IFFALSE 41345
// hInvincible := hInvincible diff i else
41327: LD_ADDR_EXP 125
41331: PUSH
41332: LD_EXP 125
41336: PUSH
41337: LD_VAR 0 2
41341: DIFF
41342: ST_TO_ADDR
41343: GO 41361
// hInvincible := hInvincible union i ;
41345: LD_ADDR_EXP 125
41349: PUSH
41350: LD_EXP 125
41354: PUSH
41355: LD_VAR 0 2
41359: UNION
41360: ST_TO_ADDR
// end ;
41361: GO 41301
41363: POP
41364: POP
// end ;
41365: LD_VAR 0 1
41369: RET
// export function hHackInvisible ; var i , j ; begin
41370: LD_INT 0
41372: PPUSH
41373: PPUSH
41374: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
41375: LD_ADDR_VAR 0 2
41379: PUSH
41380: LD_INT 21
41382: PUSH
41383: LD_INT 1
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PPUSH
41390: CALL_OW 69
41394: PUSH
41395: FOR_IN
41396: IFFALSE 41420
// if IsSelected ( i ) then
41398: LD_VAR 0 2
41402: PPUSH
41403: CALL_OW 306
41407: IFFALSE 41418
// ComForceInvisible ( i ) ;
41409: LD_VAR 0 2
41413: PPUSH
41414: CALL_OW 496
41418: GO 41395
41420: POP
41421: POP
// end ;
41422: LD_VAR 0 1
41426: RET
// export function hHackChangeYourSide ; begin
41427: LD_INT 0
41429: PPUSH
// if your_side = 8 then
41430: LD_OWVAR 2
41434: PUSH
41435: LD_INT 8
41437: EQUAL
41438: IFFALSE 41450
// your_side := 0 else
41440: LD_ADDR_OWVAR 2
41444: PUSH
41445: LD_INT 0
41447: ST_TO_ADDR
41448: GO 41464
// your_side := your_side + 1 ;
41450: LD_ADDR_OWVAR 2
41454: PUSH
41455: LD_OWVAR 2
41459: PUSH
41460: LD_INT 1
41462: PLUS
41463: ST_TO_ADDR
// end ;
41464: LD_VAR 0 1
41468: RET
// export function hHackChangeUnitSide ; var i , j ; begin
41469: LD_INT 0
41471: PPUSH
41472: PPUSH
41473: PPUSH
// for i in all_units do
41474: LD_ADDR_VAR 0 2
41478: PUSH
41479: LD_OWVAR 3
41483: PUSH
41484: FOR_IN
41485: IFFALSE 41563
// if IsSelected ( i ) then
41487: LD_VAR 0 2
41491: PPUSH
41492: CALL_OW 306
41496: IFFALSE 41561
// begin j := GetSide ( i ) ;
41498: LD_ADDR_VAR 0 3
41502: PUSH
41503: LD_VAR 0 2
41507: PPUSH
41508: CALL_OW 255
41512: ST_TO_ADDR
// if j = 8 then
41513: LD_VAR 0 3
41517: PUSH
41518: LD_INT 8
41520: EQUAL
41521: IFFALSE 41533
// j := 0 else
41523: LD_ADDR_VAR 0 3
41527: PUSH
41528: LD_INT 0
41530: ST_TO_ADDR
41531: GO 41547
// j := j + 1 ;
41533: LD_ADDR_VAR 0 3
41537: PUSH
41538: LD_VAR 0 3
41542: PUSH
41543: LD_INT 1
41545: PLUS
41546: ST_TO_ADDR
// SetSide ( i , j ) ;
41547: LD_VAR 0 2
41551: PPUSH
41552: LD_VAR 0 3
41556: PPUSH
41557: CALL_OW 235
// end ;
41561: GO 41484
41563: POP
41564: POP
// end ;
41565: LD_VAR 0 1
41569: RET
// export function hHackFog ; begin
41570: LD_INT 0
41572: PPUSH
// FogOff ( true ) ;
41573: LD_INT 1
41575: PPUSH
41576: CALL_OW 344
// end ;
41580: LD_VAR 0 1
41584: RET
// export function hHackTeleport ( unit , x , y ) ; begin
41585: LD_INT 0
41587: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
41588: LD_VAR 0 1
41592: PPUSH
41593: LD_VAR 0 2
41597: PPUSH
41598: LD_VAR 0 3
41602: PPUSH
41603: LD_INT 1
41605: PPUSH
41606: LD_INT 1
41608: PPUSH
41609: CALL_OW 483
// CenterOnXY ( x , y ) ;
41613: LD_VAR 0 2
41617: PPUSH
41618: LD_VAR 0 3
41622: PPUSH
41623: CALL_OW 84
// end ; end_of_file
41627: LD_VAR 0 4
41631: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
41632: LD_INT 0
41634: PPUSH
41635: PPUSH
41636: PPUSH
41637: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
41638: LD_VAR 0 1
41642: PPUSH
41643: CALL_OW 264
41647: PUSH
41648: LD_EXP 52
41652: EQUAL
41653: IFFALSE 41725
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
41655: LD_INT 68
41657: PPUSH
41658: LD_VAR 0 1
41662: PPUSH
41663: CALL_OW 255
41667: PPUSH
41668: CALL_OW 321
41672: PUSH
41673: LD_INT 2
41675: EQUAL
41676: IFFALSE 41688
// eff := 70 else
41678: LD_ADDR_VAR 0 4
41682: PUSH
41683: LD_INT 70
41685: ST_TO_ADDR
41686: GO 41696
// eff := 30 ;
41688: LD_ADDR_VAR 0 4
41692: PUSH
41693: LD_INT 30
41695: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
41696: LD_VAR 0 1
41700: PPUSH
41701: CALL_OW 250
41705: PPUSH
41706: LD_VAR 0 1
41710: PPUSH
41711: CALL_OW 251
41715: PPUSH
41716: LD_VAR 0 4
41720: PPUSH
41721: CALL_OW 495
// end ; end ;
41725: LD_VAR 0 2
41729: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
41730: LD_INT 0
41732: PPUSH
// end ;
41733: LD_VAR 0 4
41737: RET
// export function SOS_Command ( cmd ) ; begin
41738: LD_INT 0
41740: PPUSH
// end ;
41741: LD_VAR 0 2
41745: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
41746: LD_INT 0
41748: PPUSH
// end ;
41749: LD_VAR 0 6
41753: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
41754: LD_INT 0
41756: PPUSH
41757: PPUSH
// if not vehicle or not factory then
41758: LD_VAR 0 1
41762: NOT
41763: PUSH
41764: LD_VAR 0 2
41768: NOT
41769: OR
41770: IFFALSE 41774
// exit ;
41772: GO 42005
// if factoryWaypoints >= factory then
41774: LD_EXP 126
41778: PUSH
41779: LD_VAR 0 2
41783: GREATEREQUAL
41784: IFFALSE 42005
// if factoryWaypoints [ factory ] then
41786: LD_EXP 126
41790: PUSH
41791: LD_VAR 0 2
41795: ARRAY
41796: IFFALSE 42005
// begin if GetControl ( vehicle ) = control_manual then
41798: LD_VAR 0 1
41802: PPUSH
41803: CALL_OW 263
41807: PUSH
41808: LD_INT 1
41810: EQUAL
41811: IFFALSE 41892
// begin driver := IsDrivenBy ( vehicle ) ;
41813: LD_ADDR_VAR 0 4
41817: PUSH
41818: LD_VAR 0 1
41822: PPUSH
41823: CALL_OW 311
41827: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
41828: LD_VAR 0 4
41832: PPUSH
41833: LD_EXP 126
41837: PUSH
41838: LD_VAR 0 2
41842: ARRAY
41843: PUSH
41844: LD_INT 3
41846: ARRAY
41847: PPUSH
41848: LD_EXP 126
41852: PUSH
41853: LD_VAR 0 2
41857: ARRAY
41858: PUSH
41859: LD_INT 4
41861: ARRAY
41862: PPUSH
41863: CALL_OW 171
// AddComExitVehicle ( driver ) ;
41867: LD_VAR 0 4
41871: PPUSH
41872: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
41876: LD_VAR 0 4
41880: PPUSH
41881: LD_VAR 0 2
41885: PPUSH
41886: CALL_OW 180
// end else
41890: GO 42005
// if GetControl ( vehicle ) = control_remote then
41892: LD_VAR 0 1
41896: PPUSH
41897: CALL_OW 263
41901: PUSH
41902: LD_INT 2
41904: EQUAL
41905: IFFALSE 41966
// begin wait ( 0 0$2 ) ;
41907: LD_INT 70
41909: PPUSH
41910: CALL_OW 67
// if Connect ( vehicle ) then
41914: LD_VAR 0 1
41918: PPUSH
41919: CALL 54229 0 1
41923: IFFALSE 41964
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
41925: LD_VAR 0 1
41929: PPUSH
41930: LD_EXP 126
41934: PUSH
41935: LD_VAR 0 2
41939: ARRAY
41940: PUSH
41941: LD_INT 3
41943: ARRAY
41944: PPUSH
41945: LD_EXP 126
41949: PUSH
41950: LD_VAR 0 2
41954: ARRAY
41955: PUSH
41956: LD_INT 4
41958: ARRAY
41959: PPUSH
41960: CALL_OW 171
// end else
41964: GO 42005
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
41966: LD_VAR 0 1
41970: PPUSH
41971: LD_EXP 126
41975: PUSH
41976: LD_VAR 0 2
41980: ARRAY
41981: PUSH
41982: LD_INT 3
41984: ARRAY
41985: PPUSH
41986: LD_EXP 126
41990: PUSH
41991: LD_VAR 0 2
41995: ARRAY
41996: PUSH
41997: LD_INT 4
41999: ARRAY
42000: PPUSH
42001: CALL_OW 171
// end ; end ;
42005: LD_VAR 0 3
42009: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
42010: LD_INT 0
42012: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
42013: LD_VAR 0 1
42017: PUSH
42018: LD_INT 250
42020: EQUAL
42021: PUSH
42022: LD_VAR 0 2
42026: PPUSH
42027: CALL_OW 264
42031: PUSH
42032: LD_EXP 55
42036: EQUAL
42037: AND
42038: IFFALSE 42059
// MinerPlaceMine ( unit , x , y ) ;
42040: LD_VAR 0 2
42044: PPUSH
42045: LD_VAR 0 4
42049: PPUSH
42050: LD_VAR 0 5
42054: PPUSH
42055: CALL 44787 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
42059: LD_VAR 0 1
42063: PUSH
42064: LD_INT 251
42066: EQUAL
42067: PUSH
42068: LD_VAR 0 2
42072: PPUSH
42073: CALL_OW 264
42077: PUSH
42078: LD_EXP 55
42082: EQUAL
42083: AND
42084: IFFALSE 42105
// MinerDetonateMine ( unit , x , y ) ;
42086: LD_VAR 0 2
42090: PPUSH
42091: LD_VAR 0 4
42095: PPUSH
42096: LD_VAR 0 5
42100: PPUSH
42101: CALL 45064 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
42105: LD_VAR 0 1
42109: PUSH
42110: LD_INT 252
42112: EQUAL
42113: PUSH
42114: LD_VAR 0 2
42118: PPUSH
42119: CALL_OW 264
42123: PUSH
42124: LD_EXP 55
42128: EQUAL
42129: AND
42130: IFFALSE 42151
// MinerCreateMinefield ( unit , x , y ) ;
42132: LD_VAR 0 2
42136: PPUSH
42137: LD_VAR 0 4
42141: PPUSH
42142: LD_VAR 0 5
42146: PPUSH
42147: CALL 45481 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
42151: LD_VAR 0 1
42155: PUSH
42156: LD_INT 253
42158: EQUAL
42159: PUSH
42160: LD_VAR 0 2
42164: PPUSH
42165: CALL_OW 257
42169: PUSH
42170: LD_INT 5
42172: EQUAL
42173: AND
42174: IFFALSE 42195
// ComBinocular ( unit , x , y ) ;
42176: LD_VAR 0 2
42180: PPUSH
42181: LD_VAR 0 4
42185: PPUSH
42186: LD_VAR 0 5
42190: PPUSH
42191: CALL 45852 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
42195: LD_VAR 0 1
42199: PUSH
42200: LD_INT 254
42202: EQUAL
42203: PUSH
42204: LD_VAR 0 2
42208: PPUSH
42209: CALL_OW 264
42213: PUSH
42214: LD_EXP 50
42218: EQUAL
42219: AND
42220: PUSH
42221: LD_VAR 0 3
42225: PPUSH
42226: CALL_OW 263
42230: PUSH
42231: LD_INT 3
42233: EQUAL
42234: AND
42235: IFFALSE 42251
// HackDestroyVehicle ( unit , selectedUnit ) ;
42237: LD_VAR 0 2
42241: PPUSH
42242: LD_VAR 0 3
42246: PPUSH
42247: CALL 44147 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
42251: LD_VAR 0 1
42255: PUSH
42256: LD_INT 255
42258: EQUAL
42259: PUSH
42260: LD_VAR 0 2
42264: PPUSH
42265: CALL_OW 264
42269: PUSH
42270: LD_INT 14
42272: PUSH
42273: LD_INT 53
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: IN
42280: AND
42281: PUSH
42282: LD_VAR 0 4
42286: PPUSH
42287: LD_VAR 0 5
42291: PPUSH
42292: CALL_OW 488
42296: AND
42297: IFFALSE 42321
// CutTreeXYR ( unit , x , y , 12 ) ;
42299: LD_VAR 0 2
42303: PPUSH
42304: LD_VAR 0 4
42308: PPUSH
42309: LD_VAR 0 5
42313: PPUSH
42314: LD_INT 12
42316: PPUSH
42317: CALL 42713 0 4
// if cmd = 256 then
42321: LD_VAR 0 1
42325: PUSH
42326: LD_INT 256
42328: EQUAL
42329: IFFALSE 42350
// SetFactoryWaypoint ( unit , x , y ) ;
42331: LD_VAR 0 2
42335: PPUSH
42336: LD_VAR 0 4
42340: PPUSH
42341: LD_VAR 0 5
42345: PPUSH
42346: CALL 42355 0 3
// end ;
42350: LD_VAR 0 6
42354: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
42355: LD_INT 0
42357: PPUSH
42358: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
42359: LD_VAR 0 1
42363: NOT
42364: PUSH
42365: LD_VAR 0 2
42369: PPUSH
42370: LD_VAR 0 3
42374: PPUSH
42375: CALL_OW 488
42379: NOT
42380: OR
42381: PUSH
42382: LD_VAR 0 1
42386: PPUSH
42387: CALL_OW 266
42391: PUSH
42392: LD_INT 3
42394: NONEQUAL
42395: PUSH
42396: LD_VAR 0 1
42400: PPUSH
42401: CALL_OW 247
42405: PUSH
42406: LD_INT 1
42408: EQUAL
42409: NOT
42410: AND
42411: OR
42412: IFFALSE 42416
// exit ;
42414: GO 42565
// if GetType ( factory ) = unit_human then
42416: LD_VAR 0 1
42420: PPUSH
42421: CALL_OW 247
42425: PUSH
42426: LD_INT 1
42428: EQUAL
42429: IFFALSE 42446
// factory := IsInUnit ( factory ) ;
42431: LD_ADDR_VAR 0 1
42435: PUSH
42436: LD_VAR 0 1
42440: PPUSH
42441: CALL_OW 310
42445: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
42446: LD_VAR 0 1
42450: PPUSH
42451: CALL_OW 266
42455: PUSH
42456: LD_INT 3
42458: NONEQUAL
42459: IFFALSE 42463
// exit ;
42461: GO 42565
// if HexInfo ( x , y ) = factory then
42463: LD_VAR 0 2
42467: PPUSH
42468: LD_VAR 0 3
42472: PPUSH
42473: CALL_OW 428
42477: PUSH
42478: LD_VAR 0 1
42482: EQUAL
42483: IFFALSE 42510
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
42485: LD_ADDR_EXP 126
42489: PUSH
42490: LD_EXP 126
42494: PPUSH
42495: LD_VAR 0 1
42499: PPUSH
42500: LD_INT 0
42502: PPUSH
42503: CALL_OW 1
42507: ST_TO_ADDR
42508: GO 42561
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
42510: LD_ADDR_EXP 126
42514: PUSH
42515: LD_EXP 126
42519: PPUSH
42520: LD_VAR 0 1
42524: PPUSH
42525: LD_VAR 0 1
42529: PPUSH
42530: CALL_OW 255
42534: PUSH
42535: LD_VAR 0 1
42539: PUSH
42540: LD_VAR 0 2
42544: PUSH
42545: LD_VAR 0 3
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: PPUSH
42556: CALL_OW 1
42560: ST_TO_ADDR
// UpdateFactoryWaypoints ;
42561: CALL 42570 0 0
// end ;
42565: LD_VAR 0 4
42569: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
42570: LD_INT 0
42572: PPUSH
42573: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
42574: LD_STRING resetFactoryWaypoint();
42576: PPUSH
42577: CALL_OW 559
// if factoryWaypoints then
42581: LD_EXP 126
42585: IFFALSE 42708
// begin for i := 1 to factoryWaypoints do
42587: LD_ADDR_VAR 0 2
42591: PUSH
42592: DOUBLE
42593: LD_INT 1
42595: DEC
42596: ST_TO_ADDR
42597: LD_EXP 126
42601: PUSH
42602: FOR_TO
42603: IFFALSE 42706
// if factoryWaypoints [ i ] then
42605: LD_EXP 126
42609: PUSH
42610: LD_VAR 0 2
42614: ARRAY
42615: IFFALSE 42704
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
42617: LD_STRING setFactoryWaypointXY(
42619: PUSH
42620: LD_EXP 126
42624: PUSH
42625: LD_VAR 0 2
42629: ARRAY
42630: PUSH
42631: LD_INT 1
42633: ARRAY
42634: STR
42635: PUSH
42636: LD_STRING ,
42638: STR
42639: PUSH
42640: LD_EXP 126
42644: PUSH
42645: LD_VAR 0 2
42649: ARRAY
42650: PUSH
42651: LD_INT 2
42653: ARRAY
42654: STR
42655: PUSH
42656: LD_STRING ,
42658: STR
42659: PUSH
42660: LD_EXP 126
42664: PUSH
42665: LD_VAR 0 2
42669: ARRAY
42670: PUSH
42671: LD_INT 3
42673: ARRAY
42674: STR
42675: PUSH
42676: LD_STRING ,
42678: STR
42679: PUSH
42680: LD_EXP 126
42684: PUSH
42685: LD_VAR 0 2
42689: ARRAY
42690: PUSH
42691: LD_INT 4
42693: ARRAY
42694: STR
42695: PUSH
42696: LD_STRING )
42698: STR
42699: PPUSH
42700: CALL_OW 559
42704: GO 42602
42706: POP
42707: POP
// end ; end ;
42708: LD_VAR 0 1
42712: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
42713: LD_INT 0
42715: PPUSH
42716: PPUSH
42717: PPUSH
42718: PPUSH
42719: PPUSH
42720: PPUSH
42721: PPUSH
42722: PPUSH
42723: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
42724: LD_VAR 0 1
42728: NOT
42729: PUSH
42730: LD_VAR 0 2
42734: PPUSH
42735: LD_VAR 0 3
42739: PPUSH
42740: CALL_OW 488
42744: NOT
42745: OR
42746: PUSH
42747: LD_VAR 0 4
42751: NOT
42752: OR
42753: IFFALSE 42757
// exit ;
42755: GO 43097
// list := [ ] ;
42757: LD_ADDR_VAR 0 13
42761: PUSH
42762: EMPTY
42763: ST_TO_ADDR
// if x - r < 0 then
42764: LD_VAR 0 2
42768: PUSH
42769: LD_VAR 0 4
42773: MINUS
42774: PUSH
42775: LD_INT 0
42777: LESS
42778: IFFALSE 42790
// min_x := 0 else
42780: LD_ADDR_VAR 0 7
42784: PUSH
42785: LD_INT 0
42787: ST_TO_ADDR
42788: GO 42806
// min_x := x - r ;
42790: LD_ADDR_VAR 0 7
42794: PUSH
42795: LD_VAR 0 2
42799: PUSH
42800: LD_VAR 0 4
42804: MINUS
42805: ST_TO_ADDR
// if y - r < 0 then
42806: LD_VAR 0 3
42810: PUSH
42811: LD_VAR 0 4
42815: MINUS
42816: PUSH
42817: LD_INT 0
42819: LESS
42820: IFFALSE 42832
// min_y := 0 else
42822: LD_ADDR_VAR 0 8
42826: PUSH
42827: LD_INT 0
42829: ST_TO_ADDR
42830: GO 42848
// min_y := y - r ;
42832: LD_ADDR_VAR 0 8
42836: PUSH
42837: LD_VAR 0 3
42841: PUSH
42842: LD_VAR 0 4
42846: MINUS
42847: ST_TO_ADDR
// max_x := x + r ;
42848: LD_ADDR_VAR 0 9
42852: PUSH
42853: LD_VAR 0 2
42857: PUSH
42858: LD_VAR 0 4
42862: PLUS
42863: ST_TO_ADDR
// max_y := y + r ;
42864: LD_ADDR_VAR 0 10
42868: PUSH
42869: LD_VAR 0 3
42873: PUSH
42874: LD_VAR 0 4
42878: PLUS
42879: ST_TO_ADDR
// for _x = min_x to max_x do
42880: LD_ADDR_VAR 0 11
42884: PUSH
42885: DOUBLE
42886: LD_VAR 0 7
42890: DEC
42891: ST_TO_ADDR
42892: LD_VAR 0 9
42896: PUSH
42897: FOR_TO
42898: IFFALSE 43015
// for _y = min_y to max_y do
42900: LD_ADDR_VAR 0 12
42904: PUSH
42905: DOUBLE
42906: LD_VAR 0 8
42910: DEC
42911: ST_TO_ADDR
42912: LD_VAR 0 10
42916: PUSH
42917: FOR_TO
42918: IFFALSE 43011
// begin if not ValidHex ( _x , _y ) then
42920: LD_VAR 0 11
42924: PPUSH
42925: LD_VAR 0 12
42929: PPUSH
42930: CALL_OW 488
42934: NOT
42935: IFFALSE 42939
// continue ;
42937: GO 42917
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
42939: LD_VAR 0 11
42943: PPUSH
42944: LD_VAR 0 12
42948: PPUSH
42949: CALL_OW 351
42953: PUSH
42954: LD_VAR 0 11
42958: PPUSH
42959: LD_VAR 0 12
42963: PPUSH
42964: CALL_OW 554
42968: AND
42969: IFFALSE 43009
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
42971: LD_ADDR_VAR 0 13
42975: PUSH
42976: LD_VAR 0 13
42980: PPUSH
42981: LD_VAR 0 13
42985: PUSH
42986: LD_INT 1
42988: PLUS
42989: PPUSH
42990: LD_VAR 0 11
42994: PUSH
42995: LD_VAR 0 12
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PPUSH
43004: CALL_OW 2
43008: ST_TO_ADDR
// end ;
43009: GO 42917
43011: POP
43012: POP
43013: GO 42897
43015: POP
43016: POP
// if not list then
43017: LD_VAR 0 13
43021: NOT
43022: IFFALSE 43026
// exit ;
43024: GO 43097
// for i in list do
43026: LD_ADDR_VAR 0 6
43030: PUSH
43031: LD_VAR 0 13
43035: PUSH
43036: FOR_IN
43037: IFFALSE 43095
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
43039: LD_VAR 0 1
43043: PPUSH
43044: LD_STRING M
43046: PUSH
43047: LD_VAR 0 6
43051: PUSH
43052: LD_INT 1
43054: ARRAY
43055: PUSH
43056: LD_VAR 0 6
43060: PUSH
43061: LD_INT 2
43063: ARRAY
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: PUSH
43086: EMPTY
43087: LIST
43088: PPUSH
43089: CALL_OW 447
43093: GO 43036
43095: POP
43096: POP
// end ;
43097: LD_VAR 0 5
43101: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
43102: LD_EXP 127
43106: NOT
43107: IFFALSE 43157
43109: GO 43111
43111: DISABLE
// begin initHack := true ;
43112: LD_ADDR_EXP 127
43116: PUSH
43117: LD_INT 1
43119: ST_TO_ADDR
// hackTanks := [ ] ;
43120: LD_ADDR_EXP 128
43124: PUSH
43125: EMPTY
43126: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
43127: LD_ADDR_EXP 129
43131: PUSH
43132: EMPTY
43133: ST_TO_ADDR
// hackLimit := 3 ;
43134: LD_ADDR_EXP 130
43138: PUSH
43139: LD_INT 3
43141: ST_TO_ADDR
// hackDist := 12 ;
43142: LD_ADDR_EXP 131
43146: PUSH
43147: LD_INT 12
43149: ST_TO_ADDR
// hackCounter := [ ] ;
43150: LD_ADDR_EXP 132
43154: PUSH
43155: EMPTY
43156: ST_TO_ADDR
// end ;
43157: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
43158: LD_EXP 127
43162: PUSH
43163: LD_INT 34
43165: PUSH
43166: LD_EXP 50
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PPUSH
43175: CALL_OW 69
43179: AND
43180: IFFALSE 43435
43182: GO 43184
43184: DISABLE
43185: LD_INT 0
43187: PPUSH
43188: PPUSH
// begin enable ;
43189: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
43190: LD_ADDR_VAR 0 1
43194: PUSH
43195: LD_INT 34
43197: PUSH
43198: LD_EXP 50
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PPUSH
43207: CALL_OW 69
43211: PUSH
43212: FOR_IN
43213: IFFALSE 43433
// begin if not i in hackTanks then
43215: LD_VAR 0 1
43219: PUSH
43220: LD_EXP 128
43224: IN
43225: NOT
43226: IFFALSE 43309
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
43228: LD_ADDR_EXP 128
43232: PUSH
43233: LD_EXP 128
43237: PPUSH
43238: LD_EXP 128
43242: PUSH
43243: LD_INT 1
43245: PLUS
43246: PPUSH
43247: LD_VAR 0 1
43251: PPUSH
43252: CALL_OW 1
43256: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
43257: LD_ADDR_EXP 129
43261: PUSH
43262: LD_EXP 129
43266: PPUSH
43267: LD_EXP 129
43271: PUSH
43272: LD_INT 1
43274: PLUS
43275: PPUSH
43276: EMPTY
43277: PPUSH
43278: CALL_OW 1
43282: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
43283: LD_ADDR_EXP 132
43287: PUSH
43288: LD_EXP 132
43292: PPUSH
43293: LD_EXP 132
43297: PUSH
43298: LD_INT 1
43300: PLUS
43301: PPUSH
43302: EMPTY
43303: PPUSH
43304: CALL_OW 1
43308: ST_TO_ADDR
// end ; if not IsOk ( i ) then
43309: LD_VAR 0 1
43313: PPUSH
43314: CALL_OW 302
43318: NOT
43319: IFFALSE 43332
// begin HackUnlinkAll ( i ) ;
43321: LD_VAR 0 1
43325: PPUSH
43326: CALL 43438 0 1
// continue ;
43330: GO 43212
// end ; HackCheckCapturedStatus ( i ) ;
43332: LD_VAR 0 1
43336: PPUSH
43337: CALL 43881 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
43341: LD_ADDR_VAR 0 2
43345: PUSH
43346: LD_INT 81
43348: PUSH
43349: LD_VAR 0 1
43353: PPUSH
43354: CALL_OW 255
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 33
43365: PUSH
43366: LD_INT 3
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 91
43375: PUSH
43376: LD_VAR 0 1
43380: PUSH
43381: LD_EXP 131
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 50
43393: PUSH
43394: EMPTY
43395: LIST
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: PPUSH
43403: CALL_OW 69
43407: ST_TO_ADDR
// if not tmp then
43408: LD_VAR 0 2
43412: NOT
43413: IFFALSE 43417
// continue ;
43415: GO 43212
// HackLink ( i , tmp ) ;
43417: LD_VAR 0 1
43421: PPUSH
43422: LD_VAR 0 2
43426: PPUSH
43427: CALL 43574 0 2
// end ;
43431: GO 43212
43433: POP
43434: POP
// end ;
43435: PPOPN 2
43437: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
43438: LD_INT 0
43440: PPUSH
43441: PPUSH
43442: PPUSH
// if not hack in hackTanks then
43443: LD_VAR 0 1
43447: PUSH
43448: LD_EXP 128
43452: IN
43453: NOT
43454: IFFALSE 43458
// exit ;
43456: GO 43569
// index := GetElementIndex ( hackTanks , hack ) ;
43458: LD_ADDR_VAR 0 4
43462: PUSH
43463: LD_EXP 128
43467: PPUSH
43468: LD_VAR 0 1
43472: PPUSH
43473: CALL 51043 0 2
43477: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
43478: LD_EXP 129
43482: PUSH
43483: LD_VAR 0 4
43487: ARRAY
43488: IFFALSE 43569
// begin for i in hackTanksCaptured [ index ] do
43490: LD_ADDR_VAR 0 3
43494: PUSH
43495: LD_EXP 129
43499: PUSH
43500: LD_VAR 0 4
43504: ARRAY
43505: PUSH
43506: FOR_IN
43507: IFFALSE 43533
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
43509: LD_VAR 0 3
43513: PUSH
43514: LD_INT 1
43516: ARRAY
43517: PPUSH
43518: LD_VAR 0 3
43522: PUSH
43523: LD_INT 2
43525: ARRAY
43526: PPUSH
43527: CALL_OW 235
43531: GO 43506
43533: POP
43534: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
43535: LD_ADDR_EXP 129
43539: PUSH
43540: LD_EXP 129
43544: PPUSH
43545: LD_VAR 0 4
43549: PPUSH
43550: EMPTY
43551: PPUSH
43552: CALL_OW 1
43556: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
43557: LD_VAR 0 1
43561: PPUSH
43562: LD_INT 0
43564: PPUSH
43565: CALL_OW 505
// end ; end ;
43569: LD_VAR 0 2
43573: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
43574: LD_INT 0
43576: PPUSH
43577: PPUSH
43578: PPUSH
// if not hack in hackTanks or not vehicles then
43579: LD_VAR 0 1
43583: PUSH
43584: LD_EXP 128
43588: IN
43589: NOT
43590: PUSH
43591: LD_VAR 0 2
43595: NOT
43596: OR
43597: IFFALSE 43601
// exit ;
43599: GO 43876
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
43601: LD_ADDR_VAR 0 2
43605: PUSH
43606: LD_VAR 0 1
43610: PPUSH
43611: LD_VAR 0 2
43615: PPUSH
43616: LD_INT 1
43618: PPUSH
43619: LD_INT 1
43621: PPUSH
43622: CALL 51693 0 4
43626: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
43627: LD_ADDR_VAR 0 5
43631: PUSH
43632: LD_EXP 128
43636: PPUSH
43637: LD_VAR 0 1
43641: PPUSH
43642: CALL 51043 0 2
43646: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
43647: LD_EXP 129
43651: PUSH
43652: LD_VAR 0 5
43656: ARRAY
43657: PUSH
43658: LD_EXP 130
43662: LESS
43663: IFFALSE 43852
// begin for i := 1 to vehicles do
43665: LD_ADDR_VAR 0 4
43669: PUSH
43670: DOUBLE
43671: LD_INT 1
43673: DEC
43674: ST_TO_ADDR
43675: LD_VAR 0 2
43679: PUSH
43680: FOR_TO
43681: IFFALSE 43850
// begin if hackTanksCaptured [ index ] = hackLimit then
43683: LD_EXP 129
43687: PUSH
43688: LD_VAR 0 5
43692: ARRAY
43693: PUSH
43694: LD_EXP 130
43698: EQUAL
43699: IFFALSE 43703
// break ;
43701: GO 43850
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
43703: LD_ADDR_EXP 132
43707: PUSH
43708: LD_EXP 132
43712: PPUSH
43713: LD_VAR 0 5
43717: PPUSH
43718: LD_EXP 132
43722: PUSH
43723: LD_VAR 0 5
43727: ARRAY
43728: PUSH
43729: LD_INT 1
43731: PLUS
43732: PPUSH
43733: CALL_OW 1
43737: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
43738: LD_ADDR_EXP 129
43742: PUSH
43743: LD_EXP 129
43747: PPUSH
43748: LD_VAR 0 5
43752: PUSH
43753: LD_EXP 129
43757: PUSH
43758: LD_VAR 0 5
43762: ARRAY
43763: PUSH
43764: LD_INT 1
43766: PLUS
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PPUSH
43772: LD_VAR 0 2
43776: PUSH
43777: LD_VAR 0 4
43781: ARRAY
43782: PUSH
43783: LD_VAR 0 2
43787: PUSH
43788: LD_VAR 0 4
43792: ARRAY
43793: PPUSH
43794: CALL_OW 255
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PPUSH
43803: CALL 51258 0 3
43807: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
43808: LD_VAR 0 2
43812: PUSH
43813: LD_VAR 0 4
43817: ARRAY
43818: PPUSH
43819: LD_VAR 0 1
43823: PPUSH
43824: CALL_OW 255
43828: PPUSH
43829: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
43833: LD_VAR 0 2
43837: PUSH
43838: LD_VAR 0 4
43842: ARRAY
43843: PPUSH
43844: CALL_OW 141
// end ;
43848: GO 43680
43850: POP
43851: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
43852: LD_VAR 0 1
43856: PPUSH
43857: LD_EXP 129
43861: PUSH
43862: LD_VAR 0 5
43866: ARRAY
43867: PUSH
43868: LD_INT 0
43870: PLUS
43871: PPUSH
43872: CALL_OW 505
// end ;
43876: LD_VAR 0 3
43880: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
43881: LD_INT 0
43883: PPUSH
43884: PPUSH
43885: PPUSH
43886: PPUSH
// if not hack in hackTanks then
43887: LD_VAR 0 1
43891: PUSH
43892: LD_EXP 128
43896: IN
43897: NOT
43898: IFFALSE 43902
// exit ;
43900: GO 44142
// index := GetElementIndex ( hackTanks , hack ) ;
43902: LD_ADDR_VAR 0 4
43906: PUSH
43907: LD_EXP 128
43911: PPUSH
43912: LD_VAR 0 1
43916: PPUSH
43917: CALL 51043 0 2
43921: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
43922: LD_ADDR_VAR 0 3
43926: PUSH
43927: DOUBLE
43928: LD_EXP 129
43932: PUSH
43933: LD_VAR 0 4
43937: ARRAY
43938: INC
43939: ST_TO_ADDR
43940: LD_INT 1
43942: PUSH
43943: FOR_DOWNTO
43944: IFFALSE 44116
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
43946: LD_ADDR_VAR 0 5
43950: PUSH
43951: LD_EXP 129
43955: PUSH
43956: LD_VAR 0 4
43960: ARRAY
43961: PUSH
43962: LD_VAR 0 3
43966: ARRAY
43967: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
43968: LD_VAR 0 5
43972: PUSH
43973: LD_INT 1
43975: ARRAY
43976: PPUSH
43977: CALL_OW 302
43981: NOT
43982: PUSH
43983: LD_VAR 0 5
43987: PUSH
43988: LD_INT 1
43990: ARRAY
43991: PPUSH
43992: CALL_OW 255
43996: PUSH
43997: LD_VAR 0 1
44001: PPUSH
44002: CALL_OW 255
44006: NONEQUAL
44007: OR
44008: IFFALSE 44114
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
44010: LD_VAR 0 5
44014: PUSH
44015: LD_INT 1
44017: ARRAY
44018: PPUSH
44019: CALL_OW 305
44023: PUSH
44024: LD_VAR 0 5
44028: PUSH
44029: LD_INT 1
44031: ARRAY
44032: PPUSH
44033: CALL_OW 255
44037: PUSH
44038: LD_VAR 0 1
44042: PPUSH
44043: CALL_OW 255
44047: EQUAL
44048: AND
44049: IFFALSE 44073
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
44051: LD_VAR 0 5
44055: PUSH
44056: LD_INT 1
44058: ARRAY
44059: PPUSH
44060: LD_VAR 0 5
44064: PUSH
44065: LD_INT 2
44067: ARRAY
44068: PPUSH
44069: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
44073: LD_ADDR_EXP 129
44077: PUSH
44078: LD_EXP 129
44082: PPUSH
44083: LD_VAR 0 4
44087: PPUSH
44088: LD_EXP 129
44092: PUSH
44093: LD_VAR 0 4
44097: ARRAY
44098: PPUSH
44099: LD_VAR 0 3
44103: PPUSH
44104: CALL_OW 3
44108: PPUSH
44109: CALL_OW 1
44113: ST_TO_ADDR
// end ; end ;
44114: GO 43943
44116: POP
44117: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
44118: LD_VAR 0 1
44122: PPUSH
44123: LD_EXP 129
44127: PUSH
44128: LD_VAR 0 4
44132: ARRAY
44133: PUSH
44134: LD_INT 0
44136: PLUS
44137: PPUSH
44138: CALL_OW 505
// end ;
44142: LD_VAR 0 2
44146: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
44147: LD_INT 0
44149: PPUSH
44150: PPUSH
44151: PPUSH
44152: PPUSH
// if not hack in hackTanks then
44153: LD_VAR 0 1
44157: PUSH
44158: LD_EXP 128
44162: IN
44163: NOT
44164: IFFALSE 44168
// exit ;
44166: GO 44253
// index := GetElementIndex ( hackTanks , hack ) ;
44168: LD_ADDR_VAR 0 5
44172: PUSH
44173: LD_EXP 128
44177: PPUSH
44178: LD_VAR 0 1
44182: PPUSH
44183: CALL 51043 0 2
44187: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
44188: LD_ADDR_VAR 0 4
44192: PUSH
44193: DOUBLE
44194: LD_INT 1
44196: DEC
44197: ST_TO_ADDR
44198: LD_EXP 129
44202: PUSH
44203: LD_VAR 0 5
44207: ARRAY
44208: PUSH
44209: FOR_TO
44210: IFFALSE 44251
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
44212: LD_EXP 129
44216: PUSH
44217: LD_VAR 0 5
44221: ARRAY
44222: PUSH
44223: LD_VAR 0 4
44227: ARRAY
44228: PUSH
44229: LD_INT 1
44231: ARRAY
44232: PUSH
44233: LD_VAR 0 2
44237: EQUAL
44238: IFFALSE 44249
// KillUnit ( vehicle ) ;
44240: LD_VAR 0 2
44244: PPUSH
44245: CALL_OW 66
44249: GO 44209
44251: POP
44252: POP
// end ;
44253: LD_VAR 0 3
44257: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
44258: LD_EXP 133
44262: NOT
44263: IFFALSE 44298
44265: GO 44267
44267: DISABLE
// begin initMiner := true ;
44268: LD_ADDR_EXP 133
44272: PUSH
44273: LD_INT 1
44275: ST_TO_ADDR
// minersList := [ ] ;
44276: LD_ADDR_EXP 134
44280: PUSH
44281: EMPTY
44282: ST_TO_ADDR
// minerMinesList := [ ] ;
44283: LD_ADDR_EXP 135
44287: PUSH
44288: EMPTY
44289: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
44290: LD_ADDR_EXP 136
44294: PUSH
44295: LD_INT 5
44297: ST_TO_ADDR
// end ;
44298: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
44299: LD_EXP 133
44303: PUSH
44304: LD_INT 34
44306: PUSH
44307: LD_EXP 55
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PPUSH
44316: CALL_OW 69
44320: AND
44321: IFFALSE 44784
44323: GO 44325
44325: DISABLE
44326: LD_INT 0
44328: PPUSH
44329: PPUSH
44330: PPUSH
44331: PPUSH
// begin enable ;
44332: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
44333: LD_ADDR_VAR 0 1
44337: PUSH
44338: LD_INT 34
44340: PUSH
44341: LD_EXP 55
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PPUSH
44350: CALL_OW 69
44354: PUSH
44355: FOR_IN
44356: IFFALSE 44428
// begin if not i in minersList then
44358: LD_VAR 0 1
44362: PUSH
44363: LD_EXP 134
44367: IN
44368: NOT
44369: IFFALSE 44426
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
44371: LD_ADDR_EXP 134
44375: PUSH
44376: LD_EXP 134
44380: PPUSH
44381: LD_EXP 134
44385: PUSH
44386: LD_INT 1
44388: PLUS
44389: PPUSH
44390: LD_VAR 0 1
44394: PPUSH
44395: CALL_OW 1
44399: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
44400: LD_ADDR_EXP 135
44404: PUSH
44405: LD_EXP 135
44409: PPUSH
44410: LD_EXP 135
44414: PUSH
44415: LD_INT 1
44417: PLUS
44418: PPUSH
44419: EMPTY
44420: PPUSH
44421: CALL_OW 1
44425: ST_TO_ADDR
// end end ;
44426: GO 44355
44428: POP
44429: POP
// for i := minerMinesList downto 1 do
44430: LD_ADDR_VAR 0 1
44434: PUSH
44435: DOUBLE
44436: LD_EXP 135
44440: INC
44441: ST_TO_ADDR
44442: LD_INT 1
44444: PUSH
44445: FOR_DOWNTO
44446: IFFALSE 44782
// begin if IsLive ( minersList [ i ] ) then
44448: LD_EXP 134
44452: PUSH
44453: LD_VAR 0 1
44457: ARRAY
44458: PPUSH
44459: CALL_OW 300
44463: IFFALSE 44491
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
44465: LD_EXP 134
44469: PUSH
44470: LD_VAR 0 1
44474: ARRAY
44475: PPUSH
44476: LD_EXP 135
44480: PUSH
44481: LD_VAR 0 1
44485: ARRAY
44486: PPUSH
44487: CALL_OW 505
// if not minerMinesList [ i ] then
44491: LD_EXP 135
44495: PUSH
44496: LD_VAR 0 1
44500: ARRAY
44501: NOT
44502: IFFALSE 44506
// continue ;
44504: GO 44445
// for j := minerMinesList [ i ] downto 1 do
44506: LD_ADDR_VAR 0 2
44510: PUSH
44511: DOUBLE
44512: LD_EXP 135
44516: PUSH
44517: LD_VAR 0 1
44521: ARRAY
44522: INC
44523: ST_TO_ADDR
44524: LD_INT 1
44526: PUSH
44527: FOR_DOWNTO
44528: IFFALSE 44778
// begin side := GetSide ( minersList [ i ] ) ;
44530: LD_ADDR_VAR 0 3
44534: PUSH
44535: LD_EXP 134
44539: PUSH
44540: LD_VAR 0 1
44544: ARRAY
44545: PPUSH
44546: CALL_OW 255
44550: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
44551: LD_ADDR_VAR 0 4
44555: PUSH
44556: LD_EXP 135
44560: PUSH
44561: LD_VAR 0 1
44565: ARRAY
44566: PUSH
44567: LD_VAR 0 2
44571: ARRAY
44572: PUSH
44573: LD_INT 1
44575: ARRAY
44576: PPUSH
44577: LD_EXP 135
44581: PUSH
44582: LD_VAR 0 1
44586: ARRAY
44587: PUSH
44588: LD_VAR 0 2
44592: ARRAY
44593: PUSH
44594: LD_INT 2
44596: ARRAY
44597: PPUSH
44598: CALL_OW 428
44602: ST_TO_ADDR
// if not tmp then
44603: LD_VAR 0 4
44607: NOT
44608: IFFALSE 44612
// continue ;
44610: GO 44527
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
44612: LD_VAR 0 4
44616: PUSH
44617: LD_INT 81
44619: PUSH
44620: LD_VAR 0 3
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PPUSH
44629: CALL_OW 69
44633: IN
44634: PUSH
44635: LD_EXP 135
44639: PUSH
44640: LD_VAR 0 1
44644: ARRAY
44645: PUSH
44646: LD_VAR 0 2
44650: ARRAY
44651: PUSH
44652: LD_INT 1
44654: ARRAY
44655: PPUSH
44656: LD_EXP 135
44660: PUSH
44661: LD_VAR 0 1
44665: ARRAY
44666: PUSH
44667: LD_VAR 0 2
44671: ARRAY
44672: PUSH
44673: LD_INT 2
44675: ARRAY
44676: PPUSH
44677: CALL_OW 458
44681: AND
44682: IFFALSE 44776
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
44684: LD_EXP 135
44688: PUSH
44689: LD_VAR 0 1
44693: ARRAY
44694: PUSH
44695: LD_VAR 0 2
44699: ARRAY
44700: PUSH
44701: LD_INT 1
44703: ARRAY
44704: PPUSH
44705: LD_EXP 135
44709: PUSH
44710: LD_VAR 0 1
44714: ARRAY
44715: PUSH
44716: LD_VAR 0 2
44720: ARRAY
44721: PUSH
44722: LD_INT 2
44724: ARRAY
44725: PPUSH
44726: LD_VAR 0 3
44730: PPUSH
44731: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
44735: LD_ADDR_EXP 135
44739: PUSH
44740: LD_EXP 135
44744: PPUSH
44745: LD_VAR 0 1
44749: PPUSH
44750: LD_EXP 135
44754: PUSH
44755: LD_VAR 0 1
44759: ARRAY
44760: PPUSH
44761: LD_VAR 0 2
44765: PPUSH
44766: CALL_OW 3
44770: PPUSH
44771: CALL_OW 1
44775: ST_TO_ADDR
// end ; end ;
44776: GO 44527
44778: POP
44779: POP
// end ;
44780: GO 44445
44782: POP
44783: POP
// end ;
44784: PPOPN 4
44786: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
44787: LD_INT 0
44789: PPUSH
44790: PPUSH
// result := false ;
44791: LD_ADDR_VAR 0 4
44795: PUSH
44796: LD_INT 0
44798: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
44799: LD_VAR 0 1
44803: PPUSH
44804: CALL_OW 264
44808: PUSH
44809: LD_EXP 55
44813: EQUAL
44814: NOT
44815: IFFALSE 44819
// exit ;
44817: GO 45059
// index := GetElementIndex ( minersList , unit ) ;
44819: LD_ADDR_VAR 0 5
44823: PUSH
44824: LD_EXP 134
44828: PPUSH
44829: LD_VAR 0 1
44833: PPUSH
44834: CALL 51043 0 2
44838: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
44839: LD_EXP 135
44843: PUSH
44844: LD_VAR 0 5
44848: ARRAY
44849: PUSH
44850: LD_EXP 136
44854: GREATEREQUAL
44855: IFFALSE 44859
// exit ;
44857: GO 45059
// ComMoveXY ( unit , x , y ) ;
44859: LD_VAR 0 1
44863: PPUSH
44864: LD_VAR 0 2
44868: PPUSH
44869: LD_VAR 0 3
44873: PPUSH
44874: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
44878: LD_INT 35
44880: PPUSH
44881: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
44885: LD_VAR 0 1
44889: PPUSH
44890: LD_VAR 0 2
44894: PPUSH
44895: LD_VAR 0 3
44899: PPUSH
44900: CALL 81762 0 3
44904: NOT
44905: PUSH
44906: LD_VAR 0 1
44910: PPUSH
44911: CALL_OW 314
44915: AND
44916: IFFALSE 44920
// exit ;
44918: GO 45059
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
44920: LD_VAR 0 2
44924: PPUSH
44925: LD_VAR 0 3
44929: PPUSH
44930: CALL_OW 428
44934: PUSH
44935: LD_VAR 0 1
44939: EQUAL
44940: PUSH
44941: LD_VAR 0 1
44945: PPUSH
44946: CALL_OW 314
44950: NOT
44951: AND
44952: IFFALSE 44878
// PlaySoundXY ( x , y , PlantMine ) ;
44954: LD_VAR 0 2
44958: PPUSH
44959: LD_VAR 0 3
44963: PPUSH
44964: LD_STRING PlantMine
44966: PPUSH
44967: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
44971: LD_VAR 0 2
44975: PPUSH
44976: LD_VAR 0 3
44980: PPUSH
44981: LD_VAR 0 1
44985: PPUSH
44986: CALL_OW 255
44990: PPUSH
44991: LD_INT 0
44993: PPUSH
44994: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
44998: LD_ADDR_EXP 135
45002: PUSH
45003: LD_EXP 135
45007: PPUSH
45008: LD_VAR 0 5
45012: PUSH
45013: LD_EXP 135
45017: PUSH
45018: LD_VAR 0 5
45022: ARRAY
45023: PUSH
45024: LD_INT 1
45026: PLUS
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PPUSH
45032: LD_VAR 0 2
45036: PUSH
45037: LD_VAR 0 3
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PPUSH
45046: CALL 51258 0 3
45050: ST_TO_ADDR
// result := true ;
45051: LD_ADDR_VAR 0 4
45055: PUSH
45056: LD_INT 1
45058: ST_TO_ADDR
// end ;
45059: LD_VAR 0 4
45063: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
45064: LD_INT 0
45066: PPUSH
45067: PPUSH
45068: PPUSH
// if not unit in minersList then
45069: LD_VAR 0 1
45073: PUSH
45074: LD_EXP 134
45078: IN
45079: NOT
45080: IFFALSE 45084
// exit ;
45082: GO 45476
// index := GetElementIndex ( minersList , unit ) ;
45084: LD_ADDR_VAR 0 6
45088: PUSH
45089: LD_EXP 134
45093: PPUSH
45094: LD_VAR 0 1
45098: PPUSH
45099: CALL 51043 0 2
45103: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
45104: LD_ADDR_VAR 0 5
45108: PUSH
45109: DOUBLE
45110: LD_EXP 135
45114: PUSH
45115: LD_VAR 0 6
45119: ARRAY
45120: INC
45121: ST_TO_ADDR
45122: LD_INT 1
45124: PUSH
45125: FOR_DOWNTO
45126: IFFALSE 45287
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
45128: LD_EXP 135
45132: PUSH
45133: LD_VAR 0 6
45137: ARRAY
45138: PUSH
45139: LD_VAR 0 5
45143: ARRAY
45144: PUSH
45145: LD_INT 1
45147: ARRAY
45148: PUSH
45149: LD_VAR 0 2
45153: EQUAL
45154: PUSH
45155: LD_EXP 135
45159: PUSH
45160: LD_VAR 0 6
45164: ARRAY
45165: PUSH
45166: LD_VAR 0 5
45170: ARRAY
45171: PUSH
45172: LD_INT 2
45174: ARRAY
45175: PUSH
45176: LD_VAR 0 3
45180: EQUAL
45181: AND
45182: IFFALSE 45285
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
45184: LD_EXP 135
45188: PUSH
45189: LD_VAR 0 6
45193: ARRAY
45194: PUSH
45195: LD_VAR 0 5
45199: ARRAY
45200: PUSH
45201: LD_INT 1
45203: ARRAY
45204: PPUSH
45205: LD_EXP 135
45209: PUSH
45210: LD_VAR 0 6
45214: ARRAY
45215: PUSH
45216: LD_VAR 0 5
45220: ARRAY
45221: PUSH
45222: LD_INT 2
45224: ARRAY
45225: PPUSH
45226: LD_VAR 0 1
45230: PPUSH
45231: CALL_OW 255
45235: PPUSH
45236: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
45240: LD_ADDR_EXP 135
45244: PUSH
45245: LD_EXP 135
45249: PPUSH
45250: LD_VAR 0 6
45254: PPUSH
45255: LD_EXP 135
45259: PUSH
45260: LD_VAR 0 6
45264: ARRAY
45265: PPUSH
45266: LD_VAR 0 5
45270: PPUSH
45271: CALL_OW 3
45275: PPUSH
45276: CALL_OW 1
45280: ST_TO_ADDR
// exit ;
45281: POP
45282: POP
45283: GO 45476
// end ; end ;
45285: GO 45125
45287: POP
45288: POP
// for i := minerMinesList [ index ] downto 1 do
45289: LD_ADDR_VAR 0 5
45293: PUSH
45294: DOUBLE
45295: LD_EXP 135
45299: PUSH
45300: LD_VAR 0 6
45304: ARRAY
45305: INC
45306: ST_TO_ADDR
45307: LD_INT 1
45309: PUSH
45310: FOR_DOWNTO
45311: IFFALSE 45474
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
45313: LD_EXP 135
45317: PUSH
45318: LD_VAR 0 6
45322: ARRAY
45323: PUSH
45324: LD_VAR 0 5
45328: ARRAY
45329: PUSH
45330: LD_INT 1
45332: ARRAY
45333: PPUSH
45334: LD_EXP 135
45338: PUSH
45339: LD_VAR 0 6
45343: ARRAY
45344: PUSH
45345: LD_VAR 0 5
45349: ARRAY
45350: PUSH
45351: LD_INT 2
45353: ARRAY
45354: PPUSH
45355: LD_VAR 0 2
45359: PPUSH
45360: LD_VAR 0 3
45364: PPUSH
45365: CALL_OW 298
45369: PUSH
45370: LD_INT 6
45372: LESS
45373: IFFALSE 45472
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
45375: LD_EXP 135
45379: PUSH
45380: LD_VAR 0 6
45384: ARRAY
45385: PUSH
45386: LD_VAR 0 5
45390: ARRAY
45391: PUSH
45392: LD_INT 1
45394: ARRAY
45395: PPUSH
45396: LD_EXP 135
45400: PUSH
45401: LD_VAR 0 6
45405: ARRAY
45406: PUSH
45407: LD_VAR 0 5
45411: ARRAY
45412: PUSH
45413: LD_INT 2
45415: ARRAY
45416: PPUSH
45417: LD_VAR 0 1
45421: PPUSH
45422: CALL_OW 255
45426: PPUSH
45427: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
45431: LD_ADDR_EXP 135
45435: PUSH
45436: LD_EXP 135
45440: PPUSH
45441: LD_VAR 0 6
45445: PPUSH
45446: LD_EXP 135
45450: PUSH
45451: LD_VAR 0 6
45455: ARRAY
45456: PPUSH
45457: LD_VAR 0 5
45461: PPUSH
45462: CALL_OW 3
45466: PPUSH
45467: CALL_OW 1
45471: ST_TO_ADDR
// end ; end ;
45472: GO 45310
45474: POP
45475: POP
// end ;
45476: LD_VAR 0 4
45480: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
45481: LD_INT 0
45483: PPUSH
45484: PPUSH
45485: PPUSH
45486: PPUSH
45487: PPUSH
45488: PPUSH
45489: PPUSH
45490: PPUSH
45491: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
45492: LD_VAR 0 1
45496: PPUSH
45497: CALL_OW 264
45501: PUSH
45502: LD_EXP 55
45506: EQUAL
45507: NOT
45508: PUSH
45509: LD_VAR 0 1
45513: PUSH
45514: LD_EXP 134
45518: IN
45519: NOT
45520: OR
45521: IFFALSE 45525
// exit ;
45523: GO 45847
// index := GetElementIndex ( minersList , unit ) ;
45525: LD_ADDR_VAR 0 6
45529: PUSH
45530: LD_EXP 134
45534: PPUSH
45535: LD_VAR 0 1
45539: PPUSH
45540: CALL 51043 0 2
45544: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
45545: LD_ADDR_VAR 0 8
45549: PUSH
45550: LD_EXP 136
45554: PUSH
45555: LD_EXP 135
45559: PUSH
45560: LD_VAR 0 6
45564: ARRAY
45565: MINUS
45566: ST_TO_ADDR
// if not minesFreeAmount then
45567: LD_VAR 0 8
45571: NOT
45572: IFFALSE 45576
// exit ;
45574: GO 45847
// tmp := [ ] ;
45576: LD_ADDR_VAR 0 7
45580: PUSH
45581: EMPTY
45582: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
45583: LD_ADDR_VAR 0 5
45587: PUSH
45588: DOUBLE
45589: LD_INT 1
45591: DEC
45592: ST_TO_ADDR
45593: LD_VAR 0 8
45597: PUSH
45598: FOR_TO
45599: IFFALSE 45794
// begin _d := rand ( 0 , 5 ) ;
45601: LD_ADDR_VAR 0 11
45605: PUSH
45606: LD_INT 0
45608: PPUSH
45609: LD_INT 5
45611: PPUSH
45612: CALL_OW 12
45616: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
45617: LD_ADDR_VAR 0 12
45621: PUSH
45622: LD_INT 2
45624: PPUSH
45625: LD_INT 6
45627: PPUSH
45628: CALL_OW 12
45632: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
45633: LD_ADDR_VAR 0 9
45637: PUSH
45638: LD_VAR 0 2
45642: PPUSH
45643: LD_VAR 0 11
45647: PPUSH
45648: LD_VAR 0 12
45652: PPUSH
45653: CALL_OW 272
45657: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
45658: LD_ADDR_VAR 0 10
45662: PUSH
45663: LD_VAR 0 3
45667: PPUSH
45668: LD_VAR 0 11
45672: PPUSH
45673: LD_VAR 0 12
45677: PPUSH
45678: CALL_OW 273
45682: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
45683: LD_VAR 0 9
45687: PPUSH
45688: LD_VAR 0 10
45692: PPUSH
45693: CALL_OW 488
45697: PUSH
45698: LD_VAR 0 9
45702: PUSH
45703: LD_VAR 0 10
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_VAR 0 7
45716: IN
45717: NOT
45718: AND
45719: PUSH
45720: LD_VAR 0 9
45724: PPUSH
45725: LD_VAR 0 10
45729: PPUSH
45730: CALL_OW 458
45734: NOT
45735: AND
45736: IFFALSE 45778
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
45738: LD_ADDR_VAR 0 7
45742: PUSH
45743: LD_VAR 0 7
45747: PPUSH
45748: LD_VAR 0 7
45752: PUSH
45753: LD_INT 1
45755: PLUS
45756: PPUSH
45757: LD_VAR 0 9
45761: PUSH
45762: LD_VAR 0 10
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PPUSH
45771: CALL_OW 1
45775: ST_TO_ADDR
45776: GO 45792
// i := i - 1 ;
45778: LD_ADDR_VAR 0 5
45782: PUSH
45783: LD_VAR 0 5
45787: PUSH
45788: LD_INT 1
45790: MINUS
45791: ST_TO_ADDR
// end ;
45792: GO 45598
45794: POP
45795: POP
// for i in tmp do
45796: LD_ADDR_VAR 0 5
45800: PUSH
45801: LD_VAR 0 7
45805: PUSH
45806: FOR_IN
45807: IFFALSE 45845
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
45809: LD_VAR 0 1
45813: PPUSH
45814: LD_VAR 0 5
45818: PUSH
45819: LD_INT 1
45821: ARRAY
45822: PPUSH
45823: LD_VAR 0 5
45827: PUSH
45828: LD_INT 2
45830: ARRAY
45831: PPUSH
45832: CALL 44787 0 3
45836: NOT
45837: IFFALSE 45843
// exit ;
45839: POP
45840: POP
45841: GO 45847
45843: GO 45806
45845: POP
45846: POP
// end ;
45847: LD_VAR 0 4
45851: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
45852: LD_INT 0
45854: PPUSH
45855: PPUSH
45856: PPUSH
45857: PPUSH
45858: PPUSH
45859: PPUSH
45860: PPUSH
// if not GetClass ( unit ) = class_sniper then
45861: LD_VAR 0 1
45865: PPUSH
45866: CALL_OW 257
45870: PUSH
45871: LD_INT 5
45873: EQUAL
45874: NOT
45875: IFFALSE 45879
// exit ;
45877: GO 46267
// dist := 8 ;
45879: LD_ADDR_VAR 0 5
45883: PUSH
45884: LD_INT 8
45886: ST_TO_ADDR
// viewRange := 12 ;
45887: LD_ADDR_VAR 0 7
45891: PUSH
45892: LD_INT 12
45894: ST_TO_ADDR
// side := GetSide ( unit ) ;
45895: LD_ADDR_VAR 0 6
45899: PUSH
45900: LD_VAR 0 1
45904: PPUSH
45905: CALL_OW 255
45909: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
45910: LD_INT 61
45912: PPUSH
45913: LD_VAR 0 6
45917: PPUSH
45918: CALL_OW 321
45922: PUSH
45923: LD_INT 2
45925: EQUAL
45926: IFFALSE 45936
// viewRange := 16 ;
45928: LD_ADDR_VAR 0 7
45932: PUSH
45933: LD_INT 16
45935: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
45936: LD_VAR 0 1
45940: PPUSH
45941: LD_VAR 0 2
45945: PPUSH
45946: LD_VAR 0 3
45950: PPUSH
45951: CALL_OW 297
45955: PUSH
45956: LD_VAR 0 5
45960: GREATER
45961: IFFALSE 46040
// begin ComMoveXY ( unit , x , y ) ;
45963: LD_VAR 0 1
45967: PPUSH
45968: LD_VAR 0 2
45972: PPUSH
45973: LD_VAR 0 3
45977: PPUSH
45978: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
45982: LD_INT 35
45984: PPUSH
45985: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
45989: LD_VAR 0 1
45993: PPUSH
45994: LD_VAR 0 2
45998: PPUSH
45999: LD_VAR 0 3
46003: PPUSH
46004: CALL 81762 0 3
46008: NOT
46009: IFFALSE 46013
// exit ;
46011: GO 46267
// until GetDistUnitXY ( unit , x , y ) < dist ;
46013: LD_VAR 0 1
46017: PPUSH
46018: LD_VAR 0 2
46022: PPUSH
46023: LD_VAR 0 3
46027: PPUSH
46028: CALL_OW 297
46032: PUSH
46033: LD_VAR 0 5
46037: LESS
46038: IFFALSE 45982
// end ; ComTurnXY ( unit , x , y ) ;
46040: LD_VAR 0 1
46044: PPUSH
46045: LD_VAR 0 2
46049: PPUSH
46050: LD_VAR 0 3
46054: PPUSH
46055: CALL_OW 118
// wait ( 5 ) ;
46059: LD_INT 5
46061: PPUSH
46062: CALL_OW 67
// _d := GetDir ( unit ) ;
46066: LD_ADDR_VAR 0 10
46070: PUSH
46071: LD_VAR 0 1
46075: PPUSH
46076: CALL_OW 254
46080: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
46081: LD_ADDR_VAR 0 8
46085: PUSH
46086: LD_VAR 0 1
46090: PPUSH
46091: CALL_OW 250
46095: PPUSH
46096: LD_VAR 0 10
46100: PPUSH
46101: LD_VAR 0 5
46105: PPUSH
46106: CALL_OW 272
46110: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
46111: LD_ADDR_VAR 0 9
46115: PUSH
46116: LD_VAR 0 1
46120: PPUSH
46121: CALL_OW 251
46125: PPUSH
46126: LD_VAR 0 10
46130: PPUSH
46131: LD_VAR 0 5
46135: PPUSH
46136: CALL_OW 273
46140: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46141: LD_VAR 0 8
46145: PPUSH
46146: LD_VAR 0 9
46150: PPUSH
46151: CALL_OW 488
46155: NOT
46156: IFFALSE 46160
// exit ;
46158: GO 46267
// ComAnimCustom ( unit , 1 ) ;
46160: LD_VAR 0 1
46164: PPUSH
46165: LD_INT 1
46167: PPUSH
46168: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
46172: LD_VAR 0 8
46176: PPUSH
46177: LD_VAR 0 9
46181: PPUSH
46182: LD_VAR 0 6
46186: PPUSH
46187: LD_VAR 0 7
46191: PPUSH
46192: CALL_OW 330
// repeat wait ( 1 ) ;
46196: LD_INT 1
46198: PPUSH
46199: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
46203: LD_VAR 0 1
46207: PPUSH
46208: CALL_OW 316
46212: PUSH
46213: LD_VAR 0 1
46217: PPUSH
46218: CALL_OW 314
46222: OR
46223: PUSH
46224: LD_VAR 0 1
46228: PPUSH
46229: CALL_OW 302
46233: NOT
46234: OR
46235: PUSH
46236: LD_VAR 0 1
46240: PPUSH
46241: CALL_OW 301
46245: OR
46246: IFFALSE 46196
// RemoveSeeing ( _x , _y , side ) ;
46248: LD_VAR 0 8
46252: PPUSH
46253: LD_VAR 0 9
46257: PPUSH
46258: LD_VAR 0 6
46262: PPUSH
46263: CALL_OW 331
// end ; end_of_file
46267: LD_VAR 0 4
46271: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
46272: LD_INT 0
46274: PPUSH
46275: PPUSH
// if exist_mode then
46276: LD_VAR 0 2
46280: IFFALSE 46305
// unit := CreateCharacter ( prefix & ident ) else
46282: LD_ADDR_VAR 0 5
46286: PUSH
46287: LD_VAR 0 3
46291: PUSH
46292: LD_VAR 0 1
46296: STR
46297: PPUSH
46298: CALL_OW 34
46302: ST_TO_ADDR
46303: GO 46320
// unit := NewCharacter ( ident ) ;
46305: LD_ADDR_VAR 0 5
46309: PUSH
46310: LD_VAR 0 1
46314: PPUSH
46315: CALL_OW 25
46319: ST_TO_ADDR
// result := unit ;
46320: LD_ADDR_VAR 0 4
46324: PUSH
46325: LD_VAR 0 5
46329: ST_TO_ADDR
// end ;
46330: LD_VAR 0 4
46334: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
46335: LD_INT 0
46337: PPUSH
46338: PPUSH
// if not side or not nation then
46339: LD_VAR 0 1
46343: NOT
46344: PUSH
46345: LD_VAR 0 2
46349: NOT
46350: OR
46351: IFFALSE 46355
// exit ;
46353: GO 47123
// case nation of nation_american :
46355: LD_VAR 0 2
46359: PUSH
46360: LD_INT 1
46362: DOUBLE
46363: EQUAL
46364: IFTRUE 46368
46366: GO 46582
46368: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
46369: LD_ADDR_VAR 0 4
46373: PUSH
46374: LD_INT 35
46376: PUSH
46377: LD_INT 45
46379: PUSH
46380: LD_INT 46
46382: PUSH
46383: LD_INT 47
46385: PUSH
46386: LD_INT 82
46388: PUSH
46389: LD_INT 83
46391: PUSH
46392: LD_INT 84
46394: PUSH
46395: LD_INT 85
46397: PUSH
46398: LD_INT 86
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: LD_INT 2
46406: PUSH
46407: LD_INT 6
46409: PUSH
46410: LD_INT 15
46412: PUSH
46413: LD_INT 16
46415: PUSH
46416: LD_INT 7
46418: PUSH
46419: LD_INT 12
46421: PUSH
46422: LD_INT 13
46424: PUSH
46425: LD_INT 10
46427: PUSH
46428: LD_INT 14
46430: PUSH
46431: LD_INT 20
46433: PUSH
46434: LD_INT 21
46436: PUSH
46437: LD_INT 22
46439: PUSH
46440: LD_INT 25
46442: PUSH
46443: LD_INT 32
46445: PUSH
46446: LD_INT 27
46448: PUSH
46449: LD_INT 36
46451: PUSH
46452: LD_INT 69
46454: PUSH
46455: LD_INT 39
46457: PUSH
46458: LD_INT 34
46460: PUSH
46461: LD_INT 40
46463: PUSH
46464: LD_INT 48
46466: PUSH
46467: LD_INT 49
46469: PUSH
46470: LD_INT 50
46472: PUSH
46473: LD_INT 51
46475: PUSH
46476: LD_INT 52
46478: PUSH
46479: LD_INT 53
46481: PUSH
46482: LD_INT 54
46484: PUSH
46485: LD_INT 55
46487: PUSH
46488: LD_INT 56
46490: PUSH
46491: LD_INT 57
46493: PUSH
46494: LD_INT 58
46496: PUSH
46497: LD_INT 59
46499: PUSH
46500: LD_INT 60
46502: PUSH
46503: LD_INT 61
46505: PUSH
46506: LD_INT 62
46508: PUSH
46509: LD_INT 80
46511: PUSH
46512: LD_INT 82
46514: PUSH
46515: LD_INT 83
46517: PUSH
46518: LD_INT 84
46520: PUSH
46521: LD_INT 85
46523: PUSH
46524: LD_INT 86
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: ST_TO_ADDR
46580: GO 47047
46582: LD_INT 2
46584: DOUBLE
46585: EQUAL
46586: IFTRUE 46590
46588: GO 46816
46590: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
46591: LD_ADDR_VAR 0 4
46595: PUSH
46596: LD_INT 35
46598: PUSH
46599: LD_INT 45
46601: PUSH
46602: LD_INT 46
46604: PUSH
46605: LD_INT 47
46607: PUSH
46608: LD_INT 82
46610: PUSH
46611: LD_INT 83
46613: PUSH
46614: LD_INT 84
46616: PUSH
46617: LD_INT 85
46619: PUSH
46620: LD_INT 87
46622: PUSH
46623: LD_INT 70
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: LD_INT 11
46631: PUSH
46632: LD_INT 3
46634: PUSH
46635: LD_INT 4
46637: PUSH
46638: LD_INT 5
46640: PUSH
46641: LD_INT 6
46643: PUSH
46644: LD_INT 15
46646: PUSH
46647: LD_INT 18
46649: PUSH
46650: LD_INT 7
46652: PUSH
46653: LD_INT 17
46655: PUSH
46656: LD_INT 8
46658: PUSH
46659: LD_INT 20
46661: PUSH
46662: LD_INT 21
46664: PUSH
46665: LD_INT 22
46667: PUSH
46668: LD_INT 72
46670: PUSH
46671: LD_INT 26
46673: PUSH
46674: LD_INT 69
46676: PUSH
46677: LD_INT 39
46679: PUSH
46680: LD_INT 40
46682: PUSH
46683: LD_INT 41
46685: PUSH
46686: LD_INT 42
46688: PUSH
46689: LD_INT 43
46691: PUSH
46692: LD_INT 48
46694: PUSH
46695: LD_INT 49
46697: PUSH
46698: LD_INT 50
46700: PUSH
46701: LD_INT 51
46703: PUSH
46704: LD_INT 52
46706: PUSH
46707: LD_INT 53
46709: PUSH
46710: LD_INT 54
46712: PUSH
46713: LD_INT 55
46715: PUSH
46716: LD_INT 56
46718: PUSH
46719: LD_INT 60
46721: PUSH
46722: LD_INT 61
46724: PUSH
46725: LD_INT 62
46727: PUSH
46728: LD_INT 66
46730: PUSH
46731: LD_INT 67
46733: PUSH
46734: LD_INT 68
46736: PUSH
46737: LD_INT 81
46739: PUSH
46740: LD_INT 82
46742: PUSH
46743: LD_INT 83
46745: PUSH
46746: LD_INT 84
46748: PUSH
46749: LD_INT 85
46751: PUSH
46752: LD_INT 87
46754: PUSH
46755: LD_INT 88
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: ST_TO_ADDR
46814: GO 47047
46816: LD_INT 3
46818: DOUBLE
46819: EQUAL
46820: IFTRUE 46824
46822: GO 47046
46824: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
46825: LD_ADDR_VAR 0 4
46829: PUSH
46830: LD_INT 46
46832: PUSH
46833: LD_INT 47
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: LD_INT 82
46844: PUSH
46845: LD_INT 83
46847: PUSH
46848: LD_INT 84
46850: PUSH
46851: LD_INT 85
46853: PUSH
46854: LD_INT 86
46856: PUSH
46857: LD_INT 11
46859: PUSH
46860: LD_INT 9
46862: PUSH
46863: LD_INT 20
46865: PUSH
46866: LD_INT 19
46868: PUSH
46869: LD_INT 21
46871: PUSH
46872: LD_INT 24
46874: PUSH
46875: LD_INT 22
46877: PUSH
46878: LD_INT 25
46880: PUSH
46881: LD_INT 28
46883: PUSH
46884: LD_INT 29
46886: PUSH
46887: LD_INT 30
46889: PUSH
46890: LD_INT 31
46892: PUSH
46893: LD_INT 37
46895: PUSH
46896: LD_INT 38
46898: PUSH
46899: LD_INT 32
46901: PUSH
46902: LD_INT 27
46904: PUSH
46905: LD_INT 33
46907: PUSH
46908: LD_INT 69
46910: PUSH
46911: LD_INT 39
46913: PUSH
46914: LD_INT 34
46916: PUSH
46917: LD_INT 40
46919: PUSH
46920: LD_INT 71
46922: PUSH
46923: LD_INT 23
46925: PUSH
46926: LD_INT 44
46928: PUSH
46929: LD_INT 48
46931: PUSH
46932: LD_INT 49
46934: PUSH
46935: LD_INT 50
46937: PUSH
46938: LD_INT 51
46940: PUSH
46941: LD_INT 52
46943: PUSH
46944: LD_INT 53
46946: PUSH
46947: LD_INT 54
46949: PUSH
46950: LD_INT 55
46952: PUSH
46953: LD_INT 56
46955: PUSH
46956: LD_INT 57
46958: PUSH
46959: LD_INT 58
46961: PUSH
46962: LD_INT 59
46964: PUSH
46965: LD_INT 63
46967: PUSH
46968: LD_INT 64
46970: PUSH
46971: LD_INT 65
46973: PUSH
46974: LD_INT 82
46976: PUSH
46977: LD_INT 83
46979: PUSH
46980: LD_INT 84
46982: PUSH
46983: LD_INT 85
46985: PUSH
46986: LD_INT 86
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: ST_TO_ADDR
47044: GO 47047
47046: POP
// if state > - 1 and state < 3 then
47047: LD_VAR 0 3
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: GREATER
47056: PUSH
47057: LD_VAR 0 3
47061: PUSH
47062: LD_INT 3
47064: LESS
47065: AND
47066: IFFALSE 47123
// for i in result do
47068: LD_ADDR_VAR 0 5
47072: PUSH
47073: LD_VAR 0 4
47077: PUSH
47078: FOR_IN
47079: IFFALSE 47121
// if GetTech ( i , side ) <> state then
47081: LD_VAR 0 5
47085: PPUSH
47086: LD_VAR 0 1
47090: PPUSH
47091: CALL_OW 321
47095: PUSH
47096: LD_VAR 0 3
47100: NONEQUAL
47101: IFFALSE 47119
// result := result diff i ;
47103: LD_ADDR_VAR 0 4
47107: PUSH
47108: LD_VAR 0 4
47112: PUSH
47113: LD_VAR 0 5
47117: DIFF
47118: ST_TO_ADDR
47119: GO 47078
47121: POP
47122: POP
// end ;
47123: LD_VAR 0 4
47127: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
47128: LD_INT 0
47130: PPUSH
47131: PPUSH
47132: PPUSH
// result := true ;
47133: LD_ADDR_VAR 0 3
47137: PUSH
47138: LD_INT 1
47140: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
47141: LD_ADDR_VAR 0 5
47145: PUSH
47146: LD_VAR 0 2
47150: PPUSH
47151: CALL_OW 480
47155: ST_TO_ADDR
// if not tmp then
47156: LD_VAR 0 5
47160: NOT
47161: IFFALSE 47165
// exit ;
47163: GO 47214
// for i in tmp do
47165: LD_ADDR_VAR 0 4
47169: PUSH
47170: LD_VAR 0 5
47174: PUSH
47175: FOR_IN
47176: IFFALSE 47212
// if GetTech ( i , side ) <> state_researched then
47178: LD_VAR 0 4
47182: PPUSH
47183: LD_VAR 0 1
47187: PPUSH
47188: CALL_OW 321
47192: PUSH
47193: LD_INT 2
47195: NONEQUAL
47196: IFFALSE 47210
// begin result := false ;
47198: LD_ADDR_VAR 0 3
47202: PUSH
47203: LD_INT 0
47205: ST_TO_ADDR
// exit ;
47206: POP
47207: POP
47208: GO 47214
// end ;
47210: GO 47175
47212: POP
47213: POP
// end ;
47214: LD_VAR 0 3
47218: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
47219: LD_INT 0
47221: PPUSH
47222: PPUSH
47223: PPUSH
47224: PPUSH
47225: PPUSH
47226: PPUSH
47227: PPUSH
47228: PPUSH
47229: PPUSH
47230: PPUSH
47231: PPUSH
47232: PPUSH
47233: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
47234: LD_VAR 0 1
47238: NOT
47239: PUSH
47240: LD_VAR 0 1
47244: PPUSH
47245: CALL_OW 257
47249: PUSH
47250: LD_INT 9
47252: NONEQUAL
47253: OR
47254: IFFALSE 47258
// exit ;
47256: GO 47831
// side := GetSide ( unit ) ;
47258: LD_ADDR_VAR 0 9
47262: PUSH
47263: LD_VAR 0 1
47267: PPUSH
47268: CALL_OW 255
47272: ST_TO_ADDR
// tech_space := tech_spacanom ;
47273: LD_ADDR_VAR 0 12
47277: PUSH
47278: LD_INT 29
47280: ST_TO_ADDR
// tech_time := tech_taurad ;
47281: LD_ADDR_VAR 0 13
47285: PUSH
47286: LD_INT 28
47288: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
47289: LD_ADDR_VAR 0 11
47293: PUSH
47294: LD_VAR 0 1
47298: PPUSH
47299: CALL_OW 310
47303: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
47304: LD_VAR 0 11
47308: PPUSH
47309: CALL_OW 247
47313: PUSH
47314: LD_INT 2
47316: EQUAL
47317: IFFALSE 47321
// exit ;
47319: GO 47831
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47321: LD_ADDR_VAR 0 8
47325: PUSH
47326: LD_INT 81
47328: PUSH
47329: LD_VAR 0 9
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 3
47340: PUSH
47341: LD_INT 21
47343: PUSH
47344: LD_INT 3
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PPUSH
47359: CALL_OW 69
47363: ST_TO_ADDR
// if not tmp then
47364: LD_VAR 0 8
47368: NOT
47369: IFFALSE 47373
// exit ;
47371: GO 47831
// if in_unit then
47373: LD_VAR 0 11
47377: IFFALSE 47401
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
47379: LD_ADDR_VAR 0 10
47383: PUSH
47384: LD_VAR 0 8
47388: PPUSH
47389: LD_VAR 0 11
47393: PPUSH
47394: CALL_OW 74
47398: ST_TO_ADDR
47399: GO 47421
// enemy := NearestUnitToUnit ( tmp , unit ) ;
47401: LD_ADDR_VAR 0 10
47405: PUSH
47406: LD_VAR 0 8
47410: PPUSH
47411: LD_VAR 0 1
47415: PPUSH
47416: CALL_OW 74
47420: ST_TO_ADDR
// if not enemy then
47421: LD_VAR 0 10
47425: NOT
47426: IFFALSE 47430
// exit ;
47428: GO 47831
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
47430: LD_VAR 0 11
47434: PUSH
47435: LD_VAR 0 11
47439: PPUSH
47440: LD_VAR 0 10
47444: PPUSH
47445: CALL_OW 296
47449: PUSH
47450: LD_INT 13
47452: GREATER
47453: AND
47454: PUSH
47455: LD_VAR 0 1
47459: PPUSH
47460: LD_VAR 0 10
47464: PPUSH
47465: CALL_OW 296
47469: PUSH
47470: LD_INT 12
47472: GREATER
47473: OR
47474: IFFALSE 47478
// exit ;
47476: GO 47831
// missile := [ 1 ] ;
47478: LD_ADDR_VAR 0 14
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: EMPTY
47487: LIST
47488: ST_TO_ADDR
// if Researched ( side , tech_space ) then
47489: LD_VAR 0 9
47493: PPUSH
47494: LD_VAR 0 12
47498: PPUSH
47499: CALL_OW 325
47503: IFFALSE 47532
// missile := Replace ( missile , missile + 1 , 2 ) ;
47505: LD_ADDR_VAR 0 14
47509: PUSH
47510: LD_VAR 0 14
47514: PPUSH
47515: LD_VAR 0 14
47519: PUSH
47520: LD_INT 1
47522: PLUS
47523: PPUSH
47524: LD_INT 2
47526: PPUSH
47527: CALL_OW 1
47531: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
47532: LD_VAR 0 9
47536: PPUSH
47537: LD_VAR 0 13
47541: PPUSH
47542: CALL_OW 325
47546: PUSH
47547: LD_VAR 0 10
47551: PPUSH
47552: CALL_OW 255
47556: PPUSH
47557: LD_VAR 0 13
47561: PPUSH
47562: CALL_OW 325
47566: NOT
47567: AND
47568: IFFALSE 47597
// missile := Replace ( missile , missile + 1 , 3 ) ;
47570: LD_ADDR_VAR 0 14
47574: PUSH
47575: LD_VAR 0 14
47579: PPUSH
47580: LD_VAR 0 14
47584: PUSH
47585: LD_INT 1
47587: PLUS
47588: PPUSH
47589: LD_INT 3
47591: PPUSH
47592: CALL_OW 1
47596: ST_TO_ADDR
// if missile < 2 then
47597: LD_VAR 0 14
47601: PUSH
47602: LD_INT 2
47604: LESS
47605: IFFALSE 47609
// exit ;
47607: GO 47831
// x := GetX ( enemy ) ;
47609: LD_ADDR_VAR 0 4
47613: PUSH
47614: LD_VAR 0 10
47618: PPUSH
47619: CALL_OW 250
47623: ST_TO_ADDR
// y := GetY ( enemy ) ;
47624: LD_ADDR_VAR 0 5
47628: PUSH
47629: LD_VAR 0 10
47633: PPUSH
47634: CALL_OW 251
47638: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
47639: LD_ADDR_VAR 0 6
47643: PUSH
47644: LD_VAR 0 4
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PPUSH
47653: LD_INT 1
47655: PPUSH
47656: CALL_OW 12
47660: PLUS
47661: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
47662: LD_ADDR_VAR 0 7
47666: PUSH
47667: LD_VAR 0 5
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PPUSH
47676: LD_INT 1
47678: PPUSH
47679: CALL_OW 12
47683: PLUS
47684: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47685: LD_VAR 0 6
47689: PPUSH
47690: LD_VAR 0 7
47694: PPUSH
47695: CALL_OW 488
47699: NOT
47700: IFFALSE 47722
// begin _x := x ;
47702: LD_ADDR_VAR 0 6
47706: PUSH
47707: LD_VAR 0 4
47711: ST_TO_ADDR
// _y := y ;
47712: LD_ADDR_VAR 0 7
47716: PUSH
47717: LD_VAR 0 5
47721: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
47722: LD_ADDR_VAR 0 3
47726: PUSH
47727: LD_INT 1
47729: PPUSH
47730: LD_VAR 0 14
47734: PPUSH
47735: CALL_OW 12
47739: ST_TO_ADDR
// case i of 1 :
47740: LD_VAR 0 3
47744: PUSH
47745: LD_INT 1
47747: DOUBLE
47748: EQUAL
47749: IFTRUE 47753
47751: GO 47770
47753: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
47754: LD_VAR 0 1
47758: PPUSH
47759: LD_VAR 0 10
47763: PPUSH
47764: CALL_OW 115
47768: GO 47831
47770: LD_INT 2
47772: DOUBLE
47773: EQUAL
47774: IFTRUE 47778
47776: GO 47800
47778: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
47779: LD_VAR 0 1
47783: PPUSH
47784: LD_VAR 0 6
47788: PPUSH
47789: LD_VAR 0 7
47793: PPUSH
47794: CALL_OW 153
47798: GO 47831
47800: LD_INT 3
47802: DOUBLE
47803: EQUAL
47804: IFTRUE 47808
47806: GO 47830
47808: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
47809: LD_VAR 0 1
47813: PPUSH
47814: LD_VAR 0 6
47818: PPUSH
47819: LD_VAR 0 7
47823: PPUSH
47824: CALL_OW 154
47828: GO 47831
47830: POP
// end ;
47831: LD_VAR 0 2
47835: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
47836: LD_INT 0
47838: PPUSH
47839: PPUSH
47840: PPUSH
47841: PPUSH
47842: PPUSH
47843: PPUSH
// if not unit or not building then
47844: LD_VAR 0 1
47848: NOT
47849: PUSH
47850: LD_VAR 0 2
47854: NOT
47855: OR
47856: IFFALSE 47860
// exit ;
47858: GO 48018
// x := GetX ( building ) ;
47860: LD_ADDR_VAR 0 5
47864: PUSH
47865: LD_VAR 0 2
47869: PPUSH
47870: CALL_OW 250
47874: ST_TO_ADDR
// y := GetY ( building ) ;
47875: LD_ADDR_VAR 0 6
47879: PUSH
47880: LD_VAR 0 2
47884: PPUSH
47885: CALL_OW 251
47889: ST_TO_ADDR
// for i = 0 to 5 do
47890: LD_ADDR_VAR 0 4
47894: PUSH
47895: DOUBLE
47896: LD_INT 0
47898: DEC
47899: ST_TO_ADDR
47900: LD_INT 5
47902: PUSH
47903: FOR_TO
47904: IFFALSE 48016
// begin _x := ShiftX ( x , i , 3 ) ;
47906: LD_ADDR_VAR 0 7
47910: PUSH
47911: LD_VAR 0 5
47915: PPUSH
47916: LD_VAR 0 4
47920: PPUSH
47921: LD_INT 3
47923: PPUSH
47924: CALL_OW 272
47928: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
47929: LD_ADDR_VAR 0 8
47933: PUSH
47934: LD_VAR 0 6
47938: PPUSH
47939: LD_VAR 0 4
47943: PPUSH
47944: LD_INT 3
47946: PPUSH
47947: CALL_OW 273
47951: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47952: LD_VAR 0 7
47956: PPUSH
47957: LD_VAR 0 8
47961: PPUSH
47962: CALL_OW 488
47966: NOT
47967: IFFALSE 47971
// continue ;
47969: GO 47903
// if HexInfo ( _x , _y ) = 0 then
47971: LD_VAR 0 7
47975: PPUSH
47976: LD_VAR 0 8
47980: PPUSH
47981: CALL_OW 428
47985: PUSH
47986: LD_INT 0
47988: EQUAL
47989: IFFALSE 48014
// begin ComMoveXY ( unit , _x , _y ) ;
47991: LD_VAR 0 1
47995: PPUSH
47996: LD_VAR 0 7
48000: PPUSH
48001: LD_VAR 0 8
48005: PPUSH
48006: CALL_OW 111
// exit ;
48010: POP
48011: POP
48012: GO 48018
// end ; end ;
48014: GO 47903
48016: POP
48017: POP
// end ;
48018: LD_VAR 0 3
48022: RET
// export function ScanBase ( side , base_area ) ; begin
48023: LD_INT 0
48025: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
48026: LD_ADDR_VAR 0 3
48030: PUSH
48031: LD_VAR 0 2
48035: PPUSH
48036: LD_INT 81
48038: PUSH
48039: LD_VAR 0 1
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PPUSH
48048: CALL_OW 70
48052: ST_TO_ADDR
// end ;
48053: LD_VAR 0 3
48057: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
48058: LD_INT 0
48060: PPUSH
48061: PPUSH
48062: PPUSH
48063: PPUSH
// result := false ;
48064: LD_ADDR_VAR 0 2
48068: PUSH
48069: LD_INT 0
48071: ST_TO_ADDR
// side := GetSide ( unit ) ;
48072: LD_ADDR_VAR 0 3
48076: PUSH
48077: LD_VAR 0 1
48081: PPUSH
48082: CALL_OW 255
48086: ST_TO_ADDR
// nat := GetNation ( unit ) ;
48087: LD_ADDR_VAR 0 4
48091: PUSH
48092: LD_VAR 0 1
48096: PPUSH
48097: CALL_OW 248
48101: ST_TO_ADDR
// case nat of 1 :
48102: LD_VAR 0 4
48106: PUSH
48107: LD_INT 1
48109: DOUBLE
48110: EQUAL
48111: IFTRUE 48115
48113: GO 48126
48115: POP
// tech := tech_lassight ; 2 :
48116: LD_ADDR_VAR 0 5
48120: PUSH
48121: LD_INT 12
48123: ST_TO_ADDR
48124: GO 48165
48126: LD_INT 2
48128: DOUBLE
48129: EQUAL
48130: IFTRUE 48134
48132: GO 48145
48134: POP
// tech := tech_mortar ; 3 :
48135: LD_ADDR_VAR 0 5
48139: PUSH
48140: LD_INT 41
48142: ST_TO_ADDR
48143: GO 48165
48145: LD_INT 3
48147: DOUBLE
48148: EQUAL
48149: IFTRUE 48153
48151: GO 48164
48153: POP
// tech := tech_bazooka ; end ;
48154: LD_ADDR_VAR 0 5
48158: PUSH
48159: LD_INT 44
48161: ST_TO_ADDR
48162: GO 48165
48164: POP
// if Researched ( side , tech ) then
48165: LD_VAR 0 3
48169: PPUSH
48170: LD_VAR 0 5
48174: PPUSH
48175: CALL_OW 325
48179: IFFALSE 48206
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
48181: LD_ADDR_VAR 0 2
48185: PUSH
48186: LD_INT 5
48188: PUSH
48189: LD_INT 8
48191: PUSH
48192: LD_INT 9
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: LIST
48199: PUSH
48200: LD_VAR 0 4
48204: ARRAY
48205: ST_TO_ADDR
// end ;
48206: LD_VAR 0 2
48210: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
48211: LD_INT 0
48213: PPUSH
48214: PPUSH
48215: PPUSH
// if not mines then
48216: LD_VAR 0 2
48220: NOT
48221: IFFALSE 48225
// exit ;
48223: GO 48369
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48225: LD_ADDR_VAR 0 5
48229: PUSH
48230: LD_INT 81
48232: PUSH
48233: LD_VAR 0 1
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 3
48244: PUSH
48245: LD_INT 21
48247: PUSH
48248: LD_INT 3
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PPUSH
48263: CALL_OW 69
48267: ST_TO_ADDR
// for i in mines do
48268: LD_ADDR_VAR 0 4
48272: PUSH
48273: LD_VAR 0 2
48277: PUSH
48278: FOR_IN
48279: IFFALSE 48367
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
48281: LD_VAR 0 4
48285: PUSH
48286: LD_INT 1
48288: ARRAY
48289: PPUSH
48290: LD_VAR 0 4
48294: PUSH
48295: LD_INT 2
48297: ARRAY
48298: PPUSH
48299: CALL_OW 458
48303: NOT
48304: IFFALSE 48308
// continue ;
48306: GO 48278
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
48308: LD_VAR 0 4
48312: PUSH
48313: LD_INT 1
48315: ARRAY
48316: PPUSH
48317: LD_VAR 0 4
48321: PUSH
48322: LD_INT 2
48324: ARRAY
48325: PPUSH
48326: CALL_OW 428
48330: PUSH
48331: LD_VAR 0 5
48335: IN
48336: IFFALSE 48365
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
48338: LD_VAR 0 4
48342: PUSH
48343: LD_INT 1
48345: ARRAY
48346: PPUSH
48347: LD_VAR 0 4
48351: PUSH
48352: LD_INT 2
48354: ARRAY
48355: PPUSH
48356: LD_VAR 0 1
48360: PPUSH
48361: CALL_OW 456
// end ;
48365: GO 48278
48367: POP
48368: POP
// end ;
48369: LD_VAR 0 3
48373: RET
// export function Count ( array ) ; var i ; begin
48374: LD_INT 0
48376: PPUSH
48377: PPUSH
// result := 0 ;
48378: LD_ADDR_VAR 0 2
48382: PUSH
48383: LD_INT 0
48385: ST_TO_ADDR
// for i in array do
48386: LD_ADDR_VAR 0 3
48390: PUSH
48391: LD_VAR 0 1
48395: PUSH
48396: FOR_IN
48397: IFFALSE 48421
// if i then
48399: LD_VAR 0 3
48403: IFFALSE 48419
// result := result + 1 ;
48405: LD_ADDR_VAR 0 2
48409: PUSH
48410: LD_VAR 0 2
48414: PUSH
48415: LD_INT 1
48417: PLUS
48418: ST_TO_ADDR
48419: GO 48396
48421: POP
48422: POP
// end ;
48423: LD_VAR 0 2
48427: RET
// export function IsEmpty ( building ) ; begin
48428: LD_INT 0
48430: PPUSH
// if not building then
48431: LD_VAR 0 1
48435: NOT
48436: IFFALSE 48440
// exit ;
48438: GO 48483
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
48440: LD_ADDR_VAR 0 2
48444: PUSH
48445: LD_VAR 0 1
48449: PUSH
48450: LD_INT 22
48452: PUSH
48453: LD_VAR 0 1
48457: PPUSH
48458: CALL_OW 255
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 58
48469: PUSH
48470: EMPTY
48471: LIST
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PPUSH
48477: CALL_OW 69
48481: IN
48482: ST_TO_ADDR
// end ;
48483: LD_VAR 0 2
48487: RET
// export function IsNotFull ( building ) ; begin
48488: LD_INT 0
48490: PPUSH
// if not building then
48491: LD_VAR 0 1
48495: NOT
48496: IFFALSE 48500
// exit ;
48498: GO 48519
// result := UnitsInside ( building ) < 6 ;
48500: LD_ADDR_VAR 0 2
48504: PUSH
48505: LD_VAR 0 1
48509: PPUSH
48510: CALL_OW 313
48514: PUSH
48515: LD_INT 6
48517: LESS
48518: ST_TO_ADDR
// end ;
48519: LD_VAR 0 2
48523: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
48524: LD_INT 0
48526: PPUSH
48527: PPUSH
48528: PPUSH
48529: PPUSH
// tmp := [ ] ;
48530: LD_ADDR_VAR 0 3
48534: PUSH
48535: EMPTY
48536: ST_TO_ADDR
// list := [ ] ;
48537: LD_ADDR_VAR 0 5
48541: PUSH
48542: EMPTY
48543: ST_TO_ADDR
// for i = 16 to 25 do
48544: LD_ADDR_VAR 0 4
48548: PUSH
48549: DOUBLE
48550: LD_INT 16
48552: DEC
48553: ST_TO_ADDR
48554: LD_INT 25
48556: PUSH
48557: FOR_TO
48558: IFFALSE 48631
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
48560: LD_ADDR_VAR 0 3
48564: PUSH
48565: LD_VAR 0 3
48569: PUSH
48570: LD_INT 22
48572: PUSH
48573: LD_VAR 0 1
48577: PPUSH
48578: CALL_OW 255
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 91
48589: PUSH
48590: LD_VAR 0 1
48594: PUSH
48595: LD_INT 6
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 30
48605: PUSH
48606: LD_VAR 0 4
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: LIST
48619: PUSH
48620: EMPTY
48621: LIST
48622: PPUSH
48623: CALL_OW 69
48627: ADD
48628: ST_TO_ADDR
48629: GO 48557
48631: POP
48632: POP
// for i = 1 to tmp do
48633: LD_ADDR_VAR 0 4
48637: PUSH
48638: DOUBLE
48639: LD_INT 1
48641: DEC
48642: ST_TO_ADDR
48643: LD_VAR 0 3
48647: PUSH
48648: FOR_TO
48649: IFFALSE 48737
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
48651: LD_ADDR_VAR 0 5
48655: PUSH
48656: LD_VAR 0 5
48660: PUSH
48661: LD_VAR 0 3
48665: PUSH
48666: LD_VAR 0 4
48670: ARRAY
48671: PPUSH
48672: CALL_OW 266
48676: PUSH
48677: LD_VAR 0 3
48681: PUSH
48682: LD_VAR 0 4
48686: ARRAY
48687: PPUSH
48688: CALL_OW 250
48692: PUSH
48693: LD_VAR 0 3
48697: PUSH
48698: LD_VAR 0 4
48702: ARRAY
48703: PPUSH
48704: CALL_OW 251
48708: PUSH
48709: LD_VAR 0 3
48713: PUSH
48714: LD_VAR 0 4
48718: ARRAY
48719: PPUSH
48720: CALL_OW 254
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: PUSH
48731: EMPTY
48732: LIST
48733: ADD
48734: ST_TO_ADDR
48735: GO 48648
48737: POP
48738: POP
// result := list ;
48739: LD_ADDR_VAR 0 2
48743: PUSH
48744: LD_VAR 0 5
48748: ST_TO_ADDR
// end ;
48749: LD_VAR 0 2
48753: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
48754: LD_INT 0
48756: PPUSH
48757: PPUSH
48758: PPUSH
48759: PPUSH
48760: PPUSH
48761: PPUSH
48762: PPUSH
// if not factory then
48763: LD_VAR 0 1
48767: NOT
48768: IFFALSE 48772
// exit ;
48770: GO 49365
// if control = control_apeman then
48772: LD_VAR 0 4
48776: PUSH
48777: LD_INT 5
48779: EQUAL
48780: IFFALSE 48889
// begin tmp := UnitsInside ( factory ) ;
48782: LD_ADDR_VAR 0 8
48786: PUSH
48787: LD_VAR 0 1
48791: PPUSH
48792: CALL_OW 313
48796: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
48797: LD_VAR 0 8
48801: PPUSH
48802: LD_INT 25
48804: PUSH
48805: LD_INT 12
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PPUSH
48812: CALL_OW 72
48816: NOT
48817: IFFALSE 48827
// control := control_manual ;
48819: LD_ADDR_VAR 0 4
48823: PUSH
48824: LD_INT 1
48826: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
48827: LD_ADDR_VAR 0 8
48831: PUSH
48832: LD_VAR 0 1
48836: PPUSH
48837: CALL 48524 0 1
48841: ST_TO_ADDR
// if tmp then
48842: LD_VAR 0 8
48846: IFFALSE 48889
// begin for i in tmp do
48848: LD_ADDR_VAR 0 7
48852: PUSH
48853: LD_VAR 0 8
48857: PUSH
48858: FOR_IN
48859: IFFALSE 48887
// if i [ 1 ] = b_ext_radio then
48861: LD_VAR 0 7
48865: PUSH
48866: LD_INT 1
48868: ARRAY
48869: PUSH
48870: LD_INT 22
48872: EQUAL
48873: IFFALSE 48885
// begin control := control_remote ;
48875: LD_ADDR_VAR 0 4
48879: PUSH
48880: LD_INT 2
48882: ST_TO_ADDR
// break ;
48883: GO 48887
// end ;
48885: GO 48858
48887: POP
48888: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
48889: LD_VAR 0 1
48893: PPUSH
48894: LD_VAR 0 2
48898: PPUSH
48899: LD_VAR 0 3
48903: PPUSH
48904: LD_VAR 0 4
48908: PPUSH
48909: LD_VAR 0 5
48913: PPUSH
48914: CALL_OW 448
48918: IFFALSE 48953
// begin result := [ chassis , engine , control , weapon ] ;
48920: LD_ADDR_VAR 0 6
48924: PUSH
48925: LD_VAR 0 2
48929: PUSH
48930: LD_VAR 0 3
48934: PUSH
48935: LD_VAR 0 4
48939: PUSH
48940: LD_VAR 0 5
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: ST_TO_ADDR
// exit ;
48951: GO 49365
// end ; _chassis := AvailableChassisList ( factory ) ;
48953: LD_ADDR_VAR 0 9
48957: PUSH
48958: LD_VAR 0 1
48962: PPUSH
48963: CALL_OW 475
48967: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
48968: LD_ADDR_VAR 0 11
48972: PUSH
48973: LD_VAR 0 1
48977: PPUSH
48978: CALL_OW 476
48982: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
48983: LD_ADDR_VAR 0 12
48987: PUSH
48988: LD_VAR 0 1
48992: PPUSH
48993: CALL_OW 477
48997: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
48998: LD_ADDR_VAR 0 10
49002: PUSH
49003: LD_VAR 0 1
49007: PPUSH
49008: CALL_OW 478
49012: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
49013: LD_VAR 0 9
49017: NOT
49018: PUSH
49019: LD_VAR 0 11
49023: NOT
49024: OR
49025: PUSH
49026: LD_VAR 0 12
49030: NOT
49031: OR
49032: PUSH
49033: LD_VAR 0 10
49037: NOT
49038: OR
49039: IFFALSE 49074
// begin result := [ chassis , engine , control , weapon ] ;
49041: LD_ADDR_VAR 0 6
49045: PUSH
49046: LD_VAR 0 2
49050: PUSH
49051: LD_VAR 0 3
49055: PUSH
49056: LD_VAR 0 4
49060: PUSH
49061: LD_VAR 0 5
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: ST_TO_ADDR
// exit ;
49072: GO 49365
// end ; if not chassis in _chassis then
49074: LD_VAR 0 2
49078: PUSH
49079: LD_VAR 0 9
49083: IN
49084: NOT
49085: IFFALSE 49111
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
49087: LD_ADDR_VAR 0 2
49091: PUSH
49092: LD_VAR 0 9
49096: PUSH
49097: LD_INT 1
49099: PPUSH
49100: LD_VAR 0 9
49104: PPUSH
49105: CALL_OW 12
49109: ARRAY
49110: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
49111: LD_VAR 0 2
49115: PPUSH
49116: LD_VAR 0 3
49120: PPUSH
49121: CALL 49370 0 2
49125: NOT
49126: IFFALSE 49185
// repeat engine := _engine [ 1 ] ;
49128: LD_ADDR_VAR 0 3
49132: PUSH
49133: LD_VAR 0 11
49137: PUSH
49138: LD_INT 1
49140: ARRAY
49141: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
49142: LD_ADDR_VAR 0 11
49146: PUSH
49147: LD_VAR 0 11
49151: PPUSH
49152: LD_INT 1
49154: PPUSH
49155: CALL_OW 3
49159: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
49160: LD_VAR 0 2
49164: PPUSH
49165: LD_VAR 0 3
49169: PPUSH
49170: CALL 49370 0 2
49174: PUSH
49175: LD_VAR 0 11
49179: PUSH
49180: EMPTY
49181: EQUAL
49182: OR
49183: IFFALSE 49128
// if not control in _control then
49185: LD_VAR 0 4
49189: PUSH
49190: LD_VAR 0 12
49194: IN
49195: NOT
49196: IFFALSE 49222
// control := _control [ rand ( 1 , _control ) ] ;
49198: LD_ADDR_VAR 0 4
49202: PUSH
49203: LD_VAR 0 12
49207: PUSH
49208: LD_INT 1
49210: PPUSH
49211: LD_VAR 0 12
49215: PPUSH
49216: CALL_OW 12
49220: ARRAY
49221: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
49222: LD_VAR 0 2
49226: PPUSH
49227: LD_VAR 0 5
49231: PPUSH
49232: CALL 49590 0 2
49236: NOT
49237: IFFALSE 49296
// repeat weapon := _weapon [ 1 ] ;
49239: LD_ADDR_VAR 0 5
49243: PUSH
49244: LD_VAR 0 10
49248: PUSH
49249: LD_INT 1
49251: ARRAY
49252: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
49253: LD_ADDR_VAR 0 10
49257: PUSH
49258: LD_VAR 0 10
49262: PPUSH
49263: LD_INT 1
49265: PPUSH
49266: CALL_OW 3
49270: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
49271: LD_VAR 0 2
49275: PPUSH
49276: LD_VAR 0 5
49280: PPUSH
49281: CALL 49590 0 2
49285: PUSH
49286: LD_VAR 0 10
49290: PUSH
49291: EMPTY
49292: EQUAL
49293: OR
49294: IFFALSE 49239
// result := [ ] ;
49296: LD_ADDR_VAR 0 6
49300: PUSH
49301: EMPTY
49302: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
49303: LD_VAR 0 1
49307: PPUSH
49308: LD_VAR 0 2
49312: PPUSH
49313: LD_VAR 0 3
49317: PPUSH
49318: LD_VAR 0 4
49322: PPUSH
49323: LD_VAR 0 5
49327: PPUSH
49328: CALL_OW 448
49332: IFFALSE 49365
// result := [ chassis , engine , control , weapon ] ;
49334: LD_ADDR_VAR 0 6
49338: PUSH
49339: LD_VAR 0 2
49343: PUSH
49344: LD_VAR 0 3
49348: PUSH
49349: LD_VAR 0 4
49353: PUSH
49354: LD_VAR 0 5
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: ST_TO_ADDR
// end ;
49365: LD_VAR 0 6
49369: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
49370: LD_INT 0
49372: PPUSH
// if not chassis or not engine then
49373: LD_VAR 0 1
49377: NOT
49378: PUSH
49379: LD_VAR 0 2
49383: NOT
49384: OR
49385: IFFALSE 49389
// exit ;
49387: GO 49585
// case engine of engine_solar :
49389: LD_VAR 0 2
49393: PUSH
49394: LD_INT 2
49396: DOUBLE
49397: EQUAL
49398: IFTRUE 49402
49400: GO 49440
49402: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
49403: LD_ADDR_VAR 0 3
49407: PUSH
49408: LD_INT 11
49410: PUSH
49411: LD_INT 12
49413: PUSH
49414: LD_INT 13
49416: PUSH
49417: LD_INT 14
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: LD_INT 2
49425: PUSH
49426: LD_INT 3
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: ST_TO_ADDR
49438: GO 49569
49440: LD_INT 1
49442: DOUBLE
49443: EQUAL
49444: IFTRUE 49448
49446: GO 49510
49448: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
49449: LD_ADDR_VAR 0 3
49453: PUSH
49454: LD_INT 11
49456: PUSH
49457: LD_INT 12
49459: PUSH
49460: LD_INT 13
49462: PUSH
49463: LD_INT 14
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: LD_INT 2
49471: PUSH
49472: LD_INT 3
49474: PUSH
49475: LD_INT 4
49477: PUSH
49478: LD_INT 5
49480: PUSH
49481: LD_INT 21
49483: PUSH
49484: LD_INT 23
49486: PUSH
49487: LD_INT 22
49489: PUSH
49490: LD_INT 24
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: ST_TO_ADDR
49508: GO 49569
49510: LD_INT 3
49512: DOUBLE
49513: EQUAL
49514: IFTRUE 49518
49516: GO 49568
49518: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
49519: LD_ADDR_VAR 0 3
49523: PUSH
49524: LD_INT 13
49526: PUSH
49527: LD_INT 14
49529: PUSH
49530: LD_INT 2
49532: PUSH
49533: LD_INT 3
49535: PUSH
49536: LD_INT 4
49538: PUSH
49539: LD_INT 5
49541: PUSH
49542: LD_INT 21
49544: PUSH
49545: LD_INT 22
49547: PUSH
49548: LD_INT 23
49550: PUSH
49551: LD_INT 24
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: ST_TO_ADDR
49566: GO 49569
49568: POP
// result := ( chassis in result ) ;
49569: LD_ADDR_VAR 0 3
49573: PUSH
49574: LD_VAR 0 1
49578: PUSH
49579: LD_VAR 0 3
49583: IN
49584: ST_TO_ADDR
// end ;
49585: LD_VAR 0 3
49589: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
49590: LD_INT 0
49592: PPUSH
// if not chassis or not weapon then
49593: LD_VAR 0 1
49597: NOT
49598: PUSH
49599: LD_VAR 0 2
49603: NOT
49604: OR
49605: IFFALSE 49609
// exit ;
49607: GO 50671
// case weapon of us_machine_gun :
49609: LD_VAR 0 2
49613: PUSH
49614: LD_INT 2
49616: DOUBLE
49617: EQUAL
49618: IFTRUE 49622
49620: GO 49652
49622: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
49623: LD_ADDR_VAR 0 3
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 2
49633: PUSH
49634: LD_INT 3
49636: PUSH
49637: LD_INT 4
49639: PUSH
49640: LD_INT 5
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: ST_TO_ADDR
49650: GO 50655
49652: LD_INT 3
49654: DOUBLE
49655: EQUAL
49656: IFTRUE 49660
49658: GO 49690
49660: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
49661: LD_ADDR_VAR 0 3
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: LD_INT 2
49671: PUSH
49672: LD_INT 3
49674: PUSH
49675: LD_INT 4
49677: PUSH
49678: LD_INT 5
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: ST_TO_ADDR
49688: GO 50655
49690: LD_INT 11
49692: DOUBLE
49693: EQUAL
49694: IFTRUE 49698
49696: GO 49728
49698: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
49699: LD_ADDR_VAR 0 3
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: LD_INT 2
49709: PUSH
49710: LD_INT 3
49712: PUSH
49713: LD_INT 4
49715: PUSH
49716: LD_INT 5
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: ST_TO_ADDR
49726: GO 50655
49728: LD_INT 4
49730: DOUBLE
49731: EQUAL
49732: IFTRUE 49736
49734: GO 49762
49736: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
49737: LD_ADDR_VAR 0 3
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: LD_INT 3
49747: PUSH
49748: LD_INT 4
49750: PUSH
49751: LD_INT 5
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: ST_TO_ADDR
49760: GO 50655
49762: LD_INT 5
49764: DOUBLE
49765: EQUAL
49766: IFTRUE 49770
49768: GO 49796
49770: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
49771: LD_ADDR_VAR 0 3
49775: PUSH
49776: LD_INT 2
49778: PUSH
49779: LD_INT 3
49781: PUSH
49782: LD_INT 4
49784: PUSH
49785: LD_INT 5
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: ST_TO_ADDR
49794: GO 50655
49796: LD_INT 9
49798: DOUBLE
49799: EQUAL
49800: IFTRUE 49804
49802: GO 49830
49804: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
49805: LD_ADDR_VAR 0 3
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: LD_INT 3
49815: PUSH
49816: LD_INT 4
49818: PUSH
49819: LD_INT 5
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: ST_TO_ADDR
49828: GO 50655
49830: LD_INT 7
49832: DOUBLE
49833: EQUAL
49834: IFTRUE 49838
49836: GO 49864
49838: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
49839: LD_ADDR_VAR 0 3
49843: PUSH
49844: LD_INT 2
49846: PUSH
49847: LD_INT 3
49849: PUSH
49850: LD_INT 4
49852: PUSH
49853: LD_INT 5
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: ST_TO_ADDR
49862: GO 50655
49864: LD_INT 12
49866: DOUBLE
49867: EQUAL
49868: IFTRUE 49872
49870: GO 49898
49872: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
49873: LD_ADDR_VAR 0 3
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: LD_INT 3
49883: PUSH
49884: LD_INT 4
49886: PUSH
49887: LD_INT 5
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: ST_TO_ADDR
49896: GO 50655
49898: LD_INT 13
49900: DOUBLE
49901: EQUAL
49902: IFTRUE 49906
49904: GO 49932
49906: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
49907: LD_ADDR_VAR 0 3
49911: PUSH
49912: LD_INT 2
49914: PUSH
49915: LD_INT 3
49917: PUSH
49918: LD_INT 4
49920: PUSH
49921: LD_INT 5
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: ST_TO_ADDR
49930: GO 50655
49932: LD_INT 14
49934: DOUBLE
49935: EQUAL
49936: IFTRUE 49940
49938: GO 49958
49940: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
49941: LD_ADDR_VAR 0 3
49945: PUSH
49946: LD_INT 4
49948: PUSH
49949: LD_INT 5
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: ST_TO_ADDR
49956: GO 50655
49958: LD_INT 6
49960: DOUBLE
49961: EQUAL
49962: IFTRUE 49966
49964: GO 49984
49966: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
49967: LD_ADDR_VAR 0 3
49971: PUSH
49972: LD_INT 4
49974: PUSH
49975: LD_INT 5
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: ST_TO_ADDR
49982: GO 50655
49984: LD_INT 10
49986: DOUBLE
49987: EQUAL
49988: IFTRUE 49992
49990: GO 50010
49992: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
49993: LD_ADDR_VAR 0 3
49997: PUSH
49998: LD_INT 4
50000: PUSH
50001: LD_INT 5
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: ST_TO_ADDR
50008: GO 50655
50010: LD_INT 22
50012: DOUBLE
50013: EQUAL
50014: IFTRUE 50018
50016: GO 50044
50018: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
50019: LD_ADDR_VAR 0 3
50023: PUSH
50024: LD_INT 11
50026: PUSH
50027: LD_INT 12
50029: PUSH
50030: LD_INT 13
50032: PUSH
50033: LD_INT 14
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: ST_TO_ADDR
50042: GO 50655
50044: LD_INT 23
50046: DOUBLE
50047: EQUAL
50048: IFTRUE 50052
50050: GO 50078
50052: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
50053: LD_ADDR_VAR 0 3
50057: PUSH
50058: LD_INT 11
50060: PUSH
50061: LD_INT 12
50063: PUSH
50064: LD_INT 13
50066: PUSH
50067: LD_INT 14
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: ST_TO_ADDR
50076: GO 50655
50078: LD_INT 24
50080: DOUBLE
50081: EQUAL
50082: IFTRUE 50086
50084: GO 50112
50086: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
50087: LD_ADDR_VAR 0 3
50091: PUSH
50092: LD_INT 11
50094: PUSH
50095: LD_INT 12
50097: PUSH
50098: LD_INT 13
50100: PUSH
50101: LD_INT 14
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: ST_TO_ADDR
50110: GO 50655
50112: LD_INT 30
50114: DOUBLE
50115: EQUAL
50116: IFTRUE 50120
50118: GO 50146
50120: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
50121: LD_ADDR_VAR 0 3
50125: PUSH
50126: LD_INT 11
50128: PUSH
50129: LD_INT 12
50131: PUSH
50132: LD_INT 13
50134: PUSH
50135: LD_INT 14
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: ST_TO_ADDR
50144: GO 50655
50146: LD_INT 25
50148: DOUBLE
50149: EQUAL
50150: IFTRUE 50154
50152: GO 50172
50154: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
50155: LD_ADDR_VAR 0 3
50159: PUSH
50160: LD_INT 13
50162: PUSH
50163: LD_INT 14
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: ST_TO_ADDR
50170: GO 50655
50172: LD_INT 27
50174: DOUBLE
50175: EQUAL
50176: IFTRUE 50180
50178: GO 50198
50180: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
50181: LD_ADDR_VAR 0 3
50185: PUSH
50186: LD_INT 13
50188: PUSH
50189: LD_INT 14
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: ST_TO_ADDR
50196: GO 50655
50198: LD_EXP 53
50202: DOUBLE
50203: EQUAL
50204: IFTRUE 50208
50206: GO 50234
50208: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
50209: LD_ADDR_VAR 0 3
50213: PUSH
50214: LD_INT 11
50216: PUSH
50217: LD_INT 12
50219: PUSH
50220: LD_INT 13
50222: PUSH
50223: LD_INT 14
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: ST_TO_ADDR
50232: GO 50655
50234: LD_INT 28
50236: DOUBLE
50237: EQUAL
50238: IFTRUE 50242
50240: GO 50260
50242: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
50243: LD_ADDR_VAR 0 3
50247: PUSH
50248: LD_INT 13
50250: PUSH
50251: LD_INT 14
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: ST_TO_ADDR
50258: GO 50655
50260: LD_INT 29
50262: DOUBLE
50263: EQUAL
50264: IFTRUE 50268
50266: GO 50286
50268: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
50269: LD_ADDR_VAR 0 3
50273: PUSH
50274: LD_INT 13
50276: PUSH
50277: LD_INT 14
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: ST_TO_ADDR
50284: GO 50655
50286: LD_INT 31
50288: DOUBLE
50289: EQUAL
50290: IFTRUE 50294
50292: GO 50312
50294: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
50295: LD_ADDR_VAR 0 3
50299: PUSH
50300: LD_INT 13
50302: PUSH
50303: LD_INT 14
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: ST_TO_ADDR
50310: GO 50655
50312: LD_INT 26
50314: DOUBLE
50315: EQUAL
50316: IFTRUE 50320
50318: GO 50338
50320: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
50321: LD_ADDR_VAR 0 3
50325: PUSH
50326: LD_INT 13
50328: PUSH
50329: LD_INT 14
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: ST_TO_ADDR
50336: GO 50655
50338: LD_INT 42
50340: DOUBLE
50341: EQUAL
50342: IFTRUE 50346
50344: GO 50372
50346: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
50347: LD_ADDR_VAR 0 3
50351: PUSH
50352: LD_INT 21
50354: PUSH
50355: LD_INT 22
50357: PUSH
50358: LD_INT 23
50360: PUSH
50361: LD_INT 24
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: ST_TO_ADDR
50370: GO 50655
50372: LD_INT 43
50374: DOUBLE
50375: EQUAL
50376: IFTRUE 50380
50378: GO 50406
50380: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
50381: LD_ADDR_VAR 0 3
50385: PUSH
50386: LD_INT 21
50388: PUSH
50389: LD_INT 22
50391: PUSH
50392: LD_INT 23
50394: PUSH
50395: LD_INT 24
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: ST_TO_ADDR
50404: GO 50655
50406: LD_INT 44
50408: DOUBLE
50409: EQUAL
50410: IFTRUE 50414
50412: GO 50440
50414: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
50415: LD_ADDR_VAR 0 3
50419: PUSH
50420: LD_INT 21
50422: PUSH
50423: LD_INT 22
50425: PUSH
50426: LD_INT 23
50428: PUSH
50429: LD_INT 24
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: ST_TO_ADDR
50438: GO 50655
50440: LD_INT 45
50442: DOUBLE
50443: EQUAL
50444: IFTRUE 50448
50446: GO 50474
50448: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
50449: LD_ADDR_VAR 0 3
50453: PUSH
50454: LD_INT 21
50456: PUSH
50457: LD_INT 22
50459: PUSH
50460: LD_INT 23
50462: PUSH
50463: LD_INT 24
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: ST_TO_ADDR
50472: GO 50655
50474: LD_INT 49
50476: DOUBLE
50477: EQUAL
50478: IFTRUE 50482
50480: GO 50508
50482: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
50483: LD_ADDR_VAR 0 3
50487: PUSH
50488: LD_INT 21
50490: PUSH
50491: LD_INT 22
50493: PUSH
50494: LD_INT 23
50496: PUSH
50497: LD_INT 24
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: ST_TO_ADDR
50506: GO 50655
50508: LD_INT 51
50510: DOUBLE
50511: EQUAL
50512: IFTRUE 50516
50514: GO 50542
50516: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
50517: LD_ADDR_VAR 0 3
50521: PUSH
50522: LD_INT 21
50524: PUSH
50525: LD_INT 22
50527: PUSH
50528: LD_INT 23
50530: PUSH
50531: LD_INT 24
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: ST_TO_ADDR
50540: GO 50655
50542: LD_INT 52
50544: DOUBLE
50545: EQUAL
50546: IFTRUE 50550
50548: GO 50576
50550: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
50551: LD_ADDR_VAR 0 3
50555: PUSH
50556: LD_INT 21
50558: PUSH
50559: LD_INT 22
50561: PUSH
50562: LD_INT 23
50564: PUSH
50565: LD_INT 24
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: ST_TO_ADDR
50574: GO 50655
50576: LD_INT 53
50578: DOUBLE
50579: EQUAL
50580: IFTRUE 50584
50582: GO 50602
50584: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
50585: LD_ADDR_VAR 0 3
50589: PUSH
50590: LD_INT 23
50592: PUSH
50593: LD_INT 24
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: ST_TO_ADDR
50600: GO 50655
50602: LD_INT 46
50604: DOUBLE
50605: EQUAL
50606: IFTRUE 50610
50608: GO 50628
50610: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
50611: LD_ADDR_VAR 0 3
50615: PUSH
50616: LD_INT 23
50618: PUSH
50619: LD_INT 24
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: ST_TO_ADDR
50626: GO 50655
50628: LD_INT 47
50630: DOUBLE
50631: EQUAL
50632: IFTRUE 50636
50634: GO 50654
50636: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
50637: LD_ADDR_VAR 0 3
50641: PUSH
50642: LD_INT 23
50644: PUSH
50645: LD_INT 24
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: ST_TO_ADDR
50652: GO 50655
50654: POP
// result := ( chassis in result ) ;
50655: LD_ADDR_VAR 0 3
50659: PUSH
50660: LD_VAR 0 1
50664: PUSH
50665: LD_VAR 0 3
50669: IN
50670: ST_TO_ADDR
// end ;
50671: LD_VAR 0 3
50675: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
50676: LD_INT 0
50678: PPUSH
50679: PPUSH
50680: PPUSH
50681: PPUSH
50682: PPUSH
50683: PPUSH
50684: PPUSH
// result := array ;
50685: LD_ADDR_VAR 0 5
50689: PUSH
50690: LD_VAR 0 1
50694: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
50695: LD_VAR 0 1
50699: NOT
50700: PUSH
50701: LD_VAR 0 2
50705: NOT
50706: OR
50707: PUSH
50708: LD_VAR 0 3
50712: NOT
50713: OR
50714: PUSH
50715: LD_VAR 0 2
50719: PUSH
50720: LD_VAR 0 1
50724: GREATER
50725: OR
50726: PUSH
50727: LD_VAR 0 3
50731: PUSH
50732: LD_VAR 0 1
50736: GREATER
50737: OR
50738: IFFALSE 50742
// exit ;
50740: GO 51038
// if direction then
50742: LD_VAR 0 4
50746: IFFALSE 50810
// begin d := 1 ;
50748: LD_ADDR_VAR 0 9
50752: PUSH
50753: LD_INT 1
50755: ST_TO_ADDR
// if i_from > i_to then
50756: LD_VAR 0 2
50760: PUSH
50761: LD_VAR 0 3
50765: GREATER
50766: IFFALSE 50792
// length := ( array - i_from ) + i_to else
50768: LD_ADDR_VAR 0 11
50772: PUSH
50773: LD_VAR 0 1
50777: PUSH
50778: LD_VAR 0 2
50782: MINUS
50783: PUSH
50784: LD_VAR 0 3
50788: PLUS
50789: ST_TO_ADDR
50790: GO 50808
// length := i_to - i_from ;
50792: LD_ADDR_VAR 0 11
50796: PUSH
50797: LD_VAR 0 3
50801: PUSH
50802: LD_VAR 0 2
50806: MINUS
50807: ST_TO_ADDR
// end else
50808: GO 50871
// begin d := - 1 ;
50810: LD_ADDR_VAR 0 9
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: ST_TO_ADDR
// if i_from > i_to then
50819: LD_VAR 0 2
50823: PUSH
50824: LD_VAR 0 3
50828: GREATER
50829: IFFALSE 50849
// length := i_from - i_to else
50831: LD_ADDR_VAR 0 11
50835: PUSH
50836: LD_VAR 0 2
50840: PUSH
50841: LD_VAR 0 3
50845: MINUS
50846: ST_TO_ADDR
50847: GO 50871
// length := ( array - i_to ) + i_from ;
50849: LD_ADDR_VAR 0 11
50853: PUSH
50854: LD_VAR 0 1
50858: PUSH
50859: LD_VAR 0 3
50863: MINUS
50864: PUSH
50865: LD_VAR 0 2
50869: PLUS
50870: ST_TO_ADDR
// end ; if not length then
50871: LD_VAR 0 11
50875: NOT
50876: IFFALSE 50880
// exit ;
50878: GO 51038
// tmp := array ;
50880: LD_ADDR_VAR 0 10
50884: PUSH
50885: LD_VAR 0 1
50889: ST_TO_ADDR
// for i = 1 to length do
50890: LD_ADDR_VAR 0 6
50894: PUSH
50895: DOUBLE
50896: LD_INT 1
50898: DEC
50899: ST_TO_ADDR
50900: LD_VAR 0 11
50904: PUSH
50905: FOR_TO
50906: IFFALSE 51026
// begin for j = 1 to array do
50908: LD_ADDR_VAR 0 7
50912: PUSH
50913: DOUBLE
50914: LD_INT 1
50916: DEC
50917: ST_TO_ADDR
50918: LD_VAR 0 1
50922: PUSH
50923: FOR_TO
50924: IFFALSE 51012
// begin k := j + d ;
50926: LD_ADDR_VAR 0 8
50930: PUSH
50931: LD_VAR 0 7
50935: PUSH
50936: LD_VAR 0 9
50940: PLUS
50941: ST_TO_ADDR
// if k > array then
50942: LD_VAR 0 8
50946: PUSH
50947: LD_VAR 0 1
50951: GREATER
50952: IFFALSE 50962
// k := 1 ;
50954: LD_ADDR_VAR 0 8
50958: PUSH
50959: LD_INT 1
50961: ST_TO_ADDR
// if not k then
50962: LD_VAR 0 8
50966: NOT
50967: IFFALSE 50979
// k := array ;
50969: LD_ADDR_VAR 0 8
50973: PUSH
50974: LD_VAR 0 1
50978: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
50979: LD_ADDR_VAR 0 10
50983: PUSH
50984: LD_VAR 0 10
50988: PPUSH
50989: LD_VAR 0 8
50993: PPUSH
50994: LD_VAR 0 1
50998: PUSH
50999: LD_VAR 0 7
51003: ARRAY
51004: PPUSH
51005: CALL_OW 1
51009: ST_TO_ADDR
// end ;
51010: GO 50923
51012: POP
51013: POP
// array := tmp ;
51014: LD_ADDR_VAR 0 1
51018: PUSH
51019: LD_VAR 0 10
51023: ST_TO_ADDR
// end ;
51024: GO 50905
51026: POP
51027: POP
// result := array ;
51028: LD_ADDR_VAR 0 5
51032: PUSH
51033: LD_VAR 0 1
51037: ST_TO_ADDR
// end ;
51038: LD_VAR 0 5
51042: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
51043: LD_INT 0
51045: PPUSH
51046: PPUSH
// result := 0 ;
51047: LD_ADDR_VAR 0 3
51051: PUSH
51052: LD_INT 0
51054: ST_TO_ADDR
// if not array or not value in array then
51055: LD_VAR 0 1
51059: NOT
51060: PUSH
51061: LD_VAR 0 2
51065: PUSH
51066: LD_VAR 0 1
51070: IN
51071: NOT
51072: OR
51073: IFFALSE 51077
// exit ;
51075: GO 51131
// for i = 1 to array do
51077: LD_ADDR_VAR 0 4
51081: PUSH
51082: DOUBLE
51083: LD_INT 1
51085: DEC
51086: ST_TO_ADDR
51087: LD_VAR 0 1
51091: PUSH
51092: FOR_TO
51093: IFFALSE 51129
// if value = array [ i ] then
51095: LD_VAR 0 2
51099: PUSH
51100: LD_VAR 0 1
51104: PUSH
51105: LD_VAR 0 4
51109: ARRAY
51110: EQUAL
51111: IFFALSE 51127
// begin result := i ;
51113: LD_ADDR_VAR 0 3
51117: PUSH
51118: LD_VAR 0 4
51122: ST_TO_ADDR
// exit ;
51123: POP
51124: POP
51125: GO 51131
// end ;
51127: GO 51092
51129: POP
51130: POP
// end ;
51131: LD_VAR 0 3
51135: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
51136: LD_INT 0
51138: PPUSH
// vc_chassis := chassis ;
51139: LD_ADDR_OWVAR 37
51143: PUSH
51144: LD_VAR 0 1
51148: ST_TO_ADDR
// vc_engine := engine ;
51149: LD_ADDR_OWVAR 39
51153: PUSH
51154: LD_VAR 0 2
51158: ST_TO_ADDR
// vc_control := control ;
51159: LD_ADDR_OWVAR 38
51163: PUSH
51164: LD_VAR 0 3
51168: ST_TO_ADDR
// vc_weapon := weapon ;
51169: LD_ADDR_OWVAR 40
51173: PUSH
51174: LD_VAR 0 4
51178: ST_TO_ADDR
// vc_fuel_battery := fuel ;
51179: LD_ADDR_OWVAR 41
51183: PUSH
51184: LD_VAR 0 5
51188: ST_TO_ADDR
// end ;
51189: LD_VAR 0 6
51193: RET
// export function WantPlant ( unit ) ; var task ; begin
51194: LD_INT 0
51196: PPUSH
51197: PPUSH
// result := false ;
51198: LD_ADDR_VAR 0 2
51202: PUSH
51203: LD_INT 0
51205: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
51206: LD_ADDR_VAR 0 3
51210: PUSH
51211: LD_VAR 0 1
51215: PPUSH
51216: CALL_OW 437
51220: ST_TO_ADDR
// if task then
51221: LD_VAR 0 3
51225: IFFALSE 51253
// if task [ 1 ] [ 1 ] = p then
51227: LD_VAR 0 3
51231: PUSH
51232: LD_INT 1
51234: ARRAY
51235: PUSH
51236: LD_INT 1
51238: ARRAY
51239: PUSH
51240: LD_STRING p
51242: EQUAL
51243: IFFALSE 51253
// result := true ;
51245: LD_ADDR_VAR 0 2
51249: PUSH
51250: LD_INT 1
51252: ST_TO_ADDR
// end ;
51253: LD_VAR 0 2
51257: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
51258: LD_INT 0
51260: PPUSH
51261: PPUSH
51262: PPUSH
51263: PPUSH
// if pos < 1 then
51264: LD_VAR 0 2
51268: PUSH
51269: LD_INT 1
51271: LESS
51272: IFFALSE 51276
// exit ;
51274: GO 51579
// if pos = 1 then
51276: LD_VAR 0 2
51280: PUSH
51281: LD_INT 1
51283: EQUAL
51284: IFFALSE 51317
// result := Replace ( arr , pos [ 1 ] , value ) else
51286: LD_ADDR_VAR 0 4
51290: PUSH
51291: LD_VAR 0 1
51295: PPUSH
51296: LD_VAR 0 2
51300: PUSH
51301: LD_INT 1
51303: ARRAY
51304: PPUSH
51305: LD_VAR 0 3
51309: PPUSH
51310: CALL_OW 1
51314: ST_TO_ADDR
51315: GO 51579
// begin tmp := arr ;
51317: LD_ADDR_VAR 0 6
51321: PUSH
51322: LD_VAR 0 1
51326: ST_TO_ADDR
// s_arr := [ tmp ] ;
51327: LD_ADDR_VAR 0 7
51331: PUSH
51332: LD_VAR 0 6
51336: PUSH
51337: EMPTY
51338: LIST
51339: ST_TO_ADDR
// for i = 1 to pos - 1 do
51340: LD_ADDR_VAR 0 5
51344: PUSH
51345: DOUBLE
51346: LD_INT 1
51348: DEC
51349: ST_TO_ADDR
51350: LD_VAR 0 2
51354: PUSH
51355: LD_INT 1
51357: MINUS
51358: PUSH
51359: FOR_TO
51360: IFFALSE 51405
// begin tmp := tmp [ pos [ i ] ] ;
51362: LD_ADDR_VAR 0 6
51366: PUSH
51367: LD_VAR 0 6
51371: PUSH
51372: LD_VAR 0 2
51376: PUSH
51377: LD_VAR 0 5
51381: ARRAY
51382: ARRAY
51383: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
51384: LD_ADDR_VAR 0 7
51388: PUSH
51389: LD_VAR 0 7
51393: PUSH
51394: LD_VAR 0 6
51398: PUSH
51399: EMPTY
51400: LIST
51401: ADD
51402: ST_TO_ADDR
// end ;
51403: GO 51359
51405: POP
51406: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
51407: LD_ADDR_VAR 0 6
51411: PUSH
51412: LD_VAR 0 6
51416: PPUSH
51417: LD_VAR 0 2
51421: PUSH
51422: LD_VAR 0 2
51426: ARRAY
51427: PPUSH
51428: LD_VAR 0 3
51432: PPUSH
51433: CALL_OW 1
51437: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
51438: LD_ADDR_VAR 0 7
51442: PUSH
51443: LD_VAR 0 7
51447: PPUSH
51448: LD_VAR 0 7
51452: PPUSH
51453: LD_VAR 0 6
51457: PPUSH
51458: CALL_OW 1
51462: ST_TO_ADDR
// for i = s_arr downto 2 do
51463: LD_ADDR_VAR 0 5
51467: PUSH
51468: DOUBLE
51469: LD_VAR 0 7
51473: INC
51474: ST_TO_ADDR
51475: LD_INT 2
51477: PUSH
51478: FOR_DOWNTO
51479: IFFALSE 51563
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
51481: LD_ADDR_VAR 0 6
51485: PUSH
51486: LD_VAR 0 7
51490: PUSH
51491: LD_VAR 0 5
51495: PUSH
51496: LD_INT 1
51498: MINUS
51499: ARRAY
51500: PPUSH
51501: LD_VAR 0 2
51505: PUSH
51506: LD_VAR 0 5
51510: PUSH
51511: LD_INT 1
51513: MINUS
51514: ARRAY
51515: PPUSH
51516: LD_VAR 0 7
51520: PUSH
51521: LD_VAR 0 5
51525: ARRAY
51526: PPUSH
51527: CALL_OW 1
51531: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
51532: LD_ADDR_VAR 0 7
51536: PUSH
51537: LD_VAR 0 7
51541: PPUSH
51542: LD_VAR 0 5
51546: PUSH
51547: LD_INT 1
51549: MINUS
51550: PPUSH
51551: LD_VAR 0 6
51555: PPUSH
51556: CALL_OW 1
51560: ST_TO_ADDR
// end ;
51561: GO 51478
51563: POP
51564: POP
// result := s_arr [ 1 ] ;
51565: LD_ADDR_VAR 0 4
51569: PUSH
51570: LD_VAR 0 7
51574: PUSH
51575: LD_INT 1
51577: ARRAY
51578: ST_TO_ADDR
// end ; end ;
51579: LD_VAR 0 4
51583: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
51584: LD_INT 0
51586: PPUSH
51587: PPUSH
// if not list then
51588: LD_VAR 0 1
51592: NOT
51593: IFFALSE 51597
// exit ;
51595: GO 51688
// i := list [ pos1 ] ;
51597: LD_ADDR_VAR 0 5
51601: PUSH
51602: LD_VAR 0 1
51606: PUSH
51607: LD_VAR 0 2
51611: ARRAY
51612: ST_TO_ADDR
// if not i then
51613: LD_VAR 0 5
51617: NOT
51618: IFFALSE 51622
// exit ;
51620: GO 51688
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
51622: LD_ADDR_VAR 0 1
51626: PUSH
51627: LD_VAR 0 1
51631: PPUSH
51632: LD_VAR 0 2
51636: PPUSH
51637: LD_VAR 0 1
51641: PUSH
51642: LD_VAR 0 3
51646: ARRAY
51647: PPUSH
51648: CALL_OW 1
51652: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
51653: LD_ADDR_VAR 0 1
51657: PUSH
51658: LD_VAR 0 1
51662: PPUSH
51663: LD_VAR 0 3
51667: PPUSH
51668: LD_VAR 0 5
51672: PPUSH
51673: CALL_OW 1
51677: ST_TO_ADDR
// result := list ;
51678: LD_ADDR_VAR 0 4
51682: PUSH
51683: LD_VAR 0 1
51687: ST_TO_ADDR
// end ;
51688: LD_VAR 0 4
51692: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
51693: LD_INT 0
51695: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
51696: LD_ADDR_VAR 0 5
51700: PUSH
51701: LD_VAR 0 1
51705: PPUSH
51706: CALL_OW 250
51710: PPUSH
51711: LD_VAR 0 1
51715: PPUSH
51716: CALL_OW 251
51720: PPUSH
51721: LD_VAR 0 2
51725: PPUSH
51726: LD_VAR 0 3
51730: PPUSH
51731: LD_VAR 0 4
51735: PPUSH
51736: CALL 51746 0 5
51740: ST_TO_ADDR
// end ;
51741: LD_VAR 0 5
51745: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
51746: LD_INT 0
51748: PPUSH
51749: PPUSH
51750: PPUSH
51751: PPUSH
// if not list then
51752: LD_VAR 0 3
51756: NOT
51757: IFFALSE 51761
// exit ;
51759: GO 52149
// result := [ ] ;
51761: LD_ADDR_VAR 0 6
51765: PUSH
51766: EMPTY
51767: ST_TO_ADDR
// for i in list do
51768: LD_ADDR_VAR 0 7
51772: PUSH
51773: LD_VAR 0 3
51777: PUSH
51778: FOR_IN
51779: IFFALSE 51981
// begin tmp := GetDistUnitXY ( i , x , y ) ;
51781: LD_ADDR_VAR 0 9
51785: PUSH
51786: LD_VAR 0 7
51790: PPUSH
51791: LD_VAR 0 1
51795: PPUSH
51796: LD_VAR 0 2
51800: PPUSH
51801: CALL_OW 297
51805: ST_TO_ADDR
// if not result then
51806: LD_VAR 0 6
51810: NOT
51811: IFFALSE 51837
// result := [ [ i , tmp ] ] else
51813: LD_ADDR_VAR 0 6
51817: PUSH
51818: LD_VAR 0 7
51822: PUSH
51823: LD_VAR 0 9
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: EMPTY
51833: LIST
51834: ST_TO_ADDR
51835: GO 51979
// begin if result [ result ] [ 2 ] < tmp then
51837: LD_VAR 0 6
51841: PUSH
51842: LD_VAR 0 6
51846: ARRAY
51847: PUSH
51848: LD_INT 2
51850: ARRAY
51851: PUSH
51852: LD_VAR 0 9
51856: LESS
51857: IFFALSE 51899
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
51859: LD_ADDR_VAR 0 6
51863: PUSH
51864: LD_VAR 0 6
51868: PPUSH
51869: LD_VAR 0 6
51873: PUSH
51874: LD_INT 1
51876: PLUS
51877: PPUSH
51878: LD_VAR 0 7
51882: PUSH
51883: LD_VAR 0 9
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PPUSH
51892: CALL_OW 2
51896: ST_TO_ADDR
51897: GO 51979
// for j = 1 to result do
51899: LD_ADDR_VAR 0 8
51903: PUSH
51904: DOUBLE
51905: LD_INT 1
51907: DEC
51908: ST_TO_ADDR
51909: LD_VAR 0 6
51913: PUSH
51914: FOR_TO
51915: IFFALSE 51977
// begin if tmp < result [ j ] [ 2 ] then
51917: LD_VAR 0 9
51921: PUSH
51922: LD_VAR 0 6
51926: PUSH
51927: LD_VAR 0 8
51931: ARRAY
51932: PUSH
51933: LD_INT 2
51935: ARRAY
51936: LESS
51937: IFFALSE 51975
// begin result := Insert ( result , j , [ i , tmp ] ) ;
51939: LD_ADDR_VAR 0 6
51943: PUSH
51944: LD_VAR 0 6
51948: PPUSH
51949: LD_VAR 0 8
51953: PPUSH
51954: LD_VAR 0 7
51958: PUSH
51959: LD_VAR 0 9
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PPUSH
51968: CALL_OW 2
51972: ST_TO_ADDR
// break ;
51973: GO 51977
// end ; end ;
51975: GO 51914
51977: POP
51978: POP
// end ; end ;
51979: GO 51778
51981: POP
51982: POP
// if result and not asc then
51983: LD_VAR 0 6
51987: PUSH
51988: LD_VAR 0 4
51992: NOT
51993: AND
51994: IFFALSE 52069
// begin tmp := result ;
51996: LD_ADDR_VAR 0 9
52000: PUSH
52001: LD_VAR 0 6
52005: ST_TO_ADDR
// for i = tmp downto 1 do
52006: LD_ADDR_VAR 0 7
52010: PUSH
52011: DOUBLE
52012: LD_VAR 0 9
52016: INC
52017: ST_TO_ADDR
52018: LD_INT 1
52020: PUSH
52021: FOR_DOWNTO
52022: IFFALSE 52067
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
52024: LD_ADDR_VAR 0 6
52028: PUSH
52029: LD_VAR 0 6
52033: PPUSH
52034: LD_VAR 0 9
52038: PUSH
52039: LD_VAR 0 7
52043: MINUS
52044: PUSH
52045: LD_INT 1
52047: PLUS
52048: PPUSH
52049: LD_VAR 0 9
52053: PUSH
52054: LD_VAR 0 7
52058: ARRAY
52059: PPUSH
52060: CALL_OW 1
52064: ST_TO_ADDR
52065: GO 52021
52067: POP
52068: POP
// end ; tmp := [ ] ;
52069: LD_ADDR_VAR 0 9
52073: PUSH
52074: EMPTY
52075: ST_TO_ADDR
// if mode then
52076: LD_VAR 0 5
52080: IFFALSE 52149
// begin for i = 1 to result do
52082: LD_ADDR_VAR 0 7
52086: PUSH
52087: DOUBLE
52088: LD_INT 1
52090: DEC
52091: ST_TO_ADDR
52092: LD_VAR 0 6
52096: PUSH
52097: FOR_TO
52098: IFFALSE 52137
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
52100: LD_ADDR_VAR 0 9
52104: PUSH
52105: LD_VAR 0 9
52109: PPUSH
52110: LD_VAR 0 7
52114: PPUSH
52115: LD_VAR 0 6
52119: PUSH
52120: LD_VAR 0 7
52124: ARRAY
52125: PUSH
52126: LD_INT 1
52128: ARRAY
52129: PPUSH
52130: CALL_OW 1
52134: ST_TO_ADDR
52135: GO 52097
52137: POP
52138: POP
// result := tmp ;
52139: LD_ADDR_VAR 0 6
52143: PUSH
52144: LD_VAR 0 9
52148: ST_TO_ADDR
// end ; end ;
52149: LD_VAR 0 6
52153: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
52154: LD_INT 0
52156: PPUSH
52157: PPUSH
52158: PPUSH
52159: PPUSH
52160: PPUSH
52161: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
52162: LD_ADDR_VAR 0 5
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: EMPTY
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: ST_TO_ADDR
// if not x or not y then
52184: LD_VAR 0 2
52188: NOT
52189: PUSH
52190: LD_VAR 0 3
52194: NOT
52195: OR
52196: IFFALSE 52200
// exit ;
52198: GO 53852
// if not range then
52200: LD_VAR 0 4
52204: NOT
52205: IFFALSE 52215
// range := 10 ;
52207: LD_ADDR_VAR 0 4
52211: PUSH
52212: LD_INT 10
52214: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52215: LD_ADDR_VAR 0 8
52219: PUSH
52220: LD_INT 81
52222: PUSH
52223: LD_VAR 0 1
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 92
52234: PUSH
52235: LD_VAR 0 2
52239: PUSH
52240: LD_VAR 0 3
52244: PUSH
52245: LD_VAR 0 4
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 3
52258: PUSH
52259: LD_INT 21
52261: PUSH
52262: LD_INT 3
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: LIST
52277: PPUSH
52278: CALL_OW 69
52282: ST_TO_ADDR
// if not tmp then
52283: LD_VAR 0 8
52287: NOT
52288: IFFALSE 52292
// exit ;
52290: GO 53852
// for i in tmp do
52292: LD_ADDR_VAR 0 6
52296: PUSH
52297: LD_VAR 0 8
52301: PUSH
52302: FOR_IN
52303: IFFALSE 53827
// begin points := [ 0 , 0 , 0 ] ;
52305: LD_ADDR_VAR 0 9
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: LIST
52323: ST_TO_ADDR
// bpoints := 1 ;
52324: LD_ADDR_VAR 0 10
52328: PUSH
52329: LD_INT 1
52331: ST_TO_ADDR
// case GetType ( i ) of unit_human :
52332: LD_VAR 0 6
52336: PPUSH
52337: CALL_OW 247
52341: PUSH
52342: LD_INT 1
52344: DOUBLE
52345: EQUAL
52346: IFTRUE 52350
52348: GO 52928
52350: POP
// begin if GetClass ( i ) = 1 then
52351: LD_VAR 0 6
52355: PPUSH
52356: CALL_OW 257
52360: PUSH
52361: LD_INT 1
52363: EQUAL
52364: IFFALSE 52385
// points := [ 10 , 5 , 3 ] ;
52366: LD_ADDR_VAR 0 9
52370: PUSH
52371: LD_INT 10
52373: PUSH
52374: LD_INT 5
52376: PUSH
52377: LD_INT 3
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: LIST
52384: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
52385: LD_VAR 0 6
52389: PPUSH
52390: CALL_OW 257
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: LD_INT 3
52400: PUSH
52401: LD_INT 4
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: LIST
52408: IN
52409: IFFALSE 52430
// points := [ 3 , 2 , 1 ] ;
52411: LD_ADDR_VAR 0 9
52415: PUSH
52416: LD_INT 3
52418: PUSH
52419: LD_INT 2
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: LIST
52429: ST_TO_ADDR
// if GetClass ( i ) = 5 then
52430: LD_VAR 0 6
52434: PPUSH
52435: CALL_OW 257
52439: PUSH
52440: LD_INT 5
52442: EQUAL
52443: IFFALSE 52464
// points := [ 130 , 5 , 2 ] ;
52445: LD_ADDR_VAR 0 9
52449: PUSH
52450: LD_INT 130
52452: PUSH
52453: LD_INT 5
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: LIST
52463: ST_TO_ADDR
// if GetClass ( i ) = 8 then
52464: LD_VAR 0 6
52468: PPUSH
52469: CALL_OW 257
52473: PUSH
52474: LD_INT 8
52476: EQUAL
52477: IFFALSE 52498
// points := [ 35 , 35 , 30 ] ;
52479: LD_ADDR_VAR 0 9
52483: PUSH
52484: LD_INT 35
52486: PUSH
52487: LD_INT 35
52489: PUSH
52490: LD_INT 30
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: LIST
52497: ST_TO_ADDR
// if GetClass ( i ) = 9 then
52498: LD_VAR 0 6
52502: PPUSH
52503: CALL_OW 257
52507: PUSH
52508: LD_INT 9
52510: EQUAL
52511: IFFALSE 52532
// points := [ 20 , 55 , 40 ] ;
52513: LD_ADDR_VAR 0 9
52517: PUSH
52518: LD_INT 20
52520: PUSH
52521: LD_INT 55
52523: PUSH
52524: LD_INT 40
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: LIST
52531: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
52532: LD_VAR 0 6
52536: PPUSH
52537: CALL_OW 257
52541: PUSH
52542: LD_INT 12
52544: PUSH
52545: LD_INT 16
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: IN
52552: IFFALSE 52573
// points := [ 5 , 3 , 2 ] ;
52554: LD_ADDR_VAR 0 9
52558: PUSH
52559: LD_INT 5
52561: PUSH
52562: LD_INT 3
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: LIST
52572: ST_TO_ADDR
// if GetClass ( i ) = 17 then
52573: LD_VAR 0 6
52577: PPUSH
52578: CALL_OW 257
52582: PUSH
52583: LD_INT 17
52585: EQUAL
52586: IFFALSE 52607
// points := [ 100 , 50 , 75 ] ;
52588: LD_ADDR_VAR 0 9
52592: PUSH
52593: LD_INT 100
52595: PUSH
52596: LD_INT 50
52598: PUSH
52599: LD_INT 75
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: LIST
52606: ST_TO_ADDR
// if GetClass ( i ) = 15 then
52607: LD_VAR 0 6
52611: PPUSH
52612: CALL_OW 257
52616: PUSH
52617: LD_INT 15
52619: EQUAL
52620: IFFALSE 52641
// points := [ 10 , 5 , 3 ] ;
52622: LD_ADDR_VAR 0 9
52626: PUSH
52627: LD_INT 10
52629: PUSH
52630: LD_INT 5
52632: PUSH
52633: LD_INT 3
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: LIST
52640: ST_TO_ADDR
// if GetClass ( i ) = 14 then
52641: LD_VAR 0 6
52645: PPUSH
52646: CALL_OW 257
52650: PUSH
52651: LD_INT 14
52653: EQUAL
52654: IFFALSE 52675
// points := [ 10 , 0 , 0 ] ;
52656: LD_ADDR_VAR 0 9
52660: PUSH
52661: LD_INT 10
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: LIST
52674: ST_TO_ADDR
// if GetClass ( i ) = 11 then
52675: LD_VAR 0 6
52679: PPUSH
52680: CALL_OW 257
52684: PUSH
52685: LD_INT 11
52687: EQUAL
52688: IFFALSE 52709
// points := [ 30 , 10 , 5 ] ;
52690: LD_ADDR_VAR 0 9
52694: PUSH
52695: LD_INT 30
52697: PUSH
52698: LD_INT 10
52700: PUSH
52701: LD_INT 5
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: LIST
52708: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
52709: LD_VAR 0 1
52713: PPUSH
52714: LD_INT 5
52716: PPUSH
52717: CALL_OW 321
52721: PUSH
52722: LD_INT 2
52724: EQUAL
52725: IFFALSE 52742
// bpoints := bpoints * 1.8 ;
52727: LD_ADDR_VAR 0 10
52731: PUSH
52732: LD_VAR 0 10
52736: PUSH
52737: LD_REAL  1.80000000000000E+0000
52740: MUL
52741: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
52742: LD_VAR 0 6
52746: PPUSH
52747: CALL_OW 257
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: LD_INT 3
52760: PUSH
52761: LD_INT 4
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: IN
52770: PUSH
52771: LD_VAR 0 1
52775: PPUSH
52776: LD_INT 51
52778: PPUSH
52779: CALL_OW 321
52783: PUSH
52784: LD_INT 2
52786: EQUAL
52787: AND
52788: IFFALSE 52805
// bpoints := bpoints * 1.2 ;
52790: LD_ADDR_VAR 0 10
52794: PUSH
52795: LD_VAR 0 10
52799: PUSH
52800: LD_REAL  1.20000000000000E+0000
52803: MUL
52804: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
52805: LD_VAR 0 6
52809: PPUSH
52810: CALL_OW 257
52814: PUSH
52815: LD_INT 5
52817: PUSH
52818: LD_INT 7
52820: PUSH
52821: LD_INT 9
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: LIST
52828: IN
52829: PUSH
52830: LD_VAR 0 1
52834: PPUSH
52835: LD_INT 52
52837: PPUSH
52838: CALL_OW 321
52842: PUSH
52843: LD_INT 2
52845: EQUAL
52846: AND
52847: IFFALSE 52864
// bpoints := bpoints * 1.5 ;
52849: LD_ADDR_VAR 0 10
52853: PUSH
52854: LD_VAR 0 10
52858: PUSH
52859: LD_REAL  1.50000000000000E+0000
52862: MUL
52863: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
52864: LD_VAR 0 1
52868: PPUSH
52869: LD_INT 66
52871: PPUSH
52872: CALL_OW 321
52876: PUSH
52877: LD_INT 2
52879: EQUAL
52880: IFFALSE 52897
// bpoints := bpoints * 1.1 ;
52882: LD_ADDR_VAR 0 10
52886: PUSH
52887: LD_VAR 0 10
52891: PUSH
52892: LD_REAL  1.10000000000000E+0000
52895: MUL
52896: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
52897: LD_ADDR_VAR 0 10
52901: PUSH
52902: LD_VAR 0 10
52906: PUSH
52907: LD_VAR 0 6
52911: PPUSH
52912: LD_INT 1
52914: PPUSH
52915: CALL_OW 259
52919: PUSH
52920: LD_REAL  1.15000000000000E+0000
52923: MUL
52924: MUL
52925: ST_TO_ADDR
// end ; unit_vehicle :
52926: GO 53756
52928: LD_INT 2
52930: DOUBLE
52931: EQUAL
52932: IFTRUE 52936
52934: GO 53744
52936: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
52937: LD_VAR 0 6
52941: PPUSH
52942: CALL_OW 264
52946: PUSH
52947: LD_INT 2
52949: PUSH
52950: LD_INT 42
52952: PUSH
52953: LD_INT 24
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: LIST
52960: IN
52961: IFFALSE 52982
// points := [ 25 , 5 , 3 ] ;
52963: LD_ADDR_VAR 0 9
52967: PUSH
52968: LD_INT 25
52970: PUSH
52971: LD_INT 5
52973: PUSH
52974: LD_INT 3
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: LIST
52981: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
52982: LD_VAR 0 6
52986: PPUSH
52987: CALL_OW 264
52991: PUSH
52992: LD_INT 4
52994: PUSH
52995: LD_INT 43
52997: PUSH
52998: LD_INT 25
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: LIST
53005: IN
53006: IFFALSE 53027
// points := [ 40 , 15 , 5 ] ;
53008: LD_ADDR_VAR 0 9
53012: PUSH
53013: LD_INT 40
53015: PUSH
53016: LD_INT 15
53018: PUSH
53019: LD_INT 5
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: LIST
53026: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
53027: LD_VAR 0 6
53031: PPUSH
53032: CALL_OW 264
53036: PUSH
53037: LD_INT 3
53039: PUSH
53040: LD_INT 23
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: IN
53047: IFFALSE 53068
// points := [ 7 , 25 , 8 ] ;
53049: LD_ADDR_VAR 0 9
53053: PUSH
53054: LD_INT 7
53056: PUSH
53057: LD_INT 25
53059: PUSH
53060: LD_INT 8
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: LIST
53067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
53068: LD_VAR 0 6
53072: PPUSH
53073: CALL_OW 264
53077: PUSH
53078: LD_INT 5
53080: PUSH
53081: LD_INT 27
53083: PUSH
53084: LD_INT 44
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: LIST
53091: IN
53092: IFFALSE 53113
// points := [ 14 , 50 , 16 ] ;
53094: LD_ADDR_VAR 0 9
53098: PUSH
53099: LD_INT 14
53101: PUSH
53102: LD_INT 50
53104: PUSH
53105: LD_INT 16
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: LIST
53112: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
53113: LD_VAR 0 6
53117: PPUSH
53118: CALL_OW 264
53122: PUSH
53123: LD_INT 6
53125: PUSH
53126: LD_INT 46
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: IN
53133: IFFALSE 53154
// points := [ 32 , 120 , 70 ] ;
53135: LD_ADDR_VAR 0 9
53139: PUSH
53140: LD_INT 32
53142: PUSH
53143: LD_INT 120
53145: PUSH
53146: LD_INT 70
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: LIST
53153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
53154: LD_VAR 0 6
53158: PPUSH
53159: CALL_OW 264
53163: PUSH
53164: LD_INT 7
53166: PUSH
53167: LD_INT 28
53169: PUSH
53170: LD_INT 45
53172: PUSH
53173: LD_EXP 53
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: IN
53184: IFFALSE 53205
// points := [ 35 , 20 , 45 ] ;
53186: LD_ADDR_VAR 0 9
53190: PUSH
53191: LD_INT 35
53193: PUSH
53194: LD_INT 20
53196: PUSH
53197: LD_INT 45
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: LIST
53204: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
53205: LD_VAR 0 6
53209: PPUSH
53210: CALL_OW 264
53214: PUSH
53215: LD_INT 47
53217: PUSH
53218: EMPTY
53219: LIST
53220: IN
53221: IFFALSE 53242
// points := [ 67 , 45 , 75 ] ;
53223: LD_ADDR_VAR 0 9
53227: PUSH
53228: LD_INT 67
53230: PUSH
53231: LD_INT 45
53233: PUSH
53234: LD_INT 75
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: LIST
53241: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
53242: LD_VAR 0 6
53246: PPUSH
53247: CALL_OW 264
53251: PUSH
53252: LD_INT 26
53254: PUSH
53255: EMPTY
53256: LIST
53257: IN
53258: IFFALSE 53279
// points := [ 120 , 30 , 80 ] ;
53260: LD_ADDR_VAR 0 9
53264: PUSH
53265: LD_INT 120
53267: PUSH
53268: LD_INT 30
53270: PUSH
53271: LD_INT 80
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: LIST
53278: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
53279: LD_VAR 0 6
53283: PPUSH
53284: CALL_OW 264
53288: PUSH
53289: LD_INT 22
53291: PUSH
53292: EMPTY
53293: LIST
53294: IN
53295: IFFALSE 53316
// points := [ 40 , 1 , 1 ] ;
53297: LD_ADDR_VAR 0 9
53301: PUSH
53302: LD_INT 40
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: LIST
53315: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
53316: LD_VAR 0 6
53320: PPUSH
53321: CALL_OW 264
53325: PUSH
53326: LD_INT 29
53328: PUSH
53329: EMPTY
53330: LIST
53331: IN
53332: IFFALSE 53353
// points := [ 70 , 200 , 400 ] ;
53334: LD_ADDR_VAR 0 9
53338: PUSH
53339: LD_INT 70
53341: PUSH
53342: LD_INT 200
53344: PUSH
53345: LD_INT 400
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: LIST
53352: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
53353: LD_VAR 0 6
53357: PPUSH
53358: CALL_OW 264
53362: PUSH
53363: LD_INT 14
53365: PUSH
53366: LD_INT 53
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: IN
53373: IFFALSE 53394
// points := [ 40 , 10 , 20 ] ;
53375: LD_ADDR_VAR 0 9
53379: PUSH
53380: LD_INT 40
53382: PUSH
53383: LD_INT 10
53385: PUSH
53386: LD_INT 20
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: LIST
53393: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
53394: LD_VAR 0 6
53398: PPUSH
53399: CALL_OW 264
53403: PUSH
53404: LD_INT 9
53406: PUSH
53407: EMPTY
53408: LIST
53409: IN
53410: IFFALSE 53431
// points := [ 5 , 70 , 20 ] ;
53412: LD_ADDR_VAR 0 9
53416: PUSH
53417: LD_INT 5
53419: PUSH
53420: LD_INT 70
53422: PUSH
53423: LD_INT 20
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: LIST
53430: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
53431: LD_VAR 0 6
53435: PPUSH
53436: CALL_OW 264
53440: PUSH
53441: LD_INT 10
53443: PUSH
53444: EMPTY
53445: LIST
53446: IN
53447: IFFALSE 53468
// points := [ 35 , 110 , 70 ] ;
53449: LD_ADDR_VAR 0 9
53453: PUSH
53454: LD_INT 35
53456: PUSH
53457: LD_INT 110
53459: PUSH
53460: LD_INT 70
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: LIST
53467: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
53468: LD_VAR 0 6
53472: PPUSH
53473: CALL_OW 265
53477: PUSH
53478: LD_INT 25
53480: EQUAL
53481: IFFALSE 53502
// points := [ 80 , 65 , 100 ] ;
53483: LD_ADDR_VAR 0 9
53487: PUSH
53488: LD_INT 80
53490: PUSH
53491: LD_INT 65
53493: PUSH
53494: LD_INT 100
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: LIST
53501: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
53502: LD_VAR 0 6
53506: PPUSH
53507: CALL_OW 263
53511: PUSH
53512: LD_INT 1
53514: EQUAL
53515: IFFALSE 53550
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
53517: LD_ADDR_VAR 0 10
53521: PUSH
53522: LD_VAR 0 10
53526: PUSH
53527: LD_VAR 0 6
53531: PPUSH
53532: CALL_OW 311
53536: PPUSH
53537: LD_INT 3
53539: PPUSH
53540: CALL_OW 259
53544: PUSH
53545: LD_INT 4
53547: MUL
53548: MUL
53549: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
53550: LD_VAR 0 6
53554: PPUSH
53555: CALL_OW 263
53559: PUSH
53560: LD_INT 2
53562: EQUAL
53563: IFFALSE 53614
// begin j := IsControledBy ( i ) ;
53565: LD_ADDR_VAR 0 7
53569: PUSH
53570: LD_VAR 0 6
53574: PPUSH
53575: CALL_OW 312
53579: ST_TO_ADDR
// if j then
53580: LD_VAR 0 7
53584: IFFALSE 53614
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
53586: LD_ADDR_VAR 0 10
53590: PUSH
53591: LD_VAR 0 10
53595: PUSH
53596: LD_VAR 0 7
53600: PPUSH
53601: LD_INT 3
53603: PPUSH
53604: CALL_OW 259
53608: PUSH
53609: LD_INT 3
53611: MUL
53612: MUL
53613: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
53614: LD_VAR 0 6
53618: PPUSH
53619: CALL_OW 264
53623: PUSH
53624: LD_INT 5
53626: PUSH
53627: LD_INT 6
53629: PUSH
53630: LD_INT 46
53632: PUSH
53633: LD_INT 44
53635: PUSH
53636: LD_INT 47
53638: PUSH
53639: LD_INT 45
53641: PUSH
53642: LD_INT 28
53644: PUSH
53645: LD_INT 7
53647: PUSH
53648: LD_INT 27
53650: PUSH
53651: LD_INT 29
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: IN
53666: PUSH
53667: LD_VAR 0 1
53671: PPUSH
53672: LD_INT 52
53674: PPUSH
53675: CALL_OW 321
53679: PUSH
53680: LD_INT 2
53682: EQUAL
53683: AND
53684: IFFALSE 53701
// bpoints := bpoints * 1.2 ;
53686: LD_ADDR_VAR 0 10
53690: PUSH
53691: LD_VAR 0 10
53695: PUSH
53696: LD_REAL  1.20000000000000E+0000
53699: MUL
53700: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
53701: LD_VAR 0 6
53705: PPUSH
53706: CALL_OW 264
53710: PUSH
53711: LD_INT 6
53713: PUSH
53714: LD_INT 46
53716: PUSH
53717: LD_INT 47
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: LIST
53724: IN
53725: IFFALSE 53742
// bpoints := bpoints * 1.2 ;
53727: LD_ADDR_VAR 0 10
53731: PUSH
53732: LD_VAR 0 10
53736: PUSH
53737: LD_REAL  1.20000000000000E+0000
53740: MUL
53741: ST_TO_ADDR
// end ; unit_building :
53742: GO 53756
53744: LD_INT 3
53746: DOUBLE
53747: EQUAL
53748: IFTRUE 53752
53750: GO 53755
53752: POP
// ; end ;
53753: GO 53756
53755: POP
// for j = 1 to 3 do
53756: LD_ADDR_VAR 0 7
53760: PUSH
53761: DOUBLE
53762: LD_INT 1
53764: DEC
53765: ST_TO_ADDR
53766: LD_INT 3
53768: PUSH
53769: FOR_TO
53770: IFFALSE 53823
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
53772: LD_ADDR_VAR 0 5
53776: PUSH
53777: LD_VAR 0 5
53781: PPUSH
53782: LD_VAR 0 7
53786: PPUSH
53787: LD_VAR 0 5
53791: PUSH
53792: LD_VAR 0 7
53796: ARRAY
53797: PUSH
53798: LD_VAR 0 9
53802: PUSH
53803: LD_VAR 0 7
53807: ARRAY
53808: PUSH
53809: LD_VAR 0 10
53813: MUL
53814: PLUS
53815: PPUSH
53816: CALL_OW 1
53820: ST_TO_ADDR
53821: GO 53769
53823: POP
53824: POP
// end ;
53825: GO 52302
53827: POP
53828: POP
// result := Replace ( result , 4 , tmp ) ;
53829: LD_ADDR_VAR 0 5
53833: PUSH
53834: LD_VAR 0 5
53838: PPUSH
53839: LD_INT 4
53841: PPUSH
53842: LD_VAR 0 8
53846: PPUSH
53847: CALL_OW 1
53851: ST_TO_ADDR
// end ;
53852: LD_VAR 0 5
53856: RET
// export function DangerAtRange ( unit , range ) ; begin
53857: LD_INT 0
53859: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
53860: LD_ADDR_VAR 0 3
53864: PUSH
53865: LD_VAR 0 1
53869: PPUSH
53870: CALL_OW 255
53874: PPUSH
53875: LD_VAR 0 1
53879: PPUSH
53880: CALL_OW 250
53884: PPUSH
53885: LD_VAR 0 1
53889: PPUSH
53890: CALL_OW 251
53894: PPUSH
53895: LD_VAR 0 2
53899: PPUSH
53900: CALL 52154 0 4
53904: ST_TO_ADDR
// end ;
53905: LD_VAR 0 3
53909: RET
// export function DangerInArea ( side , area ) ; begin
53910: LD_INT 0
53912: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
53913: LD_ADDR_VAR 0 3
53917: PUSH
53918: LD_VAR 0 2
53922: PPUSH
53923: LD_INT 81
53925: PUSH
53926: LD_VAR 0 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PPUSH
53935: CALL_OW 70
53939: ST_TO_ADDR
// end ;
53940: LD_VAR 0 3
53944: RET
// export function IsExtension ( b ) ; begin
53945: LD_INT 0
53947: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
53948: LD_ADDR_VAR 0 2
53952: PUSH
53953: LD_VAR 0 1
53957: PUSH
53958: LD_INT 23
53960: PUSH
53961: LD_INT 20
53963: PUSH
53964: LD_INT 22
53966: PUSH
53967: LD_INT 17
53969: PUSH
53970: LD_INT 24
53972: PUSH
53973: LD_INT 21
53975: PUSH
53976: LD_INT 19
53978: PUSH
53979: LD_INT 16
53981: PUSH
53982: LD_INT 25
53984: PUSH
53985: LD_INT 18
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: IN
54000: ST_TO_ADDR
// end ;
54001: LD_VAR 0 2
54005: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
54006: LD_INT 0
54008: PPUSH
54009: PPUSH
54010: PPUSH
// result := [ ] ;
54011: LD_ADDR_VAR 0 4
54015: PUSH
54016: EMPTY
54017: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
54018: LD_ADDR_VAR 0 5
54022: PUSH
54023: LD_VAR 0 2
54027: PPUSH
54028: LD_INT 21
54030: PUSH
54031: LD_INT 3
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PPUSH
54038: CALL_OW 70
54042: ST_TO_ADDR
// if not tmp then
54043: LD_VAR 0 5
54047: NOT
54048: IFFALSE 54052
// exit ;
54050: GO 54116
// if checkLink then
54052: LD_VAR 0 3
54056: IFFALSE 54106
// begin for i in tmp do
54058: LD_ADDR_VAR 0 6
54062: PUSH
54063: LD_VAR 0 5
54067: PUSH
54068: FOR_IN
54069: IFFALSE 54104
// if GetBase ( i ) <> base then
54071: LD_VAR 0 6
54075: PPUSH
54076: CALL_OW 274
54080: PUSH
54081: LD_VAR 0 1
54085: NONEQUAL
54086: IFFALSE 54102
// ComLinkToBase ( base , i ) ;
54088: LD_VAR 0 1
54092: PPUSH
54093: LD_VAR 0 6
54097: PPUSH
54098: CALL_OW 169
54102: GO 54068
54104: POP
54105: POP
// end ; result := tmp ;
54106: LD_ADDR_VAR 0 4
54110: PUSH
54111: LD_VAR 0 5
54115: ST_TO_ADDR
// end ;
54116: LD_VAR 0 4
54120: RET
// export function ComComplete ( units , b ) ; var i ; begin
54121: LD_INT 0
54123: PPUSH
54124: PPUSH
// if not units then
54125: LD_VAR 0 1
54129: NOT
54130: IFFALSE 54134
// exit ;
54132: GO 54224
// for i in units do
54134: LD_ADDR_VAR 0 4
54138: PUSH
54139: LD_VAR 0 1
54143: PUSH
54144: FOR_IN
54145: IFFALSE 54222
// if BuildingStatus ( b ) = bs_build then
54147: LD_VAR 0 2
54151: PPUSH
54152: CALL_OW 461
54156: PUSH
54157: LD_INT 1
54159: EQUAL
54160: IFFALSE 54220
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
54162: LD_VAR 0 4
54166: PPUSH
54167: LD_STRING h
54169: PUSH
54170: LD_VAR 0 2
54174: PPUSH
54175: CALL_OW 250
54179: PUSH
54180: LD_VAR 0 2
54184: PPUSH
54185: CALL_OW 251
54189: PUSH
54190: LD_VAR 0 2
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: PUSH
54213: EMPTY
54214: LIST
54215: PPUSH
54216: CALL_OW 446
54220: GO 54144
54222: POP
54223: POP
// end ;
54224: LD_VAR 0 3
54228: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
54229: LD_INT 0
54231: PPUSH
54232: PPUSH
54233: PPUSH
54234: PPUSH
54235: PPUSH
54236: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
54237: LD_VAR 0 1
54241: NOT
54242: PUSH
54243: LD_VAR 0 1
54247: PPUSH
54248: CALL_OW 263
54252: PUSH
54253: LD_INT 2
54255: NONEQUAL
54256: OR
54257: IFFALSE 54261
// exit ;
54259: GO 54577
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
54261: LD_ADDR_VAR 0 6
54265: PUSH
54266: LD_INT 22
54268: PUSH
54269: LD_VAR 0 1
54273: PPUSH
54274: CALL_OW 255
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: LD_INT 30
54288: PUSH
54289: LD_INT 36
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 34
54298: PUSH
54299: LD_INT 31
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: LIST
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PPUSH
54315: CALL_OW 69
54319: ST_TO_ADDR
// if not tmp then
54320: LD_VAR 0 6
54324: NOT
54325: IFFALSE 54329
// exit ;
54327: GO 54577
// result := [ ] ;
54329: LD_ADDR_VAR 0 2
54333: PUSH
54334: EMPTY
54335: ST_TO_ADDR
// for i in tmp do
54336: LD_ADDR_VAR 0 3
54340: PUSH
54341: LD_VAR 0 6
54345: PUSH
54346: FOR_IN
54347: IFFALSE 54418
// begin t := UnitsInside ( i ) ;
54349: LD_ADDR_VAR 0 4
54353: PUSH
54354: LD_VAR 0 3
54358: PPUSH
54359: CALL_OW 313
54363: ST_TO_ADDR
// if t then
54364: LD_VAR 0 4
54368: IFFALSE 54416
// for j in t do
54370: LD_ADDR_VAR 0 7
54374: PUSH
54375: LD_VAR 0 4
54379: PUSH
54380: FOR_IN
54381: IFFALSE 54414
// result := Replace ( result , result + 1 , j ) ;
54383: LD_ADDR_VAR 0 2
54387: PUSH
54388: LD_VAR 0 2
54392: PPUSH
54393: LD_VAR 0 2
54397: PUSH
54398: LD_INT 1
54400: PLUS
54401: PPUSH
54402: LD_VAR 0 7
54406: PPUSH
54407: CALL_OW 1
54411: ST_TO_ADDR
54412: GO 54380
54414: POP
54415: POP
// end ;
54416: GO 54346
54418: POP
54419: POP
// if not result then
54420: LD_VAR 0 2
54424: NOT
54425: IFFALSE 54429
// exit ;
54427: GO 54577
// mech := result [ 1 ] ;
54429: LD_ADDR_VAR 0 5
54433: PUSH
54434: LD_VAR 0 2
54438: PUSH
54439: LD_INT 1
54441: ARRAY
54442: ST_TO_ADDR
// if result > 1 then
54443: LD_VAR 0 2
54447: PUSH
54448: LD_INT 1
54450: GREATER
54451: IFFALSE 54563
// begin for i = 2 to result do
54453: LD_ADDR_VAR 0 3
54457: PUSH
54458: DOUBLE
54459: LD_INT 2
54461: DEC
54462: ST_TO_ADDR
54463: LD_VAR 0 2
54467: PUSH
54468: FOR_TO
54469: IFFALSE 54561
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
54471: LD_ADDR_VAR 0 4
54475: PUSH
54476: LD_VAR 0 2
54480: PUSH
54481: LD_VAR 0 3
54485: ARRAY
54486: PPUSH
54487: LD_INT 3
54489: PPUSH
54490: CALL_OW 259
54494: PUSH
54495: LD_VAR 0 2
54499: PUSH
54500: LD_VAR 0 3
54504: ARRAY
54505: PPUSH
54506: CALL_OW 432
54510: MINUS
54511: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
54512: LD_VAR 0 4
54516: PUSH
54517: LD_VAR 0 5
54521: PPUSH
54522: LD_INT 3
54524: PPUSH
54525: CALL_OW 259
54529: PUSH
54530: LD_VAR 0 5
54534: PPUSH
54535: CALL_OW 432
54539: MINUS
54540: GREATEREQUAL
54541: IFFALSE 54559
// mech := result [ i ] ;
54543: LD_ADDR_VAR 0 5
54547: PUSH
54548: LD_VAR 0 2
54552: PUSH
54553: LD_VAR 0 3
54557: ARRAY
54558: ST_TO_ADDR
// end ;
54559: GO 54468
54561: POP
54562: POP
// end ; ComLinkTo ( vehicle , mech ) ;
54563: LD_VAR 0 1
54567: PPUSH
54568: LD_VAR 0 5
54572: PPUSH
54573: CALL_OW 135
// end ;
54577: LD_VAR 0 2
54581: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
54582: LD_INT 0
54584: PPUSH
54585: PPUSH
54586: PPUSH
54587: PPUSH
54588: PPUSH
54589: PPUSH
54590: PPUSH
54591: PPUSH
54592: PPUSH
54593: PPUSH
54594: PPUSH
54595: PPUSH
54596: PPUSH
// result := [ ] ;
54597: LD_ADDR_VAR 0 7
54601: PUSH
54602: EMPTY
54603: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
54604: LD_VAR 0 1
54608: PPUSH
54609: CALL_OW 266
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: IN
54624: NOT
54625: IFFALSE 54629
// exit ;
54627: GO 56263
// if name then
54629: LD_VAR 0 3
54633: IFFALSE 54649
// SetBName ( base_dep , name ) ;
54635: LD_VAR 0 1
54639: PPUSH
54640: LD_VAR 0 3
54644: PPUSH
54645: CALL_OW 500
// base := GetBase ( base_dep ) ;
54649: LD_ADDR_VAR 0 15
54653: PUSH
54654: LD_VAR 0 1
54658: PPUSH
54659: CALL_OW 274
54663: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
54664: LD_ADDR_VAR 0 16
54668: PUSH
54669: LD_VAR 0 1
54673: PPUSH
54674: CALL_OW 255
54678: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
54679: LD_ADDR_VAR 0 17
54683: PUSH
54684: LD_VAR 0 1
54688: PPUSH
54689: CALL_OW 248
54693: ST_TO_ADDR
// if sources then
54694: LD_VAR 0 5
54698: IFFALSE 54745
// for i = 1 to 3 do
54700: LD_ADDR_VAR 0 8
54704: PUSH
54705: DOUBLE
54706: LD_INT 1
54708: DEC
54709: ST_TO_ADDR
54710: LD_INT 3
54712: PUSH
54713: FOR_TO
54714: IFFALSE 54743
// AddResourceType ( base , i , sources [ i ] ) ;
54716: LD_VAR 0 15
54720: PPUSH
54721: LD_VAR 0 8
54725: PPUSH
54726: LD_VAR 0 5
54730: PUSH
54731: LD_VAR 0 8
54735: ARRAY
54736: PPUSH
54737: CALL_OW 276
54741: GO 54713
54743: POP
54744: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
54745: LD_ADDR_VAR 0 18
54749: PUSH
54750: LD_VAR 0 15
54754: PPUSH
54755: LD_VAR 0 2
54759: PPUSH
54760: LD_INT 1
54762: PPUSH
54763: CALL 54006 0 3
54767: ST_TO_ADDR
// InitHc ;
54768: CALL_OW 19
// InitUc ;
54772: CALL_OW 18
// uc_side := side ;
54776: LD_ADDR_OWVAR 20
54780: PUSH
54781: LD_VAR 0 16
54785: ST_TO_ADDR
// uc_nation := nation ;
54786: LD_ADDR_OWVAR 21
54790: PUSH
54791: LD_VAR 0 17
54795: ST_TO_ADDR
// if buildings then
54796: LD_VAR 0 18
54800: IFFALSE 56122
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
54802: LD_ADDR_VAR 0 19
54806: PUSH
54807: LD_VAR 0 18
54811: PPUSH
54812: LD_INT 2
54814: PUSH
54815: LD_INT 30
54817: PUSH
54818: LD_INT 29
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 30
54827: PUSH
54828: LD_INT 30
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: LIST
54839: PPUSH
54840: CALL_OW 72
54844: ST_TO_ADDR
// if tmp then
54845: LD_VAR 0 19
54849: IFFALSE 54897
// for i in tmp do
54851: LD_ADDR_VAR 0 8
54855: PUSH
54856: LD_VAR 0 19
54860: PUSH
54861: FOR_IN
54862: IFFALSE 54895
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
54864: LD_VAR 0 8
54868: PPUSH
54869: CALL_OW 250
54873: PPUSH
54874: LD_VAR 0 8
54878: PPUSH
54879: CALL_OW 251
54883: PPUSH
54884: LD_VAR 0 16
54888: PPUSH
54889: CALL_OW 441
54893: GO 54861
54895: POP
54896: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
54897: LD_VAR 0 18
54901: PPUSH
54902: LD_INT 2
54904: PUSH
54905: LD_INT 30
54907: PUSH
54908: LD_INT 32
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 30
54917: PUSH
54918: LD_INT 33
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: LIST
54929: PPUSH
54930: CALL_OW 72
54934: IFFALSE 55022
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
54936: LD_ADDR_VAR 0 8
54940: PUSH
54941: LD_VAR 0 18
54945: PPUSH
54946: LD_INT 2
54948: PUSH
54949: LD_INT 30
54951: PUSH
54952: LD_INT 32
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 30
54961: PUSH
54962: LD_INT 33
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: LIST
54973: PPUSH
54974: CALL_OW 72
54978: PUSH
54979: FOR_IN
54980: IFFALSE 55020
// begin if not GetBWeapon ( i ) then
54982: LD_VAR 0 8
54986: PPUSH
54987: CALL_OW 269
54991: NOT
54992: IFFALSE 55018
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
54994: LD_VAR 0 8
54998: PPUSH
54999: LD_VAR 0 8
55003: PPUSH
55004: LD_VAR 0 2
55008: PPUSH
55009: CALL 56268 0 2
55013: PPUSH
55014: CALL_OW 431
// end ;
55018: GO 54979
55020: POP
55021: POP
// end ; for i = 1 to personel do
55022: LD_ADDR_VAR 0 8
55026: PUSH
55027: DOUBLE
55028: LD_INT 1
55030: DEC
55031: ST_TO_ADDR
55032: LD_VAR 0 6
55036: PUSH
55037: FOR_TO
55038: IFFALSE 56102
// begin if i > 4 then
55040: LD_VAR 0 8
55044: PUSH
55045: LD_INT 4
55047: GREATER
55048: IFFALSE 55052
// break ;
55050: GO 56102
// case i of 1 :
55052: LD_VAR 0 8
55056: PUSH
55057: LD_INT 1
55059: DOUBLE
55060: EQUAL
55061: IFTRUE 55065
55063: GO 55145
55065: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
55066: LD_ADDR_VAR 0 12
55070: PUSH
55071: LD_VAR 0 18
55075: PPUSH
55076: LD_INT 22
55078: PUSH
55079: LD_VAR 0 16
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 58
55090: PUSH
55091: EMPTY
55092: LIST
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: LD_INT 30
55099: PUSH
55100: LD_INT 32
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 30
55109: PUSH
55110: LD_INT 4
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 30
55119: PUSH
55120: LD_INT 5
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: LIST
55137: PPUSH
55138: CALL_OW 72
55142: ST_TO_ADDR
55143: GO 55367
55145: LD_INT 2
55147: DOUBLE
55148: EQUAL
55149: IFTRUE 55153
55151: GO 55215
55153: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
55154: LD_ADDR_VAR 0 12
55158: PUSH
55159: LD_VAR 0 18
55163: PPUSH
55164: LD_INT 22
55166: PUSH
55167: LD_VAR 0 16
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: LD_INT 30
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 30
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: LIST
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PPUSH
55208: CALL_OW 72
55212: ST_TO_ADDR
55213: GO 55367
55215: LD_INT 3
55217: DOUBLE
55218: EQUAL
55219: IFTRUE 55223
55221: GO 55285
55223: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
55224: LD_ADDR_VAR 0 12
55228: PUSH
55229: LD_VAR 0 18
55233: PPUSH
55234: LD_INT 22
55236: PUSH
55237: LD_VAR 0 16
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 2
55248: PUSH
55249: LD_INT 30
55251: PUSH
55252: LD_INT 2
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 30
55261: PUSH
55262: LD_INT 3
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: LIST
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PPUSH
55278: CALL_OW 72
55282: ST_TO_ADDR
55283: GO 55367
55285: LD_INT 4
55287: DOUBLE
55288: EQUAL
55289: IFTRUE 55293
55291: GO 55366
55293: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
55294: LD_ADDR_VAR 0 12
55298: PUSH
55299: LD_VAR 0 18
55303: PPUSH
55304: LD_INT 22
55306: PUSH
55307: LD_VAR 0 16
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: LD_INT 30
55321: PUSH
55322: LD_INT 6
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 30
55331: PUSH
55332: LD_INT 7
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 30
55341: PUSH
55342: LD_INT 8
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PPUSH
55359: CALL_OW 72
55363: ST_TO_ADDR
55364: GO 55367
55366: POP
// if i = 1 then
55367: LD_VAR 0 8
55371: PUSH
55372: LD_INT 1
55374: EQUAL
55375: IFFALSE 55486
// begin tmp := [ ] ;
55377: LD_ADDR_VAR 0 19
55381: PUSH
55382: EMPTY
55383: ST_TO_ADDR
// for j in f do
55384: LD_ADDR_VAR 0 9
55388: PUSH
55389: LD_VAR 0 12
55393: PUSH
55394: FOR_IN
55395: IFFALSE 55468
// if GetBType ( j ) = b_bunker then
55397: LD_VAR 0 9
55401: PPUSH
55402: CALL_OW 266
55406: PUSH
55407: LD_INT 32
55409: EQUAL
55410: IFFALSE 55437
// tmp := Insert ( tmp , 1 , j ) else
55412: LD_ADDR_VAR 0 19
55416: PUSH
55417: LD_VAR 0 19
55421: PPUSH
55422: LD_INT 1
55424: PPUSH
55425: LD_VAR 0 9
55429: PPUSH
55430: CALL_OW 2
55434: ST_TO_ADDR
55435: GO 55466
// tmp := Insert ( tmp , tmp + 1 , j ) ;
55437: LD_ADDR_VAR 0 19
55441: PUSH
55442: LD_VAR 0 19
55446: PPUSH
55447: LD_VAR 0 19
55451: PUSH
55452: LD_INT 1
55454: PLUS
55455: PPUSH
55456: LD_VAR 0 9
55460: PPUSH
55461: CALL_OW 2
55465: ST_TO_ADDR
55466: GO 55394
55468: POP
55469: POP
// if tmp then
55470: LD_VAR 0 19
55474: IFFALSE 55486
// f := tmp ;
55476: LD_ADDR_VAR 0 12
55480: PUSH
55481: LD_VAR 0 19
55485: ST_TO_ADDR
// end ; x := personel [ i ] ;
55486: LD_ADDR_VAR 0 13
55490: PUSH
55491: LD_VAR 0 6
55495: PUSH
55496: LD_VAR 0 8
55500: ARRAY
55501: ST_TO_ADDR
// if x = - 1 then
55502: LD_VAR 0 13
55506: PUSH
55507: LD_INT 1
55509: NEG
55510: EQUAL
55511: IFFALSE 55720
// begin for j in f do
55513: LD_ADDR_VAR 0 9
55517: PUSH
55518: LD_VAR 0 12
55522: PUSH
55523: FOR_IN
55524: IFFALSE 55716
// repeat InitHc ;
55526: CALL_OW 19
// if GetBType ( j ) = b_barracks then
55530: LD_VAR 0 9
55534: PPUSH
55535: CALL_OW 266
55539: PUSH
55540: LD_INT 5
55542: EQUAL
55543: IFFALSE 55613
// begin if UnitsInside ( j ) < 3 then
55545: LD_VAR 0 9
55549: PPUSH
55550: CALL_OW 313
55554: PUSH
55555: LD_INT 3
55557: LESS
55558: IFFALSE 55594
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
55560: LD_INT 0
55562: PPUSH
55563: LD_INT 5
55565: PUSH
55566: LD_INT 8
55568: PUSH
55569: LD_INT 9
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: LIST
55576: PUSH
55577: LD_VAR 0 17
55581: ARRAY
55582: PPUSH
55583: LD_VAR 0 4
55587: PPUSH
55588: CALL_OW 380
55592: GO 55611
// PrepareHuman ( false , i , skill ) ;
55594: LD_INT 0
55596: PPUSH
55597: LD_VAR 0 8
55601: PPUSH
55602: LD_VAR 0 4
55606: PPUSH
55607: CALL_OW 380
// end else
55611: GO 55630
// PrepareHuman ( false , i , skill ) ;
55613: LD_INT 0
55615: PPUSH
55616: LD_VAR 0 8
55620: PPUSH
55621: LD_VAR 0 4
55625: PPUSH
55626: CALL_OW 380
// un := CreateHuman ;
55630: LD_ADDR_VAR 0 14
55634: PUSH
55635: CALL_OW 44
55639: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55640: LD_ADDR_VAR 0 7
55644: PUSH
55645: LD_VAR 0 7
55649: PPUSH
55650: LD_INT 1
55652: PPUSH
55653: LD_VAR 0 14
55657: PPUSH
55658: CALL_OW 2
55662: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
55663: LD_VAR 0 14
55667: PPUSH
55668: LD_VAR 0 9
55672: PPUSH
55673: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
55677: LD_VAR 0 9
55681: PPUSH
55682: CALL_OW 313
55686: PUSH
55687: LD_INT 6
55689: EQUAL
55690: PUSH
55691: LD_VAR 0 9
55695: PPUSH
55696: CALL_OW 266
55700: PUSH
55701: LD_INT 32
55703: PUSH
55704: LD_INT 31
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: IN
55711: OR
55712: IFFALSE 55526
55714: GO 55523
55716: POP
55717: POP
// end else
55718: GO 56100
// for j = 1 to x do
55720: LD_ADDR_VAR 0 9
55724: PUSH
55725: DOUBLE
55726: LD_INT 1
55728: DEC
55729: ST_TO_ADDR
55730: LD_VAR 0 13
55734: PUSH
55735: FOR_TO
55736: IFFALSE 56098
// begin InitHc ;
55738: CALL_OW 19
// if not f then
55742: LD_VAR 0 12
55746: NOT
55747: IFFALSE 55836
// begin PrepareHuman ( false , i , skill ) ;
55749: LD_INT 0
55751: PPUSH
55752: LD_VAR 0 8
55756: PPUSH
55757: LD_VAR 0 4
55761: PPUSH
55762: CALL_OW 380
// un := CreateHuman ;
55766: LD_ADDR_VAR 0 14
55770: PUSH
55771: CALL_OW 44
55775: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55776: LD_ADDR_VAR 0 7
55780: PUSH
55781: LD_VAR 0 7
55785: PPUSH
55786: LD_INT 1
55788: PPUSH
55789: LD_VAR 0 14
55793: PPUSH
55794: CALL_OW 2
55798: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
55799: LD_VAR 0 14
55803: PPUSH
55804: LD_VAR 0 1
55808: PPUSH
55809: CALL_OW 250
55813: PPUSH
55814: LD_VAR 0 1
55818: PPUSH
55819: CALL_OW 251
55823: PPUSH
55824: LD_INT 10
55826: PPUSH
55827: LD_INT 0
55829: PPUSH
55830: CALL_OW 50
// continue ;
55834: GO 55735
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
55836: LD_VAR 0 12
55840: PUSH
55841: LD_INT 1
55843: ARRAY
55844: PPUSH
55845: CALL_OW 313
55849: PUSH
55850: LD_VAR 0 12
55854: PUSH
55855: LD_INT 1
55857: ARRAY
55858: PPUSH
55859: CALL_OW 266
55863: PUSH
55864: LD_INT 32
55866: PUSH
55867: LD_INT 31
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: IN
55874: AND
55875: PUSH
55876: LD_VAR 0 12
55880: PUSH
55881: LD_INT 1
55883: ARRAY
55884: PPUSH
55885: CALL_OW 313
55889: PUSH
55890: LD_INT 6
55892: EQUAL
55893: OR
55894: IFFALSE 55914
// f := Delete ( f , 1 ) ;
55896: LD_ADDR_VAR 0 12
55900: PUSH
55901: LD_VAR 0 12
55905: PPUSH
55906: LD_INT 1
55908: PPUSH
55909: CALL_OW 3
55913: ST_TO_ADDR
// if not f then
55914: LD_VAR 0 12
55918: NOT
55919: IFFALSE 55937
// begin x := x + 2 ;
55921: LD_ADDR_VAR 0 13
55925: PUSH
55926: LD_VAR 0 13
55930: PUSH
55931: LD_INT 2
55933: PLUS
55934: ST_TO_ADDR
// continue ;
55935: GO 55735
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
55937: LD_VAR 0 12
55941: PUSH
55942: LD_INT 1
55944: ARRAY
55945: PPUSH
55946: CALL_OW 266
55950: PUSH
55951: LD_INT 5
55953: EQUAL
55954: IFFALSE 56028
// begin if UnitsInside ( f [ 1 ] ) < 3 then
55956: LD_VAR 0 12
55960: PUSH
55961: LD_INT 1
55963: ARRAY
55964: PPUSH
55965: CALL_OW 313
55969: PUSH
55970: LD_INT 3
55972: LESS
55973: IFFALSE 56009
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
55975: LD_INT 0
55977: PPUSH
55978: LD_INT 5
55980: PUSH
55981: LD_INT 8
55983: PUSH
55984: LD_INT 9
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: LIST
55991: PUSH
55992: LD_VAR 0 17
55996: ARRAY
55997: PPUSH
55998: LD_VAR 0 4
56002: PPUSH
56003: CALL_OW 380
56007: GO 56026
// PrepareHuman ( false , i , skill ) ;
56009: LD_INT 0
56011: PPUSH
56012: LD_VAR 0 8
56016: PPUSH
56017: LD_VAR 0 4
56021: PPUSH
56022: CALL_OW 380
// end else
56026: GO 56045
// PrepareHuman ( false , i , skill ) ;
56028: LD_INT 0
56030: PPUSH
56031: LD_VAR 0 8
56035: PPUSH
56036: LD_VAR 0 4
56040: PPUSH
56041: CALL_OW 380
// un := CreateHuman ;
56045: LD_ADDR_VAR 0 14
56049: PUSH
56050: CALL_OW 44
56054: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56055: LD_ADDR_VAR 0 7
56059: PUSH
56060: LD_VAR 0 7
56064: PPUSH
56065: LD_INT 1
56067: PPUSH
56068: LD_VAR 0 14
56072: PPUSH
56073: CALL_OW 2
56077: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
56078: LD_VAR 0 14
56082: PPUSH
56083: LD_VAR 0 12
56087: PUSH
56088: LD_INT 1
56090: ARRAY
56091: PPUSH
56092: CALL_OW 52
// end ;
56096: GO 55735
56098: POP
56099: POP
// end ;
56100: GO 55037
56102: POP
56103: POP
// result := result ^ buildings ;
56104: LD_ADDR_VAR 0 7
56108: PUSH
56109: LD_VAR 0 7
56113: PUSH
56114: LD_VAR 0 18
56118: ADD
56119: ST_TO_ADDR
// end else
56120: GO 56263
// begin for i = 1 to personel do
56122: LD_ADDR_VAR 0 8
56126: PUSH
56127: DOUBLE
56128: LD_INT 1
56130: DEC
56131: ST_TO_ADDR
56132: LD_VAR 0 6
56136: PUSH
56137: FOR_TO
56138: IFFALSE 56261
// begin if i > 4 then
56140: LD_VAR 0 8
56144: PUSH
56145: LD_INT 4
56147: GREATER
56148: IFFALSE 56152
// break ;
56150: GO 56261
// x := personel [ i ] ;
56152: LD_ADDR_VAR 0 13
56156: PUSH
56157: LD_VAR 0 6
56161: PUSH
56162: LD_VAR 0 8
56166: ARRAY
56167: ST_TO_ADDR
// if x = - 1 then
56168: LD_VAR 0 13
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: EQUAL
56177: IFFALSE 56181
// continue ;
56179: GO 56137
// PrepareHuman ( false , i , skill ) ;
56181: LD_INT 0
56183: PPUSH
56184: LD_VAR 0 8
56188: PPUSH
56189: LD_VAR 0 4
56193: PPUSH
56194: CALL_OW 380
// un := CreateHuman ;
56198: LD_ADDR_VAR 0 14
56202: PUSH
56203: CALL_OW 44
56207: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
56208: LD_VAR 0 14
56212: PPUSH
56213: LD_VAR 0 1
56217: PPUSH
56218: CALL_OW 250
56222: PPUSH
56223: LD_VAR 0 1
56227: PPUSH
56228: CALL_OW 251
56232: PPUSH
56233: LD_INT 10
56235: PPUSH
56236: LD_INT 0
56238: PPUSH
56239: CALL_OW 50
// result := result ^ un ;
56243: LD_ADDR_VAR 0 7
56247: PUSH
56248: LD_VAR 0 7
56252: PUSH
56253: LD_VAR 0 14
56257: ADD
56258: ST_TO_ADDR
// end ;
56259: GO 56137
56261: POP
56262: POP
// end ; end ;
56263: LD_VAR 0 7
56267: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
56268: LD_INT 0
56270: PPUSH
56271: PPUSH
56272: PPUSH
56273: PPUSH
56274: PPUSH
56275: PPUSH
56276: PPUSH
56277: PPUSH
56278: PPUSH
56279: PPUSH
56280: PPUSH
56281: PPUSH
56282: PPUSH
56283: PPUSH
56284: PPUSH
56285: PPUSH
// result := false ;
56286: LD_ADDR_VAR 0 3
56290: PUSH
56291: LD_INT 0
56293: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
56294: LD_VAR 0 1
56298: NOT
56299: PUSH
56300: LD_VAR 0 1
56304: PPUSH
56305: CALL_OW 266
56309: PUSH
56310: LD_INT 32
56312: PUSH
56313: LD_INT 33
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: IN
56320: NOT
56321: OR
56322: IFFALSE 56326
// exit ;
56324: GO 57435
// nat := GetNation ( tower ) ;
56326: LD_ADDR_VAR 0 12
56330: PUSH
56331: LD_VAR 0 1
56335: PPUSH
56336: CALL_OW 248
56340: ST_TO_ADDR
// side := GetSide ( tower ) ;
56341: LD_ADDR_VAR 0 16
56345: PUSH
56346: LD_VAR 0 1
56350: PPUSH
56351: CALL_OW 255
56355: ST_TO_ADDR
// x := GetX ( tower ) ;
56356: LD_ADDR_VAR 0 10
56360: PUSH
56361: LD_VAR 0 1
56365: PPUSH
56366: CALL_OW 250
56370: ST_TO_ADDR
// y := GetY ( tower ) ;
56371: LD_ADDR_VAR 0 11
56375: PUSH
56376: LD_VAR 0 1
56380: PPUSH
56381: CALL_OW 251
56385: ST_TO_ADDR
// if not x or not y then
56386: LD_VAR 0 10
56390: NOT
56391: PUSH
56392: LD_VAR 0 11
56396: NOT
56397: OR
56398: IFFALSE 56402
// exit ;
56400: GO 57435
// weapon := 0 ;
56402: LD_ADDR_VAR 0 18
56406: PUSH
56407: LD_INT 0
56409: ST_TO_ADDR
// fac_list := [ ] ;
56410: LD_ADDR_VAR 0 17
56414: PUSH
56415: EMPTY
56416: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
56417: LD_ADDR_VAR 0 6
56421: PUSH
56422: LD_VAR 0 1
56426: PPUSH
56427: CALL_OW 274
56431: PPUSH
56432: LD_VAR 0 2
56436: PPUSH
56437: LD_INT 0
56439: PPUSH
56440: CALL 54006 0 3
56444: PPUSH
56445: LD_INT 30
56447: PUSH
56448: LD_INT 3
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PPUSH
56455: CALL_OW 72
56459: ST_TO_ADDR
// if not factories then
56460: LD_VAR 0 6
56464: NOT
56465: IFFALSE 56469
// exit ;
56467: GO 57435
// for i in factories do
56469: LD_ADDR_VAR 0 8
56473: PUSH
56474: LD_VAR 0 6
56478: PUSH
56479: FOR_IN
56480: IFFALSE 56505
// fac_list := fac_list union AvailableWeaponList ( i ) ;
56482: LD_ADDR_VAR 0 17
56486: PUSH
56487: LD_VAR 0 17
56491: PUSH
56492: LD_VAR 0 8
56496: PPUSH
56497: CALL_OW 478
56501: UNION
56502: ST_TO_ADDR
56503: GO 56479
56505: POP
56506: POP
// if not fac_list then
56507: LD_VAR 0 17
56511: NOT
56512: IFFALSE 56516
// exit ;
56514: GO 57435
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
56516: LD_ADDR_VAR 0 5
56520: PUSH
56521: LD_INT 4
56523: PUSH
56524: LD_INT 5
56526: PUSH
56527: LD_INT 9
56529: PUSH
56530: LD_INT 10
56532: PUSH
56533: LD_INT 6
56535: PUSH
56536: LD_INT 7
56538: PUSH
56539: LD_INT 11
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 27
56553: PUSH
56554: LD_INT 28
56556: PUSH
56557: LD_INT 26
56559: PUSH
56560: LD_INT 30
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 43
56571: PUSH
56572: LD_INT 44
56574: PUSH
56575: LD_INT 46
56577: PUSH
56578: LD_INT 45
56580: PUSH
56581: LD_INT 47
56583: PUSH
56584: LD_INT 49
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: LIST
56599: PUSH
56600: LD_VAR 0 12
56604: ARRAY
56605: ST_TO_ADDR
// list := list isect fac_list ;
56606: LD_ADDR_VAR 0 5
56610: PUSH
56611: LD_VAR 0 5
56615: PUSH
56616: LD_VAR 0 17
56620: ISECT
56621: ST_TO_ADDR
// if not list then
56622: LD_VAR 0 5
56626: NOT
56627: IFFALSE 56631
// exit ;
56629: GO 57435
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
56631: LD_VAR 0 12
56635: PUSH
56636: LD_INT 3
56638: EQUAL
56639: PUSH
56640: LD_INT 49
56642: PUSH
56643: LD_VAR 0 5
56647: IN
56648: AND
56649: PUSH
56650: LD_INT 31
56652: PPUSH
56653: LD_VAR 0 16
56657: PPUSH
56658: CALL_OW 321
56662: PUSH
56663: LD_INT 2
56665: EQUAL
56666: AND
56667: IFFALSE 56727
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
56669: LD_INT 22
56671: PUSH
56672: LD_VAR 0 16
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 35
56683: PUSH
56684: LD_INT 49
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 91
56693: PUSH
56694: LD_VAR 0 1
56698: PUSH
56699: LD_INT 10
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: LIST
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: LIST
56711: PPUSH
56712: CALL_OW 69
56716: NOT
56717: IFFALSE 56727
// weapon := ru_time_lapser ;
56719: LD_ADDR_VAR 0 18
56723: PUSH
56724: LD_INT 49
56726: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
56727: LD_VAR 0 12
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: LD_INT 2
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: IN
56742: PUSH
56743: LD_INT 11
56745: PUSH
56746: LD_VAR 0 5
56750: IN
56751: PUSH
56752: LD_INT 30
56754: PUSH
56755: LD_VAR 0 5
56759: IN
56760: OR
56761: AND
56762: PUSH
56763: LD_INT 6
56765: PPUSH
56766: LD_VAR 0 16
56770: PPUSH
56771: CALL_OW 321
56775: PUSH
56776: LD_INT 2
56778: EQUAL
56779: AND
56780: IFFALSE 56945
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
56782: LD_INT 22
56784: PUSH
56785: LD_VAR 0 16
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 2
56796: PUSH
56797: LD_INT 35
56799: PUSH
56800: LD_INT 11
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 35
56809: PUSH
56810: LD_INT 30
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 91
56824: PUSH
56825: LD_VAR 0 1
56829: PUSH
56830: LD_INT 18
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: LIST
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: LIST
56842: PPUSH
56843: CALL_OW 69
56847: NOT
56848: PUSH
56849: LD_INT 22
56851: PUSH
56852: LD_VAR 0 16
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 2
56863: PUSH
56864: LD_INT 30
56866: PUSH
56867: LD_INT 32
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 30
56876: PUSH
56877: LD_INT 33
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 91
56891: PUSH
56892: LD_VAR 0 1
56896: PUSH
56897: LD_INT 12
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: LIST
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: LIST
56909: PUSH
56910: EMPTY
56911: LIST
56912: PPUSH
56913: CALL_OW 69
56917: PUSH
56918: LD_INT 2
56920: GREATER
56921: AND
56922: IFFALSE 56945
// weapon := [ us_radar , ar_radar ] [ nat ] ;
56924: LD_ADDR_VAR 0 18
56928: PUSH
56929: LD_INT 11
56931: PUSH
56932: LD_INT 30
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_VAR 0 12
56943: ARRAY
56944: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
56945: LD_VAR 0 18
56949: NOT
56950: PUSH
56951: LD_INT 40
56953: PPUSH
56954: LD_VAR 0 16
56958: PPUSH
56959: CALL_OW 321
56963: PUSH
56964: LD_INT 2
56966: EQUAL
56967: AND
56968: PUSH
56969: LD_INT 7
56971: PUSH
56972: LD_VAR 0 5
56976: IN
56977: PUSH
56978: LD_INT 28
56980: PUSH
56981: LD_VAR 0 5
56985: IN
56986: OR
56987: PUSH
56988: LD_INT 45
56990: PUSH
56991: LD_VAR 0 5
56995: IN
56996: OR
56997: AND
56998: IFFALSE 57252
// begin hex := GetHexInfo ( x , y ) ;
57000: LD_ADDR_VAR 0 4
57004: PUSH
57005: LD_VAR 0 10
57009: PPUSH
57010: LD_VAR 0 11
57014: PPUSH
57015: CALL_OW 546
57019: ST_TO_ADDR
// if hex [ 1 ] then
57020: LD_VAR 0 4
57024: PUSH
57025: LD_INT 1
57027: ARRAY
57028: IFFALSE 57032
// exit ;
57030: GO 57435
// height := hex [ 2 ] ;
57032: LD_ADDR_VAR 0 15
57036: PUSH
57037: LD_VAR 0 4
57041: PUSH
57042: LD_INT 2
57044: ARRAY
57045: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
57046: LD_ADDR_VAR 0 14
57050: PUSH
57051: LD_INT 0
57053: PUSH
57054: LD_INT 2
57056: PUSH
57057: LD_INT 3
57059: PUSH
57060: LD_INT 5
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: ST_TO_ADDR
// for i in tmp do
57069: LD_ADDR_VAR 0 8
57073: PUSH
57074: LD_VAR 0 14
57078: PUSH
57079: FOR_IN
57080: IFFALSE 57250
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
57082: LD_ADDR_VAR 0 9
57086: PUSH
57087: LD_VAR 0 10
57091: PPUSH
57092: LD_VAR 0 8
57096: PPUSH
57097: LD_INT 5
57099: PPUSH
57100: CALL_OW 272
57104: PUSH
57105: LD_VAR 0 11
57109: PPUSH
57110: LD_VAR 0 8
57114: PPUSH
57115: LD_INT 5
57117: PPUSH
57118: CALL_OW 273
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
57127: LD_VAR 0 9
57131: PUSH
57132: LD_INT 1
57134: ARRAY
57135: PPUSH
57136: LD_VAR 0 9
57140: PUSH
57141: LD_INT 2
57143: ARRAY
57144: PPUSH
57145: CALL_OW 488
57149: IFFALSE 57248
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
57151: LD_ADDR_VAR 0 4
57155: PUSH
57156: LD_VAR 0 9
57160: PUSH
57161: LD_INT 1
57163: ARRAY
57164: PPUSH
57165: LD_VAR 0 9
57169: PUSH
57170: LD_INT 2
57172: ARRAY
57173: PPUSH
57174: CALL_OW 546
57178: ST_TO_ADDR
// if hex [ 1 ] then
57179: LD_VAR 0 4
57183: PUSH
57184: LD_INT 1
57186: ARRAY
57187: IFFALSE 57191
// continue ;
57189: GO 57079
// h := hex [ 2 ] ;
57191: LD_ADDR_VAR 0 13
57195: PUSH
57196: LD_VAR 0 4
57200: PUSH
57201: LD_INT 2
57203: ARRAY
57204: ST_TO_ADDR
// if h + 7 < height then
57205: LD_VAR 0 13
57209: PUSH
57210: LD_INT 7
57212: PLUS
57213: PUSH
57214: LD_VAR 0 15
57218: LESS
57219: IFFALSE 57248
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
57221: LD_ADDR_VAR 0 18
57225: PUSH
57226: LD_INT 7
57228: PUSH
57229: LD_INT 28
57231: PUSH
57232: LD_INT 45
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: LIST
57239: PUSH
57240: LD_VAR 0 12
57244: ARRAY
57245: ST_TO_ADDR
// break ;
57246: GO 57250
// end ; end ; end ;
57248: GO 57079
57250: POP
57251: POP
// end ; if not weapon then
57252: LD_VAR 0 18
57256: NOT
57257: IFFALSE 57317
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
57259: LD_ADDR_VAR 0 5
57263: PUSH
57264: LD_VAR 0 5
57268: PUSH
57269: LD_INT 11
57271: PUSH
57272: LD_INT 30
57274: PUSH
57275: LD_INT 49
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: LIST
57282: DIFF
57283: ST_TO_ADDR
// if not list then
57284: LD_VAR 0 5
57288: NOT
57289: IFFALSE 57293
// exit ;
57291: GO 57435
// weapon := list [ rand ( 1 , list ) ] ;
57293: LD_ADDR_VAR 0 18
57297: PUSH
57298: LD_VAR 0 5
57302: PUSH
57303: LD_INT 1
57305: PPUSH
57306: LD_VAR 0 5
57310: PPUSH
57311: CALL_OW 12
57315: ARRAY
57316: ST_TO_ADDR
// end ; if weapon then
57317: LD_VAR 0 18
57321: IFFALSE 57435
// begin tmp := CostOfWeapon ( weapon ) ;
57323: LD_ADDR_VAR 0 14
57327: PUSH
57328: LD_VAR 0 18
57332: PPUSH
57333: CALL_OW 451
57337: ST_TO_ADDR
// j := GetBase ( tower ) ;
57338: LD_ADDR_VAR 0 9
57342: PUSH
57343: LD_VAR 0 1
57347: PPUSH
57348: CALL_OW 274
57352: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
57353: LD_VAR 0 9
57357: PPUSH
57358: LD_INT 1
57360: PPUSH
57361: CALL_OW 275
57365: PUSH
57366: LD_VAR 0 14
57370: PUSH
57371: LD_INT 1
57373: ARRAY
57374: GREATEREQUAL
57375: PUSH
57376: LD_VAR 0 9
57380: PPUSH
57381: LD_INT 2
57383: PPUSH
57384: CALL_OW 275
57388: PUSH
57389: LD_VAR 0 14
57393: PUSH
57394: LD_INT 2
57396: ARRAY
57397: GREATEREQUAL
57398: AND
57399: PUSH
57400: LD_VAR 0 9
57404: PPUSH
57405: LD_INT 3
57407: PPUSH
57408: CALL_OW 275
57412: PUSH
57413: LD_VAR 0 14
57417: PUSH
57418: LD_INT 3
57420: ARRAY
57421: GREATEREQUAL
57422: AND
57423: IFFALSE 57435
// result := weapon ;
57425: LD_ADDR_VAR 0 3
57429: PUSH
57430: LD_VAR 0 18
57434: ST_TO_ADDR
// end ; end ;
57435: LD_VAR 0 3
57439: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
57440: LD_INT 0
57442: PPUSH
57443: PPUSH
// result := true ;
57444: LD_ADDR_VAR 0 3
57448: PUSH
57449: LD_INT 1
57451: ST_TO_ADDR
// if array1 = array2 then
57452: LD_VAR 0 1
57456: PUSH
57457: LD_VAR 0 2
57461: EQUAL
57462: IFFALSE 57522
// begin for i = 1 to array1 do
57464: LD_ADDR_VAR 0 4
57468: PUSH
57469: DOUBLE
57470: LD_INT 1
57472: DEC
57473: ST_TO_ADDR
57474: LD_VAR 0 1
57478: PUSH
57479: FOR_TO
57480: IFFALSE 57518
// if array1 [ i ] <> array2 [ i ] then
57482: LD_VAR 0 1
57486: PUSH
57487: LD_VAR 0 4
57491: ARRAY
57492: PUSH
57493: LD_VAR 0 2
57497: PUSH
57498: LD_VAR 0 4
57502: ARRAY
57503: NONEQUAL
57504: IFFALSE 57516
// begin result := false ;
57506: LD_ADDR_VAR 0 3
57510: PUSH
57511: LD_INT 0
57513: ST_TO_ADDR
// break ;
57514: GO 57518
// end ;
57516: GO 57479
57518: POP
57519: POP
// end else
57520: GO 57530
// result := false ;
57522: LD_ADDR_VAR 0 3
57526: PUSH
57527: LD_INT 0
57529: ST_TO_ADDR
// end ;
57530: LD_VAR 0 3
57534: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
57535: LD_INT 0
57537: PPUSH
57538: PPUSH
// if not array1 or not array2 then
57539: LD_VAR 0 1
57543: NOT
57544: PUSH
57545: LD_VAR 0 2
57549: NOT
57550: OR
57551: IFFALSE 57555
// exit ;
57553: GO 57619
// result := true ;
57555: LD_ADDR_VAR 0 3
57559: PUSH
57560: LD_INT 1
57562: ST_TO_ADDR
// for i = 1 to array1 do
57563: LD_ADDR_VAR 0 4
57567: PUSH
57568: DOUBLE
57569: LD_INT 1
57571: DEC
57572: ST_TO_ADDR
57573: LD_VAR 0 1
57577: PUSH
57578: FOR_TO
57579: IFFALSE 57617
// if array1 [ i ] <> array2 [ i ] then
57581: LD_VAR 0 1
57585: PUSH
57586: LD_VAR 0 4
57590: ARRAY
57591: PUSH
57592: LD_VAR 0 2
57596: PUSH
57597: LD_VAR 0 4
57601: ARRAY
57602: NONEQUAL
57603: IFFALSE 57615
// begin result := false ;
57605: LD_ADDR_VAR 0 3
57609: PUSH
57610: LD_INT 0
57612: ST_TO_ADDR
// break ;
57613: GO 57617
// end ;
57615: GO 57578
57617: POP
57618: POP
// end ;
57619: LD_VAR 0 3
57623: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
57624: LD_INT 0
57626: PPUSH
57627: PPUSH
57628: PPUSH
// pom := GetBase ( fac ) ;
57629: LD_ADDR_VAR 0 5
57633: PUSH
57634: LD_VAR 0 1
57638: PPUSH
57639: CALL_OW 274
57643: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
57644: LD_ADDR_VAR 0 4
57648: PUSH
57649: LD_VAR 0 2
57653: PUSH
57654: LD_INT 1
57656: ARRAY
57657: PPUSH
57658: LD_VAR 0 2
57662: PUSH
57663: LD_INT 2
57665: ARRAY
57666: PPUSH
57667: LD_VAR 0 2
57671: PUSH
57672: LD_INT 3
57674: ARRAY
57675: PPUSH
57676: LD_VAR 0 2
57680: PUSH
57681: LD_INT 4
57683: ARRAY
57684: PPUSH
57685: CALL_OW 449
57689: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57690: LD_ADDR_VAR 0 3
57694: PUSH
57695: LD_VAR 0 5
57699: PPUSH
57700: LD_INT 1
57702: PPUSH
57703: CALL_OW 275
57707: PUSH
57708: LD_VAR 0 4
57712: PUSH
57713: LD_INT 1
57715: ARRAY
57716: GREATEREQUAL
57717: PUSH
57718: LD_VAR 0 5
57722: PPUSH
57723: LD_INT 2
57725: PPUSH
57726: CALL_OW 275
57730: PUSH
57731: LD_VAR 0 4
57735: PUSH
57736: LD_INT 2
57738: ARRAY
57739: GREATEREQUAL
57740: AND
57741: PUSH
57742: LD_VAR 0 5
57746: PPUSH
57747: LD_INT 3
57749: PPUSH
57750: CALL_OW 275
57754: PUSH
57755: LD_VAR 0 4
57759: PUSH
57760: LD_INT 3
57762: ARRAY
57763: GREATEREQUAL
57764: AND
57765: ST_TO_ADDR
// end ;
57766: LD_VAR 0 3
57770: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
57771: LD_INT 0
57773: PPUSH
57774: PPUSH
57775: PPUSH
57776: PPUSH
// pom := GetBase ( building ) ;
57777: LD_ADDR_VAR 0 3
57781: PUSH
57782: LD_VAR 0 1
57786: PPUSH
57787: CALL_OW 274
57791: ST_TO_ADDR
// if not pom then
57792: LD_VAR 0 3
57796: NOT
57797: IFFALSE 57801
// exit ;
57799: GO 57971
// btype := GetBType ( building ) ;
57801: LD_ADDR_VAR 0 5
57805: PUSH
57806: LD_VAR 0 1
57810: PPUSH
57811: CALL_OW 266
57815: ST_TO_ADDR
// if btype = b_armoury then
57816: LD_VAR 0 5
57820: PUSH
57821: LD_INT 4
57823: EQUAL
57824: IFFALSE 57834
// btype := b_barracks ;
57826: LD_ADDR_VAR 0 5
57830: PUSH
57831: LD_INT 5
57833: ST_TO_ADDR
// if btype = b_depot then
57834: LD_VAR 0 5
57838: PUSH
57839: LD_INT 0
57841: EQUAL
57842: IFFALSE 57852
// btype := b_warehouse ;
57844: LD_ADDR_VAR 0 5
57848: PUSH
57849: LD_INT 1
57851: ST_TO_ADDR
// if btype = b_workshop then
57852: LD_VAR 0 5
57856: PUSH
57857: LD_INT 2
57859: EQUAL
57860: IFFALSE 57870
// btype := b_factory ;
57862: LD_ADDR_VAR 0 5
57866: PUSH
57867: LD_INT 3
57869: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
57870: LD_ADDR_VAR 0 4
57874: PUSH
57875: LD_VAR 0 5
57879: PPUSH
57880: LD_VAR 0 1
57884: PPUSH
57885: CALL_OW 248
57889: PPUSH
57890: CALL_OW 450
57894: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57895: LD_ADDR_VAR 0 2
57899: PUSH
57900: LD_VAR 0 3
57904: PPUSH
57905: LD_INT 1
57907: PPUSH
57908: CALL_OW 275
57912: PUSH
57913: LD_VAR 0 4
57917: PUSH
57918: LD_INT 1
57920: ARRAY
57921: GREATEREQUAL
57922: PUSH
57923: LD_VAR 0 3
57927: PPUSH
57928: LD_INT 2
57930: PPUSH
57931: CALL_OW 275
57935: PUSH
57936: LD_VAR 0 4
57940: PUSH
57941: LD_INT 2
57943: ARRAY
57944: GREATEREQUAL
57945: AND
57946: PUSH
57947: LD_VAR 0 3
57951: PPUSH
57952: LD_INT 3
57954: PPUSH
57955: CALL_OW 275
57959: PUSH
57960: LD_VAR 0 4
57964: PUSH
57965: LD_INT 3
57967: ARRAY
57968: GREATEREQUAL
57969: AND
57970: ST_TO_ADDR
// end ;
57971: LD_VAR 0 2
57975: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
57976: LD_INT 0
57978: PPUSH
57979: PPUSH
57980: PPUSH
// pom := GetBase ( building ) ;
57981: LD_ADDR_VAR 0 4
57985: PUSH
57986: LD_VAR 0 1
57990: PPUSH
57991: CALL_OW 274
57995: ST_TO_ADDR
// if not pom then
57996: LD_VAR 0 4
58000: NOT
58001: IFFALSE 58005
// exit ;
58003: GO 58106
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
58005: LD_ADDR_VAR 0 5
58009: PUSH
58010: LD_VAR 0 2
58014: PPUSH
58015: LD_VAR 0 1
58019: PPUSH
58020: CALL_OW 248
58024: PPUSH
58025: CALL_OW 450
58029: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58030: LD_ADDR_VAR 0 3
58034: PUSH
58035: LD_VAR 0 4
58039: PPUSH
58040: LD_INT 1
58042: PPUSH
58043: CALL_OW 275
58047: PUSH
58048: LD_VAR 0 5
58052: PUSH
58053: LD_INT 1
58055: ARRAY
58056: GREATEREQUAL
58057: PUSH
58058: LD_VAR 0 4
58062: PPUSH
58063: LD_INT 2
58065: PPUSH
58066: CALL_OW 275
58070: PUSH
58071: LD_VAR 0 5
58075: PUSH
58076: LD_INT 2
58078: ARRAY
58079: GREATEREQUAL
58080: AND
58081: PUSH
58082: LD_VAR 0 4
58086: PPUSH
58087: LD_INT 3
58089: PPUSH
58090: CALL_OW 275
58094: PUSH
58095: LD_VAR 0 5
58099: PUSH
58100: LD_INT 3
58102: ARRAY
58103: GREATEREQUAL
58104: AND
58105: ST_TO_ADDR
// end ;
58106: LD_VAR 0 3
58110: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
58111: LD_INT 0
58113: PPUSH
58114: PPUSH
58115: PPUSH
58116: PPUSH
58117: PPUSH
58118: PPUSH
58119: PPUSH
58120: PPUSH
58121: PPUSH
58122: PPUSH
58123: PPUSH
// result := false ;
58124: LD_ADDR_VAR 0 8
58128: PUSH
58129: LD_INT 0
58131: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
58132: LD_VAR 0 5
58136: NOT
58137: PUSH
58138: LD_VAR 0 1
58142: NOT
58143: OR
58144: PUSH
58145: LD_VAR 0 2
58149: NOT
58150: OR
58151: PUSH
58152: LD_VAR 0 3
58156: NOT
58157: OR
58158: IFFALSE 58162
// exit ;
58160: GO 58976
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
58162: LD_ADDR_VAR 0 14
58166: PUSH
58167: LD_VAR 0 1
58171: PPUSH
58172: LD_VAR 0 2
58176: PPUSH
58177: LD_VAR 0 3
58181: PPUSH
58182: LD_VAR 0 4
58186: PPUSH
58187: LD_VAR 0 5
58191: PUSH
58192: LD_INT 1
58194: ARRAY
58195: PPUSH
58196: CALL_OW 248
58200: PPUSH
58201: LD_INT 0
58203: PPUSH
58204: CALL 60213 0 6
58208: ST_TO_ADDR
// if not hexes then
58209: LD_VAR 0 14
58213: NOT
58214: IFFALSE 58218
// exit ;
58216: GO 58976
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58218: LD_ADDR_VAR 0 17
58222: PUSH
58223: LD_VAR 0 5
58227: PPUSH
58228: LD_INT 22
58230: PUSH
58231: LD_VAR 0 13
58235: PPUSH
58236: CALL_OW 255
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 2
58247: PUSH
58248: LD_INT 30
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 30
58260: PUSH
58261: LD_INT 1
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: LIST
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PPUSH
58277: CALL_OW 72
58281: ST_TO_ADDR
// for i = 1 to hexes do
58282: LD_ADDR_VAR 0 9
58286: PUSH
58287: DOUBLE
58288: LD_INT 1
58290: DEC
58291: ST_TO_ADDR
58292: LD_VAR 0 14
58296: PUSH
58297: FOR_TO
58298: IFFALSE 58974
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58300: LD_ADDR_VAR 0 13
58304: PUSH
58305: LD_VAR 0 14
58309: PUSH
58310: LD_VAR 0 9
58314: ARRAY
58315: PUSH
58316: LD_INT 1
58318: ARRAY
58319: PPUSH
58320: LD_VAR 0 14
58324: PUSH
58325: LD_VAR 0 9
58329: ARRAY
58330: PUSH
58331: LD_INT 2
58333: ARRAY
58334: PPUSH
58335: CALL_OW 428
58339: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
58340: LD_VAR 0 14
58344: PUSH
58345: LD_VAR 0 9
58349: ARRAY
58350: PUSH
58351: LD_INT 1
58353: ARRAY
58354: PPUSH
58355: LD_VAR 0 14
58359: PUSH
58360: LD_VAR 0 9
58364: ARRAY
58365: PUSH
58366: LD_INT 2
58368: ARRAY
58369: PPUSH
58370: CALL_OW 351
58374: PUSH
58375: LD_VAR 0 14
58379: PUSH
58380: LD_VAR 0 9
58384: ARRAY
58385: PUSH
58386: LD_INT 1
58388: ARRAY
58389: PPUSH
58390: LD_VAR 0 14
58394: PUSH
58395: LD_VAR 0 9
58399: ARRAY
58400: PUSH
58401: LD_INT 2
58403: ARRAY
58404: PPUSH
58405: CALL_OW 488
58409: NOT
58410: OR
58411: PUSH
58412: LD_VAR 0 13
58416: PPUSH
58417: CALL_OW 247
58421: PUSH
58422: LD_INT 3
58424: EQUAL
58425: OR
58426: IFFALSE 58432
// exit ;
58428: POP
58429: POP
58430: GO 58976
// if not tmp then
58432: LD_VAR 0 13
58436: NOT
58437: IFFALSE 58441
// continue ;
58439: GO 58297
// result := true ;
58441: LD_ADDR_VAR 0 8
58445: PUSH
58446: LD_INT 1
58448: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
58449: LD_VAR 0 6
58453: PUSH
58454: LD_VAR 0 13
58458: PPUSH
58459: CALL_OW 247
58463: PUSH
58464: LD_INT 2
58466: EQUAL
58467: AND
58468: PUSH
58469: LD_VAR 0 13
58473: PPUSH
58474: CALL_OW 263
58478: PUSH
58479: LD_INT 1
58481: EQUAL
58482: AND
58483: IFFALSE 58647
// begin if IsDrivenBy ( tmp ) then
58485: LD_VAR 0 13
58489: PPUSH
58490: CALL_OW 311
58494: IFFALSE 58498
// continue ;
58496: GO 58297
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
58498: LD_VAR 0 6
58502: PPUSH
58503: LD_INT 3
58505: PUSH
58506: LD_INT 60
58508: PUSH
58509: EMPTY
58510: LIST
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 3
58518: PUSH
58519: LD_INT 55
58521: PUSH
58522: EMPTY
58523: LIST
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PPUSH
58533: CALL_OW 72
58537: IFFALSE 58645
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
58539: LD_ADDR_VAR 0 18
58543: PUSH
58544: LD_VAR 0 6
58548: PPUSH
58549: LD_INT 3
58551: PUSH
58552: LD_INT 60
58554: PUSH
58555: EMPTY
58556: LIST
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 3
58564: PUSH
58565: LD_INT 55
58567: PUSH
58568: EMPTY
58569: LIST
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PPUSH
58579: CALL_OW 72
58583: PUSH
58584: LD_INT 1
58586: ARRAY
58587: ST_TO_ADDR
// if IsInUnit ( driver ) then
58588: LD_VAR 0 18
58592: PPUSH
58593: CALL_OW 310
58597: IFFALSE 58608
// ComExit ( driver ) ;
58599: LD_VAR 0 18
58603: PPUSH
58604: CALL 83341 0 1
// AddComEnterUnit ( driver , tmp ) ;
58608: LD_VAR 0 18
58612: PPUSH
58613: LD_VAR 0 13
58617: PPUSH
58618: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
58622: LD_VAR 0 18
58626: PPUSH
58627: LD_VAR 0 7
58631: PPUSH
58632: CALL_OW 173
// AddComExitVehicle ( driver ) ;
58636: LD_VAR 0 18
58640: PPUSH
58641: CALL_OW 181
// end ; continue ;
58645: GO 58297
// end ; if not cleaners or not tmp in cleaners then
58647: LD_VAR 0 6
58651: NOT
58652: PUSH
58653: LD_VAR 0 13
58657: PUSH
58658: LD_VAR 0 6
58662: IN
58663: NOT
58664: OR
58665: IFFALSE 58972
// begin if dep then
58667: LD_VAR 0 17
58671: IFFALSE 58807
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
58673: LD_ADDR_VAR 0 16
58677: PUSH
58678: LD_VAR 0 17
58682: PUSH
58683: LD_INT 1
58685: ARRAY
58686: PPUSH
58687: CALL_OW 250
58691: PPUSH
58692: LD_VAR 0 17
58696: PUSH
58697: LD_INT 1
58699: ARRAY
58700: PPUSH
58701: CALL_OW 254
58705: PPUSH
58706: LD_INT 5
58708: PPUSH
58709: CALL_OW 272
58713: PUSH
58714: LD_VAR 0 17
58718: PUSH
58719: LD_INT 1
58721: ARRAY
58722: PPUSH
58723: CALL_OW 251
58727: PPUSH
58728: LD_VAR 0 17
58732: PUSH
58733: LD_INT 1
58735: ARRAY
58736: PPUSH
58737: CALL_OW 254
58741: PPUSH
58742: LD_INT 5
58744: PPUSH
58745: CALL_OW 273
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
58754: LD_VAR 0 16
58758: PUSH
58759: LD_INT 1
58761: ARRAY
58762: PPUSH
58763: LD_VAR 0 16
58767: PUSH
58768: LD_INT 2
58770: ARRAY
58771: PPUSH
58772: CALL_OW 488
58776: IFFALSE 58807
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
58778: LD_VAR 0 13
58782: PPUSH
58783: LD_VAR 0 16
58787: PUSH
58788: LD_INT 1
58790: ARRAY
58791: PPUSH
58792: LD_VAR 0 16
58796: PUSH
58797: LD_INT 2
58799: ARRAY
58800: PPUSH
58801: CALL_OW 111
// continue ;
58805: GO 58297
// end ; end ; r := GetDir ( tmp ) ;
58807: LD_ADDR_VAR 0 15
58811: PUSH
58812: LD_VAR 0 13
58816: PPUSH
58817: CALL_OW 254
58821: ST_TO_ADDR
// if r = 5 then
58822: LD_VAR 0 15
58826: PUSH
58827: LD_INT 5
58829: EQUAL
58830: IFFALSE 58840
// r := 0 ;
58832: LD_ADDR_VAR 0 15
58836: PUSH
58837: LD_INT 0
58839: ST_TO_ADDR
// for j = r to 5 do
58840: LD_ADDR_VAR 0 10
58844: PUSH
58845: DOUBLE
58846: LD_VAR 0 15
58850: DEC
58851: ST_TO_ADDR
58852: LD_INT 5
58854: PUSH
58855: FOR_TO
58856: IFFALSE 58970
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
58858: LD_ADDR_VAR 0 11
58862: PUSH
58863: LD_VAR 0 13
58867: PPUSH
58868: CALL_OW 250
58872: PPUSH
58873: LD_VAR 0 10
58877: PPUSH
58878: LD_INT 2
58880: PPUSH
58881: CALL_OW 272
58885: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
58886: LD_ADDR_VAR 0 12
58890: PUSH
58891: LD_VAR 0 13
58895: PPUSH
58896: CALL_OW 251
58900: PPUSH
58901: LD_VAR 0 10
58905: PPUSH
58906: LD_INT 2
58908: PPUSH
58909: CALL_OW 273
58913: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
58914: LD_VAR 0 11
58918: PPUSH
58919: LD_VAR 0 12
58923: PPUSH
58924: CALL_OW 488
58928: PUSH
58929: LD_VAR 0 11
58933: PPUSH
58934: LD_VAR 0 12
58938: PPUSH
58939: CALL_OW 428
58943: NOT
58944: AND
58945: IFFALSE 58968
// begin ComMoveXY ( tmp , _x , _y ) ;
58947: LD_VAR 0 13
58951: PPUSH
58952: LD_VAR 0 11
58956: PPUSH
58957: LD_VAR 0 12
58961: PPUSH
58962: CALL_OW 111
// break ;
58966: GO 58970
// end ; end ;
58968: GO 58855
58970: POP
58971: POP
// end ; end ;
58972: GO 58297
58974: POP
58975: POP
// end ;
58976: LD_VAR 0 8
58980: RET
// export function BuildingTechInvented ( side , btype ) ; begin
58981: LD_INT 0
58983: PPUSH
// result := true ;
58984: LD_ADDR_VAR 0 3
58988: PUSH
58989: LD_INT 1
58991: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
58992: LD_VAR 0 2
58996: PUSH
58997: LD_INT 24
58999: DOUBLE
59000: EQUAL
59001: IFTRUE 59011
59003: LD_INT 33
59005: DOUBLE
59006: EQUAL
59007: IFTRUE 59011
59009: GO 59036
59011: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
59012: LD_ADDR_VAR 0 3
59016: PUSH
59017: LD_INT 32
59019: PPUSH
59020: LD_VAR 0 1
59024: PPUSH
59025: CALL_OW 321
59029: PUSH
59030: LD_INT 2
59032: EQUAL
59033: ST_TO_ADDR
59034: GO 59356
59036: LD_INT 20
59038: DOUBLE
59039: EQUAL
59040: IFTRUE 59044
59042: GO 59069
59044: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
59045: LD_ADDR_VAR 0 3
59049: PUSH
59050: LD_INT 6
59052: PPUSH
59053: LD_VAR 0 1
59057: PPUSH
59058: CALL_OW 321
59062: PUSH
59063: LD_INT 2
59065: EQUAL
59066: ST_TO_ADDR
59067: GO 59356
59069: LD_INT 22
59071: DOUBLE
59072: EQUAL
59073: IFTRUE 59083
59075: LD_INT 36
59077: DOUBLE
59078: EQUAL
59079: IFTRUE 59083
59081: GO 59108
59083: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
59084: LD_ADDR_VAR 0 3
59088: PUSH
59089: LD_INT 15
59091: PPUSH
59092: LD_VAR 0 1
59096: PPUSH
59097: CALL_OW 321
59101: PUSH
59102: LD_INT 2
59104: EQUAL
59105: ST_TO_ADDR
59106: GO 59356
59108: LD_INT 30
59110: DOUBLE
59111: EQUAL
59112: IFTRUE 59116
59114: GO 59141
59116: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
59117: LD_ADDR_VAR 0 3
59121: PUSH
59122: LD_INT 20
59124: PPUSH
59125: LD_VAR 0 1
59129: PPUSH
59130: CALL_OW 321
59134: PUSH
59135: LD_INT 2
59137: EQUAL
59138: ST_TO_ADDR
59139: GO 59356
59141: LD_INT 28
59143: DOUBLE
59144: EQUAL
59145: IFTRUE 59155
59147: LD_INT 21
59149: DOUBLE
59150: EQUAL
59151: IFTRUE 59155
59153: GO 59180
59155: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
59156: LD_ADDR_VAR 0 3
59160: PUSH
59161: LD_INT 21
59163: PPUSH
59164: LD_VAR 0 1
59168: PPUSH
59169: CALL_OW 321
59173: PUSH
59174: LD_INT 2
59176: EQUAL
59177: ST_TO_ADDR
59178: GO 59356
59180: LD_INT 16
59182: DOUBLE
59183: EQUAL
59184: IFTRUE 59188
59186: GO 59215
59188: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
59189: LD_ADDR_VAR 0 3
59193: PUSH
59194: LD_EXP 61
59198: PPUSH
59199: LD_VAR 0 1
59203: PPUSH
59204: CALL_OW 321
59208: PUSH
59209: LD_INT 2
59211: EQUAL
59212: ST_TO_ADDR
59213: GO 59356
59215: LD_INT 19
59217: DOUBLE
59218: EQUAL
59219: IFTRUE 59229
59221: LD_INT 23
59223: DOUBLE
59224: EQUAL
59225: IFTRUE 59229
59227: GO 59256
59229: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
59230: LD_ADDR_VAR 0 3
59234: PUSH
59235: LD_EXP 60
59239: PPUSH
59240: LD_VAR 0 1
59244: PPUSH
59245: CALL_OW 321
59249: PUSH
59250: LD_INT 2
59252: EQUAL
59253: ST_TO_ADDR
59254: GO 59356
59256: LD_INT 17
59258: DOUBLE
59259: EQUAL
59260: IFTRUE 59264
59262: GO 59289
59264: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
59265: LD_ADDR_VAR 0 3
59269: PUSH
59270: LD_INT 39
59272: PPUSH
59273: LD_VAR 0 1
59277: PPUSH
59278: CALL_OW 321
59282: PUSH
59283: LD_INT 2
59285: EQUAL
59286: ST_TO_ADDR
59287: GO 59356
59289: LD_INT 18
59291: DOUBLE
59292: EQUAL
59293: IFTRUE 59297
59295: GO 59322
59297: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
59298: LD_ADDR_VAR 0 3
59302: PUSH
59303: LD_INT 40
59305: PPUSH
59306: LD_VAR 0 1
59310: PPUSH
59311: CALL_OW 321
59315: PUSH
59316: LD_INT 2
59318: EQUAL
59319: ST_TO_ADDR
59320: GO 59356
59322: LD_INT 27
59324: DOUBLE
59325: EQUAL
59326: IFTRUE 59330
59328: GO 59355
59330: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
59331: LD_ADDR_VAR 0 3
59335: PUSH
59336: LD_INT 35
59338: PPUSH
59339: LD_VAR 0 1
59343: PPUSH
59344: CALL_OW 321
59348: PUSH
59349: LD_INT 2
59351: EQUAL
59352: ST_TO_ADDR
59353: GO 59356
59355: POP
// end ;
59356: LD_VAR 0 3
59360: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
59361: LD_INT 0
59363: PPUSH
59364: PPUSH
59365: PPUSH
59366: PPUSH
59367: PPUSH
59368: PPUSH
59369: PPUSH
59370: PPUSH
59371: PPUSH
59372: PPUSH
59373: PPUSH
// result := false ;
59374: LD_ADDR_VAR 0 6
59378: PUSH
59379: LD_INT 0
59381: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
59382: LD_VAR 0 1
59386: NOT
59387: PUSH
59388: LD_VAR 0 1
59392: PPUSH
59393: CALL_OW 266
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: LD_INT 1
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: IN
59408: NOT
59409: OR
59410: PUSH
59411: LD_VAR 0 2
59415: NOT
59416: OR
59417: PUSH
59418: LD_VAR 0 5
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: LD_INT 2
59431: PUSH
59432: LD_INT 3
59434: PUSH
59435: LD_INT 4
59437: PUSH
59438: LD_INT 5
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: IN
59449: NOT
59450: OR
59451: PUSH
59452: LD_VAR 0 3
59456: PPUSH
59457: LD_VAR 0 4
59461: PPUSH
59462: CALL_OW 488
59466: NOT
59467: OR
59468: IFFALSE 59472
// exit ;
59470: GO 60208
// side := GetSide ( depot ) ;
59472: LD_ADDR_VAR 0 9
59476: PUSH
59477: LD_VAR 0 1
59481: PPUSH
59482: CALL_OW 255
59486: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
59487: LD_VAR 0 9
59491: PPUSH
59492: LD_VAR 0 2
59496: PPUSH
59497: CALL 58981 0 2
59501: NOT
59502: IFFALSE 59506
// exit ;
59504: GO 60208
// pom := GetBase ( depot ) ;
59506: LD_ADDR_VAR 0 10
59510: PUSH
59511: LD_VAR 0 1
59515: PPUSH
59516: CALL_OW 274
59520: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59521: LD_ADDR_VAR 0 11
59525: PUSH
59526: LD_VAR 0 2
59530: PPUSH
59531: LD_VAR 0 1
59535: PPUSH
59536: CALL_OW 248
59540: PPUSH
59541: CALL_OW 450
59545: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
59546: LD_VAR 0 10
59550: PPUSH
59551: LD_INT 1
59553: PPUSH
59554: CALL_OW 275
59558: PUSH
59559: LD_VAR 0 11
59563: PUSH
59564: LD_INT 1
59566: ARRAY
59567: GREATEREQUAL
59568: PUSH
59569: LD_VAR 0 10
59573: PPUSH
59574: LD_INT 2
59576: PPUSH
59577: CALL_OW 275
59581: PUSH
59582: LD_VAR 0 11
59586: PUSH
59587: LD_INT 2
59589: ARRAY
59590: GREATEREQUAL
59591: AND
59592: PUSH
59593: LD_VAR 0 10
59597: PPUSH
59598: LD_INT 3
59600: PPUSH
59601: CALL_OW 275
59605: PUSH
59606: LD_VAR 0 11
59610: PUSH
59611: LD_INT 3
59613: ARRAY
59614: GREATEREQUAL
59615: AND
59616: NOT
59617: IFFALSE 59621
// exit ;
59619: GO 60208
// if GetBType ( depot ) = b_depot then
59621: LD_VAR 0 1
59625: PPUSH
59626: CALL_OW 266
59630: PUSH
59631: LD_INT 0
59633: EQUAL
59634: IFFALSE 59646
// dist := 28 else
59636: LD_ADDR_VAR 0 14
59640: PUSH
59641: LD_INT 28
59643: ST_TO_ADDR
59644: GO 59654
// dist := 36 ;
59646: LD_ADDR_VAR 0 14
59650: PUSH
59651: LD_INT 36
59653: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
59654: LD_VAR 0 1
59658: PPUSH
59659: LD_VAR 0 3
59663: PPUSH
59664: LD_VAR 0 4
59668: PPUSH
59669: CALL_OW 297
59673: PUSH
59674: LD_VAR 0 14
59678: GREATER
59679: IFFALSE 59683
// exit ;
59681: GO 60208
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
59683: LD_ADDR_VAR 0 12
59687: PUSH
59688: LD_VAR 0 2
59692: PPUSH
59693: LD_VAR 0 3
59697: PPUSH
59698: LD_VAR 0 4
59702: PPUSH
59703: LD_VAR 0 5
59707: PPUSH
59708: LD_VAR 0 1
59712: PPUSH
59713: CALL_OW 248
59717: PPUSH
59718: LD_INT 0
59720: PPUSH
59721: CALL 60213 0 6
59725: ST_TO_ADDR
// if not hexes then
59726: LD_VAR 0 12
59730: NOT
59731: IFFALSE 59735
// exit ;
59733: GO 60208
// hex := GetHexInfo ( x , y ) ;
59735: LD_ADDR_VAR 0 15
59739: PUSH
59740: LD_VAR 0 3
59744: PPUSH
59745: LD_VAR 0 4
59749: PPUSH
59750: CALL_OW 546
59754: ST_TO_ADDR
// if hex [ 1 ] then
59755: LD_VAR 0 15
59759: PUSH
59760: LD_INT 1
59762: ARRAY
59763: IFFALSE 59767
// exit ;
59765: GO 60208
// height := hex [ 2 ] ;
59767: LD_ADDR_VAR 0 13
59771: PUSH
59772: LD_VAR 0 15
59776: PUSH
59777: LD_INT 2
59779: ARRAY
59780: ST_TO_ADDR
// for i = 1 to hexes do
59781: LD_ADDR_VAR 0 7
59785: PUSH
59786: DOUBLE
59787: LD_INT 1
59789: DEC
59790: ST_TO_ADDR
59791: LD_VAR 0 12
59795: PUSH
59796: FOR_TO
59797: IFFALSE 60127
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
59799: LD_VAR 0 12
59803: PUSH
59804: LD_VAR 0 7
59808: ARRAY
59809: PUSH
59810: LD_INT 1
59812: ARRAY
59813: PPUSH
59814: LD_VAR 0 12
59818: PUSH
59819: LD_VAR 0 7
59823: ARRAY
59824: PUSH
59825: LD_INT 2
59827: ARRAY
59828: PPUSH
59829: CALL_OW 488
59833: NOT
59834: PUSH
59835: LD_VAR 0 12
59839: PUSH
59840: LD_VAR 0 7
59844: ARRAY
59845: PUSH
59846: LD_INT 1
59848: ARRAY
59849: PPUSH
59850: LD_VAR 0 12
59854: PUSH
59855: LD_VAR 0 7
59859: ARRAY
59860: PUSH
59861: LD_INT 2
59863: ARRAY
59864: PPUSH
59865: CALL_OW 428
59869: PUSH
59870: LD_INT 0
59872: GREATER
59873: OR
59874: PUSH
59875: LD_VAR 0 12
59879: PUSH
59880: LD_VAR 0 7
59884: ARRAY
59885: PUSH
59886: LD_INT 1
59888: ARRAY
59889: PPUSH
59890: LD_VAR 0 12
59894: PUSH
59895: LD_VAR 0 7
59899: ARRAY
59900: PUSH
59901: LD_INT 2
59903: ARRAY
59904: PPUSH
59905: CALL_OW 351
59909: OR
59910: IFFALSE 59916
// exit ;
59912: POP
59913: POP
59914: GO 60208
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59916: LD_ADDR_VAR 0 8
59920: PUSH
59921: LD_VAR 0 12
59925: PUSH
59926: LD_VAR 0 7
59930: ARRAY
59931: PUSH
59932: LD_INT 1
59934: ARRAY
59935: PPUSH
59936: LD_VAR 0 12
59940: PUSH
59941: LD_VAR 0 7
59945: ARRAY
59946: PUSH
59947: LD_INT 2
59949: ARRAY
59950: PPUSH
59951: CALL_OW 546
59955: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
59956: LD_VAR 0 8
59960: PUSH
59961: LD_INT 1
59963: ARRAY
59964: PUSH
59965: LD_VAR 0 8
59969: PUSH
59970: LD_INT 2
59972: ARRAY
59973: PUSH
59974: LD_VAR 0 13
59978: PUSH
59979: LD_INT 2
59981: PLUS
59982: GREATER
59983: OR
59984: PUSH
59985: LD_VAR 0 8
59989: PUSH
59990: LD_INT 2
59992: ARRAY
59993: PUSH
59994: LD_VAR 0 13
59998: PUSH
59999: LD_INT 2
60001: MINUS
60002: LESS
60003: OR
60004: PUSH
60005: LD_VAR 0 8
60009: PUSH
60010: LD_INT 3
60012: ARRAY
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: LD_INT 8
60019: PUSH
60020: LD_INT 9
60022: PUSH
60023: LD_INT 10
60025: PUSH
60026: LD_INT 11
60028: PUSH
60029: LD_INT 12
60031: PUSH
60032: LD_INT 13
60034: PUSH
60035: LD_INT 16
60037: PUSH
60038: LD_INT 17
60040: PUSH
60041: LD_INT 18
60043: PUSH
60044: LD_INT 19
60046: PUSH
60047: LD_INT 20
60049: PUSH
60050: LD_INT 21
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: IN
60068: NOT
60069: OR
60070: PUSH
60071: LD_VAR 0 8
60075: PUSH
60076: LD_INT 5
60078: ARRAY
60079: NOT
60080: OR
60081: PUSH
60082: LD_VAR 0 8
60086: PUSH
60087: LD_INT 6
60089: ARRAY
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: LD_INT 2
60096: PUSH
60097: LD_INT 7
60099: PUSH
60100: LD_INT 9
60102: PUSH
60103: LD_INT 10
60105: PUSH
60106: LD_INT 11
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: IN
60117: NOT
60118: OR
60119: IFFALSE 60125
// exit ;
60121: POP
60122: POP
60123: GO 60208
// end ;
60125: GO 59796
60127: POP
60128: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
60129: LD_VAR 0 9
60133: PPUSH
60134: LD_VAR 0 3
60138: PPUSH
60139: LD_VAR 0 4
60143: PPUSH
60144: LD_INT 20
60146: PPUSH
60147: CALL 52154 0 4
60151: PUSH
60152: LD_INT 4
60154: ARRAY
60155: IFFALSE 60159
// exit ;
60157: GO 60208
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
60159: LD_VAR 0 2
60163: PUSH
60164: LD_INT 29
60166: PUSH
60167: LD_INT 30
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: IN
60174: PUSH
60175: LD_VAR 0 3
60179: PPUSH
60180: LD_VAR 0 4
60184: PPUSH
60185: LD_VAR 0 9
60189: PPUSH
60190: CALL_OW 440
60194: NOT
60195: AND
60196: IFFALSE 60200
// exit ;
60198: GO 60208
// result := true ;
60200: LD_ADDR_VAR 0 6
60204: PUSH
60205: LD_INT 1
60207: ST_TO_ADDR
// end ;
60208: LD_VAR 0 6
60212: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
60213: LD_INT 0
60215: PPUSH
60216: PPUSH
60217: PPUSH
60218: PPUSH
60219: PPUSH
60220: PPUSH
60221: PPUSH
60222: PPUSH
60223: PPUSH
60224: PPUSH
60225: PPUSH
60226: PPUSH
60227: PPUSH
60228: PPUSH
60229: PPUSH
60230: PPUSH
60231: PPUSH
60232: PPUSH
60233: PPUSH
60234: PPUSH
60235: PPUSH
60236: PPUSH
60237: PPUSH
60238: PPUSH
60239: PPUSH
60240: PPUSH
60241: PPUSH
60242: PPUSH
60243: PPUSH
60244: PPUSH
60245: PPUSH
60246: PPUSH
60247: PPUSH
60248: PPUSH
60249: PPUSH
60250: PPUSH
60251: PPUSH
60252: PPUSH
60253: PPUSH
60254: PPUSH
60255: PPUSH
60256: PPUSH
60257: PPUSH
60258: PPUSH
60259: PPUSH
60260: PPUSH
60261: PPUSH
60262: PPUSH
60263: PPUSH
60264: PPUSH
60265: PPUSH
60266: PPUSH
60267: PPUSH
60268: PPUSH
60269: PPUSH
60270: PPUSH
60271: PPUSH
60272: PPUSH
// result = [ ] ;
60273: LD_ADDR_VAR 0 7
60277: PUSH
60278: EMPTY
60279: ST_TO_ADDR
// temp_list = [ ] ;
60280: LD_ADDR_VAR 0 9
60284: PUSH
60285: EMPTY
60286: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
60287: LD_VAR 0 4
60291: PUSH
60292: LD_INT 0
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: LD_INT 2
60300: PUSH
60301: LD_INT 3
60303: PUSH
60304: LD_INT 4
60306: PUSH
60307: LD_INT 5
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: IN
60318: NOT
60319: PUSH
60320: LD_VAR 0 1
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: LD_INT 1
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: IN
60335: PUSH
60336: LD_VAR 0 5
60340: PUSH
60341: LD_INT 1
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: LD_INT 3
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: LIST
60354: IN
60355: NOT
60356: AND
60357: OR
60358: IFFALSE 60362
// exit ;
60360: GO 78753
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
60362: LD_VAR 0 1
60366: PUSH
60367: LD_INT 6
60369: PUSH
60370: LD_INT 7
60372: PUSH
60373: LD_INT 8
60375: PUSH
60376: LD_INT 13
60378: PUSH
60379: LD_INT 12
60381: PUSH
60382: LD_INT 15
60384: PUSH
60385: LD_INT 11
60387: PUSH
60388: LD_INT 14
60390: PUSH
60391: LD_INT 10
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: IN
60405: IFFALSE 60415
// btype = b_lab ;
60407: LD_ADDR_VAR 0 1
60411: PUSH
60412: LD_INT 6
60414: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
60415: LD_VAR 0 6
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: LD_INT 2
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: LIST
60433: IN
60434: NOT
60435: PUSH
60436: LD_VAR 0 1
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: LD_INT 2
60449: PUSH
60450: LD_INT 3
60452: PUSH
60453: LD_INT 6
60455: PUSH
60456: LD_INT 36
60458: PUSH
60459: LD_INT 4
60461: PUSH
60462: LD_INT 5
60464: PUSH
60465: LD_INT 31
60467: PUSH
60468: LD_INT 32
60470: PUSH
60471: LD_INT 33
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: IN
60487: NOT
60488: PUSH
60489: LD_VAR 0 6
60493: PUSH
60494: LD_INT 1
60496: EQUAL
60497: AND
60498: OR
60499: PUSH
60500: LD_VAR 0 1
60504: PUSH
60505: LD_INT 2
60507: PUSH
60508: LD_INT 3
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: IN
60515: NOT
60516: PUSH
60517: LD_VAR 0 6
60521: PUSH
60522: LD_INT 2
60524: EQUAL
60525: AND
60526: OR
60527: IFFALSE 60537
// mode = 0 ;
60529: LD_ADDR_VAR 0 6
60533: PUSH
60534: LD_INT 0
60536: ST_TO_ADDR
// case mode of 0 :
60537: LD_VAR 0 6
60541: PUSH
60542: LD_INT 0
60544: DOUBLE
60545: EQUAL
60546: IFTRUE 60550
60548: GO 72003
60550: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60551: LD_ADDR_VAR 0 11
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: LD_INT 1
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 1
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: LD_INT 1
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 1
60609: NEG
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 1
60620: NEG
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 1
60632: NEG
60633: PUSH
60634: LD_INT 2
60636: NEG
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: LD_INT 2
60647: NEG
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 1
60655: PUSH
60656: LD_INT 1
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: LD_INT 2
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: LD_INT 2
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 1
60686: NEG
60687: PUSH
60688: LD_INT 1
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: PUSH
60698: LD_INT 3
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: LD_INT 3
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: LD_INT 2
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60744: LD_ADDR_VAR 0 12
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 1
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: LD_INT 1
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: LD_INT 0
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 1
60825: PUSH
60826: LD_INT 1
60828: NEG
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 2
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 2
60846: PUSH
60847: LD_INT 1
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PUSH
60858: LD_INT 1
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 2
60867: NEG
60868: PUSH
60869: LD_INT 0
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 2
60878: NEG
60879: PUSH
60880: LD_INT 1
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 2
60890: NEG
60891: PUSH
60892: LD_INT 1
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 3
60901: NEG
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 3
60912: NEG
60913: PUSH
60914: LD_INT 1
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60940: LD_ADDR_VAR 0 13
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 1
60968: PUSH
60969: LD_INT 0
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 1
60978: PUSH
60979: LD_INT 1
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: LD_INT 1
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 1
60998: NEG
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 1
61009: NEG
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 1
61021: NEG
61022: PUSH
61023: LD_INT 2
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 2
61033: PUSH
61034: LD_INT 1
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 2
61043: PUSH
61044: LD_INT 2
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 1
61053: PUSH
61054: LD_INT 2
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 2
61063: NEG
61064: PUSH
61065: LD_INT 1
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 2
61075: NEG
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 2
61087: NEG
61088: PUSH
61089: LD_INT 3
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 3
61099: NEG
61100: PUSH
61101: LD_INT 2
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 3
61111: NEG
61112: PUSH
61113: LD_INT 3
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61139: LD_ADDR_VAR 0 14
61143: PUSH
61144: LD_INT 0
61146: PUSH
61147: LD_INT 0
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 0
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 1
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 1
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: LD_INT 1
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 1
61197: NEG
61198: PUSH
61199: LD_INT 0
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 1
61208: NEG
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: LD_INT 2
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: LD_INT 2
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 1
61243: PUSH
61244: LD_INT 1
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 1
61254: PUSH
61255: LD_INT 2
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: LD_INT 2
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 1
61285: NEG
61286: PUSH
61287: LD_INT 3
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: LD_INT 3
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 1
61308: PUSH
61309: LD_INT 2
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61335: LD_ADDR_VAR 0 15
61339: PUSH
61340: LD_INT 0
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 0
61352: PUSH
61353: LD_INT 1
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 1
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: LD_INT 1
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 1
61393: NEG
61394: PUSH
61395: LD_INT 0
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 1
61404: NEG
61405: PUSH
61406: LD_INT 1
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 1
61416: PUSH
61417: LD_INT 1
61419: NEG
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 2
61427: PUSH
61428: LD_INT 0
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 2
61437: PUSH
61438: LD_INT 1
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 1
61447: NEG
61448: PUSH
61449: LD_INT 1
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 2
61458: NEG
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 2
61469: NEG
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 2
61481: PUSH
61482: LD_INT 1
61484: NEG
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 3
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 3
61502: PUSH
61503: LD_INT 1
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61528: LD_ADDR_VAR 0 16
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: LD_INT 1
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 1
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: LD_INT 1
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 0
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 1
61586: NEG
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: LD_INT 1
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: LD_INT 2
61613: NEG
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 2
61621: PUSH
61622: LD_INT 1
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 2
61631: PUSH
61632: LD_INT 2
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: LD_INT 2
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 2
61651: NEG
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 2
61663: NEG
61664: PUSH
61665: LD_INT 2
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 3
61675: PUSH
61676: LD_INT 2
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 3
61685: PUSH
61686: LD_INT 3
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 2
61695: PUSH
61696: LD_INT 3
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61721: LD_ADDR_VAR 0 17
61725: PUSH
61726: LD_INT 0
61728: PUSH
61729: LD_INT 0
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 0
61738: PUSH
61739: LD_INT 1
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 1
61749: PUSH
61750: LD_INT 0
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: LD_INT 1
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: LD_INT 1
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 1
61779: NEG
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: NEG
61791: PUSH
61792: LD_INT 1
61794: NEG
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 1
61802: NEG
61803: PUSH
61804: LD_INT 2
61806: NEG
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: LD_INT 2
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 1
61825: PUSH
61826: LD_INT 1
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 2
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 2
61846: PUSH
61847: LD_INT 1
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 2
61856: PUSH
61857: LD_INT 2
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 1
61866: PUSH
61867: LD_INT 2
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: LD_INT 2
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 1
61886: NEG
61887: PUSH
61888: LD_INT 1
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 2
61897: NEG
61898: PUSH
61899: LD_INT 0
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 2
61908: NEG
61909: PUSH
61910: LD_INT 1
61912: NEG
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 2
61920: NEG
61921: PUSH
61922: LD_INT 2
61924: NEG
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61951: LD_ADDR_VAR 0 18
61955: PUSH
61956: LD_INT 0
61958: PUSH
61959: LD_INT 0
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: LD_INT 1
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 1
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: LD_INT 1
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 1
62009: NEG
62010: PUSH
62011: LD_INT 0
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: LD_INT 1
62024: NEG
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 1
62032: NEG
62033: PUSH
62034: LD_INT 2
62036: NEG
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: LD_INT 2
62047: NEG
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 2
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 2
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 2
62086: PUSH
62087: LD_INT 2
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: LD_INT 2
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: LD_INT 2
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 1
62116: NEG
62117: PUSH
62118: LD_INT 1
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 2
62127: NEG
62128: PUSH
62129: LD_INT 0
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 2
62138: NEG
62139: PUSH
62140: LD_INT 1
62142: NEG
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 2
62150: NEG
62151: PUSH
62152: LD_INT 2
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62181: LD_ADDR_VAR 0 19
62185: PUSH
62186: LD_INT 0
62188: PUSH
62189: LD_INT 0
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: LD_INT 1
62201: NEG
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 1
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 1
62219: PUSH
62220: LD_INT 1
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: LD_INT 1
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 1
62239: NEG
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 1
62250: NEG
62251: PUSH
62252: LD_INT 1
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 1
62262: NEG
62263: PUSH
62264: LD_INT 2
62266: NEG
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: LD_INT 2
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 1
62285: PUSH
62286: LD_INT 1
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 2
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 2
62306: PUSH
62307: LD_INT 1
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 2
62316: PUSH
62317: LD_INT 2
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 1
62326: PUSH
62327: LD_INT 2
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 0
62336: PUSH
62337: LD_INT 2
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 2
62357: NEG
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 2
62368: NEG
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 2
62380: NEG
62381: PUSH
62382: LD_INT 2
62384: NEG
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62411: LD_ADDR_VAR 0 20
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: LD_INT 0
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 1
62439: PUSH
62440: LD_INT 0
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 1
62449: PUSH
62450: LD_INT 1
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 1
62469: NEG
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 1
62480: NEG
62481: PUSH
62482: LD_INT 1
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 1
62492: NEG
62493: PUSH
62494: LD_INT 2
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 0
62504: PUSH
62505: LD_INT 2
62507: NEG
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 1
62515: PUSH
62516: LD_INT 1
62518: NEG
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 2
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 2
62536: PUSH
62537: LD_INT 1
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 2
62546: PUSH
62547: LD_INT 2
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 1
62556: PUSH
62557: LD_INT 2
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: LD_INT 2
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 1
62576: NEG
62577: PUSH
62578: LD_INT 1
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 2
62587: NEG
62588: PUSH
62589: LD_INT 0
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 2
62598: NEG
62599: PUSH
62600: LD_INT 1
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 2
62610: NEG
62611: PUSH
62612: LD_INT 2
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62641: LD_ADDR_VAR 0 21
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: LD_INT 0
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: LD_INT 1
62661: NEG
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: LD_INT 0
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 1
62679: PUSH
62680: LD_INT 1
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: LD_INT 1
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 1
62699: NEG
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: NEG
62711: PUSH
62712: LD_INT 1
62714: NEG
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 1
62722: NEG
62723: PUSH
62724: LD_INT 2
62726: NEG
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 0
62734: PUSH
62735: LD_INT 2
62737: NEG
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: LD_INT 1
62748: NEG
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 2
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 2
62766: PUSH
62767: LD_INT 1
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: LD_INT 2
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 1
62786: PUSH
62787: LD_INT 2
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 0
62796: PUSH
62797: LD_INT 2
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 1
62806: NEG
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 2
62817: NEG
62818: PUSH
62819: LD_INT 0
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 2
62828: NEG
62829: PUSH
62830: LD_INT 1
62832: NEG
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 2
62840: NEG
62841: PUSH
62842: LD_INT 2
62844: NEG
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62871: LD_ADDR_VAR 0 22
62875: PUSH
62876: LD_INT 0
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 0
62888: PUSH
62889: LD_INT 1
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 1
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 1
62909: PUSH
62910: LD_INT 1
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: LD_INT 1
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 1
62929: NEG
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 1
62940: NEG
62941: PUSH
62942: LD_INT 1
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 1
62952: NEG
62953: PUSH
62954: LD_INT 2
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 0
62964: PUSH
62965: LD_INT 2
62967: NEG
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: LD_INT 1
62978: NEG
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 2
62986: PUSH
62987: LD_INT 0
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 2
62996: PUSH
62997: LD_INT 1
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 2
63006: PUSH
63007: LD_INT 2
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: PUSH
63017: LD_INT 2
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 0
63026: PUSH
63027: LD_INT 2
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 1
63036: NEG
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 2
63047: NEG
63048: PUSH
63049: LD_INT 0
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 2
63058: NEG
63059: PUSH
63060: LD_INT 1
63062: NEG
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 2
63070: NEG
63071: PUSH
63072: LD_INT 2
63074: NEG
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63101: LD_ADDR_VAR 0 23
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 0
63118: PUSH
63119: LD_INT 1
63121: NEG
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 1
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 1
63139: PUSH
63140: LD_INT 1
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 0
63149: PUSH
63150: LD_INT 1
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 1
63159: NEG
63160: PUSH
63161: LD_INT 0
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 1
63170: NEG
63171: PUSH
63172: LD_INT 1
63174: NEG
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 1
63182: NEG
63183: PUSH
63184: LD_INT 2
63186: NEG
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 0
63194: PUSH
63195: LD_INT 2
63197: NEG
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 1
63205: PUSH
63206: LD_INT 1
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 2
63216: PUSH
63217: LD_INT 0
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 2
63226: PUSH
63227: LD_INT 1
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 2
63236: PUSH
63237: LD_INT 2
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 1
63246: PUSH
63247: LD_INT 2
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 0
63256: PUSH
63257: LD_INT 2
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 1
63266: NEG
63267: PUSH
63268: LD_INT 1
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 2
63277: NEG
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 2
63288: NEG
63289: PUSH
63290: LD_INT 1
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 2
63300: NEG
63301: PUSH
63302: LD_INT 2
63304: NEG
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 2
63312: NEG
63313: PUSH
63314: LD_INT 3
63316: NEG
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 1
63324: NEG
63325: PUSH
63326: LD_INT 3
63328: NEG
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: LD_INT 2
63339: NEG
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 2
63347: PUSH
63348: LD_INT 1
63350: NEG
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
63381: LD_ADDR_VAR 0 24
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: LD_INT 1
63401: NEG
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 1
63409: PUSH
63410: LD_INT 0
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: PUSH
63420: LD_INT 1
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: LD_INT 1
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 1
63439: NEG
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 1
63450: NEG
63451: PUSH
63452: LD_INT 1
63454: NEG
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 1
63462: NEG
63463: PUSH
63464: LD_INT 2
63466: NEG
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 0
63474: PUSH
63475: LD_INT 2
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 1
63485: PUSH
63486: LD_INT 1
63488: NEG
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 2
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 2
63506: PUSH
63507: LD_INT 1
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 2
63516: PUSH
63517: LD_INT 2
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 1
63526: PUSH
63527: LD_INT 2
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 0
63536: PUSH
63537: LD_INT 2
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 1
63546: NEG
63547: PUSH
63548: LD_INT 1
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 2
63557: NEG
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 2
63568: NEG
63569: PUSH
63570: LD_INT 1
63572: NEG
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 2
63580: NEG
63581: PUSH
63582: LD_INT 2
63584: NEG
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 1
63592: PUSH
63593: LD_INT 2
63595: NEG
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 2
63603: PUSH
63604: LD_INT 1
63606: NEG
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 3
63614: PUSH
63615: LD_INT 1
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 3
63624: PUSH
63625: LD_INT 2
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
63657: LD_ADDR_VAR 0 25
63661: PUSH
63662: LD_INT 0
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 0
63674: PUSH
63675: LD_INT 1
63677: NEG
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 1
63685: PUSH
63686: LD_INT 0
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 1
63695: PUSH
63696: LD_INT 1
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 0
63705: PUSH
63706: LD_INT 1
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 1
63715: NEG
63716: PUSH
63717: LD_INT 0
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: LD_INT 1
63730: NEG
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 1
63738: NEG
63739: PUSH
63740: LD_INT 2
63742: NEG
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: LD_INT 2
63753: NEG
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 1
63761: PUSH
63762: LD_INT 1
63764: NEG
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 2
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 2
63782: PUSH
63783: LD_INT 1
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 2
63792: PUSH
63793: LD_INT 2
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 1
63802: PUSH
63803: LD_INT 2
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 0
63812: PUSH
63813: LD_INT 2
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 1
63822: NEG
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 2
63833: NEG
63834: PUSH
63835: LD_INT 0
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 2
63844: NEG
63845: PUSH
63846: LD_INT 1
63848: NEG
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 2
63856: NEG
63857: PUSH
63858: LD_INT 2
63860: NEG
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 3
63868: PUSH
63869: LD_INT 1
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 3
63878: PUSH
63879: LD_INT 2
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 2
63888: PUSH
63889: LD_INT 3
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 1
63898: PUSH
63899: LD_INT 3
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63931: LD_ADDR_VAR 0 26
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: LD_INT 1
63951: NEG
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 1
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 1
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: LD_INT 1
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 1
63989: NEG
63990: PUSH
63991: LD_INT 0
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 1
64000: NEG
64001: PUSH
64002: LD_INT 1
64004: NEG
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 1
64012: NEG
64013: PUSH
64014: LD_INT 2
64016: NEG
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 0
64024: PUSH
64025: LD_INT 2
64027: NEG
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 1
64035: PUSH
64036: LD_INT 1
64038: NEG
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 2
64046: PUSH
64047: LD_INT 0
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 2
64056: PUSH
64057: LD_INT 1
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 2
64066: PUSH
64067: LD_INT 2
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 1
64076: PUSH
64077: LD_INT 2
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 0
64086: PUSH
64087: LD_INT 2
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 1
64096: NEG
64097: PUSH
64098: LD_INT 1
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 2
64107: NEG
64108: PUSH
64109: LD_INT 0
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 2
64118: NEG
64119: PUSH
64120: LD_INT 1
64122: NEG
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 2
64130: NEG
64131: PUSH
64132: LD_INT 2
64134: NEG
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 2
64142: PUSH
64143: LD_INT 3
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 1
64152: PUSH
64153: LD_INT 3
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 1
64162: NEG
64163: PUSH
64164: LD_INT 2
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 2
64173: NEG
64174: PUSH
64175: LD_INT 1
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64207: LD_ADDR_VAR 0 27
64211: PUSH
64212: LD_INT 0
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 0
64224: PUSH
64225: LD_INT 1
64227: NEG
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 1
64235: PUSH
64236: LD_INT 0
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 1
64245: PUSH
64246: LD_INT 1
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 0
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 1
64265: NEG
64266: PUSH
64267: LD_INT 0
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 1
64276: NEG
64277: PUSH
64278: LD_INT 1
64280: NEG
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 1
64288: NEG
64289: PUSH
64290: LD_INT 2
64292: NEG
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 0
64300: PUSH
64301: LD_INT 2
64303: NEG
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 1
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 2
64322: PUSH
64323: LD_INT 0
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 2
64332: PUSH
64333: LD_INT 1
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 2
64342: PUSH
64343: LD_INT 2
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 1
64352: PUSH
64353: LD_INT 2
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: LD_INT 2
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 1
64372: NEG
64373: PUSH
64374: LD_INT 1
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 2
64383: NEG
64384: PUSH
64385: LD_INT 0
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 2
64394: NEG
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 2
64406: NEG
64407: PUSH
64408: LD_INT 2
64410: NEG
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 1
64418: NEG
64419: PUSH
64420: LD_INT 2
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 2
64429: NEG
64430: PUSH
64431: LD_INT 1
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 3
64440: NEG
64441: PUSH
64442: LD_INT 1
64444: NEG
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 3
64452: NEG
64453: PUSH
64454: LD_INT 2
64456: NEG
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64487: LD_ADDR_VAR 0 28
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: LD_INT 0
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 0
64504: PUSH
64505: LD_INT 1
64507: NEG
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 1
64515: PUSH
64516: LD_INT 0
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 1
64525: PUSH
64526: LD_INT 1
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: LD_INT 1
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 1
64545: NEG
64546: PUSH
64547: LD_INT 0
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 1
64556: NEG
64557: PUSH
64558: LD_INT 1
64560: NEG
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 1
64568: NEG
64569: PUSH
64570: LD_INT 2
64572: NEG
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: LD_INT 2
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 1
64591: PUSH
64592: LD_INT 1
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 2
64602: PUSH
64603: LD_INT 0
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 2
64612: PUSH
64613: LD_INT 1
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 2
64622: PUSH
64623: LD_INT 2
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: LD_INT 2
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 0
64642: PUSH
64643: LD_INT 2
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 1
64652: NEG
64653: PUSH
64654: LD_INT 1
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 2
64663: NEG
64664: PUSH
64665: LD_INT 0
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 2
64674: NEG
64675: PUSH
64676: LD_INT 1
64678: NEG
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 2
64686: NEG
64687: PUSH
64688: LD_INT 2
64690: NEG
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 2
64698: NEG
64699: PUSH
64700: LD_INT 3
64702: NEG
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 1
64710: NEG
64711: PUSH
64712: LD_INT 3
64714: NEG
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 3
64722: NEG
64723: PUSH
64724: LD_INT 1
64726: NEG
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 3
64734: NEG
64735: PUSH
64736: LD_INT 2
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64769: LD_ADDR_VAR 0 29
64773: PUSH
64774: LD_INT 0
64776: PUSH
64777: LD_INT 0
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 0
64786: PUSH
64787: LD_INT 1
64789: NEG
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 1
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 1
64807: PUSH
64808: LD_INT 1
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 0
64817: PUSH
64818: LD_INT 1
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 1
64827: NEG
64828: PUSH
64829: LD_INT 0
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 1
64838: NEG
64839: PUSH
64840: LD_INT 1
64842: NEG
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 1
64850: NEG
64851: PUSH
64852: LD_INT 2
64854: NEG
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: LD_INT 2
64865: NEG
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 1
64873: PUSH
64874: LD_INT 1
64876: NEG
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 2
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 2
64894: PUSH
64895: LD_INT 1
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 1
64904: PUSH
64905: LD_INT 2
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 0
64914: PUSH
64915: LD_INT 2
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 1
64924: NEG
64925: PUSH
64926: LD_INT 1
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 2
64935: NEG
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 2
64947: NEG
64948: PUSH
64949: LD_INT 2
64951: NEG
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 2
64959: NEG
64960: PUSH
64961: LD_INT 3
64963: NEG
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 2
64971: PUSH
64972: LD_INT 1
64974: NEG
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 3
64982: PUSH
64983: LD_INT 1
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 1
64992: PUSH
64993: LD_INT 3
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 1
65002: NEG
65003: PUSH
65004: LD_INT 2
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 3
65013: NEG
65014: PUSH
65015: LD_INT 2
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65048: LD_ADDR_VAR 0 30
65052: PUSH
65053: LD_INT 0
65055: PUSH
65056: LD_INT 0
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 0
65065: PUSH
65066: LD_INT 1
65068: NEG
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 1
65076: PUSH
65077: LD_INT 0
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 1
65086: PUSH
65087: LD_INT 1
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 0
65096: PUSH
65097: LD_INT 1
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 1
65106: NEG
65107: PUSH
65108: LD_INT 0
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 1
65117: NEG
65118: PUSH
65119: LD_INT 1
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 1
65129: NEG
65130: PUSH
65131: LD_INT 2
65133: NEG
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 0
65141: PUSH
65142: LD_INT 2
65144: NEG
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: LD_INT 1
65155: NEG
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 2
65163: PUSH
65164: LD_INT 0
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 2
65173: PUSH
65174: LD_INT 1
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 2
65183: PUSH
65184: LD_INT 2
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 1
65193: PUSH
65194: LD_INT 2
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 1
65203: NEG
65204: PUSH
65205: LD_INT 1
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 2
65214: NEG
65215: PUSH
65216: LD_INT 0
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 2
65225: NEG
65226: PUSH
65227: LD_INT 1
65229: NEG
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 1
65237: NEG
65238: PUSH
65239: LD_INT 3
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 1
65249: PUSH
65250: LD_INT 2
65252: NEG
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 3
65260: PUSH
65261: LD_INT 2
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 2
65270: PUSH
65271: LD_INT 3
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 2
65280: NEG
65281: PUSH
65282: LD_INT 1
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 3
65291: NEG
65292: PUSH
65293: LD_INT 1
65295: NEG
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65326: LD_ADDR_VAR 0 31
65330: PUSH
65331: LD_INT 0
65333: PUSH
65334: LD_INT 0
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 0
65343: PUSH
65344: LD_INT 1
65346: NEG
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 1
65354: PUSH
65355: LD_INT 0
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 1
65364: PUSH
65365: LD_INT 1
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 0
65374: PUSH
65375: LD_INT 1
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 1
65384: NEG
65385: PUSH
65386: LD_INT 0
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 1
65395: NEG
65396: PUSH
65397: LD_INT 1
65399: NEG
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 1
65407: NEG
65408: PUSH
65409: LD_INT 2
65411: NEG
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 1
65419: PUSH
65420: LD_INT 1
65422: NEG
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 2
65430: PUSH
65431: LD_INT 0
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 2
65440: PUSH
65441: LD_INT 1
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 2
65450: PUSH
65451: LD_INT 2
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 1
65460: PUSH
65461: LD_INT 2
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 0
65470: PUSH
65471: LD_INT 2
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 1
65480: NEG
65481: PUSH
65482: LD_INT 1
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 2
65491: NEG
65492: PUSH
65493: LD_INT 1
65495: NEG
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 2
65503: NEG
65504: PUSH
65505: LD_INT 2
65507: NEG
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 2
65515: NEG
65516: PUSH
65517: LD_INT 3
65519: NEG
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 2
65527: PUSH
65528: LD_INT 1
65530: NEG
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 3
65538: PUSH
65539: LD_INT 1
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 1
65548: PUSH
65549: LD_INT 3
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 1
65558: NEG
65559: PUSH
65560: LD_INT 2
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 3
65569: NEG
65570: PUSH
65571: LD_INT 2
65573: NEG
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65604: LD_ADDR_VAR 0 32
65608: PUSH
65609: LD_INT 0
65611: PUSH
65612: LD_INT 0
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: LD_INT 0
65621: PUSH
65622: LD_INT 1
65624: NEG
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 1
65632: PUSH
65633: LD_INT 0
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 1
65642: PUSH
65643: LD_INT 1
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 0
65652: PUSH
65653: LD_INT 1
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 1
65662: NEG
65663: PUSH
65664: LD_INT 0
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 1
65673: NEG
65674: PUSH
65675: LD_INT 1
65677: NEG
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 1
65685: NEG
65686: PUSH
65687: LD_INT 2
65689: NEG
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 0
65697: PUSH
65698: LD_INT 2
65700: NEG
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 1
65708: PUSH
65709: LD_INT 1
65711: NEG
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 2
65719: PUSH
65720: LD_INT 1
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 2
65729: PUSH
65730: LD_INT 2
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 1
65739: PUSH
65740: LD_INT 2
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 0
65749: PUSH
65750: LD_INT 2
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 1
65759: NEG
65760: PUSH
65761: LD_INT 1
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 2
65770: NEG
65771: PUSH
65772: LD_INT 0
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 2
65781: NEG
65782: PUSH
65783: LD_INT 1
65785: NEG
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 1
65793: NEG
65794: PUSH
65795: LD_INT 3
65797: NEG
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 1
65805: PUSH
65806: LD_INT 2
65808: NEG
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 3
65816: PUSH
65817: LD_INT 2
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 2
65826: PUSH
65827: LD_INT 3
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 2
65836: NEG
65837: PUSH
65838: LD_INT 1
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 3
65847: NEG
65848: PUSH
65849: LD_INT 1
65851: NEG
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65882: LD_ADDR_VAR 0 33
65886: PUSH
65887: LD_INT 0
65889: PUSH
65890: LD_INT 0
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 0
65899: PUSH
65900: LD_INT 1
65902: NEG
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 1
65910: PUSH
65911: LD_INT 0
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 1
65920: PUSH
65921: LD_INT 1
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 0
65930: PUSH
65931: LD_INT 1
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 1
65940: NEG
65941: PUSH
65942: LD_INT 0
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 1
65951: NEG
65952: PUSH
65953: LD_INT 1
65955: NEG
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 1
65963: NEG
65964: PUSH
65965: LD_INT 2
65967: NEG
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 1
65975: PUSH
65976: LD_INT 1
65978: NEG
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 2
65986: PUSH
65987: LD_INT 0
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 2
65996: PUSH
65997: LD_INT 1
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 1
66006: PUSH
66007: LD_INT 2
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 0
66016: PUSH
66017: LD_INT 2
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 1
66026: NEG
66027: PUSH
66028: LD_INT 1
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 2
66037: NEG
66038: PUSH
66039: LD_INT 0
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 2
66048: NEG
66049: PUSH
66050: LD_INT 1
66052: NEG
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 2
66060: NEG
66061: PUSH
66062: LD_INT 2
66064: NEG
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 2
66072: NEG
66073: PUSH
66074: LD_INT 3
66076: NEG
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 2
66084: PUSH
66085: LD_INT 1
66087: NEG
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 3
66095: PUSH
66096: LD_INT 1
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 1
66105: PUSH
66106: LD_INT 3
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 1
66115: NEG
66116: PUSH
66117: LD_INT 2
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 3
66126: NEG
66127: PUSH
66128: LD_INT 2
66130: NEG
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66161: LD_ADDR_VAR 0 34
66165: PUSH
66166: LD_INT 0
66168: PUSH
66169: LD_INT 0
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 0
66178: PUSH
66179: LD_INT 1
66181: NEG
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 1
66189: PUSH
66190: LD_INT 0
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 1
66199: PUSH
66200: LD_INT 1
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 0
66209: PUSH
66210: LD_INT 1
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 1
66219: NEG
66220: PUSH
66221: LD_INT 0
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 1
66230: NEG
66231: PUSH
66232: LD_INT 1
66234: NEG
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 1
66242: NEG
66243: PUSH
66244: LD_INT 2
66246: NEG
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 0
66254: PUSH
66255: LD_INT 2
66257: NEG
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 1
66265: PUSH
66266: LD_INT 1
66268: NEG
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 2
66276: PUSH
66277: LD_INT 1
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 2
66286: PUSH
66287: LD_INT 2
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 1
66296: PUSH
66297: LD_INT 2
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 1
66306: NEG
66307: PUSH
66308: LD_INT 1
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 2
66317: NEG
66318: PUSH
66319: LD_INT 0
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 2
66328: NEG
66329: PUSH
66330: LD_INT 1
66332: NEG
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 2
66340: NEG
66341: PUSH
66342: LD_INT 2
66344: NEG
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 1
66352: NEG
66353: PUSH
66354: LD_INT 3
66356: NEG
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 1
66364: PUSH
66365: LD_INT 2
66367: NEG
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 3
66375: PUSH
66376: LD_INT 2
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 2
66385: PUSH
66386: LD_INT 3
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 2
66395: NEG
66396: PUSH
66397: LD_INT 1
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 3
66406: NEG
66407: PUSH
66408: LD_INT 1
66410: NEG
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
66441: LD_ADDR_VAR 0 35
66445: PUSH
66446: LD_INT 0
66448: PUSH
66449: LD_INT 0
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 0
66458: PUSH
66459: LD_INT 1
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 1
66469: PUSH
66470: LD_INT 0
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 1
66479: PUSH
66480: LD_INT 1
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 0
66489: PUSH
66490: LD_INT 1
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 1
66499: NEG
66500: PUSH
66501: LD_INT 0
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 1
66510: NEG
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 2
66522: PUSH
66523: LD_INT 1
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 2
66532: NEG
66533: PUSH
66534: LD_INT 1
66536: NEG
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
66553: LD_ADDR_VAR 0 36
66557: PUSH
66558: LD_INT 0
66560: PUSH
66561: LD_INT 0
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 0
66570: PUSH
66571: LD_INT 1
66573: NEG
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 1
66581: PUSH
66582: LD_INT 0
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 1
66591: PUSH
66592: LD_INT 1
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 0
66601: PUSH
66602: LD_INT 1
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 1
66611: NEG
66612: PUSH
66613: LD_INT 0
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 1
66622: NEG
66623: PUSH
66624: LD_INT 1
66626: NEG
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 1
66634: NEG
66635: PUSH
66636: LD_INT 2
66638: NEG
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 1
66646: PUSH
66647: LD_INT 2
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
66665: LD_ADDR_VAR 0 37
66669: PUSH
66670: LD_INT 0
66672: PUSH
66673: LD_INT 0
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 0
66682: PUSH
66683: LD_INT 1
66685: NEG
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 1
66693: PUSH
66694: LD_INT 0
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 1
66703: PUSH
66704: LD_INT 1
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 0
66713: PUSH
66714: LD_INT 1
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 1
66723: NEG
66724: PUSH
66725: LD_INT 0
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 1
66734: NEG
66735: PUSH
66736: LD_INT 1
66738: NEG
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 1
66746: PUSH
66747: LD_INT 1
66749: NEG
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 1
66757: NEG
66758: PUSH
66759: LD_INT 1
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
66777: LD_ADDR_VAR 0 38
66781: PUSH
66782: LD_INT 0
66784: PUSH
66785: LD_INT 0
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 0
66794: PUSH
66795: LD_INT 1
66797: NEG
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 1
66805: PUSH
66806: LD_INT 0
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 1
66815: PUSH
66816: LD_INT 1
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 0
66825: PUSH
66826: LD_INT 1
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 1
66835: NEG
66836: PUSH
66837: LD_INT 0
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 1
66846: NEG
66847: PUSH
66848: LD_INT 1
66850: NEG
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 2
66858: PUSH
66859: LD_INT 1
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 2
66868: NEG
66869: PUSH
66870: LD_INT 1
66872: NEG
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
66889: LD_ADDR_VAR 0 39
66893: PUSH
66894: LD_INT 0
66896: PUSH
66897: LD_INT 0
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 0
66906: PUSH
66907: LD_INT 1
66909: NEG
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 1
66917: PUSH
66918: LD_INT 0
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 1
66927: PUSH
66928: LD_INT 1
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 0
66937: PUSH
66938: LD_INT 1
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 1
66947: NEG
66948: PUSH
66949: LD_INT 0
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 1
66958: NEG
66959: PUSH
66960: LD_INT 1
66962: NEG
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 1
66970: NEG
66971: PUSH
66972: LD_INT 2
66974: NEG
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 1
66982: PUSH
66983: LD_INT 2
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
67001: LD_ADDR_VAR 0 40
67005: PUSH
67006: LD_INT 0
67008: PUSH
67009: LD_INT 0
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 0
67018: PUSH
67019: LD_INT 1
67021: NEG
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 1
67029: PUSH
67030: LD_INT 0
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 1
67039: PUSH
67040: LD_INT 1
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 0
67049: PUSH
67050: LD_INT 1
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 1
67059: NEG
67060: PUSH
67061: LD_INT 0
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 1
67070: NEG
67071: PUSH
67072: LD_INT 1
67074: NEG
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 1
67082: PUSH
67083: LD_INT 1
67085: NEG
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 1
67093: NEG
67094: PUSH
67095: LD_INT 1
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67113: LD_ADDR_VAR 0 41
67117: PUSH
67118: LD_INT 0
67120: PUSH
67121: LD_INT 0
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: LD_INT 1
67133: NEG
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 1
67141: PUSH
67142: LD_INT 0
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 1
67151: PUSH
67152: LD_INT 1
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 0
67161: PUSH
67162: LD_INT 1
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 1
67171: NEG
67172: PUSH
67173: LD_INT 0
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 1
67182: NEG
67183: PUSH
67184: LD_INT 1
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 1
67194: NEG
67195: PUSH
67196: LD_INT 2
67198: NEG
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 1
67206: PUSH
67207: LD_INT 1
67209: NEG
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 2
67217: PUSH
67218: LD_INT 0
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 2
67227: PUSH
67228: LD_INT 1
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 2
67237: PUSH
67238: LD_INT 2
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 1
67247: PUSH
67248: LD_INT 2
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 1
67257: NEG
67258: PUSH
67259: LD_INT 1
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 2
67268: NEG
67269: PUSH
67270: LD_INT 0
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 2
67279: NEG
67280: PUSH
67281: LD_INT 1
67283: NEG
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 2
67291: NEG
67292: PUSH
67293: LD_INT 2
67295: NEG
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PUSH
67301: LD_INT 2
67303: NEG
67304: PUSH
67305: LD_INT 3
67307: NEG
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 2
67315: PUSH
67316: LD_INT 1
67318: NEG
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 3
67326: PUSH
67327: LD_INT 0
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 3
67336: PUSH
67337: LD_INT 1
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 3
67346: PUSH
67347: LD_INT 2
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 3
67356: PUSH
67357: LD_INT 3
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 2
67366: PUSH
67367: LD_INT 3
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 2
67376: NEG
67377: PUSH
67378: LD_INT 1
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 3
67387: NEG
67388: PUSH
67389: LD_INT 0
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 3
67398: NEG
67399: PUSH
67400: LD_INT 1
67402: NEG
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 3
67410: NEG
67411: PUSH
67412: LD_INT 2
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 3
67422: NEG
67423: PUSH
67424: LD_INT 3
67426: NEG
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67463: LD_ADDR_VAR 0 42
67467: PUSH
67468: LD_INT 0
67470: PUSH
67471: LD_INT 0
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 0
67480: PUSH
67481: LD_INT 1
67483: NEG
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 1
67491: PUSH
67492: LD_INT 0
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 1
67501: PUSH
67502: LD_INT 1
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 0
67511: PUSH
67512: LD_INT 1
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 1
67521: NEG
67522: PUSH
67523: LD_INT 0
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 1
67532: NEG
67533: PUSH
67534: LD_INT 1
67536: NEG
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 1
67544: NEG
67545: PUSH
67546: LD_INT 2
67548: NEG
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 0
67556: PUSH
67557: LD_INT 2
67559: NEG
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 1
67567: PUSH
67568: LD_INT 1
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 2
67578: PUSH
67579: LD_INT 1
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 2
67588: PUSH
67589: LD_INT 2
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 1
67598: PUSH
67599: LD_INT 2
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 0
67608: PUSH
67609: LD_INT 2
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 1
67618: NEG
67619: PUSH
67620: LD_INT 1
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 2
67629: NEG
67630: PUSH
67631: LD_INT 1
67633: NEG
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 2
67641: NEG
67642: PUSH
67643: LD_INT 2
67645: NEG
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 2
67653: NEG
67654: PUSH
67655: LD_INT 3
67657: NEG
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 1
67665: NEG
67666: PUSH
67667: LD_INT 3
67669: NEG
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 0
67677: PUSH
67678: LD_INT 3
67680: NEG
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 1
67688: PUSH
67689: LD_INT 2
67691: NEG
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 3
67699: PUSH
67700: LD_INT 2
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 3
67709: PUSH
67710: LD_INT 3
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 2
67719: PUSH
67720: LD_INT 3
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 1
67729: PUSH
67730: LD_INT 3
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 0
67739: PUSH
67740: LD_INT 3
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 1
67749: NEG
67750: PUSH
67751: LD_INT 2
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 3
67760: NEG
67761: PUSH
67762: LD_INT 2
67764: NEG
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: PUSH
67770: LD_INT 3
67772: NEG
67773: PUSH
67774: LD_INT 3
67776: NEG
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67813: LD_ADDR_VAR 0 43
67817: PUSH
67818: LD_INT 0
67820: PUSH
67821: LD_INT 0
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 0
67830: PUSH
67831: LD_INT 1
67833: NEG
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 1
67841: PUSH
67842: LD_INT 0
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 1
67851: PUSH
67852: LD_INT 1
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 0
67861: PUSH
67862: LD_INT 1
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 1
67871: NEG
67872: PUSH
67873: LD_INT 0
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 1
67882: NEG
67883: PUSH
67884: LD_INT 1
67886: NEG
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 1
67894: NEG
67895: PUSH
67896: LD_INT 2
67898: NEG
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 0
67906: PUSH
67907: LD_INT 2
67909: NEG
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 1
67917: PUSH
67918: LD_INT 1
67920: NEG
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 2
67928: PUSH
67929: LD_INT 0
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 2
67938: PUSH
67939: LD_INT 1
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 1
67948: PUSH
67949: LD_INT 2
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 0
67958: PUSH
67959: LD_INT 2
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 1
67968: NEG
67969: PUSH
67970: LD_INT 1
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 2
67979: NEG
67980: PUSH
67981: LD_INT 0
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 2
67990: NEG
67991: PUSH
67992: LD_INT 1
67994: NEG
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 1
68002: NEG
68003: PUSH
68004: LD_INT 3
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 0
68014: PUSH
68015: LD_INT 3
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 1
68025: PUSH
68026: LD_INT 2
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 2
68036: PUSH
68037: LD_INT 1
68039: NEG
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 3
68047: PUSH
68048: LD_INT 0
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 3
68057: PUSH
68058: LD_INT 1
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 1
68067: PUSH
68068: LD_INT 3
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 0
68077: PUSH
68078: LD_INT 3
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 1
68087: NEG
68088: PUSH
68089: LD_INT 2
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 2
68098: NEG
68099: PUSH
68100: LD_INT 1
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 3
68109: NEG
68110: PUSH
68111: LD_INT 0
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 3
68120: NEG
68121: PUSH
68122: LD_INT 1
68124: NEG
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68161: LD_ADDR_VAR 0 44
68165: PUSH
68166: LD_INT 0
68168: PUSH
68169: LD_INT 0
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 0
68178: PUSH
68179: LD_INT 1
68181: NEG
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 1
68189: PUSH
68190: LD_INT 0
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 1
68199: PUSH
68200: LD_INT 1
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 0
68209: PUSH
68210: LD_INT 1
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 1
68219: NEG
68220: PUSH
68221: LD_INT 0
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 1
68230: NEG
68231: PUSH
68232: LD_INT 1
68234: NEG
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 1
68242: NEG
68243: PUSH
68244: LD_INT 2
68246: NEG
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 1
68254: PUSH
68255: LD_INT 1
68257: NEG
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 2
68265: PUSH
68266: LD_INT 0
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 2
68275: PUSH
68276: LD_INT 1
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 2
68285: PUSH
68286: LD_INT 2
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 1
68295: PUSH
68296: LD_INT 2
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 1
68305: NEG
68306: PUSH
68307: LD_INT 1
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 2
68316: NEG
68317: PUSH
68318: LD_INT 0
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 2
68327: NEG
68328: PUSH
68329: LD_INT 1
68331: NEG
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 2
68339: NEG
68340: PUSH
68341: LD_INT 2
68343: NEG
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 2
68351: NEG
68352: PUSH
68353: LD_INT 3
68355: NEG
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 2
68363: PUSH
68364: LD_INT 1
68366: NEG
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 3
68374: PUSH
68375: LD_INT 0
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 3
68384: PUSH
68385: LD_INT 1
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 3
68394: PUSH
68395: LD_INT 2
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 3
68404: PUSH
68405: LD_INT 3
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 2
68414: PUSH
68415: LD_INT 3
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 2
68424: NEG
68425: PUSH
68426: LD_INT 1
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 3
68435: NEG
68436: PUSH
68437: LD_INT 0
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 3
68446: NEG
68447: PUSH
68448: LD_INT 1
68450: NEG
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 3
68458: NEG
68459: PUSH
68460: LD_INT 2
68462: NEG
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 3
68470: NEG
68471: PUSH
68472: LD_INT 3
68474: NEG
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68511: LD_ADDR_VAR 0 45
68515: PUSH
68516: LD_INT 0
68518: PUSH
68519: LD_INT 0
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 0
68528: PUSH
68529: LD_INT 1
68531: NEG
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 1
68539: PUSH
68540: LD_INT 0
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 1
68549: PUSH
68550: LD_INT 1
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 0
68559: PUSH
68560: LD_INT 1
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 1
68569: NEG
68570: PUSH
68571: LD_INT 0
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: LD_INT 1
68580: NEG
68581: PUSH
68582: LD_INT 1
68584: NEG
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 1
68592: NEG
68593: PUSH
68594: LD_INT 2
68596: NEG
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 0
68604: PUSH
68605: LD_INT 2
68607: NEG
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 1
68615: PUSH
68616: LD_INT 1
68618: NEG
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 2
68626: PUSH
68627: LD_INT 1
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 2
68636: PUSH
68637: LD_INT 2
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 1
68646: PUSH
68647: LD_INT 2
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 0
68656: PUSH
68657: LD_INT 2
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 1
68666: NEG
68667: PUSH
68668: LD_INT 1
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 2
68677: NEG
68678: PUSH
68679: LD_INT 1
68681: NEG
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: LD_INT 2
68689: NEG
68690: PUSH
68691: LD_INT 2
68693: NEG
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 2
68701: NEG
68702: PUSH
68703: LD_INT 3
68705: NEG
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 1
68713: NEG
68714: PUSH
68715: LD_INT 3
68717: NEG
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 0
68725: PUSH
68726: LD_INT 3
68728: NEG
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 1
68736: PUSH
68737: LD_INT 2
68739: NEG
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 3
68747: PUSH
68748: LD_INT 2
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 3
68757: PUSH
68758: LD_INT 3
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 2
68767: PUSH
68768: LD_INT 3
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 1
68777: PUSH
68778: LD_INT 3
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 0
68787: PUSH
68788: LD_INT 3
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 1
68797: NEG
68798: PUSH
68799: LD_INT 2
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 3
68808: NEG
68809: PUSH
68810: LD_INT 2
68812: NEG
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 3
68820: NEG
68821: PUSH
68822: LD_INT 3
68824: NEG
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68861: LD_ADDR_VAR 0 46
68865: PUSH
68866: LD_INT 0
68868: PUSH
68869: LD_INT 0
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 0
68878: PUSH
68879: LD_INT 1
68881: NEG
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 1
68889: PUSH
68890: LD_INT 0
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 1
68899: PUSH
68900: LD_INT 1
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 0
68909: PUSH
68910: LD_INT 1
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: PUSH
68917: LD_INT 1
68919: NEG
68920: PUSH
68921: LD_INT 0
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 1
68930: NEG
68931: PUSH
68932: LD_INT 1
68934: NEG
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 1
68942: NEG
68943: PUSH
68944: LD_INT 2
68946: NEG
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 0
68954: PUSH
68955: LD_INT 2
68957: NEG
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 1
68965: PUSH
68966: LD_INT 1
68968: NEG
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 2
68976: PUSH
68977: LD_INT 0
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 2
68986: PUSH
68987: LD_INT 1
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 1
68996: PUSH
68997: LD_INT 2
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 0
69006: PUSH
69007: LD_INT 2
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 1
69016: NEG
69017: PUSH
69018: LD_INT 1
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 2
69027: NEG
69028: PUSH
69029: LD_INT 0
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 2
69038: NEG
69039: PUSH
69040: LD_INT 1
69042: NEG
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 1
69050: NEG
69051: PUSH
69052: LD_INT 3
69054: NEG
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 0
69062: PUSH
69063: LD_INT 3
69065: NEG
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 1
69073: PUSH
69074: LD_INT 2
69076: NEG
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 2
69084: PUSH
69085: LD_INT 1
69087: NEG
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 3
69095: PUSH
69096: LD_INT 0
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 3
69105: PUSH
69106: LD_INT 1
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 1
69115: PUSH
69116: LD_INT 3
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 0
69125: PUSH
69126: LD_INT 3
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 1
69135: NEG
69136: PUSH
69137: LD_INT 2
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: PUSH
69144: LD_INT 2
69146: NEG
69147: PUSH
69148: LD_INT 1
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 3
69157: NEG
69158: PUSH
69159: LD_INT 0
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 3
69168: NEG
69169: PUSH
69170: LD_INT 1
69172: NEG
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69209: LD_ADDR_VAR 0 47
69213: PUSH
69214: LD_INT 0
69216: PUSH
69217: LD_INT 0
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 0
69226: PUSH
69227: LD_INT 1
69229: NEG
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 1
69237: PUSH
69238: LD_INT 0
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 1
69247: PUSH
69248: LD_INT 1
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 0
69257: PUSH
69258: LD_INT 1
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 1
69267: NEG
69268: PUSH
69269: LD_INT 0
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 1
69278: NEG
69279: PUSH
69280: LD_INT 1
69282: NEG
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 1
69290: NEG
69291: PUSH
69292: LD_INT 2
69294: NEG
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 0
69302: PUSH
69303: LD_INT 2
69305: NEG
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: LD_INT 1
69313: PUSH
69314: LD_INT 1
69316: NEG
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 2
69324: NEG
69325: PUSH
69326: LD_INT 1
69328: NEG
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 2
69336: NEG
69337: PUSH
69338: LD_INT 2
69340: NEG
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69360: LD_ADDR_VAR 0 48
69364: PUSH
69365: LD_INT 0
69367: PUSH
69368: LD_INT 0
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 0
69377: PUSH
69378: LD_INT 1
69380: NEG
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 1
69388: PUSH
69389: LD_INT 0
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 1
69398: PUSH
69399: LD_INT 1
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 0
69408: PUSH
69409: LD_INT 1
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 1
69418: NEG
69419: PUSH
69420: LD_INT 0
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 1
69429: NEG
69430: PUSH
69431: LD_INT 1
69433: NEG
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 1
69441: NEG
69442: PUSH
69443: LD_INT 2
69445: NEG
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 0
69453: PUSH
69454: LD_INT 2
69456: NEG
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 1
69464: PUSH
69465: LD_INT 1
69467: NEG
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 2
69475: PUSH
69476: LD_INT 0
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 2
69485: PUSH
69486: LD_INT 1
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69507: LD_ADDR_VAR 0 49
69511: PUSH
69512: LD_INT 0
69514: PUSH
69515: LD_INT 0
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 0
69524: PUSH
69525: LD_INT 1
69527: NEG
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 1
69535: PUSH
69536: LD_INT 0
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 1
69545: PUSH
69546: LD_INT 1
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 0
69555: PUSH
69556: LD_INT 1
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 1
69565: NEG
69566: PUSH
69567: LD_INT 0
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 1
69576: NEG
69577: PUSH
69578: LD_INT 1
69580: NEG
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 1
69588: PUSH
69589: LD_INT 1
69591: NEG
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 2
69599: PUSH
69600: LD_INT 0
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 2
69609: PUSH
69610: LD_INT 1
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 2
69619: PUSH
69620: LD_INT 2
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 1
69629: PUSH
69630: LD_INT 2
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69651: LD_ADDR_VAR 0 50
69655: PUSH
69656: LD_INT 0
69658: PUSH
69659: LD_INT 0
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 0
69668: PUSH
69669: LD_INT 1
69671: NEG
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 1
69679: PUSH
69680: LD_INT 0
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 1
69689: PUSH
69690: LD_INT 1
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 0
69699: PUSH
69700: LD_INT 1
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 1
69709: NEG
69710: PUSH
69711: LD_INT 0
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 1
69720: NEG
69721: PUSH
69722: LD_INT 1
69724: NEG
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 2
69732: PUSH
69733: LD_INT 1
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: LD_INT 2
69742: PUSH
69743: LD_INT 2
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: LD_INT 1
69752: PUSH
69753: LD_INT 2
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 0
69762: PUSH
69763: LD_INT 2
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 1
69772: NEG
69773: PUSH
69774: LD_INT 1
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69795: LD_ADDR_VAR 0 51
69799: PUSH
69800: LD_INT 0
69802: PUSH
69803: LD_INT 0
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 0
69812: PUSH
69813: LD_INT 1
69815: NEG
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 1
69823: PUSH
69824: LD_INT 0
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 1
69833: PUSH
69834: LD_INT 1
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 0
69843: PUSH
69844: LD_INT 1
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 1
69853: NEG
69854: PUSH
69855: LD_INT 0
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 1
69864: NEG
69865: PUSH
69866: LD_INT 1
69868: NEG
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 1
69876: PUSH
69877: LD_INT 2
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 0
69886: PUSH
69887: LD_INT 2
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 1
69896: NEG
69897: PUSH
69898: LD_INT 1
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 2
69907: NEG
69908: PUSH
69909: LD_INT 0
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 2
69918: NEG
69919: PUSH
69920: LD_INT 1
69922: NEG
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: EMPTY
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69942: LD_ADDR_VAR 0 52
69946: PUSH
69947: LD_INT 0
69949: PUSH
69950: LD_INT 0
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 0
69959: PUSH
69960: LD_INT 1
69962: NEG
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 1
69970: PUSH
69971: LD_INT 0
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 1
69980: PUSH
69981: LD_INT 1
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 0
69990: PUSH
69991: LD_INT 1
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 1
70000: NEG
70001: PUSH
70002: LD_INT 0
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 1
70011: NEG
70012: PUSH
70013: LD_INT 1
70015: NEG
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: PUSH
70021: LD_INT 1
70023: NEG
70024: PUSH
70025: LD_INT 2
70027: NEG
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 1
70035: NEG
70036: PUSH
70037: LD_INT 1
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: LD_INT 2
70046: NEG
70047: PUSH
70048: LD_INT 0
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: LD_INT 2
70057: NEG
70058: PUSH
70059: LD_INT 1
70061: NEG
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 2
70069: NEG
70070: PUSH
70071: LD_INT 2
70073: NEG
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70093: LD_ADDR_VAR 0 53
70097: PUSH
70098: LD_INT 0
70100: PUSH
70101: LD_INT 0
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 0
70110: PUSH
70111: LD_INT 1
70113: NEG
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: LD_INT 1
70121: PUSH
70122: LD_INT 0
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: LD_INT 1
70131: PUSH
70132: LD_INT 1
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 0
70141: PUSH
70142: LD_INT 1
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 1
70151: NEG
70152: PUSH
70153: LD_INT 0
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 1
70162: NEG
70163: PUSH
70164: LD_INT 1
70166: NEG
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: LD_INT 1
70174: NEG
70175: PUSH
70176: LD_INT 2
70178: NEG
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PUSH
70184: LD_INT 0
70186: PUSH
70187: LD_INT 2
70189: NEG
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 1
70197: PUSH
70198: LD_INT 1
70200: NEG
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: LD_INT 2
70208: PUSH
70209: LD_INT 0
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: LD_INT 2
70218: PUSH
70219: LD_INT 1
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 2
70228: PUSH
70229: LD_INT 2
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 1
70238: PUSH
70239: LD_INT 2
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 0
70248: PUSH
70249: LD_INT 2
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 1
70258: NEG
70259: PUSH
70260: LD_INT 1
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 2
70269: NEG
70270: PUSH
70271: LD_INT 0
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 2
70280: NEG
70281: PUSH
70282: LD_INT 1
70284: NEG
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 2
70292: NEG
70293: PUSH
70294: LD_INT 2
70296: NEG
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70323: LD_ADDR_VAR 0 54
70327: PUSH
70328: LD_INT 0
70330: PUSH
70331: LD_INT 0
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 0
70340: PUSH
70341: LD_INT 1
70343: NEG
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 1
70351: PUSH
70352: LD_INT 0
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: LD_INT 1
70361: PUSH
70362: LD_INT 1
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 0
70371: PUSH
70372: LD_INT 1
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 1
70381: NEG
70382: PUSH
70383: LD_INT 0
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 1
70392: NEG
70393: PUSH
70394: LD_INT 1
70396: NEG
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 1
70404: NEG
70405: PUSH
70406: LD_INT 2
70408: NEG
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 0
70416: PUSH
70417: LD_INT 2
70419: NEG
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 1
70427: PUSH
70428: LD_INT 1
70430: NEG
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: PUSH
70436: LD_INT 2
70438: PUSH
70439: LD_INT 0
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: LD_INT 2
70448: PUSH
70449: LD_INT 1
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 2
70458: PUSH
70459: LD_INT 2
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: LD_INT 1
70468: PUSH
70469: LD_INT 2
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: LD_INT 0
70478: PUSH
70479: LD_INT 2
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: LD_INT 1
70488: NEG
70489: PUSH
70490: LD_INT 1
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 2
70499: NEG
70500: PUSH
70501: LD_INT 0
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 2
70510: NEG
70511: PUSH
70512: LD_INT 1
70514: NEG
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: PUSH
70520: LD_INT 2
70522: NEG
70523: PUSH
70524: LD_INT 2
70526: NEG
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70553: LD_ADDR_VAR 0 55
70557: PUSH
70558: LD_INT 0
70560: PUSH
70561: LD_INT 0
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: LD_INT 0
70570: PUSH
70571: LD_INT 1
70573: NEG
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: LD_INT 1
70581: PUSH
70582: LD_INT 0
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 1
70591: PUSH
70592: LD_INT 1
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 0
70601: PUSH
70602: LD_INT 1
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 1
70611: NEG
70612: PUSH
70613: LD_INT 0
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 1
70622: NEG
70623: PUSH
70624: LD_INT 1
70626: NEG
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 1
70634: NEG
70635: PUSH
70636: LD_INT 2
70638: NEG
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 0
70646: PUSH
70647: LD_INT 2
70649: NEG
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: LD_INT 1
70657: PUSH
70658: LD_INT 1
70660: NEG
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 2
70668: PUSH
70669: LD_INT 0
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: PUSH
70676: LD_INT 2
70678: PUSH
70679: LD_INT 1
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 2
70688: PUSH
70689: LD_INT 2
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 1
70698: PUSH
70699: LD_INT 2
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PUSH
70706: LD_INT 0
70708: PUSH
70709: LD_INT 2
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: PUSH
70716: LD_INT 1
70718: NEG
70719: PUSH
70720: LD_INT 1
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 2
70729: NEG
70730: PUSH
70731: LD_INT 0
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 2
70740: NEG
70741: PUSH
70742: LD_INT 1
70744: NEG
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: PUSH
70750: LD_INT 2
70752: NEG
70753: PUSH
70754: LD_INT 2
70756: NEG
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70783: LD_ADDR_VAR 0 56
70787: PUSH
70788: LD_INT 0
70790: PUSH
70791: LD_INT 0
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 0
70800: PUSH
70801: LD_INT 1
70803: NEG
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 1
70811: PUSH
70812: LD_INT 0
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 1
70821: PUSH
70822: LD_INT 1
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: LD_INT 0
70831: PUSH
70832: LD_INT 1
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: LD_INT 1
70841: NEG
70842: PUSH
70843: LD_INT 0
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 1
70852: NEG
70853: PUSH
70854: LD_INT 1
70856: NEG
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 1
70864: NEG
70865: PUSH
70866: LD_INT 2
70868: NEG
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 0
70876: PUSH
70877: LD_INT 2
70879: NEG
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 1
70887: PUSH
70888: LD_INT 1
70890: NEG
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 2
70898: PUSH
70899: LD_INT 0
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 2
70908: PUSH
70909: LD_INT 1
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 2
70918: PUSH
70919: LD_INT 2
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: LD_INT 1
70928: PUSH
70929: LD_INT 2
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 0
70938: PUSH
70939: LD_INT 2
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_INT 1
70948: NEG
70949: PUSH
70950: LD_INT 1
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 2
70959: NEG
70960: PUSH
70961: LD_INT 0
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PUSH
70968: LD_INT 2
70970: NEG
70971: PUSH
70972: LD_INT 1
70974: NEG
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: PUSH
70980: LD_INT 2
70982: NEG
70983: PUSH
70984: LD_INT 2
70986: NEG
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: LIST
71007: LIST
71008: LIST
71009: LIST
71010: LIST
71011: LIST
71012: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71013: LD_ADDR_VAR 0 57
71017: PUSH
71018: LD_INT 0
71020: PUSH
71021: LD_INT 0
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: PUSH
71028: LD_INT 0
71030: PUSH
71031: LD_INT 1
71033: NEG
71034: PUSH
71035: EMPTY
71036: LIST
71037: LIST
71038: PUSH
71039: LD_INT 1
71041: PUSH
71042: LD_INT 0
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PUSH
71049: LD_INT 1
71051: PUSH
71052: LD_INT 1
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: PUSH
71059: LD_INT 0
71061: PUSH
71062: LD_INT 1
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PUSH
71069: LD_INT 1
71071: NEG
71072: PUSH
71073: LD_INT 0
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: PUSH
71080: LD_INT 1
71082: NEG
71083: PUSH
71084: LD_INT 1
71086: NEG
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 1
71094: NEG
71095: PUSH
71096: LD_INT 2
71098: NEG
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 0
71106: PUSH
71107: LD_INT 2
71109: NEG
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 1
71117: PUSH
71118: LD_INT 1
71120: NEG
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 2
71128: PUSH
71129: LD_INT 0
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 2
71138: PUSH
71139: LD_INT 1
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: LD_INT 2
71148: PUSH
71149: LD_INT 2
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: PUSH
71156: LD_INT 1
71158: PUSH
71159: LD_INT 2
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 0
71168: PUSH
71169: LD_INT 2
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: PUSH
71176: LD_INT 1
71178: NEG
71179: PUSH
71180: LD_INT 1
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_INT 2
71189: NEG
71190: PUSH
71191: LD_INT 0
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 2
71200: NEG
71201: PUSH
71202: LD_INT 1
71204: NEG
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 2
71212: NEG
71213: PUSH
71214: LD_INT 2
71216: NEG
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: LIST
71226: LIST
71227: LIST
71228: LIST
71229: LIST
71230: LIST
71231: LIST
71232: LIST
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: LIST
71242: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71243: LD_ADDR_VAR 0 58
71247: PUSH
71248: LD_INT 0
71250: PUSH
71251: LD_INT 0
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: PUSH
71258: LD_INT 0
71260: PUSH
71261: LD_INT 1
71263: NEG
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: PUSH
71269: LD_INT 1
71271: PUSH
71272: LD_INT 0
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: PUSH
71279: LD_INT 1
71281: PUSH
71282: LD_INT 1
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 0
71291: PUSH
71292: LD_INT 1
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 1
71301: NEG
71302: PUSH
71303: LD_INT 0
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 1
71312: NEG
71313: PUSH
71314: LD_INT 1
71316: NEG
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 1
71324: NEG
71325: PUSH
71326: LD_INT 2
71328: NEG
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: PUSH
71334: LD_INT 0
71336: PUSH
71337: LD_INT 2
71339: NEG
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: PUSH
71345: LD_INT 1
71347: PUSH
71348: LD_INT 1
71350: NEG
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: LD_INT 2
71358: PUSH
71359: LD_INT 0
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 2
71368: PUSH
71369: LD_INT 1
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: PUSH
71376: LD_INT 2
71378: PUSH
71379: LD_INT 2
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: PUSH
71386: LD_INT 1
71388: PUSH
71389: LD_INT 2
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 0
71398: PUSH
71399: LD_INT 2
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: PUSH
71406: LD_INT 1
71408: NEG
71409: PUSH
71410: LD_INT 1
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: PUSH
71417: LD_INT 2
71419: NEG
71420: PUSH
71421: LD_INT 0
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: LD_INT 2
71430: NEG
71431: PUSH
71432: LD_INT 1
71434: NEG
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: LD_INT 2
71442: NEG
71443: PUSH
71444: LD_INT 2
71446: NEG
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71473: LD_ADDR_VAR 0 59
71477: PUSH
71478: LD_INT 0
71480: PUSH
71481: LD_INT 0
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: PUSH
71488: LD_INT 0
71490: PUSH
71491: LD_INT 1
71493: NEG
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PUSH
71499: LD_INT 1
71501: PUSH
71502: LD_INT 0
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PUSH
71509: LD_INT 1
71511: PUSH
71512: LD_INT 1
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PUSH
71519: LD_INT 0
71521: PUSH
71522: LD_INT 1
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 1
71531: NEG
71532: PUSH
71533: LD_INT 0
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 1
71542: NEG
71543: PUSH
71544: LD_INT 1
71546: NEG
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71561: LD_ADDR_VAR 0 60
71565: PUSH
71566: LD_INT 0
71568: PUSH
71569: LD_INT 0
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 0
71578: PUSH
71579: LD_INT 1
71581: NEG
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 1
71589: PUSH
71590: LD_INT 0
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PUSH
71597: LD_INT 1
71599: PUSH
71600: LD_INT 1
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: LD_INT 0
71609: PUSH
71610: LD_INT 1
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 1
71619: NEG
71620: PUSH
71621: LD_INT 0
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 1
71630: NEG
71631: PUSH
71632: LD_INT 1
71634: NEG
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: LIST
71644: LIST
71645: LIST
71646: LIST
71647: LIST
71648: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71649: LD_ADDR_VAR 0 61
71653: PUSH
71654: LD_INT 0
71656: PUSH
71657: LD_INT 0
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: LD_INT 0
71666: PUSH
71667: LD_INT 1
71669: NEG
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 1
71677: PUSH
71678: LD_INT 0
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_INT 1
71687: PUSH
71688: LD_INT 1
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: PUSH
71695: LD_INT 0
71697: PUSH
71698: LD_INT 1
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: LD_INT 1
71707: NEG
71708: PUSH
71709: LD_INT 0
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: PUSH
71716: LD_INT 1
71718: NEG
71719: PUSH
71720: LD_INT 1
71722: NEG
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: PUSH
71728: EMPTY
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71737: LD_ADDR_VAR 0 62
71741: PUSH
71742: LD_INT 0
71744: PUSH
71745: LD_INT 0
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: LD_INT 0
71754: PUSH
71755: LD_INT 1
71757: NEG
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: LD_INT 1
71765: PUSH
71766: LD_INT 0
71768: PUSH
71769: EMPTY
71770: LIST
71771: LIST
71772: PUSH
71773: LD_INT 1
71775: PUSH
71776: LD_INT 1
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: PUSH
71783: LD_INT 0
71785: PUSH
71786: LD_INT 1
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: PUSH
71793: LD_INT 1
71795: NEG
71796: PUSH
71797: LD_INT 0
71799: PUSH
71800: EMPTY
71801: LIST
71802: LIST
71803: PUSH
71804: LD_INT 1
71806: NEG
71807: PUSH
71808: LD_INT 1
71810: NEG
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: PUSH
71816: EMPTY
71817: LIST
71818: LIST
71819: LIST
71820: LIST
71821: LIST
71822: LIST
71823: LIST
71824: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71825: LD_ADDR_VAR 0 63
71829: PUSH
71830: LD_INT 0
71832: PUSH
71833: LD_INT 0
71835: PUSH
71836: EMPTY
71837: LIST
71838: LIST
71839: PUSH
71840: LD_INT 0
71842: PUSH
71843: LD_INT 1
71845: NEG
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: PUSH
71851: LD_INT 1
71853: PUSH
71854: LD_INT 0
71856: PUSH
71857: EMPTY
71858: LIST
71859: LIST
71860: PUSH
71861: LD_INT 1
71863: PUSH
71864: LD_INT 1
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: PUSH
71871: LD_INT 0
71873: PUSH
71874: LD_INT 1
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PUSH
71881: LD_INT 1
71883: NEG
71884: PUSH
71885: LD_INT 0
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: PUSH
71892: LD_INT 1
71894: NEG
71895: PUSH
71896: LD_INT 1
71898: NEG
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: LIST
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71913: LD_ADDR_VAR 0 64
71917: PUSH
71918: LD_INT 0
71920: PUSH
71921: LD_INT 0
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: PUSH
71928: LD_INT 0
71930: PUSH
71931: LD_INT 1
71933: NEG
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: LD_INT 1
71941: PUSH
71942: LD_INT 0
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PUSH
71949: LD_INT 1
71951: PUSH
71952: LD_INT 1
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PUSH
71959: LD_INT 0
71961: PUSH
71962: LD_INT 1
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: PUSH
71969: LD_INT 1
71971: NEG
71972: PUSH
71973: LD_INT 0
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 1
71982: NEG
71983: PUSH
71984: LD_INT 1
71986: NEG
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: LIST
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: ST_TO_ADDR
// end ; 1 :
72001: GO 77898
72003: LD_INT 1
72005: DOUBLE
72006: EQUAL
72007: IFTRUE 72011
72009: GO 74634
72011: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72012: LD_ADDR_VAR 0 11
72016: PUSH
72017: LD_INT 1
72019: NEG
72020: PUSH
72021: LD_INT 3
72023: NEG
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: PUSH
72029: LD_INT 0
72031: PUSH
72032: LD_INT 3
72034: NEG
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: LD_INT 1
72042: PUSH
72043: LD_INT 2
72045: NEG
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: LIST
72055: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72056: LD_ADDR_VAR 0 12
72060: PUSH
72061: LD_INT 2
72063: PUSH
72064: LD_INT 1
72066: NEG
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: PUSH
72072: LD_INT 3
72074: PUSH
72075: LD_INT 0
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: PUSH
72082: LD_INT 3
72084: PUSH
72085: LD_INT 1
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: LIST
72096: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72097: LD_ADDR_VAR 0 13
72101: PUSH
72102: LD_INT 3
72104: PUSH
72105: LD_INT 2
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: PUSH
72112: LD_INT 3
72114: PUSH
72115: LD_INT 3
72117: PUSH
72118: EMPTY
72119: LIST
72120: LIST
72121: PUSH
72122: LD_INT 2
72124: PUSH
72125: LD_INT 3
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: LIST
72136: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72137: LD_ADDR_VAR 0 14
72141: PUSH
72142: LD_INT 1
72144: PUSH
72145: LD_INT 3
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: PUSH
72152: LD_INT 0
72154: PUSH
72155: LD_INT 3
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: LD_INT 1
72164: NEG
72165: PUSH
72166: LD_INT 2
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: PUSH
72173: EMPTY
72174: LIST
72175: LIST
72176: LIST
72177: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72178: LD_ADDR_VAR 0 15
72182: PUSH
72183: LD_INT 2
72185: NEG
72186: PUSH
72187: LD_INT 1
72189: PUSH
72190: EMPTY
72191: LIST
72192: LIST
72193: PUSH
72194: LD_INT 3
72196: NEG
72197: PUSH
72198: LD_INT 0
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: PUSH
72205: LD_INT 3
72207: NEG
72208: PUSH
72209: LD_INT 1
72211: NEG
72212: PUSH
72213: EMPTY
72214: LIST
72215: LIST
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: LIST
72221: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72222: LD_ADDR_VAR 0 16
72226: PUSH
72227: LD_INT 2
72229: NEG
72230: PUSH
72231: LD_INT 3
72233: NEG
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: PUSH
72239: LD_INT 3
72241: NEG
72242: PUSH
72243: LD_INT 2
72245: NEG
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: PUSH
72251: LD_INT 3
72253: NEG
72254: PUSH
72255: LD_INT 3
72257: NEG
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: LIST
72267: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72268: LD_ADDR_VAR 0 17
72272: PUSH
72273: LD_INT 1
72275: NEG
72276: PUSH
72277: LD_INT 3
72279: NEG
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: LD_INT 0
72287: PUSH
72288: LD_INT 3
72290: NEG
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: PUSH
72296: LD_INT 1
72298: PUSH
72299: LD_INT 2
72301: NEG
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: LIST
72311: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72312: LD_ADDR_VAR 0 18
72316: PUSH
72317: LD_INT 2
72319: PUSH
72320: LD_INT 1
72322: NEG
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PUSH
72328: LD_INT 3
72330: PUSH
72331: LD_INT 0
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: LD_INT 3
72340: PUSH
72341: LD_INT 1
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PUSH
72348: EMPTY
72349: LIST
72350: LIST
72351: LIST
72352: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72353: LD_ADDR_VAR 0 19
72357: PUSH
72358: LD_INT 3
72360: PUSH
72361: LD_INT 2
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 3
72370: PUSH
72371: LD_INT 3
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 2
72380: PUSH
72381: LD_INT 3
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: PUSH
72388: EMPTY
72389: LIST
72390: LIST
72391: LIST
72392: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72393: LD_ADDR_VAR 0 20
72397: PUSH
72398: LD_INT 1
72400: PUSH
72401: LD_INT 3
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 0
72410: PUSH
72411: LD_INT 3
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: PUSH
72418: LD_INT 1
72420: NEG
72421: PUSH
72422: LD_INT 2
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: EMPTY
72430: LIST
72431: LIST
72432: LIST
72433: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72434: LD_ADDR_VAR 0 21
72438: PUSH
72439: LD_INT 2
72441: NEG
72442: PUSH
72443: LD_INT 1
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: PUSH
72450: LD_INT 3
72452: NEG
72453: PUSH
72454: LD_INT 0
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 3
72463: NEG
72464: PUSH
72465: LD_INT 1
72467: NEG
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: LIST
72477: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72478: LD_ADDR_VAR 0 22
72482: PUSH
72483: LD_INT 2
72485: NEG
72486: PUSH
72487: LD_INT 3
72489: NEG
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: PUSH
72495: LD_INT 3
72497: NEG
72498: PUSH
72499: LD_INT 2
72501: NEG
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: PUSH
72507: LD_INT 3
72509: NEG
72510: PUSH
72511: LD_INT 3
72513: NEG
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: PUSH
72519: EMPTY
72520: LIST
72521: LIST
72522: LIST
72523: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
72524: LD_ADDR_VAR 0 23
72528: PUSH
72529: LD_INT 0
72531: PUSH
72532: LD_INT 3
72534: NEG
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_INT 1
72542: NEG
72543: PUSH
72544: LD_INT 4
72546: NEG
72547: PUSH
72548: EMPTY
72549: LIST
72550: LIST
72551: PUSH
72552: LD_INT 1
72554: PUSH
72555: LD_INT 3
72557: NEG
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: PUSH
72563: EMPTY
72564: LIST
72565: LIST
72566: LIST
72567: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
72568: LD_ADDR_VAR 0 24
72572: PUSH
72573: LD_INT 3
72575: PUSH
72576: LD_INT 0
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PUSH
72583: LD_INT 3
72585: PUSH
72586: LD_INT 1
72588: NEG
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PUSH
72594: LD_INT 4
72596: PUSH
72597: LD_INT 1
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: LIST
72608: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
72609: LD_ADDR_VAR 0 25
72613: PUSH
72614: LD_INT 3
72616: PUSH
72617: LD_INT 3
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: PUSH
72624: LD_INT 4
72626: PUSH
72627: LD_INT 3
72629: PUSH
72630: EMPTY
72631: LIST
72632: LIST
72633: PUSH
72634: LD_INT 3
72636: PUSH
72637: LD_INT 4
72639: PUSH
72640: EMPTY
72641: LIST
72642: LIST
72643: PUSH
72644: EMPTY
72645: LIST
72646: LIST
72647: LIST
72648: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
72649: LD_ADDR_VAR 0 26
72653: PUSH
72654: LD_INT 0
72656: PUSH
72657: LD_INT 3
72659: PUSH
72660: EMPTY
72661: LIST
72662: LIST
72663: PUSH
72664: LD_INT 1
72666: PUSH
72667: LD_INT 4
72669: PUSH
72670: EMPTY
72671: LIST
72672: LIST
72673: PUSH
72674: LD_INT 1
72676: NEG
72677: PUSH
72678: LD_INT 3
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PUSH
72685: EMPTY
72686: LIST
72687: LIST
72688: LIST
72689: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
72690: LD_ADDR_VAR 0 27
72694: PUSH
72695: LD_INT 3
72697: NEG
72698: PUSH
72699: LD_INT 0
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: PUSH
72706: LD_INT 3
72708: NEG
72709: PUSH
72710: LD_INT 1
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PUSH
72717: LD_INT 4
72719: NEG
72720: PUSH
72721: LD_INT 1
72723: NEG
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: LIST
72733: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
72734: LD_ADDR_VAR 0 28
72738: PUSH
72739: LD_INT 3
72741: NEG
72742: PUSH
72743: LD_INT 3
72745: NEG
72746: PUSH
72747: EMPTY
72748: LIST
72749: LIST
72750: PUSH
72751: LD_INT 3
72753: NEG
72754: PUSH
72755: LD_INT 4
72757: NEG
72758: PUSH
72759: EMPTY
72760: LIST
72761: LIST
72762: PUSH
72763: LD_INT 4
72765: NEG
72766: PUSH
72767: LD_INT 3
72769: NEG
72770: PUSH
72771: EMPTY
72772: LIST
72773: LIST
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: LIST
72779: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
72780: LD_ADDR_VAR 0 29
72784: PUSH
72785: LD_INT 1
72787: NEG
72788: PUSH
72789: LD_INT 3
72791: NEG
72792: PUSH
72793: EMPTY
72794: LIST
72795: LIST
72796: PUSH
72797: LD_INT 0
72799: PUSH
72800: LD_INT 3
72802: NEG
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 1
72810: PUSH
72811: LD_INT 2
72813: NEG
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: PUSH
72819: LD_INT 1
72821: NEG
72822: PUSH
72823: LD_INT 4
72825: NEG
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: PUSH
72831: LD_INT 0
72833: PUSH
72834: LD_INT 4
72836: NEG
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: PUSH
72842: LD_INT 1
72844: PUSH
72845: LD_INT 3
72847: NEG
72848: PUSH
72849: EMPTY
72850: LIST
72851: LIST
72852: PUSH
72853: LD_INT 1
72855: NEG
72856: PUSH
72857: LD_INT 5
72859: NEG
72860: PUSH
72861: EMPTY
72862: LIST
72863: LIST
72864: PUSH
72865: LD_INT 0
72867: PUSH
72868: LD_INT 5
72870: NEG
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PUSH
72876: LD_INT 1
72878: PUSH
72879: LD_INT 4
72881: NEG
72882: PUSH
72883: EMPTY
72884: LIST
72885: LIST
72886: PUSH
72887: LD_INT 1
72889: NEG
72890: PUSH
72891: LD_INT 6
72893: NEG
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PUSH
72899: LD_INT 0
72901: PUSH
72902: LD_INT 6
72904: NEG
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: PUSH
72910: LD_INT 1
72912: PUSH
72913: LD_INT 5
72915: NEG
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: PUSH
72921: EMPTY
72922: LIST
72923: LIST
72924: LIST
72925: LIST
72926: LIST
72927: LIST
72928: LIST
72929: LIST
72930: LIST
72931: LIST
72932: LIST
72933: LIST
72934: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
72935: LD_ADDR_VAR 0 30
72939: PUSH
72940: LD_INT 2
72942: PUSH
72943: LD_INT 1
72945: NEG
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PUSH
72951: LD_INT 3
72953: PUSH
72954: LD_INT 0
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 3
72963: PUSH
72964: LD_INT 1
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: LD_INT 3
72973: PUSH
72974: LD_INT 1
72976: NEG
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PUSH
72982: LD_INT 4
72984: PUSH
72985: LD_INT 0
72987: PUSH
72988: EMPTY
72989: LIST
72990: LIST
72991: PUSH
72992: LD_INT 4
72994: PUSH
72995: LD_INT 1
72997: PUSH
72998: EMPTY
72999: LIST
73000: LIST
73001: PUSH
73002: LD_INT 4
73004: PUSH
73005: LD_INT 1
73007: NEG
73008: PUSH
73009: EMPTY
73010: LIST
73011: LIST
73012: PUSH
73013: LD_INT 5
73015: PUSH
73016: LD_INT 0
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: PUSH
73023: LD_INT 5
73025: PUSH
73026: LD_INT 1
73028: PUSH
73029: EMPTY
73030: LIST
73031: LIST
73032: PUSH
73033: LD_INT 5
73035: PUSH
73036: LD_INT 1
73038: NEG
73039: PUSH
73040: EMPTY
73041: LIST
73042: LIST
73043: PUSH
73044: LD_INT 6
73046: PUSH
73047: LD_INT 0
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: PUSH
73054: LD_INT 6
73056: PUSH
73057: LD_INT 1
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: PUSH
73064: EMPTY
73065: LIST
73066: LIST
73067: LIST
73068: LIST
73069: LIST
73070: LIST
73071: LIST
73072: LIST
73073: LIST
73074: LIST
73075: LIST
73076: LIST
73077: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
73078: LD_ADDR_VAR 0 31
73082: PUSH
73083: LD_INT 3
73085: PUSH
73086: LD_INT 2
73088: PUSH
73089: EMPTY
73090: LIST
73091: LIST
73092: PUSH
73093: LD_INT 3
73095: PUSH
73096: LD_INT 3
73098: PUSH
73099: EMPTY
73100: LIST
73101: LIST
73102: PUSH
73103: LD_INT 2
73105: PUSH
73106: LD_INT 3
73108: PUSH
73109: EMPTY
73110: LIST
73111: LIST
73112: PUSH
73113: LD_INT 4
73115: PUSH
73116: LD_INT 3
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: PUSH
73123: LD_INT 4
73125: PUSH
73126: LD_INT 4
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: PUSH
73133: LD_INT 3
73135: PUSH
73136: LD_INT 4
73138: PUSH
73139: EMPTY
73140: LIST
73141: LIST
73142: PUSH
73143: LD_INT 5
73145: PUSH
73146: LD_INT 4
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: PUSH
73153: LD_INT 5
73155: PUSH
73156: LD_INT 5
73158: PUSH
73159: EMPTY
73160: LIST
73161: LIST
73162: PUSH
73163: LD_INT 4
73165: PUSH
73166: LD_INT 5
73168: PUSH
73169: EMPTY
73170: LIST
73171: LIST
73172: PUSH
73173: LD_INT 6
73175: PUSH
73176: LD_INT 5
73178: PUSH
73179: EMPTY
73180: LIST
73181: LIST
73182: PUSH
73183: LD_INT 6
73185: PUSH
73186: LD_INT 6
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: PUSH
73193: LD_INT 5
73195: PUSH
73196: LD_INT 6
73198: PUSH
73199: EMPTY
73200: LIST
73201: LIST
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
73217: LD_ADDR_VAR 0 32
73221: PUSH
73222: LD_INT 1
73224: PUSH
73225: LD_INT 3
73227: PUSH
73228: EMPTY
73229: LIST
73230: LIST
73231: PUSH
73232: LD_INT 0
73234: PUSH
73235: LD_INT 3
73237: PUSH
73238: EMPTY
73239: LIST
73240: LIST
73241: PUSH
73242: LD_INT 1
73244: NEG
73245: PUSH
73246: LD_INT 2
73248: PUSH
73249: EMPTY
73250: LIST
73251: LIST
73252: PUSH
73253: LD_INT 1
73255: PUSH
73256: LD_INT 4
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: PUSH
73263: LD_INT 0
73265: PUSH
73266: LD_INT 4
73268: PUSH
73269: EMPTY
73270: LIST
73271: LIST
73272: PUSH
73273: LD_INT 1
73275: NEG
73276: PUSH
73277: LD_INT 3
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: PUSH
73284: LD_INT 1
73286: PUSH
73287: LD_INT 5
73289: PUSH
73290: EMPTY
73291: LIST
73292: LIST
73293: PUSH
73294: LD_INT 0
73296: PUSH
73297: LD_INT 5
73299: PUSH
73300: EMPTY
73301: LIST
73302: LIST
73303: PUSH
73304: LD_INT 1
73306: NEG
73307: PUSH
73308: LD_INT 4
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: PUSH
73315: LD_INT 1
73317: PUSH
73318: LD_INT 6
73320: PUSH
73321: EMPTY
73322: LIST
73323: LIST
73324: PUSH
73325: LD_INT 0
73327: PUSH
73328: LD_INT 6
73330: PUSH
73331: EMPTY
73332: LIST
73333: LIST
73334: PUSH
73335: LD_INT 1
73337: NEG
73338: PUSH
73339: LD_INT 5
73341: PUSH
73342: EMPTY
73343: LIST
73344: LIST
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: LIST
73357: LIST
73358: LIST
73359: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
73360: LD_ADDR_VAR 0 33
73364: PUSH
73365: LD_INT 2
73367: NEG
73368: PUSH
73369: LD_INT 1
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: PUSH
73376: LD_INT 3
73378: NEG
73379: PUSH
73380: LD_INT 0
73382: PUSH
73383: EMPTY
73384: LIST
73385: LIST
73386: PUSH
73387: LD_INT 3
73389: NEG
73390: PUSH
73391: LD_INT 1
73393: NEG
73394: PUSH
73395: EMPTY
73396: LIST
73397: LIST
73398: PUSH
73399: LD_INT 3
73401: NEG
73402: PUSH
73403: LD_INT 1
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PUSH
73410: LD_INT 4
73412: NEG
73413: PUSH
73414: LD_INT 0
73416: PUSH
73417: EMPTY
73418: LIST
73419: LIST
73420: PUSH
73421: LD_INT 4
73423: NEG
73424: PUSH
73425: LD_INT 1
73427: NEG
73428: PUSH
73429: EMPTY
73430: LIST
73431: LIST
73432: PUSH
73433: LD_INT 4
73435: NEG
73436: PUSH
73437: LD_INT 1
73439: PUSH
73440: EMPTY
73441: LIST
73442: LIST
73443: PUSH
73444: LD_INT 5
73446: NEG
73447: PUSH
73448: LD_INT 0
73450: PUSH
73451: EMPTY
73452: LIST
73453: LIST
73454: PUSH
73455: LD_INT 5
73457: NEG
73458: PUSH
73459: LD_INT 1
73461: NEG
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: PUSH
73467: LD_INT 5
73469: NEG
73470: PUSH
73471: LD_INT 1
73473: PUSH
73474: EMPTY
73475: LIST
73476: LIST
73477: PUSH
73478: LD_INT 6
73480: NEG
73481: PUSH
73482: LD_INT 0
73484: PUSH
73485: EMPTY
73486: LIST
73487: LIST
73488: PUSH
73489: LD_INT 6
73491: NEG
73492: PUSH
73493: LD_INT 1
73495: NEG
73496: PUSH
73497: EMPTY
73498: LIST
73499: LIST
73500: PUSH
73501: EMPTY
73502: LIST
73503: LIST
73504: LIST
73505: LIST
73506: LIST
73507: LIST
73508: LIST
73509: LIST
73510: LIST
73511: LIST
73512: LIST
73513: LIST
73514: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
73515: LD_ADDR_VAR 0 34
73519: PUSH
73520: LD_INT 2
73522: NEG
73523: PUSH
73524: LD_INT 3
73526: NEG
73527: PUSH
73528: EMPTY
73529: LIST
73530: LIST
73531: PUSH
73532: LD_INT 3
73534: NEG
73535: PUSH
73536: LD_INT 2
73538: NEG
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: PUSH
73544: LD_INT 3
73546: NEG
73547: PUSH
73548: LD_INT 3
73550: NEG
73551: PUSH
73552: EMPTY
73553: LIST
73554: LIST
73555: PUSH
73556: LD_INT 3
73558: NEG
73559: PUSH
73560: LD_INT 4
73562: NEG
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: PUSH
73568: LD_INT 4
73570: NEG
73571: PUSH
73572: LD_INT 3
73574: NEG
73575: PUSH
73576: EMPTY
73577: LIST
73578: LIST
73579: PUSH
73580: LD_INT 4
73582: NEG
73583: PUSH
73584: LD_INT 4
73586: NEG
73587: PUSH
73588: EMPTY
73589: LIST
73590: LIST
73591: PUSH
73592: LD_INT 4
73594: NEG
73595: PUSH
73596: LD_INT 5
73598: NEG
73599: PUSH
73600: EMPTY
73601: LIST
73602: LIST
73603: PUSH
73604: LD_INT 5
73606: NEG
73607: PUSH
73608: LD_INT 4
73610: NEG
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: PUSH
73616: LD_INT 5
73618: NEG
73619: PUSH
73620: LD_INT 5
73622: NEG
73623: PUSH
73624: EMPTY
73625: LIST
73626: LIST
73627: PUSH
73628: LD_INT 5
73630: NEG
73631: PUSH
73632: LD_INT 6
73634: NEG
73635: PUSH
73636: EMPTY
73637: LIST
73638: LIST
73639: PUSH
73640: LD_INT 6
73642: NEG
73643: PUSH
73644: LD_INT 5
73646: NEG
73647: PUSH
73648: EMPTY
73649: LIST
73650: LIST
73651: PUSH
73652: LD_INT 6
73654: NEG
73655: PUSH
73656: LD_INT 6
73658: NEG
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: PUSH
73664: EMPTY
73665: LIST
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
73678: LD_ADDR_VAR 0 41
73682: PUSH
73683: LD_INT 0
73685: PUSH
73686: LD_INT 2
73688: NEG
73689: PUSH
73690: EMPTY
73691: LIST
73692: LIST
73693: PUSH
73694: LD_INT 1
73696: NEG
73697: PUSH
73698: LD_INT 3
73700: NEG
73701: PUSH
73702: EMPTY
73703: LIST
73704: LIST
73705: PUSH
73706: LD_INT 1
73708: PUSH
73709: LD_INT 2
73711: NEG
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: PUSH
73717: EMPTY
73718: LIST
73719: LIST
73720: LIST
73721: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
73722: LD_ADDR_VAR 0 42
73726: PUSH
73727: LD_INT 2
73729: PUSH
73730: LD_INT 0
73732: PUSH
73733: EMPTY
73734: LIST
73735: LIST
73736: PUSH
73737: LD_INT 2
73739: PUSH
73740: LD_INT 1
73742: NEG
73743: PUSH
73744: EMPTY
73745: LIST
73746: LIST
73747: PUSH
73748: LD_INT 3
73750: PUSH
73751: LD_INT 1
73753: PUSH
73754: EMPTY
73755: LIST
73756: LIST
73757: PUSH
73758: EMPTY
73759: LIST
73760: LIST
73761: LIST
73762: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
73763: LD_ADDR_VAR 0 43
73767: PUSH
73768: LD_INT 2
73770: PUSH
73771: LD_INT 2
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: PUSH
73778: LD_INT 3
73780: PUSH
73781: LD_INT 2
73783: PUSH
73784: EMPTY
73785: LIST
73786: LIST
73787: PUSH
73788: LD_INT 2
73790: PUSH
73791: LD_INT 3
73793: PUSH
73794: EMPTY
73795: LIST
73796: LIST
73797: PUSH
73798: EMPTY
73799: LIST
73800: LIST
73801: LIST
73802: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
73803: LD_ADDR_VAR 0 44
73807: PUSH
73808: LD_INT 0
73810: PUSH
73811: LD_INT 2
73813: PUSH
73814: EMPTY
73815: LIST
73816: LIST
73817: PUSH
73818: LD_INT 1
73820: PUSH
73821: LD_INT 3
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: PUSH
73828: LD_INT 1
73830: NEG
73831: PUSH
73832: LD_INT 2
73834: PUSH
73835: EMPTY
73836: LIST
73837: LIST
73838: PUSH
73839: EMPTY
73840: LIST
73841: LIST
73842: LIST
73843: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
73844: LD_ADDR_VAR 0 45
73848: PUSH
73849: LD_INT 2
73851: NEG
73852: PUSH
73853: LD_INT 0
73855: PUSH
73856: EMPTY
73857: LIST
73858: LIST
73859: PUSH
73860: LD_INT 2
73862: NEG
73863: PUSH
73864: LD_INT 1
73866: PUSH
73867: EMPTY
73868: LIST
73869: LIST
73870: PUSH
73871: LD_INT 3
73873: NEG
73874: PUSH
73875: LD_INT 1
73877: NEG
73878: PUSH
73879: EMPTY
73880: LIST
73881: LIST
73882: PUSH
73883: EMPTY
73884: LIST
73885: LIST
73886: LIST
73887: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
73888: LD_ADDR_VAR 0 46
73892: PUSH
73893: LD_INT 2
73895: NEG
73896: PUSH
73897: LD_INT 2
73899: NEG
73900: PUSH
73901: EMPTY
73902: LIST
73903: LIST
73904: PUSH
73905: LD_INT 2
73907: NEG
73908: PUSH
73909: LD_INT 3
73911: NEG
73912: PUSH
73913: EMPTY
73914: LIST
73915: LIST
73916: PUSH
73917: LD_INT 3
73919: NEG
73920: PUSH
73921: LD_INT 2
73923: NEG
73924: PUSH
73925: EMPTY
73926: LIST
73927: LIST
73928: PUSH
73929: EMPTY
73930: LIST
73931: LIST
73932: LIST
73933: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
73934: LD_ADDR_VAR 0 47
73938: PUSH
73939: LD_INT 2
73941: NEG
73942: PUSH
73943: LD_INT 3
73945: NEG
73946: PUSH
73947: EMPTY
73948: LIST
73949: LIST
73950: PUSH
73951: LD_INT 1
73953: NEG
73954: PUSH
73955: LD_INT 3
73957: NEG
73958: PUSH
73959: EMPTY
73960: LIST
73961: LIST
73962: PUSH
73963: EMPTY
73964: LIST
73965: LIST
73966: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
73967: LD_ADDR_VAR 0 48
73971: PUSH
73972: LD_INT 1
73974: PUSH
73975: LD_INT 2
73977: NEG
73978: PUSH
73979: EMPTY
73980: LIST
73981: LIST
73982: PUSH
73983: LD_INT 2
73985: PUSH
73986: LD_INT 1
73988: NEG
73989: PUSH
73990: EMPTY
73991: LIST
73992: LIST
73993: PUSH
73994: EMPTY
73995: LIST
73996: LIST
73997: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
73998: LD_ADDR_VAR 0 49
74002: PUSH
74003: LD_INT 3
74005: PUSH
74006: LD_INT 1
74008: PUSH
74009: EMPTY
74010: LIST
74011: LIST
74012: PUSH
74013: LD_INT 3
74015: PUSH
74016: LD_INT 2
74018: PUSH
74019: EMPTY
74020: LIST
74021: LIST
74022: PUSH
74023: EMPTY
74024: LIST
74025: LIST
74026: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
74027: LD_ADDR_VAR 0 50
74031: PUSH
74032: LD_INT 2
74034: PUSH
74035: LD_INT 3
74037: PUSH
74038: EMPTY
74039: LIST
74040: LIST
74041: PUSH
74042: LD_INT 1
74044: PUSH
74045: LD_INT 3
74047: PUSH
74048: EMPTY
74049: LIST
74050: LIST
74051: PUSH
74052: EMPTY
74053: LIST
74054: LIST
74055: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
74056: LD_ADDR_VAR 0 51
74060: PUSH
74061: LD_INT 1
74063: NEG
74064: PUSH
74065: LD_INT 2
74067: PUSH
74068: EMPTY
74069: LIST
74070: LIST
74071: PUSH
74072: LD_INT 2
74074: NEG
74075: PUSH
74076: LD_INT 1
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: PUSH
74083: EMPTY
74084: LIST
74085: LIST
74086: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
74087: LD_ADDR_VAR 0 52
74091: PUSH
74092: LD_INT 3
74094: NEG
74095: PUSH
74096: LD_INT 1
74098: NEG
74099: PUSH
74100: EMPTY
74101: LIST
74102: LIST
74103: PUSH
74104: LD_INT 3
74106: NEG
74107: PUSH
74108: LD_INT 2
74110: NEG
74111: PUSH
74112: EMPTY
74113: LIST
74114: LIST
74115: PUSH
74116: EMPTY
74117: LIST
74118: LIST
74119: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
74120: LD_ADDR_VAR 0 53
74124: PUSH
74125: LD_INT 1
74127: NEG
74128: PUSH
74129: LD_INT 3
74131: NEG
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: PUSH
74137: LD_INT 0
74139: PUSH
74140: LD_INT 3
74142: NEG
74143: PUSH
74144: EMPTY
74145: LIST
74146: LIST
74147: PUSH
74148: LD_INT 1
74150: PUSH
74151: LD_INT 2
74153: NEG
74154: PUSH
74155: EMPTY
74156: LIST
74157: LIST
74158: PUSH
74159: EMPTY
74160: LIST
74161: LIST
74162: LIST
74163: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
74164: LD_ADDR_VAR 0 54
74168: PUSH
74169: LD_INT 2
74171: PUSH
74172: LD_INT 1
74174: NEG
74175: PUSH
74176: EMPTY
74177: LIST
74178: LIST
74179: PUSH
74180: LD_INT 3
74182: PUSH
74183: LD_INT 0
74185: PUSH
74186: EMPTY
74187: LIST
74188: LIST
74189: PUSH
74190: LD_INT 3
74192: PUSH
74193: LD_INT 1
74195: PUSH
74196: EMPTY
74197: LIST
74198: LIST
74199: PUSH
74200: EMPTY
74201: LIST
74202: LIST
74203: LIST
74204: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
74205: LD_ADDR_VAR 0 55
74209: PUSH
74210: LD_INT 3
74212: PUSH
74213: LD_INT 2
74215: PUSH
74216: EMPTY
74217: LIST
74218: LIST
74219: PUSH
74220: LD_INT 3
74222: PUSH
74223: LD_INT 3
74225: PUSH
74226: EMPTY
74227: LIST
74228: LIST
74229: PUSH
74230: LD_INT 2
74232: PUSH
74233: LD_INT 3
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: LIST
74244: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74245: LD_ADDR_VAR 0 56
74249: PUSH
74250: LD_INT 1
74252: PUSH
74253: LD_INT 3
74255: PUSH
74256: EMPTY
74257: LIST
74258: LIST
74259: PUSH
74260: LD_INT 0
74262: PUSH
74263: LD_INT 3
74265: PUSH
74266: EMPTY
74267: LIST
74268: LIST
74269: PUSH
74270: LD_INT 1
74272: NEG
74273: PUSH
74274: LD_INT 2
74276: PUSH
74277: EMPTY
74278: LIST
74279: LIST
74280: PUSH
74281: EMPTY
74282: LIST
74283: LIST
74284: LIST
74285: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74286: LD_ADDR_VAR 0 57
74290: PUSH
74291: LD_INT 2
74293: NEG
74294: PUSH
74295: LD_INT 1
74297: PUSH
74298: EMPTY
74299: LIST
74300: LIST
74301: PUSH
74302: LD_INT 3
74304: NEG
74305: PUSH
74306: LD_INT 0
74308: PUSH
74309: EMPTY
74310: LIST
74311: LIST
74312: PUSH
74313: LD_INT 3
74315: NEG
74316: PUSH
74317: LD_INT 1
74319: NEG
74320: PUSH
74321: EMPTY
74322: LIST
74323: LIST
74324: PUSH
74325: EMPTY
74326: LIST
74327: LIST
74328: LIST
74329: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
74330: LD_ADDR_VAR 0 58
74334: PUSH
74335: LD_INT 2
74337: NEG
74338: PUSH
74339: LD_INT 3
74341: NEG
74342: PUSH
74343: EMPTY
74344: LIST
74345: LIST
74346: PUSH
74347: LD_INT 3
74349: NEG
74350: PUSH
74351: LD_INT 2
74353: NEG
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: PUSH
74359: LD_INT 3
74361: NEG
74362: PUSH
74363: LD_INT 3
74365: NEG
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: PUSH
74371: EMPTY
74372: LIST
74373: LIST
74374: LIST
74375: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
74376: LD_ADDR_VAR 0 59
74380: PUSH
74381: LD_INT 1
74383: NEG
74384: PUSH
74385: LD_INT 2
74387: NEG
74388: PUSH
74389: EMPTY
74390: LIST
74391: LIST
74392: PUSH
74393: LD_INT 0
74395: PUSH
74396: LD_INT 2
74398: NEG
74399: PUSH
74400: EMPTY
74401: LIST
74402: LIST
74403: PUSH
74404: LD_INT 1
74406: PUSH
74407: LD_INT 1
74409: NEG
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: PUSH
74415: EMPTY
74416: LIST
74417: LIST
74418: LIST
74419: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
74420: LD_ADDR_VAR 0 60
74424: PUSH
74425: LD_INT 1
74427: PUSH
74428: LD_INT 1
74430: NEG
74431: PUSH
74432: EMPTY
74433: LIST
74434: LIST
74435: PUSH
74436: LD_INT 2
74438: PUSH
74439: LD_INT 0
74441: PUSH
74442: EMPTY
74443: LIST
74444: LIST
74445: PUSH
74446: LD_INT 2
74448: PUSH
74449: LD_INT 1
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: PUSH
74456: EMPTY
74457: LIST
74458: LIST
74459: LIST
74460: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
74461: LD_ADDR_VAR 0 61
74465: PUSH
74466: LD_INT 2
74468: PUSH
74469: LD_INT 1
74471: PUSH
74472: EMPTY
74473: LIST
74474: LIST
74475: PUSH
74476: LD_INT 2
74478: PUSH
74479: LD_INT 2
74481: PUSH
74482: EMPTY
74483: LIST
74484: LIST
74485: PUSH
74486: LD_INT 1
74488: PUSH
74489: LD_INT 2
74491: PUSH
74492: EMPTY
74493: LIST
74494: LIST
74495: PUSH
74496: EMPTY
74497: LIST
74498: LIST
74499: LIST
74500: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
74501: LD_ADDR_VAR 0 62
74505: PUSH
74506: LD_INT 1
74508: PUSH
74509: LD_INT 2
74511: PUSH
74512: EMPTY
74513: LIST
74514: LIST
74515: PUSH
74516: LD_INT 0
74518: PUSH
74519: LD_INT 2
74521: PUSH
74522: EMPTY
74523: LIST
74524: LIST
74525: PUSH
74526: LD_INT 1
74528: NEG
74529: PUSH
74530: LD_INT 1
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: PUSH
74537: EMPTY
74538: LIST
74539: LIST
74540: LIST
74541: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
74542: LD_ADDR_VAR 0 63
74546: PUSH
74547: LD_INT 1
74549: NEG
74550: PUSH
74551: LD_INT 1
74553: PUSH
74554: EMPTY
74555: LIST
74556: LIST
74557: PUSH
74558: LD_INT 2
74560: NEG
74561: PUSH
74562: LD_INT 0
74564: PUSH
74565: EMPTY
74566: LIST
74567: LIST
74568: PUSH
74569: LD_INT 2
74571: NEG
74572: PUSH
74573: LD_INT 1
74575: NEG
74576: PUSH
74577: EMPTY
74578: LIST
74579: LIST
74580: PUSH
74581: EMPTY
74582: LIST
74583: LIST
74584: LIST
74585: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74586: LD_ADDR_VAR 0 64
74590: PUSH
74591: LD_INT 1
74593: NEG
74594: PUSH
74595: LD_INT 2
74597: NEG
74598: PUSH
74599: EMPTY
74600: LIST
74601: LIST
74602: PUSH
74603: LD_INT 2
74605: NEG
74606: PUSH
74607: LD_INT 1
74609: NEG
74610: PUSH
74611: EMPTY
74612: LIST
74613: LIST
74614: PUSH
74615: LD_INT 2
74617: NEG
74618: PUSH
74619: LD_INT 2
74621: NEG
74622: PUSH
74623: EMPTY
74624: LIST
74625: LIST
74626: PUSH
74627: EMPTY
74628: LIST
74629: LIST
74630: LIST
74631: ST_TO_ADDR
// end ; 2 :
74632: GO 77898
74634: LD_INT 2
74636: DOUBLE
74637: EQUAL
74638: IFTRUE 74642
74640: GO 77897
74642: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
74643: LD_ADDR_VAR 0 29
74647: PUSH
74648: LD_INT 4
74650: PUSH
74651: LD_INT 0
74653: PUSH
74654: EMPTY
74655: LIST
74656: LIST
74657: PUSH
74658: LD_INT 4
74660: PUSH
74661: LD_INT 1
74663: NEG
74664: PUSH
74665: EMPTY
74666: LIST
74667: LIST
74668: PUSH
74669: LD_INT 5
74671: PUSH
74672: LD_INT 0
74674: PUSH
74675: EMPTY
74676: LIST
74677: LIST
74678: PUSH
74679: LD_INT 5
74681: PUSH
74682: LD_INT 1
74684: PUSH
74685: EMPTY
74686: LIST
74687: LIST
74688: PUSH
74689: LD_INT 4
74691: PUSH
74692: LD_INT 1
74694: PUSH
74695: EMPTY
74696: LIST
74697: LIST
74698: PUSH
74699: LD_INT 3
74701: PUSH
74702: LD_INT 0
74704: PUSH
74705: EMPTY
74706: LIST
74707: LIST
74708: PUSH
74709: LD_INT 3
74711: PUSH
74712: LD_INT 1
74714: NEG
74715: PUSH
74716: EMPTY
74717: LIST
74718: LIST
74719: PUSH
74720: LD_INT 3
74722: PUSH
74723: LD_INT 2
74725: NEG
74726: PUSH
74727: EMPTY
74728: LIST
74729: LIST
74730: PUSH
74731: LD_INT 5
74733: PUSH
74734: LD_INT 2
74736: PUSH
74737: EMPTY
74738: LIST
74739: LIST
74740: PUSH
74741: LD_INT 3
74743: PUSH
74744: LD_INT 3
74746: PUSH
74747: EMPTY
74748: LIST
74749: LIST
74750: PUSH
74751: LD_INT 3
74753: PUSH
74754: LD_INT 2
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: PUSH
74761: LD_INT 4
74763: PUSH
74764: LD_INT 3
74766: PUSH
74767: EMPTY
74768: LIST
74769: LIST
74770: PUSH
74771: LD_INT 4
74773: PUSH
74774: LD_INT 4
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: PUSH
74781: LD_INT 3
74783: PUSH
74784: LD_INT 4
74786: PUSH
74787: EMPTY
74788: LIST
74789: LIST
74790: PUSH
74791: LD_INT 2
74793: PUSH
74794: LD_INT 3
74796: PUSH
74797: EMPTY
74798: LIST
74799: LIST
74800: PUSH
74801: LD_INT 2
74803: PUSH
74804: LD_INT 2
74806: PUSH
74807: EMPTY
74808: LIST
74809: LIST
74810: PUSH
74811: LD_INT 4
74813: PUSH
74814: LD_INT 2
74816: PUSH
74817: EMPTY
74818: LIST
74819: LIST
74820: PUSH
74821: LD_INT 2
74823: PUSH
74824: LD_INT 4
74826: PUSH
74827: EMPTY
74828: LIST
74829: LIST
74830: PUSH
74831: LD_INT 0
74833: PUSH
74834: LD_INT 4
74836: PUSH
74837: EMPTY
74838: LIST
74839: LIST
74840: PUSH
74841: LD_INT 0
74843: PUSH
74844: LD_INT 3
74846: PUSH
74847: EMPTY
74848: LIST
74849: LIST
74850: PUSH
74851: LD_INT 1
74853: PUSH
74854: LD_INT 4
74856: PUSH
74857: EMPTY
74858: LIST
74859: LIST
74860: PUSH
74861: LD_INT 1
74863: PUSH
74864: LD_INT 5
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: PUSH
74871: LD_INT 0
74873: PUSH
74874: LD_INT 5
74876: PUSH
74877: EMPTY
74878: LIST
74879: LIST
74880: PUSH
74881: LD_INT 1
74883: NEG
74884: PUSH
74885: LD_INT 4
74887: PUSH
74888: EMPTY
74889: LIST
74890: LIST
74891: PUSH
74892: LD_INT 1
74894: NEG
74895: PUSH
74896: LD_INT 3
74898: PUSH
74899: EMPTY
74900: LIST
74901: LIST
74902: PUSH
74903: LD_INT 2
74905: PUSH
74906: LD_INT 5
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: PUSH
74913: LD_INT 2
74915: NEG
74916: PUSH
74917: LD_INT 3
74919: PUSH
74920: EMPTY
74921: LIST
74922: LIST
74923: PUSH
74924: LD_INT 3
74926: NEG
74927: PUSH
74928: LD_INT 0
74930: PUSH
74931: EMPTY
74932: LIST
74933: LIST
74934: PUSH
74935: LD_INT 3
74937: NEG
74938: PUSH
74939: LD_INT 1
74941: NEG
74942: PUSH
74943: EMPTY
74944: LIST
74945: LIST
74946: PUSH
74947: LD_INT 2
74949: NEG
74950: PUSH
74951: LD_INT 0
74953: PUSH
74954: EMPTY
74955: LIST
74956: LIST
74957: PUSH
74958: LD_INT 2
74960: NEG
74961: PUSH
74962: LD_INT 1
74964: PUSH
74965: EMPTY
74966: LIST
74967: LIST
74968: PUSH
74969: LD_INT 3
74971: NEG
74972: PUSH
74973: LD_INT 1
74975: PUSH
74976: EMPTY
74977: LIST
74978: LIST
74979: PUSH
74980: LD_INT 4
74982: NEG
74983: PUSH
74984: LD_INT 0
74986: PUSH
74987: EMPTY
74988: LIST
74989: LIST
74990: PUSH
74991: LD_INT 4
74993: NEG
74994: PUSH
74995: LD_INT 1
74997: NEG
74998: PUSH
74999: EMPTY
75000: LIST
75001: LIST
75002: PUSH
75003: LD_INT 4
75005: NEG
75006: PUSH
75007: LD_INT 2
75009: NEG
75010: PUSH
75011: EMPTY
75012: LIST
75013: LIST
75014: PUSH
75015: LD_INT 2
75017: NEG
75018: PUSH
75019: LD_INT 2
75021: PUSH
75022: EMPTY
75023: LIST
75024: LIST
75025: PUSH
75026: LD_INT 4
75028: NEG
75029: PUSH
75030: LD_INT 4
75032: NEG
75033: PUSH
75034: EMPTY
75035: LIST
75036: LIST
75037: PUSH
75038: LD_INT 4
75040: NEG
75041: PUSH
75042: LD_INT 5
75044: NEG
75045: PUSH
75046: EMPTY
75047: LIST
75048: LIST
75049: PUSH
75050: LD_INT 3
75052: NEG
75053: PUSH
75054: LD_INT 4
75056: NEG
75057: PUSH
75058: EMPTY
75059: LIST
75060: LIST
75061: PUSH
75062: LD_INT 3
75064: NEG
75065: PUSH
75066: LD_INT 3
75068: NEG
75069: PUSH
75070: EMPTY
75071: LIST
75072: LIST
75073: PUSH
75074: LD_INT 4
75076: NEG
75077: PUSH
75078: LD_INT 3
75080: NEG
75081: PUSH
75082: EMPTY
75083: LIST
75084: LIST
75085: PUSH
75086: LD_INT 5
75088: NEG
75089: PUSH
75090: LD_INT 4
75092: NEG
75093: PUSH
75094: EMPTY
75095: LIST
75096: LIST
75097: PUSH
75098: LD_INT 5
75100: NEG
75101: PUSH
75102: LD_INT 5
75104: NEG
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: PUSH
75110: LD_INT 3
75112: NEG
75113: PUSH
75114: LD_INT 5
75116: NEG
75117: PUSH
75118: EMPTY
75119: LIST
75120: LIST
75121: PUSH
75122: LD_INT 5
75124: NEG
75125: PUSH
75126: LD_INT 3
75128: NEG
75129: PUSH
75130: EMPTY
75131: LIST
75132: LIST
75133: PUSH
75134: EMPTY
75135: LIST
75136: LIST
75137: LIST
75138: LIST
75139: LIST
75140: LIST
75141: LIST
75142: LIST
75143: LIST
75144: LIST
75145: LIST
75146: LIST
75147: LIST
75148: LIST
75149: LIST
75150: LIST
75151: LIST
75152: LIST
75153: LIST
75154: LIST
75155: LIST
75156: LIST
75157: LIST
75158: LIST
75159: LIST
75160: LIST
75161: LIST
75162: LIST
75163: LIST
75164: LIST
75165: LIST
75166: LIST
75167: LIST
75168: LIST
75169: LIST
75170: LIST
75171: LIST
75172: LIST
75173: LIST
75174: LIST
75175: LIST
75176: LIST
75177: LIST
75178: LIST
75179: LIST
75180: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
75181: LD_ADDR_VAR 0 30
75185: PUSH
75186: LD_INT 4
75188: PUSH
75189: LD_INT 4
75191: PUSH
75192: EMPTY
75193: LIST
75194: LIST
75195: PUSH
75196: LD_INT 4
75198: PUSH
75199: LD_INT 3
75201: PUSH
75202: EMPTY
75203: LIST
75204: LIST
75205: PUSH
75206: LD_INT 5
75208: PUSH
75209: LD_INT 4
75211: PUSH
75212: EMPTY
75213: LIST
75214: LIST
75215: PUSH
75216: LD_INT 5
75218: PUSH
75219: LD_INT 5
75221: PUSH
75222: EMPTY
75223: LIST
75224: LIST
75225: PUSH
75226: LD_INT 4
75228: PUSH
75229: LD_INT 5
75231: PUSH
75232: EMPTY
75233: LIST
75234: LIST
75235: PUSH
75236: LD_INT 3
75238: PUSH
75239: LD_INT 4
75241: PUSH
75242: EMPTY
75243: LIST
75244: LIST
75245: PUSH
75246: LD_INT 3
75248: PUSH
75249: LD_INT 3
75251: PUSH
75252: EMPTY
75253: LIST
75254: LIST
75255: PUSH
75256: LD_INT 5
75258: PUSH
75259: LD_INT 3
75261: PUSH
75262: EMPTY
75263: LIST
75264: LIST
75265: PUSH
75266: LD_INT 3
75268: PUSH
75269: LD_INT 5
75271: PUSH
75272: EMPTY
75273: LIST
75274: LIST
75275: PUSH
75276: LD_INT 0
75278: PUSH
75279: LD_INT 3
75281: PUSH
75282: EMPTY
75283: LIST
75284: LIST
75285: PUSH
75286: LD_INT 0
75288: PUSH
75289: LD_INT 2
75291: PUSH
75292: EMPTY
75293: LIST
75294: LIST
75295: PUSH
75296: LD_INT 1
75298: PUSH
75299: LD_INT 3
75301: PUSH
75302: EMPTY
75303: LIST
75304: LIST
75305: PUSH
75306: LD_INT 1
75308: PUSH
75309: LD_INT 4
75311: PUSH
75312: EMPTY
75313: LIST
75314: LIST
75315: PUSH
75316: LD_INT 0
75318: PUSH
75319: LD_INT 4
75321: PUSH
75322: EMPTY
75323: LIST
75324: LIST
75325: PUSH
75326: LD_INT 1
75328: NEG
75329: PUSH
75330: LD_INT 3
75332: PUSH
75333: EMPTY
75334: LIST
75335: LIST
75336: PUSH
75337: LD_INT 1
75339: NEG
75340: PUSH
75341: LD_INT 2
75343: PUSH
75344: EMPTY
75345: LIST
75346: LIST
75347: PUSH
75348: LD_INT 2
75350: PUSH
75351: LD_INT 4
75353: PUSH
75354: EMPTY
75355: LIST
75356: LIST
75357: PUSH
75358: LD_INT 2
75360: NEG
75361: PUSH
75362: LD_INT 2
75364: PUSH
75365: EMPTY
75366: LIST
75367: LIST
75368: PUSH
75369: LD_INT 4
75371: NEG
75372: PUSH
75373: LD_INT 0
75375: PUSH
75376: EMPTY
75377: LIST
75378: LIST
75379: PUSH
75380: LD_INT 4
75382: NEG
75383: PUSH
75384: LD_INT 1
75386: NEG
75387: PUSH
75388: EMPTY
75389: LIST
75390: LIST
75391: PUSH
75392: LD_INT 3
75394: NEG
75395: PUSH
75396: LD_INT 0
75398: PUSH
75399: EMPTY
75400: LIST
75401: LIST
75402: PUSH
75403: LD_INT 3
75405: NEG
75406: PUSH
75407: LD_INT 1
75409: PUSH
75410: EMPTY
75411: LIST
75412: LIST
75413: PUSH
75414: LD_INT 4
75416: NEG
75417: PUSH
75418: LD_INT 1
75420: PUSH
75421: EMPTY
75422: LIST
75423: LIST
75424: PUSH
75425: LD_INT 5
75427: NEG
75428: PUSH
75429: LD_INT 0
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: PUSH
75436: LD_INT 5
75438: NEG
75439: PUSH
75440: LD_INT 1
75442: NEG
75443: PUSH
75444: EMPTY
75445: LIST
75446: LIST
75447: PUSH
75448: LD_INT 5
75450: NEG
75451: PUSH
75452: LD_INT 2
75454: NEG
75455: PUSH
75456: EMPTY
75457: LIST
75458: LIST
75459: PUSH
75460: LD_INT 3
75462: NEG
75463: PUSH
75464: LD_INT 2
75466: PUSH
75467: EMPTY
75468: LIST
75469: LIST
75470: PUSH
75471: LD_INT 3
75473: NEG
75474: PUSH
75475: LD_INT 3
75477: NEG
75478: PUSH
75479: EMPTY
75480: LIST
75481: LIST
75482: PUSH
75483: LD_INT 3
75485: NEG
75486: PUSH
75487: LD_INT 4
75489: NEG
75490: PUSH
75491: EMPTY
75492: LIST
75493: LIST
75494: PUSH
75495: LD_INT 2
75497: NEG
75498: PUSH
75499: LD_INT 3
75501: NEG
75502: PUSH
75503: EMPTY
75504: LIST
75505: LIST
75506: PUSH
75507: LD_INT 2
75509: NEG
75510: PUSH
75511: LD_INT 2
75513: NEG
75514: PUSH
75515: EMPTY
75516: LIST
75517: LIST
75518: PUSH
75519: LD_INT 3
75521: NEG
75522: PUSH
75523: LD_INT 2
75525: NEG
75526: PUSH
75527: EMPTY
75528: LIST
75529: LIST
75530: PUSH
75531: LD_INT 4
75533: NEG
75534: PUSH
75535: LD_INT 3
75537: NEG
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: PUSH
75543: LD_INT 4
75545: NEG
75546: PUSH
75547: LD_INT 4
75549: NEG
75550: PUSH
75551: EMPTY
75552: LIST
75553: LIST
75554: PUSH
75555: LD_INT 2
75557: NEG
75558: PUSH
75559: LD_INT 4
75561: NEG
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: PUSH
75567: LD_INT 4
75569: NEG
75570: PUSH
75571: LD_INT 2
75573: NEG
75574: PUSH
75575: EMPTY
75576: LIST
75577: LIST
75578: PUSH
75579: LD_INT 0
75581: PUSH
75582: LD_INT 4
75584: NEG
75585: PUSH
75586: EMPTY
75587: LIST
75588: LIST
75589: PUSH
75590: LD_INT 0
75592: PUSH
75593: LD_INT 5
75595: NEG
75596: PUSH
75597: EMPTY
75598: LIST
75599: LIST
75600: PUSH
75601: LD_INT 1
75603: PUSH
75604: LD_INT 4
75606: NEG
75607: PUSH
75608: EMPTY
75609: LIST
75610: LIST
75611: PUSH
75612: LD_INT 1
75614: PUSH
75615: LD_INT 3
75617: NEG
75618: PUSH
75619: EMPTY
75620: LIST
75621: LIST
75622: PUSH
75623: LD_INT 0
75625: PUSH
75626: LD_INT 3
75628: NEG
75629: PUSH
75630: EMPTY
75631: LIST
75632: LIST
75633: PUSH
75634: LD_INT 1
75636: NEG
75637: PUSH
75638: LD_INT 4
75640: NEG
75641: PUSH
75642: EMPTY
75643: LIST
75644: LIST
75645: PUSH
75646: LD_INT 1
75648: NEG
75649: PUSH
75650: LD_INT 5
75652: NEG
75653: PUSH
75654: EMPTY
75655: LIST
75656: LIST
75657: PUSH
75658: LD_INT 2
75660: PUSH
75661: LD_INT 3
75663: NEG
75664: PUSH
75665: EMPTY
75666: LIST
75667: LIST
75668: PUSH
75669: LD_INT 2
75671: NEG
75672: PUSH
75673: LD_INT 5
75675: NEG
75676: PUSH
75677: EMPTY
75678: LIST
75679: LIST
75680: PUSH
75681: EMPTY
75682: LIST
75683: LIST
75684: LIST
75685: LIST
75686: LIST
75687: LIST
75688: LIST
75689: LIST
75690: LIST
75691: LIST
75692: LIST
75693: LIST
75694: LIST
75695: LIST
75696: LIST
75697: LIST
75698: LIST
75699: LIST
75700: LIST
75701: LIST
75702: LIST
75703: LIST
75704: LIST
75705: LIST
75706: LIST
75707: LIST
75708: LIST
75709: LIST
75710: LIST
75711: LIST
75712: LIST
75713: LIST
75714: LIST
75715: LIST
75716: LIST
75717: LIST
75718: LIST
75719: LIST
75720: LIST
75721: LIST
75722: LIST
75723: LIST
75724: LIST
75725: LIST
75726: LIST
75727: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
75728: LD_ADDR_VAR 0 31
75732: PUSH
75733: LD_INT 0
75735: PUSH
75736: LD_INT 4
75738: PUSH
75739: EMPTY
75740: LIST
75741: LIST
75742: PUSH
75743: LD_INT 0
75745: PUSH
75746: LD_INT 3
75748: PUSH
75749: EMPTY
75750: LIST
75751: LIST
75752: PUSH
75753: LD_INT 1
75755: PUSH
75756: LD_INT 4
75758: PUSH
75759: EMPTY
75760: LIST
75761: LIST
75762: PUSH
75763: LD_INT 1
75765: PUSH
75766: LD_INT 5
75768: PUSH
75769: EMPTY
75770: LIST
75771: LIST
75772: PUSH
75773: LD_INT 0
75775: PUSH
75776: LD_INT 5
75778: PUSH
75779: EMPTY
75780: LIST
75781: LIST
75782: PUSH
75783: LD_INT 1
75785: NEG
75786: PUSH
75787: LD_INT 4
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: PUSH
75794: LD_INT 1
75796: NEG
75797: PUSH
75798: LD_INT 3
75800: PUSH
75801: EMPTY
75802: LIST
75803: LIST
75804: PUSH
75805: LD_INT 2
75807: PUSH
75808: LD_INT 5
75810: PUSH
75811: EMPTY
75812: LIST
75813: LIST
75814: PUSH
75815: LD_INT 2
75817: NEG
75818: PUSH
75819: LD_INT 3
75821: PUSH
75822: EMPTY
75823: LIST
75824: LIST
75825: PUSH
75826: LD_INT 3
75828: NEG
75829: PUSH
75830: LD_INT 0
75832: PUSH
75833: EMPTY
75834: LIST
75835: LIST
75836: PUSH
75837: LD_INT 3
75839: NEG
75840: PUSH
75841: LD_INT 1
75843: NEG
75844: PUSH
75845: EMPTY
75846: LIST
75847: LIST
75848: PUSH
75849: LD_INT 2
75851: NEG
75852: PUSH
75853: LD_INT 0
75855: PUSH
75856: EMPTY
75857: LIST
75858: LIST
75859: PUSH
75860: LD_INT 2
75862: NEG
75863: PUSH
75864: LD_INT 1
75866: PUSH
75867: EMPTY
75868: LIST
75869: LIST
75870: PUSH
75871: LD_INT 3
75873: NEG
75874: PUSH
75875: LD_INT 1
75877: PUSH
75878: EMPTY
75879: LIST
75880: LIST
75881: PUSH
75882: LD_INT 4
75884: NEG
75885: PUSH
75886: LD_INT 0
75888: PUSH
75889: EMPTY
75890: LIST
75891: LIST
75892: PUSH
75893: LD_INT 4
75895: NEG
75896: PUSH
75897: LD_INT 1
75899: NEG
75900: PUSH
75901: EMPTY
75902: LIST
75903: LIST
75904: PUSH
75905: LD_INT 4
75907: NEG
75908: PUSH
75909: LD_INT 2
75911: NEG
75912: PUSH
75913: EMPTY
75914: LIST
75915: LIST
75916: PUSH
75917: LD_INT 2
75919: NEG
75920: PUSH
75921: LD_INT 2
75923: PUSH
75924: EMPTY
75925: LIST
75926: LIST
75927: PUSH
75928: LD_INT 4
75930: NEG
75931: PUSH
75932: LD_INT 4
75934: NEG
75935: PUSH
75936: EMPTY
75937: LIST
75938: LIST
75939: PUSH
75940: LD_INT 4
75942: NEG
75943: PUSH
75944: LD_INT 5
75946: NEG
75947: PUSH
75948: EMPTY
75949: LIST
75950: LIST
75951: PUSH
75952: LD_INT 3
75954: NEG
75955: PUSH
75956: LD_INT 4
75958: NEG
75959: PUSH
75960: EMPTY
75961: LIST
75962: LIST
75963: PUSH
75964: LD_INT 3
75966: NEG
75967: PUSH
75968: LD_INT 3
75970: NEG
75971: PUSH
75972: EMPTY
75973: LIST
75974: LIST
75975: PUSH
75976: LD_INT 4
75978: NEG
75979: PUSH
75980: LD_INT 3
75982: NEG
75983: PUSH
75984: EMPTY
75985: LIST
75986: LIST
75987: PUSH
75988: LD_INT 5
75990: NEG
75991: PUSH
75992: LD_INT 4
75994: NEG
75995: PUSH
75996: EMPTY
75997: LIST
75998: LIST
75999: PUSH
76000: LD_INT 5
76002: NEG
76003: PUSH
76004: LD_INT 5
76006: NEG
76007: PUSH
76008: EMPTY
76009: LIST
76010: LIST
76011: PUSH
76012: LD_INT 3
76014: NEG
76015: PUSH
76016: LD_INT 5
76018: NEG
76019: PUSH
76020: EMPTY
76021: LIST
76022: LIST
76023: PUSH
76024: LD_INT 5
76026: NEG
76027: PUSH
76028: LD_INT 3
76030: NEG
76031: PUSH
76032: EMPTY
76033: LIST
76034: LIST
76035: PUSH
76036: LD_INT 0
76038: PUSH
76039: LD_INT 3
76041: NEG
76042: PUSH
76043: EMPTY
76044: LIST
76045: LIST
76046: PUSH
76047: LD_INT 0
76049: PUSH
76050: LD_INT 4
76052: NEG
76053: PUSH
76054: EMPTY
76055: LIST
76056: LIST
76057: PUSH
76058: LD_INT 1
76060: PUSH
76061: LD_INT 3
76063: NEG
76064: PUSH
76065: EMPTY
76066: LIST
76067: LIST
76068: PUSH
76069: LD_INT 1
76071: PUSH
76072: LD_INT 2
76074: NEG
76075: PUSH
76076: EMPTY
76077: LIST
76078: LIST
76079: PUSH
76080: LD_INT 0
76082: PUSH
76083: LD_INT 2
76085: NEG
76086: PUSH
76087: EMPTY
76088: LIST
76089: LIST
76090: PUSH
76091: LD_INT 1
76093: NEG
76094: PUSH
76095: LD_INT 3
76097: NEG
76098: PUSH
76099: EMPTY
76100: LIST
76101: LIST
76102: PUSH
76103: LD_INT 1
76105: NEG
76106: PUSH
76107: LD_INT 4
76109: NEG
76110: PUSH
76111: EMPTY
76112: LIST
76113: LIST
76114: PUSH
76115: LD_INT 2
76117: PUSH
76118: LD_INT 2
76120: NEG
76121: PUSH
76122: EMPTY
76123: LIST
76124: LIST
76125: PUSH
76126: LD_INT 2
76128: NEG
76129: PUSH
76130: LD_INT 4
76132: NEG
76133: PUSH
76134: EMPTY
76135: LIST
76136: LIST
76137: PUSH
76138: LD_INT 4
76140: PUSH
76141: LD_INT 0
76143: PUSH
76144: EMPTY
76145: LIST
76146: LIST
76147: PUSH
76148: LD_INT 4
76150: PUSH
76151: LD_INT 1
76153: NEG
76154: PUSH
76155: EMPTY
76156: LIST
76157: LIST
76158: PUSH
76159: LD_INT 5
76161: PUSH
76162: LD_INT 0
76164: PUSH
76165: EMPTY
76166: LIST
76167: LIST
76168: PUSH
76169: LD_INT 5
76171: PUSH
76172: LD_INT 1
76174: PUSH
76175: EMPTY
76176: LIST
76177: LIST
76178: PUSH
76179: LD_INT 4
76181: PUSH
76182: LD_INT 1
76184: PUSH
76185: EMPTY
76186: LIST
76187: LIST
76188: PUSH
76189: LD_INT 3
76191: PUSH
76192: LD_INT 0
76194: PUSH
76195: EMPTY
76196: LIST
76197: LIST
76198: PUSH
76199: LD_INT 3
76201: PUSH
76202: LD_INT 1
76204: NEG
76205: PUSH
76206: EMPTY
76207: LIST
76208: LIST
76209: PUSH
76210: LD_INT 3
76212: PUSH
76213: LD_INT 2
76215: NEG
76216: PUSH
76217: EMPTY
76218: LIST
76219: LIST
76220: PUSH
76221: LD_INT 5
76223: PUSH
76224: LD_INT 2
76226: PUSH
76227: EMPTY
76228: LIST
76229: LIST
76230: PUSH
76231: EMPTY
76232: LIST
76233: LIST
76234: LIST
76235: LIST
76236: LIST
76237: LIST
76238: LIST
76239: LIST
76240: LIST
76241: LIST
76242: LIST
76243: LIST
76244: LIST
76245: LIST
76246: LIST
76247: LIST
76248: LIST
76249: LIST
76250: LIST
76251: LIST
76252: LIST
76253: LIST
76254: LIST
76255: LIST
76256: LIST
76257: LIST
76258: LIST
76259: LIST
76260: LIST
76261: LIST
76262: LIST
76263: LIST
76264: LIST
76265: LIST
76266: LIST
76267: LIST
76268: LIST
76269: LIST
76270: LIST
76271: LIST
76272: LIST
76273: LIST
76274: LIST
76275: LIST
76276: LIST
76277: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
76278: LD_ADDR_VAR 0 32
76282: PUSH
76283: LD_INT 4
76285: NEG
76286: PUSH
76287: LD_INT 0
76289: PUSH
76290: EMPTY
76291: LIST
76292: LIST
76293: PUSH
76294: LD_INT 4
76296: NEG
76297: PUSH
76298: LD_INT 1
76300: NEG
76301: PUSH
76302: EMPTY
76303: LIST
76304: LIST
76305: PUSH
76306: LD_INT 3
76308: NEG
76309: PUSH
76310: LD_INT 0
76312: PUSH
76313: EMPTY
76314: LIST
76315: LIST
76316: PUSH
76317: LD_INT 3
76319: NEG
76320: PUSH
76321: LD_INT 1
76323: PUSH
76324: EMPTY
76325: LIST
76326: LIST
76327: PUSH
76328: LD_INT 4
76330: NEG
76331: PUSH
76332: LD_INT 1
76334: PUSH
76335: EMPTY
76336: LIST
76337: LIST
76338: PUSH
76339: LD_INT 5
76341: NEG
76342: PUSH
76343: LD_INT 0
76345: PUSH
76346: EMPTY
76347: LIST
76348: LIST
76349: PUSH
76350: LD_INT 5
76352: NEG
76353: PUSH
76354: LD_INT 1
76356: NEG
76357: PUSH
76358: EMPTY
76359: LIST
76360: LIST
76361: PUSH
76362: LD_INT 5
76364: NEG
76365: PUSH
76366: LD_INT 2
76368: NEG
76369: PUSH
76370: EMPTY
76371: LIST
76372: LIST
76373: PUSH
76374: LD_INT 3
76376: NEG
76377: PUSH
76378: LD_INT 2
76380: PUSH
76381: EMPTY
76382: LIST
76383: LIST
76384: PUSH
76385: LD_INT 3
76387: NEG
76388: PUSH
76389: LD_INT 3
76391: NEG
76392: PUSH
76393: EMPTY
76394: LIST
76395: LIST
76396: PUSH
76397: LD_INT 3
76399: NEG
76400: PUSH
76401: LD_INT 4
76403: NEG
76404: PUSH
76405: EMPTY
76406: LIST
76407: LIST
76408: PUSH
76409: LD_INT 2
76411: NEG
76412: PUSH
76413: LD_INT 3
76415: NEG
76416: PUSH
76417: EMPTY
76418: LIST
76419: LIST
76420: PUSH
76421: LD_INT 2
76423: NEG
76424: PUSH
76425: LD_INT 2
76427: NEG
76428: PUSH
76429: EMPTY
76430: LIST
76431: LIST
76432: PUSH
76433: LD_INT 3
76435: NEG
76436: PUSH
76437: LD_INT 2
76439: NEG
76440: PUSH
76441: EMPTY
76442: LIST
76443: LIST
76444: PUSH
76445: LD_INT 4
76447: NEG
76448: PUSH
76449: LD_INT 3
76451: NEG
76452: PUSH
76453: EMPTY
76454: LIST
76455: LIST
76456: PUSH
76457: LD_INT 4
76459: NEG
76460: PUSH
76461: LD_INT 4
76463: NEG
76464: PUSH
76465: EMPTY
76466: LIST
76467: LIST
76468: PUSH
76469: LD_INT 2
76471: NEG
76472: PUSH
76473: LD_INT 4
76475: NEG
76476: PUSH
76477: EMPTY
76478: LIST
76479: LIST
76480: PUSH
76481: LD_INT 4
76483: NEG
76484: PUSH
76485: LD_INT 2
76487: NEG
76488: PUSH
76489: EMPTY
76490: LIST
76491: LIST
76492: PUSH
76493: LD_INT 0
76495: PUSH
76496: LD_INT 4
76498: NEG
76499: PUSH
76500: EMPTY
76501: LIST
76502: LIST
76503: PUSH
76504: LD_INT 0
76506: PUSH
76507: LD_INT 5
76509: NEG
76510: PUSH
76511: EMPTY
76512: LIST
76513: LIST
76514: PUSH
76515: LD_INT 1
76517: PUSH
76518: LD_INT 4
76520: NEG
76521: PUSH
76522: EMPTY
76523: LIST
76524: LIST
76525: PUSH
76526: LD_INT 1
76528: PUSH
76529: LD_INT 3
76531: NEG
76532: PUSH
76533: EMPTY
76534: LIST
76535: LIST
76536: PUSH
76537: LD_INT 0
76539: PUSH
76540: LD_INT 3
76542: NEG
76543: PUSH
76544: EMPTY
76545: LIST
76546: LIST
76547: PUSH
76548: LD_INT 1
76550: NEG
76551: PUSH
76552: LD_INT 4
76554: NEG
76555: PUSH
76556: EMPTY
76557: LIST
76558: LIST
76559: PUSH
76560: LD_INT 1
76562: NEG
76563: PUSH
76564: LD_INT 5
76566: NEG
76567: PUSH
76568: EMPTY
76569: LIST
76570: LIST
76571: PUSH
76572: LD_INT 2
76574: PUSH
76575: LD_INT 3
76577: NEG
76578: PUSH
76579: EMPTY
76580: LIST
76581: LIST
76582: PUSH
76583: LD_INT 2
76585: NEG
76586: PUSH
76587: LD_INT 5
76589: NEG
76590: PUSH
76591: EMPTY
76592: LIST
76593: LIST
76594: PUSH
76595: LD_INT 3
76597: PUSH
76598: LD_INT 0
76600: PUSH
76601: EMPTY
76602: LIST
76603: LIST
76604: PUSH
76605: LD_INT 3
76607: PUSH
76608: LD_INT 1
76610: NEG
76611: PUSH
76612: EMPTY
76613: LIST
76614: LIST
76615: PUSH
76616: LD_INT 4
76618: PUSH
76619: LD_INT 0
76621: PUSH
76622: EMPTY
76623: LIST
76624: LIST
76625: PUSH
76626: LD_INT 4
76628: PUSH
76629: LD_INT 1
76631: PUSH
76632: EMPTY
76633: LIST
76634: LIST
76635: PUSH
76636: LD_INT 3
76638: PUSH
76639: LD_INT 1
76641: PUSH
76642: EMPTY
76643: LIST
76644: LIST
76645: PUSH
76646: LD_INT 2
76648: PUSH
76649: LD_INT 0
76651: PUSH
76652: EMPTY
76653: LIST
76654: LIST
76655: PUSH
76656: LD_INT 2
76658: PUSH
76659: LD_INT 1
76661: NEG
76662: PUSH
76663: EMPTY
76664: LIST
76665: LIST
76666: PUSH
76667: LD_INT 2
76669: PUSH
76670: LD_INT 2
76672: NEG
76673: PUSH
76674: EMPTY
76675: LIST
76676: LIST
76677: PUSH
76678: LD_INT 4
76680: PUSH
76681: LD_INT 2
76683: PUSH
76684: EMPTY
76685: LIST
76686: LIST
76687: PUSH
76688: LD_INT 4
76690: PUSH
76691: LD_INT 4
76693: PUSH
76694: EMPTY
76695: LIST
76696: LIST
76697: PUSH
76698: LD_INT 4
76700: PUSH
76701: LD_INT 3
76703: PUSH
76704: EMPTY
76705: LIST
76706: LIST
76707: PUSH
76708: LD_INT 5
76710: PUSH
76711: LD_INT 4
76713: PUSH
76714: EMPTY
76715: LIST
76716: LIST
76717: PUSH
76718: LD_INT 5
76720: PUSH
76721: LD_INT 5
76723: PUSH
76724: EMPTY
76725: LIST
76726: LIST
76727: PUSH
76728: LD_INT 4
76730: PUSH
76731: LD_INT 5
76733: PUSH
76734: EMPTY
76735: LIST
76736: LIST
76737: PUSH
76738: LD_INT 3
76740: PUSH
76741: LD_INT 4
76743: PUSH
76744: EMPTY
76745: LIST
76746: LIST
76747: PUSH
76748: LD_INT 3
76750: PUSH
76751: LD_INT 3
76753: PUSH
76754: EMPTY
76755: LIST
76756: LIST
76757: PUSH
76758: LD_INT 5
76760: PUSH
76761: LD_INT 3
76763: PUSH
76764: EMPTY
76765: LIST
76766: LIST
76767: PUSH
76768: LD_INT 3
76770: PUSH
76771: LD_INT 5
76773: PUSH
76774: EMPTY
76775: LIST
76776: LIST
76777: PUSH
76778: EMPTY
76779: LIST
76780: LIST
76781: LIST
76782: LIST
76783: LIST
76784: LIST
76785: LIST
76786: LIST
76787: LIST
76788: LIST
76789: LIST
76790: LIST
76791: LIST
76792: LIST
76793: LIST
76794: LIST
76795: LIST
76796: LIST
76797: LIST
76798: LIST
76799: LIST
76800: LIST
76801: LIST
76802: LIST
76803: LIST
76804: LIST
76805: LIST
76806: LIST
76807: LIST
76808: LIST
76809: LIST
76810: LIST
76811: LIST
76812: LIST
76813: LIST
76814: LIST
76815: LIST
76816: LIST
76817: LIST
76818: LIST
76819: LIST
76820: LIST
76821: LIST
76822: LIST
76823: LIST
76824: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
76825: LD_ADDR_VAR 0 33
76829: PUSH
76830: LD_INT 4
76832: NEG
76833: PUSH
76834: LD_INT 4
76836: NEG
76837: PUSH
76838: EMPTY
76839: LIST
76840: LIST
76841: PUSH
76842: LD_INT 4
76844: NEG
76845: PUSH
76846: LD_INT 5
76848: NEG
76849: PUSH
76850: EMPTY
76851: LIST
76852: LIST
76853: PUSH
76854: LD_INT 3
76856: NEG
76857: PUSH
76858: LD_INT 4
76860: NEG
76861: PUSH
76862: EMPTY
76863: LIST
76864: LIST
76865: PUSH
76866: LD_INT 3
76868: NEG
76869: PUSH
76870: LD_INT 3
76872: NEG
76873: PUSH
76874: EMPTY
76875: LIST
76876: LIST
76877: PUSH
76878: LD_INT 4
76880: NEG
76881: PUSH
76882: LD_INT 3
76884: NEG
76885: PUSH
76886: EMPTY
76887: LIST
76888: LIST
76889: PUSH
76890: LD_INT 5
76892: NEG
76893: PUSH
76894: LD_INT 4
76896: NEG
76897: PUSH
76898: EMPTY
76899: LIST
76900: LIST
76901: PUSH
76902: LD_INT 5
76904: NEG
76905: PUSH
76906: LD_INT 5
76908: NEG
76909: PUSH
76910: EMPTY
76911: LIST
76912: LIST
76913: PUSH
76914: LD_INT 3
76916: NEG
76917: PUSH
76918: LD_INT 5
76920: NEG
76921: PUSH
76922: EMPTY
76923: LIST
76924: LIST
76925: PUSH
76926: LD_INT 5
76928: NEG
76929: PUSH
76930: LD_INT 3
76932: NEG
76933: PUSH
76934: EMPTY
76935: LIST
76936: LIST
76937: PUSH
76938: LD_INT 0
76940: PUSH
76941: LD_INT 3
76943: NEG
76944: PUSH
76945: EMPTY
76946: LIST
76947: LIST
76948: PUSH
76949: LD_INT 0
76951: PUSH
76952: LD_INT 4
76954: NEG
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: PUSH
76960: LD_INT 1
76962: PUSH
76963: LD_INT 3
76965: NEG
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: PUSH
76971: LD_INT 1
76973: PUSH
76974: LD_INT 2
76976: NEG
76977: PUSH
76978: EMPTY
76979: LIST
76980: LIST
76981: PUSH
76982: LD_INT 0
76984: PUSH
76985: LD_INT 2
76987: NEG
76988: PUSH
76989: EMPTY
76990: LIST
76991: LIST
76992: PUSH
76993: LD_INT 1
76995: NEG
76996: PUSH
76997: LD_INT 3
76999: NEG
77000: PUSH
77001: EMPTY
77002: LIST
77003: LIST
77004: PUSH
77005: LD_INT 1
77007: NEG
77008: PUSH
77009: LD_INT 4
77011: NEG
77012: PUSH
77013: EMPTY
77014: LIST
77015: LIST
77016: PUSH
77017: LD_INT 2
77019: PUSH
77020: LD_INT 2
77022: NEG
77023: PUSH
77024: EMPTY
77025: LIST
77026: LIST
77027: PUSH
77028: LD_INT 2
77030: NEG
77031: PUSH
77032: LD_INT 4
77034: NEG
77035: PUSH
77036: EMPTY
77037: LIST
77038: LIST
77039: PUSH
77040: LD_INT 4
77042: PUSH
77043: LD_INT 0
77045: PUSH
77046: EMPTY
77047: LIST
77048: LIST
77049: PUSH
77050: LD_INT 4
77052: PUSH
77053: LD_INT 1
77055: NEG
77056: PUSH
77057: EMPTY
77058: LIST
77059: LIST
77060: PUSH
77061: LD_INT 5
77063: PUSH
77064: LD_INT 0
77066: PUSH
77067: EMPTY
77068: LIST
77069: LIST
77070: PUSH
77071: LD_INT 5
77073: PUSH
77074: LD_INT 1
77076: PUSH
77077: EMPTY
77078: LIST
77079: LIST
77080: PUSH
77081: LD_INT 4
77083: PUSH
77084: LD_INT 1
77086: PUSH
77087: EMPTY
77088: LIST
77089: LIST
77090: PUSH
77091: LD_INT 3
77093: PUSH
77094: LD_INT 0
77096: PUSH
77097: EMPTY
77098: LIST
77099: LIST
77100: PUSH
77101: LD_INT 3
77103: PUSH
77104: LD_INT 1
77106: NEG
77107: PUSH
77108: EMPTY
77109: LIST
77110: LIST
77111: PUSH
77112: LD_INT 3
77114: PUSH
77115: LD_INT 2
77117: NEG
77118: PUSH
77119: EMPTY
77120: LIST
77121: LIST
77122: PUSH
77123: LD_INT 5
77125: PUSH
77126: LD_INT 2
77128: PUSH
77129: EMPTY
77130: LIST
77131: LIST
77132: PUSH
77133: LD_INT 3
77135: PUSH
77136: LD_INT 3
77138: PUSH
77139: EMPTY
77140: LIST
77141: LIST
77142: PUSH
77143: LD_INT 3
77145: PUSH
77146: LD_INT 2
77148: PUSH
77149: EMPTY
77150: LIST
77151: LIST
77152: PUSH
77153: LD_INT 4
77155: PUSH
77156: LD_INT 3
77158: PUSH
77159: EMPTY
77160: LIST
77161: LIST
77162: PUSH
77163: LD_INT 4
77165: PUSH
77166: LD_INT 4
77168: PUSH
77169: EMPTY
77170: LIST
77171: LIST
77172: PUSH
77173: LD_INT 3
77175: PUSH
77176: LD_INT 4
77178: PUSH
77179: EMPTY
77180: LIST
77181: LIST
77182: PUSH
77183: LD_INT 2
77185: PUSH
77186: LD_INT 3
77188: PUSH
77189: EMPTY
77190: LIST
77191: LIST
77192: PUSH
77193: LD_INT 2
77195: PUSH
77196: LD_INT 2
77198: PUSH
77199: EMPTY
77200: LIST
77201: LIST
77202: PUSH
77203: LD_INT 4
77205: PUSH
77206: LD_INT 2
77208: PUSH
77209: EMPTY
77210: LIST
77211: LIST
77212: PUSH
77213: LD_INT 2
77215: PUSH
77216: LD_INT 4
77218: PUSH
77219: EMPTY
77220: LIST
77221: LIST
77222: PUSH
77223: LD_INT 0
77225: PUSH
77226: LD_INT 4
77228: PUSH
77229: EMPTY
77230: LIST
77231: LIST
77232: PUSH
77233: LD_INT 0
77235: PUSH
77236: LD_INT 3
77238: PUSH
77239: EMPTY
77240: LIST
77241: LIST
77242: PUSH
77243: LD_INT 1
77245: PUSH
77246: LD_INT 4
77248: PUSH
77249: EMPTY
77250: LIST
77251: LIST
77252: PUSH
77253: LD_INT 1
77255: PUSH
77256: LD_INT 5
77258: PUSH
77259: EMPTY
77260: LIST
77261: LIST
77262: PUSH
77263: LD_INT 0
77265: PUSH
77266: LD_INT 5
77268: PUSH
77269: EMPTY
77270: LIST
77271: LIST
77272: PUSH
77273: LD_INT 1
77275: NEG
77276: PUSH
77277: LD_INT 4
77279: PUSH
77280: EMPTY
77281: LIST
77282: LIST
77283: PUSH
77284: LD_INT 1
77286: NEG
77287: PUSH
77288: LD_INT 3
77290: PUSH
77291: EMPTY
77292: LIST
77293: LIST
77294: PUSH
77295: LD_INT 2
77297: PUSH
77298: LD_INT 5
77300: PUSH
77301: EMPTY
77302: LIST
77303: LIST
77304: PUSH
77305: LD_INT 2
77307: NEG
77308: PUSH
77309: LD_INT 3
77311: PUSH
77312: EMPTY
77313: LIST
77314: LIST
77315: PUSH
77316: EMPTY
77317: LIST
77318: LIST
77319: LIST
77320: LIST
77321: LIST
77322: LIST
77323: LIST
77324: LIST
77325: LIST
77326: LIST
77327: LIST
77328: LIST
77329: LIST
77330: LIST
77331: LIST
77332: LIST
77333: LIST
77334: LIST
77335: LIST
77336: LIST
77337: LIST
77338: LIST
77339: LIST
77340: LIST
77341: LIST
77342: LIST
77343: LIST
77344: LIST
77345: LIST
77346: LIST
77347: LIST
77348: LIST
77349: LIST
77350: LIST
77351: LIST
77352: LIST
77353: LIST
77354: LIST
77355: LIST
77356: LIST
77357: LIST
77358: LIST
77359: LIST
77360: LIST
77361: LIST
77362: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
77363: LD_ADDR_VAR 0 34
77367: PUSH
77368: LD_INT 0
77370: PUSH
77371: LD_INT 4
77373: NEG
77374: PUSH
77375: EMPTY
77376: LIST
77377: LIST
77378: PUSH
77379: LD_INT 0
77381: PUSH
77382: LD_INT 5
77384: NEG
77385: PUSH
77386: EMPTY
77387: LIST
77388: LIST
77389: PUSH
77390: LD_INT 1
77392: PUSH
77393: LD_INT 4
77395: NEG
77396: PUSH
77397: EMPTY
77398: LIST
77399: LIST
77400: PUSH
77401: LD_INT 1
77403: PUSH
77404: LD_INT 3
77406: NEG
77407: PUSH
77408: EMPTY
77409: LIST
77410: LIST
77411: PUSH
77412: LD_INT 0
77414: PUSH
77415: LD_INT 3
77417: NEG
77418: PUSH
77419: EMPTY
77420: LIST
77421: LIST
77422: PUSH
77423: LD_INT 1
77425: NEG
77426: PUSH
77427: LD_INT 4
77429: NEG
77430: PUSH
77431: EMPTY
77432: LIST
77433: LIST
77434: PUSH
77435: LD_INT 1
77437: NEG
77438: PUSH
77439: LD_INT 5
77441: NEG
77442: PUSH
77443: EMPTY
77444: LIST
77445: LIST
77446: PUSH
77447: LD_INT 2
77449: PUSH
77450: LD_INT 3
77452: NEG
77453: PUSH
77454: EMPTY
77455: LIST
77456: LIST
77457: PUSH
77458: LD_INT 2
77460: NEG
77461: PUSH
77462: LD_INT 5
77464: NEG
77465: PUSH
77466: EMPTY
77467: LIST
77468: LIST
77469: PUSH
77470: LD_INT 3
77472: PUSH
77473: LD_INT 0
77475: PUSH
77476: EMPTY
77477: LIST
77478: LIST
77479: PUSH
77480: LD_INT 3
77482: PUSH
77483: LD_INT 1
77485: NEG
77486: PUSH
77487: EMPTY
77488: LIST
77489: LIST
77490: PUSH
77491: LD_INT 4
77493: PUSH
77494: LD_INT 0
77496: PUSH
77497: EMPTY
77498: LIST
77499: LIST
77500: PUSH
77501: LD_INT 4
77503: PUSH
77504: LD_INT 1
77506: PUSH
77507: EMPTY
77508: LIST
77509: LIST
77510: PUSH
77511: LD_INT 3
77513: PUSH
77514: LD_INT 1
77516: PUSH
77517: EMPTY
77518: LIST
77519: LIST
77520: PUSH
77521: LD_INT 2
77523: PUSH
77524: LD_INT 0
77526: PUSH
77527: EMPTY
77528: LIST
77529: LIST
77530: PUSH
77531: LD_INT 2
77533: PUSH
77534: LD_INT 1
77536: NEG
77537: PUSH
77538: EMPTY
77539: LIST
77540: LIST
77541: PUSH
77542: LD_INT 2
77544: PUSH
77545: LD_INT 2
77547: NEG
77548: PUSH
77549: EMPTY
77550: LIST
77551: LIST
77552: PUSH
77553: LD_INT 4
77555: PUSH
77556: LD_INT 2
77558: PUSH
77559: EMPTY
77560: LIST
77561: LIST
77562: PUSH
77563: LD_INT 4
77565: PUSH
77566: LD_INT 4
77568: PUSH
77569: EMPTY
77570: LIST
77571: LIST
77572: PUSH
77573: LD_INT 4
77575: PUSH
77576: LD_INT 3
77578: PUSH
77579: EMPTY
77580: LIST
77581: LIST
77582: PUSH
77583: LD_INT 5
77585: PUSH
77586: LD_INT 4
77588: PUSH
77589: EMPTY
77590: LIST
77591: LIST
77592: PUSH
77593: LD_INT 5
77595: PUSH
77596: LD_INT 5
77598: PUSH
77599: EMPTY
77600: LIST
77601: LIST
77602: PUSH
77603: LD_INT 4
77605: PUSH
77606: LD_INT 5
77608: PUSH
77609: EMPTY
77610: LIST
77611: LIST
77612: PUSH
77613: LD_INT 3
77615: PUSH
77616: LD_INT 4
77618: PUSH
77619: EMPTY
77620: LIST
77621: LIST
77622: PUSH
77623: LD_INT 3
77625: PUSH
77626: LD_INT 3
77628: PUSH
77629: EMPTY
77630: LIST
77631: LIST
77632: PUSH
77633: LD_INT 5
77635: PUSH
77636: LD_INT 3
77638: PUSH
77639: EMPTY
77640: LIST
77641: LIST
77642: PUSH
77643: LD_INT 3
77645: PUSH
77646: LD_INT 5
77648: PUSH
77649: EMPTY
77650: LIST
77651: LIST
77652: PUSH
77653: LD_INT 0
77655: PUSH
77656: LD_INT 3
77658: PUSH
77659: EMPTY
77660: LIST
77661: LIST
77662: PUSH
77663: LD_INT 0
77665: PUSH
77666: LD_INT 2
77668: PUSH
77669: EMPTY
77670: LIST
77671: LIST
77672: PUSH
77673: LD_INT 1
77675: PUSH
77676: LD_INT 3
77678: PUSH
77679: EMPTY
77680: LIST
77681: LIST
77682: PUSH
77683: LD_INT 1
77685: PUSH
77686: LD_INT 4
77688: PUSH
77689: EMPTY
77690: LIST
77691: LIST
77692: PUSH
77693: LD_INT 0
77695: PUSH
77696: LD_INT 4
77698: PUSH
77699: EMPTY
77700: LIST
77701: LIST
77702: PUSH
77703: LD_INT 1
77705: NEG
77706: PUSH
77707: LD_INT 3
77709: PUSH
77710: EMPTY
77711: LIST
77712: LIST
77713: PUSH
77714: LD_INT 1
77716: NEG
77717: PUSH
77718: LD_INT 2
77720: PUSH
77721: EMPTY
77722: LIST
77723: LIST
77724: PUSH
77725: LD_INT 2
77727: PUSH
77728: LD_INT 4
77730: PUSH
77731: EMPTY
77732: LIST
77733: LIST
77734: PUSH
77735: LD_INT 2
77737: NEG
77738: PUSH
77739: LD_INT 2
77741: PUSH
77742: EMPTY
77743: LIST
77744: LIST
77745: PUSH
77746: LD_INT 4
77748: NEG
77749: PUSH
77750: LD_INT 0
77752: PUSH
77753: EMPTY
77754: LIST
77755: LIST
77756: PUSH
77757: LD_INT 4
77759: NEG
77760: PUSH
77761: LD_INT 1
77763: NEG
77764: PUSH
77765: EMPTY
77766: LIST
77767: LIST
77768: PUSH
77769: LD_INT 3
77771: NEG
77772: PUSH
77773: LD_INT 0
77775: PUSH
77776: EMPTY
77777: LIST
77778: LIST
77779: PUSH
77780: LD_INT 3
77782: NEG
77783: PUSH
77784: LD_INT 1
77786: PUSH
77787: EMPTY
77788: LIST
77789: LIST
77790: PUSH
77791: LD_INT 4
77793: NEG
77794: PUSH
77795: LD_INT 1
77797: PUSH
77798: EMPTY
77799: LIST
77800: LIST
77801: PUSH
77802: LD_INT 5
77804: NEG
77805: PUSH
77806: LD_INT 0
77808: PUSH
77809: EMPTY
77810: LIST
77811: LIST
77812: PUSH
77813: LD_INT 5
77815: NEG
77816: PUSH
77817: LD_INT 1
77819: NEG
77820: PUSH
77821: EMPTY
77822: LIST
77823: LIST
77824: PUSH
77825: LD_INT 5
77827: NEG
77828: PUSH
77829: LD_INT 2
77831: NEG
77832: PUSH
77833: EMPTY
77834: LIST
77835: LIST
77836: PUSH
77837: LD_INT 3
77839: NEG
77840: PUSH
77841: LD_INT 2
77843: PUSH
77844: EMPTY
77845: LIST
77846: LIST
77847: PUSH
77848: EMPTY
77849: LIST
77850: LIST
77851: LIST
77852: LIST
77853: LIST
77854: LIST
77855: LIST
77856: LIST
77857: LIST
77858: LIST
77859: LIST
77860: LIST
77861: LIST
77862: LIST
77863: LIST
77864: LIST
77865: LIST
77866: LIST
77867: LIST
77868: LIST
77869: LIST
77870: LIST
77871: LIST
77872: LIST
77873: LIST
77874: LIST
77875: LIST
77876: LIST
77877: LIST
77878: LIST
77879: LIST
77880: LIST
77881: LIST
77882: LIST
77883: LIST
77884: LIST
77885: LIST
77886: LIST
77887: LIST
77888: LIST
77889: LIST
77890: LIST
77891: LIST
77892: LIST
77893: LIST
77894: ST_TO_ADDR
// end ; end ;
77895: GO 77898
77897: POP
// case btype of b_depot , b_warehouse :
77898: LD_VAR 0 1
77902: PUSH
77903: LD_INT 0
77905: DOUBLE
77906: EQUAL
77907: IFTRUE 77917
77909: LD_INT 1
77911: DOUBLE
77912: EQUAL
77913: IFTRUE 77917
77915: GO 78118
77917: POP
// case nation of nation_american :
77918: LD_VAR 0 5
77922: PUSH
77923: LD_INT 1
77925: DOUBLE
77926: EQUAL
77927: IFTRUE 77931
77929: GO 77987
77931: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
77932: LD_ADDR_VAR 0 9
77936: PUSH
77937: LD_VAR 0 11
77941: PUSH
77942: LD_VAR 0 12
77946: PUSH
77947: LD_VAR 0 13
77951: PUSH
77952: LD_VAR 0 14
77956: PUSH
77957: LD_VAR 0 15
77961: PUSH
77962: LD_VAR 0 16
77966: PUSH
77967: EMPTY
77968: LIST
77969: LIST
77970: LIST
77971: LIST
77972: LIST
77973: LIST
77974: PUSH
77975: LD_VAR 0 4
77979: PUSH
77980: LD_INT 1
77982: PLUS
77983: ARRAY
77984: ST_TO_ADDR
77985: GO 78116
77987: LD_INT 2
77989: DOUBLE
77990: EQUAL
77991: IFTRUE 77995
77993: GO 78051
77995: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
77996: LD_ADDR_VAR 0 9
78000: PUSH
78001: LD_VAR 0 17
78005: PUSH
78006: LD_VAR 0 18
78010: PUSH
78011: LD_VAR 0 19
78015: PUSH
78016: LD_VAR 0 20
78020: PUSH
78021: LD_VAR 0 21
78025: PUSH
78026: LD_VAR 0 22
78030: PUSH
78031: EMPTY
78032: LIST
78033: LIST
78034: LIST
78035: LIST
78036: LIST
78037: LIST
78038: PUSH
78039: LD_VAR 0 4
78043: PUSH
78044: LD_INT 1
78046: PLUS
78047: ARRAY
78048: ST_TO_ADDR
78049: GO 78116
78051: LD_INT 3
78053: DOUBLE
78054: EQUAL
78055: IFTRUE 78059
78057: GO 78115
78059: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
78060: LD_ADDR_VAR 0 9
78064: PUSH
78065: LD_VAR 0 23
78069: PUSH
78070: LD_VAR 0 24
78074: PUSH
78075: LD_VAR 0 25
78079: PUSH
78080: LD_VAR 0 26
78084: PUSH
78085: LD_VAR 0 27
78089: PUSH
78090: LD_VAR 0 28
78094: PUSH
78095: EMPTY
78096: LIST
78097: LIST
78098: LIST
78099: LIST
78100: LIST
78101: LIST
78102: PUSH
78103: LD_VAR 0 4
78107: PUSH
78108: LD_INT 1
78110: PLUS
78111: ARRAY
78112: ST_TO_ADDR
78113: GO 78116
78115: POP
78116: GO 78671
78118: LD_INT 2
78120: DOUBLE
78121: EQUAL
78122: IFTRUE 78132
78124: LD_INT 3
78126: DOUBLE
78127: EQUAL
78128: IFTRUE 78132
78130: GO 78188
78132: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
78133: LD_ADDR_VAR 0 9
78137: PUSH
78138: LD_VAR 0 29
78142: PUSH
78143: LD_VAR 0 30
78147: PUSH
78148: LD_VAR 0 31
78152: PUSH
78153: LD_VAR 0 32
78157: PUSH
78158: LD_VAR 0 33
78162: PUSH
78163: LD_VAR 0 34
78167: PUSH
78168: EMPTY
78169: LIST
78170: LIST
78171: LIST
78172: LIST
78173: LIST
78174: LIST
78175: PUSH
78176: LD_VAR 0 4
78180: PUSH
78181: LD_INT 1
78183: PLUS
78184: ARRAY
78185: ST_TO_ADDR
78186: GO 78671
78188: LD_INT 16
78190: DOUBLE
78191: EQUAL
78192: IFTRUE 78250
78194: LD_INT 17
78196: DOUBLE
78197: EQUAL
78198: IFTRUE 78250
78200: LD_INT 18
78202: DOUBLE
78203: EQUAL
78204: IFTRUE 78250
78206: LD_INT 19
78208: DOUBLE
78209: EQUAL
78210: IFTRUE 78250
78212: LD_INT 22
78214: DOUBLE
78215: EQUAL
78216: IFTRUE 78250
78218: LD_INT 20
78220: DOUBLE
78221: EQUAL
78222: IFTRUE 78250
78224: LD_INT 21
78226: DOUBLE
78227: EQUAL
78228: IFTRUE 78250
78230: LD_INT 23
78232: DOUBLE
78233: EQUAL
78234: IFTRUE 78250
78236: LD_INT 24
78238: DOUBLE
78239: EQUAL
78240: IFTRUE 78250
78242: LD_INT 25
78244: DOUBLE
78245: EQUAL
78246: IFTRUE 78250
78248: GO 78306
78250: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
78251: LD_ADDR_VAR 0 9
78255: PUSH
78256: LD_VAR 0 35
78260: PUSH
78261: LD_VAR 0 36
78265: PUSH
78266: LD_VAR 0 37
78270: PUSH
78271: LD_VAR 0 38
78275: PUSH
78276: LD_VAR 0 39
78280: PUSH
78281: LD_VAR 0 40
78285: PUSH
78286: EMPTY
78287: LIST
78288: LIST
78289: LIST
78290: LIST
78291: LIST
78292: LIST
78293: PUSH
78294: LD_VAR 0 4
78298: PUSH
78299: LD_INT 1
78301: PLUS
78302: ARRAY
78303: ST_TO_ADDR
78304: GO 78671
78306: LD_INT 6
78308: DOUBLE
78309: EQUAL
78310: IFTRUE 78362
78312: LD_INT 7
78314: DOUBLE
78315: EQUAL
78316: IFTRUE 78362
78318: LD_INT 8
78320: DOUBLE
78321: EQUAL
78322: IFTRUE 78362
78324: LD_INT 13
78326: DOUBLE
78327: EQUAL
78328: IFTRUE 78362
78330: LD_INT 12
78332: DOUBLE
78333: EQUAL
78334: IFTRUE 78362
78336: LD_INT 15
78338: DOUBLE
78339: EQUAL
78340: IFTRUE 78362
78342: LD_INT 11
78344: DOUBLE
78345: EQUAL
78346: IFTRUE 78362
78348: LD_INT 14
78350: DOUBLE
78351: EQUAL
78352: IFTRUE 78362
78354: LD_INT 10
78356: DOUBLE
78357: EQUAL
78358: IFTRUE 78362
78360: GO 78418
78362: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
78363: LD_ADDR_VAR 0 9
78367: PUSH
78368: LD_VAR 0 41
78372: PUSH
78373: LD_VAR 0 42
78377: PUSH
78378: LD_VAR 0 43
78382: PUSH
78383: LD_VAR 0 44
78387: PUSH
78388: LD_VAR 0 45
78392: PUSH
78393: LD_VAR 0 46
78397: PUSH
78398: EMPTY
78399: LIST
78400: LIST
78401: LIST
78402: LIST
78403: LIST
78404: LIST
78405: PUSH
78406: LD_VAR 0 4
78410: PUSH
78411: LD_INT 1
78413: PLUS
78414: ARRAY
78415: ST_TO_ADDR
78416: GO 78671
78418: LD_INT 36
78420: DOUBLE
78421: EQUAL
78422: IFTRUE 78426
78424: GO 78482
78426: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
78427: LD_ADDR_VAR 0 9
78431: PUSH
78432: LD_VAR 0 47
78436: PUSH
78437: LD_VAR 0 48
78441: PUSH
78442: LD_VAR 0 49
78446: PUSH
78447: LD_VAR 0 50
78451: PUSH
78452: LD_VAR 0 51
78456: PUSH
78457: LD_VAR 0 52
78461: PUSH
78462: EMPTY
78463: LIST
78464: LIST
78465: LIST
78466: LIST
78467: LIST
78468: LIST
78469: PUSH
78470: LD_VAR 0 4
78474: PUSH
78475: LD_INT 1
78477: PLUS
78478: ARRAY
78479: ST_TO_ADDR
78480: GO 78671
78482: LD_INT 4
78484: DOUBLE
78485: EQUAL
78486: IFTRUE 78508
78488: LD_INT 5
78490: DOUBLE
78491: EQUAL
78492: IFTRUE 78508
78494: LD_INT 34
78496: DOUBLE
78497: EQUAL
78498: IFTRUE 78508
78500: LD_INT 37
78502: DOUBLE
78503: EQUAL
78504: IFTRUE 78508
78506: GO 78564
78508: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
78509: LD_ADDR_VAR 0 9
78513: PUSH
78514: LD_VAR 0 53
78518: PUSH
78519: LD_VAR 0 54
78523: PUSH
78524: LD_VAR 0 55
78528: PUSH
78529: LD_VAR 0 56
78533: PUSH
78534: LD_VAR 0 57
78538: PUSH
78539: LD_VAR 0 58
78543: PUSH
78544: EMPTY
78545: LIST
78546: LIST
78547: LIST
78548: LIST
78549: LIST
78550: LIST
78551: PUSH
78552: LD_VAR 0 4
78556: PUSH
78557: LD_INT 1
78559: PLUS
78560: ARRAY
78561: ST_TO_ADDR
78562: GO 78671
78564: LD_INT 31
78566: DOUBLE
78567: EQUAL
78568: IFTRUE 78614
78570: LD_INT 32
78572: DOUBLE
78573: EQUAL
78574: IFTRUE 78614
78576: LD_INT 33
78578: DOUBLE
78579: EQUAL
78580: IFTRUE 78614
78582: LD_INT 27
78584: DOUBLE
78585: EQUAL
78586: IFTRUE 78614
78588: LD_INT 26
78590: DOUBLE
78591: EQUAL
78592: IFTRUE 78614
78594: LD_INT 28
78596: DOUBLE
78597: EQUAL
78598: IFTRUE 78614
78600: LD_INT 29
78602: DOUBLE
78603: EQUAL
78604: IFTRUE 78614
78606: LD_INT 30
78608: DOUBLE
78609: EQUAL
78610: IFTRUE 78614
78612: GO 78670
78614: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
78615: LD_ADDR_VAR 0 9
78619: PUSH
78620: LD_VAR 0 59
78624: PUSH
78625: LD_VAR 0 60
78629: PUSH
78630: LD_VAR 0 61
78634: PUSH
78635: LD_VAR 0 62
78639: PUSH
78640: LD_VAR 0 63
78644: PUSH
78645: LD_VAR 0 64
78649: PUSH
78650: EMPTY
78651: LIST
78652: LIST
78653: LIST
78654: LIST
78655: LIST
78656: LIST
78657: PUSH
78658: LD_VAR 0 4
78662: PUSH
78663: LD_INT 1
78665: PLUS
78666: ARRAY
78667: ST_TO_ADDR
78668: GO 78671
78670: POP
// temp_list2 = [ ] ;
78671: LD_ADDR_VAR 0 10
78675: PUSH
78676: EMPTY
78677: ST_TO_ADDR
// for i in temp_list do
78678: LD_ADDR_VAR 0 8
78682: PUSH
78683: LD_VAR 0 9
78687: PUSH
78688: FOR_IN
78689: IFFALSE 78741
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
78691: LD_ADDR_VAR 0 10
78695: PUSH
78696: LD_VAR 0 10
78700: PUSH
78701: LD_VAR 0 8
78705: PUSH
78706: LD_INT 1
78708: ARRAY
78709: PUSH
78710: LD_VAR 0 2
78714: PLUS
78715: PUSH
78716: LD_VAR 0 8
78720: PUSH
78721: LD_INT 2
78723: ARRAY
78724: PUSH
78725: LD_VAR 0 3
78729: PLUS
78730: PUSH
78731: EMPTY
78732: LIST
78733: LIST
78734: PUSH
78735: EMPTY
78736: LIST
78737: ADD
78738: ST_TO_ADDR
78739: GO 78688
78741: POP
78742: POP
// result = temp_list2 ;
78743: LD_ADDR_VAR 0 7
78747: PUSH
78748: LD_VAR 0 10
78752: ST_TO_ADDR
// end ;
78753: LD_VAR 0 7
78757: RET
// export function EnemyInRange ( unit , dist ) ; begin
78758: LD_INT 0
78760: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
78761: LD_ADDR_VAR 0 3
78765: PUSH
78766: LD_VAR 0 1
78770: PPUSH
78771: CALL_OW 255
78775: PPUSH
78776: LD_VAR 0 1
78780: PPUSH
78781: CALL_OW 250
78785: PPUSH
78786: LD_VAR 0 1
78790: PPUSH
78791: CALL_OW 251
78795: PPUSH
78796: LD_VAR 0 2
78800: PPUSH
78801: CALL 52154 0 4
78805: PUSH
78806: LD_INT 4
78808: ARRAY
78809: ST_TO_ADDR
// end ;
78810: LD_VAR 0 3
78814: RET
// export function PlayerSeeMe ( unit ) ; begin
78815: LD_INT 0
78817: PPUSH
// result := See ( your_side , unit ) ;
78818: LD_ADDR_VAR 0 2
78822: PUSH
78823: LD_OWVAR 2
78827: PPUSH
78828: LD_VAR 0 1
78832: PPUSH
78833: CALL_OW 292
78837: ST_TO_ADDR
// end ;
78838: LD_VAR 0 2
78842: RET
// export function ReverseDir ( unit ) ; begin
78843: LD_INT 0
78845: PPUSH
// if not unit then
78846: LD_VAR 0 1
78850: NOT
78851: IFFALSE 78855
// exit ;
78853: GO 78878
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
78855: LD_ADDR_VAR 0 2
78859: PUSH
78860: LD_VAR 0 1
78864: PPUSH
78865: CALL_OW 254
78869: PUSH
78870: LD_INT 3
78872: PLUS
78873: PUSH
78874: LD_INT 6
78876: MOD
78877: ST_TO_ADDR
// end ;
78878: LD_VAR 0 2
78882: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
78883: LD_INT 0
78885: PPUSH
78886: PPUSH
78887: PPUSH
78888: PPUSH
78889: PPUSH
// if not hexes then
78890: LD_VAR 0 2
78894: NOT
78895: IFFALSE 78899
// exit ;
78897: GO 79047
// dist := 9999 ;
78899: LD_ADDR_VAR 0 5
78903: PUSH
78904: LD_INT 9999
78906: ST_TO_ADDR
// for i = 1 to hexes do
78907: LD_ADDR_VAR 0 4
78911: PUSH
78912: DOUBLE
78913: LD_INT 1
78915: DEC
78916: ST_TO_ADDR
78917: LD_VAR 0 2
78921: PUSH
78922: FOR_TO
78923: IFFALSE 79035
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
78925: LD_VAR 0 1
78929: PPUSH
78930: LD_VAR 0 2
78934: PUSH
78935: LD_VAR 0 4
78939: ARRAY
78940: PUSH
78941: LD_INT 1
78943: ARRAY
78944: PPUSH
78945: LD_VAR 0 2
78949: PUSH
78950: LD_VAR 0 4
78954: ARRAY
78955: PUSH
78956: LD_INT 2
78958: ARRAY
78959: PPUSH
78960: CALL_OW 297
78964: PUSH
78965: LD_VAR 0 5
78969: LESS
78970: IFFALSE 79033
// begin hex := hexes [ i ] ;
78972: LD_ADDR_VAR 0 7
78976: PUSH
78977: LD_VAR 0 2
78981: PUSH
78982: LD_VAR 0 4
78986: ARRAY
78987: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
78988: LD_ADDR_VAR 0 5
78992: PUSH
78993: LD_VAR 0 1
78997: PPUSH
78998: LD_VAR 0 2
79002: PUSH
79003: LD_VAR 0 4
79007: ARRAY
79008: PUSH
79009: LD_INT 1
79011: ARRAY
79012: PPUSH
79013: LD_VAR 0 2
79017: PUSH
79018: LD_VAR 0 4
79022: ARRAY
79023: PUSH
79024: LD_INT 2
79026: ARRAY
79027: PPUSH
79028: CALL_OW 297
79032: ST_TO_ADDR
// end ; end ;
79033: GO 78922
79035: POP
79036: POP
// result := hex ;
79037: LD_ADDR_VAR 0 3
79041: PUSH
79042: LD_VAR 0 7
79046: ST_TO_ADDR
// end ;
79047: LD_VAR 0 3
79051: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
79052: LD_INT 0
79054: PPUSH
79055: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
79056: LD_VAR 0 1
79060: NOT
79061: PUSH
79062: LD_VAR 0 1
79066: PUSH
79067: LD_INT 21
79069: PUSH
79070: LD_INT 2
79072: PUSH
79073: EMPTY
79074: LIST
79075: LIST
79076: PUSH
79077: LD_INT 23
79079: PUSH
79080: LD_INT 2
79082: PUSH
79083: EMPTY
79084: LIST
79085: LIST
79086: PUSH
79087: EMPTY
79088: LIST
79089: LIST
79090: PPUSH
79091: CALL_OW 69
79095: IN
79096: NOT
79097: OR
79098: IFFALSE 79102
// exit ;
79100: GO 79149
// for i = 1 to 3 do
79102: LD_ADDR_VAR 0 3
79106: PUSH
79107: DOUBLE
79108: LD_INT 1
79110: DEC
79111: ST_TO_ADDR
79112: LD_INT 3
79114: PUSH
79115: FOR_TO
79116: IFFALSE 79147
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
79118: LD_VAR 0 1
79122: PPUSH
79123: CALL_OW 250
79127: PPUSH
79128: LD_VAR 0 1
79132: PPUSH
79133: CALL_OW 251
79137: PPUSH
79138: LD_INT 1
79140: PPUSH
79141: CALL_OW 453
79145: GO 79115
79147: POP
79148: POP
// end ;
79149: LD_VAR 0 2
79153: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
79154: LD_INT 0
79156: PPUSH
79157: PPUSH
79158: PPUSH
79159: PPUSH
79160: PPUSH
79161: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
79162: LD_VAR 0 1
79166: NOT
79167: PUSH
79168: LD_VAR 0 2
79172: NOT
79173: OR
79174: PUSH
79175: LD_VAR 0 1
79179: PPUSH
79180: CALL_OW 314
79184: OR
79185: IFFALSE 79189
// exit ;
79187: GO 79630
// x := GetX ( enemy_unit ) ;
79189: LD_ADDR_VAR 0 7
79193: PUSH
79194: LD_VAR 0 2
79198: PPUSH
79199: CALL_OW 250
79203: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
79204: LD_ADDR_VAR 0 8
79208: PUSH
79209: LD_VAR 0 2
79213: PPUSH
79214: CALL_OW 251
79218: ST_TO_ADDR
// if not x or not y then
79219: LD_VAR 0 7
79223: NOT
79224: PUSH
79225: LD_VAR 0 8
79229: NOT
79230: OR
79231: IFFALSE 79235
// exit ;
79233: GO 79630
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
79235: LD_ADDR_VAR 0 6
79239: PUSH
79240: LD_VAR 0 7
79244: PPUSH
79245: LD_INT 0
79247: PPUSH
79248: LD_INT 4
79250: PPUSH
79251: CALL_OW 272
79255: PUSH
79256: LD_VAR 0 8
79260: PPUSH
79261: LD_INT 0
79263: PPUSH
79264: LD_INT 4
79266: PPUSH
79267: CALL_OW 273
79271: PUSH
79272: EMPTY
79273: LIST
79274: LIST
79275: PUSH
79276: LD_VAR 0 7
79280: PPUSH
79281: LD_INT 1
79283: PPUSH
79284: LD_INT 4
79286: PPUSH
79287: CALL_OW 272
79291: PUSH
79292: LD_VAR 0 8
79296: PPUSH
79297: LD_INT 1
79299: PPUSH
79300: LD_INT 4
79302: PPUSH
79303: CALL_OW 273
79307: PUSH
79308: EMPTY
79309: LIST
79310: LIST
79311: PUSH
79312: LD_VAR 0 7
79316: PPUSH
79317: LD_INT 2
79319: PPUSH
79320: LD_INT 4
79322: PPUSH
79323: CALL_OW 272
79327: PUSH
79328: LD_VAR 0 8
79332: PPUSH
79333: LD_INT 2
79335: PPUSH
79336: LD_INT 4
79338: PPUSH
79339: CALL_OW 273
79343: PUSH
79344: EMPTY
79345: LIST
79346: LIST
79347: PUSH
79348: LD_VAR 0 7
79352: PPUSH
79353: LD_INT 3
79355: PPUSH
79356: LD_INT 4
79358: PPUSH
79359: CALL_OW 272
79363: PUSH
79364: LD_VAR 0 8
79368: PPUSH
79369: LD_INT 3
79371: PPUSH
79372: LD_INT 4
79374: PPUSH
79375: CALL_OW 273
79379: PUSH
79380: EMPTY
79381: LIST
79382: LIST
79383: PUSH
79384: LD_VAR 0 7
79388: PPUSH
79389: LD_INT 4
79391: PPUSH
79392: LD_INT 4
79394: PPUSH
79395: CALL_OW 272
79399: PUSH
79400: LD_VAR 0 8
79404: PPUSH
79405: LD_INT 4
79407: PPUSH
79408: LD_INT 4
79410: PPUSH
79411: CALL_OW 273
79415: PUSH
79416: EMPTY
79417: LIST
79418: LIST
79419: PUSH
79420: LD_VAR 0 7
79424: PPUSH
79425: LD_INT 5
79427: PPUSH
79428: LD_INT 4
79430: PPUSH
79431: CALL_OW 272
79435: PUSH
79436: LD_VAR 0 8
79440: PPUSH
79441: LD_INT 5
79443: PPUSH
79444: LD_INT 4
79446: PPUSH
79447: CALL_OW 273
79451: PUSH
79452: EMPTY
79453: LIST
79454: LIST
79455: PUSH
79456: EMPTY
79457: LIST
79458: LIST
79459: LIST
79460: LIST
79461: LIST
79462: LIST
79463: ST_TO_ADDR
// for i = tmp downto 1 do
79464: LD_ADDR_VAR 0 4
79468: PUSH
79469: DOUBLE
79470: LD_VAR 0 6
79474: INC
79475: ST_TO_ADDR
79476: LD_INT 1
79478: PUSH
79479: FOR_DOWNTO
79480: IFFALSE 79581
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
79482: LD_VAR 0 6
79486: PUSH
79487: LD_VAR 0 4
79491: ARRAY
79492: PUSH
79493: LD_INT 1
79495: ARRAY
79496: PPUSH
79497: LD_VAR 0 6
79501: PUSH
79502: LD_VAR 0 4
79506: ARRAY
79507: PUSH
79508: LD_INT 2
79510: ARRAY
79511: PPUSH
79512: CALL_OW 488
79516: NOT
79517: PUSH
79518: LD_VAR 0 6
79522: PUSH
79523: LD_VAR 0 4
79527: ARRAY
79528: PUSH
79529: LD_INT 1
79531: ARRAY
79532: PPUSH
79533: LD_VAR 0 6
79537: PUSH
79538: LD_VAR 0 4
79542: ARRAY
79543: PUSH
79544: LD_INT 2
79546: ARRAY
79547: PPUSH
79548: CALL_OW 428
79552: PUSH
79553: LD_INT 0
79555: NONEQUAL
79556: OR
79557: IFFALSE 79579
// tmp := Delete ( tmp , i ) ;
79559: LD_ADDR_VAR 0 6
79563: PUSH
79564: LD_VAR 0 6
79568: PPUSH
79569: LD_VAR 0 4
79573: PPUSH
79574: CALL_OW 3
79578: ST_TO_ADDR
79579: GO 79479
79581: POP
79582: POP
// j := GetClosestHex ( unit , tmp ) ;
79583: LD_ADDR_VAR 0 5
79587: PUSH
79588: LD_VAR 0 1
79592: PPUSH
79593: LD_VAR 0 6
79597: PPUSH
79598: CALL 78883 0 2
79602: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
79603: LD_VAR 0 1
79607: PPUSH
79608: LD_VAR 0 5
79612: PUSH
79613: LD_INT 1
79615: ARRAY
79616: PPUSH
79617: LD_VAR 0 5
79621: PUSH
79622: LD_INT 2
79624: ARRAY
79625: PPUSH
79626: CALL_OW 111
// end ;
79630: LD_VAR 0 3
79634: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
79635: LD_INT 0
79637: PPUSH
79638: PPUSH
79639: PPUSH
// uc_side = 0 ;
79640: LD_ADDR_OWVAR 20
79644: PUSH
79645: LD_INT 0
79647: ST_TO_ADDR
// uc_nation = 0 ;
79648: LD_ADDR_OWVAR 21
79652: PUSH
79653: LD_INT 0
79655: ST_TO_ADDR
// InitHc_All ( ) ;
79656: CALL_OW 584
// InitVc ;
79660: CALL_OW 20
// if mastodonts then
79664: LD_VAR 0 6
79668: IFFALSE 79735
// for i = 1 to mastodonts do
79670: LD_ADDR_VAR 0 11
79674: PUSH
79675: DOUBLE
79676: LD_INT 1
79678: DEC
79679: ST_TO_ADDR
79680: LD_VAR 0 6
79684: PUSH
79685: FOR_TO
79686: IFFALSE 79733
// begin vc_chassis := 31 ;
79688: LD_ADDR_OWVAR 37
79692: PUSH
79693: LD_INT 31
79695: ST_TO_ADDR
// vc_control := control_rider ;
79696: LD_ADDR_OWVAR 38
79700: PUSH
79701: LD_INT 4
79703: ST_TO_ADDR
// animal := CreateVehicle ;
79704: LD_ADDR_VAR 0 12
79708: PUSH
79709: CALL_OW 45
79713: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79714: LD_VAR 0 12
79718: PPUSH
79719: LD_VAR 0 8
79723: PPUSH
79724: LD_INT 0
79726: PPUSH
79727: CALL 81870 0 3
// end ;
79731: GO 79685
79733: POP
79734: POP
// if horses then
79735: LD_VAR 0 5
79739: IFFALSE 79806
// for i = 1 to horses do
79741: LD_ADDR_VAR 0 11
79745: PUSH
79746: DOUBLE
79747: LD_INT 1
79749: DEC
79750: ST_TO_ADDR
79751: LD_VAR 0 5
79755: PUSH
79756: FOR_TO
79757: IFFALSE 79804
// begin hc_class := 21 ;
79759: LD_ADDR_OWVAR 28
79763: PUSH
79764: LD_INT 21
79766: ST_TO_ADDR
// hc_gallery :=  ;
79767: LD_ADDR_OWVAR 33
79771: PUSH
79772: LD_STRING 
79774: ST_TO_ADDR
// animal := CreateHuman ;
79775: LD_ADDR_VAR 0 12
79779: PUSH
79780: CALL_OW 44
79784: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79785: LD_VAR 0 12
79789: PPUSH
79790: LD_VAR 0 8
79794: PPUSH
79795: LD_INT 0
79797: PPUSH
79798: CALL 81870 0 3
// end ;
79802: GO 79756
79804: POP
79805: POP
// if birds then
79806: LD_VAR 0 1
79810: IFFALSE 79877
// for i = 1 to birds do
79812: LD_ADDR_VAR 0 11
79816: PUSH
79817: DOUBLE
79818: LD_INT 1
79820: DEC
79821: ST_TO_ADDR
79822: LD_VAR 0 1
79826: PUSH
79827: FOR_TO
79828: IFFALSE 79875
// begin hc_class = 18 ;
79830: LD_ADDR_OWVAR 28
79834: PUSH
79835: LD_INT 18
79837: ST_TO_ADDR
// hc_gallery =  ;
79838: LD_ADDR_OWVAR 33
79842: PUSH
79843: LD_STRING 
79845: ST_TO_ADDR
// animal := CreateHuman ;
79846: LD_ADDR_VAR 0 12
79850: PUSH
79851: CALL_OW 44
79855: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79856: LD_VAR 0 12
79860: PPUSH
79861: LD_VAR 0 8
79865: PPUSH
79866: LD_INT 0
79868: PPUSH
79869: CALL 81870 0 3
// end ;
79873: GO 79827
79875: POP
79876: POP
// if tigers then
79877: LD_VAR 0 2
79881: IFFALSE 79965
// for i = 1 to tigers do
79883: LD_ADDR_VAR 0 11
79887: PUSH
79888: DOUBLE
79889: LD_INT 1
79891: DEC
79892: ST_TO_ADDR
79893: LD_VAR 0 2
79897: PUSH
79898: FOR_TO
79899: IFFALSE 79963
// begin hc_class = class_tiger ;
79901: LD_ADDR_OWVAR 28
79905: PUSH
79906: LD_INT 14
79908: ST_TO_ADDR
// hc_gallery =  ;
79909: LD_ADDR_OWVAR 33
79913: PUSH
79914: LD_STRING 
79916: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
79917: LD_ADDR_OWVAR 35
79921: PUSH
79922: LD_INT 7
79924: NEG
79925: PPUSH
79926: LD_INT 7
79928: PPUSH
79929: CALL_OW 12
79933: ST_TO_ADDR
// animal := CreateHuman ;
79934: LD_ADDR_VAR 0 12
79938: PUSH
79939: CALL_OW 44
79943: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79944: LD_VAR 0 12
79948: PPUSH
79949: LD_VAR 0 8
79953: PPUSH
79954: LD_INT 0
79956: PPUSH
79957: CALL 81870 0 3
// end ;
79961: GO 79898
79963: POP
79964: POP
// if apemans then
79965: LD_VAR 0 3
79969: IFFALSE 80092
// for i = 1 to apemans do
79971: LD_ADDR_VAR 0 11
79975: PUSH
79976: DOUBLE
79977: LD_INT 1
79979: DEC
79980: ST_TO_ADDR
79981: LD_VAR 0 3
79985: PUSH
79986: FOR_TO
79987: IFFALSE 80090
// begin hc_class = class_apeman ;
79989: LD_ADDR_OWVAR 28
79993: PUSH
79994: LD_INT 12
79996: ST_TO_ADDR
// hc_gallery =  ;
79997: LD_ADDR_OWVAR 33
80001: PUSH
80002: LD_STRING 
80004: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
80005: LD_ADDR_OWVAR 35
80009: PUSH
80010: LD_INT 2
80012: NEG
80013: PPUSH
80014: LD_INT 2
80016: PPUSH
80017: CALL_OW 12
80021: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
80022: LD_ADDR_OWVAR 31
80026: PUSH
80027: LD_INT 1
80029: PPUSH
80030: LD_INT 3
80032: PPUSH
80033: CALL_OW 12
80037: PUSH
80038: LD_INT 1
80040: PPUSH
80041: LD_INT 3
80043: PPUSH
80044: CALL_OW 12
80048: PUSH
80049: LD_INT 0
80051: PUSH
80052: LD_INT 0
80054: PUSH
80055: EMPTY
80056: LIST
80057: LIST
80058: LIST
80059: LIST
80060: ST_TO_ADDR
// animal := CreateHuman ;
80061: LD_ADDR_VAR 0 12
80065: PUSH
80066: CALL_OW 44
80070: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80071: LD_VAR 0 12
80075: PPUSH
80076: LD_VAR 0 8
80080: PPUSH
80081: LD_INT 0
80083: PPUSH
80084: CALL 81870 0 3
// end ;
80088: GO 79986
80090: POP
80091: POP
// if enchidnas then
80092: LD_VAR 0 4
80096: IFFALSE 80163
// for i = 1 to enchidnas do
80098: LD_ADDR_VAR 0 11
80102: PUSH
80103: DOUBLE
80104: LD_INT 1
80106: DEC
80107: ST_TO_ADDR
80108: LD_VAR 0 4
80112: PUSH
80113: FOR_TO
80114: IFFALSE 80161
// begin hc_class = 13 ;
80116: LD_ADDR_OWVAR 28
80120: PUSH
80121: LD_INT 13
80123: ST_TO_ADDR
// hc_gallery =  ;
80124: LD_ADDR_OWVAR 33
80128: PUSH
80129: LD_STRING 
80131: ST_TO_ADDR
// animal := CreateHuman ;
80132: LD_ADDR_VAR 0 12
80136: PUSH
80137: CALL_OW 44
80141: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80142: LD_VAR 0 12
80146: PPUSH
80147: LD_VAR 0 8
80151: PPUSH
80152: LD_INT 0
80154: PPUSH
80155: CALL 81870 0 3
// end ;
80159: GO 80113
80161: POP
80162: POP
// if fishes then
80163: LD_VAR 0 7
80167: IFFALSE 80234
// for i = 1 to fishes do
80169: LD_ADDR_VAR 0 11
80173: PUSH
80174: DOUBLE
80175: LD_INT 1
80177: DEC
80178: ST_TO_ADDR
80179: LD_VAR 0 7
80183: PUSH
80184: FOR_TO
80185: IFFALSE 80232
// begin hc_class = 20 ;
80187: LD_ADDR_OWVAR 28
80191: PUSH
80192: LD_INT 20
80194: ST_TO_ADDR
// hc_gallery =  ;
80195: LD_ADDR_OWVAR 33
80199: PUSH
80200: LD_STRING 
80202: ST_TO_ADDR
// animal := CreateHuman ;
80203: LD_ADDR_VAR 0 12
80207: PUSH
80208: CALL_OW 44
80212: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
80213: LD_VAR 0 12
80217: PPUSH
80218: LD_VAR 0 9
80222: PPUSH
80223: LD_INT 0
80225: PPUSH
80226: CALL 81870 0 3
// end ;
80230: GO 80184
80232: POP
80233: POP
// end ;
80234: LD_VAR 0 10
80238: RET
// export function WantHeal ( sci , unit ) ; begin
80239: LD_INT 0
80241: PPUSH
// if GetTaskList ( sci ) > 0 then
80242: LD_VAR 0 1
80246: PPUSH
80247: CALL_OW 437
80251: PUSH
80252: LD_INT 0
80254: GREATER
80255: IFFALSE 80325
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
80257: LD_VAR 0 1
80261: PPUSH
80262: CALL_OW 437
80266: PUSH
80267: LD_INT 1
80269: ARRAY
80270: PUSH
80271: LD_INT 1
80273: ARRAY
80274: PUSH
80275: LD_STRING l
80277: EQUAL
80278: PUSH
80279: LD_VAR 0 1
80283: PPUSH
80284: CALL_OW 437
80288: PUSH
80289: LD_INT 1
80291: ARRAY
80292: PUSH
80293: LD_INT 4
80295: ARRAY
80296: PUSH
80297: LD_VAR 0 2
80301: EQUAL
80302: AND
80303: IFFALSE 80315
// result := true else
80305: LD_ADDR_VAR 0 3
80309: PUSH
80310: LD_INT 1
80312: ST_TO_ADDR
80313: GO 80323
// result := false ;
80315: LD_ADDR_VAR 0 3
80319: PUSH
80320: LD_INT 0
80322: ST_TO_ADDR
// end else
80323: GO 80333
// result := false ;
80325: LD_ADDR_VAR 0 3
80329: PUSH
80330: LD_INT 0
80332: ST_TO_ADDR
// end ;
80333: LD_VAR 0 3
80337: RET
// export function HealTarget ( sci ) ; begin
80338: LD_INT 0
80340: PPUSH
// if not sci then
80341: LD_VAR 0 1
80345: NOT
80346: IFFALSE 80350
// exit ;
80348: GO 80415
// result := 0 ;
80350: LD_ADDR_VAR 0 2
80354: PUSH
80355: LD_INT 0
80357: ST_TO_ADDR
// if GetTaskList ( sci ) then
80358: LD_VAR 0 1
80362: PPUSH
80363: CALL_OW 437
80367: IFFALSE 80415
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
80369: LD_VAR 0 1
80373: PPUSH
80374: CALL_OW 437
80378: PUSH
80379: LD_INT 1
80381: ARRAY
80382: PUSH
80383: LD_INT 1
80385: ARRAY
80386: PUSH
80387: LD_STRING l
80389: EQUAL
80390: IFFALSE 80415
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
80392: LD_ADDR_VAR 0 2
80396: PUSH
80397: LD_VAR 0 1
80401: PPUSH
80402: CALL_OW 437
80406: PUSH
80407: LD_INT 1
80409: ARRAY
80410: PUSH
80411: LD_INT 4
80413: ARRAY
80414: ST_TO_ADDR
// end ;
80415: LD_VAR 0 2
80419: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
80420: LD_INT 0
80422: PPUSH
80423: PPUSH
80424: PPUSH
80425: PPUSH
// if not base_units then
80426: LD_VAR 0 1
80430: NOT
80431: IFFALSE 80435
// exit ;
80433: GO 80522
// result := false ;
80435: LD_ADDR_VAR 0 2
80439: PUSH
80440: LD_INT 0
80442: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
80443: LD_ADDR_VAR 0 5
80447: PUSH
80448: LD_VAR 0 1
80452: PPUSH
80453: LD_INT 21
80455: PUSH
80456: LD_INT 3
80458: PUSH
80459: EMPTY
80460: LIST
80461: LIST
80462: PPUSH
80463: CALL_OW 72
80467: ST_TO_ADDR
// if not tmp then
80468: LD_VAR 0 5
80472: NOT
80473: IFFALSE 80477
// exit ;
80475: GO 80522
// for i in tmp do
80477: LD_ADDR_VAR 0 3
80481: PUSH
80482: LD_VAR 0 5
80486: PUSH
80487: FOR_IN
80488: IFFALSE 80520
// begin result := EnemyInRange ( i , 22 ) ;
80490: LD_ADDR_VAR 0 2
80494: PUSH
80495: LD_VAR 0 3
80499: PPUSH
80500: LD_INT 22
80502: PPUSH
80503: CALL 78758 0 2
80507: ST_TO_ADDR
// if result then
80508: LD_VAR 0 2
80512: IFFALSE 80518
// exit ;
80514: POP
80515: POP
80516: GO 80522
// end ;
80518: GO 80487
80520: POP
80521: POP
// end ;
80522: LD_VAR 0 2
80526: RET
// export function FilterByTag ( units , tag ) ; begin
80527: LD_INT 0
80529: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
80530: LD_ADDR_VAR 0 3
80534: PUSH
80535: LD_VAR 0 1
80539: PPUSH
80540: LD_INT 120
80542: PUSH
80543: LD_VAR 0 2
80547: PUSH
80548: EMPTY
80549: LIST
80550: LIST
80551: PPUSH
80552: CALL_OW 72
80556: ST_TO_ADDR
// end ;
80557: LD_VAR 0 3
80561: RET
// export function IsDriver ( un ) ; begin
80562: LD_INT 0
80564: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
80565: LD_ADDR_VAR 0 2
80569: PUSH
80570: LD_VAR 0 1
80574: PUSH
80575: LD_INT 55
80577: PUSH
80578: EMPTY
80579: LIST
80580: PPUSH
80581: CALL_OW 69
80585: IN
80586: ST_TO_ADDR
// end ;
80587: LD_VAR 0 2
80591: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
80592: LD_INT 0
80594: PPUSH
80595: PPUSH
// list := [ ] ;
80596: LD_ADDR_VAR 0 5
80600: PUSH
80601: EMPTY
80602: ST_TO_ADDR
// case d of 0 :
80603: LD_VAR 0 3
80607: PUSH
80608: LD_INT 0
80610: DOUBLE
80611: EQUAL
80612: IFTRUE 80616
80614: GO 80749
80616: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
80617: LD_ADDR_VAR 0 5
80621: PUSH
80622: LD_VAR 0 1
80626: PUSH
80627: LD_INT 4
80629: MINUS
80630: PUSH
80631: LD_VAR 0 2
80635: PUSH
80636: LD_INT 4
80638: MINUS
80639: PUSH
80640: LD_INT 2
80642: PUSH
80643: EMPTY
80644: LIST
80645: LIST
80646: LIST
80647: PUSH
80648: LD_VAR 0 1
80652: PUSH
80653: LD_INT 3
80655: MINUS
80656: PUSH
80657: LD_VAR 0 2
80661: PUSH
80662: LD_INT 1
80664: PUSH
80665: EMPTY
80666: LIST
80667: LIST
80668: LIST
80669: PUSH
80670: LD_VAR 0 1
80674: PUSH
80675: LD_INT 4
80677: PLUS
80678: PUSH
80679: LD_VAR 0 2
80683: PUSH
80684: LD_INT 4
80686: PUSH
80687: EMPTY
80688: LIST
80689: LIST
80690: LIST
80691: PUSH
80692: LD_VAR 0 1
80696: PUSH
80697: LD_INT 3
80699: PLUS
80700: PUSH
80701: LD_VAR 0 2
80705: PUSH
80706: LD_INT 3
80708: PLUS
80709: PUSH
80710: LD_INT 5
80712: PUSH
80713: EMPTY
80714: LIST
80715: LIST
80716: LIST
80717: PUSH
80718: LD_VAR 0 1
80722: PUSH
80723: LD_VAR 0 2
80727: PUSH
80728: LD_INT 4
80730: PLUS
80731: PUSH
80732: LD_INT 0
80734: PUSH
80735: EMPTY
80736: LIST
80737: LIST
80738: LIST
80739: PUSH
80740: EMPTY
80741: LIST
80742: LIST
80743: LIST
80744: LIST
80745: LIST
80746: ST_TO_ADDR
// end ; 1 :
80747: GO 81447
80749: LD_INT 1
80751: DOUBLE
80752: EQUAL
80753: IFTRUE 80757
80755: GO 80890
80757: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
80758: LD_ADDR_VAR 0 5
80762: PUSH
80763: LD_VAR 0 1
80767: PUSH
80768: LD_VAR 0 2
80772: PUSH
80773: LD_INT 4
80775: MINUS
80776: PUSH
80777: LD_INT 3
80779: PUSH
80780: EMPTY
80781: LIST
80782: LIST
80783: LIST
80784: PUSH
80785: LD_VAR 0 1
80789: PUSH
80790: LD_INT 3
80792: MINUS
80793: PUSH
80794: LD_VAR 0 2
80798: PUSH
80799: LD_INT 3
80801: MINUS
80802: PUSH
80803: LD_INT 2
80805: PUSH
80806: EMPTY
80807: LIST
80808: LIST
80809: LIST
80810: PUSH
80811: LD_VAR 0 1
80815: PUSH
80816: LD_INT 4
80818: MINUS
80819: PUSH
80820: LD_VAR 0 2
80824: PUSH
80825: LD_INT 1
80827: PUSH
80828: EMPTY
80829: LIST
80830: LIST
80831: LIST
80832: PUSH
80833: LD_VAR 0 1
80837: PUSH
80838: LD_VAR 0 2
80842: PUSH
80843: LD_INT 3
80845: PLUS
80846: PUSH
80847: LD_INT 0
80849: PUSH
80850: EMPTY
80851: LIST
80852: LIST
80853: LIST
80854: PUSH
80855: LD_VAR 0 1
80859: PUSH
80860: LD_INT 4
80862: PLUS
80863: PUSH
80864: LD_VAR 0 2
80868: PUSH
80869: LD_INT 4
80871: PLUS
80872: PUSH
80873: LD_INT 5
80875: PUSH
80876: EMPTY
80877: LIST
80878: LIST
80879: LIST
80880: PUSH
80881: EMPTY
80882: LIST
80883: LIST
80884: LIST
80885: LIST
80886: LIST
80887: ST_TO_ADDR
// end ; 2 :
80888: GO 81447
80890: LD_INT 2
80892: DOUBLE
80893: EQUAL
80894: IFTRUE 80898
80896: GO 81027
80898: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
80899: LD_ADDR_VAR 0 5
80903: PUSH
80904: LD_VAR 0 1
80908: PUSH
80909: LD_VAR 0 2
80913: PUSH
80914: LD_INT 3
80916: MINUS
80917: PUSH
80918: LD_INT 3
80920: PUSH
80921: EMPTY
80922: LIST
80923: LIST
80924: LIST
80925: PUSH
80926: LD_VAR 0 1
80930: PUSH
80931: LD_INT 4
80933: PLUS
80934: PUSH
80935: LD_VAR 0 2
80939: PUSH
80940: LD_INT 4
80942: PUSH
80943: EMPTY
80944: LIST
80945: LIST
80946: LIST
80947: PUSH
80948: LD_VAR 0 1
80952: PUSH
80953: LD_VAR 0 2
80957: PUSH
80958: LD_INT 4
80960: PLUS
80961: PUSH
80962: LD_INT 0
80964: PUSH
80965: EMPTY
80966: LIST
80967: LIST
80968: LIST
80969: PUSH
80970: LD_VAR 0 1
80974: PUSH
80975: LD_INT 3
80977: MINUS
80978: PUSH
80979: LD_VAR 0 2
80983: PUSH
80984: LD_INT 1
80986: PUSH
80987: EMPTY
80988: LIST
80989: LIST
80990: LIST
80991: PUSH
80992: LD_VAR 0 1
80996: PUSH
80997: LD_INT 4
80999: MINUS
81000: PUSH
81001: LD_VAR 0 2
81005: PUSH
81006: LD_INT 4
81008: MINUS
81009: PUSH
81010: LD_INT 2
81012: PUSH
81013: EMPTY
81014: LIST
81015: LIST
81016: LIST
81017: PUSH
81018: EMPTY
81019: LIST
81020: LIST
81021: LIST
81022: LIST
81023: LIST
81024: ST_TO_ADDR
// end ; 3 :
81025: GO 81447
81027: LD_INT 3
81029: DOUBLE
81030: EQUAL
81031: IFTRUE 81035
81033: GO 81168
81035: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
81036: LD_ADDR_VAR 0 5
81040: PUSH
81041: LD_VAR 0 1
81045: PUSH
81046: LD_INT 3
81048: PLUS
81049: PUSH
81050: LD_VAR 0 2
81054: PUSH
81055: LD_INT 4
81057: PUSH
81058: EMPTY
81059: LIST
81060: LIST
81061: LIST
81062: PUSH
81063: LD_VAR 0 1
81067: PUSH
81068: LD_INT 4
81070: PLUS
81071: PUSH
81072: LD_VAR 0 2
81076: PUSH
81077: LD_INT 4
81079: PLUS
81080: PUSH
81081: LD_INT 5
81083: PUSH
81084: EMPTY
81085: LIST
81086: LIST
81087: LIST
81088: PUSH
81089: LD_VAR 0 1
81093: PUSH
81094: LD_INT 4
81096: MINUS
81097: PUSH
81098: LD_VAR 0 2
81102: PUSH
81103: LD_INT 1
81105: PUSH
81106: EMPTY
81107: LIST
81108: LIST
81109: LIST
81110: PUSH
81111: LD_VAR 0 1
81115: PUSH
81116: LD_VAR 0 2
81120: PUSH
81121: LD_INT 4
81123: MINUS
81124: PUSH
81125: LD_INT 3
81127: PUSH
81128: EMPTY
81129: LIST
81130: LIST
81131: LIST
81132: PUSH
81133: LD_VAR 0 1
81137: PUSH
81138: LD_INT 3
81140: MINUS
81141: PUSH
81142: LD_VAR 0 2
81146: PUSH
81147: LD_INT 3
81149: MINUS
81150: PUSH
81151: LD_INT 2
81153: PUSH
81154: EMPTY
81155: LIST
81156: LIST
81157: LIST
81158: PUSH
81159: EMPTY
81160: LIST
81161: LIST
81162: LIST
81163: LIST
81164: LIST
81165: ST_TO_ADDR
// end ; 4 :
81166: GO 81447
81168: LD_INT 4
81170: DOUBLE
81171: EQUAL
81172: IFTRUE 81176
81174: GO 81309
81176: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
81177: LD_ADDR_VAR 0 5
81181: PUSH
81182: LD_VAR 0 1
81186: PUSH
81187: LD_VAR 0 2
81191: PUSH
81192: LD_INT 4
81194: PLUS
81195: PUSH
81196: LD_INT 0
81198: PUSH
81199: EMPTY
81200: LIST
81201: LIST
81202: LIST
81203: PUSH
81204: LD_VAR 0 1
81208: PUSH
81209: LD_INT 3
81211: PLUS
81212: PUSH
81213: LD_VAR 0 2
81217: PUSH
81218: LD_INT 3
81220: PLUS
81221: PUSH
81222: LD_INT 5
81224: PUSH
81225: EMPTY
81226: LIST
81227: LIST
81228: LIST
81229: PUSH
81230: LD_VAR 0 1
81234: PUSH
81235: LD_INT 4
81237: PLUS
81238: PUSH
81239: LD_VAR 0 2
81243: PUSH
81244: LD_INT 4
81246: PUSH
81247: EMPTY
81248: LIST
81249: LIST
81250: LIST
81251: PUSH
81252: LD_VAR 0 1
81256: PUSH
81257: LD_VAR 0 2
81261: PUSH
81262: LD_INT 3
81264: MINUS
81265: PUSH
81266: LD_INT 3
81268: PUSH
81269: EMPTY
81270: LIST
81271: LIST
81272: LIST
81273: PUSH
81274: LD_VAR 0 1
81278: PUSH
81279: LD_INT 4
81281: MINUS
81282: PUSH
81283: LD_VAR 0 2
81287: PUSH
81288: LD_INT 4
81290: MINUS
81291: PUSH
81292: LD_INT 2
81294: PUSH
81295: EMPTY
81296: LIST
81297: LIST
81298: LIST
81299: PUSH
81300: EMPTY
81301: LIST
81302: LIST
81303: LIST
81304: LIST
81305: LIST
81306: ST_TO_ADDR
// end ; 5 :
81307: GO 81447
81309: LD_INT 5
81311: DOUBLE
81312: EQUAL
81313: IFTRUE 81317
81315: GO 81446
81317: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
81318: LD_ADDR_VAR 0 5
81322: PUSH
81323: LD_VAR 0 1
81327: PUSH
81328: LD_INT 4
81330: MINUS
81331: PUSH
81332: LD_VAR 0 2
81336: PUSH
81337: LD_INT 1
81339: PUSH
81340: EMPTY
81341: LIST
81342: LIST
81343: LIST
81344: PUSH
81345: LD_VAR 0 1
81349: PUSH
81350: LD_VAR 0 2
81354: PUSH
81355: LD_INT 4
81357: MINUS
81358: PUSH
81359: LD_INT 3
81361: PUSH
81362: EMPTY
81363: LIST
81364: LIST
81365: LIST
81366: PUSH
81367: LD_VAR 0 1
81371: PUSH
81372: LD_INT 4
81374: PLUS
81375: PUSH
81376: LD_VAR 0 2
81380: PUSH
81381: LD_INT 4
81383: PLUS
81384: PUSH
81385: LD_INT 5
81387: PUSH
81388: EMPTY
81389: LIST
81390: LIST
81391: LIST
81392: PUSH
81393: LD_VAR 0 1
81397: PUSH
81398: LD_INT 3
81400: PLUS
81401: PUSH
81402: LD_VAR 0 2
81406: PUSH
81407: LD_INT 4
81409: PUSH
81410: EMPTY
81411: LIST
81412: LIST
81413: LIST
81414: PUSH
81415: LD_VAR 0 1
81419: PUSH
81420: LD_VAR 0 2
81424: PUSH
81425: LD_INT 3
81427: PLUS
81428: PUSH
81429: LD_INT 0
81431: PUSH
81432: EMPTY
81433: LIST
81434: LIST
81435: LIST
81436: PUSH
81437: EMPTY
81438: LIST
81439: LIST
81440: LIST
81441: LIST
81442: LIST
81443: ST_TO_ADDR
// end ; end ;
81444: GO 81447
81446: POP
// result := list ;
81447: LD_ADDR_VAR 0 4
81451: PUSH
81452: LD_VAR 0 5
81456: ST_TO_ADDR
// end ;
81457: LD_VAR 0 4
81461: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
81462: LD_INT 0
81464: PPUSH
81465: PPUSH
81466: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
81467: LD_VAR 0 1
81471: NOT
81472: PUSH
81473: LD_VAR 0 2
81477: PUSH
81478: LD_INT 1
81480: PUSH
81481: LD_INT 2
81483: PUSH
81484: LD_INT 3
81486: PUSH
81487: LD_INT 4
81489: PUSH
81490: EMPTY
81491: LIST
81492: LIST
81493: LIST
81494: LIST
81495: IN
81496: NOT
81497: OR
81498: IFFALSE 81502
// exit ;
81500: GO 81594
// tmp := [ ] ;
81502: LD_ADDR_VAR 0 5
81506: PUSH
81507: EMPTY
81508: ST_TO_ADDR
// for i in units do
81509: LD_ADDR_VAR 0 4
81513: PUSH
81514: LD_VAR 0 1
81518: PUSH
81519: FOR_IN
81520: IFFALSE 81563
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
81522: LD_ADDR_VAR 0 5
81526: PUSH
81527: LD_VAR 0 5
81531: PPUSH
81532: LD_VAR 0 5
81536: PUSH
81537: LD_INT 1
81539: PLUS
81540: PPUSH
81541: LD_VAR 0 4
81545: PPUSH
81546: LD_VAR 0 2
81550: PPUSH
81551: CALL_OW 259
81555: PPUSH
81556: CALL_OW 2
81560: ST_TO_ADDR
81561: GO 81519
81563: POP
81564: POP
// if not tmp then
81565: LD_VAR 0 5
81569: NOT
81570: IFFALSE 81574
// exit ;
81572: GO 81594
// result := SortListByListDesc ( units , tmp ) ;
81574: LD_ADDR_VAR 0 3
81578: PUSH
81579: LD_VAR 0 1
81583: PPUSH
81584: LD_VAR 0 5
81588: PPUSH
81589: CALL_OW 77
81593: ST_TO_ADDR
// end ;
81594: LD_VAR 0 3
81598: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
81599: LD_INT 0
81601: PPUSH
81602: PPUSH
81603: PPUSH
// result := false ;
81604: LD_ADDR_VAR 0 3
81608: PUSH
81609: LD_INT 0
81611: ST_TO_ADDR
// x := GetX ( building ) ;
81612: LD_ADDR_VAR 0 4
81616: PUSH
81617: LD_VAR 0 2
81621: PPUSH
81622: CALL_OW 250
81626: ST_TO_ADDR
// y := GetY ( building ) ;
81627: LD_ADDR_VAR 0 5
81631: PUSH
81632: LD_VAR 0 2
81636: PPUSH
81637: CALL_OW 251
81641: ST_TO_ADDR
// if not building or not x or not y then
81642: LD_VAR 0 2
81646: NOT
81647: PUSH
81648: LD_VAR 0 4
81652: NOT
81653: OR
81654: PUSH
81655: LD_VAR 0 5
81659: NOT
81660: OR
81661: IFFALSE 81665
// exit ;
81663: GO 81757
// if GetTaskList ( unit ) then
81665: LD_VAR 0 1
81669: PPUSH
81670: CALL_OW 437
81674: IFFALSE 81757
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
81676: LD_STRING e
81678: PUSH
81679: LD_VAR 0 1
81683: PPUSH
81684: CALL_OW 437
81688: PUSH
81689: LD_INT 1
81691: ARRAY
81692: PUSH
81693: LD_INT 1
81695: ARRAY
81696: EQUAL
81697: PUSH
81698: LD_VAR 0 4
81702: PUSH
81703: LD_VAR 0 1
81707: PPUSH
81708: CALL_OW 437
81712: PUSH
81713: LD_INT 1
81715: ARRAY
81716: PUSH
81717: LD_INT 2
81719: ARRAY
81720: EQUAL
81721: AND
81722: PUSH
81723: LD_VAR 0 5
81727: PUSH
81728: LD_VAR 0 1
81732: PPUSH
81733: CALL_OW 437
81737: PUSH
81738: LD_INT 1
81740: ARRAY
81741: PUSH
81742: LD_INT 3
81744: ARRAY
81745: EQUAL
81746: AND
81747: IFFALSE 81757
// result := true end ;
81749: LD_ADDR_VAR 0 3
81753: PUSH
81754: LD_INT 1
81756: ST_TO_ADDR
// end ;
81757: LD_VAR 0 3
81761: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
81762: LD_INT 0
81764: PPUSH
// result := false ;
81765: LD_ADDR_VAR 0 4
81769: PUSH
81770: LD_INT 0
81772: ST_TO_ADDR
// if GetTaskList ( unit ) then
81773: LD_VAR 0 1
81777: PPUSH
81778: CALL_OW 437
81782: IFFALSE 81865
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
81784: LD_STRING M
81786: PUSH
81787: LD_VAR 0 1
81791: PPUSH
81792: CALL_OW 437
81796: PUSH
81797: LD_INT 1
81799: ARRAY
81800: PUSH
81801: LD_INT 1
81803: ARRAY
81804: EQUAL
81805: PUSH
81806: LD_VAR 0 2
81810: PUSH
81811: LD_VAR 0 1
81815: PPUSH
81816: CALL_OW 437
81820: PUSH
81821: LD_INT 1
81823: ARRAY
81824: PUSH
81825: LD_INT 2
81827: ARRAY
81828: EQUAL
81829: AND
81830: PUSH
81831: LD_VAR 0 3
81835: PUSH
81836: LD_VAR 0 1
81840: PPUSH
81841: CALL_OW 437
81845: PUSH
81846: LD_INT 1
81848: ARRAY
81849: PUSH
81850: LD_INT 3
81852: ARRAY
81853: EQUAL
81854: AND
81855: IFFALSE 81865
// result := true ;
81857: LD_ADDR_VAR 0 4
81861: PUSH
81862: LD_INT 1
81864: ST_TO_ADDR
// end ; end ;
81865: LD_VAR 0 4
81869: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
81870: LD_INT 0
81872: PPUSH
81873: PPUSH
81874: PPUSH
81875: PPUSH
// if not unit or not area then
81876: LD_VAR 0 1
81880: NOT
81881: PUSH
81882: LD_VAR 0 2
81886: NOT
81887: OR
81888: IFFALSE 81892
// exit ;
81890: GO 82056
// tmp := AreaToList ( area , i ) ;
81892: LD_ADDR_VAR 0 6
81896: PUSH
81897: LD_VAR 0 2
81901: PPUSH
81902: LD_VAR 0 5
81906: PPUSH
81907: CALL_OW 517
81911: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
81912: LD_ADDR_VAR 0 5
81916: PUSH
81917: DOUBLE
81918: LD_INT 1
81920: DEC
81921: ST_TO_ADDR
81922: LD_VAR 0 6
81926: PUSH
81927: LD_INT 1
81929: ARRAY
81930: PUSH
81931: FOR_TO
81932: IFFALSE 82054
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
81934: LD_ADDR_VAR 0 7
81938: PUSH
81939: LD_VAR 0 6
81943: PUSH
81944: LD_INT 1
81946: ARRAY
81947: PUSH
81948: LD_VAR 0 5
81952: ARRAY
81953: PUSH
81954: LD_VAR 0 6
81958: PUSH
81959: LD_INT 2
81961: ARRAY
81962: PUSH
81963: LD_VAR 0 5
81967: ARRAY
81968: PUSH
81969: EMPTY
81970: LIST
81971: LIST
81972: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
81973: LD_VAR 0 7
81977: PUSH
81978: LD_INT 1
81980: ARRAY
81981: PPUSH
81982: LD_VAR 0 7
81986: PUSH
81987: LD_INT 2
81989: ARRAY
81990: PPUSH
81991: CALL_OW 428
81995: PUSH
81996: LD_INT 0
81998: EQUAL
81999: IFFALSE 82052
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
82001: LD_VAR 0 1
82005: PPUSH
82006: LD_VAR 0 7
82010: PUSH
82011: LD_INT 1
82013: ARRAY
82014: PPUSH
82015: LD_VAR 0 7
82019: PUSH
82020: LD_INT 2
82022: ARRAY
82023: PPUSH
82024: LD_VAR 0 3
82028: PPUSH
82029: CALL_OW 48
// result := IsPlaced ( unit ) ;
82033: LD_ADDR_VAR 0 4
82037: PUSH
82038: LD_VAR 0 1
82042: PPUSH
82043: CALL_OW 305
82047: ST_TO_ADDR
// exit ;
82048: POP
82049: POP
82050: GO 82056
// end ; end ;
82052: GO 81931
82054: POP
82055: POP
// end ;
82056: LD_VAR 0 4
82060: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
82061: LD_INT 0
82063: PPUSH
82064: PPUSH
82065: PPUSH
// if not side or side > 8 then
82066: LD_VAR 0 1
82070: NOT
82071: PUSH
82072: LD_VAR 0 1
82076: PUSH
82077: LD_INT 8
82079: GREATER
82080: OR
82081: IFFALSE 82085
// exit ;
82083: GO 82272
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
82085: LD_ADDR_VAR 0 4
82089: PUSH
82090: LD_INT 22
82092: PUSH
82093: LD_VAR 0 1
82097: PUSH
82098: EMPTY
82099: LIST
82100: LIST
82101: PUSH
82102: LD_INT 21
82104: PUSH
82105: LD_INT 3
82107: PUSH
82108: EMPTY
82109: LIST
82110: LIST
82111: PUSH
82112: EMPTY
82113: LIST
82114: LIST
82115: PPUSH
82116: CALL_OW 69
82120: ST_TO_ADDR
// if not tmp then
82121: LD_VAR 0 4
82125: NOT
82126: IFFALSE 82130
// exit ;
82128: GO 82272
// enable_addtolog := true ;
82130: LD_ADDR_OWVAR 81
82134: PUSH
82135: LD_INT 1
82137: ST_TO_ADDR
// AddToLog ( [ ) ;
82138: LD_STRING [
82140: PPUSH
82141: CALL_OW 561
// for i in tmp do
82145: LD_ADDR_VAR 0 3
82149: PUSH
82150: LD_VAR 0 4
82154: PUSH
82155: FOR_IN
82156: IFFALSE 82263
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
82158: LD_STRING [
82160: PUSH
82161: LD_VAR 0 3
82165: PPUSH
82166: CALL_OW 266
82170: STR
82171: PUSH
82172: LD_STRING , 
82174: STR
82175: PUSH
82176: LD_VAR 0 3
82180: PPUSH
82181: CALL_OW 250
82185: STR
82186: PUSH
82187: LD_STRING , 
82189: STR
82190: PUSH
82191: LD_VAR 0 3
82195: PPUSH
82196: CALL_OW 251
82200: STR
82201: PUSH
82202: LD_STRING , 
82204: STR
82205: PUSH
82206: LD_VAR 0 3
82210: PPUSH
82211: CALL_OW 254
82215: STR
82216: PUSH
82217: LD_STRING , 
82219: STR
82220: PUSH
82221: LD_VAR 0 3
82225: PPUSH
82226: LD_INT 1
82228: PPUSH
82229: CALL_OW 268
82233: STR
82234: PUSH
82235: LD_STRING , 
82237: STR
82238: PUSH
82239: LD_VAR 0 3
82243: PPUSH
82244: LD_INT 2
82246: PPUSH
82247: CALL_OW 268
82251: STR
82252: PUSH
82253: LD_STRING ],
82255: STR
82256: PPUSH
82257: CALL_OW 561
// end ;
82261: GO 82155
82263: POP
82264: POP
// AddToLog ( ]; ) ;
82265: LD_STRING ];
82267: PPUSH
82268: CALL_OW 561
// end ;
82272: LD_VAR 0 2
82276: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
82277: LD_INT 0
82279: PPUSH
82280: PPUSH
82281: PPUSH
82282: PPUSH
82283: PPUSH
// if not area or not rate or not max then
82284: LD_VAR 0 1
82288: NOT
82289: PUSH
82290: LD_VAR 0 2
82294: NOT
82295: OR
82296: PUSH
82297: LD_VAR 0 4
82301: NOT
82302: OR
82303: IFFALSE 82307
// exit ;
82305: GO 82496
// while 1 do
82307: LD_INT 1
82309: IFFALSE 82496
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
82311: LD_ADDR_VAR 0 9
82315: PUSH
82316: LD_VAR 0 1
82320: PPUSH
82321: LD_INT 1
82323: PPUSH
82324: CALL_OW 287
82328: PUSH
82329: LD_INT 10
82331: MUL
82332: ST_TO_ADDR
// r := rate / 10 ;
82333: LD_ADDR_VAR 0 7
82337: PUSH
82338: LD_VAR 0 2
82342: PUSH
82343: LD_INT 10
82345: DIVREAL
82346: ST_TO_ADDR
// time := 1 1$00 ;
82347: LD_ADDR_VAR 0 8
82351: PUSH
82352: LD_INT 2100
82354: ST_TO_ADDR
// if amount < min then
82355: LD_VAR 0 9
82359: PUSH
82360: LD_VAR 0 3
82364: LESS
82365: IFFALSE 82383
// r := r * 2 else
82367: LD_ADDR_VAR 0 7
82371: PUSH
82372: LD_VAR 0 7
82376: PUSH
82377: LD_INT 2
82379: MUL
82380: ST_TO_ADDR
82381: GO 82409
// if amount > max then
82383: LD_VAR 0 9
82387: PUSH
82388: LD_VAR 0 4
82392: GREATER
82393: IFFALSE 82409
// r := r / 2 ;
82395: LD_ADDR_VAR 0 7
82399: PUSH
82400: LD_VAR 0 7
82404: PUSH
82405: LD_INT 2
82407: DIVREAL
82408: ST_TO_ADDR
// time := time / r ;
82409: LD_ADDR_VAR 0 8
82413: PUSH
82414: LD_VAR 0 8
82418: PUSH
82419: LD_VAR 0 7
82423: DIVREAL
82424: ST_TO_ADDR
// if time < 0 then
82425: LD_VAR 0 8
82429: PUSH
82430: LD_INT 0
82432: LESS
82433: IFFALSE 82450
// time := time * - 1 ;
82435: LD_ADDR_VAR 0 8
82439: PUSH
82440: LD_VAR 0 8
82444: PUSH
82445: LD_INT 1
82447: NEG
82448: MUL
82449: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
82450: LD_VAR 0 8
82454: PUSH
82455: LD_INT 35
82457: PPUSH
82458: LD_INT 875
82460: PPUSH
82461: CALL_OW 12
82465: PLUS
82466: PPUSH
82467: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
82471: LD_INT 1
82473: PPUSH
82474: LD_INT 5
82476: PPUSH
82477: CALL_OW 12
82481: PPUSH
82482: LD_VAR 0 1
82486: PPUSH
82487: LD_INT 1
82489: PPUSH
82490: CALL_OW 55
// end ;
82494: GO 82307
// end ;
82496: LD_VAR 0 5
82500: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
82501: LD_INT 0
82503: PPUSH
82504: PPUSH
82505: PPUSH
82506: PPUSH
82507: PPUSH
82508: PPUSH
82509: PPUSH
82510: PPUSH
// if not turrets or not factories then
82511: LD_VAR 0 1
82515: NOT
82516: PUSH
82517: LD_VAR 0 2
82521: NOT
82522: OR
82523: IFFALSE 82527
// exit ;
82525: GO 82834
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
82527: LD_ADDR_VAR 0 10
82531: PUSH
82532: LD_INT 5
82534: PUSH
82535: LD_INT 6
82537: PUSH
82538: EMPTY
82539: LIST
82540: LIST
82541: PUSH
82542: LD_INT 2
82544: PUSH
82545: LD_INT 4
82547: PUSH
82548: EMPTY
82549: LIST
82550: LIST
82551: PUSH
82552: LD_INT 3
82554: PUSH
82555: LD_INT 5
82557: PUSH
82558: EMPTY
82559: LIST
82560: LIST
82561: PUSH
82562: EMPTY
82563: LIST
82564: LIST
82565: LIST
82566: PUSH
82567: LD_INT 24
82569: PUSH
82570: LD_INT 25
82572: PUSH
82573: EMPTY
82574: LIST
82575: LIST
82576: PUSH
82577: LD_INT 23
82579: PUSH
82580: LD_INT 27
82582: PUSH
82583: EMPTY
82584: LIST
82585: LIST
82586: PUSH
82587: EMPTY
82588: LIST
82589: LIST
82590: PUSH
82591: LD_INT 42
82593: PUSH
82594: LD_INT 43
82596: PUSH
82597: EMPTY
82598: LIST
82599: LIST
82600: PUSH
82601: LD_INT 44
82603: PUSH
82604: LD_INT 46
82606: PUSH
82607: EMPTY
82608: LIST
82609: LIST
82610: PUSH
82611: LD_INT 45
82613: PUSH
82614: LD_INT 47
82616: PUSH
82617: EMPTY
82618: LIST
82619: LIST
82620: PUSH
82621: EMPTY
82622: LIST
82623: LIST
82624: LIST
82625: PUSH
82626: EMPTY
82627: LIST
82628: LIST
82629: LIST
82630: ST_TO_ADDR
// result := [ ] ;
82631: LD_ADDR_VAR 0 3
82635: PUSH
82636: EMPTY
82637: ST_TO_ADDR
// for i in turrets do
82638: LD_ADDR_VAR 0 4
82642: PUSH
82643: LD_VAR 0 1
82647: PUSH
82648: FOR_IN
82649: IFFALSE 82832
// begin nat := GetNation ( i ) ;
82651: LD_ADDR_VAR 0 7
82655: PUSH
82656: LD_VAR 0 4
82660: PPUSH
82661: CALL_OW 248
82665: ST_TO_ADDR
// weapon := 0 ;
82666: LD_ADDR_VAR 0 8
82670: PUSH
82671: LD_INT 0
82673: ST_TO_ADDR
// if not nat then
82674: LD_VAR 0 7
82678: NOT
82679: IFFALSE 82683
// continue ;
82681: GO 82648
// for j in list [ nat ] do
82683: LD_ADDR_VAR 0 5
82687: PUSH
82688: LD_VAR 0 10
82692: PUSH
82693: LD_VAR 0 7
82697: ARRAY
82698: PUSH
82699: FOR_IN
82700: IFFALSE 82741
// if GetBWeapon ( i ) = j [ 1 ] then
82702: LD_VAR 0 4
82706: PPUSH
82707: CALL_OW 269
82711: PUSH
82712: LD_VAR 0 5
82716: PUSH
82717: LD_INT 1
82719: ARRAY
82720: EQUAL
82721: IFFALSE 82739
// begin weapon := j [ 2 ] ;
82723: LD_ADDR_VAR 0 8
82727: PUSH
82728: LD_VAR 0 5
82732: PUSH
82733: LD_INT 2
82735: ARRAY
82736: ST_TO_ADDR
// break ;
82737: GO 82741
// end ;
82739: GO 82699
82741: POP
82742: POP
// if not weapon then
82743: LD_VAR 0 8
82747: NOT
82748: IFFALSE 82752
// continue ;
82750: GO 82648
// for k in factories do
82752: LD_ADDR_VAR 0 6
82756: PUSH
82757: LD_VAR 0 2
82761: PUSH
82762: FOR_IN
82763: IFFALSE 82828
// begin weapons := AvailableWeaponList ( k ) ;
82765: LD_ADDR_VAR 0 9
82769: PUSH
82770: LD_VAR 0 6
82774: PPUSH
82775: CALL_OW 478
82779: ST_TO_ADDR
// if not weapons then
82780: LD_VAR 0 9
82784: NOT
82785: IFFALSE 82789
// continue ;
82787: GO 82762
// if weapon in weapons then
82789: LD_VAR 0 8
82793: PUSH
82794: LD_VAR 0 9
82798: IN
82799: IFFALSE 82826
// begin result := [ i , weapon ] ;
82801: LD_ADDR_VAR 0 3
82805: PUSH
82806: LD_VAR 0 4
82810: PUSH
82811: LD_VAR 0 8
82815: PUSH
82816: EMPTY
82817: LIST
82818: LIST
82819: ST_TO_ADDR
// exit ;
82820: POP
82821: POP
82822: POP
82823: POP
82824: GO 82834
// end ; end ;
82826: GO 82762
82828: POP
82829: POP
// end ;
82830: GO 82648
82832: POP
82833: POP
// end ;
82834: LD_VAR 0 3
82838: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
82839: LD_INT 0
82841: PPUSH
// if not side or side > 8 then
82842: LD_VAR 0 3
82846: NOT
82847: PUSH
82848: LD_VAR 0 3
82852: PUSH
82853: LD_INT 8
82855: GREATER
82856: OR
82857: IFFALSE 82861
// exit ;
82859: GO 82920
// if not range then
82861: LD_VAR 0 4
82865: NOT
82866: IFFALSE 82877
// range := - 12 ;
82868: LD_ADDR_VAR 0 4
82872: PUSH
82873: LD_INT 12
82875: NEG
82876: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
82877: LD_VAR 0 1
82881: PPUSH
82882: LD_VAR 0 2
82886: PPUSH
82887: LD_VAR 0 3
82891: PPUSH
82892: LD_VAR 0 4
82896: PPUSH
82897: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
82901: LD_VAR 0 1
82905: PPUSH
82906: LD_VAR 0 2
82910: PPUSH
82911: LD_VAR 0 3
82915: PPUSH
82916: CALL_OW 331
// end ;
82920: LD_VAR 0 5
82924: RET
// export function Video ( mode ) ; begin
82925: LD_INT 0
82927: PPUSH
// ingame_video = mode ;
82928: LD_ADDR_OWVAR 52
82932: PUSH
82933: LD_VAR 0 1
82937: ST_TO_ADDR
// interface_hidden = mode ;
82938: LD_ADDR_OWVAR 54
82942: PUSH
82943: LD_VAR 0 1
82947: ST_TO_ADDR
// end ;
82948: LD_VAR 0 2
82952: RET
// export function Join ( array , element ) ; begin
82953: LD_INT 0
82955: PPUSH
// result := Replace ( array , array + 1 , element ) ;
82956: LD_ADDR_VAR 0 3
82960: PUSH
82961: LD_VAR 0 1
82965: PPUSH
82966: LD_VAR 0 1
82970: PUSH
82971: LD_INT 1
82973: PLUS
82974: PPUSH
82975: LD_VAR 0 2
82979: PPUSH
82980: CALL_OW 1
82984: ST_TO_ADDR
// end ;
82985: LD_VAR 0 3
82989: RET
// export function JoinUnion ( array , element ) ; begin
82990: LD_INT 0
82992: PPUSH
// result := array union element ;
82993: LD_ADDR_VAR 0 3
82997: PUSH
82998: LD_VAR 0 1
83002: PUSH
83003: LD_VAR 0 2
83007: UNION
83008: ST_TO_ADDR
// end ;
83009: LD_VAR 0 3
83013: RET
// export function GetBehemoths ( side ) ; begin
83014: LD_INT 0
83016: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
83017: LD_ADDR_VAR 0 2
83021: PUSH
83022: LD_INT 22
83024: PUSH
83025: LD_VAR 0 1
83029: PUSH
83030: EMPTY
83031: LIST
83032: LIST
83033: PUSH
83034: LD_INT 31
83036: PUSH
83037: LD_INT 25
83039: PUSH
83040: EMPTY
83041: LIST
83042: LIST
83043: PUSH
83044: EMPTY
83045: LIST
83046: LIST
83047: PPUSH
83048: CALL_OW 69
83052: ST_TO_ADDR
// end ;
83053: LD_VAR 0 2
83057: RET
// export function Shuffle ( array ) ; var i , index ; begin
83058: LD_INT 0
83060: PPUSH
83061: PPUSH
83062: PPUSH
// result := [ ] ;
83063: LD_ADDR_VAR 0 2
83067: PUSH
83068: EMPTY
83069: ST_TO_ADDR
// if not array then
83070: LD_VAR 0 1
83074: NOT
83075: IFFALSE 83079
// exit ;
83077: GO 83178
// Randomize ;
83079: CALL_OW 10
// for i = array downto 1 do
83083: LD_ADDR_VAR 0 3
83087: PUSH
83088: DOUBLE
83089: LD_VAR 0 1
83093: INC
83094: ST_TO_ADDR
83095: LD_INT 1
83097: PUSH
83098: FOR_DOWNTO
83099: IFFALSE 83176
// begin index := rand ( 1 , array ) ;
83101: LD_ADDR_VAR 0 4
83105: PUSH
83106: LD_INT 1
83108: PPUSH
83109: LD_VAR 0 1
83113: PPUSH
83114: CALL_OW 12
83118: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
83119: LD_ADDR_VAR 0 2
83123: PUSH
83124: LD_VAR 0 2
83128: PPUSH
83129: LD_VAR 0 2
83133: PUSH
83134: LD_INT 1
83136: PLUS
83137: PPUSH
83138: LD_VAR 0 1
83142: PUSH
83143: LD_VAR 0 4
83147: ARRAY
83148: PPUSH
83149: CALL_OW 2
83153: ST_TO_ADDR
// array := Delete ( array , index ) ;
83154: LD_ADDR_VAR 0 1
83158: PUSH
83159: LD_VAR 0 1
83163: PPUSH
83164: LD_VAR 0 4
83168: PPUSH
83169: CALL_OW 3
83173: ST_TO_ADDR
// end ;
83174: GO 83098
83176: POP
83177: POP
// end ;
83178: LD_VAR 0 2
83182: RET
// export function GetBaseMaterials ( base ) ; begin
83183: LD_INT 0
83185: PPUSH
// result := [ 0 , 0 , 0 ] ;
83186: LD_ADDR_VAR 0 2
83190: PUSH
83191: LD_INT 0
83193: PUSH
83194: LD_INT 0
83196: PUSH
83197: LD_INT 0
83199: PUSH
83200: EMPTY
83201: LIST
83202: LIST
83203: LIST
83204: ST_TO_ADDR
// if not base then
83205: LD_VAR 0 1
83209: NOT
83210: IFFALSE 83214
// exit ;
83212: GO 83263
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
83214: LD_ADDR_VAR 0 2
83218: PUSH
83219: LD_VAR 0 1
83223: PPUSH
83224: LD_INT 1
83226: PPUSH
83227: CALL_OW 275
83231: PUSH
83232: LD_VAR 0 1
83236: PPUSH
83237: LD_INT 2
83239: PPUSH
83240: CALL_OW 275
83244: PUSH
83245: LD_VAR 0 1
83249: PPUSH
83250: LD_INT 3
83252: PPUSH
83253: CALL_OW 275
83257: PUSH
83258: EMPTY
83259: LIST
83260: LIST
83261: LIST
83262: ST_TO_ADDR
// end ;
83263: LD_VAR 0 2
83267: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
83268: LD_INT 0
83270: PPUSH
83271: PPUSH
// result := array ;
83272: LD_ADDR_VAR 0 3
83276: PUSH
83277: LD_VAR 0 1
83281: ST_TO_ADDR
// if size > 0 then
83282: LD_VAR 0 2
83286: PUSH
83287: LD_INT 0
83289: GREATER
83290: IFFALSE 83336
// for i := array downto size do
83292: LD_ADDR_VAR 0 4
83296: PUSH
83297: DOUBLE
83298: LD_VAR 0 1
83302: INC
83303: ST_TO_ADDR
83304: LD_VAR 0 2
83308: PUSH
83309: FOR_DOWNTO
83310: IFFALSE 83334
// result := Delete ( result , result ) ;
83312: LD_ADDR_VAR 0 3
83316: PUSH
83317: LD_VAR 0 3
83321: PPUSH
83322: LD_VAR 0 3
83326: PPUSH
83327: CALL_OW 3
83331: ST_TO_ADDR
83332: GO 83309
83334: POP
83335: POP
// end ;
83336: LD_VAR 0 3
83340: RET
// export function ComExit ( unit ) ; var tmp ; begin
83341: LD_INT 0
83343: PPUSH
83344: PPUSH
// if not IsInUnit ( unit ) then
83345: LD_VAR 0 1
83349: PPUSH
83350: CALL_OW 310
83354: NOT
83355: IFFALSE 83359
// exit ;
83357: GO 83419
// tmp := IsInUnit ( unit ) ;
83359: LD_ADDR_VAR 0 3
83363: PUSH
83364: LD_VAR 0 1
83368: PPUSH
83369: CALL_OW 310
83373: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
83374: LD_VAR 0 3
83378: PPUSH
83379: CALL_OW 247
83383: PUSH
83384: LD_INT 2
83386: EQUAL
83387: IFFALSE 83400
// ComExitVehicle ( unit ) else
83389: LD_VAR 0 1
83393: PPUSH
83394: CALL_OW 121
83398: GO 83409
// ComExitBuilding ( unit ) ;
83400: LD_VAR 0 1
83404: PPUSH
83405: CALL_OW 122
// result := tmp ;
83409: LD_ADDR_VAR 0 2
83413: PUSH
83414: LD_VAR 0 3
83418: ST_TO_ADDR
// end ;
83419: LD_VAR 0 2
83423: RET
// export function ComExitAll ( units ) ; var i ; begin
83424: LD_INT 0
83426: PPUSH
83427: PPUSH
// if not units then
83428: LD_VAR 0 1
83432: NOT
83433: IFFALSE 83437
// exit ;
83435: GO 83463
// for i in units do
83437: LD_ADDR_VAR 0 3
83441: PUSH
83442: LD_VAR 0 1
83446: PUSH
83447: FOR_IN
83448: IFFALSE 83461
// ComExit ( i ) ;
83450: LD_VAR 0 3
83454: PPUSH
83455: CALL 83341 0 1
83459: GO 83447
83461: POP
83462: POP
// end ;
83463: LD_VAR 0 2
83467: RET
// export function ResetHc ; begin
83468: LD_INT 0
83470: PPUSH
// InitHc ;
83471: CALL_OW 19
// hc_importance := 0 ;
83475: LD_ADDR_OWVAR 32
83479: PUSH
83480: LD_INT 0
83482: ST_TO_ADDR
// end ;
83483: LD_VAR 0 1
83487: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
83488: LD_INT 0
83490: PPUSH
83491: PPUSH
83492: PPUSH
// _x := ( x1 + x2 ) div 2 ;
83493: LD_ADDR_VAR 0 6
83497: PUSH
83498: LD_VAR 0 1
83502: PUSH
83503: LD_VAR 0 3
83507: PLUS
83508: PUSH
83509: LD_INT 2
83511: DIV
83512: ST_TO_ADDR
// if _x < 0 then
83513: LD_VAR 0 6
83517: PUSH
83518: LD_INT 0
83520: LESS
83521: IFFALSE 83538
// _x := _x * - 1 ;
83523: LD_ADDR_VAR 0 6
83527: PUSH
83528: LD_VAR 0 6
83532: PUSH
83533: LD_INT 1
83535: NEG
83536: MUL
83537: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
83538: LD_ADDR_VAR 0 7
83542: PUSH
83543: LD_VAR 0 2
83547: PUSH
83548: LD_VAR 0 4
83552: PLUS
83553: PUSH
83554: LD_INT 2
83556: DIV
83557: ST_TO_ADDR
// if _y < 0 then
83558: LD_VAR 0 7
83562: PUSH
83563: LD_INT 0
83565: LESS
83566: IFFALSE 83583
// _y := _y * - 1 ;
83568: LD_ADDR_VAR 0 7
83572: PUSH
83573: LD_VAR 0 7
83577: PUSH
83578: LD_INT 1
83580: NEG
83581: MUL
83582: ST_TO_ADDR
// result := [ _x , _y ] ;
83583: LD_ADDR_VAR 0 5
83587: PUSH
83588: LD_VAR 0 6
83592: PUSH
83593: LD_VAR 0 7
83597: PUSH
83598: EMPTY
83599: LIST
83600: LIST
83601: ST_TO_ADDR
// end ;
83602: LD_VAR 0 5
83606: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
83607: LD_INT 0
83609: PPUSH
83610: PPUSH
83611: PPUSH
83612: PPUSH
// task := GetTaskList ( unit ) ;
83613: LD_ADDR_VAR 0 7
83617: PUSH
83618: LD_VAR 0 1
83622: PPUSH
83623: CALL_OW 437
83627: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
83628: LD_VAR 0 7
83632: NOT
83633: PUSH
83634: LD_VAR 0 1
83638: PPUSH
83639: LD_VAR 0 2
83643: PPUSH
83644: CALL_OW 308
83648: NOT
83649: AND
83650: IFFALSE 83654
// exit ;
83652: GO 83772
// if IsInArea ( unit , area ) then
83654: LD_VAR 0 1
83658: PPUSH
83659: LD_VAR 0 2
83663: PPUSH
83664: CALL_OW 308
83668: IFFALSE 83686
// begin ComMoveToArea ( unit , goAway ) ;
83670: LD_VAR 0 1
83674: PPUSH
83675: LD_VAR 0 3
83679: PPUSH
83680: CALL_OW 113
// exit ;
83684: GO 83772
// end ; if task [ 1 ] [ 1 ] <> M then
83686: LD_VAR 0 7
83690: PUSH
83691: LD_INT 1
83693: ARRAY
83694: PUSH
83695: LD_INT 1
83697: ARRAY
83698: PUSH
83699: LD_STRING M
83701: NONEQUAL
83702: IFFALSE 83706
// exit ;
83704: GO 83772
// x := task [ 1 ] [ 2 ] ;
83706: LD_ADDR_VAR 0 5
83710: PUSH
83711: LD_VAR 0 7
83715: PUSH
83716: LD_INT 1
83718: ARRAY
83719: PUSH
83720: LD_INT 2
83722: ARRAY
83723: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
83724: LD_ADDR_VAR 0 6
83728: PUSH
83729: LD_VAR 0 7
83733: PUSH
83734: LD_INT 1
83736: ARRAY
83737: PUSH
83738: LD_INT 3
83740: ARRAY
83741: ST_TO_ADDR
// if InArea ( x , y , area ) then
83742: LD_VAR 0 5
83746: PPUSH
83747: LD_VAR 0 6
83751: PPUSH
83752: LD_VAR 0 2
83756: PPUSH
83757: CALL_OW 309
83761: IFFALSE 83772
// ComStop ( unit ) ;
83763: LD_VAR 0 1
83767: PPUSH
83768: CALL_OW 141
// end ;
83772: LD_VAR 0 4
83776: RET
// export function Abs ( value ) ; begin
83777: LD_INT 0
83779: PPUSH
// result := value ;
83780: LD_ADDR_VAR 0 2
83784: PUSH
83785: LD_VAR 0 1
83789: ST_TO_ADDR
// if value < 0 then
83790: LD_VAR 0 1
83794: PUSH
83795: LD_INT 0
83797: LESS
83798: IFFALSE 83815
// result := value * - 1 ;
83800: LD_ADDR_VAR 0 2
83804: PUSH
83805: LD_VAR 0 1
83809: PUSH
83810: LD_INT 1
83812: NEG
83813: MUL
83814: ST_TO_ADDR
// end ;
83815: LD_VAR 0 2
83819: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
83820: LD_INT 0
83822: PPUSH
83823: PPUSH
83824: PPUSH
83825: PPUSH
83826: PPUSH
83827: PPUSH
83828: PPUSH
83829: PPUSH
// if not unit or not building then
83830: LD_VAR 0 1
83834: NOT
83835: PUSH
83836: LD_VAR 0 2
83840: NOT
83841: OR
83842: IFFALSE 83846
// exit ;
83844: GO 84072
// x := GetX ( building ) ;
83846: LD_ADDR_VAR 0 4
83850: PUSH
83851: LD_VAR 0 2
83855: PPUSH
83856: CALL_OW 250
83860: ST_TO_ADDR
// y := GetY ( building ) ;
83861: LD_ADDR_VAR 0 6
83865: PUSH
83866: LD_VAR 0 2
83870: PPUSH
83871: CALL_OW 251
83875: ST_TO_ADDR
// d := GetDir ( building ) ;
83876: LD_ADDR_VAR 0 8
83880: PUSH
83881: LD_VAR 0 2
83885: PPUSH
83886: CALL_OW 254
83890: ST_TO_ADDR
// r := 4 ;
83891: LD_ADDR_VAR 0 9
83895: PUSH
83896: LD_INT 4
83898: ST_TO_ADDR
// for i := 1 to 5 do
83899: LD_ADDR_VAR 0 10
83903: PUSH
83904: DOUBLE
83905: LD_INT 1
83907: DEC
83908: ST_TO_ADDR
83909: LD_INT 5
83911: PUSH
83912: FOR_TO
83913: IFFALSE 84070
// begin _x := ShiftX ( x , d , r + i ) ;
83915: LD_ADDR_VAR 0 5
83919: PUSH
83920: LD_VAR 0 4
83924: PPUSH
83925: LD_VAR 0 8
83929: PPUSH
83930: LD_VAR 0 9
83934: PUSH
83935: LD_VAR 0 10
83939: PLUS
83940: PPUSH
83941: CALL_OW 272
83945: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
83946: LD_ADDR_VAR 0 7
83950: PUSH
83951: LD_VAR 0 6
83955: PPUSH
83956: LD_VAR 0 8
83960: PPUSH
83961: LD_VAR 0 9
83965: PUSH
83966: LD_VAR 0 10
83970: PLUS
83971: PPUSH
83972: CALL_OW 273
83976: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
83977: LD_VAR 0 5
83981: PPUSH
83982: LD_VAR 0 7
83986: PPUSH
83987: CALL_OW 488
83991: PUSH
83992: LD_VAR 0 5
83996: PPUSH
83997: LD_VAR 0 7
84001: PPUSH
84002: CALL_OW 428
84006: PPUSH
84007: CALL_OW 247
84011: PUSH
84012: LD_INT 3
84014: PUSH
84015: LD_INT 2
84017: PUSH
84018: EMPTY
84019: LIST
84020: LIST
84021: IN
84022: NOT
84023: AND
84024: IFFALSE 84068
// begin ComMoveXY ( unit , _x , _y ) ;
84026: LD_VAR 0 1
84030: PPUSH
84031: LD_VAR 0 5
84035: PPUSH
84036: LD_VAR 0 7
84040: PPUSH
84041: CALL_OW 111
// result := [ _x , _y ] ;
84045: LD_ADDR_VAR 0 3
84049: PUSH
84050: LD_VAR 0 5
84054: PUSH
84055: LD_VAR 0 7
84059: PUSH
84060: EMPTY
84061: LIST
84062: LIST
84063: ST_TO_ADDR
// exit ;
84064: POP
84065: POP
84066: GO 84072
// end ; end ;
84068: GO 83912
84070: POP
84071: POP
// end ;
84072: LD_VAR 0 3
84076: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
84077: LD_INT 0
84079: PPUSH
84080: PPUSH
84081: PPUSH
// result := 0 ;
84082: LD_ADDR_VAR 0 3
84086: PUSH
84087: LD_INT 0
84089: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
84090: LD_VAR 0 1
84094: PUSH
84095: LD_INT 0
84097: LESS
84098: PUSH
84099: LD_VAR 0 1
84103: PUSH
84104: LD_INT 8
84106: GREATER
84107: OR
84108: PUSH
84109: LD_VAR 0 2
84113: PUSH
84114: LD_INT 0
84116: LESS
84117: OR
84118: PUSH
84119: LD_VAR 0 2
84123: PUSH
84124: LD_INT 8
84126: GREATER
84127: OR
84128: IFFALSE 84132
// exit ;
84130: GO 84207
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
84132: LD_ADDR_VAR 0 4
84136: PUSH
84137: LD_INT 22
84139: PUSH
84140: LD_VAR 0 2
84144: PUSH
84145: EMPTY
84146: LIST
84147: LIST
84148: PPUSH
84149: CALL_OW 69
84153: PUSH
84154: FOR_IN
84155: IFFALSE 84205
// begin un := UnitShoot ( i ) ;
84157: LD_ADDR_VAR 0 5
84161: PUSH
84162: LD_VAR 0 4
84166: PPUSH
84167: CALL_OW 504
84171: ST_TO_ADDR
// if GetSide ( un ) = side1 then
84172: LD_VAR 0 5
84176: PPUSH
84177: CALL_OW 255
84181: PUSH
84182: LD_VAR 0 1
84186: EQUAL
84187: IFFALSE 84203
// begin result := un ;
84189: LD_ADDR_VAR 0 3
84193: PUSH
84194: LD_VAR 0 5
84198: ST_TO_ADDR
// exit ;
84199: POP
84200: POP
84201: GO 84207
// end ; end ;
84203: GO 84154
84205: POP
84206: POP
// end ;
84207: LD_VAR 0 3
84211: RET
// export function GetCargoBay ( units ) ; begin
84212: LD_INT 0
84214: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
84215: LD_ADDR_VAR 0 2
84219: PUSH
84220: LD_VAR 0 1
84224: PPUSH
84225: LD_INT 2
84227: PUSH
84228: LD_INT 34
84230: PUSH
84231: LD_INT 12
84233: PUSH
84234: EMPTY
84235: LIST
84236: LIST
84237: PUSH
84238: LD_INT 34
84240: PUSH
84241: LD_INT 51
84243: PUSH
84244: EMPTY
84245: LIST
84246: LIST
84247: PUSH
84248: LD_INT 34
84250: PUSH
84251: LD_INT 32
84253: PUSH
84254: EMPTY
84255: LIST
84256: LIST
84257: PUSH
84258: LD_INT 34
84260: PUSH
84261: LD_EXP 49
84265: PUSH
84266: EMPTY
84267: LIST
84268: LIST
84269: PUSH
84270: EMPTY
84271: LIST
84272: LIST
84273: LIST
84274: LIST
84275: LIST
84276: PPUSH
84277: CALL_OW 72
84281: ST_TO_ADDR
// end ;
84282: LD_VAR 0 2
84286: RET
// export function Negate ( value ) ; begin
84287: LD_INT 0
84289: PPUSH
// result := not value ;
84290: LD_ADDR_VAR 0 2
84294: PUSH
84295: LD_VAR 0 1
84299: NOT
84300: ST_TO_ADDR
// end ;
84301: LD_VAR 0 2
84305: RET
// export function Inc ( value ) ; begin
84306: LD_INT 0
84308: PPUSH
// result := value + 1 ;
84309: LD_ADDR_VAR 0 2
84313: PUSH
84314: LD_VAR 0 1
84318: PUSH
84319: LD_INT 1
84321: PLUS
84322: ST_TO_ADDR
// end ;
84323: LD_VAR 0 2
84327: RET
// export function Dec ( value ) ; begin
84328: LD_INT 0
84330: PPUSH
// result := value - 1 ;
84331: LD_ADDR_VAR 0 2
84335: PUSH
84336: LD_VAR 0 1
84340: PUSH
84341: LD_INT 1
84343: MINUS
84344: ST_TO_ADDR
// end ;
84345: LD_VAR 0 2
84349: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
84350: LD_INT 0
84352: PPUSH
84353: PPUSH
84354: PPUSH
84355: PPUSH
84356: PPUSH
84357: PPUSH
84358: PPUSH
84359: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
84360: LD_VAR 0 1
84364: PPUSH
84365: LD_VAR 0 2
84369: PPUSH
84370: CALL_OW 488
84374: NOT
84375: PUSH
84376: LD_VAR 0 3
84380: PPUSH
84381: LD_VAR 0 4
84385: PPUSH
84386: CALL_OW 488
84390: NOT
84391: OR
84392: IFFALSE 84405
// begin result := - 1 ;
84394: LD_ADDR_VAR 0 5
84398: PUSH
84399: LD_INT 1
84401: NEG
84402: ST_TO_ADDR
// exit ;
84403: GO 84640
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
84405: LD_ADDR_VAR 0 12
84409: PUSH
84410: LD_VAR 0 1
84414: PPUSH
84415: LD_VAR 0 2
84419: PPUSH
84420: LD_VAR 0 3
84424: PPUSH
84425: LD_VAR 0 4
84429: PPUSH
84430: CALL 83488 0 4
84434: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
84435: LD_ADDR_VAR 0 11
84439: PUSH
84440: LD_VAR 0 1
84444: PPUSH
84445: LD_VAR 0 2
84449: PPUSH
84450: LD_VAR 0 12
84454: PUSH
84455: LD_INT 1
84457: ARRAY
84458: PPUSH
84459: LD_VAR 0 12
84463: PUSH
84464: LD_INT 2
84466: ARRAY
84467: PPUSH
84468: CALL_OW 298
84472: ST_TO_ADDR
// distance := 9999 ;
84473: LD_ADDR_VAR 0 10
84477: PUSH
84478: LD_INT 9999
84480: ST_TO_ADDR
// for i := 0 to 5 do
84481: LD_ADDR_VAR 0 6
84485: PUSH
84486: DOUBLE
84487: LD_INT 0
84489: DEC
84490: ST_TO_ADDR
84491: LD_INT 5
84493: PUSH
84494: FOR_TO
84495: IFFALSE 84638
// begin _x := ShiftX ( x1 , i , centerDist ) ;
84497: LD_ADDR_VAR 0 7
84501: PUSH
84502: LD_VAR 0 1
84506: PPUSH
84507: LD_VAR 0 6
84511: PPUSH
84512: LD_VAR 0 11
84516: PPUSH
84517: CALL_OW 272
84521: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
84522: LD_ADDR_VAR 0 8
84526: PUSH
84527: LD_VAR 0 2
84531: PPUSH
84532: LD_VAR 0 6
84536: PPUSH
84537: LD_VAR 0 11
84541: PPUSH
84542: CALL_OW 273
84546: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
84547: LD_VAR 0 7
84551: PPUSH
84552: LD_VAR 0 8
84556: PPUSH
84557: CALL_OW 488
84561: NOT
84562: IFFALSE 84566
// continue ;
84564: GO 84494
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
84566: LD_ADDR_VAR 0 9
84570: PUSH
84571: LD_VAR 0 12
84575: PUSH
84576: LD_INT 1
84578: ARRAY
84579: PPUSH
84580: LD_VAR 0 12
84584: PUSH
84585: LD_INT 2
84587: ARRAY
84588: PPUSH
84589: LD_VAR 0 7
84593: PPUSH
84594: LD_VAR 0 8
84598: PPUSH
84599: CALL_OW 298
84603: ST_TO_ADDR
// if tmp < distance then
84604: LD_VAR 0 9
84608: PUSH
84609: LD_VAR 0 10
84613: LESS
84614: IFFALSE 84636
// begin result := i ;
84616: LD_ADDR_VAR 0 5
84620: PUSH
84621: LD_VAR 0 6
84625: ST_TO_ADDR
// distance := tmp ;
84626: LD_ADDR_VAR 0 10
84630: PUSH
84631: LD_VAR 0 9
84635: ST_TO_ADDR
// end ; end ;
84636: GO 84494
84638: POP
84639: POP
// end ;
84640: LD_VAR 0 5
84644: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
84645: LD_INT 0
84647: PPUSH
84648: PPUSH
// if not driver or not IsInUnit ( driver ) then
84649: LD_VAR 0 1
84653: NOT
84654: PUSH
84655: LD_VAR 0 1
84659: PPUSH
84660: CALL_OW 310
84664: NOT
84665: OR
84666: IFFALSE 84670
// exit ;
84668: GO 84760
// vehicle := IsInUnit ( driver ) ;
84670: LD_ADDR_VAR 0 3
84674: PUSH
84675: LD_VAR 0 1
84679: PPUSH
84680: CALL_OW 310
84684: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
84685: LD_VAR 0 1
84689: PPUSH
84690: LD_STRING \
84692: PUSH
84693: LD_INT 0
84695: PUSH
84696: LD_INT 0
84698: PUSH
84699: LD_INT 0
84701: PUSH
84702: LD_INT 0
84704: PUSH
84705: LD_INT 0
84707: PUSH
84708: LD_INT 0
84710: PUSH
84711: EMPTY
84712: LIST
84713: LIST
84714: LIST
84715: LIST
84716: LIST
84717: LIST
84718: LIST
84719: PUSH
84720: LD_STRING E
84722: PUSH
84723: LD_INT 0
84725: PUSH
84726: LD_INT 0
84728: PUSH
84729: LD_VAR 0 3
84733: PUSH
84734: LD_INT 0
84736: PUSH
84737: LD_INT 0
84739: PUSH
84740: LD_INT 0
84742: PUSH
84743: EMPTY
84744: LIST
84745: LIST
84746: LIST
84747: LIST
84748: LIST
84749: LIST
84750: LIST
84751: PUSH
84752: EMPTY
84753: LIST
84754: LIST
84755: PPUSH
84756: CALL_OW 446
// end ;
84760: LD_VAR 0 2
84764: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
84765: LD_INT 0
84767: PPUSH
84768: PPUSH
// if not driver or not IsInUnit ( driver ) then
84769: LD_VAR 0 1
84773: NOT
84774: PUSH
84775: LD_VAR 0 1
84779: PPUSH
84780: CALL_OW 310
84784: NOT
84785: OR
84786: IFFALSE 84790
// exit ;
84788: GO 84880
// vehicle := IsInUnit ( driver ) ;
84790: LD_ADDR_VAR 0 3
84794: PUSH
84795: LD_VAR 0 1
84799: PPUSH
84800: CALL_OW 310
84804: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
84805: LD_VAR 0 1
84809: PPUSH
84810: LD_STRING \
84812: PUSH
84813: LD_INT 0
84815: PUSH
84816: LD_INT 0
84818: PUSH
84819: LD_INT 0
84821: PUSH
84822: LD_INT 0
84824: PUSH
84825: LD_INT 0
84827: PUSH
84828: LD_INT 0
84830: PUSH
84831: EMPTY
84832: LIST
84833: LIST
84834: LIST
84835: LIST
84836: LIST
84837: LIST
84838: LIST
84839: PUSH
84840: LD_STRING E
84842: PUSH
84843: LD_INT 0
84845: PUSH
84846: LD_INT 0
84848: PUSH
84849: LD_VAR 0 3
84853: PUSH
84854: LD_INT 0
84856: PUSH
84857: LD_INT 0
84859: PUSH
84860: LD_INT 0
84862: PUSH
84863: EMPTY
84864: LIST
84865: LIST
84866: LIST
84867: LIST
84868: LIST
84869: LIST
84870: LIST
84871: PUSH
84872: EMPTY
84873: LIST
84874: LIST
84875: PPUSH
84876: CALL_OW 447
// end ;
84880: LD_VAR 0 2
84884: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
84885: LD_INT 0
84887: PPUSH
84888: PPUSH
84889: PPUSH
// tmp := [ ] ;
84890: LD_ADDR_VAR 0 5
84894: PUSH
84895: EMPTY
84896: ST_TO_ADDR
// for i in units do
84897: LD_ADDR_VAR 0 4
84901: PUSH
84902: LD_VAR 0 1
84906: PUSH
84907: FOR_IN
84908: IFFALSE 84946
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
84910: LD_ADDR_VAR 0 5
84914: PUSH
84915: LD_VAR 0 5
84919: PPUSH
84920: LD_VAR 0 5
84924: PUSH
84925: LD_INT 1
84927: PLUS
84928: PPUSH
84929: LD_VAR 0 4
84933: PPUSH
84934: CALL_OW 256
84938: PPUSH
84939: CALL_OW 2
84943: ST_TO_ADDR
84944: GO 84907
84946: POP
84947: POP
// if not tmp then
84948: LD_VAR 0 5
84952: NOT
84953: IFFALSE 84957
// exit ;
84955: GO 85005
// if asc then
84957: LD_VAR 0 2
84961: IFFALSE 84985
// result := SortListByListAsc ( units , tmp ) else
84963: LD_ADDR_VAR 0 3
84967: PUSH
84968: LD_VAR 0 1
84972: PPUSH
84973: LD_VAR 0 5
84977: PPUSH
84978: CALL_OW 76
84982: ST_TO_ADDR
84983: GO 85005
// result := SortListByListDesc ( units , tmp ) ;
84985: LD_ADDR_VAR 0 3
84989: PUSH
84990: LD_VAR 0 1
84994: PPUSH
84995: LD_VAR 0 5
84999: PPUSH
85000: CALL_OW 77
85004: ST_TO_ADDR
// end ;
85005: LD_VAR 0 3
85009: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
85010: LD_INT 0
85012: PPUSH
85013: PPUSH
// task := GetTaskList ( mech ) ;
85014: LD_ADDR_VAR 0 4
85018: PUSH
85019: LD_VAR 0 1
85023: PPUSH
85024: CALL_OW 437
85028: ST_TO_ADDR
// if not task then
85029: LD_VAR 0 4
85033: NOT
85034: IFFALSE 85038
// exit ;
85036: GO 85080
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
85038: LD_ADDR_VAR 0 3
85042: PUSH
85043: LD_VAR 0 4
85047: PUSH
85048: LD_INT 1
85050: ARRAY
85051: PUSH
85052: LD_INT 1
85054: ARRAY
85055: PUSH
85056: LD_STRING r
85058: EQUAL
85059: PUSH
85060: LD_VAR 0 4
85064: PUSH
85065: LD_INT 1
85067: ARRAY
85068: PUSH
85069: LD_INT 4
85071: ARRAY
85072: PUSH
85073: LD_VAR 0 2
85077: EQUAL
85078: AND
85079: ST_TO_ADDR
// end ;
85080: LD_VAR 0 3
85084: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
85085: LD_INT 0
85087: PPUSH
// SetDir ( unit , d ) ;
85088: LD_VAR 0 1
85092: PPUSH
85093: LD_VAR 0 4
85097: PPUSH
85098: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
85102: LD_VAR 0 1
85106: PPUSH
85107: LD_VAR 0 2
85111: PPUSH
85112: LD_VAR 0 3
85116: PPUSH
85117: LD_VAR 0 5
85121: PPUSH
85122: CALL_OW 48
// end ;
85126: LD_VAR 0 6
85130: RET
// export function ToNaturalNumber ( number ) ; begin
85131: LD_INT 0
85133: PPUSH
// result := number div 1 ;
85134: LD_ADDR_VAR 0 2
85138: PUSH
85139: LD_VAR 0 1
85143: PUSH
85144: LD_INT 1
85146: DIV
85147: ST_TO_ADDR
// if number < 0 then
85148: LD_VAR 0 1
85152: PUSH
85153: LD_INT 0
85155: LESS
85156: IFFALSE 85166
// result := 0 ;
85158: LD_ADDR_VAR 0 2
85162: PUSH
85163: LD_INT 0
85165: ST_TO_ADDR
// end ;
85166: LD_VAR 0 2
85170: RET
// export function SortByClass ( units , class ) ; var un ; begin
85171: LD_INT 0
85173: PPUSH
85174: PPUSH
// if not units or not class then
85175: LD_VAR 0 1
85179: NOT
85180: PUSH
85181: LD_VAR 0 2
85185: NOT
85186: OR
85187: IFFALSE 85191
// exit ;
85189: GO 85286
// result := [ ] ;
85191: LD_ADDR_VAR 0 3
85195: PUSH
85196: EMPTY
85197: ST_TO_ADDR
// for un in units do
85198: LD_ADDR_VAR 0 4
85202: PUSH
85203: LD_VAR 0 1
85207: PUSH
85208: FOR_IN
85209: IFFALSE 85284
// if GetClass ( un ) = class then
85211: LD_VAR 0 4
85215: PPUSH
85216: CALL_OW 257
85220: PUSH
85221: LD_VAR 0 2
85225: EQUAL
85226: IFFALSE 85253
// result := Insert ( result , 1 , un ) else
85228: LD_ADDR_VAR 0 3
85232: PUSH
85233: LD_VAR 0 3
85237: PPUSH
85238: LD_INT 1
85240: PPUSH
85241: LD_VAR 0 4
85245: PPUSH
85246: CALL_OW 2
85250: ST_TO_ADDR
85251: GO 85282
// result := Replace ( result , result + 1 , un ) ;
85253: LD_ADDR_VAR 0 3
85257: PUSH
85258: LD_VAR 0 3
85262: PPUSH
85263: LD_VAR 0 3
85267: PUSH
85268: LD_INT 1
85270: PLUS
85271: PPUSH
85272: LD_VAR 0 4
85276: PPUSH
85277: CALL_OW 1
85281: ST_TO_ADDR
85282: GO 85208
85284: POP
85285: POP
// end ;
85286: LD_VAR 0 3
85290: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
85291: LD_INT 0
85293: PPUSH
85294: PPUSH
85295: PPUSH
85296: PPUSH
85297: PPUSH
85298: PPUSH
85299: PPUSH
// result := [ ] ;
85300: LD_ADDR_VAR 0 4
85304: PUSH
85305: EMPTY
85306: ST_TO_ADDR
// if x - r < 0 then
85307: LD_VAR 0 1
85311: PUSH
85312: LD_VAR 0 3
85316: MINUS
85317: PUSH
85318: LD_INT 0
85320: LESS
85321: IFFALSE 85333
// min_x := 0 else
85323: LD_ADDR_VAR 0 8
85327: PUSH
85328: LD_INT 0
85330: ST_TO_ADDR
85331: GO 85349
// min_x := x - r ;
85333: LD_ADDR_VAR 0 8
85337: PUSH
85338: LD_VAR 0 1
85342: PUSH
85343: LD_VAR 0 3
85347: MINUS
85348: ST_TO_ADDR
// if y - r < 0 then
85349: LD_VAR 0 2
85353: PUSH
85354: LD_VAR 0 3
85358: MINUS
85359: PUSH
85360: LD_INT 0
85362: LESS
85363: IFFALSE 85375
// min_y := 0 else
85365: LD_ADDR_VAR 0 7
85369: PUSH
85370: LD_INT 0
85372: ST_TO_ADDR
85373: GO 85391
// min_y := y - r ;
85375: LD_ADDR_VAR 0 7
85379: PUSH
85380: LD_VAR 0 2
85384: PUSH
85385: LD_VAR 0 3
85389: MINUS
85390: ST_TO_ADDR
// max_x := x + r ;
85391: LD_ADDR_VAR 0 9
85395: PUSH
85396: LD_VAR 0 1
85400: PUSH
85401: LD_VAR 0 3
85405: PLUS
85406: ST_TO_ADDR
// max_y := y + r ;
85407: LD_ADDR_VAR 0 10
85411: PUSH
85412: LD_VAR 0 2
85416: PUSH
85417: LD_VAR 0 3
85421: PLUS
85422: ST_TO_ADDR
// for _x = min_x to max_x do
85423: LD_ADDR_VAR 0 5
85427: PUSH
85428: DOUBLE
85429: LD_VAR 0 8
85433: DEC
85434: ST_TO_ADDR
85435: LD_VAR 0 9
85439: PUSH
85440: FOR_TO
85441: IFFALSE 85542
// for _y = min_y to max_y do
85443: LD_ADDR_VAR 0 6
85447: PUSH
85448: DOUBLE
85449: LD_VAR 0 7
85453: DEC
85454: ST_TO_ADDR
85455: LD_VAR 0 10
85459: PUSH
85460: FOR_TO
85461: IFFALSE 85538
// begin if not ValidHex ( _x , _y ) then
85463: LD_VAR 0 5
85467: PPUSH
85468: LD_VAR 0 6
85472: PPUSH
85473: CALL_OW 488
85477: NOT
85478: IFFALSE 85482
// continue ;
85480: GO 85460
// if GetResourceTypeXY ( _x , _y ) then
85482: LD_VAR 0 5
85486: PPUSH
85487: LD_VAR 0 6
85491: PPUSH
85492: CALL_OW 283
85496: IFFALSE 85536
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
85498: LD_ADDR_VAR 0 4
85502: PUSH
85503: LD_VAR 0 4
85507: PPUSH
85508: LD_VAR 0 4
85512: PUSH
85513: LD_INT 1
85515: PLUS
85516: PPUSH
85517: LD_VAR 0 5
85521: PUSH
85522: LD_VAR 0 6
85526: PUSH
85527: EMPTY
85528: LIST
85529: LIST
85530: PPUSH
85531: CALL_OW 1
85535: ST_TO_ADDR
// end ;
85536: GO 85460
85538: POP
85539: POP
85540: GO 85440
85542: POP
85543: POP
// end ;
85544: LD_VAR 0 4
85548: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
85549: LD_INT 0
85551: PPUSH
85552: PPUSH
85553: PPUSH
85554: PPUSH
85555: PPUSH
85556: PPUSH
85557: PPUSH
85558: PPUSH
// if not units then
85559: LD_VAR 0 1
85563: NOT
85564: IFFALSE 85568
// exit ;
85566: GO 86079
// result := UnitFilter ( units , [ f_ok ] ) ;
85568: LD_ADDR_VAR 0 3
85572: PUSH
85573: LD_VAR 0 1
85577: PPUSH
85578: LD_INT 50
85580: PUSH
85581: EMPTY
85582: LIST
85583: PPUSH
85584: CALL_OW 72
85588: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
85589: LD_ADDR_VAR 0 8
85593: PUSH
85594: LD_VAR 0 1
85598: PUSH
85599: LD_INT 1
85601: ARRAY
85602: PPUSH
85603: CALL_OW 255
85607: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
85608: LD_ADDR_VAR 0 10
85612: PUSH
85613: LD_INT 29
85615: PUSH
85616: LD_EXP 52
85620: PUSH
85621: LD_INT 49
85623: PUSH
85624: EMPTY
85625: LIST
85626: LIST
85627: LIST
85628: ST_TO_ADDR
// if not result then
85629: LD_VAR 0 3
85633: NOT
85634: IFFALSE 85638
// exit ;
85636: GO 86079
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
85638: LD_ADDR_VAR 0 5
85642: PUSH
85643: LD_INT 81
85645: PUSH
85646: LD_VAR 0 8
85650: PUSH
85651: EMPTY
85652: LIST
85653: LIST
85654: PPUSH
85655: CALL_OW 69
85659: ST_TO_ADDR
// for i in result do
85660: LD_ADDR_VAR 0 4
85664: PUSH
85665: LD_VAR 0 3
85669: PUSH
85670: FOR_IN
85671: IFFALSE 86077
// begin tag := GetTag ( i ) + 1 ;
85673: LD_ADDR_VAR 0 9
85677: PUSH
85678: LD_VAR 0 4
85682: PPUSH
85683: CALL_OW 110
85687: PUSH
85688: LD_INT 1
85690: PLUS
85691: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
85692: LD_ADDR_VAR 0 7
85696: PUSH
85697: LD_VAR 0 4
85701: PPUSH
85702: CALL_OW 250
85706: PPUSH
85707: LD_VAR 0 4
85711: PPUSH
85712: CALL_OW 251
85716: PPUSH
85717: LD_INT 6
85719: PPUSH
85720: CALL 85291 0 3
85724: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
85725: LD_VAR 0 7
85729: PUSH
85730: LD_VAR 0 4
85734: PPUSH
85735: CALL_OW 264
85739: PUSH
85740: LD_VAR 0 10
85744: IN
85745: NOT
85746: AND
85747: IFFALSE 85786
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
85749: LD_VAR 0 4
85753: PPUSH
85754: LD_VAR 0 7
85758: PUSH
85759: LD_INT 1
85761: ARRAY
85762: PUSH
85763: LD_INT 1
85765: ARRAY
85766: PPUSH
85767: LD_VAR 0 7
85771: PUSH
85772: LD_INT 1
85774: ARRAY
85775: PUSH
85776: LD_INT 2
85778: ARRAY
85779: PPUSH
85780: CALL_OW 116
85784: GO 86075
// if path > tag then
85786: LD_VAR 0 2
85790: PUSH
85791: LD_VAR 0 9
85795: GREATER
85796: IFFALSE 86004
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
85798: LD_ADDR_VAR 0 6
85802: PUSH
85803: LD_VAR 0 5
85807: PPUSH
85808: LD_INT 91
85810: PUSH
85811: LD_VAR 0 4
85815: PUSH
85816: LD_INT 12
85818: PUSH
85819: EMPTY
85820: LIST
85821: LIST
85822: LIST
85823: PPUSH
85824: CALL_OW 72
85828: ST_TO_ADDR
// if nearEnemy then
85829: LD_VAR 0 6
85833: IFFALSE 85902
// begin if GetWeapon ( i ) = ru_time_lapser then
85835: LD_VAR 0 4
85839: PPUSH
85840: CALL_OW 264
85844: PUSH
85845: LD_INT 49
85847: EQUAL
85848: IFFALSE 85876
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
85850: LD_VAR 0 4
85854: PPUSH
85855: LD_VAR 0 6
85859: PPUSH
85860: LD_VAR 0 4
85864: PPUSH
85865: CALL_OW 74
85869: PPUSH
85870: CALL_OW 112
85874: GO 85900
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
85876: LD_VAR 0 4
85880: PPUSH
85881: LD_VAR 0 6
85885: PPUSH
85886: LD_VAR 0 4
85890: PPUSH
85891: CALL_OW 74
85895: PPUSH
85896: CALL_OW 115
// end else
85900: GO 86002
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
85902: LD_VAR 0 4
85906: PPUSH
85907: LD_VAR 0 2
85911: PUSH
85912: LD_VAR 0 9
85916: ARRAY
85917: PUSH
85918: LD_INT 1
85920: ARRAY
85921: PPUSH
85922: LD_VAR 0 2
85926: PUSH
85927: LD_VAR 0 9
85931: ARRAY
85932: PUSH
85933: LD_INT 2
85935: ARRAY
85936: PPUSH
85937: CALL_OW 297
85941: PUSH
85942: LD_INT 6
85944: GREATER
85945: IFFALSE 85988
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
85947: LD_VAR 0 4
85951: PPUSH
85952: LD_VAR 0 2
85956: PUSH
85957: LD_VAR 0 9
85961: ARRAY
85962: PUSH
85963: LD_INT 1
85965: ARRAY
85966: PPUSH
85967: LD_VAR 0 2
85971: PUSH
85972: LD_VAR 0 9
85976: ARRAY
85977: PUSH
85978: LD_INT 2
85980: ARRAY
85981: PPUSH
85982: CALL_OW 114
85986: GO 86002
// SetTag ( i , tag ) ;
85988: LD_VAR 0 4
85992: PPUSH
85993: LD_VAR 0 9
85997: PPUSH
85998: CALL_OW 109
// end else
86002: GO 86075
// if enemy then
86004: LD_VAR 0 5
86008: IFFALSE 86075
// begin if GetWeapon ( i ) = ru_time_lapser then
86010: LD_VAR 0 4
86014: PPUSH
86015: CALL_OW 264
86019: PUSH
86020: LD_INT 49
86022: EQUAL
86023: IFFALSE 86051
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
86025: LD_VAR 0 4
86029: PPUSH
86030: LD_VAR 0 5
86034: PPUSH
86035: LD_VAR 0 4
86039: PPUSH
86040: CALL_OW 74
86044: PPUSH
86045: CALL_OW 112
86049: GO 86075
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
86051: LD_VAR 0 4
86055: PPUSH
86056: LD_VAR 0 5
86060: PPUSH
86061: LD_VAR 0 4
86065: PPUSH
86066: CALL_OW 74
86070: PPUSH
86071: CALL_OW 115
// end ; end ;
86075: GO 85670
86077: POP
86078: POP
// end ;
86079: LD_VAR 0 3
86083: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
86084: LD_INT 0
86086: PPUSH
86087: PPUSH
86088: PPUSH
// if not unit or IsInUnit ( unit ) then
86089: LD_VAR 0 1
86093: NOT
86094: PUSH
86095: LD_VAR 0 1
86099: PPUSH
86100: CALL_OW 310
86104: OR
86105: IFFALSE 86109
// exit ;
86107: GO 86200
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
86109: LD_ADDR_VAR 0 4
86113: PUSH
86114: LD_VAR 0 1
86118: PPUSH
86119: CALL_OW 250
86123: PPUSH
86124: LD_VAR 0 2
86128: PPUSH
86129: LD_INT 1
86131: PPUSH
86132: CALL_OW 272
86136: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
86137: LD_ADDR_VAR 0 5
86141: PUSH
86142: LD_VAR 0 1
86146: PPUSH
86147: CALL_OW 251
86151: PPUSH
86152: LD_VAR 0 2
86156: PPUSH
86157: LD_INT 1
86159: PPUSH
86160: CALL_OW 273
86164: ST_TO_ADDR
// if ValidHex ( x , y ) then
86165: LD_VAR 0 4
86169: PPUSH
86170: LD_VAR 0 5
86174: PPUSH
86175: CALL_OW 488
86179: IFFALSE 86200
// ComTurnXY ( unit , x , y ) ;
86181: LD_VAR 0 1
86185: PPUSH
86186: LD_VAR 0 4
86190: PPUSH
86191: LD_VAR 0 5
86195: PPUSH
86196: CALL_OW 118
// end ;
86200: LD_VAR 0 3
86204: RET
// export function SeeUnits ( side , units ) ; var i ; begin
86205: LD_INT 0
86207: PPUSH
86208: PPUSH
// result := false ;
86209: LD_ADDR_VAR 0 3
86213: PUSH
86214: LD_INT 0
86216: ST_TO_ADDR
// if not units then
86217: LD_VAR 0 2
86221: NOT
86222: IFFALSE 86226
// exit ;
86224: GO 86271
// for i in units do
86226: LD_ADDR_VAR 0 4
86230: PUSH
86231: LD_VAR 0 2
86235: PUSH
86236: FOR_IN
86237: IFFALSE 86269
// if See ( side , i ) then
86239: LD_VAR 0 1
86243: PPUSH
86244: LD_VAR 0 4
86248: PPUSH
86249: CALL_OW 292
86253: IFFALSE 86267
// begin result := true ;
86255: LD_ADDR_VAR 0 3
86259: PUSH
86260: LD_INT 1
86262: ST_TO_ADDR
// exit ;
86263: POP
86264: POP
86265: GO 86271
// end ;
86267: GO 86236
86269: POP
86270: POP
// end ;
86271: LD_VAR 0 3
86275: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
86276: LD_INT 0
86278: PPUSH
86279: PPUSH
86280: PPUSH
86281: PPUSH
// if not unit or not points then
86282: LD_VAR 0 1
86286: NOT
86287: PUSH
86288: LD_VAR 0 2
86292: NOT
86293: OR
86294: IFFALSE 86298
// exit ;
86296: GO 86388
// dist := 99999 ;
86298: LD_ADDR_VAR 0 5
86302: PUSH
86303: LD_INT 99999
86305: ST_TO_ADDR
// for i in points do
86306: LD_ADDR_VAR 0 4
86310: PUSH
86311: LD_VAR 0 2
86315: PUSH
86316: FOR_IN
86317: IFFALSE 86386
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
86319: LD_ADDR_VAR 0 6
86323: PUSH
86324: LD_VAR 0 1
86328: PPUSH
86329: LD_VAR 0 4
86333: PUSH
86334: LD_INT 1
86336: ARRAY
86337: PPUSH
86338: LD_VAR 0 4
86342: PUSH
86343: LD_INT 2
86345: ARRAY
86346: PPUSH
86347: CALL_OW 297
86351: ST_TO_ADDR
// if tmpDist < dist then
86352: LD_VAR 0 6
86356: PUSH
86357: LD_VAR 0 5
86361: LESS
86362: IFFALSE 86384
// begin result := i ;
86364: LD_ADDR_VAR 0 3
86368: PUSH
86369: LD_VAR 0 4
86373: ST_TO_ADDR
// dist := tmpDist ;
86374: LD_ADDR_VAR 0 5
86378: PUSH
86379: LD_VAR 0 6
86383: ST_TO_ADDR
// end ; end ;
86384: GO 86316
86386: POP
86387: POP
// end ;
86388: LD_VAR 0 3
86392: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
86393: LD_INT 0
86395: PPUSH
// uc_side := side ;
86396: LD_ADDR_OWVAR 20
86400: PUSH
86401: LD_VAR 0 1
86405: ST_TO_ADDR
// uc_nation := 3 ;
86406: LD_ADDR_OWVAR 21
86410: PUSH
86411: LD_INT 3
86413: ST_TO_ADDR
// vc_chassis := 25 ;
86414: LD_ADDR_OWVAR 37
86418: PUSH
86419: LD_INT 25
86421: ST_TO_ADDR
// vc_engine := engine_siberite ;
86422: LD_ADDR_OWVAR 39
86426: PUSH
86427: LD_INT 3
86429: ST_TO_ADDR
// vc_control := control_computer ;
86430: LD_ADDR_OWVAR 38
86434: PUSH
86435: LD_INT 3
86437: ST_TO_ADDR
// vc_weapon := 59 ;
86438: LD_ADDR_OWVAR 40
86442: PUSH
86443: LD_INT 59
86445: ST_TO_ADDR
// result := CreateVehicle ;
86446: LD_ADDR_VAR 0 5
86450: PUSH
86451: CALL_OW 45
86455: ST_TO_ADDR
// SetDir ( result , d ) ;
86456: LD_VAR 0 5
86460: PPUSH
86461: LD_VAR 0 4
86465: PPUSH
86466: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
86470: LD_VAR 0 5
86474: PPUSH
86475: LD_VAR 0 2
86479: PPUSH
86480: LD_VAR 0 3
86484: PPUSH
86485: LD_INT 0
86487: PPUSH
86488: CALL_OW 48
// end ;
86492: LD_VAR 0 5
86496: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
86497: LD_INT 0
86499: PPUSH
86500: PPUSH
86501: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
86502: LD_ADDR_VAR 0 2
86506: PUSH
86507: LD_INT 0
86509: PUSH
86510: LD_INT 0
86512: PUSH
86513: LD_INT 0
86515: PUSH
86516: LD_INT 0
86518: PUSH
86519: EMPTY
86520: LIST
86521: LIST
86522: LIST
86523: LIST
86524: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
86525: LD_VAR 0 1
86529: NOT
86530: PUSH
86531: LD_VAR 0 1
86535: PPUSH
86536: CALL_OW 264
86540: PUSH
86541: LD_INT 12
86543: PUSH
86544: LD_INT 51
86546: PUSH
86547: LD_INT 32
86549: PUSH
86550: LD_EXP 49
86554: PUSH
86555: EMPTY
86556: LIST
86557: LIST
86558: LIST
86559: LIST
86560: IN
86561: NOT
86562: OR
86563: IFFALSE 86567
// exit ;
86565: GO 86665
// for i := 1 to 3 do
86567: LD_ADDR_VAR 0 3
86571: PUSH
86572: DOUBLE
86573: LD_INT 1
86575: DEC
86576: ST_TO_ADDR
86577: LD_INT 3
86579: PUSH
86580: FOR_TO
86581: IFFALSE 86663
// begin tmp := GetCargo ( cargo , i ) ;
86583: LD_ADDR_VAR 0 4
86587: PUSH
86588: LD_VAR 0 1
86592: PPUSH
86593: LD_VAR 0 3
86597: PPUSH
86598: CALL_OW 289
86602: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
86603: LD_ADDR_VAR 0 2
86607: PUSH
86608: LD_VAR 0 2
86612: PPUSH
86613: LD_VAR 0 3
86617: PPUSH
86618: LD_VAR 0 4
86622: PPUSH
86623: CALL_OW 1
86627: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
86628: LD_ADDR_VAR 0 2
86632: PUSH
86633: LD_VAR 0 2
86637: PPUSH
86638: LD_INT 4
86640: PPUSH
86641: LD_VAR 0 2
86645: PUSH
86646: LD_INT 4
86648: ARRAY
86649: PUSH
86650: LD_VAR 0 4
86654: PLUS
86655: PPUSH
86656: CALL_OW 1
86660: ST_TO_ADDR
// end ;
86661: GO 86580
86663: POP
86664: POP
// end ; end_of_file
86665: LD_VAR 0 2
86669: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86670: LD_VAR 0 1
86674: PUSH
86675: LD_INT 200
86677: DOUBLE
86678: GREATEREQUAL
86679: IFFALSE 86687
86681: LD_INT 299
86683: DOUBLE
86684: LESSEQUAL
86685: IFTRUE 86689
86687: GO 86721
86689: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86690: LD_VAR 0 1
86694: PPUSH
86695: LD_VAR 0 2
86699: PPUSH
86700: LD_VAR 0 3
86704: PPUSH
86705: LD_VAR 0 4
86709: PPUSH
86710: LD_VAR 0 5
86714: PPUSH
86715: CALL 42010 0 5
86719: GO 86798
86721: LD_INT 300
86723: DOUBLE
86724: GREATEREQUAL
86725: IFFALSE 86733
86727: LD_INT 399
86729: DOUBLE
86730: LESSEQUAL
86731: IFTRUE 86735
86733: GO 86797
86735: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86736: LD_VAR 0 1
86740: PPUSH
86741: LD_VAR 0 2
86745: PPUSH
86746: LD_VAR 0 3
86750: PPUSH
86751: LD_VAR 0 4
86755: PPUSH
86756: LD_VAR 0 5
86760: PPUSH
86761: LD_VAR 0 6
86765: PPUSH
86766: LD_VAR 0 7
86770: PPUSH
86771: LD_VAR 0 8
86775: PPUSH
86776: LD_VAR 0 9
86780: PPUSH
86781: LD_VAR 0 10
86785: PPUSH
86786: LD_VAR 0 11
86790: PPUSH
86791: CALL 39652 0 11
86795: GO 86798
86797: POP
// end ;
86798: PPOPN 11
86800: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86801: LD_VAR 0 1
86805: PPUSH
86806: LD_VAR 0 2
86810: PPUSH
86811: LD_VAR 0 3
86815: PPUSH
86816: LD_VAR 0 4
86820: PPUSH
86821: LD_VAR 0 5
86825: PPUSH
86826: CALL 41746 0 5
// end ; end_of_file
86830: PPOPN 5
86832: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
86833: LD_VAR 0 1
86837: PPUSH
86838: LD_VAR 0 2
86842: PPUSH
86843: LD_VAR 0 3
86847: PPUSH
86848: LD_VAR 0 4
86852: PPUSH
86853: LD_VAR 0 5
86857: PPUSH
86858: LD_VAR 0 6
86862: PPUSH
86863: CALL 27345 0 6
// end ;
86867: PPOPN 6
86869: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
86870: LD_INT 0
86872: PPUSH
// begin if not units then
86873: LD_VAR 0 1
86877: NOT
86878: IFFALSE 86882
// exit ;
86880: GO 86970
// if p1 = 1 then
86882: LD_VAR 0 2
86886: PUSH
86887: LD_INT 1
86889: EQUAL
86890: IFFALSE 86970
// begin if p2 = 1 then
86892: LD_VAR 0 3
86896: PUSH
86897: LD_INT 1
86899: EQUAL
86900: IFFALSE 86931
// begin for i in units do
86902: LD_ADDR_VAR 0 7
86906: PUSH
86907: LD_VAR 0 1
86911: PUSH
86912: FOR_IN
86913: IFFALSE 86929
// begin SetUnitAttackType ( i , 3 ) ;
86915: LD_VAR 0 7
86919: PPUSH
86920: LD_INT 3
86922: PPUSH
86923: CALL_OW 603
// end ;
86927: GO 86912
86929: POP
86930: POP
// end ; if p2 = 2 then
86931: LD_VAR 0 3
86935: PUSH
86936: LD_INT 2
86938: EQUAL
86939: IFFALSE 86970
// begin for i in units do
86941: LD_ADDR_VAR 0 7
86945: PUSH
86946: LD_VAR 0 1
86950: PUSH
86951: FOR_IN
86952: IFFALSE 86968
// begin SetUnitAttackType ( i , 1 ) ;
86954: LD_VAR 0 7
86958: PPUSH
86959: LD_INT 1
86961: PPUSH
86962: CALL_OW 603
// end ;
86966: GO 86951
86968: POP
86969: POP
// end ; end ; end ;
86970: PPOPN 7
86972: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
86973: CALL 27320 0 0
// end ;
86977: PPOPN 1
86979: END
