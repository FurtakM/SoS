// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 291 0 0
// PrepareRussian ;
  23: CALL 8848 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 73498 0 9
// Action ;
  79: CALL 14657 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 9
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// sikorskiIsKilled := false ;
 167: LD_ADDR_EXP 10
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// invincibleMode := false ;
 175: LD_ADDR_EXP 5
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// captureRocketCounter := 0 ;
 183: LD_ADDR_EXP 11
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// killMechCounter := 0 ;
 191: LD_ADDR_EXP 12
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// end ;
 199: LD_VAR 0 1
 203: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 204: LD_INT 22
 206: PUSH
 207: LD_INT 1
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 34
 216: PUSH
 217: LD_INT 6
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: PUSH
 233: LD_INT 6
 235: GREATEREQUAL
 236: IFFALSE 248
 238: GO 240
 240: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 241: LD_STRING ACH_ARMOR
 243: PPUSH
 244: CALL_OW 543
 248: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 249: LD_EXP 11
 253: PUSH
 254: LD_INT 3
 256: GREATEREQUAL
 257: IFFALSE 269
 259: GO 261
 261: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 262: LD_STRING ACH_TOOL
 264: PPUSH
 265: CALL_OW 543
 269: END
// every 0 0$1 trigger killMechCounter >= 10 do
 270: LD_EXP 12
 274: PUSH
 275: LD_INT 10
 277: GREATEREQUAL
 278: IFFALSE 290
 280: GO 282
 282: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 283: LD_STRING ACH_MECH
 285: PPUSH
 286: CALL_OW 543
 290: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
 306: PPUSH
 307: PPUSH
 308: PPUSH
// uc_side := 1 ;
 309: LD_ADDR_OWVAR 20
 313: PUSH
 314: LD_INT 1
 316: ST_TO_ADDR
// uc_nation := 1 ;
 317: LD_ADDR_OWVAR 21
 321: PUSH
 322: LD_INT 1
 324: ST_TO_ADDR
// PrepareGammaBase ;
 325: CALL 2486 0 0
// x := 52 ;
 329: LD_ADDR_VAR 0 13
 333: PUSH
 334: LD_INT 52
 336: ST_TO_ADDR
// y := 16 ;
 337: LD_ADDR_VAR 0 14
 341: PUSH
 342: LD_INT 16
 344: ST_TO_ADDR
// case gammaCommander of 1 :
 345: LD_EXP 13
 349: PUSH
 350: LD_INT 1
 352: DOUBLE
 353: EQUAL
 354: IFTRUE 358
 356: GO 443
 358: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 359: LD_ADDR_EXP 16
 363: PUSH
 364: LD_STRING Donaldson
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_STRING 04_
 372: PPUSH
 373: CALL 39367 0 3
 377: ST_TO_ADDR
// if HexInfo ( x , y ) then
 378: LD_VAR 0 13
 382: PPUSH
 383: LD_VAR 0 14
 387: PPUSH
 388: CALL_OW 428
 392: IFFALSE 410
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 394: LD_EXP 16
 398: PPUSH
 399: LD_EXP 30
 403: PPUSH
 404: CALL_OW 52
 408: GO 432
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 410: LD_EXP 16
 414: PPUSH
 415: LD_VAR 0 13
 419: PPUSH
 420: LD_VAR 0 14
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 48
// ComHold ( Donaldson ) ;
 432: LD_EXP 16
 436: PPUSH
 437: CALL_OW 140
// end ; 2 :
 441: GO 630
 443: LD_INT 2
 445: DOUBLE
 446: EQUAL
 447: IFTRUE 451
 449: GO 536
 451: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 452: LD_ADDR_EXP 15
 456: PUSH
 457: LD_STRING Brown
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_STRING 04_
 465: PPUSH
 466: CALL 39367 0 3
 470: ST_TO_ADDR
// if HexInfo ( x , y ) then
 471: LD_VAR 0 13
 475: PPUSH
 476: LD_VAR 0 14
 480: PPUSH
 481: CALL_OW 428
 485: IFFALSE 503
// PlaceHumanInUnit ( Brown , amDepot ) else
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 30
 496: PPUSH
 497: CALL_OW 52
 501: GO 525
// PlaceUnitXY ( Brown , x , y , false ) ;
 503: LD_EXP 15
 507: PPUSH
 508: LD_VAR 0 13
 512: PPUSH
 513: LD_VAR 0 14
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 48
// ComHold ( Brown ) ;
 525: LD_EXP 15
 529: PPUSH
 530: CALL_OW 140
// end ; 3 :
 534: GO 630
 536: LD_INT 3
 538: DOUBLE
 539: EQUAL
 540: IFTRUE 544
 542: GO 629
 544: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 545: LD_ADDR_EXP 24
 549: PUSH
 550: LD_STRING VanHouten
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_STRING 
 558: PPUSH
 559: CALL 39367 0 3
 563: ST_TO_ADDR
// if HexInfo ( x , y ) then
 564: LD_VAR 0 13
 568: PPUSH
 569: LD_VAR 0 14
 573: PPUSH
 574: CALL_OW 428
 578: IFFALSE 596
// PlaceHumanInUnit ( Houten , amDepot ) else
 580: LD_EXP 24
 584: PPUSH
 585: LD_EXP 30
 589: PPUSH
 590: CALL_OW 52
 594: GO 618
// PlaceUnitXY ( Houten , x , y , false ) ;
 596: LD_EXP 24
 600: PPUSH
 601: LD_VAR 0 13
 605: PPUSH
 606: LD_VAR 0 14
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// ComHold ( Houten ) ;
 618: LD_EXP 24
 622: PPUSH
 623: CALL_OW 140
// end ; end ;
 627: GO 630
 629: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 630: LD_ADDR_EXP 28
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: LD_STRING 
 643: PPUSH
 644: CALL 39367 0 3
 648: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 649: LD_ADDR_EXP 29
 653: PUSH
 654: LD_STRING Powell
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: LD_STRING 
 662: PPUSH
 663: CALL 39367 0 3
 667: ST_TO_ADDR
// tmp := [ ] ;
 668: LD_ADDR_VAR 0 4
 672: PUSH
 673: EMPTY
 674: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 675: LD_STRING 04_Lisa
 677: PUSH
 678: EMPTY
 679: LIST
 680: PPUSH
 681: CALL_OW 28
 685: PUSH
 686: LD_STRING LisaInDelta
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 30
 696: NOT
 697: AND
 698: PUSH
 699: LD_STRING 07_Lisa
 701: PUSH
 702: EMPTY
 703: LIST
 704: PPUSH
 705: CALL_OW 28
 709: NOT
 710: AND
 711: IFFALSE 754
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 713: LD_ADDR_EXP 19
 717: PUSH
 718: LD_STRING Lisa
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: LD_STRING 04_
 726: PPUSH
 727: CALL 39367 0 3
 731: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 732: LD_ADDR_VAR 0 5
 736: PUSH
 737: LD_VAR 0 5
 741: PPUSH
 742: LD_EXP 19
 746: PPUSH
 747: CALL 76816 0 2
 751: ST_TO_ADDR
// end else
 752: GO 813
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 754: LD_EXP 19
 758: NOT
 759: PUSH
 760: LD_STRING LisaIn07
 762: PPUSH
 763: LD_INT 0
 765: PPUSH
 766: CALL_OW 30
 770: NOT
 771: AND
 772: IFFALSE 813
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 774: LD_ADDR_EXP 19
 778: PUSH
 779: LD_STRING Lisa
 781: PPUSH
 782: LD_INT 1
 784: PPUSH
 785: LD_STRING 07_
 787: PPUSH
 788: CALL 39367 0 3
 792: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 793: LD_ADDR_VAR 0 5
 797: PUSH
 798: LD_VAR 0 5
 802: PPUSH
 803: LD_EXP 19
 807: PPUSH
 808: CALL 76816 0 2
 812: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 813: LD_STRING 04_Bobby
 815: PUSH
 816: EMPTY
 817: LIST
 818: PPUSH
 819: CALL_OW 28
 823: PUSH
 824: LD_STRING BobbyInDelta
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: CALL_OW 30
 834: NOT
 835: AND
 836: PUSH
 837: LD_STRING 07_Bobby
 839: PUSH
 840: EMPTY
 841: LIST
 842: PPUSH
 843: CALL_OW 28
 847: NOT
 848: AND
 849: IFFALSE 892
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 851: LD_ADDR_EXP 17
 855: PUSH
 856: LD_STRING Bobby
 858: PPUSH
 859: LD_INT 1
 861: PPUSH
 862: LD_STRING 04_
 864: PPUSH
 865: CALL 39367 0 3
 869: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 870: LD_ADDR_VAR 0 5
 874: PUSH
 875: LD_VAR 0 5
 879: PPUSH
 880: LD_EXP 17
 884: PPUSH
 885: CALL 76816 0 2
 889: ST_TO_ADDR
// end else
 890: GO 951
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 892: LD_EXP 17
 896: NOT
 897: PUSH
 898: LD_STRING BobbyIn07
 900: PPUSH
 901: LD_INT 0
 903: PPUSH
 904: CALL_OW 30
 908: NOT
 909: AND
 910: IFFALSE 951
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 912: LD_ADDR_EXP 17
 916: PUSH
 917: LD_STRING Bobby
 919: PPUSH
 920: LD_INT 1
 922: PPUSH
 923: LD_STRING 07_
 925: PPUSH
 926: CALL 39367 0 3
 930: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 931: LD_ADDR_VAR 0 5
 935: PUSH
 936: LD_VAR 0 5
 940: PPUSH
 941: LD_EXP 17
 945: PPUSH
 946: CALL 76816 0 2
 950: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 951: LD_STRING 04_Cyrus
 953: PUSH
 954: EMPTY
 955: LIST
 956: PPUSH
 957: CALL_OW 28
 961: PUSH
 962: LD_STRING CyrusInDelta
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 30
 972: NOT
 973: AND
 974: PUSH
 975: LD_STRING 07_Cyrus
 977: PUSH
 978: EMPTY
 979: LIST
 980: PPUSH
 981: CALL_OW 28
 985: NOT
 986: AND
 987: IFFALSE 1030
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
 989: LD_ADDR_EXP 18
 993: PUSH
 994: LD_STRING Cyrus
 996: PPUSH
 997: LD_INT 1
 999: PPUSH
1000: LD_STRING 04_
1002: PPUSH
1003: CALL 39367 0 3
1007: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
1008: LD_ADDR_VAR 0 5
1012: PUSH
1013: LD_VAR 0 5
1017: PPUSH
1018: LD_EXP 18
1022: PPUSH
1023: CALL 76816 0 2
1027: ST_TO_ADDR
// end else
1028: GO 1089
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1030: LD_EXP 18
1034: NOT
1035: PUSH
1036: LD_STRING CyrusIn07
1038: PPUSH
1039: LD_INT 0
1041: PPUSH
1042: CALL_OW 30
1046: NOT
1047: AND
1048: IFFALSE 1089
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
1050: LD_ADDR_EXP 18
1054: PUSH
1055: LD_STRING Cyrus
1057: PPUSH
1058: LD_INT 1
1060: PPUSH
1061: LD_STRING 07_
1063: PPUSH
1064: CALL 39367 0 3
1068: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
1069: LD_ADDR_VAR 0 5
1073: PUSH
1074: LD_VAR 0 5
1078: PPUSH
1079: LD_EXP 18
1083: PPUSH
1084: CALL 76816 0 2
1088: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1089: LD_STRING 04_Brown
1091: PUSH
1092: EMPTY
1093: LIST
1094: PPUSH
1095: CALL_OW 28
1099: PUSH
1100: LD_STRING BrownInDelta
1102: PPUSH
1103: LD_INT 0
1105: PPUSH
1106: CALL_OW 30
1110: NOT
1111: AND
1112: PUSH
1113: LD_STRING 07_Brown
1115: PUSH
1116: EMPTY
1117: LIST
1118: PPUSH
1119: CALL_OW 28
1123: NOT
1124: AND
1125: PUSH
1126: LD_EXP 13
1130: PUSH
1131: LD_INT 2
1133: NONEQUAL
1134: AND
1135: IFFALSE 1178
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1137: LD_ADDR_EXP 15
1141: PUSH
1142: LD_STRING Brown
1144: PPUSH
1145: LD_INT 1
1147: PPUSH
1148: LD_STRING 04_
1150: PPUSH
1151: CALL 39367 0 3
1155: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1156: LD_ADDR_VAR 0 5
1160: PUSH
1161: LD_VAR 0 5
1165: PPUSH
1166: LD_EXP 15
1170: PPUSH
1171: CALL 76816 0 2
1175: ST_TO_ADDR
// end else
1176: GO 1247
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1178: LD_EXP 15
1182: NOT
1183: PUSH
1184: LD_STRING BrownIn07
1186: PPUSH
1187: LD_INT 0
1189: PPUSH
1190: CALL_OW 30
1194: NOT
1195: AND
1196: PUSH
1197: LD_EXP 13
1201: PUSH
1202: LD_INT 2
1204: NONEQUAL
1205: AND
1206: IFFALSE 1247
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1208: LD_ADDR_EXP 15
1212: PUSH
1213: LD_STRING Brown
1215: PPUSH
1216: LD_INT 1
1218: PPUSH
1219: LD_STRING 07_
1221: PPUSH
1222: CALL 39367 0 3
1226: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1227: LD_ADDR_VAR 0 5
1231: PUSH
1232: LD_VAR 0 5
1236: PPUSH
1237: LD_EXP 15
1241: PPUSH
1242: CALL 76816 0 2
1246: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1247: LD_STRING 04_Donaldson
1249: PUSH
1250: EMPTY
1251: LIST
1252: PPUSH
1253: CALL_OW 28
1257: PUSH
1258: LD_STRING DonaldsonInDelta
1260: PPUSH
1261: LD_INT 0
1263: PPUSH
1264: CALL_OW 30
1268: NOT
1269: AND
1270: PUSH
1271: LD_STRING 07_Donaldson
1273: PUSH
1274: EMPTY
1275: LIST
1276: PPUSH
1277: CALL_OW 28
1281: NOT
1282: AND
1283: PUSH
1284: LD_EXP 13
1288: PUSH
1289: LD_INT 1
1291: NONEQUAL
1292: AND
1293: IFFALSE 1336
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1295: LD_ADDR_EXP 16
1299: PUSH
1300: LD_STRING Donaldson
1302: PPUSH
1303: LD_INT 1
1305: PPUSH
1306: LD_STRING 04_
1308: PPUSH
1309: CALL 39367 0 3
1313: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1314: LD_ADDR_VAR 0 5
1318: PUSH
1319: LD_VAR 0 5
1323: PPUSH
1324: LD_EXP 16
1328: PPUSH
1329: CALL 76816 0 2
1333: ST_TO_ADDR
// end else
1334: GO 1405
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1336: LD_EXP 16
1340: NOT
1341: PUSH
1342: LD_STRING DonaldsonIn07
1344: PPUSH
1345: LD_INT 0
1347: PPUSH
1348: CALL_OW 30
1352: NOT
1353: AND
1354: PUSH
1355: LD_EXP 13
1359: PUSH
1360: LD_INT 1
1362: NONEQUAL
1363: AND
1364: IFFALSE 1405
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1366: LD_ADDR_EXP 16
1370: PUSH
1371: LD_STRING Donaldson
1373: PPUSH
1374: LD_INT 1
1376: PPUSH
1377: LD_STRING 07_
1379: PPUSH
1380: CALL 39367 0 3
1384: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1385: LD_ADDR_VAR 0 5
1389: PUSH
1390: LD_VAR 0 5
1394: PPUSH
1395: LD_EXP 16
1399: PPUSH
1400: CALL 76816 0 2
1404: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1405: LD_STRING KhatamIn07
1407: PPUSH
1408: LD_INT 0
1410: PPUSH
1411: CALL_OW 30
1415: NOT
1416: IFFALSE 1457
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1418: LD_ADDR_EXP 23
1422: PUSH
1423: LD_STRING Khatam
1425: PPUSH
1426: LD_INT 1
1428: PPUSH
1429: LD_STRING 07_
1431: PPUSH
1432: CALL 39367 0 3
1436: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1437: LD_ADDR_VAR 0 5
1441: PUSH
1442: LD_VAR 0 5
1446: PPUSH
1447: LD_EXP 23
1451: PPUSH
1452: CALL 76816 0 2
1456: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1457: LD_ADDR_VAR 0 6
1461: PUSH
1462: LD_STRING 07_othersGamma
1464: PPUSH
1465: CALL_OW 31
1469: ST_TO_ADDR
// tmp := 5 - others ;
1470: LD_ADDR_VAR 0 4
1474: PUSH
1475: LD_INT 5
1477: PUSH
1478: LD_VAR 0 6
1482: MINUS
1483: ST_TO_ADDR
// if tmp then
1484: LD_VAR 0 4
1488: IFFALSE 1545
// for i := tmp downto 1 do
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: DOUBLE
1496: LD_VAR 0 4
1500: INC
1501: ST_TO_ADDR
1502: LD_INT 1
1504: PUSH
1505: FOR_DOWNTO
1506: IFFALSE 1543
// begin PrepareHuman ( false , 1 , 5 ) ;
1508: LD_INT 0
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: LD_INT 5
1516: PPUSH
1517: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1521: LD_ADDR_VAR 0 6
1525: PUSH
1526: LD_VAR 0 6
1530: PPUSH
1531: CALL_OW 44
1535: PPUSH
1536: CALL 76816 0 2
1540: ST_TO_ADDR
// end ;
1541: GO 1505
1543: POP
1544: POP
// for i in others do
1545: LD_ADDR_VAR 0 2
1549: PUSH
1550: LD_VAR 0 6
1554: PUSH
1555: FOR_IN
1556: IFFALSE 1572
// SetTag ( i , 106 ) ;
1558: LD_VAR 0 2
1562: PPUSH
1563: LD_INT 106
1565: PPUSH
1566: CALL_OW 109
1570: GO 1555
1572: POP
1573: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1574: LD_ADDR_VAR 0 8
1578: PUSH
1579: LD_INT 22
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 30
1591: PUSH
1592: LD_INT 31
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PPUSH
1603: CALL_OW 69
1607: ST_TO_ADDR
// for i in bun do
1608: LD_ADDR_VAR 0 2
1612: PUSH
1613: LD_VAR 0 8
1617: PUSH
1618: FOR_IN
1619: IFFALSE 1751
// begin x := GetX ( i ) ;
1621: LD_ADDR_VAR 0 13
1625: PUSH
1626: LD_VAR 0 2
1630: PPUSH
1631: CALL_OW 250
1635: ST_TO_ADDR
// y := GetY ( i ) ;
1636: LD_ADDR_VAR 0 14
1640: PUSH
1641: LD_VAR 0 2
1645: PPUSH
1646: CALL_OW 251
1650: ST_TO_ADDR
// d := GetDir ( i ) ;
1651: LD_ADDR_VAR 0 15
1655: PUSH
1656: LD_VAR 0 2
1660: PPUSH
1661: CALL_OW 254
1665: ST_TO_ADDR
// RemoveUnit ( i ) ;
1666: LD_VAR 0 2
1670: PPUSH
1671: CALL_OW 64
// bc_type := b_bunker ;
1675: LD_ADDR_OWVAR 42
1679: PUSH
1680: LD_INT 32
1682: ST_TO_ADDR
// bc_level := 6 ;
1683: LD_ADDR_OWVAR 43
1687: PUSH
1688: LD_INT 6
1690: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1691: LD_ADDR_VAR 0 16
1695: PUSH
1696: LD_VAR 0 13
1700: PPUSH
1701: LD_VAR 0 14
1705: PPUSH
1706: LD_VAR 0 15
1710: PPUSH
1711: CALL_OW 47
1715: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1716: LD_VAR 0 16
1720: PPUSH
1721: LD_INT 5
1723: PUSH
1724: LD_INT 4
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: LD_VAR 0 2
1735: PUSH
1736: LD_INT 2
1738: MOD
1739: PUSH
1740: LD_INT 1
1742: PLUS
1743: ARRAY
1744: PPUSH
1745: CALL_OW 431
// end ;
1749: GO 1618
1751: POP
1752: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1753: LD_ADDR_VAR 0 7
1757: PUSH
1758: LD_INT 22
1760: PUSH
1761: LD_INT 1
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 30
1770: PUSH
1771: LD_INT 5
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 69
1786: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1787: LD_ADDR_VAR 0 9
1791: PUSH
1792: LD_INT 22
1794: PUSH
1795: LD_INT 1
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PUSH
1802: LD_INT 2
1804: PUSH
1805: LD_INT 30
1807: PUSH
1808: LD_INT 6
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: PUSH
1815: LD_INT 30
1817: PUSH
1818: LD_INT 7
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PUSH
1825: LD_INT 30
1827: PUSH
1828: LD_INT 8
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PPUSH
1845: CALL_OW 69
1849: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1850: LD_ADDR_VAR 0 10
1854: PUSH
1855: LD_INT 22
1857: PUSH
1858: LD_INT 1
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: PUSH
1865: LD_INT 30
1867: PUSH
1868: LD_INT 3
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PPUSH
1879: CALL_OW 69
1883: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1884: LD_ADDR_VAR 0 11
1888: PUSH
1889: LD_INT 22
1891: PUSH
1892: LD_INT 1
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 30
1901: PUSH
1902: LD_INT 36
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: PPUSH
1913: CALL_OW 69
1917: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1918: LD_ADDR_VAR 0 8
1922: PUSH
1923: LD_INT 22
1925: PUSH
1926: LD_INT 1
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PUSH
1933: LD_INT 2
1935: PUSH
1936: LD_INT 30
1938: PUSH
1939: LD_INT 31
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 30
1948: PUSH
1949: LD_INT 32
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PPUSH
1965: CALL_OW 69
1969: ST_TO_ADDR
// for i in others union tmp2 do
1970: LD_ADDR_VAR 0 2
1974: PUSH
1975: LD_VAR 0 6
1979: PUSH
1980: LD_VAR 0 5
1984: UNION
1985: PUSH
1986: FOR_IN
1987: IFFALSE 2479
// begin placed := false ;
1989: LD_ADDR_VAR 0 12
1993: PUSH
1994: LD_INT 0
1996: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1997: LD_VAR 0 2
2001: PPUSH
2002: CALL_OW 257
2006: PUSH
2007: LD_INT 1
2009: EQUAL
2010: IFFALSE 2135
// begin if UnitFilter ( bun , [ f_empty ] ) then
2012: LD_VAR 0 8
2016: PPUSH
2017: LD_INT 58
2019: PUSH
2020: EMPTY
2021: LIST
2022: PPUSH
2023: CALL_OW 72
2027: IFFALSE 2066
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2029: LD_VAR 0 2
2033: PPUSH
2034: LD_VAR 0 8
2038: PPUSH
2039: LD_INT 58
2041: PUSH
2042: EMPTY
2043: LIST
2044: PPUSH
2045: CALL_OW 72
2049: PUSH
2050: LD_INT 1
2052: ARRAY
2053: PPUSH
2054: CALL_OW 52
// placed := true ;
2058: LD_ADDR_VAR 0 12
2062: PUSH
2063: LD_INT 1
2065: ST_TO_ADDR
// end ; if arm and not placed then
2066: LD_VAR 0 7
2070: PUSH
2071: LD_VAR 0 12
2075: NOT
2076: AND
2077: IFFALSE 2135
// begin for j in arm do
2079: LD_ADDR_VAR 0 3
2083: PUSH
2084: LD_VAR 0 7
2088: PUSH
2089: FOR_IN
2090: IFFALSE 2133
// if UnitsInside ( j ) < 6 then
2092: LD_VAR 0 3
2096: PPUSH
2097: CALL_OW 313
2101: PUSH
2102: LD_INT 6
2104: LESS
2105: IFFALSE 2131
// begin PlaceHumanInUnit ( i , j ) ;
2107: LD_VAR 0 2
2111: PPUSH
2112: LD_VAR 0 3
2116: PPUSH
2117: CALL_OW 52
// placed := true ;
2121: LD_ADDR_VAR 0 12
2125: PUSH
2126: LD_INT 1
2128: ST_TO_ADDR
// break ;
2129: GO 2133
// end ;
2131: GO 2089
2133: POP
2134: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2135: LD_VAR 0 2
2139: PPUSH
2140: CALL_OW 257
2144: PUSH
2145: LD_INT 2
2147: EQUAL
2148: IFFALSE 2181
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_INT 52
2157: PPUSH
2158: LD_INT 20
2160: PPUSH
2161: LD_INT 6
2163: PPUSH
2164: LD_INT 0
2166: PPUSH
2167: CALL_OW 50
// placed := true ;
2171: LD_ADDR_VAR 0 12
2175: PUSH
2176: LD_INT 1
2178: ST_TO_ADDR
// continue ;
2179: GO 1986
// end ; if GetClass ( i ) = class_mechanic then
2181: LD_VAR 0 2
2185: PPUSH
2186: CALL_OW 257
2190: PUSH
2191: LD_INT 3
2193: EQUAL
2194: IFFALSE 2298
// begin if fac then
2196: LD_VAR 0 10
2200: IFFALSE 2298
// begin if ct then
2202: LD_VAR 0 11
2206: IFFALSE 2234
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2208: LD_VAR 0 2
2212: PPUSH
2213: LD_VAR 0 11
2217: PUSH
2218: LD_INT 1
2220: ARRAY
2221: PPUSH
2222: CALL_OW 52
// placed := true ;
2226: LD_ADDR_VAR 0 12
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// end ; if placed then
2234: LD_VAR 0 12
2238: IFFALSE 2242
// continue ;
2240: GO 1986
// for j in fac do
2242: LD_ADDR_VAR 0 3
2246: PUSH
2247: LD_VAR 0 10
2251: PUSH
2252: FOR_IN
2253: IFFALSE 2296
// if UnitsInside ( j ) < 6 then
2255: LD_VAR 0 3
2259: PPUSH
2260: CALL_OW 313
2264: PUSH
2265: LD_INT 6
2267: LESS
2268: IFFALSE 2294
// begin PlaceHumanInUnit ( i , j ) ;
2270: LD_VAR 0 2
2274: PPUSH
2275: LD_VAR 0 3
2279: PPUSH
2280: CALL_OW 52
// placed := true ;
2284: LD_ADDR_VAR 0 12
2288: PUSH
2289: LD_INT 1
2291: ST_TO_ADDR
// break ;
2292: GO 2296
// end ;
2294: GO 2252
2296: POP
2297: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2298: LD_VAR 0 2
2302: PPUSH
2303: CALL_OW 257
2307: PUSH
2308: LD_INT 4
2310: EQUAL
2311: IFFALSE 2406
// begin if lab then
2313: LD_VAR 0 9
2317: IFFALSE 2375
// begin for j in lab do
2319: LD_ADDR_VAR 0 3
2323: PUSH
2324: LD_VAR 0 9
2328: PUSH
2329: FOR_IN
2330: IFFALSE 2373
// if UnitsInside ( j ) < 6 then
2332: LD_VAR 0 3
2336: PPUSH
2337: CALL_OW 313
2341: PUSH
2342: LD_INT 6
2344: LESS
2345: IFFALSE 2371
// begin PlaceHumanInUnit ( i , j ) ;
2347: LD_VAR 0 2
2351: PPUSH
2352: LD_VAR 0 3
2356: PPUSH
2357: CALL_OW 52
// placed := true ;
2361: LD_ADDR_VAR 0 12
2365: PUSH
2366: LD_INT 1
2368: ST_TO_ADDR
// break ;
2369: GO 2373
// end ;
2371: GO 2329
2373: POP
2374: POP
// end ; if not placed then
2375: LD_VAR 0 12
2379: NOT
2380: IFFALSE 2406
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2382: LD_VAR 0 2
2386: PPUSH
2387: LD_INT 3
2389: PPUSH
2390: LD_INT 0
2392: PPUSH
2393: CALL_OW 49
// ComHold ( i ) ;
2397: LD_VAR 0 2
2401: PPUSH
2402: CALL_OW 140
// end ; end ; if ct then
2406: LD_VAR 0 11
2410: IFFALSE 2477
// if UnitsInside ( ct [ 1 ] ) then
2412: LD_VAR 0 11
2416: PUSH
2417: LD_INT 1
2419: ARRAY
2420: PPUSH
2421: CALL_OW 313
2425: IFFALSE 2477
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_INT 22
2434: PUSH
2435: LD_INT 1
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 33
2444: PUSH
2445: LD_INT 2
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PPUSH
2456: CALL_OW 69
2460: PUSH
2461: FOR_IN
2462: IFFALSE 2475
// Connect ( i ) ;
2464: LD_VAR 0 2
2468: PPUSH
2469: CALL 47473 0 1
2473: GO 2461
2475: POP
2476: POP
// end ; end ;
2477: GO 1986
2479: POP
2480: POP
// end ;
2481: LD_VAR 0 1
2485: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2486: LD_INT 0
2488: PPUSH
2489: PPUSH
2490: PPUSH
2491: PPUSH
2492: PPUSH
2493: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2494: LD_INT 71
2496: PPUSH
2497: LD_INT 5
2499: PPUSH
2500: LD_INT 1
2502: PPUSH
2503: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2507: LD_ADDR_VAR 0 2
2511: PUSH
2512: LD_STRING GammaBase
2514: PPUSH
2515: EMPTY
2516: PPUSH
2517: CALL_OW 30
2521: ST_TO_ADDR
// if not blist then
2522: LD_VAR 0 2
2526: NOT
2527: IFFALSE 2567
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2529: LD_ADDR_VAR 0 2
2533: PUSH
2534: LD_INT 1
2536: PUSH
2537: LD_INT 52
2539: PUSH
2540: LD_INT 12
2542: PUSH
2543: LD_INT 3
2545: PUSH
2546: LD_INT 3
2548: PUSH
2549: LD_INT 0
2551: PUSH
2552: LD_INT 0
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: PUSH
2564: EMPTY
2565: LIST
2566: ST_TO_ADDR
// uc_side := 1 ;
2567: LD_ADDR_OWVAR 20
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// uc_nation := 1 ;
2575: LD_ADDR_OWVAR 21
2579: PUSH
2580: LD_INT 1
2582: ST_TO_ADDR
// bc_kind1 := - 1 ;
2583: LD_ADDR_OWVAR 44
2587: PUSH
2588: LD_INT 1
2590: NEG
2591: ST_TO_ADDR
// bc_kind2 := - 1 ;
2592: LD_ADDR_OWVAR 45
2596: PUSH
2597: LD_INT 1
2599: NEG
2600: ST_TO_ADDR
// for i in blist do
2601: LD_ADDR_VAR 0 3
2605: PUSH
2606: LD_VAR 0 2
2610: PUSH
2611: FOR_IN
2612: IFFALSE 2888
// begin bc_type := i [ 1 ] ;
2614: LD_ADDR_OWVAR 42
2618: PUSH
2619: LD_VAR 0 3
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2628: LD_ADDR_OWVAR 43
2632: PUSH
2633: LD_VAR 0 3
2637: PUSH
2638: LD_INT 5
2640: ARRAY
2641: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2642: LD_OWVAR 42
2646: PUSH
2647: LD_INT 6
2649: PUSH
2650: LD_INT 7
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: IN
2657: IFFALSE 2723
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2659: LD_STRING 06_remoteVehs_1
2661: PPUSH
2662: LD_INT 0
2664: PPUSH
2665: CALL_OW 30
2669: NOT
2670: IFFALSE 2698
// begin bc_type := b_lab_full ;
2672: LD_ADDR_OWVAR 42
2676: PUSH
2677: LD_INT 8
2679: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2680: LD_ADDR_OWVAR 44
2684: PUSH
2685: LD_INT 10
2687: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2688: LD_ADDR_OWVAR 45
2692: PUSH
2693: LD_INT 15
2695: ST_TO_ADDR
// end else
2696: GO 2723
// begin bc_type := b_lab_half ;
2698: LD_ADDR_OWVAR 42
2702: PUSH
2703: LD_INT 7
2705: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2706: LD_ADDR_OWVAR 44
2710: PUSH
2711: LD_INT 10
2713: ST_TO_ADDR
// bc_kind2 := - 1 ;
2714: LD_ADDR_OWVAR 45
2718: PUSH
2719: LD_INT 1
2721: NEG
2722: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2723: LD_OWVAR 42
2727: PUSH
2728: LD_INT 2
2730: EQUAL
2731: IFFALSE 2741
// bc_type := b_factory ;
2733: LD_ADDR_OWVAR 42
2737: PUSH
2738: LD_INT 3
2740: ST_TO_ADDR
// if bc_type = b_depot then
2741: LD_OWVAR 42
2745: PUSH
2746: LD_INT 0
2748: EQUAL
2749: IFFALSE 2798
// begin bc_type := b_warehouse ;
2751: LD_ADDR_OWVAR 42
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2759: LD_ADDR_EXP 30
2763: PUSH
2764: LD_VAR 0 3
2768: PUSH
2769: LD_INT 2
2771: ARRAY
2772: PPUSH
2773: LD_VAR 0 3
2777: PUSH
2778: LD_INT 3
2780: ARRAY
2781: PPUSH
2782: LD_VAR 0 3
2786: PUSH
2787: LD_INT 4
2789: ARRAY
2790: PPUSH
2791: CALL_OW 47
2795: ST_TO_ADDR
// continue ;
2796: GO 2611
// end ; if bc_type = b_armoury then
2798: LD_OWVAR 42
2802: PUSH
2803: LD_INT 4
2805: EQUAL
2806: IFFALSE 2816
// bc_type = b_barracks ;
2808: LD_ADDR_OWVAR 42
2812: PUSH
2813: LD_INT 5
2815: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2816: LD_ADDR_VAR 0 4
2820: PUSH
2821: LD_VAR 0 3
2825: PUSH
2826: LD_INT 2
2828: ARRAY
2829: PPUSH
2830: LD_VAR 0 3
2834: PUSH
2835: LD_INT 3
2837: ARRAY
2838: PPUSH
2839: LD_VAR 0 3
2843: PUSH
2844: LD_INT 4
2846: ARRAY
2847: PPUSH
2848: CALL_OW 47
2852: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2853: LD_VAR 0 4
2857: PPUSH
2858: CALL_OW 266
2862: PUSH
2863: LD_INT 32
2865: EQUAL
2866: IFFALSE 2886
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2868: LD_VAR 0 4
2872: PPUSH
2873: LD_VAR 0 3
2877: PUSH
2878: LD_INT 7
2880: ARRAY
2881: PPUSH
2882: CALL_OW 431
// end ;
2886: GO 2611
2888: POP
2889: POP
// if not amDepot then
2890: LD_EXP 30
2894: NOT
2895: IFFALSE 2932
// begin bc_type := b_warehouse ;
2897: LD_ADDR_OWVAR 42
2901: PUSH
2902: LD_INT 1
2904: ST_TO_ADDR
// bc_level := 6 ;
2905: LD_ADDR_OWVAR 43
2909: PUSH
2910: LD_INT 6
2912: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2913: LD_ADDR_EXP 30
2917: PUSH
2918: LD_INT 52
2920: PPUSH
2921: LD_INT 12
2923: PPUSH
2924: LD_INT 3
2926: PPUSH
2927: CALL_OW 47
2931: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2932: LD_ADDR_OWVAR 42
2936: PUSH
2937: LD_INT 5
2939: ST_TO_ADDR
// bc_level := 6 ;
2940: LD_ADDR_OWVAR 43
2944: PUSH
2945: LD_INT 6
2947: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2948: LD_INT 61
2950: PPUSH
2951: LD_INT 29
2953: PPUSH
2954: LD_INT 5
2956: PPUSH
2957: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2961: LD_EXP 30
2965: PPUSH
2966: LD_STRING gamma
2968: PPUSH
2969: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2973: LD_EXP 30
2977: PPUSH
2978: CALL_OW 274
2982: PPUSH
2983: LD_INT 1
2985: PPUSH
2986: LD_INT 400
2988: PUSH
2989: LD_INT 320
2991: PUSH
2992: LD_INT 270
2994: PUSH
2995: LD_INT 230
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: LIST
3002: LIST
3003: PUSH
3004: LD_OWVAR 67
3008: ARRAY
3009: PPUSH
3010: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
3014: LD_EXP 30
3018: PPUSH
3019: CALL_OW 274
3023: PPUSH
3024: LD_INT 2
3026: PPUSH
3027: LD_INT 130
3029: PPUSH
3030: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3034: LD_INT 22
3036: PUSH
3037: LD_INT 1
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: LD_INT 30
3046: PUSH
3047: LD_INT 3
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PPUSH
3058: CALL_OW 69
3062: IFFALSE 3310
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: LD_INT 22
3071: PUSH
3072: LD_INT 1
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 30
3081: PUSH
3082: LD_INT 3
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: PPUSH
3093: CALL_OW 69
3097: PUSH
3098: LD_INT 1
3100: ARRAY
3101: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3102: LD_ADDR_VAR 0 6
3106: PUSH
3107: LD_VAR 0 4
3111: PPUSH
3112: CALL_OW 250
3116: PPUSH
3117: LD_VAR 0 4
3121: PPUSH
3122: CALL_OW 251
3126: PPUSH
3127: LD_VAR 0 4
3131: PPUSH
3132: CALL_OW 254
3136: PPUSH
3137: CALL 74455 0 3
3141: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3142: LD_ADDR_VAR 0 2
3146: PUSH
3147: LD_INT 19
3149: PUSH
3150: LD_INT 17
3152: PUSH
3153: EMPTY
3154: LIST
3155: LIST
3156: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3157: LD_STRING 06_remoteVehs_1
3159: PPUSH
3160: LD_INT 0
3162: PPUSH
3163: CALL_OW 30
3167: IFFALSE 3190
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3169: LD_ADDR_VAR 0 2
3173: PUSH
3174: LD_VAR 0 2
3178: PPUSH
3179: LD_INT 1
3181: PPUSH
3182: LD_INT 22
3184: PPUSH
3185: CALL_OW 2
3189: ST_TO_ADDR
// for i in tmp do
3190: LD_ADDR_VAR 0 3
3194: PUSH
3195: LD_VAR 0 6
3199: PUSH
3200: FOR_IN
3201: IFFALSE 3308
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3203: LD_VAR 0 3
3207: PUSH
3208: LD_INT 1
3210: ARRAY
3211: PPUSH
3212: LD_VAR 0 3
3216: PUSH
3217: LD_INT 2
3219: ARRAY
3220: PPUSH
3221: CALL_OW 428
3225: PUSH
3226: LD_INT 0
3228: EQUAL
3229: IFFALSE 3306
// begin bc_type := blist [ 1 ] ;
3231: LD_ADDR_OWVAR 42
3235: PUSH
3236: LD_VAR 0 2
3240: PUSH
3241: LD_INT 1
3243: ARRAY
3244: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3245: LD_VAR 0 3
3249: PUSH
3250: LD_INT 1
3252: ARRAY
3253: PPUSH
3254: LD_VAR 0 3
3258: PUSH
3259: LD_INT 2
3261: ARRAY
3262: PPUSH
3263: LD_VAR 0 3
3267: PUSH
3268: LD_INT 3
3270: ARRAY
3271: PPUSH
3272: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3276: LD_ADDR_VAR 0 2
3280: PUSH
3281: LD_VAR 0 2
3285: PPUSH
3286: LD_INT 1
3288: PPUSH
3289: CALL_OW 3
3293: ST_TO_ADDR
// if blist = 0 then
3294: LD_VAR 0 2
3298: PUSH
3299: LD_INT 0
3301: EQUAL
3302: IFFALSE 3306
// break ;
3304: GO 3308
// end ;
3306: GO 3200
3308: POP
3309: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3310: LD_STRING 06_remoteVehs_1
3312: PPUSH
3313: LD_INT 0
3315: PPUSH
3316: CALL_OW 30
3320: IFFALSE 3773
// begin bc_type := b_control_tower ;
3322: LD_ADDR_OWVAR 42
3326: PUSH
3327: LD_INT 36
3329: ST_TO_ADDR
// bc_level := 4 ;
3330: LD_ADDR_OWVAR 43
3334: PUSH
3335: LD_INT 4
3337: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3338: LD_EXP 30
3342: PPUSH
3343: LD_INT 36
3345: PPUSH
3346: LD_INT 62
3348: PPUSH
3349: LD_INT 12
3351: PPUSH
3352: LD_INT 3
3354: PPUSH
3355: CALL 52601 0 5
3359: PUSH
3360: LD_INT 92
3362: PUSH
3363: LD_INT 62
3365: PUSH
3366: LD_INT 12
3368: PUSH
3369: LD_INT 3
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: PPUSH
3378: CALL_OW 69
3382: NOT
3383: AND
3384: IFFALSE 3401
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3386: LD_INT 62
3388: PPUSH
3389: LD_INT 12
3391: PPUSH
3392: LD_INT 3
3394: PPUSH
3395: CALL_OW 47
3399: GO 3563
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3401: LD_EXP 30
3405: PPUSH
3406: LD_INT 36
3408: PPUSH
3409: LD_INT 37
3411: PPUSH
3412: LD_INT 18
3414: PPUSH
3415: LD_INT 2
3417: PPUSH
3418: CALL 52601 0 5
3422: PUSH
3423: LD_INT 92
3425: PUSH
3426: LD_INT 37
3428: PUSH
3429: LD_INT 18
3431: PUSH
3432: LD_INT 3
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: PPUSH
3441: CALL_OW 69
3445: NOT
3446: AND
3447: IFFALSE 3464
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3449: LD_INT 37
3451: PPUSH
3452: LD_INT 18
3454: PPUSH
3455: LD_INT 2
3457: PPUSH
3458: CALL_OW 47
3462: GO 3563
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3464: LD_EXP 30
3468: PPUSH
3469: LD_INT 36
3471: PPUSH
3472: LD_INT 66
3474: PPUSH
3475: LD_INT 14
3477: PPUSH
3478: LD_INT 4
3480: PPUSH
3481: CALL 52601 0 5
3485: PUSH
3486: LD_INT 92
3488: PUSH
3489: LD_INT 66
3491: PUSH
3492: LD_INT 14
3494: PUSH
3495: LD_INT 3
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: PPUSH
3504: CALL_OW 69
3508: NOT
3509: AND
3510: IFFALSE 3527
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3512: LD_INT 66
3514: PPUSH
3515: LD_INT 14
3517: PPUSH
3518: LD_INT 4
3520: PPUSH
3521: CALL_OW 47
3525: GO 3563
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3527: LD_EXP 30
3531: PPUSH
3532: LD_INT 36
3534: PPUSH
3535: LD_INT 74
3537: PPUSH
3538: LD_INT 26
3540: PPUSH
3541: LD_INT 4
3543: PPUSH
3544: CALL 52601 0 5
3548: IFFALSE 3563
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3550: LD_INT 74
3552: PPUSH
3553: LD_INT 26
3555: PPUSH
3556: LD_INT 4
3558: PPUSH
3559: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3563: LD_INT 22
3565: PUSH
3566: LD_INT 1
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 30
3575: PUSH
3576: LD_INT 36
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PPUSH
3587: CALL_OW 69
3591: NOT
3592: IFFALSE 3596
// exit ;
3594: GO 4121
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3596: LD_ADDR_VAR 0 3
3600: PUSH
3601: DOUBLE
3602: LD_INT 1
3604: DEC
3605: ST_TO_ADDR
3606: LD_INT 3
3608: PUSH
3609: LD_INT 2
3611: PUSH
3612: LD_INT 2
3614: PUSH
3615: LD_INT 2
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: PUSH
3624: LD_OWVAR 67
3628: ARRAY
3629: PUSH
3630: FOR_TO
3631: IFFALSE 3771
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3633: LD_ADDR_OWVAR 37
3637: PUSH
3638: LD_INT 3
3640: PUSH
3641: LD_INT 2
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PUSH
3648: LD_INT 1
3650: PPUSH
3651: LD_INT 2
3653: PPUSH
3654: CALL_OW 12
3658: ARRAY
3659: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3660: LD_ADDR_OWVAR 39
3664: PUSH
3665: LD_INT 1
3667: PUSH
3668: LD_INT 2
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 1
3677: PPUSH
3678: LD_INT 2
3680: PPUSH
3681: CALL_OW 12
3685: ARRAY
3686: ST_TO_ADDR
// vc_control := control_remote ;
3687: LD_ADDR_OWVAR 38
3691: PUSH
3692: LD_INT 2
3694: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3695: LD_ADDR_OWVAR 40
3699: PUSH
3700: LD_INT 4
3702: PUSH
3703: LD_INT 3
3705: PUSH
3706: LD_INT 5
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: PUSH
3714: LD_INT 1
3716: PPUSH
3717: LD_INT 3
3719: PPUSH
3720: CALL_OW 12
3724: ARRAY
3725: ST_TO_ADDR
// veh := CreateVehicle ;
3726: LD_ADDR_VAR 0 5
3730: PUSH
3731: CALL_OW 45
3735: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3736: LD_VAR 0 5
3740: PPUSH
3741: LD_INT 3
3743: PPUSH
3744: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3748: LD_VAR 0 5
3752: PPUSH
3753: LD_INT 61
3755: PPUSH
3756: LD_INT 23
3758: PPUSH
3759: LD_INT 9
3761: PPUSH
3762: LD_INT 0
3764: PPUSH
3765: CALL_OW 50
// end ;
3769: GO 3630
3771: POP
3772: POP
// end ; if gammaCommander = 1 then
3773: LD_EXP 13
3777: PUSH
3778: LD_INT 1
3780: EQUAL
3781: IFFALSE 3958
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3783: LD_ADDR_VAR 0 3
3787: PUSH
3788: DOUBLE
3789: LD_INT 1
3791: DEC
3792: ST_TO_ADDR
3793: LD_INT 3
3795: PUSH
3796: LD_INT 3
3798: PUSH
3799: LD_INT 2
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: PUSH
3811: LD_OWVAR 67
3815: ARRAY
3816: PUSH
3817: FOR_TO
3818: IFFALSE 3954
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3820: LD_ADDR_OWVAR 37
3824: PUSH
3825: LD_INT 3
3827: PUSH
3828: LD_INT 2
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: LD_INT 1
3837: PPUSH
3838: LD_INT 2
3840: PPUSH
3841: CALL_OW 12
3845: ARRAY
3846: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3847: LD_ADDR_OWVAR 39
3851: PUSH
3852: LD_INT 1
3854: PUSH
3855: LD_INT 2
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: PUSH
3862: LD_INT 1
3864: PPUSH
3865: LD_INT 2
3867: PPUSH
3868: CALL_OW 12
3872: ARRAY
3873: ST_TO_ADDR
// vc_control := control_manual ;
3874: LD_ADDR_OWVAR 38
3878: PUSH
3879: LD_INT 1
3881: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3882: LD_ADDR_OWVAR 40
3886: PUSH
3887: LD_INT 4
3889: PUSH
3890: LD_INT 5
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: PUSH
3897: LD_INT 1
3899: PPUSH
3900: LD_INT 2
3902: PPUSH
3903: CALL_OW 12
3907: ARRAY
3908: ST_TO_ADDR
// veh := CreateVehicle ;
3909: LD_ADDR_VAR 0 5
3913: PUSH
3914: CALL_OW 45
3918: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3919: LD_VAR 0 5
3923: PPUSH
3924: LD_INT 3
3926: PPUSH
3927: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3931: LD_VAR 0 5
3935: PPUSH
3936: LD_INT 61
3938: PPUSH
3939: LD_INT 23
3941: PPUSH
3942: LD_INT 9
3944: PPUSH
3945: LD_INT 0
3947: PPUSH
3948: CALL_OW 50
// end ;
3952: GO 3817
3954: POP
3955: POP
// end else
3956: GO 4121
// if gammaCommander = 2 then
3958: LD_EXP 13
3962: PUSH
3963: LD_INT 2
3965: EQUAL
3966: IFFALSE 4121
// begin bc_type := b_bunker ;
3968: LD_ADDR_OWVAR 42
3972: PUSH
3973: LD_INT 32
3975: ST_TO_ADDR
// bc_level := 6 ;
3976: LD_ADDR_OWVAR 43
3980: PUSH
3981: LD_INT 6
3983: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3984: LD_ADDR_VAR 0 4
3988: PUSH
3989: LD_INT 67
3991: PPUSH
3992: LD_INT 36
3994: PPUSH
3995: LD_INT 5
3997: PPUSH
3998: CALL_OW 47
4002: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
4003: LD_VAR 0 4
4007: PPUSH
4008: LD_INT 4
4010: PPUSH
4011: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
4015: LD_ADDR_VAR 0 4
4019: PUSH
4020: LD_INT 61
4022: PPUSH
4023: LD_INT 40
4025: PPUSH
4026: LD_INT 5
4028: PPUSH
4029: CALL_OW 47
4033: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
4034: LD_VAR 0 4
4038: PPUSH
4039: LD_INT 5
4041: PPUSH
4042: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
4046: LD_ADDR_OWVAR 37
4050: PUSH
4051: LD_INT 2
4053: ST_TO_ADDR
// vc_engine := engine_combustion ;
4054: LD_ADDR_OWVAR 39
4058: PUSH
4059: LD_INT 1
4061: ST_TO_ADDR
// vc_control := control_manual ;
4062: LD_ADDR_OWVAR 38
4066: PUSH
4067: LD_INT 1
4069: ST_TO_ADDR
// vc_weapon := us_crane ;
4070: LD_ADDR_OWVAR 40
4074: PUSH
4075: LD_INT 13
4077: ST_TO_ADDR
// veh := CreateVehicle ;
4078: LD_ADDR_VAR 0 5
4082: PUSH
4083: CALL_OW 45
4087: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4088: LD_VAR 0 5
4092: PPUSH
4093: LD_INT 3
4095: PPUSH
4096: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4100: LD_VAR 0 5
4104: PPUSH
4105: LD_INT 61
4107: PPUSH
4108: LD_INT 23
4110: PPUSH
4111: LD_INT 9
4113: PPUSH
4114: LD_INT 0
4116: PPUSH
4117: CALL_OW 50
// end ; end ;
4121: LD_VAR 0 1
4125: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4126: LD_INT 0
4128: PPUSH
4129: PPUSH
4130: PPUSH
4131: PPUSH
// uc_side := 1 ;
4132: LD_ADDR_OWVAR 20
4136: PUSH
4137: LD_INT 1
4139: ST_TO_ADDR
// uc_nation := 1 ;
4140: LD_ADDR_OWVAR 21
4144: PUSH
4145: LD_INT 1
4147: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4148: LD_ADDR_EXP 25
4152: PUSH
4153: LD_STRING Denis
4155: PPUSH
4156: LD_EXP 1
4160: NOT
4161: PPUSH
4162: LD_STRING 06c_
4164: PPUSH
4165: CALL 39367 0 3
4169: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4170: LD_EXP 25
4174: PPUSH
4175: LD_INT 4
4177: PPUSH
4178: LD_INT 0
4180: PPUSH
4181: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4185: LD_ADDR_EXP 26
4189: PUSH
4190: LD_STRING Joan
4192: PPUSH
4193: LD_EXP 1
4197: NOT
4198: PPUSH
4199: LD_STRING 06c_
4201: PPUSH
4202: CALL 39367 0 3
4206: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4207: LD_EXP 26
4211: PPUSH
4212: LD_INT 4
4214: PPUSH
4215: LD_INT 0
4217: PPUSH
4218: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4222: LD_STRING GladstoneIn07
4224: PPUSH
4225: LD_INT 0
4227: PPUSH
4228: CALL_OW 30
4232: NOT
4233: IFFALSE 4313
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4235: LD_ADDR_EXP 21
4239: PUSH
4240: LD_STRING Gladstone
4242: PPUSH
4243: LD_EXP 1
4247: NOT
4248: PPUSH
4249: LD_STRING 06c_
4251: PPUSH
4252: CALL 39367 0 3
4256: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4257: LD_EXP 21
4261: NOT
4262: PUSH
4263: LD_STRING GladstoneStayInDelta
4265: PPUSH
4266: LD_INT 0
4268: PPUSH
4269: CALL_OW 30
4273: AND
4274: IFFALSE 4298
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4276: LD_ADDR_EXP 21
4280: PUSH
4281: LD_STRING Gladstone
4283: PPUSH
4284: LD_EXP 1
4288: NOT
4289: PPUSH
4290: LD_STRING 05_
4292: PPUSH
4293: CALL 39367 0 3
4297: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4298: LD_EXP 21
4302: PPUSH
4303: LD_INT 4
4305: PPUSH
4306: LD_INT 0
4308: PPUSH
4309: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4313: LD_STRING LisaStayInDelta
4315: PPUSH
4316: LD_INT 0
4318: PPUSH
4319: CALL_OW 30
4323: IFFALSE 4359
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4325: LD_ADDR_EXP 19
4329: PUSH
4330: LD_STRING Lisa
4332: PPUSH
4333: LD_INT 1
4335: PPUSH
4336: LD_STRING 05_
4338: PPUSH
4339: CALL 39367 0 3
4343: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4344: LD_EXP 19
4348: PPUSH
4349: LD_INT 4
4351: PPUSH
4352: LD_INT 0
4354: PPUSH
4355: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4359: LD_STRING BobbyStayInDelta
4361: PPUSH
4362: LD_INT 0
4364: PPUSH
4365: CALL_OW 30
4369: IFFALSE 4405
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4371: LD_ADDR_EXP 17
4375: PUSH
4376: LD_STRING Bobby
4378: PPUSH
4379: LD_INT 1
4381: PPUSH
4382: LD_STRING 05_
4384: PPUSH
4385: CALL 39367 0 3
4389: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4390: LD_EXP 17
4394: PPUSH
4395: LD_INT 4
4397: PPUSH
4398: LD_INT 0
4400: PPUSH
4401: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4405: LD_STRING CyrusStayInDelta
4407: PPUSH
4408: LD_INT 0
4410: PPUSH
4411: CALL_OW 30
4415: IFFALSE 4451
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4417: LD_ADDR_EXP 18
4421: PUSH
4422: LD_STRING Cyrus
4424: PPUSH
4425: LD_INT 1
4427: PPUSH
4428: LD_STRING 05_
4430: PPUSH
4431: CALL 39367 0 3
4435: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4436: LD_EXP 18
4440: PPUSH
4441: LD_INT 4
4443: PPUSH
4444: LD_INT 0
4446: PPUSH
4447: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4451: LD_STRING BrownStayInDelta
4453: PPUSH
4454: LD_INT 0
4456: PPUSH
4457: CALL_OW 30
4461: IFFALSE 4497
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4463: LD_ADDR_EXP 15
4467: PUSH
4468: LD_STRING Brown
4470: PPUSH
4471: LD_INT 1
4473: PPUSH
4474: LD_STRING 05_
4476: PPUSH
4477: CALL 39367 0 3
4481: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4482: LD_EXP 15
4486: PPUSH
4487: LD_INT 4
4489: PPUSH
4490: LD_INT 0
4492: PPUSH
4493: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4497: LD_STRING DonaldsonStayInDelta
4499: PPUSH
4500: LD_INT 0
4502: PPUSH
4503: CALL_OW 30
4507: IFFALSE 4543
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4509: LD_ADDR_EXP 16
4513: PUSH
4514: LD_STRING Donaldson
4516: PPUSH
4517: LD_INT 1
4519: PPUSH
4520: LD_STRING 05_
4522: PPUSH
4523: CALL 39367 0 3
4527: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4528: LD_EXP 16
4532: PPUSH
4533: LD_INT 4
4535: PPUSH
4536: LD_INT 0
4538: PPUSH
4539: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4543: LD_ADDR_VAR 0 4
4547: PUSH
4548: LD_STRING OthersStayInDelta
4550: PPUSH
4551: CALL_OW 31
4555: ST_TO_ADDR
// if others > 2 then
4556: LD_VAR 0 4
4560: PUSH
4561: LD_INT 2
4563: GREATER
4564: IFFALSE 4627
// begin for j := 1 to 2 do
4566: LD_ADDR_VAR 0 3
4570: PUSH
4571: DOUBLE
4572: LD_INT 1
4574: DEC
4575: ST_TO_ADDR
4576: LD_INT 2
4578: PUSH
4579: FOR_TO
4580: IFFALSE 4623
// begin SetTag ( others [ j ] , 107 ) ;
4582: LD_VAR 0 4
4586: PUSH
4587: LD_VAR 0 3
4591: ARRAY
4592: PPUSH
4593: LD_INT 107
4595: PPUSH
4596: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4600: LD_VAR 0 4
4604: PUSH
4605: LD_VAR 0 3
4609: ARRAY
4610: PPUSH
4611: LD_INT 4
4613: PPUSH
4614: LD_INT 0
4616: PPUSH
4617: CALL_OW 49
// end ;
4621: GO 4579
4623: POP
4624: POP
// end else
4625: GO 4688
// begin for j := 1 to others do
4627: LD_ADDR_VAR 0 3
4631: PUSH
4632: DOUBLE
4633: LD_INT 1
4635: DEC
4636: ST_TO_ADDR
4637: LD_VAR 0 4
4641: PUSH
4642: FOR_TO
4643: IFFALSE 4686
// begin SetTag ( others [ i ] , 107 ) ;
4645: LD_VAR 0 4
4649: PUSH
4650: LD_VAR 0 2
4654: ARRAY
4655: PPUSH
4656: LD_INT 107
4658: PPUSH
4659: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4663: LD_VAR 0 4
4667: PUSH
4668: LD_VAR 0 3
4672: ARRAY
4673: PPUSH
4674: LD_INT 4
4676: PPUSH
4677: LD_INT 0
4679: PPUSH
4680: CALL_OW 49
// end ;
4684: GO 4642
4686: POP
4687: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4688: LD_ADDR_VAR 0 4
4692: PUSH
4693: LD_STRING 06_other_apemans
4695: PPUSH
4696: CALL_OW 31
4700: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4701: LD_VAR 0 4
4705: PUSH
4706: LD_INT 3
4708: PUSH
4709: LD_INT 2
4711: PUSH
4712: LD_INT 2
4714: PUSH
4715: LD_INT 1
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: PUSH
4724: LD_OWVAR 67
4728: ARRAY
4729: GREATEREQUAL
4730: IFFALSE 4763
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4732: LD_ADDR_VAR 0 3
4736: PUSH
4737: LD_INT 3
4739: PUSH
4740: LD_INT 2
4742: PUSH
4743: LD_INT 2
4745: PUSH
4746: LD_INT 1
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: PUSH
4755: LD_OWVAR 67
4759: ARRAY
4760: ST_TO_ADDR
4761: GO 4773
// j := others ;
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: LD_VAR 0 4
4772: ST_TO_ADDR
// for i := 1 to j do
4773: LD_ADDR_VAR 0 2
4777: PUSH
4778: DOUBLE
4779: LD_INT 1
4781: DEC
4782: ST_TO_ADDR
4783: LD_VAR 0 3
4787: PUSH
4788: FOR_TO
4789: IFFALSE 4814
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4791: LD_VAR 0 4
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PPUSH
4802: LD_INT 4
4804: PPUSH
4805: LD_INT 0
4807: PPUSH
4808: CALL_OW 49
4812: GO 4788
4814: POP
4815: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4816: LD_INT 4
4818: PPUSH
4819: LD_INT 22
4821: PUSH
4822: LD_INT 1
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: LD_INT 21
4831: PUSH
4832: LD_INT 1
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PPUSH
4843: CALL_OW 70
4847: PPUSH
4848: LD_INT 53
4850: PPUSH
4851: LD_INT 19
4853: PPUSH
4854: CALL_OW 111
// end ;
4858: LD_VAR 0 1
4862: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4863: LD_INT 0
4865: PPUSH
4866: PPUSH
4867: PPUSH
4868: PPUSH
4869: PPUSH
4870: PPUSH
4871: PPUSH
4872: PPUSH
4873: PPUSH
4874: PPUSH
4875: PPUSH
4876: PPUSH
4877: PPUSH
4878: PPUSH
4879: PPUSH
// prefix := 07c_ ;
4880: LD_ADDR_VAR 0 11
4884: PUSH
4885: LD_STRING 07c_
4887: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4888: LD_ADDR_VAR 0 9
4892: PUSH
4893: LD_STRING 07_vehicles
4895: PPUSH
4896: EMPTY
4897: PPUSH
4898: CALL_OW 30
4902: ST_TO_ADDR
// if not vehicles and debug then
4903: LD_VAR 0 9
4907: NOT
4908: PUSH
4909: LD_EXP 1
4913: AND
4914: IFFALSE 4939
// vehicles := [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ;
4916: LD_ADDR_VAR 0 9
4920: PUSH
4921: LD_INT 2
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: LD_INT 1
4929: PUSH
4930: LD_INT 4
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: ST_TO_ADDR
// if not vehicles then
4939: LD_VAR 0 9
4943: NOT
4944: IFFALSE 5001
// begin area := westGammaSupportArea ;
4946: LD_ADDR_VAR 0 12
4950: PUSH
4951: LD_INT 16
4953: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4954: LD_ADDR_VAR 0 15
4958: PUSH
4959: LD_INT 37
4961: PUSH
4962: LD_INT 70
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4969: LD_ADDR_VAR 0 14
4973: PUSH
4974: LD_INT 43
4976: PUSH
4977: LD_INT 67
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: ST_TO_ADDR
// dir := 1 ;
4984: LD_ADDR_VAR 0 13
4988: PUSH
4989: LD_INT 1
4991: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4992: LD_INT 4200
4994: PPUSH
4995: CALL_OW 67
// end else
4999: GO 5047
// begin area := southGammaSupportArea ;
5001: LD_ADDR_VAR 0 12
5005: PUSH
5006: LD_INT 5
5008: ST_TO_ADDR
// point := [ 87 , 147 ] ;
5009: LD_ADDR_VAR 0 15
5013: PUSH
5014: LD_INT 87
5016: PUSH
5017: LD_INT 147
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
5024: LD_ADDR_VAR 0 14
5028: PUSH
5029: LD_INT 74
5031: PUSH
5032: LD_INT 129
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: ST_TO_ADDR
// dir := 0 ;
5039: LD_ADDR_VAR 0 13
5043: PUSH
5044: LD_INT 0
5046: ST_TO_ADDR
// end ; squad := [ ] ;
5047: LD_ADDR_VAR 0 6
5051: PUSH
5052: EMPTY
5053: ST_TO_ADDR
// tmp := [ ] ;
5054: LD_ADDR_VAR 0 7
5058: PUSH
5059: EMPTY
5060: ST_TO_ADDR
// tmpVehs := [ ] ;
5061: LD_ADDR_VAR 0 8
5065: PUSH
5066: EMPTY
5067: ST_TO_ADDR
// uc_side := 1 ;
5068: LD_ADDR_OWVAR 20
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// uc_nation := 1 ;
5076: LD_ADDR_OWVAR 21
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// if vehicles then
5084: LD_VAR 0 9
5088: IFFALSE 5244
// begin k := 1 ;
5090: LD_ADDR_VAR 0 3
5094: PUSH
5095: LD_INT 1
5097: ST_TO_ADDR
// for i := 1 to vehicles div 4 do
5098: LD_ADDR_VAR 0 2
5102: PUSH
5103: DOUBLE
5104: LD_INT 1
5106: DEC
5107: ST_TO_ADDR
5108: LD_VAR 0 9
5112: PUSH
5113: LD_INT 4
5115: DIV
5116: PUSH
5117: FOR_TO
5118: IFFALSE 5242
// begin vc_chassis := vehicles [ k ] ;
5120: LD_ADDR_OWVAR 37
5124: PUSH
5125: LD_VAR 0 9
5129: PUSH
5130: LD_VAR 0 3
5134: ARRAY
5135: ST_TO_ADDR
// vc_engine := vehicles [ k + 1 ] ;
5136: LD_ADDR_OWVAR 39
5140: PUSH
5141: LD_VAR 0 9
5145: PUSH
5146: LD_VAR 0 3
5150: PUSH
5151: LD_INT 1
5153: PLUS
5154: ARRAY
5155: ST_TO_ADDR
// vc_control := vehicles [ k + 2 ] ;
5156: LD_ADDR_OWVAR 38
5160: PUSH
5161: LD_VAR 0 9
5165: PUSH
5166: LD_VAR 0 3
5170: PUSH
5171: LD_INT 2
5173: PLUS
5174: ARRAY
5175: ST_TO_ADDR
// vc_weapon := vehicles [ k + 3 ] ;
5176: LD_ADDR_OWVAR 40
5180: PUSH
5181: LD_VAR 0 9
5185: PUSH
5186: LD_VAR 0 3
5190: PUSH
5191: LD_INT 3
5193: PLUS
5194: ARRAY
5195: ST_TO_ADDR
// k := k + 4 ;
5196: LD_ADDR_VAR 0 3
5200: PUSH
5201: LD_VAR 0 3
5205: PUSH
5206: LD_INT 4
5208: PLUS
5209: ST_TO_ADDR
// veh := CreateVehicle ;
5210: LD_ADDR_VAR 0 10
5214: PUSH
5215: CALL_OW 45
5219: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5220: LD_ADDR_VAR 0 8
5224: PUSH
5225: LD_VAR 0 8
5229: PPUSH
5230: LD_VAR 0 10
5234: PPUSH
5235: CALL 76816 0 2
5239: ST_TO_ADDR
// end ;
5240: GO 5117
5242: POP
5243: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5244: LD_ADDR_EXP 14
5248: PUSH
5249: LD_STRING JMM
5251: PPUSH
5252: LD_EXP 1
5256: NOT
5257: PPUSH
5258: LD_VAR 0 11
5262: PPUSH
5263: CALL 39367 0 3
5267: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5268: LD_EXP 13
5272: PUSH
5273: LD_INT 1
5275: PUSH
5276: LD_INT 3
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: IN
5283: PUSH
5284: LD_EXP 15
5288: NOT
5289: AND
5290: IFFALSE 5351
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5292: LD_ADDR_EXP 15
5296: PUSH
5297: LD_STRING Brown
5299: PPUSH
5300: LD_EXP 1
5304: NOT
5305: PPUSH
5306: LD_VAR 0 11
5310: PPUSH
5311: CALL 39367 0 3
5315: ST_TO_ADDR
// if Brown then
5316: LD_EXP 15
5320: IFFALSE 5351
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5322: LD_ADDR_VAR 0 7
5326: PUSH
5327: LD_VAR 0 7
5331: PPUSH
5332: LD_VAR 0 7
5336: PUSH
5337: LD_INT 1
5339: PLUS
5340: PPUSH
5341: LD_EXP 15
5345: PPUSH
5346: CALL_OW 1
5350: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5351: LD_EXP 13
5355: PUSH
5356: LD_INT 2
5358: PUSH
5359: LD_INT 3
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: IN
5366: PUSH
5367: LD_EXP 16
5371: NOT
5372: AND
5373: IFFALSE 5434
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5375: LD_ADDR_EXP 16
5379: PUSH
5380: LD_STRING Donaldson
5382: PPUSH
5383: LD_EXP 1
5387: NOT
5388: PPUSH
5389: LD_VAR 0 11
5393: PPUSH
5394: CALL 39367 0 3
5398: ST_TO_ADDR
// if Donaldson then
5399: LD_EXP 16
5403: IFFALSE 5434
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5405: LD_ADDR_VAR 0 7
5409: PUSH
5410: LD_VAR 0 7
5414: PPUSH
5415: LD_VAR 0 7
5419: PUSH
5420: LD_INT 1
5422: PLUS
5423: PPUSH
5424: LD_EXP 16
5428: PPUSH
5429: CALL_OW 1
5433: ST_TO_ADDR
// end ; if not Bobby then
5434: LD_EXP 17
5438: NOT
5439: IFFALSE 5497
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5441: LD_ADDR_EXP 17
5445: PUSH
5446: LD_STRING Bobby
5448: PPUSH
5449: LD_INT 1
5451: PPUSH
5452: LD_VAR 0 11
5456: PPUSH
5457: CALL 39367 0 3
5461: ST_TO_ADDR
// if Bobby then
5462: LD_EXP 17
5466: IFFALSE 5497
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5468: LD_ADDR_VAR 0 7
5472: PUSH
5473: LD_VAR 0 7
5477: PPUSH
5478: LD_VAR 0 7
5482: PUSH
5483: LD_INT 1
5485: PLUS
5486: PPUSH
5487: LD_EXP 17
5491: PPUSH
5492: CALL_OW 1
5496: ST_TO_ADDR
// end ; if not Cyrus then
5497: LD_EXP 18
5501: NOT
5502: IFFALSE 5560
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5504: LD_ADDR_EXP 18
5508: PUSH
5509: LD_STRING Cyrus
5511: PPUSH
5512: LD_INT 1
5514: PPUSH
5515: LD_VAR 0 11
5519: PPUSH
5520: CALL 39367 0 3
5524: ST_TO_ADDR
// if Cyrus then
5525: LD_EXP 18
5529: IFFALSE 5560
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5531: LD_ADDR_VAR 0 7
5535: PUSH
5536: LD_VAR 0 7
5540: PPUSH
5541: LD_VAR 0 7
5545: PUSH
5546: LD_INT 1
5548: PLUS
5549: PPUSH
5550: LD_EXP 18
5554: PPUSH
5555: CALL_OW 1
5559: ST_TO_ADDR
// end ; if not Lisa then
5560: LD_EXP 19
5564: NOT
5565: IFFALSE 5626
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5567: LD_ADDR_EXP 19
5571: PUSH
5572: LD_STRING Lisa
5574: PPUSH
5575: LD_EXP 1
5579: NOT
5580: PPUSH
5581: LD_VAR 0 11
5585: PPUSH
5586: CALL 39367 0 3
5590: ST_TO_ADDR
// if Lisa then
5591: LD_EXP 19
5595: IFFALSE 5626
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5597: LD_ADDR_VAR 0 7
5601: PUSH
5602: LD_VAR 0 7
5606: PPUSH
5607: LD_VAR 0 7
5611: PUSH
5612: LD_INT 1
5614: PLUS
5615: PPUSH
5616: LD_EXP 19
5620: PPUSH
5621: CALL_OW 1
5625: ST_TO_ADDR
// end ; if not Frank then
5626: LD_EXP 20
5630: NOT
5631: IFFALSE 5692
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5633: LD_ADDR_EXP 20
5637: PUSH
5638: LD_STRING Frank
5640: PPUSH
5641: LD_EXP 1
5645: NOT
5646: PPUSH
5647: LD_VAR 0 11
5651: PPUSH
5652: CALL 39367 0 3
5656: ST_TO_ADDR
// if Frank then
5657: LD_EXP 20
5661: IFFALSE 5692
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5663: LD_ADDR_VAR 0 7
5667: PUSH
5668: LD_VAR 0 7
5672: PPUSH
5673: LD_VAR 0 7
5677: PUSH
5678: LD_INT 1
5680: PLUS
5681: PPUSH
5682: LD_EXP 20
5686: PPUSH
5687: CALL_OW 1
5691: ST_TO_ADDR
// end ; if not Kikuchi then
5692: LD_EXP 22
5696: NOT
5697: IFFALSE 5755
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5699: LD_ADDR_EXP 22
5703: PUSH
5704: LD_STRING Kikuchi
5706: PPUSH
5707: LD_INT 1
5709: PPUSH
5710: LD_VAR 0 11
5714: PPUSH
5715: CALL 39367 0 3
5719: ST_TO_ADDR
// if Kikuchi then
5720: LD_EXP 22
5724: IFFALSE 5755
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5726: LD_ADDR_VAR 0 7
5730: PUSH
5731: LD_VAR 0 7
5735: PPUSH
5736: LD_VAR 0 7
5740: PUSH
5741: LD_INT 1
5743: PLUS
5744: PPUSH
5745: LD_EXP 22
5749: PPUSH
5750: CALL_OW 1
5754: ST_TO_ADDR
// end ; if not Gladstone then
5755: LD_EXP 21
5759: NOT
5760: IFFALSE 5821
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5762: LD_ADDR_EXP 21
5766: PUSH
5767: LD_STRING Gladstone
5769: PPUSH
5770: LD_EXP 1
5774: NOT
5775: PPUSH
5776: LD_VAR 0 11
5780: PPUSH
5781: CALL 39367 0 3
5785: ST_TO_ADDR
// if Gladstone then
5786: LD_EXP 21
5790: IFFALSE 5821
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5792: LD_ADDR_VAR 0 7
5796: PUSH
5797: LD_VAR 0 7
5801: PPUSH
5802: LD_VAR 0 7
5806: PUSH
5807: LD_INT 1
5809: PLUS
5810: PPUSH
5811: LD_EXP 21
5815: PPUSH
5816: CALL_OW 1
5820: ST_TO_ADDR
// end ; if not Khatam then
5821: LD_EXP 23
5825: NOT
5826: IFFALSE 5884
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5828: LD_ADDR_EXP 23
5832: PUSH
5833: LD_STRING Khatam
5835: PPUSH
5836: LD_INT 1
5838: PPUSH
5839: LD_VAR 0 11
5843: PPUSH
5844: CALL 39367 0 3
5848: ST_TO_ADDR
// if Khatam then
5849: LD_EXP 23
5853: IFFALSE 5884
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5855: LD_ADDR_VAR 0 7
5859: PUSH
5860: LD_VAR 0 7
5864: PPUSH
5865: LD_VAR 0 7
5869: PUSH
5870: LD_INT 1
5872: PLUS
5873: PPUSH
5874: LD_EXP 23
5878: PPUSH
5879: CALL_OW 1
5883: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5884: LD_ADDR_VAR 0 5
5888: PUSH
5889: LD_STRING 07c_others
5891: PPUSH
5892: CALL_OW 31
5896: ST_TO_ADDR
// squad := others ;
5897: LD_ADDR_VAR 0 6
5901: PUSH
5902: LD_VAR 0 5
5906: ST_TO_ADDR
// if others then
5907: LD_VAR 0 5
5911: IFFALSE 6011
// for i in others do
5913: LD_ADDR_VAR 0 2
5917: PUSH
5918: LD_VAR 0 5
5922: PUSH
5923: FOR_IN
5924: IFFALSE 6009
// begin SetTag ( i , 108 ) ;
5926: LD_VAR 0 2
5930: PPUSH
5931: LD_INT 108
5933: PPUSH
5934: CALL_OW 109
// if GetClass ( i ) = class_mechanic then
5938: LD_VAR 0 2
5942: PPUSH
5943: CALL_OW 257
5947: PUSH
5948: LD_INT 3
5950: EQUAL
5951: IFFALSE 5978
// tmp := Insert ( tmp , 1 , i ) else
5953: LD_ADDR_VAR 0 7
5957: PUSH
5958: LD_VAR 0 7
5962: PPUSH
5963: LD_INT 1
5965: PPUSH
5966: LD_VAR 0 2
5970: PPUSH
5971: CALL_OW 2
5975: ST_TO_ADDR
5976: GO 6007
// tmp := Replace ( tmp , tmp + 1 , i ) ;
5978: LD_ADDR_VAR 0 7
5982: PUSH
5983: LD_VAR 0 7
5987: PPUSH
5988: LD_VAR 0 7
5992: PUSH
5993: LD_INT 1
5995: PLUS
5996: PPUSH
5997: LD_VAR 0 2
6001: PPUSH
6002: CALL_OW 1
6006: ST_TO_ADDR
// end ;
6007: GO 5923
6009: POP
6010: POP
// if tmp then
6011: LD_VAR 0 7
6015: IFFALSE 6215
// begin for i in tmp do
6017: LD_ADDR_VAR 0 2
6021: PUSH
6022: LD_VAR 0 7
6026: PUSH
6027: FOR_IN
6028: IFFALSE 6213
// begin SetDir ( i , dir ) ;
6030: LD_VAR 0 2
6034: PPUSH
6035: LD_VAR 0 13
6039: PPUSH
6040: CALL_OW 233
// if tmpVehs then
6044: LD_VAR 0 8
6048: IFFALSE 6138
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
6050: LD_VAR 0 8
6054: PUSH
6055: LD_INT 1
6057: ARRAY
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
6066: LD_VAR 0 8
6070: PUSH
6071: LD_INT 1
6073: ARRAY
6074: PPUSH
6075: LD_VAR 0 15
6079: PUSH
6080: LD_INT 1
6082: ARRAY
6083: PPUSH
6084: LD_VAR 0 15
6088: PUSH
6089: LD_INT 2
6091: ARRAY
6092: PPUSH
6093: LD_INT 0
6095: PPUSH
6096: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6100: LD_VAR 0 2
6104: PPUSH
6105: LD_VAR 0 8
6109: PUSH
6110: LD_INT 1
6112: ARRAY
6113: PPUSH
6114: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6118: LD_ADDR_VAR 0 8
6122: PUSH
6123: LD_VAR 0 8
6127: PPUSH
6128: LD_INT 1
6130: PPUSH
6131: CALL_OW 3
6135: ST_TO_ADDR
// end else
6136: GO 6155
// PlaceUnitArea ( i , area , false ) ;
6138: LD_VAR 0 2
6142: PPUSH
6143: LD_VAR 0 12
6147: PPUSH
6148: LD_INT 0
6150: PPUSH
6151: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6155: LD_VAR 0 2
6159: PPUSH
6160: LD_VAR 0 14
6164: PUSH
6165: LD_INT 1
6167: ARRAY
6168: PPUSH
6169: LD_VAR 0 14
6173: PUSH
6174: LD_INT 2
6176: ARRAY
6177: PPUSH
6178: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6182: LD_INT 35
6184: PPUSH
6185: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6189: LD_VAR 0 12
6193: PPUSH
6194: LD_INT 22
6196: PUSH
6197: LD_INT 1
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PPUSH
6204: CALL_OW 70
6208: NOT
6209: IFFALSE 6182
// end ;
6211: GO 6027
6213: POP
6214: POP
// end ; PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6215: LD_EXP 14
6219: PPUSH
6220: LD_VAR 0 15
6224: PUSH
6225: LD_INT 1
6227: ARRAY
6228: PPUSH
6229: LD_VAR 0 15
6233: PUSH
6234: LD_INT 2
6236: ARRAY
6237: PPUSH
6238: LD_INT 0
6240: PPUSH
6241: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6245: LD_EXP 14
6249: PPUSH
6250: LD_VAR 0 14
6254: PUSH
6255: LD_INT 1
6257: ARRAY
6258: PPUSH
6259: LD_VAR 0 14
6263: PUSH
6264: LD_INT 2
6266: ARRAY
6267: PPUSH
6268: CALL_OW 111
// jmmArrival := true ;
6272: LD_ADDR_EXP 8
6276: PUSH
6277: LD_INT 1
6279: ST_TO_ADDR
// end ;
6280: LD_VAR 0 1
6284: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6285: LD_INT 0
6287: PPUSH
6288: PPUSH
6289: PPUSH
6290: PPUSH
6291: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6292: LD_INT 1
6294: PPUSH
6295: LD_INT 17
6297: PPUSH
6298: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6302: LD_INT 2
6304: PPUSH
6305: LD_INT 17
6307: PPUSH
6308: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6312: LD_ADDR_VAR 0 5
6316: PUSH
6317: LD_INT 6
6319: PPUSH
6320: LD_INT 3
6322: PUSH
6323: LD_INT 21
6325: PUSH
6326: LD_INT 3
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PPUSH
6337: CALL_OW 70
6341: ST_TO_ADDR
// if tmp then
6342: LD_VAR 0 5
6346: IFFALSE 6370
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6348: LD_VAR 0 5
6352: PPUSH
6353: LD_INT 33
6355: PPUSH
6356: LD_INT 39
6358: PPUSH
6359: CALL_OW 111
// wait ( 0 0$3 ) ;
6363: LD_INT 105
6365: PPUSH
6366: CALL_OW 67
// end ; uc_side := 4 ;
6370: LD_ADDR_OWVAR 20
6374: PUSH
6375: LD_INT 4
6377: ST_TO_ADDR
// uc_nation := 1 ;
6378: LD_ADDR_OWVAR 21
6382: PUSH
6383: LD_INT 1
6385: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6386: LD_ADDR_EXP 27
6390: PUSH
6391: LD_STRING Sikorski
6393: PPUSH
6394: LD_INT 0
6396: PPUSH
6397: LD_STRING 
6399: PPUSH
6400: CALL 39367 0 3
6404: ST_TO_ADDR
// vc_engine := engine_combustion ;
6405: LD_ADDR_OWVAR 39
6409: PUSH
6410: LD_INT 1
6412: ST_TO_ADDR
// vc_control := control_manual ;
6413: LD_ADDR_OWVAR 38
6417: PUSH
6418: LD_INT 1
6420: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6421: LD_ADDR_OWVAR 40
6425: PUSH
6426: LD_INT 6
6428: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6429: LD_ADDR_OWVAR 37
6433: PUSH
6434: LD_INT 4
6436: ST_TO_ADDR
// veh := CreateVehicle ;
6437: LD_ADDR_VAR 0 4
6441: PUSH
6442: CALL_OW 45
6446: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6447: LD_VAR 0 4
6451: PPUSH
6452: LD_INT 3
6454: PPUSH
6455: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6459: LD_VAR 0 4
6463: PPUSH
6464: LD_INT 4
6466: NEG
6467: PPUSH
6468: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6472: LD_VAR 0 4
6476: PPUSH
6477: LD_INT 70
6479: PPUSH
6480: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6484: LD_VAR 0 4
6488: PPUSH
6489: LD_INT 6
6491: PPUSH
6492: LD_INT 0
6494: PPUSH
6495: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6499: LD_EXP 27
6503: PPUSH
6504: LD_VAR 0 4
6508: PPUSH
6509: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6513: LD_EXP 27
6517: PPUSH
6518: LD_INT 37
6520: PPUSH
6521: LD_INT 30
6523: PPUSH
6524: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6528: LD_INT 10
6530: PPUSH
6531: CALL_OW 67
// InitHc_All ( ) ;
6535: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6539: LD_ADDR_VAR 0 2
6543: PUSH
6544: DOUBLE
6545: LD_INT 1
6547: DEC
6548: ST_TO_ADDR
6549: LD_INT 3
6551: PUSH
6552: LD_INT 2
6554: PUSH
6555: LD_INT 2
6557: PUSH
6558: LD_INT 2
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: PUSH
6567: LD_OWVAR 67
6571: ARRAY
6572: PUSH
6573: FOR_TO
6574: IFFALSE 6686
// begin uc_side := 4 ;
6576: LD_ADDR_OWVAR 20
6580: PUSH
6581: LD_INT 4
6583: ST_TO_ADDR
// uc_nation := 1 ;
6584: LD_ADDR_OWVAR 21
6588: PUSH
6589: LD_INT 1
6591: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6592: LD_INT 0
6594: PPUSH
6595: LD_INT 1
6597: PPUSH
6598: LD_INT 4
6600: PPUSH
6601: LD_INT 7
6603: PPUSH
6604: CALL_OW 12
6608: PPUSH
6609: CALL_OW 380
// un := CreateHuman ;
6613: LD_ADDR_VAR 0 3
6617: PUSH
6618: CALL_OW 44
6622: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6623: LD_VAR 0 3
6627: PPUSH
6628: LD_INT 3
6630: PPUSH
6631: CALL_OW 233
// SetTag ( un , 101 ) ;
6635: LD_VAR 0 3
6639: PPUSH
6640: LD_INT 101
6642: PPUSH
6643: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6647: LD_VAR 0 3
6651: PPUSH
6652: LD_INT 6
6654: PPUSH
6655: LD_INT 0
6657: PPUSH
6658: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6662: LD_VAR 0 3
6666: PPUSH
6667: LD_INT 25
6669: PPUSH
6670: LD_INT 27
6672: PPUSH
6673: CALL_OW 111
// wait ( 0 0$1 ) ;
6677: LD_INT 35
6679: PPUSH
6680: CALL_OW 67
// end ;
6684: GO 6573
6686: POP
6687: POP
// for i := 1 to 2 do
6688: LD_ADDR_VAR 0 2
6692: PUSH
6693: DOUBLE
6694: LD_INT 1
6696: DEC
6697: ST_TO_ADDR
6698: LD_INT 2
6700: PUSH
6701: FOR_TO
6702: IFFALSE 6814
// begin uc_side := 4 ;
6704: LD_ADDR_OWVAR 20
6708: PUSH
6709: LD_INT 4
6711: ST_TO_ADDR
// uc_nation := 1 ;
6712: LD_ADDR_OWVAR 21
6716: PUSH
6717: LD_INT 1
6719: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6720: LD_INT 0
6722: PPUSH
6723: LD_INT 4
6725: PPUSH
6726: LD_INT 3
6728: PPUSH
6729: LD_INT 5
6731: PPUSH
6732: CALL_OW 12
6736: PPUSH
6737: CALL_OW 380
// un := CreateHuman ;
6741: LD_ADDR_VAR 0 3
6745: PUSH
6746: CALL_OW 44
6750: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6751: LD_VAR 0 3
6755: PPUSH
6756: LD_INT 3
6758: PPUSH
6759: CALL_OW 233
// SetTag ( un , 101 ) ;
6763: LD_VAR 0 3
6767: PPUSH
6768: LD_INT 101
6770: PPUSH
6771: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6775: LD_VAR 0 3
6779: PPUSH
6780: LD_INT 6
6782: PPUSH
6783: LD_INT 0
6785: PPUSH
6786: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6790: LD_VAR 0 3
6794: PPUSH
6795: LD_INT 25
6797: PPUSH
6798: LD_INT 27
6800: PPUSH
6801: CALL_OW 111
// wait ( 0 0$1 ) ;
6805: LD_INT 35
6807: PPUSH
6808: CALL_OW 67
// end ;
6812: GO 6701
6814: POP
6815: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
6816: LD_ADDR_VAR 0 2
6820: PUSH
6821: DOUBLE
6822: LD_INT 1
6824: DEC
6825: ST_TO_ADDR
6826: LD_INT 5
6828: PUSH
6829: LD_INT 4
6831: PUSH
6832: LD_INT 3
6834: PUSH
6835: LD_INT 3
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: PUSH
6844: LD_OWVAR 67
6848: ARRAY
6849: PUSH
6850: FOR_TO
6851: IFFALSE 7093
// begin uc_side := 4 ;
6853: LD_ADDR_OWVAR 20
6857: PUSH
6858: LD_INT 4
6860: ST_TO_ADDR
// uc_nation := 1 ;
6861: LD_ADDR_OWVAR 21
6865: PUSH
6866: LD_INT 1
6868: ST_TO_ADDR
// vc_engine := engine_combustion ;
6869: LD_ADDR_OWVAR 39
6873: PUSH
6874: LD_INT 1
6876: ST_TO_ADDR
// vc_control := control_manual ;
6877: LD_ADDR_OWVAR 38
6881: PUSH
6882: LD_INT 1
6884: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
6885: LD_ADDR_OWVAR 40
6889: PUSH
6890: LD_INT 5
6892: PUSH
6893: LD_INT 7
6895: PUSH
6896: LD_INT 5
6898: PUSH
6899: LD_INT 4
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: PUSH
6908: LD_VAR 0 2
6912: PUSH
6913: LD_INT 4
6915: MOD
6916: PUSH
6917: LD_INT 1
6919: PLUS
6920: ARRAY
6921: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6922: LD_ADDR_OWVAR 37
6926: PUSH
6927: LD_INT 3
6929: PUSH
6930: LD_INT 3
6932: PUSH
6933: LD_INT 4
6935: PUSH
6936: LD_INT 4
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: PUSH
6945: LD_VAR 0 2
6949: PUSH
6950: LD_INT 4
6952: MOD
6953: PUSH
6954: LD_INT 1
6956: PLUS
6957: ARRAY
6958: ST_TO_ADDR
// veh := CreateVehicle ;
6959: LD_ADDR_VAR 0 4
6963: PUSH
6964: CALL_OW 45
6968: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6969: LD_VAR 0 4
6973: PPUSH
6974: LD_INT 3
6976: PPUSH
6977: CALL_OW 233
// SetTag ( veh , 0 ) ;
6981: LD_VAR 0 4
6985: PPUSH
6986: LD_INT 0
6988: PPUSH
6989: CALL_OW 109
// SetFuel ( veh , 70 ) ;
6993: LD_VAR 0 4
6997: PPUSH
6998: LD_INT 70
7000: PPUSH
7001: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
7005: LD_VAR 0 4
7009: PPUSH
7010: LD_INT 6
7012: PPUSH
7013: LD_INT 0
7015: PPUSH
7016: CALL_OW 49
// InitHc ;
7020: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
7024: LD_INT 0
7026: PPUSH
7027: LD_INT 3
7029: PPUSH
7030: LD_INT 4
7032: PPUSH
7033: LD_INT 7
7035: PPUSH
7036: CALL_OW 12
7040: PPUSH
7041: CALL_OW 380
// un := CreateHuman ;
7045: LD_ADDR_VAR 0 3
7049: PUSH
7050: CALL_OW 44
7054: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7055: LD_VAR 0 3
7059: PPUSH
7060: LD_VAR 0 4
7064: PPUSH
7065: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
7069: LD_VAR 0 3
7073: PPUSH
7074: LD_INT 30
7076: PPUSH
7077: LD_INT 22
7079: PPUSH
7080: CALL_OW 111
// wait ( 0 0$3 ) ;
7084: LD_INT 105
7086: PPUSH
7087: CALL_OW 67
// end ;
7091: GO 6850
7093: POP
7094: POP
// wait ( 0 0$10 ) ;
7095: LD_INT 350
7097: PPUSH
7098: CALL_OW 67
// end ;
7102: LD_VAR 0 1
7106: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7107: LD_INT 0
7109: PPUSH
7110: PPUSH
7111: PPUSH
7112: PPUSH
// gammaBase := [ ] ;
7113: LD_ADDR_VAR 0 4
7117: PUSH
7118: EMPTY
7119: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7120: LD_ADDR_VAR 0 5
7124: PUSH
7125: LD_VAR 0 1
7129: PPUSH
7130: LD_INT 22
7132: PUSH
7133: LD_INT 1
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: LD_INT 21
7142: PUSH
7143: LD_INT 3
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 50
7152: PUSH
7153: EMPTY
7154: LIST
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: LIST
7160: PPUSH
7161: CALL_OW 70
7165: ST_TO_ADDR
// for i in buildings do
7166: LD_ADDR_VAR 0 3
7170: PUSH
7171: LD_VAR 0 5
7175: PUSH
7176: FOR_IN
7177: IFFALSE 7614
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7179: LD_VAR 0 3
7183: PPUSH
7184: CALL_OW 266
7188: PUSH
7189: LD_INT 6
7191: PUSH
7192: LD_INT 7
7194: PUSH
7195: LD_INT 8
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: LIST
7202: IN
7203: IFFALSE 7317
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7205: LD_ADDR_VAR 0 4
7209: PUSH
7210: LD_VAR 0 4
7214: PUSH
7215: LD_VAR 0 3
7219: PPUSH
7220: CALL_OW 266
7224: PUSH
7225: LD_VAR 0 3
7229: PPUSH
7230: CALL_OW 250
7234: PUSH
7235: LD_VAR 0 3
7239: PPUSH
7240: CALL_OW 251
7244: PUSH
7245: LD_VAR 0 3
7249: PPUSH
7250: CALL_OW 254
7254: PUSH
7255: LD_VAR 0 3
7259: PPUSH
7260: CALL_OW 267
7264: PUSH
7265: LD_VAR 0 3
7269: PPUSH
7270: CALL_OW 248
7274: PUSH
7275: LD_VAR 0 3
7279: PPUSH
7280: LD_INT 1
7282: PPUSH
7283: CALL_OW 268
7287: PUSH
7288: LD_VAR 0 3
7292: PPUSH
7293: LD_INT 2
7295: PPUSH
7296: CALL_OW 268
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: PUSH
7311: EMPTY
7312: LIST
7313: ADD
7314: ST_TO_ADDR
7315: GO 7612
// if GetBType ( i ) = b_bunker then
7317: LD_VAR 0 3
7321: PPUSH
7322: CALL_OW 266
7326: PUSH
7327: LD_INT 32
7329: EQUAL
7330: IFFALSE 7427
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7332: LD_ADDR_VAR 0 4
7336: PUSH
7337: LD_VAR 0 4
7341: PUSH
7342: LD_VAR 0 3
7346: PPUSH
7347: CALL_OW 266
7351: PUSH
7352: LD_VAR 0 3
7356: PPUSH
7357: CALL_OW 250
7361: PUSH
7362: LD_VAR 0 3
7366: PPUSH
7367: CALL_OW 251
7371: PUSH
7372: LD_VAR 0 3
7376: PPUSH
7377: CALL_OW 254
7381: PUSH
7382: LD_VAR 0 3
7386: PPUSH
7387: CALL_OW 267
7391: PUSH
7392: LD_VAR 0 3
7396: PPUSH
7397: CALL_OW 248
7401: PUSH
7402: LD_VAR 0 3
7406: PPUSH
7407: CALL_OW 269
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: PUSH
7421: EMPTY
7422: LIST
7423: ADD
7424: ST_TO_ADDR
7425: GO 7612
// if GetBType ( i ) = b_factory then
7427: LD_VAR 0 3
7431: PPUSH
7432: CALL_OW 266
7436: PUSH
7437: LD_INT 3
7439: EQUAL
7440: IFFALSE 7530
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7442: LD_ADDR_VAR 0 4
7446: PUSH
7447: LD_VAR 0 4
7451: PPUSH
7452: LD_INT 1
7454: PPUSH
7455: LD_VAR 0 3
7459: PPUSH
7460: CALL_OW 266
7464: PUSH
7465: LD_VAR 0 3
7469: PPUSH
7470: CALL_OW 250
7474: PUSH
7475: LD_VAR 0 3
7479: PPUSH
7480: CALL_OW 251
7484: PUSH
7485: LD_VAR 0 3
7489: PPUSH
7490: CALL_OW 254
7494: PUSH
7495: LD_VAR 0 3
7499: PPUSH
7500: CALL_OW 267
7504: PUSH
7505: LD_VAR 0 3
7509: PPUSH
7510: CALL_OW 248
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: PPUSH
7523: CALL_OW 2
7527: ST_TO_ADDR
7528: GO 7612
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7530: LD_ADDR_VAR 0 4
7534: PUSH
7535: LD_VAR 0 4
7539: PUSH
7540: LD_VAR 0 3
7544: PPUSH
7545: CALL_OW 266
7549: PUSH
7550: LD_VAR 0 3
7554: PPUSH
7555: CALL_OW 250
7559: PUSH
7560: LD_VAR 0 3
7564: PPUSH
7565: CALL_OW 251
7569: PUSH
7570: LD_VAR 0 3
7574: PPUSH
7575: CALL_OW 254
7579: PUSH
7580: LD_VAR 0 3
7584: PPUSH
7585: CALL_OW 267
7589: PUSH
7590: LD_VAR 0 3
7594: PPUSH
7595: CALL_OW 248
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: PUSH
7608: EMPTY
7609: LIST
7610: ADD
7611: ST_TO_ADDR
// end ;
7612: GO 7176
7614: POP
7615: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7616: LD_VAR 0 4
7620: PPUSH
7621: LD_STRING 08_GammaBase
7623: PPUSH
7624: CALL_OW 39
// end ;
7628: LD_VAR 0 2
7632: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7633: LD_INT 0
7635: PPUSH
7636: PPUSH
7637: PPUSH
7638: PPUSH
7639: PPUSH
7640: PPUSH
7641: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
7642: LD_ADDR_VAR 0 3
7646: PUSH
7647: LD_INT 17
7649: PPUSH
7650: LD_INT 22
7652: PUSH
7653: LD_INT 1
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: PUSH
7660: LD_INT 3
7662: PUSH
7663: LD_INT 21
7665: PUSH
7666: LD_INT 3
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: PUSH
7677: LD_INT 3
7679: PUSH
7680: LD_INT 33
7682: PUSH
7683: LD_INT 2
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: LIST
7698: PPUSH
7699: CALL_OW 70
7703: ST_TO_ADDR
// if tmp then
7704: LD_VAR 0 3
7708: IFFALSE 7827
// begin for i in tmp do
7710: LD_ADDR_VAR 0 2
7714: PUSH
7715: LD_VAR 0 3
7719: PUSH
7720: FOR_IN
7721: IFFALSE 7752
// begin SetSide ( i , 4 ) ;
7723: LD_VAR 0 2
7727: PPUSH
7728: LD_INT 4
7730: PPUSH
7731: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
7735: LD_VAR 0 2
7739: PPUSH
7740: LD_INT 42
7742: PPUSH
7743: LD_INT 22
7745: PPUSH
7746: CALL_OW 111
// end ;
7750: GO 7720
7752: POP
7753: POP
// repeat wait ( 0 0$3 ) ;
7754: LD_INT 105
7756: PPUSH
7757: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
7761: LD_VAR 0 3
7765: PPUSH
7766: LD_INT 51
7768: PPUSH
7769: LD_INT 16
7771: PPUSH
7772: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
7776: LD_VAR 0 3
7780: PPUSH
7781: LD_INT 95
7783: PUSH
7784: LD_INT 17
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PPUSH
7791: CALL_OW 72
7795: NOT
7796: IFFALSE 7754
// for i in tmp do
7798: LD_ADDR_VAR 0 2
7802: PUSH
7803: LD_VAR 0 3
7807: PUSH
7808: FOR_IN
7809: IFFALSE 7825
// SetSide ( i , 1 ) ;
7811: LD_VAR 0 2
7815: PPUSH
7816: LD_INT 1
7818: PPUSH
7819: CALL_OW 235
7823: GO 7808
7825: POP
7826: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
7827: LD_ADDR_VAR 0 3
7831: PUSH
7832: LD_INT 17
7834: PPUSH
7835: LD_INT 22
7837: PUSH
7838: LD_INT 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 33
7847: PUSH
7848: LD_INT 2
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PPUSH
7859: CALL_OW 70
7863: ST_TO_ADDR
// if tmp then
7864: LD_VAR 0 3
7868: IFFALSE 7892
// begin ComMoveXY ( tmp , 40 , 32 ) ;
7870: LD_VAR 0 3
7874: PPUSH
7875: LD_INT 40
7877: PPUSH
7878: LD_INT 32
7880: PPUSH
7881: CALL_OW 111
// wait ( 0 0$3 ) ;
7885: LD_INT 105
7887: PPUSH
7888: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
7892: LD_ADDR_VAR 0 3
7896: PUSH
7897: LD_INT 17
7899: PPUSH
7900: LD_INT 22
7902: PUSH
7903: LD_INT 1
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PUSH
7910: LD_INT 2
7912: PUSH
7913: LD_INT 21
7915: PUSH
7916: LD_INT 2
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: PUSH
7923: LD_INT 21
7925: PUSH
7926: LD_INT 3
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: LIST
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PPUSH
7942: CALL_OW 70
7946: ST_TO_ADDR
// if tmp then
7947: LD_VAR 0 3
7951: IFFALSE 8099
// begin repeat wait ( 0 0$1 ) ;
7953: LD_INT 35
7955: PPUSH
7956: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
7960: LD_ADDR_VAR 0 3
7964: PUSH
7965: LD_INT 17
7967: PPUSH
7968: LD_INT 22
7970: PUSH
7971: LD_INT 1
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 2
7980: PUSH
7981: LD_INT 21
7983: PUSH
7984: LD_INT 2
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 21
7993: PUSH
7994: LD_INT 3
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: LIST
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: PPUSH
8010: CALL_OW 70
8014: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
8015: LD_ADDR_VAR 0 2
8019: PUSH
8020: LD_INT 22
8022: PUSH
8023: LD_INT 4
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: LD_INT 2
8032: PUSH
8033: LD_INT 25
8035: PUSH
8036: LD_INT 1
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: PUSH
8043: LD_INT 21
8045: PUSH
8046: LD_INT 2
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: LIST
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PPUSH
8062: CALL_OW 69
8066: PUSH
8067: FOR_IN
8068: IFFALSE 8090
// ComAttackUnit ( i , tmp [ 1 ] ) ;
8070: LD_VAR 0 2
8074: PPUSH
8075: LD_VAR 0 3
8079: PUSH
8080: LD_INT 1
8082: ARRAY
8083: PPUSH
8084: CALL_OW 115
8088: GO 8067
8090: POP
8091: POP
// until not tmp ;
8092: LD_VAR 0 3
8096: NOT
8097: IFFALSE 7953
// end ; wait ( 0 0$2 ) ;
8099: LD_INT 70
8101: PPUSH
8102: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8106: LD_ADDR_VAR 0 3
8110: PUSH
8111: LD_INT 22
8113: PUSH
8114: LD_INT 4
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: PPUSH
8121: CALL_OW 69
8125: ST_TO_ADDR
// AgressiveMove ( tmp , [ [ 55 , 62 ] ] ) ;
8126: LD_VAR 0 3
8130: PPUSH
8131: LD_INT 55
8133: PUSH
8134: LD_INT 62
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: PUSH
8141: EMPTY
8142: LIST
8143: PPUSH
8144: CALL 79420 0 2
// AddComWait ( tmp , 0 0$05 ) ;
8148: LD_VAR 0 3
8152: PPUSH
8153: LD_INT 175
8155: PPUSH
8156: CALL_OW 202
// wait ( 0 0$5 ) ;
8160: LD_INT 175
8162: PPUSH
8163: CALL_OW 67
// AddComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 58 , 96 ) ;
8167: LD_VAR 0 3
8171: PPUSH
8172: LD_INT 120
8174: PUSH
8175: LD_INT 101
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PPUSH
8182: CALL_OW 72
8186: PPUSH
8187: LD_INT 58
8189: PPUSH
8190: LD_INT 96
8192: PPUSH
8193: CALL_OW 174
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8197: LD_VAR 0 3
8201: PPUSH
8202: LD_INT 120
8204: PUSH
8205: LD_INT 101
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PPUSH
8212: CALL_OW 72
8216: PPUSH
8217: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 52 , 93 ) ;
8221: LD_VAR 0 3
8225: PPUSH
8226: LD_INT 120
8228: PUSH
8229: LD_INT 101
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: PUSH
8236: LD_INT 25
8238: PUSH
8239: LD_INT 4
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: PPUSH
8250: CALL_OW 72
8254: PPUSH
8255: LD_INT 52
8257: PPUSH
8258: LD_INT 93
8260: PPUSH
8261: CALL_OW 174
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8265: LD_VAR 0 3
8269: PPUSH
8270: LD_INT 120
8272: PUSH
8273: LD_INT 101
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: LD_INT 25
8282: PUSH
8283: LD_INT 4
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PPUSH
8294: CALL_OW 72
8298: PPUSH
8299: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8303: LD_ADDR_VAR 0 7
8307: PUSH
8308: LD_VAR 0 3
8312: PPUSH
8313: LD_INT 21
8315: PUSH
8316: LD_INT 2
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PPUSH
8323: CALL_OW 72
8327: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8328: LD_ADDR_VAR 0 4
8332: PUSH
8333: LD_INT 81
8335: PUSH
8336: LD_INT 1
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PPUSH
8343: CALL_OW 69
8347: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8348: LD_ADDR_VAR 0 5
8352: PUSH
8353: LD_INT 57
8355: PUSH
8356: LD_INT 66
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: LD_INT 62
8365: PUSH
8366: LD_INT 58
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8377: LD_INT 35
8379: PPUSH
8380: CALL_OW 67
// for i in filter do
8384: LD_ADDR_VAR 0 2
8388: PUSH
8389: LD_VAR 0 7
8393: PUSH
8394: FOR_IN
8395: IFFALSE 8834
// begin if IsDead ( i ) then
8397: LD_VAR 0 2
8401: PPUSH
8402: CALL_OW 301
8406: IFFALSE 8426
// begin filter := filter diff i ;
8408: LD_ADDR_VAR 0 7
8412: PUSH
8413: LD_VAR 0 7
8417: PUSH
8418: LD_VAR 0 2
8422: DIFF
8423: ST_TO_ADDR
// continue ;
8424: GO 8394
// end ; tmp := IsDrivenBy ( i ) ;
8426: LD_ADDR_VAR 0 3
8430: PUSH
8431: LD_VAR 0 2
8435: PPUSH
8436: CALL_OW 311
8440: ST_TO_ADDR
// if not tmp then
8441: LD_VAR 0 3
8445: NOT
8446: IFFALSE 8450
// continue ;
8448: GO 8394
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8450: LD_VAR 0 2
8454: PPUSH
8455: CALL_OW 261
8459: PUSH
8460: LD_INT 30
8462: GREATER
8463: PUSH
8464: LD_VAR 0 2
8468: PPUSH
8469: CALL_OW 110
8473: PUSH
8474: LD_INT 2
8476: EQUAL
8477: AND
8478: IFFALSE 8494
// SetTag ( i , 0 ) else
8480: LD_VAR 0 2
8484: PPUSH
8485: LD_INT 0
8487: PPUSH
8488: CALL_OW 109
8492: GO 8538
// if GetTag ( i ) = 2 then
8494: LD_VAR 0 2
8498: PPUSH
8499: CALL_OW 110
8503: PUSH
8504: LD_INT 2
8506: EQUAL
8507: IFFALSE 8538
// begin ComMoveXY ( i , 52 , 50 ) ;
8509: LD_VAR 0 2
8513: PPUSH
8514: LD_INT 52
8516: PPUSH
8517: LD_INT 50
8519: PPUSH
8520: CALL_OW 111
// AddComMoveUnit ( i , amDepot ) ;
8524: LD_VAR 0 2
8528: PPUSH
8529: LD_EXP 30
8533: PPUSH
8534: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8538: LD_VAR 0 2
8542: PPUSH
8543: CALL_OW 256
8547: PUSH
8548: LD_INT 600
8550: GREATEREQUAL
8551: PUSH
8552: LD_VAR 0 2
8556: PPUSH
8557: CALL_OW 110
8561: NOT
8562: AND
8563: IFFALSE 8589
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8565: LD_VAR 0 2
8569: PPUSH
8570: LD_VAR 0 4
8574: PPUSH
8575: LD_VAR 0 2
8579: PPUSH
8580: CALL_OW 74
8584: PPUSH
8585: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8589: LD_VAR 0 2
8593: PPUSH
8594: CALL_OW 256
8598: PUSH
8599: LD_INT 600
8601: LESS
8602: PUSH
8603: LD_VAR 0 2
8607: PPUSH
8608: CALL_OW 110
8612: NOT
8613: AND
8614: IFFALSE 8690
// begin SetTag ( i , 1 ) ;
8616: LD_VAR 0 2
8620: PPUSH
8621: LD_INT 1
8623: PPUSH
8624: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8628: LD_ADDR_VAR 0 6
8632: PUSH
8633: LD_VAR 0 2
8637: PPUSH
8638: LD_VAR 0 5
8642: PPUSH
8643: CALL 80160 0 2
8647: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8648: LD_VAR 0 2
8652: PPUSH
8653: LD_VAR 0 6
8657: PUSH
8658: LD_INT 1
8660: ARRAY
8661: PPUSH
8662: LD_VAR 0 6
8666: PUSH
8667: LD_INT 2
8669: ARRAY
8670: PPUSH
8671: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8675: LD_VAR 0 2
8679: PPUSH
8680: LD_INT 40
8682: PPUSH
8683: LD_INT 49
8685: PPUSH
8686: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8690: LD_VAR 0 2
8694: PPUSH
8695: CALL_OW 110
8699: PUSH
8700: LD_INT 1
8702: EQUAL
8703: PUSH
8704: LD_VAR 0 2
8708: PPUSH
8709: LD_INT 40
8711: PPUSH
8712: LD_INT 49
8714: PPUSH
8715: CALL_OW 297
8719: PUSH
8720: LD_INT 9
8722: LESS
8723: AND
8724: PUSH
8725: LD_VAR 0 3
8729: AND
8730: IFFALSE 8832
// begin ComExitVehicle ( tmp ) ;
8732: LD_VAR 0 3
8736: PPUSH
8737: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8741: LD_VAR 0 3
8745: PPUSH
8746: LD_VAR 0 2
8750: PPUSH
8751: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8755: LD_INT 35
8757: PPUSH
8758: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8762: LD_VAR 0 2
8766: PPUSH
8767: CALL_OW 256
8771: PUSH
8772: LD_INT 1000
8774: EQUAL
8775: IFFALSE 8755
// ComEnterUnit ( tmp , i ) ;
8777: LD_VAR 0 3
8781: PPUSH
8782: LD_VAR 0 2
8786: PPUSH
8787: CALL_OW 120
// if GetFuel ( i ) <= 40 then
8791: LD_VAR 0 2
8795: PPUSH
8796: CALL_OW 261
8800: PUSH
8801: LD_INT 40
8803: LESSEQUAL
8804: IFFALSE 8820
// SetTag ( i , 2 ) else
8806: LD_VAR 0 2
8810: PPUSH
8811: LD_INT 2
8813: PPUSH
8814: CALL_OW 109
8818: GO 8832
// SetTag ( i , 0 ) ;
8820: LD_VAR 0 2
8824: PPUSH
8825: LD_INT 0
8827: PPUSH
8828: CALL_OW 109
// end ; end ;
8832: GO 8394
8834: POP
8835: POP
// until not filter ;
8836: LD_VAR 0 7
8840: NOT
8841: IFFALSE 8377
// end ; end_of_file
8843: LD_VAR 0 1
8847: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
8848: LD_INT 0
8850: PPUSH
8851: PPUSH
8852: PPUSH
8853: PPUSH
8854: PPUSH
// uc_side := 3 ;
8855: LD_ADDR_OWVAR 20
8859: PUSH
8860: LD_INT 3
8862: ST_TO_ADDR
// uc_nation := 3 ;
8863: LD_ADDR_OWVAR 21
8867: PUSH
8868: LD_INT 3
8870: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
8871: LD_ADDR_EXP 32
8875: PUSH
8876: LD_INT 8
8878: PUSH
8879: LD_INT 11
8881: PUSH
8882: LD_INT 14
8884: PUSH
8885: LD_INT 17
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: PUSH
8894: LD_OWVAR 67
8898: ARRAY
8899: ST_TO_ADDR
// ruMobile := [ ] ;
8900: LD_ADDR_EXP 33
8904: PUSH
8905: EMPTY
8906: ST_TO_ADDR
// ruBuildList := [ ] ;
8907: LD_ADDR_EXP 34
8911: PUSH
8912: EMPTY
8913: ST_TO_ADDR
// russianAttackers := [ ] ;
8914: LD_ADDR_EXP 35
8918: PUSH
8919: EMPTY
8920: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
8921: LD_ADDR_VAR 0 5
8925: PUSH
8926: LD_INT 43
8928: PUSH
8929: LD_INT 44
8931: PUSH
8932: LD_INT 46
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: LIST
8939: ST_TO_ADDR
// if Difficulty > 2 then
8940: LD_OWVAR 67
8944: PUSH
8945: LD_INT 2
8947: GREATER
8948: IFFALSE 8971
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
8950: LD_ADDR_VAR 0 5
8954: PUSH
8955: LD_VAR 0 5
8959: PUSH
8960: LD_INT 45
8962: PUSH
8963: LD_INT 46
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: ADD
8970: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
8971: LD_ADDR_EXP 31
8975: PUSH
8976: LD_STRING Borodin
8978: PPUSH
8979: CALL_OW 25
8983: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
8984: LD_EXP 31
8988: PPUSH
8989: LD_INT 28
8991: PPUSH
8992: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
8996: LD_INT 28
8998: PPUSH
8999: CALL_OW 274
9003: PPUSH
9004: LD_INT 1
9006: PPUSH
9007: LD_INT 3000
9009: PUSH
9010: LD_INT 4000
9012: PUSH
9013: LD_INT 5000
9015: PUSH
9016: LD_INT 6000
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: PUSH
9025: LD_OWVAR 67
9029: ARRAY
9030: PPUSH
9031: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
9035: LD_INT 28
9037: PPUSH
9038: CALL_OW 274
9042: PPUSH
9043: LD_INT 2
9045: PPUSH
9046: LD_INT 1000
9048: PPUSH
9049: CALL_OW 277
// if Difficulty > 2 then
9053: LD_OWVAR 67
9057: PUSH
9058: LD_INT 2
9060: GREATER
9061: IFFALSE 9185
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
9063: LD_ADDR_VAR 0 4
9067: PUSH
9068: LD_INT 99
9070: PUSH
9071: LD_INT 130
9073: PUSH
9074: LD_INT 2
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: LIST
9081: PUSH
9082: LD_INT 121
9084: PUSH
9085: LD_INT 127
9087: PUSH
9088: LD_INT 4
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: LIST
9095: PUSH
9096: LD_INT 117
9098: PUSH
9099: LD_INT 121
9101: PUSH
9102: LD_INT 4
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: LIST
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: LIST
9114: ST_TO_ADDR
// for i in tmp do
9115: LD_ADDR_VAR 0 2
9119: PUSH
9120: LD_VAR 0 4
9124: PUSH
9125: FOR_IN
9126: IFFALSE 9183
// begin bc_type := b_turret ;
9128: LD_ADDR_OWVAR 42
9132: PUSH
9133: LD_INT 33
9135: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9136: LD_ADDR_OWVAR 43
9140: PUSH
9141: LD_INT 2
9143: PUSH
9144: LD_OWVAR 67
9148: PLUS
9149: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9150: LD_VAR 0 2
9154: PUSH
9155: LD_INT 1
9157: ARRAY
9158: PPUSH
9159: LD_VAR 0 2
9163: PUSH
9164: LD_INT 2
9166: ARRAY
9167: PPUSH
9168: LD_VAR 0 2
9172: PUSH
9173: LD_INT 3
9175: ARRAY
9176: PPUSH
9177: CALL_OW 47
// end ;
9181: GO 9125
9183: POP
9184: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9185: LD_ADDR_VAR 0 2
9189: PUSH
9190: LD_INT 22
9192: PUSH
9193: LD_INT 3
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: PUSH
9200: LD_INT 21
9202: PUSH
9203: LD_INT 3
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: PPUSH
9214: CALL_OW 69
9218: PUSH
9219: FOR_IN
9220: IFFALSE 9242
// SetBLevel ( i , 2 + Difficulty ) ;
9222: LD_VAR 0 2
9226: PPUSH
9227: LD_INT 2
9229: PUSH
9230: LD_OWVAR 67
9234: PLUS
9235: PPUSH
9236: CALL_OW 241
9240: GO 9219
9242: POP
9243: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9244: LD_ADDR_VAR 0 4
9248: PUSH
9249: LD_INT 22
9251: PUSH
9252: LD_INT 3
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PUSH
9259: LD_INT 2
9261: PUSH
9262: LD_INT 30
9264: PUSH
9265: LD_INT 32
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PUSH
9272: LD_INT 30
9274: PUSH
9275: LD_INT 33
9277: PUSH
9278: EMPTY
9279: LIST
9280: LIST
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: LIST
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: PPUSH
9291: CALL_OW 69
9295: ST_TO_ADDR
// for i in tmp do
9296: LD_ADDR_VAR 0 2
9300: PUSH
9301: LD_VAR 0 4
9305: PUSH
9306: FOR_IN
9307: IFFALSE 9339
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9309: LD_VAR 0 2
9313: PPUSH
9314: LD_VAR 0 5
9318: PUSH
9319: LD_INT 1
9321: PPUSH
9322: LD_VAR 0 5
9326: PPUSH
9327: CALL_OW 12
9331: ARRAY
9332: PPUSH
9333: CALL_OW 431
9337: GO 9306
9339: POP
9340: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9341: LD_ADDR_VAR 0 2
9345: PUSH
9346: LD_INT 22
9348: PUSH
9349: LD_INT 3
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: LD_INT 30
9358: PUSH
9359: LD_INT 32
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: PPUSH
9370: CALL_OW 69
9374: PUSH
9375: FOR_IN
9376: IFFALSE 9425
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9378: LD_INT 0
9380: PPUSH
9381: LD_INT 5
9383: PUSH
9384: LD_INT 6
9386: PUSH
9387: LD_INT 7
9389: PUSH
9390: LD_INT 8
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: PUSH
9399: LD_OWVAR 67
9403: ARRAY
9404: PPUSH
9405: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9409: CALL_OW 44
9413: PPUSH
9414: LD_VAR 0 2
9418: PPUSH
9419: CALL_OW 52
// end ;
9423: GO 9375
9425: POP
9426: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9427: LD_ADDR_VAR 0 2
9431: PUSH
9432: LD_INT 22
9434: PUSH
9435: LD_INT 3
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: PUSH
9442: LD_INT 30
9444: PUSH
9445: LD_INT 5
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PPUSH
9456: CALL_OW 69
9460: PUSH
9461: FOR_IN
9462: IFFALSE 9552
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9464: LD_ADDR_VAR 0 3
9468: PUSH
9469: DOUBLE
9470: LD_INT 1
9472: DEC
9473: ST_TO_ADDR
9474: LD_INT 2
9476: PUSH
9477: LD_INT 3
9479: PUSH
9480: LD_INT 4
9482: PUSH
9483: LD_INT 5
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: PUSH
9492: LD_OWVAR 67
9496: ARRAY
9497: PUSH
9498: FOR_TO
9499: IFFALSE 9548
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9501: LD_INT 0
9503: PPUSH
9504: LD_INT 5
9506: PUSH
9507: LD_INT 6
9509: PUSH
9510: LD_INT 7
9512: PUSH
9513: LD_INT 8
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: PUSH
9522: LD_OWVAR 67
9526: ARRAY
9527: PPUSH
9528: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9532: CALL_OW 44
9536: PPUSH
9537: LD_VAR 0 2
9541: PPUSH
9542: CALL_OW 52
// end ;
9546: GO 9498
9548: POP
9549: POP
// end ;
9550: GO 9461
9552: POP
9553: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9554: LD_ADDR_VAR 0 2
9558: PUSH
9559: DOUBLE
9560: LD_INT 1
9562: DEC
9563: ST_TO_ADDR
9564: LD_INT 3
9566: PUSH
9567: LD_INT 4
9569: PUSH
9570: LD_INT 5
9572: PUSH
9573: LD_INT 5
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: PUSH
9582: LD_OWVAR 67
9586: ARRAY
9587: PUSH
9588: FOR_TO
9589: IFFALSE 9636
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9591: LD_INT 0
9593: PPUSH
9594: LD_INT 4
9596: PUSH
9597: LD_INT 5
9599: PUSH
9600: LD_INT 5
9602: PUSH
9603: LD_INT 6
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: PUSH
9612: LD_OWVAR 67
9616: ARRAY
9617: PPUSH
9618: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9622: CALL_OW 44
9626: PPUSH
9627: LD_INT 28
9629: PPUSH
9630: CALL_OW 52
// end ;
9634: GO 9588
9636: POP
9637: POP
// for i := 1 to 2 do
9638: LD_ADDR_VAR 0 2
9642: PUSH
9643: DOUBLE
9644: LD_INT 1
9646: DEC
9647: ST_TO_ADDR
9648: LD_INT 2
9650: PUSH
9651: FOR_TO
9652: IFFALSE 9686
// begin PrepareScientist ( false , 6 ) ;
9654: LD_INT 0
9656: PPUSH
9657: LD_INT 6
9659: PPUSH
9660: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9664: CALL_OW 44
9668: PPUSH
9669: LD_INT 81
9671: PPUSH
9672: LD_INT 93
9674: PPUSH
9675: CALL_OW 428
9679: PPUSH
9680: CALL_OW 52
// end ;
9684: GO 9651
9686: POP
9687: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9688: LD_INT 22
9690: PPUSH
9691: LD_INT 1
9693: PPUSH
9694: LD_INT 3
9696: PPUSH
9697: LD_INT 51
9699: PPUSH
9700: LD_INT 100
9702: PPUSH
9703: CALL 44382 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9707: CALL_OW 45
9711: PPUSH
9712: LD_INT 91
9714: PPUSH
9715: LD_INT 94
9717: PPUSH
9718: LD_INT 3
9720: PPUSH
9721: LD_INT 0
9723: PPUSH
9724: CALL_OW 50
// for i := 1 to 2 do
9728: LD_ADDR_VAR 0 2
9732: PUSH
9733: DOUBLE
9734: LD_INT 1
9736: DEC
9737: ST_TO_ADDR
9738: LD_INT 2
9740: PUSH
9741: FOR_TO
9742: IFFALSE 9786
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9744: LD_INT 22
9746: PPUSH
9747: LD_INT 1
9749: PPUSH
9750: LD_INT 3
9752: PPUSH
9753: LD_INT 52
9755: PPUSH
9756: LD_INT 100
9758: PPUSH
9759: CALL 44382 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9763: CALL_OW 45
9767: PPUSH
9768: LD_INT 91
9770: PPUSH
9771: LD_INT 94
9773: PPUSH
9774: LD_INT 4
9776: PPUSH
9777: LD_INT 0
9779: PPUSH
9780: CALL_OW 50
// end ;
9784: GO 9741
9786: POP
9787: POP
// end ;
9788: LD_VAR 0 1
9792: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
9793: LD_INT 0
9795: PPUSH
9796: PPUSH
9797: PPUSH
9798: PPUSH
9799: PPUSH
// uc_side := 3 ;
9800: LD_ADDR_OWVAR 20
9804: PUSH
9805: LD_INT 3
9807: ST_TO_ADDR
// uc_nation := 3 ;
9808: LD_ADDR_OWVAR 21
9812: PUSH
9813: LD_INT 3
9815: ST_TO_ADDR
// for i := 1 to 4 do
9816: LD_ADDR_VAR 0 2
9820: PUSH
9821: DOUBLE
9822: LD_INT 1
9824: DEC
9825: ST_TO_ADDR
9826: LD_INT 4
9828: PUSH
9829: FOR_TO
9830: IFFALSE 9957
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9832: LD_INT 22
9834: PPUSH
9835: LD_INT 1
9837: PPUSH
9838: LD_INT 1
9840: PPUSH
9841: LD_INT 42
9843: PUSH
9844: LD_INT 43
9846: PUSH
9847: LD_INT 44
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: LIST
9854: PUSH
9855: LD_INT 1
9857: PPUSH
9858: LD_INT 3
9860: PPUSH
9861: CALL_OW 12
9865: ARRAY
9866: PPUSH
9867: LD_INT 40
9869: PPUSH
9870: CALL 44382 0 5
// veh := CreateVehicle ;
9874: LD_ADDR_VAR 0 4
9878: PUSH
9879: CALL_OW 45
9883: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9884: LD_VAR 0 4
9888: PPUSH
9889: LD_INT 5
9891: PPUSH
9892: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
9896: LD_VAR 0 4
9900: PPUSH
9901: LD_INT 7
9903: PPUSH
9904: LD_INT 0
9906: PPUSH
9907: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9911: LD_INT 0
9913: PPUSH
9914: LD_INT 5
9916: PPUSH
9917: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9921: CALL_OW 44
9925: PPUSH
9926: LD_VAR 0 4
9930: PPUSH
9931: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9935: LD_ADDR_VAR 0 5
9939: PUSH
9940: LD_VAR 0 5
9944: PPUSH
9945: LD_VAR 0 4
9949: PPUSH
9950: CALL 76816 0 2
9954: ST_TO_ADDR
// end ;
9955: GO 9829
9957: POP
9958: POP
// for i := 1 to 3 do
9959: LD_ADDR_VAR 0 2
9963: PUSH
9964: DOUBLE
9965: LD_INT 1
9967: DEC
9968: ST_TO_ADDR
9969: LD_INT 3
9971: PUSH
9972: FOR_TO
9973: IFFALSE 10100
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9975: LD_INT 22
9977: PPUSH
9978: LD_INT 1
9980: PPUSH
9981: LD_INT 1
9983: PPUSH
9984: LD_INT 42
9986: PUSH
9987: LD_INT 43
9989: PUSH
9990: LD_INT 44
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: PUSH
9998: LD_INT 1
10000: PPUSH
10001: LD_INT 3
10003: PPUSH
10004: CALL_OW 12
10008: ARRAY
10009: PPUSH
10010: LD_INT 40
10012: PPUSH
10013: CALL 44382 0 5
// veh := CreateVehicle ;
10017: LD_ADDR_VAR 0 4
10021: PUSH
10022: CALL_OW 45
10026: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10027: LD_VAR 0 4
10031: PPUSH
10032: LD_INT 5
10034: PPUSH
10035: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
10039: LD_VAR 0 4
10043: PPUSH
10044: LD_INT 8
10046: PPUSH
10047: LD_INT 0
10049: PPUSH
10050: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10054: LD_INT 0
10056: PPUSH
10057: LD_INT 5
10059: PPUSH
10060: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10064: CALL_OW 44
10068: PPUSH
10069: LD_VAR 0 4
10073: PPUSH
10074: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10078: LD_ADDR_VAR 0 5
10082: PUSH
10083: LD_VAR 0 5
10087: PPUSH
10088: LD_VAR 0 4
10092: PPUSH
10093: CALL 76816 0 2
10097: ST_TO_ADDR
// end ;
10098: GO 9972
10100: POP
10101: POP
// for i := 1 to 2 do
10102: LD_ADDR_VAR 0 2
10106: PUSH
10107: DOUBLE
10108: LD_INT 1
10110: DEC
10111: ST_TO_ADDR
10112: LD_INT 2
10114: PUSH
10115: FOR_TO
10116: IFFALSE 10175
// begin PrepareSoldier ( false , 5 ) ;
10118: LD_INT 0
10120: PPUSH
10121: LD_INT 5
10123: PPUSH
10124: CALL_OW 381
// un := CreateHuman ;
10128: LD_ADDR_VAR 0 3
10132: PUSH
10133: CALL_OW 44
10137: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10138: LD_VAR 0 3
10142: PPUSH
10143: LD_INT 8
10145: PPUSH
10146: LD_INT 0
10148: PPUSH
10149: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10153: LD_ADDR_VAR 0 5
10157: PUSH
10158: LD_VAR 0 5
10162: PPUSH
10163: LD_VAR 0 3
10167: PPUSH
10168: CALL 76816 0 2
10172: ST_TO_ADDR
// end ;
10173: GO 10115
10175: POP
10176: POP
// for i in tmp do
10177: LD_ADDR_VAR 0 2
10181: PUSH
10182: LD_VAR 0 5
10186: PUSH
10187: FOR_IN
10188: IFFALSE 10207
// ComAgressiveMove ( i , 51 , 16 ) ;
10190: LD_VAR 0 2
10194: PPUSH
10195: LD_INT 51
10197: PPUSH
10198: LD_INT 16
10200: PPUSH
10201: CALL_OW 114
10205: GO 10187
10207: POP
10208: POP
// end ;
10209: LD_VAR 0 1
10213: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10214: LD_EXP 33
10218: IFFALSE 10793
10220: GO 10222
10222: DISABLE
10223: LD_INT 0
10225: PPUSH
10226: PPUSH
10227: PPUSH
// begin enable ;
10228: ENABLE
// if not ruMobile then
10229: LD_EXP 33
10233: NOT
10234: IFFALSE 10238
// exit ;
10236: GO 10793
// for i in ruMobile do
10238: LD_ADDR_VAR 0 1
10242: PUSH
10243: LD_EXP 33
10247: PUSH
10248: FOR_IN
10249: IFFALSE 10791
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10251: LD_VAR 0 1
10255: PPUSH
10256: CALL_OW 302
10260: NOT
10261: PUSH
10262: LD_VAR 0 1
10266: PPUSH
10267: CALL_OW 255
10271: PUSH
10272: LD_INT 3
10274: NONEQUAL
10275: OR
10276: IFFALSE 10296
// begin ruMobile := ruMobile diff i ;
10278: LD_ADDR_EXP 33
10282: PUSH
10283: LD_EXP 33
10287: PUSH
10288: LD_VAR 0 1
10292: DIFF
10293: ST_TO_ADDR
// continue ;
10294: GO 10248
// end ; if GetTag ( i ) = 300 then
10296: LD_VAR 0 1
10300: PPUSH
10301: CALL_OW 110
10305: PUSH
10306: LD_INT 300
10308: EQUAL
10309: IFFALSE 10424
// begin if GetFuel ( i ) < 50 then
10311: LD_VAR 0 1
10315: PPUSH
10316: CALL_OW 261
10320: PUSH
10321: LD_INT 50
10323: LESS
10324: IFFALSE 10383
// begin ComMoveXY ( i , 93 , 100 ) ;
10326: LD_VAR 0 1
10330: PPUSH
10331: LD_INT 93
10333: PPUSH
10334: LD_INT 100
10336: PPUSH
10337: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10341: LD_INT 35
10343: PPUSH
10344: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10348: LD_VAR 0 1
10352: PPUSH
10353: LD_INT 93
10355: PPUSH
10356: LD_INT 100
10358: PPUSH
10359: CALL_OW 297
10363: PUSH
10364: LD_INT 4
10366: LESS
10367: IFFALSE 10341
// SetFuel ( i , 100 ) ;
10369: LD_VAR 0 1
10373: PPUSH
10374: LD_INT 100
10376: PPUSH
10377: CALL_OW 240
// end else
10381: GO 10424
// if not IsInArea ( i , ruParkingArea ) then
10383: LD_VAR 0 1
10387: PPUSH
10388: LD_INT 10
10390: PPUSH
10391: CALL_OW 308
10395: NOT
10396: IFFALSE 10412
// ComMoveToArea ( i , ruParkingArea ) else
10398: LD_VAR 0 1
10402: PPUSH
10403: LD_INT 10
10405: PPUSH
10406: CALL_OW 113
10410: GO 10424
// SetTag ( i , 301 ) ;
10412: LD_VAR 0 1
10416: PPUSH
10417: LD_INT 301
10419: PPUSH
10420: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10424: LD_VAR 0 1
10428: PPUSH
10429: CALL_OW 110
10433: PUSH
10434: LD_INT 301
10436: EQUAL
10437: IFFALSE 10567
// begin if GetLives ( i ) < 1000 then
10439: LD_VAR 0 1
10443: PPUSH
10444: CALL_OW 256
10448: PUSH
10449: LD_INT 1000
10451: LESS
10452: IFFALSE 10544
// begin if not IsDrivenBy ( i ) then
10454: LD_VAR 0 1
10458: PPUSH
10459: CALL_OW 311
10463: NOT
10464: IFFALSE 10468
// continue ;
10466: GO 10248
// mech := IsDrivenBy ( i ) ;
10468: LD_ADDR_VAR 0 2
10472: PUSH
10473: LD_VAR 0 1
10477: PPUSH
10478: CALL_OW 311
10482: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10483: LD_VAR 0 2
10487: PPUSH
10488: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10492: LD_VAR 0 2
10496: PPUSH
10497: LD_VAR 0 1
10501: PPUSH
10502: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10506: LD_INT 35
10508: PPUSH
10509: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10513: LD_VAR 0 1
10517: PPUSH
10518: CALL_OW 256
10522: PUSH
10523: LD_INT 1000
10525: EQUAL
10526: IFFALSE 10506
// ComEnterUnit ( mech , i ) ;
10528: LD_VAR 0 2
10532: PPUSH
10533: LD_VAR 0 1
10537: PPUSH
10538: CALL_OW 120
// end else
10542: GO 10567
// if IsDrivenBy ( i ) then
10544: LD_VAR 0 1
10548: PPUSH
10549: CALL_OW 311
10553: IFFALSE 10567
// SetTag ( i , 0 ) ;
10555: LD_VAR 0 1
10559: PPUSH
10560: LD_INT 0
10562: PPUSH
10563: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10567: LD_VAR 0 1
10571: PPUSH
10572: CALL_OW 110
10576: PUSH
10577: LD_INT 300
10579: LESS
10580: IFFALSE 10789
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10582: LD_ADDR_VAR 0 3
10586: PUSH
10587: LD_INT 11
10589: PPUSH
10590: LD_INT 81
10592: PUSH
10593: LD_INT 3
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PPUSH
10600: CALL_OW 70
10604: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10605: LD_VAR 0 1
10609: PPUSH
10610: CALL_OW 256
10614: PUSH
10615: LD_INT 650
10617: LESS
10618: IFFALSE 10643
// begin ComStop ( i ) ;
10620: LD_VAR 0 1
10624: PPUSH
10625: CALL_OW 141
// SetTag ( i , 300 ) ;
10629: LD_VAR 0 1
10633: PPUSH
10634: LD_INT 300
10636: PPUSH
10637: CALL_OW 109
// continue ;
10641: GO 10248
// end ; if enemy then
10643: LD_VAR 0 3
10647: IFFALSE 10687
// begin if not HasTask ( i ) then
10649: LD_VAR 0 1
10653: PPUSH
10654: CALL_OW 314
10658: NOT
10659: IFFALSE 10685
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10661: LD_VAR 0 1
10665: PPUSH
10666: LD_VAR 0 3
10670: PPUSH
10671: LD_VAR 0 1
10675: PPUSH
10676: CALL_OW 74
10680: PPUSH
10681: CALL_OW 115
// end else
10685: GO 10789
// if ruMobile > 2 then
10687: LD_EXP 33
10691: PUSH
10692: LD_INT 2
10694: GREATER
10695: IFFALSE 10789
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10697: LD_ADDR_VAR 0 3
10701: PUSH
10702: LD_INT 81
10704: PUSH
10705: LD_INT 3
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PPUSH
10712: CALL_OW 69
10716: ST_TO_ADDR
// if enemy then
10717: LD_VAR 0 3
10721: IFFALSE 10789
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10723: LD_VAR 0 1
10727: PPUSH
10728: LD_INT 116
10730: PUSH
10731: LD_INT 95
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 84
10740: PUSH
10741: LD_INT 68
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: PUSH
10748: LD_INT 58
10750: PUSH
10751: LD_INT 53
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 44
10760: PUSH
10761: LD_INT 35
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 45
10770: PUSH
10771: LD_INT 23
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: PPUSH
10785: CALL 79420 0 2
// end ; end ; end ;
10789: GO 10248
10791: POP
10792: POP
// end ;
10793: PPOPN 3
10795: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
10796: LD_INT 3
10798: PUSH
10799: LD_INT 22
10801: PUSH
10802: LD_INT 1
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 32
10815: PUSH
10816: LD_INT 1
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: PPUSH
10827: CALL_OW 69
10831: IFFALSE 10915
10833: GO 10835
10835: DISABLE
10836: LD_INT 0
10838: PPUSH
// begin enable ;
10839: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
10840: LD_ADDR_VAR 0 1
10844: PUSH
10845: LD_INT 3
10847: PUSH
10848: LD_INT 22
10850: PUSH
10851: LD_INT 1
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: PUSH
10862: LD_INT 32
10864: PUSH
10865: LD_INT 1
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PPUSH
10876: CALL_OW 69
10880: PUSH
10881: FOR_IN
10882: IFFALSE 10913
// if GetFuel ( i ) < 3 then
10884: LD_VAR 0 1
10888: PPUSH
10889: CALL_OW 261
10893: PUSH
10894: LD_INT 3
10896: LESS
10897: IFFALSE 10911
// SetFuel ( i , 3 ) ;
10899: LD_VAR 0 1
10903: PPUSH
10904: LD_INT 3
10906: PPUSH
10907: CALL_OW 240
10911: GO 10881
10913: POP
10914: POP
// end ;
10915: PPOPN 1
10917: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
10918: LD_INT 29
10920: PPUSH
10921: CALL_OW 302
10925: PUSH
10926: LD_INT 29
10928: PPUSH
10929: CALL_OW 461
10933: PUSH
10934: LD_INT 2
10936: EQUAL
10937: AND
10938: IFFALSE 11171
10940: GO 10942
10942: DISABLE
10943: LD_INT 0
10945: PPUSH
10946: PPUSH
// begin enable ;
10947: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
10948: LD_ADDR_VAR 0 1
10952: PUSH
10953: LD_INT 21
10955: PUSH
10956: LD_INT 22
10958: PUSH
10959: LD_INT 23
10961: PUSH
10962: LD_INT 24
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 1
10973: PPUSH
10974: LD_INT 4
10976: PPUSH
10977: CALL_OW 12
10981: ARRAY
10982: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
10983: LD_ADDR_VAR 0 2
10987: PUSH
10988: LD_INT 42
10990: PUSH
10991: LD_INT 44
10993: PUSH
10994: LD_INT 43
10996: PUSH
10997: LD_INT 46
10999: PUSH
11000: LD_INT 45
11002: PUSH
11003: LD_INT 46
11005: PUSH
11006: LD_INT 45
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: PUSH
11018: LD_OWVAR 67
11022: PUSH
11023: LD_INT 0
11025: PPUSH
11026: LD_INT 3
11028: PPUSH
11029: CALL_OW 12
11033: PLUS
11034: ARRAY
11035: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11036: LD_VAR 0 1
11040: PUSH
11041: LD_INT 21
11043: PUSH
11044: LD_INT 22
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: IN
11051: PUSH
11052: LD_VAR 0 2
11056: PUSH
11057: LD_INT 46
11059: EQUAL
11060: AND
11061: IFFALSE 11090
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11063: LD_ADDR_VAR 0 2
11067: PUSH
11068: LD_INT 44
11070: PUSH
11071: LD_INT 45
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 1
11080: PPUSH
11081: LD_INT 2
11083: PPUSH
11084: CALL_OW 12
11088: ARRAY
11089: ST_TO_ADDR
// if tick < [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
11090: LD_OWVAR 1
11094: PUSH
11095: LD_INT 25200
11097: PUSH
11098: LD_INT 23100
11100: PUSH
11101: LD_INT 21000
11103: PUSH
11104: LD_INT 18900
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: PUSH
11113: LD_OWVAR 67
11117: ARRAY
11118: LESS
11119: IFFALSE 11148
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11121: LD_ADDR_VAR 0 2
11125: PUSH
11126: LD_INT 44
11128: PUSH
11129: LD_INT 43
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: LD_INT 1
11138: PPUSH
11139: LD_INT 2
11141: PPUSH
11142: CALL_OW 12
11146: ARRAY
11147: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11148: LD_INT 29
11150: PPUSH
11151: LD_VAR 0 1
11155: PPUSH
11156: LD_INT 1
11158: PPUSH
11159: LD_INT 1
11161: PPUSH
11162: LD_VAR 0 2
11166: PPUSH
11167: CALL_OW 185
// end ;
11171: PPOPN 2
11173: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
11174: LD_INT 28
11176: PPUSH
11177: CALL_OW 302
11181: IFFALSE 12023
11183: GO 11185
11185: DISABLE
11186: LD_INT 0
11188: PPUSH
11189: PPUSH
11190: PPUSH
11191: PPUSH
11192: PPUSH
11193: PPUSH
11194: PPUSH
11195: PPUSH
// begin enable ;
11196: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11197: LD_ADDR_VAR 0 3
11201: PUSH
11202: LD_INT 12
11204: PPUSH
11205: LD_INT 3
11207: PUSH
11208: LD_INT 24
11210: PUSH
11211: LD_INT 1000
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: PUSH
11222: LD_INT 21
11224: PUSH
11225: LD_INT 3
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PPUSH
11236: CALL_OW 70
11240: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11241: LD_ADDR_VAR 0 4
11245: PUSH
11246: LD_INT 22
11248: PUSH
11249: LD_INT 3
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: PUSH
11256: LD_INT 25
11258: PUSH
11259: LD_INT 2
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PPUSH
11270: CALL_OW 69
11274: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11275: LD_ADDR_VAR 0 5
11279: PUSH
11280: LD_INT 22
11282: PUSH
11283: LD_INT 3
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PUSH
11290: LD_INT 34
11292: PUSH
11293: LD_INT 52
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PPUSH
11304: CALL_OW 69
11308: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11309: LD_ADDR_VAR 0 7
11313: PUSH
11314: LD_INT 22
11316: PUSH
11317: LD_INT 3
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PUSH
11324: LD_INT 25
11326: PUSH
11327: LD_INT 4
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PPUSH
11338: CALL_OW 69
11342: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11343: LD_ADDR_VAR 0 8
11347: PUSH
11348: LD_INT 81
11350: PPUSH
11351: LD_INT 93
11353: PPUSH
11354: CALL_OW 428
11358: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
11359: LD_VAR 0 7
11363: PUSH
11364: LD_VAR 0 4
11368: PPUSH
11369: LD_INT 120
11371: PUSH
11372: LD_INT 2
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PPUSH
11379: CALL_OW 72
11383: AND
11384: IFFALSE 11397
// ComExitAll ( sci ) else
11386: LD_VAR 0 7
11390: PPUSH
11391: CALL 77297 0 1
11395: GO 11470
// if sci then
11397: LD_VAR 0 7
11401: IFFALSE 11470
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
11403: LD_VAR 0 7
11407: PPUSH
11408: LD_INT 3
11410: PUSH
11411: LD_INT 54
11413: PUSH
11414: EMPTY
11415: LIST
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PPUSH
11421: CALL_OW 72
11425: PUSH
11426: LD_VAR 0 8
11430: PPUSH
11431: CALL_OW 302
11435: AND
11436: IFFALSE 11470
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
11438: LD_VAR 0 7
11442: PPUSH
11443: LD_INT 3
11445: PUSH
11446: LD_INT 54
11448: PUSH
11449: EMPTY
11450: LIST
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PPUSH
11456: CALL_OW 72
11460: PPUSH
11461: LD_VAR 0 8
11465: PPUSH
11466: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
11470: LD_VAR 0 5
11474: PPUSH
11475: LD_INT 50
11477: PUSH
11478: EMPTY
11479: LIST
11480: PPUSH
11481: CALL_OW 72
11485: PUSH
11486: LD_VAR 0 3
11490: AND
11491: IFFALSE 11522
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
11493: LD_VAR 0 5
11497: PPUSH
11498: LD_INT 50
11500: PUSH
11501: EMPTY
11502: LIST
11503: PPUSH
11504: CALL_OW 72
11508: PPUSH
11509: LD_VAR 0 3
11513: PUSH
11514: LD_INT 1
11516: ARRAY
11517: PPUSH
11518: CALL_OW 130
// if eng then
11522: LD_VAR 0 4
11526: IFFALSE 12023
// begin for i in eng do
11528: LD_ADDR_VAR 0 1
11532: PUSH
11533: LD_VAR 0 4
11537: PUSH
11538: FOR_IN
11539: IFFALSE 12021
// begin tag := GetTag ( i ) ;
11541: LD_ADDR_VAR 0 6
11545: PUSH
11546: LD_VAR 0 1
11550: PPUSH
11551: CALL_OW 110
11555: ST_TO_ADDR
// case tag of 0 :
11556: LD_VAR 0 6
11560: PUSH
11561: LD_INT 0
11563: DOUBLE
11564: EQUAL
11565: IFTRUE 11569
11567: GO 11780
11569: POP
// begin if b then
11570: LD_VAR 0 3
11574: IFFALSE 11590
// begin SetTag ( i , 1 ) ;
11576: LD_VAR 0 1
11580: PPUSH
11581: LD_INT 1
11583: PPUSH
11584: CALL_OW 109
// continue ;
11588: GO 11538
// end ; if not ruBuildList then
11590: LD_EXP 34
11594: NOT
11595: IFFALSE 11611
// ComEnterUnit ( i , ruDep ) else
11597: LD_VAR 0 1
11601: PPUSH
11602: LD_INT 28
11604: PPUSH
11605: CALL_OW 120
11609: GO 11778
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
11611: LD_INT 11
11613: PPUSH
11614: LD_INT 81
11616: PUSH
11617: LD_INT 3
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PPUSH
11624: CALL_OW 70
11628: PUSH
11629: LD_INT 0
11631: EQUAL
11632: PUSH
11633: LD_INT 28
11635: PPUSH
11636: LD_EXP 34
11640: PUSH
11641: LD_INT 1
11643: ARRAY
11644: PUSH
11645: LD_INT 1
11647: ARRAY
11648: PPUSH
11649: LD_EXP 34
11653: PUSH
11654: LD_INT 1
11656: ARRAY
11657: PUSH
11658: LD_INT 2
11660: ARRAY
11661: PPUSH
11662: LD_EXP 34
11666: PUSH
11667: LD_INT 1
11669: ARRAY
11670: PUSH
11671: LD_INT 3
11673: ARRAY
11674: PPUSH
11675: LD_EXP 34
11679: PUSH
11680: LD_INT 1
11682: ARRAY
11683: PUSH
11684: LD_INT 4
11686: ARRAY
11687: PPUSH
11688: CALL 52601 0 5
11692: AND
11693: IFFALSE 11778
// begin if IsInUnit ( i ) then
11695: LD_VAR 0 1
11699: PPUSH
11700: CALL_OW 310
11704: IFFALSE 11717
// ComExitBuilding ( i ) else
11706: LD_VAR 0 1
11710: PPUSH
11711: CALL_OW 122
11715: GO 11778
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
11717: LD_VAR 0 1
11721: PPUSH
11722: LD_EXP 34
11726: PUSH
11727: LD_INT 1
11729: ARRAY
11730: PUSH
11731: LD_INT 1
11733: ARRAY
11734: PPUSH
11735: LD_EXP 34
11739: PUSH
11740: LD_INT 1
11742: ARRAY
11743: PUSH
11744: LD_INT 2
11746: ARRAY
11747: PPUSH
11748: LD_EXP 34
11752: PUSH
11753: LD_INT 1
11755: ARRAY
11756: PUSH
11757: LD_INT 3
11759: ARRAY
11760: PPUSH
11761: LD_EXP 34
11765: PUSH
11766: LD_INT 1
11768: ARRAY
11769: PUSH
11770: LD_INT 4
11772: ARRAY
11773: PPUSH
11774: CALL_OW 145
// end ; end ; 1 :
11778: GO 11977
11780: LD_INT 1
11782: DOUBLE
11783: EQUAL
11784: IFTRUE 11788
11786: GO 11891
11788: POP
// begin if not b then
11789: LD_VAR 0 3
11793: NOT
11794: IFFALSE 11810
// begin SetTag ( i , 0 ) ;
11796: LD_VAR 0 1
11800: PPUSH
11801: LD_INT 0
11803: PPUSH
11804: CALL_OW 109
// continue ;
11808: GO 11538
// end ; if IsInUnit ( i ) then
11810: LD_VAR 0 1
11814: PPUSH
11815: CALL_OW 310
11819: IFFALSE 11830
// ComExitBuilding ( i ) ;
11821: LD_VAR 0 1
11825: PPUSH
11826: CALL_OW 122
// if GetLives ( i ) < 650 then
11830: LD_VAR 0 1
11834: PPUSH
11835: CALL_OW 256
11839: PUSH
11840: LD_INT 650
11842: LESS
11843: IFFALSE 11859
// begin SetTag ( i , 2 ) ;
11845: LD_VAR 0 1
11849: PPUSH
11850: LD_INT 2
11852: PPUSH
11853: CALL_OW 109
// continue ;
11857: GO 11538
// end ; if b then
11859: LD_VAR 0 3
11863: IFFALSE 11889
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
11865: LD_VAR 0 1
11869: PPUSH
11870: LD_VAR 0 3
11874: PPUSH
11875: LD_VAR 0 1
11879: PPUSH
11880: CALL_OW 74
11884: PPUSH
11885: CALL_OW 130
// end ; 2 :
11889: GO 11977
11891: LD_INT 2
11893: DOUBLE
11894: EQUAL
11895: IFTRUE 11899
11897: GO 11976
11899: POP
// begin if GetLives ( i ) = 1000 then
11900: LD_VAR 0 1
11904: PPUSH
11905: CALL_OW 256
11909: PUSH
11910: LD_INT 1000
11912: EQUAL
11913: IFFALSE 11929
// begin SetTag ( i , 1 ) ;
11915: LD_VAR 0 1
11919: PPUSH
11920: LD_INT 1
11922: PPUSH
11923: CALL_OW 109
// continue ;
11927: GO 11538
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
11929: LD_VAR 0 1
11933: PPUSH
11934: LD_INT 84
11936: PPUSH
11937: LD_INT 93
11939: PPUSH
11940: CALL_OW 297
11944: PUSH
11945: LD_INT 6
11947: GREATER
11948: IFFALSE 11974
// begin ComMoveXY ( i , 84 , 93 ) ;
11950: LD_VAR 0 1
11954: PPUSH
11955: LD_INT 84
11957: PPUSH
11958: LD_INT 93
11960: PPUSH
11961: CALL_OW 111
// AddComHold ( i ) ;
11965: LD_VAR 0 1
11969: PPUSH
11970: CALL_OW 200
// end ; end ; end ;
11974: GO 11977
11976: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
11977: LD_VAR 0 1
11981: PPUSH
11982: LD_INT 12
11984: PPUSH
11985: CALL_OW 308
11989: NOT
11990: PUSH
11991: LD_VAR 0 1
11995: PPUSH
11996: CALL_OW 310
12000: NOT
12001: AND
12002: IFFALSE 12019
// ComMoveXY ( i , 91 , 95 ) ;
12004: LD_VAR 0 1
12008: PPUSH
12009: LD_INT 91
12011: PPUSH
12012: LD_INT 95
12014: PPUSH
12015: CALL_OW 111
// end ;
12019: GO 11538
12021: POP
12022: POP
// end ; end ;
12023: PPOPN 8
12025: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
12026: LD_INT 0
12028: PPUSH
12029: PPUSH
12030: PPUSH
12031: PPUSH
12032: PPUSH
12033: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
12034: LD_ADDR_VAR 0 3
12038: PUSH
12039: DOUBLE
12040: LD_INT 1
12042: DEC
12043: ST_TO_ADDR
12044: LD_INT 3
12046: PUSH
12047: LD_INT 4
12049: PUSH
12050: LD_INT 5
12052: PUSH
12053: LD_INT 6
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: PUSH
12062: LD_OWVAR 67
12066: ARRAY
12067: PUSH
12068: LD_VAR 0 1
12072: PLUS
12073: PUSH
12074: FOR_TO
12075: IFFALSE 12392
// begin uc_side := 6 ;
12077: LD_ADDR_OWVAR 20
12081: PUSH
12082: LD_INT 6
12084: ST_TO_ADDR
// uc_nation := 3 ;
12085: LD_ADDR_OWVAR 21
12089: PUSH
12090: LD_INT 3
12092: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
12093: LD_ADDR_VAR 0 6
12097: PUSH
12098: LD_INT 21
12100: PUSH
12101: LD_INT 22
12103: PUSH
12104: LD_INT 23
12106: PUSH
12107: LD_INT 24
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: PUSH
12116: LD_INT 1
12118: PPUSH
12119: LD_INT 4
12121: PPUSH
12122: CALL_OW 12
12126: ARRAY
12127: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
12128: LD_ADDR_VAR 0 7
12132: PUSH
12133: LD_INT 42
12135: PUSH
12136: LD_INT 44
12138: PUSH
12139: LD_INT 43
12141: PUSH
12142: LD_INT 46
12144: PUSH
12145: LD_INT 45
12147: PUSH
12148: LD_INT 46
12150: PUSH
12151: LD_INT 45
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: PUSH
12163: LD_OWVAR 67
12167: PUSH
12168: LD_INT 0
12170: PPUSH
12171: LD_INT 3
12173: PPUSH
12174: CALL_OW 12
12178: PLUS
12179: ARRAY
12180: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
12181: LD_VAR 0 6
12185: PUSH
12186: LD_INT 21
12188: PUSH
12189: LD_INT 22
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: IN
12196: PUSH
12197: LD_VAR 0 7
12201: PUSH
12202: LD_INT 46
12204: EQUAL
12205: AND
12206: IFFALSE 12235
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
12208: LD_ADDR_VAR 0 7
12212: PUSH
12213: LD_INT 44
12215: PUSH
12216: LD_INT 45
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: PUSH
12223: LD_INT 1
12225: PPUSH
12226: LD_INT 2
12228: PPUSH
12229: CALL_OW 12
12233: ARRAY
12234: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
12235: LD_OWVAR 1
12239: PUSH
12240: LD_INT 31500
12242: PUSH
12243: LD_INT 27300
12245: PUSH
12246: LD_INT 23100
12248: PUSH
12249: LD_INT 18900
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: PUSH
12258: LD_OWVAR 67
12262: ARRAY
12263: LESS
12264: IFFALSE 12297
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
12266: LD_ADDR_VAR 0 7
12270: PUSH
12271: LD_INT 44
12273: PUSH
12274: LD_INT 43
12276: PUSH
12277: LD_INT 42
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: LIST
12284: PUSH
12285: LD_INT 1
12287: PPUSH
12288: LD_INT 3
12290: PPUSH
12291: CALL_OW 12
12295: ARRAY
12296: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
12297: LD_VAR 0 6
12301: PPUSH
12302: LD_INT 1
12304: PPUSH
12305: LD_INT 3
12307: PPUSH
12308: LD_VAR 0 7
12312: PPUSH
12313: LD_INT 90
12315: PPUSH
12316: CALL 44382 0 5
// un := CreateVehicle ;
12320: LD_ADDR_VAR 0 4
12324: PUSH
12325: CALL_OW 45
12329: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
12330: LD_VAR 0 4
12334: PPUSH
12335: LD_INT 140
12337: PPUSH
12338: LD_INT 146
12340: PPUSH
12341: LD_INT 0
12343: PPUSH
12344: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
12348: LD_VAR 0 4
12352: PPUSH
12353: LD_INT 131
12355: PPUSH
12356: LD_INT 128
12358: PPUSH
12359: CALL_OW 111
// wait ( 0 0$3 ) ;
12363: LD_INT 105
12365: PPUSH
12366: CALL_OW 67
// tmp := Join ( tmp , un ) ;
12370: LD_ADDR_VAR 0 5
12374: PUSH
12375: LD_VAR 0 5
12379: PPUSH
12380: LD_VAR 0 4
12384: PPUSH
12385: CALL 76816 0 2
12389: ST_TO_ADDR
// end ;
12390: GO 12074
12392: POP
12393: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
12394: LD_ADDR_EXP 35
12398: PUSH
12399: LD_EXP 35
12403: PPUSH
12404: LD_VAR 0 5
12408: PPUSH
12409: CALL 76853 0 2
12413: ST_TO_ADDR
// end ;
12414: LD_VAR 0 2
12418: RET
// every 0 0$3 trigger russianAttackers do
12419: LD_EXP 35
12423: IFFALSE 12506
12425: GO 12427
12427: DISABLE
// begin enable ;
12428: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
12429: LD_EXP 35
12433: PPUSH
12434: LD_INT 126
12436: PUSH
12437: LD_INT 108
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 107
12446: PUSH
12447: LD_INT 85
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 82
12456: PUSH
12457: LD_INT 62
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PUSH
12464: LD_INT 73
12466: PUSH
12467: LD_INT 46
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PUSH
12474: LD_INT 62
12476: PUSH
12477: LD_INT 31
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 52
12486: PUSH
12487: LD_INT 17
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: PPUSH
12502: CALL 79420 0 2
// end ; end_of_file
12506: END
// on SailEvent ( event ) do begin if event = 1 then
12507: LD_VAR 0 1
12511: PUSH
12512: LD_INT 1
12514: EQUAL
12515: IFFALSE 12530
// PrepareRussianAttack ( Difficulty + 3 ) ;
12517: LD_OWVAR 67
12521: PUSH
12522: LD_INT 3
12524: PLUS
12525: PPUSH
12526: CALL 12026 0 1
// end ;
12530: PPOPN 1
12532: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
12533: LD_INT 0
12535: PPUSH
12536: PPUSH
12537: PPUSH
12538: PPUSH
12539: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
12540: LD_VAR 0 1
12544: PPUSH
12545: CALL 35078 0 1
// if un = JMM then
12549: LD_VAR 0 1
12553: PUSH
12554: LD_EXP 14
12558: EQUAL
12559: IFFALSE 12568
// YouLost ( JMM ) ;
12561: LD_STRING JMM
12563: PPUSH
12564: CALL_OW 104
// if un = Sikorski then
12568: LD_VAR 0 1
12572: PUSH
12573: LD_EXP 27
12577: EQUAL
12578: IFFALSE 12604
// if sikorskiStatus = 0 then
12580: LD_EXP 9
12584: PUSH
12585: LD_INT 0
12587: EQUAL
12588: IFFALSE 12596
// SikorskiKilledInAction else
12590: CALL 17945 0 0
12594: GO 12604
// sikorskiIsKilled := true ;
12596: LD_ADDR_EXP 10
12600: PUSH
12601: LD_INT 1
12603: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
12604: LD_VAR 0 1
12608: PPUSH
12609: CALL_OW 255
12613: PUSH
12614: LD_INT 1
12616: EQUAL
12617: PUSH
12618: LD_VAR 0 1
12622: PPUSH
12623: CALL_OW 266
12627: PUSH
12628: LD_INT 0
12630: PUSH
12631: LD_INT 1
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: IN
12638: AND
12639: IFFALSE 12648
// YouLost ( Destroyed ) ;
12641: LD_STRING Destroyed
12643: PPUSH
12644: CALL_OW 104
// if un = ruDep then
12648: LD_VAR 0 1
12652: PUSH
12653: LD_INT 28
12655: EQUAL
12656: IFFALSE 12790
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
12658: LD_ADDR_VAR 0 2
12662: PUSH
12663: LD_INT 22
12665: PUSH
12666: LD_INT 3
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: PUSH
12673: LD_INT 25
12675: PUSH
12676: LD_INT 1
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: PPUSH
12687: CALL_OW 69
12691: PUSH
12692: FOR_IN
12693: IFFALSE 12788
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
12695: LD_ADDR_VAR 0 3
12699: PUSH
12700: LD_INT 11
12702: PPUSH
12703: LD_INT 81
12705: PUSH
12706: LD_INT 3
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: PPUSH
12713: CALL_OW 70
12717: PPUSH
12718: LD_VAR 0 2
12722: PPUSH
12723: CALL_OW 74
12727: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
12728: LD_VAR 0 2
12732: PPUSH
12733: CALL_OW 310
12737: PPUSH
12738: CALL_OW 266
12742: PUSH
12743: LD_INT 32
12745: EQUAL
12746: IFFALSE 12786
// begin ComExitBuilding ( i ) ;
12748: LD_VAR 0 2
12752: PPUSH
12753: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
12757: LD_VAR 0 2
12761: PPUSH
12762: LD_VAR 0 3
12766: PPUSH
12767: CALL_OW 250
12771: PPUSH
12772: LD_VAR 0 3
12776: PPUSH
12777: CALL_OW 251
12781: PPUSH
12782: CALL_OW 174
// end ; end ;
12786: GO 12692
12788: POP
12789: POP
// end ; if un in ruMobile then
12790: LD_VAR 0 1
12794: PUSH
12795: LD_EXP 33
12799: IN
12800: IFFALSE 12818
// ruMobile := ruMobile diff un ;
12802: LD_ADDR_EXP 33
12806: PUSH
12807: LD_EXP 33
12811: PUSH
12812: LD_VAR 0 1
12816: DIFF
12817: ST_TO_ADDR
// if GetSide ( un ) = 3 then
12818: LD_VAR 0 1
12822: PPUSH
12823: CALL_OW 255
12827: PUSH
12828: LD_INT 3
12830: EQUAL
12831: IFFALSE 13466
// begin if GetType ( un ) = unit_building then
12833: LD_VAR 0 1
12837: PPUSH
12838: CALL_OW 247
12842: PUSH
12843: LD_INT 3
12845: EQUAL
12846: IFFALSE 12982
// begin btype := GetBType ( un ) ;
12848: LD_ADDR_VAR 0 6
12852: PUSH
12853: LD_VAR 0 1
12857: PPUSH
12858: CALL_OW 266
12862: ST_TO_ADDR
// if btype = b_warehouse then
12863: LD_VAR 0 6
12867: PUSH
12868: LD_INT 1
12870: EQUAL
12871: IFFALSE 12881
// btype := b_depot ;
12873: LD_ADDR_VAR 0 6
12877: PUSH
12878: LD_INT 0
12880: ST_TO_ADDR
// if btype = b_barracks then
12881: LD_VAR 0 6
12885: PUSH
12886: LD_INT 5
12888: EQUAL
12889: IFFALSE 12899
// btype := b_armoury ;
12891: LD_ADDR_VAR 0 6
12895: PUSH
12896: LD_INT 4
12898: ST_TO_ADDR
// if btype = b_lab_full then
12899: LD_VAR 0 6
12903: PUSH
12904: LD_INT 8
12906: EQUAL
12907: IFFALSE 12917
// btype := b_lab ;
12909: LD_ADDR_VAR 0 6
12913: PUSH
12914: LD_INT 6
12916: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
12917: LD_ADDR_EXP 34
12921: PUSH
12922: LD_EXP 34
12926: PPUSH
12927: LD_EXP 34
12931: PUSH
12932: LD_INT 1
12934: PLUS
12935: PPUSH
12936: LD_VAR 0 6
12940: PUSH
12941: LD_VAR 0 1
12945: PPUSH
12946: CALL_OW 250
12950: PUSH
12951: LD_VAR 0 1
12955: PPUSH
12956: CALL_OW 251
12960: PUSH
12961: LD_VAR 0 1
12965: PPUSH
12966: CALL_OW 254
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: PPUSH
12977: CALL_OW 1
12981: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
12982: LD_VAR 0 1
12986: PPUSH
12987: CALL_OW 247
12991: PUSH
12992: LD_INT 2
12994: EQUAL
12995: IFFALSE 13270
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
12997: LD_VAR 0 1
13001: PPUSH
13002: CALL_OW 264
13006: PUSH
13007: LD_INT 52
13009: PUSH
13010: LD_INT 51
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: IN
13017: IFFALSE 13047
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
13019: LD_INT 29
13021: PPUSH
13022: LD_INT 22
13024: PPUSH
13025: LD_INT 1
13027: PPUSH
13028: LD_INT 3
13030: PPUSH
13031: LD_VAR 0 1
13035: PPUSH
13036: CALL_OW 264
13040: PPUSH
13041: CALL_OW 185
// end else
13045: GO 13270
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13047: LD_ADDR_VAR 0 4
13051: PUSH
13052: LD_INT 21
13054: PUSH
13055: LD_INT 22
13057: PUSH
13058: LD_INT 23
13060: PUSH
13061: LD_INT 24
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 1
13072: PPUSH
13073: LD_INT 4
13075: PPUSH
13076: CALL_OW 12
13080: ARRAY
13081: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13082: LD_ADDR_VAR 0 5
13086: PUSH
13087: LD_INT 42
13089: PUSH
13090: LD_INT 44
13092: PUSH
13093: LD_INT 43
13095: PUSH
13096: LD_INT 46
13098: PUSH
13099: LD_INT 45
13101: PUSH
13102: LD_INT 46
13104: PUSH
13105: LD_INT 45
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: PUSH
13117: LD_OWVAR 67
13121: PUSH
13122: LD_INT 0
13124: PPUSH
13125: LD_INT 3
13127: PPUSH
13128: CALL_OW 12
13132: PLUS
13133: ARRAY
13134: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13135: LD_VAR 0 4
13139: PUSH
13140: LD_INT 21
13142: PUSH
13143: LD_INT 22
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: IN
13150: PUSH
13151: LD_VAR 0 5
13155: PUSH
13156: LD_INT 46
13158: EQUAL
13159: AND
13160: IFFALSE 13189
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13162: LD_ADDR_VAR 0 5
13166: PUSH
13167: LD_INT 44
13169: PUSH
13170: LD_INT 45
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: LD_INT 1
13179: PPUSH
13180: LD_INT 2
13182: PPUSH
13183: CALL_OW 12
13187: ARRAY
13188: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
13189: LD_OWVAR 1
13193: PUSH
13194: LD_INT 31500
13196: PUSH
13197: LD_INT 27300
13199: PUSH
13200: LD_INT 23100
13202: PUSH
13203: LD_INT 21000
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: PUSH
13212: LD_OWVAR 67
13216: ARRAY
13217: LESS
13218: IFFALSE 13247
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
13220: LD_ADDR_VAR 0 5
13224: PUSH
13225: LD_INT 44
13227: PUSH
13228: LD_INT 43
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PUSH
13235: LD_INT 1
13237: PPUSH
13238: LD_INT 2
13240: PPUSH
13241: CALL_OW 12
13245: ARRAY
13246: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
13247: LD_INT 29
13249: PPUSH
13250: LD_VAR 0 4
13254: PPUSH
13255: LD_INT 1
13257: PPUSH
13258: LD_INT 1
13260: PPUSH
13261: LD_VAR 0 5
13265: PPUSH
13266: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
13270: LD_VAR 0 1
13274: PPUSH
13275: CALL_OW 257
13279: PUSH
13280: LD_INT 3
13282: EQUAL
13283: IFFALSE 13466
// begin killMechCounter := Inc ( killMechCounter ) ;
13285: LD_ADDR_EXP 12
13289: PUSH
13290: LD_EXP 12
13294: PPUSH
13295: CALL 78177 0 1
13299: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
13300: LD_EXP 32
13304: PUSH
13305: LD_INT 0
13307: EQUAL
13308: PUSH
13309: LD_INT 29
13311: PPUSH
13312: CALL_OW 302
13316: NOT
13317: OR
13318: IFFALSE 13322
// exit ;
13320: GO 13466
// ruMechCounter := Dec ( ruMechCounter ) ;
13322: LD_ADDR_EXP 32
13326: PUSH
13327: LD_EXP 32
13331: PPUSH
13332: CALL 78199 0 1
13336: ST_TO_ADDR
// uc_side := 3 ;
13337: LD_ADDR_OWVAR 20
13341: PUSH
13342: LD_INT 3
13344: ST_TO_ADDR
// uc_nation := 3 ;
13345: LD_ADDR_OWVAR 21
13349: PUSH
13350: LD_INT 3
13352: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
13353: LD_INT 0
13355: PPUSH
13356: LD_INT 5
13358: PUSH
13359: LD_INT 6
13361: PUSH
13362: LD_INT 7
13364: PUSH
13365: LD_INT 8
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: PUSH
13374: LD_OWVAR 67
13378: ARRAY
13379: PPUSH
13380: CALL_OW 383
// tmp := CreateHuman ;
13384: LD_ADDR_VAR 0 3
13388: PUSH
13389: CALL_OW 44
13393: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
13394: LD_VAR 0 3
13398: PPUSH
13399: LD_INT 145
13401: PPUSH
13402: LD_INT 133
13404: PPUSH
13405: LD_INT 0
13407: PPUSH
13408: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
13412: LD_VAR 0 3
13416: PPUSH
13417: LD_INT 29
13419: PPUSH
13420: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13424: LD_INT 35
13426: PPUSH
13427: CALL_OW 67
// if not HasTask ( tmp ) then
13431: LD_VAR 0 3
13435: PPUSH
13436: CALL_OW 314
13440: NOT
13441: IFFALSE 13455
// ComEnterUnit ( tmp , ruFac ) ;
13443: LD_VAR 0 3
13447: PPUSH
13448: LD_INT 29
13450: PPUSH
13451: CALL_OW 120
// until IsInUnit ( tmp ) ;
13455: LD_VAR 0 3
13459: PPUSH
13460: CALL_OW 310
13464: IFFALSE 13424
// end ; end ; end ;
13466: PPOPN 6
13468: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
13469: LD_VAR 0 1
13473: PPUSH
13474: CALL_OW 255
13478: PUSH
13479: LD_INT 4
13481: EQUAL
13482: IFFALSE 13499
// ComMoveXY ( driver , 40 , 47 ) ;
13484: LD_VAR 0 1
13488: PPUSH
13489: LD_INT 40
13491: PPUSH
13492: LD_INT 47
13494: PPUSH
13495: CALL_OW 111
// if GetSide ( driver ) = 3 then
13499: LD_VAR 0 1
13503: PPUSH
13504: CALL_OW 255
13508: PUSH
13509: LD_INT 3
13511: EQUAL
13512: IFFALSE 13726
// begin ComMoveXY ( driver , 90 , 97 ) ;
13514: LD_VAR 0 1
13518: PPUSH
13519: LD_INT 90
13521: PPUSH
13522: LD_INT 97
13524: PPUSH
13525: CALL_OW 111
// if IsOk ( ruFac ) then
13529: LD_INT 29
13531: PPUSH
13532: CALL_OW 302
13536: IFFALSE 13650
// begin repeat wait ( 0 0$1 ) ;
13538: LD_INT 35
13540: PPUSH
13541: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
13545: LD_INT 29
13547: PPUSH
13548: CALL_OW 313
13552: PUSH
13553: LD_INT 6
13555: LESS
13556: PUSH
13557: LD_VAR 0 1
13561: PPUSH
13562: CALL_OW 301
13566: OR
13567: IFFALSE 13538
// if IsDead ( driver ) then
13569: LD_VAR 0 1
13573: PPUSH
13574: CALL_OW 301
13578: IFFALSE 13582
// exit ;
13580: GO 13726
// repeat wait ( 0 0$10 ) ;
13582: LD_INT 350
13584: PPUSH
13585: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
13589: LD_VAR 0 1
13593: PPUSH
13594: CALL_OW 314
13598: NOT
13599: PUSH
13600: LD_INT 29
13602: PPUSH
13603: CALL_OW 313
13607: PUSH
13608: LD_INT 6
13610: LESS
13611: AND
13612: IFFALSE 13626
// ComEnterUnit ( driver , ruFac ) ;
13614: LD_VAR 0 1
13618: PPUSH
13619: LD_INT 29
13621: PPUSH
13622: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
13626: LD_VAR 0 1
13630: PPUSH
13631: CALL_OW 301
13635: PUSH
13636: LD_VAR 0 1
13640: PPUSH
13641: CALL_OW 310
13645: OR
13646: IFFALSE 13582
// end else
13648: GO 13726
// begin ComMoveXY ( driver , 142 , 148 ) ;
13650: LD_VAR 0 1
13654: PPUSH
13655: LD_INT 142
13657: PPUSH
13658: LD_INT 148
13660: PPUSH
13661: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13665: LD_INT 35
13667: PPUSH
13668: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
13672: LD_VAR 0 1
13676: PPUSH
13677: CALL_OW 301
13681: PUSH
13682: LD_VAR 0 1
13686: PPUSH
13687: LD_INT 142
13689: PPUSH
13690: LD_INT 148
13692: PPUSH
13693: CALL_OW 307
13697: OR
13698: IFFALSE 13665
// if IsAt ( driver , 142 , 148 ) then
13700: LD_VAR 0 1
13704: PPUSH
13705: LD_INT 142
13707: PPUSH
13708: LD_INT 148
13710: PPUSH
13711: CALL_OW 307
13715: IFFALSE 13726
// RemoveUnit ( driver ) ;
13717: LD_VAR 0 1
13721: PPUSH
13722: CALL_OW 64
// end ; end ; end ;
13726: PPOPN 4
13728: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
13729: LD_VAR 0 2
13733: PPUSH
13734: CALL_OW 257
13738: PUSH
13739: LD_INT 3
13741: EQUAL
13742: PUSH
13743: LD_VAR 0 1
13747: PPUSH
13748: CALL_OW 255
13752: PUSH
13753: LD_INT 3
13755: EQUAL
13756: AND
13757: PUSH
13758: LD_VAR 0 1
13762: PUSH
13763: LD_INT 29
13765: EQUAL
13766: AND
13767: IFFALSE 13781
// SetLives ( un , 1000 ) ;
13769: LD_VAR 0 2
13773: PPUSH
13774: LD_INT 1000
13776: PPUSH
13777: CALL_OW 234
// end ;
13781: PPOPN 2
13783: END
// on EvacuateBuilding ( b , un ) do var i , tmp ;
13784: LD_INT 0
13786: PPUSH
13787: PPUSH
// begin if GetSide ( b ) = 3 then
13788: LD_VAR 0 1
13792: PPUSH
13793: CALL_OW 255
13797: PUSH
13798: LD_INT 3
13800: EQUAL
13801: IFFALSE 14032
// begin if GetBType ( b ) in [ b_bunker , b_barracks ] then
13803: LD_VAR 0 1
13807: PPUSH
13808: CALL_OW 266
13812: PUSH
13813: LD_INT 32
13815: PUSH
13816: LD_INT 5
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: IN
13823: IFFALSE 14032
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
13825: LD_ADDR_VAR 0 4
13829: PUSH
13830: LD_INT 22
13832: PUSH
13833: LD_INT 3
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PUSH
13840: LD_INT 50
13842: PUSH
13843: EMPTY
13844: LIST
13845: PUSH
13846: LD_INT 30
13848: PUSH
13849: LD_INT 32
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: LD_INT 58
13858: PUSH
13859: EMPTY
13860: LIST
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: PPUSH
13868: CALL_OW 69
13872: ST_TO_ADDR
// if tmp then
13873: LD_VAR 0 4
13877: IFFALSE 13899
// begin ComEnterUnit ( un , tmp [ 1 ] ) ;
13879: LD_VAR 0 2
13883: PPUSH
13884: LD_VAR 0 4
13888: PUSH
13889: LD_INT 1
13891: ARRAY
13892: PPUSH
13893: CALL_OW 120
// exit ;
13897: GO 14032
// end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
13899: LD_ADDR_VAR 0 4
13903: PUSH
13904: LD_INT 22
13906: PUSH
13907: LD_INT 3
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PUSH
13914: LD_INT 50
13916: PUSH
13917: EMPTY
13918: LIST
13919: PUSH
13920: LD_INT 2
13922: PUSH
13923: LD_INT 30
13925: PUSH
13926: LD_INT 4
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: LD_INT 30
13935: PUSH
13936: LD_INT 5
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: LIST
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: LIST
13952: PPUSH
13953: CALL_OW 69
13957: ST_TO_ADDR
// if not tmp then
13958: LD_VAR 0 4
13962: NOT
13963: IFFALSE 13982
// begin ComMoveXY ( un , 92 , 99 ) ;
13965: LD_VAR 0 2
13969: PPUSH
13970: LD_INT 92
13972: PPUSH
13973: LD_INT 99
13975: PPUSH
13976: CALL_OW 111
// exit ;
13980: GO 14032
// end ; for i in tmp do
13982: LD_ADDR_VAR 0 3
13986: PUSH
13987: LD_VAR 0 4
13991: PUSH
13992: FOR_IN
13993: IFFALSE 14030
// if UnitsInside ( i ) < 6 then
13995: LD_VAR 0 3
13999: PPUSH
14000: CALL_OW 313
14004: PUSH
14005: LD_INT 6
14007: LESS
14008: IFFALSE 14028
// begin ComEnterUnit ( un , i ) ;
14010: LD_VAR 0 2
14014: PPUSH
14015: LD_VAR 0 3
14019: PPUSH
14020: CALL_OW 120
// exit ;
14024: POP
14025: POP
14026: GO 14032
// end ;
14028: GO 13992
14030: POP
14031: POP
// end ; end ; end ;
14032: PPOPN 4
14034: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
14035: LD_VAR 0 1
14039: PPUSH
14040: CALL_OW 255
14044: PUSH
14045: LD_INT 3
14047: PUSH
14048: LD_INT 6
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: IN
14055: PUSH
14056: LD_VAR 0 1
14060: PPUSH
14061: CALL_OW 263
14065: PUSH
14066: LD_INT 3
14068: EQUAL
14069: AND
14070: PUSH
14071: LD_EXP 7
14075: NOT
14076: AND
14077: IFFALSE 14096
// begin seenComputer := true ;
14079: LD_ADDR_EXP 7
14083: PUSH
14084: LD_INT 1
14086: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
14087: LD_VAR 0 1
14091: PPUSH
14092: CALL 17159 0 1
// end ; end ;
14096: PPOPN 1
14098: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
14099: LD_INT 0
14101: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
14102: LD_VAR 0 1
14106: PPUSH
14107: LD_VAR 0 2
14111: PPUSH
14112: CALL 35198 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
14116: LD_VAR 0 1
14120: PPUSH
14121: CALL_OW 255
14125: PUSH
14126: LD_INT 3
14128: EQUAL
14129: PUSH
14130: LD_VAR 0 1
14134: PPUSH
14135: CALL_OW 263
14139: PUSH
14140: LD_INT 1
14142: EQUAL
14143: AND
14144: PUSH
14145: LD_VAR 0 1
14149: PPUSH
14150: CALL_OW 264
14154: PUSH
14155: LD_INT 42
14157: PUSH
14158: LD_INT 43
14160: PUSH
14161: LD_INT 44
14163: PUSH
14164: LD_INT 46
14166: PUSH
14167: LD_INT 45
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: IN
14177: AND
14178: IFFALSE 14208
// begin SetTag ( vehicle , 300 ) ;
14180: LD_VAR 0 1
14184: PPUSH
14185: LD_INT 300
14187: PPUSH
14188: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
14192: LD_ADDR_EXP 33
14196: PUSH
14197: LD_EXP 33
14201: PUSH
14202: LD_VAR 0 1
14206: UNION
14207: ST_TO_ADDR
// end ; end ;
14208: PPOPN 3
14210: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
14211: LD_INT 0
14213: PPUSH
// begin if InArea ( x , y , ruCrates ) then
14214: LD_VAR 0 2
14218: PPUSH
14219: LD_VAR 0 3
14223: PPUSH
14224: LD_INT 13
14226: PPUSH
14227: CALL_OW 309
14231: IFFALSE 14362
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
14233: LD_ADDR_VAR 0 6
14237: PUSH
14238: LD_INT 22
14240: PUSH
14241: LD_INT 3
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 50
14250: PUSH
14251: EMPTY
14252: LIST
14253: PUSH
14254: LD_INT 34
14256: PUSH
14257: LD_INT 51
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: LIST
14268: PPUSH
14269: CALL_OW 69
14273: ST_TO_ADDR
// if not cargo then
14274: LD_VAR 0 6
14278: NOT
14279: IFFALSE 14283
// exit ;
14281: GO 14362
// wait ( 0 0$5 ) ;
14283: LD_INT 175
14285: PPUSH
14286: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
14290: LD_VAR 0 6
14294: PUSH
14295: LD_INT 1
14297: ARRAY
14298: PPUSH
14299: LD_INT 28
14301: PPUSH
14302: CALL_OW 296
14306: PUSH
14307: LD_INT 6
14309: LESS
14310: PUSH
14311: LD_VAR 0 6
14315: PUSH
14316: LD_INT 1
14318: ARRAY
14319: PPUSH
14320: CALL_OW 261
14324: PUSH
14325: LD_INT 50
14327: LESS
14328: AND
14329: IFFALSE 14343
// ComMoveUnit ( cargo , ruDep ) ;
14331: LD_VAR 0 6
14335: PPUSH
14336: LD_INT 28
14338: PPUSH
14339: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
14343: LD_VAR 0 6
14347: PPUSH
14348: LD_VAR 0 2
14352: PPUSH
14353: LD_VAR 0 3
14357: PPUSH
14358: CALL_OW 177
// end ; end ;
14362: PPOPN 6
14364: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
14365: LD_VAR 0 1
14369: PPUSH
14370: CALL_OW 264
14374: PUSH
14375: LD_INT 45
14377: EQUAL
14378: IFFALSE 14395
// captureRocketCounter := Inc ( captureRocketCounter ) ;
14380: LD_ADDR_EXP 11
14384: PUSH
14385: LD_EXP 11
14389: PPUSH
14390: CALL 78177 0 1
14394: ST_TO_ADDR
// end ;
14395: PPOPN 4
14397: END
// on BuildingComplete ( b ) do var i , tmp ;
14398: LD_INT 0
14400: PPUSH
14401: PPUSH
// begin if GetSide ( b ) = 3 then
14402: LD_VAR 0 1
14406: PPUSH
14407: CALL_OW 255
14411: PUSH
14412: LD_INT 3
14414: EQUAL
14415: IFFALSE 14654
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
14417: LD_ADDR_EXP 34
14421: PUSH
14422: LD_EXP 34
14426: PPUSH
14427: LD_INT 1
14429: PPUSH
14430: CALL_OW 3
14434: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
14435: LD_VAR 0 1
14439: PPUSH
14440: CALL_OW 266
14444: PUSH
14445: LD_INT 4
14447: EQUAL
14448: IFFALSE 14459
// ComUpgrade ( b ) ;
14450: LD_VAR 0 1
14454: PPUSH
14455: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
14459: LD_VAR 0 1
14463: PPUSH
14464: CALL_OW 266
14468: PUSH
14469: LD_INT 32
14471: PUSH
14472: LD_INT 33
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: IN
14479: IFFALSE 14654
// begin AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
14481: LD_VAR 0 1
14485: PPUSH
14486: LD_INT 46
14488: PUSH
14489: LD_INT 45
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: PUSH
14496: LD_INT 1
14498: PPUSH
14499: LD_INT 2
14501: PPUSH
14502: CALL_OW 12
14506: ARRAY
14507: PPUSH
14508: CALL_OW 208
// if GetBType ( b ) = b_bunker then
14512: LD_VAR 0 1
14516: PPUSH
14517: CALL_OW 266
14521: PUSH
14522: LD_INT 32
14524: EQUAL
14525: IFFALSE 14654
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_tag , 0 ] ] ) ;
14527: LD_ADDR_VAR 0 3
14531: PUSH
14532: LD_INT 22
14534: PUSH
14535: LD_INT 3
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 25
14544: PUSH
14545: LD_INT 1
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PUSH
14552: LD_INT 120
14554: PUSH
14555: LD_INT 0
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: LIST
14566: PPUSH
14567: CALL_OW 69
14571: ST_TO_ADDR
// if tmp then
14572: LD_VAR 0 3
14576: IFFALSE 14654
// for i in tmp do
14578: LD_ADDR_VAR 0 2
14582: PUSH
14583: LD_VAR 0 3
14587: PUSH
14588: FOR_IN
14589: IFFALSE 14652
// if not IsInUnit ( i ) or GetBType ( IsInUnit ( i ) ) <> b_bunker then
14591: LD_VAR 0 2
14595: PPUSH
14596: CALL_OW 310
14600: NOT
14601: PUSH
14602: LD_VAR 0 2
14606: PPUSH
14607: CALL_OW 310
14611: PPUSH
14612: CALL_OW 266
14616: PUSH
14617: LD_INT 32
14619: NONEQUAL
14620: OR
14621: IFFALSE 14650
// begin ComExit ( i ) ;
14623: LD_VAR 0 2
14627: PPUSH
14628: CALL 77214 0 1
// AddComEnterUnit ( i , b ) ;
14632: LD_VAR 0 2
14636: PPUSH
14637: LD_VAR 0 1
14641: PPUSH
14642: CALL_OW 180
// exit ;
14646: POP
14647: POP
14648: GO 14654
// end ;
14650: GO 14588
14652: POP
14653: POP
// end ; end ; end ; end ; end_of_file
14654: PPOPN 3
14656: END
// export function Action ; var i , tmp , un , inUnit ; begin
14657: LD_INT 0
14659: PPUSH
14660: PPUSH
14661: PPUSH
14662: PPUSH
14663: PPUSH
// Video ( true ) ;
14664: LD_INT 1
14666: PPUSH
14667: CALL 76788 0 1
// invincibleMode := true ;
14671: LD_ADDR_EXP 5
14675: PUSH
14676: LD_INT 1
14678: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
14679: LD_INT 50
14681: PPUSH
14682: LD_INT 12
14684: PPUSH
14685: LD_INT 1
14687: PPUSH
14688: LD_INT 56
14690: NEG
14691: PPUSH
14692: CALL 76702 0 4
// CenterOnXY ( 50 , 12 ) ;
14696: LD_INT 50
14698: PPUSH
14699: LD_INT 12
14701: PPUSH
14702: CALL_OW 84
// wait ( 0 0$3 ) ;
14706: LD_INT 105
14708: PPUSH
14709: CALL_OW 67
// PrepareStartRussianAttack ;
14713: CALL 9793 0 0
// CenterOnXY ( 66 , 47 ) ;
14717: LD_INT 66
14719: PPUSH
14720: LD_INT 47
14722: PPUSH
14723: CALL_OW 84
// wait ( 0 0$5 ) ;
14727: LD_INT 175
14729: PPUSH
14730: CALL_OW 67
// case gammaCommander of 1 :
14734: LD_EXP 13
14738: PUSH
14739: LD_INT 1
14741: DOUBLE
14742: EQUAL
14743: IFTRUE 14747
14745: GO 14762
14747: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
14748: LD_EXP 16
14752: PPUSH
14753: LD_STRING D1-Don-1
14755: PPUSH
14756: CALL_OW 88
14760: GO 14809
14762: LD_INT 2
14764: DOUBLE
14765: EQUAL
14766: IFTRUE 14770
14768: GO 14785
14770: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
14771: LD_EXP 15
14775: PPUSH
14776: LD_STRING D1-Brown-1
14778: PPUSH
14779: CALL_OW 88
14783: GO 14809
14785: LD_INT 3
14787: DOUBLE
14788: EQUAL
14789: IFTRUE 14793
14791: GO 14808
14793: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
14794: LD_EXP 24
14798: PPUSH
14799: LD_STRING D1-VanH-1
14801: PPUSH
14802: CALL_OW 88
14806: GO 14809
14808: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
14809: LD_ADDR_VAR 0 3
14813: PUSH
14814: LD_INT 22
14816: PUSH
14817: LD_INT 1
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 33
14826: PUSH
14827: LD_INT 2
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 61
14836: PUSH
14837: EMPTY
14838: LIST
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: LIST
14844: PPUSH
14845: CALL_OW 69
14849: ST_TO_ADDR
// if tmp then
14850: LD_VAR 0 3
14854: IFFALSE 14871
// ComAgressiveMove ( tmp , 74 , 44 ) ;
14856: LD_VAR 0 3
14860: PPUSH
14861: LD_INT 74
14863: PPUSH
14864: LD_INT 44
14866: PPUSH
14867: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
14871: LD_ADDR_VAR 0 3
14875: PUSH
14876: LD_INT 22
14878: PUSH
14879: LD_INT 1
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: LD_INT 25
14888: PUSH
14889: LD_INT 1
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PPUSH
14900: CALL_OW 69
14904: PUSH
14905: LD_EXP 16
14909: PUSH
14910: LD_EXP 15
14914: PUSH
14915: LD_EXP 24
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: LIST
14924: DIFF
14925: ST_TO_ADDR
// if tmp then
14926: LD_VAR 0 3
14930: IFFALSE 15008
// for i in tmp do
14932: LD_ADDR_VAR 0 2
14936: PUSH
14937: LD_VAR 0 3
14941: PUSH
14942: FOR_IN
14943: IFFALSE 15006
// begin inUnit := IsInUnit ( i ) ;
14945: LD_ADDR_VAR 0 5
14949: PUSH
14950: LD_VAR 0 2
14954: PPUSH
14955: CALL_OW 310
14959: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
14960: LD_VAR 0 5
14964: PUSH
14965: LD_VAR 0 5
14969: PPUSH
14970: CALL_OW 266
14974: PUSH
14975: LD_INT 32
14977: PUSH
14978: LD_INT 31
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: IN
14985: AND
14986: IFFALSE 15004
// tmp := tmp diff i ;
14988: LD_ADDR_VAR 0 3
14992: PUSH
14993: LD_VAR 0 3
14997: PUSH
14998: LD_VAR 0 2
15002: DIFF
15003: ST_TO_ADDR
// end ;
15004: GO 14942
15006: POP
15007: POP
// if tmp then
15008: LD_VAR 0 3
15012: IFFALSE 15102
// begin ComExitAll ( tmp ) ;
15014: LD_VAR 0 3
15018: PPUSH
15019: CALL 77297 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
15023: LD_VAR 0 3
15027: PPUSH
15028: LD_INT 74
15030: PPUSH
15031: LD_INT 44
15033: PPUSH
15034: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
15038: LD_ADDR_VAR 0 3
15042: PUSH
15043: LD_INT 22
15045: PUSH
15046: LD_INT 1
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: LD_INT 25
15055: PUSH
15056: LD_INT 4
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PPUSH
15067: CALL_OW 69
15071: ST_TO_ADDR
// if tmp then
15072: LD_VAR 0 3
15076: IFFALSE 15102
// begin ComExitAll ( tmp ) ;
15078: LD_VAR 0 3
15082: PPUSH
15083: CALL 77297 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
15087: LD_VAR 0 3
15091: PPUSH
15092: LD_INT 66
15094: PPUSH
15095: LD_INT 28
15097: PPUSH
15098: CALL_OW 171
// end ; end ; game_speed := 4 ;
15102: LD_ADDR_OWVAR 65
15106: PUSH
15107: LD_INT 4
15109: ST_TO_ADDR
// wait ( 0 0$2 ) ;
15110: LD_INT 70
15112: PPUSH
15113: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
15117: LD_EXP 28
15121: PPUSH
15122: LD_STRING D1-Har-1
15124: PPUSH
15125: CALL_OW 94
// case gammaCommander of 1 :
15129: LD_EXP 13
15133: PUSH
15134: LD_INT 1
15136: DOUBLE
15137: EQUAL
15138: IFTRUE 15142
15140: GO 15157
15142: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
15143: LD_EXP 16
15147: PPUSH
15148: LD_STRING D1-Don-2
15150: PPUSH
15151: CALL_OW 88
15155: GO 15204
15157: LD_INT 2
15159: DOUBLE
15160: EQUAL
15161: IFTRUE 15165
15163: GO 15180
15165: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
15166: LD_EXP 15
15170: PPUSH
15171: LD_STRING D1-Brown-2
15173: PPUSH
15174: CALL_OW 88
15178: GO 15204
15180: LD_INT 3
15182: DOUBLE
15183: EQUAL
15184: IFTRUE 15188
15186: GO 15203
15188: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
15189: LD_EXP 24
15193: PPUSH
15194: LD_STRING D1-VanH-2
15196: PPUSH
15197: CALL_OW 88
15201: GO 15204
15203: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
15204: LD_EXP 28
15208: PPUSH
15209: LD_STRING D1-Har-2
15211: PPUSH
15212: CALL_OW 94
// invincibleMode := false ;
15216: LD_ADDR_EXP 5
15220: PUSH
15221: LD_INT 0
15223: ST_TO_ADDR
// Video ( false ) ;
15224: LD_INT 0
15226: PPUSH
15227: CALL 76788 0 1
// ChangeMissionObjectives ( M1 ) ;
15231: LD_STRING M1
15233: PPUSH
15234: CALL_OW 337
// SaveForQuickRestart ;
15238: CALL_OW 22
// wait ( 2 2$30 ) ;
15242: LD_INT 5250
15244: PPUSH
15245: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
15249: LD_INT 1
15251: PPUSH
15252: CALL 12026 0 1
// wait ( 4 4$30 ) ;
15256: LD_INT 9450
15258: PPUSH
15259: CALL_OW 67
// if Difficulty > 1 then
15263: LD_OWVAR 67
15267: PUSH
15268: LD_INT 1
15270: GREATER
15271: IFFALSE 15280
// PrepareRussianAttack ( 2 ) ;
15273: LD_INT 2
15275: PPUSH
15276: CALL 12026 0 1
// if Difficulty > 2 then
15280: LD_OWVAR 67
15284: PUSH
15285: LD_INT 2
15287: GREATER
15288: IFFALSE 15447
// begin for i := 1 to 4 do
15290: LD_ADDR_VAR 0 2
15294: PUSH
15295: DOUBLE
15296: LD_INT 1
15298: DEC
15299: ST_TO_ADDR
15300: LD_INT 4
15302: PUSH
15303: FOR_TO
15304: IFFALSE 15389
// begin uc_side := 6 ;
15306: LD_ADDR_OWVAR 20
15310: PUSH
15311: LD_INT 6
15313: ST_TO_ADDR
// uc_nation := 3 ;
15314: LD_ADDR_OWVAR 21
15318: PUSH
15319: LD_INT 3
15321: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
15322: LD_INT 0
15324: PPUSH
15325: LD_INT 7
15327: PPUSH
15328: CALL_OW 381
// un := CreateHuman ;
15332: LD_ADDR_VAR 0 4
15336: PUSH
15337: CALL_OW 44
15341: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
15342: LD_VAR 0 4
15346: PPUSH
15347: LD_INT 122
15349: PPUSH
15350: LD_INT 89
15352: PPUSH
15353: LD_INT 3
15355: PPUSH
15356: LD_INT 0
15358: PPUSH
15359: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
15363: LD_VAR 0 4
15367: PPUSH
15368: LD_INT 88
15370: PPUSH
15371: LD_INT 42
15373: PPUSH
15374: CALL_OW 114
// AddComHold ( un ) ;
15378: LD_VAR 0 4
15382: PPUSH
15383: CALL_OW 200
// end ;
15387: GO 15303
15389: POP
15390: POP
// PrepareScientist ( false , 6 ) ;
15391: LD_INT 0
15393: PPUSH
15394: LD_INT 6
15396: PPUSH
15397: CALL_OW 384
// un := CreateHuman ;
15401: LD_ADDR_VAR 0 4
15405: PUSH
15406: CALL_OW 44
15410: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
15411: LD_VAR 0 4
15415: PPUSH
15416: LD_INT 122
15418: PPUSH
15419: LD_INT 89
15421: PPUSH
15422: LD_INT 3
15424: PPUSH
15425: LD_INT 0
15427: PPUSH
15428: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
15432: LD_VAR 0 4
15436: PPUSH
15437: LD_INT 91
15439: PPUSH
15440: LD_INT 48
15442: PPUSH
15443: CALL_OW 111
// end ; end ;
15447: LD_VAR 0 1
15451: RET
// every 0 0$1 trigger invincibleMode do var i ;
15452: LD_EXP 5
15456: IFFALSE 15535
15458: GO 15460
15460: DISABLE
15461: LD_INT 0
15463: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15464: LD_ADDR_VAR 0 1
15468: PUSH
15469: LD_INT 22
15471: PUSH
15472: LD_INT 1
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PUSH
15479: LD_INT 21
15481: PUSH
15482: LD_INT 1
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: LD_INT 3
15491: PUSH
15492: LD_INT 24
15494: PUSH
15495: LD_INT 1000
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: PPUSH
15511: CALL_OW 69
15515: PUSH
15516: FOR_IN
15517: IFFALSE 15533
// SetLives ( i , 1000 ) ;
15519: LD_VAR 0 1
15523: PPUSH
15524: LD_INT 1000
15526: PPUSH
15527: CALL_OW 234
15531: GO 15516
15533: POP
15534: POP
// end ;
15535: PPOPN 1
15537: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
15538: LD_OWVAR 1
15542: PUSH
15543: LD_INT 14700
15545: GREATER
15546: IFFALSE 17156
15548: GO 15550
15550: DISABLE
15551: LD_INT 0
15553: PPUSH
15554: PPUSH
// begin PrepareSupportFromDelta ;
15555: CALL 4126 0 0
// deltaSupport := true ;
15559: LD_ADDR_EXP 6
15563: PUSH
15564: LD_INT 1
15566: ST_TO_ADDR
// dialog := false ;
15567: LD_ADDR_VAR 0 1
15571: PUSH
15572: LD_INT 0
15574: ST_TO_ADDR
// if IsOk ( Gladstone ) then
15575: LD_EXP 21
15579: PPUSH
15580: CALL_OW 302
15584: IFFALSE 15606
// dialog := Say ( Gladstone , D2-Glad-1 ) else
15586: LD_ADDR_VAR 0 1
15590: PUSH
15591: LD_EXP 21
15595: PPUSH
15596: LD_STRING D2-Glad-1
15598: PPUSH
15599: CALL_OW 88
15603: ST_TO_ADDR
15604: GO 15688
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
15606: LD_ADDR_VAR 0 1
15610: PUSH
15611: LD_INT 22
15613: PUSH
15614: LD_INT 1
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 120
15623: PUSH
15624: LD_INT 107
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 21
15633: PUSH
15634: LD_INT 1
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 23
15643: PUSH
15644: LD_INT 1
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: PPUSH
15657: CALL_OW 69
15661: PUSH
15662: LD_EXP 26
15666: PUSH
15667: LD_EXP 25
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: DIFF
15676: PPUSH
15677: LD_STRING D2-Sol1-1
15679: PPUSH
15680: LD_STRING D2-FSol1-1
15682: PPUSH
15683: CALL 19286 0 3
15687: ST_TO_ADDR
// if dialog then
15688: LD_VAR 0 1
15692: IFFALSE 15793
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
15694: LD_EXP 16
15698: PPUSH
15699: CALL_OW 302
15703: PUSH
15704: LD_EXP 13
15708: PUSH
15709: LD_INT 1
15711: EQUAL
15712: AND
15713: IFFALSE 15727
// Say ( Donaldson , D2-Don-1 ) ;
15715: LD_EXP 16
15719: PPUSH
15720: LD_STRING D2-Don-1
15722: PPUSH
15723: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
15727: LD_EXP 15
15731: PPUSH
15732: CALL_OW 302
15736: PUSH
15737: LD_EXP 13
15741: PUSH
15742: LD_INT 2
15744: EQUAL
15745: AND
15746: IFFALSE 15760
// Say ( Brown , D2-Brown-1 ) ;
15748: LD_EXP 15
15752: PPUSH
15753: LD_STRING D2-Brown-1
15755: PPUSH
15756: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
15760: LD_EXP 24
15764: PPUSH
15765: CALL_OW 302
15769: PUSH
15770: LD_EXP 13
15774: PUSH
15775: LD_INT 3
15777: EQUAL
15778: AND
15779: IFFALSE 15793
// Say ( Houten , D2-VanH-1 ) ;
15781: LD_EXP 24
15785: PPUSH
15786: LD_STRING D2-VanH-1
15788: PPUSH
15789: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
15793: LD_INT 3
15795: PPUSH
15796: CALL 12026 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
15800: LD_STRING 07_time
15802: PPUSH
15803: LD_INT 18900
15805: PPUSH
15806: CALL_OW 30
15810: PUSH
15811: LD_INT 3
15813: DIV
15814: PPUSH
15815: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
15819: LD_INT 34
15821: PPUSH
15822: LD_INT 1
15824: PPUSH
15825: CALL_OW 321
15829: PUSH
15830: LD_INT 2
15832: EQUAL
15833: IFFALSE 15842
// SetAchievement ( ACH_HEAVYGUN ) ;
15835: LD_STRING ACH_HEAVYGUN
15837: PPUSH
15838: CALL_OW 543
// PrepareMacmillanSquad ;
15842: CALL 4863 0 0
// wait ( 0 0$1 ) ;
15846: LD_INT 35
15848: PPUSH
15849: CALL_OW 67
// DialogueOn ;
15853: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
15857: LD_EXP 14
15861: PPUSH
15862: CALL_OW 87
// dwait ( 0 0$2 ) ;
15866: LD_INT 70
15868: PPUSH
15869: CALL_OW 68
// DialogueOff ;
15873: CALL_OW 7
// wait ( 0 0$10 ) ;
15877: LD_INT 350
15879: PPUSH
15880: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
15884: LD_INT 1
15886: PPUSH
15887: CALL_OW 427
// p := 0 ;
15891: LD_ADDR_VAR 0 2
15895: PUSH
15896: LD_INT 0
15898: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15899: LD_INT 35
15901: PPUSH
15902: CALL_OW 67
// p := Inc ( p ) ;
15906: LD_ADDR_VAR 0 2
15910: PUSH
15911: LD_VAR 0 2
15915: PPUSH
15916: CALL 78177 0 1
15920: ST_TO_ADDR
// if p > 120 then
15921: LD_VAR 0 2
15925: PUSH
15926: LD_INT 120
15928: GREATER
15929: IFFALSE 15933
// exit ;
15931: GO 17156
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
15933: LD_EXP 14
15937: PPUSH
15938: LD_INT 15
15940: PPUSH
15941: CALL_OW 308
15945: PUSH
15946: LD_EXP 14
15950: PPUSH
15951: CALL_OW 310
15955: PPUSH
15956: LD_INT 15
15958: PPUSH
15959: CALL_OW 308
15963: OR
15964: PUSH
15965: LD_EXP 14
15969: PPUSH
15970: LD_EXP 26
15974: PPUSH
15975: CALL_OW 296
15979: PUSH
15980: LD_INT 10
15982: LESS
15983: OR
15984: PUSH
15985: LD_INT 22
15987: PUSH
15988: LD_INT 1
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 2
15997: PUSH
15998: LD_INT 120
16000: PUSH
16001: LD_INT 106
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: LD_INT 120
16010: PUSH
16011: LD_INT 107
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: LIST
16022: PUSH
16023: LD_INT 91
16025: PUSH
16026: LD_EXP 14
16030: PUSH
16031: LD_INT 12
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: LIST
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: LIST
16043: PPUSH
16044: CALL_OW 69
16048: OR
16049: IFFALSE 15899
// DialogueOn ;
16051: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
16055: LD_EXP 14
16059: PPUSH
16060: LD_STRING D3-JMM-1
16062: PPUSH
16063: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16067: LD_EXP 16
16071: PPUSH
16072: CALL_OW 302
16076: PUSH
16077: LD_EXP 13
16081: PUSH
16082: LD_INT 1
16084: EQUAL
16085: AND
16086: IFFALSE 16102
// Say ( Donaldson , D3-Don-1 ) else
16088: LD_EXP 16
16092: PPUSH
16093: LD_STRING D3-Don-1
16095: PPUSH
16096: CALL_OW 88
16100: GO 16198
// begin if gammaCommander = 1 then
16102: LD_EXP 13
16106: PUSH
16107: LD_INT 1
16109: EQUAL
16110: IFFALSE 16198
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
16112: LD_INT 22
16114: PUSH
16115: LD_INT 1
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 21
16124: PUSH
16125: LD_INT 1
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: LD_INT 23
16134: PUSH
16135: LD_INT 1
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 120
16144: PUSH
16145: LD_INT 106
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 26
16154: PUSH
16155: LD_INT 1
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: PPUSH
16169: CALL_OW 69
16173: PPUSH
16174: LD_STRING D3-Sol1-1
16176: PPUSH
16177: LD_STRING 
16179: PPUSH
16180: CALL 19286 0 3
16184: IFFALSE 16198
// Say ( JMM , D3-JMM-2 ) ;
16186: LD_EXP 14
16190: PPUSH
16191: LD_STRING D3-JMM-2
16193: PPUSH
16194: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
16198: LD_EXP 15
16202: PPUSH
16203: CALL_OW 302
16207: PUSH
16208: LD_EXP 13
16212: PUSH
16213: LD_INT 2
16215: EQUAL
16216: AND
16217: IFFALSE 16233
// Say ( Brown , D3-Brown-1 ) else
16219: LD_EXP 15
16223: PPUSH
16224: LD_STRING D3-Brown-1
16226: PPUSH
16227: CALL_OW 88
16231: GO 16329
// begin if gammaCommander = 2 then
16233: LD_EXP 13
16237: PUSH
16238: LD_INT 2
16240: EQUAL
16241: IFFALSE 16329
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
16243: LD_INT 22
16245: PUSH
16246: LD_INT 1
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: PUSH
16253: LD_INT 21
16255: PUSH
16256: LD_INT 1
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PUSH
16263: LD_INT 23
16265: PUSH
16266: LD_INT 1
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: PUSH
16273: LD_INT 120
16275: PUSH
16276: LD_INT 106
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: PUSH
16283: LD_INT 26
16285: PUSH
16286: LD_INT 1
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: PPUSH
16300: CALL_OW 69
16304: PPUSH
16305: LD_STRING D3-Sol1-1a
16307: PPUSH
16308: LD_STRING 
16310: PPUSH
16311: CALL 19286 0 3
16315: IFFALSE 16329
// Say ( JMM , D3-JMM-2 ) ;
16317: LD_EXP 14
16321: PPUSH
16322: LD_STRING D3-JMM-2
16324: PPUSH
16325: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
16329: LD_EXP 24
16333: PPUSH
16334: CALL_OW 302
16338: PUSH
16339: LD_EXP 13
16343: PUSH
16344: LD_INT 3
16346: EQUAL
16347: AND
16348: IFFALSE 16364
// Say ( Houten , D3-VanH-1 ) else
16350: LD_EXP 24
16354: PPUSH
16355: LD_STRING D3-VanH-1
16357: PPUSH
16358: CALL_OW 88
16362: GO 16460
// begin if gammaCommander = 3 then
16364: LD_EXP 13
16368: PUSH
16369: LD_INT 3
16371: EQUAL
16372: IFFALSE 16460
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
16374: LD_INT 22
16376: PUSH
16377: LD_INT 1
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 21
16386: PUSH
16387: LD_INT 1
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 23
16396: PUSH
16397: LD_INT 1
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 120
16406: PUSH
16407: LD_INT 106
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: PUSH
16414: LD_INT 26
16416: PUSH
16417: LD_INT 1
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: PPUSH
16431: CALL_OW 69
16435: PPUSH
16436: LD_STRING D3-Sol1-1b
16438: PPUSH
16439: LD_STRING 
16441: PPUSH
16442: CALL 19286 0 3
16446: IFFALSE 16460
// Say ( JMM , D3-JMM-2 ) ;
16448: LD_EXP 14
16452: PPUSH
16453: LD_STRING D3-JMM-2
16455: PPUSH
16456: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
16460: LD_EXP 26
16464: PPUSH
16465: CALL_OW 302
16469: IFFALSE 16497
// begin Say ( Joan , D3a-Joan-1 ) ;
16471: LD_EXP 26
16475: PPUSH
16476: LD_STRING D3a-Joan-1
16478: PPUSH
16479: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
16483: LD_EXP 14
16487: PPUSH
16488: LD_STRING D3a-JMM-1
16490: PPUSH
16491: CALL_OW 88
// end else
16495: GO 16931
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
16497: LD_STRING 06_JoanStatus_1
16499: PPUSH
16500: LD_INT 0
16502: PPUSH
16503: CALL_OW 30
16507: PUSH
16508: LD_INT 1
16510: EQUAL
16511: IFFALSE 16931
// begin Say ( JMM , D3b-JMM-1 ) ;
16513: LD_EXP 14
16517: PPUSH
16518: LD_STRING D3b-JMM-1
16520: PPUSH
16521: CALL_OW 88
// dialog := false ;
16525: LD_ADDR_VAR 0 1
16529: PUSH
16530: LD_INT 0
16532: ST_TO_ADDR
// if gammaCommander = 1 then
16533: LD_EXP 13
16537: PUSH
16538: LD_INT 1
16540: EQUAL
16541: IFFALSE 16652
// if IsOK ( Donaldson ) then
16543: LD_EXP 16
16547: PPUSH
16548: CALL_OW 302
16552: IFFALSE 16574
// dialog := Say ( Donaldson , D3b-Don-1 ) else
16554: LD_ADDR_VAR 0 1
16558: PUSH
16559: LD_EXP 16
16563: PPUSH
16564: LD_STRING D3b-Don-1
16566: PPUSH
16567: CALL_OW 88
16571: ST_TO_ADDR
16572: GO 16652
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
16574: LD_ADDR_VAR 0 1
16578: PUSH
16579: LD_INT 22
16581: PUSH
16582: LD_INT 1
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: LD_INT 21
16591: PUSH
16592: LD_INT 1
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PUSH
16599: LD_INT 23
16601: PUSH
16602: LD_INT 1
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: LD_INT 120
16611: PUSH
16612: LD_INT 106
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 26
16621: PUSH
16622: LD_INT 1
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: PPUSH
16636: CALL_OW 69
16640: PPUSH
16641: LD_STRING D3b-Sol1-1
16643: PPUSH
16644: LD_STRING 
16646: PPUSH
16647: CALL 19286 0 3
16651: ST_TO_ADDR
// if gammaCommander = 2 then
16652: LD_EXP 13
16656: PUSH
16657: LD_INT 2
16659: EQUAL
16660: IFFALSE 16771
// if IsOk ( Brown ) then
16662: LD_EXP 15
16666: PPUSH
16667: CALL_OW 302
16671: IFFALSE 16693
// dialog := Say ( Brown , D3b-Brown-1 ) else
16673: LD_ADDR_VAR 0 1
16677: PUSH
16678: LD_EXP 15
16682: PPUSH
16683: LD_STRING D3b-Brown-1
16685: PPUSH
16686: CALL_OW 88
16690: ST_TO_ADDR
16691: GO 16771
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
16693: LD_ADDR_VAR 0 1
16697: PUSH
16698: LD_INT 22
16700: PUSH
16701: LD_INT 1
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: LD_INT 21
16710: PUSH
16711: LD_INT 1
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PUSH
16718: LD_INT 23
16720: PUSH
16721: LD_INT 1
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 120
16730: PUSH
16731: LD_INT 106
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 26
16740: PUSH
16741: LD_INT 1
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: PPUSH
16755: CALL_OW 69
16759: PPUSH
16760: LD_STRING D3b-Sol1-1
16762: PPUSH
16763: LD_STRING 
16765: PPUSH
16766: CALL 19286 0 3
16770: ST_TO_ADDR
// if gammaCommander = 3 then
16771: LD_EXP 13
16775: PUSH
16776: LD_INT 3
16778: EQUAL
16779: IFFALSE 16890
// if IsOk ( Houten ) then
16781: LD_EXP 24
16785: PPUSH
16786: CALL_OW 302
16790: IFFALSE 16812
// dialog := Say ( Houten , D3b-VanH-1 ) else
16792: LD_ADDR_VAR 0 1
16796: PUSH
16797: LD_EXP 24
16801: PPUSH
16802: LD_STRING D3b-VanH-1
16804: PPUSH
16805: CALL_OW 88
16809: ST_TO_ADDR
16810: GO 16890
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
16812: LD_ADDR_VAR 0 1
16816: PUSH
16817: LD_INT 22
16819: PUSH
16820: LD_INT 1
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 21
16829: PUSH
16830: LD_INT 1
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: LD_INT 23
16839: PUSH
16840: LD_INT 1
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 120
16849: PUSH
16850: LD_INT 106
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 26
16859: PUSH
16860: LD_INT 1
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: PPUSH
16874: CALL_OW 69
16878: PPUSH
16879: LD_STRING D3b-Sol1-1
16881: PPUSH
16882: LD_STRING 
16884: PPUSH
16885: CALL 19286 0 3
16889: ST_TO_ADDR
// if dialog then
16890: LD_VAR 0 1
16894: IFFALSE 16931
// begin Say ( JMM , D3b-JMM-2 ) ;
16896: LD_EXP 14
16900: PPUSH
16901: LD_STRING D3b-JMM-2
16903: PPUSH
16904: CALL_OW 88
// if IsOK ( Lisa ) then
16908: LD_EXP 19
16912: PPUSH
16913: CALL_OW 302
16917: IFFALSE 16931
// Say ( Lisa , D3b-Lisa-2 ) ;
16919: LD_EXP 19
16923: PPUSH
16924: LD_STRING D3b-Lisa-2
16926: PPUSH
16927: CALL_OW 88
// end ; end ; end ; if not seenComputer then
16931: LD_EXP 7
16935: NOT
16936: IFFALSE 16944
// begin DialogueOff ;
16938: CALL_OW 7
// exit ;
16942: GO 17156
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
16944: LD_INT 22
16946: PUSH
16947: LD_INT 1
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 21
16956: PUSH
16957: LD_INT 1
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 23
16966: PUSH
16967: LD_INT 1
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 2
16976: PUSH
16977: LD_INT 120
16979: PUSH
16980: LD_INT 106
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: LD_INT 120
16989: PUSH
16990: LD_INT 107
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 26
17004: PUSH
17005: LD_INT 1
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: PPUSH
17019: CALL_OW 69
17023: PPUSH
17024: LD_STRING DCa-Sol1-1
17026: PPUSH
17027: LD_STRING 
17029: PPUSH
17030: CALL 19286 0 3
17034: IFFALSE 17048
// Say ( JMM , DCb-JMM-1 ) ;
17036: LD_EXP 14
17040: PPUSH
17041: LD_STRING DCb-JMM-1
17043: PPUSH
17044: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
17048: LD_INT 22
17050: PUSH
17051: LD_INT 1
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 21
17060: PUSH
17061: LD_INT 1
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 23
17070: PUSH
17071: LD_INT 1
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 2
17080: PUSH
17081: LD_INT 120
17083: PUSH
17084: LD_INT 106
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: LD_INT 120
17093: PUSH
17094: LD_INT 107
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: LIST
17105: PUSH
17106: LD_INT 26
17108: PUSH
17109: LD_INT 1
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: PPUSH
17123: CALL_OW 69
17127: PPUSH
17128: LD_STRING DCb-Sol1-1
17130: PPUSH
17131: LD_STRING 
17133: PPUSH
17134: CALL 19286 0 3
17138: IFFALSE 17152
// Say ( JMM , DCb-JMM-2 ) ;
17140: LD_EXP 14
17144: PPUSH
17145: LD_STRING DCb-JMM-2
17147: PPUSH
17148: CALL_OW 88
// DialogueOff ;
17152: CALL_OW 7
// end ;
17156: PPOPN 2
17158: END
// export function DialogSeenComputer ( un ) ; begin
17159: LD_INT 0
17161: PPUSH
// if jmmArrival then
17162: LD_EXP 8
17166: IFFALSE 17170
// exit ;
17168: GO 17236
// CenterOnUnits ( un ) ;
17170: LD_VAR 0 1
17174: PPUSH
17175: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
17179: LD_INT 22
17181: PUSH
17182: LD_INT 1
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 2
17191: PUSH
17192: LD_INT 120
17194: PUSH
17195: LD_INT 106
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 120
17204: PUSH
17205: LD_INT 107
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: LIST
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PPUSH
17221: CALL_OW 69
17225: PPUSH
17226: LD_STRING DC-Sol1-1
17228: PPUSH
17229: LD_STRING DC-FSol1-1
17231: PPUSH
17232: CALL 19286 0 3
// end ;
17236: LD_VAR 0 2
17240: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
17241: LD_EXP 8
17245: PUSH
17246: LD_OWVAR 1
17250: PUSH
17251: LD_INT 48300
17253: GREATEREQUAL
17254: AND
17255: PUSH
17256: LD_EXP 14
17260: PPUSH
17261: CALL_OW 302
17265: AND
17266: IFFALSE 17729
17268: GO 17270
17270: DISABLE
// begin wait ( 2 2$00 ) ;
17271: LD_INT 4200
17273: PPUSH
17274: CALL_OW 67
// DialogueOn ;
17278: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
17282: LD_EXP 29
17286: PPUSH
17287: LD_STRING D4-Pow-1
17289: PPUSH
17290: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
17294: LD_EXP 14
17298: PPUSH
17299: LD_STRING D4-JMM-1
17301: PPUSH
17302: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
17306: LD_EXP 29
17310: PPUSH
17311: LD_STRING D4-Pow-2
17313: PPUSH
17314: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
17318: LD_EXP 14
17322: PPUSH
17323: LD_STRING D4-JMM-2
17325: PPUSH
17326: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
17330: LD_EXP 29
17334: PPUSH
17335: LD_STRING D4-Pow-3
17337: PPUSH
17338: CALL_OW 94
// DialogueOff ;
17342: CALL_OW 7
// wait ( 1 1$00 ) ;
17346: LD_INT 2100
17348: PPUSH
17349: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
17353: LD_INT 1
17355: PPUSH
17356: CALL_OW 427
// wait ( 7 7$30 ) ;
17360: LD_INT 15750
17362: PPUSH
17363: CALL_OW 67
// DialogueOn ;
17367: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
17371: LD_EXP 29
17375: PPUSH
17376: LD_STRING D4a-Pow-1
17378: PPUSH
17379: CALL_OW 94
// DialogueOff ;
17383: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
17387: LD_INT 1
17389: PPUSH
17390: CALL_OW 427
// SikorskiCounter ;
17394: CALL 19070 0 0
// PrepareSikorsky ;
17398: CALL 6285 0 0
// CenterNowOnUnits ( Sikorski ) ;
17402: LD_EXP 27
17406: PPUSH
17407: CALL_OW 87
// DialogueOn ;
17411: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
17415: LD_EXP 27
17419: PPUSH
17420: LD_STRING D5-Sik-1
17422: PPUSH
17423: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 then
17427: LD_INT 11
17429: PPUSH
17430: LD_INT 22
17432: PUSH
17433: LD_INT 1
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PPUSH
17440: CALL_OW 70
17444: PUSH
17445: LD_INT 1
17447: GREATER
17448: IFFALSE 17500
// begin Say ( JMM , D5-JMM-1 ) ;
17450: LD_EXP 14
17454: PPUSH
17455: LD_STRING D5-JMM-1
17457: PPUSH
17458: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
17462: LD_EXP 27
17466: PPUSH
17467: LD_STRING D7a-Sik-1
17469: PPUSH
17470: CALL_OW 88
// DialogueOff ;
17474: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
17478: LD_STRING M2
17480: PPUSH
17481: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
17485: LD_INT 1
17487: PPUSH
17488: CALL_OW 427
// SikorskiAttack ;
17492: CALL 7633 0 0
// exit ;
17496: GO 17729
// end else
17498: GO 17545
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
17500: LD_INT 15
17502: PPUSH
17503: LD_INT 81
17505: PUSH
17506: LD_INT 1
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PPUSH
17513: CALL_OW 70
17517: IFFALSE 17533
// Say ( JMM , D5-JMM-1b ) else
17519: LD_EXP 14
17523: PPUSH
17524: LD_STRING D5-JMM-1b
17526: PPUSH
17527: CALL_OW 88
17531: GO 17545
// Say ( JMM , D5-JMM-1a ) ;
17533: LD_EXP 14
17537: PPUSH
17538: LD_STRING D5-JMM-1a
17540: PPUSH
17541: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
17545: LD_EXP 27
17549: PPUSH
17550: LD_STRING D5-Sik-2
17552: PPUSH
17553: CALL_OW 88
// case Query ( QSikorski ) of 1 :
17557: LD_STRING QSikorski
17559: PPUSH
17560: CALL_OW 97
17564: PUSH
17565: LD_INT 1
17567: DOUBLE
17568: EQUAL
17569: IFTRUE 17573
17571: GO 17596
17573: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
17574: LD_EXP 27
17578: PPUSH
17579: LD_STRING D5a-Sik-1
17581: PPUSH
17582: CALL_OW 88
// sikorskiWait := 1 1$00 ;
17586: LD_ADDR_EXP 4
17590: PUSH
17591: LD_INT 2100
17593: ST_TO_ADDR
// end ; 2 :
17594: GO 17683
17596: LD_INT 2
17598: DOUBLE
17599: EQUAL
17600: IFTRUE 17604
17602: GO 17627
17604: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
17605: LD_EXP 27
17609: PPUSH
17610: LD_STRING D5b-Sik-1
17612: PPUSH
17613: CALL_OW 88
// sikorskiWait := 5 5$00 ;
17617: LD_ADDR_EXP 4
17621: PUSH
17622: LD_INT 10500
17624: ST_TO_ADDR
// end ; 3 :
17625: GO 17683
17627: LD_INT 3
17629: DOUBLE
17630: EQUAL
17631: IFTRUE 17635
17633: GO 17682
17635: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
17636: LD_EXP 27
17640: PPUSH
17641: LD_STRING D5c-Sik-1
17643: PPUSH
17644: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
17648: LD_EXP 14
17652: PPUSH
17653: LD_STRING D5c-JMM-1
17655: PPUSH
17656: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
17660: LD_EXP 27
17664: PPUSH
17665: LD_STRING D5c-Sik-2
17667: PPUSH
17668: CALL_OW 88
// sikorskiWait := 5 5$00 ;
17672: LD_ADDR_EXP 4
17676: PUSH
17677: LD_INT 10500
17679: ST_TO_ADDR
// end ; end ;
17680: GO 17683
17682: POP
// DialogueOff ;
17683: CALL_OW 7
// SikorskiWaitCounter ;
17687: CALL 19133 0 0
// DialogueOn ;
17691: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
17695: LD_EXP 27
17699: PPUSH
17700: LD_STRING D6-Sik-1
17702: PPUSH
17703: CALL_OW 88
// DialogueOff ;
17707: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
17711: LD_STRING M2
17713: PPUSH
17714: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
17718: LD_INT 1
17720: PPUSH
17721: CALL_OW 427
// SikorskiAttack ;
17725: CALL 7633 0 0
// end ;
17729: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
17730: LD_INT 11
17732: PPUSH
17733: LD_INT 22
17735: PUSH
17736: LD_INT 4
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PPUSH
17743: CALL_OW 70
17747: PUSH
17748: LD_INT 2
17750: GREATER
17751: IFFALSE 17944
17753: GO 17755
17755: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
17756: LD_EXP 27
17760: PPUSH
17761: LD_STRING D7-Sik-1
17763: PPUSH
17764: CALL_OW 88
// wait ( 0 0$10 ) ;
17768: LD_INT 350
17770: PPUSH
17771: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
17775: LD_EXP 14
17779: PPUSH
17780: LD_INT 11
17782: PPUSH
17783: CALL_OW 308
17787: PUSH
17788: LD_EXP 14
17792: PPUSH
17793: CALL_OW 310
17797: PPUSH
17798: LD_INT 11
17800: PPUSH
17801: CALL_OW 308
17805: OR
17806: IFFALSE 17830
// begin Say ( Sikorski , D7a-Sik-1 ) ;
17808: LD_EXP 27
17812: PPUSH
17813: LD_STRING D7a-Sik-1
17815: PPUSH
17816: CALL_OW 88
// sikorskiStatus := 1 ;
17820: LD_ADDR_EXP 9
17824: PUSH
17825: LD_INT 1
17827: ST_TO_ADDR
// end else
17828: GO 17850
// begin Say ( Sikorski , D7b-Sik-1 ) ;
17830: LD_EXP 27
17834: PPUSH
17835: LD_STRING D7b-Sik-1
17837: PPUSH
17838: CALL_OW 88
// sikorskiStatus := 0 ;
17842: LD_ADDR_EXP 9
17846: PUSH
17847: LD_INT 0
17849: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
17850: LD_INT 1575
17852: PPUSH
17853: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
17857: LD_EXP 14
17861: PPUSH
17862: LD_INT 11
17864: PPUSH
17865: CALL_OW 308
17869: PUSH
17870: LD_EXP 14
17874: PPUSH
17875: CALL_OW 310
17879: PPUSH
17880: LD_INT 11
17882: PPUSH
17883: CALL_OW 308
17887: OR
17888: PUSH
17889: LD_EXP 14
17893: PPUSH
17894: CALL_OW 302
17898: NOT
17899: OR
17900: IFFALSE 17924
// begin Say ( Sikorski , D7a-Sik-1 ) ;
17902: LD_EXP 27
17906: PPUSH
17907: LD_STRING D7a-Sik-1
17909: PPUSH
17910: CALL_OW 88
// sikorskiStatus := 1 ;
17914: LD_ADDR_EXP 9
17918: PUSH
17919: LD_INT 1
17921: ST_TO_ADDR
// end else
17922: GO 17944
// begin Say ( Sikorski , D7b-Sik-1 ) ;
17924: LD_EXP 27
17928: PPUSH
17929: LD_STRING D7b-Sik-1
17931: PPUSH
17932: CALL_OW 88
// sikorskiStatus := 0 ;
17936: LD_ADDR_EXP 9
17940: PUSH
17941: LD_INT 0
17943: ST_TO_ADDR
// end ; end ;
17944: END
// export function SikorskiKilledInAction ; begin
17945: LD_INT 0
17947: PPUSH
// wait ( 0 0$2 ) ;
17948: LD_INT 70
17950: PPUSH
17951: CALL_OW 67
// DialogueOn ;
17955: CALL_OW 6
// dwait ( 0 0$1 ) ;
17959: LD_INT 35
17961: PPUSH
17962: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
17966: LD_EXP 29
17970: PPUSH
17971: LD_STRING D8b-Pow-1
17973: PPUSH
17974: CALL_OW 94
// YouLost ( Dismissed ) ;
17978: LD_STRING Dismissed
17980: PPUSH
17981: CALL_OW 104
// DialogueOff ;
17985: CALL_OW 7
// end ;
17989: LD_VAR 0 1
17993: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
17994: LD_EXP 8
17998: PUSH
17999: LD_INT 28
18001: PPUSH
18002: CALL_OW 301
18006: AND
18007: PUSH
18008: LD_EXP 31
18012: PPUSH
18013: CALL_OW 301
18017: AND
18018: PUSH
18019: LD_INT 22
18021: PUSH
18022: LD_INT 3
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 50
18031: PUSH
18032: EMPTY
18033: LIST
18034: PUSH
18035: LD_INT 30
18037: PUSH
18038: LD_INT 5
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: LIST
18049: PPUSH
18050: CALL_OW 69
18054: PUSH
18055: LD_INT 0
18057: EQUAL
18058: AND
18059: IFFALSE 19067
18061: GO 18063
18063: DISABLE
18064: LD_INT 0
18066: PPUSH
18067: PPUSH
18068: PPUSH
// begin Video ( true ) ;
18069: LD_INT 1
18071: PPUSH
18072: CALL 76788 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
18076: LD_INT 104
18078: PPUSH
18079: LD_INT 108
18081: PPUSH
18082: LD_INT 1
18084: PPUSH
18085: LD_INT 36
18087: NEG
18088: PPUSH
18089: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
18093: LD_INT 104
18095: PPUSH
18096: LD_INT 108
18098: PPUSH
18099: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
18103: LD_ADDR_VAR 0 2
18107: PUSH
18108: LD_INT 22
18110: PUSH
18111: LD_INT 1
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 21
18120: PUSH
18121: LD_INT 1
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 3
18130: PUSH
18131: LD_INT 24
18133: PUSH
18134: LD_INT 249
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: LIST
18149: PPUSH
18150: CALL_OW 69
18154: ST_TO_ADDR
// if tmp then
18155: LD_VAR 0 2
18159: IFFALSE 18190
// for i in tmp do
18161: LD_ADDR_VAR 0 1
18165: PUSH
18166: LD_VAR 0 2
18170: PUSH
18171: FOR_IN
18172: IFFALSE 18188
// SetLives ( i , 249 ) ;
18174: LD_VAR 0 1
18178: PPUSH
18179: LD_INT 249
18181: PPUSH
18182: CALL_OW 234
18186: GO 18171
18188: POP
18189: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18190: LD_ADDR_VAR 0 1
18194: PUSH
18195: LD_INT 22
18197: PUSH
18198: LD_INT 3
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 21
18207: PUSH
18208: LD_INT 1
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PPUSH
18219: CALL_OW 69
18223: PUSH
18224: FOR_IN
18225: IFFALSE 18268
// begin ComExit ( i ) ;
18227: LD_VAR 0 1
18231: PPUSH
18232: CALL 77214 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
18236: LD_VAR 0 1
18240: PPUSH
18241: LD_INT 131
18243: PPUSH
18244: LD_INT 127
18246: PPUSH
18247: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
18251: LD_VAR 0 1
18255: PPUSH
18256: LD_INT 141
18258: PPUSH
18259: LD_INT 147
18261: PPUSH
18262: CALL_OW 171
// end ;
18266: GO 18224
18268: POP
18269: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
18270: LD_INT 81
18272: PUSH
18273: LD_INT 3
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 3
18282: PUSH
18283: LD_INT 21
18285: PUSH
18286: LD_INT 3
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PPUSH
18301: CALL_OW 69
18305: PPUSH
18306: LD_INT 131
18308: PPUSH
18309: LD_INT 127
18311: PPUSH
18312: CALL_OW 174
// wait ( 0 0$08 ) ;
18316: LD_INT 280
18318: PPUSH
18319: CALL_OW 67
// DialogueOn ;
18323: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
18327: LD_EXP 9
18331: PUSH
18332: LD_INT 1
18334: EQUAL
18335: PUSH
18336: LD_EXP 27
18340: PPUSH
18341: CALL_OW 302
18345: AND
18346: IFFALSE 18360
// Say ( Sikorski , D9-Sik-1 ) ;
18348: LD_EXP 27
18352: PPUSH
18353: LD_STRING D9-Sik-1
18355: PPUSH
18356: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
18360: LD_INT 22
18362: PUSH
18363: LD_INT 4
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PPUSH
18370: CALL_OW 69
18374: PUSH
18375: LD_INT 0
18377: EQUAL
18378: PUSH
18379: LD_EXP 3
18383: AND
18384: IFFALSE 18393
// SetAchievement ( ACH_BLITZKRIEG ) ;
18386: LD_STRING ACH_BLITZKRIEG
18388: PPUSH
18389: CALL_OW 543
// if tick <= 45 45$10 then
18393: LD_OWVAR 1
18397: PUSH
18398: LD_INT 94850
18400: LESSEQUAL
18401: IFFALSE 18417
// begin wait ( 3 ) ;
18403: LD_INT 3
18405: PPUSH
18406: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
18410: LD_STRING ACH_ASPEED_8
18412: PPUSH
18413: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
18417: LD_STRING med1
18419: PPUSH
18420: LD_INT 1
18422: PPUSH
18423: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
18427: LD_STRING med2
18429: PPUSH
18430: LD_INT 1
18432: PPUSH
18433: CALL_OW 101
// if sikorskiStatus = 1 then
18437: LD_EXP 9
18441: PUSH
18442: LD_INT 1
18444: EQUAL
18445: IFFALSE 18459
// AddMedal ( perfect , 1 ) else
18447: LD_STRING perfect
18449: PPUSH
18450: LD_INT 1
18452: PPUSH
18453: CALL_OW 101
18457: GO 18470
// AddMedal ( perfect , - 1 ) ;
18459: LD_STRING perfect
18461: PPUSH
18462: LD_INT 1
18464: NEG
18465: PPUSH
18466: CALL_OW 101
// if Difficulty >= 3 then
18470: LD_OWVAR 67
18474: PUSH
18475: LD_INT 3
18477: GREATEREQUAL
18478: IFFALSE 18490
// SetAchievementEX ( ACH_AMER , 8 ) ;
18480: LD_STRING ACH_AMER
18482: PPUSH
18483: LD_INT 8
18485: PPUSH
18486: CALL_OW 564
// GiveMedals ( Main ) ;
18490: LD_STRING Main
18492: PPUSH
18493: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18497: LD_INT 22
18499: PUSH
18500: LD_INT 1
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 23
18509: PUSH
18510: LD_INT 1
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 21
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: LIST
18531: PPUSH
18532: CALL_OW 69
18536: PPUSH
18537: CALL_OW 43
// prefix := 08_ ;
18541: LD_ADDR_VAR 0 3
18545: PUSH
18546: LD_STRING 08_
18548: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
18549: LD_EXP 14
18553: PPUSH
18554: LD_VAR 0 3
18558: PUSH
18559: LD_STRING JMM
18561: STR
18562: PPUSH
18563: CALL_OW 38
// if IsLive ( Brown ) then
18567: LD_EXP 15
18571: PPUSH
18572: CALL_OW 300
18576: IFFALSE 18596
// SaveCharacters ( Brown , prefix & Brown ) ;
18578: LD_EXP 15
18582: PPUSH
18583: LD_VAR 0 3
18587: PUSH
18588: LD_STRING Brown
18590: STR
18591: PPUSH
18592: CALL_OW 38
// if IsLive ( Donaldson ) then
18596: LD_EXP 16
18600: PPUSH
18601: CALL_OW 300
18605: IFFALSE 18625
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
18607: LD_EXP 16
18611: PPUSH
18612: LD_VAR 0 3
18616: PUSH
18617: LD_STRING Donaldson
18619: STR
18620: PPUSH
18621: CALL_OW 38
// if IsLive ( Bobby ) then
18625: LD_EXP 17
18629: PPUSH
18630: CALL_OW 300
18634: IFFALSE 18654
// SaveCharacters ( Bobby , prefix & Bobby ) ;
18636: LD_EXP 17
18640: PPUSH
18641: LD_VAR 0 3
18645: PUSH
18646: LD_STRING Bobby
18648: STR
18649: PPUSH
18650: CALL_OW 38
// if IsLive ( Cyrus ) then
18654: LD_EXP 18
18658: PPUSH
18659: CALL_OW 300
18663: IFFALSE 18683
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
18665: LD_EXP 18
18669: PPUSH
18670: LD_VAR 0 3
18674: PUSH
18675: LD_STRING Cyrus
18677: STR
18678: PPUSH
18679: CALL_OW 38
// if IsLive ( Lisa ) then
18683: LD_EXP 19
18687: PPUSH
18688: CALL_OW 300
18692: IFFALSE 18712
// SaveCharacters ( Lisa , prefix & Lisa ) ;
18694: LD_EXP 19
18698: PPUSH
18699: LD_VAR 0 3
18703: PUSH
18704: LD_STRING Lisa
18706: STR
18707: PPUSH
18708: CALL_OW 38
// if IsLive ( Frank ) then
18712: LD_EXP 20
18716: PPUSH
18717: CALL_OW 300
18721: IFFALSE 18741
// SaveCharacters ( Frank , prefix & Frank ) ;
18723: LD_EXP 20
18727: PPUSH
18728: LD_VAR 0 3
18732: PUSH
18733: LD_STRING Frank
18735: STR
18736: PPUSH
18737: CALL_OW 38
// if IsLive ( Gladstone ) then
18741: LD_EXP 21
18745: PPUSH
18746: CALL_OW 300
18750: IFFALSE 18770
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
18752: LD_EXP 21
18756: PPUSH
18757: LD_VAR 0 3
18761: PUSH
18762: LD_STRING Gladstone
18764: STR
18765: PPUSH
18766: CALL_OW 38
// if IsLive ( Kikuchi ) then
18770: LD_EXP 22
18774: PPUSH
18775: CALL_OW 300
18779: IFFALSE 18799
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
18781: LD_EXP 22
18785: PPUSH
18786: LD_VAR 0 3
18790: PUSH
18791: LD_STRING Kikuchi
18793: STR
18794: PPUSH
18795: CALL_OW 38
// if IsLive ( Denis ) then
18799: LD_EXP 25
18803: PPUSH
18804: CALL_OW 300
18808: IFFALSE 18828
// SaveCharacters ( Denis , prefix & Denis ) ;
18810: LD_EXP 25
18814: PPUSH
18815: LD_VAR 0 3
18819: PUSH
18820: LD_STRING Denis
18822: STR
18823: PPUSH
18824: CALL_OW 38
// if IsLive ( Joan ) then
18828: LD_EXP 26
18832: PPUSH
18833: CALL_OW 300
18837: IFFALSE 18857
// SaveCharacters ( Joan , prefix & Joan ) ;
18839: LD_EXP 26
18843: PPUSH
18844: LD_VAR 0 3
18848: PUSH
18849: LD_STRING Joan
18851: STR
18852: PPUSH
18853: CALL_OW 38
// if IsLive ( Khatam ) then
18857: LD_EXP 23
18861: PPUSH
18862: CALL_OW 300
18866: IFFALSE 18886
// SaveCharacters ( Khatam , prefix & Khatam ) ;
18868: LD_EXP 23
18872: PPUSH
18873: LD_VAR 0 3
18877: PUSH
18878: LD_STRING Khatam
18880: STR
18881: PPUSH
18882: CALL_OW 38
// if IsLive ( Houten ) then
18886: LD_EXP 24
18890: PPUSH
18891: CALL_OW 300
18895: IFFALSE 18915
// SaveCharacters ( Houten , prefix & Houten ) ;
18897: LD_EXP 24
18901: PPUSH
18902: LD_VAR 0 3
18906: PUSH
18907: LD_STRING Houten
18909: STR
18910: PPUSH
18911: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
18915: LD_INT 22
18917: PUSH
18918: LD_INT 1
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 21
18927: PUSH
18928: LD_INT 1
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PUSH
18935: LD_INT 23
18937: PUSH
18938: LD_INT 1
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: LIST
18949: PPUSH
18950: CALL_OW 69
18954: PUSH
18955: LD_EXP 14
18959: PUSH
18960: LD_EXP 15
18964: PUSH
18965: LD_EXP 16
18969: PUSH
18970: LD_EXP 17
18974: PUSH
18975: LD_EXP 18
18979: PUSH
18980: LD_EXP 19
18984: PUSH
18985: LD_EXP 20
18989: PUSH
18990: LD_EXP 21
18994: PUSH
18995: LD_EXP 22
18999: PUSH
19000: LD_EXP 25
19004: PUSH
19005: LD_EXP 26
19009: PUSH
19010: LD_EXP 24
19014: PUSH
19015: LD_EXP 23
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: DIFF
19035: PPUSH
19036: LD_STRING 08_other_survivors
19038: PPUSH
19039: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
19043: LD_INT 15
19045: PPUSH
19046: CALL 7107 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
19050: LD_EXP 10
19054: NOT
19055: PPUSH
19056: LD_STRING 08_SikorskiStatus
19058: PPUSH
19059: CALL_OW 39
// YouWin ;
19063: CALL_OW 103
// end ; end_of_file
19067: PPOPN 3
19069: END
// export function SikorskiCounter ; begin
19070: LD_INT 0
19072: PPUSH
// repeat wait ( 0 0$1 ) ;
19073: LD_INT 35
19075: PPUSH
19076: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
19080: LD_ADDR_OWVAR 47
19084: PUSH
19085: LD_STRING #Am08-2
19087: PUSH
19088: LD_EXP 3
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
19097: LD_ADDR_EXP 3
19101: PUSH
19102: LD_EXP 3
19106: PUSH
19107: LD_INT 35
19109: MINUS
19110: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
19111: LD_EXP 3
19115: PUSH
19116: LD_INT 0
19118: EQUAL
19119: IFFALSE 19073
// display_strings := [ ] ;
19121: LD_ADDR_OWVAR 47
19125: PUSH
19126: EMPTY
19127: ST_TO_ADDR
// end ;
19128: LD_VAR 0 1
19132: RET
// export function SikorskiWaitCounter ; begin
19133: LD_INT 0
19135: PPUSH
// repeat wait ( 0 0$1 ) ;
19136: LD_INT 35
19138: PPUSH
19139: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
19143: LD_ADDR_OWVAR 47
19147: PUSH
19148: LD_STRING #Am08-1
19150: PUSH
19151: LD_EXP 4
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
19160: LD_ADDR_EXP 4
19164: PUSH
19165: LD_EXP 4
19169: PUSH
19170: LD_INT 35
19172: MINUS
19173: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
19174: LD_EXP 4
19178: PUSH
19179: LD_INT 0
19181: EQUAL
19182: IFFALSE 19136
// display_strings := [ ] ;
19184: LD_ADDR_OWVAR 47
19188: PUSH
19189: EMPTY
19190: ST_TO_ADDR
// end ; end_of_file
19191: LD_VAR 0 1
19195: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
19196: LD_EXP 3
19200: IFFALSE 19240
19202: GO 19204
19204: DISABLE
// begin enable ;
19205: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
19206: LD_INT 14
19208: PPUSH
19209: CALL_OW 435
19213: PUSH
19214: LD_INT 10
19216: LESS
19217: IFFALSE 19240
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
19219: LD_INT 1
19221: PPUSH
19222: LD_INT 5
19224: PPUSH
19225: CALL_OW 12
19229: PPUSH
19230: LD_INT 14
19232: PPUSH
19233: LD_INT 1
19235: PPUSH
19236: CALL_OW 55
// end ;
19240: END
// every 0 0$55 trigger sikorskiArriveCounter do
19241: LD_EXP 3
19245: IFFALSE 19285
19247: GO 19249
19249: DISABLE
// begin enable ;
19250: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
19251: LD_INT 13
19253: PPUSH
19254: CALL_OW 435
19258: PUSH
19259: LD_INT 10
19261: LESS
19262: IFFALSE 19285
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
19264: LD_INT 1
19266: PPUSH
19267: LD_INT 5
19269: PPUSH
19270: CALL_OW 12
19274: PPUSH
19275: LD_INT 13
19277: PPUSH
19278: LD_INT 1
19280: PPUSH
19281: CALL_OW 55
// end ; end_of_file
19285: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
19286: LD_INT 0
19288: PPUSH
19289: PPUSH
// if not units then
19290: LD_VAR 0 1
19294: NOT
19295: IFFALSE 19299
// exit ;
19297: GO 19424
// result := false ;
19299: LD_ADDR_VAR 0 4
19303: PUSH
19304: LD_INT 0
19306: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
19307: LD_ADDR_VAR 0 5
19311: PUSH
19312: LD_VAR 0 1
19316: PPUSH
19317: LD_INT 26
19319: PUSH
19320: LD_INT 1
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PPUSH
19327: CALL_OW 72
19331: ST_TO_ADDR
// if tmp then
19332: LD_VAR 0 5
19336: IFFALSE 19362
// result := Say ( tmp [ 1 ] , menDialog ) ;
19338: LD_ADDR_VAR 0 4
19342: PUSH
19343: LD_VAR 0 5
19347: PUSH
19348: LD_INT 1
19350: ARRAY
19351: PPUSH
19352: LD_VAR 0 2
19356: PPUSH
19357: CALL_OW 88
19361: ST_TO_ADDR
// if not result then
19362: LD_VAR 0 4
19366: NOT
19367: IFFALSE 19424
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
19369: LD_ADDR_VAR 0 5
19373: PUSH
19374: LD_VAR 0 1
19378: PPUSH
19379: LD_INT 26
19381: PUSH
19382: LD_INT 2
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PPUSH
19389: CALL_OW 72
19393: ST_TO_ADDR
// if tmp then
19394: LD_VAR 0 5
19398: IFFALSE 19424
// result := Say ( tmp [ 1 ] , womenDialog ) ;
19400: LD_ADDR_VAR 0 4
19404: PUSH
19405: LD_VAR 0 5
19409: PUSH
19410: LD_INT 1
19412: ARRAY
19413: PPUSH
19414: LD_VAR 0 3
19418: PPUSH
19419: CALL_OW 88
19423: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
19424: LD_VAR 0 4
19428: RET
// every 0 0$1 do
19429: GO 19431
19431: DISABLE
// begin enable ;
19432: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19433: LD_STRING updateTimer(
19435: PUSH
19436: LD_OWVAR 1
19440: STR
19441: PUSH
19442: LD_STRING );
19444: STR
19445: PPUSH
19446: CALL_OW 559
// end ;
19450: END
// export function SOS_MapStart ( ) ; begin
19451: LD_INT 0
19453: PPUSH
// if streamModeActive then
19454: LD_EXP 36
19458: IFFALSE 19467
// DefineStreamItems ( true ) ;
19460: LD_INT 1
19462: PPUSH
19463: CALL 21121 0 1
// UpdateFactoryWaypoints ( ) ;
19467: CALL 33982 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19471: CALL 34239 0 0
// end ;
19475: LD_VAR 0 1
19479: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19480: LD_INT 0
19482: PPUSH
// if p2 = hack_mode then
19483: LD_VAR 0 2
19487: PUSH
19488: LD_INT 100
19490: EQUAL
19491: IFFALSE 20494
// begin if not StreamModeActive then
19493: LD_EXP 36
19497: NOT
19498: IFFALSE 19508
// StreamModeActive := true ;
19500: LD_ADDR_EXP 36
19504: PUSH
19505: LD_INT 1
19507: ST_TO_ADDR
// if p3 = 0 then
19508: LD_VAR 0 3
19512: PUSH
19513: LD_INT 0
19515: EQUAL
19516: IFFALSE 19522
// InitStreamMode ;
19518: CALL 20657 0 0
// if p3 = 1 then
19522: LD_VAR 0 3
19526: PUSH
19527: LD_INT 1
19529: EQUAL
19530: IFFALSE 19540
// sRocket := true ;
19532: LD_ADDR_EXP 41
19536: PUSH
19537: LD_INT 1
19539: ST_TO_ADDR
// if p3 = 2 then
19540: LD_VAR 0 3
19544: PUSH
19545: LD_INT 2
19547: EQUAL
19548: IFFALSE 19558
// sSpeed := true ;
19550: LD_ADDR_EXP 40
19554: PUSH
19555: LD_INT 1
19557: ST_TO_ADDR
// if p3 = 3 then
19558: LD_VAR 0 3
19562: PUSH
19563: LD_INT 3
19565: EQUAL
19566: IFFALSE 19576
// sEngine := true ;
19568: LD_ADDR_EXP 42
19572: PUSH
19573: LD_INT 1
19575: ST_TO_ADDR
// if p3 = 4 then
19576: LD_VAR 0 3
19580: PUSH
19581: LD_INT 4
19583: EQUAL
19584: IFFALSE 19594
// sSpec := true ;
19586: LD_ADDR_EXP 39
19590: PUSH
19591: LD_INT 1
19593: ST_TO_ADDR
// if p3 = 5 then
19594: LD_VAR 0 3
19598: PUSH
19599: LD_INT 5
19601: EQUAL
19602: IFFALSE 19612
// sLevel := true ;
19604: LD_ADDR_EXP 43
19608: PUSH
19609: LD_INT 1
19611: ST_TO_ADDR
// if p3 = 6 then
19612: LD_VAR 0 3
19616: PUSH
19617: LD_INT 6
19619: EQUAL
19620: IFFALSE 19630
// sArmoury := true ;
19622: LD_ADDR_EXP 44
19626: PUSH
19627: LD_INT 1
19629: ST_TO_ADDR
// if p3 = 7 then
19630: LD_VAR 0 3
19634: PUSH
19635: LD_INT 7
19637: EQUAL
19638: IFFALSE 19648
// sRadar := true ;
19640: LD_ADDR_EXP 45
19644: PUSH
19645: LD_INT 1
19647: ST_TO_ADDR
// if p3 = 8 then
19648: LD_VAR 0 3
19652: PUSH
19653: LD_INT 8
19655: EQUAL
19656: IFFALSE 19666
// sBunker := true ;
19658: LD_ADDR_EXP 46
19662: PUSH
19663: LD_INT 1
19665: ST_TO_ADDR
// if p3 = 9 then
19666: LD_VAR 0 3
19670: PUSH
19671: LD_INT 9
19673: EQUAL
19674: IFFALSE 19684
// sHack := true ;
19676: LD_ADDR_EXP 47
19680: PUSH
19681: LD_INT 1
19683: ST_TO_ADDR
// if p3 = 10 then
19684: LD_VAR 0 3
19688: PUSH
19689: LD_INT 10
19691: EQUAL
19692: IFFALSE 19702
// sFire := true ;
19694: LD_ADDR_EXP 48
19698: PUSH
19699: LD_INT 1
19701: ST_TO_ADDR
// if p3 = 11 then
19702: LD_VAR 0 3
19706: PUSH
19707: LD_INT 11
19709: EQUAL
19710: IFFALSE 19720
// sRefresh := true ;
19712: LD_ADDR_EXP 49
19716: PUSH
19717: LD_INT 1
19719: ST_TO_ADDR
// if p3 = 12 then
19720: LD_VAR 0 3
19724: PUSH
19725: LD_INT 12
19727: EQUAL
19728: IFFALSE 19738
// sExp := true ;
19730: LD_ADDR_EXP 50
19734: PUSH
19735: LD_INT 1
19737: ST_TO_ADDR
// if p3 = 13 then
19738: LD_VAR 0 3
19742: PUSH
19743: LD_INT 13
19745: EQUAL
19746: IFFALSE 19756
// sDepot := true ;
19748: LD_ADDR_EXP 51
19752: PUSH
19753: LD_INT 1
19755: ST_TO_ADDR
// if p3 = 14 then
19756: LD_VAR 0 3
19760: PUSH
19761: LD_INT 14
19763: EQUAL
19764: IFFALSE 19774
// sFlag := true ;
19766: LD_ADDR_EXP 52
19770: PUSH
19771: LD_INT 1
19773: ST_TO_ADDR
// if p3 = 15 then
19774: LD_VAR 0 3
19778: PUSH
19779: LD_INT 15
19781: EQUAL
19782: IFFALSE 19792
// sKamikadze := true ;
19784: LD_ADDR_EXP 60
19788: PUSH
19789: LD_INT 1
19791: ST_TO_ADDR
// if p3 = 16 then
19792: LD_VAR 0 3
19796: PUSH
19797: LD_INT 16
19799: EQUAL
19800: IFFALSE 19810
// sTroll := true ;
19802: LD_ADDR_EXP 61
19806: PUSH
19807: LD_INT 1
19809: ST_TO_ADDR
// if p3 = 17 then
19810: LD_VAR 0 3
19814: PUSH
19815: LD_INT 17
19817: EQUAL
19818: IFFALSE 19828
// sSlow := true ;
19820: LD_ADDR_EXP 62
19824: PUSH
19825: LD_INT 1
19827: ST_TO_ADDR
// if p3 = 18 then
19828: LD_VAR 0 3
19832: PUSH
19833: LD_INT 18
19835: EQUAL
19836: IFFALSE 19846
// sLack := true ;
19838: LD_ADDR_EXP 63
19842: PUSH
19843: LD_INT 1
19845: ST_TO_ADDR
// if p3 = 19 then
19846: LD_VAR 0 3
19850: PUSH
19851: LD_INT 19
19853: EQUAL
19854: IFFALSE 19864
// sTank := true ;
19856: LD_ADDR_EXP 65
19860: PUSH
19861: LD_INT 1
19863: ST_TO_ADDR
// if p3 = 20 then
19864: LD_VAR 0 3
19868: PUSH
19869: LD_INT 20
19871: EQUAL
19872: IFFALSE 19882
// sRemote := true ;
19874: LD_ADDR_EXP 66
19878: PUSH
19879: LD_INT 1
19881: ST_TO_ADDR
// if p3 = 21 then
19882: LD_VAR 0 3
19886: PUSH
19887: LD_INT 21
19889: EQUAL
19890: IFFALSE 19900
// sPowell := true ;
19892: LD_ADDR_EXP 67
19896: PUSH
19897: LD_INT 1
19899: ST_TO_ADDR
// if p3 = 22 then
19900: LD_VAR 0 3
19904: PUSH
19905: LD_INT 22
19907: EQUAL
19908: IFFALSE 19918
// sTeleport := true ;
19910: LD_ADDR_EXP 70
19914: PUSH
19915: LD_INT 1
19917: ST_TO_ADDR
// if p3 = 23 then
19918: LD_VAR 0 3
19922: PUSH
19923: LD_INT 23
19925: EQUAL
19926: IFFALSE 19936
// sOilTower := true ;
19928: LD_ADDR_EXP 72
19932: PUSH
19933: LD_INT 1
19935: ST_TO_ADDR
// if p3 = 24 then
19936: LD_VAR 0 3
19940: PUSH
19941: LD_INT 24
19943: EQUAL
19944: IFFALSE 19954
// sShovel := true ;
19946: LD_ADDR_EXP 73
19950: PUSH
19951: LD_INT 1
19953: ST_TO_ADDR
// if p3 = 25 then
19954: LD_VAR 0 3
19958: PUSH
19959: LD_INT 25
19961: EQUAL
19962: IFFALSE 19972
// sSheik := true ;
19964: LD_ADDR_EXP 74
19968: PUSH
19969: LD_INT 1
19971: ST_TO_ADDR
// if p3 = 26 then
19972: LD_VAR 0 3
19976: PUSH
19977: LD_INT 26
19979: EQUAL
19980: IFFALSE 19990
// sEarthquake := true ;
19982: LD_ADDR_EXP 76
19986: PUSH
19987: LD_INT 1
19989: ST_TO_ADDR
// if p3 = 27 then
19990: LD_VAR 0 3
19994: PUSH
19995: LD_INT 27
19997: EQUAL
19998: IFFALSE 20008
// sAI := true ;
20000: LD_ADDR_EXP 77
20004: PUSH
20005: LD_INT 1
20007: ST_TO_ADDR
// if p3 = 28 then
20008: LD_VAR 0 3
20012: PUSH
20013: LD_INT 28
20015: EQUAL
20016: IFFALSE 20026
// sCargo := true ;
20018: LD_ADDR_EXP 80
20022: PUSH
20023: LD_INT 1
20025: ST_TO_ADDR
// if p3 = 29 then
20026: LD_VAR 0 3
20030: PUSH
20031: LD_INT 29
20033: EQUAL
20034: IFFALSE 20044
// sDLaser := true ;
20036: LD_ADDR_EXP 81
20040: PUSH
20041: LD_INT 1
20043: ST_TO_ADDR
// if p3 = 30 then
20044: LD_VAR 0 3
20048: PUSH
20049: LD_INT 30
20051: EQUAL
20052: IFFALSE 20062
// sExchange := true ;
20054: LD_ADDR_EXP 82
20058: PUSH
20059: LD_INT 1
20061: ST_TO_ADDR
// if p3 = 31 then
20062: LD_VAR 0 3
20066: PUSH
20067: LD_INT 31
20069: EQUAL
20070: IFFALSE 20080
// sFac := true ;
20072: LD_ADDR_EXP 83
20076: PUSH
20077: LD_INT 1
20079: ST_TO_ADDR
// if p3 = 32 then
20080: LD_VAR 0 3
20084: PUSH
20085: LD_INT 32
20087: EQUAL
20088: IFFALSE 20098
// sPower := true ;
20090: LD_ADDR_EXP 84
20094: PUSH
20095: LD_INT 1
20097: ST_TO_ADDR
// if p3 = 33 then
20098: LD_VAR 0 3
20102: PUSH
20103: LD_INT 33
20105: EQUAL
20106: IFFALSE 20116
// sRandom := true ;
20108: LD_ADDR_EXP 85
20112: PUSH
20113: LD_INT 1
20115: ST_TO_ADDR
// if p3 = 34 then
20116: LD_VAR 0 3
20120: PUSH
20121: LD_INT 34
20123: EQUAL
20124: IFFALSE 20134
// sShield := true ;
20126: LD_ADDR_EXP 86
20130: PUSH
20131: LD_INT 1
20133: ST_TO_ADDR
// if p3 = 35 then
20134: LD_VAR 0 3
20138: PUSH
20139: LD_INT 35
20141: EQUAL
20142: IFFALSE 20152
// sTime := true ;
20144: LD_ADDR_EXP 87
20148: PUSH
20149: LD_INT 1
20151: ST_TO_ADDR
// if p3 = 36 then
20152: LD_VAR 0 3
20156: PUSH
20157: LD_INT 36
20159: EQUAL
20160: IFFALSE 20170
// sTools := true ;
20162: LD_ADDR_EXP 88
20166: PUSH
20167: LD_INT 1
20169: ST_TO_ADDR
// if p3 = 101 then
20170: LD_VAR 0 3
20174: PUSH
20175: LD_INT 101
20177: EQUAL
20178: IFFALSE 20188
// sSold := true ;
20180: LD_ADDR_EXP 53
20184: PUSH
20185: LD_INT 1
20187: ST_TO_ADDR
// if p3 = 102 then
20188: LD_VAR 0 3
20192: PUSH
20193: LD_INT 102
20195: EQUAL
20196: IFFALSE 20206
// sDiff := true ;
20198: LD_ADDR_EXP 54
20202: PUSH
20203: LD_INT 1
20205: ST_TO_ADDR
// if p3 = 103 then
20206: LD_VAR 0 3
20210: PUSH
20211: LD_INT 103
20213: EQUAL
20214: IFFALSE 20224
// sFog := true ;
20216: LD_ADDR_EXP 57
20220: PUSH
20221: LD_INT 1
20223: ST_TO_ADDR
// if p3 = 104 then
20224: LD_VAR 0 3
20228: PUSH
20229: LD_INT 104
20231: EQUAL
20232: IFFALSE 20242
// sReset := true ;
20234: LD_ADDR_EXP 58
20238: PUSH
20239: LD_INT 1
20241: ST_TO_ADDR
// if p3 = 105 then
20242: LD_VAR 0 3
20246: PUSH
20247: LD_INT 105
20249: EQUAL
20250: IFFALSE 20260
// sSun := true ;
20252: LD_ADDR_EXP 59
20256: PUSH
20257: LD_INT 1
20259: ST_TO_ADDR
// if p3 = 106 then
20260: LD_VAR 0 3
20264: PUSH
20265: LD_INT 106
20267: EQUAL
20268: IFFALSE 20278
// sTiger := true ;
20270: LD_ADDR_EXP 55
20274: PUSH
20275: LD_INT 1
20277: ST_TO_ADDR
// if p3 = 107 then
20278: LD_VAR 0 3
20282: PUSH
20283: LD_INT 107
20285: EQUAL
20286: IFFALSE 20296
// sBomb := true ;
20288: LD_ADDR_EXP 56
20292: PUSH
20293: LD_INT 1
20295: ST_TO_ADDR
// if p3 = 108 then
20296: LD_VAR 0 3
20300: PUSH
20301: LD_INT 108
20303: EQUAL
20304: IFFALSE 20314
// sWound := true ;
20306: LD_ADDR_EXP 64
20310: PUSH
20311: LD_INT 1
20313: ST_TO_ADDR
// if p3 = 109 then
20314: LD_VAR 0 3
20318: PUSH
20319: LD_INT 109
20321: EQUAL
20322: IFFALSE 20332
// sBetray := true ;
20324: LD_ADDR_EXP 68
20328: PUSH
20329: LD_INT 1
20331: ST_TO_ADDR
// if p3 = 110 then
20332: LD_VAR 0 3
20336: PUSH
20337: LD_INT 110
20339: EQUAL
20340: IFFALSE 20350
// sContamin := true ;
20342: LD_ADDR_EXP 69
20346: PUSH
20347: LD_INT 1
20349: ST_TO_ADDR
// if p3 = 111 then
20350: LD_VAR 0 3
20354: PUSH
20355: LD_INT 111
20357: EQUAL
20358: IFFALSE 20368
// sOil := true ;
20360: LD_ADDR_EXP 71
20364: PUSH
20365: LD_INT 1
20367: ST_TO_ADDR
// if p3 = 112 then
20368: LD_VAR 0 3
20372: PUSH
20373: LD_INT 112
20375: EQUAL
20376: IFFALSE 20386
// sStu := true ;
20378: LD_ADDR_EXP 75
20382: PUSH
20383: LD_INT 1
20385: ST_TO_ADDR
// if p3 = 113 then
20386: LD_VAR 0 3
20390: PUSH
20391: LD_INT 113
20393: EQUAL
20394: IFFALSE 20404
// sBazooka := true ;
20396: LD_ADDR_EXP 78
20400: PUSH
20401: LD_INT 1
20403: ST_TO_ADDR
// if p3 = 114 then
20404: LD_VAR 0 3
20408: PUSH
20409: LD_INT 114
20411: EQUAL
20412: IFFALSE 20422
// sMortar := true ;
20414: LD_ADDR_EXP 79
20418: PUSH
20419: LD_INT 1
20421: ST_TO_ADDR
// if p3 = 115 then
20422: LD_VAR 0 3
20426: PUSH
20427: LD_INT 115
20429: EQUAL
20430: IFFALSE 20440
// sRanger := true ;
20432: LD_ADDR_EXP 89
20436: PUSH
20437: LD_INT 1
20439: ST_TO_ADDR
// if p3 = 116 then
20440: LD_VAR 0 3
20444: PUSH
20445: LD_INT 116
20447: EQUAL
20448: IFFALSE 20458
// sComputer := true ;
20450: LD_ADDR_EXP 90
20454: PUSH
20455: LD_INT 1
20457: ST_TO_ADDR
// if p3 = 117 then
20458: LD_VAR 0 3
20462: PUSH
20463: LD_INT 117
20465: EQUAL
20466: IFFALSE 20476
// s30 := true ;
20468: LD_ADDR_EXP 91
20472: PUSH
20473: LD_INT 1
20475: ST_TO_ADDR
// if p3 = 118 then
20476: LD_VAR 0 3
20480: PUSH
20481: LD_INT 118
20483: EQUAL
20484: IFFALSE 20494
// s60 := true ;
20486: LD_ADDR_EXP 92
20490: PUSH
20491: LD_INT 1
20493: ST_TO_ADDR
// end ; if p2 = stream_mode then
20494: LD_VAR 0 2
20498: PUSH
20499: LD_INT 101
20501: EQUAL
20502: IFFALSE 20630
// begin case p3 of 1 :
20504: LD_VAR 0 3
20508: PUSH
20509: LD_INT 1
20511: DOUBLE
20512: EQUAL
20513: IFTRUE 20517
20515: GO 20524
20517: POP
// hHackUnlimitedResources ; 2 :
20518: CALL 32728 0 0
20522: GO 20630
20524: LD_INT 2
20526: DOUBLE
20527: EQUAL
20528: IFTRUE 20532
20530: GO 20539
20532: POP
// hHackSetLevel10 ; 3 :
20533: CALL 32861 0 0
20537: GO 20630
20539: LD_INT 3
20541: DOUBLE
20542: EQUAL
20543: IFTRUE 20547
20545: GO 20554
20547: POP
// hHackSetLevel10YourUnits ; 4 :
20548: CALL 32946 0 0
20552: GO 20630
20554: LD_INT 4
20556: DOUBLE
20557: EQUAL
20558: IFTRUE 20562
20560: GO 20569
20562: POP
// hHackInvincible ; 5 :
20563: CALL 33394 0 0
20567: GO 20630
20569: LD_INT 5
20571: DOUBLE
20572: EQUAL
20573: IFTRUE 20577
20575: GO 20584
20577: POP
// hHackInvisible ; 6 :
20578: CALL 33505 0 0
20582: GO 20630
20584: LD_INT 6
20586: DOUBLE
20587: EQUAL
20588: IFTRUE 20592
20590: GO 20599
20592: POP
// hHackChangeYourSide ; 7 :
20593: CALL 33562 0 0
20597: GO 20630
20599: LD_INT 7
20601: DOUBLE
20602: EQUAL
20603: IFTRUE 20607
20605: GO 20614
20607: POP
// hHackChangeUnitSide ; 8 :
20608: CALL 33604 0 0
20612: GO 20630
20614: LD_INT 8
20616: DOUBLE
20617: EQUAL
20618: IFTRUE 20622
20620: GO 20629
20622: POP
// hHackFog ; end ;
20623: CALL 33705 0 0
20627: GO 20630
20629: POP
// end ; end ;
20630: LD_VAR 0 7
20634: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20635: GO 20637
20637: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20638: LD_STRING initStreamRollete();
20640: PPUSH
20641: CALL_OW 559
// InitStreamMode ;
20645: CALL 20657 0 0
// DefineStreamItems ( false ) ;
20649: LD_INT 0
20651: PPUSH
20652: CALL 21121 0 1
// end ;
20656: END
// function InitStreamMode ; begin
20657: LD_INT 0
20659: PPUSH
// streamModeActive := false ;
20660: LD_ADDR_EXP 36
20664: PUSH
20665: LD_INT 0
20667: ST_TO_ADDR
// normalCounter := 36 ;
20668: LD_ADDR_EXP 37
20672: PUSH
20673: LD_INT 36
20675: ST_TO_ADDR
// hardcoreCounter := 18 ;
20676: LD_ADDR_EXP 38
20680: PUSH
20681: LD_INT 18
20683: ST_TO_ADDR
// sRocket := false ;
20684: LD_ADDR_EXP 41
20688: PUSH
20689: LD_INT 0
20691: ST_TO_ADDR
// sSpeed := false ;
20692: LD_ADDR_EXP 40
20696: PUSH
20697: LD_INT 0
20699: ST_TO_ADDR
// sEngine := false ;
20700: LD_ADDR_EXP 42
20704: PUSH
20705: LD_INT 0
20707: ST_TO_ADDR
// sSpec := false ;
20708: LD_ADDR_EXP 39
20712: PUSH
20713: LD_INT 0
20715: ST_TO_ADDR
// sLevel := false ;
20716: LD_ADDR_EXP 43
20720: PUSH
20721: LD_INT 0
20723: ST_TO_ADDR
// sArmoury := false ;
20724: LD_ADDR_EXP 44
20728: PUSH
20729: LD_INT 0
20731: ST_TO_ADDR
// sRadar := false ;
20732: LD_ADDR_EXP 45
20736: PUSH
20737: LD_INT 0
20739: ST_TO_ADDR
// sBunker := false ;
20740: LD_ADDR_EXP 46
20744: PUSH
20745: LD_INT 0
20747: ST_TO_ADDR
// sHack := false ;
20748: LD_ADDR_EXP 47
20752: PUSH
20753: LD_INT 0
20755: ST_TO_ADDR
// sFire := false ;
20756: LD_ADDR_EXP 48
20760: PUSH
20761: LD_INT 0
20763: ST_TO_ADDR
// sRefresh := false ;
20764: LD_ADDR_EXP 49
20768: PUSH
20769: LD_INT 0
20771: ST_TO_ADDR
// sExp := false ;
20772: LD_ADDR_EXP 50
20776: PUSH
20777: LD_INT 0
20779: ST_TO_ADDR
// sDepot := false ;
20780: LD_ADDR_EXP 51
20784: PUSH
20785: LD_INT 0
20787: ST_TO_ADDR
// sFlag := false ;
20788: LD_ADDR_EXP 52
20792: PUSH
20793: LD_INT 0
20795: ST_TO_ADDR
// sKamikadze := false ;
20796: LD_ADDR_EXP 60
20800: PUSH
20801: LD_INT 0
20803: ST_TO_ADDR
// sTroll := false ;
20804: LD_ADDR_EXP 61
20808: PUSH
20809: LD_INT 0
20811: ST_TO_ADDR
// sSlow := false ;
20812: LD_ADDR_EXP 62
20816: PUSH
20817: LD_INT 0
20819: ST_TO_ADDR
// sLack := false ;
20820: LD_ADDR_EXP 63
20824: PUSH
20825: LD_INT 0
20827: ST_TO_ADDR
// sTank := false ;
20828: LD_ADDR_EXP 65
20832: PUSH
20833: LD_INT 0
20835: ST_TO_ADDR
// sRemote := false ;
20836: LD_ADDR_EXP 66
20840: PUSH
20841: LD_INT 0
20843: ST_TO_ADDR
// sPowell := false ;
20844: LD_ADDR_EXP 67
20848: PUSH
20849: LD_INT 0
20851: ST_TO_ADDR
// sTeleport := false ;
20852: LD_ADDR_EXP 70
20856: PUSH
20857: LD_INT 0
20859: ST_TO_ADDR
// sOilTower := false ;
20860: LD_ADDR_EXP 72
20864: PUSH
20865: LD_INT 0
20867: ST_TO_ADDR
// sShovel := false ;
20868: LD_ADDR_EXP 73
20872: PUSH
20873: LD_INT 0
20875: ST_TO_ADDR
// sSheik := false ;
20876: LD_ADDR_EXP 74
20880: PUSH
20881: LD_INT 0
20883: ST_TO_ADDR
// sEarthquake := false ;
20884: LD_ADDR_EXP 76
20888: PUSH
20889: LD_INT 0
20891: ST_TO_ADDR
// sAI := false ;
20892: LD_ADDR_EXP 77
20896: PUSH
20897: LD_INT 0
20899: ST_TO_ADDR
// sCargo := false ;
20900: LD_ADDR_EXP 80
20904: PUSH
20905: LD_INT 0
20907: ST_TO_ADDR
// sDLaser := false ;
20908: LD_ADDR_EXP 81
20912: PUSH
20913: LD_INT 0
20915: ST_TO_ADDR
// sExchange := false ;
20916: LD_ADDR_EXP 82
20920: PUSH
20921: LD_INT 0
20923: ST_TO_ADDR
// sFac := false ;
20924: LD_ADDR_EXP 83
20928: PUSH
20929: LD_INT 0
20931: ST_TO_ADDR
// sPower := false ;
20932: LD_ADDR_EXP 84
20936: PUSH
20937: LD_INT 0
20939: ST_TO_ADDR
// sRandom := false ;
20940: LD_ADDR_EXP 85
20944: PUSH
20945: LD_INT 0
20947: ST_TO_ADDR
// sShield := false ;
20948: LD_ADDR_EXP 86
20952: PUSH
20953: LD_INT 0
20955: ST_TO_ADDR
// sTime := false ;
20956: LD_ADDR_EXP 87
20960: PUSH
20961: LD_INT 0
20963: ST_TO_ADDR
// sTools := false ;
20964: LD_ADDR_EXP 88
20968: PUSH
20969: LD_INT 0
20971: ST_TO_ADDR
// sSold := false ;
20972: LD_ADDR_EXP 53
20976: PUSH
20977: LD_INT 0
20979: ST_TO_ADDR
// sDiff := false ;
20980: LD_ADDR_EXP 54
20984: PUSH
20985: LD_INT 0
20987: ST_TO_ADDR
// sFog := false ;
20988: LD_ADDR_EXP 57
20992: PUSH
20993: LD_INT 0
20995: ST_TO_ADDR
// sReset := false ;
20996: LD_ADDR_EXP 58
21000: PUSH
21001: LD_INT 0
21003: ST_TO_ADDR
// sSun := false ;
21004: LD_ADDR_EXP 59
21008: PUSH
21009: LD_INT 0
21011: ST_TO_ADDR
// sTiger := false ;
21012: LD_ADDR_EXP 55
21016: PUSH
21017: LD_INT 0
21019: ST_TO_ADDR
// sBomb := false ;
21020: LD_ADDR_EXP 56
21024: PUSH
21025: LD_INT 0
21027: ST_TO_ADDR
// sWound := false ;
21028: LD_ADDR_EXP 64
21032: PUSH
21033: LD_INT 0
21035: ST_TO_ADDR
// sBetray := false ;
21036: LD_ADDR_EXP 68
21040: PUSH
21041: LD_INT 0
21043: ST_TO_ADDR
// sContamin := false ;
21044: LD_ADDR_EXP 69
21048: PUSH
21049: LD_INT 0
21051: ST_TO_ADDR
// sOil := false ;
21052: LD_ADDR_EXP 71
21056: PUSH
21057: LD_INT 0
21059: ST_TO_ADDR
// sStu := false ;
21060: LD_ADDR_EXP 75
21064: PUSH
21065: LD_INT 0
21067: ST_TO_ADDR
// sBazooka := false ;
21068: LD_ADDR_EXP 78
21072: PUSH
21073: LD_INT 0
21075: ST_TO_ADDR
// sMortar := false ;
21076: LD_ADDR_EXP 79
21080: PUSH
21081: LD_INT 0
21083: ST_TO_ADDR
// sRanger := false ;
21084: LD_ADDR_EXP 89
21088: PUSH
21089: LD_INT 0
21091: ST_TO_ADDR
// sComputer := false ;
21092: LD_ADDR_EXP 90
21096: PUSH
21097: LD_INT 0
21099: ST_TO_ADDR
// s30 := false ;
21100: LD_ADDR_EXP 91
21104: PUSH
21105: LD_INT 0
21107: ST_TO_ADDR
// s60 := false ;
21108: LD_ADDR_EXP 92
21112: PUSH
21113: LD_INT 0
21115: ST_TO_ADDR
// end ;
21116: LD_VAR 0 1
21120: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21121: LD_INT 0
21123: PPUSH
21124: PPUSH
21125: PPUSH
21126: PPUSH
21127: PPUSH
21128: PPUSH
21129: PPUSH
// result := [ ] ;
21130: LD_ADDR_VAR 0 2
21134: PUSH
21135: EMPTY
21136: ST_TO_ADDR
// if campaign_id = 1 then
21137: LD_OWVAR 69
21141: PUSH
21142: LD_INT 1
21144: EQUAL
21145: IFFALSE 24311
// begin case mission_number of 1 :
21147: LD_OWVAR 70
21151: PUSH
21152: LD_INT 1
21154: DOUBLE
21155: EQUAL
21156: IFTRUE 21160
21158: GO 21236
21160: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21161: LD_ADDR_VAR 0 2
21165: PUSH
21166: LD_INT 2
21168: PUSH
21169: LD_INT 4
21171: PUSH
21172: LD_INT 11
21174: PUSH
21175: LD_INT 12
21177: PUSH
21178: LD_INT 15
21180: PUSH
21181: LD_INT 16
21183: PUSH
21184: LD_INT 22
21186: PUSH
21187: LD_INT 23
21189: PUSH
21190: LD_INT 26
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 101
21206: PUSH
21207: LD_INT 102
21209: PUSH
21210: LD_INT 106
21212: PUSH
21213: LD_INT 116
21215: PUSH
21216: LD_INT 117
21218: PUSH
21219: LD_INT 118
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: ST_TO_ADDR
21234: GO 24309
21236: LD_INT 2
21238: DOUBLE
21239: EQUAL
21240: IFTRUE 21244
21242: GO 21328
21244: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21245: LD_ADDR_VAR 0 2
21249: PUSH
21250: LD_INT 2
21252: PUSH
21253: LD_INT 4
21255: PUSH
21256: LD_INT 11
21258: PUSH
21259: LD_INT 12
21261: PUSH
21262: LD_INT 15
21264: PUSH
21265: LD_INT 16
21267: PUSH
21268: LD_INT 22
21270: PUSH
21271: LD_INT 23
21273: PUSH
21274: LD_INT 26
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 101
21290: PUSH
21291: LD_INT 102
21293: PUSH
21294: LD_INT 105
21296: PUSH
21297: LD_INT 106
21299: PUSH
21300: LD_INT 108
21302: PUSH
21303: LD_INT 116
21305: PUSH
21306: LD_INT 117
21308: PUSH
21309: LD_INT 118
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: ST_TO_ADDR
21326: GO 24309
21328: LD_INT 3
21330: DOUBLE
21331: EQUAL
21332: IFTRUE 21336
21334: GO 21424
21336: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21337: LD_ADDR_VAR 0 2
21341: PUSH
21342: LD_INT 2
21344: PUSH
21345: LD_INT 4
21347: PUSH
21348: LD_INT 5
21350: PUSH
21351: LD_INT 11
21353: PUSH
21354: LD_INT 12
21356: PUSH
21357: LD_INT 15
21359: PUSH
21360: LD_INT 16
21362: PUSH
21363: LD_INT 22
21365: PUSH
21366: LD_INT 26
21368: PUSH
21369: LD_INT 36
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 101
21386: PUSH
21387: LD_INT 102
21389: PUSH
21390: LD_INT 105
21392: PUSH
21393: LD_INT 106
21395: PUSH
21396: LD_INT 108
21398: PUSH
21399: LD_INT 116
21401: PUSH
21402: LD_INT 117
21404: PUSH
21405: LD_INT 118
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: ST_TO_ADDR
21422: GO 24309
21424: LD_INT 4
21426: DOUBLE
21427: EQUAL
21428: IFTRUE 21432
21430: GO 21528
21432: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21433: LD_ADDR_VAR 0 2
21437: PUSH
21438: LD_INT 2
21440: PUSH
21441: LD_INT 4
21443: PUSH
21444: LD_INT 5
21446: PUSH
21447: LD_INT 8
21449: PUSH
21450: LD_INT 11
21452: PUSH
21453: LD_INT 12
21455: PUSH
21456: LD_INT 15
21458: PUSH
21459: LD_INT 16
21461: PUSH
21462: LD_INT 22
21464: PUSH
21465: LD_INT 23
21467: PUSH
21468: LD_INT 26
21470: PUSH
21471: LD_INT 36
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 101
21490: PUSH
21491: LD_INT 102
21493: PUSH
21494: LD_INT 105
21496: PUSH
21497: LD_INT 106
21499: PUSH
21500: LD_INT 108
21502: PUSH
21503: LD_INT 116
21505: PUSH
21506: LD_INT 117
21508: PUSH
21509: LD_INT 118
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: ST_TO_ADDR
21526: GO 24309
21528: LD_INT 5
21530: DOUBLE
21531: EQUAL
21532: IFTRUE 21536
21534: GO 21648
21536: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21537: LD_ADDR_VAR 0 2
21541: PUSH
21542: LD_INT 2
21544: PUSH
21545: LD_INT 4
21547: PUSH
21548: LD_INT 5
21550: PUSH
21551: LD_INT 6
21553: PUSH
21554: LD_INT 8
21556: PUSH
21557: LD_INT 11
21559: PUSH
21560: LD_INT 12
21562: PUSH
21563: LD_INT 15
21565: PUSH
21566: LD_INT 16
21568: PUSH
21569: LD_INT 22
21571: PUSH
21572: LD_INT 23
21574: PUSH
21575: LD_INT 25
21577: PUSH
21578: LD_INT 26
21580: PUSH
21581: LD_INT 36
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 101
21602: PUSH
21603: LD_INT 102
21605: PUSH
21606: LD_INT 105
21608: PUSH
21609: LD_INT 106
21611: PUSH
21612: LD_INT 108
21614: PUSH
21615: LD_INT 109
21617: PUSH
21618: LD_INT 112
21620: PUSH
21621: LD_INT 116
21623: PUSH
21624: LD_INT 117
21626: PUSH
21627: LD_INT 118
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: ST_TO_ADDR
21646: GO 24309
21648: LD_INT 6
21650: DOUBLE
21651: EQUAL
21652: IFTRUE 21656
21654: GO 21788
21656: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21657: LD_ADDR_VAR 0 2
21661: PUSH
21662: LD_INT 2
21664: PUSH
21665: LD_INT 4
21667: PUSH
21668: LD_INT 5
21670: PUSH
21671: LD_INT 6
21673: PUSH
21674: LD_INT 8
21676: PUSH
21677: LD_INT 11
21679: PUSH
21680: LD_INT 12
21682: PUSH
21683: LD_INT 15
21685: PUSH
21686: LD_INT 16
21688: PUSH
21689: LD_INT 20
21691: PUSH
21692: LD_INT 21
21694: PUSH
21695: LD_INT 22
21697: PUSH
21698: LD_INT 23
21700: PUSH
21701: LD_INT 25
21703: PUSH
21704: LD_INT 26
21706: PUSH
21707: LD_INT 30
21709: PUSH
21710: LD_INT 31
21712: PUSH
21713: LD_INT 32
21715: PUSH
21716: LD_INT 36
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 101
21742: PUSH
21743: LD_INT 102
21745: PUSH
21746: LD_INT 105
21748: PUSH
21749: LD_INT 106
21751: PUSH
21752: LD_INT 108
21754: PUSH
21755: LD_INT 109
21757: PUSH
21758: LD_INT 112
21760: PUSH
21761: LD_INT 116
21763: PUSH
21764: LD_INT 117
21766: PUSH
21767: LD_INT 118
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: ST_TO_ADDR
21786: GO 24309
21788: LD_INT 7
21790: DOUBLE
21791: EQUAL
21792: IFTRUE 21796
21794: GO 21908
21796: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21797: LD_ADDR_VAR 0 2
21801: PUSH
21802: LD_INT 2
21804: PUSH
21805: LD_INT 4
21807: PUSH
21808: LD_INT 5
21810: PUSH
21811: LD_INT 7
21813: PUSH
21814: LD_INT 11
21816: PUSH
21817: LD_INT 12
21819: PUSH
21820: LD_INT 15
21822: PUSH
21823: LD_INT 16
21825: PUSH
21826: LD_INT 20
21828: PUSH
21829: LD_INT 21
21831: PUSH
21832: LD_INT 22
21834: PUSH
21835: LD_INT 23
21837: PUSH
21838: LD_INT 25
21840: PUSH
21841: LD_INT 26
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 101
21862: PUSH
21863: LD_INT 102
21865: PUSH
21866: LD_INT 103
21868: PUSH
21869: LD_INT 105
21871: PUSH
21872: LD_INT 106
21874: PUSH
21875: LD_INT 108
21877: PUSH
21878: LD_INT 112
21880: PUSH
21881: LD_INT 116
21883: PUSH
21884: LD_INT 117
21886: PUSH
21887: LD_INT 118
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: ST_TO_ADDR
21906: GO 24309
21908: LD_INT 8
21910: DOUBLE
21911: EQUAL
21912: IFTRUE 21916
21914: GO 22056
21916: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21917: LD_ADDR_VAR 0 2
21921: PUSH
21922: LD_INT 2
21924: PUSH
21925: LD_INT 4
21927: PUSH
21928: LD_INT 5
21930: PUSH
21931: LD_INT 6
21933: PUSH
21934: LD_INT 7
21936: PUSH
21937: LD_INT 8
21939: PUSH
21940: LD_INT 11
21942: PUSH
21943: LD_INT 12
21945: PUSH
21946: LD_INT 15
21948: PUSH
21949: LD_INT 16
21951: PUSH
21952: LD_INT 20
21954: PUSH
21955: LD_INT 21
21957: PUSH
21958: LD_INT 22
21960: PUSH
21961: LD_INT 23
21963: PUSH
21964: LD_INT 25
21966: PUSH
21967: LD_INT 26
21969: PUSH
21970: LD_INT 30
21972: PUSH
21973: LD_INT 31
21975: PUSH
21976: LD_INT 32
21978: PUSH
21979: LD_INT 36
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 101
22006: PUSH
22007: LD_INT 102
22009: PUSH
22010: LD_INT 103
22012: PUSH
22013: LD_INT 105
22015: PUSH
22016: LD_INT 106
22018: PUSH
22019: LD_INT 108
22021: PUSH
22022: LD_INT 109
22024: PUSH
22025: LD_INT 112
22027: PUSH
22028: LD_INT 116
22030: PUSH
22031: LD_INT 117
22033: PUSH
22034: LD_INT 118
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: ST_TO_ADDR
22054: GO 24309
22056: LD_INT 9
22058: DOUBLE
22059: EQUAL
22060: IFTRUE 22064
22062: GO 22212
22064: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22065: LD_ADDR_VAR 0 2
22069: PUSH
22070: LD_INT 2
22072: PUSH
22073: LD_INT 4
22075: PUSH
22076: LD_INT 5
22078: PUSH
22079: LD_INT 6
22081: PUSH
22082: LD_INT 7
22084: PUSH
22085: LD_INT 8
22087: PUSH
22088: LD_INT 11
22090: PUSH
22091: LD_INT 12
22093: PUSH
22094: LD_INT 15
22096: PUSH
22097: LD_INT 16
22099: PUSH
22100: LD_INT 20
22102: PUSH
22103: LD_INT 21
22105: PUSH
22106: LD_INT 22
22108: PUSH
22109: LD_INT 23
22111: PUSH
22112: LD_INT 25
22114: PUSH
22115: LD_INT 26
22117: PUSH
22118: LD_INT 28
22120: PUSH
22121: LD_INT 30
22123: PUSH
22124: LD_INT 31
22126: PUSH
22127: LD_INT 32
22129: PUSH
22130: LD_INT 36
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 101
22158: PUSH
22159: LD_INT 102
22161: PUSH
22162: LD_INT 103
22164: PUSH
22165: LD_INT 105
22167: PUSH
22168: LD_INT 106
22170: PUSH
22171: LD_INT 108
22173: PUSH
22174: LD_INT 109
22176: PUSH
22177: LD_INT 112
22179: PUSH
22180: LD_INT 114
22182: PUSH
22183: LD_INT 116
22185: PUSH
22186: LD_INT 117
22188: PUSH
22189: LD_INT 118
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: ST_TO_ADDR
22210: GO 24309
22212: LD_INT 10
22214: DOUBLE
22215: EQUAL
22216: IFTRUE 22220
22218: GO 22416
22220: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22221: LD_ADDR_VAR 0 2
22225: PUSH
22226: LD_INT 2
22228: PUSH
22229: LD_INT 4
22231: PUSH
22232: LD_INT 5
22234: PUSH
22235: LD_INT 6
22237: PUSH
22238: LD_INT 7
22240: PUSH
22241: LD_INT 8
22243: PUSH
22244: LD_INT 9
22246: PUSH
22247: LD_INT 10
22249: PUSH
22250: LD_INT 11
22252: PUSH
22253: LD_INT 12
22255: PUSH
22256: LD_INT 13
22258: PUSH
22259: LD_INT 14
22261: PUSH
22262: LD_INT 15
22264: PUSH
22265: LD_INT 16
22267: PUSH
22268: LD_INT 17
22270: PUSH
22271: LD_INT 18
22273: PUSH
22274: LD_INT 19
22276: PUSH
22277: LD_INT 20
22279: PUSH
22280: LD_INT 21
22282: PUSH
22283: LD_INT 22
22285: PUSH
22286: LD_INT 23
22288: PUSH
22289: LD_INT 24
22291: PUSH
22292: LD_INT 25
22294: PUSH
22295: LD_INT 26
22297: PUSH
22298: LD_INT 28
22300: PUSH
22301: LD_INT 30
22303: PUSH
22304: LD_INT 31
22306: PUSH
22307: LD_INT 32
22309: PUSH
22310: LD_INT 36
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 101
22346: PUSH
22347: LD_INT 102
22349: PUSH
22350: LD_INT 103
22352: PUSH
22353: LD_INT 104
22355: PUSH
22356: LD_INT 105
22358: PUSH
22359: LD_INT 106
22361: PUSH
22362: LD_INT 107
22364: PUSH
22365: LD_INT 108
22367: PUSH
22368: LD_INT 109
22370: PUSH
22371: LD_INT 110
22373: PUSH
22374: LD_INT 111
22376: PUSH
22377: LD_INT 112
22379: PUSH
22380: LD_INT 114
22382: PUSH
22383: LD_INT 116
22385: PUSH
22386: LD_INT 117
22388: PUSH
22389: LD_INT 118
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: ST_TO_ADDR
22414: GO 24309
22416: LD_INT 11
22418: DOUBLE
22419: EQUAL
22420: IFTRUE 22424
22422: GO 22628
22424: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22425: LD_ADDR_VAR 0 2
22429: PUSH
22430: LD_INT 2
22432: PUSH
22433: LD_INT 3
22435: PUSH
22436: LD_INT 4
22438: PUSH
22439: LD_INT 5
22441: PUSH
22442: LD_INT 6
22444: PUSH
22445: LD_INT 7
22447: PUSH
22448: LD_INT 8
22450: PUSH
22451: LD_INT 9
22453: PUSH
22454: LD_INT 10
22456: PUSH
22457: LD_INT 11
22459: PUSH
22460: LD_INT 12
22462: PUSH
22463: LD_INT 13
22465: PUSH
22466: LD_INT 14
22468: PUSH
22469: LD_INT 15
22471: PUSH
22472: LD_INT 16
22474: PUSH
22475: LD_INT 17
22477: PUSH
22478: LD_INT 18
22480: PUSH
22481: LD_INT 19
22483: PUSH
22484: LD_INT 20
22486: PUSH
22487: LD_INT 21
22489: PUSH
22490: LD_INT 22
22492: PUSH
22493: LD_INT 23
22495: PUSH
22496: LD_INT 24
22498: PUSH
22499: LD_INT 25
22501: PUSH
22502: LD_INT 26
22504: PUSH
22505: LD_INT 28
22507: PUSH
22508: LD_INT 30
22510: PUSH
22511: LD_INT 31
22513: PUSH
22514: LD_INT 32
22516: PUSH
22517: LD_INT 34
22519: PUSH
22520: LD_INT 36
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 101
22558: PUSH
22559: LD_INT 102
22561: PUSH
22562: LD_INT 103
22564: PUSH
22565: LD_INT 104
22567: PUSH
22568: LD_INT 105
22570: PUSH
22571: LD_INT 106
22573: PUSH
22574: LD_INT 107
22576: PUSH
22577: LD_INT 108
22579: PUSH
22580: LD_INT 109
22582: PUSH
22583: LD_INT 110
22585: PUSH
22586: LD_INT 111
22588: PUSH
22589: LD_INT 112
22591: PUSH
22592: LD_INT 114
22594: PUSH
22595: LD_INT 116
22597: PUSH
22598: LD_INT 117
22600: PUSH
22601: LD_INT 118
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: ST_TO_ADDR
22626: GO 24309
22628: LD_INT 12
22630: DOUBLE
22631: EQUAL
22632: IFTRUE 22636
22634: GO 22856
22636: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22637: LD_ADDR_VAR 0 2
22641: PUSH
22642: LD_INT 1
22644: PUSH
22645: LD_INT 2
22647: PUSH
22648: LD_INT 3
22650: PUSH
22651: LD_INT 4
22653: PUSH
22654: LD_INT 5
22656: PUSH
22657: LD_INT 6
22659: PUSH
22660: LD_INT 7
22662: PUSH
22663: LD_INT 8
22665: PUSH
22666: LD_INT 9
22668: PUSH
22669: LD_INT 10
22671: PUSH
22672: LD_INT 11
22674: PUSH
22675: LD_INT 12
22677: PUSH
22678: LD_INT 13
22680: PUSH
22681: LD_INT 14
22683: PUSH
22684: LD_INT 15
22686: PUSH
22687: LD_INT 16
22689: PUSH
22690: LD_INT 17
22692: PUSH
22693: LD_INT 18
22695: PUSH
22696: LD_INT 19
22698: PUSH
22699: LD_INT 20
22701: PUSH
22702: LD_INT 21
22704: PUSH
22705: LD_INT 22
22707: PUSH
22708: LD_INT 23
22710: PUSH
22711: LD_INT 24
22713: PUSH
22714: LD_INT 25
22716: PUSH
22717: LD_INT 26
22719: PUSH
22720: LD_INT 27
22722: PUSH
22723: LD_INT 28
22725: PUSH
22726: LD_INT 30
22728: PUSH
22729: LD_INT 31
22731: PUSH
22732: LD_INT 32
22734: PUSH
22735: LD_INT 33
22737: PUSH
22738: LD_INT 34
22740: PUSH
22741: LD_INT 36
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 101
22782: PUSH
22783: LD_INT 102
22785: PUSH
22786: LD_INT 103
22788: PUSH
22789: LD_INT 104
22791: PUSH
22792: LD_INT 105
22794: PUSH
22795: LD_INT 106
22797: PUSH
22798: LD_INT 107
22800: PUSH
22801: LD_INT 108
22803: PUSH
22804: LD_INT 109
22806: PUSH
22807: LD_INT 110
22809: PUSH
22810: LD_INT 111
22812: PUSH
22813: LD_INT 112
22815: PUSH
22816: LD_INT 113
22818: PUSH
22819: LD_INT 114
22821: PUSH
22822: LD_INT 116
22824: PUSH
22825: LD_INT 117
22827: PUSH
22828: LD_INT 118
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: ST_TO_ADDR
22854: GO 24309
22856: LD_INT 13
22858: DOUBLE
22859: EQUAL
22860: IFTRUE 22864
22862: GO 23072
22864: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22865: LD_ADDR_VAR 0 2
22869: PUSH
22870: LD_INT 1
22872: PUSH
22873: LD_INT 2
22875: PUSH
22876: LD_INT 3
22878: PUSH
22879: LD_INT 4
22881: PUSH
22882: LD_INT 5
22884: PUSH
22885: LD_INT 8
22887: PUSH
22888: LD_INT 9
22890: PUSH
22891: LD_INT 10
22893: PUSH
22894: LD_INT 11
22896: PUSH
22897: LD_INT 12
22899: PUSH
22900: LD_INT 14
22902: PUSH
22903: LD_INT 15
22905: PUSH
22906: LD_INT 16
22908: PUSH
22909: LD_INT 17
22911: PUSH
22912: LD_INT 18
22914: PUSH
22915: LD_INT 19
22917: PUSH
22918: LD_INT 20
22920: PUSH
22921: LD_INT 21
22923: PUSH
22924: LD_INT 22
22926: PUSH
22927: LD_INT 23
22929: PUSH
22930: LD_INT 24
22932: PUSH
22933: LD_INT 25
22935: PUSH
22936: LD_INT 26
22938: PUSH
22939: LD_INT 27
22941: PUSH
22942: LD_INT 28
22944: PUSH
22945: LD_INT 30
22947: PUSH
22948: LD_INT 31
22950: PUSH
22951: LD_INT 32
22953: PUSH
22954: LD_INT 33
22956: PUSH
22957: LD_INT 34
22959: PUSH
22960: LD_INT 36
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 101
22998: PUSH
22999: LD_INT 102
23001: PUSH
23002: LD_INT 103
23004: PUSH
23005: LD_INT 104
23007: PUSH
23008: LD_INT 105
23010: PUSH
23011: LD_INT 106
23013: PUSH
23014: LD_INT 107
23016: PUSH
23017: LD_INT 108
23019: PUSH
23020: LD_INT 109
23022: PUSH
23023: LD_INT 110
23025: PUSH
23026: LD_INT 111
23028: PUSH
23029: LD_INT 112
23031: PUSH
23032: LD_INT 113
23034: PUSH
23035: LD_INT 114
23037: PUSH
23038: LD_INT 116
23040: PUSH
23041: LD_INT 117
23043: PUSH
23044: LD_INT 118
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: ST_TO_ADDR
23070: GO 24309
23072: LD_INT 14
23074: DOUBLE
23075: EQUAL
23076: IFTRUE 23080
23078: GO 23304
23080: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23081: LD_ADDR_VAR 0 2
23085: PUSH
23086: LD_INT 1
23088: PUSH
23089: LD_INT 2
23091: PUSH
23092: LD_INT 3
23094: PUSH
23095: LD_INT 4
23097: PUSH
23098: LD_INT 5
23100: PUSH
23101: LD_INT 6
23103: PUSH
23104: LD_INT 7
23106: PUSH
23107: LD_INT 8
23109: PUSH
23110: LD_INT 9
23112: PUSH
23113: LD_INT 10
23115: PUSH
23116: LD_INT 11
23118: PUSH
23119: LD_INT 12
23121: PUSH
23122: LD_INT 13
23124: PUSH
23125: LD_INT 14
23127: PUSH
23128: LD_INT 15
23130: PUSH
23131: LD_INT 16
23133: PUSH
23134: LD_INT 17
23136: PUSH
23137: LD_INT 18
23139: PUSH
23140: LD_INT 19
23142: PUSH
23143: LD_INT 20
23145: PUSH
23146: LD_INT 21
23148: PUSH
23149: LD_INT 22
23151: PUSH
23152: LD_INT 23
23154: PUSH
23155: LD_INT 24
23157: PUSH
23158: LD_INT 25
23160: PUSH
23161: LD_INT 26
23163: PUSH
23164: LD_INT 27
23166: PUSH
23167: LD_INT 28
23169: PUSH
23170: LD_INT 29
23172: PUSH
23173: LD_INT 30
23175: PUSH
23176: LD_INT 31
23178: PUSH
23179: LD_INT 32
23181: PUSH
23182: LD_INT 33
23184: PUSH
23185: LD_INT 34
23187: PUSH
23188: LD_INT 36
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 101
23230: PUSH
23231: LD_INT 102
23233: PUSH
23234: LD_INT 103
23236: PUSH
23237: LD_INT 104
23239: PUSH
23240: LD_INT 105
23242: PUSH
23243: LD_INT 106
23245: PUSH
23246: LD_INT 107
23248: PUSH
23249: LD_INT 108
23251: PUSH
23252: LD_INT 109
23254: PUSH
23255: LD_INT 110
23257: PUSH
23258: LD_INT 111
23260: PUSH
23261: LD_INT 112
23263: PUSH
23264: LD_INT 113
23266: PUSH
23267: LD_INT 114
23269: PUSH
23270: LD_INT 116
23272: PUSH
23273: LD_INT 117
23275: PUSH
23276: LD_INT 118
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: ST_TO_ADDR
23302: GO 24309
23304: LD_INT 15
23306: DOUBLE
23307: EQUAL
23308: IFTRUE 23312
23310: GO 23536
23312: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23313: LD_ADDR_VAR 0 2
23317: PUSH
23318: LD_INT 1
23320: PUSH
23321: LD_INT 2
23323: PUSH
23324: LD_INT 3
23326: PUSH
23327: LD_INT 4
23329: PUSH
23330: LD_INT 5
23332: PUSH
23333: LD_INT 6
23335: PUSH
23336: LD_INT 7
23338: PUSH
23339: LD_INT 8
23341: PUSH
23342: LD_INT 9
23344: PUSH
23345: LD_INT 10
23347: PUSH
23348: LD_INT 11
23350: PUSH
23351: LD_INT 12
23353: PUSH
23354: LD_INT 13
23356: PUSH
23357: LD_INT 14
23359: PUSH
23360: LD_INT 15
23362: PUSH
23363: LD_INT 16
23365: PUSH
23366: LD_INT 17
23368: PUSH
23369: LD_INT 18
23371: PUSH
23372: LD_INT 19
23374: PUSH
23375: LD_INT 20
23377: PUSH
23378: LD_INT 21
23380: PUSH
23381: LD_INT 22
23383: PUSH
23384: LD_INT 23
23386: PUSH
23387: LD_INT 24
23389: PUSH
23390: LD_INT 25
23392: PUSH
23393: LD_INT 26
23395: PUSH
23396: LD_INT 27
23398: PUSH
23399: LD_INT 28
23401: PUSH
23402: LD_INT 29
23404: PUSH
23405: LD_INT 30
23407: PUSH
23408: LD_INT 31
23410: PUSH
23411: LD_INT 32
23413: PUSH
23414: LD_INT 33
23416: PUSH
23417: LD_INT 34
23419: PUSH
23420: LD_INT 36
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 101
23462: PUSH
23463: LD_INT 102
23465: PUSH
23466: LD_INT 103
23468: PUSH
23469: LD_INT 104
23471: PUSH
23472: LD_INT 105
23474: PUSH
23475: LD_INT 106
23477: PUSH
23478: LD_INT 107
23480: PUSH
23481: LD_INT 108
23483: PUSH
23484: LD_INT 109
23486: PUSH
23487: LD_INT 110
23489: PUSH
23490: LD_INT 111
23492: PUSH
23493: LD_INT 112
23495: PUSH
23496: LD_INT 113
23498: PUSH
23499: LD_INT 114
23501: PUSH
23502: LD_INT 116
23504: PUSH
23505: LD_INT 117
23507: PUSH
23508: LD_INT 118
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: ST_TO_ADDR
23534: GO 24309
23536: LD_INT 16
23538: DOUBLE
23539: EQUAL
23540: IFTRUE 23544
23542: GO 23680
23544: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23545: LD_ADDR_VAR 0 2
23549: PUSH
23550: LD_INT 2
23552: PUSH
23553: LD_INT 4
23555: PUSH
23556: LD_INT 5
23558: PUSH
23559: LD_INT 7
23561: PUSH
23562: LD_INT 11
23564: PUSH
23565: LD_INT 12
23567: PUSH
23568: LD_INT 15
23570: PUSH
23571: LD_INT 16
23573: PUSH
23574: LD_INT 20
23576: PUSH
23577: LD_INT 21
23579: PUSH
23580: LD_INT 22
23582: PUSH
23583: LD_INT 23
23585: PUSH
23586: LD_INT 25
23588: PUSH
23589: LD_INT 26
23591: PUSH
23592: LD_INT 30
23594: PUSH
23595: LD_INT 31
23597: PUSH
23598: LD_INT 32
23600: PUSH
23601: LD_INT 33
23603: PUSH
23604: LD_INT 34
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 101
23630: PUSH
23631: LD_INT 102
23633: PUSH
23634: LD_INT 103
23636: PUSH
23637: LD_INT 106
23639: PUSH
23640: LD_INT 108
23642: PUSH
23643: LD_INT 112
23645: PUSH
23646: LD_INT 113
23648: PUSH
23649: LD_INT 114
23651: PUSH
23652: LD_INT 116
23654: PUSH
23655: LD_INT 117
23657: PUSH
23658: LD_INT 118
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: ST_TO_ADDR
23678: GO 24309
23680: LD_INT 17
23682: DOUBLE
23683: EQUAL
23684: IFTRUE 23688
23686: GO 23912
23688: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23689: LD_ADDR_VAR 0 2
23693: PUSH
23694: LD_INT 1
23696: PUSH
23697: LD_INT 2
23699: PUSH
23700: LD_INT 3
23702: PUSH
23703: LD_INT 4
23705: PUSH
23706: LD_INT 5
23708: PUSH
23709: LD_INT 6
23711: PUSH
23712: LD_INT 7
23714: PUSH
23715: LD_INT 8
23717: PUSH
23718: LD_INT 9
23720: PUSH
23721: LD_INT 10
23723: PUSH
23724: LD_INT 11
23726: PUSH
23727: LD_INT 12
23729: PUSH
23730: LD_INT 13
23732: PUSH
23733: LD_INT 14
23735: PUSH
23736: LD_INT 15
23738: PUSH
23739: LD_INT 16
23741: PUSH
23742: LD_INT 17
23744: PUSH
23745: LD_INT 18
23747: PUSH
23748: LD_INT 19
23750: PUSH
23751: LD_INT 20
23753: PUSH
23754: LD_INT 21
23756: PUSH
23757: LD_INT 22
23759: PUSH
23760: LD_INT 23
23762: PUSH
23763: LD_INT 24
23765: PUSH
23766: LD_INT 25
23768: PUSH
23769: LD_INT 26
23771: PUSH
23772: LD_INT 27
23774: PUSH
23775: LD_INT 28
23777: PUSH
23778: LD_INT 29
23780: PUSH
23781: LD_INT 30
23783: PUSH
23784: LD_INT 31
23786: PUSH
23787: LD_INT 32
23789: PUSH
23790: LD_INT 33
23792: PUSH
23793: LD_INT 34
23795: PUSH
23796: LD_INT 36
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 101
23838: PUSH
23839: LD_INT 102
23841: PUSH
23842: LD_INT 103
23844: PUSH
23845: LD_INT 104
23847: PUSH
23848: LD_INT 105
23850: PUSH
23851: LD_INT 106
23853: PUSH
23854: LD_INT 107
23856: PUSH
23857: LD_INT 108
23859: PUSH
23860: LD_INT 109
23862: PUSH
23863: LD_INT 110
23865: PUSH
23866: LD_INT 111
23868: PUSH
23869: LD_INT 112
23871: PUSH
23872: LD_INT 113
23874: PUSH
23875: LD_INT 114
23877: PUSH
23878: LD_INT 116
23880: PUSH
23881: LD_INT 117
23883: PUSH
23884: LD_INT 118
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: ST_TO_ADDR
23910: GO 24309
23912: LD_INT 18
23914: DOUBLE
23915: EQUAL
23916: IFTRUE 23920
23918: GO 24068
23920: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23921: LD_ADDR_VAR 0 2
23925: PUSH
23926: LD_INT 2
23928: PUSH
23929: LD_INT 4
23931: PUSH
23932: LD_INT 5
23934: PUSH
23935: LD_INT 7
23937: PUSH
23938: LD_INT 11
23940: PUSH
23941: LD_INT 12
23943: PUSH
23944: LD_INT 15
23946: PUSH
23947: LD_INT 16
23949: PUSH
23950: LD_INT 20
23952: PUSH
23953: LD_INT 21
23955: PUSH
23956: LD_INT 22
23958: PUSH
23959: LD_INT 23
23961: PUSH
23962: LD_INT 25
23964: PUSH
23965: LD_INT 26
23967: PUSH
23968: LD_INT 30
23970: PUSH
23971: LD_INT 31
23973: PUSH
23974: LD_INT 32
23976: PUSH
23977: LD_INT 33
23979: PUSH
23980: LD_INT 34
23982: PUSH
23983: LD_INT 35
23985: PUSH
23986: LD_INT 36
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 101
24014: PUSH
24015: LD_INT 102
24017: PUSH
24018: LD_INT 103
24020: PUSH
24021: LD_INT 106
24023: PUSH
24024: LD_INT 108
24026: PUSH
24027: LD_INT 112
24029: PUSH
24030: LD_INT 113
24032: PUSH
24033: LD_INT 114
24035: PUSH
24036: LD_INT 115
24038: PUSH
24039: LD_INT 116
24041: PUSH
24042: LD_INT 117
24044: PUSH
24045: LD_INT 118
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: ST_TO_ADDR
24066: GO 24309
24068: LD_INT 19
24070: DOUBLE
24071: EQUAL
24072: IFTRUE 24076
24074: GO 24308
24076: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24077: LD_ADDR_VAR 0 2
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: LD_INT 2
24087: PUSH
24088: LD_INT 3
24090: PUSH
24091: LD_INT 4
24093: PUSH
24094: LD_INT 5
24096: PUSH
24097: LD_INT 6
24099: PUSH
24100: LD_INT 7
24102: PUSH
24103: LD_INT 8
24105: PUSH
24106: LD_INT 9
24108: PUSH
24109: LD_INT 10
24111: PUSH
24112: LD_INT 11
24114: PUSH
24115: LD_INT 12
24117: PUSH
24118: LD_INT 13
24120: PUSH
24121: LD_INT 14
24123: PUSH
24124: LD_INT 15
24126: PUSH
24127: LD_INT 16
24129: PUSH
24130: LD_INT 17
24132: PUSH
24133: LD_INT 18
24135: PUSH
24136: LD_INT 19
24138: PUSH
24139: LD_INT 20
24141: PUSH
24142: LD_INT 21
24144: PUSH
24145: LD_INT 22
24147: PUSH
24148: LD_INT 23
24150: PUSH
24151: LD_INT 24
24153: PUSH
24154: LD_INT 25
24156: PUSH
24157: LD_INT 26
24159: PUSH
24160: LD_INT 27
24162: PUSH
24163: LD_INT 28
24165: PUSH
24166: LD_INT 29
24168: PUSH
24169: LD_INT 30
24171: PUSH
24172: LD_INT 31
24174: PUSH
24175: LD_INT 32
24177: PUSH
24178: LD_INT 33
24180: PUSH
24181: LD_INT 34
24183: PUSH
24184: LD_INT 35
24186: PUSH
24187: LD_INT 36
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 101
24230: PUSH
24231: LD_INT 102
24233: PUSH
24234: LD_INT 103
24236: PUSH
24237: LD_INT 104
24239: PUSH
24240: LD_INT 105
24242: PUSH
24243: LD_INT 106
24245: PUSH
24246: LD_INT 107
24248: PUSH
24249: LD_INT 108
24251: PUSH
24252: LD_INT 109
24254: PUSH
24255: LD_INT 110
24257: PUSH
24258: LD_INT 111
24260: PUSH
24261: LD_INT 112
24263: PUSH
24264: LD_INT 113
24266: PUSH
24267: LD_INT 114
24269: PUSH
24270: LD_INT 115
24272: PUSH
24273: LD_INT 116
24275: PUSH
24276: LD_INT 117
24278: PUSH
24279: LD_INT 118
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: ST_TO_ADDR
24306: GO 24309
24308: POP
// end else
24309: GO 24540
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24311: LD_ADDR_VAR 0 2
24315: PUSH
24316: LD_INT 1
24318: PUSH
24319: LD_INT 2
24321: PUSH
24322: LD_INT 3
24324: PUSH
24325: LD_INT 4
24327: PUSH
24328: LD_INT 5
24330: PUSH
24331: LD_INT 6
24333: PUSH
24334: LD_INT 7
24336: PUSH
24337: LD_INT 8
24339: PUSH
24340: LD_INT 9
24342: PUSH
24343: LD_INT 10
24345: PUSH
24346: LD_INT 11
24348: PUSH
24349: LD_INT 12
24351: PUSH
24352: LD_INT 13
24354: PUSH
24355: LD_INT 14
24357: PUSH
24358: LD_INT 15
24360: PUSH
24361: LD_INT 16
24363: PUSH
24364: LD_INT 17
24366: PUSH
24367: LD_INT 18
24369: PUSH
24370: LD_INT 19
24372: PUSH
24373: LD_INT 20
24375: PUSH
24376: LD_INT 21
24378: PUSH
24379: LD_INT 22
24381: PUSH
24382: LD_INT 23
24384: PUSH
24385: LD_INT 24
24387: PUSH
24388: LD_INT 25
24390: PUSH
24391: LD_INT 26
24393: PUSH
24394: LD_INT 27
24396: PUSH
24397: LD_INT 28
24399: PUSH
24400: LD_INT 29
24402: PUSH
24403: LD_INT 30
24405: PUSH
24406: LD_INT 31
24408: PUSH
24409: LD_INT 32
24411: PUSH
24412: LD_INT 33
24414: PUSH
24415: LD_INT 34
24417: PUSH
24418: LD_INT 35
24420: PUSH
24421: LD_INT 36
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 101
24464: PUSH
24465: LD_INT 102
24467: PUSH
24468: LD_INT 103
24470: PUSH
24471: LD_INT 104
24473: PUSH
24474: LD_INT 105
24476: PUSH
24477: LD_INT 106
24479: PUSH
24480: LD_INT 107
24482: PUSH
24483: LD_INT 108
24485: PUSH
24486: LD_INT 109
24488: PUSH
24489: LD_INT 110
24491: PUSH
24492: LD_INT 111
24494: PUSH
24495: LD_INT 112
24497: PUSH
24498: LD_INT 113
24500: PUSH
24501: LD_INT 114
24503: PUSH
24504: LD_INT 115
24506: PUSH
24507: LD_INT 116
24509: PUSH
24510: LD_INT 117
24512: PUSH
24513: LD_INT 118
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: ST_TO_ADDR
// if result then
24540: LD_VAR 0 2
24544: IFFALSE 25330
// begin normal :=  ;
24546: LD_ADDR_VAR 0 5
24550: PUSH
24551: LD_STRING 
24553: ST_TO_ADDR
// hardcore :=  ;
24554: LD_ADDR_VAR 0 6
24558: PUSH
24559: LD_STRING 
24561: ST_TO_ADDR
// active :=  ;
24562: LD_ADDR_VAR 0 7
24566: PUSH
24567: LD_STRING 
24569: ST_TO_ADDR
// for i = 1 to normalCounter do
24570: LD_ADDR_VAR 0 8
24574: PUSH
24575: DOUBLE
24576: LD_INT 1
24578: DEC
24579: ST_TO_ADDR
24580: LD_EXP 37
24584: PUSH
24585: FOR_TO
24586: IFFALSE 24687
// begin tmp := 0 ;
24588: LD_ADDR_VAR 0 3
24592: PUSH
24593: LD_STRING 0
24595: ST_TO_ADDR
// if result [ 1 ] then
24596: LD_VAR 0 2
24600: PUSH
24601: LD_INT 1
24603: ARRAY
24604: IFFALSE 24669
// if result [ 1 ] [ 1 ] = i then
24606: LD_VAR 0 2
24610: PUSH
24611: LD_INT 1
24613: ARRAY
24614: PUSH
24615: LD_INT 1
24617: ARRAY
24618: PUSH
24619: LD_VAR 0 8
24623: EQUAL
24624: IFFALSE 24669
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24626: LD_ADDR_VAR 0 2
24630: PUSH
24631: LD_VAR 0 2
24635: PPUSH
24636: LD_INT 1
24638: PPUSH
24639: LD_VAR 0 2
24643: PUSH
24644: LD_INT 1
24646: ARRAY
24647: PPUSH
24648: LD_INT 1
24650: PPUSH
24651: CALL_OW 3
24655: PPUSH
24656: CALL_OW 1
24660: ST_TO_ADDR
// tmp := 1 ;
24661: LD_ADDR_VAR 0 3
24665: PUSH
24666: LD_STRING 1
24668: ST_TO_ADDR
// end ; normal := normal & tmp ;
24669: LD_ADDR_VAR 0 5
24673: PUSH
24674: LD_VAR 0 5
24678: PUSH
24679: LD_VAR 0 3
24683: STR
24684: ST_TO_ADDR
// end ;
24685: GO 24585
24687: POP
24688: POP
// for i = 1 to hardcoreCounter do
24689: LD_ADDR_VAR 0 8
24693: PUSH
24694: DOUBLE
24695: LD_INT 1
24697: DEC
24698: ST_TO_ADDR
24699: LD_EXP 38
24703: PUSH
24704: FOR_TO
24705: IFFALSE 24810
// begin tmp := 0 ;
24707: LD_ADDR_VAR 0 3
24711: PUSH
24712: LD_STRING 0
24714: ST_TO_ADDR
// if result [ 2 ] then
24715: LD_VAR 0 2
24719: PUSH
24720: LD_INT 2
24722: ARRAY
24723: IFFALSE 24792
// if result [ 2 ] [ 1 ] = 100 + i then
24725: LD_VAR 0 2
24729: PUSH
24730: LD_INT 2
24732: ARRAY
24733: PUSH
24734: LD_INT 1
24736: ARRAY
24737: PUSH
24738: LD_INT 100
24740: PUSH
24741: LD_VAR 0 8
24745: PLUS
24746: EQUAL
24747: IFFALSE 24792
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24749: LD_ADDR_VAR 0 2
24753: PUSH
24754: LD_VAR 0 2
24758: PPUSH
24759: LD_INT 2
24761: PPUSH
24762: LD_VAR 0 2
24766: PUSH
24767: LD_INT 2
24769: ARRAY
24770: PPUSH
24771: LD_INT 1
24773: PPUSH
24774: CALL_OW 3
24778: PPUSH
24779: CALL_OW 1
24783: ST_TO_ADDR
// tmp := 1 ;
24784: LD_ADDR_VAR 0 3
24788: PUSH
24789: LD_STRING 1
24791: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24792: LD_ADDR_VAR 0 6
24796: PUSH
24797: LD_VAR 0 6
24801: PUSH
24802: LD_VAR 0 3
24806: STR
24807: ST_TO_ADDR
// end ;
24808: GO 24704
24810: POP
24811: POP
// if isGameLoad then
24812: LD_VAR 0 1
24816: IFFALSE 25291
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24818: LD_ADDR_VAR 0 4
24822: PUSH
24823: LD_EXP 41
24827: PUSH
24828: LD_EXP 40
24832: PUSH
24833: LD_EXP 42
24837: PUSH
24838: LD_EXP 39
24842: PUSH
24843: LD_EXP 43
24847: PUSH
24848: LD_EXP 44
24852: PUSH
24853: LD_EXP 45
24857: PUSH
24858: LD_EXP 46
24862: PUSH
24863: LD_EXP 47
24867: PUSH
24868: LD_EXP 48
24872: PUSH
24873: LD_EXP 49
24877: PUSH
24878: LD_EXP 50
24882: PUSH
24883: LD_EXP 51
24887: PUSH
24888: LD_EXP 52
24892: PUSH
24893: LD_EXP 60
24897: PUSH
24898: LD_EXP 61
24902: PUSH
24903: LD_EXP 62
24907: PUSH
24908: LD_EXP 63
24912: PUSH
24913: LD_EXP 65
24917: PUSH
24918: LD_EXP 66
24922: PUSH
24923: LD_EXP 67
24927: PUSH
24928: LD_EXP 70
24932: PUSH
24933: LD_EXP 72
24937: PUSH
24938: LD_EXP 73
24942: PUSH
24943: LD_EXP 74
24947: PUSH
24948: LD_EXP 76
24952: PUSH
24953: LD_EXP 77
24957: PUSH
24958: LD_EXP 80
24962: PUSH
24963: LD_EXP 81
24967: PUSH
24968: LD_EXP 82
24972: PUSH
24973: LD_EXP 83
24977: PUSH
24978: LD_EXP 84
24982: PUSH
24983: LD_EXP 85
24987: PUSH
24988: LD_EXP 86
24992: PUSH
24993: LD_EXP 87
24997: PUSH
24998: LD_EXP 88
25002: PUSH
25003: LD_EXP 53
25007: PUSH
25008: LD_EXP 54
25012: PUSH
25013: LD_EXP 57
25017: PUSH
25018: LD_EXP 58
25022: PUSH
25023: LD_EXP 59
25027: PUSH
25028: LD_EXP 55
25032: PUSH
25033: LD_EXP 56
25037: PUSH
25038: LD_EXP 64
25042: PUSH
25043: LD_EXP 68
25047: PUSH
25048: LD_EXP 69
25052: PUSH
25053: LD_EXP 71
25057: PUSH
25058: LD_EXP 75
25062: PUSH
25063: LD_EXP 78
25067: PUSH
25068: LD_EXP 79
25072: PUSH
25073: LD_EXP 89
25077: PUSH
25078: LD_EXP 90
25082: PUSH
25083: LD_EXP 91
25087: PUSH
25088: LD_EXP 92
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: ST_TO_ADDR
// tmp :=  ;
25149: LD_ADDR_VAR 0 3
25153: PUSH
25154: LD_STRING 
25156: ST_TO_ADDR
// for i = 1 to normalCounter do
25157: LD_ADDR_VAR 0 8
25161: PUSH
25162: DOUBLE
25163: LD_INT 1
25165: DEC
25166: ST_TO_ADDR
25167: LD_EXP 37
25171: PUSH
25172: FOR_TO
25173: IFFALSE 25209
// begin if flags [ i ] then
25175: LD_VAR 0 4
25179: PUSH
25180: LD_VAR 0 8
25184: ARRAY
25185: IFFALSE 25207
// tmp := tmp & i & ; ;
25187: LD_ADDR_VAR 0 3
25191: PUSH
25192: LD_VAR 0 3
25196: PUSH
25197: LD_VAR 0 8
25201: STR
25202: PUSH
25203: LD_STRING ;
25205: STR
25206: ST_TO_ADDR
// end ;
25207: GO 25172
25209: POP
25210: POP
// for i = 1 to hardcoreCounter do
25211: LD_ADDR_VAR 0 8
25215: PUSH
25216: DOUBLE
25217: LD_INT 1
25219: DEC
25220: ST_TO_ADDR
25221: LD_EXP 38
25225: PUSH
25226: FOR_TO
25227: IFFALSE 25273
// begin if flags [ normalCounter + i ] then
25229: LD_VAR 0 4
25233: PUSH
25234: LD_EXP 37
25238: PUSH
25239: LD_VAR 0 8
25243: PLUS
25244: ARRAY
25245: IFFALSE 25271
// tmp := tmp & ( 100 + i ) & ; ;
25247: LD_ADDR_VAR 0 3
25251: PUSH
25252: LD_VAR 0 3
25256: PUSH
25257: LD_INT 100
25259: PUSH
25260: LD_VAR 0 8
25264: PLUS
25265: STR
25266: PUSH
25267: LD_STRING ;
25269: STR
25270: ST_TO_ADDR
// end ;
25271: GO 25226
25273: POP
25274: POP
// if tmp then
25275: LD_VAR 0 3
25279: IFFALSE 25291
// active := tmp ;
25281: LD_ADDR_VAR 0 7
25285: PUSH
25286: LD_VAR 0 3
25290: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25291: LD_STRING getStreamItemsFromMission("
25293: PUSH
25294: LD_VAR 0 5
25298: STR
25299: PUSH
25300: LD_STRING ","
25302: STR
25303: PUSH
25304: LD_VAR 0 6
25308: STR
25309: PUSH
25310: LD_STRING ","
25312: STR
25313: PUSH
25314: LD_VAR 0 7
25318: STR
25319: PUSH
25320: LD_STRING ")
25322: STR
25323: PPUSH
25324: CALL_OW 559
// end else
25328: GO 25337
// ToLua ( getStreamItemsFromMission("","","") ) ;
25330: LD_STRING getStreamItemsFromMission("","","")
25332: PPUSH
25333: CALL_OW 559
// end ;
25337: LD_VAR 0 2
25341: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25342: LD_EXP 36
25346: PUSH
25347: LD_EXP 41
25351: AND
25352: IFFALSE 25476
25354: GO 25356
25356: DISABLE
25357: LD_INT 0
25359: PPUSH
25360: PPUSH
// begin enable ;
25361: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25362: LD_ADDR_VAR 0 2
25366: PUSH
25367: LD_INT 22
25369: PUSH
25370: LD_OWVAR 2
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 2
25381: PUSH
25382: LD_INT 34
25384: PUSH
25385: LD_INT 7
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 34
25394: PUSH
25395: LD_INT 45
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 34
25404: PUSH
25405: LD_INT 28
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 34
25414: PUSH
25415: LD_INT 47
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PPUSH
25433: CALL_OW 69
25437: ST_TO_ADDR
// if not tmp then
25438: LD_VAR 0 2
25442: NOT
25443: IFFALSE 25447
// exit ;
25445: GO 25476
// for i in tmp do
25447: LD_ADDR_VAR 0 1
25451: PUSH
25452: LD_VAR 0 2
25456: PUSH
25457: FOR_IN
25458: IFFALSE 25474
// begin SetLives ( i , 0 ) ;
25460: LD_VAR 0 1
25464: PPUSH
25465: LD_INT 0
25467: PPUSH
25468: CALL_OW 234
// end ;
25472: GO 25457
25474: POP
25475: POP
// end ;
25476: PPOPN 2
25478: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25479: LD_EXP 36
25483: PUSH
25484: LD_EXP 42
25488: AND
25489: IFFALSE 25573
25491: GO 25493
25493: DISABLE
25494: LD_INT 0
25496: PPUSH
25497: PPUSH
// begin enable ;
25498: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25499: LD_ADDR_VAR 0 2
25503: PUSH
25504: LD_INT 22
25506: PUSH
25507: LD_OWVAR 2
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 32
25518: PUSH
25519: LD_INT 3
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PPUSH
25530: CALL_OW 69
25534: ST_TO_ADDR
// if not tmp then
25535: LD_VAR 0 2
25539: NOT
25540: IFFALSE 25544
// exit ;
25542: GO 25573
// for i in tmp do
25544: LD_ADDR_VAR 0 1
25548: PUSH
25549: LD_VAR 0 2
25553: PUSH
25554: FOR_IN
25555: IFFALSE 25571
// begin SetLives ( i , 0 ) ;
25557: LD_VAR 0 1
25561: PPUSH
25562: LD_INT 0
25564: PPUSH
25565: CALL_OW 234
// end ;
25569: GO 25554
25571: POP
25572: POP
// end ;
25573: PPOPN 2
25575: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25576: LD_EXP 36
25580: PUSH
25581: LD_EXP 39
25585: AND
25586: IFFALSE 25679
25588: GO 25590
25590: DISABLE
25591: LD_INT 0
25593: PPUSH
// begin enable ;
25594: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25595: LD_ADDR_VAR 0 1
25599: PUSH
25600: LD_INT 22
25602: PUSH
25603: LD_OWVAR 2
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 2
25614: PUSH
25615: LD_INT 25
25617: PUSH
25618: LD_INT 5
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 25
25627: PUSH
25628: LD_INT 9
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 25
25637: PUSH
25638: LD_INT 8
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PPUSH
25655: CALL_OW 69
25659: PUSH
25660: FOR_IN
25661: IFFALSE 25677
// begin SetClass ( i , 1 ) ;
25663: LD_VAR 0 1
25667: PPUSH
25668: LD_INT 1
25670: PPUSH
25671: CALL_OW 336
// end ;
25675: GO 25660
25677: POP
25678: POP
// end ;
25679: PPOPN 1
25681: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25682: LD_EXP 36
25686: PUSH
25687: LD_EXP 40
25691: AND
25692: PUSH
25693: LD_OWVAR 65
25697: PUSH
25698: LD_INT 7
25700: LESS
25701: AND
25702: IFFALSE 25716
25704: GO 25706
25706: DISABLE
// begin enable ;
25707: ENABLE
// game_speed := 7 ;
25708: LD_ADDR_OWVAR 65
25712: PUSH
25713: LD_INT 7
25715: ST_TO_ADDR
// end ;
25716: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25717: LD_EXP 36
25721: PUSH
25722: LD_EXP 43
25726: AND
25727: IFFALSE 25929
25729: GO 25731
25731: DISABLE
25732: LD_INT 0
25734: PPUSH
25735: PPUSH
25736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25737: LD_ADDR_VAR 0 3
25741: PUSH
25742: LD_INT 81
25744: PUSH
25745: LD_OWVAR 2
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 21
25756: PUSH
25757: LD_INT 1
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PPUSH
25768: CALL_OW 69
25772: ST_TO_ADDR
// if not tmp then
25773: LD_VAR 0 3
25777: NOT
25778: IFFALSE 25782
// exit ;
25780: GO 25929
// if tmp > 5 then
25782: LD_VAR 0 3
25786: PUSH
25787: LD_INT 5
25789: GREATER
25790: IFFALSE 25802
// k := 5 else
25792: LD_ADDR_VAR 0 2
25796: PUSH
25797: LD_INT 5
25799: ST_TO_ADDR
25800: GO 25812
// k := tmp ;
25802: LD_ADDR_VAR 0 2
25806: PUSH
25807: LD_VAR 0 3
25811: ST_TO_ADDR
// for i := 1 to k do
25812: LD_ADDR_VAR 0 1
25816: PUSH
25817: DOUBLE
25818: LD_INT 1
25820: DEC
25821: ST_TO_ADDR
25822: LD_VAR 0 2
25826: PUSH
25827: FOR_TO
25828: IFFALSE 25927
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25830: LD_VAR 0 3
25834: PUSH
25835: LD_VAR 0 1
25839: ARRAY
25840: PPUSH
25841: LD_VAR 0 1
25845: PUSH
25846: LD_INT 4
25848: MOD
25849: PUSH
25850: LD_INT 1
25852: PLUS
25853: PPUSH
25854: CALL_OW 259
25858: PUSH
25859: LD_INT 10
25861: LESS
25862: IFFALSE 25925
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25864: LD_VAR 0 3
25868: PUSH
25869: LD_VAR 0 1
25873: ARRAY
25874: PPUSH
25875: LD_VAR 0 1
25879: PUSH
25880: LD_INT 4
25882: MOD
25883: PUSH
25884: LD_INT 1
25886: PLUS
25887: PPUSH
25888: LD_VAR 0 3
25892: PUSH
25893: LD_VAR 0 1
25897: ARRAY
25898: PPUSH
25899: LD_VAR 0 1
25903: PUSH
25904: LD_INT 4
25906: MOD
25907: PUSH
25908: LD_INT 1
25910: PLUS
25911: PPUSH
25912: CALL_OW 259
25916: PUSH
25917: LD_INT 1
25919: PLUS
25920: PPUSH
25921: CALL_OW 237
25925: GO 25827
25927: POP
25928: POP
// end ;
25929: PPOPN 3
25931: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25932: LD_EXP 36
25936: PUSH
25937: LD_EXP 44
25941: AND
25942: IFFALSE 25962
25944: GO 25946
25946: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25947: LD_INT 4
25949: PPUSH
25950: LD_OWVAR 2
25954: PPUSH
25955: LD_INT 0
25957: PPUSH
25958: CALL_OW 324
25962: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25963: LD_EXP 36
25967: PUSH
25968: LD_EXP 73
25972: AND
25973: IFFALSE 25993
25975: GO 25977
25977: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25978: LD_INT 19
25980: PPUSH
25981: LD_OWVAR 2
25985: PPUSH
25986: LD_INT 0
25988: PPUSH
25989: CALL_OW 324
25993: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25994: LD_EXP 36
25998: PUSH
25999: LD_EXP 45
26003: AND
26004: IFFALSE 26106
26006: GO 26008
26008: DISABLE
26009: LD_INT 0
26011: PPUSH
26012: PPUSH
// begin enable ;
26013: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26014: LD_ADDR_VAR 0 2
26018: PUSH
26019: LD_INT 22
26021: PUSH
26022: LD_OWVAR 2
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: LD_INT 34
26036: PUSH
26037: LD_INT 11
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 34
26046: PUSH
26047: LD_INT 30
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: LIST
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PPUSH
26063: CALL_OW 69
26067: ST_TO_ADDR
// if not tmp then
26068: LD_VAR 0 2
26072: NOT
26073: IFFALSE 26077
// exit ;
26075: GO 26106
// for i in tmp do
26077: LD_ADDR_VAR 0 1
26081: PUSH
26082: LD_VAR 0 2
26086: PUSH
26087: FOR_IN
26088: IFFALSE 26104
// begin SetLives ( i , 0 ) ;
26090: LD_VAR 0 1
26094: PPUSH
26095: LD_INT 0
26097: PPUSH
26098: CALL_OW 234
// end ;
26102: GO 26087
26104: POP
26105: POP
// end ;
26106: PPOPN 2
26108: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26109: LD_EXP 36
26113: PUSH
26114: LD_EXP 46
26118: AND
26119: IFFALSE 26139
26121: GO 26123
26123: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26124: LD_INT 32
26126: PPUSH
26127: LD_OWVAR 2
26131: PPUSH
26132: LD_INT 0
26134: PPUSH
26135: CALL_OW 324
26139: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26140: LD_EXP 36
26144: PUSH
26145: LD_EXP 47
26149: AND
26150: IFFALSE 26331
26152: GO 26154
26154: DISABLE
26155: LD_INT 0
26157: PPUSH
26158: PPUSH
26159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26160: LD_ADDR_VAR 0 2
26164: PUSH
26165: LD_INT 22
26167: PUSH
26168: LD_OWVAR 2
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 33
26179: PUSH
26180: LD_INT 3
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PPUSH
26191: CALL_OW 69
26195: ST_TO_ADDR
// if not tmp then
26196: LD_VAR 0 2
26200: NOT
26201: IFFALSE 26205
// exit ;
26203: GO 26331
// side := 0 ;
26205: LD_ADDR_VAR 0 3
26209: PUSH
26210: LD_INT 0
26212: ST_TO_ADDR
// for i := 1 to 8 do
26213: LD_ADDR_VAR 0 1
26217: PUSH
26218: DOUBLE
26219: LD_INT 1
26221: DEC
26222: ST_TO_ADDR
26223: LD_INT 8
26225: PUSH
26226: FOR_TO
26227: IFFALSE 26275
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26229: LD_OWVAR 2
26233: PUSH
26234: LD_VAR 0 1
26238: NONEQUAL
26239: PUSH
26240: LD_OWVAR 2
26244: PPUSH
26245: LD_VAR 0 1
26249: PPUSH
26250: CALL_OW 81
26254: PUSH
26255: LD_INT 2
26257: EQUAL
26258: AND
26259: IFFALSE 26273
// begin side := i ;
26261: LD_ADDR_VAR 0 3
26265: PUSH
26266: LD_VAR 0 1
26270: ST_TO_ADDR
// break ;
26271: GO 26275
// end ;
26273: GO 26226
26275: POP
26276: POP
// if not side then
26277: LD_VAR 0 3
26281: NOT
26282: IFFALSE 26286
// exit ;
26284: GO 26331
// for i := 1 to tmp do
26286: LD_ADDR_VAR 0 1
26290: PUSH
26291: DOUBLE
26292: LD_INT 1
26294: DEC
26295: ST_TO_ADDR
26296: LD_VAR 0 2
26300: PUSH
26301: FOR_TO
26302: IFFALSE 26329
// if Prob ( 60 ) then
26304: LD_INT 60
26306: PPUSH
26307: CALL_OW 13
26311: IFFALSE 26327
// SetSide ( i , side ) ;
26313: LD_VAR 0 1
26317: PPUSH
26318: LD_VAR 0 3
26322: PPUSH
26323: CALL_OW 235
26327: GO 26301
26329: POP
26330: POP
// end ;
26331: PPOPN 3
26333: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26334: LD_EXP 36
26338: PUSH
26339: LD_EXP 49
26343: AND
26344: IFFALSE 26463
26346: GO 26348
26348: DISABLE
26349: LD_INT 0
26351: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26352: LD_ADDR_VAR 0 1
26356: PUSH
26357: LD_INT 22
26359: PUSH
26360: LD_OWVAR 2
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 21
26371: PUSH
26372: LD_INT 1
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 3
26381: PUSH
26382: LD_INT 23
26384: PUSH
26385: LD_INT 0
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: LIST
26400: PPUSH
26401: CALL_OW 69
26405: PUSH
26406: FOR_IN
26407: IFFALSE 26461
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26409: LD_VAR 0 1
26413: PPUSH
26414: CALL_OW 257
26418: PUSH
26419: LD_INT 1
26421: PUSH
26422: LD_INT 2
26424: PUSH
26425: LD_INT 3
26427: PUSH
26428: LD_INT 4
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: IN
26437: IFFALSE 26459
// SetClass ( un , rand ( 1 , 4 ) ) ;
26439: LD_VAR 0 1
26443: PPUSH
26444: LD_INT 1
26446: PPUSH
26447: LD_INT 4
26449: PPUSH
26450: CALL_OW 12
26454: PPUSH
26455: CALL_OW 336
26459: GO 26406
26461: POP
26462: POP
// end ;
26463: PPOPN 1
26465: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26466: LD_EXP 36
26470: PUSH
26471: LD_EXP 48
26475: AND
26476: IFFALSE 26555
26478: GO 26480
26480: DISABLE
26481: LD_INT 0
26483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26484: LD_ADDR_VAR 0 1
26488: PUSH
26489: LD_INT 22
26491: PUSH
26492: LD_OWVAR 2
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 21
26503: PUSH
26504: LD_INT 3
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PPUSH
26515: CALL_OW 69
26519: ST_TO_ADDR
// if not tmp then
26520: LD_VAR 0 1
26524: NOT
26525: IFFALSE 26529
// exit ;
26527: GO 26555
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26529: LD_VAR 0 1
26533: PUSH
26534: LD_INT 1
26536: PPUSH
26537: LD_VAR 0 1
26541: PPUSH
26542: CALL_OW 12
26546: ARRAY
26547: PPUSH
26548: LD_INT 100
26550: PPUSH
26551: CALL_OW 234
// end ;
26555: PPOPN 1
26557: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26558: LD_EXP 36
26562: PUSH
26563: LD_EXP 50
26567: AND
26568: IFFALSE 26666
26570: GO 26572
26572: DISABLE
26573: LD_INT 0
26575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26576: LD_ADDR_VAR 0 1
26580: PUSH
26581: LD_INT 22
26583: PUSH
26584: LD_OWVAR 2
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 21
26595: PUSH
26596: LD_INT 1
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PPUSH
26607: CALL_OW 69
26611: ST_TO_ADDR
// if not tmp then
26612: LD_VAR 0 1
26616: NOT
26617: IFFALSE 26621
// exit ;
26619: GO 26666
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26621: LD_VAR 0 1
26625: PUSH
26626: LD_INT 1
26628: PPUSH
26629: LD_VAR 0 1
26633: PPUSH
26634: CALL_OW 12
26638: ARRAY
26639: PPUSH
26640: LD_INT 1
26642: PPUSH
26643: LD_INT 4
26645: PPUSH
26646: CALL_OW 12
26650: PPUSH
26651: LD_INT 3000
26653: PPUSH
26654: LD_INT 9000
26656: PPUSH
26657: CALL_OW 12
26661: PPUSH
26662: CALL_OW 492
// end ;
26666: PPOPN 1
26668: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26669: LD_EXP 36
26673: PUSH
26674: LD_EXP 51
26678: AND
26679: IFFALSE 26699
26681: GO 26683
26683: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26684: LD_INT 1
26686: PPUSH
26687: LD_OWVAR 2
26691: PPUSH
26692: LD_INT 0
26694: PPUSH
26695: CALL_OW 324
26699: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26700: LD_EXP 36
26704: PUSH
26705: LD_EXP 52
26709: AND
26710: IFFALSE 26793
26712: GO 26714
26714: DISABLE
26715: LD_INT 0
26717: PPUSH
26718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26719: LD_ADDR_VAR 0 2
26723: PUSH
26724: LD_INT 22
26726: PUSH
26727: LD_OWVAR 2
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 21
26738: PUSH
26739: LD_INT 3
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PPUSH
26750: CALL_OW 69
26754: ST_TO_ADDR
// if not tmp then
26755: LD_VAR 0 2
26759: NOT
26760: IFFALSE 26764
// exit ;
26762: GO 26793
// for i in tmp do
26764: LD_ADDR_VAR 0 1
26768: PUSH
26769: LD_VAR 0 2
26773: PUSH
26774: FOR_IN
26775: IFFALSE 26791
// SetBLevel ( i , 10 ) ;
26777: LD_VAR 0 1
26781: PPUSH
26782: LD_INT 10
26784: PPUSH
26785: CALL_OW 241
26789: GO 26774
26791: POP
26792: POP
// end ;
26793: PPOPN 2
26795: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26796: LD_EXP 36
26800: PUSH
26801: LD_EXP 53
26805: AND
26806: IFFALSE 26917
26808: GO 26810
26810: DISABLE
26811: LD_INT 0
26813: PPUSH
26814: PPUSH
26815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26816: LD_ADDR_VAR 0 3
26820: PUSH
26821: LD_INT 22
26823: PUSH
26824: LD_OWVAR 2
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 25
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PPUSH
26847: CALL_OW 69
26851: ST_TO_ADDR
// if not tmp then
26852: LD_VAR 0 3
26856: NOT
26857: IFFALSE 26861
// exit ;
26859: GO 26917
// un := tmp [ rand ( 1 , tmp ) ] ;
26861: LD_ADDR_VAR 0 2
26865: PUSH
26866: LD_VAR 0 3
26870: PUSH
26871: LD_INT 1
26873: PPUSH
26874: LD_VAR 0 3
26878: PPUSH
26879: CALL_OW 12
26883: ARRAY
26884: ST_TO_ADDR
// if Crawls ( un ) then
26885: LD_VAR 0 2
26889: PPUSH
26890: CALL_OW 318
26894: IFFALSE 26905
// ComWalk ( un ) ;
26896: LD_VAR 0 2
26900: PPUSH
26901: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26905: LD_VAR 0 2
26909: PPUSH
26910: LD_INT 5
26912: PPUSH
26913: CALL_OW 336
// end ;
26917: PPOPN 3
26919: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26920: LD_EXP 36
26924: PUSH
26925: LD_EXP 54
26929: AND
26930: PUSH
26931: LD_OWVAR 67
26935: PUSH
26936: LD_INT 4
26938: LESS
26939: AND
26940: IFFALSE 26959
26942: GO 26944
26944: DISABLE
// begin Difficulty := Difficulty + 1 ;
26945: LD_ADDR_OWVAR 67
26949: PUSH
26950: LD_OWVAR 67
26954: PUSH
26955: LD_INT 1
26957: PLUS
26958: ST_TO_ADDR
// end ;
26959: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26960: LD_EXP 36
26964: PUSH
26965: LD_EXP 55
26969: AND
26970: IFFALSE 27073
26972: GO 26974
26974: DISABLE
26975: LD_INT 0
26977: PPUSH
// begin for i := 1 to 5 do
26978: LD_ADDR_VAR 0 1
26982: PUSH
26983: DOUBLE
26984: LD_INT 1
26986: DEC
26987: ST_TO_ADDR
26988: LD_INT 5
26990: PUSH
26991: FOR_TO
26992: IFFALSE 27071
// begin uc_nation := nation_nature ;
26994: LD_ADDR_OWVAR 21
26998: PUSH
26999: LD_INT 0
27001: ST_TO_ADDR
// uc_side := 0 ;
27002: LD_ADDR_OWVAR 20
27006: PUSH
27007: LD_INT 0
27009: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27010: LD_ADDR_OWVAR 29
27014: PUSH
27015: LD_INT 12
27017: PUSH
27018: LD_INT 12
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: ST_TO_ADDR
// hc_agressivity := 20 ;
27025: LD_ADDR_OWVAR 35
27029: PUSH
27030: LD_INT 20
27032: ST_TO_ADDR
// hc_class := class_tiger ;
27033: LD_ADDR_OWVAR 28
27037: PUSH
27038: LD_INT 14
27040: ST_TO_ADDR
// hc_gallery :=  ;
27041: LD_ADDR_OWVAR 33
27045: PUSH
27046: LD_STRING 
27048: ST_TO_ADDR
// hc_name :=  ;
27049: LD_ADDR_OWVAR 26
27053: PUSH
27054: LD_STRING 
27056: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27057: CALL_OW 44
27061: PPUSH
27062: LD_INT 0
27064: PPUSH
27065: CALL_OW 51
// end ;
27069: GO 26991
27071: POP
27072: POP
// end ;
27073: PPOPN 1
27075: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27076: LD_EXP 36
27080: PUSH
27081: LD_EXP 56
27085: AND
27086: IFFALSE 27095
27088: GO 27090
27090: DISABLE
// StreamSibBomb ;
27091: CALL 27096 0 0
27095: END
// export function StreamSibBomb ; var i , x , y ; begin
27096: LD_INT 0
27098: PPUSH
27099: PPUSH
27100: PPUSH
27101: PPUSH
// result := false ;
27102: LD_ADDR_VAR 0 1
27106: PUSH
27107: LD_INT 0
27109: ST_TO_ADDR
// for i := 1 to 16 do
27110: LD_ADDR_VAR 0 2
27114: PUSH
27115: DOUBLE
27116: LD_INT 1
27118: DEC
27119: ST_TO_ADDR
27120: LD_INT 16
27122: PUSH
27123: FOR_TO
27124: IFFALSE 27323
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27126: LD_ADDR_VAR 0 3
27130: PUSH
27131: LD_INT 10
27133: PUSH
27134: LD_INT 20
27136: PUSH
27137: LD_INT 30
27139: PUSH
27140: LD_INT 40
27142: PUSH
27143: LD_INT 50
27145: PUSH
27146: LD_INT 60
27148: PUSH
27149: LD_INT 70
27151: PUSH
27152: LD_INT 80
27154: PUSH
27155: LD_INT 90
27157: PUSH
27158: LD_INT 100
27160: PUSH
27161: LD_INT 110
27163: PUSH
27164: LD_INT 120
27166: PUSH
27167: LD_INT 130
27169: PUSH
27170: LD_INT 140
27172: PUSH
27173: LD_INT 150
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: PPUSH
27196: LD_INT 15
27198: PPUSH
27199: CALL_OW 12
27203: ARRAY
27204: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27205: LD_ADDR_VAR 0 4
27209: PUSH
27210: LD_INT 10
27212: PUSH
27213: LD_INT 20
27215: PUSH
27216: LD_INT 30
27218: PUSH
27219: LD_INT 40
27221: PUSH
27222: LD_INT 50
27224: PUSH
27225: LD_INT 60
27227: PUSH
27228: LD_INT 70
27230: PUSH
27231: LD_INT 80
27233: PUSH
27234: LD_INT 90
27236: PUSH
27237: LD_INT 100
27239: PUSH
27240: LD_INT 110
27242: PUSH
27243: LD_INT 120
27245: PUSH
27246: LD_INT 130
27248: PUSH
27249: LD_INT 140
27251: PUSH
27252: LD_INT 150
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 1
27274: PPUSH
27275: LD_INT 15
27277: PPUSH
27278: CALL_OW 12
27282: ARRAY
27283: ST_TO_ADDR
// if ValidHex ( x , y ) then
27284: LD_VAR 0 3
27288: PPUSH
27289: LD_VAR 0 4
27293: PPUSH
27294: CALL_OW 488
27298: IFFALSE 27321
// begin result := [ x , y ] ;
27300: LD_ADDR_VAR 0 1
27304: PUSH
27305: LD_VAR 0 3
27309: PUSH
27310: LD_VAR 0 4
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: ST_TO_ADDR
// break ;
27319: GO 27323
// end ; end ;
27321: GO 27123
27323: POP
27324: POP
// if result then
27325: LD_VAR 0 1
27329: IFFALSE 27389
// begin ToLua ( playSibBomb() ) ;
27331: LD_STRING playSibBomb()
27333: PPUSH
27334: CALL_OW 559
// wait ( 0 0$14 ) ;
27338: LD_INT 490
27340: PPUSH
27341: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27345: LD_VAR 0 1
27349: PUSH
27350: LD_INT 1
27352: ARRAY
27353: PPUSH
27354: LD_VAR 0 1
27358: PUSH
27359: LD_INT 2
27361: ARRAY
27362: PPUSH
27363: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27367: LD_VAR 0 1
27371: PUSH
27372: LD_INT 1
27374: ARRAY
27375: PPUSH
27376: LD_VAR 0 1
27380: PUSH
27381: LD_INT 2
27383: ARRAY
27384: PPUSH
27385: CALL_OW 429
// end ; end ;
27389: LD_VAR 0 1
27393: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27394: LD_EXP 36
27398: PUSH
27399: LD_EXP 58
27403: AND
27404: IFFALSE 27416
27406: GO 27408
27408: DISABLE
// YouLost (  ) ;
27409: LD_STRING 
27411: PPUSH
27412: CALL_OW 104
27416: END
// every 0 0$1 trigger StreamModeActive and sFog do
27417: LD_EXP 36
27421: PUSH
27422: LD_EXP 57
27426: AND
27427: IFFALSE 27441
27429: GO 27431
27431: DISABLE
// FogOff ( your_side ) ;
27432: LD_OWVAR 2
27436: PPUSH
27437: CALL_OW 344
27441: END
// every 0 0$1 trigger StreamModeActive and sSun do
27442: LD_EXP 36
27446: PUSH
27447: LD_EXP 59
27451: AND
27452: IFFALSE 27480
27454: GO 27456
27456: DISABLE
// begin solar_recharge_percent := 0 ;
27457: LD_ADDR_OWVAR 79
27461: PUSH
27462: LD_INT 0
27464: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27465: LD_INT 10500
27467: PPUSH
27468: CALL_OW 67
// solar_recharge_percent := 100 ;
27472: LD_ADDR_OWVAR 79
27476: PUSH
27477: LD_INT 100
27479: ST_TO_ADDR
// end ;
27480: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27481: LD_EXP 36
27485: PUSH
27486: LD_EXP 60
27490: AND
27491: IFFALSE 27730
27493: GO 27495
27495: DISABLE
27496: LD_INT 0
27498: PPUSH
27499: PPUSH
27500: PPUSH
// begin tmp := [ ] ;
27501: LD_ADDR_VAR 0 3
27505: PUSH
27506: EMPTY
27507: ST_TO_ADDR
// for i := 1 to 6 do
27508: LD_ADDR_VAR 0 1
27512: PUSH
27513: DOUBLE
27514: LD_INT 1
27516: DEC
27517: ST_TO_ADDR
27518: LD_INT 6
27520: PUSH
27521: FOR_TO
27522: IFFALSE 27627
// begin uc_nation := nation_nature ;
27524: LD_ADDR_OWVAR 21
27528: PUSH
27529: LD_INT 0
27531: ST_TO_ADDR
// uc_side := 0 ;
27532: LD_ADDR_OWVAR 20
27536: PUSH
27537: LD_INT 0
27539: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27540: LD_ADDR_OWVAR 29
27544: PUSH
27545: LD_INT 12
27547: PUSH
27548: LD_INT 12
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: ST_TO_ADDR
// hc_agressivity := 20 ;
27555: LD_ADDR_OWVAR 35
27559: PUSH
27560: LD_INT 20
27562: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27563: LD_ADDR_OWVAR 28
27567: PUSH
27568: LD_INT 17
27570: ST_TO_ADDR
// hc_gallery :=  ;
27571: LD_ADDR_OWVAR 33
27575: PUSH
27576: LD_STRING 
27578: ST_TO_ADDR
// hc_name :=  ;
27579: LD_ADDR_OWVAR 26
27583: PUSH
27584: LD_STRING 
27586: ST_TO_ADDR
// un := CreateHuman ;
27587: LD_ADDR_VAR 0 2
27591: PUSH
27592: CALL_OW 44
27596: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27597: LD_VAR 0 2
27601: PPUSH
27602: LD_INT 1
27604: PPUSH
27605: CALL_OW 51
// tmp := tmp ^ un ;
27609: LD_ADDR_VAR 0 3
27613: PUSH
27614: LD_VAR 0 3
27618: PUSH
27619: LD_VAR 0 2
27623: ADD
27624: ST_TO_ADDR
// end ;
27625: GO 27521
27627: POP
27628: POP
// repeat wait ( 0 0$1 ) ;
27629: LD_INT 35
27631: PPUSH
27632: CALL_OW 67
// for un in tmp do
27636: LD_ADDR_VAR 0 2
27640: PUSH
27641: LD_VAR 0 3
27645: PUSH
27646: FOR_IN
27647: IFFALSE 27721
// begin if IsDead ( un ) then
27649: LD_VAR 0 2
27653: PPUSH
27654: CALL_OW 301
27658: IFFALSE 27678
// begin tmp := tmp diff un ;
27660: LD_ADDR_VAR 0 3
27664: PUSH
27665: LD_VAR 0 3
27669: PUSH
27670: LD_VAR 0 2
27674: DIFF
27675: ST_TO_ADDR
// continue ;
27676: GO 27646
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27678: LD_VAR 0 2
27682: PPUSH
27683: LD_INT 3
27685: PUSH
27686: LD_INT 22
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PPUSH
27700: CALL_OW 69
27704: PPUSH
27705: LD_VAR 0 2
27709: PPUSH
27710: CALL_OW 74
27714: PPUSH
27715: CALL_OW 115
// end ;
27719: GO 27646
27721: POP
27722: POP
// until not tmp ;
27723: LD_VAR 0 3
27727: NOT
27728: IFFALSE 27629
// end ;
27730: PPOPN 3
27732: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27733: LD_EXP 36
27737: PUSH
27738: LD_EXP 61
27742: AND
27743: IFFALSE 27797
27745: GO 27747
27747: DISABLE
// begin ToLua ( displayTroll(); ) ;
27748: LD_STRING displayTroll();
27750: PPUSH
27751: CALL_OW 559
// wait ( 3 3$00 ) ;
27755: LD_INT 6300
27757: PPUSH
27758: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27762: LD_STRING hideTroll();
27764: PPUSH
27765: CALL_OW 559
// wait ( 1 1$00 ) ;
27769: LD_INT 2100
27771: PPUSH
27772: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27776: LD_STRING displayTroll();
27778: PPUSH
27779: CALL_OW 559
// wait ( 1 1$00 ) ;
27783: LD_INT 2100
27785: PPUSH
27786: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27790: LD_STRING hideTroll();
27792: PPUSH
27793: CALL_OW 559
// end ;
27797: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27798: LD_EXP 36
27802: PUSH
27803: LD_EXP 62
27807: AND
27808: IFFALSE 27871
27810: GO 27812
27812: DISABLE
27813: LD_INT 0
27815: PPUSH
// begin p := 0 ;
27816: LD_ADDR_VAR 0 1
27820: PUSH
27821: LD_INT 0
27823: ST_TO_ADDR
// repeat game_speed := 1 ;
27824: LD_ADDR_OWVAR 65
27828: PUSH
27829: LD_INT 1
27831: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27832: LD_INT 35
27834: PPUSH
27835: CALL_OW 67
// p := p + 1 ;
27839: LD_ADDR_VAR 0 1
27843: PUSH
27844: LD_VAR 0 1
27848: PUSH
27849: LD_INT 1
27851: PLUS
27852: ST_TO_ADDR
// until p >= 60 ;
27853: LD_VAR 0 1
27857: PUSH
27858: LD_INT 60
27860: GREATEREQUAL
27861: IFFALSE 27824
// game_speed := 4 ;
27863: LD_ADDR_OWVAR 65
27867: PUSH
27868: LD_INT 4
27870: ST_TO_ADDR
// end ;
27871: PPOPN 1
27873: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27874: LD_EXP 36
27878: PUSH
27879: LD_EXP 63
27883: AND
27884: IFFALSE 28030
27886: GO 27888
27888: DISABLE
27889: LD_INT 0
27891: PPUSH
27892: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27893: LD_ADDR_VAR 0 1
27897: PUSH
27898: LD_INT 22
27900: PUSH
27901: LD_OWVAR 2
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 2
27912: PUSH
27913: LD_INT 30
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 30
27925: PUSH
27926: LD_INT 1
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: LIST
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PPUSH
27942: CALL_OW 69
27946: ST_TO_ADDR
// if not depot then
27947: LD_VAR 0 1
27951: NOT
27952: IFFALSE 27956
// exit ;
27954: GO 28030
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27956: LD_ADDR_VAR 0 2
27960: PUSH
27961: LD_VAR 0 1
27965: PUSH
27966: LD_INT 1
27968: PPUSH
27969: LD_VAR 0 1
27973: PPUSH
27974: CALL_OW 12
27978: ARRAY
27979: PPUSH
27980: CALL_OW 274
27984: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27985: LD_VAR 0 2
27989: PPUSH
27990: LD_INT 1
27992: PPUSH
27993: LD_INT 0
27995: PPUSH
27996: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28000: LD_VAR 0 2
28004: PPUSH
28005: LD_INT 2
28007: PPUSH
28008: LD_INT 0
28010: PPUSH
28011: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28015: LD_VAR 0 2
28019: PPUSH
28020: LD_INT 3
28022: PPUSH
28023: LD_INT 0
28025: PPUSH
28026: CALL_OW 277
// end ;
28030: PPOPN 2
28032: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28033: LD_EXP 36
28037: PUSH
28038: LD_EXP 64
28042: AND
28043: IFFALSE 28140
28045: GO 28047
28047: DISABLE
28048: LD_INT 0
28050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28051: LD_ADDR_VAR 0 1
28055: PUSH
28056: LD_INT 22
28058: PUSH
28059: LD_OWVAR 2
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 21
28070: PUSH
28071: LD_INT 1
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 3
28080: PUSH
28081: LD_INT 23
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: LIST
28099: PPUSH
28100: CALL_OW 69
28104: ST_TO_ADDR
// if not tmp then
28105: LD_VAR 0 1
28109: NOT
28110: IFFALSE 28114
// exit ;
28112: GO 28140
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28114: LD_VAR 0 1
28118: PUSH
28119: LD_INT 1
28121: PPUSH
28122: LD_VAR 0 1
28126: PPUSH
28127: CALL_OW 12
28131: ARRAY
28132: PPUSH
28133: LD_INT 200
28135: PPUSH
28136: CALL_OW 234
// end ;
28140: PPOPN 1
28142: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28143: LD_EXP 36
28147: PUSH
28148: LD_EXP 65
28152: AND
28153: IFFALSE 28232
28155: GO 28157
28157: DISABLE
28158: LD_INT 0
28160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28161: LD_ADDR_VAR 0 1
28165: PUSH
28166: LD_INT 22
28168: PUSH
28169: LD_OWVAR 2
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 21
28180: PUSH
28181: LD_INT 2
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PPUSH
28192: CALL_OW 69
28196: ST_TO_ADDR
// if not tmp then
28197: LD_VAR 0 1
28201: NOT
28202: IFFALSE 28206
// exit ;
28204: GO 28232
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28206: LD_VAR 0 1
28210: PUSH
28211: LD_INT 1
28213: PPUSH
28214: LD_VAR 0 1
28218: PPUSH
28219: CALL_OW 12
28223: ARRAY
28224: PPUSH
28225: LD_INT 60
28227: PPUSH
28228: CALL_OW 234
// end ;
28232: PPOPN 1
28234: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28235: LD_EXP 36
28239: PUSH
28240: LD_EXP 66
28244: AND
28245: IFFALSE 28344
28247: GO 28249
28249: DISABLE
28250: LD_INT 0
28252: PPUSH
28253: PPUSH
// begin enable ;
28254: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28255: LD_ADDR_VAR 0 1
28259: PUSH
28260: LD_INT 22
28262: PUSH
28263: LD_OWVAR 2
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 61
28274: PUSH
28275: EMPTY
28276: LIST
28277: PUSH
28278: LD_INT 33
28280: PUSH
28281: LD_INT 2
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: LIST
28292: PPUSH
28293: CALL_OW 69
28297: ST_TO_ADDR
// if not tmp then
28298: LD_VAR 0 1
28302: NOT
28303: IFFALSE 28307
// exit ;
28305: GO 28344
// for i in tmp do
28307: LD_ADDR_VAR 0 2
28311: PUSH
28312: LD_VAR 0 1
28316: PUSH
28317: FOR_IN
28318: IFFALSE 28342
// if IsControledBy ( i ) then
28320: LD_VAR 0 2
28324: PPUSH
28325: CALL_OW 312
28329: IFFALSE 28340
// ComUnlink ( i ) ;
28331: LD_VAR 0 2
28335: PPUSH
28336: CALL_OW 136
28340: GO 28317
28342: POP
28343: POP
// end ;
28344: PPOPN 2
28346: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28347: LD_EXP 36
28351: PUSH
28352: LD_EXP 67
28356: AND
28357: IFFALSE 28497
28359: GO 28361
28361: DISABLE
28362: LD_INT 0
28364: PPUSH
28365: PPUSH
// begin ToLua ( displayPowell(); ) ;
28366: LD_STRING displayPowell();
28368: PPUSH
28369: CALL_OW 559
// uc_side := 0 ;
28373: LD_ADDR_OWVAR 20
28377: PUSH
28378: LD_INT 0
28380: ST_TO_ADDR
// uc_nation := 2 ;
28381: LD_ADDR_OWVAR 21
28385: PUSH
28386: LD_INT 2
28388: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28389: LD_ADDR_OWVAR 37
28393: PUSH
28394: LD_INT 14
28396: ST_TO_ADDR
// vc_engine := engine_siberite ;
28397: LD_ADDR_OWVAR 39
28401: PUSH
28402: LD_INT 3
28404: ST_TO_ADDR
// vc_control := control_apeman ;
28405: LD_ADDR_OWVAR 38
28409: PUSH
28410: LD_INT 5
28412: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28413: LD_ADDR_OWVAR 40
28417: PUSH
28418: LD_INT 29
28420: ST_TO_ADDR
// un := CreateVehicle ;
28421: LD_ADDR_VAR 0 2
28425: PUSH
28426: CALL_OW 45
28430: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28431: LD_VAR 0 2
28435: PPUSH
28436: LD_INT 1
28438: PPUSH
28439: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28443: LD_INT 35
28445: PPUSH
28446: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28450: LD_VAR 0 2
28454: PPUSH
28455: LD_INT 22
28457: PUSH
28458: LD_OWVAR 2
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PPUSH
28467: CALL_OW 69
28471: PPUSH
28472: LD_VAR 0 2
28476: PPUSH
28477: CALL_OW 74
28481: PPUSH
28482: CALL_OW 115
// until IsDead ( un ) ;
28486: LD_VAR 0 2
28490: PPUSH
28491: CALL_OW 301
28495: IFFALSE 28443
// end ;
28497: PPOPN 2
28499: END
// every 0 0$1 trigger StreamModeActive and sStu do
28500: LD_EXP 36
28504: PUSH
28505: LD_EXP 75
28509: AND
28510: IFFALSE 28526
28512: GO 28514
28514: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28515: LD_STRING displayStucuk();
28517: PPUSH
28518: CALL_OW 559
// ResetFog ;
28522: CALL_OW 335
// end ;
28526: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28527: LD_EXP 36
28531: PUSH
28532: LD_EXP 68
28536: AND
28537: IFFALSE 28678
28539: GO 28541
28541: DISABLE
28542: LD_INT 0
28544: PPUSH
28545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28546: LD_ADDR_VAR 0 2
28550: PUSH
28551: LD_INT 22
28553: PUSH
28554: LD_OWVAR 2
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 21
28565: PUSH
28566: LD_INT 1
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PPUSH
28577: CALL_OW 69
28581: ST_TO_ADDR
// if not tmp then
28582: LD_VAR 0 2
28586: NOT
28587: IFFALSE 28591
// exit ;
28589: GO 28678
// un := tmp [ rand ( 1 , tmp ) ] ;
28591: LD_ADDR_VAR 0 1
28595: PUSH
28596: LD_VAR 0 2
28600: PUSH
28601: LD_INT 1
28603: PPUSH
28604: LD_VAR 0 2
28608: PPUSH
28609: CALL_OW 12
28613: ARRAY
28614: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28615: LD_VAR 0 1
28619: PPUSH
28620: LD_INT 0
28622: PPUSH
28623: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28627: LD_VAR 0 1
28631: PPUSH
28632: LD_OWVAR 3
28636: PUSH
28637: LD_VAR 0 1
28641: DIFF
28642: PPUSH
28643: LD_VAR 0 1
28647: PPUSH
28648: CALL_OW 74
28652: PPUSH
28653: CALL_OW 115
// wait ( 0 0$20 ) ;
28657: LD_INT 700
28659: PPUSH
28660: CALL_OW 67
// SetSide ( un , your_side ) ;
28664: LD_VAR 0 1
28668: PPUSH
28669: LD_OWVAR 2
28673: PPUSH
28674: CALL_OW 235
// end ;
28678: PPOPN 2
28680: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28681: LD_EXP 36
28685: PUSH
28686: LD_EXP 69
28690: AND
28691: IFFALSE 28797
28693: GO 28695
28695: DISABLE
28696: LD_INT 0
28698: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28699: LD_ADDR_VAR 0 1
28703: PUSH
28704: LD_INT 22
28706: PUSH
28707: LD_OWVAR 2
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 2
28718: PUSH
28719: LD_INT 30
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 30
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: LIST
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PPUSH
28748: CALL_OW 69
28752: ST_TO_ADDR
// if not depot then
28753: LD_VAR 0 1
28757: NOT
28758: IFFALSE 28762
// exit ;
28760: GO 28797
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28762: LD_VAR 0 1
28766: PUSH
28767: LD_INT 1
28769: ARRAY
28770: PPUSH
28771: CALL_OW 250
28775: PPUSH
28776: LD_VAR 0 1
28780: PUSH
28781: LD_INT 1
28783: ARRAY
28784: PPUSH
28785: CALL_OW 251
28789: PPUSH
28790: LD_INT 70
28792: PPUSH
28793: CALL_OW 495
// end ;
28797: PPOPN 1
28799: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28800: LD_EXP 36
28804: PUSH
28805: LD_EXP 70
28809: AND
28810: IFFALSE 29021
28812: GO 28814
28814: DISABLE
28815: LD_INT 0
28817: PPUSH
28818: PPUSH
28819: PPUSH
28820: PPUSH
28821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28822: LD_ADDR_VAR 0 5
28826: PUSH
28827: LD_INT 22
28829: PUSH
28830: LD_OWVAR 2
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 21
28841: PUSH
28842: LD_INT 1
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PPUSH
28853: CALL_OW 69
28857: ST_TO_ADDR
// if not tmp then
28858: LD_VAR 0 5
28862: NOT
28863: IFFALSE 28867
// exit ;
28865: GO 29021
// for i in tmp do
28867: LD_ADDR_VAR 0 1
28871: PUSH
28872: LD_VAR 0 5
28876: PUSH
28877: FOR_IN
28878: IFFALSE 29019
// begin d := rand ( 0 , 5 ) ;
28880: LD_ADDR_VAR 0 4
28884: PUSH
28885: LD_INT 0
28887: PPUSH
28888: LD_INT 5
28890: PPUSH
28891: CALL_OW 12
28895: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28896: LD_ADDR_VAR 0 2
28900: PUSH
28901: LD_VAR 0 1
28905: PPUSH
28906: CALL_OW 250
28910: PPUSH
28911: LD_VAR 0 4
28915: PPUSH
28916: LD_INT 3
28918: PPUSH
28919: LD_INT 12
28921: PPUSH
28922: CALL_OW 12
28926: PPUSH
28927: CALL_OW 272
28931: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28932: LD_ADDR_VAR 0 3
28936: PUSH
28937: LD_VAR 0 1
28941: PPUSH
28942: CALL_OW 251
28946: PPUSH
28947: LD_VAR 0 4
28951: PPUSH
28952: LD_INT 3
28954: PPUSH
28955: LD_INT 12
28957: PPUSH
28958: CALL_OW 12
28962: PPUSH
28963: CALL_OW 273
28967: ST_TO_ADDR
// if ValidHex ( x , y ) then
28968: LD_VAR 0 2
28972: PPUSH
28973: LD_VAR 0 3
28977: PPUSH
28978: CALL_OW 488
28982: IFFALSE 29017
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28984: LD_VAR 0 1
28988: PPUSH
28989: LD_VAR 0 2
28993: PPUSH
28994: LD_VAR 0 3
28998: PPUSH
28999: LD_INT 3
29001: PPUSH
29002: LD_INT 6
29004: PPUSH
29005: CALL_OW 12
29009: PPUSH
29010: LD_INT 1
29012: PPUSH
29013: CALL_OW 483
// end ;
29017: GO 28877
29019: POP
29020: POP
// end ;
29021: PPOPN 5
29023: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29024: LD_EXP 36
29028: PUSH
29029: LD_EXP 71
29033: AND
29034: IFFALSE 29128
29036: GO 29038
29038: DISABLE
29039: LD_INT 0
29041: PPUSH
29042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29043: LD_ADDR_VAR 0 2
29047: PUSH
29048: LD_INT 22
29050: PUSH
29051: LD_OWVAR 2
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 32
29062: PUSH
29063: LD_INT 1
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 21
29072: PUSH
29073: LD_INT 2
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: LIST
29084: PPUSH
29085: CALL_OW 69
29089: ST_TO_ADDR
// if not tmp then
29090: LD_VAR 0 2
29094: NOT
29095: IFFALSE 29099
// exit ;
29097: GO 29128
// for i in tmp do
29099: LD_ADDR_VAR 0 1
29103: PUSH
29104: LD_VAR 0 2
29108: PUSH
29109: FOR_IN
29110: IFFALSE 29126
// SetFuel ( i , 0 ) ;
29112: LD_VAR 0 1
29116: PPUSH
29117: LD_INT 0
29119: PPUSH
29120: CALL_OW 240
29124: GO 29109
29126: POP
29127: POP
// end ;
29128: PPOPN 2
29130: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29131: LD_EXP 36
29135: PUSH
29136: LD_EXP 72
29140: AND
29141: IFFALSE 29207
29143: GO 29145
29145: DISABLE
29146: LD_INT 0
29148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29149: LD_ADDR_VAR 0 1
29153: PUSH
29154: LD_INT 22
29156: PUSH
29157: LD_OWVAR 2
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 30
29168: PUSH
29169: LD_INT 29
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PPUSH
29180: CALL_OW 69
29184: ST_TO_ADDR
// if not tmp then
29185: LD_VAR 0 1
29189: NOT
29190: IFFALSE 29194
// exit ;
29192: GO 29207
// DestroyUnit ( tmp [ 1 ] ) ;
29194: LD_VAR 0 1
29198: PUSH
29199: LD_INT 1
29201: ARRAY
29202: PPUSH
29203: CALL_OW 65
// end ;
29207: PPOPN 1
29209: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29210: LD_EXP 36
29214: PUSH
29215: LD_EXP 74
29219: AND
29220: IFFALSE 29349
29222: GO 29224
29224: DISABLE
29225: LD_INT 0
29227: PPUSH
// begin uc_side := 0 ;
29228: LD_ADDR_OWVAR 20
29232: PUSH
29233: LD_INT 0
29235: ST_TO_ADDR
// uc_nation := nation_arabian ;
29236: LD_ADDR_OWVAR 21
29240: PUSH
29241: LD_INT 2
29243: ST_TO_ADDR
// hc_gallery :=  ;
29244: LD_ADDR_OWVAR 33
29248: PUSH
29249: LD_STRING 
29251: ST_TO_ADDR
// hc_name :=  ;
29252: LD_ADDR_OWVAR 26
29256: PUSH
29257: LD_STRING 
29259: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29260: LD_INT 1
29262: PPUSH
29263: LD_INT 11
29265: PPUSH
29266: LD_INT 10
29268: PPUSH
29269: CALL_OW 380
// un := CreateHuman ;
29273: LD_ADDR_VAR 0 1
29277: PUSH
29278: CALL_OW 44
29282: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29283: LD_VAR 0 1
29287: PPUSH
29288: LD_INT 1
29290: PPUSH
29291: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29295: LD_INT 35
29297: PPUSH
29298: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29302: LD_VAR 0 1
29306: PPUSH
29307: LD_INT 22
29309: PUSH
29310: LD_OWVAR 2
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PPUSH
29319: CALL_OW 69
29323: PPUSH
29324: LD_VAR 0 1
29328: PPUSH
29329: CALL_OW 74
29333: PPUSH
29334: CALL_OW 115
// until IsDead ( un ) ;
29338: LD_VAR 0 1
29342: PPUSH
29343: CALL_OW 301
29347: IFFALSE 29295
// end ;
29349: PPOPN 1
29351: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29352: LD_EXP 36
29356: PUSH
29357: LD_EXP 76
29361: AND
29362: IFFALSE 29374
29364: GO 29366
29366: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29367: LD_STRING earthquake(getX(game), 0, 32)
29369: PPUSH
29370: CALL_OW 559
29374: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29375: LD_EXP 36
29379: PUSH
29380: LD_EXP 77
29384: AND
29385: IFFALSE 29476
29387: GO 29389
29389: DISABLE
29390: LD_INT 0
29392: PPUSH
// begin enable ;
29393: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29394: LD_ADDR_VAR 0 1
29398: PUSH
29399: LD_INT 22
29401: PUSH
29402: LD_OWVAR 2
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 21
29413: PUSH
29414: LD_INT 2
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 33
29423: PUSH
29424: LD_INT 3
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: LIST
29435: PPUSH
29436: CALL_OW 69
29440: ST_TO_ADDR
// if not tmp then
29441: LD_VAR 0 1
29445: NOT
29446: IFFALSE 29450
// exit ;
29448: GO 29476
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29450: LD_VAR 0 1
29454: PUSH
29455: LD_INT 1
29457: PPUSH
29458: LD_VAR 0 1
29462: PPUSH
29463: CALL_OW 12
29467: ARRAY
29468: PPUSH
29469: LD_INT 1
29471: PPUSH
29472: CALL_OW 234
// end ;
29476: PPOPN 1
29478: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29479: LD_EXP 36
29483: PUSH
29484: LD_EXP 78
29488: AND
29489: IFFALSE 29630
29491: GO 29493
29493: DISABLE
29494: LD_INT 0
29496: PPUSH
29497: PPUSH
29498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29499: LD_ADDR_VAR 0 3
29503: PUSH
29504: LD_INT 22
29506: PUSH
29507: LD_OWVAR 2
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 25
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PPUSH
29530: CALL_OW 69
29534: ST_TO_ADDR
// if not tmp then
29535: LD_VAR 0 3
29539: NOT
29540: IFFALSE 29544
// exit ;
29542: GO 29630
// un := tmp [ rand ( 1 , tmp ) ] ;
29544: LD_ADDR_VAR 0 2
29548: PUSH
29549: LD_VAR 0 3
29553: PUSH
29554: LD_INT 1
29556: PPUSH
29557: LD_VAR 0 3
29561: PPUSH
29562: CALL_OW 12
29566: ARRAY
29567: ST_TO_ADDR
// if Crawls ( un ) then
29568: LD_VAR 0 2
29572: PPUSH
29573: CALL_OW 318
29577: IFFALSE 29588
// ComWalk ( un ) ;
29579: LD_VAR 0 2
29583: PPUSH
29584: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29588: LD_VAR 0 2
29592: PPUSH
29593: LD_INT 9
29595: PPUSH
29596: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29600: LD_INT 28
29602: PPUSH
29603: LD_OWVAR 2
29607: PPUSH
29608: LD_INT 2
29610: PPUSH
29611: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29615: LD_INT 29
29617: PPUSH
29618: LD_OWVAR 2
29622: PPUSH
29623: LD_INT 2
29625: PPUSH
29626: CALL_OW 322
// end ;
29630: PPOPN 3
29632: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29633: LD_EXP 36
29637: PUSH
29638: LD_EXP 79
29642: AND
29643: IFFALSE 29754
29645: GO 29647
29647: DISABLE
29648: LD_INT 0
29650: PPUSH
29651: PPUSH
29652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29653: LD_ADDR_VAR 0 3
29657: PUSH
29658: LD_INT 22
29660: PUSH
29661: LD_OWVAR 2
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 25
29672: PUSH
29673: LD_INT 1
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PPUSH
29684: CALL_OW 69
29688: ST_TO_ADDR
// if not tmp then
29689: LD_VAR 0 3
29693: NOT
29694: IFFALSE 29698
// exit ;
29696: GO 29754
// un := tmp [ rand ( 1 , tmp ) ] ;
29698: LD_ADDR_VAR 0 2
29702: PUSH
29703: LD_VAR 0 3
29707: PUSH
29708: LD_INT 1
29710: PPUSH
29711: LD_VAR 0 3
29715: PPUSH
29716: CALL_OW 12
29720: ARRAY
29721: ST_TO_ADDR
// if Crawls ( un ) then
29722: LD_VAR 0 2
29726: PPUSH
29727: CALL_OW 318
29731: IFFALSE 29742
// ComWalk ( un ) ;
29733: LD_VAR 0 2
29737: PPUSH
29738: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29742: LD_VAR 0 2
29746: PPUSH
29747: LD_INT 8
29749: PPUSH
29750: CALL_OW 336
// end ;
29754: PPOPN 3
29756: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29757: LD_EXP 36
29761: PUSH
29762: LD_EXP 80
29766: AND
29767: IFFALSE 29911
29769: GO 29771
29771: DISABLE
29772: LD_INT 0
29774: PPUSH
29775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29776: LD_ADDR_VAR 0 2
29780: PUSH
29781: LD_INT 22
29783: PUSH
29784: LD_OWVAR 2
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 21
29795: PUSH
29796: LD_INT 2
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 2
29805: PUSH
29806: LD_INT 34
29808: PUSH
29809: LD_INT 12
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 34
29818: PUSH
29819: LD_INT 51
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 34
29828: PUSH
29829: LD_INT 32
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: LIST
29846: PPUSH
29847: CALL_OW 69
29851: ST_TO_ADDR
// if not tmp then
29852: LD_VAR 0 2
29856: NOT
29857: IFFALSE 29861
// exit ;
29859: GO 29911
// for i in tmp do
29861: LD_ADDR_VAR 0 1
29865: PUSH
29866: LD_VAR 0 2
29870: PUSH
29871: FOR_IN
29872: IFFALSE 29909
// if GetCargo ( i , mat_artifact ) = 0 then
29874: LD_VAR 0 1
29878: PPUSH
29879: LD_INT 4
29881: PPUSH
29882: CALL_OW 289
29886: PUSH
29887: LD_INT 0
29889: EQUAL
29890: IFFALSE 29907
// SetCargo ( i , mat_siberit , 100 ) ;
29892: LD_VAR 0 1
29896: PPUSH
29897: LD_INT 3
29899: PPUSH
29900: LD_INT 100
29902: PPUSH
29903: CALL_OW 290
29907: GO 29871
29909: POP
29910: POP
// end ;
29911: PPOPN 2
29913: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29914: LD_EXP 36
29918: PUSH
29919: LD_EXP 81
29923: AND
29924: IFFALSE 30107
29926: GO 29928
29928: DISABLE
29929: LD_INT 0
29931: PPUSH
29932: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29933: LD_ADDR_VAR 0 2
29937: PUSH
29938: LD_INT 22
29940: PUSH
29941: LD_OWVAR 2
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PPUSH
29950: CALL_OW 69
29954: ST_TO_ADDR
// if not tmp then
29955: LD_VAR 0 2
29959: NOT
29960: IFFALSE 29964
// exit ;
29962: GO 30107
// for i := 1 to 2 do
29964: LD_ADDR_VAR 0 1
29968: PUSH
29969: DOUBLE
29970: LD_INT 1
29972: DEC
29973: ST_TO_ADDR
29974: LD_INT 2
29976: PUSH
29977: FOR_TO
29978: IFFALSE 30105
// begin uc_side := your_side ;
29980: LD_ADDR_OWVAR 20
29984: PUSH
29985: LD_OWVAR 2
29989: ST_TO_ADDR
// uc_nation := nation_american ;
29990: LD_ADDR_OWVAR 21
29994: PUSH
29995: LD_INT 1
29997: ST_TO_ADDR
// vc_chassis := us_morphling ;
29998: LD_ADDR_OWVAR 37
30002: PUSH
30003: LD_INT 5
30005: ST_TO_ADDR
// vc_engine := engine_siberite ;
30006: LD_ADDR_OWVAR 39
30010: PUSH
30011: LD_INT 3
30013: ST_TO_ADDR
// vc_control := control_computer ;
30014: LD_ADDR_OWVAR 38
30018: PUSH
30019: LD_INT 3
30021: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30022: LD_ADDR_OWVAR 40
30026: PUSH
30027: LD_INT 10
30029: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30030: LD_VAR 0 2
30034: PUSH
30035: LD_INT 1
30037: ARRAY
30038: PPUSH
30039: CALL_OW 310
30043: NOT
30044: IFFALSE 30091
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30046: CALL_OW 45
30050: PPUSH
30051: LD_VAR 0 2
30055: PUSH
30056: LD_INT 1
30058: ARRAY
30059: PPUSH
30060: CALL_OW 250
30064: PPUSH
30065: LD_VAR 0 2
30069: PUSH
30070: LD_INT 1
30072: ARRAY
30073: PPUSH
30074: CALL_OW 251
30078: PPUSH
30079: LD_INT 12
30081: PPUSH
30082: LD_INT 1
30084: PPUSH
30085: CALL_OW 50
30089: GO 30103
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30091: CALL_OW 45
30095: PPUSH
30096: LD_INT 1
30098: PPUSH
30099: CALL_OW 51
// end ;
30103: GO 29977
30105: POP
30106: POP
// end ;
30107: PPOPN 2
30109: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30110: LD_EXP 36
30114: PUSH
30115: LD_EXP 82
30119: AND
30120: IFFALSE 30342
30122: GO 30124
30124: DISABLE
30125: LD_INT 0
30127: PPUSH
30128: PPUSH
30129: PPUSH
30130: PPUSH
30131: PPUSH
30132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30133: LD_ADDR_VAR 0 6
30137: PUSH
30138: LD_INT 22
30140: PUSH
30141: LD_OWVAR 2
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 21
30152: PUSH
30153: LD_INT 1
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 3
30162: PUSH
30163: LD_INT 23
30165: PUSH
30166: LD_INT 0
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: LIST
30181: PPUSH
30182: CALL_OW 69
30186: ST_TO_ADDR
// if not tmp then
30187: LD_VAR 0 6
30191: NOT
30192: IFFALSE 30196
// exit ;
30194: GO 30342
// s1 := rand ( 1 , 4 ) ;
30196: LD_ADDR_VAR 0 2
30200: PUSH
30201: LD_INT 1
30203: PPUSH
30204: LD_INT 4
30206: PPUSH
30207: CALL_OW 12
30211: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30212: LD_ADDR_VAR 0 4
30216: PUSH
30217: LD_VAR 0 6
30221: PUSH
30222: LD_INT 1
30224: ARRAY
30225: PPUSH
30226: LD_VAR 0 2
30230: PPUSH
30231: CALL_OW 259
30235: ST_TO_ADDR
// if s1 = 1 then
30236: LD_VAR 0 2
30240: PUSH
30241: LD_INT 1
30243: EQUAL
30244: IFFALSE 30264
// s2 := rand ( 2 , 4 ) else
30246: LD_ADDR_VAR 0 3
30250: PUSH
30251: LD_INT 2
30253: PPUSH
30254: LD_INT 4
30256: PPUSH
30257: CALL_OW 12
30261: ST_TO_ADDR
30262: GO 30272
// s2 := 1 ;
30264: LD_ADDR_VAR 0 3
30268: PUSH
30269: LD_INT 1
30271: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30272: LD_ADDR_VAR 0 5
30276: PUSH
30277: LD_VAR 0 6
30281: PUSH
30282: LD_INT 1
30284: ARRAY
30285: PPUSH
30286: LD_VAR 0 3
30290: PPUSH
30291: CALL_OW 259
30295: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30296: LD_VAR 0 6
30300: PUSH
30301: LD_INT 1
30303: ARRAY
30304: PPUSH
30305: LD_VAR 0 2
30309: PPUSH
30310: LD_VAR 0 5
30314: PPUSH
30315: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30319: LD_VAR 0 6
30323: PUSH
30324: LD_INT 1
30326: ARRAY
30327: PPUSH
30328: LD_VAR 0 3
30332: PPUSH
30333: LD_VAR 0 4
30337: PPUSH
30338: CALL_OW 237
// end ;
30342: PPOPN 6
30344: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30345: LD_EXP 36
30349: PUSH
30350: LD_EXP 83
30354: AND
30355: IFFALSE 30434
30357: GO 30359
30359: DISABLE
30360: LD_INT 0
30362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30363: LD_ADDR_VAR 0 1
30367: PUSH
30368: LD_INT 22
30370: PUSH
30371: LD_OWVAR 2
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 30
30382: PUSH
30383: LD_INT 3
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PPUSH
30394: CALL_OW 69
30398: ST_TO_ADDR
// if not tmp then
30399: LD_VAR 0 1
30403: NOT
30404: IFFALSE 30408
// exit ;
30406: GO 30434
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30408: LD_VAR 0 1
30412: PUSH
30413: LD_INT 1
30415: PPUSH
30416: LD_VAR 0 1
30420: PPUSH
30421: CALL_OW 12
30425: ARRAY
30426: PPUSH
30427: LD_INT 1
30429: PPUSH
30430: CALL_OW 234
// end ;
30434: PPOPN 1
30436: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30437: LD_EXP 36
30441: PUSH
30442: LD_EXP 84
30446: AND
30447: IFFALSE 30559
30449: GO 30451
30451: DISABLE
30452: LD_INT 0
30454: PPUSH
30455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30456: LD_ADDR_VAR 0 2
30460: PUSH
30461: LD_INT 22
30463: PUSH
30464: LD_OWVAR 2
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 2
30475: PUSH
30476: LD_INT 30
30478: PUSH
30479: LD_INT 27
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 30
30488: PUSH
30489: LD_INT 26
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 30
30498: PUSH
30499: LD_INT 28
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PPUSH
30516: CALL_OW 69
30520: ST_TO_ADDR
// if not tmp then
30521: LD_VAR 0 2
30525: NOT
30526: IFFALSE 30530
// exit ;
30528: GO 30559
// for i in tmp do
30530: LD_ADDR_VAR 0 1
30534: PUSH
30535: LD_VAR 0 2
30539: PUSH
30540: FOR_IN
30541: IFFALSE 30557
// SetLives ( i , 1 ) ;
30543: LD_VAR 0 1
30547: PPUSH
30548: LD_INT 1
30550: PPUSH
30551: CALL_OW 234
30555: GO 30540
30557: POP
30558: POP
// end ;
30559: PPOPN 2
30561: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30562: LD_EXP 36
30566: PUSH
30567: LD_EXP 85
30571: AND
30572: IFFALSE 30859
30574: GO 30576
30576: DISABLE
30577: LD_INT 0
30579: PPUSH
30580: PPUSH
30581: PPUSH
// begin i := rand ( 1 , 7 ) ;
30582: LD_ADDR_VAR 0 1
30586: PUSH
30587: LD_INT 1
30589: PPUSH
30590: LD_INT 7
30592: PPUSH
30593: CALL_OW 12
30597: ST_TO_ADDR
// case i of 1 :
30598: LD_VAR 0 1
30602: PUSH
30603: LD_INT 1
30605: DOUBLE
30606: EQUAL
30607: IFTRUE 30611
30609: GO 30621
30611: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30612: LD_STRING earthquake(getX(game), 0, 32)
30614: PPUSH
30615: CALL_OW 559
30619: GO 30859
30621: LD_INT 2
30623: DOUBLE
30624: EQUAL
30625: IFTRUE 30629
30627: GO 30643
30629: POP
// begin ToLua ( displayStucuk(); ) ;
30630: LD_STRING displayStucuk();
30632: PPUSH
30633: CALL_OW 559
// ResetFog ;
30637: CALL_OW 335
// end ; 3 :
30641: GO 30859
30643: LD_INT 3
30645: DOUBLE
30646: EQUAL
30647: IFTRUE 30651
30649: GO 30755
30651: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30652: LD_ADDR_VAR 0 2
30656: PUSH
30657: LD_INT 22
30659: PUSH
30660: LD_OWVAR 2
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 25
30671: PUSH
30672: LD_INT 1
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PPUSH
30683: CALL_OW 69
30687: ST_TO_ADDR
// if not tmp then
30688: LD_VAR 0 2
30692: NOT
30693: IFFALSE 30697
// exit ;
30695: GO 30859
// un := tmp [ rand ( 1 , tmp ) ] ;
30697: LD_ADDR_VAR 0 3
30701: PUSH
30702: LD_VAR 0 2
30706: PUSH
30707: LD_INT 1
30709: PPUSH
30710: LD_VAR 0 2
30714: PPUSH
30715: CALL_OW 12
30719: ARRAY
30720: ST_TO_ADDR
// if Crawls ( un ) then
30721: LD_VAR 0 3
30725: PPUSH
30726: CALL_OW 318
30730: IFFALSE 30741
// ComWalk ( un ) ;
30732: LD_VAR 0 3
30736: PPUSH
30737: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30741: LD_VAR 0 3
30745: PPUSH
30746: LD_INT 8
30748: PPUSH
30749: CALL_OW 336
// end ; 4 :
30753: GO 30859
30755: LD_INT 4
30757: DOUBLE
30758: EQUAL
30759: IFTRUE 30763
30761: GO 30837
30763: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30764: LD_ADDR_VAR 0 2
30768: PUSH
30769: LD_INT 22
30771: PUSH
30772: LD_OWVAR 2
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 30
30783: PUSH
30784: LD_INT 29
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PPUSH
30795: CALL_OW 69
30799: ST_TO_ADDR
// if not tmp then
30800: LD_VAR 0 2
30804: NOT
30805: IFFALSE 30809
// exit ;
30807: GO 30859
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30809: LD_VAR 0 2
30813: PUSH
30814: LD_INT 1
30816: ARRAY
30817: PPUSH
30818: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30822: LD_VAR 0 2
30826: PUSH
30827: LD_INT 1
30829: ARRAY
30830: PPUSH
30831: CALL_OW 65
// end ; 5 .. 7 :
30835: GO 30859
30837: LD_INT 5
30839: DOUBLE
30840: GREATEREQUAL
30841: IFFALSE 30849
30843: LD_INT 7
30845: DOUBLE
30846: LESSEQUAL
30847: IFTRUE 30851
30849: GO 30858
30851: POP
// StreamSibBomb ; end ;
30852: CALL 27096 0 0
30856: GO 30859
30858: POP
// end ;
30859: PPOPN 3
30861: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30862: LD_EXP 36
30866: PUSH
30867: LD_EXP 86
30871: AND
30872: IFFALSE 31028
30874: GO 30876
30876: DISABLE
30877: LD_INT 0
30879: PPUSH
30880: PPUSH
30881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30882: LD_ADDR_VAR 0 2
30886: PUSH
30887: LD_INT 81
30889: PUSH
30890: LD_OWVAR 2
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 2
30901: PUSH
30902: LD_INT 21
30904: PUSH
30905: LD_INT 1
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 21
30914: PUSH
30915: LD_INT 2
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: LIST
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PPUSH
30931: CALL_OW 69
30935: ST_TO_ADDR
// if not tmp then
30936: LD_VAR 0 2
30940: NOT
30941: IFFALSE 30945
// exit ;
30943: GO 31028
// p := 0 ;
30945: LD_ADDR_VAR 0 3
30949: PUSH
30950: LD_INT 0
30952: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30953: LD_INT 35
30955: PPUSH
30956: CALL_OW 67
// p := p + 1 ;
30960: LD_ADDR_VAR 0 3
30964: PUSH
30965: LD_VAR 0 3
30969: PUSH
30970: LD_INT 1
30972: PLUS
30973: ST_TO_ADDR
// for i in tmp do
30974: LD_ADDR_VAR 0 1
30978: PUSH
30979: LD_VAR 0 2
30983: PUSH
30984: FOR_IN
30985: IFFALSE 31016
// if GetLives ( i ) < 1000 then
30987: LD_VAR 0 1
30991: PPUSH
30992: CALL_OW 256
30996: PUSH
30997: LD_INT 1000
30999: LESS
31000: IFFALSE 31014
// SetLives ( i , 1000 ) ;
31002: LD_VAR 0 1
31006: PPUSH
31007: LD_INT 1000
31009: PPUSH
31010: CALL_OW 234
31014: GO 30984
31016: POP
31017: POP
// until p > 20 ;
31018: LD_VAR 0 3
31022: PUSH
31023: LD_INT 20
31025: GREATER
31026: IFFALSE 30953
// end ;
31028: PPOPN 3
31030: END
// every 0 0$1 trigger StreamModeActive and sTime do
31031: LD_EXP 36
31035: PUSH
31036: LD_EXP 87
31040: AND
31041: IFFALSE 31076
31043: GO 31045
31045: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31046: LD_INT 28
31048: PPUSH
31049: LD_OWVAR 2
31053: PPUSH
31054: LD_INT 2
31056: PPUSH
31057: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31061: LD_INT 30
31063: PPUSH
31064: LD_OWVAR 2
31068: PPUSH
31069: LD_INT 2
31071: PPUSH
31072: CALL_OW 322
// end ;
31076: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31077: LD_EXP 36
31081: PUSH
31082: LD_EXP 88
31086: AND
31087: IFFALSE 31208
31089: GO 31091
31091: DISABLE
31092: LD_INT 0
31094: PPUSH
31095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31096: LD_ADDR_VAR 0 2
31100: PUSH
31101: LD_INT 22
31103: PUSH
31104: LD_OWVAR 2
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 21
31115: PUSH
31116: LD_INT 1
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 3
31125: PUSH
31126: LD_INT 23
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: LIST
31144: PPUSH
31145: CALL_OW 69
31149: ST_TO_ADDR
// if not tmp then
31150: LD_VAR 0 2
31154: NOT
31155: IFFALSE 31159
// exit ;
31157: GO 31208
// for i in tmp do
31159: LD_ADDR_VAR 0 1
31163: PUSH
31164: LD_VAR 0 2
31168: PUSH
31169: FOR_IN
31170: IFFALSE 31206
// begin if Crawls ( i ) then
31172: LD_VAR 0 1
31176: PPUSH
31177: CALL_OW 318
31181: IFFALSE 31192
// ComWalk ( i ) ;
31183: LD_VAR 0 1
31187: PPUSH
31188: CALL_OW 138
// SetClass ( i , 2 ) ;
31192: LD_VAR 0 1
31196: PPUSH
31197: LD_INT 2
31199: PPUSH
31200: CALL_OW 336
// end ;
31204: GO 31169
31206: POP
31207: POP
// end ;
31208: PPOPN 2
31210: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31211: LD_EXP 36
31215: PUSH
31216: LD_EXP 89
31220: AND
31221: IFFALSE 31509
31223: GO 31225
31225: DISABLE
31226: LD_INT 0
31228: PPUSH
31229: PPUSH
31230: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31231: LD_OWVAR 2
31235: PPUSH
31236: LD_INT 9
31238: PPUSH
31239: LD_INT 1
31241: PPUSH
31242: LD_INT 1
31244: PPUSH
31245: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31249: LD_INT 9
31251: PPUSH
31252: LD_OWVAR 2
31256: PPUSH
31257: CALL_OW 343
// uc_side := 9 ;
31261: LD_ADDR_OWVAR 20
31265: PUSH
31266: LD_INT 9
31268: ST_TO_ADDR
// uc_nation := 2 ;
31269: LD_ADDR_OWVAR 21
31273: PUSH
31274: LD_INT 2
31276: ST_TO_ADDR
// hc_name := Dark Warrior ;
31277: LD_ADDR_OWVAR 26
31281: PUSH
31282: LD_STRING Dark Warrior
31284: ST_TO_ADDR
// hc_gallery :=  ;
31285: LD_ADDR_OWVAR 33
31289: PUSH
31290: LD_STRING 
31292: ST_TO_ADDR
// hc_noskilllimit := true ;
31293: LD_ADDR_OWVAR 76
31297: PUSH
31298: LD_INT 1
31300: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31301: LD_ADDR_OWVAR 31
31305: PUSH
31306: LD_INT 30
31308: PUSH
31309: LD_INT 30
31311: PUSH
31312: LD_INT 30
31314: PUSH
31315: LD_INT 30
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: ST_TO_ADDR
// un := CreateHuman ;
31324: LD_ADDR_VAR 0 3
31328: PUSH
31329: CALL_OW 44
31333: ST_TO_ADDR
// hc_noskilllimit := false ;
31334: LD_ADDR_OWVAR 76
31338: PUSH
31339: LD_INT 0
31341: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31342: LD_VAR 0 3
31346: PPUSH
31347: LD_INT 1
31349: PPUSH
31350: CALL_OW 51
// ToLua ( playRanger() ) ;
31354: LD_STRING playRanger()
31356: PPUSH
31357: CALL_OW 559
// p := 0 ;
31361: LD_ADDR_VAR 0 2
31365: PUSH
31366: LD_INT 0
31368: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31369: LD_INT 35
31371: PPUSH
31372: CALL_OW 67
// p := p + 1 ;
31376: LD_ADDR_VAR 0 2
31380: PUSH
31381: LD_VAR 0 2
31385: PUSH
31386: LD_INT 1
31388: PLUS
31389: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31390: LD_VAR 0 3
31394: PPUSH
31395: CALL_OW 256
31399: PUSH
31400: LD_INT 1000
31402: LESS
31403: IFFALSE 31417
// SetLives ( un , 1000 ) ;
31405: LD_VAR 0 3
31409: PPUSH
31410: LD_INT 1000
31412: PPUSH
31413: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31417: LD_VAR 0 3
31421: PPUSH
31422: LD_INT 81
31424: PUSH
31425: LD_OWVAR 2
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 91
31436: PUSH
31437: LD_VAR 0 3
31441: PUSH
31442: LD_INT 30
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: LIST
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PPUSH
31454: CALL_OW 69
31458: PPUSH
31459: LD_VAR 0 3
31463: PPUSH
31464: CALL_OW 74
31468: PPUSH
31469: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31473: LD_VAR 0 2
31477: PUSH
31478: LD_INT 80
31480: GREATER
31481: PUSH
31482: LD_VAR 0 3
31486: PPUSH
31487: CALL_OW 301
31491: OR
31492: IFFALSE 31369
// if un then
31494: LD_VAR 0 3
31498: IFFALSE 31509
// RemoveUnit ( un ) ;
31500: LD_VAR 0 3
31504: PPUSH
31505: CALL_OW 64
// end ;
31509: PPOPN 3
31511: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31512: LD_EXP 90
31516: IFFALSE 31632
31518: GO 31520
31520: DISABLE
31521: LD_INT 0
31523: PPUSH
31524: PPUSH
31525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31526: LD_ADDR_VAR 0 2
31530: PUSH
31531: LD_INT 81
31533: PUSH
31534: LD_OWVAR 2
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 21
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PPUSH
31557: CALL_OW 69
31561: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31562: LD_STRING playComputer()
31564: PPUSH
31565: CALL_OW 559
// if not tmp then
31569: LD_VAR 0 2
31573: NOT
31574: IFFALSE 31578
// exit ;
31576: GO 31632
// for i in tmp do
31578: LD_ADDR_VAR 0 1
31582: PUSH
31583: LD_VAR 0 2
31587: PUSH
31588: FOR_IN
31589: IFFALSE 31630
// for j := 1 to 4 do
31591: LD_ADDR_VAR 0 3
31595: PUSH
31596: DOUBLE
31597: LD_INT 1
31599: DEC
31600: ST_TO_ADDR
31601: LD_INT 4
31603: PUSH
31604: FOR_TO
31605: IFFALSE 31626
// SetSkill ( i , j , 10 ) ;
31607: LD_VAR 0 1
31611: PPUSH
31612: LD_VAR 0 3
31616: PPUSH
31617: LD_INT 10
31619: PPUSH
31620: CALL_OW 237
31624: GO 31604
31626: POP
31627: POP
31628: GO 31588
31630: POP
31631: POP
// end ;
31632: PPOPN 3
31634: END
// every 0 0$1 trigger s30 do var i , tmp ;
31635: LD_EXP 91
31639: IFFALSE 31708
31641: GO 31643
31643: DISABLE
31644: LD_INT 0
31646: PPUSH
31647: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31648: LD_ADDR_VAR 0 2
31652: PUSH
31653: LD_INT 22
31655: PUSH
31656: LD_OWVAR 2
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PPUSH
31665: CALL_OW 69
31669: ST_TO_ADDR
// if not tmp then
31670: LD_VAR 0 2
31674: NOT
31675: IFFALSE 31679
// exit ;
31677: GO 31708
// for i in tmp do
31679: LD_ADDR_VAR 0 1
31683: PUSH
31684: LD_VAR 0 2
31688: PUSH
31689: FOR_IN
31690: IFFALSE 31706
// SetLives ( i , 300 ) ;
31692: LD_VAR 0 1
31696: PPUSH
31697: LD_INT 300
31699: PPUSH
31700: CALL_OW 234
31704: GO 31689
31706: POP
31707: POP
// end ;
31708: PPOPN 2
31710: END
// every 0 0$1 trigger s60 do var i , tmp ;
31711: LD_EXP 92
31715: IFFALSE 31784
31717: GO 31719
31719: DISABLE
31720: LD_INT 0
31722: PPUSH
31723: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31724: LD_ADDR_VAR 0 2
31728: PUSH
31729: LD_INT 22
31731: PUSH
31732: LD_OWVAR 2
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PPUSH
31741: CALL_OW 69
31745: ST_TO_ADDR
// if not tmp then
31746: LD_VAR 0 2
31750: NOT
31751: IFFALSE 31755
// exit ;
31753: GO 31784
// for i in tmp do
31755: LD_ADDR_VAR 0 1
31759: PUSH
31760: LD_VAR 0 2
31764: PUSH
31765: FOR_IN
31766: IFFALSE 31782
// SetLives ( i , 600 ) ;
31768: LD_VAR 0 1
31772: PPUSH
31773: LD_INT 600
31775: PPUSH
31776: CALL_OW 234
31780: GO 31765
31782: POP
31783: POP
// end ;
31784: PPOPN 2
31786: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31787: LD_INT 0
31789: PPUSH
// case cmd of 301 :
31790: LD_VAR 0 1
31794: PUSH
31795: LD_INT 301
31797: DOUBLE
31798: EQUAL
31799: IFTRUE 31803
31801: GO 31835
31803: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31804: LD_VAR 0 6
31808: PPUSH
31809: LD_VAR 0 7
31813: PPUSH
31814: LD_VAR 0 8
31818: PPUSH
31819: LD_VAR 0 4
31823: PPUSH
31824: LD_VAR 0 5
31828: PPUSH
31829: CALL 33036 0 5
31833: GO 31956
31835: LD_INT 302
31837: DOUBLE
31838: EQUAL
31839: IFTRUE 31843
31841: GO 31880
31843: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31844: LD_VAR 0 6
31848: PPUSH
31849: LD_VAR 0 7
31853: PPUSH
31854: LD_VAR 0 8
31858: PPUSH
31859: LD_VAR 0 9
31863: PPUSH
31864: LD_VAR 0 4
31868: PPUSH
31869: LD_VAR 0 5
31873: PPUSH
31874: CALL 33127 0 6
31878: GO 31956
31880: LD_INT 303
31882: DOUBLE
31883: EQUAL
31884: IFTRUE 31888
31886: GO 31925
31888: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31889: LD_VAR 0 6
31893: PPUSH
31894: LD_VAR 0 7
31898: PPUSH
31899: LD_VAR 0 8
31903: PPUSH
31904: LD_VAR 0 9
31908: PPUSH
31909: LD_VAR 0 4
31913: PPUSH
31914: LD_VAR 0 5
31918: PPUSH
31919: CALL 31961 0 6
31923: GO 31956
31925: LD_INT 304
31927: DOUBLE
31928: EQUAL
31929: IFTRUE 31933
31931: GO 31955
31933: POP
// hHackTeleport ( unit , x , y ) ; end ;
31934: LD_VAR 0 2
31938: PPUSH
31939: LD_VAR 0 4
31943: PPUSH
31944: LD_VAR 0 5
31948: PPUSH
31949: CALL 33720 0 3
31953: GO 31956
31955: POP
// end ;
31956: LD_VAR 0 12
31960: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31961: LD_INT 0
31963: PPUSH
31964: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31965: LD_VAR 0 1
31969: PUSH
31970: LD_INT 1
31972: LESS
31973: PUSH
31974: LD_VAR 0 1
31978: PUSH
31979: LD_INT 3
31981: GREATER
31982: OR
31983: PUSH
31984: LD_VAR 0 5
31988: PPUSH
31989: LD_VAR 0 6
31993: PPUSH
31994: CALL_OW 428
31998: OR
31999: IFFALSE 32003
// exit ;
32001: GO 32723
// uc_side := your_side ;
32003: LD_ADDR_OWVAR 20
32007: PUSH
32008: LD_OWVAR 2
32012: ST_TO_ADDR
// uc_nation := nation ;
32013: LD_ADDR_OWVAR 21
32017: PUSH
32018: LD_VAR 0 1
32022: ST_TO_ADDR
// bc_level = 1 ;
32023: LD_ADDR_OWVAR 43
32027: PUSH
32028: LD_INT 1
32030: ST_TO_ADDR
// case btype of 1 :
32031: LD_VAR 0 2
32035: PUSH
32036: LD_INT 1
32038: DOUBLE
32039: EQUAL
32040: IFTRUE 32044
32042: GO 32055
32044: POP
// bc_type := b_depot ; 2 :
32045: LD_ADDR_OWVAR 42
32049: PUSH
32050: LD_INT 0
32052: ST_TO_ADDR
32053: GO 32667
32055: LD_INT 2
32057: DOUBLE
32058: EQUAL
32059: IFTRUE 32063
32061: GO 32074
32063: POP
// bc_type := b_warehouse ; 3 :
32064: LD_ADDR_OWVAR 42
32068: PUSH
32069: LD_INT 1
32071: ST_TO_ADDR
32072: GO 32667
32074: LD_INT 3
32076: DOUBLE
32077: EQUAL
32078: IFTRUE 32082
32080: GO 32093
32082: POP
// bc_type := b_lab ; 4 .. 9 :
32083: LD_ADDR_OWVAR 42
32087: PUSH
32088: LD_INT 6
32090: ST_TO_ADDR
32091: GO 32667
32093: LD_INT 4
32095: DOUBLE
32096: GREATEREQUAL
32097: IFFALSE 32105
32099: LD_INT 9
32101: DOUBLE
32102: LESSEQUAL
32103: IFTRUE 32107
32105: GO 32159
32107: POP
// begin bc_type := b_lab_half ;
32108: LD_ADDR_OWVAR 42
32112: PUSH
32113: LD_INT 7
32115: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32116: LD_ADDR_OWVAR 44
32120: PUSH
32121: LD_INT 10
32123: PUSH
32124: LD_INT 11
32126: PUSH
32127: LD_INT 12
32129: PUSH
32130: LD_INT 15
32132: PUSH
32133: LD_INT 14
32135: PUSH
32136: LD_INT 13
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: PUSH
32147: LD_VAR 0 2
32151: PUSH
32152: LD_INT 3
32154: MINUS
32155: ARRAY
32156: ST_TO_ADDR
// end ; 10 .. 13 :
32157: GO 32667
32159: LD_INT 10
32161: DOUBLE
32162: GREATEREQUAL
32163: IFFALSE 32171
32165: LD_INT 13
32167: DOUBLE
32168: LESSEQUAL
32169: IFTRUE 32173
32171: GO 32250
32173: POP
// begin bc_type := b_lab_full ;
32174: LD_ADDR_OWVAR 42
32178: PUSH
32179: LD_INT 8
32181: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32182: LD_ADDR_OWVAR 44
32186: PUSH
32187: LD_INT 10
32189: PUSH
32190: LD_INT 12
32192: PUSH
32193: LD_INT 14
32195: PUSH
32196: LD_INT 13
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: PUSH
32205: LD_VAR 0 2
32209: PUSH
32210: LD_INT 9
32212: MINUS
32213: ARRAY
32214: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32215: LD_ADDR_OWVAR 45
32219: PUSH
32220: LD_INT 11
32222: PUSH
32223: LD_INT 15
32225: PUSH
32226: LD_INT 12
32228: PUSH
32229: LD_INT 15
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: PUSH
32238: LD_VAR 0 2
32242: PUSH
32243: LD_INT 9
32245: MINUS
32246: ARRAY
32247: ST_TO_ADDR
// end ; 14 :
32248: GO 32667
32250: LD_INT 14
32252: DOUBLE
32253: EQUAL
32254: IFTRUE 32258
32256: GO 32269
32258: POP
// bc_type := b_workshop ; 15 :
32259: LD_ADDR_OWVAR 42
32263: PUSH
32264: LD_INT 2
32266: ST_TO_ADDR
32267: GO 32667
32269: LD_INT 15
32271: DOUBLE
32272: EQUAL
32273: IFTRUE 32277
32275: GO 32288
32277: POP
// bc_type := b_factory ; 16 :
32278: LD_ADDR_OWVAR 42
32282: PUSH
32283: LD_INT 3
32285: ST_TO_ADDR
32286: GO 32667
32288: LD_INT 16
32290: DOUBLE
32291: EQUAL
32292: IFTRUE 32296
32294: GO 32307
32296: POP
// bc_type := b_ext_gun ; 17 :
32297: LD_ADDR_OWVAR 42
32301: PUSH
32302: LD_INT 17
32304: ST_TO_ADDR
32305: GO 32667
32307: LD_INT 17
32309: DOUBLE
32310: EQUAL
32311: IFTRUE 32315
32313: GO 32343
32315: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32316: LD_ADDR_OWVAR 42
32320: PUSH
32321: LD_INT 19
32323: PUSH
32324: LD_INT 23
32326: PUSH
32327: LD_INT 19
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: LIST
32334: PUSH
32335: LD_VAR 0 1
32339: ARRAY
32340: ST_TO_ADDR
32341: GO 32667
32343: LD_INT 18
32345: DOUBLE
32346: EQUAL
32347: IFTRUE 32351
32349: GO 32362
32351: POP
// bc_type := b_ext_radar ; 19 :
32352: LD_ADDR_OWVAR 42
32356: PUSH
32357: LD_INT 20
32359: ST_TO_ADDR
32360: GO 32667
32362: LD_INT 19
32364: DOUBLE
32365: EQUAL
32366: IFTRUE 32370
32368: GO 32381
32370: POP
// bc_type := b_ext_radio ; 20 :
32371: LD_ADDR_OWVAR 42
32375: PUSH
32376: LD_INT 22
32378: ST_TO_ADDR
32379: GO 32667
32381: LD_INT 20
32383: DOUBLE
32384: EQUAL
32385: IFTRUE 32389
32387: GO 32400
32389: POP
// bc_type := b_ext_siberium ; 21 :
32390: LD_ADDR_OWVAR 42
32394: PUSH
32395: LD_INT 21
32397: ST_TO_ADDR
32398: GO 32667
32400: LD_INT 21
32402: DOUBLE
32403: EQUAL
32404: IFTRUE 32408
32406: GO 32419
32408: POP
// bc_type := b_ext_computer ; 22 :
32409: LD_ADDR_OWVAR 42
32413: PUSH
32414: LD_INT 24
32416: ST_TO_ADDR
32417: GO 32667
32419: LD_INT 22
32421: DOUBLE
32422: EQUAL
32423: IFTRUE 32427
32425: GO 32438
32427: POP
// bc_type := b_ext_track ; 23 :
32428: LD_ADDR_OWVAR 42
32432: PUSH
32433: LD_INT 16
32435: ST_TO_ADDR
32436: GO 32667
32438: LD_INT 23
32440: DOUBLE
32441: EQUAL
32442: IFTRUE 32446
32444: GO 32457
32446: POP
// bc_type := b_ext_laser ; 24 :
32447: LD_ADDR_OWVAR 42
32451: PUSH
32452: LD_INT 25
32454: ST_TO_ADDR
32455: GO 32667
32457: LD_INT 24
32459: DOUBLE
32460: EQUAL
32461: IFTRUE 32465
32463: GO 32476
32465: POP
// bc_type := b_control_tower ; 25 :
32466: LD_ADDR_OWVAR 42
32470: PUSH
32471: LD_INT 36
32473: ST_TO_ADDR
32474: GO 32667
32476: LD_INT 25
32478: DOUBLE
32479: EQUAL
32480: IFTRUE 32484
32482: GO 32495
32484: POP
// bc_type := b_breastwork ; 26 :
32485: LD_ADDR_OWVAR 42
32489: PUSH
32490: LD_INT 31
32492: ST_TO_ADDR
32493: GO 32667
32495: LD_INT 26
32497: DOUBLE
32498: EQUAL
32499: IFTRUE 32503
32501: GO 32514
32503: POP
// bc_type := b_bunker ; 27 :
32504: LD_ADDR_OWVAR 42
32508: PUSH
32509: LD_INT 32
32511: ST_TO_ADDR
32512: GO 32667
32514: LD_INT 27
32516: DOUBLE
32517: EQUAL
32518: IFTRUE 32522
32520: GO 32533
32522: POP
// bc_type := b_turret ; 28 :
32523: LD_ADDR_OWVAR 42
32527: PUSH
32528: LD_INT 33
32530: ST_TO_ADDR
32531: GO 32667
32533: LD_INT 28
32535: DOUBLE
32536: EQUAL
32537: IFTRUE 32541
32539: GO 32552
32541: POP
// bc_type := b_armoury ; 29 :
32542: LD_ADDR_OWVAR 42
32546: PUSH
32547: LD_INT 4
32549: ST_TO_ADDR
32550: GO 32667
32552: LD_INT 29
32554: DOUBLE
32555: EQUAL
32556: IFTRUE 32560
32558: GO 32571
32560: POP
// bc_type := b_barracks ; 30 :
32561: LD_ADDR_OWVAR 42
32565: PUSH
32566: LD_INT 5
32568: ST_TO_ADDR
32569: GO 32667
32571: LD_INT 30
32573: DOUBLE
32574: EQUAL
32575: IFTRUE 32579
32577: GO 32590
32579: POP
// bc_type := b_solar_power ; 31 :
32580: LD_ADDR_OWVAR 42
32584: PUSH
32585: LD_INT 27
32587: ST_TO_ADDR
32588: GO 32667
32590: LD_INT 31
32592: DOUBLE
32593: EQUAL
32594: IFTRUE 32598
32596: GO 32609
32598: POP
// bc_type := b_oil_power ; 32 :
32599: LD_ADDR_OWVAR 42
32603: PUSH
32604: LD_INT 26
32606: ST_TO_ADDR
32607: GO 32667
32609: LD_INT 32
32611: DOUBLE
32612: EQUAL
32613: IFTRUE 32617
32615: GO 32628
32617: POP
// bc_type := b_siberite_power ; 33 :
32618: LD_ADDR_OWVAR 42
32622: PUSH
32623: LD_INT 28
32625: ST_TO_ADDR
32626: GO 32667
32628: LD_INT 33
32630: DOUBLE
32631: EQUAL
32632: IFTRUE 32636
32634: GO 32647
32636: POP
// bc_type := b_oil_mine ; 34 :
32637: LD_ADDR_OWVAR 42
32641: PUSH
32642: LD_INT 29
32644: ST_TO_ADDR
32645: GO 32667
32647: LD_INT 34
32649: DOUBLE
32650: EQUAL
32651: IFTRUE 32655
32653: GO 32666
32655: POP
// bc_type := b_siberite_mine ; end ;
32656: LD_ADDR_OWVAR 42
32660: PUSH
32661: LD_INT 30
32663: ST_TO_ADDR
32664: GO 32667
32666: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32667: LD_ADDR_VAR 0 8
32671: PUSH
32672: LD_VAR 0 5
32676: PPUSH
32677: LD_VAR 0 6
32681: PPUSH
32682: LD_VAR 0 3
32686: PPUSH
32687: CALL_OW 47
32691: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32692: LD_OWVAR 42
32696: PUSH
32697: LD_INT 32
32699: PUSH
32700: LD_INT 33
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: IN
32707: IFFALSE 32723
// PlaceWeaponTurret ( b , weapon ) ;
32709: LD_VAR 0 8
32713: PPUSH
32714: LD_VAR 0 4
32718: PPUSH
32719: CALL_OW 431
// end ;
32723: LD_VAR 0 7
32727: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32728: LD_INT 0
32730: PPUSH
32731: PPUSH
32732: PPUSH
32733: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32734: LD_ADDR_VAR 0 4
32738: PUSH
32739: LD_INT 22
32741: PUSH
32742: LD_OWVAR 2
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 2
32753: PUSH
32754: LD_INT 30
32756: PUSH
32757: LD_INT 0
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 30
32766: PUSH
32767: LD_INT 1
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: LIST
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PPUSH
32783: CALL_OW 69
32787: ST_TO_ADDR
// if not tmp then
32788: LD_VAR 0 4
32792: NOT
32793: IFFALSE 32797
// exit ;
32795: GO 32856
// for i in tmp do
32797: LD_ADDR_VAR 0 2
32801: PUSH
32802: LD_VAR 0 4
32806: PUSH
32807: FOR_IN
32808: IFFALSE 32854
// for j = 1 to 3 do
32810: LD_ADDR_VAR 0 3
32814: PUSH
32815: DOUBLE
32816: LD_INT 1
32818: DEC
32819: ST_TO_ADDR
32820: LD_INT 3
32822: PUSH
32823: FOR_TO
32824: IFFALSE 32850
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32826: LD_VAR 0 2
32830: PPUSH
32831: CALL_OW 274
32835: PPUSH
32836: LD_VAR 0 3
32840: PPUSH
32841: LD_INT 99999
32843: PPUSH
32844: CALL_OW 277
32848: GO 32823
32850: POP
32851: POP
32852: GO 32807
32854: POP
32855: POP
// end ;
32856: LD_VAR 0 1
32860: RET
// export function hHackSetLevel10 ; var i , j ; begin
32861: LD_INT 0
32863: PPUSH
32864: PPUSH
32865: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32866: LD_ADDR_VAR 0 2
32870: PUSH
32871: LD_INT 21
32873: PUSH
32874: LD_INT 1
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PPUSH
32881: CALL_OW 69
32885: PUSH
32886: FOR_IN
32887: IFFALSE 32939
// if IsSelected ( i ) then
32889: LD_VAR 0 2
32893: PPUSH
32894: CALL_OW 306
32898: IFFALSE 32937
// begin for j := 1 to 4 do
32900: LD_ADDR_VAR 0 3
32904: PUSH
32905: DOUBLE
32906: LD_INT 1
32908: DEC
32909: ST_TO_ADDR
32910: LD_INT 4
32912: PUSH
32913: FOR_TO
32914: IFFALSE 32935
// SetSkill ( i , j , 10 ) ;
32916: LD_VAR 0 2
32920: PPUSH
32921: LD_VAR 0 3
32925: PPUSH
32926: LD_INT 10
32928: PPUSH
32929: CALL_OW 237
32933: GO 32913
32935: POP
32936: POP
// end ;
32937: GO 32886
32939: POP
32940: POP
// end ;
32941: LD_VAR 0 1
32945: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32946: LD_INT 0
32948: PPUSH
32949: PPUSH
32950: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32951: LD_ADDR_VAR 0 2
32955: PUSH
32956: LD_INT 22
32958: PUSH
32959: LD_OWVAR 2
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 21
32970: PUSH
32971: LD_INT 1
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PPUSH
32982: CALL_OW 69
32986: PUSH
32987: FOR_IN
32988: IFFALSE 33029
// begin for j := 1 to 4 do
32990: LD_ADDR_VAR 0 3
32994: PUSH
32995: DOUBLE
32996: LD_INT 1
32998: DEC
32999: ST_TO_ADDR
33000: LD_INT 4
33002: PUSH
33003: FOR_TO
33004: IFFALSE 33025
// SetSkill ( i , j , 10 ) ;
33006: LD_VAR 0 2
33010: PPUSH
33011: LD_VAR 0 3
33015: PPUSH
33016: LD_INT 10
33018: PPUSH
33019: CALL_OW 237
33023: GO 33003
33025: POP
33026: POP
// end ;
33027: GO 32987
33029: POP
33030: POP
// end ;
33031: LD_VAR 0 1
33035: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33036: LD_INT 0
33038: PPUSH
// uc_side := your_side ;
33039: LD_ADDR_OWVAR 20
33043: PUSH
33044: LD_OWVAR 2
33048: ST_TO_ADDR
// uc_nation := nation ;
33049: LD_ADDR_OWVAR 21
33053: PUSH
33054: LD_VAR 0 1
33058: ST_TO_ADDR
// InitHc ;
33059: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33063: LD_INT 0
33065: PPUSH
33066: LD_VAR 0 2
33070: PPUSH
33071: LD_VAR 0 3
33075: PPUSH
33076: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33080: LD_VAR 0 4
33084: PPUSH
33085: LD_VAR 0 5
33089: PPUSH
33090: CALL_OW 428
33094: PUSH
33095: LD_INT 0
33097: EQUAL
33098: IFFALSE 33122
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33100: CALL_OW 44
33104: PPUSH
33105: LD_VAR 0 4
33109: PPUSH
33110: LD_VAR 0 5
33114: PPUSH
33115: LD_INT 1
33117: PPUSH
33118: CALL_OW 48
// end ;
33122: LD_VAR 0 6
33126: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33127: LD_INT 0
33129: PPUSH
33130: PPUSH
// uc_side := your_side ;
33131: LD_ADDR_OWVAR 20
33135: PUSH
33136: LD_OWVAR 2
33140: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33141: LD_VAR 0 1
33145: PUSH
33146: LD_INT 1
33148: PUSH
33149: LD_INT 2
33151: PUSH
33152: LD_INT 3
33154: PUSH
33155: LD_INT 4
33157: PUSH
33158: LD_INT 5
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: IN
33168: IFFALSE 33180
// uc_nation := nation_american else
33170: LD_ADDR_OWVAR 21
33174: PUSH
33175: LD_INT 1
33177: ST_TO_ADDR
33178: GO 33223
// if chassis in [ 11 , 12 , 13 , 14 ] then
33180: LD_VAR 0 1
33184: PUSH
33185: LD_INT 11
33187: PUSH
33188: LD_INT 12
33190: PUSH
33191: LD_INT 13
33193: PUSH
33194: LD_INT 14
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: IN
33203: IFFALSE 33215
// uc_nation := nation_arabian else
33205: LD_ADDR_OWVAR 21
33209: PUSH
33210: LD_INT 2
33212: ST_TO_ADDR
33213: GO 33223
// uc_nation := nation_russian ;
33215: LD_ADDR_OWVAR 21
33219: PUSH
33220: LD_INT 3
33222: ST_TO_ADDR
// vc_chassis := chassis ;
33223: LD_ADDR_OWVAR 37
33227: PUSH
33228: LD_VAR 0 1
33232: ST_TO_ADDR
// vc_engine := engine ;
33233: LD_ADDR_OWVAR 39
33237: PUSH
33238: LD_VAR 0 2
33242: ST_TO_ADDR
// vc_control := control ;
33243: LD_ADDR_OWVAR 38
33247: PUSH
33248: LD_VAR 0 3
33252: ST_TO_ADDR
// vc_weapon := weapon ;
33253: LD_ADDR_OWVAR 40
33257: PUSH
33258: LD_VAR 0 4
33262: ST_TO_ADDR
// un := CreateVehicle ;
33263: LD_ADDR_VAR 0 8
33267: PUSH
33268: CALL_OW 45
33272: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33273: LD_VAR 0 8
33277: PPUSH
33278: LD_INT 0
33280: PPUSH
33281: LD_INT 5
33283: PPUSH
33284: CALL_OW 12
33288: PPUSH
33289: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33293: LD_VAR 0 8
33297: PPUSH
33298: LD_VAR 0 5
33302: PPUSH
33303: LD_VAR 0 6
33307: PPUSH
33308: LD_INT 1
33310: PPUSH
33311: CALL_OW 48
// end ;
33315: LD_VAR 0 7
33319: RET
// export hInvincible ; every 1 do
33320: GO 33322
33322: DISABLE
// hInvincible := [ ] ;
33323: LD_ADDR_EXP 93
33327: PUSH
33328: EMPTY
33329: ST_TO_ADDR
33330: END
// every 10 do var i ;
33331: GO 33333
33333: DISABLE
33334: LD_INT 0
33336: PPUSH
// begin enable ;
33337: ENABLE
// if not hInvincible then
33338: LD_EXP 93
33342: NOT
33343: IFFALSE 33347
// exit ;
33345: GO 33391
// for i in hInvincible do
33347: LD_ADDR_VAR 0 1
33351: PUSH
33352: LD_EXP 93
33356: PUSH
33357: FOR_IN
33358: IFFALSE 33389
// if GetLives ( i ) < 1000 then
33360: LD_VAR 0 1
33364: PPUSH
33365: CALL_OW 256
33369: PUSH
33370: LD_INT 1000
33372: LESS
33373: IFFALSE 33387
// SetLives ( i , 1000 ) ;
33375: LD_VAR 0 1
33379: PPUSH
33380: LD_INT 1000
33382: PPUSH
33383: CALL_OW 234
33387: GO 33357
33389: POP
33390: POP
// end ;
33391: PPOPN 1
33393: END
// export function hHackInvincible ; var i ; begin
33394: LD_INT 0
33396: PPUSH
33397: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33398: LD_ADDR_VAR 0 2
33402: PUSH
33403: LD_INT 2
33405: PUSH
33406: LD_INT 21
33408: PUSH
33409: LD_INT 1
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 21
33418: PUSH
33419: LD_INT 2
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: LIST
33430: PPUSH
33431: CALL_OW 69
33435: PUSH
33436: FOR_IN
33437: IFFALSE 33498
// if IsSelected ( i ) then
33439: LD_VAR 0 2
33443: PPUSH
33444: CALL_OW 306
33448: IFFALSE 33496
// begin if i in hInvincible then
33450: LD_VAR 0 2
33454: PUSH
33455: LD_EXP 93
33459: IN
33460: IFFALSE 33480
// hInvincible := hInvincible diff i else
33462: LD_ADDR_EXP 93
33466: PUSH
33467: LD_EXP 93
33471: PUSH
33472: LD_VAR 0 2
33476: DIFF
33477: ST_TO_ADDR
33478: GO 33496
// hInvincible := hInvincible union i ;
33480: LD_ADDR_EXP 93
33484: PUSH
33485: LD_EXP 93
33489: PUSH
33490: LD_VAR 0 2
33494: UNION
33495: ST_TO_ADDR
// end ;
33496: GO 33436
33498: POP
33499: POP
// end ;
33500: LD_VAR 0 1
33504: RET
// export function hHackInvisible ; var i , j ; begin
33505: LD_INT 0
33507: PPUSH
33508: PPUSH
33509: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33510: LD_ADDR_VAR 0 2
33514: PUSH
33515: LD_INT 21
33517: PUSH
33518: LD_INT 1
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PPUSH
33525: CALL_OW 69
33529: PUSH
33530: FOR_IN
33531: IFFALSE 33555
// if IsSelected ( i ) then
33533: LD_VAR 0 2
33537: PPUSH
33538: CALL_OW 306
33542: IFFALSE 33553
// ComForceInvisible ( i ) ;
33544: LD_VAR 0 2
33548: PPUSH
33549: CALL_OW 496
33553: GO 33530
33555: POP
33556: POP
// end ;
33557: LD_VAR 0 1
33561: RET
// export function hHackChangeYourSide ; begin
33562: LD_INT 0
33564: PPUSH
// if your_side = 8 then
33565: LD_OWVAR 2
33569: PUSH
33570: LD_INT 8
33572: EQUAL
33573: IFFALSE 33585
// your_side := 0 else
33575: LD_ADDR_OWVAR 2
33579: PUSH
33580: LD_INT 0
33582: ST_TO_ADDR
33583: GO 33599
// your_side := your_side + 1 ;
33585: LD_ADDR_OWVAR 2
33589: PUSH
33590: LD_OWVAR 2
33594: PUSH
33595: LD_INT 1
33597: PLUS
33598: ST_TO_ADDR
// end ;
33599: LD_VAR 0 1
33603: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33604: LD_INT 0
33606: PPUSH
33607: PPUSH
33608: PPUSH
// for i in all_units do
33609: LD_ADDR_VAR 0 2
33613: PUSH
33614: LD_OWVAR 3
33618: PUSH
33619: FOR_IN
33620: IFFALSE 33698
// if IsSelected ( i ) then
33622: LD_VAR 0 2
33626: PPUSH
33627: CALL_OW 306
33631: IFFALSE 33696
// begin j := GetSide ( i ) ;
33633: LD_ADDR_VAR 0 3
33637: PUSH
33638: LD_VAR 0 2
33642: PPUSH
33643: CALL_OW 255
33647: ST_TO_ADDR
// if j = 8 then
33648: LD_VAR 0 3
33652: PUSH
33653: LD_INT 8
33655: EQUAL
33656: IFFALSE 33668
// j := 0 else
33658: LD_ADDR_VAR 0 3
33662: PUSH
33663: LD_INT 0
33665: ST_TO_ADDR
33666: GO 33682
// j := j + 1 ;
33668: LD_ADDR_VAR 0 3
33672: PUSH
33673: LD_VAR 0 3
33677: PUSH
33678: LD_INT 1
33680: PLUS
33681: ST_TO_ADDR
// SetSide ( i , j ) ;
33682: LD_VAR 0 2
33686: PPUSH
33687: LD_VAR 0 3
33691: PPUSH
33692: CALL_OW 235
// end ;
33696: GO 33619
33698: POP
33699: POP
// end ;
33700: LD_VAR 0 1
33704: RET
// export function hHackFog ; begin
33705: LD_INT 0
33707: PPUSH
// FogOff ( true ) ;
33708: LD_INT 1
33710: PPUSH
33711: CALL_OW 344
// end ;
33715: LD_VAR 0 1
33719: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33720: LD_INT 0
33722: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33723: LD_VAR 0 1
33727: PPUSH
33728: LD_VAR 0 2
33732: PPUSH
33733: LD_VAR 0 3
33737: PPUSH
33738: LD_INT 1
33740: PPUSH
33741: LD_INT 1
33743: PPUSH
33744: CALL_OW 483
// CenterOnXY ( x , y ) ;
33748: LD_VAR 0 2
33752: PPUSH
33753: LD_VAR 0 3
33757: PPUSH
33758: CALL_OW 84
// end ;
33762: LD_VAR 0 4
33766: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33767: LD_INT 0
33769: PPUSH
33770: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33771: LD_VAR 0 1
33775: NOT
33776: PUSH
33777: LD_VAR 0 2
33781: PPUSH
33782: LD_VAR 0 3
33786: PPUSH
33787: CALL_OW 488
33791: NOT
33792: OR
33793: PUSH
33794: LD_VAR 0 1
33798: PPUSH
33799: CALL_OW 266
33803: PUSH
33804: LD_INT 3
33806: NONEQUAL
33807: PUSH
33808: LD_VAR 0 1
33812: PPUSH
33813: CALL_OW 247
33817: PUSH
33818: LD_INT 1
33820: EQUAL
33821: NOT
33822: AND
33823: OR
33824: IFFALSE 33828
// exit ;
33826: GO 33977
// if GetType ( factory ) = unit_human then
33828: LD_VAR 0 1
33832: PPUSH
33833: CALL_OW 247
33837: PUSH
33838: LD_INT 1
33840: EQUAL
33841: IFFALSE 33858
// factory := IsInUnit ( factory ) ;
33843: LD_ADDR_VAR 0 1
33847: PUSH
33848: LD_VAR 0 1
33852: PPUSH
33853: CALL_OW 310
33857: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33858: LD_VAR 0 1
33862: PPUSH
33863: CALL_OW 266
33867: PUSH
33868: LD_INT 3
33870: NONEQUAL
33871: IFFALSE 33875
// exit ;
33873: GO 33977
// if HexInfo ( x , y ) = factory then
33875: LD_VAR 0 2
33879: PPUSH
33880: LD_VAR 0 3
33884: PPUSH
33885: CALL_OW 428
33889: PUSH
33890: LD_VAR 0 1
33894: EQUAL
33895: IFFALSE 33922
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33897: LD_ADDR_EXP 94
33901: PUSH
33902: LD_EXP 94
33906: PPUSH
33907: LD_VAR 0 1
33911: PPUSH
33912: LD_INT 0
33914: PPUSH
33915: CALL_OW 1
33919: ST_TO_ADDR
33920: GO 33973
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33922: LD_ADDR_EXP 94
33926: PUSH
33927: LD_EXP 94
33931: PPUSH
33932: LD_VAR 0 1
33936: PPUSH
33937: LD_VAR 0 1
33941: PPUSH
33942: CALL_OW 255
33946: PUSH
33947: LD_VAR 0 1
33951: PUSH
33952: LD_VAR 0 2
33956: PUSH
33957: LD_VAR 0 3
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: PPUSH
33968: CALL_OW 1
33972: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33973: CALL 33982 0 0
// end ;
33977: LD_VAR 0 4
33981: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33982: LD_INT 0
33984: PPUSH
33985: PPUSH
33986: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33987: LD_STRING resetFactoryWaypoint();
33989: PPUSH
33990: CALL_OW 559
// if factoryWaypoints then
33994: LD_EXP 94
33998: IFFALSE 34124
// begin list := PrepareArray ( factoryWaypoints ) ;
34000: LD_ADDR_VAR 0 3
34004: PUSH
34005: LD_EXP 94
34009: PPUSH
34010: CALL 80574 0 1
34014: ST_TO_ADDR
// for i := 1 to list do
34015: LD_ADDR_VAR 0 2
34019: PUSH
34020: DOUBLE
34021: LD_INT 1
34023: DEC
34024: ST_TO_ADDR
34025: LD_VAR 0 3
34029: PUSH
34030: FOR_TO
34031: IFFALSE 34122
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34033: LD_STRING setFactoryWaypointXY(
34035: PUSH
34036: LD_VAR 0 3
34040: PUSH
34041: LD_VAR 0 2
34045: ARRAY
34046: PUSH
34047: LD_INT 1
34049: ARRAY
34050: STR
34051: PUSH
34052: LD_STRING ,
34054: STR
34055: PUSH
34056: LD_VAR 0 3
34060: PUSH
34061: LD_VAR 0 2
34065: ARRAY
34066: PUSH
34067: LD_INT 2
34069: ARRAY
34070: STR
34071: PUSH
34072: LD_STRING ,
34074: STR
34075: PUSH
34076: LD_VAR 0 3
34080: PUSH
34081: LD_VAR 0 2
34085: ARRAY
34086: PUSH
34087: LD_INT 3
34089: ARRAY
34090: STR
34091: PUSH
34092: LD_STRING ,
34094: STR
34095: PUSH
34096: LD_VAR 0 3
34100: PUSH
34101: LD_VAR 0 2
34105: ARRAY
34106: PUSH
34107: LD_INT 4
34109: ARRAY
34110: STR
34111: PUSH
34112: LD_STRING )
34114: STR
34115: PPUSH
34116: CALL_OW 559
34120: GO 34030
34122: POP
34123: POP
// end ; end ;
34124: LD_VAR 0 1
34128: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34129: LD_INT 0
34131: PPUSH
// if HexInfo ( x , y ) = warehouse then
34132: LD_VAR 0 2
34136: PPUSH
34137: LD_VAR 0 3
34141: PPUSH
34142: CALL_OW 428
34146: PUSH
34147: LD_VAR 0 1
34151: EQUAL
34152: IFFALSE 34179
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34154: LD_ADDR_EXP 95
34158: PUSH
34159: LD_EXP 95
34163: PPUSH
34164: LD_VAR 0 1
34168: PPUSH
34169: LD_INT 0
34171: PPUSH
34172: CALL_OW 1
34176: ST_TO_ADDR
34177: GO 34230
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34179: LD_ADDR_EXP 95
34183: PUSH
34184: LD_EXP 95
34188: PPUSH
34189: LD_VAR 0 1
34193: PPUSH
34194: LD_VAR 0 1
34198: PPUSH
34199: CALL_OW 255
34203: PUSH
34204: LD_VAR 0 1
34208: PUSH
34209: LD_VAR 0 2
34213: PUSH
34214: LD_VAR 0 3
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: PPUSH
34225: CALL_OW 1
34229: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34230: CALL 34239 0 0
// end ;
34234: LD_VAR 0 4
34238: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34239: LD_INT 0
34241: PPUSH
34242: PPUSH
34243: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34244: LD_STRING resetWarehouseGatheringPoints();
34246: PPUSH
34247: CALL_OW 559
// if warehouseGatheringPoints then
34251: LD_EXP 95
34255: IFFALSE 34381
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34257: LD_ADDR_VAR 0 3
34261: PUSH
34262: LD_EXP 95
34266: PPUSH
34267: CALL 80574 0 1
34271: ST_TO_ADDR
// for i := 1 to list do
34272: LD_ADDR_VAR 0 2
34276: PUSH
34277: DOUBLE
34278: LD_INT 1
34280: DEC
34281: ST_TO_ADDR
34282: LD_VAR 0 3
34286: PUSH
34287: FOR_TO
34288: IFFALSE 34379
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34290: LD_STRING setWarehouseGatheringPointXY(
34292: PUSH
34293: LD_VAR 0 3
34297: PUSH
34298: LD_VAR 0 2
34302: ARRAY
34303: PUSH
34304: LD_INT 1
34306: ARRAY
34307: STR
34308: PUSH
34309: LD_STRING ,
34311: STR
34312: PUSH
34313: LD_VAR 0 3
34317: PUSH
34318: LD_VAR 0 2
34322: ARRAY
34323: PUSH
34324: LD_INT 2
34326: ARRAY
34327: STR
34328: PUSH
34329: LD_STRING ,
34331: STR
34332: PUSH
34333: LD_VAR 0 3
34337: PUSH
34338: LD_VAR 0 2
34342: ARRAY
34343: PUSH
34344: LD_INT 3
34346: ARRAY
34347: STR
34348: PUSH
34349: LD_STRING ,
34351: STR
34352: PUSH
34353: LD_VAR 0 3
34357: PUSH
34358: LD_VAR 0 2
34362: ARRAY
34363: PUSH
34364: LD_INT 4
34366: ARRAY
34367: STR
34368: PUSH
34369: LD_STRING )
34371: STR
34372: PPUSH
34373: CALL_OW 559
34377: GO 34287
34379: POP
34380: POP
// end ; end ;
34381: LD_VAR 0 1
34385: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34386: LD_EXP 95
34390: IFFALSE 35075
34392: GO 34394
34394: DISABLE
34395: LD_INT 0
34397: PPUSH
34398: PPUSH
34399: PPUSH
34400: PPUSH
34401: PPUSH
34402: PPUSH
34403: PPUSH
34404: PPUSH
34405: PPUSH
// begin enable ;
34406: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34407: LD_ADDR_VAR 0 3
34411: PUSH
34412: LD_EXP 95
34416: PPUSH
34417: CALL 80574 0 1
34421: ST_TO_ADDR
// if not list then
34422: LD_VAR 0 3
34426: NOT
34427: IFFALSE 34431
// exit ;
34429: GO 35075
// for i := 1 to list do
34431: LD_ADDR_VAR 0 1
34435: PUSH
34436: DOUBLE
34437: LD_INT 1
34439: DEC
34440: ST_TO_ADDR
34441: LD_VAR 0 3
34445: PUSH
34446: FOR_TO
34447: IFFALSE 35073
// begin depot := list [ i ] [ 2 ] ;
34449: LD_ADDR_VAR 0 8
34453: PUSH
34454: LD_VAR 0 3
34458: PUSH
34459: LD_VAR 0 1
34463: ARRAY
34464: PUSH
34465: LD_INT 2
34467: ARRAY
34468: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34469: LD_ADDR_VAR 0 5
34473: PUSH
34474: LD_VAR 0 3
34478: PUSH
34479: LD_VAR 0 1
34483: ARRAY
34484: PUSH
34485: LD_INT 1
34487: ARRAY
34488: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34489: LD_VAR 0 8
34493: PPUSH
34494: CALL_OW 301
34498: PUSH
34499: LD_VAR 0 5
34503: PUSH
34504: LD_VAR 0 8
34508: PPUSH
34509: CALL_OW 255
34513: NONEQUAL
34514: OR
34515: IFFALSE 34544
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34517: LD_ADDR_EXP 95
34521: PUSH
34522: LD_EXP 95
34526: PPUSH
34527: LD_VAR 0 8
34531: PPUSH
34532: LD_INT 0
34534: PPUSH
34535: CALL_OW 1
34539: ST_TO_ADDR
// exit ;
34540: POP
34541: POP
34542: GO 35075
// end ; x := list [ i ] [ 3 ] ;
34544: LD_ADDR_VAR 0 6
34548: PUSH
34549: LD_VAR 0 3
34553: PUSH
34554: LD_VAR 0 1
34558: ARRAY
34559: PUSH
34560: LD_INT 3
34562: ARRAY
34563: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34564: LD_ADDR_VAR 0 7
34568: PUSH
34569: LD_VAR 0 3
34573: PUSH
34574: LD_VAR 0 1
34578: ARRAY
34579: PUSH
34580: LD_INT 4
34582: ARRAY
34583: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34584: LD_ADDR_VAR 0 9
34588: PUSH
34589: LD_VAR 0 6
34593: PPUSH
34594: LD_VAR 0 7
34598: PPUSH
34599: LD_INT 16
34601: PPUSH
34602: CALL 79162 0 3
34606: ST_TO_ADDR
// if not cratesNearbyPoint then
34607: LD_VAR 0 9
34611: NOT
34612: IFFALSE 34618
// exit ;
34614: POP
34615: POP
34616: GO 35075
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34618: LD_ADDR_VAR 0 4
34622: PUSH
34623: LD_INT 22
34625: PUSH
34626: LD_VAR 0 5
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 3
34637: PUSH
34638: LD_INT 60
34640: PUSH
34641: EMPTY
34642: LIST
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 91
34650: PUSH
34651: LD_VAR 0 8
34655: PUSH
34656: LD_INT 6
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 2
34666: PUSH
34667: LD_INT 25
34669: PUSH
34670: LD_INT 2
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 25
34679: PUSH
34680: LD_INT 16
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: LIST
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: PPUSH
34698: CALL_OW 69
34702: PUSH
34703: LD_VAR 0 8
34707: PPUSH
34708: CALL_OW 313
34712: PPUSH
34713: LD_INT 3
34715: PUSH
34716: LD_INT 60
34718: PUSH
34719: EMPTY
34720: LIST
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 2
34728: PUSH
34729: LD_INT 25
34731: PUSH
34732: LD_INT 2
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 25
34741: PUSH
34742: LD_INT 16
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: LIST
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PPUSH
34758: CALL_OW 72
34762: UNION
34763: ST_TO_ADDR
// if tmp then
34764: LD_VAR 0 4
34768: IFFALSE 34848
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34770: LD_ADDR_VAR 0 4
34774: PUSH
34775: LD_VAR 0 4
34779: PPUSH
34780: LD_INT 3
34782: PPUSH
34783: CALL 77131 0 2
34787: ST_TO_ADDR
// for j in tmp do
34788: LD_ADDR_VAR 0 2
34792: PUSH
34793: LD_VAR 0 4
34797: PUSH
34798: FOR_IN
34799: IFFALSE 34842
// begin if IsInUnit ( j ) then
34801: LD_VAR 0 2
34805: PPUSH
34806: CALL_OW 310
34810: IFFALSE 34821
// ComExit ( j ) ;
34812: LD_VAR 0 2
34816: PPUSH
34817: CALL 77214 0 1
// AddComCollect ( j , x , y ) ;
34821: LD_VAR 0 2
34825: PPUSH
34826: LD_VAR 0 6
34830: PPUSH
34831: LD_VAR 0 7
34835: PPUSH
34836: CALL_OW 177
// end ;
34840: GO 34798
34842: POP
34843: POP
// exit ;
34844: POP
34845: POP
34846: GO 35075
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34848: LD_ADDR_VAR 0 4
34852: PUSH
34853: LD_INT 22
34855: PUSH
34856: LD_VAR 0 5
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 91
34867: PUSH
34868: LD_VAR 0 8
34872: PUSH
34873: LD_INT 8
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 2
34883: PUSH
34884: LD_INT 34
34886: PUSH
34887: LD_INT 12
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 34
34896: PUSH
34897: LD_INT 51
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 34
34906: PUSH
34907: LD_INT 32
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 34
34916: PUSH
34917: LD_INT 89
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: LIST
34935: PPUSH
34936: CALL_OW 69
34940: ST_TO_ADDR
// if tmp then
34941: LD_VAR 0 4
34945: IFFALSE 35071
// begin for j in tmp do
34947: LD_ADDR_VAR 0 2
34951: PUSH
34952: LD_VAR 0 4
34956: PUSH
34957: FOR_IN
34958: IFFALSE 35069
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34960: LD_VAR 0 2
34964: PPUSH
34965: CALL_OW 262
34969: PUSH
34970: LD_INT 3
34972: EQUAL
34973: PUSH
34974: LD_VAR 0 2
34978: PPUSH
34979: CALL_OW 261
34983: PUSH
34984: LD_INT 20
34986: GREATER
34987: OR
34988: PUSH
34989: LD_VAR 0 2
34993: PPUSH
34994: CALL_OW 314
34998: NOT
34999: AND
35000: PUSH
35001: LD_VAR 0 2
35005: PPUSH
35006: CALL_OW 263
35010: PUSH
35011: LD_INT 1
35013: NONEQUAL
35014: PUSH
35015: LD_VAR 0 2
35019: PPUSH
35020: CALL_OW 311
35024: OR
35025: AND
35026: IFFALSE 35067
// begin ComCollect ( j , x , y ) ;
35028: LD_VAR 0 2
35032: PPUSH
35033: LD_VAR 0 6
35037: PPUSH
35038: LD_VAR 0 7
35042: PPUSH
35043: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35047: LD_VAR 0 2
35051: PPUSH
35052: LD_VAR 0 8
35056: PPUSH
35057: CALL_OW 172
// exit ;
35061: POP
35062: POP
35063: POP
35064: POP
35065: GO 35075
// end ;
35067: GO 34957
35069: POP
35070: POP
// end ; end ;
35071: GO 34446
35073: POP
35074: POP
// end ; end_of_file
35075: PPOPN 9
35077: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35078: LD_INT 0
35080: PPUSH
35081: PPUSH
35082: PPUSH
35083: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35084: LD_VAR 0 1
35088: PPUSH
35089: CALL_OW 264
35093: PUSH
35094: LD_INT 91
35096: EQUAL
35097: IFFALSE 35169
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35099: LD_INT 68
35101: PPUSH
35102: LD_VAR 0 1
35106: PPUSH
35107: CALL_OW 255
35111: PPUSH
35112: CALL_OW 321
35116: PUSH
35117: LD_INT 2
35119: EQUAL
35120: IFFALSE 35132
// eff := 70 else
35122: LD_ADDR_VAR 0 4
35126: PUSH
35127: LD_INT 70
35129: ST_TO_ADDR
35130: GO 35140
// eff := 30 ;
35132: LD_ADDR_VAR 0 4
35136: PUSH
35137: LD_INT 30
35139: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35140: LD_VAR 0 1
35144: PPUSH
35145: CALL_OW 250
35149: PPUSH
35150: LD_VAR 0 1
35154: PPUSH
35155: CALL_OW 251
35159: PPUSH
35160: LD_VAR 0 4
35164: PPUSH
35165: CALL_OW 495
// end ; end ;
35169: LD_VAR 0 2
35173: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35174: LD_INT 0
35176: PPUSH
// end ;
35177: LD_VAR 0 4
35181: RET
// export function SOS_Command ( cmd ) ; begin
35182: LD_INT 0
35184: PPUSH
// end ;
35185: LD_VAR 0 2
35189: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35190: LD_INT 0
35192: PPUSH
// end ;
35193: LD_VAR 0 6
35197: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35198: LD_INT 0
35200: PPUSH
35201: PPUSH
// if not vehicle or not factory then
35202: LD_VAR 0 1
35206: NOT
35207: PUSH
35208: LD_VAR 0 2
35212: NOT
35213: OR
35214: IFFALSE 35218
// exit ;
35216: GO 35449
// if factoryWaypoints >= factory then
35218: LD_EXP 94
35222: PUSH
35223: LD_VAR 0 2
35227: GREATEREQUAL
35228: IFFALSE 35449
// if factoryWaypoints [ factory ] then
35230: LD_EXP 94
35234: PUSH
35235: LD_VAR 0 2
35239: ARRAY
35240: IFFALSE 35449
// begin if GetControl ( vehicle ) = control_manual then
35242: LD_VAR 0 1
35246: PPUSH
35247: CALL_OW 263
35251: PUSH
35252: LD_INT 1
35254: EQUAL
35255: IFFALSE 35336
// begin driver := IsDrivenBy ( vehicle ) ;
35257: LD_ADDR_VAR 0 4
35261: PUSH
35262: LD_VAR 0 1
35266: PPUSH
35267: CALL_OW 311
35271: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35272: LD_VAR 0 4
35276: PPUSH
35277: LD_EXP 94
35281: PUSH
35282: LD_VAR 0 2
35286: ARRAY
35287: PUSH
35288: LD_INT 3
35290: ARRAY
35291: PPUSH
35292: LD_EXP 94
35296: PUSH
35297: LD_VAR 0 2
35301: ARRAY
35302: PUSH
35303: LD_INT 4
35305: ARRAY
35306: PPUSH
35307: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35311: LD_VAR 0 4
35315: PPUSH
35316: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35320: LD_VAR 0 4
35324: PPUSH
35325: LD_VAR 0 2
35329: PPUSH
35330: CALL_OW 180
// end else
35334: GO 35449
// if GetControl ( vehicle ) = control_remote then
35336: LD_VAR 0 1
35340: PPUSH
35341: CALL_OW 263
35345: PUSH
35346: LD_INT 2
35348: EQUAL
35349: IFFALSE 35410
// begin wait ( 0 0$2 ) ;
35351: LD_INT 70
35353: PPUSH
35354: CALL_OW 67
// if Connect ( vehicle ) then
35358: LD_VAR 0 1
35362: PPUSH
35363: CALL 47473 0 1
35367: IFFALSE 35408
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35369: LD_VAR 0 1
35373: PPUSH
35374: LD_EXP 94
35378: PUSH
35379: LD_VAR 0 2
35383: ARRAY
35384: PUSH
35385: LD_INT 3
35387: ARRAY
35388: PPUSH
35389: LD_EXP 94
35393: PUSH
35394: LD_VAR 0 2
35398: ARRAY
35399: PUSH
35400: LD_INT 4
35402: ARRAY
35403: PPUSH
35404: CALL_OW 171
// end else
35408: GO 35449
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35410: LD_VAR 0 1
35414: PPUSH
35415: LD_EXP 94
35419: PUSH
35420: LD_VAR 0 2
35424: ARRAY
35425: PUSH
35426: LD_INT 3
35428: ARRAY
35429: PPUSH
35430: LD_EXP 94
35434: PUSH
35435: LD_VAR 0 2
35439: ARRAY
35440: PUSH
35441: LD_INT 4
35443: ARRAY
35444: PPUSH
35445: CALL_OW 171
// end ; end ;
35449: LD_VAR 0 3
35453: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35454: LD_INT 0
35456: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35457: LD_VAR 0 1
35461: PUSH
35462: LD_INT 250
35464: EQUAL
35465: PUSH
35466: LD_VAR 0 2
35470: PPUSH
35471: CALL_OW 264
35475: PUSH
35476: LD_INT 81
35478: EQUAL
35479: AND
35480: IFFALSE 35501
// MinerPlaceMine ( unit , x , y ) ;
35482: LD_VAR 0 2
35486: PPUSH
35487: LD_VAR 0 4
35491: PPUSH
35492: LD_VAR 0 5
35496: PPUSH
35497: CALL 37886 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35501: LD_VAR 0 1
35505: PUSH
35506: LD_INT 251
35508: EQUAL
35509: PUSH
35510: LD_VAR 0 2
35514: PPUSH
35515: CALL_OW 264
35519: PUSH
35520: LD_INT 81
35522: EQUAL
35523: AND
35524: IFFALSE 35545
// MinerDetonateMine ( unit , x , y ) ;
35526: LD_VAR 0 2
35530: PPUSH
35531: LD_VAR 0 4
35535: PPUSH
35536: LD_VAR 0 5
35540: PPUSH
35541: CALL 38161 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35545: LD_VAR 0 1
35549: PUSH
35550: LD_INT 252
35552: EQUAL
35553: PUSH
35554: LD_VAR 0 2
35558: PPUSH
35559: CALL_OW 264
35563: PUSH
35564: LD_INT 81
35566: EQUAL
35567: AND
35568: IFFALSE 35589
// MinerCreateMinefield ( unit , x , y ) ;
35570: LD_VAR 0 2
35574: PPUSH
35575: LD_VAR 0 4
35579: PPUSH
35580: LD_VAR 0 5
35584: PPUSH
35585: CALL 38578 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35589: LD_VAR 0 1
35593: PUSH
35594: LD_INT 253
35596: EQUAL
35597: PUSH
35598: LD_VAR 0 2
35602: PPUSH
35603: CALL_OW 257
35607: PUSH
35608: LD_INT 5
35610: EQUAL
35611: AND
35612: IFFALSE 35633
// ComBinocular ( unit , x , y ) ;
35614: LD_VAR 0 2
35618: PPUSH
35619: LD_VAR 0 4
35623: PPUSH
35624: LD_VAR 0 5
35628: PPUSH
35629: CALL 38947 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35633: LD_VAR 0 1
35637: PUSH
35638: LD_INT 254
35640: EQUAL
35641: PUSH
35642: LD_VAR 0 2
35646: PPUSH
35647: CALL_OW 264
35651: PUSH
35652: LD_INT 99
35654: EQUAL
35655: AND
35656: PUSH
35657: LD_VAR 0 3
35661: PPUSH
35662: CALL_OW 263
35666: PUSH
35667: LD_INT 3
35669: EQUAL
35670: AND
35671: IFFALSE 35687
// HackDestroyVehicle ( unit , selectedUnit ) ;
35673: LD_VAR 0 2
35677: PPUSH
35678: LD_VAR 0 3
35682: PPUSH
35683: CALL 37250 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35687: LD_VAR 0 1
35691: PUSH
35692: LD_INT 255
35694: EQUAL
35695: PUSH
35696: LD_VAR 0 2
35700: PPUSH
35701: CALL_OW 264
35705: PUSH
35706: LD_INT 14
35708: PUSH
35709: LD_INT 53
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: IN
35716: AND
35717: PUSH
35718: LD_VAR 0 4
35722: PPUSH
35723: LD_VAR 0 5
35727: PPUSH
35728: CALL_OW 488
35732: AND
35733: IFFALSE 35757
// CutTreeXYR ( unit , x , y , 12 ) ;
35735: LD_VAR 0 2
35739: PPUSH
35740: LD_VAR 0 4
35744: PPUSH
35745: LD_VAR 0 5
35749: PPUSH
35750: LD_INT 12
35752: PPUSH
35753: CALL 35820 0 4
// if cmd = 256 then
35757: LD_VAR 0 1
35761: PUSH
35762: LD_INT 256
35764: EQUAL
35765: IFFALSE 35786
// SetFactoryWaypoint ( unit , x , y ) ;
35767: LD_VAR 0 2
35771: PPUSH
35772: LD_VAR 0 4
35776: PPUSH
35777: LD_VAR 0 5
35781: PPUSH
35782: CALL 33767 0 3
// if cmd = 257 then
35786: LD_VAR 0 1
35790: PUSH
35791: LD_INT 257
35793: EQUAL
35794: IFFALSE 35815
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35796: LD_VAR 0 2
35800: PPUSH
35801: LD_VAR 0 4
35805: PPUSH
35806: LD_VAR 0 5
35810: PPUSH
35811: CALL 34129 0 3
// end ;
35815: LD_VAR 0 6
35819: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35820: LD_INT 0
35822: PPUSH
35823: PPUSH
35824: PPUSH
35825: PPUSH
35826: PPUSH
35827: PPUSH
35828: PPUSH
35829: PPUSH
35830: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35831: LD_VAR 0 1
35835: NOT
35836: PUSH
35837: LD_VAR 0 2
35841: PPUSH
35842: LD_VAR 0 3
35846: PPUSH
35847: CALL_OW 488
35851: NOT
35852: OR
35853: PUSH
35854: LD_VAR 0 4
35858: NOT
35859: OR
35860: IFFALSE 35864
// exit ;
35862: GO 36204
// list := [ ] ;
35864: LD_ADDR_VAR 0 13
35868: PUSH
35869: EMPTY
35870: ST_TO_ADDR
// if x - r < 0 then
35871: LD_VAR 0 2
35875: PUSH
35876: LD_VAR 0 4
35880: MINUS
35881: PUSH
35882: LD_INT 0
35884: LESS
35885: IFFALSE 35897
// min_x := 0 else
35887: LD_ADDR_VAR 0 7
35891: PUSH
35892: LD_INT 0
35894: ST_TO_ADDR
35895: GO 35913
// min_x := x - r ;
35897: LD_ADDR_VAR 0 7
35901: PUSH
35902: LD_VAR 0 2
35906: PUSH
35907: LD_VAR 0 4
35911: MINUS
35912: ST_TO_ADDR
// if y - r < 0 then
35913: LD_VAR 0 3
35917: PUSH
35918: LD_VAR 0 4
35922: MINUS
35923: PUSH
35924: LD_INT 0
35926: LESS
35927: IFFALSE 35939
// min_y := 0 else
35929: LD_ADDR_VAR 0 8
35933: PUSH
35934: LD_INT 0
35936: ST_TO_ADDR
35937: GO 35955
// min_y := y - r ;
35939: LD_ADDR_VAR 0 8
35943: PUSH
35944: LD_VAR 0 3
35948: PUSH
35949: LD_VAR 0 4
35953: MINUS
35954: ST_TO_ADDR
// max_x := x + r ;
35955: LD_ADDR_VAR 0 9
35959: PUSH
35960: LD_VAR 0 2
35964: PUSH
35965: LD_VAR 0 4
35969: PLUS
35970: ST_TO_ADDR
// max_y := y + r ;
35971: LD_ADDR_VAR 0 10
35975: PUSH
35976: LD_VAR 0 3
35980: PUSH
35981: LD_VAR 0 4
35985: PLUS
35986: ST_TO_ADDR
// for _x = min_x to max_x do
35987: LD_ADDR_VAR 0 11
35991: PUSH
35992: DOUBLE
35993: LD_VAR 0 7
35997: DEC
35998: ST_TO_ADDR
35999: LD_VAR 0 9
36003: PUSH
36004: FOR_TO
36005: IFFALSE 36122
// for _y = min_y to max_y do
36007: LD_ADDR_VAR 0 12
36011: PUSH
36012: DOUBLE
36013: LD_VAR 0 8
36017: DEC
36018: ST_TO_ADDR
36019: LD_VAR 0 10
36023: PUSH
36024: FOR_TO
36025: IFFALSE 36118
// begin if not ValidHex ( _x , _y ) then
36027: LD_VAR 0 11
36031: PPUSH
36032: LD_VAR 0 12
36036: PPUSH
36037: CALL_OW 488
36041: NOT
36042: IFFALSE 36046
// continue ;
36044: GO 36024
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36046: LD_VAR 0 11
36050: PPUSH
36051: LD_VAR 0 12
36055: PPUSH
36056: CALL_OW 351
36060: PUSH
36061: LD_VAR 0 11
36065: PPUSH
36066: LD_VAR 0 12
36070: PPUSH
36071: CALL_OW 554
36075: AND
36076: IFFALSE 36116
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36078: LD_ADDR_VAR 0 13
36082: PUSH
36083: LD_VAR 0 13
36087: PPUSH
36088: LD_VAR 0 13
36092: PUSH
36093: LD_INT 1
36095: PLUS
36096: PPUSH
36097: LD_VAR 0 11
36101: PUSH
36102: LD_VAR 0 12
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PPUSH
36111: CALL_OW 2
36115: ST_TO_ADDR
// end ;
36116: GO 36024
36118: POP
36119: POP
36120: GO 36004
36122: POP
36123: POP
// if not list then
36124: LD_VAR 0 13
36128: NOT
36129: IFFALSE 36133
// exit ;
36131: GO 36204
// for i in list do
36133: LD_ADDR_VAR 0 6
36137: PUSH
36138: LD_VAR 0 13
36142: PUSH
36143: FOR_IN
36144: IFFALSE 36202
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36146: LD_VAR 0 1
36150: PPUSH
36151: LD_STRING M
36153: PUSH
36154: LD_VAR 0 6
36158: PUSH
36159: LD_INT 1
36161: ARRAY
36162: PUSH
36163: LD_VAR 0 6
36167: PUSH
36168: LD_INT 2
36170: ARRAY
36171: PUSH
36172: LD_INT 0
36174: PUSH
36175: LD_INT 0
36177: PUSH
36178: LD_INT 0
36180: PUSH
36181: LD_INT 0
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: PUSH
36193: EMPTY
36194: LIST
36195: PPUSH
36196: CALL_OW 447
36200: GO 36143
36202: POP
36203: POP
// end ;
36204: LD_VAR 0 5
36208: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36209: LD_EXP 97
36213: NOT
36214: IFFALSE 36264
36216: GO 36218
36218: DISABLE
// begin initHack := true ;
36219: LD_ADDR_EXP 97
36223: PUSH
36224: LD_INT 1
36226: ST_TO_ADDR
// hackTanks := [ ] ;
36227: LD_ADDR_EXP 98
36231: PUSH
36232: EMPTY
36233: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36234: LD_ADDR_EXP 99
36238: PUSH
36239: EMPTY
36240: ST_TO_ADDR
// hackLimit := 3 ;
36241: LD_ADDR_EXP 100
36245: PUSH
36246: LD_INT 3
36248: ST_TO_ADDR
// hackDist := 12 ;
36249: LD_ADDR_EXP 101
36253: PUSH
36254: LD_INT 12
36256: ST_TO_ADDR
// hackCounter := [ ] ;
36257: LD_ADDR_EXP 102
36261: PUSH
36262: EMPTY
36263: ST_TO_ADDR
// end ;
36264: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36265: LD_EXP 97
36269: PUSH
36270: LD_INT 34
36272: PUSH
36273: LD_INT 99
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PPUSH
36280: CALL_OW 69
36284: AND
36285: IFFALSE 36538
36287: GO 36289
36289: DISABLE
36290: LD_INT 0
36292: PPUSH
36293: PPUSH
// begin enable ;
36294: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36295: LD_ADDR_VAR 0 1
36299: PUSH
36300: LD_INT 34
36302: PUSH
36303: LD_INT 99
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PPUSH
36310: CALL_OW 69
36314: PUSH
36315: FOR_IN
36316: IFFALSE 36536
// begin if not i in hackTanks then
36318: LD_VAR 0 1
36322: PUSH
36323: LD_EXP 98
36327: IN
36328: NOT
36329: IFFALSE 36412
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36331: LD_ADDR_EXP 98
36335: PUSH
36336: LD_EXP 98
36340: PPUSH
36341: LD_EXP 98
36345: PUSH
36346: LD_INT 1
36348: PLUS
36349: PPUSH
36350: LD_VAR 0 1
36354: PPUSH
36355: CALL_OW 1
36359: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36360: LD_ADDR_EXP 99
36364: PUSH
36365: LD_EXP 99
36369: PPUSH
36370: LD_EXP 99
36374: PUSH
36375: LD_INT 1
36377: PLUS
36378: PPUSH
36379: EMPTY
36380: PPUSH
36381: CALL_OW 1
36385: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36386: LD_ADDR_EXP 102
36390: PUSH
36391: LD_EXP 102
36395: PPUSH
36396: LD_EXP 102
36400: PUSH
36401: LD_INT 1
36403: PLUS
36404: PPUSH
36405: EMPTY
36406: PPUSH
36407: CALL_OW 1
36411: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36412: LD_VAR 0 1
36416: PPUSH
36417: CALL_OW 302
36421: NOT
36422: IFFALSE 36435
// begin HackUnlinkAll ( i ) ;
36424: LD_VAR 0 1
36428: PPUSH
36429: CALL 36541 0 1
// continue ;
36433: GO 36315
// end ; HackCheckCapturedStatus ( i ) ;
36435: LD_VAR 0 1
36439: PPUSH
36440: CALL 36984 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36444: LD_ADDR_VAR 0 2
36448: PUSH
36449: LD_INT 81
36451: PUSH
36452: LD_VAR 0 1
36456: PPUSH
36457: CALL_OW 255
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 33
36468: PUSH
36469: LD_INT 3
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 91
36478: PUSH
36479: LD_VAR 0 1
36483: PUSH
36484: LD_EXP 101
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 50
36496: PUSH
36497: EMPTY
36498: LIST
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: PPUSH
36506: CALL_OW 69
36510: ST_TO_ADDR
// if not tmp then
36511: LD_VAR 0 2
36515: NOT
36516: IFFALSE 36520
// continue ;
36518: GO 36315
// HackLink ( i , tmp ) ;
36520: LD_VAR 0 1
36524: PPUSH
36525: LD_VAR 0 2
36529: PPUSH
36530: CALL 36677 0 2
// end ;
36534: GO 36315
36536: POP
36537: POP
// end ;
36538: PPOPN 2
36540: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36541: LD_INT 0
36543: PPUSH
36544: PPUSH
36545: PPUSH
// if not hack in hackTanks then
36546: LD_VAR 0 1
36550: PUSH
36551: LD_EXP 98
36555: IN
36556: NOT
36557: IFFALSE 36561
// exit ;
36559: GO 36672
// index := GetElementIndex ( hackTanks , hack ) ;
36561: LD_ADDR_VAR 0 4
36565: PUSH
36566: LD_EXP 98
36570: PPUSH
36571: LD_VAR 0 1
36575: PPUSH
36576: CALL 44289 0 2
36580: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36581: LD_EXP 99
36585: PUSH
36586: LD_VAR 0 4
36590: ARRAY
36591: IFFALSE 36672
// begin for i in hackTanksCaptured [ index ] do
36593: LD_ADDR_VAR 0 3
36597: PUSH
36598: LD_EXP 99
36602: PUSH
36603: LD_VAR 0 4
36607: ARRAY
36608: PUSH
36609: FOR_IN
36610: IFFALSE 36636
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36612: LD_VAR 0 3
36616: PUSH
36617: LD_INT 1
36619: ARRAY
36620: PPUSH
36621: LD_VAR 0 3
36625: PUSH
36626: LD_INT 2
36628: ARRAY
36629: PPUSH
36630: CALL_OW 235
36634: GO 36609
36636: POP
36637: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36638: LD_ADDR_EXP 99
36642: PUSH
36643: LD_EXP 99
36647: PPUSH
36648: LD_VAR 0 4
36652: PPUSH
36653: EMPTY
36654: PPUSH
36655: CALL_OW 1
36659: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36660: LD_VAR 0 1
36664: PPUSH
36665: LD_INT 0
36667: PPUSH
36668: CALL_OW 505
// end ; end ;
36672: LD_VAR 0 2
36676: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36677: LD_INT 0
36679: PPUSH
36680: PPUSH
36681: PPUSH
// if not hack in hackTanks or not vehicles then
36682: LD_VAR 0 1
36686: PUSH
36687: LD_EXP 98
36691: IN
36692: NOT
36693: PUSH
36694: LD_VAR 0 2
36698: NOT
36699: OR
36700: IFFALSE 36704
// exit ;
36702: GO 36979
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36704: LD_ADDR_VAR 0 2
36708: PUSH
36709: LD_VAR 0 1
36713: PPUSH
36714: LD_VAR 0 2
36718: PPUSH
36719: LD_INT 1
36721: PPUSH
36722: LD_INT 1
36724: PPUSH
36725: CALL 44939 0 4
36729: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36730: LD_ADDR_VAR 0 5
36734: PUSH
36735: LD_EXP 98
36739: PPUSH
36740: LD_VAR 0 1
36744: PPUSH
36745: CALL 44289 0 2
36749: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36750: LD_EXP 99
36754: PUSH
36755: LD_VAR 0 5
36759: ARRAY
36760: PUSH
36761: LD_EXP 100
36765: LESS
36766: IFFALSE 36955
// begin for i := 1 to vehicles do
36768: LD_ADDR_VAR 0 4
36772: PUSH
36773: DOUBLE
36774: LD_INT 1
36776: DEC
36777: ST_TO_ADDR
36778: LD_VAR 0 2
36782: PUSH
36783: FOR_TO
36784: IFFALSE 36953
// begin if hackTanksCaptured [ index ] = hackLimit then
36786: LD_EXP 99
36790: PUSH
36791: LD_VAR 0 5
36795: ARRAY
36796: PUSH
36797: LD_EXP 100
36801: EQUAL
36802: IFFALSE 36806
// break ;
36804: GO 36953
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36806: LD_ADDR_EXP 102
36810: PUSH
36811: LD_EXP 102
36815: PPUSH
36816: LD_VAR 0 5
36820: PPUSH
36821: LD_EXP 102
36825: PUSH
36826: LD_VAR 0 5
36830: ARRAY
36831: PUSH
36832: LD_INT 1
36834: PLUS
36835: PPUSH
36836: CALL_OW 1
36840: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36841: LD_ADDR_EXP 99
36845: PUSH
36846: LD_EXP 99
36850: PPUSH
36851: LD_VAR 0 5
36855: PUSH
36856: LD_EXP 99
36860: PUSH
36861: LD_VAR 0 5
36865: ARRAY
36866: PUSH
36867: LD_INT 1
36869: PLUS
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PPUSH
36875: LD_VAR 0 2
36879: PUSH
36880: LD_VAR 0 4
36884: ARRAY
36885: PUSH
36886: LD_VAR 0 2
36890: PUSH
36891: LD_VAR 0 4
36895: ARRAY
36896: PPUSH
36897: CALL_OW 255
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PPUSH
36906: CALL 44504 0 3
36910: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36911: LD_VAR 0 2
36915: PUSH
36916: LD_VAR 0 4
36920: ARRAY
36921: PPUSH
36922: LD_VAR 0 1
36926: PPUSH
36927: CALL_OW 255
36931: PPUSH
36932: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36936: LD_VAR 0 2
36940: PUSH
36941: LD_VAR 0 4
36945: ARRAY
36946: PPUSH
36947: CALL_OW 141
// end ;
36951: GO 36783
36953: POP
36954: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36955: LD_VAR 0 1
36959: PPUSH
36960: LD_EXP 99
36964: PUSH
36965: LD_VAR 0 5
36969: ARRAY
36970: PUSH
36971: LD_INT 0
36973: PLUS
36974: PPUSH
36975: CALL_OW 505
// end ;
36979: LD_VAR 0 3
36983: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36984: LD_INT 0
36986: PPUSH
36987: PPUSH
36988: PPUSH
36989: PPUSH
// if not hack in hackTanks then
36990: LD_VAR 0 1
36994: PUSH
36995: LD_EXP 98
36999: IN
37000: NOT
37001: IFFALSE 37005
// exit ;
37003: GO 37245
// index := GetElementIndex ( hackTanks , hack ) ;
37005: LD_ADDR_VAR 0 4
37009: PUSH
37010: LD_EXP 98
37014: PPUSH
37015: LD_VAR 0 1
37019: PPUSH
37020: CALL 44289 0 2
37024: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37025: LD_ADDR_VAR 0 3
37029: PUSH
37030: DOUBLE
37031: LD_EXP 99
37035: PUSH
37036: LD_VAR 0 4
37040: ARRAY
37041: INC
37042: ST_TO_ADDR
37043: LD_INT 1
37045: PUSH
37046: FOR_DOWNTO
37047: IFFALSE 37219
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37049: LD_ADDR_VAR 0 5
37053: PUSH
37054: LD_EXP 99
37058: PUSH
37059: LD_VAR 0 4
37063: ARRAY
37064: PUSH
37065: LD_VAR 0 3
37069: ARRAY
37070: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37071: LD_VAR 0 5
37075: PUSH
37076: LD_INT 1
37078: ARRAY
37079: PPUSH
37080: CALL_OW 302
37084: NOT
37085: PUSH
37086: LD_VAR 0 5
37090: PUSH
37091: LD_INT 1
37093: ARRAY
37094: PPUSH
37095: CALL_OW 255
37099: PUSH
37100: LD_VAR 0 1
37104: PPUSH
37105: CALL_OW 255
37109: NONEQUAL
37110: OR
37111: IFFALSE 37217
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37113: LD_VAR 0 5
37117: PUSH
37118: LD_INT 1
37120: ARRAY
37121: PPUSH
37122: CALL_OW 305
37126: PUSH
37127: LD_VAR 0 5
37131: PUSH
37132: LD_INT 1
37134: ARRAY
37135: PPUSH
37136: CALL_OW 255
37140: PUSH
37141: LD_VAR 0 1
37145: PPUSH
37146: CALL_OW 255
37150: EQUAL
37151: AND
37152: IFFALSE 37176
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37154: LD_VAR 0 5
37158: PUSH
37159: LD_INT 1
37161: ARRAY
37162: PPUSH
37163: LD_VAR 0 5
37167: PUSH
37168: LD_INT 2
37170: ARRAY
37171: PPUSH
37172: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37176: LD_ADDR_EXP 99
37180: PUSH
37181: LD_EXP 99
37185: PPUSH
37186: LD_VAR 0 4
37190: PPUSH
37191: LD_EXP 99
37195: PUSH
37196: LD_VAR 0 4
37200: ARRAY
37201: PPUSH
37202: LD_VAR 0 3
37206: PPUSH
37207: CALL_OW 3
37211: PPUSH
37212: CALL_OW 1
37216: ST_TO_ADDR
// end ; end ;
37217: GO 37046
37219: POP
37220: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37221: LD_VAR 0 1
37225: PPUSH
37226: LD_EXP 99
37230: PUSH
37231: LD_VAR 0 4
37235: ARRAY
37236: PUSH
37237: LD_INT 0
37239: PLUS
37240: PPUSH
37241: CALL_OW 505
// end ;
37245: LD_VAR 0 2
37249: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37250: LD_INT 0
37252: PPUSH
37253: PPUSH
37254: PPUSH
37255: PPUSH
// if not hack in hackTanks then
37256: LD_VAR 0 1
37260: PUSH
37261: LD_EXP 98
37265: IN
37266: NOT
37267: IFFALSE 37271
// exit ;
37269: GO 37356
// index := GetElementIndex ( hackTanks , hack ) ;
37271: LD_ADDR_VAR 0 5
37275: PUSH
37276: LD_EXP 98
37280: PPUSH
37281: LD_VAR 0 1
37285: PPUSH
37286: CALL 44289 0 2
37290: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37291: LD_ADDR_VAR 0 4
37295: PUSH
37296: DOUBLE
37297: LD_INT 1
37299: DEC
37300: ST_TO_ADDR
37301: LD_EXP 99
37305: PUSH
37306: LD_VAR 0 5
37310: ARRAY
37311: PUSH
37312: FOR_TO
37313: IFFALSE 37354
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37315: LD_EXP 99
37319: PUSH
37320: LD_VAR 0 5
37324: ARRAY
37325: PUSH
37326: LD_VAR 0 4
37330: ARRAY
37331: PUSH
37332: LD_INT 1
37334: ARRAY
37335: PUSH
37336: LD_VAR 0 2
37340: EQUAL
37341: IFFALSE 37352
// KillUnit ( vehicle ) ;
37343: LD_VAR 0 2
37347: PPUSH
37348: CALL_OW 66
37352: GO 37312
37354: POP
37355: POP
// end ;
37356: LD_VAR 0 3
37360: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37361: LD_EXP 103
37365: NOT
37366: IFFALSE 37401
37368: GO 37370
37370: DISABLE
// begin initMiner := true ;
37371: LD_ADDR_EXP 103
37375: PUSH
37376: LD_INT 1
37378: ST_TO_ADDR
// minersList := [ ] ;
37379: LD_ADDR_EXP 104
37383: PUSH
37384: EMPTY
37385: ST_TO_ADDR
// minerMinesList := [ ] ;
37386: LD_ADDR_EXP 105
37390: PUSH
37391: EMPTY
37392: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37393: LD_ADDR_EXP 106
37397: PUSH
37398: LD_INT 5
37400: ST_TO_ADDR
// end ;
37401: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37402: LD_EXP 103
37406: PUSH
37407: LD_INT 34
37409: PUSH
37410: LD_INT 81
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PPUSH
37417: CALL_OW 69
37421: AND
37422: IFFALSE 37883
37424: GO 37426
37426: DISABLE
37427: LD_INT 0
37429: PPUSH
37430: PPUSH
37431: PPUSH
37432: PPUSH
// begin enable ;
37433: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37434: LD_ADDR_VAR 0 1
37438: PUSH
37439: LD_INT 34
37441: PUSH
37442: LD_INT 81
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PPUSH
37449: CALL_OW 69
37453: PUSH
37454: FOR_IN
37455: IFFALSE 37527
// begin if not i in minersList then
37457: LD_VAR 0 1
37461: PUSH
37462: LD_EXP 104
37466: IN
37467: NOT
37468: IFFALSE 37525
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37470: LD_ADDR_EXP 104
37474: PUSH
37475: LD_EXP 104
37479: PPUSH
37480: LD_EXP 104
37484: PUSH
37485: LD_INT 1
37487: PLUS
37488: PPUSH
37489: LD_VAR 0 1
37493: PPUSH
37494: CALL_OW 1
37498: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37499: LD_ADDR_EXP 105
37503: PUSH
37504: LD_EXP 105
37508: PPUSH
37509: LD_EXP 105
37513: PUSH
37514: LD_INT 1
37516: PLUS
37517: PPUSH
37518: EMPTY
37519: PPUSH
37520: CALL_OW 1
37524: ST_TO_ADDR
// end end ;
37525: GO 37454
37527: POP
37528: POP
// for i := minerMinesList downto 1 do
37529: LD_ADDR_VAR 0 1
37533: PUSH
37534: DOUBLE
37535: LD_EXP 105
37539: INC
37540: ST_TO_ADDR
37541: LD_INT 1
37543: PUSH
37544: FOR_DOWNTO
37545: IFFALSE 37881
// begin if IsLive ( minersList [ i ] ) then
37547: LD_EXP 104
37551: PUSH
37552: LD_VAR 0 1
37556: ARRAY
37557: PPUSH
37558: CALL_OW 300
37562: IFFALSE 37590
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37564: LD_EXP 104
37568: PUSH
37569: LD_VAR 0 1
37573: ARRAY
37574: PPUSH
37575: LD_EXP 105
37579: PUSH
37580: LD_VAR 0 1
37584: ARRAY
37585: PPUSH
37586: CALL_OW 505
// if not minerMinesList [ i ] then
37590: LD_EXP 105
37594: PUSH
37595: LD_VAR 0 1
37599: ARRAY
37600: NOT
37601: IFFALSE 37605
// continue ;
37603: GO 37544
// for j := minerMinesList [ i ] downto 1 do
37605: LD_ADDR_VAR 0 2
37609: PUSH
37610: DOUBLE
37611: LD_EXP 105
37615: PUSH
37616: LD_VAR 0 1
37620: ARRAY
37621: INC
37622: ST_TO_ADDR
37623: LD_INT 1
37625: PUSH
37626: FOR_DOWNTO
37627: IFFALSE 37877
// begin side := GetSide ( minersList [ i ] ) ;
37629: LD_ADDR_VAR 0 3
37633: PUSH
37634: LD_EXP 104
37638: PUSH
37639: LD_VAR 0 1
37643: ARRAY
37644: PPUSH
37645: CALL_OW 255
37649: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37650: LD_ADDR_VAR 0 4
37654: PUSH
37655: LD_EXP 105
37659: PUSH
37660: LD_VAR 0 1
37664: ARRAY
37665: PUSH
37666: LD_VAR 0 2
37670: ARRAY
37671: PUSH
37672: LD_INT 1
37674: ARRAY
37675: PPUSH
37676: LD_EXP 105
37680: PUSH
37681: LD_VAR 0 1
37685: ARRAY
37686: PUSH
37687: LD_VAR 0 2
37691: ARRAY
37692: PUSH
37693: LD_INT 2
37695: ARRAY
37696: PPUSH
37697: CALL_OW 428
37701: ST_TO_ADDR
// if not tmp then
37702: LD_VAR 0 4
37706: NOT
37707: IFFALSE 37711
// continue ;
37709: GO 37626
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37711: LD_VAR 0 4
37715: PUSH
37716: LD_INT 81
37718: PUSH
37719: LD_VAR 0 3
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PPUSH
37728: CALL_OW 69
37732: IN
37733: PUSH
37734: LD_EXP 105
37738: PUSH
37739: LD_VAR 0 1
37743: ARRAY
37744: PUSH
37745: LD_VAR 0 2
37749: ARRAY
37750: PUSH
37751: LD_INT 1
37753: ARRAY
37754: PPUSH
37755: LD_EXP 105
37759: PUSH
37760: LD_VAR 0 1
37764: ARRAY
37765: PUSH
37766: LD_VAR 0 2
37770: ARRAY
37771: PUSH
37772: LD_INT 2
37774: ARRAY
37775: PPUSH
37776: CALL_OW 458
37780: AND
37781: IFFALSE 37875
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37783: LD_EXP 105
37787: PUSH
37788: LD_VAR 0 1
37792: ARRAY
37793: PUSH
37794: LD_VAR 0 2
37798: ARRAY
37799: PUSH
37800: LD_INT 1
37802: ARRAY
37803: PPUSH
37804: LD_EXP 105
37808: PUSH
37809: LD_VAR 0 1
37813: ARRAY
37814: PUSH
37815: LD_VAR 0 2
37819: ARRAY
37820: PUSH
37821: LD_INT 2
37823: ARRAY
37824: PPUSH
37825: LD_VAR 0 3
37829: PPUSH
37830: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37834: LD_ADDR_EXP 105
37838: PUSH
37839: LD_EXP 105
37843: PPUSH
37844: LD_VAR 0 1
37848: PPUSH
37849: LD_EXP 105
37853: PUSH
37854: LD_VAR 0 1
37858: ARRAY
37859: PPUSH
37860: LD_VAR 0 2
37864: PPUSH
37865: CALL_OW 3
37869: PPUSH
37870: CALL_OW 1
37874: ST_TO_ADDR
// end ; end ;
37875: GO 37626
37877: POP
37878: POP
// end ;
37879: GO 37544
37881: POP
37882: POP
// end ;
37883: PPOPN 4
37885: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37886: LD_INT 0
37888: PPUSH
37889: PPUSH
// result := false ;
37890: LD_ADDR_VAR 0 4
37894: PUSH
37895: LD_INT 0
37897: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37898: LD_VAR 0 1
37902: PPUSH
37903: CALL_OW 264
37907: PUSH
37908: LD_INT 81
37910: EQUAL
37911: NOT
37912: IFFALSE 37916
// exit ;
37914: GO 38156
// index := GetElementIndex ( minersList , unit ) ;
37916: LD_ADDR_VAR 0 5
37920: PUSH
37921: LD_EXP 104
37925: PPUSH
37926: LD_VAR 0 1
37930: PPUSH
37931: CALL 44289 0 2
37935: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37936: LD_EXP 105
37940: PUSH
37941: LD_VAR 0 5
37945: ARRAY
37946: PUSH
37947: LD_EXP 106
37951: GREATEREQUAL
37952: IFFALSE 37956
// exit ;
37954: GO 38156
// ComMoveXY ( unit , x , y ) ;
37956: LD_VAR 0 1
37960: PPUSH
37961: LD_VAR 0 2
37965: PPUSH
37966: LD_VAR 0 3
37970: PPUSH
37971: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37975: LD_INT 35
37977: PPUSH
37978: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37982: LD_VAR 0 1
37986: PPUSH
37987: LD_VAR 0 2
37991: PPUSH
37992: LD_VAR 0 3
37996: PPUSH
37997: CALL 75625 0 3
38001: NOT
38002: PUSH
38003: LD_VAR 0 1
38007: PPUSH
38008: CALL_OW 314
38012: AND
38013: IFFALSE 38017
// exit ;
38015: GO 38156
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38017: LD_VAR 0 2
38021: PPUSH
38022: LD_VAR 0 3
38026: PPUSH
38027: CALL_OW 428
38031: PUSH
38032: LD_VAR 0 1
38036: EQUAL
38037: PUSH
38038: LD_VAR 0 1
38042: PPUSH
38043: CALL_OW 314
38047: NOT
38048: AND
38049: IFFALSE 37975
// PlaySoundXY ( x , y , PlantMine ) ;
38051: LD_VAR 0 2
38055: PPUSH
38056: LD_VAR 0 3
38060: PPUSH
38061: LD_STRING PlantMine
38063: PPUSH
38064: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38068: LD_VAR 0 2
38072: PPUSH
38073: LD_VAR 0 3
38077: PPUSH
38078: LD_VAR 0 1
38082: PPUSH
38083: CALL_OW 255
38087: PPUSH
38088: LD_INT 0
38090: PPUSH
38091: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38095: LD_ADDR_EXP 105
38099: PUSH
38100: LD_EXP 105
38104: PPUSH
38105: LD_VAR 0 5
38109: PUSH
38110: LD_EXP 105
38114: PUSH
38115: LD_VAR 0 5
38119: ARRAY
38120: PUSH
38121: LD_INT 1
38123: PLUS
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PPUSH
38129: LD_VAR 0 2
38133: PUSH
38134: LD_VAR 0 3
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PPUSH
38143: CALL 44504 0 3
38147: ST_TO_ADDR
// result := true ;
38148: LD_ADDR_VAR 0 4
38152: PUSH
38153: LD_INT 1
38155: ST_TO_ADDR
// end ;
38156: LD_VAR 0 4
38160: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38161: LD_INT 0
38163: PPUSH
38164: PPUSH
38165: PPUSH
// if not unit in minersList then
38166: LD_VAR 0 1
38170: PUSH
38171: LD_EXP 104
38175: IN
38176: NOT
38177: IFFALSE 38181
// exit ;
38179: GO 38573
// index := GetElementIndex ( minersList , unit ) ;
38181: LD_ADDR_VAR 0 6
38185: PUSH
38186: LD_EXP 104
38190: PPUSH
38191: LD_VAR 0 1
38195: PPUSH
38196: CALL 44289 0 2
38200: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38201: LD_ADDR_VAR 0 5
38205: PUSH
38206: DOUBLE
38207: LD_EXP 105
38211: PUSH
38212: LD_VAR 0 6
38216: ARRAY
38217: INC
38218: ST_TO_ADDR
38219: LD_INT 1
38221: PUSH
38222: FOR_DOWNTO
38223: IFFALSE 38384
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38225: LD_EXP 105
38229: PUSH
38230: LD_VAR 0 6
38234: ARRAY
38235: PUSH
38236: LD_VAR 0 5
38240: ARRAY
38241: PUSH
38242: LD_INT 1
38244: ARRAY
38245: PUSH
38246: LD_VAR 0 2
38250: EQUAL
38251: PUSH
38252: LD_EXP 105
38256: PUSH
38257: LD_VAR 0 6
38261: ARRAY
38262: PUSH
38263: LD_VAR 0 5
38267: ARRAY
38268: PUSH
38269: LD_INT 2
38271: ARRAY
38272: PUSH
38273: LD_VAR 0 3
38277: EQUAL
38278: AND
38279: IFFALSE 38382
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38281: LD_EXP 105
38285: PUSH
38286: LD_VAR 0 6
38290: ARRAY
38291: PUSH
38292: LD_VAR 0 5
38296: ARRAY
38297: PUSH
38298: LD_INT 1
38300: ARRAY
38301: PPUSH
38302: LD_EXP 105
38306: PUSH
38307: LD_VAR 0 6
38311: ARRAY
38312: PUSH
38313: LD_VAR 0 5
38317: ARRAY
38318: PUSH
38319: LD_INT 2
38321: ARRAY
38322: PPUSH
38323: LD_VAR 0 1
38327: PPUSH
38328: CALL_OW 255
38332: PPUSH
38333: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38337: LD_ADDR_EXP 105
38341: PUSH
38342: LD_EXP 105
38346: PPUSH
38347: LD_VAR 0 6
38351: PPUSH
38352: LD_EXP 105
38356: PUSH
38357: LD_VAR 0 6
38361: ARRAY
38362: PPUSH
38363: LD_VAR 0 5
38367: PPUSH
38368: CALL_OW 3
38372: PPUSH
38373: CALL_OW 1
38377: ST_TO_ADDR
// exit ;
38378: POP
38379: POP
38380: GO 38573
// end ; end ;
38382: GO 38222
38384: POP
38385: POP
// for i := minerMinesList [ index ] downto 1 do
38386: LD_ADDR_VAR 0 5
38390: PUSH
38391: DOUBLE
38392: LD_EXP 105
38396: PUSH
38397: LD_VAR 0 6
38401: ARRAY
38402: INC
38403: ST_TO_ADDR
38404: LD_INT 1
38406: PUSH
38407: FOR_DOWNTO
38408: IFFALSE 38571
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38410: LD_EXP 105
38414: PUSH
38415: LD_VAR 0 6
38419: ARRAY
38420: PUSH
38421: LD_VAR 0 5
38425: ARRAY
38426: PUSH
38427: LD_INT 1
38429: ARRAY
38430: PPUSH
38431: LD_EXP 105
38435: PUSH
38436: LD_VAR 0 6
38440: ARRAY
38441: PUSH
38442: LD_VAR 0 5
38446: ARRAY
38447: PUSH
38448: LD_INT 2
38450: ARRAY
38451: PPUSH
38452: LD_VAR 0 2
38456: PPUSH
38457: LD_VAR 0 3
38461: PPUSH
38462: CALL_OW 298
38466: PUSH
38467: LD_INT 6
38469: LESS
38470: IFFALSE 38569
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38472: LD_EXP 105
38476: PUSH
38477: LD_VAR 0 6
38481: ARRAY
38482: PUSH
38483: LD_VAR 0 5
38487: ARRAY
38488: PUSH
38489: LD_INT 1
38491: ARRAY
38492: PPUSH
38493: LD_EXP 105
38497: PUSH
38498: LD_VAR 0 6
38502: ARRAY
38503: PUSH
38504: LD_VAR 0 5
38508: ARRAY
38509: PUSH
38510: LD_INT 2
38512: ARRAY
38513: PPUSH
38514: LD_VAR 0 1
38518: PPUSH
38519: CALL_OW 255
38523: PPUSH
38524: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38528: LD_ADDR_EXP 105
38532: PUSH
38533: LD_EXP 105
38537: PPUSH
38538: LD_VAR 0 6
38542: PPUSH
38543: LD_EXP 105
38547: PUSH
38548: LD_VAR 0 6
38552: ARRAY
38553: PPUSH
38554: LD_VAR 0 5
38558: PPUSH
38559: CALL_OW 3
38563: PPUSH
38564: CALL_OW 1
38568: ST_TO_ADDR
// end ; end ;
38569: GO 38407
38571: POP
38572: POP
// end ;
38573: LD_VAR 0 4
38577: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38578: LD_INT 0
38580: PPUSH
38581: PPUSH
38582: PPUSH
38583: PPUSH
38584: PPUSH
38585: PPUSH
38586: PPUSH
38587: PPUSH
38588: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38589: LD_VAR 0 1
38593: PPUSH
38594: CALL_OW 264
38598: PUSH
38599: LD_INT 81
38601: EQUAL
38602: NOT
38603: PUSH
38604: LD_VAR 0 1
38608: PUSH
38609: LD_EXP 104
38613: IN
38614: NOT
38615: OR
38616: IFFALSE 38620
// exit ;
38618: GO 38942
// index := GetElementIndex ( minersList , unit ) ;
38620: LD_ADDR_VAR 0 6
38624: PUSH
38625: LD_EXP 104
38629: PPUSH
38630: LD_VAR 0 1
38634: PPUSH
38635: CALL 44289 0 2
38639: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38640: LD_ADDR_VAR 0 8
38644: PUSH
38645: LD_EXP 106
38649: PUSH
38650: LD_EXP 105
38654: PUSH
38655: LD_VAR 0 6
38659: ARRAY
38660: MINUS
38661: ST_TO_ADDR
// if not minesFreeAmount then
38662: LD_VAR 0 8
38666: NOT
38667: IFFALSE 38671
// exit ;
38669: GO 38942
// tmp := [ ] ;
38671: LD_ADDR_VAR 0 7
38675: PUSH
38676: EMPTY
38677: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38678: LD_ADDR_VAR 0 5
38682: PUSH
38683: DOUBLE
38684: LD_INT 1
38686: DEC
38687: ST_TO_ADDR
38688: LD_VAR 0 8
38692: PUSH
38693: FOR_TO
38694: IFFALSE 38889
// begin _d := rand ( 0 , 5 ) ;
38696: LD_ADDR_VAR 0 11
38700: PUSH
38701: LD_INT 0
38703: PPUSH
38704: LD_INT 5
38706: PPUSH
38707: CALL_OW 12
38711: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38712: LD_ADDR_VAR 0 12
38716: PUSH
38717: LD_INT 2
38719: PPUSH
38720: LD_INT 6
38722: PPUSH
38723: CALL_OW 12
38727: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38728: LD_ADDR_VAR 0 9
38732: PUSH
38733: LD_VAR 0 2
38737: PPUSH
38738: LD_VAR 0 11
38742: PPUSH
38743: LD_VAR 0 12
38747: PPUSH
38748: CALL_OW 272
38752: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38753: LD_ADDR_VAR 0 10
38757: PUSH
38758: LD_VAR 0 3
38762: PPUSH
38763: LD_VAR 0 11
38767: PPUSH
38768: LD_VAR 0 12
38772: PPUSH
38773: CALL_OW 273
38777: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38778: LD_VAR 0 9
38782: PPUSH
38783: LD_VAR 0 10
38787: PPUSH
38788: CALL_OW 488
38792: PUSH
38793: LD_VAR 0 9
38797: PUSH
38798: LD_VAR 0 10
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_VAR 0 7
38811: IN
38812: NOT
38813: AND
38814: PUSH
38815: LD_VAR 0 9
38819: PPUSH
38820: LD_VAR 0 10
38824: PPUSH
38825: CALL_OW 458
38829: NOT
38830: AND
38831: IFFALSE 38873
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38833: LD_ADDR_VAR 0 7
38837: PUSH
38838: LD_VAR 0 7
38842: PPUSH
38843: LD_VAR 0 7
38847: PUSH
38848: LD_INT 1
38850: PLUS
38851: PPUSH
38852: LD_VAR 0 9
38856: PUSH
38857: LD_VAR 0 10
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PPUSH
38866: CALL_OW 1
38870: ST_TO_ADDR
38871: GO 38887
// i := i - 1 ;
38873: LD_ADDR_VAR 0 5
38877: PUSH
38878: LD_VAR 0 5
38882: PUSH
38883: LD_INT 1
38885: MINUS
38886: ST_TO_ADDR
// end ;
38887: GO 38693
38889: POP
38890: POP
// for i in tmp do
38891: LD_ADDR_VAR 0 5
38895: PUSH
38896: LD_VAR 0 7
38900: PUSH
38901: FOR_IN
38902: IFFALSE 38940
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38904: LD_VAR 0 1
38908: PPUSH
38909: LD_VAR 0 5
38913: PUSH
38914: LD_INT 1
38916: ARRAY
38917: PPUSH
38918: LD_VAR 0 5
38922: PUSH
38923: LD_INT 2
38925: ARRAY
38926: PPUSH
38927: CALL 37886 0 3
38931: NOT
38932: IFFALSE 38938
// exit ;
38934: POP
38935: POP
38936: GO 38942
38938: GO 38901
38940: POP
38941: POP
// end ;
38942: LD_VAR 0 4
38946: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38947: LD_INT 0
38949: PPUSH
38950: PPUSH
38951: PPUSH
38952: PPUSH
38953: PPUSH
38954: PPUSH
38955: PPUSH
// if not GetClass ( unit ) = class_sniper then
38956: LD_VAR 0 1
38960: PPUSH
38961: CALL_OW 257
38965: PUSH
38966: LD_INT 5
38968: EQUAL
38969: NOT
38970: IFFALSE 38974
// exit ;
38972: GO 39362
// dist := 8 ;
38974: LD_ADDR_VAR 0 5
38978: PUSH
38979: LD_INT 8
38981: ST_TO_ADDR
// viewRange := 12 ;
38982: LD_ADDR_VAR 0 7
38986: PUSH
38987: LD_INT 12
38989: ST_TO_ADDR
// side := GetSide ( unit ) ;
38990: LD_ADDR_VAR 0 6
38994: PUSH
38995: LD_VAR 0 1
38999: PPUSH
39000: CALL_OW 255
39004: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39005: LD_INT 61
39007: PPUSH
39008: LD_VAR 0 6
39012: PPUSH
39013: CALL_OW 321
39017: PUSH
39018: LD_INT 2
39020: EQUAL
39021: IFFALSE 39031
// viewRange := 16 ;
39023: LD_ADDR_VAR 0 7
39027: PUSH
39028: LD_INT 16
39030: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39031: LD_VAR 0 1
39035: PPUSH
39036: LD_VAR 0 2
39040: PPUSH
39041: LD_VAR 0 3
39045: PPUSH
39046: CALL_OW 297
39050: PUSH
39051: LD_VAR 0 5
39055: GREATER
39056: IFFALSE 39135
// begin ComMoveXY ( unit , x , y ) ;
39058: LD_VAR 0 1
39062: PPUSH
39063: LD_VAR 0 2
39067: PPUSH
39068: LD_VAR 0 3
39072: PPUSH
39073: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39077: LD_INT 35
39079: PPUSH
39080: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39084: LD_VAR 0 1
39088: PPUSH
39089: LD_VAR 0 2
39093: PPUSH
39094: LD_VAR 0 3
39098: PPUSH
39099: CALL 75625 0 3
39103: NOT
39104: IFFALSE 39108
// exit ;
39106: GO 39362
// until GetDistUnitXY ( unit , x , y ) < dist ;
39108: LD_VAR 0 1
39112: PPUSH
39113: LD_VAR 0 2
39117: PPUSH
39118: LD_VAR 0 3
39122: PPUSH
39123: CALL_OW 297
39127: PUSH
39128: LD_VAR 0 5
39132: LESS
39133: IFFALSE 39077
// end ; ComTurnXY ( unit , x , y ) ;
39135: LD_VAR 0 1
39139: PPUSH
39140: LD_VAR 0 2
39144: PPUSH
39145: LD_VAR 0 3
39149: PPUSH
39150: CALL_OW 118
// wait ( 5 ) ;
39154: LD_INT 5
39156: PPUSH
39157: CALL_OW 67
// _d := GetDir ( unit ) ;
39161: LD_ADDR_VAR 0 10
39165: PUSH
39166: LD_VAR 0 1
39170: PPUSH
39171: CALL_OW 254
39175: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39176: LD_ADDR_VAR 0 8
39180: PUSH
39181: LD_VAR 0 1
39185: PPUSH
39186: CALL_OW 250
39190: PPUSH
39191: LD_VAR 0 10
39195: PPUSH
39196: LD_VAR 0 5
39200: PPUSH
39201: CALL_OW 272
39205: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39206: LD_ADDR_VAR 0 9
39210: PUSH
39211: LD_VAR 0 1
39215: PPUSH
39216: CALL_OW 251
39220: PPUSH
39221: LD_VAR 0 10
39225: PPUSH
39226: LD_VAR 0 5
39230: PPUSH
39231: CALL_OW 273
39235: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39236: LD_VAR 0 8
39240: PPUSH
39241: LD_VAR 0 9
39245: PPUSH
39246: CALL_OW 488
39250: NOT
39251: IFFALSE 39255
// exit ;
39253: GO 39362
// ComAnimCustom ( unit , 1 ) ;
39255: LD_VAR 0 1
39259: PPUSH
39260: LD_INT 1
39262: PPUSH
39263: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39267: LD_VAR 0 8
39271: PPUSH
39272: LD_VAR 0 9
39276: PPUSH
39277: LD_VAR 0 6
39281: PPUSH
39282: LD_VAR 0 7
39286: PPUSH
39287: CALL_OW 330
// repeat wait ( 1 ) ;
39291: LD_INT 1
39293: PPUSH
39294: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39298: LD_VAR 0 1
39302: PPUSH
39303: CALL_OW 316
39307: PUSH
39308: LD_VAR 0 1
39312: PPUSH
39313: CALL_OW 314
39317: OR
39318: PUSH
39319: LD_VAR 0 1
39323: PPUSH
39324: CALL_OW 302
39328: NOT
39329: OR
39330: PUSH
39331: LD_VAR 0 1
39335: PPUSH
39336: CALL_OW 301
39340: OR
39341: IFFALSE 39291
// RemoveSeeing ( _x , _y , side ) ;
39343: LD_VAR 0 8
39347: PPUSH
39348: LD_VAR 0 9
39352: PPUSH
39353: LD_VAR 0 6
39357: PPUSH
39358: CALL_OW 331
// end ; end_of_file
39362: LD_VAR 0 4
39366: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39367: LD_INT 0
39369: PPUSH
39370: PPUSH
// if exist_mode then
39371: LD_VAR 0 2
39375: IFFALSE 39400
// unit := CreateCharacter ( prefix & ident ) else
39377: LD_ADDR_VAR 0 5
39381: PUSH
39382: LD_VAR 0 3
39386: PUSH
39387: LD_VAR 0 1
39391: STR
39392: PPUSH
39393: CALL_OW 34
39397: ST_TO_ADDR
39398: GO 39415
// unit := NewCharacter ( ident ) ;
39400: LD_ADDR_VAR 0 5
39404: PUSH
39405: LD_VAR 0 1
39409: PPUSH
39410: CALL_OW 25
39414: ST_TO_ADDR
// result := unit ;
39415: LD_ADDR_VAR 0 4
39419: PUSH
39420: LD_VAR 0 5
39424: ST_TO_ADDR
// end ;
39425: LD_VAR 0 4
39429: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39430: LD_INT 0
39432: PPUSH
39433: PPUSH
// if not side or not nation then
39434: LD_VAR 0 1
39438: NOT
39439: PUSH
39440: LD_VAR 0 2
39444: NOT
39445: OR
39446: IFFALSE 39450
// exit ;
39448: GO 40218
// case nation of nation_american :
39450: LD_VAR 0 2
39454: PUSH
39455: LD_INT 1
39457: DOUBLE
39458: EQUAL
39459: IFTRUE 39463
39461: GO 39677
39463: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39464: LD_ADDR_VAR 0 4
39468: PUSH
39469: LD_INT 35
39471: PUSH
39472: LD_INT 45
39474: PUSH
39475: LD_INT 46
39477: PUSH
39478: LD_INT 47
39480: PUSH
39481: LD_INT 82
39483: PUSH
39484: LD_INT 83
39486: PUSH
39487: LD_INT 84
39489: PUSH
39490: LD_INT 85
39492: PUSH
39493: LD_INT 86
39495: PUSH
39496: LD_INT 1
39498: PUSH
39499: LD_INT 2
39501: PUSH
39502: LD_INT 6
39504: PUSH
39505: LD_INT 15
39507: PUSH
39508: LD_INT 16
39510: PUSH
39511: LD_INT 7
39513: PUSH
39514: LD_INT 12
39516: PUSH
39517: LD_INT 13
39519: PUSH
39520: LD_INT 10
39522: PUSH
39523: LD_INT 14
39525: PUSH
39526: LD_INT 20
39528: PUSH
39529: LD_INT 21
39531: PUSH
39532: LD_INT 22
39534: PUSH
39535: LD_INT 25
39537: PUSH
39538: LD_INT 32
39540: PUSH
39541: LD_INT 27
39543: PUSH
39544: LD_INT 36
39546: PUSH
39547: LD_INT 69
39549: PUSH
39550: LD_INT 39
39552: PUSH
39553: LD_INT 34
39555: PUSH
39556: LD_INT 40
39558: PUSH
39559: LD_INT 48
39561: PUSH
39562: LD_INT 49
39564: PUSH
39565: LD_INT 50
39567: PUSH
39568: LD_INT 51
39570: PUSH
39571: LD_INT 52
39573: PUSH
39574: LD_INT 53
39576: PUSH
39577: LD_INT 54
39579: PUSH
39580: LD_INT 55
39582: PUSH
39583: LD_INT 56
39585: PUSH
39586: LD_INT 57
39588: PUSH
39589: LD_INT 58
39591: PUSH
39592: LD_INT 59
39594: PUSH
39595: LD_INT 60
39597: PUSH
39598: LD_INT 61
39600: PUSH
39601: LD_INT 62
39603: PUSH
39604: LD_INT 80
39606: PUSH
39607: LD_INT 82
39609: PUSH
39610: LD_INT 83
39612: PUSH
39613: LD_INT 84
39615: PUSH
39616: LD_INT 85
39618: PUSH
39619: LD_INT 86
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: ST_TO_ADDR
39675: GO 40142
39677: LD_INT 2
39679: DOUBLE
39680: EQUAL
39681: IFTRUE 39685
39683: GO 39911
39685: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39686: LD_ADDR_VAR 0 4
39690: PUSH
39691: LD_INT 35
39693: PUSH
39694: LD_INT 45
39696: PUSH
39697: LD_INT 46
39699: PUSH
39700: LD_INT 47
39702: PUSH
39703: LD_INT 82
39705: PUSH
39706: LD_INT 83
39708: PUSH
39709: LD_INT 84
39711: PUSH
39712: LD_INT 85
39714: PUSH
39715: LD_INT 87
39717: PUSH
39718: LD_INT 70
39720: PUSH
39721: LD_INT 1
39723: PUSH
39724: LD_INT 11
39726: PUSH
39727: LD_INT 3
39729: PUSH
39730: LD_INT 4
39732: PUSH
39733: LD_INT 5
39735: PUSH
39736: LD_INT 6
39738: PUSH
39739: LD_INT 15
39741: PUSH
39742: LD_INT 18
39744: PUSH
39745: LD_INT 7
39747: PUSH
39748: LD_INT 17
39750: PUSH
39751: LD_INT 8
39753: PUSH
39754: LD_INT 20
39756: PUSH
39757: LD_INT 21
39759: PUSH
39760: LD_INT 22
39762: PUSH
39763: LD_INT 72
39765: PUSH
39766: LD_INT 26
39768: PUSH
39769: LD_INT 69
39771: PUSH
39772: LD_INT 39
39774: PUSH
39775: LD_INT 40
39777: PUSH
39778: LD_INT 41
39780: PUSH
39781: LD_INT 42
39783: PUSH
39784: LD_INT 43
39786: PUSH
39787: LD_INT 48
39789: PUSH
39790: LD_INT 49
39792: PUSH
39793: LD_INT 50
39795: PUSH
39796: LD_INT 51
39798: PUSH
39799: LD_INT 52
39801: PUSH
39802: LD_INT 53
39804: PUSH
39805: LD_INT 54
39807: PUSH
39808: LD_INT 55
39810: PUSH
39811: LD_INT 56
39813: PUSH
39814: LD_INT 60
39816: PUSH
39817: LD_INT 61
39819: PUSH
39820: LD_INT 62
39822: PUSH
39823: LD_INT 66
39825: PUSH
39826: LD_INT 67
39828: PUSH
39829: LD_INT 68
39831: PUSH
39832: LD_INT 81
39834: PUSH
39835: LD_INT 82
39837: PUSH
39838: LD_INT 83
39840: PUSH
39841: LD_INT 84
39843: PUSH
39844: LD_INT 85
39846: PUSH
39847: LD_INT 87
39849: PUSH
39850: LD_INT 88
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: ST_TO_ADDR
39909: GO 40142
39911: LD_INT 3
39913: DOUBLE
39914: EQUAL
39915: IFTRUE 39919
39917: GO 40141
39919: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39920: LD_ADDR_VAR 0 4
39924: PUSH
39925: LD_INT 46
39927: PUSH
39928: LD_INT 47
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: LD_INT 82
39939: PUSH
39940: LD_INT 83
39942: PUSH
39943: LD_INT 84
39945: PUSH
39946: LD_INT 85
39948: PUSH
39949: LD_INT 86
39951: PUSH
39952: LD_INT 11
39954: PUSH
39955: LD_INT 9
39957: PUSH
39958: LD_INT 20
39960: PUSH
39961: LD_INT 19
39963: PUSH
39964: LD_INT 21
39966: PUSH
39967: LD_INT 24
39969: PUSH
39970: LD_INT 22
39972: PUSH
39973: LD_INT 25
39975: PUSH
39976: LD_INT 28
39978: PUSH
39979: LD_INT 29
39981: PUSH
39982: LD_INT 30
39984: PUSH
39985: LD_INT 31
39987: PUSH
39988: LD_INT 37
39990: PUSH
39991: LD_INT 38
39993: PUSH
39994: LD_INT 32
39996: PUSH
39997: LD_INT 27
39999: PUSH
40000: LD_INT 33
40002: PUSH
40003: LD_INT 69
40005: PUSH
40006: LD_INT 39
40008: PUSH
40009: LD_INT 34
40011: PUSH
40012: LD_INT 40
40014: PUSH
40015: LD_INT 71
40017: PUSH
40018: LD_INT 23
40020: PUSH
40021: LD_INT 44
40023: PUSH
40024: LD_INT 48
40026: PUSH
40027: LD_INT 49
40029: PUSH
40030: LD_INT 50
40032: PUSH
40033: LD_INT 51
40035: PUSH
40036: LD_INT 52
40038: PUSH
40039: LD_INT 53
40041: PUSH
40042: LD_INT 54
40044: PUSH
40045: LD_INT 55
40047: PUSH
40048: LD_INT 56
40050: PUSH
40051: LD_INT 57
40053: PUSH
40054: LD_INT 58
40056: PUSH
40057: LD_INT 59
40059: PUSH
40060: LD_INT 63
40062: PUSH
40063: LD_INT 64
40065: PUSH
40066: LD_INT 65
40068: PUSH
40069: LD_INT 82
40071: PUSH
40072: LD_INT 83
40074: PUSH
40075: LD_INT 84
40077: PUSH
40078: LD_INT 85
40080: PUSH
40081: LD_INT 86
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: ST_TO_ADDR
40139: GO 40142
40141: POP
// if state > - 1 and state < 3 then
40142: LD_VAR 0 3
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: GREATER
40151: PUSH
40152: LD_VAR 0 3
40156: PUSH
40157: LD_INT 3
40159: LESS
40160: AND
40161: IFFALSE 40218
// for i in result do
40163: LD_ADDR_VAR 0 5
40167: PUSH
40168: LD_VAR 0 4
40172: PUSH
40173: FOR_IN
40174: IFFALSE 40216
// if GetTech ( i , side ) <> state then
40176: LD_VAR 0 5
40180: PPUSH
40181: LD_VAR 0 1
40185: PPUSH
40186: CALL_OW 321
40190: PUSH
40191: LD_VAR 0 3
40195: NONEQUAL
40196: IFFALSE 40214
// result := result diff i ;
40198: LD_ADDR_VAR 0 4
40202: PUSH
40203: LD_VAR 0 4
40207: PUSH
40208: LD_VAR 0 5
40212: DIFF
40213: ST_TO_ADDR
40214: GO 40173
40216: POP
40217: POP
// end ;
40218: LD_VAR 0 4
40222: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40223: LD_INT 0
40225: PPUSH
40226: PPUSH
40227: PPUSH
// result := true ;
40228: LD_ADDR_VAR 0 3
40232: PUSH
40233: LD_INT 1
40235: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40236: LD_ADDR_VAR 0 5
40240: PUSH
40241: LD_VAR 0 2
40245: PPUSH
40246: CALL_OW 480
40250: ST_TO_ADDR
// if not tmp then
40251: LD_VAR 0 5
40255: NOT
40256: IFFALSE 40260
// exit ;
40258: GO 40309
// for i in tmp do
40260: LD_ADDR_VAR 0 4
40264: PUSH
40265: LD_VAR 0 5
40269: PUSH
40270: FOR_IN
40271: IFFALSE 40307
// if GetTech ( i , side ) <> state_researched then
40273: LD_VAR 0 4
40277: PPUSH
40278: LD_VAR 0 1
40282: PPUSH
40283: CALL_OW 321
40287: PUSH
40288: LD_INT 2
40290: NONEQUAL
40291: IFFALSE 40305
// begin result := false ;
40293: LD_ADDR_VAR 0 3
40297: PUSH
40298: LD_INT 0
40300: ST_TO_ADDR
// exit ;
40301: POP
40302: POP
40303: GO 40309
// end ;
40305: GO 40270
40307: POP
40308: POP
// end ;
40309: LD_VAR 0 3
40313: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40314: LD_INT 0
40316: PPUSH
40317: PPUSH
40318: PPUSH
40319: PPUSH
40320: PPUSH
40321: PPUSH
40322: PPUSH
40323: PPUSH
40324: PPUSH
40325: PPUSH
40326: PPUSH
40327: PPUSH
40328: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40329: LD_VAR 0 1
40333: NOT
40334: PUSH
40335: LD_VAR 0 1
40339: PPUSH
40340: CALL_OW 257
40344: PUSH
40345: LD_INT 9
40347: NONEQUAL
40348: OR
40349: IFFALSE 40353
// exit ;
40351: GO 40926
// side := GetSide ( unit ) ;
40353: LD_ADDR_VAR 0 9
40357: PUSH
40358: LD_VAR 0 1
40362: PPUSH
40363: CALL_OW 255
40367: ST_TO_ADDR
// tech_space := tech_spacanom ;
40368: LD_ADDR_VAR 0 12
40372: PUSH
40373: LD_INT 29
40375: ST_TO_ADDR
// tech_time := tech_taurad ;
40376: LD_ADDR_VAR 0 13
40380: PUSH
40381: LD_INT 28
40383: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40384: LD_ADDR_VAR 0 11
40388: PUSH
40389: LD_VAR 0 1
40393: PPUSH
40394: CALL_OW 310
40398: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40399: LD_VAR 0 11
40403: PPUSH
40404: CALL_OW 247
40408: PUSH
40409: LD_INT 2
40411: EQUAL
40412: IFFALSE 40416
// exit ;
40414: GO 40926
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40416: LD_ADDR_VAR 0 8
40420: PUSH
40421: LD_INT 81
40423: PUSH
40424: LD_VAR 0 9
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 3
40435: PUSH
40436: LD_INT 21
40438: PUSH
40439: LD_INT 3
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PPUSH
40454: CALL_OW 69
40458: ST_TO_ADDR
// if not tmp then
40459: LD_VAR 0 8
40463: NOT
40464: IFFALSE 40468
// exit ;
40466: GO 40926
// if in_unit then
40468: LD_VAR 0 11
40472: IFFALSE 40496
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40474: LD_ADDR_VAR 0 10
40478: PUSH
40479: LD_VAR 0 8
40483: PPUSH
40484: LD_VAR 0 11
40488: PPUSH
40489: CALL_OW 74
40493: ST_TO_ADDR
40494: GO 40516
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40496: LD_ADDR_VAR 0 10
40500: PUSH
40501: LD_VAR 0 8
40505: PPUSH
40506: LD_VAR 0 1
40510: PPUSH
40511: CALL_OW 74
40515: ST_TO_ADDR
// if not enemy then
40516: LD_VAR 0 10
40520: NOT
40521: IFFALSE 40525
// exit ;
40523: GO 40926
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40525: LD_VAR 0 11
40529: PUSH
40530: LD_VAR 0 11
40534: PPUSH
40535: LD_VAR 0 10
40539: PPUSH
40540: CALL_OW 296
40544: PUSH
40545: LD_INT 13
40547: GREATER
40548: AND
40549: PUSH
40550: LD_VAR 0 1
40554: PPUSH
40555: LD_VAR 0 10
40559: PPUSH
40560: CALL_OW 296
40564: PUSH
40565: LD_INT 12
40567: GREATER
40568: OR
40569: IFFALSE 40573
// exit ;
40571: GO 40926
// missile := [ 1 ] ;
40573: LD_ADDR_VAR 0 14
40577: PUSH
40578: LD_INT 1
40580: PUSH
40581: EMPTY
40582: LIST
40583: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40584: LD_VAR 0 9
40588: PPUSH
40589: LD_VAR 0 12
40593: PPUSH
40594: CALL_OW 325
40598: IFFALSE 40627
// missile := Replace ( missile , missile + 1 , 2 ) ;
40600: LD_ADDR_VAR 0 14
40604: PUSH
40605: LD_VAR 0 14
40609: PPUSH
40610: LD_VAR 0 14
40614: PUSH
40615: LD_INT 1
40617: PLUS
40618: PPUSH
40619: LD_INT 2
40621: PPUSH
40622: CALL_OW 1
40626: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40627: LD_VAR 0 9
40631: PPUSH
40632: LD_VAR 0 13
40636: PPUSH
40637: CALL_OW 325
40641: PUSH
40642: LD_VAR 0 10
40646: PPUSH
40647: CALL_OW 255
40651: PPUSH
40652: LD_VAR 0 13
40656: PPUSH
40657: CALL_OW 325
40661: NOT
40662: AND
40663: IFFALSE 40692
// missile := Replace ( missile , missile + 1 , 3 ) ;
40665: LD_ADDR_VAR 0 14
40669: PUSH
40670: LD_VAR 0 14
40674: PPUSH
40675: LD_VAR 0 14
40679: PUSH
40680: LD_INT 1
40682: PLUS
40683: PPUSH
40684: LD_INT 3
40686: PPUSH
40687: CALL_OW 1
40691: ST_TO_ADDR
// if missile < 2 then
40692: LD_VAR 0 14
40696: PUSH
40697: LD_INT 2
40699: LESS
40700: IFFALSE 40704
// exit ;
40702: GO 40926
// x := GetX ( enemy ) ;
40704: LD_ADDR_VAR 0 4
40708: PUSH
40709: LD_VAR 0 10
40713: PPUSH
40714: CALL_OW 250
40718: ST_TO_ADDR
// y := GetY ( enemy ) ;
40719: LD_ADDR_VAR 0 5
40723: PUSH
40724: LD_VAR 0 10
40728: PPUSH
40729: CALL_OW 251
40733: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40734: LD_ADDR_VAR 0 6
40738: PUSH
40739: LD_VAR 0 4
40743: PUSH
40744: LD_INT 1
40746: NEG
40747: PPUSH
40748: LD_INT 1
40750: PPUSH
40751: CALL_OW 12
40755: PLUS
40756: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40757: LD_ADDR_VAR 0 7
40761: PUSH
40762: LD_VAR 0 5
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PPUSH
40771: LD_INT 1
40773: PPUSH
40774: CALL_OW 12
40778: PLUS
40779: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40780: LD_VAR 0 6
40784: PPUSH
40785: LD_VAR 0 7
40789: PPUSH
40790: CALL_OW 488
40794: NOT
40795: IFFALSE 40817
// begin _x := x ;
40797: LD_ADDR_VAR 0 6
40801: PUSH
40802: LD_VAR 0 4
40806: ST_TO_ADDR
// _y := y ;
40807: LD_ADDR_VAR 0 7
40811: PUSH
40812: LD_VAR 0 5
40816: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40817: LD_ADDR_VAR 0 3
40821: PUSH
40822: LD_INT 1
40824: PPUSH
40825: LD_VAR 0 14
40829: PPUSH
40830: CALL_OW 12
40834: ST_TO_ADDR
// case i of 1 :
40835: LD_VAR 0 3
40839: PUSH
40840: LD_INT 1
40842: DOUBLE
40843: EQUAL
40844: IFTRUE 40848
40846: GO 40865
40848: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40849: LD_VAR 0 1
40853: PPUSH
40854: LD_VAR 0 10
40858: PPUSH
40859: CALL_OW 115
40863: GO 40926
40865: LD_INT 2
40867: DOUBLE
40868: EQUAL
40869: IFTRUE 40873
40871: GO 40895
40873: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40874: LD_VAR 0 1
40878: PPUSH
40879: LD_VAR 0 6
40883: PPUSH
40884: LD_VAR 0 7
40888: PPUSH
40889: CALL_OW 153
40893: GO 40926
40895: LD_INT 3
40897: DOUBLE
40898: EQUAL
40899: IFTRUE 40903
40901: GO 40925
40903: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40904: LD_VAR 0 1
40908: PPUSH
40909: LD_VAR 0 6
40913: PPUSH
40914: LD_VAR 0 7
40918: PPUSH
40919: CALL_OW 154
40923: GO 40926
40925: POP
// end ;
40926: LD_VAR 0 2
40930: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40931: LD_INT 0
40933: PPUSH
40934: PPUSH
40935: PPUSH
40936: PPUSH
40937: PPUSH
40938: PPUSH
// if not unit or not building then
40939: LD_VAR 0 1
40943: NOT
40944: PUSH
40945: LD_VAR 0 2
40949: NOT
40950: OR
40951: IFFALSE 40955
// exit ;
40953: GO 41113
// x := GetX ( building ) ;
40955: LD_ADDR_VAR 0 5
40959: PUSH
40960: LD_VAR 0 2
40964: PPUSH
40965: CALL_OW 250
40969: ST_TO_ADDR
// y := GetY ( building ) ;
40970: LD_ADDR_VAR 0 6
40974: PUSH
40975: LD_VAR 0 2
40979: PPUSH
40980: CALL_OW 251
40984: ST_TO_ADDR
// for i = 0 to 5 do
40985: LD_ADDR_VAR 0 4
40989: PUSH
40990: DOUBLE
40991: LD_INT 0
40993: DEC
40994: ST_TO_ADDR
40995: LD_INT 5
40997: PUSH
40998: FOR_TO
40999: IFFALSE 41111
// begin _x := ShiftX ( x , i , 3 ) ;
41001: LD_ADDR_VAR 0 7
41005: PUSH
41006: LD_VAR 0 5
41010: PPUSH
41011: LD_VAR 0 4
41015: PPUSH
41016: LD_INT 3
41018: PPUSH
41019: CALL_OW 272
41023: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41024: LD_ADDR_VAR 0 8
41028: PUSH
41029: LD_VAR 0 6
41033: PPUSH
41034: LD_VAR 0 4
41038: PPUSH
41039: LD_INT 3
41041: PPUSH
41042: CALL_OW 273
41046: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41047: LD_VAR 0 7
41051: PPUSH
41052: LD_VAR 0 8
41056: PPUSH
41057: CALL_OW 488
41061: NOT
41062: IFFALSE 41066
// continue ;
41064: GO 40998
// if HexInfo ( _x , _y ) = 0 then
41066: LD_VAR 0 7
41070: PPUSH
41071: LD_VAR 0 8
41075: PPUSH
41076: CALL_OW 428
41080: PUSH
41081: LD_INT 0
41083: EQUAL
41084: IFFALSE 41109
// begin ComMoveXY ( unit , _x , _y ) ;
41086: LD_VAR 0 1
41090: PPUSH
41091: LD_VAR 0 7
41095: PPUSH
41096: LD_VAR 0 8
41100: PPUSH
41101: CALL_OW 111
// exit ;
41105: POP
41106: POP
41107: GO 41113
// end ; end ;
41109: GO 40998
41111: POP
41112: POP
// end ;
41113: LD_VAR 0 3
41117: RET
// export function ScanBase ( side , base_area ) ; begin
41118: LD_INT 0
41120: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41121: LD_ADDR_VAR 0 3
41125: PUSH
41126: LD_VAR 0 2
41130: PPUSH
41131: LD_INT 81
41133: PUSH
41134: LD_VAR 0 1
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PPUSH
41143: CALL_OW 70
41147: ST_TO_ADDR
// end ;
41148: LD_VAR 0 3
41152: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41153: LD_INT 0
41155: PPUSH
41156: PPUSH
41157: PPUSH
41158: PPUSH
// result := false ;
41159: LD_ADDR_VAR 0 2
41163: PUSH
41164: LD_INT 0
41166: ST_TO_ADDR
// side := GetSide ( unit ) ;
41167: LD_ADDR_VAR 0 3
41171: PUSH
41172: LD_VAR 0 1
41176: PPUSH
41177: CALL_OW 255
41181: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41182: LD_ADDR_VAR 0 4
41186: PUSH
41187: LD_VAR 0 1
41191: PPUSH
41192: CALL_OW 248
41196: ST_TO_ADDR
// case nat of 1 :
41197: LD_VAR 0 4
41201: PUSH
41202: LD_INT 1
41204: DOUBLE
41205: EQUAL
41206: IFTRUE 41210
41208: GO 41221
41210: POP
// tech := tech_lassight ; 2 :
41211: LD_ADDR_VAR 0 5
41215: PUSH
41216: LD_INT 12
41218: ST_TO_ADDR
41219: GO 41260
41221: LD_INT 2
41223: DOUBLE
41224: EQUAL
41225: IFTRUE 41229
41227: GO 41240
41229: POP
// tech := tech_mortar ; 3 :
41230: LD_ADDR_VAR 0 5
41234: PUSH
41235: LD_INT 41
41237: ST_TO_ADDR
41238: GO 41260
41240: LD_INT 3
41242: DOUBLE
41243: EQUAL
41244: IFTRUE 41248
41246: GO 41259
41248: POP
// tech := tech_bazooka ; end ;
41249: LD_ADDR_VAR 0 5
41253: PUSH
41254: LD_INT 44
41256: ST_TO_ADDR
41257: GO 41260
41259: POP
// if Researched ( side , tech ) then
41260: LD_VAR 0 3
41264: PPUSH
41265: LD_VAR 0 5
41269: PPUSH
41270: CALL_OW 325
41274: IFFALSE 41301
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41276: LD_ADDR_VAR 0 2
41280: PUSH
41281: LD_INT 5
41283: PUSH
41284: LD_INT 8
41286: PUSH
41287: LD_INT 9
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: LIST
41294: PUSH
41295: LD_VAR 0 4
41299: ARRAY
41300: ST_TO_ADDR
// end ;
41301: LD_VAR 0 2
41305: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41306: LD_INT 0
41308: PPUSH
41309: PPUSH
41310: PPUSH
// if not mines then
41311: LD_VAR 0 2
41315: NOT
41316: IFFALSE 41320
// exit ;
41318: GO 41464
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41320: LD_ADDR_VAR 0 5
41324: PUSH
41325: LD_INT 81
41327: PUSH
41328: LD_VAR 0 1
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 3
41339: PUSH
41340: LD_INT 21
41342: PUSH
41343: LD_INT 3
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PPUSH
41358: CALL_OW 69
41362: ST_TO_ADDR
// for i in mines do
41363: LD_ADDR_VAR 0 4
41367: PUSH
41368: LD_VAR 0 2
41372: PUSH
41373: FOR_IN
41374: IFFALSE 41462
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41376: LD_VAR 0 4
41380: PUSH
41381: LD_INT 1
41383: ARRAY
41384: PPUSH
41385: LD_VAR 0 4
41389: PUSH
41390: LD_INT 2
41392: ARRAY
41393: PPUSH
41394: CALL_OW 458
41398: NOT
41399: IFFALSE 41403
// continue ;
41401: GO 41373
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41403: LD_VAR 0 4
41407: PUSH
41408: LD_INT 1
41410: ARRAY
41411: PPUSH
41412: LD_VAR 0 4
41416: PUSH
41417: LD_INT 2
41419: ARRAY
41420: PPUSH
41421: CALL_OW 428
41425: PUSH
41426: LD_VAR 0 5
41430: IN
41431: IFFALSE 41460
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41433: LD_VAR 0 4
41437: PUSH
41438: LD_INT 1
41440: ARRAY
41441: PPUSH
41442: LD_VAR 0 4
41446: PUSH
41447: LD_INT 2
41449: ARRAY
41450: PPUSH
41451: LD_VAR 0 1
41455: PPUSH
41456: CALL_OW 456
// end ;
41460: GO 41373
41462: POP
41463: POP
// end ;
41464: LD_VAR 0 3
41468: RET
// export function Count ( array ) ; var i ; begin
41469: LD_INT 0
41471: PPUSH
41472: PPUSH
// result := 0 ;
41473: LD_ADDR_VAR 0 2
41477: PUSH
41478: LD_INT 0
41480: ST_TO_ADDR
// for i in array do
41481: LD_ADDR_VAR 0 3
41485: PUSH
41486: LD_VAR 0 1
41490: PUSH
41491: FOR_IN
41492: IFFALSE 41516
// if i then
41494: LD_VAR 0 3
41498: IFFALSE 41514
// result := result + 1 ;
41500: LD_ADDR_VAR 0 2
41504: PUSH
41505: LD_VAR 0 2
41509: PUSH
41510: LD_INT 1
41512: PLUS
41513: ST_TO_ADDR
41514: GO 41491
41516: POP
41517: POP
// end ;
41518: LD_VAR 0 2
41522: RET
// export function IsEmpty ( building ) ; begin
41523: LD_INT 0
41525: PPUSH
// if not building then
41526: LD_VAR 0 1
41530: NOT
41531: IFFALSE 41535
// exit ;
41533: GO 41578
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41535: LD_ADDR_VAR 0 2
41539: PUSH
41540: LD_VAR 0 1
41544: PUSH
41545: LD_INT 22
41547: PUSH
41548: LD_VAR 0 1
41552: PPUSH
41553: CALL_OW 255
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 58
41564: PUSH
41565: EMPTY
41566: LIST
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PPUSH
41572: CALL_OW 69
41576: IN
41577: ST_TO_ADDR
// end ;
41578: LD_VAR 0 2
41582: RET
// export function IsNotFull ( building ) ; var places ; begin
41583: LD_INT 0
41585: PPUSH
41586: PPUSH
// if not building then
41587: LD_VAR 0 1
41591: NOT
41592: IFFALSE 41596
// exit ;
41594: GO 41767
// result := false ;
41596: LD_ADDR_VAR 0 2
41600: PUSH
41601: LD_INT 0
41603: ST_TO_ADDR
// places := 0 ;
41604: LD_ADDR_VAR 0 3
41608: PUSH
41609: LD_INT 0
41611: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41612: LD_VAR 0 1
41616: PPUSH
41617: CALL_OW 266
41621: PUSH
41622: LD_INT 0
41624: DOUBLE
41625: EQUAL
41626: IFTRUE 41684
41628: LD_INT 1
41630: DOUBLE
41631: EQUAL
41632: IFTRUE 41684
41634: LD_INT 6
41636: DOUBLE
41637: EQUAL
41638: IFTRUE 41684
41640: LD_INT 7
41642: DOUBLE
41643: EQUAL
41644: IFTRUE 41684
41646: LD_INT 8
41648: DOUBLE
41649: EQUAL
41650: IFTRUE 41684
41652: LD_INT 4
41654: DOUBLE
41655: EQUAL
41656: IFTRUE 41684
41658: LD_INT 5
41660: DOUBLE
41661: EQUAL
41662: IFTRUE 41684
41664: LD_INT 2
41666: DOUBLE
41667: EQUAL
41668: IFTRUE 41684
41670: LD_INT 3
41672: DOUBLE
41673: EQUAL
41674: IFTRUE 41684
41676: LD_INT 35
41678: DOUBLE
41679: EQUAL
41680: IFTRUE 41684
41682: GO 41695
41684: POP
// places := 6 ; b_bunker , b_breastwork :
41685: LD_ADDR_VAR 0 3
41689: PUSH
41690: LD_INT 6
41692: ST_TO_ADDR
41693: GO 41740
41695: LD_INT 32
41697: DOUBLE
41698: EQUAL
41699: IFTRUE 41709
41701: LD_INT 31
41703: DOUBLE
41704: EQUAL
41705: IFTRUE 41709
41707: GO 41720
41709: POP
// places := 1 ; b_control_tower :
41710: LD_ADDR_VAR 0 3
41714: PUSH
41715: LD_INT 1
41717: ST_TO_ADDR
41718: GO 41740
41720: LD_INT 36
41722: DOUBLE
41723: EQUAL
41724: IFTRUE 41728
41726: GO 41739
41728: POP
// places := 3 ; end ;
41729: LD_ADDR_VAR 0 3
41733: PUSH
41734: LD_INT 3
41736: ST_TO_ADDR
41737: GO 41740
41739: POP
// if places then
41740: LD_VAR 0 3
41744: IFFALSE 41767
// result := UnitsInside ( building ) < places ;
41746: LD_ADDR_VAR 0 2
41750: PUSH
41751: LD_VAR 0 1
41755: PPUSH
41756: CALL_OW 313
41760: PUSH
41761: LD_VAR 0 3
41765: LESS
41766: ST_TO_ADDR
// end ;
41767: LD_VAR 0 2
41771: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41772: LD_INT 0
41774: PPUSH
41775: PPUSH
41776: PPUSH
41777: PPUSH
// tmp := [ ] ;
41778: LD_ADDR_VAR 0 3
41782: PUSH
41783: EMPTY
41784: ST_TO_ADDR
// list := [ ] ;
41785: LD_ADDR_VAR 0 5
41789: PUSH
41790: EMPTY
41791: ST_TO_ADDR
// for i = 16 to 25 do
41792: LD_ADDR_VAR 0 4
41796: PUSH
41797: DOUBLE
41798: LD_INT 16
41800: DEC
41801: ST_TO_ADDR
41802: LD_INT 25
41804: PUSH
41805: FOR_TO
41806: IFFALSE 41879
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41808: LD_ADDR_VAR 0 3
41812: PUSH
41813: LD_VAR 0 3
41817: PUSH
41818: LD_INT 22
41820: PUSH
41821: LD_VAR 0 1
41825: PPUSH
41826: CALL_OW 255
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 91
41837: PUSH
41838: LD_VAR 0 1
41842: PUSH
41843: LD_INT 6
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 30
41853: PUSH
41854: LD_VAR 0 4
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: LIST
41867: PUSH
41868: EMPTY
41869: LIST
41870: PPUSH
41871: CALL_OW 69
41875: ADD
41876: ST_TO_ADDR
41877: GO 41805
41879: POP
41880: POP
// for i = 1 to tmp do
41881: LD_ADDR_VAR 0 4
41885: PUSH
41886: DOUBLE
41887: LD_INT 1
41889: DEC
41890: ST_TO_ADDR
41891: LD_VAR 0 3
41895: PUSH
41896: FOR_TO
41897: IFFALSE 41985
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41899: LD_ADDR_VAR 0 5
41903: PUSH
41904: LD_VAR 0 5
41908: PUSH
41909: LD_VAR 0 3
41913: PUSH
41914: LD_VAR 0 4
41918: ARRAY
41919: PPUSH
41920: CALL_OW 266
41924: PUSH
41925: LD_VAR 0 3
41929: PUSH
41930: LD_VAR 0 4
41934: ARRAY
41935: PPUSH
41936: CALL_OW 250
41940: PUSH
41941: LD_VAR 0 3
41945: PUSH
41946: LD_VAR 0 4
41950: ARRAY
41951: PPUSH
41952: CALL_OW 251
41956: PUSH
41957: LD_VAR 0 3
41961: PUSH
41962: LD_VAR 0 4
41966: ARRAY
41967: PPUSH
41968: CALL_OW 254
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: PUSH
41979: EMPTY
41980: LIST
41981: ADD
41982: ST_TO_ADDR
41983: GO 41896
41985: POP
41986: POP
// result := list ;
41987: LD_ADDR_VAR 0 2
41991: PUSH
41992: LD_VAR 0 5
41996: ST_TO_ADDR
// end ;
41997: LD_VAR 0 2
42001: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42002: LD_INT 0
42004: PPUSH
42005: PPUSH
42006: PPUSH
42007: PPUSH
42008: PPUSH
42009: PPUSH
42010: PPUSH
// if not factory then
42011: LD_VAR 0 1
42015: NOT
42016: IFFALSE 42020
// exit ;
42018: GO 42613
// if control = control_apeman then
42020: LD_VAR 0 4
42024: PUSH
42025: LD_INT 5
42027: EQUAL
42028: IFFALSE 42137
// begin tmp := UnitsInside ( factory ) ;
42030: LD_ADDR_VAR 0 8
42034: PUSH
42035: LD_VAR 0 1
42039: PPUSH
42040: CALL_OW 313
42044: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42045: LD_VAR 0 8
42049: PPUSH
42050: LD_INT 25
42052: PUSH
42053: LD_INT 12
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PPUSH
42060: CALL_OW 72
42064: NOT
42065: IFFALSE 42075
// control := control_manual ;
42067: LD_ADDR_VAR 0 4
42071: PUSH
42072: LD_INT 1
42074: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42075: LD_ADDR_VAR 0 8
42079: PUSH
42080: LD_VAR 0 1
42084: PPUSH
42085: CALL 41772 0 1
42089: ST_TO_ADDR
// if tmp then
42090: LD_VAR 0 8
42094: IFFALSE 42137
// begin for i in tmp do
42096: LD_ADDR_VAR 0 7
42100: PUSH
42101: LD_VAR 0 8
42105: PUSH
42106: FOR_IN
42107: IFFALSE 42135
// if i [ 1 ] = b_ext_radio then
42109: LD_VAR 0 7
42113: PUSH
42114: LD_INT 1
42116: ARRAY
42117: PUSH
42118: LD_INT 22
42120: EQUAL
42121: IFFALSE 42133
// begin control := control_remote ;
42123: LD_ADDR_VAR 0 4
42127: PUSH
42128: LD_INT 2
42130: ST_TO_ADDR
// break ;
42131: GO 42135
// end ;
42133: GO 42106
42135: POP
42136: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42137: LD_VAR 0 1
42141: PPUSH
42142: LD_VAR 0 2
42146: PPUSH
42147: LD_VAR 0 3
42151: PPUSH
42152: LD_VAR 0 4
42156: PPUSH
42157: LD_VAR 0 5
42161: PPUSH
42162: CALL_OW 448
42166: IFFALSE 42201
// begin result := [ chassis , engine , control , weapon ] ;
42168: LD_ADDR_VAR 0 6
42172: PUSH
42173: LD_VAR 0 2
42177: PUSH
42178: LD_VAR 0 3
42182: PUSH
42183: LD_VAR 0 4
42187: PUSH
42188: LD_VAR 0 5
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: ST_TO_ADDR
// exit ;
42199: GO 42613
// end ; _chassis := AvailableChassisList ( factory ) ;
42201: LD_ADDR_VAR 0 9
42205: PUSH
42206: LD_VAR 0 1
42210: PPUSH
42211: CALL_OW 475
42215: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42216: LD_ADDR_VAR 0 11
42220: PUSH
42221: LD_VAR 0 1
42225: PPUSH
42226: CALL_OW 476
42230: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42231: LD_ADDR_VAR 0 12
42235: PUSH
42236: LD_VAR 0 1
42240: PPUSH
42241: CALL_OW 477
42245: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42246: LD_ADDR_VAR 0 10
42250: PUSH
42251: LD_VAR 0 1
42255: PPUSH
42256: CALL_OW 478
42260: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42261: LD_VAR 0 9
42265: NOT
42266: PUSH
42267: LD_VAR 0 11
42271: NOT
42272: OR
42273: PUSH
42274: LD_VAR 0 12
42278: NOT
42279: OR
42280: PUSH
42281: LD_VAR 0 10
42285: NOT
42286: OR
42287: IFFALSE 42322
// begin result := [ chassis , engine , control , weapon ] ;
42289: LD_ADDR_VAR 0 6
42293: PUSH
42294: LD_VAR 0 2
42298: PUSH
42299: LD_VAR 0 3
42303: PUSH
42304: LD_VAR 0 4
42308: PUSH
42309: LD_VAR 0 5
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: ST_TO_ADDR
// exit ;
42320: GO 42613
// end ; if not chassis in _chassis then
42322: LD_VAR 0 2
42326: PUSH
42327: LD_VAR 0 9
42331: IN
42332: NOT
42333: IFFALSE 42359
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42335: LD_ADDR_VAR 0 2
42339: PUSH
42340: LD_VAR 0 9
42344: PUSH
42345: LD_INT 1
42347: PPUSH
42348: LD_VAR 0 9
42352: PPUSH
42353: CALL_OW 12
42357: ARRAY
42358: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42359: LD_VAR 0 2
42363: PPUSH
42364: LD_VAR 0 3
42368: PPUSH
42369: CALL 42618 0 2
42373: NOT
42374: IFFALSE 42433
// repeat engine := _engine [ 1 ] ;
42376: LD_ADDR_VAR 0 3
42380: PUSH
42381: LD_VAR 0 11
42385: PUSH
42386: LD_INT 1
42388: ARRAY
42389: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42390: LD_ADDR_VAR 0 11
42394: PUSH
42395: LD_VAR 0 11
42399: PPUSH
42400: LD_INT 1
42402: PPUSH
42403: CALL_OW 3
42407: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42408: LD_VAR 0 2
42412: PPUSH
42413: LD_VAR 0 3
42417: PPUSH
42418: CALL 42618 0 2
42422: PUSH
42423: LD_VAR 0 11
42427: PUSH
42428: EMPTY
42429: EQUAL
42430: OR
42431: IFFALSE 42376
// if not control in _control then
42433: LD_VAR 0 4
42437: PUSH
42438: LD_VAR 0 12
42442: IN
42443: NOT
42444: IFFALSE 42470
// control := _control [ rand ( 1 , _control ) ] ;
42446: LD_ADDR_VAR 0 4
42450: PUSH
42451: LD_VAR 0 12
42455: PUSH
42456: LD_INT 1
42458: PPUSH
42459: LD_VAR 0 12
42463: PPUSH
42464: CALL_OW 12
42468: ARRAY
42469: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42470: LD_VAR 0 2
42474: PPUSH
42475: LD_VAR 0 5
42479: PPUSH
42480: CALL 42838 0 2
42484: NOT
42485: IFFALSE 42544
// repeat weapon := _weapon [ 1 ] ;
42487: LD_ADDR_VAR 0 5
42491: PUSH
42492: LD_VAR 0 10
42496: PUSH
42497: LD_INT 1
42499: ARRAY
42500: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42501: LD_ADDR_VAR 0 10
42505: PUSH
42506: LD_VAR 0 10
42510: PPUSH
42511: LD_INT 1
42513: PPUSH
42514: CALL_OW 3
42518: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42519: LD_VAR 0 2
42523: PPUSH
42524: LD_VAR 0 5
42528: PPUSH
42529: CALL 42838 0 2
42533: PUSH
42534: LD_VAR 0 10
42538: PUSH
42539: EMPTY
42540: EQUAL
42541: OR
42542: IFFALSE 42487
// result := [ ] ;
42544: LD_ADDR_VAR 0 6
42548: PUSH
42549: EMPTY
42550: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42551: LD_VAR 0 1
42555: PPUSH
42556: LD_VAR 0 2
42560: PPUSH
42561: LD_VAR 0 3
42565: PPUSH
42566: LD_VAR 0 4
42570: PPUSH
42571: LD_VAR 0 5
42575: PPUSH
42576: CALL_OW 448
42580: IFFALSE 42613
// result := [ chassis , engine , control , weapon ] ;
42582: LD_ADDR_VAR 0 6
42586: PUSH
42587: LD_VAR 0 2
42591: PUSH
42592: LD_VAR 0 3
42596: PUSH
42597: LD_VAR 0 4
42601: PUSH
42602: LD_VAR 0 5
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: ST_TO_ADDR
// end ;
42613: LD_VAR 0 6
42617: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42618: LD_INT 0
42620: PPUSH
// if not chassis or not engine then
42621: LD_VAR 0 1
42625: NOT
42626: PUSH
42627: LD_VAR 0 2
42631: NOT
42632: OR
42633: IFFALSE 42637
// exit ;
42635: GO 42833
// case engine of engine_solar :
42637: LD_VAR 0 2
42641: PUSH
42642: LD_INT 2
42644: DOUBLE
42645: EQUAL
42646: IFTRUE 42650
42648: GO 42688
42650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42651: LD_ADDR_VAR 0 3
42655: PUSH
42656: LD_INT 11
42658: PUSH
42659: LD_INT 12
42661: PUSH
42662: LD_INT 13
42664: PUSH
42665: LD_INT 14
42667: PUSH
42668: LD_INT 1
42670: PUSH
42671: LD_INT 2
42673: PUSH
42674: LD_INT 3
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: ST_TO_ADDR
42686: GO 42817
42688: LD_INT 1
42690: DOUBLE
42691: EQUAL
42692: IFTRUE 42696
42694: GO 42758
42696: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42697: LD_ADDR_VAR 0 3
42701: PUSH
42702: LD_INT 11
42704: PUSH
42705: LD_INT 12
42707: PUSH
42708: LD_INT 13
42710: PUSH
42711: LD_INT 14
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: LD_INT 3
42722: PUSH
42723: LD_INT 4
42725: PUSH
42726: LD_INT 5
42728: PUSH
42729: LD_INT 21
42731: PUSH
42732: LD_INT 23
42734: PUSH
42735: LD_INT 22
42737: PUSH
42738: LD_INT 24
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: ST_TO_ADDR
42756: GO 42817
42758: LD_INT 3
42760: DOUBLE
42761: EQUAL
42762: IFTRUE 42766
42764: GO 42816
42766: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42767: LD_ADDR_VAR 0 3
42771: PUSH
42772: LD_INT 13
42774: PUSH
42775: LD_INT 14
42777: PUSH
42778: LD_INT 2
42780: PUSH
42781: LD_INT 3
42783: PUSH
42784: LD_INT 4
42786: PUSH
42787: LD_INT 5
42789: PUSH
42790: LD_INT 21
42792: PUSH
42793: LD_INT 22
42795: PUSH
42796: LD_INT 23
42798: PUSH
42799: LD_INT 24
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: ST_TO_ADDR
42814: GO 42817
42816: POP
// result := ( chassis in result ) ;
42817: LD_ADDR_VAR 0 3
42821: PUSH
42822: LD_VAR 0 1
42826: PUSH
42827: LD_VAR 0 3
42831: IN
42832: ST_TO_ADDR
// end ;
42833: LD_VAR 0 3
42837: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42838: LD_INT 0
42840: PPUSH
// if not chassis or not weapon then
42841: LD_VAR 0 1
42845: NOT
42846: PUSH
42847: LD_VAR 0 2
42851: NOT
42852: OR
42853: IFFALSE 42857
// exit ;
42855: GO 43917
// case weapon of us_machine_gun :
42857: LD_VAR 0 2
42861: PUSH
42862: LD_INT 2
42864: DOUBLE
42865: EQUAL
42866: IFTRUE 42870
42868: GO 42900
42870: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42871: LD_ADDR_VAR 0 3
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: LD_INT 2
42881: PUSH
42882: LD_INT 3
42884: PUSH
42885: LD_INT 4
42887: PUSH
42888: LD_INT 5
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: ST_TO_ADDR
42898: GO 43901
42900: LD_INT 3
42902: DOUBLE
42903: EQUAL
42904: IFTRUE 42908
42906: GO 42938
42908: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42909: LD_ADDR_VAR 0 3
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: LD_INT 2
42919: PUSH
42920: LD_INT 3
42922: PUSH
42923: LD_INT 4
42925: PUSH
42926: LD_INT 5
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: ST_TO_ADDR
42936: GO 43901
42938: LD_INT 11
42940: DOUBLE
42941: EQUAL
42942: IFTRUE 42946
42944: GO 42976
42946: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42947: LD_ADDR_VAR 0 3
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: LD_INT 2
42957: PUSH
42958: LD_INT 3
42960: PUSH
42961: LD_INT 4
42963: PUSH
42964: LD_INT 5
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: ST_TO_ADDR
42974: GO 43901
42976: LD_INT 4
42978: DOUBLE
42979: EQUAL
42980: IFTRUE 42984
42982: GO 43010
42984: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42985: LD_ADDR_VAR 0 3
42989: PUSH
42990: LD_INT 2
42992: PUSH
42993: LD_INT 3
42995: PUSH
42996: LD_INT 4
42998: PUSH
42999: LD_INT 5
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: ST_TO_ADDR
43008: GO 43901
43010: LD_INT 5
43012: DOUBLE
43013: EQUAL
43014: IFTRUE 43018
43016: GO 43044
43018: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43019: LD_ADDR_VAR 0 3
43023: PUSH
43024: LD_INT 2
43026: PUSH
43027: LD_INT 3
43029: PUSH
43030: LD_INT 4
43032: PUSH
43033: LD_INT 5
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: ST_TO_ADDR
43042: GO 43901
43044: LD_INT 9
43046: DOUBLE
43047: EQUAL
43048: IFTRUE 43052
43050: GO 43078
43052: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43053: LD_ADDR_VAR 0 3
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: LD_INT 3
43063: PUSH
43064: LD_INT 4
43066: PUSH
43067: LD_INT 5
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: ST_TO_ADDR
43076: GO 43901
43078: LD_INT 7
43080: DOUBLE
43081: EQUAL
43082: IFTRUE 43086
43084: GO 43112
43086: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43087: LD_ADDR_VAR 0 3
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: LD_INT 3
43097: PUSH
43098: LD_INT 4
43100: PUSH
43101: LD_INT 5
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: ST_TO_ADDR
43110: GO 43901
43112: LD_INT 12
43114: DOUBLE
43115: EQUAL
43116: IFTRUE 43120
43118: GO 43146
43120: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43121: LD_ADDR_VAR 0 3
43125: PUSH
43126: LD_INT 2
43128: PUSH
43129: LD_INT 3
43131: PUSH
43132: LD_INT 4
43134: PUSH
43135: LD_INT 5
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: ST_TO_ADDR
43144: GO 43901
43146: LD_INT 13
43148: DOUBLE
43149: EQUAL
43150: IFTRUE 43154
43152: GO 43180
43154: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43155: LD_ADDR_VAR 0 3
43159: PUSH
43160: LD_INT 2
43162: PUSH
43163: LD_INT 3
43165: PUSH
43166: LD_INT 4
43168: PUSH
43169: LD_INT 5
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: ST_TO_ADDR
43178: GO 43901
43180: LD_INT 14
43182: DOUBLE
43183: EQUAL
43184: IFTRUE 43188
43186: GO 43206
43188: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43189: LD_ADDR_VAR 0 3
43193: PUSH
43194: LD_INT 4
43196: PUSH
43197: LD_INT 5
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: ST_TO_ADDR
43204: GO 43901
43206: LD_INT 6
43208: DOUBLE
43209: EQUAL
43210: IFTRUE 43214
43212: GO 43232
43214: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43215: LD_ADDR_VAR 0 3
43219: PUSH
43220: LD_INT 4
43222: PUSH
43223: LD_INT 5
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: ST_TO_ADDR
43230: GO 43901
43232: LD_INT 10
43234: DOUBLE
43235: EQUAL
43236: IFTRUE 43240
43238: GO 43258
43240: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43241: LD_ADDR_VAR 0 3
43245: PUSH
43246: LD_INT 4
43248: PUSH
43249: LD_INT 5
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: ST_TO_ADDR
43256: GO 43901
43258: LD_INT 22
43260: DOUBLE
43261: EQUAL
43262: IFTRUE 43266
43264: GO 43292
43266: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43267: LD_ADDR_VAR 0 3
43271: PUSH
43272: LD_INT 11
43274: PUSH
43275: LD_INT 12
43277: PUSH
43278: LD_INT 13
43280: PUSH
43281: LD_INT 14
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: ST_TO_ADDR
43290: GO 43901
43292: LD_INT 23
43294: DOUBLE
43295: EQUAL
43296: IFTRUE 43300
43298: GO 43326
43300: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43301: LD_ADDR_VAR 0 3
43305: PUSH
43306: LD_INT 11
43308: PUSH
43309: LD_INT 12
43311: PUSH
43312: LD_INT 13
43314: PUSH
43315: LD_INT 14
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: ST_TO_ADDR
43324: GO 43901
43326: LD_INT 24
43328: DOUBLE
43329: EQUAL
43330: IFTRUE 43334
43332: GO 43360
43334: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43335: LD_ADDR_VAR 0 3
43339: PUSH
43340: LD_INT 11
43342: PUSH
43343: LD_INT 12
43345: PUSH
43346: LD_INT 13
43348: PUSH
43349: LD_INT 14
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: ST_TO_ADDR
43358: GO 43901
43360: LD_INT 30
43362: DOUBLE
43363: EQUAL
43364: IFTRUE 43368
43366: GO 43394
43368: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43369: LD_ADDR_VAR 0 3
43373: PUSH
43374: LD_INT 11
43376: PUSH
43377: LD_INT 12
43379: PUSH
43380: LD_INT 13
43382: PUSH
43383: LD_INT 14
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: ST_TO_ADDR
43392: GO 43901
43394: LD_INT 25
43396: DOUBLE
43397: EQUAL
43398: IFTRUE 43402
43400: GO 43420
43402: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43403: LD_ADDR_VAR 0 3
43407: PUSH
43408: LD_INT 13
43410: PUSH
43411: LD_INT 14
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: ST_TO_ADDR
43418: GO 43901
43420: LD_INT 27
43422: DOUBLE
43423: EQUAL
43424: IFTRUE 43428
43426: GO 43446
43428: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43429: LD_ADDR_VAR 0 3
43433: PUSH
43434: LD_INT 13
43436: PUSH
43437: LD_INT 14
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: ST_TO_ADDR
43444: GO 43901
43446: LD_INT 92
43448: DOUBLE
43449: EQUAL
43450: IFTRUE 43454
43452: GO 43480
43454: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43455: LD_ADDR_VAR 0 3
43459: PUSH
43460: LD_INT 11
43462: PUSH
43463: LD_INT 12
43465: PUSH
43466: LD_INT 13
43468: PUSH
43469: LD_INT 14
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: ST_TO_ADDR
43478: GO 43901
43480: LD_INT 28
43482: DOUBLE
43483: EQUAL
43484: IFTRUE 43488
43486: GO 43506
43488: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43489: LD_ADDR_VAR 0 3
43493: PUSH
43494: LD_INT 13
43496: PUSH
43497: LD_INT 14
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: ST_TO_ADDR
43504: GO 43901
43506: LD_INT 29
43508: DOUBLE
43509: EQUAL
43510: IFTRUE 43514
43512: GO 43532
43514: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43515: LD_ADDR_VAR 0 3
43519: PUSH
43520: LD_INT 13
43522: PUSH
43523: LD_INT 14
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: ST_TO_ADDR
43530: GO 43901
43532: LD_INT 31
43534: DOUBLE
43535: EQUAL
43536: IFTRUE 43540
43538: GO 43558
43540: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43541: LD_ADDR_VAR 0 3
43545: PUSH
43546: LD_INT 13
43548: PUSH
43549: LD_INT 14
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: ST_TO_ADDR
43556: GO 43901
43558: LD_INT 26
43560: DOUBLE
43561: EQUAL
43562: IFTRUE 43566
43564: GO 43584
43566: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43567: LD_ADDR_VAR 0 3
43571: PUSH
43572: LD_INT 13
43574: PUSH
43575: LD_INT 14
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: ST_TO_ADDR
43582: GO 43901
43584: LD_INT 42
43586: DOUBLE
43587: EQUAL
43588: IFTRUE 43592
43590: GO 43618
43592: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43593: LD_ADDR_VAR 0 3
43597: PUSH
43598: LD_INT 21
43600: PUSH
43601: LD_INT 22
43603: PUSH
43604: LD_INT 23
43606: PUSH
43607: LD_INT 24
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: ST_TO_ADDR
43616: GO 43901
43618: LD_INT 43
43620: DOUBLE
43621: EQUAL
43622: IFTRUE 43626
43624: GO 43652
43626: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43627: LD_ADDR_VAR 0 3
43631: PUSH
43632: LD_INT 21
43634: PUSH
43635: LD_INT 22
43637: PUSH
43638: LD_INT 23
43640: PUSH
43641: LD_INT 24
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: ST_TO_ADDR
43650: GO 43901
43652: LD_INT 44
43654: DOUBLE
43655: EQUAL
43656: IFTRUE 43660
43658: GO 43686
43660: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43661: LD_ADDR_VAR 0 3
43665: PUSH
43666: LD_INT 21
43668: PUSH
43669: LD_INT 22
43671: PUSH
43672: LD_INT 23
43674: PUSH
43675: LD_INT 24
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: ST_TO_ADDR
43684: GO 43901
43686: LD_INT 45
43688: DOUBLE
43689: EQUAL
43690: IFTRUE 43694
43692: GO 43720
43694: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43695: LD_ADDR_VAR 0 3
43699: PUSH
43700: LD_INT 21
43702: PUSH
43703: LD_INT 22
43705: PUSH
43706: LD_INT 23
43708: PUSH
43709: LD_INT 24
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: ST_TO_ADDR
43718: GO 43901
43720: LD_INT 49
43722: DOUBLE
43723: EQUAL
43724: IFTRUE 43728
43726: GO 43754
43728: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43729: LD_ADDR_VAR 0 3
43733: PUSH
43734: LD_INT 21
43736: PUSH
43737: LD_INT 22
43739: PUSH
43740: LD_INT 23
43742: PUSH
43743: LD_INT 24
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: ST_TO_ADDR
43752: GO 43901
43754: LD_INT 51
43756: DOUBLE
43757: EQUAL
43758: IFTRUE 43762
43760: GO 43788
43762: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43763: LD_ADDR_VAR 0 3
43767: PUSH
43768: LD_INT 21
43770: PUSH
43771: LD_INT 22
43773: PUSH
43774: LD_INT 23
43776: PUSH
43777: LD_INT 24
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: ST_TO_ADDR
43786: GO 43901
43788: LD_INT 52
43790: DOUBLE
43791: EQUAL
43792: IFTRUE 43796
43794: GO 43822
43796: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43797: LD_ADDR_VAR 0 3
43801: PUSH
43802: LD_INT 21
43804: PUSH
43805: LD_INT 22
43807: PUSH
43808: LD_INT 23
43810: PUSH
43811: LD_INT 24
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: ST_TO_ADDR
43820: GO 43901
43822: LD_INT 53
43824: DOUBLE
43825: EQUAL
43826: IFTRUE 43830
43828: GO 43848
43830: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43831: LD_ADDR_VAR 0 3
43835: PUSH
43836: LD_INT 23
43838: PUSH
43839: LD_INT 24
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: ST_TO_ADDR
43846: GO 43901
43848: LD_INT 46
43850: DOUBLE
43851: EQUAL
43852: IFTRUE 43856
43854: GO 43874
43856: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43857: LD_ADDR_VAR 0 3
43861: PUSH
43862: LD_INT 23
43864: PUSH
43865: LD_INT 24
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: ST_TO_ADDR
43872: GO 43901
43874: LD_INT 47
43876: DOUBLE
43877: EQUAL
43878: IFTRUE 43882
43880: GO 43900
43882: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43883: LD_ADDR_VAR 0 3
43887: PUSH
43888: LD_INT 23
43890: PUSH
43891: LD_INT 24
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: ST_TO_ADDR
43898: GO 43901
43900: POP
// result := ( chassis in result ) ;
43901: LD_ADDR_VAR 0 3
43905: PUSH
43906: LD_VAR 0 1
43910: PUSH
43911: LD_VAR 0 3
43915: IN
43916: ST_TO_ADDR
// end ;
43917: LD_VAR 0 3
43921: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43922: LD_INT 0
43924: PPUSH
43925: PPUSH
43926: PPUSH
43927: PPUSH
43928: PPUSH
43929: PPUSH
43930: PPUSH
// result := array ;
43931: LD_ADDR_VAR 0 5
43935: PUSH
43936: LD_VAR 0 1
43940: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43941: LD_VAR 0 1
43945: NOT
43946: PUSH
43947: LD_VAR 0 2
43951: NOT
43952: OR
43953: PUSH
43954: LD_VAR 0 3
43958: NOT
43959: OR
43960: PUSH
43961: LD_VAR 0 2
43965: PUSH
43966: LD_VAR 0 1
43970: GREATER
43971: OR
43972: PUSH
43973: LD_VAR 0 3
43977: PUSH
43978: LD_VAR 0 1
43982: GREATER
43983: OR
43984: IFFALSE 43988
// exit ;
43986: GO 44284
// if direction then
43988: LD_VAR 0 4
43992: IFFALSE 44056
// begin d := 1 ;
43994: LD_ADDR_VAR 0 9
43998: PUSH
43999: LD_INT 1
44001: ST_TO_ADDR
// if i_from > i_to then
44002: LD_VAR 0 2
44006: PUSH
44007: LD_VAR 0 3
44011: GREATER
44012: IFFALSE 44038
// length := ( array - i_from ) + i_to else
44014: LD_ADDR_VAR 0 11
44018: PUSH
44019: LD_VAR 0 1
44023: PUSH
44024: LD_VAR 0 2
44028: MINUS
44029: PUSH
44030: LD_VAR 0 3
44034: PLUS
44035: ST_TO_ADDR
44036: GO 44054
// length := i_to - i_from ;
44038: LD_ADDR_VAR 0 11
44042: PUSH
44043: LD_VAR 0 3
44047: PUSH
44048: LD_VAR 0 2
44052: MINUS
44053: ST_TO_ADDR
// end else
44054: GO 44117
// begin d := - 1 ;
44056: LD_ADDR_VAR 0 9
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: ST_TO_ADDR
// if i_from > i_to then
44065: LD_VAR 0 2
44069: PUSH
44070: LD_VAR 0 3
44074: GREATER
44075: IFFALSE 44095
// length := i_from - i_to else
44077: LD_ADDR_VAR 0 11
44081: PUSH
44082: LD_VAR 0 2
44086: PUSH
44087: LD_VAR 0 3
44091: MINUS
44092: ST_TO_ADDR
44093: GO 44117
// length := ( array - i_to ) + i_from ;
44095: LD_ADDR_VAR 0 11
44099: PUSH
44100: LD_VAR 0 1
44104: PUSH
44105: LD_VAR 0 3
44109: MINUS
44110: PUSH
44111: LD_VAR 0 2
44115: PLUS
44116: ST_TO_ADDR
// end ; if not length then
44117: LD_VAR 0 11
44121: NOT
44122: IFFALSE 44126
// exit ;
44124: GO 44284
// tmp := array ;
44126: LD_ADDR_VAR 0 10
44130: PUSH
44131: LD_VAR 0 1
44135: ST_TO_ADDR
// for i = 1 to length do
44136: LD_ADDR_VAR 0 6
44140: PUSH
44141: DOUBLE
44142: LD_INT 1
44144: DEC
44145: ST_TO_ADDR
44146: LD_VAR 0 11
44150: PUSH
44151: FOR_TO
44152: IFFALSE 44272
// begin for j = 1 to array do
44154: LD_ADDR_VAR 0 7
44158: PUSH
44159: DOUBLE
44160: LD_INT 1
44162: DEC
44163: ST_TO_ADDR
44164: LD_VAR 0 1
44168: PUSH
44169: FOR_TO
44170: IFFALSE 44258
// begin k := j + d ;
44172: LD_ADDR_VAR 0 8
44176: PUSH
44177: LD_VAR 0 7
44181: PUSH
44182: LD_VAR 0 9
44186: PLUS
44187: ST_TO_ADDR
// if k > array then
44188: LD_VAR 0 8
44192: PUSH
44193: LD_VAR 0 1
44197: GREATER
44198: IFFALSE 44208
// k := 1 ;
44200: LD_ADDR_VAR 0 8
44204: PUSH
44205: LD_INT 1
44207: ST_TO_ADDR
// if not k then
44208: LD_VAR 0 8
44212: NOT
44213: IFFALSE 44225
// k := array ;
44215: LD_ADDR_VAR 0 8
44219: PUSH
44220: LD_VAR 0 1
44224: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44225: LD_ADDR_VAR 0 10
44229: PUSH
44230: LD_VAR 0 10
44234: PPUSH
44235: LD_VAR 0 8
44239: PPUSH
44240: LD_VAR 0 1
44244: PUSH
44245: LD_VAR 0 7
44249: ARRAY
44250: PPUSH
44251: CALL_OW 1
44255: ST_TO_ADDR
// end ;
44256: GO 44169
44258: POP
44259: POP
// array := tmp ;
44260: LD_ADDR_VAR 0 1
44264: PUSH
44265: LD_VAR 0 10
44269: ST_TO_ADDR
// end ;
44270: GO 44151
44272: POP
44273: POP
// result := array ;
44274: LD_ADDR_VAR 0 5
44278: PUSH
44279: LD_VAR 0 1
44283: ST_TO_ADDR
// end ;
44284: LD_VAR 0 5
44288: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44289: LD_INT 0
44291: PPUSH
44292: PPUSH
// result := 0 ;
44293: LD_ADDR_VAR 0 3
44297: PUSH
44298: LD_INT 0
44300: ST_TO_ADDR
// if not array or not value in array then
44301: LD_VAR 0 1
44305: NOT
44306: PUSH
44307: LD_VAR 0 2
44311: PUSH
44312: LD_VAR 0 1
44316: IN
44317: NOT
44318: OR
44319: IFFALSE 44323
// exit ;
44321: GO 44377
// for i = 1 to array do
44323: LD_ADDR_VAR 0 4
44327: PUSH
44328: DOUBLE
44329: LD_INT 1
44331: DEC
44332: ST_TO_ADDR
44333: LD_VAR 0 1
44337: PUSH
44338: FOR_TO
44339: IFFALSE 44375
// if value = array [ i ] then
44341: LD_VAR 0 2
44345: PUSH
44346: LD_VAR 0 1
44350: PUSH
44351: LD_VAR 0 4
44355: ARRAY
44356: EQUAL
44357: IFFALSE 44373
// begin result := i ;
44359: LD_ADDR_VAR 0 3
44363: PUSH
44364: LD_VAR 0 4
44368: ST_TO_ADDR
// exit ;
44369: POP
44370: POP
44371: GO 44377
// end ;
44373: GO 44338
44375: POP
44376: POP
// end ;
44377: LD_VAR 0 3
44381: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44382: LD_INT 0
44384: PPUSH
// vc_chassis := chassis ;
44385: LD_ADDR_OWVAR 37
44389: PUSH
44390: LD_VAR 0 1
44394: ST_TO_ADDR
// vc_engine := engine ;
44395: LD_ADDR_OWVAR 39
44399: PUSH
44400: LD_VAR 0 2
44404: ST_TO_ADDR
// vc_control := control ;
44405: LD_ADDR_OWVAR 38
44409: PUSH
44410: LD_VAR 0 3
44414: ST_TO_ADDR
// vc_weapon := weapon ;
44415: LD_ADDR_OWVAR 40
44419: PUSH
44420: LD_VAR 0 4
44424: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44425: LD_ADDR_OWVAR 41
44429: PUSH
44430: LD_VAR 0 5
44434: ST_TO_ADDR
// end ;
44435: LD_VAR 0 6
44439: RET
// export function WantPlant ( unit ) ; var task ; begin
44440: LD_INT 0
44442: PPUSH
44443: PPUSH
// result := false ;
44444: LD_ADDR_VAR 0 2
44448: PUSH
44449: LD_INT 0
44451: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44452: LD_ADDR_VAR 0 3
44456: PUSH
44457: LD_VAR 0 1
44461: PPUSH
44462: CALL_OW 437
44466: ST_TO_ADDR
// if task then
44467: LD_VAR 0 3
44471: IFFALSE 44499
// if task [ 1 ] [ 1 ] = p then
44473: LD_VAR 0 3
44477: PUSH
44478: LD_INT 1
44480: ARRAY
44481: PUSH
44482: LD_INT 1
44484: ARRAY
44485: PUSH
44486: LD_STRING p
44488: EQUAL
44489: IFFALSE 44499
// result := true ;
44491: LD_ADDR_VAR 0 2
44495: PUSH
44496: LD_INT 1
44498: ST_TO_ADDR
// end ;
44499: LD_VAR 0 2
44503: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44504: LD_INT 0
44506: PPUSH
44507: PPUSH
44508: PPUSH
44509: PPUSH
// if pos < 1 then
44510: LD_VAR 0 2
44514: PUSH
44515: LD_INT 1
44517: LESS
44518: IFFALSE 44522
// exit ;
44520: GO 44825
// if pos = 1 then
44522: LD_VAR 0 2
44526: PUSH
44527: LD_INT 1
44529: EQUAL
44530: IFFALSE 44563
// result := Replace ( arr , pos [ 1 ] , value ) else
44532: LD_ADDR_VAR 0 4
44536: PUSH
44537: LD_VAR 0 1
44541: PPUSH
44542: LD_VAR 0 2
44546: PUSH
44547: LD_INT 1
44549: ARRAY
44550: PPUSH
44551: LD_VAR 0 3
44555: PPUSH
44556: CALL_OW 1
44560: ST_TO_ADDR
44561: GO 44825
// begin tmp := arr ;
44563: LD_ADDR_VAR 0 6
44567: PUSH
44568: LD_VAR 0 1
44572: ST_TO_ADDR
// s_arr := [ tmp ] ;
44573: LD_ADDR_VAR 0 7
44577: PUSH
44578: LD_VAR 0 6
44582: PUSH
44583: EMPTY
44584: LIST
44585: ST_TO_ADDR
// for i = 1 to pos - 1 do
44586: LD_ADDR_VAR 0 5
44590: PUSH
44591: DOUBLE
44592: LD_INT 1
44594: DEC
44595: ST_TO_ADDR
44596: LD_VAR 0 2
44600: PUSH
44601: LD_INT 1
44603: MINUS
44604: PUSH
44605: FOR_TO
44606: IFFALSE 44651
// begin tmp := tmp [ pos [ i ] ] ;
44608: LD_ADDR_VAR 0 6
44612: PUSH
44613: LD_VAR 0 6
44617: PUSH
44618: LD_VAR 0 2
44622: PUSH
44623: LD_VAR 0 5
44627: ARRAY
44628: ARRAY
44629: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44630: LD_ADDR_VAR 0 7
44634: PUSH
44635: LD_VAR 0 7
44639: PUSH
44640: LD_VAR 0 6
44644: PUSH
44645: EMPTY
44646: LIST
44647: ADD
44648: ST_TO_ADDR
// end ;
44649: GO 44605
44651: POP
44652: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44653: LD_ADDR_VAR 0 6
44657: PUSH
44658: LD_VAR 0 6
44662: PPUSH
44663: LD_VAR 0 2
44667: PUSH
44668: LD_VAR 0 2
44672: ARRAY
44673: PPUSH
44674: LD_VAR 0 3
44678: PPUSH
44679: CALL_OW 1
44683: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44684: LD_ADDR_VAR 0 7
44688: PUSH
44689: LD_VAR 0 7
44693: PPUSH
44694: LD_VAR 0 7
44698: PPUSH
44699: LD_VAR 0 6
44703: PPUSH
44704: CALL_OW 1
44708: ST_TO_ADDR
// for i = s_arr downto 2 do
44709: LD_ADDR_VAR 0 5
44713: PUSH
44714: DOUBLE
44715: LD_VAR 0 7
44719: INC
44720: ST_TO_ADDR
44721: LD_INT 2
44723: PUSH
44724: FOR_DOWNTO
44725: IFFALSE 44809
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44727: LD_ADDR_VAR 0 6
44731: PUSH
44732: LD_VAR 0 7
44736: PUSH
44737: LD_VAR 0 5
44741: PUSH
44742: LD_INT 1
44744: MINUS
44745: ARRAY
44746: PPUSH
44747: LD_VAR 0 2
44751: PUSH
44752: LD_VAR 0 5
44756: PUSH
44757: LD_INT 1
44759: MINUS
44760: ARRAY
44761: PPUSH
44762: LD_VAR 0 7
44766: PUSH
44767: LD_VAR 0 5
44771: ARRAY
44772: PPUSH
44773: CALL_OW 1
44777: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44778: LD_ADDR_VAR 0 7
44782: PUSH
44783: LD_VAR 0 7
44787: PPUSH
44788: LD_VAR 0 5
44792: PUSH
44793: LD_INT 1
44795: MINUS
44796: PPUSH
44797: LD_VAR 0 6
44801: PPUSH
44802: CALL_OW 1
44806: ST_TO_ADDR
// end ;
44807: GO 44724
44809: POP
44810: POP
// result := s_arr [ 1 ] ;
44811: LD_ADDR_VAR 0 4
44815: PUSH
44816: LD_VAR 0 7
44820: PUSH
44821: LD_INT 1
44823: ARRAY
44824: ST_TO_ADDR
// end ; end ;
44825: LD_VAR 0 4
44829: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44830: LD_INT 0
44832: PPUSH
44833: PPUSH
// if not list then
44834: LD_VAR 0 1
44838: NOT
44839: IFFALSE 44843
// exit ;
44841: GO 44934
// i := list [ pos1 ] ;
44843: LD_ADDR_VAR 0 5
44847: PUSH
44848: LD_VAR 0 1
44852: PUSH
44853: LD_VAR 0 2
44857: ARRAY
44858: ST_TO_ADDR
// if not i then
44859: LD_VAR 0 5
44863: NOT
44864: IFFALSE 44868
// exit ;
44866: GO 44934
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44868: LD_ADDR_VAR 0 1
44872: PUSH
44873: LD_VAR 0 1
44877: PPUSH
44878: LD_VAR 0 2
44882: PPUSH
44883: LD_VAR 0 1
44887: PUSH
44888: LD_VAR 0 3
44892: ARRAY
44893: PPUSH
44894: CALL_OW 1
44898: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44899: LD_ADDR_VAR 0 1
44903: PUSH
44904: LD_VAR 0 1
44908: PPUSH
44909: LD_VAR 0 3
44913: PPUSH
44914: LD_VAR 0 5
44918: PPUSH
44919: CALL_OW 1
44923: ST_TO_ADDR
// result := list ;
44924: LD_ADDR_VAR 0 4
44928: PUSH
44929: LD_VAR 0 1
44933: ST_TO_ADDR
// end ;
44934: LD_VAR 0 4
44938: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44939: LD_INT 0
44941: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44942: LD_ADDR_VAR 0 5
44946: PUSH
44947: LD_VAR 0 1
44951: PPUSH
44952: CALL_OW 250
44956: PPUSH
44957: LD_VAR 0 1
44961: PPUSH
44962: CALL_OW 251
44966: PPUSH
44967: LD_VAR 0 2
44971: PPUSH
44972: LD_VAR 0 3
44976: PPUSH
44977: LD_VAR 0 4
44981: PPUSH
44982: CALL 44992 0 5
44986: ST_TO_ADDR
// end ;
44987: LD_VAR 0 5
44991: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44992: LD_INT 0
44994: PPUSH
44995: PPUSH
44996: PPUSH
44997: PPUSH
// if not list then
44998: LD_VAR 0 3
45002: NOT
45003: IFFALSE 45007
// exit ;
45005: GO 45395
// result := [ ] ;
45007: LD_ADDR_VAR 0 6
45011: PUSH
45012: EMPTY
45013: ST_TO_ADDR
// for i in list do
45014: LD_ADDR_VAR 0 7
45018: PUSH
45019: LD_VAR 0 3
45023: PUSH
45024: FOR_IN
45025: IFFALSE 45227
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45027: LD_ADDR_VAR 0 9
45031: PUSH
45032: LD_VAR 0 7
45036: PPUSH
45037: LD_VAR 0 1
45041: PPUSH
45042: LD_VAR 0 2
45046: PPUSH
45047: CALL_OW 297
45051: ST_TO_ADDR
// if not result then
45052: LD_VAR 0 6
45056: NOT
45057: IFFALSE 45083
// result := [ [ i , tmp ] ] else
45059: LD_ADDR_VAR 0 6
45063: PUSH
45064: LD_VAR 0 7
45068: PUSH
45069: LD_VAR 0 9
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: EMPTY
45079: LIST
45080: ST_TO_ADDR
45081: GO 45225
// begin if result [ result ] [ 2 ] < tmp then
45083: LD_VAR 0 6
45087: PUSH
45088: LD_VAR 0 6
45092: ARRAY
45093: PUSH
45094: LD_INT 2
45096: ARRAY
45097: PUSH
45098: LD_VAR 0 9
45102: LESS
45103: IFFALSE 45145
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45105: LD_ADDR_VAR 0 6
45109: PUSH
45110: LD_VAR 0 6
45114: PPUSH
45115: LD_VAR 0 6
45119: PUSH
45120: LD_INT 1
45122: PLUS
45123: PPUSH
45124: LD_VAR 0 7
45128: PUSH
45129: LD_VAR 0 9
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PPUSH
45138: CALL_OW 2
45142: ST_TO_ADDR
45143: GO 45225
// for j = 1 to result do
45145: LD_ADDR_VAR 0 8
45149: PUSH
45150: DOUBLE
45151: LD_INT 1
45153: DEC
45154: ST_TO_ADDR
45155: LD_VAR 0 6
45159: PUSH
45160: FOR_TO
45161: IFFALSE 45223
// begin if tmp < result [ j ] [ 2 ] then
45163: LD_VAR 0 9
45167: PUSH
45168: LD_VAR 0 6
45172: PUSH
45173: LD_VAR 0 8
45177: ARRAY
45178: PUSH
45179: LD_INT 2
45181: ARRAY
45182: LESS
45183: IFFALSE 45221
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45185: LD_ADDR_VAR 0 6
45189: PUSH
45190: LD_VAR 0 6
45194: PPUSH
45195: LD_VAR 0 8
45199: PPUSH
45200: LD_VAR 0 7
45204: PUSH
45205: LD_VAR 0 9
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PPUSH
45214: CALL_OW 2
45218: ST_TO_ADDR
// break ;
45219: GO 45223
// end ; end ;
45221: GO 45160
45223: POP
45224: POP
// end ; end ;
45225: GO 45024
45227: POP
45228: POP
// if result and not asc then
45229: LD_VAR 0 6
45233: PUSH
45234: LD_VAR 0 4
45238: NOT
45239: AND
45240: IFFALSE 45315
// begin tmp := result ;
45242: LD_ADDR_VAR 0 9
45246: PUSH
45247: LD_VAR 0 6
45251: ST_TO_ADDR
// for i = tmp downto 1 do
45252: LD_ADDR_VAR 0 7
45256: PUSH
45257: DOUBLE
45258: LD_VAR 0 9
45262: INC
45263: ST_TO_ADDR
45264: LD_INT 1
45266: PUSH
45267: FOR_DOWNTO
45268: IFFALSE 45313
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45270: LD_ADDR_VAR 0 6
45274: PUSH
45275: LD_VAR 0 6
45279: PPUSH
45280: LD_VAR 0 9
45284: PUSH
45285: LD_VAR 0 7
45289: MINUS
45290: PUSH
45291: LD_INT 1
45293: PLUS
45294: PPUSH
45295: LD_VAR 0 9
45299: PUSH
45300: LD_VAR 0 7
45304: ARRAY
45305: PPUSH
45306: CALL_OW 1
45310: ST_TO_ADDR
45311: GO 45267
45313: POP
45314: POP
// end ; tmp := [ ] ;
45315: LD_ADDR_VAR 0 9
45319: PUSH
45320: EMPTY
45321: ST_TO_ADDR
// if mode then
45322: LD_VAR 0 5
45326: IFFALSE 45395
// begin for i = 1 to result do
45328: LD_ADDR_VAR 0 7
45332: PUSH
45333: DOUBLE
45334: LD_INT 1
45336: DEC
45337: ST_TO_ADDR
45338: LD_VAR 0 6
45342: PUSH
45343: FOR_TO
45344: IFFALSE 45383
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45346: LD_ADDR_VAR 0 9
45350: PUSH
45351: LD_VAR 0 9
45355: PPUSH
45356: LD_VAR 0 7
45360: PPUSH
45361: LD_VAR 0 6
45365: PUSH
45366: LD_VAR 0 7
45370: ARRAY
45371: PUSH
45372: LD_INT 1
45374: ARRAY
45375: PPUSH
45376: CALL_OW 1
45380: ST_TO_ADDR
45381: GO 45343
45383: POP
45384: POP
// result := tmp ;
45385: LD_ADDR_VAR 0 6
45389: PUSH
45390: LD_VAR 0 9
45394: ST_TO_ADDR
// end ; end ;
45395: LD_VAR 0 6
45399: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45400: LD_INT 0
45402: PPUSH
45403: PPUSH
45404: PPUSH
45405: PPUSH
45406: PPUSH
45407: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45408: LD_ADDR_VAR 0 5
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: EMPTY
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: ST_TO_ADDR
// if not x or not y then
45430: LD_VAR 0 2
45434: NOT
45435: PUSH
45436: LD_VAR 0 3
45440: NOT
45441: OR
45442: IFFALSE 45446
// exit ;
45444: GO 47096
// if not range then
45446: LD_VAR 0 4
45450: NOT
45451: IFFALSE 45461
// range := 10 ;
45453: LD_ADDR_VAR 0 4
45457: PUSH
45458: LD_INT 10
45460: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45461: LD_ADDR_VAR 0 8
45465: PUSH
45466: LD_INT 81
45468: PUSH
45469: LD_VAR 0 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 92
45480: PUSH
45481: LD_VAR 0 2
45485: PUSH
45486: LD_VAR 0 3
45490: PUSH
45491: LD_VAR 0 4
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 3
45504: PUSH
45505: LD_INT 21
45507: PUSH
45508: LD_INT 3
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: PPUSH
45524: CALL_OW 69
45528: ST_TO_ADDR
// if not tmp then
45529: LD_VAR 0 8
45533: NOT
45534: IFFALSE 45538
// exit ;
45536: GO 47096
// for i in tmp do
45538: LD_ADDR_VAR 0 6
45542: PUSH
45543: LD_VAR 0 8
45547: PUSH
45548: FOR_IN
45549: IFFALSE 47071
// begin points := [ 0 , 0 , 0 ] ;
45551: LD_ADDR_VAR 0 9
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: LIST
45569: ST_TO_ADDR
// bpoints := 1 ;
45570: LD_ADDR_VAR 0 10
45574: PUSH
45575: LD_INT 1
45577: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45578: LD_VAR 0 6
45582: PPUSH
45583: CALL_OW 247
45587: PUSH
45588: LD_INT 1
45590: DOUBLE
45591: EQUAL
45592: IFTRUE 45596
45594: GO 46174
45596: POP
// begin if GetClass ( i ) = 1 then
45597: LD_VAR 0 6
45601: PPUSH
45602: CALL_OW 257
45606: PUSH
45607: LD_INT 1
45609: EQUAL
45610: IFFALSE 45631
// points := [ 10 , 5 , 3 ] ;
45612: LD_ADDR_VAR 0 9
45616: PUSH
45617: LD_INT 10
45619: PUSH
45620: LD_INT 5
45622: PUSH
45623: LD_INT 3
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: LIST
45630: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45631: LD_VAR 0 6
45635: PPUSH
45636: CALL_OW 257
45640: PUSH
45641: LD_INT 2
45643: PUSH
45644: LD_INT 3
45646: PUSH
45647: LD_INT 4
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: LIST
45654: IN
45655: IFFALSE 45676
// points := [ 3 , 2 , 1 ] ;
45657: LD_ADDR_VAR 0 9
45661: PUSH
45662: LD_INT 3
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: LIST
45675: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45676: LD_VAR 0 6
45680: PPUSH
45681: CALL_OW 257
45685: PUSH
45686: LD_INT 5
45688: EQUAL
45689: IFFALSE 45710
// points := [ 130 , 5 , 2 ] ;
45691: LD_ADDR_VAR 0 9
45695: PUSH
45696: LD_INT 130
45698: PUSH
45699: LD_INT 5
45701: PUSH
45702: LD_INT 2
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: LIST
45709: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45710: LD_VAR 0 6
45714: PPUSH
45715: CALL_OW 257
45719: PUSH
45720: LD_INT 8
45722: EQUAL
45723: IFFALSE 45744
// points := [ 35 , 35 , 30 ] ;
45725: LD_ADDR_VAR 0 9
45729: PUSH
45730: LD_INT 35
45732: PUSH
45733: LD_INT 35
45735: PUSH
45736: LD_INT 30
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: LIST
45743: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45744: LD_VAR 0 6
45748: PPUSH
45749: CALL_OW 257
45753: PUSH
45754: LD_INT 9
45756: EQUAL
45757: IFFALSE 45778
// points := [ 20 , 55 , 40 ] ;
45759: LD_ADDR_VAR 0 9
45763: PUSH
45764: LD_INT 20
45766: PUSH
45767: LD_INT 55
45769: PUSH
45770: LD_INT 40
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: LIST
45777: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45778: LD_VAR 0 6
45782: PPUSH
45783: CALL_OW 257
45787: PUSH
45788: LD_INT 12
45790: PUSH
45791: LD_INT 16
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: IN
45798: IFFALSE 45819
// points := [ 5 , 3 , 2 ] ;
45800: LD_ADDR_VAR 0 9
45804: PUSH
45805: LD_INT 5
45807: PUSH
45808: LD_INT 3
45810: PUSH
45811: LD_INT 2
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: LIST
45818: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45819: LD_VAR 0 6
45823: PPUSH
45824: CALL_OW 257
45828: PUSH
45829: LD_INT 17
45831: EQUAL
45832: IFFALSE 45853
// points := [ 100 , 50 , 75 ] ;
45834: LD_ADDR_VAR 0 9
45838: PUSH
45839: LD_INT 100
45841: PUSH
45842: LD_INT 50
45844: PUSH
45845: LD_INT 75
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: LIST
45852: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45853: LD_VAR 0 6
45857: PPUSH
45858: CALL_OW 257
45862: PUSH
45863: LD_INT 15
45865: EQUAL
45866: IFFALSE 45887
// points := [ 10 , 5 , 3 ] ;
45868: LD_ADDR_VAR 0 9
45872: PUSH
45873: LD_INT 10
45875: PUSH
45876: LD_INT 5
45878: PUSH
45879: LD_INT 3
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: LIST
45886: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45887: LD_VAR 0 6
45891: PPUSH
45892: CALL_OW 257
45896: PUSH
45897: LD_INT 14
45899: EQUAL
45900: IFFALSE 45921
// points := [ 10 , 0 , 0 ] ;
45902: LD_ADDR_VAR 0 9
45906: PUSH
45907: LD_INT 10
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: LIST
45920: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45921: LD_VAR 0 6
45925: PPUSH
45926: CALL_OW 257
45930: PUSH
45931: LD_INT 11
45933: EQUAL
45934: IFFALSE 45955
// points := [ 30 , 10 , 5 ] ;
45936: LD_ADDR_VAR 0 9
45940: PUSH
45941: LD_INT 30
45943: PUSH
45944: LD_INT 10
45946: PUSH
45947: LD_INT 5
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: LIST
45954: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45955: LD_VAR 0 1
45959: PPUSH
45960: LD_INT 5
45962: PPUSH
45963: CALL_OW 321
45967: PUSH
45968: LD_INT 2
45970: EQUAL
45971: IFFALSE 45988
// bpoints := bpoints * 1.8 ;
45973: LD_ADDR_VAR 0 10
45977: PUSH
45978: LD_VAR 0 10
45982: PUSH
45983: LD_REAL  1.80000000000000E+0000
45986: MUL
45987: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45988: LD_VAR 0 6
45992: PPUSH
45993: CALL_OW 257
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: LD_INT 3
46006: PUSH
46007: LD_INT 4
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: IN
46016: PUSH
46017: LD_VAR 0 1
46021: PPUSH
46022: LD_INT 51
46024: PPUSH
46025: CALL_OW 321
46029: PUSH
46030: LD_INT 2
46032: EQUAL
46033: AND
46034: IFFALSE 46051
// bpoints := bpoints * 1.2 ;
46036: LD_ADDR_VAR 0 10
46040: PUSH
46041: LD_VAR 0 10
46045: PUSH
46046: LD_REAL  1.20000000000000E+0000
46049: MUL
46050: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46051: LD_VAR 0 6
46055: PPUSH
46056: CALL_OW 257
46060: PUSH
46061: LD_INT 5
46063: PUSH
46064: LD_INT 7
46066: PUSH
46067: LD_INT 9
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: LIST
46074: IN
46075: PUSH
46076: LD_VAR 0 1
46080: PPUSH
46081: LD_INT 52
46083: PPUSH
46084: CALL_OW 321
46088: PUSH
46089: LD_INT 2
46091: EQUAL
46092: AND
46093: IFFALSE 46110
// bpoints := bpoints * 1.5 ;
46095: LD_ADDR_VAR 0 10
46099: PUSH
46100: LD_VAR 0 10
46104: PUSH
46105: LD_REAL  1.50000000000000E+0000
46108: MUL
46109: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46110: LD_VAR 0 1
46114: PPUSH
46115: LD_INT 66
46117: PPUSH
46118: CALL_OW 321
46122: PUSH
46123: LD_INT 2
46125: EQUAL
46126: IFFALSE 46143
// bpoints := bpoints * 1.1 ;
46128: LD_ADDR_VAR 0 10
46132: PUSH
46133: LD_VAR 0 10
46137: PUSH
46138: LD_REAL  1.10000000000000E+0000
46141: MUL
46142: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46143: LD_ADDR_VAR 0 10
46147: PUSH
46148: LD_VAR 0 10
46152: PUSH
46153: LD_VAR 0 6
46157: PPUSH
46158: LD_INT 1
46160: PPUSH
46161: CALL_OW 259
46165: PUSH
46166: LD_REAL  1.15000000000000E+0000
46169: MUL
46170: MUL
46171: ST_TO_ADDR
// end ; unit_vehicle :
46172: GO 47000
46174: LD_INT 2
46176: DOUBLE
46177: EQUAL
46178: IFTRUE 46182
46180: GO 46988
46182: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46183: LD_VAR 0 6
46187: PPUSH
46188: CALL_OW 264
46192: PUSH
46193: LD_INT 2
46195: PUSH
46196: LD_INT 42
46198: PUSH
46199: LD_INT 24
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: LIST
46206: IN
46207: IFFALSE 46228
// points := [ 25 , 5 , 3 ] ;
46209: LD_ADDR_VAR 0 9
46213: PUSH
46214: LD_INT 25
46216: PUSH
46217: LD_INT 5
46219: PUSH
46220: LD_INT 3
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: LIST
46227: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46228: LD_VAR 0 6
46232: PPUSH
46233: CALL_OW 264
46237: PUSH
46238: LD_INT 4
46240: PUSH
46241: LD_INT 43
46243: PUSH
46244: LD_INT 25
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: LIST
46251: IN
46252: IFFALSE 46273
// points := [ 40 , 15 , 5 ] ;
46254: LD_ADDR_VAR 0 9
46258: PUSH
46259: LD_INT 40
46261: PUSH
46262: LD_INT 15
46264: PUSH
46265: LD_INT 5
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: LIST
46272: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46273: LD_VAR 0 6
46277: PPUSH
46278: CALL_OW 264
46282: PUSH
46283: LD_INT 3
46285: PUSH
46286: LD_INT 23
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: IN
46293: IFFALSE 46314
// points := [ 7 , 25 , 8 ] ;
46295: LD_ADDR_VAR 0 9
46299: PUSH
46300: LD_INT 7
46302: PUSH
46303: LD_INT 25
46305: PUSH
46306: LD_INT 8
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: LIST
46313: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46314: LD_VAR 0 6
46318: PPUSH
46319: CALL_OW 264
46323: PUSH
46324: LD_INT 5
46326: PUSH
46327: LD_INT 27
46329: PUSH
46330: LD_INT 44
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: LIST
46337: IN
46338: IFFALSE 46359
// points := [ 14 , 50 , 16 ] ;
46340: LD_ADDR_VAR 0 9
46344: PUSH
46345: LD_INT 14
46347: PUSH
46348: LD_INT 50
46350: PUSH
46351: LD_INT 16
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: LIST
46358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46359: LD_VAR 0 6
46363: PPUSH
46364: CALL_OW 264
46368: PUSH
46369: LD_INT 6
46371: PUSH
46372: LD_INT 46
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: IN
46379: IFFALSE 46400
// points := [ 32 , 120 , 70 ] ;
46381: LD_ADDR_VAR 0 9
46385: PUSH
46386: LD_INT 32
46388: PUSH
46389: LD_INT 120
46391: PUSH
46392: LD_INT 70
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: LIST
46399: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46400: LD_VAR 0 6
46404: PPUSH
46405: CALL_OW 264
46409: PUSH
46410: LD_INT 7
46412: PUSH
46413: LD_INT 28
46415: PUSH
46416: LD_INT 45
46418: PUSH
46419: LD_INT 92
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: IN
46428: IFFALSE 46449
// points := [ 35 , 20 , 45 ] ;
46430: LD_ADDR_VAR 0 9
46434: PUSH
46435: LD_INT 35
46437: PUSH
46438: LD_INT 20
46440: PUSH
46441: LD_INT 45
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: LIST
46448: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46449: LD_VAR 0 6
46453: PPUSH
46454: CALL_OW 264
46458: PUSH
46459: LD_INT 47
46461: PUSH
46462: EMPTY
46463: LIST
46464: IN
46465: IFFALSE 46486
// points := [ 67 , 45 , 75 ] ;
46467: LD_ADDR_VAR 0 9
46471: PUSH
46472: LD_INT 67
46474: PUSH
46475: LD_INT 45
46477: PUSH
46478: LD_INT 75
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: LIST
46485: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46486: LD_VAR 0 6
46490: PPUSH
46491: CALL_OW 264
46495: PUSH
46496: LD_INT 26
46498: PUSH
46499: EMPTY
46500: LIST
46501: IN
46502: IFFALSE 46523
// points := [ 120 , 30 , 80 ] ;
46504: LD_ADDR_VAR 0 9
46508: PUSH
46509: LD_INT 120
46511: PUSH
46512: LD_INT 30
46514: PUSH
46515: LD_INT 80
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: LIST
46522: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46523: LD_VAR 0 6
46527: PPUSH
46528: CALL_OW 264
46532: PUSH
46533: LD_INT 22
46535: PUSH
46536: EMPTY
46537: LIST
46538: IN
46539: IFFALSE 46560
// points := [ 40 , 1 , 1 ] ;
46541: LD_ADDR_VAR 0 9
46545: PUSH
46546: LD_INT 40
46548: PUSH
46549: LD_INT 1
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46560: LD_VAR 0 6
46564: PPUSH
46565: CALL_OW 264
46569: PUSH
46570: LD_INT 29
46572: PUSH
46573: EMPTY
46574: LIST
46575: IN
46576: IFFALSE 46597
// points := [ 70 , 200 , 400 ] ;
46578: LD_ADDR_VAR 0 9
46582: PUSH
46583: LD_INT 70
46585: PUSH
46586: LD_INT 200
46588: PUSH
46589: LD_INT 400
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: LIST
46596: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46597: LD_VAR 0 6
46601: PPUSH
46602: CALL_OW 264
46606: PUSH
46607: LD_INT 14
46609: PUSH
46610: LD_INT 53
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: IN
46617: IFFALSE 46638
// points := [ 40 , 10 , 20 ] ;
46619: LD_ADDR_VAR 0 9
46623: PUSH
46624: LD_INT 40
46626: PUSH
46627: LD_INT 10
46629: PUSH
46630: LD_INT 20
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: LIST
46637: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46638: LD_VAR 0 6
46642: PPUSH
46643: CALL_OW 264
46647: PUSH
46648: LD_INT 9
46650: PUSH
46651: EMPTY
46652: LIST
46653: IN
46654: IFFALSE 46675
// points := [ 5 , 70 , 20 ] ;
46656: LD_ADDR_VAR 0 9
46660: PUSH
46661: LD_INT 5
46663: PUSH
46664: LD_INT 70
46666: PUSH
46667: LD_INT 20
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: LIST
46674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46675: LD_VAR 0 6
46679: PPUSH
46680: CALL_OW 264
46684: PUSH
46685: LD_INT 10
46687: PUSH
46688: EMPTY
46689: LIST
46690: IN
46691: IFFALSE 46712
// points := [ 35 , 110 , 70 ] ;
46693: LD_ADDR_VAR 0 9
46697: PUSH
46698: LD_INT 35
46700: PUSH
46701: LD_INT 110
46703: PUSH
46704: LD_INT 70
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: LIST
46711: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46712: LD_VAR 0 6
46716: PPUSH
46717: CALL_OW 265
46721: PUSH
46722: LD_INT 25
46724: EQUAL
46725: IFFALSE 46746
// points := [ 80 , 65 , 100 ] ;
46727: LD_ADDR_VAR 0 9
46731: PUSH
46732: LD_INT 80
46734: PUSH
46735: LD_INT 65
46737: PUSH
46738: LD_INT 100
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: LIST
46745: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46746: LD_VAR 0 6
46750: PPUSH
46751: CALL_OW 263
46755: PUSH
46756: LD_INT 1
46758: EQUAL
46759: IFFALSE 46794
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46761: LD_ADDR_VAR 0 10
46765: PUSH
46766: LD_VAR 0 10
46770: PUSH
46771: LD_VAR 0 6
46775: PPUSH
46776: CALL_OW 311
46780: PPUSH
46781: LD_INT 3
46783: PPUSH
46784: CALL_OW 259
46788: PUSH
46789: LD_INT 4
46791: MUL
46792: MUL
46793: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46794: LD_VAR 0 6
46798: PPUSH
46799: CALL_OW 263
46803: PUSH
46804: LD_INT 2
46806: EQUAL
46807: IFFALSE 46858
// begin j := IsControledBy ( i ) ;
46809: LD_ADDR_VAR 0 7
46813: PUSH
46814: LD_VAR 0 6
46818: PPUSH
46819: CALL_OW 312
46823: ST_TO_ADDR
// if j then
46824: LD_VAR 0 7
46828: IFFALSE 46858
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46830: LD_ADDR_VAR 0 10
46834: PUSH
46835: LD_VAR 0 10
46839: PUSH
46840: LD_VAR 0 7
46844: PPUSH
46845: LD_INT 3
46847: PPUSH
46848: CALL_OW 259
46852: PUSH
46853: LD_INT 3
46855: MUL
46856: MUL
46857: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46858: LD_VAR 0 6
46862: PPUSH
46863: CALL_OW 264
46867: PUSH
46868: LD_INT 5
46870: PUSH
46871: LD_INT 6
46873: PUSH
46874: LD_INT 46
46876: PUSH
46877: LD_INT 44
46879: PUSH
46880: LD_INT 47
46882: PUSH
46883: LD_INT 45
46885: PUSH
46886: LD_INT 28
46888: PUSH
46889: LD_INT 7
46891: PUSH
46892: LD_INT 27
46894: PUSH
46895: LD_INT 29
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: IN
46910: PUSH
46911: LD_VAR 0 1
46915: PPUSH
46916: LD_INT 52
46918: PPUSH
46919: CALL_OW 321
46923: PUSH
46924: LD_INT 2
46926: EQUAL
46927: AND
46928: IFFALSE 46945
// bpoints := bpoints * 1.2 ;
46930: LD_ADDR_VAR 0 10
46934: PUSH
46935: LD_VAR 0 10
46939: PUSH
46940: LD_REAL  1.20000000000000E+0000
46943: MUL
46944: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46945: LD_VAR 0 6
46949: PPUSH
46950: CALL_OW 264
46954: PUSH
46955: LD_INT 6
46957: PUSH
46958: LD_INT 46
46960: PUSH
46961: LD_INT 47
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: LIST
46968: IN
46969: IFFALSE 46986
// bpoints := bpoints * 1.2 ;
46971: LD_ADDR_VAR 0 10
46975: PUSH
46976: LD_VAR 0 10
46980: PUSH
46981: LD_REAL  1.20000000000000E+0000
46984: MUL
46985: ST_TO_ADDR
// end ; unit_building :
46986: GO 47000
46988: LD_INT 3
46990: DOUBLE
46991: EQUAL
46992: IFTRUE 46996
46994: GO 46999
46996: POP
// ; end ;
46997: GO 47000
46999: POP
// for j = 1 to 3 do
47000: LD_ADDR_VAR 0 7
47004: PUSH
47005: DOUBLE
47006: LD_INT 1
47008: DEC
47009: ST_TO_ADDR
47010: LD_INT 3
47012: PUSH
47013: FOR_TO
47014: IFFALSE 47067
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47016: LD_ADDR_VAR 0 5
47020: PUSH
47021: LD_VAR 0 5
47025: PPUSH
47026: LD_VAR 0 7
47030: PPUSH
47031: LD_VAR 0 5
47035: PUSH
47036: LD_VAR 0 7
47040: ARRAY
47041: PUSH
47042: LD_VAR 0 9
47046: PUSH
47047: LD_VAR 0 7
47051: ARRAY
47052: PUSH
47053: LD_VAR 0 10
47057: MUL
47058: PLUS
47059: PPUSH
47060: CALL_OW 1
47064: ST_TO_ADDR
47065: GO 47013
47067: POP
47068: POP
// end ;
47069: GO 45548
47071: POP
47072: POP
// result := Replace ( result , 4 , tmp ) ;
47073: LD_ADDR_VAR 0 5
47077: PUSH
47078: LD_VAR 0 5
47082: PPUSH
47083: LD_INT 4
47085: PPUSH
47086: LD_VAR 0 8
47090: PPUSH
47091: CALL_OW 1
47095: ST_TO_ADDR
// end ;
47096: LD_VAR 0 5
47100: RET
// export function DangerAtRange ( unit , range ) ; begin
47101: LD_INT 0
47103: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47104: LD_ADDR_VAR 0 3
47108: PUSH
47109: LD_VAR 0 1
47113: PPUSH
47114: CALL_OW 255
47118: PPUSH
47119: LD_VAR 0 1
47123: PPUSH
47124: CALL_OW 250
47128: PPUSH
47129: LD_VAR 0 1
47133: PPUSH
47134: CALL_OW 251
47138: PPUSH
47139: LD_VAR 0 2
47143: PPUSH
47144: CALL 45400 0 4
47148: ST_TO_ADDR
// end ;
47149: LD_VAR 0 3
47153: RET
// export function DangerInArea ( side , area ) ; begin
47154: LD_INT 0
47156: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47157: LD_ADDR_VAR 0 3
47161: PUSH
47162: LD_VAR 0 2
47166: PPUSH
47167: LD_INT 81
47169: PUSH
47170: LD_VAR 0 1
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PPUSH
47179: CALL_OW 70
47183: ST_TO_ADDR
// end ;
47184: LD_VAR 0 3
47188: RET
// export function IsExtension ( b ) ; begin
47189: LD_INT 0
47191: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47192: LD_ADDR_VAR 0 2
47196: PUSH
47197: LD_VAR 0 1
47201: PUSH
47202: LD_INT 23
47204: PUSH
47205: LD_INT 20
47207: PUSH
47208: LD_INT 22
47210: PUSH
47211: LD_INT 17
47213: PUSH
47214: LD_INT 24
47216: PUSH
47217: LD_INT 21
47219: PUSH
47220: LD_INT 19
47222: PUSH
47223: LD_INT 16
47225: PUSH
47226: LD_INT 25
47228: PUSH
47229: LD_INT 18
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: IN
47244: ST_TO_ADDR
// end ;
47245: LD_VAR 0 2
47249: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47250: LD_INT 0
47252: PPUSH
47253: PPUSH
47254: PPUSH
// result := [ ] ;
47255: LD_ADDR_VAR 0 4
47259: PUSH
47260: EMPTY
47261: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47262: LD_ADDR_VAR 0 5
47266: PUSH
47267: LD_VAR 0 2
47271: PPUSH
47272: LD_INT 21
47274: PUSH
47275: LD_INT 3
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PPUSH
47282: CALL_OW 70
47286: ST_TO_ADDR
// if not tmp then
47287: LD_VAR 0 5
47291: NOT
47292: IFFALSE 47296
// exit ;
47294: GO 47360
// if checkLink then
47296: LD_VAR 0 3
47300: IFFALSE 47350
// begin for i in tmp do
47302: LD_ADDR_VAR 0 6
47306: PUSH
47307: LD_VAR 0 5
47311: PUSH
47312: FOR_IN
47313: IFFALSE 47348
// if GetBase ( i ) <> base then
47315: LD_VAR 0 6
47319: PPUSH
47320: CALL_OW 274
47324: PUSH
47325: LD_VAR 0 1
47329: NONEQUAL
47330: IFFALSE 47346
// ComLinkToBase ( base , i ) ;
47332: LD_VAR 0 1
47336: PPUSH
47337: LD_VAR 0 6
47341: PPUSH
47342: CALL_OW 169
47346: GO 47312
47348: POP
47349: POP
// end ; result := tmp ;
47350: LD_ADDR_VAR 0 4
47354: PUSH
47355: LD_VAR 0 5
47359: ST_TO_ADDR
// end ;
47360: LD_VAR 0 4
47364: RET
// export function ComComplete ( units , b ) ; var i ; begin
47365: LD_INT 0
47367: PPUSH
47368: PPUSH
// if not units then
47369: LD_VAR 0 1
47373: NOT
47374: IFFALSE 47378
// exit ;
47376: GO 47468
// for i in units do
47378: LD_ADDR_VAR 0 4
47382: PUSH
47383: LD_VAR 0 1
47387: PUSH
47388: FOR_IN
47389: IFFALSE 47466
// if BuildingStatus ( b ) = bs_build then
47391: LD_VAR 0 2
47395: PPUSH
47396: CALL_OW 461
47400: PUSH
47401: LD_INT 1
47403: EQUAL
47404: IFFALSE 47464
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47406: LD_VAR 0 4
47410: PPUSH
47411: LD_STRING h
47413: PUSH
47414: LD_VAR 0 2
47418: PPUSH
47419: CALL_OW 250
47423: PUSH
47424: LD_VAR 0 2
47428: PPUSH
47429: CALL_OW 251
47433: PUSH
47434: LD_VAR 0 2
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: PUSH
47457: EMPTY
47458: LIST
47459: PPUSH
47460: CALL_OW 446
47464: GO 47388
47466: POP
47467: POP
// end ;
47468: LD_VAR 0 3
47472: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47473: LD_INT 0
47475: PPUSH
47476: PPUSH
47477: PPUSH
47478: PPUSH
47479: PPUSH
47480: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47481: LD_VAR 0 1
47485: NOT
47486: PUSH
47487: LD_VAR 0 1
47491: PPUSH
47492: CALL_OW 263
47496: PUSH
47497: LD_INT 2
47499: NONEQUAL
47500: OR
47501: IFFALSE 47505
// exit ;
47503: GO 47821
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47505: LD_ADDR_VAR 0 6
47509: PUSH
47510: LD_INT 22
47512: PUSH
47513: LD_VAR 0 1
47517: PPUSH
47518: CALL_OW 255
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 2
47529: PUSH
47530: LD_INT 30
47532: PUSH
47533: LD_INT 36
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 34
47542: PUSH
47543: LD_INT 31
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: LIST
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PPUSH
47559: CALL_OW 69
47563: ST_TO_ADDR
// if not tmp then
47564: LD_VAR 0 6
47568: NOT
47569: IFFALSE 47573
// exit ;
47571: GO 47821
// result := [ ] ;
47573: LD_ADDR_VAR 0 2
47577: PUSH
47578: EMPTY
47579: ST_TO_ADDR
// for i in tmp do
47580: LD_ADDR_VAR 0 3
47584: PUSH
47585: LD_VAR 0 6
47589: PUSH
47590: FOR_IN
47591: IFFALSE 47662
// begin t := UnitsInside ( i ) ;
47593: LD_ADDR_VAR 0 4
47597: PUSH
47598: LD_VAR 0 3
47602: PPUSH
47603: CALL_OW 313
47607: ST_TO_ADDR
// if t then
47608: LD_VAR 0 4
47612: IFFALSE 47660
// for j in t do
47614: LD_ADDR_VAR 0 7
47618: PUSH
47619: LD_VAR 0 4
47623: PUSH
47624: FOR_IN
47625: IFFALSE 47658
// result := Replace ( result , result + 1 , j ) ;
47627: LD_ADDR_VAR 0 2
47631: PUSH
47632: LD_VAR 0 2
47636: PPUSH
47637: LD_VAR 0 2
47641: PUSH
47642: LD_INT 1
47644: PLUS
47645: PPUSH
47646: LD_VAR 0 7
47650: PPUSH
47651: CALL_OW 1
47655: ST_TO_ADDR
47656: GO 47624
47658: POP
47659: POP
// end ;
47660: GO 47590
47662: POP
47663: POP
// if not result then
47664: LD_VAR 0 2
47668: NOT
47669: IFFALSE 47673
// exit ;
47671: GO 47821
// mech := result [ 1 ] ;
47673: LD_ADDR_VAR 0 5
47677: PUSH
47678: LD_VAR 0 2
47682: PUSH
47683: LD_INT 1
47685: ARRAY
47686: ST_TO_ADDR
// if result > 1 then
47687: LD_VAR 0 2
47691: PUSH
47692: LD_INT 1
47694: GREATER
47695: IFFALSE 47807
// begin for i = 2 to result do
47697: LD_ADDR_VAR 0 3
47701: PUSH
47702: DOUBLE
47703: LD_INT 2
47705: DEC
47706: ST_TO_ADDR
47707: LD_VAR 0 2
47711: PUSH
47712: FOR_TO
47713: IFFALSE 47805
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47715: LD_ADDR_VAR 0 4
47719: PUSH
47720: LD_VAR 0 2
47724: PUSH
47725: LD_VAR 0 3
47729: ARRAY
47730: PPUSH
47731: LD_INT 3
47733: PPUSH
47734: CALL_OW 259
47738: PUSH
47739: LD_VAR 0 2
47743: PUSH
47744: LD_VAR 0 3
47748: ARRAY
47749: PPUSH
47750: CALL_OW 432
47754: MINUS
47755: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47756: LD_VAR 0 4
47760: PUSH
47761: LD_VAR 0 5
47765: PPUSH
47766: LD_INT 3
47768: PPUSH
47769: CALL_OW 259
47773: PUSH
47774: LD_VAR 0 5
47778: PPUSH
47779: CALL_OW 432
47783: MINUS
47784: GREATEREQUAL
47785: IFFALSE 47803
// mech := result [ i ] ;
47787: LD_ADDR_VAR 0 5
47791: PUSH
47792: LD_VAR 0 2
47796: PUSH
47797: LD_VAR 0 3
47801: ARRAY
47802: ST_TO_ADDR
// end ;
47803: GO 47712
47805: POP
47806: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47807: LD_VAR 0 1
47811: PPUSH
47812: LD_VAR 0 5
47816: PPUSH
47817: CALL_OW 135
// end ;
47821: LD_VAR 0 2
47825: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47826: LD_INT 0
47828: PPUSH
47829: PPUSH
47830: PPUSH
47831: PPUSH
47832: PPUSH
47833: PPUSH
47834: PPUSH
47835: PPUSH
47836: PPUSH
47837: PPUSH
47838: PPUSH
47839: PPUSH
47840: PPUSH
// result := [ ] ;
47841: LD_ADDR_VAR 0 7
47845: PUSH
47846: EMPTY
47847: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47848: LD_VAR 0 1
47852: PPUSH
47853: CALL_OW 266
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: IN
47868: NOT
47869: IFFALSE 47873
// exit ;
47871: GO 49507
// if name then
47873: LD_VAR 0 3
47877: IFFALSE 47893
// SetBName ( base_dep , name ) ;
47879: LD_VAR 0 1
47883: PPUSH
47884: LD_VAR 0 3
47888: PPUSH
47889: CALL_OW 500
// base := GetBase ( base_dep ) ;
47893: LD_ADDR_VAR 0 15
47897: PUSH
47898: LD_VAR 0 1
47902: PPUSH
47903: CALL_OW 274
47907: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47908: LD_ADDR_VAR 0 16
47912: PUSH
47913: LD_VAR 0 1
47917: PPUSH
47918: CALL_OW 255
47922: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47923: LD_ADDR_VAR 0 17
47927: PUSH
47928: LD_VAR 0 1
47932: PPUSH
47933: CALL_OW 248
47937: ST_TO_ADDR
// if sources then
47938: LD_VAR 0 5
47942: IFFALSE 47989
// for i = 1 to 3 do
47944: LD_ADDR_VAR 0 8
47948: PUSH
47949: DOUBLE
47950: LD_INT 1
47952: DEC
47953: ST_TO_ADDR
47954: LD_INT 3
47956: PUSH
47957: FOR_TO
47958: IFFALSE 47987
// AddResourceType ( base , i , sources [ i ] ) ;
47960: LD_VAR 0 15
47964: PPUSH
47965: LD_VAR 0 8
47969: PPUSH
47970: LD_VAR 0 5
47974: PUSH
47975: LD_VAR 0 8
47979: ARRAY
47980: PPUSH
47981: CALL_OW 276
47985: GO 47957
47987: POP
47988: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47989: LD_ADDR_VAR 0 18
47993: PUSH
47994: LD_VAR 0 15
47998: PPUSH
47999: LD_VAR 0 2
48003: PPUSH
48004: LD_INT 1
48006: PPUSH
48007: CALL 47250 0 3
48011: ST_TO_ADDR
// InitHc ;
48012: CALL_OW 19
// InitUc ;
48016: CALL_OW 18
// uc_side := side ;
48020: LD_ADDR_OWVAR 20
48024: PUSH
48025: LD_VAR 0 16
48029: ST_TO_ADDR
// uc_nation := nation ;
48030: LD_ADDR_OWVAR 21
48034: PUSH
48035: LD_VAR 0 17
48039: ST_TO_ADDR
// if buildings then
48040: LD_VAR 0 18
48044: IFFALSE 49366
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48046: LD_ADDR_VAR 0 19
48050: PUSH
48051: LD_VAR 0 18
48055: PPUSH
48056: LD_INT 2
48058: PUSH
48059: LD_INT 30
48061: PUSH
48062: LD_INT 29
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 30
48071: PUSH
48072: LD_INT 30
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: LIST
48083: PPUSH
48084: CALL_OW 72
48088: ST_TO_ADDR
// if tmp then
48089: LD_VAR 0 19
48093: IFFALSE 48141
// for i in tmp do
48095: LD_ADDR_VAR 0 8
48099: PUSH
48100: LD_VAR 0 19
48104: PUSH
48105: FOR_IN
48106: IFFALSE 48139
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48108: LD_VAR 0 8
48112: PPUSH
48113: CALL_OW 250
48117: PPUSH
48118: LD_VAR 0 8
48122: PPUSH
48123: CALL_OW 251
48127: PPUSH
48128: LD_VAR 0 16
48132: PPUSH
48133: CALL_OW 441
48137: GO 48105
48139: POP
48140: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48141: LD_VAR 0 18
48145: PPUSH
48146: LD_INT 2
48148: PUSH
48149: LD_INT 30
48151: PUSH
48152: LD_INT 32
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 30
48161: PUSH
48162: LD_INT 33
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: LIST
48173: PPUSH
48174: CALL_OW 72
48178: IFFALSE 48266
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48180: LD_ADDR_VAR 0 8
48184: PUSH
48185: LD_VAR 0 18
48189: PPUSH
48190: LD_INT 2
48192: PUSH
48193: LD_INT 30
48195: PUSH
48196: LD_INT 32
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 30
48205: PUSH
48206: LD_INT 33
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: LIST
48217: PPUSH
48218: CALL_OW 72
48222: PUSH
48223: FOR_IN
48224: IFFALSE 48264
// begin if not GetBWeapon ( i ) then
48226: LD_VAR 0 8
48230: PPUSH
48231: CALL_OW 269
48235: NOT
48236: IFFALSE 48262
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48238: LD_VAR 0 8
48242: PPUSH
48243: LD_VAR 0 8
48247: PPUSH
48248: LD_VAR 0 2
48252: PPUSH
48253: CALL 49512 0 2
48257: PPUSH
48258: CALL_OW 431
// end ;
48262: GO 48223
48264: POP
48265: POP
// end ; for i = 1 to personel do
48266: LD_ADDR_VAR 0 8
48270: PUSH
48271: DOUBLE
48272: LD_INT 1
48274: DEC
48275: ST_TO_ADDR
48276: LD_VAR 0 6
48280: PUSH
48281: FOR_TO
48282: IFFALSE 49346
// begin if i > 4 then
48284: LD_VAR 0 8
48288: PUSH
48289: LD_INT 4
48291: GREATER
48292: IFFALSE 48296
// break ;
48294: GO 49346
// case i of 1 :
48296: LD_VAR 0 8
48300: PUSH
48301: LD_INT 1
48303: DOUBLE
48304: EQUAL
48305: IFTRUE 48309
48307: GO 48389
48309: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48310: LD_ADDR_VAR 0 12
48314: PUSH
48315: LD_VAR 0 18
48319: PPUSH
48320: LD_INT 22
48322: PUSH
48323: LD_VAR 0 16
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 58
48334: PUSH
48335: EMPTY
48336: LIST
48337: PUSH
48338: LD_INT 2
48340: PUSH
48341: LD_INT 30
48343: PUSH
48344: LD_INT 32
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 30
48353: PUSH
48354: LD_INT 4
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 30
48363: PUSH
48364: LD_INT 5
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: LIST
48381: PPUSH
48382: CALL_OW 72
48386: ST_TO_ADDR
48387: GO 48611
48389: LD_INT 2
48391: DOUBLE
48392: EQUAL
48393: IFTRUE 48397
48395: GO 48459
48397: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48398: LD_ADDR_VAR 0 12
48402: PUSH
48403: LD_VAR 0 18
48407: PPUSH
48408: LD_INT 22
48410: PUSH
48411: LD_VAR 0 16
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 2
48422: PUSH
48423: LD_INT 30
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 30
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: LIST
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PPUSH
48452: CALL_OW 72
48456: ST_TO_ADDR
48457: GO 48611
48459: LD_INT 3
48461: DOUBLE
48462: EQUAL
48463: IFTRUE 48467
48465: GO 48529
48467: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48468: LD_ADDR_VAR 0 12
48472: PUSH
48473: LD_VAR 0 18
48477: PPUSH
48478: LD_INT 22
48480: PUSH
48481: LD_VAR 0 16
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 2
48492: PUSH
48493: LD_INT 30
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 30
48505: PUSH
48506: LD_INT 3
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: LIST
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PPUSH
48522: CALL_OW 72
48526: ST_TO_ADDR
48527: GO 48611
48529: LD_INT 4
48531: DOUBLE
48532: EQUAL
48533: IFTRUE 48537
48535: GO 48610
48537: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48538: LD_ADDR_VAR 0 12
48542: PUSH
48543: LD_VAR 0 18
48547: PPUSH
48548: LD_INT 22
48550: PUSH
48551: LD_VAR 0 16
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 2
48562: PUSH
48563: LD_INT 30
48565: PUSH
48566: LD_INT 6
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 30
48575: PUSH
48576: LD_INT 7
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 30
48585: PUSH
48586: LD_INT 8
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PPUSH
48603: CALL_OW 72
48607: ST_TO_ADDR
48608: GO 48611
48610: POP
// if i = 1 then
48611: LD_VAR 0 8
48615: PUSH
48616: LD_INT 1
48618: EQUAL
48619: IFFALSE 48730
// begin tmp := [ ] ;
48621: LD_ADDR_VAR 0 19
48625: PUSH
48626: EMPTY
48627: ST_TO_ADDR
// for j in f do
48628: LD_ADDR_VAR 0 9
48632: PUSH
48633: LD_VAR 0 12
48637: PUSH
48638: FOR_IN
48639: IFFALSE 48712
// if GetBType ( j ) = b_bunker then
48641: LD_VAR 0 9
48645: PPUSH
48646: CALL_OW 266
48650: PUSH
48651: LD_INT 32
48653: EQUAL
48654: IFFALSE 48681
// tmp := Insert ( tmp , 1 , j ) else
48656: LD_ADDR_VAR 0 19
48660: PUSH
48661: LD_VAR 0 19
48665: PPUSH
48666: LD_INT 1
48668: PPUSH
48669: LD_VAR 0 9
48673: PPUSH
48674: CALL_OW 2
48678: ST_TO_ADDR
48679: GO 48710
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48681: LD_ADDR_VAR 0 19
48685: PUSH
48686: LD_VAR 0 19
48690: PPUSH
48691: LD_VAR 0 19
48695: PUSH
48696: LD_INT 1
48698: PLUS
48699: PPUSH
48700: LD_VAR 0 9
48704: PPUSH
48705: CALL_OW 2
48709: ST_TO_ADDR
48710: GO 48638
48712: POP
48713: POP
// if tmp then
48714: LD_VAR 0 19
48718: IFFALSE 48730
// f := tmp ;
48720: LD_ADDR_VAR 0 12
48724: PUSH
48725: LD_VAR 0 19
48729: ST_TO_ADDR
// end ; x := personel [ i ] ;
48730: LD_ADDR_VAR 0 13
48734: PUSH
48735: LD_VAR 0 6
48739: PUSH
48740: LD_VAR 0 8
48744: ARRAY
48745: ST_TO_ADDR
// if x = - 1 then
48746: LD_VAR 0 13
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: EQUAL
48755: IFFALSE 48964
// begin for j in f do
48757: LD_ADDR_VAR 0 9
48761: PUSH
48762: LD_VAR 0 12
48766: PUSH
48767: FOR_IN
48768: IFFALSE 48960
// repeat InitHc ;
48770: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48774: LD_VAR 0 9
48778: PPUSH
48779: CALL_OW 266
48783: PUSH
48784: LD_INT 5
48786: EQUAL
48787: IFFALSE 48857
// begin if UnitsInside ( j ) < 3 then
48789: LD_VAR 0 9
48793: PPUSH
48794: CALL_OW 313
48798: PUSH
48799: LD_INT 3
48801: LESS
48802: IFFALSE 48838
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48804: LD_INT 0
48806: PPUSH
48807: LD_INT 5
48809: PUSH
48810: LD_INT 8
48812: PUSH
48813: LD_INT 9
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: LIST
48820: PUSH
48821: LD_VAR 0 17
48825: ARRAY
48826: PPUSH
48827: LD_VAR 0 4
48831: PPUSH
48832: CALL_OW 380
48836: GO 48855
// PrepareHuman ( false , i , skill ) ;
48838: LD_INT 0
48840: PPUSH
48841: LD_VAR 0 8
48845: PPUSH
48846: LD_VAR 0 4
48850: PPUSH
48851: CALL_OW 380
// end else
48855: GO 48874
// PrepareHuman ( false , i , skill ) ;
48857: LD_INT 0
48859: PPUSH
48860: LD_VAR 0 8
48864: PPUSH
48865: LD_VAR 0 4
48869: PPUSH
48870: CALL_OW 380
// un := CreateHuman ;
48874: LD_ADDR_VAR 0 14
48878: PUSH
48879: CALL_OW 44
48883: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48884: LD_ADDR_VAR 0 7
48888: PUSH
48889: LD_VAR 0 7
48893: PPUSH
48894: LD_INT 1
48896: PPUSH
48897: LD_VAR 0 14
48901: PPUSH
48902: CALL_OW 2
48906: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48907: LD_VAR 0 14
48911: PPUSH
48912: LD_VAR 0 9
48916: PPUSH
48917: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48921: LD_VAR 0 9
48925: PPUSH
48926: CALL_OW 313
48930: PUSH
48931: LD_INT 6
48933: EQUAL
48934: PUSH
48935: LD_VAR 0 9
48939: PPUSH
48940: CALL_OW 266
48944: PUSH
48945: LD_INT 32
48947: PUSH
48948: LD_INT 31
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: IN
48955: OR
48956: IFFALSE 48770
48958: GO 48767
48960: POP
48961: POP
// end else
48962: GO 49344
// for j = 1 to x do
48964: LD_ADDR_VAR 0 9
48968: PUSH
48969: DOUBLE
48970: LD_INT 1
48972: DEC
48973: ST_TO_ADDR
48974: LD_VAR 0 13
48978: PUSH
48979: FOR_TO
48980: IFFALSE 49342
// begin InitHc ;
48982: CALL_OW 19
// if not f then
48986: LD_VAR 0 12
48990: NOT
48991: IFFALSE 49080
// begin PrepareHuman ( false , i , skill ) ;
48993: LD_INT 0
48995: PPUSH
48996: LD_VAR 0 8
49000: PPUSH
49001: LD_VAR 0 4
49005: PPUSH
49006: CALL_OW 380
// un := CreateHuman ;
49010: LD_ADDR_VAR 0 14
49014: PUSH
49015: CALL_OW 44
49019: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49020: LD_ADDR_VAR 0 7
49024: PUSH
49025: LD_VAR 0 7
49029: PPUSH
49030: LD_INT 1
49032: PPUSH
49033: LD_VAR 0 14
49037: PPUSH
49038: CALL_OW 2
49042: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49043: LD_VAR 0 14
49047: PPUSH
49048: LD_VAR 0 1
49052: PPUSH
49053: CALL_OW 250
49057: PPUSH
49058: LD_VAR 0 1
49062: PPUSH
49063: CALL_OW 251
49067: PPUSH
49068: LD_INT 10
49070: PPUSH
49071: LD_INT 0
49073: PPUSH
49074: CALL_OW 50
// continue ;
49078: GO 48979
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49080: LD_VAR 0 12
49084: PUSH
49085: LD_INT 1
49087: ARRAY
49088: PPUSH
49089: CALL_OW 313
49093: PUSH
49094: LD_VAR 0 12
49098: PUSH
49099: LD_INT 1
49101: ARRAY
49102: PPUSH
49103: CALL_OW 266
49107: PUSH
49108: LD_INT 32
49110: PUSH
49111: LD_INT 31
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: IN
49118: AND
49119: PUSH
49120: LD_VAR 0 12
49124: PUSH
49125: LD_INT 1
49127: ARRAY
49128: PPUSH
49129: CALL_OW 313
49133: PUSH
49134: LD_INT 6
49136: EQUAL
49137: OR
49138: IFFALSE 49158
// f := Delete ( f , 1 ) ;
49140: LD_ADDR_VAR 0 12
49144: PUSH
49145: LD_VAR 0 12
49149: PPUSH
49150: LD_INT 1
49152: PPUSH
49153: CALL_OW 3
49157: ST_TO_ADDR
// if not f then
49158: LD_VAR 0 12
49162: NOT
49163: IFFALSE 49181
// begin x := x + 2 ;
49165: LD_ADDR_VAR 0 13
49169: PUSH
49170: LD_VAR 0 13
49174: PUSH
49175: LD_INT 2
49177: PLUS
49178: ST_TO_ADDR
// continue ;
49179: GO 48979
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49181: LD_VAR 0 12
49185: PUSH
49186: LD_INT 1
49188: ARRAY
49189: PPUSH
49190: CALL_OW 266
49194: PUSH
49195: LD_INT 5
49197: EQUAL
49198: IFFALSE 49272
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49200: LD_VAR 0 12
49204: PUSH
49205: LD_INT 1
49207: ARRAY
49208: PPUSH
49209: CALL_OW 313
49213: PUSH
49214: LD_INT 3
49216: LESS
49217: IFFALSE 49253
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49219: LD_INT 0
49221: PPUSH
49222: LD_INT 5
49224: PUSH
49225: LD_INT 8
49227: PUSH
49228: LD_INT 9
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: LIST
49235: PUSH
49236: LD_VAR 0 17
49240: ARRAY
49241: PPUSH
49242: LD_VAR 0 4
49246: PPUSH
49247: CALL_OW 380
49251: GO 49270
// PrepareHuman ( false , i , skill ) ;
49253: LD_INT 0
49255: PPUSH
49256: LD_VAR 0 8
49260: PPUSH
49261: LD_VAR 0 4
49265: PPUSH
49266: CALL_OW 380
// end else
49270: GO 49289
// PrepareHuman ( false , i , skill ) ;
49272: LD_INT 0
49274: PPUSH
49275: LD_VAR 0 8
49279: PPUSH
49280: LD_VAR 0 4
49284: PPUSH
49285: CALL_OW 380
// un := CreateHuman ;
49289: LD_ADDR_VAR 0 14
49293: PUSH
49294: CALL_OW 44
49298: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49299: LD_ADDR_VAR 0 7
49303: PUSH
49304: LD_VAR 0 7
49308: PPUSH
49309: LD_INT 1
49311: PPUSH
49312: LD_VAR 0 14
49316: PPUSH
49317: CALL_OW 2
49321: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49322: LD_VAR 0 14
49326: PPUSH
49327: LD_VAR 0 12
49331: PUSH
49332: LD_INT 1
49334: ARRAY
49335: PPUSH
49336: CALL_OW 52
// end ;
49340: GO 48979
49342: POP
49343: POP
// end ;
49344: GO 48281
49346: POP
49347: POP
// result := result ^ buildings ;
49348: LD_ADDR_VAR 0 7
49352: PUSH
49353: LD_VAR 0 7
49357: PUSH
49358: LD_VAR 0 18
49362: ADD
49363: ST_TO_ADDR
// end else
49364: GO 49507
// begin for i = 1 to personel do
49366: LD_ADDR_VAR 0 8
49370: PUSH
49371: DOUBLE
49372: LD_INT 1
49374: DEC
49375: ST_TO_ADDR
49376: LD_VAR 0 6
49380: PUSH
49381: FOR_TO
49382: IFFALSE 49505
// begin if i > 4 then
49384: LD_VAR 0 8
49388: PUSH
49389: LD_INT 4
49391: GREATER
49392: IFFALSE 49396
// break ;
49394: GO 49505
// x := personel [ i ] ;
49396: LD_ADDR_VAR 0 13
49400: PUSH
49401: LD_VAR 0 6
49405: PUSH
49406: LD_VAR 0 8
49410: ARRAY
49411: ST_TO_ADDR
// if x = - 1 then
49412: LD_VAR 0 13
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: EQUAL
49421: IFFALSE 49425
// continue ;
49423: GO 49381
// PrepareHuman ( false , i , skill ) ;
49425: LD_INT 0
49427: PPUSH
49428: LD_VAR 0 8
49432: PPUSH
49433: LD_VAR 0 4
49437: PPUSH
49438: CALL_OW 380
// un := CreateHuman ;
49442: LD_ADDR_VAR 0 14
49446: PUSH
49447: CALL_OW 44
49451: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49452: LD_VAR 0 14
49456: PPUSH
49457: LD_VAR 0 1
49461: PPUSH
49462: CALL_OW 250
49466: PPUSH
49467: LD_VAR 0 1
49471: PPUSH
49472: CALL_OW 251
49476: PPUSH
49477: LD_INT 10
49479: PPUSH
49480: LD_INT 0
49482: PPUSH
49483: CALL_OW 50
// result := result ^ un ;
49487: LD_ADDR_VAR 0 7
49491: PUSH
49492: LD_VAR 0 7
49496: PUSH
49497: LD_VAR 0 14
49501: ADD
49502: ST_TO_ADDR
// end ;
49503: GO 49381
49505: POP
49506: POP
// end ; end ;
49507: LD_VAR 0 7
49511: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49512: LD_INT 0
49514: PPUSH
49515: PPUSH
49516: PPUSH
49517: PPUSH
49518: PPUSH
49519: PPUSH
49520: PPUSH
49521: PPUSH
49522: PPUSH
49523: PPUSH
49524: PPUSH
49525: PPUSH
49526: PPUSH
49527: PPUSH
49528: PPUSH
49529: PPUSH
// result := false ;
49530: LD_ADDR_VAR 0 3
49534: PUSH
49535: LD_INT 0
49537: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49538: LD_VAR 0 1
49542: NOT
49543: PUSH
49544: LD_VAR 0 1
49548: PPUSH
49549: CALL_OW 266
49553: PUSH
49554: LD_INT 32
49556: PUSH
49557: LD_INT 33
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: IN
49564: NOT
49565: OR
49566: IFFALSE 49570
// exit ;
49568: GO 50679
// nat := GetNation ( tower ) ;
49570: LD_ADDR_VAR 0 12
49574: PUSH
49575: LD_VAR 0 1
49579: PPUSH
49580: CALL_OW 248
49584: ST_TO_ADDR
// side := GetSide ( tower ) ;
49585: LD_ADDR_VAR 0 16
49589: PUSH
49590: LD_VAR 0 1
49594: PPUSH
49595: CALL_OW 255
49599: ST_TO_ADDR
// x := GetX ( tower ) ;
49600: LD_ADDR_VAR 0 10
49604: PUSH
49605: LD_VAR 0 1
49609: PPUSH
49610: CALL_OW 250
49614: ST_TO_ADDR
// y := GetY ( tower ) ;
49615: LD_ADDR_VAR 0 11
49619: PUSH
49620: LD_VAR 0 1
49624: PPUSH
49625: CALL_OW 251
49629: ST_TO_ADDR
// if not x or not y then
49630: LD_VAR 0 10
49634: NOT
49635: PUSH
49636: LD_VAR 0 11
49640: NOT
49641: OR
49642: IFFALSE 49646
// exit ;
49644: GO 50679
// weapon := 0 ;
49646: LD_ADDR_VAR 0 18
49650: PUSH
49651: LD_INT 0
49653: ST_TO_ADDR
// fac_list := [ ] ;
49654: LD_ADDR_VAR 0 17
49658: PUSH
49659: EMPTY
49660: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49661: LD_ADDR_VAR 0 6
49665: PUSH
49666: LD_VAR 0 1
49670: PPUSH
49671: CALL_OW 274
49675: PPUSH
49676: LD_VAR 0 2
49680: PPUSH
49681: LD_INT 0
49683: PPUSH
49684: CALL 47250 0 3
49688: PPUSH
49689: LD_INT 30
49691: PUSH
49692: LD_INT 3
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PPUSH
49699: CALL_OW 72
49703: ST_TO_ADDR
// if not factories then
49704: LD_VAR 0 6
49708: NOT
49709: IFFALSE 49713
// exit ;
49711: GO 50679
// for i in factories do
49713: LD_ADDR_VAR 0 8
49717: PUSH
49718: LD_VAR 0 6
49722: PUSH
49723: FOR_IN
49724: IFFALSE 49749
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49726: LD_ADDR_VAR 0 17
49730: PUSH
49731: LD_VAR 0 17
49735: PUSH
49736: LD_VAR 0 8
49740: PPUSH
49741: CALL_OW 478
49745: UNION
49746: ST_TO_ADDR
49747: GO 49723
49749: POP
49750: POP
// if not fac_list then
49751: LD_VAR 0 17
49755: NOT
49756: IFFALSE 49760
// exit ;
49758: GO 50679
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49760: LD_ADDR_VAR 0 5
49764: PUSH
49765: LD_INT 4
49767: PUSH
49768: LD_INT 5
49770: PUSH
49771: LD_INT 9
49773: PUSH
49774: LD_INT 10
49776: PUSH
49777: LD_INT 6
49779: PUSH
49780: LD_INT 7
49782: PUSH
49783: LD_INT 11
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 27
49797: PUSH
49798: LD_INT 28
49800: PUSH
49801: LD_INT 26
49803: PUSH
49804: LD_INT 30
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 43
49815: PUSH
49816: LD_INT 44
49818: PUSH
49819: LD_INT 46
49821: PUSH
49822: LD_INT 45
49824: PUSH
49825: LD_INT 47
49827: PUSH
49828: LD_INT 49
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: LIST
49843: PUSH
49844: LD_VAR 0 12
49848: ARRAY
49849: ST_TO_ADDR
// list := list isect fac_list ;
49850: LD_ADDR_VAR 0 5
49854: PUSH
49855: LD_VAR 0 5
49859: PUSH
49860: LD_VAR 0 17
49864: ISECT
49865: ST_TO_ADDR
// if not list then
49866: LD_VAR 0 5
49870: NOT
49871: IFFALSE 49875
// exit ;
49873: GO 50679
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49875: LD_VAR 0 12
49879: PUSH
49880: LD_INT 3
49882: EQUAL
49883: PUSH
49884: LD_INT 49
49886: PUSH
49887: LD_VAR 0 5
49891: IN
49892: AND
49893: PUSH
49894: LD_INT 31
49896: PPUSH
49897: LD_VAR 0 16
49901: PPUSH
49902: CALL_OW 321
49906: PUSH
49907: LD_INT 2
49909: EQUAL
49910: AND
49911: IFFALSE 49971
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49913: LD_INT 22
49915: PUSH
49916: LD_VAR 0 16
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 35
49927: PUSH
49928: LD_INT 49
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 91
49937: PUSH
49938: LD_VAR 0 1
49942: PUSH
49943: LD_INT 10
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: LIST
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: LIST
49955: PPUSH
49956: CALL_OW 69
49960: NOT
49961: IFFALSE 49971
// weapon := ru_time_lapser ;
49963: LD_ADDR_VAR 0 18
49967: PUSH
49968: LD_INT 49
49970: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49971: LD_VAR 0 12
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: IN
49986: PUSH
49987: LD_INT 11
49989: PUSH
49990: LD_VAR 0 5
49994: IN
49995: PUSH
49996: LD_INT 30
49998: PUSH
49999: LD_VAR 0 5
50003: IN
50004: OR
50005: AND
50006: PUSH
50007: LD_INT 6
50009: PPUSH
50010: LD_VAR 0 16
50014: PPUSH
50015: CALL_OW 321
50019: PUSH
50020: LD_INT 2
50022: EQUAL
50023: AND
50024: IFFALSE 50189
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50026: LD_INT 22
50028: PUSH
50029: LD_VAR 0 16
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 2
50040: PUSH
50041: LD_INT 35
50043: PUSH
50044: LD_INT 11
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 35
50053: PUSH
50054: LD_INT 30
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 91
50068: PUSH
50069: LD_VAR 0 1
50073: PUSH
50074: LD_INT 18
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: LIST
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: LIST
50086: PPUSH
50087: CALL_OW 69
50091: NOT
50092: PUSH
50093: LD_INT 22
50095: PUSH
50096: LD_VAR 0 16
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 2
50107: PUSH
50108: LD_INT 30
50110: PUSH
50111: LD_INT 32
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 30
50120: PUSH
50121: LD_INT 33
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 91
50135: PUSH
50136: LD_VAR 0 1
50140: PUSH
50141: LD_INT 12
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: LIST
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: LIST
50153: PUSH
50154: EMPTY
50155: LIST
50156: PPUSH
50157: CALL_OW 69
50161: PUSH
50162: LD_INT 2
50164: GREATER
50165: AND
50166: IFFALSE 50189
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50168: LD_ADDR_VAR 0 18
50172: PUSH
50173: LD_INT 11
50175: PUSH
50176: LD_INT 30
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_VAR 0 12
50187: ARRAY
50188: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50189: LD_VAR 0 18
50193: NOT
50194: PUSH
50195: LD_INT 40
50197: PPUSH
50198: LD_VAR 0 16
50202: PPUSH
50203: CALL_OW 321
50207: PUSH
50208: LD_INT 2
50210: EQUAL
50211: AND
50212: PUSH
50213: LD_INT 7
50215: PUSH
50216: LD_VAR 0 5
50220: IN
50221: PUSH
50222: LD_INT 28
50224: PUSH
50225: LD_VAR 0 5
50229: IN
50230: OR
50231: PUSH
50232: LD_INT 45
50234: PUSH
50235: LD_VAR 0 5
50239: IN
50240: OR
50241: AND
50242: IFFALSE 50496
// begin hex := GetHexInfo ( x , y ) ;
50244: LD_ADDR_VAR 0 4
50248: PUSH
50249: LD_VAR 0 10
50253: PPUSH
50254: LD_VAR 0 11
50258: PPUSH
50259: CALL_OW 546
50263: ST_TO_ADDR
// if hex [ 1 ] then
50264: LD_VAR 0 4
50268: PUSH
50269: LD_INT 1
50271: ARRAY
50272: IFFALSE 50276
// exit ;
50274: GO 50679
// height := hex [ 2 ] ;
50276: LD_ADDR_VAR 0 15
50280: PUSH
50281: LD_VAR 0 4
50285: PUSH
50286: LD_INT 2
50288: ARRAY
50289: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50290: LD_ADDR_VAR 0 14
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 2
50300: PUSH
50301: LD_INT 3
50303: PUSH
50304: LD_INT 5
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: ST_TO_ADDR
// for i in tmp do
50313: LD_ADDR_VAR 0 8
50317: PUSH
50318: LD_VAR 0 14
50322: PUSH
50323: FOR_IN
50324: IFFALSE 50494
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50326: LD_ADDR_VAR 0 9
50330: PUSH
50331: LD_VAR 0 10
50335: PPUSH
50336: LD_VAR 0 8
50340: PPUSH
50341: LD_INT 5
50343: PPUSH
50344: CALL_OW 272
50348: PUSH
50349: LD_VAR 0 11
50353: PPUSH
50354: LD_VAR 0 8
50358: PPUSH
50359: LD_INT 5
50361: PPUSH
50362: CALL_OW 273
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50371: LD_VAR 0 9
50375: PUSH
50376: LD_INT 1
50378: ARRAY
50379: PPUSH
50380: LD_VAR 0 9
50384: PUSH
50385: LD_INT 2
50387: ARRAY
50388: PPUSH
50389: CALL_OW 488
50393: IFFALSE 50492
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50395: LD_ADDR_VAR 0 4
50399: PUSH
50400: LD_VAR 0 9
50404: PUSH
50405: LD_INT 1
50407: ARRAY
50408: PPUSH
50409: LD_VAR 0 9
50413: PUSH
50414: LD_INT 2
50416: ARRAY
50417: PPUSH
50418: CALL_OW 546
50422: ST_TO_ADDR
// if hex [ 1 ] then
50423: LD_VAR 0 4
50427: PUSH
50428: LD_INT 1
50430: ARRAY
50431: IFFALSE 50435
// continue ;
50433: GO 50323
// h := hex [ 2 ] ;
50435: LD_ADDR_VAR 0 13
50439: PUSH
50440: LD_VAR 0 4
50444: PUSH
50445: LD_INT 2
50447: ARRAY
50448: ST_TO_ADDR
// if h + 7 < height then
50449: LD_VAR 0 13
50453: PUSH
50454: LD_INT 7
50456: PLUS
50457: PUSH
50458: LD_VAR 0 15
50462: LESS
50463: IFFALSE 50492
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50465: LD_ADDR_VAR 0 18
50469: PUSH
50470: LD_INT 7
50472: PUSH
50473: LD_INT 28
50475: PUSH
50476: LD_INT 45
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: LIST
50483: PUSH
50484: LD_VAR 0 12
50488: ARRAY
50489: ST_TO_ADDR
// break ;
50490: GO 50494
// end ; end ; end ;
50492: GO 50323
50494: POP
50495: POP
// end ; if not weapon then
50496: LD_VAR 0 18
50500: NOT
50501: IFFALSE 50561
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50503: LD_ADDR_VAR 0 5
50507: PUSH
50508: LD_VAR 0 5
50512: PUSH
50513: LD_INT 11
50515: PUSH
50516: LD_INT 30
50518: PUSH
50519: LD_INT 49
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: LIST
50526: DIFF
50527: ST_TO_ADDR
// if not list then
50528: LD_VAR 0 5
50532: NOT
50533: IFFALSE 50537
// exit ;
50535: GO 50679
// weapon := list [ rand ( 1 , list ) ] ;
50537: LD_ADDR_VAR 0 18
50541: PUSH
50542: LD_VAR 0 5
50546: PUSH
50547: LD_INT 1
50549: PPUSH
50550: LD_VAR 0 5
50554: PPUSH
50555: CALL_OW 12
50559: ARRAY
50560: ST_TO_ADDR
// end ; if weapon then
50561: LD_VAR 0 18
50565: IFFALSE 50679
// begin tmp := CostOfWeapon ( weapon ) ;
50567: LD_ADDR_VAR 0 14
50571: PUSH
50572: LD_VAR 0 18
50576: PPUSH
50577: CALL_OW 451
50581: ST_TO_ADDR
// j := GetBase ( tower ) ;
50582: LD_ADDR_VAR 0 9
50586: PUSH
50587: LD_VAR 0 1
50591: PPUSH
50592: CALL_OW 274
50596: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50597: LD_VAR 0 9
50601: PPUSH
50602: LD_INT 1
50604: PPUSH
50605: CALL_OW 275
50609: PUSH
50610: LD_VAR 0 14
50614: PUSH
50615: LD_INT 1
50617: ARRAY
50618: GREATEREQUAL
50619: PUSH
50620: LD_VAR 0 9
50624: PPUSH
50625: LD_INT 2
50627: PPUSH
50628: CALL_OW 275
50632: PUSH
50633: LD_VAR 0 14
50637: PUSH
50638: LD_INT 2
50640: ARRAY
50641: GREATEREQUAL
50642: AND
50643: PUSH
50644: LD_VAR 0 9
50648: PPUSH
50649: LD_INT 3
50651: PPUSH
50652: CALL_OW 275
50656: PUSH
50657: LD_VAR 0 14
50661: PUSH
50662: LD_INT 3
50664: ARRAY
50665: GREATEREQUAL
50666: AND
50667: IFFALSE 50679
// result := weapon ;
50669: LD_ADDR_VAR 0 3
50673: PUSH
50674: LD_VAR 0 18
50678: ST_TO_ADDR
// end ; end ;
50679: LD_VAR 0 3
50683: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50684: LD_INT 0
50686: PPUSH
50687: PPUSH
// result := true ;
50688: LD_ADDR_VAR 0 3
50692: PUSH
50693: LD_INT 1
50695: ST_TO_ADDR
// if array1 = array2 then
50696: LD_VAR 0 1
50700: PUSH
50701: LD_VAR 0 2
50705: EQUAL
50706: IFFALSE 50766
// begin for i = 1 to array1 do
50708: LD_ADDR_VAR 0 4
50712: PUSH
50713: DOUBLE
50714: LD_INT 1
50716: DEC
50717: ST_TO_ADDR
50718: LD_VAR 0 1
50722: PUSH
50723: FOR_TO
50724: IFFALSE 50762
// if array1 [ i ] <> array2 [ i ] then
50726: LD_VAR 0 1
50730: PUSH
50731: LD_VAR 0 4
50735: ARRAY
50736: PUSH
50737: LD_VAR 0 2
50741: PUSH
50742: LD_VAR 0 4
50746: ARRAY
50747: NONEQUAL
50748: IFFALSE 50760
// begin result := false ;
50750: LD_ADDR_VAR 0 3
50754: PUSH
50755: LD_INT 0
50757: ST_TO_ADDR
// break ;
50758: GO 50762
// end ;
50760: GO 50723
50762: POP
50763: POP
// end else
50764: GO 50774
// result := false ;
50766: LD_ADDR_VAR 0 3
50770: PUSH
50771: LD_INT 0
50773: ST_TO_ADDR
// end ;
50774: LD_VAR 0 3
50778: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50779: LD_INT 0
50781: PPUSH
50782: PPUSH
// if not array1 or not array2 then
50783: LD_VAR 0 1
50787: NOT
50788: PUSH
50789: LD_VAR 0 2
50793: NOT
50794: OR
50795: IFFALSE 50799
// exit ;
50797: GO 50863
// result := true ;
50799: LD_ADDR_VAR 0 3
50803: PUSH
50804: LD_INT 1
50806: ST_TO_ADDR
// for i = 1 to array1 do
50807: LD_ADDR_VAR 0 4
50811: PUSH
50812: DOUBLE
50813: LD_INT 1
50815: DEC
50816: ST_TO_ADDR
50817: LD_VAR 0 1
50821: PUSH
50822: FOR_TO
50823: IFFALSE 50861
// if array1 [ i ] <> array2 [ i ] then
50825: LD_VAR 0 1
50829: PUSH
50830: LD_VAR 0 4
50834: ARRAY
50835: PUSH
50836: LD_VAR 0 2
50840: PUSH
50841: LD_VAR 0 4
50845: ARRAY
50846: NONEQUAL
50847: IFFALSE 50859
// begin result := false ;
50849: LD_ADDR_VAR 0 3
50853: PUSH
50854: LD_INT 0
50856: ST_TO_ADDR
// break ;
50857: GO 50861
// end ;
50859: GO 50822
50861: POP
50862: POP
// end ;
50863: LD_VAR 0 3
50867: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50868: LD_INT 0
50870: PPUSH
50871: PPUSH
50872: PPUSH
// pom := GetBase ( fac ) ;
50873: LD_ADDR_VAR 0 5
50877: PUSH
50878: LD_VAR 0 1
50882: PPUSH
50883: CALL_OW 274
50887: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50888: LD_ADDR_VAR 0 4
50892: PUSH
50893: LD_VAR 0 2
50897: PUSH
50898: LD_INT 1
50900: ARRAY
50901: PPUSH
50902: LD_VAR 0 2
50906: PUSH
50907: LD_INT 2
50909: ARRAY
50910: PPUSH
50911: LD_VAR 0 2
50915: PUSH
50916: LD_INT 3
50918: ARRAY
50919: PPUSH
50920: LD_VAR 0 2
50924: PUSH
50925: LD_INT 4
50927: ARRAY
50928: PPUSH
50929: CALL_OW 449
50933: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50934: LD_ADDR_VAR 0 3
50938: PUSH
50939: LD_VAR 0 5
50943: PPUSH
50944: LD_INT 1
50946: PPUSH
50947: CALL_OW 275
50951: PUSH
50952: LD_VAR 0 4
50956: PUSH
50957: LD_INT 1
50959: ARRAY
50960: GREATEREQUAL
50961: PUSH
50962: LD_VAR 0 5
50966: PPUSH
50967: LD_INT 2
50969: PPUSH
50970: CALL_OW 275
50974: PUSH
50975: LD_VAR 0 4
50979: PUSH
50980: LD_INT 2
50982: ARRAY
50983: GREATEREQUAL
50984: AND
50985: PUSH
50986: LD_VAR 0 5
50990: PPUSH
50991: LD_INT 3
50993: PPUSH
50994: CALL_OW 275
50998: PUSH
50999: LD_VAR 0 4
51003: PUSH
51004: LD_INT 3
51006: ARRAY
51007: GREATEREQUAL
51008: AND
51009: ST_TO_ADDR
// end ;
51010: LD_VAR 0 3
51014: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51015: LD_INT 0
51017: PPUSH
51018: PPUSH
51019: PPUSH
51020: PPUSH
// pom := GetBase ( building ) ;
51021: LD_ADDR_VAR 0 3
51025: PUSH
51026: LD_VAR 0 1
51030: PPUSH
51031: CALL_OW 274
51035: ST_TO_ADDR
// if not pom then
51036: LD_VAR 0 3
51040: NOT
51041: IFFALSE 51045
// exit ;
51043: GO 51215
// btype := GetBType ( building ) ;
51045: LD_ADDR_VAR 0 5
51049: PUSH
51050: LD_VAR 0 1
51054: PPUSH
51055: CALL_OW 266
51059: ST_TO_ADDR
// if btype = b_armoury then
51060: LD_VAR 0 5
51064: PUSH
51065: LD_INT 4
51067: EQUAL
51068: IFFALSE 51078
// btype := b_barracks ;
51070: LD_ADDR_VAR 0 5
51074: PUSH
51075: LD_INT 5
51077: ST_TO_ADDR
// if btype = b_depot then
51078: LD_VAR 0 5
51082: PUSH
51083: LD_INT 0
51085: EQUAL
51086: IFFALSE 51096
// btype := b_warehouse ;
51088: LD_ADDR_VAR 0 5
51092: PUSH
51093: LD_INT 1
51095: ST_TO_ADDR
// if btype = b_workshop then
51096: LD_VAR 0 5
51100: PUSH
51101: LD_INT 2
51103: EQUAL
51104: IFFALSE 51114
// btype := b_factory ;
51106: LD_ADDR_VAR 0 5
51110: PUSH
51111: LD_INT 3
51113: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51114: LD_ADDR_VAR 0 4
51118: PUSH
51119: LD_VAR 0 5
51123: PPUSH
51124: LD_VAR 0 1
51128: PPUSH
51129: CALL_OW 248
51133: PPUSH
51134: CALL_OW 450
51138: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51139: LD_ADDR_VAR 0 2
51143: PUSH
51144: LD_VAR 0 3
51148: PPUSH
51149: LD_INT 1
51151: PPUSH
51152: CALL_OW 275
51156: PUSH
51157: LD_VAR 0 4
51161: PUSH
51162: LD_INT 1
51164: ARRAY
51165: GREATEREQUAL
51166: PUSH
51167: LD_VAR 0 3
51171: PPUSH
51172: LD_INT 2
51174: PPUSH
51175: CALL_OW 275
51179: PUSH
51180: LD_VAR 0 4
51184: PUSH
51185: LD_INT 2
51187: ARRAY
51188: GREATEREQUAL
51189: AND
51190: PUSH
51191: LD_VAR 0 3
51195: PPUSH
51196: LD_INT 3
51198: PPUSH
51199: CALL_OW 275
51203: PUSH
51204: LD_VAR 0 4
51208: PUSH
51209: LD_INT 3
51211: ARRAY
51212: GREATEREQUAL
51213: AND
51214: ST_TO_ADDR
// end ;
51215: LD_VAR 0 2
51219: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51220: LD_INT 0
51222: PPUSH
51223: PPUSH
51224: PPUSH
// pom := GetBase ( building ) ;
51225: LD_ADDR_VAR 0 4
51229: PUSH
51230: LD_VAR 0 1
51234: PPUSH
51235: CALL_OW 274
51239: ST_TO_ADDR
// if not pom then
51240: LD_VAR 0 4
51244: NOT
51245: IFFALSE 51249
// exit ;
51247: GO 51350
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51249: LD_ADDR_VAR 0 5
51253: PUSH
51254: LD_VAR 0 2
51258: PPUSH
51259: LD_VAR 0 1
51263: PPUSH
51264: CALL_OW 248
51268: PPUSH
51269: CALL_OW 450
51273: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51274: LD_ADDR_VAR 0 3
51278: PUSH
51279: LD_VAR 0 4
51283: PPUSH
51284: LD_INT 1
51286: PPUSH
51287: CALL_OW 275
51291: PUSH
51292: LD_VAR 0 5
51296: PUSH
51297: LD_INT 1
51299: ARRAY
51300: GREATEREQUAL
51301: PUSH
51302: LD_VAR 0 4
51306: PPUSH
51307: LD_INT 2
51309: PPUSH
51310: CALL_OW 275
51314: PUSH
51315: LD_VAR 0 5
51319: PUSH
51320: LD_INT 2
51322: ARRAY
51323: GREATEREQUAL
51324: AND
51325: PUSH
51326: LD_VAR 0 4
51330: PPUSH
51331: LD_INT 3
51333: PPUSH
51334: CALL_OW 275
51338: PUSH
51339: LD_VAR 0 5
51343: PUSH
51344: LD_INT 3
51346: ARRAY
51347: GREATEREQUAL
51348: AND
51349: ST_TO_ADDR
// end ;
51350: LD_VAR 0 3
51354: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51355: LD_INT 0
51357: PPUSH
51358: PPUSH
51359: PPUSH
51360: PPUSH
51361: PPUSH
51362: PPUSH
51363: PPUSH
51364: PPUSH
51365: PPUSH
51366: PPUSH
51367: PPUSH
// result := false ;
51368: LD_ADDR_VAR 0 8
51372: PUSH
51373: LD_INT 0
51375: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51376: LD_VAR 0 5
51380: NOT
51381: PUSH
51382: LD_VAR 0 1
51386: NOT
51387: OR
51388: PUSH
51389: LD_VAR 0 2
51393: NOT
51394: OR
51395: PUSH
51396: LD_VAR 0 3
51400: NOT
51401: OR
51402: IFFALSE 51406
// exit ;
51404: GO 52220
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51406: LD_ADDR_VAR 0 14
51410: PUSH
51411: LD_VAR 0 1
51415: PPUSH
51416: LD_VAR 0 2
51420: PPUSH
51421: LD_VAR 0 3
51425: PPUSH
51426: LD_VAR 0 4
51430: PPUSH
51431: LD_VAR 0 5
51435: PUSH
51436: LD_INT 1
51438: ARRAY
51439: PPUSH
51440: CALL_OW 248
51444: PPUSH
51445: LD_INT 0
51447: PPUSH
51448: CALL 53453 0 6
51452: ST_TO_ADDR
// if not hexes then
51453: LD_VAR 0 14
51457: NOT
51458: IFFALSE 51462
// exit ;
51460: GO 52220
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51462: LD_ADDR_VAR 0 17
51466: PUSH
51467: LD_VAR 0 5
51471: PPUSH
51472: LD_INT 22
51474: PUSH
51475: LD_VAR 0 13
51479: PPUSH
51480: CALL_OW 255
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 2
51491: PUSH
51492: LD_INT 30
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 30
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: LIST
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PPUSH
51521: CALL_OW 72
51525: ST_TO_ADDR
// for i = 1 to hexes do
51526: LD_ADDR_VAR 0 9
51530: PUSH
51531: DOUBLE
51532: LD_INT 1
51534: DEC
51535: ST_TO_ADDR
51536: LD_VAR 0 14
51540: PUSH
51541: FOR_TO
51542: IFFALSE 52218
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51544: LD_ADDR_VAR 0 13
51548: PUSH
51549: LD_VAR 0 14
51553: PUSH
51554: LD_VAR 0 9
51558: ARRAY
51559: PUSH
51560: LD_INT 1
51562: ARRAY
51563: PPUSH
51564: LD_VAR 0 14
51568: PUSH
51569: LD_VAR 0 9
51573: ARRAY
51574: PUSH
51575: LD_INT 2
51577: ARRAY
51578: PPUSH
51579: CALL_OW 428
51583: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51584: LD_VAR 0 14
51588: PUSH
51589: LD_VAR 0 9
51593: ARRAY
51594: PUSH
51595: LD_INT 1
51597: ARRAY
51598: PPUSH
51599: LD_VAR 0 14
51603: PUSH
51604: LD_VAR 0 9
51608: ARRAY
51609: PUSH
51610: LD_INT 2
51612: ARRAY
51613: PPUSH
51614: CALL_OW 351
51618: PUSH
51619: LD_VAR 0 14
51623: PUSH
51624: LD_VAR 0 9
51628: ARRAY
51629: PUSH
51630: LD_INT 1
51632: ARRAY
51633: PPUSH
51634: LD_VAR 0 14
51638: PUSH
51639: LD_VAR 0 9
51643: ARRAY
51644: PUSH
51645: LD_INT 2
51647: ARRAY
51648: PPUSH
51649: CALL_OW 488
51653: NOT
51654: OR
51655: PUSH
51656: LD_VAR 0 13
51660: PPUSH
51661: CALL_OW 247
51665: PUSH
51666: LD_INT 3
51668: EQUAL
51669: OR
51670: IFFALSE 51676
// exit ;
51672: POP
51673: POP
51674: GO 52220
// if not tmp then
51676: LD_VAR 0 13
51680: NOT
51681: IFFALSE 51685
// continue ;
51683: GO 51541
// result := true ;
51685: LD_ADDR_VAR 0 8
51689: PUSH
51690: LD_INT 1
51692: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51693: LD_VAR 0 6
51697: PUSH
51698: LD_VAR 0 13
51702: PPUSH
51703: CALL_OW 247
51707: PUSH
51708: LD_INT 2
51710: EQUAL
51711: AND
51712: PUSH
51713: LD_VAR 0 13
51717: PPUSH
51718: CALL_OW 263
51722: PUSH
51723: LD_INT 1
51725: EQUAL
51726: AND
51727: IFFALSE 51891
// begin if IsDrivenBy ( tmp ) then
51729: LD_VAR 0 13
51733: PPUSH
51734: CALL_OW 311
51738: IFFALSE 51742
// continue ;
51740: GO 51541
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51742: LD_VAR 0 6
51746: PPUSH
51747: LD_INT 3
51749: PUSH
51750: LD_INT 60
51752: PUSH
51753: EMPTY
51754: LIST
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 3
51762: PUSH
51763: LD_INT 55
51765: PUSH
51766: EMPTY
51767: LIST
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PPUSH
51777: CALL_OW 72
51781: IFFALSE 51889
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51783: LD_ADDR_VAR 0 18
51787: PUSH
51788: LD_VAR 0 6
51792: PPUSH
51793: LD_INT 3
51795: PUSH
51796: LD_INT 60
51798: PUSH
51799: EMPTY
51800: LIST
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 3
51808: PUSH
51809: LD_INT 55
51811: PUSH
51812: EMPTY
51813: LIST
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PPUSH
51823: CALL_OW 72
51827: PUSH
51828: LD_INT 1
51830: ARRAY
51831: ST_TO_ADDR
// if IsInUnit ( driver ) then
51832: LD_VAR 0 18
51836: PPUSH
51837: CALL_OW 310
51841: IFFALSE 51852
// ComExit ( driver ) ;
51843: LD_VAR 0 18
51847: PPUSH
51848: CALL 77214 0 1
// AddComEnterUnit ( driver , tmp ) ;
51852: LD_VAR 0 18
51856: PPUSH
51857: LD_VAR 0 13
51861: PPUSH
51862: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51866: LD_VAR 0 18
51870: PPUSH
51871: LD_VAR 0 7
51875: PPUSH
51876: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51880: LD_VAR 0 18
51884: PPUSH
51885: CALL_OW 181
// end ; continue ;
51889: GO 51541
// end ; if not cleaners or not tmp in cleaners then
51891: LD_VAR 0 6
51895: NOT
51896: PUSH
51897: LD_VAR 0 13
51901: PUSH
51902: LD_VAR 0 6
51906: IN
51907: NOT
51908: OR
51909: IFFALSE 52216
// begin if dep then
51911: LD_VAR 0 17
51915: IFFALSE 52051
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51917: LD_ADDR_VAR 0 16
51921: PUSH
51922: LD_VAR 0 17
51926: PUSH
51927: LD_INT 1
51929: ARRAY
51930: PPUSH
51931: CALL_OW 250
51935: PPUSH
51936: LD_VAR 0 17
51940: PUSH
51941: LD_INT 1
51943: ARRAY
51944: PPUSH
51945: CALL_OW 254
51949: PPUSH
51950: LD_INT 5
51952: PPUSH
51953: CALL_OW 272
51957: PUSH
51958: LD_VAR 0 17
51962: PUSH
51963: LD_INT 1
51965: ARRAY
51966: PPUSH
51967: CALL_OW 251
51971: PPUSH
51972: LD_VAR 0 17
51976: PUSH
51977: LD_INT 1
51979: ARRAY
51980: PPUSH
51981: CALL_OW 254
51985: PPUSH
51986: LD_INT 5
51988: PPUSH
51989: CALL_OW 273
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51998: LD_VAR 0 16
52002: PUSH
52003: LD_INT 1
52005: ARRAY
52006: PPUSH
52007: LD_VAR 0 16
52011: PUSH
52012: LD_INT 2
52014: ARRAY
52015: PPUSH
52016: CALL_OW 488
52020: IFFALSE 52051
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52022: LD_VAR 0 13
52026: PPUSH
52027: LD_VAR 0 16
52031: PUSH
52032: LD_INT 1
52034: ARRAY
52035: PPUSH
52036: LD_VAR 0 16
52040: PUSH
52041: LD_INT 2
52043: ARRAY
52044: PPUSH
52045: CALL_OW 111
// continue ;
52049: GO 51541
// end ; end ; r := GetDir ( tmp ) ;
52051: LD_ADDR_VAR 0 15
52055: PUSH
52056: LD_VAR 0 13
52060: PPUSH
52061: CALL_OW 254
52065: ST_TO_ADDR
// if r = 5 then
52066: LD_VAR 0 15
52070: PUSH
52071: LD_INT 5
52073: EQUAL
52074: IFFALSE 52084
// r := 0 ;
52076: LD_ADDR_VAR 0 15
52080: PUSH
52081: LD_INT 0
52083: ST_TO_ADDR
// for j = r to 5 do
52084: LD_ADDR_VAR 0 10
52088: PUSH
52089: DOUBLE
52090: LD_VAR 0 15
52094: DEC
52095: ST_TO_ADDR
52096: LD_INT 5
52098: PUSH
52099: FOR_TO
52100: IFFALSE 52214
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52102: LD_ADDR_VAR 0 11
52106: PUSH
52107: LD_VAR 0 13
52111: PPUSH
52112: CALL_OW 250
52116: PPUSH
52117: LD_VAR 0 10
52121: PPUSH
52122: LD_INT 2
52124: PPUSH
52125: CALL_OW 272
52129: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52130: LD_ADDR_VAR 0 12
52134: PUSH
52135: LD_VAR 0 13
52139: PPUSH
52140: CALL_OW 251
52144: PPUSH
52145: LD_VAR 0 10
52149: PPUSH
52150: LD_INT 2
52152: PPUSH
52153: CALL_OW 273
52157: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52158: LD_VAR 0 11
52162: PPUSH
52163: LD_VAR 0 12
52167: PPUSH
52168: CALL_OW 488
52172: PUSH
52173: LD_VAR 0 11
52177: PPUSH
52178: LD_VAR 0 12
52182: PPUSH
52183: CALL_OW 428
52187: NOT
52188: AND
52189: IFFALSE 52212
// begin ComMoveXY ( tmp , _x , _y ) ;
52191: LD_VAR 0 13
52195: PPUSH
52196: LD_VAR 0 11
52200: PPUSH
52201: LD_VAR 0 12
52205: PPUSH
52206: CALL_OW 111
// break ;
52210: GO 52214
// end ; end ;
52212: GO 52099
52214: POP
52215: POP
// end ; end ;
52216: GO 51541
52218: POP
52219: POP
// end ;
52220: LD_VAR 0 8
52224: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52225: LD_INT 0
52227: PPUSH
// result := true ;
52228: LD_ADDR_VAR 0 3
52232: PUSH
52233: LD_INT 1
52235: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52236: LD_VAR 0 2
52240: PUSH
52241: LD_INT 24
52243: DOUBLE
52244: EQUAL
52245: IFTRUE 52255
52247: LD_INT 33
52249: DOUBLE
52250: EQUAL
52251: IFTRUE 52255
52253: GO 52280
52255: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52256: LD_ADDR_VAR 0 3
52260: PUSH
52261: LD_INT 32
52263: PPUSH
52264: LD_VAR 0 1
52268: PPUSH
52269: CALL_OW 321
52273: PUSH
52274: LD_INT 2
52276: EQUAL
52277: ST_TO_ADDR
52278: GO 52596
52280: LD_INT 20
52282: DOUBLE
52283: EQUAL
52284: IFTRUE 52288
52286: GO 52313
52288: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52289: LD_ADDR_VAR 0 3
52293: PUSH
52294: LD_INT 6
52296: PPUSH
52297: LD_VAR 0 1
52301: PPUSH
52302: CALL_OW 321
52306: PUSH
52307: LD_INT 2
52309: EQUAL
52310: ST_TO_ADDR
52311: GO 52596
52313: LD_INT 22
52315: DOUBLE
52316: EQUAL
52317: IFTRUE 52327
52319: LD_INT 36
52321: DOUBLE
52322: EQUAL
52323: IFTRUE 52327
52325: GO 52352
52327: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52328: LD_ADDR_VAR 0 3
52332: PUSH
52333: LD_INT 15
52335: PPUSH
52336: LD_VAR 0 1
52340: PPUSH
52341: CALL_OW 321
52345: PUSH
52346: LD_INT 2
52348: EQUAL
52349: ST_TO_ADDR
52350: GO 52596
52352: LD_INT 30
52354: DOUBLE
52355: EQUAL
52356: IFTRUE 52360
52358: GO 52385
52360: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52361: LD_ADDR_VAR 0 3
52365: PUSH
52366: LD_INT 20
52368: PPUSH
52369: LD_VAR 0 1
52373: PPUSH
52374: CALL_OW 321
52378: PUSH
52379: LD_INT 2
52381: EQUAL
52382: ST_TO_ADDR
52383: GO 52596
52385: LD_INT 28
52387: DOUBLE
52388: EQUAL
52389: IFTRUE 52399
52391: LD_INT 21
52393: DOUBLE
52394: EQUAL
52395: IFTRUE 52399
52397: GO 52424
52399: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52400: LD_ADDR_VAR 0 3
52404: PUSH
52405: LD_INT 21
52407: PPUSH
52408: LD_VAR 0 1
52412: PPUSH
52413: CALL_OW 321
52417: PUSH
52418: LD_INT 2
52420: EQUAL
52421: ST_TO_ADDR
52422: GO 52596
52424: LD_INT 16
52426: DOUBLE
52427: EQUAL
52428: IFTRUE 52432
52430: GO 52457
52432: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52433: LD_ADDR_VAR 0 3
52437: PUSH
52438: LD_INT 84
52440: PPUSH
52441: LD_VAR 0 1
52445: PPUSH
52446: CALL_OW 321
52450: PUSH
52451: LD_INT 2
52453: EQUAL
52454: ST_TO_ADDR
52455: GO 52596
52457: LD_INT 19
52459: DOUBLE
52460: EQUAL
52461: IFTRUE 52471
52463: LD_INT 23
52465: DOUBLE
52466: EQUAL
52467: IFTRUE 52471
52469: GO 52496
52471: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52472: LD_ADDR_VAR 0 3
52476: PUSH
52477: LD_INT 83
52479: PPUSH
52480: LD_VAR 0 1
52484: PPUSH
52485: CALL_OW 321
52489: PUSH
52490: LD_INT 2
52492: EQUAL
52493: ST_TO_ADDR
52494: GO 52596
52496: LD_INT 17
52498: DOUBLE
52499: EQUAL
52500: IFTRUE 52504
52502: GO 52529
52504: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52505: LD_ADDR_VAR 0 3
52509: PUSH
52510: LD_INT 39
52512: PPUSH
52513: LD_VAR 0 1
52517: PPUSH
52518: CALL_OW 321
52522: PUSH
52523: LD_INT 2
52525: EQUAL
52526: ST_TO_ADDR
52527: GO 52596
52529: LD_INT 18
52531: DOUBLE
52532: EQUAL
52533: IFTRUE 52537
52535: GO 52562
52537: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52538: LD_ADDR_VAR 0 3
52542: PUSH
52543: LD_INT 40
52545: PPUSH
52546: LD_VAR 0 1
52550: PPUSH
52551: CALL_OW 321
52555: PUSH
52556: LD_INT 2
52558: EQUAL
52559: ST_TO_ADDR
52560: GO 52596
52562: LD_INT 27
52564: DOUBLE
52565: EQUAL
52566: IFTRUE 52570
52568: GO 52595
52570: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52571: LD_ADDR_VAR 0 3
52575: PUSH
52576: LD_INT 35
52578: PPUSH
52579: LD_VAR 0 1
52583: PPUSH
52584: CALL_OW 321
52588: PUSH
52589: LD_INT 2
52591: EQUAL
52592: ST_TO_ADDR
52593: GO 52596
52595: POP
// end ;
52596: LD_VAR 0 3
52600: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52601: LD_INT 0
52603: PPUSH
52604: PPUSH
52605: PPUSH
52606: PPUSH
52607: PPUSH
52608: PPUSH
52609: PPUSH
52610: PPUSH
52611: PPUSH
52612: PPUSH
52613: PPUSH
// result := false ;
52614: LD_ADDR_VAR 0 6
52618: PUSH
52619: LD_INT 0
52621: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52622: LD_VAR 0 1
52626: NOT
52627: PUSH
52628: LD_VAR 0 1
52632: PPUSH
52633: CALL_OW 266
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: IN
52648: NOT
52649: OR
52650: PUSH
52651: LD_VAR 0 2
52655: NOT
52656: OR
52657: PUSH
52658: LD_VAR 0 5
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: LD_INT 3
52674: PUSH
52675: LD_INT 4
52677: PUSH
52678: LD_INT 5
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: IN
52689: NOT
52690: OR
52691: PUSH
52692: LD_VAR 0 3
52696: PPUSH
52697: LD_VAR 0 4
52701: PPUSH
52702: CALL_OW 488
52706: NOT
52707: OR
52708: IFFALSE 52712
// exit ;
52710: GO 53448
// side := GetSide ( depot ) ;
52712: LD_ADDR_VAR 0 9
52716: PUSH
52717: LD_VAR 0 1
52721: PPUSH
52722: CALL_OW 255
52726: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52727: LD_VAR 0 9
52731: PPUSH
52732: LD_VAR 0 2
52736: PPUSH
52737: CALL 52225 0 2
52741: NOT
52742: IFFALSE 52746
// exit ;
52744: GO 53448
// pom := GetBase ( depot ) ;
52746: LD_ADDR_VAR 0 10
52750: PUSH
52751: LD_VAR 0 1
52755: PPUSH
52756: CALL_OW 274
52760: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52761: LD_ADDR_VAR 0 11
52765: PUSH
52766: LD_VAR 0 2
52770: PPUSH
52771: LD_VAR 0 1
52775: PPUSH
52776: CALL_OW 248
52780: PPUSH
52781: CALL_OW 450
52785: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52786: LD_VAR 0 10
52790: PPUSH
52791: LD_INT 1
52793: PPUSH
52794: CALL_OW 275
52798: PUSH
52799: LD_VAR 0 11
52803: PUSH
52804: LD_INT 1
52806: ARRAY
52807: GREATEREQUAL
52808: PUSH
52809: LD_VAR 0 10
52813: PPUSH
52814: LD_INT 2
52816: PPUSH
52817: CALL_OW 275
52821: PUSH
52822: LD_VAR 0 11
52826: PUSH
52827: LD_INT 2
52829: ARRAY
52830: GREATEREQUAL
52831: AND
52832: PUSH
52833: LD_VAR 0 10
52837: PPUSH
52838: LD_INT 3
52840: PPUSH
52841: CALL_OW 275
52845: PUSH
52846: LD_VAR 0 11
52850: PUSH
52851: LD_INT 3
52853: ARRAY
52854: GREATEREQUAL
52855: AND
52856: NOT
52857: IFFALSE 52861
// exit ;
52859: GO 53448
// if GetBType ( depot ) = b_depot then
52861: LD_VAR 0 1
52865: PPUSH
52866: CALL_OW 266
52870: PUSH
52871: LD_INT 0
52873: EQUAL
52874: IFFALSE 52886
// dist := 28 else
52876: LD_ADDR_VAR 0 14
52880: PUSH
52881: LD_INT 28
52883: ST_TO_ADDR
52884: GO 52894
// dist := 36 ;
52886: LD_ADDR_VAR 0 14
52890: PUSH
52891: LD_INT 36
52893: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52894: LD_VAR 0 1
52898: PPUSH
52899: LD_VAR 0 3
52903: PPUSH
52904: LD_VAR 0 4
52908: PPUSH
52909: CALL_OW 297
52913: PUSH
52914: LD_VAR 0 14
52918: GREATER
52919: IFFALSE 52923
// exit ;
52921: GO 53448
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52923: LD_ADDR_VAR 0 12
52927: PUSH
52928: LD_VAR 0 2
52932: PPUSH
52933: LD_VAR 0 3
52937: PPUSH
52938: LD_VAR 0 4
52942: PPUSH
52943: LD_VAR 0 5
52947: PPUSH
52948: LD_VAR 0 1
52952: PPUSH
52953: CALL_OW 248
52957: PPUSH
52958: LD_INT 0
52960: PPUSH
52961: CALL 53453 0 6
52965: ST_TO_ADDR
// if not hexes then
52966: LD_VAR 0 12
52970: NOT
52971: IFFALSE 52975
// exit ;
52973: GO 53448
// hex := GetHexInfo ( x , y ) ;
52975: LD_ADDR_VAR 0 15
52979: PUSH
52980: LD_VAR 0 3
52984: PPUSH
52985: LD_VAR 0 4
52989: PPUSH
52990: CALL_OW 546
52994: ST_TO_ADDR
// if hex [ 1 ] then
52995: LD_VAR 0 15
52999: PUSH
53000: LD_INT 1
53002: ARRAY
53003: IFFALSE 53007
// exit ;
53005: GO 53448
// height := hex [ 2 ] ;
53007: LD_ADDR_VAR 0 13
53011: PUSH
53012: LD_VAR 0 15
53016: PUSH
53017: LD_INT 2
53019: ARRAY
53020: ST_TO_ADDR
// for i = 1 to hexes do
53021: LD_ADDR_VAR 0 7
53025: PUSH
53026: DOUBLE
53027: LD_INT 1
53029: DEC
53030: ST_TO_ADDR
53031: LD_VAR 0 12
53035: PUSH
53036: FOR_TO
53037: IFFALSE 53367
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53039: LD_VAR 0 12
53043: PUSH
53044: LD_VAR 0 7
53048: ARRAY
53049: PUSH
53050: LD_INT 1
53052: ARRAY
53053: PPUSH
53054: LD_VAR 0 12
53058: PUSH
53059: LD_VAR 0 7
53063: ARRAY
53064: PUSH
53065: LD_INT 2
53067: ARRAY
53068: PPUSH
53069: CALL_OW 488
53073: NOT
53074: PUSH
53075: LD_VAR 0 12
53079: PUSH
53080: LD_VAR 0 7
53084: ARRAY
53085: PUSH
53086: LD_INT 1
53088: ARRAY
53089: PPUSH
53090: LD_VAR 0 12
53094: PUSH
53095: LD_VAR 0 7
53099: ARRAY
53100: PUSH
53101: LD_INT 2
53103: ARRAY
53104: PPUSH
53105: CALL_OW 428
53109: PUSH
53110: LD_INT 0
53112: GREATER
53113: OR
53114: PUSH
53115: LD_VAR 0 12
53119: PUSH
53120: LD_VAR 0 7
53124: ARRAY
53125: PUSH
53126: LD_INT 1
53128: ARRAY
53129: PPUSH
53130: LD_VAR 0 12
53134: PUSH
53135: LD_VAR 0 7
53139: ARRAY
53140: PUSH
53141: LD_INT 2
53143: ARRAY
53144: PPUSH
53145: CALL_OW 351
53149: OR
53150: IFFALSE 53156
// exit ;
53152: POP
53153: POP
53154: GO 53448
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53156: LD_ADDR_VAR 0 8
53160: PUSH
53161: LD_VAR 0 12
53165: PUSH
53166: LD_VAR 0 7
53170: ARRAY
53171: PUSH
53172: LD_INT 1
53174: ARRAY
53175: PPUSH
53176: LD_VAR 0 12
53180: PUSH
53181: LD_VAR 0 7
53185: ARRAY
53186: PUSH
53187: LD_INT 2
53189: ARRAY
53190: PPUSH
53191: CALL_OW 546
53195: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53196: LD_VAR 0 8
53200: PUSH
53201: LD_INT 1
53203: ARRAY
53204: PUSH
53205: LD_VAR 0 8
53209: PUSH
53210: LD_INT 2
53212: ARRAY
53213: PUSH
53214: LD_VAR 0 13
53218: PUSH
53219: LD_INT 2
53221: PLUS
53222: GREATER
53223: OR
53224: PUSH
53225: LD_VAR 0 8
53229: PUSH
53230: LD_INT 2
53232: ARRAY
53233: PUSH
53234: LD_VAR 0 13
53238: PUSH
53239: LD_INT 2
53241: MINUS
53242: LESS
53243: OR
53244: PUSH
53245: LD_VAR 0 8
53249: PUSH
53250: LD_INT 3
53252: ARRAY
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: LD_INT 8
53259: PUSH
53260: LD_INT 9
53262: PUSH
53263: LD_INT 10
53265: PUSH
53266: LD_INT 11
53268: PUSH
53269: LD_INT 12
53271: PUSH
53272: LD_INT 13
53274: PUSH
53275: LD_INT 16
53277: PUSH
53278: LD_INT 17
53280: PUSH
53281: LD_INT 18
53283: PUSH
53284: LD_INT 19
53286: PUSH
53287: LD_INT 20
53289: PUSH
53290: LD_INT 21
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: IN
53308: NOT
53309: OR
53310: PUSH
53311: LD_VAR 0 8
53315: PUSH
53316: LD_INT 5
53318: ARRAY
53319: NOT
53320: OR
53321: PUSH
53322: LD_VAR 0 8
53326: PUSH
53327: LD_INT 6
53329: ARRAY
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: LD_INT 2
53336: PUSH
53337: LD_INT 7
53339: PUSH
53340: LD_INT 9
53342: PUSH
53343: LD_INT 10
53345: PUSH
53346: LD_INT 11
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: IN
53357: NOT
53358: OR
53359: IFFALSE 53365
// exit ;
53361: POP
53362: POP
53363: GO 53448
// end ;
53365: GO 53036
53367: POP
53368: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53369: LD_VAR 0 9
53373: PPUSH
53374: LD_VAR 0 3
53378: PPUSH
53379: LD_VAR 0 4
53383: PPUSH
53384: LD_INT 20
53386: PPUSH
53387: CALL 45400 0 4
53391: PUSH
53392: LD_INT 4
53394: ARRAY
53395: IFFALSE 53399
// exit ;
53397: GO 53448
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53399: LD_VAR 0 2
53403: PUSH
53404: LD_INT 29
53406: PUSH
53407: LD_INT 30
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: IN
53414: PUSH
53415: LD_VAR 0 3
53419: PPUSH
53420: LD_VAR 0 4
53424: PPUSH
53425: LD_VAR 0 9
53429: PPUSH
53430: CALL_OW 440
53434: NOT
53435: AND
53436: IFFALSE 53440
// exit ;
53438: GO 53448
// result := true ;
53440: LD_ADDR_VAR 0 6
53444: PUSH
53445: LD_INT 1
53447: ST_TO_ADDR
// end ;
53448: LD_VAR 0 6
53452: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53453: LD_INT 0
53455: PPUSH
53456: PPUSH
53457: PPUSH
53458: PPUSH
53459: PPUSH
53460: PPUSH
53461: PPUSH
53462: PPUSH
53463: PPUSH
53464: PPUSH
53465: PPUSH
53466: PPUSH
53467: PPUSH
53468: PPUSH
53469: PPUSH
53470: PPUSH
53471: PPUSH
53472: PPUSH
53473: PPUSH
53474: PPUSH
53475: PPUSH
53476: PPUSH
53477: PPUSH
53478: PPUSH
53479: PPUSH
53480: PPUSH
53481: PPUSH
53482: PPUSH
53483: PPUSH
53484: PPUSH
53485: PPUSH
53486: PPUSH
53487: PPUSH
53488: PPUSH
53489: PPUSH
53490: PPUSH
53491: PPUSH
53492: PPUSH
53493: PPUSH
53494: PPUSH
53495: PPUSH
53496: PPUSH
53497: PPUSH
53498: PPUSH
53499: PPUSH
53500: PPUSH
53501: PPUSH
53502: PPUSH
53503: PPUSH
53504: PPUSH
53505: PPUSH
53506: PPUSH
53507: PPUSH
53508: PPUSH
53509: PPUSH
53510: PPUSH
53511: PPUSH
53512: PPUSH
// result = [ ] ;
53513: LD_ADDR_VAR 0 7
53517: PUSH
53518: EMPTY
53519: ST_TO_ADDR
// temp_list = [ ] ;
53520: LD_ADDR_VAR 0 9
53524: PUSH
53525: EMPTY
53526: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53527: LD_VAR 0 4
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: LD_INT 3
53543: PUSH
53544: LD_INT 4
53546: PUSH
53547: LD_INT 5
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: IN
53558: NOT
53559: PUSH
53560: LD_VAR 0 1
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: IN
53575: PUSH
53576: LD_VAR 0 5
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: LD_INT 2
53586: PUSH
53587: LD_INT 3
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: LIST
53594: IN
53595: NOT
53596: AND
53597: OR
53598: IFFALSE 53602
// exit ;
53600: GO 71993
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53602: LD_VAR 0 1
53606: PUSH
53607: LD_INT 6
53609: PUSH
53610: LD_INT 7
53612: PUSH
53613: LD_INT 8
53615: PUSH
53616: LD_INT 13
53618: PUSH
53619: LD_INT 12
53621: PUSH
53622: LD_INT 15
53624: PUSH
53625: LD_INT 11
53627: PUSH
53628: LD_INT 14
53630: PUSH
53631: LD_INT 10
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: IN
53645: IFFALSE 53655
// btype = b_lab ;
53647: LD_ADDR_VAR 0 1
53651: PUSH
53652: LD_INT 6
53654: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53655: LD_VAR 0 6
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: LD_INT 2
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: LIST
53673: IN
53674: NOT
53675: PUSH
53676: LD_VAR 0 1
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: LD_INT 2
53689: PUSH
53690: LD_INT 3
53692: PUSH
53693: LD_INT 6
53695: PUSH
53696: LD_INT 36
53698: PUSH
53699: LD_INT 4
53701: PUSH
53702: LD_INT 5
53704: PUSH
53705: LD_INT 31
53707: PUSH
53708: LD_INT 32
53710: PUSH
53711: LD_INT 33
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: IN
53727: NOT
53728: PUSH
53729: LD_VAR 0 6
53733: PUSH
53734: LD_INT 1
53736: EQUAL
53737: AND
53738: OR
53739: PUSH
53740: LD_VAR 0 1
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: LD_INT 3
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: IN
53755: NOT
53756: PUSH
53757: LD_VAR 0 6
53761: PUSH
53762: LD_INT 2
53764: EQUAL
53765: AND
53766: OR
53767: IFFALSE 53777
// mode = 0 ;
53769: LD_ADDR_VAR 0 6
53773: PUSH
53774: LD_INT 0
53776: ST_TO_ADDR
// case mode of 0 :
53777: LD_VAR 0 6
53781: PUSH
53782: LD_INT 0
53784: DOUBLE
53785: EQUAL
53786: IFTRUE 53790
53788: GO 65243
53790: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53791: LD_ADDR_VAR 0 11
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: LD_INT 2
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: LD_INT 2
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: LD_INT 3
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: LD_INT 3
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: LD_INT 2
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53984: LD_ADDR_VAR 0 12
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: LD_INT 1
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 1
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 2
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 2
54107: NEG
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 2
54118: NEG
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 2
54130: NEG
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 3
54141: NEG
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 3
54152: NEG
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54180: LD_ADDR_VAR 0 13
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: LD_INT 2
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 2
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: LD_INT 2
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 2
54315: NEG
54316: PUSH
54317: LD_INT 2
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: NEG
54328: PUSH
54329: LD_INT 3
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 3
54339: NEG
54340: PUSH
54341: LD_INT 2
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 3
54351: NEG
54352: PUSH
54353: LD_INT 3
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54379: LD_ADDR_VAR 0 14
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: LD_INT 2
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: LD_INT 3
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: LD_INT 3
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: LD_INT 2
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54575: LD_ADDR_VAR 0 15
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: LD_INT 1
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: LD_INT 0
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 2
54709: NEG
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 2
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 3
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 3
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54768: LD_ADDR_VAR 0 16
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: LD_INT 2
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: LD_INT 2
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 2
54903: NEG
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 3
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 3
54925: PUSH
54926: LD_INT 3
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 2
54935: PUSH
54936: LD_INT 3
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54961: LD_ADDR_VAR 0 17
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: LD_INT 1
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: LD_INT 1
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: NEG
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 1
55030: NEG
55031: PUSH
55032: LD_INT 1
55034: NEG
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: LD_INT 2
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 2
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: LD_INT 2
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: LD_INT 2
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: LD_INT 2
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 2
55148: NEG
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 2
55160: NEG
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55191: LD_ADDR_VAR 0 18
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: LD_INT 2
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: LD_INT 2
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 2
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 2
55326: PUSH
55327: LD_INT 2
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: LD_INT 2
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: LD_INT 2
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: NEG
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 2
55378: NEG
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 2
55390: NEG
55391: PUSH
55392: LD_INT 2
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55421: LD_ADDR_VAR 0 19
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: LD_INT 2
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: LD_INT 2
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 2
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 2
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 2
55556: PUSH
55557: LD_INT 2
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: LD_INT 2
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: LD_INT 2
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 1
55586: NEG
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 2
55608: NEG
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 2
55620: NEG
55621: PUSH
55622: LD_INT 2
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55651: LD_ADDR_VAR 0 20
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: NEG
55721: PUSH
55722: LD_INT 1
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: LD_INT 2
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: LD_INT 2
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: LD_INT 1
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 2
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 2
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 2
55786: PUSH
55787: LD_INT 2
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: LD_INT 2
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: LD_INT 2
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 2
55838: NEG
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 2
55850: NEG
55851: PUSH
55852: LD_INT 2
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55881: LD_ADDR_VAR 0 21
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: LD_INT 1
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: LD_INT 2
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 2
56016: PUSH
56017: LD_INT 2
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: LD_INT 2
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: LD_INT 2
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 2
56068: NEG
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 2
56080: NEG
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56111: LD_ADDR_VAR 0 22
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: NEG
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: LD_INT 2
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 2
56298: NEG
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 2
56310: NEG
56311: PUSH
56312: LD_INT 2
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56341: LD_ADDR_VAR 0 23
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: NEG
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: LD_INT 2
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 2
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 2
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 2
56476: PUSH
56477: LD_INT 2
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: LD_INT 2
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 2
56517: NEG
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 2
56528: NEG
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 2
56540: NEG
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 2
56552: NEG
56553: PUSH
56554: LD_INT 3
56556: NEG
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: LD_INT 3
56568: NEG
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: LD_INT 2
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 2
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56621: LD_ADDR_VAR 0 24
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: LD_INT 2
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 2
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 2
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 2
56756: PUSH
56757: LD_INT 2
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: LD_INT 2
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: LD_INT 2
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 2
56797: NEG
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 2
56808: NEG
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 2
56820: NEG
56821: PUSH
56822: LD_INT 2
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: LD_INT 2
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 2
56843: PUSH
56844: LD_INT 1
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 3
56854: PUSH
56855: LD_INT 1
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 3
56864: PUSH
56865: LD_INT 2
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56897: LD_ADDR_VAR 0 25
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: LD_INT 2
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: LD_INT 2
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 2
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 2
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 2
57032: PUSH
57033: LD_INT 2
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 2
57073: NEG
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: NEG
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 2
57096: NEG
57097: PUSH
57098: LD_INT 2
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 3
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 3
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 2
57128: PUSH
57129: LD_INT 3
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: LD_INT 3
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57171: LD_ADDR_VAR 0 26
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: LD_INT 1
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: LD_INT 2
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: LD_INT 2
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 2
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 2
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: LD_INT 2
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 2
57347: NEG
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 2
57358: NEG
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 2
57370: NEG
57371: PUSH
57372: LD_INT 2
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 2
57382: PUSH
57383: LD_INT 3
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: LD_INT 3
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: LD_INT 2
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 2
57413: NEG
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57447: LD_ADDR_VAR 0 27
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: NEG
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: LD_INT 2
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 2
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 2
57646: NEG
57647: PUSH
57648: LD_INT 2
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: NEG
57659: PUSH
57660: LD_INT 2
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 2
57669: NEG
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 3
57680: NEG
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 3
57692: NEG
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57727: LD_ADDR_VAR 0 28
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 1
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: LD_INT 2
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: LD_INT 2
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 2
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 2
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 2
57862: PUSH
57863: LD_INT 2
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 1
57872: PUSH
57873: LD_INT 2
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 0
57882: PUSH
57883: LD_INT 2
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: LD_INT 1
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 2
57903: NEG
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 2
57914: NEG
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 2
57926: NEG
57927: PUSH
57928: LD_INT 2
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 2
57938: NEG
57939: PUSH
57940: LD_INT 3
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: NEG
57951: PUSH
57952: LD_INT 3
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 3
57962: NEG
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 3
57974: NEG
57975: PUSH
57976: LD_INT 2
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58009: LD_ADDR_VAR 0 29
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 1
58078: NEG
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: LD_INT 2
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: LD_INT 1
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 2
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 2
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: LD_INT 2
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 2
58187: NEG
58188: PUSH
58189: LD_INT 2
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 2
58199: NEG
58200: PUSH
58201: LD_INT 3
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 2
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 3
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: LD_INT 3
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 1
58242: NEG
58243: PUSH
58244: LD_INT 2
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 3
58253: NEG
58254: PUSH
58255: LD_INT 2
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58288: LD_ADDR_VAR 0 30
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 0
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: LD_INT 1
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 1
58357: NEG
58358: PUSH
58359: LD_INT 1
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: LD_INT 2
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: LD_INT 2
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 2
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 2
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 2
58423: PUSH
58424: LD_INT 2
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: LD_INT 2
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 1
58443: NEG
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 2
58454: NEG
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 2
58465: NEG
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 1
58477: NEG
58478: PUSH
58479: LD_INT 3
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 1
58489: PUSH
58490: LD_INT 2
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 3
58500: PUSH
58501: LD_INT 2
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 2
58510: PUSH
58511: LD_INT 3
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 2
58520: NEG
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 3
58531: NEG
58532: PUSH
58533: LD_INT 1
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58566: LD_ADDR_VAR 0 31
58570: PUSH
58571: LD_INT 0
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 0
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: LD_INT 1
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 1
58624: NEG
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 1
58635: NEG
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 1
58647: NEG
58648: PUSH
58649: LD_INT 2
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 2
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 2
58680: PUSH
58681: LD_INT 1
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 2
58690: PUSH
58691: LD_INT 2
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: LD_INT 2
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: LD_INT 2
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: NEG
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 2
58731: NEG
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: NEG
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 2
58755: NEG
58756: PUSH
58757: LD_INT 3
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 2
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 3
58778: PUSH
58779: LD_INT 1
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: LD_INT 3
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: LD_INT 2
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 3
58809: NEG
58810: PUSH
58811: LD_INT 2
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58844: LD_ADDR_VAR 0 32
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: LD_INT 1
58864: NEG
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 1
58902: NEG
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 1
58913: NEG
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: LD_INT 2
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 0
58937: PUSH
58938: LD_INT 2
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 1
58948: PUSH
58949: LD_INT 1
58951: NEG
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 2
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 2
58969: PUSH
58970: LD_INT 2
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: LD_INT 2
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 0
58989: PUSH
58990: LD_INT 2
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 1
58999: NEG
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 2
59021: NEG
59022: PUSH
59023: LD_INT 1
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: LD_INT 3
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: LD_INT 2
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 3
59056: PUSH
59057: LD_INT 2
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 2
59066: PUSH
59067: LD_INT 3
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 2
59076: NEG
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 3
59087: NEG
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59122: LD_ADDR_VAR 0 33
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: LD_INT 2
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 2
59226: PUSH
59227: LD_INT 0
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 2
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: LD_INT 2
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: LD_INT 2
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 2
59288: NEG
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 2
59300: NEG
59301: PUSH
59302: LD_INT 2
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 2
59312: NEG
59313: PUSH
59314: LD_INT 3
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 2
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 3
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: LD_INT 3
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: LD_INT 2
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 3
59366: NEG
59367: PUSH
59368: LD_INT 2
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59401: LD_ADDR_VAR 0 34
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 1
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: LD_INT 2
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: LD_INT 2
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 1
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 2
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 2
59526: PUSH
59527: LD_INT 2
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 1
59536: PUSH
59537: LD_INT 2
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 2
59557: NEG
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 2
59568: NEG
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 2
59580: NEG
59581: PUSH
59582: LD_INT 2
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 1
59592: NEG
59593: PUSH
59594: LD_INT 3
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: LD_INT 2
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 3
59615: PUSH
59616: LD_INT 2
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: LD_INT 3
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 2
59635: NEG
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 3
59646: NEG
59647: PUSH
59648: LD_INT 1
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59681: LD_ADDR_VAR 0 35
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: LD_INT 0
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 0
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 1
59739: NEG
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 2
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 2
59772: NEG
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59793: LD_ADDR_VAR 0 36
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 1
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 1
59874: NEG
59875: PUSH
59876: LD_INT 2
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: LD_INT 2
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59905: LD_ADDR_VAR 0 37
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: LD_INT 1
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: LD_INT 0
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: LD_INT 1
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: LD_INT 1
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60017: LD_ADDR_VAR 0 38
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: LD_INT 1
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 2
60098: PUSH
60099: LD_INT 1
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 2
60108: NEG
60109: PUSH
60110: LD_INT 1
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60129: LD_ADDR_VAR 0 39
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: LD_INT 1
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 1
60198: NEG
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: LD_INT 2
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 1
60222: PUSH
60223: LD_INT 2
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60241: LD_ADDR_VAR 0 40
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 0
60258: PUSH
60259: LD_INT 1
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 1
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 1
60279: PUSH
60280: LD_INT 1
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: LD_INT 1
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 1
60299: NEG
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: NEG
60311: PUSH
60312: LD_INT 1
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 1
60322: PUSH
60323: LD_INT 1
60325: NEG
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 1
60333: NEG
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60353: LD_ADDR_VAR 0 41
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 1
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 1
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: LD_INT 1
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 1
60422: NEG
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: LD_INT 2
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 2
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 2
60467: PUSH
60468: LD_INT 1
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 2
60477: PUSH
60478: LD_INT 2
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 1
60487: PUSH
60488: LD_INT 2
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 1
60497: NEG
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 2
60519: NEG
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 2
60531: NEG
60532: PUSH
60533: LD_INT 2
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 2
60543: NEG
60544: PUSH
60545: LD_INT 3
60547: NEG
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 2
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 3
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 3
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 3
60586: PUSH
60587: LD_INT 2
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 3
60596: PUSH
60597: LD_INT 3
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 2
60606: PUSH
60607: LD_INT 3
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 2
60616: NEG
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 3
60627: NEG
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 3
60638: NEG
60639: PUSH
60640: LD_INT 1
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 3
60650: NEG
60651: PUSH
60652: LD_INT 2
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 3
60662: NEG
60663: PUSH
60664: LD_INT 3
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60703: LD_ADDR_VAR 0 42
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: NEG
60773: PUSH
60774: LD_INT 1
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: LD_INT 2
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: LD_INT 2
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 2
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 2
60828: PUSH
60829: LD_INT 2
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: LD_INT 2
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: LD_INT 2
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 1
60858: NEG
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 2
60869: NEG
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 2
60881: NEG
60882: PUSH
60883: LD_INT 2
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 2
60893: NEG
60894: PUSH
60895: LD_INT 3
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: LD_INT 3
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 0
60917: PUSH
60918: LD_INT 3
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: LD_INT 2
60931: NEG
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 3
60939: PUSH
60940: LD_INT 2
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 3
60949: PUSH
60950: LD_INT 3
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 2
60959: PUSH
60960: LD_INT 3
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: LD_INT 3
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: LD_INT 3
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 1
60989: NEG
60990: PUSH
60991: LD_INT 2
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 3
61000: NEG
61001: PUSH
61002: LD_INT 2
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 3
61012: NEG
61013: PUSH
61014: LD_INT 3
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61053: LD_ADDR_VAR 0 43
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 0
61070: PUSH
61071: LD_INT 1
61073: NEG
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 1
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 0
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: LD_INT 0
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 1
61122: NEG
61123: PUSH
61124: LD_INT 1
61126: NEG
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 1
61134: NEG
61135: PUSH
61136: LD_INT 2
61138: NEG
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 0
61146: PUSH
61147: LD_INT 2
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: PUSH
61158: LD_INT 1
61160: NEG
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 2
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 2
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 1
61188: PUSH
61189: LD_INT 2
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: LD_INT 2
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 1
61208: NEG
61209: PUSH
61210: LD_INT 1
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 2
61219: NEG
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 2
61230: NEG
61231: PUSH
61232: LD_INT 1
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: LD_INT 3
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: LD_INT 3
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: LD_INT 2
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 2
61276: PUSH
61277: LD_INT 1
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 3
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 3
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 1
61307: PUSH
61308: LD_INT 3
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: LD_INT 3
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 1
61327: NEG
61328: PUSH
61329: LD_INT 2
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 2
61338: NEG
61339: PUSH
61340: LD_INT 1
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 3
61349: NEG
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 3
61360: NEG
61361: PUSH
61362: LD_INT 1
61364: NEG
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61401: LD_ADDR_VAR 0 44
61405: PUSH
61406: LD_INT 0
61408: PUSH
61409: LD_INT 0
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 0
61418: PUSH
61419: LD_INT 1
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: LD_INT 0
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 1
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 0
61449: PUSH
61450: LD_INT 1
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: NEG
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 1
61470: NEG
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: PUSH
61484: LD_INT 2
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 1
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 2
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 2
61515: PUSH
61516: LD_INT 1
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 2
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 1
61535: PUSH
61536: LD_INT 2
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 1
61545: NEG
61546: PUSH
61547: LD_INT 1
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 2
61556: NEG
61557: PUSH
61558: LD_INT 0
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 2
61567: NEG
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 2
61579: NEG
61580: PUSH
61581: LD_INT 2
61583: NEG
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 2
61591: NEG
61592: PUSH
61593: LD_INT 3
61595: NEG
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 2
61603: PUSH
61604: LD_INT 1
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 3
61614: PUSH
61615: LD_INT 0
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 3
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 3
61634: PUSH
61635: LD_INT 2
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 3
61644: PUSH
61645: LD_INT 3
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 2
61654: PUSH
61655: LD_INT 3
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 2
61664: NEG
61665: PUSH
61666: LD_INT 1
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 3
61675: NEG
61676: PUSH
61677: LD_INT 0
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 3
61686: NEG
61687: PUSH
61688: LD_INT 1
61690: NEG
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 3
61698: NEG
61699: PUSH
61700: LD_INT 2
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 3
61710: NEG
61711: PUSH
61712: LD_INT 3
61714: NEG
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61751: LD_ADDR_VAR 0 45
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: LD_INT 1
61771: NEG
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 1
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 1
61789: PUSH
61790: LD_INT 1
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: LD_INT 1
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 1
61809: NEG
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: LD_INT 1
61824: NEG
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 1
61832: NEG
61833: PUSH
61834: LD_INT 2
61836: NEG
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 0
61844: PUSH
61845: LD_INT 2
61847: NEG
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 1
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 2
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: PUSH
61877: LD_INT 2
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 1
61886: PUSH
61887: LD_INT 2
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: LD_INT 2
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: LD_INT 1
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 2
61917: NEG
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 2
61929: NEG
61930: PUSH
61931: LD_INT 2
61933: NEG
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 2
61941: NEG
61942: PUSH
61943: LD_INT 3
61945: NEG
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 1
61953: NEG
61954: PUSH
61955: LD_INT 3
61957: NEG
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 0
61965: PUSH
61966: LD_INT 3
61968: NEG
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 1
61976: PUSH
61977: LD_INT 2
61979: NEG
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 3
61987: PUSH
61988: LD_INT 2
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 3
61997: PUSH
61998: LD_INT 3
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 2
62007: PUSH
62008: LD_INT 3
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 1
62017: PUSH
62018: LD_INT 3
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: LD_INT 3
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: LD_INT 2
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 3
62048: NEG
62049: PUSH
62050: LD_INT 2
62052: NEG
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 3
62060: NEG
62061: PUSH
62062: LD_INT 3
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62101: LD_ADDR_VAR 0 46
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 0
62118: PUSH
62119: LD_INT 1
62121: NEG
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 1
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 1
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 0
62149: PUSH
62150: LD_INT 1
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 1
62159: NEG
62160: PUSH
62161: LD_INT 0
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 1
62170: NEG
62171: PUSH
62172: LD_INT 1
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 1
62182: NEG
62183: PUSH
62184: LD_INT 2
62186: NEG
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 0
62194: PUSH
62195: LD_INT 2
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 1
62205: PUSH
62206: LD_INT 1
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 2
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 2
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 1
62236: PUSH
62237: LD_INT 2
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: LD_INT 2
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 1
62256: NEG
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 2
62267: NEG
62268: PUSH
62269: LD_INT 0
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 2
62278: NEG
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 1
62290: NEG
62291: PUSH
62292: LD_INT 3
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 0
62302: PUSH
62303: LD_INT 3
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 1
62313: PUSH
62314: LD_INT 2
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 2
62324: PUSH
62325: LD_INT 1
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 3
62335: PUSH
62336: LD_INT 0
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 3
62345: PUSH
62346: LD_INT 1
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 1
62355: PUSH
62356: LD_INT 3
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 0
62365: PUSH
62366: LD_INT 3
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 1
62375: NEG
62376: PUSH
62377: LD_INT 2
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 2
62386: NEG
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 3
62397: NEG
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 3
62408: NEG
62409: PUSH
62410: LD_INT 1
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62449: LD_ADDR_VAR 0 47
62453: PUSH
62454: LD_INT 0
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 0
62466: PUSH
62467: LD_INT 1
62469: NEG
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 1
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 1
62487: PUSH
62488: LD_INT 1
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 0
62497: PUSH
62498: LD_INT 1
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 1
62507: NEG
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 1
62518: NEG
62519: PUSH
62520: LD_INT 1
62522: NEG
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: LD_INT 2
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: LD_INT 2
62545: NEG
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 1
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 2
62564: NEG
62565: PUSH
62566: LD_INT 1
62568: NEG
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 2
62576: NEG
62577: PUSH
62578: LD_INT 2
62580: NEG
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62600: LD_ADDR_VAR 0 48
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 0
62617: PUSH
62618: LD_INT 1
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: LD_INT 1
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: LD_INT 1
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 1
62658: NEG
62659: PUSH
62660: LD_INT 0
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 1
62669: NEG
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 1
62681: NEG
62682: PUSH
62683: LD_INT 2
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 0
62693: PUSH
62694: LD_INT 2
62696: NEG
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 1
62704: PUSH
62705: LD_INT 1
62707: NEG
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 2
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 2
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62747: LD_ADDR_VAR 0 49
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: LD_INT 1
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 1
62785: PUSH
62786: LD_INT 1
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 1
62805: NEG
62806: PUSH
62807: LD_INT 0
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 1
62816: NEG
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 1
62828: PUSH
62829: LD_INT 1
62831: NEG
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 2
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 2
62849: PUSH
62850: LD_INT 1
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 2
62859: PUSH
62860: LD_INT 2
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 1
62869: PUSH
62870: LD_INT 2
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62891: LD_ADDR_VAR 0 50
62895: PUSH
62896: LD_INT 0
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: LD_INT 1
62911: NEG
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 1
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: LD_INT 1
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 0
62939: PUSH
62940: LD_INT 1
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 1
62949: NEG
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: NEG
62961: PUSH
62962: LD_INT 1
62964: NEG
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 2
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 2
62982: PUSH
62983: LD_INT 2
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 1
62992: PUSH
62993: LD_INT 2
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 0
63002: PUSH
63003: LD_INT 2
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 1
63012: NEG
63013: PUSH
63014: LD_INT 1
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63035: LD_ADDR_VAR 0 51
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: LD_INT 0
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: LD_INT 1
63055: NEG
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 1
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: LD_INT 1
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: LD_INT 0
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 1
63104: NEG
63105: PUSH
63106: LD_INT 1
63108: NEG
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 1
63116: PUSH
63117: LD_INT 2
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 0
63126: PUSH
63127: LD_INT 2
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 1
63136: NEG
63137: PUSH
63138: LD_INT 1
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 2
63147: NEG
63148: PUSH
63149: LD_INT 0
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 2
63158: NEG
63159: PUSH
63160: LD_INT 1
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63182: LD_ADDR_VAR 0 52
63186: PUSH
63187: LD_INT 0
63189: PUSH
63190: LD_INT 0
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 0
63199: PUSH
63200: LD_INT 1
63202: NEG
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 1
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: LD_INT 1
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: LD_INT 1
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 1
63240: NEG
63241: PUSH
63242: LD_INT 0
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 1
63251: NEG
63252: PUSH
63253: LD_INT 1
63255: NEG
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 1
63263: NEG
63264: PUSH
63265: LD_INT 2
63267: NEG
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 1
63275: NEG
63276: PUSH
63277: LD_INT 1
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 2
63286: NEG
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 2
63297: NEG
63298: PUSH
63299: LD_INT 1
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 2
63309: NEG
63310: PUSH
63311: LD_INT 2
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63333: LD_ADDR_VAR 0 53
63337: PUSH
63338: LD_INT 0
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: LD_INT 1
63353: NEG
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 1
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 1
63371: PUSH
63372: LD_INT 1
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: LD_INT 1
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 1
63402: NEG
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 1
63414: NEG
63415: PUSH
63416: LD_INT 2
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: LD_INT 2
63429: NEG
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: LD_INT 1
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 2
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 2
63458: PUSH
63459: LD_INT 1
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 2
63468: PUSH
63469: LD_INT 2
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: PUSH
63479: LD_INT 2
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: LD_INT 2
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 1
63498: NEG
63499: PUSH
63500: LD_INT 1
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 2
63509: NEG
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 2
63520: NEG
63521: PUSH
63522: LD_INT 1
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 2
63532: NEG
63533: PUSH
63534: LD_INT 2
63536: NEG
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63563: LD_ADDR_VAR 0 54
63567: PUSH
63568: LD_INT 0
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 0
63580: PUSH
63581: LD_INT 1
63583: NEG
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 1
63591: PUSH
63592: LD_INT 0
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 1
63601: PUSH
63602: LD_INT 1
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: LD_INT 1
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 1
63621: NEG
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 1
63632: NEG
63633: PUSH
63634: LD_INT 1
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 1
63644: NEG
63645: PUSH
63646: LD_INT 2
63648: NEG
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: LD_INT 2
63659: NEG
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 1
63667: PUSH
63668: LD_INT 1
63670: NEG
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 2
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 2
63688: PUSH
63689: LD_INT 1
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 2
63698: PUSH
63699: LD_INT 2
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 1
63708: PUSH
63709: LD_INT 2
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 0
63718: PUSH
63719: LD_INT 2
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 1
63728: NEG
63729: PUSH
63730: LD_INT 1
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 2
63739: NEG
63740: PUSH
63741: LD_INT 0
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 2
63750: NEG
63751: PUSH
63752: LD_INT 1
63754: NEG
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 2
63762: NEG
63763: PUSH
63764: LD_INT 2
63766: NEG
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63793: LD_ADDR_VAR 0 55
63797: PUSH
63798: LD_INT 0
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: LD_INT 1
63813: NEG
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 1
63821: PUSH
63822: LD_INT 0
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 1
63831: PUSH
63832: LD_INT 1
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 0
63841: PUSH
63842: LD_INT 1
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 1
63851: NEG
63852: PUSH
63853: LD_INT 0
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 1
63862: NEG
63863: PUSH
63864: LD_INT 1
63866: NEG
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 1
63874: NEG
63875: PUSH
63876: LD_INT 2
63878: NEG
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 0
63886: PUSH
63887: LD_INT 2
63889: NEG
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 1
63897: PUSH
63898: LD_INT 1
63900: NEG
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 2
63908: PUSH
63909: LD_INT 0
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 2
63918: PUSH
63919: LD_INT 1
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 2
63928: PUSH
63929: LD_INT 2
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 1
63938: PUSH
63939: LD_INT 2
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: LD_INT 2
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 1
63958: NEG
63959: PUSH
63960: LD_INT 1
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 2
63969: NEG
63970: PUSH
63971: LD_INT 0
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 2
63980: NEG
63981: PUSH
63982: LD_INT 1
63984: NEG
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 2
63992: NEG
63993: PUSH
63994: LD_INT 2
63996: NEG
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64023: LD_ADDR_VAR 0 56
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 0
64040: PUSH
64041: LD_INT 1
64043: NEG
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 1
64051: PUSH
64052: LD_INT 0
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 1
64061: PUSH
64062: LD_INT 1
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: LD_INT 1
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 1
64081: NEG
64082: PUSH
64083: LD_INT 0
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 1
64092: NEG
64093: PUSH
64094: LD_INT 1
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 1
64104: NEG
64105: PUSH
64106: LD_INT 2
64108: NEG
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 0
64116: PUSH
64117: LD_INT 2
64119: NEG
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 1
64127: PUSH
64128: LD_INT 1
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 2
64138: PUSH
64139: LD_INT 0
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 2
64148: PUSH
64149: LD_INT 1
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 2
64158: PUSH
64159: LD_INT 2
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 1
64168: PUSH
64169: LD_INT 2
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 0
64178: PUSH
64179: LD_INT 2
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 1
64188: NEG
64189: PUSH
64190: LD_INT 1
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 2
64199: NEG
64200: PUSH
64201: LD_INT 0
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 2
64210: NEG
64211: PUSH
64212: LD_INT 1
64214: NEG
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 2
64222: NEG
64223: PUSH
64224: LD_INT 2
64226: NEG
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64253: LD_ADDR_VAR 0 57
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: LD_INT 0
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 0
64270: PUSH
64271: LD_INT 1
64273: NEG
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 1
64281: PUSH
64282: LD_INT 0
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 1
64291: PUSH
64292: LD_INT 1
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 0
64301: PUSH
64302: LD_INT 1
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 1
64311: NEG
64312: PUSH
64313: LD_INT 0
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 1
64322: NEG
64323: PUSH
64324: LD_INT 1
64326: NEG
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 1
64334: NEG
64335: PUSH
64336: LD_INT 2
64338: NEG
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: LD_INT 2
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 1
64357: PUSH
64358: LD_INT 1
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 2
64368: PUSH
64369: LD_INT 0
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 2
64378: PUSH
64379: LD_INT 1
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 2
64388: PUSH
64389: LD_INT 2
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 1
64398: PUSH
64399: LD_INT 2
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 0
64408: PUSH
64409: LD_INT 2
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 1
64418: NEG
64419: PUSH
64420: LD_INT 1
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 2
64429: NEG
64430: PUSH
64431: LD_INT 0
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 2
64440: NEG
64441: PUSH
64442: LD_INT 1
64444: NEG
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 2
64452: NEG
64453: PUSH
64454: LD_INT 2
64456: NEG
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64483: LD_ADDR_VAR 0 58
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: LD_INT 0
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 0
64500: PUSH
64501: LD_INT 1
64503: NEG
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 1
64511: PUSH
64512: LD_INT 0
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 1
64521: PUSH
64522: LD_INT 1
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 0
64531: PUSH
64532: LD_INT 1
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 1
64541: NEG
64542: PUSH
64543: LD_INT 0
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 1
64552: NEG
64553: PUSH
64554: LD_INT 1
64556: NEG
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 1
64564: NEG
64565: PUSH
64566: LD_INT 2
64568: NEG
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 0
64576: PUSH
64577: LD_INT 2
64579: NEG
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 1
64587: PUSH
64588: LD_INT 1
64590: NEG
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 2
64598: PUSH
64599: LD_INT 0
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 2
64608: PUSH
64609: LD_INT 1
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 2
64618: PUSH
64619: LD_INT 2
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 1
64628: PUSH
64629: LD_INT 2
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 0
64638: PUSH
64639: LD_INT 2
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 1
64648: NEG
64649: PUSH
64650: LD_INT 1
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 2
64659: NEG
64660: PUSH
64661: LD_INT 0
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 2
64670: NEG
64671: PUSH
64672: LD_INT 1
64674: NEG
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 2
64682: NEG
64683: PUSH
64684: LD_INT 2
64686: NEG
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64713: LD_ADDR_VAR 0 59
64717: PUSH
64718: LD_INT 0
64720: PUSH
64721: LD_INT 0
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 0
64730: PUSH
64731: LD_INT 1
64733: NEG
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 1
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 1
64751: PUSH
64752: LD_INT 1
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: LD_INT 1
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 1
64771: NEG
64772: PUSH
64773: LD_INT 0
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 1
64782: NEG
64783: PUSH
64784: LD_INT 1
64786: NEG
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64801: LD_ADDR_VAR 0 60
64805: PUSH
64806: LD_INT 0
64808: PUSH
64809: LD_INT 0
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 0
64818: PUSH
64819: LD_INT 1
64821: NEG
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 1
64829: PUSH
64830: LD_INT 0
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 1
64839: PUSH
64840: LD_INT 1
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: LD_INT 1
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 1
64859: NEG
64860: PUSH
64861: LD_INT 0
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 1
64870: NEG
64871: PUSH
64872: LD_INT 1
64874: NEG
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64889: LD_ADDR_VAR 0 61
64893: PUSH
64894: LD_INT 0
64896: PUSH
64897: LD_INT 0
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 0
64906: PUSH
64907: LD_INT 1
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 1
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 1
64927: PUSH
64928: LD_INT 1
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 0
64937: PUSH
64938: LD_INT 1
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 1
64947: NEG
64948: PUSH
64949: LD_INT 0
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 1
64958: NEG
64959: PUSH
64960: LD_INT 1
64962: NEG
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64977: LD_ADDR_VAR 0 62
64981: PUSH
64982: LD_INT 0
64984: PUSH
64985: LD_INT 0
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: LD_INT 1
64997: NEG
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 1
65005: PUSH
65006: LD_INT 0
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 1
65015: PUSH
65016: LD_INT 1
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 0
65025: PUSH
65026: LD_INT 1
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 1
65035: NEG
65036: PUSH
65037: LD_INT 0
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 1
65046: NEG
65047: PUSH
65048: LD_INT 1
65050: NEG
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65065: LD_ADDR_VAR 0 63
65069: PUSH
65070: LD_INT 0
65072: PUSH
65073: LD_INT 0
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 0
65082: PUSH
65083: LD_INT 1
65085: NEG
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 1
65093: PUSH
65094: LD_INT 0
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 1
65103: PUSH
65104: LD_INT 1
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 0
65113: PUSH
65114: LD_INT 1
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 1
65123: NEG
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 1
65134: NEG
65135: PUSH
65136: LD_INT 1
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65153: LD_ADDR_VAR 0 64
65157: PUSH
65158: LD_INT 0
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 0
65170: PUSH
65171: LD_INT 1
65173: NEG
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 1
65181: PUSH
65182: LD_INT 0
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 1
65191: PUSH
65192: LD_INT 1
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 0
65201: PUSH
65202: LD_INT 1
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 1
65211: NEG
65212: PUSH
65213: LD_INT 0
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 1
65222: NEG
65223: PUSH
65224: LD_INT 1
65226: NEG
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: ST_TO_ADDR
// end ; 1 :
65241: GO 71138
65243: LD_INT 1
65245: DOUBLE
65246: EQUAL
65247: IFTRUE 65251
65249: GO 67874
65251: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65252: LD_ADDR_VAR 0 11
65256: PUSH
65257: LD_INT 1
65259: NEG
65260: PUSH
65261: LD_INT 3
65263: NEG
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 0
65271: PUSH
65272: LD_INT 3
65274: NEG
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 1
65282: PUSH
65283: LD_INT 2
65285: NEG
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: LIST
65295: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65296: LD_ADDR_VAR 0 12
65300: PUSH
65301: LD_INT 2
65303: PUSH
65304: LD_INT 1
65306: NEG
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 3
65314: PUSH
65315: LD_INT 0
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 3
65324: PUSH
65325: LD_INT 1
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: LIST
65336: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65337: LD_ADDR_VAR 0 13
65341: PUSH
65342: LD_INT 3
65344: PUSH
65345: LD_INT 2
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 3
65354: PUSH
65355: LD_INT 3
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 2
65364: PUSH
65365: LD_INT 3
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: LIST
65376: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65377: LD_ADDR_VAR 0 14
65381: PUSH
65382: LD_INT 1
65384: PUSH
65385: LD_INT 3
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: LD_INT 3
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 1
65404: NEG
65405: PUSH
65406: LD_INT 2
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: LIST
65417: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65418: LD_ADDR_VAR 0 15
65422: PUSH
65423: LD_INT 2
65425: NEG
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 3
65436: NEG
65437: PUSH
65438: LD_INT 0
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 3
65447: NEG
65448: PUSH
65449: LD_INT 1
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: LIST
65461: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65462: LD_ADDR_VAR 0 16
65466: PUSH
65467: LD_INT 2
65469: NEG
65470: PUSH
65471: LD_INT 3
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 3
65481: NEG
65482: PUSH
65483: LD_INT 2
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 3
65493: NEG
65494: PUSH
65495: LD_INT 3
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: LIST
65507: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65508: LD_ADDR_VAR 0 17
65512: PUSH
65513: LD_INT 1
65515: NEG
65516: PUSH
65517: LD_INT 3
65519: NEG
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 0
65527: PUSH
65528: LD_INT 3
65530: NEG
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 1
65538: PUSH
65539: LD_INT 2
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: LIST
65551: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65552: LD_ADDR_VAR 0 18
65556: PUSH
65557: LD_INT 2
65559: PUSH
65560: LD_INT 1
65562: NEG
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 3
65570: PUSH
65571: LD_INT 0
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 3
65580: PUSH
65581: LD_INT 1
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: LIST
65592: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65593: LD_ADDR_VAR 0 19
65597: PUSH
65598: LD_INT 3
65600: PUSH
65601: LD_INT 2
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 3
65610: PUSH
65611: LD_INT 3
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 2
65620: PUSH
65621: LD_INT 3
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: LIST
65632: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65633: LD_ADDR_VAR 0 20
65637: PUSH
65638: LD_INT 1
65640: PUSH
65641: LD_INT 3
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 0
65650: PUSH
65651: LD_INT 3
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 1
65660: NEG
65661: PUSH
65662: LD_INT 2
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: LIST
65673: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65674: LD_ADDR_VAR 0 21
65678: PUSH
65679: LD_INT 2
65681: NEG
65682: PUSH
65683: LD_INT 1
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 3
65692: NEG
65693: PUSH
65694: LD_INT 0
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 3
65703: NEG
65704: PUSH
65705: LD_INT 1
65707: NEG
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: LIST
65717: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65718: LD_ADDR_VAR 0 22
65722: PUSH
65723: LD_INT 2
65725: NEG
65726: PUSH
65727: LD_INT 3
65729: NEG
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 3
65737: NEG
65738: PUSH
65739: LD_INT 2
65741: NEG
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 3
65749: NEG
65750: PUSH
65751: LD_INT 3
65753: NEG
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: LIST
65763: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65764: LD_ADDR_VAR 0 23
65768: PUSH
65769: LD_INT 0
65771: PUSH
65772: LD_INT 3
65774: NEG
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 1
65782: NEG
65783: PUSH
65784: LD_INT 4
65786: NEG
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 1
65794: PUSH
65795: LD_INT 3
65797: NEG
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: LIST
65807: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65808: LD_ADDR_VAR 0 24
65812: PUSH
65813: LD_INT 3
65815: PUSH
65816: LD_INT 0
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 3
65825: PUSH
65826: LD_INT 1
65828: NEG
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 4
65836: PUSH
65837: LD_INT 1
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: LIST
65848: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65849: LD_ADDR_VAR 0 25
65853: PUSH
65854: LD_INT 3
65856: PUSH
65857: LD_INT 3
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 4
65866: PUSH
65867: LD_INT 3
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 3
65876: PUSH
65877: LD_INT 4
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: LIST
65888: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65889: LD_ADDR_VAR 0 26
65893: PUSH
65894: LD_INT 0
65896: PUSH
65897: LD_INT 3
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 1
65906: PUSH
65907: LD_INT 4
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 1
65916: NEG
65917: PUSH
65918: LD_INT 3
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: LIST
65929: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65930: LD_ADDR_VAR 0 27
65934: PUSH
65935: LD_INT 3
65937: NEG
65938: PUSH
65939: LD_INT 0
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 3
65948: NEG
65949: PUSH
65950: LD_INT 1
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 4
65959: NEG
65960: PUSH
65961: LD_INT 1
65963: NEG
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: LIST
65973: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65974: LD_ADDR_VAR 0 28
65978: PUSH
65979: LD_INT 3
65981: NEG
65982: PUSH
65983: LD_INT 3
65985: NEG
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 3
65993: NEG
65994: PUSH
65995: LD_INT 4
65997: NEG
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 4
66005: NEG
66006: PUSH
66007: LD_INT 3
66009: NEG
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: LIST
66019: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66020: LD_ADDR_VAR 0 29
66024: PUSH
66025: LD_INT 1
66027: NEG
66028: PUSH
66029: LD_INT 3
66031: NEG
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 0
66039: PUSH
66040: LD_INT 3
66042: NEG
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 1
66050: PUSH
66051: LD_INT 2
66053: NEG
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 1
66061: NEG
66062: PUSH
66063: LD_INT 4
66065: NEG
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 0
66073: PUSH
66074: LD_INT 4
66076: NEG
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 1
66084: PUSH
66085: LD_INT 3
66087: NEG
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 1
66095: NEG
66096: PUSH
66097: LD_INT 5
66099: NEG
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 0
66107: PUSH
66108: LD_INT 5
66110: NEG
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 1
66118: PUSH
66119: LD_INT 4
66121: NEG
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 1
66129: NEG
66130: PUSH
66131: LD_INT 6
66133: NEG
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 0
66141: PUSH
66142: LD_INT 6
66144: NEG
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 1
66152: PUSH
66153: LD_INT 5
66155: NEG
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66175: LD_ADDR_VAR 0 30
66179: PUSH
66180: LD_INT 2
66182: PUSH
66183: LD_INT 1
66185: NEG
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 3
66193: PUSH
66194: LD_INT 0
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 3
66203: PUSH
66204: LD_INT 1
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 3
66213: PUSH
66214: LD_INT 1
66216: NEG
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 4
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 4
66234: PUSH
66235: LD_INT 1
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 4
66244: PUSH
66245: LD_INT 1
66247: NEG
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 5
66255: PUSH
66256: LD_INT 0
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 5
66265: PUSH
66266: LD_INT 1
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 5
66275: PUSH
66276: LD_INT 1
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 6
66286: PUSH
66287: LD_INT 0
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 6
66296: PUSH
66297: LD_INT 1
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66318: LD_ADDR_VAR 0 31
66322: PUSH
66323: LD_INT 3
66325: PUSH
66326: LD_INT 2
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 3
66335: PUSH
66336: LD_INT 3
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 2
66345: PUSH
66346: LD_INT 3
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 4
66355: PUSH
66356: LD_INT 3
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 4
66365: PUSH
66366: LD_INT 4
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 3
66375: PUSH
66376: LD_INT 4
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 5
66385: PUSH
66386: LD_INT 4
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 5
66395: PUSH
66396: LD_INT 5
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 4
66405: PUSH
66406: LD_INT 5
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 6
66415: PUSH
66416: LD_INT 5
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 6
66425: PUSH
66426: LD_INT 6
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 5
66435: PUSH
66436: LD_INT 6
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66457: LD_ADDR_VAR 0 32
66461: PUSH
66462: LD_INT 1
66464: PUSH
66465: LD_INT 3
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 0
66474: PUSH
66475: LD_INT 3
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 1
66484: NEG
66485: PUSH
66486: LD_INT 2
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 1
66495: PUSH
66496: LD_INT 4
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 0
66505: PUSH
66506: LD_INT 4
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 1
66515: NEG
66516: PUSH
66517: LD_INT 3
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 1
66526: PUSH
66527: LD_INT 5
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 0
66536: PUSH
66537: LD_INT 5
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 1
66546: NEG
66547: PUSH
66548: LD_INT 4
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 1
66557: PUSH
66558: LD_INT 6
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 0
66567: PUSH
66568: LD_INT 6
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 1
66577: NEG
66578: PUSH
66579: LD_INT 5
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66600: LD_ADDR_VAR 0 33
66604: PUSH
66605: LD_INT 2
66607: NEG
66608: PUSH
66609: LD_INT 1
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 3
66618: NEG
66619: PUSH
66620: LD_INT 0
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 3
66629: NEG
66630: PUSH
66631: LD_INT 1
66633: NEG
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 3
66641: NEG
66642: PUSH
66643: LD_INT 1
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 4
66652: NEG
66653: PUSH
66654: LD_INT 0
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 4
66663: NEG
66664: PUSH
66665: LD_INT 1
66667: NEG
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 4
66675: NEG
66676: PUSH
66677: LD_INT 1
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 5
66686: NEG
66687: PUSH
66688: LD_INT 0
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 5
66697: NEG
66698: PUSH
66699: LD_INT 1
66701: NEG
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 5
66709: NEG
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 6
66720: NEG
66721: PUSH
66722: LD_INT 0
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 6
66731: NEG
66732: PUSH
66733: LD_INT 1
66735: NEG
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66755: LD_ADDR_VAR 0 34
66759: PUSH
66760: LD_INT 2
66762: NEG
66763: PUSH
66764: LD_INT 3
66766: NEG
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 3
66774: NEG
66775: PUSH
66776: LD_INT 2
66778: NEG
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 3
66786: NEG
66787: PUSH
66788: LD_INT 3
66790: NEG
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 3
66798: NEG
66799: PUSH
66800: LD_INT 4
66802: NEG
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 4
66810: NEG
66811: PUSH
66812: LD_INT 3
66814: NEG
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 4
66822: NEG
66823: PUSH
66824: LD_INT 4
66826: NEG
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 4
66834: NEG
66835: PUSH
66836: LD_INT 5
66838: NEG
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 5
66846: NEG
66847: PUSH
66848: LD_INT 4
66850: NEG
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 5
66858: NEG
66859: PUSH
66860: LD_INT 5
66862: NEG
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 5
66870: NEG
66871: PUSH
66872: LD_INT 6
66874: NEG
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 6
66882: NEG
66883: PUSH
66884: LD_INT 5
66886: NEG
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 6
66894: NEG
66895: PUSH
66896: LD_INT 6
66898: NEG
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66918: LD_ADDR_VAR 0 41
66922: PUSH
66923: LD_INT 0
66925: PUSH
66926: LD_INT 2
66928: NEG
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 1
66936: NEG
66937: PUSH
66938: LD_INT 3
66940: NEG
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 1
66948: PUSH
66949: LD_INT 2
66951: NEG
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: LIST
66961: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66962: LD_ADDR_VAR 0 42
66966: PUSH
66967: LD_INT 2
66969: PUSH
66970: LD_INT 0
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 2
66979: PUSH
66980: LD_INT 1
66982: NEG
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 3
66990: PUSH
66991: LD_INT 1
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: LIST
67002: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67003: LD_ADDR_VAR 0 43
67007: PUSH
67008: LD_INT 2
67010: PUSH
67011: LD_INT 2
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 3
67020: PUSH
67021: LD_INT 2
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 2
67030: PUSH
67031: LD_INT 3
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: LIST
67042: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67043: LD_ADDR_VAR 0 44
67047: PUSH
67048: LD_INT 0
67050: PUSH
67051: LD_INT 2
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 1
67060: PUSH
67061: LD_INT 3
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 1
67070: NEG
67071: PUSH
67072: LD_INT 2
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: LIST
67083: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67084: LD_ADDR_VAR 0 45
67088: PUSH
67089: LD_INT 2
67091: NEG
67092: PUSH
67093: LD_INT 0
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 2
67102: NEG
67103: PUSH
67104: LD_INT 1
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 3
67113: NEG
67114: PUSH
67115: LD_INT 1
67117: NEG
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: LIST
67127: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67128: LD_ADDR_VAR 0 46
67132: PUSH
67133: LD_INT 2
67135: NEG
67136: PUSH
67137: LD_INT 2
67139: NEG
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 2
67147: NEG
67148: PUSH
67149: LD_INT 3
67151: NEG
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 3
67159: NEG
67160: PUSH
67161: LD_INT 2
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: LIST
67173: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67174: LD_ADDR_VAR 0 47
67178: PUSH
67179: LD_INT 2
67181: NEG
67182: PUSH
67183: LD_INT 3
67185: NEG
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 1
67193: NEG
67194: PUSH
67195: LD_INT 3
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67207: LD_ADDR_VAR 0 48
67211: PUSH
67212: LD_INT 1
67214: PUSH
67215: LD_INT 2
67217: NEG
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 2
67225: PUSH
67226: LD_INT 1
67228: NEG
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67238: LD_ADDR_VAR 0 49
67242: PUSH
67243: LD_INT 3
67245: PUSH
67246: LD_INT 1
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 3
67255: PUSH
67256: LD_INT 2
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67267: LD_ADDR_VAR 0 50
67271: PUSH
67272: LD_INT 2
67274: PUSH
67275: LD_INT 3
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 1
67284: PUSH
67285: LD_INT 3
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67296: LD_ADDR_VAR 0 51
67300: PUSH
67301: LD_INT 1
67303: NEG
67304: PUSH
67305: LD_INT 2
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 2
67314: NEG
67315: PUSH
67316: LD_INT 1
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67327: LD_ADDR_VAR 0 52
67331: PUSH
67332: LD_INT 3
67334: NEG
67335: PUSH
67336: LD_INT 1
67338: NEG
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 3
67346: NEG
67347: PUSH
67348: LD_INT 2
67350: NEG
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67360: LD_ADDR_VAR 0 53
67364: PUSH
67365: LD_INT 1
67367: NEG
67368: PUSH
67369: LD_INT 3
67371: NEG
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 0
67379: PUSH
67380: LD_INT 3
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 1
67390: PUSH
67391: LD_INT 2
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: LIST
67403: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67404: LD_ADDR_VAR 0 54
67408: PUSH
67409: LD_INT 2
67411: PUSH
67412: LD_INT 1
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 3
67422: PUSH
67423: LD_INT 0
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 3
67432: PUSH
67433: LD_INT 1
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: LIST
67444: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67445: LD_ADDR_VAR 0 55
67449: PUSH
67450: LD_INT 3
67452: PUSH
67453: LD_INT 2
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 3
67462: PUSH
67463: LD_INT 3
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 2
67472: PUSH
67473: LD_INT 3
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: LIST
67484: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67485: LD_ADDR_VAR 0 56
67489: PUSH
67490: LD_INT 1
67492: PUSH
67493: LD_INT 3
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 0
67502: PUSH
67503: LD_INT 3
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 1
67512: NEG
67513: PUSH
67514: LD_INT 2
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: LIST
67525: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67526: LD_ADDR_VAR 0 57
67530: PUSH
67531: LD_INT 2
67533: NEG
67534: PUSH
67535: LD_INT 1
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 3
67544: NEG
67545: PUSH
67546: LD_INT 0
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 3
67555: NEG
67556: PUSH
67557: LD_INT 1
67559: NEG
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: LIST
67569: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67570: LD_ADDR_VAR 0 58
67574: PUSH
67575: LD_INT 2
67577: NEG
67578: PUSH
67579: LD_INT 3
67581: NEG
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 3
67589: NEG
67590: PUSH
67591: LD_INT 2
67593: NEG
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 3
67601: NEG
67602: PUSH
67603: LD_INT 3
67605: NEG
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: LIST
67615: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67616: LD_ADDR_VAR 0 59
67620: PUSH
67621: LD_INT 1
67623: NEG
67624: PUSH
67625: LD_INT 2
67627: NEG
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 0
67635: PUSH
67636: LD_INT 2
67638: NEG
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 1
67646: PUSH
67647: LD_INT 1
67649: NEG
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: LIST
67659: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67660: LD_ADDR_VAR 0 60
67664: PUSH
67665: LD_INT 1
67667: PUSH
67668: LD_INT 1
67670: NEG
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 2
67678: PUSH
67679: LD_INT 0
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 2
67688: PUSH
67689: LD_INT 1
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: LIST
67700: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67701: LD_ADDR_VAR 0 61
67705: PUSH
67706: LD_INT 2
67708: PUSH
67709: LD_INT 1
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 2
67718: PUSH
67719: LD_INT 2
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 1
67728: PUSH
67729: LD_INT 2
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: LIST
67740: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67741: LD_ADDR_VAR 0 62
67745: PUSH
67746: LD_INT 1
67748: PUSH
67749: LD_INT 2
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 0
67758: PUSH
67759: LD_INT 2
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 1
67768: NEG
67769: PUSH
67770: LD_INT 1
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: LIST
67781: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67782: LD_ADDR_VAR 0 63
67786: PUSH
67787: LD_INT 1
67789: NEG
67790: PUSH
67791: LD_INT 1
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 2
67800: NEG
67801: PUSH
67802: LD_INT 0
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 2
67811: NEG
67812: PUSH
67813: LD_INT 1
67815: NEG
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: LIST
67825: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67826: LD_ADDR_VAR 0 64
67830: PUSH
67831: LD_INT 1
67833: NEG
67834: PUSH
67835: LD_INT 2
67837: NEG
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 2
67845: NEG
67846: PUSH
67847: LD_INT 1
67849: NEG
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 2
67857: NEG
67858: PUSH
67859: LD_INT 2
67861: NEG
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: LIST
67871: ST_TO_ADDR
// end ; 2 :
67872: GO 71138
67874: LD_INT 2
67876: DOUBLE
67877: EQUAL
67878: IFTRUE 67882
67880: GO 71137
67882: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67883: LD_ADDR_VAR 0 29
67887: PUSH
67888: LD_INT 4
67890: PUSH
67891: LD_INT 0
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 4
67900: PUSH
67901: LD_INT 1
67903: NEG
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 5
67911: PUSH
67912: LD_INT 0
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 5
67921: PUSH
67922: LD_INT 1
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 4
67931: PUSH
67932: LD_INT 1
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 3
67941: PUSH
67942: LD_INT 0
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 3
67951: PUSH
67952: LD_INT 1
67954: NEG
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 3
67962: PUSH
67963: LD_INT 2
67965: NEG
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 5
67973: PUSH
67974: LD_INT 2
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 3
67983: PUSH
67984: LD_INT 3
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 3
67993: PUSH
67994: LD_INT 2
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 4
68003: PUSH
68004: LD_INT 3
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 4
68013: PUSH
68014: LD_INT 4
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 3
68023: PUSH
68024: LD_INT 4
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 2
68033: PUSH
68034: LD_INT 3
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 2
68043: PUSH
68044: LD_INT 2
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 4
68053: PUSH
68054: LD_INT 2
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 2
68063: PUSH
68064: LD_INT 4
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 0
68073: PUSH
68074: LD_INT 4
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 0
68083: PUSH
68084: LD_INT 3
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 1
68093: PUSH
68094: LD_INT 4
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 1
68103: PUSH
68104: LD_INT 5
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 0
68113: PUSH
68114: LD_INT 5
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 1
68123: NEG
68124: PUSH
68125: LD_INT 4
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 1
68134: NEG
68135: PUSH
68136: LD_INT 3
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 2
68145: PUSH
68146: LD_INT 5
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 2
68155: NEG
68156: PUSH
68157: LD_INT 3
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 3
68166: NEG
68167: PUSH
68168: LD_INT 0
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 3
68177: NEG
68178: PUSH
68179: LD_INT 1
68181: NEG
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 2
68189: NEG
68190: PUSH
68191: LD_INT 0
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 2
68200: NEG
68201: PUSH
68202: LD_INT 1
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 3
68211: NEG
68212: PUSH
68213: LD_INT 1
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 4
68222: NEG
68223: PUSH
68224: LD_INT 0
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 4
68233: NEG
68234: PUSH
68235: LD_INT 1
68237: NEG
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 4
68245: NEG
68246: PUSH
68247: LD_INT 2
68249: NEG
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 2
68257: NEG
68258: PUSH
68259: LD_INT 2
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 4
68268: NEG
68269: PUSH
68270: LD_INT 4
68272: NEG
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 4
68280: NEG
68281: PUSH
68282: LD_INT 5
68284: NEG
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 3
68292: NEG
68293: PUSH
68294: LD_INT 4
68296: NEG
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 3
68304: NEG
68305: PUSH
68306: LD_INT 3
68308: NEG
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 4
68316: NEG
68317: PUSH
68318: LD_INT 3
68320: NEG
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 5
68328: NEG
68329: PUSH
68330: LD_INT 4
68332: NEG
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 5
68340: NEG
68341: PUSH
68342: LD_INT 5
68344: NEG
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 3
68352: NEG
68353: PUSH
68354: LD_INT 5
68356: NEG
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 5
68364: NEG
68365: PUSH
68366: LD_INT 3
68368: NEG
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68421: LD_ADDR_VAR 0 30
68425: PUSH
68426: LD_INT 4
68428: PUSH
68429: LD_INT 4
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 4
68438: PUSH
68439: LD_INT 3
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 5
68448: PUSH
68449: LD_INT 4
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 5
68458: PUSH
68459: LD_INT 5
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 4
68468: PUSH
68469: LD_INT 5
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 3
68478: PUSH
68479: LD_INT 4
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 3
68488: PUSH
68489: LD_INT 3
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PUSH
68496: LD_INT 5
68498: PUSH
68499: LD_INT 3
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 3
68508: PUSH
68509: LD_INT 5
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 0
68518: PUSH
68519: LD_INT 3
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 0
68528: PUSH
68529: LD_INT 2
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 1
68538: PUSH
68539: LD_INT 3
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 1
68548: PUSH
68549: LD_INT 4
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 0
68558: PUSH
68559: LD_INT 4
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 1
68568: NEG
68569: PUSH
68570: LD_INT 3
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: LD_INT 1
68579: NEG
68580: PUSH
68581: LD_INT 2
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 2
68590: PUSH
68591: LD_INT 4
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: LD_INT 2
68600: NEG
68601: PUSH
68602: LD_INT 2
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 4
68611: NEG
68612: PUSH
68613: LD_INT 0
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 4
68622: NEG
68623: PUSH
68624: LD_INT 1
68626: NEG
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 3
68634: NEG
68635: PUSH
68636: LD_INT 0
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 3
68645: NEG
68646: PUSH
68647: LD_INT 1
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 4
68656: NEG
68657: PUSH
68658: LD_INT 1
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 5
68667: NEG
68668: PUSH
68669: LD_INT 0
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 5
68678: NEG
68679: PUSH
68680: LD_INT 1
68682: NEG
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 5
68690: NEG
68691: PUSH
68692: LD_INT 2
68694: NEG
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 3
68702: NEG
68703: PUSH
68704: LD_INT 2
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 3
68713: NEG
68714: PUSH
68715: LD_INT 3
68717: NEG
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 3
68725: NEG
68726: PUSH
68727: LD_INT 4
68729: NEG
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 2
68737: NEG
68738: PUSH
68739: LD_INT 3
68741: NEG
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 2
68749: NEG
68750: PUSH
68751: LD_INT 2
68753: NEG
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 3
68761: NEG
68762: PUSH
68763: LD_INT 2
68765: NEG
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 4
68773: NEG
68774: PUSH
68775: LD_INT 3
68777: NEG
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 4
68785: NEG
68786: PUSH
68787: LD_INT 4
68789: NEG
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 2
68797: NEG
68798: PUSH
68799: LD_INT 4
68801: NEG
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 4
68809: NEG
68810: PUSH
68811: LD_INT 2
68813: NEG
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 0
68821: PUSH
68822: LD_INT 4
68824: NEG
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 0
68832: PUSH
68833: LD_INT 5
68835: NEG
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 1
68843: PUSH
68844: LD_INT 4
68846: NEG
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 1
68854: PUSH
68855: LD_INT 3
68857: NEG
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 0
68865: PUSH
68866: LD_INT 3
68868: NEG
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 1
68876: NEG
68877: PUSH
68878: LD_INT 4
68880: NEG
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 1
68888: NEG
68889: PUSH
68890: LD_INT 5
68892: NEG
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 2
68900: PUSH
68901: LD_INT 3
68903: NEG
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 2
68911: NEG
68912: PUSH
68913: LD_INT 5
68915: NEG
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68968: LD_ADDR_VAR 0 31
68972: PUSH
68973: LD_INT 0
68975: PUSH
68976: LD_INT 4
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 0
68985: PUSH
68986: LD_INT 3
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 1
68995: PUSH
68996: LD_INT 4
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 1
69005: PUSH
69006: LD_INT 5
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: PUSH
69013: LD_INT 0
69015: PUSH
69016: LD_INT 5
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: PUSH
69023: LD_INT 1
69025: NEG
69026: PUSH
69027: LD_INT 4
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 1
69036: NEG
69037: PUSH
69038: LD_INT 3
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: LD_INT 2
69047: PUSH
69048: LD_INT 5
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 2
69057: NEG
69058: PUSH
69059: LD_INT 3
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 3
69068: NEG
69069: PUSH
69070: LD_INT 0
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 3
69079: NEG
69080: PUSH
69081: LD_INT 1
69083: NEG
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 2
69091: NEG
69092: PUSH
69093: LD_INT 0
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 2
69102: NEG
69103: PUSH
69104: LD_INT 1
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 3
69113: NEG
69114: PUSH
69115: LD_INT 1
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 4
69124: NEG
69125: PUSH
69126: LD_INT 0
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 4
69135: NEG
69136: PUSH
69137: LD_INT 1
69139: NEG
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 4
69147: NEG
69148: PUSH
69149: LD_INT 2
69151: NEG
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 2
69159: NEG
69160: PUSH
69161: LD_INT 2
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 4
69170: NEG
69171: PUSH
69172: LD_INT 4
69174: NEG
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: PUSH
69180: LD_INT 4
69182: NEG
69183: PUSH
69184: LD_INT 5
69186: NEG
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 3
69194: NEG
69195: PUSH
69196: LD_INT 4
69198: NEG
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 3
69206: NEG
69207: PUSH
69208: LD_INT 3
69210: NEG
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 4
69218: NEG
69219: PUSH
69220: LD_INT 3
69222: NEG
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 5
69230: NEG
69231: PUSH
69232: LD_INT 4
69234: NEG
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 5
69242: NEG
69243: PUSH
69244: LD_INT 5
69246: NEG
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 3
69254: NEG
69255: PUSH
69256: LD_INT 5
69258: NEG
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 5
69266: NEG
69267: PUSH
69268: LD_INT 3
69270: NEG
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 0
69278: PUSH
69279: LD_INT 3
69281: NEG
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 0
69289: PUSH
69290: LD_INT 4
69292: NEG
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 1
69300: PUSH
69301: LD_INT 3
69303: NEG
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 1
69311: PUSH
69312: LD_INT 2
69314: NEG
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 0
69322: PUSH
69323: LD_INT 2
69325: NEG
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 1
69333: NEG
69334: PUSH
69335: LD_INT 3
69337: NEG
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PUSH
69343: LD_INT 1
69345: NEG
69346: PUSH
69347: LD_INT 4
69349: NEG
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 2
69357: PUSH
69358: LD_INT 2
69360: NEG
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 2
69368: NEG
69369: PUSH
69370: LD_INT 4
69372: NEG
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 4
69380: PUSH
69381: LD_INT 0
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 4
69390: PUSH
69391: LD_INT 1
69393: NEG
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 5
69401: PUSH
69402: LD_INT 0
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: LD_INT 5
69411: PUSH
69412: LD_INT 1
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 4
69421: PUSH
69422: LD_INT 1
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 3
69431: PUSH
69432: LD_INT 0
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 3
69441: PUSH
69442: LD_INT 1
69444: NEG
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 3
69452: PUSH
69453: LD_INT 2
69455: NEG
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 5
69463: PUSH
69464: LD_INT 2
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69518: LD_ADDR_VAR 0 32
69522: PUSH
69523: LD_INT 4
69525: NEG
69526: PUSH
69527: LD_INT 0
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 4
69536: NEG
69537: PUSH
69538: LD_INT 1
69540: NEG
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 3
69548: NEG
69549: PUSH
69550: LD_INT 0
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: LD_INT 3
69559: NEG
69560: PUSH
69561: LD_INT 1
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 4
69570: NEG
69571: PUSH
69572: LD_INT 1
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 5
69581: NEG
69582: PUSH
69583: LD_INT 0
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 5
69592: NEG
69593: PUSH
69594: LD_INT 1
69596: NEG
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: PUSH
69602: LD_INT 5
69604: NEG
69605: PUSH
69606: LD_INT 2
69608: NEG
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 3
69616: NEG
69617: PUSH
69618: LD_INT 2
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 3
69627: NEG
69628: PUSH
69629: LD_INT 3
69631: NEG
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 3
69639: NEG
69640: PUSH
69641: LD_INT 4
69643: NEG
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: LD_INT 2
69651: NEG
69652: PUSH
69653: LD_INT 3
69655: NEG
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: LD_INT 2
69663: NEG
69664: PUSH
69665: LD_INT 2
69667: NEG
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 3
69675: NEG
69676: PUSH
69677: LD_INT 2
69679: NEG
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 4
69687: NEG
69688: PUSH
69689: LD_INT 3
69691: NEG
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 4
69699: NEG
69700: PUSH
69701: LD_INT 4
69703: NEG
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 2
69711: NEG
69712: PUSH
69713: LD_INT 4
69715: NEG
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 4
69723: NEG
69724: PUSH
69725: LD_INT 2
69727: NEG
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: PUSH
69733: LD_INT 0
69735: PUSH
69736: LD_INT 4
69738: NEG
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PUSH
69744: LD_INT 0
69746: PUSH
69747: LD_INT 5
69749: NEG
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PUSH
69755: LD_INT 1
69757: PUSH
69758: LD_INT 4
69760: NEG
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 1
69768: PUSH
69769: LD_INT 3
69771: NEG
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 0
69779: PUSH
69780: LD_INT 3
69782: NEG
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 1
69790: NEG
69791: PUSH
69792: LD_INT 4
69794: NEG
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 1
69802: NEG
69803: PUSH
69804: LD_INT 5
69806: NEG
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 2
69814: PUSH
69815: LD_INT 3
69817: NEG
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 2
69825: NEG
69826: PUSH
69827: LD_INT 5
69829: NEG
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 3
69837: PUSH
69838: LD_INT 0
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 3
69847: PUSH
69848: LD_INT 1
69850: NEG
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 4
69858: PUSH
69859: LD_INT 0
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 4
69868: PUSH
69869: LD_INT 1
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 3
69878: PUSH
69879: LD_INT 1
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: LD_INT 2
69888: PUSH
69889: LD_INT 0
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 2
69898: PUSH
69899: LD_INT 1
69901: NEG
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 2
69909: PUSH
69910: LD_INT 2
69912: NEG
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 4
69920: PUSH
69921: LD_INT 2
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 4
69930: PUSH
69931: LD_INT 4
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 4
69940: PUSH
69941: LD_INT 3
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: LD_INT 5
69950: PUSH
69951: LD_INT 4
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 5
69960: PUSH
69961: LD_INT 5
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 4
69970: PUSH
69971: LD_INT 5
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 3
69980: PUSH
69981: LD_INT 4
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 3
69990: PUSH
69991: LD_INT 3
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 5
70000: PUSH
70001: LD_INT 3
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 3
70010: PUSH
70011: LD_INT 5
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70065: LD_ADDR_VAR 0 33
70069: PUSH
70070: LD_INT 4
70072: NEG
70073: PUSH
70074: LD_INT 4
70076: NEG
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 4
70084: NEG
70085: PUSH
70086: LD_INT 5
70088: NEG
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: LD_INT 3
70096: NEG
70097: PUSH
70098: LD_INT 4
70100: NEG
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: PUSH
70106: LD_INT 3
70108: NEG
70109: PUSH
70110: LD_INT 3
70112: NEG
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 4
70120: NEG
70121: PUSH
70122: LD_INT 3
70124: NEG
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 5
70132: NEG
70133: PUSH
70134: LD_INT 4
70136: NEG
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 5
70144: NEG
70145: PUSH
70146: LD_INT 5
70148: NEG
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: LD_INT 3
70156: NEG
70157: PUSH
70158: LD_INT 5
70160: NEG
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 5
70168: NEG
70169: PUSH
70170: LD_INT 3
70172: NEG
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: LD_INT 0
70180: PUSH
70181: LD_INT 3
70183: NEG
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 0
70191: PUSH
70192: LD_INT 4
70194: NEG
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 1
70202: PUSH
70203: LD_INT 3
70205: NEG
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 1
70213: PUSH
70214: LD_INT 2
70216: NEG
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 0
70224: PUSH
70225: LD_INT 2
70227: NEG
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 1
70235: NEG
70236: PUSH
70237: LD_INT 3
70239: NEG
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: LD_INT 1
70247: NEG
70248: PUSH
70249: LD_INT 4
70251: NEG
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: LD_INT 2
70259: PUSH
70260: LD_INT 2
70262: NEG
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 2
70270: NEG
70271: PUSH
70272: LD_INT 4
70274: NEG
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 4
70282: PUSH
70283: LD_INT 0
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 4
70292: PUSH
70293: LD_INT 1
70295: NEG
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 5
70303: PUSH
70304: LD_INT 0
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 5
70313: PUSH
70314: LD_INT 1
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 4
70323: PUSH
70324: LD_INT 1
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 3
70333: PUSH
70334: LD_INT 0
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 3
70343: PUSH
70344: LD_INT 1
70346: NEG
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 3
70354: PUSH
70355: LD_INT 2
70357: NEG
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 5
70365: PUSH
70366: LD_INT 2
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 3
70375: PUSH
70376: LD_INT 3
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 3
70385: PUSH
70386: LD_INT 2
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 4
70395: PUSH
70396: LD_INT 3
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 4
70405: PUSH
70406: LD_INT 4
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PUSH
70413: LD_INT 3
70415: PUSH
70416: LD_INT 4
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 2
70425: PUSH
70426: LD_INT 3
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 2
70435: PUSH
70436: LD_INT 2
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 4
70445: PUSH
70446: LD_INT 2
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 2
70455: PUSH
70456: LD_INT 4
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 0
70465: PUSH
70466: LD_INT 4
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 0
70475: PUSH
70476: LD_INT 3
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 1
70485: PUSH
70486: LD_INT 4
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 1
70495: PUSH
70496: LD_INT 5
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: LD_INT 0
70505: PUSH
70506: LD_INT 5
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: PUSH
70513: LD_INT 1
70515: NEG
70516: PUSH
70517: LD_INT 4
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PUSH
70524: LD_INT 1
70526: NEG
70527: PUSH
70528: LD_INT 3
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PUSH
70535: LD_INT 2
70537: PUSH
70538: LD_INT 5
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: LD_INT 2
70547: NEG
70548: PUSH
70549: LD_INT 3
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70603: LD_ADDR_VAR 0 34
70607: PUSH
70608: LD_INT 0
70610: PUSH
70611: LD_INT 4
70613: NEG
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 0
70621: PUSH
70622: LD_INT 5
70624: NEG
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 1
70632: PUSH
70633: LD_INT 4
70635: NEG
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 1
70643: PUSH
70644: LD_INT 3
70646: NEG
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: LD_INT 0
70654: PUSH
70655: LD_INT 3
70657: NEG
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 1
70665: NEG
70666: PUSH
70667: LD_INT 4
70669: NEG
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: PUSH
70675: LD_INT 1
70677: NEG
70678: PUSH
70679: LD_INT 5
70681: NEG
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: LD_INT 2
70689: PUSH
70690: LD_INT 3
70692: NEG
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: LD_INT 2
70700: NEG
70701: PUSH
70702: LD_INT 5
70704: NEG
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: PUSH
70710: LD_INT 3
70712: PUSH
70713: LD_INT 0
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: LD_INT 3
70722: PUSH
70723: LD_INT 1
70725: NEG
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 4
70733: PUSH
70734: LD_INT 0
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: PUSH
70741: LD_INT 4
70743: PUSH
70744: LD_INT 1
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 3
70753: PUSH
70754: LD_INT 1
70756: PUSH
70757: EMPTY
70758: LIST
70759: LIST
70760: PUSH
70761: LD_INT 2
70763: PUSH
70764: LD_INT 0
70766: PUSH
70767: EMPTY
70768: LIST
70769: LIST
70770: PUSH
70771: LD_INT 2
70773: PUSH
70774: LD_INT 1
70776: NEG
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 2
70784: PUSH
70785: LD_INT 2
70787: NEG
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: PUSH
70793: LD_INT 4
70795: PUSH
70796: LD_INT 2
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 4
70805: PUSH
70806: LD_INT 4
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 4
70815: PUSH
70816: LD_INT 3
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: LD_INT 5
70825: PUSH
70826: LD_INT 4
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 5
70835: PUSH
70836: LD_INT 5
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: PUSH
70843: LD_INT 4
70845: PUSH
70846: LD_INT 5
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PUSH
70853: LD_INT 3
70855: PUSH
70856: LD_INT 4
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_INT 3
70865: PUSH
70866: LD_INT 3
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: LD_INT 5
70875: PUSH
70876: LD_INT 3
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: LD_INT 3
70885: PUSH
70886: LD_INT 5
70888: PUSH
70889: EMPTY
70890: LIST
70891: LIST
70892: PUSH
70893: LD_INT 0
70895: PUSH
70896: LD_INT 3
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 0
70905: PUSH
70906: LD_INT 2
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 1
70915: PUSH
70916: LD_INT 3
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 1
70925: PUSH
70926: LD_INT 4
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 0
70935: PUSH
70936: LD_INT 4
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 1
70945: NEG
70946: PUSH
70947: LD_INT 3
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 1
70956: NEG
70957: PUSH
70958: LD_INT 2
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: LD_INT 2
70967: PUSH
70968: LD_INT 4
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: PUSH
70975: LD_INT 2
70977: NEG
70978: PUSH
70979: LD_INT 2
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: PUSH
70986: LD_INT 4
70988: NEG
70989: PUSH
70990: LD_INT 0
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: PUSH
70997: LD_INT 4
70999: NEG
71000: PUSH
71001: LD_INT 1
71003: NEG
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: PUSH
71009: LD_INT 3
71011: NEG
71012: PUSH
71013: LD_INT 0
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: LD_INT 3
71022: NEG
71023: PUSH
71024: LD_INT 1
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 4
71033: NEG
71034: PUSH
71035: LD_INT 1
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 5
71044: NEG
71045: PUSH
71046: LD_INT 0
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: PUSH
71053: LD_INT 5
71055: NEG
71056: PUSH
71057: LD_INT 1
71059: NEG
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 5
71067: NEG
71068: PUSH
71069: LD_INT 2
71071: NEG
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 3
71079: NEG
71080: PUSH
71081: LD_INT 2
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: LIST
71094: LIST
71095: LIST
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: ST_TO_ADDR
// end ; end ;
71135: GO 71138
71137: POP
// case btype of b_depot , b_warehouse :
71138: LD_VAR 0 1
71142: PUSH
71143: LD_INT 0
71145: DOUBLE
71146: EQUAL
71147: IFTRUE 71157
71149: LD_INT 1
71151: DOUBLE
71152: EQUAL
71153: IFTRUE 71157
71155: GO 71358
71157: POP
// case nation of nation_american :
71158: LD_VAR 0 5
71162: PUSH
71163: LD_INT 1
71165: DOUBLE
71166: EQUAL
71167: IFTRUE 71171
71169: GO 71227
71171: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71172: LD_ADDR_VAR 0 9
71176: PUSH
71177: LD_VAR 0 11
71181: PUSH
71182: LD_VAR 0 12
71186: PUSH
71187: LD_VAR 0 13
71191: PUSH
71192: LD_VAR 0 14
71196: PUSH
71197: LD_VAR 0 15
71201: PUSH
71202: LD_VAR 0 16
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: PUSH
71215: LD_VAR 0 4
71219: PUSH
71220: LD_INT 1
71222: PLUS
71223: ARRAY
71224: ST_TO_ADDR
71225: GO 71356
71227: LD_INT 2
71229: DOUBLE
71230: EQUAL
71231: IFTRUE 71235
71233: GO 71291
71235: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71236: LD_ADDR_VAR 0 9
71240: PUSH
71241: LD_VAR 0 17
71245: PUSH
71246: LD_VAR 0 18
71250: PUSH
71251: LD_VAR 0 19
71255: PUSH
71256: LD_VAR 0 20
71260: PUSH
71261: LD_VAR 0 21
71265: PUSH
71266: LD_VAR 0 22
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: PUSH
71279: LD_VAR 0 4
71283: PUSH
71284: LD_INT 1
71286: PLUS
71287: ARRAY
71288: ST_TO_ADDR
71289: GO 71356
71291: LD_INT 3
71293: DOUBLE
71294: EQUAL
71295: IFTRUE 71299
71297: GO 71355
71299: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71300: LD_ADDR_VAR 0 9
71304: PUSH
71305: LD_VAR 0 23
71309: PUSH
71310: LD_VAR 0 24
71314: PUSH
71315: LD_VAR 0 25
71319: PUSH
71320: LD_VAR 0 26
71324: PUSH
71325: LD_VAR 0 27
71329: PUSH
71330: LD_VAR 0 28
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: PUSH
71343: LD_VAR 0 4
71347: PUSH
71348: LD_INT 1
71350: PLUS
71351: ARRAY
71352: ST_TO_ADDR
71353: GO 71356
71355: POP
71356: GO 71911
71358: LD_INT 2
71360: DOUBLE
71361: EQUAL
71362: IFTRUE 71372
71364: LD_INT 3
71366: DOUBLE
71367: EQUAL
71368: IFTRUE 71372
71370: GO 71428
71372: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71373: LD_ADDR_VAR 0 9
71377: PUSH
71378: LD_VAR 0 29
71382: PUSH
71383: LD_VAR 0 30
71387: PUSH
71388: LD_VAR 0 31
71392: PUSH
71393: LD_VAR 0 32
71397: PUSH
71398: LD_VAR 0 33
71402: PUSH
71403: LD_VAR 0 34
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: PUSH
71416: LD_VAR 0 4
71420: PUSH
71421: LD_INT 1
71423: PLUS
71424: ARRAY
71425: ST_TO_ADDR
71426: GO 71911
71428: LD_INT 16
71430: DOUBLE
71431: EQUAL
71432: IFTRUE 71490
71434: LD_INT 17
71436: DOUBLE
71437: EQUAL
71438: IFTRUE 71490
71440: LD_INT 18
71442: DOUBLE
71443: EQUAL
71444: IFTRUE 71490
71446: LD_INT 19
71448: DOUBLE
71449: EQUAL
71450: IFTRUE 71490
71452: LD_INT 22
71454: DOUBLE
71455: EQUAL
71456: IFTRUE 71490
71458: LD_INT 20
71460: DOUBLE
71461: EQUAL
71462: IFTRUE 71490
71464: LD_INT 21
71466: DOUBLE
71467: EQUAL
71468: IFTRUE 71490
71470: LD_INT 23
71472: DOUBLE
71473: EQUAL
71474: IFTRUE 71490
71476: LD_INT 24
71478: DOUBLE
71479: EQUAL
71480: IFTRUE 71490
71482: LD_INT 25
71484: DOUBLE
71485: EQUAL
71486: IFTRUE 71490
71488: GO 71546
71490: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71491: LD_ADDR_VAR 0 9
71495: PUSH
71496: LD_VAR 0 35
71500: PUSH
71501: LD_VAR 0 36
71505: PUSH
71506: LD_VAR 0 37
71510: PUSH
71511: LD_VAR 0 38
71515: PUSH
71516: LD_VAR 0 39
71520: PUSH
71521: LD_VAR 0 40
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: PUSH
71534: LD_VAR 0 4
71538: PUSH
71539: LD_INT 1
71541: PLUS
71542: ARRAY
71543: ST_TO_ADDR
71544: GO 71911
71546: LD_INT 6
71548: DOUBLE
71549: EQUAL
71550: IFTRUE 71602
71552: LD_INT 7
71554: DOUBLE
71555: EQUAL
71556: IFTRUE 71602
71558: LD_INT 8
71560: DOUBLE
71561: EQUAL
71562: IFTRUE 71602
71564: LD_INT 13
71566: DOUBLE
71567: EQUAL
71568: IFTRUE 71602
71570: LD_INT 12
71572: DOUBLE
71573: EQUAL
71574: IFTRUE 71602
71576: LD_INT 15
71578: DOUBLE
71579: EQUAL
71580: IFTRUE 71602
71582: LD_INT 11
71584: DOUBLE
71585: EQUAL
71586: IFTRUE 71602
71588: LD_INT 14
71590: DOUBLE
71591: EQUAL
71592: IFTRUE 71602
71594: LD_INT 10
71596: DOUBLE
71597: EQUAL
71598: IFTRUE 71602
71600: GO 71658
71602: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71603: LD_ADDR_VAR 0 9
71607: PUSH
71608: LD_VAR 0 41
71612: PUSH
71613: LD_VAR 0 42
71617: PUSH
71618: LD_VAR 0 43
71622: PUSH
71623: LD_VAR 0 44
71627: PUSH
71628: LD_VAR 0 45
71632: PUSH
71633: LD_VAR 0 46
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: LIST
71642: LIST
71643: LIST
71644: LIST
71645: PUSH
71646: LD_VAR 0 4
71650: PUSH
71651: LD_INT 1
71653: PLUS
71654: ARRAY
71655: ST_TO_ADDR
71656: GO 71911
71658: LD_INT 36
71660: DOUBLE
71661: EQUAL
71662: IFTRUE 71666
71664: GO 71722
71666: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71667: LD_ADDR_VAR 0 9
71671: PUSH
71672: LD_VAR 0 47
71676: PUSH
71677: LD_VAR 0 48
71681: PUSH
71682: LD_VAR 0 49
71686: PUSH
71687: LD_VAR 0 50
71691: PUSH
71692: LD_VAR 0 51
71696: PUSH
71697: LD_VAR 0 52
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: PUSH
71710: LD_VAR 0 4
71714: PUSH
71715: LD_INT 1
71717: PLUS
71718: ARRAY
71719: ST_TO_ADDR
71720: GO 71911
71722: LD_INT 4
71724: DOUBLE
71725: EQUAL
71726: IFTRUE 71748
71728: LD_INT 5
71730: DOUBLE
71731: EQUAL
71732: IFTRUE 71748
71734: LD_INT 34
71736: DOUBLE
71737: EQUAL
71738: IFTRUE 71748
71740: LD_INT 37
71742: DOUBLE
71743: EQUAL
71744: IFTRUE 71748
71746: GO 71804
71748: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71749: LD_ADDR_VAR 0 9
71753: PUSH
71754: LD_VAR 0 53
71758: PUSH
71759: LD_VAR 0 54
71763: PUSH
71764: LD_VAR 0 55
71768: PUSH
71769: LD_VAR 0 56
71773: PUSH
71774: LD_VAR 0 57
71778: PUSH
71779: LD_VAR 0 58
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: LIST
71788: LIST
71789: LIST
71790: LIST
71791: PUSH
71792: LD_VAR 0 4
71796: PUSH
71797: LD_INT 1
71799: PLUS
71800: ARRAY
71801: ST_TO_ADDR
71802: GO 71911
71804: LD_INT 31
71806: DOUBLE
71807: EQUAL
71808: IFTRUE 71854
71810: LD_INT 32
71812: DOUBLE
71813: EQUAL
71814: IFTRUE 71854
71816: LD_INT 33
71818: DOUBLE
71819: EQUAL
71820: IFTRUE 71854
71822: LD_INT 27
71824: DOUBLE
71825: EQUAL
71826: IFTRUE 71854
71828: LD_INT 26
71830: DOUBLE
71831: EQUAL
71832: IFTRUE 71854
71834: LD_INT 28
71836: DOUBLE
71837: EQUAL
71838: IFTRUE 71854
71840: LD_INT 29
71842: DOUBLE
71843: EQUAL
71844: IFTRUE 71854
71846: LD_INT 30
71848: DOUBLE
71849: EQUAL
71850: IFTRUE 71854
71852: GO 71910
71854: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71855: LD_ADDR_VAR 0 9
71859: PUSH
71860: LD_VAR 0 59
71864: PUSH
71865: LD_VAR 0 60
71869: PUSH
71870: LD_VAR 0 61
71874: PUSH
71875: LD_VAR 0 62
71879: PUSH
71880: LD_VAR 0 63
71884: PUSH
71885: LD_VAR 0 64
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: PUSH
71898: LD_VAR 0 4
71902: PUSH
71903: LD_INT 1
71905: PLUS
71906: ARRAY
71907: ST_TO_ADDR
71908: GO 71911
71910: POP
// temp_list2 = [ ] ;
71911: LD_ADDR_VAR 0 10
71915: PUSH
71916: EMPTY
71917: ST_TO_ADDR
// for i in temp_list do
71918: LD_ADDR_VAR 0 8
71922: PUSH
71923: LD_VAR 0 9
71927: PUSH
71928: FOR_IN
71929: IFFALSE 71981
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71931: LD_ADDR_VAR 0 10
71935: PUSH
71936: LD_VAR 0 10
71940: PUSH
71941: LD_VAR 0 8
71945: PUSH
71946: LD_INT 1
71948: ARRAY
71949: PUSH
71950: LD_VAR 0 2
71954: PLUS
71955: PUSH
71956: LD_VAR 0 8
71960: PUSH
71961: LD_INT 2
71963: ARRAY
71964: PUSH
71965: LD_VAR 0 3
71969: PLUS
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: PUSH
71975: EMPTY
71976: LIST
71977: ADD
71978: ST_TO_ADDR
71979: GO 71928
71981: POP
71982: POP
// result = temp_list2 ;
71983: LD_ADDR_VAR 0 7
71987: PUSH
71988: LD_VAR 0 10
71992: ST_TO_ADDR
// end ;
71993: LD_VAR 0 7
71997: RET
// export function EnemyInRange ( unit , dist ) ; begin
71998: LD_INT 0
72000: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72001: LD_ADDR_VAR 0 3
72005: PUSH
72006: LD_VAR 0 1
72010: PPUSH
72011: CALL_OW 255
72015: PPUSH
72016: LD_VAR 0 1
72020: PPUSH
72021: CALL_OW 250
72025: PPUSH
72026: LD_VAR 0 1
72030: PPUSH
72031: CALL_OW 251
72035: PPUSH
72036: LD_VAR 0 2
72040: PPUSH
72041: CALL 45400 0 4
72045: PUSH
72046: LD_INT 4
72048: ARRAY
72049: ST_TO_ADDR
// end ;
72050: LD_VAR 0 3
72054: RET
// export function PlayerSeeMe ( unit ) ; begin
72055: LD_INT 0
72057: PPUSH
// result := See ( your_side , unit ) ;
72058: LD_ADDR_VAR 0 2
72062: PUSH
72063: LD_OWVAR 2
72067: PPUSH
72068: LD_VAR 0 1
72072: PPUSH
72073: CALL_OW 292
72077: ST_TO_ADDR
// end ;
72078: LD_VAR 0 2
72082: RET
// export function ReverseDir ( unit ) ; begin
72083: LD_INT 0
72085: PPUSH
// if not unit then
72086: LD_VAR 0 1
72090: NOT
72091: IFFALSE 72095
// exit ;
72093: GO 72118
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72095: LD_ADDR_VAR 0 2
72099: PUSH
72100: LD_VAR 0 1
72104: PPUSH
72105: CALL_OW 254
72109: PUSH
72110: LD_INT 3
72112: PLUS
72113: PUSH
72114: LD_INT 6
72116: MOD
72117: ST_TO_ADDR
// end ;
72118: LD_VAR 0 2
72122: RET
// export function ReverseArray ( array ) ; var i ; begin
72123: LD_INT 0
72125: PPUSH
72126: PPUSH
// if not array then
72127: LD_VAR 0 1
72131: NOT
72132: IFFALSE 72136
// exit ;
72134: GO 72191
// result := [ ] ;
72136: LD_ADDR_VAR 0 2
72140: PUSH
72141: EMPTY
72142: ST_TO_ADDR
// for i := array downto 1 do
72143: LD_ADDR_VAR 0 3
72147: PUSH
72148: DOUBLE
72149: LD_VAR 0 1
72153: INC
72154: ST_TO_ADDR
72155: LD_INT 1
72157: PUSH
72158: FOR_DOWNTO
72159: IFFALSE 72189
// result := Join ( result , array [ i ] ) ;
72161: LD_ADDR_VAR 0 2
72165: PUSH
72166: LD_VAR 0 2
72170: PPUSH
72171: LD_VAR 0 1
72175: PUSH
72176: LD_VAR 0 3
72180: ARRAY
72181: PPUSH
72182: CALL 76816 0 2
72186: ST_TO_ADDR
72187: GO 72158
72189: POP
72190: POP
// end ;
72191: LD_VAR 0 2
72195: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72196: LD_INT 0
72198: PPUSH
72199: PPUSH
72200: PPUSH
72201: PPUSH
72202: PPUSH
72203: PPUSH
// if not unit or not hexes then
72204: LD_VAR 0 1
72208: NOT
72209: PUSH
72210: LD_VAR 0 2
72214: NOT
72215: OR
72216: IFFALSE 72220
// exit ;
72218: GO 72343
// dist := 9999 ;
72220: LD_ADDR_VAR 0 5
72224: PUSH
72225: LD_INT 9999
72227: ST_TO_ADDR
// for i = 1 to hexes do
72228: LD_ADDR_VAR 0 4
72232: PUSH
72233: DOUBLE
72234: LD_INT 1
72236: DEC
72237: ST_TO_ADDR
72238: LD_VAR 0 2
72242: PUSH
72243: FOR_TO
72244: IFFALSE 72331
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72246: LD_ADDR_VAR 0 6
72250: PUSH
72251: LD_VAR 0 1
72255: PPUSH
72256: LD_VAR 0 2
72260: PUSH
72261: LD_VAR 0 4
72265: ARRAY
72266: PUSH
72267: LD_INT 1
72269: ARRAY
72270: PPUSH
72271: LD_VAR 0 2
72275: PUSH
72276: LD_VAR 0 4
72280: ARRAY
72281: PUSH
72282: LD_INT 2
72284: ARRAY
72285: PPUSH
72286: CALL_OW 297
72290: ST_TO_ADDR
// if tdist < dist then
72291: LD_VAR 0 6
72295: PUSH
72296: LD_VAR 0 5
72300: LESS
72301: IFFALSE 72329
// begin hex := hexes [ i ] ;
72303: LD_ADDR_VAR 0 8
72307: PUSH
72308: LD_VAR 0 2
72312: PUSH
72313: LD_VAR 0 4
72317: ARRAY
72318: ST_TO_ADDR
// dist := tdist ;
72319: LD_ADDR_VAR 0 5
72323: PUSH
72324: LD_VAR 0 6
72328: ST_TO_ADDR
// end ; end ;
72329: GO 72243
72331: POP
72332: POP
// result := hex ;
72333: LD_ADDR_VAR 0 3
72337: PUSH
72338: LD_VAR 0 8
72342: ST_TO_ADDR
// end ;
72343: LD_VAR 0 3
72347: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72348: LD_INT 0
72350: PPUSH
72351: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72352: LD_VAR 0 1
72356: NOT
72357: PUSH
72358: LD_VAR 0 1
72362: PUSH
72363: LD_INT 21
72365: PUSH
72366: LD_INT 2
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: PUSH
72373: LD_INT 23
72375: PUSH
72376: LD_INT 2
72378: PUSH
72379: EMPTY
72380: LIST
72381: LIST
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: PPUSH
72387: CALL_OW 69
72391: IN
72392: NOT
72393: OR
72394: IFFALSE 72398
// exit ;
72396: GO 72445
// for i = 1 to 3 do
72398: LD_ADDR_VAR 0 3
72402: PUSH
72403: DOUBLE
72404: LD_INT 1
72406: DEC
72407: ST_TO_ADDR
72408: LD_INT 3
72410: PUSH
72411: FOR_TO
72412: IFFALSE 72443
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72414: LD_VAR 0 1
72418: PPUSH
72419: CALL_OW 250
72423: PPUSH
72424: LD_VAR 0 1
72428: PPUSH
72429: CALL_OW 251
72433: PPUSH
72434: LD_INT 1
72436: PPUSH
72437: CALL_OW 453
72441: GO 72411
72443: POP
72444: POP
// end ;
72445: LD_VAR 0 2
72449: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72450: LD_INT 0
72452: PPUSH
72453: PPUSH
72454: PPUSH
72455: PPUSH
72456: PPUSH
72457: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72458: LD_VAR 0 1
72462: NOT
72463: PUSH
72464: LD_VAR 0 2
72468: NOT
72469: OR
72470: PUSH
72471: LD_VAR 0 1
72475: PPUSH
72476: CALL_OW 314
72480: OR
72481: IFFALSE 72485
// exit ;
72483: GO 72926
// x := GetX ( enemy_unit ) ;
72485: LD_ADDR_VAR 0 7
72489: PUSH
72490: LD_VAR 0 2
72494: PPUSH
72495: CALL_OW 250
72499: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72500: LD_ADDR_VAR 0 8
72504: PUSH
72505: LD_VAR 0 2
72509: PPUSH
72510: CALL_OW 251
72514: ST_TO_ADDR
// if not x or not y then
72515: LD_VAR 0 7
72519: NOT
72520: PUSH
72521: LD_VAR 0 8
72525: NOT
72526: OR
72527: IFFALSE 72531
// exit ;
72529: GO 72926
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72531: LD_ADDR_VAR 0 6
72535: PUSH
72536: LD_VAR 0 7
72540: PPUSH
72541: LD_INT 0
72543: PPUSH
72544: LD_INT 4
72546: PPUSH
72547: CALL_OW 272
72551: PUSH
72552: LD_VAR 0 8
72556: PPUSH
72557: LD_INT 0
72559: PPUSH
72560: LD_INT 4
72562: PPUSH
72563: CALL_OW 273
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: PUSH
72572: LD_VAR 0 7
72576: PPUSH
72577: LD_INT 1
72579: PPUSH
72580: LD_INT 4
72582: PPUSH
72583: CALL_OW 272
72587: PUSH
72588: LD_VAR 0 8
72592: PPUSH
72593: LD_INT 1
72595: PPUSH
72596: LD_INT 4
72598: PPUSH
72599: CALL_OW 273
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: LD_VAR 0 7
72612: PPUSH
72613: LD_INT 2
72615: PPUSH
72616: LD_INT 4
72618: PPUSH
72619: CALL_OW 272
72623: PUSH
72624: LD_VAR 0 8
72628: PPUSH
72629: LD_INT 2
72631: PPUSH
72632: LD_INT 4
72634: PPUSH
72635: CALL_OW 273
72639: PUSH
72640: EMPTY
72641: LIST
72642: LIST
72643: PUSH
72644: LD_VAR 0 7
72648: PPUSH
72649: LD_INT 3
72651: PPUSH
72652: LD_INT 4
72654: PPUSH
72655: CALL_OW 272
72659: PUSH
72660: LD_VAR 0 8
72664: PPUSH
72665: LD_INT 3
72667: PPUSH
72668: LD_INT 4
72670: PPUSH
72671: CALL_OW 273
72675: PUSH
72676: EMPTY
72677: LIST
72678: LIST
72679: PUSH
72680: LD_VAR 0 7
72684: PPUSH
72685: LD_INT 4
72687: PPUSH
72688: LD_INT 4
72690: PPUSH
72691: CALL_OW 272
72695: PUSH
72696: LD_VAR 0 8
72700: PPUSH
72701: LD_INT 4
72703: PPUSH
72704: LD_INT 4
72706: PPUSH
72707: CALL_OW 273
72711: PUSH
72712: EMPTY
72713: LIST
72714: LIST
72715: PUSH
72716: LD_VAR 0 7
72720: PPUSH
72721: LD_INT 5
72723: PPUSH
72724: LD_INT 4
72726: PPUSH
72727: CALL_OW 272
72731: PUSH
72732: LD_VAR 0 8
72736: PPUSH
72737: LD_INT 5
72739: PPUSH
72740: LD_INT 4
72742: PPUSH
72743: CALL_OW 273
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: ST_TO_ADDR
// for i = tmp downto 1 do
72760: LD_ADDR_VAR 0 4
72764: PUSH
72765: DOUBLE
72766: LD_VAR 0 6
72770: INC
72771: ST_TO_ADDR
72772: LD_INT 1
72774: PUSH
72775: FOR_DOWNTO
72776: IFFALSE 72877
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72778: LD_VAR 0 6
72782: PUSH
72783: LD_VAR 0 4
72787: ARRAY
72788: PUSH
72789: LD_INT 1
72791: ARRAY
72792: PPUSH
72793: LD_VAR 0 6
72797: PUSH
72798: LD_VAR 0 4
72802: ARRAY
72803: PUSH
72804: LD_INT 2
72806: ARRAY
72807: PPUSH
72808: CALL_OW 488
72812: NOT
72813: PUSH
72814: LD_VAR 0 6
72818: PUSH
72819: LD_VAR 0 4
72823: ARRAY
72824: PUSH
72825: LD_INT 1
72827: ARRAY
72828: PPUSH
72829: LD_VAR 0 6
72833: PUSH
72834: LD_VAR 0 4
72838: ARRAY
72839: PUSH
72840: LD_INT 2
72842: ARRAY
72843: PPUSH
72844: CALL_OW 428
72848: PUSH
72849: LD_INT 0
72851: NONEQUAL
72852: OR
72853: IFFALSE 72875
// tmp := Delete ( tmp , i ) ;
72855: LD_ADDR_VAR 0 6
72859: PUSH
72860: LD_VAR 0 6
72864: PPUSH
72865: LD_VAR 0 4
72869: PPUSH
72870: CALL_OW 3
72874: ST_TO_ADDR
72875: GO 72775
72877: POP
72878: POP
// j := GetClosestHex ( unit , tmp ) ;
72879: LD_ADDR_VAR 0 5
72883: PUSH
72884: LD_VAR 0 1
72888: PPUSH
72889: LD_VAR 0 6
72893: PPUSH
72894: CALL 72196 0 2
72898: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72899: LD_VAR 0 1
72903: PPUSH
72904: LD_VAR 0 5
72908: PUSH
72909: LD_INT 1
72911: ARRAY
72912: PPUSH
72913: LD_VAR 0 5
72917: PUSH
72918: LD_INT 2
72920: ARRAY
72921: PPUSH
72922: CALL_OW 111
// end ;
72926: LD_VAR 0 3
72930: RET
// export function PrepareApemanSoldier ( ) ; begin
72931: LD_INT 0
72933: PPUSH
// uc_nation := 0 ;
72934: LD_ADDR_OWVAR 21
72938: PUSH
72939: LD_INT 0
72941: ST_TO_ADDR
// hc_sex := sex_male ;
72942: LD_ADDR_OWVAR 27
72946: PUSH
72947: LD_INT 1
72949: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72950: LD_ADDR_OWVAR 28
72954: PUSH
72955: LD_INT 15
72957: ST_TO_ADDR
// hc_gallery :=  ;
72958: LD_ADDR_OWVAR 33
72962: PUSH
72963: LD_STRING 
72965: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72966: LD_ADDR_OWVAR 31
72970: PUSH
72971: LD_INT 0
72973: PPUSH
72974: LD_INT 3
72976: PPUSH
72977: CALL_OW 12
72981: PUSH
72982: LD_INT 0
72984: PPUSH
72985: LD_INT 3
72987: PPUSH
72988: CALL_OW 12
72992: PUSH
72993: LD_INT 0
72995: PUSH
72996: LD_INT 0
72998: PUSH
72999: EMPTY
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: ST_TO_ADDR
// end ;
73005: LD_VAR 0 1
73009: RET
// export function PrepareApemanEngineer ( ) ; begin
73010: LD_INT 0
73012: PPUSH
// uc_nation := 0 ;
73013: LD_ADDR_OWVAR 21
73017: PUSH
73018: LD_INT 0
73020: ST_TO_ADDR
// hc_sex := sex_male ;
73021: LD_ADDR_OWVAR 27
73025: PUSH
73026: LD_INT 1
73028: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73029: LD_ADDR_OWVAR 28
73033: PUSH
73034: LD_INT 16
73036: ST_TO_ADDR
// hc_gallery :=  ;
73037: LD_ADDR_OWVAR 33
73041: PUSH
73042: LD_STRING 
73044: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73045: LD_ADDR_OWVAR 31
73049: PUSH
73050: LD_INT 0
73052: PPUSH
73053: LD_INT 3
73055: PPUSH
73056: CALL_OW 12
73060: PUSH
73061: LD_INT 0
73063: PPUSH
73064: LD_INT 3
73066: PPUSH
73067: CALL_OW 12
73071: PUSH
73072: LD_INT 0
73074: PUSH
73075: LD_INT 0
73077: PUSH
73078: EMPTY
73079: LIST
73080: LIST
73081: LIST
73082: LIST
73083: ST_TO_ADDR
// end ;
73084: LD_VAR 0 1
73088: RET
// export function PrepareApeman ( agressivity ) ; begin
73089: LD_INT 0
73091: PPUSH
// uc_side := 0 ;
73092: LD_ADDR_OWVAR 20
73096: PUSH
73097: LD_INT 0
73099: ST_TO_ADDR
// uc_nation := 0 ;
73100: LD_ADDR_OWVAR 21
73104: PUSH
73105: LD_INT 0
73107: ST_TO_ADDR
// hc_sex := sex_male ;
73108: LD_ADDR_OWVAR 27
73112: PUSH
73113: LD_INT 1
73115: ST_TO_ADDR
// hc_class := class_apeman ;
73116: LD_ADDR_OWVAR 28
73120: PUSH
73121: LD_INT 12
73123: ST_TO_ADDR
// hc_gallery :=  ;
73124: LD_ADDR_OWVAR 33
73128: PUSH
73129: LD_STRING 
73131: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73132: LD_ADDR_OWVAR 35
73136: PUSH
73137: LD_VAR 0 1
73141: NEG
73142: PPUSH
73143: LD_VAR 0 1
73147: PPUSH
73148: CALL_OW 12
73152: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73153: LD_ADDR_OWVAR 31
73157: PUSH
73158: LD_INT 0
73160: PPUSH
73161: LD_INT 3
73163: PPUSH
73164: CALL_OW 12
73168: PUSH
73169: LD_INT 0
73171: PPUSH
73172: LD_INT 3
73174: PPUSH
73175: CALL_OW 12
73179: PUSH
73180: LD_INT 0
73182: PUSH
73183: LD_INT 0
73185: PUSH
73186: EMPTY
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: ST_TO_ADDR
// end ;
73192: LD_VAR 0 2
73196: RET
// export function PrepareTiger ( agressivity ) ; begin
73197: LD_INT 0
73199: PPUSH
// uc_side := 0 ;
73200: LD_ADDR_OWVAR 20
73204: PUSH
73205: LD_INT 0
73207: ST_TO_ADDR
// uc_nation := 0 ;
73208: LD_ADDR_OWVAR 21
73212: PUSH
73213: LD_INT 0
73215: ST_TO_ADDR
// hc_class := class_tiger ;
73216: LD_ADDR_OWVAR 28
73220: PUSH
73221: LD_INT 14
73223: ST_TO_ADDR
// hc_gallery :=  ;
73224: LD_ADDR_OWVAR 33
73228: PUSH
73229: LD_STRING 
73231: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73232: LD_ADDR_OWVAR 35
73236: PUSH
73237: LD_VAR 0 1
73241: NEG
73242: PPUSH
73243: LD_VAR 0 1
73247: PPUSH
73248: CALL_OW 12
73252: ST_TO_ADDR
// end ;
73253: LD_VAR 0 2
73257: RET
// export function PrepareEnchidna ( ) ; begin
73258: LD_INT 0
73260: PPUSH
// uc_side := 0 ;
73261: LD_ADDR_OWVAR 20
73265: PUSH
73266: LD_INT 0
73268: ST_TO_ADDR
// uc_nation := 0 ;
73269: LD_ADDR_OWVAR 21
73273: PUSH
73274: LD_INT 0
73276: ST_TO_ADDR
// hc_class := class_baggie ;
73277: LD_ADDR_OWVAR 28
73281: PUSH
73282: LD_INT 13
73284: ST_TO_ADDR
// hc_gallery :=  ;
73285: LD_ADDR_OWVAR 33
73289: PUSH
73290: LD_STRING 
73292: ST_TO_ADDR
// end ;
73293: LD_VAR 0 1
73297: RET
// export function PrepareFrog ( ) ; begin
73298: LD_INT 0
73300: PPUSH
// uc_side := 0 ;
73301: LD_ADDR_OWVAR 20
73305: PUSH
73306: LD_INT 0
73308: ST_TO_ADDR
// uc_nation := 0 ;
73309: LD_ADDR_OWVAR 21
73313: PUSH
73314: LD_INT 0
73316: ST_TO_ADDR
// hc_class := class_frog ;
73317: LD_ADDR_OWVAR 28
73321: PUSH
73322: LD_INT 19
73324: ST_TO_ADDR
// hc_gallery :=  ;
73325: LD_ADDR_OWVAR 33
73329: PUSH
73330: LD_STRING 
73332: ST_TO_ADDR
// end ;
73333: LD_VAR 0 1
73337: RET
// export function PrepareFish ( ) ; begin
73338: LD_INT 0
73340: PPUSH
// uc_side := 0 ;
73341: LD_ADDR_OWVAR 20
73345: PUSH
73346: LD_INT 0
73348: ST_TO_ADDR
// uc_nation := 0 ;
73349: LD_ADDR_OWVAR 21
73353: PUSH
73354: LD_INT 0
73356: ST_TO_ADDR
// hc_class := class_fish ;
73357: LD_ADDR_OWVAR 28
73361: PUSH
73362: LD_INT 20
73364: ST_TO_ADDR
// hc_gallery :=  ;
73365: LD_ADDR_OWVAR 33
73369: PUSH
73370: LD_STRING 
73372: ST_TO_ADDR
// end ;
73373: LD_VAR 0 1
73377: RET
// export function PrepareBird ( ) ; begin
73378: LD_INT 0
73380: PPUSH
// uc_side := 0 ;
73381: LD_ADDR_OWVAR 20
73385: PUSH
73386: LD_INT 0
73388: ST_TO_ADDR
// uc_nation := 0 ;
73389: LD_ADDR_OWVAR 21
73393: PUSH
73394: LD_INT 0
73396: ST_TO_ADDR
// hc_class := class_phororhacos ;
73397: LD_ADDR_OWVAR 28
73401: PUSH
73402: LD_INT 18
73404: ST_TO_ADDR
// hc_gallery :=  ;
73405: LD_ADDR_OWVAR 33
73409: PUSH
73410: LD_STRING 
73412: ST_TO_ADDR
// end ;
73413: LD_VAR 0 1
73417: RET
// export function PrepareHorse ( ) ; begin
73418: LD_INT 0
73420: PPUSH
// uc_side := 0 ;
73421: LD_ADDR_OWVAR 20
73425: PUSH
73426: LD_INT 0
73428: ST_TO_ADDR
// uc_nation := 0 ;
73429: LD_ADDR_OWVAR 21
73433: PUSH
73434: LD_INT 0
73436: ST_TO_ADDR
// hc_class := class_horse ;
73437: LD_ADDR_OWVAR 28
73441: PUSH
73442: LD_INT 21
73444: ST_TO_ADDR
// hc_gallery :=  ;
73445: LD_ADDR_OWVAR 33
73449: PUSH
73450: LD_STRING 
73452: ST_TO_ADDR
// end ;
73453: LD_VAR 0 1
73457: RET
// export function PrepareMastodont ( ) ; begin
73458: LD_INT 0
73460: PPUSH
// uc_side := 0 ;
73461: LD_ADDR_OWVAR 20
73465: PUSH
73466: LD_INT 0
73468: ST_TO_ADDR
// uc_nation := 0 ;
73469: LD_ADDR_OWVAR 21
73473: PUSH
73474: LD_INT 0
73476: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73477: LD_ADDR_OWVAR 37
73481: PUSH
73482: LD_INT 31
73484: ST_TO_ADDR
// vc_control := control_rider ;
73485: LD_ADDR_OWVAR 38
73489: PUSH
73490: LD_INT 4
73492: ST_TO_ADDR
// end ;
73493: LD_VAR 0 1
73497: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73498: LD_INT 0
73500: PPUSH
73501: PPUSH
73502: PPUSH
// uc_side = 0 ;
73503: LD_ADDR_OWVAR 20
73507: PUSH
73508: LD_INT 0
73510: ST_TO_ADDR
// uc_nation = 0 ;
73511: LD_ADDR_OWVAR 21
73515: PUSH
73516: LD_INT 0
73518: ST_TO_ADDR
// InitHc_All ( ) ;
73519: CALL_OW 584
// InitVc ;
73523: CALL_OW 20
// if mastodonts then
73527: LD_VAR 0 6
73531: IFFALSE 73598
// for i = 1 to mastodonts do
73533: LD_ADDR_VAR 0 11
73537: PUSH
73538: DOUBLE
73539: LD_INT 1
73541: DEC
73542: ST_TO_ADDR
73543: LD_VAR 0 6
73547: PUSH
73548: FOR_TO
73549: IFFALSE 73596
// begin vc_chassis := 31 ;
73551: LD_ADDR_OWVAR 37
73555: PUSH
73556: LD_INT 31
73558: ST_TO_ADDR
// vc_control := control_rider ;
73559: LD_ADDR_OWVAR 38
73563: PUSH
73564: LD_INT 4
73566: ST_TO_ADDR
// animal := CreateVehicle ;
73567: LD_ADDR_VAR 0 12
73571: PUSH
73572: CALL_OW 45
73576: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73577: LD_VAR 0 12
73581: PPUSH
73582: LD_VAR 0 8
73586: PPUSH
73587: LD_INT 0
73589: PPUSH
73590: CALL 75733 0 3
// end ;
73594: GO 73548
73596: POP
73597: POP
// if horses then
73598: LD_VAR 0 5
73602: IFFALSE 73669
// for i = 1 to horses do
73604: LD_ADDR_VAR 0 11
73608: PUSH
73609: DOUBLE
73610: LD_INT 1
73612: DEC
73613: ST_TO_ADDR
73614: LD_VAR 0 5
73618: PUSH
73619: FOR_TO
73620: IFFALSE 73667
// begin hc_class := 21 ;
73622: LD_ADDR_OWVAR 28
73626: PUSH
73627: LD_INT 21
73629: ST_TO_ADDR
// hc_gallery :=  ;
73630: LD_ADDR_OWVAR 33
73634: PUSH
73635: LD_STRING 
73637: ST_TO_ADDR
// animal := CreateHuman ;
73638: LD_ADDR_VAR 0 12
73642: PUSH
73643: CALL_OW 44
73647: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73648: LD_VAR 0 12
73652: PPUSH
73653: LD_VAR 0 8
73657: PPUSH
73658: LD_INT 0
73660: PPUSH
73661: CALL 75733 0 3
// end ;
73665: GO 73619
73667: POP
73668: POP
// if birds then
73669: LD_VAR 0 1
73673: IFFALSE 73740
// for i = 1 to birds do
73675: LD_ADDR_VAR 0 11
73679: PUSH
73680: DOUBLE
73681: LD_INT 1
73683: DEC
73684: ST_TO_ADDR
73685: LD_VAR 0 1
73689: PUSH
73690: FOR_TO
73691: IFFALSE 73738
// begin hc_class = 18 ;
73693: LD_ADDR_OWVAR 28
73697: PUSH
73698: LD_INT 18
73700: ST_TO_ADDR
// hc_gallery =  ;
73701: LD_ADDR_OWVAR 33
73705: PUSH
73706: LD_STRING 
73708: ST_TO_ADDR
// animal := CreateHuman ;
73709: LD_ADDR_VAR 0 12
73713: PUSH
73714: CALL_OW 44
73718: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73719: LD_VAR 0 12
73723: PPUSH
73724: LD_VAR 0 8
73728: PPUSH
73729: LD_INT 0
73731: PPUSH
73732: CALL 75733 0 3
// end ;
73736: GO 73690
73738: POP
73739: POP
// if tigers then
73740: LD_VAR 0 2
73744: IFFALSE 73828
// for i = 1 to tigers do
73746: LD_ADDR_VAR 0 11
73750: PUSH
73751: DOUBLE
73752: LD_INT 1
73754: DEC
73755: ST_TO_ADDR
73756: LD_VAR 0 2
73760: PUSH
73761: FOR_TO
73762: IFFALSE 73826
// begin hc_class = class_tiger ;
73764: LD_ADDR_OWVAR 28
73768: PUSH
73769: LD_INT 14
73771: ST_TO_ADDR
// hc_gallery =  ;
73772: LD_ADDR_OWVAR 33
73776: PUSH
73777: LD_STRING 
73779: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73780: LD_ADDR_OWVAR 35
73784: PUSH
73785: LD_INT 7
73787: NEG
73788: PPUSH
73789: LD_INT 7
73791: PPUSH
73792: CALL_OW 12
73796: ST_TO_ADDR
// animal := CreateHuman ;
73797: LD_ADDR_VAR 0 12
73801: PUSH
73802: CALL_OW 44
73806: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73807: LD_VAR 0 12
73811: PPUSH
73812: LD_VAR 0 8
73816: PPUSH
73817: LD_INT 0
73819: PPUSH
73820: CALL 75733 0 3
// end ;
73824: GO 73761
73826: POP
73827: POP
// if apemans then
73828: LD_VAR 0 3
73832: IFFALSE 73955
// for i = 1 to apemans do
73834: LD_ADDR_VAR 0 11
73838: PUSH
73839: DOUBLE
73840: LD_INT 1
73842: DEC
73843: ST_TO_ADDR
73844: LD_VAR 0 3
73848: PUSH
73849: FOR_TO
73850: IFFALSE 73953
// begin hc_class = class_apeman ;
73852: LD_ADDR_OWVAR 28
73856: PUSH
73857: LD_INT 12
73859: ST_TO_ADDR
// hc_gallery =  ;
73860: LD_ADDR_OWVAR 33
73864: PUSH
73865: LD_STRING 
73867: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73868: LD_ADDR_OWVAR 35
73872: PUSH
73873: LD_INT 2
73875: NEG
73876: PPUSH
73877: LD_INT 2
73879: PPUSH
73880: CALL_OW 12
73884: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73885: LD_ADDR_OWVAR 31
73889: PUSH
73890: LD_INT 1
73892: PPUSH
73893: LD_INT 3
73895: PPUSH
73896: CALL_OW 12
73900: PUSH
73901: LD_INT 1
73903: PPUSH
73904: LD_INT 3
73906: PPUSH
73907: CALL_OW 12
73911: PUSH
73912: LD_INT 0
73914: PUSH
73915: LD_INT 0
73917: PUSH
73918: EMPTY
73919: LIST
73920: LIST
73921: LIST
73922: LIST
73923: ST_TO_ADDR
// animal := CreateHuman ;
73924: LD_ADDR_VAR 0 12
73928: PUSH
73929: CALL_OW 44
73933: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73934: LD_VAR 0 12
73938: PPUSH
73939: LD_VAR 0 8
73943: PPUSH
73944: LD_INT 0
73946: PPUSH
73947: CALL 75733 0 3
// end ;
73951: GO 73849
73953: POP
73954: POP
// if enchidnas then
73955: LD_VAR 0 4
73959: IFFALSE 74026
// for i = 1 to enchidnas do
73961: LD_ADDR_VAR 0 11
73965: PUSH
73966: DOUBLE
73967: LD_INT 1
73969: DEC
73970: ST_TO_ADDR
73971: LD_VAR 0 4
73975: PUSH
73976: FOR_TO
73977: IFFALSE 74024
// begin hc_class = 13 ;
73979: LD_ADDR_OWVAR 28
73983: PUSH
73984: LD_INT 13
73986: ST_TO_ADDR
// hc_gallery =  ;
73987: LD_ADDR_OWVAR 33
73991: PUSH
73992: LD_STRING 
73994: ST_TO_ADDR
// animal := CreateHuman ;
73995: LD_ADDR_VAR 0 12
73999: PUSH
74000: CALL_OW 44
74004: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74005: LD_VAR 0 12
74009: PPUSH
74010: LD_VAR 0 8
74014: PPUSH
74015: LD_INT 0
74017: PPUSH
74018: CALL 75733 0 3
// end ;
74022: GO 73976
74024: POP
74025: POP
// if fishes then
74026: LD_VAR 0 7
74030: IFFALSE 74097
// for i = 1 to fishes do
74032: LD_ADDR_VAR 0 11
74036: PUSH
74037: DOUBLE
74038: LD_INT 1
74040: DEC
74041: ST_TO_ADDR
74042: LD_VAR 0 7
74046: PUSH
74047: FOR_TO
74048: IFFALSE 74095
// begin hc_class = 20 ;
74050: LD_ADDR_OWVAR 28
74054: PUSH
74055: LD_INT 20
74057: ST_TO_ADDR
// hc_gallery =  ;
74058: LD_ADDR_OWVAR 33
74062: PUSH
74063: LD_STRING 
74065: ST_TO_ADDR
// animal := CreateHuman ;
74066: LD_ADDR_VAR 0 12
74070: PUSH
74071: CALL_OW 44
74075: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74076: LD_VAR 0 12
74080: PPUSH
74081: LD_VAR 0 9
74085: PPUSH
74086: LD_INT 0
74088: PPUSH
74089: CALL 75733 0 3
// end ;
74093: GO 74047
74095: POP
74096: POP
// end ;
74097: LD_VAR 0 10
74101: RET
// export function WantHeal ( sci , unit ) ; begin
74102: LD_INT 0
74104: PPUSH
// if GetTaskList ( sci ) > 0 then
74105: LD_VAR 0 1
74109: PPUSH
74110: CALL_OW 437
74114: PUSH
74115: LD_INT 0
74117: GREATER
74118: IFFALSE 74188
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74120: LD_VAR 0 1
74124: PPUSH
74125: CALL_OW 437
74129: PUSH
74130: LD_INT 1
74132: ARRAY
74133: PUSH
74134: LD_INT 1
74136: ARRAY
74137: PUSH
74138: LD_STRING l
74140: EQUAL
74141: PUSH
74142: LD_VAR 0 1
74146: PPUSH
74147: CALL_OW 437
74151: PUSH
74152: LD_INT 1
74154: ARRAY
74155: PUSH
74156: LD_INT 4
74158: ARRAY
74159: PUSH
74160: LD_VAR 0 2
74164: EQUAL
74165: AND
74166: IFFALSE 74178
// result := true else
74168: LD_ADDR_VAR 0 3
74172: PUSH
74173: LD_INT 1
74175: ST_TO_ADDR
74176: GO 74186
// result := false ;
74178: LD_ADDR_VAR 0 3
74182: PUSH
74183: LD_INT 0
74185: ST_TO_ADDR
// end else
74186: GO 74196
// result := false ;
74188: LD_ADDR_VAR 0 3
74192: PUSH
74193: LD_INT 0
74195: ST_TO_ADDR
// end ;
74196: LD_VAR 0 3
74200: RET
// export function HealTarget ( sci ) ; begin
74201: LD_INT 0
74203: PPUSH
// if not sci then
74204: LD_VAR 0 1
74208: NOT
74209: IFFALSE 74213
// exit ;
74211: GO 74278
// result := 0 ;
74213: LD_ADDR_VAR 0 2
74217: PUSH
74218: LD_INT 0
74220: ST_TO_ADDR
// if GetTaskList ( sci ) then
74221: LD_VAR 0 1
74225: PPUSH
74226: CALL_OW 437
74230: IFFALSE 74278
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74232: LD_VAR 0 1
74236: PPUSH
74237: CALL_OW 437
74241: PUSH
74242: LD_INT 1
74244: ARRAY
74245: PUSH
74246: LD_INT 1
74248: ARRAY
74249: PUSH
74250: LD_STRING l
74252: EQUAL
74253: IFFALSE 74278
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74255: LD_ADDR_VAR 0 2
74259: PUSH
74260: LD_VAR 0 1
74264: PPUSH
74265: CALL_OW 437
74269: PUSH
74270: LD_INT 1
74272: ARRAY
74273: PUSH
74274: LD_INT 4
74276: ARRAY
74277: ST_TO_ADDR
// end ;
74278: LD_VAR 0 2
74282: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74283: LD_INT 0
74285: PPUSH
74286: PPUSH
74287: PPUSH
74288: PPUSH
// if not base_units then
74289: LD_VAR 0 1
74293: NOT
74294: IFFALSE 74298
// exit ;
74296: GO 74385
// result := false ;
74298: LD_ADDR_VAR 0 2
74302: PUSH
74303: LD_INT 0
74305: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74306: LD_ADDR_VAR 0 5
74310: PUSH
74311: LD_VAR 0 1
74315: PPUSH
74316: LD_INT 21
74318: PUSH
74319: LD_INT 3
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: PPUSH
74326: CALL_OW 72
74330: ST_TO_ADDR
// if not tmp then
74331: LD_VAR 0 5
74335: NOT
74336: IFFALSE 74340
// exit ;
74338: GO 74385
// for i in tmp do
74340: LD_ADDR_VAR 0 3
74344: PUSH
74345: LD_VAR 0 5
74349: PUSH
74350: FOR_IN
74351: IFFALSE 74383
// begin result := EnemyInRange ( i , 22 ) ;
74353: LD_ADDR_VAR 0 2
74357: PUSH
74358: LD_VAR 0 3
74362: PPUSH
74363: LD_INT 22
74365: PPUSH
74366: CALL 71998 0 2
74370: ST_TO_ADDR
// if result then
74371: LD_VAR 0 2
74375: IFFALSE 74381
// exit ;
74377: POP
74378: POP
74379: GO 74385
// end ;
74381: GO 74350
74383: POP
74384: POP
// end ;
74385: LD_VAR 0 2
74389: RET
// export function FilterByTag ( units , tag ) ; begin
74390: LD_INT 0
74392: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74393: LD_ADDR_VAR 0 3
74397: PUSH
74398: LD_VAR 0 1
74402: PPUSH
74403: LD_INT 120
74405: PUSH
74406: LD_VAR 0 2
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: PPUSH
74415: CALL_OW 72
74419: ST_TO_ADDR
// end ;
74420: LD_VAR 0 3
74424: RET
// export function IsDriver ( un ) ; begin
74425: LD_INT 0
74427: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74428: LD_ADDR_VAR 0 2
74432: PUSH
74433: LD_VAR 0 1
74437: PUSH
74438: LD_INT 55
74440: PUSH
74441: EMPTY
74442: LIST
74443: PPUSH
74444: CALL_OW 69
74448: IN
74449: ST_TO_ADDR
// end ;
74450: LD_VAR 0 2
74454: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74455: LD_INT 0
74457: PPUSH
74458: PPUSH
// list := [ ] ;
74459: LD_ADDR_VAR 0 5
74463: PUSH
74464: EMPTY
74465: ST_TO_ADDR
// case d of 0 :
74466: LD_VAR 0 3
74470: PUSH
74471: LD_INT 0
74473: DOUBLE
74474: EQUAL
74475: IFTRUE 74479
74477: GO 74612
74479: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74480: LD_ADDR_VAR 0 5
74484: PUSH
74485: LD_VAR 0 1
74489: PUSH
74490: LD_INT 4
74492: MINUS
74493: PUSH
74494: LD_VAR 0 2
74498: PUSH
74499: LD_INT 4
74501: MINUS
74502: PUSH
74503: LD_INT 2
74505: PUSH
74506: EMPTY
74507: LIST
74508: LIST
74509: LIST
74510: PUSH
74511: LD_VAR 0 1
74515: PUSH
74516: LD_INT 3
74518: MINUS
74519: PUSH
74520: LD_VAR 0 2
74524: PUSH
74525: LD_INT 1
74527: PUSH
74528: EMPTY
74529: LIST
74530: LIST
74531: LIST
74532: PUSH
74533: LD_VAR 0 1
74537: PUSH
74538: LD_INT 4
74540: PLUS
74541: PUSH
74542: LD_VAR 0 2
74546: PUSH
74547: LD_INT 4
74549: PUSH
74550: EMPTY
74551: LIST
74552: LIST
74553: LIST
74554: PUSH
74555: LD_VAR 0 1
74559: PUSH
74560: LD_INT 3
74562: PLUS
74563: PUSH
74564: LD_VAR 0 2
74568: PUSH
74569: LD_INT 3
74571: PLUS
74572: PUSH
74573: LD_INT 5
74575: PUSH
74576: EMPTY
74577: LIST
74578: LIST
74579: LIST
74580: PUSH
74581: LD_VAR 0 1
74585: PUSH
74586: LD_VAR 0 2
74590: PUSH
74591: LD_INT 4
74593: PLUS
74594: PUSH
74595: LD_INT 0
74597: PUSH
74598: EMPTY
74599: LIST
74600: LIST
74601: LIST
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: LIST
74607: LIST
74608: LIST
74609: ST_TO_ADDR
// end ; 1 :
74610: GO 75310
74612: LD_INT 1
74614: DOUBLE
74615: EQUAL
74616: IFTRUE 74620
74618: GO 74753
74620: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74621: LD_ADDR_VAR 0 5
74625: PUSH
74626: LD_VAR 0 1
74630: PUSH
74631: LD_VAR 0 2
74635: PUSH
74636: LD_INT 4
74638: MINUS
74639: PUSH
74640: LD_INT 3
74642: PUSH
74643: EMPTY
74644: LIST
74645: LIST
74646: LIST
74647: PUSH
74648: LD_VAR 0 1
74652: PUSH
74653: LD_INT 3
74655: MINUS
74656: PUSH
74657: LD_VAR 0 2
74661: PUSH
74662: LD_INT 3
74664: MINUS
74665: PUSH
74666: LD_INT 2
74668: PUSH
74669: EMPTY
74670: LIST
74671: LIST
74672: LIST
74673: PUSH
74674: LD_VAR 0 1
74678: PUSH
74679: LD_INT 4
74681: MINUS
74682: PUSH
74683: LD_VAR 0 2
74687: PUSH
74688: LD_INT 1
74690: PUSH
74691: EMPTY
74692: LIST
74693: LIST
74694: LIST
74695: PUSH
74696: LD_VAR 0 1
74700: PUSH
74701: LD_VAR 0 2
74705: PUSH
74706: LD_INT 3
74708: PLUS
74709: PUSH
74710: LD_INT 0
74712: PUSH
74713: EMPTY
74714: LIST
74715: LIST
74716: LIST
74717: PUSH
74718: LD_VAR 0 1
74722: PUSH
74723: LD_INT 4
74725: PLUS
74726: PUSH
74727: LD_VAR 0 2
74731: PUSH
74732: LD_INT 4
74734: PLUS
74735: PUSH
74736: LD_INT 5
74738: PUSH
74739: EMPTY
74740: LIST
74741: LIST
74742: LIST
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: LIST
74748: LIST
74749: LIST
74750: ST_TO_ADDR
// end ; 2 :
74751: GO 75310
74753: LD_INT 2
74755: DOUBLE
74756: EQUAL
74757: IFTRUE 74761
74759: GO 74890
74761: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74762: LD_ADDR_VAR 0 5
74766: PUSH
74767: LD_VAR 0 1
74771: PUSH
74772: LD_VAR 0 2
74776: PUSH
74777: LD_INT 3
74779: MINUS
74780: PUSH
74781: LD_INT 3
74783: PUSH
74784: EMPTY
74785: LIST
74786: LIST
74787: LIST
74788: PUSH
74789: LD_VAR 0 1
74793: PUSH
74794: LD_INT 4
74796: PLUS
74797: PUSH
74798: LD_VAR 0 2
74802: PUSH
74803: LD_INT 4
74805: PUSH
74806: EMPTY
74807: LIST
74808: LIST
74809: LIST
74810: PUSH
74811: LD_VAR 0 1
74815: PUSH
74816: LD_VAR 0 2
74820: PUSH
74821: LD_INT 4
74823: PLUS
74824: PUSH
74825: LD_INT 0
74827: PUSH
74828: EMPTY
74829: LIST
74830: LIST
74831: LIST
74832: PUSH
74833: LD_VAR 0 1
74837: PUSH
74838: LD_INT 3
74840: MINUS
74841: PUSH
74842: LD_VAR 0 2
74846: PUSH
74847: LD_INT 1
74849: PUSH
74850: EMPTY
74851: LIST
74852: LIST
74853: LIST
74854: PUSH
74855: LD_VAR 0 1
74859: PUSH
74860: LD_INT 4
74862: MINUS
74863: PUSH
74864: LD_VAR 0 2
74868: PUSH
74869: LD_INT 4
74871: MINUS
74872: PUSH
74873: LD_INT 2
74875: PUSH
74876: EMPTY
74877: LIST
74878: LIST
74879: LIST
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: LIST
74887: ST_TO_ADDR
// end ; 3 :
74888: GO 75310
74890: LD_INT 3
74892: DOUBLE
74893: EQUAL
74894: IFTRUE 74898
74896: GO 75031
74898: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74899: LD_ADDR_VAR 0 5
74903: PUSH
74904: LD_VAR 0 1
74908: PUSH
74909: LD_INT 3
74911: PLUS
74912: PUSH
74913: LD_VAR 0 2
74917: PUSH
74918: LD_INT 4
74920: PUSH
74921: EMPTY
74922: LIST
74923: LIST
74924: LIST
74925: PUSH
74926: LD_VAR 0 1
74930: PUSH
74931: LD_INT 4
74933: PLUS
74934: PUSH
74935: LD_VAR 0 2
74939: PUSH
74940: LD_INT 4
74942: PLUS
74943: PUSH
74944: LD_INT 5
74946: PUSH
74947: EMPTY
74948: LIST
74949: LIST
74950: LIST
74951: PUSH
74952: LD_VAR 0 1
74956: PUSH
74957: LD_INT 4
74959: MINUS
74960: PUSH
74961: LD_VAR 0 2
74965: PUSH
74966: LD_INT 1
74968: PUSH
74969: EMPTY
74970: LIST
74971: LIST
74972: LIST
74973: PUSH
74974: LD_VAR 0 1
74978: PUSH
74979: LD_VAR 0 2
74983: PUSH
74984: LD_INT 4
74986: MINUS
74987: PUSH
74988: LD_INT 3
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: LIST
74995: PUSH
74996: LD_VAR 0 1
75000: PUSH
75001: LD_INT 3
75003: MINUS
75004: PUSH
75005: LD_VAR 0 2
75009: PUSH
75010: LD_INT 3
75012: MINUS
75013: PUSH
75014: LD_INT 2
75016: PUSH
75017: EMPTY
75018: LIST
75019: LIST
75020: LIST
75021: PUSH
75022: EMPTY
75023: LIST
75024: LIST
75025: LIST
75026: LIST
75027: LIST
75028: ST_TO_ADDR
// end ; 4 :
75029: GO 75310
75031: LD_INT 4
75033: DOUBLE
75034: EQUAL
75035: IFTRUE 75039
75037: GO 75172
75039: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75040: LD_ADDR_VAR 0 5
75044: PUSH
75045: LD_VAR 0 1
75049: PUSH
75050: LD_VAR 0 2
75054: PUSH
75055: LD_INT 4
75057: PLUS
75058: PUSH
75059: LD_INT 0
75061: PUSH
75062: EMPTY
75063: LIST
75064: LIST
75065: LIST
75066: PUSH
75067: LD_VAR 0 1
75071: PUSH
75072: LD_INT 3
75074: PLUS
75075: PUSH
75076: LD_VAR 0 2
75080: PUSH
75081: LD_INT 3
75083: PLUS
75084: PUSH
75085: LD_INT 5
75087: PUSH
75088: EMPTY
75089: LIST
75090: LIST
75091: LIST
75092: PUSH
75093: LD_VAR 0 1
75097: PUSH
75098: LD_INT 4
75100: PLUS
75101: PUSH
75102: LD_VAR 0 2
75106: PUSH
75107: LD_INT 4
75109: PUSH
75110: EMPTY
75111: LIST
75112: LIST
75113: LIST
75114: PUSH
75115: LD_VAR 0 1
75119: PUSH
75120: LD_VAR 0 2
75124: PUSH
75125: LD_INT 3
75127: MINUS
75128: PUSH
75129: LD_INT 3
75131: PUSH
75132: EMPTY
75133: LIST
75134: LIST
75135: LIST
75136: PUSH
75137: LD_VAR 0 1
75141: PUSH
75142: LD_INT 4
75144: MINUS
75145: PUSH
75146: LD_VAR 0 2
75150: PUSH
75151: LD_INT 4
75153: MINUS
75154: PUSH
75155: LD_INT 2
75157: PUSH
75158: EMPTY
75159: LIST
75160: LIST
75161: LIST
75162: PUSH
75163: EMPTY
75164: LIST
75165: LIST
75166: LIST
75167: LIST
75168: LIST
75169: ST_TO_ADDR
// end ; 5 :
75170: GO 75310
75172: LD_INT 5
75174: DOUBLE
75175: EQUAL
75176: IFTRUE 75180
75178: GO 75309
75180: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75181: LD_ADDR_VAR 0 5
75185: PUSH
75186: LD_VAR 0 1
75190: PUSH
75191: LD_INT 4
75193: MINUS
75194: PUSH
75195: LD_VAR 0 2
75199: PUSH
75200: LD_INT 1
75202: PUSH
75203: EMPTY
75204: LIST
75205: LIST
75206: LIST
75207: PUSH
75208: LD_VAR 0 1
75212: PUSH
75213: LD_VAR 0 2
75217: PUSH
75218: LD_INT 4
75220: MINUS
75221: PUSH
75222: LD_INT 3
75224: PUSH
75225: EMPTY
75226: LIST
75227: LIST
75228: LIST
75229: PUSH
75230: LD_VAR 0 1
75234: PUSH
75235: LD_INT 4
75237: PLUS
75238: PUSH
75239: LD_VAR 0 2
75243: PUSH
75244: LD_INT 4
75246: PLUS
75247: PUSH
75248: LD_INT 5
75250: PUSH
75251: EMPTY
75252: LIST
75253: LIST
75254: LIST
75255: PUSH
75256: LD_VAR 0 1
75260: PUSH
75261: LD_INT 3
75263: PLUS
75264: PUSH
75265: LD_VAR 0 2
75269: PUSH
75270: LD_INT 4
75272: PUSH
75273: EMPTY
75274: LIST
75275: LIST
75276: LIST
75277: PUSH
75278: LD_VAR 0 1
75282: PUSH
75283: LD_VAR 0 2
75287: PUSH
75288: LD_INT 3
75290: PLUS
75291: PUSH
75292: LD_INT 0
75294: PUSH
75295: EMPTY
75296: LIST
75297: LIST
75298: LIST
75299: PUSH
75300: EMPTY
75301: LIST
75302: LIST
75303: LIST
75304: LIST
75305: LIST
75306: ST_TO_ADDR
// end ; end ;
75307: GO 75310
75309: POP
// result := list ;
75310: LD_ADDR_VAR 0 4
75314: PUSH
75315: LD_VAR 0 5
75319: ST_TO_ADDR
// end ;
75320: LD_VAR 0 4
75324: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75325: LD_INT 0
75327: PPUSH
75328: PPUSH
75329: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75330: LD_VAR 0 1
75334: NOT
75335: PUSH
75336: LD_VAR 0 2
75340: PUSH
75341: LD_INT 1
75343: PUSH
75344: LD_INT 2
75346: PUSH
75347: LD_INT 3
75349: PUSH
75350: LD_INT 4
75352: PUSH
75353: EMPTY
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: IN
75359: NOT
75360: OR
75361: IFFALSE 75365
// exit ;
75363: GO 75457
// tmp := [ ] ;
75365: LD_ADDR_VAR 0 5
75369: PUSH
75370: EMPTY
75371: ST_TO_ADDR
// for i in units do
75372: LD_ADDR_VAR 0 4
75376: PUSH
75377: LD_VAR 0 1
75381: PUSH
75382: FOR_IN
75383: IFFALSE 75426
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75385: LD_ADDR_VAR 0 5
75389: PUSH
75390: LD_VAR 0 5
75394: PPUSH
75395: LD_VAR 0 5
75399: PUSH
75400: LD_INT 1
75402: PLUS
75403: PPUSH
75404: LD_VAR 0 4
75408: PPUSH
75409: LD_VAR 0 2
75413: PPUSH
75414: CALL_OW 259
75418: PPUSH
75419: CALL_OW 2
75423: ST_TO_ADDR
75424: GO 75382
75426: POP
75427: POP
// if not tmp then
75428: LD_VAR 0 5
75432: NOT
75433: IFFALSE 75437
// exit ;
75435: GO 75457
// result := SortListByListDesc ( units , tmp ) ;
75437: LD_ADDR_VAR 0 3
75441: PUSH
75442: LD_VAR 0 1
75446: PPUSH
75447: LD_VAR 0 5
75451: PPUSH
75452: CALL_OW 77
75456: ST_TO_ADDR
// end ;
75457: LD_VAR 0 3
75461: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75462: LD_INT 0
75464: PPUSH
75465: PPUSH
75466: PPUSH
// result := false ;
75467: LD_ADDR_VAR 0 3
75471: PUSH
75472: LD_INT 0
75474: ST_TO_ADDR
// x := GetX ( building ) ;
75475: LD_ADDR_VAR 0 4
75479: PUSH
75480: LD_VAR 0 2
75484: PPUSH
75485: CALL_OW 250
75489: ST_TO_ADDR
// y := GetY ( building ) ;
75490: LD_ADDR_VAR 0 5
75494: PUSH
75495: LD_VAR 0 2
75499: PPUSH
75500: CALL_OW 251
75504: ST_TO_ADDR
// if not building or not x or not y then
75505: LD_VAR 0 2
75509: NOT
75510: PUSH
75511: LD_VAR 0 4
75515: NOT
75516: OR
75517: PUSH
75518: LD_VAR 0 5
75522: NOT
75523: OR
75524: IFFALSE 75528
// exit ;
75526: GO 75620
// if GetTaskList ( unit ) then
75528: LD_VAR 0 1
75532: PPUSH
75533: CALL_OW 437
75537: IFFALSE 75620
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75539: LD_STRING e
75541: PUSH
75542: LD_VAR 0 1
75546: PPUSH
75547: CALL_OW 437
75551: PUSH
75552: LD_INT 1
75554: ARRAY
75555: PUSH
75556: LD_INT 1
75558: ARRAY
75559: EQUAL
75560: PUSH
75561: LD_VAR 0 4
75565: PUSH
75566: LD_VAR 0 1
75570: PPUSH
75571: CALL_OW 437
75575: PUSH
75576: LD_INT 1
75578: ARRAY
75579: PUSH
75580: LD_INT 2
75582: ARRAY
75583: EQUAL
75584: AND
75585: PUSH
75586: LD_VAR 0 5
75590: PUSH
75591: LD_VAR 0 1
75595: PPUSH
75596: CALL_OW 437
75600: PUSH
75601: LD_INT 1
75603: ARRAY
75604: PUSH
75605: LD_INT 3
75607: ARRAY
75608: EQUAL
75609: AND
75610: IFFALSE 75620
// result := true end ;
75612: LD_ADDR_VAR 0 3
75616: PUSH
75617: LD_INT 1
75619: ST_TO_ADDR
// end ;
75620: LD_VAR 0 3
75624: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75625: LD_INT 0
75627: PPUSH
// result := false ;
75628: LD_ADDR_VAR 0 4
75632: PUSH
75633: LD_INT 0
75635: ST_TO_ADDR
// if GetTaskList ( unit ) then
75636: LD_VAR 0 1
75640: PPUSH
75641: CALL_OW 437
75645: IFFALSE 75728
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75647: LD_STRING M
75649: PUSH
75650: LD_VAR 0 1
75654: PPUSH
75655: CALL_OW 437
75659: PUSH
75660: LD_INT 1
75662: ARRAY
75663: PUSH
75664: LD_INT 1
75666: ARRAY
75667: EQUAL
75668: PUSH
75669: LD_VAR 0 2
75673: PUSH
75674: LD_VAR 0 1
75678: PPUSH
75679: CALL_OW 437
75683: PUSH
75684: LD_INT 1
75686: ARRAY
75687: PUSH
75688: LD_INT 2
75690: ARRAY
75691: EQUAL
75692: AND
75693: PUSH
75694: LD_VAR 0 3
75698: PUSH
75699: LD_VAR 0 1
75703: PPUSH
75704: CALL_OW 437
75708: PUSH
75709: LD_INT 1
75711: ARRAY
75712: PUSH
75713: LD_INT 3
75715: ARRAY
75716: EQUAL
75717: AND
75718: IFFALSE 75728
// result := true ;
75720: LD_ADDR_VAR 0 4
75724: PUSH
75725: LD_INT 1
75727: ST_TO_ADDR
// end ; end ;
75728: LD_VAR 0 4
75732: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75733: LD_INT 0
75735: PPUSH
75736: PPUSH
75737: PPUSH
75738: PPUSH
// if not unit or not area then
75739: LD_VAR 0 1
75743: NOT
75744: PUSH
75745: LD_VAR 0 2
75749: NOT
75750: OR
75751: IFFALSE 75755
// exit ;
75753: GO 75919
// tmp := AreaToList ( area , i ) ;
75755: LD_ADDR_VAR 0 6
75759: PUSH
75760: LD_VAR 0 2
75764: PPUSH
75765: LD_VAR 0 5
75769: PPUSH
75770: CALL_OW 517
75774: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75775: LD_ADDR_VAR 0 5
75779: PUSH
75780: DOUBLE
75781: LD_INT 1
75783: DEC
75784: ST_TO_ADDR
75785: LD_VAR 0 6
75789: PUSH
75790: LD_INT 1
75792: ARRAY
75793: PUSH
75794: FOR_TO
75795: IFFALSE 75917
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75797: LD_ADDR_VAR 0 7
75801: PUSH
75802: LD_VAR 0 6
75806: PUSH
75807: LD_INT 1
75809: ARRAY
75810: PUSH
75811: LD_VAR 0 5
75815: ARRAY
75816: PUSH
75817: LD_VAR 0 6
75821: PUSH
75822: LD_INT 2
75824: ARRAY
75825: PUSH
75826: LD_VAR 0 5
75830: ARRAY
75831: PUSH
75832: EMPTY
75833: LIST
75834: LIST
75835: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75836: LD_VAR 0 7
75840: PUSH
75841: LD_INT 1
75843: ARRAY
75844: PPUSH
75845: LD_VAR 0 7
75849: PUSH
75850: LD_INT 2
75852: ARRAY
75853: PPUSH
75854: CALL_OW 428
75858: PUSH
75859: LD_INT 0
75861: EQUAL
75862: IFFALSE 75915
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75864: LD_VAR 0 1
75868: PPUSH
75869: LD_VAR 0 7
75873: PUSH
75874: LD_INT 1
75876: ARRAY
75877: PPUSH
75878: LD_VAR 0 7
75882: PUSH
75883: LD_INT 2
75885: ARRAY
75886: PPUSH
75887: LD_VAR 0 3
75891: PPUSH
75892: CALL_OW 48
// result := IsPlaced ( unit ) ;
75896: LD_ADDR_VAR 0 4
75900: PUSH
75901: LD_VAR 0 1
75905: PPUSH
75906: CALL_OW 305
75910: ST_TO_ADDR
// exit ;
75911: POP
75912: POP
75913: GO 75919
// end ; end ;
75915: GO 75794
75917: POP
75918: POP
// end ;
75919: LD_VAR 0 4
75923: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75924: LD_INT 0
75926: PPUSH
75927: PPUSH
75928: PPUSH
// if not side or side > 8 then
75929: LD_VAR 0 1
75933: NOT
75934: PUSH
75935: LD_VAR 0 1
75939: PUSH
75940: LD_INT 8
75942: GREATER
75943: OR
75944: IFFALSE 75948
// exit ;
75946: GO 76135
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75948: LD_ADDR_VAR 0 4
75952: PUSH
75953: LD_INT 22
75955: PUSH
75956: LD_VAR 0 1
75960: PUSH
75961: EMPTY
75962: LIST
75963: LIST
75964: PUSH
75965: LD_INT 21
75967: PUSH
75968: LD_INT 3
75970: PUSH
75971: EMPTY
75972: LIST
75973: LIST
75974: PUSH
75975: EMPTY
75976: LIST
75977: LIST
75978: PPUSH
75979: CALL_OW 69
75983: ST_TO_ADDR
// if not tmp then
75984: LD_VAR 0 4
75988: NOT
75989: IFFALSE 75993
// exit ;
75991: GO 76135
// enable_addtolog := true ;
75993: LD_ADDR_OWVAR 81
75997: PUSH
75998: LD_INT 1
76000: ST_TO_ADDR
// AddToLog ( [ ) ;
76001: LD_STRING [
76003: PPUSH
76004: CALL_OW 561
// for i in tmp do
76008: LD_ADDR_VAR 0 3
76012: PUSH
76013: LD_VAR 0 4
76017: PUSH
76018: FOR_IN
76019: IFFALSE 76126
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76021: LD_STRING [
76023: PUSH
76024: LD_VAR 0 3
76028: PPUSH
76029: CALL_OW 266
76033: STR
76034: PUSH
76035: LD_STRING , 
76037: STR
76038: PUSH
76039: LD_VAR 0 3
76043: PPUSH
76044: CALL_OW 250
76048: STR
76049: PUSH
76050: LD_STRING , 
76052: STR
76053: PUSH
76054: LD_VAR 0 3
76058: PPUSH
76059: CALL_OW 251
76063: STR
76064: PUSH
76065: LD_STRING , 
76067: STR
76068: PUSH
76069: LD_VAR 0 3
76073: PPUSH
76074: CALL_OW 254
76078: STR
76079: PUSH
76080: LD_STRING , 
76082: STR
76083: PUSH
76084: LD_VAR 0 3
76088: PPUSH
76089: LD_INT 1
76091: PPUSH
76092: CALL_OW 268
76096: STR
76097: PUSH
76098: LD_STRING , 
76100: STR
76101: PUSH
76102: LD_VAR 0 3
76106: PPUSH
76107: LD_INT 2
76109: PPUSH
76110: CALL_OW 268
76114: STR
76115: PUSH
76116: LD_STRING ],
76118: STR
76119: PPUSH
76120: CALL_OW 561
// end ;
76124: GO 76018
76126: POP
76127: POP
// AddToLog ( ]; ) ;
76128: LD_STRING ];
76130: PPUSH
76131: CALL_OW 561
// end ;
76135: LD_VAR 0 2
76139: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76140: LD_INT 0
76142: PPUSH
76143: PPUSH
76144: PPUSH
76145: PPUSH
76146: PPUSH
// if not area or not rate or not max then
76147: LD_VAR 0 1
76151: NOT
76152: PUSH
76153: LD_VAR 0 2
76157: NOT
76158: OR
76159: PUSH
76160: LD_VAR 0 4
76164: NOT
76165: OR
76166: IFFALSE 76170
// exit ;
76168: GO 76359
// while 1 do
76170: LD_INT 1
76172: IFFALSE 76359
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76174: LD_ADDR_VAR 0 9
76178: PUSH
76179: LD_VAR 0 1
76183: PPUSH
76184: LD_INT 1
76186: PPUSH
76187: CALL_OW 287
76191: PUSH
76192: LD_INT 10
76194: MUL
76195: ST_TO_ADDR
// r := rate / 10 ;
76196: LD_ADDR_VAR 0 7
76200: PUSH
76201: LD_VAR 0 2
76205: PUSH
76206: LD_INT 10
76208: DIVREAL
76209: ST_TO_ADDR
// time := 1 1$00 ;
76210: LD_ADDR_VAR 0 8
76214: PUSH
76215: LD_INT 2100
76217: ST_TO_ADDR
// if amount < min then
76218: LD_VAR 0 9
76222: PUSH
76223: LD_VAR 0 3
76227: LESS
76228: IFFALSE 76246
// r := r * 2 else
76230: LD_ADDR_VAR 0 7
76234: PUSH
76235: LD_VAR 0 7
76239: PUSH
76240: LD_INT 2
76242: MUL
76243: ST_TO_ADDR
76244: GO 76272
// if amount > max then
76246: LD_VAR 0 9
76250: PUSH
76251: LD_VAR 0 4
76255: GREATER
76256: IFFALSE 76272
// r := r / 2 ;
76258: LD_ADDR_VAR 0 7
76262: PUSH
76263: LD_VAR 0 7
76267: PUSH
76268: LD_INT 2
76270: DIVREAL
76271: ST_TO_ADDR
// time := time / r ;
76272: LD_ADDR_VAR 0 8
76276: PUSH
76277: LD_VAR 0 8
76281: PUSH
76282: LD_VAR 0 7
76286: DIVREAL
76287: ST_TO_ADDR
// if time < 0 then
76288: LD_VAR 0 8
76292: PUSH
76293: LD_INT 0
76295: LESS
76296: IFFALSE 76313
// time := time * - 1 ;
76298: LD_ADDR_VAR 0 8
76302: PUSH
76303: LD_VAR 0 8
76307: PUSH
76308: LD_INT 1
76310: NEG
76311: MUL
76312: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76313: LD_VAR 0 8
76317: PUSH
76318: LD_INT 35
76320: PPUSH
76321: LD_INT 875
76323: PPUSH
76324: CALL_OW 12
76328: PLUS
76329: PPUSH
76330: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76334: LD_INT 1
76336: PPUSH
76337: LD_INT 5
76339: PPUSH
76340: CALL_OW 12
76344: PPUSH
76345: LD_VAR 0 1
76349: PPUSH
76350: LD_INT 1
76352: PPUSH
76353: CALL_OW 55
// end ;
76357: GO 76170
// end ;
76359: LD_VAR 0 5
76363: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76364: LD_INT 0
76366: PPUSH
76367: PPUSH
76368: PPUSH
76369: PPUSH
76370: PPUSH
76371: PPUSH
76372: PPUSH
76373: PPUSH
// if not turrets or not factories then
76374: LD_VAR 0 1
76378: NOT
76379: PUSH
76380: LD_VAR 0 2
76384: NOT
76385: OR
76386: IFFALSE 76390
// exit ;
76388: GO 76697
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76390: LD_ADDR_VAR 0 10
76394: PUSH
76395: LD_INT 5
76397: PUSH
76398: LD_INT 6
76400: PUSH
76401: EMPTY
76402: LIST
76403: LIST
76404: PUSH
76405: LD_INT 2
76407: PUSH
76408: LD_INT 4
76410: PUSH
76411: EMPTY
76412: LIST
76413: LIST
76414: PUSH
76415: LD_INT 3
76417: PUSH
76418: LD_INT 5
76420: PUSH
76421: EMPTY
76422: LIST
76423: LIST
76424: PUSH
76425: EMPTY
76426: LIST
76427: LIST
76428: LIST
76429: PUSH
76430: LD_INT 24
76432: PUSH
76433: LD_INT 25
76435: PUSH
76436: EMPTY
76437: LIST
76438: LIST
76439: PUSH
76440: LD_INT 23
76442: PUSH
76443: LD_INT 27
76445: PUSH
76446: EMPTY
76447: LIST
76448: LIST
76449: PUSH
76450: EMPTY
76451: LIST
76452: LIST
76453: PUSH
76454: LD_INT 42
76456: PUSH
76457: LD_INT 43
76459: PUSH
76460: EMPTY
76461: LIST
76462: LIST
76463: PUSH
76464: LD_INT 44
76466: PUSH
76467: LD_INT 46
76469: PUSH
76470: EMPTY
76471: LIST
76472: LIST
76473: PUSH
76474: LD_INT 45
76476: PUSH
76477: LD_INT 47
76479: PUSH
76480: EMPTY
76481: LIST
76482: LIST
76483: PUSH
76484: EMPTY
76485: LIST
76486: LIST
76487: LIST
76488: PUSH
76489: EMPTY
76490: LIST
76491: LIST
76492: LIST
76493: ST_TO_ADDR
// result := [ ] ;
76494: LD_ADDR_VAR 0 3
76498: PUSH
76499: EMPTY
76500: ST_TO_ADDR
// for i in turrets do
76501: LD_ADDR_VAR 0 4
76505: PUSH
76506: LD_VAR 0 1
76510: PUSH
76511: FOR_IN
76512: IFFALSE 76695
// begin nat := GetNation ( i ) ;
76514: LD_ADDR_VAR 0 7
76518: PUSH
76519: LD_VAR 0 4
76523: PPUSH
76524: CALL_OW 248
76528: ST_TO_ADDR
// weapon := 0 ;
76529: LD_ADDR_VAR 0 8
76533: PUSH
76534: LD_INT 0
76536: ST_TO_ADDR
// if not nat then
76537: LD_VAR 0 7
76541: NOT
76542: IFFALSE 76546
// continue ;
76544: GO 76511
// for j in list [ nat ] do
76546: LD_ADDR_VAR 0 5
76550: PUSH
76551: LD_VAR 0 10
76555: PUSH
76556: LD_VAR 0 7
76560: ARRAY
76561: PUSH
76562: FOR_IN
76563: IFFALSE 76604
// if GetBWeapon ( i ) = j [ 1 ] then
76565: LD_VAR 0 4
76569: PPUSH
76570: CALL_OW 269
76574: PUSH
76575: LD_VAR 0 5
76579: PUSH
76580: LD_INT 1
76582: ARRAY
76583: EQUAL
76584: IFFALSE 76602
// begin weapon := j [ 2 ] ;
76586: LD_ADDR_VAR 0 8
76590: PUSH
76591: LD_VAR 0 5
76595: PUSH
76596: LD_INT 2
76598: ARRAY
76599: ST_TO_ADDR
// break ;
76600: GO 76604
// end ;
76602: GO 76562
76604: POP
76605: POP
// if not weapon then
76606: LD_VAR 0 8
76610: NOT
76611: IFFALSE 76615
// continue ;
76613: GO 76511
// for k in factories do
76615: LD_ADDR_VAR 0 6
76619: PUSH
76620: LD_VAR 0 2
76624: PUSH
76625: FOR_IN
76626: IFFALSE 76691
// begin weapons := AvailableWeaponList ( k ) ;
76628: LD_ADDR_VAR 0 9
76632: PUSH
76633: LD_VAR 0 6
76637: PPUSH
76638: CALL_OW 478
76642: ST_TO_ADDR
// if not weapons then
76643: LD_VAR 0 9
76647: NOT
76648: IFFALSE 76652
// continue ;
76650: GO 76625
// if weapon in weapons then
76652: LD_VAR 0 8
76656: PUSH
76657: LD_VAR 0 9
76661: IN
76662: IFFALSE 76689
// begin result := [ i , weapon ] ;
76664: LD_ADDR_VAR 0 3
76668: PUSH
76669: LD_VAR 0 4
76673: PUSH
76674: LD_VAR 0 8
76678: PUSH
76679: EMPTY
76680: LIST
76681: LIST
76682: ST_TO_ADDR
// exit ;
76683: POP
76684: POP
76685: POP
76686: POP
76687: GO 76697
// end ; end ;
76689: GO 76625
76691: POP
76692: POP
// end ;
76693: GO 76511
76695: POP
76696: POP
// end ;
76697: LD_VAR 0 3
76701: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76702: LD_INT 0
76704: PPUSH
// if not side or side > 8 then
76705: LD_VAR 0 3
76709: NOT
76710: PUSH
76711: LD_VAR 0 3
76715: PUSH
76716: LD_INT 8
76718: GREATER
76719: OR
76720: IFFALSE 76724
// exit ;
76722: GO 76783
// if not range then
76724: LD_VAR 0 4
76728: NOT
76729: IFFALSE 76740
// range := - 12 ;
76731: LD_ADDR_VAR 0 4
76735: PUSH
76736: LD_INT 12
76738: NEG
76739: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76740: LD_VAR 0 1
76744: PPUSH
76745: LD_VAR 0 2
76749: PPUSH
76750: LD_VAR 0 3
76754: PPUSH
76755: LD_VAR 0 4
76759: PPUSH
76760: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76764: LD_VAR 0 1
76768: PPUSH
76769: LD_VAR 0 2
76773: PPUSH
76774: LD_VAR 0 3
76778: PPUSH
76779: CALL_OW 331
// end ;
76783: LD_VAR 0 5
76787: RET
// export function Video ( mode ) ; begin
76788: LD_INT 0
76790: PPUSH
// ingame_video = mode ;
76791: LD_ADDR_OWVAR 52
76795: PUSH
76796: LD_VAR 0 1
76800: ST_TO_ADDR
// interface_hidden = mode ;
76801: LD_ADDR_OWVAR 54
76805: PUSH
76806: LD_VAR 0 1
76810: ST_TO_ADDR
// end ;
76811: LD_VAR 0 2
76815: RET
// export function Join ( array , element ) ; begin
76816: LD_INT 0
76818: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76819: LD_ADDR_VAR 0 3
76823: PUSH
76824: LD_VAR 0 1
76828: PPUSH
76829: LD_VAR 0 1
76833: PUSH
76834: LD_INT 1
76836: PLUS
76837: PPUSH
76838: LD_VAR 0 2
76842: PPUSH
76843: CALL_OW 1
76847: ST_TO_ADDR
// end ;
76848: LD_VAR 0 3
76852: RET
// export function JoinUnion ( array , element ) ; begin
76853: LD_INT 0
76855: PPUSH
// result := array union element ;
76856: LD_ADDR_VAR 0 3
76860: PUSH
76861: LD_VAR 0 1
76865: PUSH
76866: LD_VAR 0 2
76870: UNION
76871: ST_TO_ADDR
// end ;
76872: LD_VAR 0 3
76876: RET
// export function GetBehemoths ( side ) ; begin
76877: LD_INT 0
76879: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76880: LD_ADDR_VAR 0 2
76884: PUSH
76885: LD_INT 22
76887: PUSH
76888: LD_VAR 0 1
76892: PUSH
76893: EMPTY
76894: LIST
76895: LIST
76896: PUSH
76897: LD_INT 31
76899: PUSH
76900: LD_INT 25
76902: PUSH
76903: EMPTY
76904: LIST
76905: LIST
76906: PUSH
76907: EMPTY
76908: LIST
76909: LIST
76910: PPUSH
76911: CALL_OW 69
76915: ST_TO_ADDR
// end ;
76916: LD_VAR 0 2
76920: RET
// export function Shuffle ( array ) ; var i , index ; begin
76921: LD_INT 0
76923: PPUSH
76924: PPUSH
76925: PPUSH
// result := [ ] ;
76926: LD_ADDR_VAR 0 2
76930: PUSH
76931: EMPTY
76932: ST_TO_ADDR
// if not array then
76933: LD_VAR 0 1
76937: NOT
76938: IFFALSE 76942
// exit ;
76940: GO 77041
// Randomize ;
76942: CALL_OW 10
// for i = array downto 1 do
76946: LD_ADDR_VAR 0 3
76950: PUSH
76951: DOUBLE
76952: LD_VAR 0 1
76956: INC
76957: ST_TO_ADDR
76958: LD_INT 1
76960: PUSH
76961: FOR_DOWNTO
76962: IFFALSE 77039
// begin index := rand ( 1 , array ) ;
76964: LD_ADDR_VAR 0 4
76968: PUSH
76969: LD_INT 1
76971: PPUSH
76972: LD_VAR 0 1
76976: PPUSH
76977: CALL_OW 12
76981: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76982: LD_ADDR_VAR 0 2
76986: PUSH
76987: LD_VAR 0 2
76991: PPUSH
76992: LD_VAR 0 2
76996: PUSH
76997: LD_INT 1
76999: PLUS
77000: PPUSH
77001: LD_VAR 0 1
77005: PUSH
77006: LD_VAR 0 4
77010: ARRAY
77011: PPUSH
77012: CALL_OW 2
77016: ST_TO_ADDR
// array := Delete ( array , index ) ;
77017: LD_ADDR_VAR 0 1
77021: PUSH
77022: LD_VAR 0 1
77026: PPUSH
77027: LD_VAR 0 4
77031: PPUSH
77032: CALL_OW 3
77036: ST_TO_ADDR
// end ;
77037: GO 76961
77039: POP
77040: POP
// end ;
77041: LD_VAR 0 2
77045: RET
// export function GetBaseMaterials ( base ) ; begin
77046: LD_INT 0
77048: PPUSH
// result := [ 0 , 0 , 0 ] ;
77049: LD_ADDR_VAR 0 2
77053: PUSH
77054: LD_INT 0
77056: PUSH
77057: LD_INT 0
77059: PUSH
77060: LD_INT 0
77062: PUSH
77063: EMPTY
77064: LIST
77065: LIST
77066: LIST
77067: ST_TO_ADDR
// if not base then
77068: LD_VAR 0 1
77072: NOT
77073: IFFALSE 77077
// exit ;
77075: GO 77126
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77077: LD_ADDR_VAR 0 2
77081: PUSH
77082: LD_VAR 0 1
77086: PPUSH
77087: LD_INT 1
77089: PPUSH
77090: CALL_OW 275
77094: PUSH
77095: LD_VAR 0 1
77099: PPUSH
77100: LD_INT 2
77102: PPUSH
77103: CALL_OW 275
77107: PUSH
77108: LD_VAR 0 1
77112: PPUSH
77113: LD_INT 3
77115: PPUSH
77116: CALL_OW 275
77120: PUSH
77121: EMPTY
77122: LIST
77123: LIST
77124: LIST
77125: ST_TO_ADDR
// end ;
77126: LD_VAR 0 2
77130: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77131: LD_INT 0
77133: PPUSH
77134: PPUSH
// result := array ;
77135: LD_ADDR_VAR 0 3
77139: PUSH
77140: LD_VAR 0 1
77144: ST_TO_ADDR
// if size >= result then
77145: LD_VAR 0 2
77149: PUSH
77150: LD_VAR 0 3
77154: GREATEREQUAL
77155: IFFALSE 77159
// exit ;
77157: GO 77209
// if size then
77159: LD_VAR 0 2
77163: IFFALSE 77209
// for i := array downto size do
77165: LD_ADDR_VAR 0 4
77169: PUSH
77170: DOUBLE
77171: LD_VAR 0 1
77175: INC
77176: ST_TO_ADDR
77177: LD_VAR 0 2
77181: PUSH
77182: FOR_DOWNTO
77183: IFFALSE 77207
// result := Delete ( result , result ) ;
77185: LD_ADDR_VAR 0 3
77189: PUSH
77190: LD_VAR 0 3
77194: PPUSH
77195: LD_VAR 0 3
77199: PPUSH
77200: CALL_OW 3
77204: ST_TO_ADDR
77205: GO 77182
77207: POP
77208: POP
// end ;
77209: LD_VAR 0 3
77213: RET
// export function ComExit ( unit ) ; var tmp ; begin
77214: LD_INT 0
77216: PPUSH
77217: PPUSH
// if not IsInUnit ( unit ) then
77218: LD_VAR 0 1
77222: PPUSH
77223: CALL_OW 310
77227: NOT
77228: IFFALSE 77232
// exit ;
77230: GO 77292
// tmp := IsInUnit ( unit ) ;
77232: LD_ADDR_VAR 0 3
77236: PUSH
77237: LD_VAR 0 1
77241: PPUSH
77242: CALL_OW 310
77246: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77247: LD_VAR 0 3
77251: PPUSH
77252: CALL_OW 247
77256: PUSH
77257: LD_INT 2
77259: EQUAL
77260: IFFALSE 77273
// ComExitVehicle ( unit ) else
77262: LD_VAR 0 1
77266: PPUSH
77267: CALL_OW 121
77271: GO 77282
// ComExitBuilding ( unit ) ;
77273: LD_VAR 0 1
77277: PPUSH
77278: CALL_OW 122
// result := tmp ;
77282: LD_ADDR_VAR 0 2
77286: PUSH
77287: LD_VAR 0 3
77291: ST_TO_ADDR
// end ;
77292: LD_VAR 0 2
77296: RET
// export function ComExitAll ( units ) ; var i ; begin
77297: LD_INT 0
77299: PPUSH
77300: PPUSH
// if not units then
77301: LD_VAR 0 1
77305: NOT
77306: IFFALSE 77310
// exit ;
77308: GO 77336
// for i in units do
77310: LD_ADDR_VAR 0 3
77314: PUSH
77315: LD_VAR 0 1
77319: PUSH
77320: FOR_IN
77321: IFFALSE 77334
// ComExit ( i ) ;
77323: LD_VAR 0 3
77327: PPUSH
77328: CALL 77214 0 1
77332: GO 77320
77334: POP
77335: POP
// end ;
77336: LD_VAR 0 2
77340: RET
// export function ResetHc ; begin
77341: LD_INT 0
77343: PPUSH
// InitHc ;
77344: CALL_OW 19
// hc_importance := 0 ;
77348: LD_ADDR_OWVAR 32
77352: PUSH
77353: LD_INT 0
77355: ST_TO_ADDR
// end ;
77356: LD_VAR 0 1
77360: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77361: LD_INT 0
77363: PPUSH
77364: PPUSH
77365: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77366: LD_ADDR_VAR 0 6
77370: PUSH
77371: LD_VAR 0 1
77375: PUSH
77376: LD_VAR 0 3
77380: PLUS
77381: PUSH
77382: LD_INT 2
77384: DIV
77385: ST_TO_ADDR
// if _x < 0 then
77386: LD_VAR 0 6
77390: PUSH
77391: LD_INT 0
77393: LESS
77394: IFFALSE 77411
// _x := _x * - 1 ;
77396: LD_ADDR_VAR 0 6
77400: PUSH
77401: LD_VAR 0 6
77405: PUSH
77406: LD_INT 1
77408: NEG
77409: MUL
77410: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77411: LD_ADDR_VAR 0 7
77415: PUSH
77416: LD_VAR 0 2
77420: PUSH
77421: LD_VAR 0 4
77425: PLUS
77426: PUSH
77427: LD_INT 2
77429: DIV
77430: ST_TO_ADDR
// if _y < 0 then
77431: LD_VAR 0 7
77435: PUSH
77436: LD_INT 0
77438: LESS
77439: IFFALSE 77456
// _y := _y * - 1 ;
77441: LD_ADDR_VAR 0 7
77445: PUSH
77446: LD_VAR 0 7
77450: PUSH
77451: LD_INT 1
77453: NEG
77454: MUL
77455: ST_TO_ADDR
// result := [ _x , _y ] ;
77456: LD_ADDR_VAR 0 5
77460: PUSH
77461: LD_VAR 0 6
77465: PUSH
77466: LD_VAR 0 7
77470: PUSH
77471: EMPTY
77472: LIST
77473: LIST
77474: ST_TO_ADDR
// end ;
77475: LD_VAR 0 5
77479: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77480: LD_INT 0
77482: PPUSH
77483: PPUSH
77484: PPUSH
77485: PPUSH
// task := GetTaskList ( unit ) ;
77486: LD_ADDR_VAR 0 7
77490: PUSH
77491: LD_VAR 0 1
77495: PPUSH
77496: CALL_OW 437
77500: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77501: LD_VAR 0 7
77505: NOT
77506: PUSH
77507: LD_VAR 0 1
77511: PPUSH
77512: LD_VAR 0 2
77516: PPUSH
77517: CALL_OW 308
77521: NOT
77522: AND
77523: IFFALSE 77527
// exit ;
77525: GO 77645
// if IsInArea ( unit , area ) then
77527: LD_VAR 0 1
77531: PPUSH
77532: LD_VAR 0 2
77536: PPUSH
77537: CALL_OW 308
77541: IFFALSE 77559
// begin ComMoveToArea ( unit , goAway ) ;
77543: LD_VAR 0 1
77547: PPUSH
77548: LD_VAR 0 3
77552: PPUSH
77553: CALL_OW 113
// exit ;
77557: GO 77645
// end ; if task [ 1 ] [ 1 ] <> M then
77559: LD_VAR 0 7
77563: PUSH
77564: LD_INT 1
77566: ARRAY
77567: PUSH
77568: LD_INT 1
77570: ARRAY
77571: PUSH
77572: LD_STRING M
77574: NONEQUAL
77575: IFFALSE 77579
// exit ;
77577: GO 77645
// x := task [ 1 ] [ 2 ] ;
77579: LD_ADDR_VAR 0 5
77583: PUSH
77584: LD_VAR 0 7
77588: PUSH
77589: LD_INT 1
77591: ARRAY
77592: PUSH
77593: LD_INT 2
77595: ARRAY
77596: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77597: LD_ADDR_VAR 0 6
77601: PUSH
77602: LD_VAR 0 7
77606: PUSH
77607: LD_INT 1
77609: ARRAY
77610: PUSH
77611: LD_INT 3
77613: ARRAY
77614: ST_TO_ADDR
// if InArea ( x , y , area ) then
77615: LD_VAR 0 5
77619: PPUSH
77620: LD_VAR 0 6
77624: PPUSH
77625: LD_VAR 0 2
77629: PPUSH
77630: CALL_OW 309
77634: IFFALSE 77645
// ComStop ( unit ) ;
77636: LD_VAR 0 1
77640: PPUSH
77641: CALL_OW 141
// end ;
77645: LD_VAR 0 4
77649: RET
// export function Abs ( value ) ; begin
77650: LD_INT 0
77652: PPUSH
// result := value ;
77653: LD_ADDR_VAR 0 2
77657: PUSH
77658: LD_VAR 0 1
77662: ST_TO_ADDR
// if value < 0 then
77663: LD_VAR 0 1
77667: PUSH
77668: LD_INT 0
77670: LESS
77671: IFFALSE 77688
// result := value * - 1 ;
77673: LD_ADDR_VAR 0 2
77677: PUSH
77678: LD_VAR 0 1
77682: PUSH
77683: LD_INT 1
77685: NEG
77686: MUL
77687: ST_TO_ADDR
// end ;
77688: LD_VAR 0 2
77692: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77693: LD_INT 0
77695: PPUSH
77696: PPUSH
77697: PPUSH
77698: PPUSH
77699: PPUSH
77700: PPUSH
77701: PPUSH
77702: PPUSH
// if not unit or not building then
77703: LD_VAR 0 1
77707: NOT
77708: PUSH
77709: LD_VAR 0 2
77713: NOT
77714: OR
77715: IFFALSE 77719
// exit ;
77717: GO 77945
// x := GetX ( building ) ;
77719: LD_ADDR_VAR 0 4
77723: PUSH
77724: LD_VAR 0 2
77728: PPUSH
77729: CALL_OW 250
77733: ST_TO_ADDR
// y := GetY ( building ) ;
77734: LD_ADDR_VAR 0 6
77738: PUSH
77739: LD_VAR 0 2
77743: PPUSH
77744: CALL_OW 251
77748: ST_TO_ADDR
// d := GetDir ( building ) ;
77749: LD_ADDR_VAR 0 8
77753: PUSH
77754: LD_VAR 0 2
77758: PPUSH
77759: CALL_OW 254
77763: ST_TO_ADDR
// r := 4 ;
77764: LD_ADDR_VAR 0 9
77768: PUSH
77769: LD_INT 4
77771: ST_TO_ADDR
// for i := 1 to 5 do
77772: LD_ADDR_VAR 0 10
77776: PUSH
77777: DOUBLE
77778: LD_INT 1
77780: DEC
77781: ST_TO_ADDR
77782: LD_INT 5
77784: PUSH
77785: FOR_TO
77786: IFFALSE 77943
// begin _x := ShiftX ( x , d , r + i ) ;
77788: LD_ADDR_VAR 0 5
77792: PUSH
77793: LD_VAR 0 4
77797: PPUSH
77798: LD_VAR 0 8
77802: PPUSH
77803: LD_VAR 0 9
77807: PUSH
77808: LD_VAR 0 10
77812: PLUS
77813: PPUSH
77814: CALL_OW 272
77818: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77819: LD_ADDR_VAR 0 7
77823: PUSH
77824: LD_VAR 0 6
77828: PPUSH
77829: LD_VAR 0 8
77833: PPUSH
77834: LD_VAR 0 9
77838: PUSH
77839: LD_VAR 0 10
77843: PLUS
77844: PPUSH
77845: CALL_OW 273
77849: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77850: LD_VAR 0 5
77854: PPUSH
77855: LD_VAR 0 7
77859: PPUSH
77860: CALL_OW 488
77864: PUSH
77865: LD_VAR 0 5
77869: PPUSH
77870: LD_VAR 0 7
77874: PPUSH
77875: CALL_OW 428
77879: PPUSH
77880: CALL_OW 247
77884: PUSH
77885: LD_INT 3
77887: PUSH
77888: LD_INT 2
77890: PUSH
77891: EMPTY
77892: LIST
77893: LIST
77894: IN
77895: NOT
77896: AND
77897: IFFALSE 77941
// begin ComMoveXY ( unit , _x , _y ) ;
77899: LD_VAR 0 1
77903: PPUSH
77904: LD_VAR 0 5
77908: PPUSH
77909: LD_VAR 0 7
77913: PPUSH
77914: CALL_OW 111
// result := [ _x , _y ] ;
77918: LD_ADDR_VAR 0 3
77922: PUSH
77923: LD_VAR 0 5
77927: PUSH
77928: LD_VAR 0 7
77932: PUSH
77933: EMPTY
77934: LIST
77935: LIST
77936: ST_TO_ADDR
// exit ;
77937: POP
77938: POP
77939: GO 77945
// end ; end ;
77941: GO 77785
77943: POP
77944: POP
// end ;
77945: LD_VAR 0 3
77949: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77950: LD_INT 0
77952: PPUSH
77953: PPUSH
77954: PPUSH
// result := 0 ;
77955: LD_ADDR_VAR 0 3
77959: PUSH
77960: LD_INT 0
77962: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77963: LD_VAR 0 1
77967: PUSH
77968: LD_INT 0
77970: LESS
77971: PUSH
77972: LD_VAR 0 1
77976: PUSH
77977: LD_INT 8
77979: GREATER
77980: OR
77981: PUSH
77982: LD_VAR 0 2
77986: PUSH
77987: LD_INT 0
77989: LESS
77990: OR
77991: PUSH
77992: LD_VAR 0 2
77996: PUSH
77997: LD_INT 8
77999: GREATER
78000: OR
78001: IFFALSE 78005
// exit ;
78003: GO 78080
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78005: LD_ADDR_VAR 0 4
78009: PUSH
78010: LD_INT 22
78012: PUSH
78013: LD_VAR 0 2
78017: PUSH
78018: EMPTY
78019: LIST
78020: LIST
78021: PPUSH
78022: CALL_OW 69
78026: PUSH
78027: FOR_IN
78028: IFFALSE 78078
// begin un := UnitShoot ( i ) ;
78030: LD_ADDR_VAR 0 5
78034: PUSH
78035: LD_VAR 0 4
78039: PPUSH
78040: CALL_OW 504
78044: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78045: LD_VAR 0 5
78049: PPUSH
78050: CALL_OW 255
78054: PUSH
78055: LD_VAR 0 1
78059: EQUAL
78060: IFFALSE 78076
// begin result := un ;
78062: LD_ADDR_VAR 0 3
78066: PUSH
78067: LD_VAR 0 5
78071: ST_TO_ADDR
// exit ;
78072: POP
78073: POP
78074: GO 78080
// end ; end ;
78076: GO 78027
78078: POP
78079: POP
// end ;
78080: LD_VAR 0 3
78084: RET
// export function GetCargoBay ( units ) ; begin
78085: LD_INT 0
78087: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78088: LD_ADDR_VAR 0 2
78092: PUSH
78093: LD_VAR 0 1
78097: PPUSH
78098: LD_INT 2
78100: PUSH
78101: LD_INT 34
78103: PUSH
78104: LD_INT 12
78106: PUSH
78107: EMPTY
78108: LIST
78109: LIST
78110: PUSH
78111: LD_INT 34
78113: PUSH
78114: LD_INT 51
78116: PUSH
78117: EMPTY
78118: LIST
78119: LIST
78120: PUSH
78121: LD_INT 34
78123: PUSH
78124: LD_INT 32
78126: PUSH
78127: EMPTY
78128: LIST
78129: LIST
78130: PUSH
78131: LD_INT 34
78133: PUSH
78134: LD_INT 89
78136: PUSH
78137: EMPTY
78138: LIST
78139: LIST
78140: PUSH
78141: EMPTY
78142: LIST
78143: LIST
78144: LIST
78145: LIST
78146: LIST
78147: PPUSH
78148: CALL_OW 72
78152: ST_TO_ADDR
// end ;
78153: LD_VAR 0 2
78157: RET
// export function Negate ( value ) ; begin
78158: LD_INT 0
78160: PPUSH
// result := not value ;
78161: LD_ADDR_VAR 0 2
78165: PUSH
78166: LD_VAR 0 1
78170: NOT
78171: ST_TO_ADDR
// end ;
78172: LD_VAR 0 2
78176: RET
// export function Inc ( value ) ; begin
78177: LD_INT 0
78179: PPUSH
// result := value + 1 ;
78180: LD_ADDR_VAR 0 2
78184: PUSH
78185: LD_VAR 0 1
78189: PUSH
78190: LD_INT 1
78192: PLUS
78193: ST_TO_ADDR
// end ;
78194: LD_VAR 0 2
78198: RET
// export function Dec ( value ) ; begin
78199: LD_INT 0
78201: PPUSH
// result := value - 1 ;
78202: LD_ADDR_VAR 0 2
78206: PUSH
78207: LD_VAR 0 1
78211: PUSH
78212: LD_INT 1
78214: MINUS
78215: ST_TO_ADDR
// end ;
78216: LD_VAR 0 2
78220: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78221: LD_INT 0
78223: PPUSH
78224: PPUSH
78225: PPUSH
78226: PPUSH
78227: PPUSH
78228: PPUSH
78229: PPUSH
78230: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78231: LD_VAR 0 1
78235: PPUSH
78236: LD_VAR 0 2
78240: PPUSH
78241: CALL_OW 488
78245: NOT
78246: PUSH
78247: LD_VAR 0 3
78251: PPUSH
78252: LD_VAR 0 4
78256: PPUSH
78257: CALL_OW 488
78261: NOT
78262: OR
78263: IFFALSE 78276
// begin result := - 1 ;
78265: LD_ADDR_VAR 0 5
78269: PUSH
78270: LD_INT 1
78272: NEG
78273: ST_TO_ADDR
// exit ;
78274: GO 78511
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78276: LD_ADDR_VAR 0 12
78280: PUSH
78281: LD_VAR 0 1
78285: PPUSH
78286: LD_VAR 0 2
78290: PPUSH
78291: LD_VAR 0 3
78295: PPUSH
78296: LD_VAR 0 4
78300: PPUSH
78301: CALL 77361 0 4
78305: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78306: LD_ADDR_VAR 0 11
78310: PUSH
78311: LD_VAR 0 1
78315: PPUSH
78316: LD_VAR 0 2
78320: PPUSH
78321: LD_VAR 0 12
78325: PUSH
78326: LD_INT 1
78328: ARRAY
78329: PPUSH
78330: LD_VAR 0 12
78334: PUSH
78335: LD_INT 2
78337: ARRAY
78338: PPUSH
78339: CALL_OW 298
78343: ST_TO_ADDR
// distance := 9999 ;
78344: LD_ADDR_VAR 0 10
78348: PUSH
78349: LD_INT 9999
78351: ST_TO_ADDR
// for i := 0 to 5 do
78352: LD_ADDR_VAR 0 6
78356: PUSH
78357: DOUBLE
78358: LD_INT 0
78360: DEC
78361: ST_TO_ADDR
78362: LD_INT 5
78364: PUSH
78365: FOR_TO
78366: IFFALSE 78509
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78368: LD_ADDR_VAR 0 7
78372: PUSH
78373: LD_VAR 0 1
78377: PPUSH
78378: LD_VAR 0 6
78382: PPUSH
78383: LD_VAR 0 11
78387: PPUSH
78388: CALL_OW 272
78392: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78393: LD_ADDR_VAR 0 8
78397: PUSH
78398: LD_VAR 0 2
78402: PPUSH
78403: LD_VAR 0 6
78407: PPUSH
78408: LD_VAR 0 11
78412: PPUSH
78413: CALL_OW 273
78417: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78418: LD_VAR 0 7
78422: PPUSH
78423: LD_VAR 0 8
78427: PPUSH
78428: CALL_OW 488
78432: NOT
78433: IFFALSE 78437
// continue ;
78435: GO 78365
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78437: LD_ADDR_VAR 0 9
78441: PUSH
78442: LD_VAR 0 12
78446: PUSH
78447: LD_INT 1
78449: ARRAY
78450: PPUSH
78451: LD_VAR 0 12
78455: PUSH
78456: LD_INT 2
78458: ARRAY
78459: PPUSH
78460: LD_VAR 0 7
78464: PPUSH
78465: LD_VAR 0 8
78469: PPUSH
78470: CALL_OW 298
78474: ST_TO_ADDR
// if tmp < distance then
78475: LD_VAR 0 9
78479: PUSH
78480: LD_VAR 0 10
78484: LESS
78485: IFFALSE 78507
// begin result := i ;
78487: LD_ADDR_VAR 0 5
78491: PUSH
78492: LD_VAR 0 6
78496: ST_TO_ADDR
// distance := tmp ;
78497: LD_ADDR_VAR 0 10
78501: PUSH
78502: LD_VAR 0 9
78506: ST_TO_ADDR
// end ; end ;
78507: GO 78365
78509: POP
78510: POP
// end ;
78511: LD_VAR 0 5
78515: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78516: LD_INT 0
78518: PPUSH
78519: PPUSH
// if not driver or not IsInUnit ( driver ) then
78520: LD_VAR 0 1
78524: NOT
78525: PUSH
78526: LD_VAR 0 1
78530: PPUSH
78531: CALL_OW 310
78535: NOT
78536: OR
78537: IFFALSE 78541
// exit ;
78539: GO 78631
// vehicle := IsInUnit ( driver ) ;
78541: LD_ADDR_VAR 0 3
78545: PUSH
78546: LD_VAR 0 1
78550: PPUSH
78551: CALL_OW 310
78555: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78556: LD_VAR 0 1
78560: PPUSH
78561: LD_STRING \
78563: PUSH
78564: LD_INT 0
78566: PUSH
78567: LD_INT 0
78569: PUSH
78570: LD_INT 0
78572: PUSH
78573: LD_INT 0
78575: PUSH
78576: LD_INT 0
78578: PUSH
78579: LD_INT 0
78581: PUSH
78582: EMPTY
78583: LIST
78584: LIST
78585: LIST
78586: LIST
78587: LIST
78588: LIST
78589: LIST
78590: PUSH
78591: LD_STRING E
78593: PUSH
78594: LD_INT 0
78596: PUSH
78597: LD_INT 0
78599: PUSH
78600: LD_VAR 0 3
78604: PUSH
78605: LD_INT 0
78607: PUSH
78608: LD_INT 0
78610: PUSH
78611: LD_INT 0
78613: PUSH
78614: EMPTY
78615: LIST
78616: LIST
78617: LIST
78618: LIST
78619: LIST
78620: LIST
78621: LIST
78622: PUSH
78623: EMPTY
78624: LIST
78625: LIST
78626: PPUSH
78627: CALL_OW 446
// end ;
78631: LD_VAR 0 2
78635: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78636: LD_INT 0
78638: PPUSH
78639: PPUSH
// if not driver or not IsInUnit ( driver ) then
78640: LD_VAR 0 1
78644: NOT
78645: PUSH
78646: LD_VAR 0 1
78650: PPUSH
78651: CALL_OW 310
78655: NOT
78656: OR
78657: IFFALSE 78661
// exit ;
78659: GO 78751
// vehicle := IsInUnit ( driver ) ;
78661: LD_ADDR_VAR 0 3
78665: PUSH
78666: LD_VAR 0 1
78670: PPUSH
78671: CALL_OW 310
78675: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78676: LD_VAR 0 1
78680: PPUSH
78681: LD_STRING \
78683: PUSH
78684: LD_INT 0
78686: PUSH
78687: LD_INT 0
78689: PUSH
78690: LD_INT 0
78692: PUSH
78693: LD_INT 0
78695: PUSH
78696: LD_INT 0
78698: PUSH
78699: LD_INT 0
78701: PUSH
78702: EMPTY
78703: LIST
78704: LIST
78705: LIST
78706: LIST
78707: LIST
78708: LIST
78709: LIST
78710: PUSH
78711: LD_STRING E
78713: PUSH
78714: LD_INT 0
78716: PUSH
78717: LD_INT 0
78719: PUSH
78720: LD_VAR 0 3
78724: PUSH
78725: LD_INT 0
78727: PUSH
78728: LD_INT 0
78730: PUSH
78731: LD_INT 0
78733: PUSH
78734: EMPTY
78735: LIST
78736: LIST
78737: LIST
78738: LIST
78739: LIST
78740: LIST
78741: LIST
78742: PUSH
78743: EMPTY
78744: LIST
78745: LIST
78746: PPUSH
78747: CALL_OW 447
// end ;
78751: LD_VAR 0 2
78755: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78756: LD_INT 0
78758: PPUSH
78759: PPUSH
78760: PPUSH
// tmp := [ ] ;
78761: LD_ADDR_VAR 0 5
78765: PUSH
78766: EMPTY
78767: ST_TO_ADDR
// for i in units do
78768: LD_ADDR_VAR 0 4
78772: PUSH
78773: LD_VAR 0 1
78777: PUSH
78778: FOR_IN
78779: IFFALSE 78817
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78781: LD_ADDR_VAR 0 5
78785: PUSH
78786: LD_VAR 0 5
78790: PPUSH
78791: LD_VAR 0 5
78795: PUSH
78796: LD_INT 1
78798: PLUS
78799: PPUSH
78800: LD_VAR 0 4
78804: PPUSH
78805: CALL_OW 256
78809: PPUSH
78810: CALL_OW 2
78814: ST_TO_ADDR
78815: GO 78778
78817: POP
78818: POP
// if not tmp then
78819: LD_VAR 0 5
78823: NOT
78824: IFFALSE 78828
// exit ;
78826: GO 78876
// if asc then
78828: LD_VAR 0 2
78832: IFFALSE 78856
// result := SortListByListAsc ( units , tmp ) else
78834: LD_ADDR_VAR 0 3
78838: PUSH
78839: LD_VAR 0 1
78843: PPUSH
78844: LD_VAR 0 5
78848: PPUSH
78849: CALL_OW 76
78853: ST_TO_ADDR
78854: GO 78876
// result := SortListByListDesc ( units , tmp ) ;
78856: LD_ADDR_VAR 0 3
78860: PUSH
78861: LD_VAR 0 1
78865: PPUSH
78866: LD_VAR 0 5
78870: PPUSH
78871: CALL_OW 77
78875: ST_TO_ADDR
// end ;
78876: LD_VAR 0 3
78880: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78881: LD_INT 0
78883: PPUSH
78884: PPUSH
// task := GetTaskList ( mech ) ;
78885: LD_ADDR_VAR 0 4
78889: PUSH
78890: LD_VAR 0 1
78894: PPUSH
78895: CALL_OW 437
78899: ST_TO_ADDR
// if not task then
78900: LD_VAR 0 4
78904: NOT
78905: IFFALSE 78909
// exit ;
78907: GO 78951
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78909: LD_ADDR_VAR 0 3
78913: PUSH
78914: LD_VAR 0 4
78918: PUSH
78919: LD_INT 1
78921: ARRAY
78922: PUSH
78923: LD_INT 1
78925: ARRAY
78926: PUSH
78927: LD_STRING r
78929: EQUAL
78930: PUSH
78931: LD_VAR 0 4
78935: PUSH
78936: LD_INT 1
78938: ARRAY
78939: PUSH
78940: LD_INT 4
78942: ARRAY
78943: PUSH
78944: LD_VAR 0 2
78948: EQUAL
78949: AND
78950: ST_TO_ADDR
// end ;
78951: LD_VAR 0 3
78955: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78956: LD_INT 0
78958: PPUSH
// SetDir ( unit , d ) ;
78959: LD_VAR 0 1
78963: PPUSH
78964: LD_VAR 0 4
78968: PPUSH
78969: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78973: LD_VAR 0 1
78977: PPUSH
78978: LD_VAR 0 2
78982: PPUSH
78983: LD_VAR 0 3
78987: PPUSH
78988: LD_VAR 0 5
78992: PPUSH
78993: CALL_OW 48
// end ;
78997: LD_VAR 0 6
79001: RET
// export function ToNaturalNumber ( number ) ; begin
79002: LD_INT 0
79004: PPUSH
// result := number div 1 ;
79005: LD_ADDR_VAR 0 2
79009: PUSH
79010: LD_VAR 0 1
79014: PUSH
79015: LD_INT 1
79017: DIV
79018: ST_TO_ADDR
// if number < 0 then
79019: LD_VAR 0 1
79023: PUSH
79024: LD_INT 0
79026: LESS
79027: IFFALSE 79037
// result := 0 ;
79029: LD_ADDR_VAR 0 2
79033: PUSH
79034: LD_INT 0
79036: ST_TO_ADDR
// end ;
79037: LD_VAR 0 2
79041: RET
// export function SortByClass ( units , class ) ; var un ; begin
79042: LD_INT 0
79044: PPUSH
79045: PPUSH
// if not units or not class then
79046: LD_VAR 0 1
79050: NOT
79051: PUSH
79052: LD_VAR 0 2
79056: NOT
79057: OR
79058: IFFALSE 79062
// exit ;
79060: GO 79157
// result := [ ] ;
79062: LD_ADDR_VAR 0 3
79066: PUSH
79067: EMPTY
79068: ST_TO_ADDR
// for un in units do
79069: LD_ADDR_VAR 0 4
79073: PUSH
79074: LD_VAR 0 1
79078: PUSH
79079: FOR_IN
79080: IFFALSE 79155
// if GetClass ( un ) = class then
79082: LD_VAR 0 4
79086: PPUSH
79087: CALL_OW 257
79091: PUSH
79092: LD_VAR 0 2
79096: EQUAL
79097: IFFALSE 79124
// result := Insert ( result , 1 , un ) else
79099: LD_ADDR_VAR 0 3
79103: PUSH
79104: LD_VAR 0 3
79108: PPUSH
79109: LD_INT 1
79111: PPUSH
79112: LD_VAR 0 4
79116: PPUSH
79117: CALL_OW 2
79121: ST_TO_ADDR
79122: GO 79153
// result := Replace ( result , result + 1 , un ) ;
79124: LD_ADDR_VAR 0 3
79128: PUSH
79129: LD_VAR 0 3
79133: PPUSH
79134: LD_VAR 0 3
79138: PUSH
79139: LD_INT 1
79141: PLUS
79142: PPUSH
79143: LD_VAR 0 4
79147: PPUSH
79148: CALL_OW 1
79152: ST_TO_ADDR
79153: GO 79079
79155: POP
79156: POP
// end ;
79157: LD_VAR 0 3
79161: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79162: LD_INT 0
79164: PPUSH
79165: PPUSH
79166: PPUSH
79167: PPUSH
79168: PPUSH
79169: PPUSH
79170: PPUSH
// result := [ ] ;
79171: LD_ADDR_VAR 0 4
79175: PUSH
79176: EMPTY
79177: ST_TO_ADDR
// if x - r < 0 then
79178: LD_VAR 0 1
79182: PUSH
79183: LD_VAR 0 3
79187: MINUS
79188: PUSH
79189: LD_INT 0
79191: LESS
79192: IFFALSE 79204
// min_x := 0 else
79194: LD_ADDR_VAR 0 8
79198: PUSH
79199: LD_INT 0
79201: ST_TO_ADDR
79202: GO 79220
// min_x := x - r ;
79204: LD_ADDR_VAR 0 8
79208: PUSH
79209: LD_VAR 0 1
79213: PUSH
79214: LD_VAR 0 3
79218: MINUS
79219: ST_TO_ADDR
// if y - r < 0 then
79220: LD_VAR 0 2
79224: PUSH
79225: LD_VAR 0 3
79229: MINUS
79230: PUSH
79231: LD_INT 0
79233: LESS
79234: IFFALSE 79246
// min_y := 0 else
79236: LD_ADDR_VAR 0 7
79240: PUSH
79241: LD_INT 0
79243: ST_TO_ADDR
79244: GO 79262
// min_y := y - r ;
79246: LD_ADDR_VAR 0 7
79250: PUSH
79251: LD_VAR 0 2
79255: PUSH
79256: LD_VAR 0 3
79260: MINUS
79261: ST_TO_ADDR
// max_x := x + r ;
79262: LD_ADDR_VAR 0 9
79266: PUSH
79267: LD_VAR 0 1
79271: PUSH
79272: LD_VAR 0 3
79276: PLUS
79277: ST_TO_ADDR
// max_y := y + r ;
79278: LD_ADDR_VAR 0 10
79282: PUSH
79283: LD_VAR 0 2
79287: PUSH
79288: LD_VAR 0 3
79292: PLUS
79293: ST_TO_ADDR
// for _x = min_x to max_x do
79294: LD_ADDR_VAR 0 5
79298: PUSH
79299: DOUBLE
79300: LD_VAR 0 8
79304: DEC
79305: ST_TO_ADDR
79306: LD_VAR 0 9
79310: PUSH
79311: FOR_TO
79312: IFFALSE 79413
// for _y = min_y to max_y do
79314: LD_ADDR_VAR 0 6
79318: PUSH
79319: DOUBLE
79320: LD_VAR 0 7
79324: DEC
79325: ST_TO_ADDR
79326: LD_VAR 0 10
79330: PUSH
79331: FOR_TO
79332: IFFALSE 79409
// begin if not ValidHex ( _x , _y ) then
79334: LD_VAR 0 5
79338: PPUSH
79339: LD_VAR 0 6
79343: PPUSH
79344: CALL_OW 488
79348: NOT
79349: IFFALSE 79353
// continue ;
79351: GO 79331
// if GetResourceTypeXY ( _x , _y ) then
79353: LD_VAR 0 5
79357: PPUSH
79358: LD_VAR 0 6
79362: PPUSH
79363: CALL_OW 283
79367: IFFALSE 79407
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79369: LD_ADDR_VAR 0 4
79373: PUSH
79374: LD_VAR 0 4
79378: PPUSH
79379: LD_VAR 0 4
79383: PUSH
79384: LD_INT 1
79386: PLUS
79387: PPUSH
79388: LD_VAR 0 5
79392: PUSH
79393: LD_VAR 0 6
79397: PUSH
79398: EMPTY
79399: LIST
79400: LIST
79401: PPUSH
79402: CALL_OW 1
79406: ST_TO_ADDR
// end ;
79407: GO 79331
79409: POP
79410: POP
79411: GO 79311
79413: POP
79414: POP
// end ;
79415: LD_VAR 0 4
79419: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79420: LD_INT 0
79422: PPUSH
79423: PPUSH
79424: PPUSH
79425: PPUSH
79426: PPUSH
79427: PPUSH
79428: PPUSH
79429: PPUSH
// if not units then
79430: LD_VAR 0 1
79434: NOT
79435: IFFALSE 79439
// exit ;
79437: GO 79963
// result := UnitFilter ( units , [ f_ok ] ) ;
79439: LD_ADDR_VAR 0 3
79443: PUSH
79444: LD_VAR 0 1
79448: PPUSH
79449: LD_INT 50
79451: PUSH
79452: EMPTY
79453: LIST
79454: PPUSH
79455: CALL_OW 72
79459: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79460: LD_ADDR_VAR 0 8
79464: PUSH
79465: LD_VAR 0 1
79469: PUSH
79470: LD_INT 1
79472: ARRAY
79473: PPUSH
79474: CALL_OW 255
79478: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79479: LD_ADDR_VAR 0 10
79483: PUSH
79484: LD_INT 29
79486: PUSH
79487: LD_INT 91
79489: PUSH
79490: LD_INT 49
79492: PUSH
79493: EMPTY
79494: LIST
79495: LIST
79496: LIST
79497: ST_TO_ADDR
// if not result then
79498: LD_VAR 0 3
79502: NOT
79503: IFFALSE 79507
// exit ;
79505: GO 79963
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79507: LD_ADDR_VAR 0 5
79511: PUSH
79512: LD_INT 81
79514: PUSH
79515: LD_VAR 0 8
79519: PUSH
79520: EMPTY
79521: LIST
79522: LIST
79523: PPUSH
79524: CALL_OW 69
79528: ST_TO_ADDR
// for i in result do
79529: LD_ADDR_VAR 0 4
79533: PUSH
79534: LD_VAR 0 3
79538: PUSH
79539: FOR_IN
79540: IFFALSE 79961
// begin tag := GetTag ( i ) + 1 ;
79542: LD_ADDR_VAR 0 9
79546: PUSH
79547: LD_VAR 0 4
79551: PPUSH
79552: CALL_OW 110
79556: PUSH
79557: LD_INT 1
79559: PLUS
79560: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79561: LD_ADDR_VAR 0 7
79565: PUSH
79566: LD_VAR 0 4
79570: PPUSH
79571: CALL_OW 250
79575: PPUSH
79576: LD_VAR 0 4
79580: PPUSH
79581: CALL_OW 251
79585: PPUSH
79586: LD_INT 6
79588: PPUSH
79589: CALL 79162 0 3
79593: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79594: LD_VAR 0 4
79598: PPUSH
79599: CALL_OW 247
79603: PUSH
79604: LD_INT 2
79606: EQUAL
79607: PUSH
79608: LD_VAR 0 7
79612: AND
79613: PUSH
79614: LD_VAR 0 4
79618: PPUSH
79619: CALL_OW 264
79623: PUSH
79624: LD_VAR 0 10
79628: IN
79629: NOT
79630: AND
79631: IFFALSE 79670
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79633: LD_VAR 0 4
79637: PPUSH
79638: LD_VAR 0 7
79642: PUSH
79643: LD_INT 1
79645: ARRAY
79646: PUSH
79647: LD_INT 1
79649: ARRAY
79650: PPUSH
79651: LD_VAR 0 7
79655: PUSH
79656: LD_INT 1
79658: ARRAY
79659: PUSH
79660: LD_INT 2
79662: ARRAY
79663: PPUSH
79664: CALL_OW 116
79668: GO 79959
// if path > tag then
79670: LD_VAR 0 2
79674: PUSH
79675: LD_VAR 0 9
79679: GREATER
79680: IFFALSE 79888
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79682: LD_ADDR_VAR 0 6
79686: PUSH
79687: LD_VAR 0 5
79691: PPUSH
79692: LD_INT 91
79694: PUSH
79695: LD_VAR 0 4
79699: PUSH
79700: LD_INT 8
79702: PUSH
79703: EMPTY
79704: LIST
79705: LIST
79706: LIST
79707: PPUSH
79708: CALL_OW 72
79712: ST_TO_ADDR
// if nearEnemy then
79713: LD_VAR 0 6
79717: IFFALSE 79786
// begin if GetWeapon ( i ) = ru_time_lapser then
79719: LD_VAR 0 4
79723: PPUSH
79724: CALL_OW 264
79728: PUSH
79729: LD_INT 49
79731: EQUAL
79732: IFFALSE 79760
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79734: LD_VAR 0 4
79738: PPUSH
79739: LD_VAR 0 6
79743: PPUSH
79744: LD_VAR 0 4
79748: PPUSH
79749: CALL_OW 74
79753: PPUSH
79754: CALL_OW 112
79758: GO 79784
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79760: LD_VAR 0 4
79764: PPUSH
79765: LD_VAR 0 6
79769: PPUSH
79770: LD_VAR 0 4
79774: PPUSH
79775: CALL_OW 74
79779: PPUSH
79780: CALL_OW 115
// end else
79784: GO 79886
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79786: LD_VAR 0 4
79790: PPUSH
79791: LD_VAR 0 2
79795: PUSH
79796: LD_VAR 0 9
79800: ARRAY
79801: PUSH
79802: LD_INT 1
79804: ARRAY
79805: PPUSH
79806: LD_VAR 0 2
79810: PUSH
79811: LD_VAR 0 9
79815: ARRAY
79816: PUSH
79817: LD_INT 2
79819: ARRAY
79820: PPUSH
79821: CALL_OW 297
79825: PUSH
79826: LD_INT 6
79828: GREATER
79829: IFFALSE 79872
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79831: LD_VAR 0 4
79835: PPUSH
79836: LD_VAR 0 2
79840: PUSH
79841: LD_VAR 0 9
79845: ARRAY
79846: PUSH
79847: LD_INT 1
79849: ARRAY
79850: PPUSH
79851: LD_VAR 0 2
79855: PUSH
79856: LD_VAR 0 9
79860: ARRAY
79861: PUSH
79862: LD_INT 2
79864: ARRAY
79865: PPUSH
79866: CALL_OW 114
79870: GO 79886
// SetTag ( i , tag ) ;
79872: LD_VAR 0 4
79876: PPUSH
79877: LD_VAR 0 9
79881: PPUSH
79882: CALL_OW 109
// end else
79886: GO 79959
// if enemy then
79888: LD_VAR 0 5
79892: IFFALSE 79959
// begin if GetWeapon ( i ) = ru_time_lapser then
79894: LD_VAR 0 4
79898: PPUSH
79899: CALL_OW 264
79903: PUSH
79904: LD_INT 49
79906: EQUAL
79907: IFFALSE 79935
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79909: LD_VAR 0 4
79913: PPUSH
79914: LD_VAR 0 5
79918: PPUSH
79919: LD_VAR 0 4
79923: PPUSH
79924: CALL_OW 74
79928: PPUSH
79929: CALL_OW 112
79933: GO 79959
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79935: LD_VAR 0 4
79939: PPUSH
79940: LD_VAR 0 5
79944: PPUSH
79945: LD_VAR 0 4
79949: PPUSH
79950: CALL_OW 74
79954: PPUSH
79955: CALL_OW 115
// end ; end ;
79959: GO 79539
79961: POP
79962: POP
// end ;
79963: LD_VAR 0 3
79967: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79968: LD_INT 0
79970: PPUSH
79971: PPUSH
79972: PPUSH
// if not unit or IsInUnit ( unit ) then
79973: LD_VAR 0 1
79977: NOT
79978: PUSH
79979: LD_VAR 0 1
79983: PPUSH
79984: CALL_OW 310
79988: OR
79989: IFFALSE 79993
// exit ;
79991: GO 80084
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79993: LD_ADDR_VAR 0 4
79997: PUSH
79998: LD_VAR 0 1
80002: PPUSH
80003: CALL_OW 250
80007: PPUSH
80008: LD_VAR 0 2
80012: PPUSH
80013: LD_INT 1
80015: PPUSH
80016: CALL_OW 272
80020: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80021: LD_ADDR_VAR 0 5
80025: PUSH
80026: LD_VAR 0 1
80030: PPUSH
80031: CALL_OW 251
80035: PPUSH
80036: LD_VAR 0 2
80040: PPUSH
80041: LD_INT 1
80043: PPUSH
80044: CALL_OW 273
80048: ST_TO_ADDR
// if ValidHex ( x , y ) then
80049: LD_VAR 0 4
80053: PPUSH
80054: LD_VAR 0 5
80058: PPUSH
80059: CALL_OW 488
80063: IFFALSE 80084
// ComTurnXY ( unit , x , y ) ;
80065: LD_VAR 0 1
80069: PPUSH
80070: LD_VAR 0 4
80074: PPUSH
80075: LD_VAR 0 5
80079: PPUSH
80080: CALL_OW 118
// end ;
80084: LD_VAR 0 3
80088: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80089: LD_INT 0
80091: PPUSH
80092: PPUSH
// result := false ;
80093: LD_ADDR_VAR 0 3
80097: PUSH
80098: LD_INT 0
80100: ST_TO_ADDR
// if not units then
80101: LD_VAR 0 2
80105: NOT
80106: IFFALSE 80110
// exit ;
80108: GO 80155
// for i in units do
80110: LD_ADDR_VAR 0 4
80114: PUSH
80115: LD_VAR 0 2
80119: PUSH
80120: FOR_IN
80121: IFFALSE 80153
// if See ( side , i ) then
80123: LD_VAR 0 1
80127: PPUSH
80128: LD_VAR 0 4
80132: PPUSH
80133: CALL_OW 292
80137: IFFALSE 80151
// begin result := true ;
80139: LD_ADDR_VAR 0 3
80143: PUSH
80144: LD_INT 1
80146: ST_TO_ADDR
// exit ;
80147: POP
80148: POP
80149: GO 80155
// end ;
80151: GO 80120
80153: POP
80154: POP
// end ;
80155: LD_VAR 0 3
80159: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80160: LD_INT 0
80162: PPUSH
80163: PPUSH
80164: PPUSH
80165: PPUSH
// if not unit or not points then
80166: LD_VAR 0 1
80170: NOT
80171: PUSH
80172: LD_VAR 0 2
80176: NOT
80177: OR
80178: IFFALSE 80182
// exit ;
80180: GO 80272
// dist := 99999 ;
80182: LD_ADDR_VAR 0 5
80186: PUSH
80187: LD_INT 99999
80189: ST_TO_ADDR
// for i in points do
80190: LD_ADDR_VAR 0 4
80194: PUSH
80195: LD_VAR 0 2
80199: PUSH
80200: FOR_IN
80201: IFFALSE 80270
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80203: LD_ADDR_VAR 0 6
80207: PUSH
80208: LD_VAR 0 1
80212: PPUSH
80213: LD_VAR 0 4
80217: PUSH
80218: LD_INT 1
80220: ARRAY
80221: PPUSH
80222: LD_VAR 0 4
80226: PUSH
80227: LD_INT 2
80229: ARRAY
80230: PPUSH
80231: CALL_OW 297
80235: ST_TO_ADDR
// if tmpDist < dist then
80236: LD_VAR 0 6
80240: PUSH
80241: LD_VAR 0 5
80245: LESS
80246: IFFALSE 80268
// begin result := i ;
80248: LD_ADDR_VAR 0 3
80252: PUSH
80253: LD_VAR 0 4
80257: ST_TO_ADDR
// dist := tmpDist ;
80258: LD_ADDR_VAR 0 5
80262: PUSH
80263: LD_VAR 0 6
80267: ST_TO_ADDR
// end ; end ;
80268: GO 80200
80270: POP
80271: POP
// end ;
80272: LD_VAR 0 3
80276: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80277: LD_INT 0
80279: PPUSH
// uc_side := side ;
80280: LD_ADDR_OWVAR 20
80284: PUSH
80285: LD_VAR 0 1
80289: ST_TO_ADDR
// uc_nation := 3 ;
80290: LD_ADDR_OWVAR 21
80294: PUSH
80295: LD_INT 3
80297: ST_TO_ADDR
// vc_chassis := 25 ;
80298: LD_ADDR_OWVAR 37
80302: PUSH
80303: LD_INT 25
80305: ST_TO_ADDR
// vc_engine := engine_siberite ;
80306: LD_ADDR_OWVAR 39
80310: PUSH
80311: LD_INT 3
80313: ST_TO_ADDR
// vc_control := control_computer ;
80314: LD_ADDR_OWVAR 38
80318: PUSH
80319: LD_INT 3
80321: ST_TO_ADDR
// vc_weapon := 59 ;
80322: LD_ADDR_OWVAR 40
80326: PUSH
80327: LD_INT 59
80329: ST_TO_ADDR
// result := CreateVehicle ;
80330: LD_ADDR_VAR 0 5
80334: PUSH
80335: CALL_OW 45
80339: ST_TO_ADDR
// SetDir ( result , d ) ;
80340: LD_VAR 0 5
80344: PPUSH
80345: LD_VAR 0 4
80349: PPUSH
80350: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80354: LD_VAR 0 5
80358: PPUSH
80359: LD_VAR 0 2
80363: PPUSH
80364: LD_VAR 0 3
80368: PPUSH
80369: LD_INT 0
80371: PPUSH
80372: CALL_OW 48
// end ;
80376: LD_VAR 0 5
80380: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80381: LD_INT 0
80383: PPUSH
80384: PPUSH
80385: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80386: LD_ADDR_VAR 0 2
80390: PUSH
80391: LD_INT 0
80393: PUSH
80394: LD_INT 0
80396: PUSH
80397: LD_INT 0
80399: PUSH
80400: LD_INT 0
80402: PUSH
80403: EMPTY
80404: LIST
80405: LIST
80406: LIST
80407: LIST
80408: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80409: LD_VAR 0 1
80413: NOT
80414: PUSH
80415: LD_VAR 0 1
80419: PPUSH
80420: CALL_OW 264
80424: PUSH
80425: LD_INT 12
80427: PUSH
80428: LD_INT 51
80430: PUSH
80431: LD_INT 32
80433: PUSH
80434: LD_INT 89
80436: PUSH
80437: EMPTY
80438: LIST
80439: LIST
80440: LIST
80441: LIST
80442: IN
80443: NOT
80444: OR
80445: IFFALSE 80449
// exit ;
80447: GO 80547
// for i := 1 to 3 do
80449: LD_ADDR_VAR 0 3
80453: PUSH
80454: DOUBLE
80455: LD_INT 1
80457: DEC
80458: ST_TO_ADDR
80459: LD_INT 3
80461: PUSH
80462: FOR_TO
80463: IFFALSE 80545
// begin tmp := GetCargo ( cargo , i ) ;
80465: LD_ADDR_VAR 0 4
80469: PUSH
80470: LD_VAR 0 1
80474: PPUSH
80475: LD_VAR 0 3
80479: PPUSH
80480: CALL_OW 289
80484: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80485: LD_ADDR_VAR 0 2
80489: PUSH
80490: LD_VAR 0 2
80494: PPUSH
80495: LD_VAR 0 3
80499: PPUSH
80500: LD_VAR 0 4
80504: PPUSH
80505: CALL_OW 1
80509: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80510: LD_ADDR_VAR 0 2
80514: PUSH
80515: LD_VAR 0 2
80519: PPUSH
80520: LD_INT 4
80522: PPUSH
80523: LD_VAR 0 2
80527: PUSH
80528: LD_INT 4
80530: ARRAY
80531: PUSH
80532: LD_VAR 0 4
80536: PLUS
80537: PPUSH
80538: CALL_OW 1
80542: ST_TO_ADDR
// end ;
80543: GO 80462
80545: POP
80546: POP
// end ;
80547: LD_VAR 0 2
80551: RET
// export function Length ( array ) ; begin
80552: LD_INT 0
80554: PPUSH
// result := array + 0 ;
80555: LD_ADDR_VAR 0 2
80559: PUSH
80560: LD_VAR 0 1
80564: PUSH
80565: LD_INT 0
80567: PLUS
80568: ST_TO_ADDR
// end ;
80569: LD_VAR 0 2
80573: RET
// export function PrepareArray ( array ) ; begin
80574: LD_INT 0
80576: PPUSH
// result := array diff 0 ;
80577: LD_ADDR_VAR 0 2
80581: PUSH
80582: LD_VAR 0 1
80586: PUSH
80587: LD_INT 0
80589: DIFF
80590: ST_TO_ADDR
// if not result [ 1 ] then
80591: LD_VAR 0 2
80595: PUSH
80596: LD_INT 1
80598: ARRAY
80599: NOT
80600: IFFALSE 80620
// result := Delete ( result , 1 ) ;
80602: LD_ADDR_VAR 0 2
80606: PUSH
80607: LD_VAR 0 2
80611: PPUSH
80612: LD_INT 1
80614: PPUSH
80615: CALL_OW 3
80619: ST_TO_ADDR
// end ;
80620: LD_VAR 0 2
80624: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80625: LD_INT 0
80627: PPUSH
80628: PPUSH
80629: PPUSH
80630: PPUSH
// sibRocketRange := 25 ;
80631: LD_ADDR_VAR 0 6
80635: PUSH
80636: LD_INT 25
80638: ST_TO_ADDR
// result := false ;
80639: LD_ADDR_VAR 0 4
80643: PUSH
80644: LD_INT 0
80646: ST_TO_ADDR
// for i := 0 to 5 do
80647: LD_ADDR_VAR 0 5
80651: PUSH
80652: DOUBLE
80653: LD_INT 0
80655: DEC
80656: ST_TO_ADDR
80657: LD_INT 5
80659: PUSH
80660: FOR_TO
80661: IFFALSE 80728
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80663: LD_VAR 0 1
80667: PPUSH
80668: LD_VAR 0 5
80672: PPUSH
80673: LD_VAR 0 6
80677: PPUSH
80678: CALL_OW 272
80682: PPUSH
80683: LD_VAR 0 2
80687: PPUSH
80688: LD_VAR 0 5
80692: PPUSH
80693: LD_VAR 0 6
80697: PPUSH
80698: CALL_OW 273
80702: PPUSH
80703: LD_VAR 0 3
80707: PPUSH
80708: CALL_OW 309
80712: IFFALSE 80726
// begin result := true ;
80714: LD_ADDR_VAR 0 4
80718: PUSH
80719: LD_INT 1
80721: ST_TO_ADDR
// exit ;
80722: POP
80723: POP
80724: GO 80730
// end ;
80726: GO 80660
80728: POP
80729: POP
// end ; end_of_file
80730: LD_VAR 0 4
80734: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80735: LD_VAR 0 1
80739: PUSH
80740: LD_INT 200
80742: DOUBLE
80743: GREATEREQUAL
80744: IFFALSE 80752
80746: LD_INT 299
80748: DOUBLE
80749: LESSEQUAL
80750: IFTRUE 80754
80752: GO 80786
80754: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80755: LD_VAR 0 1
80759: PPUSH
80760: LD_VAR 0 2
80764: PPUSH
80765: LD_VAR 0 3
80769: PPUSH
80770: LD_VAR 0 4
80774: PPUSH
80775: LD_VAR 0 5
80779: PPUSH
80780: CALL 35454 0 5
80784: GO 80863
80786: LD_INT 300
80788: DOUBLE
80789: GREATEREQUAL
80790: IFFALSE 80798
80792: LD_INT 399
80794: DOUBLE
80795: LESSEQUAL
80796: IFTRUE 80800
80798: GO 80862
80800: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80801: LD_VAR 0 1
80805: PPUSH
80806: LD_VAR 0 2
80810: PPUSH
80811: LD_VAR 0 3
80815: PPUSH
80816: LD_VAR 0 4
80820: PPUSH
80821: LD_VAR 0 5
80825: PPUSH
80826: LD_VAR 0 6
80830: PPUSH
80831: LD_VAR 0 7
80835: PPUSH
80836: LD_VAR 0 8
80840: PPUSH
80841: LD_VAR 0 9
80845: PPUSH
80846: LD_VAR 0 10
80850: PPUSH
80851: LD_VAR 0 11
80855: PPUSH
80856: CALL 31787 0 11
80860: GO 80863
80862: POP
// end ;
80863: PPOPN 11
80865: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80866: LD_VAR 0 1
80870: PPUSH
80871: LD_VAR 0 2
80875: PPUSH
80876: LD_VAR 0 3
80880: PPUSH
80881: LD_VAR 0 4
80885: PPUSH
80886: LD_VAR 0 5
80890: PPUSH
80891: CALL 35190 0 5
// end ; end_of_file
80895: PPOPN 5
80897: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80898: LD_VAR 0 1
80902: PPUSH
80903: LD_VAR 0 2
80907: PPUSH
80908: LD_VAR 0 3
80912: PPUSH
80913: LD_VAR 0 4
80917: PPUSH
80918: LD_VAR 0 5
80922: PPUSH
80923: LD_VAR 0 6
80927: PPUSH
80928: CALL 19480 0 6
// end ;
80932: PPOPN 6
80934: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80935: LD_INT 0
80937: PPUSH
// begin if not units then
80938: LD_VAR 0 1
80942: NOT
80943: IFFALSE 80947
// exit ;
80945: GO 80947
// end ;
80947: PPOPN 7
80949: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80950: CALL 19451 0 0
// end ;
80954: PPOPN 1
80956: END
