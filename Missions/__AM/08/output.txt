// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 291 0 0
// PrepareRussian ;
  23: CALL 9054 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 75296 0 9
// Action ;
  79: CALL 15303 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 9
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// sikorskiIsKilled := false ;
 167: LD_ADDR_EXP 10
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// invincibleMode := false ;
 175: LD_ADDR_EXP 5
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// captureRocketCounter := 0 ;
 183: LD_ADDR_EXP 11
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// killMechCounter := 0 ;
 191: LD_ADDR_EXP 12
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// end ;
 199: LD_VAR 0 1
 203: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 204: LD_INT 22
 206: PUSH
 207: LD_INT 1
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 34
 216: PUSH
 217: LD_INT 6
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: PUSH
 233: LD_INT 6
 235: GREATEREQUAL
 236: IFFALSE 248
 238: GO 240
 240: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 241: LD_STRING ACH_ARMOR
 243: PPUSH
 244: CALL_OW 543
 248: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 249: LD_EXP 11
 253: PUSH
 254: LD_INT 3
 256: GREATEREQUAL
 257: IFFALSE 269
 259: GO 261
 261: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 262: LD_STRING ACH_TOOL
 264: PPUSH
 265: CALL_OW 543
 269: END
// every 0 0$1 trigger killMechCounter >= 10 do
 270: LD_EXP 12
 274: PUSH
 275: LD_INT 10
 277: GREATEREQUAL
 278: IFFALSE 290
 280: GO 282
 282: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 283: LD_STRING ACH_MECH
 285: PPUSH
 286: CALL_OW 543
 290: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
 306: PPUSH
 307: PPUSH
 308: PPUSH
// uc_side := 1 ;
 309: LD_ADDR_OWVAR 20
 313: PUSH
 314: LD_INT 1
 316: ST_TO_ADDR
// uc_nation := 1 ;
 317: LD_ADDR_OWVAR 21
 321: PUSH
 322: LD_INT 1
 324: ST_TO_ADDR
// PrepareGammaBase ;
 325: CALL 2428 0 0
// x := 52 ;
 329: LD_ADDR_VAR 0 13
 333: PUSH
 334: LD_INT 52
 336: ST_TO_ADDR
// y := 16 ;
 337: LD_ADDR_VAR 0 14
 341: PUSH
 342: LD_INT 16
 344: ST_TO_ADDR
// case gammaCommander of 1 :
 345: LD_EXP 13
 349: PUSH
 350: LD_INT 1
 352: DOUBLE
 353: EQUAL
 354: IFTRUE 358
 356: GO 443
 358: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 359: LD_ADDR_EXP 16
 363: PUSH
 364: LD_STRING Donaldson
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_STRING 04_
 372: PPUSH
 373: CALL 40928 0 3
 377: ST_TO_ADDR
// if HexInfo ( x , y ) then
 378: LD_VAR 0 13
 382: PPUSH
 383: LD_VAR 0 14
 387: PPUSH
 388: CALL_OW 428
 392: IFFALSE 410
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 394: LD_EXP 16
 398: PPUSH
 399: LD_EXP 31
 403: PPUSH
 404: CALL_OW 52
 408: GO 432
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 410: LD_EXP 16
 414: PPUSH
 415: LD_VAR 0 13
 419: PPUSH
 420: LD_VAR 0 14
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 48
// ComHold ( Donaldson ) ;
 432: LD_EXP 16
 436: PPUSH
 437: CALL_OW 140
// end ; 2 :
 441: GO 630
 443: LD_INT 2
 445: DOUBLE
 446: EQUAL
 447: IFTRUE 451
 449: GO 536
 451: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 452: LD_ADDR_EXP 15
 456: PUSH
 457: LD_STRING Brown
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_STRING 04_
 465: PPUSH
 466: CALL 40928 0 3
 470: ST_TO_ADDR
// if HexInfo ( x , y ) then
 471: LD_VAR 0 13
 475: PPUSH
 476: LD_VAR 0 14
 480: PPUSH
 481: CALL_OW 428
 485: IFFALSE 503
// PlaceHumanInUnit ( Brown , amDepot ) else
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 31
 496: PPUSH
 497: CALL_OW 52
 501: GO 525
// PlaceUnitXY ( Brown , x , y , false ) ;
 503: LD_EXP 15
 507: PPUSH
 508: LD_VAR 0 13
 512: PPUSH
 513: LD_VAR 0 14
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 48
// ComHold ( Brown ) ;
 525: LD_EXP 15
 529: PPUSH
 530: CALL_OW 140
// end ; 3 :
 534: GO 630
 536: LD_INT 3
 538: DOUBLE
 539: EQUAL
 540: IFTRUE 544
 542: GO 629
 544: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_STRING VanHouten
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_STRING 
 558: PPUSH
 559: CALL 40928 0 3
 563: ST_TO_ADDR
// if HexInfo ( x , y ) then
 564: LD_VAR 0 13
 568: PPUSH
 569: LD_VAR 0 14
 573: PPUSH
 574: CALL_OW 428
 578: IFFALSE 596
// PlaceHumanInUnit ( Houten , amDepot ) else
 580: LD_EXP 25
 584: PPUSH
 585: LD_EXP 31
 589: PPUSH
 590: CALL_OW 52
 594: GO 618
// PlaceUnitXY ( Houten , x , y , false ) ;
 596: LD_EXP 25
 600: PPUSH
 601: LD_VAR 0 13
 605: PPUSH
 606: LD_VAR 0 14
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// ComHold ( Houten ) ;
 618: LD_EXP 25
 622: PPUSH
 623: CALL_OW 140
// end ; end ;
 627: GO 630
 629: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 630: LD_ADDR_EXP 29
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: LD_STRING 
 643: PPUSH
 644: CALL 40928 0 3
 648: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 649: LD_ADDR_EXP 30
 653: PUSH
 654: LD_STRING Powell
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: LD_STRING 
 662: PPUSH
 663: CALL 40928 0 3
 667: ST_TO_ADDR
// tmp := [ ] ;
 668: LD_ADDR_VAR 0 4
 672: PUSH
 673: EMPTY
 674: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) then
 675: LD_STRING 04_Lisa
 677: PUSH
 678: EMPTY
 679: LIST
 680: PPUSH
 681: CALL_OW 28
 685: IFFALSE 792
// begin if not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 687: LD_STRING LisaInDelta
 689: PPUSH
 690: LD_INT 0
 692: PPUSH
 693: CALL_OW 30
 697: NOT
 698: PUSH
 699: LD_STRING 07_Lisa
 701: PUSH
 702: EMPTY
 703: LIST
 704: PPUSH
 705: CALL_OW 28
 709: NOT
 710: AND
 711: IFFALSE 734
// Lisa := PrepareUnit ( Lisa , true , 04_ ) else
 713: LD_ADDR_EXP 19
 717: PUSH
 718: LD_STRING Lisa
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: LD_STRING 04_
 726: PPUSH
 727: CALL 40928 0 3
 731: ST_TO_ADDR
 732: GO 766
// if not LoadVariable ( LisaIn07 , false ) then
 734: LD_STRING LisaIn07
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: CALL_OW 30
 744: NOT
 745: IFFALSE 766
// Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 747: LD_ADDR_EXP 19
 751: PUSH
 752: LD_STRING Lisa
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_STRING 07_
 760: PPUSH
 761: CALL 40928 0 3
 765: ST_TO_ADDR
// if Lisa then
 766: LD_EXP 19
 770: IFFALSE 792
// tmp2 := Join ( tmp2 , Lisa ) ;
 772: LD_ADDR_VAR 0 5
 776: PUSH
 777: LD_VAR 0 5
 781: PPUSH
 782: LD_EXP 19
 786: PPUSH
 787: CALL 78619 0 2
 791: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) then
 792: LD_STRING 04_Bobby
 794: PUSH
 795: EMPTY
 796: LIST
 797: PPUSH
 798: CALL_OW 28
 802: IFFALSE 909
// begin if not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 804: LD_STRING BobbyInDelta
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 30
 814: NOT
 815: PUSH
 816: LD_STRING 07_Bobby
 818: PUSH
 819: EMPTY
 820: LIST
 821: PPUSH
 822: CALL_OW 28
 826: NOT
 827: AND
 828: IFFALSE 851
// Bobby := PrepareUnit ( Bobby , true , 04_ ) else
 830: LD_ADDR_EXP 17
 834: PUSH
 835: LD_STRING Bobby
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: LD_STRING 04_
 843: PPUSH
 844: CALL 40928 0 3
 848: ST_TO_ADDR
 849: GO 883
// if not LoadVariable ( BobbyIn07 , false ) then
 851: LD_STRING BobbyIn07
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 30
 861: NOT
 862: IFFALSE 883
// Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 864: LD_ADDR_EXP 17
 868: PUSH
 869: LD_STRING Bobby
 871: PPUSH
 872: LD_INT 1
 874: PPUSH
 875: LD_STRING 07_
 877: PPUSH
 878: CALL 40928 0 3
 882: ST_TO_ADDR
// if Bobby then
 883: LD_EXP 17
 887: IFFALSE 909
// tmp2 := Join ( tmp2 , Bobby ) ;
 889: LD_ADDR_VAR 0 5
 893: PUSH
 894: LD_VAR 0 5
 898: PPUSH
 899: LD_EXP 17
 903: PPUSH
 904: CALL 78619 0 2
 908: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) then
 909: LD_STRING 04_Cyrus
 911: PUSH
 912: EMPTY
 913: LIST
 914: PPUSH
 915: CALL_OW 28
 919: IFFALSE 1026
// begin if not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 921: LD_STRING CyrusInDelta
 923: PPUSH
 924: LD_INT 0
 926: PPUSH
 927: CALL_OW 30
 931: NOT
 932: PUSH
 933: LD_STRING 07_Cyrus
 935: PUSH
 936: EMPTY
 937: LIST
 938: PPUSH
 939: CALL_OW 28
 943: NOT
 944: AND
 945: IFFALSE 968
// Cyrus := PrepareUnit ( Cyrus , true , 04_ ) else
 947: LD_ADDR_EXP 18
 951: PUSH
 952: LD_STRING Cyrus
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_STRING 04_
 960: PPUSH
 961: CALL 40928 0 3
 965: ST_TO_ADDR
 966: GO 1000
// if not LoadVariable ( CyrusIn07 , false ) then
 968: LD_STRING CyrusIn07
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 30
 978: NOT
 979: IFFALSE 1000
// Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 981: LD_ADDR_EXP 18
 985: PUSH
 986: LD_STRING Cyrus
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: LD_STRING 07_
 994: PPUSH
 995: CALL 40928 0 3
 999: ST_TO_ADDR
// if Cyrus then
1000: LD_EXP 18
1004: IFFALSE 1026
// tmp2 := Join ( tmp2 , Cyrus ) ;
1006: LD_ADDR_VAR 0 5
1010: PUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_EXP 18
1020: PPUSH
1021: CALL 78619 0 2
1025: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1026: LD_STRING 04_Brown
1028: PUSH
1029: EMPTY
1030: LIST
1031: PPUSH
1032: CALL_OW 28
1036: PUSH
1037: LD_STRING BrownInDelta
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 30
1047: NOT
1048: AND
1049: PUSH
1050: LD_STRING 07_Brown
1052: PUSH
1053: EMPTY
1054: LIST
1055: PPUSH
1056: CALL_OW 28
1060: NOT
1061: AND
1062: PUSH
1063: LD_EXP 13
1067: PUSH
1068: LD_INT 2
1070: NONEQUAL
1071: AND
1072: IFFALSE 1115
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1074: LD_ADDR_EXP 15
1078: PUSH
1079: LD_STRING Brown
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: LD_STRING 04_
1087: PPUSH
1088: CALL 40928 0 3
1092: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_VAR 0 5
1102: PPUSH
1103: LD_EXP 15
1107: PPUSH
1108: CALL 78619 0 2
1112: ST_TO_ADDR
// end else
1113: GO 1177
// if not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1115: LD_STRING BrownIn07
1117: PPUSH
1118: LD_INT 0
1120: PPUSH
1121: CALL_OW 30
1125: NOT
1126: PUSH
1127: LD_EXP 13
1131: PUSH
1132: LD_INT 2
1134: NONEQUAL
1135: AND
1136: IFFALSE 1177
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1138: LD_ADDR_EXP 15
1142: PUSH
1143: LD_STRING Brown
1145: PPUSH
1146: LD_INT 1
1148: PPUSH
1149: LD_STRING 07_
1151: PPUSH
1152: CALL 40928 0 3
1156: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_VAR 0 5
1166: PPUSH
1167: LD_EXP 15
1171: PPUSH
1172: CALL 78619 0 2
1176: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1177: LD_STRING 04_Donaldson
1179: PUSH
1180: EMPTY
1181: LIST
1182: PPUSH
1183: CALL_OW 28
1187: PUSH
1188: LD_STRING DonaldsonInDelta
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 30
1198: NOT
1199: AND
1200: PUSH
1201: LD_STRING 07_Donaldson
1203: PUSH
1204: EMPTY
1205: LIST
1206: PPUSH
1207: CALL_OW 28
1211: NOT
1212: AND
1213: PUSH
1214: LD_EXP 13
1218: PUSH
1219: LD_INT 1
1221: NONEQUAL
1222: AND
1223: IFFALSE 1266
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1225: LD_ADDR_EXP 16
1229: PUSH
1230: LD_STRING Donaldson
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_STRING 04_
1238: PPUSH
1239: CALL 40928 0 3
1243: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1244: LD_ADDR_VAR 0 5
1248: PUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: LD_EXP 16
1258: PPUSH
1259: CALL 78619 0 2
1263: ST_TO_ADDR
// end else
1264: GO 1328
// if not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1266: LD_STRING DonaldsonIn07
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 30
1276: NOT
1277: PUSH
1278: LD_EXP 13
1282: PUSH
1283: LD_INT 1
1285: NONEQUAL
1286: AND
1287: IFFALSE 1328
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1289: LD_ADDR_EXP 16
1293: PUSH
1294: LD_STRING Donaldson
1296: PPUSH
1297: LD_INT 1
1299: PPUSH
1300: LD_STRING 07_
1302: PPUSH
1303: CALL 40928 0 3
1307: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1308: LD_ADDR_VAR 0 5
1312: PUSH
1313: LD_VAR 0 5
1317: PPUSH
1318: LD_EXP 16
1322: PPUSH
1323: CALL 78619 0 2
1327: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1328: LD_STRING KhatamIn07
1330: PPUSH
1331: LD_INT 0
1333: PPUSH
1334: CALL_OW 30
1338: NOT
1339: IFFALSE 1380
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1341: LD_ADDR_EXP 23
1345: PUSH
1346: LD_STRING Khatam
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_STRING 07_
1354: PPUSH
1355: CALL 40928 0 3
1359: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1360: LD_ADDR_VAR 0 5
1364: PUSH
1365: LD_VAR 0 5
1369: PPUSH
1370: LD_EXP 23
1374: PPUSH
1375: CALL 78619 0 2
1379: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1380: LD_ADDR_VAR 0 6
1384: PUSH
1385: LD_STRING 07_othersGamma
1387: PPUSH
1388: CALL_OW 31
1392: ST_TO_ADDR
// tmp := 5 - others ;
1393: LD_ADDR_VAR 0 4
1397: PUSH
1398: LD_INT 5
1400: PUSH
1401: LD_VAR 0 6
1405: MINUS
1406: ST_TO_ADDR
// if tmp then
1407: LD_VAR 0 4
1411: IFFALSE 1468
// for i := tmp downto 1 do
1413: LD_ADDR_VAR 0 2
1417: PUSH
1418: DOUBLE
1419: LD_VAR 0 4
1423: INC
1424: ST_TO_ADDR
1425: LD_INT 1
1427: PUSH
1428: FOR_DOWNTO
1429: IFFALSE 1466
// begin PrepareHuman ( false , 1 , 5 ) ;
1431: LD_INT 0
1433: PPUSH
1434: LD_INT 1
1436: PPUSH
1437: LD_INT 5
1439: PPUSH
1440: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1444: LD_ADDR_VAR 0 6
1448: PUSH
1449: LD_VAR 0 6
1453: PPUSH
1454: CALL_OW 44
1458: PPUSH
1459: CALL 78619 0 2
1463: ST_TO_ADDR
// end ;
1464: GO 1428
1466: POP
1467: POP
// for i in others do
1468: LD_ADDR_VAR 0 2
1472: PUSH
1473: LD_VAR 0 6
1477: PUSH
1478: FOR_IN
1479: IFFALSE 1495
// SetTag ( i , 106 ) ;
1481: LD_VAR 0 2
1485: PPUSH
1486: LD_INT 106
1488: PPUSH
1489: CALL_OW 109
1493: GO 1478
1495: POP
1496: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1497: LD_ADDR_VAR 0 8
1501: PUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 30
1514: PUSH
1515: LD_INT 31
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL_OW 69
1530: ST_TO_ADDR
// for i in bun do
1531: LD_ADDR_VAR 0 2
1535: PUSH
1536: LD_VAR 0 8
1540: PUSH
1541: FOR_IN
1542: IFFALSE 1674
// begin x := GetX ( i ) ;
1544: LD_ADDR_VAR 0 13
1548: PUSH
1549: LD_VAR 0 2
1553: PPUSH
1554: CALL_OW 250
1558: ST_TO_ADDR
// y := GetY ( i ) ;
1559: LD_ADDR_VAR 0 14
1563: PUSH
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 251
1573: ST_TO_ADDR
// d := GetDir ( i ) ;
1574: LD_ADDR_VAR 0 15
1578: PUSH
1579: LD_VAR 0 2
1583: PPUSH
1584: CALL_OW 254
1588: ST_TO_ADDR
// RemoveUnit ( i ) ;
1589: LD_VAR 0 2
1593: PPUSH
1594: CALL_OW 64
// bc_type := b_bunker ;
1598: LD_ADDR_OWVAR 42
1602: PUSH
1603: LD_INT 32
1605: ST_TO_ADDR
// bc_level := 6 ;
1606: LD_ADDR_OWVAR 43
1610: PUSH
1611: LD_INT 6
1613: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1614: LD_ADDR_VAR 0 16
1618: PUSH
1619: LD_VAR 0 13
1623: PPUSH
1624: LD_VAR 0 14
1628: PPUSH
1629: LD_VAR 0 15
1633: PPUSH
1634: CALL_OW 47
1638: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1639: LD_VAR 0 16
1643: PPUSH
1644: LD_INT 5
1646: PUSH
1647: LD_INT 4
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_VAR 0 2
1658: PUSH
1659: LD_INT 2
1661: MOD
1662: PUSH
1663: LD_INT 1
1665: PLUS
1666: ARRAY
1667: PPUSH
1668: CALL_OW 431
// end ;
1672: GO 1541
1674: POP
1675: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1676: LD_ADDR_VAR 0 7
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 1
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 30
1693: PUSH
1694: LD_INT 5
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1710: LD_ADDR_VAR 0 9
1714: PUSH
1715: LD_INT 22
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 2
1727: PUSH
1728: LD_INT 30
1730: PUSH
1731: LD_INT 6
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 30
1740: PUSH
1741: LD_INT 7
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 30
1750: PUSH
1751: LD_INT 8
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PPUSH
1768: CALL_OW 69
1772: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1773: LD_ADDR_VAR 0 10
1777: PUSH
1778: LD_INT 22
1780: PUSH
1781: LD_INT 1
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 30
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PPUSH
1802: CALL_OW 69
1806: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1807: LD_ADDR_VAR 0 11
1811: PUSH
1812: LD_INT 22
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 30
1824: PUSH
1825: LD_INT 36
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PPUSH
1836: CALL_OW 69
1840: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1841: LD_ADDR_VAR 0 8
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: LD_INT 30
1861: PUSH
1862: LD_INT 31
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 30
1871: PUSH
1872: LD_INT 32
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PPUSH
1888: CALL_OW 69
1892: ST_TO_ADDR
// for i in others union tmp2 do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_VAR 0 6
1902: PUSH
1903: LD_VAR 0 5
1907: UNION
1908: PUSH
1909: FOR_IN
1910: IFFALSE 2350
// begin placed := false ;
1912: LD_ADDR_VAR 0 12
1916: PUSH
1917: LD_INT 0
1919: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1920: LD_VAR 0 2
1924: PPUSH
1925: CALL_OW 257
1929: PUSH
1930: LD_INT 1
1932: EQUAL
1933: IFFALSE 2058
// begin if UnitFilter ( bun , [ f_empty ] ) then
1935: LD_VAR 0 8
1939: PPUSH
1940: LD_INT 58
1942: PUSH
1943: EMPTY
1944: LIST
1945: PPUSH
1946: CALL_OW 72
1950: IFFALSE 1989
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 8
1961: PPUSH
1962: LD_INT 58
1964: PUSH
1965: EMPTY
1966: LIST
1967: PPUSH
1968: CALL_OW 72
1972: PUSH
1973: LD_INT 1
1975: ARRAY
1976: PPUSH
1977: CALL_OW 52
// placed := true ;
1981: LD_ADDR_VAR 0 12
1985: PUSH
1986: LD_INT 1
1988: ST_TO_ADDR
// end ; if arm and not placed then
1989: LD_VAR 0 7
1993: PUSH
1994: LD_VAR 0 12
1998: NOT
1999: AND
2000: IFFALSE 2058
// begin for j in arm do
2002: LD_ADDR_VAR 0 3
2006: PUSH
2007: LD_VAR 0 7
2011: PUSH
2012: FOR_IN
2013: IFFALSE 2056
// if UnitsInside ( j ) < 6 then
2015: LD_VAR 0 3
2019: PPUSH
2020: CALL_OW 313
2024: PUSH
2025: LD_INT 6
2027: LESS
2028: IFFALSE 2054
// begin PlaceHumanInUnit ( i , j ) ;
2030: LD_VAR 0 2
2034: PPUSH
2035: LD_VAR 0 3
2039: PPUSH
2040: CALL_OW 52
// placed := true ;
2044: LD_ADDR_VAR 0 12
2048: PUSH
2049: LD_INT 1
2051: ST_TO_ADDR
// break ;
2052: GO 2056
// end ;
2054: GO 2012
2056: POP
2057: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2058: LD_VAR 0 2
2062: PPUSH
2063: CALL_OW 257
2067: PUSH
2068: LD_INT 2
2070: EQUAL
2071: IFFALSE 2104
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: LD_INT 52
2080: PPUSH
2081: LD_INT 20
2083: PPUSH
2084: LD_INT 6
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL_OW 50
// placed := true ;
2094: LD_ADDR_VAR 0 12
2098: PUSH
2099: LD_INT 1
2101: ST_TO_ADDR
// continue ;
2102: GO 1909
// end ; if GetClass ( i ) = class_mechanic then
2104: LD_VAR 0 2
2108: PPUSH
2109: CALL_OW 257
2113: PUSH
2114: LD_INT 3
2116: EQUAL
2117: IFFALSE 2240
// begin if fac then
2119: LD_VAR 0 10
2123: IFFALSE 2240
// begin if ct and UnitsInside ( ct [ 1 ] ) < 3 then
2125: LD_VAR 0 11
2129: PUSH
2130: LD_VAR 0 11
2134: PUSH
2135: LD_INT 1
2137: ARRAY
2138: PPUSH
2139: CALL_OW 313
2143: PUSH
2144: LD_INT 3
2146: LESS
2147: AND
2148: IFFALSE 2176
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_VAR 0 11
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: PPUSH
2164: CALL_OW 52
// placed := true ;
2168: LD_ADDR_VAR 0 12
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// end ; if placed then
2176: LD_VAR 0 12
2180: IFFALSE 2184
// continue ;
2182: GO 1909
// for j in fac do
2184: LD_ADDR_VAR 0 3
2188: PUSH
2189: LD_VAR 0 10
2193: PUSH
2194: FOR_IN
2195: IFFALSE 2238
// if UnitsInside ( j ) < 6 then
2197: LD_VAR 0 3
2201: PPUSH
2202: CALL_OW 313
2206: PUSH
2207: LD_INT 6
2209: LESS
2210: IFFALSE 2236
// begin PlaceHumanInUnit ( i , j ) ;
2212: LD_VAR 0 2
2216: PPUSH
2217: LD_VAR 0 3
2221: PPUSH
2222: CALL_OW 52
// placed := true ;
2226: LD_ADDR_VAR 0 12
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// break ;
2234: GO 2238
// end ;
2236: GO 2194
2238: POP
2239: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2240: LD_VAR 0 2
2244: PPUSH
2245: CALL_OW 257
2249: PUSH
2250: LD_INT 4
2252: EQUAL
2253: IFFALSE 2317
// begin if lab then
2255: LD_VAR 0 9
2259: IFFALSE 2317
// begin for j in lab do
2261: LD_ADDR_VAR 0 3
2265: PUSH
2266: LD_VAR 0 9
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2315
// if UnitsInside ( j ) < 6 then
2274: LD_VAR 0 3
2278: PPUSH
2279: CALL_OW 313
2283: PUSH
2284: LD_INT 6
2286: LESS
2287: IFFALSE 2313
// begin PlaceHumanInUnit ( i , j ) ;
2289: LD_VAR 0 2
2293: PPUSH
2294: LD_VAR 0 3
2298: PPUSH
2299: CALL_OW 52
// placed := true ;
2303: LD_ADDR_VAR 0 12
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// break ;
2311: GO 2315
// end ;
2313: GO 2271
2315: POP
2316: POP
// end ; end ; if not placed then
2317: LD_VAR 0 12
2321: NOT
2322: IFFALSE 2348
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 49
// ComHold ( i ) ;
2339: LD_VAR 0 2
2343: PPUSH
2344: CALL_OW 140
// end ; end ;
2348: GO 1909
2350: POP
2351: POP
// if ct then
2352: LD_VAR 0 11
2356: IFFALSE 2423
// if UnitsInside ( ct [ 1 ] ) then
2358: LD_VAR 0 11
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: CALL_OW 313
2371: IFFALSE 2423
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2373: LD_ADDR_VAR 0 2
2377: PUSH
2378: LD_INT 22
2380: PUSH
2381: LD_INT 1
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: PUSH
2388: LD_INT 33
2390: PUSH
2391: LD_INT 2
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PPUSH
2402: CALL_OW 69
2406: PUSH
2407: FOR_IN
2408: IFFALSE 2421
// Connect ( i ) ;
2410: LD_VAR 0 2
2414: PPUSH
2415: CALL 49236 0 1
2419: GO 2407
2421: POP
2422: POP
// end ; end ;
2423: LD_VAR 0 1
2427: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2428: LD_INT 0
2430: PPUSH
2431: PPUSH
2432: PPUSH
2433: PPUSH
2434: PPUSH
2435: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2436: LD_INT 71
2438: PPUSH
2439: LD_INT 5
2441: PPUSH
2442: LD_INT 1
2444: PPUSH
2445: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2449: LD_ADDR_VAR 0 2
2453: PUSH
2454: LD_STRING GammaBase
2456: PPUSH
2457: EMPTY
2458: PPUSH
2459: CALL_OW 30
2463: ST_TO_ADDR
// if not blist then
2464: LD_VAR 0 2
2468: NOT
2469: IFFALSE 2509
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2471: LD_ADDR_VAR 0 2
2475: PUSH
2476: LD_INT 1
2478: PUSH
2479: LD_INT 52
2481: PUSH
2482: LD_INT 12
2484: PUSH
2485: LD_INT 3
2487: PUSH
2488: LD_INT 3
2490: PUSH
2491: LD_INT 0
2493: PUSH
2494: LD_INT 0
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: PUSH
2506: EMPTY
2507: LIST
2508: ST_TO_ADDR
// uc_side := 1 ;
2509: LD_ADDR_OWVAR 20
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// uc_nation := 1 ;
2517: LD_ADDR_OWVAR 21
2521: PUSH
2522: LD_INT 1
2524: ST_TO_ADDR
// for i in blist do
2525: LD_ADDR_VAR 0 3
2529: PUSH
2530: LD_VAR 0 2
2534: PUSH
2535: FOR_IN
2536: IFFALSE 2814
// begin InitBc ;
2538: CALL_OW 21
// bc_type := i [ 1 ] ;
2542: LD_ADDR_OWVAR 42
2546: PUSH
2547: LD_VAR 0 3
2551: PUSH
2552: LD_INT 1
2554: ARRAY
2555: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2556: LD_ADDR_OWVAR 43
2560: PUSH
2561: LD_VAR 0 3
2565: PUSH
2566: LD_INT 5
2568: ARRAY
2569: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2570: LD_OWVAR 42
2574: PUSH
2575: LD_INT 6
2577: PUSH
2578: LD_INT 7
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: IN
2585: IFFALSE 2649
// begin if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2587: LD_STRING 06_remoteVehs_1
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL_OW 30
2597: IFFALSE 2625
// begin bc_type := b_lab_full ;
2599: LD_ADDR_OWVAR 42
2603: PUSH
2604: LD_INT 8
2606: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2607: LD_ADDR_OWVAR 44
2611: PUSH
2612: LD_INT 10
2614: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2615: LD_ADDR_OWVAR 45
2619: PUSH
2620: LD_INT 15
2622: ST_TO_ADDR
// end else
2623: GO 2649
// begin bc_type := b_lab_half ;
2625: LD_ADDR_OWVAR 42
2629: PUSH
2630: LD_INT 7
2632: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2633: LD_ADDR_OWVAR 44
2637: PUSH
2638: LD_INT 10
2640: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2641: LD_ADDR_OWVAR 45
2645: PUSH
2646: LD_INT 9
2648: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2649: LD_OWVAR 42
2653: PUSH
2654: LD_INT 2
2656: EQUAL
2657: IFFALSE 2667
// bc_type := b_factory ;
2659: LD_ADDR_OWVAR 42
2663: PUSH
2664: LD_INT 3
2666: ST_TO_ADDR
// if bc_type = b_depot then
2667: LD_OWVAR 42
2671: PUSH
2672: LD_INT 0
2674: EQUAL
2675: IFFALSE 2724
// begin bc_type := b_warehouse ;
2677: LD_ADDR_OWVAR 42
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2685: LD_ADDR_EXP 31
2689: PUSH
2690: LD_VAR 0 3
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 3
2706: ARRAY
2707: PPUSH
2708: LD_VAR 0 3
2712: PUSH
2713: LD_INT 4
2715: ARRAY
2716: PPUSH
2717: CALL_OW 47
2721: ST_TO_ADDR
// continue ;
2722: GO 2535
// end ; if bc_type = b_armoury then
2724: LD_OWVAR 42
2728: PUSH
2729: LD_INT 4
2731: EQUAL
2732: IFFALSE 2742
// bc_type = b_barracks ;
2734: LD_ADDR_OWVAR 42
2738: PUSH
2739: LD_INT 5
2741: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 2
2754: ARRAY
2755: PPUSH
2756: LD_VAR 0 3
2760: PUSH
2761: LD_INT 3
2763: ARRAY
2764: PPUSH
2765: LD_VAR 0 3
2769: PUSH
2770: LD_INT 4
2772: ARRAY
2773: PPUSH
2774: CALL_OW 47
2778: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2779: LD_VAR 0 4
2783: PPUSH
2784: CALL_OW 266
2788: PUSH
2789: LD_INT 32
2791: EQUAL
2792: IFFALSE 2812
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_VAR 0 3
2803: PUSH
2804: LD_INT 7
2806: ARRAY
2807: PPUSH
2808: CALL_OW 431
// end ;
2812: GO 2535
2814: POP
2815: POP
// if not amDepot then
2816: LD_EXP 31
2820: NOT
2821: IFFALSE 2858
// begin bc_type := b_warehouse ;
2823: LD_ADDR_OWVAR 42
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// bc_level := 6 ;
2831: LD_ADDR_OWVAR 43
2835: PUSH
2836: LD_INT 6
2838: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2839: LD_ADDR_EXP 31
2843: PUSH
2844: LD_INT 52
2846: PPUSH
2847: LD_INT 12
2849: PPUSH
2850: LD_INT 3
2852: PPUSH
2853: CALL_OW 47
2857: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2858: LD_ADDR_OWVAR 42
2862: PUSH
2863: LD_INT 5
2865: ST_TO_ADDR
// bc_level := 6 ;
2866: LD_ADDR_OWVAR 43
2870: PUSH
2871: LD_INT 6
2873: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2874: LD_INT 61
2876: PPUSH
2877: LD_INT 29
2879: PPUSH
2880: LD_INT 5
2882: PPUSH
2883: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2887: LD_EXP 31
2891: PPUSH
2892: LD_STRING gamma
2894: PPUSH
2895: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2899: LD_EXP 31
2903: PPUSH
2904: CALL_OW 274
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: LD_INT 400
2914: PUSH
2915: LD_INT 320
2917: PUSH
2918: LD_INT 270
2920: PUSH
2921: LD_INT 230
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_OWVAR 67
2934: ARRAY
2935: PPUSH
2936: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2940: LD_EXP 31
2944: PPUSH
2945: CALL_OW 274
2949: PPUSH
2950: LD_INT 2
2952: PPUSH
2953: LD_INT 130
2955: PPUSH
2956: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 30
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: IFFALSE 3236
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_INT 22
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_INT 30
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PPUSH
3019: CALL_OW 69
3023: PUSH
3024: LD_INT 1
3026: ARRAY
3027: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3028: LD_ADDR_VAR 0 6
3032: PUSH
3033: LD_VAR 0 4
3037: PPUSH
3038: CALL_OW 250
3042: PPUSH
3043: LD_VAR 0 4
3047: PPUSH
3048: CALL_OW 251
3052: PPUSH
3053: LD_VAR 0 4
3057: PPUSH
3058: CALL_OW 254
3062: PPUSH
3063: CALL 76253 0 3
3067: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: LD_INT 19
3075: PUSH
3076: LD_INT 17
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3083: LD_STRING 06_remoteVehs_1
3085: PPUSH
3086: LD_INT 0
3088: PPUSH
3089: CALL_OW 30
3093: IFFALSE 3116
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: LD_VAR 0 2
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: LD_INT 22
3110: PPUSH
3111: CALL_OW 2
3115: ST_TO_ADDR
// for i in tmp do
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_VAR 0 6
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3234
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3129: LD_VAR 0 3
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: LD_VAR 0 3
3142: PUSH
3143: LD_INT 2
3145: ARRAY
3146: PPUSH
3147: CALL_OW 428
3151: PUSH
3152: LD_INT 0
3154: EQUAL
3155: IFFALSE 3232
// begin bc_type := blist [ 1 ] ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_VAR 0 2
3166: PUSH
3167: LD_INT 1
3169: ARRAY
3170: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3171: LD_VAR 0 3
3175: PUSH
3176: LD_INT 1
3178: ARRAY
3179: PPUSH
3180: LD_VAR 0 3
3184: PUSH
3185: LD_INT 2
3187: ARRAY
3188: PPUSH
3189: LD_VAR 0 3
3193: PUSH
3194: LD_INT 3
3196: ARRAY
3197: PPUSH
3198: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: CALL_OW 3
3219: ST_TO_ADDR
// if blist = 0 then
3220: LD_VAR 0 2
3224: PUSH
3225: LD_INT 0
3227: EQUAL
3228: IFFALSE 3232
// break ;
3230: GO 3234
// end ;
3232: GO 3126
3234: POP
3235: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3236: LD_STRING 06_remoteVehs_1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 30
3246: IFFALSE 3699
// begin bc_type := b_control_tower ;
3248: LD_ADDR_OWVAR 42
3252: PUSH
3253: LD_INT 36
3255: ST_TO_ADDR
// bc_level := 4 ;
3256: LD_ADDR_OWVAR 43
3260: PUSH
3261: LD_INT 4
3263: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3264: LD_EXP 31
3268: PPUSH
3269: LD_INT 36
3271: PPUSH
3272: LD_INT 62
3274: PPUSH
3275: LD_INT 12
3277: PPUSH
3278: LD_INT 3
3280: PPUSH
3281: CALL 54364 0 5
3285: PUSH
3286: LD_INT 92
3288: PUSH
3289: LD_INT 62
3291: PUSH
3292: LD_INT 12
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: NOT
3309: AND
3310: IFFALSE 3327
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3312: LD_INT 62
3314: PPUSH
3315: LD_INT 12
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: CALL_OW 47
3325: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3327: LD_EXP 31
3331: PPUSH
3332: LD_INT 36
3334: PPUSH
3335: LD_INT 37
3337: PPUSH
3338: LD_INT 18
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL 54364 0 5
3348: PUSH
3349: LD_INT 92
3351: PUSH
3352: LD_INT 37
3354: PUSH
3355: LD_INT 18
3357: PUSH
3358: LD_INT 3
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: PPUSH
3367: CALL_OW 69
3371: NOT
3372: AND
3373: IFFALSE 3390
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3375: LD_INT 37
3377: PPUSH
3378: LD_INT 18
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: CALL_OW 47
3388: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3390: LD_EXP 31
3394: PPUSH
3395: LD_INT 36
3397: PPUSH
3398: LD_INT 66
3400: PPUSH
3401: LD_INT 14
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: CALL 54364 0 5
3411: PUSH
3412: LD_INT 92
3414: PUSH
3415: LD_INT 66
3417: PUSH
3418: LD_INT 14
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: NOT
3435: AND
3436: IFFALSE 3453
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3438: LD_INT 66
3440: PPUSH
3441: LD_INT 14
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: CALL_OW 47
3451: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3453: LD_EXP 31
3457: PPUSH
3458: LD_INT 36
3460: PPUSH
3461: LD_INT 74
3463: PPUSH
3464: LD_INT 26
3466: PPUSH
3467: LD_INT 4
3469: PPUSH
3470: CALL 54364 0 5
3474: IFFALSE 3489
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3476: LD_INT 74
3478: PPUSH
3479: LD_INT 26
3481: PPUSH
3482: LD_INT 4
3484: PPUSH
3485: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3489: LD_INT 22
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 36
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: NOT
3518: IFFALSE 3522
// exit ;
3520: GO 4047
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: DOUBLE
3528: LD_INT 1
3530: DEC
3531: ST_TO_ADDR
3532: LD_INT 3
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 2
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_OWVAR 67
3554: ARRAY
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3697
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3559: LD_ADDR_OWVAR 37
3563: PUSH
3564: LD_INT 3
3566: PUSH
3567: LD_INT 2
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3586: LD_ADDR_OWVAR 39
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 2
3606: PPUSH
3607: CALL_OW 12
3611: ARRAY
3612: ST_TO_ADDR
// vc_control := control_remote ;
3613: LD_ADDR_OWVAR 38
3617: PUSH
3618: LD_INT 2
3620: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_OWVAR 40
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 5
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// veh := CreateVehicle ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: CALL_OW 45
3661: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_INT 3
3669: PPUSH
3670: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3674: LD_VAR 0 5
3678: PPUSH
3679: LD_INT 61
3681: PPUSH
3682: LD_INT 23
3684: PPUSH
3685: LD_INT 9
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 50
// end ;
3695: GO 3556
3697: POP
3698: POP
// end ; if gammaCommander = 1 then
3699: LD_EXP 13
3703: PUSH
3704: LD_INT 1
3706: EQUAL
3707: IFFALSE 3884
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3709: LD_ADDR_VAR 0 3
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 3
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: PUSH
3737: LD_OWVAR 67
3741: ARRAY
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3880
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3746: LD_ADDR_OWVAR 37
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 2
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 1
3763: PPUSH
3764: LD_INT 2
3766: PPUSH
3767: CALL_OW 12
3771: ARRAY
3772: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3773: LD_ADDR_OWVAR 39
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 2
3793: PPUSH
3794: CALL_OW 12
3798: ARRAY
3799: ST_TO_ADDR
// vc_control := control_manual ;
3800: LD_ADDR_OWVAR 38
3804: PUSH
3805: LD_INT 1
3807: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3808: LD_ADDR_OWVAR 40
3812: PUSH
3813: LD_INT 4
3815: PUSH
3816: LD_INT 5
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: CALL_OW 12
3833: ARRAY
3834: ST_TO_ADDR
// veh := CreateVehicle ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: CALL_OW 45
3844: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3845: LD_VAR 0 5
3849: PPUSH
3850: LD_INT 3
3852: PPUSH
3853: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3857: LD_VAR 0 5
3861: PPUSH
3862: LD_INT 61
3864: PPUSH
3865: LD_INT 23
3867: PPUSH
3868: LD_INT 9
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 50
// end ;
3878: GO 3743
3880: POP
3881: POP
// end else
3882: GO 4047
// if gammaCommander = 2 then
3884: LD_EXP 13
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: IFFALSE 4047
// begin bc_type := b_bunker ;
3894: LD_ADDR_OWVAR 42
3898: PUSH
3899: LD_INT 32
3901: ST_TO_ADDR
// bc_level := 6 ;
3902: LD_ADDR_OWVAR 43
3906: PUSH
3907: LD_INT 6
3909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: LD_INT 67
3917: PPUSH
3918: LD_INT 36
3920: PPUSH
3921: LD_INT 5
3923: PPUSH
3924: CALL_OW 47
3928: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3941: LD_ADDR_VAR 0 4
3945: PUSH
3946: LD_INT 61
3948: PPUSH
3949: LD_INT 40
3951: PPUSH
3952: LD_INT 5
3954: PPUSH
3955: CALL_OW 47
3959: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3960: LD_VAR 0 4
3964: PPUSH
3965: LD_INT 5
3967: PPUSH
3968: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3972: LD_ADDR_OWVAR 37
3976: PUSH
3977: LD_INT 2
3979: ST_TO_ADDR
// vc_engine := engine_combustion ;
3980: LD_ADDR_OWVAR 39
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// vc_control := control_manual ;
3988: LD_ADDR_OWVAR 38
3992: PUSH
3993: LD_INT 1
3995: ST_TO_ADDR
// vc_weapon := us_crane ;
3996: LD_ADDR_OWVAR 40
4000: PUSH
4001: LD_INT 13
4003: ST_TO_ADDR
// veh := CreateVehicle ;
4004: LD_ADDR_VAR 0 5
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 5
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4026: LD_VAR 0 5
4030: PPUSH
4031: LD_INT 61
4033: PPUSH
4034: LD_INT 23
4036: PPUSH
4037: LD_INT 9
4039: PPUSH
4040: LD_INT 0
4042: PPUSH
4043: CALL_OW 50
// end ; end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
// uc_side := 1 ;
4058: LD_ADDR_OWVAR 20
4062: PUSH
4063: LD_INT 1
4065: ST_TO_ADDR
// uc_nation := 1 ;
4066: LD_ADDR_OWVAR 21
4070: PUSH
4071: LD_INT 1
4073: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4074: LD_ADDR_EXP 26
4078: PUSH
4079: LD_STRING Denis
4081: PPUSH
4082: LD_EXP 1
4086: NOT
4087: PPUSH
4088: LD_STRING 06c_
4090: PPUSH
4091: CALL 40928 0 3
4095: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4096: LD_EXP 26
4100: PPUSH
4101: LD_INT 4
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4111: LD_ADDR_EXP 27
4115: PUSH
4116: LD_STRING Joan
4118: PPUSH
4119: LD_EXP 1
4123: NOT
4124: PPUSH
4125: LD_STRING 06c_
4127: PPUSH
4128: CALL 40928 0 3
4132: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4133: LD_EXP 27
4137: PPUSH
4138: LD_INT 4
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4148: LD_ADDR_EXP 24
4152: PUSH
4153: LD_STRING Mike
4155: PPUSH
4156: LD_EXP 1
4160: NOT
4161: PPUSH
4162: LD_STRING 06c_
4164: PPUSH
4165: CALL 40928 0 3
4169: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4170: LD_EXP 24
4174: PPUSH
4175: LD_INT 4
4177: PPUSH
4178: LD_INT 0
4180: PPUSH
4181: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4185: LD_STRING GladstoneIn07
4187: PPUSH
4188: LD_INT 0
4190: PPUSH
4191: CALL_OW 30
4195: NOT
4196: IFFALSE 4276
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4198: LD_ADDR_EXP 21
4202: PUSH
4203: LD_STRING Gladstone
4205: PPUSH
4206: LD_EXP 1
4210: NOT
4211: PPUSH
4212: LD_STRING 06c_
4214: PPUSH
4215: CALL 40928 0 3
4219: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4220: LD_EXP 21
4224: NOT
4225: PUSH
4226: LD_STRING GladstoneStayInDelta
4228: PPUSH
4229: LD_INT 0
4231: PPUSH
4232: CALL_OW 30
4236: AND
4237: IFFALSE 4261
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4239: LD_ADDR_EXP 21
4243: PUSH
4244: LD_STRING Gladstone
4246: PPUSH
4247: LD_EXP 1
4251: NOT
4252: PPUSH
4253: LD_STRING 05_
4255: PPUSH
4256: CALL 40928 0 3
4260: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4261: LD_EXP 21
4265: PPUSH
4266: LD_INT 4
4268: PPUSH
4269: LD_INT 0
4271: PPUSH
4272: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4276: LD_STRING LisaStayInDelta
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 30
4286: IFFALSE 4322
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4288: LD_ADDR_EXP 19
4292: PUSH
4293: LD_STRING Lisa
4295: PPUSH
4296: LD_INT 1
4298: PPUSH
4299: LD_STRING 05_
4301: PPUSH
4302: CALL 40928 0 3
4306: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4307: LD_EXP 19
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4322: LD_STRING BobbyStayInDelta
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 30
4332: IFFALSE 4368
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4334: LD_ADDR_EXP 17
4338: PUSH
4339: LD_STRING Bobby
4341: PPUSH
4342: LD_INT 1
4344: PPUSH
4345: LD_STRING 05_
4347: PPUSH
4348: CALL 40928 0 3
4352: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4353: LD_EXP 17
4357: PPUSH
4358: LD_INT 4
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4368: LD_STRING CyrusStayInDelta
4370: PPUSH
4371: LD_INT 0
4373: PPUSH
4374: CALL_OW 30
4378: IFFALSE 4414
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4380: LD_ADDR_EXP 18
4384: PUSH
4385: LD_STRING Cyrus
4387: PPUSH
4388: LD_INT 1
4390: PPUSH
4391: LD_STRING 05_
4393: PPUSH
4394: CALL 40928 0 3
4398: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4399: LD_EXP 18
4403: PPUSH
4404: LD_INT 4
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4414: LD_STRING BrownStayInDelta
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 30
4424: IFFALSE 4460
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4426: LD_ADDR_EXP 15
4430: PUSH
4431: LD_STRING Brown
4433: PPUSH
4434: LD_INT 1
4436: PPUSH
4437: LD_STRING 05_
4439: PPUSH
4440: CALL 40928 0 3
4444: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4445: LD_EXP 15
4449: PPUSH
4450: LD_INT 4
4452: PPUSH
4453: LD_INT 0
4455: PPUSH
4456: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4460: LD_STRING DonaldsonStayInDelta
4462: PPUSH
4463: LD_INT 0
4465: PPUSH
4466: CALL_OW 30
4470: IFFALSE 4506
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4472: LD_ADDR_EXP 16
4476: PUSH
4477: LD_STRING Donaldson
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_STRING 05_
4485: PPUSH
4486: CALL 40928 0 3
4490: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4491: LD_EXP 16
4495: PPUSH
4496: LD_INT 4
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4506: LD_ADDR_VAR 0 4
4510: PUSH
4511: LD_STRING OthersStayInDelta
4513: PPUSH
4514: CALL_OW 31
4518: ST_TO_ADDR
// if others > 2 then
4519: LD_VAR 0 4
4523: PUSH
4524: LD_INT 2
4526: GREATER
4527: IFFALSE 4590
// begin for j := 1 to 2 do
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_INT 2
4541: PUSH
4542: FOR_TO
4543: IFFALSE 4586
// begin SetTag ( others [ j ] , 107 ) ;
4545: LD_VAR 0 4
4549: PUSH
4550: LD_VAR 0 3
4554: ARRAY
4555: PPUSH
4556: LD_INT 107
4558: PPUSH
4559: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4563: LD_VAR 0 4
4567: PUSH
4568: LD_VAR 0 3
4572: ARRAY
4573: PPUSH
4574: LD_INT 4
4576: PPUSH
4577: LD_INT 0
4579: PPUSH
4580: CALL_OW 49
// end ;
4584: GO 4542
4586: POP
4587: POP
// end else
4588: GO 4651
// begin for j := 1 to others do
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: DOUBLE
4596: LD_INT 1
4598: DEC
4599: ST_TO_ADDR
4600: LD_VAR 0 4
4604: PUSH
4605: FOR_TO
4606: IFFALSE 4649
// begin SetTag ( others [ i ] , 107 ) ;
4608: LD_VAR 0 4
4612: PUSH
4613: LD_VAR 0 2
4617: ARRAY
4618: PPUSH
4619: LD_INT 107
4621: PPUSH
4622: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4626: LD_VAR 0 4
4630: PUSH
4631: LD_VAR 0 3
4635: ARRAY
4636: PPUSH
4637: LD_INT 4
4639: PPUSH
4640: LD_INT 0
4642: PPUSH
4643: CALL_OW 49
// end ;
4647: GO 4605
4649: POP
4650: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4651: LD_ADDR_VAR 0 4
4655: PUSH
4656: LD_STRING 06_other_apemans
4658: PPUSH
4659: CALL_OW 31
4663: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4664: LD_VAR 0 4
4668: PUSH
4669: LD_INT 3
4671: PUSH
4672: LD_INT 2
4674: PUSH
4675: LD_INT 2
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: PUSH
4687: LD_OWVAR 67
4691: ARRAY
4692: GREATEREQUAL
4693: IFFALSE 4726
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: LD_INT 3
4702: PUSH
4703: LD_INT 2
4705: PUSH
4706: LD_INT 2
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_OWVAR 67
4722: ARRAY
4723: ST_TO_ADDR
4724: GO 4736
// j := others ;
4726: LD_ADDR_VAR 0 3
4730: PUSH
4731: LD_VAR 0 4
4735: ST_TO_ADDR
// for i := 1 to j do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_VAR 0 3
4750: PUSH
4751: FOR_TO
4752: IFFALSE 4777
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4754: LD_VAR 0 4
4758: PUSH
4759: LD_VAR 0 2
4763: ARRAY
4764: PPUSH
4765: LD_INT 4
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
4775: GO 4751
4777: POP
4778: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4779: LD_INT 4
4781: PPUSH
4782: LD_INT 22
4784: PUSH
4785: LD_INT 1
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 21
4794: PUSH
4795: LD_INT 1
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: PPUSH
4811: LD_INT 53
4813: PPUSH
4814: LD_INT 19
4816: PPUSH
4817: CALL_OW 111
// end ;
4821: LD_VAR 0 1
4825: RET
// export function PrepareMacmillanSquad ; var i , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4826: LD_INT 0
4828: PPUSH
4829: PPUSH
4830: PPUSH
4831: PPUSH
4832: PPUSH
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
4840: PPUSH
4841: PPUSH
// prefix := 07c_ ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_STRING 07c_
4849: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4850: LD_ADDR_VAR 0 8
4854: PUSH
4855: LD_STRING 07_vehicles
4857: PPUSH
4858: EMPTY
4859: PPUSH
4860: CALL_OW 30
4864: ST_TO_ADDR
// if not vehicles and debug then
4865: LD_VAR 0 8
4869: NOT
4870: PUSH
4871: LD_EXP 1
4875: AND
4876: IFFALSE 4904
// vehicles := [ [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
4878: LD_ADDR_VAR 0 8
4882: PUSH
4883: LD_INT 2
4885: PUSH
4886: LD_INT 1
4888: PUSH
4889: LD_INT 1
4891: PUSH
4892: LD_INT 4
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: PUSH
4901: EMPTY
4902: LIST
4903: ST_TO_ADDR
// if not vehicles then
4904: LD_VAR 0 8
4908: NOT
4909: IFFALSE 4966
// begin area := westGammaSupportArea ;
4911: LD_ADDR_VAR 0 11
4915: PUSH
4916: LD_INT 16
4918: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4919: LD_ADDR_VAR 0 14
4923: PUSH
4924: LD_INT 37
4926: PUSH
4927: LD_INT 70
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4934: LD_ADDR_VAR 0 13
4938: PUSH
4939: LD_INT 43
4941: PUSH
4942: LD_INT 67
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// dir := 1 ;
4949: LD_ADDR_VAR 0 12
4953: PUSH
4954: LD_INT 1
4956: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4957: LD_INT 4200
4959: PPUSH
4960: CALL_OW 67
// end else
4964: GO 5012
// begin area := southGammaSupportArea ;
4966: LD_ADDR_VAR 0 11
4970: PUSH
4971: LD_INT 5
4973: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4974: LD_ADDR_VAR 0 14
4978: PUSH
4979: LD_INT 87
4981: PUSH
4982: LD_INT 147
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4989: LD_ADDR_VAR 0 13
4993: PUSH
4994: LD_INT 74
4996: PUSH
4997: LD_INT 129
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: ST_TO_ADDR
// dir := 0 ;
5004: LD_ADDR_VAR 0 12
5008: PUSH
5009: LD_INT 0
5011: ST_TO_ADDR
// end ; squad := [ ] ;
5012: LD_ADDR_VAR 0 5
5016: PUSH
5017: EMPTY
5018: ST_TO_ADDR
// tmp := [ ] ;
5019: LD_ADDR_VAR 0 6
5023: PUSH
5024: EMPTY
5025: ST_TO_ADDR
// tmpVehs := [ ] ;
5026: LD_ADDR_VAR 0 7
5030: PUSH
5031: EMPTY
5032: ST_TO_ADDR
// uc_side := 1 ;
5033: LD_ADDR_OWVAR 20
5037: PUSH
5038: LD_INT 1
5040: ST_TO_ADDR
// uc_nation := 1 ;
5041: LD_ADDR_OWVAR 21
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// if vehicles then
5049: LD_VAR 0 8
5053: IFFALSE 5187
// begin for i := 1 to vehicles do
5055: LD_ADDR_VAR 0 2
5059: PUSH
5060: DOUBLE
5061: LD_INT 1
5063: DEC
5064: ST_TO_ADDR
5065: LD_VAR 0 8
5069: PUSH
5070: FOR_TO
5071: IFFALSE 5185
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
5073: LD_ADDR_OWVAR 37
5077: PUSH
5078: LD_VAR 0 8
5082: PUSH
5083: LD_VAR 0 2
5087: ARRAY
5088: PUSH
5089: LD_INT 1
5091: ARRAY
5092: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
5093: LD_ADDR_OWVAR 39
5097: PUSH
5098: LD_VAR 0 8
5102: PUSH
5103: LD_VAR 0 2
5107: ARRAY
5108: PUSH
5109: LD_INT 2
5111: ARRAY
5112: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
5113: LD_ADDR_OWVAR 38
5117: PUSH
5118: LD_VAR 0 8
5122: PUSH
5123: LD_VAR 0 2
5127: ARRAY
5128: PUSH
5129: LD_INT 3
5131: ARRAY
5132: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
5133: LD_ADDR_OWVAR 40
5137: PUSH
5138: LD_VAR 0 8
5142: PUSH
5143: LD_VAR 0 2
5147: ARRAY
5148: PUSH
5149: LD_INT 4
5151: ARRAY
5152: ST_TO_ADDR
// veh := CreateVehicle ;
5153: LD_ADDR_VAR 0 9
5157: PUSH
5158: CALL_OW 45
5162: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5163: LD_ADDR_VAR 0 7
5167: PUSH
5168: LD_VAR 0 7
5172: PPUSH
5173: LD_VAR 0 9
5177: PPUSH
5178: CALL 78619 0 2
5182: ST_TO_ADDR
// end ;
5183: GO 5070
5185: POP
5186: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5187: LD_ADDR_EXP 14
5191: PUSH
5192: LD_STRING JMM
5194: PPUSH
5195: LD_EXP 1
5199: NOT
5200: PPUSH
5201: LD_VAR 0 10
5205: PPUSH
5206: CALL 40928 0 3
5210: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5211: LD_EXP 13
5215: PUSH
5216: LD_INT 1
5218: PUSH
5219: LD_INT 3
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: IN
5226: PUSH
5227: LD_EXP 15
5231: NOT
5232: AND
5233: IFFALSE 5294
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5235: LD_ADDR_EXP 15
5239: PUSH
5240: LD_STRING Brown
5242: PPUSH
5243: LD_EXP 1
5247: NOT
5248: PPUSH
5249: LD_VAR 0 10
5253: PPUSH
5254: CALL 40928 0 3
5258: ST_TO_ADDR
// if Brown then
5259: LD_EXP 15
5263: IFFALSE 5294
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5265: LD_ADDR_VAR 0 6
5269: PUSH
5270: LD_VAR 0 6
5274: PPUSH
5275: LD_VAR 0 6
5279: PUSH
5280: LD_INT 1
5282: PLUS
5283: PPUSH
5284: LD_EXP 15
5288: PPUSH
5289: CALL_OW 1
5293: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5294: LD_EXP 13
5298: PUSH
5299: LD_INT 2
5301: PUSH
5302: LD_INT 3
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: IN
5309: PUSH
5310: LD_EXP 16
5314: NOT
5315: AND
5316: IFFALSE 5377
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5318: LD_ADDR_EXP 16
5322: PUSH
5323: LD_STRING Donaldson
5325: PPUSH
5326: LD_EXP 1
5330: NOT
5331: PPUSH
5332: LD_VAR 0 10
5336: PPUSH
5337: CALL 40928 0 3
5341: ST_TO_ADDR
// if Donaldson then
5342: LD_EXP 16
5346: IFFALSE 5377
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5348: LD_ADDR_VAR 0 6
5352: PUSH
5353: LD_VAR 0 6
5357: PPUSH
5358: LD_VAR 0 6
5362: PUSH
5363: LD_INT 1
5365: PLUS
5366: PPUSH
5367: LD_EXP 16
5371: PPUSH
5372: CALL_OW 1
5376: ST_TO_ADDR
// end ; if not Bobby then
5377: LD_EXP 17
5381: NOT
5382: IFFALSE 5440
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5384: LD_ADDR_EXP 17
5388: PUSH
5389: LD_STRING Bobby
5391: PPUSH
5392: LD_INT 1
5394: PPUSH
5395: LD_VAR 0 10
5399: PPUSH
5400: CALL 40928 0 3
5404: ST_TO_ADDR
// if Bobby then
5405: LD_EXP 17
5409: IFFALSE 5440
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5411: LD_ADDR_VAR 0 6
5415: PUSH
5416: LD_VAR 0 6
5420: PPUSH
5421: LD_VAR 0 6
5425: PUSH
5426: LD_INT 1
5428: PLUS
5429: PPUSH
5430: LD_EXP 17
5434: PPUSH
5435: CALL_OW 1
5439: ST_TO_ADDR
// end ; if not Cyrus then
5440: LD_EXP 18
5444: NOT
5445: IFFALSE 5503
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5447: LD_ADDR_EXP 18
5451: PUSH
5452: LD_STRING Cyrus
5454: PPUSH
5455: LD_INT 1
5457: PPUSH
5458: LD_VAR 0 10
5462: PPUSH
5463: CALL 40928 0 3
5467: ST_TO_ADDR
// if Cyrus then
5468: LD_EXP 18
5472: IFFALSE 5503
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5474: LD_ADDR_VAR 0 6
5478: PUSH
5479: LD_VAR 0 6
5483: PPUSH
5484: LD_VAR 0 6
5488: PUSH
5489: LD_INT 1
5491: PLUS
5492: PPUSH
5493: LD_EXP 18
5497: PPUSH
5498: CALL_OW 1
5502: ST_TO_ADDR
// end ; if not Lisa then
5503: LD_EXP 19
5507: NOT
5508: IFFALSE 5569
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5510: LD_ADDR_EXP 19
5514: PUSH
5515: LD_STRING Lisa
5517: PPUSH
5518: LD_EXP 1
5522: NOT
5523: PPUSH
5524: LD_VAR 0 10
5528: PPUSH
5529: CALL 40928 0 3
5533: ST_TO_ADDR
// if Lisa then
5534: LD_EXP 19
5538: IFFALSE 5569
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5540: LD_ADDR_VAR 0 6
5544: PUSH
5545: LD_VAR 0 6
5549: PPUSH
5550: LD_VAR 0 6
5554: PUSH
5555: LD_INT 1
5557: PLUS
5558: PPUSH
5559: LD_EXP 19
5563: PPUSH
5564: CALL_OW 1
5568: ST_TO_ADDR
// end ; if not Frank then
5569: LD_EXP 20
5573: NOT
5574: IFFALSE 5635
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5576: LD_ADDR_EXP 20
5580: PUSH
5581: LD_STRING Frank
5583: PPUSH
5584: LD_EXP 1
5588: NOT
5589: PPUSH
5590: LD_VAR 0 10
5594: PPUSH
5595: CALL 40928 0 3
5599: ST_TO_ADDR
// if Frank then
5600: LD_EXP 20
5604: IFFALSE 5635
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5606: LD_ADDR_VAR 0 6
5610: PUSH
5611: LD_VAR 0 6
5615: PPUSH
5616: LD_VAR 0 6
5620: PUSH
5621: LD_INT 1
5623: PLUS
5624: PPUSH
5625: LD_EXP 20
5629: PPUSH
5630: CALL_OW 1
5634: ST_TO_ADDR
// end ; if not Kikuchi then
5635: LD_EXP 22
5639: NOT
5640: IFFALSE 5698
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5642: LD_ADDR_EXP 22
5646: PUSH
5647: LD_STRING Kikuchi
5649: PPUSH
5650: LD_INT 1
5652: PPUSH
5653: LD_VAR 0 10
5657: PPUSH
5658: CALL 40928 0 3
5662: ST_TO_ADDR
// if Kikuchi then
5663: LD_EXP 22
5667: IFFALSE 5698
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5669: LD_ADDR_VAR 0 6
5673: PUSH
5674: LD_VAR 0 6
5678: PPUSH
5679: LD_VAR 0 6
5683: PUSH
5684: LD_INT 1
5686: PLUS
5687: PPUSH
5688: LD_EXP 22
5692: PPUSH
5693: CALL_OW 1
5697: ST_TO_ADDR
// end ; if not Gladstone then
5698: LD_EXP 21
5702: NOT
5703: IFFALSE 5764
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5705: LD_ADDR_EXP 21
5709: PUSH
5710: LD_STRING Gladstone
5712: PPUSH
5713: LD_EXP 1
5717: NOT
5718: PPUSH
5719: LD_VAR 0 10
5723: PPUSH
5724: CALL 40928 0 3
5728: ST_TO_ADDR
// if Gladstone then
5729: LD_EXP 21
5733: IFFALSE 5764
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5735: LD_ADDR_VAR 0 6
5739: PUSH
5740: LD_VAR 0 6
5744: PPUSH
5745: LD_VAR 0 6
5749: PUSH
5750: LD_INT 1
5752: PLUS
5753: PPUSH
5754: LD_EXP 21
5758: PPUSH
5759: CALL_OW 1
5763: ST_TO_ADDR
// end ; if not Khatam then
5764: LD_EXP 23
5768: NOT
5769: IFFALSE 5827
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5771: LD_ADDR_EXP 23
5775: PUSH
5776: LD_STRING Khatam
5778: PPUSH
5779: LD_INT 1
5781: PPUSH
5782: LD_VAR 0 10
5786: PPUSH
5787: CALL 40928 0 3
5791: ST_TO_ADDR
// if Khatam then
5792: LD_EXP 23
5796: IFFALSE 5827
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5798: LD_ADDR_VAR 0 6
5802: PUSH
5803: LD_VAR 0 6
5807: PPUSH
5808: LD_VAR 0 6
5812: PUSH
5813: LD_INT 1
5815: PLUS
5816: PPUSH
5817: LD_EXP 23
5821: PPUSH
5822: CALL_OW 1
5826: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5827: LD_ADDR_VAR 0 4
5831: PUSH
5832: LD_STRING 07c_others
5834: PPUSH
5835: CALL_OW 31
5839: ST_TO_ADDR
// squad := others ;
5840: LD_ADDR_VAR 0 5
5844: PUSH
5845: LD_VAR 0 4
5849: ST_TO_ADDR
// if others then
5850: LD_VAR 0 4
5854: IFFALSE 5905
// for i in others do
5856: LD_ADDR_VAR 0 2
5860: PUSH
5861: LD_VAR 0 4
5865: PUSH
5866: FOR_IN
5867: IFFALSE 5903
// begin SetTag ( i , 108 ) ;
5869: LD_VAR 0 2
5873: PPUSH
5874: LD_INT 108
5876: PPUSH
5877: CALL_OW 109
// tmp := Join ( tmp , i ) ;
5881: LD_ADDR_VAR 0 6
5885: PUSH
5886: LD_VAR 0 6
5890: PPUSH
5891: LD_VAR 0 2
5895: PPUSH
5896: CALL 78619 0 2
5900: ST_TO_ADDR
// end ;
5901: GO 5866
5903: POP
5904: POP
// if tmp then
5905: LD_VAR 0 6
5909: IFFALSE 6144
// begin tmp := Join ( tmp , JMM ) ;
5911: LD_ADDR_VAR 0 6
5915: PUSH
5916: LD_VAR 0 6
5920: PPUSH
5921: LD_EXP 14
5925: PPUSH
5926: CALL 78619 0 2
5930: ST_TO_ADDR
// for i in tmp do
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: LD_VAR 0 6
5940: PUSH
5941: FOR_IN
5942: IFFALSE 6142
// begin SetDir ( i , dir ) ;
5944: LD_VAR 0 2
5948: PPUSH
5949: LD_VAR 0 12
5953: PPUSH
5954: CALL_OW 233
// if GetClass ( i ) = class_mechanic and tmpVehs then
5958: LD_VAR 0 2
5962: PPUSH
5963: CALL_OW 257
5967: PUSH
5968: LD_INT 3
5970: EQUAL
5971: PUSH
5972: LD_VAR 0 7
5976: AND
5977: IFFALSE 6067
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5979: LD_VAR 0 7
5983: PUSH
5984: LD_INT 1
5986: ARRAY
5987: PPUSH
5988: LD_INT 0
5990: PPUSH
5991: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
5995: LD_VAR 0 7
5999: PUSH
6000: LD_INT 1
6002: ARRAY
6003: PPUSH
6004: LD_VAR 0 14
6008: PUSH
6009: LD_INT 1
6011: ARRAY
6012: PPUSH
6013: LD_VAR 0 14
6017: PUSH
6018: LD_INT 2
6020: ARRAY
6021: PPUSH
6022: LD_INT 0
6024: PPUSH
6025: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6029: LD_VAR 0 2
6033: PPUSH
6034: LD_VAR 0 7
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PPUSH
6043: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6047: LD_ADDR_VAR 0 7
6051: PUSH
6052: LD_VAR 0 7
6056: PPUSH
6057: LD_INT 1
6059: PPUSH
6060: CALL_OW 3
6064: ST_TO_ADDR
// end else
6065: GO 6084
// PlaceUnitArea ( i , area , false ) ;
6067: LD_VAR 0 2
6071: PPUSH
6072: LD_VAR 0 11
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6084: LD_VAR 0 2
6088: PPUSH
6089: LD_VAR 0 13
6093: PUSH
6094: LD_INT 1
6096: ARRAY
6097: PPUSH
6098: LD_VAR 0 13
6102: PUSH
6103: LD_INT 2
6105: ARRAY
6106: PPUSH
6107: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6111: LD_INT 35
6113: PPUSH
6114: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6118: LD_VAR 0 11
6122: PPUSH
6123: LD_INT 22
6125: PUSH
6126: LD_INT 1
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 70
6137: NOT
6138: IFFALSE 6111
// end ;
6140: GO 5941
6142: POP
6143: POP
// end ; if not IsPlaced ( JMM ) or not IsInUnit ( JMM ) then
6144: LD_EXP 14
6148: PPUSH
6149: CALL_OW 305
6153: NOT
6154: PUSH
6155: LD_EXP 14
6159: PPUSH
6160: CALL_OW 310
6164: NOT
6165: OR
6166: IFFALSE 6198
// PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6168: LD_EXP 14
6172: PPUSH
6173: LD_VAR 0 14
6177: PUSH
6178: LD_INT 1
6180: ARRAY
6181: PPUSH
6182: LD_VAR 0 14
6186: PUSH
6187: LD_INT 2
6189: ARRAY
6190: PPUSH
6191: LD_INT 0
6193: PPUSH
6194: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6198: LD_EXP 14
6202: PPUSH
6203: LD_VAR 0 13
6207: PUSH
6208: LD_INT 1
6210: ARRAY
6211: PPUSH
6212: LD_VAR 0 13
6216: PUSH
6217: LD_INT 2
6219: ARRAY
6220: PPUSH
6221: CALL_OW 111
// jmmArrival := true ;
6225: LD_ADDR_EXP 8
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// end ;
6233: LD_VAR 0 1
6237: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6238: LD_INT 0
6240: PPUSH
6241: PPUSH
6242: PPUSH
6243: PPUSH
6244: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6245: LD_INT 1
6247: PPUSH
6248: LD_INT 17
6250: PPUSH
6251: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6255: LD_INT 2
6257: PPUSH
6258: LD_INT 17
6260: PPUSH
6261: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_empty ] ) ;
6265: LD_ADDR_VAR 0 5
6269: PUSH
6270: LD_INT 6
6272: PPUSH
6273: LD_INT 58
6275: PUSH
6276: EMPTY
6277: LIST
6278: PPUSH
6279: CALL_OW 70
6283: ST_TO_ADDR
// if tmp then
6284: LD_VAR 0 5
6288: IFFALSE 6316
// for i in tmp do
6290: LD_ADDR_VAR 0 2
6294: PUSH
6295: LD_VAR 0 5
6299: PUSH
6300: FOR_IN
6301: IFFALSE 6314
// RemoveUnit ( i ) ;
6303: LD_VAR 0 2
6307: PPUSH
6308: CALL_OW 64
6312: GO 6300
6314: POP
6315: POP
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6316: LD_ADDR_VAR 0 5
6320: PUSH
6321: LD_INT 6
6323: PPUSH
6324: LD_INT 3
6326: PUSH
6327: LD_INT 21
6329: PUSH
6330: LD_INT 3
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PPUSH
6341: CALL_OW 70
6345: ST_TO_ADDR
// if tmp then
6346: LD_VAR 0 5
6350: IFFALSE 6374
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6352: LD_VAR 0 5
6356: PPUSH
6357: LD_INT 33
6359: PPUSH
6360: LD_INT 39
6362: PPUSH
6363: CALL_OW 111
// wait ( 0 0$3 ) ;
6367: LD_INT 105
6369: PPUSH
6370: CALL_OW 67
// end ; repeat wait ( 0 0$2 ) ;
6374: LD_INT 70
6376: PPUSH
6377: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6381: LD_INT 6
6383: PPUSH
6384: LD_INT 50
6386: PUSH
6387: EMPTY
6388: LIST
6389: PPUSH
6390: CALL_OW 70
6394: NOT
6395: IFFALSE 6374
// uc_side := 4 ;
6397: LD_ADDR_OWVAR 20
6401: PUSH
6402: LD_INT 4
6404: ST_TO_ADDR
// uc_nation := 1 ;
6405: LD_ADDR_OWVAR 21
6409: PUSH
6410: LD_INT 1
6412: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6413: LD_ADDR_EXP 28
6417: PUSH
6418: LD_STRING Sikorski
6420: PPUSH
6421: LD_INT 0
6423: PPUSH
6424: LD_STRING 
6426: PPUSH
6427: CALL 40928 0 3
6431: ST_TO_ADDR
// vc_engine := engine_combustion ;
6432: LD_ADDR_OWVAR 39
6436: PUSH
6437: LD_INT 1
6439: ST_TO_ADDR
// vc_control := control_manual ;
6440: LD_ADDR_OWVAR 38
6444: PUSH
6445: LD_INT 1
6447: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6448: LD_ADDR_OWVAR 40
6452: PUSH
6453: LD_INT 6
6455: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6456: LD_ADDR_OWVAR 37
6460: PUSH
6461: LD_INT 4
6463: ST_TO_ADDR
// veh := CreateVehicle ;
6464: LD_ADDR_VAR 0 4
6468: PUSH
6469: CALL_OW 45
6473: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6474: LD_VAR 0 4
6478: PPUSH
6479: LD_INT 3
6481: PPUSH
6482: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6486: LD_VAR 0 4
6490: PPUSH
6491: LD_INT 4
6493: NEG
6494: PPUSH
6495: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6499: LD_VAR 0 4
6503: PPUSH
6504: LD_INT 70
6506: PPUSH
6507: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: LD_INT 6
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6526: LD_EXP 28
6530: PPUSH
6531: LD_VAR 0 4
6535: PPUSH
6536: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6540: LD_EXP 28
6544: PPUSH
6545: LD_INT 37
6547: PPUSH
6548: LD_INT 30
6550: PPUSH
6551: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6555: LD_INT 10
6557: PPUSH
6558: CALL_OW 67
// InitHc_All ( ) ;
6562: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6566: LD_ADDR_VAR 0 2
6570: PUSH
6571: DOUBLE
6572: LD_INT 1
6574: DEC
6575: ST_TO_ADDR
6576: LD_INT 3
6578: PUSH
6579: LD_INT 2
6581: PUSH
6582: LD_INT 2
6584: PUSH
6585: LD_INT 2
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: PUSH
6594: LD_OWVAR 67
6598: ARRAY
6599: PUSH
6600: FOR_TO
6601: IFFALSE 6736
// begin repeat wait ( 0 0$2 ) ;
6603: LD_INT 70
6605: PPUSH
6606: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6610: LD_INT 6
6612: PPUSH
6613: LD_INT 50
6615: PUSH
6616: EMPTY
6617: LIST
6618: PPUSH
6619: CALL_OW 70
6623: NOT
6624: IFFALSE 6603
// uc_side := 4 ;
6626: LD_ADDR_OWVAR 20
6630: PUSH
6631: LD_INT 4
6633: ST_TO_ADDR
// uc_nation := 1 ;
6634: LD_ADDR_OWVAR 21
6638: PUSH
6639: LD_INT 1
6641: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6642: LD_INT 0
6644: PPUSH
6645: LD_INT 1
6647: PPUSH
6648: LD_INT 4
6650: PPUSH
6651: LD_INT 7
6653: PPUSH
6654: CALL_OW 12
6658: PPUSH
6659: CALL_OW 380
// un := CreateHuman ;
6663: LD_ADDR_VAR 0 3
6667: PUSH
6668: CALL_OW 44
6672: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6673: LD_VAR 0 3
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 233
// SetTag ( un , 101 ) ;
6685: LD_VAR 0 3
6689: PPUSH
6690: LD_INT 101
6692: PPUSH
6693: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6697: LD_VAR 0 3
6701: PPUSH
6702: LD_INT 6
6704: PPUSH
6705: LD_INT 0
6707: PPUSH
6708: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6712: LD_VAR 0 3
6716: PPUSH
6717: LD_INT 25
6719: PPUSH
6720: LD_INT 27
6722: PPUSH
6723: CALL_OW 111
// wait ( 0 0$1 ) ;
6727: LD_INT 35
6729: PPUSH
6730: CALL_OW 67
// end ;
6734: GO 6600
6736: POP
6737: POP
// repeat wait ( 0 0$2 ) ;
6738: LD_INT 70
6740: PPUSH
6741: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , class_soldier ] ] ) do
6745: LD_ADDR_VAR 0 2
6749: PUSH
6750: LD_INT 22
6752: PUSH
6753: LD_INT 4
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 25
6762: PUSH
6763: LD_INT 1
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PPUSH
6774: CALL_OW 69
6778: PUSH
6779: FOR_IN
6780: IFFALSE 6843
// ComAttackUnit ( i , FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) [ 1 ] ) ;
6782: LD_VAR 0 2
6786: PPUSH
6787: LD_INT 17
6789: PPUSH
6790: LD_INT 22
6792: PUSH
6793: LD_INT 1
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 2
6802: PUSH
6803: LD_INT 58
6805: PUSH
6806: EMPTY
6807: LIST
6808: PUSH
6809: LD_INT 33
6811: PUSH
6812: LD_INT 2
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PPUSH
6828: CALL_OW 70
6832: PUSH
6833: LD_INT 1
6835: ARRAY
6836: PPUSH
6837: CALL_OW 115
6841: GO 6779
6843: POP
6844: POP
// until not FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) ;
6845: LD_INT 17
6847: PPUSH
6848: LD_INT 22
6850: PUSH
6851: LD_INT 1
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: LD_INT 2
6860: PUSH
6861: LD_INT 58
6863: PUSH
6864: EMPTY
6865: LIST
6866: PUSH
6867: LD_INT 33
6869: PUSH
6870: LD_INT 2
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 70
6890: NOT
6891: IFFALSE 6738
// for i := 1 to 2 do
6893: LD_ADDR_VAR 0 2
6897: PUSH
6898: DOUBLE
6899: LD_INT 1
6901: DEC
6902: ST_TO_ADDR
6903: LD_INT 2
6905: PUSH
6906: FOR_TO
6907: IFFALSE 7019
// begin uc_side := 4 ;
6909: LD_ADDR_OWVAR 20
6913: PUSH
6914: LD_INT 4
6916: ST_TO_ADDR
// uc_nation := 1 ;
6917: LD_ADDR_OWVAR 21
6921: PUSH
6922: LD_INT 1
6924: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6925: LD_INT 0
6927: PPUSH
6928: LD_INT 4
6930: PPUSH
6931: LD_INT 3
6933: PPUSH
6934: LD_INT 5
6936: PPUSH
6937: CALL_OW 12
6941: PPUSH
6942: CALL_OW 380
// un := CreateHuman ;
6946: LD_ADDR_VAR 0 3
6950: PUSH
6951: CALL_OW 44
6955: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6956: LD_VAR 0 3
6960: PPUSH
6961: LD_INT 3
6963: PPUSH
6964: CALL_OW 233
// SetTag ( un , 101 ) ;
6968: LD_VAR 0 3
6972: PPUSH
6973: LD_INT 101
6975: PPUSH
6976: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6980: LD_VAR 0 3
6984: PPUSH
6985: LD_INT 6
6987: PPUSH
6988: LD_INT 0
6990: PPUSH
6991: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6995: LD_VAR 0 3
6999: PPUSH
7000: LD_INT 25
7002: PPUSH
7003: LD_INT 27
7005: PPUSH
7006: CALL_OW 111
// wait ( 0 0$1 ) ;
7010: LD_INT 35
7012: PPUSH
7013: CALL_OW 67
// end ;
7017: GO 6906
7019: POP
7020: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
7021: LD_ADDR_VAR 0 2
7025: PUSH
7026: DOUBLE
7027: LD_INT 1
7029: DEC
7030: ST_TO_ADDR
7031: LD_INT 5
7033: PUSH
7034: LD_INT 4
7036: PUSH
7037: LD_INT 3
7039: PUSH
7040: LD_INT 3
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: ARRAY
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7321
// begin repeat wait ( 0 0$2 ) ;
7058: LD_INT 70
7060: PPUSH
7061: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
7065: LD_INT 6
7067: PPUSH
7068: LD_INT 50
7070: PUSH
7071: EMPTY
7072: LIST
7073: PPUSH
7074: CALL_OW 70
7078: NOT
7079: IFFALSE 7058
// uc_side := 4 ;
7081: LD_ADDR_OWVAR 20
7085: PUSH
7086: LD_INT 4
7088: ST_TO_ADDR
// uc_nation := 1 ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_INT 1
7096: ST_TO_ADDR
// vc_engine := engine_combustion ;
7097: LD_ADDR_OWVAR 39
7101: PUSH
7102: LD_INT 1
7104: ST_TO_ADDR
// vc_control := control_manual ;
7105: LD_ADDR_OWVAR 38
7109: PUSH
7110: LD_INT 1
7112: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
7113: LD_ADDR_OWVAR 40
7117: PUSH
7118: LD_INT 5
7120: PUSH
7121: LD_INT 7
7123: PUSH
7124: LD_INT 5
7126: PUSH
7127: LD_INT 4
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: PUSH
7136: LD_VAR 0 2
7140: PUSH
7141: LD_INT 4
7143: MOD
7144: PUSH
7145: LD_INT 1
7147: PLUS
7148: ARRAY
7149: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
7150: LD_ADDR_OWVAR 37
7154: PUSH
7155: LD_INT 3
7157: PUSH
7158: LD_INT 3
7160: PUSH
7161: LD_INT 4
7163: PUSH
7164: LD_INT 4
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: PUSH
7173: LD_VAR 0 2
7177: PUSH
7178: LD_INT 4
7180: MOD
7181: PUSH
7182: LD_INT 1
7184: PLUS
7185: ARRAY
7186: ST_TO_ADDR
// veh := CreateVehicle ;
7187: LD_ADDR_VAR 0 4
7191: PUSH
7192: CALL_OW 45
7196: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
7197: LD_VAR 0 4
7201: PPUSH
7202: LD_INT 3
7204: PPUSH
7205: CALL_OW 233
// SetTag ( veh , 0 ) ;
7209: LD_VAR 0 4
7213: PPUSH
7214: LD_INT 0
7216: PPUSH
7217: CALL_OW 109
// SetFuel ( veh , 70 ) ;
7221: LD_VAR 0 4
7225: PPUSH
7226: LD_INT 70
7228: PPUSH
7229: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
7233: LD_VAR 0 4
7237: PPUSH
7238: LD_INT 6
7240: PPUSH
7241: LD_INT 0
7243: PPUSH
7244: CALL_OW 49
// InitHc ;
7248: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
7252: LD_INT 0
7254: PPUSH
7255: LD_INT 3
7257: PPUSH
7258: LD_INT 4
7260: PPUSH
7261: LD_INT 7
7263: PPUSH
7264: CALL_OW 12
7268: PPUSH
7269: CALL_OW 380
// un := CreateHuman ;
7273: LD_ADDR_VAR 0 3
7277: PUSH
7278: CALL_OW 44
7282: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7283: LD_VAR 0 3
7287: PPUSH
7288: LD_VAR 0 4
7292: PPUSH
7293: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
7297: LD_VAR 0 3
7301: PPUSH
7302: LD_INT 30
7304: PPUSH
7305: LD_INT 22
7307: PPUSH
7308: CALL_OW 111
// wait ( 0 0$3 ) ;
7312: LD_INT 105
7314: PPUSH
7315: CALL_OW 67
// end ;
7319: GO 7055
7321: POP
7322: POP
// wait ( 0 0$10 ) ;
7323: LD_INT 350
7325: PPUSH
7326: CALL_OW 67
// end ;
7330: LD_VAR 0 1
7334: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7335: LD_INT 0
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
// gammaBase := [ ] ;
7341: LD_ADDR_VAR 0 4
7345: PUSH
7346: EMPTY
7347: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: LD_INT 22
7360: PUSH
7361: LD_INT 1
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 21
7370: PUSH
7371: LD_INT 3
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: PUSH
7378: LD_INT 50
7380: PUSH
7381: EMPTY
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: PPUSH
7389: CALL_OW 70
7393: ST_TO_ADDR
// for i in buildings do
7394: LD_ADDR_VAR 0 3
7398: PUSH
7399: LD_VAR 0 5
7403: PUSH
7404: FOR_IN
7405: IFFALSE 7842
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7407: LD_VAR 0 3
7411: PPUSH
7412: CALL_OW 266
7416: PUSH
7417: LD_INT 6
7419: PUSH
7420: LD_INT 7
7422: PUSH
7423: LD_INT 8
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: IN
7431: IFFALSE 7545
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7433: LD_ADDR_VAR 0 4
7437: PUSH
7438: LD_VAR 0 4
7442: PUSH
7443: LD_VAR 0 3
7447: PPUSH
7448: CALL_OW 266
7452: PUSH
7453: LD_VAR 0 3
7457: PPUSH
7458: CALL_OW 250
7462: PUSH
7463: LD_VAR 0 3
7467: PPUSH
7468: CALL_OW 251
7472: PUSH
7473: LD_VAR 0 3
7477: PPUSH
7478: CALL_OW 254
7482: PUSH
7483: LD_VAR 0 3
7487: PPUSH
7488: CALL_OW 267
7492: PUSH
7493: LD_VAR 0 3
7497: PPUSH
7498: CALL_OW 248
7502: PUSH
7503: LD_VAR 0 3
7507: PPUSH
7508: LD_INT 1
7510: PPUSH
7511: CALL_OW 268
7515: PUSH
7516: LD_VAR 0 3
7520: PPUSH
7521: LD_INT 2
7523: PPUSH
7524: CALL_OW 268
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: PUSH
7539: EMPTY
7540: LIST
7541: ADD
7542: ST_TO_ADDR
7543: GO 7840
// if GetBType ( i ) = b_bunker then
7545: LD_VAR 0 3
7549: PPUSH
7550: CALL_OW 266
7554: PUSH
7555: LD_INT 32
7557: EQUAL
7558: IFFALSE 7655
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7560: LD_ADDR_VAR 0 4
7564: PUSH
7565: LD_VAR 0 4
7569: PUSH
7570: LD_VAR 0 3
7574: PPUSH
7575: CALL_OW 266
7579: PUSH
7580: LD_VAR 0 3
7584: PPUSH
7585: CALL_OW 250
7589: PUSH
7590: LD_VAR 0 3
7594: PPUSH
7595: CALL_OW 251
7599: PUSH
7600: LD_VAR 0 3
7604: PPUSH
7605: CALL_OW 254
7609: PUSH
7610: LD_VAR 0 3
7614: PPUSH
7615: CALL_OW 267
7619: PUSH
7620: LD_VAR 0 3
7624: PPUSH
7625: CALL_OW 248
7629: PUSH
7630: LD_VAR 0 3
7634: PPUSH
7635: CALL_OW 269
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: ADD
7652: ST_TO_ADDR
7653: GO 7840
// if GetBType ( i ) = b_factory then
7655: LD_VAR 0 3
7659: PPUSH
7660: CALL_OW 266
7664: PUSH
7665: LD_INT 3
7667: EQUAL
7668: IFFALSE 7758
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7670: LD_ADDR_VAR 0 4
7674: PUSH
7675: LD_VAR 0 4
7679: PPUSH
7680: LD_INT 1
7682: PPUSH
7683: LD_VAR 0 3
7687: PPUSH
7688: CALL_OW 266
7692: PUSH
7693: LD_VAR 0 3
7697: PPUSH
7698: CALL_OW 250
7702: PUSH
7703: LD_VAR 0 3
7707: PPUSH
7708: CALL_OW 251
7712: PUSH
7713: LD_VAR 0 3
7717: PPUSH
7718: CALL_OW 254
7722: PUSH
7723: LD_VAR 0 3
7727: PPUSH
7728: CALL_OW 267
7732: PUSH
7733: LD_VAR 0 3
7737: PPUSH
7738: CALL_OW 248
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 2
7755: ST_TO_ADDR
7756: GO 7840
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7758: LD_ADDR_VAR 0 4
7762: PUSH
7763: LD_VAR 0 4
7767: PUSH
7768: LD_VAR 0 3
7772: PPUSH
7773: CALL_OW 266
7777: PUSH
7778: LD_VAR 0 3
7782: PPUSH
7783: CALL_OW 250
7787: PUSH
7788: LD_VAR 0 3
7792: PPUSH
7793: CALL_OW 251
7797: PUSH
7798: LD_VAR 0 3
7802: PPUSH
7803: CALL_OW 254
7807: PUSH
7808: LD_VAR 0 3
7812: PPUSH
7813: CALL_OW 267
7817: PUSH
7818: LD_VAR 0 3
7822: PPUSH
7823: CALL_OW 248
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: PUSH
7836: EMPTY
7837: LIST
7838: ADD
7839: ST_TO_ADDR
// end ;
7840: GO 7404
7842: POP
7843: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7844: LD_VAR 0 4
7848: PPUSH
7849: LD_STRING 08_GammaBase
7851: PPUSH
7852: CALL_OW 39
// end ;
7856: LD_VAR 0 2
7860: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7861: LD_INT 0
7863: PPUSH
7864: PPUSH
7865: PPUSH
7866: PPUSH
7867: PPUSH
7868: PPUSH
7869: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
7870: LD_ADDR_VAR 0 3
7874: PUSH
7875: LD_INT 17
7877: PPUSH
7878: LD_INT 22
7880: PUSH
7881: LD_INT 1
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: LD_INT 3
7890: PUSH
7891: LD_INT 21
7893: PUSH
7894: LD_INT 3
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 3
7907: PUSH
7908: LD_INT 33
7910: PUSH
7911: LD_INT 2
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: PPUSH
7927: CALL_OW 70
7931: ST_TO_ADDR
// if tmp then
7932: LD_VAR 0 3
7936: IFFALSE 8055
// begin for i in tmp do
7938: LD_ADDR_VAR 0 2
7942: PUSH
7943: LD_VAR 0 3
7947: PUSH
7948: FOR_IN
7949: IFFALSE 7980
// begin SetSide ( i , 4 ) ;
7951: LD_VAR 0 2
7955: PPUSH
7956: LD_INT 4
7958: PPUSH
7959: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
7963: LD_VAR 0 2
7967: PPUSH
7968: LD_INT 42
7970: PPUSH
7971: LD_INT 22
7973: PPUSH
7974: CALL_OW 111
// end ;
7978: GO 7948
7980: POP
7981: POP
// repeat wait ( 0 0$3 ) ;
7982: LD_INT 105
7984: PPUSH
7985: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
7989: LD_VAR 0 3
7993: PPUSH
7994: LD_INT 51
7996: PPUSH
7997: LD_INT 16
7999: PPUSH
8000: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
8004: LD_VAR 0 3
8008: PPUSH
8009: LD_INT 95
8011: PUSH
8012: LD_INT 17
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PPUSH
8019: CALL_OW 72
8023: NOT
8024: IFFALSE 7982
// for i in tmp do
8026: LD_ADDR_VAR 0 2
8030: PUSH
8031: LD_VAR 0 3
8035: PUSH
8036: FOR_IN
8037: IFFALSE 8053
// SetSide ( i , 1 ) ;
8039: LD_VAR 0 2
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 235
8051: GO 8036
8053: POP
8054: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
8055: LD_ADDR_VAR 0 3
8059: PUSH
8060: LD_INT 17
8062: PPUSH
8063: LD_INT 22
8065: PUSH
8066: LD_INT 1
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 33
8075: PUSH
8076: LD_INT 2
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PPUSH
8087: CALL_OW 70
8091: ST_TO_ADDR
// if tmp then
8092: LD_VAR 0 3
8096: IFFALSE 8120
// begin ComMoveXY ( tmp , 40 , 32 ) ;
8098: LD_VAR 0 3
8102: PPUSH
8103: LD_INT 40
8105: PPUSH
8106: LD_INT 32
8108: PPUSH
8109: CALL_OW 111
// wait ( 0 0$3 ) ;
8113: LD_INT 105
8115: PPUSH
8116: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8120: LD_ADDR_VAR 0 3
8124: PUSH
8125: LD_INT 17
8127: PPUSH
8128: LD_INT 22
8130: PUSH
8131: LD_INT 1
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PUSH
8138: LD_INT 2
8140: PUSH
8141: LD_INT 21
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_INT 21
8153: PUSH
8154: LD_INT 3
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 70
8174: ST_TO_ADDR
// if tmp then
8175: LD_VAR 0 3
8179: IFFALSE 8327
// begin repeat wait ( 0 0$1 ) ;
8181: LD_INT 35
8183: PPUSH
8184: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8188: LD_ADDR_VAR 0 3
8192: PUSH
8193: LD_INT 17
8195: PPUSH
8196: LD_INT 22
8198: PUSH
8199: LD_INT 1
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 2
8208: PUSH
8209: LD_INT 21
8211: PUSH
8212: LD_INT 2
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: LD_INT 21
8221: PUSH
8222: LD_INT 3
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PPUSH
8238: CALL_OW 70
8242: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
8243: LD_ADDR_VAR 0 2
8247: PUSH
8248: LD_INT 22
8250: PUSH
8251: LD_INT 4
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: LD_INT 2
8260: PUSH
8261: LD_INT 25
8263: PUSH
8264: LD_INT 1
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 21
8273: PUSH
8274: LD_INT 2
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PPUSH
8290: CALL_OW 69
8294: PUSH
8295: FOR_IN
8296: IFFALSE 8318
// ComAttackUnit ( i , tmp [ 1 ] ) ;
8298: LD_VAR 0 2
8302: PPUSH
8303: LD_VAR 0 3
8307: PUSH
8308: LD_INT 1
8310: ARRAY
8311: PPUSH
8312: CALL_OW 115
8316: GO 8295
8318: POP
8319: POP
// until not tmp ;
8320: LD_VAR 0 3
8324: NOT
8325: IFFALSE 8181
// end ; wait ( 0 0$2 ) ;
8327: LD_INT 70
8329: PPUSH
8330: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8334: LD_ADDR_VAR 0 3
8338: PUSH
8339: LD_INT 22
8341: PUSH
8342: LD_INT 4
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PPUSH
8349: CALL_OW 69
8353: ST_TO_ADDR
// ComAgressiveMove ( tmp , 52 , 54 ) ;
8354: LD_VAR 0 3
8358: PPUSH
8359: LD_INT 52
8361: PPUSH
8362: LD_INT 54
8364: PPUSH
8365: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
8369: LD_VAR 0 3
8373: PPUSH
8374: LD_INT 175
8376: PPUSH
8377: CALL_OW 202
// wait ( 0 0$5 ) ;
8381: LD_INT 175
8383: PPUSH
8384: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 42 , 52 ) ;
8388: LD_VAR 0 3
8392: PPUSH
8393: LD_INT 120
8395: PUSH
8396: LD_INT 101
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 72
8407: PPUSH
8408: LD_INT 42
8410: PPUSH
8411: LD_INT 52
8413: PPUSH
8414: CALL_OW 114
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8418: LD_VAR 0 3
8422: PPUSH
8423: LD_INT 120
8425: PUSH
8426: LD_INT 101
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: PPUSH
8433: CALL_OW 72
8437: PPUSH
8438: CALL_OW 200
// ComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 34 , 47 ) ;
8442: LD_VAR 0 3
8446: PPUSH
8447: LD_INT 120
8449: PUSH
8450: LD_INT 101
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PUSH
8457: LD_INT 25
8459: PUSH
8460: LD_INT 4
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PPUSH
8471: CALL_OW 72
8475: PPUSH
8476: LD_INT 34
8478: PPUSH
8479: LD_INT 47
8481: PPUSH
8482: CALL_OW 114
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8486: LD_VAR 0 3
8490: PPUSH
8491: LD_INT 120
8493: PUSH
8494: LD_INT 101
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 25
8503: PUSH
8504: LD_INT 4
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: PPUSH
8515: CALL_OW 72
8519: PPUSH
8520: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8524: LD_ADDR_VAR 0 7
8528: PUSH
8529: LD_VAR 0 3
8533: PPUSH
8534: LD_INT 21
8536: PUSH
8537: LD_INT 2
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PPUSH
8544: CALL_OW 72
8548: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8549: LD_ADDR_VAR 0 4
8553: PUSH
8554: LD_INT 81
8556: PUSH
8557: LD_INT 1
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PPUSH
8564: CALL_OW 69
8568: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8569: LD_ADDR_VAR 0 5
8573: PUSH
8574: LD_INT 57
8576: PUSH
8577: LD_INT 66
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: LD_INT 62
8586: PUSH
8587: LD_INT 58
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8598: LD_INT 35
8600: PPUSH
8601: CALL_OW 67
// for i in filter do
8605: LD_ADDR_VAR 0 2
8609: PUSH
8610: LD_VAR 0 7
8614: PUSH
8615: FOR_IN
8616: IFFALSE 9040
// begin if IsDead ( i ) then
8618: LD_VAR 0 2
8622: PPUSH
8623: CALL_OW 301
8627: IFFALSE 8647
// begin filter := filter diff i ;
8629: LD_ADDR_VAR 0 7
8633: PUSH
8634: LD_VAR 0 7
8638: PUSH
8639: LD_VAR 0 2
8643: DIFF
8644: ST_TO_ADDR
// continue ;
8645: GO 8615
// end ; tmp := IsDrivenBy ( i ) ;
8647: LD_ADDR_VAR 0 3
8651: PUSH
8652: LD_VAR 0 2
8656: PPUSH
8657: CALL_OW 311
8661: ST_TO_ADDR
// if not tmp then
8662: LD_VAR 0 3
8666: NOT
8667: IFFALSE 8671
// continue ;
8669: GO 8615
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8671: LD_VAR 0 2
8675: PPUSH
8676: CALL_OW 261
8680: PUSH
8681: LD_INT 30
8683: GREATER
8684: PUSH
8685: LD_VAR 0 2
8689: PPUSH
8690: CALL_OW 110
8694: PUSH
8695: LD_INT 2
8697: EQUAL
8698: AND
8699: IFFALSE 8715
// SetTag ( i , 0 ) else
8701: LD_VAR 0 2
8705: PPUSH
8706: LD_INT 0
8708: PPUSH
8709: CALL_OW 109
8713: GO 8744
// if GetTag ( i ) = 2 then
8715: LD_VAR 0 2
8719: PPUSH
8720: CALL_OW 110
8724: PUSH
8725: LD_INT 2
8727: EQUAL
8728: IFFALSE 8744
// begin ComMoveUnit ( i , amDepot ) ;
8730: LD_VAR 0 2
8734: PPUSH
8735: LD_EXP 31
8739: PPUSH
8740: CALL_OW 112
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8744: LD_VAR 0 2
8748: PPUSH
8749: CALL_OW 256
8753: PUSH
8754: LD_INT 600
8756: GREATEREQUAL
8757: PUSH
8758: LD_VAR 0 2
8762: PPUSH
8763: CALL_OW 110
8767: NOT
8768: AND
8769: IFFALSE 8795
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8771: LD_VAR 0 2
8775: PPUSH
8776: LD_VAR 0 4
8780: PPUSH
8781: LD_VAR 0 2
8785: PPUSH
8786: CALL_OW 74
8790: PPUSH
8791: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8795: LD_VAR 0 2
8799: PPUSH
8800: CALL_OW 256
8804: PUSH
8805: LD_INT 600
8807: LESS
8808: PUSH
8809: LD_VAR 0 2
8813: PPUSH
8814: CALL_OW 110
8818: NOT
8819: AND
8820: IFFALSE 8896
// begin SetTag ( i , 1 ) ;
8822: LD_VAR 0 2
8826: PPUSH
8827: LD_INT 1
8829: PPUSH
8830: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8834: LD_ADDR_VAR 0 6
8838: PUSH
8839: LD_VAR 0 2
8843: PPUSH
8844: LD_VAR 0 5
8848: PPUSH
8849: CALL 81963 0 2
8853: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8854: LD_VAR 0 2
8858: PPUSH
8859: LD_VAR 0 6
8863: PUSH
8864: LD_INT 1
8866: ARRAY
8867: PPUSH
8868: LD_VAR 0 6
8872: PUSH
8873: LD_INT 2
8875: ARRAY
8876: PPUSH
8877: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8881: LD_VAR 0 2
8885: PPUSH
8886: LD_INT 40
8888: PPUSH
8889: LD_INT 49
8891: PPUSH
8892: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8896: LD_VAR 0 2
8900: PPUSH
8901: CALL_OW 110
8905: PUSH
8906: LD_INT 1
8908: EQUAL
8909: PUSH
8910: LD_VAR 0 2
8914: PPUSH
8915: LD_INT 40
8917: PPUSH
8918: LD_INT 49
8920: PPUSH
8921: CALL_OW 297
8925: PUSH
8926: LD_INT 9
8928: LESS
8929: AND
8930: PUSH
8931: LD_VAR 0 3
8935: AND
8936: IFFALSE 9038
// begin ComExitVehicle ( tmp ) ;
8938: LD_VAR 0 3
8942: PPUSH
8943: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8947: LD_VAR 0 3
8951: PPUSH
8952: LD_VAR 0 2
8956: PPUSH
8957: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8961: LD_INT 35
8963: PPUSH
8964: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8968: LD_VAR 0 2
8972: PPUSH
8973: CALL_OW 256
8977: PUSH
8978: LD_INT 1000
8980: EQUAL
8981: IFFALSE 8961
// ComEnterUnit ( tmp , i ) ;
8983: LD_VAR 0 3
8987: PPUSH
8988: LD_VAR 0 2
8992: PPUSH
8993: CALL_OW 120
// if GetFuel ( i ) <= 30 then
8997: LD_VAR 0 2
9001: PPUSH
9002: CALL_OW 261
9006: PUSH
9007: LD_INT 30
9009: LESSEQUAL
9010: IFFALSE 9026
// SetTag ( i , 2 ) else
9012: LD_VAR 0 2
9016: PPUSH
9017: LD_INT 2
9019: PPUSH
9020: CALL_OW 109
9024: GO 9038
// SetTag ( i , 0 ) ;
9026: LD_VAR 0 2
9030: PPUSH
9031: LD_INT 0
9033: PPUSH
9034: CALL_OW 109
// end ; end ;
9038: GO 8615
9040: POP
9041: POP
// until not filter ;
9042: LD_VAR 0 7
9046: NOT
9047: IFFALSE 8598
// end ; end_of_file
9049: LD_VAR 0 1
9053: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
9054: LD_INT 0
9056: PPUSH
9057: PPUSH
9058: PPUSH
9059: PPUSH
9060: PPUSH
// uc_side := 3 ;
9061: LD_ADDR_OWVAR 20
9065: PUSH
9066: LD_INT 3
9068: ST_TO_ADDR
// uc_nation := 3 ;
9069: LD_ADDR_OWVAR 21
9073: PUSH
9074: LD_INT 3
9076: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
9077: LD_ADDR_EXP 33
9081: PUSH
9082: LD_INT 8
9084: PUSH
9085: LD_INT 11
9087: PUSH
9088: LD_INT 14
9090: PUSH
9091: LD_INT 17
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: PUSH
9100: LD_OWVAR 67
9104: ARRAY
9105: ST_TO_ADDR
// ruMobile := [ ] ;
9106: LD_ADDR_EXP 34
9110: PUSH
9111: EMPTY
9112: ST_TO_ADDR
// ruBuildList := [ ] ;
9113: LD_ADDR_EXP 35
9117: PUSH
9118: EMPTY
9119: ST_TO_ADDR
// russianAttackers := [ ] ;
9120: LD_ADDR_EXP 36
9124: PUSH
9125: EMPTY
9126: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
9127: LD_ADDR_VAR 0 5
9131: PUSH
9132: LD_INT 43
9134: PUSH
9135: LD_INT 44
9137: PUSH
9138: LD_INT 46
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: ST_TO_ADDR
// if Difficulty > 2 then
9146: LD_OWVAR 67
9150: PUSH
9151: LD_INT 2
9153: GREATER
9154: IFFALSE 9177
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
9156: LD_ADDR_VAR 0 5
9160: PUSH
9161: LD_VAR 0 5
9165: PUSH
9166: LD_INT 45
9168: PUSH
9169: LD_INT 46
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: ADD
9176: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
9177: LD_ADDR_EXP 32
9181: PUSH
9182: LD_STRING Borodin
9184: PPUSH
9185: CALL_OW 25
9189: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
9190: LD_EXP 32
9194: PPUSH
9195: LD_INT 28
9197: PPUSH
9198: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
9202: LD_INT 28
9204: PPUSH
9205: CALL_OW 274
9209: PPUSH
9210: LD_INT 1
9212: PPUSH
9213: LD_INT 3000
9215: PUSH
9216: LD_INT 4000
9218: PUSH
9219: LD_INT 5000
9221: PUSH
9222: LD_INT 6000
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: PUSH
9231: LD_OWVAR 67
9235: ARRAY
9236: PPUSH
9237: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
9241: LD_INT 28
9243: PPUSH
9244: CALL_OW 274
9248: PPUSH
9249: LD_INT 2
9251: PPUSH
9252: LD_INT 1000
9254: PPUSH
9255: CALL_OW 277
// if Difficulty > 2 then
9259: LD_OWVAR 67
9263: PUSH
9264: LD_INT 2
9266: GREATER
9267: IFFALSE 9391
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
9269: LD_ADDR_VAR 0 4
9273: PUSH
9274: LD_INT 99
9276: PUSH
9277: LD_INT 130
9279: PUSH
9280: LD_INT 2
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: PUSH
9288: LD_INT 121
9290: PUSH
9291: LD_INT 127
9293: PUSH
9294: LD_INT 4
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: LIST
9301: PUSH
9302: LD_INT 117
9304: PUSH
9305: LD_INT 121
9307: PUSH
9308: LD_INT 4
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: LIST
9320: ST_TO_ADDR
// for i in tmp do
9321: LD_ADDR_VAR 0 2
9325: PUSH
9326: LD_VAR 0 4
9330: PUSH
9331: FOR_IN
9332: IFFALSE 9389
// begin bc_type := b_turret ;
9334: LD_ADDR_OWVAR 42
9338: PUSH
9339: LD_INT 33
9341: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9342: LD_ADDR_OWVAR 43
9346: PUSH
9347: LD_INT 2
9349: PUSH
9350: LD_OWVAR 67
9354: PLUS
9355: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9356: LD_VAR 0 2
9360: PUSH
9361: LD_INT 1
9363: ARRAY
9364: PPUSH
9365: LD_VAR 0 2
9369: PUSH
9370: LD_INT 2
9372: ARRAY
9373: PPUSH
9374: LD_VAR 0 2
9378: PUSH
9379: LD_INT 3
9381: ARRAY
9382: PPUSH
9383: CALL_OW 47
// end ;
9387: GO 9331
9389: POP
9390: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9391: LD_ADDR_VAR 0 2
9395: PUSH
9396: LD_INT 22
9398: PUSH
9399: LD_INT 3
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 21
9408: PUSH
9409: LD_INT 3
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PPUSH
9420: CALL_OW 69
9424: PUSH
9425: FOR_IN
9426: IFFALSE 9448
// SetBLevel ( i , 2 + Difficulty ) ;
9428: LD_VAR 0 2
9432: PPUSH
9433: LD_INT 2
9435: PUSH
9436: LD_OWVAR 67
9440: PLUS
9441: PPUSH
9442: CALL_OW 241
9446: GO 9425
9448: POP
9449: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9450: LD_ADDR_VAR 0 4
9454: PUSH
9455: LD_INT 22
9457: PUSH
9458: LD_INT 3
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 2
9467: PUSH
9468: LD_INT 30
9470: PUSH
9471: LD_INT 32
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: LD_INT 30
9480: PUSH
9481: LD_INT 33
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: LIST
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: PPUSH
9497: CALL_OW 69
9501: ST_TO_ADDR
// for i in tmp do
9502: LD_ADDR_VAR 0 2
9506: PUSH
9507: LD_VAR 0 4
9511: PUSH
9512: FOR_IN
9513: IFFALSE 9545
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9515: LD_VAR 0 2
9519: PPUSH
9520: LD_VAR 0 5
9524: PUSH
9525: LD_INT 1
9527: PPUSH
9528: LD_VAR 0 5
9532: PPUSH
9533: CALL_OW 12
9537: ARRAY
9538: PPUSH
9539: CALL_OW 431
9543: GO 9512
9545: POP
9546: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9547: LD_ADDR_VAR 0 2
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 30
9564: PUSH
9565: LD_INT 32
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PPUSH
9576: CALL_OW 69
9580: PUSH
9581: FOR_IN
9582: IFFALSE 9631
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9584: LD_INT 0
9586: PPUSH
9587: LD_INT 5
9589: PUSH
9590: LD_INT 6
9592: PUSH
9593: LD_INT 7
9595: PUSH
9596: LD_INT 8
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: PUSH
9605: LD_OWVAR 67
9609: ARRAY
9610: PPUSH
9611: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9615: CALL_OW 44
9619: PPUSH
9620: LD_VAR 0 2
9624: PPUSH
9625: CALL_OW 52
// end ;
9629: GO 9581
9631: POP
9632: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9633: LD_ADDR_VAR 0 2
9637: PUSH
9638: LD_INT 22
9640: PUSH
9641: LD_INT 3
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 30
9650: PUSH
9651: LD_INT 5
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PPUSH
9662: CALL_OW 69
9666: PUSH
9667: FOR_IN
9668: IFFALSE 9758
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9670: LD_ADDR_VAR 0 3
9674: PUSH
9675: DOUBLE
9676: LD_INT 1
9678: DEC
9679: ST_TO_ADDR
9680: LD_INT 2
9682: PUSH
9683: LD_INT 3
9685: PUSH
9686: LD_INT 4
9688: PUSH
9689: LD_INT 5
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: PUSH
9698: LD_OWVAR 67
9702: ARRAY
9703: PUSH
9704: FOR_TO
9705: IFFALSE 9754
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9707: LD_INT 0
9709: PPUSH
9710: LD_INT 5
9712: PUSH
9713: LD_INT 6
9715: PUSH
9716: LD_INT 7
9718: PUSH
9719: LD_INT 8
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PUSH
9728: LD_OWVAR 67
9732: ARRAY
9733: PPUSH
9734: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9738: CALL_OW 44
9742: PPUSH
9743: LD_VAR 0 2
9747: PPUSH
9748: CALL_OW 52
// end ;
9752: GO 9704
9754: POP
9755: POP
// end ;
9756: GO 9667
9758: POP
9759: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9760: LD_ADDR_VAR 0 2
9764: PUSH
9765: DOUBLE
9766: LD_INT 1
9768: DEC
9769: ST_TO_ADDR
9770: LD_INT 3
9772: PUSH
9773: LD_INT 4
9775: PUSH
9776: LD_INT 5
9778: PUSH
9779: LD_INT 5
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: LD_OWVAR 67
9792: ARRAY
9793: PUSH
9794: FOR_TO
9795: IFFALSE 9842
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9797: LD_INT 0
9799: PPUSH
9800: LD_INT 4
9802: PUSH
9803: LD_INT 5
9805: PUSH
9806: LD_INT 5
9808: PUSH
9809: LD_INT 6
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: PUSH
9818: LD_OWVAR 67
9822: ARRAY
9823: PPUSH
9824: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9828: CALL_OW 44
9832: PPUSH
9833: LD_INT 28
9835: PPUSH
9836: CALL_OW 52
// end ;
9840: GO 9794
9842: POP
9843: POP
// for i := 1 to 2 do
9844: LD_ADDR_VAR 0 2
9848: PUSH
9849: DOUBLE
9850: LD_INT 1
9852: DEC
9853: ST_TO_ADDR
9854: LD_INT 2
9856: PUSH
9857: FOR_TO
9858: IFFALSE 9892
// begin PrepareScientist ( false , 6 ) ;
9860: LD_INT 0
9862: PPUSH
9863: LD_INT 6
9865: PPUSH
9866: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9870: CALL_OW 44
9874: PPUSH
9875: LD_INT 81
9877: PPUSH
9878: LD_INT 93
9880: PPUSH
9881: CALL_OW 428
9885: PPUSH
9886: CALL_OW 52
// end ;
9890: GO 9857
9892: POP
9893: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9894: LD_INT 22
9896: PPUSH
9897: LD_INT 1
9899: PPUSH
9900: LD_INT 3
9902: PPUSH
9903: LD_INT 51
9905: PPUSH
9906: LD_INT 100
9908: PPUSH
9909: CALL 45768 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9913: CALL_OW 45
9917: PPUSH
9918: LD_INT 91
9920: PPUSH
9921: LD_INT 94
9923: PPUSH
9924: LD_INT 3
9926: PPUSH
9927: LD_INT 0
9929: PPUSH
9930: CALL_OW 50
// for i := 1 to 2 do
9934: LD_ADDR_VAR 0 2
9938: PUSH
9939: DOUBLE
9940: LD_INT 1
9942: DEC
9943: ST_TO_ADDR
9944: LD_INT 2
9946: PUSH
9947: FOR_TO
9948: IFFALSE 9992
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9950: LD_INT 22
9952: PPUSH
9953: LD_INT 1
9955: PPUSH
9956: LD_INT 3
9958: PPUSH
9959: LD_INT 52
9961: PPUSH
9962: LD_INT 100
9964: PPUSH
9965: CALL 45768 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9969: CALL_OW 45
9973: PPUSH
9974: LD_INT 91
9976: PPUSH
9977: LD_INT 94
9979: PPUSH
9980: LD_INT 4
9982: PPUSH
9983: LD_INT 0
9985: PPUSH
9986: CALL_OW 50
// end ;
9990: GO 9947
9992: POP
9993: POP
// end ;
9994: LD_VAR 0 1
9998: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
9999: LD_INT 0
10001: PPUSH
10002: PPUSH
10003: PPUSH
10004: PPUSH
10005: PPUSH
// uc_side := 3 ;
10006: LD_ADDR_OWVAR 20
10010: PUSH
10011: LD_INT 3
10013: ST_TO_ADDR
// uc_nation := 3 ;
10014: LD_ADDR_OWVAR 21
10018: PUSH
10019: LD_INT 3
10021: ST_TO_ADDR
// for i := 1 to 4 do
10022: LD_ADDR_VAR 0 2
10026: PUSH
10027: DOUBLE
10028: LD_INT 1
10030: DEC
10031: ST_TO_ADDR
10032: LD_INT 4
10034: PUSH
10035: FOR_TO
10036: IFFALSE 10163
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10038: LD_INT 22
10040: PPUSH
10041: LD_INT 1
10043: PPUSH
10044: LD_INT 1
10046: PPUSH
10047: LD_INT 42
10049: PUSH
10050: LD_INT 43
10052: PUSH
10053: LD_INT 44
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: LIST
10060: PUSH
10061: LD_INT 1
10063: PPUSH
10064: LD_INT 3
10066: PPUSH
10067: CALL_OW 12
10071: ARRAY
10072: PPUSH
10073: LD_INT 40
10075: PPUSH
10076: CALL 45768 0 5
// veh := CreateVehicle ;
10080: LD_ADDR_VAR 0 4
10084: PUSH
10085: CALL_OW 45
10089: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10090: LD_VAR 0 4
10094: PPUSH
10095: LD_INT 5
10097: PPUSH
10098: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
10102: LD_VAR 0 4
10106: PPUSH
10107: LD_INT 7
10109: PPUSH
10110: LD_INT 0
10112: PPUSH
10113: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10117: LD_INT 0
10119: PPUSH
10120: LD_INT 5
10122: PPUSH
10123: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10127: CALL_OW 44
10131: PPUSH
10132: LD_VAR 0 4
10136: PPUSH
10137: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10141: LD_ADDR_VAR 0 5
10145: PUSH
10146: LD_VAR 0 5
10150: PPUSH
10151: LD_VAR 0 4
10155: PPUSH
10156: CALL 78619 0 2
10160: ST_TO_ADDR
// end ;
10161: GO 10035
10163: POP
10164: POP
// for i := 1 to 3 do
10165: LD_ADDR_VAR 0 2
10169: PUSH
10170: DOUBLE
10171: LD_INT 1
10173: DEC
10174: ST_TO_ADDR
10175: LD_INT 3
10177: PUSH
10178: FOR_TO
10179: IFFALSE 10306
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10181: LD_INT 22
10183: PPUSH
10184: LD_INT 1
10186: PPUSH
10187: LD_INT 1
10189: PPUSH
10190: LD_INT 42
10192: PUSH
10193: LD_INT 43
10195: PUSH
10196: LD_INT 44
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: LIST
10203: PUSH
10204: LD_INT 1
10206: PPUSH
10207: LD_INT 3
10209: PPUSH
10210: CALL_OW 12
10214: ARRAY
10215: PPUSH
10216: LD_INT 40
10218: PPUSH
10219: CALL 45768 0 5
// veh := CreateVehicle ;
10223: LD_ADDR_VAR 0 4
10227: PUSH
10228: CALL_OW 45
10232: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10233: LD_VAR 0 4
10237: PPUSH
10238: LD_INT 5
10240: PPUSH
10241: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
10245: LD_VAR 0 4
10249: PPUSH
10250: LD_INT 8
10252: PPUSH
10253: LD_INT 0
10255: PPUSH
10256: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10260: LD_INT 0
10262: PPUSH
10263: LD_INT 5
10265: PPUSH
10266: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10270: CALL_OW 44
10274: PPUSH
10275: LD_VAR 0 4
10279: PPUSH
10280: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10284: LD_ADDR_VAR 0 5
10288: PUSH
10289: LD_VAR 0 5
10293: PPUSH
10294: LD_VAR 0 4
10298: PPUSH
10299: CALL 78619 0 2
10303: ST_TO_ADDR
// end ;
10304: GO 10178
10306: POP
10307: POP
// for i := 1 to 2 do
10308: LD_ADDR_VAR 0 2
10312: PUSH
10313: DOUBLE
10314: LD_INT 1
10316: DEC
10317: ST_TO_ADDR
10318: LD_INT 2
10320: PUSH
10321: FOR_TO
10322: IFFALSE 10381
// begin PrepareSoldier ( false , 5 ) ;
10324: LD_INT 0
10326: PPUSH
10327: LD_INT 5
10329: PPUSH
10330: CALL_OW 381
// un := CreateHuman ;
10334: LD_ADDR_VAR 0 3
10338: PUSH
10339: CALL_OW 44
10343: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10344: LD_VAR 0 3
10348: PPUSH
10349: LD_INT 8
10351: PPUSH
10352: LD_INT 0
10354: PPUSH
10355: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10359: LD_ADDR_VAR 0 5
10363: PUSH
10364: LD_VAR 0 5
10368: PPUSH
10369: LD_VAR 0 3
10373: PPUSH
10374: CALL 78619 0 2
10378: ST_TO_ADDR
// end ;
10379: GO 10321
10381: POP
10382: POP
// for i in tmp do
10383: LD_ADDR_VAR 0 2
10387: PUSH
10388: LD_VAR 0 5
10392: PUSH
10393: FOR_IN
10394: IFFALSE 10413
// ComAgressiveMove ( i , 51 , 16 ) ;
10396: LD_VAR 0 2
10400: PPUSH
10401: LD_INT 51
10403: PPUSH
10404: LD_INT 16
10406: PPUSH
10407: CALL_OW 114
10411: GO 10393
10413: POP
10414: POP
// end ;
10415: LD_VAR 0 1
10419: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10420: LD_EXP 34
10424: IFFALSE 10999
10426: GO 10428
10428: DISABLE
10429: LD_INT 0
10431: PPUSH
10432: PPUSH
10433: PPUSH
// begin enable ;
10434: ENABLE
// if not ruMobile then
10435: LD_EXP 34
10439: NOT
10440: IFFALSE 10444
// exit ;
10442: GO 10999
// for i in ruMobile do
10444: LD_ADDR_VAR 0 1
10448: PUSH
10449: LD_EXP 34
10453: PUSH
10454: FOR_IN
10455: IFFALSE 10997
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10457: LD_VAR 0 1
10461: PPUSH
10462: CALL_OW 302
10466: NOT
10467: PUSH
10468: LD_VAR 0 1
10472: PPUSH
10473: CALL_OW 255
10477: PUSH
10478: LD_INT 3
10480: NONEQUAL
10481: OR
10482: IFFALSE 10502
// begin ruMobile := ruMobile diff i ;
10484: LD_ADDR_EXP 34
10488: PUSH
10489: LD_EXP 34
10493: PUSH
10494: LD_VAR 0 1
10498: DIFF
10499: ST_TO_ADDR
// continue ;
10500: GO 10454
// end ; if GetTag ( i ) = 300 then
10502: LD_VAR 0 1
10506: PPUSH
10507: CALL_OW 110
10511: PUSH
10512: LD_INT 300
10514: EQUAL
10515: IFFALSE 10630
// begin if GetFuel ( i ) < 50 then
10517: LD_VAR 0 1
10521: PPUSH
10522: CALL_OW 261
10526: PUSH
10527: LD_INT 50
10529: LESS
10530: IFFALSE 10589
// begin ComMoveXY ( i , 93 , 100 ) ;
10532: LD_VAR 0 1
10536: PPUSH
10537: LD_INT 93
10539: PPUSH
10540: LD_INT 100
10542: PPUSH
10543: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10547: LD_INT 35
10549: PPUSH
10550: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10554: LD_VAR 0 1
10558: PPUSH
10559: LD_INT 93
10561: PPUSH
10562: LD_INT 100
10564: PPUSH
10565: CALL_OW 297
10569: PUSH
10570: LD_INT 4
10572: LESS
10573: IFFALSE 10547
// SetFuel ( i , 100 ) ;
10575: LD_VAR 0 1
10579: PPUSH
10580: LD_INT 100
10582: PPUSH
10583: CALL_OW 240
// end else
10587: GO 10630
// if not IsInArea ( i , ruParkingArea ) then
10589: LD_VAR 0 1
10593: PPUSH
10594: LD_INT 10
10596: PPUSH
10597: CALL_OW 308
10601: NOT
10602: IFFALSE 10618
// ComMoveToArea ( i , ruParkingArea ) else
10604: LD_VAR 0 1
10608: PPUSH
10609: LD_INT 10
10611: PPUSH
10612: CALL_OW 113
10616: GO 10630
// SetTag ( i , 301 ) ;
10618: LD_VAR 0 1
10622: PPUSH
10623: LD_INT 301
10625: PPUSH
10626: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10630: LD_VAR 0 1
10634: PPUSH
10635: CALL_OW 110
10639: PUSH
10640: LD_INT 301
10642: EQUAL
10643: IFFALSE 10773
// begin if GetLives ( i ) < 1000 then
10645: LD_VAR 0 1
10649: PPUSH
10650: CALL_OW 256
10654: PUSH
10655: LD_INT 1000
10657: LESS
10658: IFFALSE 10750
// begin if not IsDrivenBy ( i ) then
10660: LD_VAR 0 1
10664: PPUSH
10665: CALL_OW 311
10669: NOT
10670: IFFALSE 10674
// continue ;
10672: GO 10454
// mech := IsDrivenBy ( i ) ;
10674: LD_ADDR_VAR 0 2
10678: PUSH
10679: LD_VAR 0 1
10683: PPUSH
10684: CALL_OW 311
10688: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10689: LD_VAR 0 2
10693: PPUSH
10694: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10698: LD_VAR 0 2
10702: PPUSH
10703: LD_VAR 0 1
10707: PPUSH
10708: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10712: LD_INT 35
10714: PPUSH
10715: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10719: LD_VAR 0 1
10723: PPUSH
10724: CALL_OW 256
10728: PUSH
10729: LD_INT 1000
10731: EQUAL
10732: IFFALSE 10712
// ComEnterUnit ( mech , i ) ;
10734: LD_VAR 0 2
10738: PPUSH
10739: LD_VAR 0 1
10743: PPUSH
10744: CALL_OW 120
// end else
10748: GO 10773
// if IsDrivenBy ( i ) then
10750: LD_VAR 0 1
10754: PPUSH
10755: CALL_OW 311
10759: IFFALSE 10773
// SetTag ( i , 0 ) ;
10761: LD_VAR 0 1
10765: PPUSH
10766: LD_INT 0
10768: PPUSH
10769: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10773: LD_VAR 0 1
10777: PPUSH
10778: CALL_OW 110
10782: PUSH
10783: LD_INT 300
10785: LESS
10786: IFFALSE 10995
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10788: LD_ADDR_VAR 0 3
10792: PUSH
10793: LD_INT 11
10795: PPUSH
10796: LD_INT 81
10798: PUSH
10799: LD_INT 3
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PPUSH
10806: CALL_OW 70
10810: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10811: LD_VAR 0 1
10815: PPUSH
10816: CALL_OW 256
10820: PUSH
10821: LD_INT 650
10823: LESS
10824: IFFALSE 10849
// begin ComStop ( i ) ;
10826: LD_VAR 0 1
10830: PPUSH
10831: CALL_OW 141
// SetTag ( i , 300 ) ;
10835: LD_VAR 0 1
10839: PPUSH
10840: LD_INT 300
10842: PPUSH
10843: CALL_OW 109
// continue ;
10847: GO 10454
// end ; if enemy then
10849: LD_VAR 0 3
10853: IFFALSE 10893
// begin if not HasTask ( i ) then
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 314
10864: NOT
10865: IFFALSE 10891
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10867: LD_VAR 0 1
10871: PPUSH
10872: LD_VAR 0 3
10876: PPUSH
10877: LD_VAR 0 1
10881: PPUSH
10882: CALL_OW 74
10886: PPUSH
10887: CALL_OW 115
// end else
10891: GO 10995
// if ruMobile > 2 then
10893: LD_EXP 34
10897: PUSH
10898: LD_INT 2
10900: GREATER
10901: IFFALSE 10995
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10903: LD_ADDR_VAR 0 3
10907: PUSH
10908: LD_INT 81
10910: PUSH
10911: LD_INT 3
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PPUSH
10918: CALL_OW 69
10922: ST_TO_ADDR
// if enemy then
10923: LD_VAR 0 3
10927: IFFALSE 10995
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10929: LD_VAR 0 1
10933: PPUSH
10934: LD_INT 116
10936: PUSH
10937: LD_INT 95
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PUSH
10944: LD_INT 84
10946: PUSH
10947: LD_INT 68
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 58
10956: PUSH
10957: LD_INT 53
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 44
10966: PUSH
10967: LD_INT 35
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 45
10976: PUSH
10977: LD_INT 23
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: PPUSH
10991: CALL 81223 0 2
// end ; end ; end ;
10995: GO 10454
10997: POP
10998: POP
// end ;
10999: PPOPN 3
11001: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
11002: LD_INT 3
11004: PUSH
11005: LD_INT 22
11007: PUSH
11008: LD_INT 1
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: LD_INT 32
11021: PUSH
11022: LD_INT 1
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PPUSH
11033: CALL_OW 69
11037: IFFALSE 11121
11039: GO 11041
11041: DISABLE
11042: LD_INT 0
11044: PPUSH
// begin enable ;
11045: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
11046: LD_ADDR_VAR 0 1
11050: PUSH
11051: LD_INT 3
11053: PUSH
11054: LD_INT 22
11056: PUSH
11057: LD_INT 1
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 32
11070: PUSH
11071: LD_INT 1
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PPUSH
11082: CALL_OW 69
11086: PUSH
11087: FOR_IN
11088: IFFALSE 11119
// if GetFuel ( i ) < 3 then
11090: LD_VAR 0 1
11094: PPUSH
11095: CALL_OW 261
11099: PUSH
11100: LD_INT 3
11102: LESS
11103: IFFALSE 11117
// SetFuel ( i , 3 ) ;
11105: LD_VAR 0 1
11109: PPUSH
11110: LD_INT 3
11112: PPUSH
11113: CALL_OW 240
11117: GO 11087
11119: POP
11120: POP
// end ;
11121: PPOPN 1
11123: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
11124: LD_INT 29
11126: PPUSH
11127: CALL_OW 302
11131: PUSH
11132: LD_INT 29
11134: PPUSH
11135: CALL_OW 461
11139: PUSH
11140: LD_INT 2
11142: EQUAL
11143: AND
11144: IFFALSE 11377
11146: GO 11148
11148: DISABLE
11149: LD_INT 0
11151: PPUSH
11152: PPUSH
// begin enable ;
11153: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11154: LD_ADDR_VAR 0 1
11158: PUSH
11159: LD_INT 21
11161: PUSH
11162: LD_INT 22
11164: PUSH
11165: LD_INT 23
11167: PUSH
11168: LD_INT 24
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 1
11179: PPUSH
11180: LD_INT 4
11182: PPUSH
11183: CALL_OW 12
11187: ARRAY
11188: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11189: LD_ADDR_VAR 0 2
11193: PUSH
11194: LD_INT 42
11196: PUSH
11197: LD_INT 44
11199: PUSH
11200: LD_INT 43
11202: PUSH
11203: LD_INT 46
11205: PUSH
11206: LD_INT 45
11208: PUSH
11209: LD_INT 46
11211: PUSH
11212: LD_INT 45
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: PUSH
11224: LD_OWVAR 67
11228: PUSH
11229: LD_INT 0
11231: PPUSH
11232: LD_INT 3
11234: PPUSH
11235: CALL_OW 12
11239: PLUS
11240: ARRAY
11241: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11242: LD_VAR 0 1
11246: PUSH
11247: LD_INT 21
11249: PUSH
11250: LD_INT 22
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: IN
11257: PUSH
11258: LD_VAR 0 2
11262: PUSH
11263: LD_INT 46
11265: EQUAL
11266: AND
11267: IFFALSE 11296
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11269: LD_ADDR_VAR 0 2
11273: PUSH
11274: LD_INT 44
11276: PUSH
11277: LD_INT 45
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 1
11286: PPUSH
11287: LD_INT 2
11289: PPUSH
11290: CALL_OW 12
11294: ARRAY
11295: ST_TO_ADDR
// if tick < [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
11296: LD_OWVAR 1
11300: PUSH
11301: LD_INT 25200
11303: PUSH
11304: LD_INT 23100
11306: PUSH
11307: LD_INT 21000
11309: PUSH
11310: LD_INT 18900
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: PUSH
11319: LD_OWVAR 67
11323: ARRAY
11324: LESS
11325: IFFALSE 11354
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11327: LD_ADDR_VAR 0 2
11331: PUSH
11332: LD_INT 44
11334: PUSH
11335: LD_INT 43
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: LD_INT 1
11344: PPUSH
11345: LD_INT 2
11347: PPUSH
11348: CALL_OW 12
11352: ARRAY
11353: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11354: LD_INT 29
11356: PPUSH
11357: LD_VAR 0 1
11361: PPUSH
11362: LD_INT 1
11364: PPUSH
11365: LD_INT 1
11367: PPUSH
11368: LD_VAR 0 2
11372: PPUSH
11373: CALL_OW 185
// end ;
11377: PPOPN 2
11379: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , j , tmp , b , eng , crane , tag , sci , lab , emptyTowers , sol , barracks , e ;
11380: LD_INT 28
11382: PPUSH
11383: CALL_OW 302
11387: IFFALSE 12979
11389: GO 11391
11391: DISABLE
11392: LD_INT 0
11394: PPUSH
11395: PPUSH
11396: PPUSH
11397: PPUSH
11398: PPUSH
11399: PPUSH
11400: PPUSH
11401: PPUSH
11402: PPUSH
11403: PPUSH
11404: PPUSH
11405: PPUSH
11406: PPUSH
// begin enable ;
11407: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11408: LD_ADDR_VAR 0 4
11412: PUSH
11413: LD_INT 12
11415: PPUSH
11416: LD_INT 3
11418: PUSH
11419: LD_INT 24
11421: PUSH
11422: LD_INT 1000
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 21
11435: PUSH
11436: LD_INT 3
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PPUSH
11447: CALL_OW 70
11451: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11452: LD_ADDR_VAR 0 5
11456: PUSH
11457: LD_INT 22
11459: PUSH
11460: LD_INT 3
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 25
11469: PUSH
11470: LD_INT 2
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PPUSH
11481: CALL_OW 69
11485: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11486: LD_ADDR_VAR 0 6
11490: PUSH
11491: LD_INT 22
11493: PUSH
11494: LD_INT 3
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: LD_INT 34
11503: PUSH
11504: LD_INT 52
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PPUSH
11515: CALL_OW 69
11519: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11520: LD_ADDR_VAR 0 8
11524: PUSH
11525: LD_INT 22
11527: PUSH
11528: LD_INT 3
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: LD_INT 25
11537: PUSH
11538: LD_INT 4
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PPUSH
11549: CALL_OW 69
11553: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11554: LD_ADDR_VAR 0 9
11558: PUSH
11559: LD_INT 81
11561: PPUSH
11562: LD_INT 93
11564: PPUSH
11565: CALL_OW 428
11569: ST_TO_ADDR
// emptyTowers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11570: LD_ADDR_VAR 0 10
11574: PUSH
11575: LD_INT 22
11577: PUSH
11578: LD_INT 3
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 30
11587: PUSH
11588: LD_INT 32
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: LD_INT 50
11597: PUSH
11598: EMPTY
11599: LIST
11600: PUSH
11601: LD_INT 58
11603: PUSH
11604: EMPTY
11605: LIST
11606: PUSH
11607: LD_INT 3
11609: PUSH
11610: LD_INT 120
11612: PUSH
11613: LD_INT 701
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: PPUSH
11631: CALL_OW 69
11635: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_ok ] , [ f_not , [ f_full ] ] ] ) ;
11636: LD_ADDR_VAR 0 12
11640: PUSH
11641: LD_INT 22
11643: PUSH
11644: LD_INT 3
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 30
11653: PUSH
11654: LD_INT 5
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 50
11663: PUSH
11664: EMPTY
11665: LIST
11666: PUSH
11667: LD_INT 3
11669: PUSH
11670: LD_INT 62
11672: PUSH
11673: EMPTY
11674: LIST
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: PPUSH
11686: CALL_OW 69
11690: ST_TO_ADDR
// if emptyTowers then
11691: LD_VAR 0 10
11695: IFFALSE 11956
// begin for i in emptyTowers do
11697: LD_ADDR_VAR 0 1
11701: PUSH
11702: LD_VAR 0 10
11706: PUSH
11707: FOR_IN
11708: IFFALSE 11952
// begin sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_inside ] , [ f_inarea , ruBaseArea ] ] , [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11710: LD_ADDR_VAR 0 11
11714: PUSH
11715: LD_INT 22
11717: PUSH
11718: LD_INT 3
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PUSH
11725: LD_INT 2
11727: PUSH
11728: LD_INT 54
11730: PUSH
11731: EMPTY
11732: LIST
11733: PUSH
11734: LD_INT 95
11736: PUSH
11737: LD_INT 12
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 25
11751: PUSH
11752: LD_INT 1
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 50
11761: PUSH
11762: EMPTY
11763: LIST
11764: PUSH
11765: LD_INT 3
11767: PUSH
11768: LD_INT 120
11770: PUSH
11771: LD_INT 701
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: PPUSH
11789: CALL_OW 69
11793: ST_TO_ADDR
// if not sol then
11794: LD_VAR 0 11
11798: NOT
11799: IFFALSE 11803
// break ;
11801: GO 11952
// for j in sol do
11803: LD_ADDR_VAR 0 2
11807: PUSH
11808: LD_VAR 0 11
11812: PUSH
11813: FOR_IN
11814: IFFALSE 11865
// if IsInUnit ( j ) and GetBType ( IsInUnit ( j ) ) = b_bunker then
11816: LD_VAR 0 2
11820: PPUSH
11821: CALL_OW 310
11825: PUSH
11826: LD_VAR 0 2
11830: PPUSH
11831: CALL_OW 310
11835: PPUSH
11836: CALL_OW 266
11840: PUSH
11841: LD_INT 32
11843: EQUAL
11844: AND
11845: IFFALSE 11863
// sol := sol diff j ;
11847: LD_ADDR_VAR 0 11
11851: PUSH
11852: LD_VAR 0 11
11856: PUSH
11857: LD_VAR 0 2
11861: DIFF
11862: ST_TO_ADDR
11863: GO 11813
11865: POP
11866: POP
// if not sol then
11867: LD_VAR 0 11
11871: NOT
11872: IFFALSE 11876
// break ;
11874: GO 11952
// if IsInUnit ( sol [ 1 ] ) then
11876: LD_VAR 0 11
11880: PUSH
11881: LD_INT 1
11883: ARRAY
11884: PPUSH
11885: CALL_OW 310
11889: IFFALSE 11904
// ComExit ( sol [ 1 ] ) ;
11891: LD_VAR 0 11
11895: PUSH
11896: LD_INT 1
11898: ARRAY
11899: PPUSH
11900: CALL 79017 0 1
// SetTag ( sol [ 1 ] , 701 ) ;
11904: LD_VAR 0 11
11908: PUSH
11909: LD_INT 1
11911: ARRAY
11912: PPUSH
11913: LD_INT 701
11915: PPUSH
11916: CALL_OW 109
// SetTag ( i , 701 ) ;
11920: LD_VAR 0 1
11924: PPUSH
11925: LD_INT 701
11927: PPUSH
11928: CALL_OW 109
// AddComEnterUnit ( sol [ 1 ] , i ) ;
11932: LD_VAR 0 11
11936: PUSH
11937: LD_INT 1
11939: ARRAY
11940: PPUSH
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 180
// end ;
11950: GO 11707
11952: POP
11953: POP
// end else
11954: GO 12202
// if UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) then
11956: LD_VAR 0 11
11960: PPUSH
11961: LD_INT 3
11963: PUSH
11964: LD_INT 54
11966: PUSH
11967: EMPTY
11968: LIST
11969: PUSH
11970: LD_INT 95
11972: PUSH
11973: LD_INT 12
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: LIST
11984: PPUSH
11985: CALL_OW 72
11989: IFFALSE 12202
// begin if barracks then
11991: LD_VAR 0 12
11995: IFFALSE 12063
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
11997: LD_ADDR_VAR 0 1
12001: PUSH
12002: LD_VAR 0 11
12006: PPUSH
12007: LD_INT 3
12009: PUSH
12010: LD_INT 54
12012: PUSH
12013: EMPTY
12014: LIST
12015: PUSH
12016: LD_INT 95
12018: PUSH
12019: LD_INT 12
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: LIST
12030: PPUSH
12031: CALL_OW 72
12035: PUSH
12036: FOR_IN
12037: IFFALSE 12059
// ComEnterUnit ( i , barracks [ 1 ] ) ;
12039: LD_VAR 0 1
12043: PPUSH
12044: LD_VAR 0 12
12048: PUSH
12049: LD_INT 1
12051: ARRAY
12052: PPUSH
12053: CALL_OW 120
12057: GO 12036
12059: POP
12060: POP
// end else
12061: GO 12202
// if FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) then
12063: LD_INT 12
12065: PPUSH
12066: LD_INT 81
12068: PUSH
12069: LD_INT 3
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PPUSH
12076: CALL_OW 70
12080: IFFALSE 12202
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12082: LD_ADDR_VAR 0 1
12086: PUSH
12087: LD_VAR 0 11
12091: PPUSH
12092: LD_INT 3
12094: PUSH
12095: LD_INT 54
12097: PUSH
12098: EMPTY
12099: LIST
12100: PUSH
12101: LD_INT 95
12103: PUSH
12104: LD_INT 12
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: PPUSH
12116: CALL_OW 72
12120: PUSH
12121: FOR_IN
12122: IFFALSE 12200
// begin SetTag ( i , 702 ) ;
12124: LD_VAR 0 1
12128: PPUSH
12129: LD_INT 702
12131: PPUSH
12132: CALL_OW 109
// e := NearestUnitToUnit ( FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) , i ) ;
12136: LD_ADDR_VAR 0 13
12140: PUSH
12141: LD_INT 12
12143: PPUSH
12144: LD_INT 81
12146: PUSH
12147: LD_INT 3
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PPUSH
12154: CALL_OW 70
12158: PPUSH
12159: LD_VAR 0 1
12163: PPUSH
12164: CALL_OW 74
12168: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( e ) , GetY ( e ) ) ;
12169: LD_VAR 0 1
12173: PPUSH
12174: LD_VAR 0 13
12178: PPUSH
12179: CALL_OW 250
12183: PPUSH
12184: LD_VAR 0 13
12188: PPUSH
12189: CALL_OW 251
12193: PPUSH
12194: CALL_OW 114
// end ;
12198: GO 12121
12200: POP
12201: POP
// end ; end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , ruDefendArea ] , [ f_ok ] , [ f_class , class_soldier ] , [ f_tag , 702 ] ] ) ;
12202: LD_ADDR_VAR 0 3
12206: PUSH
12207: LD_INT 22
12209: PUSH
12210: LD_INT 3
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PUSH
12217: LD_INT 95
12219: PUSH
12220: LD_INT 11
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PUSH
12227: LD_INT 50
12229: PUSH
12230: EMPTY
12231: LIST
12232: PUSH
12233: LD_INT 25
12235: PUSH
12236: LD_INT 1
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 120
12245: PUSH
12246: LD_INT 702
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: PPUSH
12260: CALL_OW 69
12264: ST_TO_ADDR
// if tmp then
12265: LD_VAR 0 3
12269: IFFALSE 12315
// for i in tmp do
12271: LD_ADDR_VAR 0 1
12275: PUSH
12276: LD_VAR 0 3
12280: PUSH
12281: FOR_IN
12282: IFFALSE 12313
// begin ComMoveXY ( i , 90 , 94 ) ;
12284: LD_VAR 0 1
12288: PPUSH
12289: LD_INT 90
12291: PPUSH
12292: LD_INT 94
12294: PPUSH
12295: CALL_OW 111
// SetTag ( i , 0 ) ;
12299: LD_VAR 0 1
12303: PPUSH
12304: LD_INT 0
12306: PPUSH
12307: CALL_OW 109
// end ;
12311: GO 12281
12313: POP
12314: POP
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
12315: LD_VAR 0 8
12319: PUSH
12320: LD_VAR 0 5
12324: PPUSH
12325: LD_INT 120
12327: PUSH
12328: LD_INT 2
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PPUSH
12335: CALL_OW 72
12339: AND
12340: IFFALSE 12353
// ComExitAll ( sci ) else
12342: LD_VAR 0 8
12346: PPUSH
12347: CALL 79100 0 1
12351: GO 12426
// if sci then
12353: LD_VAR 0 8
12357: IFFALSE 12426
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
12359: LD_VAR 0 8
12363: PPUSH
12364: LD_INT 3
12366: PUSH
12367: LD_INT 54
12369: PUSH
12370: EMPTY
12371: LIST
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PPUSH
12377: CALL_OW 72
12381: PUSH
12382: LD_VAR 0 9
12386: PPUSH
12387: CALL_OW 302
12391: AND
12392: IFFALSE 12426
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
12394: LD_VAR 0 8
12398: PPUSH
12399: LD_INT 3
12401: PUSH
12402: LD_INT 54
12404: PUSH
12405: EMPTY
12406: LIST
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PPUSH
12412: CALL_OW 72
12416: PPUSH
12417: LD_VAR 0 9
12421: PPUSH
12422: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
12426: LD_VAR 0 6
12430: PPUSH
12431: LD_INT 50
12433: PUSH
12434: EMPTY
12435: LIST
12436: PPUSH
12437: CALL_OW 72
12441: PUSH
12442: LD_VAR 0 4
12446: AND
12447: IFFALSE 12478
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
12449: LD_VAR 0 6
12453: PPUSH
12454: LD_INT 50
12456: PUSH
12457: EMPTY
12458: LIST
12459: PPUSH
12460: CALL_OW 72
12464: PPUSH
12465: LD_VAR 0 4
12469: PUSH
12470: LD_INT 1
12472: ARRAY
12473: PPUSH
12474: CALL_OW 130
// if eng then
12478: LD_VAR 0 5
12482: IFFALSE 12979
// begin for i in eng do
12484: LD_ADDR_VAR 0 1
12488: PUSH
12489: LD_VAR 0 5
12493: PUSH
12494: FOR_IN
12495: IFFALSE 12977
// begin tag := GetTag ( i ) ;
12497: LD_ADDR_VAR 0 7
12501: PUSH
12502: LD_VAR 0 1
12506: PPUSH
12507: CALL_OW 110
12511: ST_TO_ADDR
// case tag of 0 :
12512: LD_VAR 0 7
12516: PUSH
12517: LD_INT 0
12519: DOUBLE
12520: EQUAL
12521: IFTRUE 12525
12523: GO 12736
12525: POP
// begin if b then
12526: LD_VAR 0 4
12530: IFFALSE 12546
// begin SetTag ( i , 1 ) ;
12532: LD_VAR 0 1
12536: PPUSH
12537: LD_INT 1
12539: PPUSH
12540: CALL_OW 109
// continue ;
12544: GO 12494
// end ; if not ruBuildList then
12546: LD_EXP 35
12550: NOT
12551: IFFALSE 12567
// ComEnterUnit ( i , ruDep ) else
12553: LD_VAR 0 1
12557: PPUSH
12558: LD_INT 28
12560: PPUSH
12561: CALL_OW 120
12565: GO 12734
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
12567: LD_INT 11
12569: PPUSH
12570: LD_INT 81
12572: PUSH
12573: LD_INT 3
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PPUSH
12580: CALL_OW 70
12584: PUSH
12585: LD_INT 0
12587: EQUAL
12588: PUSH
12589: LD_INT 28
12591: PPUSH
12592: LD_EXP 35
12596: PUSH
12597: LD_INT 1
12599: ARRAY
12600: PUSH
12601: LD_INT 1
12603: ARRAY
12604: PPUSH
12605: LD_EXP 35
12609: PUSH
12610: LD_INT 1
12612: ARRAY
12613: PUSH
12614: LD_INT 2
12616: ARRAY
12617: PPUSH
12618: LD_EXP 35
12622: PUSH
12623: LD_INT 1
12625: ARRAY
12626: PUSH
12627: LD_INT 3
12629: ARRAY
12630: PPUSH
12631: LD_EXP 35
12635: PUSH
12636: LD_INT 1
12638: ARRAY
12639: PUSH
12640: LD_INT 4
12642: ARRAY
12643: PPUSH
12644: CALL 54364 0 5
12648: AND
12649: IFFALSE 12734
// begin if IsInUnit ( i ) then
12651: LD_VAR 0 1
12655: PPUSH
12656: CALL_OW 310
12660: IFFALSE 12673
// ComExitBuilding ( i ) else
12662: LD_VAR 0 1
12666: PPUSH
12667: CALL_OW 122
12671: GO 12734
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
12673: LD_VAR 0 1
12677: PPUSH
12678: LD_EXP 35
12682: PUSH
12683: LD_INT 1
12685: ARRAY
12686: PUSH
12687: LD_INT 1
12689: ARRAY
12690: PPUSH
12691: LD_EXP 35
12695: PUSH
12696: LD_INT 1
12698: ARRAY
12699: PUSH
12700: LD_INT 2
12702: ARRAY
12703: PPUSH
12704: LD_EXP 35
12708: PUSH
12709: LD_INT 1
12711: ARRAY
12712: PUSH
12713: LD_INT 3
12715: ARRAY
12716: PPUSH
12717: LD_EXP 35
12721: PUSH
12722: LD_INT 1
12724: ARRAY
12725: PUSH
12726: LD_INT 4
12728: ARRAY
12729: PPUSH
12730: CALL_OW 145
// end ; end ; 1 :
12734: GO 12933
12736: LD_INT 1
12738: DOUBLE
12739: EQUAL
12740: IFTRUE 12744
12742: GO 12847
12744: POP
// begin if not b then
12745: LD_VAR 0 4
12749: NOT
12750: IFFALSE 12766
// begin SetTag ( i , 0 ) ;
12752: LD_VAR 0 1
12756: PPUSH
12757: LD_INT 0
12759: PPUSH
12760: CALL_OW 109
// continue ;
12764: GO 12494
// end ; if IsInUnit ( i ) then
12766: LD_VAR 0 1
12770: PPUSH
12771: CALL_OW 310
12775: IFFALSE 12786
// ComExitBuilding ( i ) ;
12777: LD_VAR 0 1
12781: PPUSH
12782: CALL_OW 122
// if GetLives ( i ) < 650 then
12786: LD_VAR 0 1
12790: PPUSH
12791: CALL_OW 256
12795: PUSH
12796: LD_INT 650
12798: LESS
12799: IFFALSE 12815
// begin SetTag ( i , 2 ) ;
12801: LD_VAR 0 1
12805: PPUSH
12806: LD_INT 2
12808: PPUSH
12809: CALL_OW 109
// continue ;
12813: GO 12494
// end ; if b then
12815: LD_VAR 0 4
12819: IFFALSE 12845
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
12821: LD_VAR 0 1
12825: PPUSH
12826: LD_VAR 0 4
12830: PPUSH
12831: LD_VAR 0 1
12835: PPUSH
12836: CALL_OW 74
12840: PPUSH
12841: CALL_OW 130
// end ; 2 :
12845: GO 12933
12847: LD_INT 2
12849: DOUBLE
12850: EQUAL
12851: IFTRUE 12855
12853: GO 12932
12855: POP
// begin if GetLives ( i ) = 1000 then
12856: LD_VAR 0 1
12860: PPUSH
12861: CALL_OW 256
12865: PUSH
12866: LD_INT 1000
12868: EQUAL
12869: IFFALSE 12885
// begin SetTag ( i , 1 ) ;
12871: LD_VAR 0 1
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: CALL_OW 109
// continue ;
12883: GO 12494
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
12885: LD_VAR 0 1
12889: PPUSH
12890: LD_INT 84
12892: PPUSH
12893: LD_INT 93
12895: PPUSH
12896: CALL_OW 297
12900: PUSH
12901: LD_INT 6
12903: GREATER
12904: IFFALSE 12930
// begin ComMoveXY ( i , 84 , 93 ) ;
12906: LD_VAR 0 1
12910: PPUSH
12911: LD_INT 84
12913: PPUSH
12914: LD_INT 93
12916: PPUSH
12917: CALL_OW 111
// AddComHold ( i ) ;
12921: LD_VAR 0 1
12925: PPUSH
12926: CALL_OW 200
// end ; end ; end ;
12930: GO 12933
12932: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
12933: LD_VAR 0 1
12937: PPUSH
12938: LD_INT 12
12940: PPUSH
12941: CALL_OW 308
12945: NOT
12946: PUSH
12947: LD_VAR 0 1
12951: PPUSH
12952: CALL_OW 310
12956: NOT
12957: AND
12958: IFFALSE 12975
// ComMoveXY ( i , 91 , 95 ) ;
12960: LD_VAR 0 1
12964: PPUSH
12965: LD_INT 91
12967: PPUSH
12968: LD_INT 95
12970: PPUSH
12971: CALL_OW 111
// end ;
12975: GO 12494
12977: POP
12978: POP
// end ; end ;
12979: PPOPN 13
12981: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
12982: LD_INT 0
12984: PPUSH
12985: PPUSH
12986: PPUSH
12987: PPUSH
12988: PPUSH
12989: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
12990: LD_ADDR_VAR 0 3
12994: PUSH
12995: DOUBLE
12996: LD_INT 1
12998: DEC
12999: ST_TO_ADDR
13000: LD_INT 3
13002: PUSH
13003: LD_INT 4
13005: PUSH
13006: LD_INT 5
13008: PUSH
13009: LD_INT 6
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: PUSH
13018: LD_OWVAR 67
13022: ARRAY
13023: PUSH
13024: LD_VAR 0 1
13028: PLUS
13029: PUSH
13030: FOR_TO
13031: IFFALSE 13348
// begin uc_side := 6 ;
13033: LD_ADDR_OWVAR 20
13037: PUSH
13038: LD_INT 6
13040: ST_TO_ADDR
// uc_nation := 3 ;
13041: LD_ADDR_OWVAR 21
13045: PUSH
13046: LD_INT 3
13048: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13049: LD_ADDR_VAR 0 6
13053: PUSH
13054: LD_INT 21
13056: PUSH
13057: LD_INT 22
13059: PUSH
13060: LD_INT 23
13062: PUSH
13063: LD_INT 24
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 1
13074: PPUSH
13075: LD_INT 4
13077: PPUSH
13078: CALL_OW 12
13082: ARRAY
13083: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13084: LD_ADDR_VAR 0 7
13088: PUSH
13089: LD_INT 42
13091: PUSH
13092: LD_INT 44
13094: PUSH
13095: LD_INT 43
13097: PUSH
13098: LD_INT 46
13100: PUSH
13101: LD_INT 45
13103: PUSH
13104: LD_INT 46
13106: PUSH
13107: LD_INT 45
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: PUSH
13119: LD_OWVAR 67
13123: PUSH
13124: LD_INT 0
13126: PPUSH
13127: LD_INT 3
13129: PPUSH
13130: CALL_OW 12
13134: PLUS
13135: ARRAY
13136: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13137: LD_VAR 0 6
13141: PUSH
13142: LD_INT 21
13144: PUSH
13145: LD_INT 22
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: IN
13152: PUSH
13153: LD_VAR 0 7
13157: PUSH
13158: LD_INT 46
13160: EQUAL
13161: AND
13162: IFFALSE 13191
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13164: LD_ADDR_VAR 0 7
13168: PUSH
13169: LD_INT 44
13171: PUSH
13172: LD_INT 45
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: LD_INT 1
13181: PPUSH
13182: LD_INT 2
13184: PPUSH
13185: CALL_OW 12
13189: ARRAY
13190: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
13191: LD_OWVAR 1
13195: PUSH
13196: LD_INT 31500
13198: PUSH
13199: LD_INT 27300
13201: PUSH
13202: LD_INT 23100
13204: PUSH
13205: LD_INT 18900
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_OWVAR 67
13218: ARRAY
13219: LESS
13220: IFFALSE 13253
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
13222: LD_ADDR_VAR 0 7
13226: PUSH
13227: LD_INT 44
13229: PUSH
13230: LD_INT 43
13232: PUSH
13233: LD_INT 42
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 1
13243: PPUSH
13244: LD_INT 3
13246: PPUSH
13247: CALL_OW 12
13251: ARRAY
13252: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
13253: LD_VAR 0 6
13257: PPUSH
13258: LD_INT 1
13260: PPUSH
13261: LD_INT 3
13263: PPUSH
13264: LD_VAR 0 7
13268: PPUSH
13269: LD_INT 90
13271: PPUSH
13272: CALL 45768 0 5
// un := CreateVehicle ;
13276: LD_ADDR_VAR 0 4
13280: PUSH
13281: CALL_OW 45
13285: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
13286: LD_VAR 0 4
13290: PPUSH
13291: LD_INT 140
13293: PPUSH
13294: LD_INT 146
13296: PPUSH
13297: LD_INT 0
13299: PPUSH
13300: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
13304: LD_VAR 0 4
13308: PPUSH
13309: LD_INT 131
13311: PPUSH
13312: LD_INT 128
13314: PPUSH
13315: CALL_OW 111
// wait ( 0 0$3 ) ;
13319: LD_INT 105
13321: PPUSH
13322: CALL_OW 67
// tmp := Join ( tmp , un ) ;
13326: LD_ADDR_VAR 0 5
13330: PUSH
13331: LD_VAR 0 5
13335: PPUSH
13336: LD_VAR 0 4
13340: PPUSH
13341: CALL 78619 0 2
13345: ST_TO_ADDR
// end ;
13346: GO 13030
13348: POP
13349: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
13350: LD_ADDR_EXP 36
13354: PUSH
13355: LD_EXP 36
13359: PPUSH
13360: LD_VAR 0 5
13364: PPUSH
13365: CALL 78656 0 2
13369: ST_TO_ADDR
// end ;
13370: LD_VAR 0 2
13374: RET
// every 0 0$3 trigger russianAttackers do
13375: LD_EXP 36
13379: IFFALSE 13462
13381: GO 13383
13383: DISABLE
// begin enable ;
13384: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
13385: LD_EXP 36
13389: PPUSH
13390: LD_INT 126
13392: PUSH
13393: LD_INT 108
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 107
13402: PUSH
13403: LD_INT 85
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PUSH
13410: LD_INT 82
13412: PUSH
13413: LD_INT 62
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 73
13422: PUSH
13423: LD_INT 46
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 62
13432: PUSH
13433: LD_INT 31
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PUSH
13440: LD_INT 52
13442: PUSH
13443: LD_INT 17
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: PPUSH
13458: CALL 81223 0 2
// end ; end_of_file
13462: END
// on SailEvent ( event ) do begin if event = 1 then
13463: LD_VAR 0 1
13467: PUSH
13468: LD_INT 1
13470: EQUAL
13471: IFFALSE 13486
// PrepareRussianAttack ( Difficulty + 3 ) ;
13473: LD_OWVAR 67
13477: PUSH
13478: LD_INT 3
13480: PLUS
13481: PPUSH
13482: CALL 12982 0 1
// end ;
13486: PPOPN 1
13488: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Sikorski and killerSide = 1 then
13489: LD_VAR 0 1
13493: PUSH
13494: LD_EXP 28
13498: EQUAL
13499: PUSH
13500: LD_VAR 0 2
13504: PUSH
13505: LD_INT 1
13507: EQUAL
13508: AND
13509: IFFALSE 13515
// SikorskiKilledInAction ;
13511: CALL 18632 0 0
// end ;
13515: PPOPN 3
13517: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
13518: LD_INT 0
13520: PPUSH
13521: PPUSH
13522: PPUSH
13523: PPUSH
13524: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
13525: LD_VAR 0 1
13529: PPUSH
13530: CALL 36034 0 1
// if un = JMM then
13534: LD_VAR 0 1
13538: PUSH
13539: LD_EXP 14
13543: EQUAL
13544: IFFALSE 13553
// YouLost ( JMM ) ;
13546: LD_STRING JMM
13548: PPUSH
13549: CALL_OW 104
// if un = Sikorski then
13553: LD_VAR 0 1
13557: PUSH
13558: LD_EXP 28
13562: EQUAL
13563: IFFALSE 13589
// if sikorskiStatus = 0 then
13565: LD_EXP 9
13569: PUSH
13570: LD_INT 0
13572: EQUAL
13573: IFFALSE 13581
// SikorskiKilledInAction else
13575: CALL 18632 0 0
13579: GO 13589
// sikorskiIsKilled := true ;
13581: LD_ADDR_EXP 10
13585: PUSH
13586: LD_INT 1
13588: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetNation ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
13589: LD_VAR 0 1
13593: PPUSH
13594: CALL_OW 255
13598: PUSH
13599: LD_INT 1
13601: EQUAL
13602: PUSH
13603: LD_VAR 0 1
13607: PPUSH
13608: CALL_OW 248
13612: PUSH
13613: LD_INT 1
13615: EQUAL
13616: AND
13617: PUSH
13618: LD_VAR 0 1
13622: PPUSH
13623: CALL_OW 266
13627: PUSH
13628: LD_INT 0
13630: PUSH
13631: LD_INT 1
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: IN
13638: AND
13639: IFFALSE 13648
// YouLost ( Destroyed ) ;
13641: LD_STRING Destroyed
13643: PPUSH
13644: CALL_OW 104
// if un = ruDep then
13648: LD_VAR 0 1
13652: PUSH
13653: LD_INT 28
13655: EQUAL
13656: IFFALSE 13790
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
13658: LD_ADDR_VAR 0 2
13662: PUSH
13663: LD_INT 22
13665: PUSH
13666: LD_INT 3
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 25
13675: PUSH
13676: LD_INT 1
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 69
13691: PUSH
13692: FOR_IN
13693: IFFALSE 13788
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
13695: LD_ADDR_VAR 0 3
13699: PUSH
13700: LD_INT 11
13702: PPUSH
13703: LD_INT 81
13705: PUSH
13706: LD_INT 3
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PPUSH
13713: CALL_OW 70
13717: PPUSH
13718: LD_VAR 0 2
13722: PPUSH
13723: CALL_OW 74
13727: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
13728: LD_VAR 0 2
13732: PPUSH
13733: CALL_OW 310
13737: PPUSH
13738: CALL_OW 266
13742: PUSH
13743: LD_INT 32
13745: EQUAL
13746: IFFALSE 13786
// begin ComExitBuilding ( i ) ;
13748: LD_VAR 0 2
13752: PPUSH
13753: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
13757: LD_VAR 0 2
13761: PPUSH
13762: LD_VAR 0 3
13766: PPUSH
13767: CALL_OW 250
13771: PPUSH
13772: LD_VAR 0 3
13776: PPUSH
13777: CALL_OW 251
13781: PPUSH
13782: CALL_OW 174
// end ; end ;
13786: GO 13692
13788: POP
13789: POP
// end ; if un in ruMobile then
13790: LD_VAR 0 1
13794: PUSH
13795: LD_EXP 34
13799: IN
13800: IFFALSE 13818
// ruMobile := ruMobile diff un ;
13802: LD_ADDR_EXP 34
13806: PUSH
13807: LD_EXP 34
13811: PUSH
13812: LD_VAR 0 1
13816: DIFF
13817: ST_TO_ADDR
// if GetSide ( un ) = 3 then
13818: LD_VAR 0 1
13822: PPUSH
13823: CALL_OW 255
13827: PUSH
13828: LD_INT 3
13830: EQUAL
13831: IFFALSE 14466
// begin if GetType ( un ) = unit_building then
13833: LD_VAR 0 1
13837: PPUSH
13838: CALL_OW 247
13842: PUSH
13843: LD_INT 3
13845: EQUAL
13846: IFFALSE 13982
// begin btype := GetBType ( un ) ;
13848: LD_ADDR_VAR 0 6
13852: PUSH
13853: LD_VAR 0 1
13857: PPUSH
13858: CALL_OW 266
13862: ST_TO_ADDR
// if btype = b_warehouse then
13863: LD_VAR 0 6
13867: PUSH
13868: LD_INT 1
13870: EQUAL
13871: IFFALSE 13881
// btype := b_depot ;
13873: LD_ADDR_VAR 0 6
13877: PUSH
13878: LD_INT 0
13880: ST_TO_ADDR
// if btype = b_barracks then
13881: LD_VAR 0 6
13885: PUSH
13886: LD_INT 5
13888: EQUAL
13889: IFFALSE 13899
// btype := b_armoury ;
13891: LD_ADDR_VAR 0 6
13895: PUSH
13896: LD_INT 4
13898: ST_TO_ADDR
// if btype = b_lab_full then
13899: LD_VAR 0 6
13903: PUSH
13904: LD_INT 8
13906: EQUAL
13907: IFFALSE 13917
// btype := b_lab ;
13909: LD_ADDR_VAR 0 6
13913: PUSH
13914: LD_INT 6
13916: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
13917: LD_ADDR_EXP 35
13921: PUSH
13922: LD_EXP 35
13926: PPUSH
13927: LD_EXP 35
13931: PUSH
13932: LD_INT 1
13934: PLUS
13935: PPUSH
13936: LD_VAR 0 6
13940: PUSH
13941: LD_VAR 0 1
13945: PPUSH
13946: CALL_OW 250
13950: PUSH
13951: LD_VAR 0 1
13955: PPUSH
13956: CALL_OW 251
13960: PUSH
13961: LD_VAR 0 1
13965: PPUSH
13966: CALL_OW 254
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: PPUSH
13977: CALL_OW 1
13981: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
13982: LD_VAR 0 1
13986: PPUSH
13987: CALL_OW 247
13991: PUSH
13992: LD_INT 2
13994: EQUAL
13995: IFFALSE 14270
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
13997: LD_VAR 0 1
14001: PPUSH
14002: CALL_OW 264
14006: PUSH
14007: LD_INT 52
14009: PUSH
14010: LD_INT 51
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: IN
14017: IFFALSE 14047
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
14019: LD_INT 29
14021: PPUSH
14022: LD_INT 22
14024: PPUSH
14025: LD_INT 1
14027: PPUSH
14028: LD_INT 3
14030: PPUSH
14031: LD_VAR 0 1
14035: PPUSH
14036: CALL_OW 264
14040: PPUSH
14041: CALL_OW 185
// end else
14045: GO 14270
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
14047: LD_ADDR_VAR 0 4
14051: PUSH
14052: LD_INT 21
14054: PUSH
14055: LD_INT 22
14057: PUSH
14058: LD_INT 23
14060: PUSH
14061: LD_INT 24
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 1
14072: PPUSH
14073: LD_INT 4
14075: PPUSH
14076: CALL_OW 12
14080: ARRAY
14081: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
14082: LD_ADDR_VAR 0 5
14086: PUSH
14087: LD_INT 42
14089: PUSH
14090: LD_INT 44
14092: PUSH
14093: LD_INT 43
14095: PUSH
14096: LD_INT 46
14098: PUSH
14099: LD_INT 45
14101: PUSH
14102: LD_INT 46
14104: PUSH
14105: LD_INT 45
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: PUSH
14117: LD_OWVAR 67
14121: PUSH
14122: LD_INT 0
14124: PPUSH
14125: LD_INT 3
14127: PPUSH
14128: CALL_OW 12
14132: PLUS
14133: ARRAY
14134: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
14135: LD_VAR 0 4
14139: PUSH
14140: LD_INT 21
14142: PUSH
14143: LD_INT 22
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: IN
14150: PUSH
14151: LD_VAR 0 5
14155: PUSH
14156: LD_INT 46
14158: EQUAL
14159: AND
14160: IFFALSE 14189
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
14162: LD_ADDR_VAR 0 5
14166: PUSH
14167: LD_INT 44
14169: PUSH
14170: LD_INT 45
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: PUSH
14177: LD_INT 1
14179: PPUSH
14180: LD_INT 2
14182: PPUSH
14183: CALL_OW 12
14187: ARRAY
14188: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
14189: LD_OWVAR 1
14193: PUSH
14194: LD_INT 31500
14196: PUSH
14197: LD_INT 27300
14199: PUSH
14200: LD_INT 23100
14202: PUSH
14203: LD_INT 21000
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: PUSH
14212: LD_OWVAR 67
14216: ARRAY
14217: LESS
14218: IFFALSE 14247
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
14220: LD_ADDR_VAR 0 5
14224: PUSH
14225: LD_INT 44
14227: PUSH
14228: LD_INT 43
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 1
14237: PPUSH
14238: LD_INT 2
14240: PPUSH
14241: CALL_OW 12
14245: ARRAY
14246: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
14247: LD_INT 29
14249: PPUSH
14250: LD_VAR 0 4
14254: PPUSH
14255: LD_INT 1
14257: PPUSH
14258: LD_INT 1
14260: PPUSH
14261: LD_VAR 0 5
14265: PPUSH
14266: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
14270: LD_VAR 0 1
14274: PPUSH
14275: CALL_OW 257
14279: PUSH
14280: LD_INT 3
14282: EQUAL
14283: IFFALSE 14466
// begin killMechCounter := Inc ( killMechCounter ) ;
14285: LD_ADDR_EXP 12
14289: PUSH
14290: LD_EXP 12
14294: PPUSH
14295: CALL 79980 0 1
14299: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
14300: LD_EXP 33
14304: PUSH
14305: LD_INT 0
14307: EQUAL
14308: PUSH
14309: LD_INT 29
14311: PPUSH
14312: CALL_OW 302
14316: NOT
14317: OR
14318: IFFALSE 14322
// exit ;
14320: GO 14466
// ruMechCounter := Dec ( ruMechCounter ) ;
14322: LD_ADDR_EXP 33
14326: PUSH
14327: LD_EXP 33
14331: PPUSH
14332: CALL 80002 0 1
14336: ST_TO_ADDR
// uc_side := 3 ;
14337: LD_ADDR_OWVAR 20
14341: PUSH
14342: LD_INT 3
14344: ST_TO_ADDR
// uc_nation := 3 ;
14345: LD_ADDR_OWVAR 21
14349: PUSH
14350: LD_INT 3
14352: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
14353: LD_INT 0
14355: PPUSH
14356: LD_INT 5
14358: PUSH
14359: LD_INT 6
14361: PUSH
14362: LD_INT 7
14364: PUSH
14365: LD_INT 8
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: PUSH
14374: LD_OWVAR 67
14378: ARRAY
14379: PPUSH
14380: CALL_OW 383
// tmp := CreateHuman ;
14384: LD_ADDR_VAR 0 3
14388: PUSH
14389: CALL_OW 44
14393: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
14394: LD_VAR 0 3
14398: PPUSH
14399: LD_INT 145
14401: PPUSH
14402: LD_INT 133
14404: PPUSH
14405: LD_INT 0
14407: PPUSH
14408: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
14412: LD_VAR 0 3
14416: PPUSH
14417: LD_INT 29
14419: PPUSH
14420: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14424: LD_INT 35
14426: PPUSH
14427: CALL_OW 67
// if not HasTask ( tmp ) then
14431: LD_VAR 0 3
14435: PPUSH
14436: CALL_OW 314
14440: NOT
14441: IFFALSE 14455
// ComEnterUnit ( tmp , ruFac ) ;
14443: LD_VAR 0 3
14447: PPUSH
14448: LD_INT 29
14450: PPUSH
14451: CALL_OW 120
// until IsInUnit ( tmp ) ;
14455: LD_VAR 0 3
14459: PPUSH
14460: CALL_OW 310
14464: IFFALSE 14424
// end ; end ; end ;
14466: PPOPN 6
14468: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
14469: LD_VAR 0 1
14473: PPUSH
14474: CALL_OW 255
14478: PUSH
14479: LD_INT 4
14481: EQUAL
14482: IFFALSE 14499
// ComMoveXY ( driver , 40 , 47 ) ;
14484: LD_VAR 0 1
14488: PPUSH
14489: LD_INT 40
14491: PPUSH
14492: LD_INT 47
14494: PPUSH
14495: CALL_OW 111
// if GetSide ( driver ) = 3 then
14499: LD_VAR 0 1
14503: PPUSH
14504: CALL_OW 255
14508: PUSH
14509: LD_INT 3
14511: EQUAL
14512: IFFALSE 14726
// begin ComMoveXY ( driver , 90 , 97 ) ;
14514: LD_VAR 0 1
14518: PPUSH
14519: LD_INT 90
14521: PPUSH
14522: LD_INT 97
14524: PPUSH
14525: CALL_OW 111
// if IsOk ( ruFac ) then
14529: LD_INT 29
14531: PPUSH
14532: CALL_OW 302
14536: IFFALSE 14650
// begin repeat wait ( 0 0$1 ) ;
14538: LD_INT 35
14540: PPUSH
14541: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
14545: LD_INT 29
14547: PPUSH
14548: CALL_OW 313
14552: PUSH
14553: LD_INT 6
14555: LESS
14556: PUSH
14557: LD_VAR 0 1
14561: PPUSH
14562: CALL_OW 301
14566: OR
14567: IFFALSE 14538
// if IsDead ( driver ) then
14569: LD_VAR 0 1
14573: PPUSH
14574: CALL_OW 301
14578: IFFALSE 14582
// exit ;
14580: GO 14726
// repeat wait ( 0 0$10 ) ;
14582: LD_INT 350
14584: PPUSH
14585: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
14589: LD_VAR 0 1
14593: PPUSH
14594: CALL_OW 314
14598: NOT
14599: PUSH
14600: LD_INT 29
14602: PPUSH
14603: CALL_OW 313
14607: PUSH
14608: LD_INT 6
14610: LESS
14611: AND
14612: IFFALSE 14626
// ComEnterUnit ( driver , ruFac ) ;
14614: LD_VAR 0 1
14618: PPUSH
14619: LD_INT 29
14621: PPUSH
14622: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
14626: LD_VAR 0 1
14630: PPUSH
14631: CALL_OW 301
14635: PUSH
14636: LD_VAR 0 1
14640: PPUSH
14641: CALL_OW 310
14645: OR
14646: IFFALSE 14582
// end else
14648: GO 14726
// begin ComMoveXY ( driver , 142 , 148 ) ;
14650: LD_VAR 0 1
14654: PPUSH
14655: LD_INT 142
14657: PPUSH
14658: LD_INT 148
14660: PPUSH
14661: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14665: LD_INT 35
14667: PPUSH
14668: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
14672: LD_VAR 0 1
14676: PPUSH
14677: CALL_OW 301
14681: PUSH
14682: LD_VAR 0 1
14686: PPUSH
14687: LD_INT 142
14689: PPUSH
14690: LD_INT 148
14692: PPUSH
14693: CALL_OW 307
14697: OR
14698: IFFALSE 14665
// if IsAt ( driver , 142 , 148 ) then
14700: LD_VAR 0 1
14704: PPUSH
14705: LD_INT 142
14707: PPUSH
14708: LD_INT 148
14710: PPUSH
14711: CALL_OW 307
14715: IFFALSE 14726
// RemoveUnit ( driver ) ;
14717: LD_VAR 0 1
14721: PPUSH
14722: CALL_OW 64
// end ; end ; end ;
14726: PPOPN 4
14728: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
14729: LD_VAR 0 2
14733: PPUSH
14734: CALL_OW 257
14738: PUSH
14739: LD_INT 3
14741: EQUAL
14742: PUSH
14743: LD_VAR 0 1
14747: PPUSH
14748: CALL_OW 255
14752: PUSH
14753: LD_INT 3
14755: EQUAL
14756: AND
14757: PUSH
14758: LD_VAR 0 1
14762: PUSH
14763: LD_INT 29
14765: EQUAL
14766: AND
14767: IFFALSE 14781
// SetLives ( un , 1000 ) ;
14769: LD_VAR 0 2
14773: PPUSH
14774: LD_INT 1000
14776: PPUSH
14777: CALL_OW 234
// if GetTag ( b ) = 701 then
14781: LD_VAR 0 1
14785: PPUSH
14786: CALL_OW 110
14790: PUSH
14791: LD_INT 701
14793: EQUAL
14794: IFFALSE 14820
// begin SetTag ( b , 0 ) ;
14796: LD_VAR 0 1
14800: PPUSH
14801: LD_INT 0
14803: PPUSH
14804: CALL_OW 109
// SetTag ( un , 0 ) ;
14808: LD_VAR 0 2
14812: PPUSH
14813: LD_INT 0
14815: PPUSH
14816: CALL_OW 109
// end ; end ;
14820: PPOPN 2
14822: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
14823: LD_VAR 0 1
14827: PPUSH
14828: CALL_OW 255
14832: PUSH
14833: LD_INT 3
14835: PUSH
14836: LD_INT 6
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: IN
14843: PUSH
14844: LD_VAR 0 1
14848: PPUSH
14849: CALL_OW 263
14853: PUSH
14854: LD_INT 3
14856: EQUAL
14857: AND
14858: PUSH
14859: LD_EXP 7
14863: NOT
14864: AND
14865: IFFALSE 14884
// begin seenComputer := true ;
14867: LD_ADDR_EXP 7
14871: PUSH
14872: LD_INT 1
14874: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
14875: LD_VAR 0 1
14879: PPUSH
14880: CALL 17823 0 1
// end ; end ;
14884: PPOPN 1
14886: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
14887: LD_INT 0
14889: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
14890: LD_VAR 0 1
14894: PPUSH
14895: LD_VAR 0 2
14899: PPUSH
14900: CALL 36154 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
14904: LD_VAR 0 1
14908: PPUSH
14909: CALL_OW 255
14913: PUSH
14914: LD_INT 3
14916: EQUAL
14917: PUSH
14918: LD_VAR 0 1
14922: PPUSH
14923: CALL_OW 263
14927: PUSH
14928: LD_INT 1
14930: EQUAL
14931: AND
14932: PUSH
14933: LD_VAR 0 1
14937: PPUSH
14938: CALL_OW 264
14942: PUSH
14943: LD_INT 42
14945: PUSH
14946: LD_INT 43
14948: PUSH
14949: LD_INT 44
14951: PUSH
14952: LD_INT 46
14954: PUSH
14955: LD_INT 45
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: IN
14965: AND
14966: IFFALSE 14996
// begin SetTag ( vehicle , 300 ) ;
14968: LD_VAR 0 1
14972: PPUSH
14973: LD_INT 300
14975: PPUSH
14976: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
14980: LD_ADDR_EXP 34
14984: PUSH
14985: LD_EXP 34
14989: PUSH
14990: LD_VAR 0 1
14994: UNION
14995: ST_TO_ADDR
// end ; end ;
14996: PPOPN 3
14998: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
14999: LD_INT 0
15001: PPUSH
// begin if InArea ( x , y , ruCrates ) then
15002: LD_VAR 0 2
15006: PPUSH
15007: LD_VAR 0 3
15011: PPUSH
15012: LD_INT 13
15014: PPUSH
15015: CALL_OW 309
15019: IFFALSE 15150
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
15021: LD_ADDR_VAR 0 6
15025: PUSH
15026: LD_INT 22
15028: PUSH
15029: LD_INT 3
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 50
15038: PUSH
15039: EMPTY
15040: LIST
15041: PUSH
15042: LD_INT 34
15044: PUSH
15045: LD_INT 51
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: LIST
15056: PPUSH
15057: CALL_OW 69
15061: ST_TO_ADDR
// if not cargo then
15062: LD_VAR 0 6
15066: NOT
15067: IFFALSE 15071
// exit ;
15069: GO 15150
// wait ( 0 0$5 ) ;
15071: LD_INT 175
15073: PPUSH
15074: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
15078: LD_VAR 0 6
15082: PUSH
15083: LD_INT 1
15085: ARRAY
15086: PPUSH
15087: LD_INT 28
15089: PPUSH
15090: CALL_OW 296
15094: PUSH
15095: LD_INT 6
15097: LESS
15098: PUSH
15099: LD_VAR 0 6
15103: PUSH
15104: LD_INT 1
15106: ARRAY
15107: PPUSH
15108: CALL_OW 261
15112: PUSH
15113: LD_INT 50
15115: LESS
15116: AND
15117: IFFALSE 15131
// ComMoveUnit ( cargo , ruDep ) ;
15119: LD_VAR 0 6
15123: PPUSH
15124: LD_INT 28
15126: PPUSH
15127: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
15131: LD_VAR 0 6
15135: PPUSH
15136: LD_VAR 0 2
15140: PPUSH
15141: LD_VAR 0 3
15145: PPUSH
15146: CALL_OW 177
// end ; end ;
15150: PPOPN 6
15152: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
15153: LD_VAR 0 1
15157: PPUSH
15158: CALL_OW 264
15162: PUSH
15163: LD_INT 45
15165: EQUAL
15166: IFFALSE 15183
// captureRocketCounter := Inc ( captureRocketCounter ) ;
15168: LD_ADDR_EXP 11
15172: PUSH
15173: LD_EXP 11
15177: PPUSH
15178: CALL 79980 0 1
15182: ST_TO_ADDR
// end ;
15183: PPOPN 4
15185: END
// on BuildingComplete ( b ) do var i , tmp ;
15186: LD_INT 0
15188: PPUSH
15189: PPUSH
// begin if GetSide ( b ) = 3 then
15190: LD_VAR 0 1
15194: PPUSH
15195: CALL_OW 255
15199: PUSH
15200: LD_INT 3
15202: EQUAL
15203: IFFALSE 15300
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
15205: LD_ADDR_EXP 35
15209: PUSH
15210: LD_EXP 35
15214: PPUSH
15215: LD_INT 1
15217: PPUSH
15218: CALL_OW 3
15222: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
15223: LD_VAR 0 1
15227: PPUSH
15228: CALL_OW 266
15232: PUSH
15233: LD_INT 4
15235: EQUAL
15236: IFFALSE 15247
// ComUpgrade ( b ) ;
15238: LD_VAR 0 1
15242: PPUSH
15243: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
15247: LD_VAR 0 1
15251: PPUSH
15252: CALL_OW 266
15256: PUSH
15257: LD_INT 32
15259: PUSH
15260: LD_INT 33
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: IN
15267: IFFALSE 15300
// AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
15269: LD_VAR 0 1
15273: PPUSH
15274: LD_INT 46
15276: PUSH
15277: LD_INT 45
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 1
15286: PPUSH
15287: LD_INT 2
15289: PPUSH
15290: CALL_OW 12
15294: ARRAY
15295: PPUSH
15296: CALL_OW 208
// end ; end ; end_of_file
15300: PPOPN 3
15302: END
// export function Action ; var i , tmp , un , inUnit ; begin
15303: LD_INT 0
15305: PPUSH
15306: PPUSH
15307: PPUSH
15308: PPUSH
15309: PPUSH
// Video ( true ) ;
15310: LD_INT 1
15312: PPUSH
15313: CALL 78591 0 1
// invincibleMode := true ;
15317: LD_ADDR_EXP 5
15321: PUSH
15322: LD_INT 1
15324: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
15325: LD_INT 50
15327: PPUSH
15328: LD_INT 12
15330: PPUSH
15331: LD_INT 1
15333: PPUSH
15334: LD_INT 56
15336: NEG
15337: PPUSH
15338: CALL 78505 0 4
// CenterOnXY ( 50 , 12 ) ;
15342: LD_INT 50
15344: PPUSH
15345: LD_INT 12
15347: PPUSH
15348: CALL_OW 84
// wait ( 0 0$3 ) ;
15352: LD_INT 105
15354: PPUSH
15355: CALL_OW 67
// PrepareStartRussianAttack ;
15359: CALL 9999 0 0
// CenterOnXY ( 66 , 47 ) ;
15363: LD_INT 66
15365: PPUSH
15366: LD_INT 47
15368: PPUSH
15369: CALL_OW 84
// wait ( 0 0$5 ) ;
15373: LD_INT 175
15375: PPUSH
15376: CALL_OW 67
// case gammaCommander of 1 :
15380: LD_EXP 13
15384: PUSH
15385: LD_INT 1
15387: DOUBLE
15388: EQUAL
15389: IFTRUE 15393
15391: GO 15408
15393: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
15394: LD_EXP 16
15398: PPUSH
15399: LD_STRING D1-Don-1
15401: PPUSH
15402: CALL_OW 88
15406: GO 15455
15408: LD_INT 2
15410: DOUBLE
15411: EQUAL
15412: IFTRUE 15416
15414: GO 15431
15416: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
15417: LD_EXP 15
15421: PPUSH
15422: LD_STRING D1-Brown-1
15424: PPUSH
15425: CALL_OW 88
15429: GO 15455
15431: LD_INT 3
15433: DOUBLE
15434: EQUAL
15435: IFTRUE 15439
15437: GO 15454
15439: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
15440: LD_EXP 25
15444: PPUSH
15445: LD_STRING D1-VanH-1
15447: PPUSH
15448: CALL_OW 88
15452: GO 15455
15454: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
15455: LD_ADDR_VAR 0 3
15459: PUSH
15460: LD_INT 22
15462: PUSH
15463: LD_INT 1
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: PUSH
15470: LD_INT 33
15472: PUSH
15473: LD_INT 2
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PUSH
15480: LD_INT 61
15482: PUSH
15483: EMPTY
15484: LIST
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: LIST
15490: PPUSH
15491: CALL_OW 69
15495: ST_TO_ADDR
// if tmp then
15496: LD_VAR 0 3
15500: IFFALSE 15517
// ComAgressiveMove ( tmp , 74 , 44 ) ;
15502: LD_VAR 0 3
15506: PPUSH
15507: LD_INT 74
15509: PPUSH
15510: LD_INT 44
15512: PPUSH
15513: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
15517: LD_ADDR_VAR 0 3
15521: PUSH
15522: LD_INT 22
15524: PUSH
15525: LD_INT 1
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 25
15534: PUSH
15535: LD_INT 1
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PPUSH
15546: CALL_OW 69
15550: PUSH
15551: LD_EXP 16
15555: PUSH
15556: LD_EXP 15
15560: PUSH
15561: LD_EXP 25
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: LIST
15570: DIFF
15571: ST_TO_ADDR
// if tmp then
15572: LD_VAR 0 3
15576: IFFALSE 15654
// for i in tmp do
15578: LD_ADDR_VAR 0 2
15582: PUSH
15583: LD_VAR 0 3
15587: PUSH
15588: FOR_IN
15589: IFFALSE 15652
// begin inUnit := IsInUnit ( i ) ;
15591: LD_ADDR_VAR 0 5
15595: PUSH
15596: LD_VAR 0 2
15600: PPUSH
15601: CALL_OW 310
15605: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
15606: LD_VAR 0 5
15610: PUSH
15611: LD_VAR 0 5
15615: PPUSH
15616: CALL_OW 266
15620: PUSH
15621: LD_INT 32
15623: PUSH
15624: LD_INT 31
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: IN
15631: AND
15632: IFFALSE 15650
// tmp := tmp diff i ;
15634: LD_ADDR_VAR 0 3
15638: PUSH
15639: LD_VAR 0 3
15643: PUSH
15644: LD_VAR 0 2
15648: DIFF
15649: ST_TO_ADDR
// end ;
15650: GO 15588
15652: POP
15653: POP
// if tmp then
15654: LD_VAR 0 3
15658: IFFALSE 15748
// begin ComExitAll ( tmp ) ;
15660: LD_VAR 0 3
15664: PPUSH
15665: CALL 79100 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
15669: LD_VAR 0 3
15673: PPUSH
15674: LD_INT 74
15676: PPUSH
15677: LD_INT 44
15679: PPUSH
15680: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
15684: LD_ADDR_VAR 0 3
15688: PUSH
15689: LD_INT 22
15691: PUSH
15692: LD_INT 1
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PUSH
15699: LD_INT 25
15701: PUSH
15702: LD_INT 4
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: PPUSH
15713: CALL_OW 69
15717: ST_TO_ADDR
// if tmp then
15718: LD_VAR 0 3
15722: IFFALSE 15748
// begin ComExitAll ( tmp ) ;
15724: LD_VAR 0 3
15728: PPUSH
15729: CALL 79100 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
15733: LD_VAR 0 3
15737: PPUSH
15738: LD_INT 66
15740: PPUSH
15741: LD_INT 28
15743: PPUSH
15744: CALL_OW 171
// end ; end ; game_speed := 4 ;
15748: LD_ADDR_OWVAR 65
15752: PUSH
15753: LD_INT 4
15755: ST_TO_ADDR
// wait ( 0 0$2 ) ;
15756: LD_INT 70
15758: PPUSH
15759: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
15763: LD_EXP 29
15767: PPUSH
15768: LD_STRING D1-Har-1
15770: PPUSH
15771: CALL_OW 94
// case gammaCommander of 1 :
15775: LD_EXP 13
15779: PUSH
15780: LD_INT 1
15782: DOUBLE
15783: EQUAL
15784: IFTRUE 15788
15786: GO 15803
15788: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
15789: LD_EXP 16
15793: PPUSH
15794: LD_STRING D1-Don-2
15796: PPUSH
15797: CALL_OW 88
15801: GO 15850
15803: LD_INT 2
15805: DOUBLE
15806: EQUAL
15807: IFTRUE 15811
15809: GO 15826
15811: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
15812: LD_EXP 15
15816: PPUSH
15817: LD_STRING D1-Brown-2
15819: PPUSH
15820: CALL_OW 88
15824: GO 15850
15826: LD_INT 3
15828: DOUBLE
15829: EQUAL
15830: IFTRUE 15834
15832: GO 15849
15834: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
15835: LD_EXP 25
15839: PPUSH
15840: LD_STRING D1-VanH-2
15842: PPUSH
15843: CALL_OW 88
15847: GO 15850
15849: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
15850: LD_EXP 29
15854: PPUSH
15855: LD_STRING D1-Har-2
15857: PPUSH
15858: CALL_OW 94
// invincibleMode := false ;
15862: LD_ADDR_EXP 5
15866: PUSH
15867: LD_INT 0
15869: ST_TO_ADDR
// Video ( false ) ;
15870: LD_INT 0
15872: PPUSH
15873: CALL 78591 0 1
// ChangeMissionObjectives ( M1 ) ;
15877: LD_STRING M1
15879: PPUSH
15880: CALL_OW 337
// SaveForQuickRestart ;
15884: CALL_OW 22
// wait ( 2 2$30 ) ;
15888: LD_INT 5250
15890: PPUSH
15891: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
15895: LD_INT 1
15897: PPUSH
15898: CALL 12982 0 1
// wait ( 4 4$30 ) ;
15902: LD_INT 9450
15904: PPUSH
15905: CALL_OW 67
// if Difficulty > 1 then
15909: LD_OWVAR 67
15913: PUSH
15914: LD_INT 1
15916: GREATER
15917: IFFALSE 15926
// PrepareRussianAttack ( 2 ) ;
15919: LD_INT 2
15921: PPUSH
15922: CALL 12982 0 1
// if Difficulty > 2 then
15926: LD_OWVAR 67
15930: PUSH
15931: LD_INT 2
15933: GREATER
15934: IFFALSE 16093
// begin for i := 1 to 4 do
15936: LD_ADDR_VAR 0 2
15940: PUSH
15941: DOUBLE
15942: LD_INT 1
15944: DEC
15945: ST_TO_ADDR
15946: LD_INT 4
15948: PUSH
15949: FOR_TO
15950: IFFALSE 16035
// begin uc_side := 6 ;
15952: LD_ADDR_OWVAR 20
15956: PUSH
15957: LD_INT 6
15959: ST_TO_ADDR
// uc_nation := 3 ;
15960: LD_ADDR_OWVAR 21
15964: PUSH
15965: LD_INT 3
15967: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
15968: LD_INT 0
15970: PPUSH
15971: LD_INT 7
15973: PPUSH
15974: CALL_OW 381
// un := CreateHuman ;
15978: LD_ADDR_VAR 0 4
15982: PUSH
15983: CALL_OW 44
15987: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
15988: LD_VAR 0 4
15992: PPUSH
15993: LD_INT 122
15995: PPUSH
15996: LD_INT 89
15998: PPUSH
15999: LD_INT 3
16001: PPUSH
16002: LD_INT 0
16004: PPUSH
16005: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
16009: LD_VAR 0 4
16013: PPUSH
16014: LD_INT 88
16016: PPUSH
16017: LD_INT 42
16019: PPUSH
16020: CALL_OW 114
// AddComHold ( un ) ;
16024: LD_VAR 0 4
16028: PPUSH
16029: CALL_OW 200
// end ;
16033: GO 15949
16035: POP
16036: POP
// PrepareScientist ( false , 6 ) ;
16037: LD_INT 0
16039: PPUSH
16040: LD_INT 6
16042: PPUSH
16043: CALL_OW 384
// un := CreateHuman ;
16047: LD_ADDR_VAR 0 4
16051: PUSH
16052: CALL_OW 44
16056: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16057: LD_VAR 0 4
16061: PPUSH
16062: LD_INT 122
16064: PPUSH
16065: LD_INT 89
16067: PPUSH
16068: LD_INT 3
16070: PPUSH
16071: LD_INT 0
16073: PPUSH
16074: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
16078: LD_VAR 0 4
16082: PPUSH
16083: LD_INT 91
16085: PPUSH
16086: LD_INT 48
16088: PPUSH
16089: CALL_OW 111
// end ; end ;
16093: LD_VAR 0 1
16097: RET
// every 0 0$1 trigger invincibleMode do var i ;
16098: LD_EXP 5
16102: IFFALSE 16199
16104: GO 16106
16106: DISABLE
16107: LD_INT 0
16109: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_human ] ] , [ f_not , [ f_lives , 900 ] ] ] ) do
16110: LD_ADDR_VAR 0 1
16114: PUSH
16115: LD_INT 22
16117: PUSH
16118: LD_INT 1
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: LD_INT 2
16127: PUSH
16128: LD_INT 21
16130: PUSH
16131: LD_INT 3
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 21
16140: PUSH
16141: LD_INT 1
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 3
16155: PUSH
16156: LD_INT 24
16158: PUSH
16159: LD_INT 900
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: LIST
16174: PPUSH
16175: CALL_OW 69
16179: PUSH
16180: FOR_IN
16181: IFFALSE 16197
// SetLives ( i , 900 ) ;
16183: LD_VAR 0 1
16187: PPUSH
16188: LD_INT 900
16190: PPUSH
16191: CALL_OW 234
16195: GO 16180
16197: POP
16198: POP
// end ;
16199: PPOPN 1
16201: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
16202: LD_OWVAR 1
16206: PUSH
16207: LD_INT 14700
16209: GREATER
16210: IFFALSE 17820
16212: GO 16214
16214: DISABLE
16215: LD_INT 0
16217: PPUSH
16218: PPUSH
// begin PrepareSupportFromDelta ;
16219: CALL 4052 0 0
// deltaSupport := true ;
16223: LD_ADDR_EXP 6
16227: PUSH
16228: LD_INT 1
16230: ST_TO_ADDR
// dialog := false ;
16231: LD_ADDR_VAR 0 1
16235: PUSH
16236: LD_INT 0
16238: ST_TO_ADDR
// if IsOk ( Gladstone ) then
16239: LD_EXP 21
16243: PPUSH
16244: CALL_OW 302
16248: IFFALSE 16270
// dialog := Say ( Gladstone , D2-Glad-1 ) else
16250: LD_ADDR_VAR 0 1
16254: PUSH
16255: LD_EXP 21
16259: PPUSH
16260: LD_STRING D2-Glad-1
16262: PPUSH
16263: CALL_OW 88
16267: ST_TO_ADDR
16268: GO 16352
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
16270: LD_ADDR_VAR 0 1
16274: PUSH
16275: LD_INT 22
16277: PUSH
16278: LD_INT 1
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 120
16287: PUSH
16288: LD_INT 107
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: LD_INT 21
16297: PUSH
16298: LD_INT 1
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: LD_INT 23
16307: PUSH
16308: LD_INT 1
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: PPUSH
16321: CALL_OW 69
16325: PUSH
16326: LD_EXP 27
16330: PUSH
16331: LD_EXP 26
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: DIFF
16340: PPUSH
16341: LD_STRING D2-Sol1-1
16343: PPUSH
16344: LD_STRING D2-FSol1-1
16346: PPUSH
16347: CALL 20089 0 3
16351: ST_TO_ADDR
// if dialog then
16352: LD_VAR 0 1
16356: IFFALSE 16457
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
16358: LD_EXP 16
16362: PPUSH
16363: CALL_OW 302
16367: PUSH
16368: LD_EXP 13
16372: PUSH
16373: LD_INT 1
16375: EQUAL
16376: AND
16377: IFFALSE 16391
// Say ( Donaldson , D2-Don-1 ) ;
16379: LD_EXP 16
16383: PPUSH
16384: LD_STRING D2-Don-1
16386: PPUSH
16387: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
16391: LD_EXP 15
16395: PPUSH
16396: CALL_OW 302
16400: PUSH
16401: LD_EXP 13
16405: PUSH
16406: LD_INT 2
16408: EQUAL
16409: AND
16410: IFFALSE 16424
// Say ( Brown , D2-Brown-1 ) ;
16412: LD_EXP 15
16416: PPUSH
16417: LD_STRING D2-Brown-1
16419: PPUSH
16420: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
16424: LD_EXP 25
16428: PPUSH
16429: CALL_OW 302
16433: PUSH
16434: LD_EXP 13
16438: PUSH
16439: LD_INT 3
16441: EQUAL
16442: AND
16443: IFFALSE 16457
// Say ( Houten , D2-VanH-1 ) ;
16445: LD_EXP 25
16449: PPUSH
16450: LD_STRING D2-VanH-1
16452: PPUSH
16453: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
16457: LD_INT 3
16459: PPUSH
16460: CALL 12982 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
16464: LD_STRING 07_time
16466: PPUSH
16467: LD_INT 18900
16469: PPUSH
16470: CALL_OW 30
16474: PUSH
16475: LD_INT 3
16477: DIV
16478: PPUSH
16479: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
16483: LD_INT 34
16485: PPUSH
16486: LD_INT 1
16488: PPUSH
16489: CALL_OW 321
16493: PUSH
16494: LD_INT 2
16496: EQUAL
16497: IFFALSE 16506
// SetAchievement ( ACH_HEAVYGUN ) ;
16499: LD_STRING ACH_HEAVYGUN
16501: PPUSH
16502: CALL_OW 543
// PrepareMacmillanSquad ;
16506: CALL 4826 0 0
// wait ( 0 0$1 ) ;
16510: LD_INT 35
16512: PPUSH
16513: CALL_OW 67
// DialogueOn ;
16517: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
16521: LD_EXP 14
16525: PPUSH
16526: CALL_OW 87
// dwait ( 0 0$2 ) ;
16530: LD_INT 70
16532: PPUSH
16533: CALL_OW 68
// DialogueOff ;
16537: CALL_OW 7
// wait ( 0 0$10 ) ;
16541: LD_INT 350
16543: PPUSH
16544: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16548: LD_INT 1
16550: PPUSH
16551: CALL_OW 427
// p := 0 ;
16555: LD_ADDR_VAR 0 2
16559: PUSH
16560: LD_INT 0
16562: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16563: LD_INT 35
16565: PPUSH
16566: CALL_OW 67
// p := Inc ( p ) ;
16570: LD_ADDR_VAR 0 2
16574: PUSH
16575: LD_VAR 0 2
16579: PPUSH
16580: CALL 79980 0 1
16584: ST_TO_ADDR
// if p > 300 then
16585: LD_VAR 0 2
16589: PUSH
16590: LD_INT 300
16592: GREATER
16593: IFFALSE 16597
// exit ;
16595: GO 17820
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
16597: LD_EXP 14
16601: PPUSH
16602: LD_INT 15
16604: PPUSH
16605: CALL_OW 308
16609: PUSH
16610: LD_EXP 14
16614: PPUSH
16615: CALL_OW 310
16619: PPUSH
16620: LD_INT 15
16622: PPUSH
16623: CALL_OW 308
16627: OR
16628: PUSH
16629: LD_EXP 14
16633: PPUSH
16634: LD_EXP 27
16638: PPUSH
16639: CALL_OW 296
16643: PUSH
16644: LD_INT 10
16646: LESS
16647: OR
16648: PUSH
16649: LD_INT 22
16651: PUSH
16652: LD_INT 1
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 2
16661: PUSH
16662: LD_INT 120
16664: PUSH
16665: LD_INT 106
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: LD_INT 120
16674: PUSH
16675: LD_INT 107
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 91
16689: PUSH
16690: LD_EXP 14
16694: PUSH
16695: LD_INT 12
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: LIST
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: LIST
16707: PPUSH
16708: CALL_OW 69
16712: OR
16713: IFFALSE 16563
// DialogueOn ;
16715: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
16719: LD_EXP 14
16723: PPUSH
16724: LD_STRING D3-JMM-1
16726: PPUSH
16727: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16731: LD_EXP 16
16735: PPUSH
16736: CALL_OW 302
16740: PUSH
16741: LD_EXP 13
16745: PUSH
16746: LD_INT 1
16748: EQUAL
16749: AND
16750: IFFALSE 16766
// Say ( Donaldson , D3-Don-1 ) else
16752: LD_EXP 16
16756: PPUSH
16757: LD_STRING D3-Don-1
16759: PPUSH
16760: CALL_OW 88
16764: GO 16862
// begin if gammaCommander = 1 then
16766: LD_EXP 13
16770: PUSH
16771: LD_INT 1
16773: EQUAL
16774: IFFALSE 16862
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
16776: LD_INT 22
16778: PUSH
16779: LD_INT 1
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 21
16788: PUSH
16789: LD_INT 1
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 23
16798: PUSH
16799: LD_INT 1
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 120
16808: PUSH
16809: LD_INT 106
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: LD_INT 26
16818: PUSH
16819: LD_INT 1
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: PPUSH
16833: CALL_OW 69
16837: PPUSH
16838: LD_STRING D3-Sol1-1
16840: PPUSH
16841: LD_STRING 
16843: PPUSH
16844: CALL 20089 0 3
16848: IFFALSE 16862
// Say ( JMM , D3-JMM-2 ) ;
16850: LD_EXP 14
16854: PPUSH
16855: LD_STRING D3-JMM-2
16857: PPUSH
16858: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
16862: LD_EXP 15
16866: PPUSH
16867: CALL_OW 302
16871: PUSH
16872: LD_EXP 13
16876: PUSH
16877: LD_INT 2
16879: EQUAL
16880: AND
16881: IFFALSE 16897
// Say ( Brown , D3-Brown-1 ) else
16883: LD_EXP 15
16887: PPUSH
16888: LD_STRING D3-Brown-1
16890: PPUSH
16891: CALL_OW 88
16895: GO 16993
// begin if gammaCommander = 2 then
16897: LD_EXP 13
16901: PUSH
16902: LD_INT 2
16904: EQUAL
16905: IFFALSE 16993
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
16907: LD_INT 22
16909: PUSH
16910: LD_INT 1
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 21
16919: PUSH
16920: LD_INT 1
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 23
16929: PUSH
16930: LD_INT 1
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: LD_INT 120
16939: PUSH
16940: LD_INT 106
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: LD_INT 26
16949: PUSH
16950: LD_INT 1
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: PPUSH
16964: CALL_OW 69
16968: PPUSH
16969: LD_STRING D3-Sol1-1a
16971: PPUSH
16972: LD_STRING 
16974: PPUSH
16975: CALL 20089 0 3
16979: IFFALSE 16993
// Say ( JMM , D3-JMM-2 ) ;
16981: LD_EXP 14
16985: PPUSH
16986: LD_STRING D3-JMM-2
16988: PPUSH
16989: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
16993: LD_EXP 25
16997: PPUSH
16998: CALL_OW 302
17002: PUSH
17003: LD_EXP 13
17007: PUSH
17008: LD_INT 3
17010: EQUAL
17011: AND
17012: IFFALSE 17028
// Say ( Houten , D3-VanH-1 ) else
17014: LD_EXP 25
17018: PPUSH
17019: LD_STRING D3-VanH-1
17021: PPUSH
17022: CALL_OW 88
17026: GO 17124
// begin if gammaCommander = 3 then
17028: LD_EXP 13
17032: PUSH
17033: LD_INT 3
17035: EQUAL
17036: IFFALSE 17124
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
17038: LD_INT 22
17040: PUSH
17041: LD_INT 1
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 21
17050: PUSH
17051: LD_INT 1
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 23
17060: PUSH
17061: LD_INT 1
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 120
17070: PUSH
17071: LD_INT 106
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 26
17080: PUSH
17081: LD_INT 1
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: PPUSH
17095: CALL_OW 69
17099: PPUSH
17100: LD_STRING D3-Sol1-1b
17102: PPUSH
17103: LD_STRING 
17105: PPUSH
17106: CALL 20089 0 3
17110: IFFALSE 17124
// Say ( JMM , D3-JMM-2 ) ;
17112: LD_EXP 14
17116: PPUSH
17117: LD_STRING D3-JMM-2
17119: PPUSH
17120: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17124: LD_EXP 27
17128: PPUSH
17129: CALL_OW 302
17133: IFFALSE 17161
// begin Say ( Joan , D3a-Joan-1 ) ;
17135: LD_EXP 27
17139: PPUSH
17140: LD_STRING D3a-Joan-1
17142: PPUSH
17143: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
17147: LD_EXP 14
17151: PPUSH
17152: LD_STRING D3a-JMM-1
17154: PPUSH
17155: CALL_OW 88
// end else
17159: GO 17595
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17161: LD_STRING 06_JoanStatus_1
17163: PPUSH
17164: LD_INT 0
17166: PPUSH
17167: CALL_OW 30
17171: PUSH
17172: LD_INT 1
17174: EQUAL
17175: IFFALSE 17595
// begin Say ( JMM , D3b-JMM-1 ) ;
17177: LD_EXP 14
17181: PPUSH
17182: LD_STRING D3b-JMM-1
17184: PPUSH
17185: CALL_OW 88
// dialog := false ;
17189: LD_ADDR_VAR 0 1
17193: PUSH
17194: LD_INT 0
17196: ST_TO_ADDR
// if gammaCommander = 1 then
17197: LD_EXP 13
17201: PUSH
17202: LD_INT 1
17204: EQUAL
17205: IFFALSE 17316
// if IsOK ( Donaldson ) then
17207: LD_EXP 16
17211: PPUSH
17212: CALL_OW 302
17216: IFFALSE 17238
// dialog := Say ( Donaldson , D3b-Don-1 ) else
17218: LD_ADDR_VAR 0 1
17222: PUSH
17223: LD_EXP 16
17227: PPUSH
17228: LD_STRING D3b-Don-1
17230: PPUSH
17231: CALL_OW 88
17235: ST_TO_ADDR
17236: GO 17316
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17238: LD_ADDR_VAR 0 1
17242: PUSH
17243: LD_INT 22
17245: PUSH
17246: LD_INT 1
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 21
17255: PUSH
17256: LD_INT 1
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: LD_INT 23
17265: PUSH
17266: LD_INT 1
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 120
17275: PUSH
17276: LD_INT 106
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 26
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: PPUSH
17300: CALL_OW 69
17304: PPUSH
17305: LD_STRING D3b-Sol1-1
17307: PPUSH
17308: LD_STRING 
17310: PPUSH
17311: CALL 20089 0 3
17315: ST_TO_ADDR
// if gammaCommander = 2 then
17316: LD_EXP 13
17320: PUSH
17321: LD_INT 2
17323: EQUAL
17324: IFFALSE 17435
// if IsOk ( Brown ) then
17326: LD_EXP 15
17330: PPUSH
17331: CALL_OW 302
17335: IFFALSE 17357
// dialog := Say ( Brown , D3b-Brown-1 ) else
17337: LD_ADDR_VAR 0 1
17341: PUSH
17342: LD_EXP 15
17346: PPUSH
17347: LD_STRING D3b-Brown-1
17349: PPUSH
17350: CALL_OW 88
17354: ST_TO_ADDR
17355: GO 17435
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17357: LD_ADDR_VAR 0 1
17361: PUSH
17362: LD_INT 22
17364: PUSH
17365: LD_INT 1
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PUSH
17372: LD_INT 21
17374: PUSH
17375: LD_INT 1
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PUSH
17382: LD_INT 23
17384: PUSH
17385: LD_INT 1
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 120
17394: PUSH
17395: LD_INT 106
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 26
17404: PUSH
17405: LD_INT 1
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: PPUSH
17419: CALL_OW 69
17423: PPUSH
17424: LD_STRING D3b-Sol1-1
17426: PPUSH
17427: LD_STRING 
17429: PPUSH
17430: CALL 20089 0 3
17434: ST_TO_ADDR
// if gammaCommander = 3 then
17435: LD_EXP 13
17439: PUSH
17440: LD_INT 3
17442: EQUAL
17443: IFFALSE 17554
// if IsOk ( Houten ) then
17445: LD_EXP 25
17449: PPUSH
17450: CALL_OW 302
17454: IFFALSE 17476
// dialog := Say ( Houten , D3b-VanH-1 ) else
17456: LD_ADDR_VAR 0 1
17460: PUSH
17461: LD_EXP 25
17465: PPUSH
17466: LD_STRING D3b-VanH-1
17468: PPUSH
17469: CALL_OW 88
17473: ST_TO_ADDR
17474: GO 17554
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17476: LD_ADDR_VAR 0 1
17480: PUSH
17481: LD_INT 22
17483: PUSH
17484: LD_INT 1
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 21
17493: PUSH
17494: LD_INT 1
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: LD_INT 23
17503: PUSH
17504: LD_INT 1
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 120
17513: PUSH
17514: LD_INT 106
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 26
17523: PUSH
17524: LD_INT 1
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: PPUSH
17538: CALL_OW 69
17542: PPUSH
17543: LD_STRING D3b-Sol1-1
17545: PPUSH
17546: LD_STRING 
17548: PPUSH
17549: CALL 20089 0 3
17553: ST_TO_ADDR
// if dialog then
17554: LD_VAR 0 1
17558: IFFALSE 17595
// begin Say ( JMM , D3b-JMM-2 ) ;
17560: LD_EXP 14
17564: PPUSH
17565: LD_STRING D3b-JMM-2
17567: PPUSH
17568: CALL_OW 88
// if IsOK ( Lisa ) then
17572: LD_EXP 19
17576: PPUSH
17577: CALL_OW 302
17581: IFFALSE 17595
// Say ( Lisa , D3b-Lisa-2 ) ;
17583: LD_EXP 19
17587: PPUSH
17588: LD_STRING D3b-Lisa-2
17590: PPUSH
17591: CALL_OW 88
// end ; end ; end ; if not seenComputer then
17595: LD_EXP 7
17599: NOT
17600: IFFALSE 17608
// begin DialogueOff ;
17602: CALL_OW 7
// exit ;
17606: GO 17820
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
17608: LD_INT 22
17610: PUSH
17611: LD_INT 1
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 21
17620: PUSH
17621: LD_INT 1
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 23
17630: PUSH
17631: LD_INT 1
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 2
17640: PUSH
17641: LD_INT 120
17643: PUSH
17644: LD_INT 106
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 120
17653: PUSH
17654: LD_INT 107
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 26
17668: PUSH
17669: LD_INT 1
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: PPUSH
17683: CALL_OW 69
17687: PPUSH
17688: LD_STRING DCa-Sol1-1
17690: PPUSH
17691: LD_STRING 
17693: PPUSH
17694: CALL 20089 0 3
17698: IFFALSE 17712
// Say ( JMM , DCb-JMM-1 ) ;
17700: LD_EXP 14
17704: PPUSH
17705: LD_STRING DCb-JMM-1
17707: PPUSH
17708: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
17712: LD_INT 22
17714: PUSH
17715: LD_INT 1
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: LD_INT 21
17724: PUSH
17725: LD_INT 1
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 23
17734: PUSH
17735: LD_INT 1
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 2
17744: PUSH
17745: LD_INT 120
17747: PUSH
17748: LD_INT 106
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PUSH
17755: LD_INT 120
17757: PUSH
17758: LD_INT 107
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 26
17772: PUSH
17773: LD_INT 1
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: PPUSH
17787: CALL_OW 69
17791: PPUSH
17792: LD_STRING DCb-Sol1-1
17794: PPUSH
17795: LD_STRING 
17797: PPUSH
17798: CALL 20089 0 3
17802: IFFALSE 17816
// Say ( JMM , DCb-JMM-2 ) ;
17804: LD_EXP 14
17808: PPUSH
17809: LD_STRING DCb-JMM-2
17811: PPUSH
17812: CALL_OW 88
// DialogueOff ;
17816: CALL_OW 7
// end ;
17820: PPOPN 2
17822: END
// export function DialogSeenComputer ( un ) ; begin
17823: LD_INT 0
17825: PPUSH
// if jmmArrival then
17826: LD_EXP 8
17830: IFFALSE 17834
// exit ;
17832: GO 17900
// CenterOnUnits ( un ) ;
17834: LD_VAR 0 1
17838: PPUSH
17839: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
17843: LD_INT 22
17845: PUSH
17846: LD_INT 1
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 2
17855: PUSH
17856: LD_INT 120
17858: PUSH
17859: LD_INT 106
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 120
17868: PUSH
17869: LD_INT 107
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: LIST
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PPUSH
17885: CALL_OW 69
17889: PPUSH
17890: LD_STRING DC-Sol1-1
17892: PPUSH
17893: LD_STRING DC-FSol1-1
17895: PPUSH
17896: CALL 20089 0 3
// end ;
17900: LD_VAR 0 2
17904: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
17905: LD_EXP 8
17909: PUSH
17910: LD_OWVAR 1
17914: PUSH
17915: LD_INT 48300
17917: GREATEREQUAL
17918: AND
17919: PUSH
17920: LD_EXP 14
17924: PPUSH
17925: CALL_OW 302
17929: AND
17930: IFFALSE 18416
17932: GO 17934
17934: DISABLE
// begin wait ( 2 2$00 ) ;
17935: LD_INT 4200
17937: PPUSH
17938: CALL_OW 67
// DialogueOn ;
17942: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
17946: LD_EXP 30
17950: PPUSH
17951: LD_STRING D4-Pow-1
17953: PPUSH
17954: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
17958: LD_EXP 14
17962: PPUSH
17963: LD_STRING D4-JMM-1
17965: PPUSH
17966: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
17970: LD_EXP 30
17974: PPUSH
17975: LD_STRING D4-Pow-2
17977: PPUSH
17978: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
17982: LD_EXP 14
17986: PPUSH
17987: LD_STRING D4-JMM-2
17989: PPUSH
17990: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
17994: LD_EXP 30
17998: PPUSH
17999: LD_STRING D4-Pow-3
18001: PPUSH
18002: CALL_OW 94
// DialogueOff ;
18006: CALL_OW 7
// wait ( 1 1$00 ) ;
18010: LD_INT 2100
18012: PPUSH
18013: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
18017: LD_INT 1
18019: PPUSH
18020: CALL_OW 427
// wait ( 7 7$30 ) ;
18024: LD_INT 15750
18026: PPUSH
18027: CALL_OW 67
// DialogueOn ;
18031: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18035: LD_EXP 30
18039: PPUSH
18040: LD_STRING D4a-Pow-1
18042: PPUSH
18043: CALL_OW 94
// DialogueOff ;
18047: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
18051: LD_INT 1
18053: PPUSH
18054: CALL_OW 427
// SikorskiCounter ;
18058: CALL 19873 0 0
// PrepareSikorsky ;
18062: CALL 6238 0 0
// CenterNowOnUnits ( Sikorski ) ;
18066: LD_EXP 28
18070: PPUSH
18071: CALL_OW 87
// DialogueOn ;
18075: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18079: LD_EXP 28
18083: PPUSH
18084: LD_STRING D5-Sik-1
18086: PPUSH
18087: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 or not IsOk ( ruDep ) or GetSide ( ruDep ) = 1 then
18091: LD_INT 11
18093: PPUSH
18094: LD_INT 22
18096: PUSH
18097: LD_INT 1
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PPUSH
18104: CALL_OW 70
18108: PUSH
18109: LD_INT 1
18111: GREATER
18112: PUSH
18113: LD_INT 28
18115: PPUSH
18116: CALL_OW 302
18120: NOT
18121: OR
18122: PUSH
18123: LD_INT 28
18125: PPUSH
18126: CALL_OW 255
18130: PUSH
18131: LD_INT 1
18133: EQUAL
18134: OR
18135: IFFALSE 18187
// begin Say ( JMM , D5-JMM-1 ) ;
18137: LD_EXP 14
18141: PPUSH
18142: LD_STRING D5-JMM-1
18144: PPUSH
18145: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
18149: LD_EXP 28
18153: PPUSH
18154: LD_STRING D7a-Sik-1
18156: PPUSH
18157: CALL_OW 88
// DialogueOff ;
18161: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18165: LD_STRING M2
18167: PPUSH
18168: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18172: LD_INT 1
18174: PPUSH
18175: CALL_OW 427
// SikorskiAttack ;
18179: CALL 7861 0 0
// exit ;
18183: GO 18416
// end else
18185: GO 18232
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
18187: LD_INT 15
18189: PPUSH
18190: LD_INT 81
18192: PUSH
18193: LD_INT 1
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PPUSH
18200: CALL_OW 70
18204: IFFALSE 18220
// Say ( JMM , D5-JMM-1b ) else
18206: LD_EXP 14
18210: PPUSH
18211: LD_STRING D5-JMM-1b
18213: PPUSH
18214: CALL_OW 88
18218: GO 18232
// Say ( JMM , D5-JMM-1a ) ;
18220: LD_EXP 14
18224: PPUSH
18225: LD_STRING D5-JMM-1a
18227: PPUSH
18228: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18232: LD_EXP 28
18236: PPUSH
18237: LD_STRING D5-Sik-2
18239: PPUSH
18240: CALL_OW 88
// case Query ( QSikorski ) of 1 :
18244: LD_STRING QSikorski
18246: PPUSH
18247: CALL_OW 97
18251: PUSH
18252: LD_INT 1
18254: DOUBLE
18255: EQUAL
18256: IFTRUE 18260
18258: GO 18283
18260: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18261: LD_EXP 28
18265: PPUSH
18266: LD_STRING D5a-Sik-1
18268: PPUSH
18269: CALL_OW 88
// sikorskiWait := 1 1$00 ;
18273: LD_ADDR_EXP 4
18277: PUSH
18278: LD_INT 2100
18280: ST_TO_ADDR
// end ; 2 :
18281: GO 18370
18283: LD_INT 2
18285: DOUBLE
18286: EQUAL
18287: IFTRUE 18291
18289: GO 18314
18291: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18292: LD_EXP 28
18296: PPUSH
18297: LD_STRING D5b-Sik-1
18299: PPUSH
18300: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18304: LD_ADDR_EXP 4
18308: PUSH
18309: LD_INT 10500
18311: ST_TO_ADDR
// end ; 3 :
18312: GO 18370
18314: LD_INT 3
18316: DOUBLE
18317: EQUAL
18318: IFTRUE 18322
18320: GO 18369
18322: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18323: LD_EXP 28
18327: PPUSH
18328: LD_STRING D5c-Sik-1
18330: PPUSH
18331: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18335: LD_EXP 14
18339: PPUSH
18340: LD_STRING D5c-JMM-1
18342: PPUSH
18343: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18347: LD_EXP 28
18351: PPUSH
18352: LD_STRING D5c-Sik-2
18354: PPUSH
18355: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18359: LD_ADDR_EXP 4
18363: PUSH
18364: LD_INT 10500
18366: ST_TO_ADDR
// end ; end ;
18367: GO 18370
18369: POP
// DialogueOff ;
18370: CALL_OW 7
// SikorskiWaitCounter ;
18374: CALL 19936 0 0
// DialogueOn ;
18378: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
18382: LD_EXP 28
18386: PPUSH
18387: LD_STRING D6-Sik-1
18389: PPUSH
18390: CALL_OW 88
// DialogueOff ;
18394: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18398: LD_STRING M2
18400: PPUSH
18401: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18405: LD_INT 1
18407: PPUSH
18408: CALL_OW 427
// SikorskiAttack ;
18412: CALL 7861 0 0
// end ;
18416: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
18417: LD_INT 11
18419: PPUSH
18420: LD_INT 22
18422: PUSH
18423: LD_INT 4
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PPUSH
18430: CALL_OW 70
18434: PUSH
18435: LD_INT 2
18437: GREATER
18438: IFFALSE 18631
18440: GO 18442
18442: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18443: LD_EXP 28
18447: PPUSH
18448: LD_STRING D7-Sik-1
18450: PPUSH
18451: CALL_OW 88
// wait ( 0 0$10 ) ;
18455: LD_INT 350
18457: PPUSH
18458: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
18462: LD_EXP 14
18466: PPUSH
18467: LD_INT 11
18469: PPUSH
18470: CALL_OW 308
18474: PUSH
18475: LD_EXP 14
18479: PPUSH
18480: CALL_OW 310
18484: PPUSH
18485: LD_INT 11
18487: PPUSH
18488: CALL_OW 308
18492: OR
18493: IFFALSE 18517
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18495: LD_EXP 28
18499: PPUSH
18500: LD_STRING D7a-Sik-1
18502: PPUSH
18503: CALL_OW 88
// sikorskiStatus := 1 ;
18507: LD_ADDR_EXP 9
18511: PUSH
18512: LD_INT 1
18514: ST_TO_ADDR
// end else
18515: GO 18537
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18517: LD_EXP 28
18521: PPUSH
18522: LD_STRING D7b-Sik-1
18524: PPUSH
18525: CALL_OW 88
// sikorskiStatus := 0 ;
18529: LD_ADDR_EXP 9
18533: PUSH
18534: LD_INT 0
18536: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
18537: LD_INT 1575
18539: PPUSH
18540: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
18544: LD_EXP 14
18548: PPUSH
18549: LD_INT 11
18551: PPUSH
18552: CALL_OW 308
18556: PUSH
18557: LD_EXP 14
18561: PPUSH
18562: CALL_OW 310
18566: PPUSH
18567: LD_INT 11
18569: PPUSH
18570: CALL_OW 308
18574: OR
18575: PUSH
18576: LD_EXP 14
18580: PPUSH
18581: CALL_OW 302
18585: NOT
18586: OR
18587: IFFALSE 18611
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18589: LD_EXP 28
18593: PPUSH
18594: LD_STRING D7a-Sik-1
18596: PPUSH
18597: CALL_OW 88
// sikorskiStatus := 1 ;
18601: LD_ADDR_EXP 9
18605: PUSH
18606: LD_INT 1
18608: ST_TO_ADDR
// end else
18609: GO 18631
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18611: LD_EXP 28
18615: PPUSH
18616: LD_STRING D7b-Sik-1
18618: PPUSH
18619: CALL_OW 88
// sikorskiStatus := 0 ;
18623: LD_ADDR_EXP 9
18627: PUSH
18628: LD_INT 0
18630: ST_TO_ADDR
// end ; end ;
18631: END
// export function SikorskiKilledInAction ; begin
18632: LD_INT 0
18634: PPUSH
// wait ( 0 0$2 ) ;
18635: LD_INT 70
18637: PPUSH
18638: CALL_OW 67
// DialogueOn ;
18642: CALL_OW 6
// dwait ( 0 0$1 ) ;
18646: LD_INT 35
18648: PPUSH
18649: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
18653: LD_EXP 30
18657: PPUSH
18658: LD_STRING D8b-Pow-1
18660: PPUSH
18661: CALL_OW 94
// YouLost ( Dismissed ) ;
18665: LD_STRING Dismissed
18667: PPUSH
18668: CALL_OW 104
// DialogueOff ;
18672: CALL_OW 7
// end ;
18676: LD_VAR 0 1
18680: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
18681: LD_EXP 8
18685: PUSH
18686: LD_INT 28
18688: PPUSH
18689: CALL_OW 301
18693: AND
18694: PUSH
18695: LD_EXP 32
18699: PPUSH
18700: CALL_OW 301
18704: AND
18705: PUSH
18706: LD_INT 22
18708: PUSH
18709: LD_INT 3
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 50
18718: PUSH
18719: EMPTY
18720: LIST
18721: PUSH
18722: LD_INT 30
18724: PUSH
18725: LD_INT 5
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: LIST
18736: PPUSH
18737: CALL_OW 69
18741: PUSH
18742: LD_INT 0
18744: EQUAL
18745: AND
18746: IFFALSE 19870
18748: GO 18750
18750: DISABLE
18751: LD_INT 0
18753: PPUSH
18754: PPUSH
18755: PPUSH
// begin Video ( true ) ;
18756: LD_INT 1
18758: PPUSH
18759: CALL 78591 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
18763: LD_INT 104
18765: PPUSH
18766: LD_INT 108
18768: PPUSH
18769: LD_INT 1
18771: PPUSH
18772: LD_INT 36
18774: NEG
18775: PPUSH
18776: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
18780: LD_INT 104
18782: PPUSH
18783: LD_INT 108
18785: PPUSH
18786: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
18790: LD_ADDR_VAR 0 2
18794: PUSH
18795: LD_INT 22
18797: PUSH
18798: LD_INT 1
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 21
18807: PUSH
18808: LD_INT 1
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 3
18817: PUSH
18818: LD_INT 24
18820: PUSH
18821: LD_INT 249
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: LIST
18836: PPUSH
18837: CALL_OW 69
18841: ST_TO_ADDR
// if tmp then
18842: LD_VAR 0 2
18846: IFFALSE 18877
// for i in tmp do
18848: LD_ADDR_VAR 0 1
18852: PUSH
18853: LD_VAR 0 2
18857: PUSH
18858: FOR_IN
18859: IFFALSE 18875
// SetLives ( i , 249 ) ;
18861: LD_VAR 0 1
18865: PPUSH
18866: LD_INT 249
18868: PPUSH
18869: CALL_OW 234
18873: GO 18858
18875: POP
18876: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18877: LD_ADDR_VAR 0 1
18881: PUSH
18882: LD_INT 22
18884: PUSH
18885: LD_INT 3
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: LD_INT 21
18894: PUSH
18895: LD_INT 1
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PPUSH
18906: CALL_OW 69
18910: PUSH
18911: FOR_IN
18912: IFFALSE 18955
// begin ComExit ( i ) ;
18914: LD_VAR 0 1
18918: PPUSH
18919: CALL 79017 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
18923: LD_VAR 0 1
18927: PPUSH
18928: LD_INT 131
18930: PPUSH
18931: LD_INT 127
18933: PPUSH
18934: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
18938: LD_VAR 0 1
18942: PPUSH
18943: LD_INT 141
18945: PPUSH
18946: LD_INT 147
18948: PPUSH
18949: CALL_OW 171
// end ;
18953: GO 18911
18955: POP
18956: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
18957: LD_INT 81
18959: PUSH
18960: LD_INT 3
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 3
18969: PUSH
18970: LD_INT 21
18972: PUSH
18973: LD_INT 3
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PPUSH
18988: CALL_OW 69
18992: PPUSH
18993: LD_INT 131
18995: PPUSH
18996: LD_INT 127
18998: PPUSH
18999: CALL_OW 174
// wait ( 0 0$08 ) ;
19003: LD_INT 280
19005: PPUSH
19006: CALL_OW 67
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 7 then
19010: LD_INT 22
19012: PUSH
19013: LD_INT 1
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 21
19022: PUSH
19023: LD_INT 1
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 23
19032: PUSH
19033: LD_INT 1
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 50
19042: PUSH
19043: EMPTY
19044: LIST
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: PPUSH
19052: CALL_OW 69
19056: PPUSH
19057: CALL 43030 0 1
19061: PUSH
19062: LD_INT 7
19064: LESS
19065: IFFALSE 19074
// YouLost ( LostVictory ) ;
19067: LD_STRING LostVictory
19069: PPUSH
19070: CALL_OW 104
// DialogueOn ;
19074: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
19078: LD_EXP 9
19082: PUSH
19083: LD_INT 1
19085: EQUAL
19086: PUSH
19087: LD_EXP 28
19091: PPUSH
19092: CALL_OW 302
19096: AND
19097: IFFALSE 19111
// Say ( Sikorski , D9-Sik-1 ) ;
19099: LD_EXP 28
19103: PPUSH
19104: LD_STRING D9-Sik-1
19106: PPUSH
19107: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
19111: LD_INT 22
19113: PUSH
19114: LD_INT 4
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PPUSH
19121: CALL_OW 69
19125: PUSH
19126: LD_INT 0
19128: EQUAL
19129: PUSH
19130: LD_EXP 3
19134: AND
19135: IFFALSE 19144
// SetAchievement ( ACH_BLITZKRIEG ) ;
19137: LD_STRING ACH_BLITZKRIEG
19139: PPUSH
19140: CALL_OW 543
// if tick <= 45 45$10 then
19144: LD_OWVAR 1
19148: PUSH
19149: LD_INT 94850
19151: LESSEQUAL
19152: IFFALSE 19168
// begin wait ( 3 ) ;
19154: LD_INT 3
19156: PPUSH
19157: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
19161: LD_STRING ACH_ASPEED_8
19163: PPUSH
19164: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
19168: LD_STRING med1
19170: PPUSH
19171: LD_INT 1
19173: PPUSH
19174: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
19178: LD_STRING med2
19180: PPUSH
19181: LD_INT 1
19183: PPUSH
19184: CALL_OW 101
// if sikorskiStatus = 1 then
19188: LD_EXP 9
19192: PUSH
19193: LD_INT 1
19195: EQUAL
19196: IFFALSE 19210
// AddMedal ( perfect , 1 ) else
19198: LD_STRING perfect
19200: PPUSH
19201: LD_INT 1
19203: PPUSH
19204: CALL_OW 101
19208: GO 19221
// AddMedal ( perfect , - 1 ) ;
19210: LD_STRING perfect
19212: PPUSH
19213: LD_INT 1
19215: NEG
19216: PPUSH
19217: CALL_OW 101
// if Difficulty >= 3 then
19221: LD_OWVAR 67
19225: PUSH
19226: LD_INT 3
19228: GREATEREQUAL
19229: IFFALSE 19241
// SetAchievementEX ( ACH_AMER , 8 ) ;
19231: LD_STRING ACH_AMER
19233: PPUSH
19234: LD_INT 8
19236: PPUSH
19237: CALL_OW 564
// GiveMedals ( Main ) ;
19241: LD_STRING Main
19243: PPUSH
19244: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19248: LD_INT 22
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 23
19260: PUSH
19261: LD_INT 1
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 21
19270: PUSH
19271: LD_INT 1
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: LIST
19282: PPUSH
19283: CALL_OW 69
19287: PPUSH
19288: CALL_OW 43
// prefix := 08_ ;
19292: LD_ADDR_VAR 0 3
19296: PUSH
19297: LD_STRING 08_
19299: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
19300: LD_EXP 14
19304: PPUSH
19305: LD_VAR 0 3
19309: PUSH
19310: LD_STRING JMM
19312: STR
19313: PPUSH
19314: CALL_OW 38
// if IsLive ( Brown ) then
19318: LD_EXP 15
19322: PPUSH
19323: CALL_OW 300
19327: IFFALSE 19347
// SaveCharacters ( Brown , prefix & Brown ) ;
19329: LD_EXP 15
19333: PPUSH
19334: LD_VAR 0 3
19338: PUSH
19339: LD_STRING Brown
19341: STR
19342: PPUSH
19343: CALL_OW 38
// if IsLive ( Donaldson ) then
19347: LD_EXP 16
19351: PPUSH
19352: CALL_OW 300
19356: IFFALSE 19376
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
19358: LD_EXP 16
19362: PPUSH
19363: LD_VAR 0 3
19367: PUSH
19368: LD_STRING Donaldson
19370: STR
19371: PPUSH
19372: CALL_OW 38
// if IsLive ( Bobby ) then
19376: LD_EXP 17
19380: PPUSH
19381: CALL_OW 300
19385: IFFALSE 19405
// SaveCharacters ( Bobby , prefix & Bobby ) ;
19387: LD_EXP 17
19391: PPUSH
19392: LD_VAR 0 3
19396: PUSH
19397: LD_STRING Bobby
19399: STR
19400: PPUSH
19401: CALL_OW 38
// if IsLive ( Cyrus ) then
19405: LD_EXP 18
19409: PPUSH
19410: CALL_OW 300
19414: IFFALSE 19434
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
19416: LD_EXP 18
19420: PPUSH
19421: LD_VAR 0 3
19425: PUSH
19426: LD_STRING Cyrus
19428: STR
19429: PPUSH
19430: CALL_OW 38
// if IsLive ( Lisa ) then
19434: LD_EXP 19
19438: PPUSH
19439: CALL_OW 300
19443: IFFALSE 19463
// SaveCharacters ( Lisa , prefix & Lisa ) ;
19445: LD_EXP 19
19449: PPUSH
19450: LD_VAR 0 3
19454: PUSH
19455: LD_STRING Lisa
19457: STR
19458: PPUSH
19459: CALL_OW 38
// if IsLive ( Frank ) then
19463: LD_EXP 20
19467: PPUSH
19468: CALL_OW 300
19472: IFFALSE 19492
// SaveCharacters ( Frank , prefix & Frank ) ;
19474: LD_EXP 20
19478: PPUSH
19479: LD_VAR 0 3
19483: PUSH
19484: LD_STRING Frank
19486: STR
19487: PPUSH
19488: CALL_OW 38
// if IsLive ( Gladstone ) then
19492: LD_EXP 21
19496: PPUSH
19497: CALL_OW 300
19501: IFFALSE 19521
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
19503: LD_EXP 21
19507: PPUSH
19508: LD_VAR 0 3
19512: PUSH
19513: LD_STRING Gladstone
19515: STR
19516: PPUSH
19517: CALL_OW 38
// if IsLive ( Kikuchi ) then
19521: LD_EXP 22
19525: PPUSH
19526: CALL_OW 300
19530: IFFALSE 19550
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
19532: LD_EXP 22
19536: PPUSH
19537: LD_VAR 0 3
19541: PUSH
19542: LD_STRING Kikuchi
19544: STR
19545: PPUSH
19546: CALL_OW 38
// if IsLive ( Denis ) then
19550: LD_EXP 26
19554: PPUSH
19555: CALL_OW 300
19559: IFFALSE 19579
// SaveCharacters ( Denis , prefix & Denis ) ;
19561: LD_EXP 26
19565: PPUSH
19566: LD_VAR 0 3
19570: PUSH
19571: LD_STRING Denis
19573: STR
19574: PPUSH
19575: CALL_OW 38
// if IsLive ( Joan ) then
19579: LD_EXP 27
19583: PPUSH
19584: CALL_OW 300
19588: IFFALSE 19610
// SaveCharacters ( Joan , prefix & Joan ) else
19590: LD_EXP 27
19594: PPUSH
19595: LD_VAR 0 3
19599: PUSH
19600: LD_STRING Joan
19602: STR
19603: PPUSH
19604: CALL_OW 38
19608: GO 19617
// DeleteCharacters ( Joan ) ;
19610: LD_STRING Joan
19612: PPUSH
19613: CALL_OW 40
// if IsLive ( Khatam ) then
19617: LD_EXP 23
19621: PPUSH
19622: CALL_OW 300
19626: IFFALSE 19646
// SaveCharacters ( Khatam , prefix & Khatam ) ;
19628: LD_EXP 23
19632: PPUSH
19633: LD_VAR 0 3
19637: PUSH
19638: LD_STRING Khatam
19640: STR
19641: PPUSH
19642: CALL_OW 38
// if IsLive ( Houten ) then
19646: LD_EXP 25
19650: PPUSH
19651: CALL_OW 300
19655: IFFALSE 19682
// begin ToLua ( enableBioCharacter(BIO_HOUT) ) ;
19657: LD_STRING enableBioCharacter(BIO_HOUT)
19659: PPUSH
19660: CALL_OW 559
// SaveCharacters ( Houten , prefix & Houten ) ;
19664: LD_EXP 25
19668: PPUSH
19669: LD_VAR 0 3
19673: PUSH
19674: LD_STRING Houten
19676: STR
19677: PPUSH
19678: CALL_OW 38
// end ; if IsLive ( Mike ) then
19682: LD_EXP 24
19686: PPUSH
19687: CALL_OW 300
19691: IFFALSE 19711
// SaveCharacters ( Mike , prefix & Mike ) ;
19693: LD_EXP 24
19697: PPUSH
19698: LD_VAR 0 3
19702: PUSH
19703: LD_STRING Mike
19705: STR
19706: PPUSH
19707: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
19711: LD_INT 22
19713: PUSH
19714: LD_INT 1
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 21
19723: PUSH
19724: LD_INT 1
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 23
19733: PUSH
19734: LD_INT 1
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: LIST
19745: PPUSH
19746: CALL_OW 69
19750: PUSH
19751: LD_EXP 14
19755: PUSH
19756: LD_EXP 15
19760: PUSH
19761: LD_EXP 16
19765: PUSH
19766: LD_EXP 17
19770: PUSH
19771: LD_EXP 18
19775: PUSH
19776: LD_EXP 19
19780: PUSH
19781: LD_EXP 20
19785: PUSH
19786: LD_EXP 21
19790: PUSH
19791: LD_EXP 22
19795: PUSH
19796: LD_EXP 26
19800: PUSH
19801: LD_EXP 27
19805: PUSH
19806: LD_EXP 25
19810: PUSH
19811: LD_EXP 23
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: DIFF
19831: PPUSH
19832: LD_STRING 08_other_survivors
19834: PPUSH
19835: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
19839: LD_INT 15
19841: PPUSH
19842: CALL 7335 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
19846: LD_EXP 10
19850: NOT
19851: PPUSH
19852: LD_STRING 08_SikorskiStatus
19854: PPUSH
19855: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_SIK) ) ;
19859: LD_STRING enableBioCharacter(BIO_SIK)
19861: PPUSH
19862: CALL_OW 559
// YouWin ;
19866: CALL_OW 103
// end ; end_of_file
19870: PPOPN 3
19872: END
// export function SikorskiCounter ; begin
19873: LD_INT 0
19875: PPUSH
// repeat wait ( 0 0$1 ) ;
19876: LD_INT 35
19878: PPUSH
19879: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
19883: LD_ADDR_OWVAR 47
19887: PUSH
19888: LD_STRING #Am08-2
19890: PUSH
19891: LD_EXP 3
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
19900: LD_ADDR_EXP 3
19904: PUSH
19905: LD_EXP 3
19909: PUSH
19910: LD_INT 35
19912: MINUS
19913: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
19914: LD_EXP 3
19918: PUSH
19919: LD_INT 0
19921: EQUAL
19922: IFFALSE 19876
// display_strings := [ ] ;
19924: LD_ADDR_OWVAR 47
19928: PUSH
19929: EMPTY
19930: ST_TO_ADDR
// end ;
19931: LD_VAR 0 1
19935: RET
// export function SikorskiWaitCounter ; begin
19936: LD_INT 0
19938: PPUSH
// repeat wait ( 0 0$1 ) ;
19939: LD_INT 35
19941: PPUSH
19942: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
19946: LD_ADDR_OWVAR 47
19950: PUSH
19951: LD_STRING #Am08-1
19953: PUSH
19954: LD_EXP 4
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
19963: LD_ADDR_EXP 4
19967: PUSH
19968: LD_EXP 4
19972: PUSH
19973: LD_INT 35
19975: MINUS
19976: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
19977: LD_EXP 4
19981: PUSH
19982: LD_INT 0
19984: EQUAL
19985: IFFALSE 19939
// display_strings := [ ] ;
19987: LD_ADDR_OWVAR 47
19991: PUSH
19992: EMPTY
19993: ST_TO_ADDR
// end ; end_of_file
19994: LD_VAR 0 1
19998: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
19999: LD_EXP 3
20003: IFFALSE 20043
20005: GO 20007
20007: DISABLE
// begin enable ;
20008: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
20009: LD_INT 14
20011: PPUSH
20012: CALL_OW 435
20016: PUSH
20017: LD_INT 10
20019: LESS
20020: IFFALSE 20043
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
20022: LD_INT 1
20024: PPUSH
20025: LD_INT 5
20027: PPUSH
20028: CALL_OW 12
20032: PPUSH
20033: LD_INT 14
20035: PPUSH
20036: LD_INT 1
20038: PPUSH
20039: CALL_OW 55
// end ;
20043: END
// every 0 0$55 trigger sikorskiArriveCounter do
20044: LD_EXP 3
20048: IFFALSE 20088
20050: GO 20052
20052: DISABLE
// begin enable ;
20053: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
20054: LD_INT 13
20056: PPUSH
20057: CALL_OW 435
20061: PUSH
20062: LD_INT 10
20064: LESS
20065: IFFALSE 20088
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
20067: LD_INT 1
20069: PPUSH
20070: LD_INT 5
20072: PPUSH
20073: CALL_OW 12
20077: PPUSH
20078: LD_INT 13
20080: PPUSH
20081: LD_INT 1
20083: PPUSH
20084: CALL_OW 55
// end ; end_of_file
20088: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
20089: LD_INT 0
20091: PPUSH
20092: PPUSH
// if not units then
20093: LD_VAR 0 1
20097: NOT
20098: IFFALSE 20102
// exit ;
20100: GO 20227
// result := false ;
20102: LD_ADDR_VAR 0 4
20106: PUSH
20107: LD_INT 0
20109: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
20110: LD_ADDR_VAR 0 5
20114: PUSH
20115: LD_VAR 0 1
20119: PPUSH
20120: LD_INT 26
20122: PUSH
20123: LD_INT 1
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PPUSH
20130: CALL_OW 72
20134: ST_TO_ADDR
// if tmp then
20135: LD_VAR 0 5
20139: IFFALSE 20165
// result := Say ( tmp [ 1 ] , menDialog ) ;
20141: LD_ADDR_VAR 0 4
20145: PUSH
20146: LD_VAR 0 5
20150: PUSH
20151: LD_INT 1
20153: ARRAY
20154: PPUSH
20155: LD_VAR 0 2
20159: PPUSH
20160: CALL_OW 88
20164: ST_TO_ADDR
// if not result then
20165: LD_VAR 0 4
20169: NOT
20170: IFFALSE 20227
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
20172: LD_ADDR_VAR 0 5
20176: PUSH
20177: LD_VAR 0 1
20181: PPUSH
20182: LD_INT 26
20184: PUSH
20185: LD_INT 2
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PPUSH
20192: CALL_OW 72
20196: ST_TO_ADDR
// if tmp then
20197: LD_VAR 0 5
20201: IFFALSE 20227
// result := Say ( tmp [ 1 ] , womenDialog ) ;
20203: LD_ADDR_VAR 0 4
20207: PUSH
20208: LD_VAR 0 5
20212: PUSH
20213: LD_INT 1
20215: ARRAY
20216: PPUSH
20217: LD_VAR 0 3
20221: PPUSH
20222: CALL_OW 88
20226: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
20227: LD_VAR 0 4
20231: RET
// export globalGameSaveCounter ; every 0 0$1 do
20232: GO 20234
20234: DISABLE
// begin enable ;
20235: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20236: LD_STRING updateTimer(
20238: PUSH
20239: LD_OWVAR 1
20243: STR
20244: PUSH
20245: LD_STRING );
20247: STR
20248: PPUSH
20249: CALL_OW 559
// end ;
20253: END
// every 0 0$1 do
20254: GO 20256
20256: DISABLE
// begin globalGameSaveCounter := 0 ;
20257: LD_ADDR_EXP 37
20261: PUSH
20262: LD_INT 0
20264: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20265: LD_STRING setGameSaveCounter(0)
20267: PPUSH
20268: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20272: LD_STRING initStreamRollete();
20274: PPUSH
20275: CALL_OW 559
// InitStreamMode ;
20279: CALL 21605 0 0
// DefineStreamItems ( false ) ;
20283: LD_INT 0
20285: PPUSH
20286: CALL 22069 0 1
// end ;
20290: END
// export function SOS_MapStart ( ) ; begin
20291: LD_INT 0
20293: PPUSH
// if streamModeActive then
20294: LD_EXP 38
20298: IFFALSE 20307
// DefineStreamItems ( true ) ;
20300: LD_INT 1
20302: PPUSH
20303: CALL 22069 0 1
// UpdateLuaVariables ( ) ;
20307: CALL 20324 0 0
// UpdateFactoryWaypoints ( ) ;
20311: CALL 34938 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20315: CALL 35195 0 0
// end ;
20319: LD_VAR 0 1
20323: RET
// function UpdateLuaVariables ( ) ; begin
20324: LD_INT 0
20326: PPUSH
// if globalGameSaveCounter then
20327: LD_EXP 37
20331: IFFALSE 20365
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20333: LD_ADDR_EXP 37
20337: PUSH
20338: LD_EXP 37
20342: PPUSH
20343: CALL 79980 0 1
20347: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20348: LD_STRING setGameSaveCounter(
20350: PUSH
20351: LD_EXP 37
20355: STR
20356: PUSH
20357: LD_STRING )
20359: STR
20360: PPUSH
20361: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20365: LD_STRING setGameDifficulty(
20367: PUSH
20368: LD_OWVAR 67
20372: STR
20373: PUSH
20374: LD_STRING )
20376: STR
20377: PPUSH
20378: CALL_OW 559
// end ;
20382: LD_VAR 0 1
20386: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20387: LD_INT 0
20389: PPUSH
// if p2 = stream_mode then
20390: LD_VAR 0 2
20394: PUSH
20395: LD_INT 100
20397: EQUAL
20398: IFFALSE 21401
// begin if not StreamModeActive then
20400: LD_EXP 38
20404: NOT
20405: IFFALSE 20415
// StreamModeActive := true ;
20407: LD_ADDR_EXP 38
20411: PUSH
20412: LD_INT 1
20414: ST_TO_ADDR
// if p3 = 0 then
20415: LD_VAR 0 3
20419: PUSH
20420: LD_INT 0
20422: EQUAL
20423: IFFALSE 20429
// InitStreamMode ;
20425: CALL 21605 0 0
// if p3 = 1 then
20429: LD_VAR 0 3
20433: PUSH
20434: LD_INT 1
20436: EQUAL
20437: IFFALSE 20447
// sRocket := true ;
20439: LD_ADDR_EXP 43
20443: PUSH
20444: LD_INT 1
20446: ST_TO_ADDR
// if p3 = 2 then
20447: LD_VAR 0 3
20451: PUSH
20452: LD_INT 2
20454: EQUAL
20455: IFFALSE 20465
// sSpeed := true ;
20457: LD_ADDR_EXP 42
20461: PUSH
20462: LD_INT 1
20464: ST_TO_ADDR
// if p3 = 3 then
20465: LD_VAR 0 3
20469: PUSH
20470: LD_INT 3
20472: EQUAL
20473: IFFALSE 20483
// sEngine := true ;
20475: LD_ADDR_EXP 44
20479: PUSH
20480: LD_INT 1
20482: ST_TO_ADDR
// if p3 = 4 then
20483: LD_VAR 0 3
20487: PUSH
20488: LD_INT 4
20490: EQUAL
20491: IFFALSE 20501
// sSpec := true ;
20493: LD_ADDR_EXP 41
20497: PUSH
20498: LD_INT 1
20500: ST_TO_ADDR
// if p3 = 5 then
20501: LD_VAR 0 3
20505: PUSH
20506: LD_INT 5
20508: EQUAL
20509: IFFALSE 20519
// sLevel := true ;
20511: LD_ADDR_EXP 45
20515: PUSH
20516: LD_INT 1
20518: ST_TO_ADDR
// if p3 = 6 then
20519: LD_VAR 0 3
20523: PUSH
20524: LD_INT 6
20526: EQUAL
20527: IFFALSE 20537
// sArmoury := true ;
20529: LD_ADDR_EXP 46
20533: PUSH
20534: LD_INT 1
20536: ST_TO_ADDR
// if p3 = 7 then
20537: LD_VAR 0 3
20541: PUSH
20542: LD_INT 7
20544: EQUAL
20545: IFFALSE 20555
// sRadar := true ;
20547: LD_ADDR_EXP 47
20551: PUSH
20552: LD_INT 1
20554: ST_TO_ADDR
// if p3 = 8 then
20555: LD_VAR 0 3
20559: PUSH
20560: LD_INT 8
20562: EQUAL
20563: IFFALSE 20573
// sBunker := true ;
20565: LD_ADDR_EXP 48
20569: PUSH
20570: LD_INT 1
20572: ST_TO_ADDR
// if p3 = 9 then
20573: LD_VAR 0 3
20577: PUSH
20578: LD_INT 9
20580: EQUAL
20581: IFFALSE 20591
// sHack := true ;
20583: LD_ADDR_EXP 49
20587: PUSH
20588: LD_INT 1
20590: ST_TO_ADDR
// if p3 = 10 then
20591: LD_VAR 0 3
20595: PUSH
20596: LD_INT 10
20598: EQUAL
20599: IFFALSE 20609
// sFire := true ;
20601: LD_ADDR_EXP 50
20605: PUSH
20606: LD_INT 1
20608: ST_TO_ADDR
// if p3 = 11 then
20609: LD_VAR 0 3
20613: PUSH
20614: LD_INT 11
20616: EQUAL
20617: IFFALSE 20627
// sRefresh := true ;
20619: LD_ADDR_EXP 51
20623: PUSH
20624: LD_INT 1
20626: ST_TO_ADDR
// if p3 = 12 then
20627: LD_VAR 0 3
20631: PUSH
20632: LD_INT 12
20634: EQUAL
20635: IFFALSE 20645
// sExp := true ;
20637: LD_ADDR_EXP 52
20641: PUSH
20642: LD_INT 1
20644: ST_TO_ADDR
// if p3 = 13 then
20645: LD_VAR 0 3
20649: PUSH
20650: LD_INT 13
20652: EQUAL
20653: IFFALSE 20663
// sDepot := true ;
20655: LD_ADDR_EXP 53
20659: PUSH
20660: LD_INT 1
20662: ST_TO_ADDR
// if p3 = 14 then
20663: LD_VAR 0 3
20667: PUSH
20668: LD_INT 14
20670: EQUAL
20671: IFFALSE 20681
// sFlag := true ;
20673: LD_ADDR_EXP 54
20677: PUSH
20678: LD_INT 1
20680: ST_TO_ADDR
// if p3 = 15 then
20681: LD_VAR 0 3
20685: PUSH
20686: LD_INT 15
20688: EQUAL
20689: IFFALSE 20699
// sKamikadze := true ;
20691: LD_ADDR_EXP 62
20695: PUSH
20696: LD_INT 1
20698: ST_TO_ADDR
// if p3 = 16 then
20699: LD_VAR 0 3
20703: PUSH
20704: LD_INT 16
20706: EQUAL
20707: IFFALSE 20717
// sTroll := true ;
20709: LD_ADDR_EXP 63
20713: PUSH
20714: LD_INT 1
20716: ST_TO_ADDR
// if p3 = 17 then
20717: LD_VAR 0 3
20721: PUSH
20722: LD_INT 17
20724: EQUAL
20725: IFFALSE 20735
// sSlow := true ;
20727: LD_ADDR_EXP 64
20731: PUSH
20732: LD_INT 1
20734: ST_TO_ADDR
// if p3 = 18 then
20735: LD_VAR 0 3
20739: PUSH
20740: LD_INT 18
20742: EQUAL
20743: IFFALSE 20753
// sLack := true ;
20745: LD_ADDR_EXP 65
20749: PUSH
20750: LD_INT 1
20752: ST_TO_ADDR
// if p3 = 19 then
20753: LD_VAR 0 3
20757: PUSH
20758: LD_INT 19
20760: EQUAL
20761: IFFALSE 20771
// sTank := true ;
20763: LD_ADDR_EXP 67
20767: PUSH
20768: LD_INT 1
20770: ST_TO_ADDR
// if p3 = 20 then
20771: LD_VAR 0 3
20775: PUSH
20776: LD_INT 20
20778: EQUAL
20779: IFFALSE 20789
// sRemote := true ;
20781: LD_ADDR_EXP 68
20785: PUSH
20786: LD_INT 1
20788: ST_TO_ADDR
// if p3 = 21 then
20789: LD_VAR 0 3
20793: PUSH
20794: LD_INT 21
20796: EQUAL
20797: IFFALSE 20807
// sPowell := true ;
20799: LD_ADDR_EXP 69
20803: PUSH
20804: LD_INT 1
20806: ST_TO_ADDR
// if p3 = 22 then
20807: LD_VAR 0 3
20811: PUSH
20812: LD_INT 22
20814: EQUAL
20815: IFFALSE 20825
// sTeleport := true ;
20817: LD_ADDR_EXP 72
20821: PUSH
20822: LD_INT 1
20824: ST_TO_ADDR
// if p3 = 23 then
20825: LD_VAR 0 3
20829: PUSH
20830: LD_INT 23
20832: EQUAL
20833: IFFALSE 20843
// sOilTower := true ;
20835: LD_ADDR_EXP 74
20839: PUSH
20840: LD_INT 1
20842: ST_TO_ADDR
// if p3 = 24 then
20843: LD_VAR 0 3
20847: PUSH
20848: LD_INT 24
20850: EQUAL
20851: IFFALSE 20861
// sShovel := true ;
20853: LD_ADDR_EXP 75
20857: PUSH
20858: LD_INT 1
20860: ST_TO_ADDR
// if p3 = 25 then
20861: LD_VAR 0 3
20865: PUSH
20866: LD_INT 25
20868: EQUAL
20869: IFFALSE 20879
// sSheik := true ;
20871: LD_ADDR_EXP 76
20875: PUSH
20876: LD_INT 1
20878: ST_TO_ADDR
// if p3 = 26 then
20879: LD_VAR 0 3
20883: PUSH
20884: LD_INT 26
20886: EQUAL
20887: IFFALSE 20897
// sEarthquake := true ;
20889: LD_ADDR_EXP 78
20893: PUSH
20894: LD_INT 1
20896: ST_TO_ADDR
// if p3 = 27 then
20897: LD_VAR 0 3
20901: PUSH
20902: LD_INT 27
20904: EQUAL
20905: IFFALSE 20915
// sAI := true ;
20907: LD_ADDR_EXP 79
20911: PUSH
20912: LD_INT 1
20914: ST_TO_ADDR
// if p3 = 28 then
20915: LD_VAR 0 3
20919: PUSH
20920: LD_INT 28
20922: EQUAL
20923: IFFALSE 20933
// sCargo := true ;
20925: LD_ADDR_EXP 82
20929: PUSH
20930: LD_INT 1
20932: ST_TO_ADDR
// if p3 = 29 then
20933: LD_VAR 0 3
20937: PUSH
20938: LD_INT 29
20940: EQUAL
20941: IFFALSE 20951
// sDLaser := true ;
20943: LD_ADDR_EXP 83
20947: PUSH
20948: LD_INT 1
20950: ST_TO_ADDR
// if p3 = 30 then
20951: LD_VAR 0 3
20955: PUSH
20956: LD_INT 30
20958: EQUAL
20959: IFFALSE 20969
// sExchange := true ;
20961: LD_ADDR_EXP 84
20965: PUSH
20966: LD_INT 1
20968: ST_TO_ADDR
// if p3 = 31 then
20969: LD_VAR 0 3
20973: PUSH
20974: LD_INT 31
20976: EQUAL
20977: IFFALSE 20987
// sFac := true ;
20979: LD_ADDR_EXP 85
20983: PUSH
20984: LD_INT 1
20986: ST_TO_ADDR
// if p3 = 32 then
20987: LD_VAR 0 3
20991: PUSH
20992: LD_INT 32
20994: EQUAL
20995: IFFALSE 21005
// sPower := true ;
20997: LD_ADDR_EXP 86
21001: PUSH
21002: LD_INT 1
21004: ST_TO_ADDR
// if p3 = 33 then
21005: LD_VAR 0 3
21009: PUSH
21010: LD_INT 33
21012: EQUAL
21013: IFFALSE 21023
// sRandom := true ;
21015: LD_ADDR_EXP 87
21019: PUSH
21020: LD_INT 1
21022: ST_TO_ADDR
// if p3 = 34 then
21023: LD_VAR 0 3
21027: PUSH
21028: LD_INT 34
21030: EQUAL
21031: IFFALSE 21041
// sShield := true ;
21033: LD_ADDR_EXP 88
21037: PUSH
21038: LD_INT 1
21040: ST_TO_ADDR
// if p3 = 35 then
21041: LD_VAR 0 3
21045: PUSH
21046: LD_INT 35
21048: EQUAL
21049: IFFALSE 21059
// sTime := true ;
21051: LD_ADDR_EXP 89
21055: PUSH
21056: LD_INT 1
21058: ST_TO_ADDR
// if p3 = 36 then
21059: LD_VAR 0 3
21063: PUSH
21064: LD_INT 36
21066: EQUAL
21067: IFFALSE 21077
// sTools := true ;
21069: LD_ADDR_EXP 90
21073: PUSH
21074: LD_INT 1
21076: ST_TO_ADDR
// if p3 = 101 then
21077: LD_VAR 0 3
21081: PUSH
21082: LD_INT 101
21084: EQUAL
21085: IFFALSE 21095
// sSold := true ;
21087: LD_ADDR_EXP 55
21091: PUSH
21092: LD_INT 1
21094: ST_TO_ADDR
// if p3 = 102 then
21095: LD_VAR 0 3
21099: PUSH
21100: LD_INT 102
21102: EQUAL
21103: IFFALSE 21113
// sDiff := true ;
21105: LD_ADDR_EXP 56
21109: PUSH
21110: LD_INT 1
21112: ST_TO_ADDR
// if p3 = 103 then
21113: LD_VAR 0 3
21117: PUSH
21118: LD_INT 103
21120: EQUAL
21121: IFFALSE 21131
// sFog := true ;
21123: LD_ADDR_EXP 59
21127: PUSH
21128: LD_INT 1
21130: ST_TO_ADDR
// if p3 = 104 then
21131: LD_VAR 0 3
21135: PUSH
21136: LD_INT 104
21138: EQUAL
21139: IFFALSE 21149
// sReset := true ;
21141: LD_ADDR_EXP 60
21145: PUSH
21146: LD_INT 1
21148: ST_TO_ADDR
// if p3 = 105 then
21149: LD_VAR 0 3
21153: PUSH
21154: LD_INT 105
21156: EQUAL
21157: IFFALSE 21167
// sSun := true ;
21159: LD_ADDR_EXP 61
21163: PUSH
21164: LD_INT 1
21166: ST_TO_ADDR
// if p3 = 106 then
21167: LD_VAR 0 3
21171: PUSH
21172: LD_INT 106
21174: EQUAL
21175: IFFALSE 21185
// sTiger := true ;
21177: LD_ADDR_EXP 57
21181: PUSH
21182: LD_INT 1
21184: ST_TO_ADDR
// if p3 = 107 then
21185: LD_VAR 0 3
21189: PUSH
21190: LD_INT 107
21192: EQUAL
21193: IFFALSE 21203
// sBomb := true ;
21195: LD_ADDR_EXP 58
21199: PUSH
21200: LD_INT 1
21202: ST_TO_ADDR
// if p3 = 108 then
21203: LD_VAR 0 3
21207: PUSH
21208: LD_INT 108
21210: EQUAL
21211: IFFALSE 21221
// sWound := true ;
21213: LD_ADDR_EXP 66
21217: PUSH
21218: LD_INT 1
21220: ST_TO_ADDR
// if p3 = 109 then
21221: LD_VAR 0 3
21225: PUSH
21226: LD_INT 109
21228: EQUAL
21229: IFFALSE 21239
// sBetray := true ;
21231: LD_ADDR_EXP 70
21235: PUSH
21236: LD_INT 1
21238: ST_TO_ADDR
// if p3 = 110 then
21239: LD_VAR 0 3
21243: PUSH
21244: LD_INT 110
21246: EQUAL
21247: IFFALSE 21257
// sContamin := true ;
21249: LD_ADDR_EXP 71
21253: PUSH
21254: LD_INT 1
21256: ST_TO_ADDR
// if p3 = 111 then
21257: LD_VAR 0 3
21261: PUSH
21262: LD_INT 111
21264: EQUAL
21265: IFFALSE 21275
// sOil := true ;
21267: LD_ADDR_EXP 73
21271: PUSH
21272: LD_INT 1
21274: ST_TO_ADDR
// if p3 = 112 then
21275: LD_VAR 0 3
21279: PUSH
21280: LD_INT 112
21282: EQUAL
21283: IFFALSE 21293
// sStu := true ;
21285: LD_ADDR_EXP 77
21289: PUSH
21290: LD_INT 1
21292: ST_TO_ADDR
// if p3 = 113 then
21293: LD_VAR 0 3
21297: PUSH
21298: LD_INT 113
21300: EQUAL
21301: IFFALSE 21311
// sBazooka := true ;
21303: LD_ADDR_EXP 80
21307: PUSH
21308: LD_INT 1
21310: ST_TO_ADDR
// if p3 = 114 then
21311: LD_VAR 0 3
21315: PUSH
21316: LD_INT 114
21318: EQUAL
21319: IFFALSE 21329
// sMortar := true ;
21321: LD_ADDR_EXP 81
21325: PUSH
21326: LD_INT 1
21328: ST_TO_ADDR
// if p3 = 115 then
21329: LD_VAR 0 3
21333: PUSH
21334: LD_INT 115
21336: EQUAL
21337: IFFALSE 21347
// sRanger := true ;
21339: LD_ADDR_EXP 91
21343: PUSH
21344: LD_INT 1
21346: ST_TO_ADDR
// if p3 = 116 then
21347: LD_VAR 0 3
21351: PUSH
21352: LD_INT 116
21354: EQUAL
21355: IFFALSE 21365
// sComputer := true ;
21357: LD_ADDR_EXP 92
21361: PUSH
21362: LD_INT 1
21364: ST_TO_ADDR
// if p3 = 117 then
21365: LD_VAR 0 3
21369: PUSH
21370: LD_INT 117
21372: EQUAL
21373: IFFALSE 21383
// s30 := true ;
21375: LD_ADDR_EXP 93
21379: PUSH
21380: LD_INT 1
21382: ST_TO_ADDR
// if p3 = 118 then
21383: LD_VAR 0 3
21387: PUSH
21388: LD_INT 118
21390: EQUAL
21391: IFFALSE 21401
// s60 := true ;
21393: LD_ADDR_EXP 94
21397: PUSH
21398: LD_INT 1
21400: ST_TO_ADDR
// end ; if p2 = hack_mode then
21401: LD_VAR 0 2
21405: PUSH
21406: LD_INT 101
21408: EQUAL
21409: IFFALSE 21537
// begin case p3 of 1 :
21411: LD_VAR 0 3
21415: PUSH
21416: LD_INT 1
21418: DOUBLE
21419: EQUAL
21420: IFTRUE 21424
21422: GO 21431
21424: POP
// hHackUnlimitedResources ; 2 :
21425: CALL 33684 0 0
21429: GO 21537
21431: LD_INT 2
21433: DOUBLE
21434: EQUAL
21435: IFTRUE 21439
21437: GO 21446
21439: POP
// hHackSetLevel10 ; 3 :
21440: CALL 33817 0 0
21444: GO 21537
21446: LD_INT 3
21448: DOUBLE
21449: EQUAL
21450: IFTRUE 21454
21452: GO 21461
21454: POP
// hHackSetLevel10YourUnits ; 4 :
21455: CALL 33902 0 0
21459: GO 21537
21461: LD_INT 4
21463: DOUBLE
21464: EQUAL
21465: IFTRUE 21469
21467: GO 21476
21469: POP
// hHackInvincible ; 5 :
21470: CALL 34350 0 0
21474: GO 21537
21476: LD_INT 5
21478: DOUBLE
21479: EQUAL
21480: IFTRUE 21484
21482: GO 21491
21484: POP
// hHackInvisible ; 6 :
21485: CALL 34461 0 0
21489: GO 21537
21491: LD_INT 6
21493: DOUBLE
21494: EQUAL
21495: IFTRUE 21499
21497: GO 21506
21499: POP
// hHackChangeYourSide ; 7 :
21500: CALL 34518 0 0
21504: GO 21537
21506: LD_INT 7
21508: DOUBLE
21509: EQUAL
21510: IFTRUE 21514
21512: GO 21521
21514: POP
// hHackChangeUnitSide ; 8 :
21515: CALL 34560 0 0
21519: GO 21537
21521: LD_INT 8
21523: DOUBLE
21524: EQUAL
21525: IFTRUE 21529
21527: GO 21536
21529: POP
// hHackFog ; end ;
21530: CALL 34661 0 0
21534: GO 21537
21536: POP
// end ; if p2 = game_save_mode then
21537: LD_VAR 0 2
21541: PUSH
21542: LD_INT 102
21544: EQUAL
21545: IFFALSE 21600
// begin if p3 = 1 then
21547: LD_VAR 0 3
21551: PUSH
21552: LD_INT 1
21554: EQUAL
21555: IFFALSE 21567
// globalGameSaveCounter := p4 ;
21557: LD_ADDR_EXP 37
21561: PUSH
21562: LD_VAR 0 4
21566: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21567: LD_VAR 0 3
21571: PUSH
21572: LD_INT 2
21574: EQUAL
21575: PUSH
21576: LD_EXP 37
21580: AND
21581: IFFALSE 21600
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21583: LD_STRING setGameSaveCounter(
21585: PUSH
21586: LD_EXP 37
21590: STR
21591: PUSH
21592: LD_STRING )
21594: STR
21595: PPUSH
21596: CALL_OW 559
// end ; end ;
21600: LD_VAR 0 7
21604: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21605: LD_INT 0
21607: PPUSH
// streamModeActive := false ;
21608: LD_ADDR_EXP 38
21612: PUSH
21613: LD_INT 0
21615: ST_TO_ADDR
// normalCounter := 36 ;
21616: LD_ADDR_EXP 39
21620: PUSH
21621: LD_INT 36
21623: ST_TO_ADDR
// hardcoreCounter := 18 ;
21624: LD_ADDR_EXP 40
21628: PUSH
21629: LD_INT 18
21631: ST_TO_ADDR
// sRocket := false ;
21632: LD_ADDR_EXP 43
21636: PUSH
21637: LD_INT 0
21639: ST_TO_ADDR
// sSpeed := false ;
21640: LD_ADDR_EXP 42
21644: PUSH
21645: LD_INT 0
21647: ST_TO_ADDR
// sEngine := false ;
21648: LD_ADDR_EXP 44
21652: PUSH
21653: LD_INT 0
21655: ST_TO_ADDR
// sSpec := false ;
21656: LD_ADDR_EXP 41
21660: PUSH
21661: LD_INT 0
21663: ST_TO_ADDR
// sLevel := false ;
21664: LD_ADDR_EXP 45
21668: PUSH
21669: LD_INT 0
21671: ST_TO_ADDR
// sArmoury := false ;
21672: LD_ADDR_EXP 46
21676: PUSH
21677: LD_INT 0
21679: ST_TO_ADDR
// sRadar := false ;
21680: LD_ADDR_EXP 47
21684: PUSH
21685: LD_INT 0
21687: ST_TO_ADDR
// sBunker := false ;
21688: LD_ADDR_EXP 48
21692: PUSH
21693: LD_INT 0
21695: ST_TO_ADDR
// sHack := false ;
21696: LD_ADDR_EXP 49
21700: PUSH
21701: LD_INT 0
21703: ST_TO_ADDR
// sFire := false ;
21704: LD_ADDR_EXP 50
21708: PUSH
21709: LD_INT 0
21711: ST_TO_ADDR
// sRefresh := false ;
21712: LD_ADDR_EXP 51
21716: PUSH
21717: LD_INT 0
21719: ST_TO_ADDR
// sExp := false ;
21720: LD_ADDR_EXP 52
21724: PUSH
21725: LD_INT 0
21727: ST_TO_ADDR
// sDepot := false ;
21728: LD_ADDR_EXP 53
21732: PUSH
21733: LD_INT 0
21735: ST_TO_ADDR
// sFlag := false ;
21736: LD_ADDR_EXP 54
21740: PUSH
21741: LD_INT 0
21743: ST_TO_ADDR
// sKamikadze := false ;
21744: LD_ADDR_EXP 62
21748: PUSH
21749: LD_INT 0
21751: ST_TO_ADDR
// sTroll := false ;
21752: LD_ADDR_EXP 63
21756: PUSH
21757: LD_INT 0
21759: ST_TO_ADDR
// sSlow := false ;
21760: LD_ADDR_EXP 64
21764: PUSH
21765: LD_INT 0
21767: ST_TO_ADDR
// sLack := false ;
21768: LD_ADDR_EXP 65
21772: PUSH
21773: LD_INT 0
21775: ST_TO_ADDR
// sTank := false ;
21776: LD_ADDR_EXP 67
21780: PUSH
21781: LD_INT 0
21783: ST_TO_ADDR
// sRemote := false ;
21784: LD_ADDR_EXP 68
21788: PUSH
21789: LD_INT 0
21791: ST_TO_ADDR
// sPowell := false ;
21792: LD_ADDR_EXP 69
21796: PUSH
21797: LD_INT 0
21799: ST_TO_ADDR
// sTeleport := false ;
21800: LD_ADDR_EXP 72
21804: PUSH
21805: LD_INT 0
21807: ST_TO_ADDR
// sOilTower := false ;
21808: LD_ADDR_EXP 74
21812: PUSH
21813: LD_INT 0
21815: ST_TO_ADDR
// sShovel := false ;
21816: LD_ADDR_EXP 75
21820: PUSH
21821: LD_INT 0
21823: ST_TO_ADDR
// sSheik := false ;
21824: LD_ADDR_EXP 76
21828: PUSH
21829: LD_INT 0
21831: ST_TO_ADDR
// sEarthquake := false ;
21832: LD_ADDR_EXP 78
21836: PUSH
21837: LD_INT 0
21839: ST_TO_ADDR
// sAI := false ;
21840: LD_ADDR_EXP 79
21844: PUSH
21845: LD_INT 0
21847: ST_TO_ADDR
// sCargo := false ;
21848: LD_ADDR_EXP 82
21852: PUSH
21853: LD_INT 0
21855: ST_TO_ADDR
// sDLaser := false ;
21856: LD_ADDR_EXP 83
21860: PUSH
21861: LD_INT 0
21863: ST_TO_ADDR
// sExchange := false ;
21864: LD_ADDR_EXP 84
21868: PUSH
21869: LD_INT 0
21871: ST_TO_ADDR
// sFac := false ;
21872: LD_ADDR_EXP 85
21876: PUSH
21877: LD_INT 0
21879: ST_TO_ADDR
// sPower := false ;
21880: LD_ADDR_EXP 86
21884: PUSH
21885: LD_INT 0
21887: ST_TO_ADDR
// sRandom := false ;
21888: LD_ADDR_EXP 87
21892: PUSH
21893: LD_INT 0
21895: ST_TO_ADDR
// sShield := false ;
21896: LD_ADDR_EXP 88
21900: PUSH
21901: LD_INT 0
21903: ST_TO_ADDR
// sTime := false ;
21904: LD_ADDR_EXP 89
21908: PUSH
21909: LD_INT 0
21911: ST_TO_ADDR
// sTools := false ;
21912: LD_ADDR_EXP 90
21916: PUSH
21917: LD_INT 0
21919: ST_TO_ADDR
// sSold := false ;
21920: LD_ADDR_EXP 55
21924: PUSH
21925: LD_INT 0
21927: ST_TO_ADDR
// sDiff := false ;
21928: LD_ADDR_EXP 56
21932: PUSH
21933: LD_INT 0
21935: ST_TO_ADDR
// sFog := false ;
21936: LD_ADDR_EXP 59
21940: PUSH
21941: LD_INT 0
21943: ST_TO_ADDR
// sReset := false ;
21944: LD_ADDR_EXP 60
21948: PUSH
21949: LD_INT 0
21951: ST_TO_ADDR
// sSun := false ;
21952: LD_ADDR_EXP 61
21956: PUSH
21957: LD_INT 0
21959: ST_TO_ADDR
// sTiger := false ;
21960: LD_ADDR_EXP 57
21964: PUSH
21965: LD_INT 0
21967: ST_TO_ADDR
// sBomb := false ;
21968: LD_ADDR_EXP 58
21972: PUSH
21973: LD_INT 0
21975: ST_TO_ADDR
// sWound := false ;
21976: LD_ADDR_EXP 66
21980: PUSH
21981: LD_INT 0
21983: ST_TO_ADDR
// sBetray := false ;
21984: LD_ADDR_EXP 70
21988: PUSH
21989: LD_INT 0
21991: ST_TO_ADDR
// sContamin := false ;
21992: LD_ADDR_EXP 71
21996: PUSH
21997: LD_INT 0
21999: ST_TO_ADDR
// sOil := false ;
22000: LD_ADDR_EXP 73
22004: PUSH
22005: LD_INT 0
22007: ST_TO_ADDR
// sStu := false ;
22008: LD_ADDR_EXP 77
22012: PUSH
22013: LD_INT 0
22015: ST_TO_ADDR
// sBazooka := false ;
22016: LD_ADDR_EXP 80
22020: PUSH
22021: LD_INT 0
22023: ST_TO_ADDR
// sMortar := false ;
22024: LD_ADDR_EXP 81
22028: PUSH
22029: LD_INT 0
22031: ST_TO_ADDR
// sRanger := false ;
22032: LD_ADDR_EXP 91
22036: PUSH
22037: LD_INT 0
22039: ST_TO_ADDR
// sComputer := false ;
22040: LD_ADDR_EXP 92
22044: PUSH
22045: LD_INT 0
22047: ST_TO_ADDR
// s30 := false ;
22048: LD_ADDR_EXP 93
22052: PUSH
22053: LD_INT 0
22055: ST_TO_ADDR
// s60 := false ;
22056: LD_ADDR_EXP 94
22060: PUSH
22061: LD_INT 0
22063: ST_TO_ADDR
// end ;
22064: LD_VAR 0 1
22068: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22069: LD_INT 0
22071: PPUSH
22072: PPUSH
22073: PPUSH
22074: PPUSH
22075: PPUSH
22076: PPUSH
22077: PPUSH
// result := [ ] ;
22078: LD_ADDR_VAR 0 2
22082: PUSH
22083: EMPTY
22084: ST_TO_ADDR
// if campaign_id = 1 then
22085: LD_OWVAR 69
22089: PUSH
22090: LD_INT 1
22092: EQUAL
22093: IFFALSE 25259
// begin case mission_number of 1 :
22095: LD_OWVAR 70
22099: PUSH
22100: LD_INT 1
22102: DOUBLE
22103: EQUAL
22104: IFTRUE 22108
22106: GO 22184
22108: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22109: LD_ADDR_VAR 0 2
22113: PUSH
22114: LD_INT 2
22116: PUSH
22117: LD_INT 4
22119: PUSH
22120: LD_INT 11
22122: PUSH
22123: LD_INT 12
22125: PUSH
22126: LD_INT 15
22128: PUSH
22129: LD_INT 16
22131: PUSH
22132: LD_INT 22
22134: PUSH
22135: LD_INT 23
22137: PUSH
22138: LD_INT 26
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 101
22154: PUSH
22155: LD_INT 102
22157: PUSH
22158: LD_INT 106
22160: PUSH
22161: LD_INT 116
22163: PUSH
22164: LD_INT 117
22166: PUSH
22167: LD_INT 118
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: ST_TO_ADDR
22182: GO 25257
22184: LD_INT 2
22186: DOUBLE
22187: EQUAL
22188: IFTRUE 22192
22190: GO 22276
22192: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22193: LD_ADDR_VAR 0 2
22197: PUSH
22198: LD_INT 2
22200: PUSH
22201: LD_INT 4
22203: PUSH
22204: LD_INT 11
22206: PUSH
22207: LD_INT 12
22209: PUSH
22210: LD_INT 15
22212: PUSH
22213: LD_INT 16
22215: PUSH
22216: LD_INT 22
22218: PUSH
22219: LD_INT 23
22221: PUSH
22222: LD_INT 26
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 101
22238: PUSH
22239: LD_INT 102
22241: PUSH
22242: LD_INT 105
22244: PUSH
22245: LD_INT 106
22247: PUSH
22248: LD_INT 108
22250: PUSH
22251: LD_INT 116
22253: PUSH
22254: LD_INT 117
22256: PUSH
22257: LD_INT 118
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: ST_TO_ADDR
22274: GO 25257
22276: LD_INT 3
22278: DOUBLE
22279: EQUAL
22280: IFTRUE 22284
22282: GO 22372
22284: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22285: LD_ADDR_VAR 0 2
22289: PUSH
22290: LD_INT 2
22292: PUSH
22293: LD_INT 4
22295: PUSH
22296: LD_INT 5
22298: PUSH
22299: LD_INT 11
22301: PUSH
22302: LD_INT 12
22304: PUSH
22305: LD_INT 15
22307: PUSH
22308: LD_INT 16
22310: PUSH
22311: LD_INT 22
22313: PUSH
22314: LD_INT 26
22316: PUSH
22317: LD_INT 36
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 101
22334: PUSH
22335: LD_INT 102
22337: PUSH
22338: LD_INT 105
22340: PUSH
22341: LD_INT 106
22343: PUSH
22344: LD_INT 108
22346: PUSH
22347: LD_INT 116
22349: PUSH
22350: LD_INT 117
22352: PUSH
22353: LD_INT 118
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: ST_TO_ADDR
22370: GO 25257
22372: LD_INT 4
22374: DOUBLE
22375: EQUAL
22376: IFTRUE 22380
22378: GO 22476
22380: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22381: LD_ADDR_VAR 0 2
22385: PUSH
22386: LD_INT 2
22388: PUSH
22389: LD_INT 4
22391: PUSH
22392: LD_INT 5
22394: PUSH
22395: LD_INT 8
22397: PUSH
22398: LD_INT 11
22400: PUSH
22401: LD_INT 12
22403: PUSH
22404: LD_INT 15
22406: PUSH
22407: LD_INT 16
22409: PUSH
22410: LD_INT 22
22412: PUSH
22413: LD_INT 23
22415: PUSH
22416: LD_INT 26
22418: PUSH
22419: LD_INT 36
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 101
22438: PUSH
22439: LD_INT 102
22441: PUSH
22442: LD_INT 105
22444: PUSH
22445: LD_INT 106
22447: PUSH
22448: LD_INT 108
22450: PUSH
22451: LD_INT 116
22453: PUSH
22454: LD_INT 117
22456: PUSH
22457: LD_INT 118
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: ST_TO_ADDR
22474: GO 25257
22476: LD_INT 5
22478: DOUBLE
22479: EQUAL
22480: IFTRUE 22484
22482: GO 22596
22484: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22485: LD_ADDR_VAR 0 2
22489: PUSH
22490: LD_INT 2
22492: PUSH
22493: LD_INT 4
22495: PUSH
22496: LD_INT 5
22498: PUSH
22499: LD_INT 6
22501: PUSH
22502: LD_INT 8
22504: PUSH
22505: LD_INT 11
22507: PUSH
22508: LD_INT 12
22510: PUSH
22511: LD_INT 15
22513: PUSH
22514: LD_INT 16
22516: PUSH
22517: LD_INT 22
22519: PUSH
22520: LD_INT 23
22522: PUSH
22523: LD_INT 25
22525: PUSH
22526: LD_INT 26
22528: PUSH
22529: LD_INT 36
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 101
22550: PUSH
22551: LD_INT 102
22553: PUSH
22554: LD_INT 105
22556: PUSH
22557: LD_INT 106
22559: PUSH
22560: LD_INT 108
22562: PUSH
22563: LD_INT 109
22565: PUSH
22566: LD_INT 112
22568: PUSH
22569: LD_INT 116
22571: PUSH
22572: LD_INT 117
22574: PUSH
22575: LD_INT 118
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: ST_TO_ADDR
22594: GO 25257
22596: LD_INT 6
22598: DOUBLE
22599: EQUAL
22600: IFTRUE 22604
22602: GO 22736
22604: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22605: LD_ADDR_VAR 0 2
22609: PUSH
22610: LD_INT 2
22612: PUSH
22613: LD_INT 4
22615: PUSH
22616: LD_INT 5
22618: PUSH
22619: LD_INT 6
22621: PUSH
22622: LD_INT 8
22624: PUSH
22625: LD_INT 11
22627: PUSH
22628: LD_INT 12
22630: PUSH
22631: LD_INT 15
22633: PUSH
22634: LD_INT 16
22636: PUSH
22637: LD_INT 20
22639: PUSH
22640: LD_INT 21
22642: PUSH
22643: LD_INT 22
22645: PUSH
22646: LD_INT 23
22648: PUSH
22649: LD_INT 25
22651: PUSH
22652: LD_INT 26
22654: PUSH
22655: LD_INT 30
22657: PUSH
22658: LD_INT 31
22660: PUSH
22661: LD_INT 32
22663: PUSH
22664: LD_INT 36
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 101
22690: PUSH
22691: LD_INT 102
22693: PUSH
22694: LD_INT 105
22696: PUSH
22697: LD_INT 106
22699: PUSH
22700: LD_INT 108
22702: PUSH
22703: LD_INT 109
22705: PUSH
22706: LD_INT 112
22708: PUSH
22709: LD_INT 116
22711: PUSH
22712: LD_INT 117
22714: PUSH
22715: LD_INT 118
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: ST_TO_ADDR
22734: GO 25257
22736: LD_INT 7
22738: DOUBLE
22739: EQUAL
22740: IFTRUE 22744
22742: GO 22856
22744: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22745: LD_ADDR_VAR 0 2
22749: PUSH
22750: LD_INT 2
22752: PUSH
22753: LD_INT 4
22755: PUSH
22756: LD_INT 5
22758: PUSH
22759: LD_INT 7
22761: PUSH
22762: LD_INT 11
22764: PUSH
22765: LD_INT 12
22767: PUSH
22768: LD_INT 15
22770: PUSH
22771: LD_INT 16
22773: PUSH
22774: LD_INT 20
22776: PUSH
22777: LD_INT 21
22779: PUSH
22780: LD_INT 22
22782: PUSH
22783: LD_INT 23
22785: PUSH
22786: LD_INT 25
22788: PUSH
22789: LD_INT 26
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 101
22810: PUSH
22811: LD_INT 102
22813: PUSH
22814: LD_INT 103
22816: PUSH
22817: LD_INT 105
22819: PUSH
22820: LD_INT 106
22822: PUSH
22823: LD_INT 108
22825: PUSH
22826: LD_INT 112
22828: PUSH
22829: LD_INT 116
22831: PUSH
22832: LD_INT 117
22834: PUSH
22835: LD_INT 118
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: ST_TO_ADDR
22854: GO 25257
22856: LD_INT 8
22858: DOUBLE
22859: EQUAL
22860: IFTRUE 22864
22862: GO 23004
22864: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22865: LD_ADDR_VAR 0 2
22869: PUSH
22870: LD_INT 2
22872: PUSH
22873: LD_INT 4
22875: PUSH
22876: LD_INT 5
22878: PUSH
22879: LD_INT 6
22881: PUSH
22882: LD_INT 7
22884: PUSH
22885: LD_INT 8
22887: PUSH
22888: LD_INT 11
22890: PUSH
22891: LD_INT 12
22893: PUSH
22894: LD_INT 15
22896: PUSH
22897: LD_INT 16
22899: PUSH
22900: LD_INT 20
22902: PUSH
22903: LD_INT 21
22905: PUSH
22906: LD_INT 22
22908: PUSH
22909: LD_INT 23
22911: PUSH
22912: LD_INT 25
22914: PUSH
22915: LD_INT 26
22917: PUSH
22918: LD_INT 30
22920: PUSH
22921: LD_INT 31
22923: PUSH
22924: LD_INT 32
22926: PUSH
22927: LD_INT 36
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 101
22954: PUSH
22955: LD_INT 102
22957: PUSH
22958: LD_INT 103
22960: PUSH
22961: LD_INT 105
22963: PUSH
22964: LD_INT 106
22966: PUSH
22967: LD_INT 108
22969: PUSH
22970: LD_INT 109
22972: PUSH
22973: LD_INT 112
22975: PUSH
22976: LD_INT 116
22978: PUSH
22979: LD_INT 117
22981: PUSH
22982: LD_INT 118
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: ST_TO_ADDR
23002: GO 25257
23004: LD_INT 9
23006: DOUBLE
23007: EQUAL
23008: IFTRUE 23012
23010: GO 23160
23012: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23013: LD_ADDR_VAR 0 2
23017: PUSH
23018: LD_INT 2
23020: PUSH
23021: LD_INT 4
23023: PUSH
23024: LD_INT 5
23026: PUSH
23027: LD_INT 6
23029: PUSH
23030: LD_INT 7
23032: PUSH
23033: LD_INT 8
23035: PUSH
23036: LD_INT 11
23038: PUSH
23039: LD_INT 12
23041: PUSH
23042: LD_INT 15
23044: PUSH
23045: LD_INT 16
23047: PUSH
23048: LD_INT 20
23050: PUSH
23051: LD_INT 21
23053: PUSH
23054: LD_INT 22
23056: PUSH
23057: LD_INT 23
23059: PUSH
23060: LD_INT 25
23062: PUSH
23063: LD_INT 26
23065: PUSH
23066: LD_INT 28
23068: PUSH
23069: LD_INT 30
23071: PUSH
23072: LD_INT 31
23074: PUSH
23075: LD_INT 32
23077: PUSH
23078: LD_INT 36
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 101
23106: PUSH
23107: LD_INT 102
23109: PUSH
23110: LD_INT 103
23112: PUSH
23113: LD_INT 105
23115: PUSH
23116: LD_INT 106
23118: PUSH
23119: LD_INT 108
23121: PUSH
23122: LD_INT 109
23124: PUSH
23125: LD_INT 112
23127: PUSH
23128: LD_INT 114
23130: PUSH
23131: LD_INT 116
23133: PUSH
23134: LD_INT 117
23136: PUSH
23137: LD_INT 118
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: ST_TO_ADDR
23158: GO 25257
23160: LD_INT 10
23162: DOUBLE
23163: EQUAL
23164: IFTRUE 23168
23166: GO 23364
23168: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23169: LD_ADDR_VAR 0 2
23173: PUSH
23174: LD_INT 2
23176: PUSH
23177: LD_INT 4
23179: PUSH
23180: LD_INT 5
23182: PUSH
23183: LD_INT 6
23185: PUSH
23186: LD_INT 7
23188: PUSH
23189: LD_INT 8
23191: PUSH
23192: LD_INT 9
23194: PUSH
23195: LD_INT 10
23197: PUSH
23198: LD_INT 11
23200: PUSH
23201: LD_INT 12
23203: PUSH
23204: LD_INT 13
23206: PUSH
23207: LD_INT 14
23209: PUSH
23210: LD_INT 15
23212: PUSH
23213: LD_INT 16
23215: PUSH
23216: LD_INT 17
23218: PUSH
23219: LD_INT 18
23221: PUSH
23222: LD_INT 19
23224: PUSH
23225: LD_INT 20
23227: PUSH
23228: LD_INT 21
23230: PUSH
23231: LD_INT 22
23233: PUSH
23234: LD_INT 23
23236: PUSH
23237: LD_INT 24
23239: PUSH
23240: LD_INT 25
23242: PUSH
23243: LD_INT 26
23245: PUSH
23246: LD_INT 28
23248: PUSH
23249: LD_INT 30
23251: PUSH
23252: LD_INT 31
23254: PUSH
23255: LD_INT 32
23257: PUSH
23258: LD_INT 36
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 101
23294: PUSH
23295: LD_INT 102
23297: PUSH
23298: LD_INT 103
23300: PUSH
23301: LD_INT 104
23303: PUSH
23304: LD_INT 105
23306: PUSH
23307: LD_INT 106
23309: PUSH
23310: LD_INT 107
23312: PUSH
23313: LD_INT 108
23315: PUSH
23316: LD_INT 109
23318: PUSH
23319: LD_INT 110
23321: PUSH
23322: LD_INT 111
23324: PUSH
23325: LD_INT 112
23327: PUSH
23328: LD_INT 114
23330: PUSH
23331: LD_INT 116
23333: PUSH
23334: LD_INT 117
23336: PUSH
23337: LD_INT 118
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: ST_TO_ADDR
23362: GO 25257
23364: LD_INT 11
23366: DOUBLE
23367: EQUAL
23368: IFTRUE 23372
23370: GO 23576
23372: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23373: LD_ADDR_VAR 0 2
23377: PUSH
23378: LD_INT 2
23380: PUSH
23381: LD_INT 3
23383: PUSH
23384: LD_INT 4
23386: PUSH
23387: LD_INT 5
23389: PUSH
23390: LD_INT 6
23392: PUSH
23393: LD_INT 7
23395: PUSH
23396: LD_INT 8
23398: PUSH
23399: LD_INT 9
23401: PUSH
23402: LD_INT 10
23404: PUSH
23405: LD_INT 11
23407: PUSH
23408: LD_INT 12
23410: PUSH
23411: LD_INT 13
23413: PUSH
23414: LD_INT 14
23416: PUSH
23417: LD_INT 15
23419: PUSH
23420: LD_INT 16
23422: PUSH
23423: LD_INT 17
23425: PUSH
23426: LD_INT 18
23428: PUSH
23429: LD_INT 19
23431: PUSH
23432: LD_INT 20
23434: PUSH
23435: LD_INT 21
23437: PUSH
23438: LD_INT 22
23440: PUSH
23441: LD_INT 23
23443: PUSH
23444: LD_INT 24
23446: PUSH
23447: LD_INT 25
23449: PUSH
23450: LD_INT 26
23452: PUSH
23453: LD_INT 28
23455: PUSH
23456: LD_INT 30
23458: PUSH
23459: LD_INT 31
23461: PUSH
23462: LD_INT 32
23464: PUSH
23465: LD_INT 34
23467: PUSH
23468: LD_INT 36
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 101
23506: PUSH
23507: LD_INT 102
23509: PUSH
23510: LD_INT 103
23512: PUSH
23513: LD_INT 104
23515: PUSH
23516: LD_INT 105
23518: PUSH
23519: LD_INT 106
23521: PUSH
23522: LD_INT 107
23524: PUSH
23525: LD_INT 108
23527: PUSH
23528: LD_INT 109
23530: PUSH
23531: LD_INT 110
23533: PUSH
23534: LD_INT 111
23536: PUSH
23537: LD_INT 112
23539: PUSH
23540: LD_INT 114
23542: PUSH
23543: LD_INT 116
23545: PUSH
23546: LD_INT 117
23548: PUSH
23549: LD_INT 118
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: ST_TO_ADDR
23574: GO 25257
23576: LD_INT 12
23578: DOUBLE
23579: EQUAL
23580: IFTRUE 23584
23582: GO 23804
23584: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23585: LD_ADDR_VAR 0 2
23589: PUSH
23590: LD_INT 1
23592: PUSH
23593: LD_INT 2
23595: PUSH
23596: LD_INT 3
23598: PUSH
23599: LD_INT 4
23601: PUSH
23602: LD_INT 5
23604: PUSH
23605: LD_INT 6
23607: PUSH
23608: LD_INT 7
23610: PUSH
23611: LD_INT 8
23613: PUSH
23614: LD_INT 9
23616: PUSH
23617: LD_INT 10
23619: PUSH
23620: LD_INT 11
23622: PUSH
23623: LD_INT 12
23625: PUSH
23626: LD_INT 13
23628: PUSH
23629: LD_INT 14
23631: PUSH
23632: LD_INT 15
23634: PUSH
23635: LD_INT 16
23637: PUSH
23638: LD_INT 17
23640: PUSH
23641: LD_INT 18
23643: PUSH
23644: LD_INT 19
23646: PUSH
23647: LD_INT 20
23649: PUSH
23650: LD_INT 21
23652: PUSH
23653: LD_INT 22
23655: PUSH
23656: LD_INT 23
23658: PUSH
23659: LD_INT 24
23661: PUSH
23662: LD_INT 25
23664: PUSH
23665: LD_INT 26
23667: PUSH
23668: LD_INT 27
23670: PUSH
23671: LD_INT 28
23673: PUSH
23674: LD_INT 30
23676: PUSH
23677: LD_INT 31
23679: PUSH
23680: LD_INT 32
23682: PUSH
23683: LD_INT 33
23685: PUSH
23686: LD_INT 34
23688: PUSH
23689: LD_INT 36
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 101
23730: PUSH
23731: LD_INT 102
23733: PUSH
23734: LD_INT 103
23736: PUSH
23737: LD_INT 104
23739: PUSH
23740: LD_INT 105
23742: PUSH
23743: LD_INT 106
23745: PUSH
23746: LD_INT 107
23748: PUSH
23749: LD_INT 108
23751: PUSH
23752: LD_INT 109
23754: PUSH
23755: LD_INT 110
23757: PUSH
23758: LD_INT 111
23760: PUSH
23761: LD_INT 112
23763: PUSH
23764: LD_INT 113
23766: PUSH
23767: LD_INT 114
23769: PUSH
23770: LD_INT 116
23772: PUSH
23773: LD_INT 117
23775: PUSH
23776: LD_INT 118
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: ST_TO_ADDR
23802: GO 25257
23804: LD_INT 13
23806: DOUBLE
23807: EQUAL
23808: IFTRUE 23812
23810: GO 24020
23812: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23813: LD_ADDR_VAR 0 2
23817: PUSH
23818: LD_INT 1
23820: PUSH
23821: LD_INT 2
23823: PUSH
23824: LD_INT 3
23826: PUSH
23827: LD_INT 4
23829: PUSH
23830: LD_INT 5
23832: PUSH
23833: LD_INT 8
23835: PUSH
23836: LD_INT 9
23838: PUSH
23839: LD_INT 10
23841: PUSH
23842: LD_INT 11
23844: PUSH
23845: LD_INT 12
23847: PUSH
23848: LD_INT 14
23850: PUSH
23851: LD_INT 15
23853: PUSH
23854: LD_INT 16
23856: PUSH
23857: LD_INT 17
23859: PUSH
23860: LD_INT 18
23862: PUSH
23863: LD_INT 19
23865: PUSH
23866: LD_INT 20
23868: PUSH
23869: LD_INT 21
23871: PUSH
23872: LD_INT 22
23874: PUSH
23875: LD_INT 23
23877: PUSH
23878: LD_INT 24
23880: PUSH
23881: LD_INT 25
23883: PUSH
23884: LD_INT 26
23886: PUSH
23887: LD_INT 27
23889: PUSH
23890: LD_INT 28
23892: PUSH
23893: LD_INT 30
23895: PUSH
23896: LD_INT 31
23898: PUSH
23899: LD_INT 32
23901: PUSH
23902: LD_INT 33
23904: PUSH
23905: LD_INT 34
23907: PUSH
23908: LD_INT 36
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 101
23946: PUSH
23947: LD_INT 102
23949: PUSH
23950: LD_INT 103
23952: PUSH
23953: LD_INT 104
23955: PUSH
23956: LD_INT 105
23958: PUSH
23959: LD_INT 106
23961: PUSH
23962: LD_INT 107
23964: PUSH
23965: LD_INT 108
23967: PUSH
23968: LD_INT 109
23970: PUSH
23971: LD_INT 110
23973: PUSH
23974: LD_INT 111
23976: PUSH
23977: LD_INT 112
23979: PUSH
23980: LD_INT 113
23982: PUSH
23983: LD_INT 114
23985: PUSH
23986: LD_INT 116
23988: PUSH
23989: LD_INT 117
23991: PUSH
23992: LD_INT 118
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: ST_TO_ADDR
24018: GO 25257
24020: LD_INT 14
24022: DOUBLE
24023: EQUAL
24024: IFTRUE 24028
24026: GO 24252
24028: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24029: LD_ADDR_VAR 0 2
24033: PUSH
24034: LD_INT 1
24036: PUSH
24037: LD_INT 2
24039: PUSH
24040: LD_INT 3
24042: PUSH
24043: LD_INT 4
24045: PUSH
24046: LD_INT 5
24048: PUSH
24049: LD_INT 6
24051: PUSH
24052: LD_INT 7
24054: PUSH
24055: LD_INT 8
24057: PUSH
24058: LD_INT 9
24060: PUSH
24061: LD_INT 10
24063: PUSH
24064: LD_INT 11
24066: PUSH
24067: LD_INT 12
24069: PUSH
24070: LD_INT 13
24072: PUSH
24073: LD_INT 14
24075: PUSH
24076: LD_INT 15
24078: PUSH
24079: LD_INT 16
24081: PUSH
24082: LD_INT 17
24084: PUSH
24085: LD_INT 18
24087: PUSH
24088: LD_INT 19
24090: PUSH
24091: LD_INT 20
24093: PUSH
24094: LD_INT 21
24096: PUSH
24097: LD_INT 22
24099: PUSH
24100: LD_INT 23
24102: PUSH
24103: LD_INT 24
24105: PUSH
24106: LD_INT 25
24108: PUSH
24109: LD_INT 26
24111: PUSH
24112: LD_INT 27
24114: PUSH
24115: LD_INT 28
24117: PUSH
24118: LD_INT 29
24120: PUSH
24121: LD_INT 30
24123: PUSH
24124: LD_INT 31
24126: PUSH
24127: LD_INT 32
24129: PUSH
24130: LD_INT 33
24132: PUSH
24133: LD_INT 34
24135: PUSH
24136: LD_INT 36
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 101
24178: PUSH
24179: LD_INT 102
24181: PUSH
24182: LD_INT 103
24184: PUSH
24185: LD_INT 104
24187: PUSH
24188: LD_INT 105
24190: PUSH
24191: LD_INT 106
24193: PUSH
24194: LD_INT 107
24196: PUSH
24197: LD_INT 108
24199: PUSH
24200: LD_INT 109
24202: PUSH
24203: LD_INT 110
24205: PUSH
24206: LD_INT 111
24208: PUSH
24209: LD_INT 112
24211: PUSH
24212: LD_INT 113
24214: PUSH
24215: LD_INT 114
24217: PUSH
24218: LD_INT 116
24220: PUSH
24221: LD_INT 117
24223: PUSH
24224: LD_INT 118
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: ST_TO_ADDR
24250: GO 25257
24252: LD_INT 15
24254: DOUBLE
24255: EQUAL
24256: IFTRUE 24260
24258: GO 24484
24260: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24261: LD_ADDR_VAR 0 2
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: LD_INT 2
24271: PUSH
24272: LD_INT 3
24274: PUSH
24275: LD_INT 4
24277: PUSH
24278: LD_INT 5
24280: PUSH
24281: LD_INT 6
24283: PUSH
24284: LD_INT 7
24286: PUSH
24287: LD_INT 8
24289: PUSH
24290: LD_INT 9
24292: PUSH
24293: LD_INT 10
24295: PUSH
24296: LD_INT 11
24298: PUSH
24299: LD_INT 12
24301: PUSH
24302: LD_INT 13
24304: PUSH
24305: LD_INT 14
24307: PUSH
24308: LD_INT 15
24310: PUSH
24311: LD_INT 16
24313: PUSH
24314: LD_INT 17
24316: PUSH
24317: LD_INT 18
24319: PUSH
24320: LD_INT 19
24322: PUSH
24323: LD_INT 20
24325: PUSH
24326: LD_INT 21
24328: PUSH
24329: LD_INT 22
24331: PUSH
24332: LD_INT 23
24334: PUSH
24335: LD_INT 24
24337: PUSH
24338: LD_INT 25
24340: PUSH
24341: LD_INT 26
24343: PUSH
24344: LD_INT 27
24346: PUSH
24347: LD_INT 28
24349: PUSH
24350: LD_INT 29
24352: PUSH
24353: LD_INT 30
24355: PUSH
24356: LD_INT 31
24358: PUSH
24359: LD_INT 32
24361: PUSH
24362: LD_INT 33
24364: PUSH
24365: LD_INT 34
24367: PUSH
24368: LD_INT 36
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 101
24410: PUSH
24411: LD_INT 102
24413: PUSH
24414: LD_INT 103
24416: PUSH
24417: LD_INT 104
24419: PUSH
24420: LD_INT 105
24422: PUSH
24423: LD_INT 106
24425: PUSH
24426: LD_INT 107
24428: PUSH
24429: LD_INT 108
24431: PUSH
24432: LD_INT 109
24434: PUSH
24435: LD_INT 110
24437: PUSH
24438: LD_INT 111
24440: PUSH
24441: LD_INT 112
24443: PUSH
24444: LD_INT 113
24446: PUSH
24447: LD_INT 114
24449: PUSH
24450: LD_INT 116
24452: PUSH
24453: LD_INT 117
24455: PUSH
24456: LD_INT 118
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: ST_TO_ADDR
24482: GO 25257
24484: LD_INT 16
24486: DOUBLE
24487: EQUAL
24488: IFTRUE 24492
24490: GO 24628
24492: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24493: LD_ADDR_VAR 0 2
24497: PUSH
24498: LD_INT 2
24500: PUSH
24501: LD_INT 4
24503: PUSH
24504: LD_INT 5
24506: PUSH
24507: LD_INT 7
24509: PUSH
24510: LD_INT 11
24512: PUSH
24513: LD_INT 12
24515: PUSH
24516: LD_INT 15
24518: PUSH
24519: LD_INT 16
24521: PUSH
24522: LD_INT 20
24524: PUSH
24525: LD_INT 21
24527: PUSH
24528: LD_INT 22
24530: PUSH
24531: LD_INT 23
24533: PUSH
24534: LD_INT 25
24536: PUSH
24537: LD_INT 26
24539: PUSH
24540: LD_INT 30
24542: PUSH
24543: LD_INT 31
24545: PUSH
24546: LD_INT 32
24548: PUSH
24549: LD_INT 33
24551: PUSH
24552: LD_INT 34
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 101
24578: PUSH
24579: LD_INT 102
24581: PUSH
24582: LD_INT 103
24584: PUSH
24585: LD_INT 106
24587: PUSH
24588: LD_INT 108
24590: PUSH
24591: LD_INT 112
24593: PUSH
24594: LD_INT 113
24596: PUSH
24597: LD_INT 114
24599: PUSH
24600: LD_INT 116
24602: PUSH
24603: LD_INT 117
24605: PUSH
24606: LD_INT 118
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: ST_TO_ADDR
24626: GO 25257
24628: LD_INT 17
24630: DOUBLE
24631: EQUAL
24632: IFTRUE 24636
24634: GO 24860
24636: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24637: LD_ADDR_VAR 0 2
24641: PUSH
24642: LD_INT 1
24644: PUSH
24645: LD_INT 2
24647: PUSH
24648: LD_INT 3
24650: PUSH
24651: LD_INT 4
24653: PUSH
24654: LD_INT 5
24656: PUSH
24657: LD_INT 6
24659: PUSH
24660: LD_INT 7
24662: PUSH
24663: LD_INT 8
24665: PUSH
24666: LD_INT 9
24668: PUSH
24669: LD_INT 10
24671: PUSH
24672: LD_INT 11
24674: PUSH
24675: LD_INT 12
24677: PUSH
24678: LD_INT 13
24680: PUSH
24681: LD_INT 14
24683: PUSH
24684: LD_INT 15
24686: PUSH
24687: LD_INT 16
24689: PUSH
24690: LD_INT 17
24692: PUSH
24693: LD_INT 18
24695: PUSH
24696: LD_INT 19
24698: PUSH
24699: LD_INT 20
24701: PUSH
24702: LD_INT 21
24704: PUSH
24705: LD_INT 22
24707: PUSH
24708: LD_INT 23
24710: PUSH
24711: LD_INT 24
24713: PUSH
24714: LD_INT 25
24716: PUSH
24717: LD_INT 26
24719: PUSH
24720: LD_INT 27
24722: PUSH
24723: LD_INT 28
24725: PUSH
24726: LD_INT 29
24728: PUSH
24729: LD_INT 30
24731: PUSH
24732: LD_INT 31
24734: PUSH
24735: LD_INT 32
24737: PUSH
24738: LD_INT 33
24740: PUSH
24741: LD_INT 34
24743: PUSH
24744: LD_INT 36
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 101
24786: PUSH
24787: LD_INT 102
24789: PUSH
24790: LD_INT 103
24792: PUSH
24793: LD_INT 104
24795: PUSH
24796: LD_INT 105
24798: PUSH
24799: LD_INT 106
24801: PUSH
24802: LD_INT 107
24804: PUSH
24805: LD_INT 108
24807: PUSH
24808: LD_INT 109
24810: PUSH
24811: LD_INT 110
24813: PUSH
24814: LD_INT 111
24816: PUSH
24817: LD_INT 112
24819: PUSH
24820: LD_INT 113
24822: PUSH
24823: LD_INT 114
24825: PUSH
24826: LD_INT 116
24828: PUSH
24829: LD_INT 117
24831: PUSH
24832: LD_INT 118
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: ST_TO_ADDR
24858: GO 25257
24860: LD_INT 18
24862: DOUBLE
24863: EQUAL
24864: IFTRUE 24868
24866: GO 25016
24868: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24869: LD_ADDR_VAR 0 2
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: LD_INT 4
24879: PUSH
24880: LD_INT 5
24882: PUSH
24883: LD_INT 7
24885: PUSH
24886: LD_INT 11
24888: PUSH
24889: LD_INT 12
24891: PUSH
24892: LD_INT 15
24894: PUSH
24895: LD_INT 16
24897: PUSH
24898: LD_INT 20
24900: PUSH
24901: LD_INT 21
24903: PUSH
24904: LD_INT 22
24906: PUSH
24907: LD_INT 23
24909: PUSH
24910: LD_INT 25
24912: PUSH
24913: LD_INT 26
24915: PUSH
24916: LD_INT 30
24918: PUSH
24919: LD_INT 31
24921: PUSH
24922: LD_INT 32
24924: PUSH
24925: LD_INT 33
24927: PUSH
24928: LD_INT 34
24930: PUSH
24931: LD_INT 35
24933: PUSH
24934: LD_INT 36
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 101
24962: PUSH
24963: LD_INT 102
24965: PUSH
24966: LD_INT 103
24968: PUSH
24969: LD_INT 106
24971: PUSH
24972: LD_INT 108
24974: PUSH
24975: LD_INT 112
24977: PUSH
24978: LD_INT 113
24980: PUSH
24981: LD_INT 114
24983: PUSH
24984: LD_INT 115
24986: PUSH
24987: LD_INT 116
24989: PUSH
24990: LD_INT 117
24992: PUSH
24993: LD_INT 118
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: ST_TO_ADDR
25014: GO 25257
25016: LD_INT 19
25018: DOUBLE
25019: EQUAL
25020: IFTRUE 25024
25022: GO 25256
25024: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25025: LD_ADDR_VAR 0 2
25029: PUSH
25030: LD_INT 1
25032: PUSH
25033: LD_INT 2
25035: PUSH
25036: LD_INT 3
25038: PUSH
25039: LD_INT 4
25041: PUSH
25042: LD_INT 5
25044: PUSH
25045: LD_INT 6
25047: PUSH
25048: LD_INT 7
25050: PUSH
25051: LD_INT 8
25053: PUSH
25054: LD_INT 9
25056: PUSH
25057: LD_INT 10
25059: PUSH
25060: LD_INT 11
25062: PUSH
25063: LD_INT 12
25065: PUSH
25066: LD_INT 13
25068: PUSH
25069: LD_INT 14
25071: PUSH
25072: LD_INT 15
25074: PUSH
25075: LD_INT 16
25077: PUSH
25078: LD_INT 17
25080: PUSH
25081: LD_INT 18
25083: PUSH
25084: LD_INT 19
25086: PUSH
25087: LD_INT 20
25089: PUSH
25090: LD_INT 21
25092: PUSH
25093: LD_INT 22
25095: PUSH
25096: LD_INT 23
25098: PUSH
25099: LD_INT 24
25101: PUSH
25102: LD_INT 25
25104: PUSH
25105: LD_INT 26
25107: PUSH
25108: LD_INT 27
25110: PUSH
25111: LD_INT 28
25113: PUSH
25114: LD_INT 29
25116: PUSH
25117: LD_INT 30
25119: PUSH
25120: LD_INT 31
25122: PUSH
25123: LD_INT 32
25125: PUSH
25126: LD_INT 33
25128: PUSH
25129: LD_INT 34
25131: PUSH
25132: LD_INT 35
25134: PUSH
25135: LD_INT 36
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 101
25178: PUSH
25179: LD_INT 102
25181: PUSH
25182: LD_INT 103
25184: PUSH
25185: LD_INT 104
25187: PUSH
25188: LD_INT 105
25190: PUSH
25191: LD_INT 106
25193: PUSH
25194: LD_INT 107
25196: PUSH
25197: LD_INT 108
25199: PUSH
25200: LD_INT 109
25202: PUSH
25203: LD_INT 110
25205: PUSH
25206: LD_INT 111
25208: PUSH
25209: LD_INT 112
25211: PUSH
25212: LD_INT 113
25214: PUSH
25215: LD_INT 114
25217: PUSH
25218: LD_INT 115
25220: PUSH
25221: LD_INT 116
25223: PUSH
25224: LD_INT 117
25226: PUSH
25227: LD_INT 118
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: ST_TO_ADDR
25254: GO 25257
25256: POP
// end else
25257: GO 25488
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25259: LD_ADDR_VAR 0 2
25263: PUSH
25264: LD_INT 1
25266: PUSH
25267: LD_INT 2
25269: PUSH
25270: LD_INT 3
25272: PUSH
25273: LD_INT 4
25275: PUSH
25276: LD_INT 5
25278: PUSH
25279: LD_INT 6
25281: PUSH
25282: LD_INT 7
25284: PUSH
25285: LD_INT 8
25287: PUSH
25288: LD_INT 9
25290: PUSH
25291: LD_INT 10
25293: PUSH
25294: LD_INT 11
25296: PUSH
25297: LD_INT 12
25299: PUSH
25300: LD_INT 13
25302: PUSH
25303: LD_INT 14
25305: PUSH
25306: LD_INT 15
25308: PUSH
25309: LD_INT 16
25311: PUSH
25312: LD_INT 17
25314: PUSH
25315: LD_INT 18
25317: PUSH
25318: LD_INT 19
25320: PUSH
25321: LD_INT 20
25323: PUSH
25324: LD_INT 21
25326: PUSH
25327: LD_INT 22
25329: PUSH
25330: LD_INT 23
25332: PUSH
25333: LD_INT 24
25335: PUSH
25336: LD_INT 25
25338: PUSH
25339: LD_INT 26
25341: PUSH
25342: LD_INT 27
25344: PUSH
25345: LD_INT 28
25347: PUSH
25348: LD_INT 29
25350: PUSH
25351: LD_INT 30
25353: PUSH
25354: LD_INT 31
25356: PUSH
25357: LD_INT 32
25359: PUSH
25360: LD_INT 33
25362: PUSH
25363: LD_INT 34
25365: PUSH
25366: LD_INT 35
25368: PUSH
25369: LD_INT 36
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 101
25412: PUSH
25413: LD_INT 102
25415: PUSH
25416: LD_INT 103
25418: PUSH
25419: LD_INT 104
25421: PUSH
25422: LD_INT 105
25424: PUSH
25425: LD_INT 106
25427: PUSH
25428: LD_INT 107
25430: PUSH
25431: LD_INT 108
25433: PUSH
25434: LD_INT 109
25436: PUSH
25437: LD_INT 110
25439: PUSH
25440: LD_INT 111
25442: PUSH
25443: LD_INT 112
25445: PUSH
25446: LD_INT 113
25448: PUSH
25449: LD_INT 114
25451: PUSH
25452: LD_INT 115
25454: PUSH
25455: LD_INT 116
25457: PUSH
25458: LD_INT 117
25460: PUSH
25461: LD_INT 118
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: ST_TO_ADDR
// if result then
25488: LD_VAR 0 2
25492: IFFALSE 26278
// begin normal :=  ;
25494: LD_ADDR_VAR 0 5
25498: PUSH
25499: LD_STRING 
25501: ST_TO_ADDR
// hardcore :=  ;
25502: LD_ADDR_VAR 0 6
25506: PUSH
25507: LD_STRING 
25509: ST_TO_ADDR
// active :=  ;
25510: LD_ADDR_VAR 0 7
25514: PUSH
25515: LD_STRING 
25517: ST_TO_ADDR
// for i = 1 to normalCounter do
25518: LD_ADDR_VAR 0 8
25522: PUSH
25523: DOUBLE
25524: LD_INT 1
25526: DEC
25527: ST_TO_ADDR
25528: LD_EXP 39
25532: PUSH
25533: FOR_TO
25534: IFFALSE 25635
// begin tmp := 0 ;
25536: LD_ADDR_VAR 0 3
25540: PUSH
25541: LD_STRING 0
25543: ST_TO_ADDR
// if result [ 1 ] then
25544: LD_VAR 0 2
25548: PUSH
25549: LD_INT 1
25551: ARRAY
25552: IFFALSE 25617
// if result [ 1 ] [ 1 ] = i then
25554: LD_VAR 0 2
25558: PUSH
25559: LD_INT 1
25561: ARRAY
25562: PUSH
25563: LD_INT 1
25565: ARRAY
25566: PUSH
25567: LD_VAR 0 8
25571: EQUAL
25572: IFFALSE 25617
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25574: LD_ADDR_VAR 0 2
25578: PUSH
25579: LD_VAR 0 2
25583: PPUSH
25584: LD_INT 1
25586: PPUSH
25587: LD_VAR 0 2
25591: PUSH
25592: LD_INT 1
25594: ARRAY
25595: PPUSH
25596: LD_INT 1
25598: PPUSH
25599: CALL_OW 3
25603: PPUSH
25604: CALL_OW 1
25608: ST_TO_ADDR
// tmp := 1 ;
25609: LD_ADDR_VAR 0 3
25613: PUSH
25614: LD_STRING 1
25616: ST_TO_ADDR
// end ; normal := normal & tmp ;
25617: LD_ADDR_VAR 0 5
25621: PUSH
25622: LD_VAR 0 5
25626: PUSH
25627: LD_VAR 0 3
25631: STR
25632: ST_TO_ADDR
// end ;
25633: GO 25533
25635: POP
25636: POP
// for i = 1 to hardcoreCounter do
25637: LD_ADDR_VAR 0 8
25641: PUSH
25642: DOUBLE
25643: LD_INT 1
25645: DEC
25646: ST_TO_ADDR
25647: LD_EXP 40
25651: PUSH
25652: FOR_TO
25653: IFFALSE 25758
// begin tmp := 0 ;
25655: LD_ADDR_VAR 0 3
25659: PUSH
25660: LD_STRING 0
25662: ST_TO_ADDR
// if result [ 2 ] then
25663: LD_VAR 0 2
25667: PUSH
25668: LD_INT 2
25670: ARRAY
25671: IFFALSE 25740
// if result [ 2 ] [ 1 ] = 100 + i then
25673: LD_VAR 0 2
25677: PUSH
25678: LD_INT 2
25680: ARRAY
25681: PUSH
25682: LD_INT 1
25684: ARRAY
25685: PUSH
25686: LD_INT 100
25688: PUSH
25689: LD_VAR 0 8
25693: PLUS
25694: EQUAL
25695: IFFALSE 25740
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25697: LD_ADDR_VAR 0 2
25701: PUSH
25702: LD_VAR 0 2
25706: PPUSH
25707: LD_INT 2
25709: PPUSH
25710: LD_VAR 0 2
25714: PUSH
25715: LD_INT 2
25717: ARRAY
25718: PPUSH
25719: LD_INT 1
25721: PPUSH
25722: CALL_OW 3
25726: PPUSH
25727: CALL_OW 1
25731: ST_TO_ADDR
// tmp := 1 ;
25732: LD_ADDR_VAR 0 3
25736: PUSH
25737: LD_STRING 1
25739: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25740: LD_ADDR_VAR 0 6
25744: PUSH
25745: LD_VAR 0 6
25749: PUSH
25750: LD_VAR 0 3
25754: STR
25755: ST_TO_ADDR
// end ;
25756: GO 25652
25758: POP
25759: POP
// if isGameLoad then
25760: LD_VAR 0 1
25764: IFFALSE 26239
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25766: LD_ADDR_VAR 0 4
25770: PUSH
25771: LD_EXP 43
25775: PUSH
25776: LD_EXP 42
25780: PUSH
25781: LD_EXP 44
25785: PUSH
25786: LD_EXP 41
25790: PUSH
25791: LD_EXP 45
25795: PUSH
25796: LD_EXP 46
25800: PUSH
25801: LD_EXP 47
25805: PUSH
25806: LD_EXP 48
25810: PUSH
25811: LD_EXP 49
25815: PUSH
25816: LD_EXP 50
25820: PUSH
25821: LD_EXP 51
25825: PUSH
25826: LD_EXP 52
25830: PUSH
25831: LD_EXP 53
25835: PUSH
25836: LD_EXP 54
25840: PUSH
25841: LD_EXP 62
25845: PUSH
25846: LD_EXP 63
25850: PUSH
25851: LD_EXP 64
25855: PUSH
25856: LD_EXP 65
25860: PUSH
25861: LD_EXP 67
25865: PUSH
25866: LD_EXP 68
25870: PUSH
25871: LD_EXP 69
25875: PUSH
25876: LD_EXP 72
25880: PUSH
25881: LD_EXP 74
25885: PUSH
25886: LD_EXP 75
25890: PUSH
25891: LD_EXP 76
25895: PUSH
25896: LD_EXP 78
25900: PUSH
25901: LD_EXP 79
25905: PUSH
25906: LD_EXP 82
25910: PUSH
25911: LD_EXP 83
25915: PUSH
25916: LD_EXP 84
25920: PUSH
25921: LD_EXP 85
25925: PUSH
25926: LD_EXP 86
25930: PUSH
25931: LD_EXP 87
25935: PUSH
25936: LD_EXP 88
25940: PUSH
25941: LD_EXP 89
25945: PUSH
25946: LD_EXP 90
25950: PUSH
25951: LD_EXP 55
25955: PUSH
25956: LD_EXP 56
25960: PUSH
25961: LD_EXP 59
25965: PUSH
25966: LD_EXP 60
25970: PUSH
25971: LD_EXP 61
25975: PUSH
25976: LD_EXP 57
25980: PUSH
25981: LD_EXP 58
25985: PUSH
25986: LD_EXP 66
25990: PUSH
25991: LD_EXP 70
25995: PUSH
25996: LD_EXP 71
26000: PUSH
26001: LD_EXP 73
26005: PUSH
26006: LD_EXP 77
26010: PUSH
26011: LD_EXP 80
26015: PUSH
26016: LD_EXP 81
26020: PUSH
26021: LD_EXP 91
26025: PUSH
26026: LD_EXP 92
26030: PUSH
26031: LD_EXP 93
26035: PUSH
26036: LD_EXP 94
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: ST_TO_ADDR
// tmp :=  ;
26097: LD_ADDR_VAR 0 3
26101: PUSH
26102: LD_STRING 
26104: ST_TO_ADDR
// for i = 1 to normalCounter do
26105: LD_ADDR_VAR 0 8
26109: PUSH
26110: DOUBLE
26111: LD_INT 1
26113: DEC
26114: ST_TO_ADDR
26115: LD_EXP 39
26119: PUSH
26120: FOR_TO
26121: IFFALSE 26157
// begin if flags [ i ] then
26123: LD_VAR 0 4
26127: PUSH
26128: LD_VAR 0 8
26132: ARRAY
26133: IFFALSE 26155
// tmp := tmp & i & ; ;
26135: LD_ADDR_VAR 0 3
26139: PUSH
26140: LD_VAR 0 3
26144: PUSH
26145: LD_VAR 0 8
26149: STR
26150: PUSH
26151: LD_STRING ;
26153: STR
26154: ST_TO_ADDR
// end ;
26155: GO 26120
26157: POP
26158: POP
// for i = 1 to hardcoreCounter do
26159: LD_ADDR_VAR 0 8
26163: PUSH
26164: DOUBLE
26165: LD_INT 1
26167: DEC
26168: ST_TO_ADDR
26169: LD_EXP 40
26173: PUSH
26174: FOR_TO
26175: IFFALSE 26221
// begin if flags [ normalCounter + i ] then
26177: LD_VAR 0 4
26181: PUSH
26182: LD_EXP 39
26186: PUSH
26187: LD_VAR 0 8
26191: PLUS
26192: ARRAY
26193: IFFALSE 26219
// tmp := tmp & ( 100 + i ) & ; ;
26195: LD_ADDR_VAR 0 3
26199: PUSH
26200: LD_VAR 0 3
26204: PUSH
26205: LD_INT 100
26207: PUSH
26208: LD_VAR 0 8
26212: PLUS
26213: STR
26214: PUSH
26215: LD_STRING ;
26217: STR
26218: ST_TO_ADDR
// end ;
26219: GO 26174
26221: POP
26222: POP
// if tmp then
26223: LD_VAR 0 3
26227: IFFALSE 26239
// active := tmp ;
26229: LD_ADDR_VAR 0 7
26233: PUSH
26234: LD_VAR 0 3
26238: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26239: LD_STRING getStreamItemsFromMission("
26241: PUSH
26242: LD_VAR 0 5
26246: STR
26247: PUSH
26248: LD_STRING ","
26250: STR
26251: PUSH
26252: LD_VAR 0 6
26256: STR
26257: PUSH
26258: LD_STRING ","
26260: STR
26261: PUSH
26262: LD_VAR 0 7
26266: STR
26267: PUSH
26268: LD_STRING ")
26270: STR
26271: PPUSH
26272: CALL_OW 559
// end else
26276: GO 26285
// ToLua ( getStreamItemsFromMission("","","") ) ;
26278: LD_STRING getStreamItemsFromMission("","","")
26280: PPUSH
26281: CALL_OW 559
// end ;
26285: LD_VAR 0 2
26289: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26290: LD_EXP 38
26294: PUSH
26295: LD_EXP 43
26299: AND
26300: IFFALSE 26424
26302: GO 26304
26304: DISABLE
26305: LD_INT 0
26307: PPUSH
26308: PPUSH
// begin enable ;
26309: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26310: LD_ADDR_VAR 0 2
26314: PUSH
26315: LD_INT 22
26317: PUSH
26318: LD_OWVAR 2
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 2
26329: PUSH
26330: LD_INT 34
26332: PUSH
26333: LD_INT 7
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 34
26342: PUSH
26343: LD_INT 45
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 34
26352: PUSH
26353: LD_INT 28
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 34
26362: PUSH
26363: LD_INT 47
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PPUSH
26381: CALL_OW 69
26385: ST_TO_ADDR
// if not tmp then
26386: LD_VAR 0 2
26390: NOT
26391: IFFALSE 26395
// exit ;
26393: GO 26424
// for i in tmp do
26395: LD_ADDR_VAR 0 1
26399: PUSH
26400: LD_VAR 0 2
26404: PUSH
26405: FOR_IN
26406: IFFALSE 26422
// begin SetLives ( i , 0 ) ;
26408: LD_VAR 0 1
26412: PPUSH
26413: LD_INT 0
26415: PPUSH
26416: CALL_OW 234
// end ;
26420: GO 26405
26422: POP
26423: POP
// end ;
26424: PPOPN 2
26426: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26427: LD_EXP 38
26431: PUSH
26432: LD_EXP 44
26436: AND
26437: IFFALSE 26521
26439: GO 26441
26441: DISABLE
26442: LD_INT 0
26444: PPUSH
26445: PPUSH
// begin enable ;
26446: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26447: LD_ADDR_VAR 0 2
26451: PUSH
26452: LD_INT 22
26454: PUSH
26455: LD_OWVAR 2
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 32
26466: PUSH
26467: LD_INT 3
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PPUSH
26478: CALL_OW 69
26482: ST_TO_ADDR
// if not tmp then
26483: LD_VAR 0 2
26487: NOT
26488: IFFALSE 26492
// exit ;
26490: GO 26521
// for i in tmp do
26492: LD_ADDR_VAR 0 1
26496: PUSH
26497: LD_VAR 0 2
26501: PUSH
26502: FOR_IN
26503: IFFALSE 26519
// begin SetLives ( i , 0 ) ;
26505: LD_VAR 0 1
26509: PPUSH
26510: LD_INT 0
26512: PPUSH
26513: CALL_OW 234
// end ;
26517: GO 26502
26519: POP
26520: POP
// end ;
26521: PPOPN 2
26523: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26524: LD_EXP 38
26528: PUSH
26529: LD_EXP 41
26533: AND
26534: IFFALSE 26627
26536: GO 26538
26538: DISABLE
26539: LD_INT 0
26541: PPUSH
// begin enable ;
26542: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26543: LD_ADDR_VAR 0 1
26547: PUSH
26548: LD_INT 22
26550: PUSH
26551: LD_OWVAR 2
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 2
26562: PUSH
26563: LD_INT 25
26565: PUSH
26566: LD_INT 5
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 25
26575: PUSH
26576: LD_INT 9
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 25
26585: PUSH
26586: LD_INT 8
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PPUSH
26603: CALL_OW 69
26607: PUSH
26608: FOR_IN
26609: IFFALSE 26625
// begin SetClass ( i , 1 ) ;
26611: LD_VAR 0 1
26615: PPUSH
26616: LD_INT 1
26618: PPUSH
26619: CALL_OW 336
// end ;
26623: GO 26608
26625: POP
26626: POP
// end ;
26627: PPOPN 1
26629: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26630: LD_EXP 38
26634: PUSH
26635: LD_EXP 42
26639: AND
26640: PUSH
26641: LD_OWVAR 65
26645: PUSH
26646: LD_INT 7
26648: LESS
26649: AND
26650: IFFALSE 26664
26652: GO 26654
26654: DISABLE
// begin enable ;
26655: ENABLE
// game_speed := 7 ;
26656: LD_ADDR_OWVAR 65
26660: PUSH
26661: LD_INT 7
26663: ST_TO_ADDR
// end ;
26664: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26665: LD_EXP 38
26669: PUSH
26670: LD_EXP 45
26674: AND
26675: IFFALSE 26877
26677: GO 26679
26679: DISABLE
26680: LD_INT 0
26682: PPUSH
26683: PPUSH
26684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26685: LD_ADDR_VAR 0 3
26689: PUSH
26690: LD_INT 81
26692: PUSH
26693: LD_OWVAR 2
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 21
26704: PUSH
26705: LD_INT 1
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PPUSH
26716: CALL_OW 69
26720: ST_TO_ADDR
// if not tmp then
26721: LD_VAR 0 3
26725: NOT
26726: IFFALSE 26730
// exit ;
26728: GO 26877
// if tmp > 5 then
26730: LD_VAR 0 3
26734: PUSH
26735: LD_INT 5
26737: GREATER
26738: IFFALSE 26750
// k := 5 else
26740: LD_ADDR_VAR 0 2
26744: PUSH
26745: LD_INT 5
26747: ST_TO_ADDR
26748: GO 26760
// k := tmp ;
26750: LD_ADDR_VAR 0 2
26754: PUSH
26755: LD_VAR 0 3
26759: ST_TO_ADDR
// for i := 1 to k do
26760: LD_ADDR_VAR 0 1
26764: PUSH
26765: DOUBLE
26766: LD_INT 1
26768: DEC
26769: ST_TO_ADDR
26770: LD_VAR 0 2
26774: PUSH
26775: FOR_TO
26776: IFFALSE 26875
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26778: LD_VAR 0 3
26782: PUSH
26783: LD_VAR 0 1
26787: ARRAY
26788: PPUSH
26789: LD_VAR 0 1
26793: PUSH
26794: LD_INT 4
26796: MOD
26797: PUSH
26798: LD_INT 1
26800: PLUS
26801: PPUSH
26802: CALL_OW 259
26806: PUSH
26807: LD_INT 10
26809: LESS
26810: IFFALSE 26873
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26812: LD_VAR 0 3
26816: PUSH
26817: LD_VAR 0 1
26821: ARRAY
26822: PPUSH
26823: LD_VAR 0 1
26827: PUSH
26828: LD_INT 4
26830: MOD
26831: PUSH
26832: LD_INT 1
26834: PLUS
26835: PPUSH
26836: LD_VAR 0 3
26840: PUSH
26841: LD_VAR 0 1
26845: ARRAY
26846: PPUSH
26847: LD_VAR 0 1
26851: PUSH
26852: LD_INT 4
26854: MOD
26855: PUSH
26856: LD_INT 1
26858: PLUS
26859: PPUSH
26860: CALL_OW 259
26864: PUSH
26865: LD_INT 1
26867: PLUS
26868: PPUSH
26869: CALL_OW 237
26873: GO 26775
26875: POP
26876: POP
// end ;
26877: PPOPN 3
26879: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26880: LD_EXP 38
26884: PUSH
26885: LD_EXP 46
26889: AND
26890: IFFALSE 26910
26892: GO 26894
26894: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26895: LD_INT 4
26897: PPUSH
26898: LD_OWVAR 2
26902: PPUSH
26903: LD_INT 0
26905: PPUSH
26906: CALL_OW 324
26910: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26911: LD_EXP 38
26915: PUSH
26916: LD_EXP 75
26920: AND
26921: IFFALSE 26941
26923: GO 26925
26925: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26926: LD_INT 19
26928: PPUSH
26929: LD_OWVAR 2
26933: PPUSH
26934: LD_INT 0
26936: PPUSH
26937: CALL_OW 324
26941: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26942: LD_EXP 38
26946: PUSH
26947: LD_EXP 47
26951: AND
26952: IFFALSE 27054
26954: GO 26956
26956: DISABLE
26957: LD_INT 0
26959: PPUSH
26960: PPUSH
// begin enable ;
26961: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26962: LD_ADDR_VAR 0 2
26966: PUSH
26967: LD_INT 22
26969: PUSH
26970: LD_OWVAR 2
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 2
26981: PUSH
26982: LD_INT 34
26984: PUSH
26985: LD_INT 11
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 34
26994: PUSH
26995: LD_INT 30
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: LIST
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PPUSH
27011: CALL_OW 69
27015: ST_TO_ADDR
// if not tmp then
27016: LD_VAR 0 2
27020: NOT
27021: IFFALSE 27025
// exit ;
27023: GO 27054
// for i in tmp do
27025: LD_ADDR_VAR 0 1
27029: PUSH
27030: LD_VAR 0 2
27034: PUSH
27035: FOR_IN
27036: IFFALSE 27052
// begin SetLives ( i , 0 ) ;
27038: LD_VAR 0 1
27042: PPUSH
27043: LD_INT 0
27045: PPUSH
27046: CALL_OW 234
// end ;
27050: GO 27035
27052: POP
27053: POP
// end ;
27054: PPOPN 2
27056: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27057: LD_EXP 38
27061: PUSH
27062: LD_EXP 48
27066: AND
27067: IFFALSE 27087
27069: GO 27071
27071: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27072: LD_INT 32
27074: PPUSH
27075: LD_OWVAR 2
27079: PPUSH
27080: LD_INT 0
27082: PPUSH
27083: CALL_OW 324
27087: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27088: LD_EXP 38
27092: PUSH
27093: LD_EXP 49
27097: AND
27098: IFFALSE 27279
27100: GO 27102
27102: DISABLE
27103: LD_INT 0
27105: PPUSH
27106: PPUSH
27107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27108: LD_ADDR_VAR 0 2
27112: PUSH
27113: LD_INT 22
27115: PUSH
27116: LD_OWVAR 2
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 33
27127: PUSH
27128: LD_INT 3
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PPUSH
27139: CALL_OW 69
27143: ST_TO_ADDR
// if not tmp then
27144: LD_VAR 0 2
27148: NOT
27149: IFFALSE 27153
// exit ;
27151: GO 27279
// side := 0 ;
27153: LD_ADDR_VAR 0 3
27157: PUSH
27158: LD_INT 0
27160: ST_TO_ADDR
// for i := 1 to 8 do
27161: LD_ADDR_VAR 0 1
27165: PUSH
27166: DOUBLE
27167: LD_INT 1
27169: DEC
27170: ST_TO_ADDR
27171: LD_INT 8
27173: PUSH
27174: FOR_TO
27175: IFFALSE 27223
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27177: LD_OWVAR 2
27181: PUSH
27182: LD_VAR 0 1
27186: NONEQUAL
27187: PUSH
27188: LD_OWVAR 2
27192: PPUSH
27193: LD_VAR 0 1
27197: PPUSH
27198: CALL_OW 81
27202: PUSH
27203: LD_INT 2
27205: EQUAL
27206: AND
27207: IFFALSE 27221
// begin side := i ;
27209: LD_ADDR_VAR 0 3
27213: PUSH
27214: LD_VAR 0 1
27218: ST_TO_ADDR
// break ;
27219: GO 27223
// end ;
27221: GO 27174
27223: POP
27224: POP
// if not side then
27225: LD_VAR 0 3
27229: NOT
27230: IFFALSE 27234
// exit ;
27232: GO 27279
// for i := 1 to tmp do
27234: LD_ADDR_VAR 0 1
27238: PUSH
27239: DOUBLE
27240: LD_INT 1
27242: DEC
27243: ST_TO_ADDR
27244: LD_VAR 0 2
27248: PUSH
27249: FOR_TO
27250: IFFALSE 27277
// if Prob ( 60 ) then
27252: LD_INT 60
27254: PPUSH
27255: CALL_OW 13
27259: IFFALSE 27275
// SetSide ( i , side ) ;
27261: LD_VAR 0 1
27265: PPUSH
27266: LD_VAR 0 3
27270: PPUSH
27271: CALL_OW 235
27275: GO 27249
27277: POP
27278: POP
// end ;
27279: PPOPN 3
27281: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27282: LD_EXP 38
27286: PUSH
27287: LD_EXP 51
27291: AND
27292: IFFALSE 27411
27294: GO 27296
27296: DISABLE
27297: LD_INT 0
27299: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27300: LD_ADDR_VAR 0 1
27304: PUSH
27305: LD_INT 22
27307: PUSH
27308: LD_OWVAR 2
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 21
27319: PUSH
27320: LD_INT 1
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 3
27329: PUSH
27330: LD_INT 23
27332: PUSH
27333: LD_INT 0
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: LIST
27348: PPUSH
27349: CALL_OW 69
27353: PUSH
27354: FOR_IN
27355: IFFALSE 27409
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27357: LD_VAR 0 1
27361: PPUSH
27362: CALL_OW 257
27366: PUSH
27367: LD_INT 1
27369: PUSH
27370: LD_INT 2
27372: PUSH
27373: LD_INT 3
27375: PUSH
27376: LD_INT 4
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: IN
27385: IFFALSE 27407
// SetClass ( un , rand ( 1 , 4 ) ) ;
27387: LD_VAR 0 1
27391: PPUSH
27392: LD_INT 1
27394: PPUSH
27395: LD_INT 4
27397: PPUSH
27398: CALL_OW 12
27402: PPUSH
27403: CALL_OW 336
27407: GO 27354
27409: POP
27410: POP
// end ;
27411: PPOPN 1
27413: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27414: LD_EXP 38
27418: PUSH
27419: LD_EXP 50
27423: AND
27424: IFFALSE 27503
27426: GO 27428
27428: DISABLE
27429: LD_INT 0
27431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27432: LD_ADDR_VAR 0 1
27436: PUSH
27437: LD_INT 22
27439: PUSH
27440: LD_OWVAR 2
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 21
27451: PUSH
27452: LD_INT 3
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PPUSH
27463: CALL_OW 69
27467: ST_TO_ADDR
// if not tmp then
27468: LD_VAR 0 1
27472: NOT
27473: IFFALSE 27477
// exit ;
27475: GO 27503
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27477: LD_VAR 0 1
27481: PUSH
27482: LD_INT 1
27484: PPUSH
27485: LD_VAR 0 1
27489: PPUSH
27490: CALL_OW 12
27494: ARRAY
27495: PPUSH
27496: LD_INT 100
27498: PPUSH
27499: CALL_OW 234
// end ;
27503: PPOPN 1
27505: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27506: LD_EXP 38
27510: PUSH
27511: LD_EXP 52
27515: AND
27516: IFFALSE 27614
27518: GO 27520
27520: DISABLE
27521: LD_INT 0
27523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27524: LD_ADDR_VAR 0 1
27528: PUSH
27529: LD_INT 22
27531: PUSH
27532: LD_OWVAR 2
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 21
27543: PUSH
27544: LD_INT 1
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PPUSH
27555: CALL_OW 69
27559: ST_TO_ADDR
// if not tmp then
27560: LD_VAR 0 1
27564: NOT
27565: IFFALSE 27569
// exit ;
27567: GO 27614
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27569: LD_VAR 0 1
27573: PUSH
27574: LD_INT 1
27576: PPUSH
27577: LD_VAR 0 1
27581: PPUSH
27582: CALL_OW 12
27586: ARRAY
27587: PPUSH
27588: LD_INT 1
27590: PPUSH
27591: LD_INT 4
27593: PPUSH
27594: CALL_OW 12
27598: PPUSH
27599: LD_INT 3000
27601: PPUSH
27602: LD_INT 9000
27604: PPUSH
27605: CALL_OW 12
27609: PPUSH
27610: CALL_OW 492
// end ;
27614: PPOPN 1
27616: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27617: LD_EXP 38
27621: PUSH
27622: LD_EXP 53
27626: AND
27627: IFFALSE 27647
27629: GO 27631
27631: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27632: LD_INT 1
27634: PPUSH
27635: LD_OWVAR 2
27639: PPUSH
27640: LD_INT 0
27642: PPUSH
27643: CALL_OW 324
27647: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27648: LD_EXP 38
27652: PUSH
27653: LD_EXP 54
27657: AND
27658: IFFALSE 27741
27660: GO 27662
27662: DISABLE
27663: LD_INT 0
27665: PPUSH
27666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27667: LD_ADDR_VAR 0 2
27671: PUSH
27672: LD_INT 22
27674: PUSH
27675: LD_OWVAR 2
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 21
27686: PUSH
27687: LD_INT 3
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PPUSH
27698: CALL_OW 69
27702: ST_TO_ADDR
// if not tmp then
27703: LD_VAR 0 2
27707: NOT
27708: IFFALSE 27712
// exit ;
27710: GO 27741
// for i in tmp do
27712: LD_ADDR_VAR 0 1
27716: PUSH
27717: LD_VAR 0 2
27721: PUSH
27722: FOR_IN
27723: IFFALSE 27739
// SetBLevel ( i , 10 ) ;
27725: LD_VAR 0 1
27729: PPUSH
27730: LD_INT 10
27732: PPUSH
27733: CALL_OW 241
27737: GO 27722
27739: POP
27740: POP
// end ;
27741: PPOPN 2
27743: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27744: LD_EXP 38
27748: PUSH
27749: LD_EXP 55
27753: AND
27754: IFFALSE 27865
27756: GO 27758
27758: DISABLE
27759: LD_INT 0
27761: PPUSH
27762: PPUSH
27763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27764: LD_ADDR_VAR 0 3
27768: PUSH
27769: LD_INT 22
27771: PUSH
27772: LD_OWVAR 2
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 25
27783: PUSH
27784: LD_INT 1
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PPUSH
27795: CALL_OW 69
27799: ST_TO_ADDR
// if not tmp then
27800: LD_VAR 0 3
27804: NOT
27805: IFFALSE 27809
// exit ;
27807: GO 27865
// un := tmp [ rand ( 1 , tmp ) ] ;
27809: LD_ADDR_VAR 0 2
27813: PUSH
27814: LD_VAR 0 3
27818: PUSH
27819: LD_INT 1
27821: PPUSH
27822: LD_VAR 0 3
27826: PPUSH
27827: CALL_OW 12
27831: ARRAY
27832: ST_TO_ADDR
// if Crawls ( un ) then
27833: LD_VAR 0 2
27837: PPUSH
27838: CALL_OW 318
27842: IFFALSE 27853
// ComWalk ( un ) ;
27844: LD_VAR 0 2
27848: PPUSH
27849: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27853: LD_VAR 0 2
27857: PPUSH
27858: LD_INT 5
27860: PPUSH
27861: CALL_OW 336
// end ;
27865: PPOPN 3
27867: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27868: LD_EXP 38
27872: PUSH
27873: LD_EXP 56
27877: AND
27878: PUSH
27879: LD_OWVAR 67
27883: PUSH
27884: LD_INT 4
27886: LESS
27887: AND
27888: IFFALSE 27907
27890: GO 27892
27892: DISABLE
// begin Difficulty := Difficulty + 1 ;
27893: LD_ADDR_OWVAR 67
27897: PUSH
27898: LD_OWVAR 67
27902: PUSH
27903: LD_INT 1
27905: PLUS
27906: ST_TO_ADDR
// end ;
27907: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27908: LD_EXP 38
27912: PUSH
27913: LD_EXP 57
27917: AND
27918: IFFALSE 28021
27920: GO 27922
27922: DISABLE
27923: LD_INT 0
27925: PPUSH
// begin for i := 1 to 5 do
27926: LD_ADDR_VAR 0 1
27930: PUSH
27931: DOUBLE
27932: LD_INT 1
27934: DEC
27935: ST_TO_ADDR
27936: LD_INT 5
27938: PUSH
27939: FOR_TO
27940: IFFALSE 28019
// begin uc_nation := nation_nature ;
27942: LD_ADDR_OWVAR 21
27946: PUSH
27947: LD_INT 0
27949: ST_TO_ADDR
// uc_side := 0 ;
27950: LD_ADDR_OWVAR 20
27954: PUSH
27955: LD_INT 0
27957: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27958: LD_ADDR_OWVAR 29
27962: PUSH
27963: LD_INT 12
27965: PUSH
27966: LD_INT 12
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: ST_TO_ADDR
// hc_agressivity := 20 ;
27973: LD_ADDR_OWVAR 35
27977: PUSH
27978: LD_INT 20
27980: ST_TO_ADDR
// hc_class := class_tiger ;
27981: LD_ADDR_OWVAR 28
27985: PUSH
27986: LD_INT 14
27988: ST_TO_ADDR
// hc_gallery :=  ;
27989: LD_ADDR_OWVAR 33
27993: PUSH
27994: LD_STRING 
27996: ST_TO_ADDR
// hc_name :=  ;
27997: LD_ADDR_OWVAR 26
28001: PUSH
28002: LD_STRING 
28004: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28005: CALL_OW 44
28009: PPUSH
28010: LD_INT 0
28012: PPUSH
28013: CALL_OW 51
// end ;
28017: GO 27939
28019: POP
28020: POP
// end ;
28021: PPOPN 1
28023: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28024: LD_EXP 38
28028: PUSH
28029: LD_EXP 58
28033: AND
28034: IFFALSE 28043
28036: GO 28038
28038: DISABLE
// StreamSibBomb ;
28039: CALL 28044 0 0
28043: END
// export function StreamSibBomb ; var i , x , y ; begin
28044: LD_INT 0
28046: PPUSH
28047: PPUSH
28048: PPUSH
28049: PPUSH
// result := false ;
28050: LD_ADDR_VAR 0 1
28054: PUSH
28055: LD_INT 0
28057: ST_TO_ADDR
// for i := 1 to 16 do
28058: LD_ADDR_VAR 0 2
28062: PUSH
28063: DOUBLE
28064: LD_INT 1
28066: DEC
28067: ST_TO_ADDR
28068: LD_INT 16
28070: PUSH
28071: FOR_TO
28072: IFFALSE 28271
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28074: LD_ADDR_VAR 0 3
28078: PUSH
28079: LD_INT 10
28081: PUSH
28082: LD_INT 20
28084: PUSH
28085: LD_INT 30
28087: PUSH
28088: LD_INT 40
28090: PUSH
28091: LD_INT 50
28093: PUSH
28094: LD_INT 60
28096: PUSH
28097: LD_INT 70
28099: PUSH
28100: LD_INT 80
28102: PUSH
28103: LD_INT 90
28105: PUSH
28106: LD_INT 100
28108: PUSH
28109: LD_INT 110
28111: PUSH
28112: LD_INT 120
28114: PUSH
28115: LD_INT 130
28117: PUSH
28118: LD_INT 140
28120: PUSH
28121: LD_INT 150
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 1
28143: PPUSH
28144: LD_INT 15
28146: PPUSH
28147: CALL_OW 12
28151: ARRAY
28152: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28153: LD_ADDR_VAR 0 4
28157: PUSH
28158: LD_INT 10
28160: PUSH
28161: LD_INT 20
28163: PUSH
28164: LD_INT 30
28166: PUSH
28167: LD_INT 40
28169: PUSH
28170: LD_INT 50
28172: PUSH
28173: LD_INT 60
28175: PUSH
28176: LD_INT 70
28178: PUSH
28179: LD_INT 80
28181: PUSH
28182: LD_INT 90
28184: PUSH
28185: LD_INT 100
28187: PUSH
28188: LD_INT 110
28190: PUSH
28191: LD_INT 120
28193: PUSH
28194: LD_INT 130
28196: PUSH
28197: LD_INT 140
28199: PUSH
28200: LD_INT 150
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 1
28222: PPUSH
28223: LD_INT 15
28225: PPUSH
28226: CALL_OW 12
28230: ARRAY
28231: ST_TO_ADDR
// if ValidHex ( x , y ) then
28232: LD_VAR 0 3
28236: PPUSH
28237: LD_VAR 0 4
28241: PPUSH
28242: CALL_OW 488
28246: IFFALSE 28269
// begin result := [ x , y ] ;
28248: LD_ADDR_VAR 0 1
28252: PUSH
28253: LD_VAR 0 3
28257: PUSH
28258: LD_VAR 0 4
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: ST_TO_ADDR
// break ;
28267: GO 28271
// end ; end ;
28269: GO 28071
28271: POP
28272: POP
// if result then
28273: LD_VAR 0 1
28277: IFFALSE 28337
// begin ToLua ( playSibBomb() ) ;
28279: LD_STRING playSibBomb()
28281: PPUSH
28282: CALL_OW 559
// wait ( 0 0$14 ) ;
28286: LD_INT 490
28288: PPUSH
28289: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28293: LD_VAR 0 1
28297: PUSH
28298: LD_INT 1
28300: ARRAY
28301: PPUSH
28302: LD_VAR 0 1
28306: PUSH
28307: LD_INT 2
28309: ARRAY
28310: PPUSH
28311: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28315: LD_VAR 0 1
28319: PUSH
28320: LD_INT 1
28322: ARRAY
28323: PPUSH
28324: LD_VAR 0 1
28328: PUSH
28329: LD_INT 2
28331: ARRAY
28332: PPUSH
28333: CALL_OW 429
// end ; end ;
28337: LD_VAR 0 1
28341: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28342: LD_EXP 38
28346: PUSH
28347: LD_EXP 60
28351: AND
28352: IFFALSE 28364
28354: GO 28356
28356: DISABLE
// YouLost (  ) ;
28357: LD_STRING 
28359: PPUSH
28360: CALL_OW 104
28364: END
// every 0 0$1 trigger StreamModeActive and sFog do
28365: LD_EXP 38
28369: PUSH
28370: LD_EXP 59
28374: AND
28375: IFFALSE 28389
28377: GO 28379
28379: DISABLE
// FogOff ( your_side ) ;
28380: LD_OWVAR 2
28384: PPUSH
28385: CALL_OW 344
28389: END
// every 0 0$1 trigger StreamModeActive and sSun do
28390: LD_EXP 38
28394: PUSH
28395: LD_EXP 61
28399: AND
28400: IFFALSE 28428
28402: GO 28404
28404: DISABLE
// begin solar_recharge_percent := 0 ;
28405: LD_ADDR_OWVAR 79
28409: PUSH
28410: LD_INT 0
28412: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28413: LD_INT 10500
28415: PPUSH
28416: CALL_OW 67
// solar_recharge_percent := 100 ;
28420: LD_ADDR_OWVAR 79
28424: PUSH
28425: LD_INT 100
28427: ST_TO_ADDR
// end ;
28428: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28429: LD_EXP 38
28433: PUSH
28434: LD_EXP 62
28438: AND
28439: IFFALSE 28678
28441: GO 28443
28443: DISABLE
28444: LD_INT 0
28446: PPUSH
28447: PPUSH
28448: PPUSH
// begin tmp := [ ] ;
28449: LD_ADDR_VAR 0 3
28453: PUSH
28454: EMPTY
28455: ST_TO_ADDR
// for i := 1 to 6 do
28456: LD_ADDR_VAR 0 1
28460: PUSH
28461: DOUBLE
28462: LD_INT 1
28464: DEC
28465: ST_TO_ADDR
28466: LD_INT 6
28468: PUSH
28469: FOR_TO
28470: IFFALSE 28575
// begin uc_nation := nation_nature ;
28472: LD_ADDR_OWVAR 21
28476: PUSH
28477: LD_INT 0
28479: ST_TO_ADDR
// uc_side := 0 ;
28480: LD_ADDR_OWVAR 20
28484: PUSH
28485: LD_INT 0
28487: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28488: LD_ADDR_OWVAR 29
28492: PUSH
28493: LD_INT 12
28495: PUSH
28496: LD_INT 12
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: ST_TO_ADDR
// hc_agressivity := 20 ;
28503: LD_ADDR_OWVAR 35
28507: PUSH
28508: LD_INT 20
28510: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28511: LD_ADDR_OWVAR 28
28515: PUSH
28516: LD_INT 17
28518: ST_TO_ADDR
// hc_gallery :=  ;
28519: LD_ADDR_OWVAR 33
28523: PUSH
28524: LD_STRING 
28526: ST_TO_ADDR
// hc_name :=  ;
28527: LD_ADDR_OWVAR 26
28531: PUSH
28532: LD_STRING 
28534: ST_TO_ADDR
// un := CreateHuman ;
28535: LD_ADDR_VAR 0 2
28539: PUSH
28540: CALL_OW 44
28544: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28545: LD_VAR 0 2
28549: PPUSH
28550: LD_INT 1
28552: PPUSH
28553: CALL_OW 51
// tmp := tmp ^ un ;
28557: LD_ADDR_VAR 0 3
28561: PUSH
28562: LD_VAR 0 3
28566: PUSH
28567: LD_VAR 0 2
28571: ADD
28572: ST_TO_ADDR
// end ;
28573: GO 28469
28575: POP
28576: POP
// repeat wait ( 0 0$1 ) ;
28577: LD_INT 35
28579: PPUSH
28580: CALL_OW 67
// for un in tmp do
28584: LD_ADDR_VAR 0 2
28588: PUSH
28589: LD_VAR 0 3
28593: PUSH
28594: FOR_IN
28595: IFFALSE 28669
// begin if IsDead ( un ) then
28597: LD_VAR 0 2
28601: PPUSH
28602: CALL_OW 301
28606: IFFALSE 28626
// begin tmp := tmp diff un ;
28608: LD_ADDR_VAR 0 3
28612: PUSH
28613: LD_VAR 0 3
28617: PUSH
28618: LD_VAR 0 2
28622: DIFF
28623: ST_TO_ADDR
// continue ;
28624: GO 28594
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28626: LD_VAR 0 2
28630: PPUSH
28631: LD_INT 3
28633: PUSH
28634: LD_INT 22
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PPUSH
28648: CALL_OW 69
28652: PPUSH
28653: LD_VAR 0 2
28657: PPUSH
28658: CALL_OW 74
28662: PPUSH
28663: CALL_OW 115
// end ;
28667: GO 28594
28669: POP
28670: POP
// until not tmp ;
28671: LD_VAR 0 3
28675: NOT
28676: IFFALSE 28577
// end ;
28678: PPOPN 3
28680: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28681: LD_EXP 38
28685: PUSH
28686: LD_EXP 63
28690: AND
28691: IFFALSE 28745
28693: GO 28695
28695: DISABLE
// begin ToLua ( displayTroll(); ) ;
28696: LD_STRING displayTroll();
28698: PPUSH
28699: CALL_OW 559
// wait ( 3 3$00 ) ;
28703: LD_INT 6300
28705: PPUSH
28706: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28710: LD_STRING hideTroll();
28712: PPUSH
28713: CALL_OW 559
// wait ( 1 1$00 ) ;
28717: LD_INT 2100
28719: PPUSH
28720: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28724: LD_STRING displayTroll();
28726: PPUSH
28727: CALL_OW 559
// wait ( 1 1$00 ) ;
28731: LD_INT 2100
28733: PPUSH
28734: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28738: LD_STRING hideTroll();
28740: PPUSH
28741: CALL_OW 559
// end ;
28745: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28746: LD_EXP 38
28750: PUSH
28751: LD_EXP 64
28755: AND
28756: IFFALSE 28819
28758: GO 28760
28760: DISABLE
28761: LD_INT 0
28763: PPUSH
// begin p := 0 ;
28764: LD_ADDR_VAR 0 1
28768: PUSH
28769: LD_INT 0
28771: ST_TO_ADDR
// repeat game_speed := 1 ;
28772: LD_ADDR_OWVAR 65
28776: PUSH
28777: LD_INT 1
28779: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28780: LD_INT 35
28782: PPUSH
28783: CALL_OW 67
// p := p + 1 ;
28787: LD_ADDR_VAR 0 1
28791: PUSH
28792: LD_VAR 0 1
28796: PUSH
28797: LD_INT 1
28799: PLUS
28800: ST_TO_ADDR
// until p >= 60 ;
28801: LD_VAR 0 1
28805: PUSH
28806: LD_INT 60
28808: GREATEREQUAL
28809: IFFALSE 28772
// game_speed := 4 ;
28811: LD_ADDR_OWVAR 65
28815: PUSH
28816: LD_INT 4
28818: ST_TO_ADDR
// end ;
28819: PPOPN 1
28821: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28822: LD_EXP 38
28826: PUSH
28827: LD_EXP 65
28831: AND
28832: IFFALSE 28978
28834: GO 28836
28836: DISABLE
28837: LD_INT 0
28839: PPUSH
28840: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28841: LD_ADDR_VAR 0 1
28845: PUSH
28846: LD_INT 22
28848: PUSH
28849: LD_OWVAR 2
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 2
28860: PUSH
28861: LD_INT 30
28863: PUSH
28864: LD_INT 0
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 30
28873: PUSH
28874: LD_INT 1
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: LIST
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PPUSH
28890: CALL_OW 69
28894: ST_TO_ADDR
// if not depot then
28895: LD_VAR 0 1
28899: NOT
28900: IFFALSE 28904
// exit ;
28902: GO 28978
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28904: LD_ADDR_VAR 0 2
28908: PUSH
28909: LD_VAR 0 1
28913: PUSH
28914: LD_INT 1
28916: PPUSH
28917: LD_VAR 0 1
28921: PPUSH
28922: CALL_OW 12
28926: ARRAY
28927: PPUSH
28928: CALL_OW 274
28932: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28933: LD_VAR 0 2
28937: PPUSH
28938: LD_INT 1
28940: PPUSH
28941: LD_INT 0
28943: PPUSH
28944: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28948: LD_VAR 0 2
28952: PPUSH
28953: LD_INT 2
28955: PPUSH
28956: LD_INT 0
28958: PPUSH
28959: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28963: LD_VAR 0 2
28967: PPUSH
28968: LD_INT 3
28970: PPUSH
28971: LD_INT 0
28973: PPUSH
28974: CALL_OW 277
// end ;
28978: PPOPN 2
28980: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28981: LD_EXP 38
28985: PUSH
28986: LD_EXP 66
28990: AND
28991: IFFALSE 29088
28993: GO 28995
28995: DISABLE
28996: LD_INT 0
28998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28999: LD_ADDR_VAR 0 1
29003: PUSH
29004: LD_INT 22
29006: PUSH
29007: LD_OWVAR 2
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 21
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 3
29028: PUSH
29029: LD_INT 23
29031: PUSH
29032: LD_INT 0
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: LIST
29047: PPUSH
29048: CALL_OW 69
29052: ST_TO_ADDR
// if not tmp then
29053: LD_VAR 0 1
29057: NOT
29058: IFFALSE 29062
// exit ;
29060: GO 29088
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29062: LD_VAR 0 1
29066: PUSH
29067: LD_INT 1
29069: PPUSH
29070: LD_VAR 0 1
29074: PPUSH
29075: CALL_OW 12
29079: ARRAY
29080: PPUSH
29081: LD_INT 200
29083: PPUSH
29084: CALL_OW 234
// end ;
29088: PPOPN 1
29090: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29091: LD_EXP 38
29095: PUSH
29096: LD_EXP 67
29100: AND
29101: IFFALSE 29180
29103: GO 29105
29105: DISABLE
29106: LD_INT 0
29108: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29109: LD_ADDR_VAR 0 1
29113: PUSH
29114: LD_INT 22
29116: PUSH
29117: LD_OWVAR 2
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 21
29128: PUSH
29129: LD_INT 2
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PPUSH
29140: CALL_OW 69
29144: ST_TO_ADDR
// if not tmp then
29145: LD_VAR 0 1
29149: NOT
29150: IFFALSE 29154
// exit ;
29152: GO 29180
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29154: LD_VAR 0 1
29158: PUSH
29159: LD_INT 1
29161: PPUSH
29162: LD_VAR 0 1
29166: PPUSH
29167: CALL_OW 12
29171: ARRAY
29172: PPUSH
29173: LD_INT 60
29175: PPUSH
29176: CALL_OW 234
// end ;
29180: PPOPN 1
29182: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29183: LD_EXP 38
29187: PUSH
29188: LD_EXP 68
29192: AND
29193: IFFALSE 29292
29195: GO 29197
29197: DISABLE
29198: LD_INT 0
29200: PPUSH
29201: PPUSH
// begin enable ;
29202: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29203: LD_ADDR_VAR 0 1
29207: PUSH
29208: LD_INT 22
29210: PUSH
29211: LD_OWVAR 2
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 61
29222: PUSH
29223: EMPTY
29224: LIST
29225: PUSH
29226: LD_INT 33
29228: PUSH
29229: LD_INT 2
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: LIST
29240: PPUSH
29241: CALL_OW 69
29245: ST_TO_ADDR
// if not tmp then
29246: LD_VAR 0 1
29250: NOT
29251: IFFALSE 29255
// exit ;
29253: GO 29292
// for i in tmp do
29255: LD_ADDR_VAR 0 2
29259: PUSH
29260: LD_VAR 0 1
29264: PUSH
29265: FOR_IN
29266: IFFALSE 29290
// if IsControledBy ( i ) then
29268: LD_VAR 0 2
29272: PPUSH
29273: CALL_OW 312
29277: IFFALSE 29288
// ComUnlink ( i ) ;
29279: LD_VAR 0 2
29283: PPUSH
29284: CALL_OW 136
29288: GO 29265
29290: POP
29291: POP
// end ;
29292: PPOPN 2
29294: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29295: LD_EXP 38
29299: PUSH
29300: LD_EXP 69
29304: AND
29305: IFFALSE 29445
29307: GO 29309
29309: DISABLE
29310: LD_INT 0
29312: PPUSH
29313: PPUSH
// begin ToLua ( displayPowell(); ) ;
29314: LD_STRING displayPowell();
29316: PPUSH
29317: CALL_OW 559
// uc_side := 0 ;
29321: LD_ADDR_OWVAR 20
29325: PUSH
29326: LD_INT 0
29328: ST_TO_ADDR
// uc_nation := 2 ;
29329: LD_ADDR_OWVAR 21
29333: PUSH
29334: LD_INT 2
29336: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29337: LD_ADDR_OWVAR 37
29341: PUSH
29342: LD_INT 14
29344: ST_TO_ADDR
// vc_engine := engine_siberite ;
29345: LD_ADDR_OWVAR 39
29349: PUSH
29350: LD_INT 3
29352: ST_TO_ADDR
// vc_control := control_apeman ;
29353: LD_ADDR_OWVAR 38
29357: PUSH
29358: LD_INT 5
29360: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29361: LD_ADDR_OWVAR 40
29365: PUSH
29366: LD_INT 29
29368: ST_TO_ADDR
// un := CreateVehicle ;
29369: LD_ADDR_VAR 0 2
29373: PUSH
29374: CALL_OW 45
29378: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29379: LD_VAR 0 2
29383: PPUSH
29384: LD_INT 1
29386: PPUSH
29387: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29391: LD_INT 35
29393: PPUSH
29394: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29398: LD_VAR 0 2
29402: PPUSH
29403: LD_INT 22
29405: PUSH
29406: LD_OWVAR 2
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PPUSH
29415: CALL_OW 69
29419: PPUSH
29420: LD_VAR 0 2
29424: PPUSH
29425: CALL_OW 74
29429: PPUSH
29430: CALL_OW 115
// until IsDead ( un ) ;
29434: LD_VAR 0 2
29438: PPUSH
29439: CALL_OW 301
29443: IFFALSE 29391
// end ;
29445: PPOPN 2
29447: END
// every 0 0$1 trigger StreamModeActive and sStu do
29448: LD_EXP 38
29452: PUSH
29453: LD_EXP 77
29457: AND
29458: IFFALSE 29474
29460: GO 29462
29462: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29463: LD_STRING displayStucuk();
29465: PPUSH
29466: CALL_OW 559
// ResetFog ;
29470: CALL_OW 335
// end ;
29474: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29475: LD_EXP 38
29479: PUSH
29480: LD_EXP 70
29484: AND
29485: IFFALSE 29626
29487: GO 29489
29489: DISABLE
29490: LD_INT 0
29492: PPUSH
29493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29494: LD_ADDR_VAR 0 2
29498: PUSH
29499: LD_INT 22
29501: PUSH
29502: LD_OWVAR 2
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 21
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PPUSH
29525: CALL_OW 69
29529: ST_TO_ADDR
// if not tmp then
29530: LD_VAR 0 2
29534: NOT
29535: IFFALSE 29539
// exit ;
29537: GO 29626
// un := tmp [ rand ( 1 , tmp ) ] ;
29539: LD_ADDR_VAR 0 1
29543: PUSH
29544: LD_VAR 0 2
29548: PUSH
29549: LD_INT 1
29551: PPUSH
29552: LD_VAR 0 2
29556: PPUSH
29557: CALL_OW 12
29561: ARRAY
29562: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29563: LD_VAR 0 1
29567: PPUSH
29568: LD_INT 0
29570: PPUSH
29571: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29575: LD_VAR 0 1
29579: PPUSH
29580: LD_OWVAR 3
29584: PUSH
29585: LD_VAR 0 1
29589: DIFF
29590: PPUSH
29591: LD_VAR 0 1
29595: PPUSH
29596: CALL_OW 74
29600: PPUSH
29601: CALL_OW 115
// wait ( 0 0$20 ) ;
29605: LD_INT 700
29607: PPUSH
29608: CALL_OW 67
// SetSide ( un , your_side ) ;
29612: LD_VAR 0 1
29616: PPUSH
29617: LD_OWVAR 2
29621: PPUSH
29622: CALL_OW 235
// end ;
29626: PPOPN 2
29628: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29629: LD_EXP 38
29633: PUSH
29634: LD_EXP 71
29638: AND
29639: IFFALSE 29745
29641: GO 29643
29643: DISABLE
29644: LD_INT 0
29646: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29647: LD_ADDR_VAR 0 1
29651: PUSH
29652: LD_INT 22
29654: PUSH
29655: LD_OWVAR 2
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 2
29666: PUSH
29667: LD_INT 30
29669: PUSH
29670: LD_INT 0
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 30
29679: PUSH
29680: LD_INT 1
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: LIST
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PPUSH
29696: CALL_OW 69
29700: ST_TO_ADDR
// if not depot then
29701: LD_VAR 0 1
29705: NOT
29706: IFFALSE 29710
// exit ;
29708: GO 29745
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29710: LD_VAR 0 1
29714: PUSH
29715: LD_INT 1
29717: ARRAY
29718: PPUSH
29719: CALL_OW 250
29723: PPUSH
29724: LD_VAR 0 1
29728: PUSH
29729: LD_INT 1
29731: ARRAY
29732: PPUSH
29733: CALL_OW 251
29737: PPUSH
29738: LD_INT 70
29740: PPUSH
29741: CALL_OW 495
// end ;
29745: PPOPN 1
29747: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29748: LD_EXP 38
29752: PUSH
29753: LD_EXP 72
29757: AND
29758: IFFALSE 29969
29760: GO 29762
29762: DISABLE
29763: LD_INT 0
29765: PPUSH
29766: PPUSH
29767: PPUSH
29768: PPUSH
29769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29770: LD_ADDR_VAR 0 5
29774: PUSH
29775: LD_INT 22
29777: PUSH
29778: LD_OWVAR 2
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 21
29789: PUSH
29790: LD_INT 1
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PPUSH
29801: CALL_OW 69
29805: ST_TO_ADDR
// if not tmp then
29806: LD_VAR 0 5
29810: NOT
29811: IFFALSE 29815
// exit ;
29813: GO 29969
// for i in tmp do
29815: LD_ADDR_VAR 0 1
29819: PUSH
29820: LD_VAR 0 5
29824: PUSH
29825: FOR_IN
29826: IFFALSE 29967
// begin d := rand ( 0 , 5 ) ;
29828: LD_ADDR_VAR 0 4
29832: PUSH
29833: LD_INT 0
29835: PPUSH
29836: LD_INT 5
29838: PPUSH
29839: CALL_OW 12
29843: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29844: LD_ADDR_VAR 0 2
29848: PUSH
29849: LD_VAR 0 1
29853: PPUSH
29854: CALL_OW 250
29858: PPUSH
29859: LD_VAR 0 4
29863: PPUSH
29864: LD_INT 3
29866: PPUSH
29867: LD_INT 12
29869: PPUSH
29870: CALL_OW 12
29874: PPUSH
29875: CALL_OW 272
29879: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29880: LD_ADDR_VAR 0 3
29884: PUSH
29885: LD_VAR 0 1
29889: PPUSH
29890: CALL_OW 251
29894: PPUSH
29895: LD_VAR 0 4
29899: PPUSH
29900: LD_INT 3
29902: PPUSH
29903: LD_INT 12
29905: PPUSH
29906: CALL_OW 12
29910: PPUSH
29911: CALL_OW 273
29915: ST_TO_ADDR
// if ValidHex ( x , y ) then
29916: LD_VAR 0 2
29920: PPUSH
29921: LD_VAR 0 3
29925: PPUSH
29926: CALL_OW 488
29930: IFFALSE 29965
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29932: LD_VAR 0 1
29936: PPUSH
29937: LD_VAR 0 2
29941: PPUSH
29942: LD_VAR 0 3
29946: PPUSH
29947: LD_INT 3
29949: PPUSH
29950: LD_INT 6
29952: PPUSH
29953: CALL_OW 12
29957: PPUSH
29958: LD_INT 1
29960: PPUSH
29961: CALL_OW 483
// end ;
29965: GO 29825
29967: POP
29968: POP
// end ;
29969: PPOPN 5
29971: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29972: LD_EXP 38
29976: PUSH
29977: LD_EXP 73
29981: AND
29982: IFFALSE 30076
29984: GO 29986
29986: DISABLE
29987: LD_INT 0
29989: PPUSH
29990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29991: LD_ADDR_VAR 0 2
29995: PUSH
29996: LD_INT 22
29998: PUSH
29999: LD_OWVAR 2
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 32
30010: PUSH
30011: LD_INT 1
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 21
30020: PUSH
30021: LD_INT 2
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: LIST
30032: PPUSH
30033: CALL_OW 69
30037: ST_TO_ADDR
// if not tmp then
30038: LD_VAR 0 2
30042: NOT
30043: IFFALSE 30047
// exit ;
30045: GO 30076
// for i in tmp do
30047: LD_ADDR_VAR 0 1
30051: PUSH
30052: LD_VAR 0 2
30056: PUSH
30057: FOR_IN
30058: IFFALSE 30074
// SetFuel ( i , 0 ) ;
30060: LD_VAR 0 1
30064: PPUSH
30065: LD_INT 0
30067: PPUSH
30068: CALL_OW 240
30072: GO 30057
30074: POP
30075: POP
// end ;
30076: PPOPN 2
30078: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30079: LD_EXP 38
30083: PUSH
30084: LD_EXP 74
30088: AND
30089: IFFALSE 30155
30091: GO 30093
30093: DISABLE
30094: LD_INT 0
30096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30097: LD_ADDR_VAR 0 1
30101: PUSH
30102: LD_INT 22
30104: PUSH
30105: LD_OWVAR 2
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 30
30116: PUSH
30117: LD_INT 29
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PPUSH
30128: CALL_OW 69
30132: ST_TO_ADDR
// if not tmp then
30133: LD_VAR 0 1
30137: NOT
30138: IFFALSE 30142
// exit ;
30140: GO 30155
// DestroyUnit ( tmp [ 1 ] ) ;
30142: LD_VAR 0 1
30146: PUSH
30147: LD_INT 1
30149: ARRAY
30150: PPUSH
30151: CALL_OW 65
// end ;
30155: PPOPN 1
30157: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30158: LD_EXP 38
30162: PUSH
30163: LD_EXP 76
30167: AND
30168: IFFALSE 30297
30170: GO 30172
30172: DISABLE
30173: LD_INT 0
30175: PPUSH
// begin uc_side := 0 ;
30176: LD_ADDR_OWVAR 20
30180: PUSH
30181: LD_INT 0
30183: ST_TO_ADDR
// uc_nation := nation_arabian ;
30184: LD_ADDR_OWVAR 21
30188: PUSH
30189: LD_INT 2
30191: ST_TO_ADDR
// hc_gallery :=  ;
30192: LD_ADDR_OWVAR 33
30196: PUSH
30197: LD_STRING 
30199: ST_TO_ADDR
// hc_name :=  ;
30200: LD_ADDR_OWVAR 26
30204: PUSH
30205: LD_STRING 
30207: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30208: LD_INT 1
30210: PPUSH
30211: LD_INT 11
30213: PPUSH
30214: LD_INT 10
30216: PPUSH
30217: CALL_OW 380
// un := CreateHuman ;
30221: LD_ADDR_VAR 0 1
30225: PUSH
30226: CALL_OW 44
30230: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30231: LD_VAR 0 1
30235: PPUSH
30236: LD_INT 1
30238: PPUSH
30239: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30243: LD_INT 35
30245: PPUSH
30246: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30250: LD_VAR 0 1
30254: PPUSH
30255: LD_INT 22
30257: PUSH
30258: LD_OWVAR 2
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PPUSH
30267: CALL_OW 69
30271: PPUSH
30272: LD_VAR 0 1
30276: PPUSH
30277: CALL_OW 74
30281: PPUSH
30282: CALL_OW 115
// until IsDead ( un ) ;
30286: LD_VAR 0 1
30290: PPUSH
30291: CALL_OW 301
30295: IFFALSE 30243
// end ;
30297: PPOPN 1
30299: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30300: LD_EXP 38
30304: PUSH
30305: LD_EXP 78
30309: AND
30310: IFFALSE 30322
30312: GO 30314
30314: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30315: LD_STRING earthquake(getX(game), 0, 32)
30317: PPUSH
30318: CALL_OW 559
30322: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30323: LD_EXP 38
30327: PUSH
30328: LD_EXP 79
30332: AND
30333: IFFALSE 30424
30335: GO 30337
30337: DISABLE
30338: LD_INT 0
30340: PPUSH
// begin enable ;
30341: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30342: LD_ADDR_VAR 0 1
30346: PUSH
30347: LD_INT 22
30349: PUSH
30350: LD_OWVAR 2
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 21
30361: PUSH
30362: LD_INT 2
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 33
30371: PUSH
30372: LD_INT 3
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: LIST
30383: PPUSH
30384: CALL_OW 69
30388: ST_TO_ADDR
// if not tmp then
30389: LD_VAR 0 1
30393: NOT
30394: IFFALSE 30398
// exit ;
30396: GO 30424
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30398: LD_VAR 0 1
30402: PUSH
30403: LD_INT 1
30405: PPUSH
30406: LD_VAR 0 1
30410: PPUSH
30411: CALL_OW 12
30415: ARRAY
30416: PPUSH
30417: LD_INT 1
30419: PPUSH
30420: CALL_OW 234
// end ;
30424: PPOPN 1
30426: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30427: LD_EXP 38
30431: PUSH
30432: LD_EXP 80
30436: AND
30437: IFFALSE 30578
30439: GO 30441
30441: DISABLE
30442: LD_INT 0
30444: PPUSH
30445: PPUSH
30446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30447: LD_ADDR_VAR 0 3
30451: PUSH
30452: LD_INT 22
30454: PUSH
30455: LD_OWVAR 2
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 25
30466: PUSH
30467: LD_INT 1
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PPUSH
30478: CALL_OW 69
30482: ST_TO_ADDR
// if not tmp then
30483: LD_VAR 0 3
30487: NOT
30488: IFFALSE 30492
// exit ;
30490: GO 30578
// un := tmp [ rand ( 1 , tmp ) ] ;
30492: LD_ADDR_VAR 0 2
30496: PUSH
30497: LD_VAR 0 3
30501: PUSH
30502: LD_INT 1
30504: PPUSH
30505: LD_VAR 0 3
30509: PPUSH
30510: CALL_OW 12
30514: ARRAY
30515: ST_TO_ADDR
// if Crawls ( un ) then
30516: LD_VAR 0 2
30520: PPUSH
30521: CALL_OW 318
30525: IFFALSE 30536
// ComWalk ( un ) ;
30527: LD_VAR 0 2
30531: PPUSH
30532: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30536: LD_VAR 0 2
30540: PPUSH
30541: LD_INT 9
30543: PPUSH
30544: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30548: LD_INT 28
30550: PPUSH
30551: LD_OWVAR 2
30555: PPUSH
30556: LD_INT 2
30558: PPUSH
30559: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30563: LD_INT 29
30565: PPUSH
30566: LD_OWVAR 2
30570: PPUSH
30571: LD_INT 2
30573: PPUSH
30574: CALL_OW 322
// end ;
30578: PPOPN 3
30580: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30581: LD_EXP 38
30585: PUSH
30586: LD_EXP 81
30590: AND
30591: IFFALSE 30702
30593: GO 30595
30595: DISABLE
30596: LD_INT 0
30598: PPUSH
30599: PPUSH
30600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30601: LD_ADDR_VAR 0 3
30605: PUSH
30606: LD_INT 22
30608: PUSH
30609: LD_OWVAR 2
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 25
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PPUSH
30632: CALL_OW 69
30636: ST_TO_ADDR
// if not tmp then
30637: LD_VAR 0 3
30641: NOT
30642: IFFALSE 30646
// exit ;
30644: GO 30702
// un := tmp [ rand ( 1 , tmp ) ] ;
30646: LD_ADDR_VAR 0 2
30650: PUSH
30651: LD_VAR 0 3
30655: PUSH
30656: LD_INT 1
30658: PPUSH
30659: LD_VAR 0 3
30663: PPUSH
30664: CALL_OW 12
30668: ARRAY
30669: ST_TO_ADDR
// if Crawls ( un ) then
30670: LD_VAR 0 2
30674: PPUSH
30675: CALL_OW 318
30679: IFFALSE 30690
// ComWalk ( un ) ;
30681: LD_VAR 0 2
30685: PPUSH
30686: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30690: LD_VAR 0 2
30694: PPUSH
30695: LD_INT 8
30697: PPUSH
30698: CALL_OW 336
// end ;
30702: PPOPN 3
30704: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30705: LD_EXP 38
30709: PUSH
30710: LD_EXP 82
30714: AND
30715: IFFALSE 30859
30717: GO 30719
30719: DISABLE
30720: LD_INT 0
30722: PPUSH
30723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30724: LD_ADDR_VAR 0 2
30728: PUSH
30729: LD_INT 22
30731: PUSH
30732: LD_OWVAR 2
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 21
30743: PUSH
30744: LD_INT 2
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 2
30753: PUSH
30754: LD_INT 34
30756: PUSH
30757: LD_INT 12
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 34
30766: PUSH
30767: LD_INT 51
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 34
30776: PUSH
30777: LD_INT 32
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: LIST
30794: PPUSH
30795: CALL_OW 69
30799: ST_TO_ADDR
// if not tmp then
30800: LD_VAR 0 2
30804: NOT
30805: IFFALSE 30809
// exit ;
30807: GO 30859
// for i in tmp do
30809: LD_ADDR_VAR 0 1
30813: PUSH
30814: LD_VAR 0 2
30818: PUSH
30819: FOR_IN
30820: IFFALSE 30857
// if GetCargo ( i , mat_artifact ) = 0 then
30822: LD_VAR 0 1
30826: PPUSH
30827: LD_INT 4
30829: PPUSH
30830: CALL_OW 289
30834: PUSH
30835: LD_INT 0
30837: EQUAL
30838: IFFALSE 30855
// SetCargo ( i , mat_siberit , 100 ) ;
30840: LD_VAR 0 1
30844: PPUSH
30845: LD_INT 3
30847: PPUSH
30848: LD_INT 100
30850: PPUSH
30851: CALL_OW 290
30855: GO 30819
30857: POP
30858: POP
// end ;
30859: PPOPN 2
30861: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30862: LD_EXP 38
30866: PUSH
30867: LD_EXP 83
30871: AND
30872: IFFALSE 31055
30874: GO 30876
30876: DISABLE
30877: LD_INT 0
30879: PPUSH
30880: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30881: LD_ADDR_VAR 0 2
30885: PUSH
30886: LD_INT 22
30888: PUSH
30889: LD_OWVAR 2
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PPUSH
30898: CALL_OW 69
30902: ST_TO_ADDR
// if not tmp then
30903: LD_VAR 0 2
30907: NOT
30908: IFFALSE 30912
// exit ;
30910: GO 31055
// for i := 1 to 2 do
30912: LD_ADDR_VAR 0 1
30916: PUSH
30917: DOUBLE
30918: LD_INT 1
30920: DEC
30921: ST_TO_ADDR
30922: LD_INT 2
30924: PUSH
30925: FOR_TO
30926: IFFALSE 31053
// begin uc_side := your_side ;
30928: LD_ADDR_OWVAR 20
30932: PUSH
30933: LD_OWVAR 2
30937: ST_TO_ADDR
// uc_nation := nation_american ;
30938: LD_ADDR_OWVAR 21
30942: PUSH
30943: LD_INT 1
30945: ST_TO_ADDR
// vc_chassis := us_morphling ;
30946: LD_ADDR_OWVAR 37
30950: PUSH
30951: LD_INT 5
30953: ST_TO_ADDR
// vc_engine := engine_siberite ;
30954: LD_ADDR_OWVAR 39
30958: PUSH
30959: LD_INT 3
30961: ST_TO_ADDR
// vc_control := control_computer ;
30962: LD_ADDR_OWVAR 38
30966: PUSH
30967: LD_INT 3
30969: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30970: LD_ADDR_OWVAR 40
30974: PUSH
30975: LD_INT 10
30977: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30978: LD_VAR 0 2
30982: PUSH
30983: LD_INT 1
30985: ARRAY
30986: PPUSH
30987: CALL_OW 310
30991: NOT
30992: IFFALSE 31039
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30994: CALL_OW 45
30998: PPUSH
30999: LD_VAR 0 2
31003: PUSH
31004: LD_INT 1
31006: ARRAY
31007: PPUSH
31008: CALL_OW 250
31012: PPUSH
31013: LD_VAR 0 2
31017: PUSH
31018: LD_INT 1
31020: ARRAY
31021: PPUSH
31022: CALL_OW 251
31026: PPUSH
31027: LD_INT 12
31029: PPUSH
31030: LD_INT 1
31032: PPUSH
31033: CALL_OW 50
31037: GO 31051
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31039: CALL_OW 45
31043: PPUSH
31044: LD_INT 1
31046: PPUSH
31047: CALL_OW 51
// end ;
31051: GO 30925
31053: POP
31054: POP
// end ;
31055: PPOPN 2
31057: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31058: LD_EXP 38
31062: PUSH
31063: LD_EXP 84
31067: AND
31068: IFFALSE 31290
31070: GO 31072
31072: DISABLE
31073: LD_INT 0
31075: PPUSH
31076: PPUSH
31077: PPUSH
31078: PPUSH
31079: PPUSH
31080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31081: LD_ADDR_VAR 0 6
31085: PUSH
31086: LD_INT 22
31088: PUSH
31089: LD_OWVAR 2
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 21
31100: PUSH
31101: LD_INT 1
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 3
31110: PUSH
31111: LD_INT 23
31113: PUSH
31114: LD_INT 0
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: LIST
31129: PPUSH
31130: CALL_OW 69
31134: ST_TO_ADDR
// if not tmp then
31135: LD_VAR 0 6
31139: NOT
31140: IFFALSE 31144
// exit ;
31142: GO 31290
// s1 := rand ( 1 , 4 ) ;
31144: LD_ADDR_VAR 0 2
31148: PUSH
31149: LD_INT 1
31151: PPUSH
31152: LD_INT 4
31154: PPUSH
31155: CALL_OW 12
31159: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31160: LD_ADDR_VAR 0 4
31164: PUSH
31165: LD_VAR 0 6
31169: PUSH
31170: LD_INT 1
31172: ARRAY
31173: PPUSH
31174: LD_VAR 0 2
31178: PPUSH
31179: CALL_OW 259
31183: ST_TO_ADDR
// if s1 = 1 then
31184: LD_VAR 0 2
31188: PUSH
31189: LD_INT 1
31191: EQUAL
31192: IFFALSE 31212
// s2 := rand ( 2 , 4 ) else
31194: LD_ADDR_VAR 0 3
31198: PUSH
31199: LD_INT 2
31201: PPUSH
31202: LD_INT 4
31204: PPUSH
31205: CALL_OW 12
31209: ST_TO_ADDR
31210: GO 31220
// s2 := 1 ;
31212: LD_ADDR_VAR 0 3
31216: PUSH
31217: LD_INT 1
31219: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31220: LD_ADDR_VAR 0 5
31224: PUSH
31225: LD_VAR 0 6
31229: PUSH
31230: LD_INT 1
31232: ARRAY
31233: PPUSH
31234: LD_VAR 0 3
31238: PPUSH
31239: CALL_OW 259
31243: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31244: LD_VAR 0 6
31248: PUSH
31249: LD_INT 1
31251: ARRAY
31252: PPUSH
31253: LD_VAR 0 2
31257: PPUSH
31258: LD_VAR 0 5
31262: PPUSH
31263: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31267: LD_VAR 0 6
31271: PUSH
31272: LD_INT 1
31274: ARRAY
31275: PPUSH
31276: LD_VAR 0 3
31280: PPUSH
31281: LD_VAR 0 4
31285: PPUSH
31286: CALL_OW 237
// end ;
31290: PPOPN 6
31292: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31293: LD_EXP 38
31297: PUSH
31298: LD_EXP 85
31302: AND
31303: IFFALSE 31382
31305: GO 31307
31307: DISABLE
31308: LD_INT 0
31310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31311: LD_ADDR_VAR 0 1
31315: PUSH
31316: LD_INT 22
31318: PUSH
31319: LD_OWVAR 2
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 30
31330: PUSH
31331: LD_INT 3
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PPUSH
31342: CALL_OW 69
31346: ST_TO_ADDR
// if not tmp then
31347: LD_VAR 0 1
31351: NOT
31352: IFFALSE 31356
// exit ;
31354: GO 31382
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31356: LD_VAR 0 1
31360: PUSH
31361: LD_INT 1
31363: PPUSH
31364: LD_VAR 0 1
31368: PPUSH
31369: CALL_OW 12
31373: ARRAY
31374: PPUSH
31375: LD_INT 1
31377: PPUSH
31378: CALL_OW 234
// end ;
31382: PPOPN 1
31384: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31385: LD_EXP 38
31389: PUSH
31390: LD_EXP 86
31394: AND
31395: IFFALSE 31507
31397: GO 31399
31399: DISABLE
31400: LD_INT 0
31402: PPUSH
31403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31404: LD_ADDR_VAR 0 2
31408: PUSH
31409: LD_INT 22
31411: PUSH
31412: LD_OWVAR 2
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 2
31423: PUSH
31424: LD_INT 30
31426: PUSH
31427: LD_INT 27
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 30
31436: PUSH
31437: LD_INT 26
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 30
31446: PUSH
31447: LD_INT 28
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PPUSH
31464: CALL_OW 69
31468: ST_TO_ADDR
// if not tmp then
31469: LD_VAR 0 2
31473: NOT
31474: IFFALSE 31478
// exit ;
31476: GO 31507
// for i in tmp do
31478: LD_ADDR_VAR 0 1
31482: PUSH
31483: LD_VAR 0 2
31487: PUSH
31488: FOR_IN
31489: IFFALSE 31505
// SetLives ( i , 1 ) ;
31491: LD_VAR 0 1
31495: PPUSH
31496: LD_INT 1
31498: PPUSH
31499: CALL_OW 234
31503: GO 31488
31505: POP
31506: POP
// end ;
31507: PPOPN 2
31509: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31510: LD_EXP 38
31514: PUSH
31515: LD_EXP 87
31519: AND
31520: IFFALSE 31807
31522: GO 31524
31524: DISABLE
31525: LD_INT 0
31527: PPUSH
31528: PPUSH
31529: PPUSH
// begin i := rand ( 1 , 7 ) ;
31530: LD_ADDR_VAR 0 1
31534: PUSH
31535: LD_INT 1
31537: PPUSH
31538: LD_INT 7
31540: PPUSH
31541: CALL_OW 12
31545: ST_TO_ADDR
// case i of 1 :
31546: LD_VAR 0 1
31550: PUSH
31551: LD_INT 1
31553: DOUBLE
31554: EQUAL
31555: IFTRUE 31559
31557: GO 31569
31559: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31560: LD_STRING earthquake(getX(game), 0, 32)
31562: PPUSH
31563: CALL_OW 559
31567: GO 31807
31569: LD_INT 2
31571: DOUBLE
31572: EQUAL
31573: IFTRUE 31577
31575: GO 31591
31577: POP
// begin ToLua ( displayStucuk(); ) ;
31578: LD_STRING displayStucuk();
31580: PPUSH
31581: CALL_OW 559
// ResetFog ;
31585: CALL_OW 335
// end ; 3 :
31589: GO 31807
31591: LD_INT 3
31593: DOUBLE
31594: EQUAL
31595: IFTRUE 31599
31597: GO 31703
31599: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31600: LD_ADDR_VAR 0 2
31604: PUSH
31605: LD_INT 22
31607: PUSH
31608: LD_OWVAR 2
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 25
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PPUSH
31631: CALL_OW 69
31635: ST_TO_ADDR
// if not tmp then
31636: LD_VAR 0 2
31640: NOT
31641: IFFALSE 31645
// exit ;
31643: GO 31807
// un := tmp [ rand ( 1 , tmp ) ] ;
31645: LD_ADDR_VAR 0 3
31649: PUSH
31650: LD_VAR 0 2
31654: PUSH
31655: LD_INT 1
31657: PPUSH
31658: LD_VAR 0 2
31662: PPUSH
31663: CALL_OW 12
31667: ARRAY
31668: ST_TO_ADDR
// if Crawls ( un ) then
31669: LD_VAR 0 3
31673: PPUSH
31674: CALL_OW 318
31678: IFFALSE 31689
// ComWalk ( un ) ;
31680: LD_VAR 0 3
31684: PPUSH
31685: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31689: LD_VAR 0 3
31693: PPUSH
31694: LD_INT 8
31696: PPUSH
31697: CALL_OW 336
// end ; 4 :
31701: GO 31807
31703: LD_INT 4
31705: DOUBLE
31706: EQUAL
31707: IFTRUE 31711
31709: GO 31785
31711: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31712: LD_ADDR_VAR 0 2
31716: PUSH
31717: LD_INT 22
31719: PUSH
31720: LD_OWVAR 2
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 30
31731: PUSH
31732: LD_INT 29
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PPUSH
31743: CALL_OW 69
31747: ST_TO_ADDR
// if not tmp then
31748: LD_VAR 0 2
31752: NOT
31753: IFFALSE 31757
// exit ;
31755: GO 31807
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31757: LD_VAR 0 2
31761: PUSH
31762: LD_INT 1
31764: ARRAY
31765: PPUSH
31766: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31770: LD_VAR 0 2
31774: PUSH
31775: LD_INT 1
31777: ARRAY
31778: PPUSH
31779: CALL_OW 65
// end ; 5 .. 7 :
31783: GO 31807
31785: LD_INT 5
31787: DOUBLE
31788: GREATEREQUAL
31789: IFFALSE 31797
31791: LD_INT 7
31793: DOUBLE
31794: LESSEQUAL
31795: IFTRUE 31799
31797: GO 31806
31799: POP
// StreamSibBomb ; end ;
31800: CALL 28044 0 0
31804: GO 31807
31806: POP
// end ;
31807: PPOPN 3
31809: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31810: LD_EXP 38
31814: PUSH
31815: LD_EXP 88
31819: AND
31820: IFFALSE 31976
31822: GO 31824
31824: DISABLE
31825: LD_INT 0
31827: PPUSH
31828: PPUSH
31829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31830: LD_ADDR_VAR 0 2
31834: PUSH
31835: LD_INT 81
31837: PUSH
31838: LD_OWVAR 2
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 2
31849: PUSH
31850: LD_INT 21
31852: PUSH
31853: LD_INT 1
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 21
31862: PUSH
31863: LD_INT 2
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: LIST
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PPUSH
31879: CALL_OW 69
31883: ST_TO_ADDR
// if not tmp then
31884: LD_VAR 0 2
31888: NOT
31889: IFFALSE 31893
// exit ;
31891: GO 31976
// p := 0 ;
31893: LD_ADDR_VAR 0 3
31897: PUSH
31898: LD_INT 0
31900: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31901: LD_INT 35
31903: PPUSH
31904: CALL_OW 67
// p := p + 1 ;
31908: LD_ADDR_VAR 0 3
31912: PUSH
31913: LD_VAR 0 3
31917: PUSH
31918: LD_INT 1
31920: PLUS
31921: ST_TO_ADDR
// for i in tmp do
31922: LD_ADDR_VAR 0 1
31926: PUSH
31927: LD_VAR 0 2
31931: PUSH
31932: FOR_IN
31933: IFFALSE 31964
// if GetLives ( i ) < 1000 then
31935: LD_VAR 0 1
31939: PPUSH
31940: CALL_OW 256
31944: PUSH
31945: LD_INT 1000
31947: LESS
31948: IFFALSE 31962
// SetLives ( i , 1000 ) ;
31950: LD_VAR 0 1
31954: PPUSH
31955: LD_INT 1000
31957: PPUSH
31958: CALL_OW 234
31962: GO 31932
31964: POP
31965: POP
// until p > 20 ;
31966: LD_VAR 0 3
31970: PUSH
31971: LD_INT 20
31973: GREATER
31974: IFFALSE 31901
// end ;
31976: PPOPN 3
31978: END
// every 0 0$1 trigger StreamModeActive and sTime do
31979: LD_EXP 38
31983: PUSH
31984: LD_EXP 89
31988: AND
31989: IFFALSE 32024
31991: GO 31993
31993: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31994: LD_INT 28
31996: PPUSH
31997: LD_OWVAR 2
32001: PPUSH
32002: LD_INT 2
32004: PPUSH
32005: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32009: LD_INT 30
32011: PPUSH
32012: LD_OWVAR 2
32016: PPUSH
32017: LD_INT 2
32019: PPUSH
32020: CALL_OW 322
// end ;
32024: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32025: LD_EXP 38
32029: PUSH
32030: LD_EXP 90
32034: AND
32035: IFFALSE 32156
32037: GO 32039
32039: DISABLE
32040: LD_INT 0
32042: PPUSH
32043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32044: LD_ADDR_VAR 0 2
32048: PUSH
32049: LD_INT 22
32051: PUSH
32052: LD_OWVAR 2
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 21
32063: PUSH
32064: LD_INT 1
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 3
32073: PUSH
32074: LD_INT 23
32076: PUSH
32077: LD_INT 0
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: LIST
32092: PPUSH
32093: CALL_OW 69
32097: ST_TO_ADDR
// if not tmp then
32098: LD_VAR 0 2
32102: NOT
32103: IFFALSE 32107
// exit ;
32105: GO 32156
// for i in tmp do
32107: LD_ADDR_VAR 0 1
32111: PUSH
32112: LD_VAR 0 2
32116: PUSH
32117: FOR_IN
32118: IFFALSE 32154
// begin if Crawls ( i ) then
32120: LD_VAR 0 1
32124: PPUSH
32125: CALL_OW 318
32129: IFFALSE 32140
// ComWalk ( i ) ;
32131: LD_VAR 0 1
32135: PPUSH
32136: CALL_OW 138
// SetClass ( i , 2 ) ;
32140: LD_VAR 0 1
32144: PPUSH
32145: LD_INT 2
32147: PPUSH
32148: CALL_OW 336
// end ;
32152: GO 32117
32154: POP
32155: POP
// end ;
32156: PPOPN 2
32158: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32159: LD_EXP 38
32163: PUSH
32164: LD_EXP 91
32168: AND
32169: IFFALSE 32457
32171: GO 32173
32173: DISABLE
32174: LD_INT 0
32176: PPUSH
32177: PPUSH
32178: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32179: LD_OWVAR 2
32183: PPUSH
32184: LD_INT 9
32186: PPUSH
32187: LD_INT 1
32189: PPUSH
32190: LD_INT 1
32192: PPUSH
32193: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32197: LD_INT 9
32199: PPUSH
32200: LD_OWVAR 2
32204: PPUSH
32205: CALL_OW 343
// uc_side := 9 ;
32209: LD_ADDR_OWVAR 20
32213: PUSH
32214: LD_INT 9
32216: ST_TO_ADDR
// uc_nation := 2 ;
32217: LD_ADDR_OWVAR 21
32221: PUSH
32222: LD_INT 2
32224: ST_TO_ADDR
// hc_name := Dark Warrior ;
32225: LD_ADDR_OWVAR 26
32229: PUSH
32230: LD_STRING Dark Warrior
32232: ST_TO_ADDR
// hc_gallery :=  ;
32233: LD_ADDR_OWVAR 33
32237: PUSH
32238: LD_STRING 
32240: ST_TO_ADDR
// hc_noskilllimit := true ;
32241: LD_ADDR_OWVAR 76
32245: PUSH
32246: LD_INT 1
32248: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32249: LD_ADDR_OWVAR 31
32253: PUSH
32254: LD_INT 30
32256: PUSH
32257: LD_INT 30
32259: PUSH
32260: LD_INT 30
32262: PUSH
32263: LD_INT 30
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: ST_TO_ADDR
// un := CreateHuman ;
32272: LD_ADDR_VAR 0 3
32276: PUSH
32277: CALL_OW 44
32281: ST_TO_ADDR
// hc_noskilllimit := false ;
32282: LD_ADDR_OWVAR 76
32286: PUSH
32287: LD_INT 0
32289: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32290: LD_VAR 0 3
32294: PPUSH
32295: LD_INT 1
32297: PPUSH
32298: CALL_OW 51
// ToLua ( playRanger() ) ;
32302: LD_STRING playRanger()
32304: PPUSH
32305: CALL_OW 559
// p := 0 ;
32309: LD_ADDR_VAR 0 2
32313: PUSH
32314: LD_INT 0
32316: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32317: LD_INT 35
32319: PPUSH
32320: CALL_OW 67
// p := p + 1 ;
32324: LD_ADDR_VAR 0 2
32328: PUSH
32329: LD_VAR 0 2
32333: PUSH
32334: LD_INT 1
32336: PLUS
32337: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32338: LD_VAR 0 3
32342: PPUSH
32343: CALL_OW 256
32347: PUSH
32348: LD_INT 1000
32350: LESS
32351: IFFALSE 32365
// SetLives ( un , 1000 ) ;
32353: LD_VAR 0 3
32357: PPUSH
32358: LD_INT 1000
32360: PPUSH
32361: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32365: LD_VAR 0 3
32369: PPUSH
32370: LD_INT 81
32372: PUSH
32373: LD_OWVAR 2
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 91
32384: PUSH
32385: LD_VAR 0 3
32389: PUSH
32390: LD_INT 30
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: LIST
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PPUSH
32402: CALL_OW 69
32406: PPUSH
32407: LD_VAR 0 3
32411: PPUSH
32412: CALL_OW 74
32416: PPUSH
32417: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32421: LD_VAR 0 2
32425: PUSH
32426: LD_INT 80
32428: GREATER
32429: PUSH
32430: LD_VAR 0 3
32434: PPUSH
32435: CALL_OW 301
32439: OR
32440: IFFALSE 32317
// if un then
32442: LD_VAR 0 3
32446: IFFALSE 32457
// RemoveUnit ( un ) ;
32448: LD_VAR 0 3
32452: PPUSH
32453: CALL_OW 64
// end ;
32457: PPOPN 3
32459: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32460: LD_EXP 92
32464: IFFALSE 32580
32466: GO 32468
32468: DISABLE
32469: LD_INT 0
32471: PPUSH
32472: PPUSH
32473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32474: LD_ADDR_VAR 0 2
32478: PUSH
32479: LD_INT 81
32481: PUSH
32482: LD_OWVAR 2
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 21
32493: PUSH
32494: LD_INT 1
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PPUSH
32505: CALL_OW 69
32509: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32510: LD_STRING playComputer()
32512: PPUSH
32513: CALL_OW 559
// if not tmp then
32517: LD_VAR 0 2
32521: NOT
32522: IFFALSE 32526
// exit ;
32524: GO 32580
// for i in tmp do
32526: LD_ADDR_VAR 0 1
32530: PUSH
32531: LD_VAR 0 2
32535: PUSH
32536: FOR_IN
32537: IFFALSE 32578
// for j := 1 to 4 do
32539: LD_ADDR_VAR 0 3
32543: PUSH
32544: DOUBLE
32545: LD_INT 1
32547: DEC
32548: ST_TO_ADDR
32549: LD_INT 4
32551: PUSH
32552: FOR_TO
32553: IFFALSE 32574
// SetSkill ( i , j , 10 ) ;
32555: LD_VAR 0 1
32559: PPUSH
32560: LD_VAR 0 3
32564: PPUSH
32565: LD_INT 10
32567: PPUSH
32568: CALL_OW 237
32572: GO 32552
32574: POP
32575: POP
32576: GO 32536
32578: POP
32579: POP
// end ;
32580: PPOPN 3
32582: END
// every 0 0$1 trigger s30 do var i , tmp ;
32583: LD_EXP 93
32587: IFFALSE 32656
32589: GO 32591
32591: DISABLE
32592: LD_INT 0
32594: PPUSH
32595: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32596: LD_ADDR_VAR 0 2
32600: PUSH
32601: LD_INT 22
32603: PUSH
32604: LD_OWVAR 2
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PPUSH
32613: CALL_OW 69
32617: ST_TO_ADDR
// if not tmp then
32618: LD_VAR 0 2
32622: NOT
32623: IFFALSE 32627
// exit ;
32625: GO 32656
// for i in tmp do
32627: LD_ADDR_VAR 0 1
32631: PUSH
32632: LD_VAR 0 2
32636: PUSH
32637: FOR_IN
32638: IFFALSE 32654
// SetLives ( i , 300 ) ;
32640: LD_VAR 0 1
32644: PPUSH
32645: LD_INT 300
32647: PPUSH
32648: CALL_OW 234
32652: GO 32637
32654: POP
32655: POP
// end ;
32656: PPOPN 2
32658: END
// every 0 0$1 trigger s60 do var i , tmp ;
32659: LD_EXP 94
32663: IFFALSE 32732
32665: GO 32667
32667: DISABLE
32668: LD_INT 0
32670: PPUSH
32671: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32672: LD_ADDR_VAR 0 2
32676: PUSH
32677: LD_INT 22
32679: PUSH
32680: LD_OWVAR 2
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PPUSH
32689: CALL_OW 69
32693: ST_TO_ADDR
// if not tmp then
32694: LD_VAR 0 2
32698: NOT
32699: IFFALSE 32703
// exit ;
32701: GO 32732
// for i in tmp do
32703: LD_ADDR_VAR 0 1
32707: PUSH
32708: LD_VAR 0 2
32712: PUSH
32713: FOR_IN
32714: IFFALSE 32730
// SetLives ( i , 600 ) ;
32716: LD_VAR 0 1
32720: PPUSH
32721: LD_INT 600
32723: PPUSH
32724: CALL_OW 234
32728: GO 32713
32730: POP
32731: POP
// end ;
32732: PPOPN 2
32734: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32735: LD_INT 0
32737: PPUSH
// case cmd of 301 :
32738: LD_VAR 0 1
32742: PUSH
32743: LD_INT 301
32745: DOUBLE
32746: EQUAL
32747: IFTRUE 32751
32749: GO 32783
32751: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32752: LD_VAR 0 6
32756: PPUSH
32757: LD_VAR 0 7
32761: PPUSH
32762: LD_VAR 0 8
32766: PPUSH
32767: LD_VAR 0 4
32771: PPUSH
32772: LD_VAR 0 5
32776: PPUSH
32777: CALL 33992 0 5
32781: GO 32904
32783: LD_INT 302
32785: DOUBLE
32786: EQUAL
32787: IFTRUE 32791
32789: GO 32828
32791: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32792: LD_VAR 0 6
32796: PPUSH
32797: LD_VAR 0 7
32801: PPUSH
32802: LD_VAR 0 8
32806: PPUSH
32807: LD_VAR 0 9
32811: PPUSH
32812: LD_VAR 0 4
32816: PPUSH
32817: LD_VAR 0 5
32821: PPUSH
32822: CALL 34083 0 6
32826: GO 32904
32828: LD_INT 303
32830: DOUBLE
32831: EQUAL
32832: IFTRUE 32836
32834: GO 32873
32836: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32837: LD_VAR 0 6
32841: PPUSH
32842: LD_VAR 0 7
32846: PPUSH
32847: LD_VAR 0 8
32851: PPUSH
32852: LD_VAR 0 9
32856: PPUSH
32857: LD_VAR 0 4
32861: PPUSH
32862: LD_VAR 0 5
32866: PPUSH
32867: CALL 32909 0 6
32871: GO 32904
32873: LD_INT 304
32875: DOUBLE
32876: EQUAL
32877: IFTRUE 32881
32879: GO 32903
32881: POP
// hHackTeleport ( unit , x , y ) ; end ;
32882: LD_VAR 0 2
32886: PPUSH
32887: LD_VAR 0 4
32891: PPUSH
32892: LD_VAR 0 5
32896: PPUSH
32897: CALL 34676 0 3
32901: GO 32904
32903: POP
// end ;
32904: LD_VAR 0 12
32908: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32909: LD_INT 0
32911: PPUSH
32912: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32913: LD_VAR 0 1
32917: PUSH
32918: LD_INT 1
32920: LESS
32921: PUSH
32922: LD_VAR 0 1
32926: PUSH
32927: LD_INT 3
32929: GREATER
32930: OR
32931: PUSH
32932: LD_VAR 0 5
32936: PPUSH
32937: LD_VAR 0 6
32941: PPUSH
32942: CALL_OW 428
32946: OR
32947: IFFALSE 32951
// exit ;
32949: GO 33679
// uc_side := your_side ;
32951: LD_ADDR_OWVAR 20
32955: PUSH
32956: LD_OWVAR 2
32960: ST_TO_ADDR
// uc_nation := nation ;
32961: LD_ADDR_OWVAR 21
32965: PUSH
32966: LD_VAR 0 1
32970: ST_TO_ADDR
// bc_level = 1 ;
32971: LD_ADDR_OWVAR 43
32975: PUSH
32976: LD_INT 1
32978: ST_TO_ADDR
// case btype of 1 :
32979: LD_VAR 0 2
32983: PUSH
32984: LD_INT 1
32986: DOUBLE
32987: EQUAL
32988: IFTRUE 32992
32990: GO 33003
32992: POP
// bc_type := b_depot ; 2 :
32993: LD_ADDR_OWVAR 42
32997: PUSH
32998: LD_INT 0
33000: ST_TO_ADDR
33001: GO 33623
33003: LD_INT 2
33005: DOUBLE
33006: EQUAL
33007: IFTRUE 33011
33009: GO 33022
33011: POP
// bc_type := b_warehouse ; 3 :
33012: LD_ADDR_OWVAR 42
33016: PUSH
33017: LD_INT 1
33019: ST_TO_ADDR
33020: GO 33623
33022: LD_INT 3
33024: DOUBLE
33025: EQUAL
33026: IFTRUE 33030
33028: GO 33041
33030: POP
// bc_type := b_lab ; 4 .. 9 :
33031: LD_ADDR_OWVAR 42
33035: PUSH
33036: LD_INT 6
33038: ST_TO_ADDR
33039: GO 33623
33041: LD_INT 4
33043: DOUBLE
33044: GREATEREQUAL
33045: IFFALSE 33053
33047: LD_INT 9
33049: DOUBLE
33050: LESSEQUAL
33051: IFTRUE 33055
33053: GO 33115
33055: POP
// begin bc_type := b_lab_half ;
33056: LD_ADDR_OWVAR 42
33060: PUSH
33061: LD_INT 7
33063: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33064: LD_ADDR_OWVAR 44
33068: PUSH
33069: LD_INT 10
33071: PUSH
33072: LD_INT 11
33074: PUSH
33075: LD_INT 12
33077: PUSH
33078: LD_INT 15
33080: PUSH
33081: LD_INT 14
33083: PUSH
33084: LD_INT 13
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: PUSH
33095: LD_VAR 0 2
33099: PUSH
33100: LD_INT 3
33102: MINUS
33103: ARRAY
33104: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33105: LD_ADDR_OWVAR 45
33109: PUSH
33110: LD_INT 9
33112: ST_TO_ADDR
// end ; 10 .. 13 :
33113: GO 33623
33115: LD_INT 10
33117: DOUBLE
33118: GREATEREQUAL
33119: IFFALSE 33127
33121: LD_INT 13
33123: DOUBLE
33124: LESSEQUAL
33125: IFTRUE 33129
33127: GO 33206
33129: POP
// begin bc_type := b_lab_full ;
33130: LD_ADDR_OWVAR 42
33134: PUSH
33135: LD_INT 8
33137: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33138: LD_ADDR_OWVAR 44
33142: PUSH
33143: LD_INT 10
33145: PUSH
33146: LD_INT 12
33148: PUSH
33149: LD_INT 14
33151: PUSH
33152: LD_INT 13
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: PUSH
33161: LD_VAR 0 2
33165: PUSH
33166: LD_INT 9
33168: MINUS
33169: ARRAY
33170: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33171: LD_ADDR_OWVAR 45
33175: PUSH
33176: LD_INT 11
33178: PUSH
33179: LD_INT 15
33181: PUSH
33182: LD_INT 12
33184: PUSH
33185: LD_INT 15
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: PUSH
33194: LD_VAR 0 2
33198: PUSH
33199: LD_INT 9
33201: MINUS
33202: ARRAY
33203: ST_TO_ADDR
// end ; 14 :
33204: GO 33623
33206: LD_INT 14
33208: DOUBLE
33209: EQUAL
33210: IFTRUE 33214
33212: GO 33225
33214: POP
// bc_type := b_workshop ; 15 :
33215: LD_ADDR_OWVAR 42
33219: PUSH
33220: LD_INT 2
33222: ST_TO_ADDR
33223: GO 33623
33225: LD_INT 15
33227: DOUBLE
33228: EQUAL
33229: IFTRUE 33233
33231: GO 33244
33233: POP
// bc_type := b_factory ; 16 :
33234: LD_ADDR_OWVAR 42
33238: PUSH
33239: LD_INT 3
33241: ST_TO_ADDR
33242: GO 33623
33244: LD_INT 16
33246: DOUBLE
33247: EQUAL
33248: IFTRUE 33252
33250: GO 33263
33252: POP
// bc_type := b_ext_gun ; 17 :
33253: LD_ADDR_OWVAR 42
33257: PUSH
33258: LD_INT 17
33260: ST_TO_ADDR
33261: GO 33623
33263: LD_INT 17
33265: DOUBLE
33266: EQUAL
33267: IFTRUE 33271
33269: GO 33299
33271: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33272: LD_ADDR_OWVAR 42
33276: PUSH
33277: LD_INT 19
33279: PUSH
33280: LD_INT 23
33282: PUSH
33283: LD_INT 19
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: LIST
33290: PUSH
33291: LD_VAR 0 1
33295: ARRAY
33296: ST_TO_ADDR
33297: GO 33623
33299: LD_INT 18
33301: DOUBLE
33302: EQUAL
33303: IFTRUE 33307
33305: GO 33318
33307: POP
// bc_type := b_ext_radar ; 19 :
33308: LD_ADDR_OWVAR 42
33312: PUSH
33313: LD_INT 20
33315: ST_TO_ADDR
33316: GO 33623
33318: LD_INT 19
33320: DOUBLE
33321: EQUAL
33322: IFTRUE 33326
33324: GO 33337
33326: POP
// bc_type := b_ext_radio ; 20 :
33327: LD_ADDR_OWVAR 42
33331: PUSH
33332: LD_INT 22
33334: ST_TO_ADDR
33335: GO 33623
33337: LD_INT 20
33339: DOUBLE
33340: EQUAL
33341: IFTRUE 33345
33343: GO 33356
33345: POP
// bc_type := b_ext_siberium ; 21 :
33346: LD_ADDR_OWVAR 42
33350: PUSH
33351: LD_INT 21
33353: ST_TO_ADDR
33354: GO 33623
33356: LD_INT 21
33358: DOUBLE
33359: EQUAL
33360: IFTRUE 33364
33362: GO 33375
33364: POP
// bc_type := b_ext_computer ; 22 :
33365: LD_ADDR_OWVAR 42
33369: PUSH
33370: LD_INT 24
33372: ST_TO_ADDR
33373: GO 33623
33375: LD_INT 22
33377: DOUBLE
33378: EQUAL
33379: IFTRUE 33383
33381: GO 33394
33383: POP
// bc_type := b_ext_track ; 23 :
33384: LD_ADDR_OWVAR 42
33388: PUSH
33389: LD_INT 16
33391: ST_TO_ADDR
33392: GO 33623
33394: LD_INT 23
33396: DOUBLE
33397: EQUAL
33398: IFTRUE 33402
33400: GO 33413
33402: POP
// bc_type := b_ext_laser ; 24 :
33403: LD_ADDR_OWVAR 42
33407: PUSH
33408: LD_INT 25
33410: ST_TO_ADDR
33411: GO 33623
33413: LD_INT 24
33415: DOUBLE
33416: EQUAL
33417: IFTRUE 33421
33419: GO 33432
33421: POP
// bc_type := b_control_tower ; 25 :
33422: LD_ADDR_OWVAR 42
33426: PUSH
33427: LD_INT 36
33429: ST_TO_ADDR
33430: GO 33623
33432: LD_INT 25
33434: DOUBLE
33435: EQUAL
33436: IFTRUE 33440
33438: GO 33451
33440: POP
// bc_type := b_breastwork ; 26 :
33441: LD_ADDR_OWVAR 42
33445: PUSH
33446: LD_INT 31
33448: ST_TO_ADDR
33449: GO 33623
33451: LD_INT 26
33453: DOUBLE
33454: EQUAL
33455: IFTRUE 33459
33457: GO 33470
33459: POP
// bc_type := b_bunker ; 27 :
33460: LD_ADDR_OWVAR 42
33464: PUSH
33465: LD_INT 32
33467: ST_TO_ADDR
33468: GO 33623
33470: LD_INT 27
33472: DOUBLE
33473: EQUAL
33474: IFTRUE 33478
33476: GO 33489
33478: POP
// bc_type := b_turret ; 28 :
33479: LD_ADDR_OWVAR 42
33483: PUSH
33484: LD_INT 33
33486: ST_TO_ADDR
33487: GO 33623
33489: LD_INT 28
33491: DOUBLE
33492: EQUAL
33493: IFTRUE 33497
33495: GO 33508
33497: POP
// bc_type := b_armoury ; 29 :
33498: LD_ADDR_OWVAR 42
33502: PUSH
33503: LD_INT 4
33505: ST_TO_ADDR
33506: GO 33623
33508: LD_INT 29
33510: DOUBLE
33511: EQUAL
33512: IFTRUE 33516
33514: GO 33527
33516: POP
// bc_type := b_barracks ; 30 :
33517: LD_ADDR_OWVAR 42
33521: PUSH
33522: LD_INT 5
33524: ST_TO_ADDR
33525: GO 33623
33527: LD_INT 30
33529: DOUBLE
33530: EQUAL
33531: IFTRUE 33535
33533: GO 33546
33535: POP
// bc_type := b_solar_power ; 31 :
33536: LD_ADDR_OWVAR 42
33540: PUSH
33541: LD_INT 27
33543: ST_TO_ADDR
33544: GO 33623
33546: LD_INT 31
33548: DOUBLE
33549: EQUAL
33550: IFTRUE 33554
33552: GO 33565
33554: POP
// bc_type := b_oil_power ; 32 :
33555: LD_ADDR_OWVAR 42
33559: PUSH
33560: LD_INT 26
33562: ST_TO_ADDR
33563: GO 33623
33565: LD_INT 32
33567: DOUBLE
33568: EQUAL
33569: IFTRUE 33573
33571: GO 33584
33573: POP
// bc_type := b_siberite_power ; 33 :
33574: LD_ADDR_OWVAR 42
33578: PUSH
33579: LD_INT 28
33581: ST_TO_ADDR
33582: GO 33623
33584: LD_INT 33
33586: DOUBLE
33587: EQUAL
33588: IFTRUE 33592
33590: GO 33603
33592: POP
// bc_type := b_oil_mine ; 34 :
33593: LD_ADDR_OWVAR 42
33597: PUSH
33598: LD_INT 29
33600: ST_TO_ADDR
33601: GO 33623
33603: LD_INT 34
33605: DOUBLE
33606: EQUAL
33607: IFTRUE 33611
33609: GO 33622
33611: POP
// bc_type := b_siberite_mine ; end ;
33612: LD_ADDR_OWVAR 42
33616: PUSH
33617: LD_INT 30
33619: ST_TO_ADDR
33620: GO 33623
33622: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33623: LD_ADDR_VAR 0 8
33627: PUSH
33628: LD_VAR 0 5
33632: PPUSH
33633: LD_VAR 0 6
33637: PPUSH
33638: LD_VAR 0 3
33642: PPUSH
33643: CALL_OW 47
33647: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33648: LD_OWVAR 42
33652: PUSH
33653: LD_INT 32
33655: PUSH
33656: LD_INT 33
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: IN
33663: IFFALSE 33679
// PlaceWeaponTurret ( b , weapon ) ;
33665: LD_VAR 0 8
33669: PPUSH
33670: LD_VAR 0 4
33674: PPUSH
33675: CALL_OW 431
// end ;
33679: LD_VAR 0 7
33683: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33684: LD_INT 0
33686: PPUSH
33687: PPUSH
33688: PPUSH
33689: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33690: LD_ADDR_VAR 0 4
33694: PUSH
33695: LD_INT 22
33697: PUSH
33698: LD_OWVAR 2
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 2
33709: PUSH
33710: LD_INT 30
33712: PUSH
33713: LD_INT 0
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 30
33722: PUSH
33723: LD_INT 1
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: LIST
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PPUSH
33739: CALL_OW 69
33743: ST_TO_ADDR
// if not tmp then
33744: LD_VAR 0 4
33748: NOT
33749: IFFALSE 33753
// exit ;
33751: GO 33812
// for i in tmp do
33753: LD_ADDR_VAR 0 2
33757: PUSH
33758: LD_VAR 0 4
33762: PUSH
33763: FOR_IN
33764: IFFALSE 33810
// for j = 1 to 3 do
33766: LD_ADDR_VAR 0 3
33770: PUSH
33771: DOUBLE
33772: LD_INT 1
33774: DEC
33775: ST_TO_ADDR
33776: LD_INT 3
33778: PUSH
33779: FOR_TO
33780: IFFALSE 33806
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33782: LD_VAR 0 2
33786: PPUSH
33787: CALL_OW 274
33791: PPUSH
33792: LD_VAR 0 3
33796: PPUSH
33797: LD_INT 99999
33799: PPUSH
33800: CALL_OW 277
33804: GO 33779
33806: POP
33807: POP
33808: GO 33763
33810: POP
33811: POP
// end ;
33812: LD_VAR 0 1
33816: RET
// export function hHackSetLevel10 ; var i , j ; begin
33817: LD_INT 0
33819: PPUSH
33820: PPUSH
33821: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33822: LD_ADDR_VAR 0 2
33826: PUSH
33827: LD_INT 21
33829: PUSH
33830: LD_INT 1
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PPUSH
33837: CALL_OW 69
33841: PUSH
33842: FOR_IN
33843: IFFALSE 33895
// if IsSelected ( i ) then
33845: LD_VAR 0 2
33849: PPUSH
33850: CALL_OW 306
33854: IFFALSE 33893
// begin for j := 1 to 4 do
33856: LD_ADDR_VAR 0 3
33860: PUSH
33861: DOUBLE
33862: LD_INT 1
33864: DEC
33865: ST_TO_ADDR
33866: LD_INT 4
33868: PUSH
33869: FOR_TO
33870: IFFALSE 33891
// SetSkill ( i , j , 10 ) ;
33872: LD_VAR 0 2
33876: PPUSH
33877: LD_VAR 0 3
33881: PPUSH
33882: LD_INT 10
33884: PPUSH
33885: CALL_OW 237
33889: GO 33869
33891: POP
33892: POP
// end ;
33893: GO 33842
33895: POP
33896: POP
// end ;
33897: LD_VAR 0 1
33901: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33902: LD_INT 0
33904: PPUSH
33905: PPUSH
33906: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33907: LD_ADDR_VAR 0 2
33911: PUSH
33912: LD_INT 22
33914: PUSH
33915: LD_OWVAR 2
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 21
33926: PUSH
33927: LD_INT 1
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PPUSH
33938: CALL_OW 69
33942: PUSH
33943: FOR_IN
33944: IFFALSE 33985
// begin for j := 1 to 4 do
33946: LD_ADDR_VAR 0 3
33950: PUSH
33951: DOUBLE
33952: LD_INT 1
33954: DEC
33955: ST_TO_ADDR
33956: LD_INT 4
33958: PUSH
33959: FOR_TO
33960: IFFALSE 33981
// SetSkill ( i , j , 10 ) ;
33962: LD_VAR 0 2
33966: PPUSH
33967: LD_VAR 0 3
33971: PPUSH
33972: LD_INT 10
33974: PPUSH
33975: CALL_OW 237
33979: GO 33959
33981: POP
33982: POP
// end ;
33983: GO 33943
33985: POP
33986: POP
// end ;
33987: LD_VAR 0 1
33991: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33992: LD_INT 0
33994: PPUSH
// uc_side := your_side ;
33995: LD_ADDR_OWVAR 20
33999: PUSH
34000: LD_OWVAR 2
34004: ST_TO_ADDR
// uc_nation := nation ;
34005: LD_ADDR_OWVAR 21
34009: PUSH
34010: LD_VAR 0 1
34014: ST_TO_ADDR
// InitHc ;
34015: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34019: LD_INT 0
34021: PPUSH
34022: LD_VAR 0 2
34026: PPUSH
34027: LD_VAR 0 3
34031: PPUSH
34032: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34036: LD_VAR 0 4
34040: PPUSH
34041: LD_VAR 0 5
34045: PPUSH
34046: CALL_OW 428
34050: PUSH
34051: LD_INT 0
34053: EQUAL
34054: IFFALSE 34078
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34056: CALL_OW 44
34060: PPUSH
34061: LD_VAR 0 4
34065: PPUSH
34066: LD_VAR 0 5
34070: PPUSH
34071: LD_INT 1
34073: PPUSH
34074: CALL_OW 48
// end ;
34078: LD_VAR 0 6
34082: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34083: LD_INT 0
34085: PPUSH
34086: PPUSH
// uc_side := your_side ;
34087: LD_ADDR_OWVAR 20
34091: PUSH
34092: LD_OWVAR 2
34096: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34097: LD_VAR 0 1
34101: PUSH
34102: LD_INT 1
34104: PUSH
34105: LD_INT 2
34107: PUSH
34108: LD_INT 3
34110: PUSH
34111: LD_INT 4
34113: PUSH
34114: LD_INT 5
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: IN
34124: IFFALSE 34136
// uc_nation := nation_american else
34126: LD_ADDR_OWVAR 21
34130: PUSH
34131: LD_INT 1
34133: ST_TO_ADDR
34134: GO 34179
// if chassis in [ 11 , 12 , 13 , 14 ] then
34136: LD_VAR 0 1
34140: PUSH
34141: LD_INT 11
34143: PUSH
34144: LD_INT 12
34146: PUSH
34147: LD_INT 13
34149: PUSH
34150: LD_INT 14
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: IN
34159: IFFALSE 34171
// uc_nation := nation_arabian else
34161: LD_ADDR_OWVAR 21
34165: PUSH
34166: LD_INT 2
34168: ST_TO_ADDR
34169: GO 34179
// uc_nation := nation_russian ;
34171: LD_ADDR_OWVAR 21
34175: PUSH
34176: LD_INT 3
34178: ST_TO_ADDR
// vc_chassis := chassis ;
34179: LD_ADDR_OWVAR 37
34183: PUSH
34184: LD_VAR 0 1
34188: ST_TO_ADDR
// vc_engine := engine ;
34189: LD_ADDR_OWVAR 39
34193: PUSH
34194: LD_VAR 0 2
34198: ST_TO_ADDR
// vc_control := control ;
34199: LD_ADDR_OWVAR 38
34203: PUSH
34204: LD_VAR 0 3
34208: ST_TO_ADDR
// vc_weapon := weapon ;
34209: LD_ADDR_OWVAR 40
34213: PUSH
34214: LD_VAR 0 4
34218: ST_TO_ADDR
// un := CreateVehicle ;
34219: LD_ADDR_VAR 0 8
34223: PUSH
34224: CALL_OW 45
34228: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34229: LD_VAR 0 8
34233: PPUSH
34234: LD_INT 0
34236: PPUSH
34237: LD_INT 5
34239: PPUSH
34240: CALL_OW 12
34244: PPUSH
34245: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34249: LD_VAR 0 8
34253: PPUSH
34254: LD_VAR 0 5
34258: PPUSH
34259: LD_VAR 0 6
34263: PPUSH
34264: LD_INT 1
34266: PPUSH
34267: CALL_OW 48
// end ;
34271: LD_VAR 0 7
34275: RET
// export hInvincible ; every 1 do
34276: GO 34278
34278: DISABLE
// hInvincible := [ ] ;
34279: LD_ADDR_EXP 95
34283: PUSH
34284: EMPTY
34285: ST_TO_ADDR
34286: END
// every 10 do var i ;
34287: GO 34289
34289: DISABLE
34290: LD_INT 0
34292: PPUSH
// begin enable ;
34293: ENABLE
// if not hInvincible then
34294: LD_EXP 95
34298: NOT
34299: IFFALSE 34303
// exit ;
34301: GO 34347
// for i in hInvincible do
34303: LD_ADDR_VAR 0 1
34307: PUSH
34308: LD_EXP 95
34312: PUSH
34313: FOR_IN
34314: IFFALSE 34345
// if GetLives ( i ) < 1000 then
34316: LD_VAR 0 1
34320: PPUSH
34321: CALL_OW 256
34325: PUSH
34326: LD_INT 1000
34328: LESS
34329: IFFALSE 34343
// SetLives ( i , 1000 ) ;
34331: LD_VAR 0 1
34335: PPUSH
34336: LD_INT 1000
34338: PPUSH
34339: CALL_OW 234
34343: GO 34313
34345: POP
34346: POP
// end ;
34347: PPOPN 1
34349: END
// export function hHackInvincible ; var i ; begin
34350: LD_INT 0
34352: PPUSH
34353: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34354: LD_ADDR_VAR 0 2
34358: PUSH
34359: LD_INT 2
34361: PUSH
34362: LD_INT 21
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 21
34374: PUSH
34375: LD_INT 2
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: LIST
34386: PPUSH
34387: CALL_OW 69
34391: PUSH
34392: FOR_IN
34393: IFFALSE 34454
// if IsSelected ( i ) then
34395: LD_VAR 0 2
34399: PPUSH
34400: CALL_OW 306
34404: IFFALSE 34452
// begin if i in hInvincible then
34406: LD_VAR 0 2
34410: PUSH
34411: LD_EXP 95
34415: IN
34416: IFFALSE 34436
// hInvincible := hInvincible diff i else
34418: LD_ADDR_EXP 95
34422: PUSH
34423: LD_EXP 95
34427: PUSH
34428: LD_VAR 0 2
34432: DIFF
34433: ST_TO_ADDR
34434: GO 34452
// hInvincible := hInvincible union i ;
34436: LD_ADDR_EXP 95
34440: PUSH
34441: LD_EXP 95
34445: PUSH
34446: LD_VAR 0 2
34450: UNION
34451: ST_TO_ADDR
// end ;
34452: GO 34392
34454: POP
34455: POP
// end ;
34456: LD_VAR 0 1
34460: RET
// export function hHackInvisible ; var i , j ; begin
34461: LD_INT 0
34463: PPUSH
34464: PPUSH
34465: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34466: LD_ADDR_VAR 0 2
34470: PUSH
34471: LD_INT 21
34473: PUSH
34474: LD_INT 1
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PPUSH
34481: CALL_OW 69
34485: PUSH
34486: FOR_IN
34487: IFFALSE 34511
// if IsSelected ( i ) then
34489: LD_VAR 0 2
34493: PPUSH
34494: CALL_OW 306
34498: IFFALSE 34509
// ComForceInvisible ( i ) ;
34500: LD_VAR 0 2
34504: PPUSH
34505: CALL_OW 496
34509: GO 34486
34511: POP
34512: POP
// end ;
34513: LD_VAR 0 1
34517: RET
// export function hHackChangeYourSide ; begin
34518: LD_INT 0
34520: PPUSH
// if your_side = 8 then
34521: LD_OWVAR 2
34525: PUSH
34526: LD_INT 8
34528: EQUAL
34529: IFFALSE 34541
// your_side := 0 else
34531: LD_ADDR_OWVAR 2
34535: PUSH
34536: LD_INT 0
34538: ST_TO_ADDR
34539: GO 34555
// your_side := your_side + 1 ;
34541: LD_ADDR_OWVAR 2
34545: PUSH
34546: LD_OWVAR 2
34550: PUSH
34551: LD_INT 1
34553: PLUS
34554: ST_TO_ADDR
// end ;
34555: LD_VAR 0 1
34559: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34560: LD_INT 0
34562: PPUSH
34563: PPUSH
34564: PPUSH
// for i in all_units do
34565: LD_ADDR_VAR 0 2
34569: PUSH
34570: LD_OWVAR 3
34574: PUSH
34575: FOR_IN
34576: IFFALSE 34654
// if IsSelected ( i ) then
34578: LD_VAR 0 2
34582: PPUSH
34583: CALL_OW 306
34587: IFFALSE 34652
// begin j := GetSide ( i ) ;
34589: LD_ADDR_VAR 0 3
34593: PUSH
34594: LD_VAR 0 2
34598: PPUSH
34599: CALL_OW 255
34603: ST_TO_ADDR
// if j = 8 then
34604: LD_VAR 0 3
34608: PUSH
34609: LD_INT 8
34611: EQUAL
34612: IFFALSE 34624
// j := 0 else
34614: LD_ADDR_VAR 0 3
34618: PUSH
34619: LD_INT 0
34621: ST_TO_ADDR
34622: GO 34638
// j := j + 1 ;
34624: LD_ADDR_VAR 0 3
34628: PUSH
34629: LD_VAR 0 3
34633: PUSH
34634: LD_INT 1
34636: PLUS
34637: ST_TO_ADDR
// SetSide ( i , j ) ;
34638: LD_VAR 0 2
34642: PPUSH
34643: LD_VAR 0 3
34647: PPUSH
34648: CALL_OW 235
// end ;
34652: GO 34575
34654: POP
34655: POP
// end ;
34656: LD_VAR 0 1
34660: RET
// export function hHackFog ; begin
34661: LD_INT 0
34663: PPUSH
// FogOff ( true ) ;
34664: LD_INT 1
34666: PPUSH
34667: CALL_OW 344
// end ;
34671: LD_VAR 0 1
34675: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34676: LD_INT 0
34678: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34679: LD_VAR 0 1
34683: PPUSH
34684: LD_VAR 0 2
34688: PPUSH
34689: LD_VAR 0 3
34693: PPUSH
34694: LD_INT 1
34696: PPUSH
34697: LD_INT 1
34699: PPUSH
34700: CALL_OW 483
// CenterOnXY ( x , y ) ;
34704: LD_VAR 0 2
34708: PPUSH
34709: LD_VAR 0 3
34713: PPUSH
34714: CALL_OW 84
// end ;
34718: LD_VAR 0 4
34722: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34723: LD_INT 0
34725: PPUSH
34726: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34727: LD_VAR 0 1
34731: NOT
34732: PUSH
34733: LD_VAR 0 2
34737: PPUSH
34738: LD_VAR 0 3
34742: PPUSH
34743: CALL_OW 488
34747: NOT
34748: OR
34749: PUSH
34750: LD_VAR 0 1
34754: PPUSH
34755: CALL_OW 266
34759: PUSH
34760: LD_INT 3
34762: NONEQUAL
34763: PUSH
34764: LD_VAR 0 1
34768: PPUSH
34769: CALL_OW 247
34773: PUSH
34774: LD_INT 1
34776: EQUAL
34777: NOT
34778: AND
34779: OR
34780: IFFALSE 34784
// exit ;
34782: GO 34933
// if GetType ( factory ) = unit_human then
34784: LD_VAR 0 1
34788: PPUSH
34789: CALL_OW 247
34793: PUSH
34794: LD_INT 1
34796: EQUAL
34797: IFFALSE 34814
// factory := IsInUnit ( factory ) ;
34799: LD_ADDR_VAR 0 1
34803: PUSH
34804: LD_VAR 0 1
34808: PPUSH
34809: CALL_OW 310
34813: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34814: LD_VAR 0 1
34818: PPUSH
34819: CALL_OW 266
34823: PUSH
34824: LD_INT 3
34826: NONEQUAL
34827: IFFALSE 34831
// exit ;
34829: GO 34933
// if HexInfo ( x , y ) = factory then
34831: LD_VAR 0 2
34835: PPUSH
34836: LD_VAR 0 3
34840: PPUSH
34841: CALL_OW 428
34845: PUSH
34846: LD_VAR 0 1
34850: EQUAL
34851: IFFALSE 34878
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34853: LD_ADDR_EXP 96
34857: PUSH
34858: LD_EXP 96
34862: PPUSH
34863: LD_VAR 0 1
34867: PPUSH
34868: LD_INT 0
34870: PPUSH
34871: CALL_OW 1
34875: ST_TO_ADDR
34876: GO 34929
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34878: LD_ADDR_EXP 96
34882: PUSH
34883: LD_EXP 96
34887: PPUSH
34888: LD_VAR 0 1
34892: PPUSH
34893: LD_VAR 0 1
34897: PPUSH
34898: CALL_OW 255
34902: PUSH
34903: LD_VAR 0 1
34907: PUSH
34908: LD_VAR 0 2
34912: PUSH
34913: LD_VAR 0 3
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: PPUSH
34924: CALL_OW 1
34928: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34929: CALL 34938 0 0
// end ;
34933: LD_VAR 0 4
34937: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34938: LD_INT 0
34940: PPUSH
34941: PPUSH
34942: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34943: LD_STRING resetFactoryWaypoint();
34945: PPUSH
34946: CALL_OW 559
// if factoryWaypoints then
34950: LD_EXP 96
34954: IFFALSE 35080
// begin list := PrepareArray ( factoryWaypoints ) ;
34956: LD_ADDR_VAR 0 3
34960: PUSH
34961: LD_EXP 96
34965: PPUSH
34966: CALL 82377 0 1
34970: ST_TO_ADDR
// for i := 1 to list do
34971: LD_ADDR_VAR 0 2
34975: PUSH
34976: DOUBLE
34977: LD_INT 1
34979: DEC
34980: ST_TO_ADDR
34981: LD_VAR 0 3
34985: PUSH
34986: FOR_TO
34987: IFFALSE 35078
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34989: LD_STRING setFactoryWaypointXY(
34991: PUSH
34992: LD_VAR 0 3
34996: PUSH
34997: LD_VAR 0 2
35001: ARRAY
35002: PUSH
35003: LD_INT 1
35005: ARRAY
35006: STR
35007: PUSH
35008: LD_STRING ,
35010: STR
35011: PUSH
35012: LD_VAR 0 3
35016: PUSH
35017: LD_VAR 0 2
35021: ARRAY
35022: PUSH
35023: LD_INT 2
35025: ARRAY
35026: STR
35027: PUSH
35028: LD_STRING ,
35030: STR
35031: PUSH
35032: LD_VAR 0 3
35036: PUSH
35037: LD_VAR 0 2
35041: ARRAY
35042: PUSH
35043: LD_INT 3
35045: ARRAY
35046: STR
35047: PUSH
35048: LD_STRING ,
35050: STR
35051: PUSH
35052: LD_VAR 0 3
35056: PUSH
35057: LD_VAR 0 2
35061: ARRAY
35062: PUSH
35063: LD_INT 4
35065: ARRAY
35066: STR
35067: PUSH
35068: LD_STRING )
35070: STR
35071: PPUSH
35072: CALL_OW 559
35076: GO 34986
35078: POP
35079: POP
// end ; end ;
35080: LD_VAR 0 1
35084: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35085: LD_INT 0
35087: PPUSH
// if HexInfo ( x , y ) = warehouse then
35088: LD_VAR 0 2
35092: PPUSH
35093: LD_VAR 0 3
35097: PPUSH
35098: CALL_OW 428
35102: PUSH
35103: LD_VAR 0 1
35107: EQUAL
35108: IFFALSE 35135
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35110: LD_ADDR_EXP 97
35114: PUSH
35115: LD_EXP 97
35119: PPUSH
35120: LD_VAR 0 1
35124: PPUSH
35125: LD_INT 0
35127: PPUSH
35128: CALL_OW 1
35132: ST_TO_ADDR
35133: GO 35186
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35135: LD_ADDR_EXP 97
35139: PUSH
35140: LD_EXP 97
35144: PPUSH
35145: LD_VAR 0 1
35149: PPUSH
35150: LD_VAR 0 1
35154: PPUSH
35155: CALL_OW 255
35159: PUSH
35160: LD_VAR 0 1
35164: PUSH
35165: LD_VAR 0 2
35169: PUSH
35170: LD_VAR 0 3
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: PPUSH
35181: CALL_OW 1
35185: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35186: CALL 35195 0 0
// end ;
35190: LD_VAR 0 4
35194: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35195: LD_INT 0
35197: PPUSH
35198: PPUSH
35199: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35200: LD_STRING resetWarehouseGatheringPoints();
35202: PPUSH
35203: CALL_OW 559
// if warehouseGatheringPoints then
35207: LD_EXP 97
35211: IFFALSE 35337
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35213: LD_ADDR_VAR 0 3
35217: PUSH
35218: LD_EXP 97
35222: PPUSH
35223: CALL 82377 0 1
35227: ST_TO_ADDR
// for i := 1 to list do
35228: LD_ADDR_VAR 0 2
35232: PUSH
35233: DOUBLE
35234: LD_INT 1
35236: DEC
35237: ST_TO_ADDR
35238: LD_VAR 0 3
35242: PUSH
35243: FOR_TO
35244: IFFALSE 35335
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35246: LD_STRING setWarehouseGatheringPointXY(
35248: PUSH
35249: LD_VAR 0 3
35253: PUSH
35254: LD_VAR 0 2
35258: ARRAY
35259: PUSH
35260: LD_INT 1
35262: ARRAY
35263: STR
35264: PUSH
35265: LD_STRING ,
35267: STR
35268: PUSH
35269: LD_VAR 0 3
35273: PUSH
35274: LD_VAR 0 2
35278: ARRAY
35279: PUSH
35280: LD_INT 2
35282: ARRAY
35283: STR
35284: PUSH
35285: LD_STRING ,
35287: STR
35288: PUSH
35289: LD_VAR 0 3
35293: PUSH
35294: LD_VAR 0 2
35298: ARRAY
35299: PUSH
35300: LD_INT 3
35302: ARRAY
35303: STR
35304: PUSH
35305: LD_STRING ,
35307: STR
35308: PUSH
35309: LD_VAR 0 3
35313: PUSH
35314: LD_VAR 0 2
35318: ARRAY
35319: PUSH
35320: LD_INT 4
35322: ARRAY
35323: STR
35324: PUSH
35325: LD_STRING )
35327: STR
35328: PPUSH
35329: CALL_OW 559
35333: GO 35243
35335: POP
35336: POP
// end ; end ;
35337: LD_VAR 0 1
35341: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35342: LD_EXP 97
35346: IFFALSE 36031
35348: GO 35350
35350: DISABLE
35351: LD_INT 0
35353: PPUSH
35354: PPUSH
35355: PPUSH
35356: PPUSH
35357: PPUSH
35358: PPUSH
35359: PPUSH
35360: PPUSH
35361: PPUSH
// begin enable ;
35362: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35363: LD_ADDR_VAR 0 3
35367: PUSH
35368: LD_EXP 97
35372: PPUSH
35373: CALL 82377 0 1
35377: ST_TO_ADDR
// if not list then
35378: LD_VAR 0 3
35382: NOT
35383: IFFALSE 35387
// exit ;
35385: GO 36031
// for i := 1 to list do
35387: LD_ADDR_VAR 0 1
35391: PUSH
35392: DOUBLE
35393: LD_INT 1
35395: DEC
35396: ST_TO_ADDR
35397: LD_VAR 0 3
35401: PUSH
35402: FOR_TO
35403: IFFALSE 36029
// begin depot := list [ i ] [ 2 ] ;
35405: LD_ADDR_VAR 0 8
35409: PUSH
35410: LD_VAR 0 3
35414: PUSH
35415: LD_VAR 0 1
35419: ARRAY
35420: PUSH
35421: LD_INT 2
35423: ARRAY
35424: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35425: LD_ADDR_VAR 0 5
35429: PUSH
35430: LD_VAR 0 3
35434: PUSH
35435: LD_VAR 0 1
35439: ARRAY
35440: PUSH
35441: LD_INT 1
35443: ARRAY
35444: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35445: LD_VAR 0 8
35449: PPUSH
35450: CALL_OW 301
35454: PUSH
35455: LD_VAR 0 5
35459: PUSH
35460: LD_VAR 0 8
35464: PPUSH
35465: CALL_OW 255
35469: NONEQUAL
35470: OR
35471: IFFALSE 35500
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35473: LD_ADDR_EXP 97
35477: PUSH
35478: LD_EXP 97
35482: PPUSH
35483: LD_VAR 0 8
35487: PPUSH
35488: LD_INT 0
35490: PPUSH
35491: CALL_OW 1
35495: ST_TO_ADDR
// exit ;
35496: POP
35497: POP
35498: GO 36031
// end ; x := list [ i ] [ 3 ] ;
35500: LD_ADDR_VAR 0 6
35504: PUSH
35505: LD_VAR 0 3
35509: PUSH
35510: LD_VAR 0 1
35514: ARRAY
35515: PUSH
35516: LD_INT 3
35518: ARRAY
35519: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35520: LD_ADDR_VAR 0 7
35524: PUSH
35525: LD_VAR 0 3
35529: PUSH
35530: LD_VAR 0 1
35534: ARRAY
35535: PUSH
35536: LD_INT 4
35538: ARRAY
35539: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35540: LD_ADDR_VAR 0 9
35544: PUSH
35545: LD_VAR 0 6
35549: PPUSH
35550: LD_VAR 0 7
35554: PPUSH
35555: LD_INT 16
35557: PPUSH
35558: CALL 80965 0 3
35562: ST_TO_ADDR
// if not cratesNearbyPoint then
35563: LD_VAR 0 9
35567: NOT
35568: IFFALSE 35574
// exit ;
35570: POP
35571: POP
35572: GO 36031
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35574: LD_ADDR_VAR 0 4
35578: PUSH
35579: LD_INT 22
35581: PUSH
35582: LD_VAR 0 5
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 3
35593: PUSH
35594: LD_INT 60
35596: PUSH
35597: EMPTY
35598: LIST
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 91
35606: PUSH
35607: LD_VAR 0 8
35611: PUSH
35612: LD_INT 6
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 2
35622: PUSH
35623: LD_INT 25
35625: PUSH
35626: LD_INT 2
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 25
35635: PUSH
35636: LD_INT 16
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: LIST
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: PPUSH
35654: CALL_OW 69
35658: PUSH
35659: LD_VAR 0 8
35663: PPUSH
35664: CALL_OW 313
35668: PPUSH
35669: LD_INT 3
35671: PUSH
35672: LD_INT 60
35674: PUSH
35675: EMPTY
35676: LIST
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 2
35684: PUSH
35685: LD_INT 25
35687: PUSH
35688: LD_INT 2
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 25
35697: PUSH
35698: LD_INT 16
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: LIST
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PPUSH
35714: CALL_OW 72
35718: UNION
35719: ST_TO_ADDR
// if tmp then
35720: LD_VAR 0 4
35724: IFFALSE 35804
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35726: LD_ADDR_VAR 0 4
35730: PUSH
35731: LD_VAR 0 4
35735: PPUSH
35736: LD_INT 3
35738: PPUSH
35739: CALL 78934 0 2
35743: ST_TO_ADDR
// for j in tmp do
35744: LD_ADDR_VAR 0 2
35748: PUSH
35749: LD_VAR 0 4
35753: PUSH
35754: FOR_IN
35755: IFFALSE 35798
// begin if IsInUnit ( j ) then
35757: LD_VAR 0 2
35761: PPUSH
35762: CALL_OW 310
35766: IFFALSE 35777
// ComExit ( j ) ;
35768: LD_VAR 0 2
35772: PPUSH
35773: CALL 79017 0 1
// AddComCollect ( j , x , y ) ;
35777: LD_VAR 0 2
35781: PPUSH
35782: LD_VAR 0 6
35786: PPUSH
35787: LD_VAR 0 7
35791: PPUSH
35792: CALL_OW 177
// end ;
35796: GO 35754
35798: POP
35799: POP
// exit ;
35800: POP
35801: POP
35802: GO 36031
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35804: LD_ADDR_VAR 0 4
35808: PUSH
35809: LD_INT 22
35811: PUSH
35812: LD_VAR 0 5
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 91
35823: PUSH
35824: LD_VAR 0 8
35828: PUSH
35829: LD_INT 8
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 2
35839: PUSH
35840: LD_INT 34
35842: PUSH
35843: LD_INT 12
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 34
35852: PUSH
35853: LD_INT 51
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 34
35862: PUSH
35863: LD_INT 32
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 34
35872: PUSH
35873: LD_INT 89
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: LIST
35891: PPUSH
35892: CALL_OW 69
35896: ST_TO_ADDR
// if tmp then
35897: LD_VAR 0 4
35901: IFFALSE 36027
// begin for j in tmp do
35903: LD_ADDR_VAR 0 2
35907: PUSH
35908: LD_VAR 0 4
35912: PUSH
35913: FOR_IN
35914: IFFALSE 36025
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35916: LD_VAR 0 2
35920: PPUSH
35921: CALL_OW 262
35925: PUSH
35926: LD_INT 3
35928: EQUAL
35929: PUSH
35930: LD_VAR 0 2
35934: PPUSH
35935: CALL_OW 261
35939: PUSH
35940: LD_INT 20
35942: GREATER
35943: OR
35944: PUSH
35945: LD_VAR 0 2
35949: PPUSH
35950: CALL_OW 314
35954: NOT
35955: AND
35956: PUSH
35957: LD_VAR 0 2
35961: PPUSH
35962: CALL_OW 263
35966: PUSH
35967: LD_INT 1
35969: NONEQUAL
35970: PUSH
35971: LD_VAR 0 2
35975: PPUSH
35976: CALL_OW 311
35980: OR
35981: AND
35982: IFFALSE 36023
// begin ComCollect ( j , x , y ) ;
35984: LD_VAR 0 2
35988: PPUSH
35989: LD_VAR 0 6
35993: PPUSH
35994: LD_VAR 0 7
35998: PPUSH
35999: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36003: LD_VAR 0 2
36007: PPUSH
36008: LD_VAR 0 8
36012: PPUSH
36013: CALL_OW 172
// exit ;
36017: POP
36018: POP
36019: POP
36020: POP
36021: GO 36031
// end ;
36023: GO 35913
36025: POP
36026: POP
// end ; end ;
36027: GO 35402
36029: POP
36030: POP
// end ; end_of_file
36031: PPOPN 9
36033: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
36034: LD_INT 0
36036: PPUSH
36037: PPUSH
36038: PPUSH
36039: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
36040: LD_VAR 0 1
36044: PPUSH
36045: CALL_OW 264
36049: PUSH
36050: LD_INT 91
36052: EQUAL
36053: IFFALSE 36125
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36055: LD_INT 68
36057: PPUSH
36058: LD_VAR 0 1
36062: PPUSH
36063: CALL_OW 255
36067: PPUSH
36068: CALL_OW 321
36072: PUSH
36073: LD_INT 2
36075: EQUAL
36076: IFFALSE 36088
// eff := 70 else
36078: LD_ADDR_VAR 0 4
36082: PUSH
36083: LD_INT 70
36085: ST_TO_ADDR
36086: GO 36096
// eff := 30 ;
36088: LD_ADDR_VAR 0 4
36092: PUSH
36093: LD_INT 30
36095: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36096: LD_VAR 0 1
36100: PPUSH
36101: CALL_OW 250
36105: PPUSH
36106: LD_VAR 0 1
36110: PPUSH
36111: CALL_OW 251
36115: PPUSH
36116: LD_VAR 0 4
36120: PPUSH
36121: CALL_OW 495
// end ; end ;
36125: LD_VAR 0 2
36129: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36130: LD_INT 0
36132: PPUSH
// end ;
36133: LD_VAR 0 4
36137: RET
// export function SOS_Command ( cmd ) ; begin
36138: LD_INT 0
36140: PPUSH
// end ;
36141: LD_VAR 0 2
36145: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36146: LD_INT 0
36148: PPUSH
// end ;
36149: LD_VAR 0 6
36153: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
36154: LD_INT 0
36156: PPUSH
36157: PPUSH
// if not vehicle or not factory then
36158: LD_VAR 0 1
36162: NOT
36163: PUSH
36164: LD_VAR 0 2
36168: NOT
36169: OR
36170: IFFALSE 36174
// exit ;
36172: GO 36405
// if factoryWaypoints >= factory then
36174: LD_EXP 96
36178: PUSH
36179: LD_VAR 0 2
36183: GREATEREQUAL
36184: IFFALSE 36405
// if factoryWaypoints [ factory ] then
36186: LD_EXP 96
36190: PUSH
36191: LD_VAR 0 2
36195: ARRAY
36196: IFFALSE 36405
// begin if GetControl ( vehicle ) = control_manual then
36198: LD_VAR 0 1
36202: PPUSH
36203: CALL_OW 263
36207: PUSH
36208: LD_INT 1
36210: EQUAL
36211: IFFALSE 36292
// begin driver := IsDrivenBy ( vehicle ) ;
36213: LD_ADDR_VAR 0 4
36217: PUSH
36218: LD_VAR 0 1
36222: PPUSH
36223: CALL_OW 311
36227: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36228: LD_VAR 0 4
36232: PPUSH
36233: LD_EXP 96
36237: PUSH
36238: LD_VAR 0 2
36242: ARRAY
36243: PUSH
36244: LD_INT 3
36246: ARRAY
36247: PPUSH
36248: LD_EXP 96
36252: PUSH
36253: LD_VAR 0 2
36257: ARRAY
36258: PUSH
36259: LD_INT 4
36261: ARRAY
36262: PPUSH
36263: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36267: LD_VAR 0 4
36271: PPUSH
36272: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36276: LD_VAR 0 4
36280: PPUSH
36281: LD_VAR 0 2
36285: PPUSH
36286: CALL_OW 180
// end else
36290: GO 36405
// if GetControl ( vehicle ) = control_remote then
36292: LD_VAR 0 1
36296: PPUSH
36297: CALL_OW 263
36301: PUSH
36302: LD_INT 2
36304: EQUAL
36305: IFFALSE 36366
// begin wait ( 0 0$2 ) ;
36307: LD_INT 70
36309: PPUSH
36310: CALL_OW 67
// if Connect ( vehicle ) then
36314: LD_VAR 0 1
36318: PPUSH
36319: CALL 49236 0 1
36323: IFFALSE 36364
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36325: LD_VAR 0 1
36329: PPUSH
36330: LD_EXP 96
36334: PUSH
36335: LD_VAR 0 2
36339: ARRAY
36340: PUSH
36341: LD_INT 3
36343: ARRAY
36344: PPUSH
36345: LD_EXP 96
36349: PUSH
36350: LD_VAR 0 2
36354: ARRAY
36355: PUSH
36356: LD_INT 4
36358: ARRAY
36359: PPUSH
36360: CALL_OW 171
// end else
36364: GO 36405
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36366: LD_VAR 0 1
36370: PPUSH
36371: LD_EXP 96
36375: PUSH
36376: LD_VAR 0 2
36380: ARRAY
36381: PUSH
36382: LD_INT 3
36384: ARRAY
36385: PPUSH
36386: LD_EXP 96
36390: PUSH
36391: LD_VAR 0 2
36395: ARRAY
36396: PUSH
36397: LD_INT 4
36399: ARRAY
36400: PPUSH
36401: CALL_OW 171
// end ; end ;
36405: LD_VAR 0 3
36409: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36410: LD_INT 0
36412: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36413: LD_VAR 0 1
36417: PUSH
36418: LD_INT 250
36420: EQUAL
36421: PUSH
36422: LD_VAR 0 2
36426: PPUSH
36427: CALL_OW 264
36431: PUSH
36432: LD_INT 81
36434: EQUAL
36435: AND
36436: IFFALSE 36457
// MinerPlaceMine ( unit , x , y ) ;
36438: LD_VAR 0 2
36442: PPUSH
36443: LD_VAR 0 4
36447: PPUSH
36448: LD_VAR 0 5
36452: PPUSH
36453: CALL 39447 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36457: LD_VAR 0 1
36461: PUSH
36462: LD_INT 251
36464: EQUAL
36465: PUSH
36466: LD_VAR 0 2
36470: PPUSH
36471: CALL_OW 264
36475: PUSH
36476: LD_INT 81
36478: EQUAL
36479: AND
36480: IFFALSE 36501
// MinerDetonateMine ( unit , x , y ) ;
36482: LD_VAR 0 2
36486: PPUSH
36487: LD_VAR 0 4
36491: PPUSH
36492: LD_VAR 0 5
36496: PPUSH
36497: CALL 39722 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36501: LD_VAR 0 1
36505: PUSH
36506: LD_INT 252
36508: EQUAL
36509: PUSH
36510: LD_VAR 0 2
36514: PPUSH
36515: CALL_OW 264
36519: PUSH
36520: LD_INT 81
36522: EQUAL
36523: AND
36524: IFFALSE 36545
// MinerCreateMinefield ( unit , x , y ) ;
36526: LD_VAR 0 2
36530: PPUSH
36531: LD_VAR 0 4
36535: PPUSH
36536: LD_VAR 0 5
36540: PPUSH
36541: CALL 40139 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36545: LD_VAR 0 1
36549: PUSH
36550: LD_INT 253
36552: EQUAL
36553: PUSH
36554: LD_VAR 0 2
36558: PPUSH
36559: CALL_OW 257
36563: PUSH
36564: LD_INT 5
36566: EQUAL
36567: AND
36568: IFFALSE 36589
// ComBinocular ( unit , x , y ) ;
36570: LD_VAR 0 2
36574: PPUSH
36575: LD_VAR 0 4
36579: PPUSH
36580: LD_VAR 0 5
36584: PPUSH
36585: CALL 40508 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36589: LD_VAR 0 1
36593: PUSH
36594: LD_INT 254
36596: EQUAL
36597: PUSH
36598: LD_VAR 0 2
36602: PPUSH
36603: CALL_OW 264
36607: PUSH
36608: LD_INT 99
36610: EQUAL
36611: AND
36612: PUSH
36613: LD_VAR 0 3
36617: PPUSH
36618: CALL_OW 263
36622: PUSH
36623: LD_INT 3
36625: EQUAL
36626: AND
36627: IFFALSE 36643
// HackDestroyVehicle ( unit , selectedUnit ) ;
36629: LD_VAR 0 2
36633: PPUSH
36634: LD_VAR 0 3
36638: PPUSH
36639: CALL 38811 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36643: LD_VAR 0 1
36647: PUSH
36648: LD_INT 255
36650: EQUAL
36651: PUSH
36652: LD_VAR 0 2
36656: PPUSH
36657: CALL_OW 264
36661: PUSH
36662: LD_INT 14
36664: PUSH
36665: LD_INT 53
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: IN
36672: AND
36673: PUSH
36674: LD_VAR 0 4
36678: PPUSH
36679: LD_VAR 0 5
36683: PPUSH
36684: CALL_OW 488
36688: AND
36689: IFFALSE 36713
// CutTreeXYR ( unit , x , y , 12 ) ;
36691: LD_VAR 0 2
36695: PPUSH
36696: LD_VAR 0 4
36700: PPUSH
36701: LD_VAR 0 5
36705: PPUSH
36706: LD_INT 12
36708: PPUSH
36709: CALL 36808 0 4
// if cmd = 256 then
36713: LD_VAR 0 1
36717: PUSH
36718: LD_INT 256
36720: EQUAL
36721: IFFALSE 36742
// SetFactoryWaypoint ( unit , x , y ) ;
36723: LD_VAR 0 2
36727: PPUSH
36728: LD_VAR 0 4
36732: PPUSH
36733: LD_VAR 0 5
36737: PPUSH
36738: CALL 34723 0 3
// if cmd = 257 then
36742: LD_VAR 0 1
36746: PUSH
36747: LD_INT 257
36749: EQUAL
36750: IFFALSE 36771
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36752: LD_VAR 0 2
36756: PPUSH
36757: LD_VAR 0 4
36761: PPUSH
36762: LD_VAR 0 5
36766: PPUSH
36767: CALL 35085 0 3
// if cmd = 258 then
36771: LD_VAR 0 1
36775: PUSH
36776: LD_INT 258
36778: EQUAL
36779: IFFALSE 36803
// BurnTreeXYR ( unit , x , y , 8 ) ;
36781: LD_VAR 0 2
36785: PPUSH
36786: LD_VAR 0 4
36790: PPUSH
36791: LD_VAR 0 5
36795: PPUSH
36796: LD_INT 8
36798: PPUSH
36799: CALL 37202 0 4
// end ;
36803: LD_VAR 0 6
36807: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36808: LD_INT 0
36810: PPUSH
36811: PPUSH
36812: PPUSH
36813: PPUSH
36814: PPUSH
36815: PPUSH
36816: PPUSH
36817: PPUSH
36818: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36819: LD_VAR 0 1
36823: PPUSH
36824: CALL_OW 302
36828: NOT
36829: PUSH
36830: LD_VAR 0 2
36834: PPUSH
36835: LD_VAR 0 3
36839: PPUSH
36840: CALL_OW 488
36844: NOT
36845: OR
36846: PUSH
36847: LD_VAR 0 4
36851: NOT
36852: OR
36853: IFFALSE 36857
// exit ;
36855: GO 37197
// list := [ ] ;
36857: LD_ADDR_VAR 0 13
36861: PUSH
36862: EMPTY
36863: ST_TO_ADDR
// if x - r < 0 then
36864: LD_VAR 0 2
36868: PUSH
36869: LD_VAR 0 4
36873: MINUS
36874: PUSH
36875: LD_INT 0
36877: LESS
36878: IFFALSE 36890
// min_x := 0 else
36880: LD_ADDR_VAR 0 7
36884: PUSH
36885: LD_INT 0
36887: ST_TO_ADDR
36888: GO 36906
// min_x := x - r ;
36890: LD_ADDR_VAR 0 7
36894: PUSH
36895: LD_VAR 0 2
36899: PUSH
36900: LD_VAR 0 4
36904: MINUS
36905: ST_TO_ADDR
// if y - r < 0 then
36906: LD_VAR 0 3
36910: PUSH
36911: LD_VAR 0 4
36915: MINUS
36916: PUSH
36917: LD_INT 0
36919: LESS
36920: IFFALSE 36932
// min_y := 0 else
36922: LD_ADDR_VAR 0 8
36926: PUSH
36927: LD_INT 0
36929: ST_TO_ADDR
36930: GO 36948
// min_y := y - r ;
36932: LD_ADDR_VAR 0 8
36936: PUSH
36937: LD_VAR 0 3
36941: PUSH
36942: LD_VAR 0 4
36946: MINUS
36947: ST_TO_ADDR
// max_x := x + r ;
36948: LD_ADDR_VAR 0 9
36952: PUSH
36953: LD_VAR 0 2
36957: PUSH
36958: LD_VAR 0 4
36962: PLUS
36963: ST_TO_ADDR
// max_y := y + r ;
36964: LD_ADDR_VAR 0 10
36968: PUSH
36969: LD_VAR 0 3
36973: PUSH
36974: LD_VAR 0 4
36978: PLUS
36979: ST_TO_ADDR
// for _x = min_x to max_x do
36980: LD_ADDR_VAR 0 11
36984: PUSH
36985: DOUBLE
36986: LD_VAR 0 7
36990: DEC
36991: ST_TO_ADDR
36992: LD_VAR 0 9
36996: PUSH
36997: FOR_TO
36998: IFFALSE 37115
// for _y = min_y to max_y do
37000: LD_ADDR_VAR 0 12
37004: PUSH
37005: DOUBLE
37006: LD_VAR 0 8
37010: DEC
37011: ST_TO_ADDR
37012: LD_VAR 0 10
37016: PUSH
37017: FOR_TO
37018: IFFALSE 37111
// begin if not ValidHex ( _x , _y ) then
37020: LD_VAR 0 11
37024: PPUSH
37025: LD_VAR 0 12
37029: PPUSH
37030: CALL_OW 488
37034: NOT
37035: IFFALSE 37039
// continue ;
37037: GO 37017
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37039: LD_VAR 0 11
37043: PPUSH
37044: LD_VAR 0 12
37048: PPUSH
37049: CALL_OW 351
37053: PUSH
37054: LD_VAR 0 11
37058: PPUSH
37059: LD_VAR 0 12
37063: PPUSH
37064: CALL_OW 554
37068: AND
37069: IFFALSE 37109
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37071: LD_ADDR_VAR 0 13
37075: PUSH
37076: LD_VAR 0 13
37080: PPUSH
37081: LD_VAR 0 13
37085: PUSH
37086: LD_INT 1
37088: PLUS
37089: PPUSH
37090: LD_VAR 0 11
37094: PUSH
37095: LD_VAR 0 12
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PPUSH
37104: CALL_OW 2
37108: ST_TO_ADDR
// end ;
37109: GO 37017
37111: POP
37112: POP
37113: GO 36997
37115: POP
37116: POP
// if not list then
37117: LD_VAR 0 13
37121: NOT
37122: IFFALSE 37126
// exit ;
37124: GO 37197
// for i in list do
37126: LD_ADDR_VAR 0 6
37130: PUSH
37131: LD_VAR 0 13
37135: PUSH
37136: FOR_IN
37137: IFFALSE 37195
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37139: LD_VAR 0 1
37143: PPUSH
37144: LD_STRING M
37146: PUSH
37147: LD_VAR 0 6
37151: PUSH
37152: LD_INT 1
37154: ARRAY
37155: PUSH
37156: LD_VAR 0 6
37160: PUSH
37161: LD_INT 2
37163: ARRAY
37164: PUSH
37165: LD_INT 0
37167: PUSH
37168: LD_INT 0
37170: PUSH
37171: LD_INT 0
37173: PUSH
37174: LD_INT 0
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: PUSH
37186: EMPTY
37187: LIST
37188: PPUSH
37189: CALL_OW 447
37193: GO 37136
37195: POP
37196: POP
// end ;
37197: LD_VAR 0 5
37201: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37202: LD_INT 0
37204: PPUSH
37205: PPUSH
37206: PPUSH
37207: PPUSH
37208: PPUSH
37209: PPUSH
37210: PPUSH
37211: PPUSH
37212: PPUSH
37213: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37214: LD_VAR 0 1
37218: PPUSH
37219: CALL_OW 302
37223: NOT
37224: PUSH
37225: LD_VAR 0 2
37229: PPUSH
37230: LD_VAR 0 3
37234: PPUSH
37235: CALL_OW 488
37239: NOT
37240: OR
37241: PUSH
37242: LD_VAR 0 4
37246: NOT
37247: OR
37248: IFFALSE 37252
// exit ;
37250: GO 37765
// list := [ ] ;
37252: LD_ADDR_VAR 0 13
37256: PUSH
37257: EMPTY
37258: ST_TO_ADDR
// if x - r < 0 then
37259: LD_VAR 0 2
37263: PUSH
37264: LD_VAR 0 4
37268: MINUS
37269: PUSH
37270: LD_INT 0
37272: LESS
37273: IFFALSE 37285
// min_x := 0 else
37275: LD_ADDR_VAR 0 7
37279: PUSH
37280: LD_INT 0
37282: ST_TO_ADDR
37283: GO 37301
// min_x := x - r ;
37285: LD_ADDR_VAR 0 7
37289: PUSH
37290: LD_VAR 0 2
37294: PUSH
37295: LD_VAR 0 4
37299: MINUS
37300: ST_TO_ADDR
// if y - r < 0 then
37301: LD_VAR 0 3
37305: PUSH
37306: LD_VAR 0 4
37310: MINUS
37311: PUSH
37312: LD_INT 0
37314: LESS
37315: IFFALSE 37327
// min_y := 0 else
37317: LD_ADDR_VAR 0 8
37321: PUSH
37322: LD_INT 0
37324: ST_TO_ADDR
37325: GO 37343
// min_y := y - r ;
37327: LD_ADDR_VAR 0 8
37331: PUSH
37332: LD_VAR 0 3
37336: PUSH
37337: LD_VAR 0 4
37341: MINUS
37342: ST_TO_ADDR
// max_x := x + r ;
37343: LD_ADDR_VAR 0 9
37347: PUSH
37348: LD_VAR 0 2
37352: PUSH
37353: LD_VAR 0 4
37357: PLUS
37358: ST_TO_ADDR
// max_y := y + r ;
37359: LD_ADDR_VAR 0 10
37363: PUSH
37364: LD_VAR 0 3
37368: PUSH
37369: LD_VAR 0 4
37373: PLUS
37374: ST_TO_ADDR
// for _x = min_x to max_x do
37375: LD_ADDR_VAR 0 11
37379: PUSH
37380: DOUBLE
37381: LD_VAR 0 7
37385: DEC
37386: ST_TO_ADDR
37387: LD_VAR 0 9
37391: PUSH
37392: FOR_TO
37393: IFFALSE 37510
// for _y = min_y to max_y do
37395: LD_ADDR_VAR 0 12
37399: PUSH
37400: DOUBLE
37401: LD_VAR 0 8
37405: DEC
37406: ST_TO_ADDR
37407: LD_VAR 0 10
37411: PUSH
37412: FOR_TO
37413: IFFALSE 37506
// begin if not ValidHex ( _x , _y ) then
37415: LD_VAR 0 11
37419: PPUSH
37420: LD_VAR 0 12
37424: PPUSH
37425: CALL_OW 488
37429: NOT
37430: IFFALSE 37434
// continue ;
37432: GO 37412
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37434: LD_VAR 0 11
37438: PPUSH
37439: LD_VAR 0 12
37443: PPUSH
37444: CALL_OW 351
37448: PUSH
37449: LD_VAR 0 11
37453: PPUSH
37454: LD_VAR 0 12
37458: PPUSH
37459: CALL_OW 554
37463: AND
37464: IFFALSE 37504
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37466: LD_ADDR_VAR 0 13
37470: PUSH
37471: LD_VAR 0 13
37475: PPUSH
37476: LD_VAR 0 13
37480: PUSH
37481: LD_INT 1
37483: PLUS
37484: PPUSH
37485: LD_VAR 0 11
37489: PUSH
37490: LD_VAR 0 12
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PPUSH
37499: CALL_OW 2
37503: ST_TO_ADDR
// end ;
37504: GO 37412
37506: POP
37507: POP
37508: GO 37392
37510: POP
37511: POP
// if not list then
37512: LD_VAR 0 13
37516: NOT
37517: IFFALSE 37521
// exit ;
37519: GO 37765
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37521: LD_ADDR_VAR 0 13
37525: PUSH
37526: LD_VAR 0 1
37530: PPUSH
37531: LD_VAR 0 13
37535: PPUSH
37536: LD_INT 1
37538: PPUSH
37539: LD_INT 1
37541: PPUSH
37542: CALL 46378 0 4
37546: ST_TO_ADDR
// ComStop ( flame ) ;
37547: LD_VAR 0 1
37551: PPUSH
37552: CALL_OW 141
// for i in list do
37556: LD_ADDR_VAR 0 6
37560: PUSH
37561: LD_VAR 0 13
37565: PUSH
37566: FOR_IN
37567: IFFALSE 37598
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37569: LD_VAR 0 1
37573: PPUSH
37574: LD_VAR 0 6
37578: PUSH
37579: LD_INT 1
37581: ARRAY
37582: PPUSH
37583: LD_VAR 0 6
37587: PUSH
37588: LD_INT 2
37590: ARRAY
37591: PPUSH
37592: CALL_OW 176
37596: GO 37566
37598: POP
37599: POP
// repeat wait ( 0 0$1 ) ;
37600: LD_INT 35
37602: PPUSH
37603: CALL_OW 67
// task := GetTaskList ( flame ) ;
37607: LD_ADDR_VAR 0 14
37611: PUSH
37612: LD_VAR 0 1
37616: PPUSH
37617: CALL_OW 437
37621: ST_TO_ADDR
// if not task then
37622: LD_VAR 0 14
37626: NOT
37627: IFFALSE 37631
// exit ;
37629: GO 37765
// if task [ 1 ] [ 1 ] <> | then
37631: LD_VAR 0 14
37635: PUSH
37636: LD_INT 1
37638: ARRAY
37639: PUSH
37640: LD_INT 1
37642: ARRAY
37643: PUSH
37644: LD_STRING |
37646: NONEQUAL
37647: IFFALSE 37651
// exit ;
37649: GO 37765
// _x := task [ 1 ] [ 2 ] ;
37651: LD_ADDR_VAR 0 11
37655: PUSH
37656: LD_VAR 0 14
37660: PUSH
37661: LD_INT 1
37663: ARRAY
37664: PUSH
37665: LD_INT 2
37667: ARRAY
37668: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37669: LD_ADDR_VAR 0 12
37673: PUSH
37674: LD_VAR 0 14
37678: PUSH
37679: LD_INT 1
37681: ARRAY
37682: PUSH
37683: LD_INT 3
37685: ARRAY
37686: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37687: LD_VAR 0 11
37691: PPUSH
37692: LD_VAR 0 12
37696: PPUSH
37697: CALL_OW 351
37701: NOT
37702: PUSH
37703: LD_VAR 0 11
37707: PPUSH
37708: LD_VAR 0 12
37712: PPUSH
37713: CALL_OW 554
37717: NOT
37718: OR
37719: IFFALSE 37753
// begin task := Delete ( task , 1 ) ;
37721: LD_ADDR_VAR 0 14
37725: PUSH
37726: LD_VAR 0 14
37730: PPUSH
37731: LD_INT 1
37733: PPUSH
37734: CALL_OW 3
37738: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37739: LD_VAR 0 1
37743: PPUSH
37744: LD_VAR 0 14
37748: PPUSH
37749: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37753: LD_VAR 0 1
37757: PPUSH
37758: CALL_OW 314
37762: NOT
37763: IFFALSE 37600
// end ;
37765: LD_VAR 0 5
37769: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37770: LD_EXP 99
37774: NOT
37775: IFFALSE 37825
37777: GO 37779
37779: DISABLE
// begin initHack := true ;
37780: LD_ADDR_EXP 99
37784: PUSH
37785: LD_INT 1
37787: ST_TO_ADDR
// hackTanks := [ ] ;
37788: LD_ADDR_EXP 100
37792: PUSH
37793: EMPTY
37794: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37795: LD_ADDR_EXP 101
37799: PUSH
37800: EMPTY
37801: ST_TO_ADDR
// hackLimit := 3 ;
37802: LD_ADDR_EXP 102
37806: PUSH
37807: LD_INT 3
37809: ST_TO_ADDR
// hackDist := 12 ;
37810: LD_ADDR_EXP 103
37814: PUSH
37815: LD_INT 12
37817: ST_TO_ADDR
// hackCounter := [ ] ;
37818: LD_ADDR_EXP 104
37822: PUSH
37823: EMPTY
37824: ST_TO_ADDR
// end ;
37825: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37826: LD_EXP 99
37830: PUSH
37831: LD_INT 34
37833: PUSH
37834: LD_INT 99
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PPUSH
37841: CALL_OW 69
37845: AND
37846: IFFALSE 38099
37848: GO 37850
37850: DISABLE
37851: LD_INT 0
37853: PPUSH
37854: PPUSH
// begin enable ;
37855: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37856: LD_ADDR_VAR 0 1
37860: PUSH
37861: LD_INT 34
37863: PUSH
37864: LD_INT 99
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PPUSH
37871: CALL_OW 69
37875: PUSH
37876: FOR_IN
37877: IFFALSE 38097
// begin if not i in hackTanks then
37879: LD_VAR 0 1
37883: PUSH
37884: LD_EXP 100
37888: IN
37889: NOT
37890: IFFALSE 37973
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37892: LD_ADDR_EXP 100
37896: PUSH
37897: LD_EXP 100
37901: PPUSH
37902: LD_EXP 100
37906: PUSH
37907: LD_INT 1
37909: PLUS
37910: PPUSH
37911: LD_VAR 0 1
37915: PPUSH
37916: CALL_OW 1
37920: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37921: LD_ADDR_EXP 101
37925: PUSH
37926: LD_EXP 101
37930: PPUSH
37931: LD_EXP 101
37935: PUSH
37936: LD_INT 1
37938: PLUS
37939: PPUSH
37940: EMPTY
37941: PPUSH
37942: CALL_OW 1
37946: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37947: LD_ADDR_EXP 104
37951: PUSH
37952: LD_EXP 104
37956: PPUSH
37957: LD_EXP 104
37961: PUSH
37962: LD_INT 1
37964: PLUS
37965: PPUSH
37966: EMPTY
37967: PPUSH
37968: CALL_OW 1
37972: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37973: LD_VAR 0 1
37977: PPUSH
37978: CALL_OW 302
37982: NOT
37983: IFFALSE 37996
// begin HackUnlinkAll ( i ) ;
37985: LD_VAR 0 1
37989: PPUSH
37990: CALL 38102 0 1
// continue ;
37994: GO 37876
// end ; HackCheckCapturedStatus ( i ) ;
37996: LD_VAR 0 1
38000: PPUSH
38001: CALL 38545 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38005: LD_ADDR_VAR 0 2
38009: PUSH
38010: LD_INT 81
38012: PUSH
38013: LD_VAR 0 1
38017: PPUSH
38018: CALL_OW 255
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 33
38029: PUSH
38030: LD_INT 3
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 91
38039: PUSH
38040: LD_VAR 0 1
38044: PUSH
38045: LD_EXP 103
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 50
38057: PUSH
38058: EMPTY
38059: LIST
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: PPUSH
38067: CALL_OW 69
38071: ST_TO_ADDR
// if not tmp then
38072: LD_VAR 0 2
38076: NOT
38077: IFFALSE 38081
// continue ;
38079: GO 37876
// HackLink ( i , tmp ) ;
38081: LD_VAR 0 1
38085: PPUSH
38086: LD_VAR 0 2
38090: PPUSH
38091: CALL 38238 0 2
// end ;
38095: GO 37876
38097: POP
38098: POP
// end ;
38099: PPOPN 2
38101: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38102: LD_INT 0
38104: PPUSH
38105: PPUSH
38106: PPUSH
// if not hack in hackTanks then
38107: LD_VAR 0 1
38111: PUSH
38112: LD_EXP 100
38116: IN
38117: NOT
38118: IFFALSE 38122
// exit ;
38120: GO 38233
// index := GetElementIndex ( hackTanks , hack ) ;
38122: LD_ADDR_VAR 0 4
38126: PUSH
38127: LD_EXP 100
38131: PPUSH
38132: LD_VAR 0 1
38136: PPUSH
38137: CALL 45675 0 2
38141: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38142: LD_EXP 101
38146: PUSH
38147: LD_VAR 0 4
38151: ARRAY
38152: IFFALSE 38233
// begin for i in hackTanksCaptured [ index ] do
38154: LD_ADDR_VAR 0 3
38158: PUSH
38159: LD_EXP 101
38163: PUSH
38164: LD_VAR 0 4
38168: ARRAY
38169: PUSH
38170: FOR_IN
38171: IFFALSE 38197
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38173: LD_VAR 0 3
38177: PUSH
38178: LD_INT 1
38180: ARRAY
38181: PPUSH
38182: LD_VAR 0 3
38186: PUSH
38187: LD_INT 2
38189: ARRAY
38190: PPUSH
38191: CALL_OW 235
38195: GO 38170
38197: POP
38198: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38199: LD_ADDR_EXP 101
38203: PUSH
38204: LD_EXP 101
38208: PPUSH
38209: LD_VAR 0 4
38213: PPUSH
38214: EMPTY
38215: PPUSH
38216: CALL_OW 1
38220: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38221: LD_VAR 0 1
38225: PPUSH
38226: LD_INT 0
38228: PPUSH
38229: CALL_OW 505
// end ; end ;
38233: LD_VAR 0 2
38237: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38238: LD_INT 0
38240: PPUSH
38241: PPUSH
38242: PPUSH
// if not hack in hackTanks or not vehicles then
38243: LD_VAR 0 1
38247: PUSH
38248: LD_EXP 100
38252: IN
38253: NOT
38254: PUSH
38255: LD_VAR 0 2
38259: NOT
38260: OR
38261: IFFALSE 38265
// exit ;
38263: GO 38540
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38265: LD_ADDR_VAR 0 2
38269: PUSH
38270: LD_VAR 0 1
38274: PPUSH
38275: LD_VAR 0 2
38279: PPUSH
38280: LD_INT 1
38282: PPUSH
38283: LD_INT 1
38285: PPUSH
38286: CALL 46325 0 4
38290: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38291: LD_ADDR_VAR 0 5
38295: PUSH
38296: LD_EXP 100
38300: PPUSH
38301: LD_VAR 0 1
38305: PPUSH
38306: CALL 45675 0 2
38310: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38311: LD_EXP 101
38315: PUSH
38316: LD_VAR 0 5
38320: ARRAY
38321: PUSH
38322: LD_EXP 102
38326: LESS
38327: IFFALSE 38516
// begin for i := 1 to vehicles do
38329: LD_ADDR_VAR 0 4
38333: PUSH
38334: DOUBLE
38335: LD_INT 1
38337: DEC
38338: ST_TO_ADDR
38339: LD_VAR 0 2
38343: PUSH
38344: FOR_TO
38345: IFFALSE 38514
// begin if hackTanksCaptured [ index ] = hackLimit then
38347: LD_EXP 101
38351: PUSH
38352: LD_VAR 0 5
38356: ARRAY
38357: PUSH
38358: LD_EXP 102
38362: EQUAL
38363: IFFALSE 38367
// break ;
38365: GO 38514
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38367: LD_ADDR_EXP 104
38371: PUSH
38372: LD_EXP 104
38376: PPUSH
38377: LD_VAR 0 5
38381: PPUSH
38382: LD_EXP 104
38386: PUSH
38387: LD_VAR 0 5
38391: ARRAY
38392: PUSH
38393: LD_INT 1
38395: PLUS
38396: PPUSH
38397: CALL_OW 1
38401: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38402: LD_ADDR_EXP 101
38406: PUSH
38407: LD_EXP 101
38411: PPUSH
38412: LD_VAR 0 5
38416: PUSH
38417: LD_EXP 101
38421: PUSH
38422: LD_VAR 0 5
38426: ARRAY
38427: PUSH
38428: LD_INT 1
38430: PLUS
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PPUSH
38436: LD_VAR 0 2
38440: PUSH
38441: LD_VAR 0 4
38445: ARRAY
38446: PUSH
38447: LD_VAR 0 2
38451: PUSH
38452: LD_VAR 0 4
38456: ARRAY
38457: PPUSH
38458: CALL_OW 255
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PPUSH
38467: CALL 45890 0 3
38471: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38472: LD_VAR 0 2
38476: PUSH
38477: LD_VAR 0 4
38481: ARRAY
38482: PPUSH
38483: LD_VAR 0 1
38487: PPUSH
38488: CALL_OW 255
38492: PPUSH
38493: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38497: LD_VAR 0 2
38501: PUSH
38502: LD_VAR 0 4
38506: ARRAY
38507: PPUSH
38508: CALL_OW 141
// end ;
38512: GO 38344
38514: POP
38515: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38516: LD_VAR 0 1
38520: PPUSH
38521: LD_EXP 101
38525: PUSH
38526: LD_VAR 0 5
38530: ARRAY
38531: PUSH
38532: LD_INT 0
38534: PLUS
38535: PPUSH
38536: CALL_OW 505
// end ;
38540: LD_VAR 0 3
38544: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38545: LD_INT 0
38547: PPUSH
38548: PPUSH
38549: PPUSH
38550: PPUSH
// if not hack in hackTanks then
38551: LD_VAR 0 1
38555: PUSH
38556: LD_EXP 100
38560: IN
38561: NOT
38562: IFFALSE 38566
// exit ;
38564: GO 38806
// index := GetElementIndex ( hackTanks , hack ) ;
38566: LD_ADDR_VAR 0 4
38570: PUSH
38571: LD_EXP 100
38575: PPUSH
38576: LD_VAR 0 1
38580: PPUSH
38581: CALL 45675 0 2
38585: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38586: LD_ADDR_VAR 0 3
38590: PUSH
38591: DOUBLE
38592: LD_EXP 101
38596: PUSH
38597: LD_VAR 0 4
38601: ARRAY
38602: INC
38603: ST_TO_ADDR
38604: LD_INT 1
38606: PUSH
38607: FOR_DOWNTO
38608: IFFALSE 38780
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38610: LD_ADDR_VAR 0 5
38614: PUSH
38615: LD_EXP 101
38619: PUSH
38620: LD_VAR 0 4
38624: ARRAY
38625: PUSH
38626: LD_VAR 0 3
38630: ARRAY
38631: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38632: LD_VAR 0 5
38636: PUSH
38637: LD_INT 1
38639: ARRAY
38640: PPUSH
38641: CALL_OW 302
38645: NOT
38646: PUSH
38647: LD_VAR 0 5
38651: PUSH
38652: LD_INT 1
38654: ARRAY
38655: PPUSH
38656: CALL_OW 255
38660: PUSH
38661: LD_VAR 0 1
38665: PPUSH
38666: CALL_OW 255
38670: NONEQUAL
38671: OR
38672: IFFALSE 38778
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38674: LD_VAR 0 5
38678: PUSH
38679: LD_INT 1
38681: ARRAY
38682: PPUSH
38683: CALL_OW 305
38687: PUSH
38688: LD_VAR 0 5
38692: PUSH
38693: LD_INT 1
38695: ARRAY
38696: PPUSH
38697: CALL_OW 255
38701: PUSH
38702: LD_VAR 0 1
38706: PPUSH
38707: CALL_OW 255
38711: EQUAL
38712: AND
38713: IFFALSE 38737
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38715: LD_VAR 0 5
38719: PUSH
38720: LD_INT 1
38722: ARRAY
38723: PPUSH
38724: LD_VAR 0 5
38728: PUSH
38729: LD_INT 2
38731: ARRAY
38732: PPUSH
38733: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38737: LD_ADDR_EXP 101
38741: PUSH
38742: LD_EXP 101
38746: PPUSH
38747: LD_VAR 0 4
38751: PPUSH
38752: LD_EXP 101
38756: PUSH
38757: LD_VAR 0 4
38761: ARRAY
38762: PPUSH
38763: LD_VAR 0 3
38767: PPUSH
38768: CALL_OW 3
38772: PPUSH
38773: CALL_OW 1
38777: ST_TO_ADDR
// end ; end ;
38778: GO 38607
38780: POP
38781: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38782: LD_VAR 0 1
38786: PPUSH
38787: LD_EXP 101
38791: PUSH
38792: LD_VAR 0 4
38796: ARRAY
38797: PUSH
38798: LD_INT 0
38800: PLUS
38801: PPUSH
38802: CALL_OW 505
// end ;
38806: LD_VAR 0 2
38810: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38811: LD_INT 0
38813: PPUSH
38814: PPUSH
38815: PPUSH
38816: PPUSH
// if not hack in hackTanks then
38817: LD_VAR 0 1
38821: PUSH
38822: LD_EXP 100
38826: IN
38827: NOT
38828: IFFALSE 38832
// exit ;
38830: GO 38917
// index := GetElementIndex ( hackTanks , hack ) ;
38832: LD_ADDR_VAR 0 5
38836: PUSH
38837: LD_EXP 100
38841: PPUSH
38842: LD_VAR 0 1
38846: PPUSH
38847: CALL 45675 0 2
38851: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38852: LD_ADDR_VAR 0 4
38856: PUSH
38857: DOUBLE
38858: LD_INT 1
38860: DEC
38861: ST_TO_ADDR
38862: LD_EXP 101
38866: PUSH
38867: LD_VAR 0 5
38871: ARRAY
38872: PUSH
38873: FOR_TO
38874: IFFALSE 38915
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38876: LD_EXP 101
38880: PUSH
38881: LD_VAR 0 5
38885: ARRAY
38886: PUSH
38887: LD_VAR 0 4
38891: ARRAY
38892: PUSH
38893: LD_INT 1
38895: ARRAY
38896: PUSH
38897: LD_VAR 0 2
38901: EQUAL
38902: IFFALSE 38913
// KillUnit ( vehicle ) ;
38904: LD_VAR 0 2
38908: PPUSH
38909: CALL_OW 66
38913: GO 38873
38915: POP
38916: POP
// end ;
38917: LD_VAR 0 3
38921: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38922: LD_EXP 105
38926: NOT
38927: IFFALSE 38962
38929: GO 38931
38931: DISABLE
// begin initMiner := true ;
38932: LD_ADDR_EXP 105
38936: PUSH
38937: LD_INT 1
38939: ST_TO_ADDR
// minersList := [ ] ;
38940: LD_ADDR_EXP 106
38944: PUSH
38945: EMPTY
38946: ST_TO_ADDR
// minerMinesList := [ ] ;
38947: LD_ADDR_EXP 107
38951: PUSH
38952: EMPTY
38953: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38954: LD_ADDR_EXP 108
38958: PUSH
38959: LD_INT 5
38961: ST_TO_ADDR
// end ;
38962: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38963: LD_EXP 105
38967: PUSH
38968: LD_INT 34
38970: PUSH
38971: LD_INT 81
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PPUSH
38978: CALL_OW 69
38982: AND
38983: IFFALSE 39444
38985: GO 38987
38987: DISABLE
38988: LD_INT 0
38990: PPUSH
38991: PPUSH
38992: PPUSH
38993: PPUSH
// begin enable ;
38994: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38995: LD_ADDR_VAR 0 1
38999: PUSH
39000: LD_INT 34
39002: PUSH
39003: LD_INT 81
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PPUSH
39010: CALL_OW 69
39014: PUSH
39015: FOR_IN
39016: IFFALSE 39088
// begin if not i in minersList then
39018: LD_VAR 0 1
39022: PUSH
39023: LD_EXP 106
39027: IN
39028: NOT
39029: IFFALSE 39086
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39031: LD_ADDR_EXP 106
39035: PUSH
39036: LD_EXP 106
39040: PPUSH
39041: LD_EXP 106
39045: PUSH
39046: LD_INT 1
39048: PLUS
39049: PPUSH
39050: LD_VAR 0 1
39054: PPUSH
39055: CALL_OW 1
39059: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39060: LD_ADDR_EXP 107
39064: PUSH
39065: LD_EXP 107
39069: PPUSH
39070: LD_EXP 107
39074: PUSH
39075: LD_INT 1
39077: PLUS
39078: PPUSH
39079: EMPTY
39080: PPUSH
39081: CALL_OW 1
39085: ST_TO_ADDR
// end end ;
39086: GO 39015
39088: POP
39089: POP
// for i := minerMinesList downto 1 do
39090: LD_ADDR_VAR 0 1
39094: PUSH
39095: DOUBLE
39096: LD_EXP 107
39100: INC
39101: ST_TO_ADDR
39102: LD_INT 1
39104: PUSH
39105: FOR_DOWNTO
39106: IFFALSE 39442
// begin if IsLive ( minersList [ i ] ) then
39108: LD_EXP 106
39112: PUSH
39113: LD_VAR 0 1
39117: ARRAY
39118: PPUSH
39119: CALL_OW 300
39123: IFFALSE 39151
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39125: LD_EXP 106
39129: PUSH
39130: LD_VAR 0 1
39134: ARRAY
39135: PPUSH
39136: LD_EXP 107
39140: PUSH
39141: LD_VAR 0 1
39145: ARRAY
39146: PPUSH
39147: CALL_OW 505
// if not minerMinesList [ i ] then
39151: LD_EXP 107
39155: PUSH
39156: LD_VAR 0 1
39160: ARRAY
39161: NOT
39162: IFFALSE 39166
// continue ;
39164: GO 39105
// for j := minerMinesList [ i ] downto 1 do
39166: LD_ADDR_VAR 0 2
39170: PUSH
39171: DOUBLE
39172: LD_EXP 107
39176: PUSH
39177: LD_VAR 0 1
39181: ARRAY
39182: INC
39183: ST_TO_ADDR
39184: LD_INT 1
39186: PUSH
39187: FOR_DOWNTO
39188: IFFALSE 39438
// begin side := GetSide ( minersList [ i ] ) ;
39190: LD_ADDR_VAR 0 3
39194: PUSH
39195: LD_EXP 106
39199: PUSH
39200: LD_VAR 0 1
39204: ARRAY
39205: PPUSH
39206: CALL_OW 255
39210: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39211: LD_ADDR_VAR 0 4
39215: PUSH
39216: LD_EXP 107
39220: PUSH
39221: LD_VAR 0 1
39225: ARRAY
39226: PUSH
39227: LD_VAR 0 2
39231: ARRAY
39232: PUSH
39233: LD_INT 1
39235: ARRAY
39236: PPUSH
39237: LD_EXP 107
39241: PUSH
39242: LD_VAR 0 1
39246: ARRAY
39247: PUSH
39248: LD_VAR 0 2
39252: ARRAY
39253: PUSH
39254: LD_INT 2
39256: ARRAY
39257: PPUSH
39258: CALL_OW 428
39262: ST_TO_ADDR
// if not tmp then
39263: LD_VAR 0 4
39267: NOT
39268: IFFALSE 39272
// continue ;
39270: GO 39187
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39272: LD_VAR 0 4
39276: PUSH
39277: LD_INT 81
39279: PUSH
39280: LD_VAR 0 3
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PPUSH
39289: CALL_OW 69
39293: IN
39294: PUSH
39295: LD_EXP 107
39299: PUSH
39300: LD_VAR 0 1
39304: ARRAY
39305: PUSH
39306: LD_VAR 0 2
39310: ARRAY
39311: PUSH
39312: LD_INT 1
39314: ARRAY
39315: PPUSH
39316: LD_EXP 107
39320: PUSH
39321: LD_VAR 0 1
39325: ARRAY
39326: PUSH
39327: LD_VAR 0 2
39331: ARRAY
39332: PUSH
39333: LD_INT 2
39335: ARRAY
39336: PPUSH
39337: CALL_OW 458
39341: AND
39342: IFFALSE 39436
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39344: LD_EXP 107
39348: PUSH
39349: LD_VAR 0 1
39353: ARRAY
39354: PUSH
39355: LD_VAR 0 2
39359: ARRAY
39360: PUSH
39361: LD_INT 1
39363: ARRAY
39364: PPUSH
39365: LD_EXP 107
39369: PUSH
39370: LD_VAR 0 1
39374: ARRAY
39375: PUSH
39376: LD_VAR 0 2
39380: ARRAY
39381: PUSH
39382: LD_INT 2
39384: ARRAY
39385: PPUSH
39386: LD_VAR 0 3
39390: PPUSH
39391: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39395: LD_ADDR_EXP 107
39399: PUSH
39400: LD_EXP 107
39404: PPUSH
39405: LD_VAR 0 1
39409: PPUSH
39410: LD_EXP 107
39414: PUSH
39415: LD_VAR 0 1
39419: ARRAY
39420: PPUSH
39421: LD_VAR 0 2
39425: PPUSH
39426: CALL_OW 3
39430: PPUSH
39431: CALL_OW 1
39435: ST_TO_ADDR
// end ; end ;
39436: GO 39187
39438: POP
39439: POP
// end ;
39440: GO 39105
39442: POP
39443: POP
// end ;
39444: PPOPN 4
39446: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39447: LD_INT 0
39449: PPUSH
39450: PPUSH
// result := false ;
39451: LD_ADDR_VAR 0 4
39455: PUSH
39456: LD_INT 0
39458: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39459: LD_VAR 0 1
39463: PPUSH
39464: CALL_OW 264
39468: PUSH
39469: LD_INT 81
39471: EQUAL
39472: NOT
39473: IFFALSE 39477
// exit ;
39475: GO 39717
// index := GetElementIndex ( minersList , unit ) ;
39477: LD_ADDR_VAR 0 5
39481: PUSH
39482: LD_EXP 106
39486: PPUSH
39487: LD_VAR 0 1
39491: PPUSH
39492: CALL 45675 0 2
39496: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39497: LD_EXP 107
39501: PUSH
39502: LD_VAR 0 5
39506: ARRAY
39507: PUSH
39508: LD_EXP 108
39512: GREATEREQUAL
39513: IFFALSE 39517
// exit ;
39515: GO 39717
// ComMoveXY ( unit , x , y ) ;
39517: LD_VAR 0 1
39521: PPUSH
39522: LD_VAR 0 2
39526: PPUSH
39527: LD_VAR 0 3
39531: PPUSH
39532: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39536: LD_INT 35
39538: PPUSH
39539: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39543: LD_VAR 0 1
39547: PPUSH
39548: LD_VAR 0 2
39552: PPUSH
39553: LD_VAR 0 3
39557: PPUSH
39558: CALL 77416 0 3
39562: NOT
39563: PUSH
39564: LD_VAR 0 1
39568: PPUSH
39569: CALL_OW 314
39573: AND
39574: IFFALSE 39578
// exit ;
39576: GO 39717
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39578: LD_VAR 0 2
39582: PPUSH
39583: LD_VAR 0 3
39587: PPUSH
39588: CALL_OW 428
39592: PUSH
39593: LD_VAR 0 1
39597: EQUAL
39598: PUSH
39599: LD_VAR 0 1
39603: PPUSH
39604: CALL_OW 314
39608: NOT
39609: AND
39610: IFFALSE 39536
// PlaySoundXY ( x , y , PlantMine ) ;
39612: LD_VAR 0 2
39616: PPUSH
39617: LD_VAR 0 3
39621: PPUSH
39622: LD_STRING PlantMine
39624: PPUSH
39625: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39629: LD_VAR 0 2
39633: PPUSH
39634: LD_VAR 0 3
39638: PPUSH
39639: LD_VAR 0 1
39643: PPUSH
39644: CALL_OW 255
39648: PPUSH
39649: LD_INT 0
39651: PPUSH
39652: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39656: LD_ADDR_EXP 107
39660: PUSH
39661: LD_EXP 107
39665: PPUSH
39666: LD_VAR 0 5
39670: PUSH
39671: LD_EXP 107
39675: PUSH
39676: LD_VAR 0 5
39680: ARRAY
39681: PUSH
39682: LD_INT 1
39684: PLUS
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PPUSH
39690: LD_VAR 0 2
39694: PUSH
39695: LD_VAR 0 3
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PPUSH
39704: CALL 45890 0 3
39708: ST_TO_ADDR
// result := true ;
39709: LD_ADDR_VAR 0 4
39713: PUSH
39714: LD_INT 1
39716: ST_TO_ADDR
// end ;
39717: LD_VAR 0 4
39721: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39722: LD_INT 0
39724: PPUSH
39725: PPUSH
39726: PPUSH
// if not unit in minersList then
39727: LD_VAR 0 1
39731: PUSH
39732: LD_EXP 106
39736: IN
39737: NOT
39738: IFFALSE 39742
// exit ;
39740: GO 40134
// index := GetElementIndex ( minersList , unit ) ;
39742: LD_ADDR_VAR 0 6
39746: PUSH
39747: LD_EXP 106
39751: PPUSH
39752: LD_VAR 0 1
39756: PPUSH
39757: CALL 45675 0 2
39761: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39762: LD_ADDR_VAR 0 5
39766: PUSH
39767: DOUBLE
39768: LD_EXP 107
39772: PUSH
39773: LD_VAR 0 6
39777: ARRAY
39778: INC
39779: ST_TO_ADDR
39780: LD_INT 1
39782: PUSH
39783: FOR_DOWNTO
39784: IFFALSE 39945
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39786: LD_EXP 107
39790: PUSH
39791: LD_VAR 0 6
39795: ARRAY
39796: PUSH
39797: LD_VAR 0 5
39801: ARRAY
39802: PUSH
39803: LD_INT 1
39805: ARRAY
39806: PUSH
39807: LD_VAR 0 2
39811: EQUAL
39812: PUSH
39813: LD_EXP 107
39817: PUSH
39818: LD_VAR 0 6
39822: ARRAY
39823: PUSH
39824: LD_VAR 0 5
39828: ARRAY
39829: PUSH
39830: LD_INT 2
39832: ARRAY
39833: PUSH
39834: LD_VAR 0 3
39838: EQUAL
39839: AND
39840: IFFALSE 39943
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39842: LD_EXP 107
39846: PUSH
39847: LD_VAR 0 6
39851: ARRAY
39852: PUSH
39853: LD_VAR 0 5
39857: ARRAY
39858: PUSH
39859: LD_INT 1
39861: ARRAY
39862: PPUSH
39863: LD_EXP 107
39867: PUSH
39868: LD_VAR 0 6
39872: ARRAY
39873: PUSH
39874: LD_VAR 0 5
39878: ARRAY
39879: PUSH
39880: LD_INT 2
39882: ARRAY
39883: PPUSH
39884: LD_VAR 0 1
39888: PPUSH
39889: CALL_OW 255
39893: PPUSH
39894: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39898: LD_ADDR_EXP 107
39902: PUSH
39903: LD_EXP 107
39907: PPUSH
39908: LD_VAR 0 6
39912: PPUSH
39913: LD_EXP 107
39917: PUSH
39918: LD_VAR 0 6
39922: ARRAY
39923: PPUSH
39924: LD_VAR 0 5
39928: PPUSH
39929: CALL_OW 3
39933: PPUSH
39934: CALL_OW 1
39938: ST_TO_ADDR
// exit ;
39939: POP
39940: POP
39941: GO 40134
// end ; end ;
39943: GO 39783
39945: POP
39946: POP
// for i := minerMinesList [ index ] downto 1 do
39947: LD_ADDR_VAR 0 5
39951: PUSH
39952: DOUBLE
39953: LD_EXP 107
39957: PUSH
39958: LD_VAR 0 6
39962: ARRAY
39963: INC
39964: ST_TO_ADDR
39965: LD_INT 1
39967: PUSH
39968: FOR_DOWNTO
39969: IFFALSE 40132
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39971: LD_EXP 107
39975: PUSH
39976: LD_VAR 0 6
39980: ARRAY
39981: PUSH
39982: LD_VAR 0 5
39986: ARRAY
39987: PUSH
39988: LD_INT 1
39990: ARRAY
39991: PPUSH
39992: LD_EXP 107
39996: PUSH
39997: LD_VAR 0 6
40001: ARRAY
40002: PUSH
40003: LD_VAR 0 5
40007: ARRAY
40008: PUSH
40009: LD_INT 2
40011: ARRAY
40012: PPUSH
40013: LD_VAR 0 2
40017: PPUSH
40018: LD_VAR 0 3
40022: PPUSH
40023: CALL_OW 298
40027: PUSH
40028: LD_INT 6
40030: LESS
40031: IFFALSE 40130
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40033: LD_EXP 107
40037: PUSH
40038: LD_VAR 0 6
40042: ARRAY
40043: PUSH
40044: LD_VAR 0 5
40048: ARRAY
40049: PUSH
40050: LD_INT 1
40052: ARRAY
40053: PPUSH
40054: LD_EXP 107
40058: PUSH
40059: LD_VAR 0 6
40063: ARRAY
40064: PUSH
40065: LD_VAR 0 5
40069: ARRAY
40070: PUSH
40071: LD_INT 2
40073: ARRAY
40074: PPUSH
40075: LD_VAR 0 1
40079: PPUSH
40080: CALL_OW 255
40084: PPUSH
40085: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40089: LD_ADDR_EXP 107
40093: PUSH
40094: LD_EXP 107
40098: PPUSH
40099: LD_VAR 0 6
40103: PPUSH
40104: LD_EXP 107
40108: PUSH
40109: LD_VAR 0 6
40113: ARRAY
40114: PPUSH
40115: LD_VAR 0 5
40119: PPUSH
40120: CALL_OW 3
40124: PPUSH
40125: CALL_OW 1
40129: ST_TO_ADDR
// end ; end ;
40130: GO 39968
40132: POP
40133: POP
// end ;
40134: LD_VAR 0 4
40138: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40139: LD_INT 0
40141: PPUSH
40142: PPUSH
40143: PPUSH
40144: PPUSH
40145: PPUSH
40146: PPUSH
40147: PPUSH
40148: PPUSH
40149: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40150: LD_VAR 0 1
40154: PPUSH
40155: CALL_OW 264
40159: PUSH
40160: LD_INT 81
40162: EQUAL
40163: NOT
40164: PUSH
40165: LD_VAR 0 1
40169: PUSH
40170: LD_EXP 106
40174: IN
40175: NOT
40176: OR
40177: IFFALSE 40181
// exit ;
40179: GO 40503
// index := GetElementIndex ( minersList , unit ) ;
40181: LD_ADDR_VAR 0 6
40185: PUSH
40186: LD_EXP 106
40190: PPUSH
40191: LD_VAR 0 1
40195: PPUSH
40196: CALL 45675 0 2
40200: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40201: LD_ADDR_VAR 0 8
40205: PUSH
40206: LD_EXP 108
40210: PUSH
40211: LD_EXP 107
40215: PUSH
40216: LD_VAR 0 6
40220: ARRAY
40221: MINUS
40222: ST_TO_ADDR
// if not minesFreeAmount then
40223: LD_VAR 0 8
40227: NOT
40228: IFFALSE 40232
// exit ;
40230: GO 40503
// tmp := [ ] ;
40232: LD_ADDR_VAR 0 7
40236: PUSH
40237: EMPTY
40238: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40239: LD_ADDR_VAR 0 5
40243: PUSH
40244: DOUBLE
40245: LD_INT 1
40247: DEC
40248: ST_TO_ADDR
40249: LD_VAR 0 8
40253: PUSH
40254: FOR_TO
40255: IFFALSE 40450
// begin _d := rand ( 0 , 5 ) ;
40257: LD_ADDR_VAR 0 11
40261: PUSH
40262: LD_INT 0
40264: PPUSH
40265: LD_INT 5
40267: PPUSH
40268: CALL_OW 12
40272: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40273: LD_ADDR_VAR 0 12
40277: PUSH
40278: LD_INT 2
40280: PPUSH
40281: LD_INT 6
40283: PPUSH
40284: CALL_OW 12
40288: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40289: LD_ADDR_VAR 0 9
40293: PUSH
40294: LD_VAR 0 2
40298: PPUSH
40299: LD_VAR 0 11
40303: PPUSH
40304: LD_VAR 0 12
40308: PPUSH
40309: CALL_OW 272
40313: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40314: LD_ADDR_VAR 0 10
40318: PUSH
40319: LD_VAR 0 3
40323: PPUSH
40324: LD_VAR 0 11
40328: PPUSH
40329: LD_VAR 0 12
40333: PPUSH
40334: CALL_OW 273
40338: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40339: LD_VAR 0 9
40343: PPUSH
40344: LD_VAR 0 10
40348: PPUSH
40349: CALL_OW 488
40353: PUSH
40354: LD_VAR 0 9
40358: PUSH
40359: LD_VAR 0 10
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_VAR 0 7
40372: IN
40373: NOT
40374: AND
40375: PUSH
40376: LD_VAR 0 9
40380: PPUSH
40381: LD_VAR 0 10
40385: PPUSH
40386: CALL_OW 458
40390: NOT
40391: AND
40392: IFFALSE 40434
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40394: LD_ADDR_VAR 0 7
40398: PUSH
40399: LD_VAR 0 7
40403: PPUSH
40404: LD_VAR 0 7
40408: PUSH
40409: LD_INT 1
40411: PLUS
40412: PPUSH
40413: LD_VAR 0 9
40417: PUSH
40418: LD_VAR 0 10
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PPUSH
40427: CALL_OW 1
40431: ST_TO_ADDR
40432: GO 40448
// i := i - 1 ;
40434: LD_ADDR_VAR 0 5
40438: PUSH
40439: LD_VAR 0 5
40443: PUSH
40444: LD_INT 1
40446: MINUS
40447: ST_TO_ADDR
// end ;
40448: GO 40254
40450: POP
40451: POP
// for i in tmp do
40452: LD_ADDR_VAR 0 5
40456: PUSH
40457: LD_VAR 0 7
40461: PUSH
40462: FOR_IN
40463: IFFALSE 40501
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40465: LD_VAR 0 1
40469: PPUSH
40470: LD_VAR 0 5
40474: PUSH
40475: LD_INT 1
40477: ARRAY
40478: PPUSH
40479: LD_VAR 0 5
40483: PUSH
40484: LD_INT 2
40486: ARRAY
40487: PPUSH
40488: CALL 39447 0 3
40492: NOT
40493: IFFALSE 40499
// exit ;
40495: POP
40496: POP
40497: GO 40503
40499: GO 40462
40501: POP
40502: POP
// end ;
40503: LD_VAR 0 4
40507: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40508: LD_INT 0
40510: PPUSH
40511: PPUSH
40512: PPUSH
40513: PPUSH
40514: PPUSH
40515: PPUSH
40516: PPUSH
// if not GetClass ( unit ) = class_sniper then
40517: LD_VAR 0 1
40521: PPUSH
40522: CALL_OW 257
40526: PUSH
40527: LD_INT 5
40529: EQUAL
40530: NOT
40531: IFFALSE 40535
// exit ;
40533: GO 40923
// dist := 8 ;
40535: LD_ADDR_VAR 0 5
40539: PUSH
40540: LD_INT 8
40542: ST_TO_ADDR
// viewRange := 12 ;
40543: LD_ADDR_VAR 0 7
40547: PUSH
40548: LD_INT 12
40550: ST_TO_ADDR
// side := GetSide ( unit ) ;
40551: LD_ADDR_VAR 0 6
40555: PUSH
40556: LD_VAR 0 1
40560: PPUSH
40561: CALL_OW 255
40565: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40566: LD_INT 61
40568: PPUSH
40569: LD_VAR 0 6
40573: PPUSH
40574: CALL_OW 321
40578: PUSH
40579: LD_INT 2
40581: EQUAL
40582: IFFALSE 40592
// viewRange := 16 ;
40584: LD_ADDR_VAR 0 7
40588: PUSH
40589: LD_INT 16
40591: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40592: LD_VAR 0 1
40596: PPUSH
40597: LD_VAR 0 2
40601: PPUSH
40602: LD_VAR 0 3
40606: PPUSH
40607: CALL_OW 297
40611: PUSH
40612: LD_VAR 0 5
40616: GREATER
40617: IFFALSE 40696
// begin ComMoveXY ( unit , x , y ) ;
40619: LD_VAR 0 1
40623: PPUSH
40624: LD_VAR 0 2
40628: PPUSH
40629: LD_VAR 0 3
40633: PPUSH
40634: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40638: LD_INT 35
40640: PPUSH
40641: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40645: LD_VAR 0 1
40649: PPUSH
40650: LD_VAR 0 2
40654: PPUSH
40655: LD_VAR 0 3
40659: PPUSH
40660: CALL 77416 0 3
40664: NOT
40665: IFFALSE 40669
// exit ;
40667: GO 40923
// until GetDistUnitXY ( unit , x , y ) < dist ;
40669: LD_VAR 0 1
40673: PPUSH
40674: LD_VAR 0 2
40678: PPUSH
40679: LD_VAR 0 3
40683: PPUSH
40684: CALL_OW 297
40688: PUSH
40689: LD_VAR 0 5
40693: LESS
40694: IFFALSE 40638
// end ; ComTurnXY ( unit , x , y ) ;
40696: LD_VAR 0 1
40700: PPUSH
40701: LD_VAR 0 2
40705: PPUSH
40706: LD_VAR 0 3
40710: PPUSH
40711: CALL_OW 118
// wait ( 5 ) ;
40715: LD_INT 5
40717: PPUSH
40718: CALL_OW 67
// _d := GetDir ( unit ) ;
40722: LD_ADDR_VAR 0 10
40726: PUSH
40727: LD_VAR 0 1
40731: PPUSH
40732: CALL_OW 254
40736: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40737: LD_ADDR_VAR 0 8
40741: PUSH
40742: LD_VAR 0 1
40746: PPUSH
40747: CALL_OW 250
40751: PPUSH
40752: LD_VAR 0 10
40756: PPUSH
40757: LD_VAR 0 5
40761: PPUSH
40762: CALL_OW 272
40766: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40767: LD_ADDR_VAR 0 9
40771: PUSH
40772: LD_VAR 0 1
40776: PPUSH
40777: CALL_OW 251
40781: PPUSH
40782: LD_VAR 0 10
40786: PPUSH
40787: LD_VAR 0 5
40791: PPUSH
40792: CALL_OW 273
40796: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40797: LD_VAR 0 8
40801: PPUSH
40802: LD_VAR 0 9
40806: PPUSH
40807: CALL_OW 488
40811: NOT
40812: IFFALSE 40816
// exit ;
40814: GO 40923
// ComAnimCustom ( unit , 1 ) ;
40816: LD_VAR 0 1
40820: PPUSH
40821: LD_INT 1
40823: PPUSH
40824: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40828: LD_VAR 0 8
40832: PPUSH
40833: LD_VAR 0 9
40837: PPUSH
40838: LD_VAR 0 6
40842: PPUSH
40843: LD_VAR 0 7
40847: PPUSH
40848: CALL_OW 330
// repeat wait ( 1 ) ;
40852: LD_INT 1
40854: PPUSH
40855: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40859: LD_VAR 0 1
40863: PPUSH
40864: CALL_OW 316
40868: PUSH
40869: LD_VAR 0 1
40873: PPUSH
40874: CALL_OW 314
40878: OR
40879: PUSH
40880: LD_VAR 0 1
40884: PPUSH
40885: CALL_OW 302
40889: NOT
40890: OR
40891: PUSH
40892: LD_VAR 0 1
40896: PPUSH
40897: CALL_OW 301
40901: OR
40902: IFFALSE 40852
// RemoveSeeing ( _x , _y , side ) ;
40904: LD_VAR 0 8
40908: PPUSH
40909: LD_VAR 0 9
40913: PPUSH
40914: LD_VAR 0 6
40918: PPUSH
40919: CALL_OW 331
// end ; end_of_file
40923: LD_VAR 0 4
40927: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40928: LD_INT 0
40930: PPUSH
40931: PPUSH
// if exist_mode then
40932: LD_VAR 0 2
40936: IFFALSE 40961
// unit := CreateCharacter ( prefix & ident ) else
40938: LD_ADDR_VAR 0 5
40942: PUSH
40943: LD_VAR 0 3
40947: PUSH
40948: LD_VAR 0 1
40952: STR
40953: PPUSH
40954: CALL_OW 34
40958: ST_TO_ADDR
40959: GO 40976
// unit := NewCharacter ( ident ) ;
40961: LD_ADDR_VAR 0 5
40965: PUSH
40966: LD_VAR 0 1
40970: PPUSH
40971: CALL_OW 25
40975: ST_TO_ADDR
// result := unit ;
40976: LD_ADDR_VAR 0 4
40980: PUSH
40981: LD_VAR 0 5
40985: ST_TO_ADDR
// end ;
40986: LD_VAR 0 4
40990: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40991: LD_INT 0
40993: PPUSH
40994: PPUSH
// if not side or not nation then
40995: LD_VAR 0 1
40999: NOT
41000: PUSH
41001: LD_VAR 0 2
41005: NOT
41006: OR
41007: IFFALSE 41011
// exit ;
41009: GO 41779
// case nation of nation_american :
41011: LD_VAR 0 2
41015: PUSH
41016: LD_INT 1
41018: DOUBLE
41019: EQUAL
41020: IFTRUE 41024
41022: GO 41238
41024: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41025: LD_ADDR_VAR 0 4
41029: PUSH
41030: LD_INT 35
41032: PUSH
41033: LD_INT 45
41035: PUSH
41036: LD_INT 46
41038: PUSH
41039: LD_INT 47
41041: PUSH
41042: LD_INT 82
41044: PUSH
41045: LD_INT 83
41047: PUSH
41048: LD_INT 84
41050: PUSH
41051: LD_INT 85
41053: PUSH
41054: LD_INT 86
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: LD_INT 2
41062: PUSH
41063: LD_INT 6
41065: PUSH
41066: LD_INT 15
41068: PUSH
41069: LD_INT 16
41071: PUSH
41072: LD_INT 7
41074: PUSH
41075: LD_INT 12
41077: PUSH
41078: LD_INT 13
41080: PUSH
41081: LD_INT 10
41083: PUSH
41084: LD_INT 14
41086: PUSH
41087: LD_INT 20
41089: PUSH
41090: LD_INT 21
41092: PUSH
41093: LD_INT 22
41095: PUSH
41096: LD_INT 25
41098: PUSH
41099: LD_INT 32
41101: PUSH
41102: LD_INT 27
41104: PUSH
41105: LD_INT 36
41107: PUSH
41108: LD_INT 69
41110: PUSH
41111: LD_INT 39
41113: PUSH
41114: LD_INT 34
41116: PUSH
41117: LD_INT 40
41119: PUSH
41120: LD_INT 48
41122: PUSH
41123: LD_INT 49
41125: PUSH
41126: LD_INT 50
41128: PUSH
41129: LD_INT 51
41131: PUSH
41132: LD_INT 52
41134: PUSH
41135: LD_INT 53
41137: PUSH
41138: LD_INT 54
41140: PUSH
41141: LD_INT 55
41143: PUSH
41144: LD_INT 56
41146: PUSH
41147: LD_INT 57
41149: PUSH
41150: LD_INT 58
41152: PUSH
41153: LD_INT 59
41155: PUSH
41156: LD_INT 60
41158: PUSH
41159: LD_INT 61
41161: PUSH
41162: LD_INT 62
41164: PUSH
41165: LD_INT 80
41167: PUSH
41168: LD_INT 82
41170: PUSH
41171: LD_INT 83
41173: PUSH
41174: LD_INT 84
41176: PUSH
41177: LD_INT 85
41179: PUSH
41180: LD_INT 86
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: ST_TO_ADDR
41236: GO 41703
41238: LD_INT 2
41240: DOUBLE
41241: EQUAL
41242: IFTRUE 41246
41244: GO 41472
41246: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41247: LD_ADDR_VAR 0 4
41251: PUSH
41252: LD_INT 35
41254: PUSH
41255: LD_INT 45
41257: PUSH
41258: LD_INT 46
41260: PUSH
41261: LD_INT 47
41263: PUSH
41264: LD_INT 82
41266: PUSH
41267: LD_INT 83
41269: PUSH
41270: LD_INT 84
41272: PUSH
41273: LD_INT 85
41275: PUSH
41276: LD_INT 87
41278: PUSH
41279: LD_INT 70
41281: PUSH
41282: LD_INT 1
41284: PUSH
41285: LD_INT 11
41287: PUSH
41288: LD_INT 3
41290: PUSH
41291: LD_INT 4
41293: PUSH
41294: LD_INT 5
41296: PUSH
41297: LD_INT 6
41299: PUSH
41300: LD_INT 15
41302: PUSH
41303: LD_INT 18
41305: PUSH
41306: LD_INT 7
41308: PUSH
41309: LD_INT 17
41311: PUSH
41312: LD_INT 8
41314: PUSH
41315: LD_INT 20
41317: PUSH
41318: LD_INT 21
41320: PUSH
41321: LD_INT 22
41323: PUSH
41324: LD_INT 72
41326: PUSH
41327: LD_INT 26
41329: PUSH
41330: LD_INT 69
41332: PUSH
41333: LD_INT 39
41335: PUSH
41336: LD_INT 40
41338: PUSH
41339: LD_INT 41
41341: PUSH
41342: LD_INT 42
41344: PUSH
41345: LD_INT 43
41347: PUSH
41348: LD_INT 48
41350: PUSH
41351: LD_INT 49
41353: PUSH
41354: LD_INT 50
41356: PUSH
41357: LD_INT 51
41359: PUSH
41360: LD_INT 52
41362: PUSH
41363: LD_INT 53
41365: PUSH
41366: LD_INT 54
41368: PUSH
41369: LD_INT 55
41371: PUSH
41372: LD_INT 56
41374: PUSH
41375: LD_INT 60
41377: PUSH
41378: LD_INT 61
41380: PUSH
41381: LD_INT 62
41383: PUSH
41384: LD_INT 66
41386: PUSH
41387: LD_INT 67
41389: PUSH
41390: LD_INT 68
41392: PUSH
41393: LD_INT 81
41395: PUSH
41396: LD_INT 82
41398: PUSH
41399: LD_INT 83
41401: PUSH
41402: LD_INT 84
41404: PUSH
41405: LD_INT 85
41407: PUSH
41408: LD_INT 87
41410: PUSH
41411: LD_INT 88
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: ST_TO_ADDR
41470: GO 41703
41472: LD_INT 3
41474: DOUBLE
41475: EQUAL
41476: IFTRUE 41480
41478: GO 41702
41480: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41481: LD_ADDR_VAR 0 4
41485: PUSH
41486: LD_INT 46
41488: PUSH
41489: LD_INT 47
41491: PUSH
41492: LD_INT 1
41494: PUSH
41495: LD_INT 2
41497: PUSH
41498: LD_INT 82
41500: PUSH
41501: LD_INT 83
41503: PUSH
41504: LD_INT 84
41506: PUSH
41507: LD_INT 85
41509: PUSH
41510: LD_INT 86
41512: PUSH
41513: LD_INT 11
41515: PUSH
41516: LD_INT 9
41518: PUSH
41519: LD_INT 20
41521: PUSH
41522: LD_INT 19
41524: PUSH
41525: LD_INT 21
41527: PUSH
41528: LD_INT 24
41530: PUSH
41531: LD_INT 22
41533: PUSH
41534: LD_INT 25
41536: PUSH
41537: LD_INT 28
41539: PUSH
41540: LD_INT 29
41542: PUSH
41543: LD_INT 30
41545: PUSH
41546: LD_INT 31
41548: PUSH
41549: LD_INT 37
41551: PUSH
41552: LD_INT 38
41554: PUSH
41555: LD_INT 32
41557: PUSH
41558: LD_INT 27
41560: PUSH
41561: LD_INT 33
41563: PUSH
41564: LD_INT 69
41566: PUSH
41567: LD_INT 39
41569: PUSH
41570: LD_INT 34
41572: PUSH
41573: LD_INT 40
41575: PUSH
41576: LD_INT 71
41578: PUSH
41579: LD_INT 23
41581: PUSH
41582: LD_INT 44
41584: PUSH
41585: LD_INT 48
41587: PUSH
41588: LD_INT 49
41590: PUSH
41591: LD_INT 50
41593: PUSH
41594: LD_INT 51
41596: PUSH
41597: LD_INT 52
41599: PUSH
41600: LD_INT 53
41602: PUSH
41603: LD_INT 54
41605: PUSH
41606: LD_INT 55
41608: PUSH
41609: LD_INT 56
41611: PUSH
41612: LD_INT 57
41614: PUSH
41615: LD_INT 58
41617: PUSH
41618: LD_INT 59
41620: PUSH
41621: LD_INT 63
41623: PUSH
41624: LD_INT 64
41626: PUSH
41627: LD_INT 65
41629: PUSH
41630: LD_INT 82
41632: PUSH
41633: LD_INT 83
41635: PUSH
41636: LD_INT 84
41638: PUSH
41639: LD_INT 85
41641: PUSH
41642: LD_INT 86
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: ST_TO_ADDR
41700: GO 41703
41702: POP
// if state > - 1 and state < 3 then
41703: LD_VAR 0 3
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: GREATER
41712: PUSH
41713: LD_VAR 0 3
41717: PUSH
41718: LD_INT 3
41720: LESS
41721: AND
41722: IFFALSE 41779
// for i in result do
41724: LD_ADDR_VAR 0 5
41728: PUSH
41729: LD_VAR 0 4
41733: PUSH
41734: FOR_IN
41735: IFFALSE 41777
// if GetTech ( i , side ) <> state then
41737: LD_VAR 0 5
41741: PPUSH
41742: LD_VAR 0 1
41746: PPUSH
41747: CALL_OW 321
41751: PUSH
41752: LD_VAR 0 3
41756: NONEQUAL
41757: IFFALSE 41775
// result := result diff i ;
41759: LD_ADDR_VAR 0 4
41763: PUSH
41764: LD_VAR 0 4
41768: PUSH
41769: LD_VAR 0 5
41773: DIFF
41774: ST_TO_ADDR
41775: GO 41734
41777: POP
41778: POP
// end ;
41779: LD_VAR 0 4
41783: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41784: LD_INT 0
41786: PPUSH
41787: PPUSH
41788: PPUSH
// result := true ;
41789: LD_ADDR_VAR 0 3
41793: PUSH
41794: LD_INT 1
41796: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41797: LD_ADDR_VAR 0 5
41801: PUSH
41802: LD_VAR 0 2
41806: PPUSH
41807: CALL_OW 480
41811: ST_TO_ADDR
// if not tmp then
41812: LD_VAR 0 5
41816: NOT
41817: IFFALSE 41821
// exit ;
41819: GO 41870
// for i in tmp do
41821: LD_ADDR_VAR 0 4
41825: PUSH
41826: LD_VAR 0 5
41830: PUSH
41831: FOR_IN
41832: IFFALSE 41868
// if GetTech ( i , side ) <> state_researched then
41834: LD_VAR 0 4
41838: PPUSH
41839: LD_VAR 0 1
41843: PPUSH
41844: CALL_OW 321
41848: PUSH
41849: LD_INT 2
41851: NONEQUAL
41852: IFFALSE 41866
// begin result := false ;
41854: LD_ADDR_VAR 0 3
41858: PUSH
41859: LD_INT 0
41861: ST_TO_ADDR
// exit ;
41862: POP
41863: POP
41864: GO 41870
// end ;
41866: GO 41831
41868: POP
41869: POP
// end ;
41870: LD_VAR 0 3
41874: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41875: LD_INT 0
41877: PPUSH
41878: PPUSH
41879: PPUSH
41880: PPUSH
41881: PPUSH
41882: PPUSH
41883: PPUSH
41884: PPUSH
41885: PPUSH
41886: PPUSH
41887: PPUSH
41888: PPUSH
41889: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41890: LD_VAR 0 1
41894: NOT
41895: PUSH
41896: LD_VAR 0 1
41900: PPUSH
41901: CALL_OW 257
41905: PUSH
41906: LD_INT 9
41908: NONEQUAL
41909: OR
41910: IFFALSE 41914
// exit ;
41912: GO 42487
// side := GetSide ( unit ) ;
41914: LD_ADDR_VAR 0 9
41918: PUSH
41919: LD_VAR 0 1
41923: PPUSH
41924: CALL_OW 255
41928: ST_TO_ADDR
// tech_space := tech_spacanom ;
41929: LD_ADDR_VAR 0 12
41933: PUSH
41934: LD_INT 29
41936: ST_TO_ADDR
// tech_time := tech_taurad ;
41937: LD_ADDR_VAR 0 13
41941: PUSH
41942: LD_INT 28
41944: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41945: LD_ADDR_VAR 0 11
41949: PUSH
41950: LD_VAR 0 1
41954: PPUSH
41955: CALL_OW 310
41959: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41960: LD_VAR 0 11
41964: PPUSH
41965: CALL_OW 247
41969: PUSH
41970: LD_INT 2
41972: EQUAL
41973: IFFALSE 41977
// exit ;
41975: GO 42487
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41977: LD_ADDR_VAR 0 8
41981: PUSH
41982: LD_INT 81
41984: PUSH
41985: LD_VAR 0 9
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 3
41996: PUSH
41997: LD_INT 21
41999: PUSH
42000: LD_INT 3
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PPUSH
42015: CALL_OW 69
42019: ST_TO_ADDR
// if not tmp then
42020: LD_VAR 0 8
42024: NOT
42025: IFFALSE 42029
// exit ;
42027: GO 42487
// if in_unit then
42029: LD_VAR 0 11
42033: IFFALSE 42057
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42035: LD_ADDR_VAR 0 10
42039: PUSH
42040: LD_VAR 0 8
42044: PPUSH
42045: LD_VAR 0 11
42049: PPUSH
42050: CALL_OW 74
42054: ST_TO_ADDR
42055: GO 42077
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42057: LD_ADDR_VAR 0 10
42061: PUSH
42062: LD_VAR 0 8
42066: PPUSH
42067: LD_VAR 0 1
42071: PPUSH
42072: CALL_OW 74
42076: ST_TO_ADDR
// if not enemy then
42077: LD_VAR 0 10
42081: NOT
42082: IFFALSE 42086
// exit ;
42084: GO 42487
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42086: LD_VAR 0 11
42090: PUSH
42091: LD_VAR 0 11
42095: PPUSH
42096: LD_VAR 0 10
42100: PPUSH
42101: CALL_OW 296
42105: PUSH
42106: LD_INT 13
42108: GREATER
42109: AND
42110: PUSH
42111: LD_VAR 0 1
42115: PPUSH
42116: LD_VAR 0 10
42120: PPUSH
42121: CALL_OW 296
42125: PUSH
42126: LD_INT 12
42128: GREATER
42129: OR
42130: IFFALSE 42134
// exit ;
42132: GO 42487
// missile := [ 1 ] ;
42134: LD_ADDR_VAR 0 14
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: EMPTY
42143: LIST
42144: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42145: LD_VAR 0 9
42149: PPUSH
42150: LD_VAR 0 12
42154: PPUSH
42155: CALL_OW 325
42159: IFFALSE 42188
// missile := Replace ( missile , missile + 1 , 2 ) ;
42161: LD_ADDR_VAR 0 14
42165: PUSH
42166: LD_VAR 0 14
42170: PPUSH
42171: LD_VAR 0 14
42175: PUSH
42176: LD_INT 1
42178: PLUS
42179: PPUSH
42180: LD_INT 2
42182: PPUSH
42183: CALL_OW 1
42187: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42188: LD_VAR 0 9
42192: PPUSH
42193: LD_VAR 0 13
42197: PPUSH
42198: CALL_OW 325
42202: PUSH
42203: LD_VAR 0 10
42207: PPUSH
42208: CALL_OW 255
42212: PPUSH
42213: LD_VAR 0 13
42217: PPUSH
42218: CALL_OW 325
42222: NOT
42223: AND
42224: IFFALSE 42253
// missile := Replace ( missile , missile + 1 , 3 ) ;
42226: LD_ADDR_VAR 0 14
42230: PUSH
42231: LD_VAR 0 14
42235: PPUSH
42236: LD_VAR 0 14
42240: PUSH
42241: LD_INT 1
42243: PLUS
42244: PPUSH
42245: LD_INT 3
42247: PPUSH
42248: CALL_OW 1
42252: ST_TO_ADDR
// if missile < 2 then
42253: LD_VAR 0 14
42257: PUSH
42258: LD_INT 2
42260: LESS
42261: IFFALSE 42265
// exit ;
42263: GO 42487
// x := GetX ( enemy ) ;
42265: LD_ADDR_VAR 0 4
42269: PUSH
42270: LD_VAR 0 10
42274: PPUSH
42275: CALL_OW 250
42279: ST_TO_ADDR
// y := GetY ( enemy ) ;
42280: LD_ADDR_VAR 0 5
42284: PUSH
42285: LD_VAR 0 10
42289: PPUSH
42290: CALL_OW 251
42294: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42295: LD_ADDR_VAR 0 6
42299: PUSH
42300: LD_VAR 0 4
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PPUSH
42309: LD_INT 1
42311: PPUSH
42312: CALL_OW 12
42316: PLUS
42317: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42318: LD_ADDR_VAR 0 7
42322: PUSH
42323: LD_VAR 0 5
42327: PUSH
42328: LD_INT 1
42330: NEG
42331: PPUSH
42332: LD_INT 1
42334: PPUSH
42335: CALL_OW 12
42339: PLUS
42340: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42341: LD_VAR 0 6
42345: PPUSH
42346: LD_VAR 0 7
42350: PPUSH
42351: CALL_OW 488
42355: NOT
42356: IFFALSE 42378
// begin _x := x ;
42358: LD_ADDR_VAR 0 6
42362: PUSH
42363: LD_VAR 0 4
42367: ST_TO_ADDR
// _y := y ;
42368: LD_ADDR_VAR 0 7
42372: PUSH
42373: LD_VAR 0 5
42377: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42378: LD_ADDR_VAR 0 3
42382: PUSH
42383: LD_INT 1
42385: PPUSH
42386: LD_VAR 0 14
42390: PPUSH
42391: CALL_OW 12
42395: ST_TO_ADDR
// case i of 1 :
42396: LD_VAR 0 3
42400: PUSH
42401: LD_INT 1
42403: DOUBLE
42404: EQUAL
42405: IFTRUE 42409
42407: GO 42426
42409: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42410: LD_VAR 0 1
42414: PPUSH
42415: LD_VAR 0 10
42419: PPUSH
42420: CALL_OW 115
42424: GO 42487
42426: LD_INT 2
42428: DOUBLE
42429: EQUAL
42430: IFTRUE 42434
42432: GO 42456
42434: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42435: LD_VAR 0 1
42439: PPUSH
42440: LD_VAR 0 6
42444: PPUSH
42445: LD_VAR 0 7
42449: PPUSH
42450: CALL_OW 153
42454: GO 42487
42456: LD_INT 3
42458: DOUBLE
42459: EQUAL
42460: IFTRUE 42464
42462: GO 42486
42464: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42465: LD_VAR 0 1
42469: PPUSH
42470: LD_VAR 0 6
42474: PPUSH
42475: LD_VAR 0 7
42479: PPUSH
42480: CALL_OW 154
42484: GO 42487
42486: POP
// end ;
42487: LD_VAR 0 2
42491: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42492: LD_INT 0
42494: PPUSH
42495: PPUSH
42496: PPUSH
42497: PPUSH
42498: PPUSH
42499: PPUSH
// if not unit or not building then
42500: LD_VAR 0 1
42504: NOT
42505: PUSH
42506: LD_VAR 0 2
42510: NOT
42511: OR
42512: IFFALSE 42516
// exit ;
42514: GO 42674
// x := GetX ( building ) ;
42516: LD_ADDR_VAR 0 5
42520: PUSH
42521: LD_VAR 0 2
42525: PPUSH
42526: CALL_OW 250
42530: ST_TO_ADDR
// y := GetY ( building ) ;
42531: LD_ADDR_VAR 0 6
42535: PUSH
42536: LD_VAR 0 2
42540: PPUSH
42541: CALL_OW 251
42545: ST_TO_ADDR
// for i = 0 to 5 do
42546: LD_ADDR_VAR 0 4
42550: PUSH
42551: DOUBLE
42552: LD_INT 0
42554: DEC
42555: ST_TO_ADDR
42556: LD_INT 5
42558: PUSH
42559: FOR_TO
42560: IFFALSE 42672
// begin _x := ShiftX ( x , i , 3 ) ;
42562: LD_ADDR_VAR 0 7
42566: PUSH
42567: LD_VAR 0 5
42571: PPUSH
42572: LD_VAR 0 4
42576: PPUSH
42577: LD_INT 3
42579: PPUSH
42580: CALL_OW 272
42584: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42585: LD_ADDR_VAR 0 8
42589: PUSH
42590: LD_VAR 0 6
42594: PPUSH
42595: LD_VAR 0 4
42599: PPUSH
42600: LD_INT 3
42602: PPUSH
42603: CALL_OW 273
42607: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42608: LD_VAR 0 7
42612: PPUSH
42613: LD_VAR 0 8
42617: PPUSH
42618: CALL_OW 488
42622: NOT
42623: IFFALSE 42627
// continue ;
42625: GO 42559
// if HexInfo ( _x , _y ) = 0 then
42627: LD_VAR 0 7
42631: PPUSH
42632: LD_VAR 0 8
42636: PPUSH
42637: CALL_OW 428
42641: PUSH
42642: LD_INT 0
42644: EQUAL
42645: IFFALSE 42670
// begin ComMoveXY ( unit , _x , _y ) ;
42647: LD_VAR 0 1
42651: PPUSH
42652: LD_VAR 0 7
42656: PPUSH
42657: LD_VAR 0 8
42661: PPUSH
42662: CALL_OW 111
// exit ;
42666: POP
42667: POP
42668: GO 42674
// end ; end ;
42670: GO 42559
42672: POP
42673: POP
// end ;
42674: LD_VAR 0 3
42678: RET
// export function ScanBase ( side , base_area ) ; begin
42679: LD_INT 0
42681: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42682: LD_ADDR_VAR 0 3
42686: PUSH
42687: LD_VAR 0 2
42691: PPUSH
42692: LD_INT 81
42694: PUSH
42695: LD_VAR 0 1
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PPUSH
42704: CALL_OW 70
42708: ST_TO_ADDR
// end ;
42709: LD_VAR 0 3
42713: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42714: LD_INT 0
42716: PPUSH
42717: PPUSH
42718: PPUSH
42719: PPUSH
// result := false ;
42720: LD_ADDR_VAR 0 2
42724: PUSH
42725: LD_INT 0
42727: ST_TO_ADDR
// side := GetSide ( unit ) ;
42728: LD_ADDR_VAR 0 3
42732: PUSH
42733: LD_VAR 0 1
42737: PPUSH
42738: CALL_OW 255
42742: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42743: LD_ADDR_VAR 0 4
42747: PUSH
42748: LD_VAR 0 1
42752: PPUSH
42753: CALL_OW 248
42757: ST_TO_ADDR
// case nat of 1 :
42758: LD_VAR 0 4
42762: PUSH
42763: LD_INT 1
42765: DOUBLE
42766: EQUAL
42767: IFTRUE 42771
42769: GO 42782
42771: POP
// tech := tech_lassight ; 2 :
42772: LD_ADDR_VAR 0 5
42776: PUSH
42777: LD_INT 12
42779: ST_TO_ADDR
42780: GO 42821
42782: LD_INT 2
42784: DOUBLE
42785: EQUAL
42786: IFTRUE 42790
42788: GO 42801
42790: POP
// tech := tech_mortar ; 3 :
42791: LD_ADDR_VAR 0 5
42795: PUSH
42796: LD_INT 41
42798: ST_TO_ADDR
42799: GO 42821
42801: LD_INT 3
42803: DOUBLE
42804: EQUAL
42805: IFTRUE 42809
42807: GO 42820
42809: POP
// tech := tech_bazooka ; end ;
42810: LD_ADDR_VAR 0 5
42814: PUSH
42815: LD_INT 44
42817: ST_TO_ADDR
42818: GO 42821
42820: POP
// if Researched ( side , tech ) then
42821: LD_VAR 0 3
42825: PPUSH
42826: LD_VAR 0 5
42830: PPUSH
42831: CALL_OW 325
42835: IFFALSE 42862
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42837: LD_ADDR_VAR 0 2
42841: PUSH
42842: LD_INT 5
42844: PUSH
42845: LD_INT 8
42847: PUSH
42848: LD_INT 9
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: LIST
42855: PUSH
42856: LD_VAR 0 4
42860: ARRAY
42861: ST_TO_ADDR
// end ;
42862: LD_VAR 0 2
42866: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42867: LD_INT 0
42869: PPUSH
42870: PPUSH
42871: PPUSH
// if not mines then
42872: LD_VAR 0 2
42876: NOT
42877: IFFALSE 42881
// exit ;
42879: GO 43025
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42881: LD_ADDR_VAR 0 5
42885: PUSH
42886: LD_INT 81
42888: PUSH
42889: LD_VAR 0 1
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 3
42900: PUSH
42901: LD_INT 21
42903: PUSH
42904: LD_INT 3
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PPUSH
42919: CALL_OW 69
42923: ST_TO_ADDR
// for i in mines do
42924: LD_ADDR_VAR 0 4
42928: PUSH
42929: LD_VAR 0 2
42933: PUSH
42934: FOR_IN
42935: IFFALSE 43023
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42937: LD_VAR 0 4
42941: PUSH
42942: LD_INT 1
42944: ARRAY
42945: PPUSH
42946: LD_VAR 0 4
42950: PUSH
42951: LD_INT 2
42953: ARRAY
42954: PPUSH
42955: CALL_OW 458
42959: NOT
42960: IFFALSE 42964
// continue ;
42962: GO 42934
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42964: LD_VAR 0 4
42968: PUSH
42969: LD_INT 1
42971: ARRAY
42972: PPUSH
42973: LD_VAR 0 4
42977: PUSH
42978: LD_INT 2
42980: ARRAY
42981: PPUSH
42982: CALL_OW 428
42986: PUSH
42987: LD_VAR 0 5
42991: IN
42992: IFFALSE 43021
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42994: LD_VAR 0 4
42998: PUSH
42999: LD_INT 1
43001: ARRAY
43002: PPUSH
43003: LD_VAR 0 4
43007: PUSH
43008: LD_INT 2
43010: ARRAY
43011: PPUSH
43012: LD_VAR 0 1
43016: PPUSH
43017: CALL_OW 456
// end ;
43021: GO 42934
43023: POP
43024: POP
// end ;
43025: LD_VAR 0 3
43029: RET
// export function Count ( array ) ; begin
43030: LD_INT 0
43032: PPUSH
// result := array + 0 ;
43033: LD_ADDR_VAR 0 2
43037: PUSH
43038: LD_VAR 0 1
43042: PUSH
43043: LD_INT 0
43045: PLUS
43046: ST_TO_ADDR
// end ;
43047: LD_VAR 0 2
43051: RET
// export function IsEmpty ( building ) ; begin
43052: LD_INT 0
43054: PPUSH
// if not building then
43055: LD_VAR 0 1
43059: NOT
43060: IFFALSE 43064
// exit ;
43062: GO 43107
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43064: LD_ADDR_VAR 0 2
43068: PUSH
43069: LD_VAR 0 1
43073: PUSH
43074: LD_INT 22
43076: PUSH
43077: LD_VAR 0 1
43081: PPUSH
43082: CALL_OW 255
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 58
43093: PUSH
43094: EMPTY
43095: LIST
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PPUSH
43101: CALL_OW 69
43105: IN
43106: ST_TO_ADDR
// end ;
43107: LD_VAR 0 2
43111: RET
// export function IsNotFull ( building ) ; var places ; begin
43112: LD_INT 0
43114: PPUSH
43115: PPUSH
// if not building then
43116: LD_VAR 0 1
43120: NOT
43121: IFFALSE 43125
// exit ;
43123: GO 43153
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43125: LD_ADDR_VAR 0 2
43129: PUSH
43130: LD_VAR 0 1
43134: PPUSH
43135: LD_INT 3
43137: PUSH
43138: LD_INT 62
43140: PUSH
43141: EMPTY
43142: LIST
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PPUSH
43148: CALL_OW 72
43152: ST_TO_ADDR
// end ;
43153: LD_VAR 0 2
43157: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43158: LD_INT 0
43160: PPUSH
43161: PPUSH
43162: PPUSH
43163: PPUSH
// tmp := [ ] ;
43164: LD_ADDR_VAR 0 3
43168: PUSH
43169: EMPTY
43170: ST_TO_ADDR
// list := [ ] ;
43171: LD_ADDR_VAR 0 5
43175: PUSH
43176: EMPTY
43177: ST_TO_ADDR
// for i = 16 to 25 do
43178: LD_ADDR_VAR 0 4
43182: PUSH
43183: DOUBLE
43184: LD_INT 16
43186: DEC
43187: ST_TO_ADDR
43188: LD_INT 25
43190: PUSH
43191: FOR_TO
43192: IFFALSE 43265
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43194: LD_ADDR_VAR 0 3
43198: PUSH
43199: LD_VAR 0 3
43203: PUSH
43204: LD_INT 22
43206: PUSH
43207: LD_VAR 0 1
43211: PPUSH
43212: CALL_OW 255
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 91
43223: PUSH
43224: LD_VAR 0 1
43228: PUSH
43229: LD_INT 6
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 30
43239: PUSH
43240: LD_VAR 0 4
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: LIST
43253: PUSH
43254: EMPTY
43255: LIST
43256: PPUSH
43257: CALL_OW 69
43261: ADD
43262: ST_TO_ADDR
43263: GO 43191
43265: POP
43266: POP
// for i = 1 to tmp do
43267: LD_ADDR_VAR 0 4
43271: PUSH
43272: DOUBLE
43273: LD_INT 1
43275: DEC
43276: ST_TO_ADDR
43277: LD_VAR 0 3
43281: PUSH
43282: FOR_TO
43283: IFFALSE 43371
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43285: LD_ADDR_VAR 0 5
43289: PUSH
43290: LD_VAR 0 5
43294: PUSH
43295: LD_VAR 0 3
43299: PUSH
43300: LD_VAR 0 4
43304: ARRAY
43305: PPUSH
43306: CALL_OW 266
43310: PUSH
43311: LD_VAR 0 3
43315: PUSH
43316: LD_VAR 0 4
43320: ARRAY
43321: PPUSH
43322: CALL_OW 250
43326: PUSH
43327: LD_VAR 0 3
43331: PUSH
43332: LD_VAR 0 4
43336: ARRAY
43337: PPUSH
43338: CALL_OW 251
43342: PUSH
43343: LD_VAR 0 3
43347: PUSH
43348: LD_VAR 0 4
43352: ARRAY
43353: PPUSH
43354: CALL_OW 254
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: PUSH
43365: EMPTY
43366: LIST
43367: ADD
43368: ST_TO_ADDR
43369: GO 43282
43371: POP
43372: POP
// result := list ;
43373: LD_ADDR_VAR 0 2
43377: PUSH
43378: LD_VAR 0 5
43382: ST_TO_ADDR
// end ;
43383: LD_VAR 0 2
43387: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43388: LD_INT 0
43390: PPUSH
43391: PPUSH
43392: PPUSH
43393: PPUSH
43394: PPUSH
43395: PPUSH
43396: PPUSH
// if not factory then
43397: LD_VAR 0 1
43401: NOT
43402: IFFALSE 43406
// exit ;
43404: GO 43999
// if control = control_apeman then
43406: LD_VAR 0 4
43410: PUSH
43411: LD_INT 5
43413: EQUAL
43414: IFFALSE 43523
// begin tmp := UnitsInside ( factory ) ;
43416: LD_ADDR_VAR 0 8
43420: PUSH
43421: LD_VAR 0 1
43425: PPUSH
43426: CALL_OW 313
43430: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43431: LD_VAR 0 8
43435: PPUSH
43436: LD_INT 25
43438: PUSH
43439: LD_INT 12
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PPUSH
43446: CALL_OW 72
43450: NOT
43451: IFFALSE 43461
// control := control_manual ;
43453: LD_ADDR_VAR 0 4
43457: PUSH
43458: LD_INT 1
43460: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43461: LD_ADDR_VAR 0 8
43465: PUSH
43466: LD_VAR 0 1
43470: PPUSH
43471: CALL 43158 0 1
43475: ST_TO_ADDR
// if tmp then
43476: LD_VAR 0 8
43480: IFFALSE 43523
// begin for i in tmp do
43482: LD_ADDR_VAR 0 7
43486: PUSH
43487: LD_VAR 0 8
43491: PUSH
43492: FOR_IN
43493: IFFALSE 43521
// if i [ 1 ] = b_ext_radio then
43495: LD_VAR 0 7
43499: PUSH
43500: LD_INT 1
43502: ARRAY
43503: PUSH
43504: LD_INT 22
43506: EQUAL
43507: IFFALSE 43519
// begin control := control_remote ;
43509: LD_ADDR_VAR 0 4
43513: PUSH
43514: LD_INT 2
43516: ST_TO_ADDR
// break ;
43517: GO 43521
// end ;
43519: GO 43492
43521: POP
43522: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43523: LD_VAR 0 1
43527: PPUSH
43528: LD_VAR 0 2
43532: PPUSH
43533: LD_VAR 0 3
43537: PPUSH
43538: LD_VAR 0 4
43542: PPUSH
43543: LD_VAR 0 5
43547: PPUSH
43548: CALL_OW 448
43552: IFFALSE 43587
// begin result := [ chassis , engine , control , weapon ] ;
43554: LD_ADDR_VAR 0 6
43558: PUSH
43559: LD_VAR 0 2
43563: PUSH
43564: LD_VAR 0 3
43568: PUSH
43569: LD_VAR 0 4
43573: PUSH
43574: LD_VAR 0 5
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: ST_TO_ADDR
// exit ;
43585: GO 43999
// end ; _chassis := AvailableChassisList ( factory ) ;
43587: LD_ADDR_VAR 0 9
43591: PUSH
43592: LD_VAR 0 1
43596: PPUSH
43597: CALL_OW 475
43601: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43602: LD_ADDR_VAR 0 11
43606: PUSH
43607: LD_VAR 0 1
43611: PPUSH
43612: CALL_OW 476
43616: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43617: LD_ADDR_VAR 0 12
43621: PUSH
43622: LD_VAR 0 1
43626: PPUSH
43627: CALL_OW 477
43631: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43632: LD_ADDR_VAR 0 10
43636: PUSH
43637: LD_VAR 0 1
43641: PPUSH
43642: CALL_OW 478
43646: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43647: LD_VAR 0 9
43651: NOT
43652: PUSH
43653: LD_VAR 0 11
43657: NOT
43658: OR
43659: PUSH
43660: LD_VAR 0 12
43664: NOT
43665: OR
43666: PUSH
43667: LD_VAR 0 10
43671: NOT
43672: OR
43673: IFFALSE 43708
// begin result := [ chassis , engine , control , weapon ] ;
43675: LD_ADDR_VAR 0 6
43679: PUSH
43680: LD_VAR 0 2
43684: PUSH
43685: LD_VAR 0 3
43689: PUSH
43690: LD_VAR 0 4
43694: PUSH
43695: LD_VAR 0 5
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: ST_TO_ADDR
// exit ;
43706: GO 43999
// end ; if not chassis in _chassis then
43708: LD_VAR 0 2
43712: PUSH
43713: LD_VAR 0 9
43717: IN
43718: NOT
43719: IFFALSE 43745
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43721: LD_ADDR_VAR 0 2
43725: PUSH
43726: LD_VAR 0 9
43730: PUSH
43731: LD_INT 1
43733: PPUSH
43734: LD_VAR 0 9
43738: PPUSH
43739: CALL_OW 12
43743: ARRAY
43744: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43745: LD_VAR 0 2
43749: PPUSH
43750: LD_VAR 0 3
43754: PPUSH
43755: CALL 44004 0 2
43759: NOT
43760: IFFALSE 43819
// repeat engine := _engine [ 1 ] ;
43762: LD_ADDR_VAR 0 3
43766: PUSH
43767: LD_VAR 0 11
43771: PUSH
43772: LD_INT 1
43774: ARRAY
43775: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43776: LD_ADDR_VAR 0 11
43780: PUSH
43781: LD_VAR 0 11
43785: PPUSH
43786: LD_INT 1
43788: PPUSH
43789: CALL_OW 3
43793: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43794: LD_VAR 0 2
43798: PPUSH
43799: LD_VAR 0 3
43803: PPUSH
43804: CALL 44004 0 2
43808: PUSH
43809: LD_VAR 0 11
43813: PUSH
43814: EMPTY
43815: EQUAL
43816: OR
43817: IFFALSE 43762
// if not control in _control then
43819: LD_VAR 0 4
43823: PUSH
43824: LD_VAR 0 12
43828: IN
43829: NOT
43830: IFFALSE 43856
// control := _control [ rand ( 1 , _control ) ] ;
43832: LD_ADDR_VAR 0 4
43836: PUSH
43837: LD_VAR 0 12
43841: PUSH
43842: LD_INT 1
43844: PPUSH
43845: LD_VAR 0 12
43849: PPUSH
43850: CALL_OW 12
43854: ARRAY
43855: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43856: LD_VAR 0 2
43860: PPUSH
43861: LD_VAR 0 5
43865: PPUSH
43866: CALL 44224 0 2
43870: NOT
43871: IFFALSE 43930
// repeat weapon := _weapon [ 1 ] ;
43873: LD_ADDR_VAR 0 5
43877: PUSH
43878: LD_VAR 0 10
43882: PUSH
43883: LD_INT 1
43885: ARRAY
43886: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43887: LD_ADDR_VAR 0 10
43891: PUSH
43892: LD_VAR 0 10
43896: PPUSH
43897: LD_INT 1
43899: PPUSH
43900: CALL_OW 3
43904: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43905: LD_VAR 0 2
43909: PPUSH
43910: LD_VAR 0 5
43914: PPUSH
43915: CALL 44224 0 2
43919: PUSH
43920: LD_VAR 0 10
43924: PUSH
43925: EMPTY
43926: EQUAL
43927: OR
43928: IFFALSE 43873
// result := [ ] ;
43930: LD_ADDR_VAR 0 6
43934: PUSH
43935: EMPTY
43936: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43937: LD_VAR 0 1
43941: PPUSH
43942: LD_VAR 0 2
43946: PPUSH
43947: LD_VAR 0 3
43951: PPUSH
43952: LD_VAR 0 4
43956: PPUSH
43957: LD_VAR 0 5
43961: PPUSH
43962: CALL_OW 448
43966: IFFALSE 43999
// result := [ chassis , engine , control , weapon ] ;
43968: LD_ADDR_VAR 0 6
43972: PUSH
43973: LD_VAR 0 2
43977: PUSH
43978: LD_VAR 0 3
43982: PUSH
43983: LD_VAR 0 4
43987: PUSH
43988: LD_VAR 0 5
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: ST_TO_ADDR
// end ;
43999: LD_VAR 0 6
44003: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44004: LD_INT 0
44006: PPUSH
// if not chassis or not engine then
44007: LD_VAR 0 1
44011: NOT
44012: PUSH
44013: LD_VAR 0 2
44017: NOT
44018: OR
44019: IFFALSE 44023
// exit ;
44021: GO 44219
// case engine of engine_solar :
44023: LD_VAR 0 2
44027: PUSH
44028: LD_INT 2
44030: DOUBLE
44031: EQUAL
44032: IFTRUE 44036
44034: GO 44074
44036: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44037: LD_ADDR_VAR 0 3
44041: PUSH
44042: LD_INT 11
44044: PUSH
44045: LD_INT 12
44047: PUSH
44048: LD_INT 13
44050: PUSH
44051: LD_INT 14
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: LD_INT 2
44059: PUSH
44060: LD_INT 3
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: ST_TO_ADDR
44072: GO 44203
44074: LD_INT 1
44076: DOUBLE
44077: EQUAL
44078: IFTRUE 44082
44080: GO 44144
44082: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44083: LD_ADDR_VAR 0 3
44087: PUSH
44088: LD_INT 11
44090: PUSH
44091: LD_INT 12
44093: PUSH
44094: LD_INT 13
44096: PUSH
44097: LD_INT 14
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: LD_INT 3
44108: PUSH
44109: LD_INT 4
44111: PUSH
44112: LD_INT 5
44114: PUSH
44115: LD_INT 21
44117: PUSH
44118: LD_INT 23
44120: PUSH
44121: LD_INT 22
44123: PUSH
44124: LD_INT 24
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: ST_TO_ADDR
44142: GO 44203
44144: LD_INT 3
44146: DOUBLE
44147: EQUAL
44148: IFTRUE 44152
44150: GO 44202
44152: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44153: LD_ADDR_VAR 0 3
44157: PUSH
44158: LD_INT 13
44160: PUSH
44161: LD_INT 14
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: LD_INT 3
44169: PUSH
44170: LD_INT 4
44172: PUSH
44173: LD_INT 5
44175: PUSH
44176: LD_INT 21
44178: PUSH
44179: LD_INT 22
44181: PUSH
44182: LD_INT 23
44184: PUSH
44185: LD_INT 24
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: ST_TO_ADDR
44200: GO 44203
44202: POP
// result := ( chassis in result ) ;
44203: LD_ADDR_VAR 0 3
44207: PUSH
44208: LD_VAR 0 1
44212: PUSH
44213: LD_VAR 0 3
44217: IN
44218: ST_TO_ADDR
// end ;
44219: LD_VAR 0 3
44223: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44224: LD_INT 0
44226: PPUSH
// if not chassis or not weapon then
44227: LD_VAR 0 1
44231: NOT
44232: PUSH
44233: LD_VAR 0 2
44237: NOT
44238: OR
44239: IFFALSE 44243
// exit ;
44241: GO 45303
// case weapon of us_machine_gun :
44243: LD_VAR 0 2
44247: PUSH
44248: LD_INT 2
44250: DOUBLE
44251: EQUAL
44252: IFTRUE 44256
44254: GO 44286
44256: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44257: LD_ADDR_VAR 0 3
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: LD_INT 2
44267: PUSH
44268: LD_INT 3
44270: PUSH
44271: LD_INT 4
44273: PUSH
44274: LD_INT 5
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: ST_TO_ADDR
44284: GO 45287
44286: LD_INT 3
44288: DOUBLE
44289: EQUAL
44290: IFTRUE 44294
44292: GO 44324
44294: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44295: LD_ADDR_VAR 0 3
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: LD_INT 2
44305: PUSH
44306: LD_INT 3
44308: PUSH
44309: LD_INT 4
44311: PUSH
44312: LD_INT 5
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: ST_TO_ADDR
44322: GO 45287
44324: LD_INT 11
44326: DOUBLE
44327: EQUAL
44328: IFTRUE 44332
44330: GO 44362
44332: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44333: LD_ADDR_VAR 0 3
44337: PUSH
44338: LD_INT 1
44340: PUSH
44341: LD_INT 2
44343: PUSH
44344: LD_INT 3
44346: PUSH
44347: LD_INT 4
44349: PUSH
44350: LD_INT 5
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: ST_TO_ADDR
44360: GO 45287
44362: LD_INT 4
44364: DOUBLE
44365: EQUAL
44366: IFTRUE 44370
44368: GO 44396
44370: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44371: LD_ADDR_VAR 0 3
44375: PUSH
44376: LD_INT 2
44378: PUSH
44379: LD_INT 3
44381: PUSH
44382: LD_INT 4
44384: PUSH
44385: LD_INT 5
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: ST_TO_ADDR
44394: GO 45287
44396: LD_INT 5
44398: DOUBLE
44399: EQUAL
44400: IFTRUE 44404
44402: GO 44430
44404: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44405: LD_ADDR_VAR 0 3
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: LD_INT 3
44415: PUSH
44416: LD_INT 4
44418: PUSH
44419: LD_INT 5
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: ST_TO_ADDR
44428: GO 45287
44430: LD_INT 9
44432: DOUBLE
44433: EQUAL
44434: IFTRUE 44438
44436: GO 44464
44438: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44439: LD_ADDR_VAR 0 3
44443: PUSH
44444: LD_INT 2
44446: PUSH
44447: LD_INT 3
44449: PUSH
44450: LD_INT 4
44452: PUSH
44453: LD_INT 5
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: ST_TO_ADDR
44462: GO 45287
44464: LD_INT 7
44466: DOUBLE
44467: EQUAL
44468: IFTRUE 44472
44470: GO 44498
44472: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44473: LD_ADDR_VAR 0 3
44477: PUSH
44478: LD_INT 2
44480: PUSH
44481: LD_INT 3
44483: PUSH
44484: LD_INT 4
44486: PUSH
44487: LD_INT 5
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: ST_TO_ADDR
44496: GO 45287
44498: LD_INT 12
44500: DOUBLE
44501: EQUAL
44502: IFTRUE 44506
44504: GO 44532
44506: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44507: LD_ADDR_VAR 0 3
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: LD_INT 3
44517: PUSH
44518: LD_INT 4
44520: PUSH
44521: LD_INT 5
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: ST_TO_ADDR
44530: GO 45287
44532: LD_INT 13
44534: DOUBLE
44535: EQUAL
44536: IFTRUE 44540
44538: GO 44566
44540: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44541: LD_ADDR_VAR 0 3
44545: PUSH
44546: LD_INT 2
44548: PUSH
44549: LD_INT 3
44551: PUSH
44552: LD_INT 4
44554: PUSH
44555: LD_INT 5
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: ST_TO_ADDR
44564: GO 45287
44566: LD_INT 14
44568: DOUBLE
44569: EQUAL
44570: IFTRUE 44574
44572: GO 44592
44574: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44575: LD_ADDR_VAR 0 3
44579: PUSH
44580: LD_INT 4
44582: PUSH
44583: LD_INT 5
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: ST_TO_ADDR
44590: GO 45287
44592: LD_INT 6
44594: DOUBLE
44595: EQUAL
44596: IFTRUE 44600
44598: GO 44618
44600: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44601: LD_ADDR_VAR 0 3
44605: PUSH
44606: LD_INT 4
44608: PUSH
44609: LD_INT 5
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: ST_TO_ADDR
44616: GO 45287
44618: LD_INT 10
44620: DOUBLE
44621: EQUAL
44622: IFTRUE 44626
44624: GO 44644
44626: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44627: LD_ADDR_VAR 0 3
44631: PUSH
44632: LD_INT 4
44634: PUSH
44635: LD_INT 5
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: ST_TO_ADDR
44642: GO 45287
44644: LD_INT 22
44646: DOUBLE
44647: EQUAL
44648: IFTRUE 44652
44650: GO 44678
44652: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44653: LD_ADDR_VAR 0 3
44657: PUSH
44658: LD_INT 11
44660: PUSH
44661: LD_INT 12
44663: PUSH
44664: LD_INT 13
44666: PUSH
44667: LD_INT 14
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: ST_TO_ADDR
44676: GO 45287
44678: LD_INT 23
44680: DOUBLE
44681: EQUAL
44682: IFTRUE 44686
44684: GO 44712
44686: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44687: LD_ADDR_VAR 0 3
44691: PUSH
44692: LD_INT 11
44694: PUSH
44695: LD_INT 12
44697: PUSH
44698: LD_INT 13
44700: PUSH
44701: LD_INT 14
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: ST_TO_ADDR
44710: GO 45287
44712: LD_INT 24
44714: DOUBLE
44715: EQUAL
44716: IFTRUE 44720
44718: GO 44746
44720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44721: LD_ADDR_VAR 0 3
44725: PUSH
44726: LD_INT 11
44728: PUSH
44729: LD_INT 12
44731: PUSH
44732: LD_INT 13
44734: PUSH
44735: LD_INT 14
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: ST_TO_ADDR
44744: GO 45287
44746: LD_INT 30
44748: DOUBLE
44749: EQUAL
44750: IFTRUE 44754
44752: GO 44780
44754: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44755: LD_ADDR_VAR 0 3
44759: PUSH
44760: LD_INT 11
44762: PUSH
44763: LD_INT 12
44765: PUSH
44766: LD_INT 13
44768: PUSH
44769: LD_INT 14
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: ST_TO_ADDR
44778: GO 45287
44780: LD_INT 25
44782: DOUBLE
44783: EQUAL
44784: IFTRUE 44788
44786: GO 44806
44788: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44789: LD_ADDR_VAR 0 3
44793: PUSH
44794: LD_INT 13
44796: PUSH
44797: LD_INT 14
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: ST_TO_ADDR
44804: GO 45287
44806: LD_INT 27
44808: DOUBLE
44809: EQUAL
44810: IFTRUE 44814
44812: GO 44832
44814: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44815: LD_ADDR_VAR 0 3
44819: PUSH
44820: LD_INT 13
44822: PUSH
44823: LD_INT 14
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: ST_TO_ADDR
44830: GO 45287
44832: LD_INT 92
44834: DOUBLE
44835: EQUAL
44836: IFTRUE 44840
44838: GO 44866
44840: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44841: LD_ADDR_VAR 0 3
44845: PUSH
44846: LD_INT 11
44848: PUSH
44849: LD_INT 12
44851: PUSH
44852: LD_INT 13
44854: PUSH
44855: LD_INT 14
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: ST_TO_ADDR
44864: GO 45287
44866: LD_INT 28
44868: DOUBLE
44869: EQUAL
44870: IFTRUE 44874
44872: GO 44892
44874: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44875: LD_ADDR_VAR 0 3
44879: PUSH
44880: LD_INT 13
44882: PUSH
44883: LD_INT 14
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: ST_TO_ADDR
44890: GO 45287
44892: LD_INT 29
44894: DOUBLE
44895: EQUAL
44896: IFTRUE 44900
44898: GO 44918
44900: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44901: LD_ADDR_VAR 0 3
44905: PUSH
44906: LD_INT 13
44908: PUSH
44909: LD_INT 14
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: ST_TO_ADDR
44916: GO 45287
44918: LD_INT 31
44920: DOUBLE
44921: EQUAL
44922: IFTRUE 44926
44924: GO 44944
44926: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44927: LD_ADDR_VAR 0 3
44931: PUSH
44932: LD_INT 13
44934: PUSH
44935: LD_INT 14
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: ST_TO_ADDR
44942: GO 45287
44944: LD_INT 26
44946: DOUBLE
44947: EQUAL
44948: IFTRUE 44952
44950: GO 44970
44952: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44953: LD_ADDR_VAR 0 3
44957: PUSH
44958: LD_INT 13
44960: PUSH
44961: LD_INT 14
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: ST_TO_ADDR
44968: GO 45287
44970: LD_INT 42
44972: DOUBLE
44973: EQUAL
44974: IFTRUE 44978
44976: GO 45004
44978: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44979: LD_ADDR_VAR 0 3
44983: PUSH
44984: LD_INT 21
44986: PUSH
44987: LD_INT 22
44989: PUSH
44990: LD_INT 23
44992: PUSH
44993: LD_INT 24
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: ST_TO_ADDR
45002: GO 45287
45004: LD_INT 43
45006: DOUBLE
45007: EQUAL
45008: IFTRUE 45012
45010: GO 45038
45012: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45013: LD_ADDR_VAR 0 3
45017: PUSH
45018: LD_INT 21
45020: PUSH
45021: LD_INT 22
45023: PUSH
45024: LD_INT 23
45026: PUSH
45027: LD_INT 24
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: ST_TO_ADDR
45036: GO 45287
45038: LD_INT 44
45040: DOUBLE
45041: EQUAL
45042: IFTRUE 45046
45044: GO 45072
45046: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45047: LD_ADDR_VAR 0 3
45051: PUSH
45052: LD_INT 21
45054: PUSH
45055: LD_INT 22
45057: PUSH
45058: LD_INT 23
45060: PUSH
45061: LD_INT 24
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: ST_TO_ADDR
45070: GO 45287
45072: LD_INT 45
45074: DOUBLE
45075: EQUAL
45076: IFTRUE 45080
45078: GO 45106
45080: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45081: LD_ADDR_VAR 0 3
45085: PUSH
45086: LD_INT 21
45088: PUSH
45089: LD_INT 22
45091: PUSH
45092: LD_INT 23
45094: PUSH
45095: LD_INT 24
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: ST_TO_ADDR
45104: GO 45287
45106: LD_INT 49
45108: DOUBLE
45109: EQUAL
45110: IFTRUE 45114
45112: GO 45140
45114: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45115: LD_ADDR_VAR 0 3
45119: PUSH
45120: LD_INT 21
45122: PUSH
45123: LD_INT 22
45125: PUSH
45126: LD_INT 23
45128: PUSH
45129: LD_INT 24
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: ST_TO_ADDR
45138: GO 45287
45140: LD_INT 51
45142: DOUBLE
45143: EQUAL
45144: IFTRUE 45148
45146: GO 45174
45148: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45149: LD_ADDR_VAR 0 3
45153: PUSH
45154: LD_INT 21
45156: PUSH
45157: LD_INT 22
45159: PUSH
45160: LD_INT 23
45162: PUSH
45163: LD_INT 24
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: ST_TO_ADDR
45172: GO 45287
45174: LD_INT 52
45176: DOUBLE
45177: EQUAL
45178: IFTRUE 45182
45180: GO 45208
45182: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45183: LD_ADDR_VAR 0 3
45187: PUSH
45188: LD_INT 21
45190: PUSH
45191: LD_INT 22
45193: PUSH
45194: LD_INT 23
45196: PUSH
45197: LD_INT 24
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: ST_TO_ADDR
45206: GO 45287
45208: LD_INT 53
45210: DOUBLE
45211: EQUAL
45212: IFTRUE 45216
45214: GO 45234
45216: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45217: LD_ADDR_VAR 0 3
45221: PUSH
45222: LD_INT 23
45224: PUSH
45225: LD_INT 24
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: ST_TO_ADDR
45232: GO 45287
45234: LD_INT 46
45236: DOUBLE
45237: EQUAL
45238: IFTRUE 45242
45240: GO 45260
45242: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45243: LD_ADDR_VAR 0 3
45247: PUSH
45248: LD_INT 23
45250: PUSH
45251: LD_INT 24
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: ST_TO_ADDR
45258: GO 45287
45260: LD_INT 47
45262: DOUBLE
45263: EQUAL
45264: IFTRUE 45268
45266: GO 45286
45268: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45269: LD_ADDR_VAR 0 3
45273: PUSH
45274: LD_INT 23
45276: PUSH
45277: LD_INT 24
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: ST_TO_ADDR
45284: GO 45287
45286: POP
// result := ( chassis in result ) ;
45287: LD_ADDR_VAR 0 3
45291: PUSH
45292: LD_VAR 0 1
45296: PUSH
45297: LD_VAR 0 3
45301: IN
45302: ST_TO_ADDR
// end ;
45303: LD_VAR 0 3
45307: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45308: LD_INT 0
45310: PPUSH
45311: PPUSH
45312: PPUSH
45313: PPUSH
45314: PPUSH
45315: PPUSH
45316: PPUSH
// result := array ;
45317: LD_ADDR_VAR 0 5
45321: PUSH
45322: LD_VAR 0 1
45326: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45327: LD_VAR 0 1
45331: NOT
45332: PUSH
45333: LD_VAR 0 2
45337: NOT
45338: OR
45339: PUSH
45340: LD_VAR 0 3
45344: NOT
45345: OR
45346: PUSH
45347: LD_VAR 0 2
45351: PUSH
45352: LD_VAR 0 1
45356: GREATER
45357: OR
45358: PUSH
45359: LD_VAR 0 3
45363: PUSH
45364: LD_VAR 0 1
45368: GREATER
45369: OR
45370: IFFALSE 45374
// exit ;
45372: GO 45670
// if direction then
45374: LD_VAR 0 4
45378: IFFALSE 45442
// begin d := 1 ;
45380: LD_ADDR_VAR 0 9
45384: PUSH
45385: LD_INT 1
45387: ST_TO_ADDR
// if i_from > i_to then
45388: LD_VAR 0 2
45392: PUSH
45393: LD_VAR 0 3
45397: GREATER
45398: IFFALSE 45424
// length := ( array - i_from ) + i_to else
45400: LD_ADDR_VAR 0 11
45404: PUSH
45405: LD_VAR 0 1
45409: PUSH
45410: LD_VAR 0 2
45414: MINUS
45415: PUSH
45416: LD_VAR 0 3
45420: PLUS
45421: ST_TO_ADDR
45422: GO 45440
// length := i_to - i_from ;
45424: LD_ADDR_VAR 0 11
45428: PUSH
45429: LD_VAR 0 3
45433: PUSH
45434: LD_VAR 0 2
45438: MINUS
45439: ST_TO_ADDR
// end else
45440: GO 45503
// begin d := - 1 ;
45442: LD_ADDR_VAR 0 9
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: ST_TO_ADDR
// if i_from > i_to then
45451: LD_VAR 0 2
45455: PUSH
45456: LD_VAR 0 3
45460: GREATER
45461: IFFALSE 45481
// length := i_from - i_to else
45463: LD_ADDR_VAR 0 11
45467: PUSH
45468: LD_VAR 0 2
45472: PUSH
45473: LD_VAR 0 3
45477: MINUS
45478: ST_TO_ADDR
45479: GO 45503
// length := ( array - i_to ) + i_from ;
45481: LD_ADDR_VAR 0 11
45485: PUSH
45486: LD_VAR 0 1
45490: PUSH
45491: LD_VAR 0 3
45495: MINUS
45496: PUSH
45497: LD_VAR 0 2
45501: PLUS
45502: ST_TO_ADDR
// end ; if not length then
45503: LD_VAR 0 11
45507: NOT
45508: IFFALSE 45512
// exit ;
45510: GO 45670
// tmp := array ;
45512: LD_ADDR_VAR 0 10
45516: PUSH
45517: LD_VAR 0 1
45521: ST_TO_ADDR
// for i = 1 to length do
45522: LD_ADDR_VAR 0 6
45526: PUSH
45527: DOUBLE
45528: LD_INT 1
45530: DEC
45531: ST_TO_ADDR
45532: LD_VAR 0 11
45536: PUSH
45537: FOR_TO
45538: IFFALSE 45658
// begin for j = 1 to array do
45540: LD_ADDR_VAR 0 7
45544: PUSH
45545: DOUBLE
45546: LD_INT 1
45548: DEC
45549: ST_TO_ADDR
45550: LD_VAR 0 1
45554: PUSH
45555: FOR_TO
45556: IFFALSE 45644
// begin k := j + d ;
45558: LD_ADDR_VAR 0 8
45562: PUSH
45563: LD_VAR 0 7
45567: PUSH
45568: LD_VAR 0 9
45572: PLUS
45573: ST_TO_ADDR
// if k > array then
45574: LD_VAR 0 8
45578: PUSH
45579: LD_VAR 0 1
45583: GREATER
45584: IFFALSE 45594
// k := 1 ;
45586: LD_ADDR_VAR 0 8
45590: PUSH
45591: LD_INT 1
45593: ST_TO_ADDR
// if not k then
45594: LD_VAR 0 8
45598: NOT
45599: IFFALSE 45611
// k := array ;
45601: LD_ADDR_VAR 0 8
45605: PUSH
45606: LD_VAR 0 1
45610: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45611: LD_ADDR_VAR 0 10
45615: PUSH
45616: LD_VAR 0 10
45620: PPUSH
45621: LD_VAR 0 8
45625: PPUSH
45626: LD_VAR 0 1
45630: PUSH
45631: LD_VAR 0 7
45635: ARRAY
45636: PPUSH
45637: CALL_OW 1
45641: ST_TO_ADDR
// end ;
45642: GO 45555
45644: POP
45645: POP
// array := tmp ;
45646: LD_ADDR_VAR 0 1
45650: PUSH
45651: LD_VAR 0 10
45655: ST_TO_ADDR
// end ;
45656: GO 45537
45658: POP
45659: POP
// result := array ;
45660: LD_ADDR_VAR 0 5
45664: PUSH
45665: LD_VAR 0 1
45669: ST_TO_ADDR
// end ;
45670: LD_VAR 0 5
45674: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45675: LD_INT 0
45677: PPUSH
45678: PPUSH
// result := 0 ;
45679: LD_ADDR_VAR 0 3
45683: PUSH
45684: LD_INT 0
45686: ST_TO_ADDR
// if not array or not value in array then
45687: LD_VAR 0 1
45691: NOT
45692: PUSH
45693: LD_VAR 0 2
45697: PUSH
45698: LD_VAR 0 1
45702: IN
45703: NOT
45704: OR
45705: IFFALSE 45709
// exit ;
45707: GO 45763
// for i = 1 to array do
45709: LD_ADDR_VAR 0 4
45713: PUSH
45714: DOUBLE
45715: LD_INT 1
45717: DEC
45718: ST_TO_ADDR
45719: LD_VAR 0 1
45723: PUSH
45724: FOR_TO
45725: IFFALSE 45761
// if value = array [ i ] then
45727: LD_VAR 0 2
45731: PUSH
45732: LD_VAR 0 1
45736: PUSH
45737: LD_VAR 0 4
45741: ARRAY
45742: EQUAL
45743: IFFALSE 45759
// begin result := i ;
45745: LD_ADDR_VAR 0 3
45749: PUSH
45750: LD_VAR 0 4
45754: ST_TO_ADDR
// exit ;
45755: POP
45756: POP
45757: GO 45763
// end ;
45759: GO 45724
45761: POP
45762: POP
// end ;
45763: LD_VAR 0 3
45767: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45768: LD_INT 0
45770: PPUSH
// vc_chassis := chassis ;
45771: LD_ADDR_OWVAR 37
45775: PUSH
45776: LD_VAR 0 1
45780: ST_TO_ADDR
// vc_engine := engine ;
45781: LD_ADDR_OWVAR 39
45785: PUSH
45786: LD_VAR 0 2
45790: ST_TO_ADDR
// vc_control := control ;
45791: LD_ADDR_OWVAR 38
45795: PUSH
45796: LD_VAR 0 3
45800: ST_TO_ADDR
// vc_weapon := weapon ;
45801: LD_ADDR_OWVAR 40
45805: PUSH
45806: LD_VAR 0 4
45810: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45811: LD_ADDR_OWVAR 41
45815: PUSH
45816: LD_VAR 0 5
45820: ST_TO_ADDR
// end ;
45821: LD_VAR 0 6
45825: RET
// export function WantPlant ( unit ) ; var task ; begin
45826: LD_INT 0
45828: PPUSH
45829: PPUSH
// result := false ;
45830: LD_ADDR_VAR 0 2
45834: PUSH
45835: LD_INT 0
45837: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45838: LD_ADDR_VAR 0 3
45842: PUSH
45843: LD_VAR 0 1
45847: PPUSH
45848: CALL_OW 437
45852: ST_TO_ADDR
// if task then
45853: LD_VAR 0 3
45857: IFFALSE 45885
// if task [ 1 ] [ 1 ] = p then
45859: LD_VAR 0 3
45863: PUSH
45864: LD_INT 1
45866: ARRAY
45867: PUSH
45868: LD_INT 1
45870: ARRAY
45871: PUSH
45872: LD_STRING p
45874: EQUAL
45875: IFFALSE 45885
// result := true ;
45877: LD_ADDR_VAR 0 2
45881: PUSH
45882: LD_INT 1
45884: ST_TO_ADDR
// end ;
45885: LD_VAR 0 2
45889: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45890: LD_INT 0
45892: PPUSH
45893: PPUSH
45894: PPUSH
45895: PPUSH
// if pos < 1 then
45896: LD_VAR 0 2
45900: PUSH
45901: LD_INT 1
45903: LESS
45904: IFFALSE 45908
// exit ;
45906: GO 46211
// if pos = 1 then
45908: LD_VAR 0 2
45912: PUSH
45913: LD_INT 1
45915: EQUAL
45916: IFFALSE 45949
// result := Replace ( arr , pos [ 1 ] , value ) else
45918: LD_ADDR_VAR 0 4
45922: PUSH
45923: LD_VAR 0 1
45927: PPUSH
45928: LD_VAR 0 2
45932: PUSH
45933: LD_INT 1
45935: ARRAY
45936: PPUSH
45937: LD_VAR 0 3
45941: PPUSH
45942: CALL_OW 1
45946: ST_TO_ADDR
45947: GO 46211
// begin tmp := arr ;
45949: LD_ADDR_VAR 0 6
45953: PUSH
45954: LD_VAR 0 1
45958: ST_TO_ADDR
// s_arr := [ tmp ] ;
45959: LD_ADDR_VAR 0 7
45963: PUSH
45964: LD_VAR 0 6
45968: PUSH
45969: EMPTY
45970: LIST
45971: ST_TO_ADDR
// for i = 1 to pos - 1 do
45972: LD_ADDR_VAR 0 5
45976: PUSH
45977: DOUBLE
45978: LD_INT 1
45980: DEC
45981: ST_TO_ADDR
45982: LD_VAR 0 2
45986: PUSH
45987: LD_INT 1
45989: MINUS
45990: PUSH
45991: FOR_TO
45992: IFFALSE 46037
// begin tmp := tmp [ pos [ i ] ] ;
45994: LD_ADDR_VAR 0 6
45998: PUSH
45999: LD_VAR 0 6
46003: PUSH
46004: LD_VAR 0 2
46008: PUSH
46009: LD_VAR 0 5
46013: ARRAY
46014: ARRAY
46015: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46016: LD_ADDR_VAR 0 7
46020: PUSH
46021: LD_VAR 0 7
46025: PUSH
46026: LD_VAR 0 6
46030: PUSH
46031: EMPTY
46032: LIST
46033: ADD
46034: ST_TO_ADDR
// end ;
46035: GO 45991
46037: POP
46038: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46039: LD_ADDR_VAR 0 6
46043: PUSH
46044: LD_VAR 0 6
46048: PPUSH
46049: LD_VAR 0 2
46053: PUSH
46054: LD_VAR 0 2
46058: ARRAY
46059: PPUSH
46060: LD_VAR 0 3
46064: PPUSH
46065: CALL_OW 1
46069: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46070: LD_ADDR_VAR 0 7
46074: PUSH
46075: LD_VAR 0 7
46079: PPUSH
46080: LD_VAR 0 7
46084: PPUSH
46085: LD_VAR 0 6
46089: PPUSH
46090: CALL_OW 1
46094: ST_TO_ADDR
// for i = s_arr downto 2 do
46095: LD_ADDR_VAR 0 5
46099: PUSH
46100: DOUBLE
46101: LD_VAR 0 7
46105: INC
46106: ST_TO_ADDR
46107: LD_INT 2
46109: PUSH
46110: FOR_DOWNTO
46111: IFFALSE 46195
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46113: LD_ADDR_VAR 0 6
46117: PUSH
46118: LD_VAR 0 7
46122: PUSH
46123: LD_VAR 0 5
46127: PUSH
46128: LD_INT 1
46130: MINUS
46131: ARRAY
46132: PPUSH
46133: LD_VAR 0 2
46137: PUSH
46138: LD_VAR 0 5
46142: PUSH
46143: LD_INT 1
46145: MINUS
46146: ARRAY
46147: PPUSH
46148: LD_VAR 0 7
46152: PUSH
46153: LD_VAR 0 5
46157: ARRAY
46158: PPUSH
46159: CALL_OW 1
46163: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46164: LD_ADDR_VAR 0 7
46168: PUSH
46169: LD_VAR 0 7
46173: PPUSH
46174: LD_VAR 0 5
46178: PUSH
46179: LD_INT 1
46181: MINUS
46182: PPUSH
46183: LD_VAR 0 6
46187: PPUSH
46188: CALL_OW 1
46192: ST_TO_ADDR
// end ;
46193: GO 46110
46195: POP
46196: POP
// result := s_arr [ 1 ] ;
46197: LD_ADDR_VAR 0 4
46201: PUSH
46202: LD_VAR 0 7
46206: PUSH
46207: LD_INT 1
46209: ARRAY
46210: ST_TO_ADDR
// end ; end ;
46211: LD_VAR 0 4
46215: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46216: LD_INT 0
46218: PPUSH
46219: PPUSH
// if not list then
46220: LD_VAR 0 1
46224: NOT
46225: IFFALSE 46229
// exit ;
46227: GO 46320
// i := list [ pos1 ] ;
46229: LD_ADDR_VAR 0 5
46233: PUSH
46234: LD_VAR 0 1
46238: PUSH
46239: LD_VAR 0 2
46243: ARRAY
46244: ST_TO_ADDR
// if not i then
46245: LD_VAR 0 5
46249: NOT
46250: IFFALSE 46254
// exit ;
46252: GO 46320
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46254: LD_ADDR_VAR 0 1
46258: PUSH
46259: LD_VAR 0 1
46263: PPUSH
46264: LD_VAR 0 2
46268: PPUSH
46269: LD_VAR 0 1
46273: PUSH
46274: LD_VAR 0 3
46278: ARRAY
46279: PPUSH
46280: CALL_OW 1
46284: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46285: LD_ADDR_VAR 0 1
46289: PUSH
46290: LD_VAR 0 1
46294: PPUSH
46295: LD_VAR 0 3
46299: PPUSH
46300: LD_VAR 0 5
46304: PPUSH
46305: CALL_OW 1
46309: ST_TO_ADDR
// result := list ;
46310: LD_ADDR_VAR 0 4
46314: PUSH
46315: LD_VAR 0 1
46319: ST_TO_ADDR
// end ;
46320: LD_VAR 0 4
46324: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46325: LD_INT 0
46327: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46328: LD_ADDR_VAR 0 5
46332: PUSH
46333: LD_VAR 0 1
46337: PPUSH
46338: CALL_OW 250
46342: PPUSH
46343: LD_VAR 0 1
46347: PPUSH
46348: CALL_OW 251
46352: PPUSH
46353: LD_VAR 0 2
46357: PPUSH
46358: LD_VAR 0 3
46362: PPUSH
46363: LD_VAR 0 4
46367: PPUSH
46368: CALL 46746 0 5
46372: ST_TO_ADDR
// end ;
46373: LD_VAR 0 5
46377: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46378: LD_INT 0
46380: PPUSH
46381: PPUSH
46382: PPUSH
46383: PPUSH
// if not list or not unit then
46384: LD_VAR 0 2
46388: NOT
46389: PUSH
46390: LD_VAR 0 1
46394: NOT
46395: OR
46396: IFFALSE 46400
// exit ;
46398: GO 46741
// result := [ ] ;
46400: LD_ADDR_VAR 0 5
46404: PUSH
46405: EMPTY
46406: ST_TO_ADDR
// for i in list do
46407: LD_ADDR_VAR 0 6
46411: PUSH
46412: LD_VAR 0 2
46416: PUSH
46417: FOR_IN
46418: IFFALSE 46636
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46420: LD_ADDR_VAR 0 8
46424: PUSH
46425: LD_VAR 0 1
46429: PPUSH
46430: LD_VAR 0 6
46434: PUSH
46435: LD_INT 1
46437: ARRAY
46438: PPUSH
46439: LD_VAR 0 6
46443: PUSH
46444: LD_INT 2
46446: ARRAY
46447: PPUSH
46448: CALL_OW 297
46452: ST_TO_ADDR
// if not Count ( result ) then
46453: LD_VAR 0 5
46457: PPUSH
46458: CALL 43030 0 1
46462: NOT
46463: IFFALSE 46496
// begin result := Join ( result , [ i , tmp ] ) ;
46465: LD_ADDR_VAR 0 5
46469: PUSH
46470: LD_VAR 0 5
46474: PPUSH
46475: LD_VAR 0 6
46479: PUSH
46480: LD_VAR 0 8
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PPUSH
46489: CALL 78619 0 2
46493: ST_TO_ADDR
// continue ;
46494: GO 46417
// end ; if result [ result ] [ 2 ] <= tmp then
46496: LD_VAR 0 5
46500: PUSH
46501: LD_VAR 0 5
46505: ARRAY
46506: PUSH
46507: LD_INT 2
46509: ARRAY
46510: PUSH
46511: LD_VAR 0 8
46515: LESSEQUAL
46516: IFFALSE 46549
// result := Join ( result , [ i , tmp ] ) else
46518: LD_ADDR_VAR 0 5
46522: PUSH
46523: LD_VAR 0 5
46527: PPUSH
46528: LD_VAR 0 6
46532: PUSH
46533: LD_VAR 0 8
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PPUSH
46542: CALL 78619 0 2
46546: ST_TO_ADDR
46547: GO 46634
// begin for j := 1 to Count ( result ) do
46549: LD_ADDR_VAR 0 7
46553: PUSH
46554: DOUBLE
46555: LD_INT 1
46557: DEC
46558: ST_TO_ADDR
46559: LD_VAR 0 5
46563: PPUSH
46564: CALL 43030 0 1
46568: PUSH
46569: FOR_TO
46570: IFFALSE 46632
// begin if tmp < result [ j ] [ 2 ] then
46572: LD_VAR 0 8
46576: PUSH
46577: LD_VAR 0 5
46581: PUSH
46582: LD_VAR 0 7
46586: ARRAY
46587: PUSH
46588: LD_INT 2
46590: ARRAY
46591: LESS
46592: IFFALSE 46630
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46594: LD_ADDR_VAR 0 5
46598: PUSH
46599: LD_VAR 0 5
46603: PPUSH
46604: LD_VAR 0 7
46608: PPUSH
46609: LD_VAR 0 6
46613: PUSH
46614: LD_VAR 0 8
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PPUSH
46623: CALL_OW 2
46627: ST_TO_ADDR
// break ;
46628: GO 46632
// end ; end ;
46630: GO 46569
46632: POP
46633: POP
// end ; end ;
46634: GO 46417
46636: POP
46637: POP
// if result and not asc then
46638: LD_VAR 0 5
46642: PUSH
46643: LD_VAR 0 3
46647: NOT
46648: AND
46649: IFFALSE 46666
// result := ReverseArray ( result ) ;
46651: LD_ADDR_VAR 0 5
46655: PUSH
46656: LD_VAR 0 5
46660: PPUSH
46661: CALL 73906 0 1
46665: ST_TO_ADDR
// tmp := [ ] ;
46666: LD_ADDR_VAR 0 8
46670: PUSH
46671: EMPTY
46672: ST_TO_ADDR
// if mode then
46673: LD_VAR 0 4
46677: IFFALSE 46741
// begin for i := 1 to result do
46679: LD_ADDR_VAR 0 6
46683: PUSH
46684: DOUBLE
46685: LD_INT 1
46687: DEC
46688: ST_TO_ADDR
46689: LD_VAR 0 5
46693: PUSH
46694: FOR_TO
46695: IFFALSE 46729
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46697: LD_ADDR_VAR 0 8
46701: PUSH
46702: LD_VAR 0 8
46706: PPUSH
46707: LD_VAR 0 5
46711: PUSH
46712: LD_VAR 0 6
46716: ARRAY
46717: PUSH
46718: LD_INT 1
46720: ARRAY
46721: PPUSH
46722: CALL 78619 0 2
46726: ST_TO_ADDR
46727: GO 46694
46729: POP
46730: POP
// result := tmp ;
46731: LD_ADDR_VAR 0 5
46735: PUSH
46736: LD_VAR 0 8
46740: ST_TO_ADDR
// end ; end ;
46741: LD_VAR 0 5
46745: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46746: LD_INT 0
46748: PPUSH
46749: PPUSH
46750: PPUSH
46751: PPUSH
// if not list then
46752: LD_VAR 0 3
46756: NOT
46757: IFFALSE 46761
// exit ;
46759: GO 47149
// result := [ ] ;
46761: LD_ADDR_VAR 0 6
46765: PUSH
46766: EMPTY
46767: ST_TO_ADDR
// for i in list do
46768: LD_ADDR_VAR 0 7
46772: PUSH
46773: LD_VAR 0 3
46777: PUSH
46778: FOR_IN
46779: IFFALSE 46981
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46781: LD_ADDR_VAR 0 9
46785: PUSH
46786: LD_VAR 0 7
46790: PPUSH
46791: LD_VAR 0 1
46795: PPUSH
46796: LD_VAR 0 2
46800: PPUSH
46801: CALL_OW 297
46805: ST_TO_ADDR
// if not result then
46806: LD_VAR 0 6
46810: NOT
46811: IFFALSE 46837
// result := [ [ i , tmp ] ] else
46813: LD_ADDR_VAR 0 6
46817: PUSH
46818: LD_VAR 0 7
46822: PUSH
46823: LD_VAR 0 9
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: EMPTY
46833: LIST
46834: ST_TO_ADDR
46835: GO 46979
// begin if result [ result ] [ 2 ] < tmp then
46837: LD_VAR 0 6
46841: PUSH
46842: LD_VAR 0 6
46846: ARRAY
46847: PUSH
46848: LD_INT 2
46850: ARRAY
46851: PUSH
46852: LD_VAR 0 9
46856: LESS
46857: IFFALSE 46899
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46859: LD_ADDR_VAR 0 6
46863: PUSH
46864: LD_VAR 0 6
46868: PPUSH
46869: LD_VAR 0 6
46873: PUSH
46874: LD_INT 1
46876: PLUS
46877: PPUSH
46878: LD_VAR 0 7
46882: PUSH
46883: LD_VAR 0 9
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PPUSH
46892: CALL_OW 2
46896: ST_TO_ADDR
46897: GO 46979
// for j = 1 to result do
46899: LD_ADDR_VAR 0 8
46903: PUSH
46904: DOUBLE
46905: LD_INT 1
46907: DEC
46908: ST_TO_ADDR
46909: LD_VAR 0 6
46913: PUSH
46914: FOR_TO
46915: IFFALSE 46977
// begin if tmp < result [ j ] [ 2 ] then
46917: LD_VAR 0 9
46921: PUSH
46922: LD_VAR 0 6
46926: PUSH
46927: LD_VAR 0 8
46931: ARRAY
46932: PUSH
46933: LD_INT 2
46935: ARRAY
46936: LESS
46937: IFFALSE 46975
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46939: LD_ADDR_VAR 0 6
46943: PUSH
46944: LD_VAR 0 6
46948: PPUSH
46949: LD_VAR 0 8
46953: PPUSH
46954: LD_VAR 0 7
46958: PUSH
46959: LD_VAR 0 9
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PPUSH
46968: CALL_OW 2
46972: ST_TO_ADDR
// break ;
46973: GO 46977
// end ; end ;
46975: GO 46914
46977: POP
46978: POP
// end ; end ;
46979: GO 46778
46981: POP
46982: POP
// if result and not asc then
46983: LD_VAR 0 6
46987: PUSH
46988: LD_VAR 0 4
46992: NOT
46993: AND
46994: IFFALSE 47069
// begin tmp := result ;
46996: LD_ADDR_VAR 0 9
47000: PUSH
47001: LD_VAR 0 6
47005: ST_TO_ADDR
// for i = tmp downto 1 do
47006: LD_ADDR_VAR 0 7
47010: PUSH
47011: DOUBLE
47012: LD_VAR 0 9
47016: INC
47017: ST_TO_ADDR
47018: LD_INT 1
47020: PUSH
47021: FOR_DOWNTO
47022: IFFALSE 47067
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47024: LD_ADDR_VAR 0 6
47028: PUSH
47029: LD_VAR 0 6
47033: PPUSH
47034: LD_VAR 0 9
47038: PUSH
47039: LD_VAR 0 7
47043: MINUS
47044: PUSH
47045: LD_INT 1
47047: PLUS
47048: PPUSH
47049: LD_VAR 0 9
47053: PUSH
47054: LD_VAR 0 7
47058: ARRAY
47059: PPUSH
47060: CALL_OW 1
47064: ST_TO_ADDR
47065: GO 47021
47067: POP
47068: POP
// end ; tmp := [ ] ;
47069: LD_ADDR_VAR 0 9
47073: PUSH
47074: EMPTY
47075: ST_TO_ADDR
// if mode then
47076: LD_VAR 0 5
47080: IFFALSE 47149
// begin for i = 1 to result do
47082: LD_ADDR_VAR 0 7
47086: PUSH
47087: DOUBLE
47088: LD_INT 1
47090: DEC
47091: ST_TO_ADDR
47092: LD_VAR 0 6
47096: PUSH
47097: FOR_TO
47098: IFFALSE 47137
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47100: LD_ADDR_VAR 0 9
47104: PUSH
47105: LD_VAR 0 9
47109: PPUSH
47110: LD_VAR 0 7
47114: PPUSH
47115: LD_VAR 0 6
47119: PUSH
47120: LD_VAR 0 7
47124: ARRAY
47125: PUSH
47126: LD_INT 1
47128: ARRAY
47129: PPUSH
47130: CALL_OW 1
47134: ST_TO_ADDR
47135: GO 47097
47137: POP
47138: POP
// result := tmp ;
47139: LD_ADDR_VAR 0 6
47143: PUSH
47144: LD_VAR 0 9
47148: ST_TO_ADDR
// end ; end ;
47149: LD_VAR 0 6
47153: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47154: LD_INT 0
47156: PPUSH
47157: PPUSH
47158: PPUSH
47159: PPUSH
47160: PPUSH
47161: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47162: LD_ADDR_VAR 0 5
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: ST_TO_ADDR
// if not x or not y then
47184: LD_VAR 0 2
47188: NOT
47189: PUSH
47190: LD_VAR 0 3
47194: NOT
47195: OR
47196: IFFALSE 47200
// exit ;
47198: GO 48850
// if not range then
47200: LD_VAR 0 4
47204: NOT
47205: IFFALSE 47215
// range := 10 ;
47207: LD_ADDR_VAR 0 4
47211: PUSH
47212: LD_INT 10
47214: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47215: LD_ADDR_VAR 0 8
47219: PUSH
47220: LD_INT 81
47222: PUSH
47223: LD_VAR 0 1
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 92
47234: PUSH
47235: LD_VAR 0 2
47239: PUSH
47240: LD_VAR 0 3
47244: PUSH
47245: LD_VAR 0 4
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 3
47258: PUSH
47259: LD_INT 21
47261: PUSH
47262: LD_INT 3
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: LIST
47277: PPUSH
47278: CALL_OW 69
47282: ST_TO_ADDR
// if not tmp then
47283: LD_VAR 0 8
47287: NOT
47288: IFFALSE 47292
// exit ;
47290: GO 48850
// for i in tmp do
47292: LD_ADDR_VAR 0 6
47296: PUSH
47297: LD_VAR 0 8
47301: PUSH
47302: FOR_IN
47303: IFFALSE 48825
// begin points := [ 0 , 0 , 0 ] ;
47305: LD_ADDR_VAR 0 9
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: LIST
47323: ST_TO_ADDR
// bpoints := 1 ;
47324: LD_ADDR_VAR 0 10
47328: PUSH
47329: LD_INT 1
47331: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47332: LD_VAR 0 6
47336: PPUSH
47337: CALL_OW 247
47341: PUSH
47342: LD_INT 1
47344: DOUBLE
47345: EQUAL
47346: IFTRUE 47350
47348: GO 47928
47350: POP
// begin if GetClass ( i ) = 1 then
47351: LD_VAR 0 6
47355: PPUSH
47356: CALL_OW 257
47360: PUSH
47361: LD_INT 1
47363: EQUAL
47364: IFFALSE 47385
// points := [ 10 , 5 , 3 ] ;
47366: LD_ADDR_VAR 0 9
47370: PUSH
47371: LD_INT 10
47373: PUSH
47374: LD_INT 5
47376: PUSH
47377: LD_INT 3
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: LIST
47384: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47385: LD_VAR 0 6
47389: PPUSH
47390: CALL_OW 257
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: LD_INT 3
47400: PUSH
47401: LD_INT 4
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: LIST
47408: IN
47409: IFFALSE 47430
// points := [ 3 , 2 , 1 ] ;
47411: LD_ADDR_VAR 0 9
47415: PUSH
47416: LD_INT 3
47418: PUSH
47419: LD_INT 2
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: LIST
47429: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47430: LD_VAR 0 6
47434: PPUSH
47435: CALL_OW 257
47439: PUSH
47440: LD_INT 5
47442: EQUAL
47443: IFFALSE 47464
// points := [ 130 , 5 , 2 ] ;
47445: LD_ADDR_VAR 0 9
47449: PUSH
47450: LD_INT 130
47452: PUSH
47453: LD_INT 5
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: LIST
47463: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47464: LD_VAR 0 6
47468: PPUSH
47469: CALL_OW 257
47473: PUSH
47474: LD_INT 8
47476: EQUAL
47477: IFFALSE 47498
// points := [ 35 , 35 , 30 ] ;
47479: LD_ADDR_VAR 0 9
47483: PUSH
47484: LD_INT 35
47486: PUSH
47487: LD_INT 35
47489: PUSH
47490: LD_INT 30
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: LIST
47497: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47498: LD_VAR 0 6
47502: PPUSH
47503: CALL_OW 257
47507: PUSH
47508: LD_INT 9
47510: EQUAL
47511: IFFALSE 47532
// points := [ 20 , 55 , 40 ] ;
47513: LD_ADDR_VAR 0 9
47517: PUSH
47518: LD_INT 20
47520: PUSH
47521: LD_INT 55
47523: PUSH
47524: LD_INT 40
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: LIST
47531: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47532: LD_VAR 0 6
47536: PPUSH
47537: CALL_OW 257
47541: PUSH
47542: LD_INT 12
47544: PUSH
47545: LD_INT 16
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: IN
47552: IFFALSE 47573
// points := [ 5 , 3 , 2 ] ;
47554: LD_ADDR_VAR 0 9
47558: PUSH
47559: LD_INT 5
47561: PUSH
47562: LD_INT 3
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: LIST
47572: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47573: LD_VAR 0 6
47577: PPUSH
47578: CALL_OW 257
47582: PUSH
47583: LD_INT 17
47585: EQUAL
47586: IFFALSE 47607
// points := [ 100 , 50 , 75 ] ;
47588: LD_ADDR_VAR 0 9
47592: PUSH
47593: LD_INT 100
47595: PUSH
47596: LD_INT 50
47598: PUSH
47599: LD_INT 75
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: LIST
47606: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47607: LD_VAR 0 6
47611: PPUSH
47612: CALL_OW 257
47616: PUSH
47617: LD_INT 15
47619: EQUAL
47620: IFFALSE 47641
// points := [ 10 , 5 , 3 ] ;
47622: LD_ADDR_VAR 0 9
47626: PUSH
47627: LD_INT 10
47629: PUSH
47630: LD_INT 5
47632: PUSH
47633: LD_INT 3
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: LIST
47640: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47641: LD_VAR 0 6
47645: PPUSH
47646: CALL_OW 257
47650: PUSH
47651: LD_INT 14
47653: EQUAL
47654: IFFALSE 47675
// points := [ 10 , 0 , 0 ] ;
47656: LD_ADDR_VAR 0 9
47660: PUSH
47661: LD_INT 10
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: LIST
47674: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47675: LD_VAR 0 6
47679: PPUSH
47680: CALL_OW 257
47684: PUSH
47685: LD_INT 11
47687: EQUAL
47688: IFFALSE 47709
// points := [ 30 , 10 , 5 ] ;
47690: LD_ADDR_VAR 0 9
47694: PUSH
47695: LD_INT 30
47697: PUSH
47698: LD_INT 10
47700: PUSH
47701: LD_INT 5
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: LIST
47708: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47709: LD_VAR 0 1
47713: PPUSH
47714: LD_INT 5
47716: PPUSH
47717: CALL_OW 321
47721: PUSH
47722: LD_INT 2
47724: EQUAL
47725: IFFALSE 47742
// bpoints := bpoints * 1.8 ;
47727: LD_ADDR_VAR 0 10
47731: PUSH
47732: LD_VAR 0 10
47736: PUSH
47737: LD_REAL  1.80000000000000E+0000
47740: MUL
47741: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47742: LD_VAR 0 6
47746: PPUSH
47747: CALL_OW 257
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: LD_INT 3
47760: PUSH
47761: LD_INT 4
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: IN
47770: PUSH
47771: LD_VAR 0 1
47775: PPUSH
47776: LD_INT 51
47778: PPUSH
47779: CALL_OW 321
47783: PUSH
47784: LD_INT 2
47786: EQUAL
47787: AND
47788: IFFALSE 47805
// bpoints := bpoints * 1.2 ;
47790: LD_ADDR_VAR 0 10
47794: PUSH
47795: LD_VAR 0 10
47799: PUSH
47800: LD_REAL  1.20000000000000E+0000
47803: MUL
47804: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47805: LD_VAR 0 6
47809: PPUSH
47810: CALL_OW 257
47814: PUSH
47815: LD_INT 5
47817: PUSH
47818: LD_INT 7
47820: PUSH
47821: LD_INT 9
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: LIST
47828: IN
47829: PUSH
47830: LD_VAR 0 1
47834: PPUSH
47835: LD_INT 52
47837: PPUSH
47838: CALL_OW 321
47842: PUSH
47843: LD_INT 2
47845: EQUAL
47846: AND
47847: IFFALSE 47864
// bpoints := bpoints * 1.5 ;
47849: LD_ADDR_VAR 0 10
47853: PUSH
47854: LD_VAR 0 10
47858: PUSH
47859: LD_REAL  1.50000000000000E+0000
47862: MUL
47863: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47864: LD_VAR 0 1
47868: PPUSH
47869: LD_INT 66
47871: PPUSH
47872: CALL_OW 321
47876: PUSH
47877: LD_INT 2
47879: EQUAL
47880: IFFALSE 47897
// bpoints := bpoints * 1.1 ;
47882: LD_ADDR_VAR 0 10
47886: PUSH
47887: LD_VAR 0 10
47891: PUSH
47892: LD_REAL  1.10000000000000E+0000
47895: MUL
47896: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47897: LD_ADDR_VAR 0 10
47901: PUSH
47902: LD_VAR 0 10
47906: PUSH
47907: LD_VAR 0 6
47911: PPUSH
47912: LD_INT 1
47914: PPUSH
47915: CALL_OW 259
47919: PUSH
47920: LD_REAL  1.15000000000000E+0000
47923: MUL
47924: MUL
47925: ST_TO_ADDR
// end ; unit_vehicle :
47926: GO 48754
47928: LD_INT 2
47930: DOUBLE
47931: EQUAL
47932: IFTRUE 47936
47934: GO 48742
47936: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47937: LD_VAR 0 6
47941: PPUSH
47942: CALL_OW 264
47946: PUSH
47947: LD_INT 2
47949: PUSH
47950: LD_INT 42
47952: PUSH
47953: LD_INT 24
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: LIST
47960: IN
47961: IFFALSE 47982
// points := [ 25 , 5 , 3 ] ;
47963: LD_ADDR_VAR 0 9
47967: PUSH
47968: LD_INT 25
47970: PUSH
47971: LD_INT 5
47973: PUSH
47974: LD_INT 3
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: LIST
47981: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47982: LD_VAR 0 6
47986: PPUSH
47987: CALL_OW 264
47991: PUSH
47992: LD_INT 4
47994: PUSH
47995: LD_INT 43
47997: PUSH
47998: LD_INT 25
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: LIST
48005: IN
48006: IFFALSE 48027
// points := [ 40 , 15 , 5 ] ;
48008: LD_ADDR_VAR 0 9
48012: PUSH
48013: LD_INT 40
48015: PUSH
48016: LD_INT 15
48018: PUSH
48019: LD_INT 5
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: LIST
48026: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48027: LD_VAR 0 6
48031: PPUSH
48032: CALL_OW 264
48036: PUSH
48037: LD_INT 3
48039: PUSH
48040: LD_INT 23
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: IN
48047: IFFALSE 48068
// points := [ 7 , 25 , 8 ] ;
48049: LD_ADDR_VAR 0 9
48053: PUSH
48054: LD_INT 7
48056: PUSH
48057: LD_INT 25
48059: PUSH
48060: LD_INT 8
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: LIST
48067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48068: LD_VAR 0 6
48072: PPUSH
48073: CALL_OW 264
48077: PUSH
48078: LD_INT 5
48080: PUSH
48081: LD_INT 27
48083: PUSH
48084: LD_INT 44
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: LIST
48091: IN
48092: IFFALSE 48113
// points := [ 14 , 50 , 16 ] ;
48094: LD_ADDR_VAR 0 9
48098: PUSH
48099: LD_INT 14
48101: PUSH
48102: LD_INT 50
48104: PUSH
48105: LD_INT 16
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: LIST
48112: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48113: LD_VAR 0 6
48117: PPUSH
48118: CALL_OW 264
48122: PUSH
48123: LD_INT 6
48125: PUSH
48126: LD_INT 46
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: IN
48133: IFFALSE 48154
// points := [ 32 , 120 , 70 ] ;
48135: LD_ADDR_VAR 0 9
48139: PUSH
48140: LD_INT 32
48142: PUSH
48143: LD_INT 120
48145: PUSH
48146: LD_INT 70
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: LIST
48153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48154: LD_VAR 0 6
48158: PPUSH
48159: CALL_OW 264
48163: PUSH
48164: LD_INT 7
48166: PUSH
48167: LD_INT 28
48169: PUSH
48170: LD_INT 45
48172: PUSH
48173: LD_INT 92
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: IN
48182: IFFALSE 48203
// points := [ 35 , 20 , 45 ] ;
48184: LD_ADDR_VAR 0 9
48188: PUSH
48189: LD_INT 35
48191: PUSH
48192: LD_INT 20
48194: PUSH
48195: LD_INT 45
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: LIST
48202: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48203: LD_VAR 0 6
48207: PPUSH
48208: CALL_OW 264
48212: PUSH
48213: LD_INT 47
48215: PUSH
48216: EMPTY
48217: LIST
48218: IN
48219: IFFALSE 48240
// points := [ 67 , 45 , 75 ] ;
48221: LD_ADDR_VAR 0 9
48225: PUSH
48226: LD_INT 67
48228: PUSH
48229: LD_INT 45
48231: PUSH
48232: LD_INT 75
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: LIST
48239: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48240: LD_VAR 0 6
48244: PPUSH
48245: CALL_OW 264
48249: PUSH
48250: LD_INT 26
48252: PUSH
48253: EMPTY
48254: LIST
48255: IN
48256: IFFALSE 48277
// points := [ 120 , 30 , 80 ] ;
48258: LD_ADDR_VAR 0 9
48262: PUSH
48263: LD_INT 120
48265: PUSH
48266: LD_INT 30
48268: PUSH
48269: LD_INT 80
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: LIST
48276: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48277: LD_VAR 0 6
48281: PPUSH
48282: CALL_OW 264
48286: PUSH
48287: LD_INT 22
48289: PUSH
48290: EMPTY
48291: LIST
48292: IN
48293: IFFALSE 48314
// points := [ 40 , 1 , 1 ] ;
48295: LD_ADDR_VAR 0 9
48299: PUSH
48300: LD_INT 40
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: LIST
48313: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48314: LD_VAR 0 6
48318: PPUSH
48319: CALL_OW 264
48323: PUSH
48324: LD_INT 29
48326: PUSH
48327: EMPTY
48328: LIST
48329: IN
48330: IFFALSE 48351
// points := [ 70 , 200 , 400 ] ;
48332: LD_ADDR_VAR 0 9
48336: PUSH
48337: LD_INT 70
48339: PUSH
48340: LD_INT 200
48342: PUSH
48343: LD_INT 400
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: LIST
48350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48351: LD_VAR 0 6
48355: PPUSH
48356: CALL_OW 264
48360: PUSH
48361: LD_INT 14
48363: PUSH
48364: LD_INT 53
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: IN
48371: IFFALSE 48392
// points := [ 40 , 10 , 20 ] ;
48373: LD_ADDR_VAR 0 9
48377: PUSH
48378: LD_INT 40
48380: PUSH
48381: LD_INT 10
48383: PUSH
48384: LD_INT 20
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: LIST
48391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48392: LD_VAR 0 6
48396: PPUSH
48397: CALL_OW 264
48401: PUSH
48402: LD_INT 9
48404: PUSH
48405: EMPTY
48406: LIST
48407: IN
48408: IFFALSE 48429
// points := [ 5 , 70 , 20 ] ;
48410: LD_ADDR_VAR 0 9
48414: PUSH
48415: LD_INT 5
48417: PUSH
48418: LD_INT 70
48420: PUSH
48421: LD_INT 20
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: LIST
48428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48429: LD_VAR 0 6
48433: PPUSH
48434: CALL_OW 264
48438: PUSH
48439: LD_INT 10
48441: PUSH
48442: EMPTY
48443: LIST
48444: IN
48445: IFFALSE 48466
// points := [ 35 , 110 , 70 ] ;
48447: LD_ADDR_VAR 0 9
48451: PUSH
48452: LD_INT 35
48454: PUSH
48455: LD_INT 110
48457: PUSH
48458: LD_INT 70
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: LIST
48465: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48466: LD_VAR 0 6
48470: PPUSH
48471: CALL_OW 265
48475: PUSH
48476: LD_INT 25
48478: EQUAL
48479: IFFALSE 48500
// points := [ 80 , 65 , 100 ] ;
48481: LD_ADDR_VAR 0 9
48485: PUSH
48486: LD_INT 80
48488: PUSH
48489: LD_INT 65
48491: PUSH
48492: LD_INT 100
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: LIST
48499: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48500: LD_VAR 0 6
48504: PPUSH
48505: CALL_OW 263
48509: PUSH
48510: LD_INT 1
48512: EQUAL
48513: IFFALSE 48548
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48515: LD_ADDR_VAR 0 10
48519: PUSH
48520: LD_VAR 0 10
48524: PUSH
48525: LD_VAR 0 6
48529: PPUSH
48530: CALL_OW 311
48534: PPUSH
48535: LD_INT 3
48537: PPUSH
48538: CALL_OW 259
48542: PUSH
48543: LD_INT 4
48545: MUL
48546: MUL
48547: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48548: LD_VAR 0 6
48552: PPUSH
48553: CALL_OW 263
48557: PUSH
48558: LD_INT 2
48560: EQUAL
48561: IFFALSE 48612
// begin j := IsControledBy ( i ) ;
48563: LD_ADDR_VAR 0 7
48567: PUSH
48568: LD_VAR 0 6
48572: PPUSH
48573: CALL_OW 312
48577: ST_TO_ADDR
// if j then
48578: LD_VAR 0 7
48582: IFFALSE 48612
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48584: LD_ADDR_VAR 0 10
48588: PUSH
48589: LD_VAR 0 10
48593: PUSH
48594: LD_VAR 0 7
48598: PPUSH
48599: LD_INT 3
48601: PPUSH
48602: CALL_OW 259
48606: PUSH
48607: LD_INT 3
48609: MUL
48610: MUL
48611: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48612: LD_VAR 0 6
48616: PPUSH
48617: CALL_OW 264
48621: PUSH
48622: LD_INT 5
48624: PUSH
48625: LD_INT 6
48627: PUSH
48628: LD_INT 46
48630: PUSH
48631: LD_INT 44
48633: PUSH
48634: LD_INT 47
48636: PUSH
48637: LD_INT 45
48639: PUSH
48640: LD_INT 28
48642: PUSH
48643: LD_INT 7
48645: PUSH
48646: LD_INT 27
48648: PUSH
48649: LD_INT 29
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: IN
48664: PUSH
48665: LD_VAR 0 1
48669: PPUSH
48670: LD_INT 52
48672: PPUSH
48673: CALL_OW 321
48677: PUSH
48678: LD_INT 2
48680: EQUAL
48681: AND
48682: IFFALSE 48699
// bpoints := bpoints * 1.2 ;
48684: LD_ADDR_VAR 0 10
48688: PUSH
48689: LD_VAR 0 10
48693: PUSH
48694: LD_REAL  1.20000000000000E+0000
48697: MUL
48698: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48699: LD_VAR 0 6
48703: PPUSH
48704: CALL_OW 264
48708: PUSH
48709: LD_INT 6
48711: PUSH
48712: LD_INT 46
48714: PUSH
48715: LD_INT 47
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: LIST
48722: IN
48723: IFFALSE 48740
// bpoints := bpoints * 1.2 ;
48725: LD_ADDR_VAR 0 10
48729: PUSH
48730: LD_VAR 0 10
48734: PUSH
48735: LD_REAL  1.20000000000000E+0000
48738: MUL
48739: ST_TO_ADDR
// end ; unit_building :
48740: GO 48754
48742: LD_INT 3
48744: DOUBLE
48745: EQUAL
48746: IFTRUE 48750
48748: GO 48753
48750: POP
// ; end ;
48751: GO 48754
48753: POP
// for j = 1 to 3 do
48754: LD_ADDR_VAR 0 7
48758: PUSH
48759: DOUBLE
48760: LD_INT 1
48762: DEC
48763: ST_TO_ADDR
48764: LD_INT 3
48766: PUSH
48767: FOR_TO
48768: IFFALSE 48821
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48770: LD_ADDR_VAR 0 5
48774: PUSH
48775: LD_VAR 0 5
48779: PPUSH
48780: LD_VAR 0 7
48784: PPUSH
48785: LD_VAR 0 5
48789: PUSH
48790: LD_VAR 0 7
48794: ARRAY
48795: PUSH
48796: LD_VAR 0 9
48800: PUSH
48801: LD_VAR 0 7
48805: ARRAY
48806: PUSH
48807: LD_VAR 0 10
48811: MUL
48812: PLUS
48813: PPUSH
48814: CALL_OW 1
48818: ST_TO_ADDR
48819: GO 48767
48821: POP
48822: POP
// end ;
48823: GO 47302
48825: POP
48826: POP
// result := Replace ( result , 4 , tmp ) ;
48827: LD_ADDR_VAR 0 5
48831: PUSH
48832: LD_VAR 0 5
48836: PPUSH
48837: LD_INT 4
48839: PPUSH
48840: LD_VAR 0 8
48844: PPUSH
48845: CALL_OW 1
48849: ST_TO_ADDR
// end ;
48850: LD_VAR 0 5
48854: RET
// export function DangerAtRange ( unit , range ) ; begin
48855: LD_INT 0
48857: PPUSH
// if not unit then
48858: LD_VAR 0 1
48862: NOT
48863: IFFALSE 48867
// exit ;
48865: GO 48912
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48867: LD_ADDR_VAR 0 3
48871: PUSH
48872: LD_VAR 0 1
48876: PPUSH
48877: CALL_OW 255
48881: PPUSH
48882: LD_VAR 0 1
48886: PPUSH
48887: CALL_OW 250
48891: PPUSH
48892: LD_VAR 0 1
48896: PPUSH
48897: CALL_OW 251
48901: PPUSH
48902: LD_VAR 0 2
48906: PPUSH
48907: CALL 47154 0 4
48911: ST_TO_ADDR
// end ;
48912: LD_VAR 0 3
48916: RET
// export function DangerInArea ( side , area ) ; begin
48917: LD_INT 0
48919: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48920: LD_ADDR_VAR 0 3
48924: PUSH
48925: LD_VAR 0 2
48929: PPUSH
48930: LD_INT 81
48932: PUSH
48933: LD_VAR 0 1
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PPUSH
48942: CALL_OW 70
48946: ST_TO_ADDR
// end ;
48947: LD_VAR 0 3
48951: RET
// export function IsExtension ( b ) ; begin
48952: LD_INT 0
48954: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48955: LD_ADDR_VAR 0 2
48959: PUSH
48960: LD_VAR 0 1
48964: PUSH
48965: LD_INT 23
48967: PUSH
48968: LD_INT 20
48970: PUSH
48971: LD_INT 22
48973: PUSH
48974: LD_INT 17
48976: PUSH
48977: LD_INT 24
48979: PUSH
48980: LD_INT 21
48982: PUSH
48983: LD_INT 19
48985: PUSH
48986: LD_INT 16
48988: PUSH
48989: LD_INT 25
48991: PUSH
48992: LD_INT 18
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: IN
49007: ST_TO_ADDR
// end ;
49008: LD_VAR 0 2
49012: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49013: LD_INT 0
49015: PPUSH
49016: PPUSH
49017: PPUSH
// result := [ ] ;
49018: LD_ADDR_VAR 0 4
49022: PUSH
49023: EMPTY
49024: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49025: LD_ADDR_VAR 0 5
49029: PUSH
49030: LD_VAR 0 2
49034: PPUSH
49035: LD_INT 21
49037: PUSH
49038: LD_INT 3
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PPUSH
49045: CALL_OW 70
49049: ST_TO_ADDR
// if not tmp then
49050: LD_VAR 0 5
49054: NOT
49055: IFFALSE 49059
// exit ;
49057: GO 49123
// if checkLink then
49059: LD_VAR 0 3
49063: IFFALSE 49113
// begin for i in tmp do
49065: LD_ADDR_VAR 0 6
49069: PUSH
49070: LD_VAR 0 5
49074: PUSH
49075: FOR_IN
49076: IFFALSE 49111
// if GetBase ( i ) <> base then
49078: LD_VAR 0 6
49082: PPUSH
49083: CALL_OW 274
49087: PUSH
49088: LD_VAR 0 1
49092: NONEQUAL
49093: IFFALSE 49109
// ComLinkToBase ( base , i ) ;
49095: LD_VAR 0 1
49099: PPUSH
49100: LD_VAR 0 6
49104: PPUSH
49105: CALL_OW 169
49109: GO 49075
49111: POP
49112: POP
// end ; result := tmp ;
49113: LD_ADDR_VAR 0 4
49117: PUSH
49118: LD_VAR 0 5
49122: ST_TO_ADDR
// end ;
49123: LD_VAR 0 4
49127: RET
// export function ComComplete ( units , b ) ; var i ; begin
49128: LD_INT 0
49130: PPUSH
49131: PPUSH
// if not units then
49132: LD_VAR 0 1
49136: NOT
49137: IFFALSE 49141
// exit ;
49139: GO 49231
// for i in units do
49141: LD_ADDR_VAR 0 4
49145: PUSH
49146: LD_VAR 0 1
49150: PUSH
49151: FOR_IN
49152: IFFALSE 49229
// if BuildingStatus ( b ) = bs_build then
49154: LD_VAR 0 2
49158: PPUSH
49159: CALL_OW 461
49163: PUSH
49164: LD_INT 1
49166: EQUAL
49167: IFFALSE 49227
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49169: LD_VAR 0 4
49173: PPUSH
49174: LD_STRING h
49176: PUSH
49177: LD_VAR 0 2
49181: PPUSH
49182: CALL_OW 250
49186: PUSH
49187: LD_VAR 0 2
49191: PPUSH
49192: CALL_OW 251
49196: PUSH
49197: LD_VAR 0 2
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: PUSH
49220: EMPTY
49221: LIST
49222: PPUSH
49223: CALL_OW 446
49227: GO 49151
49229: POP
49230: POP
// end ;
49231: LD_VAR 0 3
49235: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49236: LD_INT 0
49238: PPUSH
49239: PPUSH
49240: PPUSH
49241: PPUSH
49242: PPUSH
49243: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49244: LD_VAR 0 1
49248: NOT
49249: PUSH
49250: LD_VAR 0 1
49254: PPUSH
49255: CALL_OW 263
49259: PUSH
49260: LD_INT 2
49262: NONEQUAL
49263: OR
49264: IFFALSE 49268
// exit ;
49266: GO 49584
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49268: LD_ADDR_VAR 0 6
49272: PUSH
49273: LD_INT 22
49275: PUSH
49276: LD_VAR 0 1
49280: PPUSH
49281: CALL_OW 255
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 2
49292: PUSH
49293: LD_INT 30
49295: PUSH
49296: LD_INT 36
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 34
49305: PUSH
49306: LD_INT 31
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: LIST
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PPUSH
49322: CALL_OW 69
49326: ST_TO_ADDR
// if not tmp then
49327: LD_VAR 0 6
49331: NOT
49332: IFFALSE 49336
// exit ;
49334: GO 49584
// result := [ ] ;
49336: LD_ADDR_VAR 0 2
49340: PUSH
49341: EMPTY
49342: ST_TO_ADDR
// for i in tmp do
49343: LD_ADDR_VAR 0 3
49347: PUSH
49348: LD_VAR 0 6
49352: PUSH
49353: FOR_IN
49354: IFFALSE 49425
// begin t := UnitsInside ( i ) ;
49356: LD_ADDR_VAR 0 4
49360: PUSH
49361: LD_VAR 0 3
49365: PPUSH
49366: CALL_OW 313
49370: ST_TO_ADDR
// if t then
49371: LD_VAR 0 4
49375: IFFALSE 49423
// for j in t do
49377: LD_ADDR_VAR 0 7
49381: PUSH
49382: LD_VAR 0 4
49386: PUSH
49387: FOR_IN
49388: IFFALSE 49421
// result := Replace ( result , result + 1 , j ) ;
49390: LD_ADDR_VAR 0 2
49394: PUSH
49395: LD_VAR 0 2
49399: PPUSH
49400: LD_VAR 0 2
49404: PUSH
49405: LD_INT 1
49407: PLUS
49408: PPUSH
49409: LD_VAR 0 7
49413: PPUSH
49414: CALL_OW 1
49418: ST_TO_ADDR
49419: GO 49387
49421: POP
49422: POP
// end ;
49423: GO 49353
49425: POP
49426: POP
// if not result then
49427: LD_VAR 0 2
49431: NOT
49432: IFFALSE 49436
// exit ;
49434: GO 49584
// mech := result [ 1 ] ;
49436: LD_ADDR_VAR 0 5
49440: PUSH
49441: LD_VAR 0 2
49445: PUSH
49446: LD_INT 1
49448: ARRAY
49449: ST_TO_ADDR
// if result > 1 then
49450: LD_VAR 0 2
49454: PUSH
49455: LD_INT 1
49457: GREATER
49458: IFFALSE 49570
// begin for i = 2 to result do
49460: LD_ADDR_VAR 0 3
49464: PUSH
49465: DOUBLE
49466: LD_INT 2
49468: DEC
49469: ST_TO_ADDR
49470: LD_VAR 0 2
49474: PUSH
49475: FOR_TO
49476: IFFALSE 49568
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49478: LD_ADDR_VAR 0 4
49482: PUSH
49483: LD_VAR 0 2
49487: PUSH
49488: LD_VAR 0 3
49492: ARRAY
49493: PPUSH
49494: LD_INT 3
49496: PPUSH
49497: CALL_OW 259
49501: PUSH
49502: LD_VAR 0 2
49506: PUSH
49507: LD_VAR 0 3
49511: ARRAY
49512: PPUSH
49513: CALL_OW 432
49517: MINUS
49518: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49519: LD_VAR 0 4
49523: PUSH
49524: LD_VAR 0 5
49528: PPUSH
49529: LD_INT 3
49531: PPUSH
49532: CALL_OW 259
49536: PUSH
49537: LD_VAR 0 5
49541: PPUSH
49542: CALL_OW 432
49546: MINUS
49547: GREATEREQUAL
49548: IFFALSE 49566
// mech := result [ i ] ;
49550: LD_ADDR_VAR 0 5
49554: PUSH
49555: LD_VAR 0 2
49559: PUSH
49560: LD_VAR 0 3
49564: ARRAY
49565: ST_TO_ADDR
// end ;
49566: GO 49475
49568: POP
49569: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49570: LD_VAR 0 1
49574: PPUSH
49575: LD_VAR 0 5
49579: PPUSH
49580: CALL_OW 135
// end ;
49584: LD_VAR 0 2
49588: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49589: LD_INT 0
49591: PPUSH
49592: PPUSH
49593: PPUSH
49594: PPUSH
49595: PPUSH
49596: PPUSH
49597: PPUSH
49598: PPUSH
49599: PPUSH
49600: PPUSH
49601: PPUSH
49602: PPUSH
49603: PPUSH
// result := [ ] ;
49604: LD_ADDR_VAR 0 7
49608: PUSH
49609: EMPTY
49610: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49611: LD_VAR 0 1
49615: PPUSH
49616: CALL_OW 266
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: IN
49631: NOT
49632: IFFALSE 49636
// exit ;
49634: GO 51270
// if name then
49636: LD_VAR 0 3
49640: IFFALSE 49656
// SetBName ( base_dep , name ) ;
49642: LD_VAR 0 1
49646: PPUSH
49647: LD_VAR 0 3
49651: PPUSH
49652: CALL_OW 500
// base := GetBase ( base_dep ) ;
49656: LD_ADDR_VAR 0 15
49660: PUSH
49661: LD_VAR 0 1
49665: PPUSH
49666: CALL_OW 274
49670: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49671: LD_ADDR_VAR 0 16
49675: PUSH
49676: LD_VAR 0 1
49680: PPUSH
49681: CALL_OW 255
49685: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49686: LD_ADDR_VAR 0 17
49690: PUSH
49691: LD_VAR 0 1
49695: PPUSH
49696: CALL_OW 248
49700: ST_TO_ADDR
// if sources then
49701: LD_VAR 0 5
49705: IFFALSE 49752
// for i = 1 to 3 do
49707: LD_ADDR_VAR 0 8
49711: PUSH
49712: DOUBLE
49713: LD_INT 1
49715: DEC
49716: ST_TO_ADDR
49717: LD_INT 3
49719: PUSH
49720: FOR_TO
49721: IFFALSE 49750
// AddResourceType ( base , i , sources [ i ] ) ;
49723: LD_VAR 0 15
49727: PPUSH
49728: LD_VAR 0 8
49732: PPUSH
49733: LD_VAR 0 5
49737: PUSH
49738: LD_VAR 0 8
49742: ARRAY
49743: PPUSH
49744: CALL_OW 276
49748: GO 49720
49750: POP
49751: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49752: LD_ADDR_VAR 0 18
49756: PUSH
49757: LD_VAR 0 15
49761: PPUSH
49762: LD_VAR 0 2
49766: PPUSH
49767: LD_INT 1
49769: PPUSH
49770: CALL 49013 0 3
49774: ST_TO_ADDR
// InitHc ;
49775: CALL_OW 19
// InitUc ;
49779: CALL_OW 18
// uc_side := side ;
49783: LD_ADDR_OWVAR 20
49787: PUSH
49788: LD_VAR 0 16
49792: ST_TO_ADDR
// uc_nation := nation ;
49793: LD_ADDR_OWVAR 21
49797: PUSH
49798: LD_VAR 0 17
49802: ST_TO_ADDR
// if buildings then
49803: LD_VAR 0 18
49807: IFFALSE 51129
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49809: LD_ADDR_VAR 0 19
49813: PUSH
49814: LD_VAR 0 18
49818: PPUSH
49819: LD_INT 2
49821: PUSH
49822: LD_INT 30
49824: PUSH
49825: LD_INT 29
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 30
49834: PUSH
49835: LD_INT 30
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: LIST
49846: PPUSH
49847: CALL_OW 72
49851: ST_TO_ADDR
// if tmp then
49852: LD_VAR 0 19
49856: IFFALSE 49904
// for i in tmp do
49858: LD_ADDR_VAR 0 8
49862: PUSH
49863: LD_VAR 0 19
49867: PUSH
49868: FOR_IN
49869: IFFALSE 49902
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49871: LD_VAR 0 8
49875: PPUSH
49876: CALL_OW 250
49880: PPUSH
49881: LD_VAR 0 8
49885: PPUSH
49886: CALL_OW 251
49890: PPUSH
49891: LD_VAR 0 16
49895: PPUSH
49896: CALL_OW 441
49900: GO 49868
49902: POP
49903: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49904: LD_VAR 0 18
49908: PPUSH
49909: LD_INT 2
49911: PUSH
49912: LD_INT 30
49914: PUSH
49915: LD_INT 32
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 30
49924: PUSH
49925: LD_INT 33
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: LIST
49936: PPUSH
49937: CALL_OW 72
49941: IFFALSE 50029
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49943: LD_ADDR_VAR 0 8
49947: PUSH
49948: LD_VAR 0 18
49952: PPUSH
49953: LD_INT 2
49955: PUSH
49956: LD_INT 30
49958: PUSH
49959: LD_INT 32
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 30
49968: PUSH
49969: LD_INT 33
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: LIST
49980: PPUSH
49981: CALL_OW 72
49985: PUSH
49986: FOR_IN
49987: IFFALSE 50027
// begin if not GetBWeapon ( i ) then
49989: LD_VAR 0 8
49993: PPUSH
49994: CALL_OW 269
49998: NOT
49999: IFFALSE 50025
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50001: LD_VAR 0 8
50005: PPUSH
50006: LD_VAR 0 8
50010: PPUSH
50011: LD_VAR 0 2
50015: PPUSH
50016: CALL 51275 0 2
50020: PPUSH
50021: CALL_OW 431
// end ;
50025: GO 49986
50027: POP
50028: POP
// end ; for i = 1 to personel do
50029: LD_ADDR_VAR 0 8
50033: PUSH
50034: DOUBLE
50035: LD_INT 1
50037: DEC
50038: ST_TO_ADDR
50039: LD_VAR 0 6
50043: PUSH
50044: FOR_TO
50045: IFFALSE 51109
// begin if i > 4 then
50047: LD_VAR 0 8
50051: PUSH
50052: LD_INT 4
50054: GREATER
50055: IFFALSE 50059
// break ;
50057: GO 51109
// case i of 1 :
50059: LD_VAR 0 8
50063: PUSH
50064: LD_INT 1
50066: DOUBLE
50067: EQUAL
50068: IFTRUE 50072
50070: GO 50152
50072: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50073: LD_ADDR_VAR 0 12
50077: PUSH
50078: LD_VAR 0 18
50082: PPUSH
50083: LD_INT 22
50085: PUSH
50086: LD_VAR 0 16
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 58
50097: PUSH
50098: EMPTY
50099: LIST
50100: PUSH
50101: LD_INT 2
50103: PUSH
50104: LD_INT 30
50106: PUSH
50107: LD_INT 32
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 30
50116: PUSH
50117: LD_INT 4
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 30
50126: PUSH
50127: LD_INT 5
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: LIST
50144: PPUSH
50145: CALL_OW 72
50149: ST_TO_ADDR
50150: GO 50374
50152: LD_INT 2
50154: DOUBLE
50155: EQUAL
50156: IFTRUE 50160
50158: GO 50222
50160: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50161: LD_ADDR_VAR 0 12
50165: PUSH
50166: LD_VAR 0 18
50170: PPUSH
50171: LD_INT 22
50173: PUSH
50174: LD_VAR 0 16
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 2
50185: PUSH
50186: LD_INT 30
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 30
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: LIST
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PPUSH
50215: CALL_OW 72
50219: ST_TO_ADDR
50220: GO 50374
50222: LD_INT 3
50224: DOUBLE
50225: EQUAL
50226: IFTRUE 50230
50228: GO 50292
50230: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50231: LD_ADDR_VAR 0 12
50235: PUSH
50236: LD_VAR 0 18
50240: PPUSH
50241: LD_INT 22
50243: PUSH
50244: LD_VAR 0 16
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 2
50255: PUSH
50256: LD_INT 30
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 30
50268: PUSH
50269: LD_INT 3
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: LIST
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PPUSH
50285: CALL_OW 72
50289: ST_TO_ADDR
50290: GO 50374
50292: LD_INT 4
50294: DOUBLE
50295: EQUAL
50296: IFTRUE 50300
50298: GO 50373
50300: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50301: LD_ADDR_VAR 0 12
50305: PUSH
50306: LD_VAR 0 18
50310: PPUSH
50311: LD_INT 22
50313: PUSH
50314: LD_VAR 0 16
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: LD_INT 30
50328: PUSH
50329: LD_INT 6
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 30
50338: PUSH
50339: LD_INT 7
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 30
50348: PUSH
50349: LD_INT 8
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PPUSH
50366: CALL_OW 72
50370: ST_TO_ADDR
50371: GO 50374
50373: POP
// if i = 1 then
50374: LD_VAR 0 8
50378: PUSH
50379: LD_INT 1
50381: EQUAL
50382: IFFALSE 50493
// begin tmp := [ ] ;
50384: LD_ADDR_VAR 0 19
50388: PUSH
50389: EMPTY
50390: ST_TO_ADDR
// for j in f do
50391: LD_ADDR_VAR 0 9
50395: PUSH
50396: LD_VAR 0 12
50400: PUSH
50401: FOR_IN
50402: IFFALSE 50475
// if GetBType ( j ) = b_bunker then
50404: LD_VAR 0 9
50408: PPUSH
50409: CALL_OW 266
50413: PUSH
50414: LD_INT 32
50416: EQUAL
50417: IFFALSE 50444
// tmp := Insert ( tmp , 1 , j ) else
50419: LD_ADDR_VAR 0 19
50423: PUSH
50424: LD_VAR 0 19
50428: PPUSH
50429: LD_INT 1
50431: PPUSH
50432: LD_VAR 0 9
50436: PPUSH
50437: CALL_OW 2
50441: ST_TO_ADDR
50442: GO 50473
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50444: LD_ADDR_VAR 0 19
50448: PUSH
50449: LD_VAR 0 19
50453: PPUSH
50454: LD_VAR 0 19
50458: PUSH
50459: LD_INT 1
50461: PLUS
50462: PPUSH
50463: LD_VAR 0 9
50467: PPUSH
50468: CALL_OW 2
50472: ST_TO_ADDR
50473: GO 50401
50475: POP
50476: POP
// if tmp then
50477: LD_VAR 0 19
50481: IFFALSE 50493
// f := tmp ;
50483: LD_ADDR_VAR 0 12
50487: PUSH
50488: LD_VAR 0 19
50492: ST_TO_ADDR
// end ; x := personel [ i ] ;
50493: LD_ADDR_VAR 0 13
50497: PUSH
50498: LD_VAR 0 6
50502: PUSH
50503: LD_VAR 0 8
50507: ARRAY
50508: ST_TO_ADDR
// if x = - 1 then
50509: LD_VAR 0 13
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: EQUAL
50518: IFFALSE 50727
// begin for j in f do
50520: LD_ADDR_VAR 0 9
50524: PUSH
50525: LD_VAR 0 12
50529: PUSH
50530: FOR_IN
50531: IFFALSE 50723
// repeat InitHc ;
50533: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50537: LD_VAR 0 9
50541: PPUSH
50542: CALL_OW 266
50546: PUSH
50547: LD_INT 5
50549: EQUAL
50550: IFFALSE 50620
// begin if UnitsInside ( j ) < 3 then
50552: LD_VAR 0 9
50556: PPUSH
50557: CALL_OW 313
50561: PUSH
50562: LD_INT 3
50564: LESS
50565: IFFALSE 50601
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50567: LD_INT 0
50569: PPUSH
50570: LD_INT 5
50572: PUSH
50573: LD_INT 8
50575: PUSH
50576: LD_INT 9
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: LIST
50583: PUSH
50584: LD_VAR 0 17
50588: ARRAY
50589: PPUSH
50590: LD_VAR 0 4
50594: PPUSH
50595: CALL_OW 380
50599: GO 50618
// PrepareHuman ( false , i , skill ) ;
50601: LD_INT 0
50603: PPUSH
50604: LD_VAR 0 8
50608: PPUSH
50609: LD_VAR 0 4
50613: PPUSH
50614: CALL_OW 380
// end else
50618: GO 50637
// PrepareHuman ( false , i , skill ) ;
50620: LD_INT 0
50622: PPUSH
50623: LD_VAR 0 8
50627: PPUSH
50628: LD_VAR 0 4
50632: PPUSH
50633: CALL_OW 380
// un := CreateHuman ;
50637: LD_ADDR_VAR 0 14
50641: PUSH
50642: CALL_OW 44
50646: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50647: LD_ADDR_VAR 0 7
50651: PUSH
50652: LD_VAR 0 7
50656: PPUSH
50657: LD_INT 1
50659: PPUSH
50660: LD_VAR 0 14
50664: PPUSH
50665: CALL_OW 2
50669: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50670: LD_VAR 0 14
50674: PPUSH
50675: LD_VAR 0 9
50679: PPUSH
50680: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50684: LD_VAR 0 9
50688: PPUSH
50689: CALL_OW 313
50693: PUSH
50694: LD_INT 6
50696: EQUAL
50697: PUSH
50698: LD_VAR 0 9
50702: PPUSH
50703: CALL_OW 266
50707: PUSH
50708: LD_INT 32
50710: PUSH
50711: LD_INT 31
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: IN
50718: OR
50719: IFFALSE 50533
50721: GO 50530
50723: POP
50724: POP
// end else
50725: GO 51107
// for j = 1 to x do
50727: LD_ADDR_VAR 0 9
50731: PUSH
50732: DOUBLE
50733: LD_INT 1
50735: DEC
50736: ST_TO_ADDR
50737: LD_VAR 0 13
50741: PUSH
50742: FOR_TO
50743: IFFALSE 51105
// begin InitHc ;
50745: CALL_OW 19
// if not f then
50749: LD_VAR 0 12
50753: NOT
50754: IFFALSE 50843
// begin PrepareHuman ( false , i , skill ) ;
50756: LD_INT 0
50758: PPUSH
50759: LD_VAR 0 8
50763: PPUSH
50764: LD_VAR 0 4
50768: PPUSH
50769: CALL_OW 380
// un := CreateHuman ;
50773: LD_ADDR_VAR 0 14
50777: PUSH
50778: CALL_OW 44
50782: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50783: LD_ADDR_VAR 0 7
50787: PUSH
50788: LD_VAR 0 7
50792: PPUSH
50793: LD_INT 1
50795: PPUSH
50796: LD_VAR 0 14
50800: PPUSH
50801: CALL_OW 2
50805: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50806: LD_VAR 0 14
50810: PPUSH
50811: LD_VAR 0 1
50815: PPUSH
50816: CALL_OW 250
50820: PPUSH
50821: LD_VAR 0 1
50825: PPUSH
50826: CALL_OW 251
50830: PPUSH
50831: LD_INT 10
50833: PPUSH
50834: LD_INT 0
50836: PPUSH
50837: CALL_OW 50
// continue ;
50841: GO 50742
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50843: LD_VAR 0 12
50847: PUSH
50848: LD_INT 1
50850: ARRAY
50851: PPUSH
50852: CALL_OW 313
50856: PUSH
50857: LD_VAR 0 12
50861: PUSH
50862: LD_INT 1
50864: ARRAY
50865: PPUSH
50866: CALL_OW 266
50870: PUSH
50871: LD_INT 32
50873: PUSH
50874: LD_INT 31
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: IN
50881: AND
50882: PUSH
50883: LD_VAR 0 12
50887: PUSH
50888: LD_INT 1
50890: ARRAY
50891: PPUSH
50892: CALL_OW 313
50896: PUSH
50897: LD_INT 6
50899: EQUAL
50900: OR
50901: IFFALSE 50921
// f := Delete ( f , 1 ) ;
50903: LD_ADDR_VAR 0 12
50907: PUSH
50908: LD_VAR 0 12
50912: PPUSH
50913: LD_INT 1
50915: PPUSH
50916: CALL_OW 3
50920: ST_TO_ADDR
// if not f then
50921: LD_VAR 0 12
50925: NOT
50926: IFFALSE 50944
// begin x := x + 2 ;
50928: LD_ADDR_VAR 0 13
50932: PUSH
50933: LD_VAR 0 13
50937: PUSH
50938: LD_INT 2
50940: PLUS
50941: ST_TO_ADDR
// continue ;
50942: GO 50742
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50944: LD_VAR 0 12
50948: PUSH
50949: LD_INT 1
50951: ARRAY
50952: PPUSH
50953: CALL_OW 266
50957: PUSH
50958: LD_INT 5
50960: EQUAL
50961: IFFALSE 51035
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50963: LD_VAR 0 12
50967: PUSH
50968: LD_INT 1
50970: ARRAY
50971: PPUSH
50972: CALL_OW 313
50976: PUSH
50977: LD_INT 3
50979: LESS
50980: IFFALSE 51016
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50982: LD_INT 0
50984: PPUSH
50985: LD_INT 5
50987: PUSH
50988: LD_INT 8
50990: PUSH
50991: LD_INT 9
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: LIST
50998: PUSH
50999: LD_VAR 0 17
51003: ARRAY
51004: PPUSH
51005: LD_VAR 0 4
51009: PPUSH
51010: CALL_OW 380
51014: GO 51033
// PrepareHuman ( false , i , skill ) ;
51016: LD_INT 0
51018: PPUSH
51019: LD_VAR 0 8
51023: PPUSH
51024: LD_VAR 0 4
51028: PPUSH
51029: CALL_OW 380
// end else
51033: GO 51052
// PrepareHuman ( false , i , skill ) ;
51035: LD_INT 0
51037: PPUSH
51038: LD_VAR 0 8
51042: PPUSH
51043: LD_VAR 0 4
51047: PPUSH
51048: CALL_OW 380
// un := CreateHuman ;
51052: LD_ADDR_VAR 0 14
51056: PUSH
51057: CALL_OW 44
51061: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51062: LD_ADDR_VAR 0 7
51066: PUSH
51067: LD_VAR 0 7
51071: PPUSH
51072: LD_INT 1
51074: PPUSH
51075: LD_VAR 0 14
51079: PPUSH
51080: CALL_OW 2
51084: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51085: LD_VAR 0 14
51089: PPUSH
51090: LD_VAR 0 12
51094: PUSH
51095: LD_INT 1
51097: ARRAY
51098: PPUSH
51099: CALL_OW 52
// end ;
51103: GO 50742
51105: POP
51106: POP
// end ;
51107: GO 50044
51109: POP
51110: POP
// result := result ^ buildings ;
51111: LD_ADDR_VAR 0 7
51115: PUSH
51116: LD_VAR 0 7
51120: PUSH
51121: LD_VAR 0 18
51125: ADD
51126: ST_TO_ADDR
// end else
51127: GO 51270
// begin for i = 1 to personel do
51129: LD_ADDR_VAR 0 8
51133: PUSH
51134: DOUBLE
51135: LD_INT 1
51137: DEC
51138: ST_TO_ADDR
51139: LD_VAR 0 6
51143: PUSH
51144: FOR_TO
51145: IFFALSE 51268
// begin if i > 4 then
51147: LD_VAR 0 8
51151: PUSH
51152: LD_INT 4
51154: GREATER
51155: IFFALSE 51159
// break ;
51157: GO 51268
// x := personel [ i ] ;
51159: LD_ADDR_VAR 0 13
51163: PUSH
51164: LD_VAR 0 6
51168: PUSH
51169: LD_VAR 0 8
51173: ARRAY
51174: ST_TO_ADDR
// if x = - 1 then
51175: LD_VAR 0 13
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: EQUAL
51184: IFFALSE 51188
// continue ;
51186: GO 51144
// PrepareHuman ( false , i , skill ) ;
51188: LD_INT 0
51190: PPUSH
51191: LD_VAR 0 8
51195: PPUSH
51196: LD_VAR 0 4
51200: PPUSH
51201: CALL_OW 380
// un := CreateHuman ;
51205: LD_ADDR_VAR 0 14
51209: PUSH
51210: CALL_OW 44
51214: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51215: LD_VAR 0 14
51219: PPUSH
51220: LD_VAR 0 1
51224: PPUSH
51225: CALL_OW 250
51229: PPUSH
51230: LD_VAR 0 1
51234: PPUSH
51235: CALL_OW 251
51239: PPUSH
51240: LD_INT 10
51242: PPUSH
51243: LD_INT 0
51245: PPUSH
51246: CALL_OW 50
// result := result ^ un ;
51250: LD_ADDR_VAR 0 7
51254: PUSH
51255: LD_VAR 0 7
51259: PUSH
51260: LD_VAR 0 14
51264: ADD
51265: ST_TO_ADDR
// end ;
51266: GO 51144
51268: POP
51269: POP
// end ; end ;
51270: LD_VAR 0 7
51274: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51275: LD_INT 0
51277: PPUSH
51278: PPUSH
51279: PPUSH
51280: PPUSH
51281: PPUSH
51282: PPUSH
51283: PPUSH
51284: PPUSH
51285: PPUSH
51286: PPUSH
51287: PPUSH
51288: PPUSH
51289: PPUSH
51290: PPUSH
51291: PPUSH
51292: PPUSH
// result := false ;
51293: LD_ADDR_VAR 0 3
51297: PUSH
51298: LD_INT 0
51300: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51301: LD_VAR 0 1
51305: NOT
51306: PUSH
51307: LD_VAR 0 1
51311: PPUSH
51312: CALL_OW 266
51316: PUSH
51317: LD_INT 32
51319: PUSH
51320: LD_INT 33
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: IN
51327: NOT
51328: OR
51329: IFFALSE 51333
// exit ;
51331: GO 52442
// nat := GetNation ( tower ) ;
51333: LD_ADDR_VAR 0 12
51337: PUSH
51338: LD_VAR 0 1
51342: PPUSH
51343: CALL_OW 248
51347: ST_TO_ADDR
// side := GetSide ( tower ) ;
51348: LD_ADDR_VAR 0 16
51352: PUSH
51353: LD_VAR 0 1
51357: PPUSH
51358: CALL_OW 255
51362: ST_TO_ADDR
// x := GetX ( tower ) ;
51363: LD_ADDR_VAR 0 10
51367: PUSH
51368: LD_VAR 0 1
51372: PPUSH
51373: CALL_OW 250
51377: ST_TO_ADDR
// y := GetY ( tower ) ;
51378: LD_ADDR_VAR 0 11
51382: PUSH
51383: LD_VAR 0 1
51387: PPUSH
51388: CALL_OW 251
51392: ST_TO_ADDR
// if not x or not y then
51393: LD_VAR 0 10
51397: NOT
51398: PUSH
51399: LD_VAR 0 11
51403: NOT
51404: OR
51405: IFFALSE 51409
// exit ;
51407: GO 52442
// weapon := 0 ;
51409: LD_ADDR_VAR 0 18
51413: PUSH
51414: LD_INT 0
51416: ST_TO_ADDR
// fac_list := [ ] ;
51417: LD_ADDR_VAR 0 17
51421: PUSH
51422: EMPTY
51423: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51424: LD_ADDR_VAR 0 6
51428: PUSH
51429: LD_VAR 0 1
51433: PPUSH
51434: CALL_OW 274
51438: PPUSH
51439: LD_VAR 0 2
51443: PPUSH
51444: LD_INT 0
51446: PPUSH
51447: CALL 49013 0 3
51451: PPUSH
51452: LD_INT 30
51454: PUSH
51455: LD_INT 3
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PPUSH
51462: CALL_OW 72
51466: ST_TO_ADDR
// if not factories then
51467: LD_VAR 0 6
51471: NOT
51472: IFFALSE 51476
// exit ;
51474: GO 52442
// for i in factories do
51476: LD_ADDR_VAR 0 8
51480: PUSH
51481: LD_VAR 0 6
51485: PUSH
51486: FOR_IN
51487: IFFALSE 51512
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51489: LD_ADDR_VAR 0 17
51493: PUSH
51494: LD_VAR 0 17
51498: PUSH
51499: LD_VAR 0 8
51503: PPUSH
51504: CALL_OW 478
51508: UNION
51509: ST_TO_ADDR
51510: GO 51486
51512: POP
51513: POP
// if not fac_list then
51514: LD_VAR 0 17
51518: NOT
51519: IFFALSE 51523
// exit ;
51521: GO 52442
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51523: LD_ADDR_VAR 0 5
51527: PUSH
51528: LD_INT 4
51530: PUSH
51531: LD_INT 5
51533: PUSH
51534: LD_INT 9
51536: PUSH
51537: LD_INT 10
51539: PUSH
51540: LD_INT 6
51542: PUSH
51543: LD_INT 7
51545: PUSH
51546: LD_INT 11
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 27
51560: PUSH
51561: LD_INT 28
51563: PUSH
51564: LD_INT 26
51566: PUSH
51567: LD_INT 30
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 43
51578: PUSH
51579: LD_INT 44
51581: PUSH
51582: LD_INT 46
51584: PUSH
51585: LD_INT 45
51587: PUSH
51588: LD_INT 47
51590: PUSH
51591: LD_INT 49
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: LIST
51606: PUSH
51607: LD_VAR 0 12
51611: ARRAY
51612: ST_TO_ADDR
// list := list isect fac_list ;
51613: LD_ADDR_VAR 0 5
51617: PUSH
51618: LD_VAR 0 5
51622: PUSH
51623: LD_VAR 0 17
51627: ISECT
51628: ST_TO_ADDR
// if not list then
51629: LD_VAR 0 5
51633: NOT
51634: IFFALSE 51638
// exit ;
51636: GO 52442
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51638: LD_VAR 0 12
51642: PUSH
51643: LD_INT 3
51645: EQUAL
51646: PUSH
51647: LD_INT 49
51649: PUSH
51650: LD_VAR 0 5
51654: IN
51655: AND
51656: PUSH
51657: LD_INT 31
51659: PPUSH
51660: LD_VAR 0 16
51664: PPUSH
51665: CALL_OW 321
51669: PUSH
51670: LD_INT 2
51672: EQUAL
51673: AND
51674: IFFALSE 51734
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51676: LD_INT 22
51678: PUSH
51679: LD_VAR 0 16
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 35
51690: PUSH
51691: LD_INT 49
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 91
51700: PUSH
51701: LD_VAR 0 1
51705: PUSH
51706: LD_INT 10
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: LIST
51718: PPUSH
51719: CALL_OW 69
51723: NOT
51724: IFFALSE 51734
// weapon := ru_time_lapser ;
51726: LD_ADDR_VAR 0 18
51730: PUSH
51731: LD_INT 49
51733: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51734: LD_VAR 0 12
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: IN
51749: PUSH
51750: LD_INT 11
51752: PUSH
51753: LD_VAR 0 5
51757: IN
51758: PUSH
51759: LD_INT 30
51761: PUSH
51762: LD_VAR 0 5
51766: IN
51767: OR
51768: AND
51769: PUSH
51770: LD_INT 6
51772: PPUSH
51773: LD_VAR 0 16
51777: PPUSH
51778: CALL_OW 321
51782: PUSH
51783: LD_INT 2
51785: EQUAL
51786: AND
51787: IFFALSE 51952
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51789: LD_INT 22
51791: PUSH
51792: LD_VAR 0 16
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 2
51803: PUSH
51804: LD_INT 35
51806: PUSH
51807: LD_INT 11
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 35
51816: PUSH
51817: LD_INT 30
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 91
51831: PUSH
51832: LD_VAR 0 1
51836: PUSH
51837: LD_INT 18
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: LIST
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: LIST
51849: PPUSH
51850: CALL_OW 69
51854: NOT
51855: PUSH
51856: LD_INT 22
51858: PUSH
51859: LD_VAR 0 16
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 2
51870: PUSH
51871: LD_INT 30
51873: PUSH
51874: LD_INT 32
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 30
51883: PUSH
51884: LD_INT 33
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 91
51898: PUSH
51899: LD_VAR 0 1
51903: PUSH
51904: LD_INT 12
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: LIST
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: LIST
51916: PUSH
51917: EMPTY
51918: LIST
51919: PPUSH
51920: CALL_OW 69
51924: PUSH
51925: LD_INT 2
51927: GREATER
51928: AND
51929: IFFALSE 51952
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51931: LD_ADDR_VAR 0 18
51935: PUSH
51936: LD_INT 11
51938: PUSH
51939: LD_INT 30
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_VAR 0 12
51950: ARRAY
51951: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51952: LD_VAR 0 18
51956: NOT
51957: PUSH
51958: LD_INT 40
51960: PPUSH
51961: LD_VAR 0 16
51965: PPUSH
51966: CALL_OW 321
51970: PUSH
51971: LD_INT 2
51973: EQUAL
51974: AND
51975: PUSH
51976: LD_INT 7
51978: PUSH
51979: LD_VAR 0 5
51983: IN
51984: PUSH
51985: LD_INT 28
51987: PUSH
51988: LD_VAR 0 5
51992: IN
51993: OR
51994: PUSH
51995: LD_INT 45
51997: PUSH
51998: LD_VAR 0 5
52002: IN
52003: OR
52004: AND
52005: IFFALSE 52259
// begin hex := GetHexInfo ( x , y ) ;
52007: LD_ADDR_VAR 0 4
52011: PUSH
52012: LD_VAR 0 10
52016: PPUSH
52017: LD_VAR 0 11
52021: PPUSH
52022: CALL_OW 546
52026: ST_TO_ADDR
// if hex [ 1 ] then
52027: LD_VAR 0 4
52031: PUSH
52032: LD_INT 1
52034: ARRAY
52035: IFFALSE 52039
// exit ;
52037: GO 52442
// height := hex [ 2 ] ;
52039: LD_ADDR_VAR 0 15
52043: PUSH
52044: LD_VAR 0 4
52048: PUSH
52049: LD_INT 2
52051: ARRAY
52052: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52053: LD_ADDR_VAR 0 14
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: LD_INT 2
52063: PUSH
52064: LD_INT 3
52066: PUSH
52067: LD_INT 5
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: ST_TO_ADDR
// for i in tmp do
52076: LD_ADDR_VAR 0 8
52080: PUSH
52081: LD_VAR 0 14
52085: PUSH
52086: FOR_IN
52087: IFFALSE 52257
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52089: LD_ADDR_VAR 0 9
52093: PUSH
52094: LD_VAR 0 10
52098: PPUSH
52099: LD_VAR 0 8
52103: PPUSH
52104: LD_INT 5
52106: PPUSH
52107: CALL_OW 272
52111: PUSH
52112: LD_VAR 0 11
52116: PPUSH
52117: LD_VAR 0 8
52121: PPUSH
52122: LD_INT 5
52124: PPUSH
52125: CALL_OW 273
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52134: LD_VAR 0 9
52138: PUSH
52139: LD_INT 1
52141: ARRAY
52142: PPUSH
52143: LD_VAR 0 9
52147: PUSH
52148: LD_INT 2
52150: ARRAY
52151: PPUSH
52152: CALL_OW 488
52156: IFFALSE 52255
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52158: LD_ADDR_VAR 0 4
52162: PUSH
52163: LD_VAR 0 9
52167: PUSH
52168: LD_INT 1
52170: ARRAY
52171: PPUSH
52172: LD_VAR 0 9
52176: PUSH
52177: LD_INT 2
52179: ARRAY
52180: PPUSH
52181: CALL_OW 546
52185: ST_TO_ADDR
// if hex [ 1 ] then
52186: LD_VAR 0 4
52190: PUSH
52191: LD_INT 1
52193: ARRAY
52194: IFFALSE 52198
// continue ;
52196: GO 52086
// h := hex [ 2 ] ;
52198: LD_ADDR_VAR 0 13
52202: PUSH
52203: LD_VAR 0 4
52207: PUSH
52208: LD_INT 2
52210: ARRAY
52211: ST_TO_ADDR
// if h + 7 < height then
52212: LD_VAR 0 13
52216: PUSH
52217: LD_INT 7
52219: PLUS
52220: PUSH
52221: LD_VAR 0 15
52225: LESS
52226: IFFALSE 52255
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52228: LD_ADDR_VAR 0 18
52232: PUSH
52233: LD_INT 7
52235: PUSH
52236: LD_INT 28
52238: PUSH
52239: LD_INT 45
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: LIST
52246: PUSH
52247: LD_VAR 0 12
52251: ARRAY
52252: ST_TO_ADDR
// break ;
52253: GO 52257
// end ; end ; end ;
52255: GO 52086
52257: POP
52258: POP
// end ; if not weapon then
52259: LD_VAR 0 18
52263: NOT
52264: IFFALSE 52324
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52266: LD_ADDR_VAR 0 5
52270: PUSH
52271: LD_VAR 0 5
52275: PUSH
52276: LD_INT 11
52278: PUSH
52279: LD_INT 30
52281: PUSH
52282: LD_INT 49
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: LIST
52289: DIFF
52290: ST_TO_ADDR
// if not list then
52291: LD_VAR 0 5
52295: NOT
52296: IFFALSE 52300
// exit ;
52298: GO 52442
// weapon := list [ rand ( 1 , list ) ] ;
52300: LD_ADDR_VAR 0 18
52304: PUSH
52305: LD_VAR 0 5
52309: PUSH
52310: LD_INT 1
52312: PPUSH
52313: LD_VAR 0 5
52317: PPUSH
52318: CALL_OW 12
52322: ARRAY
52323: ST_TO_ADDR
// end ; if weapon then
52324: LD_VAR 0 18
52328: IFFALSE 52442
// begin tmp := CostOfWeapon ( weapon ) ;
52330: LD_ADDR_VAR 0 14
52334: PUSH
52335: LD_VAR 0 18
52339: PPUSH
52340: CALL_OW 451
52344: ST_TO_ADDR
// j := GetBase ( tower ) ;
52345: LD_ADDR_VAR 0 9
52349: PUSH
52350: LD_VAR 0 1
52354: PPUSH
52355: CALL_OW 274
52359: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52360: LD_VAR 0 9
52364: PPUSH
52365: LD_INT 1
52367: PPUSH
52368: CALL_OW 275
52372: PUSH
52373: LD_VAR 0 14
52377: PUSH
52378: LD_INT 1
52380: ARRAY
52381: GREATEREQUAL
52382: PUSH
52383: LD_VAR 0 9
52387: PPUSH
52388: LD_INT 2
52390: PPUSH
52391: CALL_OW 275
52395: PUSH
52396: LD_VAR 0 14
52400: PUSH
52401: LD_INT 2
52403: ARRAY
52404: GREATEREQUAL
52405: AND
52406: PUSH
52407: LD_VAR 0 9
52411: PPUSH
52412: LD_INT 3
52414: PPUSH
52415: CALL_OW 275
52419: PUSH
52420: LD_VAR 0 14
52424: PUSH
52425: LD_INT 3
52427: ARRAY
52428: GREATEREQUAL
52429: AND
52430: IFFALSE 52442
// result := weapon ;
52432: LD_ADDR_VAR 0 3
52436: PUSH
52437: LD_VAR 0 18
52441: ST_TO_ADDR
// end ; end ;
52442: LD_VAR 0 3
52446: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52447: LD_INT 0
52449: PPUSH
52450: PPUSH
// result := true ;
52451: LD_ADDR_VAR 0 3
52455: PUSH
52456: LD_INT 1
52458: ST_TO_ADDR
// if array1 = array2 then
52459: LD_VAR 0 1
52463: PUSH
52464: LD_VAR 0 2
52468: EQUAL
52469: IFFALSE 52529
// begin for i = 1 to array1 do
52471: LD_ADDR_VAR 0 4
52475: PUSH
52476: DOUBLE
52477: LD_INT 1
52479: DEC
52480: ST_TO_ADDR
52481: LD_VAR 0 1
52485: PUSH
52486: FOR_TO
52487: IFFALSE 52525
// if array1 [ i ] <> array2 [ i ] then
52489: LD_VAR 0 1
52493: PUSH
52494: LD_VAR 0 4
52498: ARRAY
52499: PUSH
52500: LD_VAR 0 2
52504: PUSH
52505: LD_VAR 0 4
52509: ARRAY
52510: NONEQUAL
52511: IFFALSE 52523
// begin result := false ;
52513: LD_ADDR_VAR 0 3
52517: PUSH
52518: LD_INT 0
52520: ST_TO_ADDR
// break ;
52521: GO 52525
// end ;
52523: GO 52486
52525: POP
52526: POP
// end else
52527: GO 52537
// result := false ;
52529: LD_ADDR_VAR 0 3
52533: PUSH
52534: LD_INT 0
52536: ST_TO_ADDR
// end ;
52537: LD_VAR 0 3
52541: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52542: LD_INT 0
52544: PPUSH
52545: PPUSH
// if not array1 or not array2 then
52546: LD_VAR 0 1
52550: NOT
52551: PUSH
52552: LD_VAR 0 2
52556: NOT
52557: OR
52558: IFFALSE 52562
// exit ;
52560: GO 52626
// result := true ;
52562: LD_ADDR_VAR 0 3
52566: PUSH
52567: LD_INT 1
52569: ST_TO_ADDR
// for i = 1 to array1 do
52570: LD_ADDR_VAR 0 4
52574: PUSH
52575: DOUBLE
52576: LD_INT 1
52578: DEC
52579: ST_TO_ADDR
52580: LD_VAR 0 1
52584: PUSH
52585: FOR_TO
52586: IFFALSE 52624
// if array1 [ i ] <> array2 [ i ] then
52588: LD_VAR 0 1
52592: PUSH
52593: LD_VAR 0 4
52597: ARRAY
52598: PUSH
52599: LD_VAR 0 2
52603: PUSH
52604: LD_VAR 0 4
52608: ARRAY
52609: NONEQUAL
52610: IFFALSE 52622
// begin result := false ;
52612: LD_ADDR_VAR 0 3
52616: PUSH
52617: LD_INT 0
52619: ST_TO_ADDR
// break ;
52620: GO 52624
// end ;
52622: GO 52585
52624: POP
52625: POP
// end ;
52626: LD_VAR 0 3
52630: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52631: LD_INT 0
52633: PPUSH
52634: PPUSH
52635: PPUSH
// pom := GetBase ( fac ) ;
52636: LD_ADDR_VAR 0 5
52640: PUSH
52641: LD_VAR 0 1
52645: PPUSH
52646: CALL_OW 274
52650: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52651: LD_ADDR_VAR 0 4
52655: PUSH
52656: LD_VAR 0 2
52660: PUSH
52661: LD_INT 1
52663: ARRAY
52664: PPUSH
52665: LD_VAR 0 2
52669: PUSH
52670: LD_INT 2
52672: ARRAY
52673: PPUSH
52674: LD_VAR 0 2
52678: PUSH
52679: LD_INT 3
52681: ARRAY
52682: PPUSH
52683: LD_VAR 0 2
52687: PUSH
52688: LD_INT 4
52690: ARRAY
52691: PPUSH
52692: CALL_OW 449
52696: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52697: LD_ADDR_VAR 0 3
52701: PUSH
52702: LD_VAR 0 5
52706: PPUSH
52707: LD_INT 1
52709: PPUSH
52710: CALL_OW 275
52714: PUSH
52715: LD_VAR 0 4
52719: PUSH
52720: LD_INT 1
52722: ARRAY
52723: GREATEREQUAL
52724: PUSH
52725: LD_VAR 0 5
52729: PPUSH
52730: LD_INT 2
52732: PPUSH
52733: CALL_OW 275
52737: PUSH
52738: LD_VAR 0 4
52742: PUSH
52743: LD_INT 2
52745: ARRAY
52746: GREATEREQUAL
52747: AND
52748: PUSH
52749: LD_VAR 0 5
52753: PPUSH
52754: LD_INT 3
52756: PPUSH
52757: CALL_OW 275
52761: PUSH
52762: LD_VAR 0 4
52766: PUSH
52767: LD_INT 3
52769: ARRAY
52770: GREATEREQUAL
52771: AND
52772: ST_TO_ADDR
// end ;
52773: LD_VAR 0 3
52777: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52778: LD_INT 0
52780: PPUSH
52781: PPUSH
52782: PPUSH
52783: PPUSH
// pom := GetBase ( building ) ;
52784: LD_ADDR_VAR 0 3
52788: PUSH
52789: LD_VAR 0 1
52793: PPUSH
52794: CALL_OW 274
52798: ST_TO_ADDR
// if not pom then
52799: LD_VAR 0 3
52803: NOT
52804: IFFALSE 52808
// exit ;
52806: GO 52978
// btype := GetBType ( building ) ;
52808: LD_ADDR_VAR 0 5
52812: PUSH
52813: LD_VAR 0 1
52817: PPUSH
52818: CALL_OW 266
52822: ST_TO_ADDR
// if btype = b_armoury then
52823: LD_VAR 0 5
52827: PUSH
52828: LD_INT 4
52830: EQUAL
52831: IFFALSE 52841
// btype := b_barracks ;
52833: LD_ADDR_VAR 0 5
52837: PUSH
52838: LD_INT 5
52840: ST_TO_ADDR
// if btype = b_depot then
52841: LD_VAR 0 5
52845: PUSH
52846: LD_INT 0
52848: EQUAL
52849: IFFALSE 52859
// btype := b_warehouse ;
52851: LD_ADDR_VAR 0 5
52855: PUSH
52856: LD_INT 1
52858: ST_TO_ADDR
// if btype = b_workshop then
52859: LD_VAR 0 5
52863: PUSH
52864: LD_INT 2
52866: EQUAL
52867: IFFALSE 52877
// btype := b_factory ;
52869: LD_ADDR_VAR 0 5
52873: PUSH
52874: LD_INT 3
52876: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52877: LD_ADDR_VAR 0 4
52881: PUSH
52882: LD_VAR 0 5
52886: PPUSH
52887: LD_VAR 0 1
52891: PPUSH
52892: CALL_OW 248
52896: PPUSH
52897: CALL_OW 450
52901: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52902: LD_ADDR_VAR 0 2
52906: PUSH
52907: LD_VAR 0 3
52911: PPUSH
52912: LD_INT 1
52914: PPUSH
52915: CALL_OW 275
52919: PUSH
52920: LD_VAR 0 4
52924: PUSH
52925: LD_INT 1
52927: ARRAY
52928: GREATEREQUAL
52929: PUSH
52930: LD_VAR 0 3
52934: PPUSH
52935: LD_INT 2
52937: PPUSH
52938: CALL_OW 275
52942: PUSH
52943: LD_VAR 0 4
52947: PUSH
52948: LD_INT 2
52950: ARRAY
52951: GREATEREQUAL
52952: AND
52953: PUSH
52954: LD_VAR 0 3
52958: PPUSH
52959: LD_INT 3
52961: PPUSH
52962: CALL_OW 275
52966: PUSH
52967: LD_VAR 0 4
52971: PUSH
52972: LD_INT 3
52974: ARRAY
52975: GREATEREQUAL
52976: AND
52977: ST_TO_ADDR
// end ;
52978: LD_VAR 0 2
52982: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52983: LD_INT 0
52985: PPUSH
52986: PPUSH
52987: PPUSH
// pom := GetBase ( building ) ;
52988: LD_ADDR_VAR 0 4
52992: PUSH
52993: LD_VAR 0 1
52997: PPUSH
52998: CALL_OW 274
53002: ST_TO_ADDR
// if not pom then
53003: LD_VAR 0 4
53007: NOT
53008: IFFALSE 53012
// exit ;
53010: GO 53113
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53012: LD_ADDR_VAR 0 5
53016: PUSH
53017: LD_VAR 0 2
53021: PPUSH
53022: LD_VAR 0 1
53026: PPUSH
53027: CALL_OW 248
53031: PPUSH
53032: CALL_OW 450
53036: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53037: LD_ADDR_VAR 0 3
53041: PUSH
53042: LD_VAR 0 4
53046: PPUSH
53047: LD_INT 1
53049: PPUSH
53050: CALL_OW 275
53054: PUSH
53055: LD_VAR 0 5
53059: PUSH
53060: LD_INT 1
53062: ARRAY
53063: GREATEREQUAL
53064: PUSH
53065: LD_VAR 0 4
53069: PPUSH
53070: LD_INT 2
53072: PPUSH
53073: CALL_OW 275
53077: PUSH
53078: LD_VAR 0 5
53082: PUSH
53083: LD_INT 2
53085: ARRAY
53086: GREATEREQUAL
53087: AND
53088: PUSH
53089: LD_VAR 0 4
53093: PPUSH
53094: LD_INT 3
53096: PPUSH
53097: CALL_OW 275
53101: PUSH
53102: LD_VAR 0 5
53106: PUSH
53107: LD_INT 3
53109: ARRAY
53110: GREATEREQUAL
53111: AND
53112: ST_TO_ADDR
// end ;
53113: LD_VAR 0 3
53117: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53118: LD_INT 0
53120: PPUSH
53121: PPUSH
53122: PPUSH
53123: PPUSH
53124: PPUSH
53125: PPUSH
53126: PPUSH
53127: PPUSH
53128: PPUSH
53129: PPUSH
53130: PPUSH
// result := false ;
53131: LD_ADDR_VAR 0 8
53135: PUSH
53136: LD_INT 0
53138: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53139: LD_VAR 0 5
53143: NOT
53144: PUSH
53145: LD_VAR 0 1
53149: NOT
53150: OR
53151: PUSH
53152: LD_VAR 0 2
53156: NOT
53157: OR
53158: PUSH
53159: LD_VAR 0 3
53163: NOT
53164: OR
53165: IFFALSE 53169
// exit ;
53167: GO 53983
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53169: LD_ADDR_VAR 0 14
53173: PUSH
53174: LD_VAR 0 1
53178: PPUSH
53179: LD_VAR 0 2
53183: PPUSH
53184: LD_VAR 0 3
53188: PPUSH
53189: LD_VAR 0 4
53193: PPUSH
53194: LD_VAR 0 5
53198: PUSH
53199: LD_INT 1
53201: ARRAY
53202: PPUSH
53203: CALL_OW 248
53207: PPUSH
53208: LD_INT 0
53210: PPUSH
53211: CALL 55236 0 6
53215: ST_TO_ADDR
// if not hexes then
53216: LD_VAR 0 14
53220: NOT
53221: IFFALSE 53225
// exit ;
53223: GO 53983
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53225: LD_ADDR_VAR 0 17
53229: PUSH
53230: LD_VAR 0 5
53234: PPUSH
53235: LD_INT 22
53237: PUSH
53238: LD_VAR 0 13
53242: PPUSH
53243: CALL_OW 255
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 2
53254: PUSH
53255: LD_INT 30
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 30
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: LIST
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PPUSH
53284: CALL_OW 72
53288: ST_TO_ADDR
// for i = 1 to hexes do
53289: LD_ADDR_VAR 0 9
53293: PUSH
53294: DOUBLE
53295: LD_INT 1
53297: DEC
53298: ST_TO_ADDR
53299: LD_VAR 0 14
53303: PUSH
53304: FOR_TO
53305: IFFALSE 53981
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53307: LD_ADDR_VAR 0 13
53311: PUSH
53312: LD_VAR 0 14
53316: PUSH
53317: LD_VAR 0 9
53321: ARRAY
53322: PUSH
53323: LD_INT 1
53325: ARRAY
53326: PPUSH
53327: LD_VAR 0 14
53331: PUSH
53332: LD_VAR 0 9
53336: ARRAY
53337: PUSH
53338: LD_INT 2
53340: ARRAY
53341: PPUSH
53342: CALL_OW 428
53346: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53347: LD_VAR 0 14
53351: PUSH
53352: LD_VAR 0 9
53356: ARRAY
53357: PUSH
53358: LD_INT 1
53360: ARRAY
53361: PPUSH
53362: LD_VAR 0 14
53366: PUSH
53367: LD_VAR 0 9
53371: ARRAY
53372: PUSH
53373: LD_INT 2
53375: ARRAY
53376: PPUSH
53377: CALL_OW 351
53381: PUSH
53382: LD_VAR 0 14
53386: PUSH
53387: LD_VAR 0 9
53391: ARRAY
53392: PUSH
53393: LD_INT 1
53395: ARRAY
53396: PPUSH
53397: LD_VAR 0 14
53401: PUSH
53402: LD_VAR 0 9
53406: ARRAY
53407: PUSH
53408: LD_INT 2
53410: ARRAY
53411: PPUSH
53412: CALL_OW 488
53416: NOT
53417: OR
53418: PUSH
53419: LD_VAR 0 13
53423: PPUSH
53424: CALL_OW 247
53428: PUSH
53429: LD_INT 3
53431: EQUAL
53432: OR
53433: IFFALSE 53439
// exit ;
53435: POP
53436: POP
53437: GO 53983
// if not tmp then
53439: LD_VAR 0 13
53443: NOT
53444: IFFALSE 53448
// continue ;
53446: GO 53304
// result := true ;
53448: LD_ADDR_VAR 0 8
53452: PUSH
53453: LD_INT 1
53455: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53456: LD_VAR 0 6
53460: PUSH
53461: LD_VAR 0 13
53465: PPUSH
53466: CALL_OW 247
53470: PUSH
53471: LD_INT 2
53473: EQUAL
53474: AND
53475: PUSH
53476: LD_VAR 0 13
53480: PPUSH
53481: CALL_OW 263
53485: PUSH
53486: LD_INT 1
53488: EQUAL
53489: AND
53490: IFFALSE 53654
// begin if IsDrivenBy ( tmp ) then
53492: LD_VAR 0 13
53496: PPUSH
53497: CALL_OW 311
53501: IFFALSE 53505
// continue ;
53503: GO 53304
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53505: LD_VAR 0 6
53509: PPUSH
53510: LD_INT 3
53512: PUSH
53513: LD_INT 60
53515: PUSH
53516: EMPTY
53517: LIST
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 3
53525: PUSH
53526: LD_INT 55
53528: PUSH
53529: EMPTY
53530: LIST
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PPUSH
53540: CALL_OW 72
53544: IFFALSE 53652
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53546: LD_ADDR_VAR 0 18
53550: PUSH
53551: LD_VAR 0 6
53555: PPUSH
53556: LD_INT 3
53558: PUSH
53559: LD_INT 60
53561: PUSH
53562: EMPTY
53563: LIST
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 3
53571: PUSH
53572: LD_INT 55
53574: PUSH
53575: EMPTY
53576: LIST
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PPUSH
53586: CALL_OW 72
53590: PUSH
53591: LD_INT 1
53593: ARRAY
53594: ST_TO_ADDR
// if IsInUnit ( driver ) then
53595: LD_VAR 0 18
53599: PPUSH
53600: CALL_OW 310
53604: IFFALSE 53615
// ComExit ( driver ) ;
53606: LD_VAR 0 18
53610: PPUSH
53611: CALL 79017 0 1
// AddComEnterUnit ( driver , tmp ) ;
53615: LD_VAR 0 18
53619: PPUSH
53620: LD_VAR 0 13
53624: PPUSH
53625: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53629: LD_VAR 0 18
53633: PPUSH
53634: LD_VAR 0 7
53638: PPUSH
53639: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53643: LD_VAR 0 18
53647: PPUSH
53648: CALL_OW 181
// end ; continue ;
53652: GO 53304
// end ; if not cleaners or not tmp in cleaners then
53654: LD_VAR 0 6
53658: NOT
53659: PUSH
53660: LD_VAR 0 13
53664: PUSH
53665: LD_VAR 0 6
53669: IN
53670: NOT
53671: OR
53672: IFFALSE 53979
// begin if dep then
53674: LD_VAR 0 17
53678: IFFALSE 53814
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53680: LD_ADDR_VAR 0 16
53684: PUSH
53685: LD_VAR 0 17
53689: PUSH
53690: LD_INT 1
53692: ARRAY
53693: PPUSH
53694: CALL_OW 250
53698: PPUSH
53699: LD_VAR 0 17
53703: PUSH
53704: LD_INT 1
53706: ARRAY
53707: PPUSH
53708: CALL_OW 254
53712: PPUSH
53713: LD_INT 5
53715: PPUSH
53716: CALL_OW 272
53720: PUSH
53721: LD_VAR 0 17
53725: PUSH
53726: LD_INT 1
53728: ARRAY
53729: PPUSH
53730: CALL_OW 251
53734: PPUSH
53735: LD_VAR 0 17
53739: PUSH
53740: LD_INT 1
53742: ARRAY
53743: PPUSH
53744: CALL_OW 254
53748: PPUSH
53749: LD_INT 5
53751: PPUSH
53752: CALL_OW 273
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53761: LD_VAR 0 16
53765: PUSH
53766: LD_INT 1
53768: ARRAY
53769: PPUSH
53770: LD_VAR 0 16
53774: PUSH
53775: LD_INT 2
53777: ARRAY
53778: PPUSH
53779: CALL_OW 488
53783: IFFALSE 53814
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53785: LD_VAR 0 13
53789: PPUSH
53790: LD_VAR 0 16
53794: PUSH
53795: LD_INT 1
53797: ARRAY
53798: PPUSH
53799: LD_VAR 0 16
53803: PUSH
53804: LD_INT 2
53806: ARRAY
53807: PPUSH
53808: CALL_OW 111
// continue ;
53812: GO 53304
// end ; end ; r := GetDir ( tmp ) ;
53814: LD_ADDR_VAR 0 15
53818: PUSH
53819: LD_VAR 0 13
53823: PPUSH
53824: CALL_OW 254
53828: ST_TO_ADDR
// if r = 5 then
53829: LD_VAR 0 15
53833: PUSH
53834: LD_INT 5
53836: EQUAL
53837: IFFALSE 53847
// r := 0 ;
53839: LD_ADDR_VAR 0 15
53843: PUSH
53844: LD_INT 0
53846: ST_TO_ADDR
// for j = r to 5 do
53847: LD_ADDR_VAR 0 10
53851: PUSH
53852: DOUBLE
53853: LD_VAR 0 15
53857: DEC
53858: ST_TO_ADDR
53859: LD_INT 5
53861: PUSH
53862: FOR_TO
53863: IFFALSE 53977
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53865: LD_ADDR_VAR 0 11
53869: PUSH
53870: LD_VAR 0 13
53874: PPUSH
53875: CALL_OW 250
53879: PPUSH
53880: LD_VAR 0 10
53884: PPUSH
53885: LD_INT 2
53887: PPUSH
53888: CALL_OW 272
53892: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53893: LD_ADDR_VAR 0 12
53897: PUSH
53898: LD_VAR 0 13
53902: PPUSH
53903: CALL_OW 251
53907: PPUSH
53908: LD_VAR 0 10
53912: PPUSH
53913: LD_INT 2
53915: PPUSH
53916: CALL_OW 273
53920: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53921: LD_VAR 0 11
53925: PPUSH
53926: LD_VAR 0 12
53930: PPUSH
53931: CALL_OW 488
53935: PUSH
53936: LD_VAR 0 11
53940: PPUSH
53941: LD_VAR 0 12
53945: PPUSH
53946: CALL_OW 428
53950: NOT
53951: AND
53952: IFFALSE 53975
// begin ComMoveXY ( tmp , _x , _y ) ;
53954: LD_VAR 0 13
53958: PPUSH
53959: LD_VAR 0 11
53963: PPUSH
53964: LD_VAR 0 12
53968: PPUSH
53969: CALL_OW 111
// break ;
53973: GO 53977
// end ; end ;
53975: GO 53862
53977: POP
53978: POP
// end ; end ;
53979: GO 53304
53981: POP
53982: POP
// end ;
53983: LD_VAR 0 8
53987: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53988: LD_INT 0
53990: PPUSH
// result := true ;
53991: LD_ADDR_VAR 0 3
53995: PUSH
53996: LD_INT 1
53998: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53999: LD_VAR 0 2
54003: PUSH
54004: LD_INT 24
54006: DOUBLE
54007: EQUAL
54008: IFTRUE 54018
54010: LD_INT 33
54012: DOUBLE
54013: EQUAL
54014: IFTRUE 54018
54016: GO 54043
54018: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54019: LD_ADDR_VAR 0 3
54023: PUSH
54024: LD_INT 32
54026: PPUSH
54027: LD_VAR 0 1
54031: PPUSH
54032: CALL_OW 321
54036: PUSH
54037: LD_INT 2
54039: EQUAL
54040: ST_TO_ADDR
54041: GO 54359
54043: LD_INT 20
54045: DOUBLE
54046: EQUAL
54047: IFTRUE 54051
54049: GO 54076
54051: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54052: LD_ADDR_VAR 0 3
54056: PUSH
54057: LD_INT 6
54059: PPUSH
54060: LD_VAR 0 1
54064: PPUSH
54065: CALL_OW 321
54069: PUSH
54070: LD_INT 2
54072: EQUAL
54073: ST_TO_ADDR
54074: GO 54359
54076: LD_INT 22
54078: DOUBLE
54079: EQUAL
54080: IFTRUE 54090
54082: LD_INT 36
54084: DOUBLE
54085: EQUAL
54086: IFTRUE 54090
54088: GO 54115
54090: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54091: LD_ADDR_VAR 0 3
54095: PUSH
54096: LD_INT 15
54098: PPUSH
54099: LD_VAR 0 1
54103: PPUSH
54104: CALL_OW 321
54108: PUSH
54109: LD_INT 2
54111: EQUAL
54112: ST_TO_ADDR
54113: GO 54359
54115: LD_INT 30
54117: DOUBLE
54118: EQUAL
54119: IFTRUE 54123
54121: GO 54148
54123: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54124: LD_ADDR_VAR 0 3
54128: PUSH
54129: LD_INT 20
54131: PPUSH
54132: LD_VAR 0 1
54136: PPUSH
54137: CALL_OW 321
54141: PUSH
54142: LD_INT 2
54144: EQUAL
54145: ST_TO_ADDR
54146: GO 54359
54148: LD_INT 28
54150: DOUBLE
54151: EQUAL
54152: IFTRUE 54162
54154: LD_INT 21
54156: DOUBLE
54157: EQUAL
54158: IFTRUE 54162
54160: GO 54187
54162: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54163: LD_ADDR_VAR 0 3
54167: PUSH
54168: LD_INT 21
54170: PPUSH
54171: LD_VAR 0 1
54175: PPUSH
54176: CALL_OW 321
54180: PUSH
54181: LD_INT 2
54183: EQUAL
54184: ST_TO_ADDR
54185: GO 54359
54187: LD_INT 16
54189: DOUBLE
54190: EQUAL
54191: IFTRUE 54195
54193: GO 54220
54195: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54196: LD_ADDR_VAR 0 3
54200: PUSH
54201: LD_INT 84
54203: PPUSH
54204: LD_VAR 0 1
54208: PPUSH
54209: CALL_OW 321
54213: PUSH
54214: LD_INT 2
54216: EQUAL
54217: ST_TO_ADDR
54218: GO 54359
54220: LD_INT 19
54222: DOUBLE
54223: EQUAL
54224: IFTRUE 54234
54226: LD_INT 23
54228: DOUBLE
54229: EQUAL
54230: IFTRUE 54234
54232: GO 54259
54234: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54235: LD_ADDR_VAR 0 3
54239: PUSH
54240: LD_INT 83
54242: PPUSH
54243: LD_VAR 0 1
54247: PPUSH
54248: CALL_OW 321
54252: PUSH
54253: LD_INT 2
54255: EQUAL
54256: ST_TO_ADDR
54257: GO 54359
54259: LD_INT 17
54261: DOUBLE
54262: EQUAL
54263: IFTRUE 54267
54265: GO 54292
54267: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54268: LD_ADDR_VAR 0 3
54272: PUSH
54273: LD_INT 39
54275: PPUSH
54276: LD_VAR 0 1
54280: PPUSH
54281: CALL_OW 321
54285: PUSH
54286: LD_INT 2
54288: EQUAL
54289: ST_TO_ADDR
54290: GO 54359
54292: LD_INT 18
54294: DOUBLE
54295: EQUAL
54296: IFTRUE 54300
54298: GO 54325
54300: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54301: LD_ADDR_VAR 0 3
54305: PUSH
54306: LD_INT 40
54308: PPUSH
54309: LD_VAR 0 1
54313: PPUSH
54314: CALL_OW 321
54318: PUSH
54319: LD_INT 2
54321: EQUAL
54322: ST_TO_ADDR
54323: GO 54359
54325: LD_INT 27
54327: DOUBLE
54328: EQUAL
54329: IFTRUE 54333
54331: GO 54358
54333: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54334: LD_ADDR_VAR 0 3
54338: PUSH
54339: LD_INT 35
54341: PPUSH
54342: LD_VAR 0 1
54346: PPUSH
54347: CALL_OW 321
54351: PUSH
54352: LD_INT 2
54354: EQUAL
54355: ST_TO_ADDR
54356: GO 54359
54358: POP
// end ;
54359: LD_VAR 0 3
54363: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54364: LD_INT 0
54366: PPUSH
54367: PPUSH
54368: PPUSH
54369: PPUSH
54370: PPUSH
54371: PPUSH
54372: PPUSH
54373: PPUSH
54374: PPUSH
54375: PPUSH
54376: PPUSH
// result := false ;
54377: LD_ADDR_VAR 0 6
54381: PUSH
54382: LD_INT 0
54384: ST_TO_ADDR
// if btype = b_depot then
54385: LD_VAR 0 2
54389: PUSH
54390: LD_INT 0
54392: EQUAL
54393: IFFALSE 54405
// begin result := true ;
54395: LD_ADDR_VAR 0 6
54399: PUSH
54400: LD_INT 1
54402: ST_TO_ADDR
// exit ;
54403: GO 55231
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54405: LD_VAR 0 1
54409: NOT
54410: PUSH
54411: LD_VAR 0 1
54415: PPUSH
54416: CALL_OW 266
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: IN
54431: NOT
54432: OR
54433: PUSH
54434: LD_VAR 0 2
54438: NOT
54439: OR
54440: PUSH
54441: LD_VAR 0 5
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: LD_INT 2
54454: PUSH
54455: LD_INT 3
54457: PUSH
54458: LD_INT 4
54460: PUSH
54461: LD_INT 5
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: IN
54472: NOT
54473: OR
54474: PUSH
54475: LD_VAR 0 3
54479: PPUSH
54480: LD_VAR 0 4
54484: PPUSH
54485: CALL_OW 488
54489: NOT
54490: OR
54491: IFFALSE 54495
// exit ;
54493: GO 55231
// side := GetSide ( depot ) ;
54495: LD_ADDR_VAR 0 9
54499: PUSH
54500: LD_VAR 0 1
54504: PPUSH
54505: CALL_OW 255
54509: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54510: LD_VAR 0 9
54514: PPUSH
54515: LD_VAR 0 2
54519: PPUSH
54520: CALL 53988 0 2
54524: NOT
54525: IFFALSE 54529
// exit ;
54527: GO 55231
// pom := GetBase ( depot ) ;
54529: LD_ADDR_VAR 0 10
54533: PUSH
54534: LD_VAR 0 1
54538: PPUSH
54539: CALL_OW 274
54543: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54544: LD_ADDR_VAR 0 11
54548: PUSH
54549: LD_VAR 0 2
54553: PPUSH
54554: LD_VAR 0 1
54558: PPUSH
54559: CALL_OW 248
54563: PPUSH
54564: CALL_OW 450
54568: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54569: LD_VAR 0 10
54573: PPUSH
54574: LD_INT 1
54576: PPUSH
54577: CALL_OW 275
54581: PUSH
54582: LD_VAR 0 11
54586: PUSH
54587: LD_INT 1
54589: ARRAY
54590: GREATEREQUAL
54591: PUSH
54592: LD_VAR 0 10
54596: PPUSH
54597: LD_INT 2
54599: PPUSH
54600: CALL_OW 275
54604: PUSH
54605: LD_VAR 0 11
54609: PUSH
54610: LD_INT 2
54612: ARRAY
54613: GREATEREQUAL
54614: AND
54615: PUSH
54616: LD_VAR 0 10
54620: PPUSH
54621: LD_INT 3
54623: PPUSH
54624: CALL_OW 275
54628: PUSH
54629: LD_VAR 0 11
54633: PUSH
54634: LD_INT 3
54636: ARRAY
54637: GREATEREQUAL
54638: AND
54639: NOT
54640: IFFALSE 54644
// exit ;
54642: GO 55231
// if GetBType ( depot ) = b_depot then
54644: LD_VAR 0 1
54648: PPUSH
54649: CALL_OW 266
54653: PUSH
54654: LD_INT 0
54656: EQUAL
54657: IFFALSE 54669
// dist := 28 else
54659: LD_ADDR_VAR 0 14
54663: PUSH
54664: LD_INT 28
54666: ST_TO_ADDR
54667: GO 54677
// dist := 36 ;
54669: LD_ADDR_VAR 0 14
54673: PUSH
54674: LD_INT 36
54676: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54677: LD_VAR 0 1
54681: PPUSH
54682: LD_VAR 0 3
54686: PPUSH
54687: LD_VAR 0 4
54691: PPUSH
54692: CALL_OW 297
54696: PUSH
54697: LD_VAR 0 14
54701: GREATER
54702: IFFALSE 54706
// exit ;
54704: GO 55231
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54706: LD_ADDR_VAR 0 12
54710: PUSH
54711: LD_VAR 0 2
54715: PPUSH
54716: LD_VAR 0 3
54720: PPUSH
54721: LD_VAR 0 4
54725: PPUSH
54726: LD_VAR 0 5
54730: PPUSH
54731: LD_VAR 0 1
54735: PPUSH
54736: CALL_OW 248
54740: PPUSH
54741: LD_INT 0
54743: PPUSH
54744: CALL 55236 0 6
54748: ST_TO_ADDR
// if not hexes then
54749: LD_VAR 0 12
54753: NOT
54754: IFFALSE 54758
// exit ;
54756: GO 55231
// hex := GetHexInfo ( x , y ) ;
54758: LD_ADDR_VAR 0 15
54762: PUSH
54763: LD_VAR 0 3
54767: PPUSH
54768: LD_VAR 0 4
54772: PPUSH
54773: CALL_OW 546
54777: ST_TO_ADDR
// if hex [ 1 ] then
54778: LD_VAR 0 15
54782: PUSH
54783: LD_INT 1
54785: ARRAY
54786: IFFALSE 54790
// exit ;
54788: GO 55231
// height := hex [ 2 ] ;
54790: LD_ADDR_VAR 0 13
54794: PUSH
54795: LD_VAR 0 15
54799: PUSH
54800: LD_INT 2
54802: ARRAY
54803: ST_TO_ADDR
// for i = 1 to hexes do
54804: LD_ADDR_VAR 0 7
54808: PUSH
54809: DOUBLE
54810: LD_INT 1
54812: DEC
54813: ST_TO_ADDR
54814: LD_VAR 0 12
54818: PUSH
54819: FOR_TO
54820: IFFALSE 55150
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54822: LD_VAR 0 12
54826: PUSH
54827: LD_VAR 0 7
54831: ARRAY
54832: PUSH
54833: LD_INT 1
54835: ARRAY
54836: PPUSH
54837: LD_VAR 0 12
54841: PUSH
54842: LD_VAR 0 7
54846: ARRAY
54847: PUSH
54848: LD_INT 2
54850: ARRAY
54851: PPUSH
54852: CALL_OW 488
54856: NOT
54857: PUSH
54858: LD_VAR 0 12
54862: PUSH
54863: LD_VAR 0 7
54867: ARRAY
54868: PUSH
54869: LD_INT 1
54871: ARRAY
54872: PPUSH
54873: LD_VAR 0 12
54877: PUSH
54878: LD_VAR 0 7
54882: ARRAY
54883: PUSH
54884: LD_INT 2
54886: ARRAY
54887: PPUSH
54888: CALL_OW 428
54892: PUSH
54893: LD_INT 0
54895: GREATER
54896: OR
54897: PUSH
54898: LD_VAR 0 12
54902: PUSH
54903: LD_VAR 0 7
54907: ARRAY
54908: PUSH
54909: LD_INT 1
54911: ARRAY
54912: PPUSH
54913: LD_VAR 0 12
54917: PUSH
54918: LD_VAR 0 7
54922: ARRAY
54923: PUSH
54924: LD_INT 2
54926: ARRAY
54927: PPUSH
54928: CALL_OW 351
54932: OR
54933: IFFALSE 54939
// exit ;
54935: POP
54936: POP
54937: GO 55231
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54939: LD_ADDR_VAR 0 8
54943: PUSH
54944: LD_VAR 0 12
54948: PUSH
54949: LD_VAR 0 7
54953: ARRAY
54954: PUSH
54955: LD_INT 1
54957: ARRAY
54958: PPUSH
54959: LD_VAR 0 12
54963: PUSH
54964: LD_VAR 0 7
54968: ARRAY
54969: PUSH
54970: LD_INT 2
54972: ARRAY
54973: PPUSH
54974: CALL_OW 546
54978: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54979: LD_VAR 0 8
54983: PUSH
54984: LD_INT 1
54986: ARRAY
54987: PUSH
54988: LD_VAR 0 8
54992: PUSH
54993: LD_INT 2
54995: ARRAY
54996: PUSH
54997: LD_VAR 0 13
55001: PUSH
55002: LD_INT 2
55004: PLUS
55005: GREATER
55006: OR
55007: PUSH
55008: LD_VAR 0 8
55012: PUSH
55013: LD_INT 2
55015: ARRAY
55016: PUSH
55017: LD_VAR 0 13
55021: PUSH
55022: LD_INT 2
55024: MINUS
55025: LESS
55026: OR
55027: PUSH
55028: LD_VAR 0 8
55032: PUSH
55033: LD_INT 3
55035: ARRAY
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: LD_INT 8
55042: PUSH
55043: LD_INT 9
55045: PUSH
55046: LD_INT 10
55048: PUSH
55049: LD_INT 11
55051: PUSH
55052: LD_INT 12
55054: PUSH
55055: LD_INT 13
55057: PUSH
55058: LD_INT 16
55060: PUSH
55061: LD_INT 17
55063: PUSH
55064: LD_INT 18
55066: PUSH
55067: LD_INT 19
55069: PUSH
55070: LD_INT 20
55072: PUSH
55073: LD_INT 21
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: IN
55091: NOT
55092: OR
55093: PUSH
55094: LD_VAR 0 8
55098: PUSH
55099: LD_INT 5
55101: ARRAY
55102: NOT
55103: OR
55104: PUSH
55105: LD_VAR 0 8
55109: PUSH
55110: LD_INT 6
55112: ARRAY
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: LD_INT 2
55119: PUSH
55120: LD_INT 7
55122: PUSH
55123: LD_INT 9
55125: PUSH
55126: LD_INT 10
55128: PUSH
55129: LD_INT 11
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: IN
55140: NOT
55141: OR
55142: IFFALSE 55148
// exit ;
55144: POP
55145: POP
55146: GO 55231
// end ;
55148: GO 54819
55150: POP
55151: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55152: LD_VAR 0 9
55156: PPUSH
55157: LD_VAR 0 3
55161: PPUSH
55162: LD_VAR 0 4
55166: PPUSH
55167: LD_INT 20
55169: PPUSH
55170: CALL 47154 0 4
55174: PUSH
55175: LD_INT 4
55177: ARRAY
55178: IFFALSE 55182
// exit ;
55180: GO 55231
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55182: LD_VAR 0 2
55186: PUSH
55187: LD_INT 29
55189: PUSH
55190: LD_INT 30
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: IN
55197: PUSH
55198: LD_VAR 0 3
55202: PPUSH
55203: LD_VAR 0 4
55207: PPUSH
55208: LD_VAR 0 9
55212: PPUSH
55213: CALL_OW 440
55217: NOT
55218: AND
55219: IFFALSE 55223
// exit ;
55221: GO 55231
// result := true ;
55223: LD_ADDR_VAR 0 6
55227: PUSH
55228: LD_INT 1
55230: ST_TO_ADDR
// end ;
55231: LD_VAR 0 6
55235: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55236: LD_INT 0
55238: PPUSH
55239: PPUSH
55240: PPUSH
55241: PPUSH
55242: PPUSH
55243: PPUSH
55244: PPUSH
55245: PPUSH
55246: PPUSH
55247: PPUSH
55248: PPUSH
55249: PPUSH
55250: PPUSH
55251: PPUSH
55252: PPUSH
55253: PPUSH
55254: PPUSH
55255: PPUSH
55256: PPUSH
55257: PPUSH
55258: PPUSH
55259: PPUSH
55260: PPUSH
55261: PPUSH
55262: PPUSH
55263: PPUSH
55264: PPUSH
55265: PPUSH
55266: PPUSH
55267: PPUSH
55268: PPUSH
55269: PPUSH
55270: PPUSH
55271: PPUSH
55272: PPUSH
55273: PPUSH
55274: PPUSH
55275: PPUSH
55276: PPUSH
55277: PPUSH
55278: PPUSH
55279: PPUSH
55280: PPUSH
55281: PPUSH
55282: PPUSH
55283: PPUSH
55284: PPUSH
55285: PPUSH
55286: PPUSH
55287: PPUSH
55288: PPUSH
55289: PPUSH
55290: PPUSH
55291: PPUSH
55292: PPUSH
55293: PPUSH
55294: PPUSH
55295: PPUSH
// result = [ ] ;
55296: LD_ADDR_VAR 0 7
55300: PUSH
55301: EMPTY
55302: ST_TO_ADDR
// temp_list = [ ] ;
55303: LD_ADDR_VAR 0 9
55307: PUSH
55308: EMPTY
55309: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55310: LD_VAR 0 4
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: LD_INT 2
55323: PUSH
55324: LD_INT 3
55326: PUSH
55327: LD_INT 4
55329: PUSH
55330: LD_INT 5
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: IN
55341: NOT
55342: PUSH
55343: LD_VAR 0 1
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: IN
55358: PUSH
55359: LD_VAR 0 5
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: LD_INT 2
55369: PUSH
55370: LD_INT 3
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: LIST
55377: IN
55378: NOT
55379: AND
55380: OR
55381: IFFALSE 55385
// exit ;
55383: GO 73776
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55385: LD_VAR 0 1
55389: PUSH
55390: LD_INT 6
55392: PUSH
55393: LD_INT 7
55395: PUSH
55396: LD_INT 8
55398: PUSH
55399: LD_INT 13
55401: PUSH
55402: LD_INT 12
55404: PUSH
55405: LD_INT 15
55407: PUSH
55408: LD_INT 11
55410: PUSH
55411: LD_INT 14
55413: PUSH
55414: LD_INT 10
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: IN
55428: IFFALSE 55438
// btype = b_lab ;
55430: LD_ADDR_VAR 0 1
55434: PUSH
55435: LD_INT 6
55437: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55438: LD_VAR 0 6
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: LD_INT 2
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: LIST
55456: IN
55457: NOT
55458: PUSH
55459: LD_VAR 0 1
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: LD_INT 3
55475: PUSH
55476: LD_INT 6
55478: PUSH
55479: LD_INT 36
55481: PUSH
55482: LD_INT 4
55484: PUSH
55485: LD_INT 5
55487: PUSH
55488: LD_INT 31
55490: PUSH
55491: LD_INT 32
55493: PUSH
55494: LD_INT 33
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: IN
55510: NOT
55511: PUSH
55512: LD_VAR 0 6
55516: PUSH
55517: LD_INT 1
55519: EQUAL
55520: AND
55521: OR
55522: PUSH
55523: LD_VAR 0 1
55527: PUSH
55528: LD_INT 2
55530: PUSH
55531: LD_INT 3
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: IN
55538: NOT
55539: PUSH
55540: LD_VAR 0 6
55544: PUSH
55545: LD_INT 2
55547: EQUAL
55548: AND
55549: OR
55550: IFFALSE 55560
// mode = 0 ;
55552: LD_ADDR_VAR 0 6
55556: PUSH
55557: LD_INT 0
55559: ST_TO_ADDR
// case mode of 0 :
55560: LD_VAR 0 6
55564: PUSH
55565: LD_INT 0
55567: DOUBLE
55568: EQUAL
55569: IFTRUE 55573
55571: GO 67026
55573: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55574: LD_ADDR_VAR 0 11
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: LD_INT 2
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: PUSH
55690: LD_INT 2
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: LD_INT 2
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: LD_INT 3
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: LD_INT 3
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55767: LD_ADDR_VAR 0 12
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 2
55901: NEG
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 3
55924: NEG
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 3
55935: NEG
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55963: LD_ADDR_VAR 0 13
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: LD_INT 1
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 2
56056: PUSH
56057: LD_INT 1
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 2
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: LD_INT 2
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 2
56098: NEG
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 2
56110: NEG
56111: PUSH
56112: LD_INT 3
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 3
56122: NEG
56123: PUSH
56124: LD_INT 2
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 3
56134: NEG
56135: PUSH
56136: LD_INT 3
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56162: LD_ADDR_VAR 0 14
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: LD_INT 1
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: LD_INT 2
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: LD_INT 2
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: LD_INT 2
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: LD_INT 2
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: LD_INT 3
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: LD_INT 3
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 2
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56358: LD_ADDR_VAR 0 15
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 2
56481: NEG
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 2
56492: NEG
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 2
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 3
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 3
56525: PUSH
56526: LD_INT 1
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56551: LD_ADDR_VAR 0 16
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: LD_INT 1
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: LD_INT 2
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 2
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 2
56674: NEG
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 2
56686: NEG
56687: PUSH
56688: LD_INT 2
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 3
56698: PUSH
56699: LD_INT 2
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 3
56708: PUSH
56709: LD_INT 3
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 2
56718: PUSH
56719: LD_INT 3
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56744: LD_ADDR_VAR 0 17
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: LD_INT 1
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: LD_INT 1
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 1
56813: NEG
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: LD_INT 2
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: LD_INT 2
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 2
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 2
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 2
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: LD_INT 2
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: LD_INT 2
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 1
56909: NEG
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 2
56931: NEG
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 2
56943: NEG
56944: PUSH
56945: LD_INT 2
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56974: LD_ADDR_VAR 0 18
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: LD_INT 1
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: LD_INT 1
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: LD_INT 2
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 2
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 2
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 2
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: LD_INT 2
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: LD_INT 2
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 2
57150: NEG
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 2
57161: NEG
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 2
57173: NEG
57174: PUSH
57175: LD_INT 2
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57204: LD_ADDR_VAR 0 19
57208: PUSH
57209: LD_INT 0
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: LD_INT 1
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: LD_INT 2
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 1
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 2
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 2
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: LD_INT 2
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 2
57391: NEG
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 2
57403: NEG
57404: PUSH
57405: LD_INT 2
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57434: LD_ADDR_VAR 0 20
57438: PUSH
57439: LD_INT 0
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 1
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 0
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 0
57527: PUSH
57528: LD_INT 2
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 2
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 2
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: LD_INT 2
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: LD_INT 2
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 2
57621: NEG
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 2
57633: NEG
57634: PUSH
57635: LD_INT 2
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57664: LD_ADDR_VAR 0 21
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: NEG
57734: PUSH
57735: LD_INT 1
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: NEG
57746: PUSH
57747: LD_INT 2
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: LD_INT 2
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: LD_INT 1
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: LD_INT 1
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 2
57799: PUSH
57800: LD_INT 2
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: LD_INT 2
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: LD_INT 2
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 2
57840: NEG
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 2
57851: NEG
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: NEG
57864: PUSH
57865: LD_INT 2
57867: NEG
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57894: LD_ADDR_VAR 0 22
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: LD_INT 1
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: LD_INT 2
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: LD_INT 2
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 2
58029: PUSH
58030: LD_INT 2
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: LD_INT 2
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: LD_INT 2
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: LD_INT 1
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 2
58081: NEG
58082: PUSH
58083: LD_INT 1
58085: NEG
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 2
58093: NEG
58094: PUSH
58095: LD_INT 2
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58124: LD_ADDR_VAR 0 23
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: LD_INT 0
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 0
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: LD_INT 0
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: LD_INT 1
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: LD_INT 1
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 1
58193: NEG
58194: PUSH
58195: LD_INT 1
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: LD_INT 2
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: LD_INT 1
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 2
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: LD_INT 2
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: LD_INT 2
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: LD_INT 2
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: NEG
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 2
58300: NEG
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 2
58311: NEG
58312: PUSH
58313: LD_INT 1
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 2
58323: NEG
58324: PUSH
58325: LD_INT 2
58327: NEG
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 2
58335: NEG
58336: PUSH
58337: LD_INT 3
58339: NEG
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: LD_INT 3
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: LD_INT 2
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 2
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58404: LD_ADDR_VAR 0 24
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: LD_INT 1
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: LD_INT 1
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: LD_INT 1
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 1
58462: NEG
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: LD_INT 1
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: LD_INT 2
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: LD_INT 2
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 2
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 2
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 2
58539: PUSH
58540: LD_INT 2
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: PUSH
58550: LD_INT 2
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: LD_INT 2
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 2
58580: NEG
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 2
58591: NEG
58592: PUSH
58593: LD_INT 1
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 2
58603: NEG
58604: PUSH
58605: LD_INT 2
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: LD_INT 2
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 2
58626: PUSH
58627: LD_INT 1
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 3
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 3
58647: PUSH
58648: LD_INT 2
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58680: LD_ADDR_VAR 0 25
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: PUSH
58740: LD_INT 0
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 1
58749: NEG
58750: PUSH
58751: LD_INT 1
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: LD_INT 2
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: LD_INT 2
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 2
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 2
58805: PUSH
58806: LD_INT 1
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 2
58815: PUSH
58816: LD_INT 2
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: LD_INT 2
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: NEG
58846: PUSH
58847: LD_INT 1
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 2
58856: NEG
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 2
58867: NEG
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 2
58879: NEG
58880: PUSH
58881: LD_INT 2
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 3
58891: PUSH
58892: LD_INT 1
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 3
58901: PUSH
58902: LD_INT 2
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: PUSH
58912: LD_INT 3
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: LD_INT 3
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58954: LD_ADDR_VAR 0 26
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: LD_INT 1
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: NEG
59036: PUSH
59037: LD_INT 2
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: LD_INT 2
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 2
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 2
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 2
59089: PUSH
59090: LD_INT 2
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: LD_INT 2
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: LD_INT 2
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 2
59130: NEG
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 2
59141: NEG
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 2
59153: NEG
59154: PUSH
59155: LD_INT 2
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 2
59165: PUSH
59166: LD_INT 3
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: LD_INT 3
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: LD_INT 2
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 2
59196: NEG
59197: PUSH
59198: LD_INT 1
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59230: LD_ADDR_VAR 0 27
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 1
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: LD_INT 1
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 1
59311: NEG
59312: PUSH
59313: LD_INT 2
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: LD_INT 2
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 2
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 2
59365: PUSH
59366: LD_INT 2
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: PUSH
59376: LD_INT 2
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: LD_INT 2
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 1
59395: NEG
59396: PUSH
59397: LD_INT 1
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 2
59406: NEG
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 2
59417: NEG
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 2
59429: NEG
59430: PUSH
59431: LD_INT 2
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 2
59452: NEG
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 3
59463: NEG
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 3
59475: NEG
59476: PUSH
59477: LD_INT 2
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59510: LD_ADDR_VAR 0 28
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: LD_INT 1
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: LD_INT 1
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 1
59591: NEG
59592: PUSH
59593: LD_INT 2
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: LD_INT 2
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 2
59645: PUSH
59646: LD_INT 2
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 1
59655: PUSH
59656: LD_INT 2
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: LD_INT 2
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 2
59686: NEG
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 2
59697: NEG
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 2
59709: NEG
59710: PUSH
59711: LD_INT 2
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 2
59721: NEG
59722: PUSH
59723: LD_INT 3
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 1
59733: NEG
59734: PUSH
59735: LD_INT 3
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 3
59745: NEG
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 3
59757: NEG
59758: PUSH
59759: LD_INT 2
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59792: LD_ADDR_VAR 0 29
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: LD_INT 1
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: PUSH
59821: LD_INT 0
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 1
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 0
59840: PUSH
59841: LD_INT 1
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 1
59861: NEG
59862: PUSH
59863: LD_INT 1
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: NEG
59874: PUSH
59875: LD_INT 2
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 0
59885: PUSH
59886: LD_INT 2
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: LD_INT 1
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: LD_INT 0
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 2
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: PUSH
59928: LD_INT 2
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 1
59947: NEG
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 2
59970: NEG
59971: PUSH
59972: LD_INT 2
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 2
59982: NEG
59983: PUSH
59984: LD_INT 3
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 2
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 3
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 1
60015: PUSH
60016: LD_INT 3
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: PUSH
60027: LD_INT 2
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 3
60036: NEG
60037: PUSH
60038: LD_INT 2
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60071: LD_ADDR_VAR 0 30
60075: PUSH
60076: LD_INT 0
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 0
60088: PUSH
60089: LD_INT 1
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 1
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 1
60109: PUSH
60110: LD_INT 1
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 0
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 1
60129: NEG
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 1
60140: NEG
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: NEG
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: LD_INT 2
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 1
60175: PUSH
60176: LD_INT 1
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 2
60186: PUSH
60187: LD_INT 0
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 2
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 2
60206: PUSH
60207: LD_INT 2
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 1
60216: PUSH
60217: LD_INT 2
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 1
60226: NEG
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 2
60237: NEG
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 2
60248: NEG
60249: PUSH
60250: LD_INT 1
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 1
60260: NEG
60261: PUSH
60262: LD_INT 3
60264: NEG
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: LD_INT 2
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 3
60283: PUSH
60284: LD_INT 2
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 2
60293: PUSH
60294: LD_INT 3
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 2
60303: NEG
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 3
60314: NEG
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60349: LD_ADDR_VAR 0 31
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 0
60366: PUSH
60367: LD_INT 1
60369: NEG
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 1
60377: PUSH
60378: LD_INT 0
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 1
60387: PUSH
60388: LD_INT 1
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 1
60407: NEG
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 1
60418: NEG
60419: PUSH
60420: LD_INT 1
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 1
60430: NEG
60431: PUSH
60432: LD_INT 2
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: LD_INT 1
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 2
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 2
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 2
60473: PUSH
60474: LD_INT 2
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 1
60483: PUSH
60484: LD_INT 2
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: LD_INT 2
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: PUSH
60505: LD_INT 1
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 2
60514: NEG
60515: PUSH
60516: LD_INT 1
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 2
60526: NEG
60527: PUSH
60528: LD_INT 2
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 2
60538: NEG
60539: PUSH
60540: LD_INT 3
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 2
60550: PUSH
60551: LD_INT 1
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 3
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: LD_INT 3
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: LD_INT 2
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 3
60592: NEG
60593: PUSH
60594: LD_INT 2
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60627: LD_ADDR_VAR 0 32
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 1
60655: PUSH
60656: LD_INT 0
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 1
60665: PUSH
60666: LD_INT 1
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 1
60696: NEG
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 1
60708: NEG
60709: PUSH
60710: LD_INT 2
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: LD_INT 2
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: LD_INT 1
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 2
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: LD_INT 2
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 1
60762: PUSH
60763: LD_INT 2
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: LD_INT 2
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: LD_INT 1
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 2
60793: NEG
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 2
60804: NEG
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 1
60816: NEG
60817: PUSH
60818: LD_INT 3
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: LD_INT 2
60831: NEG
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 3
60839: PUSH
60840: LD_INT 2
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 2
60849: PUSH
60850: LD_INT 3
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 2
60859: NEG
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 3
60870: NEG
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60905: LD_ADDR_VAR 0 33
60909: PUSH
60910: LD_INT 0
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: LD_INT 1
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: LD_INT 0
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 1
60943: PUSH
60944: LD_INT 1
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: LD_INT 1
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 1
60963: NEG
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: LD_INT 1
60978: NEG
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 1
60986: NEG
60987: PUSH
60988: LD_INT 2
60990: NEG
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 1
60998: PUSH
60999: LD_INT 1
61001: NEG
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 2
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 2
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 1
61029: PUSH
61030: LD_INT 2
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: LD_INT 2
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: NEG
61050: PUSH
61051: LD_INT 1
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 2
61060: NEG
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 2
61071: NEG
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 2
61083: NEG
61084: PUSH
61085: LD_INT 2
61087: NEG
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 2
61095: NEG
61096: PUSH
61097: LD_INT 3
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 2
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 3
61118: PUSH
61119: LD_INT 1
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: LD_INT 3
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 1
61138: NEG
61139: PUSH
61140: LD_INT 2
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 3
61149: NEG
61150: PUSH
61151: LD_INT 2
61153: NEG
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61184: LD_ADDR_VAR 0 34
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 0
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: PUSH
61213: LD_INT 0
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 1
61222: PUSH
61223: LD_INT 1
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: LD_INT 1
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: LD_INT 0
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 1
61253: NEG
61254: PUSH
61255: LD_INT 1
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: NEG
61266: PUSH
61267: LD_INT 2
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: LD_INT 2
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 1
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 2
61299: PUSH
61300: LD_INT 1
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 2
61309: PUSH
61310: LD_INT 2
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: LD_INT 2
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 2
61340: NEG
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 2
61351: NEG
61352: PUSH
61353: LD_INT 1
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 2
61363: NEG
61364: PUSH
61365: LD_INT 2
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 1
61375: NEG
61376: PUSH
61377: LD_INT 3
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 1
61387: PUSH
61388: LD_INT 2
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 3
61398: PUSH
61399: LD_INT 2
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 2
61408: PUSH
61409: LD_INT 3
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 2
61418: NEG
61419: PUSH
61420: LD_INT 1
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 3
61429: NEG
61430: PUSH
61431: LD_INT 1
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61464: LD_ADDR_VAR 0 35
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: LD_INT 0
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 0
61481: PUSH
61482: LD_INT 1
61484: NEG
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: PUSH
61503: LD_INT 1
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 1
61533: NEG
61534: PUSH
61535: LD_INT 1
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 2
61545: PUSH
61546: LD_INT 1
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 2
61555: NEG
61556: PUSH
61557: LD_INT 1
61559: NEG
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61576: LD_ADDR_VAR 0 36
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 1
61614: PUSH
61615: LD_INT 1
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 0
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: NEG
61635: PUSH
61636: LD_INT 0
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 1
61657: NEG
61658: PUSH
61659: LD_INT 2
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: LD_INT 2
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61688: LD_ADDR_VAR 0 37
61692: PUSH
61693: LD_INT 0
61695: PUSH
61696: LD_INT 0
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 0
61705: PUSH
61706: LD_INT 1
61708: NEG
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: LD_INT 0
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: LD_INT 1
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: LD_INT 1
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 1
61757: NEG
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61800: LD_ADDR_VAR 0 38
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 0
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: LD_INT 1
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 0
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 1
61869: NEG
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 2
61881: PUSH
61882: LD_INT 1
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 2
61891: NEG
61892: PUSH
61893: LD_INT 1
61895: NEG
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61912: LD_ADDR_VAR 0 39
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: LD_INT 1
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: LD_INT 1
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 0
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: NEG
61982: PUSH
61983: LD_INT 1
61985: NEG
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 1
61993: NEG
61994: PUSH
61995: LD_INT 2
61997: NEG
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 1
62005: PUSH
62006: LD_INT 2
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62024: LD_ADDR_VAR 0 40
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: LD_INT 1
62044: NEG
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 1
62052: PUSH
62053: LD_INT 0
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 1
62062: PUSH
62063: LD_INT 1
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 0
62072: PUSH
62073: LD_INT 1
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 1
62082: NEG
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 1
62093: NEG
62094: PUSH
62095: LD_INT 1
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 1
62105: PUSH
62106: LD_INT 1
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 1
62116: NEG
62117: PUSH
62118: LD_INT 1
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62136: LD_ADDR_VAR 0 41
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: LD_INT 0
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: LD_INT 1
62156: NEG
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 1
62164: PUSH
62165: LD_INT 0
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 1
62174: PUSH
62175: LD_INT 1
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: LD_INT 1
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 1
62194: NEG
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 1
62205: NEG
62206: PUSH
62207: LD_INT 1
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: LD_INT 2
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 2
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 2
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 2
62260: PUSH
62261: LD_INT 2
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: LD_INT 2
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 1
62280: NEG
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 2
62291: NEG
62292: PUSH
62293: LD_INT 0
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 2
62302: NEG
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 2
62314: NEG
62315: PUSH
62316: LD_INT 2
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 2
62326: NEG
62327: PUSH
62328: LD_INT 3
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 2
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 3
62349: PUSH
62350: LD_INT 0
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 3
62359: PUSH
62360: LD_INT 1
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 3
62369: PUSH
62370: LD_INT 2
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 3
62379: PUSH
62380: LD_INT 3
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 2
62389: PUSH
62390: LD_INT 3
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 2
62399: NEG
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 3
62410: NEG
62411: PUSH
62412: LD_INT 0
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 3
62421: NEG
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 3
62433: NEG
62434: PUSH
62435: LD_INT 2
62437: NEG
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 3
62445: NEG
62446: PUSH
62447: LD_INT 3
62449: NEG
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62486: LD_ADDR_VAR 0 42
62490: PUSH
62491: LD_INT 0
62493: PUSH
62494: LD_INT 0
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 0
62503: PUSH
62504: LD_INT 1
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 1
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 0
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 1
62555: NEG
62556: PUSH
62557: LD_INT 1
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 1
62567: NEG
62568: PUSH
62569: LD_INT 2
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: LD_INT 2
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 1
62590: PUSH
62591: LD_INT 1
62593: NEG
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 2
62601: PUSH
62602: LD_INT 1
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 2
62611: PUSH
62612: LD_INT 2
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 1
62621: PUSH
62622: LD_INT 2
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: LD_INT 2
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 1
62641: NEG
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 2
62652: NEG
62653: PUSH
62654: LD_INT 1
62656: NEG
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 2
62664: NEG
62665: PUSH
62666: LD_INT 2
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 2
62676: NEG
62677: PUSH
62678: LD_INT 3
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 1
62688: NEG
62689: PUSH
62690: LD_INT 3
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: LD_INT 3
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 1
62711: PUSH
62712: LD_INT 2
62714: NEG
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 3
62722: PUSH
62723: LD_INT 2
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 3
62732: PUSH
62733: LD_INT 3
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 2
62742: PUSH
62743: LD_INT 3
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 1
62752: PUSH
62753: LD_INT 3
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 0
62762: PUSH
62763: LD_INT 3
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 1
62772: NEG
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 3
62783: NEG
62784: PUSH
62785: LD_INT 2
62787: NEG
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 3
62795: NEG
62796: PUSH
62797: LD_INT 3
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62836: LD_ADDR_VAR 0 43
62840: PUSH
62841: LD_INT 0
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 0
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: LD_INT 0
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 1
62874: PUSH
62875: LD_INT 1
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 0
62884: PUSH
62885: LD_INT 1
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 1
62894: NEG
62895: PUSH
62896: LD_INT 0
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 1
62905: NEG
62906: PUSH
62907: LD_INT 1
62909: NEG
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 1
62917: NEG
62918: PUSH
62919: LD_INT 2
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 0
62929: PUSH
62930: LD_INT 2
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 1
62940: PUSH
62941: LD_INT 1
62943: NEG
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 2
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 2
62961: PUSH
62962: LD_INT 1
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: LD_INT 2
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: LD_INT 2
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 1
62991: NEG
62992: PUSH
62993: LD_INT 1
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 2
63002: NEG
63003: PUSH
63004: LD_INT 0
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 2
63013: NEG
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 1
63025: NEG
63026: PUSH
63027: LD_INT 3
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 0
63037: PUSH
63038: LD_INT 3
63040: NEG
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 1
63048: PUSH
63049: LD_INT 2
63051: NEG
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 2
63059: PUSH
63060: LD_INT 1
63062: NEG
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 3
63070: PUSH
63071: LD_INT 0
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 3
63080: PUSH
63081: LD_INT 1
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 1
63090: PUSH
63091: LD_INT 3
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 0
63100: PUSH
63101: LD_INT 3
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 1
63110: NEG
63111: PUSH
63112: LD_INT 2
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 2
63121: NEG
63122: PUSH
63123: LD_INT 1
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 3
63132: NEG
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 3
63143: NEG
63144: PUSH
63145: LD_INT 1
63147: NEG
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63184: LD_ADDR_VAR 0 44
63188: PUSH
63189: LD_INT 0
63191: PUSH
63192: LD_INT 0
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: LD_INT 1
63204: NEG
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 1
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 1
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: LD_INT 1
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: LD_INT 0
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 1
63253: NEG
63254: PUSH
63255: LD_INT 1
63257: NEG
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 1
63265: NEG
63266: PUSH
63267: LD_INT 2
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 1
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 2
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 2
63298: PUSH
63299: LD_INT 1
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 2
63308: PUSH
63309: LD_INT 2
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: LD_INT 2
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 1
63328: NEG
63329: PUSH
63330: LD_INT 1
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 2
63339: NEG
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 2
63350: NEG
63351: PUSH
63352: LD_INT 1
63354: NEG
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 2
63362: NEG
63363: PUSH
63364: LD_INT 2
63366: NEG
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 2
63374: NEG
63375: PUSH
63376: LD_INT 3
63378: NEG
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 2
63386: PUSH
63387: LD_INT 1
63389: NEG
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 3
63397: PUSH
63398: LD_INT 0
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 3
63407: PUSH
63408: LD_INT 1
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 3
63417: PUSH
63418: LD_INT 2
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 3
63427: PUSH
63428: LD_INT 3
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 2
63437: PUSH
63438: LD_INT 3
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 2
63447: NEG
63448: PUSH
63449: LD_INT 1
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 3
63458: NEG
63459: PUSH
63460: LD_INT 0
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 3
63469: NEG
63470: PUSH
63471: LD_INT 1
63473: NEG
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 3
63481: NEG
63482: PUSH
63483: LD_INT 2
63485: NEG
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 3
63493: NEG
63494: PUSH
63495: LD_INT 3
63497: NEG
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63534: LD_ADDR_VAR 0 45
63538: PUSH
63539: LD_INT 0
63541: PUSH
63542: LD_INT 0
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: LD_INT 1
63554: NEG
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: LD_INT 0
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 1
63572: PUSH
63573: LD_INT 1
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 0
63582: PUSH
63583: LD_INT 1
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 1
63592: NEG
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 1
63603: NEG
63604: PUSH
63605: LD_INT 1
63607: NEG
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 1
63615: NEG
63616: PUSH
63617: LD_INT 2
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 0
63627: PUSH
63628: LD_INT 2
63630: NEG
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 1
63638: PUSH
63639: LD_INT 1
63641: NEG
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 2
63649: PUSH
63650: LD_INT 1
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 2
63659: PUSH
63660: LD_INT 2
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 1
63669: PUSH
63670: LD_INT 2
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 0
63679: PUSH
63680: LD_INT 2
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 1
63689: NEG
63690: PUSH
63691: LD_INT 1
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 2
63700: NEG
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 2
63712: NEG
63713: PUSH
63714: LD_INT 2
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 2
63724: NEG
63725: PUSH
63726: LD_INT 3
63728: NEG
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 1
63736: NEG
63737: PUSH
63738: LD_INT 3
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 0
63748: PUSH
63749: LD_INT 3
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: LD_INT 2
63762: NEG
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 3
63770: PUSH
63771: LD_INT 2
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 3
63780: PUSH
63781: LD_INT 3
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 2
63790: PUSH
63791: LD_INT 3
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 1
63800: PUSH
63801: LD_INT 3
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: LD_INT 3
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 1
63820: NEG
63821: PUSH
63822: LD_INT 2
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 3
63831: NEG
63832: PUSH
63833: LD_INT 2
63835: NEG
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 3
63843: NEG
63844: PUSH
63845: LD_INT 3
63847: NEG
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63884: LD_ADDR_VAR 0 46
63888: PUSH
63889: LD_INT 0
63891: PUSH
63892: LD_INT 0
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 0
63901: PUSH
63902: LD_INT 1
63904: NEG
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 1
63912: PUSH
63913: LD_INT 0
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 1
63922: PUSH
63923: LD_INT 1
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 0
63932: PUSH
63933: LD_INT 1
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 1
63953: NEG
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 1
63965: NEG
63966: PUSH
63967: LD_INT 2
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 0
63977: PUSH
63978: LD_INT 2
63980: NEG
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 1
63988: PUSH
63989: LD_INT 1
63991: NEG
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 2
63999: PUSH
64000: LD_INT 0
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 2
64009: PUSH
64010: LD_INT 1
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 1
64019: PUSH
64020: LD_INT 2
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: LD_INT 2
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 1
64039: NEG
64040: PUSH
64041: LD_INT 1
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 2
64050: NEG
64051: PUSH
64052: LD_INT 0
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 2
64061: NEG
64062: PUSH
64063: LD_INT 1
64065: NEG
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 1
64073: NEG
64074: PUSH
64075: LD_INT 3
64077: NEG
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 0
64085: PUSH
64086: LD_INT 3
64088: NEG
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 1
64096: PUSH
64097: LD_INT 2
64099: NEG
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 2
64107: PUSH
64108: LD_INT 1
64110: NEG
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 3
64118: PUSH
64119: LD_INT 0
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 3
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: PUSH
64139: LD_INT 3
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 0
64148: PUSH
64149: LD_INT 3
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 1
64158: NEG
64159: PUSH
64160: LD_INT 2
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 2
64169: NEG
64170: PUSH
64171: LD_INT 1
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 3
64180: NEG
64181: PUSH
64182: LD_INT 0
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 3
64191: NEG
64192: PUSH
64193: LD_INT 1
64195: NEG
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64232: LD_ADDR_VAR 0 47
64236: PUSH
64237: LD_INT 0
64239: PUSH
64240: LD_INT 0
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 1
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 1
64260: PUSH
64261: LD_INT 0
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: PUSH
64271: LD_INT 1
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 0
64280: PUSH
64281: LD_INT 1
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 1
64290: NEG
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 1
64301: NEG
64302: PUSH
64303: LD_INT 1
64305: NEG
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 1
64313: NEG
64314: PUSH
64315: LD_INT 2
64317: NEG
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 0
64325: PUSH
64326: LD_INT 2
64328: NEG
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 1
64336: PUSH
64337: LD_INT 1
64339: NEG
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 2
64347: NEG
64348: PUSH
64349: LD_INT 1
64351: NEG
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 2
64359: NEG
64360: PUSH
64361: LD_INT 2
64363: NEG
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64383: LD_ADDR_VAR 0 48
64387: PUSH
64388: LD_INT 0
64390: PUSH
64391: LD_INT 0
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 0
64400: PUSH
64401: LD_INT 1
64403: NEG
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 1
64411: PUSH
64412: LD_INT 0
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 1
64421: PUSH
64422: LD_INT 1
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 0
64431: PUSH
64432: LD_INT 1
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 1
64441: NEG
64442: PUSH
64443: LD_INT 0
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 1
64452: NEG
64453: PUSH
64454: LD_INT 1
64456: NEG
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 1
64464: NEG
64465: PUSH
64466: LD_INT 2
64468: NEG
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 0
64476: PUSH
64477: LD_INT 2
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 1
64487: PUSH
64488: LD_INT 1
64490: NEG
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 2
64498: PUSH
64499: LD_INT 0
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 2
64508: PUSH
64509: LD_INT 1
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64530: LD_ADDR_VAR 0 49
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: LD_INT 0
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 0
64547: PUSH
64548: LD_INT 1
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 1
64558: PUSH
64559: LD_INT 0
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 1
64568: PUSH
64569: LD_INT 1
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 0
64578: PUSH
64579: LD_INT 1
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 1
64588: NEG
64589: PUSH
64590: LD_INT 0
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 1
64599: NEG
64600: PUSH
64601: LD_INT 1
64603: NEG
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 1
64611: PUSH
64612: LD_INT 1
64614: NEG
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 2
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 2
64632: PUSH
64633: LD_INT 1
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 2
64642: PUSH
64643: LD_INT 2
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 1
64652: PUSH
64653: LD_INT 2
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64674: LD_ADDR_VAR 0 50
64678: PUSH
64679: LD_INT 0
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 0
64691: PUSH
64692: LD_INT 1
64694: NEG
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 1
64702: PUSH
64703: LD_INT 0
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 1
64712: PUSH
64713: LD_INT 1
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 0
64722: PUSH
64723: LD_INT 1
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 1
64732: NEG
64733: PUSH
64734: LD_INT 0
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 1
64743: NEG
64744: PUSH
64745: LD_INT 1
64747: NEG
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 2
64755: PUSH
64756: LD_INT 1
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 2
64765: PUSH
64766: LD_INT 2
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 1
64775: PUSH
64776: LD_INT 2
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 0
64785: PUSH
64786: LD_INT 2
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 1
64795: NEG
64796: PUSH
64797: LD_INT 1
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64818: LD_ADDR_VAR 0 51
64822: PUSH
64823: LD_INT 0
64825: PUSH
64826: LD_INT 0
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 0
64835: PUSH
64836: LD_INT 1
64838: NEG
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 1
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 1
64856: PUSH
64857: LD_INT 1
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 0
64866: PUSH
64867: LD_INT 1
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 1
64876: NEG
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 1
64887: NEG
64888: PUSH
64889: LD_INT 1
64891: NEG
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 1
64899: PUSH
64900: LD_INT 2
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 0
64909: PUSH
64910: LD_INT 2
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 1
64919: NEG
64920: PUSH
64921: LD_INT 1
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 2
64930: NEG
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 2
64941: NEG
64942: PUSH
64943: LD_INT 1
64945: NEG
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64965: LD_ADDR_VAR 0 52
64969: PUSH
64970: LD_INT 0
64972: PUSH
64973: LD_INT 0
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 0
64982: PUSH
64983: LD_INT 1
64985: NEG
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 1
64993: PUSH
64994: LD_INT 0
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 1
65003: PUSH
65004: LD_INT 1
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 0
65013: PUSH
65014: LD_INT 1
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 1
65023: NEG
65024: PUSH
65025: LD_INT 0
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 1
65034: NEG
65035: PUSH
65036: LD_INT 1
65038: NEG
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 1
65046: NEG
65047: PUSH
65048: LD_INT 2
65050: NEG
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 1
65058: NEG
65059: PUSH
65060: LD_INT 1
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 2
65069: NEG
65070: PUSH
65071: LD_INT 0
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 2
65080: NEG
65081: PUSH
65082: LD_INT 1
65084: NEG
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 2
65092: NEG
65093: PUSH
65094: LD_INT 2
65096: NEG
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65116: LD_ADDR_VAR 0 53
65120: PUSH
65121: LD_INT 0
65123: PUSH
65124: LD_INT 0
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 0
65133: PUSH
65134: LD_INT 1
65136: NEG
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 1
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 1
65154: PUSH
65155: LD_INT 1
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: LD_INT 1
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 1
65174: NEG
65175: PUSH
65176: LD_INT 0
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 1
65185: NEG
65186: PUSH
65187: LD_INT 1
65189: NEG
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 1
65197: NEG
65198: PUSH
65199: LD_INT 2
65201: NEG
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 0
65209: PUSH
65210: LD_INT 2
65212: NEG
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 1
65220: PUSH
65221: LD_INT 1
65223: NEG
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 2
65231: PUSH
65232: LD_INT 0
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 2
65241: PUSH
65242: LD_INT 1
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 2
65251: PUSH
65252: LD_INT 2
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 1
65261: PUSH
65262: LD_INT 2
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 0
65271: PUSH
65272: LD_INT 2
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 1
65281: NEG
65282: PUSH
65283: LD_INT 1
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 2
65292: NEG
65293: PUSH
65294: LD_INT 0
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 2
65303: NEG
65304: PUSH
65305: LD_INT 1
65307: NEG
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 2
65315: NEG
65316: PUSH
65317: LD_INT 2
65319: NEG
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65346: LD_ADDR_VAR 0 54
65350: PUSH
65351: LD_INT 0
65353: PUSH
65354: LD_INT 0
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 0
65363: PUSH
65364: LD_INT 1
65366: NEG
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 1
65374: PUSH
65375: LD_INT 0
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 1
65384: PUSH
65385: LD_INT 1
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: LD_INT 1
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 1
65404: NEG
65405: PUSH
65406: LD_INT 0
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 1
65415: NEG
65416: PUSH
65417: LD_INT 1
65419: NEG
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 1
65427: NEG
65428: PUSH
65429: LD_INT 2
65431: NEG
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 0
65439: PUSH
65440: LD_INT 2
65442: NEG
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 1
65450: PUSH
65451: LD_INT 1
65453: NEG
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 2
65461: PUSH
65462: LD_INT 0
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 2
65471: PUSH
65472: LD_INT 1
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 2
65481: PUSH
65482: LD_INT 2
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 1
65491: PUSH
65492: LD_INT 2
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 0
65501: PUSH
65502: LD_INT 2
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 1
65511: NEG
65512: PUSH
65513: LD_INT 1
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 2
65522: NEG
65523: PUSH
65524: LD_INT 0
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 2
65533: NEG
65534: PUSH
65535: LD_INT 1
65537: NEG
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 2
65545: NEG
65546: PUSH
65547: LD_INT 2
65549: NEG
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65576: LD_ADDR_VAR 0 55
65580: PUSH
65581: LD_INT 0
65583: PUSH
65584: LD_INT 0
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 0
65593: PUSH
65594: LD_INT 1
65596: NEG
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 1
65604: PUSH
65605: LD_INT 0
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 1
65614: PUSH
65615: LD_INT 1
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 0
65624: PUSH
65625: LD_INT 1
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 1
65634: NEG
65635: PUSH
65636: LD_INT 0
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 1
65645: NEG
65646: PUSH
65647: LD_INT 1
65649: NEG
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 1
65657: NEG
65658: PUSH
65659: LD_INT 2
65661: NEG
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 0
65669: PUSH
65670: LD_INT 2
65672: NEG
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 1
65680: PUSH
65681: LD_INT 1
65683: NEG
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 2
65691: PUSH
65692: LD_INT 0
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 2
65701: PUSH
65702: LD_INT 1
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 2
65711: PUSH
65712: LD_INT 2
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 1
65721: PUSH
65722: LD_INT 2
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 0
65731: PUSH
65732: LD_INT 2
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 1
65741: NEG
65742: PUSH
65743: LD_INT 1
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 2
65752: NEG
65753: PUSH
65754: LD_INT 0
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 2
65763: NEG
65764: PUSH
65765: LD_INT 1
65767: NEG
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 2
65775: NEG
65776: PUSH
65777: LD_INT 2
65779: NEG
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65806: LD_ADDR_VAR 0 56
65810: PUSH
65811: LD_INT 0
65813: PUSH
65814: LD_INT 0
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 0
65823: PUSH
65824: LD_INT 1
65826: NEG
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 1
65834: PUSH
65835: LD_INT 0
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 1
65844: PUSH
65845: LD_INT 1
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 0
65854: PUSH
65855: LD_INT 1
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 1
65864: NEG
65865: PUSH
65866: LD_INT 0
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 1
65875: NEG
65876: PUSH
65877: LD_INT 1
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 1
65887: NEG
65888: PUSH
65889: LD_INT 2
65891: NEG
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 0
65899: PUSH
65900: LD_INT 2
65902: NEG
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 1
65910: PUSH
65911: LD_INT 1
65913: NEG
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 2
65921: PUSH
65922: LD_INT 0
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 2
65931: PUSH
65932: LD_INT 1
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 2
65941: PUSH
65942: LD_INT 2
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 1
65951: PUSH
65952: LD_INT 2
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 0
65961: PUSH
65962: LD_INT 2
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 1
65971: NEG
65972: PUSH
65973: LD_INT 1
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 2
65982: NEG
65983: PUSH
65984: LD_INT 0
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 2
65993: NEG
65994: PUSH
65995: LD_INT 1
65997: NEG
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 2
66005: NEG
66006: PUSH
66007: LD_INT 2
66009: NEG
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66036: LD_ADDR_VAR 0 57
66040: PUSH
66041: LD_INT 0
66043: PUSH
66044: LD_INT 0
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 0
66053: PUSH
66054: LD_INT 1
66056: NEG
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 1
66064: PUSH
66065: LD_INT 0
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 1
66074: PUSH
66075: LD_INT 1
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 0
66084: PUSH
66085: LD_INT 1
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 1
66094: NEG
66095: PUSH
66096: LD_INT 0
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 1
66105: NEG
66106: PUSH
66107: LD_INT 1
66109: NEG
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 1
66117: NEG
66118: PUSH
66119: LD_INT 2
66121: NEG
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 0
66129: PUSH
66130: LD_INT 2
66132: NEG
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 1
66140: PUSH
66141: LD_INT 1
66143: NEG
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 2
66151: PUSH
66152: LD_INT 0
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 2
66161: PUSH
66162: LD_INT 1
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 2
66171: PUSH
66172: LD_INT 2
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 1
66181: PUSH
66182: LD_INT 2
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 0
66191: PUSH
66192: LD_INT 2
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 1
66201: NEG
66202: PUSH
66203: LD_INT 1
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 2
66212: NEG
66213: PUSH
66214: LD_INT 0
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 2
66223: NEG
66224: PUSH
66225: LD_INT 1
66227: NEG
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 2
66235: NEG
66236: PUSH
66237: LD_INT 2
66239: NEG
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66266: LD_ADDR_VAR 0 58
66270: PUSH
66271: LD_INT 0
66273: PUSH
66274: LD_INT 0
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 0
66283: PUSH
66284: LD_INT 1
66286: NEG
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 1
66294: PUSH
66295: LD_INT 0
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 1
66304: PUSH
66305: LD_INT 1
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 0
66314: PUSH
66315: LD_INT 1
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 1
66324: NEG
66325: PUSH
66326: LD_INT 0
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 1
66335: NEG
66336: PUSH
66337: LD_INT 1
66339: NEG
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 1
66347: NEG
66348: PUSH
66349: LD_INT 2
66351: NEG
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: LD_INT 2
66362: NEG
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 1
66370: PUSH
66371: LD_INT 1
66373: NEG
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 2
66381: PUSH
66382: LD_INT 0
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 2
66391: PUSH
66392: LD_INT 1
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 2
66401: PUSH
66402: LD_INT 2
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 1
66411: PUSH
66412: LD_INT 2
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 0
66421: PUSH
66422: LD_INT 2
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 1
66431: NEG
66432: PUSH
66433: LD_INT 1
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 2
66442: NEG
66443: PUSH
66444: LD_INT 0
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 2
66453: NEG
66454: PUSH
66455: LD_INT 1
66457: NEG
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 2
66465: NEG
66466: PUSH
66467: LD_INT 2
66469: NEG
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66496: LD_ADDR_VAR 0 59
66500: PUSH
66501: LD_INT 0
66503: PUSH
66504: LD_INT 0
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 0
66513: PUSH
66514: LD_INT 1
66516: NEG
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 1
66524: PUSH
66525: LD_INT 0
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 1
66534: PUSH
66535: LD_INT 1
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 0
66544: PUSH
66545: LD_INT 1
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 1
66554: NEG
66555: PUSH
66556: LD_INT 0
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 1
66565: NEG
66566: PUSH
66567: LD_INT 1
66569: NEG
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66584: LD_ADDR_VAR 0 60
66588: PUSH
66589: LD_INT 0
66591: PUSH
66592: LD_INT 0
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 0
66601: PUSH
66602: LD_INT 1
66604: NEG
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 1
66612: PUSH
66613: LD_INT 0
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 1
66622: PUSH
66623: LD_INT 1
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 0
66632: PUSH
66633: LD_INT 1
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 1
66642: NEG
66643: PUSH
66644: LD_INT 0
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 1
66653: NEG
66654: PUSH
66655: LD_INT 1
66657: NEG
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66672: LD_ADDR_VAR 0 61
66676: PUSH
66677: LD_INT 0
66679: PUSH
66680: LD_INT 0
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: LD_INT 1
66692: NEG
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 1
66700: PUSH
66701: LD_INT 0
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 1
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 0
66720: PUSH
66721: LD_INT 1
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 1
66730: NEG
66731: PUSH
66732: LD_INT 0
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 1
66741: NEG
66742: PUSH
66743: LD_INT 1
66745: NEG
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66760: LD_ADDR_VAR 0 62
66764: PUSH
66765: LD_INT 0
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 0
66777: PUSH
66778: LD_INT 1
66780: NEG
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 1
66788: PUSH
66789: LD_INT 0
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 1
66798: PUSH
66799: LD_INT 1
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 0
66808: PUSH
66809: LD_INT 1
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 1
66818: NEG
66819: PUSH
66820: LD_INT 0
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 1
66829: NEG
66830: PUSH
66831: LD_INT 1
66833: NEG
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66848: LD_ADDR_VAR 0 63
66852: PUSH
66853: LD_INT 0
66855: PUSH
66856: LD_INT 0
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 0
66865: PUSH
66866: LD_INT 1
66868: NEG
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 1
66876: PUSH
66877: LD_INT 0
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 1
66886: PUSH
66887: LD_INT 1
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 0
66896: PUSH
66897: LD_INT 1
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 1
66906: NEG
66907: PUSH
66908: LD_INT 0
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 1
66917: NEG
66918: PUSH
66919: LD_INT 1
66921: NEG
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66936: LD_ADDR_VAR 0 64
66940: PUSH
66941: LD_INT 0
66943: PUSH
66944: LD_INT 0
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 0
66953: PUSH
66954: LD_INT 1
66956: NEG
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 1
66964: PUSH
66965: LD_INT 0
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 1
66974: PUSH
66975: LD_INT 1
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 0
66984: PUSH
66985: LD_INT 1
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 1
66994: NEG
66995: PUSH
66996: LD_INT 0
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 1
67005: NEG
67006: PUSH
67007: LD_INT 1
67009: NEG
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: ST_TO_ADDR
// end ; 1 :
67024: GO 72921
67026: LD_INT 1
67028: DOUBLE
67029: EQUAL
67030: IFTRUE 67034
67032: GO 69657
67034: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67035: LD_ADDR_VAR 0 11
67039: PUSH
67040: LD_INT 1
67042: NEG
67043: PUSH
67044: LD_INT 3
67046: NEG
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 0
67054: PUSH
67055: LD_INT 3
67057: NEG
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 1
67065: PUSH
67066: LD_INT 2
67068: NEG
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: LIST
67078: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67079: LD_ADDR_VAR 0 12
67083: PUSH
67084: LD_INT 2
67086: PUSH
67087: LD_INT 1
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 3
67097: PUSH
67098: LD_INT 0
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 3
67107: PUSH
67108: LD_INT 1
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: LIST
67119: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67120: LD_ADDR_VAR 0 13
67124: PUSH
67125: LD_INT 3
67127: PUSH
67128: LD_INT 2
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 3
67137: PUSH
67138: LD_INT 3
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 2
67147: PUSH
67148: LD_INT 3
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: LIST
67159: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67160: LD_ADDR_VAR 0 14
67164: PUSH
67165: LD_INT 1
67167: PUSH
67168: LD_INT 3
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 0
67177: PUSH
67178: LD_INT 3
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 1
67187: NEG
67188: PUSH
67189: LD_INT 2
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: LIST
67200: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67201: LD_ADDR_VAR 0 15
67205: PUSH
67206: LD_INT 2
67208: NEG
67209: PUSH
67210: LD_INT 1
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 3
67219: NEG
67220: PUSH
67221: LD_INT 0
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 3
67230: NEG
67231: PUSH
67232: LD_INT 1
67234: NEG
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: LIST
67244: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67245: LD_ADDR_VAR 0 16
67249: PUSH
67250: LD_INT 2
67252: NEG
67253: PUSH
67254: LD_INT 3
67256: NEG
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 3
67264: NEG
67265: PUSH
67266: LD_INT 2
67268: NEG
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 3
67276: NEG
67277: PUSH
67278: LD_INT 3
67280: NEG
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: LIST
67290: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67291: LD_ADDR_VAR 0 17
67295: PUSH
67296: LD_INT 1
67298: NEG
67299: PUSH
67300: LD_INT 3
67302: NEG
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 0
67310: PUSH
67311: LD_INT 3
67313: NEG
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 1
67321: PUSH
67322: LD_INT 2
67324: NEG
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: LIST
67334: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67335: LD_ADDR_VAR 0 18
67339: PUSH
67340: LD_INT 2
67342: PUSH
67343: LD_INT 1
67345: NEG
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 3
67353: PUSH
67354: LD_INT 0
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 3
67363: PUSH
67364: LD_INT 1
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: LIST
67375: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67376: LD_ADDR_VAR 0 19
67380: PUSH
67381: LD_INT 3
67383: PUSH
67384: LD_INT 2
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 3
67393: PUSH
67394: LD_INT 3
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 2
67403: PUSH
67404: LD_INT 3
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: LIST
67415: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67416: LD_ADDR_VAR 0 20
67420: PUSH
67421: LD_INT 1
67423: PUSH
67424: LD_INT 3
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 0
67433: PUSH
67434: LD_INT 3
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 1
67443: NEG
67444: PUSH
67445: LD_INT 2
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: LIST
67456: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67457: LD_ADDR_VAR 0 21
67461: PUSH
67462: LD_INT 2
67464: NEG
67465: PUSH
67466: LD_INT 1
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 3
67475: NEG
67476: PUSH
67477: LD_INT 0
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 3
67486: NEG
67487: PUSH
67488: LD_INT 1
67490: NEG
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: LIST
67500: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67501: LD_ADDR_VAR 0 22
67505: PUSH
67506: LD_INT 2
67508: NEG
67509: PUSH
67510: LD_INT 3
67512: NEG
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 3
67520: NEG
67521: PUSH
67522: LD_INT 2
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 3
67532: NEG
67533: PUSH
67534: LD_INT 3
67536: NEG
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: LIST
67546: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67547: LD_ADDR_VAR 0 23
67551: PUSH
67552: LD_INT 0
67554: PUSH
67555: LD_INT 3
67557: NEG
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 1
67565: NEG
67566: PUSH
67567: LD_INT 4
67569: NEG
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 1
67577: PUSH
67578: LD_INT 3
67580: NEG
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: LIST
67590: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67591: LD_ADDR_VAR 0 24
67595: PUSH
67596: LD_INT 3
67598: PUSH
67599: LD_INT 0
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 3
67608: PUSH
67609: LD_INT 1
67611: NEG
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 4
67619: PUSH
67620: LD_INT 1
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: LIST
67631: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67632: LD_ADDR_VAR 0 25
67636: PUSH
67637: LD_INT 3
67639: PUSH
67640: LD_INT 3
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 4
67649: PUSH
67650: LD_INT 3
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: LD_INT 3
67659: PUSH
67660: LD_INT 4
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: LIST
67671: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67672: LD_ADDR_VAR 0 26
67676: PUSH
67677: LD_INT 0
67679: PUSH
67680: LD_INT 3
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 1
67689: PUSH
67690: LD_INT 4
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 1
67699: NEG
67700: PUSH
67701: LD_INT 3
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: LIST
67712: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67713: LD_ADDR_VAR 0 27
67717: PUSH
67718: LD_INT 3
67720: NEG
67721: PUSH
67722: LD_INT 0
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 3
67731: NEG
67732: PUSH
67733: LD_INT 1
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 4
67742: NEG
67743: PUSH
67744: LD_INT 1
67746: NEG
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: LIST
67756: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67757: LD_ADDR_VAR 0 28
67761: PUSH
67762: LD_INT 3
67764: NEG
67765: PUSH
67766: LD_INT 3
67768: NEG
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 3
67776: NEG
67777: PUSH
67778: LD_INT 4
67780: NEG
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 4
67788: NEG
67789: PUSH
67790: LD_INT 3
67792: NEG
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: LIST
67802: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67803: LD_ADDR_VAR 0 29
67807: PUSH
67808: LD_INT 1
67810: NEG
67811: PUSH
67812: LD_INT 3
67814: NEG
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 0
67822: PUSH
67823: LD_INT 3
67825: NEG
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 1
67833: PUSH
67834: LD_INT 2
67836: NEG
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 1
67844: NEG
67845: PUSH
67846: LD_INT 4
67848: NEG
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 0
67856: PUSH
67857: LD_INT 4
67859: NEG
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: LD_INT 1
67867: PUSH
67868: LD_INT 3
67870: NEG
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 1
67878: NEG
67879: PUSH
67880: LD_INT 5
67882: NEG
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 0
67890: PUSH
67891: LD_INT 5
67893: NEG
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 1
67901: PUSH
67902: LD_INT 4
67904: NEG
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 1
67912: NEG
67913: PUSH
67914: LD_INT 6
67916: NEG
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 0
67924: PUSH
67925: LD_INT 6
67927: NEG
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 1
67935: PUSH
67936: LD_INT 5
67938: NEG
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67958: LD_ADDR_VAR 0 30
67962: PUSH
67963: LD_INT 2
67965: PUSH
67966: LD_INT 1
67968: NEG
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 3
67976: PUSH
67977: LD_INT 0
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 3
67986: PUSH
67987: LD_INT 1
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: LD_INT 3
67996: PUSH
67997: LD_INT 1
67999: NEG
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 4
68007: PUSH
68008: LD_INT 0
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 4
68017: PUSH
68018: LD_INT 1
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 4
68027: PUSH
68028: LD_INT 1
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 5
68038: PUSH
68039: LD_INT 0
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 5
68048: PUSH
68049: LD_INT 1
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 5
68058: PUSH
68059: LD_INT 1
68061: NEG
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 6
68069: PUSH
68070: LD_INT 0
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 6
68079: PUSH
68080: LD_INT 1
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68101: LD_ADDR_VAR 0 31
68105: PUSH
68106: LD_INT 3
68108: PUSH
68109: LD_INT 2
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 3
68118: PUSH
68119: LD_INT 3
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 2
68128: PUSH
68129: LD_INT 3
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 4
68138: PUSH
68139: LD_INT 3
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 4
68148: PUSH
68149: LD_INT 4
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 3
68158: PUSH
68159: LD_INT 4
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 5
68168: PUSH
68169: LD_INT 4
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 5
68178: PUSH
68179: LD_INT 5
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 4
68188: PUSH
68189: LD_INT 5
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 6
68198: PUSH
68199: LD_INT 5
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 6
68208: PUSH
68209: LD_INT 6
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 5
68218: PUSH
68219: LD_INT 6
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68240: LD_ADDR_VAR 0 32
68244: PUSH
68245: LD_INT 1
68247: PUSH
68248: LD_INT 3
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 0
68257: PUSH
68258: LD_INT 3
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 1
68267: NEG
68268: PUSH
68269: LD_INT 2
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 1
68278: PUSH
68279: LD_INT 4
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 0
68288: PUSH
68289: LD_INT 4
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 1
68298: NEG
68299: PUSH
68300: LD_INT 3
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 1
68309: PUSH
68310: LD_INT 5
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 0
68319: PUSH
68320: LD_INT 5
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 1
68329: NEG
68330: PUSH
68331: LD_INT 4
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 1
68340: PUSH
68341: LD_INT 6
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 0
68350: PUSH
68351: LD_INT 6
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 1
68360: NEG
68361: PUSH
68362: LD_INT 5
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68383: LD_ADDR_VAR 0 33
68387: PUSH
68388: LD_INT 2
68390: NEG
68391: PUSH
68392: LD_INT 1
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 3
68401: NEG
68402: PUSH
68403: LD_INT 0
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 3
68412: NEG
68413: PUSH
68414: LD_INT 1
68416: NEG
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 3
68424: NEG
68425: PUSH
68426: LD_INT 1
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 4
68435: NEG
68436: PUSH
68437: LD_INT 0
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 4
68446: NEG
68447: PUSH
68448: LD_INT 1
68450: NEG
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 4
68458: NEG
68459: PUSH
68460: LD_INT 1
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 5
68469: NEG
68470: PUSH
68471: LD_INT 0
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 5
68480: NEG
68481: PUSH
68482: LD_INT 1
68484: NEG
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 5
68492: NEG
68493: PUSH
68494: LD_INT 1
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 6
68503: NEG
68504: PUSH
68505: LD_INT 0
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 6
68514: NEG
68515: PUSH
68516: LD_INT 1
68518: NEG
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68538: LD_ADDR_VAR 0 34
68542: PUSH
68543: LD_INT 2
68545: NEG
68546: PUSH
68547: LD_INT 3
68549: NEG
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 3
68557: NEG
68558: PUSH
68559: LD_INT 2
68561: NEG
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 3
68569: NEG
68570: PUSH
68571: LD_INT 3
68573: NEG
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 3
68581: NEG
68582: PUSH
68583: LD_INT 4
68585: NEG
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 4
68593: NEG
68594: PUSH
68595: LD_INT 3
68597: NEG
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 4
68605: NEG
68606: PUSH
68607: LD_INT 4
68609: NEG
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: PUSH
68615: LD_INT 4
68617: NEG
68618: PUSH
68619: LD_INT 5
68621: NEG
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 5
68629: NEG
68630: PUSH
68631: LD_INT 4
68633: NEG
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 5
68641: NEG
68642: PUSH
68643: LD_INT 5
68645: NEG
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: LD_INT 5
68653: NEG
68654: PUSH
68655: LD_INT 6
68657: NEG
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 6
68665: NEG
68666: PUSH
68667: LD_INT 5
68669: NEG
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 6
68677: NEG
68678: PUSH
68679: LD_INT 6
68681: NEG
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68701: LD_ADDR_VAR 0 41
68705: PUSH
68706: LD_INT 0
68708: PUSH
68709: LD_INT 2
68711: NEG
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 1
68719: NEG
68720: PUSH
68721: LD_INT 3
68723: NEG
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 1
68731: PUSH
68732: LD_INT 2
68734: NEG
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: LIST
68744: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68745: LD_ADDR_VAR 0 42
68749: PUSH
68750: LD_INT 2
68752: PUSH
68753: LD_INT 0
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: LD_INT 2
68762: PUSH
68763: LD_INT 1
68765: NEG
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 3
68773: PUSH
68774: LD_INT 1
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: LIST
68785: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68786: LD_ADDR_VAR 0 43
68790: PUSH
68791: LD_INT 2
68793: PUSH
68794: LD_INT 2
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 3
68803: PUSH
68804: LD_INT 2
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 2
68813: PUSH
68814: LD_INT 3
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: LIST
68825: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68826: LD_ADDR_VAR 0 44
68830: PUSH
68831: LD_INT 0
68833: PUSH
68834: LD_INT 2
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 1
68843: PUSH
68844: LD_INT 3
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 1
68853: NEG
68854: PUSH
68855: LD_INT 2
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: LIST
68866: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68867: LD_ADDR_VAR 0 45
68871: PUSH
68872: LD_INT 2
68874: NEG
68875: PUSH
68876: LD_INT 0
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 2
68885: NEG
68886: PUSH
68887: LD_INT 1
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 3
68896: NEG
68897: PUSH
68898: LD_INT 1
68900: NEG
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: LIST
68910: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68911: LD_ADDR_VAR 0 46
68915: PUSH
68916: LD_INT 2
68918: NEG
68919: PUSH
68920: LD_INT 2
68922: NEG
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 2
68930: NEG
68931: PUSH
68932: LD_INT 3
68934: NEG
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 3
68942: NEG
68943: PUSH
68944: LD_INT 2
68946: NEG
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: LIST
68956: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68957: LD_ADDR_VAR 0 47
68961: PUSH
68962: LD_INT 2
68964: NEG
68965: PUSH
68966: LD_INT 3
68968: NEG
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 1
68976: NEG
68977: PUSH
68978: LD_INT 3
68980: NEG
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68990: LD_ADDR_VAR 0 48
68994: PUSH
68995: LD_INT 1
68997: PUSH
68998: LD_INT 2
69000: NEG
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 2
69008: PUSH
69009: LD_INT 1
69011: NEG
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69021: LD_ADDR_VAR 0 49
69025: PUSH
69026: LD_INT 3
69028: PUSH
69029: LD_INT 1
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 3
69038: PUSH
69039: LD_INT 2
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69050: LD_ADDR_VAR 0 50
69054: PUSH
69055: LD_INT 2
69057: PUSH
69058: LD_INT 3
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 1
69067: PUSH
69068: LD_INT 3
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69079: LD_ADDR_VAR 0 51
69083: PUSH
69084: LD_INT 1
69086: NEG
69087: PUSH
69088: LD_INT 2
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 2
69097: NEG
69098: PUSH
69099: LD_INT 1
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69110: LD_ADDR_VAR 0 52
69114: PUSH
69115: LD_INT 3
69117: NEG
69118: PUSH
69119: LD_INT 1
69121: NEG
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 3
69129: NEG
69130: PUSH
69131: LD_INT 2
69133: NEG
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69143: LD_ADDR_VAR 0 53
69147: PUSH
69148: LD_INT 1
69150: NEG
69151: PUSH
69152: LD_INT 3
69154: NEG
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: LD_INT 0
69162: PUSH
69163: LD_INT 3
69165: NEG
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_INT 1
69173: PUSH
69174: LD_INT 2
69176: NEG
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: LIST
69186: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69187: LD_ADDR_VAR 0 54
69191: PUSH
69192: LD_INT 2
69194: PUSH
69195: LD_INT 1
69197: NEG
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 3
69205: PUSH
69206: LD_INT 0
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 3
69215: PUSH
69216: LD_INT 1
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: LIST
69227: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69228: LD_ADDR_VAR 0 55
69232: PUSH
69233: LD_INT 3
69235: PUSH
69236: LD_INT 2
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 3
69245: PUSH
69246: LD_INT 3
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 2
69255: PUSH
69256: LD_INT 3
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: LIST
69267: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69268: LD_ADDR_VAR 0 56
69272: PUSH
69273: LD_INT 1
69275: PUSH
69276: LD_INT 3
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: LD_INT 0
69285: PUSH
69286: LD_INT 3
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: LD_INT 1
69295: NEG
69296: PUSH
69297: LD_INT 2
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: LIST
69308: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69309: LD_ADDR_VAR 0 57
69313: PUSH
69314: LD_INT 2
69316: NEG
69317: PUSH
69318: LD_INT 1
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 3
69327: NEG
69328: PUSH
69329: LD_INT 0
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 3
69338: NEG
69339: PUSH
69340: LD_INT 1
69342: NEG
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: LIST
69352: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69353: LD_ADDR_VAR 0 58
69357: PUSH
69358: LD_INT 2
69360: NEG
69361: PUSH
69362: LD_INT 3
69364: NEG
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 3
69372: NEG
69373: PUSH
69374: LD_INT 2
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 3
69384: NEG
69385: PUSH
69386: LD_INT 3
69388: NEG
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: LIST
69398: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69399: LD_ADDR_VAR 0 59
69403: PUSH
69404: LD_INT 1
69406: NEG
69407: PUSH
69408: LD_INT 2
69410: NEG
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 0
69418: PUSH
69419: LD_INT 2
69421: NEG
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 1
69429: PUSH
69430: LD_INT 1
69432: NEG
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: LIST
69442: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69443: LD_ADDR_VAR 0 60
69447: PUSH
69448: LD_INT 1
69450: PUSH
69451: LD_INT 1
69453: NEG
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: LD_INT 2
69461: PUSH
69462: LD_INT 0
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: PUSH
69469: LD_INT 2
69471: PUSH
69472: LD_INT 1
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: LIST
69483: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69484: LD_ADDR_VAR 0 61
69488: PUSH
69489: LD_INT 2
69491: PUSH
69492: LD_INT 1
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 2
69501: PUSH
69502: LD_INT 2
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 1
69511: PUSH
69512: LD_INT 2
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: LIST
69523: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69524: LD_ADDR_VAR 0 62
69528: PUSH
69529: LD_INT 1
69531: PUSH
69532: LD_INT 2
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: LD_INT 0
69541: PUSH
69542: LD_INT 2
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 1
69551: NEG
69552: PUSH
69553: LD_INT 1
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: LIST
69564: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69565: LD_ADDR_VAR 0 63
69569: PUSH
69570: LD_INT 1
69572: NEG
69573: PUSH
69574: LD_INT 1
69576: PUSH
69577: EMPTY
69578: LIST
69579: LIST
69580: PUSH
69581: LD_INT 2
69583: NEG
69584: PUSH
69585: LD_INT 0
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: LD_INT 2
69594: NEG
69595: PUSH
69596: LD_INT 1
69598: NEG
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: LIST
69608: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69609: LD_ADDR_VAR 0 64
69613: PUSH
69614: LD_INT 1
69616: NEG
69617: PUSH
69618: LD_INT 2
69620: NEG
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 2
69628: NEG
69629: PUSH
69630: LD_INT 1
69632: NEG
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 2
69640: NEG
69641: PUSH
69642: LD_INT 2
69644: NEG
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: LIST
69654: ST_TO_ADDR
// end ; 2 :
69655: GO 72921
69657: LD_INT 2
69659: DOUBLE
69660: EQUAL
69661: IFTRUE 69665
69663: GO 72920
69665: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69666: LD_ADDR_VAR 0 29
69670: PUSH
69671: LD_INT 4
69673: PUSH
69674: LD_INT 0
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: PUSH
69681: LD_INT 4
69683: PUSH
69684: LD_INT 1
69686: NEG
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 5
69694: PUSH
69695: LD_INT 0
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 5
69704: PUSH
69705: LD_INT 1
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 4
69714: PUSH
69715: LD_INT 1
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 3
69724: PUSH
69725: LD_INT 0
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 3
69734: PUSH
69735: LD_INT 1
69737: NEG
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: LD_INT 3
69745: PUSH
69746: LD_INT 2
69748: NEG
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 5
69756: PUSH
69757: LD_INT 2
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: LD_INT 3
69766: PUSH
69767: LD_INT 3
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: PUSH
69774: LD_INT 3
69776: PUSH
69777: LD_INT 2
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: LD_INT 4
69786: PUSH
69787: LD_INT 3
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 4
69796: PUSH
69797: LD_INT 4
69799: PUSH
69800: EMPTY
69801: LIST
69802: LIST
69803: PUSH
69804: LD_INT 3
69806: PUSH
69807: LD_INT 4
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 2
69816: PUSH
69817: LD_INT 3
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 2
69826: PUSH
69827: LD_INT 2
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: LD_INT 4
69836: PUSH
69837: LD_INT 2
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: PUSH
69844: LD_INT 2
69846: PUSH
69847: LD_INT 4
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 0
69856: PUSH
69857: LD_INT 4
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 0
69866: PUSH
69867: LD_INT 3
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 1
69876: PUSH
69877: LD_INT 4
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 1
69886: PUSH
69887: LD_INT 5
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 0
69896: PUSH
69897: LD_INT 5
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: LD_INT 1
69906: NEG
69907: PUSH
69908: LD_INT 4
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 1
69917: NEG
69918: PUSH
69919: LD_INT 3
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 2
69928: PUSH
69929: LD_INT 5
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 2
69938: NEG
69939: PUSH
69940: LD_INT 3
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 3
69949: NEG
69950: PUSH
69951: LD_INT 0
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 3
69960: NEG
69961: PUSH
69962: LD_INT 1
69964: NEG
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 2
69972: NEG
69973: PUSH
69974: LD_INT 0
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 2
69983: NEG
69984: PUSH
69985: LD_INT 1
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 3
69994: NEG
69995: PUSH
69996: LD_INT 1
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 4
70005: NEG
70006: PUSH
70007: LD_INT 0
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 4
70016: NEG
70017: PUSH
70018: LD_INT 1
70020: NEG
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 4
70028: NEG
70029: PUSH
70030: LD_INT 2
70032: NEG
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 2
70040: NEG
70041: PUSH
70042: LD_INT 2
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: LD_INT 4
70051: NEG
70052: PUSH
70053: LD_INT 4
70055: NEG
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: LD_INT 4
70063: NEG
70064: PUSH
70065: LD_INT 5
70067: NEG
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 3
70075: NEG
70076: PUSH
70077: LD_INT 4
70079: NEG
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 3
70087: NEG
70088: PUSH
70089: LD_INT 3
70091: NEG
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 4
70099: NEG
70100: PUSH
70101: LD_INT 3
70103: NEG
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 5
70111: NEG
70112: PUSH
70113: LD_INT 4
70115: NEG
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 5
70123: NEG
70124: PUSH
70125: LD_INT 5
70127: NEG
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 3
70135: NEG
70136: PUSH
70137: LD_INT 5
70139: NEG
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: LD_INT 5
70147: NEG
70148: PUSH
70149: LD_INT 3
70151: NEG
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70204: LD_ADDR_VAR 0 30
70208: PUSH
70209: LD_INT 4
70211: PUSH
70212: LD_INT 4
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 4
70221: PUSH
70222: LD_INT 3
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PUSH
70229: LD_INT 5
70231: PUSH
70232: LD_INT 4
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 5
70241: PUSH
70242: LD_INT 5
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 4
70251: PUSH
70252: LD_INT 5
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 3
70261: PUSH
70262: LD_INT 4
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PUSH
70269: LD_INT 3
70271: PUSH
70272: LD_INT 3
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 5
70281: PUSH
70282: LD_INT 3
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 3
70291: PUSH
70292: LD_INT 5
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 0
70301: PUSH
70302: LD_INT 3
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 0
70311: PUSH
70312: LD_INT 2
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 1
70321: PUSH
70322: LD_INT 3
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 1
70331: PUSH
70332: LD_INT 4
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 0
70341: PUSH
70342: LD_INT 4
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 1
70351: NEG
70352: PUSH
70353: LD_INT 3
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 1
70362: NEG
70363: PUSH
70364: LD_INT 2
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: PUSH
70371: LD_INT 2
70373: PUSH
70374: LD_INT 4
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 2
70383: NEG
70384: PUSH
70385: LD_INT 2
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: LD_INT 4
70394: NEG
70395: PUSH
70396: LD_INT 0
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 4
70405: NEG
70406: PUSH
70407: LD_INT 1
70409: NEG
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 3
70417: NEG
70418: PUSH
70419: LD_INT 0
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: LD_INT 3
70428: NEG
70429: PUSH
70430: LD_INT 1
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: LD_INT 4
70439: NEG
70440: PUSH
70441: LD_INT 1
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 5
70450: NEG
70451: PUSH
70452: LD_INT 0
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: PUSH
70459: LD_INT 5
70461: NEG
70462: PUSH
70463: LD_INT 1
70465: NEG
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: PUSH
70471: LD_INT 5
70473: NEG
70474: PUSH
70475: LD_INT 2
70477: NEG
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 3
70485: NEG
70486: PUSH
70487: LD_INT 2
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 3
70496: NEG
70497: PUSH
70498: LD_INT 3
70500: NEG
70501: PUSH
70502: EMPTY
70503: LIST
70504: LIST
70505: PUSH
70506: LD_INT 3
70508: NEG
70509: PUSH
70510: LD_INT 4
70512: NEG
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: LD_INT 2
70520: NEG
70521: PUSH
70522: LD_INT 3
70524: NEG
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PUSH
70530: LD_INT 2
70532: NEG
70533: PUSH
70534: LD_INT 2
70536: NEG
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: PUSH
70542: LD_INT 3
70544: NEG
70545: PUSH
70546: LD_INT 2
70548: NEG
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: LD_INT 4
70556: NEG
70557: PUSH
70558: LD_INT 3
70560: NEG
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PUSH
70566: LD_INT 4
70568: NEG
70569: PUSH
70570: LD_INT 4
70572: NEG
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 2
70580: NEG
70581: PUSH
70582: LD_INT 4
70584: NEG
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: LD_INT 4
70592: NEG
70593: PUSH
70594: LD_INT 2
70596: NEG
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 0
70604: PUSH
70605: LD_INT 4
70607: NEG
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 0
70615: PUSH
70616: LD_INT 5
70618: NEG
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: PUSH
70624: LD_INT 1
70626: PUSH
70627: LD_INT 4
70629: NEG
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: PUSH
70635: LD_INT 1
70637: PUSH
70638: LD_INT 3
70640: NEG
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: LD_INT 0
70648: PUSH
70649: LD_INT 3
70651: NEG
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 1
70659: NEG
70660: PUSH
70661: LD_INT 4
70663: NEG
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 1
70671: NEG
70672: PUSH
70673: LD_INT 5
70675: NEG
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 2
70683: PUSH
70684: LD_INT 3
70686: NEG
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 2
70694: NEG
70695: PUSH
70696: LD_INT 5
70698: NEG
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: LIST
70750: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70751: LD_ADDR_VAR 0 31
70755: PUSH
70756: LD_INT 0
70758: PUSH
70759: LD_INT 4
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 0
70768: PUSH
70769: LD_INT 3
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 1
70778: PUSH
70779: LD_INT 4
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: LD_INT 1
70788: PUSH
70789: LD_INT 5
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PUSH
70796: LD_INT 0
70798: PUSH
70799: LD_INT 5
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: PUSH
70806: LD_INT 1
70808: NEG
70809: PUSH
70810: LD_INT 4
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PUSH
70817: LD_INT 1
70819: NEG
70820: PUSH
70821: LD_INT 3
70823: PUSH
70824: EMPTY
70825: LIST
70826: LIST
70827: PUSH
70828: LD_INT 2
70830: PUSH
70831: LD_INT 5
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: LD_INT 2
70840: NEG
70841: PUSH
70842: LD_INT 3
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: PUSH
70849: LD_INT 3
70851: NEG
70852: PUSH
70853: LD_INT 0
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 3
70862: NEG
70863: PUSH
70864: LD_INT 1
70866: NEG
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 2
70874: NEG
70875: PUSH
70876: LD_INT 0
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: LD_INT 2
70885: NEG
70886: PUSH
70887: LD_INT 1
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: PUSH
70894: LD_INT 3
70896: NEG
70897: PUSH
70898: LD_INT 1
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: PUSH
70905: LD_INT 4
70907: NEG
70908: PUSH
70909: LD_INT 0
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 4
70918: NEG
70919: PUSH
70920: LD_INT 1
70922: NEG
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: LD_INT 4
70930: NEG
70931: PUSH
70932: LD_INT 2
70934: NEG
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: PUSH
70940: LD_INT 2
70942: NEG
70943: PUSH
70944: LD_INT 2
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PUSH
70951: LD_INT 4
70953: NEG
70954: PUSH
70955: LD_INT 4
70957: NEG
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 4
70965: NEG
70966: PUSH
70967: LD_INT 5
70969: NEG
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: PUSH
70975: LD_INT 3
70977: NEG
70978: PUSH
70979: LD_INT 4
70981: NEG
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 3
70989: NEG
70990: PUSH
70991: LD_INT 3
70993: NEG
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 4
71001: NEG
71002: PUSH
71003: LD_INT 3
71005: NEG
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 5
71013: NEG
71014: PUSH
71015: LD_INT 4
71017: NEG
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 5
71025: NEG
71026: PUSH
71027: LD_INT 5
71029: NEG
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 3
71037: NEG
71038: PUSH
71039: LD_INT 5
71041: NEG
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: PUSH
71047: LD_INT 5
71049: NEG
71050: PUSH
71051: LD_INT 3
71053: NEG
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: PUSH
71059: LD_INT 0
71061: PUSH
71062: LD_INT 3
71064: NEG
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: PUSH
71070: LD_INT 0
71072: PUSH
71073: LD_INT 4
71075: NEG
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: LD_INT 1
71083: PUSH
71084: LD_INT 3
71086: NEG
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 1
71094: PUSH
71095: LD_INT 2
71097: NEG
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: PUSH
71103: LD_INT 0
71105: PUSH
71106: LD_INT 2
71108: NEG
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 1
71116: NEG
71117: PUSH
71118: LD_INT 3
71120: NEG
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 1
71128: NEG
71129: PUSH
71130: LD_INT 4
71132: NEG
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 2
71140: PUSH
71141: LD_INT 2
71143: NEG
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PUSH
71149: LD_INT 2
71151: NEG
71152: PUSH
71153: LD_INT 4
71155: NEG
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_INT 4
71163: PUSH
71164: LD_INT 0
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: PUSH
71171: LD_INT 4
71173: PUSH
71174: LD_INT 1
71176: NEG
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PUSH
71182: LD_INT 5
71184: PUSH
71185: LD_INT 0
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PUSH
71192: LD_INT 5
71194: PUSH
71195: LD_INT 1
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: PUSH
71202: LD_INT 4
71204: PUSH
71205: LD_INT 1
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: PUSH
71212: LD_INT 3
71214: PUSH
71215: LD_INT 0
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: LD_INT 3
71224: PUSH
71225: LD_INT 1
71227: NEG
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_INT 3
71235: PUSH
71236: LD_INT 2
71238: NEG
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 5
71246: PUSH
71247: LD_INT 2
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: LIST
71265: LIST
71266: LIST
71267: LIST
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: LIST
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71301: LD_ADDR_VAR 0 32
71305: PUSH
71306: LD_INT 4
71308: NEG
71309: PUSH
71310: LD_INT 0
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: LD_INT 4
71319: NEG
71320: PUSH
71321: LD_INT 1
71323: NEG
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: PUSH
71329: LD_INT 3
71331: NEG
71332: PUSH
71333: LD_INT 0
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: PUSH
71340: LD_INT 3
71342: NEG
71343: PUSH
71344: LD_INT 1
71346: PUSH
71347: EMPTY
71348: LIST
71349: LIST
71350: PUSH
71351: LD_INT 4
71353: NEG
71354: PUSH
71355: LD_INT 1
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PUSH
71362: LD_INT 5
71364: NEG
71365: PUSH
71366: LD_INT 0
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: PUSH
71373: LD_INT 5
71375: NEG
71376: PUSH
71377: LD_INT 1
71379: NEG
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: LD_INT 5
71387: NEG
71388: PUSH
71389: LD_INT 2
71391: NEG
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PUSH
71397: LD_INT 3
71399: NEG
71400: PUSH
71401: LD_INT 2
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 3
71410: NEG
71411: PUSH
71412: LD_INT 3
71414: NEG
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: PUSH
71420: LD_INT 3
71422: NEG
71423: PUSH
71424: LD_INT 4
71426: NEG
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: LD_INT 2
71434: NEG
71435: PUSH
71436: LD_INT 3
71438: NEG
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: LD_INT 2
71446: NEG
71447: PUSH
71448: LD_INT 2
71450: NEG
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 3
71458: NEG
71459: PUSH
71460: LD_INT 2
71462: NEG
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 4
71470: NEG
71471: PUSH
71472: LD_INT 3
71474: NEG
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 4
71482: NEG
71483: PUSH
71484: LD_INT 4
71486: NEG
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 2
71494: NEG
71495: PUSH
71496: LD_INT 4
71498: NEG
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: LD_INT 4
71506: NEG
71507: PUSH
71508: LD_INT 2
71510: NEG
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 0
71518: PUSH
71519: LD_INT 4
71521: NEG
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_INT 0
71529: PUSH
71530: LD_INT 5
71532: NEG
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: PUSH
71538: LD_INT 1
71540: PUSH
71541: LD_INT 4
71543: NEG
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: LD_INT 1
71551: PUSH
71552: LD_INT 3
71554: NEG
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PUSH
71560: LD_INT 0
71562: PUSH
71563: LD_INT 3
71565: NEG
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PUSH
71571: LD_INT 1
71573: NEG
71574: PUSH
71575: LD_INT 4
71577: NEG
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: PUSH
71583: LD_INT 1
71585: NEG
71586: PUSH
71587: LD_INT 5
71589: NEG
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PUSH
71595: LD_INT 2
71597: PUSH
71598: LD_INT 3
71600: NEG
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 2
71608: NEG
71609: PUSH
71610: LD_INT 5
71612: NEG
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: PUSH
71618: LD_INT 3
71620: PUSH
71621: LD_INT 0
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 3
71630: PUSH
71631: LD_INT 1
71633: NEG
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 4
71641: PUSH
71642: LD_INT 0
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 4
71651: PUSH
71652: LD_INT 1
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: PUSH
71659: LD_INT 3
71661: PUSH
71662: LD_INT 1
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PUSH
71669: LD_INT 2
71671: PUSH
71672: LD_INT 0
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 2
71681: PUSH
71682: LD_INT 1
71684: NEG
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 2
71692: PUSH
71693: LD_INT 2
71695: NEG
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 4
71703: PUSH
71704: LD_INT 2
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: PUSH
71711: LD_INT 4
71713: PUSH
71714: LD_INT 4
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PUSH
71721: LD_INT 4
71723: PUSH
71724: LD_INT 3
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: PUSH
71731: LD_INT 5
71733: PUSH
71734: LD_INT 4
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: PUSH
71741: LD_INT 5
71743: PUSH
71744: LD_INT 5
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PUSH
71751: LD_INT 4
71753: PUSH
71754: LD_INT 5
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: PUSH
71761: LD_INT 3
71763: PUSH
71764: LD_INT 4
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: PUSH
71771: LD_INT 3
71773: PUSH
71774: LD_INT 3
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 5
71783: PUSH
71784: LD_INT 3
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: LD_INT 3
71793: PUSH
71794: LD_INT 5
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: LIST
71810: LIST
71811: LIST
71812: LIST
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: LIST
71818: LIST
71819: LIST
71820: LIST
71821: LIST
71822: LIST
71823: LIST
71824: LIST
71825: LIST
71826: LIST
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: LIST
71832: LIST
71833: LIST
71834: LIST
71835: LIST
71836: LIST
71837: LIST
71838: LIST
71839: LIST
71840: LIST
71841: LIST
71842: LIST
71843: LIST
71844: LIST
71845: LIST
71846: LIST
71847: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71848: LD_ADDR_VAR 0 33
71852: PUSH
71853: LD_INT 4
71855: NEG
71856: PUSH
71857: LD_INT 4
71859: NEG
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: PUSH
71865: LD_INT 4
71867: NEG
71868: PUSH
71869: LD_INT 5
71871: NEG
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PUSH
71877: LD_INT 3
71879: NEG
71880: PUSH
71881: LD_INT 4
71883: NEG
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: PUSH
71889: LD_INT 3
71891: NEG
71892: PUSH
71893: LD_INT 3
71895: NEG
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: PUSH
71901: LD_INT 4
71903: NEG
71904: PUSH
71905: LD_INT 3
71907: NEG
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PUSH
71913: LD_INT 5
71915: NEG
71916: PUSH
71917: LD_INT 4
71919: NEG
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PUSH
71925: LD_INT 5
71927: NEG
71928: PUSH
71929: LD_INT 5
71931: NEG
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 3
71939: NEG
71940: PUSH
71941: LD_INT 5
71943: NEG
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PUSH
71949: LD_INT 5
71951: NEG
71952: PUSH
71953: LD_INT 3
71955: NEG
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: PUSH
71961: LD_INT 0
71963: PUSH
71964: LD_INT 3
71966: NEG
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PUSH
71972: LD_INT 0
71974: PUSH
71975: LD_INT 4
71977: NEG
71978: PUSH
71979: EMPTY
71980: LIST
71981: LIST
71982: PUSH
71983: LD_INT 1
71985: PUSH
71986: LD_INT 3
71988: NEG
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: PUSH
71994: LD_INT 1
71996: PUSH
71997: LD_INT 2
71999: NEG
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: PUSH
72005: LD_INT 0
72007: PUSH
72008: LD_INT 2
72010: NEG
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PUSH
72016: LD_INT 1
72018: NEG
72019: PUSH
72020: LD_INT 3
72022: NEG
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PUSH
72028: LD_INT 1
72030: NEG
72031: PUSH
72032: LD_INT 4
72034: NEG
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: LD_INT 2
72042: PUSH
72043: LD_INT 2
72045: NEG
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PUSH
72051: LD_INT 2
72053: NEG
72054: PUSH
72055: LD_INT 4
72057: NEG
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: PUSH
72063: LD_INT 4
72065: PUSH
72066: LD_INT 0
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: PUSH
72073: LD_INT 4
72075: PUSH
72076: LD_INT 1
72078: NEG
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_INT 5
72086: PUSH
72087: LD_INT 0
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PUSH
72094: LD_INT 5
72096: PUSH
72097: LD_INT 1
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PUSH
72104: LD_INT 4
72106: PUSH
72107: LD_INT 1
72109: PUSH
72110: EMPTY
72111: LIST
72112: LIST
72113: PUSH
72114: LD_INT 3
72116: PUSH
72117: LD_INT 0
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: PUSH
72124: LD_INT 3
72126: PUSH
72127: LD_INT 1
72129: NEG
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: PUSH
72135: LD_INT 3
72137: PUSH
72138: LD_INT 2
72140: NEG
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: PUSH
72146: LD_INT 5
72148: PUSH
72149: LD_INT 2
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: LD_INT 3
72158: PUSH
72159: LD_INT 3
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: PUSH
72166: LD_INT 3
72168: PUSH
72169: LD_INT 2
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PUSH
72176: LD_INT 4
72178: PUSH
72179: LD_INT 3
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: LD_INT 4
72188: PUSH
72189: LD_INT 4
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: PUSH
72196: LD_INT 3
72198: PUSH
72199: LD_INT 4
72201: PUSH
72202: EMPTY
72203: LIST
72204: LIST
72205: PUSH
72206: LD_INT 2
72208: PUSH
72209: LD_INT 3
72211: PUSH
72212: EMPTY
72213: LIST
72214: LIST
72215: PUSH
72216: LD_INT 2
72218: PUSH
72219: LD_INT 2
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: PUSH
72226: LD_INT 4
72228: PUSH
72229: LD_INT 2
72231: PUSH
72232: EMPTY
72233: LIST
72234: LIST
72235: PUSH
72236: LD_INT 2
72238: PUSH
72239: LD_INT 4
72241: PUSH
72242: EMPTY
72243: LIST
72244: LIST
72245: PUSH
72246: LD_INT 0
72248: PUSH
72249: LD_INT 4
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: PUSH
72256: LD_INT 0
72258: PUSH
72259: LD_INT 3
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: PUSH
72266: LD_INT 1
72268: PUSH
72269: LD_INT 4
72271: PUSH
72272: EMPTY
72273: LIST
72274: LIST
72275: PUSH
72276: LD_INT 1
72278: PUSH
72279: LD_INT 5
72281: PUSH
72282: EMPTY
72283: LIST
72284: LIST
72285: PUSH
72286: LD_INT 0
72288: PUSH
72289: LD_INT 5
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: PUSH
72296: LD_INT 1
72298: NEG
72299: PUSH
72300: LD_INT 4
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: PUSH
72307: LD_INT 1
72309: NEG
72310: PUSH
72311: LD_INT 3
72313: PUSH
72314: EMPTY
72315: LIST
72316: LIST
72317: PUSH
72318: LD_INT 2
72320: PUSH
72321: LD_INT 5
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PUSH
72328: LD_INT 2
72330: NEG
72331: PUSH
72332: LD_INT 3
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: LIST
72349: LIST
72350: LIST
72351: LIST
72352: LIST
72353: LIST
72354: LIST
72355: LIST
72356: LIST
72357: LIST
72358: LIST
72359: LIST
72360: LIST
72361: LIST
72362: LIST
72363: LIST
72364: LIST
72365: LIST
72366: LIST
72367: LIST
72368: LIST
72369: LIST
72370: LIST
72371: LIST
72372: LIST
72373: LIST
72374: LIST
72375: LIST
72376: LIST
72377: LIST
72378: LIST
72379: LIST
72380: LIST
72381: LIST
72382: LIST
72383: LIST
72384: LIST
72385: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72386: LD_ADDR_VAR 0 34
72390: PUSH
72391: LD_INT 0
72393: PUSH
72394: LD_INT 4
72396: NEG
72397: PUSH
72398: EMPTY
72399: LIST
72400: LIST
72401: PUSH
72402: LD_INT 0
72404: PUSH
72405: LD_INT 5
72407: NEG
72408: PUSH
72409: EMPTY
72410: LIST
72411: LIST
72412: PUSH
72413: LD_INT 1
72415: PUSH
72416: LD_INT 4
72418: NEG
72419: PUSH
72420: EMPTY
72421: LIST
72422: LIST
72423: PUSH
72424: LD_INT 1
72426: PUSH
72427: LD_INT 3
72429: NEG
72430: PUSH
72431: EMPTY
72432: LIST
72433: LIST
72434: PUSH
72435: LD_INT 0
72437: PUSH
72438: LD_INT 3
72440: NEG
72441: PUSH
72442: EMPTY
72443: LIST
72444: LIST
72445: PUSH
72446: LD_INT 1
72448: NEG
72449: PUSH
72450: LD_INT 4
72452: NEG
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: PUSH
72458: LD_INT 1
72460: NEG
72461: PUSH
72462: LD_INT 5
72464: NEG
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: LD_INT 2
72472: PUSH
72473: LD_INT 3
72475: NEG
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: PUSH
72481: LD_INT 2
72483: NEG
72484: PUSH
72485: LD_INT 5
72487: NEG
72488: PUSH
72489: EMPTY
72490: LIST
72491: LIST
72492: PUSH
72493: LD_INT 3
72495: PUSH
72496: LD_INT 0
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: PUSH
72503: LD_INT 3
72505: PUSH
72506: LD_INT 1
72508: NEG
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: PUSH
72514: LD_INT 4
72516: PUSH
72517: LD_INT 0
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PUSH
72524: LD_INT 4
72526: PUSH
72527: LD_INT 1
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: PUSH
72534: LD_INT 3
72536: PUSH
72537: LD_INT 1
72539: PUSH
72540: EMPTY
72541: LIST
72542: LIST
72543: PUSH
72544: LD_INT 2
72546: PUSH
72547: LD_INT 0
72549: PUSH
72550: EMPTY
72551: LIST
72552: LIST
72553: PUSH
72554: LD_INT 2
72556: PUSH
72557: LD_INT 1
72559: NEG
72560: PUSH
72561: EMPTY
72562: LIST
72563: LIST
72564: PUSH
72565: LD_INT 2
72567: PUSH
72568: LD_INT 2
72570: NEG
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: PUSH
72576: LD_INT 4
72578: PUSH
72579: LD_INT 2
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: LD_INT 4
72588: PUSH
72589: LD_INT 4
72591: PUSH
72592: EMPTY
72593: LIST
72594: LIST
72595: PUSH
72596: LD_INT 4
72598: PUSH
72599: LD_INT 3
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: PUSH
72606: LD_INT 5
72608: PUSH
72609: LD_INT 4
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: PUSH
72616: LD_INT 5
72618: PUSH
72619: LD_INT 5
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: PUSH
72626: LD_INT 4
72628: PUSH
72629: LD_INT 5
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: PUSH
72636: LD_INT 3
72638: PUSH
72639: LD_INT 4
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: PUSH
72646: LD_INT 3
72648: PUSH
72649: LD_INT 3
72651: PUSH
72652: EMPTY
72653: LIST
72654: LIST
72655: PUSH
72656: LD_INT 5
72658: PUSH
72659: LD_INT 3
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: PUSH
72666: LD_INT 3
72668: PUSH
72669: LD_INT 5
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: PUSH
72676: LD_INT 0
72678: PUSH
72679: LD_INT 3
72681: PUSH
72682: EMPTY
72683: LIST
72684: LIST
72685: PUSH
72686: LD_INT 0
72688: PUSH
72689: LD_INT 2
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: PUSH
72696: LD_INT 1
72698: PUSH
72699: LD_INT 3
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: PUSH
72706: LD_INT 1
72708: PUSH
72709: LD_INT 4
72711: PUSH
72712: EMPTY
72713: LIST
72714: LIST
72715: PUSH
72716: LD_INT 0
72718: PUSH
72719: LD_INT 4
72721: PUSH
72722: EMPTY
72723: LIST
72724: LIST
72725: PUSH
72726: LD_INT 1
72728: NEG
72729: PUSH
72730: LD_INT 3
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: PUSH
72737: LD_INT 1
72739: NEG
72740: PUSH
72741: LD_INT 2
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 2
72750: PUSH
72751: LD_INT 4
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PUSH
72758: LD_INT 2
72760: NEG
72761: PUSH
72762: LD_INT 2
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 4
72771: NEG
72772: PUSH
72773: LD_INT 0
72775: PUSH
72776: EMPTY
72777: LIST
72778: LIST
72779: PUSH
72780: LD_INT 4
72782: NEG
72783: PUSH
72784: LD_INT 1
72786: NEG
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: PUSH
72792: LD_INT 3
72794: NEG
72795: PUSH
72796: LD_INT 0
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: PUSH
72803: LD_INT 3
72805: NEG
72806: PUSH
72807: LD_INT 1
72809: PUSH
72810: EMPTY
72811: LIST
72812: LIST
72813: PUSH
72814: LD_INT 4
72816: NEG
72817: PUSH
72818: LD_INT 1
72820: PUSH
72821: EMPTY
72822: LIST
72823: LIST
72824: PUSH
72825: LD_INT 5
72827: NEG
72828: PUSH
72829: LD_INT 0
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PUSH
72836: LD_INT 5
72838: NEG
72839: PUSH
72840: LD_INT 1
72842: NEG
72843: PUSH
72844: EMPTY
72845: LIST
72846: LIST
72847: PUSH
72848: LD_INT 5
72850: NEG
72851: PUSH
72852: LD_INT 2
72854: NEG
72855: PUSH
72856: EMPTY
72857: LIST
72858: LIST
72859: PUSH
72860: LD_INT 3
72862: NEG
72863: PUSH
72864: LD_INT 2
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: LIST
72881: LIST
72882: LIST
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: LIST
72902: LIST
72903: LIST
72904: LIST
72905: LIST
72906: LIST
72907: LIST
72908: LIST
72909: LIST
72910: LIST
72911: LIST
72912: LIST
72913: LIST
72914: LIST
72915: LIST
72916: LIST
72917: ST_TO_ADDR
// end ; end ;
72918: GO 72921
72920: POP
// case btype of b_depot , b_warehouse :
72921: LD_VAR 0 1
72925: PUSH
72926: LD_INT 0
72928: DOUBLE
72929: EQUAL
72930: IFTRUE 72940
72932: LD_INT 1
72934: DOUBLE
72935: EQUAL
72936: IFTRUE 72940
72938: GO 73141
72940: POP
// case nation of nation_american :
72941: LD_VAR 0 5
72945: PUSH
72946: LD_INT 1
72948: DOUBLE
72949: EQUAL
72950: IFTRUE 72954
72952: GO 73010
72954: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72955: LD_ADDR_VAR 0 9
72959: PUSH
72960: LD_VAR 0 11
72964: PUSH
72965: LD_VAR 0 12
72969: PUSH
72970: LD_VAR 0 13
72974: PUSH
72975: LD_VAR 0 14
72979: PUSH
72980: LD_VAR 0 15
72984: PUSH
72985: LD_VAR 0 16
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: LIST
72994: LIST
72995: LIST
72996: LIST
72997: PUSH
72998: LD_VAR 0 4
73002: PUSH
73003: LD_INT 1
73005: PLUS
73006: ARRAY
73007: ST_TO_ADDR
73008: GO 73139
73010: LD_INT 2
73012: DOUBLE
73013: EQUAL
73014: IFTRUE 73018
73016: GO 73074
73018: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73019: LD_ADDR_VAR 0 9
73023: PUSH
73024: LD_VAR 0 17
73028: PUSH
73029: LD_VAR 0 18
73033: PUSH
73034: LD_VAR 0 19
73038: PUSH
73039: LD_VAR 0 20
73043: PUSH
73044: LD_VAR 0 21
73048: PUSH
73049: LD_VAR 0 22
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: LIST
73058: LIST
73059: LIST
73060: LIST
73061: PUSH
73062: LD_VAR 0 4
73066: PUSH
73067: LD_INT 1
73069: PLUS
73070: ARRAY
73071: ST_TO_ADDR
73072: GO 73139
73074: LD_INT 3
73076: DOUBLE
73077: EQUAL
73078: IFTRUE 73082
73080: GO 73138
73082: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73083: LD_ADDR_VAR 0 9
73087: PUSH
73088: LD_VAR 0 23
73092: PUSH
73093: LD_VAR 0 24
73097: PUSH
73098: LD_VAR 0 25
73102: PUSH
73103: LD_VAR 0 26
73107: PUSH
73108: LD_VAR 0 27
73112: PUSH
73113: LD_VAR 0 28
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: LIST
73122: LIST
73123: LIST
73124: LIST
73125: PUSH
73126: LD_VAR 0 4
73130: PUSH
73131: LD_INT 1
73133: PLUS
73134: ARRAY
73135: ST_TO_ADDR
73136: GO 73139
73138: POP
73139: GO 73694
73141: LD_INT 2
73143: DOUBLE
73144: EQUAL
73145: IFTRUE 73155
73147: LD_INT 3
73149: DOUBLE
73150: EQUAL
73151: IFTRUE 73155
73153: GO 73211
73155: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73156: LD_ADDR_VAR 0 9
73160: PUSH
73161: LD_VAR 0 29
73165: PUSH
73166: LD_VAR 0 30
73170: PUSH
73171: LD_VAR 0 31
73175: PUSH
73176: LD_VAR 0 32
73180: PUSH
73181: LD_VAR 0 33
73185: PUSH
73186: LD_VAR 0 34
73190: PUSH
73191: EMPTY
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: LIST
73198: PUSH
73199: LD_VAR 0 4
73203: PUSH
73204: LD_INT 1
73206: PLUS
73207: ARRAY
73208: ST_TO_ADDR
73209: GO 73694
73211: LD_INT 16
73213: DOUBLE
73214: EQUAL
73215: IFTRUE 73273
73217: LD_INT 17
73219: DOUBLE
73220: EQUAL
73221: IFTRUE 73273
73223: LD_INT 18
73225: DOUBLE
73226: EQUAL
73227: IFTRUE 73273
73229: LD_INT 19
73231: DOUBLE
73232: EQUAL
73233: IFTRUE 73273
73235: LD_INT 22
73237: DOUBLE
73238: EQUAL
73239: IFTRUE 73273
73241: LD_INT 20
73243: DOUBLE
73244: EQUAL
73245: IFTRUE 73273
73247: LD_INT 21
73249: DOUBLE
73250: EQUAL
73251: IFTRUE 73273
73253: LD_INT 23
73255: DOUBLE
73256: EQUAL
73257: IFTRUE 73273
73259: LD_INT 24
73261: DOUBLE
73262: EQUAL
73263: IFTRUE 73273
73265: LD_INT 25
73267: DOUBLE
73268: EQUAL
73269: IFTRUE 73273
73271: GO 73329
73273: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73274: LD_ADDR_VAR 0 9
73278: PUSH
73279: LD_VAR 0 35
73283: PUSH
73284: LD_VAR 0 36
73288: PUSH
73289: LD_VAR 0 37
73293: PUSH
73294: LD_VAR 0 38
73298: PUSH
73299: LD_VAR 0 39
73303: PUSH
73304: LD_VAR 0 40
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: PUSH
73317: LD_VAR 0 4
73321: PUSH
73322: LD_INT 1
73324: PLUS
73325: ARRAY
73326: ST_TO_ADDR
73327: GO 73694
73329: LD_INT 6
73331: DOUBLE
73332: EQUAL
73333: IFTRUE 73385
73335: LD_INT 7
73337: DOUBLE
73338: EQUAL
73339: IFTRUE 73385
73341: LD_INT 8
73343: DOUBLE
73344: EQUAL
73345: IFTRUE 73385
73347: LD_INT 13
73349: DOUBLE
73350: EQUAL
73351: IFTRUE 73385
73353: LD_INT 12
73355: DOUBLE
73356: EQUAL
73357: IFTRUE 73385
73359: LD_INT 15
73361: DOUBLE
73362: EQUAL
73363: IFTRUE 73385
73365: LD_INT 11
73367: DOUBLE
73368: EQUAL
73369: IFTRUE 73385
73371: LD_INT 14
73373: DOUBLE
73374: EQUAL
73375: IFTRUE 73385
73377: LD_INT 10
73379: DOUBLE
73380: EQUAL
73381: IFTRUE 73385
73383: GO 73441
73385: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73386: LD_ADDR_VAR 0 9
73390: PUSH
73391: LD_VAR 0 41
73395: PUSH
73396: LD_VAR 0 42
73400: PUSH
73401: LD_VAR 0 43
73405: PUSH
73406: LD_VAR 0 44
73410: PUSH
73411: LD_VAR 0 45
73415: PUSH
73416: LD_VAR 0 46
73420: PUSH
73421: EMPTY
73422: LIST
73423: LIST
73424: LIST
73425: LIST
73426: LIST
73427: LIST
73428: PUSH
73429: LD_VAR 0 4
73433: PUSH
73434: LD_INT 1
73436: PLUS
73437: ARRAY
73438: ST_TO_ADDR
73439: GO 73694
73441: LD_INT 36
73443: DOUBLE
73444: EQUAL
73445: IFTRUE 73449
73447: GO 73505
73449: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73450: LD_ADDR_VAR 0 9
73454: PUSH
73455: LD_VAR 0 47
73459: PUSH
73460: LD_VAR 0 48
73464: PUSH
73465: LD_VAR 0 49
73469: PUSH
73470: LD_VAR 0 50
73474: PUSH
73475: LD_VAR 0 51
73479: PUSH
73480: LD_VAR 0 52
73484: PUSH
73485: EMPTY
73486: LIST
73487: LIST
73488: LIST
73489: LIST
73490: LIST
73491: LIST
73492: PUSH
73493: LD_VAR 0 4
73497: PUSH
73498: LD_INT 1
73500: PLUS
73501: ARRAY
73502: ST_TO_ADDR
73503: GO 73694
73505: LD_INT 4
73507: DOUBLE
73508: EQUAL
73509: IFTRUE 73531
73511: LD_INT 5
73513: DOUBLE
73514: EQUAL
73515: IFTRUE 73531
73517: LD_INT 34
73519: DOUBLE
73520: EQUAL
73521: IFTRUE 73531
73523: LD_INT 37
73525: DOUBLE
73526: EQUAL
73527: IFTRUE 73531
73529: GO 73587
73531: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73532: LD_ADDR_VAR 0 9
73536: PUSH
73537: LD_VAR 0 53
73541: PUSH
73542: LD_VAR 0 54
73546: PUSH
73547: LD_VAR 0 55
73551: PUSH
73552: LD_VAR 0 56
73556: PUSH
73557: LD_VAR 0 57
73561: PUSH
73562: LD_VAR 0 58
73566: PUSH
73567: EMPTY
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: LIST
73574: PUSH
73575: LD_VAR 0 4
73579: PUSH
73580: LD_INT 1
73582: PLUS
73583: ARRAY
73584: ST_TO_ADDR
73585: GO 73694
73587: LD_INT 31
73589: DOUBLE
73590: EQUAL
73591: IFTRUE 73637
73593: LD_INT 32
73595: DOUBLE
73596: EQUAL
73597: IFTRUE 73637
73599: LD_INT 33
73601: DOUBLE
73602: EQUAL
73603: IFTRUE 73637
73605: LD_INT 27
73607: DOUBLE
73608: EQUAL
73609: IFTRUE 73637
73611: LD_INT 26
73613: DOUBLE
73614: EQUAL
73615: IFTRUE 73637
73617: LD_INT 28
73619: DOUBLE
73620: EQUAL
73621: IFTRUE 73637
73623: LD_INT 29
73625: DOUBLE
73626: EQUAL
73627: IFTRUE 73637
73629: LD_INT 30
73631: DOUBLE
73632: EQUAL
73633: IFTRUE 73637
73635: GO 73693
73637: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73638: LD_ADDR_VAR 0 9
73642: PUSH
73643: LD_VAR 0 59
73647: PUSH
73648: LD_VAR 0 60
73652: PUSH
73653: LD_VAR 0 61
73657: PUSH
73658: LD_VAR 0 62
73662: PUSH
73663: LD_VAR 0 63
73667: PUSH
73668: LD_VAR 0 64
73672: PUSH
73673: EMPTY
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: LIST
73679: LIST
73680: PUSH
73681: LD_VAR 0 4
73685: PUSH
73686: LD_INT 1
73688: PLUS
73689: ARRAY
73690: ST_TO_ADDR
73691: GO 73694
73693: POP
// temp_list2 = [ ] ;
73694: LD_ADDR_VAR 0 10
73698: PUSH
73699: EMPTY
73700: ST_TO_ADDR
// for i in temp_list do
73701: LD_ADDR_VAR 0 8
73705: PUSH
73706: LD_VAR 0 9
73710: PUSH
73711: FOR_IN
73712: IFFALSE 73764
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73714: LD_ADDR_VAR 0 10
73718: PUSH
73719: LD_VAR 0 10
73723: PUSH
73724: LD_VAR 0 8
73728: PUSH
73729: LD_INT 1
73731: ARRAY
73732: PUSH
73733: LD_VAR 0 2
73737: PLUS
73738: PUSH
73739: LD_VAR 0 8
73743: PUSH
73744: LD_INT 2
73746: ARRAY
73747: PUSH
73748: LD_VAR 0 3
73752: PLUS
73753: PUSH
73754: EMPTY
73755: LIST
73756: LIST
73757: PUSH
73758: EMPTY
73759: LIST
73760: ADD
73761: ST_TO_ADDR
73762: GO 73711
73764: POP
73765: POP
// result = temp_list2 ;
73766: LD_ADDR_VAR 0 7
73770: PUSH
73771: LD_VAR 0 10
73775: ST_TO_ADDR
// end ;
73776: LD_VAR 0 7
73780: RET
// export function EnemyInRange ( unit , dist ) ; begin
73781: LD_INT 0
73783: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73784: LD_ADDR_VAR 0 3
73788: PUSH
73789: LD_VAR 0 1
73793: PPUSH
73794: CALL_OW 255
73798: PPUSH
73799: LD_VAR 0 1
73803: PPUSH
73804: CALL_OW 250
73808: PPUSH
73809: LD_VAR 0 1
73813: PPUSH
73814: CALL_OW 251
73818: PPUSH
73819: LD_VAR 0 2
73823: PPUSH
73824: CALL 47154 0 4
73828: PUSH
73829: LD_INT 4
73831: ARRAY
73832: ST_TO_ADDR
// end ;
73833: LD_VAR 0 3
73837: RET
// export function PlayerSeeMe ( unit ) ; begin
73838: LD_INT 0
73840: PPUSH
// result := See ( your_side , unit ) ;
73841: LD_ADDR_VAR 0 2
73845: PUSH
73846: LD_OWVAR 2
73850: PPUSH
73851: LD_VAR 0 1
73855: PPUSH
73856: CALL_OW 292
73860: ST_TO_ADDR
// end ;
73861: LD_VAR 0 2
73865: RET
// export function ReverseDir ( unit ) ; begin
73866: LD_INT 0
73868: PPUSH
// if not unit then
73869: LD_VAR 0 1
73873: NOT
73874: IFFALSE 73878
// exit ;
73876: GO 73901
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73878: LD_ADDR_VAR 0 2
73882: PUSH
73883: LD_VAR 0 1
73887: PPUSH
73888: CALL_OW 254
73892: PUSH
73893: LD_INT 3
73895: PLUS
73896: PUSH
73897: LD_INT 6
73899: MOD
73900: ST_TO_ADDR
// end ;
73901: LD_VAR 0 2
73905: RET
// export function ReverseArray ( array ) ; var i ; begin
73906: LD_INT 0
73908: PPUSH
73909: PPUSH
// if not array then
73910: LD_VAR 0 1
73914: NOT
73915: IFFALSE 73919
// exit ;
73917: GO 73974
// result := [ ] ;
73919: LD_ADDR_VAR 0 2
73923: PUSH
73924: EMPTY
73925: ST_TO_ADDR
// for i := array downto 1 do
73926: LD_ADDR_VAR 0 3
73930: PUSH
73931: DOUBLE
73932: LD_VAR 0 1
73936: INC
73937: ST_TO_ADDR
73938: LD_INT 1
73940: PUSH
73941: FOR_DOWNTO
73942: IFFALSE 73972
// result := Join ( result , array [ i ] ) ;
73944: LD_ADDR_VAR 0 2
73948: PUSH
73949: LD_VAR 0 2
73953: PPUSH
73954: LD_VAR 0 1
73958: PUSH
73959: LD_VAR 0 3
73963: ARRAY
73964: PPUSH
73965: CALL 78619 0 2
73969: ST_TO_ADDR
73970: GO 73941
73972: POP
73973: POP
// end ;
73974: LD_VAR 0 2
73978: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73979: LD_INT 0
73981: PPUSH
73982: PPUSH
73983: PPUSH
73984: PPUSH
73985: PPUSH
73986: PPUSH
// if not unit or not hexes then
73987: LD_VAR 0 1
73991: NOT
73992: PUSH
73993: LD_VAR 0 2
73997: NOT
73998: OR
73999: IFFALSE 74003
// exit ;
74001: GO 74126
// dist := 9999 ;
74003: LD_ADDR_VAR 0 5
74007: PUSH
74008: LD_INT 9999
74010: ST_TO_ADDR
// for i = 1 to hexes do
74011: LD_ADDR_VAR 0 4
74015: PUSH
74016: DOUBLE
74017: LD_INT 1
74019: DEC
74020: ST_TO_ADDR
74021: LD_VAR 0 2
74025: PUSH
74026: FOR_TO
74027: IFFALSE 74114
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74029: LD_ADDR_VAR 0 6
74033: PUSH
74034: LD_VAR 0 1
74038: PPUSH
74039: LD_VAR 0 2
74043: PUSH
74044: LD_VAR 0 4
74048: ARRAY
74049: PUSH
74050: LD_INT 1
74052: ARRAY
74053: PPUSH
74054: LD_VAR 0 2
74058: PUSH
74059: LD_VAR 0 4
74063: ARRAY
74064: PUSH
74065: LD_INT 2
74067: ARRAY
74068: PPUSH
74069: CALL_OW 297
74073: ST_TO_ADDR
// if tdist < dist then
74074: LD_VAR 0 6
74078: PUSH
74079: LD_VAR 0 5
74083: LESS
74084: IFFALSE 74112
// begin hex := hexes [ i ] ;
74086: LD_ADDR_VAR 0 8
74090: PUSH
74091: LD_VAR 0 2
74095: PUSH
74096: LD_VAR 0 4
74100: ARRAY
74101: ST_TO_ADDR
// dist := tdist ;
74102: LD_ADDR_VAR 0 5
74106: PUSH
74107: LD_VAR 0 6
74111: ST_TO_ADDR
// end ; end ;
74112: GO 74026
74114: POP
74115: POP
// result := hex ;
74116: LD_ADDR_VAR 0 3
74120: PUSH
74121: LD_VAR 0 8
74125: ST_TO_ADDR
// end ;
74126: LD_VAR 0 3
74130: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74131: LD_INT 0
74133: PPUSH
74134: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74135: LD_VAR 0 1
74139: NOT
74140: PUSH
74141: LD_VAR 0 1
74145: PUSH
74146: LD_INT 21
74148: PUSH
74149: LD_INT 2
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: LD_INT 23
74158: PUSH
74159: LD_INT 2
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: PUSH
74166: EMPTY
74167: LIST
74168: LIST
74169: PPUSH
74170: CALL_OW 69
74174: IN
74175: NOT
74176: OR
74177: IFFALSE 74181
// exit ;
74179: GO 74228
// for i = 1 to 3 do
74181: LD_ADDR_VAR 0 3
74185: PUSH
74186: DOUBLE
74187: LD_INT 1
74189: DEC
74190: ST_TO_ADDR
74191: LD_INT 3
74193: PUSH
74194: FOR_TO
74195: IFFALSE 74226
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74197: LD_VAR 0 1
74201: PPUSH
74202: CALL_OW 250
74206: PPUSH
74207: LD_VAR 0 1
74211: PPUSH
74212: CALL_OW 251
74216: PPUSH
74217: LD_INT 1
74219: PPUSH
74220: CALL_OW 453
74224: GO 74194
74226: POP
74227: POP
// end ;
74228: LD_VAR 0 2
74232: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74233: LD_INT 0
74235: PPUSH
74236: PPUSH
74237: PPUSH
74238: PPUSH
74239: PPUSH
74240: PPUSH
// if not unit or not enemy_unit then
74241: LD_VAR 0 1
74245: NOT
74246: PUSH
74247: LD_VAR 0 2
74251: NOT
74252: OR
74253: IFFALSE 74257
// exit ;
74255: GO 74724
// if GetLives ( i ) < 250 then
74257: LD_VAR 0 4
74261: PPUSH
74262: CALL_OW 256
74266: PUSH
74267: LD_INT 250
74269: LESS
74270: IFFALSE 74283
// begin ComAutodestruct ( i ) ;
74272: LD_VAR 0 4
74276: PPUSH
74277: CALL 74131 0 1
// exit ;
74281: GO 74724
// end ; x := GetX ( enemy_unit ) ;
74283: LD_ADDR_VAR 0 7
74287: PUSH
74288: LD_VAR 0 2
74292: PPUSH
74293: CALL_OW 250
74297: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74298: LD_ADDR_VAR 0 8
74302: PUSH
74303: LD_VAR 0 2
74307: PPUSH
74308: CALL_OW 251
74312: ST_TO_ADDR
// if not x or not y then
74313: LD_VAR 0 7
74317: NOT
74318: PUSH
74319: LD_VAR 0 8
74323: NOT
74324: OR
74325: IFFALSE 74329
// exit ;
74327: GO 74724
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74329: LD_ADDR_VAR 0 6
74333: PUSH
74334: LD_VAR 0 7
74338: PPUSH
74339: LD_INT 0
74341: PPUSH
74342: LD_INT 4
74344: PPUSH
74345: CALL_OW 272
74349: PUSH
74350: LD_VAR 0 8
74354: PPUSH
74355: LD_INT 0
74357: PPUSH
74358: LD_INT 4
74360: PPUSH
74361: CALL_OW 273
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: PUSH
74370: LD_VAR 0 7
74374: PPUSH
74375: LD_INT 1
74377: PPUSH
74378: LD_INT 4
74380: PPUSH
74381: CALL_OW 272
74385: PUSH
74386: LD_VAR 0 8
74390: PPUSH
74391: LD_INT 1
74393: PPUSH
74394: LD_INT 4
74396: PPUSH
74397: CALL_OW 273
74401: PUSH
74402: EMPTY
74403: LIST
74404: LIST
74405: PUSH
74406: LD_VAR 0 7
74410: PPUSH
74411: LD_INT 2
74413: PPUSH
74414: LD_INT 4
74416: PPUSH
74417: CALL_OW 272
74421: PUSH
74422: LD_VAR 0 8
74426: PPUSH
74427: LD_INT 2
74429: PPUSH
74430: LD_INT 4
74432: PPUSH
74433: CALL_OW 273
74437: PUSH
74438: EMPTY
74439: LIST
74440: LIST
74441: PUSH
74442: LD_VAR 0 7
74446: PPUSH
74447: LD_INT 3
74449: PPUSH
74450: LD_INT 4
74452: PPUSH
74453: CALL_OW 272
74457: PUSH
74458: LD_VAR 0 8
74462: PPUSH
74463: LD_INT 3
74465: PPUSH
74466: LD_INT 4
74468: PPUSH
74469: CALL_OW 273
74473: PUSH
74474: EMPTY
74475: LIST
74476: LIST
74477: PUSH
74478: LD_VAR 0 7
74482: PPUSH
74483: LD_INT 4
74485: PPUSH
74486: LD_INT 4
74488: PPUSH
74489: CALL_OW 272
74493: PUSH
74494: LD_VAR 0 8
74498: PPUSH
74499: LD_INT 4
74501: PPUSH
74502: LD_INT 4
74504: PPUSH
74505: CALL_OW 273
74509: PUSH
74510: EMPTY
74511: LIST
74512: LIST
74513: PUSH
74514: LD_VAR 0 7
74518: PPUSH
74519: LD_INT 5
74521: PPUSH
74522: LD_INT 4
74524: PPUSH
74525: CALL_OW 272
74529: PUSH
74530: LD_VAR 0 8
74534: PPUSH
74535: LD_INT 5
74537: PPUSH
74538: LD_INT 4
74540: PPUSH
74541: CALL_OW 273
74545: PUSH
74546: EMPTY
74547: LIST
74548: LIST
74549: PUSH
74550: EMPTY
74551: LIST
74552: LIST
74553: LIST
74554: LIST
74555: LIST
74556: LIST
74557: ST_TO_ADDR
// for i = tmp downto 1 do
74558: LD_ADDR_VAR 0 4
74562: PUSH
74563: DOUBLE
74564: LD_VAR 0 6
74568: INC
74569: ST_TO_ADDR
74570: LD_INT 1
74572: PUSH
74573: FOR_DOWNTO
74574: IFFALSE 74675
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74576: LD_VAR 0 6
74580: PUSH
74581: LD_VAR 0 4
74585: ARRAY
74586: PUSH
74587: LD_INT 1
74589: ARRAY
74590: PPUSH
74591: LD_VAR 0 6
74595: PUSH
74596: LD_VAR 0 4
74600: ARRAY
74601: PUSH
74602: LD_INT 2
74604: ARRAY
74605: PPUSH
74606: CALL_OW 488
74610: NOT
74611: PUSH
74612: LD_VAR 0 6
74616: PUSH
74617: LD_VAR 0 4
74621: ARRAY
74622: PUSH
74623: LD_INT 1
74625: ARRAY
74626: PPUSH
74627: LD_VAR 0 6
74631: PUSH
74632: LD_VAR 0 4
74636: ARRAY
74637: PUSH
74638: LD_INT 2
74640: ARRAY
74641: PPUSH
74642: CALL_OW 428
74646: PUSH
74647: LD_INT 0
74649: NONEQUAL
74650: OR
74651: IFFALSE 74673
// tmp := Delete ( tmp , i ) ;
74653: LD_ADDR_VAR 0 6
74657: PUSH
74658: LD_VAR 0 6
74662: PPUSH
74663: LD_VAR 0 4
74667: PPUSH
74668: CALL_OW 3
74672: ST_TO_ADDR
74673: GO 74573
74675: POP
74676: POP
// j := GetClosestHex ( unit , tmp ) ;
74677: LD_ADDR_VAR 0 5
74681: PUSH
74682: LD_VAR 0 1
74686: PPUSH
74687: LD_VAR 0 6
74691: PPUSH
74692: CALL 73979 0 2
74696: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74697: LD_VAR 0 1
74701: PPUSH
74702: LD_VAR 0 5
74706: PUSH
74707: LD_INT 1
74709: ARRAY
74710: PPUSH
74711: LD_VAR 0 5
74715: PUSH
74716: LD_INT 2
74718: ARRAY
74719: PPUSH
74720: CALL_OW 111
// end ;
74724: LD_VAR 0 3
74728: RET
// export function PrepareApemanSoldier ( ) ; begin
74729: LD_INT 0
74731: PPUSH
// uc_nation := 0 ;
74732: LD_ADDR_OWVAR 21
74736: PUSH
74737: LD_INT 0
74739: ST_TO_ADDR
// hc_sex := sex_male ;
74740: LD_ADDR_OWVAR 27
74744: PUSH
74745: LD_INT 1
74747: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74748: LD_ADDR_OWVAR 28
74752: PUSH
74753: LD_INT 15
74755: ST_TO_ADDR
// hc_gallery :=  ;
74756: LD_ADDR_OWVAR 33
74760: PUSH
74761: LD_STRING 
74763: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74764: LD_ADDR_OWVAR 31
74768: PUSH
74769: LD_INT 0
74771: PPUSH
74772: LD_INT 3
74774: PPUSH
74775: CALL_OW 12
74779: PUSH
74780: LD_INT 0
74782: PPUSH
74783: LD_INT 3
74785: PPUSH
74786: CALL_OW 12
74790: PUSH
74791: LD_INT 0
74793: PUSH
74794: LD_INT 0
74796: PUSH
74797: EMPTY
74798: LIST
74799: LIST
74800: LIST
74801: LIST
74802: ST_TO_ADDR
// end ;
74803: LD_VAR 0 1
74807: RET
// export function PrepareApemanEngineer ( ) ; begin
74808: LD_INT 0
74810: PPUSH
// uc_nation := 0 ;
74811: LD_ADDR_OWVAR 21
74815: PUSH
74816: LD_INT 0
74818: ST_TO_ADDR
// hc_sex := sex_male ;
74819: LD_ADDR_OWVAR 27
74823: PUSH
74824: LD_INT 1
74826: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74827: LD_ADDR_OWVAR 28
74831: PUSH
74832: LD_INT 16
74834: ST_TO_ADDR
// hc_gallery :=  ;
74835: LD_ADDR_OWVAR 33
74839: PUSH
74840: LD_STRING 
74842: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74843: LD_ADDR_OWVAR 31
74847: PUSH
74848: LD_INT 0
74850: PPUSH
74851: LD_INT 3
74853: PPUSH
74854: CALL_OW 12
74858: PUSH
74859: LD_INT 0
74861: PPUSH
74862: LD_INT 3
74864: PPUSH
74865: CALL_OW 12
74869: PUSH
74870: LD_INT 0
74872: PUSH
74873: LD_INT 0
74875: PUSH
74876: EMPTY
74877: LIST
74878: LIST
74879: LIST
74880: LIST
74881: ST_TO_ADDR
// end ;
74882: LD_VAR 0 1
74886: RET
// export function PrepareApeman ( agressivity ) ; begin
74887: LD_INT 0
74889: PPUSH
// uc_side := 0 ;
74890: LD_ADDR_OWVAR 20
74894: PUSH
74895: LD_INT 0
74897: ST_TO_ADDR
// uc_nation := 0 ;
74898: LD_ADDR_OWVAR 21
74902: PUSH
74903: LD_INT 0
74905: ST_TO_ADDR
// hc_sex := sex_male ;
74906: LD_ADDR_OWVAR 27
74910: PUSH
74911: LD_INT 1
74913: ST_TO_ADDR
// hc_class := class_apeman ;
74914: LD_ADDR_OWVAR 28
74918: PUSH
74919: LD_INT 12
74921: ST_TO_ADDR
// hc_gallery :=  ;
74922: LD_ADDR_OWVAR 33
74926: PUSH
74927: LD_STRING 
74929: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74930: LD_ADDR_OWVAR 35
74934: PUSH
74935: LD_VAR 0 1
74939: NEG
74940: PPUSH
74941: LD_VAR 0 1
74945: PPUSH
74946: CALL_OW 12
74950: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74951: LD_ADDR_OWVAR 31
74955: PUSH
74956: LD_INT 0
74958: PPUSH
74959: LD_INT 3
74961: PPUSH
74962: CALL_OW 12
74966: PUSH
74967: LD_INT 0
74969: PPUSH
74970: LD_INT 3
74972: PPUSH
74973: CALL_OW 12
74977: PUSH
74978: LD_INT 0
74980: PUSH
74981: LD_INT 0
74983: PUSH
74984: EMPTY
74985: LIST
74986: LIST
74987: LIST
74988: LIST
74989: ST_TO_ADDR
// end ;
74990: LD_VAR 0 2
74994: RET
// export function PrepareTiger ( agressivity ) ; begin
74995: LD_INT 0
74997: PPUSH
// uc_side := 0 ;
74998: LD_ADDR_OWVAR 20
75002: PUSH
75003: LD_INT 0
75005: ST_TO_ADDR
// uc_nation := 0 ;
75006: LD_ADDR_OWVAR 21
75010: PUSH
75011: LD_INT 0
75013: ST_TO_ADDR
// hc_class := class_tiger ;
75014: LD_ADDR_OWVAR 28
75018: PUSH
75019: LD_INT 14
75021: ST_TO_ADDR
// hc_gallery :=  ;
75022: LD_ADDR_OWVAR 33
75026: PUSH
75027: LD_STRING 
75029: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75030: LD_ADDR_OWVAR 35
75034: PUSH
75035: LD_VAR 0 1
75039: NEG
75040: PPUSH
75041: LD_VAR 0 1
75045: PPUSH
75046: CALL_OW 12
75050: ST_TO_ADDR
// end ;
75051: LD_VAR 0 2
75055: RET
// export function PrepareEnchidna ( ) ; begin
75056: LD_INT 0
75058: PPUSH
// uc_side := 0 ;
75059: LD_ADDR_OWVAR 20
75063: PUSH
75064: LD_INT 0
75066: ST_TO_ADDR
// uc_nation := 0 ;
75067: LD_ADDR_OWVAR 21
75071: PUSH
75072: LD_INT 0
75074: ST_TO_ADDR
// hc_class := class_baggie ;
75075: LD_ADDR_OWVAR 28
75079: PUSH
75080: LD_INT 13
75082: ST_TO_ADDR
// hc_gallery :=  ;
75083: LD_ADDR_OWVAR 33
75087: PUSH
75088: LD_STRING 
75090: ST_TO_ADDR
// end ;
75091: LD_VAR 0 1
75095: RET
// export function PrepareFrog ( ) ; begin
75096: LD_INT 0
75098: PPUSH
// uc_side := 0 ;
75099: LD_ADDR_OWVAR 20
75103: PUSH
75104: LD_INT 0
75106: ST_TO_ADDR
// uc_nation := 0 ;
75107: LD_ADDR_OWVAR 21
75111: PUSH
75112: LD_INT 0
75114: ST_TO_ADDR
// hc_class := class_frog ;
75115: LD_ADDR_OWVAR 28
75119: PUSH
75120: LD_INT 19
75122: ST_TO_ADDR
// hc_gallery :=  ;
75123: LD_ADDR_OWVAR 33
75127: PUSH
75128: LD_STRING 
75130: ST_TO_ADDR
// end ;
75131: LD_VAR 0 1
75135: RET
// export function PrepareFish ( ) ; begin
75136: LD_INT 0
75138: PPUSH
// uc_side := 0 ;
75139: LD_ADDR_OWVAR 20
75143: PUSH
75144: LD_INT 0
75146: ST_TO_ADDR
// uc_nation := 0 ;
75147: LD_ADDR_OWVAR 21
75151: PUSH
75152: LD_INT 0
75154: ST_TO_ADDR
// hc_class := class_fish ;
75155: LD_ADDR_OWVAR 28
75159: PUSH
75160: LD_INT 20
75162: ST_TO_ADDR
// hc_gallery :=  ;
75163: LD_ADDR_OWVAR 33
75167: PUSH
75168: LD_STRING 
75170: ST_TO_ADDR
// end ;
75171: LD_VAR 0 1
75175: RET
// export function PrepareBird ( ) ; begin
75176: LD_INT 0
75178: PPUSH
// uc_side := 0 ;
75179: LD_ADDR_OWVAR 20
75183: PUSH
75184: LD_INT 0
75186: ST_TO_ADDR
// uc_nation := 0 ;
75187: LD_ADDR_OWVAR 21
75191: PUSH
75192: LD_INT 0
75194: ST_TO_ADDR
// hc_class := class_phororhacos ;
75195: LD_ADDR_OWVAR 28
75199: PUSH
75200: LD_INT 18
75202: ST_TO_ADDR
// hc_gallery :=  ;
75203: LD_ADDR_OWVAR 33
75207: PUSH
75208: LD_STRING 
75210: ST_TO_ADDR
// end ;
75211: LD_VAR 0 1
75215: RET
// export function PrepareHorse ( ) ; begin
75216: LD_INT 0
75218: PPUSH
// uc_side := 0 ;
75219: LD_ADDR_OWVAR 20
75223: PUSH
75224: LD_INT 0
75226: ST_TO_ADDR
// uc_nation := 0 ;
75227: LD_ADDR_OWVAR 21
75231: PUSH
75232: LD_INT 0
75234: ST_TO_ADDR
// hc_class := class_horse ;
75235: LD_ADDR_OWVAR 28
75239: PUSH
75240: LD_INT 21
75242: ST_TO_ADDR
// hc_gallery :=  ;
75243: LD_ADDR_OWVAR 33
75247: PUSH
75248: LD_STRING 
75250: ST_TO_ADDR
// end ;
75251: LD_VAR 0 1
75255: RET
// export function PrepareMastodont ( ) ; begin
75256: LD_INT 0
75258: PPUSH
// uc_side := 0 ;
75259: LD_ADDR_OWVAR 20
75263: PUSH
75264: LD_INT 0
75266: ST_TO_ADDR
// uc_nation := 0 ;
75267: LD_ADDR_OWVAR 21
75271: PUSH
75272: LD_INT 0
75274: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75275: LD_ADDR_OWVAR 37
75279: PUSH
75280: LD_INT 31
75282: ST_TO_ADDR
// vc_control := control_rider ;
75283: LD_ADDR_OWVAR 38
75287: PUSH
75288: LD_INT 4
75290: ST_TO_ADDR
// end ;
75291: LD_VAR 0 1
75295: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75296: LD_INT 0
75298: PPUSH
75299: PPUSH
75300: PPUSH
// uc_side = 0 ;
75301: LD_ADDR_OWVAR 20
75305: PUSH
75306: LD_INT 0
75308: ST_TO_ADDR
// uc_nation = 0 ;
75309: LD_ADDR_OWVAR 21
75313: PUSH
75314: LD_INT 0
75316: ST_TO_ADDR
// InitHc_All ( ) ;
75317: CALL_OW 584
// InitVc ;
75321: CALL_OW 20
// if mastodonts then
75325: LD_VAR 0 6
75329: IFFALSE 75396
// for i = 1 to mastodonts do
75331: LD_ADDR_VAR 0 11
75335: PUSH
75336: DOUBLE
75337: LD_INT 1
75339: DEC
75340: ST_TO_ADDR
75341: LD_VAR 0 6
75345: PUSH
75346: FOR_TO
75347: IFFALSE 75394
// begin vc_chassis := 31 ;
75349: LD_ADDR_OWVAR 37
75353: PUSH
75354: LD_INT 31
75356: ST_TO_ADDR
// vc_control := control_rider ;
75357: LD_ADDR_OWVAR 38
75361: PUSH
75362: LD_INT 4
75364: ST_TO_ADDR
// animal := CreateVehicle ;
75365: LD_ADDR_VAR 0 12
75369: PUSH
75370: CALL_OW 45
75374: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75375: LD_VAR 0 12
75379: PPUSH
75380: LD_VAR 0 8
75384: PPUSH
75385: LD_INT 0
75387: PPUSH
75388: CALL 77524 0 3
// end ;
75392: GO 75346
75394: POP
75395: POP
// if horses then
75396: LD_VAR 0 5
75400: IFFALSE 75467
// for i = 1 to horses do
75402: LD_ADDR_VAR 0 11
75406: PUSH
75407: DOUBLE
75408: LD_INT 1
75410: DEC
75411: ST_TO_ADDR
75412: LD_VAR 0 5
75416: PUSH
75417: FOR_TO
75418: IFFALSE 75465
// begin hc_class := 21 ;
75420: LD_ADDR_OWVAR 28
75424: PUSH
75425: LD_INT 21
75427: ST_TO_ADDR
// hc_gallery :=  ;
75428: LD_ADDR_OWVAR 33
75432: PUSH
75433: LD_STRING 
75435: ST_TO_ADDR
// animal := CreateHuman ;
75436: LD_ADDR_VAR 0 12
75440: PUSH
75441: CALL_OW 44
75445: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75446: LD_VAR 0 12
75450: PPUSH
75451: LD_VAR 0 8
75455: PPUSH
75456: LD_INT 0
75458: PPUSH
75459: CALL 77524 0 3
// end ;
75463: GO 75417
75465: POP
75466: POP
// if birds then
75467: LD_VAR 0 1
75471: IFFALSE 75538
// for i = 1 to birds do
75473: LD_ADDR_VAR 0 11
75477: PUSH
75478: DOUBLE
75479: LD_INT 1
75481: DEC
75482: ST_TO_ADDR
75483: LD_VAR 0 1
75487: PUSH
75488: FOR_TO
75489: IFFALSE 75536
// begin hc_class := 18 ;
75491: LD_ADDR_OWVAR 28
75495: PUSH
75496: LD_INT 18
75498: ST_TO_ADDR
// hc_gallery =  ;
75499: LD_ADDR_OWVAR 33
75503: PUSH
75504: LD_STRING 
75506: ST_TO_ADDR
// animal := CreateHuman ;
75507: LD_ADDR_VAR 0 12
75511: PUSH
75512: CALL_OW 44
75516: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75517: LD_VAR 0 12
75521: PPUSH
75522: LD_VAR 0 8
75526: PPUSH
75527: LD_INT 0
75529: PPUSH
75530: CALL 77524 0 3
// end ;
75534: GO 75488
75536: POP
75537: POP
// if tigers then
75538: LD_VAR 0 2
75542: IFFALSE 75626
// for i = 1 to tigers do
75544: LD_ADDR_VAR 0 11
75548: PUSH
75549: DOUBLE
75550: LD_INT 1
75552: DEC
75553: ST_TO_ADDR
75554: LD_VAR 0 2
75558: PUSH
75559: FOR_TO
75560: IFFALSE 75624
// begin hc_class = class_tiger ;
75562: LD_ADDR_OWVAR 28
75566: PUSH
75567: LD_INT 14
75569: ST_TO_ADDR
// hc_gallery =  ;
75570: LD_ADDR_OWVAR 33
75574: PUSH
75575: LD_STRING 
75577: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75578: LD_ADDR_OWVAR 35
75582: PUSH
75583: LD_INT 7
75585: NEG
75586: PPUSH
75587: LD_INT 7
75589: PPUSH
75590: CALL_OW 12
75594: ST_TO_ADDR
// animal := CreateHuman ;
75595: LD_ADDR_VAR 0 12
75599: PUSH
75600: CALL_OW 44
75604: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75605: LD_VAR 0 12
75609: PPUSH
75610: LD_VAR 0 8
75614: PPUSH
75615: LD_INT 0
75617: PPUSH
75618: CALL 77524 0 3
// end ;
75622: GO 75559
75624: POP
75625: POP
// if apemans then
75626: LD_VAR 0 3
75630: IFFALSE 75753
// for i = 1 to apemans do
75632: LD_ADDR_VAR 0 11
75636: PUSH
75637: DOUBLE
75638: LD_INT 1
75640: DEC
75641: ST_TO_ADDR
75642: LD_VAR 0 3
75646: PUSH
75647: FOR_TO
75648: IFFALSE 75751
// begin hc_class = class_apeman ;
75650: LD_ADDR_OWVAR 28
75654: PUSH
75655: LD_INT 12
75657: ST_TO_ADDR
// hc_gallery =  ;
75658: LD_ADDR_OWVAR 33
75662: PUSH
75663: LD_STRING 
75665: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75666: LD_ADDR_OWVAR 35
75670: PUSH
75671: LD_INT 2
75673: NEG
75674: PPUSH
75675: LD_INT 2
75677: PPUSH
75678: CALL_OW 12
75682: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75683: LD_ADDR_OWVAR 31
75687: PUSH
75688: LD_INT 1
75690: PPUSH
75691: LD_INT 3
75693: PPUSH
75694: CALL_OW 12
75698: PUSH
75699: LD_INT 1
75701: PPUSH
75702: LD_INT 3
75704: PPUSH
75705: CALL_OW 12
75709: PUSH
75710: LD_INT 0
75712: PUSH
75713: LD_INT 0
75715: PUSH
75716: EMPTY
75717: LIST
75718: LIST
75719: LIST
75720: LIST
75721: ST_TO_ADDR
// animal := CreateHuman ;
75722: LD_ADDR_VAR 0 12
75726: PUSH
75727: CALL_OW 44
75731: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75732: LD_VAR 0 12
75736: PPUSH
75737: LD_VAR 0 8
75741: PPUSH
75742: LD_INT 0
75744: PPUSH
75745: CALL 77524 0 3
// end ;
75749: GO 75647
75751: POP
75752: POP
// if enchidnas then
75753: LD_VAR 0 4
75757: IFFALSE 75824
// for i = 1 to enchidnas do
75759: LD_ADDR_VAR 0 11
75763: PUSH
75764: DOUBLE
75765: LD_INT 1
75767: DEC
75768: ST_TO_ADDR
75769: LD_VAR 0 4
75773: PUSH
75774: FOR_TO
75775: IFFALSE 75822
// begin hc_class = 13 ;
75777: LD_ADDR_OWVAR 28
75781: PUSH
75782: LD_INT 13
75784: ST_TO_ADDR
// hc_gallery =  ;
75785: LD_ADDR_OWVAR 33
75789: PUSH
75790: LD_STRING 
75792: ST_TO_ADDR
// animal := CreateHuman ;
75793: LD_ADDR_VAR 0 12
75797: PUSH
75798: CALL_OW 44
75802: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75803: LD_VAR 0 12
75807: PPUSH
75808: LD_VAR 0 8
75812: PPUSH
75813: LD_INT 0
75815: PPUSH
75816: CALL 77524 0 3
// end ;
75820: GO 75774
75822: POP
75823: POP
// if fishes then
75824: LD_VAR 0 7
75828: IFFALSE 75895
// for i = 1 to fishes do
75830: LD_ADDR_VAR 0 11
75834: PUSH
75835: DOUBLE
75836: LD_INT 1
75838: DEC
75839: ST_TO_ADDR
75840: LD_VAR 0 7
75844: PUSH
75845: FOR_TO
75846: IFFALSE 75893
// begin hc_class = 20 ;
75848: LD_ADDR_OWVAR 28
75852: PUSH
75853: LD_INT 20
75855: ST_TO_ADDR
// hc_gallery =  ;
75856: LD_ADDR_OWVAR 33
75860: PUSH
75861: LD_STRING 
75863: ST_TO_ADDR
// animal := CreateHuman ;
75864: LD_ADDR_VAR 0 12
75868: PUSH
75869: CALL_OW 44
75873: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75874: LD_VAR 0 12
75878: PPUSH
75879: LD_VAR 0 9
75883: PPUSH
75884: LD_INT 0
75886: PPUSH
75887: CALL 77524 0 3
// end ;
75891: GO 75845
75893: POP
75894: POP
// end ;
75895: LD_VAR 0 10
75899: RET
// export function WantHeal ( sci , unit ) ; begin
75900: LD_INT 0
75902: PPUSH
// if GetTaskList ( sci ) > 0 then
75903: LD_VAR 0 1
75907: PPUSH
75908: CALL_OW 437
75912: PUSH
75913: LD_INT 0
75915: GREATER
75916: IFFALSE 75986
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75918: LD_VAR 0 1
75922: PPUSH
75923: CALL_OW 437
75927: PUSH
75928: LD_INT 1
75930: ARRAY
75931: PUSH
75932: LD_INT 1
75934: ARRAY
75935: PUSH
75936: LD_STRING l
75938: EQUAL
75939: PUSH
75940: LD_VAR 0 1
75944: PPUSH
75945: CALL_OW 437
75949: PUSH
75950: LD_INT 1
75952: ARRAY
75953: PUSH
75954: LD_INT 4
75956: ARRAY
75957: PUSH
75958: LD_VAR 0 2
75962: EQUAL
75963: AND
75964: IFFALSE 75976
// result := true else
75966: LD_ADDR_VAR 0 3
75970: PUSH
75971: LD_INT 1
75973: ST_TO_ADDR
75974: GO 75984
// result := false ;
75976: LD_ADDR_VAR 0 3
75980: PUSH
75981: LD_INT 0
75983: ST_TO_ADDR
// end else
75984: GO 75994
// result := false ;
75986: LD_ADDR_VAR 0 3
75990: PUSH
75991: LD_INT 0
75993: ST_TO_ADDR
// end ;
75994: LD_VAR 0 3
75998: RET
// export function HealTarget ( sci ) ; begin
75999: LD_INT 0
76001: PPUSH
// if not sci then
76002: LD_VAR 0 1
76006: NOT
76007: IFFALSE 76011
// exit ;
76009: GO 76076
// result := 0 ;
76011: LD_ADDR_VAR 0 2
76015: PUSH
76016: LD_INT 0
76018: ST_TO_ADDR
// if GetTaskList ( sci ) then
76019: LD_VAR 0 1
76023: PPUSH
76024: CALL_OW 437
76028: IFFALSE 76076
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76030: LD_VAR 0 1
76034: PPUSH
76035: CALL_OW 437
76039: PUSH
76040: LD_INT 1
76042: ARRAY
76043: PUSH
76044: LD_INT 1
76046: ARRAY
76047: PUSH
76048: LD_STRING l
76050: EQUAL
76051: IFFALSE 76076
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76053: LD_ADDR_VAR 0 2
76057: PUSH
76058: LD_VAR 0 1
76062: PPUSH
76063: CALL_OW 437
76067: PUSH
76068: LD_INT 1
76070: ARRAY
76071: PUSH
76072: LD_INT 4
76074: ARRAY
76075: ST_TO_ADDR
// end ;
76076: LD_VAR 0 2
76080: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76081: LD_INT 0
76083: PPUSH
76084: PPUSH
76085: PPUSH
76086: PPUSH
// if not base_units then
76087: LD_VAR 0 1
76091: NOT
76092: IFFALSE 76096
// exit ;
76094: GO 76183
// result := false ;
76096: LD_ADDR_VAR 0 2
76100: PUSH
76101: LD_INT 0
76103: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76104: LD_ADDR_VAR 0 5
76108: PUSH
76109: LD_VAR 0 1
76113: PPUSH
76114: LD_INT 21
76116: PUSH
76117: LD_INT 3
76119: PUSH
76120: EMPTY
76121: LIST
76122: LIST
76123: PPUSH
76124: CALL_OW 72
76128: ST_TO_ADDR
// if not tmp then
76129: LD_VAR 0 5
76133: NOT
76134: IFFALSE 76138
// exit ;
76136: GO 76183
// for i in tmp do
76138: LD_ADDR_VAR 0 3
76142: PUSH
76143: LD_VAR 0 5
76147: PUSH
76148: FOR_IN
76149: IFFALSE 76181
// begin result := EnemyInRange ( i , 22 ) ;
76151: LD_ADDR_VAR 0 2
76155: PUSH
76156: LD_VAR 0 3
76160: PPUSH
76161: LD_INT 22
76163: PPUSH
76164: CALL 73781 0 2
76168: ST_TO_ADDR
// if result then
76169: LD_VAR 0 2
76173: IFFALSE 76179
// exit ;
76175: POP
76176: POP
76177: GO 76183
// end ;
76179: GO 76148
76181: POP
76182: POP
// end ;
76183: LD_VAR 0 2
76187: RET
// export function FilterByTag ( units , tag ) ; begin
76188: LD_INT 0
76190: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76191: LD_ADDR_VAR 0 3
76195: PUSH
76196: LD_VAR 0 1
76200: PPUSH
76201: LD_INT 120
76203: PUSH
76204: LD_VAR 0 2
76208: PUSH
76209: EMPTY
76210: LIST
76211: LIST
76212: PPUSH
76213: CALL_OW 72
76217: ST_TO_ADDR
// end ;
76218: LD_VAR 0 3
76222: RET
// export function IsDriver ( un ) ; begin
76223: LD_INT 0
76225: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76226: LD_ADDR_VAR 0 2
76230: PUSH
76231: LD_VAR 0 1
76235: PUSH
76236: LD_INT 55
76238: PUSH
76239: EMPTY
76240: LIST
76241: PPUSH
76242: CALL_OW 69
76246: IN
76247: ST_TO_ADDR
// end ;
76248: LD_VAR 0 2
76252: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76253: LD_INT 0
76255: PPUSH
76256: PPUSH
// list := [ ] ;
76257: LD_ADDR_VAR 0 5
76261: PUSH
76262: EMPTY
76263: ST_TO_ADDR
// case d of 0 :
76264: LD_VAR 0 3
76268: PUSH
76269: LD_INT 0
76271: DOUBLE
76272: EQUAL
76273: IFTRUE 76277
76275: GO 76410
76277: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76278: LD_ADDR_VAR 0 5
76282: PUSH
76283: LD_VAR 0 1
76287: PUSH
76288: LD_INT 4
76290: MINUS
76291: PUSH
76292: LD_VAR 0 2
76296: PUSH
76297: LD_INT 4
76299: MINUS
76300: PUSH
76301: LD_INT 2
76303: PUSH
76304: EMPTY
76305: LIST
76306: LIST
76307: LIST
76308: PUSH
76309: LD_VAR 0 1
76313: PUSH
76314: LD_INT 3
76316: MINUS
76317: PUSH
76318: LD_VAR 0 2
76322: PUSH
76323: LD_INT 1
76325: PUSH
76326: EMPTY
76327: LIST
76328: LIST
76329: LIST
76330: PUSH
76331: LD_VAR 0 1
76335: PUSH
76336: LD_INT 4
76338: PLUS
76339: PUSH
76340: LD_VAR 0 2
76344: PUSH
76345: LD_INT 4
76347: PUSH
76348: EMPTY
76349: LIST
76350: LIST
76351: LIST
76352: PUSH
76353: LD_VAR 0 1
76357: PUSH
76358: LD_INT 3
76360: PLUS
76361: PUSH
76362: LD_VAR 0 2
76366: PUSH
76367: LD_INT 3
76369: PLUS
76370: PUSH
76371: LD_INT 5
76373: PUSH
76374: EMPTY
76375: LIST
76376: LIST
76377: LIST
76378: PUSH
76379: LD_VAR 0 1
76383: PUSH
76384: LD_VAR 0 2
76388: PUSH
76389: LD_INT 4
76391: PLUS
76392: PUSH
76393: LD_INT 0
76395: PUSH
76396: EMPTY
76397: LIST
76398: LIST
76399: LIST
76400: PUSH
76401: EMPTY
76402: LIST
76403: LIST
76404: LIST
76405: LIST
76406: LIST
76407: ST_TO_ADDR
// end ; 1 :
76408: GO 77108
76410: LD_INT 1
76412: DOUBLE
76413: EQUAL
76414: IFTRUE 76418
76416: GO 76551
76418: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76419: LD_ADDR_VAR 0 5
76423: PUSH
76424: LD_VAR 0 1
76428: PUSH
76429: LD_VAR 0 2
76433: PUSH
76434: LD_INT 4
76436: MINUS
76437: PUSH
76438: LD_INT 3
76440: PUSH
76441: EMPTY
76442: LIST
76443: LIST
76444: LIST
76445: PUSH
76446: LD_VAR 0 1
76450: PUSH
76451: LD_INT 3
76453: MINUS
76454: PUSH
76455: LD_VAR 0 2
76459: PUSH
76460: LD_INT 3
76462: MINUS
76463: PUSH
76464: LD_INT 2
76466: PUSH
76467: EMPTY
76468: LIST
76469: LIST
76470: LIST
76471: PUSH
76472: LD_VAR 0 1
76476: PUSH
76477: LD_INT 4
76479: MINUS
76480: PUSH
76481: LD_VAR 0 2
76485: PUSH
76486: LD_INT 1
76488: PUSH
76489: EMPTY
76490: LIST
76491: LIST
76492: LIST
76493: PUSH
76494: LD_VAR 0 1
76498: PUSH
76499: LD_VAR 0 2
76503: PUSH
76504: LD_INT 3
76506: PLUS
76507: PUSH
76508: LD_INT 0
76510: PUSH
76511: EMPTY
76512: LIST
76513: LIST
76514: LIST
76515: PUSH
76516: LD_VAR 0 1
76520: PUSH
76521: LD_INT 4
76523: PLUS
76524: PUSH
76525: LD_VAR 0 2
76529: PUSH
76530: LD_INT 4
76532: PLUS
76533: PUSH
76534: LD_INT 5
76536: PUSH
76537: EMPTY
76538: LIST
76539: LIST
76540: LIST
76541: PUSH
76542: EMPTY
76543: LIST
76544: LIST
76545: LIST
76546: LIST
76547: LIST
76548: ST_TO_ADDR
// end ; 2 :
76549: GO 77108
76551: LD_INT 2
76553: DOUBLE
76554: EQUAL
76555: IFTRUE 76559
76557: GO 76688
76559: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76560: LD_ADDR_VAR 0 5
76564: PUSH
76565: LD_VAR 0 1
76569: PUSH
76570: LD_VAR 0 2
76574: PUSH
76575: LD_INT 3
76577: MINUS
76578: PUSH
76579: LD_INT 3
76581: PUSH
76582: EMPTY
76583: LIST
76584: LIST
76585: LIST
76586: PUSH
76587: LD_VAR 0 1
76591: PUSH
76592: LD_INT 4
76594: PLUS
76595: PUSH
76596: LD_VAR 0 2
76600: PUSH
76601: LD_INT 4
76603: PUSH
76604: EMPTY
76605: LIST
76606: LIST
76607: LIST
76608: PUSH
76609: LD_VAR 0 1
76613: PUSH
76614: LD_VAR 0 2
76618: PUSH
76619: LD_INT 4
76621: PLUS
76622: PUSH
76623: LD_INT 0
76625: PUSH
76626: EMPTY
76627: LIST
76628: LIST
76629: LIST
76630: PUSH
76631: LD_VAR 0 1
76635: PUSH
76636: LD_INT 3
76638: MINUS
76639: PUSH
76640: LD_VAR 0 2
76644: PUSH
76645: LD_INT 1
76647: PUSH
76648: EMPTY
76649: LIST
76650: LIST
76651: LIST
76652: PUSH
76653: LD_VAR 0 1
76657: PUSH
76658: LD_INT 4
76660: MINUS
76661: PUSH
76662: LD_VAR 0 2
76666: PUSH
76667: LD_INT 4
76669: MINUS
76670: PUSH
76671: LD_INT 2
76673: PUSH
76674: EMPTY
76675: LIST
76676: LIST
76677: LIST
76678: PUSH
76679: EMPTY
76680: LIST
76681: LIST
76682: LIST
76683: LIST
76684: LIST
76685: ST_TO_ADDR
// end ; 3 :
76686: GO 77108
76688: LD_INT 3
76690: DOUBLE
76691: EQUAL
76692: IFTRUE 76696
76694: GO 76829
76696: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76697: LD_ADDR_VAR 0 5
76701: PUSH
76702: LD_VAR 0 1
76706: PUSH
76707: LD_INT 3
76709: PLUS
76710: PUSH
76711: LD_VAR 0 2
76715: PUSH
76716: LD_INT 4
76718: PUSH
76719: EMPTY
76720: LIST
76721: LIST
76722: LIST
76723: PUSH
76724: LD_VAR 0 1
76728: PUSH
76729: LD_INT 4
76731: PLUS
76732: PUSH
76733: LD_VAR 0 2
76737: PUSH
76738: LD_INT 4
76740: PLUS
76741: PUSH
76742: LD_INT 5
76744: PUSH
76745: EMPTY
76746: LIST
76747: LIST
76748: LIST
76749: PUSH
76750: LD_VAR 0 1
76754: PUSH
76755: LD_INT 4
76757: MINUS
76758: PUSH
76759: LD_VAR 0 2
76763: PUSH
76764: LD_INT 1
76766: PUSH
76767: EMPTY
76768: LIST
76769: LIST
76770: LIST
76771: PUSH
76772: LD_VAR 0 1
76776: PUSH
76777: LD_VAR 0 2
76781: PUSH
76782: LD_INT 4
76784: MINUS
76785: PUSH
76786: LD_INT 3
76788: PUSH
76789: EMPTY
76790: LIST
76791: LIST
76792: LIST
76793: PUSH
76794: LD_VAR 0 1
76798: PUSH
76799: LD_INT 3
76801: MINUS
76802: PUSH
76803: LD_VAR 0 2
76807: PUSH
76808: LD_INT 3
76810: MINUS
76811: PUSH
76812: LD_INT 2
76814: PUSH
76815: EMPTY
76816: LIST
76817: LIST
76818: LIST
76819: PUSH
76820: EMPTY
76821: LIST
76822: LIST
76823: LIST
76824: LIST
76825: LIST
76826: ST_TO_ADDR
// end ; 4 :
76827: GO 77108
76829: LD_INT 4
76831: DOUBLE
76832: EQUAL
76833: IFTRUE 76837
76835: GO 76970
76837: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76838: LD_ADDR_VAR 0 5
76842: PUSH
76843: LD_VAR 0 1
76847: PUSH
76848: LD_VAR 0 2
76852: PUSH
76853: LD_INT 4
76855: PLUS
76856: PUSH
76857: LD_INT 0
76859: PUSH
76860: EMPTY
76861: LIST
76862: LIST
76863: LIST
76864: PUSH
76865: LD_VAR 0 1
76869: PUSH
76870: LD_INT 3
76872: PLUS
76873: PUSH
76874: LD_VAR 0 2
76878: PUSH
76879: LD_INT 3
76881: PLUS
76882: PUSH
76883: LD_INT 5
76885: PUSH
76886: EMPTY
76887: LIST
76888: LIST
76889: LIST
76890: PUSH
76891: LD_VAR 0 1
76895: PUSH
76896: LD_INT 4
76898: PLUS
76899: PUSH
76900: LD_VAR 0 2
76904: PUSH
76905: LD_INT 4
76907: PUSH
76908: EMPTY
76909: LIST
76910: LIST
76911: LIST
76912: PUSH
76913: LD_VAR 0 1
76917: PUSH
76918: LD_VAR 0 2
76922: PUSH
76923: LD_INT 3
76925: MINUS
76926: PUSH
76927: LD_INT 3
76929: PUSH
76930: EMPTY
76931: LIST
76932: LIST
76933: LIST
76934: PUSH
76935: LD_VAR 0 1
76939: PUSH
76940: LD_INT 4
76942: MINUS
76943: PUSH
76944: LD_VAR 0 2
76948: PUSH
76949: LD_INT 4
76951: MINUS
76952: PUSH
76953: LD_INT 2
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: LIST
76960: PUSH
76961: EMPTY
76962: LIST
76963: LIST
76964: LIST
76965: LIST
76966: LIST
76967: ST_TO_ADDR
// end ; 5 :
76968: GO 77108
76970: LD_INT 5
76972: DOUBLE
76973: EQUAL
76974: IFTRUE 76978
76976: GO 77107
76978: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76979: LD_ADDR_VAR 0 5
76983: PUSH
76984: LD_VAR 0 1
76988: PUSH
76989: LD_INT 4
76991: MINUS
76992: PUSH
76993: LD_VAR 0 2
76997: PUSH
76998: LD_INT 1
77000: PUSH
77001: EMPTY
77002: LIST
77003: LIST
77004: LIST
77005: PUSH
77006: LD_VAR 0 1
77010: PUSH
77011: LD_VAR 0 2
77015: PUSH
77016: LD_INT 4
77018: MINUS
77019: PUSH
77020: LD_INT 3
77022: PUSH
77023: EMPTY
77024: LIST
77025: LIST
77026: LIST
77027: PUSH
77028: LD_VAR 0 1
77032: PUSH
77033: LD_INT 4
77035: PLUS
77036: PUSH
77037: LD_VAR 0 2
77041: PUSH
77042: LD_INT 4
77044: PLUS
77045: PUSH
77046: LD_INT 5
77048: PUSH
77049: EMPTY
77050: LIST
77051: LIST
77052: LIST
77053: PUSH
77054: LD_VAR 0 1
77058: PUSH
77059: LD_INT 3
77061: PLUS
77062: PUSH
77063: LD_VAR 0 2
77067: PUSH
77068: LD_INT 4
77070: PUSH
77071: EMPTY
77072: LIST
77073: LIST
77074: LIST
77075: PUSH
77076: LD_VAR 0 1
77080: PUSH
77081: LD_VAR 0 2
77085: PUSH
77086: LD_INT 3
77088: PLUS
77089: PUSH
77090: LD_INT 0
77092: PUSH
77093: EMPTY
77094: LIST
77095: LIST
77096: LIST
77097: PUSH
77098: EMPTY
77099: LIST
77100: LIST
77101: LIST
77102: LIST
77103: LIST
77104: ST_TO_ADDR
// end ; end ;
77105: GO 77108
77107: POP
// result := list ;
77108: LD_ADDR_VAR 0 4
77112: PUSH
77113: LD_VAR 0 5
77117: ST_TO_ADDR
// end ;
77118: LD_VAR 0 4
77122: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77123: LD_INT 0
77125: PPUSH
77126: PPUSH
77127: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77128: LD_VAR 0 1
77132: NOT
77133: PUSH
77134: LD_VAR 0 2
77138: PUSH
77139: LD_INT 1
77141: PUSH
77142: LD_INT 2
77144: PUSH
77145: LD_INT 3
77147: PUSH
77148: LD_INT 4
77150: PUSH
77151: EMPTY
77152: LIST
77153: LIST
77154: LIST
77155: LIST
77156: IN
77157: NOT
77158: OR
77159: IFFALSE 77163
// exit ;
77161: GO 77246
// tmp := [ ] ;
77163: LD_ADDR_VAR 0 5
77167: PUSH
77168: EMPTY
77169: ST_TO_ADDR
// for i in units do
77170: LD_ADDR_VAR 0 4
77174: PUSH
77175: LD_VAR 0 1
77179: PUSH
77180: FOR_IN
77181: IFFALSE 77215
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77183: LD_ADDR_VAR 0 5
77187: PUSH
77188: LD_VAR 0 5
77192: PPUSH
77193: LD_VAR 0 4
77197: PPUSH
77198: LD_VAR 0 2
77202: PPUSH
77203: CALL_OW 259
77207: PPUSH
77208: CALL 78619 0 2
77212: ST_TO_ADDR
77213: GO 77180
77215: POP
77216: POP
// if not tmp then
77217: LD_VAR 0 5
77221: NOT
77222: IFFALSE 77226
// exit ;
77224: GO 77246
// result := SortListByListDesc ( units , tmp ) ;
77226: LD_ADDR_VAR 0 3
77230: PUSH
77231: LD_VAR 0 1
77235: PPUSH
77236: LD_VAR 0 5
77240: PPUSH
77241: CALL_OW 77
77245: ST_TO_ADDR
// end ;
77246: LD_VAR 0 3
77250: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77251: LD_INT 0
77253: PPUSH
77254: PPUSH
77255: PPUSH
// result := false ;
77256: LD_ADDR_VAR 0 3
77260: PUSH
77261: LD_INT 0
77263: ST_TO_ADDR
// if not building then
77264: LD_VAR 0 2
77268: NOT
77269: IFFALSE 77273
// exit ;
77271: GO 77411
// x := GetX ( building ) ;
77273: LD_ADDR_VAR 0 4
77277: PUSH
77278: LD_VAR 0 2
77282: PPUSH
77283: CALL_OW 250
77287: ST_TO_ADDR
// y := GetY ( building ) ;
77288: LD_ADDR_VAR 0 5
77292: PUSH
77293: LD_VAR 0 2
77297: PPUSH
77298: CALL_OW 251
77302: ST_TO_ADDR
// if not x or not y then
77303: LD_VAR 0 4
77307: NOT
77308: PUSH
77309: LD_VAR 0 5
77313: NOT
77314: OR
77315: IFFALSE 77319
// exit ;
77317: GO 77411
// if GetTaskList ( unit ) then
77319: LD_VAR 0 1
77323: PPUSH
77324: CALL_OW 437
77328: IFFALSE 77411
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77330: LD_STRING e
77332: PUSH
77333: LD_VAR 0 1
77337: PPUSH
77338: CALL_OW 437
77342: PUSH
77343: LD_INT 1
77345: ARRAY
77346: PUSH
77347: LD_INT 1
77349: ARRAY
77350: EQUAL
77351: PUSH
77352: LD_VAR 0 4
77356: PUSH
77357: LD_VAR 0 1
77361: PPUSH
77362: CALL_OW 437
77366: PUSH
77367: LD_INT 1
77369: ARRAY
77370: PUSH
77371: LD_INT 2
77373: ARRAY
77374: EQUAL
77375: AND
77376: PUSH
77377: LD_VAR 0 5
77381: PUSH
77382: LD_VAR 0 1
77386: PPUSH
77387: CALL_OW 437
77391: PUSH
77392: LD_INT 1
77394: ARRAY
77395: PUSH
77396: LD_INT 3
77398: ARRAY
77399: EQUAL
77400: AND
77401: IFFALSE 77411
// result := true end ;
77403: LD_ADDR_VAR 0 3
77407: PUSH
77408: LD_INT 1
77410: ST_TO_ADDR
// end ;
77411: LD_VAR 0 3
77415: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77416: LD_INT 0
77418: PPUSH
// result := false ;
77419: LD_ADDR_VAR 0 4
77423: PUSH
77424: LD_INT 0
77426: ST_TO_ADDR
// if GetTaskList ( unit ) then
77427: LD_VAR 0 1
77431: PPUSH
77432: CALL_OW 437
77436: IFFALSE 77519
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77438: LD_STRING M
77440: PUSH
77441: LD_VAR 0 1
77445: PPUSH
77446: CALL_OW 437
77450: PUSH
77451: LD_INT 1
77453: ARRAY
77454: PUSH
77455: LD_INT 1
77457: ARRAY
77458: EQUAL
77459: PUSH
77460: LD_VAR 0 2
77464: PUSH
77465: LD_VAR 0 1
77469: PPUSH
77470: CALL_OW 437
77474: PUSH
77475: LD_INT 1
77477: ARRAY
77478: PUSH
77479: LD_INT 2
77481: ARRAY
77482: EQUAL
77483: AND
77484: PUSH
77485: LD_VAR 0 3
77489: PUSH
77490: LD_VAR 0 1
77494: PPUSH
77495: CALL_OW 437
77499: PUSH
77500: LD_INT 1
77502: ARRAY
77503: PUSH
77504: LD_INT 3
77506: ARRAY
77507: EQUAL
77508: AND
77509: IFFALSE 77519
// result := true ;
77511: LD_ADDR_VAR 0 4
77515: PUSH
77516: LD_INT 1
77518: ST_TO_ADDR
// end ; end ;
77519: LD_VAR 0 4
77523: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77524: LD_INT 0
77526: PPUSH
77527: PPUSH
77528: PPUSH
77529: PPUSH
// if not unit or not area then
77530: LD_VAR 0 1
77534: NOT
77535: PUSH
77536: LD_VAR 0 2
77540: NOT
77541: OR
77542: IFFALSE 77546
// exit ;
77544: GO 77722
// tmp := AreaToList ( area , i ) ;
77546: LD_ADDR_VAR 0 6
77550: PUSH
77551: LD_VAR 0 2
77555: PPUSH
77556: LD_VAR 0 5
77560: PPUSH
77561: CALL_OW 517
77565: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77566: LD_ADDR_VAR 0 5
77570: PUSH
77571: DOUBLE
77572: LD_INT 1
77574: DEC
77575: ST_TO_ADDR
77576: LD_VAR 0 6
77580: PUSH
77581: LD_INT 1
77583: ARRAY
77584: PUSH
77585: FOR_TO
77586: IFFALSE 77720
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77588: LD_ADDR_VAR 0 7
77592: PUSH
77593: LD_VAR 0 6
77597: PUSH
77598: LD_INT 1
77600: ARRAY
77601: PUSH
77602: LD_VAR 0 5
77606: ARRAY
77607: PUSH
77608: LD_VAR 0 6
77612: PUSH
77613: LD_INT 2
77615: ARRAY
77616: PUSH
77617: LD_VAR 0 5
77621: ARRAY
77622: PUSH
77623: EMPTY
77624: LIST
77625: LIST
77626: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77627: LD_INT 92
77629: PUSH
77630: LD_VAR 0 7
77634: PUSH
77635: LD_INT 1
77637: ARRAY
77638: PUSH
77639: LD_VAR 0 7
77643: PUSH
77644: LD_INT 2
77646: ARRAY
77647: PUSH
77648: LD_INT 2
77650: PUSH
77651: EMPTY
77652: LIST
77653: LIST
77654: LIST
77655: LIST
77656: PPUSH
77657: CALL_OW 69
77661: PUSH
77662: LD_INT 0
77664: EQUAL
77665: IFFALSE 77718
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77667: LD_VAR 0 1
77671: PPUSH
77672: LD_VAR 0 7
77676: PUSH
77677: LD_INT 1
77679: ARRAY
77680: PPUSH
77681: LD_VAR 0 7
77685: PUSH
77686: LD_INT 2
77688: ARRAY
77689: PPUSH
77690: LD_VAR 0 3
77694: PPUSH
77695: CALL_OW 48
// result := IsPlaced ( unit ) ;
77699: LD_ADDR_VAR 0 4
77703: PUSH
77704: LD_VAR 0 1
77708: PPUSH
77709: CALL_OW 305
77713: ST_TO_ADDR
// exit ;
77714: POP
77715: POP
77716: GO 77722
// end ; end ;
77718: GO 77585
77720: POP
77721: POP
// end ;
77722: LD_VAR 0 4
77726: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77727: LD_INT 0
77729: PPUSH
77730: PPUSH
77731: PPUSH
// if not side or side > 8 then
77732: LD_VAR 0 1
77736: NOT
77737: PUSH
77738: LD_VAR 0 1
77742: PUSH
77743: LD_INT 8
77745: GREATER
77746: OR
77747: IFFALSE 77751
// exit ;
77749: GO 77938
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77751: LD_ADDR_VAR 0 4
77755: PUSH
77756: LD_INT 22
77758: PUSH
77759: LD_VAR 0 1
77763: PUSH
77764: EMPTY
77765: LIST
77766: LIST
77767: PUSH
77768: LD_INT 21
77770: PUSH
77771: LD_INT 3
77773: PUSH
77774: EMPTY
77775: LIST
77776: LIST
77777: PUSH
77778: EMPTY
77779: LIST
77780: LIST
77781: PPUSH
77782: CALL_OW 69
77786: ST_TO_ADDR
// if not tmp then
77787: LD_VAR 0 4
77791: NOT
77792: IFFALSE 77796
// exit ;
77794: GO 77938
// enable_addtolog := true ;
77796: LD_ADDR_OWVAR 81
77800: PUSH
77801: LD_INT 1
77803: ST_TO_ADDR
// AddToLog ( [ ) ;
77804: LD_STRING [
77806: PPUSH
77807: CALL_OW 561
// for i in tmp do
77811: LD_ADDR_VAR 0 3
77815: PUSH
77816: LD_VAR 0 4
77820: PUSH
77821: FOR_IN
77822: IFFALSE 77929
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77824: LD_STRING [
77826: PUSH
77827: LD_VAR 0 3
77831: PPUSH
77832: CALL_OW 266
77836: STR
77837: PUSH
77838: LD_STRING , 
77840: STR
77841: PUSH
77842: LD_VAR 0 3
77846: PPUSH
77847: CALL_OW 250
77851: STR
77852: PUSH
77853: LD_STRING , 
77855: STR
77856: PUSH
77857: LD_VAR 0 3
77861: PPUSH
77862: CALL_OW 251
77866: STR
77867: PUSH
77868: LD_STRING , 
77870: STR
77871: PUSH
77872: LD_VAR 0 3
77876: PPUSH
77877: CALL_OW 254
77881: STR
77882: PUSH
77883: LD_STRING , 
77885: STR
77886: PUSH
77887: LD_VAR 0 3
77891: PPUSH
77892: LD_INT 1
77894: PPUSH
77895: CALL_OW 268
77899: STR
77900: PUSH
77901: LD_STRING , 
77903: STR
77904: PUSH
77905: LD_VAR 0 3
77909: PPUSH
77910: LD_INT 2
77912: PPUSH
77913: CALL_OW 268
77917: STR
77918: PUSH
77919: LD_STRING ],
77921: STR
77922: PPUSH
77923: CALL_OW 561
// end ;
77927: GO 77821
77929: POP
77930: POP
// AddToLog ( ]; ) ;
77931: LD_STRING ];
77933: PPUSH
77934: CALL_OW 561
// end ;
77938: LD_VAR 0 2
77942: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77943: LD_INT 0
77945: PPUSH
77946: PPUSH
77947: PPUSH
77948: PPUSH
77949: PPUSH
// if not area or not rate or not max then
77950: LD_VAR 0 1
77954: NOT
77955: PUSH
77956: LD_VAR 0 2
77960: NOT
77961: OR
77962: PUSH
77963: LD_VAR 0 4
77967: NOT
77968: OR
77969: IFFALSE 77973
// exit ;
77971: GO 78162
// while 1 do
77973: LD_INT 1
77975: IFFALSE 78162
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77977: LD_ADDR_VAR 0 9
77981: PUSH
77982: LD_VAR 0 1
77986: PPUSH
77987: LD_INT 1
77989: PPUSH
77990: CALL_OW 287
77994: PUSH
77995: LD_INT 10
77997: MUL
77998: ST_TO_ADDR
// r := rate / 10 ;
77999: LD_ADDR_VAR 0 7
78003: PUSH
78004: LD_VAR 0 2
78008: PUSH
78009: LD_INT 10
78011: DIVREAL
78012: ST_TO_ADDR
// time := 1 1$00 ;
78013: LD_ADDR_VAR 0 8
78017: PUSH
78018: LD_INT 2100
78020: ST_TO_ADDR
// if amount < min then
78021: LD_VAR 0 9
78025: PUSH
78026: LD_VAR 0 3
78030: LESS
78031: IFFALSE 78049
// r := r * 2 else
78033: LD_ADDR_VAR 0 7
78037: PUSH
78038: LD_VAR 0 7
78042: PUSH
78043: LD_INT 2
78045: MUL
78046: ST_TO_ADDR
78047: GO 78075
// if amount > max then
78049: LD_VAR 0 9
78053: PUSH
78054: LD_VAR 0 4
78058: GREATER
78059: IFFALSE 78075
// r := r / 2 ;
78061: LD_ADDR_VAR 0 7
78065: PUSH
78066: LD_VAR 0 7
78070: PUSH
78071: LD_INT 2
78073: DIVREAL
78074: ST_TO_ADDR
// time := time / r ;
78075: LD_ADDR_VAR 0 8
78079: PUSH
78080: LD_VAR 0 8
78084: PUSH
78085: LD_VAR 0 7
78089: DIVREAL
78090: ST_TO_ADDR
// if time < 0 then
78091: LD_VAR 0 8
78095: PUSH
78096: LD_INT 0
78098: LESS
78099: IFFALSE 78116
// time := time * - 1 ;
78101: LD_ADDR_VAR 0 8
78105: PUSH
78106: LD_VAR 0 8
78110: PUSH
78111: LD_INT 1
78113: NEG
78114: MUL
78115: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78116: LD_VAR 0 8
78120: PUSH
78121: LD_INT 35
78123: PPUSH
78124: LD_INT 875
78126: PPUSH
78127: CALL_OW 12
78131: PLUS
78132: PPUSH
78133: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78137: LD_INT 1
78139: PPUSH
78140: LD_INT 5
78142: PPUSH
78143: CALL_OW 12
78147: PPUSH
78148: LD_VAR 0 1
78152: PPUSH
78153: LD_INT 1
78155: PPUSH
78156: CALL_OW 55
// end ;
78160: GO 77973
// end ;
78162: LD_VAR 0 5
78166: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78167: LD_INT 0
78169: PPUSH
78170: PPUSH
78171: PPUSH
78172: PPUSH
78173: PPUSH
78174: PPUSH
78175: PPUSH
78176: PPUSH
// if not turrets or not factories then
78177: LD_VAR 0 1
78181: NOT
78182: PUSH
78183: LD_VAR 0 2
78187: NOT
78188: OR
78189: IFFALSE 78193
// exit ;
78191: GO 78500
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78193: LD_ADDR_VAR 0 10
78197: PUSH
78198: LD_INT 5
78200: PUSH
78201: LD_INT 6
78203: PUSH
78204: EMPTY
78205: LIST
78206: LIST
78207: PUSH
78208: LD_INT 2
78210: PUSH
78211: LD_INT 4
78213: PUSH
78214: EMPTY
78215: LIST
78216: LIST
78217: PUSH
78218: LD_INT 3
78220: PUSH
78221: LD_INT 5
78223: PUSH
78224: EMPTY
78225: LIST
78226: LIST
78227: PUSH
78228: EMPTY
78229: LIST
78230: LIST
78231: LIST
78232: PUSH
78233: LD_INT 24
78235: PUSH
78236: LD_INT 25
78238: PUSH
78239: EMPTY
78240: LIST
78241: LIST
78242: PUSH
78243: LD_INT 23
78245: PUSH
78246: LD_INT 27
78248: PUSH
78249: EMPTY
78250: LIST
78251: LIST
78252: PUSH
78253: EMPTY
78254: LIST
78255: LIST
78256: PUSH
78257: LD_INT 42
78259: PUSH
78260: LD_INT 43
78262: PUSH
78263: EMPTY
78264: LIST
78265: LIST
78266: PUSH
78267: LD_INT 44
78269: PUSH
78270: LD_INT 46
78272: PUSH
78273: EMPTY
78274: LIST
78275: LIST
78276: PUSH
78277: LD_INT 45
78279: PUSH
78280: LD_INT 47
78282: PUSH
78283: EMPTY
78284: LIST
78285: LIST
78286: PUSH
78287: EMPTY
78288: LIST
78289: LIST
78290: LIST
78291: PUSH
78292: EMPTY
78293: LIST
78294: LIST
78295: LIST
78296: ST_TO_ADDR
// result := [ ] ;
78297: LD_ADDR_VAR 0 3
78301: PUSH
78302: EMPTY
78303: ST_TO_ADDR
// for i in turrets do
78304: LD_ADDR_VAR 0 4
78308: PUSH
78309: LD_VAR 0 1
78313: PUSH
78314: FOR_IN
78315: IFFALSE 78498
// begin nat := GetNation ( i ) ;
78317: LD_ADDR_VAR 0 7
78321: PUSH
78322: LD_VAR 0 4
78326: PPUSH
78327: CALL_OW 248
78331: ST_TO_ADDR
// weapon := 0 ;
78332: LD_ADDR_VAR 0 8
78336: PUSH
78337: LD_INT 0
78339: ST_TO_ADDR
// if not nat then
78340: LD_VAR 0 7
78344: NOT
78345: IFFALSE 78349
// continue ;
78347: GO 78314
// for j in list [ nat ] do
78349: LD_ADDR_VAR 0 5
78353: PUSH
78354: LD_VAR 0 10
78358: PUSH
78359: LD_VAR 0 7
78363: ARRAY
78364: PUSH
78365: FOR_IN
78366: IFFALSE 78407
// if GetBWeapon ( i ) = j [ 1 ] then
78368: LD_VAR 0 4
78372: PPUSH
78373: CALL_OW 269
78377: PUSH
78378: LD_VAR 0 5
78382: PUSH
78383: LD_INT 1
78385: ARRAY
78386: EQUAL
78387: IFFALSE 78405
// begin weapon := j [ 2 ] ;
78389: LD_ADDR_VAR 0 8
78393: PUSH
78394: LD_VAR 0 5
78398: PUSH
78399: LD_INT 2
78401: ARRAY
78402: ST_TO_ADDR
// break ;
78403: GO 78407
// end ;
78405: GO 78365
78407: POP
78408: POP
// if not weapon then
78409: LD_VAR 0 8
78413: NOT
78414: IFFALSE 78418
// continue ;
78416: GO 78314
// for k in factories do
78418: LD_ADDR_VAR 0 6
78422: PUSH
78423: LD_VAR 0 2
78427: PUSH
78428: FOR_IN
78429: IFFALSE 78494
// begin weapons := AvailableWeaponList ( k ) ;
78431: LD_ADDR_VAR 0 9
78435: PUSH
78436: LD_VAR 0 6
78440: PPUSH
78441: CALL_OW 478
78445: ST_TO_ADDR
// if not weapons then
78446: LD_VAR 0 9
78450: NOT
78451: IFFALSE 78455
// continue ;
78453: GO 78428
// if weapon in weapons then
78455: LD_VAR 0 8
78459: PUSH
78460: LD_VAR 0 9
78464: IN
78465: IFFALSE 78492
// begin result := [ i , weapon ] ;
78467: LD_ADDR_VAR 0 3
78471: PUSH
78472: LD_VAR 0 4
78476: PUSH
78477: LD_VAR 0 8
78481: PUSH
78482: EMPTY
78483: LIST
78484: LIST
78485: ST_TO_ADDR
// exit ;
78486: POP
78487: POP
78488: POP
78489: POP
78490: GO 78500
// end ; end ;
78492: GO 78428
78494: POP
78495: POP
// end ;
78496: GO 78314
78498: POP
78499: POP
// end ;
78500: LD_VAR 0 3
78504: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78505: LD_INT 0
78507: PPUSH
// if not side or side > 8 then
78508: LD_VAR 0 3
78512: NOT
78513: PUSH
78514: LD_VAR 0 3
78518: PUSH
78519: LD_INT 8
78521: GREATER
78522: OR
78523: IFFALSE 78527
// exit ;
78525: GO 78586
// if not range then
78527: LD_VAR 0 4
78531: NOT
78532: IFFALSE 78543
// range := - 12 ;
78534: LD_ADDR_VAR 0 4
78538: PUSH
78539: LD_INT 12
78541: NEG
78542: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78543: LD_VAR 0 1
78547: PPUSH
78548: LD_VAR 0 2
78552: PPUSH
78553: LD_VAR 0 3
78557: PPUSH
78558: LD_VAR 0 4
78562: PPUSH
78563: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78567: LD_VAR 0 1
78571: PPUSH
78572: LD_VAR 0 2
78576: PPUSH
78577: LD_VAR 0 3
78581: PPUSH
78582: CALL_OW 331
// end ;
78586: LD_VAR 0 5
78590: RET
// export function Video ( mode ) ; begin
78591: LD_INT 0
78593: PPUSH
// ingame_video = mode ;
78594: LD_ADDR_OWVAR 52
78598: PUSH
78599: LD_VAR 0 1
78603: ST_TO_ADDR
// interface_hidden = mode ;
78604: LD_ADDR_OWVAR 54
78608: PUSH
78609: LD_VAR 0 1
78613: ST_TO_ADDR
// end ;
78614: LD_VAR 0 2
78618: RET
// export function Join ( array , element ) ; begin
78619: LD_INT 0
78621: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78622: LD_ADDR_VAR 0 3
78626: PUSH
78627: LD_VAR 0 1
78631: PPUSH
78632: LD_VAR 0 1
78636: PUSH
78637: LD_INT 1
78639: PLUS
78640: PPUSH
78641: LD_VAR 0 2
78645: PPUSH
78646: CALL_OW 1
78650: ST_TO_ADDR
// end ;
78651: LD_VAR 0 3
78655: RET
// export function JoinUnion ( array , element ) ; begin
78656: LD_INT 0
78658: PPUSH
// result := array union element ;
78659: LD_ADDR_VAR 0 3
78663: PUSH
78664: LD_VAR 0 1
78668: PUSH
78669: LD_VAR 0 2
78673: UNION
78674: ST_TO_ADDR
// end ;
78675: LD_VAR 0 3
78679: RET
// export function GetBehemoths ( side ) ; begin
78680: LD_INT 0
78682: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78683: LD_ADDR_VAR 0 2
78687: PUSH
78688: LD_INT 22
78690: PUSH
78691: LD_VAR 0 1
78695: PUSH
78696: EMPTY
78697: LIST
78698: LIST
78699: PUSH
78700: LD_INT 31
78702: PUSH
78703: LD_INT 25
78705: PUSH
78706: EMPTY
78707: LIST
78708: LIST
78709: PUSH
78710: EMPTY
78711: LIST
78712: LIST
78713: PPUSH
78714: CALL_OW 69
78718: ST_TO_ADDR
// end ;
78719: LD_VAR 0 2
78723: RET
// export function Shuffle ( array ) ; var i , index ; begin
78724: LD_INT 0
78726: PPUSH
78727: PPUSH
78728: PPUSH
// result := [ ] ;
78729: LD_ADDR_VAR 0 2
78733: PUSH
78734: EMPTY
78735: ST_TO_ADDR
// if not array then
78736: LD_VAR 0 1
78740: NOT
78741: IFFALSE 78745
// exit ;
78743: GO 78844
// Randomize ;
78745: CALL_OW 10
// for i = array downto 1 do
78749: LD_ADDR_VAR 0 3
78753: PUSH
78754: DOUBLE
78755: LD_VAR 0 1
78759: INC
78760: ST_TO_ADDR
78761: LD_INT 1
78763: PUSH
78764: FOR_DOWNTO
78765: IFFALSE 78842
// begin index := rand ( 1 , array ) ;
78767: LD_ADDR_VAR 0 4
78771: PUSH
78772: LD_INT 1
78774: PPUSH
78775: LD_VAR 0 1
78779: PPUSH
78780: CALL_OW 12
78784: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78785: LD_ADDR_VAR 0 2
78789: PUSH
78790: LD_VAR 0 2
78794: PPUSH
78795: LD_VAR 0 2
78799: PUSH
78800: LD_INT 1
78802: PLUS
78803: PPUSH
78804: LD_VAR 0 1
78808: PUSH
78809: LD_VAR 0 4
78813: ARRAY
78814: PPUSH
78815: CALL_OW 2
78819: ST_TO_ADDR
// array := Delete ( array , index ) ;
78820: LD_ADDR_VAR 0 1
78824: PUSH
78825: LD_VAR 0 1
78829: PPUSH
78830: LD_VAR 0 4
78834: PPUSH
78835: CALL_OW 3
78839: ST_TO_ADDR
// end ;
78840: GO 78764
78842: POP
78843: POP
// end ;
78844: LD_VAR 0 2
78848: RET
// export function GetBaseMaterials ( base ) ; begin
78849: LD_INT 0
78851: PPUSH
// result := [ 0 , 0 , 0 ] ;
78852: LD_ADDR_VAR 0 2
78856: PUSH
78857: LD_INT 0
78859: PUSH
78860: LD_INT 0
78862: PUSH
78863: LD_INT 0
78865: PUSH
78866: EMPTY
78867: LIST
78868: LIST
78869: LIST
78870: ST_TO_ADDR
// if not base then
78871: LD_VAR 0 1
78875: NOT
78876: IFFALSE 78880
// exit ;
78878: GO 78929
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78880: LD_ADDR_VAR 0 2
78884: PUSH
78885: LD_VAR 0 1
78889: PPUSH
78890: LD_INT 1
78892: PPUSH
78893: CALL_OW 275
78897: PUSH
78898: LD_VAR 0 1
78902: PPUSH
78903: LD_INT 2
78905: PPUSH
78906: CALL_OW 275
78910: PUSH
78911: LD_VAR 0 1
78915: PPUSH
78916: LD_INT 3
78918: PPUSH
78919: CALL_OW 275
78923: PUSH
78924: EMPTY
78925: LIST
78926: LIST
78927: LIST
78928: ST_TO_ADDR
// end ;
78929: LD_VAR 0 2
78933: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78934: LD_INT 0
78936: PPUSH
78937: PPUSH
// result := array ;
78938: LD_ADDR_VAR 0 3
78942: PUSH
78943: LD_VAR 0 1
78947: ST_TO_ADDR
// if size >= result then
78948: LD_VAR 0 2
78952: PUSH
78953: LD_VAR 0 3
78957: GREATEREQUAL
78958: IFFALSE 78962
// exit ;
78960: GO 79012
// if size then
78962: LD_VAR 0 2
78966: IFFALSE 79012
// for i := array downto size do
78968: LD_ADDR_VAR 0 4
78972: PUSH
78973: DOUBLE
78974: LD_VAR 0 1
78978: INC
78979: ST_TO_ADDR
78980: LD_VAR 0 2
78984: PUSH
78985: FOR_DOWNTO
78986: IFFALSE 79010
// result := Delete ( result , result ) ;
78988: LD_ADDR_VAR 0 3
78992: PUSH
78993: LD_VAR 0 3
78997: PPUSH
78998: LD_VAR 0 3
79002: PPUSH
79003: CALL_OW 3
79007: ST_TO_ADDR
79008: GO 78985
79010: POP
79011: POP
// end ;
79012: LD_VAR 0 3
79016: RET
// export function ComExit ( unit ) ; var tmp ; begin
79017: LD_INT 0
79019: PPUSH
79020: PPUSH
// if not IsInUnit ( unit ) then
79021: LD_VAR 0 1
79025: PPUSH
79026: CALL_OW 310
79030: NOT
79031: IFFALSE 79035
// exit ;
79033: GO 79095
// tmp := IsInUnit ( unit ) ;
79035: LD_ADDR_VAR 0 3
79039: PUSH
79040: LD_VAR 0 1
79044: PPUSH
79045: CALL_OW 310
79049: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79050: LD_VAR 0 3
79054: PPUSH
79055: CALL_OW 247
79059: PUSH
79060: LD_INT 2
79062: EQUAL
79063: IFFALSE 79076
// ComExitVehicle ( unit ) else
79065: LD_VAR 0 1
79069: PPUSH
79070: CALL_OW 121
79074: GO 79085
// ComExitBuilding ( unit ) ;
79076: LD_VAR 0 1
79080: PPUSH
79081: CALL_OW 122
// result := tmp ;
79085: LD_ADDR_VAR 0 2
79089: PUSH
79090: LD_VAR 0 3
79094: ST_TO_ADDR
// end ;
79095: LD_VAR 0 2
79099: RET
// export function ComExitAll ( units ) ; var i ; begin
79100: LD_INT 0
79102: PPUSH
79103: PPUSH
// if not units then
79104: LD_VAR 0 1
79108: NOT
79109: IFFALSE 79113
// exit ;
79111: GO 79139
// for i in units do
79113: LD_ADDR_VAR 0 3
79117: PUSH
79118: LD_VAR 0 1
79122: PUSH
79123: FOR_IN
79124: IFFALSE 79137
// ComExit ( i ) ;
79126: LD_VAR 0 3
79130: PPUSH
79131: CALL 79017 0 1
79135: GO 79123
79137: POP
79138: POP
// end ;
79139: LD_VAR 0 2
79143: RET
// export function ResetHc ; begin
79144: LD_INT 0
79146: PPUSH
// InitHc ;
79147: CALL_OW 19
// hc_importance := 0 ;
79151: LD_ADDR_OWVAR 32
79155: PUSH
79156: LD_INT 0
79158: ST_TO_ADDR
// end ;
79159: LD_VAR 0 1
79163: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79164: LD_INT 0
79166: PPUSH
79167: PPUSH
79168: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79169: LD_ADDR_VAR 0 6
79173: PUSH
79174: LD_VAR 0 1
79178: PUSH
79179: LD_VAR 0 3
79183: PLUS
79184: PUSH
79185: LD_INT 2
79187: DIV
79188: ST_TO_ADDR
// if _x < 0 then
79189: LD_VAR 0 6
79193: PUSH
79194: LD_INT 0
79196: LESS
79197: IFFALSE 79214
// _x := _x * - 1 ;
79199: LD_ADDR_VAR 0 6
79203: PUSH
79204: LD_VAR 0 6
79208: PUSH
79209: LD_INT 1
79211: NEG
79212: MUL
79213: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79214: LD_ADDR_VAR 0 7
79218: PUSH
79219: LD_VAR 0 2
79223: PUSH
79224: LD_VAR 0 4
79228: PLUS
79229: PUSH
79230: LD_INT 2
79232: DIV
79233: ST_TO_ADDR
// if _y < 0 then
79234: LD_VAR 0 7
79238: PUSH
79239: LD_INT 0
79241: LESS
79242: IFFALSE 79259
// _y := _y * - 1 ;
79244: LD_ADDR_VAR 0 7
79248: PUSH
79249: LD_VAR 0 7
79253: PUSH
79254: LD_INT 1
79256: NEG
79257: MUL
79258: ST_TO_ADDR
// result := [ _x , _y ] ;
79259: LD_ADDR_VAR 0 5
79263: PUSH
79264: LD_VAR 0 6
79268: PUSH
79269: LD_VAR 0 7
79273: PUSH
79274: EMPTY
79275: LIST
79276: LIST
79277: ST_TO_ADDR
// end ;
79278: LD_VAR 0 5
79282: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79283: LD_INT 0
79285: PPUSH
79286: PPUSH
79287: PPUSH
79288: PPUSH
// task := GetTaskList ( unit ) ;
79289: LD_ADDR_VAR 0 7
79293: PUSH
79294: LD_VAR 0 1
79298: PPUSH
79299: CALL_OW 437
79303: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79304: LD_VAR 0 7
79308: NOT
79309: PUSH
79310: LD_VAR 0 1
79314: PPUSH
79315: LD_VAR 0 2
79319: PPUSH
79320: CALL_OW 308
79324: NOT
79325: AND
79326: IFFALSE 79330
// exit ;
79328: GO 79448
// if IsInArea ( unit , area ) then
79330: LD_VAR 0 1
79334: PPUSH
79335: LD_VAR 0 2
79339: PPUSH
79340: CALL_OW 308
79344: IFFALSE 79362
// begin ComMoveToArea ( unit , goAway ) ;
79346: LD_VAR 0 1
79350: PPUSH
79351: LD_VAR 0 3
79355: PPUSH
79356: CALL_OW 113
// exit ;
79360: GO 79448
// end ; if task [ 1 ] [ 1 ] <> M then
79362: LD_VAR 0 7
79366: PUSH
79367: LD_INT 1
79369: ARRAY
79370: PUSH
79371: LD_INT 1
79373: ARRAY
79374: PUSH
79375: LD_STRING M
79377: NONEQUAL
79378: IFFALSE 79382
// exit ;
79380: GO 79448
// x := task [ 1 ] [ 2 ] ;
79382: LD_ADDR_VAR 0 5
79386: PUSH
79387: LD_VAR 0 7
79391: PUSH
79392: LD_INT 1
79394: ARRAY
79395: PUSH
79396: LD_INT 2
79398: ARRAY
79399: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79400: LD_ADDR_VAR 0 6
79404: PUSH
79405: LD_VAR 0 7
79409: PUSH
79410: LD_INT 1
79412: ARRAY
79413: PUSH
79414: LD_INT 3
79416: ARRAY
79417: ST_TO_ADDR
// if InArea ( x , y , area ) then
79418: LD_VAR 0 5
79422: PPUSH
79423: LD_VAR 0 6
79427: PPUSH
79428: LD_VAR 0 2
79432: PPUSH
79433: CALL_OW 309
79437: IFFALSE 79448
// ComStop ( unit ) ;
79439: LD_VAR 0 1
79443: PPUSH
79444: CALL_OW 141
// end ;
79448: LD_VAR 0 4
79452: RET
// export function Abs ( value ) ; begin
79453: LD_INT 0
79455: PPUSH
// result := value ;
79456: LD_ADDR_VAR 0 2
79460: PUSH
79461: LD_VAR 0 1
79465: ST_TO_ADDR
// if value < 0 then
79466: LD_VAR 0 1
79470: PUSH
79471: LD_INT 0
79473: LESS
79474: IFFALSE 79491
// result := value * - 1 ;
79476: LD_ADDR_VAR 0 2
79480: PUSH
79481: LD_VAR 0 1
79485: PUSH
79486: LD_INT 1
79488: NEG
79489: MUL
79490: ST_TO_ADDR
// end ;
79491: LD_VAR 0 2
79495: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79496: LD_INT 0
79498: PPUSH
79499: PPUSH
79500: PPUSH
79501: PPUSH
79502: PPUSH
79503: PPUSH
79504: PPUSH
79505: PPUSH
// if not unit or not building then
79506: LD_VAR 0 1
79510: NOT
79511: PUSH
79512: LD_VAR 0 2
79516: NOT
79517: OR
79518: IFFALSE 79522
// exit ;
79520: GO 79748
// x := GetX ( building ) ;
79522: LD_ADDR_VAR 0 4
79526: PUSH
79527: LD_VAR 0 2
79531: PPUSH
79532: CALL_OW 250
79536: ST_TO_ADDR
// y := GetY ( building ) ;
79537: LD_ADDR_VAR 0 6
79541: PUSH
79542: LD_VAR 0 2
79546: PPUSH
79547: CALL_OW 251
79551: ST_TO_ADDR
// d := GetDir ( building ) ;
79552: LD_ADDR_VAR 0 8
79556: PUSH
79557: LD_VAR 0 2
79561: PPUSH
79562: CALL_OW 254
79566: ST_TO_ADDR
// r := 4 ;
79567: LD_ADDR_VAR 0 9
79571: PUSH
79572: LD_INT 4
79574: ST_TO_ADDR
// for i := 1 to 5 do
79575: LD_ADDR_VAR 0 10
79579: PUSH
79580: DOUBLE
79581: LD_INT 1
79583: DEC
79584: ST_TO_ADDR
79585: LD_INT 5
79587: PUSH
79588: FOR_TO
79589: IFFALSE 79746
// begin _x := ShiftX ( x , d , r + i ) ;
79591: LD_ADDR_VAR 0 5
79595: PUSH
79596: LD_VAR 0 4
79600: PPUSH
79601: LD_VAR 0 8
79605: PPUSH
79606: LD_VAR 0 9
79610: PUSH
79611: LD_VAR 0 10
79615: PLUS
79616: PPUSH
79617: CALL_OW 272
79621: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79622: LD_ADDR_VAR 0 7
79626: PUSH
79627: LD_VAR 0 6
79631: PPUSH
79632: LD_VAR 0 8
79636: PPUSH
79637: LD_VAR 0 9
79641: PUSH
79642: LD_VAR 0 10
79646: PLUS
79647: PPUSH
79648: CALL_OW 273
79652: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79653: LD_VAR 0 5
79657: PPUSH
79658: LD_VAR 0 7
79662: PPUSH
79663: CALL_OW 488
79667: PUSH
79668: LD_VAR 0 5
79672: PPUSH
79673: LD_VAR 0 7
79677: PPUSH
79678: CALL_OW 428
79682: PPUSH
79683: CALL_OW 247
79687: PUSH
79688: LD_INT 3
79690: PUSH
79691: LD_INT 2
79693: PUSH
79694: EMPTY
79695: LIST
79696: LIST
79697: IN
79698: NOT
79699: AND
79700: IFFALSE 79744
// begin ComMoveXY ( unit , _x , _y ) ;
79702: LD_VAR 0 1
79706: PPUSH
79707: LD_VAR 0 5
79711: PPUSH
79712: LD_VAR 0 7
79716: PPUSH
79717: CALL_OW 111
// result := [ _x , _y ] ;
79721: LD_ADDR_VAR 0 3
79725: PUSH
79726: LD_VAR 0 5
79730: PUSH
79731: LD_VAR 0 7
79735: PUSH
79736: EMPTY
79737: LIST
79738: LIST
79739: ST_TO_ADDR
// exit ;
79740: POP
79741: POP
79742: GO 79748
// end ; end ;
79744: GO 79588
79746: POP
79747: POP
// end ;
79748: LD_VAR 0 3
79752: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79753: LD_INT 0
79755: PPUSH
79756: PPUSH
79757: PPUSH
// result := 0 ;
79758: LD_ADDR_VAR 0 3
79762: PUSH
79763: LD_INT 0
79765: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79766: LD_VAR 0 1
79770: PUSH
79771: LD_INT 0
79773: LESS
79774: PUSH
79775: LD_VAR 0 1
79779: PUSH
79780: LD_INT 8
79782: GREATER
79783: OR
79784: PUSH
79785: LD_VAR 0 2
79789: PUSH
79790: LD_INT 0
79792: LESS
79793: OR
79794: PUSH
79795: LD_VAR 0 2
79799: PUSH
79800: LD_INT 8
79802: GREATER
79803: OR
79804: IFFALSE 79808
// exit ;
79806: GO 79883
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79808: LD_ADDR_VAR 0 4
79812: PUSH
79813: LD_INT 22
79815: PUSH
79816: LD_VAR 0 2
79820: PUSH
79821: EMPTY
79822: LIST
79823: LIST
79824: PPUSH
79825: CALL_OW 69
79829: PUSH
79830: FOR_IN
79831: IFFALSE 79881
// begin un := UnitShoot ( i ) ;
79833: LD_ADDR_VAR 0 5
79837: PUSH
79838: LD_VAR 0 4
79842: PPUSH
79843: CALL_OW 504
79847: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79848: LD_VAR 0 5
79852: PPUSH
79853: CALL_OW 255
79857: PUSH
79858: LD_VAR 0 1
79862: EQUAL
79863: IFFALSE 79879
// begin result := un ;
79865: LD_ADDR_VAR 0 3
79869: PUSH
79870: LD_VAR 0 5
79874: ST_TO_ADDR
// exit ;
79875: POP
79876: POP
79877: GO 79883
// end ; end ;
79879: GO 79830
79881: POP
79882: POP
// end ;
79883: LD_VAR 0 3
79887: RET
// export function GetCargoBay ( units ) ; begin
79888: LD_INT 0
79890: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79891: LD_ADDR_VAR 0 2
79895: PUSH
79896: LD_VAR 0 1
79900: PPUSH
79901: LD_INT 2
79903: PUSH
79904: LD_INT 34
79906: PUSH
79907: LD_INT 12
79909: PUSH
79910: EMPTY
79911: LIST
79912: LIST
79913: PUSH
79914: LD_INT 34
79916: PUSH
79917: LD_INT 51
79919: PUSH
79920: EMPTY
79921: LIST
79922: LIST
79923: PUSH
79924: LD_INT 34
79926: PUSH
79927: LD_INT 32
79929: PUSH
79930: EMPTY
79931: LIST
79932: LIST
79933: PUSH
79934: LD_INT 34
79936: PUSH
79937: LD_INT 89
79939: PUSH
79940: EMPTY
79941: LIST
79942: LIST
79943: PUSH
79944: EMPTY
79945: LIST
79946: LIST
79947: LIST
79948: LIST
79949: LIST
79950: PPUSH
79951: CALL_OW 72
79955: ST_TO_ADDR
// end ;
79956: LD_VAR 0 2
79960: RET
// export function Negate ( value ) ; begin
79961: LD_INT 0
79963: PPUSH
// result := not value ;
79964: LD_ADDR_VAR 0 2
79968: PUSH
79969: LD_VAR 0 1
79973: NOT
79974: ST_TO_ADDR
// end ;
79975: LD_VAR 0 2
79979: RET
// export function Inc ( value ) ; begin
79980: LD_INT 0
79982: PPUSH
// result := value + 1 ;
79983: LD_ADDR_VAR 0 2
79987: PUSH
79988: LD_VAR 0 1
79992: PUSH
79993: LD_INT 1
79995: PLUS
79996: ST_TO_ADDR
// end ;
79997: LD_VAR 0 2
80001: RET
// export function Dec ( value ) ; begin
80002: LD_INT 0
80004: PPUSH
// result := value - 1 ;
80005: LD_ADDR_VAR 0 2
80009: PUSH
80010: LD_VAR 0 1
80014: PUSH
80015: LD_INT 1
80017: MINUS
80018: ST_TO_ADDR
// end ;
80019: LD_VAR 0 2
80023: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80024: LD_INT 0
80026: PPUSH
80027: PPUSH
80028: PPUSH
80029: PPUSH
80030: PPUSH
80031: PPUSH
80032: PPUSH
80033: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80034: LD_VAR 0 1
80038: PPUSH
80039: LD_VAR 0 2
80043: PPUSH
80044: CALL_OW 488
80048: NOT
80049: PUSH
80050: LD_VAR 0 3
80054: PPUSH
80055: LD_VAR 0 4
80059: PPUSH
80060: CALL_OW 488
80064: NOT
80065: OR
80066: IFFALSE 80079
// begin result := - 1 ;
80068: LD_ADDR_VAR 0 5
80072: PUSH
80073: LD_INT 1
80075: NEG
80076: ST_TO_ADDR
// exit ;
80077: GO 80314
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80079: LD_ADDR_VAR 0 12
80083: PUSH
80084: LD_VAR 0 1
80088: PPUSH
80089: LD_VAR 0 2
80093: PPUSH
80094: LD_VAR 0 3
80098: PPUSH
80099: LD_VAR 0 4
80103: PPUSH
80104: CALL 79164 0 4
80108: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80109: LD_ADDR_VAR 0 11
80113: PUSH
80114: LD_VAR 0 1
80118: PPUSH
80119: LD_VAR 0 2
80123: PPUSH
80124: LD_VAR 0 12
80128: PUSH
80129: LD_INT 1
80131: ARRAY
80132: PPUSH
80133: LD_VAR 0 12
80137: PUSH
80138: LD_INT 2
80140: ARRAY
80141: PPUSH
80142: CALL_OW 298
80146: ST_TO_ADDR
// distance := 9999 ;
80147: LD_ADDR_VAR 0 10
80151: PUSH
80152: LD_INT 9999
80154: ST_TO_ADDR
// for i := 0 to 5 do
80155: LD_ADDR_VAR 0 6
80159: PUSH
80160: DOUBLE
80161: LD_INT 0
80163: DEC
80164: ST_TO_ADDR
80165: LD_INT 5
80167: PUSH
80168: FOR_TO
80169: IFFALSE 80312
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80171: LD_ADDR_VAR 0 7
80175: PUSH
80176: LD_VAR 0 1
80180: PPUSH
80181: LD_VAR 0 6
80185: PPUSH
80186: LD_VAR 0 11
80190: PPUSH
80191: CALL_OW 272
80195: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80196: LD_ADDR_VAR 0 8
80200: PUSH
80201: LD_VAR 0 2
80205: PPUSH
80206: LD_VAR 0 6
80210: PPUSH
80211: LD_VAR 0 11
80215: PPUSH
80216: CALL_OW 273
80220: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80221: LD_VAR 0 7
80225: PPUSH
80226: LD_VAR 0 8
80230: PPUSH
80231: CALL_OW 488
80235: NOT
80236: IFFALSE 80240
// continue ;
80238: GO 80168
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80240: LD_ADDR_VAR 0 9
80244: PUSH
80245: LD_VAR 0 12
80249: PUSH
80250: LD_INT 1
80252: ARRAY
80253: PPUSH
80254: LD_VAR 0 12
80258: PUSH
80259: LD_INT 2
80261: ARRAY
80262: PPUSH
80263: LD_VAR 0 7
80267: PPUSH
80268: LD_VAR 0 8
80272: PPUSH
80273: CALL_OW 298
80277: ST_TO_ADDR
// if tmp < distance then
80278: LD_VAR 0 9
80282: PUSH
80283: LD_VAR 0 10
80287: LESS
80288: IFFALSE 80310
// begin result := i ;
80290: LD_ADDR_VAR 0 5
80294: PUSH
80295: LD_VAR 0 6
80299: ST_TO_ADDR
// distance := tmp ;
80300: LD_ADDR_VAR 0 10
80304: PUSH
80305: LD_VAR 0 9
80309: ST_TO_ADDR
// end ; end ;
80310: GO 80168
80312: POP
80313: POP
// end ;
80314: LD_VAR 0 5
80318: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80319: LD_INT 0
80321: PPUSH
80322: PPUSH
// if not driver or not IsInUnit ( driver ) then
80323: LD_VAR 0 1
80327: NOT
80328: PUSH
80329: LD_VAR 0 1
80333: PPUSH
80334: CALL_OW 310
80338: NOT
80339: OR
80340: IFFALSE 80344
// exit ;
80342: GO 80434
// vehicle := IsInUnit ( driver ) ;
80344: LD_ADDR_VAR 0 3
80348: PUSH
80349: LD_VAR 0 1
80353: PPUSH
80354: CALL_OW 310
80358: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80359: LD_VAR 0 1
80363: PPUSH
80364: LD_STRING \
80366: PUSH
80367: LD_INT 0
80369: PUSH
80370: LD_INT 0
80372: PUSH
80373: LD_INT 0
80375: PUSH
80376: LD_INT 0
80378: PUSH
80379: LD_INT 0
80381: PUSH
80382: LD_INT 0
80384: PUSH
80385: EMPTY
80386: LIST
80387: LIST
80388: LIST
80389: LIST
80390: LIST
80391: LIST
80392: LIST
80393: PUSH
80394: LD_STRING E
80396: PUSH
80397: LD_INT 0
80399: PUSH
80400: LD_INT 0
80402: PUSH
80403: LD_VAR 0 3
80407: PUSH
80408: LD_INT 0
80410: PUSH
80411: LD_INT 0
80413: PUSH
80414: LD_INT 0
80416: PUSH
80417: EMPTY
80418: LIST
80419: LIST
80420: LIST
80421: LIST
80422: LIST
80423: LIST
80424: LIST
80425: PUSH
80426: EMPTY
80427: LIST
80428: LIST
80429: PPUSH
80430: CALL_OW 446
// end ;
80434: LD_VAR 0 2
80438: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80439: LD_INT 0
80441: PPUSH
80442: PPUSH
// if not driver or not IsInUnit ( driver ) then
80443: LD_VAR 0 1
80447: NOT
80448: PUSH
80449: LD_VAR 0 1
80453: PPUSH
80454: CALL_OW 310
80458: NOT
80459: OR
80460: IFFALSE 80464
// exit ;
80462: GO 80554
// vehicle := IsInUnit ( driver ) ;
80464: LD_ADDR_VAR 0 3
80468: PUSH
80469: LD_VAR 0 1
80473: PPUSH
80474: CALL_OW 310
80478: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80479: LD_VAR 0 1
80483: PPUSH
80484: LD_STRING \
80486: PUSH
80487: LD_INT 0
80489: PUSH
80490: LD_INT 0
80492: PUSH
80493: LD_INT 0
80495: PUSH
80496: LD_INT 0
80498: PUSH
80499: LD_INT 0
80501: PUSH
80502: LD_INT 0
80504: PUSH
80505: EMPTY
80506: LIST
80507: LIST
80508: LIST
80509: LIST
80510: LIST
80511: LIST
80512: LIST
80513: PUSH
80514: LD_STRING E
80516: PUSH
80517: LD_INT 0
80519: PUSH
80520: LD_INT 0
80522: PUSH
80523: LD_VAR 0 3
80527: PUSH
80528: LD_INT 0
80530: PUSH
80531: LD_INT 0
80533: PUSH
80534: LD_INT 0
80536: PUSH
80537: EMPTY
80538: LIST
80539: LIST
80540: LIST
80541: LIST
80542: LIST
80543: LIST
80544: LIST
80545: PUSH
80546: EMPTY
80547: LIST
80548: LIST
80549: PPUSH
80550: CALL_OW 447
// end ;
80554: LD_VAR 0 2
80558: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80559: LD_INT 0
80561: PPUSH
80562: PPUSH
80563: PPUSH
// tmp := [ ] ;
80564: LD_ADDR_VAR 0 5
80568: PUSH
80569: EMPTY
80570: ST_TO_ADDR
// for i in units do
80571: LD_ADDR_VAR 0 4
80575: PUSH
80576: LD_VAR 0 1
80580: PUSH
80581: FOR_IN
80582: IFFALSE 80620
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80584: LD_ADDR_VAR 0 5
80588: PUSH
80589: LD_VAR 0 5
80593: PPUSH
80594: LD_VAR 0 5
80598: PUSH
80599: LD_INT 1
80601: PLUS
80602: PPUSH
80603: LD_VAR 0 4
80607: PPUSH
80608: CALL_OW 256
80612: PPUSH
80613: CALL_OW 2
80617: ST_TO_ADDR
80618: GO 80581
80620: POP
80621: POP
// if not tmp then
80622: LD_VAR 0 5
80626: NOT
80627: IFFALSE 80631
// exit ;
80629: GO 80679
// if asc then
80631: LD_VAR 0 2
80635: IFFALSE 80659
// result := SortListByListAsc ( units , tmp ) else
80637: LD_ADDR_VAR 0 3
80641: PUSH
80642: LD_VAR 0 1
80646: PPUSH
80647: LD_VAR 0 5
80651: PPUSH
80652: CALL_OW 76
80656: ST_TO_ADDR
80657: GO 80679
// result := SortListByListDesc ( units , tmp ) ;
80659: LD_ADDR_VAR 0 3
80663: PUSH
80664: LD_VAR 0 1
80668: PPUSH
80669: LD_VAR 0 5
80673: PPUSH
80674: CALL_OW 77
80678: ST_TO_ADDR
// end ;
80679: LD_VAR 0 3
80683: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80684: LD_INT 0
80686: PPUSH
80687: PPUSH
// task := GetTaskList ( mech ) ;
80688: LD_ADDR_VAR 0 4
80692: PUSH
80693: LD_VAR 0 1
80697: PPUSH
80698: CALL_OW 437
80702: ST_TO_ADDR
// if not task then
80703: LD_VAR 0 4
80707: NOT
80708: IFFALSE 80712
// exit ;
80710: GO 80754
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80712: LD_ADDR_VAR 0 3
80716: PUSH
80717: LD_VAR 0 4
80721: PUSH
80722: LD_INT 1
80724: ARRAY
80725: PUSH
80726: LD_INT 1
80728: ARRAY
80729: PUSH
80730: LD_STRING r
80732: EQUAL
80733: PUSH
80734: LD_VAR 0 4
80738: PUSH
80739: LD_INT 1
80741: ARRAY
80742: PUSH
80743: LD_INT 4
80745: ARRAY
80746: PUSH
80747: LD_VAR 0 2
80751: EQUAL
80752: AND
80753: ST_TO_ADDR
// end ;
80754: LD_VAR 0 3
80758: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80759: LD_INT 0
80761: PPUSH
// SetDir ( unit , d ) ;
80762: LD_VAR 0 1
80766: PPUSH
80767: LD_VAR 0 4
80771: PPUSH
80772: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80776: LD_VAR 0 1
80780: PPUSH
80781: LD_VAR 0 2
80785: PPUSH
80786: LD_VAR 0 3
80790: PPUSH
80791: LD_VAR 0 5
80795: PPUSH
80796: CALL_OW 48
// end ;
80800: LD_VAR 0 6
80804: RET
// export function ToNaturalNumber ( number ) ; begin
80805: LD_INT 0
80807: PPUSH
// result := number div 1 ;
80808: LD_ADDR_VAR 0 2
80812: PUSH
80813: LD_VAR 0 1
80817: PUSH
80818: LD_INT 1
80820: DIV
80821: ST_TO_ADDR
// if number < 0 then
80822: LD_VAR 0 1
80826: PUSH
80827: LD_INT 0
80829: LESS
80830: IFFALSE 80840
// result := 0 ;
80832: LD_ADDR_VAR 0 2
80836: PUSH
80837: LD_INT 0
80839: ST_TO_ADDR
// end ;
80840: LD_VAR 0 2
80844: RET
// export function SortByClass ( units , class ) ; var un ; begin
80845: LD_INT 0
80847: PPUSH
80848: PPUSH
// if not units or not class then
80849: LD_VAR 0 1
80853: NOT
80854: PUSH
80855: LD_VAR 0 2
80859: NOT
80860: OR
80861: IFFALSE 80865
// exit ;
80863: GO 80960
// result := [ ] ;
80865: LD_ADDR_VAR 0 3
80869: PUSH
80870: EMPTY
80871: ST_TO_ADDR
// for un in units do
80872: LD_ADDR_VAR 0 4
80876: PUSH
80877: LD_VAR 0 1
80881: PUSH
80882: FOR_IN
80883: IFFALSE 80958
// if GetClass ( un ) = class then
80885: LD_VAR 0 4
80889: PPUSH
80890: CALL_OW 257
80894: PUSH
80895: LD_VAR 0 2
80899: EQUAL
80900: IFFALSE 80927
// result := Insert ( result , 1 , un ) else
80902: LD_ADDR_VAR 0 3
80906: PUSH
80907: LD_VAR 0 3
80911: PPUSH
80912: LD_INT 1
80914: PPUSH
80915: LD_VAR 0 4
80919: PPUSH
80920: CALL_OW 2
80924: ST_TO_ADDR
80925: GO 80956
// result := Replace ( result , result + 1 , un ) ;
80927: LD_ADDR_VAR 0 3
80931: PUSH
80932: LD_VAR 0 3
80936: PPUSH
80937: LD_VAR 0 3
80941: PUSH
80942: LD_INT 1
80944: PLUS
80945: PPUSH
80946: LD_VAR 0 4
80950: PPUSH
80951: CALL_OW 1
80955: ST_TO_ADDR
80956: GO 80882
80958: POP
80959: POP
// end ;
80960: LD_VAR 0 3
80964: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80965: LD_INT 0
80967: PPUSH
80968: PPUSH
80969: PPUSH
80970: PPUSH
80971: PPUSH
80972: PPUSH
80973: PPUSH
// result := [ ] ;
80974: LD_ADDR_VAR 0 4
80978: PUSH
80979: EMPTY
80980: ST_TO_ADDR
// if x - r < 0 then
80981: LD_VAR 0 1
80985: PUSH
80986: LD_VAR 0 3
80990: MINUS
80991: PUSH
80992: LD_INT 0
80994: LESS
80995: IFFALSE 81007
// min_x := 0 else
80997: LD_ADDR_VAR 0 8
81001: PUSH
81002: LD_INT 0
81004: ST_TO_ADDR
81005: GO 81023
// min_x := x - r ;
81007: LD_ADDR_VAR 0 8
81011: PUSH
81012: LD_VAR 0 1
81016: PUSH
81017: LD_VAR 0 3
81021: MINUS
81022: ST_TO_ADDR
// if y - r < 0 then
81023: LD_VAR 0 2
81027: PUSH
81028: LD_VAR 0 3
81032: MINUS
81033: PUSH
81034: LD_INT 0
81036: LESS
81037: IFFALSE 81049
// min_y := 0 else
81039: LD_ADDR_VAR 0 7
81043: PUSH
81044: LD_INT 0
81046: ST_TO_ADDR
81047: GO 81065
// min_y := y - r ;
81049: LD_ADDR_VAR 0 7
81053: PUSH
81054: LD_VAR 0 2
81058: PUSH
81059: LD_VAR 0 3
81063: MINUS
81064: ST_TO_ADDR
// max_x := x + r ;
81065: LD_ADDR_VAR 0 9
81069: PUSH
81070: LD_VAR 0 1
81074: PUSH
81075: LD_VAR 0 3
81079: PLUS
81080: ST_TO_ADDR
// max_y := y + r ;
81081: LD_ADDR_VAR 0 10
81085: PUSH
81086: LD_VAR 0 2
81090: PUSH
81091: LD_VAR 0 3
81095: PLUS
81096: ST_TO_ADDR
// for _x = min_x to max_x do
81097: LD_ADDR_VAR 0 5
81101: PUSH
81102: DOUBLE
81103: LD_VAR 0 8
81107: DEC
81108: ST_TO_ADDR
81109: LD_VAR 0 9
81113: PUSH
81114: FOR_TO
81115: IFFALSE 81216
// for _y = min_y to max_y do
81117: LD_ADDR_VAR 0 6
81121: PUSH
81122: DOUBLE
81123: LD_VAR 0 7
81127: DEC
81128: ST_TO_ADDR
81129: LD_VAR 0 10
81133: PUSH
81134: FOR_TO
81135: IFFALSE 81212
// begin if not ValidHex ( _x , _y ) then
81137: LD_VAR 0 5
81141: PPUSH
81142: LD_VAR 0 6
81146: PPUSH
81147: CALL_OW 488
81151: NOT
81152: IFFALSE 81156
// continue ;
81154: GO 81134
// if GetResourceTypeXY ( _x , _y ) then
81156: LD_VAR 0 5
81160: PPUSH
81161: LD_VAR 0 6
81165: PPUSH
81166: CALL_OW 283
81170: IFFALSE 81210
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81172: LD_ADDR_VAR 0 4
81176: PUSH
81177: LD_VAR 0 4
81181: PPUSH
81182: LD_VAR 0 4
81186: PUSH
81187: LD_INT 1
81189: PLUS
81190: PPUSH
81191: LD_VAR 0 5
81195: PUSH
81196: LD_VAR 0 6
81200: PUSH
81201: EMPTY
81202: LIST
81203: LIST
81204: PPUSH
81205: CALL_OW 1
81209: ST_TO_ADDR
// end ;
81210: GO 81134
81212: POP
81213: POP
81214: GO 81114
81216: POP
81217: POP
// end ;
81218: LD_VAR 0 4
81222: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81223: LD_INT 0
81225: PPUSH
81226: PPUSH
81227: PPUSH
81228: PPUSH
81229: PPUSH
81230: PPUSH
81231: PPUSH
81232: PPUSH
// if not units then
81233: LD_VAR 0 1
81237: NOT
81238: IFFALSE 81242
// exit ;
81240: GO 81766
// result := UnitFilter ( units , [ f_ok ] ) ;
81242: LD_ADDR_VAR 0 3
81246: PUSH
81247: LD_VAR 0 1
81251: PPUSH
81252: LD_INT 50
81254: PUSH
81255: EMPTY
81256: LIST
81257: PPUSH
81258: CALL_OW 72
81262: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81263: LD_ADDR_VAR 0 8
81267: PUSH
81268: LD_VAR 0 1
81272: PUSH
81273: LD_INT 1
81275: ARRAY
81276: PPUSH
81277: CALL_OW 255
81281: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81282: LD_ADDR_VAR 0 10
81286: PUSH
81287: LD_INT 29
81289: PUSH
81290: LD_INT 91
81292: PUSH
81293: LD_INT 49
81295: PUSH
81296: EMPTY
81297: LIST
81298: LIST
81299: LIST
81300: ST_TO_ADDR
// if not result then
81301: LD_VAR 0 3
81305: NOT
81306: IFFALSE 81310
// exit ;
81308: GO 81766
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81310: LD_ADDR_VAR 0 5
81314: PUSH
81315: LD_INT 81
81317: PUSH
81318: LD_VAR 0 8
81322: PUSH
81323: EMPTY
81324: LIST
81325: LIST
81326: PPUSH
81327: CALL_OW 69
81331: ST_TO_ADDR
// for i in result do
81332: LD_ADDR_VAR 0 4
81336: PUSH
81337: LD_VAR 0 3
81341: PUSH
81342: FOR_IN
81343: IFFALSE 81764
// begin tag := GetTag ( i ) + 1 ;
81345: LD_ADDR_VAR 0 9
81349: PUSH
81350: LD_VAR 0 4
81354: PPUSH
81355: CALL_OW 110
81359: PUSH
81360: LD_INT 1
81362: PLUS
81363: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81364: LD_ADDR_VAR 0 7
81368: PUSH
81369: LD_VAR 0 4
81373: PPUSH
81374: CALL_OW 250
81378: PPUSH
81379: LD_VAR 0 4
81383: PPUSH
81384: CALL_OW 251
81388: PPUSH
81389: LD_INT 6
81391: PPUSH
81392: CALL 80965 0 3
81396: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81397: LD_VAR 0 4
81401: PPUSH
81402: CALL_OW 247
81406: PUSH
81407: LD_INT 2
81409: EQUAL
81410: PUSH
81411: LD_VAR 0 7
81415: AND
81416: PUSH
81417: LD_VAR 0 4
81421: PPUSH
81422: CALL_OW 264
81426: PUSH
81427: LD_VAR 0 10
81431: IN
81432: NOT
81433: AND
81434: IFFALSE 81473
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81436: LD_VAR 0 4
81440: PPUSH
81441: LD_VAR 0 7
81445: PUSH
81446: LD_INT 1
81448: ARRAY
81449: PUSH
81450: LD_INT 1
81452: ARRAY
81453: PPUSH
81454: LD_VAR 0 7
81458: PUSH
81459: LD_INT 1
81461: ARRAY
81462: PUSH
81463: LD_INT 2
81465: ARRAY
81466: PPUSH
81467: CALL_OW 116
81471: GO 81762
// if path > tag then
81473: LD_VAR 0 2
81477: PUSH
81478: LD_VAR 0 9
81482: GREATER
81483: IFFALSE 81691
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81485: LD_ADDR_VAR 0 6
81489: PUSH
81490: LD_VAR 0 5
81494: PPUSH
81495: LD_INT 91
81497: PUSH
81498: LD_VAR 0 4
81502: PUSH
81503: LD_INT 8
81505: PUSH
81506: EMPTY
81507: LIST
81508: LIST
81509: LIST
81510: PPUSH
81511: CALL_OW 72
81515: ST_TO_ADDR
// if nearEnemy then
81516: LD_VAR 0 6
81520: IFFALSE 81589
// begin if GetWeapon ( i ) = ru_time_lapser then
81522: LD_VAR 0 4
81526: PPUSH
81527: CALL_OW 264
81531: PUSH
81532: LD_INT 49
81534: EQUAL
81535: IFFALSE 81563
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81537: LD_VAR 0 4
81541: PPUSH
81542: LD_VAR 0 6
81546: PPUSH
81547: LD_VAR 0 4
81551: PPUSH
81552: CALL_OW 74
81556: PPUSH
81557: CALL_OW 112
81561: GO 81587
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81563: LD_VAR 0 4
81567: PPUSH
81568: LD_VAR 0 6
81572: PPUSH
81573: LD_VAR 0 4
81577: PPUSH
81578: CALL_OW 74
81582: PPUSH
81583: CALL 82691 0 2
// end else
81587: GO 81689
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81589: LD_VAR 0 4
81593: PPUSH
81594: LD_VAR 0 2
81598: PUSH
81599: LD_VAR 0 9
81603: ARRAY
81604: PUSH
81605: LD_INT 1
81607: ARRAY
81608: PPUSH
81609: LD_VAR 0 2
81613: PUSH
81614: LD_VAR 0 9
81618: ARRAY
81619: PUSH
81620: LD_INT 2
81622: ARRAY
81623: PPUSH
81624: CALL_OW 297
81628: PUSH
81629: LD_INT 6
81631: GREATER
81632: IFFALSE 81675
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81634: LD_VAR 0 4
81638: PPUSH
81639: LD_VAR 0 2
81643: PUSH
81644: LD_VAR 0 9
81648: ARRAY
81649: PUSH
81650: LD_INT 1
81652: ARRAY
81653: PPUSH
81654: LD_VAR 0 2
81658: PUSH
81659: LD_VAR 0 9
81663: ARRAY
81664: PUSH
81665: LD_INT 2
81667: ARRAY
81668: PPUSH
81669: CALL_OW 114
81673: GO 81689
// SetTag ( i , tag ) ;
81675: LD_VAR 0 4
81679: PPUSH
81680: LD_VAR 0 9
81684: PPUSH
81685: CALL_OW 109
// end else
81689: GO 81762
// if enemy then
81691: LD_VAR 0 5
81695: IFFALSE 81762
// begin if GetWeapon ( i ) = ru_time_lapser then
81697: LD_VAR 0 4
81701: PPUSH
81702: CALL_OW 264
81706: PUSH
81707: LD_INT 49
81709: EQUAL
81710: IFFALSE 81738
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81712: LD_VAR 0 4
81716: PPUSH
81717: LD_VAR 0 5
81721: PPUSH
81722: LD_VAR 0 4
81726: PPUSH
81727: CALL_OW 74
81731: PPUSH
81732: CALL_OW 112
81736: GO 81762
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81738: LD_VAR 0 4
81742: PPUSH
81743: LD_VAR 0 5
81747: PPUSH
81748: LD_VAR 0 4
81752: PPUSH
81753: CALL_OW 74
81757: PPUSH
81758: CALL 82691 0 2
// end ; end ;
81762: GO 81342
81764: POP
81765: POP
// end ;
81766: LD_VAR 0 3
81770: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81771: LD_INT 0
81773: PPUSH
81774: PPUSH
81775: PPUSH
// if not unit or IsInUnit ( unit ) then
81776: LD_VAR 0 1
81780: NOT
81781: PUSH
81782: LD_VAR 0 1
81786: PPUSH
81787: CALL_OW 310
81791: OR
81792: IFFALSE 81796
// exit ;
81794: GO 81887
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81796: LD_ADDR_VAR 0 4
81800: PUSH
81801: LD_VAR 0 1
81805: PPUSH
81806: CALL_OW 250
81810: PPUSH
81811: LD_VAR 0 2
81815: PPUSH
81816: LD_INT 1
81818: PPUSH
81819: CALL_OW 272
81823: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81824: LD_ADDR_VAR 0 5
81828: PUSH
81829: LD_VAR 0 1
81833: PPUSH
81834: CALL_OW 251
81838: PPUSH
81839: LD_VAR 0 2
81843: PPUSH
81844: LD_INT 1
81846: PPUSH
81847: CALL_OW 273
81851: ST_TO_ADDR
// if ValidHex ( x , y ) then
81852: LD_VAR 0 4
81856: PPUSH
81857: LD_VAR 0 5
81861: PPUSH
81862: CALL_OW 488
81866: IFFALSE 81887
// ComTurnXY ( unit , x , y ) ;
81868: LD_VAR 0 1
81872: PPUSH
81873: LD_VAR 0 4
81877: PPUSH
81878: LD_VAR 0 5
81882: PPUSH
81883: CALL_OW 118
// end ;
81887: LD_VAR 0 3
81891: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81892: LD_INT 0
81894: PPUSH
81895: PPUSH
// result := false ;
81896: LD_ADDR_VAR 0 3
81900: PUSH
81901: LD_INT 0
81903: ST_TO_ADDR
// if not units then
81904: LD_VAR 0 2
81908: NOT
81909: IFFALSE 81913
// exit ;
81911: GO 81958
// for i in units do
81913: LD_ADDR_VAR 0 4
81917: PUSH
81918: LD_VAR 0 2
81922: PUSH
81923: FOR_IN
81924: IFFALSE 81956
// if See ( side , i ) then
81926: LD_VAR 0 1
81930: PPUSH
81931: LD_VAR 0 4
81935: PPUSH
81936: CALL_OW 292
81940: IFFALSE 81954
// begin result := true ;
81942: LD_ADDR_VAR 0 3
81946: PUSH
81947: LD_INT 1
81949: ST_TO_ADDR
// exit ;
81950: POP
81951: POP
81952: GO 81958
// end ;
81954: GO 81923
81956: POP
81957: POP
// end ;
81958: LD_VAR 0 3
81962: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81963: LD_INT 0
81965: PPUSH
81966: PPUSH
81967: PPUSH
81968: PPUSH
// if not unit or not points then
81969: LD_VAR 0 1
81973: NOT
81974: PUSH
81975: LD_VAR 0 2
81979: NOT
81980: OR
81981: IFFALSE 81985
// exit ;
81983: GO 82075
// dist := 99999 ;
81985: LD_ADDR_VAR 0 5
81989: PUSH
81990: LD_INT 99999
81992: ST_TO_ADDR
// for i in points do
81993: LD_ADDR_VAR 0 4
81997: PUSH
81998: LD_VAR 0 2
82002: PUSH
82003: FOR_IN
82004: IFFALSE 82073
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82006: LD_ADDR_VAR 0 6
82010: PUSH
82011: LD_VAR 0 1
82015: PPUSH
82016: LD_VAR 0 4
82020: PUSH
82021: LD_INT 1
82023: ARRAY
82024: PPUSH
82025: LD_VAR 0 4
82029: PUSH
82030: LD_INT 2
82032: ARRAY
82033: PPUSH
82034: CALL_OW 297
82038: ST_TO_ADDR
// if tmpDist < dist then
82039: LD_VAR 0 6
82043: PUSH
82044: LD_VAR 0 5
82048: LESS
82049: IFFALSE 82071
// begin result := i ;
82051: LD_ADDR_VAR 0 3
82055: PUSH
82056: LD_VAR 0 4
82060: ST_TO_ADDR
// dist := tmpDist ;
82061: LD_ADDR_VAR 0 5
82065: PUSH
82066: LD_VAR 0 6
82070: ST_TO_ADDR
// end ; end ;
82071: GO 82003
82073: POP
82074: POP
// end ;
82075: LD_VAR 0 3
82079: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82080: LD_INT 0
82082: PPUSH
// uc_side := side ;
82083: LD_ADDR_OWVAR 20
82087: PUSH
82088: LD_VAR 0 1
82092: ST_TO_ADDR
// uc_nation := 3 ;
82093: LD_ADDR_OWVAR 21
82097: PUSH
82098: LD_INT 3
82100: ST_TO_ADDR
// vc_chassis := 25 ;
82101: LD_ADDR_OWVAR 37
82105: PUSH
82106: LD_INT 25
82108: ST_TO_ADDR
// vc_engine := engine_siberite ;
82109: LD_ADDR_OWVAR 39
82113: PUSH
82114: LD_INT 3
82116: ST_TO_ADDR
// vc_control := control_computer ;
82117: LD_ADDR_OWVAR 38
82121: PUSH
82122: LD_INT 3
82124: ST_TO_ADDR
// vc_weapon := 59 ;
82125: LD_ADDR_OWVAR 40
82129: PUSH
82130: LD_INT 59
82132: ST_TO_ADDR
// result := CreateVehicle ;
82133: LD_ADDR_VAR 0 5
82137: PUSH
82138: CALL_OW 45
82142: ST_TO_ADDR
// SetDir ( result , d ) ;
82143: LD_VAR 0 5
82147: PPUSH
82148: LD_VAR 0 4
82152: PPUSH
82153: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82157: LD_VAR 0 5
82161: PPUSH
82162: LD_VAR 0 2
82166: PPUSH
82167: LD_VAR 0 3
82171: PPUSH
82172: LD_INT 0
82174: PPUSH
82175: CALL_OW 48
// end ;
82179: LD_VAR 0 5
82183: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82184: LD_INT 0
82186: PPUSH
82187: PPUSH
82188: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82189: LD_ADDR_VAR 0 2
82193: PUSH
82194: LD_INT 0
82196: PUSH
82197: LD_INT 0
82199: PUSH
82200: LD_INT 0
82202: PUSH
82203: LD_INT 0
82205: PUSH
82206: EMPTY
82207: LIST
82208: LIST
82209: LIST
82210: LIST
82211: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82212: LD_VAR 0 1
82216: NOT
82217: PUSH
82218: LD_VAR 0 1
82222: PPUSH
82223: CALL_OW 264
82227: PUSH
82228: LD_INT 12
82230: PUSH
82231: LD_INT 51
82233: PUSH
82234: LD_INT 32
82236: PUSH
82237: LD_INT 89
82239: PUSH
82240: EMPTY
82241: LIST
82242: LIST
82243: LIST
82244: LIST
82245: IN
82246: NOT
82247: OR
82248: IFFALSE 82252
// exit ;
82250: GO 82350
// for i := 1 to 3 do
82252: LD_ADDR_VAR 0 3
82256: PUSH
82257: DOUBLE
82258: LD_INT 1
82260: DEC
82261: ST_TO_ADDR
82262: LD_INT 3
82264: PUSH
82265: FOR_TO
82266: IFFALSE 82348
// begin tmp := GetCargo ( cargo , i ) ;
82268: LD_ADDR_VAR 0 4
82272: PUSH
82273: LD_VAR 0 1
82277: PPUSH
82278: LD_VAR 0 3
82282: PPUSH
82283: CALL_OW 289
82287: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82288: LD_ADDR_VAR 0 2
82292: PUSH
82293: LD_VAR 0 2
82297: PPUSH
82298: LD_VAR 0 3
82302: PPUSH
82303: LD_VAR 0 4
82307: PPUSH
82308: CALL_OW 1
82312: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82313: LD_ADDR_VAR 0 2
82317: PUSH
82318: LD_VAR 0 2
82322: PPUSH
82323: LD_INT 4
82325: PPUSH
82326: LD_VAR 0 2
82330: PUSH
82331: LD_INT 4
82333: ARRAY
82334: PUSH
82335: LD_VAR 0 4
82339: PLUS
82340: PPUSH
82341: CALL_OW 1
82345: ST_TO_ADDR
// end ;
82346: GO 82265
82348: POP
82349: POP
// end ;
82350: LD_VAR 0 2
82354: RET
// export function Length ( array ) ; begin
82355: LD_INT 0
82357: PPUSH
// result := array + 0 ;
82358: LD_ADDR_VAR 0 2
82362: PUSH
82363: LD_VAR 0 1
82367: PUSH
82368: LD_INT 0
82370: PLUS
82371: ST_TO_ADDR
// end ;
82372: LD_VAR 0 2
82376: RET
// export function PrepareArray ( array ) ; begin
82377: LD_INT 0
82379: PPUSH
// result := array diff 0 ;
82380: LD_ADDR_VAR 0 2
82384: PUSH
82385: LD_VAR 0 1
82389: PUSH
82390: LD_INT 0
82392: DIFF
82393: ST_TO_ADDR
// if not result [ 1 ] then
82394: LD_VAR 0 2
82398: PUSH
82399: LD_INT 1
82401: ARRAY
82402: NOT
82403: IFFALSE 82423
// result := Delete ( result , 1 ) ;
82405: LD_ADDR_VAR 0 2
82409: PUSH
82410: LD_VAR 0 2
82414: PPUSH
82415: LD_INT 1
82417: PPUSH
82418: CALL_OW 3
82422: ST_TO_ADDR
// end ;
82423: LD_VAR 0 2
82427: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82428: LD_INT 0
82430: PPUSH
82431: PPUSH
82432: PPUSH
82433: PPUSH
// sibRocketRange := 25 ;
82434: LD_ADDR_VAR 0 6
82438: PUSH
82439: LD_INT 25
82441: ST_TO_ADDR
// result := false ;
82442: LD_ADDR_VAR 0 4
82446: PUSH
82447: LD_INT 0
82449: ST_TO_ADDR
// for i := 0 to 5 do
82450: LD_ADDR_VAR 0 5
82454: PUSH
82455: DOUBLE
82456: LD_INT 0
82458: DEC
82459: ST_TO_ADDR
82460: LD_INT 5
82462: PUSH
82463: FOR_TO
82464: IFFALSE 82531
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82466: LD_VAR 0 1
82470: PPUSH
82471: LD_VAR 0 5
82475: PPUSH
82476: LD_VAR 0 6
82480: PPUSH
82481: CALL_OW 272
82485: PPUSH
82486: LD_VAR 0 2
82490: PPUSH
82491: LD_VAR 0 5
82495: PPUSH
82496: LD_VAR 0 6
82500: PPUSH
82501: CALL_OW 273
82505: PPUSH
82506: LD_VAR 0 3
82510: PPUSH
82511: CALL_OW 309
82515: IFFALSE 82529
// begin result := true ;
82517: LD_ADDR_VAR 0 4
82521: PUSH
82522: LD_INT 1
82524: ST_TO_ADDR
// exit ;
82525: POP
82526: POP
82527: GO 82533
// end ;
82529: GO 82463
82531: POP
82532: POP
// end ;
82533: LD_VAR 0 4
82537: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82538: LD_INT 0
82540: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82541: LD_VAR 0 1
82545: PPUSH
82546: LD_VAR 0 2
82550: PPUSH
82551: LD_INT 0
82553: PPUSH
82554: LD_INT 0
82556: PPUSH
82557: LD_INT 1
82559: PPUSH
82560: LD_INT 0
82562: PPUSH
82563: CALL_OW 587
// end ;
82567: LD_VAR 0 3
82571: RET
// export function CenterOnNow ( unit ) ; begin
82572: LD_INT 0
82574: PPUSH
// result := IsInUnit ( unit ) ;
82575: LD_ADDR_VAR 0 2
82579: PUSH
82580: LD_VAR 0 1
82584: PPUSH
82585: CALL_OW 310
82589: ST_TO_ADDR
// if not result then
82590: LD_VAR 0 2
82594: NOT
82595: IFFALSE 82607
// result := unit ;
82597: LD_ADDR_VAR 0 2
82601: PUSH
82602: LD_VAR 0 1
82606: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82607: LD_VAR 0 1
82611: PPUSH
82612: CALL_OW 87
// end ;
82616: LD_VAR 0 2
82620: RET
// export function ComMoveHex ( unit , hex ) ; begin
82621: LD_INT 0
82623: PPUSH
// if not hex then
82624: LD_VAR 0 2
82628: NOT
82629: IFFALSE 82633
// exit ;
82631: GO 82686
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82633: LD_VAR 0 2
82637: PUSH
82638: LD_INT 1
82640: ARRAY
82641: PPUSH
82642: LD_VAR 0 2
82646: PUSH
82647: LD_INT 2
82649: ARRAY
82650: PPUSH
82651: CALL_OW 428
82655: IFFALSE 82659
// exit ;
82657: GO 82686
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82659: LD_VAR 0 1
82663: PPUSH
82664: LD_VAR 0 2
82668: PUSH
82669: LD_INT 1
82671: ARRAY
82672: PPUSH
82673: LD_VAR 0 2
82677: PUSH
82678: LD_INT 2
82680: ARRAY
82681: PPUSH
82682: CALL_OW 111
// end ;
82686: LD_VAR 0 3
82690: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82691: LD_INT 0
82693: PPUSH
82694: PPUSH
82695: PPUSH
// if not unit or not enemy then
82696: LD_VAR 0 1
82700: NOT
82701: PUSH
82702: LD_VAR 0 2
82706: NOT
82707: OR
82708: IFFALSE 82712
// exit ;
82710: GO 82836
// x := GetX ( enemy ) ;
82712: LD_ADDR_VAR 0 4
82716: PUSH
82717: LD_VAR 0 2
82721: PPUSH
82722: CALL_OW 250
82726: ST_TO_ADDR
// y := GetY ( enemy ) ;
82727: LD_ADDR_VAR 0 5
82731: PUSH
82732: LD_VAR 0 2
82736: PPUSH
82737: CALL_OW 251
82741: ST_TO_ADDR
// if ValidHex ( x , y ) then
82742: LD_VAR 0 4
82746: PPUSH
82747: LD_VAR 0 5
82751: PPUSH
82752: CALL_OW 488
82756: IFFALSE 82836
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
82758: LD_VAR 0 2
82762: PPUSH
82763: CALL_OW 247
82767: PUSH
82768: LD_INT 3
82770: PUSH
82771: LD_INT 2
82773: PUSH
82774: EMPTY
82775: LIST
82776: LIST
82777: IN
82778: PUSH
82779: LD_VAR 0 1
82783: PPUSH
82784: CALL_OW 255
82788: PPUSH
82789: LD_VAR 0 2
82793: PPUSH
82794: CALL_OW 292
82798: AND
82799: IFFALSE 82817
// ComAttackUnit ( unit , enemy ) else
82801: LD_VAR 0 1
82805: PPUSH
82806: LD_VAR 0 2
82810: PPUSH
82811: CALL_OW 115
82815: GO 82836
// ComAgressiveMove ( unit , x , y ) ;
82817: LD_VAR 0 1
82821: PPUSH
82822: LD_VAR 0 4
82826: PPUSH
82827: LD_VAR 0 5
82831: PPUSH
82832: CALL_OW 114
// end ;
82836: LD_VAR 0 3
82840: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
82841: LD_INT 0
82843: PPUSH
82844: PPUSH
82845: PPUSH
// list := AreaToList ( area , 0 ) ;
82846: LD_ADDR_VAR 0 5
82850: PUSH
82851: LD_VAR 0 1
82855: PPUSH
82856: LD_INT 0
82858: PPUSH
82859: CALL_OW 517
82863: ST_TO_ADDR
// if not list then
82864: LD_VAR 0 5
82868: NOT
82869: IFFALSE 82873
// exit ;
82871: GO 83003
// if all then
82873: LD_VAR 0 2
82877: IFFALSE 82965
// begin for i := 1 to list [ 1 ] do
82879: LD_ADDR_VAR 0 4
82883: PUSH
82884: DOUBLE
82885: LD_INT 1
82887: DEC
82888: ST_TO_ADDR
82889: LD_VAR 0 5
82893: PUSH
82894: LD_INT 1
82896: ARRAY
82897: PUSH
82898: FOR_TO
82899: IFFALSE 82961
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
82901: LD_ADDR_VAR 0 3
82905: PUSH
82906: LD_VAR 0 3
82910: PPUSH
82911: LD_VAR 0 3
82915: PUSH
82916: LD_INT 1
82918: PLUS
82919: PPUSH
82920: LD_VAR 0 5
82924: PUSH
82925: LD_INT 1
82927: ARRAY
82928: PUSH
82929: LD_VAR 0 4
82933: ARRAY
82934: PUSH
82935: LD_VAR 0 5
82939: PUSH
82940: LD_INT 2
82942: ARRAY
82943: PUSH
82944: LD_VAR 0 4
82948: ARRAY
82949: PUSH
82950: EMPTY
82951: LIST
82952: LIST
82953: PPUSH
82954: CALL_OW 1
82958: ST_TO_ADDR
82959: GO 82898
82961: POP
82962: POP
// exit ;
82963: GO 83003
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
82965: LD_ADDR_VAR 0 3
82969: PUSH
82970: LD_VAR 0 5
82974: PUSH
82975: LD_INT 1
82977: ARRAY
82978: PUSH
82979: LD_INT 1
82981: ARRAY
82982: PUSH
82983: LD_VAR 0 5
82987: PUSH
82988: LD_INT 2
82990: ARRAY
82991: PUSH
82992: LD_INT 1
82994: ARRAY
82995: PUSH
82996: EMPTY
82997: LIST
82998: LIST
82999: PUSH
83000: EMPTY
83001: LIST
83002: ST_TO_ADDR
// end ;
83003: LD_VAR 0 3
83007: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
83008: LD_INT 0
83010: PPUSH
83011: PPUSH
// list := AreaToList ( area , 0 ) ;
83012: LD_ADDR_VAR 0 4
83016: PUSH
83017: LD_VAR 0 1
83021: PPUSH
83022: LD_INT 0
83024: PPUSH
83025: CALL_OW 517
83029: ST_TO_ADDR
// if not list then
83030: LD_VAR 0 4
83034: NOT
83035: IFFALSE 83039
// exit ;
83037: GO 83080
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
83039: LD_ADDR_VAR 0 3
83043: PUSH
83044: LD_VAR 0 4
83048: PUSH
83049: LD_INT 1
83051: ARRAY
83052: PUSH
83053: LD_INT 1
83055: ARRAY
83056: PUSH
83057: LD_VAR 0 4
83061: PUSH
83062: LD_INT 2
83064: ARRAY
83065: PUSH
83066: LD_INT 1
83068: ARRAY
83069: PUSH
83070: LD_VAR 0 2
83074: PUSH
83075: EMPTY
83076: LIST
83077: LIST
83078: LIST
83079: ST_TO_ADDR
// end ;
83080: LD_VAR 0 3
83084: RET
// export function First ( array ) ; begin
83085: LD_INT 0
83087: PPUSH
// if not array then
83088: LD_VAR 0 1
83092: NOT
83093: IFFALSE 83097
// exit ;
83095: GO 83111
// result := array [ 1 ] ;
83097: LD_ADDR_VAR 0 2
83101: PUSH
83102: LD_VAR 0 1
83106: PUSH
83107: LD_INT 1
83109: ARRAY
83110: ST_TO_ADDR
// end ;
83111: LD_VAR 0 2
83115: RET
// export function Last ( array ) ; begin
83116: LD_INT 0
83118: PPUSH
// if not array then
83119: LD_VAR 0 1
83123: NOT
83124: IFFALSE 83128
// exit ;
83126: GO 83144
// result := array [ array ] ;
83128: LD_ADDR_VAR 0 2
83132: PUSH
83133: LD_VAR 0 1
83137: PUSH
83138: LD_VAR 0 1
83142: ARRAY
83143: ST_TO_ADDR
// end ;
83144: LD_VAR 0 2
83148: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
83149: LD_INT 0
83151: PPUSH
83152: PPUSH
// result := [ ] ;
83153: LD_ADDR_VAR 0 5
83157: PUSH
83158: EMPTY
83159: ST_TO_ADDR
// if not array then
83160: LD_VAR 0 1
83164: NOT
83165: IFFALSE 83169
// exit ;
83167: GO 83281
// for i := 1 to array do
83169: LD_ADDR_VAR 0 6
83173: PUSH
83174: DOUBLE
83175: LD_INT 1
83177: DEC
83178: ST_TO_ADDR
83179: LD_VAR 0 1
83183: PUSH
83184: FOR_TO
83185: IFFALSE 83279
// if array [ i ] [ index ] = value then
83187: LD_VAR 0 1
83191: PUSH
83192: LD_VAR 0 6
83196: ARRAY
83197: PUSH
83198: LD_VAR 0 2
83202: ARRAY
83203: PUSH
83204: LD_VAR 0 3
83208: EQUAL
83209: IFFALSE 83277
// begin if indexColumn then
83211: LD_VAR 0 4
83215: IFFALSE 83251
// result := Join ( result , array [ i ] [ indexColumn ] ) else
83217: LD_ADDR_VAR 0 5
83221: PUSH
83222: LD_VAR 0 5
83226: PPUSH
83227: LD_VAR 0 1
83231: PUSH
83232: LD_VAR 0 6
83236: ARRAY
83237: PUSH
83238: LD_VAR 0 4
83242: ARRAY
83243: PPUSH
83244: CALL 78619 0 2
83248: ST_TO_ADDR
83249: GO 83277
// result := Join ( result , array [ i ] ) ;
83251: LD_ADDR_VAR 0 5
83255: PUSH
83256: LD_VAR 0 5
83260: PPUSH
83261: LD_VAR 0 1
83265: PUSH
83266: LD_VAR 0 6
83270: ARRAY
83271: PPUSH
83272: CALL 78619 0 2
83276: ST_TO_ADDR
// end ;
83277: GO 83184
83279: POP
83280: POP
// end ;
83281: LD_VAR 0 5
83285: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83286: LD_INT 0
83288: PPUSH
83289: PPUSH
83290: PPUSH
// if btype = b_depot then
83291: LD_VAR 0 2
83295: PUSH
83296: LD_INT 0
83298: EQUAL
83299: IFFALSE 83311
// begin result := true ;
83301: LD_ADDR_VAR 0 3
83305: PUSH
83306: LD_INT 1
83308: ST_TO_ADDR
// exit ;
83309: GO 83427
// end ; pom := GetBase ( depot ) ;
83311: LD_ADDR_VAR 0 4
83315: PUSH
83316: LD_VAR 0 1
83320: PPUSH
83321: CALL_OW 274
83325: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83326: LD_ADDR_VAR 0 5
83330: PUSH
83331: LD_VAR 0 2
83335: PPUSH
83336: LD_VAR 0 1
83340: PPUSH
83341: CALL_OW 248
83345: PPUSH
83346: CALL_OW 450
83350: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83351: LD_ADDR_VAR 0 3
83355: PUSH
83356: LD_VAR 0 4
83360: PPUSH
83361: LD_INT 1
83363: PPUSH
83364: CALL_OW 275
83368: PUSH
83369: LD_VAR 0 5
83373: PUSH
83374: LD_INT 1
83376: ARRAY
83377: GREATEREQUAL
83378: PUSH
83379: LD_VAR 0 4
83383: PPUSH
83384: LD_INT 2
83386: PPUSH
83387: CALL_OW 275
83391: PUSH
83392: LD_VAR 0 5
83396: PUSH
83397: LD_INT 2
83399: ARRAY
83400: GREATEREQUAL
83401: AND
83402: PUSH
83403: LD_VAR 0 4
83407: PPUSH
83408: LD_INT 3
83410: PPUSH
83411: CALL_OW 275
83415: PUSH
83416: LD_VAR 0 5
83420: PUSH
83421: LD_INT 3
83423: ARRAY
83424: GREATEREQUAL
83425: AND
83426: ST_TO_ADDR
// end ;
83427: LD_VAR 0 3
83431: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
83432: LD_INT 0
83434: PPUSH
// if not vehicles or not parkingPoint then
83435: LD_VAR 0 1
83439: NOT
83440: PUSH
83441: LD_VAR 0 2
83445: NOT
83446: OR
83447: IFFALSE 83451
// exit ;
83449: GO 83549
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
83451: LD_ADDR_VAR 0 1
83455: PUSH
83456: LD_VAR 0 1
83460: PPUSH
83461: LD_INT 50
83463: PUSH
83464: EMPTY
83465: LIST
83466: PUSH
83467: LD_INT 3
83469: PUSH
83470: LD_INT 92
83472: PUSH
83473: LD_VAR 0 2
83477: PUSH
83478: LD_INT 1
83480: ARRAY
83481: PUSH
83482: LD_VAR 0 2
83486: PUSH
83487: LD_INT 2
83489: ARRAY
83490: PUSH
83491: LD_INT 8
83493: PUSH
83494: EMPTY
83495: LIST
83496: LIST
83497: LIST
83498: LIST
83499: PUSH
83500: EMPTY
83501: LIST
83502: LIST
83503: PUSH
83504: EMPTY
83505: LIST
83506: LIST
83507: PPUSH
83508: CALL_OW 72
83512: ST_TO_ADDR
// if not vehicles then
83513: LD_VAR 0 1
83517: NOT
83518: IFFALSE 83522
// exit ;
83520: GO 83549
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
83522: LD_VAR 0 1
83526: PPUSH
83527: LD_VAR 0 2
83531: PUSH
83532: LD_INT 1
83534: ARRAY
83535: PPUSH
83536: LD_VAR 0 2
83540: PUSH
83541: LD_INT 2
83543: ARRAY
83544: PPUSH
83545: CALL_OW 111
// end ; end_of_file
83549: LD_VAR 0 3
83553: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83554: LD_VAR 0 1
83558: PUSH
83559: LD_INT 200
83561: DOUBLE
83562: GREATEREQUAL
83563: IFFALSE 83571
83565: LD_INT 299
83567: DOUBLE
83568: LESSEQUAL
83569: IFTRUE 83573
83571: GO 83605
83573: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83574: LD_VAR 0 1
83578: PPUSH
83579: LD_VAR 0 2
83583: PPUSH
83584: LD_VAR 0 3
83588: PPUSH
83589: LD_VAR 0 4
83593: PPUSH
83594: LD_VAR 0 5
83598: PPUSH
83599: CALL 36410 0 5
83603: GO 83682
83605: LD_INT 300
83607: DOUBLE
83608: GREATEREQUAL
83609: IFFALSE 83617
83611: LD_INT 399
83613: DOUBLE
83614: LESSEQUAL
83615: IFTRUE 83619
83617: GO 83681
83619: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83620: LD_VAR 0 1
83624: PPUSH
83625: LD_VAR 0 2
83629: PPUSH
83630: LD_VAR 0 3
83634: PPUSH
83635: LD_VAR 0 4
83639: PPUSH
83640: LD_VAR 0 5
83644: PPUSH
83645: LD_VAR 0 6
83649: PPUSH
83650: LD_VAR 0 7
83654: PPUSH
83655: LD_VAR 0 8
83659: PPUSH
83660: LD_VAR 0 9
83664: PPUSH
83665: LD_VAR 0 10
83669: PPUSH
83670: LD_VAR 0 11
83674: PPUSH
83675: CALL 32735 0 11
83679: GO 83682
83681: POP
// end ;
83682: PPOPN 11
83684: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83685: LD_VAR 0 1
83689: PPUSH
83690: LD_VAR 0 2
83694: PPUSH
83695: LD_VAR 0 3
83699: PPUSH
83700: LD_VAR 0 4
83704: PPUSH
83705: LD_VAR 0 5
83709: PPUSH
83710: CALL 36146 0 5
// end ; end_of_file
83714: PPOPN 5
83716: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83717: LD_VAR 0 1
83721: PPUSH
83722: LD_VAR 0 2
83726: PPUSH
83727: LD_VAR 0 3
83731: PPUSH
83732: LD_VAR 0 4
83736: PPUSH
83737: LD_VAR 0 5
83741: PPUSH
83742: LD_VAR 0 6
83746: PPUSH
83747: CALL 20387 0 6
// end ;
83751: PPOPN 6
83753: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83754: LD_INT 0
83756: PPUSH
// begin if not units then
83757: LD_VAR 0 1
83761: NOT
83762: IFFALSE 83766
// exit ;
83764: GO 83766
// end ;
83766: PPOPN 7
83768: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83769: CALL 20291 0 0
// end ;
83773: PPOPN 1
83775: END
